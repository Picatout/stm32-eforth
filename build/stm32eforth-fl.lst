ARM GAS  stm32eforth-fl.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	* 
   8              	*	This version use indirect threaded model. This model enable 
   9              	*	leaving the core Forth system in FLASH memory while the users 
  10              	*	definitions reside in RAM. 
  11              	*	R0 is used as IP , inner interpreter address pointer 
  12              	*	R4 is used as WP , working register 
  13              	*
  14              	*     Use USART1 for console I/O
  15              	*     port config: 115200 8N1 
  16              	*     TX on  PA9,  RX on PA10  
  17              	*
  18              	*     eForth is executed from flash, not copied to RAM
  19              	*     eForth use main stack R13 as return stack (thread stack not used) 
  20              	*
  21              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  22              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  23              	*     a 128 bytes tib is reserved below flwr_buffer 
  24              	*     Forth dstack is below tib and reserve 512 bytes 
  25              	*   
  26              	******************************************************
  27              	
  28              	*****************************************************************************
  29              	*	STM32eForth version 7.20
  30              	*	Chen-Hanson Ting,  July 2014
  31              	
  32              	*	Subroutine Threaded Forth Model
  33              	*	Adapted to STM32F407-Discovery Board
  34              	*	Assembled by Keil uVision 5.10
  35              	
  36              	*	Version 4.03
  37              	*	Direct Threaded Forth Model
  38              	*	Derived from 80386 eForth versin 4.02
  39              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  40              	
  41              	*	Subroutine thread (Branch-Link) model
  42              	*	  Register assignments
  43              	*	IP	 	R0 	*scratch
  44              	*	SP	 	R1  * data stack pointer
  45              	*	RP	 	R2 * return stack pointer 
  46              	*	UP	 	R3 
  47              	*	WP	 	R4	*scratch 
  48              	*	TOS	 	R5  * top of data stack
  49              	*	XP	 	R6 	*scratch
  50              	*	YP	 	R7	*scratch
  51              	*	  All Forth words are called by 
  52              	*	BL.W	addr
  53              	*	  All low level code words are terminaled by
  54              	*	BX	LR 	(_RET)
  55              	*	  All high level Forth words start with
  56              	*	STRFD	RP!,{LR}	(_NEST)
  57              	*	  All high level Forth words end with
ARM GAS  stm32eforth-fl.s 			page 2


  58              	*	LDRFD	RP!,{PC}	(_UNNEST)
  59              	*	  Top of data stack is cached in R5
  60              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  61              	*	TX on PA9 and RX on PA10.
  62              	
  63              	*	Version 5.02, 09oct04cht
  64              	*	fOR ADuC702x from Analog Devices
  65              	*	Version 6.01, 10apr08cht a
  66              	*	.p2align 2 to at91sam7x256
  67              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  68              	*	Running under uVision3 RealView from Keil
  69              	*	Version 7.01, 29jun14cht
  70              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  71              	*	.p2aligned to eForth 2 Model
  72              	*	Assembled to flash memory and executed therefrom.
  73              	*	Version 7.10, 30jun14cht
  74              	*	Flash memory mapped to Page 0 where codes are executed
  75              	*	Version 7.20, 02jul14cht
  76              	*	Irreducible Complexity
  77              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  78              	*	TURNKEY saves current application from RAM to flash.
  79              	*********************************************************/
  80              	
  81              	  .syntax unified
  82              	  .cpu cortex-m3
  83              	  .fpu softvfp
  84              	  .thumb
  85              	
  86              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
ARM GAS  stm32eforth-fl.s 			page 3


  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
ARM GAS  stm32eforth-fl.s 			page 4


  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
  87              	
  88              	/* blue pill specific constants */ 
  89              	  .equ LED_GPIO, GPIOC_BASE_ADR
  90              	  .equ LED_PIN, 13
  91              	  .equ UART, USART1_BASE_ADR 
  92              	
  93              	/* eForth specific constants */
  94              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  95              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  96              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  97              	.equ UPP ,	0x20000000	/*start of user area (UP0) */
  98              	.equ DTOP ,	0x20000100	/*start of usable RAM area (HERE) */
  99              	.equ DEND , 0x20004E00  /*usable RAM end */
 100              	 .equ RAMOFFSET ,	0x20000000	// remap
 101              	 .equ RAMEND, 0x20005000 // 20Ko
 102              	
 103              	/*************************************
 104              	   system variables offset from UPP
 105              	*************************************/
ARM GAS  stm32eforth-fl.s 			page 5


 106              	  .equ FTRACE_OFS,4 // tracing flag 
 107              	  .equ SEED_OFS, FTRACE_OFS+4    // prng seed 
 108              	  .equ TICKS_OFS, SEED_OFS+4  // millseconds counter
 109              	  .equ TIMER_OFS, TICKS_OFS+4  // count down timer
 110              	  .equ TORAM_OFS, TIMER_OFS+4  // compile to RAM 
 111              	  .equ IMG_SIGN_OFS, TORAM_OFS+4  // image signature  
 112              	  .equ BOOT_OFS, IMG_SIGN_OFS+4  // boot program address
 113              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
 114              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
 115              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
 116              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
 117              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
 118              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
 119              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
 120              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
 121              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
 122              	  .equ FORTH_CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
 123              	  .equ RAM_CTOP_OFS, FORTH_CTOP_OFS+4  // ram free dictionary address
 124              	  .equ LASTN_OFS, RAM_CTOP_OFS+4     // last word in dictionary link nfa 
 125              	  .equ VARS_END_OFS, LASTN_OFS+4 // end of system variables  
 126              	
 127              	/***********************************************
 128              	* MACROS
 129              	*	Assemble inline direct threaded code ending.
 130              	***********************************************/
 131              		.macro _CALL fn /* low level routine call */ 
 132              	 	PUSH {LR}
 133              		BL \fn  
 134              		POP {LR}
 135              		.endm
 136              		
 137              		.macro	_RET /*exit low level call */
 138              		BX LR 
 139              		.endm
 140              	
 141              		.macro _NEXT /* direct jump INEXT */ 
 142              		B INEXT 
 143              		.endm 
 144              	
 145              	 	.macro	_NEST /*start high level word */
 146              		BL NEST 
 147              		.endm
 148              	
 149              		.macro _ADR label 
 150              		.word 1+\label  
 151              		.endm 
 152              	
 153              	 	.macro	_UNNEST	/*end high level word */
 154              		_ADR UNNEST 
 155              		.endm
 156              	
 157              	 	.macro	_DOLIT u /*long literals */
 158              		_ADR	DOLIT
 159              		.word	\u 
 160              		.endm
 161              	
 162              		.macro _DOTQP len, text 
ARM GAS  stm32eforth-fl.s 			page 6


 163              		_ADR DOTQP 
 164              		.byte \len 
 165              		.ascii "\text" 
 166              		.p2align 2 
 167              		.endm
 168              	
 169              		.macro _COMPI name 
 170              		_ADR COMPI 
 171              		.word \name 
 172              		.endm 
 173              	
 174              		.macro _ABORQ len,name 
 175              		_ADR ABORQ 
 176              		.byte \len 
 177              		.ascii "\name"
 178              		.p2align 2 
 179              		.endm
 180              	
 181              		.macro _BRAN label 
 182              		_ADR BRAN 
 183              		.word \label 
 184              		.endm 
 185              	
 186              		.macro _QBRAN label 
 187              		_ADR QBRAN 
 188              		.word \label
 189              		.endm 
 190              	
 191              		.macro _DONXT label 
 192              		_ADR DONXT
 193              		.word \label 
 194              		.endm 
 195              	
 196              	 	.macro	_PUSH	/*push R5 on data stack*/
 197              		STR	R5,[R1,#-4]!
 198              		.endm
 199              	
 200              	 	.macro	_POP /*pop data stack to R5 */
 201              		LDR	R5,[R1],#4
 202              		.endm
 203              	
 204              	/*************************************
 205              	*   interrupt service vectors table 
 206              	**************************************/
 207              	   .section  .isr_vector,"a",%progbits
 208              	  .type  isr_vectors, %object
 209              	
 210              	isr_vectors:
 211 0000 00000000 	  .word   _mstack          /* main return stack address */
 212 0004 00000000 	  .word   reset_handler    /* startup address */
 213              	/* core interrupts || exceptions */
 214 0008 00000000 	  .word   default_handler  /*  NMI */
 215 000c 00000000 	  .word   default_handler  /*  HardFault */
 216 0010 00000000 	  .word   default_handler  /*  Memory Management */
 217 0014 00000000 	  .word   default_handler  /* Bus fault */
 218 0018 00000000 	  .word   default_handler  /* Usage fault */
 219 001c 00000000 	  .word   0
ARM GAS  stm32eforth-fl.s 			page 7


 220 0020 00000000 	  .word   0
 221 0024 00000000 	  .word   0
 222 0028 00000000 	  .word   0
 223 002c 00000000 	  .word   default_handler  /* SWI instruction */
 224 0030 00000000 	  .word   default_handler  /* Debug monitor */
 225 0034 00000000 	  .word   0
 226 0038 00000000 	  .word   default_handler  /* PendSV */
 227 003c 00000000 	  .word   systick_handler  /* Systick */
 228              	  
 229              	  /* External Interrupts */
 230 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 231 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 232 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 233 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 234 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 235 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 236 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 237 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 238 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 239 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 240 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 241 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 242 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 243 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 244 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 245 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 246 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 247 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 248 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 249 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 250 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 251 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 252 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 253 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 254 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 255 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 256 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 257 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 258 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 259 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 260 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 261 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 262 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 263 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 264 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 265 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 266 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 267 00d4 00000000 	  .word      default_handler /* IRQ37, USART1 */                   
 268 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 269 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 270 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 271 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 272 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 273 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 274 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 275 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 276 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
ARM GAS  stm32eforth-fl.s 			page 8


 277 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 278 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 279 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 280 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 281 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 282 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 283 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 284 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 285 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 286 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 287 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 288 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 289 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 290              	  .size  isr_vectors, .-isr_vectors
 291              	
 292 0130 00000000 		.p2align 8
 292      00000000 
 292      00000000 
 292      00000000 
 292      00000000 
 293              	
 294              	UZERO:
 295 0200 00000000 		.word 0  			/*Reserved */
 296 0204 00000000 		.word 0		/* FTRACE */ 
 297 0208 55AA0000 		.word 0xaa55 /* SEED  */ 
 298 020c 00000000 		.word 0      /* MSEC */
 299 0210 00000000 	    .word 0     /* TIMER */
 300 0214 FFFFFFFF 		.word -1    /* >RAM */ 
 301 0218 494D4147 		.ascii "IMAG" /* signature */ 
 302 021c 3C280000 		.word HI  /*'BOOT */
 303 0220 0A000000 		.word BASEE 	/*BASE */
 304 0224 00000000 		.word 0			/*tmp */
 305 0228 00000000 		.word 0			/*SPAN */
 306 022c 00000000 		.word 0			/*>IN */
 307 0230 00000000 		.word 0			/*#TIB */
 308 0234 804E0020 		.word TIBB	/*TIB */
 309 0238 8C1A0000 		.word INTER	/*'EVAL */
 310 023c 00000000 		.word 0			/*HLD */
 311 0240 A8280000 		.word LASTN	/*CONTEXT */
 312 0244 0C290000 		.word CTOP	/* FCP end of system dictionnary */
 313 0248 00010020 		.word DTOP	/* CP end of RAM dictionary RAM */
 314 024c A8280000 		.word LASTN	/*LAST word in dictionary */
 315 0250 00000000 		.word 0,0			/*reserved */
 315      00000000 
 316              	ULAST:
 317              	
 318              	/*****************************************************
 319              	* default isr handler called on unexpected interrupt
 320              	*****************************************************/
 321              	    .section  .text,"ax",%progbits
 322              	  .type default_handler, %function
 323              	  .p2align 2 
 324              	  .global default_handler
 325              	default_handler:
 326 0000 054F     		ldr r7,exception_msg 
 327 0002 17F8010B 		ldrb r0,[r7],#1 
 328 0006 41F8045D 	1:	_PUSH 
ARM GAS  stm32eforth-fl.s 			page 9


 329 000a 17F8015B 		ldrb r5,[r7],#1
 330 000e 00F08BFA 		bl EMIT 
 331 0012 0138     		subs r0,r0,#1 
 332 0014 F7D1     		bne 1b 	
 333 0016 0BE0     		b REBOOT   
 334              	  .size  default_handler, .-default_handler
 335              	exception_msg:
 336 0018 1C000000 		.word .+4 
 337 001c 12       		.byte 18
 338 001d 0A0D6578 		.ascii "\n\rexeption reboot!"
 338      65707469 
 338      6F6E2072 
 338      65626F6F 
 338      7421
 339 002f 00       		.p2align 2
 340              	REBOOT:
 341 0030 0348     		ldr r0,scb_adr 
 342 0032 C168     		ldr r1,[r0,#SCB_AIRCR]
 343 0034 41F00401 		orr r1,#(1<<2)
 344 0038 C0F2FA51 		movt r1,#SCB_VECTKEY
 345 003c C160     		str r1,[r0,#SCB_AIRCR]
 346 003e FEE7     		b . 
 347              		.p2align 2
 348              	scb_adr:
 349 0040 00ED00E0 		.word SCB_BASE_ADR 
 350              	
 351              	/*********************************
 352              		system milliseconds counter
 353              	*********************************/	
 354              	  .type systick_handler, %function
 355              	  .p2align 2 
 356              	  .global systick_handler
 357              	systick_handler:
 358 0044 4FF00003 	  mov r3,#UPP&0xffff
 359 0048 C2F20003 	  movt r3,#UPP>>16  	
 360 004c D868     	  ldr r0,[r3,#TICKS_OFS]  
 361 004e 00F10100 	  add r0,#1
 362 0052 D860     	  str r0,[r3,#TICKS_OFS]
 363 0054 1869     	  ldr r0,[r3,#TIMER_OFS]
 364 0056 10B1     	  cbz r0, systick_exit
 365 0058 A0F10100 	  sub r0,#1
 366 005c 1861     	  str r0,[r3,#TIMER_OFS]
 367              	systick_exit:
 368 005e 7047     	  bx lr
 369              	
 370              	
 371              	/**************************************
 372              	  reset_handler execute at MCU reset
 373              	***************************************/
 374              	//    .section  .text.reset_handler
 375              	  .type  reset_handler, %function
 376              	  .p2align 2 
 377              	  .global reset_handler
 378              	reset_handler:
 379 0060 00F06EF8 		bl	remap 
 380 0064 00F004F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 381 0068 01F0C6FD 		bl	unlock			/* unlock flash memory */
ARM GAS  stm32eforth-fl.s 			page 10


 382 006c 02F020FC 		bl	COLD
 383              	
 384              	  .type init_devices, %function
 385              	  .p2align 2 
 386              	init_devices:
 387              	/* init clock to HSE 72 Mhz */
 388              	/* set 2 wait states in FLASH_ACR_LATENCY */
 389 0070 4FF40050 		mov r0,#FLASH_BASE_ADR&0xffff
 390 0074 C4F20200 		movt r0,#FLASH_BASE_ADR>>16 
 391 0078 4FF01202 	  mov r2,#0x12
 392 007c 0260     	  str r2,[r0,#FLASH_ACR]
 393              	/* configure clock for HSE, 8 Mhz crystal */
 394              	/* enable HSE in RCC_CR */
 395 007e 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 396 0082 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 397 0086 0168     	  ldr r1,[r0,#RCC_CR]
 398 0088 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 399 008c 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 400              	/* wait HSERDY loop */
 401              	wait_hserdy:
 402 008e 0168     	  ldr r1,[r0,#RCC_CR]
 403 0090 11F4003F 	  tst r1,#(1<<17)
 404 0094 FBD0     	  beq wait_hserdy
 405              	
 406              	/************************************************* 
 407              	   configure PLL mul factor and source 
 408              	   SYSCLOCK=72 Mhz
 409              	   select HSE as  PLL source clock
 410              	   multiply frequency by 9 
 411              	   APB1 clock is limited to 36 Mhz so divide by 2 
 412              	****************************************************/
 413 0096 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 414 009a C0F21D01 	  movt r1,#(7<<2)|1
 415 009e 4160     	  str r1,[r0,#RCC_CFGR]
 416              	  /* enable PLL */
 417 00a0 0168     	  ldr r1,[r0,#RCC_CR]
 418 00a2 41F08071 	  orr r1, #1<<24 
 419 00a6 0160     	  str r1,[r0,#RCC_CR]
 420              	/* wait for PLLRDY */
 421              	wait_pllrdy:
 422 00a8 0168     	  ldr r1,[r0,#RCC_CR]
 423 00aa 11F0007F 	  tst r1,#(1<<25)
 424 00ae FBD0     	  beq wait_pllrdy 
 425              	/* select PLL as sysclock */
 426 00b0 4168     	  ldr r1,[r0,#RCC_CFGR]
 427 00b2 4FF6FC72 	  mov r2,#0xfffc
 428 00b6 CFF6FF72 	  movt r2,#0xffff
 429 00ba 01EA0201 	  and r1,r1,r2 
 430 00be 4FF00202 	  mov r2,#2
 431 00c2 41EA0201 	  orr r1,r1,r2
 432 00c6 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 433              	/* wait for SWS==2 */
 434              	wait_sws:
 435 00c8 4168     	  ldr r1,[r0,#RCC_CFGR]
 436 00ca 11F0080F 	  tst r1,#(2<<2)
 437 00ce FBD0     	  beq wait_sws
 438              	/* now sysclock is 72 Mhz */
ARM GAS  stm32eforth-fl.s 			page 11


 439              	
 440              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 441 00d0 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 442 00d4 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 443 00d8 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 444 00dc 8161     	  str	r1, [r0, #RCC_APB2ENR]
 445              	
 446              	/* configure GPIOC:13 as output for user LED */
 447 00de 4FF48050 	  mov r0,#GPIOC_BASE_ADR&0xffff
 448 00e2 C4F20100 	  movt r0,#GPIOC_BASE_ADR>>16
 449 00e6 4168     	  ldr r1,[r0,#GPIO_CRH]
 450 00e8 6FF47002 	  mvn r2,#(15<<20)
 451 00ec 01EA0201 	  and r1,r1,r2
 452 00f0 4FF4C002 	  mov r2,#(6<<20)
 453 00f4 41EA0201 	  orr r1,r1,r2
 454 00f8 4160     	  str r1,[r0,#GPIO_CRH]
 455              	
 456              	/* configure USART1 */
 457              	/* set GPIOA PIN 9, uart TX  */
 458 00fa 4FF40060 	  mov r0,#GPIOA_BASE_ADR&0XFFFF
 459 00fe C4F20100 	  movt r0,#GPIOA_BASE_ADR>>16	
 460 0102 4168     	  ldr r1,[r0,#GPIO_CRH]
 461 0104 6FF0F002 	  mvn r2,#(15<<4)
 462 0108 01EA0201 	  and r1,r1,r2
 463 010c 4FF0A002 	  mov r2,#(0xA<<4)
 464 0110 41EA0201 	  orr r1,r1,r2 
 465 0114 4160     	  str r1,[r0,#GPIO_CRH]
 466              	
 467 0116 4FF46050 	  mov r0,#UART&0xFFFF
 468 011a C4F20100 	  movt r0,#UART>>16	
 469              	/* BAUD rate */
 470 011e 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 471 0122 8160     	  str r1,[r0,#USART_BRR]
 472 0124 42F20C01 	  mov r1,#(3<<2)+(1<<13)
 473 0128 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 474              	/* configure systicks for 1msec ticks */
 475 012a 4EF21000 	  mov r0,#STK_BASE_ADR&0xFFFF
 476 012e CEF20000 	  movt r0,#STK_BASE_ADR>>16	
 477 0132 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 478 0136 4160     	  str r1,[r0,#STK_LOAD]
 479 0138 4FF00301 	  mov r1,#3
 480 013c 0160     	  str r1,[r0,STK_CTL]
 481 013e 7047     	  bx lr  
 482              	
 483              	/* copy system to RAM */ 
 484              	//	.type remap, %function 
 485              	remap:
 486 0140 0B48     		ldr r0,remap_dest  
 487 0142 0A49     		ldr r1,remap_src 
 488 0144 4FF05802 		mov r2,#ULAST-UZERO 
 489 0148 51F8043B 	1:	ldr r3,[r1],#4 
 490 014c 40F8043B 		str r3,[r0],#4 
 491 0150 043A     		subs R2,#4 
 492 0152 F9D1     		bne 1b
 493              	// zero end of RAM 
 494 0154 4FF4A042 		mov r2,#0x5000
 495 0158 C2F20002 		movt r2,#0x2000
ARM GAS  stm32eforth-fl.s 			page 12


 496 015c 83EA0303 		eor r3,r3,r3 
 497 0160 40F8043B 	2:  str r3,[r0],#4
 498 0164 9042     		cmp r0,r2 
 499 0166 FBDB     		blt 2b 
 500 0168 7047     		bx lr  
 501 016a 00BF     		.p2align 2
 502              	remap_src:
 503 016c 00020000 		.word UZERO 
 504              	remap_dest:
 505 0170 00000020 		.word RAM_ADR  
 506              	
 507              	/********************
 508              	* Version control
 509              	*******************/
 510              	.equ VER ,	0x01	/*major release version */
 511              	.equ EXT ,	0x00	/*minor extension */
 512              	
 513              	/* Constants */
 514              	
 515              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 516              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 517              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 518              	
 519              	.equ CELLL ,	4	/*size of a cell */
 520              	.equ BASEE ,	10	/*default radix */
 521              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 522              	
 523              	.equ BKSPP ,	8	/*backspace */
 524              	.equ LF ,	10	  /*line feed */
 525              	.equ CRR ,	13	/*carriage return */
 526              	.equ ERR ,	27	/*error escape */
 527              	.equ TIC ,	39	/*tick */
 528              	
 529              	/********************************************************
 530              	* RAM memory mapping
 531              	* 	0x20000000	RAM base address
 532              	*	0x20000000  system variables	
 533              	* 	0x20000100	Forth dictionary
 534              	* 	0x2000????	top of dictionary, HERE
 535              	* 	0x2000????	WORD buffer, HERE+16
 536              	*   0x20004E00  end of user space
 537              	* 	0x20004E80	top of data stack  R2
 538              	* 	0x20004E80	TIB terminal input buffer
 539              	* 	0x20004F80	top of return stack  R1
 540              	* 	0x20005000	top of hardware stack for interrupts R14
 541              	********************************************************/
 542              	
 543              	
 544              	/******************************************************
 545              	*  COLD start moves the following to USER variables.
 546              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 547              	******************************************************/
 548 0174 AFF30080 		.p2align 10
 548      AFF30080 
 548      AFF30080 
 548      00000000 
 548      00000000 
ARM GAS  stm32eforth-fl.s 			page 13


 549              	
 550              	
 551              	 
 552              	
 553              	/***********************************
 554              	//  Start of eForth system 
 555              	***********************************/
 556              	
 557              		.p2align 2 
 558              	
 559              	// PUSH R5, to be used in colon definition 
 560              	TPUSH:
 561 0400 41F8045D 		_PUSH
 562 0404 06E0     		_NEXT
 563              	
 564              	// POP R5, to be used in colon defintion  
 565              	TPOP:
 566 0406 51F8045B 		_POP 
 567 040a 03E0     		_NEXT
 568              	
 569              	
 570              	// hi level word enter 
 571              	NEST: 
 572 040c 42F8040D 		STMFD	R2!,{R0}
 573 0410 04F10300 		ADD R0,R4,#3
 574              	// inner interprer
 575              	INEXT: 
 576              	/*
 577              		ADD R6,R3,#FTRACE_OFS
 578              		LDR R6,[R6]
 579              		CBZ r6, 1f
 580              		_PUSH 
 581              		LDR R5,[R0]
 582              		SUB R5,#1
 583              		B DBG_PRT
 584              	*/
 585 0414 50F8044B 	1:	LDR R4,[R0],#4 
 586 0418 A047     		BLX R4 
 587              	UNNEST:
 588 041a 01CA     		LDMFD R2!,{R0}
 589 041c FAE7     		B INEXT 
 590              	
 591 041e 00BF     		.p2align 2 
 592              	
 593              	// RANDOM ( n1 -- {0..n1-1} )
 594              	// return pseudo random number 
 595              	// REF: https://en.wikipedia.org/wiki/Xorshift
 596              	
 597 0420 00000000 		.word 0
 598 0424 06       	_RAND: .byte 6
 599 0425 52414E44 		.ascii "RANDOM"
 599      4F4D
 600 042b 00       		.p2align 2 
 601              	RAND:
 602 042c FFF7EEFF 		_NEST 
 603 0430 110A0000 		_ADR SEED 
 604 0434 C9050000 		_ADR AT 
ARM GAS  stm32eforth-fl.s 			page 14


 605 0438 71060000 		_ADR DUPP 
 606 043c 4D050000 		_DOLIT 13
 606      0D000000 
 607 0444 25070000 		_ADR LSHIFT 
 608 0448 DD060000 		_ADR XORR  
 609 044c 71060000 		_ADR DUPP 
 610 0450 4D050000 		_DOLIT 17 
 610      11000000 
 611 0458 0D070000 		_ADR RSHIFT 
 612 045c DD060000 		_ADR XORR 
 613 0460 71060000 		_ADR DUPP
 614 0464 4D050000 		_DOLIT 5 
 614      05000000 
 615 046c 25070000 		_ADR LSHIFT 
 616 0470 DD060000 		_ADR XORR  
 617 0474 71060000 		_ADR DUPP 
 618 0478 110A0000 		_ADR SEED 
 619 047c B5050000 		_ADR STORE 
 620 0480 D5080000 		_ADR ABSS
 621 0484 81060000 		_ADR SWAP 
 622 0488 D50C0000 		_ADR MODD 
 623 048c 1B040000 		_UNNEST 
 624              	
 625              	
 626              	// PAUSE ( u -- ) 
 627              	// suspend execution for u milliseconds
 628 0490 24040000 		.word _RAND
 629 0494 05       	_PAUSE: .byte 5
 630 0495 50415553 		.ascii "PAUSE"
 630      45
 631 049a 00BF     		.p2align 2
 632              	PAUSE:
 633 049c FFF7B6FF 		_NEST 
 634 04a0 390A0000 		_ADR TIMER 
 635 04a4 B5050000 		_ADR STORE 
 636              	PAUSE_LOOP:
 637 04a8 390A0000 		_ADR TIMER 
 638 04ac C9050000 		_ADR AT 
 639 04b0 89050000 		_QBRAN PAUSE_EXIT 
 639      C0040000 
 640 04b8 9B050000 		_BRAN PAUSE_LOOP 
 640      A8040000 
 641              	PAUSE_EXIT: 		
 642 04c0 1B040000 		_UNNEST 
 643              	
 644              	//  ULED ( T|F -- )
 645              	// control user LED, -1 ON, 0 OFF  
 646 04c4 94040000 		.word _PAUSE
 647 04c8 04       	_ULED: .byte 4
 648 04c9 554C4544 		.ascii "ULED"
 649 04cd 0000BF   		.p2align 2
 650              		.type ULED, %function 
 651              	ULED:
 652 04d0 4FF40056 		mov r6,#(1<<LED_PIN)
 653 04d4 4FF48054 		mov r4,#LED_GPIO&0xffff
 654 04d8 C4F20104 		movt r4,#LED_GPIO>>16
 655 04dc 2D00     		movs r5,r5 
ARM GAS  stm32eforth-fl.s 			page 15


 656 04de 51F8045B 		_POP
 657 04e2 01D0     		beq ULED_OFF 
 658 04e4 6661     		str r6,[r4,#GPIO_BRR]
 659 04e6 95E7     		_NEXT 
 660              	ULED_OFF:
 661 04e8 2661     		str r6,[r4,#GPIO_BSRR]
 662 04ea 93E7     		_NEXT    
 663              	
 664              	//    ?RX	 ( -- c T | F )
 665              	// 	Return input character and true, or a false if no input.
 666 04ec C8040000 		.word	_ULED
 667 04f0 04       	_QRX:	.byte   4
 668 04f1 3F4B4559 		.ascii "?KEY"
 669 04f5 0000BF   		.p2align 2 
 670              	QKEY:
 671              	QRX: 
 672 04f8 41F8045D 		_PUSH
 673 04fc 4FF46054 		mov r4,#UART&0xFFFF
 674 0500 C4F20104 		movt r4,#UART>>16
 675 0504 2688     		ldrh	r6, [r4, #USART_SR]
 676 0506 16F02006 		ands	r6, #0x20		//  RXE
 677 050a 05D0     		BEQ	QRX1
 678 050c 6568     	 	LDR	R5, [R4, #USART_DR]
 679 050e 41F8045D 		_PUSH
 680 0512 18BF     	    IT NE 
 681 0514 6FF00005 		MVNNE	R5,#0
 682              	QRX1:
 683 0518 08BF     		IT EQ 
 684 051a 0025     	    MOVEQ	R5,#0
 685 051c 7AE7     		_NEXT 
 686              	
 687              	//    TX!	 ( c -- )
 688              	// 	Send character c to the output device.
 689              	
 690 051e F0040000 		.word	_QRX
 691 0522 04       	_TXSTO:	.byte 4
 692 0523 454D4954 		.ascii "EMIT"
 693 0527 00       		.p2align 2 	
 694              	TXSTO:
 695              	EMIT:
 696              	TECHO:
 697 0528 4FF46054 		mov r4,#UART&0xFFFF
 698 052c C4F20104 		movt r4,#UART>>16
 699              	TX1:
 700 0530 2688     		ldrh	r6, [r4, #USART_SR]	
 701 0532 16F08006 		ands	r6, #0x80		//  TXE bit 
 702 0536 FBD0     		beq	TX1
 703 0538 A580     		strh	r5, [r4, #USART_DR]	
 704 053a 51F8045B 		_POP
 705 053e 69E7     		_NEXT 
 706              		
 707              	/***************
 708              	//  The kernel
 709              	***************/
 710              	
 711              	//    NOP	( -- )
 712              	// 	do nothing.
ARM GAS  stm32eforth-fl.s 			page 16


 713              	
 714 0540 22050000 		.word	_TXSTO
 715 0544 03       	_NOP:	.byte   3
 716 0545 4E4F50   		.ascii "NOP"
 717              		.p2align 2 	
 718              	NOP:
 719 0548 64E7     		_NEXT 
 720              	 
 721              	
 722              	//    doLIT	( -- w )
 723              	// 	Push an inline literal.
 724              	
 725              	// 	.word	_NOP
 726              	// _LIT	.byte   COMPO+5
 727              	// 	.ascii "doLIT"
 728 054a 00BF     	 	.p2align 2 	
 729              	DOLIT:
 730 054c 41F8045D 		_PUSH				//  store R5 on data stack
 731 0550 50F8045B 		LDR	R5,[R0],#4		//  get literal at word boundary
 732 0554 5EE7     		_NEXT 
 733              	
 734              	//    EXECUTE	( ca -- )
 735              	// 	Execute the word at ca.
 736              	
 737 0556 44050000 		.word	_NOP
 738 055a 07       	_EXECU:	.byte   7
 739 055b 45584543 		.ascii "EXECUTE"
 739      555445
 740 0562 00BF     		.p2align 2 	
 741              	EXECU: 
 742 0564 45F00104 		ORR	R4,R5,#1 
 743 0568 51F8045B 		_POP
 744 056c 2047     		BX R4 
 745 056e 51E7     		_NEXT 
 746              	
 747              	//    next	( -- ) counter on R:
 748              	// 	Run time code for the single index loop.
 749              	// 	: next ( -- ) \ hilevel model
 750              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 751              	
 752              	// 	.word	_EXECU
 753              	// _DONXT	.byte   COMPO+4
 754              	// 	.ascii "next"
 755              	// 	.p2align 2 	
 756              	DONXT:
 757 0570 1468     		LDR	R4,[R2]   // ( -- u )  
 758 0572 24B9     		CBNZ R4,NEXT1 
 759              		/* loop done */
 760 0574 02F10402 		ADD	R2,R2,#4 // drop counter 
 761 0578 00F10400 		ADD	R0,R0,#4 // skip after loop address 
 762 057c 4AE7     		_NEXT
 763              	NEXT1:
 764              		/* decrement loop counter */
 765 057e A4F10104 		SUB	R4,R4,#1
 766 0582 1460     		STR	R4,[R2]
 767 0584 0068     		LDR	R0,[R0]	// gbegining of loop 
 768 0586 45E7     		_NEXT 
ARM GAS  stm32eforth-fl.s 			page 17


 769              	
 770              	//    ?branch	( f -- )
 771              	// 	Branch if flag is zero.
 772              	
 773              	// 	.word	_DONXT
 774              	// _QBRAN	.byte   COMPO+7
 775              	// 	.ascii "?branch"
 776              	// 	.p2align 2 	
 777              	QBRAN:
 778 0588 2D00     		MOVS	R5,R5
 779 058a 51F8045B 		_POP
 780 058e 01D1     		BNE	QBRAN1
 781 0590 0068     		LDR	R0,[R0]
 782 0592 3FE7     		_NEXT
 783              	QBRAN1:
 784 0594 00F10400 	 	ADD	R0,R0,#4
 785 0598 3CE7     		_NEXT
 786              	
 787              	//    branch	( -- )
 788              	// 	Branch to an inline address.
 789              	
 790              	// 	.word	_QBRAN
 791              	// _BRAN	.byte   COMPO+6
 792              	// 	.ascii "branch"
 793              	// 	.p2align 2 	
 794              	BRAN:
 795 059a 0068     		LDR	R0,[R0]
 796 059c 3AE7     		_NEXT
 797              	
 798              	//    EXIT	(  -- )
 799              	// 	Exit the currently executing command.
 800              	
 801 059e 5A050000 		.word	_EXECU
 802 05a2 04       	_EXIT:	.byte   4
 803 05a3 45584954 		.ascii "EXIT"
 804 05a7 00       		.p2align 2 	
 805              	EXIT:
 806 05a8 1B040000 		_UNNEST
 807              	
 808              	//    !	   ( w a -- )
 809              	// 	Pop the data stack to memory.
 810              	
 811 05ac A2050000 		.word	_EXIT
 812 05b0 01       	_STORE:	.byte   1
 813 05b1 21       		.ascii "!"
 814 05b2 00BF     		.p2align 2 	
 815              	STORE:
 816 05b4 51F8044B 		LDR	R4,[R1],#4
 817 05b8 2C60     		STR	R4,[R5]
 818 05ba 51F8045B 		_POP
 819 05be 29E7     		_NEXT 
 820              	
 821              	//    @	   ( a -- w )
 822              	// 	Push memory location to the data stack.
 823              	
 824 05c0 B0050000 		.word	_STORE
 825 05c4 01       	_AT:	.byte   1
ARM GAS  stm32eforth-fl.s 			page 18


 826 05c5 40       		.ascii "@"
 827 05c6 00BF     		.p2align 2 	
 828              	AT:
 829 05c8 2D68     		LDR	R5,[R5]
 830 05ca 23E7     		_NEXT 
 831              	
 832              	//    C!	  ( c b -- )
 833              	// 	Pop the data stack to byte memory.
 834              	
 835 05cc C4050000 		.word	_AT
 836 05d0 02       	_CSTOR:	.byte   2
 837 05d1 4321     		.ascii "C!"
 838 05d3 00       		.p2align 2 	
 839              	CSTOR:
 840 05d4 51F8044B 		LDR	R4,[R1],#4
 841 05d8 2C70     		STRB R4,[R5]
 842 05da 51F8045B 		_POP
 843 05de 19E7     		_NEXT
 844              	
 845              	//    C@	  ( b -- c )
 846              	// 	Push byte memory location to the data stack.
 847              	
 848 05e0 D0050000 		.word	_CSTOR
 849 05e4 02       	_CAT:	.byte   2
 850 05e5 4340     		.ascii "C@"
 851 05e7 00       		.p2align 2 	
 852              	CAT:
 853 05e8 2D78     		LDRB	R5,[R5]
 854 05ea 13E7     		_NEXT 
 855              	
 856              	//    R>	  ( -- w )
 857              	// 	Pop the return stack to the data stack.
 858              	
 859 05ec E4050000 		.word	_CAT
 860 05f0 02       	_RFROM:	.byte   2
 861 05f1 523E     		.ascii "R>"
 862 05f3 00       		.p2align 2 	
 863              	RFROM:
 864 05f4 41F8045D 		_PUSH
 865 05f8 52F8045B 		LDR	R5,[R2],#4
 866 05fc 0AE7     		_NEXT 
 867              	
 868              	//    R@	  ( -- w )
 869              	// 	Copy top of return stack to the data stack.
 870              	
 871 05fe F0050000 		.word	_RFROM
 872 0602 02       	_RAT:	.byte   2
 873 0603 5240     		.ascii "R@"
 874 0605 0000BF   		.p2align 2 	
 875              	RAT:
 876 0608 41F8045D 		_PUSH
 877 060c 1568     		LDR	R5,[R2]
 878 060e 01E7     		_NEXT 
 879              	
 880              	//    >R	  ( w -- )
 881              	// 	Push the data stack to the return stack.
 882              	
ARM GAS  stm32eforth-fl.s 			page 19


 883 0610 02060000 		.word	_RAT
 884 0614 42       	_TOR:	.byte   COMPO+2
 885 0615 3E52     		.ascii ">R"
 886 0617 00       		.p2align 2 	
 887              	TOR:
 888 0618 42F8045D 		STR	R5,[R2,#-4]!
 889 061c 51F8045B 		_POP
 890 0620 F8E6     		_NEXT
 891              	
 892              	//	RP! ( u -- )
 893              	// initialize RPP with u 
 894 0622 14060000 		.word _TOR 
 895 0626 03       	_RPSTOR: .byte 3 
 896 0627 525021   		.ascii "RP!" 
 897 062a 00BF     		.p2align 2 
 898              	RPSTOR:
 899 062c 2A46     		MOV R2,R5 
 900 062e 51F8045B 		_POP  
 901 0632 EFE6     		_NEXT 
 902              	
 903              	
 904              	//	SP! ( u -- )
 905              	// initialize SPP with u 
 906 0634 26060000 		.word _RPSTOR  
 907 0638 03       	_SPSTOR: .byte 3 
 908 0639 535021   		.ascii "SP!" 
 909              		.p2align 2 
 910              	SPSTOR:
 911 063c 2946     		MOV R1,R5 
 912 063e 85EA0505 		EOR R5,R5,R5 
 913 0642 E7E6     		_NEXT 
 914              	
 915              	//    SP@	 ( -- a )
 916              	// 	Push the current data stack pointer.
 917              	
 918 0644 38060000 		.word	_SPSTOR
 919 0648 03       	_SPAT:	.byte   3
 920 0649 535040   		.ascii "SP@"
 921              		.p2align 2 	
 922              	SPAT:
 923 064c 41F8045D 		_PUSH
 924 0650 0D46     		MOV	R5,R1
 925 0652 DFE6     		_NEXT
 926              	
 927              	//    DROP	( w -- )
 928              	// 	Discard top stack item.
 929              	
 930 0654 48060000 		.word	_SPAT
 931 0658 04       	_DROP:	.byte   4
 932 0659 44524F50 		.ascii "DROP"
 933 065d 0000BF   		.p2align 2 	
 934              	DROP:
 935 0660 51F8045B 		_POP
 936 0664 D6E6     		_NEXT 
 937              	
 938              	//    DUP	 ( w -- w w )
 939              	// 	Duplicate the top stack item.
ARM GAS  stm32eforth-fl.s 			page 20


 940              	
 941 0666 58060000 		.word	_DROP
 942 066a 03       	_DUPP:	.byte   3
 943 066b 445550   		.ascii "DUP"
 944 066e 00BF     		.p2align 2 	
 945              	DUPP:
 946 0670 41F8045D 		_PUSH
 947 0674 CEE6     		_NEXT 
 948              	
 949              	//    SWAP	( w1 w2 -- w2 w1 )
 950              	// 	Exchange top two stack items.
 951              	
 952 0676 6A060000 		.word	_DUPP
 953 067a 04       	_SWAP:	.byte   4
 954 067b 53574150 		.ascii "SWAP"
 955 067f 00       		.p2align 2 	
 956              	SWAP:
 957 0680 0C68     		LDR	R4,[R1]
 958 0682 0D60     		STR	R5,[R1]
 959 0684 2546     		MOV	R5,R4
 960 0686 C5E6     		_NEXT 
 961              	
 962              	//    OVER	( w1 w2 -- w1 w2 w1 )
 963              	// 	Copy second stack item to top.
 964              	
 965 0688 7A060000 		.word	_SWAP
 966 068c 04       	_OVER:	.byte   4
 967 068d 4F564552 		.ascii "OVER"
 968 0691 0000BF   		.p2align 2 	
 969              	OVER:
 970 0694 41F8045D 		_PUSH
 971 0698 4D68     		LDR	R5,[R1,#4]
 972 069a BBE6     		_NEXT 
 973              	
 974              	//    0<	  ( n -- t )
 975              	// 	Return true if n is negative.
 976              	
 977 069c 8C060000 		.word	_OVER
 978 06a0 02       	_ZLESS:	.byte   2
 979 06a1 303C     		.ascii "0<"
 980 06a3 00       		.p2align 2 	
 981              	ZLESS:
 982              	//	MOV	R4,#0
 983              	//	ADD	R5,R4,R5,ASR #32
 984 06a4 4FEAE575 		ASR R5,#31
 985 06a8 B4E6     		_NEXT 
 986              	
 987              	//    AND	 ( w w -- w )
 988              	// 	Bitwise AND.
 989              	
 990 06aa A0060000 		.word	_ZLESS
 991 06ae 03       	_ANDD:	.byte   3
 992 06af 414E44   		.ascii "AND"
 993 06b2 00BF     		.p2align 2 	
 994              	ANDD:
 995 06b4 51F8044B 		LDR	R4,[R1],#4
 996 06b8 05EA0405 		AND	R5,R5,R4
ARM GAS  stm32eforth-fl.s 			page 21


 997 06bc AAE6     		_NEXT 
 998              	
 999              	//    OR	  ( w w -- w )
 1000              	// 	Bitwise inclusive OR.
 1001              	
 1002 06be AE060000 		.word	_ANDD
 1003 06c2 02       	_ORR:	.byte   2
 1004 06c3 4F52     		.ascii "OR"
 1005 06c5 0000BF   		.p2align 2 	
 1006              	ORR:
 1007 06c8 51F8044B 		LDR	R4,[R1],#4
 1008 06cc 45EA0405 		ORR	R5,R5,R4
 1009 06d0 A0E6     		_NEXT 
 1010              	
 1011              	//    XOR	 ( w w -- w )
 1012              	// 	Bitwise exclusive OR.
 1013              	
 1014 06d2 C2060000 		.word	_ORR
 1015 06d6 03       	_XORR:	.byte   3
 1016 06d7 584F52   		.ascii "XOR"
 1017 06da 00BF     		.p2align 2 	
 1018              	XORR:
 1019 06dc 51F8044B 		LDR	R4,[R1],#4
 1020 06e0 85EA0405 		EOR	R5,R5,R4
 1021 06e4 96E6     		_NEXT 
 1022              	
 1023              	//    UM+	 ( w w -- w cy )
 1024              	// 	Add two numbers, return the sum and carry flag.
 1025              	
 1026 06e6 D6060000 		.word	_XORR
 1027 06ea 03       	_UPLUS:	.byte   3
 1028 06eb 554D2B   		.ascii "UM+"
 1029 06ee 00BF     		.p2align 2 	
 1030              	UPLUS:
 1031 06f0 0C68     		LDR	R4,[R1]
 1032 06f2 6419     		ADDS	R4,R4,R5
 1033 06f4 4FF00005 		MOV	R5,#0
 1034 06f8 45F10005 		ADC	R5,R5,#0
 1035 06fc 0C60     		STR	R4,[R1]
 1036 06fe 89E6     		_NEXT 
 1037              	
 1038              	//    RSHIFT	 ( w # -- w )
 1039              	// 	arithmetic Right shift # bits.
 1040              	
 1041 0700 EA060000 		.word	_UPLUS
 1042 0704 06       	_RSHIFT:	.byte   6
 1043 0705 52534849 		.ascii "RSHIFT"
 1043      4654
 1044 070b 00       		.p2align 2 	
 1045              	RSHIFT:
 1046 070c 51F8044B 		LDR	R4,[R1],#4
 1047 0710 44FA05F5 		MOV	R5,R4,ASR R5
 1048 0714 7EE6     		_NEXT 
 1049              	
 1050              	//    LSHIFT	 ( w # -- w )
 1051              	// 	Right shift # bits.
 1052              	
ARM GAS  stm32eforth-fl.s 			page 22


 1053 0716 04070000 		.word	_RSHIFT
 1054 071a 06       	_LSHIFT:	.byte   6
 1055 071b 4C534849 		.ascii "LSHIFT"
 1055      4654
 1056 0721 0000BF   		.p2align 2 	
 1057              	LSHIFT:
 1058 0724 51F8044B 		LDR	R4,[R1],#4
 1059 0728 04FA05F5 		MOV	R5,R4,LSL R5
 1060 072c 72E6     		_NEXT
 1061              	
 1062              	//    +	 ( w w -- w )
 1063              	// 	Add.
 1064              	
 1065 072e 1A070000 		.word	_LSHIFT
 1066 0732 01       	_PLUS:	.byte   1
 1067 0733 2B       		.ascii "+"
 1068              		.p2align 2 	
 1069              	PLUS:
 1070 0734 51F8044B 		LDR	R4,[R1],#4
 1071 0738 2544     		ADD	R5,R5,R4
 1072 073a 6BE6     		_NEXT 
 1073              	
 1074              	//    -	 ( w w -- w )
 1075              	// 	Subtract.
 1076              	
 1077 073c 32070000 		.word	_PLUS
 1078 0740 01       	_SUBB:	.byte   1
 1079 0741 2D       		.ascii "-"
 1080 0742 00BF     		.p2align 2 	
 1081              	SUBB:
 1082 0744 51F8044B 		LDR	R4,[R1],#4
 1083 0748 C5EB0405 		RSB	R5,R5,R4
 1084 074c 62E6     		_NEXT 
 1085              	
 1086              	//    *	 ( w w -- w )
 1087              	// 	Multiply.
 1088              	
 1089 074e 40070000 		.word	_SUBB
 1090 0752 01       	_STAR:	.byte   1
 1091 0753 2A       		.ascii "*"
 1092              		.p2align 2 	
 1093              	STAR:
 1094 0754 51F8044B 		LDR	R4,[R1],#4
 1095 0758 04FB05F5 		MUL	R5,R4,R5
 1096 075c 5AE6     		_NEXT 
 1097              	
 1098              	//    UM*	 ( w w -- ud )
 1099              	// 	Unsigned multiply.
 1100              	
 1101 075e 52070000 		.word	_STAR
 1102 0762 03       	_UMSTA:	.byte   3
 1103 0763 554D2A   		.ascii "UM*"
 1104 0766 00BF     		.p2align 2 	
 1105              	UMSTA:
 1106 0768 0C68     		LDR	R4,[R1]
 1107 076a A5FB0467 		UMULL	R6,R7,R5,R4
 1108 076e 0E60     		STR	R6,[R1]
ARM GAS  stm32eforth-fl.s 			page 23


 1109 0770 3D46     		MOV	R5,R7
 1110 0772 4FE6     		_NEXT 
 1111              	
 1112              	//    M*	 ( w w -- d )
 1113              	// 	signed multiply.
 1114              	
 1115 0774 62070000 		.word	_UMSTA
 1116 0778 02       	_MSTAR:	.byte   2
 1117 0779 4D2A     		.ascii "M*"
 1118 077b 00       		.p2align 2 	
 1119              	MSTAR:
 1120 077c 0C68     		LDR	R4,[R1]
 1121 077e 85FB0467 		SMULL	R6,R7,R5,R4
 1122 0782 0E60     		STR	R6,[R1]
 1123 0784 3D46     		MOV	R5,R7
 1124 0786 45E6     		_NEXT 
 1125              	
 1126              	//    1+	 ( w -- w+1 )
 1127              	// 	Add 1.
 1128              	
 1129 0788 78070000 		.word	_MSTAR
 1130 078c 02       	_ONEP:	.byte   2
 1131 078d 312B     		.ascii "1+"
 1132 078f 00       		.p2align 2 	
 1133              	ONEP:
 1134 0790 05F10105 		ADD	R5,R5,#1
 1135 0794 3EE6     		_NEXT 
 1136              	
 1137              	//    1-	 ( w -- w-1 )
 1138              	// 	Subtract 1.
 1139              	
 1140 0796 8C070000 		.word	_ONEP
 1141 079a 02       	_ONEM:	.byte   2
 1142 079b 312D     		.ascii "1-"
 1143 079d 0000BF   		.p2align 2 	
 1144              	ONEM:
 1145 07a0 A5F10105 		SUB	R5,R5,#1
 1146 07a4 36E6     		_NEXT 
 1147              	
 1148              	//    2+	 ( w -- w+2 )
 1149              	// 	Add 1.
 1150              	
 1151 07a6 9A070000 		.word	_ONEM
 1152 07aa 02       	_TWOP:	.byte   2
 1153 07ab 322B     		.ascii "2+"
 1154 07ad 0000BF   		.p2align 2 	
 1155              	TWOP:
 1156 07b0 05F10205 		ADD	R5,R5,#2
 1157 07b4 2EE6     		_NEXT
 1158              	
 1159              	//    2-	 ( w -- w-2 )
 1160              	// 	Subtract 2.
 1161              	
 1162 07b6 AA070000 		.word	_TWOP
 1163 07ba 02       	_TWOM:	.byte   2
 1164 07bb 322D     		.ascii "2-"
 1165 07bd 0000BF   		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 24


 1166              	TWOM:
 1167 07c0 A5F10205 		SUB	R5,R5,#2
 1168 07c4 26E6     		_NEXT
 1169              	
 1170              	//    CELL+	( w -- w+4 )
 1171              	// 	Add CELLL.
 1172              	
 1173 07c6 BA070000 		.word	_TWOM
 1174 07ca 05       	_CELLP:	.byte   5
 1175 07cb 43454C4C 		.ascii "CELL+"
 1175      2B
 1176              		.p2align 2 	
 1177              	CELLP:
 1178 07d0 05F10405 		ADD	R5,R5,#CELLL
 1179 07d4 1EE6     		_NEXT
 1180              	
 1181              	//    CELL-	( w -- w-4 )
 1182              	// 	Subtract CELLL.
 1183              	
 1184 07d6 CA070000 		.word	_CELLP
 1185 07da 05       	_CELLM:	.byte   5
 1186 07db 43454C4C 		.ascii "CELL-"
 1186      2D
 1187              		.p2align 2 	
 1188              	CELLM:
 1189 07e0 A5F10405 		SUB	R5,R5,#CELLL
 1190 07e4 16E6     		_NEXT
 1191              	 
 1192              	//    BL	( -- 32 )
 1193              	// 	Blank (ASCII space).
 1194              	
 1195 07e6 DA070000 		.word	_CELLM
 1196 07ea 02       	_BLANK:	.byte   2
 1197 07eb 424C     		.ascii "BL"
 1198 07ed 0000BF   		.p2align 2 	
 1199              	BLANK:
 1200 07f0 41F8045D 		_PUSH
 1201 07f4 4FF02005 		MOV	R5,#32
 1202 07f8 0CE6     		_NEXT 
 1203              	
 1204              	//    CELLS	( w -- w*4 )
 1205              	// 	Multiply 4.
 1206              	
 1207 07fa EA070000 		.word	_BLANK
 1208 07fe 05       	_CELLS:	.byte   5
 1209 07ff 43454C4C 		.ascii "CELLS"
 1209      53
 1210              		.p2align 2 	
 1211              	CELLS:
 1212 0804 4FEA8505 		MOV	R5,R5,LSL#2
 1213 0808 04E6     		_NEXT
 1214              	
 1215              	//    CELL/	( w -- w/4 )
 1216              	// 	Divide by 4.
 1217              	
 1218 080a FE070000 		.word	_CELLS
 1219 080e 05       	_CELLSL:	.byte   5
ARM GAS  stm32eforth-fl.s 			page 25


 1220 080f 43454C4C 		.ascii "CELL/"
 1220      2F
 1221              		.p2align 2 	
 1222              	CELLSL:
 1223 0814 4FEAA505 		MOV	R5,R5,ASR#2
 1224 0818 FCE5     		_NEXT
 1225              	
 1226              	//    2*	( w -- w*2 )
 1227              	// 	Multiply 2.
 1228              	
 1229 081a 0E080000 		.word	_CELLSL
 1230 081e 02       	_TWOST:	.byte   2
 1231 081f 322A     		.ascii "2*"
 1232 0821 0000BF   		.p2align 2 	
 1233              	TWOST:
 1234 0824 4FEA4505 		MOV	R5,R5,LSL#1
 1235 0828 F4E5     		_NEXT
 1236              	
 1237              	//    2/	( w -- w/2 )
 1238              	// 	Divide by 2.
 1239              	
 1240 082a 1E080000 		.word	_TWOST
 1241 082e 02       	_TWOSL:	.byte   2
 1242 082f 322F     		.ascii "2/"
 1243 0831 0000BF   		.p2align 2 	
 1244              	TWOSL:
 1245 0834 4FEA6505 		MOV	R5,R5,ASR#1
 1246 0838 ECE5     		_NEXT
 1247              	
 1248              	//    ?DUP	( w -- w w | 0 )
 1249              	// 	Conditional duplicate.
 1250              	
 1251 083a 2E080000 		.word	_TWOSL
 1252 083e 04       	_QDUP:	.byte   4
 1253 083f 3F445550 		.ascii "?DUP"
 1254 0843 00       		.p2align 2 	
 1255              	QDUP:
 1256 0844 2C00     		MOVS	R4,R5
 1257 0846 18BF     		IT NE 
 1258 0848 41F8045D 	    STRNE	R5,[R1,#-4]!
 1259 084c E2E5     		_NEXT
 1260              	
 1261              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1262              	// 	Rotate top 3 items.
 1263              	
 1264 084e 3E080000 		.word	_QDUP
 1265 0852 03       	_ROT:	.byte   3
 1266 0853 524F54   		.ascii "ROT"
 1267 0856 00BF     		.p2align 2 	
 1268              	ROT:
 1269 0858 0C68     		LDR	R4,[R1]  // r4=w2 
 1270 085a 0D60     		STR	R5,[R1]  // w3 replace w2 
 1271 085c 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1272 085e 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1273 0860 D8E5     		_NEXT
 1274              	
 1275              	//    2DROP	( w1 w2 -- )
ARM GAS  stm32eforth-fl.s 			page 26


 1276              	// 	Drop top 2 items.
 1277              	
 1278 0862 52080000 		.word	_ROT
 1279 0866 05       	_DDROP:	.byte   5
 1280 0867 3244524F 		.ascii "2DROP"
 1280      50
 1281              		.p2align 2 	
 1282              	DDROP:
 1283 086c 51F8045B 		_POP
 1284 0870 51F8045B 		_POP
 1285 0874 CEE5     		_NEXT 
 1286              	
 1287              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1288              	// 	Duplicate top 2 items.
 1289              	
 1290 0876 66080000 		.word	_DDROP
 1291 087a 04       	_DDUP:	.byte   4
 1292 087b 32445550 		.ascii "2DUP"
 1293 087f 00       		.p2align 2 	
 1294              	DDUP:
 1295 0880 0C68     		LDR	R4,[R1] // r4=w1
 1296 0882 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1297 0886 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1298 088a C3E5     		_NEXT
 1299              	
 1300              	//    D+	( d1 d2 -- d3 )
 1301              	// 	Add top 2 double numbers.
 1302              	
 1303 088c 7A080000 		.word	_DDUP
 1304 0890 02       	_DPLUS:	.byte   2
 1305 0891 442B     		.ascii "D+"
 1306 0893 00       		.p2align 2 	
 1307              	DPLUS:
 1308 0894 51F8044B 		LDR	R4,[R1],#4
 1309 0898 51F8046B 		LDR	R6,[R1],#4
 1310 089c 0F68     		LDR	R7,[R1]
 1311 089e E419     		ADDS	R4,R4,R7
 1312 08a0 0C60     		STR	R4,[R1]
 1313 08a2 45EB0605 		ADC	R5,R5,R6
 1314 08a6 B5E5     		_NEXT
 1315              	
 1316              	//    NOT	 ( w -- !w )
 1317              	// 	1"s complement.
 1318              	
 1319 08a8 90080000 		.word	_DPLUS
 1320 08ac 03       	_INVER:	.byte   3
 1321 08ad 4E4F54   		.ascii "NOT"
 1322              		.p2align 2 	
 1323              	INVER:
 1324 08b0 6FEA0505 		MVN	R5,R5
 1325 08b4 AEE5     		_NEXT
 1326              	
 1327              	//    NEGATE	( w -- -w )
 1328              	// 	2's complement.
 1329              	
 1330 08b6 AC080000 		.word	_INVER
 1331 08ba 06       	_NEGAT:	.byte   6
ARM GAS  stm32eforth-fl.s 			page 27


 1332 08bb 4E454741 		.ascii "NEGATE"
 1332      5445
 1333 08c1 0000BF   		.p2align 2 	
 1334              	NEGAT:
 1335 08c4 C5F10005 		RSB	R5,R5,#0
 1336 08c8 A4E5     		_NEXT
 1337              	
 1338              	//    ABS	 ( w -- |w| )
 1339              	// 	Absolute.
 1340              	
 1341 08ca BA080000 		.word	_NEGAT
 1342 08ce 03       	_ABSS:	.byte   3
 1343 08cf 414253   		.ascii "ABS"
 1344 08d2 00BF     		.p2align 2 	
 1345              	ABSS:
 1346 08d4 15F0004F 		TST	R5,#0x80000000
 1347 08d8 18BF     		IT NE
 1348 08da 6D42     	    RSBNE   R5,R5,#0
 1349 08dc 9AE5     		_NEXT
 1350              	
 1351              	//  0= ( w -- f )
 1352              	// TOS==0?
 1353              	
 1354 08de CE080000 		.word _ABSS
 1355 08e2 02       	_ZEQUAL: .byte 2
 1356 08e3 303D     		.ascii "0="
 1357 08e5 0000BF   		.p2align 2
 1358              	ZEQUAL:
 1359 08e8 15B9     		cbnz r5,1f
 1360 08ea 4FF0FF35 		mov r5,#-1
 1361 08ee 91E5     		_NEXT 
 1362 08f0 85EA0505 	1:  eor r5,r5,r5  
 1363 08f4 8EE5     		_NEXT 	
 1364              	
 1365              	//    =	 ( w w -- t )
 1366              	// 	Equal?
 1367              	
 1368 08f6 E2080000 		.word	_ZEQUAL
 1369 08fa 01       	_EQUAL:	.byte   1
 1370 08fb 3D       		.ascii "="
 1371              		.p2align 2 	
 1372              	EQUAL:
 1373 08fc 51F8044B 		LDR	R4,[R1],#4
 1374 0900 A542     		CMP	R5,R4
 1375 0902 0CBF     		ITE EQ 
 1376 0904 6FF00005 	    MVNEQ	R5,#0
 1377 0908 0025     		MOVNE	R5,#0
 1378 090a 83E5     		_NEXT
 1379              	
 1380              	//    U<	 ( w w -- t )
 1381              	// 	Unsigned equal?
 1382              	
 1383 090c FA080000 		.word	_EQUAL
 1384 0910 02       	_ULESS:	.byte   2
 1385 0911 553C     		.ascii "U<"
 1386 0913 00       		.p2align 2 	
 1387              	ULESS:
ARM GAS  stm32eforth-fl.s 			page 28


 1388 0914 51F8044B 		LDR	R4,[R1],#4
 1389 0918 AC42     		CMP	R4,R5
 1390 091a 34BF     		ITE CC 
 1391 091c 6FF00005 		MVNCC	R5,#0
 1392 0920 0025     		MOVCS	R5,#0
 1393 0922 77E5     		_NEXT
 1394              	
 1395              	//    <	( w w -- t )
 1396              	// 	Less?
 1397              	
 1398 0924 10090000 		.word	_ULESS
 1399 0928 01       	_LESS:	.byte   1
 1400 0929 3C       		.ascii "<"
 1401 092a 00BF     		.p2align 2 	
 1402              	LESS:
 1403 092c 51F8044B 		LDR	R4,[R1],#4
 1404 0930 AC42     		CMP	R4,R5
 1405 0932 B4BF     	    ITE LT
 1406 0934 6FF00005 		MVNLT	R5,#0
 1407 0938 0025     		MOVGE	R5,#0
 1408 093a 6BE5     		_NEXT 
 1409              	
 1410              	//    >	( w w -- t )
 1411              	// 	greater?
 1412              	
 1413 093c 28090000 		.word	_LESS
 1414 0940 01       	_GREAT:	.byte   1
 1415 0941 3E       		.ascii ">"
 1416 0942 00BF     		.p2align 2 	
 1417              	GREAT:
 1418 0944 51F8044B 		LDR	R4,[R1],#4
 1419 0948 AC42     		CMP	R4,R5
 1420 094a CCBF     		ITE GT
 1421 094c 6FF00005 	    MVNGT	R5,#0
 1422 0950 0025     		MOVLE	R5,#0
 1423 0952 5FE5     		_NEXT
 1424              	
 1425              	//    MAX	 ( w w -- max )
 1426              	// 	Leave maximum.
 1427              	
 1428 0954 40090000 		.word	_GREAT
 1429 0958 03       	_MAX:	.byte   3
 1430 0959 4D4158   		.ascii "MAX"
 1431              		.p2align 2 	
 1432              	MAX:
 1433 095c 51F8044B 		LDR	R4,[R1],#4
 1434 0960 AC42     		CMP	R4,R5
 1435 0962 C8BF     		IT GT 
 1436 0964 2546     		MOVGT	R5,R4
 1437 0966 55E5     		_NEXT 
 1438              	
 1439              	//    MIN	 ( w w -- min )
 1440              	// 	Leave minimum.
 1441              	
 1442 0968 58090000 		.word	_MAX
 1443 096c 03       	_MIN:	.byte   3
 1444 096d 4D494E   		.ascii "MIN"
ARM GAS  stm32eforth-fl.s 			page 29


 1445              		.p2align 2 	
 1446              	MIN:
 1447 0970 51F8044B 		LDR	R4,[R1],#4
 1448 0974 AC42     		CMP	R4,R5
 1449 0976 B8BF     		IT LT
 1450 0978 2546     		MOVLT	R5,R4
 1451 097a 4BE5     		_NEXT
 1452              	
 1453              	//    +!	 ( w a -- )
 1454              	// 	Add to memory.
 1455              	
 1456 097c 6C090000 		.word	_MIN
 1457 0980 02       	_PSTOR:	.byte   2
 1458 0981 2B21     		.ascii "+!"
 1459 0983 00       		.p2align 2 	
 1460              	PSTOR:
 1461 0984 51F8044B 		LDR	R4,[R1],#4
 1462 0988 2E68     		LDR	R6,[R5]
 1463 098a 2644     		ADD	R6,R6,R4
 1464 098c 2E60     		STR	R6,[R5]
 1465 098e 51F8045B 		_POP
 1466 0992 3FE5     		_NEXT
 1467              	
 1468              	//    2!	 ( d a -- )
 1469              	// 	Store double number.
 1470              	
 1471 0994 80090000 		.word	_PSTOR
 1472 0998 02       	_DSTOR:	.byte   2
 1473 0999 3221     		.ascii "2!"
 1474 099b 00       		.p2align 2 	
 1475              	DSTOR:
 1476 099c 51F8044B 		LDR	R4,[R1],#4
 1477 09a0 51F8046B 		LDR	R6,[R1],#4
 1478 09a4 45F8044B 		STR	R4,[R5],#4
 1479 09a8 2E60     		STR	R6,[R5]
 1480 09aa 51F8045B 		_POP
 1481 09ae 31E5     		_NEXT
 1482              	
 1483              	//    2@	 ( a -- d )
 1484              	// 	Fetch double number.
 1485              	
 1486 09b0 98090000 		.word	_DSTOR
 1487 09b4 02       	_DAT:	.byte   2
 1488 09b5 3240     		.ascii "2@"
 1489 09b7 00       		.p2align 2 	
 1490              	DAT:
 1491 09b8 6C68     		LDR	R4,[R5,#4]
 1492 09ba 41F8044D 		STR	R4,[R1,#-4]!
 1493 09be 2D68     		LDR	R5,[R5]
 1494 09c0 28E5     		_NEXT
 1495              	
 1496              	//    COUNT	( b -- b+1 c )
 1497              	// 	Fetch length of string.
 1498              	
 1499 09c2 B4090000 		.word	_DAT
 1500 09c6 05       	_COUNT:	.byte   5
 1501 09c7 434F554E 		.ascii "COUNT"
ARM GAS  stm32eforth-fl.s 			page 30


 1501      54
 1502              		.p2align 2 	
 1503              	COUNT:
 1504 09cc 15F8014B 		LDRB	R4,[R5],#1
 1505 09d0 41F8045D 		_PUSH
 1506 09d4 2546     		MOV	R5,R4
 1507 09d6 1DE5     		_NEXT
 1508              	
 1509              	//    DNEGATE	( d -- -d )
 1510              	// 	Negate double number.
 1511              	
 1512 09d8 C6090000 		.word	_COUNT
 1513 09dc 07       	_DNEGA:	.byte   7
 1514 09dd 444E4547 		.ascii "DNEGATE"
 1514      415445
 1515              		.p2align 2 	
 1516              	DNEGA:
 1517 09e4 0C68     		LDR	R4,[R1]
 1518 09e6 A6EB0606 		SUB	R6,R6,R6
 1519 09ea 341B     		SUBS R4,R6,R4
 1520 09ec 66EB0505 		SBC	R5,R6,R5
 1521 09f0 0C60     		STR	R4,[R1]
 1522 09f2 0FE5     		_NEXT
 1523              	
 1524              	// **************************************************************************
 1525              	//  System and user variables
 1526              	
 1527              	//    doVAR	( -- a )
 1528              	// 	Run time routine for VARIABLE and CREATE.
 1529              	
 1530              	// 	.word	_DNEGA
 1531              	// _DOVAR	.byte  COMPO+5
 1532              	// 	.ascii "doVAR"
 1533              	// 	.p2align 2 	
 1534              	DOVAR:
 1535 09f4 41F8045D 		_PUSH
 1536 09f8 50F8045B 		LDR R5,[R0],#4 
 1537 09fc 0AE5     		_NEXT 
 1538              	
 1539              	//    doCON	( -- a ) 
 1540              	// 	Run time routine for CONSTANT.
 1541              	
 1542              	// 	.word	_DOVAR
 1543              	// _DOCON	.byte  COMPO+5
 1544              	// 	.ascii "doCON"
 1545              	// 	.p2align 2 	
 1546              	DOCON:
 1547 09fe 41F8045D 		_PUSH
 1548 0a02 50F8045B 		LDR R5,[R0],#4
 1549              	
 1550              	/***********************
 1551              	  system variables 
 1552              	***********************/
 1553              	
 1554              	 // SEED ( -- a)
 1555              	 // return PRNG seed address 
 1556              	
ARM GAS  stm32eforth-fl.s 			page 31


 1557 0a06 DC090000 		.word _DNEGA
 1558 0a0a 04       	_SEED: .byte 4
 1559 0a0b 53454544 		.ascii "SEED"
 1560 0a0f 00       		.p2align 2
 1561              	SEED:
 1562 0a10 41F8045D 		_PUSH 
 1563 0a14 03F10805 		ADD R5,R3,#SEED_OFS
 1564 0a18 FCE4     		_NEXT 	
 1565              	
 1566              	//  MSEC ( -- a)
 1567              	// return address of milliseconds counter
 1568 0a1a 0A0A0000 	  .word _SEED 
 1569 0a1e 04       	_MSEC: .byte 4
 1570 0a1f 4D534543 	  .ascii "MSEC"
 1571 0a23 00       	  .p2align 2 
 1572              	MSEC:
 1573 0a24 41F8045D 	  _PUSH
 1574 0a28 03F10C05 	  ADD R5,R3,#TICKS_OFS
 1575 0a2c F2E4     	  _NEXT 
 1576              	
 1577              	// TIMER ( -- a )
 1578              	// count down timer 
 1579 0a2e 1E0A0000 	  .word _MSEC
 1580 0a32 05       	_TIMER:  .byte 5
 1581 0a33 54494D45 	  .ascii "TIMER"
 1581      52
 1582              	  .p2align 2 
 1583              	TIMER:
 1584 0a38 41F8045D 	  _PUSH 
 1585 0a3c 03F11005 	  ADD R5,R3,#TIMER_OFS
 1586 0a40 E8E4     	  _NEXT
 1587              	
 1588              	// >RAM ( -- a )
 1589              	// compilation target 
 1590              	// -1 compile to RAM, 0 compile to FLASH 
 1591 0a42 320A0000 		.word _TIMER
 1592 0a46 04       	_TORAM: .byte 4 
 1593 0a47 3E52414D 		.ascii ">RAM" 
 1594 0a4b 00       		.p2align 2 
 1595              	TORAM:
 1596 0a4c 41F8045D 		_PUSH 
 1597 0a50 03F11405 		ADD R5,R3,#TORAM_OFS
 1598 0a54 DEE4     		_NEXT 
 1599              	
 1600              	//    'BOOT	 ( -- a )
 1601              	// 	Application.
 1602              	
 1603 0a56 460A0000 		.word	_TORAM
 1604 0a5a 05       	_TBOOT:	.byte   5
 1605 0a5b 27424F4F 		.ascii "'BOOT"
 1605      54
 1606              		.p2align 2 	
 1607              	TBOOT:
 1608 0a60 41F8045D 		_PUSH
 1609 0a64 03F11C05 		ADD	R5,R3,#BOOT_OFS 
 1610 0a68 D4E4     		_NEXT
 1611              		
ARM GAS  stm32eforth-fl.s 			page 32


 1612              	//    BASE	( -- a )
 1613              	// 	Storage of the radix base for numeric I/O.
 1614              	
 1615 0a6a 5A0A0000 		.word	_TBOOT
 1616 0a6e 04       	_BASE:	.byte   4
 1617 0a6f 42415345 		.ascii "BASE"
 1618 0a73 00       		.p2align 2 	
 1619              	BASE:
 1620 0a74 41F8045D 		_PUSH
 1621 0a78 03F12005 		ADD	R5,R3,#BASE_OFS
 1622 0a7c CAE4     		_NEXT
 1623              	
 1624              	//    tmp	 ( -- a )
 1625              	// 	A temporary storage location used in parse and find.
 1626              	
 1627              	// 	.word	_BASE
 1628              	// _TEMP	.byte   COMPO+3
 1629              	// 	.ascii "tmp"
 1630              	// 	.p2align 2 	
 1631              	TEMP:
 1632 0a7e 41F8045D 		_PUSH
 1633 0a82 03F12405 		ADD	R5,R3,#TMP_OFS
 1634 0a86 C5E4     		_NEXT
 1635              	
 1636              	//    SPAN	( -- a )
 1637              	// 	Hold character count received by EXPECT.
 1638              	
 1639 0a88 6E0A0000 		.word	_BASE
 1640 0a8c 04       	_SPAN:	.byte   4
 1641 0a8d 5350414E 		.ascii "SPAN"
 1642 0a91 0000BF   		.p2align 2 	
 1643              	SPAN:
 1644 0a94 41F8045D 		_PUSH
 1645 0a98 03F12805 		ADD	R5,R3,#SPAN_OFS
 1646 0a9c BAE4     		_NEXT
 1647              	
 1648              	//    >IN	 ( -- a )
 1649              	// 	Hold the character pointer while parsing input stream.
 1650              	
 1651 0a9e 8C0A0000 		.word	_SPAN
 1652 0aa2 03       	_INN:	.byte   3
 1653 0aa3 3E494E   		.ascii ">IN"
 1654 0aa6 00BF     		.p2align 2 	
 1655              	INN:
 1656 0aa8 41F8045D 		_PUSH
 1657 0aac 03F12C05 		ADD	R5,R3,#TOIN_OFS
 1658 0ab0 B0E4     		_NEXT
 1659              	
 1660              	//    #TIB	( -- a )
 1661              	// 	Hold the current count and address of the terminal input buffer.
 1662              	
 1663 0ab2 A20A0000 		.word	_INN
 1664 0ab6 04       	_NTIB:	.byte   4
 1665 0ab7 23544942 		.ascii "#TIB"
 1666 0abb 00       		.p2align 2 	
 1667              	NTIB:
 1668 0abc 41F8045D 		_PUSH
ARM GAS  stm32eforth-fl.s 			page 33


 1669 0ac0 03F13005 		ADD	R5,R3,#NTIB_OFS
 1670 0ac4 A6E4     		_NEXT
 1671              	
 1672              	//    'EVAL	( -- a )
 1673              	// 	Execution vector of EVAL.
 1674              	
 1675 0ac6 B60A0000 		.word	_NTIB
 1676 0aca 05       	_TEVAL:	.byte   5
 1677 0acb 27455641 		.ascii "'EVAL"
 1677      4C
 1678              		.p2align 2 	
 1679              	TEVAL:
 1680 0ad0 41F8045D 		_PUSH
 1681 0ad4 03F13805 		ADD	R5,R3,#EVAL_OFS
 1682 0ad8 9CE4     		_NEXT
 1683              	
 1684              	//    HLD	 ( -- a )
 1685              	// 	Hold a pointer in building a numeric output string.
 1686              	
 1687 0ada CA0A0000 		.word	_TEVAL
 1688 0ade 03       	_HLD:	.byte   3
 1689 0adf 484C44   		.ascii "HLD"
 1690 0ae2 00BF     		.p2align 2 	
 1691              	HLD:
 1692 0ae4 41F8045D 		_PUSH
 1693 0ae8 03F13C05 		ADD	R5,R3,#HLD_OFS
 1694 0aec 92E4     		_NEXT
 1695              	
 1696              	//    CONTEXT	( -- a )
 1697              	// 	A area to specify vocabulary search order.
 1698              	
 1699 0aee DE0A0000 		.word	_HLD
 1700 0af2 07       	_CNTXT:	.byte   7
 1701 0af3 434F4E54 		.ascii "CONTEXT"
 1701      455854
 1702 0afa 00BF     		.p2align 2 	
 1703              	CNTXT:
 1704              	CRRNT:
 1705 0afc 41F8045D 		_PUSH
 1706 0b00 03F14005 		ADD	R5,R3,#CTXT_OFS
 1707 0b04 86E4     		_NEXT
 1708              	
 1709              	//    CP	( -- a )
 1710              	// 	Point to top name in RAM vocabulary.
 1711              	
 1712 0b06 F20A0000 		.word	_CNTXT
 1713 0b0a 02       	_CP:	.byte   2
 1714 0b0b 4350     		.ascii "CP"
 1715 0b0d 0000BF   		.p2align 2 	
 1716              	CPP:
 1717 0b10 41F8045D 		_PUSH
 1718 0b14 03F14805 		ADD	R5,R3,#RAM_CTOP_OFS
 1719 0b18 7CE4     		_NEXT
 1720              	
 1721              	//   FCP ( -- a )
 1722              	//  Point ot top of Forth system dictionary
 1723 0b1a 0A0B0000 		.word _CP
ARM GAS  stm32eforth-fl.s 			page 34


 1724 0b1e 03       	_FCP: .byte 3            
 1725 0b1f 464350   		.ascii "FCP"
 1726 0b22 00BF     		.p2align 2 
 1727              	FCP: 
 1728 0b24 41F8045D 		_PUSH 
 1729 0b28 03F14405 		ADD R5,R3,#FORTH_CTOP_OFS 
 1730 0b2c 72E4     		_NEXT 
 1731              	
 1732              	//    LAST	( -- a )
 1733              	// 	Point to the last name in the name dictionary.
 1734              	
 1735 0b2e 1E0B0000 		.word	_FCP
 1736 0b32 04       	_LAST:	.byte   4
 1737 0b33 4C415354 		.ascii "LAST"
 1738 0b37 00       		.p2align 2 	
 1739              	LAST:
 1740 0b38 41F8045D 		_PUSH
 1741 0b3c 03F14C05 		ADD	R5,R3,#LASTN_OFS
 1742 0b40 68E4     		_NEXT
 1743              	
 1744              	//	FTRACE ( -- a )
 1745              	// return trace flag address 
 1746 0b42 320B0000 		.word _LAST  
 1747 0b46 06       	_FTRACE: .byte 6
 1748 0b47 46545241 		.ascii "FTRACE"
 1748      4345
 1749 0b4d 0000BF   		.p2align 2 
 1750              	FTRACE:	
 1751 0b50 41F8045D 		_PUSH 
 1752 0b54 03F10405 		ADD R5,R3,#FTRACE_OFS 
 1753 0b58 5CE4     		_NEXT 
 1754              	
 1755              	/***********************
 1756              		system constants 
 1757              	***********************/
 1758              	
 1759              	//	USER_BEGIN ( -- a )
 1760              	//  where user area begin in RAM
 1761 0b5a 460B0000 		.word _FTRACE
 1762 0b5e 0A       	_USER_BGN: .byte 10
 1763 0b5f 55534552 		.ascii "USER_BEGIN"
 1763      5F424547 
 1763      494E
 1764 0b69 0000BF   		.p2align 2
 1765              	USER_BEGIN:
 1766 0b6c 41F8045D 		_PUSH 
 1767 0b70 004D     		ldr r5,USR_BGN_ADR 
 1768 0b72 4FE4     		_NEXT 
 1769              	USR_BGN_ADR:
 1770 0b74 00010020 	.word  DTOP 
 1771              	
 1772              	//  USER_END ( -- a )
 1773              	//  where user area end in RAM 
 1774 0b78 5E0B0000 		.word _USER_BGN
 1775 0b7c 08       	_USER_END: .byte 8 
 1776 0b7d 55534552 		.ascii "USER_END" 
 1776      5F454E44 
ARM GAS  stm32eforth-fl.s 			page 35


 1777 0b85 0000BF   		.p2align 2 
 1778              	USER_END:
 1779 0b88 41F8045D 		_PUSH 
 1780 0b8c 004D     		ldr r5,USER_END_ADR 
 1781 0b8e 41E4     		_NEXT 
 1782              	USER_END_ADR:
 1783 0b90 004E0020 		.word DEND 
 1784              	
 1785              	//  IMAGE0 ( -- a )
 1786              	//  where user image is saved in FLASH
 1787 0b94 7C0B0000 		.word _USER_END
 1788 0b98 06       	_IMAGE0: .byte 6
 1789 0b99 494D4147 		.ascii "IMAGE0"
 1789      4530
 1790 0b9f 00       		.p2align 2 
 1791              	IMAGE0:
 1792 0ba0 41F8045D 		_PUSH
 1793 0ba4 004D     		ldr r5,USR_IMG_ADR   
 1794 0ba6 35E4     		_NEXT 
 1795              	USR_IMG_ADR:
 1796 0ba8 00000000 		.word USER_SPACE 
 1797              	
 1798              	// IMG_SIGN ( -- a )
 1799              	// image signature 
 1800 0bac 980B0000 		.word _IMAGE0 
 1801 0bb0 08       	_IMG_SIGN: .byte 8
 1802 0bb1 494D475F 		.ascii "IMG_SIGN"
 1802      5349474E 
 1803 0bb9 0000BF   		.p2align 2
 1804              	IMG_SIGN: 
 1805 0bbc 41F8045D 		_PUSH 
 1806 0bc0 03F11805 		ADD r5,r3,#IMG_SIGN_OFS 
 1807 0bc4 2D68     		LDR R5,[R5]
 1808 0bc6 25E4     		_NEXT 
 1809              	
 1810              	/* *********************
 1811              	  Common functions
 1812              	***********************/
 1813              	
 1814              	//    WITHIN	( u ul uh -- t )
 1815              	// 	Return true if u is within the range of ul and uh.
 1816              	
 1817 0bc8 B00B0000 		.word	_IMG_SIGN
 1818 0bcc 06       	_WITHI:	.byte   6
 1819 0bcd 57495448 		.ascii "WITHIN"
 1819      494E
 1820 0bd3 00       		.p2align 2 	
 1821              	WITHI:
 1822 0bd4 FFF71AFC 		_NEST
 1823 0bd8 95060000 		_ADR	OVER
 1824 0bdc 45070000 		_ADR	SUBB
 1825 0be0 19060000 		_ADR	TOR
 1826 0be4 45070000 		_ADR	SUBB
 1827 0be8 F5050000 		_ADR	RFROM
 1828 0bec 15090000 		_ADR	ULESS
 1829 0bf0 1B040000 		_UNNEST
 1830              	
ARM GAS  stm32eforth-fl.s 			page 36


 1831              	//  Divide
 1832              	
 1833              	//    UM/MOD	( udl udh u -- ur uq )
 1834              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1835              	
 1836 0bf4 CC0B0000 		.word	_WITHI
 1837 0bf8 06       	_UMMOD:	.byte   6
 1838 0bf9 554D2F4D 		.ascii "UM/MOD"
 1838      4F44
 1839 0bff 00       		.p2align 2 	
 1840              	UMMOD:
 1841 0c00 4FF00107 		MOV	R7,#1
 1842 0c04 51F8044B 		LDR	R4,[R1],#4
 1843 0c08 0E68     		LDR	R6,[R1]
 1844              	UMMOD0:
 1845 0c0a B619     		ADDS	R6,R6,R6
 1846 0c0c 6441     		ADCS	R4,R4,R4
 1847 0c0e 04D3     		BCC	UMMOD1
 1848 0c10 A4EB0504 		SUB	R4,R4,R5
 1849 0c14 06F10106 		ADD	R6,R6,#1
 1850 0c18 04E0     		B UMMOD2
 1851              	UMMOD1:
 1852 0c1a 641B     		SUBS	R4,R4,R5 
 1853 0c1c 28BF     		IT CS 
 1854 0c1e 0136     		ADDCS	R6,R6,#1
 1855 0c20 00D2     		BCS	UMMOD2
 1856 0c22 2C44     		ADD	R4,R4,R5
 1857              	UMMOD2:
 1858 0c24 FF19     		ADDS	R7,R7,R7
 1859 0c26 F0D3     		BCC	UMMOD0
 1860 0c28 3546     		MOV	R5,R6
 1861 0c2a 0C60     		STR	R4,[R1]
 1862 0c2c FFF7F2BB 		_NEXT
 1863              	
 1864              	//    M/MOD	( d n -- r q )
 1865              	// 	Signed floored divide of double by single. Return mod and quotient.
 1866              	
 1867 0c30 F80B0000 		.word	_UMMOD
 1868 0c34 05       	_MSMOD:	.byte  5
 1869 0c35 4D2F4D4F 		.ascii "M/MOD"
 1869      44
 1870 0c3a 00BF     		.p2align 2 	
 1871              	MSMOD:	
 1872 0c3c FFF7E6FB 		_NEST
 1873 0c40 71060000 		_ADR	DUPP
 1874 0c44 A5060000 		_ADR	ZLESS
 1875 0c48 71060000 		_ADR	DUPP
 1876 0c4c 19060000 		_ADR	TOR
 1877 0c50 89050000 		_QBRAN MMOD1
 1877      680C0000 
 1878 0c58 C5080000 		_ADR	NEGAT
 1879 0c5c 19060000 		_ADR	TOR
 1880 0c60 E5090000 		_ADR	DNEGA
 1881 0c64 F5050000 		_ADR	RFROM
 1882              	MMOD1:
 1883 0c68 19060000 		_ADR	TOR
 1884 0c6c 71060000 		_ADR	DUPP
ARM GAS  stm32eforth-fl.s 			page 37


 1885 0c70 A5060000 		_ADR	ZLESS
 1886 0c74 89050000 		_QBRAN MMOD2
 1886      840C0000 
 1887 0c7c 09060000 		_ADR	RAT
 1888 0c80 35070000 		_ADR	PLUS
 1889              	MMOD2:
 1890 0c84 F5050000 		_ADR	RFROM
 1891 0c88 010C0000 		_ADR	UMMOD
 1892 0c8c F5050000 		_ADR	RFROM
 1893 0c90 89050000 		_QBRAN	MMOD3
 1893      A40C0000 
 1894 0c98 81060000 		_ADR	SWAP
 1895 0c9c C5080000 		_ADR	NEGAT
 1896 0ca0 81060000 		_ADR	SWAP
 1897              	MMOD3:   
 1898 0ca4 1B040000 		_UNNEST
 1899              	
 1900              	//    /MOD	( n n -- r q )
 1901              	// 	Signed divide. Return mod and quotient.
 1902              	
 1903 0ca8 340C0000 		.word	_MSMOD
 1904 0cac 04       	_SLMOD:	.byte   4
 1905 0cad 2F4D4F44 		.ascii "/MOD"
 1906 0cb1 0000BF   		.p2align 2 	
 1907              	SLMOD:
 1908 0cb4 FFF7AAFB 		_NEST
 1909 0cb8 95060000 		_ADR	OVER
 1910 0cbc A5060000 		_ADR	ZLESS
 1911 0cc0 81060000 		_ADR	SWAP
 1912 0cc4 3D0C0000 		_ADR	MSMOD
 1913 0cc8 1B040000 		_UNNEST
 1914              	
 1915              	//    MOD	 ( n n -- r )
 1916              	// 	Signed divide. Return mod only.
 1917              	
 1918 0ccc AC0C0000 		.word	_SLMOD
 1919 0cd0 03       	_MODD:	.byte  3
 1920 0cd1 4D4F44   		.ascii "MOD"
 1921              		.p2align 2 	
 1922              	MODD:
 1923 0cd4 FFF79AFB 		_NEST
 1924 0cd8 B50C0000 		_ADR	SLMOD
 1925 0cdc 61060000 		_ADR	DROP
 1926 0ce0 1B040000 		_UNNEST
 1927              	
 1928              	//    /	   ( n n -- q )
 1929              	// 	Signed divide. Return quotient only.
 1930              	
 1931 0ce4 D00C0000 		.word	_MODD
 1932 0ce8 01       	_SLASH:	.byte  1
 1933 0ce9 2F       		.ascii "/"
 1934 0cea 00BF     		.p2align 2 	
 1935              	SLASH:
 1936 0cec FFF78EFB 		_NEST
 1937 0cf0 B50C0000 		_ADR	SLMOD
 1938 0cf4 81060000 		_ADR	SWAP
 1939 0cf8 61060000 		_ADR	DROP
ARM GAS  stm32eforth-fl.s 			page 38


 1940 0cfc 1B040000 		_UNNEST
 1941              	
 1942              	//    */MOD	( n1 n2 n3 -- r q )
 1943              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1944              	
 1945 0d00 E80C0000 		.word	_SLASH
 1946 0d04 05       	_SSMOD:	.byte  5
 1947 0d05 2A2F4D4F 		.ascii "*/MOD"
 1947      44
 1948 0d0a 00BF     		.p2align 2 	
 1949              	SSMOD:
 1950 0d0c FFF77EFB 		_NEST
 1951 0d10 19060000 		_ADR	TOR
 1952 0d14 7D070000 		_ADR	MSTAR
 1953 0d18 F5050000 		_ADR	RFROM
 1954 0d1c 3D0C0000 		_ADR	MSMOD
 1955 0d20 1B040000 		_UNNEST
 1956              	
 1957              	//    */	  ( n1 n2 n3 -- q )
 1958              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1959              	
 1960 0d24 040D0000 		.word	_SSMOD
 1961 0d28 02       	_STASL:	.byte  2
 1962 0d29 2A2F     		.ascii "*/"
 1963 0d2b 00       		.p2align 2 	
 1964              	STASL:
 1965 0d2c FFF76EFB 		_NEST
 1966 0d30 0D0D0000 		_ADR	SSMOD
 1967 0d34 81060000 		_ADR	SWAP
 1968 0d38 61060000 		_ADR	DROP
 1969 0d3c 1B040000 		_UNNEST
 1970              	
 1971              	// **************************************************************************
 1972              	//  Miscellaneous
 1973              	
 1974              	//    ALIGNED	( b -- a )
 1975              	// 	Align address to the cell boundary.
 1976              	
 1977 0d40 280D0000 		.word	_STASL
 1978 0d44 07       	_ALGND:	.byte   7
 1979 0d45 414C4947 		.ascii "ALIGNED"
 1979      4E4544
 1980              		.p2align 2 	
 1981              	ALGND:
 1982 0d4c 05F10305 		ADD	R5,R5,#3
 1983 0d50 6FF00304 		MVN	R4,#3
 1984 0d54 05EA0405 		AND	R5,R5,R4
 1985 0d58 FFF75CBB 		_NEXT
 1986              	
 1987              	//    >CHAR	( c -- c )
 1988              	// 	Filter non-printing characters.
 1989              	
 1990 0d5c 440D0000 		.word	_ALGND
 1991 0d60 05       	_TCHAR:	.byte  5
 1992 0d61 3E434841 		.ascii ">CHAR"
 1992      52
 1993 0d66 00BF     		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 39


 1994              	TCHAR:
 1995 0d68 FFF750FB 		_NEST
 1996 0d6c 4D050000 		_DOLIT  0x7F
 1996      7F000000 
 1997 0d74 B5060000 		_ADR	ANDD
 1998 0d78 71060000 		_ADR	DUPP	// mask msb
 1999 0d7c F1070000 		_ADR	BLANK
 2000 0d80 4D050000 		_DOLIT 	127
 2000      7F000000 
 2001 0d88 D50B0000 		_ADR	WITHI	// check for printable
 2002 0d8c B1080000 		_ADR	INVER
 2003 0d90 89050000 		_QBRAN	TCHA1
 2003      A40D0000 
 2004 0d98 61060000 		_ADR	DROP
 2005 0d9c 4D050000 		_DOLIT 	'_'	// replace non-printables
 2005      5F000000 
 2006              	TCHA1:
 2007 0da4 1B040000 		  _UNNEST
 2008              	
 2009              	//    DEPTH	( -- n )
 2010              	// 	Return the depth of the data stack.
 2011              	
 2012 0da8 600D0000 		.word	_TCHAR
 2013 0dac 05       	_DEPTH:	.byte  5
 2014 0dad 44455054 		.ascii "DEPTH"
 2014      48
 2015 0db2 00BF     		.p2align 2 	
 2016              	DEPTH:
 2017 0db4 41F8045D 		_PUSH
 2018 0db8 44F68465 		MOVW	R5,#SPP&0xffff+4 
 2019 0dbc C2F20005 	 	MOVT	R5,#SPP>>16 
 2020 0dc0 A5EB0105 		SUB	R5,R5,R1
 2021 0dc4 4FEAA505 		ASR	R5,R5,#2
 2022 0dc8 A5F10105 		SUB	R5,R5,#1
 2023 0dcc FFF722BB 		_NEXT
 2024              	
 2025              	//    PICK	( ... +n -- ... w )
 2026              	// 	Copy the nth stack item to tos.
 2027              	
 2028 0dd0 AC0D0000 		.word	_DEPTH
 2029 0dd4 04       	_PICK:	.byte  4
 2030 0dd5 5049434B 		.ascii "PICK"
 2031 0dd9 0000BF   		.p2align 2 	
 2032              	PICK:
 2033 0ddc FFF716FB 		_NEST
 2034 0de0 91070000 		_ADR	ONEP
 2035 0de4 05080000 		_ADR	CELLS
 2036 0de8 4D060000 		_ADR	SPAT
 2037 0dec 35070000 		_ADR	PLUS
 2038 0df0 C9050000 		_ADR	AT
 2039 0df4 1B040000 		_UNNEST
 2040              	
 2041              	// **************************************************************************
 2042              	//  Memory access
 2043              	
 2044              	//    HERE	( -- a )
 2045              	// 	Return the top of the code dictionary.
ARM GAS  stm32eforth-fl.s 			page 40


 2046              	
 2047 0df8 D40D0000 		.word	_PICK
 2048 0dfc 04       	_HERE:	.byte  4
 2049 0dfd 48455245 		.ascii "HERE"
 2050 0e01 0000BF   		.p2align 2 	
 2051              	HERE:
 2052 0e04 FFF702FB 		_NEST
 2053 0e08 110B0000 		_ADR	CPP
 2054 0e0c C9050000 		_ADR	AT
 2055 0e10 1B040000 		_UNNEST
 2056              		
 2057              	//    PAD	 ( -- a )
 2058              	// 	Return the address of a temporary buffer.
 2059              	
 2060 0e14 FC0D0000 		.word	_HERE
 2061 0e18 03       	_PAD:	.byte  3
 2062 0e19 504144   		.ascii "PAD"
 2063              		.p2align 2 	
 2064              	PAD:
 2065 0e1c FFF7F6FA 		_NEST
 2066 0e20 050E0000 		_ADR	HERE
 2067 0e24 4D050000 		_DOLIT 80
 2067      50000000 
 2068 0e2c 35070000 		_ADR PLUS 
 2069 0e30 1B040000 		_UNNEST
 2070              	
 2071              	//    TIB	 ( -- a )
 2072              	// 	Return the address of the terminal input buffer.
 2073              	
 2074 0e34 180E0000 		.word	_PAD
 2075 0e38 03       	_TIB:	.byte  3
 2076 0e39 544942   		.ascii "TIB"
 2077              		.p2align 2 	
 2078              	TIB:
 2079 0e3c 41F8045D 		_PUSH
 2080 0e40 5D6B     		ldr r5,[r3,#TIB_OFS]
 2081 0e42 FFF7E7BA 		_NEXT
 2082              	
 2083              	//    @EXECUTE	( a -- )
 2084              	// 	Execute vector stored in address a.
 2085              	
 2086 0e46 380E0000 		.word	_TIB
 2087 0e4a 08       	_ATEXE:	.byte   8
 2088 0e4b 40455845 		.ascii "@EXECUTE"
 2088      43555445 
 2089 0e53 00       		.p2align 2 	
 2090              	ATEXE: 
 2091 0e54 2C00     		MOVS	R4,R5
 2092 0e56 51F8045B 		_POP
 2093 0e5a 2468     		LDR	R4,[R4]
 2094 0e5c 44F00104 		ORR	R4,R4,#1
 2095 0e60 18BF     	    IT NE 
 2096 0e62 2047     		BXNE	R4
 2097 0e64 FFF7D6BA 		_NEXT
 2098              	
 2099              	//    CMOVE	( b1 b2 u -- )
 2100              	// 	Copy u bytes from b1 to b2.
ARM GAS  stm32eforth-fl.s 			page 41


 2101              	
 2102 0e68 4A0E0000 		.word	_ATEXE
 2103 0e6c 05       	_CMOVE:	.byte   5
 2104 0e6d 434D4F56 		.ascii "CMOVE"
 2104      45
 2105 0e72 00BF     		.p2align 2 	
 2106              	CMOVE:
 2107 0e74 51F8046B 		LDR	R6,[R1],#4
 2108 0e78 51F8047B 		LDR	R7,[R1],#4
 2109 0e7c 03E0     		B CMOV1
 2110              	CMOV0:
 2111 0e7e 17F8014B 		LDRB	R4,[R7],#1
 2112 0e82 06F8014B 		STRB	R4,[R6],#1
 2113              	CMOV1:
 2114 0e86 2D00     		MOVS	R5,R5
 2115 0e88 02D0     		BEQ	CMOV2
 2116 0e8a A5F10105 		SUB	R5,R5,#1
 2117 0e8e F6E7     		B CMOV0
 2118              	CMOV2:
 2119 0e90 51F8045B 		_POP
 2120 0e94 FFF7BEBA 		_NEXT
 2121              	
 2122              	//    MOVE	( a1 a2 u -- )
 2123              	// 	Copy u words from a1 to a2.
 2124              	
 2125 0e98 6C0E0000 		.word	_CMOVE
 2126 0e9c 04       	_MOVE:	.byte   4
 2127 0e9d 4D4F5645 		.ascii "MOVE"
 2128 0ea1 0000BF   		.p2align 2 	
 2129              	MOVE:
 2130 0ea4 25F00305 		AND	R5,R5,#-4
 2131 0ea8 51F8046B 		LDR	R6,[R1],#4
 2132 0eac 51F8047B 		LDR	R7,[R1],#4
 2133 0eb0 03E0     		B MOVE1
 2134              	MOVE0:
 2135 0eb2 57F8044B 		LDR	R4,[R7],#4
 2136 0eb6 46F8044B 		STR	R4,[R6],#4
 2137              	MOVE1:
 2138 0eba 2D00     		MOVS	R5,R5
 2139 0ebc 02D0     		BEQ	MOVE2
 2140 0ebe A5F10405 		SUB	R5,R5,#4
 2141 0ec2 F6E7     		B MOVE0
 2142              	MOVE2:
 2143 0ec4 51F8045B 		_POP
 2144 0ec8 FFF7A4BA 		_NEXT
 2145              	
 2146              	//    FILL	( b u c -- )
 2147              	// 	Fill u bytes of character c to area beginning at b.
 2148              	
 2149 0ecc 9C0E0000 		.word	_MOVE
 2150 0ed0 04       	_FILL:	.byte   4
 2151 0ed1 46494C4C 		.ascii "FILL"
 2152 0ed5 0000BF   		.p2align 2 	
 2153              	FILL:
 2154 0ed8 51F8046B 		LDR	R6,[R1],#4
 2155 0edc 51F8047B 		LDR	R7,[R1],#4
 2156              	FILL0:
ARM GAS  stm32eforth-fl.s 			page 42


 2157 0ee0 00E0     		B FILL1
 2158 0ee2 2D46     		MOV	R5,R5
 2159              	FILL1:
 2160 0ee4 07F8015B 		STRB	R5,[R7],#1
 2161 0ee8 3600     		MOVS	R6,R6
 2162 0eea 02D0     		BEQ	FILL2
 2163 0eec A6F10106 		SUB	R6,R6,#1
 2164 0ef0 F6E7     		B FILL0
 2165              	FILL2:
 2166 0ef2 51F8045B 		_POP
 2167 0ef6 FFF78DBA 		_NEXT
 2168              	
 2169              	//    PACK$	( b u a -- a )
 2170              	// 	Build a counted word with u characters from b. Null fill.
 2171              	
 2172 0efa D00E0000 		.word	_FILL
 2173 0efe 05       	_PACKS:	.byte  5
 2174 0eff 5041434B 		.ascii "PACK$$"
 2174      2424
 2175 0f05 0000BF   		.p2align 2 	
 2176              	PACKS:
 2177 0f08 FFF780FA 		_NEST
 2178 0f0c 4D0D0000 		_ADR	ALGND
 2179 0f10 71060000 		_ADR	DUPP
 2180 0f14 19060000 		_ADR	TOR			// strings only on cell boundary
 2181 0f18 95060000 		_ADR	OVER
 2182 0f1c 35070000 		_ADR	PLUS
 2183 0f20 91070000 		_ADR	ONEP
 2184 0f24 4D050000 		_DOLIT 	0xFFFFFFFC
 2184      FCFFFFFF 
 2185 0f2c B5060000 		_ADR	ANDD			// count mod cell
 2186 0f30 4D050000 		_DOLIT 	0
 2186      00000000 
 2187 0f38 81060000 		_ADR	SWAP
 2188 0f3c B5050000 		_ADR	STORE			// null fill cell
 2189 0f40 09060000 		_ADR	RAT
 2190 0f44 81080000 		_ADR	DDUP
 2191 0f48 D5050000 		_ADR	CSTOR
 2192 0f4c 91070000 		_ADR	ONEP			// save count
 2193 0f50 81060000 		_ADR	SWAP
 2194 0f54 750E0000 		_ADR	CMOVE
 2195 0f58 F5050000 		_ADR	RFROM
 2196 0f5c 1B040000 		_UNNEST   			// move string
 2197              	
 2198              	// **************************************************************************
 2199              	//  Numeric output, single precision
 2200              	
 2201              	//    DIGIT	( u -- c )
 2202              	// 	Convert digit u to a character.
 2203              	
 2204 0f60 FE0E0000 		.word	_PACKS
 2205 0f64 05       	_DIGIT:	.byte  5
 2206 0f65 44494749 		.ascii "DIGIT"
 2206      54
 2207 0f6a 00BF     		.p2align 2 	
 2208              	DIGIT:
 2209 0f6c FFF74EFA 		_NEST
ARM GAS  stm32eforth-fl.s 			page 43


 2210 0f70 4D050000 		_DOLIT 9
 2210      09000000 
 2211 0f78 95060000 		_ADR	OVER
 2212 0f7c 2D090000 		_ADR	LESS
 2213 0f80 4D050000 		_DOLIT	7
 2213      07000000 
 2214 0f88 B5060000 		_ADR	ANDD
 2215 0f8c 35070000 		_ADR	PLUS
 2216 0f90 4D050000 		_DOLIT	'0'
 2216      30000000 
 2217 0f98 35070000 		_ADR	PLUS 
 2218 0f9c 1B040000 		_UNNEST
 2219              	
 2220              	//    EXTRACT	( n base -- n c )
 2221              	// 	Extract the least significant digit from n.
 2222              	
 2223 0fa0 640F0000 		.word	_DIGIT
 2224 0fa4 07       	_EXTRC:	.byte  7
 2225 0fa5 45585452 		.ascii "EXTRACT"
 2225      414354
 2226              		.p2align 2 	
 2227              	EXTRC:
 2228 0fac FFF72EFA 		_NEST
 2229 0fb0 4D050000 		_DOLIT 0
 2229      00000000 
 2230 0fb8 81060000 		_ADR	SWAP
 2231 0fbc 010C0000 		_ADR	UMMOD
 2232 0fc0 81060000 		_ADR	SWAP
 2233 0fc4 6D0F0000 		_ADR	DIGIT
 2234 0fc8 1B040000 		_UNNEST
 2235              	
 2236              	//    <#	  ( -- )
 2237              	// 	Initiate the numeric output process.
 2238              	
 2239 0fcc A40F0000 		.word	_EXTRC
 2240 0fd0 02       	_BDIGS:	.byte  2
 2241 0fd1 3C23     		.ascii "<#"
 2242 0fd3 00       		.p2align 2 	
 2243              	BDIGS:
 2244 0fd4 FFF71AFA 		_NEST
 2245 0fd8 1D0E0000 		_ADR	PAD
 2246 0fdc E50A0000 		_ADR	HLD
 2247 0fe0 B5050000 		_ADR	STORE
 2248 0fe4 1B040000 		_UNNEST
 2249              	
 2250              	//    HOLD	( c -- )
 2251              	// 	Insert a character into the numeric output string.
 2252              	
 2253 0fe8 D00F0000 		.word	_BDIGS
 2254 0fec 04       	_HOLD:	.byte  4
 2255 0fed 484F4C44 		.ascii "HOLD"
 2256 0ff1 0000BF   		.p2align 2 	
 2257              	HOLD:
 2258 0ff4 FFF70AFA 		_NEST
 2259 0ff8 E50A0000 		_ADR	HLD
 2260 0ffc C9050000 		_ADR	AT
 2261 1000 A1070000 		_ADR	ONEM
ARM GAS  stm32eforth-fl.s 			page 44


 2262 1004 71060000 		_ADR	DUPP
 2263 1008 E50A0000 		_ADR	HLD
 2264 100c B5050000 		_ADR	STORE
 2265 1010 D5050000 		_ADR	CSTOR
 2266 1014 1B040000 		_UNNEST
 2267              	
 2268              	//    #	   ( u -- u )
 2269              	// 	Extract one digit from u and append the digit to output string.
 2270              	
 2271 1018 EC0F0000 		.word	_HOLD
 2272 101c 01       	_DIG:	.byte  1
 2273 101d 23       		.ascii "#"
 2274 101e 00BF     		.p2align 2 	
 2275              	DIG:
 2276 1020 FFF7F4F9 		_NEST
 2277 1024 750A0000 		_ADR	BASE
 2278 1028 C9050000 		_ADR	AT
 2279 102c AD0F0000 		_ADR	EXTRC
 2280 1030 F50F0000 		_ADR	HOLD
 2281 1034 1B040000 		_UNNEST
 2282              	
 2283              	//    #S	  ( u -- 0 )
 2284              	// 	Convert u until all digits are added to the output string.
 2285              	
 2286 1038 1C100000 		.word	_DIG
 2287 103c 02       	_DIGS:	.byte  2
 2288 103d 2353     		.ascii "#S"
 2289 103f 00       		.p2align 2 	
 2290              	DIGS:
 2291 1040 FFF7E4F9 		_NEST
 2292              	DIGS1:
 2293 1044 21100000 	    _ADR	DIG
 2294 1048 71060000 		_ADR	DUPP
 2295 104c 89050000 		_QBRAN 	DIGS2
 2295      5C100000 
 2296 1054 9B050000 		_BRAN	DIGS1
 2296      44100000 
 2297              	DIGS2:
 2298 105c 1B040000 		  _UNNEST
 2299              	
 2300              	//    SIGN	( n -- )
 2301              	// 	Add a minus sign to the numeric output string.
 2302              	
 2303 1060 3C100000 		.word	_DIGS
 2304 1064 04       	_SIGN:	.byte  4
 2305 1065 5349474E 		.ascii "SIGN"
 2306 1069 0000BF   		.p2align 2 	
 2307              	SIGN:
 2308 106c FFF7CEF9 		_NEST
 2309 1070 A5060000 		_ADR	ZLESS
 2310 1074 89050000 		_QBRAN	SIGN1
 2310      88100000 
 2311 107c 4D050000 		_DOLIT '-'
 2311      2D000000 
 2312 1084 F50F0000 		_ADR	HOLD
 2313              	SIGN1:
 2314 1088 1B040000 		  _UNNEST
ARM GAS  stm32eforth-fl.s 			page 45


 2315              	
 2316              	//    #>	  ( w -- b u )
 2317              	// 	Prepare the output word to be TYPE'd.
 2318              	
 2319 108c 64100000 		.word	_SIGN
 2320 1090 02       	_EDIGS:	.byte  2
 2321 1091 233E     		.ascii "#>"
 2322 1093 00       		.p2align 2 	
 2323              	EDIGS:
 2324 1094 FFF7BAF9 		_NEST
 2325 1098 61060000 		_ADR	DROP
 2326 109c E50A0000 		_ADR	HLD
 2327 10a0 C9050000 		_ADR	AT
 2328 10a4 1D0E0000 		_ADR	PAD
 2329 10a8 95060000 		_ADR	OVER
 2330 10ac 45070000 		_ADR	SUBB
 2331 10b0 1B040000 		_UNNEST
 2332              	
 2333              	//    str	 ( n -- b u )
 2334              	// 	Convert a signed integer to a numeric string.
 2335              	
 2336              	// 	.word	_EDIGS
 2337              	// _STRR	.byte  3
 2338              	// 	.ascii "str"
 2339              	// 	.p2align 2 	
 2340              	STRR:
 2341 10b4 FFF7AAF9 		_NEST
 2342 10b8 71060000 		_ADR	DUPP
 2343 10bc 19060000 		_ADR	TOR
 2344 10c0 D5080000 		_ADR	ABSS
 2345 10c4 D50F0000 		_ADR	BDIGS
 2346 10c8 41100000 		_ADR	DIGS
 2347 10cc F5050000 		_ADR	RFROM
 2348 10d0 6D100000 		_ADR	SIGN
 2349 10d4 95100000 		_ADR	EDIGS
 2350 10d8 1B040000 		_UNNEST
 2351              	
 2352              	//    HEX	 ( -- )
 2353              	// 	Use radix 16 as base for numeric conversions.
 2354              	
 2355 10dc 90100000 		.word	_EDIGS
 2356 10e0 03       	_HEX:	.byte  3
 2357 10e1 484558   		.ascii "HEX"
 2358              		.p2align 2 	
 2359              	HEX:
 2360 10e4 FFF792F9 		_NEST
 2361 10e8 4D050000 		_DOLIT 16
 2361      10000000 
 2362 10f0 750A0000 		_ADR	BASE
 2363 10f4 B5050000 		_ADR	STORE
 2364 10f8 1B040000 		_UNNEST
 2365              	
 2366              	//    DECIMAL	( -- )
 2367              	// 	Use radix 10 as base for numeric conversions.
 2368              	
 2369 10fc E0100000 		.word	_HEX
 2370 1100 07       	_DECIM:	.byte  7
ARM GAS  stm32eforth-fl.s 			page 46


 2371 1101 44454349 		.ascii "DECIMAL"
 2371      4D414C
 2372              		.p2align 2 	
 2373              	DECIM:
 2374 1108 FFF780F9 		_NEST
 2375 110c 4D050000 		_DOLIT 10
 2375      0A000000 
 2376 1114 750A0000 		_ADR	BASE
 2377 1118 B5050000 		_ADR	STORE
 2378 111c 1B040000 		_UNNEST
 2379              	
 2380              	// **************************************************************************
 2381              	//  Numeric input, single precision
 2382              	
 2383              	//    DIGIT?	( c base -- u t )
 2384              	// 	Convert a character to its numeric value. A flag indicates success.
 2385              	
 2386 1120 00110000 		.word	_DECIM
 2387 1124 06       	_DIGTQ:	.byte  6
 2388 1125 44494749 		.ascii "DIGIT?"
 2388      543F
 2389 112b 00       		.p2align 2 	
 2390              	DIGTQ:
 2391 112c FFF76EF9 		_NEST
 2392 1130 19060000 		_ADR	TOR
 2393 1134 4D050000 		_DOLIT 	'0'
 2393      30000000 
 2394 113c 45070000 		_ADR	SUBB
 2395 1140 4D050000 		_DOLIT 9
 2395      09000000 
 2396 1148 95060000 		_ADR	OVER
 2397 114c 2D090000 		_ADR	LESS
 2398 1150 89050000 		_QBRAN	DGTQ1
 2398      78110000 
 2399 1158 4D050000 		_DOLIT 7
 2399      07000000 
 2400 1160 45070000 		_ADR	SUBB
 2401 1164 71060000 		_ADR	DUPP
 2402 1168 4D050000 		_DOLIT	10
 2402      0A000000 
 2403 1170 2D090000 		_ADR	LESS
 2404 1174 C9060000 		_ADR	ORR
 2405              	DGTQ1:
 2406 1178 71060000 		_ADR	DUPP
 2407 117c F5050000 		_ADR	RFROM
 2408 1180 15090000 		_ADR	ULESS
 2409 1184 1B040000 		_UNNEST
 2410              	
 2411              	//    NUMBER?	( a -- n T | a F )
 2412              	// 	Convert a number word to integer. Push a flag on tos.
 2413              	
 2414 1188 24110000 		.word	_DIGTQ
 2415 118c 07       	_NUMBQ:	.byte  7
 2416 118d 4E554D42 		.ascii "NUMBER?"
 2416      45523F
 2417              		.p2align 2 	
 2418              	NUMBQ:
ARM GAS  stm32eforth-fl.s 			page 47


 2419 1194 FFF73AF9 		_NEST
 2420 1198 750A0000 		_ADR	BASE
 2421 119c C9050000 		_ADR	AT
 2422 11a0 19060000 		_ADR	TOR
 2423 11a4 4D050000 		_DOLIT	0
 2423      00000000 
 2424 11ac 95060000 		_ADR	OVER
 2425 11b0 CD090000 		_ADR	COUNT
 2426 11b4 95060000 		_ADR	OVER
 2427 11b8 E9050000 		_ADR	CAT
 2428 11bc 4D050000 		_DOLIT '$'
 2428      24000000 
 2429 11c4 FD080000 		_ADR	EQUAL
 2430 11c8 89050000 		_QBRAN	NUMQ1
 2430      E4110000 
 2431 11d0 E5100000 		_ADR	HEX
 2432 11d4 81060000 		_ADR	SWAP
 2433 11d8 91070000 		_ADR	ONEP
 2434 11dc 81060000 		_ADR	SWAP
 2435 11e0 A1070000 		_ADR	ONEM
 2436              	NUMQ1:
 2437 11e4 95060000 		_ADR	OVER
 2438 11e8 E9050000 		_ADR	CAT
 2439 11ec 4D050000 		_DOLIT	'-'
 2439      2D000000 
 2440 11f4 FD080000 		_ADR	EQUAL
 2441 11f8 19060000 		_ADR	TOR
 2442 11fc 81060000 		_ADR	SWAP
 2443 1200 09060000 		_ADR	RAT
 2444 1204 45070000 		_ADR	SUBB
 2445 1208 81060000 		_ADR	SWAP
 2446 120c 09060000 		_ADR	RAT
 2447 1210 35070000 		_ADR	PLUS
 2448 1214 45080000 		_ADR	QDUP
 2449 1218 89050000 		_QBRAN	NUMQ6
 2449      AC120000 
 2450 1220 A1070000 		_ADR	ONEM
 2451 1224 19060000 		_ADR	TOR
 2452              	NUMQ2:
 2453 1228 71060000 		_ADR	DUPP
 2454 122c 19060000 		_ADR	TOR
 2455 1230 E9050000 		_ADR	CAT
 2456 1234 750A0000 		_ADR	BASE
 2457 1238 C9050000 		_ADR	AT
 2458 123c 2D110000 		_ADR	DIGTQ
 2459 1240 89050000 		_QBRAN	NUMQ4
 2459      90120000 
 2460 1248 81060000 		_ADR	SWAP
 2461 124c 750A0000 		_ADR	BASE
 2462 1250 C9050000 		_ADR	AT
 2463 1254 55070000 		_ADR	STAR
 2464 1258 35070000 		_ADR	PLUS
 2465 125c F5050000 		_ADR	RFROM
 2466 1260 91070000 		_ADR	ONEP
 2467 1264 71050000 		_DONXT	NUMQ2
 2467      28120000 
 2468 126c 09060000 		_ADR	RAT
ARM GAS  stm32eforth-fl.s 			page 48


 2469 1270 81060000 		_ADR	SWAP
 2470 1274 61060000 		_ADR	DROP
 2471 1278 89050000 		_QBRAN	NUMQ3
 2471      84120000 
 2472 1280 C5080000 		_ADR	NEGAT
 2473              	NUMQ3:
 2474 1284 81060000 		_ADR	SWAP
 2475 1288 9B050000 		_BRAN	NUMQ5
 2475      A8120000 
 2476              	NUMQ4:
 2477 1290 F5050000 		_ADR	RFROM
 2478 1294 F5050000 		_ADR	RFROM
 2479 1298 6D080000 		_ADR	DDROP
 2480 129c 6D080000 		_ADR	DDROP
 2481 12a0 4D050000 		_DOLIT	0
 2481      00000000 
 2482              	NUMQ5:
 2483 12a8 71060000 		_ADR	DUPP
 2484              	NUMQ6:
 2485 12ac F5050000 		_ADR	RFROM
 2486 12b0 6D080000 		_ADR	DDROP
 2487 12b4 F5050000 		_ADR	RFROM
 2488 12b8 750A0000 		_ADR	BASE
 2489 12bc B5050000 		_ADR	STORE
 2490 12c0 1B040000 		_UNNEST
 2491              	
 2492              	// **************************************************************************
 2493              	//  Basic I/O
 2494              	
 2495              	//    KEY	 ( -- c )
 2496              	// 	Wait for and return an input character.
 2497              	
 2498 12c4 8C110000 		.word	_NUMBQ
 2499 12c8 03       	_KEY:	.byte  3
 2500 12c9 4B4559   		.ascii "KEY"
 2501              		.p2align 2 	
 2502              	KEY:
 2503 12cc FFF79EF8 		_NEST
 2504              	KEY1:
 2505 12d0 F9040000 		_ADR	QRX
 2506 12d4 89050000 		_QBRAN	KEY1
 2506      D0120000 
 2507              	// CTRL-C reboot
 2508 12dc 71060000 		_ADR DUPP 
 2509 12e0 4D050000 		_DOLIT	3 
 2509      03000000 
 2510 12e8 DD060000 		_ADR XORR
 2511 12ec 89050000 		_QBRAN	GO_REBOOT 
 2511      F8120000 
 2512 12f4 1B040000 		_UNNEST
 2513              	GO_REBOOT: 
 2514 12f8 31000000 		_ADR REBOOT 
 2515              	
 2516              	//    SPACE	( -- )
 2517              	// 	Send the blank character to the output device.
 2518              	
 2519 12fc C8120000 		.word	_KEY
ARM GAS  stm32eforth-fl.s 			page 49


 2520 1300 05       	_SPACE:	.byte  5
 2521 1301 53504143 		.ascii "SPACE"
 2521      45
 2522 1306 00BF     		.p2align 2 	
 2523              	SPACE:
 2524 1308 FFF780F8 		_NEST
 2525 130c F1070000 		_ADR	BLANK
 2526 1310 29050000 		_ADR	EMIT
 2527 1314 1B040000 		_UNNEST
 2528              	
 2529              	//    SPACES	( +n -- )
 2530              	// 	Send n spaces to the output device.
 2531              	
 2532 1318 00130000 		.word	_SPACE
 2533 131c 06       	_SPACS:	.byte  6
 2534 131d 53504143 		.ascii "SPACES"
 2534      4553
 2535 1323 00       		.p2align 2 	
 2536              	SPACS:
 2537 1324 FFF772F8 		_NEST
 2538 1328 4D050000 		_DOLIT	0
 2538      00000000 
 2539 1330 5D090000 		_ADR	MAX
 2540 1334 19060000 		_ADR	TOR
 2541 1338 9B050000 		_BRAN	CHAR2
 2541      44130000 
 2542              	CHAR1:
 2543 1340 09130000 		_ADR	SPACE
 2544              	CHAR2:
 2545 1344 71050000 		_DONXT	CHAR1
 2545      40130000 
 2546 134c 1B040000 		_UNNEST
 2547              	
 2548              	//    TYPE	( b u -- )
 2549              	// 	Output u characters from b.
 2550              	
 2551 1350 1C130000 		.word	_SPACS
 2552 1354 04       	_TYPEE:	.byte	4
 2553 1355 54595045 		.ascii "TYPE"
 2554 1359 0000BF   		.p2align 2 	
 2555              	TYPEE:
 2556 135c FFF756F8 		_NEST
 2557 1360 19060000 		_ADR  TOR   // ( a+1 -- R: u )
 2558 1364 9B050000 		_BRAN	TYPE2
 2558      78130000 
 2559              	TYPE1:  
 2560 136c CD090000 		_ADR  COUNT
 2561 1370 690D0000 		_ADR TCHAR
 2562 1374 29050000 		_ADR EMIT
 2563              	TYPE2:  
 2564 1378 71050000 		_DONXT	TYPE1
 2564      6C130000 
 2565 1380 61060000 		_ADR	DROP
 2566 1384 1B040000 		_UNNEST
 2567              	
 2568              	//    CR	  ( -- )
 2569              	// 	Output a carriage return and a line feed.
ARM GAS  stm32eforth-fl.s 			page 50


 2570              	
 2571 1388 54130000 		.word	_TYPEE
 2572 138c 02       	_CR:	.byte  2
 2573 138d 4352     		.ascii "CR"
 2574 138f 00       		.p2align 2 	
 2575              	CR:
 2576 1390 FFF73CF8 		_NEST
 2577 1394 4D050000 		_DOLIT	CRR
 2577      0D000000 
 2578 139c 29050000 		_ADR	EMIT
 2579 13a0 4D050000 		_DOLIT	LF
 2579      0A000000 
 2580 13a8 29050000 		_ADR	EMIT
 2581 13ac 1B040000 		_UNNEST
 2582              	
 2583              	//    do_$	( -- a )
 2584              	// 	Return the address of a compiled string.
 2585              	//  adjust return address to skip over it.
 2586              	
 2587              	// 	.word	_CR
 2588              	// _DOSTR	.byte  COMPO+3
 2589              	// 	.ascii "do$$"
 2590              	// 	.p2align 2 	
 2591              	DOSTR:
 2592 13b0 FFF72CF8 		_NEST     
 2593              	/* compiled string address is 2 levels deep */
 2594 13b4 F5050000 		_ADR	RFROM	// { -- a1 }
 2595 13b8 F5050000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2596 13bc 71060000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2597 13c0 CD090000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2598 13c4 35070000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2599 13c8 4D0D0000 		_ADR	ALGND	//  end of string
 2600              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2601 13cc 19060000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2602 13d0 81060000 		_ADR	SWAP	//  count tugged
 2603 13d4 19060000 		_ADR	TOR     //  ( -- a2) is string address
 2604 13d8 1B040000 		_UNNEST
 2605              	
 2606              	//    $"|	( -- a )
 2607              	// 	Run time routine compiled by _". Return address of a compiled string.
 2608              	
 2609              	// 	.word	_DOSTR
 2610              	// _STRQP	.byte  COMPO+3
 2611              	// 	.ascii "$\"|"
 2612              	// 	.p2align 2 	
 2613              	STRQP:
 2614 13dc FFF716F8 		_NEST
 2615 13e0 B1130000 		_ADR	DOSTR
 2616 13e4 1B040000 		_UNNEST			// force a call to dostr
 2617              	
 2618              	//    .$	( a -- )
 2619              	// 	Run time routine of ." . Output a compiled string.
 2620              	
 2621              	// 	.word	_STRQP
 2622              	// _DOTST	.byte  COMPO+2
 2623              	// 	.ascii ".$$"
 2624              	// 	.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 51


 2625              	DOTST:
 2626 13e8 FFF710F8 		_NEST
 2627 13ec CD090000 		_ADR	COUNT // ( -- a+1 c )
 2628 13f0 5D130000 		_ADR	TYPEE
 2629 13f4 1B040000 		_UNNEST
 2630              	
 2631              	//    ."|	( -- )
 2632              	// 	Run time routine of ." . Output a compiled string.
 2633              	
 2634              	// 	.word	_DOTST
 2635              	// _DOTQP	.byte  COMPO+3
 2636              	// 	.ascii ".""|"
 2637              	// 	.p2align 2 	
 2638              	DOTQP:
 2639 13f8 FFF708F8 		_NEST
 2640 13fc B1130000 		_ADR	DOSTR
 2641 1400 E9130000 		_ADR	DOTST
 2642 1404 1B040000 		_UNNEST
 2643              	
 2644              	//    .R	  ( n +n -- )
 2645              	// 	Display an integer in a field of n columns, right justified.
 2646              	
 2647 1408 8C130000 		.word	_CR
 2648 140c 02       	_DOTR:	.byte  2
 2649 140d 2E52     		.ascii ".R"
 2650 140f 00       		.p2align 2 	
 2651              	DOTR:
 2652 1410 FEF7FCFF 		_NEST
 2653 1414 19060000 		_ADR	TOR
 2654 1418 B5100000 		_ADR	STRR
 2655 141c F5050000 		_ADR	RFROM
 2656 1420 95060000 		_ADR	OVER
 2657 1424 45070000 		_ADR	SUBB
 2658 1428 25130000 		_ADR	SPACS
 2659 142c 5D130000 		_ADR	TYPEE
 2660 1430 1B040000 		_UNNEST
 2661              	
 2662              	//    U.R	 ( u +n -- )
 2663              	// 	Display an unsigned integer in n column, right justified.
 2664              	
 2665 1434 0C140000 		.word	_DOTR
 2666 1438 03       	_UDOTR:	.byte  3
 2667 1439 552E52   		.ascii "U.R"
 2668              		.p2align 2 	
 2669              	UDOTR:
 2670 143c FEF7E6FF 		_NEST
 2671 1440 19060000 		_ADR	TOR
 2672 1444 D50F0000 		_ADR	BDIGS
 2673 1448 41100000 		_ADR	DIGS
 2674 144c 95100000 		_ADR	EDIGS
 2675 1450 F5050000 		_ADR	RFROM
 2676 1454 95060000 		_ADR	OVER
 2677 1458 45070000 		_ADR	SUBB
 2678 145c 25130000 		_ADR	SPACS
 2679 1460 5D130000 		_ADR	TYPEE
 2680 1464 1B040000 		_UNNEST
 2681              	
ARM GAS  stm32eforth-fl.s 			page 52


 2682              	//    U.	  ( u -- )
 2683              	// 	Display an unsigned integer in free format.
 2684              	
 2685 1468 38140000 		.word	_UDOTR
 2686 146c 02       	_UDOT:	.byte  2
 2687 146d 552E     		.ascii "U."
 2688 146f 00       		.p2align 2 	
 2689              	UDOT:
 2690 1470 FEF7CCFF 		_NEST
 2691 1474 D50F0000 		_ADR	BDIGS
 2692 1478 41100000 		_ADR	DIGS
 2693 147c 95100000 		_ADR	EDIGS
 2694 1480 09130000 		_ADR	SPACE
 2695 1484 5D130000 		_ADR	TYPEE
 2696 1488 1B040000 		_UNNEST
 2697              	
 2698              	//    .	   ( w -- )
 2699              	// 	Display an integer in free format, preceeded by a space.
 2700              	
 2701 148c 6C140000 		.word	_UDOT
 2702 1490 01       	_DOT:	.byte  1
 2703 1491 2E       		.ascii "."
 2704 1492 00BF     		.p2align 2 	
 2705              	DOT:
 2706 1494 FEF7BAFF 		_NEST
 2707 1498 750A0000 		_ADR	BASE
 2708 149c C9050000 		_ADR	AT
 2709 14a0 4D050000 		_DOLIT 10
 2709      0A000000 
 2710 14a8 DD060000 		_ADR	XORR			// ?decimal
 2711 14ac 89050000 		_QBRAN	DOT1
 2711      BC140000 
 2712 14b4 71140000 		_ADR	UDOT
 2713 14b8 1B040000 		_UNNEST			// no,display unsigned
 2714              	DOT1:
 2715 14bc B5100000 	    _ADR	STRR
 2716 14c0 09130000 		_ADR	SPACE
 2717 14c4 5D130000 		_ADR	TYPEE
 2718 14c8 1B040000 		_UNNEST			// yes, display signed
 2719              	
 2720              	//    ?	   ( a -- )
 2721              	// 	Display the contents in a memory cell.
 2722              	
 2723 14cc 90140000 		.word	_DOT
 2724 14d0 01       	_QUEST:	.byte  1
 2725 14d1 3F       		.ascii "?"
 2726 14d2 00BF     		.p2align 2 	
 2727              	QUEST:
 2728 14d4 FEF79AFF 		_NEST
 2729 14d8 C9050000 		_ADR	AT
 2730 14dc 95140000 		_ADR	DOT
 2731 14e0 1B040000 		_UNNEST
 2732              	
 2733              	// **************************************************************************
 2734              	//  Parsing
 2735              	
 2736              	//    parse	( b u c -- b u delta //  string> )
ARM GAS  stm32eforth-fl.s 			page 53


 2737              	// 	Scan word delimited by c. Return found string and its offset.
 2738              	
 2739              	// 	.word	_QUEST
 2740              	// _PARS	.byte  5
 2741              	// 	.ascii "parse"
 2742              	// 	.p2align 2 	
 2743              	PARS:
 2744 14e4 FEF792FF 		_NEST
 2745 14e8 7F0A0000 		_ADR	TEMP
 2746 14ec B5050000 		_ADR	STORE
 2747 14f0 95060000 		_ADR	OVER
 2748 14f4 19060000 		_ADR	TOR
 2749 14f8 71060000 		_ADR	DUPP
 2750 14fc 89050000 		_QBRAN	PARS8
 2750      F8150000 
 2751 1504 A1070000 		_ADR	ONEM
 2752 1508 7F0A0000 		_ADR	TEMP
 2753 150c C9050000 		_ADR	AT
 2754 1510 F1070000 		_ADR	BLANK
 2755 1514 FD080000 		_ADR	EQUAL
 2756 1518 89050000 		_QBRAN	PARS3
 2756      6C150000 
 2757 1520 19060000 		_ADR	TOR
 2758              	PARS1:
 2759 1524 F1070000 		_ADR	BLANK
 2760 1528 95060000 		_ADR	OVER
 2761 152c E9050000 		_ADR	CAT			// skip leading blanks 
 2762 1530 45070000 		_ADR	SUBB
 2763 1534 A5060000 		_ADR	ZLESS
 2764 1538 B1080000 		_ADR	INVER
 2765 153c 89050000 		_QBRAN	PARS2
 2765      68150000 
 2766 1544 91070000 		_ADR	ONEP
 2767 1548 71050000 		_DONXT	PARS1
 2767      24150000 
 2768 1550 F5050000 		_ADR	RFROM
 2769 1554 61060000 		_ADR	DROP
 2770 1558 4D050000 		_DOLIT	0
 2770      00000000 
 2771 1560 71060000 		_ADR	DUPP
 2772 1564 1B040000 		_UNNEST
 2773              	PARS2:
 2774 1568 F5050000 		_ADR	RFROM
 2775              	PARS3:
 2776 156c 95060000 		_ADR	OVER
 2777 1570 81060000 		_ADR	SWAP
 2778 1574 19060000 		_ADR	TOR
 2779              	PARS4:
 2780 1578 7F0A0000 		_ADR	TEMP
 2781 157c C9050000 		_ADR	AT
 2782 1580 95060000 		_ADR	OVER
 2783 1584 E9050000 		_ADR	CAT
 2784 1588 45070000 		_ADR	SUBB			// scan for delimiter
 2785 158c 7F0A0000 		_ADR	TEMP
 2786 1590 C9050000 		_ADR	AT
 2787 1594 F1070000 		_ADR	BLANK
 2788 1598 FD080000 		_ADR	EQUAL
ARM GAS  stm32eforth-fl.s 			page 54


 2789 159c 89050000 		_QBRAN	PARS5
 2789      A8150000 
 2790 15a4 A5060000 		_ADR	ZLESS
 2791              	PARS5:
 2792 15a8 89050000 		_QBRAN	PARS6
 2792      CC150000 
 2793 15b0 91070000 		_ADR	ONEP
 2794 15b4 71050000 		_DONXT	PARS4
 2794      78150000 
 2795 15bc 71060000 		_ADR	DUPP
 2796 15c0 19060000 		_ADR	TOR
 2797 15c4 9B050000 		_BRAN	PARS7
 2797      E0150000 
 2798              	PARS6:
 2799 15cc F5050000 		_ADR	RFROM
 2800 15d0 61060000 		_ADR	DROP
 2801 15d4 71060000 		_ADR	DUPP
 2802 15d8 91070000 		_ADR	ONEP
 2803 15dc 19060000 		_ADR	TOR
 2804              	PARS7:
 2805 15e0 95060000 		_ADR	OVER
 2806 15e4 45070000 		_ADR	SUBB
 2807 15e8 F5050000 		_ADR	RFROM
 2808 15ec F5050000 		_ADR	RFROM
 2809 15f0 45070000 		_ADR	SUBB
 2810 15f4 1B040000 		_UNNEST
 2811              	PARS8:
 2812 15f8 95060000 		_ADR	OVER
 2813 15fc F5050000 		_ADR	RFROM
 2814 1600 45070000 		_ADR	SUBB
 2815 1604 1B040000 		_UNNEST
 2816              	
 2817              	//    PARSE	( c -- b u //  string> )
 2818              	// 	Scan input stream and return counted string delimited by c.
 2819              	
 2820 1608 D0140000 		.word	_QUEST
 2821 160c 05       	_PARSE:	.byte  5
 2822 160d 50415253 		.ascii "PARSE"
 2822      45
 2823 1612 00BF     		.p2align 2 	
 2824              	PARSE:
 2825 1614 FEF7FAFE 		_NEST
 2826 1618 19060000 		_ADR	TOR
 2827 161c 3D0E0000 		_ADR	TIB
 2828 1620 A90A0000 		_ADR	INN
 2829 1624 C9050000 		_ADR	AT
 2830 1628 35070000 		_ADR	PLUS			// current input buffer pointer
 2831 162c BD0A0000 		_ADR	NTIB
 2832 1630 C9050000 		_ADR	AT
 2833 1634 A90A0000 		_ADR	INN
 2834 1638 C9050000 		_ADR	AT
 2835 163c 45070000 		_ADR	SUBB			// remaining count
 2836 1640 F5050000 		_ADR	RFROM
 2837 1644 E5140000 		_ADR	PARS
 2838 1648 A90A0000 		_ADR	INN
 2839 164c 85090000 		_ADR	PSTOR
 2840 1650 1B040000 		_UNNEST
ARM GAS  stm32eforth-fl.s 			page 55


 2841              	
 2842              	//    .(	  ( -- )
 2843              	// 	Output following string up to next ) .
 2844              	
 2845 1654 0C160000 		.word	_PARSE
 2846 1658 82       	_DOTPR:	.byte  IMEDD+2
 2847 1659 2E28     		.ascii ".("
 2848 165b 00       		.p2align 2 	
 2849              	DOTPR:
 2850 165c FEF7D6FE 		_NEST
 2851 1660 4D050000 		_DOLIT	')'
 2851      29000000 
 2852 1668 15160000 		_ADR	PARSE
 2853 166c 5D130000 		_ADR	TYPEE
 2854 1670 1B040000 		_UNNEST
 2855              	
 2856              	//    (	   ( -- )
 2857              	// 	Ignore following string up to next ) . A comment.
 2858              	
 2859 1674 58160000 		.word	_DOTPR
 2860 1678 81       	_PAREN:	.byte  IMEDD+1
 2861 1679 28       		.ascii "("
 2862 167a 00BF     		.p2align 2 	
 2863              	PAREN:
 2864 167c FEF7C6FE 		_NEST
 2865 1680 4D050000 		_DOLIT	')'
 2865      29000000 
 2866 1688 15160000 		_ADR	PARSE
 2867 168c 6D080000 		_ADR	DDROP
 2868 1690 1B040000 		_UNNEST
 2869              	
 2870              	//    \	   ( -- )
 2871              	// 	Ignore following text till the end of line.
 2872              	
 2873 1694 78160000 		.word	_PAREN
 2874 1698 81       	_BKSLA:	.byte  IMEDD+1
 2875 1699 5C       		.byte	'\\'
 2876 169a 00BF     		.p2align 2 	
 2877              	BKSLA:
 2878 169c FEF7B6FE 		_NEST
 2879 16a0 BD0A0000 		_ADR	NTIB
 2880 16a4 C9050000 		_ADR	AT
 2881 16a8 A90A0000 		_ADR	INN
 2882 16ac B5050000 		_ADR	STORE
 2883 16b0 1B040000 		_UNNEST
 2884              	
 2885              	//    CHAR	( -- c )
 2886              	// 	Parse next word and return its first character.
 2887              	
 2888 16b4 98160000 		.word	_BKSLA
 2889 16b8 04       	_CHAR:	.byte  4
 2890 16b9 43484152 		.ascii "CHAR"
 2891 16bd 0000BF   		.p2align 2 	
 2892              	CHAR:
 2893 16c0 FEF7A4FE 		_NEST
 2894 16c4 F1070000 		_ADR	BLANK
 2895 16c8 15160000 		_ADR	PARSE
ARM GAS  stm32eforth-fl.s 			page 56


 2896 16cc 61060000 		_ADR	DROP
 2897 16d0 E9050000 		_ADR	CAT
 2898 16d4 1B040000 		_UNNEST
 2899              	
 2900              	//    WORD	( c -- a //  string> )
 2901              	// 	Parse a word from input stream and copy it to code dictionary.
 2902              	
 2903 16d8 B8160000 		.word	_CHAR
 2904 16dc 04       	_WORDD:	.byte  4
 2905 16dd 574F5244 		.ascii "WORD"
 2906 16e1 0000BF   		.p2align 2 	
 2907              	WORDD:
 2908 16e4 FEF792FE 		_NEST
 2909 16e8 15160000 		_ADR	PARSE
 2910 16ec 050E0000 		_ADR	HERE
 2911 16f0 D1070000 		_ADR	CELLP
 2912 16f4 090F0000 		_ADR	PACKS
 2913 16f8 1B040000 		_UNNEST
 2914              	
 2915              	//    TOKEN	( -- a //  string> )
 2916              	// 	Parse a word from input stream and copy it to name dictionary.
 2917              	
 2918 16fc DC160000 		.word	_WORDD
 2919 1700 05       	_TOKEN:	.byte  5
 2920 1701 544F4B45 		.ascii "TOKEN"
 2920      4E
 2921 1706 00BF     		.p2align 2 	
 2922              	TOKEN:
 2923 1708 FEF780FE 		_NEST
 2924 170c F1070000 		_ADR	BLANK
 2925 1710 E5160000 		_ADR	WORDD
 2926 1714 1B040000 		_UNNEST
 2927              	
 2928              	// **************************************************************************
 2929              	//  Dictionary search
 2930              	
 2931              	//    NAME>	( na -- ca )
 2932              	// 	Return a code address given a name address.
 2933              	
 2934 1718 00170000 		.word	_TOKEN
 2935 171c 05       	_NAMET:	.byte  5
 2936 171d 4E414D45 		.ascii "NAME>"
 2936      3E
 2937 1722 00BF     		.p2align 2 	
 2938              	NAMET:
 2939 1724 FEF772FE 		_NEST
 2940 1728 CD090000 		_ADR	COUNT
 2941 172c 4D050000 		_DOLIT	0x1F
 2941      1F000000 
 2942 1734 B5060000 		_ADR	ANDD
 2943 1738 35070000 		_ADR	PLUS
 2944 173c 4D0D0000 		_ADR	ALGND
 2945 1740 1B040000 		_UNNEST
 2946              	
 2947              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2948              	// 	Compare u bytes in two strings. Return 0 if identical.
 2949              	//
ARM GAS  stm32eforth-fl.s 			page 57


 2950              	//  Picatout 2020-12-01, 
 2951              	//      Because of problem with .align directive that
 2952              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2953              	// 		words  to do a byte by byte comparison. 
 2954              	//
 2955 1744 1C170000 		.word	_NAMET
 2956 1748 05       	_SAMEQ:	.byte  5
 2957 1749 53414D45 		.ascii "SAME?"
 2957      3F
 2958 174e 00BF     		.p2align 2	
 2959              	SAMEQ:
 2960 1750 FEF75CFE 		_NEST
 2961 1754 19060000 		_ADR	TOR
 2962 1758 9B050000 		_BRAN	SAME2
 2962      9C170000 
 2963              	SAME1:
 2964 1760 95060000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2965 1764 09060000 		_ADR	RAT   // a1 a2 a1 u 
 2966 1768 35070000 		_ADR	PLUS  // a1 a2 a1+u 
 2967 176c E9050000 		_ADR	CAT	   // a1 a2 c1    		
 2968 1770 95060000 		_ADR	OVER  // a1 a2 c1 a2 
 2969 1774 09060000 		_ADR	RAT    
 2970 1778 35070000 		_ADR	PLUS    
 2971 177c E9050000 		_ADR	CAT	  // a1 a2 c1 c2
 2972 1780 45070000 		_ADR	SUBB  
 2973 1784 45080000 		_ADR	QDUP
 2974 1788 89050000 		_QBRAN	SAME2
 2974      9C170000 
 2975 1790 F5050000 		_ADR	RFROM
 2976 1794 61060000 		_ADR	DROP
 2977 1798 1B040000 		_UNNEST	// strings not equal
 2978              	SAME2:
 2979 179c 71050000 		_DONXT	SAME1
 2979      60170000 
 2980 17a4 4D050000 		_DOLIT	0
 2980      00000000 
 2981 17ac 1B040000 		_UNNEST	// strings equal
 2982              	
 2983              	//    find	( a na -- ca na | a F )
 2984              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2985              	
 2986              	//  Picatout 2020-12-01,  
 2987              	//		Modified from original. See comment for word "SAME?" 
 2988              	
 2989              	// 	.word	_SAMEQ
 2990              	// _FIND	.byte  4
 2991              	// 	.ascii "find"
 2992              	// 	.p2align 2 	
 2993              	FIND:
 2994 17b0 FEF72CFE 		_NEST
 2995 17b4 81060000 		_ADR	SWAP			// na a	
 2996 17b8 CD090000 		_ADR	COUNT			// na a+1 count
 2997 17bc 71060000 		_ADR	DUPP 
 2998 17c0 7F0A0000 		_ADR	TEMP
 2999 17c4 B5050000 		_ADR	STORE			// na a+1 count 
 3000 17c8 19060000 		_ADR  TOR		// na a+1  R: count  
 3001 17cc 81060000 		_ADR	SWAP			// a+1 na
ARM GAS  stm32eforth-fl.s 			page 58


 3002              	FIND1:
 3003 17d0 71060000 		_ADR	DUPP			// a+1 na na
 3004 17d4 89050000 		_QBRAN	FIND6	// end of vocabulary
 3004      28180000 
 3005 17dc 71060000 		_ADR	DUPP			// a+1 na na
 3006 17e0 E9050000 		_ADR	CAT			// a+1 na name1
 3007 17e4 4D050000 		_DOLIT	MASKK
 3007      1FFFFFFF 
 3008 17ec B5060000 		_ADR	ANDD
 3009 17f0 09060000 		_ADR	RAT			// a+1 na name1 count 
 3010 17f4 DD060000 		_ADR	XORR			// a+1 na,  same length?
 3011 17f8 89050000 		_QBRAN	FIND2
 3011      10180000 
 3012 1800 E1070000 		_ADR	CELLM			// a+1 la
 3013 1804 C9050000 		_ADR	AT			// a+1 next_na
 3014 1808 9B050000 		_BRAN	FIND1			// try next word
 3014      D0170000 
 3015              	FIND2:   
 3016 1810 91070000 		_ADR	ONEP			// a+1 na+1
 3017 1814 7F0A0000 		_ADR	TEMP
 3018 1818 C9050000 		_ADR	AT			// a+1 na+1 count
 3019 181c 51170000 		_ADR	SAMEQ		// a+1 na+1 ? 
 3020              	FIND3:	
 3021 1820 9B050000 		_BRAN	FIND4
 3021      40180000 
 3022              	FIND6:	
 3023 1828 F5050000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 3024 182c 61060000 		_ADR	DROP			// a+1 0
 3025 1830 81060000 		_ADR	SWAP			// 0 a+1
 3026 1834 A1070000 		_ADR	ONEM			// 0 a
 3027 1838 81060000 		_ADR	SWAP			// a 0 
 3028 183c 1B040000 		_UNNEST			// return without a match
 3029              	FIND4:	
 3030 1840 89050000 		_QBRAN	FIND5			// a+1 na+1
 3030      5C180000 
 3031 1848 A1070000 		_ADR	ONEM			// a+1 na
 3032 184c E1070000 		_ADR	CELLM			// a+4 la
 3033 1850 C9050000 		_ADR	AT			// a+1 next_na
 3034 1854 9B050000 		_BRAN	FIND1			// compare next name
 3034      D0170000 
 3035              	FIND5:	
 3036 185c F5050000 		_ADR	RFROM			// a+1 na+1 count
 3037 1860 61060000 		_ADR	DROP			// a+1 na+1
 3038 1864 81060000 		_ADR	SWAP			// na+1 a+1
 3039 1868 61060000 		_ADR	DROP			// na+1
 3040 186c A1070000 		_ADR	ONEM			// na
 3041 1870 71060000 		_ADR	DUPP			// na na
 3042 1874 25170000 		_ADR	NAMET			// na ca
 3043 1878 81060000 		_ADR	SWAP			// ca na
 3044 187c 1B040000 		_UNNEST			//  return with a match
 3045              	
 3046              	//    NAME?	( a -- ca na | a F )
 3047              	// 	Search all context vocabularies for a string.
 3048              	
 3049 1880 48170000 		.word	_SAMEQ
 3050 1884 05       	_NAMEQ:	.byte  5
 3051 1885 4E414D45 		.ascii "NAME?"
ARM GAS  stm32eforth-fl.s 			page 59


 3051      3F
 3052 188a 00BF     		.p2align 2 	
 3053              	NAMEQ:
 3054 188c FEF7BEFD 		_NEST
 3055 1890 FD0A0000 		_ADR	CNTXT
 3056 1894 C9050000 		_ADR	AT
 3057 1898 B1170000 		_ADR	FIND
 3058 189c 1B040000 		_UNNEST
 3059              	
 3060              	// **************************************************************************
 3061              	//  Terminal input
 3062              	
 3063              	//    	  ( bot eot cur -- bot eot cur )
 3064              	// 	Backup the cursor by one character.
 3065              	
 3066              	// 	.word	_NAMEQ
 3067              	// _BKSP	.byte  2
 3068              	// 	.ascii "^H"
 3069              	// 	.p2align 2 	
 3070              	BKSP:
 3071 18a0 FEF7B4FD 		_NEST
 3072 18a4 19060000 		_ADR	TOR
 3073 18a8 95060000 		_ADR	OVER
 3074 18ac F5050000 		_ADR	RFROM
 3075 18b0 81060000 		_ADR	SWAP
 3076 18b4 95060000 		_ADR	OVER
 3077 18b8 DD060000 		_ADR	XORR
 3078 18bc 89050000 		_QBRAN	BACK1
 3078      E8180000 
 3079 18c4 4D050000 		_DOLIT	BKSPP
 3079      08000000 
 3080 18cc 29050000 		_ADR	TECHO
 3081              	// 	_ADR	ATEXE
 3082 18d0 A1070000 		_ADR	ONEM
 3083 18d4 F1070000 		_ADR	BLANK
 3084 18d8 29050000 		_ADR	TECHO
 3085              	// 	_ADR	ATEXE
 3086 18dc 4D050000 		_DOLIT	BKSPP
 3086      08000000 
 3087 18e4 29050000 		_ADR	TECHO
 3088              	// 	_ADR	ATEXE
 3089              	BACK1:
 3090 18e8 1B040000 		  _UNNEST
 3091              	
 3092              	//    TAP	 ( bot eot cur c -- bot eot cur )
 3093              	// 	Accept and echo the key stroke and bump the cursor.
 3094              	
 3095              	// 	.word	_BKSP
 3096              	// _TAP	.byte  3
 3097              	// 	.ascii "TAP"
 3098              	// 	.p2align 2 	
 3099              	TAP:
 3100 18ec FEF78EFD 		_NEST
 3101 18f0 71060000 		_ADR	DUPP
 3102 18f4 29050000 		_ADR	TECHO
 3103              	// 	_ADR	ATEXE
 3104 18f8 95060000 		_ADR	OVER
ARM GAS  stm32eforth-fl.s 			page 60


 3105 18fc D5050000 		_ADR	CSTOR
 3106 1900 91070000 		_ADR	ONEP
 3107 1904 1B040000 		_UNNEST
 3108              	
 3109              	//    kTAP	( bot eot cur c -- bot eot cur )
 3110              	// 	Process a key stroke, CR or backspace.
 3111              	
 3112              	// 	.word	_TAP
 3113              	// _KTAP	.byte  4
 3114              	// 	.ascii "kTAP"
 3115              	// 	.p2align 2 	
 3116              	KTAP:
 3117              	TTAP:
 3118 1908 FEF780FD 		_NEST
 3119 190c 71060000 		_ADR	DUPP
 3120 1910 4D050000 		_DOLIT	CRR
 3120      0D000000 
 3121 1918 DD060000 		_ADR	XORR
 3122 191c 89050000 		_QBRAN  KTAP2
 3122      4C190000 
 3123 1924 4D050000 		_DOLIT	BKSPP
 3123      08000000 
 3124 192c DD060000 		_ADR	XORR
 3125 1930 89050000 		_QBRAN	KTAP1
 3125      44190000 
 3126 1938 F1070000 		_ADR	BLANK
 3127 193c ED180000 		_ADR	TAP
 3128 1940 1B040000 		_UNNEST
 3129              	//	.word	0			// patch
 3130              	KTAP1:
 3131 1944 A1180000 		_ADR	BKSP
 3132 1948 1B040000 		_UNNEST
 3133              	KTAP2:
 3134 194c 61060000 		_ADR	DROP
 3135 1950 81060000 		_ADR	SWAP
 3136 1954 61060000 		_ADR	DROP
 3137 1958 71060000 		_ADR	DUPP
 3138 195c 1B040000 		_UNNEST
 3139              	
 3140              	//    ACCEPT	( b u -- b u )
 3141              	// 	Accept characters to input buffer. Return with actual count.
 3142              	
 3143 1960 84180000 		.word	_NAMEQ
 3144 1964 06       	_ACCEP:	.byte  6
 3145 1965 41434345 		.ascii "ACCEPT"
 3145      5054
 3146 196b 00       		.p2align 2 	
 3147              	ACCEP:
 3148 196c FEF74EFD 		_NEST
 3149 1970 95060000 		_ADR	OVER
 3150 1974 35070000 		_ADR	PLUS
 3151 1978 95060000 		_ADR	OVER
 3152              	ACCP1:
 3153 197c 81080000 		_ADR	DDUP
 3154 1980 DD060000 		_ADR	XORR
 3155 1984 89050000 		_QBRAN	ACCP4
 3155      C4190000 
ARM GAS  stm32eforth-fl.s 			page 61


 3156 198c CD120000 		_ADR	KEY
 3157 1990 71060000 		_ADR	DUPP
 3158 1994 F1070000 		_ADR	BLANK
 3159 1998 4D050000 		_DOLIT 127
 3159      7F000000 
 3160 19a0 D50B0000 		_ADR	WITHI
 3161 19a4 89050000 		_QBRAN	ACCP2
 3161      B8190000 
 3162 19ac ED180000 		_ADR	TAP
 3163 19b0 9B050000 		_BRAN	ACCP3
 3163      BC190000 
 3164              	ACCP2:
 3165 19b8 09190000 		_ADR	KTAP
 3166              	// 	_ADR	ATEXE
 3167              	ACCP3:	  
 3168 19bc 9B050000 		_BRAN	ACCP1
 3168      7C190000 
 3169              	ACCP4:
 3170 19c4 61060000 		_ADR	DROP
 3171 19c8 95060000 		_ADR	OVER
 3172 19cc 45070000 		_ADR	SUBB
 3173 19d0 1B040000 		_UNNEST
 3174              	
 3175              	//    QUERY	( -- )
 3176              	// 	Accept input stream to terminal input buffer.
 3177              	
 3178 19d4 64190000 		.word	_ACCEP
 3179 19d8 05       	_QUERY:	.byte  5
 3180 19d9 51554552 		.ascii "QUERY"
 3180      59
 3181 19de 00BF     		.p2align 2 	
 3182              	QUERY:
 3183 19e0 FEF714FD 		_NEST
 3184 19e4 3D0E0000 		_ADR	TIB
 3185 19e8 4D050000 		_DOLIT 80
 3185      50000000 
 3186 19f0 6D190000 		_ADR	ACCEP
 3187 19f4 BD0A0000 		_ADR	NTIB
 3188 19f8 B5050000 		_ADR	STORE
 3189 19fc 61060000 		_ADR	DROP
 3190 1a00 4D050000 		_DOLIT	0
 3190      00000000 
 3191 1a08 A90A0000 		_ADR	INN
 3192 1a0c B5050000 		_ADR	STORE
 3193 1a10 1B040000 		_UNNEST
 3194              	
 3195              	// **************************************************************************
 3196              	//  Error handling
 3197              	
 3198              	//    ABORT	( a -- )
 3199              	// 	Reset data stack and jump to QUIT.
 3200              	
 3201 1a14 D8190000 		.word	_QUERY
 3202 1a18 05       	_ABORT:	.byte  5
 3203 1a19 41424F52 		.ascii "ABORT"
 3203      54
 3204 1a1e 00BF     		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 62


 3205              	ABORT:
 3206 1a20 FEF7F4FC 		_NEST
 3207 1a24 09130000 		_ADR	SPACE
 3208 1a28 CD090000 		_ADR	COUNT
 3209 1a2c 5D130000 		_ADR	TYPEE
 3210 1a30 4D050000 		_DOLIT	0X3F
 3210      3F000000 
 3211 1a38 29050000 		_ADR	EMIT
 3212 1a3c 91130000 		_ADR	CR
 3213 1a40 B91B0000 		_ADR	PRESE
 3214 1a44 9B050000 		_BRAN	QUIT
 3214      D81B0000 
 3215              	
 3216              	//    _abort"	( f -- )
 3217              	// 	Run time routine of ABORT" . Abort with a message.
 3218              	
 3219              	// 	.word	_ABORT
 3220              	// _ABORQ	.byte  COMPO+6
 3221              	// 	.ascii "abort\""
 3222              	// 	.p2align 2 	
 3223              	ABORQ:
 3224 1a4c FEF7DEFC 		_NEST
 3225 1a50 89050000 		_QBRAN	ABOR1	// text flag
 3225      701A0000 
 3226 1a58 B1130000 		_ADR	DOSTR
 3227 1a5c CD090000 		_ADR	COUNT
 3228 1a60 5D130000 		_ADR	TYPEE
 3229 1a64 91130000 		_ADR	CR
 3230 1a68 9B050000 		_BRAN	QUIT
 3230      D81B0000 
 3231              	ABOR1:
 3232 1a70 B1130000 		_ADR	DOSTR
 3233 1a74 61060000 		_ADR	DROP
 3234 1a78 1B040000 		_UNNEST			// drop error
 3235              	
 3236              	// **************************************************************************
 3237              	//  The text interpreter
 3238              	
 3239              	//    $INTERPRET  ( a -- )
 3240              	// 	Interpret a word. If failed, try to convert it to an integer.
 3241              	
 3242 1a7c 181A0000 		.word	_ABORT
 3243 1a80 0A       	_INTER:	.byte  10
 3244 1a81 2424494E 		.ascii "$$INTERPRET"
 3244      54455250 
 3244      524554
 3245              		.p2align 2 	
 3246              	INTER:
 3247 1a8c FEF7BEFC 		_NEST
 3248 1a90 8D180000 		_ADR	NAMEQ
 3249 1a94 45080000 		_ADR	QDUP	// ?defined
 3250 1a98 89050000 		_QBRAN	INTE1
 3250      CC1A0000 
 3251 1aa0 C9050000 		_ADR	AT
 3252 1aa4 4D050000 		_DOLIT	COMPO
 3252      40000000 
 3253 1aac B5060000 		_ADR	ANDD	// ?compile only lexicon bits
ARM GAS  stm32eforth-fl.s 			page 63


 3254 1ab0 4D1A0000 		_ABORQ	13," compile only"
 3254      0D20636F 
 3254      6D70696C 
 3254      65206F6E 
 3254      6C7900BF 
 3255 1ac4 65050000 		_ADR	EXECU
 3256 1ac8 1B040000 		_UNNEST			// execute defined word
 3257              	INTE1:
 3258 1acc 95110000 		_ADR	NUMBQ
 3259 1ad0 89050000 		_QBRAN	INTE2
 3259      DC1A0000 
 3260 1ad8 1B040000 		_UNNEST
 3261              	INTE2:
 3262 1adc 9B050000 		_BRAN	ABORT	// error
 3262      201A0000 
 3263              	
 3264              	//    [	   ( -- )
 3265              	// 	Start the text interpreter.
 3266              	
 3267 1ae4 801A0000 		.word	_INTER
 3268 1ae8 81       	_LBRAC:	.byte  IMEDD+1
 3269 1ae9 5B       		.ascii "["
 3270 1aea 00BF     		.p2align 2 	
 3271              	LBRAC:
 3272 1aec FEF78EFC 		_NEST
 3273 1af0 4D050000 		_DOLIT	INTER
 3273      8C1A0000 
 3274 1af8 D10A0000 		_ADR	TEVAL
 3275 1afc B5050000 		_ADR	STORE
 3276 1b00 1B040000 		_UNNEST
 3277              	
 3278              	//    .OK	 ( -- )
 3279              	// 	Display "ok" only while interpreting.
 3280              	
 3281 1b04 E81A0000 		.word	_LBRAC
 3282 1b08 03       	_DOTOK:	.byte  3
 3283 1b09 2E4F4B   		.ascii ".OK"
 3284              		.p2align 2 	
 3285              	DOTOK:
 3286 1b0c FEF77EFC 		_NEST
 3287 1b10 4D050000 		_DOLIT	INTER
 3287      8C1A0000 
 3288 1b18 D10A0000 		_ADR	TEVAL
 3289 1b1c C9050000 		_ADR	AT
 3290 1b20 FD080000 		_ADR	EQUAL
 3291 1b24 89050000 		_QBRAN	DOTO1
 3291      341B0000 
 3292 1b2c F9130000 		_DOTQP	3," ok"
 3292      03206F6B 
 3293              	DOTO1:
 3294 1b34 91130000 		_ADR	CR
 3295 1b38 1B040000 		_UNNEST
 3296              	
 3297              	//    ?STACK	( -- )
 3298              	// 	Abort if the data stack underflows.
 3299              	
 3300 1b3c 081B0000 		.word	_DOTOK
ARM GAS  stm32eforth-fl.s 			page 64


 3301 1b40 06       	_QSTAC:	.byte  6
 3302 1b41 3F535441 		.ascii "?STACK"
 3302      434B
 3303 1b47 00       		.p2align 2 	
 3304              	QSTAC:
 3305 1b48 FEF760FC 		_NEST
 3306 1b4c B50D0000 		_ADR	DEPTH
 3307 1b50 A5060000 		_ADR	ZLESS	// check only for underflow
 3308 1b54 4D1A0000 		_ABORQ	10," underflow"
 3308      0A20756E 
 3308      64657266 
 3308      6C6F7700 
 3309 1b64 1B040000 		_UNNEST
 3310              	
 3311              	//    EVAL	( -- )
 3312              	// 	Interpret the input stream.
 3313              	
 3314 1b68 401B0000 		.word	_QSTAC
 3315 1b6c 04       	_EVAL:	.byte  4
 3316 1b6d 4556414C 		.ascii "EVAL"
 3317 1b71 0000BF   		.p2align 2 	
 3318              	EVAL:
 3319 1b74 FEF74AFC 		_NEST
 3320              	EVAL1:
 3321 1b78 09170000 	    _ADR	TOKEN
 3322 1b7c 71060000 		_ADR	DUPP
 3323 1b80 E9050000 		_ADR	CAT	// ?input stream empty
 3324 1b84 89050000 		_QBRAN	EVAL2
 3324      A01B0000 
 3325 1b8c D10A0000 		_ADR	TEVAL
 3326 1b90 550E0000 		_ADR	ATEXE
 3327 1b94 491B0000 		_ADR	QSTAC	// evaluate input, check stack
 3328 1b98 9B050000 		_BRAN	EVAL1
 3328      781B0000 
 3329              	EVAL2:
 3330 1ba0 61060000 		_ADR	DROP
 3331 1ba4 0D1B0000 		_ADR	DOTOK
 3332 1ba8 1B040000 		_UNNEST	// prompt
 3333              	
 3334              	//    PRESET	( -- )
 3335              	// 	Reset data stack pointer and the terminal input buffer.
 3336              	
 3337 1bac 6C1B0000 		.word	_EVAL
 3338 1bb0 06       	_PRESE:	.byte  6
 3339 1bb1 50524553 		.ascii "PRESET"
 3339      4554
 3340 1bb7 00       		.p2align 2 	
 3341              	PRESE:
 3342 1bb8 FEF728FC 		_NEST 
 3343 1bbc 4D050000 		_DOLIT SPP 
 3343      804E0020 
 3344 1bc4 3D060000 		_ADR SPSTOR 
 3345 1bc8 1B040000 		_UNNEST 
 3346              	
 3347              	//    QUIT	( -- )
 3348              	// 	Reset return stack pointer and start text interpreter.
 3349              	
ARM GAS  stm32eforth-fl.s 			page 65


 3350 1bcc B01B0000 		.word	_PRESE
 3351 1bd0 04       	_QUIT:	.byte  4
 3352 1bd1 51554954 		.ascii "QUIT"
 3353 1bd5 0000BF   		.p2align 2 	
 3354              	QUIT:
 3355 1bd8 4D050000 		_DOLIT RPP 
 3355      804F0020 
 3356 1be0 2D060000 		_ADR RPSTOR 
 3357              	QUIT1:
 3358 1be4 ED1A0000 		_ADR	LBRAC			// start interpretation
 3359              	QUIT2:
 3360 1be8 E1190000 		_ADR	QUERY			// get input
 3361 1bec 751B0000 		_ADR	EVAL
 3362 1bf0 9B050000 		_BRAN	QUIT2	// continue till error
 3362      E81B0000 
 3363              	
 3364              	/***************************
 3365              	//  Flash memory interface
 3366              	***************************/
 3367              	
 3368              	unlock:	//  unlock flash memory	
 3369 1bf8 DFF84404 		ldr	r0, flash_regs 
 3370              	//	mov r4,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 3371              	//	str r4,[r0,#FLASH_SR]
 3372              	//	ldr r4,[r0,#FLASH_CR]
 3373              	//	tst r4,#(1<<7)
 3374              	//	beq 1f 
 3375 1bfc DFF84444 		ldr	r4, flash_regs+4 // key1
 3376 1c00 4460     		str	r4, [r0, #FLASH_KEYR]
 3377 1c02 DFF84444 		ldr	r4, flash_regs+8 // key2 
 3378 1c06 4460     		str	r4, [r0, #FLASH_KEYR]
 3379              		/* unlock option registers */
 3380              	/*	
 3381              		ldr	r4, flash_regs+4 
 3382              		str	r4, [r0, #FLASH_OPTKEYR]
 3383              		ldr	r4, flash_regs+8
 3384              		str	r4, [r0, #FLASH_OPTKEYR]
 3385              	*/
 3386 1c08 7047     		bx lr 
 3387              	
 3388              	WAIT_BSY:
 3389 1c0a DFF83404 		ldr	r0,flash_regs
 3390              	WAIT1:
 3391 1c0e C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 3392 1c10 14F00104 		ands	r4, #0x1	//  BSY
 3393 1c14 FBD1     		bne	WAIT1
 3394 1c16 7047     		_RET 
 3395              	
 3396              	//    ERASE_PAGE	   ( adr -- )
 3397              	// 	  Erase one page of flash memory.
 3398              	//    stm32f103 page size is 1024 bytes 
 3399              	//    adr is any address inside page to erase 
 3400              	
 3401 1c18 D01B0000 		.word _QUIT  
 3402 1c1c 0A       	_EPAGE:	.byte  10
 3403 1c1d 45524153 		.ascii "ERASE_PAGE"
 3403      455F5041 
ARM GAS  stm32eforth-fl.s 			page 66


 3403      4745
 3404 1c27 00       		.p2align 2 	
 3405              	
 3406              	EPAGE: 	//  page --
 3407 1c28 00B5FFF7 		_CALL	WAIT_BSY
 3407      EEFF5DF8 
 3407      04EB
 3408 1c32 DFF80C04 		ldr r0,flash_regs 	 
 3409 1c36 4FF00204 		mov r4,#2 // set PER bit 
 3410 1c3a 0461     		str r4,[r0,#FLASH_CR]
 3411 1c3c 4561     		str r5,[r0,#FLASH_AR] // page to erase address 
 3412 1c3e 0469     		ldr	r4,[r0, #FLASH_CR]	
 3413 1c40 44F04004 		orr	R4,#0x40	//  set STRT bit   
 3414 1c44 0461     		str	r4,[r0, #FLASH_CR]	//  start erasing
 3415 1c46 00B5FFF7 	 	_CALL	WAIT_BSY // wait until done
 3415      DFFF5DF8 
 3415      04EB
 3416 1c50 C568     		ldr r5,[r0,#FLASH_SR] // check for errors 
 3417 1c52 05F01405 		and r5,r5,#(5<<2)
 3418 1c56 FEF7D9FB 		_NEST 
 3419 1c5a 4D1A0000 		_ABORQ 	13," erase error!"
 3419      0D206572 
 3419      61736520 
 3419      6572726F 
 3419      7221
 3420 1c6c 1B040000 		_UNNEST
 3421              	
 3422              	// store 16 bit word
 3423              	// expect flash unlocked  
 3424              	HWORD_WRITE: // ( hword address -- )
 3425 1c70 0469     		ldr	r4, [r0, #FLASH_CR]	//  FLASH_CR
 3426 1c72 4FF00104 		mov r4,#1 // set PG 
 3427 1c76 0461     		str r4,[r0,#FLASH_CR]
 3428 1c78 2E46     		mov r6,r5 
 3429 1c7a 51F8045B 		_POP 
 3430 1c7e 3580     		strh r5,[r6] 
 3431 1c80 00B5FFF7 		_CALL WAIT_BSY 
 3431      C2FF5DF8 
 3431      04EB
 3432 1c8a C568     		ldr r5,[r0,#FLASH_SR]
 3433 1c8c 05F01405 		and r5,r5,#(5<<2) 
 3434 1c90 FEF7BCFB 		_NEST 
 3435 1c94 89050000 		_QBRAN	1f 
 3435      B01C0000 
 3436 1c9c 4D1A0000 		_ABORQ	13," write error!"
 3436      0D207772 
 3436      69746520 
 3436      6572726F 
 3436      722100BF 
 3437              		.p2align 2
 3438              	1:	 
 3439 1cb0 1B040000 		_UNNEST 
 3440              	
 3441              	
 3442              	//    I!	   ( data address -- )
 3443              	// 	   Write one word into flash memory
 3444              	//	   address must even 
ARM GAS  stm32eforth-fl.s 			page 67


 3445              	
 3446 1cb4 1C1C0000 		.word	_EPAGE
 3447 1cb8 02       	_ISTOR:	.byte  2
 3448 1cb9 4921     		.ascii "I!"
 3449 1cbb 00       		.p2align 2 	
 3450              	ISTOR:	//  data address --
 3451 1cbc 00B5FFF7 		_CALL	WAIT_BSY
 3451      A4FF5DF8 
 3451      04EB
 3452 1cc6 FEF7A1FB 		_NEST 
 3453 1cca 81080000 		_ADR DDUP 
 3454 1cce 19060000 		_ADR TOR 
 3455 1cd2 19060000 		_ADR TOR 
 3456 1cd6 711C0000 		_ADR HWORD_WRITE
 3457 1cda F5050000 		_ADR RFROM
 3458 1cde 4D050000 		_DOLIT 65536 
 3458      00000100 
 3459 1ce6 ED0C0000 		_ADR  SLASH
 3460 1cea F5050000 		_ADR RFROM 
 3461 1cee 4D050000 		_DOLIT 2 
 3461      02000000 
 3462 1cf6 35070000 		_ADR PLUS 
 3463 1cfa 711C0000 		_ADR HWORD_WRITE 
 3464 1cfe 1B040000 		_UNNEST
 3465              	
 3466              	// IMG_SIZE ( -- u )
 3467              	// return flash pages required to save 
 3468              	// user ram  
 3469 1d02 B81C0000 		.word _ISTOR 
 3470 1d06 08       	_IMG_SIZE: .byte 8
 3471 1d07 494D475F 		.ascii "IMG_SIZE" 
 3471      53495A45 
 3472 1d0f 00       		.p2align 2
 3473              	IMG_SIZE: 
 3474 1d10 FEF77CFB 		_NEST
 3475 1d14 4D050000 		_DOLIT VARS_END_OFS-IMG_SIGN_OFS 
 3475      38000000 
 3476 1d1c 890B0000 		_ADR USER_END 
 3477 1d20 6D0B0000 		_ADR USER_BEGIN 
 3478 1d24 45070000 		_ADR SUBB 
 3479 1d28 35070000 		_ADR PLUS 
 3480 1d2c 4D050000 		_DOLIT PAGE_SIZE 
 3480      00040000 
 3481 1d34 B50C0000 		_ADR SLMOD 
 3482 1d38 81060000 		_ADR SWAP 
 3483 1d3c 89050000 		_QBRAN 1f 
 3483      481D0000 
 3484 1d44 91070000 		_ADR ONEP
 3485              	1:
 3486 1d48 1B040000 		_UNNEST  
 3487              	
 3488              	// IMG? ( n -- T|F )
 3489              	// check if an image has been saved in slot n 
 3490 1d4c 061D0000 		.word _IMG_SIZE 
 3491 1d50 04       	_IMGQ: .byte 4
 3492 1d51 494D473F 		.ascii "IMG?"
 3493 1d55 0000BF   		.p2align 2
ARM GAS  stm32eforth-fl.s 			page 68


 3494              	IMGQ:
 3495 1d58 FEF758FB 		_NEST 
 3496 1d5c 811D0000 		_ADR IMG_ADR 
 3497 1d60 C9050000 		_ADR AT 
 3498 1d64 BD0B0000 		_ADR IMG_SIGN  
 3499 1d68 DD060000 		_ADR XORR  
 3500 1d6c E9080000 		_ADR ZEQUAL
 3501 1d70 1B040000 		_UNNEST
 3502              	
 3503              	// IMG_ADR ( n -- a )
 3504              	// return image address from its number
 3505              	// IMG_ADR=USER_SPACE+IMG_SIZE*1024*n  
 3506 1d74 501D0000 		.word _IMGQ
 3507 1d78 07       	_IMG_ADR: .byte 7 
 3508 1d79 494D475F 		.ascii "IMG_ADR"
 3508      414452
 3509              		.p2align 2 
 3510              	IMG_ADR:
 3511 1d80 FEF744FB 		_NEST 
 3512 1d84 111D0000 		_ADR IMG_SIZE // number of pages per image. 
 3513 1d88 4D050000 		_DOLIT 10
 3513      0A000000 
 3514 1d90 25070000 		_ADR LSHIFT
 3515 1d94 55070000 		_ADR STAR     // * n 
 3516 1d98 A10B0000 		_ADR IMAGE0 
 3517 1d9c 35070000 		_ADR PLUS    // + USER_SPACE  
 3518 1da0 1B040000 		_UNNEST 
 3519              	
 3520              	// LOAD_IMG ( n -- )
 3521              	// Load image in slot n in RAM. 
 3522 1da4 781D0000 		.word _IMG_ADR
 3523 1da8 08       	_LOAD_IMG: .byte 8 
 3524 1da9 4C4F4144 		.ascii "LOAD_IMG" 
 3524      5F494D47 
 3525 1db1 0000BF   		.p2align 2 
 3526              	LOAD_IMG:
 3527 1db4 FEF72AFB 		_NEST 
 3528 1db8 71060000 		_ADR DUPP 
 3529 1dbc 591D0000 		_ADR IMGQ 
 3530 1dc0 89050000 		_QBRAN 1f
 3530      101E0000 
 3531              	/* copy system variables to RAM */
 3532 1dc8 811D0000 		_ADR IMG_ADR 
 3533 1dcc 71060000 		_ADR DUPP 
 3534 1dd0 19060000 		_ADR TOR   // save source address 
 3535 1dd4 BD0B0000 		_ADR IMG_SIGN 
 3536 1dd8 4D050000 		_DOLIT (VARS_END_OFS-IMG_SIGN_OFS) 
 3536      38000000 
 3537 1de0 71060000 		_ADR DUPP 
 3538 1de4 19060000 		_ADR TOR 
 3539 1de8 A50E0000 		_ADR MOVE // ( src dest count -- ) R: src count 
 3540              	/* copy user definitions */
 3541 1dec F5050000 		_ADR RFROM 
 3542 1df0 F5050000 		_ADR RFROM  
 3543 1df4 35070000 		_ADR PLUS // source address  
 3544 1df8 6D0B0000 		_ADR USER_BEGIN // destination address
 3545 1dfc 050E0000 		_ADR HERE  
ARM GAS  stm32eforth-fl.s 			page 69


 3546 1e00 95060000 		_ADR OVER 
 3547 1e04 45070000 		_ADR SUBB  // byte count 
 3548 1e08 A50E0000 		_ADR MOVE
 3549 1e0c 1B040000 		_UNNEST  
 3550 1e10 61060000 	1:	_ADR DROP 
 3551 1e14 1B040000 		_UNNEST 
 3552              	
 3553              	
 3554              	// ERASE_MPG ( u1 u2 -- )
 3555              	// erase many pages 
 3556              	// u1 first page number 
 3557              	// u2 how many pages  
 3558 1e18 A81D0000 		.word _LOAD_IMG
 3559 1e1c 09       	_ERASE_MPG: .byte 9 
 3560 1e1d 45524153 		.ascii "ERASE_MPG"	
 3560      455F4D50 
 3560      47
 3561 1e26 00BF     		.p2align 2 
 3562              	ERASE_MPG:
 3563 1e28 FEF7F0FA 		_NEST 
 3564 1e2c 19060000 		_ADR TOR 
 3565 1e30 E11E0000 		_ADR PG_TO_ADR 
 3566 1e34 9B050000 		_BRAN 2f 
 3566      581E0000 
 3567              	1:
 3568 1e3c 71060000 		_ADR DUPP 
 3569 1e40 19060000 		_ADR TOR 
 3570 1e44 291C0000 		_ADR EPAGE 
 3571 1e48 F5050000 		_ADR RFROM
 3572 1e4c 4D050000 		_DOLIT PAGE_SIZE 
 3572      00040000 
 3573 1e54 35070000 		_ADR PLUS 
 3574              	2:
 3575 1e58 71050000 		_DONXT 1b 
 3575      3C1E0000 
 3576 1e60 07040000 		_ADR TPOP 
 3577 1e64 1B040000 		_UNNEST 
 3578              	
 3579              	// FLSH_WR ( src dest u -- dest+u )
 3580              	// write u words to flash memory 
 3581 1e68 1C1E0000 		.word _ERASE_MPG
 3582 1e6c 07       	_FLSH_WR: .byte 7 
 3583 1e6d 464C5348 		.ascii "FLSH_WR"
 3583      5F5752
 3584              		.p2align  
 3585              	FLSH_WR: 
 3586 1e74 FEF7CAFA 		_NEST 
 3587 1e78 19060000 		_ADR TOR
 3588 1e7c 9B050000 		_BRAN 3f  
 3588      A41E0000 
 3589              	/* write system variables to FLASH */
 3590 1e84 19060000 	2:  _ADR TOR  // destination address 
 3591 1e88 71060000 		_ADR DUPP 
 3592 1e8c C9050000 		_ADR AT   // get data 
 3593 1e90 09060000 		_ADR RAT  // get destination address 
 3594 1e94 BD1C0000 		_ADR ISTOR
 3595 1e98 D1070000 		_ADR CELLP  // increment source address 
ARM GAS  stm32eforth-fl.s 			page 70


 3596 1e9c F5050000 		_ADR RFROM 
 3597 1ea0 D1070000 		_ADR CELLP  // increment dest address 
 3598 1ea4 71050000 	3:	_DONXT 2b
 3598      841E0000 
 3599 1eac 19060000 		_ADR TOR 
 3600 1eb0 61060000 		_ADR DROP 
 3601 1eb4 F5050000 		_ADR RFROM 
 3602 1eb8 1B040000 		_UNNEST 
 3603              	
 3604              	// ADR>PG ( a -- n )
 3605              	// convert address to page number, {0..127} 
 3606 1ebc 6C1E0000 		.word _FLSH_WR
 3607 1ec0 06       	_ADR_TO_PG: .byte 6 
 3608 1ec1 4144523E 		.ascii "ADR>PG" 
 3608      5047
 3609 1ec7 00       		.p2align 2 
 3610              	ADR_TO_PG: 
 3611 1ec8 4FEA9525 		lsr r5,#10 
 3612 1ecc 05F07F05 		and r5,#127 
 3613 1ed0 FEF7A0BA 		_NEXT  
 3614              	
 3615              	// PG>ADR ( n -- a )
 3616              	// convert page# to address 
 3617 1ed4 C01E0000 		.word _ADR_TO_PG
 3618 1ed8 06       	_PG_TO_ADR: .byte 6 
 3619 1ed9 50473E41 		.ascii "PG>ADR" 
 3619      4452
 3620 1edf 00       		.p2align 2 
 3621              	PG_TO_ADR:
 3622 1ee0 C0F20205 		movt r5,#2
 3623 1ee4 4FEA8525 		lsl r5,#10 
 3624 1ee8 FEF794BA 		_NEXT 
 3625              	
 3626              	// ERASE_IMG ( n -- )
 3627              	// erase image in slot n  
 3628 1eec D81E0000 		.word _PG_TO_ADR 
 3629 1ef0 09       	_ERASE_IMG: .byte 9
 3630 1ef1 45524153 		.ascii "ERASE_IMG"
 3630      455F494D 
 3630      47
 3631 1efa 00BF     		.p2align 2
 3632              	ERASE_IMG:
 3633 1efc FEF786FA 		_NEST
 3634 1f00 811D0000 		_ADR IMG_ADR 
 3635 1f04 111D0000 		_ADR IMG_SIZE 
 3636 1f08 19060000 		_ADR TOR 
 3637 1f0c 9B050000 		_BRAN 2f 
 3637      281F0000 
 3638 1f14 71060000 	1:	_ADR DUPP 
 3639 1f18 291C0000 		_ADR EPAGE
 3640 1f1c 4D050000 		_DOLIT PAGE_SIZE
 3640      00040000 
 3641 1f24 35070000 		_ADR PLUS  
 3642 1f28 71050000 	2:	_DONXT 1b 
 3642      141F0000 
 3643 1f30 61060000 		_ADR DROP 
 3644 1f34 1B040000 		_UNNEST 
ARM GAS  stm32eforth-fl.s 			page 71


 3645              	
 3646              	// SAVE_IMG ( n -- )
 3647              	// copy in flash RAM system variables and user defintitions.
 3648              	// n is image slot number 
 3649 1f38 F01E0000 		.word _ERASE_IMG	
 3650 1f3c 08       	_SAVE_IMG: .byte 8 
 3651 1f3d 53415645 		.ascii "SAVE_IMG"
 3651      5F494D47 
 3652 1f45 0000BF   		.p2align 2
 3653              	SAVE_IMG:
 3654 1f48 FEF760FA 		_NEST 
 3655 1f4c 050E0000 		_ADR HERE 
 3656 1f50 6D0B0000 		_ADR USER_BEGIN
 3657 1f54 FD080000 		_ADR EQUAL 
 3658 1f58 89050000 		_QBRAN 1f 
 3658      681F0000 
 3659 1f60 61060000 		_ADR DROP 
 3660 1f64 1B040000 		_UNNEST  // nothing to save 
 3661 1f68 71060000 	1:	_ADR DUPP 
 3662 1f6c 591D0000 		_ADR IMGQ 
 3663 1f70 89050000 		_QBRAN 2f
 3663      801F0000 
 3664              	/* delete saved image */
 3665 1f78 71060000 		_ADR DUPP 
 3666 1f7c FD1E0000 		_ADR ERASE_IMG 
 3667              	/* save system variables */
 3668 1f80 811D0000 	2:	_ADR IMG_ADR // where to save
 3669 1f84 BD0B0000 		_ADR IMG_SIGN 
 3670 1f88 81060000 		_ADR SWAP  //  ( src dest --  
 3671 1f8c 4D050000 		_DOLIT (VARS_END_OFS-IMG_SIGN_OFS) 
 3671      38000000 
 3672 1f94 15080000 		_ADR CELLSL  // word count 
 3673 1f98 751E0000 		_ADR FLSH_WR  // ( src dest count -- dest+u )
 3674              	/* write user definitions */
 3675 1f9c 6D0B0000 		_ADR USER_BEGIN
 3676 1fa0 81060000 		_ADR SWAP  // ( src dest+ -- )
 3677 1fa4 050E0000 		_ADR HERE   
 3678 1fa8 6D0B0000 		_ADR USER_BEGIN 
 3679 1fac 45070000 		_ADR SUBB 
 3680 1fb0 15080000 		_ADR CELLSL  // src dest+ count -- 
 3681 1fb4 751E0000 		_ADR FLSH_WR  
 3682 1fb8 1B040000 		_UNNEST 
 3683              	
 3684              	// TURNKEY ( -- "WORD") 
 3685              	// set autorun program in 'BOOT variable 
 3686              	// and save image in slot 0.
 3687 1fbc 3C1F0000 		.word _SAVE_IMG
 3688 1fc0 07       	_TURNKEY: .byte 7
 3689 1fc1 5455524E 		.ascii "TURNKEY"
 3689      4B4559
 3690              		.p2align 2 
 3691              	TURNKEY:
 3692 1fc8 FEF720FA 		_NEST 
 3693 1fcc 55200000 		_ADR TICK 
 3694 1fd0 610A0000 		_ADR TBOOT 
 3695 1fd4 B5050000 		_ADR STORE 
 3696 1fd8 4D050000 		_DOLIT  0 
ARM GAS  stm32eforth-fl.s 			page 72


 3696      00000000 
 3697 1fe0 491F0000 		_ADR SAVE_IMG 
 3698 1fe4 1B040000 		_UNNEST
 3699              	
 3700 1fe8 C01F0000 		.word _TURNKEY
 3701 1fec 06       	_FORGET: .byte 6 
 3702 1fed 464F5247 		.ascii "FORGET"
 3702      4554
 3703 1ff3 00       		.p2align 2
 3704              	FORGET:
 3705 1ff4 FEF70AFA 		_NEST 
 3706 1ff8 09170000 		_ADR TOKEN 
 3707 1ffc 71060000 		_ADR DUPP 
 3708 2000 89050000 		_QBRAN 9f 
 3708      3C200000 
 3709 2008 8D180000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 3710 200c 45080000 		_ADR QDUP 
 3711 2010 89050000 		_QBRAN 8f
 3711      38200000 
 3712 2018 E1070000 		_ADR CELLM // ( ca la )
 3713 201c 71060000 		_ADR DUPP 
 3714 2020 110B0000 		_ADR CPP   
 3715 2024 B5050000 		_ADR STORE
 3716 2028 C9050000 		_ADR AT 
 3717 202c 390B0000 		_ADR LAST 
 3718 2030 B5050000 		_ADR STORE
 3719 2034 91240000 		_ADR OVERT 
 3720 2038 61060000 	8:  _ADR DROP 
 3721 203c 1B040000 	9:	_UNNEST 
 3722              	
 3723              		.p2align 2 
 3724              	flash_regs:
 3725 2040 00200240 		.word FLASH_BASE_ADR // 0 
 3726 2044 23016745 		.word FLASH_KEY1   // 4 
 3727 2048 AB89EFCD 		.word FLASH_KEY2   // 8
 3728              	
 3729              	// **************************************************************************
 3730              	//  The compiler
 3731              	
 3732              	//    '	   ( -- ca )
 3733              	// 	Search context vocabularies for the next word in input stream.
 3734              	
 3735 204c EC1F0000 		.word	_FORGET
 3736 2050 01       	_TICK:	.byte  1
 3737 2051 27       		.ascii "'"
 3738 2052 00BF     		.p2align 2 	
 3739              	TICK:
 3740 2054 FEF7DAF9 		_NEST
 3741 2058 09170000 		_ADR	TOKEN
 3742 205c 8D180000 		_ADR	NAMEQ	// ?defined
 3743 2060 89050000 		_QBRAN	TICK1
 3743      6C200000 
 3744 2068 1B040000 		_UNNEST	// yes, push code address
 3745              	TICK1:	
 3746 206c 9B050000 		_BRAN	ABORT	// no, error
 3746      201A0000 
 3747              	
ARM GAS  stm32eforth-fl.s 			page 73


 3748              	//    ALLOT	( n -- )
 3749              	// 	Allocate n bytes to the ram area.
 3750              	
 3751 2074 50200000 		.word	_TICK
 3752 2078 05       	_ALLOT:	.byte  5
 3753 2079 414C4C4F 		.ascii "ALLOT"
 3753      54
 3754 207e 00BF     		.p2align 2 	
 3755              	ALLOT:
 3756 2080 FEF7C4F9 		_NEST
 3757 2084 110B0000 		_ADR	CPP
 3758 2088 85090000 		_ADR	PSTOR
 3759 208c 1B040000 		_UNNEST			// adjust code pointer
 3760              	
 3761              	//    ,	   ( w -- )
 3762              	// 	Compile an integer into the code dictionary.
 3763              	
 3764 2090 78200000 		.word	_ALLOT
 3765 2094 012C     	_COMMA:	.byte  1,','
 3766 2096 00BF     		.p2align 2 	
 3767              	COMMA:
 3768 2098 FEF7B8F9 		_NEST
 3769 209c 050E0000 		_ADR	HERE
 3770 20a0 71060000 		_ADR	DUPP
 3771 20a4 D1070000 		_ADR	CELLP	// cell boundary
 3772 20a8 110B0000 		_ADR	CPP
 3773 20ac B5050000 		_ADR	STORE
 3774 20b0 B5050000 		_ADR	STORE
 3775 20b4 1B040000 		_UNNEST	// adjust code pointer, compile
 3776              		.p2align 2 
 3777              	//    [COMPILE]   ( -- //  string> )
 3778              	// 	Compile the next immediate word into code dictionary.
 3779              	
 3780 20b8 94200000 		.word	_COMMA
 3781 20bc 89       	_BCOMP:	.byte  IMEDD+9
 3782 20bd 5B434F4D 		.ascii "[COMPILE]"
 3782      50494C45 
 3782      5D
 3783 20c6 00BF     		.p2align 2 	
 3784              	BCOMP:
 3785 20c8 FEF7A0F9 		_NEST
 3786 20cc 55200000 		_ADR	TICK
 3787 20d0 99200000 		_ADR	COMMA
 3788 20d4 1B040000 		_UNNEST
 3789              	
 3790              	//    COMPILE	( -- )
 3791              	// 	Compile the next address in colon list to code dictionary.
 3792              	
 3793 20d8 BC200000 		.word	_BCOMP
 3794 20dc 47       	_COMPI:	.byte  COMPO+7
 3795 20dd 434F4D50 		.ascii "COMPILE"
 3795      494C45
 3796              		.p2align 2 	
 3797              	COMPI:
 3798 20e4 FEF792F9 		_NEST
 3799 20e8 F5050000 		_ADR	RFROM
 3800 20ec 71060000 		_ADR	DUPP 
ARM GAS  stm32eforth-fl.s 			page 74


 3801 20f0 C9050000 		_ADR	AT
 3802 20f4 4D050000 		_DOLIT 1 
 3802      01000000 
 3803 20fc C9060000 		_ADR	ORR 
 3804 2100 99200000 		_ADR	COMMA 
 3805 2104 D1070000 		_ADR	CELLP 
 3806 2108 19060000 		_ADR	TOR 
 3807 210c 1B040000 		_UNNEST			// adjust return address
 3808              	
 3809              	//    LITERAL	( w -- )
 3810              	// 	Compile tos to code dictionary as an integer literal.
 3811              	
 3812 2110 DC200000 		.word	_COMPI
 3813 2114 87       	_LITER:	.byte  IMEDD+7
 3814 2115 4C495445 		.ascii "LITERAL"
 3814      52414C
 3815              		.p2align 2 	
 3816              	LITER:
 3817 211c FEF776F9 		_NEST
 3818 2120 E5200000 		_COMPI	DOLIT
 3818      4C050000 
 3819 2128 99200000 		_ADR	COMMA
 3820 212c 1B040000 		_UNNEST
 3821              	
 3822              	//    $,"	( -- )
 3823              	// 	Compile a literal string up to next " .
 3824              	
 3825              	// 	.word	_LITER
 3826              	// _STRCQ	.byte  3
 3827              	// 	.ascii "$$,"""
 3828              	// 	.p2align 2 	
 3829              	STRCQ:
 3830 2130 FEF76CF9 		_NEST
 3831 2134 4D050000 		_DOLIT -4
 3831      FCFFFFFF 
 3832 213c 110B0000 		_ADR	CPP
 3833 2140 85090000 		_ADR	PSTOR
 3834 2144 4D050000 		_DOLIT	'\"'
 3834      22000000 
 3835 214c E5160000 		_ADR	WORDD			// move word to code dictionary
 3836 2150 CD090000 		_ADR	COUNT
 3837 2154 35070000 		_ADR	PLUS
 3838 2158 4D0D0000 		_ADR	ALGND			// calculate aligned end of string
 3839 215c 110B0000 		_ADR	CPP
 3840 2160 B5050000 		_ADR	STORE
 3841 2164 1B040000 		_UNNEST 			// adjust the code pointer
 3842              	
 3843              	// **************************************************************************
 3844              	//  Structures
 3845              	
 3846              	//    FOR	 ( -- a )
 3847              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3848              	
 3849 2168 14210000 		.word	_LITER
 3850 216c C3       	_FOR:	.byte  COMPO+IMEDD+3
 3851 216d 464F52   		.ascii "FOR"
 3852              		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 75


 3853              	FOR:
 3854 2170 FEF74CF9 		_NEST
 3855 2174 E5200000 		_COMPI	TOR
 3855      18060000 
 3856 217c 050E0000 		_ADR	HERE
 3857 2180 1B040000 		_UNNEST
 3858              	
 3859              	//    BEGIN	( -- a )
 3860              	// 	Start an infinite or indefinite loop structure.
 3861              	
 3862 2184 6C210000 		.word	_FOR
 3863 2188 C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 3864 2189 42454749 		.ascii "BEGIN"
 3864      4E
 3865 218e 00BF     		.p2align 2 	
 3866              	BEGIN:
 3867 2190 FEF73CF9 		_NEST
 3868 2194 050E0000 		_ADR	HERE
 3869 2198 1B040000 		_UNNEST
 3870              		.p2align 2 
 3871              	//    NEXT	( a -- )
 3872              	// 	Terminate a FOR-NEXT loop structure.
 3873              	
 3874 219c 88210000 		.word	_BEGIN
 3875 21a0 C4       	_FNEXT:	.byte  COMPO+IMEDD+4
 3876 21a1 4E455854 		.ascii "NEXT"
 3877 21a5 0000BF   		.p2align 2 	
 3878              	FNEXT:
 3879 21a8 FEF730F9 		_NEST
 3880 21ac E5200000 		_COMPI	DONXT
 3880      70050000 
 3881 21b4 99200000 		_ADR	COMMA
 3882 21b8 1B040000 		_UNNEST
 3883              	
 3884              	//    UNTIL	( a -- )
 3885              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3886              	
 3887 21bc A0210000 		.word	_FNEXT
 3888 21c0 C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3889 21c1 554E5449 		.ascii "UNTIL"
 3889      4C
 3890 21c6 00BF     		.p2align 2 	
 3891              	UNTIL:
 3892 21c8 FEF720F9 		_NEST
 3893 21cc E5200000 		_COMPI	QBRAN
 3893      88050000 
 3894 21d4 99200000 		_ADR	COMMA
 3895 21d8 1B040000 		_UNNEST
 3896              	
 3897              	//    AGAIN	( a -- )
 3898              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3899              	
 3900 21dc C0210000 		.word	_UNTIL
 3901 21e0 C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3902 21e1 41474149 		.ascii "AGAIN"
 3902      4E
 3903 21e6 00BF     		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 76


 3904              	AGAIN:
 3905 21e8 FEF710F9 		_NEST
 3906 21ec E5200000 		_COMPI	BRAN
 3906      9A050000 
 3907 21f4 99200000 		_ADR	COMMA
 3908 21f8 1B040000 		_UNNEST
 3909              	
 3910              	//    IF	  ( -- A )
 3911              	// 	Begin a conditional branch structure.
 3912              	
 3913 21fc E0210000 		.word	_AGAIN
 3914 2200 C2       	_IFF:	.byte  COMPO+IMEDD+2
 3915 2201 4946     		.ascii "IF"
 3916 2203 00       		.p2align 2 	
 3917              	IFF:
 3918 2204 FEF702F9 		_NEST
 3919 2208 E5200000 		_COMPI	QBRAN
 3919      88050000 
 3920 2210 050E0000 		_ADR	HERE
 3921 2214 4D050000 		_DOLIT	4
 3921      04000000 
 3922 221c 110B0000 		_ADR	CPP
 3923 2220 85090000 		_ADR	PSTOR
 3924 2224 1B040000 		_UNNEST
 3925              	
 3926              	//    AHEAD	( -- A )
 3927              	// 	Compile a forward branch instruction.
 3928              	
 3929 2228 00220000 		.word	_IFF
 3930 222c C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 3931 222d 41484541 		.ascii "AHEAD"
 3931      44
 3932 2232 00BF     		.p2align 2 	
 3933              	AHEAD:
 3934 2234 FEF7EAF8 		_NEST
 3935 2238 E5200000 		_COMPI	BRAN
 3935      9A050000 
 3936 2240 050E0000 		_ADR	HERE
 3937 2244 4D050000 		_DOLIT	4
 3937      04000000 
 3938 224c 110B0000 		_ADR	CPP
 3939 2250 85090000 		_ADR	PSTOR
 3940 2254 1B040000 		_UNNEST
 3941              	
 3942              	//    REPEAT	( A a -- )
 3943              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3944              	
 3945 2258 2C220000 		.word	_AHEAD
 3946 225c C6       	_REPEA:	.byte  COMPO+IMEDD+6
 3947 225d 52455045 		.ascii "REPEAT"
 3947      4154
 3948 2263 00       		.p2align 2 	
 3949              	REPEA:
 3950 2264 FEF7D2F8 		_NEST
 3951 2268 E9210000 		_ADR	AGAIN
 3952 226c 050E0000 		_ADR	HERE
 3953 2270 81060000 		_ADR	SWAP
ARM GAS  stm32eforth-fl.s 			page 77


 3954 2274 B5050000 		_ADR	STORE
 3955 2278 1B040000 		_UNNEST
 3956              	
 3957              	//    THEN	( A -- )
 3958              	// 	Terminate a conditional branch structure.
 3959              	
 3960 227c 5C220000 		.word	_REPEA
 3961 2280 C4       	_THENN:	.byte  COMPO+IMEDD+4
 3962 2281 5448454E 		.ascii "THEN"
 3963 2285 0000BF   		.p2align 2 	
 3964              	THENN:
 3965 2288 FEF7C0F8 		_NEST
 3966 228c 050E0000 		_ADR	HERE
 3967 2290 81060000 		_ADR	SWAP
 3968 2294 B5050000 		_ADR	STORE
 3969 2298 1B040000 		_UNNEST
 3970              	
 3971              	//    AFT	 ( a -- a A )
 3972              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3973              	
 3974 229c 80220000 		.word	_THENN
 3975 22a0 C3       	_AFT:	.byte  COMPO+IMEDD+3
 3976 22a1 414654   		.ascii "AFT"
 3977              		.p2align 2 	
 3978              	AFT:
 3979 22a4 FEF7B2F8 		_NEST
 3980 22a8 61060000 		_ADR	DROP
 3981 22ac 35220000 		_ADR	AHEAD
 3982 22b0 91210000 		_ADR	BEGIN
 3983 22b4 81060000 		_ADR	SWAP
 3984 22b8 1B040000 		_UNNEST
 3985              	
 3986              	//    ELSE	( A -- A )
 3987              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3988              	
 3989 22bc A0220000 		.word	_AFT
 3990 22c0 C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 3991 22c1 454C5345 		.ascii "ELSE"
 3992 22c5 0000BF   		.p2align 2 	
 3993              	ELSEE:
 3994 22c8 FEF7A0F8 		_NEST
 3995 22cc 35220000 		_ADR	AHEAD
 3996 22d0 81060000 		_ADR	SWAP
 3997 22d4 89220000 		_ADR	THENN
 3998 22d8 1B040000 		_UNNEST
 3999              	
 4000              	//    WHILE	( a -- A a )
 4001              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 4002              	
 4003 22dc C0220000 		.word	_ELSEE
 4004 22e0 C5       	_WHILE:	.byte  COMPO+IMEDD+5
 4005 22e1 5748494C 		.ascii "WHILE"
 4005      45
 4006 22e6 00BF     		.p2align 2 	
 4007              	WHILE:
 4008 22e8 FEF790F8 		_NEST
 4009 22ec 05220000 		_ADR	IFF
ARM GAS  stm32eforth-fl.s 			page 78


 4010 22f0 81060000 		_ADR	SWAP
 4011 22f4 1B040000 		_UNNEST
 4012              	
 4013              	//    ABORT"	( -- //  string> )
 4014              	// 	Conditional abort with an error message.
 4015              	
 4016 22f8 E0220000 		.word	_WHILE
 4017 22fc 86       	_ABRTQ:	.byte  IMEDD+6
 4018 22fd 41424F52 		.ascii "ABORT\""
 4018      5422
 4019 2303 00       		.p2align 2 	
 4020              	ABRTQ:
 4021 2304 FEF782F8 		_NEST
 4022 2308 E5200000 		_COMPI	ABORQ
 4022      4C1A0000 
 4023 2310 31210000 		_ADR	STRCQ
 4024 2314 1B040000 		_UNNEST
 4025              	
 4026              	//    $"	( -- //  string> )
 4027              	// 	Compile an inlineDCB literal.
 4028              	
 4029 2318 FC220000 		.word	_ABRTQ
 4030 231c 82       	_STRQ:	.byte  IMEDD+2
 4031 231d 2422     		.byte	'$','"'
 4032 231f 00       		.p2align 2 	
 4033              	STRQ:
 4034 2320 FEF774F8 		_NEST
 4035 2324 E5200000 		_COMPI	STRQP
 4035      DC130000 
 4036 232c 31210000 		_ADR	STRCQ
 4037 2330 1B040000 		_UNNEST
 4038              	
 4039              	//    ."	( -- //  string> )
 4040              	// 	Compile an inline word  literal to be typed out at run time.
 4041              	
 4042 2334 1C230000 		.word	_STRQ
 4043 2338 C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 4044 2339 2E22     		.byte	'.','"'
 4045 233b 00       		.p2align 2 	
 4046              	DOTQ:
 4047 233c FEF766F8 		_NEST
 4048 2340 E5200000 		_COMPI	DOTQP
 4048      F8130000 
 4049 2348 31210000 		_ADR	STRCQ
 4050 234c 1B040000 		_UNNEST
 4051              	
 4052              	// **************************************************************************
 4053              	//  Name compiler
 4054              	
 4055              	//    ?UNIQUE	( a -- a )
 4056              	// 	Display a warning message if the word already exists.
 4057              	
 4058 2350 38230000 		.word	_DOTQ
 4059 2354 07       	_UNIQU:	.byte  7
 4060 2355 3F554E49 		.ascii "?UNIQUE"
 4060      515545
 4061              		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 79


 4062              	UNIQU:
 4063 235c FEF756F8 		_NEST
 4064 2360 71060000 		_ADR	DUPP
 4065 2364 8D180000 		_ADR	NAMEQ			// ?name exists
 4066 2368 89050000 		_QBRAN	UNIQ1	// redefinitions are OK
 4066      88230000 
 4067 2370 F9130000 		_DOTQP	7," reDef "		// but warn the user
 4067      07207265 
 4067      44656620 
 4068 237c 95060000 		_ADR	OVER
 4069 2380 CD090000 		_ADR	COUNT
 4070 2384 5D130000 		_ADR	TYPEE			// just in case its not planned
 4071              	UNIQ1:
 4072 2388 61060000 		_ADR	DROP
 4073 238c 1B040000 		_UNNEST
 4074              	
 4075              	//    $,n	 ( na -- )
 4076              	// 	Build a new dictionary name using the data at na.
 4077              	
 4078              	// 	.word	_UNIQU
 4079              	// _SNAME	.byte  3
 4080              	// 	.ascii "$$,n"
 4081              	// 	.p2align 2 	
 4082              	SNAME:
 4083 2390 FEF73CF8 		_NEST
 4084 2394 71060000 		_ADR	DUPP			//  na na
 4085 2398 E9050000 		_ADR	CAT			//  ?null input
 4086 239c 89050000 		_QBRAN	SNAM1
 4086      D8230000 
 4087 23a4 5D230000 		_ADR	UNIQU			//  na
 4088 23a8 390B0000 		_ADR	LAST			//  na last
 4089 23ac C9050000 		_ADR	AT			//  na la
 4090 23b0 99200000 		_ADR	COMMA			//  na
 4091 23b4 71060000 		_ADR	DUPP			//  na na
 4092 23b8 390B0000 		_ADR	LAST			//  na na last
 4093 23bc B5050000 		_ADR	STORE			//  na , save na for vocabulary link
 4094 23c0 CD090000 		_ADR	COUNT			//  na+1 count
 4095 23c4 35070000 		_ADR	PLUS			//  na+1+count
 4096 23c8 4D0D0000 		_ADR	ALGND			//  word boundary
 4097 23cc 110B0000 		_ADR	CPP
 4098 23d0 B5050000 		_ADR	STORE			//  top of dictionary now
 4099 23d4 1B040000 		_UNNEST
 4100              	SNAM1:
 4101 23d8 DD130000 		_ADR	STRQP
 4102 23dc 07       		.byte	7
 4103 23dd 206E616D 		.ascii " name? "
 4103      653F20
 4104 23e4 9B050000 		_BRAN	ABORT
 4104      201A0000 
 4105              	
 4106              	//    $COMPILE	( a -- )
 4107              	// 	Compile next word to code dictionary as a token or literal.
 4108              	
 4109 23ec 54230000 		.word	_UNIQU
 4110 23f0 08       	_SCOMP:	.byte  8
 4111 23f1 2424434F 		.ascii "$$COMPILE"
 4111      4D50494C 
ARM GAS  stm32eforth-fl.s 			page 80


 4111      45
 4112 23fa 00BF     		.p2align 2 	
 4113              	SCOMP:
 4114 23fc FEF706F8 		_NEST
 4115 2400 8D180000 		_ADR	NAMEQ
 4116 2404 45080000 		_ADR	QDUP	// defined?
 4117 2408 89050000 		_QBRAN	SCOM2
 4117      38240000 
 4118 2410 C9050000 		_ADR	AT
 4119 2414 4D050000 		_DOLIT	IMEDD
 4119      80000000 
 4120 241c B5060000 		_ADR	ANDD	// immediate?
 4121 2420 89050000 		_QBRAN	SCOM1
 4121      30240000 
 4122 2428 65050000 		_ADR	EXECU
 4123 242c 1B040000 		_UNNEST			// it's immediate, execute
 4124              	SCOM1:
 4125 2430 E5240000 		_ADR	CALLC			// it's not immediate, compile
 4126 2434 1B040000 		_UNNEST	
 4127              	SCOM2:
 4128 2438 95110000 		_ADR	NUMBQ
 4129 243c 89050000 		_QBRAN	SCOM3
 4129      4C240000 
 4130 2444 1D210000 		_ADR	LITER
 4131 2448 1B040000 		_UNNEST			// compile number as integer
 4132              	SCOM3: // compilation abort 
 4133 244c 59240000 		_ADR COLON_ABORT 
 4134 2450 9B050000 		_BRAN	ABORT			// error
 4134      201A0000 
 4135              	
 4136              	// before aborting a compilation 
 4137              	// reset HERE and LAST
 4138              	// to previous values. 
 4139              	COLON_ABORT:
 4140 2458 FDF7D8FF 		_NEST 
 4141 245c 390B0000 		_ADR LAST 
 4142 2460 C9050000 		_ADR AT 
 4143 2464 E1070000 		_ADR CELLM 
 4144 2468 71060000 		_ADR DUPP 
 4145 246c 110B0000 		_ADR CPP  
 4146 2470 B5050000 		_ADR STORE 
 4147 2474 C9050000 		_ADR AT 
 4148 2478 390B0000 		_ADR LAST 
 4149 247c B5050000 		_ADR STORE 
 4150 2480 1B040000 		_UNNEST 
 4151              	
 4152              	//    OVERT	( -- )
 4153              	// 	Link a new word into the current vocabulary.
 4154              	
 4155 2484 F0230000 		.word	_SCOMP
 4156 2488 05       	_OVERT:	.byte  5
 4157 2489 4F564552 		.ascii "OVERT"
 4157      54
 4158 248e 00BF     		.p2align 2 	
 4159              	OVERT:
 4160 2490 FDF7BCFF 		_NEST
 4161 2494 390B0000 		_ADR	LAST
ARM GAS  stm32eforth-fl.s 			page 81


 4162 2498 C9050000 		_ADR	AT
 4163 249c FD0A0000 		_ADR	CNTXT
 4164 24a0 B5050000 		_ADR	STORE
 4165 24a4 1B040000 		_UNNEST
 4166              	
 4167              	//    ; 	   ( -- )
 4168              	// 	Terminate a colon definition.
 4169              	
 4170 24a8 88240000 		.word	_OVERT
 4171 24ac C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 4172 24ad 3B       		.ascii ";"
 4173 24ae 00BF     		.p2align 2 	
 4174              	SEMIS:
 4175 24b0 FDF7ACFF 		_NEST
 4176              	//	_DOLIT	_UNNEST
 4177 24b4 99200000 		_ADR	COMMA
 4178 24b8 ED1A0000 		_ADR	LBRAC
 4179 24bc 91240000 		_ADR	OVERT
 4180 24c0 1B040000 		_UNNEST
 4181              	
 4182              	//    ]	   ( -- )
 4183              	// 	Start compiling the words in the input stream.
 4184              	
 4185 24c4 AC240000 		.word	_SEMIS
 4186 24c8 01       	_RBRAC:	.byte  1
 4187 24c9 5D       		.ascii "]"
 4188 24ca 00BF     		.p2align 2 	
 4189              	RBRAC:
 4190 24cc FDF79EFF 		_NEST
 4191 24d0 4D050000 		_DOLIT	SCOMP
 4191      FC230000 
 4192 24d8 D10A0000 		_ADR	TEVAL
 4193 24dc B5050000 		_ADR	STORE
 4194 24e0 1B040000 		_UNNEST
 4195              	
 4196              	//    BL.W	( ca -- )
 4197              	// 	Assemble a branch-link long instruction to ca.
 4198              	// 	BL.W is split into 2 16 bit instructions with 11 bit address fields.
 4199              	
 4200              	// 	.word	_RBRAC
 4201              	// _CALLC	.byte  5
 4202              	// 	.ascii "call,"
 4203              	// 	.p2align 2 	
 4204              	CALLC:
 4205 24e4 FDF792FF 		_NEST 
 4206 24e8 1B040000 		_UNNEST 
 4207              	
 4208              	
 4209              	// 	:	( -- //  string> )
 4210              	// 	Start a new colon definition using next word as its name.
 4211              	
 4212 24ec C8240000 		.word	_RBRAC
 4213 24f0 01       	_COLON:	.byte  1
 4214 24f1 3A       		.ascii ":"
 4215 24f2 00BF     		.p2align 2 	
 4216              	COLON:
 4217 24f4 FDF78AFF 		_NEST
ARM GAS  stm32eforth-fl.s 			page 82


 4218 24f8 09170000 		_ADR	TOKEN
 4219 24fc 91230000 		_ADR	SNAME
 4220 2500 4D050000 		_DOLIT	NEST
 4220      0C040000 
 4221 2508 99200000 		_ADR	COMMA
 4222 250c CD240000 		_ADR	RBRAC
 4223 2510 1B040000 		_UNNEST
 4224              	
 4225              	//    IMMEDIATE   ( -- )
 4226              	// 	Make the last compiled word an immediate word.
 4227              	
 4228 2514 F0240000 		.word	_COLON
 4229 2518 09       	_IMMED:	.byte  9
 4230 2519 494D4D45 		.ascii "IMMEDIATE"
 4230      44494154 
 4230      45
 4231 2522 00BF     		.p2align 2 	
 4232              	IMMED:
 4233 2524 FDF772FF 		_NEST
 4234 2528 4D050000 		_DOLIT	IMEDD
 4234      80000000 
 4235 2530 390B0000 		_ADR	LAST
 4236 2534 C9050000 		_ADR	AT
 4237 2538 C9050000 		_ADR	AT
 4238 253c C9060000 		_ADR	ORR
 4239 2540 390B0000 		_ADR	LAST
 4240 2544 C9050000 		_ADR	AT
 4241 2548 B5050000 		_ADR	STORE
 4242 254c 1B040000 		_UNNEST
 4243              	
 4244              	// **************************************************************************
 4245              	//  Defining words
 4246              	
 4247              	//    CONSTANT	( u -- //  string> )
 4248              	// 	Compile a new constant.
 4249              	
 4250 2550 18250000 		.word	_IMMED
 4251 2554 08       	_CONST:	.byte  8
 4252 2555 434F4E53 		.ascii "CONSTANT"
 4252      54414E54 
 4253 255d 0000BF   		.p2align 2 	
 4254              	CONST:
 4255 2560 FDF754FF 		_NEST 
 4256 2564 09170000 		_ADR	TOKEN
 4257 2568 91230000 		_ADR	SNAME
 4258 256c 91240000 		_ADR	OVERT
 4259 2570 4D050000 		_DOLIT	NEST
 4259      0C040000 
 4260 2578 99200000 		_ADR	COMMA
 4261 257c 4D050000 		_DOLIT	DOCON
 4261      FE090000 
 4262 2584 E5240000 		_ADR	CALLC
 4263 2588 99200000 		_ADR	COMMA
 4264 258c 1B040000 		_UNNEST
 4265              	
 4266              	//    CREATE	( -- //  string> )
 4267              	// 	Compile a new array entry without allocating code space.
ARM GAS  stm32eforth-fl.s 			page 83


 4268              	
 4269 2590 54250000 		.word	_CONST
 4270 2594 06       	_CREAT:	.byte  6
 4271 2595 43524541 		.ascii "CREATE"
 4271      5445
 4272 259b 00       		.p2align 2 	
 4273              	CREAT:
 4274 259c FDF736FF 		_NEST 
 4275 25a0 09170000 		_ADR	TOKEN
 4276 25a4 91230000 		_ADR	SNAME
 4277 25a8 91240000 		_ADR	OVERT
 4278 25ac 4D050000 		_DOLIT	NEST
 4278      0C040000 
 4279 25b4 99200000 		_ADR	COMMA
 4280 25b8 4D050000 		_DOLIT	DOVAR
 4280      F4090000 
 4281 25c0 E5240000 		_ADR	CALLC
 4282 25c4 1B040000 		_UNNEST
 4283              	
 4284              	//    VARIABLE	( -- //  string> )
 4285              	// 	Compile a new variable initialized to 0.
 4286              	
 4287 25c8 94250000 		.word	_CREAT
 4288 25cc 08       	_VARIA:	.byte  8
 4289 25cd 56415249 		.ascii "VARIABLE"
 4289      41424C45 
 4290 25d5 0000BF   		.p2align 2 	
 4291              	VARIA:
 4292 25d8 FDF718FF 		_NEST
 4293 25dc 9D250000 		_ADR	CREAT
 4294 25e0 4D050000 		_DOLIT	0
 4294      00000000 
 4295 25e8 99200000 		_ADR	COMMA
 4296 25ec 1B040000 		_UNNEST
 4297              	
 4298              	// **************************************************************************
 4299              	//  Tools
 4300              	
 4301              	//  TRACE ( f -- )
 4302              	// enable or disable tracing 
 4303 25f0 CC250000 		.word _VARIA 
 4304 25f4 05       	_TRACE: .byte 5
 4305 25f5 54524143 		.ascii "TRACE"
 4305      45
 4306 25fa 00BF     		.p2align 2
 4307              	TRACE: 
 4308 25fc FDF706FF 		_NEST 
 4309 2600 510B0000 		_ADR FTRACE 
 4310 2604 B5050000 		_ADR STORE 
 4311 2608 1B040000 		_UNNEST 
 4312              	
 4313              	// TR_PRINT ( ca -- )
 4314              	// print name from ca  
 4315 260c F4250000 		.word _TRACE 
 4316 2610 07       	_DBG_PRT: .byte 7 
 4317 2611 4442475F 		.ascii "DBG_PRT"
 4317      505254
ARM GAS  stm32eforth-fl.s 			page 84


 4318              	DBG_PRT:
 4319 2618 FDF7F8FE 		_NEST 
 4320 261c 49270000 		_ADR TNAME 
 4321 2620 45080000 		_ADR QDUP 
 4322 2624 89050000 		_QBRAN 1f 
 4322      38260000 
 4323 262c CD090000 		_ADR COUNT 
 4324 2630 5D130000 		_ADR TYPEE 
 4325 2634 91130000 		_ADR CR
 4326              	1:  	
 4327 2638 1B040000 		_UNNEST 
 4328              	
 4329              	//    dm+	 ( a u -- a )
 4330              	// 	Dump u bytes from , leaving a+u on the stack.
 4331              	
 4332              	// 	.word	_TRACE
 4333              	// _DMP	.byte  3
 4334              	// 	.ascii "dm+"
 4335              	// 	.p2align 2 	
 4336              	DMP:
 4337 263c FDF7E6FE 		_NEST
 4338 2640 95060000 		_ADR	OVER
 4339 2644 4D050000 		_DOLIT	4
 4339      04000000 
 4340 264c 3D140000 		_ADR	UDOTR			// display address
 4341 2650 09130000 		_ADR	SPACE
 4342 2654 19060000 		_ADR	TOR			// start count down loop
 4343 2658 9B050000 		_BRAN	PDUM2			// skip first pass
 4343      78260000 
 4344              	PDUM1:
 4345 2660 71060000 	  _ADR	DUPP
 4346 2664 E9050000 		_ADR	CAT
 4347 2668 4D050000 		_DOLIT	3
 4347      03000000 
 4348 2670 3D140000 		_ADR	UDOTR			// display numeric data
 4349 2674 91070000 		_ADR	ONEP			// increment address
 4350              	PDUM2:
 4351 2678 71050000 	  _ADR	DONXT
 4352 267c 60260000 		.word	PDUM1	// loop till done
 4353 2680 1B040000 		_UNNEST
 4354              		.p2align 2 
 4355              	//    DUMP	( a u -- )
 4356              	// 	Dump u bytes from a, in a formatted manner.
 4357              	
 4358 2684 CC250000 		.word	_VARIA
 4359 2688 04       	_DUMP:	.byte  4
 4360 2689 44554D50 		.ascii "DUMP"
 4361 268d 0000BF   		.p2align 2 	
 4362              	DUMP:
 4363 2690 FDF7BCFE 		_NEST
 4364 2694 750A0000 		_ADR	BASE
 4365 2698 C9050000 		_ADR	AT
 4366 269c 19060000 		_ADR	TOR
 4367 26a0 E5100000 		_ADR	HEX			// save radix,set hex
 4368 26a4 4D050000 		_DOLIT	16
 4368      10000000 
 4369 26ac ED0C0000 		_ADR	SLASH			// change count to lines
ARM GAS  stm32eforth-fl.s 			page 85


 4370 26b0 19060000 		_ADR	TOR
 4371 26b4 9B050000 		_BRAN	DUMP4			// start count down loop
 4371      E4260000 
 4372              	DUMP1:
 4373 26bc 91130000 	  _ADR	CR
 4374 26c0 4D050000 		_DOLIT	16
 4374      10000000 
 4375 26c8 81080000 		_ADR	DDUP
 4376 26cc 3D260000 		_ADR	DMP			// display numeric
 4377 26d0 59080000 		_ADR	ROT
 4378 26d4 59080000 		_ADR	ROT
 4379 26d8 09130000 		_ADR	SPACE
 4380 26dc 09130000 		_ADR	SPACE
 4381 26e0 5D130000 		_ADR	TYPEE			// display printable characters
 4382              	DUMP4:
 4383 26e4 71050000 	  _DONXT	DUMP1	// loop till done
 4383      BC260000 
 4384              	DUMP3:
 4385 26ec 61060000 		_ADR	DROP
 4386 26f0 F5050000 		_ADR	RFROM
 4387 26f4 750A0000 		_ADR	BASE
 4388 26f8 B5050000 		_ADR	STORE			// restore radix
 4389 26fc 1B040000 		_UNNEST
 4390              	
 4391              	//    .S	  ( ... -- ... )
 4392              	// 	Display the contents of the data stack.
 4393              	
 4394 2700 88260000 		.word	_DUMP
 4395              	_DOTS:
 4396 2704 02       		.byte  2
 4397 2705 2E53     		.ascii ".S"
 4398 2707 00       		.p2align 2 	
 4399              	DOTS:
 4400 2708 FDF780FE 		_NEST
 4401 270c 09130000 		_ADR	SPACE
 4402 2710 B50D0000 		_ADR	DEPTH			// stack depth
 4403 2714 19060000 		_ADR	TOR			// start count down loop
 4404 2718 9B050000 		_BRAN	DOTS2			// skip first pass
 4404      2C270000 
 4405              	DOTS1:
 4406 2720 09060000 		_ADR	RAT
 4407 2724 DD0D0000 		_ADR	PICK
 4408 2728 95140000 		_ADR	DOT			// index stack, display contents
 4409              	DOTS2:
 4410 272c 71050000 		_DONXT	DOTS1	// loop till done
 4410      20270000 
 4411 2734 09130000 		_ADR	SPACE
 4412 2738 1B040000 		_UNNEST
 4413              	
 4414              	//    >NAME	( ca -- na | F )
 4415              	// 	Convert code address to a name address.
 4416              	
 4417 273c 04270000 		.word	_DOTS
 4418 2740 05       	_TNAME:	.byte  5
 4419 2741 3E4E414D 		.ascii ">NAME"
 4419      45
 4420 2746 00BF     		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 86


 4421              	TNAME:
 4422 2748 FDF760FE 		_NEST
 4423 274c 19060000 		_ADR	TOR			//  
 4424 2750 FD0A0000 		_ADR	CNTXT			//  va
 4425 2754 C9050000 		_ADR	AT			//  na
 4426              	TNAM1:
 4427 2758 71060000 		_ADR	DUPP			//  na na
 4428 275c 89050000 		_QBRAN	TNAM2	//  vocabulary end, no match
 4428      8C270000 
 4429 2764 71060000 		_ADR	DUPP			//  na na
 4430 2768 25170000 		_ADR	NAMET			//  na ca
 4431 276c 09060000 		_ADR	RAT			//  na ca code
 4432 2770 DD060000 		_ADR	XORR			//  na f --
 4433 2774 89050000 		_QBRAN	TNAM2
 4433      8C270000 
 4434 277c E1070000 		_ADR	CELLM			//  la 
 4435 2780 C9050000 		_ADR	AT			//  next_na
 4436 2784 9B050000 		_BRAN	TNAM1
 4436      58270000 
 4437              	TNAM2:	
 4438 278c F5050000 		_ADR	RFROM
 4439 2790 61060000 		_ADR	DROP			//  0|na --
 4440 2794 1B040000 		_UNNEST			// 0
 4441              	
 4442              	//    .ID	 ( na -- )
 4443              	// 	Display the name at address.
 4444              	
 4445 2798 40270000 		.word	_TNAME
 4446 279c 03       	_DOTID:	.byte  3
 4447 279d 2E4944   		.ascii ".ID"
 4448              		.p2align 2 	
 4449              	DOTID:
 4450 27a0 FDF734FE 		_NEST
 4451 27a4 45080000 		_ADR	QDUP			// if zero no name
 4452 27a8 89050000 		_QBRAN	DOTI1
 4452      C8270000 
 4453 27b0 CD090000 		_ADR	COUNT
 4454 27b4 4D050000 		_DOLIT	0x1F
 4454      1F000000 
 4455 27bc B5060000 		_ADR	ANDD			// mask lexicon bits
 4456 27c0 5D130000 		_ADR	TYPEE
 4457 27c4 1B040000 		_UNNEST			// display name string
 4458              	DOTI1:
 4459 27c8 F9130000 		_DOTQP	9," {noName}"
 4459      09207B6E 
 4459      6F4E616D 
 4459      657D00BF 
 4460 27d8 1B040000 		_UNNEST
 4461              	
 4462              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 4463              	.if WANT_SEE 
 4464              	//    SEE	 ( -- //  string> )
 4465              	// 	A simple decompiler.
 4466              	
 4467              		.word	_DOTID
 4468              	_SEE:	.byte  3
 4469              		.ascii "SEE"
ARM GAS  stm32eforth-fl.s 			page 87


 4470              		.p2align 2 	
 4471              	SEE:
 4472              		_NEST
 4473              		_ADR	TICK	//  ca --, starting address
 4474              		_ADR	CR	
 4475              		_DOLIT	20
 4476              		_ADR	TOR
 4477              	SEE1:
 4478              		_ADR	CELLP			//  a
 4479              		_ADR	DUPP			//  a a
 4480              		_ADR	DECOMP		//  a
 4481              		_DONXT	SEE1
 4482              		_ADR	DROP
 4483              		_UNNEST
 4484              	
 4485              	// 	DECOMPILE ( a -- )
 4486              	// 	Convert code in a.  Display name of command or as data.
 4487              	
 4488              		.word	_SEE
 4489              	_DECOM:	.byte  9
 4490              		.ascii "DECOMPILE"
 4491              		.p2align 2 
 4492              		
 4493              	DECOMP:	
 4494              		_NEST
 4495              		_ADR	DUPP			//  a a
 4496              	// 	_ADR	TOR			//  a
 4497              		_ADR	AT			//  a code
 4498              		_ADR	DUPP			//  a code code
 4499              		_DOLIT	0xF800D000 //0xF800F800
 4500              		_ADR	ANDD
 4501              		_DOLIT	0xF000D000 //0xF800F000
 4502              		_ADR	EQUAL			//  a code ?
 4503              		_ADR	INVER 
 4504              		_QBRAN	DECOM2	//  not a command
 4505              		//  a valid_code --, extract address and display name
 4506              		MOVW	R0,#0xFFE
 4507              		MOV	R4,R5
 4508              		LSL	R5,R5,#21		//  get bits 22-12
 4509              		ASR	R5,R5,#9		//  with sign extension
 4510              		LSR	R4,R4,#15		//  get bits 11-1
 4511              		AND	R4,R4,R0		//  retain only bits 11-1
 4512              		ORR	R5,R5,R4		//  get bits 22-1
 4513              		NOP
 4514              		_ADR	OVER			//  a offset a
 4515              		_ADR	PLUS			//  a target-4
 4516              		_ADR	CELLP			//  a target
 4517              		_ADR	TNAME			//  a na/0 --, is it a name?
 4518              		_ADR	QDUP			//  name address or zero
 4519              		_QBRAN	DECOM1
 4520              		_ADR	SPACE			//  a na
 4521              		_ADR	DOTID			//  a --, display name
 4522              	// 	_ADR	RFROM			//  a
 4523              		_ADR	DROP
 4524              		_UNNEST
 4525              	DECOM1:	// _ADR	RFROM		//  a
 4526              		_ADR	AT			//  data
ARM GAS  stm32eforth-fl.s 			page 88


 4527              		_ADR	UDOT			//  display data
 4528              		_UNNEST
 4529              	DECOM2:
 4530              		_ADR	UDOT
 4531              	// 	_ADR	RFROM
 4532              		_ADR	DROP
 4533              		_UNNEST
 4534              	
 4535              	//    WORDS	( -- )
 4536              	// 	Display the names in the context vocabulary.
 4537              	
 4538              		.word	_DECOM
 4539              	.else 
 4540 27dc 9C270000 		.word _DOTID 
 4541              	.endif 
 4542 27e0 05       	_WORDS:	.byte  5
 4543 27e1 574F5244 		.ascii "WORDS"
 4543      53
 4544 27e6 00BF     		.p2align 2 	
 4545              	WORDS:
 4546 27e8 FDF710FE 		_NEST
 4547 27ec 91130000 		_ADR	CR
 4548 27f0 FD0A0000 		_ADR	CNTXT
 4549 27f4 C9050000 		_ADR	AT			// only in context
 4550              	WORS1:
 4551 27f8 45080000 		_ADR	QDUP			// ?at end of list
 4552 27fc 89050000 		_QBRAN	WORS2
 4552      20280000 
 4553 2804 71060000 		_ADR	DUPP
 4554 2808 09130000 		_ADR	SPACE
 4555 280c A1270000 		_ADR	DOTID			// display a name
 4556 2810 E1070000 		_ADR	CELLM
 4557 2814 C9050000 		_ADR	AT
 4558 2818 9B050000 		_BRAN	WORS1
 4558      F8270000 
 4559              	WORS2:
 4560 2820 1B040000 		_UNNEST
 4561              	
 4562              	// **************************************************************************
 4563              	//  cold start
 4564              	
 4565              	//    VER	 ( -- n )
 4566              	// 	Return the version number of this implementation.
 4567              	
 4568              	// 	.word	_WORDS
 4569              	// _VERSN	.byte  3
 4570              	// 	.ascii "VER"
 4571              	// 	.p2align 2 	
 4572              	VERSN:
 4573 2824 FDF7F2FD 		_NEST
 4574 2828 4D050000 		_DOLIT	VER*256+EXT
 4574      00010000 
 4575 2830 1B040000 		_UNNEST
 4576              	
 4577              	//    hi	  ( -- )
 4578              	// 	Display the sign-on message of eForth.
 4579              	
ARM GAS  stm32eforth-fl.s 			page 89


 4580 2834 E0270000 		.word	_WORDS
 4581 2838 02       	_HI:	.byte  2
 4582 2839 4849     		.ascii "HI"
 4583 283b 00       		.p2align 2 	
 4584              	HI:
 4585 283c FDF7E6FD 		_NEST
 4586 2840 91130000 		_ADR	CR	// initialize I/O
 4587 2844 F9130000 		_DOTQP	23, "blue pill stm32eForth v" 
 4587      17626C75 
 4587      65207069 
 4587      6C6C2073 
 4587      746D3332 
 4588 2860 750A0000 		_ADR	BASE
 4589 2864 C9050000 		_ADR	AT
 4590 2868 E5100000 		_ADR	HEX	// save radix
 4591 286c 25280000 		_ADR	VERSN
 4592 2870 D50F0000 		_ADR	BDIGS
 4593 2874 21100000 		_ADR	DIG
 4594 2878 21100000 		_ADR	DIG
 4595 287c 4D050000 		_DOLIT	'.'
 4595      2E000000 
 4596 2884 F50F0000 		_ADR	HOLD
 4597 2888 41100000 		_ADR	DIGS
 4598 288c 95100000 		_ADR	EDIGS
 4599 2890 5D130000 		_ADR	TYPEE	// format version number
 4600 2894 750A0000 		_ADR	BASE
 4601 2898 B5050000 		_ADR	STORE
 4602 289c 91130000 		_ADR	CR
 4603 28a0 1B040000 		_UNNEST			// restore radix
 4604              	
 4605              	//    COLD	( -- )
 4606              	// 	The high level cold start sequence.
 4607              	
 4608 28a4 38280000 		.word	_HI
 4609 28a8 04       	LASTN:	.byte  4
 4610 28a9 434F4C44 		.ascii "COLD"
 4611 28ad 000000   		.p2align 2,0	
 4612              	COLD:
 4613              	//  Initiate Forth registers
 4614 28b0 4FF00003 		mov r3,#UPP&0xffff
 4615 28b4 C2F20003 		movt r3,#UPP>>16 
 4616 28b8 03F59F42 		add R2,R3,#RPP&0xffff	// Forth return stack
 4617 28bc 03F59D41 		add R1,R3,#SPP&0xffff // Forth data stack
 4618 28c0 85EA0505 		eor R5,R5,R5			//  tos=0
 4619 28c4 1248     		ldr R0,=COLD1 
 4620 28c6 FDF7A5BD 		_NEXT
 4621              	COLD1:
 4622 28ca 4D050000 		_DOLIT  0 
 4622      00000000 
 4623 28d2 01000000 		_ADR ULED // turn off user LED 
 4624 28d6 4D050000 		_DOLIT	UZERO
 4624      00020000 
 4625 28de 4D050000 		_DOLIT	UPP
 4625      00000020 
 4626 28e6 4D050000 		_DOLIT	ULAST-UZERO
 4626      58000000 
 4627 28ee A50E0000 		_ADR	MOVE 			// initialize user area
ARM GAS  stm32eforth-fl.s 			page 90


 4628 28f2 B91B0000 		_ADR	PRESE			// initialize stack and TIB
 4629              	//	_DOLIT 0		// check if user image saved in slot 0 
 4630              	//	_ADR IMGQ 
 4631              	//	_QBRAN 1f
 4632              	//	_DOLIT 0
 4633              	//	_ADR	LOAD_IMG 
 4634              	1:
 4635              	//_DOLIT 1
 4636              	//_ADR TRACE 
 4637 28f6 610A0000 		_ADR	TBOOT
 4638 28fa 550E0000 		_ADR	ATEXE			// application boot
 4639 28fe 91240000 		_ADR	OVERT
 4640 2902 9B050000 		_BRAN	QUIT			// start interpretation
 4640      D81B0000 
 4641              	COLD2:
 4642 290a 00BF     		.p2align 2 	
 4643              	CTOP:
 4644 290c FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4645              	
 4646              		.section .text.user, "a", %progbits 
 4647              		.p2align 10 
 4648              	USER_SPACE: // save user image here.  
 4649 0000 FFFFFFFF 		.word 0XFFFFFFFF
 4650              	
 4651              	  .end 
ARM GAS  stm32eforth-fl.s 			page 91


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  stm32eforth-fl.s 			page 92


board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
board/blue-pill/stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
board/blue-pill/stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
board/blue-pill/stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
board/blue-pill/stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
board/blue-pill/stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
board/blue-pill/stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
board/blue-pill/stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
board/blue-pill/stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
board/blue-pill/stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
board/blue-pill/stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
board/blue-pill/stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
board/blue-pill/stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
board/blue-pill/stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
board/blue-pill/stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
board/blue-pill/stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
board/blue-pill/stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
    stm32eforth-fl.s:89     *ABS*:0000000040011000 LED_GPIO
    stm32eforth-fl.s:90     *ABS*:000000000000000d LED_PIN
    stm32eforth-fl.s:91     *ABS*:0000000040013800 UART
    stm32eforth-fl.s:94     *ABS*:0000000020004e80 SPP
    stm32eforth-fl.s:95     *ABS*:0000000020004e80 TIBB
    stm32eforth-fl.s:96     *ABS*:0000000020004f80 RPP
    stm32eforth-fl.s:97     *ABS*:0000000020000000 UPP
    stm32eforth-fl.s:98     *ABS*:0000000020000100 DTOP
    stm32eforth-fl.s:99     *ABS*:0000000020004e00 DEND
    stm32eforth-fl.s:100    *ABS*:0000000020000000 RAMOFFSET
    stm32eforth-fl.s:101    *ABS*:0000000020005000 RAMEND
    stm32eforth-fl.s:106    *ABS*:0000000000000004 FTRACE_OFS
    stm32eforth-fl.s:107    *ABS*:0000000000000008 SEED_OFS
    stm32eforth-fl.s:108    *ABS*:000000000000000c TICKS_OFS
    stm32eforth-fl.s:109    *ABS*:0000000000000010 TIMER_OFS
    stm32eforth-fl.s:110    *ABS*:0000000000000014 TORAM_OFS
    stm32eforth-fl.s:111    *ABS*:0000000000000018 IMG_SIGN_OFS
    stm32eforth-fl.s:112    *ABS*:000000000000001c BOOT_OFS
    stm32eforth-fl.s:113    *ABS*:0000000000000020 BASE_OFS
    stm32eforth-fl.s:114    *ABS*:0000000000000024 TMP_OFS
    stm32eforth-fl.s:115    *ABS*:0000000000000028 SPAN_OFS
    stm32eforth-fl.s:116    *ABS*:000000000000002c TOIN_OFS
    stm32eforth-fl.s:117    *ABS*:0000000000000030 NTIB_OFS
    stm32eforth-fl.s:118    *ABS*:0000000000000034 TIB_OFS
    stm32eforth-fl.s:119    *ABS*:0000000000000038 EVAL_OFS
    stm32eforth-fl.s:120    *ABS*:000000000000003c HLD_OFS
    stm32eforth-fl.s:121    *ABS*:0000000000000040 CTXT_OFS
    stm32eforth-fl.s:122    *ABS*:0000000000000044 FORTH_CTOP_OFS
    stm32eforth-fl.s:123    *ABS*:0000000000000048 RAM_CTOP_OFS
    stm32eforth-fl.s:124    *ABS*:000000000000004c LASTN_OFS
ARM GAS  stm32eforth-fl.s 			page 93


    stm32eforth-fl.s:125    *ABS*:0000000000000050 VARS_END_OFS
    stm32eforth-fl.s:210    .isr_vector:0000000000000000 isr_vectors
    stm32eforth-fl.s:378    .text:0000000000000060 reset_handler
    stm32eforth-fl.s:325    .text:0000000000000000 default_handler
    stm32eforth-fl.s:357    .text:0000000000000044 systick_handler
    stm32eforth-fl.s:292    .isr_vector:0000000000000130 $d
    stm32eforth-fl.s:294    .isr_vector:0000000000000200 UZERO
    stm32eforth-fl.s:4584   .text:000000000000283c HI
                            *ABS*:000000000000000a BASEE
    stm32eforth-fl.s:3246   .text:0000000000001a8c INTER
    stm32eforth-fl.s:4609   .text:00000000000028a8 LASTN
    stm32eforth-fl.s:4643   .text:000000000000290c CTOP
    stm32eforth-fl.s:316    .isr_vector:0000000000000258 ULAST
    stm32eforth-fl.s:323    .text:0000000000000000 $t
    stm32eforth-fl.s:335    .text:0000000000000018 exception_msg
    stm32eforth-fl.s:695    .text:0000000000000528 EMIT
    stm32eforth-fl.s:340    .text:0000000000000030 REBOOT
    stm32eforth-fl.s:336    .text:0000000000000018 $d
    stm32eforth-fl.s:348    .text:0000000000000040 scb_adr
    stm32eforth-fl.s:349    .text:0000000000000040 $d
    stm32eforth-fl.s:355    .text:0000000000000044 $t
    stm32eforth-fl.s:367    .text:000000000000005e systick_exit
    stm32eforth-fl.s:485    .text:0000000000000140 remap
    stm32eforth-fl.s:386    .text:0000000000000070 init_devices
    stm32eforth-fl.s:3368   .text:0000000000001bf8 unlock
    stm32eforth-fl.s:4612   .text:00000000000028b0 COLD
    stm32eforth-fl.s:401    .text:000000000000008e wait_hserdy
    stm32eforth-fl.s:421    .text:00000000000000a8 wait_pllrdy
    stm32eforth-fl.s:434    .text:00000000000000c8 wait_sws
    stm32eforth-fl.s:504    .text:0000000000000170 remap_dest
    stm32eforth-fl.s:502    .text:000000000000016c remap_src
    stm32eforth-fl.s:503    .text:000000000000016c $d
    stm32eforth-fl.s:510    *ABS*:0000000000000001 VER
    stm32eforth-fl.s:511    *ABS*:0000000000000000 EXT
    stm32eforth-fl.s:515    *ABS*:0000000000000040 COMPO
    stm32eforth-fl.s:516    *ABS*:0000000000000080 IMEDD
    stm32eforth-fl.s:517    *ABS*:00000000ffffff1f MASKK
    stm32eforth-fl.s:519    *ABS*:0000000000000004 CELLL
    stm32eforth-fl.s:521    *ABS*:0000000000000008 VOCSS
    stm32eforth-fl.s:523    *ABS*:0000000000000008 BKSPP
    stm32eforth-fl.s:524    *ABS*:000000000000000a LF
    stm32eforth-fl.s:525    *ABS*:000000000000000d CRR
    stm32eforth-fl.s:526    *ABS*:000000000000001b ERR
    stm32eforth-fl.s:527    *ABS*:0000000000000027 TIC
    stm32eforth-fl.s:548    .text:0000000000000174 $t
    stm32eforth-fl.s:560    .text:0000000000000400 TPUSH
    stm32eforth-fl.s:575    .text:0000000000000414 INEXT
    stm32eforth-fl.s:565    .text:0000000000000406 TPOP
    stm32eforth-fl.s:571    .text:000000000000040c NEST
    stm32eforth-fl.s:587    .text:000000000000041a UNNEST
    stm32eforth-fl.s:597    .text:0000000000000420 $d
    stm32eforth-fl.s:598    .text:0000000000000424 _RAND
    stm32eforth-fl.s:601    .text:000000000000042c RAND
    stm32eforth-fl.s:603    .text:0000000000000430 $d
    stm32eforth-fl.s:1561   .text:0000000000000a10 SEED
    stm32eforth-fl.s:828    .text:00000000000005c8 AT
    stm32eforth-fl.s:945    .text:0000000000000670 DUPP
ARM GAS  stm32eforth-fl.s 			page 94


    stm32eforth-fl.s:729    .text:000000000000054c DOLIT
    stm32eforth-fl.s:1057   .text:0000000000000724 LSHIFT
    stm32eforth-fl.s:1018   .text:00000000000006dc XORR
    stm32eforth-fl.s:1045   .text:000000000000070c RSHIFT
    stm32eforth-fl.s:815    .text:00000000000005b4 STORE
    stm32eforth-fl.s:1345   .text:00000000000008d4 ABSS
    stm32eforth-fl.s:956    .text:0000000000000680 SWAP
    stm32eforth-fl.s:1922   .text:0000000000000cd4 MODD
    stm32eforth-fl.s:629    .text:0000000000000494 _PAUSE
    stm32eforth-fl.s:631    .text:000000000000049a $t
    stm32eforth-fl.s:632    .text:000000000000049c PAUSE
    stm32eforth-fl.s:634    .text:00000000000004a0 $d
    stm32eforth-fl.s:1583   .text:0000000000000a38 TIMER
    stm32eforth-fl.s:636    .text:00000000000004a8 PAUSE_LOOP
    stm32eforth-fl.s:777    .text:0000000000000588 QBRAN
    stm32eforth-fl.s:641    .text:00000000000004c0 PAUSE_EXIT
    stm32eforth-fl.s:794    .text:000000000000059a BRAN
    stm32eforth-fl.s:647    .text:00000000000004c8 _ULED
    stm32eforth-fl.s:651    .text:00000000000004d0 ULED
    stm32eforth-fl.s:660    .text:00000000000004e8 ULED_OFF
    stm32eforth-fl.s:666    .text:00000000000004ec $d
    stm32eforth-fl.s:667    .text:00000000000004f0 _QRX
    stm32eforth-fl.s:670    .text:00000000000004f8 QKEY
    stm32eforth-fl.s:671    .text:00000000000004f8 QRX
    stm32eforth-fl.s:682    .text:0000000000000518 QRX1
    stm32eforth-fl.s:690    .text:000000000000051e $d
    stm32eforth-fl.s:691    .text:0000000000000522 _TXSTO
    stm32eforth-fl.s:694    .text:0000000000000528 TXSTO
    stm32eforth-fl.s:696    .text:0000000000000528 TECHO
    stm32eforth-fl.s:699    .text:0000000000000530 TX1
    stm32eforth-fl.s:714    .text:0000000000000540 $d
    stm32eforth-fl.s:715    .text:0000000000000544 _NOP
    stm32eforth-fl.s:717    .text:0000000000000548 $t
    stm32eforth-fl.s:718    .text:0000000000000548 NOP
    stm32eforth-fl.s:737    .text:0000000000000556 $d
    stm32eforth-fl.s:738    .text:000000000000055a _EXECU
    stm32eforth-fl.s:740    .text:0000000000000562 $t
    stm32eforth-fl.s:741    .text:0000000000000564 EXECU
    stm32eforth-fl.s:756    .text:0000000000000570 DONXT
    stm32eforth-fl.s:763    .text:000000000000057e NEXT1
    stm32eforth-fl.s:783    .text:0000000000000594 QBRAN1
    stm32eforth-fl.s:801    .text:000000000000059e $d
    stm32eforth-fl.s:802    .text:00000000000005a2 _EXIT
    stm32eforth-fl.s:805    .text:00000000000005a8 EXIT
    stm32eforth-fl.s:806    .text:00000000000005a8 $d
    stm32eforth-fl.s:812    .text:00000000000005b0 _STORE
    stm32eforth-fl.s:814    .text:00000000000005b2 $t
    stm32eforth-fl.s:824    .text:00000000000005c0 $d
    stm32eforth-fl.s:825    .text:00000000000005c4 _AT
    stm32eforth-fl.s:827    .text:00000000000005c6 $t
    stm32eforth-fl.s:835    .text:00000000000005cc $d
    stm32eforth-fl.s:836    .text:00000000000005d0 _CSTOR
    stm32eforth-fl.s:839    .text:00000000000005d4 CSTOR
    stm32eforth-fl.s:848    .text:00000000000005e0 $d
    stm32eforth-fl.s:849    .text:00000000000005e4 _CAT
    stm32eforth-fl.s:852    .text:00000000000005e8 CAT
    stm32eforth-fl.s:859    .text:00000000000005ec $d
ARM GAS  stm32eforth-fl.s 			page 95


    stm32eforth-fl.s:860    .text:00000000000005f0 _RFROM
    stm32eforth-fl.s:863    .text:00000000000005f4 RFROM
    stm32eforth-fl.s:871    .text:00000000000005fe $d
    stm32eforth-fl.s:872    .text:0000000000000602 _RAT
    stm32eforth-fl.s:875    .text:0000000000000608 RAT
    stm32eforth-fl.s:883    .text:0000000000000610 $d
    stm32eforth-fl.s:884    .text:0000000000000614 _TOR
    stm32eforth-fl.s:887    .text:0000000000000618 TOR
    stm32eforth-fl.s:894    .text:0000000000000622 $d
    stm32eforth-fl.s:895    .text:0000000000000626 _RPSTOR
    stm32eforth-fl.s:897    .text:000000000000062a $t
    stm32eforth-fl.s:898    .text:000000000000062c RPSTOR
    stm32eforth-fl.s:906    .text:0000000000000634 $d
    stm32eforth-fl.s:907    .text:0000000000000638 _SPSTOR
    stm32eforth-fl.s:909    .text:000000000000063c $t
    stm32eforth-fl.s:910    .text:000000000000063c SPSTOR
    stm32eforth-fl.s:918    .text:0000000000000644 $d
    stm32eforth-fl.s:919    .text:0000000000000648 _SPAT
    stm32eforth-fl.s:921    .text:000000000000064c $t
    stm32eforth-fl.s:922    .text:000000000000064c SPAT
    stm32eforth-fl.s:930    .text:0000000000000654 $d
    stm32eforth-fl.s:931    .text:0000000000000658 _DROP
    stm32eforth-fl.s:934    .text:0000000000000660 DROP
    stm32eforth-fl.s:941    .text:0000000000000666 $d
    stm32eforth-fl.s:942    .text:000000000000066a _DUPP
    stm32eforth-fl.s:944    .text:000000000000066e $t
    stm32eforth-fl.s:952    .text:0000000000000676 $d
    stm32eforth-fl.s:953    .text:000000000000067a _SWAP
    stm32eforth-fl.s:965    .text:0000000000000688 $d
    stm32eforth-fl.s:966    .text:000000000000068c _OVER
    stm32eforth-fl.s:969    .text:0000000000000694 OVER
    stm32eforth-fl.s:977    .text:000000000000069c $d
    stm32eforth-fl.s:978    .text:00000000000006a0 _ZLESS
    stm32eforth-fl.s:981    .text:00000000000006a4 ZLESS
    stm32eforth-fl.s:990    .text:00000000000006aa $d
    stm32eforth-fl.s:991    .text:00000000000006ae _ANDD
    stm32eforth-fl.s:993    .text:00000000000006b2 $t
    stm32eforth-fl.s:994    .text:00000000000006b4 ANDD
    stm32eforth-fl.s:1002   .text:00000000000006be $d
    stm32eforth-fl.s:1003   .text:00000000000006c2 _ORR
    stm32eforth-fl.s:1006   .text:00000000000006c8 ORR
    stm32eforth-fl.s:1014   .text:00000000000006d2 $d
    stm32eforth-fl.s:1015   .text:00000000000006d6 _XORR
    stm32eforth-fl.s:1017   .text:00000000000006da $t
    stm32eforth-fl.s:1026   .text:00000000000006e6 $d
    stm32eforth-fl.s:1027   .text:00000000000006ea _UPLUS
    stm32eforth-fl.s:1029   .text:00000000000006ee $t
    stm32eforth-fl.s:1030   .text:00000000000006f0 UPLUS
    stm32eforth-fl.s:1041   .text:0000000000000700 $d
    stm32eforth-fl.s:1042   .text:0000000000000704 _RSHIFT
    stm32eforth-fl.s:1053   .text:0000000000000716 $d
    stm32eforth-fl.s:1054   .text:000000000000071a _LSHIFT
    stm32eforth-fl.s:1065   .text:000000000000072e $d
    stm32eforth-fl.s:1066   .text:0000000000000732 _PLUS
    stm32eforth-fl.s:1068   .text:0000000000000734 $t
    stm32eforth-fl.s:1069   .text:0000000000000734 PLUS
    stm32eforth-fl.s:1077   .text:000000000000073c $d
ARM GAS  stm32eforth-fl.s 			page 96


    stm32eforth-fl.s:1078   .text:0000000000000740 _SUBB
    stm32eforth-fl.s:1080   .text:0000000000000742 $t
    stm32eforth-fl.s:1081   .text:0000000000000744 SUBB
    stm32eforth-fl.s:1089   .text:000000000000074e $d
    stm32eforth-fl.s:1090   .text:0000000000000752 _STAR
    stm32eforth-fl.s:1092   .text:0000000000000754 $t
    stm32eforth-fl.s:1093   .text:0000000000000754 STAR
    stm32eforth-fl.s:1101   .text:000000000000075e $d
    stm32eforth-fl.s:1102   .text:0000000000000762 _UMSTA
    stm32eforth-fl.s:1104   .text:0000000000000766 $t
    stm32eforth-fl.s:1105   .text:0000000000000768 UMSTA
    stm32eforth-fl.s:1115   .text:0000000000000774 $d
    stm32eforth-fl.s:1116   .text:0000000000000778 _MSTAR
    stm32eforth-fl.s:1119   .text:000000000000077c MSTAR
    stm32eforth-fl.s:1129   .text:0000000000000788 $d
    stm32eforth-fl.s:1130   .text:000000000000078c _ONEP
    stm32eforth-fl.s:1133   .text:0000000000000790 ONEP
    stm32eforth-fl.s:1140   .text:0000000000000796 $d
    stm32eforth-fl.s:1141   .text:000000000000079a _ONEM
    stm32eforth-fl.s:1144   .text:00000000000007a0 ONEM
    stm32eforth-fl.s:1151   .text:00000000000007a6 $d
    stm32eforth-fl.s:1152   .text:00000000000007aa _TWOP
    stm32eforth-fl.s:1155   .text:00000000000007b0 TWOP
    stm32eforth-fl.s:1162   .text:00000000000007b6 $d
    stm32eforth-fl.s:1163   .text:00000000000007ba _TWOM
    stm32eforth-fl.s:1166   .text:00000000000007c0 TWOM
    stm32eforth-fl.s:1173   .text:00000000000007c6 $d
    stm32eforth-fl.s:1174   .text:00000000000007ca _CELLP
    stm32eforth-fl.s:1176   .text:00000000000007d0 $t
    stm32eforth-fl.s:1177   .text:00000000000007d0 CELLP
    stm32eforth-fl.s:1184   .text:00000000000007d6 $d
    stm32eforth-fl.s:1185   .text:00000000000007da _CELLM
    stm32eforth-fl.s:1187   .text:00000000000007e0 $t
    stm32eforth-fl.s:1188   .text:00000000000007e0 CELLM
    stm32eforth-fl.s:1195   .text:00000000000007e6 $d
    stm32eforth-fl.s:1196   .text:00000000000007ea _BLANK
    stm32eforth-fl.s:1199   .text:00000000000007f0 BLANK
    stm32eforth-fl.s:1207   .text:00000000000007fa $d
    stm32eforth-fl.s:1208   .text:00000000000007fe _CELLS
    stm32eforth-fl.s:1210   .text:0000000000000804 $t
    stm32eforth-fl.s:1211   .text:0000000000000804 CELLS
    stm32eforth-fl.s:1218   .text:000000000000080a $d
    stm32eforth-fl.s:1219   .text:000000000000080e _CELLSL
    stm32eforth-fl.s:1221   .text:0000000000000814 $t
    stm32eforth-fl.s:1222   .text:0000000000000814 CELLSL
    stm32eforth-fl.s:1229   .text:000000000000081a $d
    stm32eforth-fl.s:1230   .text:000000000000081e _TWOST
    stm32eforth-fl.s:1233   .text:0000000000000824 TWOST
    stm32eforth-fl.s:1240   .text:000000000000082a $d
    stm32eforth-fl.s:1241   .text:000000000000082e _TWOSL
    stm32eforth-fl.s:1244   .text:0000000000000834 TWOSL
    stm32eforth-fl.s:1251   .text:000000000000083a $d
    stm32eforth-fl.s:1252   .text:000000000000083e _QDUP
    stm32eforth-fl.s:1255   .text:0000000000000844 QDUP
    stm32eforth-fl.s:1264   .text:000000000000084e $d
    stm32eforth-fl.s:1265   .text:0000000000000852 _ROT
    stm32eforth-fl.s:1267   .text:0000000000000856 $t
ARM GAS  stm32eforth-fl.s 			page 97


    stm32eforth-fl.s:1268   .text:0000000000000858 ROT
    stm32eforth-fl.s:1278   .text:0000000000000862 $d
    stm32eforth-fl.s:1279   .text:0000000000000866 _DDROP
    stm32eforth-fl.s:1281   .text:000000000000086c $t
    stm32eforth-fl.s:1282   .text:000000000000086c DDROP
    stm32eforth-fl.s:1290   .text:0000000000000876 $d
    stm32eforth-fl.s:1291   .text:000000000000087a _DDUP
    stm32eforth-fl.s:1294   .text:0000000000000880 DDUP
    stm32eforth-fl.s:1303   .text:000000000000088c $d
    stm32eforth-fl.s:1304   .text:0000000000000890 _DPLUS
    stm32eforth-fl.s:1307   .text:0000000000000894 DPLUS
    stm32eforth-fl.s:1319   .text:00000000000008a8 $d
    stm32eforth-fl.s:1320   .text:00000000000008ac _INVER
    stm32eforth-fl.s:1322   .text:00000000000008b0 $t
    stm32eforth-fl.s:1323   .text:00000000000008b0 INVER
    stm32eforth-fl.s:1330   .text:00000000000008b6 $d
    stm32eforth-fl.s:1331   .text:00000000000008ba _NEGAT
    stm32eforth-fl.s:1334   .text:00000000000008c4 NEGAT
    stm32eforth-fl.s:1341   .text:00000000000008ca $d
    stm32eforth-fl.s:1342   .text:00000000000008ce _ABSS
    stm32eforth-fl.s:1344   .text:00000000000008d2 $t
    stm32eforth-fl.s:1354   .text:00000000000008de $d
    stm32eforth-fl.s:1355   .text:00000000000008e2 _ZEQUAL
    stm32eforth-fl.s:1358   .text:00000000000008e8 ZEQUAL
    stm32eforth-fl.s:1368   .text:00000000000008f6 $d
    stm32eforth-fl.s:1369   .text:00000000000008fa _EQUAL
    stm32eforth-fl.s:1371   .text:00000000000008fc $t
    stm32eforth-fl.s:1372   .text:00000000000008fc EQUAL
    stm32eforth-fl.s:1383   .text:000000000000090c $d
    stm32eforth-fl.s:1384   .text:0000000000000910 _ULESS
    stm32eforth-fl.s:1387   .text:0000000000000914 ULESS
    stm32eforth-fl.s:1398   .text:0000000000000924 $d
    stm32eforth-fl.s:1399   .text:0000000000000928 _LESS
    stm32eforth-fl.s:1401   .text:000000000000092a $t
    stm32eforth-fl.s:1402   .text:000000000000092c LESS
    stm32eforth-fl.s:1413   .text:000000000000093c $d
    stm32eforth-fl.s:1414   .text:0000000000000940 _GREAT
    stm32eforth-fl.s:1416   .text:0000000000000942 $t
    stm32eforth-fl.s:1417   .text:0000000000000944 GREAT
    stm32eforth-fl.s:1428   .text:0000000000000954 $d
    stm32eforth-fl.s:1429   .text:0000000000000958 _MAX
    stm32eforth-fl.s:1431   .text:000000000000095c $t
    stm32eforth-fl.s:1432   .text:000000000000095c MAX
    stm32eforth-fl.s:1442   .text:0000000000000968 $d
    stm32eforth-fl.s:1443   .text:000000000000096c _MIN
    stm32eforth-fl.s:1445   .text:0000000000000970 $t
    stm32eforth-fl.s:1446   .text:0000000000000970 MIN
    stm32eforth-fl.s:1456   .text:000000000000097c $d
    stm32eforth-fl.s:1457   .text:0000000000000980 _PSTOR
    stm32eforth-fl.s:1460   .text:0000000000000984 PSTOR
    stm32eforth-fl.s:1471   .text:0000000000000994 $d
    stm32eforth-fl.s:1472   .text:0000000000000998 _DSTOR
    stm32eforth-fl.s:1475   .text:000000000000099c DSTOR
    stm32eforth-fl.s:1486   .text:00000000000009b0 $d
    stm32eforth-fl.s:1487   .text:00000000000009b4 _DAT
    stm32eforth-fl.s:1490   .text:00000000000009b8 DAT
    stm32eforth-fl.s:1499   .text:00000000000009c2 $d
ARM GAS  stm32eforth-fl.s 			page 98


    stm32eforth-fl.s:1500   .text:00000000000009c6 _COUNT
    stm32eforth-fl.s:1502   .text:00000000000009cc $t
    stm32eforth-fl.s:1503   .text:00000000000009cc COUNT
    stm32eforth-fl.s:1512   .text:00000000000009d8 $d
    stm32eforth-fl.s:1513   .text:00000000000009dc _DNEGA
    stm32eforth-fl.s:1515   .text:00000000000009e4 $t
    stm32eforth-fl.s:1516   .text:00000000000009e4 DNEGA
    stm32eforth-fl.s:1534   .text:00000000000009f4 DOVAR
    stm32eforth-fl.s:1546   .text:00000000000009fe DOCON
    stm32eforth-fl.s:1557   .text:0000000000000a06 $d
    stm32eforth-fl.s:1558   .text:0000000000000a0a _SEED
    stm32eforth-fl.s:1568   .text:0000000000000a1a $d
    stm32eforth-fl.s:1569   .text:0000000000000a1e _MSEC
    stm32eforth-fl.s:1572   .text:0000000000000a24 MSEC
    stm32eforth-fl.s:1579   .text:0000000000000a2e $d
    stm32eforth-fl.s:1580   .text:0000000000000a32 _TIMER
    stm32eforth-fl.s:1582   .text:0000000000000a38 $t
    stm32eforth-fl.s:1591   .text:0000000000000a42 $d
    stm32eforth-fl.s:1592   .text:0000000000000a46 _TORAM
    stm32eforth-fl.s:1595   .text:0000000000000a4c TORAM
    stm32eforth-fl.s:1603   .text:0000000000000a56 $d
    stm32eforth-fl.s:1604   .text:0000000000000a5a _TBOOT
    stm32eforth-fl.s:1606   .text:0000000000000a60 $t
    stm32eforth-fl.s:1607   .text:0000000000000a60 TBOOT
    stm32eforth-fl.s:1615   .text:0000000000000a6a $d
    stm32eforth-fl.s:1616   .text:0000000000000a6e _BASE
    stm32eforth-fl.s:1619   .text:0000000000000a74 BASE
    stm32eforth-fl.s:1631   .text:0000000000000a7e TEMP
    stm32eforth-fl.s:1639   .text:0000000000000a88 $d
    stm32eforth-fl.s:1640   .text:0000000000000a8c _SPAN
    stm32eforth-fl.s:1643   .text:0000000000000a94 SPAN
    stm32eforth-fl.s:1651   .text:0000000000000a9e $d
    stm32eforth-fl.s:1652   .text:0000000000000aa2 _INN
    stm32eforth-fl.s:1654   .text:0000000000000aa6 $t
    stm32eforth-fl.s:1655   .text:0000000000000aa8 INN
    stm32eforth-fl.s:1663   .text:0000000000000ab2 $d
    stm32eforth-fl.s:1664   .text:0000000000000ab6 _NTIB
    stm32eforth-fl.s:1667   .text:0000000000000abc NTIB
    stm32eforth-fl.s:1675   .text:0000000000000ac6 $d
    stm32eforth-fl.s:1676   .text:0000000000000aca _TEVAL
    stm32eforth-fl.s:1678   .text:0000000000000ad0 $t
    stm32eforth-fl.s:1679   .text:0000000000000ad0 TEVAL
    stm32eforth-fl.s:1687   .text:0000000000000ada $d
    stm32eforth-fl.s:1688   .text:0000000000000ade _HLD
    stm32eforth-fl.s:1690   .text:0000000000000ae2 $t
    stm32eforth-fl.s:1691   .text:0000000000000ae4 HLD
    stm32eforth-fl.s:1699   .text:0000000000000aee $d
    stm32eforth-fl.s:1700   .text:0000000000000af2 _CNTXT
    stm32eforth-fl.s:1702   .text:0000000000000afa $t
    stm32eforth-fl.s:1703   .text:0000000000000afc CNTXT
    stm32eforth-fl.s:1704   .text:0000000000000afc CRRNT
    stm32eforth-fl.s:1712   .text:0000000000000b06 $d
    stm32eforth-fl.s:1713   .text:0000000000000b0a _CP
    stm32eforth-fl.s:1716   .text:0000000000000b10 CPP
    stm32eforth-fl.s:1723   .text:0000000000000b1a $d
    stm32eforth-fl.s:1724   .text:0000000000000b1e _FCP
    stm32eforth-fl.s:1726   .text:0000000000000b22 $t
ARM GAS  stm32eforth-fl.s 			page 99


    stm32eforth-fl.s:1727   .text:0000000000000b24 FCP
    stm32eforth-fl.s:1735   .text:0000000000000b2e $d
    stm32eforth-fl.s:1736   .text:0000000000000b32 _LAST
    stm32eforth-fl.s:1739   .text:0000000000000b38 LAST
    stm32eforth-fl.s:1746   .text:0000000000000b42 $d
    stm32eforth-fl.s:1747   .text:0000000000000b46 _FTRACE
    stm32eforth-fl.s:1750   .text:0000000000000b50 FTRACE
    stm32eforth-fl.s:1761   .text:0000000000000b5a $d
    stm32eforth-fl.s:1762   .text:0000000000000b5e _USER_BGN
    stm32eforth-fl.s:1765   .text:0000000000000b6c USER_BEGIN
    stm32eforth-fl.s:1769   .text:0000000000000b74 USR_BGN_ADR
    stm32eforth-fl.s:1770   .text:0000000000000b74 $d
    stm32eforth-fl.s:1775   .text:0000000000000b7c _USER_END
    stm32eforth-fl.s:1778   .text:0000000000000b88 USER_END
    stm32eforth-fl.s:1782   .text:0000000000000b90 USER_END_ADR
    stm32eforth-fl.s:1783   .text:0000000000000b90 $d
    stm32eforth-fl.s:1788   .text:0000000000000b98 _IMAGE0
    stm32eforth-fl.s:1791   .text:0000000000000ba0 IMAGE0
    stm32eforth-fl.s:1795   .text:0000000000000ba8 USR_IMG_ADR
    stm32eforth-fl.s:1796   .text:0000000000000ba8 $d
    stm32eforth-fl.s:4648   .text.user:0000000000000000 USER_SPACE
    stm32eforth-fl.s:1801   .text:0000000000000bb0 _IMG_SIGN
    stm32eforth-fl.s:1804   .text:0000000000000bbc IMG_SIGN
    stm32eforth-fl.s:1817   .text:0000000000000bc8 $d
    stm32eforth-fl.s:1818   .text:0000000000000bcc _WITHI
    stm32eforth-fl.s:1821   .text:0000000000000bd4 WITHI
    stm32eforth-fl.s:1823   .text:0000000000000bd8 $d
    stm32eforth-fl.s:1837   .text:0000000000000bf8 _UMMOD
    stm32eforth-fl.s:1840   .text:0000000000000c00 UMMOD
    stm32eforth-fl.s:1844   .text:0000000000000c0a UMMOD0
    stm32eforth-fl.s:1851   .text:0000000000000c1a UMMOD1
    stm32eforth-fl.s:1857   .text:0000000000000c24 UMMOD2
    stm32eforth-fl.s:1867   .text:0000000000000c30 $d
    stm32eforth-fl.s:1868   .text:0000000000000c34 _MSMOD
    stm32eforth-fl.s:1870   .text:0000000000000c3a $t
    stm32eforth-fl.s:1871   .text:0000000000000c3c MSMOD
    stm32eforth-fl.s:1873   .text:0000000000000c40 $d
    stm32eforth-fl.s:1882   .text:0000000000000c68 MMOD1
    stm32eforth-fl.s:1889   .text:0000000000000c84 MMOD2
    stm32eforth-fl.s:1897   .text:0000000000000ca4 MMOD3
    stm32eforth-fl.s:1904   .text:0000000000000cac _SLMOD
    stm32eforth-fl.s:1907   .text:0000000000000cb4 SLMOD
    stm32eforth-fl.s:1909   .text:0000000000000cb8 $d
    stm32eforth-fl.s:1919   .text:0000000000000cd0 _MODD
    stm32eforth-fl.s:1921   .text:0000000000000cd4 $t
    stm32eforth-fl.s:1924   .text:0000000000000cd8 $d
    stm32eforth-fl.s:1932   .text:0000000000000ce8 _SLASH
    stm32eforth-fl.s:1934   .text:0000000000000cea $t
    stm32eforth-fl.s:1935   .text:0000000000000cec SLASH
    stm32eforth-fl.s:1937   .text:0000000000000cf0 $d
    stm32eforth-fl.s:1946   .text:0000000000000d04 _SSMOD
    stm32eforth-fl.s:1948   .text:0000000000000d0a $t
    stm32eforth-fl.s:1949   .text:0000000000000d0c SSMOD
    stm32eforth-fl.s:1951   .text:0000000000000d10 $d
    stm32eforth-fl.s:1961   .text:0000000000000d28 _STASL
    stm32eforth-fl.s:1964   .text:0000000000000d2c STASL
    stm32eforth-fl.s:1966   .text:0000000000000d30 $d
ARM GAS  stm32eforth-fl.s 			page 100


    stm32eforth-fl.s:1978   .text:0000000000000d44 _ALGND
    stm32eforth-fl.s:1980   .text:0000000000000d4c $t
    stm32eforth-fl.s:1981   .text:0000000000000d4c ALGND
    stm32eforth-fl.s:1990   .text:0000000000000d5c $d
    stm32eforth-fl.s:1991   .text:0000000000000d60 _TCHAR
    stm32eforth-fl.s:1993   .text:0000000000000d66 $t
    stm32eforth-fl.s:1994   .text:0000000000000d68 TCHAR
    stm32eforth-fl.s:1996   .text:0000000000000d6c $d
    stm32eforth-fl.s:2006   .text:0000000000000da4 TCHA1
    stm32eforth-fl.s:2013   .text:0000000000000dac _DEPTH
    stm32eforth-fl.s:2015   .text:0000000000000db2 $t
    stm32eforth-fl.s:2016   .text:0000000000000db4 DEPTH
    stm32eforth-fl.s:2028   .text:0000000000000dd0 $d
    stm32eforth-fl.s:2029   .text:0000000000000dd4 _PICK
    stm32eforth-fl.s:2032   .text:0000000000000ddc PICK
    stm32eforth-fl.s:2034   .text:0000000000000de0 $d
    stm32eforth-fl.s:2048   .text:0000000000000dfc _HERE
    stm32eforth-fl.s:2051   .text:0000000000000e04 HERE
    stm32eforth-fl.s:2053   .text:0000000000000e08 $d
    stm32eforth-fl.s:2061   .text:0000000000000e18 _PAD
    stm32eforth-fl.s:2063   .text:0000000000000e1c $t
    stm32eforth-fl.s:2064   .text:0000000000000e1c PAD
    stm32eforth-fl.s:2066   .text:0000000000000e20 $d
    stm32eforth-fl.s:2075   .text:0000000000000e38 _TIB
    stm32eforth-fl.s:2077   .text:0000000000000e3c $t
    stm32eforth-fl.s:2078   .text:0000000000000e3c TIB
    stm32eforth-fl.s:2086   .text:0000000000000e46 $d
    stm32eforth-fl.s:2087   .text:0000000000000e4a _ATEXE
    stm32eforth-fl.s:2090   .text:0000000000000e54 ATEXE
    stm32eforth-fl.s:2102   .text:0000000000000e68 $d
    stm32eforth-fl.s:2103   .text:0000000000000e6c _CMOVE
    stm32eforth-fl.s:2105   .text:0000000000000e72 $t
    stm32eforth-fl.s:2106   .text:0000000000000e74 CMOVE
    stm32eforth-fl.s:2113   .text:0000000000000e86 CMOV1
    stm32eforth-fl.s:2110   .text:0000000000000e7e CMOV0
    stm32eforth-fl.s:2118   .text:0000000000000e90 CMOV2
    stm32eforth-fl.s:2125   .text:0000000000000e98 $d
    stm32eforth-fl.s:2126   .text:0000000000000e9c _MOVE
    stm32eforth-fl.s:2129   .text:0000000000000ea4 MOVE
    stm32eforth-fl.s:2137   .text:0000000000000eba MOVE1
    stm32eforth-fl.s:2134   .text:0000000000000eb2 MOVE0
    stm32eforth-fl.s:2142   .text:0000000000000ec4 MOVE2
    stm32eforth-fl.s:2149   .text:0000000000000ecc $d
    stm32eforth-fl.s:2150   .text:0000000000000ed0 _FILL
    stm32eforth-fl.s:2153   .text:0000000000000ed8 FILL
    stm32eforth-fl.s:2156   .text:0000000000000ee0 FILL0
    stm32eforth-fl.s:2159   .text:0000000000000ee4 FILL1
    stm32eforth-fl.s:2165   .text:0000000000000ef2 FILL2
    stm32eforth-fl.s:2172   .text:0000000000000efa $d
    stm32eforth-fl.s:2173   .text:0000000000000efe _PACKS
    stm32eforth-fl.s:2176   .text:0000000000000f08 PACKS
    stm32eforth-fl.s:2178   .text:0000000000000f0c $d
    stm32eforth-fl.s:2205   .text:0000000000000f64 _DIGIT
    stm32eforth-fl.s:2207   .text:0000000000000f6a $t
    stm32eforth-fl.s:2208   .text:0000000000000f6c DIGIT
    stm32eforth-fl.s:2210   .text:0000000000000f70 $d
    stm32eforth-fl.s:2224   .text:0000000000000fa4 _EXTRC
ARM GAS  stm32eforth-fl.s 			page 101


    stm32eforth-fl.s:2226   .text:0000000000000fac $t
    stm32eforth-fl.s:2227   .text:0000000000000fac EXTRC
    stm32eforth-fl.s:2229   .text:0000000000000fb0 $d
    stm32eforth-fl.s:2240   .text:0000000000000fd0 _BDIGS
    stm32eforth-fl.s:2243   .text:0000000000000fd4 BDIGS
    stm32eforth-fl.s:2245   .text:0000000000000fd8 $d
    stm32eforth-fl.s:2254   .text:0000000000000fec _HOLD
    stm32eforth-fl.s:2257   .text:0000000000000ff4 HOLD
    stm32eforth-fl.s:2259   .text:0000000000000ff8 $d
    stm32eforth-fl.s:2272   .text:000000000000101c _DIG
    stm32eforth-fl.s:2274   .text:000000000000101e $t
    stm32eforth-fl.s:2275   .text:0000000000001020 DIG
    stm32eforth-fl.s:2277   .text:0000000000001024 $d
    stm32eforth-fl.s:2287   .text:000000000000103c _DIGS
    stm32eforth-fl.s:2290   .text:0000000000001040 DIGS
    stm32eforth-fl.s:2292   .text:0000000000001044 DIGS1
    stm32eforth-fl.s:2293   .text:0000000000001044 $d
    stm32eforth-fl.s:2297   .text:000000000000105c DIGS2
    stm32eforth-fl.s:2304   .text:0000000000001064 _SIGN
    stm32eforth-fl.s:2307   .text:000000000000106c SIGN
    stm32eforth-fl.s:2309   .text:0000000000001070 $d
    stm32eforth-fl.s:2313   .text:0000000000001088 SIGN1
    stm32eforth-fl.s:2320   .text:0000000000001090 _EDIGS
    stm32eforth-fl.s:2323   .text:0000000000001094 EDIGS
    stm32eforth-fl.s:2325   .text:0000000000001098 $d
    stm32eforth-fl.s:2340   .text:00000000000010b4 STRR
    stm32eforth-fl.s:2341   .text:00000000000010b4 $t
    stm32eforth-fl.s:2342   .text:00000000000010b8 $d
    stm32eforth-fl.s:2356   .text:00000000000010e0 _HEX
    stm32eforth-fl.s:2358   .text:00000000000010e4 $t
    stm32eforth-fl.s:2359   .text:00000000000010e4 HEX
    stm32eforth-fl.s:2361   .text:00000000000010e8 $d
    stm32eforth-fl.s:2370   .text:0000000000001100 _DECIM
    stm32eforth-fl.s:2372   .text:0000000000001108 $t
    stm32eforth-fl.s:2373   .text:0000000000001108 DECIM
    stm32eforth-fl.s:2375   .text:000000000000110c $d
    stm32eforth-fl.s:2387   .text:0000000000001124 _DIGTQ
    stm32eforth-fl.s:2390   .text:000000000000112c DIGTQ
    stm32eforth-fl.s:2392   .text:0000000000001130 $d
    stm32eforth-fl.s:2405   .text:0000000000001178 DGTQ1
    stm32eforth-fl.s:2415   .text:000000000000118c _NUMBQ
    stm32eforth-fl.s:2417   .text:0000000000001194 $t
    stm32eforth-fl.s:2418   .text:0000000000001194 NUMBQ
    stm32eforth-fl.s:2420   .text:0000000000001198 $d
    stm32eforth-fl.s:2436   .text:00000000000011e4 NUMQ1
    stm32eforth-fl.s:2484   .text:00000000000012ac NUMQ6
    stm32eforth-fl.s:2452   .text:0000000000001228 NUMQ2
    stm32eforth-fl.s:2476   .text:0000000000001290 NUMQ4
    stm32eforth-fl.s:2473   .text:0000000000001284 NUMQ3
    stm32eforth-fl.s:2482   .text:00000000000012a8 NUMQ5
    stm32eforth-fl.s:2499   .text:00000000000012c8 _KEY
    stm32eforth-fl.s:2501   .text:00000000000012cc $t
    stm32eforth-fl.s:2502   .text:00000000000012cc KEY
    stm32eforth-fl.s:2504   .text:00000000000012d0 KEY1
    stm32eforth-fl.s:2505   .text:00000000000012d0 $d
    stm32eforth-fl.s:2513   .text:00000000000012f8 GO_REBOOT
    stm32eforth-fl.s:2520   .text:0000000000001300 _SPACE
ARM GAS  stm32eforth-fl.s 			page 102


    stm32eforth-fl.s:2522   .text:0000000000001306 $t
    stm32eforth-fl.s:2523   .text:0000000000001308 SPACE
    stm32eforth-fl.s:2525   .text:000000000000130c $d
    stm32eforth-fl.s:2533   .text:000000000000131c _SPACS
    stm32eforth-fl.s:2536   .text:0000000000001324 SPACS
    stm32eforth-fl.s:2538   .text:0000000000001328 $d
    stm32eforth-fl.s:2544   .text:0000000000001344 CHAR2
    stm32eforth-fl.s:2542   .text:0000000000001340 CHAR1
    stm32eforth-fl.s:2552   .text:0000000000001354 _TYPEE
    stm32eforth-fl.s:2555   .text:000000000000135c TYPEE
    stm32eforth-fl.s:2557   .text:0000000000001360 $d
    stm32eforth-fl.s:2563   .text:0000000000001378 TYPE2
    stm32eforth-fl.s:2559   .text:000000000000136c TYPE1
    stm32eforth-fl.s:2572   .text:000000000000138c _CR
    stm32eforth-fl.s:2575   .text:0000000000001390 CR
    stm32eforth-fl.s:2577   .text:0000000000001394 $d
    stm32eforth-fl.s:2591   .text:00000000000013b0 DOSTR
    stm32eforth-fl.s:2592   .text:00000000000013b0 $t
    stm32eforth-fl.s:2594   .text:00000000000013b4 $d
    stm32eforth-fl.s:2613   .text:00000000000013dc STRQP
    stm32eforth-fl.s:2614   .text:00000000000013dc $t
    stm32eforth-fl.s:2615   .text:00000000000013e0 $d
    stm32eforth-fl.s:2625   .text:00000000000013e8 DOTST
    stm32eforth-fl.s:2626   .text:00000000000013e8 $t
    stm32eforth-fl.s:2627   .text:00000000000013ec $d
    stm32eforth-fl.s:2638   .text:00000000000013f8 DOTQP
    stm32eforth-fl.s:2639   .text:00000000000013f8 $t
    stm32eforth-fl.s:2640   .text:00000000000013fc $d
    stm32eforth-fl.s:2648   .text:000000000000140c _DOTR
    stm32eforth-fl.s:2651   .text:0000000000001410 DOTR
    stm32eforth-fl.s:2653   .text:0000000000001414 $d
    stm32eforth-fl.s:2666   .text:0000000000001438 _UDOTR
    stm32eforth-fl.s:2668   .text:000000000000143c $t
    stm32eforth-fl.s:2669   .text:000000000000143c UDOTR
    stm32eforth-fl.s:2671   .text:0000000000001440 $d
    stm32eforth-fl.s:2686   .text:000000000000146c _UDOT
    stm32eforth-fl.s:2689   .text:0000000000001470 UDOT
    stm32eforth-fl.s:2691   .text:0000000000001474 $d
    stm32eforth-fl.s:2702   .text:0000000000001490 _DOT
    stm32eforth-fl.s:2704   .text:0000000000001492 $t
    stm32eforth-fl.s:2705   .text:0000000000001494 DOT
    stm32eforth-fl.s:2707   .text:0000000000001498 $d
    stm32eforth-fl.s:2714   .text:00000000000014bc DOT1
    stm32eforth-fl.s:2724   .text:00000000000014d0 _QUEST
    stm32eforth-fl.s:2726   .text:00000000000014d2 $t
    stm32eforth-fl.s:2727   .text:00000000000014d4 QUEST
    stm32eforth-fl.s:2729   .text:00000000000014d8 $d
    stm32eforth-fl.s:2743   .text:00000000000014e4 PARS
    stm32eforth-fl.s:2744   .text:00000000000014e4 $t
    stm32eforth-fl.s:2745   .text:00000000000014e8 $d
    stm32eforth-fl.s:2811   .text:00000000000015f8 PARS8
    stm32eforth-fl.s:2775   .text:000000000000156c PARS3
    stm32eforth-fl.s:2758   .text:0000000000001524 PARS1
    stm32eforth-fl.s:2773   .text:0000000000001568 PARS2
    stm32eforth-fl.s:2779   .text:0000000000001578 PARS4
    stm32eforth-fl.s:2791   .text:00000000000015a8 PARS5
    stm32eforth-fl.s:2798   .text:00000000000015cc PARS6
ARM GAS  stm32eforth-fl.s 			page 103


    stm32eforth-fl.s:2804   .text:00000000000015e0 PARS7
    stm32eforth-fl.s:2821   .text:000000000000160c _PARSE
    stm32eforth-fl.s:2823   .text:0000000000001612 $t
    stm32eforth-fl.s:2824   .text:0000000000001614 PARSE
    stm32eforth-fl.s:2826   .text:0000000000001618 $d
    stm32eforth-fl.s:2846   .text:0000000000001658 _DOTPR
    stm32eforth-fl.s:2849   .text:000000000000165c DOTPR
    stm32eforth-fl.s:2851   .text:0000000000001660 $d
    stm32eforth-fl.s:2860   .text:0000000000001678 _PAREN
    stm32eforth-fl.s:2862   .text:000000000000167a $t
    stm32eforth-fl.s:2863   .text:000000000000167c PAREN
    stm32eforth-fl.s:2865   .text:0000000000001680 $d
    stm32eforth-fl.s:2874   .text:0000000000001698 _BKSLA
    stm32eforth-fl.s:2876   .text:000000000000169a $t
    stm32eforth-fl.s:2877   .text:000000000000169c BKSLA
    stm32eforth-fl.s:2879   .text:00000000000016a0 $d
    stm32eforth-fl.s:2889   .text:00000000000016b8 _CHAR
    stm32eforth-fl.s:2892   .text:00000000000016c0 CHAR
    stm32eforth-fl.s:2894   .text:00000000000016c4 $d
    stm32eforth-fl.s:2904   .text:00000000000016dc _WORDD
    stm32eforth-fl.s:2907   .text:00000000000016e4 WORDD
    stm32eforth-fl.s:2909   .text:00000000000016e8 $d
    stm32eforth-fl.s:2919   .text:0000000000001700 _TOKEN
    stm32eforth-fl.s:2921   .text:0000000000001706 $t
    stm32eforth-fl.s:2922   .text:0000000000001708 TOKEN
    stm32eforth-fl.s:2924   .text:000000000000170c $d
    stm32eforth-fl.s:2935   .text:000000000000171c _NAMET
    stm32eforth-fl.s:2937   .text:0000000000001722 $t
    stm32eforth-fl.s:2938   .text:0000000000001724 NAMET
    stm32eforth-fl.s:2940   .text:0000000000001728 $d
    stm32eforth-fl.s:2956   .text:0000000000001748 _SAMEQ
    stm32eforth-fl.s:2958   .text:000000000000174e $t
    stm32eforth-fl.s:2959   .text:0000000000001750 SAMEQ
    stm32eforth-fl.s:2961   .text:0000000000001754 $d
    stm32eforth-fl.s:2978   .text:000000000000179c SAME2
    stm32eforth-fl.s:2963   .text:0000000000001760 SAME1
    stm32eforth-fl.s:2993   .text:00000000000017b0 FIND
    stm32eforth-fl.s:2994   .text:00000000000017b0 $t
    stm32eforth-fl.s:2995   .text:00000000000017b4 $d
    stm32eforth-fl.s:3002   .text:00000000000017d0 FIND1
    stm32eforth-fl.s:3022   .text:0000000000001828 FIND6
    stm32eforth-fl.s:3015   .text:0000000000001810 FIND2
    stm32eforth-fl.s:3020   .text:0000000000001820 FIND3
    stm32eforth-fl.s:3029   .text:0000000000001840 FIND4
    stm32eforth-fl.s:3035   .text:000000000000185c FIND5
    stm32eforth-fl.s:3050   .text:0000000000001884 _NAMEQ
    stm32eforth-fl.s:3052   .text:000000000000188a $t
    stm32eforth-fl.s:3053   .text:000000000000188c NAMEQ
    stm32eforth-fl.s:3055   .text:0000000000001890 $d
    stm32eforth-fl.s:3070   .text:00000000000018a0 BKSP
    stm32eforth-fl.s:3071   .text:00000000000018a0 $t
    stm32eforth-fl.s:3072   .text:00000000000018a4 $d
    stm32eforth-fl.s:3089   .text:00000000000018e8 BACK1
    stm32eforth-fl.s:3099   .text:00000000000018ec TAP
    stm32eforth-fl.s:3100   .text:00000000000018ec $t
    stm32eforth-fl.s:3101   .text:00000000000018f0 $d
    stm32eforth-fl.s:3116   .text:0000000000001908 KTAP
ARM GAS  stm32eforth-fl.s 			page 104


    stm32eforth-fl.s:3117   .text:0000000000001908 TTAP
    stm32eforth-fl.s:3118   .text:0000000000001908 $t
    stm32eforth-fl.s:3119   .text:000000000000190c $d
    stm32eforth-fl.s:3133   .text:000000000000194c KTAP2
    stm32eforth-fl.s:3130   .text:0000000000001944 KTAP1
    stm32eforth-fl.s:3144   .text:0000000000001964 _ACCEP
    stm32eforth-fl.s:3147   .text:000000000000196c ACCEP
    stm32eforth-fl.s:3149   .text:0000000000001970 $d
    stm32eforth-fl.s:3152   .text:000000000000197c ACCP1
    stm32eforth-fl.s:3169   .text:00000000000019c4 ACCP4
    stm32eforth-fl.s:3164   .text:00000000000019b8 ACCP2
    stm32eforth-fl.s:3167   .text:00000000000019bc ACCP3
    stm32eforth-fl.s:3179   .text:00000000000019d8 _QUERY
    stm32eforth-fl.s:3181   .text:00000000000019de $t
    stm32eforth-fl.s:3182   .text:00000000000019e0 QUERY
    stm32eforth-fl.s:3184   .text:00000000000019e4 $d
    stm32eforth-fl.s:3202   .text:0000000000001a18 _ABORT
    stm32eforth-fl.s:3204   .text:0000000000001a1e $t
    stm32eforth-fl.s:3205   .text:0000000000001a20 ABORT
    stm32eforth-fl.s:3207   .text:0000000000001a24 $d
    stm32eforth-fl.s:3341   .text:0000000000001bb8 PRESE
    stm32eforth-fl.s:3354   .text:0000000000001bd8 QUIT
    stm32eforth-fl.s:3223   .text:0000000000001a4c ABORQ
    stm32eforth-fl.s:3224   .text:0000000000001a4c $t
    stm32eforth-fl.s:3225   .text:0000000000001a50 $d
    stm32eforth-fl.s:3231   .text:0000000000001a70 ABOR1
    stm32eforth-fl.s:3243   .text:0000000000001a80 _INTER
    stm32eforth-fl.s:3245   .text:0000000000001a8c $t
    stm32eforth-fl.s:3248   .text:0000000000001a90 $d
    stm32eforth-fl.s:3257   .text:0000000000001acc INTE1
    stm32eforth-fl.s:3254   .text:0000000000001ac2 $t
    stm32eforth-fl.s:3255   .text:0000000000001ac4 $d
    stm32eforth-fl.s:3261   .text:0000000000001adc INTE2
    stm32eforth-fl.s:3268   .text:0000000000001ae8 _LBRAC
    stm32eforth-fl.s:3270   .text:0000000000001aea $t
    stm32eforth-fl.s:3271   .text:0000000000001aec LBRAC
    stm32eforth-fl.s:3273   .text:0000000000001af0 $d
    stm32eforth-fl.s:3282   .text:0000000000001b08 _DOTOK
    stm32eforth-fl.s:3284   .text:0000000000001b0c $t
    stm32eforth-fl.s:3285   .text:0000000000001b0c DOTOK
    stm32eforth-fl.s:3287   .text:0000000000001b10 $d
    stm32eforth-fl.s:3293   .text:0000000000001b34 DOTO1
    stm32eforth-fl.s:3294   .text:0000000000001b34 $d
    stm32eforth-fl.s:3301   .text:0000000000001b40 _QSTAC
    stm32eforth-fl.s:3304   .text:0000000000001b48 QSTAC
    stm32eforth-fl.s:3306   .text:0000000000001b4c $d
    stm32eforth-fl.s:3309   .text:0000000000001b64 $d
    stm32eforth-fl.s:3315   .text:0000000000001b6c _EVAL
    stm32eforth-fl.s:3318   .text:0000000000001b74 EVAL
    stm32eforth-fl.s:3320   .text:0000000000001b78 EVAL1
    stm32eforth-fl.s:3321   .text:0000000000001b78 $d
    stm32eforth-fl.s:3329   .text:0000000000001ba0 EVAL2
    stm32eforth-fl.s:3338   .text:0000000000001bb0 _PRESE
    stm32eforth-fl.s:3343   .text:0000000000001bbc $d
    stm32eforth-fl.s:3351   .text:0000000000001bd0 _QUIT
    stm32eforth-fl.s:3355   .text:0000000000001bd8 $d
    stm32eforth-fl.s:3357   .text:0000000000001be4 QUIT1
ARM GAS  stm32eforth-fl.s 			page 105


    stm32eforth-fl.s:3359   .text:0000000000001be8 QUIT2
    stm32eforth-fl.s:3724   .text:0000000000002040 flash_regs
    stm32eforth-fl.s:3369   .text:0000000000001bf8 $t
    stm32eforth-fl.s:3388   .text:0000000000001c0a WAIT_BSY
    stm32eforth-fl.s:3390   .text:0000000000001c0e WAIT1
    stm32eforth-fl.s:3401   .text:0000000000001c18 $d
    stm32eforth-fl.s:3402   .text:0000000000001c1c _EPAGE
    stm32eforth-fl.s:3406   .text:0000000000001c28 EPAGE
    stm32eforth-fl.s:3419   .text:0000000000001c5a $d
    stm32eforth-fl.s:3420   .text:0000000000001c6c $d
    stm32eforth-fl.s:3424   .text:0000000000001c70 HWORD_WRITE
    stm32eforth-fl.s:3425   .text:0000000000001c70 $t
    stm32eforth-fl.s:3435   .text:0000000000001c94 $d
    stm32eforth-fl.s:3436   .text:0000000000001cae $t
    stm32eforth-fl.s:3439   .text:0000000000001cb0 $d
    stm32eforth-fl.s:3447   .text:0000000000001cb8 _ISTOR
    stm32eforth-fl.s:3450   .text:0000000000001cbc ISTOR
    stm32eforth-fl.s:3453   .text:0000000000001cca $d
    stm32eforth-fl.s:3470   .text:0000000000001d06 _IMG_SIZE
    stm32eforth-fl.s:3473   .text:0000000000001d10 IMG_SIZE
    stm32eforth-fl.s:3475   .text:0000000000001d14 $d
    stm32eforth-fl.s:3491   .text:0000000000001d50 _IMGQ
    stm32eforth-fl.s:3494   .text:0000000000001d58 IMGQ
    stm32eforth-fl.s:3496   .text:0000000000001d5c $d
    stm32eforth-fl.s:3510   .text:0000000000001d80 IMG_ADR
    stm32eforth-fl.s:3507   .text:0000000000001d78 _IMG_ADR
    stm32eforth-fl.s:3509   .text:0000000000001d80 $t
    stm32eforth-fl.s:3512   .text:0000000000001d84 $d
    stm32eforth-fl.s:3523   .text:0000000000001da8 _LOAD_IMG
    stm32eforth-fl.s:3526   .text:0000000000001db4 LOAD_IMG
    stm32eforth-fl.s:3528   .text:0000000000001db8 $d
    stm32eforth-fl.s:3559   .text:0000000000001e1c _ERASE_MPG
    stm32eforth-fl.s:3561   .text:0000000000001e26 $t
    stm32eforth-fl.s:3562   .text:0000000000001e28 ERASE_MPG
    stm32eforth-fl.s:3564   .text:0000000000001e2c $d
    stm32eforth-fl.s:3621   .text:0000000000001ee0 PG_TO_ADR
    stm32eforth-fl.s:3582   .text:0000000000001e6c _FLSH_WR
    stm32eforth-fl.s:3585   .text:0000000000001e74 FLSH_WR
    stm32eforth-fl.s:3586   .text:0000000000001e74 $t
    stm32eforth-fl.s:3587   .text:0000000000001e78 $d
    stm32eforth-fl.s:3607   .text:0000000000001ec0 _ADR_TO_PG
    stm32eforth-fl.s:3610   .text:0000000000001ec8 ADR_TO_PG
    stm32eforth-fl.s:3617   .text:0000000000001ed4 $d
    stm32eforth-fl.s:3618   .text:0000000000001ed8 _PG_TO_ADR
    stm32eforth-fl.s:3628   .text:0000000000001eec $d
    stm32eforth-fl.s:3629   .text:0000000000001ef0 _ERASE_IMG
    stm32eforth-fl.s:3631   .text:0000000000001efa $t
    stm32eforth-fl.s:3632   .text:0000000000001efc ERASE_IMG
    stm32eforth-fl.s:3634   .text:0000000000001f00 $d
    stm32eforth-fl.s:3650   .text:0000000000001f3c _SAVE_IMG
    stm32eforth-fl.s:3653   .text:0000000000001f48 SAVE_IMG
    stm32eforth-fl.s:3655   .text:0000000000001f4c $d
    stm32eforth-fl.s:3688   .text:0000000000001fc0 _TURNKEY
    stm32eforth-fl.s:3690   .text:0000000000001fc8 $t
    stm32eforth-fl.s:3691   .text:0000000000001fc8 TURNKEY
    stm32eforth-fl.s:3693   .text:0000000000001fcc $d
    stm32eforth-fl.s:3739   .text:0000000000002054 TICK
ARM GAS  stm32eforth-fl.s 			page 106


    stm32eforth-fl.s:3701   .text:0000000000001fec _FORGET
    stm32eforth-fl.s:3704   .text:0000000000001ff4 FORGET
    stm32eforth-fl.s:3706   .text:0000000000001ff8 $d
    stm32eforth-fl.s:4159   .text:0000000000002490 OVERT
    stm32eforth-fl.s:3725   .text:0000000000002040 $d
    stm32eforth-fl.s:3736   .text:0000000000002050 _TICK
    stm32eforth-fl.s:3738   .text:0000000000002052 $t
    stm32eforth-fl.s:3741   .text:0000000000002058 $d
    stm32eforth-fl.s:3745   .text:000000000000206c TICK1
    stm32eforth-fl.s:3752   .text:0000000000002078 _ALLOT
    stm32eforth-fl.s:3754   .text:000000000000207e $t
    stm32eforth-fl.s:3755   .text:0000000000002080 ALLOT
    stm32eforth-fl.s:3757   .text:0000000000002084 $d
    stm32eforth-fl.s:3765   .text:0000000000002094 _COMMA
    stm32eforth-fl.s:3766   .text:0000000000002096 $t
    stm32eforth-fl.s:3767   .text:0000000000002098 COMMA
    stm32eforth-fl.s:3769   .text:000000000000209c $d
    stm32eforth-fl.s:3780   .text:00000000000020b8 $d
    stm32eforth-fl.s:3781   .text:00000000000020bc _BCOMP
    stm32eforth-fl.s:3783   .text:00000000000020c6 $t
    stm32eforth-fl.s:3784   .text:00000000000020c8 BCOMP
    stm32eforth-fl.s:3786   .text:00000000000020cc $d
    stm32eforth-fl.s:3794   .text:00000000000020dc _COMPI
    stm32eforth-fl.s:3796   .text:00000000000020e4 $t
    stm32eforth-fl.s:3797   .text:00000000000020e4 COMPI
    stm32eforth-fl.s:3799   .text:00000000000020e8 $d
    stm32eforth-fl.s:3813   .text:0000000000002114 _LITER
    stm32eforth-fl.s:3815   .text:000000000000211c $t
    stm32eforth-fl.s:3816   .text:000000000000211c LITER
    stm32eforth-fl.s:3818   .text:0000000000002120 $d
    stm32eforth-fl.s:3829   .text:0000000000002130 STRCQ
    stm32eforth-fl.s:3830   .text:0000000000002130 $t
    stm32eforth-fl.s:3831   .text:0000000000002134 $d
    stm32eforth-fl.s:3850   .text:000000000000216c _FOR
    stm32eforth-fl.s:3852   .text:0000000000002170 $t
    stm32eforth-fl.s:3853   .text:0000000000002170 FOR
    stm32eforth-fl.s:3855   .text:0000000000002174 $d
    stm32eforth-fl.s:3863   .text:0000000000002188 _BEGIN
    stm32eforth-fl.s:3865   .text:000000000000218e $t
    stm32eforth-fl.s:3866   .text:0000000000002190 BEGIN
    stm32eforth-fl.s:3868   .text:0000000000002194 $d
    stm32eforth-fl.s:3874   .text:000000000000219c $d
    stm32eforth-fl.s:3875   .text:00000000000021a0 _FNEXT
    stm32eforth-fl.s:3878   .text:00000000000021a8 FNEXT
    stm32eforth-fl.s:3880   .text:00000000000021ac $d
    stm32eforth-fl.s:3888   .text:00000000000021c0 _UNTIL
    stm32eforth-fl.s:3890   .text:00000000000021c6 $t
    stm32eforth-fl.s:3891   .text:00000000000021c8 UNTIL
    stm32eforth-fl.s:3893   .text:00000000000021cc $d
    stm32eforth-fl.s:3901   .text:00000000000021e0 _AGAIN
    stm32eforth-fl.s:3903   .text:00000000000021e6 $t
    stm32eforth-fl.s:3904   .text:00000000000021e8 AGAIN
    stm32eforth-fl.s:3906   .text:00000000000021ec $d
    stm32eforth-fl.s:3914   .text:0000000000002200 _IFF
    stm32eforth-fl.s:3917   .text:0000000000002204 IFF
    stm32eforth-fl.s:3919   .text:0000000000002208 $d
    stm32eforth-fl.s:3930   .text:000000000000222c _AHEAD
ARM GAS  stm32eforth-fl.s 			page 107


    stm32eforth-fl.s:3932   .text:0000000000002232 $t
    stm32eforth-fl.s:3933   .text:0000000000002234 AHEAD
    stm32eforth-fl.s:3935   .text:0000000000002238 $d
    stm32eforth-fl.s:3946   .text:000000000000225c _REPEA
    stm32eforth-fl.s:3949   .text:0000000000002264 REPEA
    stm32eforth-fl.s:3951   .text:0000000000002268 $d
    stm32eforth-fl.s:3961   .text:0000000000002280 _THENN
    stm32eforth-fl.s:3964   .text:0000000000002288 THENN
    stm32eforth-fl.s:3966   .text:000000000000228c $d
    stm32eforth-fl.s:3975   .text:00000000000022a0 _AFT
    stm32eforth-fl.s:3977   .text:00000000000022a4 $t
    stm32eforth-fl.s:3978   .text:00000000000022a4 AFT
    stm32eforth-fl.s:3980   .text:00000000000022a8 $d
    stm32eforth-fl.s:3990   .text:00000000000022c0 _ELSEE
    stm32eforth-fl.s:3993   .text:00000000000022c8 ELSEE
    stm32eforth-fl.s:3995   .text:00000000000022cc $d
    stm32eforth-fl.s:4004   .text:00000000000022e0 _WHILE
    stm32eforth-fl.s:4006   .text:00000000000022e6 $t
    stm32eforth-fl.s:4007   .text:00000000000022e8 WHILE
    stm32eforth-fl.s:4009   .text:00000000000022ec $d
    stm32eforth-fl.s:4017   .text:00000000000022fc _ABRTQ
    stm32eforth-fl.s:4020   .text:0000000000002304 ABRTQ
    stm32eforth-fl.s:4022   .text:0000000000002308 $d
    stm32eforth-fl.s:4030   .text:000000000000231c _STRQ
    stm32eforth-fl.s:4033   .text:0000000000002320 STRQ
    stm32eforth-fl.s:4035   .text:0000000000002324 $d
    stm32eforth-fl.s:4043   .text:0000000000002338 _DOTQ
    stm32eforth-fl.s:4046   .text:000000000000233c DOTQ
    stm32eforth-fl.s:4048   .text:0000000000002340 $d
    stm32eforth-fl.s:4059   .text:0000000000002354 _UNIQU
    stm32eforth-fl.s:4061   .text:000000000000235c $t
    stm32eforth-fl.s:4062   .text:000000000000235c UNIQU
    stm32eforth-fl.s:4064   .text:0000000000002360 $d
    stm32eforth-fl.s:4071   .text:0000000000002388 UNIQ1
    stm32eforth-fl.s:4068   .text:000000000000237c $d
    stm32eforth-fl.s:4082   .text:0000000000002390 SNAME
    stm32eforth-fl.s:4083   .text:0000000000002390 $t
    stm32eforth-fl.s:4084   .text:0000000000002394 $d
    stm32eforth-fl.s:4100   .text:00000000000023d8 SNAM1
    stm32eforth-fl.s:4110   .text:00000000000023f0 _SCOMP
    stm32eforth-fl.s:4112   .text:00000000000023fa $t
    stm32eforth-fl.s:4113   .text:00000000000023fc SCOMP
    stm32eforth-fl.s:4115   .text:0000000000002400 $d
    stm32eforth-fl.s:4127   .text:0000000000002438 SCOM2
    stm32eforth-fl.s:4124   .text:0000000000002430 SCOM1
    stm32eforth-fl.s:4204   .text:00000000000024e4 CALLC
    stm32eforth-fl.s:4132   .text:000000000000244c SCOM3
    stm32eforth-fl.s:4139   .text:0000000000002458 COLON_ABORT
    stm32eforth-fl.s:4140   .text:0000000000002458 $t
    stm32eforth-fl.s:4141   .text:000000000000245c $d
    stm32eforth-fl.s:4156   .text:0000000000002488 _OVERT
    stm32eforth-fl.s:4158   .text:000000000000248e $t
    stm32eforth-fl.s:4161   .text:0000000000002494 $d
    stm32eforth-fl.s:4171   .text:00000000000024ac _SEMIS
    stm32eforth-fl.s:4173   .text:00000000000024ae $t
    stm32eforth-fl.s:4174   .text:00000000000024b0 SEMIS
    stm32eforth-fl.s:4177   .text:00000000000024b4 $d
ARM GAS  stm32eforth-fl.s 			page 108


    stm32eforth-fl.s:4186   .text:00000000000024c8 _RBRAC
    stm32eforth-fl.s:4188   .text:00000000000024ca $t
    stm32eforth-fl.s:4189   .text:00000000000024cc RBRAC
    stm32eforth-fl.s:4191   .text:00000000000024d0 $d
    stm32eforth-fl.s:4205   .text:00000000000024e4 $t
    stm32eforth-fl.s:4206   .text:00000000000024e8 $d
    stm32eforth-fl.s:4213   .text:00000000000024f0 _COLON
    stm32eforth-fl.s:4215   .text:00000000000024f2 $t
    stm32eforth-fl.s:4216   .text:00000000000024f4 COLON
    stm32eforth-fl.s:4218   .text:00000000000024f8 $d
    stm32eforth-fl.s:4229   .text:0000000000002518 _IMMED
    stm32eforth-fl.s:4231   .text:0000000000002522 $t
    stm32eforth-fl.s:4232   .text:0000000000002524 IMMED
    stm32eforth-fl.s:4234   .text:0000000000002528 $d
    stm32eforth-fl.s:4251   .text:0000000000002554 _CONST
    stm32eforth-fl.s:4254   .text:0000000000002560 CONST
    stm32eforth-fl.s:4256   .text:0000000000002564 $d
    stm32eforth-fl.s:4270   .text:0000000000002594 _CREAT
    stm32eforth-fl.s:4273   .text:000000000000259c CREAT
    stm32eforth-fl.s:4275   .text:00000000000025a0 $d
    stm32eforth-fl.s:4288   .text:00000000000025cc _VARIA
    stm32eforth-fl.s:4291   .text:00000000000025d8 VARIA
    stm32eforth-fl.s:4293   .text:00000000000025dc $d
    stm32eforth-fl.s:4304   .text:00000000000025f4 _TRACE
    stm32eforth-fl.s:4306   .text:00000000000025fa $t
    stm32eforth-fl.s:4307   .text:00000000000025fc TRACE
    stm32eforth-fl.s:4309   .text:0000000000002600 $d
    stm32eforth-fl.s:4316   .text:0000000000002610 _DBG_PRT
    stm32eforth-fl.s:4318   .text:0000000000002618 DBG_PRT
    stm32eforth-fl.s:4319   .text:0000000000002618 $t
    stm32eforth-fl.s:4320   .text:000000000000261c $d
    stm32eforth-fl.s:4421   .text:0000000000002748 TNAME
    stm32eforth-fl.s:4336   .text:000000000000263c DMP
    stm32eforth-fl.s:4337   .text:000000000000263c $t
    stm32eforth-fl.s:4338   .text:0000000000002640 $d
    stm32eforth-fl.s:4350   .text:0000000000002678 PDUM2
    stm32eforth-fl.s:4344   .text:0000000000002660 PDUM1
    stm32eforth-fl.s:4358   .text:0000000000002684 $d
    stm32eforth-fl.s:4359   .text:0000000000002688 _DUMP
    stm32eforth-fl.s:4362   .text:0000000000002690 DUMP
    stm32eforth-fl.s:4364   .text:0000000000002694 $d
    stm32eforth-fl.s:4382   .text:00000000000026e4 DUMP4
    stm32eforth-fl.s:4372   .text:00000000000026bc DUMP1
    stm32eforth-fl.s:4384   .text:00000000000026ec DUMP3
    stm32eforth-fl.s:4395   .text:0000000000002704 _DOTS
    stm32eforth-fl.s:4399   .text:0000000000002708 DOTS
    stm32eforth-fl.s:4401   .text:000000000000270c $d
    stm32eforth-fl.s:4409   .text:000000000000272c DOTS2
    stm32eforth-fl.s:4405   .text:0000000000002720 DOTS1
    stm32eforth-fl.s:4418   .text:0000000000002740 _TNAME
    stm32eforth-fl.s:4420   .text:0000000000002746 $t
    stm32eforth-fl.s:4423   .text:000000000000274c $d
    stm32eforth-fl.s:4426   .text:0000000000002758 TNAM1
    stm32eforth-fl.s:4437   .text:000000000000278c TNAM2
    stm32eforth-fl.s:4446   .text:000000000000279c _DOTID
    stm32eforth-fl.s:4448   .text:00000000000027a0 $t
    stm32eforth-fl.s:4449   .text:00000000000027a0 DOTID
ARM GAS  stm32eforth-fl.s 			page 109


    stm32eforth-fl.s:4451   .text:00000000000027a4 $d
    stm32eforth-fl.s:4458   .text:00000000000027c8 DOTI1
    stm32eforth-fl.s:4459   .text:00000000000027d6 $t
    stm32eforth-fl.s:4460   .text:00000000000027d8 $d
    stm32eforth-fl.s:4462   *ABS*:0000000000000000 WANT_SEE
    stm32eforth-fl.s:4542   .text:00000000000027e0 _WORDS
    stm32eforth-fl.s:4544   .text:00000000000027e6 $t
    stm32eforth-fl.s:4545   .text:00000000000027e8 WORDS
    stm32eforth-fl.s:4547   .text:00000000000027ec $d
    stm32eforth-fl.s:4550   .text:00000000000027f8 WORS1
    stm32eforth-fl.s:4559   .text:0000000000002820 WORS2
    stm32eforth-fl.s:4572   .text:0000000000002824 VERSN
    stm32eforth-fl.s:4573   .text:0000000000002824 $t
    stm32eforth-fl.s:4574   .text:0000000000002828 $d
    stm32eforth-fl.s:4581   .text:0000000000002838 _HI
    stm32eforth-fl.s:4586   .text:0000000000002840 $d
    stm32eforth-fl.s:4588   .text:0000000000002860 $d
    stm32eforth-fl.s:4614   .text:00000000000028b0 $t
    stm32eforth-fl.s:4621   .text:00000000000028ca COLD1
    stm32eforth-fl.s:4622   .text:00000000000028ca $d
    stm32eforth-fl.s:4641   .text:000000000000290a COLD2
    stm32eforth-fl.s:4642   .text:000000000000290a $t
    stm32eforth-fl.s:4644   .text:000000000000290c $d
    stm32eforth-fl.s:4649   .text.user:0000000000000000 $d
    stm32eforth-fl.s:4651   .text:0000000000002910 $d
    stm32eforth-fl.s:339    .text:000000000000002f $d
    stm32eforth-fl.s:339    .text:0000000000000030 $t
    stm32eforth-fl.s:600    .text:000000000000042b $d
    stm32eforth-fl.s:600    .text:000000000000042c $t
    stm32eforth-fl.s:649    .text:00000000000004cd $d
    stm32eforth-fl.s:649    .text:00000000000004ce $t
    stm32eforth-fl.s:669    .text:00000000000004f5 $d
    stm32eforth-fl.s:669    .text:00000000000004f6 $t
    stm32eforth-fl.s:693    .text:0000000000000527 $d
    stm32eforth-fl.s:693    .text:0000000000000528 $t
    stm32eforth-fl.s:804    .text:00000000000005a7 $d
    stm32eforth-fl.s:838    .text:00000000000005d3 $d
    stm32eforth-fl.s:838    .text:00000000000005d4 $t
    stm32eforth-fl.s:851    .text:00000000000005e7 $d
    stm32eforth-fl.s:851    .text:00000000000005e8 $t
    stm32eforth-fl.s:862    .text:00000000000005f3 $d
    stm32eforth-fl.s:862    .text:00000000000005f4 $t
    stm32eforth-fl.s:874    .text:0000000000000605 $d
    stm32eforth-fl.s:874    .text:0000000000000606 $t
    stm32eforth-fl.s:886    .text:0000000000000617 $d
    stm32eforth-fl.s:886    .text:0000000000000618 $t
    stm32eforth-fl.s:933    .text:000000000000065d $d
    stm32eforth-fl.s:933    .text:000000000000065e $t
    stm32eforth-fl.s:955    .text:000000000000067f $d
    stm32eforth-fl.s:955    .text:0000000000000680 $t
    stm32eforth-fl.s:968    .text:0000000000000691 $d
    stm32eforth-fl.s:968    .text:0000000000000692 $t
    stm32eforth-fl.s:980    .text:00000000000006a3 $d
    stm32eforth-fl.s:980    .text:00000000000006a4 $t
    stm32eforth-fl.s:1005   .text:00000000000006c5 $d
    stm32eforth-fl.s:1005   .text:00000000000006c6 $t
    stm32eforth-fl.s:1044   .text:000000000000070b $d
ARM GAS  stm32eforth-fl.s 			page 110


    stm32eforth-fl.s:1044   .text:000000000000070c $t
    stm32eforth-fl.s:1056   .text:0000000000000721 $d
    stm32eforth-fl.s:1056   .text:0000000000000722 $t
    stm32eforth-fl.s:1118   .text:000000000000077b $d
    stm32eforth-fl.s:1118   .text:000000000000077c $t
    stm32eforth-fl.s:1132   .text:000000000000078f $d
    stm32eforth-fl.s:1132   .text:0000000000000790 $t
    stm32eforth-fl.s:1143   .text:000000000000079d $d
    stm32eforth-fl.s:1143   .text:000000000000079e $t
    stm32eforth-fl.s:1154   .text:00000000000007ad $d
    stm32eforth-fl.s:1154   .text:00000000000007ae $t
    stm32eforth-fl.s:1165   .text:00000000000007bd $d
    stm32eforth-fl.s:1165   .text:00000000000007be $t
    stm32eforth-fl.s:1198   .text:00000000000007ed $d
    stm32eforth-fl.s:1198   .text:00000000000007ee $t
    stm32eforth-fl.s:1232   .text:0000000000000821 $d
    stm32eforth-fl.s:1232   .text:0000000000000822 $t
    stm32eforth-fl.s:1243   .text:0000000000000831 $d
    stm32eforth-fl.s:1243   .text:0000000000000832 $t
    stm32eforth-fl.s:1254   .text:0000000000000843 $d
    stm32eforth-fl.s:1254   .text:0000000000000844 $t
    stm32eforth-fl.s:1293   .text:000000000000087f $d
    stm32eforth-fl.s:1293   .text:0000000000000880 $t
    stm32eforth-fl.s:1306   .text:0000000000000893 $d
    stm32eforth-fl.s:1306   .text:0000000000000894 $t
    stm32eforth-fl.s:1333   .text:00000000000008c1 $d
    stm32eforth-fl.s:1333   .text:00000000000008c2 $t
    stm32eforth-fl.s:1357   .text:00000000000008e5 $d
    stm32eforth-fl.s:1357   .text:00000000000008e6 $t
    stm32eforth-fl.s:1386   .text:0000000000000913 $d
    stm32eforth-fl.s:1386   .text:0000000000000914 $t
    stm32eforth-fl.s:1459   .text:0000000000000983 $d
    stm32eforth-fl.s:1459   .text:0000000000000984 $t
    stm32eforth-fl.s:1474   .text:000000000000099b $d
    stm32eforth-fl.s:1474   .text:000000000000099c $t
    stm32eforth-fl.s:1489   .text:00000000000009b7 $d
    stm32eforth-fl.s:1489   .text:00000000000009b8 $t
    stm32eforth-fl.s:1560   .text:0000000000000a0f $d
    stm32eforth-fl.s:1560   .text:0000000000000a10 $t
    stm32eforth-fl.s:1571   .text:0000000000000a23 $d
    stm32eforth-fl.s:1571   .text:0000000000000a24 $t
    stm32eforth-fl.s:1594   .text:0000000000000a4b $d
    stm32eforth-fl.s:1594   .text:0000000000000a4c $t
    stm32eforth-fl.s:1618   .text:0000000000000a73 $d
    stm32eforth-fl.s:1618   .text:0000000000000a74 $t
    stm32eforth-fl.s:1642   .text:0000000000000a91 $d
    stm32eforth-fl.s:1642   .text:0000000000000a92 $t
    stm32eforth-fl.s:1666   .text:0000000000000abb $d
    stm32eforth-fl.s:1666   .text:0000000000000abc $t
    stm32eforth-fl.s:1715   .text:0000000000000b0d $d
    stm32eforth-fl.s:1715   .text:0000000000000b0e $t
    stm32eforth-fl.s:1738   .text:0000000000000b37 $d
    stm32eforth-fl.s:1738   .text:0000000000000b38 $t
    stm32eforth-fl.s:1749   .text:0000000000000b4d $d
    stm32eforth-fl.s:1749   .text:0000000000000b4e $t
    stm32eforth-fl.s:1764   .text:0000000000000b69 $d
    stm32eforth-fl.s:1764   .text:0000000000000b6a $t
ARM GAS  stm32eforth-fl.s 			page 111


    stm32eforth-fl.s:1777   .text:0000000000000b85 $d
    stm32eforth-fl.s:1777   .text:0000000000000b86 $t
    stm32eforth-fl.s:1790   .text:0000000000000b9f $d
    stm32eforth-fl.s:1790   .text:0000000000000ba0 $t
    stm32eforth-fl.s:1803   .text:0000000000000bb9 $d
    stm32eforth-fl.s:1803   .text:0000000000000bba $t
    stm32eforth-fl.s:1820   .text:0000000000000bd3 $d
    stm32eforth-fl.s:1820   .text:0000000000000bd4 $t
    stm32eforth-fl.s:1839   .text:0000000000000bff $d
    stm32eforth-fl.s:1839   .text:0000000000000c00 $t
    stm32eforth-fl.s:1906   .text:0000000000000cb1 $d
    stm32eforth-fl.s:1906   .text:0000000000000cb2 $t
    stm32eforth-fl.s:1963   .text:0000000000000d2b $d
    stm32eforth-fl.s:1963   .text:0000000000000d2c $t
    stm32eforth-fl.s:2031   .text:0000000000000dd9 $d
    stm32eforth-fl.s:2031   .text:0000000000000dda $t
    stm32eforth-fl.s:2050   .text:0000000000000e01 $d
    stm32eforth-fl.s:2050   .text:0000000000000e02 $t
    stm32eforth-fl.s:2089   .text:0000000000000e53 $d
    stm32eforth-fl.s:2089   .text:0000000000000e54 $t
    stm32eforth-fl.s:2128   .text:0000000000000ea1 $d
    stm32eforth-fl.s:2128   .text:0000000000000ea2 $t
    stm32eforth-fl.s:2152   .text:0000000000000ed5 $d
    stm32eforth-fl.s:2152   .text:0000000000000ed6 $t
    stm32eforth-fl.s:2175   .text:0000000000000f05 $d
    stm32eforth-fl.s:2175   .text:0000000000000f06 $t
    stm32eforth-fl.s:2242   .text:0000000000000fd3 $d
    stm32eforth-fl.s:2242   .text:0000000000000fd4 $t
    stm32eforth-fl.s:2256   .text:0000000000000ff1 $d
    stm32eforth-fl.s:2256   .text:0000000000000ff2 $t
    stm32eforth-fl.s:2289   .text:000000000000103f $d
    stm32eforth-fl.s:2289   .text:0000000000001040 $t
    stm32eforth-fl.s:2306   .text:0000000000001069 $d
    stm32eforth-fl.s:2306   .text:000000000000106a $t
    stm32eforth-fl.s:2322   .text:0000000000001093 $d
    stm32eforth-fl.s:2322   .text:0000000000001094 $t
    stm32eforth-fl.s:2389   .text:000000000000112b $d
    stm32eforth-fl.s:2389   .text:000000000000112c $t
    stm32eforth-fl.s:2535   .text:0000000000001323 $d
    stm32eforth-fl.s:2535   .text:0000000000001324 $t
    stm32eforth-fl.s:2554   .text:0000000000001359 $d
    stm32eforth-fl.s:2554   .text:000000000000135a $t
    stm32eforth-fl.s:2574   .text:000000000000138f $d
    stm32eforth-fl.s:2574   .text:0000000000001390 $t
    stm32eforth-fl.s:2650   .text:000000000000140f $d
    stm32eforth-fl.s:2650   .text:0000000000001410 $t
    stm32eforth-fl.s:2688   .text:000000000000146f $d
    stm32eforth-fl.s:2688   .text:0000000000001470 $t
    stm32eforth-fl.s:2848   .text:000000000000165b $d
    stm32eforth-fl.s:2848   .text:000000000000165c $t
    stm32eforth-fl.s:2891   .text:00000000000016bd $d
    stm32eforth-fl.s:2891   .text:00000000000016be $t
    stm32eforth-fl.s:2906   .text:00000000000016e1 $d
    stm32eforth-fl.s:2906   .text:00000000000016e2 $t
    stm32eforth-fl.s:3146   .text:000000000000196b $d
    stm32eforth-fl.s:3146   .text:000000000000196c $t
    stm32eforth-fl.s:3303   .text:0000000000001b47 $d
ARM GAS  stm32eforth-fl.s 			page 112


    stm32eforth-fl.s:3303   .text:0000000000001b48 $t
    stm32eforth-fl.s:3308   .text:0000000000001b63 $d
    stm32eforth-fl.s:3317   .text:0000000000001b71 $d
    stm32eforth-fl.s:3317   .text:0000000000001b72 $t
    stm32eforth-fl.s:3340   .text:0000000000001bb7 $d
    stm32eforth-fl.s:3340   .text:0000000000001bb8 $t
    stm32eforth-fl.s:3353   .text:0000000000001bd5 $d
    stm32eforth-fl.s:3353   .text:0000000000001bd6 $t
    stm32eforth-fl.s:3404   .text:0000000000001c27 $d
    stm32eforth-fl.s:3404   .text:0000000000001c28 $t
    stm32eforth-fl.s:3449   .text:0000000000001cbb $d
    stm32eforth-fl.s:3449   .text:0000000000001cbc $t
    stm32eforth-fl.s:3472   .text:0000000000001d0f $d
    stm32eforth-fl.s:3472   .text:0000000000001d10 $t
    stm32eforth-fl.s:3493   .text:0000000000001d55 $d
    stm32eforth-fl.s:3493   .text:0000000000001d56 $t
    stm32eforth-fl.s:3525   .text:0000000000001db1 $d
    stm32eforth-fl.s:3525   .text:0000000000001db2 $t
    stm32eforth-fl.s:3609   .text:0000000000001ec7 $d
    stm32eforth-fl.s:3609   .text:0000000000001ec8 $t
    stm32eforth-fl.s:3620   .text:0000000000001edf $d
    stm32eforth-fl.s:3620   .text:0000000000001ee0 $t
    stm32eforth-fl.s:3652   .text:0000000000001f45 $d
    stm32eforth-fl.s:3652   .text:0000000000001f46 $t
    stm32eforth-fl.s:3703   .text:0000000000001ff3 $d
    stm32eforth-fl.s:3703   .text:0000000000001ff4 $t
    stm32eforth-fl.s:3877   .text:00000000000021a5 $d
    stm32eforth-fl.s:3877   .text:00000000000021a6 $t
    stm32eforth-fl.s:3916   .text:0000000000002203 $d
    stm32eforth-fl.s:3916   .text:0000000000002204 $t
    stm32eforth-fl.s:3948   .text:0000000000002263 $d
    stm32eforth-fl.s:3948   .text:0000000000002264 $t
    stm32eforth-fl.s:3963   .text:0000000000002285 $d
    stm32eforth-fl.s:3963   .text:0000000000002286 $t
    stm32eforth-fl.s:3992   .text:00000000000022c5 $d
    stm32eforth-fl.s:3992   .text:00000000000022c6 $t
    stm32eforth-fl.s:4019   .text:0000000000002303 $d
    stm32eforth-fl.s:4019   .text:0000000000002304 $t
    stm32eforth-fl.s:4032   .text:000000000000231f $d
    stm32eforth-fl.s:4032   .text:0000000000002320 $t
    stm32eforth-fl.s:4045   .text:000000000000233b $d
    stm32eforth-fl.s:4045   .text:000000000000233c $t
    stm32eforth-fl.s:4253   .text:000000000000255d $d
    stm32eforth-fl.s:4253   .text:000000000000255e $t
    stm32eforth-fl.s:4272   .text:000000000000259b $d
    stm32eforth-fl.s:4272   .text:000000000000259c $t
    stm32eforth-fl.s:4290   .text:00000000000025d5 $d
    stm32eforth-fl.s:4290   .text:00000000000025d6 $t
    stm32eforth-fl.s:4361   .text:000000000000268d $d
    stm32eforth-fl.s:4361   .text:000000000000268e $t
    stm32eforth-fl.s:4398   .text:0000000000002707 $d
    stm32eforth-fl.s:4398   .text:0000000000002708 $t
    stm32eforth-fl.s:4583   .text:000000000000283b $d
    stm32eforth-fl.s:4583   .text:000000000000283c $t

UNDEFINED SYMBOLS
_mstack
ARM GAS  stm32eforth-fl.s 			page 113


