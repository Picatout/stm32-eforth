ARM GAS  stm32eforth-fl.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	* 
   8              	*	This version use indirect threaded model. This model enable 
   9              	*	leaving the core Forth system in FLASH memory while the users 
  10              	*	definitions reside in RAM. 
  11              	*	R0 	is used as IP , inner interpreter address pointer 
  12              	*	R4 	is used as WP , working register 
  13              	*	R8 	is used as link register by _NEST macro it is initialized 
  14              	*  		NEST address and MUST BE PRESERVED.
  15              	*
  16              	*     Use USART1 for console I/O
  17              	*     port config: 115200 8N1 
  18              	*     TX on  PA9,  RX on PA10  
  19              	*
  20              	*     eForth is executed from flash, not copied to RAM
  21              	*     eForth use main stack R13 as return stack (thread stack not used) 
  22              	*
  23              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  24              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  25              	*     a 128 bytes tib is reserved below flwr_buffer 
  26              	*     Forth dstack is below tib and reserve 512 bytes 
  27              	*   
  28              	******************************************************
  29              	
  30              	*****************************************************************************
  31              	*	STM32eForth version 7.20
  32              	*	Chen-Hanson Ting,  July 2014
  33              	
  34              	*	Subroutine Threaded Forth Model
  35              	*	Adapted to STM32F407-Discovery Board
  36              	*	Assembled by Keil uVision 5.10
  37              	
  38              	*	Version 4.03
  39              	*	Direct Threaded Forth Model
  40              	*	Derived from 80386 eForth versin 4.02
  41              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  42              	
  43              	*	Subroutine thread (Branch-Link) model
  44              	*	  Register assignments
  45              	*	IP	 	R0 	*scratch
  46              	*	SP	 	R1  * data stack pointer
  47              	*	RP	 	R2 * return stack pointer 
  48              	*	UP	 	R3 
  49              	*	WP	 	R4	*scratch 
  50              	*	TOS	 	R5  * top of data stack
  51              	*	XP	 	R6 	*scratch
  52              	*	YP	 	R7	*scratch
  53              	*	  All Forth words are called by 
  54              	*	BL.W	addr
  55              	*	  All low level code words are terminaled by
  56              	*	BX	LR 	(_RET)
  57              	*	  All high level Forth words start with
ARM GAS  stm32eforth-fl.s 			page 2


  58              	*	STRFD	RP!,{LR}	(_NEST)
  59              	*	  All high level Forth words end with
  60              	*	LDRFD	RP!,{PC}	(_UNNEST)
  61              	*	  Top of data stack is cached in R5
  62              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  63              	*	TX on PA9 and RX on PA10.
  64              	
  65              	*	Version 5.02, 09oct04cht
  66              	*	fOR ADuC702x from Analog Devices
  67              	*	Version 6.01, 10apr08cht a
  68              	*	.p2align 2 to at91sam7x256
  69              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  70              	*	Running under uVision3 RealView from Keil
  71              	*	Version 7.01, 29jun14cht
  72              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  73              	*	.p2aligned to eForth 2 Model
  74              	*	Assembled to flash memory and executed therefrom.
  75              	*	Version 7.10, 30jun14cht
  76              	*	Flash memory mapped to Page 0 where codes are executed
  77              	*	Version 7.20, 02jul14cht
  78              	*	Irreducible Complexity
  79              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  80              	*	TURNKEY saves current application from RAM to flash.
  81              	*********************************************************/
  82              	
  83              	  .syntax unified
  84              	  .cpu cortex-m3
  85              	  .fpu softvfp
  86              	  .thumb
  87              	
  88              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
ARM GAS  stm32eforth-fl.s 			page 3


  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
ARM GAS  stm32eforth-fl.s 			page 4


  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
ARM GAS  stm32eforth-fl.s 			page 5


 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  89              	
  90              	/* blue pill specific constants */ 
  91              	  .equ LED_GPIO, GPIOC_BASE_ADR
  92              	  .equ LED_PIN, 13
  93              	  .equ UART, USART1_BASE_ADR 
  94              	
  95              	/* eForth specific constants */
  96              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  97              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  98              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  99              	.equ UPP ,	0x20000000	/*start of user area (UP0) */
 100              	.equ DTOP ,	0x20000100	/*start of usable RAM area (HERE) */
 101              	.equ DEND , 0x20004E00  /*usable RAM end */
 102              	 .equ RAMOFFSET ,	0x20000000	// remap
 103              	 .equ RAMEND, 0x20005000 // 20Ko
 104              	
 105              	/*************************************
 106              	   system variables offset from UPP
 107              	*************************************/
 108              	  .equ SEED_OFS, 4    // prng seed 
 109              	  .equ TICKS_OFS, SEED_OFS+4  // millseconds counter
 110              	  .equ TIMER_OFS, TICKS_OFS+4  // count down timer
 111              	  .equ FTRACE_OFS, TIMER_OFS+4  // compile to RAM 
 112              	  .equ IMG_SIGN_OFS, FTRACE_OFS+4  // image signature  
 113              	  .equ BOOT_OFS, IMG_SIGN_OFS+4  // boot program address
 114              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
 115              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
 116              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
 117              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
 118              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
 119              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
 120              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
 121              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
 122              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
 123              	  .equ FORTH_CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
 124              	  .equ RAM_CTOP_OFS, FORTH_CTOP_OFS+4  // ram free dictionary address
 125              	  .equ LASTN_OFS, RAM_CTOP_OFS+4     // last word in dictionary link nfa 
 126              	  .equ VARS_END_OFS, LASTN_OFS+4 // end of system variables  
 127              	  
 128              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
 129              	  .equ RX_QUEUE_OFS, VARS_END_OFS+4 // rx queue 
 130              	  .equ RX_HEAD_OFS, RX_QUEUE_OFS+RX_QUEUE_SIZE // queue head indice 
 131              	  .equ RX_TAIL_OFS, RX_HEAD_OFS+4 // queue tail indice 
 132              	  	
 133              	
 134              	/***********************************************
 135              	* MACROS
 136              	*	Assemble inline direct threaded code ending.
 137              	***********************************************/
 138              		.macro _CALL fn /* low level routine call */ 
 139              	 	PUSH {LR}
 140              		BL \fn  
 141              		POP {LR}
 142              		.endm
 143              		
ARM GAS  stm32eforth-fl.s 			page 6


 144              		.macro	_RET /*exit low level call */
 145              		BX LR 
 146              		.endm
 147              	
 148              		.macro _NEXT /* direct jump INEXT */ 
 149              		B INEXT   
 150              		.endm 
 151              	
 152              	 	.macro	_NEST /*start high level word */
 153              		BX R8 // BX R8 
 154              		NOP.N 
 155              		.endm
 156              	
 157              		.macro _ADR label 
 158              		.word 1+\label  
 159              		.endm 
 160              	
 161              	 	.macro	_UNNEST	/*end high level word */
 162              		_ADR UNNEST 
 163              		.endm
 164              	
 165              	 	.macro	_DOLIT u /*long literals */
 166              		_ADR	DOLIT
 167              		.word	\u 
 168              		.endm
 169              	
 170              		.macro _DOTQP len, text 
 171              		_ADR DOTQP 
 172              		.byte \len 
 173              		.ascii "\text" 
 174              		.p2align 2 
 175              		.endm
 176              	
 177              		.macro _COMPI name 
 178              		_DOLIT \name 
 179              		_ADR CALLC 
 180              		.endm 
 181              	
 182              		.macro _ABORQ len,name 
 183              		_ADR ABORQ 
 184              		.byte \len 
 185              		.ascii "\name"
 186              		.p2align 2 
 187              		.endm
 188              	
 189              		.macro _BRAN label 
 190              		_ADR BRAN 
 191              		.word \label 
 192              		.endm 
 193              	
 194              		.macro _QBRAN label 
 195              		_ADR QBRAN 
 196              		.word \label
 197              		.endm 
 198              	
 199              		.macro _DONXT label 
 200              		_ADR DONXT
ARM GAS  stm32eforth-fl.s 			page 7


 201              		.word \label 
 202              		.endm 
 203              	
 204              	 	.macro	_PUSH	/*push R5 on data stack*/
 205              		STR	R5,[R1,#-4]!
 206              		.endm
 207              	
 208              	 	.macro	_POP /*pop data stack to R5 */
 209              		LDR	R5,[R1],#4
 210              		.endm
 211              	
 212              	/*************************************
 213              	*   interrupt service vectors table 
 214              	**************************************/
 215              	   .section  .isr_vector,"a",%progbits
 216              	  .type  isr_vectors, %object
 217              	
 218              	isr_vectors:
 219 0000 00000000 	  .word   _mstack          /* main return stack address */
 220 0004 00000000 	  .word   reset_handler    /* startup address */
 221              	/* core interrupts || exceptions */
 222 0008 00000000 	  .word   default_handler  /*  NMI */
 223 000c 00000000 	  .word   default_handler  /*  HardFault */
 224 0010 00000000 	  .word   default_handler  /*  Memory Management */
 225 0014 00000000 	  .word   default_handler  /* Bus fault */
 226 0018 00000000 	  .word   default_handler  /* Usage fault */
 227 001c 00000000 	  .word   0
 228 0020 00000000 	  .word   0
 229 0024 00000000 	  .word   0
 230 0028 00000000 	  .word   0
 231 002c 00000000 	  .word   default_handler  /* SWI instruction */
 232 0030 00000000 	  .word   default_handler  /* Debug monitor */
 233 0034 00000000 	  .word   0
 234 0038 00000000 	  .word   default_handler  /* PendSV */
 235 003c 00000000 	  .word   systick_handler  /* Systick */
 236              	  
 237              	  /* External Interrupts */
 238 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 239 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 240 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 241 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 242 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 243 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 244 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 245 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 246 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 247 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 248 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 249 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 250 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 251 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 252 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 253 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 254 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 255 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 256 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 257 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
ARM GAS  stm32eforth-fl.s 			page 8


 258 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 259 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 260 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 261 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 262 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 263 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 264 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 265 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 266 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 267 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 268 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 269 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 270 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 271 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 272 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 273 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 274 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 275 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
 276 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 277 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 278 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 279 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 280 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 281 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 282 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 283 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 284 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 285 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 286 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 287 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 288 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 289 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 290 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 291 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 292 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 293 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 294 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 295 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 296 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 297 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 298              	  .size  isr_vectors, .-isr_vectors
 299              	
 300 0130 00000000 		.p2align 8
 300      00000000 
 300      00000000 
 300      00000000 
 300      00000000 
 301              	
 302              	UZERO:
 303 0200 00000000 		.word 0  			/*Reserved */
 304 0204 55AA0000 		.word 0xaa55 /* SEED  */ 
 305 0208 00000000 		.word 0      /* MSEC */
 306 020c 00000000 	    .word 0     /* TIMER */
 307 0210 00000000 		.word 0    /* FTRACE */ 
 308 0214 494D4147 		.ascii "IMAG" /* signature */ 
 309 0218 24290000 		.word HI  /*'BOOT */
 310 021c 0A000000 		.word BASEE 	/*BASE */
ARM GAS  stm32eforth-fl.s 			page 9


 311 0220 00000000 		.word 0			/*tmp */
 312 0224 00000000 		.word 0			/*SPAN */
 313 0228 00000000 		.word 0			/*>IN */
 314 022c 00000000 		.word 0			/*#TIB */
 315 0230 804E0020 		.word TIBB	/*TIB */
 316 0234 741A0000 		.word INTER	/*'EVAL */
 317 0238 00000000 		.word 0			/*HLD */
 318 023c 94290000 		.word LASTN	/*CONTEXT */
 319 0240 0C2A0000 		.word CTOP	/* FCP end of system dictionnary */
 320 0244 00010020 		.word DTOP	/* CP end of RAM dictionary RAM */
 321 0248 94290000 		.word LASTN	/*LAST word in dictionary */
 322 024c 00000000 		.word 0,0			/*reserved */
 322      00000000 
 323              	ULAST:
 324 0254 00000000 		.space  RX_QUEUE_SIZE+8 /* space reserved for rx_queue,head and tail pointer.
 324      00000000 
 324      00000000 
 324      00000000 
 324      00000000 
 325              	
 326              	
 327              	/*****************************************************
 328              	* default isr handler called on unexpected interrupt
 329              	*****************************************************/
 330              	    .section  .text,"ax",%progbits
 331              	  .type default_handler, %function
 332              	  .p2align 2 
 333              	  .global default_handler
 334              	default_handler:
 335 0000 4FF46052 		mov r2,#USART1_BASE_ADR&0xffff
 336 0004 C4F20102 		movt r2,#USART1_BASE_ADR>>16 
 337 0008 064F     		ldr r7,exception_msg 
 338 000a 17F8010B 		ldrb r0,[r7],#1
 339 000e 17F8015B 	1:	ldrb r5,[r7],#1
 340 0012 00F013F8 		bl uart_tx 	 
 341 0016 0138     		subs r0,r0,#1 
 342 0018 F9D1     		bne 1b
 343 001a 1168     	2:	ldr r1,[r2,#USART_SR]
 344 001c 11F0400F 		tst r1,#(1<<6) // TC 
 345 0020 FBD0     		beq 2b 
 346 0022 11E0     		b reboot   
 347              	  .size  default_handler, .-default_handler
 348              	exception_msg:
 349 0024 28000000 		.word .+4 
 350 0028 12       		.byte 18
 351 0029 0D657863 		.ascii "\rexception reboot!"
 351      65707469 
 351      6F6E2072 
 351      65626F6F 
 351      7421
 352 003b 00       		.p2align 2
 353              	
 354              	uart_tx:
 355 003c 1168     		ldr r1,[r2,#USART_SR]
 356 003e 11F0800F 		tst r1,#(1<<7)
 357 0042 FBD0     		beq uart_tx
 358 0044 1571     		strb r5,[r2,#USART_DR] 
ARM GAS  stm32eforth-fl.s 			page 10


 359 0046 7047     		bx lr 
 360              	
 361              	reboot:
 362 0048 0348     		ldr r0,scb_adr 
 363 004a C168     		ldr r1,[r0,#SCB_AIRCR]
 364 004c 41F00401 		orr r1,#(1<<2)
 365 0050 C0F2FA51 		movt r1,#SCB_VECTKEY
 366 0054 C160     		str r1,[r0,#SCB_AIRCR]
 367 0056 FEE7     		b . 
 368              		.p2align 2
 369              	scb_adr:
 370 0058 00ED00E0 		.word SCB_BASE_ADR 
 371              	
 372              	/*********************************
 373              		system milliseconds counter
 374              	*********************************/	
 375              	  .type systick_handler, %function
 376              	  .p2align 2 
 377              	  .global systick_handler
 378              	systick_handler:
 379 005c 4FF00003 	  mov r3,#UPP&0xffff
 380 0060 C2F20003 	  movt r3,#UPP>>16  	
 381 0064 9868     	  ldr r0,[r3,#TICKS_OFS]  
 382 0066 00F10100 	  add r0,#1
 383 006a 9860     	  str r0,[r3,#TICKS_OFS]
 384 006c D868     	  ldr r0,[r3,#TIMER_OFS]
 385 006e 10B1     	  cbz r0, systick_exit
 386 0070 A0F10100 	  sub r0,#1
 387 0074 D860     	  str r0,[r3,#TIMER_OFS]
 388              	systick_exit:
 389 0076 7047     	  bx lr
 390              	
 391              	/**************************
 392              		UART RX handler
 393              	**************************/
 394              		.p2align 2
 395              		.type uart_rx_handler, %function
 396              	uart_rx_handler:
 397 0078 2DE9D002 		push {r4,r6,r7,r9}
 398 007c 4FF46054 		mov r4,#USART1_BASE_ADR&0xffff
 399 0080 C4F20104 		movt r4,#USART1_BASE_ADR>>16
 400 0084 2668     		ldr r6,[r4,#USART_SR]
 401 0086 D4F80490 		ldr r9,[r4,#USART_DR]
 402 008a 16F0200F 		tst r6,#(1<<5) // RXNE 
 403 008e 0DD0     		beq 2f // no char received 
 404 0090 B9F1030F 		cmp r9,#3
 405 0094 D8D0     		beq reboot // received CTRL-C then reboot MCU 
 406 0096 03F15007 		add r7,r3,#RX_QUEUE_OFS
 407 009a 5C6E     		ldr r4,[r3,#RX_TAIL_OFS]
 408 009c 2744     		add r7,r7,r4 
 409 009e 87F80090 		strb r9,[r7]
 410 00a2 04F10104 		add r4,#1 
 411 00a6 04F00F04 		and r4,#(RX_QUEUE_SIZE-1)
 412 00aa 5C66     		str r4,[r3,#RX_TAIL_OFS]
 413              	2:	
 414 00ac BDE8D002 		pop {r4,r6,r7,r9}
 415 00b0 7047     		bx lr 
ARM GAS  stm32eforth-fl.s 			page 11


 416              	
 417              	/**************************************
 418              	  reset_handler execute at MCU reset
 419              	***************************************/
 420              	//    .section  .text.reset_handler
 421              	  .type  reset_handler, %function
 422 00b2 00BF     	  .p2align 2 
 423              	  .global reset_handler
 424              	reset_handler:
 425 00b4 00F07CF8 		bl	remap 
 426 00b8 00F00AF8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 427 00bc 01F08EFD 		bl	unlock			/* unlock flash memory */
 428 00c0 DFF80880 		ldr r8,nest_adr 
 429 00c4 48F00108 		orr r8,r8,#1  
 430 00c8 02F068FC 		bl	COLD
 431              	nest_adr: 
 432 00cc 0C040000 		.word NEST 
 433              	
 434              	  .type init_devices, %function
 435              	  .p2align 2 
 436              	init_devices:
 437              	/* init clock to HSE 72 Mhz */
 438              	/* set 2 wait states in FLASH_ACR_LATENCY */
 439 00d0 4FF40050 		mov r0,#FLASH_BASE_ADR&0xffff
 440 00d4 C4F20200 		movt r0,#FLASH_BASE_ADR>>16 
 441 00d8 4FF01202 	  mov r2,#0x12
 442 00dc 0260     	  str r2,[r0,#FLASH_ACR]
 443              	/* configure clock for HSE, 8 Mhz crystal */
 444              	/* enable HSE in RCC_CR */
 445 00de 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 446 00e2 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 447 00e6 0168     	  ldr r1,[r0,#RCC_CR]
 448 00e8 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 449 00ec 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 450              	/* wait HSERDY loop */
 451              	wait_hserdy:
 452 00ee 0168     	  ldr r1,[r0,#RCC_CR]
 453 00f0 11F4003F 	  tst r1,#(1<<17)
 454 00f4 FBD0     	  beq wait_hserdy
 455              	
 456              	/************************************************* 
 457              	   configure PLL mul factor and source 
 458              	   SYSCLOCK=72 Mhz
 459              	   select HSE as  PLL source clock
 460              	   multiply frequency by 9 
 461              	   APB1 clock is limited to 36 Mhz so divide by 2 
 462              	****************************************************/
 463 00f6 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 464 00fa C0F21D01 	  movt r1,#(7<<2)|1
 465 00fe 4160     	  str r1,[r0,#RCC_CFGR]
 466              	  /* enable PLL */
 467 0100 0168     	  ldr r1,[r0,#RCC_CR]
 468 0102 41F08071 	  orr r1, #1<<24 
 469 0106 0160     	  str r1,[r0,#RCC_CR]
 470              	/* wait for PLLRDY */
 471              	wait_pllrdy:
 472 0108 0168     	  ldr r1,[r0,#RCC_CR]
ARM GAS  stm32eforth-fl.s 			page 12


 473 010a 11F0007F 	  tst r1,#(1<<25)
 474 010e FBD0     	  beq wait_pllrdy 
 475              	/* select PLL as sysclock */
 476 0110 4168     	  ldr r1,[r0,#RCC_CFGR]
 477 0112 4FF6FC72 	  mov r2,#0xfffc
 478 0116 CFF6FF72 	  movt r2,#0xffff
 479 011a 01EA0201 	  and r1,r1,r2 
 480 011e 4FF00202 	  mov r2,#2
 481 0122 41EA0201 	  orr r1,r1,r2
 482 0126 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 483              	/* wait for SWS==2 */
 484              	wait_sws:
 485 0128 4168     	  ldr r1,[r0,#RCC_CFGR]
 486 012a 11F0080F 	  tst r1,#(2<<2)
 487 012e FBD0     	  beq wait_sws
 488              	/* now sysclock is 72 Mhz */
 489              	
 490              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 491 0130 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 492 0134 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 493 0138 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 494 013c 8161     	  str	r1, [r0, #RCC_APB2ENR]
 495              	
 496              	/* configure GPIOC:13 as output for user LED */
 497 013e 4FF48050 	  mov r0,#GPIOC_BASE_ADR&0xffff
 498 0142 C4F20100 	  movt r0,#GPIOC_BASE_ADR>>16
 499 0146 4168     	  ldr r1,[r0,#GPIO_CRH]
 500 0148 6FF47002 	  mvn r2,#(15<<20)
 501 014c 01EA0201 	  and r1,r1,r2
 502 0150 4FF4C002 	  mov r2,#(6<<20)
 503 0154 41EA0201 	  orr r1,r1,r2
 504 0158 4160     	  str r1,[r0,#GPIO_CRH]
 505              	
 506              	/* configure USART1 */
 507              	/* set GPIOA PIN 9, uart TX  */
 508 015a 4FF40060 	  mov r0,#GPIOA_BASE_ADR&0XFFFF
 509 015e C4F20100 	  movt r0,#GPIOA_BASE_ADR>>16	
 510 0162 4168     	  ldr r1,[r0,#GPIO_CRH]
 511 0164 6FF0F002 	  mvn r2,#(15<<4)
 512 0168 01EA0201 	  and r1,r1,r2
 513 016c 4FF0A002 	  mov r2,#(0xA<<4)
 514 0170 41EA0201 	  orr r1,r1,r2 
 515 0174 4160     	  str r1,[r0,#GPIO_CRH]
 516 0176 4FF46050 	  mov r0,#UART&0xFFFF
 517 017a C4F20100 	  movt r0,#UART>>16	
 518              	/* BAUD rate */
 519 017e 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 520 0182 8160     	  str r1,[r0,#USART_BRR]
 521 0184 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 522 0188 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 523              	/* enable interrupt in NVIC */
 524 018a 4FF46140 	  mov r0,#NVIC_BASE_ADR&0xffff
 525 018e CEF20000 	  movt r0,#NVIC_BASE_ADR>>16 
 526 0192 4168     	  ldr r1,[r0,#NVIC_ISER1]
 527 0194 41F02001 	  orr r1,#32   
 528 0198 4160     	  str r1,[r0,#NVIC_ISER1]
 529              	/* configure systicks for 1msec ticks */
ARM GAS  stm32eforth-fl.s 			page 13


 530 019a 4EF21000 	  mov r0,#STK_BASE_ADR&0xFFFF
 531 019e CEF20000 	  movt r0,#STK_BASE_ADR>>16	
 532 01a2 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 533 01a6 4160     	  str r1,[r0,#STK_LOAD]
 534 01a8 4FF00301 	  mov r1,#3
 535 01ac 0160     	  str r1,[r0,STK_CTL]
 536 01ae 7047     	  bx lr  
 537              	
 538              	/* copy system to RAM */ 
 539              	//	.type remap, %function 
 540              	remap:
 541 01b0 0B48     		ldr r0,remap_dest  
 542 01b2 0A49     		ldr r1,remap_src 
 543 01b4 4FF05402 		mov r2,#ULAST-UZERO 
 544 01b8 51F8043B 	1:	ldr r3,[r1],#4 
 545 01bc 40F8043B 		str r3,[r0],#4 
 546 01c0 043A     		subs R2,#4 
 547 01c2 F9D1     		bne 1b
 548              	// zero end of RAM 
 549 01c4 4FF4A042 		mov r2,#0x5000
 550 01c8 C2F20002 		movt r2,#0x2000
 551 01cc 83EA0303 		eor r3,r3,r3 
 552 01d0 40F8043B 	2:  str r3,[r0],#4
 553 01d4 9042     		cmp r0,r2 
 554 01d6 FBDB     		blt 2b 
 555 01d8 7047     		bx lr  
 556 01da 00BF     		.p2align 2
 557              	remap_src:
 558 01dc 00020000 		.word UZERO 
 559              	remap_dest:
 560 01e0 00000020 		.word RAM_ADR  
 561              	
 562              	/********************
 563              	* Version control
 564              	*******************/
 565              	.equ VER ,	0x01	/*major release version */
 566              	.equ EXT ,	0x00	/*minor extension */
 567              	
 568              	/* Constants */
 569              	
 570              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 571              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 572              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 573              	
 574              	.equ CELLL ,	4	/*size of a cell */
 575              	.equ BASEE ,	10	/*default radix */
 576              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 577              	
 578              	.equ BKSPP ,	8	/*backspace */
 579              	.equ LF ,	10	  /*line feed */
 580              	.equ CRR ,	13	/*carriage return */
 581              	.equ ERR ,	27	/*error escape */
 582              	.equ TIC ,	39	/*tick */
 583              	
 584              	/********************************************************
 585              	* RAM memory mapping
 586              	* 	0x20000000	RAM base address
ARM GAS  stm32eforth-fl.s 			page 14


 587              	*	0x20000000  system variables	
 588              	* 	0x20000100	Forth dictionary
 589              	* 	0x2000????	top of dictionary, HERE
 590              	* 	0x2000????	WORD buffer, HERE+16
 591              	*   0x20004E00  end of user space
 592              	* 	0x20004E80	top of data stack  R2
 593              	* 	0x20004E80	TIB terminal input buffer
 594              	* 	0x20004F80	top of return stack  R1
 595              	* 	0x20005000	top of hardware stack for interrupts R14
 596              	********************************************************/
 597              	
 598              	
 599              	/******************************************************
 600              	*  COLD start moves the following to USER variables.
 601              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 602              	******************************************************/
 603 01e4 AFF30080 		.p2align 10
 603      AFF30080 
 603      AFF30080 
 603      AFF30080 
 603      AFF30080 
 604              	
 605              	
 606              	 
 607              	
 608              	/***********************************
 609              	//  Start of eForth system 
 610              	***********************************/
 611              	
 612              		.p2align 2 
 613              	
 614              	// PUSH R5, to be used in colon definition 
 615              	TPUSH:
 616 0400 41F8045D 		_PUSH
 617 0404 06E0     		_NEXT
 618              	
 619              	// POP R5, to be used in colon defintion  
 620              	TPOP:
 621 0406 51F8045B 		_POP 
 622 040a 03E0     		_NEXT
 623              	
 624              	
 625              	// hi level word enter 
 626              	NEST: 
 627 040c 42F8040D 		STMFD	R2!,{R0}
 628 0410 04F10300 		ADD R0,R4,#3
 629              	// inner interprer
 630              	INEXT: 
 631              	/*
 632              		ADD R6,R3,#FTRACE_OFS
 633              		LDR R6,[R6]
 634              		CBZ r6, 1f
 635              		_PUSH 
 636              		LDR R5,[R0]
 637              		SUB R5,#1
 638              		B DBG_PRT
 639              	*/
ARM GAS  stm32eforth-fl.s 			page 15


 640 0414 50F8044B 	1:	LDR R4,[R0],#4 
 641 0418 A047     		BLX R4 
 642              	UNNEST:
 643 041a 01CA     		LDMFD R2!,{R0}
 644 041c FAE7     		B INEXT 
 645              	
 646 041e 00BF     		.p2align 2 
 647              	
 648              	// compile "BX 	R8" 
 649              	// this is the only way 
 650              	// a colon defintion in RAM 
 651              	// can jump to NEST
 652              	// R8 is initialized to NEST address 
 653              	// and must be preserved   
 654              	COMPI_NEST:
 655 0420 03F14406 		add r6,r3,#RAM_CTOP_OFS 
 656 0424 3668     		ldr r6,[r6]
 657 0426 44F24077 		mov r7,#0x4700+(8<<3)
 658 042a 26F8027B 		strh r7,[r6],#2
 659 042e 4FF43F47 		mov r7,#0xbf00 // NOP.N   
 660 0432 26F8027B 		strh r7,[r6],#2 
 661 0436 03F14407 		add r7,r3,#RAM_CTOP_OFS 
 662 043a 3E60     		str r6,[r7]
 663 043c EAE7     		_NEXT  
 664              	
 665              	// RANDOM ( n1 -- {0..n1-1} )
 666              	// return pseudo random number 
 667              	// REF: https://en.wikipedia.org/wiki/Xorshift
 668              	
 669 043e 00000000 		.word 0
 670 0442 06       	_RAND: .byte 6
 671 0443 52414E44 		.ascii "RANDOM"
 671      4F4D
 672 0449 0000BF   		.p2align 2 
 673              	RAND:
 674 044c 404700BF 		_NEST 
 675 0450 390A0000 		_ADR SEED 
 676 0454 ED050000 		_ADR AT 
 677 0458 95060000 		_ADR DUPP 
 678 045c 71050000 		_DOLIT 13
 678      0D000000 
 679 0464 49070000 		_ADR LSHIFT 
 680 0468 01070000 		_ADR XORR  
 681 046c 95060000 		_ADR DUPP 
 682 0470 71050000 		_DOLIT 17 
 682      11000000 
 683 0478 31070000 		_ADR RSHIFT 
 684 047c 01070000 		_ADR XORR 
 685 0480 95060000 		_ADR DUPP
 686 0484 71050000 		_DOLIT 5 
 686      05000000 
 687 048c 49070000 		_ADR LSHIFT 
 688 0490 01070000 		_ADR XORR  
 689 0494 95060000 		_ADR DUPP 
 690 0498 390A0000 		_ADR SEED 
 691 049c D9050000 		_ADR STORE 
 692 04a0 F9080000 		_ADR ABSS
ARM GAS  stm32eforth-fl.s 			page 16


 693 04a4 A5060000 		_ADR SWAP 
 694 04a8 E90C0000 		_ADR MODD 
 695 04ac 1B040000 		_UNNEST 
 696              	
 697              	
 698              	// PAUSE ( u -- ) 
 699              	// suspend execution for u milliseconds
 700 04b0 42040000 		.word _RAND
 701 04b4 05       	_PAUSE: .byte 5
 702 04b5 50415553 		.ascii "PAUSE"
 702      45
 703 04ba 00BF     		.p2align 2
 704              	PAUSE:
 705 04bc 404700BF 		_NEST 
 706 04c0 610A0000 		_ADR TIMER 
 707 04c4 D9050000 		_ADR STORE 
 708              	PAUSE_LOOP:
 709 04c8 610A0000 		_ADR TIMER 
 710 04cc ED050000 		_ADR AT 
 711 04d0 AD050000 		_QBRAN PAUSE_EXIT 
 711      E0040000 
 712 04d8 BF050000 		_BRAN PAUSE_LOOP 
 712      C8040000 
 713              	PAUSE_EXIT: 		
 714 04e0 1B040000 		_UNNEST 
 715              	
 716              	//  ULED ( T|F -- )
 717              	// control user LED, -1 ON, 0 OFF  
 718 04e4 B4040000 		.word _PAUSE
 719 04e8 04       	_ULED: .byte 4
 720 04e9 554C4544 		.ascii "ULED"
 721 04ed 0000BF   		.p2align 2
 722              		.type ULED, %function 
 723              	ULED:
 724 04f0 4FF40056 		mov r6,#(1<<LED_PIN)
 725 04f4 4FF48054 		mov r4,#LED_GPIO&0xffff
 726 04f8 C4F20104 		movt r4,#LED_GPIO>>16
 727 04fc 2D00     		movs r5,r5 
 728 04fe 51F8045B 		_POP
 729 0502 01D0     		beq ULED_OFF 
 730 0504 6661     		str r6,[r4,#GPIO_BRR]
 731 0506 85E7     		_NEXT 
 732              	ULED_OFF:
 733 0508 2661     		str r6,[r4,#GPIO_BSRR]
 734 050a 83E7     		_NEXT    
 735              	
 736              	//    ?KEY	 ( -- c T | F )
 737              	// 	Return input character and true, or a false if no input.
 738 050c E8040000 		.word	_ULED
 739 0510 04       	_QRX:	.byte   4
 740 0511 3F4B4559 		.ascii "?KEY"
 741 0515 0000BF   		.p2align 2 
 742              	QKEY:
 743              	QRX: 
 744 0518 41F8045D 		_PUSH
 745 051c 5F6E     		ldr r7,[r3,#RX_TAIL_OFS] 
 746 051e 1E6E     		ldr r6,[r3,#RX_HEAD_OFS]
ARM GAS  stm32eforth-fl.s 			page 17


 747 0520 96EA0705 		eors r5,r6,r7 
 748 0524 0CD0     		beq 1f
 749 0526 03F15007 		add r7,r3,#RX_QUEUE_OFS 
 750 052a 3744     		add r7,r6 
 751 052c 3D78     		ldrb r5,[r7]
 752 052e 06F10106 		add r6,#1 
 753 0532 06F00F06 		and r6,#(RX_QUEUE_SIZE-1)
 754 0536 1E66     		str r6,[R3,#RX_HEAD_OFS]
 755 0538 41F8045D 		_PUSH 
 756 053c 4FF0FF35 		mov r5,#-1
 757 0540 68E7     	1:	_NEXT 
 758              	
 759              	//    TX!	 ( c -- )
 760              	// 	Send character c to the output device.
 761              	
 762 0542 10050000 		.word	_QRX
 763 0546 04       	_TXSTO:	.byte 4
 764 0547 454D4954 		.ascii "EMIT"
 765 054b 00       		.p2align 2 	
 766              	TXSTO:
 767              	EMIT:
 768              	TECHO:
 769 054c 4FF46054 		mov r4,#UART&0xFFFF
 770 0550 C4F20104 		movt r4,#UART>>16
 771              	TX1:
 772 0554 2688     		ldrh	r6, [r4, #USART_SR]	
 773 0556 16F08006 		ands	r6, #0x80		//  TXE bit 
 774 055a FBD0     		beq	TX1
 775 055c A580     		strh	r5, [r4, #USART_DR]	
 776 055e 51F8045B 		_POP
 777 0562 57E7     		_NEXT 
 778              		
 779              	/***************
 780              	//  The kernel
 781              	***************/
 782              	
 783              	//    NOP	( -- )
 784              	// 	do nothing.
 785              	
 786 0564 46050000 		.word	_TXSTO
 787 0568 03       	_NOP:	.byte   3
 788 0569 4E4F50   		.ascii "NOP"
 789              		.p2align 2 	
 790              	NOP:
 791 056c 52E7     		_NEXT 
 792              	 
 793              	
 794              	//    doLIT	( -- w )
 795              	// 	Push an inline literal.
 796              	
 797              	// 	.word	_NOP
 798              	// _LIT	.byte   COMPO+5
 799              	// 	.ascii "doLIT"
 800 056e 00BF     	 	.p2align 2 	
 801              	DOLIT:
 802 0570 41F8045D 		_PUSH				//  store R5 on data stack
 803 0574 50F8045B 		LDR	R5,[R0],#4		//  get literal at word boundary
ARM GAS  stm32eforth-fl.s 			page 18


 804 0578 4CE7     		_NEXT 
 805              	
 806              	//    EXECUTE	( ca -- )
 807              	// 	Execute the word at ca.
 808              	
 809 057a 68050000 		.word	_NOP
 810 057e 07       	_EXECU:	.byte   7
 811 057f 45584543 		.ascii "EXECUTE"
 811      555445
 812 0586 00BF     		.p2align 2 	
 813              	EXECU: 
 814 0588 45F00104 		ORR	R4,R5,#1 
 815 058c 51F8045B 		_POP
 816 0590 2047     		BX R4 
 817 0592 3FE7     		_NEXT 
 818              	
 819              	//    next	( -- ) counter on R:
 820              	// 	Run time code for the single index loop.
 821              	// 	: next ( -- ) \ hilevel model
 822              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 823              	
 824              	// 	.word	_EXECU
 825              	// _DONXT	.byte   COMPO+4
 826              	// 	.ascii "next"
 827              	// 	.p2align 2 	
 828              	DONXT:
 829 0594 1668     		LDR	R6,[R2]   // ( -- u )  
 830 0596 26B9     		CBNZ R6,NEXT1 
 831              		/* loop done */
 832 0598 02F10402 		ADD	R2,R2,#4 // drop counter 
 833 059c 00F10400 		ADD	R0,R0,#4 // skip after loop address 
 834 05a0 38E7     		_NEXT
 835              	NEXT1:
 836              		/* decrement loop counter */
 837 05a2 A6F10106 		SUB	R6,R6,#1
 838 05a6 1660     		STR	R6,[R2]
 839 05a8 0068     		LDR	R0,[R0]	// go begining of loop 
 840 05aa 33E7     		_NEXT 
 841              	
 842              	//    ?branch	( f -- )
 843              	// 	Branch if flag is zero.
 844              	
 845              	// 	.word	_DONXT
 846              	// _QBRAN	.byte   COMPO+7
 847              	// 	.ascii "?branch"
 848              	// 	.p2align 2 	
 849              	QBRAN:
 850 05ac 2D00     		MOVS	R5,R5
 851 05ae 51F8045B 		_POP
 852 05b2 01D1     		BNE	QBRAN1
 853 05b4 0068     		LDR	R0,[R0]
 854 05b6 2DE7     		_NEXT
 855              	QBRAN1:
 856 05b8 00F10400 	 	ADD	R0,R0,#4
 857 05bc 2AE7     		_NEXT
 858              	
 859              	//    branch	( -- )
ARM GAS  stm32eforth-fl.s 			page 19


 860              	// 	Branch to an inline address.
 861              	
 862              	// 	.word	_QBRAN
 863              	// _BRAN	.byte   COMPO+6
 864              	// 	.ascii "branch"
 865              	// 	.p2align 2 	
 866              	BRAN:
 867 05be 0068     		LDR	R0,[R0]
 868 05c0 28E7     		_NEXT
 869              	
 870              	//    EXIT	(  -- )
 871              	// 	Exit the currently executing command.
 872              	
 873 05c2 7E050000 		.word	_EXECU
 874 05c6 04       	_EXIT:	.byte   4
 875 05c7 45584954 		.ascii "EXIT"
 876 05cb 00       		.p2align 2 	
 877              	EXIT:
 878 05cc 1B040000 		_UNNEST
 879              	
 880              	//    !	   ( w a -- )
 881              	// 	Pop the data stack to memory.
 882              	
 883 05d0 C6050000 		.word	_EXIT
 884 05d4 01       	_STORE:	.byte   1
 885 05d5 21       		.ascii "!"
 886 05d6 00BF     		.p2align 2 	
 887              	STORE:
 888 05d8 51F8044B 		LDR	R4,[R1],#4
 889 05dc 2C60     		STR	R4,[R5]
 890 05de 51F8045B 		_POP
 891 05e2 17E7     		_NEXT 
 892              	
 893              	//    @	   ( a -- w )
 894              	// 	Push memory location to the data stack.
 895              	
 896 05e4 D4050000 		.word	_STORE
 897 05e8 01       	_AT:	.byte   1
 898 05e9 40       		.ascii "@"
 899 05ea 00BF     		.p2align 2 	
 900              	AT:
 901 05ec 2D68     		LDR	R5,[R5]
 902 05ee 11E7     		_NEXT 
 903              	
 904              	//    C!	  ( c b -- )
 905              	// 	Pop the data stack to byte memory.
 906              	
 907 05f0 E8050000 		.word	_AT
 908 05f4 02       	_CSTOR:	.byte   2
 909 05f5 4321     		.ascii "C!"
 910 05f7 00       		.p2align 2 	
 911              	CSTOR:
 912 05f8 51F8044B 		LDR	R4,[R1],#4
 913 05fc 2C70     		STRB R4,[R5]
 914 05fe 51F8045B 		_POP
 915 0602 07E7     		_NEXT
 916              	
ARM GAS  stm32eforth-fl.s 			page 20


 917              	//    C@	  ( b -- c )
 918              	// 	Push byte memory location to the data stack.
 919              	
 920 0604 F4050000 		.word	_CSTOR
 921 0608 02       	_CAT:	.byte   2
 922 0609 4340     		.ascii "C@"
 923 060b 00       		.p2align 2 	
 924              	CAT:
 925 060c 2D78     		LDRB	R5,[R5]
 926 060e 01E7     		_NEXT 
 927              	
 928              	//    R>	  ( -- w )
 929              	// 	Pop the return stack to the data stack.
 930              	
 931 0610 08060000 		.word	_CAT
 932 0614 02       	_RFROM:	.byte   2
 933 0615 523E     		.ascii "R>"
 934 0617 00       		.p2align 2 	
 935              	RFROM:
 936 0618 41F8045D 		_PUSH
 937 061c 52F8045B 		LDR	R5,[R2],#4
 938 0620 F8E6     		_NEXT 
 939              	
 940              	//    R@	  ( -- w )
 941              	// 	Copy top of return stack to the data stack.
 942              	
 943 0622 14060000 		.word	_RFROM
 944 0626 02       	_RAT:	.byte   2
 945 0627 5240     		.ascii "R@"
 946 0629 0000BF   		.p2align 2 	
 947              	RAT:
 948 062c 41F8045D 		_PUSH
 949 0630 1568     		LDR	R5,[R2]
 950 0632 EFE6     		_NEXT 
 951              	
 952              	//    >R	  ( w -- )
 953              	// 	Push the data stack to the return stack.
 954              	
 955 0634 26060000 		.word	_RAT
 956 0638 42       	_TOR:	.byte   COMPO+2
 957 0639 3E52     		.ascii ">R"
 958 063b 00       		.p2align 2 	
 959              	TOR:
 960 063c 42F8045D 		STR	R5,[R2,#-4]!
 961 0640 51F8045B 		_POP
 962 0644 E6E6     		_NEXT
 963              	
 964              	//	RP! ( u -- )
 965              	// initialize RPP with u 
 966 0646 38060000 		.word _TOR 
 967 064a 03       	_RPSTOR: .byte 3 
 968 064b 525021   		.ascii "RP!" 
 969 064e 00BF     		.p2align 2 
 970              	RPSTOR:
 971 0650 2A46     		MOV R2,R5 
 972 0652 51F8045B 		_POP  
 973 0656 DDE6     		_NEXT 
ARM GAS  stm32eforth-fl.s 			page 21


 974              	
 975              	
 976              	//	SP! ( u -- )
 977              	// initialize SPP with u 
 978 0658 4A060000 		.word _RPSTOR  
 979 065c 03       	_SPSTOR: .byte 3 
 980 065d 535021   		.ascii "SP!" 
 981              		.p2align 2 
 982              	SPSTOR:
 983 0660 2946     		MOV R1,R5 
 984 0662 85EA0505 		EOR R5,R5,R5 
 985 0666 D5E6     		_NEXT 
 986              	
 987              	//    SP@	 ( -- a )
 988              	// 	Push the current data stack pointer.
 989              	
 990 0668 5C060000 		.word	_SPSTOR
 991 066c 03       	_SPAT:	.byte   3
 992 066d 535040   		.ascii "SP@"
 993              		.p2align 2 	
 994              	SPAT:
 995 0670 41F8045D 		_PUSH
 996 0674 0D46     		MOV	R5,R1
 997 0676 CDE6     		_NEXT
 998              	
 999              	//    DROP	( w -- )
 1000              	// 	Discard top stack item.
 1001              	
 1002 0678 6C060000 		.word	_SPAT
 1003 067c 04       	_DROP:	.byte   4
 1004 067d 44524F50 		.ascii "DROP"
 1005 0681 0000BF   		.p2align 2 	
 1006              	DROP:
 1007 0684 51F8045B 		_POP
 1008 0688 C4E6     		_NEXT 
 1009              	
 1010              	//    DUP	 ( w -- w w )
 1011              	// 	Duplicate the top stack item.
 1012              	
 1013 068a 7C060000 		.word	_DROP
 1014 068e 03       	_DUPP:	.byte   3
 1015 068f 445550   		.ascii "DUP"
 1016 0692 00BF     		.p2align 2 	
 1017              	DUPP:
 1018 0694 41F8045D 		_PUSH
 1019 0698 BCE6     		_NEXT 
 1020              	
 1021              	//    SWAP	( w1 w2 -- w2 w1 )
 1022              	// 	Exchange top two stack items.
 1023              	
 1024 069a 8E060000 		.word	_DUPP
 1025 069e 04       	_SWAP:	.byte   4
 1026 069f 53574150 		.ascii "SWAP"
 1027 06a3 00       		.p2align 2 	
 1028              	SWAP:
 1029 06a4 0C68     		LDR	R4,[R1]
 1030 06a6 0D60     		STR	R5,[R1]
ARM GAS  stm32eforth-fl.s 			page 22


 1031 06a8 2546     		MOV	R5,R4
 1032 06aa B3E6     		_NEXT 
 1033              	
 1034              	//    OVER	( w1 w2 -- w1 w2 w1 )
 1035              	// 	Copy second stack item to top.
 1036              	
 1037 06ac 9E060000 		.word	_SWAP
 1038 06b0 04       	_OVER:	.byte   4
 1039 06b1 4F564552 		.ascii "OVER"
 1040 06b5 0000BF   		.p2align 2 	
 1041              	OVER:
 1042 06b8 41F8045D 		_PUSH
 1043 06bc 4D68     		LDR	R5,[R1,#4]
 1044 06be A9E6     		_NEXT 
 1045              	
 1046              	//    0<	  ( n -- t )
 1047              	// 	Return true if n is negative.
 1048              	
 1049 06c0 B0060000 		.word	_OVER
 1050 06c4 02       	_ZLESS:	.byte   2
 1051 06c5 303C     		.ascii "0<"
 1052 06c7 00       		.p2align 2 	
 1053              	ZLESS:
 1054              	//	MOV	R4,#0
 1055              	//	ADD	R5,R4,R5,ASR #32
 1056 06c8 4FEAE575 		ASR R5,#31
 1057 06cc A2E6     		_NEXT 
 1058              	
 1059              	//    AND	 ( w w -- w )
 1060              	// 	Bitwise AND.
 1061              	
 1062 06ce C4060000 		.word	_ZLESS
 1063 06d2 03       	_ANDD:	.byte   3
 1064 06d3 414E44   		.ascii "AND"
 1065 06d6 00BF     		.p2align 2 	
 1066              	ANDD:
 1067 06d8 51F8044B 		LDR	R4,[R1],#4
 1068 06dc 05EA0405 		AND	R5,R5,R4
 1069 06e0 98E6     		_NEXT 
 1070              	
 1071              	//    OR	  ( w w -- w )
 1072              	// 	Bitwise inclusive OR.
 1073              	
 1074 06e2 D2060000 		.word	_ANDD
 1075 06e6 02       	_ORR:	.byte   2
 1076 06e7 4F52     		.ascii "OR"
 1077 06e9 0000BF   		.p2align 2 	
 1078              	ORR:
 1079 06ec 51F8044B 		LDR	R4,[R1],#4
 1080 06f0 45EA0405 		ORR	R5,R5,R4
 1081 06f4 8EE6     		_NEXT 
 1082              	
 1083              	//    XOR	 ( w w -- w )
 1084              	// 	Bitwise exclusive OR.
 1085              	
 1086 06f6 E6060000 		.word	_ORR
 1087 06fa 03       	_XORR:	.byte   3
ARM GAS  stm32eforth-fl.s 			page 23


 1088 06fb 584F52   		.ascii "XOR"
 1089 06fe 00BF     		.p2align 2 	
 1090              	XORR:
 1091 0700 51F8044B 		LDR	R4,[R1],#4
 1092 0704 85EA0405 		EOR	R5,R5,R4
 1093 0708 84E6     		_NEXT 
 1094              	
 1095              	//    UM+	 ( w w -- w cy )
 1096              	// 	Add two numbers, return the sum and carry flag.
 1097              	
 1098 070a FA060000 		.word	_XORR
 1099 070e 03       	_UPLUS:	.byte   3
 1100 070f 554D2B   		.ascii "UM+"
 1101 0712 00BF     		.p2align 2 	
 1102              	UPLUS:
 1103 0714 0C68     		LDR	R4,[R1]
 1104 0716 6419     		ADDS	R4,R4,R5
 1105 0718 4FF00005 		MOV	R5,#0
 1106 071c 45F10005 		ADC	R5,R5,#0
 1107 0720 0C60     		STR	R4,[R1]
 1108 0722 77E6     		_NEXT 
 1109              	
 1110              	//    RSHIFT	 ( w # -- w )
 1111              	// 	arithmetic Right shift # bits.
 1112              	
 1113 0724 0E070000 		.word	_UPLUS
 1114 0728 06       	_RSHIFT:	.byte   6
 1115 0729 52534849 		.ascii "RSHIFT"
 1115      4654
 1116 072f 00       		.p2align 2 	
 1117              	RSHIFT:
 1118 0730 51F8044B 		LDR	R4,[R1],#4
 1119 0734 44FA05F5 		MOV	R5,R4,ASR R5
 1120 0738 6CE6     		_NEXT 
 1121              	
 1122              	//    LSHIFT	 ( w # -- w )
 1123              	// 	Right shift # bits.
 1124              	
 1125 073a 28070000 		.word	_RSHIFT
 1126 073e 06       	_LSHIFT:	.byte   6
 1127 073f 4C534849 		.ascii "LSHIFT"
 1127      4654
 1128 0745 0000BF   		.p2align 2 	
 1129              	LSHIFT:
 1130 0748 51F8044B 		LDR	R4,[R1],#4
 1131 074c 04FA05F5 		MOV	R5,R4,LSL R5
 1132 0750 60E6     		_NEXT
 1133              	
 1134              	//    +	 ( w w -- w )
 1135              	// 	Add.
 1136              	
 1137 0752 3E070000 		.word	_LSHIFT
 1138 0756 01       	_PLUS:	.byte   1
 1139 0757 2B       		.ascii "+"
 1140              		.p2align 2 	
 1141              	PLUS:
 1142 0758 51F8044B 		LDR	R4,[R1],#4
ARM GAS  stm32eforth-fl.s 			page 24


 1143 075c 2544     		ADD	R5,R5,R4
 1144 075e 59E6     		_NEXT 
 1145              	
 1146              	//    -	 ( w w -- w )
 1147              	// 	Subtract.
 1148              	
 1149 0760 56070000 		.word	_PLUS
 1150 0764 01       	_SUBB:	.byte   1
 1151 0765 2D       		.ascii "-"
 1152 0766 00BF     		.p2align 2 	
 1153              	SUBB:
 1154 0768 51F8044B 		LDR	R4,[R1],#4
 1155 076c C5EB0405 		RSB	R5,R5,R4
 1156 0770 50E6     		_NEXT 
 1157              	
 1158              	//    *	 ( w w -- w )
 1159              	// 	Multiply.
 1160              	
 1161 0772 64070000 		.word	_SUBB
 1162 0776 01       	_STAR:	.byte   1
 1163 0777 2A       		.ascii "*"
 1164              		.p2align 2 	
 1165              	STAR:
 1166 0778 51F8044B 		LDR	R4,[R1],#4
 1167 077c 04FB05F5 		MUL	R5,R4,R5
 1168 0780 48E6     		_NEXT 
 1169              	
 1170              	//    UM*	 ( w w -- ud )
 1171              	// 	Unsigned multiply.
 1172              	
 1173 0782 76070000 		.word	_STAR
 1174 0786 03       	_UMSTA:	.byte   3
 1175 0787 554D2A   		.ascii "UM*"
 1176 078a 00BF     		.p2align 2 	
 1177              	UMSTA:
 1178 078c 0C68     		LDR	R4,[R1]
 1179 078e A5FB0467 		UMULL	R6,R7,R5,R4
 1180 0792 0E60     		STR	R6,[R1]
 1181 0794 3D46     		MOV	R5,R7
 1182 0796 3DE6     		_NEXT 
 1183              	
 1184              	//    M*	 ( w w -- d )
 1185              	// 	signed multiply.
 1186              	
 1187 0798 86070000 		.word	_UMSTA
 1188 079c 02       	_MSTAR:	.byte   2
 1189 079d 4D2A     		.ascii "M*"
 1190 079f 00       		.p2align 2 	
 1191              	MSTAR:
 1192 07a0 0C68     		LDR	R4,[R1]
 1193 07a2 85FB0467 		SMULL	R6,R7,R5,R4
 1194 07a6 0E60     		STR	R6,[R1]
 1195 07a8 3D46     		MOV	R5,R7
 1196 07aa 33E6     		_NEXT 
 1197              	
 1198              	//    1+	 ( w -- w+1 )
 1199              	// 	Add 1.
ARM GAS  stm32eforth-fl.s 			page 25


 1200              	
 1201 07ac 9C070000 		.word	_MSTAR
 1202 07b0 02       	_ONEP:	.byte   2
 1203 07b1 312B     		.ascii "1+"
 1204 07b3 00       		.p2align 2 	
 1205              	ONEP:
 1206 07b4 05F10105 		ADD	R5,R5,#1
 1207 07b8 2CE6     		_NEXT 
 1208              	
 1209              	//    1-	 ( w -- w-1 )
 1210              	// 	Subtract 1.
 1211              	
 1212 07ba B0070000 		.word	_ONEP
 1213 07be 02       	_ONEM:	.byte   2
 1214 07bf 312D     		.ascii "1-"
 1215 07c1 0000BF   		.p2align 2 	
 1216              	ONEM:
 1217 07c4 A5F10105 		SUB	R5,R5,#1
 1218 07c8 24E6     		_NEXT 
 1219              	
 1220              	//    2+	 ( w -- w+2 )
 1221              	// 	Add 1.
 1222              	
 1223 07ca BE070000 		.word	_ONEM
 1224 07ce 02       	_TWOP:	.byte   2
 1225 07cf 322B     		.ascii "2+"
 1226 07d1 0000BF   		.p2align 2 	
 1227              	TWOP:
 1228 07d4 05F10205 		ADD	R5,R5,#2
 1229 07d8 1CE6     		_NEXT
 1230              	
 1231              	//    2-	 ( w -- w-2 )
 1232              	// 	Subtract 2.
 1233              	
 1234 07da CE070000 		.word	_TWOP
 1235 07de 02       	_TWOM:	.byte   2
 1236 07df 322D     		.ascii "2-"
 1237 07e1 0000BF   		.p2align 2 	
 1238              	TWOM:
 1239 07e4 A5F10205 		SUB	R5,R5,#2
 1240 07e8 14E6     		_NEXT
 1241              	
 1242              	//    CELL+	( w -- w+4 )
 1243              	// 	Add CELLL.
 1244              	
 1245 07ea DE070000 		.word	_TWOM
 1246 07ee 05       	_CELLP:	.byte   5
 1247 07ef 43454C4C 		.ascii "CELL+"
 1247      2B
 1248              		.p2align 2 	
 1249              	CELLP:
 1250 07f4 05F10405 		ADD	R5,R5,#CELLL
 1251 07f8 0CE6     		_NEXT
 1252              	
 1253              	//    CELL-	( w -- w-4 )
 1254              	// 	Subtract CELLL.
 1255              	
ARM GAS  stm32eforth-fl.s 			page 26


 1256 07fa EE070000 		.word	_CELLP
 1257 07fe 05       	_CELLM:	.byte   5
 1258 07ff 43454C4C 		.ascii "CELL-"
 1258      2D
 1259              		.p2align 2 	
 1260              	CELLM:
 1261 0804 A5F10405 		SUB	R5,R5,#CELLL
 1262 0808 04E6     		_NEXT
 1263              	 
 1264              	//    BL	( -- 32 )
 1265              	// 	Blank (ASCII space).
 1266              	
 1267 080a FE070000 		.word	_CELLM
 1268 080e 02       	_BLANK:	.byte   2
 1269 080f 424C     		.ascii "BL"
 1270 0811 0000BF   		.p2align 2 	
 1271              	BLANK:
 1272 0814 41F8045D 		_PUSH
 1273 0818 4FF02005 		MOV	R5,#32
 1274 081c FAE5     		_NEXT 
 1275              	
 1276              	//    CELLS	( w -- w*4 )
 1277              	// 	Multiply 4.
 1278              	
 1279 081e 0E080000 		.word	_BLANK
 1280 0822 05       	_CELLS:	.byte   5
 1281 0823 43454C4C 		.ascii "CELLS"
 1281      53
 1282              		.p2align 2 	
 1283              	CELLS:
 1284 0828 4FEA8505 		MOV	R5,R5,LSL#2
 1285 082c F2E5     		_NEXT
 1286              	
 1287              	//    CELL/	( w -- w/4 )
 1288              	// 	Divide by 4.
 1289              	
 1290 082e 22080000 		.word	_CELLS
 1291 0832 05       	_CELLSL:	.byte   5
 1292 0833 43454C4C 		.ascii "CELL/"
 1292      2F
 1293              		.p2align 2 	
 1294              	CELLSL:
 1295 0838 4FEAA505 		MOV	R5,R5,ASR#2
 1296 083c EAE5     		_NEXT
 1297              	
 1298              	//    2*	( w -- w*2 )
 1299              	// 	Multiply 2.
 1300              	
 1301 083e 32080000 		.word	_CELLSL
 1302 0842 02       	_TWOST:	.byte   2
 1303 0843 322A     		.ascii "2*"
 1304 0845 0000BF   		.p2align 2 	
 1305              	TWOST:
 1306 0848 4FEA4505 		MOV	R5,R5,LSL#1
 1307 084c E2E5     		_NEXT
 1308              	
 1309              	//    2/	( w -- w/2 )
ARM GAS  stm32eforth-fl.s 			page 27


 1310              	// 	Divide by 2.
 1311              	
 1312 084e 42080000 		.word	_TWOST
 1313 0852 02       	_TWOSL:	.byte   2
 1314 0853 322F     		.ascii "2/"
 1315 0855 0000BF   		.p2align 2 	
 1316              	TWOSL:
 1317 0858 4FEA6505 		MOV	R5,R5,ASR#1
 1318 085c DAE5     		_NEXT
 1319              	
 1320              	//    ?DUP	( w -- w w | 0 )
 1321              	// 	Conditional duplicate.
 1322              	
 1323 085e 52080000 		.word	_TWOSL
 1324 0862 04       	_QDUP:	.byte   4
 1325 0863 3F445550 		.ascii "?DUP"
 1326 0867 00       		.p2align 2 	
 1327              	QDUP:
 1328 0868 2C00     		MOVS	R4,R5
 1329 086a 18BF     		IT NE 
 1330 086c 41F8045D 	    STRNE	R5,[R1,#-4]!
 1331 0870 D0E5     		_NEXT
 1332              	
 1333              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1334              	// 	Rotate top 3 items.
 1335              	
 1336 0872 62080000 		.word	_QDUP
 1337 0876 03       	_ROT:	.byte   3
 1338 0877 524F54   		.ascii "ROT"
 1339 087a 00BF     		.p2align 2 	
 1340              	ROT:
 1341 087c 0C68     		LDR	R4,[R1]  // r4=w2 
 1342 087e 0D60     		STR	R5,[R1]  // w3 replace w2 
 1343 0880 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1344 0882 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1345 0884 C6E5     		_NEXT
 1346              	
 1347              	//    2DROP	( w1 w2 -- )
 1348              	// 	Drop top 2 items.
 1349              	
 1350 0886 76080000 		.word	_ROT
 1351 088a 05       	_DDROP:	.byte   5
 1352 088b 3244524F 		.ascii "2DROP"
 1352      50
 1353              		.p2align 2 	
 1354              	DDROP:
 1355 0890 51F8045B 		_POP
 1356 0894 51F8045B 		_POP
 1357 0898 BCE5     		_NEXT 
 1358              	
 1359              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1360              	// 	Duplicate top 2 items.
 1361              	
 1362 089a 8A080000 		.word	_DDROP
 1363 089e 04       	_DDUP:	.byte   4
 1364 089f 32445550 		.ascii "2DUP"
 1365 08a3 00       		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 28


 1366              	DDUP:
 1367 08a4 0C68     		LDR	R4,[R1] // r4=w1
 1368 08a6 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1369 08aa 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1370 08ae B1E5     		_NEXT
 1371              	
 1372              	//    D+	( d1 d2 -- d3 )
 1373              	// 	Add top 2 double numbers.
 1374              	
 1375 08b0 9E080000 		.word	_DDUP
 1376 08b4 02       	_DPLUS:	.byte   2
 1377 08b5 442B     		.ascii "D+"
 1378 08b7 00       		.p2align 2 	
 1379              	DPLUS:
 1380 08b8 51F8044B 		LDR	R4,[R1],#4
 1381 08bc 51F8046B 		LDR	R6,[R1],#4
 1382 08c0 0F68     		LDR	R7,[R1]
 1383 08c2 E419     		ADDS	R4,R4,R7
 1384 08c4 0C60     		STR	R4,[R1]
 1385 08c6 45EB0605 		ADC	R5,R5,R6
 1386 08ca A3E5     		_NEXT
 1387              	
 1388              	//    NOT	 ( w -- !w )
 1389              	// 	1"s complement.
 1390              	
 1391 08cc B4080000 		.word	_DPLUS
 1392 08d0 03       	_INVER:	.byte   3
 1393 08d1 4E4F54   		.ascii "NOT"
 1394              		.p2align 2 	
 1395              	INVER:
 1396 08d4 6FEA0505 		MVN	R5,R5
 1397 08d8 9CE5     		_NEXT
 1398              	
 1399              	//    NEGATE	( w -- -w )
 1400              	// 	2's complement.
 1401              	
 1402 08da D0080000 		.word	_INVER
 1403 08de 06       	_NEGAT:	.byte   6
 1404 08df 4E454741 		.ascii "NEGATE"
 1404      5445
 1405 08e5 0000BF   		.p2align 2 	
 1406              	NEGAT:
 1407 08e8 C5F10005 		RSB	R5,R5,#0
 1408 08ec 92E5     		_NEXT
 1409              	
 1410              	//    ABS	 ( w -- |w| )
 1411              	// 	Absolute.
 1412              	
 1413 08ee DE080000 		.word	_NEGAT
 1414 08f2 03       	_ABSS:	.byte   3
 1415 08f3 414253   		.ascii "ABS"
 1416 08f6 00BF     		.p2align 2 	
 1417              	ABSS:
 1418 08f8 15F0004F 		TST	R5,#0x80000000
 1419 08fc 18BF     		IT NE
 1420 08fe 6D42     	    RSBNE   R5,R5,#0
 1421 0900 88E5     		_NEXT
ARM GAS  stm32eforth-fl.s 			page 29


 1422              	
 1423              	//  0= ( w -- f )
 1424              	// TOS==0?
 1425              	
 1426 0902 F2080000 		.word _ABSS
 1427 0906 02       	_ZEQUAL: .byte 2
 1428 0907 303D     		.ascii "0="
 1429 0909 0000BF   		.p2align 2
 1430              	ZEQUAL:
 1431 090c 15B9     		cbnz r5,1f
 1432 090e 4FF0FF35 		mov r5,#-1
 1433 0912 7FE5     		_NEXT 
 1434 0914 85EA0505 	1:  eor r5,r5,r5  
 1435 0918 7CE5     		_NEXT 	
 1436              	
 1437              	//    =	 ( w w -- t )
 1438              	// 	Equal?
 1439              	
 1440 091a 06090000 		.word	_ZEQUAL
 1441 091e 01       	_EQUAL:	.byte   1
 1442 091f 3D       		.ascii "="
 1443              		.p2align 2 	
 1444              	EQUAL:
 1445 0920 51F8044B 		LDR	R4,[R1],#4
 1446 0924 A542     		CMP	R5,R4
 1447 0926 0CBF     		ITE EQ 
 1448 0928 6FF00005 	    MVNEQ	R5,#0
 1449 092c 0025     		MOVNE	R5,#0
 1450 092e 71E5     		_NEXT
 1451              	
 1452              	//    U<	 ( w w -- t )
 1453              	// 	Unsigned less?
 1454              	
 1455 0930 1E090000 		.word	_EQUAL
 1456 0934 02       	_ULESS:	.byte   2
 1457 0935 553C     		.ascii "U<"
 1458 0937 00       		.p2align 2 	
 1459              	ULESS:
 1460 0938 51F8044B 		LDR	R4,[R1],#4
 1461 093c AC42     		CMP	R4,R5
 1462 093e 34BF     		ITE CC 
 1463 0940 6FF00005 		MVNCC	R5,#0
 1464 0944 0025     		MOVCS	R5,#0
 1465 0946 65E5     		_NEXT
 1466              	
 1467              	//    <	( w w -- t )
 1468              	// 	Less?
 1469              	
 1470 0948 34090000 		.word	_ULESS
 1471 094c 01       	_LESS:	.byte   1
 1472 094d 3C       		.ascii "<"
 1473 094e 00BF     		.p2align 2 	
 1474              	LESS:
 1475 0950 51F8044B 		LDR	R4,[R1],#4
 1476 0954 AC42     		CMP	R4,R5
 1477 0956 B4BF     	    ITE LT
 1478 0958 6FF00005 		MVNLT	R5,#0
ARM GAS  stm32eforth-fl.s 			page 30


 1479 095c 0025     		MOVGE	R5,#0
 1480 095e 59E5     		_NEXT 
 1481              	
 1482              	//    >	( w w -- t )
 1483              	// 	greater?
 1484              	
 1485 0960 4C090000 		.word	_LESS
 1486 0964 01       	_GREAT:	.byte   1
 1487 0965 3E       		.ascii ">"
 1488 0966 00BF     		.p2align 2 	
 1489              	GREAT:
 1490 0968 51F8044B 		LDR	R4,[R1],#4
 1491 096c AC42     		CMP	R4,R5
 1492 096e CCBF     		ITE GT
 1493 0970 6FF00005 	    MVNGT	R5,#0
 1494 0974 0025     		MOVLE	R5,#0
 1495 0976 4DE5     		_NEXT
 1496              	
 1497              	//    MAX	 ( w w -- max )
 1498              	// 	Leave maximum.
 1499              	
 1500 0978 64090000 		.word	_GREAT
 1501 097c 03       	_MAX:	.byte   3
 1502 097d 4D4158   		.ascii "MAX"
 1503              		.p2align 2 	
 1504              	MAX:
 1505 0980 51F8044B 		LDR	R4,[R1],#4
 1506 0984 AC42     		CMP	R4,R5
 1507 0986 C8BF     		IT GT 
 1508 0988 2546     		MOVGT	R5,R4
 1509 098a 43E5     		_NEXT 
 1510              	
 1511              	//    MIN	 ( w w -- min )
 1512              	// 	Leave minimum.
 1513              	
 1514 098c 7C090000 		.word	_MAX
 1515 0990 03       	_MIN:	.byte   3
 1516 0991 4D494E   		.ascii "MIN"
 1517              		.p2align 2 	
 1518              	MIN:
 1519 0994 51F8044B 		LDR	R4,[R1],#4
 1520 0998 AC42     		CMP	R4,R5
 1521 099a B8BF     		IT LT
 1522 099c 2546     		MOVLT	R5,R4
 1523 099e 39E5     		_NEXT
 1524              	
 1525              	//    +!	 ( w a -- )
 1526              	// 	Add to memory.
 1527              	
 1528 09a0 90090000 		.word	_MIN
 1529 09a4 02       	_PSTOR:	.byte   2
 1530 09a5 2B21     		.ascii "+!"
 1531 09a7 00       		.p2align 2 	
 1532              	PSTOR:
 1533 09a8 51F8044B 		LDR	R4,[R1],#4
 1534 09ac 2E68     		LDR	R6,[R5]
 1535 09ae 2644     		ADD	R6,R6,R4
ARM GAS  stm32eforth-fl.s 			page 31


 1536 09b0 2E60     		STR	R6,[R5]
 1537 09b2 51F8045B 		_POP
 1538 09b6 2DE5     		_NEXT
 1539              	
 1540              	//    2!	 ( d a -- )
 1541              	// 	Store double number.
 1542              	
 1543 09b8 A4090000 		.word	_PSTOR
 1544 09bc 02       	_DSTOR:	.byte   2
 1545 09bd 3221     		.ascii "2!"
 1546 09bf 00       		.p2align 2 	
 1547              	DSTOR:
 1548 09c0 51F8044B 		LDR	R4,[R1],#4
 1549 09c4 51F8046B 		LDR	R6,[R1],#4
 1550 09c8 45F8044B 		STR	R4,[R5],#4
 1551 09cc 2E60     		STR	R6,[R5]
 1552 09ce 51F8045B 		_POP
 1553 09d2 1FE5     		_NEXT
 1554              	
 1555              	//    2@	 ( a -- d )
 1556              	// 	Fetch double number.
 1557              	
 1558 09d4 BC090000 		.word	_DSTOR
 1559 09d8 02       	_DAT:	.byte   2
 1560 09d9 3240     		.ascii "2@"
 1561 09db 00       		.p2align 2 	
 1562              	DAT:
 1563 09dc 6C68     		LDR	R4,[R5,#4]
 1564 09de 41F8044D 		STR	R4,[R1,#-4]!
 1565 09e2 2D68     		LDR	R5,[R5]
 1566 09e4 16E5     		_NEXT
 1567              	
 1568              	//    COUNT	( b -- b+1 c )
 1569              	// 	Fetch length of string.
 1570              	
 1571 09e6 D8090000 		.word	_DAT
 1572 09ea 05       	_COUNT:	.byte   5
 1573 09eb 434F554E 		.ascii "COUNT"
 1573      54
 1574              		.p2align 2 	
 1575              	COUNT:
 1576 09f0 15F8014B 		LDRB	R4,[R5],#1
 1577 09f4 41F8045D 		_PUSH
 1578 09f8 2546     		MOV	R5,R4
 1579 09fa 0BE5     		_NEXT
 1580              	
 1581              	//    DNEGATE	( d -- -d )
 1582              	// 	Negate double number.
 1583              	
 1584 09fc EA090000 		.word	_COUNT
 1585 0a00 07       	_DNEGA:	.byte   7
 1586 0a01 444E4547 		.ascii "DNEGATE"
 1586      415445
 1587              		.p2align 2 	
 1588              	DNEGA:
 1589 0a08 0C68     		LDR	R4,[R1]
 1590 0a0a A6EB0606 		SUB	R6,R6,R6
ARM GAS  stm32eforth-fl.s 			page 32


 1591 0a0e 341B     		SUBS R4,R6,R4
 1592 0a10 66EB0505 		SBC	R5,R6,R5
 1593 0a14 0C60     		STR	R4,[R1]
 1594 0a16 FDE4     		_NEXT
 1595              	
 1596              	// **************************************************************************
 1597              	//  System and user variables
 1598              	
 1599              	//    doVAR	( -- a )
 1600              	// 	Run time routine for VARIABLE and CREATE.
 1601              	
 1602              	// 	.word	_DNEGA
 1603              	// _DOVAR	.byte  COMPO+5
 1604              	// 	.ascii "doVAR"
 1605              	// 	.p2align 2 	
 1606              	DOVAR:
 1607 0a18 41F8045D 		_PUSH
 1608 0a1c 0546     		MOV R5,R0
 1609 0a1e 00F10400 		ADD R0,R0,#4 
 1610 0a22 FAE4     		B UNNEST 
 1611              	
 1612              	//    doCON	( -- a ) 
 1613              	// 	Run time routine for CONSTANT.
 1614              	
 1615              	// 	.word	_DOVAR
 1616              	// _DOCON	.byte  COMPO+5
 1617              	// 	.ascii "doCON"
 1618              	// 	.p2align 2 	
 1619              	DOCON:
 1620 0a24 41F8045D 		_PUSH
 1621 0a28 50F8045B 		LDR.W R5,[R0],#4 
 1622 0a2c F5E4     		B UNNEST 
 1623              	
 1624              	/***********************
 1625              	  system variables 
 1626              	***********************/
 1627              	
 1628              	 // SEED ( -- a)
 1629              	 // return PRNG seed address 
 1630              	
 1631 0a2e 000A0000 		.word _DNEGA
 1632 0a32 04       	_SEED: .byte 4
 1633 0a33 53454544 		.ascii "SEED"
 1634 0a37 00       		.p2align 2
 1635              	SEED:
 1636 0a38 41F8045D 		_PUSH 
 1637 0a3c 03F10405 		ADD R5,R3,#SEED_OFS
 1638 0a40 E8E4     		_NEXT 	
 1639              	
 1640              	//  MSEC ( -- a)
 1641              	// return address of milliseconds counter
 1642 0a42 320A0000 	  .word _SEED 
 1643 0a46 04       	_MSEC: .byte 4
 1644 0a47 4D534543 	  .ascii "MSEC"
 1645 0a4b 00       	  .p2align 2 
 1646              	MSEC:
 1647 0a4c 41F8045D 	  _PUSH
ARM GAS  stm32eforth-fl.s 			page 33


 1648 0a50 03F10805 	  ADD R5,R3,#TICKS_OFS
 1649 0a54 DEE4     	  _NEXT 
 1650              	
 1651              	// TIMER ( -- a )
 1652              	// count down timer 
 1653 0a56 460A0000 	  .word _MSEC
 1654 0a5a 05       	_TIMER:  .byte 5
 1655 0a5b 54494D45 	  .ascii "TIMER"
 1655      52
 1656              	  .p2align 2 
 1657              	TIMER:
 1658 0a60 41F8045D 	  _PUSH 
 1659 0a64 03F10C05 	  ADD R5,R3,#TIMER_OFS
 1660 0a68 D4E4     	  _NEXT
 1661              	
 1662              	//    'BOOT	 ( -- a )
 1663              	// 	Application.
 1664              	
 1665 0a6a 5A0A0000 		.word	_TIMER
 1666 0a6e 05       	_TBOOT:	.byte   5
 1667 0a6f 27424F4F 		.ascii "'BOOT"
 1667      54
 1668              		.p2align 2 	
 1669              	TBOOT:
 1670 0a74 41F8045D 		_PUSH
 1671 0a78 03F11805 		ADD	R5,R3,#BOOT_OFS 
 1672 0a7c CAE4     		_NEXT
 1673              		
 1674              	//    BASE	( -- a )
 1675              	// 	Storage of the radix base for numeric I/O.
 1676              	
 1677 0a7e 6E0A0000 		.word	_TBOOT
 1678 0a82 04       	_BASE:	.byte   4
 1679 0a83 42415345 		.ascii "BASE"
 1680 0a87 00       		.p2align 2 	
 1681              	BASE:
 1682 0a88 41F8045D 		_PUSH
 1683 0a8c 03F11C05 		ADD	R5,R3,#BASE_OFS
 1684 0a90 C0E4     		_NEXT
 1685              	
 1686              	//    tmp	 ( -- a )
 1687              	// 	A temporary storage location used in parse and find.
 1688              	
 1689              	// 	.word	_BASE
 1690              	// _TEMP	.byte   COMPO+3
 1691              	// 	.ascii "tmp"
 1692              	// 	.p2align 2 	
 1693              	TEMP:
 1694 0a92 41F8045D 		_PUSH
 1695 0a96 03F12005 		ADD	R5,R3,#TMP_OFS
 1696 0a9a BBE4     		_NEXT
 1697              	
 1698              	//    SPAN	( -- a )
 1699              	// 	Hold character count received by EXPECT.
 1700              	
 1701 0a9c 820A0000 		.word	_BASE
 1702 0aa0 04       	_SPAN:	.byte   4
ARM GAS  stm32eforth-fl.s 			page 34


 1703 0aa1 5350414E 		.ascii "SPAN"
 1704 0aa5 0000BF   		.p2align 2 	
 1705              	SPAN:
 1706 0aa8 41F8045D 		_PUSH
 1707 0aac 03F12405 		ADD	R5,R3,#SPAN_OFS
 1708 0ab0 B0E4     		_NEXT
 1709              	
 1710              	//    >IN	 ( -- a )
 1711              	// 	Hold the character pointer while parsing input stream.
 1712              	
 1713 0ab2 A00A0000 		.word	_SPAN
 1714 0ab6 03       	_INN:	.byte   3
 1715 0ab7 3E494E   		.ascii ">IN"
 1716 0aba 00BF     		.p2align 2 	
 1717              	INN:
 1718 0abc 41F8045D 		_PUSH
 1719 0ac0 03F12805 		ADD	R5,R3,#TOIN_OFS
 1720 0ac4 A6E4     		_NEXT
 1721              	
 1722              	//    #TIB	( -- a )
 1723              	// 	Hold the current count and address of the terminal input buffer.
 1724              	
 1725 0ac6 B60A0000 		.word	_INN
 1726 0aca 04       	_NTIB:	.byte   4
 1727 0acb 23544942 		.ascii "#TIB"
 1728 0acf 00       		.p2align 2 	
 1729              	NTIB:
 1730 0ad0 41F8045D 		_PUSH
 1731 0ad4 03F12C05 		ADD	R5,R3,#NTIB_OFS
 1732 0ad8 9CE4     		_NEXT
 1733              	
 1734              	//    'EVAL	( -- a )
 1735              	// 	Execution vector of EVAL.
 1736              	
 1737 0ada CA0A0000 		.word	_NTIB
 1738 0ade 05       	_TEVAL:	.byte   5
 1739 0adf 27455641 		.ascii "'EVAL"
 1739      4C
 1740              		.p2align 2 	
 1741              	TEVAL:
 1742 0ae4 41F8045D 		_PUSH
 1743 0ae8 03F13405 		ADD	R5,R3,#EVAL_OFS
 1744 0aec 92E4     		_NEXT
 1745              	
 1746              	//    HLD	 ( -- a )
 1747              	// 	Hold a pointer in building a numeric output string.
 1748              	
 1749 0aee DE0A0000 		.word	_TEVAL
 1750 0af2 03       	_HLD:	.byte   3
 1751 0af3 484C44   		.ascii "HLD"
 1752 0af6 00BF     		.p2align 2 	
 1753              	HLD:
 1754 0af8 41F8045D 		_PUSH
 1755 0afc 03F13805 		ADD	R5,R3,#HLD_OFS
 1756 0b00 88E4     		_NEXT
 1757              	
 1758              	//    CONTEXT	( -- a )
ARM GAS  stm32eforth-fl.s 			page 35


 1759              	// 	A area to specify vocabulary search order.
 1760              	
 1761 0b02 F20A0000 		.word	_HLD
 1762 0b06 07       	_CNTXT:	.byte   7
 1763 0b07 434F4E54 		.ascii "CONTEXT"
 1763      455854
 1764 0b0e 00BF     		.p2align 2 	
 1765              	CNTXT:
 1766              	CRRNT:
 1767 0b10 41F8045D 		_PUSH
 1768 0b14 03F13C05 		ADD	R5,R3,#CTXT_OFS
 1769 0b18 7CE4     		_NEXT
 1770              	
 1771              	//    CP	( -- a )
 1772              	// 	Point to top name in RAM vocabulary.
 1773              	
 1774 0b1a 060B0000 		.word	_CNTXT
 1775 0b1e 02       	_CP:	.byte   2
 1776 0b1f 4350     		.ascii "CP"
 1777 0b21 0000BF   		.p2align 2 	
 1778              	CPP:
 1779 0b24 41F8045D 		_PUSH
 1780 0b28 03F14405 		ADD	R5,R3,#RAM_CTOP_OFS
 1781 0b2c 72E4     		_NEXT
 1782              	
 1783              	//   FCP ( -- a )
 1784              	//  Point ot top of Forth system dictionary
 1785 0b2e 1E0B0000 		.word _CP
 1786 0b32 03       	_FCP: .byte 3            
 1787 0b33 464350   		.ascii "FCP"
 1788 0b36 00BF     		.p2align 2 
 1789              	FCP: 
 1790 0b38 41F8045D 		_PUSH 
 1791 0b3c 03F14005 		ADD R5,R3,#FORTH_CTOP_OFS 
 1792 0b40 68E4     		_NEXT 
 1793              	
 1794              	//    LAST	( -- a )
 1795              	// 	Point to the last name in the name dictionary.
 1796              	
 1797 0b42 320B0000 		.word	_FCP
 1798 0b46 04       	_LAST:	.byte   4
 1799 0b47 4C415354 		.ascii "LAST"
 1800 0b4b 00       		.p2align 2 	
 1801              	LAST:
 1802 0b4c 41F8045D 		_PUSH
 1803 0b50 03F14805 		ADD	R5,R3,#LASTN_OFS
 1804 0b54 5EE4     		_NEXT
 1805              	
 1806              	//	FTRACE ( -- a )
 1807              	// return trace flag address 
 1808 0b56 460B0000 		.word _LAST  
 1809 0b5a 06       	_FTRACE: .byte 6
 1810 0b5b 46545241 		.ascii "FTRACE"
 1810      4345
 1811 0b61 0000BF   		.p2align 2 
 1812              	FTRACE:	
 1813 0b64 41F8045D 		_PUSH 
ARM GAS  stm32eforth-fl.s 			page 36


 1814 0b68 03F11005 		ADD R5,R3,#FTRACE_OFS 
 1815 0b6c 52E4     		_NEXT 
 1816              	
 1817              	/***********************
 1818              		system constants 
 1819              	***********************/
 1820              	
 1821              	//	USER_BEGIN ( -- a )
 1822              	//  where user area begin in RAM
 1823 0b6e 5A0B0000 		.word _FTRACE
 1824 0b72 0A       	_USER_BGN: .byte 10
 1825 0b73 55534552 		.ascii "USER_BEGIN"
 1825      5F424547 
 1825      494E
 1826 0b7d 0000BF   		.p2align 2
 1827              	USER_BEGIN:
 1828 0b80 41F8045D 		_PUSH 
 1829 0b84 004D     		ldr r5,USR_BGN_ADR 
 1830 0b86 45E4     		_NEXT 
 1831              	USR_BGN_ADR:
 1832 0b88 00010020 	.word  DTOP 
 1833              	
 1834              	//  USER_END ( -- a )
 1835              	//  where user area end in RAM 
 1836 0b8c 720B0000 		.word _USER_BGN
 1837 0b90 08       	_USER_END: .byte 8 
 1838 0b91 55534552 		.ascii "USER_END" 
 1838      5F454E44 
 1839 0b99 0000BF   		.p2align 2 
 1840              	USER_END:
 1841 0b9c 41F8045D 		_PUSH 
 1842 0ba0 004D     		ldr r5,USER_END_ADR 
 1843 0ba2 37E4     		_NEXT 
 1844              	USER_END_ADR:
 1845 0ba4 004E0020 		.word DEND 
 1846              	
 1847              	//  IMG_ADR ( -- a )
 1848              	//  where user image is saved in FLASH
 1849 0ba8 900B0000 		.word _USER_END
 1850 0bac 07       	_IMG_ADR: .byte 7
 1851 0bad 494D475F 		.ascii "IMG_ADR"
 1851      414452
 1852              		.p2align 2 
 1853              	IMG_ADR:
 1854 0bb4 41F8045D 		_PUSH
 1855 0bb8 004D     		ldr r5,USR_IMG_ADR   
 1856 0bba 2BE4     		_NEXT 
 1857              	USR_IMG_ADR:
 1858 0bbc 00000000 		.word USER_SPACE 
 1859              	
 1860              	// IMG_SIGN ( -- a )
 1861              	// image signature 
 1862 0bc0 AC0B0000 		.word _IMG_ADR 
 1863 0bc4 08       	_IMG_SIGN: .byte 8
 1864 0bc5 494D475F 		.ascii "IMG_SIGN"
 1864      5349474E 
 1865 0bcd 0000BF   		.p2align 2
ARM GAS  stm32eforth-fl.s 			page 37


 1866              	IMG_SIGN: 
 1867 0bd0 41F8045D 		_PUSH 
 1868 0bd4 03F11405 		ADD r5,r3,#IMG_SIGN_OFS 
 1869 0bd8 1CE4     		_NEXT 
 1870              	
 1871              	/* *********************
 1872              	  Common functions
 1873              	***********************/
 1874              	
 1875              	//    WITHIN	( u ul uh -- t )
 1876              	// 	Return true if u is within the range of ul and uh.
 1877              	
 1878 0bda C40B0000 		.word	_IMG_SIGN
 1879 0bde 06       	_WITHI:	.byte   6
 1880 0bdf 57495448 		.ascii "WITHIN"
 1880      494E
 1881 0be5 0000BF   		.p2align 2 	
 1882              	WITHI:
 1883 0be8 404700BF 		_NEST
 1884 0bec B9060000 		_ADR	OVER
 1885 0bf0 69070000 		_ADR	SUBB
 1886 0bf4 3D060000 		_ADR	TOR
 1887 0bf8 69070000 		_ADR	SUBB
 1888 0bfc 19060000 		_ADR	RFROM
 1889 0c00 39090000 		_ADR	ULESS
 1890 0c04 1B040000 		_UNNEST
 1891              	
 1892              	//  Divide
 1893              	
 1894              	//    UM/MOD	( udl udh u -- ur uq )
 1895              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1896              	
 1897 0c08 DE0B0000 		.word	_WITHI
 1898 0c0c 06       	_UMMOD:	.byte   6
 1899 0c0d 554D2F4D 		.ascii "UM/MOD"
 1899      4F44
 1900 0c13 00       		.p2align 2 	
 1901              	UMMOD:
 1902 0c14 4FF00107 		MOV	R7,#1
 1903 0c18 51F8044B 		LDR	R4,[R1],#4
 1904 0c1c 0E68     		LDR	R6,[R1]
 1905              	UMMOD0:
 1906 0c1e B619     		ADDS	R6,R6,R6
 1907 0c20 6441     		ADCS	R4,R4,R4
 1908 0c22 04D3     		BCC	UMMOD1
 1909 0c24 A4EB0504 		SUB	R4,R4,R5
 1910 0c28 06F10106 		ADD	R6,R6,#1
 1911 0c2c 04E0     		B UMMOD2
 1912              	UMMOD1:
 1913 0c2e 641B     		SUBS	R4,R4,R5 
 1914 0c30 28BF     		IT CS 
 1915 0c32 0136     		ADDCS	R6,R6,#1
 1916 0c34 00D2     		BCS	UMMOD2
 1917 0c36 2C44     		ADD	R4,R4,R5
 1918              	UMMOD2:
 1919 0c38 FF19     		ADDS	R7,R7,R7
 1920 0c3a F0D3     		BCC	UMMOD0
ARM GAS  stm32eforth-fl.s 			page 38


 1921 0c3c 3546     		MOV	R5,R6
 1922 0c3e 0C60     		STR	R4,[R1]
 1923 0c40 FFF7E8BB 		_NEXT
 1924              	
 1925              	//    M/MOD	( d n -- r q )
 1926              	// 	Signed floored divide of double by single. Return mod and quotient.
 1927              	
 1928 0c44 0C0C0000 		.word	_UMMOD
 1929 0c48 05       	_MSMOD:	.byte  5
 1930 0c49 4D2F4D4F 		.ascii "M/MOD"
 1930      44
 1931 0c4e 00BF     		.p2align 2 	
 1932              	MSMOD:	
 1933 0c50 404700BF 		_NEST
 1934 0c54 95060000 		_ADR	DUPP
 1935 0c58 C9060000 		_ADR	ZLESS
 1936 0c5c 95060000 		_ADR	DUPP
 1937 0c60 3D060000 		_ADR	TOR
 1938 0c64 AD050000 		_QBRAN MMOD1
 1938      7C0C0000 
 1939 0c6c E9080000 		_ADR	NEGAT
 1940 0c70 3D060000 		_ADR	TOR
 1941 0c74 090A0000 		_ADR	DNEGA
 1942 0c78 19060000 		_ADR	RFROM
 1943              	MMOD1:
 1944 0c7c 3D060000 		_ADR	TOR
 1945 0c80 95060000 		_ADR	DUPP
 1946 0c84 C9060000 		_ADR	ZLESS
 1947 0c88 AD050000 		_QBRAN MMOD2
 1947      980C0000 
 1948 0c90 2D060000 		_ADR	RAT
 1949 0c94 59070000 		_ADR	PLUS
 1950              	MMOD2:
 1951 0c98 19060000 		_ADR	RFROM
 1952 0c9c 150C0000 		_ADR	UMMOD
 1953 0ca0 19060000 		_ADR	RFROM
 1954 0ca4 AD050000 		_QBRAN	MMOD3
 1954      B80C0000 
 1955 0cac A5060000 		_ADR	SWAP
 1956 0cb0 E9080000 		_ADR	NEGAT
 1957 0cb4 A5060000 		_ADR	SWAP
 1958              	MMOD3:   
 1959 0cb8 1B040000 		_UNNEST
 1960              	
 1961              	//    /MOD	( n n -- r q )
 1962              	// 	Signed divide. Return mod and quotient.
 1963              	
 1964 0cbc 480C0000 		.word	_MSMOD
 1965 0cc0 04       	_SLMOD:	.byte   4
 1966 0cc1 2F4D4F44 		.ascii "/MOD"
 1967 0cc5 0000BF   		.p2align 2 	
 1968              	SLMOD:
 1969 0cc8 404700BF 		_NEST
 1970 0ccc B9060000 		_ADR	OVER
 1971 0cd0 C9060000 		_ADR	ZLESS
 1972 0cd4 A5060000 		_ADR	SWAP
 1973 0cd8 510C0000 		_ADR	MSMOD
ARM GAS  stm32eforth-fl.s 			page 39


 1974 0cdc 1B040000 		_UNNEST
 1975              	
 1976              	//    MOD	 ( n n -- r )
 1977              	// 	Signed divide. Return mod only.
 1978              	
 1979 0ce0 C00C0000 		.word	_SLMOD
 1980 0ce4 03       	_MODD:	.byte  3
 1981 0ce5 4D4F44   		.ascii "MOD"
 1982              		.p2align 2 	
 1983              	MODD:
 1984 0ce8 404700BF 		_NEST
 1985 0cec C90C0000 		_ADR	SLMOD
 1986 0cf0 85060000 		_ADR	DROP
 1987 0cf4 1B040000 		_UNNEST
 1988              	
 1989              	//    /	   ( n n -- q )
 1990              	// 	Signed divide. Return quotient only.
 1991              	
 1992 0cf8 E40C0000 		.word	_MODD
 1993 0cfc 01       	_SLASH:	.byte  1
 1994 0cfd 2F       		.ascii "/"
 1995 0cfe 00BF     		.p2align 2 	
 1996              	SLASH:
 1997 0d00 404700BF 		_NEST
 1998 0d04 C90C0000 		_ADR	SLMOD
 1999 0d08 A5060000 		_ADR	SWAP
 2000 0d0c 85060000 		_ADR	DROP
 2001 0d10 1B040000 		_UNNEST
 2002              	
 2003              	//    */MOD	( n1 n2 n3 -- r q )
 2004              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 2005              	
 2006 0d14 FC0C0000 		.word	_SLASH
 2007 0d18 05       	_SSMOD:	.byte  5
 2008 0d19 2A2F4D4F 		.ascii "*/MOD"
 2008      44
 2009 0d1e 00BF     		.p2align 2 	
 2010              	SSMOD:
 2011 0d20 404700BF 		_NEST
 2012 0d24 3D060000 		_ADR	TOR
 2013 0d28 A1070000 		_ADR	MSTAR
 2014 0d2c 19060000 		_ADR	RFROM
 2015 0d30 510C0000 		_ADR	MSMOD
 2016 0d34 1B040000 		_UNNEST
 2017              	
 2018              	//    */	  ( n1 n2 n3 -- q )
 2019              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 2020              	
 2021 0d38 180D0000 		.word	_SSMOD
 2022 0d3c 02       	_STASL:	.byte  2
 2023 0d3d 2A2F     		.ascii "*/"
 2024 0d3f 00       		.p2align 2 	
 2025              	STASL:
 2026 0d40 404700BF 		_NEST
 2027 0d44 210D0000 		_ADR	SSMOD
 2028 0d48 A5060000 		_ADR	SWAP
 2029 0d4c 85060000 		_ADR	DROP
ARM GAS  stm32eforth-fl.s 			page 40


 2030 0d50 1B040000 		_UNNEST
 2031              	
 2032              	// **************************************************************************
 2033              	//  Miscellaneous
 2034              	
 2035              	//    ALIGNED	( b -- a )
 2036              	// 	Align address to the cell boundary.
 2037              	
 2038 0d54 3C0D0000 		.word	_STASL
 2039 0d58 07       	_ALGND:	.byte   7
 2040 0d59 414C4947 		.ascii "ALIGNED"
 2040      4E4544
 2041              		.p2align 2 	
 2042              	ALGND:
 2043 0d60 05F10305 		ADD	R5,R5,#3
 2044 0d64 6FF00304 		MVN	R4,#3
 2045 0d68 05EA0405 		AND	R5,R5,R4
 2046 0d6c FFF752BB 		_NEXT
 2047              	
 2048              	//    >CHAR	( c -- c )
 2049              	// 	Filter non-printing characters.
 2050              	
 2051 0d70 580D0000 		.word	_ALGND
 2052 0d74 05       	_TCHAR:	.byte  5
 2053 0d75 3E434841 		.ascii ">CHAR"
 2053      52
 2054 0d7a 00BF     		.p2align 2 	
 2055              	TCHAR:
 2056 0d7c 404700BF 		_NEST
 2057 0d80 71050000 		_DOLIT  0x7F
 2057      7F000000 
 2058 0d88 D9060000 		_ADR	ANDD
 2059 0d8c 95060000 		_ADR	DUPP	// mask msb
 2060 0d90 15080000 		_ADR	BLANK
 2061 0d94 71050000 		_DOLIT 	127
 2061      7F000000 
 2062 0d9c E90B0000 		_ADR	WITHI	// check for printable
 2063 0da0 D5080000 		_ADR	INVER
 2064 0da4 AD050000 		_QBRAN	TCHA1
 2064      B80D0000 
 2065 0dac 85060000 		_ADR	DROP
 2066 0db0 71050000 		_DOLIT 	'_'	// replace non-printables
 2066      5F000000 
 2067              	TCHA1:
 2068 0db8 1B040000 		  _UNNEST
 2069              	
 2070              	//    DEPTH	( -- n )
 2071              	// 	Return the depth of the data stack.
 2072              	
 2073 0dbc 740D0000 		.word	_TCHAR
 2074 0dc0 05       	_DEPTH:	.byte  5
 2075 0dc1 44455054 		.ascii "DEPTH"
 2075      48
 2076 0dc6 00BF     		.p2align 2 	
 2077              	DEPTH:
 2078 0dc8 44F68066 		MOVW	R6,#SPP&0xffff
 2079 0dcc C2F20006 	 	MOVT	R6,#SPP>>16 
ARM GAS  stm32eforth-fl.s 			page 41


 2080 0dd0 A6EB0106 		SUB	R6,R6,R1
 2081 0dd4 41F8045D 		_PUSH
 2082 0dd8 4FEAA605 		ASR	R5,R6,#2
 2083 0ddc FFF71ABB 		_NEXT
 2084              	
 2085              	//    PICK	( ... +n -- ... w )
 2086              	// 	Copy the nth stack item to tos.
 2087              	
 2088 0de0 C00D0000 		.word	_DEPTH
 2089 0de4 04       	_PICK:	.byte  4
 2090 0de5 5049434B 		.ascii "PICK"
 2091 0de9 0000BF   		.p2align 2 	
 2092              	PICK:
 2093 0dec 404700BF 		_NEST
 2094 0df0 B5070000 		_ADR	ONEP
 2095 0df4 29080000 		_ADR	CELLS
 2096 0df8 71060000 		_ADR	SPAT
 2097 0dfc 59070000 		_ADR	PLUS
 2098 0e00 ED050000 		_ADR	AT
 2099 0e04 1B040000 		_UNNEST
 2100              	
 2101              	// **************************************************************************
 2102              	//  Memory access
 2103              	
 2104              	//    HERE	( -- a )
 2105              	// 	Return the top of the code dictionary.
 2106              	
 2107 0e08 E40D0000 		.word	_PICK
 2108 0e0c 04       	_HERE:	.byte  4
 2109 0e0d 48455245 		.ascii "HERE"
 2110 0e11 0000BF   		.p2align 2 	
 2111              	HERE:
 2112 0e14 404700BF 		_NEST
 2113 0e18 250B0000 		_ADR	CPP
 2114 0e1c ED050000 		_ADR	AT
 2115 0e20 1B040000 		_UNNEST
 2116              		
 2117              	//    PAD	 ( -- a )
 2118              	// 	Return the address of a temporary buffer.
 2119              	
 2120 0e24 0C0E0000 		.word	_HERE
 2121 0e28 03       	_PAD:	.byte  3
 2122 0e29 504144   		.ascii "PAD"
 2123              		.p2align 2 	
 2124              	PAD:
 2125 0e2c 404700BF 		_NEST
 2126 0e30 150E0000 		_ADR	HERE
 2127 0e34 71050000 		_DOLIT 80
 2127      50000000 
 2128 0e3c 59070000 		_ADR PLUS 
 2129 0e40 1B040000 		_UNNEST
 2130              	
 2131              	//    TIB	 ( -- a )
 2132              	// 	Return the address of the terminal input buffer.
 2133              	
 2134 0e44 280E0000 		.word	_PAD
 2135 0e48 03       	_TIB:	.byte  3
ARM GAS  stm32eforth-fl.s 			page 42


 2136 0e49 544942   		.ascii "TIB"
 2137              		.p2align 2 	
 2138              	TIB:
 2139 0e4c 41F8045D 		_PUSH
 2140 0e50 1D6B     		ldr r5,[r3,#TIB_OFS]
 2141 0e52 FFF7DFBA 		_NEXT
 2142              	
 2143              	//    @EXECUTE	( a -- )
 2144              	// 	Execute vector stored in address a.
 2145              	
 2146 0e56 480E0000 		.word	_TIB
 2147 0e5a 08       	_ATEXE:	.byte   8
 2148 0e5b 40455845 		.ascii "@EXECUTE"
 2148      43555445 
 2149 0e63 00       		.p2align 2 	
 2150              	ATEXE: 
 2151 0e64 2C00     		MOVS	R4,R5
 2152 0e66 51F8045B 		_POP
 2153 0e6a 2468     		LDR	R4,[R4]
 2154 0e6c 44F00104 		ORR	R4,R4,#1
 2155 0e70 18BF     	    IT NE 
 2156 0e72 2047     		BXNE	R4
 2157 0e74 FFF7CEBA 		_NEXT
 2158              	
 2159              	//    CMOVE	( b1 b2 u -- )
 2160              	// 	Copy u bytes from b1 to b2.
 2161              	
 2162 0e78 5A0E0000 		.word	_ATEXE
 2163 0e7c 05       	_CMOVE:	.byte   5
 2164 0e7d 434D4F56 		.ascii "CMOVE"
 2164      45
 2165 0e82 00BF     		.p2align 2 	
 2166              	CMOVE:
 2167 0e84 51F8046B 		LDR	R6,[R1],#4
 2168 0e88 51F8047B 		LDR	R7,[R1],#4
 2169 0e8c 03E0     		B CMOV1
 2170              	CMOV0:
 2171 0e8e 17F8014B 		LDRB	R4,[R7],#1
 2172 0e92 06F8014B 		STRB	R4,[R6],#1
 2173              	CMOV1:
 2174 0e96 2D00     		MOVS	R5,R5
 2175 0e98 02D0     		BEQ	CMOV2
 2176 0e9a A5F10105 		SUB	R5,R5,#1
 2177 0e9e F6E7     		B CMOV0
 2178              	CMOV2:
 2179 0ea0 51F8045B 		_POP
 2180 0ea4 FFF7B6BA 		_NEXT
 2181              	
 2182              	//    MOVE	( a1 a2 u -- )
 2183              	// 	Copy u words from a1 to a2.
 2184              	
 2185 0ea8 7C0E0000 		.word	_CMOVE
 2186 0eac 04       	_MOVE:	.byte   4
 2187 0ead 4D4F5645 		.ascii "MOVE"
 2188 0eb1 0000BF   		.p2align 2 	
 2189              	MOVE:
 2190 0eb4 25F00305 		AND	R5,R5,#-4
ARM GAS  stm32eforth-fl.s 			page 43


 2191 0eb8 51F8046B 		LDR	R6,[R1],#4
 2192 0ebc 51F8047B 		LDR	R7,[R1],#4
 2193 0ec0 03E0     		B MOVE1
 2194              	MOVE0:
 2195 0ec2 57F8044B 		LDR	R4,[R7],#4
 2196 0ec6 46F8044B 		STR	R4,[R6],#4
 2197              	MOVE1:
 2198 0eca 2D00     		MOVS	R5,R5
 2199 0ecc 02D0     		BEQ	MOVE2
 2200 0ece A5F10405 		SUB	R5,R5,#4
 2201 0ed2 F6E7     		B MOVE0
 2202              	MOVE2:
 2203 0ed4 51F8045B 		_POP
 2204 0ed8 FFF79CBA 		_NEXT
 2205              	
 2206              	//    FILL	( b u c -- )
 2207              	// 	Fill u bytes of character c to area beginning at b.
 2208              	
 2209 0edc AC0E0000 		.word	_MOVE
 2210 0ee0 04       	_FILL:	.byte   4
 2211 0ee1 46494C4C 		.ascii "FILL"
 2212 0ee5 0000BF   		.p2align 2 	
 2213              	FILL:
 2214 0ee8 51F8046B 		LDR	R6,[R1],#4
 2215 0eec 51F8047B 		LDR	R7,[R1],#4
 2216              	FILL0:
 2217 0ef0 00E0     		B FILL1
 2218 0ef2 2D46     		MOV	R5,R5
 2219              	FILL1:
 2220 0ef4 07F8015B 		STRB	R5,[R7],#1
 2221 0ef8 3600     		MOVS	R6,R6
 2222 0efa 02D0     		BEQ	FILL2
 2223 0efc A6F10106 		SUB	R6,R6,#1
 2224 0f00 F6E7     		B FILL0
 2225              	FILL2:
 2226 0f02 51F8045B 		_POP
 2227 0f06 FFF785BA 		_NEXT
 2228              	
 2229              	//    PACK$	( b u a -- a )
 2230              	// 	Build a counted word with u characters from b. Null fill.
 2231              	
 2232 0f0a E00E0000 		.word	_FILL
 2233 0f0e 05       	_PACKS:	.byte  5
 2234 0f0f 5041434B 		.ascii "PACK$$"
 2234      2424
 2235 0f15 0000BF   		.p2align 2 	
 2236              	PACKS:
 2237 0f18 404700BF 		_NEST
 2238 0f1c 610D0000 		_ADR	ALGND
 2239 0f20 95060000 		_ADR	DUPP
 2240 0f24 3D060000 		_ADR	TOR			// strings only on cell boundary
 2241 0f28 B9060000 		_ADR	OVER
 2242 0f2c 59070000 		_ADR	PLUS
 2243 0f30 B5070000 		_ADR	ONEP
 2244 0f34 71050000 		_DOLIT 	0xFFFFFFFC
 2244      FCFFFFFF 
 2245 0f3c D9060000 		_ADR	ANDD			// count mod cell
ARM GAS  stm32eforth-fl.s 			page 44


 2246 0f40 71050000 		_DOLIT 	0
 2246      00000000 
 2247 0f48 A5060000 		_ADR	SWAP
 2248 0f4c D9050000 		_ADR	STORE			// null fill cell
 2249 0f50 2D060000 		_ADR	RAT
 2250 0f54 A5080000 		_ADR	DDUP
 2251 0f58 F9050000 		_ADR	CSTOR
 2252 0f5c B5070000 		_ADR	ONEP			// save count
 2253 0f60 A5060000 		_ADR	SWAP
 2254 0f64 850E0000 		_ADR	CMOVE
 2255 0f68 19060000 		_ADR	RFROM
 2256 0f6c 1B040000 		_UNNEST   			// move string
 2257              	
 2258              	// **************************************************************************
 2259              	//  Numeric output, single precision
 2260              	
 2261              	//    DIGIT	( u -- c )
 2262              	// 	Convert digit u to a character.
 2263              	
 2264 0f70 0E0F0000 		.word	_PACKS
 2265 0f74 05       	_DIGIT:	.byte  5
 2266 0f75 44494749 		.ascii "DIGIT"
 2266      54
 2267 0f7a 00BF     		.p2align 2 	
 2268              	DIGIT:
 2269 0f7c 404700BF 		_NEST
 2270 0f80 71050000 		_DOLIT 9
 2270      09000000 
 2271 0f88 B9060000 		_ADR	OVER
 2272 0f8c 51090000 		_ADR	LESS
 2273 0f90 71050000 		_DOLIT	7
 2273      07000000 
 2274 0f98 D9060000 		_ADR	ANDD
 2275 0f9c 59070000 		_ADR	PLUS
 2276 0fa0 71050000 		_DOLIT	'0'
 2276      30000000 
 2277 0fa8 59070000 		_ADR	PLUS 
 2278 0fac 1B040000 		_UNNEST
 2279              	
 2280              	//    EXTRACT	( n base -- n c )
 2281              	// 	Extract the least significant digit from n.
 2282              	
 2283 0fb0 740F0000 		.word	_DIGIT
 2284 0fb4 07       	_EXTRC:	.byte  7
 2285 0fb5 45585452 		.ascii "EXTRACT"
 2285      414354
 2286              		.p2align 2 	
 2287              	EXTRC:
 2288 0fbc 404700BF 		_NEST
 2289 0fc0 71050000 		_DOLIT 0
 2289      00000000 
 2290 0fc8 A5060000 		_ADR	SWAP
 2291 0fcc 150C0000 		_ADR	UMMOD
 2292 0fd0 A5060000 		_ADR	SWAP
 2293 0fd4 7D0F0000 		_ADR	DIGIT
 2294 0fd8 1B040000 		_UNNEST
 2295              	
ARM GAS  stm32eforth-fl.s 			page 45


 2296              	//    <#	  ( -- )
 2297              	// 	Initiate the numeric output process.
 2298              	
 2299 0fdc B40F0000 		.word	_EXTRC
 2300 0fe0 02       	_BDIGS:	.byte  2
 2301 0fe1 3C23     		.ascii "<#"
 2302 0fe3 00       		.p2align 2 	
 2303              	BDIGS:
 2304 0fe4 404700BF 		_NEST
 2305 0fe8 2D0E0000 		_ADR	PAD
 2306 0fec F90A0000 		_ADR	HLD
 2307 0ff0 D9050000 		_ADR	STORE
 2308 0ff4 1B040000 		_UNNEST
 2309              	
 2310              	//    HOLD	( c -- )
 2311              	// 	Insert a character into the numeric output string.
 2312              	
 2313 0ff8 E00F0000 		.word	_BDIGS
 2314 0ffc 04       	_HOLD:	.byte  4
 2315 0ffd 484F4C44 		.ascii "HOLD"
 2316 1001 0000BF   		.p2align 2 	
 2317              	HOLD:
 2318 1004 404700BF 		_NEST
 2319 1008 F90A0000 		_ADR	HLD
 2320 100c ED050000 		_ADR	AT
 2321 1010 C5070000 		_ADR	ONEM
 2322 1014 95060000 		_ADR	DUPP
 2323 1018 F90A0000 		_ADR	HLD
 2324 101c D9050000 		_ADR	STORE
 2325 1020 F9050000 		_ADR	CSTOR
 2326 1024 1B040000 		_UNNEST
 2327              	
 2328              	//    #	   ( u -- u )
 2329              	// 	Extract one digit from u and append the digit to output string.
 2330              	
 2331 1028 FC0F0000 		.word	_HOLD
 2332 102c 01       	_DIG:	.byte  1
 2333 102d 23       		.ascii "#"
 2334 102e 00BF     		.p2align 2 	
 2335              	DIG:
 2336 1030 404700BF 		_NEST
 2337 1034 890A0000 		_ADR	BASE
 2338 1038 ED050000 		_ADR	AT
 2339 103c BD0F0000 		_ADR	EXTRC
 2340 1040 05100000 		_ADR	HOLD
 2341 1044 1B040000 		_UNNEST
 2342              	
 2343              	//    #S	  ( u -- 0 )
 2344              	// 	Convert u until all digits are added to the output string.
 2345              	
 2346 1048 2C100000 		.word	_DIG
 2347 104c 02       	_DIGS:	.byte  2
 2348 104d 2353     		.ascii "#S"
 2349 104f 00       		.p2align 2 	
 2350              	DIGS:
 2351 1050 404700BF 		_NEST
 2352              	DIGS1:
ARM GAS  stm32eforth-fl.s 			page 46


 2353 1054 31100000 	    _ADR	DIG
 2354 1058 95060000 		_ADR	DUPP
 2355 105c AD050000 		_QBRAN 	DIGS2
 2355      6C100000 
 2356 1064 BF050000 		_BRAN	DIGS1
 2356      54100000 
 2357              	DIGS2:
 2358 106c 1B040000 		  _UNNEST
 2359              	
 2360              	//    SIGN	( n -- )
 2361              	// 	Add a minus sign to the numeric output string.
 2362              	
 2363 1070 4C100000 		.word	_DIGS
 2364 1074 04       	_SIGN:	.byte  4
 2365 1075 5349474E 		.ascii "SIGN"
 2366 1079 0000BF   		.p2align 2 	
 2367              	SIGN:
 2368 107c 404700BF 		_NEST
 2369 1080 C9060000 		_ADR	ZLESS
 2370 1084 AD050000 		_QBRAN	SIGN1
 2370      98100000 
 2371 108c 71050000 		_DOLIT '-'
 2371      2D000000 
 2372 1094 05100000 		_ADR	HOLD
 2373              	SIGN1:
 2374 1098 1B040000 		  _UNNEST
 2375              	
 2376              	//    #>	  ( w -- b u )
 2377              	// 	Prepare the output word to be TYPE'd.
 2378              	
 2379 109c 74100000 		.word	_SIGN
 2380 10a0 02       	_EDIGS:	.byte  2
 2381 10a1 233E     		.ascii "#>"
 2382 10a3 00       		.p2align 2 	
 2383              	EDIGS:
 2384 10a4 404700BF 		_NEST
 2385 10a8 85060000 		_ADR	DROP
 2386 10ac F90A0000 		_ADR	HLD
 2387 10b0 ED050000 		_ADR	AT
 2388 10b4 2D0E0000 		_ADR	PAD
 2389 10b8 B9060000 		_ADR	OVER
 2390 10bc 69070000 		_ADR	SUBB
 2391 10c0 1B040000 		_UNNEST
 2392              	
 2393              	//    str	 ( n -- b u )
 2394              	// 	Convert a signed integer to a numeric string.
 2395              	
 2396              	// 	.word	_EDIGS
 2397              	// _STRR	.byte  3
 2398              	// 	.ascii "str"
 2399              	// 	.p2align 2 	
 2400              	STRR:
 2401 10c4 404700BF 		_NEST
 2402 10c8 95060000 		_ADR	DUPP
 2403 10cc 3D060000 		_ADR	TOR
 2404 10d0 F9080000 		_ADR	ABSS
 2405 10d4 E50F0000 		_ADR	BDIGS
ARM GAS  stm32eforth-fl.s 			page 47


 2406 10d8 51100000 		_ADR	DIGS
 2407 10dc 19060000 		_ADR	RFROM
 2408 10e0 7D100000 		_ADR	SIGN
 2409 10e4 A5100000 		_ADR	EDIGS
 2410 10e8 1B040000 		_UNNEST
 2411              	
 2412              	//    HEX	 ( -- )
 2413              	// 	Use radix 16 as base for numeric conversions.
 2414              	
 2415 10ec A0100000 		.word	_EDIGS
 2416 10f0 03       	_HEX:	.byte  3
 2417 10f1 484558   		.ascii "HEX"
 2418              		.p2align 2 	
 2419              	HEX:
 2420 10f4 404700BF 		_NEST
 2421 10f8 71050000 		_DOLIT 16
 2421      10000000 
 2422 1100 890A0000 		_ADR	BASE
 2423 1104 D9050000 		_ADR	STORE
 2424 1108 1B040000 		_UNNEST
 2425              	
 2426              	//    DECIMAL	( -- )
 2427              	// 	Use radix 10 as base for numeric conversions.
 2428              	
 2429 110c F0100000 		.word	_HEX
 2430 1110 07       	_DECIM:	.byte  7
 2431 1111 44454349 		.ascii "DECIMAL"
 2431      4D414C
 2432              		.p2align 2 	
 2433              	DECIM:
 2434 1118 404700BF 		_NEST
 2435 111c 71050000 		_DOLIT 10
 2435      0A000000 
 2436 1124 890A0000 		_ADR	BASE
 2437 1128 D9050000 		_ADR	STORE
 2438 112c 1B040000 		_UNNEST
 2439              	
 2440              	// **************************************************************************
 2441              	//  Numeric input, single precision
 2442              	
 2443              	//    DIGIT?	( c base -- u t )
 2444              	// 	Convert a character to its numeric value. A flag indicates success.
 2445              	
 2446 1130 10110000 		.word	_DECIM
 2447 1134 06       	_DIGTQ:	.byte  6
 2448 1135 44494749 		.ascii "DIGIT?"
 2448      543F
 2449 113b 00       		.p2align 2 	
 2450              	DIGTQ:
 2451 113c 404700BF 		_NEST
 2452 1140 3D060000 		_ADR	TOR
 2453 1144 71050000 		_DOLIT 	'0'
 2453      30000000 
 2454 114c 69070000 		_ADR	SUBB
 2455 1150 71050000 		_DOLIT 9
 2455      09000000 
 2456 1158 B9060000 		_ADR	OVER
ARM GAS  stm32eforth-fl.s 			page 48


 2457 115c 51090000 		_ADR	LESS
 2458 1160 AD050000 		_QBRAN	DGTQ1
 2458      88110000 
 2459 1168 71050000 		_DOLIT 7
 2459      07000000 
 2460 1170 69070000 		_ADR	SUBB
 2461 1174 95060000 		_ADR	DUPP
 2462 1178 71050000 		_DOLIT	10
 2462      0A000000 
 2463 1180 51090000 		_ADR	LESS
 2464 1184 ED060000 		_ADR	ORR
 2465              	DGTQ1:
 2466 1188 95060000 		_ADR	DUPP
 2467 118c 19060000 		_ADR	RFROM
 2468 1190 39090000 		_ADR	ULESS
 2469 1194 1B040000 		_UNNEST
 2470              	
 2471              	//    NUMBER?	( a -- n T | a F )
 2472              	// 	Convert a number word to integer. Push a flag on tos.
 2473              	
 2474 1198 34110000 		.word	_DIGTQ
 2475 119c 07       	_NUMBQ:	.byte  7
 2476 119d 4E554D42 		.ascii "NUMBER?"
 2476      45523F
 2477              		.p2align 2 	
 2478              	NUMBQ:
 2479 11a4 404700BF 		_NEST
 2480 11a8 890A0000 		_ADR	BASE
 2481 11ac ED050000 		_ADR	AT
 2482 11b0 3D060000 		_ADR	TOR
 2483 11b4 71050000 		_DOLIT	0
 2483      00000000 
 2484 11bc B9060000 		_ADR	OVER
 2485 11c0 F1090000 		_ADR	COUNT
 2486 11c4 B9060000 		_ADR	OVER
 2487 11c8 0D060000 		_ADR	CAT
 2488 11cc 71050000 		_DOLIT '$'
 2488      24000000 
 2489 11d4 21090000 		_ADR	EQUAL
 2490 11d8 AD050000 		_QBRAN	NUMQ1
 2490      F4110000 
 2491 11e0 F5100000 		_ADR	HEX
 2492 11e4 A5060000 		_ADR	SWAP
 2493 11e8 B5070000 		_ADR	ONEP
 2494 11ec A5060000 		_ADR	SWAP
 2495 11f0 C5070000 		_ADR	ONEM
 2496              	NUMQ1:
 2497 11f4 B9060000 		_ADR	OVER
 2498 11f8 0D060000 		_ADR	CAT
 2499 11fc 71050000 		_DOLIT	'-'
 2499      2D000000 
 2500 1204 21090000 		_ADR	EQUAL
 2501 1208 3D060000 		_ADR	TOR
 2502 120c A5060000 		_ADR	SWAP
 2503 1210 2D060000 		_ADR	RAT
 2504 1214 69070000 		_ADR	SUBB
 2505 1218 A5060000 		_ADR	SWAP
ARM GAS  stm32eforth-fl.s 			page 49


 2506 121c 2D060000 		_ADR	RAT
 2507 1220 59070000 		_ADR	PLUS
 2508 1224 69080000 		_ADR	QDUP
 2509 1228 AD050000 		_QBRAN	NUMQ6
 2509      BC120000 
 2510 1230 C5070000 		_ADR	ONEM
 2511 1234 3D060000 		_ADR	TOR
 2512              	NUMQ2:
 2513 1238 95060000 		_ADR	DUPP
 2514 123c 3D060000 		_ADR	TOR
 2515 1240 0D060000 		_ADR	CAT
 2516 1244 890A0000 		_ADR	BASE
 2517 1248 ED050000 		_ADR	AT
 2518 124c 3D110000 		_ADR	DIGTQ
 2519 1250 AD050000 		_QBRAN	NUMQ4
 2519      A0120000 
 2520 1258 A5060000 		_ADR	SWAP
 2521 125c 890A0000 		_ADR	BASE
 2522 1260 ED050000 		_ADR	AT
 2523 1264 79070000 		_ADR	STAR
 2524 1268 59070000 		_ADR	PLUS
 2525 126c 19060000 		_ADR	RFROM
 2526 1270 B5070000 		_ADR	ONEP
 2527 1274 95050000 		_DONXT	NUMQ2
 2527      38120000 
 2528 127c 2D060000 		_ADR	RAT
 2529 1280 A5060000 		_ADR	SWAP
 2530 1284 85060000 		_ADR	DROP
 2531 1288 AD050000 		_QBRAN	NUMQ3
 2531      94120000 
 2532 1290 E9080000 		_ADR	NEGAT
 2533              	NUMQ3:
 2534 1294 A5060000 		_ADR	SWAP
 2535 1298 BF050000 		_BRAN	NUMQ5
 2535      B8120000 
 2536              	NUMQ4:
 2537 12a0 19060000 		_ADR	RFROM
 2538 12a4 19060000 		_ADR	RFROM
 2539 12a8 91080000 		_ADR	DDROP
 2540 12ac 91080000 		_ADR	DDROP
 2541 12b0 71050000 		_DOLIT	0
 2541      00000000 
 2542              	NUMQ5:
 2543 12b8 95060000 		_ADR	DUPP
 2544              	NUMQ6:
 2545 12bc 19060000 		_ADR	RFROM
 2546 12c0 91080000 		_ADR	DDROP
 2547 12c4 19060000 		_ADR	RFROM
 2548 12c8 890A0000 		_ADR	BASE
 2549 12cc D9050000 		_ADR	STORE
 2550 12d0 1B040000 		_UNNEST
 2551              	
 2552              	// **************************************************************************
 2553              	//  Basic I/O
 2554              	
 2555              	//    KEY	 ( -- c )
 2556              	// 	Wait for and return an input character.
ARM GAS  stm32eforth-fl.s 			page 50


 2557              	
 2558 12d4 9C110000 		.word	_NUMBQ
 2559 12d8 03       	_KEY:	.byte  3
 2560 12d9 4B4559   		.ascii "KEY"
 2561              		.p2align 2 	
 2562              	KEY:
 2563 12dc 404700BF 		_NEST
 2564              	KEY1:
 2565 12e0 19050000 		_ADR	QRX
 2566 12e4 AD050000 		_QBRAN	KEY1
 2566      E0120000 
 2567 12ec 1B040000 		_UNNEST
 2568              	
 2569              	//    SPACE	( -- )
 2570              	// 	Send the blank character to the output device.
 2571              	
 2572 12f0 D8120000 		.word	_KEY
 2573 12f4 05       	_SPACE:	.byte  5
 2574 12f5 53504143 		.ascii "SPACE"
 2574      45
 2575 12fa 00BF     		.p2align 2 	
 2576              	SPACE:
 2577 12fc 404700BF 		_NEST
 2578 1300 15080000 		_ADR	BLANK
 2579 1304 4D050000 		_ADR	EMIT
 2580 1308 1B040000 		_UNNEST
 2581              	
 2582              	//    SPACES	( +n -- )
 2583              	// 	Send n spaces to the output device.
 2584              	
 2585 130c F4120000 		.word	_SPACE
 2586 1310 06       	_SPACS:	.byte  6
 2587 1311 53504143 		.ascii "SPACES"
 2587      4553
 2588 1317 00       		.p2align 2 	
 2589              	SPACS:
 2590 1318 404700BF 		_NEST
 2591 131c 71050000 		_DOLIT	0
 2591      00000000 
 2592 1324 81090000 		_ADR	MAX
 2593 1328 3D060000 		_ADR	TOR
 2594 132c BF050000 		_BRAN	CHAR2
 2594      38130000 
 2595              	CHAR1:
 2596 1334 FD120000 		_ADR	SPACE
 2597              	CHAR2:
 2598 1338 95050000 		_DONXT	CHAR1
 2598      34130000 
 2599 1340 1B040000 		_UNNEST
 2600              	
 2601              	//    TYPE	( b u -- )
 2602              	// 	Output u characters from b.
 2603              	
 2604 1344 10130000 		.word	_SPACS
 2605 1348 04       	_TYPEE:	.byte	4
 2606 1349 54595045 		.ascii "TYPE"
 2607 134d 0000BF   		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 51


 2608              	TYPEE:
 2609 1350 404700BF 		_NEST
 2610 1354 3D060000 		_ADR  TOR   // ( a+1 -- R: u )
 2611 1358 BF050000 		_BRAN	TYPE2
 2611      6C130000 
 2612              	TYPE1:  
 2613 1360 F1090000 		_ADR  COUNT
 2614 1364 7D0D0000 		_ADR TCHAR
 2615 1368 4D050000 		_ADR EMIT
 2616              	TYPE2:  
 2617 136c 95050000 		_DONXT	TYPE1
 2617      60130000 
 2618 1374 85060000 		_ADR	DROP
 2619 1378 1B040000 		_UNNEST
 2620              	
 2621              	//    CR	  ( -- )
 2622              	// 	Output a carriage return and a line feed.
 2623              	
 2624 137c 48130000 		.word	_TYPEE
 2625 1380 02       	_CR:	.byte  2
 2626 1381 4352     		.ascii "CR"
 2627 1383 00       		.p2align 2 	
 2628              	CR:
 2629 1384 404700BF 		_NEST
 2630 1388 71050000 		_DOLIT	CRR
 2630      0D000000 
 2631 1390 4D050000 		_ADR	EMIT
 2632 1394 71050000 		_DOLIT	LF
 2632      0A000000 
 2633 139c 4D050000 		_ADR	EMIT
 2634 13a0 1B040000 		_UNNEST
 2635              	
 2636              	//    do_$	( -- a )
 2637              	// 	Return the address of a compiled string.
 2638              	//  adjust return address to skip over it.
 2639              	
 2640              	// 	.word	_CR
 2641              	// _DOSTR	.byte  COMPO+3
 2642              	// 	.ascii "do$$"
 2643              	// 	.p2align 2 	
 2644              	DOSTR:
 2645 13a4 404700BF 		_NEST     
 2646              	/* compiled string address is 2 levels deep */
 2647 13a8 19060000 		_ADR	RFROM	// { -- a1 }
 2648 13ac 19060000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2649 13b0 95060000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2650 13b4 F1090000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2651 13b8 59070000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2652 13bc 610D0000 		_ADR	ALGND	//  end of string
 2653              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2654 13c0 3D060000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2655 13c4 A5060000 		_ADR	SWAP	//  count tugged
 2656 13c8 3D060000 		_ADR	TOR     //  ( -- a2) is string address
 2657 13cc 1B040000 		_UNNEST
 2658              	
 2659              	//    $"|	( -- a )
 2660              	// 	Run time routine compiled by _". Return address of a compiled string.
ARM GAS  stm32eforth-fl.s 			page 52


 2661              	
 2662              	// 	.word	_DOSTR
 2663              	// _STRQP	.byte  COMPO+3
 2664              	// 	.ascii "$\"|"
 2665              	// 	.p2align 2 	
 2666              	STRQP:
 2667 13d0 404700BF 		_NEST
 2668 13d4 A5130000 		_ADR	DOSTR
 2669 13d8 1B040000 		_UNNEST			// force a call to dostr
 2670              	
 2671              	//    .$	( a -- )
 2672              	// 	Run time routine of ." . Output a compiled string.
 2673              	
 2674              	// 	.word	_STRQP
 2675              	// _DOTST	.byte  COMPO+2
 2676              	// 	.ascii ".$$"
 2677              	// 	.p2align 2 	
 2678              	DOTST:
 2679 13dc 404700BF 		_NEST
 2680 13e0 F1090000 		_ADR	COUNT // ( -- a+1 c )
 2681 13e4 51130000 		_ADR	TYPEE
 2682 13e8 1B040000 		_UNNEST
 2683              	
 2684              	//    ."|	( -- )
 2685              	// 	Run time routine of ." . Output a compiled string.
 2686              	
 2687              	// 	.word	_DOTST
 2688              	// _DOTQP	.byte  COMPO+3
 2689              	// 	.ascii ".""|"
 2690              	// 	.p2align 2 	
 2691              	DOTQP:
 2692 13ec 404700BF 		_NEST
 2693 13f0 A5130000 		_ADR	DOSTR
 2694 13f4 DD130000 		_ADR	DOTST
 2695 13f8 1B040000 		_UNNEST
 2696              	
 2697              	//    .R	  ( n +n -- )
 2698              	// 	Display an integer in a field of n columns, right justified.
 2699              	
 2700 13fc 80130000 		.word	_CR
 2701 1400 02       	_DOTR:	.byte  2
 2702 1401 2E52     		.ascii ".R"
 2703 1403 00       		.p2align 2 	
 2704              	DOTR:
 2705 1404 404700BF 		_NEST
 2706 1408 3D060000 		_ADR	TOR
 2707 140c C5100000 		_ADR	STRR
 2708 1410 19060000 		_ADR	RFROM
 2709 1414 B9060000 		_ADR	OVER
 2710 1418 69070000 		_ADR	SUBB
 2711 141c 19130000 		_ADR	SPACS
 2712 1420 51130000 		_ADR	TYPEE
 2713 1424 1B040000 		_UNNEST
 2714              	
 2715              	//    U.R	 ( u +n -- )
 2716              	// 	Display an unsigned integer in n column, right justified.
 2717              	
ARM GAS  stm32eforth-fl.s 			page 53


 2718 1428 00140000 		.word	_DOTR
 2719 142c 03       	_UDOTR:	.byte  3
 2720 142d 552E52   		.ascii "U.R"
 2721              		.p2align 2 	
 2722              	UDOTR:
 2723 1430 404700BF 		_NEST
 2724 1434 3D060000 		_ADR	TOR
 2725 1438 E50F0000 		_ADR	BDIGS
 2726 143c 51100000 		_ADR	DIGS
 2727 1440 A5100000 		_ADR	EDIGS
 2728 1444 19060000 		_ADR	RFROM
 2729 1448 B9060000 		_ADR	OVER
 2730 144c 69070000 		_ADR	SUBB
 2731 1450 19130000 		_ADR	SPACS
 2732 1454 51130000 		_ADR	TYPEE
 2733 1458 1B040000 		_UNNEST
 2734              	
 2735              	//    U.	  ( u -- )
 2736              	// 	Display an unsigned integer in free format.
 2737              	
 2738 145c 2C140000 		.word	_UDOTR
 2739 1460 02       	_UDOT:	.byte  2
 2740 1461 552E     		.ascii "U."
 2741 1463 00       		.p2align 2 	
 2742              	UDOT:
 2743 1464 404700BF 		_NEST
 2744 1468 E50F0000 		_ADR	BDIGS
 2745 146c 51100000 		_ADR	DIGS
 2746 1470 A5100000 		_ADR	EDIGS
 2747 1474 FD120000 		_ADR	SPACE
 2748 1478 51130000 		_ADR	TYPEE
 2749 147c 1B040000 		_UNNEST
 2750              	
 2751              	//    .	   ( w -- )
 2752              	// 	Display an integer in free format, preceeded by a space.
 2753              	
 2754 1480 60140000 		.word	_UDOT
 2755 1484 01       	_DOT:	.byte  1
 2756 1485 2E       		.ascii "."
 2757 1486 00BF     		.p2align 2 	
 2758              	DOT:
 2759 1488 404700BF 		_NEST
 2760 148c 890A0000 		_ADR	BASE
 2761 1490 ED050000 		_ADR	AT
 2762 1494 71050000 		_DOLIT 10
 2762      0A000000 
 2763 149c 01070000 		_ADR	XORR			// ?decimal
 2764 14a0 AD050000 		_QBRAN	DOT1
 2764      B0140000 
 2765 14a8 65140000 		_ADR	UDOT
 2766 14ac 1B040000 		_UNNEST			// no,display unsigned
 2767              	DOT1:
 2768 14b0 C5100000 	    _ADR	STRR
 2769 14b4 FD120000 		_ADR	SPACE
 2770 14b8 51130000 		_ADR	TYPEE
 2771 14bc 1B040000 		_UNNEST			// yes, display signed
 2772              	
ARM GAS  stm32eforth-fl.s 			page 54


 2773              	//    ?	   ( a -- )
 2774              	// 	Display the contents in a memory cell.
 2775              	
 2776 14c0 84140000 		.word	_DOT
 2777 14c4 01       	_QUEST:	.byte  1
 2778 14c5 3F       		.ascii "?"
 2779 14c6 00BF     		.p2align 2 	
 2780              	QUEST:
 2781 14c8 404700BF 		_NEST
 2782 14cc ED050000 		_ADR	AT
 2783 14d0 89140000 		_ADR	DOT
 2784 14d4 1B040000 		_UNNEST
 2785              	
 2786              	// **************************************************************************
 2787              	//  Parsing
 2788              	
 2789              	//    parse	( b u c -- b u delta //  string> )
 2790              	// 	Scan word delimited by c. Return found string and its offset.
 2791              	
 2792              	// 	.word	_QUEST
 2793              	// _PARS	.byte  5
 2794              	// 	.ascii "parse"
 2795              	// 	.p2align 2 	
 2796              	PARS:
 2797 14d8 404700BF 		_NEST
 2798 14dc 930A0000 		_ADR	TEMP
 2799 14e0 D9050000 		_ADR	STORE
 2800 14e4 B9060000 		_ADR	OVER
 2801 14e8 3D060000 		_ADR	TOR
 2802 14ec 95060000 		_ADR	DUPP
 2803 14f0 AD050000 		_QBRAN	PARS8
 2803      EC150000 
 2804 14f8 C5070000 		_ADR	ONEM
 2805 14fc 930A0000 		_ADR	TEMP
 2806 1500 ED050000 		_ADR	AT
 2807 1504 15080000 		_ADR	BLANK
 2808 1508 21090000 		_ADR	EQUAL
 2809 150c AD050000 		_QBRAN	PARS3
 2809      60150000 
 2810 1514 3D060000 		_ADR	TOR
 2811              	PARS1:
 2812 1518 15080000 		_ADR	BLANK
 2813 151c B9060000 		_ADR	OVER
 2814 1520 0D060000 		_ADR	CAT			// skip leading blanks 
 2815 1524 69070000 		_ADR	SUBB
 2816 1528 C9060000 		_ADR	ZLESS
 2817 152c D5080000 		_ADR	INVER
 2818 1530 AD050000 		_QBRAN	PARS2
 2818      5C150000 
 2819 1538 B5070000 		_ADR	ONEP
 2820 153c 95050000 		_DONXT	PARS1
 2820      18150000 
 2821 1544 19060000 		_ADR	RFROM
 2822 1548 85060000 		_ADR	DROP
 2823 154c 71050000 		_DOLIT	0
 2823      00000000 
 2824 1554 95060000 		_ADR	DUPP
ARM GAS  stm32eforth-fl.s 			page 55


 2825 1558 1B040000 		_UNNEST
 2826              	PARS2:
 2827 155c 19060000 		_ADR	RFROM
 2828              	PARS3:
 2829 1560 B9060000 		_ADR	OVER
 2830 1564 A5060000 		_ADR	SWAP
 2831 1568 3D060000 		_ADR	TOR
 2832              	PARS4:
 2833 156c 930A0000 		_ADR	TEMP
 2834 1570 ED050000 		_ADR	AT
 2835 1574 B9060000 		_ADR	OVER
 2836 1578 0D060000 		_ADR	CAT
 2837 157c 69070000 		_ADR	SUBB			// scan for delimiter
 2838 1580 930A0000 		_ADR	TEMP
 2839 1584 ED050000 		_ADR	AT
 2840 1588 15080000 		_ADR	BLANK
 2841 158c 21090000 		_ADR	EQUAL
 2842 1590 AD050000 		_QBRAN	PARS5
 2842      9C150000 
 2843 1598 C9060000 		_ADR	ZLESS
 2844              	PARS5:
 2845 159c AD050000 		_QBRAN	PARS6
 2845      C0150000 
 2846 15a4 B5070000 		_ADR	ONEP
 2847 15a8 95050000 		_DONXT	PARS4
 2847      6C150000 
 2848 15b0 95060000 		_ADR	DUPP
 2849 15b4 3D060000 		_ADR	TOR
 2850 15b8 BF050000 		_BRAN	PARS7
 2850      D4150000 
 2851              	PARS6:
 2852 15c0 19060000 		_ADR	RFROM
 2853 15c4 85060000 		_ADR	DROP
 2854 15c8 95060000 		_ADR	DUPP
 2855 15cc B5070000 		_ADR	ONEP
 2856 15d0 3D060000 		_ADR	TOR
 2857              	PARS7:
 2858 15d4 B9060000 		_ADR	OVER
 2859 15d8 69070000 		_ADR	SUBB
 2860 15dc 19060000 		_ADR	RFROM
 2861 15e0 19060000 		_ADR	RFROM
 2862 15e4 69070000 		_ADR	SUBB
 2863 15e8 1B040000 		_UNNEST
 2864              	PARS8:
 2865 15ec B9060000 		_ADR	OVER
 2866 15f0 19060000 		_ADR	RFROM
 2867 15f4 69070000 		_ADR	SUBB
 2868 15f8 1B040000 		_UNNEST
 2869              	
 2870              	//    PARSE	( c -- b u //  string> )
 2871              	// 	Scan input stream and return counted string delimited by c.
 2872              	
 2873 15fc C4140000 		.word	_QUEST
 2874 1600 05       	_PARSE:	.byte  5
 2875 1601 50415253 		.ascii "PARSE"
 2875      45
 2876 1606 00BF     		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 56


 2877              	PARSE:
 2878 1608 404700BF 		_NEST
 2879 160c 3D060000 		_ADR	TOR
 2880 1610 4D0E0000 		_ADR	TIB
 2881 1614 BD0A0000 		_ADR	INN
 2882 1618 ED050000 		_ADR	AT
 2883 161c 59070000 		_ADR	PLUS			// current input buffer pointer
 2884 1620 D10A0000 		_ADR	NTIB
 2885 1624 ED050000 		_ADR	AT
 2886 1628 BD0A0000 		_ADR	INN
 2887 162c ED050000 		_ADR	AT
 2888 1630 69070000 		_ADR	SUBB			// remaining count
 2889 1634 19060000 		_ADR	RFROM
 2890 1638 D9140000 		_ADR	PARS
 2891 163c BD0A0000 		_ADR	INN
 2892 1640 A9090000 		_ADR	PSTOR
 2893 1644 1B040000 		_UNNEST
 2894              	
 2895              	//    .(	  ( -- )
 2896              	// 	Output following string up to next ) .
 2897              	
 2898 1648 00160000 		.word	_PARSE
 2899 164c 82       	_DOTPR:	.byte  IMEDD+2
 2900 164d 2E28     		.ascii ".("
 2901 164f 00       		.p2align 2 	
 2902              	DOTPR:
 2903 1650 404700BF 		_NEST
 2904 1654 71050000 		_DOLIT	')'
 2904      29000000 
 2905 165c 09160000 		_ADR	PARSE
 2906 1660 51130000 		_ADR	TYPEE
 2907 1664 1B040000 		_UNNEST
 2908              	
 2909              	//    (	   ( -- )
 2910              	// 	Ignore following string up to next ) . A comment.
 2911              	
 2912 1668 4C160000 		.word	_DOTPR
 2913 166c 81       	_PAREN:	.byte  IMEDD+1
 2914 166d 28       		.ascii "("
 2915 166e 00BF     		.p2align 2 	
 2916              	PAREN:
 2917 1670 404700BF 		_NEST
 2918 1674 71050000 		_DOLIT	')'
 2918      29000000 
 2919 167c 09160000 		_ADR	PARSE
 2920 1680 91080000 		_ADR	DDROP
 2921 1684 1B040000 		_UNNEST
 2922              	
 2923              	//    \	   ( -- )
 2924              	// 	Ignore following text till the end of line.
 2925              	
 2926 1688 6C160000 		.word	_PAREN
 2927 168c 81       	_BKSLA:	.byte  IMEDD+1
 2928 168d 5C       		.byte	'\\'
 2929 168e 00BF     		.p2align 2 	
 2930              	BKSLA:
 2931 1690 404700BF 		_NEST
ARM GAS  stm32eforth-fl.s 			page 57


 2932 1694 D10A0000 		_ADR	NTIB
 2933 1698 ED050000 		_ADR	AT
 2934 169c BD0A0000 		_ADR	INN
 2935 16a0 D9050000 		_ADR	STORE
 2936 16a4 1B040000 		_UNNEST
 2937              	
 2938              	//    CHAR	( -- c )
 2939              	// 	Parse next word and return its first character.
 2940              	
 2941 16a8 8C160000 		.word	_BKSLA
 2942 16ac 04       	_CHAR:	.byte  4
 2943 16ad 43484152 		.ascii "CHAR"
 2944 16b1 0000BF   		.p2align 2 	
 2945              	CHAR:
 2946 16b4 404700BF 		_NEST
 2947 16b8 15080000 		_ADR	BLANK
 2948 16bc 09160000 		_ADR	PARSE
 2949 16c0 85060000 		_ADR	DROP
 2950 16c4 0D060000 		_ADR	CAT
 2951 16c8 1B040000 		_UNNEST
 2952              	
 2953              	//    WORD	( c -- a //  string> )
 2954              	// 	Parse a word from input stream and copy it to code dictionary.
 2955              	
 2956 16cc AC160000 		.word	_CHAR
 2957 16d0 04       	_WORDD:	.byte  4
 2958 16d1 574F5244 		.ascii "WORD"
 2959 16d5 0000BF   		.p2align 2 	
 2960              	WORDD:
 2961 16d8 404700BF 		_NEST
 2962 16dc 09160000 		_ADR	PARSE
 2963 16e0 150E0000 		_ADR	HERE
 2964 16e4 F5070000 		_ADR	CELLP
 2965 16e8 190F0000 		_ADR	PACKS
 2966 16ec 1B040000 		_UNNEST
 2967              	
 2968              	//    TOKEN	( -- a //  string> )
 2969              	// 	Parse a word from input stream and copy it to name dictionary.
 2970              	
 2971 16f0 D0160000 		.word	_WORDD
 2972 16f4 05       	_TOKEN:	.byte  5
 2973 16f5 544F4B45 		.ascii "TOKEN"
 2973      4E
 2974 16fa 00BF     		.p2align 2 	
 2975              	TOKEN:
 2976 16fc 404700BF 		_NEST
 2977 1700 15080000 		_ADR	BLANK
 2978 1704 D9160000 		_ADR	WORDD
 2979 1708 1B040000 		_UNNEST
 2980              	
 2981              	// **************************************************************************
 2982              	//  Dictionary search
 2983              	
 2984              	//    NAME>	( na -- ca )
 2985              	// 	Return a code address given a name address.
 2986              	
 2987 170c F4160000 		.word	_TOKEN
ARM GAS  stm32eforth-fl.s 			page 58


 2988 1710 05       	_NAMET:	.byte  5
 2989 1711 4E414D45 		.ascii "NAME>"
 2989      3E
 2990 1716 00BF     		.p2align 2 	
 2991              	NAMET:
 2992 1718 404700BF 		_NEST
 2993 171c F1090000 		_ADR	COUNT
 2994 1720 71050000 		_DOLIT	0x1F
 2994      1F000000 
 2995 1728 D9060000 		_ADR	ANDD
 2996 172c 59070000 		_ADR	PLUS
 2997 1730 610D0000 		_ADR	ALGND
 2998 1734 1B040000 		_UNNEST
 2999              	
 3000              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 3001              	// 	Compare u bytes in two strings. Return 0 if identical.
 3002              	//
 3003              	//  Picatout 2020-12-01, 
 3004              	//      Because of problem with .align directive that
 3005              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 3006              	// 		words  to do a byte by byte comparison. 
 3007              	//
 3008 1738 10170000 		.word	_NAMET
 3009 173c 05       	_SAMEQ:	.byte  5
 3010 173d 53414D45 		.ascii "SAME?"
 3010      3F
 3011 1742 00BF     		.p2align 2	
 3012              	SAMEQ:
 3013 1744 404700BF 		_NEST
 3014 1748 3D060000 		_ADR	TOR
 3015 174c BF050000 		_BRAN	SAME2
 3015      90170000 
 3016              	SAME1:
 3017 1754 B9060000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 3018 1758 2D060000 		_ADR	RAT   // a1 a2 a1 u 
 3019 175c 59070000 		_ADR	PLUS  // a1 a2 a1+u 
 3020 1760 0D060000 		_ADR	CAT	   // a1 a2 c1    		
 3021 1764 B9060000 		_ADR	OVER  // a1 a2 c1 a2 
 3022 1768 2D060000 		_ADR	RAT    
 3023 176c 59070000 		_ADR	PLUS    
 3024 1770 0D060000 		_ADR	CAT	  // a1 a2 c1 c2
 3025 1774 69070000 		_ADR	SUBB  
 3026 1778 69080000 		_ADR	QDUP
 3027 177c AD050000 		_QBRAN	SAME2
 3027      90170000 
 3028 1784 19060000 		_ADR	RFROM
 3029 1788 85060000 		_ADR	DROP
 3030 178c 1B040000 		_UNNEST	// strings not equal
 3031              	SAME2:
 3032 1790 95050000 		_DONXT	SAME1
 3032      54170000 
 3033 1798 71050000 		_DOLIT	0
 3033      00000000 
 3034 17a0 1B040000 		_UNNEST	// strings equal
 3035              	
 3036              	//    find	( a na -- ca na | a F )
 3037              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
ARM GAS  stm32eforth-fl.s 			page 59


 3038              	
 3039              	//  Picatout 2020-12-01,  
 3040              	//		Modified from original. See comment for word "SAME?" 
 3041              	
 3042              	// 	.word	_SAMEQ
 3043              	// _FIND	.byte  4
 3044              	// 	.ascii "find"
 3045              	// 	.p2align 2 	
 3046              	FIND:
 3047 17a4 404700BF 		_NEST
 3048 17a8 A5060000 		_ADR	SWAP			// na a	
 3049 17ac F1090000 		_ADR	COUNT			// na a+1 count
 3050 17b0 95060000 		_ADR	DUPP 
 3051 17b4 930A0000 		_ADR	TEMP
 3052 17b8 D9050000 		_ADR	STORE			// na a+1 count 
 3053 17bc 3D060000 		_ADR  TOR		// na a+1  R: count  
 3054 17c0 A5060000 		_ADR	SWAP			// a+1 na
 3055              	FIND1:
 3056 17c4 95060000 		_ADR	DUPP			// a+1 na na
 3057 17c8 AD050000 		_QBRAN	FIND6	// end of vocabulary
 3057      1C180000 
 3058 17d0 95060000 		_ADR	DUPP			// a+1 na na
 3059 17d4 0D060000 		_ADR	CAT			// a+1 na name1
 3060 17d8 71050000 		_DOLIT	MASKK
 3060      1FFFFFFF 
 3061 17e0 D9060000 		_ADR	ANDD
 3062 17e4 2D060000 		_ADR	RAT			// a+1 na name1 count 
 3063 17e8 01070000 		_ADR	XORR			// a+1 na,  same length?
 3064 17ec AD050000 		_QBRAN	FIND2
 3064      04180000 
 3065 17f4 05080000 		_ADR	CELLM			// a+1 la
 3066 17f8 ED050000 		_ADR	AT			// a+1 next_na
 3067 17fc BF050000 		_BRAN	FIND1			// try next word
 3067      C4170000 
 3068              	FIND2:   
 3069 1804 B5070000 		_ADR	ONEP			// a+1 na+1
 3070 1808 930A0000 		_ADR	TEMP
 3071 180c ED050000 		_ADR	AT			// a+1 na+1 count
 3072 1810 45170000 		_ADR	SAMEQ		// a+1 na+1 ? 
 3073              	FIND3:	
 3074 1814 BF050000 		_BRAN	FIND4
 3074      34180000 
 3075              	FIND6:	
 3076 181c 19060000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 3077 1820 85060000 		_ADR	DROP			// a+1 0
 3078 1824 A5060000 		_ADR	SWAP			// 0 a+1
 3079 1828 C5070000 		_ADR	ONEM			// 0 a
 3080 182c A5060000 		_ADR	SWAP			// a 0 
 3081 1830 1B040000 		_UNNEST			// return without a match
 3082              	FIND4:	
 3083 1834 AD050000 		_QBRAN	FIND5			// a+1 na+1
 3083      50180000 
 3084 183c C5070000 		_ADR	ONEM			// a+1 na
 3085 1840 05080000 		_ADR	CELLM			// a+4 la
 3086 1844 ED050000 		_ADR	AT			// a+1 next_na
 3087 1848 BF050000 		_BRAN	FIND1			// compare next name
 3087      C4170000 
ARM GAS  stm32eforth-fl.s 			page 60


 3088              	FIND5:	
 3089 1850 19060000 		_ADR	RFROM			// a+1 na+1 count
 3090 1854 85060000 		_ADR	DROP			// a+1 na+1
 3091 1858 A5060000 		_ADR	SWAP			// na+1 a+1
 3092 185c 85060000 		_ADR	DROP			// na+1
 3093 1860 C5070000 		_ADR	ONEM			// na
 3094 1864 95060000 		_ADR	DUPP			// na na
 3095 1868 19170000 		_ADR	NAMET			// na ca
 3096 186c A5060000 		_ADR	SWAP			// ca na
 3097 1870 1B040000 		_UNNEST			//  return with a match
 3098              	
 3099              	//    NAME?	( a -- ca na | a F )
 3100              	// 	Search all context vocabularies for a string.
 3101              	
 3102 1874 3C170000 		.word	_SAMEQ
 3103 1878 05       	_NAMEQ:	.byte  5
 3104 1879 4E414D45 		.ascii "NAME?"
 3104      3F
 3105 187e 00BF     		.p2align 2 	
 3106              	NAMEQ:
 3107 1880 404700BF 		_NEST
 3108 1884 110B0000 		_ADR	CNTXT
 3109 1888 ED050000 		_ADR	AT
 3110 188c A5170000 		_ADR	FIND
 3111 1890 1B040000 		_UNNEST
 3112              	
 3113              	// **************************************************************************
 3114              	//  Terminal input
 3115              	
 3116              	//    	  ( bot eot cur -- bot eot cur )
 3117              	// 	Backup the cursor by one character.
 3118              	
 3119              	// 	.word	_NAMEQ
 3120              	// _BKSP	.byte  2
 3121              	// 	.ascii "^H"
 3122              	// 	.p2align 2 	
 3123              	BKSP:
 3124 1894 404700BF 		_NEST
 3125 1898 3D060000 		_ADR	TOR
 3126 189c B9060000 		_ADR	OVER
 3127 18a0 19060000 		_ADR	RFROM
 3128 18a4 A5060000 		_ADR	SWAP
 3129 18a8 B9060000 		_ADR	OVER
 3130 18ac 01070000 		_ADR	XORR
 3131 18b0 AD050000 		_QBRAN	BACK1
 3131      DC180000 
 3132 18b8 71050000 		_DOLIT	BKSPP
 3132      08000000 
 3133 18c0 4D050000 		_ADR	TECHO
 3134 18c4 C5070000 		_ADR	ONEM
 3135 18c8 15080000 		_ADR	BLANK
 3136 18cc 4D050000 		_ADR	TECHO
 3137 18d0 71050000 		_DOLIT	BKSPP
 3137      08000000 
 3138 18d8 4D050000 		_ADR	TECHO
 3139              	BACK1:
 3140 18dc 1B040000 		  _UNNEST
ARM GAS  stm32eforth-fl.s 			page 61


 3141              	
 3142              	//    TAP	 ( bot eot cur c -- bot eot cur )
 3143              	// 	Accept and echo the key stroke and bump the cursor.
 3144              	
 3145              	// 	.word	_BKSP
 3146              	// _TAP	.byte  3
 3147              	// 	.ascii "TAP"
 3148              	// 	.p2align 2 	
 3149              	TAP:
 3150 18e0 404700BF 		_NEST
 3151 18e4 95060000 		_ADR	DUPP
 3152 18e8 4D050000 		_ADR	TECHO
 3153 18ec B9060000 		_ADR	OVER
 3154 18f0 F9050000 		_ADR	CSTOR
 3155 18f4 B5070000 		_ADR	ONEP
 3156 18f8 1B040000 		_UNNEST
 3157              	
 3158              	//    kTAP	( bot eot cur c -- bot eot cur )
 3159              	// 	Process a key stroke, CR or backspace.
 3160              	
 3161              	// 	.word	_TAP
 3162              	// _KTAP	.byte  4
 3163              	// 	.ascii "kTAP"
 3164              	// 	.p2align 2 	
 3165              	KTAP:
 3166              	TTAP:
 3167 18fc 404700BF 		_NEST
 3168 1900 95060000 		_ADR	DUPP
 3169 1904 71050000 		_DOLIT	CRR
 3169      0D000000 
 3170 190c 01070000 		_ADR	XORR
 3171 1910 AD050000 		_QBRAN  KTAP2
 3171      40190000 
 3172 1918 71050000 		_DOLIT	BKSPP
 3172      08000000 
 3173 1920 01070000 		_ADR	XORR
 3174 1924 AD050000 		_QBRAN	KTAP1
 3174      38190000 
 3175 192c 15080000 		_ADR	BLANK
 3176 1930 E1180000 		_ADR	TAP
 3177 1934 1B040000 		_UNNEST
 3178              	//	.word	0			// patch
 3179              	KTAP1:
 3180 1938 95180000 		_ADR	BKSP
 3181 193c 1B040000 		_UNNEST
 3182              	KTAP2:
 3183 1940 85060000 		_ADR	DROP
 3184 1944 A5060000 		_ADR	SWAP
 3185 1948 85060000 		_ADR	DROP
 3186 194c 95060000 		_ADR	DUPP
 3187 1950 1B040000 		_UNNEST
 3188              	
 3189              	//    ACCEPT	( b u -- b u )
 3190              	// 	Accept characters to input buffer. Return with actual count.
 3191              	
 3192 1954 78180000 		.word	_NAMEQ
 3193 1958 06       	_ACCEP:	.byte  6
ARM GAS  stm32eforth-fl.s 			page 62


 3194 1959 41434345 		.ascii "ACCEPT"
 3194      5054
 3195 195f 00       		.p2align 2 	
 3196              	ACCEP:
 3197 1960 404700BF 		_NEST
 3198 1964 B9060000 		_ADR	OVER
 3199 1968 59070000 		_ADR	PLUS
 3200 196c B9060000 		_ADR	OVER
 3201              	ACCP1:
 3202 1970 A5080000 		_ADR	DDUP
 3203 1974 01070000 		_ADR	XORR
 3204 1978 AD050000 		_QBRAN	ACCP4
 3204      B8190000 
 3205 1980 DD120000 		_ADR	KEY
 3206 1984 95060000 		_ADR	DUPP
 3207 1988 15080000 		_ADR	BLANK
 3208 198c 71050000 		_DOLIT 127
 3208      7F000000 
 3209 1994 E90B0000 		_ADR	WITHI
 3210 1998 AD050000 		_QBRAN	ACCP2
 3210      AC190000 
 3211 19a0 E1180000 		_ADR	TAP
 3212 19a4 BF050000 		_BRAN	ACCP3
 3212      B0190000 
 3213              	ACCP2:
 3214 19ac FD180000 		_ADR	KTAP
 3215              	ACCP3:	  
 3216 19b0 BF050000 		_BRAN	ACCP1
 3216      70190000 
 3217              	ACCP4:
 3218 19b8 85060000 		_ADR	DROP
 3219 19bc B9060000 		_ADR	OVER
 3220 19c0 69070000 		_ADR	SUBB
 3221 19c4 1B040000 		_UNNEST
 3222              	
 3223              	//    QUERY	( -- )
 3224              	// 	Accept input stream to terminal input buffer.
 3225              	
 3226 19c8 58190000 		.word	_ACCEP
 3227 19cc 05       	_QUERY:	.byte  5
 3228 19cd 51554552 		.ascii "QUERY"
 3228      59
 3229 19d2 00BF     		.p2align 2 	
 3230              	QUERY:
 3231 19d4 404700BF 		_NEST
 3232 19d8 4D0E0000 		_ADR	TIB
 3233 19dc 71050000 		_DOLIT 80
 3233      50000000 
 3234 19e4 61190000 		_ADR	ACCEP
 3235 19e8 D10A0000 		_ADR	NTIB
 3236 19ec D9050000 		_ADR	STORE
 3237 19f0 85060000 		_ADR	DROP
 3238 19f4 71050000 		_DOLIT	0
 3238      00000000 
 3239 19fc BD0A0000 		_ADR	INN
 3240 1a00 D9050000 		_ADR	STORE
 3241 1a04 1B040000 		_UNNEST
ARM GAS  stm32eforth-fl.s 			page 63


 3242              	
 3243              	// **************************************************************************
 3244              	//  Error handling
 3245              	
 3246              	//    ABORT	( a -- )
 3247              	// 	Reset data stack and jump to QUIT.
 3248              	
 3249 1a08 CC190000 		.word	_QUERY
 3250 1a0c 05       	_ABORT:	.byte  5
 3251 1a0d 41424F52 		.ascii "ABORT"
 3251      54
 3252 1a12 00BF     		.p2align 2 	
 3253              	ABORT:
 3254 1a14 404700BF 		_NEST
 3255              	ABORT1:
 3256 1a18 FD120000 		_ADR	SPACE
 3257 1a1c F1090000 		_ADR	COUNT
 3258 1a20 51130000 		_ADR	TYPEE
 3259 1a24 71050000 		_DOLIT	0X3F
 3259      3F000000 
 3260 1a2c 4D050000 		_ADR	EMIT
 3261 1a30 85130000 		_ADR	CR
 3262 1a34 9D1B0000 		_ADR	PRESE
 3263 1a38 BF050000 		_BRAN	QUIT
 3263      BC1B0000 
 3264              	
 3265              	//    _abort"	( f -- )
 3266              	// 	Run time routine of ABORT" . Abort with a message.
 3267              	
 3268              	// 	.word	_ABORT
 3269              	// _ABORQ	.byte  COMPO+6
 3270              	// 	.ascii "abort\""
 3271              	// 	.p2align 2 	
 3272              	ABORQ:
 3273 1a40 404700BF 		_NEST
 3274 1a44 A5130000 		_ADR	DOSTR
 3275 1a48 A5060000 		_ADR	SWAP 
 3276 1a4c AD050000 		_QBRAN	1f	// text flag
 3276      5C1A0000 
 3277 1a54 BF050000 		_BRAN	ABORT1
 3277      181A0000 
 3278              	1:
 3279 1a5c 85060000 		_ADR	DROP
 3280 1a60 1B040000 		_UNNEST			// drop error
 3281              	
 3282              	// **************************************************************************
 3283              	//  The text interpreter
 3284              	
 3285              	//    $INTERPRET  ( a -- )
 3286              	// 	Interpret a word. If failed, try to convert it to an integer.
 3287              	
 3288 1a64 0C1A0000 		.word	_ABORT
 3289 1a68 0A       	_INTER:	.byte  10
 3290 1a69 2424494E 		.ascii "$$INTERPRET"
 3290      54455250 
 3290      524554
 3291              		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 64


 3292              	INTER:
 3293 1a74 404700BF 		_NEST
 3294 1a78 81180000 		_ADR	NAMEQ
 3295 1a7c 69080000 		_ADR	QDUP	// ?defined
 3296 1a80 AD050000 		_QBRAN	INTE1
 3296      B41A0000 
 3297 1a88 ED050000 		_ADR	AT
 3298 1a8c 71050000 		_DOLIT	COMPO
 3298      40000000 
 3299 1a94 D9060000 		_ADR	ANDD	// ?compile only lexicon bits
 3300 1a98 411A0000 		_ABORQ	13," compile only"
 3300      0D20636F 
 3300      6D70696C 
 3300      65206F6E 
 3300      6C7900BF 
 3301 1aac 89050000 		_ADR	EXECU
 3302 1ab0 1B040000 		_UNNEST			// execute defined word
 3303              	INTE1:
 3304 1ab4 A5110000 		_ADR	NUMBQ
 3305 1ab8 AD050000 		_QBRAN	INTE2
 3305      C41A0000 
 3306 1ac0 1B040000 		_UNNEST
 3307              	INTE2:
 3308 1ac4 151A0000 		_ADR	ABORT	// error
 3309              	
 3310              	//    [	   ( -- )
 3311              	// 	Start the text interpreter.
 3312              	
 3313 1ac8 681A0000 		.word	_INTER
 3314 1acc 81       	_LBRAC:	.byte  IMEDD+1
 3315 1acd 5B       		.ascii "["
 3316 1ace 00BF     		.p2align 2 	
 3317              	LBRAC:
 3318 1ad0 404700BF 		_NEST
 3319 1ad4 71050000 		_DOLIT	INTER
 3319      741A0000 
 3320 1adc E50A0000 		_ADR	TEVAL
 3321 1ae0 D9050000 		_ADR	STORE
 3322 1ae4 1B040000 		_UNNEST
 3323              	
 3324              	//    .OK	 ( -- )
 3325              	// 	Display "ok" only while interpreting.
 3326              	
 3327 1ae8 CC1A0000 		.word	_LBRAC
 3328 1aec 03       	_DOTOK:	.byte  3
 3329 1aed 2E4F4B   		.ascii ".OK"
 3330              		.p2align 2 	
 3331              	DOTOK:
 3332 1af0 404700BF 		_NEST
 3333 1af4 71050000 		_DOLIT	INTER
 3333      741A0000 
 3334 1afc E50A0000 		_ADR	TEVAL
 3335 1b00 ED050000 		_ADR	AT
 3336 1b04 21090000 		_ADR	EQUAL
 3337 1b08 AD050000 		_QBRAN	DOTO1
 3337      181B0000 
 3338 1b10 ED130000 		_DOTQP	3," ok"
ARM GAS  stm32eforth-fl.s 			page 65


 3338      03206F6B 
 3339              	DOTO1:
 3340 1b18 85130000 		_ADR	CR
 3341 1b1c 1B040000 		_UNNEST
 3342              	
 3343              	//    ?STACK	( -- )
 3344              	// 	Abort if the data stack underflows.
 3345              	
 3346 1b20 EC1A0000 		.word	_DOTOK
 3347 1b24 06       	_QSTAC:	.byte  6
 3348 1b25 3F535441 		.ascii "?STACK"
 3348      434B
 3349 1b2b 00       		.p2align 2 	
 3350              	QSTAC:
 3351 1b2c 404700BF 		_NEST
 3352 1b30 C90D0000 		_ADR	DEPTH
 3353 1b34 C9060000 		_ADR	ZLESS	// check only for underflow
 3354 1b38 411A0000 		_ABORQ	9,"underflow"
 3354      09756E64 
 3354      6572666C 
 3354      6F7700BF 
 3355 1b48 1B040000 		_UNNEST
 3356              	
 3357              	//    EVAL	( -- )
 3358              	// 	Interpret the input stream.
 3359              	
 3360 1b4c 241B0000 		.word	_QSTAC
 3361 1b50 04       	_EVAL:	.byte  4
 3362 1b51 4556414C 		.ascii "EVAL"
 3363 1b55 0000BF   		.p2align 2 	
 3364              	EVAL:
 3365 1b58 404700BF 		_NEST
 3366              	EVAL1:
 3367 1b5c FD160000 	    _ADR	TOKEN
 3368 1b60 95060000 		_ADR	DUPP
 3369 1b64 0D060000 		_ADR	CAT	// ?input stream empty
 3370 1b68 AD050000 		_QBRAN	EVAL2
 3370      841B0000 
 3371 1b70 E50A0000 		_ADR	TEVAL
 3372 1b74 650E0000 		_ADR	ATEXE
 3373 1b78 2D1B0000 		_ADR	QSTAC	// evaluate input, check stack
 3374 1b7c BF050000 		_BRAN	EVAL1
 3374      5C1B0000 
 3375              	EVAL2:
 3376 1b84 85060000 		_ADR	DROP
 3377 1b88 F11A0000 		_ADR	DOTOK
 3378 1b8c 1B040000 		_UNNEST	// prompt
 3379              	
 3380              	//    PRESET	( -- )
 3381              	// 	Reset data stack pointer and the terminal input buffer.
 3382              	
 3383 1b90 501B0000 		.word	_EVAL
 3384 1b94 06       	_PRESE:	.byte  6
 3385 1b95 50524553 		.ascii "PRESET"
 3385      4554
 3386 1b9b 00       		.p2align 2 	
 3387              	PRESE:
ARM GAS  stm32eforth-fl.s 			page 66


 3388 1b9c 404700BF 		_NEST 
 3389 1ba0 71050000 		_DOLIT SPP 
 3389      804E0020 
 3390 1ba8 61060000 		_ADR SPSTOR 
 3391 1bac 1B040000 		_UNNEST 
 3392              	
 3393              	//    QUIT	( -- )
 3394              	// 	Reset return stack pointer and start text interpreter.
 3395              	
 3396 1bb0 941B0000 		.word	_PRESE
 3397 1bb4 04       	_QUIT:	.byte  4
 3398 1bb5 51554954 		.ascii "QUIT"
 3399 1bb9 0000BF   		.p2align 2 	
 3400              	QUIT:
 3401 1bbc 71050000 		_DOLIT RPP 
 3401      804F0020 
 3402 1bc4 51060000 		_ADR RPSTOR 
 3403              	QUIT1:
 3404 1bc8 D11A0000 		_ADR	LBRAC			// start interpretation
 3405              	QUIT2:
 3406 1bcc D5190000 		_ADR	QUERY			// get input
 3407 1bd0 591B0000 		_ADR	EVAL
 3408 1bd4 BF050000 		_BRAN	QUIT2	// continue till error
 3408      CC1B0000 
 3409              	
 3410              	/***************************
 3411              	//  Flash memory interface
 3412              	***************************/
 3413              		.p2align 2 
 3414              	unlock:	//  unlock flash memory	
 3415 1bdc DFF81474 		ldr	r7, flash_regs 
 3416 1be0 4FF03406 		mov r6,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 3417 1be4 FE60     		str r6,[r7,#FLASH_SR]
 3418 1be6 3E69     		ldr r6,[r7,#FLASH_CR]
 3419 1be8 16F0800F 		tst r6,#(1<<7)
 3420 1bec 06D0     		beq 1f 
 3421 1bee DFF80864 		ldr	r6, flash_regs+4 // key1
 3422 1bf2 7E60     		str	r6, [r7, #FLASH_KEYR]
 3423 1bf4 DFF80464 		ldr	r6, flash_regs+8 // key2 
 3424 1bf8 7E60     		str	r6, [r7, #FLASH_KEYR]
 3425 1bfa EFE7     		b unlock 
 3426              		/* unlock option registers */
 3427              	/*	
 3428              		ldr	r6, flash_regs+4 
 3429              		str	r6, [r7, #FLASH_OPTKEYR]
 3430              		ldr	r6, flash_regs+8
 3431              		str	r6, [r7, #FLASH_OPTKEYR]
 3432              	*/
 3433 1bfc 7047     	1:	bx lr 
 3434              	
 3435 1bfe 00BF     		.p2align 2 
 3436              	WAIT_BSY:
 3437 1c00 FC4F     		ldr	r7,flash_regs
 3438              	WAIT1:
 3439 1c02 FE68     		ldr	r6, [r7, #FLASH_SR]	//  FLASH_SR
 3440 1c04 16F00106 		ands	r6, #0x1	//  BSY
 3441 1c08 FBD1     		bne	WAIT1
ARM GAS  stm32eforth-fl.s 			page 67


 3442 1c0a 7047     		_RET 
 3443              		
 3444              		.p2align 2
 3445              	
 3446              	//    ERASE_PAGE	   ( adr -- F )
 3447              	// 	  Erase one page of flash memory.
 3448              	//    stm32f103 page size is 1024 bytes 
 3449              	//    adr is any address inside page to erase 
 3450              	//	  return success|fail flag 
 3451              	
 3452 1c0c B41B0000 		.word _QUIT  
 3453 1c10 0A       	_EPAGE:	.byte  10
 3454 1c11 45524153 		.ascii "ERASE_PAGE"
 3454      455F5041 
 3454      4745
 3455 1c1b 00       		.p2align 2 	
 3456              	
 3457              	EPAGE: 	//  page --
 3458 1c1c F54F     		ldr r7,flash_regs 	 
 3459 1c1e 4FF00206 		mov r6,#2 // set PER bit 
 3460 1c22 3E61     		str r6,[r7,#FLASH_CR]
 3461 1c24 7D61     		str r5,[r7,#FLASH_AR] // page to erase address 
 3462 1c26 3E69     		ldr	r6,[r7, #FLASH_CR]	
 3463 1c28 46F04006 		orr	R6,#0x40	//  set STRT bit   
 3464 1c2c 3E61     		str	r6,[r7, #FLASH_CR]	//  start erasing
 3465 1c2e 00B5FFF7 	 	_CALL	WAIT_BSY // wait until done
 3465      E6FF5DF8 
 3465      04EB
 3466 1c38 FD68     		ldr r5,[r7,#FLASH_SR] // check for errors 
 3467 1c3a 05F01405 		and r5,r5,#(5<<2)
 3468 1c3e FEF7E9BB 		_NEXT 
 3469              	
 3470 1c42 00BF     		.p2align 2 
 3471              	// store 16 bit word
 3472              	// expect flash unlocked
 3473              	// return success|fail flag   
 3474              	HWORD_WRITE: // ( hword address -- f  )
 3475 1c44 EB4F     		ldr r7,flash_regs 
 3476 1c46 3C69     		ldr	r4, [r7, #FLASH_CR]	//  FLASH_CR
 3477 1c48 4FF00104 		mov r4,#1 // set PG 
 3478 1c4c 3C61     		str r4,[r7,#FLASH_CR]
 3479 1c4e 2E46     		mov r6,r5 
 3480 1c50 51F8045B 		_POP 
 3481 1c54 3580     		strh r5,[r6] 
 3482 1c56 00B5FFF7 		_CALL WAIT_BSY 
 3482      D2FF5DF8 
 3482      04EB
 3483 1c60 FD68     		ldr r5,[r7,#FLASH_SR]
 3484 1c62 05F01405 		and r5,r5,#(5<<2) 
 3485 1c66 FEF7D5BB 		_NEXT 
 3486              	
 3487 1c6a 00BF     		.p2align 2 
 3488              	//    I!	   ( data address -- )
 3489              	// 	   Write one word into flash memory
 3490              	//	   address must even 
 3491              	
 3492 1c6c 101C0000 		.word	_EPAGE
ARM GAS  stm32eforth-fl.s 			page 68


 3493 1c70 02       	_ISTOR:	.byte  2
 3494 1c71 4921     		.ascii "I!"
 3495 1c73 00       		.p2align 2 	
 3496              	ISTOR:	//  data address --
 3497 1c74 404700BF 		_NEST 
 3498 1c78 A5080000 		_ADR DDUP 
 3499 1c7c 3D060000 		_ADR TOR 
 3500 1c80 3D060000 		_ADR TOR 
 3501 1c84 451C0000 		_ADR HWORD_WRITE
 3502 1c88 AD050000 		_QBRAN 1f 
 3502      A41C0000 
 3503 1c90 411A0000 	0:	_ABORQ 10, "write failed"
 3503      0A777269 
 3503      74652066 
 3503      61696C65 
 3503      640000BF 
 3504 1ca4 19060000 	1:	_ADR RFROM
 3505 1ca8 71050000 		_DOLIT 65536 
 3505      00000100 
 3506 1cb0 010D0000 		_ADR  SLASH
 3507 1cb4 19060000 		_ADR RFROM 
 3508 1cb8 71050000 		_DOLIT 2 
 3508      02000000 
 3509 1cc0 59070000 		_ADR PLUS 
 3510 1cc4 451C0000 		_ADR HWORD_WRITE 
 3511 1cc8 AD050000 		_QBRAN 2f
 3511      D81C0000 
 3512 1cd0 BF050000 		_BRAN 0b 
 3512      901C0000 
 3513 1cd8 1B040000 	2:	_UNNEST
 3514              	
 3515              	// IMG_SIZE ( -- u )
 3516              	// return flash pages required to save 
 3517              	// user ram  
 3518 1cdc 701C0000 		.word _ISTOR 
 3519 1ce0 08       	_IMG_SIZE: .byte 8
 3520 1ce1 494D475F 		.ascii "IMG_SIZE" 
 3520      53495A45 
 3521 1ce9 0000BF   		.p2align 2
 3522              	IMG_SIZE: 
 3523 1cec 404700BF 		_NEST
 3524 1cf0 71050000 		_DOLIT VARS_END_OFS-IMG_SIGN_OFS 
 3524      38000000 
 3525 1cf8 9D0B0000 		_ADR USER_END 
 3526 1cfc 810B0000 		_ADR USER_BEGIN 
 3527 1d00 69070000 		_ADR SUBB 
 3528 1d04 59070000 		_ADR PLUS 
 3529 1d08 71050000 		_DOLIT PAGE_SIZE 
 3529      00040000 
 3530 1d10 C90C0000 		_ADR SLMOD 
 3531 1d14 A5060000 		_ADR SWAP 
 3532 1d18 AD050000 		_QBRAN 1f 
 3532      241D0000 
 3533 1d20 B5070000 		_ADR ONEP
 3534              	1:
 3535 1d24 1B040000 		_UNNEST  
 3536              	
ARM GAS  stm32eforth-fl.s 			page 69


 3537              	// IMG? (  -- T|F )
 3538              	// check if an image has been saved in FLASH  
 3539 1d28 E01C0000 		.word _IMG_SIZE 
 3540 1d2c 04       	_IMGQ: .byte 4
 3541 1d2d 494D473F 		.ascii "IMG?"
 3542 1d31 0000BF   		.p2align 2
 3543              	IMGQ:
 3544 1d34 404700BF 		_NEST 
 3545 1d38 B50B0000 		_ADR IMG_ADR 
 3546 1d3c ED050000 		_ADR AT 
 3547 1d40 D10B0000 		_ADR IMG_SIGN  
 3548 1d44 ED050000 		_ADR AT 
 3549 1d48 01070000 		_ADR XORR  
 3550 1d4c 0D090000 		_ADR ZEQUAL
 3551 1d50 1B040000 		_UNNEST
 3552              	
 3553              	// LOAD_IMG (  -- )
 3554              	// Load saved image into RAM. 
 3555 1d54 2C1D0000 		.word _IMGQ
 3556 1d58 08       	_LOAD_IMG: .byte 8 
 3557 1d59 4C4F4144 		.ascii "LOAD_IMG" 
 3557      5F494D47 
 3558 1d61 0000BF   		.p2align 2 
 3559              	LOAD_IMG:
 3560 1d64 404700BF 		_NEST 
 3561 1d68 351D0000 		_ADR IMGQ 
 3562 1d6c AD050000 		_QBRAN 1f
 3562      B81D0000 
 3563              	/* copy system variables to RAM */
 3564 1d74 B50B0000 		_ADR IMG_ADR 
 3565 1d78 95060000 		_ADR DUPP 
 3566 1d7c 3D060000 		_ADR TOR   // save source address 
 3567 1d80 D10B0000 		_ADR IMG_SIGN 
 3568 1d84 71050000 		_DOLIT (VARS_END_OFS-IMG_SIGN_OFS) 
 3568      38000000 
 3569 1d8c 95060000 		_ADR DUPP 
 3570 1d90 3D060000 		_ADR TOR 
 3571 1d94 B50E0000 		_ADR MOVE // ( src dest count -- ) R: src count 
 3572              	/* copy user definitions */
 3573 1d98 19060000 		_ADR RFROM 
 3574 1d9c 19060000 		_ADR RFROM  
 3575 1da0 59070000 		_ADR PLUS // source address  
 3576 1da4 810B0000 		_ADR USER_BEGIN // destination address
 3577 1da8 150E0000 		_ADR HERE  
 3578 1dac B9060000 		_ADR OVER 
 3579 1db0 69070000 		_ADR SUBB  // byte count 
 3580 1db4 B50E0000 		_ADR MOVE
 3581 1db8 1B040000 	1:	_UNNEST  
 3582              	
 3583              	// ERASE_MPG ( u1 u2 -- )
 3584              	// erase many pages 
 3585              	// u1 first page number 
 3586              	// u2 how many pages  
 3587 1dbc 581D0000 		.word _LOAD_IMG
 3588 1dc0 09       	_ERASE_MPG: .byte 9 
 3589 1dc1 45524153 		.ascii "ERASE_MPG"	
 3589      455F4D50 
ARM GAS  stm32eforth-fl.s 			page 70


 3589      47
 3590 1dca 00BF     		.p2align 2 
 3591              	ERASE_MPG:
 3592 1dcc 404700BF 		_NEST 
 3593 1dd0 3D060000 		_ADR TOR 
 3594 1dd4 A11E0000 		_ADR PG_TO_ADR 
 3595 1dd8 BF050000 		_BRAN 3f 
 3595      181E0000 
 3596              	1:
 3597 1de0 95060000 		_ADR DUPP 
 3598 1de4 3D060000 		_ADR TOR 
 3599 1de8 1D1C0000 		_ADR EPAGE
 3600 1dec AD050000 		_QBRAN 2f 
 3600      081E0000 
 3601 1df4 411A0000 		_ABORQ 12,"erase failed"
 3601      0C657261 
 3601      73652066 
 3601      61696C65 
 3601      640000BF 
 3602 1e08 19060000 	2:	_ADR RFROM
 3603 1e0c 71050000 		_DOLIT PAGE_SIZE 
 3603      00040000 
 3604 1e14 59070000 		_ADR PLUS 
 3605              	3:
 3606 1e18 95050000 		_DONXT 1b 
 3606      E01D0000 
 3607 1e20 07040000 		_ADR TPOP 
 3608 1e24 1B040000 		_UNNEST 
 3609              	
 3610              	// FLSH_WR ( src dest u -- dest+u )
 3611              	// write u words to flash memory 
 3612 1e28 C01D0000 		.word _ERASE_MPG
 3613 1e2c 07       	_FLSH_WR: .byte 7 
 3614 1e2d 464C5348 		.ascii "FLSH_WR"
 3614      5F5752
 3615              		.p2align  
 3616              	FLSH_WR: 
 3617 1e34 404700BF 		_NEST 
 3618 1e38 3D060000 		_ADR TOR
 3619 1e3c BF050000 		_BRAN 3f  
 3619      641E0000 
 3620              	/* write system variables to FLASH */
 3621 1e44 3D060000 	2:  _ADR TOR  // destination address 
 3622 1e48 95060000 		_ADR DUPP 
 3623 1e4c ED050000 		_ADR AT   // get data 
 3624 1e50 2D060000 		_ADR RAT  // get destination address 
 3625 1e54 751C0000 		_ADR ISTOR
 3626 1e58 F5070000 		_ADR CELLP  // increment source address 
 3627 1e5c 19060000 		_ADR RFROM 
 3628 1e60 F5070000 		_ADR CELLP  // increment dest address 
 3629 1e64 95050000 	3:	_DONXT 2b
 3629      441E0000 
 3630 1e6c 3D060000 		_ADR TOR 
 3631 1e70 85060000 		_ADR DROP 
 3632 1e74 19060000 		_ADR RFROM 
 3633 1e78 1B040000 		_UNNEST 
 3634              	
ARM GAS  stm32eforth-fl.s 			page 71


 3635              	// ADR>PG ( a -- n )
 3636              	// convert address to page number, {0..127} 
 3637 1e7c 2C1E0000 		.word _FLSH_WR
 3638 1e80 06       	_ADR_TO_PG: .byte 6 
 3639 1e81 4144523E 		.ascii "ADR>PG" 
 3639      5047
 3640 1e87 00       		.p2align 2 
 3641              	ADR_TO_PG: 
 3642 1e88 4FEA9525 		lsr r5,#10 
 3643 1e8c 05F07F05 		and r5,#127 
 3644 1e90 FEF7C0BA 		_NEXT  
 3645              	
 3646              	// PG>ADR ( n -- a )
 3647              	// convert page# to address 
 3648 1e94 801E0000 		.word _ADR_TO_PG
 3649 1e98 06       	_PG_TO_ADR: .byte 6 
 3650 1e99 50473E41 		.ascii "PG>ADR" 
 3650      4452
 3651 1e9f 00       		.p2align 2 
 3652              	PG_TO_ADR:
 3653 1ea0 C0F20205 		movt r5,#2
 3654 1ea4 4FEA8525 		lsl r5,#10 
 3655 1ea8 FEF7B4BA 		_NEXT 
 3656              	
 3657              	// ERASE_IMG (  -- )
 3658              	// erase saved image  
 3659 1eac 981E0000 		.word _PG_TO_ADR 
 3660 1eb0 09       	_ERASE_IMG: .byte 9
 3661 1eb1 45524153 		.ascii "ERASE_IMG"
 3661      455F494D 
 3661      47
 3662 1eba 00BF     		.p2align 2
 3663              	ERASE_IMG:
 3664 1ebc 404700BF 		_NEST
 3665 1ec0 B50B0000 		_ADR IMG_ADR 
 3666 1ec4 ED1C0000 		_ADR IMG_SIZE // in page count 
 3667 1ec8 3D060000 		_ADR TOR 
 3668 1ecc BF050000 		_BRAN 2f 
 3668      E81E0000 
 3669 1ed4 95060000 	1:	_ADR DUPP 
 3670 1ed8 1D1C0000 		_ADR EPAGE
 3671 1edc 71050000 		_DOLIT PAGE_SIZE
 3671      00040000 
 3672 1ee4 59070000 		_ADR PLUS  
 3673 1ee8 95050000 	2:	_DONXT 1b 
 3673      D41E0000 
 3674 1ef0 85060000 		_ADR DROP 
 3675 1ef4 1B040000 		_UNNEST 
 3676              	
 3677              	// SAVE_IMG (  -- )
 3678              	// save in flash memory system variables and user defintitions.
 3679 1ef8 B01E0000 		.word _ERASE_IMG	
 3680 1efc 08       	_SAVE_IMG: .byte 8 
 3681 1efd 53415645 		.ascii "SAVE_IMG"
 3681      5F494D47 
 3682 1f05 0000BF   		.p2align 2
 3683              	SAVE_IMG:
ARM GAS  stm32eforth-fl.s 			page 72


 3684 1f08 404700BF 		_NEST 
 3685 1f0c 150E0000 		_ADR HERE 
 3686 1f10 810B0000 		_ADR USER_BEGIN
 3687 1f14 21090000 		_ADR EQUAL 
 3688 1f18 AD050000 		_QBRAN 1f
 3688      241F0000 
 3689 1f20 1B040000 		_UNNEST  
 3690 1f24 351D0000 	1:	_ADR IMGQ 
 3691 1f28 AD050000 		_QBRAN 2f
 3691      341F0000 
 3692              	/* delete saved image */
 3693 1f30 BD1E0000 		_ADR ERASE_IMG 
 3694              	/* save system variables */
 3695 1f34 D10B0000 	2:	_ADR IMG_SIGN // src address
 3696 1f38 B50B0000 		_ADR IMG_ADR // dest address
 3697 1f3c 71050000 		_DOLIT (VARS_END_OFS-IMG_SIGN_OFS) 
 3697      38000000 
 3698 1f44 39080000 		_ADR CELLSL  // word count 
 3699 1f48 351E0000 		_ADR FLSH_WR  // ( src dest count -- dest+u )
 3700              	/* write user definitions */
 3701 1f4c 810B0000 		_ADR USER_BEGIN
 3702 1f50 A5060000 		_ADR SWAP  // ( src dest+ -- )
 3703 1f54 150E0000 		_ADR HERE   
 3704 1f58 810B0000 		_ADR USER_BEGIN 
 3705 1f5c 69070000 		_ADR SUBB 
 3706 1f60 39080000 		_ADR CELLSL  // src dest+ count -- 
 3707 1f64 351E0000 		_ADR FLSH_WR  
 3708 1f68 1B040000 	9:	_UNNEST 
 3709              	
 3710              	// TURNKEY ( -- "WORD") 
 3711              	// set autorun program in 'BOOT variable 
 3712              	// and save image 
 3713 1f6c FC1E0000 		.word _SAVE_IMG
 3714 1f70 07       	_TURNKEY: .byte 7
 3715 1f71 5455524E 		.ascii "TURNKEY"
 3715      4B4559
 3716              		.p2align 2 
 3717              	TURNKEY:
 3718 1f78 404700BF 		_NEST 
 3719 1f7c 09200000 		_ADR TICK 
 3720 1f80 71050000 		_DOLIT 1 
 3720      01000000 
 3721 1f88 ED060000 		_ADR ORR 		
 3722 1f8c 750A0000 		_ADR TBOOT 
 3723 1f90 D9050000 		_ADR STORE 
 3724 1f94 091F0000 		_ADR SAVE_IMG 
 3725 1f98 1B040000 		_UNNEST
 3726              	
 3727 1f9c 701F0000 		.word _TURNKEY
 3728 1fa0 06       	_FORGET: .byte 6 
 3729 1fa1 464F5247 		.ascii "FORGET"
 3729      4554
 3730 1fa7 00       		.p2align 2
 3731              	FORGET:
 3732 1fa8 404700BF 		_NEST 
 3733 1fac FD160000 		_ADR TOKEN 
 3734 1fb0 95060000 		_ADR DUPP 
ARM GAS  stm32eforth-fl.s 			page 73


 3735 1fb4 AD050000 		_QBRAN 9f 
 3735      F01F0000 
 3736 1fbc 81180000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 3737 1fc0 69080000 		_ADR QDUP 
 3738 1fc4 AD050000 		_QBRAN 8f
 3738      EC1F0000 
 3739 1fcc 05080000 		_ADR CELLM // ( ca la )
 3740 1fd0 95060000 		_ADR DUPP 
 3741 1fd4 250B0000 		_ADR CPP   
 3742 1fd8 D9050000 		_ADR STORE
 3743 1fdc ED050000 		_ADR AT 
 3744 1fe0 4D0B0000 		_ADR LAST 
 3745 1fe4 D9050000 		_ADR STORE
 3746 1fe8 61240000 		_ADR OVERT 
 3747 1fec 85060000 	8:  _ADR DROP 
 3748 1ff0 1B040000 	9:	_UNNEST 
 3749              	
 3750              		.p2align 2 
 3751              	flash_regs:
 3752 1ff4 00200240 		.word FLASH_BASE_ADR // 0 
 3753 1ff8 23016745 		.word FLASH_KEY1   // 4 
 3754 1ffc AB89EFCD 		.word FLASH_KEY2   // 8
 3755              	
 3756              	// **************************************************************************
 3757              	//  The compiler
 3758              	
 3759              	//    '	   ( -- ca )
 3760              	// 	Search context vocabularies for the next word in input stream.
 3761              	
 3762 2000 A01F0000 		.word	_FORGET
 3763 2004 01       	_TICK:	.byte  1
 3764 2005 27       		.ascii "'"
 3765 2006 00BF     		.p2align 2 	
 3766              	TICK:
 3767 2008 404700BF 		_NEST
 3768 200c FD160000 		_ADR	TOKEN
 3769 2010 81180000 		_ADR	NAMEQ	// ?defined
 3770 2014 AD050000 		_QBRAN	TICK1
 3770      20200000 
 3771 201c 1B040000 		_UNNEST	// yes, push code address
 3772              	TICK1:	
 3773 2020 151A0000 		_ADR ABORT	// no, error
 3774              	
 3775              	//    ALLOT	( n -- )
 3776              	// 	Allocate n bytes to the ram area.
 3777              	
 3778 2024 04200000 		.word	_TICK
 3779 2028 05       	_ALLOT:	.byte  5
 3780 2029 414C4C4F 		.ascii "ALLOT"
 3780      54
 3781 202e 00BF     		.p2align 2 	
 3782              	ALLOT:
 3783 2030 404700BF 		_NEST
 3784 2034 250B0000 		_ADR	CPP
 3785 2038 A9090000 		_ADR	PSTOR
 3786 203c 1B040000 		_UNNEST			// adjust code pointer
 3787              	
ARM GAS  stm32eforth-fl.s 			page 74


 3788              	//    ,	   ( w -- )
 3789              	// 	Compile an integer into the code dictionary.
 3790              	
 3791 2040 28200000 		.word	_ALLOT
 3792 2044 012C     	_COMMA:	.byte  1,','
 3793 2046 00BF     		.p2align 2 	
 3794              	COMMA:
 3795 2048 404700BF 		_NEST
 3796 204c 150E0000 		_ADR	HERE
 3797 2050 95060000 		_ADR	DUPP
 3798 2054 F5070000 		_ADR	CELLP	// cell boundary
 3799 2058 250B0000 		_ADR	CPP
 3800 205c D9050000 		_ADR	STORE
 3801 2060 D9050000 		_ADR	STORE
 3802 2064 1B040000 		_UNNEST	// adjust code pointer, compile
 3803              		.p2align 2 
 3804              	//    [COMPILE]   ( -- //  string> )
 3805              	// 	Compile the next immediate word into code dictionary.
 3806              	
 3807 2068 44200000 		.word	_COMMA
 3808 206c 89       	_BCOMP:	.byte  IMEDD+9
 3809 206d 5B434F4D 		.ascii "[COMPILE]"
 3809      50494C45 
 3809      5D
 3810 2076 00BF     		.p2align 2 	
 3811              	BCOMP:
 3812 2078 404700BF 		_NEST
 3813 207c 09200000 		_ADR	TICK
 3814 2080 49200000 		_ADR	COMMA
 3815 2084 1B040000 		_UNNEST
 3816              	
 3817              	//    COMPILE	( -- )
 3818              	// 	Compile the next address in colon list to code dictionary.
 3819              	
 3820 2088 6C200000 		.word	_BCOMP
 3821 208c 47       	_COMPI:	.byte  COMPO+7
 3822 208d 434F4D50 		.ascii "COMPILE"
 3822      494C45
 3823              		.p2align 2 	
 3824              	COMPI:
 3825 2094 404700BF 		_NEST
 3826 2098 19060000 		_ADR	RFROM
 3827 209c 95060000 		_ADR	DUPP 
 3828 20a0 ED050000 		_ADR	AT
 3829 20a4 71050000 		_DOLIT 1 
 3829      01000000 
 3830 20ac ED060000 		_ADR	ORR 
 3831 20b0 49200000 		_ADR	COMMA 
 3832 20b4 F5070000 		_ADR	CELLP 
 3833 20b8 3D060000 		_ADR	TOR 
 3834 20bc 1B040000 		_UNNEST			// adjust return address
 3835              	
 3836              	//    LITERAL	( w -- )
 3837              	// 	Compile tos to code dictionary as an integer literal.
 3838              	
 3839 20c0 8C200000 		.word	_COMPI
 3840 20c4 87       	_LITER:	.byte  IMEDD+7
ARM GAS  stm32eforth-fl.s 			page 75


 3841 20c5 4C495445 		.ascii "LITERAL"
 3841      52414C
 3842              		.p2align 2 	
 3843              	LITER:
 3844 20cc 404700BF 		_NEST
 3845 20d0 71050000 		_COMPI	DOLIT
 3845      70050000 
 3845      BD240000 
 3846 20dc 49200000 		_ADR	COMMA
 3847 20e0 1B040000 		_UNNEST
 3848              	
 3849              	//    $,"	( -- )
 3850              	// 	Compile a literal string up to next " .
 3851              	
 3852              	// 	.word	_LITER
 3853              	// _STRCQ	.byte  3
 3854              	// 	.ascii "$,\""
 3855              	// 	.p2align 2 	
 3856              	STRCQ:
 3857 20e4 404700BF 		_NEST
 3858 20e8 71050000 		_DOLIT -4
 3858      FCFFFFFF 
 3859 20f0 250B0000 		_ADR	CPP
 3860 20f4 A9090000 		_ADR	PSTOR
 3861 20f8 71050000 		_DOLIT	'\"'
 3861      22000000 
 3862 2100 D9160000 		_ADR	WORDD			// move word to code dictionary
 3863 2104 F1090000 		_ADR	COUNT
 3864 2108 59070000 		_ADR	PLUS
 3865 210c 610D0000 		_ADR	ALGND			// calculate aligned end of string
 3866 2110 250B0000 		_ADR	CPP
 3867 2114 D9050000 		_ADR	STORE
 3868 2118 1B040000 		_UNNEST 			// adjust the code pointer
 3869              	
 3870              	/*******************
 3871              	//  Structures
 3872              	*******************/
 3873              	//    FOR	 ( -- a )
 3874              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3875              	
 3876 211c C4200000 		.word	_LITER
 3877 2120 C3       	_FOR:	.byte  COMPO+IMEDD+3
 3878 2121 464F52   		.ascii "FOR"
 3879              		.p2align 2 	
 3880              	FOR:
 3881 2124 404700BF 		_NEST
 3882 2128 71050000 		_COMPI	TOR
 3882      3C060000 
 3882      BD240000 
 3883 2134 150E0000 		_ADR	HERE
 3884 2138 1B040000 		_UNNEST
 3885              	
 3886              	//    BEGIN	( -- a )
 3887              	// 	Start an infinite or indefinite loop structure.
 3888              	
 3889 213c 20210000 		.word	_FOR
 3890 2140 C5       	_BEGIN:	.byte  COMPO+IMEDD+5
ARM GAS  stm32eforth-fl.s 			page 76


 3891 2141 42454749 		.ascii "BEGIN"
 3891      4E
 3892 2146 00BF     		.p2align 2 	
 3893              	BEGIN:
 3894 2148 404700BF 		_NEST
 3895 214c 150E0000 		_ADR	HERE
 3896 2150 1B040000 		_UNNEST
 3897              		.p2align 2 
 3898              	
 3899              	//    NEXT	( a -- )
 3900              	// 	Terminate a FOR-NEXT loop structure.
 3901 2154 40210000 		.word	_BEGIN
 3902 2158 C4       	_FNEXT:	.byte  COMPO+IMEDD+4
 3903 2159 4E455854 		.ascii "NEXT"
 3904 215d 0000BF   		.p2align 2 	
 3905              	FNEXT:
 3906 2160 404700BF 		_NEST
 3907 2164 71050000 		_COMPI	DONXT
 3907      94050000 
 3907      BD240000 
 3908 2170 49200000 		_ADR	COMMA
 3909 2174 1B040000 		_UNNEST
 3910              	
 3911              	//    UNTIL	( a -- )
 3912              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3913              	
 3914 2178 58210000 		.word	_FNEXT
 3915 217c C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3916 217d 554E5449 		.ascii "UNTIL"
 3916      4C
 3917 2182 00BF     		.p2align 2 	
 3918              	UNTIL:
 3919 2184 404700BF 		_NEST
 3920 2188 71050000 		_COMPI	QBRAN
 3920      AC050000 
 3920      BD240000 
 3921 2194 49200000 		_ADR	COMMA
 3922 2198 1B040000 		_UNNEST
 3923              	
 3924              	//    AGAIN	( a -- )
 3925              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3926              	
 3927 219c 7C210000 		.word	_UNTIL
 3928 21a0 C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3929 21a1 41474149 		.ascii "AGAIN"
 3929      4E
 3930 21a6 00BF     		.p2align 2 	
 3931              	AGAIN:
 3932 21a8 404700BF 		_NEST
 3933 21ac 71050000 		_COMPI	BRAN
 3933      BE050000 
 3933      BD240000 
 3934 21b8 49200000 		_ADR	COMMA
 3935 21bc 1B040000 		_UNNEST
 3936              	
 3937              	//    IF	  ( -- A )
 3938              	// 	Begin a conditional branch structure.
ARM GAS  stm32eforth-fl.s 			page 77


 3939              	
 3940 21c0 A0210000 		.word	_AGAIN
 3941 21c4 C2       	_IFF:	.byte  COMPO+IMEDD+2
 3942 21c5 4946     		.ascii "IF"
 3943 21c7 00       		.p2align 2 	
 3944              	IFF:
 3945 21c8 404700BF 		_NEST
 3946 21cc 71050000 		_COMPI	QBRAN
 3946      AC050000 
 3946      BD240000 
 3947 21d8 150E0000 		_ADR	HERE
 3948 21dc 71050000 		_DOLIT	4
 3948      04000000 
 3949 21e4 250B0000 		_ADR	CPP
 3950 21e8 A9090000 		_ADR	PSTOR
 3951 21ec 1B040000 		_UNNEST
 3952              	
 3953              	//    AHEAD	( -- A )
 3954              	// 	Compile a forward branch instruction.
 3955              	
 3956 21f0 C4210000 		.word	_IFF
 3957 21f4 C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 3958 21f5 41484541 		.ascii "AHEAD"
 3958      44
 3959 21fa 00BF     		.p2align 2 	
 3960              	AHEAD:
 3961 21fc 404700BF 		_NEST
 3962 2200 71050000 		_COMPI	BRAN
 3962      BE050000 
 3962      BD240000 
 3963 220c 150E0000 		_ADR	HERE
 3964 2210 71050000 		_DOLIT	4
 3964      04000000 
 3965 2218 250B0000 		_ADR	CPP
 3966 221c A9090000 		_ADR	PSTOR
 3967 2220 1B040000 		_UNNEST
 3968              	
 3969              	//    REPEAT	( A a -- )
 3970              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3971              	
 3972 2224 F4210000 		.word	_AHEAD
 3973 2228 C6       	_REPEA:	.byte  COMPO+IMEDD+6
 3974 2229 52455045 		.ascii "REPEAT"
 3974      4154
 3975 222f 00       		.p2align 2 	
 3976              	REPEA:
 3977 2230 404700BF 		_NEST
 3978 2234 A9210000 		_ADR	AGAIN
 3979 2238 150E0000 		_ADR	HERE
 3980 223c A5060000 		_ADR	SWAP
 3981 2240 D9050000 		_ADR	STORE
 3982 2244 1B040000 		_UNNEST
 3983              	
 3984              	//    THEN	( A -- )
 3985              	// 	Terminate a conditional branch structure.
 3986              	
 3987 2248 28220000 		.word	_REPEA
ARM GAS  stm32eforth-fl.s 			page 78


 3988 224c C4       	_THENN:	.byte  COMPO+IMEDD+4
 3989 224d 5448454E 		.ascii "THEN"
 3990 2251 0000BF   		.p2align 2 	
 3991              	THENN:
 3992 2254 404700BF 		_NEST
 3993 2258 150E0000 		_ADR	HERE
 3994 225c A5060000 		_ADR	SWAP
 3995 2260 D9050000 		_ADR	STORE
 3996 2264 1B040000 		_UNNEST
 3997              	
 3998              	//    AFT	 ( a -- a A )
 3999              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 4000              	
 4001 2268 4C220000 		.word	_THENN
 4002 226c C3       	_AFT:	.byte  COMPO+IMEDD+3
 4003 226d 414654   		.ascii "AFT"
 4004              		.p2align 2 	
 4005              	AFT:
 4006 2270 404700BF 		_NEST
 4007 2274 85060000 		_ADR	DROP
 4008 2278 FD210000 		_ADR	AHEAD
 4009 227c 49210000 		_ADR	BEGIN
 4010 2280 A5060000 		_ADR	SWAP
 4011 2284 1B040000 		_UNNEST
 4012              	
 4013              	//    ELSE	( A -- A )
 4014              	// 	Start the false clause in an IF-ELSE-THEN structure.
 4015              	
 4016 2288 6C220000 		.word	_AFT
 4017 228c C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 4018 228d 454C5345 		.ascii "ELSE"
 4019 2291 0000BF   		.p2align 2 	
 4020              	ELSEE:
 4021 2294 404700BF 		_NEST
 4022 2298 FD210000 		_ADR	AHEAD
 4023 229c A5060000 		_ADR	SWAP
 4024 22a0 55220000 		_ADR	THENN
 4025 22a4 1B040000 		_UNNEST
 4026              	
 4027              	//    WHILE	( a -- A a )
 4028              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 4029              	
 4030 22a8 8C220000 		.word	_ELSEE
 4031 22ac C5       	_WHILE:	.byte  COMPO+IMEDD+5
 4032 22ad 5748494C 		.ascii "WHILE"
 4032      45
 4033 22b2 00BF     		.p2align 2 	
 4034              	WHILE:
 4035 22b4 404700BF 		_NEST
 4036 22b8 C9210000 		_ADR	IFF
 4037 22bc A5060000 		_ADR	SWAP
 4038 22c0 1B040000 		_UNNEST
 4039              	
 4040              	//    ABORT"	( -- //  string> )
 4041              	// 	Conditional abort with an error message.
 4042              	
 4043 22c4 AC220000 		.word	_WHILE
ARM GAS  stm32eforth-fl.s 			page 79


 4044 22c8 86       	_ABRTQ:	.byte  IMEDD+6
 4045 22c9 41424F52 		.ascii "ABORT\""
 4045      5422
 4046 22cf 00       		.p2align 2 	
 4047              	ABRTQ:
 4048 22d0 404700BF 		_NEST
 4049 22d4 71050000 		_COMPI	ABORQ
 4049      401A0000 
 4049      BD240000 
 4050 22e0 E5200000 		_ADR	STRCQ
 4051 22e4 1B040000 		_UNNEST
 4052              	
 4053              	//    $"	( -- //  string> )
 4054              	// 	Compile an inline word literal.
 4055              	
 4056 22e8 C8220000 		.word	_ABRTQ
 4057 22ec 82       	_STRQ:	.byte  IMEDD+2
 4058 22ed 2422     		.ascii	"$\""
 4059 22ef 00       		.p2align 2 	
 4060              	STRQ:
 4061 22f0 404700BF 		_NEST
 4062 22f4 71050000 		_COMPI	STRQP
 4062      D0130000 
 4062      BD240000 
 4063 2300 E5200000 		_ADR	STRCQ
 4064 2304 1B040000 		_UNNEST
 4065              	
 4066              	//    ."	( -- //  string> )
 4067              	// 	Compile an inline word  literal to be typed out at run time.
 4068              	
 4069 2308 EC220000 		.word	_STRQ
 4070 230c C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 4071 230d 2E22     		.ascii	".\""
 4072 230f 00       		.p2align 2 	
 4073              	DOTQ:
 4074 2310 404700BF 		_NEST
 4075 2314 71050000 		_COMPI	DOTQP
 4075      EC130000 
 4075      BD240000 
 4076 2320 E5200000 		_ADR	STRCQ
 4077 2324 1B040000 		_UNNEST
 4078              	
 4079              	// **************************************************************************
 4080              	//  Name compiler
 4081              	
 4082              	//    ?UNIQUE	( a -- a )
 4083              	// 	Display a warning message if the word already exists.
 4084              	
 4085 2328 0C230000 		.word	_DOTQ
 4086 232c 07       	_UNIQU:	.byte  7
 4087 232d 3F554E49 		.ascii "?UNIQUE"
 4087      515545
 4088              		.p2align 2 	
 4089              	UNIQU:
 4090 2334 404700BF 		_NEST
 4091 2338 95060000 		_ADR	DUPP
 4092 233c 81180000 		_ADR	NAMEQ			// ?name exists
ARM GAS  stm32eforth-fl.s 			page 80


 4093 2340 AD050000 		_QBRAN	UNIQ1	// redefinitions are OK
 4093      60230000 
 4094 2348 ED130000 		_DOTQP	7," reDef "		// but warn the user
 4094      07207265 
 4094      44656620 
 4095 2354 B9060000 		_ADR	OVER
 4096 2358 F1090000 		_ADR	COUNT
 4097 235c 51130000 		_ADR	TYPEE			// just in case its not planned
 4098              	UNIQ1:
 4099 2360 85060000 		_ADR	DROP
 4100 2364 1B040000 		_UNNEST
 4101              	
 4102              	//    $,n	 ( na -- )
 4103              	// 	Build a new dictionary name using the data at na.
 4104              	
 4105              	// 	.word	_UNIQU
 4106              	// _SNAME	.byte  3
 4107              	// 	.ascii "$,n"
 4108              	// 	.p2align 2 	
 4109              	SNAME:
 4110 2368 404700BF 		_NEST
 4111 236c 95060000 		_ADR	DUPP			//  na na
 4112 2370 0D060000 		_ADR	CAT			//  ?null input
 4113 2374 AD050000 		_QBRAN	SNAM1
 4113      B0230000 
 4114 237c 35230000 		_ADR	UNIQU			//  na
 4115 2380 4D0B0000 		_ADR	LAST			//  na last
 4116 2384 ED050000 		_ADR	AT			//  na la
 4117 2388 49200000 		_ADR	COMMA			//  na
 4118 238c 95060000 		_ADR	DUPP			//  na na
 4119 2390 4D0B0000 		_ADR	LAST			//  na na last
 4120 2394 D9050000 		_ADR	STORE			//  na , save na for vocabulary link
 4121 2398 F1090000 		_ADR	COUNT			//  na+1 count
 4122 239c 59070000 		_ADR	PLUS			//  na+1+count
 4123 23a0 610D0000 		_ADR	ALGND			//  word boundary
 4124 23a4 250B0000 		_ADR	CPP
 4125 23a8 D9050000 		_ADR	STORE			//  top of dictionary now
 4126 23ac 1B040000 		_UNNEST
 4127              	SNAM1:
 4128 23b0 D1130000 		_ADR	STRQP
 4129 23b4 07       		.byte	7
 4130 23b5 206E616D 		.ascii " name? "
 4130      653F20
 4131 23bc 151A0000 		_ADR	ABORT
 4132              	
 4133              	//    $COMPILE	( a -- )
 4134              	// 	Compile next word to code dictionary as a token or literal.
 4135              	
 4136 23c0 2C230000 		.word	_UNIQU
 4137 23c4 08       	_SCOMP:	.byte  8
 4138 23c5 24434F4D 		.ascii "$COMPILE"
 4138      50494C45 
 4139 23cd 0000BF   		.p2align 2 	
 4140              	SCOMP:
 4141 23d0 404700BF 		_NEST
 4142 23d4 81180000 		_ADR	NAMEQ
 4143 23d8 69080000 		_ADR	QDUP	// defined?
ARM GAS  stm32eforth-fl.s 			page 81


 4144 23dc AD050000 		_QBRAN	SCOM2
 4144      0C240000 
 4145 23e4 ED050000 		_ADR	AT
 4146 23e8 71050000 		_DOLIT	IMEDD
 4146      80000000 
 4147 23f0 D9060000 		_ADR	ANDD	// immediate?
 4148 23f4 AD050000 		_QBRAN	SCOM1
 4148      04240000 
 4149 23fc 89050000 		_ADR	EXECU
 4150 2400 1B040000 		_UNNEST			// it's immediate, execute
 4151              	SCOM1:
 4152 2404 BD240000 		_ADR	CALLC			// it's not immediate, compile
 4153 2408 1B040000 		_UNNEST	
 4154              	SCOM2:
 4155 240c A5110000 		_ADR	NUMBQ
 4156 2410 AD050000 		_QBRAN	SCOM3
 4156      20240000 
 4157 2418 CD200000 		_ADR	LITER
 4158 241c 1B040000 		_UNNEST			// compile number as integer
 4159              	SCOM3: // compilation abort 
 4160 2420 29240000 		_ADR COLON_ABORT 
 4161 2424 151A0000 		_ADR	ABORT			// error
 4162              	
 4163              	// before aborting a compilation 
 4164              	// reset HERE and LAST
 4165              	// to previous values. 
 4166              	COLON_ABORT:
 4167 2428 404700BF 		_NEST 
 4168 242c 4D0B0000 		_ADR LAST 
 4169 2430 ED050000 		_ADR AT 
 4170 2434 05080000 		_ADR CELLM 
 4171 2438 95060000 		_ADR DUPP 
 4172 243c 250B0000 		_ADR CPP  
 4173 2440 D9050000 		_ADR STORE 
 4174 2444 ED050000 		_ADR AT 
 4175 2448 4D0B0000 		_ADR LAST 
 4176 244c D9050000 		_ADR STORE 
 4177 2450 1B040000 		_UNNEST 
 4178              	
 4179              	//    OVERT	( -- )
 4180              	// 	Link a new word into the current vocabulary.
 4181              	
 4182 2454 C4230000 		.word	_SCOMP
 4183 2458 05       	_OVERT:	.byte  5
 4184 2459 4F564552 		.ascii "OVERT"
 4184      54
 4185 245e 00BF     		.p2align 2 	
 4186              	OVERT:
 4187 2460 404700BF 		_NEST
 4188 2464 4D0B0000 		_ADR	LAST
 4189 2468 ED050000 		_ADR	AT
 4190 246c 110B0000 		_ADR	CNTXT
 4191 2470 D9050000 		_ADR	STORE
 4192 2474 1B040000 		_UNNEST
 4193              	
 4194              	//    ; 	   ( -- )
 4195              	// 	Terminate a colon definition.
ARM GAS  stm32eforth-fl.s 			page 82


 4196              	
 4197 2478 58240000 		.word	_OVERT
 4198 247c C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 4199 247d 3B       		.ascii ";"
 4200 247e 00BF     		.p2align 2 	
 4201              	SEMIS:
 4202 2480 404700BF 		_NEST
 4203 2484 71050000 		_DOLIT	UNNEST
 4203      1A040000 
 4204 248c BD240000 		_ADR	CALLC
 4205 2490 D11A0000 		_ADR	LBRAC
 4206 2494 61240000 		_ADR	OVERT
 4207 2498 1B040000 		_UNNEST
 4208              	
 4209              	//    ]	   ( -- )
 4210              	// 	Start compiling the words in the input stream.
 4211              	
 4212 249c 7C240000 		.word	_SEMIS
 4213 24a0 01       	_RBRAC:	.byte  1
 4214 24a1 5D       		.ascii "]"
 4215 24a2 00BF     		.p2align 2 	
 4216              	RBRAC:
 4217 24a4 404700BF 		_NEST
 4218 24a8 71050000 		_DOLIT	SCOMP
 4218      D0230000 
 4219 24b0 E50A0000 		_ADR	TEVAL
 4220 24b4 D9050000 		_ADR	STORE
 4221 24b8 1B040000 		_UNNEST
 4222              	
 4223              	//    BL.W	( ca -- )
 4224              	// 	compile ca.
 4225              	
 4226              	// 	.word	_RBRAC
 4227              	// _CALLC	.byte  5
 4228              	// 	.ascii "call,"
 4229              	// 	.p2align 2 	
 4230              	CALLC:
 4231 24bc 404700BF 		_NEST
 4232 24c0 71050000 		_DOLIT 1 
 4232      01000000 
 4233 24c8 ED060000 		_ADR ORR 
 4234 24cc 49200000 		_ADR COMMA  
 4235 24d0 1B040000 		_UNNEST 
 4236              	
 4237              	
 4238              	// 	:	( -- //  string> )
 4239              	// 	Start a new colon definition using next word as its name.
 4240              	
 4241 24d4 A0240000 		.word	_RBRAC
 4242 24d8 01       	_COLON:	.byte  1
 4243 24d9 3A       		.ascii ":"
 4244 24da 00BF     		.p2align 2 	
 4245              	COLON:
 4246 24dc 404700BF 		_NEST
 4247 24e0 FD160000 		_ADR	TOKEN
 4248 24e4 69230000 		_ADR	SNAME
 4249 24e8 21040000 		_ADR	COMPI_NEST 
ARM GAS  stm32eforth-fl.s 			page 83


 4250 24ec A5240000 		_ADR	RBRAC
 4251 24f0 1B040000 		_UNNEST
 4252              	
 4253              	//    IMMEDIATE   ( -- )
 4254              	// 	Make the last compiled word an immediate word.
 4255              	
 4256 24f4 D8240000 		.word	_COLON
 4257 24f8 09       	_IMMED:	.byte  9
 4258 24f9 494D4D45 		.ascii "IMMEDIATE"
 4258      44494154 
 4258      45
 4259 2502 00BF     		.p2align 2 	
 4260              	IMMED:
 4261 2504 404700BF 		_NEST
 4262 2508 71050000 		_DOLIT	IMEDD
 4262      80000000 
 4263 2510 4D0B0000 		_ADR	LAST
 4264 2514 ED050000 		_ADR	AT
 4265 2518 ED050000 		_ADR	AT
 4266 251c ED060000 		_ADR	ORR
 4267 2520 4D0B0000 		_ADR	LAST
 4268 2524 ED050000 		_ADR	AT
 4269 2528 D9050000 		_ADR	STORE
 4270 252c 1B040000 		_UNNEST
 4271              	
 4272              	// **************************************************************************
 4273              	//  Defining words
 4274              	
 4275              	//    CONSTANT	( u -- //  string> )
 4276              	// 	Compile a new constant.
 4277              	
 4278 2530 F8240000 		.word	_IMMED
 4279 2534 08       	_CONST:	.byte  8
 4280 2535 434F4E53 		.ascii "CONSTANT"
 4280      54414E54 
 4281 253d 0000BF   		.p2align 2 	
 4282              	CONST:
 4283 2540 404700BF 		_NEST 
 4284 2544 FD160000 		_ADR	TOKEN
 4285 2548 69230000 		_ADR	SNAME
 4286 254c 61240000 		_ADR	OVERT
 4287 2550 21040000 		_ADR	COMPI_NEST
 4288 2554 71050000 		_DOLIT	DOCON
 4288      240A0000 
 4289 255c BD240000 		_ADR	CALLC
 4290 2560 49200000 		_ADR	COMMA
 4291 2564 71050000 		_DOLIT	UNNEST 
 4291      1A040000 
 4292 256c BD240000 		_ADR	CALLC  
 4293 2570 1B040000 		_UNNEST
 4294              	
 4295              		.p2align 2 
 4296              	// doDOES> ( -- a )
 4297              	// runtime action of DOES> 
 4298              	// leave parameter field address on stack 
 4299              	DODOES:
 4300 2574 404700BF 		_NEST 
ARM GAS  stm32eforth-fl.s 			page 84


 4301 2578 19060000 		_ADR	RFROM
 4302 257c F5070000 		_ADR	CELLP 
 4303 2580 B5070000 		_ADR	ONEP  
 4304 2584 4D0B0000 		_ADR LAST 
 4305 2588 ED050000 		_ADR AT
 4306 258c 19170000 		_ADR NAMET 
 4307 2590 F5070000 		_ADR CELLP 
 4308 2594 D9050000 		_ADR STORE  
 4309 2598 1B040000 		_UNNEST 
 4310              	
 4311              		.p2align 2
 4312              	//  DOES> ( -- )
 4313              	//  compile time action 
 4314 259c 34250000 		.word _CONST   
 4315 25a0 C5       	_DOES: .byte IMEDD+COMPO+5 
 4316 25a1 444F4553 		.ascii "DOES>"
 4316      3E
 4317 25a6 00BF     		.p2align 2
 4318              	DOES: 
 4319 25a8 404700BF 		_NEST 
 4320 25ac 71050000 		_DOLIT DODOES 
 4320      74250000 
 4321 25b4 BD240000 		_ADR CALLC 
 4322 25b8 71050000 		_DOLIT	UNNEST
 4322      1A040000 
 4323 25c0 BD240000 		_ADR	CALLC 
 4324 25c4 21040000 		_ADR COMPI_NEST
 4325 25c8 71050000 		_DOLIT RFROM 
 4325      18060000 
 4326 25d0 BD240000 		_ADR	CALLC
 4327 25d4 1B040000 		_UNNEST 
 4328              	
 4329              	
 4330              	
 4331              	//  DEFER@ ( "name" -- a )
 4332              	//  return value of code field of defered function. 
 4333 25d8 A0250000 		.word _DOES 
 4334 25dc 06       	_DEFERAT: .byte 6 
 4335 25dd 44454645 		.ascii "DEFER@"
 4335      5240
 4336 25e3 00       		.p2align 2 
 4337              	DEFERAT: 
 4338 25e4 404700BF 		_NEST 
 4339 25e8 09200000 		_ADR TICK
 4340 25ec F5070000 		_ADR CELLP 
 4341 25f0 ED050000 		_ADR AT 
 4342 25f4 C5070000 		_ADR ONEM 
 4343 25f8 1B040000 		_UNNEST 
 4344              	
 4345              	// DEFER! ( "name1" "name2" -- )
 4346              	// assign an action to a defered word 
 4347 25fc DC250000 		.word _DEFERAT 
 4348 2600 06       	_DEFERSTO: .byte 6 
 4349 2601 44454645 		.ascii "DEFER!" 
 4349      5221
 4350 2607 00       		.p2align 2 
 4351              	DEFERSTO:
ARM GAS  stm32eforth-fl.s 			page 85


 4352 2608 404700BF 		_NEST 
 4353 260c 09200000 		_ADR TICK 
 4354 2610 B5070000 		_ADR ONEP 
 4355 2614 09200000 		_ADR TICK 
 4356 2618 F5070000 		_ADR CELLP 
 4357 261c D9050000 		_ADR STORE 
 4358 2620 1B040000 		_UNNEST
 4359              	
 4360              	//  DEFER ( "name" -- )
 4361              	//  create a defered definition
 4362 2624 00260000 		.word _DEFERSTO  
 4363 2628 05       	_DEFER: .byte 5 
 4364 2629 44454645 		.ascii "DEFER"
 4364      52
 4365 262e 00BF     		.p2align 2
 4366              	DEFER:
 4367 2630 404700BF 		_NEST 
 4368 2634 81260000 		_ADR CREAT 
 4369 2638 71050000 		_DOLIT UNNEST 
 4369      1A040000 
 4370 2640 BD240000 		_ADR CALLC 
 4371 2644 71050000 		_DOLIT DEFER_NOP
 4371      68260000 
 4372 264c B5070000 		_ADR ONEP 
 4373 2650 4D0B0000 		_ADR LAST 
 4374 2654 ED050000 		_ADR AT 
 4375 2658 19170000 		_ADR NAMET 
 4376 265c F5070000 		_ADR CELLP 
 4377 2660 D9050000 		_ADR STORE 
 4378 2664 1B040000 		_UNNEST 
 4379              	DEFER_NOP:
 4380 2668 404700BF 		_NEST  
 4381 266c 6D050000 		_ADR NOP 
 4382 2670 1B040000 		_UNNEST 
 4383              	
 4384              	//    CREATE	( -- //  string> )
 4385              	// 	Compile a new array entry without allocating code space.
 4386              	
 4387 2674 28260000 		.word	_DEFER 
 4388 2678 06       	_CREAT:	.byte  6
 4389 2679 43524541 		.ascii "CREATE"
 4389      5445
 4390 267f 00       		.p2align 2 	
 4391              	CREAT:
 4392 2680 404700BF 		_NEST 
 4393 2684 FD160000 		_ADR	TOKEN
 4394 2688 69230000 		_ADR	SNAME
 4395 268c 61240000 		_ADR	OVERT
 4396 2690 21040000 		_ADR	COMPI_NEST 
 4397 2694 71050000 		_DOLIT	DOVAR
 4397      180A0000 
 4398 269c BD240000 		_ADR	CALLC
 4399 26a0 1B040000 		_UNNEST
 4400              	
 4401              	//    VARIABLE	( -- //  string> )
 4402              	// 	Compile a new variable initialized to 0.
 4403              	
ARM GAS  stm32eforth-fl.s 			page 86


 4404 26a4 78260000 		.word	_CREAT
 4405 26a8 08       	_VARIA:	.byte  8
 4406 26a9 56415249 		.ascii "VARIABLE"
 4406      41424C45 
 4407 26b1 0000BF   		.p2align 2 	
 4408              	VARIA:
 4409 26b4 404700BF 		_NEST
 4410 26b8 81260000 		_ADR	CREAT
 4411 26bc 71050000 		_DOLIT	0
 4411      00000000 
 4412 26c4 49200000 		_ADR	COMMA
 4413 26c8 71050000 		_DOLIT UNNEST
 4413      1A040000 
 4414 26d0 BD240000 		_ADR	CALLC  
 4415 26d4 1B040000 		_UNNEST
 4416              	
 4417              	// **************************************************************************
 4418              	//  Tools
 4419              	
 4420              	//  TRACE ( f -- )
 4421              	// enable or disable tracing 
 4422 26d8 A8260000 		.word _VARIA 
 4423 26dc 05       	_TRACE: .byte 5
 4424 26dd 54524143 		.ascii "TRACE"
 4424      45
 4425 26e2 00BF     		.p2align 2
 4426              	TRACE: 
 4427 26e4 404700BF 		_NEST 
 4428 26e8 650B0000 		_ADR FTRACE 
 4429 26ec D9050000 		_ADR STORE 
 4430 26f0 1B040000 		_UNNEST 
 4431              	
 4432              	// TR_PRINT ( ca -- )
 4433              	// print name from ca  
 4434 26f4 DC260000 		.word _TRACE 
 4435 26f8 07       	_DBG_PRT: .byte 7 
 4436 26f9 4442475F 		.ascii "DBG_PRT"
 4436      505254
 4437              	DBG_PRT:
 4438 2700 404700BF 		_NEST 
 4439 2704 31280000 		_ADR TNAME 
 4440 2708 69080000 		_ADR QDUP 
 4441 270c AD050000 		_QBRAN 1f 
 4441      20270000 
 4442 2714 F1090000 		_ADR COUNT 
 4443 2718 51130000 		_ADR TYPEE 
 4444 271c 85130000 		_ADR CR
 4445              	1:  	
 4446 2720 1B040000 		_UNNEST 
 4447              	
 4448              	//    dm+	 ( a u -- a )
 4449              	// 	Dump u bytes from , leaving a+u on the stack.
 4450              	
 4451              	// 	.word	_TRACE
 4452              	// _DMP	.byte  3
 4453              	// 	.ascii "dm+"
 4454              	// 	.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 87


 4455              	DMP:
 4456 2724 404700BF 		_NEST
 4457 2728 B9060000 		_ADR	OVER
 4458 272c 71050000 		_DOLIT	4
 4458      04000000 
 4459 2734 31140000 		_ADR	UDOTR			// display address
 4460 2738 FD120000 		_ADR	SPACE
 4461 273c 3D060000 		_ADR	TOR			// start count down loop
 4462 2740 BF050000 		_BRAN	PDUM2			// skip first pass
 4462      60270000 
 4463              	PDUM1:
 4464 2748 95060000 	  _ADR	DUPP
 4465 274c 0D060000 		_ADR	CAT
 4466 2750 71050000 		_DOLIT	3
 4466      03000000 
 4467 2758 31140000 		_ADR	UDOTR			// display numeric data
 4468 275c B5070000 		_ADR	ONEP			// increment address
 4469              	PDUM2:
 4470 2760 95050000 	  _ADR	DONXT
 4471 2764 48270000 		.word	PDUM1	// loop till done
 4472 2768 1B040000 		_UNNEST
 4473              		.p2align 2 
 4474              	//    DUMP	( a u -- )
 4475              	// 	Dump u bytes from a, in a formatted manner.
 4476              	
 4477 276c A8260000 		.word	_VARIA
 4478 2770 04       	_DUMP:	.byte  4
 4479 2771 44554D50 		.ascii "DUMP"
 4480 2775 0000BF   		.p2align 2 	
 4481              	DUMP:
 4482 2778 404700BF 		_NEST
 4483 277c 890A0000 		_ADR	BASE
 4484 2780 ED050000 		_ADR	AT
 4485 2784 3D060000 		_ADR	TOR
 4486 2788 F5100000 		_ADR	HEX			// save radix,set hex
 4487 278c 71050000 		_DOLIT	16
 4487      10000000 
 4488 2794 010D0000 		_ADR	SLASH			// change count to lines
 4489 2798 3D060000 		_ADR	TOR
 4490 279c BF050000 		_BRAN	DUMP4			// start count down loop
 4490      CC270000 
 4491              	DUMP1:
 4492 27a4 85130000 	  _ADR	CR
 4493 27a8 71050000 		_DOLIT	16
 4493      10000000 
 4494 27b0 A5080000 		_ADR	DDUP
 4495 27b4 25270000 		_ADR	DMP			// display numeric
 4496 27b8 7D080000 		_ADR	ROT
 4497 27bc 7D080000 		_ADR	ROT
 4498 27c0 FD120000 		_ADR	SPACE
 4499 27c4 FD120000 		_ADR	SPACE
 4500 27c8 51130000 		_ADR	TYPEE			// display printable characters
 4501              	DUMP4:
 4502 27cc 95050000 	  _DONXT	DUMP1	// loop till done
 4502      A4270000 
 4503              	DUMP3:
 4504 27d4 85060000 		_ADR	DROP
ARM GAS  stm32eforth-fl.s 			page 88


 4505 27d8 19060000 		_ADR	RFROM
 4506 27dc 890A0000 		_ADR	BASE
 4507 27e0 D9050000 		_ADR	STORE			// restore radix
 4508 27e4 1B040000 		_UNNEST
 4509              	
 4510              	//    .S	  ( ... -- ... )
 4511              	// 	Display the contents of the data stack.
 4512              	
 4513 27e8 70270000 		.word	_DUMP
 4514              	_DOTS:
 4515 27ec 02       		.byte  2
 4516 27ed 2E53     		.ascii ".S"
 4517 27ef 00       		.p2align 2 	
 4518              	DOTS:
 4519 27f0 404700BF 		_NEST
 4520 27f4 FD120000 		_ADR	SPACE
 4521 27f8 C90D0000 		_ADR	DEPTH			// stack depth
 4522 27fc 3D060000 		_ADR	TOR			// start count down loop
 4523 2800 BF050000 		_BRAN	DOTS2			// skip first pass
 4523      14280000 
 4524              	DOTS1:
 4525 2808 2D060000 		_ADR	RAT
 4526 280c ED0D0000 		_ADR	PICK
 4527 2810 89140000 		_ADR	DOT			// index stack, display contents
 4528              	DOTS2:
 4529 2814 95050000 		_DONXT	DOTS1	// loop till done
 4529      08280000 
 4530 281c FD120000 		_ADR	SPACE
 4531 2820 1B040000 		_UNNEST
 4532              	
 4533              	//    >NAME	( ca -- na | F )
 4534              	// 	Convert code address to a name address.
 4535              	
 4536 2824 EC270000 		.word	_DOTS
 4537 2828 05       	_TNAME:	.byte  5
 4538 2829 3E4E414D 		.ascii ">NAME"
 4538      45
 4539 282e 00BF     		.p2align 2 	
 4540              	TNAME:
 4541 2830 404700BF 		_NEST
 4542 2834 3D060000 		_ADR	TOR			//  
 4543 2838 110B0000 		_ADR	CNTXT			//  va
 4544 283c ED050000 		_ADR	AT			//  na
 4545              	TNAM1:
 4546 2840 95060000 		_ADR	DUPP			//  na na
 4547 2844 AD050000 		_QBRAN	TNAM2	//  vocabulary end, no match
 4547      74280000 
 4548 284c 95060000 		_ADR	DUPP			//  na na
 4549 2850 19170000 		_ADR	NAMET			//  na ca
 4550 2854 2D060000 		_ADR	RAT			//  na ca code
 4551 2858 01070000 		_ADR	XORR			//  na f --
 4552 285c AD050000 		_QBRAN	TNAM2
 4552      74280000 
 4553 2864 05080000 		_ADR	CELLM			//  la 
 4554 2868 ED050000 		_ADR	AT			//  next_na
 4555 286c BF050000 		_BRAN	TNAM1
 4555      40280000 
ARM GAS  stm32eforth-fl.s 			page 89


 4556              	TNAM2:	
 4557 2874 19060000 		_ADR	RFROM
 4558 2878 85060000 		_ADR	DROP			//  0|na --
 4559 287c 1B040000 		_UNNEST			// 0
 4560              	
 4561              	//    .ID	 ( na -- )
 4562              	// 	Display the name at address.
 4563              	
 4564 2880 28280000 		.word	_TNAME
 4565 2884 03       	_DOTID:	.byte  3
 4566 2885 2E4944   		.ascii ".ID"
 4567              		.p2align 2 	
 4568              	DOTID:
 4569 2888 404700BF 		_NEST
 4570 288c 69080000 		_ADR	QDUP			// if zero no name
 4571 2890 AD050000 		_QBRAN	DOTI1
 4571      B0280000 
 4572 2898 F1090000 		_ADR	COUNT
 4573 289c 71050000 		_DOLIT	0x1F
 4573      1F000000 
 4574 28a4 D9060000 		_ADR	ANDD			// mask lexicon bits
 4575 28a8 51130000 		_ADR	TYPEE
 4576 28ac 1B040000 		_UNNEST			// display name string
 4577              	DOTI1:
 4578 28b0 ED130000 		_DOTQP	9," {noName}"
 4578      09207B6E 
 4578      6F4E616D 
 4578      657D00BF 
 4579 28c0 1B040000 		_UNNEST
 4580              	
 4581              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 4582              	.if WANT_SEE 
 4583              	//    SEE	 ( -- //  string> )
 4584              	// 	A simple decompiler.
 4585              	
 4586              		.word	_DOTID
 4587              	_SEE:	.byte  3
 4588              		.ascii "SEE"
 4589              		.p2align 2 	
 4590              	SEE:
 4591              		_NEST
 4592              		_ADR	TICK	//  ca --, starting address
 4593              		_ADR	CR	
 4594              		_DOLIT	20
 4595              		_ADR	TOR
 4596              	SEE1:
 4597              		_ADR	CELLP			//  a
 4598              		_ADR	DUPP			//  a a
 4599              		_ADR	DECOMP		//  a
 4600              		_DONXT	SEE1
 4601              		_ADR	DROP
 4602              		_UNNEST
 4603              	
 4604              	// 	DECOMPILE ( a -- )
 4605              	// 	Convert code in a.  Display name of command or as data.
 4606              	
 4607              		.word	_SEE
ARM GAS  stm32eforth-fl.s 			page 90


 4608              	_DECOM:	.byte  9
 4609              		.ascii "DECOMPILE"
 4610              		.p2align 2 
 4611              		
 4612              	DECOMP:	
 4613              		_NEST
 4614              		_ADR	DUPP			//  a a
 4615              	// 	_ADR	TOR			//  a
 4616              		_ADR	AT			//  a code
 4617              		_ADR	DUPP			//  a code code
 4618              		_DOLIT	0xF800D000 //0xF800F800
 4619              		_ADR	ANDD
 4620              		_DOLIT	0xF000D000 //0xF800F000
 4621              		_ADR	EQUAL			//  a code ?
 4622              		_ADR	INVER 
 4623              		_QBRAN	DECOM2	//  not a command
 4624              		//  a valid_code --, extract address and display name
 4625              		MOVW	R0,#0xFFE
 4626              		MOV	R4,R5
 4627              		LSL	R5,R5,#21		//  get bits 22-12
 4628              		ASR	R5,R5,#9		//  with sign extension
 4629              		LSR	R4,R4,#15		//  get bits 11-1
 4630              		AND	R4,R4,R0		//  retain only bits 11-1
 4631              		ORR	R5,R5,R4		//  get bits 22-1
 4632              		NOP
 4633              		_ADR	OVER			//  a offset a
 4634              		_ADR	PLUS			//  a target-4
 4635              		_ADR	CELLP			//  a target
 4636              		_ADR	TNAME			//  a na/0 --, is it a name?
 4637              		_ADR	QDUP			//  name address or zero
 4638              		_QBRAN	DECOM1
 4639              		_ADR	SPACE			//  a na
 4640              		_ADR	DOTID			//  a --, display name
 4641              	// 	_ADR	RFROM			//  a
 4642              		_ADR	DROP
 4643              		_UNNEST
 4644              	DECOM1:	// _ADR	RFROM		//  a
 4645              		_ADR	AT			//  data
 4646              		_ADR	UDOT			//  display data
 4647              		_UNNEST
 4648              	DECOM2:
 4649              		_ADR	UDOT
 4650              	// 	_ADR	RFROM
 4651              		_ADR	DROP
 4652              		_UNNEST
 4653              	
 4654              	//    WORDS	( -- )
 4655              	// 	Display the names in the context vocabulary.
 4656              	
 4657              		.word	_DECOM
 4658              	.else 
 4659 28c4 84280000 		.word _DOTID 
 4660              	.endif 
 4661 28c8 05       	_WORDS:	.byte  5
 4662 28c9 574F5244 		.ascii "WORDS"
 4662      53
 4663 28ce 00BF     		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 91


 4664              	WORDS:
 4665 28d0 404700BF 		_NEST
 4666 28d4 85130000 		_ADR	CR
 4667 28d8 110B0000 		_ADR	CNTXT
 4668 28dc ED050000 		_ADR	AT			// only in context
 4669              	WORS1:
 4670 28e0 69080000 		_ADR	QDUP			// ?at end of list
 4671 28e4 AD050000 		_QBRAN	WORS2
 4671      08290000 
 4672 28ec 95060000 		_ADR	DUPP
 4673 28f0 FD120000 		_ADR	SPACE
 4674 28f4 89280000 		_ADR	DOTID			// display a name
 4675 28f8 05080000 		_ADR	CELLM
 4676 28fc ED050000 		_ADR	AT
 4677 2900 BF050000 		_BRAN	WORS1
 4677      E0280000 
 4678              	WORS2:
 4679 2908 1B040000 		_UNNEST
 4680              	
 4681              	// **************************************************************************
 4682              	//  cold start
 4683              	
 4684              	//    VER	 ( -- n )
 4685              	// 	Return the version number of this implementation.
 4686              	
 4687              	// 	.word	_WORDS
 4688              	// _VERSN	.byte  3
 4689              	// 	.ascii "VER"
 4690              	// 	.p2align 2 	
 4691              	VERSN:
 4692 290c 404700BF 		_NEST
 4693 2910 71050000 		_DOLIT	VER*256+EXT
 4693      00010000 
 4694 2918 1B040000 		_UNNEST
 4695              	
 4696              	//    hi	  ( -- )
 4697              	// 	Display the sign-on message of eForth.
 4698              	
 4699 291c C8280000 		.word	_WORDS
 4700 2920 02       	_HI:	.byte  2
 4701 2921 4849     		.ascii "HI"
 4702 2923 00       		.p2align 2 	
 4703              	HI:
 4704 2924 404700BF 		_NEST
 4705 2928 85130000 		_ADR	CR	// initialize I/O
 4706 292c ED130000 		_DOTQP	26, "blue pill stm32eForth-it v" 
 4706      1A626C75 
 4706      65207069 
 4706      6C6C2073 
 4706      746D3332 
 4707 294c 890A0000 		_ADR	BASE
 4708 2950 ED050000 		_ADR	AT
 4709 2954 F5100000 		_ADR	HEX	// save radix
 4710 2958 0D290000 		_ADR	VERSN
 4711 295c E50F0000 		_ADR	BDIGS
 4712 2960 31100000 		_ADR	DIG
 4713 2964 31100000 		_ADR	DIG
ARM GAS  stm32eforth-fl.s 			page 92


 4714 2968 71050000 		_DOLIT	'.'
 4714      2E000000 
 4715 2970 05100000 		_ADR	HOLD
 4716 2974 51100000 		_ADR	DIGS
 4717 2978 A5100000 		_ADR	EDIGS
 4718 297c 51130000 		_ADR	TYPEE	// format version number
 4719 2980 890A0000 		_ADR	BASE
 4720 2984 D9050000 		_ADR	STORE
 4721 2988 85130000 		_ADR	CR
 4722 298c 1B040000 		_UNNEST			// restore radix
 4723              	
 4724              	//    COLD	( -- )
 4725              	// 	The high level cold start sequence.
 4726              	
 4727 2990 20290000 		.word	_HI
 4728 2994 04       	LASTN:	.byte  4
 4729 2995 434F4C44 		.ascii "COLD"
 4730 2999 000000   		.p2align 2,0	
 4731              	COLD:
 4732              	//  Initiate Forth registers
 4733 299c 4FF00003 		mov r3,#UPP&0xffff
 4734 29a0 C2F20003 		movt r3,#UPP>>16 
 4735 29a4 03F59F42 		add R2,R3,#RPP&0xffff	// Forth return stack
 4736 29a8 03F59D41 		add R1,R3,#SPP&0xffff // Forth data stack
 4737 29ac 85EA0505 		eor R5,R5,R5			//  tos=0
 4738 29b0 1D66     		str r5,[r3,#RX_HEAD_OFS]
 4739 29b2 5D66     		str r5,[r3,#RX_TAIL_OFS]
 4740 29b4 1648     		ldr R0,=COLD1 
 4741 29b6 FDF72DBD 		_NEXT
 4742              	COLD1:
 4743 29ba 71050000 		_DOLIT  0 
 4743      00000000 
 4744 29c2 01000000 		_ADR ULED // turn off user LED 
 4745 29c6 71050000 		_DOLIT	UZERO
 4745      00020000 
 4746 29ce 71050000 		_DOLIT	UPP
 4746      00000020 
 4747 29d6 71050000 		_DOLIT	ULAST-UZERO
 4747      54000000 
 4748 29de B50E0000 		_ADR	MOVE 			// initialize user area
 4749 29e2 9D1B0000 		_ADR	PRESE			// initialize stack and TIB
 4750 29e6 351D0000 		_ADR IMGQ		// if there is a saved image load it  
 4751 29ea AD050000 		_QBRAN 1f
 4751      F6290000 
 4752 29f2 651D0000 		_ADR	LOAD_IMG 
 4753              	1:
 4754 29f6 750A0000 		_ADR	TBOOT
 4755 29fa 650E0000 		_ADR	ATEXE			// application boot
 4756 29fe 61240000 		_ADR	OVERT
 4757 2a02 BF050000 		_BRAN	QUIT			// start interpretation
 4757      BC1B0000 
 4758              	COLD2:
 4759 2a0a 00BF     		.p2align 2 	
 4760              	CTOP:
 4761 2a0c FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4762              	
 4763              		.section .text.user, "a", %progbits 
ARM GAS  stm32eforth-fl.s 			page 93


 4764              		.p2align 10 
 4765              	USER_SPACE: // save user image here.  
 4766 0000 FFFFFFFF 		.word 0XFFFFFFFF
 4767              	
 4768              	  .end 
ARM GAS  stm32eforth-fl.s 			page 94


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  stm32eforth-fl.s 			page 95


board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
board/blue-pill/stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
board/blue-pill/stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
board/blue-pill/stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
board/blue-pill/stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
board/blue-pill/stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
board/blue-pill/stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
board/blue-pill/stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
board/blue-pill/stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
board/blue-pill/stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
board/blue-pill/stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
board/blue-pill/stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
board/blue-pill/stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
board/blue-pill/stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
board/blue-pill/stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
board/blue-pill/stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
board/blue-pill/stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
board/blue-pill/stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
board/blue-pill/stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
board/blue-pill/stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
board/blue-pill/stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
board/blue-pill/stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
board/blue-pill/stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
board/blue-pill/stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
board/blue-pill/stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
board/blue-pill/stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
board/blue-pill/stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
board/blue-pill/stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
board/blue-pill/stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
board/blue-pill/stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
board/blue-pill/stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
board/blue-pill/stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
board/blue-pill/stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
board/blue-pill/stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
    stm32eforth-fl.s:91     *ABS*:0000000040011000 LED_GPIO
    stm32eforth-fl.s:92     *ABS*:000000000000000d LED_PIN
    stm32eforth-fl.s:93     *ABS*:0000000040013800 UART
    stm32eforth-fl.s:96     *ABS*:0000000020004e80 SPP
    stm32eforth-fl.s:97     *ABS*:0000000020004e80 TIBB
    stm32eforth-fl.s:98     *ABS*:0000000020004f80 RPP
    stm32eforth-fl.s:99     *ABS*:0000000020000000 UPP
    stm32eforth-fl.s:100    *ABS*:0000000020000100 DTOP
    stm32eforth-fl.s:101    *ABS*:0000000020004e00 DEND
    stm32eforth-fl.s:102    *ABS*:0000000020000000 RAMOFFSET
    stm32eforth-fl.s:103    *ABS*:0000000020005000 RAMEND
    stm32eforth-fl.s:108    *ABS*:0000000000000004 SEED_OFS
    stm32eforth-fl.s:109    *ABS*:0000000000000008 TICKS_OFS
ARM GAS  stm32eforth-fl.s 			page 96


    stm32eforth-fl.s:110    *ABS*:000000000000000c TIMER_OFS
    stm32eforth-fl.s:111    *ABS*:0000000000000010 FTRACE_OFS
    stm32eforth-fl.s:112    *ABS*:0000000000000014 IMG_SIGN_OFS
    stm32eforth-fl.s:113    *ABS*:0000000000000018 BOOT_OFS
    stm32eforth-fl.s:114    *ABS*:000000000000001c BASE_OFS
    stm32eforth-fl.s:115    *ABS*:0000000000000020 TMP_OFS
    stm32eforth-fl.s:116    *ABS*:0000000000000024 SPAN_OFS
    stm32eforth-fl.s:117    *ABS*:0000000000000028 TOIN_OFS
    stm32eforth-fl.s:118    *ABS*:000000000000002c NTIB_OFS
    stm32eforth-fl.s:119    *ABS*:0000000000000030 TIB_OFS
    stm32eforth-fl.s:120    *ABS*:0000000000000034 EVAL_OFS
    stm32eforth-fl.s:121    *ABS*:0000000000000038 HLD_OFS
    stm32eforth-fl.s:122    *ABS*:000000000000003c CTXT_OFS
    stm32eforth-fl.s:123    *ABS*:0000000000000040 FORTH_CTOP_OFS
    stm32eforth-fl.s:124    *ABS*:0000000000000044 RAM_CTOP_OFS
    stm32eforth-fl.s:125    *ABS*:0000000000000048 LASTN_OFS
    stm32eforth-fl.s:126    *ABS*:000000000000004c VARS_END_OFS
    stm32eforth-fl.s:128    *ABS*:0000000000000010 RX_QUEUE_SIZE
    stm32eforth-fl.s:129    *ABS*:0000000000000050 RX_QUEUE_OFS
    stm32eforth-fl.s:130    *ABS*:0000000000000060 RX_HEAD_OFS
    stm32eforth-fl.s:131    *ABS*:0000000000000064 RX_TAIL_OFS
    stm32eforth-fl.s:218    .isr_vector:0000000000000000 isr_vectors
    stm32eforth-fl.s:424    .text:00000000000000b4 reset_handler
    stm32eforth-fl.s:334    .text:0000000000000000 default_handler
    stm32eforth-fl.s:378    .text:000000000000005c systick_handler
    stm32eforth-fl.s:396    .text:0000000000000078 uart_rx_handler
    stm32eforth-fl.s:300    .isr_vector:0000000000000130 $d
    stm32eforth-fl.s:302    .isr_vector:0000000000000200 UZERO
    stm32eforth-fl.s:4703   .text:0000000000002924 HI
                            *ABS*:000000000000000a BASEE
    stm32eforth-fl.s:3292   .text:0000000000001a74 INTER
    stm32eforth-fl.s:4728   .text:0000000000002994 LASTN
    stm32eforth-fl.s:4760   .text:0000000000002a0c CTOP
    stm32eforth-fl.s:323    .isr_vector:0000000000000254 ULAST
    stm32eforth-fl.s:332    .text:0000000000000000 $t
    stm32eforth-fl.s:348    .text:0000000000000024 exception_msg
    stm32eforth-fl.s:354    .text:000000000000003c uart_tx
    stm32eforth-fl.s:361    .text:0000000000000048 reboot
    stm32eforth-fl.s:349    .text:0000000000000024 $d
    stm32eforth-fl.s:369    .text:0000000000000058 scb_adr
    stm32eforth-fl.s:370    .text:0000000000000058 $d
    stm32eforth-fl.s:376    .text:000000000000005c $t
    stm32eforth-fl.s:388    .text:0000000000000076 systick_exit
    stm32eforth-fl.s:540    .text:00000000000001b0 remap
    stm32eforth-fl.s:436    .text:00000000000000d0 init_devices
    stm32eforth-fl.s:3414   .text:0000000000001bdc unlock
    stm32eforth-fl.s:431    .text:00000000000000cc nest_adr
    stm32eforth-fl.s:4731   .text:000000000000299c COLD
    stm32eforth-fl.s:432    .text:00000000000000cc $d
    stm32eforth-fl.s:626    .text:000000000000040c NEST
    stm32eforth-fl.s:435    .text:00000000000000d0 $t
    stm32eforth-fl.s:451    .text:00000000000000ee wait_hserdy
    stm32eforth-fl.s:471    .text:0000000000000108 wait_pllrdy
    stm32eforth-fl.s:484    .text:0000000000000128 wait_sws
    stm32eforth-fl.s:559    .text:00000000000001e0 remap_dest
    stm32eforth-fl.s:557    .text:00000000000001dc remap_src
    stm32eforth-fl.s:558    .text:00000000000001dc $d
ARM GAS  stm32eforth-fl.s 			page 97


    stm32eforth-fl.s:565    *ABS*:0000000000000001 VER
    stm32eforth-fl.s:566    *ABS*:0000000000000000 EXT
    stm32eforth-fl.s:570    *ABS*:0000000000000040 COMPO
    stm32eforth-fl.s:571    *ABS*:0000000000000080 IMEDD
    stm32eforth-fl.s:572    *ABS*:00000000ffffff1f MASKK
    stm32eforth-fl.s:574    *ABS*:0000000000000004 CELLL
    stm32eforth-fl.s:576    *ABS*:0000000000000008 VOCSS
    stm32eforth-fl.s:578    *ABS*:0000000000000008 BKSPP
    stm32eforth-fl.s:579    *ABS*:000000000000000a LF
    stm32eforth-fl.s:580    *ABS*:000000000000000d CRR
    stm32eforth-fl.s:581    *ABS*:000000000000001b ERR
    stm32eforth-fl.s:582    *ABS*:0000000000000027 TIC
    stm32eforth-fl.s:603    .text:00000000000001e4 $t
    stm32eforth-fl.s:615    .text:0000000000000400 TPUSH
    stm32eforth-fl.s:630    .text:0000000000000414 INEXT
    stm32eforth-fl.s:620    .text:0000000000000406 TPOP
    stm32eforth-fl.s:642    .text:000000000000041a UNNEST
    stm32eforth-fl.s:654    .text:0000000000000420 COMPI_NEST
    stm32eforth-fl.s:669    .text:000000000000043e $d
    stm32eforth-fl.s:670    .text:0000000000000442 _RAND
    stm32eforth-fl.s:673    .text:000000000000044c RAND
    stm32eforth-fl.s:675    .text:0000000000000450 $d
    stm32eforth-fl.s:1635   .text:0000000000000a38 SEED
    stm32eforth-fl.s:900    .text:00000000000005ec AT
    stm32eforth-fl.s:1017   .text:0000000000000694 DUPP
    stm32eforth-fl.s:801    .text:0000000000000570 DOLIT
    stm32eforth-fl.s:1129   .text:0000000000000748 LSHIFT
    stm32eforth-fl.s:1090   .text:0000000000000700 XORR
    stm32eforth-fl.s:1117   .text:0000000000000730 RSHIFT
    stm32eforth-fl.s:887    .text:00000000000005d8 STORE
    stm32eforth-fl.s:1417   .text:00000000000008f8 ABSS
    stm32eforth-fl.s:1028   .text:00000000000006a4 SWAP
    stm32eforth-fl.s:1983   .text:0000000000000ce8 MODD
    stm32eforth-fl.s:701    .text:00000000000004b4 _PAUSE
    stm32eforth-fl.s:703    .text:00000000000004ba $t
    stm32eforth-fl.s:704    .text:00000000000004bc PAUSE
    stm32eforth-fl.s:706    .text:00000000000004c0 $d
    stm32eforth-fl.s:1657   .text:0000000000000a60 TIMER
    stm32eforth-fl.s:708    .text:00000000000004c8 PAUSE_LOOP
    stm32eforth-fl.s:849    .text:00000000000005ac QBRAN
    stm32eforth-fl.s:713    .text:00000000000004e0 PAUSE_EXIT
    stm32eforth-fl.s:866    .text:00000000000005be BRAN
    stm32eforth-fl.s:719    .text:00000000000004e8 _ULED
    stm32eforth-fl.s:723    .text:00000000000004f0 ULED
    stm32eforth-fl.s:732    .text:0000000000000508 ULED_OFF
    stm32eforth-fl.s:738    .text:000000000000050c $d
    stm32eforth-fl.s:739    .text:0000000000000510 _QRX
    stm32eforth-fl.s:742    .text:0000000000000518 QKEY
    stm32eforth-fl.s:743    .text:0000000000000518 QRX
    stm32eforth-fl.s:762    .text:0000000000000542 $d
    stm32eforth-fl.s:763    .text:0000000000000546 _TXSTO
    stm32eforth-fl.s:766    .text:000000000000054c TXSTO
    stm32eforth-fl.s:767    .text:000000000000054c EMIT
    stm32eforth-fl.s:768    .text:000000000000054c TECHO
    stm32eforth-fl.s:771    .text:0000000000000554 TX1
    stm32eforth-fl.s:786    .text:0000000000000564 $d
    stm32eforth-fl.s:787    .text:0000000000000568 _NOP
ARM GAS  stm32eforth-fl.s 			page 98


    stm32eforth-fl.s:789    .text:000000000000056c $t
    stm32eforth-fl.s:790    .text:000000000000056c NOP
    stm32eforth-fl.s:809    .text:000000000000057a $d
    stm32eforth-fl.s:810    .text:000000000000057e _EXECU
    stm32eforth-fl.s:812    .text:0000000000000586 $t
    stm32eforth-fl.s:813    .text:0000000000000588 EXECU
    stm32eforth-fl.s:828    .text:0000000000000594 DONXT
    stm32eforth-fl.s:835    .text:00000000000005a2 NEXT1
    stm32eforth-fl.s:855    .text:00000000000005b8 QBRAN1
    stm32eforth-fl.s:873    .text:00000000000005c2 $d
    stm32eforth-fl.s:874    .text:00000000000005c6 _EXIT
    stm32eforth-fl.s:877    .text:00000000000005cc EXIT
    stm32eforth-fl.s:878    .text:00000000000005cc $d
    stm32eforth-fl.s:884    .text:00000000000005d4 _STORE
    stm32eforth-fl.s:886    .text:00000000000005d6 $t
    stm32eforth-fl.s:896    .text:00000000000005e4 $d
    stm32eforth-fl.s:897    .text:00000000000005e8 _AT
    stm32eforth-fl.s:899    .text:00000000000005ea $t
    stm32eforth-fl.s:907    .text:00000000000005f0 $d
    stm32eforth-fl.s:908    .text:00000000000005f4 _CSTOR
    stm32eforth-fl.s:911    .text:00000000000005f8 CSTOR
    stm32eforth-fl.s:920    .text:0000000000000604 $d
    stm32eforth-fl.s:921    .text:0000000000000608 _CAT
    stm32eforth-fl.s:924    .text:000000000000060c CAT
    stm32eforth-fl.s:931    .text:0000000000000610 $d
    stm32eforth-fl.s:932    .text:0000000000000614 _RFROM
    stm32eforth-fl.s:935    .text:0000000000000618 RFROM
    stm32eforth-fl.s:943    .text:0000000000000622 $d
    stm32eforth-fl.s:944    .text:0000000000000626 _RAT
    stm32eforth-fl.s:947    .text:000000000000062c RAT
    stm32eforth-fl.s:955    .text:0000000000000634 $d
    stm32eforth-fl.s:956    .text:0000000000000638 _TOR
    stm32eforth-fl.s:959    .text:000000000000063c TOR
    stm32eforth-fl.s:966    .text:0000000000000646 $d
    stm32eforth-fl.s:967    .text:000000000000064a _RPSTOR
    stm32eforth-fl.s:969    .text:000000000000064e $t
    stm32eforth-fl.s:970    .text:0000000000000650 RPSTOR
    stm32eforth-fl.s:978    .text:0000000000000658 $d
    stm32eforth-fl.s:979    .text:000000000000065c _SPSTOR
    stm32eforth-fl.s:981    .text:0000000000000660 $t
    stm32eforth-fl.s:982    .text:0000000000000660 SPSTOR
    stm32eforth-fl.s:990    .text:0000000000000668 $d
    stm32eforth-fl.s:991    .text:000000000000066c _SPAT
    stm32eforth-fl.s:993    .text:0000000000000670 $t
    stm32eforth-fl.s:994    .text:0000000000000670 SPAT
    stm32eforth-fl.s:1002   .text:0000000000000678 $d
    stm32eforth-fl.s:1003   .text:000000000000067c _DROP
    stm32eforth-fl.s:1006   .text:0000000000000684 DROP
    stm32eforth-fl.s:1013   .text:000000000000068a $d
    stm32eforth-fl.s:1014   .text:000000000000068e _DUPP
    stm32eforth-fl.s:1016   .text:0000000000000692 $t
    stm32eforth-fl.s:1024   .text:000000000000069a $d
    stm32eforth-fl.s:1025   .text:000000000000069e _SWAP
    stm32eforth-fl.s:1037   .text:00000000000006ac $d
    stm32eforth-fl.s:1038   .text:00000000000006b0 _OVER
    stm32eforth-fl.s:1041   .text:00000000000006b8 OVER
    stm32eforth-fl.s:1049   .text:00000000000006c0 $d
ARM GAS  stm32eforth-fl.s 			page 99


    stm32eforth-fl.s:1050   .text:00000000000006c4 _ZLESS
    stm32eforth-fl.s:1053   .text:00000000000006c8 ZLESS
    stm32eforth-fl.s:1062   .text:00000000000006ce $d
    stm32eforth-fl.s:1063   .text:00000000000006d2 _ANDD
    stm32eforth-fl.s:1065   .text:00000000000006d6 $t
    stm32eforth-fl.s:1066   .text:00000000000006d8 ANDD
    stm32eforth-fl.s:1074   .text:00000000000006e2 $d
    stm32eforth-fl.s:1075   .text:00000000000006e6 _ORR
    stm32eforth-fl.s:1078   .text:00000000000006ec ORR
    stm32eforth-fl.s:1086   .text:00000000000006f6 $d
    stm32eforth-fl.s:1087   .text:00000000000006fa _XORR
    stm32eforth-fl.s:1089   .text:00000000000006fe $t
    stm32eforth-fl.s:1098   .text:000000000000070a $d
    stm32eforth-fl.s:1099   .text:000000000000070e _UPLUS
    stm32eforth-fl.s:1101   .text:0000000000000712 $t
    stm32eforth-fl.s:1102   .text:0000000000000714 UPLUS
    stm32eforth-fl.s:1113   .text:0000000000000724 $d
    stm32eforth-fl.s:1114   .text:0000000000000728 _RSHIFT
    stm32eforth-fl.s:1125   .text:000000000000073a $d
    stm32eforth-fl.s:1126   .text:000000000000073e _LSHIFT
    stm32eforth-fl.s:1137   .text:0000000000000752 $d
    stm32eforth-fl.s:1138   .text:0000000000000756 _PLUS
    stm32eforth-fl.s:1140   .text:0000000000000758 $t
    stm32eforth-fl.s:1141   .text:0000000000000758 PLUS
    stm32eforth-fl.s:1149   .text:0000000000000760 $d
    stm32eforth-fl.s:1150   .text:0000000000000764 _SUBB
    stm32eforth-fl.s:1152   .text:0000000000000766 $t
    stm32eforth-fl.s:1153   .text:0000000000000768 SUBB
    stm32eforth-fl.s:1161   .text:0000000000000772 $d
    stm32eforth-fl.s:1162   .text:0000000000000776 _STAR
    stm32eforth-fl.s:1164   .text:0000000000000778 $t
    stm32eforth-fl.s:1165   .text:0000000000000778 STAR
    stm32eforth-fl.s:1173   .text:0000000000000782 $d
    stm32eforth-fl.s:1174   .text:0000000000000786 _UMSTA
    stm32eforth-fl.s:1176   .text:000000000000078a $t
    stm32eforth-fl.s:1177   .text:000000000000078c UMSTA
    stm32eforth-fl.s:1187   .text:0000000000000798 $d
    stm32eforth-fl.s:1188   .text:000000000000079c _MSTAR
    stm32eforth-fl.s:1191   .text:00000000000007a0 MSTAR
    stm32eforth-fl.s:1201   .text:00000000000007ac $d
    stm32eforth-fl.s:1202   .text:00000000000007b0 _ONEP
    stm32eforth-fl.s:1205   .text:00000000000007b4 ONEP
    stm32eforth-fl.s:1212   .text:00000000000007ba $d
    stm32eforth-fl.s:1213   .text:00000000000007be _ONEM
    stm32eforth-fl.s:1216   .text:00000000000007c4 ONEM
    stm32eforth-fl.s:1223   .text:00000000000007ca $d
    stm32eforth-fl.s:1224   .text:00000000000007ce _TWOP
    stm32eforth-fl.s:1227   .text:00000000000007d4 TWOP
    stm32eforth-fl.s:1234   .text:00000000000007da $d
    stm32eforth-fl.s:1235   .text:00000000000007de _TWOM
    stm32eforth-fl.s:1238   .text:00000000000007e4 TWOM
    stm32eforth-fl.s:1245   .text:00000000000007ea $d
    stm32eforth-fl.s:1246   .text:00000000000007ee _CELLP
    stm32eforth-fl.s:1248   .text:00000000000007f4 $t
    stm32eforth-fl.s:1249   .text:00000000000007f4 CELLP
    stm32eforth-fl.s:1256   .text:00000000000007fa $d
    stm32eforth-fl.s:1257   .text:00000000000007fe _CELLM
ARM GAS  stm32eforth-fl.s 			page 100


    stm32eforth-fl.s:1259   .text:0000000000000804 $t
    stm32eforth-fl.s:1260   .text:0000000000000804 CELLM
    stm32eforth-fl.s:1267   .text:000000000000080a $d
    stm32eforth-fl.s:1268   .text:000000000000080e _BLANK
    stm32eforth-fl.s:1271   .text:0000000000000814 BLANK
    stm32eforth-fl.s:1279   .text:000000000000081e $d
    stm32eforth-fl.s:1280   .text:0000000000000822 _CELLS
    stm32eforth-fl.s:1282   .text:0000000000000828 $t
    stm32eforth-fl.s:1283   .text:0000000000000828 CELLS
    stm32eforth-fl.s:1290   .text:000000000000082e $d
    stm32eforth-fl.s:1291   .text:0000000000000832 _CELLSL
    stm32eforth-fl.s:1293   .text:0000000000000838 $t
    stm32eforth-fl.s:1294   .text:0000000000000838 CELLSL
    stm32eforth-fl.s:1301   .text:000000000000083e $d
    stm32eforth-fl.s:1302   .text:0000000000000842 _TWOST
    stm32eforth-fl.s:1305   .text:0000000000000848 TWOST
    stm32eforth-fl.s:1312   .text:000000000000084e $d
    stm32eforth-fl.s:1313   .text:0000000000000852 _TWOSL
    stm32eforth-fl.s:1316   .text:0000000000000858 TWOSL
    stm32eforth-fl.s:1323   .text:000000000000085e $d
    stm32eforth-fl.s:1324   .text:0000000000000862 _QDUP
    stm32eforth-fl.s:1327   .text:0000000000000868 QDUP
    stm32eforth-fl.s:1336   .text:0000000000000872 $d
    stm32eforth-fl.s:1337   .text:0000000000000876 _ROT
    stm32eforth-fl.s:1339   .text:000000000000087a $t
    stm32eforth-fl.s:1340   .text:000000000000087c ROT
    stm32eforth-fl.s:1350   .text:0000000000000886 $d
    stm32eforth-fl.s:1351   .text:000000000000088a _DDROP
    stm32eforth-fl.s:1353   .text:0000000000000890 $t
    stm32eforth-fl.s:1354   .text:0000000000000890 DDROP
    stm32eforth-fl.s:1362   .text:000000000000089a $d
    stm32eforth-fl.s:1363   .text:000000000000089e _DDUP
    stm32eforth-fl.s:1366   .text:00000000000008a4 DDUP
    stm32eforth-fl.s:1375   .text:00000000000008b0 $d
    stm32eforth-fl.s:1376   .text:00000000000008b4 _DPLUS
    stm32eforth-fl.s:1379   .text:00000000000008b8 DPLUS
    stm32eforth-fl.s:1391   .text:00000000000008cc $d
    stm32eforth-fl.s:1392   .text:00000000000008d0 _INVER
    stm32eforth-fl.s:1394   .text:00000000000008d4 $t
    stm32eforth-fl.s:1395   .text:00000000000008d4 INVER
    stm32eforth-fl.s:1402   .text:00000000000008da $d
    stm32eforth-fl.s:1403   .text:00000000000008de _NEGAT
    stm32eforth-fl.s:1406   .text:00000000000008e8 NEGAT
    stm32eforth-fl.s:1413   .text:00000000000008ee $d
    stm32eforth-fl.s:1414   .text:00000000000008f2 _ABSS
    stm32eforth-fl.s:1416   .text:00000000000008f6 $t
    stm32eforth-fl.s:1426   .text:0000000000000902 $d
    stm32eforth-fl.s:1427   .text:0000000000000906 _ZEQUAL
    stm32eforth-fl.s:1430   .text:000000000000090c ZEQUAL
    stm32eforth-fl.s:1440   .text:000000000000091a $d
    stm32eforth-fl.s:1441   .text:000000000000091e _EQUAL
    stm32eforth-fl.s:1443   .text:0000000000000920 $t
    stm32eforth-fl.s:1444   .text:0000000000000920 EQUAL
    stm32eforth-fl.s:1455   .text:0000000000000930 $d
    stm32eforth-fl.s:1456   .text:0000000000000934 _ULESS
    stm32eforth-fl.s:1459   .text:0000000000000938 ULESS
    stm32eforth-fl.s:1470   .text:0000000000000948 $d
ARM GAS  stm32eforth-fl.s 			page 101


    stm32eforth-fl.s:1471   .text:000000000000094c _LESS
    stm32eforth-fl.s:1473   .text:000000000000094e $t
    stm32eforth-fl.s:1474   .text:0000000000000950 LESS
    stm32eforth-fl.s:1485   .text:0000000000000960 $d
    stm32eforth-fl.s:1486   .text:0000000000000964 _GREAT
    stm32eforth-fl.s:1488   .text:0000000000000966 $t
    stm32eforth-fl.s:1489   .text:0000000000000968 GREAT
    stm32eforth-fl.s:1500   .text:0000000000000978 $d
    stm32eforth-fl.s:1501   .text:000000000000097c _MAX
    stm32eforth-fl.s:1503   .text:0000000000000980 $t
    stm32eforth-fl.s:1504   .text:0000000000000980 MAX
    stm32eforth-fl.s:1514   .text:000000000000098c $d
    stm32eforth-fl.s:1515   .text:0000000000000990 _MIN
    stm32eforth-fl.s:1517   .text:0000000000000994 $t
    stm32eforth-fl.s:1518   .text:0000000000000994 MIN
    stm32eforth-fl.s:1528   .text:00000000000009a0 $d
    stm32eforth-fl.s:1529   .text:00000000000009a4 _PSTOR
    stm32eforth-fl.s:1532   .text:00000000000009a8 PSTOR
    stm32eforth-fl.s:1543   .text:00000000000009b8 $d
    stm32eforth-fl.s:1544   .text:00000000000009bc _DSTOR
    stm32eforth-fl.s:1547   .text:00000000000009c0 DSTOR
    stm32eforth-fl.s:1558   .text:00000000000009d4 $d
    stm32eforth-fl.s:1559   .text:00000000000009d8 _DAT
    stm32eforth-fl.s:1562   .text:00000000000009dc DAT
    stm32eforth-fl.s:1571   .text:00000000000009e6 $d
    stm32eforth-fl.s:1572   .text:00000000000009ea _COUNT
    stm32eforth-fl.s:1574   .text:00000000000009f0 $t
    stm32eforth-fl.s:1575   .text:00000000000009f0 COUNT
    stm32eforth-fl.s:1584   .text:00000000000009fc $d
    stm32eforth-fl.s:1585   .text:0000000000000a00 _DNEGA
    stm32eforth-fl.s:1587   .text:0000000000000a08 $t
    stm32eforth-fl.s:1588   .text:0000000000000a08 DNEGA
    stm32eforth-fl.s:1606   .text:0000000000000a18 DOVAR
    stm32eforth-fl.s:1619   .text:0000000000000a24 DOCON
    stm32eforth-fl.s:1631   .text:0000000000000a2e $d
    stm32eforth-fl.s:1632   .text:0000000000000a32 _SEED
    stm32eforth-fl.s:1642   .text:0000000000000a42 $d
    stm32eforth-fl.s:1643   .text:0000000000000a46 _MSEC
    stm32eforth-fl.s:1646   .text:0000000000000a4c MSEC
    stm32eforth-fl.s:1653   .text:0000000000000a56 $d
    stm32eforth-fl.s:1654   .text:0000000000000a5a _TIMER
    stm32eforth-fl.s:1656   .text:0000000000000a60 $t
    stm32eforth-fl.s:1665   .text:0000000000000a6a $d
    stm32eforth-fl.s:1666   .text:0000000000000a6e _TBOOT
    stm32eforth-fl.s:1668   .text:0000000000000a74 $t
    stm32eforth-fl.s:1669   .text:0000000000000a74 TBOOT
    stm32eforth-fl.s:1677   .text:0000000000000a7e $d
    stm32eforth-fl.s:1678   .text:0000000000000a82 _BASE
    stm32eforth-fl.s:1681   .text:0000000000000a88 BASE
    stm32eforth-fl.s:1693   .text:0000000000000a92 TEMP
    stm32eforth-fl.s:1701   .text:0000000000000a9c $d
    stm32eforth-fl.s:1702   .text:0000000000000aa0 _SPAN
    stm32eforth-fl.s:1705   .text:0000000000000aa8 SPAN
    stm32eforth-fl.s:1713   .text:0000000000000ab2 $d
    stm32eforth-fl.s:1714   .text:0000000000000ab6 _INN
    stm32eforth-fl.s:1716   .text:0000000000000aba $t
    stm32eforth-fl.s:1717   .text:0000000000000abc INN
ARM GAS  stm32eforth-fl.s 			page 102


    stm32eforth-fl.s:1725   .text:0000000000000ac6 $d
    stm32eforth-fl.s:1726   .text:0000000000000aca _NTIB
    stm32eforth-fl.s:1729   .text:0000000000000ad0 NTIB
    stm32eforth-fl.s:1737   .text:0000000000000ada $d
    stm32eforth-fl.s:1738   .text:0000000000000ade _TEVAL
    stm32eforth-fl.s:1740   .text:0000000000000ae4 $t
    stm32eforth-fl.s:1741   .text:0000000000000ae4 TEVAL
    stm32eforth-fl.s:1749   .text:0000000000000aee $d
    stm32eforth-fl.s:1750   .text:0000000000000af2 _HLD
    stm32eforth-fl.s:1752   .text:0000000000000af6 $t
    stm32eforth-fl.s:1753   .text:0000000000000af8 HLD
    stm32eforth-fl.s:1761   .text:0000000000000b02 $d
    stm32eforth-fl.s:1762   .text:0000000000000b06 _CNTXT
    stm32eforth-fl.s:1764   .text:0000000000000b0e $t
    stm32eforth-fl.s:1765   .text:0000000000000b10 CNTXT
    stm32eforth-fl.s:1766   .text:0000000000000b10 CRRNT
    stm32eforth-fl.s:1774   .text:0000000000000b1a $d
    stm32eforth-fl.s:1775   .text:0000000000000b1e _CP
    stm32eforth-fl.s:1778   .text:0000000000000b24 CPP
    stm32eforth-fl.s:1785   .text:0000000000000b2e $d
    stm32eforth-fl.s:1786   .text:0000000000000b32 _FCP
    stm32eforth-fl.s:1788   .text:0000000000000b36 $t
    stm32eforth-fl.s:1789   .text:0000000000000b38 FCP
    stm32eforth-fl.s:1797   .text:0000000000000b42 $d
    stm32eforth-fl.s:1798   .text:0000000000000b46 _LAST
    stm32eforth-fl.s:1801   .text:0000000000000b4c LAST
    stm32eforth-fl.s:1808   .text:0000000000000b56 $d
    stm32eforth-fl.s:1809   .text:0000000000000b5a _FTRACE
    stm32eforth-fl.s:1812   .text:0000000000000b64 FTRACE
    stm32eforth-fl.s:1823   .text:0000000000000b6e $d
    stm32eforth-fl.s:1824   .text:0000000000000b72 _USER_BGN
    stm32eforth-fl.s:1827   .text:0000000000000b80 USER_BEGIN
    stm32eforth-fl.s:1831   .text:0000000000000b88 USR_BGN_ADR
    stm32eforth-fl.s:1832   .text:0000000000000b88 $d
    stm32eforth-fl.s:1837   .text:0000000000000b90 _USER_END
    stm32eforth-fl.s:1840   .text:0000000000000b9c USER_END
    stm32eforth-fl.s:1844   .text:0000000000000ba4 USER_END_ADR
    stm32eforth-fl.s:1845   .text:0000000000000ba4 $d
    stm32eforth-fl.s:1850   .text:0000000000000bac _IMG_ADR
    stm32eforth-fl.s:1852   .text:0000000000000bb4 $t
    stm32eforth-fl.s:1853   .text:0000000000000bb4 IMG_ADR
    stm32eforth-fl.s:1857   .text:0000000000000bbc USR_IMG_ADR
    stm32eforth-fl.s:1858   .text:0000000000000bbc $d
    stm32eforth-fl.s:4765   .text.user:0000000000000000 USER_SPACE
    stm32eforth-fl.s:1863   .text:0000000000000bc4 _IMG_SIGN
    stm32eforth-fl.s:1866   .text:0000000000000bd0 IMG_SIGN
    stm32eforth-fl.s:1878   .text:0000000000000bda $d
    stm32eforth-fl.s:1879   .text:0000000000000bde _WITHI
    stm32eforth-fl.s:1882   .text:0000000000000be8 WITHI
    stm32eforth-fl.s:1884   .text:0000000000000bec $d
    stm32eforth-fl.s:1898   .text:0000000000000c0c _UMMOD
    stm32eforth-fl.s:1901   .text:0000000000000c14 UMMOD
    stm32eforth-fl.s:1905   .text:0000000000000c1e UMMOD0
    stm32eforth-fl.s:1912   .text:0000000000000c2e UMMOD1
    stm32eforth-fl.s:1918   .text:0000000000000c38 UMMOD2
    stm32eforth-fl.s:1928   .text:0000000000000c44 $d
    stm32eforth-fl.s:1929   .text:0000000000000c48 _MSMOD
ARM GAS  stm32eforth-fl.s 			page 103


    stm32eforth-fl.s:1931   .text:0000000000000c4e $t
    stm32eforth-fl.s:1932   .text:0000000000000c50 MSMOD
    stm32eforth-fl.s:1934   .text:0000000000000c54 $d
    stm32eforth-fl.s:1943   .text:0000000000000c7c MMOD1
    stm32eforth-fl.s:1950   .text:0000000000000c98 MMOD2
    stm32eforth-fl.s:1958   .text:0000000000000cb8 MMOD3
    stm32eforth-fl.s:1965   .text:0000000000000cc0 _SLMOD
    stm32eforth-fl.s:1968   .text:0000000000000cc8 SLMOD
    stm32eforth-fl.s:1970   .text:0000000000000ccc $d
    stm32eforth-fl.s:1980   .text:0000000000000ce4 _MODD
    stm32eforth-fl.s:1982   .text:0000000000000ce8 $t
    stm32eforth-fl.s:1985   .text:0000000000000cec $d
    stm32eforth-fl.s:1993   .text:0000000000000cfc _SLASH
    stm32eforth-fl.s:1995   .text:0000000000000cfe $t
    stm32eforth-fl.s:1996   .text:0000000000000d00 SLASH
    stm32eforth-fl.s:1998   .text:0000000000000d04 $d
    stm32eforth-fl.s:2007   .text:0000000000000d18 _SSMOD
    stm32eforth-fl.s:2009   .text:0000000000000d1e $t
    stm32eforth-fl.s:2010   .text:0000000000000d20 SSMOD
    stm32eforth-fl.s:2012   .text:0000000000000d24 $d
    stm32eforth-fl.s:2022   .text:0000000000000d3c _STASL
    stm32eforth-fl.s:2025   .text:0000000000000d40 STASL
    stm32eforth-fl.s:2027   .text:0000000000000d44 $d
    stm32eforth-fl.s:2039   .text:0000000000000d58 _ALGND
    stm32eforth-fl.s:2041   .text:0000000000000d60 $t
    stm32eforth-fl.s:2042   .text:0000000000000d60 ALGND
    stm32eforth-fl.s:2051   .text:0000000000000d70 $d
    stm32eforth-fl.s:2052   .text:0000000000000d74 _TCHAR
    stm32eforth-fl.s:2054   .text:0000000000000d7a $t
    stm32eforth-fl.s:2055   .text:0000000000000d7c TCHAR
    stm32eforth-fl.s:2057   .text:0000000000000d80 $d
    stm32eforth-fl.s:2067   .text:0000000000000db8 TCHA1
    stm32eforth-fl.s:2074   .text:0000000000000dc0 _DEPTH
    stm32eforth-fl.s:2076   .text:0000000000000dc6 $t
    stm32eforth-fl.s:2077   .text:0000000000000dc8 DEPTH
    stm32eforth-fl.s:2088   .text:0000000000000de0 $d
    stm32eforth-fl.s:2089   .text:0000000000000de4 _PICK
    stm32eforth-fl.s:2092   .text:0000000000000dec PICK
    stm32eforth-fl.s:2094   .text:0000000000000df0 $d
    stm32eforth-fl.s:2108   .text:0000000000000e0c _HERE
    stm32eforth-fl.s:2111   .text:0000000000000e14 HERE
    stm32eforth-fl.s:2113   .text:0000000000000e18 $d
    stm32eforth-fl.s:2121   .text:0000000000000e28 _PAD
    stm32eforth-fl.s:2123   .text:0000000000000e2c $t
    stm32eforth-fl.s:2124   .text:0000000000000e2c PAD
    stm32eforth-fl.s:2126   .text:0000000000000e30 $d
    stm32eforth-fl.s:2135   .text:0000000000000e48 _TIB
    stm32eforth-fl.s:2137   .text:0000000000000e4c $t
    stm32eforth-fl.s:2138   .text:0000000000000e4c TIB
    stm32eforth-fl.s:2146   .text:0000000000000e56 $d
    stm32eforth-fl.s:2147   .text:0000000000000e5a _ATEXE
    stm32eforth-fl.s:2150   .text:0000000000000e64 ATEXE
    stm32eforth-fl.s:2162   .text:0000000000000e78 $d
    stm32eforth-fl.s:2163   .text:0000000000000e7c _CMOVE
    stm32eforth-fl.s:2165   .text:0000000000000e82 $t
    stm32eforth-fl.s:2166   .text:0000000000000e84 CMOVE
    stm32eforth-fl.s:2173   .text:0000000000000e96 CMOV1
ARM GAS  stm32eforth-fl.s 			page 104


    stm32eforth-fl.s:2170   .text:0000000000000e8e CMOV0
    stm32eforth-fl.s:2178   .text:0000000000000ea0 CMOV2
    stm32eforth-fl.s:2185   .text:0000000000000ea8 $d
    stm32eforth-fl.s:2186   .text:0000000000000eac _MOVE
    stm32eforth-fl.s:2189   .text:0000000000000eb4 MOVE
    stm32eforth-fl.s:2197   .text:0000000000000eca MOVE1
    stm32eforth-fl.s:2194   .text:0000000000000ec2 MOVE0
    stm32eforth-fl.s:2202   .text:0000000000000ed4 MOVE2
    stm32eforth-fl.s:2209   .text:0000000000000edc $d
    stm32eforth-fl.s:2210   .text:0000000000000ee0 _FILL
    stm32eforth-fl.s:2213   .text:0000000000000ee8 FILL
    stm32eforth-fl.s:2216   .text:0000000000000ef0 FILL0
    stm32eforth-fl.s:2219   .text:0000000000000ef4 FILL1
    stm32eforth-fl.s:2225   .text:0000000000000f02 FILL2
    stm32eforth-fl.s:2232   .text:0000000000000f0a $d
    stm32eforth-fl.s:2233   .text:0000000000000f0e _PACKS
    stm32eforth-fl.s:2236   .text:0000000000000f18 PACKS
    stm32eforth-fl.s:2238   .text:0000000000000f1c $d
    stm32eforth-fl.s:2265   .text:0000000000000f74 _DIGIT
    stm32eforth-fl.s:2267   .text:0000000000000f7a $t
    stm32eforth-fl.s:2268   .text:0000000000000f7c DIGIT
    stm32eforth-fl.s:2270   .text:0000000000000f80 $d
    stm32eforth-fl.s:2284   .text:0000000000000fb4 _EXTRC
    stm32eforth-fl.s:2286   .text:0000000000000fbc $t
    stm32eforth-fl.s:2287   .text:0000000000000fbc EXTRC
    stm32eforth-fl.s:2289   .text:0000000000000fc0 $d
    stm32eforth-fl.s:2300   .text:0000000000000fe0 _BDIGS
    stm32eforth-fl.s:2303   .text:0000000000000fe4 BDIGS
    stm32eforth-fl.s:2305   .text:0000000000000fe8 $d
    stm32eforth-fl.s:2314   .text:0000000000000ffc _HOLD
    stm32eforth-fl.s:2317   .text:0000000000001004 HOLD
    stm32eforth-fl.s:2319   .text:0000000000001008 $d
    stm32eforth-fl.s:2332   .text:000000000000102c _DIG
    stm32eforth-fl.s:2334   .text:000000000000102e $t
    stm32eforth-fl.s:2335   .text:0000000000001030 DIG
    stm32eforth-fl.s:2337   .text:0000000000001034 $d
    stm32eforth-fl.s:2347   .text:000000000000104c _DIGS
    stm32eforth-fl.s:2350   .text:0000000000001050 DIGS
    stm32eforth-fl.s:2352   .text:0000000000001054 DIGS1
    stm32eforth-fl.s:2353   .text:0000000000001054 $d
    stm32eforth-fl.s:2357   .text:000000000000106c DIGS2
    stm32eforth-fl.s:2364   .text:0000000000001074 _SIGN
    stm32eforth-fl.s:2367   .text:000000000000107c SIGN
    stm32eforth-fl.s:2369   .text:0000000000001080 $d
    stm32eforth-fl.s:2373   .text:0000000000001098 SIGN1
    stm32eforth-fl.s:2380   .text:00000000000010a0 _EDIGS
    stm32eforth-fl.s:2383   .text:00000000000010a4 EDIGS
    stm32eforth-fl.s:2385   .text:00000000000010a8 $d
    stm32eforth-fl.s:2400   .text:00000000000010c4 STRR
    stm32eforth-fl.s:2401   .text:00000000000010c4 $t
    stm32eforth-fl.s:2402   .text:00000000000010c8 $d
    stm32eforth-fl.s:2416   .text:00000000000010f0 _HEX
    stm32eforth-fl.s:2418   .text:00000000000010f4 $t
    stm32eforth-fl.s:2419   .text:00000000000010f4 HEX
    stm32eforth-fl.s:2421   .text:00000000000010f8 $d
    stm32eforth-fl.s:2430   .text:0000000000001110 _DECIM
    stm32eforth-fl.s:2432   .text:0000000000001118 $t
ARM GAS  stm32eforth-fl.s 			page 105


    stm32eforth-fl.s:2433   .text:0000000000001118 DECIM
    stm32eforth-fl.s:2435   .text:000000000000111c $d
    stm32eforth-fl.s:2447   .text:0000000000001134 _DIGTQ
    stm32eforth-fl.s:2450   .text:000000000000113c DIGTQ
    stm32eforth-fl.s:2452   .text:0000000000001140 $d
    stm32eforth-fl.s:2465   .text:0000000000001188 DGTQ1
    stm32eforth-fl.s:2475   .text:000000000000119c _NUMBQ
    stm32eforth-fl.s:2477   .text:00000000000011a4 $t
    stm32eforth-fl.s:2478   .text:00000000000011a4 NUMBQ
    stm32eforth-fl.s:2480   .text:00000000000011a8 $d
    stm32eforth-fl.s:2496   .text:00000000000011f4 NUMQ1
    stm32eforth-fl.s:2544   .text:00000000000012bc NUMQ6
    stm32eforth-fl.s:2512   .text:0000000000001238 NUMQ2
    stm32eforth-fl.s:2536   .text:00000000000012a0 NUMQ4
    stm32eforth-fl.s:2533   .text:0000000000001294 NUMQ3
    stm32eforth-fl.s:2542   .text:00000000000012b8 NUMQ5
    stm32eforth-fl.s:2559   .text:00000000000012d8 _KEY
    stm32eforth-fl.s:2561   .text:00000000000012dc $t
    stm32eforth-fl.s:2562   .text:00000000000012dc KEY
    stm32eforth-fl.s:2564   .text:00000000000012e0 KEY1
    stm32eforth-fl.s:2565   .text:00000000000012e0 $d
    stm32eforth-fl.s:2573   .text:00000000000012f4 _SPACE
    stm32eforth-fl.s:2575   .text:00000000000012fa $t
    stm32eforth-fl.s:2576   .text:00000000000012fc SPACE
    stm32eforth-fl.s:2578   .text:0000000000001300 $d
    stm32eforth-fl.s:2586   .text:0000000000001310 _SPACS
    stm32eforth-fl.s:2589   .text:0000000000001318 SPACS
    stm32eforth-fl.s:2591   .text:000000000000131c $d
    stm32eforth-fl.s:2597   .text:0000000000001338 CHAR2
    stm32eforth-fl.s:2595   .text:0000000000001334 CHAR1
    stm32eforth-fl.s:2605   .text:0000000000001348 _TYPEE
    stm32eforth-fl.s:2608   .text:0000000000001350 TYPEE
    stm32eforth-fl.s:2610   .text:0000000000001354 $d
    stm32eforth-fl.s:2616   .text:000000000000136c TYPE2
    stm32eforth-fl.s:2612   .text:0000000000001360 TYPE1
    stm32eforth-fl.s:2625   .text:0000000000001380 _CR
    stm32eforth-fl.s:2628   .text:0000000000001384 CR
    stm32eforth-fl.s:2630   .text:0000000000001388 $d
    stm32eforth-fl.s:2644   .text:00000000000013a4 DOSTR
    stm32eforth-fl.s:2645   .text:00000000000013a4 $t
    stm32eforth-fl.s:2647   .text:00000000000013a8 $d
    stm32eforth-fl.s:2666   .text:00000000000013d0 STRQP
    stm32eforth-fl.s:2667   .text:00000000000013d0 $t
    stm32eforth-fl.s:2668   .text:00000000000013d4 $d
    stm32eforth-fl.s:2678   .text:00000000000013dc DOTST
    stm32eforth-fl.s:2679   .text:00000000000013dc $t
    stm32eforth-fl.s:2680   .text:00000000000013e0 $d
    stm32eforth-fl.s:2691   .text:00000000000013ec DOTQP
    stm32eforth-fl.s:2692   .text:00000000000013ec $t
    stm32eforth-fl.s:2693   .text:00000000000013f0 $d
    stm32eforth-fl.s:2701   .text:0000000000001400 _DOTR
    stm32eforth-fl.s:2704   .text:0000000000001404 DOTR
    stm32eforth-fl.s:2706   .text:0000000000001408 $d
    stm32eforth-fl.s:2719   .text:000000000000142c _UDOTR
    stm32eforth-fl.s:2721   .text:0000000000001430 $t
    stm32eforth-fl.s:2722   .text:0000000000001430 UDOTR
    stm32eforth-fl.s:2724   .text:0000000000001434 $d
ARM GAS  stm32eforth-fl.s 			page 106


    stm32eforth-fl.s:2739   .text:0000000000001460 _UDOT
    stm32eforth-fl.s:2742   .text:0000000000001464 UDOT
    stm32eforth-fl.s:2744   .text:0000000000001468 $d
    stm32eforth-fl.s:2755   .text:0000000000001484 _DOT
    stm32eforth-fl.s:2757   .text:0000000000001486 $t
    stm32eforth-fl.s:2758   .text:0000000000001488 DOT
    stm32eforth-fl.s:2760   .text:000000000000148c $d
    stm32eforth-fl.s:2767   .text:00000000000014b0 DOT1
    stm32eforth-fl.s:2777   .text:00000000000014c4 _QUEST
    stm32eforth-fl.s:2779   .text:00000000000014c6 $t
    stm32eforth-fl.s:2780   .text:00000000000014c8 QUEST
    stm32eforth-fl.s:2782   .text:00000000000014cc $d
    stm32eforth-fl.s:2796   .text:00000000000014d8 PARS
    stm32eforth-fl.s:2797   .text:00000000000014d8 $t
    stm32eforth-fl.s:2798   .text:00000000000014dc $d
    stm32eforth-fl.s:2864   .text:00000000000015ec PARS8
    stm32eforth-fl.s:2828   .text:0000000000001560 PARS3
    stm32eforth-fl.s:2811   .text:0000000000001518 PARS1
    stm32eforth-fl.s:2826   .text:000000000000155c PARS2
    stm32eforth-fl.s:2832   .text:000000000000156c PARS4
    stm32eforth-fl.s:2844   .text:000000000000159c PARS5
    stm32eforth-fl.s:2851   .text:00000000000015c0 PARS6
    stm32eforth-fl.s:2857   .text:00000000000015d4 PARS7
    stm32eforth-fl.s:2874   .text:0000000000001600 _PARSE
    stm32eforth-fl.s:2876   .text:0000000000001606 $t
    stm32eforth-fl.s:2877   .text:0000000000001608 PARSE
    stm32eforth-fl.s:2879   .text:000000000000160c $d
    stm32eforth-fl.s:2899   .text:000000000000164c _DOTPR
    stm32eforth-fl.s:2902   .text:0000000000001650 DOTPR
    stm32eforth-fl.s:2904   .text:0000000000001654 $d
    stm32eforth-fl.s:2913   .text:000000000000166c _PAREN
    stm32eforth-fl.s:2915   .text:000000000000166e $t
    stm32eforth-fl.s:2916   .text:0000000000001670 PAREN
    stm32eforth-fl.s:2918   .text:0000000000001674 $d
    stm32eforth-fl.s:2927   .text:000000000000168c _BKSLA
    stm32eforth-fl.s:2929   .text:000000000000168e $t
    stm32eforth-fl.s:2930   .text:0000000000001690 BKSLA
    stm32eforth-fl.s:2932   .text:0000000000001694 $d
    stm32eforth-fl.s:2942   .text:00000000000016ac _CHAR
    stm32eforth-fl.s:2945   .text:00000000000016b4 CHAR
    stm32eforth-fl.s:2947   .text:00000000000016b8 $d
    stm32eforth-fl.s:2957   .text:00000000000016d0 _WORDD
    stm32eforth-fl.s:2960   .text:00000000000016d8 WORDD
    stm32eforth-fl.s:2962   .text:00000000000016dc $d
    stm32eforth-fl.s:2972   .text:00000000000016f4 _TOKEN
    stm32eforth-fl.s:2974   .text:00000000000016fa $t
    stm32eforth-fl.s:2975   .text:00000000000016fc TOKEN
    stm32eforth-fl.s:2977   .text:0000000000001700 $d
    stm32eforth-fl.s:2988   .text:0000000000001710 _NAMET
    stm32eforth-fl.s:2990   .text:0000000000001716 $t
    stm32eforth-fl.s:2991   .text:0000000000001718 NAMET
    stm32eforth-fl.s:2993   .text:000000000000171c $d
    stm32eforth-fl.s:3009   .text:000000000000173c _SAMEQ
    stm32eforth-fl.s:3011   .text:0000000000001742 $t
    stm32eforth-fl.s:3012   .text:0000000000001744 SAMEQ
    stm32eforth-fl.s:3014   .text:0000000000001748 $d
    stm32eforth-fl.s:3031   .text:0000000000001790 SAME2
ARM GAS  stm32eforth-fl.s 			page 107


    stm32eforth-fl.s:3016   .text:0000000000001754 SAME1
    stm32eforth-fl.s:3046   .text:00000000000017a4 FIND
    stm32eforth-fl.s:3047   .text:00000000000017a4 $t
    stm32eforth-fl.s:3048   .text:00000000000017a8 $d
    stm32eforth-fl.s:3055   .text:00000000000017c4 FIND1
    stm32eforth-fl.s:3075   .text:000000000000181c FIND6
    stm32eforth-fl.s:3068   .text:0000000000001804 FIND2
    stm32eforth-fl.s:3073   .text:0000000000001814 FIND3
    stm32eforth-fl.s:3082   .text:0000000000001834 FIND4
    stm32eforth-fl.s:3088   .text:0000000000001850 FIND5
    stm32eforth-fl.s:3103   .text:0000000000001878 _NAMEQ
    stm32eforth-fl.s:3105   .text:000000000000187e $t
    stm32eforth-fl.s:3106   .text:0000000000001880 NAMEQ
    stm32eforth-fl.s:3108   .text:0000000000001884 $d
    stm32eforth-fl.s:3123   .text:0000000000001894 BKSP
    stm32eforth-fl.s:3124   .text:0000000000001894 $t
    stm32eforth-fl.s:3125   .text:0000000000001898 $d
    stm32eforth-fl.s:3139   .text:00000000000018dc BACK1
    stm32eforth-fl.s:3149   .text:00000000000018e0 TAP
    stm32eforth-fl.s:3150   .text:00000000000018e0 $t
    stm32eforth-fl.s:3151   .text:00000000000018e4 $d
    stm32eforth-fl.s:3165   .text:00000000000018fc KTAP
    stm32eforth-fl.s:3166   .text:00000000000018fc TTAP
    stm32eforth-fl.s:3167   .text:00000000000018fc $t
    stm32eforth-fl.s:3168   .text:0000000000001900 $d
    stm32eforth-fl.s:3182   .text:0000000000001940 KTAP2
    stm32eforth-fl.s:3179   .text:0000000000001938 KTAP1
    stm32eforth-fl.s:3193   .text:0000000000001958 _ACCEP
    stm32eforth-fl.s:3196   .text:0000000000001960 ACCEP
    stm32eforth-fl.s:3198   .text:0000000000001964 $d
    stm32eforth-fl.s:3201   .text:0000000000001970 ACCP1
    stm32eforth-fl.s:3217   .text:00000000000019b8 ACCP4
    stm32eforth-fl.s:3213   .text:00000000000019ac ACCP2
    stm32eforth-fl.s:3215   .text:00000000000019b0 ACCP3
    stm32eforth-fl.s:3227   .text:00000000000019cc _QUERY
    stm32eforth-fl.s:3229   .text:00000000000019d2 $t
    stm32eforth-fl.s:3230   .text:00000000000019d4 QUERY
    stm32eforth-fl.s:3232   .text:00000000000019d8 $d
    stm32eforth-fl.s:3250   .text:0000000000001a0c _ABORT
    stm32eforth-fl.s:3252   .text:0000000000001a12 $t
    stm32eforth-fl.s:3253   .text:0000000000001a14 ABORT
    stm32eforth-fl.s:3255   .text:0000000000001a18 ABORT1
    stm32eforth-fl.s:3256   .text:0000000000001a18 $d
    stm32eforth-fl.s:3387   .text:0000000000001b9c PRESE
    stm32eforth-fl.s:3400   .text:0000000000001bbc QUIT
    stm32eforth-fl.s:3272   .text:0000000000001a40 ABORQ
    stm32eforth-fl.s:3273   .text:0000000000001a40 $t
    stm32eforth-fl.s:3274   .text:0000000000001a44 $d
    stm32eforth-fl.s:3289   .text:0000000000001a68 _INTER
    stm32eforth-fl.s:3291   .text:0000000000001a74 $t
    stm32eforth-fl.s:3294   .text:0000000000001a78 $d
    stm32eforth-fl.s:3303   .text:0000000000001ab4 INTE1
    stm32eforth-fl.s:3300   .text:0000000000001aaa $t
    stm32eforth-fl.s:3301   .text:0000000000001aac $d
    stm32eforth-fl.s:3307   .text:0000000000001ac4 INTE2
    stm32eforth-fl.s:3314   .text:0000000000001acc _LBRAC
    stm32eforth-fl.s:3316   .text:0000000000001ace $t
ARM GAS  stm32eforth-fl.s 			page 108


    stm32eforth-fl.s:3317   .text:0000000000001ad0 LBRAC
    stm32eforth-fl.s:3319   .text:0000000000001ad4 $d
    stm32eforth-fl.s:3328   .text:0000000000001aec _DOTOK
    stm32eforth-fl.s:3330   .text:0000000000001af0 $t
    stm32eforth-fl.s:3331   .text:0000000000001af0 DOTOK
    stm32eforth-fl.s:3333   .text:0000000000001af4 $d
    stm32eforth-fl.s:3339   .text:0000000000001b18 DOTO1
    stm32eforth-fl.s:3340   .text:0000000000001b18 $d
    stm32eforth-fl.s:3347   .text:0000000000001b24 _QSTAC
    stm32eforth-fl.s:3350   .text:0000000000001b2c QSTAC
    stm32eforth-fl.s:3352   .text:0000000000001b30 $d
    stm32eforth-fl.s:3354   .text:0000000000001b46 $t
    stm32eforth-fl.s:3355   .text:0000000000001b48 $d
    stm32eforth-fl.s:3361   .text:0000000000001b50 _EVAL
    stm32eforth-fl.s:3364   .text:0000000000001b58 EVAL
    stm32eforth-fl.s:3366   .text:0000000000001b5c EVAL1
    stm32eforth-fl.s:3367   .text:0000000000001b5c $d
    stm32eforth-fl.s:3375   .text:0000000000001b84 EVAL2
    stm32eforth-fl.s:3384   .text:0000000000001b94 _PRESE
    stm32eforth-fl.s:3389   .text:0000000000001ba0 $d
    stm32eforth-fl.s:3397   .text:0000000000001bb4 _QUIT
    stm32eforth-fl.s:3401   .text:0000000000001bbc $d
    stm32eforth-fl.s:3403   .text:0000000000001bc8 QUIT1
    stm32eforth-fl.s:3405   .text:0000000000001bcc QUIT2
    stm32eforth-fl.s:3413   .text:0000000000001bdc $t
    stm32eforth-fl.s:3751   .text:0000000000001ff4 flash_regs
    stm32eforth-fl.s:3436   .text:0000000000001c00 WAIT_BSY
    stm32eforth-fl.s:3438   .text:0000000000001c02 WAIT1
    stm32eforth-fl.s:3452   .text:0000000000001c0c $d
    stm32eforth-fl.s:3453   .text:0000000000001c10 _EPAGE
    stm32eforth-fl.s:3457   .text:0000000000001c1c EPAGE
    stm32eforth-fl.s:3474   .text:0000000000001c44 HWORD_WRITE
    stm32eforth-fl.s:3492   .text:0000000000001c6c $d
    stm32eforth-fl.s:3493   .text:0000000000001c70 _ISTOR
    stm32eforth-fl.s:3496   .text:0000000000001c74 ISTOR
    stm32eforth-fl.s:3498   .text:0000000000001c78 $d
    stm32eforth-fl.s:3504   .text:0000000000001ca4 $d
    stm32eforth-fl.s:3519   .text:0000000000001ce0 _IMG_SIZE
    stm32eforth-fl.s:3522   .text:0000000000001cec IMG_SIZE
    stm32eforth-fl.s:3524   .text:0000000000001cf0 $d
    stm32eforth-fl.s:3540   .text:0000000000001d2c _IMGQ
    stm32eforth-fl.s:3543   .text:0000000000001d34 IMGQ
    stm32eforth-fl.s:3545   .text:0000000000001d38 $d
    stm32eforth-fl.s:3556   .text:0000000000001d58 _LOAD_IMG
    stm32eforth-fl.s:3559   .text:0000000000001d64 LOAD_IMG
    stm32eforth-fl.s:3561   .text:0000000000001d68 $d
    stm32eforth-fl.s:3588   .text:0000000000001dc0 _ERASE_MPG
    stm32eforth-fl.s:3590   .text:0000000000001dca $t
    stm32eforth-fl.s:3591   .text:0000000000001dcc ERASE_MPG
    stm32eforth-fl.s:3593   .text:0000000000001dd0 $d
    stm32eforth-fl.s:3652   .text:0000000000001ea0 PG_TO_ADR
    stm32eforth-fl.s:3602   .text:0000000000001e08 $d
    stm32eforth-fl.s:3613   .text:0000000000001e2c _FLSH_WR
    stm32eforth-fl.s:3616   .text:0000000000001e34 FLSH_WR
    stm32eforth-fl.s:3617   .text:0000000000001e34 $t
    stm32eforth-fl.s:3618   .text:0000000000001e38 $d
    stm32eforth-fl.s:3638   .text:0000000000001e80 _ADR_TO_PG
ARM GAS  stm32eforth-fl.s 			page 109


    stm32eforth-fl.s:3641   .text:0000000000001e88 ADR_TO_PG
    stm32eforth-fl.s:3648   .text:0000000000001e94 $d
    stm32eforth-fl.s:3649   .text:0000000000001e98 _PG_TO_ADR
    stm32eforth-fl.s:3659   .text:0000000000001eac $d
    stm32eforth-fl.s:3660   .text:0000000000001eb0 _ERASE_IMG
    stm32eforth-fl.s:3662   .text:0000000000001eba $t
    stm32eforth-fl.s:3663   .text:0000000000001ebc ERASE_IMG
    stm32eforth-fl.s:3665   .text:0000000000001ec0 $d
    stm32eforth-fl.s:3680   .text:0000000000001efc _SAVE_IMG
    stm32eforth-fl.s:3683   .text:0000000000001f08 SAVE_IMG
    stm32eforth-fl.s:3685   .text:0000000000001f0c $d
    stm32eforth-fl.s:3714   .text:0000000000001f70 _TURNKEY
    stm32eforth-fl.s:3716   .text:0000000000001f78 $t
    stm32eforth-fl.s:3717   .text:0000000000001f78 TURNKEY
    stm32eforth-fl.s:3719   .text:0000000000001f7c $d
    stm32eforth-fl.s:3766   .text:0000000000002008 TICK
    stm32eforth-fl.s:3728   .text:0000000000001fa0 _FORGET
    stm32eforth-fl.s:3731   .text:0000000000001fa8 FORGET
    stm32eforth-fl.s:3733   .text:0000000000001fac $d
    stm32eforth-fl.s:4186   .text:0000000000002460 OVERT
    stm32eforth-fl.s:3752   .text:0000000000001ff4 $d
    stm32eforth-fl.s:3763   .text:0000000000002004 _TICK
    stm32eforth-fl.s:3765   .text:0000000000002006 $t
    stm32eforth-fl.s:3768   .text:000000000000200c $d
    stm32eforth-fl.s:3772   .text:0000000000002020 TICK1
    stm32eforth-fl.s:3779   .text:0000000000002028 _ALLOT
    stm32eforth-fl.s:3781   .text:000000000000202e $t
    stm32eforth-fl.s:3782   .text:0000000000002030 ALLOT
    stm32eforth-fl.s:3784   .text:0000000000002034 $d
    stm32eforth-fl.s:3792   .text:0000000000002044 _COMMA
    stm32eforth-fl.s:3793   .text:0000000000002046 $t
    stm32eforth-fl.s:3794   .text:0000000000002048 COMMA
    stm32eforth-fl.s:3796   .text:000000000000204c $d
    stm32eforth-fl.s:3807   .text:0000000000002068 $d
    stm32eforth-fl.s:3808   .text:000000000000206c _BCOMP
    stm32eforth-fl.s:3810   .text:0000000000002076 $t
    stm32eforth-fl.s:3811   .text:0000000000002078 BCOMP
    stm32eforth-fl.s:3813   .text:000000000000207c $d
    stm32eforth-fl.s:3821   .text:000000000000208c _COMPI
    stm32eforth-fl.s:3823   .text:0000000000002094 $t
    stm32eforth-fl.s:3824   .text:0000000000002094 COMPI
    stm32eforth-fl.s:3826   .text:0000000000002098 $d
    stm32eforth-fl.s:3840   .text:00000000000020c4 _LITER
    stm32eforth-fl.s:3842   .text:00000000000020cc $t
    stm32eforth-fl.s:3843   .text:00000000000020cc LITER
    stm32eforth-fl.s:3845   .text:00000000000020d0 $d
    stm32eforth-fl.s:4230   .text:00000000000024bc CALLC
    stm32eforth-fl.s:3856   .text:00000000000020e4 STRCQ
    stm32eforth-fl.s:3857   .text:00000000000020e4 $t
    stm32eforth-fl.s:3858   .text:00000000000020e8 $d
    stm32eforth-fl.s:3877   .text:0000000000002120 _FOR
    stm32eforth-fl.s:3879   .text:0000000000002124 $t
    stm32eforth-fl.s:3880   .text:0000000000002124 FOR
    stm32eforth-fl.s:3882   .text:0000000000002128 $d
    stm32eforth-fl.s:3890   .text:0000000000002140 _BEGIN
    stm32eforth-fl.s:3892   .text:0000000000002146 $t
    stm32eforth-fl.s:3893   .text:0000000000002148 BEGIN
ARM GAS  stm32eforth-fl.s 			page 110


    stm32eforth-fl.s:3895   .text:000000000000214c $d
    stm32eforth-fl.s:3901   .text:0000000000002154 $d
    stm32eforth-fl.s:3902   .text:0000000000002158 _FNEXT
    stm32eforth-fl.s:3905   .text:0000000000002160 FNEXT
    stm32eforth-fl.s:3907   .text:0000000000002164 $d
    stm32eforth-fl.s:3915   .text:000000000000217c _UNTIL
    stm32eforth-fl.s:3917   .text:0000000000002182 $t
    stm32eforth-fl.s:3918   .text:0000000000002184 UNTIL
    stm32eforth-fl.s:3920   .text:0000000000002188 $d
    stm32eforth-fl.s:3928   .text:00000000000021a0 _AGAIN
    stm32eforth-fl.s:3930   .text:00000000000021a6 $t
    stm32eforth-fl.s:3931   .text:00000000000021a8 AGAIN
    stm32eforth-fl.s:3933   .text:00000000000021ac $d
    stm32eforth-fl.s:3941   .text:00000000000021c4 _IFF
    stm32eforth-fl.s:3944   .text:00000000000021c8 IFF
    stm32eforth-fl.s:3946   .text:00000000000021cc $d
    stm32eforth-fl.s:3957   .text:00000000000021f4 _AHEAD
    stm32eforth-fl.s:3959   .text:00000000000021fa $t
    stm32eforth-fl.s:3960   .text:00000000000021fc AHEAD
    stm32eforth-fl.s:3962   .text:0000000000002200 $d
    stm32eforth-fl.s:3973   .text:0000000000002228 _REPEA
    stm32eforth-fl.s:3976   .text:0000000000002230 REPEA
    stm32eforth-fl.s:3978   .text:0000000000002234 $d
    stm32eforth-fl.s:3988   .text:000000000000224c _THENN
    stm32eforth-fl.s:3991   .text:0000000000002254 THENN
    stm32eforth-fl.s:3993   .text:0000000000002258 $d
    stm32eforth-fl.s:4002   .text:000000000000226c _AFT
    stm32eforth-fl.s:4004   .text:0000000000002270 $t
    stm32eforth-fl.s:4005   .text:0000000000002270 AFT
    stm32eforth-fl.s:4007   .text:0000000000002274 $d
    stm32eforth-fl.s:4017   .text:000000000000228c _ELSEE
    stm32eforth-fl.s:4020   .text:0000000000002294 ELSEE
    stm32eforth-fl.s:4022   .text:0000000000002298 $d
    stm32eforth-fl.s:4031   .text:00000000000022ac _WHILE
    stm32eforth-fl.s:4033   .text:00000000000022b2 $t
    stm32eforth-fl.s:4034   .text:00000000000022b4 WHILE
    stm32eforth-fl.s:4036   .text:00000000000022b8 $d
    stm32eforth-fl.s:4044   .text:00000000000022c8 _ABRTQ
    stm32eforth-fl.s:4047   .text:00000000000022d0 ABRTQ
    stm32eforth-fl.s:4049   .text:00000000000022d4 $d
    stm32eforth-fl.s:4057   .text:00000000000022ec _STRQ
    stm32eforth-fl.s:4060   .text:00000000000022f0 STRQ
    stm32eforth-fl.s:4062   .text:00000000000022f4 $d
    stm32eforth-fl.s:4070   .text:000000000000230c _DOTQ
    stm32eforth-fl.s:4073   .text:0000000000002310 DOTQ
    stm32eforth-fl.s:4075   .text:0000000000002314 $d
    stm32eforth-fl.s:4086   .text:000000000000232c _UNIQU
    stm32eforth-fl.s:4088   .text:0000000000002334 $t
    stm32eforth-fl.s:4089   .text:0000000000002334 UNIQU
    stm32eforth-fl.s:4091   .text:0000000000002338 $d
    stm32eforth-fl.s:4098   .text:0000000000002360 UNIQ1
    stm32eforth-fl.s:4095   .text:0000000000002354 $d
    stm32eforth-fl.s:4109   .text:0000000000002368 SNAME
    stm32eforth-fl.s:4110   .text:0000000000002368 $t
    stm32eforth-fl.s:4111   .text:000000000000236c $d
    stm32eforth-fl.s:4127   .text:00000000000023b0 SNAM1
    stm32eforth-fl.s:4137   .text:00000000000023c4 _SCOMP
ARM GAS  stm32eforth-fl.s 			page 111


    stm32eforth-fl.s:4140   .text:00000000000023d0 SCOMP
    stm32eforth-fl.s:4142   .text:00000000000023d4 $d
    stm32eforth-fl.s:4154   .text:000000000000240c SCOM2
    stm32eforth-fl.s:4151   .text:0000000000002404 SCOM1
    stm32eforth-fl.s:4159   .text:0000000000002420 SCOM3
    stm32eforth-fl.s:4166   .text:0000000000002428 COLON_ABORT
    stm32eforth-fl.s:4167   .text:0000000000002428 $t
    stm32eforth-fl.s:4168   .text:000000000000242c $d
    stm32eforth-fl.s:4183   .text:0000000000002458 _OVERT
    stm32eforth-fl.s:4185   .text:000000000000245e $t
    stm32eforth-fl.s:4188   .text:0000000000002464 $d
    stm32eforth-fl.s:4198   .text:000000000000247c _SEMIS
    stm32eforth-fl.s:4200   .text:000000000000247e $t
    stm32eforth-fl.s:4201   .text:0000000000002480 SEMIS
    stm32eforth-fl.s:4203   .text:0000000000002484 $d
    stm32eforth-fl.s:4213   .text:00000000000024a0 _RBRAC
    stm32eforth-fl.s:4215   .text:00000000000024a2 $t
    stm32eforth-fl.s:4216   .text:00000000000024a4 RBRAC
    stm32eforth-fl.s:4218   .text:00000000000024a8 $d
    stm32eforth-fl.s:4231   .text:00000000000024bc $t
    stm32eforth-fl.s:4232   .text:00000000000024c0 $d
    stm32eforth-fl.s:4242   .text:00000000000024d8 _COLON
    stm32eforth-fl.s:4244   .text:00000000000024da $t
    stm32eforth-fl.s:4245   .text:00000000000024dc COLON
    stm32eforth-fl.s:4247   .text:00000000000024e0 $d
    stm32eforth-fl.s:4257   .text:00000000000024f8 _IMMED
    stm32eforth-fl.s:4259   .text:0000000000002502 $t
    stm32eforth-fl.s:4260   .text:0000000000002504 IMMED
    stm32eforth-fl.s:4262   .text:0000000000002508 $d
    stm32eforth-fl.s:4279   .text:0000000000002534 _CONST
    stm32eforth-fl.s:4282   .text:0000000000002540 CONST
    stm32eforth-fl.s:4284   .text:0000000000002544 $d
    stm32eforth-fl.s:4295   .text:0000000000002574 $t
    stm32eforth-fl.s:4299   .text:0000000000002574 DODOES
    stm32eforth-fl.s:4301   .text:0000000000002578 $d
    stm32eforth-fl.s:4314   .text:000000000000259c $d
    stm32eforth-fl.s:4315   .text:00000000000025a0 _DOES
    stm32eforth-fl.s:4317   .text:00000000000025a6 $t
    stm32eforth-fl.s:4318   .text:00000000000025a8 DOES
    stm32eforth-fl.s:4320   .text:00000000000025ac $d
    stm32eforth-fl.s:4334   .text:00000000000025dc _DEFERAT
    stm32eforth-fl.s:4337   .text:00000000000025e4 DEFERAT
    stm32eforth-fl.s:4339   .text:00000000000025e8 $d
    stm32eforth-fl.s:4348   .text:0000000000002600 _DEFERSTO
    stm32eforth-fl.s:4351   .text:0000000000002608 DEFERSTO
    stm32eforth-fl.s:4353   .text:000000000000260c $d
    stm32eforth-fl.s:4363   .text:0000000000002628 _DEFER
    stm32eforth-fl.s:4365   .text:000000000000262e $t
    stm32eforth-fl.s:4366   .text:0000000000002630 DEFER
    stm32eforth-fl.s:4368   .text:0000000000002634 $d
    stm32eforth-fl.s:4391   .text:0000000000002680 CREAT
    stm32eforth-fl.s:4379   .text:0000000000002668 DEFER_NOP
    stm32eforth-fl.s:4380   .text:0000000000002668 $t
    stm32eforth-fl.s:4381   .text:000000000000266c $d
    stm32eforth-fl.s:4388   .text:0000000000002678 _CREAT
    stm32eforth-fl.s:4393   .text:0000000000002684 $d
    stm32eforth-fl.s:4405   .text:00000000000026a8 _VARIA
ARM GAS  stm32eforth-fl.s 			page 112


    stm32eforth-fl.s:4408   .text:00000000000026b4 VARIA
    stm32eforth-fl.s:4410   .text:00000000000026b8 $d
    stm32eforth-fl.s:4423   .text:00000000000026dc _TRACE
    stm32eforth-fl.s:4425   .text:00000000000026e2 $t
    stm32eforth-fl.s:4426   .text:00000000000026e4 TRACE
    stm32eforth-fl.s:4428   .text:00000000000026e8 $d
    stm32eforth-fl.s:4435   .text:00000000000026f8 _DBG_PRT
    stm32eforth-fl.s:4437   .text:0000000000002700 DBG_PRT
    stm32eforth-fl.s:4438   .text:0000000000002700 $t
    stm32eforth-fl.s:4439   .text:0000000000002704 $d
    stm32eforth-fl.s:4540   .text:0000000000002830 TNAME
    stm32eforth-fl.s:4455   .text:0000000000002724 DMP
    stm32eforth-fl.s:4456   .text:0000000000002724 $t
    stm32eforth-fl.s:4457   .text:0000000000002728 $d
    stm32eforth-fl.s:4469   .text:0000000000002760 PDUM2
    stm32eforth-fl.s:4463   .text:0000000000002748 PDUM1
    stm32eforth-fl.s:4477   .text:000000000000276c $d
    stm32eforth-fl.s:4478   .text:0000000000002770 _DUMP
    stm32eforth-fl.s:4481   .text:0000000000002778 DUMP
    stm32eforth-fl.s:4483   .text:000000000000277c $d
    stm32eforth-fl.s:4501   .text:00000000000027cc DUMP4
    stm32eforth-fl.s:4491   .text:00000000000027a4 DUMP1
    stm32eforth-fl.s:4503   .text:00000000000027d4 DUMP3
    stm32eforth-fl.s:4514   .text:00000000000027ec _DOTS
    stm32eforth-fl.s:4518   .text:00000000000027f0 DOTS
    stm32eforth-fl.s:4520   .text:00000000000027f4 $d
    stm32eforth-fl.s:4528   .text:0000000000002814 DOTS2
    stm32eforth-fl.s:4524   .text:0000000000002808 DOTS1
    stm32eforth-fl.s:4537   .text:0000000000002828 _TNAME
    stm32eforth-fl.s:4539   .text:000000000000282e $t
    stm32eforth-fl.s:4542   .text:0000000000002834 $d
    stm32eforth-fl.s:4545   .text:0000000000002840 TNAM1
    stm32eforth-fl.s:4556   .text:0000000000002874 TNAM2
    stm32eforth-fl.s:4565   .text:0000000000002884 _DOTID
    stm32eforth-fl.s:4567   .text:0000000000002888 $t
    stm32eforth-fl.s:4568   .text:0000000000002888 DOTID
    stm32eforth-fl.s:4570   .text:000000000000288c $d
    stm32eforth-fl.s:4577   .text:00000000000028b0 DOTI1
    stm32eforth-fl.s:4578   .text:00000000000028be $t
    stm32eforth-fl.s:4579   .text:00000000000028c0 $d
    stm32eforth-fl.s:4581   *ABS*:0000000000000000 WANT_SEE
    stm32eforth-fl.s:4661   .text:00000000000028c8 _WORDS
    stm32eforth-fl.s:4663   .text:00000000000028ce $t
    stm32eforth-fl.s:4664   .text:00000000000028d0 WORDS
    stm32eforth-fl.s:4666   .text:00000000000028d4 $d
    stm32eforth-fl.s:4669   .text:00000000000028e0 WORS1
    stm32eforth-fl.s:4678   .text:0000000000002908 WORS2
    stm32eforth-fl.s:4691   .text:000000000000290c VERSN
    stm32eforth-fl.s:4692   .text:000000000000290c $t
    stm32eforth-fl.s:4693   .text:0000000000002910 $d
    stm32eforth-fl.s:4700   .text:0000000000002920 _HI
    stm32eforth-fl.s:4705   .text:0000000000002928 $d
    stm32eforth-fl.s:4707   .text:000000000000294c $d
    stm32eforth-fl.s:4733   .text:000000000000299c $t
    stm32eforth-fl.s:4742   .text:00000000000029ba COLD1
    stm32eforth-fl.s:4743   .text:00000000000029ba $d
    stm32eforth-fl.s:4758   .text:0000000000002a0a COLD2
ARM GAS  stm32eforth-fl.s 			page 113


    stm32eforth-fl.s:4759   .text:0000000000002a0a $t
    stm32eforth-fl.s:4761   .text:0000000000002a0c $d
    stm32eforth-fl.s:4766   .text.user:0000000000000000 $d
    stm32eforth-fl.s:4768   .text:0000000000002a10 $d
    stm32eforth-fl.s:352    .text:000000000000003b $d
    stm32eforth-fl.s:352    .text:000000000000003c $t
    stm32eforth-fl.s:672    .text:0000000000000449 $d
    stm32eforth-fl.s:672    .text:000000000000044a $t
    stm32eforth-fl.s:721    .text:00000000000004ed $d
    stm32eforth-fl.s:721    .text:00000000000004ee $t
    stm32eforth-fl.s:741    .text:0000000000000515 $d
    stm32eforth-fl.s:741    .text:0000000000000516 $t
    stm32eforth-fl.s:765    .text:000000000000054b $d
    stm32eforth-fl.s:765    .text:000000000000054c $t
    stm32eforth-fl.s:876    .text:00000000000005cb $d
    stm32eforth-fl.s:910    .text:00000000000005f7 $d
    stm32eforth-fl.s:910    .text:00000000000005f8 $t
    stm32eforth-fl.s:923    .text:000000000000060b $d
    stm32eforth-fl.s:923    .text:000000000000060c $t
    stm32eforth-fl.s:934    .text:0000000000000617 $d
    stm32eforth-fl.s:934    .text:0000000000000618 $t
    stm32eforth-fl.s:946    .text:0000000000000629 $d
    stm32eforth-fl.s:946    .text:000000000000062a $t
    stm32eforth-fl.s:958    .text:000000000000063b $d
    stm32eforth-fl.s:958    .text:000000000000063c $t
    stm32eforth-fl.s:1005   .text:0000000000000681 $d
    stm32eforth-fl.s:1005   .text:0000000000000682 $t
    stm32eforth-fl.s:1027   .text:00000000000006a3 $d
    stm32eforth-fl.s:1027   .text:00000000000006a4 $t
    stm32eforth-fl.s:1040   .text:00000000000006b5 $d
    stm32eforth-fl.s:1040   .text:00000000000006b6 $t
    stm32eforth-fl.s:1052   .text:00000000000006c7 $d
    stm32eforth-fl.s:1052   .text:00000000000006c8 $t
    stm32eforth-fl.s:1077   .text:00000000000006e9 $d
    stm32eforth-fl.s:1077   .text:00000000000006ea $t
    stm32eforth-fl.s:1116   .text:000000000000072f $d
    stm32eforth-fl.s:1116   .text:0000000000000730 $t
    stm32eforth-fl.s:1128   .text:0000000000000745 $d
    stm32eforth-fl.s:1128   .text:0000000000000746 $t
    stm32eforth-fl.s:1190   .text:000000000000079f $d
    stm32eforth-fl.s:1190   .text:00000000000007a0 $t
    stm32eforth-fl.s:1204   .text:00000000000007b3 $d
    stm32eforth-fl.s:1204   .text:00000000000007b4 $t
    stm32eforth-fl.s:1215   .text:00000000000007c1 $d
    stm32eforth-fl.s:1215   .text:00000000000007c2 $t
    stm32eforth-fl.s:1226   .text:00000000000007d1 $d
    stm32eforth-fl.s:1226   .text:00000000000007d2 $t
    stm32eforth-fl.s:1237   .text:00000000000007e1 $d
    stm32eforth-fl.s:1237   .text:00000000000007e2 $t
    stm32eforth-fl.s:1270   .text:0000000000000811 $d
    stm32eforth-fl.s:1270   .text:0000000000000812 $t
    stm32eforth-fl.s:1304   .text:0000000000000845 $d
    stm32eforth-fl.s:1304   .text:0000000000000846 $t
    stm32eforth-fl.s:1315   .text:0000000000000855 $d
    stm32eforth-fl.s:1315   .text:0000000000000856 $t
    stm32eforth-fl.s:1326   .text:0000000000000867 $d
    stm32eforth-fl.s:1326   .text:0000000000000868 $t
ARM GAS  stm32eforth-fl.s 			page 114


    stm32eforth-fl.s:1365   .text:00000000000008a3 $d
    stm32eforth-fl.s:1365   .text:00000000000008a4 $t
    stm32eforth-fl.s:1378   .text:00000000000008b7 $d
    stm32eforth-fl.s:1378   .text:00000000000008b8 $t
    stm32eforth-fl.s:1405   .text:00000000000008e5 $d
    stm32eforth-fl.s:1405   .text:00000000000008e6 $t
    stm32eforth-fl.s:1429   .text:0000000000000909 $d
    stm32eforth-fl.s:1429   .text:000000000000090a $t
    stm32eforth-fl.s:1458   .text:0000000000000937 $d
    stm32eforth-fl.s:1458   .text:0000000000000938 $t
    stm32eforth-fl.s:1531   .text:00000000000009a7 $d
    stm32eforth-fl.s:1531   .text:00000000000009a8 $t
    stm32eforth-fl.s:1546   .text:00000000000009bf $d
    stm32eforth-fl.s:1546   .text:00000000000009c0 $t
    stm32eforth-fl.s:1561   .text:00000000000009db $d
    stm32eforth-fl.s:1561   .text:00000000000009dc $t
    stm32eforth-fl.s:1634   .text:0000000000000a37 $d
    stm32eforth-fl.s:1634   .text:0000000000000a38 $t
    stm32eforth-fl.s:1645   .text:0000000000000a4b $d
    stm32eforth-fl.s:1645   .text:0000000000000a4c $t
    stm32eforth-fl.s:1680   .text:0000000000000a87 $d
    stm32eforth-fl.s:1680   .text:0000000000000a88 $t
    stm32eforth-fl.s:1704   .text:0000000000000aa5 $d
    stm32eforth-fl.s:1704   .text:0000000000000aa6 $t
    stm32eforth-fl.s:1728   .text:0000000000000acf $d
    stm32eforth-fl.s:1728   .text:0000000000000ad0 $t
    stm32eforth-fl.s:1777   .text:0000000000000b21 $d
    stm32eforth-fl.s:1777   .text:0000000000000b22 $t
    stm32eforth-fl.s:1800   .text:0000000000000b4b $d
    stm32eforth-fl.s:1800   .text:0000000000000b4c $t
    stm32eforth-fl.s:1811   .text:0000000000000b61 $d
    stm32eforth-fl.s:1811   .text:0000000000000b62 $t
    stm32eforth-fl.s:1826   .text:0000000000000b7d $d
    stm32eforth-fl.s:1826   .text:0000000000000b7e $t
    stm32eforth-fl.s:1839   .text:0000000000000b99 $d
    stm32eforth-fl.s:1839   .text:0000000000000b9a $t
    stm32eforth-fl.s:1865   .text:0000000000000bcd $d
    stm32eforth-fl.s:1865   .text:0000000000000bce $t
    stm32eforth-fl.s:1881   .text:0000000000000be5 $d
    stm32eforth-fl.s:1881   .text:0000000000000be6 $t
    stm32eforth-fl.s:1900   .text:0000000000000c13 $d
    stm32eforth-fl.s:1900   .text:0000000000000c14 $t
    stm32eforth-fl.s:1967   .text:0000000000000cc5 $d
    stm32eforth-fl.s:1967   .text:0000000000000cc6 $t
    stm32eforth-fl.s:2024   .text:0000000000000d3f $d
    stm32eforth-fl.s:2024   .text:0000000000000d40 $t
    stm32eforth-fl.s:2091   .text:0000000000000de9 $d
    stm32eforth-fl.s:2091   .text:0000000000000dea $t
    stm32eforth-fl.s:2110   .text:0000000000000e11 $d
    stm32eforth-fl.s:2110   .text:0000000000000e12 $t
    stm32eforth-fl.s:2149   .text:0000000000000e63 $d
    stm32eforth-fl.s:2149   .text:0000000000000e64 $t
    stm32eforth-fl.s:2188   .text:0000000000000eb1 $d
    stm32eforth-fl.s:2188   .text:0000000000000eb2 $t
    stm32eforth-fl.s:2212   .text:0000000000000ee5 $d
    stm32eforth-fl.s:2212   .text:0000000000000ee6 $t
    stm32eforth-fl.s:2235   .text:0000000000000f15 $d
ARM GAS  stm32eforth-fl.s 			page 115


    stm32eforth-fl.s:2235   .text:0000000000000f16 $t
    stm32eforth-fl.s:2302   .text:0000000000000fe3 $d
    stm32eforth-fl.s:2302   .text:0000000000000fe4 $t
    stm32eforth-fl.s:2316   .text:0000000000001001 $d
    stm32eforth-fl.s:2316   .text:0000000000001002 $t
    stm32eforth-fl.s:2349   .text:000000000000104f $d
    stm32eforth-fl.s:2349   .text:0000000000001050 $t
    stm32eforth-fl.s:2366   .text:0000000000001079 $d
    stm32eforth-fl.s:2366   .text:000000000000107a $t
    stm32eforth-fl.s:2382   .text:00000000000010a3 $d
    stm32eforth-fl.s:2382   .text:00000000000010a4 $t
    stm32eforth-fl.s:2449   .text:000000000000113b $d
    stm32eforth-fl.s:2449   .text:000000000000113c $t
    stm32eforth-fl.s:2588   .text:0000000000001317 $d
    stm32eforth-fl.s:2588   .text:0000000000001318 $t
    stm32eforth-fl.s:2607   .text:000000000000134d $d
    stm32eforth-fl.s:2607   .text:000000000000134e $t
    stm32eforth-fl.s:2627   .text:0000000000001383 $d
    stm32eforth-fl.s:2627   .text:0000000000001384 $t
    stm32eforth-fl.s:2703   .text:0000000000001403 $d
    stm32eforth-fl.s:2703   .text:0000000000001404 $t
    stm32eforth-fl.s:2741   .text:0000000000001463 $d
    stm32eforth-fl.s:2741   .text:0000000000001464 $t
    stm32eforth-fl.s:2901   .text:000000000000164f $d
    stm32eforth-fl.s:2901   .text:0000000000001650 $t
    stm32eforth-fl.s:2944   .text:00000000000016b1 $d
    stm32eforth-fl.s:2944   .text:00000000000016b2 $t
    stm32eforth-fl.s:2959   .text:00000000000016d5 $d
    stm32eforth-fl.s:2959   .text:00000000000016d6 $t
    stm32eforth-fl.s:3195   .text:000000000000195f $d
    stm32eforth-fl.s:3195   .text:0000000000001960 $t
    stm32eforth-fl.s:3349   .text:0000000000001b2b $d
    stm32eforth-fl.s:3349   .text:0000000000001b2c $t
    stm32eforth-fl.s:3363   .text:0000000000001b55 $d
    stm32eforth-fl.s:3363   .text:0000000000001b56 $t
    stm32eforth-fl.s:3386   .text:0000000000001b9b $d
    stm32eforth-fl.s:3386   .text:0000000000001b9c $t
    stm32eforth-fl.s:3399   .text:0000000000001bb9 $d
    stm32eforth-fl.s:3399   .text:0000000000001bba $t
    stm32eforth-fl.s:3455   .text:0000000000001c1b $d
    stm32eforth-fl.s:3455   .text:0000000000001c1c $t
    stm32eforth-fl.s:3495   .text:0000000000001c73 $d
    stm32eforth-fl.s:3495   .text:0000000000001c74 $t
    stm32eforth-fl.s:3503   .text:0000000000001ca1 $d
    stm32eforth-fl.s:3503   .text:0000000000001ca2 $t
    stm32eforth-fl.s:3521   .text:0000000000001ce9 $d
    stm32eforth-fl.s:3521   .text:0000000000001cea $t
    stm32eforth-fl.s:3542   .text:0000000000001d31 $d
    stm32eforth-fl.s:3542   .text:0000000000001d32 $t
    stm32eforth-fl.s:3558   .text:0000000000001d61 $d
    stm32eforth-fl.s:3558   .text:0000000000001d62 $t
    stm32eforth-fl.s:3601   .text:0000000000001e05 $d
    stm32eforth-fl.s:3601   .text:0000000000001e06 $t
    stm32eforth-fl.s:3640   .text:0000000000001e87 $d
    stm32eforth-fl.s:3640   .text:0000000000001e88 $t
    stm32eforth-fl.s:3651   .text:0000000000001e9f $d
    stm32eforth-fl.s:3651   .text:0000000000001ea0 $t
ARM GAS  stm32eforth-fl.s 			page 116


    stm32eforth-fl.s:3682   .text:0000000000001f05 $d
    stm32eforth-fl.s:3682   .text:0000000000001f06 $t
    stm32eforth-fl.s:3730   .text:0000000000001fa7 $d
    stm32eforth-fl.s:3730   .text:0000000000001fa8 $t
    stm32eforth-fl.s:3904   .text:000000000000215d $d
    stm32eforth-fl.s:3904   .text:000000000000215e $t
    stm32eforth-fl.s:3943   .text:00000000000021c7 $d
    stm32eforth-fl.s:3943   .text:00000000000021c8 $t
    stm32eforth-fl.s:3975   .text:000000000000222f $d
    stm32eforth-fl.s:3975   .text:0000000000002230 $t
    stm32eforth-fl.s:3990   .text:0000000000002251 $d
    stm32eforth-fl.s:3990   .text:0000000000002252 $t
    stm32eforth-fl.s:4019   .text:0000000000002291 $d
    stm32eforth-fl.s:4019   .text:0000000000002292 $t
    stm32eforth-fl.s:4046   .text:00000000000022cf $d
    stm32eforth-fl.s:4046   .text:00000000000022d0 $t
    stm32eforth-fl.s:4059   .text:00000000000022ef $d
    stm32eforth-fl.s:4059   .text:00000000000022f0 $t
    stm32eforth-fl.s:4072   .text:000000000000230f $d
    stm32eforth-fl.s:4072   .text:0000000000002310 $t
    stm32eforth-fl.s:4139   .text:00000000000023cd $d
    stm32eforth-fl.s:4139   .text:00000000000023ce $t
    stm32eforth-fl.s:4281   .text:000000000000253d $d
    stm32eforth-fl.s:4281   .text:000000000000253e $t
    stm32eforth-fl.s:4336   .text:00000000000025e3 $d
    stm32eforth-fl.s:4336   .text:00000000000025e4 $t
    stm32eforth-fl.s:4350   .text:0000000000002607 $d
    stm32eforth-fl.s:4350   .text:0000000000002608 $t
    stm32eforth-fl.s:4390   .text:000000000000267f $d
    stm32eforth-fl.s:4390   .text:0000000000002680 $t
    stm32eforth-fl.s:4407   .text:00000000000026b1 $d
    stm32eforth-fl.s:4407   .text:00000000000026b2 $t
    stm32eforth-fl.s:4480   .text:0000000000002775 $d
    stm32eforth-fl.s:4480   .text:0000000000002776 $t
    stm32eforth-fl.s:4517   .text:00000000000027ef $d
    stm32eforth-fl.s:4517   .text:00000000000027f0 $t
    stm32eforth-fl.s:4702   .text:0000000000002923 $d
    stm32eforth-fl.s:4702   .text:0000000000002924 $t
    stm32eforth-fl.s:4706   .text:000000000000294b $d

UNDEFINED SYMBOLS
_mstack
