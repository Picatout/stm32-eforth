ARM GAS  stm32eforth-fl.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	* 
   8              	*	This version use indirect threaded model. This model enable 
   9              	*	leaving the core Forth system in FLASH memory while the users 
  10              	*	definitions reside in RAM. 
  11              	*	R0 is used as IP , inner interpreter address pointer 
  12              	*	R4 is used as WP , working register 
  13              	*
  14              	*     Use USART1 for console I/O
  15              	*     port config: 115200 8N1 
  16              	*     TX on  PA9,  RX on PA10  
  17              	*
  18              	*     eForth is executed from flash, not copied to RAM
  19              	*     eForth use main stack R13 as return stack (thread stack not used) 
  20              	*
  21              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  22              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  23              	*     a 128 bytes tib is reserved below flwr_buffer 
  24              	*     Forth dstack is below tib and reserve 512 bytes 
  25              	*   
  26              	******************************************************
  27              	
  28              	*****************************************************************************
  29              	*	STM32eForth version 7.20
  30              	*	Chen-Hanson Ting,  July 2014
  31              	
  32              	*	Subroutine Threaded Forth Model
  33              	*	Adapted to STM32F407-Discovery Board
  34              	*	Assembled by Keil uVision 5.10
  35              	
  36              	*	Version 4.03
  37              	*	Direct Threaded Forth Model
  38              	*	Derived from 80386 eForth versin 4.02
  39              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  40              	
  41              	*	Subroutine thread (Branch-Link) model
  42              	*	  Register assignments
  43              	*	IP	 	R0 	*scratch
  44              	*	SP	 	R1  * data stack pointer
  45              	*	RP	 	R2 * return stack pointer 
  46              	*	UP	 	R3 
  47              	*	WP	 	R4	*scratch 
  48              	*	TOS	 	R5  * top of data stack
  49              	*	XP	 	R6 	*scratch
  50              	*	YP	 	R7	*scratch
  51              	*	  All Forth words are called by 
  52              	*	BL.W	addr
  53              	*	  All low level code words are terminaled by
  54              	*	BX	LR 	(_RET)
  55              	*	  All high level Forth words start with
  56              	*	STRFD	RP!,{LR}	(_NEST)
  57              	*	  All high level Forth words end with
ARM GAS  stm32eforth-fl.s 			page 2


  58              	*	LDRFD	RP!,{PC}	(_UNNEST)
  59              	*	  Top of data stack is cached in R5
  60              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  61              	*	TX on PA9 and RX on PA10.
  62              	
  63              	*	Version 5.02, 09oct04cht
  64              	*	fOR ADuC702x from Analog Devices
  65              	*	Version 6.01, 10apr08cht a
  66              	*	.p2align 2 to at91sam7x256
  67              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  68              	*	Running under uVision3 RealView from Keil
  69              	*	Version 7.01, 29jun14cht
  70              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  71              	*	.p2aligned to eForth 2 Model
  72              	*	Assembled to flash memory and executed therefrom.
  73              	*	Version 7.10, 30jun14cht
  74              	*	Flash memory mapped to Page 0 where codes are executed
  75              	*	Version 7.20, 02jul14cht
  76              	*	Irreducible Complexity
  77              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  78              	*	TURNKEY saves current application from RAM to flash.
  79              	*********************************************************/
  80              	
  81              	  .syntax unified
  82              	  .cpu cortex-m3
  83              	  .fpu softvfp
  84              	  .thumb
  85              	
  86              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
ARM GAS  stm32eforth-fl.s 			page 3


  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
ARM GAS  stm32eforth-fl.s 			page 4


  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
  87              	
  88              	/* blue pill specific constants */ 
  89              	  .equ LED_GPIO, GPIOC_BASE_ADR
  90              	  .equ LED_PIN, 13
  91              	  .equ UART, USART1_BASE_ADR 
  92              	
  93              	/* eForth specific constants */
  94              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  95              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  96              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  97              	.equ UPP ,	0x20000000	/*start of user area (UP0) */
  98              	.equ DTOP ,	0x20000100	/*start of usable RAM area (HERE) */
  99              	.equ DEND , 0x20004E00  /*usable RAM end */
 100              	 .equ RAMOFFSET ,	0x20000000	// remap
 101              	 .equ RAMEND, 0x20005000 // 20Ko
 102              	
 103              	/*************************************
 104              	   system variables offset from UPP
 105              	*************************************/
ARM GAS  stm32eforth-fl.s 			page 5


 106              	  .equ SEED_OFS, 4    // prng seed 
 107              	  .equ TICKS_OFS, SEED_OFS+4  // millseconds counter
 108              	  .equ TIMER_OFS, TICKS_OFS+4  // count down timer
 109              	  .equ TORAM_OFS, TIMER_OFS+4  // compile to RAM 
 110              	  .equ IMG_SIGN_OFS, TORAM_OFS+4  // image signature  
 111              	  .equ BOOT_OFS, IMG_SIGN_OFS+4  // boot program address
 112              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
 113              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
 114              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
 115              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
 116              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
 117              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
 118              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
 119              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
 120              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
 121              	  .equ FORTH_CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
 122              	  .equ RAM_CTOP_OFS, FORTH_CTOP_OFS+4  // ram free dictionary address
 123              	  .equ LASTN_OFS, RAM_CTOP_OFS+4     // last word in dictionary link nfa 
 124              	  .equ VARS_END_OFS, LASTN_OFS+4 // end of system variables  
 125              	
 126              	/***********************************************
 127              	* MACROS
 128              	*	Assemble inline direct threaded code ending.
 129              	***********************************************/
 130              		.macro _CALL fn /* low level routine call */ 
 131              	 	PUSH {LR}
 132              		BL \fn  
 133              		POP {LR}
 134              		.endm
 135              		
 136              		.macro	_RET /*exit low level call */
 137              		BX LR 
 138              		.endm
 139              	
 140              		.macro _NEXT /* direct jump INEXT */ 
 141              		B INEXT 
 142              		.endm 
 143              	
 144              	 	.macro	_NEST /*start high level word */
 145              		BL NEST 
 146              		.endm
 147              	
 148              		.macro _ADR label 
 149              		.word 1+\label  
 150              		.endm 
 151              	
 152              	 	.macro	_UNNEST	/*end high level word */
 153              		_ADR UNNEST 
 154              		.endm
 155              	
 156              	 	.macro	_DOLIT u /*long literals */
 157              		_ADR	DOLIT
 158              		.word	\u 
 159              		.endm
 160              	
 161              		.macro _DOTQP len, text 
 162              		_ADR DOTQP 
ARM GAS  stm32eforth-fl.s 			page 6


 163              		.byte \len 
 164              		.ascii "\text" 
 165              		.p2align 2 
 166              		.endm
 167              	
 168              		.macro _BRAN label 
 169              		_ADR BRAN 
 170              		.word \label 
 171              		.endm 
 172              	
 173              		.macro _QBRAN label 
 174              		_ADR QBRAN 
 175              		.word \label
 176              		.endm 
 177              	
 178              		.macro _DONXT label 
 179              		_ADR DONXT
 180              		.word \label 
 181              		.endm 
 182              	
 183              	 	.macro	_PUSH	/*push R5 on data stack*/
 184              		STR	R5,[R1,#-4]!
 185              		.endm
 186              	
 187              	 	.macro	_POP /*pop data stack to R5 */
 188              		LDR	R5,[R1],#4
 189              		.endm
 190              	
 191              	/*************************************
 192              	*   interrupt service vectors table 
 193              	**************************************/
 194              	   .section  .isr_vector,"a",%progbits
 195              	  .type  isr_vectors, %object
 196              	
 197              	isr_vectors:
 198 0000 00000000 	  .word   _mstack          /* main return stack address */
 199 0004 00000000 	  .word   reset_handler    /* startup address */
 200              	/* core interrupts || exceptions */
 201 0008 00000000 	  .word   default_handler  /*  NMI */
 202 000c 00000000 	  .word   default_handler  /*  HardFault */
 203 0010 00000000 	  .word   default_handler  /*  Memory Management */
 204 0014 00000000 	  .word   default_handler  /* Bus fault */
 205 0018 00000000 	  .word   default_handler  /* Usage fault */
 206 001c 00000000 	  .word   0
 207 0020 00000000 	  .word   0
 208 0024 00000000 	  .word   0
 209 0028 00000000 	  .word   0
 210 002c 00000000 	  .word   default_handler  /* SWI instruction */
 211 0030 00000000 	  .word   default_handler  /* Debug monitor */
 212 0034 00000000 	  .word   0
 213 0038 00000000 	  .word   default_handler  /* PendSV */
 214 003c 00000000 	  .word   systick_handler  /* Systick */
 215              	  
 216              	  /* External Interrupts */
 217 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 218 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 219 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
ARM GAS  stm32eforth-fl.s 			page 7


 220 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 221 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 222 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 223 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 224 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 225 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 226 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 227 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 228 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 229 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 230 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 231 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 232 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 233 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 234 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 235 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 236 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 237 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 238 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 239 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 240 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 241 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 242 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 243 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 244 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 245 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 246 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 247 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 248 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 249 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 250 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 251 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 252 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 253 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 254 00d4 00000000 	  .word      default_handler /* IRQ37, USART1 */                   
 255 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 256 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 257 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 258 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 259 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 260 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 261 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 262 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 263 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 264 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 265 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 266 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 267 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 268 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 269 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 270 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 271 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 272 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 273 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 274 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 275 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 276 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
ARM GAS  stm32eforth-fl.s 			page 8


 277              	  .size  isr_vectors, .-isr_vectors
 278              	
 279 0130 00000000 		.p2align 8
 279      00000000 
 279      00000000 
 279      00000000 
 279      00000000 
 280              	
 281              	UZERO:
 282 0200 00000000 		.word 0  			/*Reserved */
 283 0204 55AA0000 		.word 0xaa55 /* SEED  */ 
 284 0208 00000000 		.word 0      /* MSEC */
 285 020c 00000000 	    .word 0     /* TIMER */
 286 0210 FFFFFFFF 		.word -1    /* >RAM */ 
 287 0214 494D4147 		.ascii "IMAG" /* signature */ 
 288 0218 B4270000 		.word HI  /*'BOOT */
 289 021c 0A000000 		.word BASEE 	/*BASE */
 290 0220 00000000 		.word 0			/*tmp */
 291 0224 00000000 		.word 0			/*SPAN */
 292 0228 00000000 		.word 0			/*>IN */
 293 022c 00000000 		.word 0			/*#TIB */
 294 0230 804E0020 		.word TIBB	/*TIB */
 295 0234 501A0000 		.word INTER	/*'EVAL */
 296 0238 00000000 		.word 0			/*HLD */
 297 023c 20280000 		.word LASTN	/*CONTEXT */
 298 0240 84280000 		.word CTOP	/* FCP end of system dictionnary */
 299 0244 00010020 		.word DTOP	/* CP end of RAM dictionary RAM */
 300 0248 20280000 		.word LASTN	/*LAST word in dictionary */
 301 024c 00000000 		.word 0,0			/*reserved */
 301      00000000 
 302              	ULAST:
 303              	
 304              	/*****************************************************
 305              	* default isr handler called on unexpected interrupt
 306              	*****************************************************/
 307              	    .section  .text,"ax",%progbits
 308              	  .type default_handler, %function
 309              	  .p2align 2 
 310              	  .global default_handler
 311              	default_handler:
 312 0000 054F     		ldr r7,exception_msg 
 313 0002 17F8010B 		ldrb r0,[r7],#1 
 314 0006 41F8045D 	1:	_PUSH 
 315 000a 17F8015B 		ldrb r5,[r7],#1
 316 000e 00F08FFA 		bl EMIT 
 317 0012 0138     		subs r0,r0,#1 
 318 0014 F7D1     		bne 1b 	
 319 0016 0BE0     		b REBOOT   
 320              	  .size  default_handler, .-default_handler
 321              	exception_msg:
 322 0018 1C000000 		.word .+4 
 323 001c 12       		.byte 18
 324 001d 0A0D6578 		.ascii "\n\rexeption reboot!"
 324      65707469 
 324      6F6E2072 
 324      65626F6F 
 324      7421
ARM GAS  stm32eforth-fl.s 			page 9


 325 002f 00       		.p2align 2
 326              	REBOOT:
 327 0030 0348     		ldr r0,scb_adr 
 328 0032 C168     		ldr r1,[r0,#SCB_AIRCR]
 329 0034 41F00401 		orr r1,#(1<<2)
 330 0038 C0F2FA51 		movt r1,#SCB_VECTKEY
 331 003c C160     		str r1,[r0,#SCB_AIRCR]
 332 003e FEE7     		b . 
 333              		.p2align 2
 334              	scb_adr:
 335 0040 00ED00E0 		.word SCB_BASE_ADR 
 336              	
 337              	/*********************************
 338              		system milliseconds counter
 339              	*********************************/	
 340              	  .type systick_handler, %function
 341              	  .p2align 2 
 342              	  .global systick_handler
 343              	systick_handler:
 344 0044 4FF00003 	  mov r3,#UPP&0xffff
 345 0048 C2F20003 	  movt r3,#UPP>>16  	
 346 004c 9868     	  ldr r0,[r3,#TICKS_OFS]  
 347 004e 00F10100 	  add r0,#1
 348 0052 9860     	  str r0,[r3,#TICKS_OFS]
 349 0054 D868     	  ldr r0,[r3,#TIMER_OFS]
 350 0056 10B1     	  cbz r0, systick_exit
 351 0058 A0F10100 	  sub r0,#1
 352 005c D860     	  str r0,[r3,#TIMER_OFS]
 353              	systick_exit:
 354 005e 7047     	  bx lr
 355              	
 356              	
 357              	/**************************************
 358              	  reset_handler execute at MCU reset
 359              	***************************************/
 360              	//    .section  .text.reset_handler
 361              	  .type  reset_handler, %function
 362              	  .p2align 2 
 363              	  .global reset_handler
 364              	reset_handler:
 365 0060 00F06EF8 		bl	remap 
 366 0064 00F004F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 367 0068 01F0A4FD 		bl	unlock			/* unlock flash memory */
 368 006c 02F0DCFB 		bl	COLD
 369              	
 370              	  .type init_devices, %function
 371              	  .p2align 2 
 372              	init_devices:
 373              	/* init clock to HSE 72 Mhz */
 374              	/* set 2 wait states in FLASH_ACR_LATENCY */
 375 0070 4FF40050 		mov r0,#FLASH_BASE_ADR&0xffff
 376 0074 C4F20200 		movt r0,#FLASH_BASE_ADR>>16 
 377 0078 4FF01202 	  mov r2,#0x12
 378 007c 0260     	  str r2,[r0,#FLASH_ACR]
 379              	/* configure clock for HSE, 8 Mhz crystal */
 380              	/* enable HSE in RCC_CR */
 381 007e 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
ARM GAS  stm32eforth-fl.s 			page 10


 382 0082 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 383 0086 0168     	  ldr r1,[r0,#RCC_CR]
 384 0088 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 385 008c 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 386              	/* wait HSERDY loop */
 387              	wait_hserdy:
 388 008e 0168     	  ldr r1,[r0,#RCC_CR]
 389 0090 11F4003F 	  tst r1,#(1<<17)
 390 0094 FBD0     	  beq wait_hserdy
 391              	
 392              	/************************************************* 
 393              	   configure PLL mul factor and source 
 394              	   SYSCLOCK=72 Mhz
 395              	   select HSE as  PLL source clock
 396              	   multiply frequency by 9 
 397              	   APB1 clock is limited to 36 Mhz so divide by 2 
 398              	****************************************************/
 399 0096 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 400 009a C0F21D01 	  movt r1,#(7<<2)|1
 401 009e 4160     	  str r1,[r0,#RCC_CFGR]
 402              	  /* enable PLL */
 403 00a0 0168     	  ldr r1,[r0,#RCC_CR]
 404 00a2 41F08071 	  orr r1, #1<<24 
 405 00a6 0160     	  str r1,[r0,#RCC_CR]
 406              	/* wait for PLLRDY */
 407              	wait_pllrdy:
 408 00a8 0168     	  ldr r1,[r0,#RCC_CR]
 409 00aa 11F0007F 	  tst r1,#(1<<25)
 410 00ae FBD0     	  beq wait_pllrdy 
 411              	/* select PLL as sysclock */
 412 00b0 4168     	  ldr r1,[r0,#RCC_CFGR]
 413 00b2 4FF6FC72 	  mov r2,#0xfffc
 414 00b6 CFF6FF72 	  movt r2,#0xffff
 415 00ba 01EA0201 	  and r1,r1,r2 
 416 00be 4FF00202 	  mov r2,#2
 417 00c2 41EA0201 	  orr r1,r1,r2
 418 00c6 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 419              	/* wait for SWS==2 */
 420              	wait_sws:
 421 00c8 4168     	  ldr r1,[r0,#RCC_CFGR]
 422 00ca 11F0080F 	  tst r1,#(2<<2)
 423 00ce FBD0     	  beq wait_sws
 424              	/* now sysclock is 72 Mhz */
 425              	
 426              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 427 00d0 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 428 00d4 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 429 00d8 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 430 00dc 8161     	  str	r1, [r0, #RCC_APB2ENR]
 431              	
 432              	/* configure GPIOC:13 as output for user LED */
 433 00de 4FF48050 	  mov r0,#GPIOC_BASE_ADR&0xffff
 434 00e2 C4F20100 	  movt r0,#GPIOC_BASE_ADR>>16
 435 00e6 4168     	  ldr r1,[r0,#GPIO_CRH]
 436 00e8 6FF47002 	  mvn r2,#(15<<20)
 437 00ec 01EA0201 	  and r1,r1,r2
 438 00f0 4FF4C002 	  mov r2,#(6<<20)
ARM GAS  stm32eforth-fl.s 			page 11


 439 00f4 41EA0201 	  orr r1,r1,r2
 440 00f8 4160     	  str r1,[r0,#GPIO_CRH]
 441              	
 442              	/* configure USART1 */
 443              	/* set GPIOA PIN 9, uart TX  */
 444 00fa 4FF40060 	  mov r0,#GPIOA_BASE_ADR&0XFFFF
 445 00fe C4F20100 	  movt r0,#GPIOA_BASE_ADR>>16	
 446 0102 4168     	  ldr r1,[r0,#GPIO_CRH]
 447 0104 6FF0F002 	  mvn r2,#(15<<4)
 448 0108 01EA0201 	  and r1,r1,r2
 449 010c 4FF0A002 	  mov r2,#(0xA<<4)
 450 0110 41EA0201 	  orr r1,r1,r2 
 451 0114 4160     	  str r1,[r0,#GPIO_CRH]
 452              	
 453 0116 4FF46050 	  mov r0,#UART&0xFFFF
 454 011a C4F20100 	  movt r0,#UART>>16	
 455              	/* BAUD rate */
 456 011e 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 457 0122 8160     	  str r1,[r0,#USART_BRR]
 458 0124 42F20C01 	  mov r1,#(3<<2)+(1<<13)
 459 0128 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 460              	/* configure systicks for 1msec ticks */
 461 012a 4EF21000 	  mov r0,#STK_BASE_ADR&0xFFFF
 462 012e CEF20000 	  movt r0,#STK_BASE_ADR>>16	
 463 0132 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 464 0136 4160     	  str r1,[r0,#STK_LOAD]
 465 0138 4FF00301 	  mov r1,#3
 466 013c 0160     	  str r1,[r0,STK_CTL]
 467 013e 7047     	  bx lr  
 468              	
 469              	/* copy system to RAM */ 
 470              	//	.type remap, %function 
 471              	remap:
 472 0140 0B48     		ldr r0,remap_dest  
 473 0142 0A49     		ldr r1,remap_src 
 474 0144 4FF05402 		mov r2,#ULAST-UZERO 
 475 0148 51F8043B 	1:	ldr r3,[r1],#4 
 476 014c 40F8043B 		str r3,[r0],#4 
 477 0150 043A     		subs R2,#4 
 478 0152 F9D1     		bne 1b
 479              	// zero end of RAM 
 480 0154 4FF4A042 		mov r2,#0x5000
 481 0158 C2F20002 		movt r2,#0x2000
 482 015c 83EA0303 		eor r3,r3,r3 
 483 0160 40F8043B 	2:  str r3,[r0],#4
 484 0164 9042     		cmp r0,r2 
 485 0166 FBDB     		blt 2b 
 486 0168 7047     		bx lr  
 487 016a 00BF     		.p2align 2
 488              	remap_src:
 489 016c 00020000 		.word UZERO 
 490              	remap_dest:
 491 0170 00000020 		.word RAM_ADR  
 492              	
 493              	/********************
 494              	* Version control
 495              	*******************/
ARM GAS  stm32eforth-fl.s 			page 12


 496              	.equ VER ,	0x01	/*major release version */
 497              	.equ EXT ,	0x00	/*minor extension */
 498              	
 499              	/* Constants */
 500              	
 501              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 502              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 503              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 504              	
 505              	.equ CELLL ,	4	/*size of a cell */
 506              	.equ BASEE ,	10	/*default radix */
 507              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 508              	
 509              	.equ BKSPP ,	8	/*backspace */
 510              	.equ LF ,	10	  /*line feed */
 511              	.equ CRR ,	13	/*carriage return */
 512              	.equ ERR ,	27	/*error escape */
 513              	.equ TIC ,	39	/*tick */
 514              	
 515              	/********************************************************
 516              	* RAM memory mapping
 517              	* 	0x20000000	RAM base address
 518              	*	0x20000000  system variables	
 519              	* 	0x20000100	Forth dictionary
 520              	* 	0x2000????	top of dictionary, HERE
 521              	* 	0x2000????	WORD buffer, HERE+16
 522              	*   0x20004E00  end of user space
 523              	* 	0x20004E80	top of data stack  R2
 524              	* 	0x20004E80	TIB terminal input buffer
 525              	* 	0x20004F80	top of return stack  R1
 526              	* 	0x20005000	top of hardware stack for interrupts R14
 527              	********************************************************/
 528              	
 529              	
 530              	/******************************************************
 531              	*  COLD start moves the following to USER variables.
 532              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 533              	******************************************************/
 534 0174 AFF30080 		.p2align 10
 534      AFF30080 
 534      AFF30080 
 534      00000000 
 534      00000000 
 535              	
 536              	
 537              	 
 538              	
 539              	/***********************************
 540              	//  Start of eForth system 
 541              	***********************************/
 542              	
 543              		.p2align 2 
 544              	
 545              	// PUSH R5, to be used in colon definition 
 546              	TPUSH:
 547 0400 41F8045D 		_PUSH
 548 0404 06E0     		_NEXT
ARM GAS  stm32eforth-fl.s 			page 13


 549              	
 550              	// POP R5, to be used in colon defintion  
 551              	TPOP:
 552 0406 51F8045B 		_POP 
 553 040a 03E0     		_NEXT
 554              	
 555              	
 556              	// hi level word enter 
 557              	NEST: 
 558 040c 42F8040D 		STMFD	R2!,{R0}
 559 0410 04F10300 		ADD R0,R4,#3
 560              	// inner interprer
 561              	INEXT: 
 562 0414 50F8044B 		LDR R4,[R0],#4 
 563 0418 A047     		BLX R4 
 564 041a FBE7     		B INEXT 
 565              	UNNEST:
 566 041c 01CA     		LDMFD R2!,{R0}
 567 041e 50F8044B 		LDR R4,[R0],#4 
 568 0422 A047     		BLX R4 
 569 0424 F6E7     		B INEXT 
 570              	
 571 0426 00BF     		.p2align 2 
 572              	
 573              	// RANDOM ( n1 -- {0..n1-1} )
 574              	// return pseudo random number 
 575              	// REF: https://en.wikipedia.org/wiki/Xorshift
 576              	
 577 0428 00000000 		.word 0
 578 042c 06       	_RAND: .byte 6
 579 042d 52414E44 		.ascii "RANDOM"
 579      4F4D
 580 0433 00       		.p2align 2 
 581              	RAND:
 582 0434 FFF7EAFF 		_NEST 
 583 0438 FD090000 		_ADR SEED 
 584 043c D1050000 		_ADR AT 
 585 0440 59060000 		_ADR DUPP 
 586 0444 55050000 		_DOLIT 13
 586      0D000000 
 587 044c 11070000 		_ADR LSHIFT 
 588 0450 C9060000 		_ADR XORR  
 589 0454 59060000 		_ADR DUPP 
 590 0458 55050000 		_DOLIT 17 
 590      11000000 
 591 0460 F9060000 		_ADR RSHIFT 
 592 0464 C9060000 		_ADR XORR 
 593 0468 59060000 		_ADR DUPP
 594 046c 55050000 		_DOLIT 5 
 594      05000000 
 595 0474 11070000 		_ADR LSHIFT 
 596 0478 C9060000 		_ADR XORR  
 597 047c 59060000 		_ADR DUPP 
 598 0480 FD090000 		_ADR SEED 
 599 0484 BD050000 		_ADR STORE 
 600 0488 C1080000 		_ADR ABSS
 601 048c 69060000 		_ADR SWAP 
ARM GAS  stm32eforth-fl.s 			page 14


 602 0490 A50C0000 		_ADR MODD 
 603 0494 1D040000 		_UNNEST 
 604              	
 605              	
 606              	// PAUSE ( u -- ) 
 607              	// suspend execution for u milliseconds
 608 0498 2C040000 		.word _RAND
 609 049c 05       	_PAUSE: .byte 5
 610 049d 50415553 		.ascii "PAUSE"
 610      45
 611 04a2 00BF     		.p2align 2
 612              	PAUSE:
 613 04a4 FFF7B2FF 		_NEST 
 614 04a8 250A0000 		_ADR TIMER 
 615 04ac BD050000 		_ADR STORE 
 616              	PAUSE_LOOP:
 617 04b0 250A0000 		_ADR TIMER 
 618 04b4 D1050000 		_ADR AT 
 619 04b8 91050000 		_QBRAN PAUSE_EXIT 
 619      C8040000 
 620 04c0 A3050000 		_BRAN PAUSE_LOOP 
 620      B0040000 
 621              	PAUSE_EXIT: 		
 622 04c8 1D040000 		_UNNEST 
 623              	
 624              	//  ULED ( T|F -- )
 625              	// control user LED, -1 ON, 0 OFF  
 626 04cc 9C040000 		.word _PAUSE
 627 04d0 04       	_ULED: .byte 4
 628 04d1 554C4544 		.ascii "ULED"
 629 04d5 0000BF   		.p2align 2
 630              		.type ULED, %function 
 631              	ULED:
 632 04d8 4FF40056 		mov r6,#(1<<LED_PIN)
 633 04dc 4FF48054 		mov r4,#LED_GPIO&0xffff
 634 04e0 C4F20104 		movt r4,#LED_GPIO>>16
 635 04e4 2D00     		movs r5,r5 
 636 04e6 51F8045B 		_POP
 637 04ea 01D0     		beq ULED_OFF 
 638 04ec 6661     		str r6,[r4,#GPIO_BRR]
 639 04ee 91E7     		_NEXT 
 640              	ULED_OFF:
 641 04f0 2661     		str r6,[r4,#GPIO_BSRR]
 642 04f2 8FE7     		_NEXT    
 643              	
 644              	//    ?RX	 ( -- c T | F )
 645              	// 	Return input character and true, or a false if no input.
 646 04f4 D0040000 		.word	_ULED
 647 04f8 04       	_QRX:	.byte   4
 648 04f9 3F4B4559 		.ascii "?KEY"
 649 04fd 0000BF   		.p2align 2 
 650              	QKEY:
 651              	QRX: 
 652 0500 41F8045D 		_PUSH
 653 0504 4FF46054 		mov r4,#UART&0xFFFF
 654 0508 C4F20104 		movt r4,#UART>>16
 655 050c 2688     		ldrh	r6, [r4, #USART_SR]
ARM GAS  stm32eforth-fl.s 			page 15


 656 050e 16F02006 		ands	r6, #0x20		//  RXE
 657 0512 05D0     		BEQ	QRX1
 658 0514 6568     	 	LDR	R5, [R4, #USART_DR]
 659 0516 41F8045D 		_PUSH
 660 051a 18BF     	    IT NE 
 661 051c 6FF00005 		MVNNE	R5,#0
 662              	QRX1:
 663 0520 08BF     		IT EQ 
 664 0522 0025     	    MOVEQ	R5,#0
 665 0524 76E7     		_NEXT 
 666              	
 667              	//    TX!	 ( c -- )
 668              	// 	Send character c to the output device.
 669              	
 670 0526 F8040000 		.word	_QRX
 671 052a 04       	_TXSTO:	.byte 4
 672 052b 454D4954 		.ascii "EMIT"
 673 052f 00       		.p2align 2 	
 674              	TXSTO:
 675              	EMIT:
 676              	TECHO:
 677 0530 4FF46054 		mov r4,#UART&0xFFFF
 678 0534 C4F20104 		movt r4,#UART>>16
 679              	TX1:
 680 0538 2688     		ldrh	r6, [r4, #USART_SR]	
 681 053a 16F08006 		ands	r6, #0x80		//  TXE bit 
 682 053e FBD0     		beq	TX1
 683 0540 A580     		strh	r5, [r4, #USART_DR]	
 684 0542 51F8045B 		_POP
 685 0546 65E7     		_NEXT 
 686              		
 687              	/***************
 688              	//  The kernel
 689              	***************/
 690              	
 691              	//    NOP	( -- )
 692              	// 	do nothing.
 693              	
 694 0548 2A050000 		.word	_TXSTO
 695 054c 03       	_NOP:	.byte   3
 696 054d 4E4F50   		.ascii "NOP"
 697              		.p2align 2 	
 698              	NOP:
 699 0550 60E7     		_NEXT 
 700              	 
 701              	
 702              	//    doLIT	( -- w )
 703              	// 	Push an inline literal.
 704              	
 705              	// 	.word	_NOP
 706              	// _LIT	.byte   COMPO+5
 707              	// 	.ascii "doLIT"
 708 0552 00BF     	 	.p2align 2 	
 709              	DOLIT:
 710 0554 41F8045D 		_PUSH				//  store R5 on data stack
 711 0558 50F8045B 		LDR	R5,[R0],#4		//  get literal at word boundary
 712 055c 5AE7     		_NEXT 
ARM GAS  stm32eforth-fl.s 			page 16


 713              	
 714              	//    EXECUTE	( ca -- )
 715              	// 	Execute the word at ca.
 716              	
 717 055e 4C050000 		.word	_NOP
 718 0562 07       	_EXECU:	.byte   7
 719 0563 45584543 		.ascii "EXECUTE"
 719      555445
 720 056a 00BF     		.p2align 2 	
 721              	EXECU: 
 722 056c 45F0010E 		ORR	LR,R5,#1 
 723 0570 51F8045B 		_POP
 724 0574 FFF74AFF 		_NEST 
 725              	
 726              	//    next	( -- ) counter on R:
 727              	// 	Run time code for the single index loop.
 728              	// 	: next ( -- ) \ hilevel model
 729              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 730              	
 731              	// 	.word	_EXECU
 732              	// _DONXT	.byte   COMPO+4
 733              	// 	.ascii "next"
 734              	// 	.p2align 2 	
 735              	DONXT:
 736 0578 1468     		LDR	R4,[R2]   // ( -- u )  
 737 057a 24B9     		CBNZ R4,NEXT1 
 738              		/* loop done */
 739 057c 02F10402 		ADD	R2,R2,#4 // drop counter 
 740 0580 00F10400 		ADD	R0,R0,#4 // skip after loop address 
 741 0584 46E7     		_NEXT
 742              	NEXT1:
 743              		/* decrement loop counter */
 744 0586 A4F10104 		SUB	R4,R4,#1
 745 058a 1460     		STR	R4,[R2]
 746 058c 0068     		LDR	R0,[R0]	// gbegining of loop 
 747 058e 41E7     		_NEXT 
 748              	
 749              	//    ?branch	( f -- )
 750              	// 	Branch if flag is zero.
 751              	
 752              	// 	.word	_DONXT
 753              	// _QBRAN	.byte   COMPO+7
 754              	// 	.ascii "?branch"
 755              	// 	.p2align 2 	
 756              	QBRAN:
 757 0590 2D00     		MOVS	R5,R5
 758 0592 51F8045B 		_POP
 759 0596 01D1     		BNE	QBRAN1
 760 0598 0068     		LDR	R0,[R0]
 761 059a 3BE7     		_NEXT
 762              	QBRAN1:
 763 059c 00F10400 	 	ADD	R0,R0,#4
 764 05a0 38E7     		_NEXT
 765              	
 766              	//    branch	( -- )
 767              	// 	Branch to an inline address.
 768              	
ARM GAS  stm32eforth-fl.s 			page 17


 769              	// 	.word	_QBRAN
 770              	// _BRAN	.byte   COMPO+6
 771              	// 	.ascii "branch"
 772              	// 	.p2align 2 	
 773              	BRAN:
 774 05a2 0068     		LDR	R0,[R0]
 775 05a4 36E7     		_NEXT
 776              	
 777              	//    EXIT	(  -- )
 778              	// 	Exit the currently executing command.
 779              	
 780 05a6 62050000 		.word	_EXECU
 781 05aa 04       	_EXIT:	.byte   4
 782 05ab 45584954 		.ascii "EXIT"
 783 05af 00       		.p2align 2 	
 784              	EXIT:
 785 05b0 1D040000 		_UNNEST
 786              	
 787              	//    !	   ( w a -- )
 788              	// 	Pop the data stack to memory.
 789              	
 790 05b4 AA050000 		.word	_EXIT
 791 05b8 01       	_STORE:	.byte   1
 792 05b9 21       		.ascii "!"
 793 05ba 00BF     		.p2align 2 	
 794              	STORE:
 795 05bc 51F8044B 		LDR	R4,[R1],#4
 796 05c0 2C60     		STR	R4,[R5]
 797 05c2 51F8045B 		_POP
 798 05c6 25E7     		_NEXT 
 799              	
 800              	//    @	   ( a -- w )
 801              	// 	Push memory location to the data stack.
 802              	
 803 05c8 B8050000 		.word	_STORE
 804 05cc 01       	_AT:	.byte   1
 805 05cd 40       		.ascii "@"
 806 05ce 00BF     		.p2align 2 	
 807              	AT:
 808 05d0 2D68     		LDR	R5,[R5]
 809 05d2 1FE7     		_NEXT 
 810              	
 811              	//    C!	  ( c b -- )
 812              	// 	Pop the data stack to byte memory.
 813              	
 814 05d4 CC050000 		.word	_AT
 815 05d8 02       	_CSTOR:	.byte   2
 816 05d9 4321     		.ascii "C!"
 817 05db 00       		.p2align 2 	
 818              	CSTOR:
 819 05dc 51F8044B 		LDR	R4,[R1],#4
 820 05e0 2C70     		STRB R4,[R5]
 821 05e2 51F8045B 		_POP
 822 05e6 15E7     		_NEXT
 823              	
 824              	//    C@	  ( b -- c )
 825              	// 	Push byte memory location to the data stack.
ARM GAS  stm32eforth-fl.s 			page 18


 826              	
 827 05e8 D8050000 		.word	_CSTOR
 828 05ec 02       	_CAT:	.byte   2
 829 05ed 4340     		.ascii "C@"
 830 05ef 00       		.p2align 2 	
 831              	CAT:
 832 05f0 2D78     		LDRB	R5,[R5]
 833 05f2 0FE7     		_NEXT 
 834              	
 835              	//    R>	  ( -- w )
 836              	// 	Pop the return stack to the data stack.
 837              	
 838 05f4 EC050000 		.word	_CAT
 839 05f8 02       	_RFROM:	.byte   2
 840 05f9 523E     		.ascii "R>"
 841 05fb 00       		.p2align 2 	
 842              	RFROM:
 843 05fc 41F8045D 		_PUSH
 844 0600 52F8045B 		LDR	R5,[R2],#4
 845 0604 06E7     		_NEXT 
 846              	
 847              	//    R@	  ( -- w )
 848              	// 	Copy top of return stack to the data stack.
 849              	
 850 0606 F8050000 		.word	_RFROM
 851 060a 02       	_RAT:	.byte   2
 852 060b 5240     		.ascii "R@"
 853 060d 0000BF   		.p2align 2 	
 854              	RAT:
 855 0610 41F8045D 		_PUSH
 856 0614 1568     		LDR	R5,[R2]
 857 0616 FDE6     		_NEXT 
 858              	
 859              	//    >R	  ( w -- )
 860              	// 	Push the data stack to the return stack.
 861              	
 862 0618 0A060000 		.word	_RAT
 863 061c 42       	_TOR:	.byte   COMPO+2
 864 061d 3E52     		.ascii ">R"
 865 061f 00       		.p2align 2 	
 866              	TOR:
 867 0620 42F8045D 		STR	R5,[R2,#-4]!
 868 0624 51F8045B 		_POP
 869 0628 F4E6     		_NEXT
 870              	
 871              	//    SP@	 ( -- a )
 872              	// 	Push the current data stack pointer.
 873              	
 874 062a 1C060000 		.word	_TOR
 875 062e 03       	_SPAT:	.byte   3
 876 062f 535040   		.ascii "SP@"
 877 0632 00BF     		.p2align 2 	
 878              	SPAT:
 879 0634 41F8045D 		_PUSH
 880 0638 0D46     		MOV	R5,R1
 881 063a EBE6     		_NEXT
 882              	
ARM GAS  stm32eforth-fl.s 			page 19


 883              	//    DROP	( w -- )
 884              	// 	Discard top stack item.
 885              	
 886 063c 2E060000 		.word	_SPAT
 887 0640 04       	_DROP:	.byte   4
 888 0641 44524F50 		.ascii "DROP"
 889 0645 0000BF   		.p2align 2 	
 890              	DROP:
 891 0648 51F8045B 		_POP
 892 064c E2E6     		_NEXT 
 893              	
 894              	//    DUP	 ( w -- w w )
 895              	// 	Duplicate the top stack item.
 896              	
 897 064e 40060000 		.word	_DROP
 898 0652 03       	_DUPP:	.byte   3
 899 0653 445550   		.ascii "DUP"
 900 0656 00BF     		.p2align 2 	
 901              	DUPP:
 902 0658 41F8045D 		_PUSH
 903 065c DAE6     		_NEXT 
 904              	
 905              	//    SWAP	( w1 w2 -- w2 w1 )
 906              	// 	Exchange top two stack items.
 907              	
 908 065e 52060000 		.word	_DUPP
 909 0662 04       	_SWAP:	.byte   4
 910 0663 53574150 		.ascii "SWAP"
 911 0667 00       		.p2align 2 	
 912              	SWAP:
 913 0668 0C68     		LDR	R4,[R1]
 914 066a 0D60     		STR	R5,[R1]
 915 066c 2546     		MOV	R5,R4
 916 066e D1E6     		_NEXT 
 917              	
 918              	//    OVER	( w1 w2 -- w1 w2 w1 )
 919              	// 	Copy second stack item to top.
 920              	
 921 0670 62060000 		.word	_SWAP
 922 0674 04       	_OVER:	.byte   4
 923 0675 4F564552 		.ascii "OVER"
 924 0679 0000BF   		.p2align 2 	
 925              	OVER:
 926 067c 41F8045D 		_PUSH
 927 0680 4D68     		LDR	R5,[R1,#4]
 928 0682 C7E6     		_NEXT 
 929              	
 930              	//    0<	  ( n -- t )
 931              	// 	Return true if n is negative.
 932              	
 933 0684 74060000 		.word	_OVER
 934 0688 02       	_ZLESS:	.byte   2
 935 0689 303C     		.ascii "0<"
 936 068b 00       		.p2align 2 	
 937              	ZLESS:
 938 068c 4FF00004 		MOV	R4,#0
 939 0690 04EB2505 		ADD	R5,R4,R5,ASR #32
ARM GAS  stm32eforth-fl.s 			page 20


 940 0694 BEE6     		_NEXT 
 941              	
 942              	//    AND	 ( w w -- w )
 943              	// 	Bitwise AND.
 944              	
 945 0696 88060000 		.word	_ZLESS
 946 069a 03       	_ANDD:	.byte   3
 947 069b 414E44   		.ascii "AND"
 948 069e 00BF     		.p2align 2 	
 949              	ANDD:
 950 06a0 51F8044B 		LDR	R4,[R1],#4
 951 06a4 05EA0405 		AND	R5,R5,R4
 952 06a8 B4E6     		_NEXT 
 953              	
 954              	//    OR	  ( w w -- w )
 955              	// 	Bitwise inclusive OR.
 956              	
 957 06aa 9A060000 		.word	_ANDD
 958 06ae 02       	_ORR:	.byte   2
 959 06af 4F52     		.ascii "OR"
 960 06b1 0000BF   		.p2align 2 	
 961              	ORR:
 962 06b4 51F8044B 		LDR	R4,[R1],#4
 963 06b8 45EA0405 		ORR	R5,R5,R4
 964 06bc AAE6     		_NEXT 
 965              	
 966              	//    XOR	 ( w w -- w )
 967              	// 	Bitwise exclusive OR.
 968              	
 969 06be AE060000 		.word	_ORR
 970 06c2 03       	_XORR:	.byte   3
 971 06c3 584F52   		.ascii "XOR"
 972 06c6 00BF     		.p2align 2 	
 973              	XORR:
 974 06c8 51F8044B 		LDR	R4,[R1],#4
 975 06cc 85EA0405 		EOR	R5,R5,R4
 976 06d0 A0E6     		_NEXT 
 977              	
 978              	//    UM+	 ( w w -- w cy )
 979              	// 	Add two numbers, return the sum and carry flag.
 980              	
 981 06d2 C2060000 		.word	_XORR
 982 06d6 03       	_UPLUS:	.byte   3
 983 06d7 554D2B   		.ascii "UM+"
 984 06da 00BF     		.p2align 2 	
 985              	UPLUS:
 986 06dc 0C68     		LDR	R4,[R1]
 987 06de 6419     		ADDS	R4,R4,R5
 988 06e0 4FF00005 		MOV	R5,#0
 989 06e4 45F10005 		ADC	R5,R5,#0
 990 06e8 0C60     		STR	R4,[R1]
 991 06ea 93E6     		_NEXT 
 992              	
 993              	//    RSHIFT	 ( w # -- w )
 994              	// 	arithmetic Right shift # bits.
 995              	
 996 06ec D6060000 		.word	_UPLUS
ARM GAS  stm32eforth-fl.s 			page 21


 997 06f0 06       	_RSHIFT:	.byte   6
 998 06f1 52534849 		.ascii "RSHIFT"
 998      4654
 999 06f7 00       		.p2align 2 	
 1000              	RSHIFT:
 1001 06f8 51F8044B 		LDR	R4,[R1],#4
 1002 06fc 44FA05F5 		MOV	R5,R4,ASR R5
 1003 0700 88E6     		_NEXT 
 1004              	
 1005              	//    LSHIFT	 ( w # -- w )
 1006              	// 	Right shift # bits.
 1007              	
 1008 0702 F0060000 		.word	_RSHIFT
 1009 0706 06       	_LSHIFT:	.byte   6
 1010 0707 4C534849 		.ascii "LSHIFT"
 1010      4654
 1011 070d 0000BF   		.p2align 2 	
 1012              	LSHIFT:
 1013 0710 51F8044B 		LDR	R4,[R1],#4
 1014 0714 04FA05F5 		MOV	R5,R4,LSL R5
 1015 0718 7CE6     		_NEXT
 1016              	
 1017              	//    +	 ( w w -- w )
 1018              	// 	Add.
 1019              	
 1020 071a 06070000 		.word	_LSHIFT
 1021 071e 01       	_PLUS:	.byte   1
 1022 071f 2B       		.ascii "+"
 1023              		.p2align 2 	
 1024              	PLUS:
 1025 0720 51F8044B 		LDR	R4,[R1],#4
 1026 0724 2544     		ADD	R5,R5,R4
 1027 0726 75E6     		_NEXT 
 1028              	
 1029              	//    -	 ( w w -- w )
 1030              	// 	Subtract.
 1031              	
 1032 0728 1E070000 		.word	_PLUS
 1033 072c 01       	_SUBB:	.byte   1
 1034 072d 2D       		.ascii "-"
 1035 072e 00BF     		.p2align 2 	
 1036              	SUBB:
 1037 0730 51F8044B 		LDR	R4,[R1],#4
 1038 0734 C5EB0405 		RSB	R5,R5,R4
 1039 0738 6CE6     		_NEXT 
 1040              	
 1041              	//    *	 ( w w -- w )
 1042              	// 	Multiply.
 1043              	
 1044 073a 2C070000 		.word	_SUBB
 1045 073e 01       	_STAR:	.byte   1
 1046 073f 2A       		.ascii "*"
 1047              		.p2align 2 	
 1048              	STAR:
 1049 0740 51F8044B 		LDR	R4,[R1],#4
 1050 0744 04FB05F5 		MUL	R5,R4,R5
 1051 0748 64E6     		_NEXT 
ARM GAS  stm32eforth-fl.s 			page 22


 1052              	
 1053              	//    UM*	 ( w w -- ud )
 1054              	// 	Unsigned multiply.
 1055              	
 1056 074a 3E070000 		.word	_STAR
 1057 074e 03       	_UMSTA:	.byte   3
 1058 074f 554D2A   		.ascii "UM*"
 1059 0752 00BF     		.p2align 2 	
 1060              	UMSTA:
 1061 0754 0C68     		LDR	R4,[R1]
 1062 0756 A5FB0467 		UMULL	R6,R7,R5,R4
 1063 075a 0E60     		STR	R6,[R1]
 1064 075c 3D46     		MOV	R5,R7
 1065 075e 59E6     		_NEXT 
 1066              	
 1067              	//    M*	 ( w w -- d )
 1068              	// 	signed multiply.
 1069              	
 1070 0760 4E070000 		.word	_UMSTA
 1071 0764 02       	_MSTAR:	.byte   2
 1072 0765 4D2A     		.ascii "M*"
 1073 0767 00       		.p2align 2 	
 1074              	MSTAR:
 1075 0768 0C68     		LDR	R4,[R1]
 1076 076a 85FB0467 		SMULL	R6,R7,R5,R4
 1077 076e 0E60     		STR	R6,[R1]
 1078 0770 3D46     		MOV	R5,R7
 1079 0772 4FE6     		_NEXT 
 1080              	
 1081              	//    1+	 ( w -- w+1 )
 1082              	// 	Add 1.
 1083              	
 1084 0774 64070000 		.word	_MSTAR
 1085 0778 02       	_ONEP:	.byte   2
 1086 0779 312B     		.ascii "1+"
 1087 077b 00       		.p2align 2 	
 1088              	ONEP:
 1089 077c 05F10105 		ADD	R5,R5,#1
 1090 0780 48E6     		_NEXT 
 1091              	
 1092              	//    1-	 ( w -- w-1 )
 1093              	// 	Subtract 1.
 1094              	
 1095 0782 78070000 		.word	_ONEP
 1096 0786 02       	_ONEM:	.byte   2
 1097 0787 312D     		.ascii "1-"
 1098 0789 0000BF   		.p2align 2 	
 1099              	ONEM:
 1100 078c A5F10105 		SUB	R5,R5,#1
 1101 0790 40E6     		_NEXT 
 1102              	
 1103              	//    2+	 ( w -- w+2 )
 1104              	// 	Add 1.
 1105              	
 1106 0792 86070000 		.word	_ONEM
 1107 0796 02       	_TWOP:	.byte   2
 1108 0797 322B     		.ascii "2+"
ARM GAS  stm32eforth-fl.s 			page 23


 1109 0799 0000BF   		.p2align 2 	
 1110              	TWOP:
 1111 079c 05F10205 		ADD	R5,R5,#2
 1112 07a0 38E6     		_NEXT
 1113              	
 1114              	//    2-	 ( w -- w-2 )
 1115              	// 	Subtract 2.
 1116              	
 1117 07a2 96070000 		.word	_TWOP
 1118 07a6 02       	_TWOM:	.byte   2
 1119 07a7 322D     		.ascii "2-"
 1120 07a9 0000BF   		.p2align 2 	
 1121              	TWOM:
 1122 07ac A5F10205 		SUB	R5,R5,#2
 1123 07b0 30E6     		_NEXT
 1124              	
 1125              	//    CELL+	( w -- w+4 )
 1126              	// 	Add CELLL.
 1127              	
 1128 07b2 A6070000 		.word	_TWOM
 1129 07b6 05       	_CELLP:	.byte   5
 1130 07b7 43454C4C 		.ascii "CELL+"
 1130      2B
 1131              		.p2align 2 	
 1132              	CELLP:
 1133 07bc 05F10405 		ADD	R5,R5,#CELLL
 1134 07c0 28E6     		_NEXT
 1135              	
 1136              	//    CELL-	( w -- w-4 )
 1137              	// 	Subtract CELLL.
 1138              	
 1139 07c2 B6070000 		.word	_CELLP
 1140 07c6 05       	_CELLM:	.byte   5
 1141 07c7 43454C4C 		.ascii "CELL-"
 1141      2D
 1142              		.p2align 2 	
 1143              	CELLM:
 1144 07cc A5F10405 		SUB	R5,R5,#CELLL
 1145 07d0 20E6     		_NEXT
 1146              	 
 1147              	//    BL	( -- 32 )
 1148              	// 	Blank (ASCII space).
 1149              	
 1150 07d2 C6070000 		.word	_CELLM
 1151 07d6 02       	_BLANK:	.byte   2
 1152 07d7 424C     		.ascii "BL"
 1153 07d9 0000BF   		.p2align 2 	
 1154              	BLANK:
 1155 07dc 41F8045D 		_PUSH
 1156 07e0 4FF02005 		MOV	R5,#32
 1157 07e4 16E6     		_NEXT 
 1158              	
 1159              	//    CELLS	( w -- w*4 )
 1160              	// 	Multiply 4.
 1161              	
 1162 07e6 D6070000 		.word	_BLANK
 1163 07ea 05       	_CELLS:	.byte   5
ARM GAS  stm32eforth-fl.s 			page 24


 1164 07eb 43454C4C 		.ascii "CELLS"
 1164      53
 1165              		.p2align 2 	
 1166              	CELLS:
 1167 07f0 4FEA8505 		MOV	R5,R5,LSL#2
 1168 07f4 0EE6     		_NEXT
 1169              	
 1170              	//    CELL/	( w -- w/4 )
 1171              	// 	Divide by 4.
 1172              	
 1173 07f6 EA070000 		.word	_CELLS
 1174 07fa 05       	_CELLSL:	.byte   5
 1175 07fb 43454C4C 		.ascii "CELL/"
 1175      2F
 1176              		.p2align 2 	
 1177              	CELLSL:
 1178 0800 4FEAA505 		MOV	R5,R5,ASR#2
 1179 0804 06E6     		_NEXT
 1180              	
 1181              	//    2*	( w -- w*2 )
 1182              	// 	Multiply 2.
 1183              	
 1184 0806 FA070000 		.word	_CELLSL
 1185 080a 02       	_TWOST:	.byte   2
 1186 080b 322A     		.ascii "2*"
 1187 080d 0000BF   		.p2align 2 	
 1188              	TWOST:
 1189 0810 4FEA4505 		MOV	R5,R5,LSL#1
 1190 0814 FEE5     		_NEXT
 1191              	
 1192              	//    2/	( w -- w/2 )
 1193              	// 	Divide by 2.
 1194              	
 1195 0816 0A080000 		.word	_TWOST
 1196 081a 02       	_TWOSL:	.byte   2
 1197 081b 322F     		.ascii "2/"
 1198 081d 0000BF   		.p2align 2 	
 1199              	TWOSL:
 1200 0820 4FEA6505 		MOV	R5,R5,ASR#1
 1201 0824 F6E5     		_NEXT
 1202              	
 1203              	//    ?DUP	( w -- w w | 0 )
 1204              	// 	Conditional duplicate.
 1205              	
 1206 0826 1A080000 		.word	_TWOSL
 1207 082a 04       	_QDUP:	.byte   4
 1208 082b 3F445550 		.ascii "?DUP"
 1209 082f 00       		.p2align 2 	
 1210              	QDUP:
 1211 0830 2C00     		MOVS	R4,R5
 1212 0832 18BF     		IT NE 
 1213 0834 41F8045D 	    STRNE	R5,[R1,#-4]!
 1214 0838 ECE5     		_NEXT
 1215              	
 1216              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1217              	// 	Rotate top 3 items.
 1218              	
ARM GAS  stm32eforth-fl.s 			page 25


 1219 083a 2A080000 		.word	_QDUP
 1220 083e 03       	_ROT:	.byte   3
 1221 083f 524F54   		.ascii "ROT"
 1222 0842 00BF     		.p2align 2 	
 1223              	ROT:
 1224 0844 0C68     		LDR	R4,[R1]  // r4=w2 
 1225 0846 0D60     		STR	R5,[R1]  // w3 replace w2 
 1226 0848 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1227 084a 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1228 084c E2E5     		_NEXT
 1229              	
 1230              	//    2DROP	( w1 w2 -- )
 1231              	// 	Drop top 2 items.
 1232              	
 1233 084e 3E080000 		.word	_ROT
 1234 0852 05       	_DDROP:	.byte   5
 1235 0853 3244524F 		.ascii "2DROP"
 1235      50
 1236              		.p2align 2 	
 1237              	DDROP:
 1238 0858 51F8045B 		_POP
 1239 085c 51F8045B 		_POP
 1240 0860 D8E5     		_NEXT 
 1241              	
 1242              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1243              	// 	Duplicate top 2 items.
 1244              	
 1245 0862 52080000 		.word	_DDROP
 1246 0866 04       	_DDUP:	.byte   4
 1247 0867 32445550 		.ascii "2DUP"
 1248 086b 00       		.p2align 2 	
 1249              	DDUP:
 1250 086c 0C68     		LDR	R4,[R1] // r4=w1
 1251 086e 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1252 0872 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1253 0876 CDE5     		_NEXT
 1254              	
 1255              	//    D+	( d1 d2 -- d3 )
 1256              	// 	Add top 2 double numbers.
 1257              	
 1258 0878 66080000 		.word	_DDUP
 1259 087c 02       	_DPLUS:	.byte   2
 1260 087d 442B     		.ascii "D+"
 1261 087f 00       		.p2align 2 	
 1262              	DPLUS:
 1263 0880 51F8044B 		LDR	R4,[R1],#4
 1264 0884 51F8046B 		LDR	R6,[R1],#4
 1265 0888 0F68     		LDR	R7,[R1]
 1266 088a E419     		ADDS	R4,R4,R7
 1267 088c 0C60     		STR	R4,[R1]
 1268 088e 45EB0605 		ADC	R5,R5,R6
 1269 0892 BFE5     		_NEXT
 1270              	
 1271              	//    NOT	 ( w -- !w )
 1272              	// 	1"s complement.
 1273              	
 1274 0894 7C080000 		.word	_DPLUS
ARM GAS  stm32eforth-fl.s 			page 26


 1275 0898 03       	_INVER:	.byte   3
 1276 0899 4E4F54   		.ascii "NOT"
 1277              		.p2align 2 	
 1278              	INVER:
 1279 089c 6FEA0505 		MVN	R5,R5
 1280 08a0 B8E5     		_NEXT
 1281              	
 1282              	//    NEGATE	( w -- -w )
 1283              	// 	2's complement.
 1284              	
 1285 08a2 98080000 		.word	_INVER
 1286 08a6 06       	_NEGAT:	.byte   6
 1287 08a7 4E454741 		.ascii "NEGATE"
 1287      5445
 1288 08ad 0000BF   		.p2align 2 	
 1289              	NEGAT:
 1290 08b0 C5F10005 		RSB	R5,R5,#0
 1291 08b4 AEE5     		_NEXT
 1292              	
 1293              	//    ABS	 ( w -- |w| )
 1294              	// 	Absolute.
 1295              	
 1296 08b6 A6080000 		.word	_NEGAT
 1297 08ba 03       	_ABSS:	.byte   3
 1298 08bb 414253   		.ascii "ABS"
 1299 08be 00BF     		.p2align 2 	
 1300              	ABSS:
 1301 08c0 15F0004F 		TST	R5,#0x80000000
 1302 08c4 18BF     		IT NE
 1303 08c6 6D42     	    RSBNE   R5,R5,#0
 1304 08c8 A4E5     		_NEXT
 1305              	
 1306              	//  0= ( w -- f )
 1307              	// TOS==0?
 1308              	
 1309 08ca BA080000 		.word _ABSS
 1310 08ce 02       	_ZEQUAL: .byte 2
 1311 08cf 303D     		.ascii "0="
 1312 08d1 0000BF   		.p2align 2
 1313              	ZEQUAL:
 1314 08d4 15B9     		cbnz r5,1f
 1315 08d6 4FF0FF35 		mov r5,#-1
 1316 08da 9BE5     		_NEXT 
 1317 08dc 85EA0505 	1:  eor r5,r5,r5  
 1318 08e0 98E5     		_NEXT 	
 1319              	
 1320              	//    =	 ( w w -- t )
 1321              	// 	Equal?
 1322              	
 1323 08e2 CE080000 		.word	_ZEQUAL
 1324 08e6 01       	_EQUAL:	.byte   1
 1325 08e7 3D       		.ascii "="
 1326              		.p2align 2 	
 1327              	EQUAL:
 1328 08e8 51F8044B 		LDR	R4,[R1],#4
 1329 08ec A542     		CMP	R5,R4
 1330 08ee 0CBF     		ITE EQ 
ARM GAS  stm32eforth-fl.s 			page 27


 1331 08f0 6FF00005 	    MVNEQ	R5,#0
 1332 08f4 0025     		MOVNE	R5,#0
 1333 08f6 8DE5     		_NEXT
 1334              	
 1335              	//    U<	 ( w w -- t )
 1336              	// 	Unsigned equal?
 1337              	
 1338 08f8 E6080000 		.word	_EQUAL
 1339 08fc 02       	_ULESS:	.byte   2
 1340 08fd 553C     		.ascii "U<"
 1341 08ff 00       		.p2align 2 	
 1342              	ULESS:
 1343 0900 51F8044B 		LDR	R4,[R1],#4
 1344 0904 AC42     		CMP	R4,R5
 1345 0906 34BF     		ITE CC 
 1346 0908 6FF00005 		MVNCC	R5,#0
 1347 090c 0025     		MOVCS	R5,#0
 1348 090e 81E5     		_NEXT
 1349              	
 1350              	//    <	( w w -- t )
 1351              	// 	Less?
 1352              	
 1353 0910 FC080000 		.word	_ULESS
 1354 0914 01       	_LESS:	.byte   1
 1355 0915 3C       		.ascii "<"
 1356 0916 00BF     		.p2align 2 	
 1357              	LESS:
 1358 0918 51F8044B 		LDR	R4,[R1],#4
 1359 091c AC42     		CMP	R4,R5
 1360 091e B4BF     	    ITE LT
 1361 0920 6FF00005 		MVNLT	R5,#0
 1362 0924 0025     		MOVGE	R5,#0
 1363 0926 75E5     		_NEXT 
 1364              	
 1365              	//    >	( w w -- t )
 1366              	// 	greater?
 1367              	
 1368 0928 14090000 		.word	_LESS
 1369 092c 01       	_GREAT:	.byte   1
 1370 092d 3E       		.ascii ">"
 1371 092e 00BF     		.p2align 2 	
 1372              	GREAT:
 1373 0930 51F8044B 		LDR	R4,[R1],#4
 1374 0934 AC42     		CMP	R4,R5
 1375 0936 CCBF     		ITE GT
 1376 0938 6FF00005 	    MVNGT	R5,#0
 1377 093c 0025     		MOVLE	R5,#0
 1378 093e 69E5     		_NEXT
 1379              	
 1380              	//    MAX	 ( w w -- max )
 1381              	// 	Leave maximum.
 1382              	
 1383 0940 2C090000 		.word	_GREAT
 1384 0944 03       	_MAX:	.byte   3
 1385 0945 4D4158   		.ascii "MAX"
 1386              		.p2align 2 	
 1387              	MAX:
ARM GAS  stm32eforth-fl.s 			page 28


 1388 0948 51F8044B 		LDR	R4,[R1],#4
 1389 094c AC42     		CMP	R4,R5
 1390 094e C8BF     		IT GT 
 1391 0950 2546     		MOVGT	R5,R4
 1392 0952 5FE5     		_NEXT 
 1393              	
 1394              	//    MIN	 ( w w -- min )
 1395              	// 	Leave minimum.
 1396              	
 1397 0954 44090000 		.word	_MAX
 1398 0958 03       	_MIN:	.byte   3
 1399 0959 4D494E   		.ascii "MIN"
 1400              		.p2align 2 	
 1401              	MIN:
 1402 095c 51F8044B 		LDR	R4,[R1],#4
 1403 0960 AC42     		CMP	R4,R5
 1404 0962 B8BF     		IT LT
 1405 0964 2546     		MOVLT	R5,R4
 1406 0966 55E5     		_NEXT
 1407              	
 1408              	//    +!	 ( w a -- )
 1409              	// 	Add to memory.
 1410              	
 1411 0968 58090000 		.word	_MIN
 1412 096c 02       	_PSTOR:	.byte   2
 1413 096d 2B21     		.ascii "+!"
 1414 096f 00       		.p2align 2 	
 1415              	PSTOR:
 1416 0970 51F8044B 		LDR	R4,[R1],#4
 1417 0974 2E68     		LDR	R6,[R5]
 1418 0976 2644     		ADD	R6,R6,R4
 1419 0978 2E60     		STR	R6,[R5]
 1420 097a 51F8045B 		_POP
 1421 097e 49E5     		_NEXT
 1422              	
 1423              	//    2!	 ( d a -- )
 1424              	// 	Store double number.
 1425              	
 1426 0980 6C090000 		.word	_PSTOR
 1427 0984 02       	_DSTOR:	.byte   2
 1428 0985 3221     		.ascii "2!"
 1429 0987 00       		.p2align 2 	
 1430              	DSTOR:
 1431 0988 51F8044B 		LDR	R4,[R1],#4
 1432 098c 51F8046B 		LDR	R6,[R1],#4
 1433 0990 45F8044B 		STR	R4,[R5],#4
 1434 0994 2E60     		STR	R6,[R5]
 1435 0996 51F8045B 		_POP
 1436 099a 3BE5     		_NEXT
 1437              	
 1438              	//    2@	 ( a -- d )
 1439              	// 	Fetch double number.
 1440              	
 1441 099c 84090000 		.word	_DSTOR
 1442 09a0 02       	_DAT:	.byte   2
 1443 09a1 3240     		.ascii "2@"
 1444 09a3 00       		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 29


 1445              	DAT:
 1446 09a4 6C68     		LDR	R4,[R5,#4]
 1447 09a6 41F8044D 		STR	R4,[R1,#-4]!
 1448 09aa 2D68     		LDR	R5,[R5]
 1449 09ac 32E5     		_NEXT
 1450              	
 1451              	//    COUNT	( b -- b+1 c )
 1452              	// 	Fetch length of string.
 1453              	
 1454 09ae A0090000 		.word	_DAT
 1455 09b2 05       	_COUNT:	.byte   5
 1456 09b3 434F554E 		.ascii "COUNT"
 1456      54
 1457              		.p2align 2 	
 1458              	COUNT:
 1459 09b8 15F8014B 		LDRB	R4,[R5],#1
 1460 09bc 41F8045D 		_PUSH
 1461 09c0 2546     		MOV	R5,R4
 1462 09c2 27E5     		_NEXT
 1463              	
 1464              	//    DNEGATE	( d -- -d )
 1465              	// 	Negate double number.
 1466              	
 1467 09c4 B2090000 		.word	_COUNT
 1468 09c8 07       	_DNEGA:	.byte   7
 1469 09c9 444E4547 		.ascii "DNEGATE"
 1469      415445
 1470              		.p2align 2 	
 1471              	DNEGA:
 1472 09d0 0C68     		LDR	R4,[R1]
 1473 09d2 A6EB0606 		SUB	R6,R6,R6
 1474 09d6 341B     		SUBS R4,R6,R4
 1475 09d8 66EB0505 		SBC	R5,R6,R5
 1476 09dc 0C60     		STR	R4,[R1]
 1477 09de 19E5     		_NEXT
 1478              	
 1479              	// **************************************************************************
 1480              	//  System and user variables
 1481              	
 1482              	//    doVAR	( -- a )
 1483              	// 	Run time routine for VARIABLE and CREATE.
 1484              	
 1485              	// 	.word	_DNEGA
 1486              	// _DOVAR	.byte  COMPO+5
 1487              	// 	.ascii "doVAR"
 1488              	// 	.p2align 2 	
 1489              	DOVAR:
 1490 09e0 41F8045D 		_PUSH
 1491 09e4 50F8045B 		LDR R5,[R0],#4 
 1492 09e8 14E5     		_NEXT 
 1493              	
 1494              	//    doCON	( -- a ) 
 1495              	// 	Run time routine for CONSTANT.
 1496              	
 1497              	// 	.word	_DOVAR
 1498              	// _DOCON	.byte  COMPO+5
 1499              	// 	.ascii "doCON"
ARM GAS  stm32eforth-fl.s 			page 30


 1500              	// 	.p2align 2 	
 1501              	DOCON:
 1502 09ea 41F8045D 		_PUSH
 1503 09ee 50F8045B 		LDR R5,[R0],#4
 1504              	
 1505              	/***********************
 1506              	  system variables 
 1507              	***********************/
 1508              	
 1509              	 // SEED ( -- a)
 1510              	 // return PRNG seed address 
 1511              	
 1512 09f2 C8090000 		.word _DNEGA
 1513 09f6 04       	_SEED: .byte 4
 1514 09f7 53454544 		.ascii "SEED"
 1515 09fb 00       		.p2align 2
 1516              	SEED:
 1517 09fc 41F8045D 		_PUSH 
 1518 0a00 03F10405 		ADD R5,R3,#SEED_OFS
 1519 0a04 06E5     		_NEXT 	
 1520              	
 1521              	//  MSEC ( -- a)
 1522              	// return address of milliseconds counter
 1523 0a06 F6090000 	  .word _SEED 
 1524 0a0a 04       	_MSEC: .byte 4
 1525 0a0b 4D534543 	  .ascii "MSEC"
 1526 0a0f 00       	  .p2align 2 
 1527              	MSEC:
 1528 0a10 41F8045D 	  _PUSH
 1529 0a14 03F10805 	  ADD R5,R3,#TICKS_OFS
 1530 0a18 FCE4     	  _NEXT 
 1531              	
 1532              	// TIMER ( -- a )
 1533              	// count down timer 
 1534 0a1a 0A0A0000 	  .word _MSEC
 1535 0a1e 05       	_TIMER:  .byte 5
 1536 0a1f 54494D45 	  .ascii "TIMER"
 1536      52
 1537              	  .p2align 2 
 1538              	TIMER:
 1539 0a24 41F8045D 	  _PUSH 
 1540 0a28 03F10C05 	  ADD R5,R3,#TIMER_OFS
 1541 0a2c F2E4     	  _NEXT
 1542              	
 1543              	// >RAM ( -- a )
 1544              	// compilation target 
 1545              	// -1 compile to RAM, 0 compile to FLASH 
 1546 0a2e 1E0A0000 		.word _TIMER
 1547 0a32 04       	_TORAM: .byte 4 
 1548 0a33 3E52414D 		.ascii ">RAM" 
 1549 0a37 00       		.p2align 2 
 1550              	TORAM:
 1551 0a38 41F8045D 		_PUSH 
 1552 0a3c 03F11005 		ADD R5,R3,#TORAM_OFS
 1553 0a40 E8E4     		_NEXT 
 1554              	
 1555              	//    'BOOT	 ( -- a )
ARM GAS  stm32eforth-fl.s 			page 31


 1556              	// 	Application.
 1557              	
 1558 0a42 320A0000 		.word	_TORAM
 1559 0a46 05       	_TBOOT:	.byte   5
 1560 0a47 27424F4F 		.ascii "'BOOT"
 1560      54
 1561              		.p2align 2 	
 1562              	TBOOT:
 1563 0a4c 41F8045D 		_PUSH
 1564 0a50 03F11805 		ADD	R5,R3,#BOOT_OFS 
 1565 0a54 DEE4     		_NEXT
 1566              		
 1567              	//    BASE	( -- a )
 1568              	// 	Storage of the radix base for numeric I/O.
 1569              	
 1570 0a56 460A0000 		.word	_TBOOT
 1571 0a5a 04       	_BASE:	.byte   4
 1572 0a5b 42415345 		.ascii "BASE"
 1573 0a5f 00       		.p2align 2 	
 1574              	BASE:
 1575 0a60 41F8045D 		_PUSH
 1576 0a64 03F11C05 		ADD	R5,R3,#BASE_OFS
 1577 0a68 D4E4     		_NEXT
 1578              	
 1579              	//    tmp	 ( -- a )
 1580              	// 	A temporary storage location used in parse and find.
 1581              	
 1582              	// 	.word	_BASE
 1583              	// _TEMP	.byte   COMPO+3
 1584              	// 	.ascii "tmp"
 1585              	// 	.p2align 2 	
 1586              	TEMP:
 1587 0a6a 41F8045D 		_PUSH
 1588 0a6e 03F12005 		ADD	R5,R3,#TMP_OFS
 1589 0a72 CFE4     		_NEXT
 1590              	
 1591              	//    SPAN	( -- a )
 1592              	// 	Hold character count received by EXPECT.
 1593              	
 1594 0a74 5A0A0000 		.word	_BASE
 1595 0a78 04       	_SPAN:	.byte   4
 1596 0a79 5350414E 		.ascii "SPAN"
 1597 0a7d 0000BF   		.p2align 2 	
 1598              	SPAN:
 1599 0a80 41F8045D 		_PUSH
 1600 0a84 03F12405 		ADD	R5,R3,#SPAN_OFS
 1601 0a88 C4E4     		_NEXT
 1602              	
 1603              	//    >IN	 ( -- a )
 1604              	// 	Hold the character pointer while parsing input stream.
 1605              	
 1606 0a8a 780A0000 		.word	_SPAN
 1607 0a8e 03       	_INN:	.byte   3
 1608 0a8f 3E494E   		.ascii ">IN"
 1609 0a92 00BF     		.p2align 2 	
 1610              	INN:
 1611 0a94 41F8045D 		_PUSH
ARM GAS  stm32eforth-fl.s 			page 32


 1612 0a98 03F12805 		ADD	R5,R3,#TOIN_OFS
 1613 0a9c BAE4     		_NEXT
 1614              	
 1615              	//    #TIB	( -- a )
 1616              	// 	Hold the current count and address of the terminal input buffer.
 1617              	
 1618 0a9e 8E0A0000 		.word	_INN
 1619 0aa2 04       	_NTIB:	.byte   4
 1620 0aa3 23544942 		.ascii "#TIB"
 1621 0aa7 00       		.p2align 2 	
 1622              	NTIB:
 1623 0aa8 41F8045D 		_PUSH
 1624 0aac 03F12C05 		ADD	R5,R3,#NTIB_OFS
 1625 0ab0 B0E4     		_NEXT
 1626              	
 1627              	//    'EVAL	( -- a )
 1628              	// 	Execution vector of EVAL.
 1629              	
 1630 0ab2 A20A0000 		.word	_NTIB
 1631 0ab6 05       	_TEVAL:	.byte   5
 1632 0ab7 27455641 		.ascii "'EVAL"
 1632      4C
 1633              		.p2align 2 	
 1634              	TEVAL:
 1635 0abc 41F8045D 		_PUSH
 1636 0ac0 03F13405 		ADD	R5,R3,#EVAL_OFS
 1637 0ac4 A6E4     		_NEXT
 1638              	
 1639              	//    HLD	 ( -- a )
 1640              	// 	Hold a pointer in building a numeric output string.
 1641              	
 1642 0ac6 B60A0000 		.word	_TEVAL
 1643 0aca 03       	_HLD:	.byte   3
 1644 0acb 484C44   		.ascii "HLD"
 1645 0ace 00BF     		.p2align 2 	
 1646              	HLD:
 1647 0ad0 41F8045D 		_PUSH
 1648 0ad4 03F13805 		ADD	R5,R3,#HLD_OFS
 1649 0ad8 9CE4     		_NEXT
 1650              	
 1651              	//    CONTEXT	( -- a )
 1652              	// 	A area to specify vocabulary search order.
 1653              	
 1654 0ada CA0A0000 		.word	_HLD
 1655 0ade 07       	_CNTXT:	.byte   7
 1656 0adf 434F4E54 		.ascii "CONTEXT"
 1656      455854
 1657 0ae6 00BF     		.p2align 2 	
 1658              	CNTXT:
 1659              	CRRNT:
 1660 0ae8 41F8045D 		_PUSH
 1661 0aec 03F13C05 		ADD	R5,R3,#CTXT_OFS
 1662 0af0 90E4     		_NEXT
 1663              	
 1664              	//    CP	( -- a )
 1665              	// 	Point to top name in RAM vocabulary.
 1666              	
ARM GAS  stm32eforth-fl.s 			page 33


 1667 0af2 DE0A0000 		.word	_CNTXT
 1668 0af6 02       	_CP:	.byte   2
 1669 0af7 4350     		.ascii "CP"
 1670 0af9 0000BF   		.p2align 2 	
 1671              	CPP:
 1672 0afc 41F8045D 		_PUSH
 1673 0b00 03F14405 		ADD	R5,R3,#RAM_CTOP_OFS
 1674 0b04 86E4     		_NEXT
 1675              	
 1676              	//   FCP ( -- a )
 1677              	//  Point ot top of Forth system dictionary
 1678 0b06 F60A0000 		.word _CP
 1679 0b0a 03       	_FCP: .byte 3            
 1680 0b0b 464350   		.ascii "FCP"
 1681 0b0e 00BF     		.p2align 2 
 1682              	FCP: 
 1683 0b10 41F8045D 		_PUSH 
 1684 0b14 03F14005 		ADD R5,R3,#FORTH_CTOP_OFS 
 1685 0b18 7CE4     		_NEXT 
 1686              	
 1687              	//    LAST	( -- a )
 1688              	// 	Point to the last name in the name dictionary.
 1689              	
 1690 0b1a 0A0B0000 		.word	_FCP
 1691 0b1e 04       	_LAST:	.byte   4
 1692 0b1f 4C415354 		.ascii "LAST"
 1693 0b23 00       		.p2align 2 	
 1694              	LAST:
 1695 0b24 41F8045D 		_PUSH
 1696 0b28 03F14805 		ADD	R5,R3,#LASTN_OFS
 1697 0b2c 72E4     		_NEXT
 1698              	
 1699              	/***********************
 1700              		system constants 
 1701              	***********************/
 1702              	
 1703              	//	USER_BEGIN ( -- a )
 1704              	//  where user area begin in RAM
 1705 0b2e 1E0B0000 		.word _LAST
 1706 0b32 0A       	_USER_BGN: .byte 10
 1707 0b33 55534552 		.ascii "USER_BEGIN"
 1707      5F424547 
 1707      494E
 1708 0b3d 0000BF   		.p2align 2
 1709              	USER_BEGIN:
 1710 0b40 41F8045D 		_PUSH 
 1711 0b44 004D     		ldr r5,USR_BGN_ADR 
 1712 0b46 65E4     		_NEXT 
 1713              	USR_BGN_ADR:
 1714 0b48 84280000 	.word CTOP 
 1715              	
 1716              	//  USER_END ( -- a )
 1717              	//  where user area end in RAM 
 1718 0b4c 320B0000 		.word _USER_BGN
 1719 0b50 08       	_USER_END: .byte 8 
 1720 0b51 55534552 		.ascii "USER_END" 
 1720      5F454E44 
ARM GAS  stm32eforth-fl.s 			page 34


 1721 0b59 0000BF   		.p2align 2 
 1722              	USER_END:
 1723 0b5c 41F8045D 		_PUSH 
 1724 0b60 004D     		ldr r5,USER_END_ADR 
 1725 0b62 57E4     		_NEXT 
 1726              	USER_END_ADR:
 1727 0b64 004E0020 		.word DEND 
 1728              	
 1729              	//  IMAGE0 ( -- a )
 1730              	//  where user image is saved in FLASH
 1731 0b68 500B0000 		.word _USER_END
 1732 0b6c 06       	_IMAGE0: .byte 6
 1733 0b6d 494D4147 		.ascii "IMAGE0"
 1733      4530
 1734 0b73 00       		.p2align 2 
 1735              	IMAGE0:
 1736 0b74 41F8045D 		_PUSH
 1737 0b78 004D     		ldr r5,USR_IMG_ADR   
 1738 0b7a 4BE4     		_NEXT 
 1739              	USR_IMG_ADR:
 1740 0b7c 00000000 		.word USER_SPACE 
 1741              	
 1742              	// IMG_SIGN ( -- a )
 1743              	// image signature 
 1744 0b80 6C0B0000 		.word _IMAGE0 
 1745 0b84 08       	_IMG_SIGN: .byte 8
 1746 0b85 494D475F 		.ascii "IMG_SIGN"
 1746      5349474E 
 1747 0b8d 0000BF   		.p2align 2
 1748              	IMG_SIGN: 
 1749 0b90 41F8045D 		_PUSH 
 1750 0b94 03F11405 		ADD r5,r3,#IMG_SIGN_OFS 
 1751 0b98 2D68     		LDR R5,[R5]
 1752 0b9a 3BE4     		_NEXT 
 1753              	
 1754              	/* *********************
 1755              	  Common functions
 1756              	***********************/
 1757              	
 1758              	//    WITHIN	( u ul uh -- t )
 1759              	// 	Return true if u is within the range of ul and uh.
 1760              	
 1761 0b9c 840B0000 		.word	_IMG_SIGN
 1762 0ba0 06       	_WITHI:	.byte   6
 1763 0ba1 57495448 		.ascii "WITHIN"
 1763      494E
 1764 0ba7 00       		.p2align 2 	
 1765              	WITHI:
 1766 0ba8 FFF730FC 		_NEST
 1767 0bac 7D060000 		_ADR	OVER
 1768 0bb0 31070000 		_ADR	SUBB
 1769 0bb4 21060000 		_ADR	TOR
 1770 0bb8 31070000 		_ADR	SUBB
 1771 0bbc FD050000 		_ADR	RFROM
 1772 0bc0 01090000 		_ADR	ULESS
 1773 0bc4 1D040000 		_UNNEST
 1774              	
ARM GAS  stm32eforth-fl.s 			page 35


 1775              	//  Divide
 1776              	
 1777              	//    UM/MOD	( udl udh u -- ur uq )
 1778              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1779              	
 1780 0bc8 A00B0000 		.word	_WITHI
 1781 0bcc 06       	_UMMOD:	.byte   6
 1782 0bcd 554D2F4D 		.ascii "UM/MOD"
 1782      4F44
 1783 0bd3 00       		.p2align 2 	
 1784              	UMMOD:
 1785 0bd4 4FF00107 		MOV	R7,#1
 1786 0bd8 51F8044B 		LDR	R4,[R1],#4
 1787 0bdc 0E68     		LDR	R6,[R1]
 1788              	UMMOD0:
 1789 0bde B619     		ADDS	R6,R6,R6
 1790 0be0 6441     		ADCS	R4,R4,R4
 1791 0be2 04D3     		BCC	UMMOD1
 1792 0be4 A4EB0504 		SUB	R4,R4,R5
 1793 0be8 06F10106 		ADD	R6,R6,#1
 1794 0bec 04E0     		B UMMOD2
 1795              	UMMOD1:
 1796 0bee 641B     		SUBS	R4,R4,R5 
 1797 0bf0 28BF     		IT CS 
 1798 0bf2 0136     		ADDCS	R6,R6,#1
 1799 0bf4 00D2     		BCS	UMMOD2
 1800 0bf6 2C44     		ADD	R4,R4,R5
 1801              	UMMOD2:
 1802 0bf8 FF19     		ADDS	R7,R7,R7
 1803 0bfa F0D3     		BCC	UMMOD0
 1804 0bfc 3546     		MOV	R5,R6
 1805 0bfe 0C60     		STR	R4,[R1]
 1806 0c00 08E4     		_NEXT
 1807              	
 1808              	//    M/MOD	( d n -- r q )
 1809              	// 	Signed floored divide of double by single. Return mod and quotient.
 1810              	
 1811 0c02 CC0B0000 		.word	_UMMOD
 1812 0c06 05       	_MSMOD:	.byte  5
 1813 0c07 4D2F4D4F 		.ascii "M/MOD"
 1813      44
 1814              		.p2align 2 	
 1815              	MSMOD:	
 1816 0c0c FFF7FEFB 		_NEST
 1817 0c10 59060000 		_ADR	DUPP
 1818 0c14 8D060000 		_ADR	ZLESS
 1819 0c18 59060000 		_ADR	DUPP
 1820 0c1c 21060000 		_ADR	TOR
 1821 0c20 91050000 		_QBRAN MMOD1
 1821      380C0000 
 1822 0c28 B1080000 		_ADR	NEGAT
 1823 0c2c 21060000 		_ADR	TOR
 1824 0c30 D1090000 		_ADR	DNEGA
 1825 0c34 FD050000 		_ADR	RFROM
 1826              	MMOD1:
 1827 0c38 21060000 		_ADR	TOR
 1828 0c3c 59060000 		_ADR	DUPP
ARM GAS  stm32eforth-fl.s 			page 36


 1829 0c40 8D060000 		_ADR	ZLESS
 1830 0c44 91050000 		_QBRAN MMOD2
 1830      540C0000 
 1831 0c4c 11060000 		_ADR	RAT
 1832 0c50 21070000 		_ADR	PLUS
 1833              	MMOD2:
 1834 0c54 FD050000 		_ADR	RFROM
 1835 0c58 D50B0000 		_ADR	UMMOD
 1836 0c5c FD050000 		_ADR	RFROM
 1837 0c60 91050000 		_QBRAN	MMOD3
 1837      740C0000 
 1838 0c68 69060000 		_ADR	SWAP
 1839 0c6c B1080000 		_ADR	NEGAT
 1840 0c70 69060000 		_ADR	SWAP
 1841              	MMOD3:   
 1842 0c74 1D040000 		_UNNEST
 1843              	
 1844              	//    /MOD	( n n -- r q )
 1845              	// 	Signed divide. Return mod and quotient.
 1846              	
 1847 0c78 060C0000 		.word	_MSMOD
 1848 0c7c 04       	_SLMOD:	.byte   4
 1849 0c7d 2F4D4F44 		.ascii "/MOD"
 1850 0c81 0000BF   		.p2align 2 	
 1851              	SLMOD:
 1852 0c84 FFF7C2FB 		_NEST
 1853 0c88 7D060000 		_ADR	OVER
 1854 0c8c 8D060000 		_ADR	ZLESS
 1855 0c90 69060000 		_ADR	SWAP
 1856 0c94 0D0C0000 		_ADR	MSMOD
 1857 0c98 1D040000 		_UNNEST
 1858              	
 1859              	//    MOD	 ( n n -- r )
 1860              	// 	Signed divide. Return mod only.
 1861              	
 1862 0c9c 7C0C0000 		.word	_SLMOD
 1863 0ca0 03       	_MODD:	.byte  3
 1864 0ca1 4D4F44   		.ascii "MOD"
 1865              		.p2align 2 	
 1866              	MODD:
 1867 0ca4 FFF7B2FB 		_NEST
 1868 0ca8 850C0000 		_ADR	SLMOD
 1869 0cac 49060000 		_ADR	DROP
 1870 0cb0 1D040000 		_UNNEST
 1871              	
 1872              	//    /	   ( n n -- q )
 1873              	// 	Signed divide. Return quotient only.
 1874              	
 1875 0cb4 A00C0000 		.word	_MODD
 1876 0cb8 01       	_SLASH:	.byte  1
 1877 0cb9 2F       		.ascii "/"
 1878 0cba 00BF     		.p2align 2 	
 1879              	SLASH:
 1880 0cbc FFF7A6FB 		_NEST
 1881 0cc0 850C0000 		_ADR	SLMOD
 1882 0cc4 69060000 		_ADR	SWAP
 1883 0cc8 49060000 		_ADR	DROP
ARM GAS  stm32eforth-fl.s 			page 37


 1884 0ccc 1D040000 		_UNNEST
 1885              	
 1886              	//    */MOD	( n1 n2 n3 -- r q )
 1887              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1888              	
 1889 0cd0 B80C0000 		.word	_SLASH
 1890 0cd4 05       	_SSMOD:	.byte  5
 1891 0cd5 2A2F4D4F 		.ascii "*/MOD"
 1891      44
 1892 0cda 00BF     		.p2align 2 	
 1893              	SSMOD:
 1894 0cdc FFF796FB 		_NEST
 1895 0ce0 21060000 		_ADR	TOR
 1896 0ce4 69070000 		_ADR	MSTAR
 1897 0ce8 FD050000 		_ADR	RFROM
 1898 0cec 0D0C0000 		_ADR	MSMOD
 1899 0cf0 1D040000 		_UNNEST
 1900              	
 1901              	//    */	  ( n1 n2 n3 -- q )
 1902              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1903              	
 1904 0cf4 D40C0000 		.word	_SSMOD
 1905 0cf8 02       	_STASL:	.byte  2
 1906 0cf9 2A2F     		.ascii "*/"
 1907 0cfb 00       		.p2align 2 	
 1908              	STASL:
 1909 0cfc FFF786FB 		_NEST
 1910 0d00 DD0C0000 		_ADR	SSMOD
 1911 0d04 69060000 		_ADR	SWAP
 1912 0d08 49060000 		_ADR	DROP
 1913 0d0c 1D040000 		_UNNEST
 1914              	
 1915              	// **************************************************************************
 1916              	//  Miscellaneous
 1917              	
 1918              	//    ALIGNED	( b -- a )
 1919              	// 	Align address to the cell boundary.
 1920              	
 1921 0d10 F80C0000 		.word	_STASL
 1922 0d14 07       	_ALGND:	.byte   7
 1923 0d15 414C4947 		.ascii "ALIGNED"
 1923      4E4544
 1924              		.p2align 2 	
 1925              	ALGND:
 1926 0d1c 05F10305 		ADD	R5,R5,#3
 1927 0d20 6FF00304 		MVN	R4,#3
 1928 0d24 05EA0405 		AND	R5,R5,R4
 1929 0d28 FFF774BB 		_NEXT
 1930              	
 1931              	//    >CHAR	( c -- c )
 1932              	// 	Filter non-printing characters.
 1933              	
 1934 0d2c 140D0000 		.word	_ALGND
 1935 0d30 05       	_TCHAR:	.byte  5
 1936 0d31 3E434841 		.ascii ">CHAR"
 1936      52
 1937 0d36 00BF     		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 38


 1938              	TCHAR:
 1939 0d38 FFF768FB 		_NEST
 1940 0d3c 55050000 		_DOLIT  0x7F
 1940      7F000000 
 1941 0d44 A1060000 		_ADR	ANDD
 1942 0d48 59060000 		_ADR	DUPP	// mask msb
 1943 0d4c DD070000 		_ADR	BLANK
 1944 0d50 55050000 		_DOLIT 	127
 1944      7F000000 
 1945 0d58 A90B0000 		_ADR	WITHI	// check for printable
 1946 0d5c 9D080000 		_ADR	INVER
 1947 0d60 91050000 		_QBRAN	TCHA1
 1947      740D0000 
 1948 0d68 49060000 		_ADR	DROP
 1949 0d6c 55050000 		_DOLIT 	'_'	// replace non-printables
 1949      5F000000 
 1950              	TCHA1:
 1951 0d74 1D040000 		  _UNNEST
 1952              	
 1953              	//    DEPTH	( -- n )
 1954              	// 	Return the depth of the data stack.
 1955              	
 1956 0d78 300D0000 		.word	_TCHAR
 1957 0d7c 05       	_DEPTH:	.byte  5
 1958 0d7d 44455054 		.ascii "DEPTH"
 1958      48
 1959 0d82 00BF     		.p2align 2 	
 1960              	DEPTH:
 1961 0d84 41F8045D 		_PUSH
 1962 0d88 44F68465 		MOVW	R5,#SPP&0xffff+4 
 1963 0d8c C2F20005 	 	MOVT	R5,#SPP>>16 
 1964 0d90 A5EB0105 		SUB	R5,R5,R1
 1965 0d94 4FEAA505 		ASR	R5,R5,#2
 1966 0d98 A5F10105 		SUB	R5,R5,#1
 1967 0d9c FFF73ABB 		_NEXT
 1968              	
 1969              	//    PICK	( ... +n -- ... w )
 1970              	// 	Copy the nth stack item to tos.
 1971              	
 1972 0da0 7C0D0000 		.word	_DEPTH
 1973 0da4 04       	_PICK:	.byte  4
 1974 0da5 5049434B 		.ascii "PICK"
 1975 0da9 0000BF   		.p2align 2 	
 1976              	PICK:
 1977 0dac FFF72EFB 		_NEST
 1978 0db0 7D070000 		_ADR	ONEP
 1979 0db4 F1070000 		_ADR	CELLS
 1980 0db8 35060000 		_ADR	SPAT
 1981 0dbc 21070000 		_ADR	PLUS
 1982 0dc0 D1050000 		_ADR	AT
 1983 0dc4 1D040000 		_UNNEST
 1984              	
 1985              	// **************************************************************************
 1986              	//  Memory access
 1987              	
 1988              	//    HERE	( -- a )
 1989              	// 	Return the top of the code dictionary.
ARM GAS  stm32eforth-fl.s 			page 39


 1990              	
 1991 0dc8 A40D0000 		.word	_PICK
 1992 0dcc 04       	_HERE:	.byte  4
 1993 0dcd 48455245 		.ascii "HERE"
 1994 0dd1 0000BF   		.p2align 2 	
 1995              	HERE:
 1996 0dd4 FFF71AFB 		_NEST
 1997 0dd8 FD0A0000 		_ADR	CPP
 1998 0ddc D1050000 		_ADR	AT
 1999 0de0 1D040000 		_UNNEST
 2000              		
 2001              	//    PAD	 ( -- a )
 2002              	// 	Return the address of a temporary buffer.
 2003              	
 2004 0de4 CC0D0000 		.word	_HERE
 2005 0de8 03       	_PAD:	.byte  3
 2006 0de9 504144   		.ascii "PAD"
 2007              		.p2align 2 	
 2008              	PAD:
 2009 0dec FFF70EFB 		_NEST
 2010 0df0 D50D0000 		_ADR	HERE
 2011 0df4 05F15005 		ADD	R5,R5,#80
 2012 0df8 1D040000 		_UNNEST
 2013              	
 2014              	//    TIB	 ( -- a )
 2015              	// 	Return the address of the terminal input buffer.
 2016              	
 2017 0dfc E80D0000 		.word	_PAD
 2018 0e00 03       	_TIB:	.byte  3
 2019 0e01 544942   		.ascii "TIB"
 2020              		.p2align 2 	
 2021              	TIB:
 2022 0e04 41F8045D 		_PUSH
 2023 0e08 1D6B     		ldr r5,[r3,#TIB_OFS]
 2024 0e0a FFF703BB 		_NEXT
 2025              	
 2026              	//    @EXECUTE	( a -- )
 2027              	// 	Execute vector stored in address a.
 2028              	
 2029 0e0e 000E0000 		.word	_TIB
 2030 0e12 08       	_ATEXE:	.byte   8
 2031 0e13 40455845 		.ascii "@EXECUTE"
 2031      43555445 
 2032 0e1b 00       		.p2align 2 	
 2033              	ATEXE: 
 2034 0e1c 2C00     		MOVS	R4,R5
 2035 0e1e 51F8045B 		_POP
 2036 0e22 2468     		LDR	R4,[R4]
 2037 0e24 44F00104 		ORR	R4,R4,#1
 2038 0e28 18BF     	    IT NE 
 2039 0e2a 2047     		BXNE	R4
 2040 0e2c FFF7F2BA 		_NEXT
 2041              	
 2042              	//    CMOVE	( b1 b2 u -- )
 2043              	// 	Copy u bytes from b1 to b2.
 2044              	
 2045 0e30 120E0000 		.word	_ATEXE
ARM GAS  stm32eforth-fl.s 			page 40


 2046 0e34 05       	_CMOVE:	.byte   5
 2047 0e35 434D4F56 		.ascii "CMOVE"
 2047      45
 2048 0e3a 00BF     		.p2align 2 	
 2049              	CMOVE:
 2050 0e3c 51F8046B 		LDR	R6,[R1],#4
 2051 0e40 51F8047B 		LDR	R7,[R1],#4
 2052 0e44 03E0     		B CMOV1
 2053              	CMOV0:
 2054 0e46 17F8014B 		LDRB	R4,[R7],#1
 2055 0e4a 06F8014B 		STRB	R4,[R6],#1
 2056              	CMOV1:
 2057 0e4e 2D00     		MOVS	R5,R5
 2058 0e50 02D0     		BEQ	CMOV2
 2059 0e52 A5F10105 		SUB	R5,R5,#1
 2060 0e56 F6E7     		B CMOV0
 2061              	CMOV2:
 2062 0e58 51F8045B 		_POP
 2063 0e5c FFF7DABA 		_NEXT
 2064              	
 2065              	//    MOVE	( a1 a2 u -- )
 2066              	// 	Copy u words from a1 to a2.
 2067              	
 2068 0e60 340E0000 		.word	_CMOVE
 2069 0e64 04       	_MOVE:	.byte   4
 2070 0e65 4D4F5645 		.ascii "MOVE"
 2071 0e69 0000BF   		.p2align 2 	
 2072              	MOVE:
 2073 0e6c 25F00305 		AND	R5,R5,#-4
 2074 0e70 51F8046B 		LDR	R6,[R1],#4
 2075 0e74 51F8047B 		LDR	R7,[R1],#4
 2076 0e78 03E0     		B MOVE1
 2077              	MOVE0:
 2078 0e7a 57F8044B 		LDR	R4,[R7],#4
 2079 0e7e 46F8044B 		STR	R4,[R6],#4
 2080              	MOVE1:
 2081 0e82 2D00     		MOVS	R5,R5
 2082 0e84 02D0     		BEQ	MOVE2
 2083 0e86 A5F10405 		SUB	R5,R5,#4
 2084 0e8a F6E7     		B MOVE0
 2085              	MOVE2:
 2086 0e8c 51F8045B 		_POP
 2087 0e90 FFF7C0BA 		_NEXT
 2088              	
 2089              	//    FILL	( b u c -- )
 2090              	// 	Fill u bytes of character c to area beginning at b.
 2091              	
 2092 0e94 640E0000 		.word	_MOVE
 2093 0e98 04       	_FILL:	.byte   4
 2094 0e99 46494C4C 		.ascii "FILL"
 2095 0e9d 0000BF   		.p2align 2 	
 2096              	FILL:
 2097 0ea0 51F8046B 		LDR	R6,[R1],#4
 2098 0ea4 51F8047B 		LDR	R7,[R1],#4
 2099              	FILL0:
 2100 0ea8 00E0     		B FILL1
 2101 0eaa 2D46     		MOV	R5,R5
ARM GAS  stm32eforth-fl.s 			page 41


 2102              	FILL1:
 2103 0eac 07F8015B 		STRB	R5,[R7],#1
 2104 0eb0 3600     		MOVS	R6,R6
 2105 0eb2 02D0     		BEQ	FILL2
 2106 0eb4 A6F10106 		SUB	R6,R6,#1
 2107 0eb8 F6E7     		B FILL0
 2108              	FILL2:
 2109 0eba 51F8045B 		_POP
 2110 0ebe FFF7A9BA 		_NEXT
 2111              	
 2112              	//    PACK$	( b u a -- a )
 2113              	// 	Build a counted word with u characters from b. Null fill.
 2114              	
 2115 0ec2 980E0000 		.word	_FILL
 2116 0ec6 05       	_PACKS:	.byte  5
 2117 0ec7 5041434B 		.ascii "PACK$$"
 2117      2424
 2118 0ecd 0000BF   		.p2align 2 	
 2119              	PACKS:
 2120 0ed0 FFF79CFA 		_NEST
 2121 0ed4 1D0D0000 		_ADR	ALGND
 2122 0ed8 59060000 		_ADR	DUPP
 2123 0edc 21060000 		_ADR	TOR			// strings only on cell boundary
 2124 0ee0 7D060000 		_ADR	OVER
 2125 0ee4 21070000 		_ADR	PLUS
 2126 0ee8 7D070000 		_ADR	ONEP
 2127 0eec 55050000 		_DOLIT 	0xFFFFFFFC
 2127      FCFFFFFF 
 2128 0ef4 A1060000 		_ADR	ANDD			// count mod cell
 2129 0ef8 55050000 		_DOLIT 	0
 2129      00000000 
 2130 0f00 69060000 		_ADR	SWAP
 2131 0f04 BD050000 		_ADR	STORE			// null fill cell
 2132 0f08 11060000 		_ADR	RAT
 2133 0f0c 6D080000 		_ADR	DDUP
 2134 0f10 DD050000 		_ADR	CSTOR
 2135 0f14 7D070000 		_ADR	ONEP			// save count
 2136 0f18 69060000 		_ADR	SWAP
 2137 0f1c 3D0E0000 		_ADR	CMOVE
 2138 0f20 FD050000 		_ADR	RFROM
 2139 0f24 1D040000 		_UNNEST   			// move string
 2140              	
 2141              	// **************************************************************************
 2142              	//  Numeric output, single precision
 2143              	
 2144              	//    DIGIT	( u -- c )
 2145              	// 	Convert digit u to a character.
 2146              	
 2147 0f28 C60E0000 		.word	_PACKS
 2148 0f2c 05       	_DIGIT:	.byte  5
 2149 0f2d 44494749 		.ascii "DIGIT"
 2149      54
 2150 0f32 00BF     		.p2align 2 	
 2151              	DIGIT:
 2152 0f34 FFF76AFA 		_NEST
 2153 0f38 55050000 		_DOLIT 9
 2153      09000000 
ARM GAS  stm32eforth-fl.s 			page 42


 2154 0f40 7D060000 		_ADR	OVER
 2155 0f44 19090000 		_ADR	LESS
 2156 0f48 55050000 		_DOLIT	7
 2156      07000000 
 2157 0f50 A1060000 		_ADR	ANDD
 2158 0f54 21070000 		_ADR	PLUS
 2159 0f58 55050000 		_DOLIT	'0'
 2159      30000000 
 2160 0f60 21070000 		_ADR	PLUS 
 2161 0f64 1D040000 		_UNNEST
 2162              	
 2163              	//    EXTRACT	( n base -- n c )
 2164              	// 	Extract the least significant digit from n.
 2165              	
 2166 0f68 2C0F0000 		.word	_DIGIT
 2167 0f6c 07       	_EXTRC:	.byte  7
 2168 0f6d 45585452 		.ascii "EXTRACT"
 2168      414354
 2169              		.p2align 2 	
 2170              	EXTRC:
 2171 0f74 FFF74AFA 		_NEST
 2172 0f78 55050000 		_DOLIT 0
 2172      00000000 
 2173 0f80 69060000 		_ADR	SWAP
 2174 0f84 D50B0000 		_ADR	UMMOD
 2175 0f88 69060000 		_ADR	SWAP
 2176 0f8c 350F0000 		_ADR	DIGIT
 2177 0f90 1D040000 		_UNNEST
 2178              	
 2179              	//    <#	  ( -- )
 2180              	// 	Initiate the numeric output process.
 2181              	
 2182 0f94 6C0F0000 		.word	_EXTRC
 2183 0f98 02       	_BDIGS:	.byte  2
 2184 0f99 3C23     		.ascii "<#"
 2185 0f9b 00       		.p2align 2 	
 2186              	BDIGS:
 2187 0f9c FFF736FA 		_NEST
 2188 0fa0 ED0D0000 		_ADR	PAD
 2189 0fa4 D10A0000 		_ADR	HLD
 2190 0fa8 BD050000 		_ADR	STORE
 2191 0fac 1D040000 		_UNNEST
 2192              	
 2193              	//    HOLD	( c -- )
 2194              	// 	Insert a character into the numeric output string.
 2195              	
 2196 0fb0 980F0000 		.word	_BDIGS
 2197 0fb4 04       	_HOLD:	.byte  4
 2198 0fb5 484F4C44 		.ascii "HOLD"
 2199 0fb9 0000BF   		.p2align 2 	
 2200              	HOLD:
 2201 0fbc FFF726FA 		_NEST
 2202 0fc0 D10A0000 		_ADR	HLD
 2203 0fc4 D1050000 		_ADR	AT
 2204 0fc8 8D070000 		_ADR	ONEM
 2205 0fcc 59060000 		_ADR	DUPP
 2206 0fd0 D10A0000 		_ADR	HLD
ARM GAS  stm32eforth-fl.s 			page 43


 2207 0fd4 BD050000 		_ADR	STORE
 2208 0fd8 DD050000 		_ADR	CSTOR
 2209 0fdc 1D040000 		_UNNEST
 2210              	
 2211              	//    #	   ( u -- u )
 2212              	// 	Extract one digit from u and append the digit to output string.
 2213              	
 2214 0fe0 B40F0000 		.word	_HOLD
 2215 0fe4 01       	_DIG:	.byte  1
 2216 0fe5 23       		.ascii "#"
 2217 0fe6 00BF     		.p2align 2 	
 2218              	DIG:
 2219 0fe8 FFF710FA 		_NEST
 2220 0fec 610A0000 		_ADR	BASE
 2221 0ff0 D1050000 		_ADR	AT
 2222 0ff4 750F0000 		_ADR	EXTRC
 2223 0ff8 BD0F0000 		_ADR	HOLD
 2224 0ffc 1D040000 		_UNNEST
 2225              	
 2226              	//    #S	  ( u -- 0 )
 2227              	// 	Convert u until all digits are added to the output string.
 2228              	
 2229 1000 E40F0000 		.word	_DIG
 2230 1004 02       	_DIGS:	.byte  2
 2231 1005 2353     		.ascii "#S"
 2232 1007 00       		.p2align 2 	
 2233              	DIGS:
 2234 1008 FFF700FA 		_NEST
 2235              	DIGS1:
 2236 100c E90F0000 	    _ADR	DIG
 2237 1010 59060000 		_ADR	DUPP
 2238 1014 91050000 		_ADR	QBRAN
 2239 1018 1E100000 		.word	DIGS2
 2240 101c F6E7     		B	DIGS1
 2241              	DIGS2:
 2242 101e 1D040000 		  _UNNEST
 2243              	
 2244              	//    SIGN	( n -- )
 2245              	// 	Add a minus sign to the numeric output string.
 2246              	
 2247 1022 04100000 		.word	_DIGS
 2248 1026 04       	_SIGN:	.byte  4
 2249 1027 5349474E 		.ascii "SIGN"
 2250 102b 00       		.p2align 2 	
 2251              	SIGN:
 2252 102c FFF7EEF9 		_NEST
 2253 1030 8D060000 		_ADR	ZLESS
 2254 1034 91050000 		_QBRAN	SIGN1
 2254      48100000 
 2255 103c 55050000 		_DOLIT '-'
 2255      2D000000 
 2256 1044 BD0F0000 		_ADR	HOLD
 2257              	SIGN1:
 2258 1048 1D040000 		  _UNNEST
 2259              	
 2260              	//    #>	  ( w -- b u )
 2261              	// 	Prepare the outputDCB to be TYPE'd.
ARM GAS  stm32eforth-fl.s 			page 44


 2262              	
 2263 104c 26100000 		.word	_SIGN
 2264 1050 02       	_EDIGS:	.byte  2
 2265 1051 233E     		.ascii "#>"
 2266 1053 00       		.p2align 2 	
 2267              	EDIGS:
 2268 1054 FFF7DAF9 		_NEST
 2269 1058 49060000 		_ADR	DROP
 2270 105c D10A0000 		_ADR	HLD
 2271 1060 D1050000 		_ADR	AT
 2272 1064 ED0D0000 		_ADR	PAD
 2273 1068 7D060000 		_ADR	OVER
 2274 106c 31070000 		_ADR	SUBB
 2275 1070 1D040000 		_UNNEST
 2276              	
 2277              	//    str	 ( n -- b u )
 2278              	// 	Convert a signed integer to a numeric string.
 2279              	
 2280              	// 	.word	_EDIGS
 2281              	// _STRR	.byte  3
 2282              	// 	.ascii "str"
 2283              	// 	.p2align 2 	
 2284              	STRR:
 2285 1074 FFF7CAF9 		_NEST
 2286 1078 59060000 		_ADR	DUPP
 2287 107c 21060000 		_ADR	TOR
 2288 1080 C1080000 		_ADR	ABSS
 2289 1084 9D0F0000 		_ADR	BDIGS
 2290 1088 09100000 		_ADR	DIGS
 2291 108c FD050000 		_ADR	RFROM
 2292 1090 2D100000 		_ADR	SIGN
 2293 1094 55100000 		_ADR	EDIGS
 2294 1098 1D040000 		_UNNEST
 2295              	
 2296              	//    HEX	 ( -- )
 2297              	// 	Use radix 16 as base for numeric conversions.
 2298              	
 2299 109c 50100000 		.word	_EDIGS
 2300 10a0 03       	_HEX:	.byte  3
 2301 10a1 484558   		.ascii "HEX"
 2302              		.p2align 2 	
 2303              	HEX:
 2304 10a4 FFF7B2F9 		_NEST
 2305 10a8 55050000 		_DOLIT 16
 2305      10000000 
 2306 10b0 610A0000 		_ADR	BASE
 2307 10b4 BD050000 		_ADR	STORE
 2308 10b8 1D040000 		_UNNEST
 2309              	
 2310              	//    DECIMAL	( -- )
 2311              	// 	Use radix 10 as base for numeric conversions.
 2312              	
 2313 10bc A0100000 		.word	_HEX
 2314 10c0 07       	_DECIM:	.byte  7
 2315 10c1 44454349 		.ascii "DECIMAL"
 2315      4D414C
 2316              		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 45


 2317              	DECIM:
 2318 10c8 FFF7A0F9 		_NEST
 2319 10cc 55050000 		_DOLIT 10
 2319      0A000000 
 2320 10d4 610A0000 		_ADR	BASE
 2321 10d8 BD050000 		_ADR	STORE
 2322 10dc 1D040000 		_UNNEST
 2323              	
 2324              	// **************************************************************************
 2325              	//  Numeric input, single precision
 2326              	
 2327              	//    DIGIT?	( c base -- u t )
 2328              	// 	Convert a character to its numeric value. A flag indicates success.
 2329              	
 2330 10e0 C0100000 		.word	_DECIM
 2331 10e4 06       	_DIGTQ:	.byte  6
 2332 10e5 44494749 		.ascii "DIGIT?"
 2332      543F
 2333 10eb 00       		.p2align 2 	
 2334              	DIGTQ:
 2335 10ec FFF78EF9 		_NEST
 2336 10f0 21060000 		_ADR	TOR
 2337 10f4 55050000 		_DOLIT 	'0'
 2337      30000000 
 2338 10fc 31070000 		_ADR	SUBB
 2339 1100 55050000 		_DOLIT 9
 2339      09000000 
 2340 1108 7D060000 		_ADR	OVER
 2341 110c 19090000 		_ADR	LESS
 2342 1110 91050000 		_QBRAN	DGTQ1
 2342      38110000 
 2343 1118 55050000 		_DOLIT 7
 2343      07000000 
 2344 1120 31070000 		_ADR	SUBB
 2345 1124 59060000 		_ADR	DUPP
 2346 1128 55050000 		_DOLIT	10
 2346      0A000000 
 2347 1130 19090000 		_ADR	LESS
 2348 1134 B5060000 		_ADR	ORR
 2349              	DGTQ1:
 2350 1138 59060000 		_ADR	DUPP
 2351 113c FD050000 		_ADR	RFROM
 2352 1140 01090000 		_ADR	ULESS
 2353 1144 1D040000 		_UNNEST
 2354              	
 2355              	//    NUMBER?	( a -- n T | a F )
 2356              	// 	Convert a number word to integer. Push a flag on tos.
 2357              	
 2358 1148 E4100000 		.word	_DIGTQ
 2359 114c 07       	_NUMBQ:	.byte  7
 2360 114d 4E554D42 		.ascii "NUMBER?"
 2360      45523F
 2361              		.p2align 2 	
 2362              	NUMBQ:
 2363 1154 FFF75AF9 		_NEST
 2364 1158 610A0000 		_ADR	BASE
 2365 115c D1050000 		_ADR	AT
ARM GAS  stm32eforth-fl.s 			page 46


 2366 1160 21060000 		_ADR	TOR
 2367 1164 55050000 		_DOLIT	0
 2367      00000000 
 2368 116c 7D060000 		_ADR	OVER
 2369 1170 B9090000 		_ADR	COUNT
 2370 1174 7D060000 		_ADR	OVER
 2371 1178 F1050000 		_ADR	CAT
 2372 117c 55050000 		_DOLIT '$'
 2372      24000000 
 2373 1184 E9080000 		_ADR	EQUAL
 2374 1188 91050000 		_QBRAN	NUMQ1
 2374      A4110000 
 2375 1190 A5100000 		_ADR	HEX
 2376 1194 69060000 		_ADR	SWAP
 2377 1198 7D070000 		_ADR	ONEP
 2378 119c 69060000 		_ADR	SWAP
 2379 11a0 8D070000 		_ADR	ONEM
 2380              	NUMQ1:
 2381 11a4 7D060000 		_ADR	OVER
 2382 11a8 F1050000 		_ADR	CAT
 2383 11ac 55050000 		_DOLIT	'-'
 2383      2D000000 
 2384 11b4 E9080000 		_ADR	EQUAL
 2385 11b8 21060000 		_ADR	TOR
 2386 11bc 69060000 		_ADR	SWAP
 2387 11c0 11060000 		_ADR	RAT
 2388 11c4 31070000 		_ADR	SUBB
 2389 11c8 69060000 		_ADR	SWAP
 2390 11cc 11060000 		_ADR	RAT
 2391 11d0 21070000 		_ADR	PLUS
 2392 11d4 31080000 		_ADR	QDUP
 2393 11d8 91050000 		_QBRAN	NUMQ6
 2393      6C120000 
 2394 11e0 8D070000 		_ADR	ONEM
 2395 11e4 21060000 		_ADR	TOR
 2396              	NUMQ2:
 2397 11e8 59060000 		_ADR	DUPP
 2398 11ec 21060000 		_ADR	TOR
 2399 11f0 F1050000 		_ADR	CAT
 2400 11f4 610A0000 		_ADR	BASE
 2401 11f8 D1050000 		_ADR	AT
 2402 11fc ED100000 		_ADR	DIGTQ
 2403 1200 91050000 		_QBRAN	NUMQ4
 2403      50120000 
 2404 1208 69060000 		_ADR	SWAP
 2405 120c 610A0000 		_ADR	BASE
 2406 1210 D1050000 		_ADR	AT
 2407 1214 41070000 		_ADR	STAR
 2408 1218 21070000 		_ADR	PLUS
 2409 121c FD050000 		_ADR	RFROM
 2410 1220 7D070000 		_ADR	ONEP
 2411 1224 79050000 		_DONXT	NUMQ2
 2411      E8110000 
 2412 122c 11060000 		_ADR	RAT
 2413 1230 69060000 		_ADR	SWAP
 2414 1234 49060000 		_ADR	DROP
 2415 1238 91050000 		_QBRAN	NUMQ3
ARM GAS  stm32eforth-fl.s 			page 47


 2415      44120000 
 2416 1240 B1080000 		_ADR	NEGAT
 2417              	NUMQ3:
 2418 1244 69060000 		_ADR	SWAP
 2419 1248 A3050000 		_BRAN	NUMQ5
 2419      68120000 
 2420              	NUMQ4:
 2421 1250 FD050000 		_ADR	RFROM
 2422 1254 FD050000 		_ADR	RFROM
 2423 1258 59080000 		_ADR	DDROP
 2424 125c 59080000 		_ADR	DDROP
 2425 1260 55050000 		_DOLIT	0
 2425      00000000 
 2426              	NUMQ5:
 2427 1268 59060000 		_ADR	DUPP
 2428              	NUMQ6:
 2429 126c FD050000 		_ADR	RFROM
 2430 1270 59080000 		_ADR	DDROP
 2431 1274 FD050000 		_ADR	RFROM
 2432 1278 610A0000 		_ADR	BASE
 2433 127c BD050000 		_ADR	STORE
 2434 1280 1D040000 		_UNNEST
 2435              	
 2436              	// **************************************************************************
 2437              	//  Basic I/O
 2438              	
 2439              	//    KEY	 ( -- c )
 2440              	// 	Wait for and return an input character.
 2441              	
 2442 1284 4C110000 		.word	_NUMBQ
 2443 1288 03       	_KEY:	.byte  3
 2444 1289 4B4559   		.ascii "KEY"
 2445              		.p2align 2 	
 2446              	KEY:
 2447 128c FFF7BEF8 		_NEST
 2448              	KEY1:
 2449 1290 01050000 		_ADR	QRX
 2450 1294 91050000 		_QBRAN	KEY1
 2450      90120000 
 2451              	// CTRL-C reboot
 2452 129c 59060000 		_ADR DUPP 
 2453 12a0 55050000 		_DOLIT	3 
 2453      03000000 
 2454 12a8 E9080000 		_ADR EQUAL 
 2455 12ac 9D080000 		_ADR INVER
 2456 12b0 91050000 		_QBRAN	REBOOT 
 2456      30000000 
 2457 12b8 1D040000 		_UNNEST
 2458              	
 2459              	//    SPACE	( -- )
 2460              	// 	Send the blank character to the output device.
 2461              	
 2462 12bc 88120000 		.word	_KEY
 2463 12c0 05       	_SPACE:	.byte  5
 2464 12c1 53504143 		.ascii "SPACE"
 2464      45
 2465 12c6 00BF     		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 48


 2466              	SPACE:
 2467 12c8 FFF7A0F8 		_NEST
 2468 12cc DD070000 		_ADR	BLANK
 2469 12d0 31050000 		_ADR	EMIT
 2470 12d4 1D040000 		_UNNEST
 2471              	
 2472              	//    SPACES	( +n -- )
 2473              	// 	Send n spaces to the output device.
 2474              	
 2475 12d8 C0120000 		.word	_SPACE
 2476 12dc 06       	_SPACS:	.byte  6
 2477 12dd 53504143 		.ascii "SPACES"
 2477      4553
 2478 12e3 00       		.p2align 2 	
 2479              	SPACS:
 2480 12e4 FFF792F8 		_NEST
 2481 12e8 55050000 		_DOLIT	0
 2481      00000000 
 2482 12f0 49090000 		_ADR	MAX
 2483 12f4 21060000 		_ADR	TOR
 2484 12f8 A3050000 		_BRAN	CHAR2
 2484      04130000 
 2485              	CHAR1:
 2486 1300 C9120000 		_ADR	SPACE
 2487              	CHAR2:
 2488 1304 79050000 		_DONXT	CHAR1
 2488      00130000 
 2489 130c 1D040000 		_UNNEST
 2490              	
 2491              	//    TYPE	( b u -- )
 2492              	// 	Output u characters from b.
 2493              	
 2494 1310 DC120000 		.word	_SPACS
 2495 1314 04       	_TYPEE:	.byte	4
 2496 1315 54595045 		.ascii "TYPE"
 2497 1319 0000BF   		.p2align 2 	
 2498              	TYPEE:
 2499 131c FFF776F8 		_NEST
 2500 1320 21060000 		_ADR  TOR   // ( a+1 -- R: u )
 2501 1324 A3050000 		_BRAN	TYPE2
 2501      38130000 
 2502              	TYPE1:  
 2503 132c B9090000 		_ADR  COUNT
 2504 1330 390D0000 		_ADR TCHAR
 2505 1334 31050000 		_ADR EMIT
 2506              	TYPE2:  
 2507 1338 79050000 		_DONXT	TYPE1
 2507      2C130000 
 2508 1340 49060000 		_ADR	DROP
 2509 1344 1D040000 		_UNNEST
 2510              	
 2511              	//    CR	  ( -- )
 2512              	// 	Output a carriage return and a line feed.
 2513              	
 2514 1348 14130000 		.word	_TYPEE
 2515 134c 02       	_CR:	.byte  2
 2516 134d 4352     		.ascii "CR"
ARM GAS  stm32eforth-fl.s 			page 49


 2517 134f 00       		.p2align 2 	
 2518              	CR:
 2519 1350 FFF75CF8 		_NEST
 2520 1354 55050000 		_DOLIT	CRR
 2520      0D000000 
 2521 135c 31050000 		_ADR	EMIT
 2522 1360 55050000 		_DOLIT	LF
 2522      0A000000 
 2523 1368 31050000 		_ADR	EMIT
 2524 136c 1D040000 		_UNNEST
 2525              	
 2526              	//    do_$	( -- a )
 2527              	// 	Return the address of a compiled string.
 2528              	//  adjust return address to skip over it.
 2529              	
 2530              	// 	.word	_CR
 2531              	// _DOSTR	.byte  COMPO+3
 2532              	// 	.ascii "do$$"
 2533              	// 	.p2align 2 	
 2534              	DOSTR:
 2535 1370 FFF74CF8 		_NEST     
 2536              	/* compiled string address is 2 levels deep */
 2537 1374 FD050000 		_ADR	RFROM	// { -- a1 }
 2538 1378 FD050000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2539 137c 59060000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2540 1380 B9090000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2541 1384 21070000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2542 1388 1D0D0000 		_ADR	ALGND	//  end of string
 2543              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2544 138c 21060000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2545 1390 69060000 		_ADR	SWAP	//  count tugged
 2546 1394 21060000 		_ADR	TOR     //  ( -- a2) is string address
 2547 1398 1D040000 		_UNNEST
 2548              	
 2549              	//    $"|	( -- a )
 2550              	// 	Run time routine compiled by _". Return address of a compiled string.
 2551              	
 2552              	// 	.word	_DOSTR
 2553              	// _STRQP	.byte  COMPO+3
 2554              	// 	.ascii "$\"|"
 2555              	// 	.p2align 2 	
 2556              	STRQP:
 2557 139c FFF736F8 		_NEST
 2558 13a0 71130000 		_ADR	DOSTR
 2559 13a4 1D040000 		_UNNEST			// force a call to dostr
 2560              	
 2561              	//    .$	( a -- )
 2562              	// 	Run time routine of ." . Output a compiled string.
 2563              	
 2564              	// 	.word	_STRQP
 2565              	// _DOTST	.byte  COMPO+2
 2566              	// 	.ascii ".$$"
 2567              	// 	.p2align 2 	
 2568              	DOTST:
 2569 13a8 FFF730F8 		_NEST
 2570 13ac B9090000 		_ADR	COUNT // ( -- a+1 c )
 2571 13b0 1D130000 		_ADR	TYPEE
ARM GAS  stm32eforth-fl.s 			page 50


 2572 13b4 1D040000 		_UNNEST
 2573              	
 2574              	//    ."|	( -- )
 2575              	// 	Run time routine of ." . Output a compiled string.
 2576              	
 2577              	// 	.word	_DOTST
 2578              	// _DOTQP	.byte  COMPO+3
 2579              	// 	.ascii ".""|"
 2580              	// 	.p2align 2 	
 2581              	DOTQP:
 2582 13b8 FFF728F8 		_NEST
 2583 13bc 71130000 		_ADR	DOSTR
 2584 13c0 A9130000 		_ADR	DOTST
 2585 13c4 1D040000 		_UNNEST
 2586              	
 2587              	//    .R	  ( n +n -- )
 2588              	// 	Display an integer in a field of n columns, right justified.
 2589              	
 2590 13c8 4C130000 		.word	_CR
 2591 13cc 02       	_DOTR:	.byte  2
 2592 13cd 2E52     		.ascii ".R"
 2593 13cf 00       		.p2align 2 	
 2594              	DOTR:
 2595 13d0 FFF71CF8 		_NEST
 2596 13d4 21060000 		_ADR	TOR
 2597 13d8 75100000 		_ADR	STRR
 2598 13dc FD050000 		_ADR	RFROM
 2599 13e0 7D060000 		_ADR	OVER
 2600 13e4 31070000 		_ADR	SUBB
 2601 13e8 E5120000 		_ADR	SPACS
 2602 13ec 1D130000 		_ADR	TYPEE
 2603 13f0 1D040000 		_UNNEST
 2604              	
 2605              	//    U.R	 ( u +n -- )
 2606              	// 	Display an unsigned integer in n column, right justified.
 2607              	
 2608 13f4 CC130000 		.word	_DOTR
 2609 13f8 03       	_UDOTR:	.byte  3
 2610 13f9 552E52   		.ascii "U.R"
 2611              		.p2align 2 	
 2612              	UDOTR:
 2613 13fc FFF706F8 		_NEST
 2614 1400 21060000 		_ADR	TOR
 2615 1404 9D0F0000 		_ADR	BDIGS
 2616 1408 09100000 		_ADR	DIGS
 2617 140c 55100000 		_ADR	EDIGS
 2618 1410 FD050000 		_ADR	RFROM
 2619 1414 7D060000 		_ADR	OVER
 2620 1418 31070000 		_ADR	SUBB
 2621 141c E5120000 		_ADR	SPACS
 2622 1420 1D130000 		_ADR	TYPEE
 2623 1424 1D040000 		_UNNEST
 2624              	
 2625              	//    U.	  ( u -- )
 2626              	// 	Display an unsigned integer in free format.
 2627              	
 2628 1428 F8130000 		.word	_UDOTR
ARM GAS  stm32eforth-fl.s 			page 51


 2629 142c 02       	_UDOT:	.byte  2
 2630 142d 552E     		.ascii "U."
 2631 142f 00       		.p2align 2 	
 2632              	UDOT:
 2633 1430 FEF7ECFF 		_NEST
 2634 1434 9D0F0000 		_ADR	BDIGS
 2635 1438 09100000 		_ADR	DIGS
 2636 143c 55100000 		_ADR	EDIGS
 2637 1440 C9120000 		_ADR	SPACE
 2638 1444 1D130000 		_ADR	TYPEE
 2639 1448 1D040000 		_UNNEST
 2640              	
 2641              	//    .	   ( w -- )
 2642              	// 	Display an integer in free format, preceeded by a space.
 2643              	
 2644 144c 2C140000 		.word	_UDOT
 2645 1450 01       	_DOT:	.byte  1
 2646 1451 2E       		.ascii "."
 2647 1452 00BF     		.p2align 2 	
 2648              	DOT:
 2649 1454 FEF7DAFF 		_NEST
 2650 1458 610A0000 		_ADR	BASE
 2651 145c D1050000 		_ADR	AT
 2652 1460 55050000 		_DOLIT 10
 2652      0A000000 
 2653 1468 C9060000 		_ADR	XORR			// ?decimal
 2654 146c 91050000 		_QBRAN	DOT1
 2654      7C140000 
 2655 1474 31140000 		_ADR	UDOT
 2656 1478 1D040000 		_UNNEST			// no,display unsigned
 2657              	DOT1:
 2658 147c 75100000 	    _ADR	STRR
 2659 1480 C9120000 		_ADR	SPACE
 2660 1484 1D130000 		_ADR	TYPEE
 2661 1488 1D040000 		_UNNEST			// yes, display signed
 2662              	
 2663              	//    ?	   ( a -- )
 2664              	// 	Display the contents in a memory cell.
 2665              	
 2666 148c 50140000 		.word	_DOT
 2667 1490 01       	_QUEST:	.byte  1
 2668 1491 3F       		.ascii "?"
 2669 1492 00BF     		.p2align 2 	
 2670              	QUEST:
 2671 1494 FEF7BAFF 		_NEST
 2672 1498 D1050000 		_ADR	AT
 2673 149c 55140000 		_ADR	DOT
 2674 14a0 1D040000 		_UNNEST
 2675              	
 2676              	// **************************************************************************
 2677              	//  Parsing
 2678              	
 2679              	//    parse	( b u c -- b u delta //  string> )
 2680              	// 	Scan word delimited by c. Return found string and its offset.
 2681              	
 2682              	// 	.word	_QUEST
 2683              	// _PARS	.byte  5
ARM GAS  stm32eforth-fl.s 			page 52


 2684              	// 	.ascii "parse"
 2685              	// 	.p2align 2 	
 2686              	PARS:
 2687 14a4 FEF7B2FF 		_NEST
 2688 14a8 6B0A0000 		_ADR	TEMP
 2689 14ac BD050000 		_ADR	STORE
 2690 14b0 7D060000 		_ADR	OVER
 2691 14b4 21060000 		_ADR	TOR
 2692 14b8 59060000 		_ADR	DUPP
 2693 14bc 91050000 		_QBRAN	PARS8
 2693      B8150000 
 2694 14c4 8D070000 		_ADR	ONEM
 2695 14c8 6B0A0000 		_ADR	TEMP
 2696 14cc D1050000 		_ADR	AT
 2697 14d0 DD070000 		_ADR	BLANK
 2698 14d4 E9080000 		_ADR	EQUAL
 2699 14d8 91050000 		_QBRAN	PARS3
 2699      2C150000 
 2700 14e0 21060000 		_ADR	TOR
 2701              	PARS1:
 2702 14e4 DD070000 		_ADR	BLANK
 2703 14e8 7D060000 		_ADR	OVER
 2704 14ec F1050000 		_ADR	CAT			// skip leading blanks 
 2705 14f0 31070000 		_ADR	SUBB
 2706 14f4 8D060000 		_ADR	ZLESS
 2707 14f8 9D080000 		_ADR	INVER
 2708 14fc 91050000 		_QBRAN	PARS2
 2708      28150000 
 2709 1504 7D070000 		_ADR	ONEP
 2710 1508 79050000 		_DONXT	PARS1
 2710      E4140000 
 2711 1510 FD050000 		_ADR	RFROM
 2712 1514 49060000 		_ADR	DROP
 2713 1518 55050000 		_DOLIT	0
 2713      00000000 
 2714 1520 59060000 		_ADR	DUPP
 2715 1524 1D040000 		_UNNEST
 2716              	PARS2:
 2717 1528 FD050000 		_ADR	RFROM
 2718              	PARS3:
 2719 152c 7D060000 		_ADR	OVER
 2720 1530 69060000 		_ADR	SWAP
 2721 1534 21060000 		_ADR	TOR
 2722              	PARS4:
 2723 1538 6B0A0000 		_ADR	TEMP
 2724 153c D1050000 		_ADR	AT
 2725 1540 7D060000 		_ADR	OVER
 2726 1544 F1050000 		_ADR	CAT
 2727 1548 31070000 		_ADR	SUBB			// scan for delimiter
 2728 154c 6B0A0000 		_ADR	TEMP
 2729 1550 D1050000 		_ADR	AT
 2730 1554 DD070000 		_ADR	BLANK
 2731 1558 E9080000 		_ADR	EQUAL
 2732 155c 91050000 		_QBRAN	PARS5
 2732      68150000 
 2733 1564 8D060000 		_ADR	ZLESS
 2734              	PARS5:
ARM GAS  stm32eforth-fl.s 			page 53


 2735 1568 91050000 		_QBRAN	PARS6
 2735      8C150000 
 2736 1570 7D070000 		_ADR	ONEP
 2737 1574 79050000 		_DONXT	PARS4
 2737      38150000 
 2738 157c 59060000 		_ADR	DUPP
 2739 1580 21060000 		_ADR	TOR
 2740 1584 A3050000 		_BRAN	PARS7
 2740      A0150000 
 2741              	PARS6:
 2742 158c FD050000 		_ADR	RFROM
 2743 1590 49060000 		_ADR	DROP
 2744 1594 59060000 		_ADR	DUPP
 2745 1598 7D070000 		_ADR	ONEP
 2746 159c 21060000 		_ADR	TOR
 2747              	PARS7:
 2748 15a0 7D060000 		_ADR	OVER
 2749 15a4 31070000 		_ADR	SUBB
 2750 15a8 FD050000 		_ADR	RFROM
 2751 15ac FD050000 		_ADR	RFROM
 2752 15b0 31070000 		_ADR	SUBB
 2753 15b4 1D040000 		_UNNEST
 2754              	PARS8:
 2755 15b8 7D060000 		_ADR	OVER
 2756 15bc FD050000 		_ADR	RFROM
 2757 15c0 31070000 		_ADR	SUBB
 2758 15c4 1D040000 		_UNNEST
 2759              	
 2760              	//    PARSE	( c -- b u //  string> )
 2761              	// 	Scan input stream and return counted string delimited by c.
 2762              	
 2763 15c8 90140000 		.word	_QUEST
 2764 15cc 05       	_PARSE:	.byte  5
 2765 15cd 50415253 		.ascii "PARSE"
 2765      45
 2766 15d2 00BF     		.p2align 2 	
 2767              	PARSE:
 2768 15d4 FEF71AFF 		_NEST
 2769 15d8 21060000 		_ADR	TOR
 2770 15dc 050E0000 		_ADR	TIB
 2771 15e0 950A0000 		_ADR	INN
 2772 15e4 D1050000 		_ADR	AT
 2773 15e8 21070000 		_ADR	PLUS			// current input buffer pointer
 2774 15ec A90A0000 		_ADR	NTIB
 2775 15f0 D1050000 		_ADR	AT
 2776 15f4 950A0000 		_ADR	INN
 2777 15f8 D1050000 		_ADR	AT
 2778 15fc 31070000 		_ADR	SUBB			// remaining count
 2779 1600 FD050000 		_ADR	RFROM
 2780 1604 A5140000 		_ADR	PARS
 2781 1608 950A0000 		_ADR	INN
 2782 160c 71090000 		_ADR	PSTOR
 2783 1610 1D040000 		_UNNEST
 2784              	
 2785              	//    .(	  ( -- )
 2786              	// 	Output following string up to next ) .
 2787              	
ARM GAS  stm32eforth-fl.s 			page 54


 2788 1614 CC150000 		.word	_PARSE
 2789 1618 82       	_DOTPR:	.byte  IMEDD+2
 2790 1619 2E28     		.ascii ".("
 2791 161b 00       		.p2align 2 	
 2792              	DOTPR:
 2793 161c FEF7F6FE 		_NEST
 2794 1620 55050000 		_DOLIT	')'
 2794      29000000 
 2795 1628 D5150000 		_ADR	PARSE
 2796 162c 1D130000 		_ADR	TYPEE
 2797 1630 1D040000 		_UNNEST
 2798              	
 2799              	//    (	   ( -- )
 2800              	// 	Ignore following string up to next ) . A comment.
 2801              	
 2802 1634 18160000 		.word	_DOTPR
 2803 1638 81       	_PAREN:	.byte  IMEDD+1
 2804 1639 28       		.ascii "("
 2805 163a 00BF     		.p2align 2 	
 2806              	PAREN:
 2807 163c FEF7E6FE 		_NEST
 2808 1640 55050000 		_DOLIT	')'
 2808      29000000 
 2809 1648 D5150000 		_ADR	PARSE
 2810 164c 59080000 		_ADR	DDROP
 2811 1650 1D040000 		_UNNEST
 2812              	
 2813              	//    \	   ( -- )
 2814              	// 	Ignore following text till the end of line.
 2815              	
 2816 1654 38160000 		.word	_PAREN
 2817 1658 81       	_BKSLA:	.byte  IMEDD+1
 2818 1659 27       		.byte	'\'
 2819 165a 00BF     		.p2align 2 	
 2820              	BKSLA:
 2821 165c FEF7D6FE 		_NEST
 2822 1660 A90A0000 		_ADR	NTIB
 2823 1664 D1050000 		_ADR	AT
 2824 1668 950A0000 		_ADR	INN
 2825 166c BD050000 		_ADR	STORE
 2826 1670 1D040000 		_UNNEST
 2827              	
 2828              	//    CHAR	( -- c )
 2829              	// 	Parse next word and return its first character.
 2830              	
 2831 1674 58160000 		.word	_BKSLA
 2832 1678 04       	_CHAR:	.byte  4
 2833 1679 43484152 		.ascii "CHAR"
 2834 167d 0000BF   		.p2align 2 	
 2835              	CHAR:
 2836 1680 FEF7C4FE 		_NEST
 2837 1684 DD070000 		_ADR	BLANK
 2838 1688 D5150000 		_ADR	PARSE
 2839 168c 49060000 		_ADR	DROP
 2840 1690 F1050000 		_ADR	CAT
 2841 1694 1D040000 		_UNNEST
 2842              	
ARM GAS  stm32eforth-fl.s 			page 55


 2843              	//    WORD	( c -- a //  string> )
 2844              	// 	Parse a word from input stream and copy it to code dictionary.
 2845              	
 2846 1698 78160000 		.word	_CHAR
 2847 169c 04       	_WORDD:	.byte  4
 2848 169d 574F5244 		.ascii "WORD"
 2849 16a1 0000BF   		.p2align 2 	
 2850              	WORDD:
 2851 16a4 FEF7B2FE 		_NEST
 2852 16a8 D5150000 		_ADR	PARSE
 2853 16ac D50D0000 		_ADR	HERE
 2854 16b0 BD070000 		_ADR	CELLP
 2855 16b4 D10E0000 		_ADR	PACKS
 2856 16b8 1D040000 		_UNNEST
 2857              	
 2858              	//    TOKEN	( -- a //  string> )
 2859              	// 	Parse a word from input stream and copy it to name dictionary.
 2860              	
 2861 16bc 9C160000 		.word	_WORDD
 2862 16c0 05       	_TOKEN:	.byte  5
 2863 16c1 544F4B45 		.ascii "TOKEN"
 2863      4E
 2864 16c6 00BF     		.p2align 2 	
 2865              	TOKEN:
 2866 16c8 FEF7A0FE 		_NEST
 2867 16cc DD070000 		_ADR	BLANK
 2868 16d0 A5160000 		_ADR	WORDD
 2869 16d4 1D040000 		_UNNEST
 2870              	
 2871              	// **************************************************************************
 2872              	//  Dictionary search
 2873              	
 2874              	//    NAME>	( na -- ca )
 2875              	// 	Return a code address given a name address.
 2876              	
 2877 16d8 C0160000 		.word	_TOKEN
 2878 16dc 05       	_NAMET:	.byte  5
 2879 16dd 4E414D45 		.ascii "NAME>"
 2879      3E
 2880 16e2 00BF     		.p2align 2 	
 2881              	NAMET:
 2882 16e4 FEF792FE 		_NEST
 2883 16e8 B9090000 		_ADR	COUNT
 2884 16ec 55050000 		_DOLIT	0x1F
 2884      1F000000 
 2885 16f4 A1060000 		_ADR	ANDD
 2886 16f8 21070000 		_ADR	PLUS
 2887 16fc 1D0D0000 		_ADR	ALGND
 2888 1700 1D040000 		_UNNEST
 2889              	
 2890              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2891              	// 	Compare u bytes in two strings. Return 0 if identical.
 2892              	//
 2893              	//  Picatout 2020-12-01, 
 2894              	//      Because of problem with .align directive that
 2895              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2896              	// 		words  to do a byte by byte comparison. 
ARM GAS  stm32eforth-fl.s 			page 56


 2897              	//
 2898 1704 DC160000 		.word	_NAMET
 2899 1708 05       	_SAMEQ:	.byte  5
 2900 1709 53414D45 		.ascii "SAME?"
 2900      3F
 2901 170e 00BF     		.p2align 2	
 2902              	SAMEQ:
 2903 1710 FEF77CFE 		_NEST
 2904 1714 21060000 		_ADR	TOR
 2905 1718 A3050000 		_BRAN	SAME2
 2905      5C170000 
 2906              	SAME1:
 2907 1720 7D060000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2908 1724 11060000 		_ADR	RAT   // a1 a2 a1 u 
 2909 1728 21070000 		_ADR	PLUS  // a1 a2 a1+u 
 2910 172c F1050000 		_ADR	CAT	   // a1 a2 c1    		
 2911 1730 7D060000 		_ADR	OVER  // a1 a2 c1 a2 
 2912 1734 11060000 		_ADR	RAT    
 2913 1738 21070000 		_ADR	PLUS    
 2914 173c F1050000 		_ADR	CAT	  // a1 a2 c1 c2
 2915 1740 31070000 		_ADR	SUBB  
 2916 1744 31080000 		_ADR	QDUP
 2917 1748 91050000 		_QBRAN	SAME2
 2917      5C170000 
 2918 1750 FD050000 		_ADR	RFROM
 2919 1754 49060000 		_ADR	DROP
 2920 1758 1D040000 		_UNNEST	// strings not equal
 2921              	SAME2:
 2922 175c 79050000 		_DONXT	SAME1
 2922      20170000 
 2923 1764 55050000 		_DOLIT	0
 2923      00000000 
 2924 176c 1D040000 		_UNNEST	// strings equal
 2925              	
 2926              	//    find	( a na -- ca na | a F )
 2927              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2928              	
 2929              	//  Picatout 2020-12-01,  
 2930              	//		Modified from original. See comment for word "SAME?" 
 2931              	
 2932              	// 	.word	_SAMEQ
 2933              	// _FIND	.byte  4
 2934              	// 	.ascii "find"
 2935              	// 	.p2align 2 	
 2936              	FIND:
 2937 1770 FEF74CFE 		_NEST
 2938 1774 69060000 		_ADR	SWAP			// na a	
 2939 1778 B9090000 		_ADR	COUNT			// na a+1 count
 2940 177c 59060000 		_ADR	DUPP 
 2941 1780 6B0A0000 		_ADR	TEMP
 2942 1784 BD050000 		_ADR	STORE			// na a+1 count 
 2943 1788 21060000 		_ADR  TOR		// na a+1  R: count  
 2944 178c 69060000 		_ADR	SWAP			// a+1 na
 2945              	FIND1:
 2946 1790 59060000 		_ADR	DUPP			// a+1 na na
 2947 1794 91050000 		_QBRAN	FIND6	// end of vocabulary
 2947      E8170000 
ARM GAS  stm32eforth-fl.s 			page 57


 2948 179c 59060000 		_ADR	DUPP			// a+1 na na
 2949 17a0 F1050000 		_ADR	CAT			// a+1 na name1
 2950 17a4 55050000 		_DOLIT	MASKK
 2950      1FFFFFFF 
 2951 17ac A1060000 		_ADR	ANDD
 2952 17b0 11060000 		_ADR	RAT			// a+1 na name1 count 
 2953 17b4 C9060000 		_ADR	XORR			// a+1 na,  same length?
 2954 17b8 91050000 		_QBRAN	FIND2
 2954      D0170000 
 2955 17c0 CD070000 		_ADR	CELLM			// a+1 la
 2956 17c4 D1050000 		_ADR	AT			// a+1 next_na
 2957 17c8 A3050000 		_BRAN	FIND1			// try next word
 2957      90170000 
 2958              	FIND2:   
 2959 17d0 7D070000 		_ADR	ONEP			// a+1 na+1
 2960 17d4 6B0A0000 		_ADR	TEMP
 2961 17d8 D1050000 		_ADR	AT			// a+1 na+1 count
 2962 17dc 11170000 		_ADR	SAMEQ		// a+1 na+1 ? 
 2963              	FIND3:	
 2964 17e0 A3050000 		_BRAN	FIND4
 2964      00180000 
 2965              	FIND6:	
 2966 17e8 FD050000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 2967 17ec 49060000 		_ADR	DROP			// a+1 0
 2968 17f0 69060000 		_ADR	SWAP			// 0 a+1
 2969 17f4 8D070000 		_ADR	ONEM			// 0 a
 2970 17f8 69060000 		_ADR	SWAP			// a 0 
 2971 17fc 1D040000 		_UNNEST			// return without a match
 2972              	FIND4:	
 2973 1800 91050000 		_QBRAN	FIND5			// a+1 na+1
 2973      1C180000 
 2974 1808 8D070000 		_ADR	ONEM			// a+1 na
 2975 180c CD070000 		_ADR	CELLM			// a+4 la
 2976 1810 D1050000 		_ADR	AT			// a+1 next_na
 2977 1814 A3050000 		_BRAN	FIND1			// compare next name
 2977      90170000 
 2978              	FIND5:	
 2979 181c FD050000 		_ADR	RFROM			// a+1 na+1 count
 2980 1820 49060000 		_ADR	DROP			// a+1 na+1
 2981 1824 69060000 		_ADR	SWAP			// na+1 a+1
 2982 1828 49060000 		_ADR	DROP			// na+1
 2983 182c 8D070000 		_ADR	ONEM			// na
 2984 1830 59060000 		_ADR	DUPP			// na na
 2985 1834 E5160000 		_ADR	NAMET			// na ca
 2986 1838 69060000 		_ADR	SWAP			// ca na
 2987 183c 1D040000 		_UNNEST			//  return with a match
 2988              	
 2989              	//    NAME?	( a -- ca na | a F )
 2990              	// 	Search all context vocabularies for a string.
 2991              	
 2992 1840 08170000 		.word	_SAMEQ
 2993 1844 05       	_NAMEQ:	.byte  5
 2994 1845 4E414D45 		.ascii "NAME?"
 2994      3F
 2995 184a 00BF     		.p2align 2 	
 2996              	NAMEQ:
 2997 184c FEF7DEFD 		_NEST
ARM GAS  stm32eforth-fl.s 			page 58


 2998 1850 E90A0000 		_ADR	CNTXT
 2999 1854 D1050000 		_ADR	AT
 3000 1858 71170000 		_ADR	FIND
 3001 185c 1D040000 		_UNNEST
 3002              	
 3003              	// **************************************************************************
 3004              	//  Terminal input
 3005              	
 3006              	//    	  ( bot eot cur -- bot eot cur )
 3007              	// 	Backup the cursor by one character.
 3008              	
 3009              	// 	.word	_NAMEQ
 3010              	// _BKSP	.byte  2
 3011              	// 	.ascii "^H"
 3012              	// 	.p2align 2 	
 3013              	BKSP:
 3014 1860 FEF7D4FD 		_NEST
 3015 1864 21060000 		_ADR	TOR
 3016 1868 7D060000 		_ADR	OVER
 3017 186c FD050000 		_ADR	RFROM
 3018 1870 69060000 		_ADR	SWAP
 3019 1874 7D060000 		_ADR	OVER
 3020 1878 C9060000 		_ADR	XORR
 3021 187c 91050000 		_QBRAN	BACK1
 3021      A8180000 
 3022 1884 55050000 		_DOLIT	BKSPP
 3022      08000000 
 3023 188c 31050000 		_ADR	TECHO
 3024              	// 	_ADR	ATEXE
 3025 1890 8D070000 		_ADR	ONEM
 3026 1894 DD070000 		_ADR	BLANK
 3027 1898 31050000 		_ADR	TECHO
 3028              	// 	_ADR	ATEXE
 3029 189c 55050000 		_DOLIT	BKSPP
 3029      08000000 
 3030 18a4 31050000 		_ADR	TECHO
 3031              	// 	_ADR	ATEXE
 3032              	BACK1:
 3033 18a8 1D040000 		  _UNNEST
 3034              	
 3035              	//    TAP	 ( bot eot cur c -- bot eot cur )
 3036              	// 	Accept and echo the key stroke and bump the cursor.
 3037              	
 3038              	// 	.word	_BKSP
 3039              	// _TAP	.byte  3
 3040              	// 	.ascii "TAP"
 3041              	// 	.p2align 2 	
 3042              	TAP:
 3043 18ac FEF7AEFD 		_NEST
 3044 18b0 59060000 		_ADR	DUPP
 3045 18b4 31050000 		_ADR	TECHO
 3046              	// 	_ADR	ATEXE
 3047 18b8 7D060000 		_ADR	OVER
 3048 18bc DD050000 		_ADR	CSTOR
 3049 18c0 7D070000 		_ADR	ONEP
 3050 18c4 1D040000 		_UNNEST
 3051              	
ARM GAS  stm32eforth-fl.s 			page 59


 3052              	//    kTAP	( bot eot cur c -- bot eot cur )
 3053              	// 	Process a key stroke, CR or backspace.
 3054              	
 3055              	// 	.word	_TAP
 3056              	// _KTAP	.byte  4
 3057              	// 	.ascii "kTAP"
 3058              	// 	.p2align 2 	
 3059              	KTAP:
 3060              	TTAP:
 3061 18c8 FEF7A0FD 		_NEST
 3062 18cc 59060000 		_ADR	DUPP
 3063 18d0 55050000 		_DOLIT	CRR
 3063      0D000000 
 3064 18d8 C9060000 		_ADR	XORR
 3065 18dc 91050000 		_ADR	QBRAN
 3066 18e0 10190000 		.word	KTAP2
 3067 18e4 55050000 		_DOLIT	BKSPP
 3067      08000000 
 3068 18ec C9060000 		_ADR	XORR
 3069 18f0 91050000 		_ADR	QBRAN
 3070 18f4 08190000 		.word	KTAP1
 3071 18f8 DD070000 		_ADR	BLANK
 3072 18fc AD180000 		_ADR	TAP
 3073 1900 1D040000 		_UNNEST
 3074 1904 00000000 		.word	0			// patch
 3075              	KTAP1:
 3076 1908 61180000 		_ADR	BKSP
 3077 190c 1D040000 		_UNNEST
 3078              	KTAP2:
 3079 1910 49060000 		_ADR	DROP
 3080 1914 69060000 		_ADR	SWAP
 3081 1918 49060000 		_ADR	DROP
 3082 191c 59060000 		_ADR	DUPP
 3083 1920 1D040000 		_UNNEST
 3084              	
 3085              	//    ACCEPT	( b u -- b u )
 3086              	// 	Accept characters to input buffer. Return with actual count.
 3087              	
 3088 1924 44180000 		.word	_NAMEQ
 3089 1928 06       	_ACCEP:	.byte  6
 3090 1929 41434345 		.ascii "ACCEPT"
 3090      5054
 3091 192f 00       		.p2align 2 	
 3092              	ACCEP:
 3093 1930 FEF76CFD 		_NEST
 3094 1934 7D060000 		_ADR	OVER
 3095 1938 21070000 		_ADR	PLUS
 3096 193c 7D060000 		_ADR	OVER
 3097              	ACCP1:
 3098 1940 6D080000 		_ADR	DDUP
 3099 1944 C9060000 		_ADR	XORR
 3100 1948 91050000 		_QBRAN	ACCP4
 3100      88190000 
 3101 1950 8D120000 		_ADR	KEY
 3102 1954 59060000 		_ADR	DUPP
 3103 1958 DD070000 		_ADR	BLANK
 3104 195c 55050000 		_DOLIT 127
ARM GAS  stm32eforth-fl.s 			page 60


 3104      7F000000 
 3105 1964 A90B0000 		_ADR	WITHI
 3106 1968 91050000 		_QBRAN	ACCP2
 3106      7C190000 
 3107 1970 AD180000 		_ADR	TAP
 3108 1974 A3050000 		_BRAN	ACCP3
 3108      80190000 
 3109              	ACCP2:
 3110 197c C9180000 		_ADR	KTAP
 3111              	// 	_ADR	ATEXE
 3112              	ACCP3:	  
 3113 1980 A3050000 		_BRAN	ACCP1
 3113      40190000 
 3114              	ACCP4:
 3115 1988 49060000 		_ADR	DROP
 3116 198c 7D060000 		_ADR	OVER
 3117 1990 31070000 		_ADR	SUBB
 3118 1994 1D040000 		_UNNEST
 3119              	
 3120              	//    QUERY	( -- )
 3121              	// 	Accept input stream to terminal input buffer.
 3122              	
 3123 1998 28190000 		.word	_ACCEP
 3124 199c 05       	_QUERY:	.byte  5
 3125 199d 51554552 		.ascii "QUERY"
 3125      59
 3126 19a2 00BF     		.p2align 2 	
 3127              	QUERY:
 3128 19a4 FEF732FD 		_NEST
 3129 19a8 050E0000 		_ADR	TIB
 3130 19ac 55050000 		_DOLIT 80
 3130      50000000 
 3131 19b4 31190000 		_ADR	ACCEP
 3132 19b8 A90A0000 		_ADR	NTIB
 3133 19bc BD050000 		_ADR	STORE
 3134 19c0 49060000 		_ADR	DROP
 3135 19c4 55050000 		_DOLIT	0
 3135      00000000 
 3136 19cc 950A0000 		_ADR	INN
 3137 19d0 BD050000 		_ADR	STORE
 3138 19d4 1D040000 		_UNNEST
 3139              	
 3140              	// **************************************************************************
 3141              	//  Error handling
 3142              	
 3143              	//    ABORT	( a -- )
 3144              	// 	Reset data stack and jump to QUIT.
 3145              	
 3146 19d8 9C190000 		.word	_QUERY
 3147 19dc 05       	_ABORT:	.byte  5
 3148 19dd 41424F52 		.ascii "ABORT"
 3148      54
 3149 19e2 00BF     		.p2align 2 	
 3150              	ABORT:
 3151 19e4 FEF712FD 		_NEST
 3152 19e8 C9120000 		_ADR	SPACE
 3153 19ec B9090000 		_ADR	COUNT
ARM GAS  stm32eforth-fl.s 			page 61


 3154 19f0 1D130000 		_ADR	TYPEE
 3155 19f4 55050000 		_DOLIT	0X3F
 3155      3F000000 
 3156 19fc 31050000 		_ADR	EMIT
 3157 1a00 51130000 		_ADR	CR
 3158 1a04 791B0000 		_ADR	PRESE
 3159 1a08 A3050000 		_BRAN	QUIT
 3159      941B0000 
 3160              	
 3161              	//    _abort"	( f -- )
 3162              	// 	Run time routine of ABORT" . Abort with a message.
 3163              	
 3164              	// 	.word	_ABORT
 3165              	// _ABORQ	.byte  COMPO+6
 3166              	// 	.ascii "abort\""
 3167              	// 	.p2align 2 	
 3168              	ABORQ:
 3169 1a10 FEF7FCFC 		_NEST
 3170 1a14 91050000 		_QBRAN	ABOR1	// text flag
 3170      341A0000 
 3171 1a1c 71130000 		_ADR	DOSTR
 3172 1a20 B9090000 		_ADR	COUNT
 3173 1a24 1D130000 		_ADR	TYPEE
 3174 1a28 51130000 		_ADR	CR
 3175 1a2c A3050000 		_BRAN	QUIT
 3175      941B0000 
 3176              	ABOR1:
 3177 1a34 71130000 		_ADR	DOSTR
 3178 1a38 49060000 		_ADR	DROP
 3179 1a3c 1D040000 		_UNNEST			// drop error
 3180              	
 3181              	// **************************************************************************
 3182              	//  The text interpreter
 3183              	
 3184              	//    $INTERPRET  ( a -- )
 3185              	// 	Interpret a word. If failed, try to convert it to an integer.
 3186              	
 3187 1a40 DC190000 		.word	_ABORT
 3188 1a44 0A       	_INTER:	.byte  10
 3189 1a45 2424494E 		.ascii "$$INTERPRET"
 3189      54455250 
 3189      524554
 3190              		.p2align 2 	
 3191              	INTER:
 3192 1a50 FEF7DCFC 		_NEST
 3193 1a54 4D180000 		_ADR	NAMEQ
 3194 1a58 31080000 		_ADR	QDUP	// ?defined
 3195 1a5c 91050000 		_QBRAN	INTE1
 3195      901A0000 
 3196 1a64 D1050000 		_ADR	AT
 3197 1a68 55050000 		_DOLIT	COMPO
 3197      40000000 
 3198 1a70 A1060000 		_ADR	ANDD	// ?compile only lexicon bits
 3199 1a74 111A0000 		_ADR	ABORQ
 3200 1a78 0D       		.byte	13
 3201 1a79 20636F6D 		.ascii " compile only"
 3201      70696C65 
ARM GAS  stm32eforth-fl.s 			page 62


 3201      206F6E6C 
 3201      79
 3202 1a86 00BF     		.p2align 2 	
 3203 1a88 6D050000 		_ADR	EXECU
 3204 1a8c 1D040000 		_UNNEST			// execute defined word
 3205              	INTE1:
 3206 1a90 55110000 		_ADR	NUMBQ
 3207 1a94 91050000 		_ADR	QBRAN
 3208 1a98 A01A0000 		.word	INTE2
 3209 1a9c 1D040000 		_UNNEST
 3210              	INTE2:
 3211 1aa0 FFF7A0BF 	  B.W	ABORT	// error
 3212              	
 3213              	//    [	   ( -- )
 3214              	// 	Start the text interpreter.
 3215              	
 3216 1aa4 441A0000 		.word	_INTER
 3217 1aa8 81       	_LBRAC:	.byte  IMEDD+1
 3218 1aa9 5B       		.ascii "["
 3219 1aaa 00BF     		.p2align 2 	
 3220              	LBRAC:
 3221 1aac FEF7AEFC 		_NEST
 3222 1ab0 55050000 		_DOLIT	INTER
 3222      501A0000 
 3223 1ab8 BD0A0000 		_ADR	TEVAL
 3224 1abc BD050000 		_ADR	STORE
 3225 1ac0 1D040000 		_UNNEST
 3226              	
 3227              	//    .OK	 ( -- )
 3228              	// 	Display "ok" only while interpreting.
 3229              	
 3230 1ac4 A81A0000 		.word	_LBRAC
 3231 1ac8 03       	_DOTOK:	.byte  3
 3232 1ac9 2E4F4B   		.ascii ".OK"
 3233              		.p2align 2 	
 3234              	DOTOK:
 3235 1acc FEF79EFC 		_NEST
 3236 1ad0 55050000 		_DOLIT	INTER
 3236      501A0000 
 3237 1ad8 BD0A0000 		_ADR	TEVAL
 3238 1adc D1050000 		_ADR	AT
 3239 1ae0 E9080000 		_ADR	EQUAL
 3240 1ae4 91050000 		_QBRAN	DOTO1
 3240      F41A0000 
 3241 1aec B9130000 		_ADR	DOTQP
 3242 1af0 03       		.byte	3
 3243 1af1 206F6B   		.ascii " ok"
 3244              	DOTO1:
 3245 1af4 51130000 		_ADR	CR
 3246 1af8 1D040000 		_UNNEST
 3247              	
 3248              	//    ?STACK	( -- )
 3249              	// 	Abort if the data stack underflows.
 3250              	
 3251 1afc C81A0000 		.word	_DOTOK
 3252 1b00 06       	_QSTAC:	.byte  6
 3253 1b01 3F535441 		.ascii "?STACK"
ARM GAS  stm32eforth-fl.s 			page 63


 3253      434B
 3254 1b07 00       		.p2align 2 	
 3255              	QSTAC:
 3256 1b08 FEF780FC 		_NEST
 3257 1b0c 850D0000 		_ADR	DEPTH
 3258 1b10 8D060000 		_ADR	ZLESS	// check only for underflow
 3259 1b14 111A0000 		_ADR	ABORQ
 3260 1b18 0A       		.byte	10
 3261 1b19 20756E64 		.ascii " underflow"
 3261      6572666C 
 3261      6F77
 3262 1b23 00       		.p2align 2 	
 3263 1b24 1D040000 		_UNNEST
 3264              	
 3265              	//    EVAL	( -- )
 3266              	// 	Interpret the input stream.
 3267              	
 3268 1b28 001B0000 		.word	_QSTAC
 3269 1b2c 04       	_EVAL:	.byte  4
 3270 1b2d 4556414C 		.ascii "EVAL"
 3271 1b31 0000BF   		.p2align 2 	
 3272              	EVAL:
 3273 1b34 FEF76AFC 		_NEST
 3274              	EVAL1:
 3275 1b38 C9160000 	    _ADR	TOKEN
 3276 1b3c 59060000 		_ADR	DUPP
 3277 1b40 F1050000 		_ADR	CAT	// ?input stream empty
 3278 1b44 91050000 		_QBRAN	EVAL2
 3278      601B0000 
 3279 1b4c BD0A0000 		_ADR	TEVAL
 3280 1b50 1D0E0000 		_ADR	ATEXE
 3281 1b54 091B0000 		_ADR	QSTAC	// evaluate input, check stack
 3282 1b58 A3050000 		_BRAN	EVAL1
 3282      381B0000 
 3283              	EVAL2:
 3284 1b60 49060000 		_ADR	DROP
 3285 1b64 CD1A0000 		_ADR	DOTOK
 3286 1b68 1D040000 		_UNNEST	// prompt
 3287              	
 3288              	//    PRESET	( -- )
 3289              	// 	Reset data stack pointer and the terminal input buffer.
 3290              	
 3291 1b6c 2C1B0000 		.word	_EVAL
 3292 1b70 06       	_PRESE:	.byte  6
 3293 1b71 50524553 		.ascii "PRESET"
 3293      4554
 3294 1b77 00       		.p2align 2 	
 3295              	PRESE:
 3296              	//	_NEST
 3297 1b78 44F68061 		MOVW	R1,#SPP&0xffff		//  init SP
 3298 1b7c C2F20001 	 	MOVT	R1,#SPP>>16
 3299 1b80 85EA0505 		EOR	R5,R5,R5			//  init TOS=0
 3300              	//	_UNNEST
 3301 1b84 FEF746BC 		_NEXT
 3302              	
 3303              	//    QUIT	( -- )
 3304              	// 	Reset return stack pointer and start text interpreter.
ARM GAS  stm32eforth-fl.s 			page 64


 3305              	
 3306 1b88 701B0000 		.word	_PRESE
 3307 1b8c 04       	_QUIT:	.byte  4
 3308 1b8d 51554954 		.ascii "QUIT"
 3309 1b91 0000BF   		.p2align 2 	
 3310              	QUIT:
 3311 1b94 FEF73AFC 		_NEST
 3312 1b98 44F68072 		MOVW	R2,#RPP&0xffff  /* RESET RSTACK */
 3313 1b9c C2F20002 	 	MOVT	R2,#RPP>>16 
 3314              	QUIT1:
 3315 1ba0 AD1A0000 		_ADR	LBRAC			// start interpretation
 3316              	QUIT2:
 3317 1ba4 A5190000 		_ADR	QUERY			// get input
 3318 1ba8 351B0000 		_ADR	EVAL
 3319 1bac A3050000 		_BRAN	QUIT2	// continue till error
 3319      A41B0000 
 3320              	
 3321              	/***************************
 3322              	//  Flash memory interface
 3323              	***************************/
 3324              	
 3325              	unlock:	//  unlock flash memory	
 3326 1bb4 DFF84404 		ldr	r0, flash_regs 
 3327              	//	mov r4,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 3328              	//	str r4,[r0,#FLASH_SR]
 3329              	//	ldr r4,[r0,#FLASH_CR]
 3330              	//	tst r4,#(1<<7)
 3331              	//	beq 1f 
 3332 1bb8 DFF84444 		ldr	r4, flash_regs+4 // key1
 3333 1bbc 4460     		str	r4, [r0, #FLASH_KEYR]
 3334 1bbe DFF84444 		ldr	r4, flash_regs+8 // key2 
 3335 1bc2 4460     		str	r4, [r0, #FLASH_KEYR]
 3336              		/* unlock option registers */
 3337              	/*	
 3338              		ldr	r4, flash_regs+4 
 3339              		str	r4, [r0, #FLASH_OPTKEYR]
 3340              		ldr	r4, flash_regs+8
 3341              		str	r4, [r0, #FLASH_OPTKEYR]
 3342              	*/
 3343 1bc4 7047     		bx lr 
 3344              	
 3345              	WAIT_BSY:
 3346 1bc6 DFF83404 		ldr	r0,flash_regs
 3347              	WAIT1:
 3348 1bca C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 3349 1bcc 14F00104 		ands	r4, #0x1	//  BSY
 3350 1bd0 FBD1     		bne	WAIT1
 3351 1bd2 7047     		_RET 
 3352              	
 3353              	//    ERASE_PAGE	   ( adr -- )
 3354              	// 	  Erase one page of flash memory.
 3355              	//    stm32f103 page size is 1024 bytes 
 3356              	//    adr is any address inside page to erase 
 3357              	
 3358 1bd4 8C1B0000 		.word _QUIT  
 3359 1bd8 0A       	_EPAGE:	.byte  10
 3360 1bd9 45524153 		.ascii "ERASE_PAGE"
ARM GAS  stm32eforth-fl.s 			page 65


 3360      455F5041 
 3360      4745
 3361 1be3 00       		.p2align 2 	
 3362              	
 3363              	EPAGE: 	//  page --
 3364 1be4 00B5FFF7 		_CALL	WAIT_BSY
 3364      EEFF5DF8 
 3364      04EB
 3365 1bee DFF80C04 		ldr r0,flash_regs 	 
 3366 1bf2 4FF00204 		mov r4,#2 // set PER bit 
 3367 1bf6 0461     		str r4,[r0,#FLASH_CR]
 3368 1bf8 4561     		str r5,[r0,#FLASH_AR] // page to erase address 
 3369 1bfa 0469     		ldr	r4,[r0, #FLASH_CR]	
 3370 1bfc 44F04004 		orr	R4,#0x40	//  set STRT bit   
 3371 1c00 0461     		str	r4,[r0, #FLASH_CR]	//  start erasing
 3372 1c02 00B5FFF7 	 	_CALL	WAIT_BSY // wait until done
 3372      DFFF5DF8 
 3372      04EB
 3373 1c0c C568     		ldr r5,[r0,#FLASH_SR] // check for errors 
 3374 1c0e 05F01405 		and r5,r5,#(5<<2)
 3375 1c12 FEF7FBFB 		_NEST 
 3376 1c16 111A0000 		_ADR ABORQ 
 3377 1c1a 0D       		.byte 13
 3378 1c1b 20657261 		.ascii " erase error!"
 3378      73652065 
 3378      72726F72 
 3378      21
 3379              		.p2align 2
 3380 1c28 1D040000 		_UNNEST
 3381              	
 3382              	// store 16 bit word
 3383              	// expect flash unlocked  
 3384              	HWORD_WRITE: // ( hword address -- )
 3385 1c2c 0469     		ldr	r4, [r0, #FLASH_CR]	//  FLASH_CR
 3386 1c2e 4FF00104 		mov r4,#1 // set PG 
 3387 1c32 0461     		str r4,[r0,#FLASH_CR]
 3388 1c34 2E46     		mov r6,r5 
 3389 1c36 51F8045B 		_POP 
 3390 1c3a 3580     		strh r5,[r6] 
 3391 1c3c 00B5FFF7 		_CALL WAIT_BSY 
 3391      C2FF5DF8 
 3391      04EB
 3392 1c46 C568     		ldr r5,[r0,#FLASH_SR]
 3393 1c48 05F01405 		and r5,r5,#(5<<2) 
 3394 1c4c FEF7DEFB 		_NEST 
 3395 1c50 91050000 		_QBRAN	1f 
 3395      6C1C0000 
 3396 1c58 111A0000 		_ADR	ABORQ
 3397 1c5c 0D       		.byte 13
 3398 1c5d 20777269 		.ascii " write error!"
 3398      74652065 
 3398      72726F72 
 3398      21
 3399 1c6a 00BF     		.p2align 2
 3400              	1:	 
 3401 1c6c 1D040000 		_UNNEST 
 3402              	
ARM GAS  stm32eforth-fl.s 			page 66


 3403              	
 3404              	//    I!	   ( data address -- )
 3405              	// 	   Write one word into flash memory
 3406              	//	   address must even 
 3407              	
 3408 1c70 D81B0000 		.word	_EPAGE
 3409 1c74 02       	_ISTOR:	.byte  2
 3410 1c75 4921     		.ascii "I!"
 3411 1c77 00       		.p2align 2 	
 3412              	ISTOR:	//  data address --
 3413 1c78 00B5FFF7 		_CALL	WAIT_BSY
 3413      A4FF5DF8 
 3413      04EB
 3414 1c82 FEF7C3FB 		_NEST 
 3415 1c86 6D080000 		_ADR DDUP 
 3416 1c8a 21060000 		_ADR TOR 
 3417 1c8e 21060000 		_ADR TOR 
 3418 1c92 2D1C0000 		_ADR HWORD_WRITE
 3419 1c96 FD050000 		_ADR RFROM
 3420 1c9a 55050000 		_DOLIT 65536 
 3420      00000100 
 3421 1ca2 BD0C0000 		_ADR  SLASH
 3422 1ca6 FD050000 		_ADR RFROM 
 3423 1caa 55050000 		_DOLIT 2 
 3423      02000000 
 3424 1cb2 21070000 		_ADR PLUS 
 3425 1cb6 2D1C0000 		_ADR HWORD_WRITE 
 3426 1cba 1D040000 		_UNNEST
 3427              	
 3428              	// IMG_SIZE ( -- u )
 3429              	// return flash pages required to save 
 3430              	// user ram  
 3431 1cbe 741C0000 		.word _ISTOR 
 3432 1cc2 08       	_IMG_SIZE: .byte 8
 3433 1cc3 494D475F 		.ascii "IMG_SIZE" 
 3433      53495A45 
 3434 1ccb 00       		.p2align 2
 3435              	IMG_SIZE: 
 3436 1ccc FEF79EFB 		_NEST
 3437 1cd0 55050000 		_DOLIT VARS_END_OFS-IMG_SIGN_OFS 
 3437      38000000 
 3438 1cd8 5D0B0000 		_ADR USER_END 
 3439 1cdc 410B0000 		_ADR USER_BEGIN 
 3440 1ce0 31070000 		_ADR SUBB 
 3441 1ce4 21070000 		_ADR PLUS 
 3442 1ce8 55050000 		_DOLIT PAGE_SIZE 
 3442      00040000 
 3443 1cf0 850C0000 		_ADR SLMOD 
 3444 1cf4 69060000 		_ADR SWAP 
 3445 1cf8 91050000 		_QBRAN 1f 
 3445      041D0000 
 3446 1d00 7D070000 		_ADR ONEP
 3447              	1:
 3448 1d04 1D040000 		_UNNEST  
 3449              	
 3450              	// IMG? ( n -- T|F )
 3451              	// check if an image has been saved in slot n 
ARM GAS  stm32eforth-fl.s 			page 67


 3452 1d08 C21C0000 		.word _IMG_SIZE 
 3453 1d0c 04       	_IMGQ: .byte 4
 3454 1d0d 494D473F 		.ascii "IMG?"
 3455 1d11 0000BF   		.p2align 2
 3456              	IMGQ:
 3457 1d14 FEF77AFB 		_NEST 
 3458 1d18 3D1D0000 		_ADR IMG_ADR 
 3459 1d1c D1050000 		_ADR AT 
 3460 1d20 910B0000 		_ADR IMG_SIGN  
 3461 1d24 C9060000 		_ADR XORR  
 3462 1d28 D5080000 		_ADR ZEQUAL
 3463 1d2c 1D040000 		_UNNEST
 3464              	
 3465              	// IMG_ADR ( n -- a )
 3466              	// return image address from its number
 3467              	// IMG_ADR=USER_SPACE+IMG_SIZE*1024*n  
 3468 1d30 0C1D0000 		.word _IMGQ
 3469 1d34 07       	_IMG_ADR: .byte 7 
 3470 1d35 494D475F 		.ascii "IMG_ADR"
 3470      414452
 3471              		.p2align 2 
 3472              	IMG_ADR:
 3473 1d3c FEF766FB 		_NEST 
 3474 1d40 CD1C0000 		_ADR IMG_SIZE // number of pages per image. 
 3475 1d44 55050000 		_DOLIT 10
 3475      0A000000 
 3476 1d4c 11070000 		_ADR LSHIFT
 3477 1d50 41070000 		_ADR STAR     // * n 
 3478 1d54 750B0000 		_ADR IMAGE0 
 3479 1d58 21070000 		_ADR PLUS    // + USER_SPACE  
 3480 1d5c 1D040000 		_UNNEST 
 3481              	
 3482              	// LOAD_IMG ( n -- )
 3483              	// Load image in slot n in RAM. 
 3484 1d60 341D0000 		.word _IMG_ADR
 3485 1d64 08       	_LOAD_IMG: .byte 8 
 3486 1d65 4C4F4144 		.ascii "LOAD_IMG" 
 3486      5F494D47 
 3487 1d6d 0000BF   		.p2align 2 
 3488              	LOAD_IMG:
 3489 1d70 FEF74CFB 		_NEST 
 3490 1d74 59060000 		_ADR DUPP 
 3491 1d78 151D0000 		_ADR IMGQ 
 3492 1d7c 91050000 		_QBRAN 1f
 3492      CC1D0000 
 3493              	/* copy system variables to RAM */
 3494 1d84 3D1D0000 		_ADR IMG_ADR 
 3495 1d88 59060000 		_ADR DUPP 
 3496 1d8c 21060000 		_ADR TOR   // save source address 
 3497 1d90 910B0000 		_ADR IMG_SIGN 
 3498 1d94 55050000 		_DOLIT (VARS_END_OFS-IMG_SIGN_OFS) 
 3498      38000000 
 3499 1d9c 59060000 		_ADR DUPP 
 3500 1da0 21060000 		_ADR TOR 
 3501 1da4 6D0E0000 		_ADR MOVE // ( src dest count -- ) R: src count 
 3502              	/* copy user definitions */
 3503 1da8 FD050000 		_ADR RFROM 
ARM GAS  stm32eforth-fl.s 			page 68


 3504 1dac FD050000 		_ADR RFROM  
 3505 1db0 21070000 		_ADR PLUS // source address  
 3506 1db4 410B0000 		_ADR USER_BEGIN // destination address
 3507 1db8 D50D0000 		_ADR HERE  
 3508 1dbc 7D060000 		_ADR OVER 
 3509 1dc0 31070000 		_ADR SUBB  // byte count 
 3510 1dc4 6D0E0000 		_ADR MOVE
 3511 1dc8 1D040000 		_UNNEST  
 3512 1dcc 49060000 	1:	_ADR DROP 
 3513 1dd0 1D040000 		_UNNEST 
 3514              	
 3515              	
 3516              	// ERASE_MPG ( u1 u2 -- )
 3517              	// erase many pages 
 3518              	// u1 first page number 
 3519              	// u2 how many pages  
 3520 1dd4 641D0000 		.word _LOAD_IMG
 3521 1dd8 09       	_ERASE_MPG: .byte 9 
 3522 1dd9 45524153 		.ascii "ERASE_MPG"	
 3522      455F4D50 
 3522      47
 3523 1de2 00BF     		.p2align 2 
 3524              	ERASE_MPG:
 3525 1de4 FEF712FB 		_NEST 
 3526 1de8 21060000 		_ADR TOR 
 3527 1dec 9D1E0000 		_ADR PG_TO_ADR 
 3528 1df0 A3050000 		_BRAN 2f 
 3528      141E0000 
 3529              	1:
 3530 1df8 59060000 		_ADR DUPP 
 3531 1dfc 21060000 		_ADR TOR 
 3532 1e00 E51B0000 		_ADR EPAGE 
 3533 1e04 FD050000 		_ADR RFROM
 3534 1e08 55050000 		_DOLIT PAGE_SIZE 
 3534      00040000 
 3535 1e10 21070000 		_ADR PLUS 
 3536              	2:
 3537 1e14 79050000 		_DONXT 1b 
 3537      F81D0000 
 3538 1e1c 07040000 		_ADR TPOP 
 3539 1e20 1D040000 		_UNNEST 
 3540              	
 3541              	// FLSH_WR ( src dest u -- dest+u )
 3542              	// write u words to flash memory 
 3543 1e24 D81D0000 		.word _ERASE_MPG
 3544 1e28 07       	_FLSH_WR: .byte 7 
 3545 1e29 464C5348 		.ascii "FLSH_WR"
 3545      5F5752
 3546              		.p2align  
 3547              	FLSH_WR: 
 3548 1e30 FEF7ECFA 		_NEST 
 3549 1e34 21060000 		_ADR TOR
 3550 1e38 A3050000 		_BRAN 3f  
 3550      601E0000 
 3551              	/* write system variables to FLASH */
 3552 1e40 21060000 	2:  _ADR TOR  // destination address 
 3553 1e44 59060000 		_ADR DUPP 
ARM GAS  stm32eforth-fl.s 			page 69


 3554 1e48 D1050000 		_ADR AT   // get data 
 3555 1e4c 11060000 		_ADR RAT  // get destination address 
 3556 1e50 791C0000 		_ADR ISTOR
 3557 1e54 BD070000 		_ADR CELLP  // increment source address 
 3558 1e58 FD050000 		_ADR RFROM 
 3559 1e5c BD070000 		_ADR CELLP  // increment dest address 
 3560 1e60 79050000 	3:	_DONXT 2b
 3560      401E0000 
 3561 1e68 21060000 		_ADR TOR 
 3562 1e6c 49060000 		_ADR DROP 
 3563 1e70 FD050000 		_ADR RFROM 
 3564 1e74 1D040000 		_UNNEST 
 3565              	
 3566              	// ADR>PG ( a -- n )
 3567              	// convert address to page number, {0..127} 
 3568 1e78 281E0000 		.word _FLSH_WR
 3569 1e7c 06       	_ADR_TO_PG: .byte 6 
 3570 1e7d 4144523E 		.ascii "ADR>PG" 
 3570      5047
 3571 1e83 00       		.p2align 2 
 3572              	ADR_TO_PG: 
 3573 1e84 4FEA9525 		lsr r5,#10 
 3574 1e88 05F07F05 		and r5,#127 
 3575 1e8c FEF7C2BA 		_NEXT  
 3576              	
 3577              	// PG>ADR ( n -- a )
 3578              	// convert page# to address 
 3579 1e90 7C1E0000 		.word _ADR_TO_PG
 3580 1e94 06       	_PG_TO_ADR: .byte 6 
 3581 1e95 50473E41 		.ascii "PG>ADR" 
 3581      4452
 3582 1e9b 00       		.p2align 2 
 3583              	PG_TO_ADR:
 3584 1e9c C0F20205 		movt r5,#2
 3585 1ea0 4FEA8525 		lsl r5,#10 
 3586 1ea4 FEF7B6BA 		_NEXT 
 3587              	
 3588              	// ERASE_IMG ( n -- )
 3589              	// erase image in slot n  
 3590 1ea8 941E0000 		.word _PG_TO_ADR 
 3591 1eac 09       	_ERASE_IMG: .byte 9
 3592 1ead 45524153 		.ascii "ERASE_IMG"
 3592      455F494D 
 3592      47
 3593 1eb6 00BF     		.p2align 2
 3594              	ERASE_IMG:
 3595 1eb8 FEF7A8FA 		_NEST
 3596 1ebc 3D1D0000 		_ADR IMG_ADR 
 3597 1ec0 CD1C0000 		_ADR IMG_SIZE 
 3598 1ec4 21060000 		_ADR TOR 
 3599 1ec8 A3050000 		_BRAN 2f 
 3599      E41E0000 
 3600 1ed0 59060000 	1:	_ADR DUPP 
 3601 1ed4 E51B0000 		_ADR EPAGE
 3602 1ed8 55050000 		_DOLIT PAGE_SIZE
 3602      00040000 
 3603 1ee0 21070000 		_ADR PLUS  
ARM GAS  stm32eforth-fl.s 			page 70


 3604 1ee4 79050000 	2:	_DONXT 1b 
 3604      D01E0000 
 3605 1eec 49060000 		_ADR DROP 
 3606 1ef0 1D040000 		_UNNEST 
 3607              	
 3608              	// SAVE_IMG ( n -- )
 3609              	// copy in flash RAM system variables and user defintitions.
 3610              	// n is image slot number 
 3611 1ef4 AC1E0000 		.word _ERASE_IMG	
 3612 1ef8 08       	_SAVE_IMG: .byte 8 
 3613 1ef9 53415645 		.ascii "SAVE_IMG"
 3613      5F494D47 
 3614 1f01 0000BF   		.p2align 2
 3615              	SAVE_IMG:
 3616 1f04 FEF782FA 		_NEST 
 3617 1f08 D50D0000 		_ADR HERE 
 3618 1f0c 410B0000 		_ADR USER_BEGIN
 3619 1f10 E9080000 		_ADR EQUAL 
 3620 1f14 91050000 		_QBRAN 1f 
 3620      241F0000 
 3621 1f1c 49060000 		_ADR DROP 
 3622 1f20 1D040000 		_UNNEST  // nothing to save 
 3623 1f24 59060000 	1:	_ADR DUPP 
 3624 1f28 151D0000 		_ADR IMGQ 
 3625 1f2c 91050000 		_QBRAN 2f
 3625      3C1F0000 
 3626              	/* delete saved image */
 3627 1f34 59060000 		_ADR DUPP 
 3628 1f38 B91E0000 		_ADR ERASE_IMG 
 3629              	/* save system variables */
 3630 1f3c 3D1D0000 	2:	_ADR IMG_ADR // where to save
 3631 1f40 910B0000 		_ADR IMG_SIGN 
 3632 1f44 69060000 		_ADR SWAP  //  ( src dest --  
 3633 1f48 55050000 		_DOLIT (VARS_END_OFS-IMG_SIGN_OFS) 
 3633      38000000 
 3634 1f50 01080000 		_ADR CELLSL  // word count 
 3635 1f54 311E0000 		_ADR FLSH_WR  // ( src dest count -- dest+u )
 3636              	/* write user definitions */
 3637 1f58 410B0000 		_ADR USER_BEGIN
 3638 1f5c 69060000 		_ADR SWAP  // ( src dest+ -- )
 3639 1f60 D50D0000 		_ADR HERE   
 3640 1f64 410B0000 		_ADR USER_BEGIN 
 3641 1f68 31070000 		_ADR SUBB 
 3642 1f6c 01080000 		_ADR CELLSL  // src dest+ count -- 
 3643 1f70 311E0000 		_ADR FLSH_WR  
 3644 1f74 1D040000 		_UNNEST 
 3645              	
 3646              	// TURNKEY ( -- "WORD") 
 3647              	// set autorun program in 'BOOT variable 
 3648              	// and save image in slot 0.
 3649 1f78 F81E0000 		.word _SAVE_IMG
 3650 1f7c 07       	_TURNKEY: .byte 7
 3651 1f7d 5455524E 		.ascii "TURNKEY"
 3651      4B4559
 3652              		.p2align 2 
 3653              	TURNKEY:
 3654 1f84 FEF742FA 		_NEST 
ARM GAS  stm32eforth-fl.s 			page 71


 3655 1f88 11200000 		_ADR TICK 
 3656 1f8c 4D0A0000 		_ADR TBOOT 
 3657 1f90 BD050000 		_ADR STORE 
 3658 1f94 55050000 		_DOLIT  0 
 3658      00000000 
 3659 1f9c 051F0000 		_ADR SAVE_IMG 
 3660 1fa0 1D040000 		_UNNEST
 3661              	
 3662 1fa4 7C1F0000 		.word _TURNKEY
 3663 1fa8 06       	_FORGET: .byte 6 
 3664 1fa9 464F5247 		.ascii "FORGET"
 3664      4554
 3665 1faf 00       		.p2align 2
 3666              	FORGET:
 3667 1fb0 FEF72CFA 		_NEST 
 3668 1fb4 C9160000 		_ADR TOKEN 
 3669 1fb8 59060000 		_ADR DUPP 
 3670 1fbc 91050000 		_QBRAN 9f 
 3670      F81F0000 
 3671 1fc4 4D180000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 3672 1fc8 31080000 		_ADR QDUP 
 3673 1fcc 91050000 		_QBRAN 8f
 3673      F41F0000 
 3674 1fd4 CD070000 		_ADR CELLM // ( ca la )
 3675 1fd8 59060000 		_ADR DUPP 
 3676 1fdc FD0A0000 		_ADR CPP   
 3677 1fe0 BD050000 		_ADR STORE
 3678 1fe4 D1050000 		_ADR AT 
 3679 1fe8 250B0000 		_ADR LAST 
 3680 1fec BD050000 		_ADR STORE
 3681 1ff0 55240000 		_ADR OVERT 
 3682 1ff4 49060000 	8:  _ADR DROP 
 3683 1ff8 1D040000 	9:	_UNNEST 
 3684              	
 3685              		.p2align 2 
 3686              	flash_regs:
 3687 1ffc 00200240 		.word FLASH_BASE_ADR // 0 
 3688 2000 23016745 		.word FLASH_KEY1   // 4 
 3689 2004 AB89EFCD 		.word FLASH_KEY2   // 8
 3690              	
 3691              	// **************************************************************************
 3692              	//  The compiler
 3693              	
 3694              	//    '	   ( -- ca )
 3695              	// 	Search context vocabularies for the next word in input stream.
 3696              	
 3697 2008 A81F0000 		.word	_FORGET
 3698 200c 01       	_TICK:	.byte  1
 3699 200d 27       		.ascii "'"
 3700 200e 00BF     		.p2align 2 	
 3701              	TICK:
 3702 2010 FEF7FCF9 		_NEST
 3703 2014 C9160000 		_ADR	TOKEN
 3704 2018 4D180000 		_ADR	NAMEQ	// ?defined
 3705 201c 91050000 		_QBRAN	TICK1
 3705      28200000 
 3706 2024 1D040000 		_UNNEST	// yes, push code address
ARM GAS  stm32eforth-fl.s 			page 72


 3707              	TICK1:	
 3708 2028 A3050000 		_BRAN	ABORT	// no, error
 3708      E4190000 
 3709              	
 3710              	//    ALLOT	( n -- )
 3711              	// 	Allocate n bytes to the ram area.
 3712              	
 3713 2030 0C200000 		.word	_TICK
 3714 2034 05       	_ALLOT:	.byte  5
 3715 2035 414C4C4F 		.ascii "ALLOT"
 3715      54
 3716 203a 00BF     		.p2align 2 	
 3717              	ALLOT:
 3718 203c FEF7E6F9 		_NEST
 3719 2040 FD0A0000 		_ADR	CPP
 3720 2044 71090000 		_ADR	PSTOR
 3721 2048 1D040000 		_UNNEST			// adjust code pointer
 3722              	
 3723              	//    ,	   ( w -- )
 3724              	// 	Compile an integer into the code dictionary.
 3725              	
 3726 204c 34200000 		.word	_ALLOT
 3727 2050 012C     	_COMMA:	.byte  1,','
 3728 2052 00BF     		.p2align 2 	
 3729              	COMMA:
 3730 2054 FEF7DAF9 		_NEST
 3731 2058 D50D0000 		_ADR	HERE
 3732 205c 59060000 		_ADR	DUPP
 3733 2060 BD070000 		_ADR	CELLP	// cell boundary
 3734 2064 FD0A0000 		_ADR	CPP
 3735 2068 BD050000 		_ADR	STORE
 3736 206c BD050000 		_ADR	STORE
 3737 2070 1D040000 		_UNNEST	// adjust code pointer, compile
 3738              		.p2align 2 
 3739              	//    [COMPILE]   ( -- //  string> )
 3740              	// 	Compile the next immediate word into code dictionary.
 3741              	
 3742 2074 50200000 		.word	_COMMA
 3743 2078 89       	_BCOMP:	.byte  IMEDD+9
 3744 2079 5B434F4D 		.ascii "[COMPILE]"
 3744      50494C45 
 3744      5D
 3745 2082 00BF     		.p2align 2 	
 3746              	BCOMP:
 3747 2084 FEF7C2F9 		_NEST
 3748 2088 11200000 		_ADR	TICK
 3749 208c 55200000 		_ADR	COMMA
 3750 2090 1D040000 		_UNNEST
 3751              	
 3752              	//    COMPILE	( -- )
 3753              	// 	Compile the next address in colon list to code dictionary.
 3754              	
 3755 2094 78200000 		.word	_BCOMP
 3756 2098 47       	_COMPI:	.byte  COMPO+7
 3757 2099 434F4D50 		.ascii "COMPILE"
 3757      494C45
 3758              		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 73


 3759              	COMPI:
 3760 20a0 FEF7B4F9 		_NEST
 3761 20a4 FD050000 		_ADR	RFROM
 3762 20a8 55050000 		_DOLIT -2 
 3762      FEFFFFFF 
 3763 20b0 A1060000 		_ADR ANDD 
 3764 20b4 59060000 		_ADR	DUPP
 3765 20b8 D1050000 		_ADR	AT
 3766 20bc A9240000 		_ADR	CALLC			// compile _ADR instruction
 3767 20c0 BD070000 		_ADR	CELLP
 3768 20c4 55050000 		_DOLIT	1
 3768      01000000 
 3769 20cc B5060000 		_ADR ORR  
 3770 20d0 21060000 		_ADR	TOR
 3771 20d4 1D040000 		_UNNEST			// adjust return address
 3772              	
 3773              	//    LITERAL	( w -- )
 3774              	// 	Compile tos to code dictionary as an integer literal.
 3775              	
 3776 20d8 98200000 		.word	_COMPI
 3777 20dc 87       	_LITER:	.byte  IMEDD+7
 3778 20dd 4C495445 		.ascii "LITERAL"
 3778      52414C
 3779              		.p2align 2 	
 3780              	LITER:
 3781 20e4 FEF792F9 		_NEST
 3782 20e8 A1200000 		_ADR	COMPI
 3783 20ec 54050000 		.word	DOLIT
 3784 20f0 55200000 		_ADR	COMMA
 3785 20f4 1D040000 		_UNNEST
 3786              	
 3787              	//    $,"	( -- )
 3788              	// 	Compile a literal string up to next " .
 3789              	
 3790              	// 	.word	_LITER
 3791              	// _STRCQ	.byte  3
 3792              	// 	.ascii "$$,"""
 3793              	// 	.p2align 2 	
 3794              	STRCQ:
 3795 20f8 FEF788F9 		_NEST
 3796 20fc 55050000 		_DOLIT -4
 3796      FCFFFFFF 
 3797 2104 FD0A0000 		_ADR	CPP
 3798 2108 71090000 		_ADR	PSTOR
 3799 210c 55050000 		_DOLIT	'\"'
 3799      22000000 
 3800 2114 A5160000 		_ADR	WORDD			// move word to code dictionary
 3801 2118 B9090000 		_ADR	COUNT
 3802 211c 21070000 		_ADR	PLUS
 3803 2120 1D0D0000 		_ADR	ALGND			// calculate aligned end of string
 3804 2124 FD0A0000 		_ADR	CPP
 3805 2128 BD050000 		_ADR	STORE
 3806 212c 1D040000 		_UNNEST 			// adjust the code pointer
 3807              	
 3808              	// **************************************************************************
 3809              	//  Structures
 3810              	
ARM GAS  stm32eforth-fl.s 			page 74


 3811              	//    FOR	 ( -- a )
 3812              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3813              	
 3814 2130 DC200000 		.word	_LITER
 3815 2134 C3       	_FOR:	.byte  COMPO+IMEDD+3
 3816 2135 464F52   		.ascii "FOR"
 3817              		.p2align 2 	
 3818              	FOR:
 3819 2138 FEF768F9 		_NEST
 3820 213c A1200000 		_ADR	COMPI
 3821 2140 20060000 		.word	TOR
 3822 2144 D50D0000 		_ADR	HERE
 3823 2148 1D040000 		_UNNEST
 3824              	
 3825              	//    BEGIN	( -- a )
 3826              	// 	Start an infinite or indefinite loop structure.
 3827              	
 3828 214c 34210000 		.word	_FOR
 3829 2150 C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 3830 2151 42454749 		.ascii "BEGIN"
 3830      4E
 3831 2156 00BF     		.p2align 2 	
 3832              	BEGIN:
 3833 2158 FEF758F9 		_NEST
 3834 215c D50D0000 		_ADR	HERE
 3835 2160 1D040000 		_UNNEST
 3836              		.p2align 2 
 3837              	//    NEXT	( a -- )
 3838              	// 	Terminate a FOR-NEXT loop structure.
 3839              	
 3840 2164 50210000 		.word	_BEGIN
 3841 2168 C4       	_FNEXT:	.byte  COMPO+IMEDD+4
 3842 2169 4E455854 		.ascii "NEXT"
 3843 216d 0000BF   		.p2align 2 	
 3844              	FNEXT:
 3845 2170 FEF74CF9 		_NEST
 3846 2174 A1200000 		_ADR	COMPI
 3847 2178 78050000 		.word	DONXT
 3848 217c 55200000 		_ADR	COMMA
 3849 2180 1D040000 		_UNNEST
 3850              	
 3851              	//    UNTIL	( a -- )
 3852              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3853              	
 3854 2184 68210000 		.word	_FNEXT
 3855 2188 C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3856 2189 554E5449 		.ascii "UNTIL"
 3856      4C
 3857 218e 00BF     		.p2align 2 	
 3858              	UNTIL:
 3859 2190 FEF73CF9 		_NEST
 3860 2194 A1200000 		_ADR	COMPI
 3861 2198 90050000 		.word	QBRAN
 3862 219c 55200000 		_ADR	COMMA
 3863 21a0 1D040000 		_UNNEST
 3864              	
 3865              	//    AGAIN	( a -- )
ARM GAS  stm32eforth-fl.s 			page 75


 3866              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3867              	
 3868 21a4 88210000 		.word	_UNTIL
 3869 21a8 C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3870 21a9 41474149 		.ascii "AGAIN"
 3870      4E
 3871 21ae 00BF     		.p2align 2 	
 3872              	AGAIN:
 3873 21b0 FEF72CF9 		_NEST
 3874 21b4 A1200000 		_ADR	COMPI
 3875 21b8 A2050000 		.word	BRAN
 3876 21bc 55200000 		_ADR	COMMA
 3877 21c0 1D040000 		_UNNEST
 3878              	
 3879              	//    IF	  ( -- A )
 3880              	// 	Begin a conditional branch structure.
 3881              	
 3882 21c4 A8210000 		.word	_AGAIN
 3883 21c8 C2       	_IFF:	.byte  COMPO+IMEDD+2
 3884 21c9 4946     		.ascii "IF"
 3885 21cb 00       		.p2align 2 	
 3886              	IFF:
 3887 21cc FEF71EF9 		_NEST
 3888 21d0 A1200000 		_ADR	COMPI
 3889 21d4 90050000 		.word	QBRAN
 3890 21d8 D50D0000 		_ADR	HERE
 3891 21dc 55050000 		_DOLIT	4
 3891      04000000 
 3892 21e4 FD0A0000 		_ADR	CPP
 3893 21e8 71090000 		_ADR	PSTOR
 3894 21ec 1D040000 		_UNNEST
 3895              	
 3896              	//    AHEAD	( -- A )
 3897              	// 	Compile a forward branch instruction.
 3898              	
 3899 21f0 C8210000 		.word	_IFF
 3900 21f4 C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 3901 21f5 41484541 		.ascii "AHEAD"
 3901      44
 3902 21fa 00BF     		.p2align 2 	
 3903              	AHEAD:
 3904 21fc FEF706F9 		_NEST
 3905 2200 A1200000 		_ADR	COMPI
 3906 2204 A2050000 		.word	BRAN
 3907 2208 D50D0000 		_ADR	HERE
 3908 220c 55050000 		_DOLIT	4
 3908      04000000 
 3909 2214 FD0A0000 		_ADR	CPP
 3910 2218 71090000 		_ADR	PSTOR
 3911 221c 1D040000 		_UNNEST
 3912              	
 3913              	//    REPEAT	( A a -- )
 3914              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3915              	
 3916 2220 F4210000 		.word	_AHEAD
 3917 2224 C6       	_REPEA:	.byte  COMPO+IMEDD+6
 3918 2225 52455045 		.ascii "REPEAT"
ARM GAS  stm32eforth-fl.s 			page 76


 3918      4154
 3919 222b 00       		.p2align 2 	
 3920              	REPEA:
 3921 222c FEF7EEF8 		_NEST
 3922 2230 B1210000 		_ADR	AGAIN
 3923 2234 D50D0000 		_ADR	HERE
 3924 2238 69060000 		_ADR	SWAP
 3925 223c BD050000 		_ADR	STORE
 3926 2240 1D040000 		_UNNEST
 3927              	
 3928              	//    THEN	( A -- )
 3929              	// 	Terminate a conditional branch structure.
 3930              	
 3931 2244 24220000 		.word	_REPEA
 3932 2248 C4       	_THENN:	.byte  COMPO+IMEDD+4
 3933 2249 5448454E 		.ascii "THEN"
 3934 224d 0000BF   		.p2align 2 	
 3935              	THENN:
 3936 2250 FEF7DCF8 		_NEST
 3937 2254 D50D0000 		_ADR	HERE
 3938 2258 69060000 		_ADR	SWAP
 3939 225c BD050000 		_ADR	STORE
 3940 2260 1D040000 		_UNNEST
 3941              	
 3942              	//    AFT	 ( a -- a A )
 3943              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3944              	
 3945 2264 48220000 		.word	_THENN
 3946 2268 C3       	_AFT:	.byte  COMPO+IMEDD+3
 3947 2269 414654   		.ascii "AFT"
 3948              		.p2align 2 	
 3949              	AFT:
 3950 226c FEF7CEF8 		_NEST
 3951 2270 49060000 		_ADR	DROP
 3952 2274 FD210000 		_ADR	AHEAD
 3953 2278 59210000 		_ADR	BEGIN
 3954 227c 69060000 		_ADR	SWAP
 3955 2280 1D040000 		_UNNEST
 3956              	
 3957              	//    ELSE	( A -- A )
 3958              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3959              	
 3960 2284 68220000 		.word	_AFT
 3961 2288 C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 3962 2289 454C5345 		.ascii "ELSE"
 3963 228d 0000BF   		.p2align 2 	
 3964              	ELSEE:
 3965 2290 FEF7BCF8 		_NEST
 3966 2294 FD210000 		_ADR	AHEAD
 3967 2298 69060000 		_ADR	SWAP
 3968 229c 51220000 		_ADR	THENN
 3969 22a0 1D040000 		_UNNEST
 3970              	
 3971              	//    WHILE	( a -- A a )
 3972              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3973              	
 3974 22a4 88220000 		.word	_ELSEE
ARM GAS  stm32eforth-fl.s 			page 77


 3975 22a8 C5       	_WHILE:	.byte  COMPO+IMEDD+5
 3976 22a9 5748494C 		.ascii "WHILE"
 3976      45
 3977 22ae 00BF     		.p2align 2 	
 3978              	WHILE:
 3979 22b0 FEF7ACF8 		_NEST
 3980 22b4 CD210000 		_ADR	IFF
 3981 22b8 69060000 		_ADR	SWAP
 3982 22bc 1D040000 		_UNNEST
 3983              	
 3984              	//    ABORT"	( -- //  string> )
 3985              	// 	Conditional abort with an error message.
 3986              	
 3987 22c0 A8220000 		.word	_WHILE
 3988 22c4 86       	_ABRTQ:	.byte  IMEDD+6
 3989 22c5 41424F52 		.ascii "ABORT\""
 3989      5422
 3990 22cb 00       		.p2align 2 	
 3991              	ABRTQ:
 3992 22cc FEF79EF8 		_NEST
 3993 22d0 A1200000 		_ADR	COMPI
 3994 22d4 101A0000 		.word	ABORQ
 3995 22d8 F9200000 		_ADR	STRCQ
 3996 22dc 1D040000 		_UNNEST
 3997              	
 3998              	//    $"	( -- //  string> )
 3999              	// 	Compile an inlineDCB literal.
 4000              	
 4001 22e0 C4220000 		.word	_ABRTQ
 4002 22e4 82       	_STRQ:	.byte  IMEDD+2
 4003 22e5 2422     		.byte	'$','"'
 4004 22e7 00       		.p2align 2 	
 4005              	STRQ:
 4006 22e8 FEF790F8 		_NEST
 4007 22ec A1200000 		_ADR	COMPI
 4008 22f0 9C130000 		.word	STRQP
 4009 22f4 F9200000 		_ADR	STRCQ
 4010 22f8 1D040000 		_UNNEST
 4011              	
 4012              	//    ."	( -- //  string> )
 4013              	// 	Compile an inline word  literal to be typed out at run time.
 4014              	
 4015 22fc E4220000 		.word	_STRQ
 4016 2300 C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 4017 2301 2E22     		.byte	'.','"'
 4018 2303 00       		.p2align 2 	
 4019              	DOTQ:
 4020 2304 FEF782F8 		_NEST
 4021 2308 A1200000 		_ADR	COMPI
 4022 230c B8130000 		.word	DOTQP
 4023 2310 F9200000 		_ADR	STRCQ
 4024 2314 1D040000 		_UNNEST
 4025              	
 4026              	// **************************************************************************
 4027              	//  Name compiler
 4028              	
 4029              	//    ?UNIQUE	( a -- a )
ARM GAS  stm32eforth-fl.s 			page 78


 4030              	// 	Display a warning message if the word already exists.
 4031              	
 4032 2318 00230000 		.word	_DOTQ
 4033 231c 07       	_UNIQU:	.byte  7
 4034 231d 3F554E49 		.ascii "?UNIQUE"
 4034      515545
 4035              		.p2align 2 	
 4036              	UNIQU:
 4037 2324 FEF772F8 		_NEST
 4038 2328 59060000 		_ADR	DUPP
 4039 232c 4D180000 		_ADR	NAMEQ			// ?name exists
 4040 2330 91050000 		_QBRAN	UNIQ1	// redefinitions are OK
 4040      50230000 
 4041 2338 B9130000 		_ADR	DOTQP
 4042 233c 07       		.byte	7
 4043 233d 20726544 		.ascii " reDef "		// but warn the user
 4043      656620
 4044              		.p2align 2 	
 4045 2344 7D060000 		_ADR	OVER
 4046 2348 B9090000 		_ADR	COUNT
 4047 234c 1D130000 		_ADR	TYPEE			// just in case its not planned
 4048              	UNIQ1:
 4049 2350 49060000 		_ADR	DROP
 4050 2354 1D040000 		_UNNEST
 4051              	
 4052              	//    $,n	 ( na -- )
 4053              	// 	Build a new dictionary name using the data at na.
 4054              	
 4055              	// 	.word	_UNIQU
 4056              	// _SNAME	.byte  3
 4057              	// 	.ascii "$$,n"
 4058              	// 	.p2align 2 	
 4059              	SNAME:
 4060 2358 FEF758F8 		_NEST
 4061 235c 59060000 		_ADR	DUPP			//  na na
 4062 2360 F1050000 		_ADR	CAT			//  ?null input
 4063 2364 91050000 		_QBRAN	SNAM1
 4063      A0230000 
 4064 236c 25230000 		_ADR	UNIQU			//  na
 4065 2370 250B0000 		_ADR	LAST			//  na last
 4066 2374 D1050000 		_ADR	AT			//  na la
 4067 2378 55200000 		_ADR	COMMA			//  na
 4068 237c 59060000 		_ADR	DUPP			//  na na
 4069 2380 250B0000 		_ADR	LAST			//  na na last
 4070 2384 BD050000 		_ADR	STORE			//  na , save na for vocabulary link
 4071 2388 B9090000 		_ADR	COUNT			//  na+1 count
 4072 238c 21070000 		_ADR	PLUS			//  na+1+count
 4073 2390 1D0D0000 		_ADR	ALGND			//  word boundary
 4074 2394 FD0A0000 		_ADR	CPP
 4075 2398 BD050000 		_ADR	STORE			//  top of dictionary now
 4076 239c 1D040000 		_UNNEST
 4077              	SNAM1:
 4078 23a0 9D130000 		_ADR	STRQP
 4079 23a4 07       		.byte	7
 4080 23a5 206E616D 		.ascii " name? "
 4080      653F20
 4081 23ac FFF71ABB 		B.W	ABORT
ARM GAS  stm32eforth-fl.s 			page 79


 4082              	
 4083              	//    $COMPILE	( a -- )
 4084              	// 	Compile next word to code dictionary as a token or literal.
 4085              	
 4086 23b0 1C230000 		.word	_UNIQU
 4087 23b4 08       	_SCOMP:	.byte  8
 4088 23b5 2424434F 		.ascii "$$COMPILE"
 4088      4D50494C 
 4088      45
 4089 23be 00BF     		.p2align 2 	
 4090              	SCOMP:
 4091 23c0 FEF724F8 		_NEST
 4092 23c4 4D180000 		_ADR	NAMEQ
 4093 23c8 31080000 		_ADR	QDUP	// defined?
 4094 23cc 91050000 		_QBRAN	SCOM2
 4094      FC230000 
 4095 23d4 D1050000 		_ADR	AT
 4096 23d8 55050000 		_DOLIT	IMEDD
 4096      80000000 
 4097 23e0 A1060000 		_ADR	ANDD	// immediate?
 4098 23e4 91050000 		_QBRAN	SCOM1
 4098      F4230000 
 4099 23ec 6D050000 		_ADR	EXECU
 4100 23f0 1D040000 		_UNNEST			// it's immediate, execute
 4101              	SCOM1:
 4102 23f4 A9240000 		_ADR	CALLC			// it's not immediate, compile
 4103 23f8 1D040000 		_UNNEST	
 4104              	SCOM2:
 4105 23fc 55110000 		_ADR	NUMBQ
 4106 2400 91050000 		_QBRAN	SCOM3
 4106      10240000 
 4107 2408 E5200000 		_ADR	LITER
 4108 240c 1D040000 		_UNNEST			// compile number as integer
 4109              	SCOM3: // compilation abort 
 4110 2410 1D240000 		_ADR COLON_ABORT 
 4111 2414 A3050000 		_BRAN	ABORT			// error
 4111      E4190000 
 4112              	
 4113              	// before aborting a compilation 
 4114              	// reset HERE and LAST
 4115              	// to previous values. 
 4116              	COLON_ABORT:
 4117 241c FDF7F6FF 		_NEST 
 4118 2420 250B0000 		_ADR LAST 
 4119 2424 D1050000 		_ADR AT 
 4120 2428 CD070000 		_ADR CELLM 
 4121 242c 59060000 		_ADR DUPP 
 4122 2430 FD0A0000 		_ADR CPP  
 4123 2434 BD050000 		_ADR STORE 
 4124 2438 D1050000 		_ADR AT 
 4125 243c 250B0000 		_ADR LAST 
 4126 2440 BD050000 		_ADR STORE 
 4127 2444 1D040000 		_UNNEST 
 4128              	
 4129              	//    OVERT	( -- )
 4130              	// 	Link a new word into the current vocabulary.
 4131              	
ARM GAS  stm32eforth-fl.s 			page 80


 4132 2448 B4230000 		.word	_SCOMP
 4133 244c 05       	_OVERT:	.byte  5
 4134 244d 4F564552 		.ascii "OVERT"
 4134      54
 4135 2452 00BF     		.p2align 2 	
 4136              	OVERT:
 4137 2454 FDF7DAFF 		_NEST
 4138 2458 250B0000 		_ADR	LAST
 4139 245c D1050000 		_ADR	AT
 4140 2460 E90A0000 		_ADR	CNTXT
 4141 2464 BD050000 		_ADR	STORE
 4142 2468 1D040000 		_UNNEST
 4143              	
 4144              	//    ; 	   ( -- )
 4145              	// 	Terminate a colon definition.
 4146              	
 4147 246c 4C240000 		.word	_OVERT
 4148 2470 C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 4149 2471 3B       		.ascii ";"
 4150 2472 00BF     		.p2align 2 	
 4151              	SEMIS:
 4152 2474 FDF7CAFF 		_NEST
 4153              	//	_DOLIT	_UNNEST
 4154 2478 55200000 		_ADR	COMMA
 4155 247c AD1A0000 		_ADR	LBRAC
 4156 2480 55240000 		_ADR	OVERT
 4157 2484 1D040000 		_UNNEST
 4158              	
 4159              	//    ]	   ( -- )
 4160              	// 	Start compiling the words in the input stream.
 4161              	
 4162 2488 70240000 		.word	_SEMIS
 4163 248c 01       	_RBRAC:	.byte  1
 4164 248d 5D       		.ascii "]"
 4165 248e 00BF     		.p2align 2 	
 4166              	RBRAC:
 4167 2490 FDF7BCFF 		_NEST
 4168 2494 55050000 		_DOLIT	SCOMP
 4168      C0230000 
 4169 249c BD0A0000 		_ADR	TEVAL
 4170 24a0 BD050000 		_ADR	STORE
 4171 24a4 1D040000 		_UNNEST
 4172              	
 4173              	//    BL.W	( ca -- )
 4174              	// 	Assemble a branch-link long instruction to ca.
 4175              	// 	BL.W is split into 2 16 bit instructions with 11 bit address fields.
 4176              	
 4177              	// 	.word	_RBRAC
 4178              	// _CALLC	.byte  5
 4179              	// 	.ascii "call,"
 4180              	// 	.p2align 2 	
 4181              	CALLC:
 4182 24a8 FDF7B0FF 		_NEST 
 4183 24ac 1D040000 		_UNNEST 
 4184              	
 4185              	
 4186              	// 	:	( -- //  string> )
ARM GAS  stm32eforth-fl.s 			page 81


 4187              	// 	Start a new colon definition using next word as its name.
 4188              	
 4189 24b0 8C240000 		.word	_RBRAC
 4190 24b4 01       	_COLON:	.byte  1
 4191 24b5 3A       		.ascii ":"
 4192 24b6 00BF     		.p2align 2 	
 4193              	COLON:
 4194 24b8 FDF7A8FF 		_NEST
 4195 24bc C9160000 		_ADR	TOKEN
 4196 24c0 59230000 		_ADR	SNAME
 4197 24c4 55050000 		_DOLIT	NEST
 4197      0C040000 
 4198 24cc 55200000 		_ADR	COMMA
 4199 24d0 91240000 		_ADR	RBRAC
 4200 24d4 1D040000 		_UNNEST
 4201              	
 4202              	//    IMMEDIATE   ( -- )
 4203              	// 	Make the last compiled word an immediate word.
 4204              	
 4205 24d8 B4240000 		.word	_COLON
 4206 24dc 09       	_IMMED:	.byte  9
 4207 24dd 494D4D45 		.ascii "IMMEDIATE"
 4207      44494154 
 4207      45
 4208 24e6 00BF     		.p2align 2 	
 4209              	IMMED:
 4210 24e8 FDF790FF 		_NEST
 4211 24ec 55050000 		_DOLIT	IMEDD
 4211      80000000 
 4212 24f4 250B0000 		_ADR	LAST
 4213 24f8 D1050000 		_ADR	AT
 4214 24fc D1050000 		_ADR	AT
 4215 2500 B5060000 		_ADR	ORR
 4216 2504 250B0000 		_ADR	LAST
 4217 2508 D1050000 		_ADR	AT
 4218 250c BD050000 		_ADR	STORE
 4219 2510 1D040000 		_UNNEST
 4220              	
 4221              	// **************************************************************************
 4222              	//  Defining words
 4223              	
 4224              	//    CONSTANT	( u -- //  string> )
 4225              	// 	Compile a new constant.
 4226              	
 4227 2514 DC240000 		.word	_IMMED
 4228 2518 08       	_CONST:	.byte  8
 4229 2519 434F4E53 		.ascii "CONSTANT"
 4229      54414E54 
 4230 2521 0000BF   		.p2align 2 	
 4231              	CONST:
 4232 2524 FDF772FF 		_NEST 
 4233 2528 C9160000 		_ADR	TOKEN
 4234 252c 59230000 		_ADR	SNAME
 4235 2530 55240000 		_ADR	OVERT
 4236 2534 55050000 		_DOLIT	NEST
 4236      0C040000 
 4237 253c 55200000 		_ADR	COMMA
ARM GAS  stm32eforth-fl.s 			page 82


 4238 2540 55050000 		_DOLIT	DOCON
 4238      EA090000 
 4239 2548 A9240000 		_ADR	CALLC
 4240 254c 55200000 		_ADR	COMMA
 4241 2550 1D040000 		_UNNEST
 4242              	
 4243              	//    CREATE	( -- //  string> )
 4244              	// 	Compile a new array entry without allocating code space.
 4245              	
 4246 2554 18250000 		.word	_CONST
 4247 2558 06       	_CREAT:	.byte  6
 4248 2559 43524541 		.ascii "CREATE"
 4248      5445
 4249 255f 00       		.p2align 2 	
 4250              	CREAT:
 4251 2560 FDF754FF 		_NEST 
 4252 2564 C9160000 		_ADR	TOKEN
 4253 2568 59230000 		_ADR	SNAME
 4254 256c 55240000 		_ADR	OVERT
 4255 2570 55050000 		_DOLIT	NEST
 4255      0C040000 
 4256 2578 55200000 		_ADR	COMMA
 4257 257c 55050000 		_DOLIT	DOVAR
 4257      E0090000 
 4258 2584 A9240000 		_ADR	CALLC
 4259 2588 1D040000 		_UNNEST
 4260              	
 4261              	//    VARIABLE	( -- //  string> )
 4262              	// 	Compile a new variable initialized to 0.
 4263              	
 4264 258c 58250000 		.word	_CREAT
 4265 2590 08       	_VARIA:	.byte  8
 4266 2591 56415249 		.ascii "VARIABLE"
 4266      41424C45 
 4267 2599 0000BF   		.p2align 2 	
 4268              	VARIA:
 4269 259c FDF736FF 		_NEST
 4270 25a0 61250000 		_ADR	CREAT
 4271 25a4 55050000 		_DOLIT	0
 4271      00000000 
 4272 25ac 55200000 		_ADR	COMMA
 4273 25b0 1D040000 		_UNNEST
 4274              	
 4275              	// **************************************************************************
 4276              	//  Tools
 4277              	
 4278              	//    dm+	 ( a u -- a )
 4279              	// 	Dump u bytes from , leaving a+u on the stack.
 4280              	
 4281              	// 	.word	_VARIA
 4282              	// _DMP	.byte  3
 4283              	// 	.ascii "dm+"
 4284              	// 	.p2align 2 	
 4285              	DMP:
 4286 25b4 FDF72AFF 		_NEST
 4287 25b8 7D060000 		_ADR	OVER
 4288 25bc 55050000 		_DOLIT	4
ARM GAS  stm32eforth-fl.s 			page 83


 4288      04000000 
 4289 25c4 FD130000 		_ADR	UDOTR			// display address
 4290 25c8 C9120000 		_ADR	SPACE
 4291 25cc 21060000 		_ADR	TOR			// start count down loop
 4292 25d0 A3050000 		_BRAN	PDUM2			// skip first pass
 4292      F0250000 
 4293              	PDUM1:
 4294 25d8 59060000 	  _ADR	DUPP
 4295 25dc F1050000 		_ADR	CAT
 4296 25e0 55050000 		_DOLIT	3
 4296      03000000 
 4297 25e8 FD130000 		_ADR	UDOTR			// display numeric data
 4298 25ec 7D070000 		_ADR	ONEP			// increment address
 4299              	PDUM2:
 4300 25f0 79050000 	  _ADR	DONXT
 4301 25f4 D8250000 		.word	PDUM1	// loop till done
 4302 25f8 1D040000 		_UNNEST
 4303              		.p2align 2 
 4304              	//    DUMP	( a u -- )
 4305              	// 	Dump u bytes from a, in a formatted manner.
 4306              	
 4307 25fc 90250000 		.word	_VARIA
 4308 2600 04       	_DUMP:	.byte  4
 4309 2601 44554D50 		.ascii "DUMP"
 4310 2605 0000BF   		.p2align 2 	
 4311              	DUMP:
 4312 2608 FDF700FF 		_NEST
 4313 260c 610A0000 		_ADR	BASE
 4314 2610 D1050000 		_ADR	AT
 4315 2614 21060000 		_ADR	TOR
 4316 2618 A5100000 		_ADR	HEX			// save radix,set hex
 4317 261c 55050000 		_DOLIT	16
 4317      10000000 
 4318 2624 BD0C0000 		_ADR	SLASH			// change count to lines
 4319 2628 21060000 		_ADR	TOR
 4320 262c A3050000 		_BRAN	DUMP4			// start count down loop
 4320      5C260000 
 4321              	DUMP1:
 4322 2634 51130000 	  _ADR	CR
 4323 2638 55050000 		_DOLIT	16
 4323      10000000 
 4324 2640 6D080000 		_ADR	DDUP
 4325 2644 B5250000 		_ADR	DMP			// display numeric
 4326 2648 45080000 		_ADR	ROT
 4327 264c 45080000 		_ADR	ROT
 4328 2650 C9120000 		_ADR	SPACE
 4329 2654 C9120000 		_ADR	SPACE
 4330 2658 1D130000 		_ADR	TYPEE			// display printable characters
 4331              	DUMP4:
 4332 265c 79050000 	  _DONXT	DUMP1	// loop till done
 4332      34260000 
 4333              	DUMP3:
 4334 2664 49060000 		_ADR	DROP
 4335 2668 FD050000 		_ADR	RFROM
 4336 266c 610A0000 		_ADR	BASE
 4337 2670 BD050000 		_ADR	STORE			// restore radix
 4338 2674 1D040000 		_UNNEST
ARM GAS  stm32eforth-fl.s 			page 84


 4339              	
 4340              	//    .S	  ( ... -- ... )
 4341              	// 	Display the contents of the data stack.
 4342              	
 4343 2678 00260000 		.word	_DUMP
 4344              	_DOTS:
 4345 267c 02       		.byte  2
 4346 267d 2E53     		.ascii ".S"
 4347 267f 00       		.p2align 2 	
 4348              	DOTS:
 4349 2680 FDF7C4FE 		_NEST
 4350 2684 C9120000 		_ADR	SPACE
 4351 2688 850D0000 		_ADR	DEPTH			// stack depth
 4352 268c 21060000 		_ADR	TOR			// start count down loop
 4353 2690 A3050000 		_BRAN	DOTS2			// skip first pass
 4353      A4260000 
 4354              	DOTS1:
 4355 2698 11060000 		_ADR	RAT
 4356 269c AD0D0000 		_ADR	PICK
 4357 26a0 55140000 		_ADR	DOT			// index stack, display contents
 4358              	DOTS2:
 4359 26a4 79050000 		_DONXT	DOTS1	// loop till done
 4359      98260000 
 4360 26ac C9120000 		_ADR	SPACE
 4361 26b0 1D040000 		_UNNEST
 4362              	
 4363              	//    >NAME	( ca -- na | F )
 4364              	// 	Convert code address to a name address.
 4365              	
 4366 26b4 7C260000 		.word	_DOTS
 4367 26b8 05       	_TNAME:	.byte  5
 4368 26b9 3E4E414D 		.ascii ">NAME"
 4368      45
 4369 26be 00BF     		.p2align 2 	
 4370              	TNAME:
 4371 26c0 FDF7A4FE 		_NEST
 4372 26c4 21060000 		_ADR	TOR			//  
 4373 26c8 E90A0000 		_ADR	CNTXT			//  va
 4374 26cc D1050000 		_ADR	AT			//  na
 4375              	TNAM1:
 4376 26d0 59060000 		_ADR	DUPP			//  na na
 4377 26d4 91050000 		_ADR	QBRAN
 4378 26d8 04270000 		.word	TNAM2	//  vocabulary end, no match
 4379 26dc 59060000 		_ADR	DUPP			//  na na
 4380 26e0 E5160000 		_ADR	NAMET			//  na ca
 4381 26e4 11060000 		_ADR	RAT			//  na ca code
 4382 26e8 C9060000 		_ADR	XORR			//  na f --
 4383 26ec 91050000 		_QBRAN	TNAM2
 4383      04270000 
 4384 26f4 CD070000 		_ADR	CELLM			//  la 
 4385 26f8 D1050000 		_ADR	AT			//  next_na
 4386 26fc A3050000 		_BRAN	TNAM1
 4386      D0260000 
 4387              	TNAM2:	
 4388 2704 FD050000 		_ADR	RFROM
 4389 2708 49060000 		_ADR	DROP			//  0|na --
 4390 270c 1D040000 		_UNNEST			// 0
ARM GAS  stm32eforth-fl.s 			page 85


 4391              	
 4392              	//    .ID	 ( na -- )
 4393              	// 	Display the name at address.
 4394              	
 4395 2710 B8260000 		.word	_TNAME
 4396 2714 03       	_DOTID:	.byte  3
 4397 2715 2E4944   		.ascii ".ID"
 4398              		.p2align 2 	
 4399              	DOTID:
 4400 2718 FDF778FE 		_NEST
 4401 271c 31080000 		_ADR	QDUP			// if zero no name
 4402 2720 91050000 		_QBRAN	DOTI1
 4402      40270000 
 4403 2728 B9090000 		_ADR	COUNT
 4404 272c 55050000 		_DOLIT	0x1F
 4404      1F000000 
 4405 2734 A1060000 		_ADR	ANDD			// mask lexicon bits
 4406 2738 1D130000 		_ADR	TYPEE
 4407 273c 1D040000 		_UNNEST			// display name string
 4408              	DOTI1:
 4409 2740 B9130000 		_ADR	DOTQP
 4410 2744 09       		.byte	9
 4411 2745 207B6E6F 		.ascii " {noName}"
 4411      4E616D65 
 4411      7D
 4412 274e 00BF     		.p2align 2 	
 4413 2750 1D040000 		_UNNEST
 4414              	
 4415              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 4416              	.if WANT_SEE 
 4417              	//    SEE	 ( -- //  string> )
 4418              	// 	A simple decompiler.
 4419              	
 4420              		.word	_DOTID
 4421              	_SEE:	.byte  3
 4422              		.ascii "SEE"
 4423              		.p2align 2 	
 4424              	SEE:
 4425              		_NEST
 4426              		_ADR	TICK	//  ca --, starting address
 4427              		_ADR	CR	
 4428              		_DOLIT	20
 4429              		_ADR	TOR
 4430              	SEE1:
 4431              		_ADR	CELLP			//  a
 4432              		_ADR	DUPP			//  a a
 4433              		_ADR	DECOMP		//  a
 4434              		_DONXT	SEE1
 4435              		_ADR	DROP
 4436              		_UNNEST
 4437              	
 4438              	// 	DECOMPILE ( a -- )
 4439              	// 	Convert code in a.  Display name of command or as data.
 4440              	
 4441              		.word	_SEE
 4442              	_DECOM:	.byte  9
 4443              		.ascii "DECOMPILE"
ARM GAS  stm32eforth-fl.s 			page 86


 4444              		.p2align 2 
 4445              		
 4446              	DECOMP:	
 4447              		_NEST
 4448              		_ADR	DUPP			//  a a
 4449              	// 	_ADR	TOR			//  a
 4450              		_ADR	AT			//  a code
 4451              		_ADR	DUPP			//  a code code
 4452              		_DOLIT	0xF800D000 //0xF800F800
 4453              		_ADR	ANDD
 4454              		_DOLIT	0xF000D000 //0xF800F000
 4455              		_ADR	EQUAL			//  a code ?
 4456              		_ADR	INVER 
 4457              		_ADR	QBRAN
 4458              		.word	DECOM2	//  not a command
 4459              		//  a valid_code --, extract address and display name
 4460              		MOVW	R0,#0xFFE
 4461              		MOV	R4,R5
 4462              		LSL	R5,R5,#21		//  get bits 22-12
 4463              		ASR	R5,R5,#9		//  with sign extension
 4464              		LSR	R4,R4,#15		//  get bits 11-1
 4465              		AND	R4,R4,R0		//  retain only bits 11-1
 4466              		ORR	R5,R5,R4		//  get bits 22-1
 4467              		NOP
 4468              		_ADR	OVER			//  a offset a
 4469              		_ADR	PLUS			//  a target-4
 4470              		_ADR	CELLP			//  a target
 4471              		_ADR	TNAME			//  a na/0 --, is it a name?
 4472              		_ADR	QDUP			//  name address or zero
 4473              		_QBRAN	DECOM1
 4474              		_ADR	SPACE			//  a na
 4475              		_ADR	DOTID			//  a --, display name
 4476              	// 	_ADR	RFROM			//  a
 4477              		_ADR	DROP
 4478              		_UNNEST
 4479              	DECOM1:	// _ADR	RFROM		//  a
 4480              		_ADR	AT			//  data
 4481              		_ADR	UDOT			//  display data
 4482              		_UNNEST
 4483              	DECOM2:
 4484              		_ADR	UDOT
 4485              	// 	_ADR	RFROM
 4486              		_ADR	DROP
 4487              		_UNNEST
 4488              	
 4489              	//    WORDS	( -- )
 4490              	// 	Display the names in the context vocabulary.
 4491              	
 4492              		.word	_DECOM
 4493              	.else 
 4494 2754 14270000 		.word _DOTID 
 4495              	.endif 
 4496 2758 05       	_WORDS:	.byte  5
 4497 2759 574F5244 		.ascii "WORDS"
 4497      53
 4498 275e 00BF     		.p2align 2 	
 4499              	WORDS:
ARM GAS  stm32eforth-fl.s 			page 87


 4500 2760 FDF754FE 		_NEST
 4501 2764 51130000 		_ADR	CR
 4502 2768 E90A0000 		_ADR	CNTXT
 4503 276c D1050000 		_ADR	AT			// only in context
 4504              	WORS1:
 4505 2770 31080000 		_ADR	QDUP			// ?at end of list
 4506 2774 91050000 		_ADR	QBRAN
 4507 2778 98270000 		.word	WORS2
 4508 277c 59060000 		_ADR	DUPP
 4509 2780 C9120000 		_ADR	SPACE
 4510 2784 19270000 		_ADR	DOTID			// display a name
 4511 2788 CD070000 		_ADR	CELLM
 4512 278c D1050000 		_ADR	AT
 4513 2790 A3050000 		_BRAN	WORS1
 4513      70270000 
 4514              	WORS2:
 4515 2798 1D040000 		_UNNEST
 4516              	
 4517              	// **************************************************************************
 4518              	//  cold start
 4519              	
 4520              	//    VER	 ( -- n )
 4521              	// 	Return the version number of this implementation.
 4522              	
 4523              	// 	.word	_WORDS
 4524              	// _VERSN	.byte  3
 4525              	// 	.ascii "VER"
 4526              	// 	.p2align 2 	
 4527              	VERSN:
 4528 279c FDF736FE 		_NEST
 4529 27a0 55050000 		_DOLIT	VER*256+EXT
 4529      00010000 
 4530 27a8 1D040000 		_UNNEST
 4531              	
 4532              	//    hi	  ( -- )
 4533              	// 	Display the sign-on message of eForth.
 4534              	
 4535 27ac 58270000 		.word	_WORDS
 4536 27b0 02       	_HI:	.byte  2
 4537 27b1 4849     		.ascii "HI"
 4538 27b3 00       		.p2align 2 	
 4539              	HI:
 4540 27b4 FDF72AFE 		_NEST
 4541 27b8 51130000 		_ADR	CR	// initialize I/O
 4542 27bc B9130000 		_DOTQP	23, "blue pill stm32eForth v" 
 4542      17626C75 
 4542      65207069 
 4542      6C6C2073 
 4542      746D3332 
 4543 27d8 610A0000 		_ADR	BASE
 4544 27dc D1050000 		_ADR	AT
 4545 27e0 A5100000 		_ADR	HEX	// save radix
 4546 27e4 9D270000 		_ADR	VERSN
 4547 27e8 9D0F0000 		_ADR	BDIGS
 4548 27ec E90F0000 		_ADR	DIG
 4549 27f0 E90F0000 		_ADR	DIG
 4550 27f4 55050000 		_DOLIT	'.'
ARM GAS  stm32eforth-fl.s 			page 88


 4550      2E000000 
 4551 27fc BD0F0000 		_ADR	HOLD
 4552 2800 09100000 		_ADR	DIGS
 4553 2804 55100000 		_ADR	EDIGS
 4554 2808 1D130000 		_ADR	TYPEE	// format version number
 4555 280c 610A0000 		_ADR	BASE
 4556 2810 BD050000 		_ADR	STORE
 4557 2814 51130000 		_ADR	CR
 4558 2818 1D040000 		_UNNEST			// restore radix
 4559              	
 4560              	//    COLD	( -- )
 4561              	// 	The high level cold start sequence.
 4562              	
 4563 281c B0270000 		.word	_HI
 4564 2820 04       	LASTN:	.byte  4
 4565 2821 434F4C44 		.ascii "COLD"
 4566 2825 000000   		.p2align 2,0	
 4567              	COLD:
 4568              	//  Initiate Forth registers
 4569 2828 4FF00003 		mov r3,#UPP&0xffff
 4570 282c C2F20003 		movt r3,#UPP>>16 
 4571 2830 03F59F42 		add R2,R3,#RPP&0xffff	// Forth return stack
 4572 2834 03F59D41 		add R1,R3,#SPP&0xffff // Forth data stack
 4573 2838 85EA0505 		eor R5,R5,R5			//  tos=0
 4574 283c 1248     		ldr R0,=COLD1 
 4575 283e FDF7E9BD 		_NEXT
 4576              	COLD1:
 4577 2842 55050000 		_DOLIT  0 
 4577      00000000 
 4578 284a 01000000 		_ADR ULED // turn off user LED 
 4579 284e 55050000 		_DOLIT	UZERO
 4579      00020000 
 4580 2856 55050000 		_DOLIT	UPP
 4580      00000020 
 4581 285e 55050000 		_DOLIT	ULAST-UZERO
 4581      54000000 
 4582 2866 6D0E0000 		_ADR	MOVE 			// initialize user area
 4583 286a 791B0000 		_ADR	PRESE			// initialize stack and TIB
 4584              	//	_DOLIT 0		// check if user image saved in slot 0 
 4585              	//	_ADR IMGQ 
 4586              	//	_QBRAN 1f
 4587              	//	_DOLIT 0
 4588              	//	_ADR	LOAD_IMG 
 4589 286e 4D0A0000 	1:	_ADR	TBOOT
 4590 2872 1D0E0000 		_ADR	ATEXE			// application boot
 4591 2876 55240000 		_ADR	OVERT
 4592 287a A3050000 		_BRAN	QUIT			// start interpretation
 4592      941B0000 
 4593              	COLD2:
 4594 2882 00BF     		.p2align 2 	
 4595              	CTOP:
 4596 2884 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4597              	
 4598              		.section .text.user, "a", %progbits 
 4599              		.p2align 10 
 4600              	USER_SPACE: // save user image here.  
 4601 0000 FFFFFFFF 		.word 0XFFFFFFFF
ARM GAS  stm32eforth-fl.s 			page 89


 4602              	
 4603              	  .end 
ARM GAS  stm32eforth-fl.s 			page 90


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  stm32eforth-fl.s 			page 91


board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
board/blue-pill/stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
board/blue-pill/stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
board/blue-pill/stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
board/blue-pill/stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
board/blue-pill/stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
board/blue-pill/stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
board/blue-pill/stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
board/blue-pill/stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
board/blue-pill/stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
board/blue-pill/stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
board/blue-pill/stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
board/blue-pill/stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
board/blue-pill/stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
board/blue-pill/stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
board/blue-pill/stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
board/blue-pill/stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
    stm32eforth-fl.s:89     *ABS*:0000000040011000 LED_GPIO
    stm32eforth-fl.s:90     *ABS*:000000000000000d LED_PIN
    stm32eforth-fl.s:91     *ABS*:0000000040013800 UART
    stm32eforth-fl.s:94     *ABS*:0000000020004e80 SPP
    stm32eforth-fl.s:95     *ABS*:0000000020004e80 TIBB
    stm32eforth-fl.s:96     *ABS*:0000000020004f80 RPP
    stm32eforth-fl.s:97     *ABS*:0000000020000000 UPP
    stm32eforth-fl.s:98     *ABS*:0000000020000100 DTOP
    stm32eforth-fl.s:99     *ABS*:0000000020004e00 DEND
    stm32eforth-fl.s:100    *ABS*:0000000020000000 RAMOFFSET
    stm32eforth-fl.s:101    *ABS*:0000000020005000 RAMEND
    stm32eforth-fl.s:106    *ABS*:0000000000000004 SEED_OFS
    stm32eforth-fl.s:107    *ABS*:0000000000000008 TICKS_OFS
    stm32eforth-fl.s:108    *ABS*:000000000000000c TIMER_OFS
    stm32eforth-fl.s:109    *ABS*:0000000000000010 TORAM_OFS
    stm32eforth-fl.s:110    *ABS*:0000000000000014 IMG_SIGN_OFS
    stm32eforth-fl.s:111    *ABS*:0000000000000018 BOOT_OFS
    stm32eforth-fl.s:112    *ABS*:000000000000001c BASE_OFS
    stm32eforth-fl.s:113    *ABS*:0000000000000020 TMP_OFS
    stm32eforth-fl.s:114    *ABS*:0000000000000024 SPAN_OFS
    stm32eforth-fl.s:115    *ABS*:0000000000000028 TOIN_OFS
    stm32eforth-fl.s:116    *ABS*:000000000000002c NTIB_OFS
    stm32eforth-fl.s:117    *ABS*:0000000000000030 TIB_OFS
    stm32eforth-fl.s:118    *ABS*:0000000000000034 EVAL_OFS
    stm32eforth-fl.s:119    *ABS*:0000000000000038 HLD_OFS
    stm32eforth-fl.s:120    *ABS*:000000000000003c CTXT_OFS
    stm32eforth-fl.s:121    *ABS*:0000000000000040 FORTH_CTOP_OFS
    stm32eforth-fl.s:122    *ABS*:0000000000000044 RAM_CTOP_OFS
    stm32eforth-fl.s:123    *ABS*:0000000000000048 LASTN_OFS
    stm32eforth-fl.s:124    *ABS*:000000000000004c VARS_END_OFS
ARM GAS  stm32eforth-fl.s 			page 92


    stm32eforth-fl.s:197    .isr_vector:0000000000000000 isr_vectors
    stm32eforth-fl.s:364    .text:0000000000000060 reset_handler
    stm32eforth-fl.s:311    .text:0000000000000000 default_handler
    stm32eforth-fl.s:343    .text:0000000000000044 systick_handler
    stm32eforth-fl.s:279    .isr_vector:0000000000000130 $d
    stm32eforth-fl.s:281    .isr_vector:0000000000000200 UZERO
    stm32eforth-fl.s:4539   .text:00000000000027b4 HI
                            *ABS*:000000000000000a BASEE
    stm32eforth-fl.s:3191   .text:0000000000001a50 INTER
    stm32eforth-fl.s:4564   .text:0000000000002820 LASTN
    stm32eforth-fl.s:4595   .text:0000000000002884 CTOP
    stm32eforth-fl.s:302    .isr_vector:0000000000000254 ULAST
    stm32eforth-fl.s:309    .text:0000000000000000 $t
    stm32eforth-fl.s:321    .text:0000000000000018 exception_msg
    stm32eforth-fl.s:675    .text:0000000000000530 EMIT
    stm32eforth-fl.s:326    .text:0000000000000030 REBOOT
    stm32eforth-fl.s:322    .text:0000000000000018 $d
    stm32eforth-fl.s:334    .text:0000000000000040 scb_adr
    stm32eforth-fl.s:335    .text:0000000000000040 $d
    stm32eforth-fl.s:341    .text:0000000000000044 $t
    stm32eforth-fl.s:353    .text:000000000000005e systick_exit
    stm32eforth-fl.s:471    .text:0000000000000140 remap
    stm32eforth-fl.s:372    .text:0000000000000070 init_devices
    stm32eforth-fl.s:3325   .text:0000000000001bb4 unlock
    stm32eforth-fl.s:4567   .text:0000000000002828 COLD
    stm32eforth-fl.s:387    .text:000000000000008e wait_hserdy
    stm32eforth-fl.s:407    .text:00000000000000a8 wait_pllrdy
    stm32eforth-fl.s:420    .text:00000000000000c8 wait_sws
    stm32eforth-fl.s:490    .text:0000000000000170 remap_dest
    stm32eforth-fl.s:488    .text:000000000000016c remap_src
    stm32eforth-fl.s:489    .text:000000000000016c $d
    stm32eforth-fl.s:496    *ABS*:0000000000000001 VER
    stm32eforth-fl.s:497    *ABS*:0000000000000000 EXT
    stm32eforth-fl.s:501    *ABS*:0000000000000040 COMPO
    stm32eforth-fl.s:502    *ABS*:0000000000000080 IMEDD
    stm32eforth-fl.s:503    *ABS*:00000000ffffff1f MASKK
    stm32eforth-fl.s:505    *ABS*:0000000000000004 CELLL
    stm32eforth-fl.s:507    *ABS*:0000000000000008 VOCSS
    stm32eforth-fl.s:509    *ABS*:0000000000000008 BKSPP
    stm32eforth-fl.s:510    *ABS*:000000000000000a LF
    stm32eforth-fl.s:511    *ABS*:000000000000000d CRR
    stm32eforth-fl.s:512    *ABS*:000000000000001b ERR
    stm32eforth-fl.s:513    *ABS*:0000000000000027 TIC
    stm32eforth-fl.s:534    .text:0000000000000174 $t
    stm32eforth-fl.s:546    .text:0000000000000400 TPUSH
    stm32eforth-fl.s:561    .text:0000000000000414 INEXT
    stm32eforth-fl.s:551    .text:0000000000000406 TPOP
    stm32eforth-fl.s:557    .text:000000000000040c NEST
    stm32eforth-fl.s:565    .text:000000000000041c UNNEST
    stm32eforth-fl.s:577    .text:0000000000000428 $d
    stm32eforth-fl.s:578    .text:000000000000042c _RAND
    stm32eforth-fl.s:581    .text:0000000000000434 RAND
    stm32eforth-fl.s:583    .text:0000000000000438 $d
    stm32eforth-fl.s:1516   .text:00000000000009fc SEED
    stm32eforth-fl.s:807    .text:00000000000005d0 AT
    stm32eforth-fl.s:901    .text:0000000000000658 DUPP
    stm32eforth-fl.s:709    .text:0000000000000554 DOLIT
ARM GAS  stm32eforth-fl.s 			page 93


    stm32eforth-fl.s:1012   .text:0000000000000710 LSHIFT
    stm32eforth-fl.s:973    .text:00000000000006c8 XORR
    stm32eforth-fl.s:1000   .text:00000000000006f8 RSHIFT
    stm32eforth-fl.s:794    .text:00000000000005bc STORE
    stm32eforth-fl.s:1300   .text:00000000000008c0 ABSS
    stm32eforth-fl.s:912    .text:0000000000000668 SWAP
    stm32eforth-fl.s:1866   .text:0000000000000ca4 MODD
    stm32eforth-fl.s:609    .text:000000000000049c _PAUSE
    stm32eforth-fl.s:611    .text:00000000000004a2 $t
    stm32eforth-fl.s:612    .text:00000000000004a4 PAUSE
    stm32eforth-fl.s:614    .text:00000000000004a8 $d
    stm32eforth-fl.s:1538   .text:0000000000000a24 TIMER
    stm32eforth-fl.s:616    .text:00000000000004b0 PAUSE_LOOP
    stm32eforth-fl.s:756    .text:0000000000000590 QBRAN
    stm32eforth-fl.s:621    .text:00000000000004c8 PAUSE_EXIT
    stm32eforth-fl.s:773    .text:00000000000005a2 BRAN
    stm32eforth-fl.s:627    .text:00000000000004d0 _ULED
    stm32eforth-fl.s:631    .text:00000000000004d8 ULED
    stm32eforth-fl.s:640    .text:00000000000004f0 ULED_OFF
    stm32eforth-fl.s:646    .text:00000000000004f4 $d
    stm32eforth-fl.s:647    .text:00000000000004f8 _QRX
    stm32eforth-fl.s:650    .text:0000000000000500 QKEY
    stm32eforth-fl.s:651    .text:0000000000000500 QRX
    stm32eforth-fl.s:662    .text:0000000000000520 QRX1
    stm32eforth-fl.s:670    .text:0000000000000526 $d
    stm32eforth-fl.s:671    .text:000000000000052a _TXSTO
    stm32eforth-fl.s:674    .text:0000000000000530 TXSTO
    stm32eforth-fl.s:676    .text:0000000000000530 TECHO
    stm32eforth-fl.s:679    .text:0000000000000538 TX1
    stm32eforth-fl.s:694    .text:0000000000000548 $d
    stm32eforth-fl.s:695    .text:000000000000054c _NOP
    stm32eforth-fl.s:697    .text:0000000000000550 $t
    stm32eforth-fl.s:698    .text:0000000000000550 NOP
    stm32eforth-fl.s:717    .text:000000000000055e $d
    stm32eforth-fl.s:718    .text:0000000000000562 _EXECU
    stm32eforth-fl.s:720    .text:000000000000056a $t
    stm32eforth-fl.s:721    .text:000000000000056c EXECU
    stm32eforth-fl.s:735    .text:0000000000000578 DONXT
    stm32eforth-fl.s:742    .text:0000000000000586 NEXT1
    stm32eforth-fl.s:762    .text:000000000000059c QBRAN1
    stm32eforth-fl.s:780    .text:00000000000005a6 $d
    stm32eforth-fl.s:781    .text:00000000000005aa _EXIT
    stm32eforth-fl.s:784    .text:00000000000005b0 EXIT
    stm32eforth-fl.s:785    .text:00000000000005b0 $d
    stm32eforth-fl.s:791    .text:00000000000005b8 _STORE
    stm32eforth-fl.s:793    .text:00000000000005ba $t
    stm32eforth-fl.s:803    .text:00000000000005c8 $d
    stm32eforth-fl.s:804    .text:00000000000005cc _AT
    stm32eforth-fl.s:806    .text:00000000000005ce $t
    stm32eforth-fl.s:814    .text:00000000000005d4 $d
    stm32eforth-fl.s:815    .text:00000000000005d8 _CSTOR
    stm32eforth-fl.s:818    .text:00000000000005dc CSTOR
    stm32eforth-fl.s:827    .text:00000000000005e8 $d
    stm32eforth-fl.s:828    .text:00000000000005ec _CAT
    stm32eforth-fl.s:831    .text:00000000000005f0 CAT
    stm32eforth-fl.s:838    .text:00000000000005f4 $d
    stm32eforth-fl.s:839    .text:00000000000005f8 _RFROM
ARM GAS  stm32eforth-fl.s 			page 94


    stm32eforth-fl.s:842    .text:00000000000005fc RFROM
    stm32eforth-fl.s:850    .text:0000000000000606 $d
    stm32eforth-fl.s:851    .text:000000000000060a _RAT
    stm32eforth-fl.s:854    .text:0000000000000610 RAT
    stm32eforth-fl.s:862    .text:0000000000000618 $d
    stm32eforth-fl.s:863    .text:000000000000061c _TOR
    stm32eforth-fl.s:866    .text:0000000000000620 TOR
    stm32eforth-fl.s:874    .text:000000000000062a $d
    stm32eforth-fl.s:875    .text:000000000000062e _SPAT
    stm32eforth-fl.s:877    .text:0000000000000632 $t
    stm32eforth-fl.s:878    .text:0000000000000634 SPAT
    stm32eforth-fl.s:886    .text:000000000000063c $d
    stm32eforth-fl.s:887    .text:0000000000000640 _DROP
    stm32eforth-fl.s:890    .text:0000000000000648 DROP
    stm32eforth-fl.s:897    .text:000000000000064e $d
    stm32eforth-fl.s:898    .text:0000000000000652 _DUPP
    stm32eforth-fl.s:900    .text:0000000000000656 $t
    stm32eforth-fl.s:908    .text:000000000000065e $d
    stm32eforth-fl.s:909    .text:0000000000000662 _SWAP
    stm32eforth-fl.s:921    .text:0000000000000670 $d
    stm32eforth-fl.s:922    .text:0000000000000674 _OVER
    stm32eforth-fl.s:925    .text:000000000000067c OVER
    stm32eforth-fl.s:933    .text:0000000000000684 $d
    stm32eforth-fl.s:934    .text:0000000000000688 _ZLESS
    stm32eforth-fl.s:937    .text:000000000000068c ZLESS
    stm32eforth-fl.s:945    .text:0000000000000696 $d
    stm32eforth-fl.s:946    .text:000000000000069a _ANDD
    stm32eforth-fl.s:948    .text:000000000000069e $t
    stm32eforth-fl.s:949    .text:00000000000006a0 ANDD
    stm32eforth-fl.s:957    .text:00000000000006aa $d
    stm32eforth-fl.s:958    .text:00000000000006ae _ORR
    stm32eforth-fl.s:961    .text:00000000000006b4 ORR
    stm32eforth-fl.s:969    .text:00000000000006be $d
    stm32eforth-fl.s:970    .text:00000000000006c2 _XORR
    stm32eforth-fl.s:972    .text:00000000000006c6 $t
    stm32eforth-fl.s:981    .text:00000000000006d2 $d
    stm32eforth-fl.s:982    .text:00000000000006d6 _UPLUS
    stm32eforth-fl.s:984    .text:00000000000006da $t
    stm32eforth-fl.s:985    .text:00000000000006dc UPLUS
    stm32eforth-fl.s:996    .text:00000000000006ec $d
    stm32eforth-fl.s:997    .text:00000000000006f0 _RSHIFT
    stm32eforth-fl.s:1008   .text:0000000000000702 $d
    stm32eforth-fl.s:1009   .text:0000000000000706 _LSHIFT
    stm32eforth-fl.s:1020   .text:000000000000071a $d
    stm32eforth-fl.s:1021   .text:000000000000071e _PLUS
    stm32eforth-fl.s:1023   .text:0000000000000720 $t
    stm32eforth-fl.s:1024   .text:0000000000000720 PLUS
    stm32eforth-fl.s:1032   .text:0000000000000728 $d
    stm32eforth-fl.s:1033   .text:000000000000072c _SUBB
    stm32eforth-fl.s:1035   .text:000000000000072e $t
    stm32eforth-fl.s:1036   .text:0000000000000730 SUBB
    stm32eforth-fl.s:1044   .text:000000000000073a $d
    stm32eforth-fl.s:1045   .text:000000000000073e _STAR
    stm32eforth-fl.s:1047   .text:0000000000000740 $t
    stm32eforth-fl.s:1048   .text:0000000000000740 STAR
    stm32eforth-fl.s:1056   .text:000000000000074a $d
    stm32eforth-fl.s:1057   .text:000000000000074e _UMSTA
ARM GAS  stm32eforth-fl.s 			page 95


    stm32eforth-fl.s:1059   .text:0000000000000752 $t
    stm32eforth-fl.s:1060   .text:0000000000000754 UMSTA
    stm32eforth-fl.s:1070   .text:0000000000000760 $d
    stm32eforth-fl.s:1071   .text:0000000000000764 _MSTAR
    stm32eforth-fl.s:1074   .text:0000000000000768 MSTAR
    stm32eforth-fl.s:1084   .text:0000000000000774 $d
    stm32eforth-fl.s:1085   .text:0000000000000778 _ONEP
    stm32eforth-fl.s:1088   .text:000000000000077c ONEP
    stm32eforth-fl.s:1095   .text:0000000000000782 $d
    stm32eforth-fl.s:1096   .text:0000000000000786 _ONEM
    stm32eforth-fl.s:1099   .text:000000000000078c ONEM
    stm32eforth-fl.s:1106   .text:0000000000000792 $d
    stm32eforth-fl.s:1107   .text:0000000000000796 _TWOP
    stm32eforth-fl.s:1110   .text:000000000000079c TWOP
    stm32eforth-fl.s:1117   .text:00000000000007a2 $d
    stm32eforth-fl.s:1118   .text:00000000000007a6 _TWOM
    stm32eforth-fl.s:1121   .text:00000000000007ac TWOM
    stm32eforth-fl.s:1128   .text:00000000000007b2 $d
    stm32eforth-fl.s:1129   .text:00000000000007b6 _CELLP
    stm32eforth-fl.s:1131   .text:00000000000007bc $t
    stm32eforth-fl.s:1132   .text:00000000000007bc CELLP
    stm32eforth-fl.s:1139   .text:00000000000007c2 $d
    stm32eforth-fl.s:1140   .text:00000000000007c6 _CELLM
    stm32eforth-fl.s:1142   .text:00000000000007cc $t
    stm32eforth-fl.s:1143   .text:00000000000007cc CELLM
    stm32eforth-fl.s:1150   .text:00000000000007d2 $d
    stm32eforth-fl.s:1151   .text:00000000000007d6 _BLANK
    stm32eforth-fl.s:1154   .text:00000000000007dc BLANK
    stm32eforth-fl.s:1162   .text:00000000000007e6 $d
    stm32eforth-fl.s:1163   .text:00000000000007ea _CELLS
    stm32eforth-fl.s:1165   .text:00000000000007f0 $t
    stm32eforth-fl.s:1166   .text:00000000000007f0 CELLS
    stm32eforth-fl.s:1173   .text:00000000000007f6 $d
    stm32eforth-fl.s:1174   .text:00000000000007fa _CELLSL
    stm32eforth-fl.s:1176   .text:0000000000000800 $t
    stm32eforth-fl.s:1177   .text:0000000000000800 CELLSL
    stm32eforth-fl.s:1184   .text:0000000000000806 $d
    stm32eforth-fl.s:1185   .text:000000000000080a _TWOST
    stm32eforth-fl.s:1188   .text:0000000000000810 TWOST
    stm32eforth-fl.s:1195   .text:0000000000000816 $d
    stm32eforth-fl.s:1196   .text:000000000000081a _TWOSL
    stm32eforth-fl.s:1199   .text:0000000000000820 TWOSL
    stm32eforth-fl.s:1206   .text:0000000000000826 $d
    stm32eforth-fl.s:1207   .text:000000000000082a _QDUP
    stm32eforth-fl.s:1210   .text:0000000000000830 QDUP
    stm32eforth-fl.s:1219   .text:000000000000083a $d
    stm32eforth-fl.s:1220   .text:000000000000083e _ROT
    stm32eforth-fl.s:1222   .text:0000000000000842 $t
    stm32eforth-fl.s:1223   .text:0000000000000844 ROT
    stm32eforth-fl.s:1233   .text:000000000000084e $d
    stm32eforth-fl.s:1234   .text:0000000000000852 _DDROP
    stm32eforth-fl.s:1236   .text:0000000000000858 $t
    stm32eforth-fl.s:1237   .text:0000000000000858 DDROP
    stm32eforth-fl.s:1245   .text:0000000000000862 $d
    stm32eforth-fl.s:1246   .text:0000000000000866 _DDUP
    stm32eforth-fl.s:1249   .text:000000000000086c DDUP
    stm32eforth-fl.s:1258   .text:0000000000000878 $d
ARM GAS  stm32eforth-fl.s 			page 96


    stm32eforth-fl.s:1259   .text:000000000000087c _DPLUS
    stm32eforth-fl.s:1262   .text:0000000000000880 DPLUS
    stm32eforth-fl.s:1274   .text:0000000000000894 $d
    stm32eforth-fl.s:1275   .text:0000000000000898 _INVER
    stm32eforth-fl.s:1277   .text:000000000000089c $t
    stm32eforth-fl.s:1278   .text:000000000000089c INVER
    stm32eforth-fl.s:1285   .text:00000000000008a2 $d
    stm32eforth-fl.s:1286   .text:00000000000008a6 _NEGAT
    stm32eforth-fl.s:1289   .text:00000000000008b0 NEGAT
    stm32eforth-fl.s:1296   .text:00000000000008b6 $d
    stm32eforth-fl.s:1297   .text:00000000000008ba _ABSS
    stm32eforth-fl.s:1299   .text:00000000000008be $t
    stm32eforth-fl.s:1309   .text:00000000000008ca $d
    stm32eforth-fl.s:1310   .text:00000000000008ce _ZEQUAL
    stm32eforth-fl.s:1313   .text:00000000000008d4 ZEQUAL
    stm32eforth-fl.s:1323   .text:00000000000008e2 $d
    stm32eforth-fl.s:1324   .text:00000000000008e6 _EQUAL
    stm32eforth-fl.s:1326   .text:00000000000008e8 $t
    stm32eforth-fl.s:1327   .text:00000000000008e8 EQUAL
    stm32eforth-fl.s:1338   .text:00000000000008f8 $d
    stm32eforth-fl.s:1339   .text:00000000000008fc _ULESS
    stm32eforth-fl.s:1342   .text:0000000000000900 ULESS
    stm32eforth-fl.s:1353   .text:0000000000000910 $d
    stm32eforth-fl.s:1354   .text:0000000000000914 _LESS
    stm32eforth-fl.s:1356   .text:0000000000000916 $t
    stm32eforth-fl.s:1357   .text:0000000000000918 LESS
    stm32eforth-fl.s:1368   .text:0000000000000928 $d
    stm32eforth-fl.s:1369   .text:000000000000092c _GREAT
    stm32eforth-fl.s:1371   .text:000000000000092e $t
    stm32eforth-fl.s:1372   .text:0000000000000930 GREAT
    stm32eforth-fl.s:1383   .text:0000000000000940 $d
    stm32eforth-fl.s:1384   .text:0000000000000944 _MAX
    stm32eforth-fl.s:1386   .text:0000000000000948 $t
    stm32eforth-fl.s:1387   .text:0000000000000948 MAX
    stm32eforth-fl.s:1397   .text:0000000000000954 $d
    stm32eforth-fl.s:1398   .text:0000000000000958 _MIN
    stm32eforth-fl.s:1400   .text:000000000000095c $t
    stm32eforth-fl.s:1401   .text:000000000000095c MIN
    stm32eforth-fl.s:1411   .text:0000000000000968 $d
    stm32eforth-fl.s:1412   .text:000000000000096c _PSTOR
    stm32eforth-fl.s:1415   .text:0000000000000970 PSTOR
    stm32eforth-fl.s:1426   .text:0000000000000980 $d
    stm32eforth-fl.s:1427   .text:0000000000000984 _DSTOR
    stm32eforth-fl.s:1430   .text:0000000000000988 DSTOR
    stm32eforth-fl.s:1441   .text:000000000000099c $d
    stm32eforth-fl.s:1442   .text:00000000000009a0 _DAT
    stm32eforth-fl.s:1445   .text:00000000000009a4 DAT
    stm32eforth-fl.s:1454   .text:00000000000009ae $d
    stm32eforth-fl.s:1455   .text:00000000000009b2 _COUNT
    stm32eforth-fl.s:1457   .text:00000000000009b8 $t
    stm32eforth-fl.s:1458   .text:00000000000009b8 COUNT
    stm32eforth-fl.s:1467   .text:00000000000009c4 $d
    stm32eforth-fl.s:1468   .text:00000000000009c8 _DNEGA
    stm32eforth-fl.s:1470   .text:00000000000009d0 $t
    stm32eforth-fl.s:1471   .text:00000000000009d0 DNEGA
    stm32eforth-fl.s:1489   .text:00000000000009e0 DOVAR
    stm32eforth-fl.s:1501   .text:00000000000009ea DOCON
ARM GAS  stm32eforth-fl.s 			page 97


    stm32eforth-fl.s:1512   .text:00000000000009f2 $d
    stm32eforth-fl.s:1513   .text:00000000000009f6 _SEED
    stm32eforth-fl.s:1523   .text:0000000000000a06 $d
    stm32eforth-fl.s:1524   .text:0000000000000a0a _MSEC
    stm32eforth-fl.s:1527   .text:0000000000000a10 MSEC
    stm32eforth-fl.s:1534   .text:0000000000000a1a $d
    stm32eforth-fl.s:1535   .text:0000000000000a1e _TIMER
    stm32eforth-fl.s:1537   .text:0000000000000a24 $t
    stm32eforth-fl.s:1546   .text:0000000000000a2e $d
    stm32eforth-fl.s:1547   .text:0000000000000a32 _TORAM
    stm32eforth-fl.s:1550   .text:0000000000000a38 TORAM
    stm32eforth-fl.s:1558   .text:0000000000000a42 $d
    stm32eforth-fl.s:1559   .text:0000000000000a46 _TBOOT
    stm32eforth-fl.s:1561   .text:0000000000000a4c $t
    stm32eforth-fl.s:1562   .text:0000000000000a4c TBOOT
    stm32eforth-fl.s:1570   .text:0000000000000a56 $d
    stm32eforth-fl.s:1571   .text:0000000000000a5a _BASE
    stm32eforth-fl.s:1574   .text:0000000000000a60 BASE
    stm32eforth-fl.s:1586   .text:0000000000000a6a TEMP
    stm32eforth-fl.s:1594   .text:0000000000000a74 $d
    stm32eforth-fl.s:1595   .text:0000000000000a78 _SPAN
    stm32eforth-fl.s:1598   .text:0000000000000a80 SPAN
    stm32eforth-fl.s:1606   .text:0000000000000a8a $d
    stm32eforth-fl.s:1607   .text:0000000000000a8e _INN
    stm32eforth-fl.s:1609   .text:0000000000000a92 $t
    stm32eforth-fl.s:1610   .text:0000000000000a94 INN
    stm32eforth-fl.s:1618   .text:0000000000000a9e $d
    stm32eforth-fl.s:1619   .text:0000000000000aa2 _NTIB
    stm32eforth-fl.s:1622   .text:0000000000000aa8 NTIB
    stm32eforth-fl.s:1630   .text:0000000000000ab2 $d
    stm32eforth-fl.s:1631   .text:0000000000000ab6 _TEVAL
    stm32eforth-fl.s:1633   .text:0000000000000abc $t
    stm32eforth-fl.s:1634   .text:0000000000000abc TEVAL
    stm32eforth-fl.s:1642   .text:0000000000000ac6 $d
    stm32eforth-fl.s:1643   .text:0000000000000aca _HLD
    stm32eforth-fl.s:1645   .text:0000000000000ace $t
    stm32eforth-fl.s:1646   .text:0000000000000ad0 HLD
    stm32eforth-fl.s:1654   .text:0000000000000ada $d
    stm32eforth-fl.s:1655   .text:0000000000000ade _CNTXT
    stm32eforth-fl.s:1657   .text:0000000000000ae6 $t
    stm32eforth-fl.s:1658   .text:0000000000000ae8 CNTXT
    stm32eforth-fl.s:1659   .text:0000000000000ae8 CRRNT
    stm32eforth-fl.s:1667   .text:0000000000000af2 $d
    stm32eforth-fl.s:1668   .text:0000000000000af6 _CP
    stm32eforth-fl.s:1671   .text:0000000000000afc CPP
    stm32eforth-fl.s:1678   .text:0000000000000b06 $d
    stm32eforth-fl.s:1679   .text:0000000000000b0a _FCP
    stm32eforth-fl.s:1681   .text:0000000000000b0e $t
    stm32eforth-fl.s:1682   .text:0000000000000b10 FCP
    stm32eforth-fl.s:1690   .text:0000000000000b1a $d
    stm32eforth-fl.s:1691   .text:0000000000000b1e _LAST
    stm32eforth-fl.s:1694   .text:0000000000000b24 LAST
    stm32eforth-fl.s:1705   .text:0000000000000b2e $d
    stm32eforth-fl.s:1706   .text:0000000000000b32 _USER_BGN
    stm32eforth-fl.s:1709   .text:0000000000000b40 USER_BEGIN
    stm32eforth-fl.s:1713   .text:0000000000000b48 USR_BGN_ADR
    stm32eforth-fl.s:1714   .text:0000000000000b48 $d
ARM GAS  stm32eforth-fl.s 			page 98


    stm32eforth-fl.s:1719   .text:0000000000000b50 _USER_END
    stm32eforth-fl.s:1722   .text:0000000000000b5c USER_END
    stm32eforth-fl.s:1726   .text:0000000000000b64 USER_END_ADR
    stm32eforth-fl.s:1727   .text:0000000000000b64 $d
    stm32eforth-fl.s:1732   .text:0000000000000b6c _IMAGE0
    stm32eforth-fl.s:1735   .text:0000000000000b74 IMAGE0
    stm32eforth-fl.s:1739   .text:0000000000000b7c USR_IMG_ADR
    stm32eforth-fl.s:1740   .text:0000000000000b7c $d
    stm32eforth-fl.s:4600   .text.user:0000000000000000 USER_SPACE
    stm32eforth-fl.s:1745   .text:0000000000000b84 _IMG_SIGN
    stm32eforth-fl.s:1748   .text:0000000000000b90 IMG_SIGN
    stm32eforth-fl.s:1761   .text:0000000000000b9c $d
    stm32eforth-fl.s:1762   .text:0000000000000ba0 _WITHI
    stm32eforth-fl.s:1765   .text:0000000000000ba8 WITHI
    stm32eforth-fl.s:1767   .text:0000000000000bac $d
    stm32eforth-fl.s:1781   .text:0000000000000bcc _UMMOD
    stm32eforth-fl.s:1784   .text:0000000000000bd4 UMMOD
    stm32eforth-fl.s:1788   .text:0000000000000bde UMMOD0
    stm32eforth-fl.s:1795   .text:0000000000000bee UMMOD1
    stm32eforth-fl.s:1801   .text:0000000000000bf8 UMMOD2
    stm32eforth-fl.s:1811   .text:0000000000000c02 $d
    stm32eforth-fl.s:1812   .text:0000000000000c06 _MSMOD
    stm32eforth-fl.s:1814   .text:0000000000000c0c $t
    stm32eforth-fl.s:1815   .text:0000000000000c0c MSMOD
    stm32eforth-fl.s:1817   .text:0000000000000c10 $d
    stm32eforth-fl.s:1826   .text:0000000000000c38 MMOD1
    stm32eforth-fl.s:1833   .text:0000000000000c54 MMOD2
    stm32eforth-fl.s:1841   .text:0000000000000c74 MMOD3
    stm32eforth-fl.s:1848   .text:0000000000000c7c _SLMOD
    stm32eforth-fl.s:1851   .text:0000000000000c84 SLMOD
    stm32eforth-fl.s:1853   .text:0000000000000c88 $d
    stm32eforth-fl.s:1863   .text:0000000000000ca0 _MODD
    stm32eforth-fl.s:1865   .text:0000000000000ca4 $t
    stm32eforth-fl.s:1868   .text:0000000000000ca8 $d
    stm32eforth-fl.s:1876   .text:0000000000000cb8 _SLASH
    stm32eforth-fl.s:1878   .text:0000000000000cba $t
    stm32eforth-fl.s:1879   .text:0000000000000cbc SLASH
    stm32eforth-fl.s:1881   .text:0000000000000cc0 $d
    stm32eforth-fl.s:1890   .text:0000000000000cd4 _SSMOD
    stm32eforth-fl.s:1892   .text:0000000000000cda $t
    stm32eforth-fl.s:1893   .text:0000000000000cdc SSMOD
    stm32eforth-fl.s:1895   .text:0000000000000ce0 $d
    stm32eforth-fl.s:1905   .text:0000000000000cf8 _STASL
    stm32eforth-fl.s:1908   .text:0000000000000cfc STASL
    stm32eforth-fl.s:1910   .text:0000000000000d00 $d
    stm32eforth-fl.s:1922   .text:0000000000000d14 _ALGND
    stm32eforth-fl.s:1924   .text:0000000000000d1c $t
    stm32eforth-fl.s:1925   .text:0000000000000d1c ALGND
    stm32eforth-fl.s:1934   .text:0000000000000d2c $d
    stm32eforth-fl.s:1935   .text:0000000000000d30 _TCHAR
    stm32eforth-fl.s:1937   .text:0000000000000d36 $t
    stm32eforth-fl.s:1938   .text:0000000000000d38 TCHAR
    stm32eforth-fl.s:1940   .text:0000000000000d3c $d
    stm32eforth-fl.s:1950   .text:0000000000000d74 TCHA1
    stm32eforth-fl.s:1957   .text:0000000000000d7c _DEPTH
    stm32eforth-fl.s:1959   .text:0000000000000d82 $t
    stm32eforth-fl.s:1960   .text:0000000000000d84 DEPTH
ARM GAS  stm32eforth-fl.s 			page 99


    stm32eforth-fl.s:1972   .text:0000000000000da0 $d
    stm32eforth-fl.s:1973   .text:0000000000000da4 _PICK
    stm32eforth-fl.s:1976   .text:0000000000000dac PICK
    stm32eforth-fl.s:1978   .text:0000000000000db0 $d
    stm32eforth-fl.s:1992   .text:0000000000000dcc _HERE
    stm32eforth-fl.s:1995   .text:0000000000000dd4 HERE
    stm32eforth-fl.s:1997   .text:0000000000000dd8 $d
    stm32eforth-fl.s:2005   .text:0000000000000de8 _PAD
    stm32eforth-fl.s:2007   .text:0000000000000dec $t
    stm32eforth-fl.s:2008   .text:0000000000000dec PAD
    stm32eforth-fl.s:2010   .text:0000000000000df0 $d
    stm32eforth-fl.s:2011   .text:0000000000000df4 $t
    stm32eforth-fl.s:2012   .text:0000000000000df8 $d
    stm32eforth-fl.s:2018   .text:0000000000000e00 _TIB
    stm32eforth-fl.s:2020   .text:0000000000000e04 $t
    stm32eforth-fl.s:2021   .text:0000000000000e04 TIB
    stm32eforth-fl.s:2029   .text:0000000000000e0e $d
    stm32eforth-fl.s:2030   .text:0000000000000e12 _ATEXE
    stm32eforth-fl.s:2033   .text:0000000000000e1c ATEXE
    stm32eforth-fl.s:2045   .text:0000000000000e30 $d
    stm32eforth-fl.s:2046   .text:0000000000000e34 _CMOVE
    stm32eforth-fl.s:2048   .text:0000000000000e3a $t
    stm32eforth-fl.s:2049   .text:0000000000000e3c CMOVE
    stm32eforth-fl.s:2056   .text:0000000000000e4e CMOV1
    stm32eforth-fl.s:2053   .text:0000000000000e46 CMOV0
    stm32eforth-fl.s:2061   .text:0000000000000e58 CMOV2
    stm32eforth-fl.s:2068   .text:0000000000000e60 $d
    stm32eforth-fl.s:2069   .text:0000000000000e64 _MOVE
    stm32eforth-fl.s:2072   .text:0000000000000e6c MOVE
    stm32eforth-fl.s:2080   .text:0000000000000e82 MOVE1
    stm32eforth-fl.s:2077   .text:0000000000000e7a MOVE0
    stm32eforth-fl.s:2085   .text:0000000000000e8c MOVE2
    stm32eforth-fl.s:2092   .text:0000000000000e94 $d
    stm32eforth-fl.s:2093   .text:0000000000000e98 _FILL
    stm32eforth-fl.s:2096   .text:0000000000000ea0 FILL
    stm32eforth-fl.s:2099   .text:0000000000000ea8 FILL0
    stm32eforth-fl.s:2102   .text:0000000000000eac FILL1
    stm32eforth-fl.s:2108   .text:0000000000000eba FILL2
    stm32eforth-fl.s:2115   .text:0000000000000ec2 $d
    stm32eforth-fl.s:2116   .text:0000000000000ec6 _PACKS
    stm32eforth-fl.s:2119   .text:0000000000000ed0 PACKS
    stm32eforth-fl.s:2121   .text:0000000000000ed4 $d
    stm32eforth-fl.s:2148   .text:0000000000000f2c _DIGIT
    stm32eforth-fl.s:2150   .text:0000000000000f32 $t
    stm32eforth-fl.s:2151   .text:0000000000000f34 DIGIT
    stm32eforth-fl.s:2153   .text:0000000000000f38 $d
    stm32eforth-fl.s:2167   .text:0000000000000f6c _EXTRC
    stm32eforth-fl.s:2169   .text:0000000000000f74 $t
    stm32eforth-fl.s:2170   .text:0000000000000f74 EXTRC
    stm32eforth-fl.s:2172   .text:0000000000000f78 $d
    stm32eforth-fl.s:2183   .text:0000000000000f98 _BDIGS
    stm32eforth-fl.s:2186   .text:0000000000000f9c BDIGS
    stm32eforth-fl.s:2188   .text:0000000000000fa0 $d
    stm32eforth-fl.s:2197   .text:0000000000000fb4 _HOLD
    stm32eforth-fl.s:2200   .text:0000000000000fbc HOLD
    stm32eforth-fl.s:2202   .text:0000000000000fc0 $d
    stm32eforth-fl.s:2215   .text:0000000000000fe4 _DIG
ARM GAS  stm32eforth-fl.s 			page 100


    stm32eforth-fl.s:2217   .text:0000000000000fe6 $t
    stm32eforth-fl.s:2218   .text:0000000000000fe8 DIG
    stm32eforth-fl.s:2220   .text:0000000000000fec $d
    stm32eforth-fl.s:2230   .text:0000000000001004 _DIGS
    stm32eforth-fl.s:2233   .text:0000000000001008 DIGS
    stm32eforth-fl.s:2235   .text:000000000000100c DIGS1
    stm32eforth-fl.s:2236   .text:000000000000100c $d
    stm32eforth-fl.s:2241   .text:000000000000101e DIGS2
    stm32eforth-fl.s:2240   .text:000000000000101c $t
    stm32eforth-fl.s:2242   .text:000000000000101e $d
    stm32eforth-fl.s:2248   .text:0000000000001026 _SIGN
    stm32eforth-fl.s:2251   .text:000000000000102c SIGN
    stm32eforth-fl.s:2253   .text:0000000000001030 $d
    stm32eforth-fl.s:2257   .text:0000000000001048 SIGN1
    stm32eforth-fl.s:2264   .text:0000000000001050 _EDIGS
    stm32eforth-fl.s:2267   .text:0000000000001054 EDIGS
    stm32eforth-fl.s:2269   .text:0000000000001058 $d
    stm32eforth-fl.s:2284   .text:0000000000001074 STRR
    stm32eforth-fl.s:2285   .text:0000000000001074 $t
    stm32eforth-fl.s:2286   .text:0000000000001078 $d
    stm32eforth-fl.s:2300   .text:00000000000010a0 _HEX
    stm32eforth-fl.s:2302   .text:00000000000010a4 $t
    stm32eforth-fl.s:2303   .text:00000000000010a4 HEX
    stm32eforth-fl.s:2305   .text:00000000000010a8 $d
    stm32eforth-fl.s:2314   .text:00000000000010c0 _DECIM
    stm32eforth-fl.s:2316   .text:00000000000010c8 $t
    stm32eforth-fl.s:2317   .text:00000000000010c8 DECIM
    stm32eforth-fl.s:2319   .text:00000000000010cc $d
    stm32eforth-fl.s:2331   .text:00000000000010e4 _DIGTQ
    stm32eforth-fl.s:2334   .text:00000000000010ec DIGTQ
    stm32eforth-fl.s:2336   .text:00000000000010f0 $d
    stm32eforth-fl.s:2349   .text:0000000000001138 DGTQ1
    stm32eforth-fl.s:2359   .text:000000000000114c _NUMBQ
    stm32eforth-fl.s:2361   .text:0000000000001154 $t
    stm32eforth-fl.s:2362   .text:0000000000001154 NUMBQ
    stm32eforth-fl.s:2364   .text:0000000000001158 $d
    stm32eforth-fl.s:2380   .text:00000000000011a4 NUMQ1
    stm32eforth-fl.s:2428   .text:000000000000126c NUMQ6
    stm32eforth-fl.s:2396   .text:00000000000011e8 NUMQ2
    stm32eforth-fl.s:2420   .text:0000000000001250 NUMQ4
    stm32eforth-fl.s:2417   .text:0000000000001244 NUMQ3
    stm32eforth-fl.s:2426   .text:0000000000001268 NUMQ5
    stm32eforth-fl.s:2443   .text:0000000000001288 _KEY
    stm32eforth-fl.s:2445   .text:000000000000128c $t
    stm32eforth-fl.s:2446   .text:000000000000128c KEY
    stm32eforth-fl.s:2448   .text:0000000000001290 KEY1
    stm32eforth-fl.s:2449   .text:0000000000001290 $d
    stm32eforth-fl.s:2463   .text:00000000000012c0 _SPACE
    stm32eforth-fl.s:2465   .text:00000000000012c6 $t
    stm32eforth-fl.s:2466   .text:00000000000012c8 SPACE
    stm32eforth-fl.s:2468   .text:00000000000012cc $d
    stm32eforth-fl.s:2476   .text:00000000000012dc _SPACS
    stm32eforth-fl.s:2479   .text:00000000000012e4 SPACS
    stm32eforth-fl.s:2481   .text:00000000000012e8 $d
    stm32eforth-fl.s:2487   .text:0000000000001304 CHAR2
    stm32eforth-fl.s:2485   .text:0000000000001300 CHAR1
    stm32eforth-fl.s:2495   .text:0000000000001314 _TYPEE
ARM GAS  stm32eforth-fl.s 			page 101


    stm32eforth-fl.s:2498   .text:000000000000131c TYPEE
    stm32eforth-fl.s:2500   .text:0000000000001320 $d
    stm32eforth-fl.s:2506   .text:0000000000001338 TYPE2
    stm32eforth-fl.s:2502   .text:000000000000132c TYPE1
    stm32eforth-fl.s:2515   .text:000000000000134c _CR
    stm32eforth-fl.s:2518   .text:0000000000001350 CR
    stm32eforth-fl.s:2520   .text:0000000000001354 $d
    stm32eforth-fl.s:2534   .text:0000000000001370 DOSTR
    stm32eforth-fl.s:2535   .text:0000000000001370 $t
    stm32eforth-fl.s:2537   .text:0000000000001374 $d
    stm32eforth-fl.s:2556   .text:000000000000139c STRQP
    stm32eforth-fl.s:2557   .text:000000000000139c $t
    stm32eforth-fl.s:2558   .text:00000000000013a0 $d
    stm32eforth-fl.s:2568   .text:00000000000013a8 DOTST
    stm32eforth-fl.s:2569   .text:00000000000013a8 $t
    stm32eforth-fl.s:2570   .text:00000000000013ac $d
    stm32eforth-fl.s:2581   .text:00000000000013b8 DOTQP
    stm32eforth-fl.s:2582   .text:00000000000013b8 $t
    stm32eforth-fl.s:2583   .text:00000000000013bc $d
    stm32eforth-fl.s:2591   .text:00000000000013cc _DOTR
    stm32eforth-fl.s:2594   .text:00000000000013d0 DOTR
    stm32eforth-fl.s:2596   .text:00000000000013d4 $d
    stm32eforth-fl.s:2609   .text:00000000000013f8 _UDOTR
    stm32eforth-fl.s:2611   .text:00000000000013fc $t
    stm32eforth-fl.s:2612   .text:00000000000013fc UDOTR
    stm32eforth-fl.s:2614   .text:0000000000001400 $d
    stm32eforth-fl.s:2629   .text:000000000000142c _UDOT
    stm32eforth-fl.s:2632   .text:0000000000001430 UDOT
    stm32eforth-fl.s:2634   .text:0000000000001434 $d
    stm32eforth-fl.s:2645   .text:0000000000001450 _DOT
    stm32eforth-fl.s:2647   .text:0000000000001452 $t
    stm32eforth-fl.s:2648   .text:0000000000001454 DOT
    stm32eforth-fl.s:2650   .text:0000000000001458 $d
    stm32eforth-fl.s:2657   .text:000000000000147c DOT1
    stm32eforth-fl.s:2667   .text:0000000000001490 _QUEST
    stm32eforth-fl.s:2669   .text:0000000000001492 $t
    stm32eforth-fl.s:2670   .text:0000000000001494 QUEST
    stm32eforth-fl.s:2672   .text:0000000000001498 $d
    stm32eforth-fl.s:2686   .text:00000000000014a4 PARS
    stm32eforth-fl.s:2687   .text:00000000000014a4 $t
    stm32eforth-fl.s:2688   .text:00000000000014a8 $d
    stm32eforth-fl.s:2754   .text:00000000000015b8 PARS8
    stm32eforth-fl.s:2718   .text:000000000000152c PARS3
    stm32eforth-fl.s:2701   .text:00000000000014e4 PARS1
    stm32eforth-fl.s:2716   .text:0000000000001528 PARS2
    stm32eforth-fl.s:2722   .text:0000000000001538 PARS4
    stm32eforth-fl.s:2734   .text:0000000000001568 PARS5
    stm32eforth-fl.s:2741   .text:000000000000158c PARS6
    stm32eforth-fl.s:2747   .text:00000000000015a0 PARS7
    stm32eforth-fl.s:2764   .text:00000000000015cc _PARSE
    stm32eforth-fl.s:2766   .text:00000000000015d2 $t
    stm32eforth-fl.s:2767   .text:00000000000015d4 PARSE
    stm32eforth-fl.s:2769   .text:00000000000015d8 $d
    stm32eforth-fl.s:2789   .text:0000000000001618 _DOTPR
    stm32eforth-fl.s:2792   .text:000000000000161c DOTPR
    stm32eforth-fl.s:2794   .text:0000000000001620 $d
    stm32eforth-fl.s:2803   .text:0000000000001638 _PAREN
ARM GAS  stm32eforth-fl.s 			page 102


    stm32eforth-fl.s:2805   .text:000000000000163a $t
    stm32eforth-fl.s:2806   .text:000000000000163c PAREN
    stm32eforth-fl.s:2808   .text:0000000000001640 $d
    stm32eforth-fl.s:2817   .text:0000000000001658 _BKSLA
    stm32eforth-fl.s:2819   .text:000000000000165a $t
    stm32eforth-fl.s:2820   .text:000000000000165c BKSLA
    stm32eforth-fl.s:2822   .text:0000000000001660 $d
    stm32eforth-fl.s:2832   .text:0000000000001678 _CHAR
    stm32eforth-fl.s:2835   .text:0000000000001680 CHAR
    stm32eforth-fl.s:2837   .text:0000000000001684 $d
    stm32eforth-fl.s:2847   .text:000000000000169c _WORDD
    stm32eforth-fl.s:2850   .text:00000000000016a4 WORDD
    stm32eforth-fl.s:2852   .text:00000000000016a8 $d
    stm32eforth-fl.s:2862   .text:00000000000016c0 _TOKEN
    stm32eforth-fl.s:2864   .text:00000000000016c6 $t
    stm32eforth-fl.s:2865   .text:00000000000016c8 TOKEN
    stm32eforth-fl.s:2867   .text:00000000000016cc $d
    stm32eforth-fl.s:2878   .text:00000000000016dc _NAMET
    stm32eforth-fl.s:2880   .text:00000000000016e2 $t
    stm32eforth-fl.s:2881   .text:00000000000016e4 NAMET
    stm32eforth-fl.s:2883   .text:00000000000016e8 $d
    stm32eforth-fl.s:2899   .text:0000000000001708 _SAMEQ
    stm32eforth-fl.s:2901   .text:000000000000170e $t
    stm32eforth-fl.s:2902   .text:0000000000001710 SAMEQ
    stm32eforth-fl.s:2904   .text:0000000000001714 $d
    stm32eforth-fl.s:2921   .text:000000000000175c SAME2
    stm32eforth-fl.s:2906   .text:0000000000001720 SAME1
    stm32eforth-fl.s:2936   .text:0000000000001770 FIND
    stm32eforth-fl.s:2937   .text:0000000000001770 $t
    stm32eforth-fl.s:2938   .text:0000000000001774 $d
    stm32eforth-fl.s:2945   .text:0000000000001790 FIND1
    stm32eforth-fl.s:2965   .text:00000000000017e8 FIND6
    stm32eforth-fl.s:2958   .text:00000000000017d0 FIND2
    stm32eforth-fl.s:2963   .text:00000000000017e0 FIND3
    stm32eforth-fl.s:2972   .text:0000000000001800 FIND4
    stm32eforth-fl.s:2978   .text:000000000000181c FIND5
    stm32eforth-fl.s:2993   .text:0000000000001844 _NAMEQ
    stm32eforth-fl.s:2995   .text:000000000000184a $t
    stm32eforth-fl.s:2996   .text:000000000000184c NAMEQ
    stm32eforth-fl.s:2998   .text:0000000000001850 $d
    stm32eforth-fl.s:3013   .text:0000000000001860 BKSP
    stm32eforth-fl.s:3014   .text:0000000000001860 $t
    stm32eforth-fl.s:3015   .text:0000000000001864 $d
    stm32eforth-fl.s:3032   .text:00000000000018a8 BACK1
    stm32eforth-fl.s:3042   .text:00000000000018ac TAP
    stm32eforth-fl.s:3043   .text:00000000000018ac $t
    stm32eforth-fl.s:3044   .text:00000000000018b0 $d
    stm32eforth-fl.s:3059   .text:00000000000018c8 KTAP
    stm32eforth-fl.s:3060   .text:00000000000018c8 TTAP
    stm32eforth-fl.s:3061   .text:00000000000018c8 $t
    stm32eforth-fl.s:3062   .text:00000000000018cc $d
    stm32eforth-fl.s:3078   .text:0000000000001910 KTAP2
    stm32eforth-fl.s:3075   .text:0000000000001908 KTAP1
    stm32eforth-fl.s:3089   .text:0000000000001928 _ACCEP
    stm32eforth-fl.s:3092   .text:0000000000001930 ACCEP
    stm32eforth-fl.s:3094   .text:0000000000001934 $d
    stm32eforth-fl.s:3097   .text:0000000000001940 ACCP1
ARM GAS  stm32eforth-fl.s 			page 103


    stm32eforth-fl.s:3114   .text:0000000000001988 ACCP4
    stm32eforth-fl.s:3109   .text:000000000000197c ACCP2
    stm32eforth-fl.s:3112   .text:0000000000001980 ACCP3
    stm32eforth-fl.s:3124   .text:000000000000199c _QUERY
    stm32eforth-fl.s:3126   .text:00000000000019a2 $t
    stm32eforth-fl.s:3127   .text:00000000000019a4 QUERY
    stm32eforth-fl.s:3129   .text:00000000000019a8 $d
    stm32eforth-fl.s:3147   .text:00000000000019dc _ABORT
    stm32eforth-fl.s:3149   .text:00000000000019e2 $t
    stm32eforth-fl.s:3150   .text:00000000000019e4 ABORT
    stm32eforth-fl.s:3152   .text:00000000000019e8 $d
    stm32eforth-fl.s:3295   .text:0000000000001b78 PRESE
    stm32eforth-fl.s:3310   .text:0000000000001b94 QUIT
    stm32eforth-fl.s:3168   .text:0000000000001a10 ABORQ
    stm32eforth-fl.s:3169   .text:0000000000001a10 $t
    stm32eforth-fl.s:3170   .text:0000000000001a14 $d
    stm32eforth-fl.s:3176   .text:0000000000001a34 ABOR1
    stm32eforth-fl.s:3188   .text:0000000000001a44 _INTER
    stm32eforth-fl.s:3190   .text:0000000000001a50 $t
    stm32eforth-fl.s:3193   .text:0000000000001a54 $d
    stm32eforth-fl.s:3205   .text:0000000000001a90 INTE1
    stm32eforth-fl.s:3202   .text:0000000000001a86 $t
    stm32eforth-fl.s:3203   .text:0000000000001a88 $d
    stm32eforth-fl.s:3210   .text:0000000000001aa0 INTE2
    stm32eforth-fl.s:3211   .text:0000000000001aa0 $t
    stm32eforth-fl.s:3216   .text:0000000000001aa4 $d
    stm32eforth-fl.s:3217   .text:0000000000001aa8 _LBRAC
    stm32eforth-fl.s:3219   .text:0000000000001aaa $t
    stm32eforth-fl.s:3220   .text:0000000000001aac LBRAC
    stm32eforth-fl.s:3222   .text:0000000000001ab0 $d
    stm32eforth-fl.s:3231   .text:0000000000001ac8 _DOTOK
    stm32eforth-fl.s:3233   .text:0000000000001acc $t
    stm32eforth-fl.s:3234   .text:0000000000001acc DOTOK
    stm32eforth-fl.s:3236   .text:0000000000001ad0 $d
    stm32eforth-fl.s:3244   .text:0000000000001af4 DOTO1
    stm32eforth-fl.s:3252   .text:0000000000001b00 _QSTAC
    stm32eforth-fl.s:3255   .text:0000000000001b08 QSTAC
    stm32eforth-fl.s:3257   .text:0000000000001b0c $d
    stm32eforth-fl.s:3263   .text:0000000000001b24 $d
    stm32eforth-fl.s:3269   .text:0000000000001b2c _EVAL
    stm32eforth-fl.s:3272   .text:0000000000001b34 EVAL
    stm32eforth-fl.s:3274   .text:0000000000001b38 EVAL1
    stm32eforth-fl.s:3275   .text:0000000000001b38 $d
    stm32eforth-fl.s:3283   .text:0000000000001b60 EVAL2
    stm32eforth-fl.s:3292   .text:0000000000001b70 _PRESE
    stm32eforth-fl.s:3306   .text:0000000000001b88 $d
    stm32eforth-fl.s:3307   .text:0000000000001b8c _QUIT
    stm32eforth-fl.s:3314   .text:0000000000001ba0 QUIT1
    stm32eforth-fl.s:3315   .text:0000000000001ba0 $d
    stm32eforth-fl.s:3316   .text:0000000000001ba4 QUIT2
    stm32eforth-fl.s:3686   .text:0000000000001ffc flash_regs
    stm32eforth-fl.s:3326   .text:0000000000001bb4 $t
    stm32eforth-fl.s:3345   .text:0000000000001bc6 WAIT_BSY
    stm32eforth-fl.s:3347   .text:0000000000001bca WAIT1
    stm32eforth-fl.s:3358   .text:0000000000001bd4 $d
    stm32eforth-fl.s:3359   .text:0000000000001bd8 _EPAGE
    stm32eforth-fl.s:3363   .text:0000000000001be4 EPAGE
ARM GAS  stm32eforth-fl.s 			page 104


    stm32eforth-fl.s:3376   .text:0000000000001c16 $d
    stm32eforth-fl.s:3380   .text:0000000000001c28 $d
    stm32eforth-fl.s:3384   .text:0000000000001c2c HWORD_WRITE
    stm32eforth-fl.s:3385   .text:0000000000001c2c $t
    stm32eforth-fl.s:3395   .text:0000000000001c50 $d
    stm32eforth-fl.s:3399   .text:0000000000001c6a $t
    stm32eforth-fl.s:3401   .text:0000000000001c6c $d
    stm32eforth-fl.s:3409   .text:0000000000001c74 _ISTOR
    stm32eforth-fl.s:3412   .text:0000000000001c78 ISTOR
    stm32eforth-fl.s:3415   .text:0000000000001c86 $d
    stm32eforth-fl.s:3432   .text:0000000000001cc2 _IMG_SIZE
    stm32eforth-fl.s:3435   .text:0000000000001ccc IMG_SIZE
    stm32eforth-fl.s:3437   .text:0000000000001cd0 $d
    stm32eforth-fl.s:3453   .text:0000000000001d0c _IMGQ
    stm32eforth-fl.s:3456   .text:0000000000001d14 IMGQ
    stm32eforth-fl.s:3458   .text:0000000000001d18 $d
    stm32eforth-fl.s:3472   .text:0000000000001d3c IMG_ADR
    stm32eforth-fl.s:3469   .text:0000000000001d34 _IMG_ADR
    stm32eforth-fl.s:3471   .text:0000000000001d3c $t
    stm32eforth-fl.s:3474   .text:0000000000001d40 $d
    stm32eforth-fl.s:3485   .text:0000000000001d64 _LOAD_IMG
    stm32eforth-fl.s:3488   .text:0000000000001d70 LOAD_IMG
    stm32eforth-fl.s:3490   .text:0000000000001d74 $d
    stm32eforth-fl.s:3521   .text:0000000000001dd8 _ERASE_MPG
    stm32eforth-fl.s:3523   .text:0000000000001de2 $t
    stm32eforth-fl.s:3524   .text:0000000000001de4 ERASE_MPG
    stm32eforth-fl.s:3526   .text:0000000000001de8 $d
    stm32eforth-fl.s:3583   .text:0000000000001e9c PG_TO_ADR
    stm32eforth-fl.s:3544   .text:0000000000001e28 _FLSH_WR
    stm32eforth-fl.s:3547   .text:0000000000001e30 FLSH_WR
    stm32eforth-fl.s:3548   .text:0000000000001e30 $t
    stm32eforth-fl.s:3549   .text:0000000000001e34 $d
    stm32eforth-fl.s:3569   .text:0000000000001e7c _ADR_TO_PG
    stm32eforth-fl.s:3572   .text:0000000000001e84 ADR_TO_PG
    stm32eforth-fl.s:3579   .text:0000000000001e90 $d
    stm32eforth-fl.s:3580   .text:0000000000001e94 _PG_TO_ADR
    stm32eforth-fl.s:3590   .text:0000000000001ea8 $d
    stm32eforth-fl.s:3591   .text:0000000000001eac _ERASE_IMG
    stm32eforth-fl.s:3593   .text:0000000000001eb6 $t
    stm32eforth-fl.s:3594   .text:0000000000001eb8 ERASE_IMG
    stm32eforth-fl.s:3596   .text:0000000000001ebc $d
    stm32eforth-fl.s:3612   .text:0000000000001ef8 _SAVE_IMG
    stm32eforth-fl.s:3615   .text:0000000000001f04 SAVE_IMG
    stm32eforth-fl.s:3617   .text:0000000000001f08 $d
    stm32eforth-fl.s:3650   .text:0000000000001f7c _TURNKEY
    stm32eforth-fl.s:3652   .text:0000000000001f84 $t
    stm32eforth-fl.s:3653   .text:0000000000001f84 TURNKEY
    stm32eforth-fl.s:3655   .text:0000000000001f88 $d
    stm32eforth-fl.s:3701   .text:0000000000002010 TICK
    stm32eforth-fl.s:3663   .text:0000000000001fa8 _FORGET
    stm32eforth-fl.s:3666   .text:0000000000001fb0 FORGET
    stm32eforth-fl.s:3668   .text:0000000000001fb4 $d
    stm32eforth-fl.s:4136   .text:0000000000002454 OVERT
    stm32eforth-fl.s:3687   .text:0000000000001ffc $d
    stm32eforth-fl.s:3698   .text:000000000000200c _TICK
    stm32eforth-fl.s:3700   .text:000000000000200e $t
    stm32eforth-fl.s:3703   .text:0000000000002014 $d
ARM GAS  stm32eforth-fl.s 			page 105


    stm32eforth-fl.s:3707   .text:0000000000002028 TICK1
    stm32eforth-fl.s:3714   .text:0000000000002034 _ALLOT
    stm32eforth-fl.s:3716   .text:000000000000203a $t
    stm32eforth-fl.s:3717   .text:000000000000203c ALLOT
    stm32eforth-fl.s:3719   .text:0000000000002040 $d
    stm32eforth-fl.s:3727   .text:0000000000002050 _COMMA
    stm32eforth-fl.s:3728   .text:0000000000002052 $t
    stm32eforth-fl.s:3729   .text:0000000000002054 COMMA
    stm32eforth-fl.s:3731   .text:0000000000002058 $d
    stm32eforth-fl.s:3742   .text:0000000000002074 $d
    stm32eforth-fl.s:3743   .text:0000000000002078 _BCOMP
    stm32eforth-fl.s:3745   .text:0000000000002082 $t
    stm32eforth-fl.s:3746   .text:0000000000002084 BCOMP
    stm32eforth-fl.s:3748   .text:0000000000002088 $d
    stm32eforth-fl.s:3756   .text:0000000000002098 _COMPI
    stm32eforth-fl.s:3758   .text:00000000000020a0 $t
    stm32eforth-fl.s:3759   .text:00000000000020a0 COMPI
    stm32eforth-fl.s:3761   .text:00000000000020a4 $d
    stm32eforth-fl.s:4181   .text:00000000000024a8 CALLC
    stm32eforth-fl.s:3777   .text:00000000000020dc _LITER
    stm32eforth-fl.s:3779   .text:00000000000020e4 $t
    stm32eforth-fl.s:3780   .text:00000000000020e4 LITER
    stm32eforth-fl.s:3782   .text:00000000000020e8 $d
    stm32eforth-fl.s:3794   .text:00000000000020f8 STRCQ
    stm32eforth-fl.s:3795   .text:00000000000020f8 $t
    stm32eforth-fl.s:3796   .text:00000000000020fc $d
    stm32eforth-fl.s:3815   .text:0000000000002134 _FOR
    stm32eforth-fl.s:3817   .text:0000000000002138 $t
    stm32eforth-fl.s:3818   .text:0000000000002138 FOR
    stm32eforth-fl.s:3820   .text:000000000000213c $d
    stm32eforth-fl.s:3829   .text:0000000000002150 _BEGIN
    stm32eforth-fl.s:3831   .text:0000000000002156 $t
    stm32eforth-fl.s:3832   .text:0000000000002158 BEGIN
    stm32eforth-fl.s:3834   .text:000000000000215c $d
    stm32eforth-fl.s:3840   .text:0000000000002164 $d
    stm32eforth-fl.s:3841   .text:0000000000002168 _FNEXT
    stm32eforth-fl.s:3844   .text:0000000000002170 FNEXT
    stm32eforth-fl.s:3846   .text:0000000000002174 $d
    stm32eforth-fl.s:3855   .text:0000000000002188 _UNTIL
    stm32eforth-fl.s:3857   .text:000000000000218e $t
    stm32eforth-fl.s:3858   .text:0000000000002190 UNTIL
    stm32eforth-fl.s:3860   .text:0000000000002194 $d
    stm32eforth-fl.s:3869   .text:00000000000021a8 _AGAIN
    stm32eforth-fl.s:3871   .text:00000000000021ae $t
    stm32eforth-fl.s:3872   .text:00000000000021b0 AGAIN
    stm32eforth-fl.s:3874   .text:00000000000021b4 $d
    stm32eforth-fl.s:3883   .text:00000000000021c8 _IFF
    stm32eforth-fl.s:3886   .text:00000000000021cc IFF
    stm32eforth-fl.s:3888   .text:00000000000021d0 $d
    stm32eforth-fl.s:3900   .text:00000000000021f4 _AHEAD
    stm32eforth-fl.s:3902   .text:00000000000021fa $t
    stm32eforth-fl.s:3903   .text:00000000000021fc AHEAD
    stm32eforth-fl.s:3905   .text:0000000000002200 $d
    stm32eforth-fl.s:3917   .text:0000000000002224 _REPEA
    stm32eforth-fl.s:3920   .text:000000000000222c REPEA
    stm32eforth-fl.s:3922   .text:0000000000002230 $d
    stm32eforth-fl.s:3932   .text:0000000000002248 _THENN
ARM GAS  stm32eforth-fl.s 			page 106


    stm32eforth-fl.s:3935   .text:0000000000002250 THENN
    stm32eforth-fl.s:3937   .text:0000000000002254 $d
    stm32eforth-fl.s:3946   .text:0000000000002268 _AFT
    stm32eforth-fl.s:3948   .text:000000000000226c $t
    stm32eforth-fl.s:3949   .text:000000000000226c AFT
    stm32eforth-fl.s:3951   .text:0000000000002270 $d
    stm32eforth-fl.s:3961   .text:0000000000002288 _ELSEE
    stm32eforth-fl.s:3964   .text:0000000000002290 ELSEE
    stm32eforth-fl.s:3966   .text:0000000000002294 $d
    stm32eforth-fl.s:3975   .text:00000000000022a8 _WHILE
    stm32eforth-fl.s:3977   .text:00000000000022ae $t
    stm32eforth-fl.s:3978   .text:00000000000022b0 WHILE
    stm32eforth-fl.s:3980   .text:00000000000022b4 $d
    stm32eforth-fl.s:3988   .text:00000000000022c4 _ABRTQ
    stm32eforth-fl.s:3991   .text:00000000000022cc ABRTQ
    stm32eforth-fl.s:3993   .text:00000000000022d0 $d
    stm32eforth-fl.s:4002   .text:00000000000022e4 _STRQ
    stm32eforth-fl.s:4005   .text:00000000000022e8 STRQ
    stm32eforth-fl.s:4007   .text:00000000000022ec $d
    stm32eforth-fl.s:4016   .text:0000000000002300 _DOTQ
    stm32eforth-fl.s:4019   .text:0000000000002304 DOTQ
    stm32eforth-fl.s:4021   .text:0000000000002308 $d
    stm32eforth-fl.s:4033   .text:000000000000231c _UNIQU
    stm32eforth-fl.s:4035   .text:0000000000002324 $t
    stm32eforth-fl.s:4036   .text:0000000000002324 UNIQU
    stm32eforth-fl.s:4038   .text:0000000000002328 $d
    stm32eforth-fl.s:4048   .text:0000000000002350 UNIQ1
    stm32eforth-fl.s:4045   .text:0000000000002344 $d
    stm32eforth-fl.s:4059   .text:0000000000002358 SNAME
    stm32eforth-fl.s:4060   .text:0000000000002358 $t
    stm32eforth-fl.s:4061   .text:000000000000235c $d
    stm32eforth-fl.s:4077   .text:00000000000023a0 SNAM1
    stm32eforth-fl.s:4081   .text:00000000000023ac $t
    stm32eforth-fl.s:4086   .text:00000000000023b0 $d
    stm32eforth-fl.s:4087   .text:00000000000023b4 _SCOMP
    stm32eforth-fl.s:4089   .text:00000000000023be $t
    stm32eforth-fl.s:4090   .text:00000000000023c0 SCOMP
    stm32eforth-fl.s:4092   .text:00000000000023c4 $d
    stm32eforth-fl.s:4104   .text:00000000000023fc SCOM2
    stm32eforth-fl.s:4101   .text:00000000000023f4 SCOM1
    stm32eforth-fl.s:4109   .text:0000000000002410 SCOM3
    stm32eforth-fl.s:4116   .text:000000000000241c COLON_ABORT
    stm32eforth-fl.s:4117   .text:000000000000241c $t
    stm32eforth-fl.s:4118   .text:0000000000002420 $d
    stm32eforth-fl.s:4133   .text:000000000000244c _OVERT
    stm32eforth-fl.s:4135   .text:0000000000002452 $t
    stm32eforth-fl.s:4138   .text:0000000000002458 $d
    stm32eforth-fl.s:4148   .text:0000000000002470 _SEMIS
    stm32eforth-fl.s:4150   .text:0000000000002472 $t
    stm32eforth-fl.s:4151   .text:0000000000002474 SEMIS
    stm32eforth-fl.s:4154   .text:0000000000002478 $d
    stm32eforth-fl.s:4163   .text:000000000000248c _RBRAC
    stm32eforth-fl.s:4165   .text:000000000000248e $t
    stm32eforth-fl.s:4166   .text:0000000000002490 RBRAC
    stm32eforth-fl.s:4168   .text:0000000000002494 $d
    stm32eforth-fl.s:4182   .text:00000000000024a8 $t
    stm32eforth-fl.s:4183   .text:00000000000024ac $d
ARM GAS  stm32eforth-fl.s 			page 107


    stm32eforth-fl.s:4190   .text:00000000000024b4 _COLON
    stm32eforth-fl.s:4192   .text:00000000000024b6 $t
    stm32eforth-fl.s:4193   .text:00000000000024b8 COLON
    stm32eforth-fl.s:4195   .text:00000000000024bc $d
    stm32eforth-fl.s:4206   .text:00000000000024dc _IMMED
    stm32eforth-fl.s:4208   .text:00000000000024e6 $t
    stm32eforth-fl.s:4209   .text:00000000000024e8 IMMED
    stm32eforth-fl.s:4211   .text:00000000000024ec $d
    stm32eforth-fl.s:4228   .text:0000000000002518 _CONST
    stm32eforth-fl.s:4231   .text:0000000000002524 CONST
    stm32eforth-fl.s:4233   .text:0000000000002528 $d
    stm32eforth-fl.s:4247   .text:0000000000002558 _CREAT
    stm32eforth-fl.s:4250   .text:0000000000002560 CREAT
    stm32eforth-fl.s:4252   .text:0000000000002564 $d
    stm32eforth-fl.s:4265   .text:0000000000002590 _VARIA
    stm32eforth-fl.s:4268   .text:000000000000259c VARIA
    stm32eforth-fl.s:4270   .text:00000000000025a0 $d
    stm32eforth-fl.s:4285   .text:00000000000025b4 DMP
    stm32eforth-fl.s:4286   .text:00000000000025b4 $t
    stm32eforth-fl.s:4287   .text:00000000000025b8 $d
    stm32eforth-fl.s:4299   .text:00000000000025f0 PDUM2
    stm32eforth-fl.s:4293   .text:00000000000025d8 PDUM1
    stm32eforth-fl.s:4307   .text:00000000000025fc $d
    stm32eforth-fl.s:4308   .text:0000000000002600 _DUMP
    stm32eforth-fl.s:4311   .text:0000000000002608 DUMP
    stm32eforth-fl.s:4313   .text:000000000000260c $d
    stm32eforth-fl.s:4331   .text:000000000000265c DUMP4
    stm32eforth-fl.s:4321   .text:0000000000002634 DUMP1
    stm32eforth-fl.s:4333   .text:0000000000002664 DUMP3
    stm32eforth-fl.s:4344   .text:000000000000267c _DOTS
    stm32eforth-fl.s:4348   .text:0000000000002680 DOTS
    stm32eforth-fl.s:4350   .text:0000000000002684 $d
    stm32eforth-fl.s:4358   .text:00000000000026a4 DOTS2
    stm32eforth-fl.s:4354   .text:0000000000002698 DOTS1
    stm32eforth-fl.s:4367   .text:00000000000026b8 _TNAME
    stm32eforth-fl.s:4369   .text:00000000000026be $t
    stm32eforth-fl.s:4370   .text:00000000000026c0 TNAME
    stm32eforth-fl.s:4372   .text:00000000000026c4 $d
    stm32eforth-fl.s:4375   .text:00000000000026d0 TNAM1
    stm32eforth-fl.s:4387   .text:0000000000002704 TNAM2
    stm32eforth-fl.s:4396   .text:0000000000002714 _DOTID
    stm32eforth-fl.s:4398   .text:0000000000002718 $t
    stm32eforth-fl.s:4399   .text:0000000000002718 DOTID
    stm32eforth-fl.s:4401   .text:000000000000271c $d
    stm32eforth-fl.s:4408   .text:0000000000002740 DOTI1
    stm32eforth-fl.s:4412   .text:000000000000274e $t
    stm32eforth-fl.s:4413   .text:0000000000002750 $d
    stm32eforth-fl.s:4415   *ABS*:0000000000000000 WANT_SEE
    stm32eforth-fl.s:4496   .text:0000000000002758 _WORDS
    stm32eforth-fl.s:4498   .text:000000000000275e $t
    stm32eforth-fl.s:4499   .text:0000000000002760 WORDS
    stm32eforth-fl.s:4501   .text:0000000000002764 $d
    stm32eforth-fl.s:4504   .text:0000000000002770 WORS1
    stm32eforth-fl.s:4514   .text:0000000000002798 WORS2
    stm32eforth-fl.s:4527   .text:000000000000279c VERSN
    stm32eforth-fl.s:4528   .text:000000000000279c $t
    stm32eforth-fl.s:4529   .text:00000000000027a0 $d
ARM GAS  stm32eforth-fl.s 			page 108


    stm32eforth-fl.s:4536   .text:00000000000027b0 _HI
    stm32eforth-fl.s:4541   .text:00000000000027b8 $d
    stm32eforth-fl.s:4543   .text:00000000000027d8 $d
    stm32eforth-fl.s:4569   .text:0000000000002828 $t
    stm32eforth-fl.s:4576   .text:0000000000002842 COLD1
    stm32eforth-fl.s:4577   .text:0000000000002842 $d
    stm32eforth-fl.s:4593   .text:0000000000002882 COLD2
    stm32eforth-fl.s:4594   .text:0000000000002882 $t
    stm32eforth-fl.s:4596   .text:0000000000002884 $d
    stm32eforth-fl.s:4601   .text.user:0000000000000000 $d
    stm32eforth-fl.s:4603   .text:0000000000002888 $d
    stm32eforth-fl.s:325    .text:000000000000002f $d
    stm32eforth-fl.s:325    .text:0000000000000030 $t
    stm32eforth-fl.s:580    .text:0000000000000433 $d
    stm32eforth-fl.s:580    .text:0000000000000434 $t
    stm32eforth-fl.s:629    .text:00000000000004d5 $d
    stm32eforth-fl.s:629    .text:00000000000004d6 $t
    stm32eforth-fl.s:649    .text:00000000000004fd $d
    stm32eforth-fl.s:649    .text:00000000000004fe $t
    stm32eforth-fl.s:673    .text:000000000000052f $d
    stm32eforth-fl.s:673    .text:0000000000000530 $t
    stm32eforth-fl.s:783    .text:00000000000005af $d
    stm32eforth-fl.s:817    .text:00000000000005db $d
    stm32eforth-fl.s:817    .text:00000000000005dc $t
    stm32eforth-fl.s:830    .text:00000000000005ef $d
    stm32eforth-fl.s:830    .text:00000000000005f0 $t
    stm32eforth-fl.s:841    .text:00000000000005fb $d
    stm32eforth-fl.s:841    .text:00000000000005fc $t
    stm32eforth-fl.s:853    .text:000000000000060d $d
    stm32eforth-fl.s:853    .text:000000000000060e $t
    stm32eforth-fl.s:865    .text:000000000000061f $d
    stm32eforth-fl.s:865    .text:0000000000000620 $t
    stm32eforth-fl.s:889    .text:0000000000000645 $d
    stm32eforth-fl.s:889    .text:0000000000000646 $t
    stm32eforth-fl.s:911    .text:0000000000000667 $d
    stm32eforth-fl.s:911    .text:0000000000000668 $t
    stm32eforth-fl.s:924    .text:0000000000000679 $d
    stm32eforth-fl.s:924    .text:000000000000067a $t
    stm32eforth-fl.s:936    .text:000000000000068b $d
    stm32eforth-fl.s:936    .text:000000000000068c $t
    stm32eforth-fl.s:960    .text:00000000000006b1 $d
    stm32eforth-fl.s:960    .text:00000000000006b2 $t
    stm32eforth-fl.s:999    .text:00000000000006f7 $d
    stm32eforth-fl.s:999    .text:00000000000006f8 $t
    stm32eforth-fl.s:1011   .text:000000000000070d $d
    stm32eforth-fl.s:1011   .text:000000000000070e $t
    stm32eforth-fl.s:1073   .text:0000000000000767 $d
    stm32eforth-fl.s:1073   .text:0000000000000768 $t
    stm32eforth-fl.s:1087   .text:000000000000077b $d
    stm32eforth-fl.s:1087   .text:000000000000077c $t
    stm32eforth-fl.s:1098   .text:0000000000000789 $d
    stm32eforth-fl.s:1098   .text:000000000000078a $t
    stm32eforth-fl.s:1109   .text:0000000000000799 $d
    stm32eforth-fl.s:1109   .text:000000000000079a $t
    stm32eforth-fl.s:1120   .text:00000000000007a9 $d
    stm32eforth-fl.s:1120   .text:00000000000007aa $t
    stm32eforth-fl.s:1153   .text:00000000000007d9 $d
ARM GAS  stm32eforth-fl.s 			page 109


    stm32eforth-fl.s:1153   .text:00000000000007da $t
    stm32eforth-fl.s:1187   .text:000000000000080d $d
    stm32eforth-fl.s:1187   .text:000000000000080e $t
    stm32eforth-fl.s:1198   .text:000000000000081d $d
    stm32eforth-fl.s:1198   .text:000000000000081e $t
    stm32eforth-fl.s:1209   .text:000000000000082f $d
    stm32eforth-fl.s:1209   .text:0000000000000830 $t
    stm32eforth-fl.s:1248   .text:000000000000086b $d
    stm32eforth-fl.s:1248   .text:000000000000086c $t
    stm32eforth-fl.s:1261   .text:000000000000087f $d
    stm32eforth-fl.s:1261   .text:0000000000000880 $t
    stm32eforth-fl.s:1288   .text:00000000000008ad $d
    stm32eforth-fl.s:1288   .text:00000000000008ae $t
    stm32eforth-fl.s:1312   .text:00000000000008d1 $d
    stm32eforth-fl.s:1312   .text:00000000000008d2 $t
    stm32eforth-fl.s:1341   .text:00000000000008ff $d
    stm32eforth-fl.s:1341   .text:0000000000000900 $t
    stm32eforth-fl.s:1414   .text:000000000000096f $d
    stm32eforth-fl.s:1414   .text:0000000000000970 $t
    stm32eforth-fl.s:1429   .text:0000000000000987 $d
    stm32eforth-fl.s:1429   .text:0000000000000988 $t
    stm32eforth-fl.s:1444   .text:00000000000009a3 $d
    stm32eforth-fl.s:1444   .text:00000000000009a4 $t
    stm32eforth-fl.s:1515   .text:00000000000009fb $d
    stm32eforth-fl.s:1515   .text:00000000000009fc $t
    stm32eforth-fl.s:1526   .text:0000000000000a0f $d
    stm32eforth-fl.s:1526   .text:0000000000000a10 $t
    stm32eforth-fl.s:1549   .text:0000000000000a37 $d
    stm32eforth-fl.s:1549   .text:0000000000000a38 $t
    stm32eforth-fl.s:1573   .text:0000000000000a5f $d
    stm32eforth-fl.s:1573   .text:0000000000000a60 $t
    stm32eforth-fl.s:1597   .text:0000000000000a7d $d
    stm32eforth-fl.s:1597   .text:0000000000000a7e $t
    stm32eforth-fl.s:1621   .text:0000000000000aa7 $d
    stm32eforth-fl.s:1621   .text:0000000000000aa8 $t
    stm32eforth-fl.s:1670   .text:0000000000000af9 $d
    stm32eforth-fl.s:1670   .text:0000000000000afa $t
    stm32eforth-fl.s:1693   .text:0000000000000b23 $d
    stm32eforth-fl.s:1693   .text:0000000000000b24 $t
    stm32eforth-fl.s:1708   .text:0000000000000b3d $d
    stm32eforth-fl.s:1708   .text:0000000000000b3e $t
    stm32eforth-fl.s:1721   .text:0000000000000b59 $d
    stm32eforth-fl.s:1721   .text:0000000000000b5a $t
    stm32eforth-fl.s:1734   .text:0000000000000b73 $d
    stm32eforth-fl.s:1734   .text:0000000000000b74 $t
    stm32eforth-fl.s:1747   .text:0000000000000b8d $d
    stm32eforth-fl.s:1747   .text:0000000000000b8e $t
    stm32eforth-fl.s:1764   .text:0000000000000ba7 $d
    stm32eforth-fl.s:1764   .text:0000000000000ba8 $t
    stm32eforth-fl.s:1783   .text:0000000000000bd3 $d
    stm32eforth-fl.s:1783   .text:0000000000000bd4 $t
    stm32eforth-fl.s:1850   .text:0000000000000c81 $d
    stm32eforth-fl.s:1850   .text:0000000000000c82 $t
    stm32eforth-fl.s:1907   .text:0000000000000cfb $d
    stm32eforth-fl.s:1907   .text:0000000000000cfc $t
    stm32eforth-fl.s:1975   .text:0000000000000da9 $d
    stm32eforth-fl.s:1975   .text:0000000000000daa $t
ARM GAS  stm32eforth-fl.s 			page 110


    stm32eforth-fl.s:1994   .text:0000000000000dd1 $d
    stm32eforth-fl.s:1994   .text:0000000000000dd2 $t
    stm32eforth-fl.s:2032   .text:0000000000000e1b $d
    stm32eforth-fl.s:2032   .text:0000000000000e1c $t
    stm32eforth-fl.s:2071   .text:0000000000000e69 $d
    stm32eforth-fl.s:2071   .text:0000000000000e6a $t
    stm32eforth-fl.s:2095   .text:0000000000000e9d $d
    stm32eforth-fl.s:2095   .text:0000000000000e9e $t
    stm32eforth-fl.s:2118   .text:0000000000000ecd $d
    stm32eforth-fl.s:2118   .text:0000000000000ece $t
    stm32eforth-fl.s:2185   .text:0000000000000f9b $d
    stm32eforth-fl.s:2185   .text:0000000000000f9c $t
    stm32eforth-fl.s:2199   .text:0000000000000fb9 $d
    stm32eforth-fl.s:2199   .text:0000000000000fba $t
    stm32eforth-fl.s:2232   .text:0000000000001007 $d
    stm32eforth-fl.s:2232   .text:0000000000001008 $t
    stm32eforth-fl.s:2250   .text:000000000000102b $d
    stm32eforth-fl.s:2250   .text:000000000000102c $t
    stm32eforth-fl.s:2266   .text:0000000000001053 $d
    stm32eforth-fl.s:2266   .text:0000000000001054 $t
    stm32eforth-fl.s:2333   .text:00000000000010eb $d
    stm32eforth-fl.s:2333   .text:00000000000010ec $t
    stm32eforth-fl.s:2478   .text:00000000000012e3 $d
    stm32eforth-fl.s:2478   .text:00000000000012e4 $t
    stm32eforth-fl.s:2497   .text:0000000000001319 $d
    stm32eforth-fl.s:2497   .text:000000000000131a $t
    stm32eforth-fl.s:2517   .text:000000000000134f $d
    stm32eforth-fl.s:2517   .text:0000000000001350 $t
    stm32eforth-fl.s:2593   .text:00000000000013cf $d
    stm32eforth-fl.s:2593   .text:00000000000013d0 $t
    stm32eforth-fl.s:2631   .text:000000000000142f $d
    stm32eforth-fl.s:2631   .text:0000000000001430 $t
    stm32eforth-fl.s:2791   .text:000000000000161b $d
    stm32eforth-fl.s:2791   .text:000000000000161c $t
    stm32eforth-fl.s:2834   .text:000000000000167d $d
    stm32eforth-fl.s:2834   .text:000000000000167e $t
    stm32eforth-fl.s:2849   .text:00000000000016a1 $d
    stm32eforth-fl.s:2849   .text:00000000000016a2 $t
    stm32eforth-fl.s:3091   .text:000000000000192f $d
    stm32eforth-fl.s:3091   .text:0000000000001930 $t
    stm32eforth-fl.s:3254   .text:0000000000001b07 $d
    stm32eforth-fl.s:3254   .text:0000000000001b08 $t
    stm32eforth-fl.s:3262   .text:0000000000001b23 $d
    stm32eforth-fl.s:3271   .text:0000000000001b31 $d
    stm32eforth-fl.s:3271   .text:0000000000001b32 $t
    stm32eforth-fl.s:3294   .text:0000000000001b77 $d
    stm32eforth-fl.s:3294   .text:0000000000001b78 $t
    stm32eforth-fl.s:3309   .text:0000000000001b91 $d
    stm32eforth-fl.s:3309   .text:0000000000001b92 $t
    stm32eforth-fl.s:3361   .text:0000000000001be3 $d
    stm32eforth-fl.s:3361   .text:0000000000001be4 $t
    stm32eforth-fl.s:3411   .text:0000000000001c77 $d
    stm32eforth-fl.s:3411   .text:0000000000001c78 $t
    stm32eforth-fl.s:3434   .text:0000000000001ccb $d
    stm32eforth-fl.s:3434   .text:0000000000001ccc $t
    stm32eforth-fl.s:3455   .text:0000000000001d11 $d
    stm32eforth-fl.s:3455   .text:0000000000001d12 $t
ARM GAS  stm32eforth-fl.s 			page 111


    stm32eforth-fl.s:3487   .text:0000000000001d6d $d
    stm32eforth-fl.s:3487   .text:0000000000001d6e $t
    stm32eforth-fl.s:3571   .text:0000000000001e83 $d
    stm32eforth-fl.s:3571   .text:0000000000001e84 $t
    stm32eforth-fl.s:3582   .text:0000000000001e9b $d
    stm32eforth-fl.s:3582   .text:0000000000001e9c $t
    stm32eforth-fl.s:3614   .text:0000000000001f01 $d
    stm32eforth-fl.s:3614   .text:0000000000001f02 $t
    stm32eforth-fl.s:3665   .text:0000000000001faf $d
    stm32eforth-fl.s:3665   .text:0000000000001fb0 $t
    stm32eforth-fl.s:3843   .text:000000000000216d $d
    stm32eforth-fl.s:3843   .text:000000000000216e $t
    stm32eforth-fl.s:3885   .text:00000000000021cb $d
    stm32eforth-fl.s:3885   .text:00000000000021cc $t
    stm32eforth-fl.s:3919   .text:000000000000222b $d
    stm32eforth-fl.s:3919   .text:000000000000222c $t
    stm32eforth-fl.s:3934   .text:000000000000224d $d
    stm32eforth-fl.s:3934   .text:000000000000224e $t
    stm32eforth-fl.s:3963   .text:000000000000228d $d
    stm32eforth-fl.s:3963   .text:000000000000228e $t
    stm32eforth-fl.s:3990   .text:00000000000022cb $d
    stm32eforth-fl.s:3990   .text:00000000000022cc $t
    stm32eforth-fl.s:4004   .text:00000000000022e7 $d
    stm32eforth-fl.s:4004   .text:00000000000022e8 $t
    stm32eforth-fl.s:4018   .text:0000000000002303 $d
    stm32eforth-fl.s:4018   .text:0000000000002304 $t
    stm32eforth-fl.s:4230   .text:0000000000002521 $d
    stm32eforth-fl.s:4230   .text:0000000000002522 $t
    stm32eforth-fl.s:4249   .text:000000000000255f $d
    stm32eforth-fl.s:4249   .text:0000000000002560 $t
    stm32eforth-fl.s:4267   .text:0000000000002599 $d
    stm32eforth-fl.s:4267   .text:000000000000259a $t
    stm32eforth-fl.s:4310   .text:0000000000002605 $d
    stm32eforth-fl.s:4310   .text:0000000000002606 $t
    stm32eforth-fl.s:4347   .text:000000000000267f $d
    stm32eforth-fl.s:4347   .text:0000000000002680 $t
    stm32eforth-fl.s:4538   .text:00000000000027b3 $d
    stm32eforth-fl.s:4538   .text:00000000000027b4 $t

UNDEFINED SYMBOLS
_mstack
