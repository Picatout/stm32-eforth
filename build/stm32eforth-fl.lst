ARM GAS  stm32eforth-fl.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	* 
   8              	*	This version use indirect threaded model. This model enable 
   9              	*	leaving the core Forth system in FLASH memory while the users 
  10              	*	definitions reside in RAM. 
  11              	*	R0 	is used as IP , inner interpreter address pointer 
  12              	*	R4 	is used as WP , working register 
  13              	*	R8 	is used as link register by _NEST macro it is initialized 
  14              	*  		NEST address and MUST BE PRESERVED.
  15              	*
  16              	*     Use USART1 for console I/O
  17              	*     port config: 115200 8N1 
  18              	*     TX on  PA9,  RX on PA10  
  19              	*
  20              	*     eForth is executed from flash, not copied to RAM
  21              	*     eForth use main stack R13 as return stack (thread stack not used) 
  22              	*
  23              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  24              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  25              	*     a 128 bytes tib is reserved below flwr_buffer 
  26              	*     Forth dstack is below tib and reserve 512 bytes 
  27              	*   
  28              	******************************************************
  29              	
  30              	*****************************************************************************
  31              	*	STM32eForth version 7.20
  32              	*	Chen-Hanson Ting,  July 2014
  33              	
  34              	*	Subroutine Threaded Forth Model
  35              	*	Adapted to STM32F407-Discovery Board
  36              	*	Assembled by Keil uVision 5.10
  37              	
  38              	*	Version 4.03
  39              	*	Direct Threaded Forth Model
  40              	*	Derived from 80386 eForth versin 4.02
  41              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  42              	
  43              	*	Subroutine thread (Branch-Link) model
  44              	*	  Register assignments
  45              	*	IP	 	R0 	*scratch
  46              	*	SP	 	R1  * data stack pointer
  47              	*	RP	 	R2 * return stack pointer 
  48              	*	UP	 	R3 
  49              	*	WP	 	R4	*scratch 
  50              	*	TOS	 	R5  * top of data stack
  51              	*	XP	 	R6 	*scratch
  52              	*	YP	 	R7	*scratch
  53              	*	  All Forth words are called by 
  54              	*	BL.W	addr
  55              	*	  All low level code words are terminaled by
  56              	*	BX	LR 	(_RET)
  57              	*	  All high level Forth words start with
ARM GAS  stm32eforth-fl.s 			page 2


  58              	*	STRFD	RP!,{LR}	(_NEST)
  59              	*	  All high level Forth words end with
  60              	*	LDRFD	RP!,{PC}	(_UNNEST)
  61              	*	  Top of data stack is cached in R5
  62              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  63              	*	TX on PA9 and RX on PA10.
  64              	
  65              	*	Version 5.02, 09oct04cht
  66              	*	fOR ADuC702x from Analog Devices
  67              	*	Version 6.01, 10apr08cht a
  68              	*	.p2align 2 to at91sam7x256
  69              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  70              	*	Running under uVision3 RealView from Keil
  71              	*	Version 7.01, 29jun14cht
  72              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  73              	*	.p2aligned to eForth 2 Model
  74              	*	Assembled to flash memory and executed therefrom.
  75              	*	Version 7.10, 30jun14cht
  76              	*	Flash memory mapped to Page 0 where codes are executed
  77              	*	Version 7.20, 02jul14cht
  78              	*	Irreducible Complexity
  79              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  80              	*	TURNKEY saves current application from RAM to flash.
  81              	*********************************************************/
  82              	
  83              	  .syntax unified
  84              	  .cpu cortex-m3
  85              	  .fpu softvfp
  86              	  .thumb
  87              	
  88              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
ARM GAS  stm32eforth-fl.s 			page 3


  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
ARM GAS  stm32eforth-fl.s 			page 4


  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
  89              	
  90              	/* blue pill specific constants */ 
  91              	  .equ LED_GPIO, GPIOC_BASE_ADR
  92              	  .equ LED_PIN, 13
  93              	  .equ UART, USART1_BASE_ADR 
  94              	
  95              	/* eForth specific constants */
  96              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  97              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  98              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  99              	.equ UPP ,	0x20000000	/*start of user area (UP0) */
 100              	.equ DTOP ,	0x20000100	/*start of usable RAM area (HERE) */
 101              	.equ DEND , 0x20004E00  /*usable RAM end */
 102              	 .equ RAMOFFSET ,	0x20000000	// remap
 103              	 .equ RAMEND, 0x20005000 // 20Ko
 104              	
 105              	/*************************************
ARM GAS  stm32eforth-fl.s 			page 5


 106              	   system variables offset from UPP
 107              	*************************************/
 108              	  .equ SEED_OFS, 4    // prng seed 
 109              	  .equ TICKS_OFS, SEED_OFS+4  // millseconds counter
 110              	  .equ TIMER_OFS, TICKS_OFS+4  // count down timer
 111              	  .equ FTRACE_OFS, TIMER_OFS+4  // compile to RAM 
 112              	  .equ IMG_SIGN_OFS, FTRACE_OFS+4  // image signature  
 113              	  .equ BOOT_OFS, IMG_SIGN_OFS+4  // boot program address
 114              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
 115              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
 116              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
 117              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
 118              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
 119              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
 120              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
 121              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
 122              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
 123              	  .equ FORTH_CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
 124              	  .equ RAM_CTOP_OFS, FORTH_CTOP_OFS+4  // ram free dictionary address
 125              	  .equ LASTN_OFS, RAM_CTOP_OFS+4     // last word in dictionary link nfa 
 126              	  .equ VARS_END_OFS, LASTN_OFS+4 // end of system variables  
 127              	
 128              	/***********************************************
 129              	* MACROS
 130              	*	Assemble inline direct threaded code ending.
 131              	***********************************************/
 132              		.macro _CALL fn /* low level routine call */ 
 133              	 	PUSH {LR}
 134              		BL \fn  
 135              		POP {LR}
 136              		.endm
 137              		
 138              		.macro	_RET /*exit low level call */
 139              		BX LR 
 140              		.endm
 141              	
 142              		.macro _NEXT /* direct jump INEXT */ 
 143              		B INEXT   
 144              		.endm 
 145              	
 146              	 	.macro	_NEST /*start high level word */
 147              		BX R8 // BX R8 
 148              		NOP.N 
 149              		.endm
 150              	
 151              		.macro _ADR label 
 152              		.word 1+\label  
 153              		.endm 
 154              	
 155              	 	.macro	_UNNEST	/*end high level word */
 156              		_ADR UNNEST 
 157              		.endm
 158              	
 159              	 	.macro	_DOLIT u /*long literals */
 160              		_ADR	DOLIT
 161              		.word	\u 
 162              		.endm
ARM GAS  stm32eforth-fl.s 			page 6


 163              	
 164              		.macro _DOTQP len, text 
 165              		_ADR DOTQP 
 166              		.byte \len 
 167              		.ascii "\text" 
 168              		.p2align 2 
 169              		.endm
 170              	
 171              		.macro _COMPI name 
 172              		_DOLIT \name 
 173              		_ADR CALLC 
 174              		.endm 
 175              	
 176              		.macro _ABORQ len,name 
 177              		_ADR ABORQ 
 178              		.byte \len 
 179              		.ascii "\name"
 180              		.p2align 2 
 181              		.endm
 182              	
 183              		.macro _BRAN label 
 184              		_ADR BRAN 
 185              		.word \label 
 186              		.endm 
 187              	
 188              		.macro _QBRAN label 
 189              		_ADR QBRAN 
 190              		.word \label
 191              		.endm 
 192              	
 193              		.macro _DONXT label 
 194              		_ADR DONXT
 195              		.word \label 
 196              		.endm 
 197              	
 198              	 	.macro	_PUSH	/*push R5 on data stack*/
 199              		STR	R5,[R1,#-4]!
 200              		.endm
 201              	
 202              	 	.macro	_POP /*pop data stack to R5 */
 203              		LDR	R5,[R1],#4
 204              		.endm
 205              	
 206              	/*************************************
 207              	*   interrupt service vectors table 
 208              	**************************************/
 209              	   .section  .isr_vector,"a",%progbits
 210              	  .type  isr_vectors, %object
 211              	
 212              	isr_vectors:
 213 0000 00000000 	  .word   _mstack          /* main return stack address */
 214 0004 00000000 	  .word   reset_handler    /* startup address */
 215              	/* core interrupts || exceptions */
 216 0008 00000000 	  .word   default_handler  /*  NMI */
 217 000c 00000000 	  .word   default_handler  /*  HardFault */
 218 0010 00000000 	  .word   default_handler  /*  Memory Management */
 219 0014 00000000 	  .word   default_handler  /* Bus fault */
ARM GAS  stm32eforth-fl.s 			page 7


 220 0018 00000000 	  .word   default_handler  /* Usage fault */
 221 001c 00000000 	  .word   0
 222 0020 00000000 	  .word   0
 223 0024 00000000 	  .word   0
 224 0028 00000000 	  .word   0
 225 002c 00000000 	  .word   default_handler  /* SWI instruction */
 226 0030 00000000 	  .word   default_handler  /* Debug monitor */
 227 0034 00000000 	  .word   0
 228 0038 00000000 	  .word   default_handler  /* PendSV */
 229 003c 00000000 	  .word   systick_handler  /* Systick */
 230              	  
 231              	  /* External Interrupts */
 232 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 233 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 234 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 235 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 236 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 237 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 238 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 239 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 240 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 241 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 242 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 243 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 244 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 245 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 246 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 247 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 248 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 249 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 250 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 251 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 252 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 253 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 254 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 255 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 256 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 257 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 258 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 259 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 260 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 261 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 262 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 263 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 264 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 265 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 266 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 267 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 268 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 269 00d4 00000000 	  .word      default_handler /* IRQ37, USART1 */                   
 270 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 271 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 272 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 273 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 274 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 275 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 276 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
ARM GAS  stm32eforth-fl.s 			page 8


 277 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 278 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 279 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 280 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 281 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 282 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 283 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 284 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 285 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 286 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 287 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 288 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 289 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 290 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 291 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 292              	  .size  isr_vectors, .-isr_vectors
 293              	
 294 0130 00000000 		.p2align 8
 294      00000000 
 294      00000000 
 294      00000000 
 294      00000000 
 295              	
 296              	UZERO:
 297 0200 00000000 		.word 0  			/*Reserved */
 298 0204 55AA0000 		.word 0xaa55 /* SEED  */ 
 299 0208 00000000 		.word 0      /* MSEC */
 300 020c 00000000 	    .word 0     /* TIMER */
 301 0210 00000000 		.word 0    /* FTRACE */ 
 302 0214 494D4147 		.ascii "IMAG" /* signature */ 
 303 0218 58280000 		.word HI  /*'BOOT */
 304 021c 0A000000 		.word BASEE 	/*BASE */
 305 0220 00000000 		.word 0			/*tmp */
 306 0224 00000000 		.word 0			/*SPAN */
 307 0228 00000000 		.word 0			/*>IN */
 308 022c 00000000 		.word 0			/*#TIB */
 309 0230 804E0020 		.word TIBB	/*TIB */
 310 0234 9C1A0000 		.word INTER	/*'EVAL */
 311 0238 00000000 		.word 0			/*HLD */
 312 023c C8280000 		.word LASTN	/*CONTEXT */
 313 0240 3C290000 		.word CTOP	/* FCP end of system dictionnary */
 314 0244 00010020 		.word DTOP	/* CP end of RAM dictionary RAM */
 315 0248 C8280000 		.word LASTN	/*LAST word in dictionary */
 316 024c 00000000 		.word 0,0			/*reserved */
 316      00000000 
 317              	ULAST:
 318              	
 319              	/*****************************************************
 320              	* default isr handler called on unexpected interrupt
 321              	*****************************************************/
 322              	    .section  .text,"ax",%progbits
 323              	  .type default_handler, %function
 324              	  .p2align 2 
 325              	  .global default_handler
 326              	default_handler:
 327 0000 054F     		ldr r7,exception_msg 
 328 0002 17F8010B 		ldrb r0,[r7],#1 
ARM GAS  stm32eforth-fl.s 			page 9


 329 0006 41F8045D 	1:	_PUSH 
 330 000a 17F8015B 		ldrb r5,[r7],#1
 331 000e 00F09BFA 		bl EMIT 
 332 0012 0138     		subs r0,r0,#1 
 333 0014 F7D1     		bne 1b 	
 334 0016 0BE0     		b REBOOT   
 335              	  .size  default_handler, .-default_handler
 336              	exception_msg:
 337 0018 1C000000 		.word .+4 
 338 001c 12       		.byte 18
 339 001d 0A0D6578 		.ascii "\n\rexeption reboot!"
 339      65707469 
 339      6F6E2072 
 339      65626F6F 
 339      7421
 340 002f 00       		.p2align 2
 341              	REBOOT:
 342 0030 0348     		ldr r0,scb_adr 
 343 0032 C168     		ldr r1,[r0,#SCB_AIRCR]
 344 0034 41F00401 		orr r1,#(1<<2)
 345 0038 C0F2FA51 		movt r1,#SCB_VECTKEY
 346 003c C160     		str r1,[r0,#SCB_AIRCR]
 347 003e FEE7     		b . 
 348              		.p2align 2
 349              	scb_adr:
 350 0040 00ED00E0 		.word SCB_BASE_ADR 
 351              	
 352              	/*********************************
 353              		system milliseconds counter
 354              	*********************************/	
 355              	  .type systick_handler, %function
 356              	  .p2align 2 
 357              	  .global systick_handler
 358              	systick_handler:
 359 0044 4FF00003 	  mov r3,#UPP&0xffff
 360 0048 C2F20003 	  movt r3,#UPP>>16  	
 361 004c 9868     	  ldr r0,[r3,#TICKS_OFS]  
 362 004e 00F10100 	  add r0,#1
 363 0052 9860     	  str r0,[r3,#TICKS_OFS]
 364 0054 D868     	  ldr r0,[r3,#TIMER_OFS]
 365 0056 10B1     	  cbz r0, systick_exit
 366 0058 A0F10100 	  sub r0,#1
 367 005c D860     	  str r0,[r3,#TIMER_OFS]
 368              	systick_exit:
 369 005e 7047     	  bx lr
 370              	
 371              	
 372              	/**************************************
 373              	  reset_handler execute at MCU reset
 374              	***************************************/
 375              	//    .section  .text.reset_handler
 376              	  .type  reset_handler, %function
 377              	  .p2align 2 
 378              	  .global reset_handler
 379              	reset_handler:
 380 0060 00F074F8 		bl	remap 
 381 0064 00F00AF8 		bl	init_devices	 	/* RCC, GPIOs, USART */
ARM GAS  stm32eforth-fl.s 			page 10


 382 0068 01F0CCFD 		bl	unlock			/* unlock flash memory */
 383 006c DFF80880 		ldr r8,nest_adr 
 384 0070 48F00108 		orr r8,r8,#1  
 385 0074 02F02CFC 		bl	COLD
 386              	nest_adr: 
 387 0078 0C040000 		.word NEST 
 388              	
 389              	  .type init_devices, %function
 390              	  .p2align 2 
 391              	init_devices:
 392              	/* init clock to HSE 72 Mhz */
 393              	/* set 2 wait states in FLASH_ACR_LATENCY */
 394 007c 4FF40050 		mov r0,#FLASH_BASE_ADR&0xffff
 395 0080 C4F20200 		movt r0,#FLASH_BASE_ADR>>16 
 396 0084 4FF01202 	  mov r2,#0x12
 397 0088 0260     	  str r2,[r0,#FLASH_ACR]
 398              	/* configure clock for HSE, 8 Mhz crystal */
 399              	/* enable HSE in RCC_CR */
 400 008a 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 401 008e C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 402 0092 0168     	  ldr r1,[r0,#RCC_CR]
 403 0094 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 404 0098 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 405              	/* wait HSERDY loop */
 406              	wait_hserdy:
 407 009a 0168     	  ldr r1,[r0,#RCC_CR]
 408 009c 11F4003F 	  tst r1,#(1<<17)
 409 00a0 FBD0     	  beq wait_hserdy
 410              	
 411              	/************************************************* 
 412              	   configure PLL mul factor and source 
 413              	   SYSCLOCK=72 Mhz
 414              	   select HSE as  PLL source clock
 415              	   multiply frequency by 9 
 416              	   APB1 clock is limited to 36 Mhz so divide by 2 
 417              	****************************************************/
 418 00a2 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 419 00a6 C0F21D01 	  movt r1,#(7<<2)|1
 420 00aa 4160     	  str r1,[r0,#RCC_CFGR]
 421              	  /* enable PLL */
 422 00ac 0168     	  ldr r1,[r0,#RCC_CR]
 423 00ae 41F08071 	  orr r1, #1<<24 
 424 00b2 0160     	  str r1,[r0,#RCC_CR]
 425              	/* wait for PLLRDY */
 426              	wait_pllrdy:
 427 00b4 0168     	  ldr r1,[r0,#RCC_CR]
 428 00b6 11F0007F 	  tst r1,#(1<<25)
 429 00ba FBD0     	  beq wait_pllrdy 
 430              	/* select PLL as sysclock */
 431 00bc 4168     	  ldr r1,[r0,#RCC_CFGR]
 432 00be 4FF6FC72 	  mov r2,#0xfffc
 433 00c2 CFF6FF72 	  movt r2,#0xffff
 434 00c6 01EA0201 	  and r1,r1,r2 
 435 00ca 4FF00202 	  mov r2,#2
 436 00ce 41EA0201 	  orr r1,r1,r2
 437 00d2 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 438              	/* wait for SWS==2 */
ARM GAS  stm32eforth-fl.s 			page 11


 439              	wait_sws:
 440 00d4 4168     	  ldr r1,[r0,#RCC_CFGR]
 441 00d6 11F0080F 	  tst r1,#(2<<2)
 442 00da FBD0     	  beq wait_sws
 443              	/* now sysclock is 72 Mhz */
 444              	
 445              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 446 00dc 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 447 00e0 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 448 00e4 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 449 00e8 8161     	  str	r1, [r0, #RCC_APB2ENR]
 450              	
 451              	/* configure GPIOC:13 as output for user LED */
 452 00ea 4FF48050 	  mov r0,#GPIOC_BASE_ADR&0xffff
 453 00ee C4F20100 	  movt r0,#GPIOC_BASE_ADR>>16
 454 00f2 4168     	  ldr r1,[r0,#GPIO_CRH]
 455 00f4 6FF47002 	  mvn r2,#(15<<20)
 456 00f8 01EA0201 	  and r1,r1,r2
 457 00fc 4FF4C002 	  mov r2,#(6<<20)
 458 0100 41EA0201 	  orr r1,r1,r2
 459 0104 4160     	  str r1,[r0,#GPIO_CRH]
 460              	
 461              	/* configure USART1 */
 462              	/* set GPIOA PIN 9, uart TX  */
 463 0106 4FF40060 	  mov r0,#GPIOA_BASE_ADR&0XFFFF
 464 010a C4F20100 	  movt r0,#GPIOA_BASE_ADR>>16	
 465 010e 4168     	  ldr r1,[r0,#GPIO_CRH]
 466 0110 6FF0F002 	  mvn r2,#(15<<4)
 467 0114 01EA0201 	  and r1,r1,r2
 468 0118 4FF0A002 	  mov r2,#(0xA<<4)
 469 011c 41EA0201 	  orr r1,r1,r2 
 470 0120 4160     	  str r1,[r0,#GPIO_CRH]
 471              	
 472 0122 4FF46050 	  mov r0,#UART&0xFFFF
 473 0126 C4F20100 	  movt r0,#UART>>16	
 474              	/* BAUD rate */
 475 012a 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 476 012e 8160     	  str r1,[r0,#USART_BRR]
 477 0130 42F20C01 	  mov r1,#(3<<2)+(1<<13)
 478 0134 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 479              	/* configure systicks for 1msec ticks */
 480 0136 4EF21000 	  mov r0,#STK_BASE_ADR&0xFFFF
 481 013a CEF20000 	  movt r0,#STK_BASE_ADR>>16	
 482 013e 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 483 0142 4160     	  str r1,[r0,#STK_LOAD]
 484 0144 4FF00301 	  mov r1,#3
 485 0148 0160     	  str r1,[r0,STK_CTL]
 486 014a 7047     	  bx lr  
 487              	
 488              	/* copy system to RAM */ 
 489              	//	.type remap, %function 
 490              	remap:
 491 014c 0B48     		ldr r0,remap_dest  
 492 014e 0A49     		ldr r1,remap_src 
 493 0150 4FF05402 		mov r2,#ULAST-UZERO 
 494 0154 51F8043B 	1:	ldr r3,[r1],#4 
 495 0158 40F8043B 		str r3,[r0],#4 
ARM GAS  stm32eforth-fl.s 			page 12


 496 015c 043A     		subs R2,#4 
 497 015e F9D1     		bne 1b
 498              	// zero end of RAM 
 499 0160 4FF4A042 		mov r2,#0x5000
 500 0164 C2F20002 		movt r2,#0x2000
 501 0168 83EA0303 		eor r3,r3,r3 
 502 016c 40F8043B 	2:  str r3,[r0],#4
 503 0170 9042     		cmp r0,r2 
 504 0172 FBDB     		blt 2b 
 505 0174 7047     		bx lr  
 506 0176 00BF     		.p2align 2
 507              	remap_src:
 508 0178 00020000 		.word UZERO 
 509              	remap_dest:
 510 017c 00000020 		.word RAM_ADR  
 511              	
 512              	/********************
 513              	* Version control
 514              	*******************/
 515              	.equ VER ,	0x01	/*major release version */
 516              	.equ EXT ,	0x00	/*minor extension */
 517              	
 518              	/* Constants */
 519              	
 520              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 521              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 522              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 523              	
 524              	.equ CELLL ,	4	/*size of a cell */
 525              	.equ BASEE ,	10	/*default radix */
 526              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 527              	
 528              	.equ BKSPP ,	8	/*backspace */
 529              	.equ LF ,	10	  /*line feed */
 530              	.equ CRR ,	13	/*carriage return */
 531              	.equ ERR ,	27	/*error escape */
 532              	.equ TIC ,	39	/*tick */
 533              	
 534              	/********************************************************
 535              	* RAM memory mapping
 536              	* 	0x20000000	RAM base address
 537              	*	0x20000000  system variables	
 538              	* 	0x20000100	Forth dictionary
 539              	* 	0x2000????	top of dictionary, HERE
 540              	* 	0x2000????	WORD buffer, HERE+16
 541              	*   0x20004E00  end of user space
 542              	* 	0x20004E80	top of data stack  R2
 543              	* 	0x20004E80	TIB terminal input buffer
 544              	* 	0x20004F80	top of return stack  R1
 545              	* 	0x20005000	top of hardware stack for interrupts R14
 546              	********************************************************/
 547              	
 548              	
 549              	/******************************************************
 550              	*  COLD start moves the following to USER variables.
 551              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 552              	******************************************************/
ARM GAS  stm32eforth-fl.s 			page 13


 553 0180 00000000 		.p2align 10
 553      00000000 
 553      00000000 
 553      00000000 
 553      00000000 
 554              	
 555              	
 556              	 
 557              	
 558              	/***********************************
 559              	//  Start of eForth system 
 560              	***********************************/
 561              	
 562              		.p2align 2 
 563              	
 564              	// PUSH R5, to be used in colon definition 
 565              	TPUSH:
 566 0400 41F8045D 		_PUSH
 567 0404 06E0     		_NEXT
 568              	
 569              	// POP R5, to be used in colon defintion  
 570              	TPOP:
 571 0406 51F8045B 		_POP 
 572 040a 03E0     		_NEXT
 573              	
 574              	
 575              	// hi level word enter 
 576              	NEST: 
 577 040c 42F8040D 		STMFD	R2!,{R0}
 578 0410 04F10300 		ADD R0,R4,#3
 579              	// inner interprer
 580              	INEXT: 
 581              	/*
 582              		ADD R6,R3,#FTRACE_OFS
 583              		LDR R6,[R6]
 584              		CBZ r6, 1f
 585              		_PUSH 
 586              		LDR R5,[R0]
 587              		SUB R5,#1
 588              		B DBG_PRT
 589              	*/
 590 0414 50F8044B 	1:	LDR R4,[R0],#4 
 591 0418 A047     		BLX R4 
 592              	UNNEST:
 593 041a 01CA     		LDMFD R2!,{R0}
 594 041c FAE7     		B INEXT 
 595              	
 596 041e 00BF     		.p2align 2 
 597              	
 598              	// compile "BX 	R8" 
 599              	// this is the only way 
 600              	// a colon defintion in RAM 
 601              	// can jump to NEST
 602              	// R8 is initialized to NEST address 
 603              	// and must be preserved   
 604              	COMPI_NEST:
 605 0420 03F14406 		add r6,r3,#RAM_CTOP_OFS 
ARM GAS  stm32eforth-fl.s 			page 14


 606 0424 3668     		ldr r6,[r6]
 607 0426 44F24077 		mov r7,#0x4700+(8<<3)
 608 042a 26F8027B 		strh r7,[r6],#2
 609 042e 4FF43F47 		mov r7,#0xbf00 // NOP.N   
 610 0432 26F8027B 		strh r7,[r6],#2 
 611 0436 03F14407 		add r7,r3,#RAM_CTOP_OFS 
 612 043a 3E60     		str r6,[r7]
 613 043c EAE7     		_NEXT  
 614              	
 615              	// RANDOM ( n1 -- {0..n1-1} )
 616              	// return pseudo random number 
 617              	// REF: https://en.wikipedia.org/wiki/Xorshift
 618              	
 619 043e 00000000 		.word 0
 620 0442 06       	_RAND: .byte 6
 621 0443 52414E44 		.ascii "RANDOM"
 621      4F4D
 622 0449 0000BF   		.p2align 2 
 623              	RAND:
 624 044c 404700BF 		_NEST 
 625 0450 350A0000 		_ADR SEED 
 626 0454 E9050000 		_ADR AT 
 627 0458 91060000 		_ADR DUPP 
 628 045c 6D050000 		_DOLIT 13
 628      0D000000 
 629 0464 45070000 		_ADR LSHIFT 
 630 0468 FD060000 		_ADR XORR  
 631 046c 91060000 		_ADR DUPP 
 632 0470 6D050000 		_DOLIT 17 
 632      11000000 
 633 0478 2D070000 		_ADR RSHIFT 
 634 047c FD060000 		_ADR XORR 
 635 0480 91060000 		_ADR DUPP
 636 0484 6D050000 		_DOLIT 5 
 636      05000000 
 637 048c 45070000 		_ADR LSHIFT 
 638 0490 FD060000 		_ADR XORR  
 639 0494 91060000 		_ADR DUPP 
 640 0498 350A0000 		_ADR SEED 
 641 049c D5050000 		_ADR STORE 
 642 04a0 F5080000 		_ADR ABSS
 643 04a4 A1060000 		_ADR SWAP 
 644 04a8 E50C0000 		_ADR MODD 
 645 04ac 1B040000 		_UNNEST 
 646              	
 647              	
 648              	// PAUSE ( u -- ) 
 649              	// suspend execution for u milliseconds
 650 04b0 42040000 		.word _RAND
 651 04b4 05       	_PAUSE: .byte 5
 652 04b5 50415553 		.ascii "PAUSE"
 652      45
 653 04ba 00BF     		.p2align 2
 654              	PAUSE:
 655 04bc 404700BF 		_NEST 
 656 04c0 5D0A0000 		_ADR TIMER 
 657 04c4 D5050000 		_ADR STORE 
ARM GAS  stm32eforth-fl.s 			page 15


 658              	PAUSE_LOOP:
 659 04c8 5D0A0000 		_ADR TIMER 
 660 04cc E9050000 		_ADR AT 
 661 04d0 A9050000 		_QBRAN PAUSE_EXIT 
 661      E0040000 
 662 04d8 BB050000 		_BRAN PAUSE_LOOP 
 662      C8040000 
 663              	PAUSE_EXIT: 		
 664 04e0 1B040000 		_UNNEST 
 665              	
 666              	//  ULED ( T|F -- )
 667              	// control user LED, -1 ON, 0 OFF  
 668 04e4 B4040000 		.word _PAUSE
 669 04e8 04       	_ULED: .byte 4
 670 04e9 554C4544 		.ascii "ULED"
 671 04ed 0000BF   		.p2align 2
 672              		.type ULED, %function 
 673              	ULED:
 674 04f0 4FF40056 		mov r6,#(1<<LED_PIN)
 675 04f4 4FF48054 		mov r4,#LED_GPIO&0xffff
 676 04f8 C4F20104 		movt r4,#LED_GPIO>>16
 677 04fc 2D00     		movs r5,r5 
 678 04fe 51F8045B 		_POP
 679 0502 01D0     		beq ULED_OFF 
 680 0504 6661     		str r6,[r4,#GPIO_BRR]
 681 0506 85E7     		_NEXT 
 682              	ULED_OFF:
 683 0508 2661     		str r6,[r4,#GPIO_BSRR]
 684 050a 83E7     		_NEXT    
 685              	
 686              	//    ?RX	 ( -- c T | F )
 687              	// 	Return input character and true, or a false if no input.
 688 050c E8040000 		.word	_ULED
 689 0510 04       	_QRX:	.byte   4
 690 0511 3F4B4559 		.ascii "?KEY"
 691 0515 0000BF   		.p2align 2 
 692              	QKEY:
 693              	QRX: 
 694 0518 41F8045D 		_PUSH
 695 051c 4FF46054 		mov r4,#UART&0xFFFF
 696 0520 C4F20104 		movt r4,#UART>>16
 697 0524 2688     		ldrh	r6, [r4, #USART_SR]
 698 0526 16F02006 		ands	r6, #0x20		//  RXE
 699 052a 05D0     		BEQ	QRX1
 700 052c 6568     	 	LDR	R5, [R4, #USART_DR]
 701 052e 41F8045D 		_PUSH
 702 0532 18BF     	    IT NE 
 703 0534 6FF00005 		MVNNE	R5,#0
 704              	QRX1:
 705 0538 08BF     		IT EQ 
 706 053a 0025     	    MOVEQ	R5,#0
 707 053c 6AE7     		_NEXT 
 708              	
 709              	//    TX!	 ( c -- )
 710              	// 	Send character c to the output device.
 711              	
 712 053e 10050000 		.word	_QRX
ARM GAS  stm32eforth-fl.s 			page 16


 713 0542 04       	_TXSTO:	.byte 4
 714 0543 454D4954 		.ascii "EMIT"
 715 0547 00       		.p2align 2 	
 716              	TXSTO:
 717              	EMIT:
 718              	TECHO:
 719 0548 4FF46054 		mov r4,#UART&0xFFFF
 720 054c C4F20104 		movt r4,#UART>>16
 721              	TX1:
 722 0550 2688     		ldrh	r6, [r4, #USART_SR]	
 723 0552 16F08006 		ands	r6, #0x80		//  TXE bit 
 724 0556 FBD0     		beq	TX1
 725 0558 A580     		strh	r5, [r4, #USART_DR]	
 726 055a 51F8045B 		_POP
 727 055e 59E7     		_NEXT 
 728              		
 729              	/***************
 730              	//  The kernel
 731              	***************/
 732              	
 733              	//    NOP	( -- )
 734              	// 	do nothing.
 735              	
 736 0560 42050000 		.word	_TXSTO
 737 0564 03       	_NOP:	.byte   3
 738 0565 4E4F50   		.ascii "NOP"
 739              		.p2align 2 	
 740              	NOP:
 741 0568 54E7     		_NEXT 
 742              	 
 743              	
 744              	//    doLIT	( -- w )
 745              	// 	Push an inline literal.
 746              	
 747              	// 	.word	_NOP
 748              	// _LIT	.byte   COMPO+5
 749              	// 	.ascii "doLIT"
 750 056a 00BF     	 	.p2align 2 	
 751              	DOLIT:
 752 056c 41F8045D 		_PUSH				//  store R5 on data stack
 753 0570 50F8045B 		LDR	R5,[R0],#4		//  get literal at word boundary
 754 0574 4EE7     		_NEXT 
 755              	
 756              	//    EXECUTE	( ca -- )
 757              	// 	Execute the word at ca.
 758              	
 759 0576 64050000 		.word	_NOP
 760 057a 07       	_EXECU:	.byte   7
 761 057b 45584543 		.ascii "EXECUTE"
 761      555445
 762 0582 00BF     		.p2align 2 	
 763              	EXECU: 
 764 0584 45F00104 		ORR	R4,R5,#1 
 765 0588 51F8045B 		_POP
 766 058c 2047     		BX R4 
 767 058e 41E7     		_NEXT 
 768              	
ARM GAS  stm32eforth-fl.s 			page 17


 769              	//    next	( -- ) counter on R:
 770              	// 	Run time code for the single index loop.
 771              	// 	: next ( -- ) \ hilevel model
 772              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 773              	
 774              	// 	.word	_EXECU
 775              	// _DONXT	.byte   COMPO+4
 776              	// 	.ascii "next"
 777              	// 	.p2align 2 	
 778              	DONXT:
 779 0590 1668     		LDR	R6,[R2]   // ( -- u )  
 780 0592 26B9     		CBNZ R6,NEXT1 
 781              		/* loop done */
 782 0594 02F10402 		ADD	R2,R2,#4 // drop counter 
 783 0598 00F10400 		ADD	R0,R0,#4 // skip after loop address 
 784 059c 3AE7     		_NEXT
 785              	NEXT1:
 786              		/* decrement loop counter */
 787 059e A6F10106 		SUB	R6,R6,#1
 788 05a2 1660     		STR	R6,[R2]
 789 05a4 0068     		LDR	R0,[R0]	// go begining of loop 
 790 05a6 35E7     		_NEXT 
 791              	
 792              	//    ?branch	( f -- )
 793              	// 	Branch if flag is zero.
 794              	
 795              	// 	.word	_DONXT
 796              	// _QBRAN	.byte   COMPO+7
 797              	// 	.ascii "?branch"
 798              	// 	.p2align 2 	
 799              	QBRAN:
 800 05a8 2D00     		MOVS	R5,R5
 801 05aa 51F8045B 		_POP
 802 05ae 01D1     		BNE	QBRAN1
 803 05b0 0068     		LDR	R0,[R0]
 804 05b2 2FE7     		_NEXT
 805              	QBRAN1:
 806 05b4 00F10400 	 	ADD	R0,R0,#4
 807 05b8 2CE7     		_NEXT
 808              	
 809              	//    branch	( -- )
 810              	// 	Branch to an inline address.
 811              	
 812              	// 	.word	_QBRAN
 813              	// _BRAN	.byte   COMPO+6
 814              	// 	.ascii "branch"
 815              	// 	.p2align 2 	
 816              	BRAN:
 817 05ba 0068     		LDR	R0,[R0]
 818 05bc 2AE7     		_NEXT
 819              	
 820              	//    EXIT	(  -- )
 821              	// 	Exit the currently executing command.
 822              	
 823 05be 7A050000 		.word	_EXECU
 824 05c2 04       	_EXIT:	.byte   4
 825 05c3 45584954 		.ascii "EXIT"
ARM GAS  stm32eforth-fl.s 			page 18


 826 05c7 00       		.p2align 2 	
 827              	EXIT:
 828 05c8 1B040000 		_UNNEST
 829              	
 830              	//    !	   ( w a -- )
 831              	// 	Pop the data stack to memory.
 832              	
 833 05cc C2050000 		.word	_EXIT
 834 05d0 01       	_STORE:	.byte   1
 835 05d1 21       		.ascii "!"
 836 05d2 00BF     		.p2align 2 	
 837              	STORE:
 838 05d4 51F8044B 		LDR	R4,[R1],#4
 839 05d8 2C60     		STR	R4,[R5]
 840 05da 51F8045B 		_POP
 841 05de 19E7     		_NEXT 
 842              	
 843              	//    @	   ( a -- w )
 844              	// 	Push memory location to the data stack.
 845              	
 846 05e0 D0050000 		.word	_STORE
 847 05e4 01       	_AT:	.byte   1
 848 05e5 40       		.ascii "@"
 849 05e6 00BF     		.p2align 2 	
 850              	AT:
 851 05e8 2D68     		LDR	R5,[R5]
 852 05ea 13E7     		_NEXT 
 853              	
 854              	//    C!	  ( c b -- )
 855              	// 	Pop the data stack to byte memory.
 856              	
 857 05ec E4050000 		.word	_AT
 858 05f0 02       	_CSTOR:	.byte   2
 859 05f1 4321     		.ascii "C!"
 860 05f3 00       		.p2align 2 	
 861              	CSTOR:
 862 05f4 51F8044B 		LDR	R4,[R1],#4
 863 05f8 2C70     		STRB R4,[R5]
 864 05fa 51F8045B 		_POP
 865 05fe 09E7     		_NEXT
 866              	
 867              	//    C@	  ( b -- c )
 868              	// 	Push byte memory location to the data stack.
 869              	
 870 0600 F0050000 		.word	_CSTOR
 871 0604 02       	_CAT:	.byte   2
 872 0605 4340     		.ascii "C@"
 873 0607 00       		.p2align 2 	
 874              	CAT:
 875 0608 2D78     		LDRB	R5,[R5]
 876 060a 03E7     		_NEXT 
 877              	
 878              	//    R>	  ( -- w )
 879              	// 	Pop the return stack to the data stack.
 880              	
 881 060c 04060000 		.word	_CAT
 882 0610 02       	_RFROM:	.byte   2
ARM GAS  stm32eforth-fl.s 			page 19


 883 0611 523E     		.ascii "R>"
 884 0613 00       		.p2align 2 	
 885              	RFROM:
 886 0614 41F8045D 		_PUSH
 887 0618 52F8045B 		LDR	R5,[R2],#4
 888 061c FAE6     		_NEXT 
 889              	
 890              	//    R@	  ( -- w )
 891              	// 	Copy top of return stack to the data stack.
 892              	
 893 061e 10060000 		.word	_RFROM
 894 0622 02       	_RAT:	.byte   2
 895 0623 5240     		.ascii "R@"
 896 0625 0000BF   		.p2align 2 	
 897              	RAT:
 898 0628 41F8045D 		_PUSH
 899 062c 1568     		LDR	R5,[R2]
 900 062e F1E6     		_NEXT 
 901              	
 902              	//    >R	  ( w -- )
 903              	// 	Push the data stack to the return stack.
 904              	
 905 0630 22060000 		.word	_RAT
 906 0634 42       	_TOR:	.byte   COMPO+2
 907 0635 3E52     		.ascii ">R"
 908 0637 00       		.p2align 2 	
 909              	TOR:
 910 0638 42F8045D 		STR	R5,[R2,#-4]!
 911 063c 51F8045B 		_POP
 912 0640 E8E6     		_NEXT
 913              	
 914              	//	RP! ( u -- )
 915              	// initialize RPP with u 
 916 0642 34060000 		.word _TOR 
 917 0646 03       	_RPSTOR: .byte 3 
 918 0647 525021   		.ascii "RP!" 
 919 064a 00BF     		.p2align 2 
 920              	RPSTOR:
 921 064c 2A46     		MOV R2,R5 
 922 064e 51F8045B 		_POP  
 923 0652 DFE6     		_NEXT 
 924              	
 925              	
 926              	//	SP! ( u -- )
 927              	// initialize SPP with u 
 928 0654 46060000 		.word _RPSTOR  
 929 0658 03       	_SPSTOR: .byte 3 
 930 0659 535021   		.ascii "SP!" 
 931              		.p2align 2 
 932              	SPSTOR:
 933 065c 2946     		MOV R1,R5 
 934 065e 85EA0505 		EOR R5,R5,R5 
 935 0662 D7E6     		_NEXT 
 936              	
 937              	//    SP@	 ( -- a )
 938              	// 	Push the current data stack pointer.
 939              	
ARM GAS  stm32eforth-fl.s 			page 20


 940 0664 58060000 		.word	_SPSTOR
 941 0668 03       	_SPAT:	.byte   3
 942 0669 535040   		.ascii "SP@"
 943              		.p2align 2 	
 944              	SPAT:
 945 066c 41F8045D 		_PUSH
 946 0670 0D46     		MOV	R5,R1
 947 0672 CFE6     		_NEXT
 948              	
 949              	//    DROP	( w -- )
 950              	// 	Discard top stack item.
 951              	
 952 0674 68060000 		.word	_SPAT
 953 0678 04       	_DROP:	.byte   4
 954 0679 44524F50 		.ascii "DROP"
 955 067d 0000BF   		.p2align 2 	
 956              	DROP:
 957 0680 51F8045B 		_POP
 958 0684 C6E6     		_NEXT 
 959              	
 960              	//    DUP	 ( w -- w w )
 961              	// 	Duplicate the top stack item.
 962              	
 963 0686 78060000 		.word	_DROP
 964 068a 03       	_DUPP:	.byte   3
 965 068b 445550   		.ascii "DUP"
 966 068e 00BF     		.p2align 2 	
 967              	DUPP:
 968 0690 41F8045D 		_PUSH
 969 0694 BEE6     		_NEXT 
 970              	
 971              	//    SWAP	( w1 w2 -- w2 w1 )
 972              	// 	Exchange top two stack items.
 973              	
 974 0696 8A060000 		.word	_DUPP
 975 069a 04       	_SWAP:	.byte   4
 976 069b 53574150 		.ascii "SWAP"
 977 069f 00       		.p2align 2 	
 978              	SWAP:
 979 06a0 0C68     		LDR	R4,[R1]
 980 06a2 0D60     		STR	R5,[R1]
 981 06a4 2546     		MOV	R5,R4
 982 06a6 B5E6     		_NEXT 
 983              	
 984              	//    OVER	( w1 w2 -- w1 w2 w1 )
 985              	// 	Copy second stack item to top.
 986              	
 987 06a8 9A060000 		.word	_SWAP
 988 06ac 04       	_OVER:	.byte   4
 989 06ad 4F564552 		.ascii "OVER"
 990 06b1 0000BF   		.p2align 2 	
 991              	OVER:
 992 06b4 41F8045D 		_PUSH
 993 06b8 4D68     		LDR	R5,[R1,#4]
 994 06ba ABE6     		_NEXT 
 995              	
 996              	//    0<	  ( n -- t )
ARM GAS  stm32eforth-fl.s 			page 21


 997              	// 	Return true if n is negative.
 998              	
 999 06bc AC060000 		.word	_OVER
 1000 06c0 02       	_ZLESS:	.byte   2
 1001 06c1 303C     		.ascii "0<"
 1002 06c3 00       		.p2align 2 	
 1003              	ZLESS:
 1004              	//	MOV	R4,#0
 1005              	//	ADD	R5,R4,R5,ASR #32
 1006 06c4 4FEAE575 		ASR R5,#31
 1007 06c8 A4E6     		_NEXT 
 1008              	
 1009              	//    AND	 ( w w -- w )
 1010              	// 	Bitwise AND.
 1011              	
 1012 06ca C0060000 		.word	_ZLESS
 1013 06ce 03       	_ANDD:	.byte   3
 1014 06cf 414E44   		.ascii "AND"
 1015 06d2 00BF     		.p2align 2 	
 1016              	ANDD:
 1017 06d4 51F8044B 		LDR	R4,[R1],#4
 1018 06d8 05EA0405 		AND	R5,R5,R4
 1019 06dc 9AE6     		_NEXT 
 1020              	
 1021              	//    OR	  ( w w -- w )
 1022              	// 	Bitwise inclusive OR.
 1023              	
 1024 06de CE060000 		.word	_ANDD
 1025 06e2 02       	_ORR:	.byte   2
 1026 06e3 4F52     		.ascii "OR"
 1027 06e5 0000BF   		.p2align 2 	
 1028              	ORR:
 1029 06e8 51F8044B 		LDR	R4,[R1],#4
 1030 06ec 45EA0405 		ORR	R5,R5,R4
 1031 06f0 90E6     		_NEXT 
 1032              	
 1033              	//    XOR	 ( w w -- w )
 1034              	// 	Bitwise exclusive OR.
 1035              	
 1036 06f2 E2060000 		.word	_ORR
 1037 06f6 03       	_XORR:	.byte   3
 1038 06f7 584F52   		.ascii "XOR"
 1039 06fa 00BF     		.p2align 2 	
 1040              	XORR:
 1041 06fc 51F8044B 		LDR	R4,[R1],#4
 1042 0700 85EA0405 		EOR	R5,R5,R4
 1043 0704 86E6     		_NEXT 
 1044              	
 1045              	//    UM+	 ( w w -- w cy )
 1046              	// 	Add two numbers, return the sum and carry flag.
 1047              	
 1048 0706 F6060000 		.word	_XORR
 1049 070a 03       	_UPLUS:	.byte   3
 1050 070b 554D2B   		.ascii "UM+"
 1051 070e 00BF     		.p2align 2 	
 1052              	UPLUS:
 1053 0710 0C68     		LDR	R4,[R1]
ARM GAS  stm32eforth-fl.s 			page 22


 1054 0712 6419     		ADDS	R4,R4,R5
 1055 0714 4FF00005 		MOV	R5,#0
 1056 0718 45F10005 		ADC	R5,R5,#0
 1057 071c 0C60     		STR	R4,[R1]
 1058 071e 79E6     		_NEXT 
 1059              	
 1060              	//    RSHIFT	 ( w # -- w )
 1061              	// 	arithmetic Right shift # bits.
 1062              	
 1063 0720 0A070000 		.word	_UPLUS
 1064 0724 06       	_RSHIFT:	.byte   6
 1065 0725 52534849 		.ascii "RSHIFT"
 1065      4654
 1066 072b 00       		.p2align 2 	
 1067              	RSHIFT:
 1068 072c 51F8044B 		LDR	R4,[R1],#4
 1069 0730 44FA05F5 		MOV	R5,R4,ASR R5
 1070 0734 6EE6     		_NEXT 
 1071              	
 1072              	//    LSHIFT	 ( w # -- w )
 1073              	// 	Right shift # bits.
 1074              	
 1075 0736 24070000 		.word	_RSHIFT
 1076 073a 06       	_LSHIFT:	.byte   6
 1077 073b 4C534849 		.ascii "LSHIFT"
 1077      4654
 1078 0741 0000BF   		.p2align 2 	
 1079              	LSHIFT:
 1080 0744 51F8044B 		LDR	R4,[R1],#4
 1081 0748 04FA05F5 		MOV	R5,R4,LSL R5
 1082 074c 62E6     		_NEXT
 1083              	
 1084              	//    +	 ( w w -- w )
 1085              	// 	Add.
 1086              	
 1087 074e 3A070000 		.word	_LSHIFT
 1088 0752 01       	_PLUS:	.byte   1
 1089 0753 2B       		.ascii "+"
 1090              		.p2align 2 	
 1091              	PLUS:
 1092 0754 51F8044B 		LDR	R4,[R1],#4
 1093 0758 2544     		ADD	R5,R5,R4
 1094 075a 5BE6     		_NEXT 
 1095              	
 1096              	//    -	 ( w w -- w )
 1097              	// 	Subtract.
 1098              	
 1099 075c 52070000 		.word	_PLUS
 1100 0760 01       	_SUBB:	.byte   1
 1101 0761 2D       		.ascii "-"
 1102 0762 00BF     		.p2align 2 	
 1103              	SUBB:
 1104 0764 51F8044B 		LDR	R4,[R1],#4
 1105 0768 C5EB0405 		RSB	R5,R5,R4
 1106 076c 52E6     		_NEXT 
 1107              	
 1108              	//    *	 ( w w -- w )
ARM GAS  stm32eforth-fl.s 			page 23


 1109              	// 	Multiply.
 1110              	
 1111 076e 60070000 		.word	_SUBB
 1112 0772 01       	_STAR:	.byte   1
 1113 0773 2A       		.ascii "*"
 1114              		.p2align 2 	
 1115              	STAR:
 1116 0774 51F8044B 		LDR	R4,[R1],#4
 1117 0778 04FB05F5 		MUL	R5,R4,R5
 1118 077c 4AE6     		_NEXT 
 1119              	
 1120              	//    UM*	 ( w w -- ud )
 1121              	// 	Unsigned multiply.
 1122              	
 1123 077e 72070000 		.word	_STAR
 1124 0782 03       	_UMSTA:	.byte   3
 1125 0783 554D2A   		.ascii "UM*"
 1126 0786 00BF     		.p2align 2 	
 1127              	UMSTA:
 1128 0788 0C68     		LDR	R4,[R1]
 1129 078a A5FB0467 		UMULL	R6,R7,R5,R4
 1130 078e 0E60     		STR	R6,[R1]
 1131 0790 3D46     		MOV	R5,R7
 1132 0792 3FE6     		_NEXT 
 1133              	
 1134              	//    M*	 ( w w -- d )
 1135              	// 	signed multiply.
 1136              	
 1137 0794 82070000 		.word	_UMSTA
 1138 0798 02       	_MSTAR:	.byte   2
 1139 0799 4D2A     		.ascii "M*"
 1140 079b 00       		.p2align 2 	
 1141              	MSTAR:
 1142 079c 0C68     		LDR	R4,[R1]
 1143 079e 85FB0467 		SMULL	R6,R7,R5,R4
 1144 07a2 0E60     		STR	R6,[R1]
 1145 07a4 3D46     		MOV	R5,R7
 1146 07a6 35E6     		_NEXT 
 1147              	
 1148              	//    1+	 ( w -- w+1 )
 1149              	// 	Add 1.
 1150              	
 1151 07a8 98070000 		.word	_MSTAR
 1152 07ac 02       	_ONEP:	.byte   2
 1153 07ad 312B     		.ascii "1+"
 1154 07af 00       		.p2align 2 	
 1155              	ONEP:
 1156 07b0 05F10105 		ADD	R5,R5,#1
 1157 07b4 2EE6     		_NEXT 
 1158              	
 1159              	//    1-	 ( w -- w-1 )
 1160              	// 	Subtract 1.
 1161              	
 1162 07b6 AC070000 		.word	_ONEP
 1163 07ba 02       	_ONEM:	.byte   2
 1164 07bb 312D     		.ascii "1-"
 1165 07bd 0000BF   		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 24


 1166              	ONEM:
 1167 07c0 A5F10105 		SUB	R5,R5,#1
 1168 07c4 26E6     		_NEXT 
 1169              	
 1170              	//    2+	 ( w -- w+2 )
 1171              	// 	Add 1.
 1172              	
 1173 07c6 BA070000 		.word	_ONEM
 1174 07ca 02       	_TWOP:	.byte   2
 1175 07cb 322B     		.ascii "2+"
 1176 07cd 0000BF   		.p2align 2 	
 1177              	TWOP:
 1178 07d0 05F10205 		ADD	R5,R5,#2
 1179 07d4 1EE6     		_NEXT
 1180              	
 1181              	//    2-	 ( w -- w-2 )
 1182              	// 	Subtract 2.
 1183              	
 1184 07d6 CA070000 		.word	_TWOP
 1185 07da 02       	_TWOM:	.byte   2
 1186 07db 322D     		.ascii "2-"
 1187 07dd 0000BF   		.p2align 2 	
 1188              	TWOM:
 1189 07e0 A5F10205 		SUB	R5,R5,#2
 1190 07e4 16E6     		_NEXT
 1191              	
 1192              	//    CELL+	( w -- w+4 )
 1193              	// 	Add CELLL.
 1194              	
 1195 07e6 DA070000 		.word	_TWOM
 1196 07ea 05       	_CELLP:	.byte   5
 1197 07eb 43454C4C 		.ascii "CELL+"
 1197      2B
 1198              		.p2align 2 	
 1199              	CELLP:
 1200 07f0 05F10405 		ADD	R5,R5,#CELLL
 1201 07f4 0EE6     		_NEXT
 1202              	
 1203              	//    CELL-	( w -- w-4 )
 1204              	// 	Subtract CELLL.
 1205              	
 1206 07f6 EA070000 		.word	_CELLP
 1207 07fa 05       	_CELLM:	.byte   5
 1208 07fb 43454C4C 		.ascii "CELL-"
 1208      2D
 1209              		.p2align 2 	
 1210              	CELLM:
 1211 0800 A5F10405 		SUB	R5,R5,#CELLL
 1212 0804 06E6     		_NEXT
 1213              	 
 1214              	//    BL	( -- 32 )
 1215              	// 	Blank (ASCII space).
 1216              	
 1217 0806 FA070000 		.word	_CELLM
 1218 080a 02       	_BLANK:	.byte   2
 1219 080b 424C     		.ascii "BL"
 1220 080d 0000BF   		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 25


 1221              	BLANK:
 1222 0810 41F8045D 		_PUSH
 1223 0814 4FF02005 		MOV	R5,#32
 1224 0818 FCE5     		_NEXT 
 1225              	
 1226              	//    CELLS	( w -- w*4 )
 1227              	// 	Multiply 4.
 1228              	
 1229 081a 0A080000 		.word	_BLANK
 1230 081e 05       	_CELLS:	.byte   5
 1231 081f 43454C4C 		.ascii "CELLS"
 1231      53
 1232              		.p2align 2 	
 1233              	CELLS:
 1234 0824 4FEA8505 		MOV	R5,R5,LSL#2
 1235 0828 F4E5     		_NEXT
 1236              	
 1237              	//    CELL/	( w -- w/4 )
 1238              	// 	Divide by 4.
 1239              	
 1240 082a 1E080000 		.word	_CELLS
 1241 082e 05       	_CELLSL:	.byte   5
 1242 082f 43454C4C 		.ascii "CELL/"
 1242      2F
 1243              		.p2align 2 	
 1244              	CELLSL:
 1245 0834 4FEAA505 		MOV	R5,R5,ASR#2
 1246 0838 ECE5     		_NEXT
 1247              	
 1248              	//    2*	( w -- w*2 )
 1249              	// 	Multiply 2.
 1250              	
 1251 083a 2E080000 		.word	_CELLSL
 1252 083e 02       	_TWOST:	.byte   2
 1253 083f 322A     		.ascii "2*"
 1254 0841 0000BF   		.p2align 2 	
 1255              	TWOST:
 1256 0844 4FEA4505 		MOV	R5,R5,LSL#1
 1257 0848 E4E5     		_NEXT
 1258              	
 1259              	//    2/	( w -- w/2 )
 1260              	// 	Divide by 2.
 1261              	
 1262 084a 3E080000 		.word	_TWOST
 1263 084e 02       	_TWOSL:	.byte   2
 1264 084f 322F     		.ascii "2/"
 1265 0851 0000BF   		.p2align 2 	
 1266              	TWOSL:
 1267 0854 4FEA6505 		MOV	R5,R5,ASR#1
 1268 0858 DCE5     		_NEXT
 1269              	
 1270              	//    ?DUP	( w -- w w | 0 )
 1271              	// 	Conditional duplicate.
 1272              	
 1273 085a 4E080000 		.word	_TWOSL
 1274 085e 04       	_QDUP:	.byte   4
 1275 085f 3F445550 		.ascii "?DUP"
ARM GAS  stm32eforth-fl.s 			page 26


 1276 0863 00       		.p2align 2 	
 1277              	QDUP:
 1278 0864 2C00     		MOVS	R4,R5
 1279 0866 18BF     		IT NE 
 1280 0868 41F8045D 	    STRNE	R5,[R1,#-4]!
 1281 086c D2E5     		_NEXT
 1282              	
 1283              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1284              	// 	Rotate top 3 items.
 1285              	
 1286 086e 5E080000 		.word	_QDUP
 1287 0872 03       	_ROT:	.byte   3
 1288 0873 524F54   		.ascii "ROT"
 1289 0876 00BF     		.p2align 2 	
 1290              	ROT:
 1291 0878 0C68     		LDR	R4,[R1]  // r4=w2 
 1292 087a 0D60     		STR	R5,[R1]  // w3 replace w2 
 1293 087c 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1294 087e 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1295 0880 C8E5     		_NEXT
 1296              	
 1297              	//    2DROP	( w1 w2 -- )
 1298              	// 	Drop top 2 items.
 1299              	
 1300 0882 72080000 		.word	_ROT
 1301 0886 05       	_DDROP:	.byte   5
 1302 0887 3244524F 		.ascii "2DROP"
 1302      50
 1303              		.p2align 2 	
 1304              	DDROP:
 1305 088c 51F8045B 		_POP
 1306 0890 51F8045B 		_POP
 1307 0894 BEE5     		_NEXT 
 1308              	
 1309              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1310              	// 	Duplicate top 2 items.
 1311              	
 1312 0896 86080000 		.word	_DDROP
 1313 089a 04       	_DDUP:	.byte   4
 1314 089b 32445550 		.ascii "2DUP"
 1315 089f 00       		.p2align 2 	
 1316              	DDUP:
 1317 08a0 0C68     		LDR	R4,[R1] // r4=w1
 1318 08a2 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1319 08a6 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1320 08aa B3E5     		_NEXT
 1321              	
 1322              	//    D+	( d1 d2 -- d3 )
 1323              	// 	Add top 2 double numbers.
 1324              	
 1325 08ac 9A080000 		.word	_DDUP
 1326 08b0 02       	_DPLUS:	.byte   2
 1327 08b1 442B     		.ascii "D+"
 1328 08b3 00       		.p2align 2 	
 1329              	DPLUS:
 1330 08b4 51F8044B 		LDR	R4,[R1],#4
 1331 08b8 51F8046B 		LDR	R6,[R1],#4
ARM GAS  stm32eforth-fl.s 			page 27


 1332 08bc 0F68     		LDR	R7,[R1]
 1333 08be E419     		ADDS	R4,R4,R7
 1334 08c0 0C60     		STR	R4,[R1]
 1335 08c2 45EB0605 		ADC	R5,R5,R6
 1336 08c6 A5E5     		_NEXT
 1337              	
 1338              	//    NOT	 ( w -- !w )
 1339              	// 	1"s complement.
 1340              	
 1341 08c8 B0080000 		.word	_DPLUS
 1342 08cc 03       	_INVER:	.byte   3
 1343 08cd 4E4F54   		.ascii "NOT"
 1344              		.p2align 2 	
 1345              	INVER:
 1346 08d0 6FEA0505 		MVN	R5,R5
 1347 08d4 9EE5     		_NEXT
 1348              	
 1349              	//    NEGATE	( w -- -w )
 1350              	// 	2's complement.
 1351              	
 1352 08d6 CC080000 		.word	_INVER
 1353 08da 06       	_NEGAT:	.byte   6
 1354 08db 4E454741 		.ascii "NEGATE"
 1354      5445
 1355 08e1 0000BF   		.p2align 2 	
 1356              	NEGAT:
 1357 08e4 C5F10005 		RSB	R5,R5,#0
 1358 08e8 94E5     		_NEXT
 1359              	
 1360              	//    ABS	 ( w -- |w| )
 1361              	// 	Absolute.
 1362              	
 1363 08ea DA080000 		.word	_NEGAT
 1364 08ee 03       	_ABSS:	.byte   3
 1365 08ef 414253   		.ascii "ABS"
 1366 08f2 00BF     		.p2align 2 	
 1367              	ABSS:
 1368 08f4 15F0004F 		TST	R5,#0x80000000
 1369 08f8 18BF     		IT NE
 1370 08fa 6D42     	    RSBNE   R5,R5,#0
 1371 08fc 8AE5     		_NEXT
 1372              	
 1373              	//  0= ( w -- f )
 1374              	// TOS==0?
 1375              	
 1376 08fe EE080000 		.word _ABSS
 1377 0902 02       	_ZEQUAL: .byte 2
 1378 0903 303D     		.ascii "0="
 1379 0905 0000BF   		.p2align 2
 1380              	ZEQUAL:
 1381 0908 15B9     		cbnz r5,1f
 1382 090a 4FF0FF35 		mov r5,#-1
 1383 090e 81E5     		_NEXT 
 1384 0910 85EA0505 	1:  eor r5,r5,r5  
 1385 0914 7EE5     		_NEXT 	
 1386              	
 1387              	//    =	 ( w w -- t )
ARM GAS  stm32eforth-fl.s 			page 28


 1388              	// 	Equal?
 1389              	
 1390 0916 02090000 		.word	_ZEQUAL
 1391 091a 01       	_EQUAL:	.byte   1
 1392 091b 3D       		.ascii "="
 1393              		.p2align 2 	
 1394              	EQUAL:
 1395 091c 51F8044B 		LDR	R4,[R1],#4
 1396 0920 A542     		CMP	R5,R4
 1397 0922 0CBF     		ITE EQ 
 1398 0924 6FF00005 	    MVNEQ	R5,#0
 1399 0928 0025     		MOVNE	R5,#0
 1400 092a 73E5     		_NEXT
 1401              	
 1402              	//    U<	 ( w w -- t )
 1403              	// 	Unsigned equal?
 1404              	
 1405 092c 1A090000 		.word	_EQUAL
 1406 0930 02       	_ULESS:	.byte   2
 1407 0931 553C     		.ascii "U<"
 1408 0933 00       		.p2align 2 	
 1409              	ULESS:
 1410 0934 51F8044B 		LDR	R4,[R1],#4
 1411 0938 AC42     		CMP	R4,R5
 1412 093a 34BF     		ITE CC 
 1413 093c 6FF00005 		MVNCC	R5,#0
 1414 0940 0025     		MOVCS	R5,#0
 1415 0942 67E5     		_NEXT
 1416              	
 1417              	//    <	( w w -- t )
 1418              	// 	Less?
 1419              	
 1420 0944 30090000 		.word	_ULESS
 1421 0948 01       	_LESS:	.byte   1
 1422 0949 3C       		.ascii "<"
 1423 094a 00BF     		.p2align 2 	
 1424              	LESS:
 1425 094c 51F8044B 		LDR	R4,[R1],#4
 1426 0950 AC42     		CMP	R4,R5
 1427 0952 B4BF     	    ITE LT
 1428 0954 6FF00005 		MVNLT	R5,#0
 1429 0958 0025     		MOVGE	R5,#0
 1430 095a 5BE5     		_NEXT 
 1431              	
 1432              	//    >	( w w -- t )
 1433              	// 	greater?
 1434              	
 1435 095c 48090000 		.word	_LESS
 1436 0960 01       	_GREAT:	.byte   1
 1437 0961 3E       		.ascii ">"
 1438 0962 00BF     		.p2align 2 	
 1439              	GREAT:
 1440 0964 51F8044B 		LDR	R4,[R1],#4
 1441 0968 AC42     		CMP	R4,R5
 1442 096a CCBF     		ITE GT
 1443 096c 6FF00005 	    MVNGT	R5,#0
 1444 0970 0025     		MOVLE	R5,#0
ARM GAS  stm32eforth-fl.s 			page 29


 1445 0972 4FE5     		_NEXT
 1446              	
 1447              	//    MAX	 ( w w -- max )
 1448              	// 	Leave maximum.
 1449              	
 1450 0974 60090000 		.word	_GREAT
 1451 0978 03       	_MAX:	.byte   3
 1452 0979 4D4158   		.ascii "MAX"
 1453              		.p2align 2 	
 1454              	MAX:
 1455 097c 51F8044B 		LDR	R4,[R1],#4
 1456 0980 AC42     		CMP	R4,R5
 1457 0982 C8BF     		IT GT 
 1458 0984 2546     		MOVGT	R5,R4
 1459 0986 45E5     		_NEXT 
 1460              	
 1461              	//    MIN	 ( w w -- min )
 1462              	// 	Leave minimum.
 1463              	
 1464 0988 78090000 		.word	_MAX
 1465 098c 03       	_MIN:	.byte   3
 1466 098d 4D494E   		.ascii "MIN"
 1467              		.p2align 2 	
 1468              	MIN:
 1469 0990 51F8044B 		LDR	R4,[R1],#4
 1470 0994 AC42     		CMP	R4,R5
 1471 0996 B8BF     		IT LT
 1472 0998 2546     		MOVLT	R5,R4
 1473 099a 3BE5     		_NEXT
 1474              	
 1475              	//    +!	 ( w a -- )
 1476              	// 	Add to memory.
 1477              	
 1478 099c 8C090000 		.word	_MIN
 1479 09a0 02       	_PSTOR:	.byte   2
 1480 09a1 2B21     		.ascii "+!"
 1481 09a3 00       		.p2align 2 	
 1482              	PSTOR:
 1483 09a4 51F8044B 		LDR	R4,[R1],#4
 1484 09a8 2E68     		LDR	R6,[R5]
 1485 09aa 2644     		ADD	R6,R6,R4
 1486 09ac 2E60     		STR	R6,[R5]
 1487 09ae 51F8045B 		_POP
 1488 09b2 2FE5     		_NEXT
 1489              	
 1490              	//    2!	 ( d a -- )
 1491              	// 	Store double number.
 1492              	
 1493 09b4 A0090000 		.word	_PSTOR
 1494 09b8 02       	_DSTOR:	.byte   2
 1495 09b9 3221     		.ascii "2!"
 1496 09bb 00       		.p2align 2 	
 1497              	DSTOR:
 1498 09bc 51F8044B 		LDR	R4,[R1],#4
 1499 09c0 51F8046B 		LDR	R6,[R1],#4
 1500 09c4 45F8044B 		STR	R4,[R5],#4
 1501 09c8 2E60     		STR	R6,[R5]
ARM GAS  stm32eforth-fl.s 			page 30


 1502 09ca 51F8045B 		_POP
 1503 09ce 21E5     		_NEXT
 1504              	
 1505              	//    2@	 ( a -- d )
 1506              	// 	Fetch double number.
 1507              	
 1508 09d0 B8090000 		.word	_DSTOR
 1509 09d4 02       	_DAT:	.byte   2
 1510 09d5 3240     		.ascii "2@"
 1511 09d7 00       		.p2align 2 	
 1512              	DAT:
 1513 09d8 6C68     		LDR	R4,[R5,#4]
 1514 09da 41F8044D 		STR	R4,[R1,#-4]!
 1515 09de 2D68     		LDR	R5,[R5]
 1516 09e0 18E5     		_NEXT
 1517              	
 1518              	//    COUNT	( b -- b+1 c )
 1519              	// 	Fetch length of string.
 1520              	
 1521 09e2 D4090000 		.word	_DAT
 1522 09e6 05       	_COUNT:	.byte   5
 1523 09e7 434F554E 		.ascii "COUNT"
 1523      54
 1524              		.p2align 2 	
 1525              	COUNT:
 1526 09ec 15F8014B 		LDRB	R4,[R5],#1
 1527 09f0 41F8045D 		_PUSH
 1528 09f4 2546     		MOV	R5,R4
 1529 09f6 0DE5     		_NEXT
 1530              	
 1531              	//    DNEGATE	( d -- -d )
 1532              	// 	Negate double number.
 1533              	
 1534 09f8 E6090000 		.word	_COUNT
 1535 09fc 07       	_DNEGA:	.byte   7
 1536 09fd 444E4547 		.ascii "DNEGATE"
 1536      415445
 1537              		.p2align 2 	
 1538              	DNEGA:
 1539 0a04 0C68     		LDR	R4,[R1]
 1540 0a06 A6EB0606 		SUB	R6,R6,R6
 1541 0a0a 341B     		SUBS R4,R6,R4
 1542 0a0c 66EB0505 		SBC	R5,R6,R5
 1543 0a10 0C60     		STR	R4,[R1]
 1544 0a12 FFE4     		_NEXT
 1545              	
 1546              	// **************************************************************************
 1547              	//  System and user variables
 1548              	
 1549              	//    doVAR	( -- a )
 1550              	// 	Run time routine for VARIABLE and CREATE.
 1551              	
 1552              	// 	.word	_DNEGA
 1553              	// _DOVAR	.byte  COMPO+5
 1554              	// 	.ascii "doVAR"
 1555              	// 	.p2align 2 	
 1556              	DOVAR:
ARM GAS  stm32eforth-fl.s 			page 31


 1557 0a14 41F8045D 		_PUSH
 1558 0a18 0546     		MOV R5,R0
 1559 0a1a 00F10400 		ADD R0,R0,#4 
 1560 0a1e F9E4     		_NEXT  
 1561              	
 1562              	//    doCON	( -- a ) 
 1563              	// 	Run time routine for CONSTANT.
 1564              	
 1565              	// 	.word	_DOVAR
 1566              	// _DOCON	.byte  COMPO+5
 1567              	// 	.ascii "doCON"
 1568              	// 	.p2align 2 	
 1569              	DOCON:
 1570 0a20 41F8045D 		_PUSH
 1571 0a24 50F8045B 		LDR.W R5,[R0],#4 
 1572 0a28 F4E4     		_NEXT   
 1573              	
 1574              	/***********************
 1575              	  system variables 
 1576              	***********************/
 1577              	
 1578              	 // SEED ( -- a)
 1579              	 // return PRNG seed address 
 1580              	
 1581 0a2a FC090000 		.word _DNEGA
 1582 0a2e 04       	_SEED: .byte 4
 1583 0a2f 53454544 		.ascii "SEED"
 1584 0a33 00       		.p2align 2
 1585              	SEED:
 1586 0a34 41F8045D 		_PUSH 
 1587 0a38 03F10405 		ADD R5,R3,#SEED_OFS
 1588 0a3c EAE4     		_NEXT 	
 1589              	
 1590              	//  MSEC ( -- a)
 1591              	// return address of milliseconds counter
 1592 0a3e 2E0A0000 	  .word _SEED 
 1593 0a42 04       	_MSEC: .byte 4
 1594 0a43 4D534543 	  .ascii "MSEC"
 1595 0a47 00       	  .p2align 2 
 1596              	MSEC:
 1597 0a48 41F8045D 	  _PUSH
 1598 0a4c 03F10805 	  ADD R5,R3,#TICKS_OFS
 1599 0a50 E0E4     	  _NEXT 
 1600              	
 1601              	// TIMER ( -- a )
 1602              	// count down timer 
 1603 0a52 420A0000 	  .word _MSEC
 1604 0a56 05       	_TIMER:  .byte 5
 1605 0a57 54494D45 	  .ascii "TIMER"
 1605      52
 1606              	  .p2align 2 
 1607              	TIMER:
 1608 0a5c 41F8045D 	  _PUSH 
 1609 0a60 03F10C05 	  ADD R5,R3,#TIMER_OFS
 1610 0a64 D6E4     	  _NEXT
 1611              	
 1612              	//    'BOOT	 ( -- a )
ARM GAS  stm32eforth-fl.s 			page 32


 1613              	// 	Application.
 1614              	
 1615 0a66 560A0000 		.word	_TIMER
 1616 0a6a 05       	_TBOOT:	.byte   5
 1617 0a6b 27424F4F 		.ascii "'BOOT"
 1617      54
 1618              		.p2align 2 	
 1619              	TBOOT:
 1620 0a70 41F8045D 		_PUSH
 1621 0a74 03F11805 		ADD	R5,R3,#BOOT_OFS 
 1622 0a78 CCE4     		_NEXT
 1623              		
 1624              	//    BASE	( -- a )
 1625              	// 	Storage of the radix base for numeric I/O.
 1626              	
 1627 0a7a 6A0A0000 		.word	_TBOOT
 1628 0a7e 04       	_BASE:	.byte   4
 1629 0a7f 42415345 		.ascii "BASE"
 1630 0a83 00       		.p2align 2 	
 1631              	BASE:
 1632 0a84 41F8045D 		_PUSH
 1633 0a88 03F11C05 		ADD	R5,R3,#BASE_OFS
 1634 0a8c C2E4     		_NEXT
 1635              	
 1636              	//    tmp	 ( -- a )
 1637              	// 	A temporary storage location used in parse and find.
 1638              	
 1639              	// 	.word	_BASE
 1640              	// _TEMP	.byte   COMPO+3
 1641              	// 	.ascii "tmp"
 1642              	// 	.p2align 2 	
 1643              	TEMP:
 1644 0a8e 41F8045D 		_PUSH
 1645 0a92 03F12005 		ADD	R5,R3,#TMP_OFS
 1646 0a96 BDE4     		_NEXT
 1647              	
 1648              	//    SPAN	( -- a )
 1649              	// 	Hold character count received by EXPECT.
 1650              	
 1651 0a98 7E0A0000 		.word	_BASE
 1652 0a9c 04       	_SPAN:	.byte   4
 1653 0a9d 5350414E 		.ascii "SPAN"
 1654 0aa1 0000BF   		.p2align 2 	
 1655              	SPAN:
 1656 0aa4 41F8045D 		_PUSH
 1657 0aa8 03F12405 		ADD	R5,R3,#SPAN_OFS
 1658 0aac B2E4     		_NEXT
 1659              	
 1660              	//    >IN	 ( -- a )
 1661              	// 	Hold the character pointer while parsing input stream.
 1662              	
 1663 0aae 9C0A0000 		.word	_SPAN
 1664 0ab2 03       	_INN:	.byte   3
 1665 0ab3 3E494E   		.ascii ">IN"
 1666 0ab6 00BF     		.p2align 2 	
 1667              	INN:
 1668 0ab8 41F8045D 		_PUSH
ARM GAS  stm32eforth-fl.s 			page 33


 1669 0abc 03F12805 		ADD	R5,R3,#TOIN_OFS
 1670 0ac0 A8E4     		_NEXT
 1671              	
 1672              	//    #TIB	( -- a )
 1673              	// 	Hold the current count and address of the terminal input buffer.
 1674              	
 1675 0ac2 B20A0000 		.word	_INN
 1676 0ac6 04       	_NTIB:	.byte   4
 1677 0ac7 23544942 		.ascii "#TIB"
 1678 0acb 00       		.p2align 2 	
 1679              	NTIB:
 1680 0acc 41F8045D 		_PUSH
 1681 0ad0 03F12C05 		ADD	R5,R3,#NTIB_OFS
 1682 0ad4 9EE4     		_NEXT
 1683              	
 1684              	//    'EVAL	( -- a )
 1685              	// 	Execution vector of EVAL.
 1686              	
 1687 0ad6 C60A0000 		.word	_NTIB
 1688 0ada 05       	_TEVAL:	.byte   5
 1689 0adb 27455641 		.ascii "'EVAL"
 1689      4C
 1690              		.p2align 2 	
 1691              	TEVAL:
 1692 0ae0 41F8045D 		_PUSH
 1693 0ae4 03F13405 		ADD	R5,R3,#EVAL_OFS
 1694 0ae8 94E4     		_NEXT
 1695              	
 1696              	//    HLD	 ( -- a )
 1697              	// 	Hold a pointer in building a numeric output string.
 1698              	
 1699 0aea DA0A0000 		.word	_TEVAL
 1700 0aee 03       	_HLD:	.byte   3
 1701 0aef 484C44   		.ascii "HLD"
 1702 0af2 00BF     		.p2align 2 	
 1703              	HLD:
 1704 0af4 41F8045D 		_PUSH
 1705 0af8 03F13805 		ADD	R5,R3,#HLD_OFS
 1706 0afc 8AE4     		_NEXT
 1707              	
 1708              	//    CONTEXT	( -- a )
 1709              	// 	A area to specify vocabulary search order.
 1710              	
 1711 0afe EE0A0000 		.word	_HLD
 1712 0b02 07       	_CNTXT:	.byte   7
 1713 0b03 434F4E54 		.ascii "CONTEXT"
 1713      455854
 1714 0b0a 00BF     		.p2align 2 	
 1715              	CNTXT:
 1716              	CRRNT:
 1717 0b0c 41F8045D 		_PUSH
 1718 0b10 03F13C05 		ADD	R5,R3,#CTXT_OFS
 1719 0b14 7EE4     		_NEXT
 1720              	
 1721              	//    CP	( -- a )
 1722              	// 	Point to top name in RAM vocabulary.
 1723              	
ARM GAS  stm32eforth-fl.s 			page 34


 1724 0b16 020B0000 		.word	_CNTXT
 1725 0b1a 02       	_CP:	.byte   2
 1726 0b1b 4350     		.ascii "CP"
 1727 0b1d 0000BF   		.p2align 2 	
 1728              	CPP:
 1729 0b20 41F8045D 		_PUSH
 1730 0b24 03F14405 		ADD	R5,R3,#RAM_CTOP_OFS
 1731 0b28 74E4     		_NEXT
 1732              	
 1733              	//   FCP ( -- a )
 1734              	//  Point ot top of Forth system dictionary
 1735 0b2a 1A0B0000 		.word _CP
 1736 0b2e 03       	_FCP: .byte 3            
 1737 0b2f 464350   		.ascii "FCP"
 1738 0b32 00BF     		.p2align 2 
 1739              	FCP: 
 1740 0b34 41F8045D 		_PUSH 
 1741 0b38 03F14005 		ADD R5,R3,#FORTH_CTOP_OFS 
 1742 0b3c 6AE4     		_NEXT 
 1743              	
 1744              	//    LAST	( -- a )
 1745              	// 	Point to the last name in the name dictionary.
 1746              	
 1747 0b3e 2E0B0000 		.word	_FCP
 1748 0b42 04       	_LAST:	.byte   4
 1749 0b43 4C415354 		.ascii "LAST"
 1750 0b47 00       		.p2align 2 	
 1751              	LAST:
 1752 0b48 41F8045D 		_PUSH
 1753 0b4c 03F14805 		ADD	R5,R3,#LASTN_OFS
 1754 0b50 60E4     		_NEXT
 1755              	
 1756              	//	FTRACE ( -- a )
 1757              	// return trace flag address 
 1758 0b52 420B0000 		.word _LAST  
 1759 0b56 06       	_FTRACE: .byte 6
 1760 0b57 46545241 		.ascii "FTRACE"
 1760      4345
 1761 0b5d 0000BF   		.p2align 2 
 1762              	FTRACE:	
 1763 0b60 41F8045D 		_PUSH 
 1764 0b64 03F11005 		ADD R5,R3,#FTRACE_OFS 
 1765 0b68 54E4     		_NEXT 
 1766              	
 1767              	/***********************
 1768              		system constants 
 1769              	***********************/
 1770              	
 1771              	//	USER_BEGIN ( -- a )
 1772              	//  where user area begin in RAM
 1773 0b6a 560B0000 		.word _FTRACE
 1774 0b6e 0A       	_USER_BGN: .byte 10
 1775 0b6f 55534552 		.ascii "USER_BEGIN"
 1775      5F424547 
 1775      494E
 1776 0b79 0000BF   		.p2align 2
 1777              	USER_BEGIN:
ARM GAS  stm32eforth-fl.s 			page 35


 1778 0b7c 41F8045D 		_PUSH 
 1779 0b80 004D     		ldr r5,USR_BGN_ADR 
 1780 0b82 47E4     		_NEXT 
 1781              	USR_BGN_ADR:
 1782 0b84 00010020 	.word  DTOP 
 1783              	
 1784              	//  USER_END ( -- a )
 1785              	//  where user area end in RAM 
 1786 0b88 6E0B0000 		.word _USER_BGN
 1787 0b8c 08       	_USER_END: .byte 8 
 1788 0b8d 55534552 		.ascii "USER_END" 
 1788      5F454E44 
 1789 0b95 0000BF   		.p2align 2 
 1790              	USER_END:
 1791 0b98 41F8045D 		_PUSH 
 1792 0b9c 004D     		ldr r5,USER_END_ADR 
 1793 0b9e 39E4     		_NEXT 
 1794              	USER_END_ADR:
 1795 0ba0 004E0020 		.word DEND 
 1796              	
 1797              	//  IMG_ADR ( -- a )
 1798              	//  where user image is saved in FLASH
 1799 0ba4 8C0B0000 		.word _USER_END
 1800 0ba8 07       	_IMG_ADR: .byte 7
 1801 0ba9 494D475F 		.ascii "IMG_ADR"
 1801      414452
 1802              		.p2align 2 
 1803              	IMG_ADR:
 1804 0bb0 41F8045D 		_PUSH
 1805 0bb4 004D     		ldr r5,USR_IMG_ADR   
 1806 0bb6 2DE4     		_NEXT 
 1807              	USR_IMG_ADR:
 1808 0bb8 00000000 		.word USER_SPACE 
 1809              	
 1810              	// IMG_SIGN ( -- a )
 1811              	// image signature 
 1812 0bbc A80B0000 		.word _IMG_ADR 
 1813 0bc0 08       	_IMG_SIGN: .byte 8
 1814 0bc1 494D475F 		.ascii "IMG_SIGN"
 1814      5349474E 
 1815 0bc9 0000BF   		.p2align 2
 1816              	IMG_SIGN: 
 1817 0bcc 41F8045D 		_PUSH 
 1818 0bd0 03F11405 		ADD r5,r3,#IMG_SIGN_OFS 
 1819 0bd4 1EE4     		_NEXT 
 1820              	
 1821              	/* *********************
 1822              	  Common functions
 1823              	***********************/
 1824              	
 1825              	//    WITHIN	( u ul uh -- t )
 1826              	// 	Return true if u is within the range of ul and uh.
 1827              	
 1828 0bd6 C00B0000 		.word	_IMG_SIGN
 1829 0bda 06       	_WITHI:	.byte   6
 1830 0bdb 57495448 		.ascii "WITHIN"
 1830      494E
ARM GAS  stm32eforth-fl.s 			page 36


 1831 0be1 0000BF   		.p2align 2 	
 1832              	WITHI:
 1833 0be4 404700BF 		_NEST
 1834 0be8 B5060000 		_ADR	OVER
 1835 0bec 65070000 		_ADR	SUBB
 1836 0bf0 39060000 		_ADR	TOR
 1837 0bf4 65070000 		_ADR	SUBB
 1838 0bf8 15060000 		_ADR	RFROM
 1839 0bfc 35090000 		_ADR	ULESS
 1840 0c00 1B040000 		_UNNEST
 1841              	
 1842              	//  Divide
 1843              	
 1844              	//    UM/MOD	( udl udh u -- ur uq )
 1845              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1846              	
 1847 0c04 DA0B0000 		.word	_WITHI
 1848 0c08 06       	_UMMOD:	.byte   6
 1849 0c09 554D2F4D 		.ascii "UM/MOD"
 1849      4F44
 1850 0c0f 00       		.p2align 2 	
 1851              	UMMOD:
 1852 0c10 4FF00107 		MOV	R7,#1
 1853 0c14 51F8044B 		LDR	R4,[R1],#4
 1854 0c18 0E68     		LDR	R6,[R1]
 1855              	UMMOD0:
 1856 0c1a B619     		ADDS	R6,R6,R6
 1857 0c1c 6441     		ADCS	R4,R4,R4
 1858 0c1e 04D3     		BCC	UMMOD1
 1859 0c20 A4EB0504 		SUB	R4,R4,R5
 1860 0c24 06F10106 		ADD	R6,R6,#1
 1861 0c28 04E0     		B UMMOD2
 1862              	UMMOD1:
 1863 0c2a 641B     		SUBS	R4,R4,R5 
 1864 0c2c 28BF     		IT CS 
 1865 0c2e 0136     		ADDCS	R6,R6,#1
 1866 0c30 00D2     		BCS	UMMOD2
 1867 0c32 2C44     		ADD	R4,R4,R5
 1868              	UMMOD2:
 1869 0c34 FF19     		ADDS	R7,R7,R7
 1870 0c36 F0D3     		BCC	UMMOD0
 1871 0c38 3546     		MOV	R5,R6
 1872 0c3a 0C60     		STR	R4,[R1]
 1873 0c3c FFF7EABB 		_NEXT
 1874              	
 1875              	//    M/MOD	( d n -- r q )
 1876              	// 	Signed floored divide of double by single. Return mod and quotient.
 1877              	
 1878 0c40 080C0000 		.word	_UMMOD
 1879 0c44 05       	_MSMOD:	.byte  5
 1880 0c45 4D2F4D4F 		.ascii "M/MOD"
 1880      44
 1881 0c4a 00BF     		.p2align 2 	
 1882              	MSMOD:	
 1883 0c4c 404700BF 		_NEST
 1884 0c50 91060000 		_ADR	DUPP
 1885 0c54 C5060000 		_ADR	ZLESS
ARM GAS  stm32eforth-fl.s 			page 37


 1886 0c58 91060000 		_ADR	DUPP
 1887 0c5c 39060000 		_ADR	TOR
 1888 0c60 A9050000 		_QBRAN MMOD1
 1888      780C0000 
 1889 0c68 E5080000 		_ADR	NEGAT
 1890 0c6c 39060000 		_ADR	TOR
 1891 0c70 050A0000 		_ADR	DNEGA
 1892 0c74 15060000 		_ADR	RFROM
 1893              	MMOD1:
 1894 0c78 39060000 		_ADR	TOR
 1895 0c7c 91060000 		_ADR	DUPP
 1896 0c80 C5060000 		_ADR	ZLESS
 1897 0c84 A9050000 		_QBRAN MMOD2
 1897      940C0000 
 1898 0c8c 29060000 		_ADR	RAT
 1899 0c90 55070000 		_ADR	PLUS
 1900              	MMOD2:
 1901 0c94 15060000 		_ADR	RFROM
 1902 0c98 110C0000 		_ADR	UMMOD
 1903 0c9c 15060000 		_ADR	RFROM
 1904 0ca0 A9050000 		_QBRAN	MMOD3
 1904      B40C0000 
 1905 0ca8 A1060000 		_ADR	SWAP
 1906 0cac E5080000 		_ADR	NEGAT
 1907 0cb0 A1060000 		_ADR	SWAP
 1908              	MMOD3:   
 1909 0cb4 1B040000 		_UNNEST
 1910              	
 1911              	//    /MOD	( n n -- r q )
 1912              	// 	Signed divide. Return mod and quotient.
 1913              	
 1914 0cb8 440C0000 		.word	_MSMOD
 1915 0cbc 04       	_SLMOD:	.byte   4
 1916 0cbd 2F4D4F44 		.ascii "/MOD"
 1917 0cc1 0000BF   		.p2align 2 	
 1918              	SLMOD:
 1919 0cc4 404700BF 		_NEST
 1920 0cc8 B5060000 		_ADR	OVER
 1921 0ccc C5060000 		_ADR	ZLESS
 1922 0cd0 A1060000 		_ADR	SWAP
 1923 0cd4 4D0C0000 		_ADR	MSMOD
 1924 0cd8 1B040000 		_UNNEST
 1925              	
 1926              	//    MOD	 ( n n -- r )
 1927              	// 	Signed divide. Return mod only.
 1928              	
 1929 0cdc BC0C0000 		.word	_SLMOD
 1930 0ce0 03       	_MODD:	.byte  3
 1931 0ce1 4D4F44   		.ascii "MOD"
 1932              		.p2align 2 	
 1933              	MODD:
 1934 0ce4 404700BF 		_NEST
 1935 0ce8 C50C0000 		_ADR	SLMOD
 1936 0cec 81060000 		_ADR	DROP
 1937 0cf0 1B040000 		_UNNEST
 1938              	
 1939              	//    /	   ( n n -- q )
ARM GAS  stm32eforth-fl.s 			page 38


 1940              	// 	Signed divide. Return quotient only.
 1941              	
 1942 0cf4 E00C0000 		.word	_MODD
 1943 0cf8 01       	_SLASH:	.byte  1
 1944 0cf9 2F       		.ascii "/"
 1945 0cfa 00BF     		.p2align 2 	
 1946              	SLASH:
 1947 0cfc 404700BF 		_NEST
 1948 0d00 C50C0000 		_ADR	SLMOD
 1949 0d04 A1060000 		_ADR	SWAP
 1950 0d08 81060000 		_ADR	DROP
 1951 0d0c 1B040000 		_UNNEST
 1952              	
 1953              	//    */MOD	( n1 n2 n3 -- r q )
 1954              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1955              	
 1956 0d10 F80C0000 		.word	_SLASH
 1957 0d14 05       	_SSMOD:	.byte  5
 1958 0d15 2A2F4D4F 		.ascii "*/MOD"
 1958      44
 1959 0d1a 00BF     		.p2align 2 	
 1960              	SSMOD:
 1961 0d1c 404700BF 		_NEST
 1962 0d20 39060000 		_ADR	TOR
 1963 0d24 9D070000 		_ADR	MSTAR
 1964 0d28 15060000 		_ADR	RFROM
 1965 0d2c 4D0C0000 		_ADR	MSMOD
 1966 0d30 1B040000 		_UNNEST
 1967              	
 1968              	//    */	  ( n1 n2 n3 -- q )
 1969              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1970              	
 1971 0d34 140D0000 		.word	_SSMOD
 1972 0d38 02       	_STASL:	.byte  2
 1973 0d39 2A2F     		.ascii "*/"
 1974 0d3b 00       		.p2align 2 	
 1975              	STASL:
 1976 0d3c 404700BF 		_NEST
 1977 0d40 1D0D0000 		_ADR	SSMOD
 1978 0d44 A1060000 		_ADR	SWAP
 1979 0d48 81060000 		_ADR	DROP
 1980 0d4c 1B040000 		_UNNEST
 1981              	
 1982              	// **************************************************************************
 1983              	//  Miscellaneous
 1984              	
 1985              	//    ALIGNED	( b -- a )
 1986              	// 	Align address to the cell boundary.
 1987              	
 1988 0d50 380D0000 		.word	_STASL
 1989 0d54 07       	_ALGND:	.byte   7
 1990 0d55 414C4947 		.ascii "ALIGNED"
 1990      4E4544
 1991              		.p2align 2 	
 1992              	ALGND:
 1993 0d5c 05F10305 		ADD	R5,R5,#3
 1994 0d60 6FF00304 		MVN	R4,#3
ARM GAS  stm32eforth-fl.s 			page 39


 1995 0d64 05EA0405 		AND	R5,R5,R4
 1996 0d68 FFF754BB 		_NEXT
 1997              	
 1998              	//    >CHAR	( c -- c )
 1999              	// 	Filter non-printing characters.
 2000              	
 2001 0d6c 540D0000 		.word	_ALGND
 2002 0d70 05       	_TCHAR:	.byte  5
 2003 0d71 3E434841 		.ascii ">CHAR"
 2003      52
 2004 0d76 00BF     		.p2align 2 	
 2005              	TCHAR:
 2006 0d78 404700BF 		_NEST
 2007 0d7c 6D050000 		_DOLIT  0x7F
 2007      7F000000 
 2008 0d84 D5060000 		_ADR	ANDD
 2009 0d88 91060000 		_ADR	DUPP	// mask msb
 2010 0d8c 11080000 		_ADR	BLANK
 2011 0d90 6D050000 		_DOLIT 	127
 2011      7F000000 
 2012 0d98 E50B0000 		_ADR	WITHI	// check for printable
 2013 0d9c D1080000 		_ADR	INVER
 2014 0da0 A9050000 		_QBRAN	TCHA1
 2014      B40D0000 
 2015 0da8 81060000 		_ADR	DROP
 2016 0dac 6D050000 		_DOLIT 	'_'	// replace non-printables
 2016      5F000000 
 2017              	TCHA1:
 2018 0db4 1B040000 		  _UNNEST
 2019              	
 2020              	//    DEPTH	( -- n )
 2021              	// 	Return the depth of the data stack.
 2022              	
 2023 0db8 700D0000 		.word	_TCHAR
 2024 0dbc 05       	_DEPTH:	.byte  5
 2025 0dbd 44455054 		.ascii "DEPTH"
 2025      48
 2026 0dc2 00BF     		.p2align 2 	
 2027              	DEPTH:
 2028 0dc4 41F8045D 		_PUSH
 2029 0dc8 44F68465 		MOVW	R5,#SPP&0xffff+4 
 2030 0dcc C2F20005 	 	MOVT	R5,#SPP>>16 
 2031 0dd0 A5EB0105 		SUB	R5,R5,R1
 2032 0dd4 4FEAA505 		ASR	R5,R5,#2
 2033 0dd8 A5F10105 		SUB	R5,R5,#1
 2034 0ddc FFF71ABB 		_NEXT
 2035              	
 2036              	//    PICK	( ... +n -- ... w )
 2037              	// 	Copy the nth stack item to tos.
 2038              	
 2039 0de0 BC0D0000 		.word	_DEPTH
 2040 0de4 04       	_PICK:	.byte  4
 2041 0de5 5049434B 		.ascii "PICK"
 2042 0de9 0000BF   		.p2align 2 	
 2043              	PICK:
 2044 0dec 404700BF 		_NEST
 2045 0df0 B1070000 		_ADR	ONEP
ARM GAS  stm32eforth-fl.s 			page 40


 2046 0df4 25080000 		_ADR	CELLS
 2047 0df8 6D060000 		_ADR	SPAT
 2048 0dfc 55070000 		_ADR	PLUS
 2049 0e00 E9050000 		_ADR	AT
 2050 0e04 1B040000 		_UNNEST
 2051              	
 2052              	// **************************************************************************
 2053              	//  Memory access
 2054              	
 2055              	//    HERE	( -- a )
 2056              	// 	Return the top of the code dictionary.
 2057              	
 2058 0e08 E40D0000 		.word	_PICK
 2059 0e0c 04       	_HERE:	.byte  4
 2060 0e0d 48455245 		.ascii "HERE"
 2061 0e11 0000BF   		.p2align 2 	
 2062              	HERE:
 2063 0e14 404700BF 		_NEST
 2064 0e18 210B0000 		_ADR	CPP
 2065 0e1c E9050000 		_ADR	AT
 2066 0e20 1B040000 		_UNNEST
 2067              		
 2068              	//    PAD	 ( -- a )
 2069              	// 	Return the address of a temporary buffer.
 2070              	
 2071 0e24 0C0E0000 		.word	_HERE
 2072 0e28 03       	_PAD:	.byte  3
 2073 0e29 504144   		.ascii "PAD"
 2074              		.p2align 2 	
 2075              	PAD:
 2076 0e2c 404700BF 		_NEST
 2077 0e30 150E0000 		_ADR	HERE
 2078 0e34 6D050000 		_DOLIT 80
 2078      50000000 
 2079 0e3c 55070000 		_ADR PLUS 
 2080 0e40 1B040000 		_UNNEST
 2081              	
 2082              	//    TIB	 ( -- a )
 2083              	// 	Return the address of the terminal input buffer.
 2084              	
 2085 0e44 280E0000 		.word	_PAD
 2086 0e48 03       	_TIB:	.byte  3
 2087 0e49 544942   		.ascii "TIB"
 2088              		.p2align 2 	
 2089              	TIB:
 2090 0e4c 41F8045D 		_PUSH
 2091 0e50 1D6B     		ldr r5,[r3,#TIB_OFS]
 2092 0e52 FFF7DFBA 		_NEXT
 2093              	
 2094              	//    @EXECUTE	( a -- )
 2095              	// 	Execute vector stored in address a.
 2096              	
 2097 0e56 480E0000 		.word	_TIB
 2098 0e5a 08       	_ATEXE:	.byte   8
 2099 0e5b 40455845 		.ascii "@EXECUTE"
 2099      43555445 
 2100 0e63 00       		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 41


 2101              	ATEXE: 
 2102 0e64 2C00     		MOVS	R4,R5
 2103 0e66 51F8045B 		_POP
 2104 0e6a 2468     		LDR	R4,[R4]
 2105 0e6c 44F00104 		ORR	R4,R4,#1
 2106 0e70 18BF     	    IT NE 
 2107 0e72 2047     		BXNE	R4
 2108 0e74 FFF7CEBA 		_NEXT
 2109              	
 2110              	//    CMOVE	( b1 b2 u -- )
 2111              	// 	Copy u bytes from b1 to b2.
 2112              	
 2113 0e78 5A0E0000 		.word	_ATEXE
 2114 0e7c 05       	_CMOVE:	.byte   5
 2115 0e7d 434D4F56 		.ascii "CMOVE"
 2115      45
 2116 0e82 00BF     		.p2align 2 	
 2117              	CMOVE:
 2118 0e84 51F8046B 		LDR	R6,[R1],#4
 2119 0e88 51F8047B 		LDR	R7,[R1],#4
 2120 0e8c 03E0     		B CMOV1
 2121              	CMOV0:
 2122 0e8e 17F8014B 		LDRB	R4,[R7],#1
 2123 0e92 06F8014B 		STRB	R4,[R6],#1
 2124              	CMOV1:
 2125 0e96 2D00     		MOVS	R5,R5
 2126 0e98 02D0     		BEQ	CMOV2
 2127 0e9a A5F10105 		SUB	R5,R5,#1
 2128 0e9e F6E7     		B CMOV0
 2129              	CMOV2:
 2130 0ea0 51F8045B 		_POP
 2131 0ea4 FFF7B6BA 		_NEXT
 2132              	
 2133              	//    MOVE	( a1 a2 u -- )
 2134              	// 	Copy u words from a1 to a2.
 2135              	
 2136 0ea8 7C0E0000 		.word	_CMOVE
 2137 0eac 04       	_MOVE:	.byte   4
 2138 0ead 4D4F5645 		.ascii "MOVE"
 2139 0eb1 0000BF   		.p2align 2 	
 2140              	MOVE:
 2141 0eb4 25F00305 		AND	R5,R5,#-4
 2142 0eb8 51F8046B 		LDR	R6,[R1],#4
 2143 0ebc 51F8047B 		LDR	R7,[R1],#4
 2144 0ec0 03E0     		B MOVE1
 2145              	MOVE0:
 2146 0ec2 57F8044B 		LDR	R4,[R7],#4
 2147 0ec6 46F8044B 		STR	R4,[R6],#4
 2148              	MOVE1:
 2149 0eca 2D00     		MOVS	R5,R5
 2150 0ecc 02D0     		BEQ	MOVE2
 2151 0ece A5F10405 		SUB	R5,R5,#4
 2152 0ed2 F6E7     		B MOVE0
 2153              	MOVE2:
 2154 0ed4 51F8045B 		_POP
 2155 0ed8 FFF79CBA 		_NEXT
 2156              	
ARM GAS  stm32eforth-fl.s 			page 42


 2157              	//    FILL	( b u c -- )
 2158              	// 	Fill u bytes of character c to area beginning at b.
 2159              	
 2160 0edc AC0E0000 		.word	_MOVE
 2161 0ee0 04       	_FILL:	.byte   4
 2162 0ee1 46494C4C 		.ascii "FILL"
 2163 0ee5 0000BF   		.p2align 2 	
 2164              	FILL:
 2165 0ee8 51F8046B 		LDR	R6,[R1],#4
 2166 0eec 51F8047B 		LDR	R7,[R1],#4
 2167              	FILL0:
 2168 0ef0 00E0     		B FILL1
 2169 0ef2 2D46     		MOV	R5,R5
 2170              	FILL1:
 2171 0ef4 07F8015B 		STRB	R5,[R7],#1
 2172 0ef8 3600     		MOVS	R6,R6
 2173 0efa 02D0     		BEQ	FILL2
 2174 0efc A6F10106 		SUB	R6,R6,#1
 2175 0f00 F6E7     		B FILL0
 2176              	FILL2:
 2177 0f02 51F8045B 		_POP
 2178 0f06 FFF785BA 		_NEXT
 2179              	
 2180              	//    PACK$	( b u a -- a )
 2181              	// 	Build a counted word with u characters from b. Null fill.
 2182              	
 2183 0f0a E00E0000 		.word	_FILL
 2184 0f0e 05       	_PACKS:	.byte  5
 2185 0f0f 5041434B 		.ascii "PACK$$"
 2185      2424
 2186 0f15 0000BF   		.p2align 2 	
 2187              	PACKS:
 2188 0f18 404700BF 		_NEST
 2189 0f1c 5D0D0000 		_ADR	ALGND
 2190 0f20 91060000 		_ADR	DUPP
 2191 0f24 39060000 		_ADR	TOR			// strings only on cell boundary
 2192 0f28 B5060000 		_ADR	OVER
 2193 0f2c 55070000 		_ADR	PLUS
 2194 0f30 B1070000 		_ADR	ONEP
 2195 0f34 6D050000 		_DOLIT 	0xFFFFFFFC
 2195      FCFFFFFF 
 2196 0f3c D5060000 		_ADR	ANDD			// count mod cell
 2197 0f40 6D050000 		_DOLIT 	0
 2197      00000000 
 2198 0f48 A1060000 		_ADR	SWAP
 2199 0f4c D5050000 		_ADR	STORE			// null fill cell
 2200 0f50 29060000 		_ADR	RAT
 2201 0f54 A1080000 		_ADR	DDUP
 2202 0f58 F5050000 		_ADR	CSTOR
 2203 0f5c B1070000 		_ADR	ONEP			// save count
 2204 0f60 A1060000 		_ADR	SWAP
 2205 0f64 850E0000 		_ADR	CMOVE
 2206 0f68 15060000 		_ADR	RFROM
 2207 0f6c 1B040000 		_UNNEST   			// move string
 2208              	
 2209              	// **************************************************************************
 2210              	//  Numeric output, single precision
ARM GAS  stm32eforth-fl.s 			page 43


 2211              	
 2212              	//    DIGIT	( u -- c )
 2213              	// 	Convert digit u to a character.
 2214              	
 2215 0f70 0E0F0000 		.word	_PACKS
 2216 0f74 05       	_DIGIT:	.byte  5
 2217 0f75 44494749 		.ascii "DIGIT"
 2217      54
 2218 0f7a 00BF     		.p2align 2 	
 2219              	DIGIT:
 2220 0f7c 404700BF 		_NEST
 2221 0f80 6D050000 		_DOLIT 9
 2221      09000000 
 2222 0f88 B5060000 		_ADR	OVER
 2223 0f8c 4D090000 		_ADR	LESS
 2224 0f90 6D050000 		_DOLIT	7
 2224      07000000 
 2225 0f98 D5060000 		_ADR	ANDD
 2226 0f9c 55070000 		_ADR	PLUS
 2227 0fa0 6D050000 		_DOLIT	'0'
 2227      30000000 
 2228 0fa8 55070000 		_ADR	PLUS 
 2229 0fac 1B040000 		_UNNEST
 2230              	
 2231              	//    EXTRACT	( n base -- n c )
 2232              	// 	Extract the least significant digit from n.
 2233              	
 2234 0fb0 740F0000 		.word	_DIGIT
 2235 0fb4 07       	_EXTRC:	.byte  7
 2236 0fb5 45585452 		.ascii "EXTRACT"
 2236      414354
 2237              		.p2align 2 	
 2238              	EXTRC:
 2239 0fbc 404700BF 		_NEST
 2240 0fc0 6D050000 		_DOLIT 0
 2240      00000000 
 2241 0fc8 A1060000 		_ADR	SWAP
 2242 0fcc 110C0000 		_ADR	UMMOD
 2243 0fd0 A1060000 		_ADR	SWAP
 2244 0fd4 7D0F0000 		_ADR	DIGIT
 2245 0fd8 1B040000 		_UNNEST
 2246              	
 2247              	//    <#	  ( -- )
 2248              	// 	Initiate the numeric output process.
 2249              	
 2250 0fdc B40F0000 		.word	_EXTRC
 2251 0fe0 02       	_BDIGS:	.byte  2
 2252 0fe1 3C23     		.ascii "<#"
 2253 0fe3 00       		.p2align 2 	
 2254              	BDIGS:
 2255 0fe4 404700BF 		_NEST
 2256 0fe8 2D0E0000 		_ADR	PAD
 2257 0fec F50A0000 		_ADR	HLD
 2258 0ff0 D5050000 		_ADR	STORE
 2259 0ff4 1B040000 		_UNNEST
 2260              	
 2261              	//    HOLD	( c -- )
ARM GAS  stm32eforth-fl.s 			page 44


 2262              	// 	Insert a character into the numeric output string.
 2263              	
 2264 0ff8 E00F0000 		.word	_BDIGS
 2265 0ffc 04       	_HOLD:	.byte  4
 2266 0ffd 484F4C44 		.ascii "HOLD"
 2267 1001 0000BF   		.p2align 2 	
 2268              	HOLD:
 2269 1004 404700BF 		_NEST
 2270 1008 F50A0000 		_ADR	HLD
 2271 100c E9050000 		_ADR	AT
 2272 1010 C1070000 		_ADR	ONEM
 2273 1014 91060000 		_ADR	DUPP
 2274 1018 F50A0000 		_ADR	HLD
 2275 101c D5050000 		_ADR	STORE
 2276 1020 F5050000 		_ADR	CSTOR
 2277 1024 1B040000 		_UNNEST
 2278              	
 2279              	//    #	   ( u -- u )
 2280              	// 	Extract one digit from u and append the digit to output string.
 2281              	
 2282 1028 FC0F0000 		.word	_HOLD
 2283 102c 01       	_DIG:	.byte  1
 2284 102d 23       		.ascii "#"
 2285 102e 00BF     		.p2align 2 	
 2286              	DIG:
 2287 1030 404700BF 		_NEST
 2288 1034 850A0000 		_ADR	BASE
 2289 1038 E9050000 		_ADR	AT
 2290 103c BD0F0000 		_ADR	EXTRC
 2291 1040 05100000 		_ADR	HOLD
 2292 1044 1B040000 		_UNNEST
 2293              	
 2294              	//    #S	  ( u -- 0 )
 2295              	// 	Convert u until all digits are added to the output string.
 2296              	
 2297 1048 2C100000 		.word	_DIG
 2298 104c 02       	_DIGS:	.byte  2
 2299 104d 2353     		.ascii "#S"
 2300 104f 00       		.p2align 2 	
 2301              	DIGS:
 2302 1050 404700BF 		_NEST
 2303              	DIGS1:
 2304 1054 31100000 	    _ADR	DIG
 2305 1058 91060000 		_ADR	DUPP
 2306 105c A9050000 		_QBRAN 	DIGS2
 2306      6C100000 
 2307 1064 BB050000 		_BRAN	DIGS1
 2307      54100000 
 2308              	DIGS2:
 2309 106c 1B040000 		  _UNNEST
 2310              	
 2311              	//    SIGN	( n -- )
 2312              	// 	Add a minus sign to the numeric output string.
 2313              	
 2314 1070 4C100000 		.word	_DIGS
 2315 1074 04       	_SIGN:	.byte  4
 2316 1075 5349474E 		.ascii "SIGN"
ARM GAS  stm32eforth-fl.s 			page 45


 2317 1079 0000BF   		.p2align 2 	
 2318              	SIGN:
 2319 107c 404700BF 		_NEST
 2320 1080 C5060000 		_ADR	ZLESS
 2321 1084 A9050000 		_QBRAN	SIGN1
 2321      98100000 
 2322 108c 6D050000 		_DOLIT '-'
 2322      2D000000 
 2323 1094 05100000 		_ADR	HOLD
 2324              	SIGN1:
 2325 1098 1B040000 		  _UNNEST
 2326              	
 2327              	//    #>	  ( w -- b u )
 2328              	// 	Prepare the output word to be TYPE'd.
 2329              	
 2330 109c 74100000 		.word	_SIGN
 2331 10a0 02       	_EDIGS:	.byte  2
 2332 10a1 233E     		.ascii "#>"
 2333 10a3 00       		.p2align 2 	
 2334              	EDIGS:
 2335 10a4 404700BF 		_NEST
 2336 10a8 81060000 		_ADR	DROP
 2337 10ac F50A0000 		_ADR	HLD
 2338 10b0 E9050000 		_ADR	AT
 2339 10b4 2D0E0000 		_ADR	PAD
 2340 10b8 B5060000 		_ADR	OVER
 2341 10bc 65070000 		_ADR	SUBB
 2342 10c0 1B040000 		_UNNEST
 2343              	
 2344              	//    str	 ( n -- b u )
 2345              	// 	Convert a signed integer to a numeric string.
 2346              	
 2347              	// 	.word	_EDIGS
 2348              	// _STRR	.byte  3
 2349              	// 	.ascii "str"
 2350              	// 	.p2align 2 	
 2351              	STRR:
 2352 10c4 404700BF 		_NEST
 2353 10c8 91060000 		_ADR	DUPP
 2354 10cc 39060000 		_ADR	TOR
 2355 10d0 F5080000 		_ADR	ABSS
 2356 10d4 E50F0000 		_ADR	BDIGS
 2357 10d8 51100000 		_ADR	DIGS
 2358 10dc 15060000 		_ADR	RFROM
 2359 10e0 7D100000 		_ADR	SIGN
 2360 10e4 A5100000 		_ADR	EDIGS
 2361 10e8 1B040000 		_UNNEST
 2362              	
 2363              	//    HEX	 ( -- )
 2364              	// 	Use radix 16 as base for numeric conversions.
 2365              	
 2366 10ec A0100000 		.word	_EDIGS
 2367 10f0 03       	_HEX:	.byte  3
 2368 10f1 484558   		.ascii "HEX"
 2369              		.p2align 2 	
 2370              	HEX:
 2371 10f4 404700BF 		_NEST
ARM GAS  stm32eforth-fl.s 			page 46


 2372 10f8 6D050000 		_DOLIT 16
 2372      10000000 
 2373 1100 850A0000 		_ADR	BASE
 2374 1104 D5050000 		_ADR	STORE
 2375 1108 1B040000 		_UNNEST
 2376              	
 2377              	//    DECIMAL	( -- )
 2378              	// 	Use radix 10 as base for numeric conversions.
 2379              	
 2380 110c F0100000 		.word	_HEX
 2381 1110 07       	_DECIM:	.byte  7
 2382 1111 44454349 		.ascii "DECIMAL"
 2382      4D414C
 2383              		.p2align 2 	
 2384              	DECIM:
 2385 1118 404700BF 		_NEST
 2386 111c 6D050000 		_DOLIT 10
 2386      0A000000 
 2387 1124 850A0000 		_ADR	BASE
 2388 1128 D5050000 		_ADR	STORE
 2389 112c 1B040000 		_UNNEST
 2390              	
 2391              	// **************************************************************************
 2392              	//  Numeric input, single precision
 2393              	
 2394              	//    DIGIT?	( c base -- u t )
 2395              	// 	Convert a character to its numeric value. A flag indicates success.
 2396              	
 2397 1130 10110000 		.word	_DECIM
 2398 1134 06       	_DIGTQ:	.byte  6
 2399 1135 44494749 		.ascii "DIGIT?"
 2399      543F
 2400 113b 00       		.p2align 2 	
 2401              	DIGTQ:
 2402 113c 404700BF 		_NEST
 2403 1140 39060000 		_ADR	TOR
 2404 1144 6D050000 		_DOLIT 	'0'
 2404      30000000 
 2405 114c 65070000 		_ADR	SUBB
 2406 1150 6D050000 		_DOLIT 9
 2406      09000000 
 2407 1158 B5060000 		_ADR	OVER
 2408 115c 4D090000 		_ADR	LESS
 2409 1160 A9050000 		_QBRAN	DGTQ1
 2409      88110000 
 2410 1168 6D050000 		_DOLIT 7
 2410      07000000 
 2411 1170 65070000 		_ADR	SUBB
 2412 1174 91060000 		_ADR	DUPP
 2413 1178 6D050000 		_DOLIT	10
 2413      0A000000 
 2414 1180 4D090000 		_ADR	LESS
 2415 1184 E9060000 		_ADR	ORR
 2416              	DGTQ1:
 2417 1188 91060000 		_ADR	DUPP
 2418 118c 15060000 		_ADR	RFROM
 2419 1190 35090000 		_ADR	ULESS
ARM GAS  stm32eforth-fl.s 			page 47


 2420 1194 1B040000 		_UNNEST
 2421              	
 2422              	//    NUMBER?	( a -- n T | a F )
 2423              	// 	Convert a number word to integer. Push a flag on tos.
 2424              	
 2425 1198 34110000 		.word	_DIGTQ
 2426 119c 07       	_NUMBQ:	.byte  7
 2427 119d 4E554D42 		.ascii "NUMBER?"
 2427      45523F
 2428              		.p2align 2 	
 2429              	NUMBQ:
 2430 11a4 404700BF 		_NEST
 2431 11a8 850A0000 		_ADR	BASE
 2432 11ac E9050000 		_ADR	AT
 2433 11b0 39060000 		_ADR	TOR
 2434 11b4 6D050000 		_DOLIT	0
 2434      00000000 
 2435 11bc B5060000 		_ADR	OVER
 2436 11c0 ED090000 		_ADR	COUNT
 2437 11c4 B5060000 		_ADR	OVER
 2438 11c8 09060000 		_ADR	CAT
 2439 11cc 6D050000 		_DOLIT '$'
 2439      24000000 
 2440 11d4 1D090000 		_ADR	EQUAL
 2441 11d8 A9050000 		_QBRAN	NUMQ1
 2441      F4110000 
 2442 11e0 F5100000 		_ADR	HEX
 2443 11e4 A1060000 		_ADR	SWAP
 2444 11e8 B1070000 		_ADR	ONEP
 2445 11ec A1060000 		_ADR	SWAP
 2446 11f0 C1070000 		_ADR	ONEM
 2447              	NUMQ1:
 2448 11f4 B5060000 		_ADR	OVER
 2449 11f8 09060000 		_ADR	CAT
 2450 11fc 6D050000 		_DOLIT	'-'
 2450      2D000000 
 2451 1204 1D090000 		_ADR	EQUAL
 2452 1208 39060000 		_ADR	TOR
 2453 120c A1060000 		_ADR	SWAP
 2454 1210 29060000 		_ADR	RAT
 2455 1214 65070000 		_ADR	SUBB
 2456 1218 A1060000 		_ADR	SWAP
 2457 121c 29060000 		_ADR	RAT
 2458 1220 55070000 		_ADR	PLUS
 2459 1224 65080000 		_ADR	QDUP
 2460 1228 A9050000 		_QBRAN	NUMQ6
 2460      BC120000 
 2461 1230 C1070000 		_ADR	ONEM
 2462 1234 39060000 		_ADR	TOR
 2463              	NUMQ2:
 2464 1238 91060000 		_ADR	DUPP
 2465 123c 39060000 		_ADR	TOR
 2466 1240 09060000 		_ADR	CAT
 2467 1244 850A0000 		_ADR	BASE
 2468 1248 E9050000 		_ADR	AT
 2469 124c 3D110000 		_ADR	DIGTQ
 2470 1250 A9050000 		_QBRAN	NUMQ4
ARM GAS  stm32eforth-fl.s 			page 48


 2470      A0120000 
 2471 1258 A1060000 		_ADR	SWAP
 2472 125c 850A0000 		_ADR	BASE
 2473 1260 E9050000 		_ADR	AT
 2474 1264 75070000 		_ADR	STAR
 2475 1268 55070000 		_ADR	PLUS
 2476 126c 15060000 		_ADR	RFROM
 2477 1270 B1070000 		_ADR	ONEP
 2478 1274 91050000 		_DONXT	NUMQ2
 2478      38120000 
 2479 127c 29060000 		_ADR	RAT
 2480 1280 A1060000 		_ADR	SWAP
 2481 1284 81060000 		_ADR	DROP
 2482 1288 A9050000 		_QBRAN	NUMQ3
 2482      94120000 
 2483 1290 E5080000 		_ADR	NEGAT
 2484              	NUMQ3:
 2485 1294 A1060000 		_ADR	SWAP
 2486 1298 BB050000 		_BRAN	NUMQ5
 2486      B8120000 
 2487              	NUMQ4:
 2488 12a0 15060000 		_ADR	RFROM
 2489 12a4 15060000 		_ADR	RFROM
 2490 12a8 8D080000 		_ADR	DDROP
 2491 12ac 8D080000 		_ADR	DDROP
 2492 12b0 6D050000 		_DOLIT	0
 2492      00000000 
 2493              	NUMQ5:
 2494 12b8 91060000 		_ADR	DUPP
 2495              	NUMQ6:
 2496 12bc 15060000 		_ADR	RFROM
 2497 12c0 8D080000 		_ADR	DDROP
 2498 12c4 15060000 		_ADR	RFROM
 2499 12c8 850A0000 		_ADR	BASE
 2500 12cc D5050000 		_ADR	STORE
 2501 12d0 1B040000 		_UNNEST
 2502              	
 2503              	// **************************************************************************
 2504              	//  Basic I/O
 2505              	
 2506              	//    KEY	 ( -- c )
 2507              	// 	Wait for and return an input character.
 2508              	
 2509 12d4 9C110000 		.word	_NUMBQ
 2510 12d8 03       	_KEY:	.byte  3
 2511 12d9 4B4559   		.ascii "KEY"
 2512              		.p2align 2 	
 2513              	KEY:
 2514 12dc 404700BF 		_NEST
 2515              	KEY1:
 2516 12e0 19050000 		_ADR	QRX
 2517 12e4 A9050000 		_QBRAN	KEY1
 2517      E0120000 
 2518              	// CTRL-C reboot
 2519 12ec 91060000 		_ADR DUPP 
 2520 12f0 6D050000 		_DOLIT	3 
 2520      03000000 
ARM GAS  stm32eforth-fl.s 			page 49


 2521 12f8 FD060000 		_ADR XORR
 2522 12fc A9050000 		_QBRAN	GO_REBOOT 
 2522      08130000 
 2523 1304 1B040000 		_UNNEST
 2524              	GO_REBOOT: 
 2525 1308 31000000 		_ADR REBOOT 
 2526              	
 2527              	//    SPACE	( -- )
 2528              	// 	Send the blank character to the output device.
 2529              	
 2530 130c D8120000 		.word	_KEY
 2531 1310 05       	_SPACE:	.byte  5
 2532 1311 53504143 		.ascii "SPACE"
 2532      45
 2533 1316 00BF     		.p2align 2 	
 2534              	SPACE:
 2535 1318 404700BF 		_NEST
 2536 131c 11080000 		_ADR	BLANK
 2537 1320 49050000 		_ADR	EMIT
 2538 1324 1B040000 		_UNNEST
 2539              	
 2540              	//    SPACES	( +n -- )
 2541              	// 	Send n spaces to the output device.
 2542              	
 2543 1328 10130000 		.word	_SPACE
 2544 132c 06       	_SPACS:	.byte  6
 2545 132d 53504143 		.ascii "SPACES"
 2545      4553
 2546 1333 00       		.p2align 2 	
 2547              	SPACS:
 2548 1334 404700BF 		_NEST
 2549 1338 6D050000 		_DOLIT	0
 2549      00000000 
 2550 1340 7D090000 		_ADR	MAX
 2551 1344 39060000 		_ADR	TOR
 2552 1348 BB050000 		_BRAN	CHAR2
 2552      54130000 
 2553              	CHAR1:
 2554 1350 19130000 		_ADR	SPACE
 2555              	CHAR2:
 2556 1354 91050000 		_DONXT	CHAR1
 2556      50130000 
 2557 135c 1B040000 		_UNNEST
 2558              	
 2559              	//    TYPE	( b u -- )
 2560              	// 	Output u characters from b.
 2561              	
 2562 1360 2C130000 		.word	_SPACS
 2563 1364 04       	_TYPEE:	.byte	4
 2564 1365 54595045 		.ascii "TYPE"
 2565 1369 0000BF   		.p2align 2 	
 2566              	TYPEE:
 2567 136c 404700BF 		_NEST
 2568 1370 39060000 		_ADR  TOR   // ( a+1 -- R: u )
 2569 1374 BB050000 		_BRAN	TYPE2
 2569      88130000 
 2570              	TYPE1:  
ARM GAS  stm32eforth-fl.s 			page 50


 2571 137c ED090000 		_ADR  COUNT
 2572 1380 790D0000 		_ADR TCHAR
 2573 1384 49050000 		_ADR EMIT
 2574              	TYPE2:  
 2575 1388 91050000 		_DONXT	TYPE1
 2575      7C130000 
 2576 1390 81060000 		_ADR	DROP
 2577 1394 1B040000 		_UNNEST
 2578              	
 2579              	//    CR	  ( -- )
 2580              	// 	Output a carriage return and a line feed.
 2581              	
 2582 1398 64130000 		.word	_TYPEE
 2583 139c 02       	_CR:	.byte  2
 2584 139d 4352     		.ascii "CR"
 2585 139f 00       		.p2align 2 	
 2586              	CR:
 2587 13a0 404700BF 		_NEST
 2588 13a4 6D050000 		_DOLIT	CRR
 2588      0D000000 
 2589 13ac 49050000 		_ADR	EMIT
 2590 13b0 6D050000 		_DOLIT	LF
 2590      0A000000 
 2591 13b8 49050000 		_ADR	EMIT
 2592 13bc 1B040000 		_UNNEST
 2593              	
 2594              	//    do_$	( -- a )
 2595              	// 	Return the address of a compiled string.
 2596              	//  adjust return address to skip over it.
 2597              	
 2598              	// 	.word	_CR
 2599              	// _DOSTR	.byte  COMPO+3
 2600              	// 	.ascii "do$$"
 2601              	// 	.p2align 2 	
 2602              	DOSTR:
 2603 13c0 404700BF 		_NEST     
 2604              	/* compiled string address is 2 levels deep */
 2605 13c4 15060000 		_ADR	RFROM	// { -- a1 }
 2606 13c8 15060000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2607 13cc 91060000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2608 13d0 ED090000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2609 13d4 55070000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2610 13d8 5D0D0000 		_ADR	ALGND	//  end of string
 2611              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2612 13dc 39060000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2613 13e0 A1060000 		_ADR	SWAP	//  count tugged
 2614 13e4 39060000 		_ADR	TOR     //  ( -- a2) is string address
 2615 13e8 1B040000 		_UNNEST
 2616              	
 2617              	//    $"|	( -- a )
 2618              	// 	Run time routine compiled by _". Return address of a compiled string.
 2619              	
 2620              	// 	.word	_DOSTR
 2621              	// _STRQP	.byte  COMPO+3
 2622              	// 	.ascii "$\"|"
 2623              	// 	.p2align 2 	
 2624              	STRQP:
ARM GAS  stm32eforth-fl.s 			page 51


 2625 13ec 404700BF 		_NEST
 2626 13f0 C1130000 		_ADR	DOSTR
 2627 13f4 1B040000 		_UNNEST			// force a call to dostr
 2628              	
 2629              	//    .$	( a -- )
 2630              	// 	Run time routine of ." . Output a compiled string.
 2631              	
 2632              	// 	.word	_STRQP
 2633              	// _DOTST	.byte  COMPO+2
 2634              	// 	.ascii ".$$"
 2635              	// 	.p2align 2 	
 2636              	DOTST:
 2637 13f8 404700BF 		_NEST
 2638 13fc ED090000 		_ADR	COUNT // ( -- a+1 c )
 2639 1400 6D130000 		_ADR	TYPEE
 2640 1404 1B040000 		_UNNEST
 2641              	
 2642              	//    ."|	( -- )
 2643              	// 	Run time routine of ." . Output a compiled string.
 2644              	
 2645              	// 	.word	_DOTST
 2646              	// _DOTQP	.byte  COMPO+3
 2647              	// 	.ascii ".""|"
 2648              	// 	.p2align 2 	
 2649              	DOTQP:
 2650 1408 404700BF 		_NEST
 2651 140c C1130000 		_ADR	DOSTR
 2652 1410 F9130000 		_ADR	DOTST
 2653 1414 1B040000 		_UNNEST
 2654              	
 2655              	//    .R	  ( n +n -- )
 2656              	// 	Display an integer in a field of n columns, right justified.
 2657              	
 2658 1418 9C130000 		.word	_CR
 2659 141c 02       	_DOTR:	.byte  2
 2660 141d 2E52     		.ascii ".R"
 2661 141f 00       		.p2align 2 	
 2662              	DOTR:
 2663 1420 404700BF 		_NEST
 2664 1424 39060000 		_ADR	TOR
 2665 1428 C5100000 		_ADR	STRR
 2666 142c 15060000 		_ADR	RFROM
 2667 1430 B5060000 		_ADR	OVER
 2668 1434 65070000 		_ADR	SUBB
 2669 1438 35130000 		_ADR	SPACS
 2670 143c 6D130000 		_ADR	TYPEE
 2671 1440 1B040000 		_UNNEST
 2672              	
 2673              	//    U.R	 ( u +n -- )
 2674              	// 	Display an unsigned integer in n column, right justified.
 2675              	
 2676 1444 1C140000 		.word	_DOTR
 2677 1448 03       	_UDOTR:	.byte  3
 2678 1449 552E52   		.ascii "U.R"
 2679              		.p2align 2 	
 2680              	UDOTR:
 2681 144c 404700BF 		_NEST
ARM GAS  stm32eforth-fl.s 			page 52


 2682 1450 39060000 		_ADR	TOR
 2683 1454 E50F0000 		_ADR	BDIGS
 2684 1458 51100000 		_ADR	DIGS
 2685 145c A5100000 		_ADR	EDIGS
 2686 1460 15060000 		_ADR	RFROM
 2687 1464 B5060000 		_ADR	OVER
 2688 1468 65070000 		_ADR	SUBB
 2689 146c 35130000 		_ADR	SPACS
 2690 1470 6D130000 		_ADR	TYPEE
 2691 1474 1B040000 		_UNNEST
 2692              	
 2693              	//    U.	  ( u -- )
 2694              	// 	Display an unsigned integer in free format.
 2695              	
 2696 1478 48140000 		.word	_UDOTR
 2697 147c 02       	_UDOT:	.byte  2
 2698 147d 552E     		.ascii "U."
 2699 147f 00       		.p2align 2 	
 2700              	UDOT:
 2701 1480 404700BF 		_NEST
 2702 1484 E50F0000 		_ADR	BDIGS
 2703 1488 51100000 		_ADR	DIGS
 2704 148c A5100000 		_ADR	EDIGS
 2705 1490 19130000 		_ADR	SPACE
 2706 1494 6D130000 		_ADR	TYPEE
 2707 1498 1B040000 		_UNNEST
 2708              	
 2709              	//    .	   ( w -- )
 2710              	// 	Display an integer in free format, preceeded by a space.
 2711              	
 2712 149c 7C140000 		.word	_UDOT
 2713 14a0 01       	_DOT:	.byte  1
 2714 14a1 2E       		.ascii "."
 2715 14a2 00BF     		.p2align 2 	
 2716              	DOT:
 2717 14a4 404700BF 		_NEST
 2718 14a8 850A0000 		_ADR	BASE
 2719 14ac E9050000 		_ADR	AT
 2720 14b0 6D050000 		_DOLIT 10
 2720      0A000000 
 2721 14b8 FD060000 		_ADR	XORR			// ?decimal
 2722 14bc A9050000 		_QBRAN	DOT1
 2722      CC140000 
 2723 14c4 81140000 		_ADR	UDOT
 2724 14c8 1B040000 		_UNNEST			// no,display unsigned
 2725              	DOT1:
 2726 14cc C5100000 	    _ADR	STRR
 2727 14d0 19130000 		_ADR	SPACE
 2728 14d4 6D130000 		_ADR	TYPEE
 2729 14d8 1B040000 		_UNNEST			// yes, display signed
 2730              	
 2731              	//    ?	   ( a -- )
 2732              	// 	Display the contents in a memory cell.
 2733              	
 2734 14dc A0140000 		.word	_DOT
 2735 14e0 01       	_QUEST:	.byte  1
 2736 14e1 3F       		.ascii "?"
ARM GAS  stm32eforth-fl.s 			page 53


 2737 14e2 00BF     		.p2align 2 	
 2738              	QUEST:
 2739 14e4 404700BF 		_NEST
 2740 14e8 E9050000 		_ADR	AT
 2741 14ec A5140000 		_ADR	DOT
 2742 14f0 1B040000 		_UNNEST
 2743              	
 2744              	// **************************************************************************
 2745              	//  Parsing
 2746              	
 2747              	//    parse	( b u c -- b u delta //  string> )
 2748              	// 	Scan word delimited by c. Return found string and its offset.
 2749              	
 2750              	// 	.word	_QUEST
 2751              	// _PARS	.byte  5
 2752              	// 	.ascii "parse"
 2753              	// 	.p2align 2 	
 2754              	PARS:
 2755 14f4 404700BF 		_NEST
 2756 14f8 8F0A0000 		_ADR	TEMP
 2757 14fc D5050000 		_ADR	STORE
 2758 1500 B5060000 		_ADR	OVER
 2759 1504 39060000 		_ADR	TOR
 2760 1508 91060000 		_ADR	DUPP
 2761 150c A9050000 		_QBRAN	PARS8
 2761      08160000 
 2762 1514 C1070000 		_ADR	ONEM
 2763 1518 8F0A0000 		_ADR	TEMP
 2764 151c E9050000 		_ADR	AT
 2765 1520 11080000 		_ADR	BLANK
 2766 1524 1D090000 		_ADR	EQUAL
 2767 1528 A9050000 		_QBRAN	PARS3
 2767      7C150000 
 2768 1530 39060000 		_ADR	TOR
 2769              	PARS1:
 2770 1534 11080000 		_ADR	BLANK
 2771 1538 B5060000 		_ADR	OVER
 2772 153c 09060000 		_ADR	CAT			// skip leading blanks 
 2773 1540 65070000 		_ADR	SUBB
 2774 1544 C5060000 		_ADR	ZLESS
 2775 1548 D1080000 		_ADR	INVER
 2776 154c A9050000 		_QBRAN	PARS2
 2776      78150000 
 2777 1554 B1070000 		_ADR	ONEP
 2778 1558 91050000 		_DONXT	PARS1
 2778      34150000 
 2779 1560 15060000 		_ADR	RFROM
 2780 1564 81060000 		_ADR	DROP
 2781 1568 6D050000 		_DOLIT	0
 2781      00000000 
 2782 1570 91060000 		_ADR	DUPP
 2783 1574 1B040000 		_UNNEST
 2784              	PARS2:
 2785 1578 15060000 		_ADR	RFROM
 2786              	PARS3:
 2787 157c B5060000 		_ADR	OVER
 2788 1580 A1060000 		_ADR	SWAP
ARM GAS  stm32eforth-fl.s 			page 54


 2789 1584 39060000 		_ADR	TOR
 2790              	PARS4:
 2791 1588 8F0A0000 		_ADR	TEMP
 2792 158c E9050000 		_ADR	AT
 2793 1590 B5060000 		_ADR	OVER
 2794 1594 09060000 		_ADR	CAT
 2795 1598 65070000 		_ADR	SUBB			// scan for delimiter
 2796 159c 8F0A0000 		_ADR	TEMP
 2797 15a0 E9050000 		_ADR	AT
 2798 15a4 11080000 		_ADR	BLANK
 2799 15a8 1D090000 		_ADR	EQUAL
 2800 15ac A9050000 		_QBRAN	PARS5
 2800      B8150000 
 2801 15b4 C5060000 		_ADR	ZLESS
 2802              	PARS5:
 2803 15b8 A9050000 		_QBRAN	PARS6
 2803      DC150000 
 2804 15c0 B1070000 		_ADR	ONEP
 2805 15c4 91050000 		_DONXT	PARS4
 2805      88150000 
 2806 15cc 91060000 		_ADR	DUPP
 2807 15d0 39060000 		_ADR	TOR
 2808 15d4 BB050000 		_BRAN	PARS7
 2808      F0150000 
 2809              	PARS6:
 2810 15dc 15060000 		_ADR	RFROM
 2811 15e0 81060000 		_ADR	DROP
 2812 15e4 91060000 		_ADR	DUPP
 2813 15e8 B1070000 		_ADR	ONEP
 2814 15ec 39060000 		_ADR	TOR
 2815              	PARS7:
 2816 15f0 B5060000 		_ADR	OVER
 2817 15f4 65070000 		_ADR	SUBB
 2818 15f8 15060000 		_ADR	RFROM
 2819 15fc 15060000 		_ADR	RFROM
 2820 1600 65070000 		_ADR	SUBB
 2821 1604 1B040000 		_UNNEST
 2822              	PARS8:
 2823 1608 B5060000 		_ADR	OVER
 2824 160c 15060000 		_ADR	RFROM
 2825 1610 65070000 		_ADR	SUBB
 2826 1614 1B040000 		_UNNEST
 2827              	
 2828              	//    PARSE	( c -- b u //  string> )
 2829              	// 	Scan input stream and return counted string delimited by c.
 2830              	
 2831 1618 E0140000 		.word	_QUEST
 2832 161c 05       	_PARSE:	.byte  5
 2833 161d 50415253 		.ascii "PARSE"
 2833      45
 2834 1622 00BF     		.p2align 2 	
 2835              	PARSE:
 2836 1624 404700BF 		_NEST
 2837 1628 39060000 		_ADR	TOR
 2838 162c 4D0E0000 		_ADR	TIB
 2839 1630 B90A0000 		_ADR	INN
 2840 1634 E9050000 		_ADR	AT
ARM GAS  stm32eforth-fl.s 			page 55


 2841 1638 55070000 		_ADR	PLUS			// current input buffer pointer
 2842 163c CD0A0000 		_ADR	NTIB
 2843 1640 E9050000 		_ADR	AT
 2844 1644 B90A0000 		_ADR	INN
 2845 1648 E9050000 		_ADR	AT
 2846 164c 65070000 		_ADR	SUBB			// remaining count
 2847 1650 15060000 		_ADR	RFROM
 2848 1654 F5140000 		_ADR	PARS
 2849 1658 B90A0000 		_ADR	INN
 2850 165c A5090000 		_ADR	PSTOR
 2851 1660 1B040000 		_UNNEST
 2852              	
 2853              	//    .(	  ( -- )
 2854              	// 	Output following string up to next ) .
 2855              	
 2856 1664 1C160000 		.word	_PARSE
 2857 1668 82       	_DOTPR:	.byte  IMEDD+2
 2858 1669 2E28     		.ascii ".("
 2859 166b 00       		.p2align 2 	
 2860              	DOTPR:
 2861 166c 404700BF 		_NEST
 2862 1670 6D050000 		_DOLIT	')'
 2862      29000000 
 2863 1678 25160000 		_ADR	PARSE
 2864 167c 6D130000 		_ADR	TYPEE
 2865 1680 1B040000 		_UNNEST
 2866              	
 2867              	//    (	   ( -- )
 2868              	// 	Ignore following string up to next ) . A comment.
 2869              	
 2870 1684 68160000 		.word	_DOTPR
 2871 1688 81       	_PAREN:	.byte  IMEDD+1
 2872 1689 28       		.ascii "("
 2873 168a 00BF     		.p2align 2 	
 2874              	PAREN:
 2875 168c 404700BF 		_NEST
 2876 1690 6D050000 		_DOLIT	')'
 2876      29000000 
 2877 1698 25160000 		_ADR	PARSE
 2878 169c 8D080000 		_ADR	DDROP
 2879 16a0 1B040000 		_UNNEST
 2880              	
 2881              	//    \	   ( -- )
 2882              	// 	Ignore following text till the end of line.
 2883              	
 2884 16a4 88160000 		.word	_PAREN
 2885 16a8 81       	_BKSLA:	.byte  IMEDD+1
 2886 16a9 5C       		.byte	'\\'
 2887 16aa 00BF     		.p2align 2 	
 2888              	BKSLA:
 2889 16ac 404700BF 		_NEST
 2890 16b0 CD0A0000 		_ADR	NTIB
 2891 16b4 E9050000 		_ADR	AT
 2892 16b8 B90A0000 		_ADR	INN
 2893 16bc D5050000 		_ADR	STORE
 2894 16c0 1B040000 		_UNNEST
 2895              	
ARM GAS  stm32eforth-fl.s 			page 56


 2896              	//    CHAR	( -- c )
 2897              	// 	Parse next word and return its first character.
 2898              	
 2899 16c4 A8160000 		.word	_BKSLA
 2900 16c8 04       	_CHAR:	.byte  4
 2901 16c9 43484152 		.ascii "CHAR"
 2902 16cd 0000BF   		.p2align 2 	
 2903              	CHAR:
 2904 16d0 404700BF 		_NEST
 2905 16d4 11080000 		_ADR	BLANK
 2906 16d8 25160000 		_ADR	PARSE
 2907 16dc 81060000 		_ADR	DROP
 2908 16e0 09060000 		_ADR	CAT
 2909 16e4 1B040000 		_UNNEST
 2910              	
 2911              	//    WORD	( c -- a //  string> )
 2912              	// 	Parse a word from input stream and copy it to code dictionary.
 2913              	
 2914 16e8 C8160000 		.word	_CHAR
 2915 16ec 04       	_WORDD:	.byte  4
 2916 16ed 574F5244 		.ascii "WORD"
 2917 16f1 0000BF   		.p2align 2 	
 2918              	WORDD:
 2919 16f4 404700BF 		_NEST
 2920 16f8 25160000 		_ADR	PARSE
 2921 16fc 150E0000 		_ADR	HERE
 2922 1700 F1070000 		_ADR	CELLP
 2923 1704 190F0000 		_ADR	PACKS
 2924 1708 1B040000 		_UNNEST
 2925              	
 2926              	//    TOKEN	( -- a //  string> )
 2927              	// 	Parse a word from input stream and copy it to name dictionary.
 2928              	
 2929 170c EC160000 		.word	_WORDD
 2930 1710 05       	_TOKEN:	.byte  5
 2931 1711 544F4B45 		.ascii "TOKEN"
 2931      4E
 2932 1716 00BF     		.p2align 2 	
 2933              	TOKEN:
 2934 1718 404700BF 		_NEST
 2935 171c 11080000 		_ADR	BLANK
 2936 1720 F5160000 		_ADR	WORDD
 2937 1724 1B040000 		_UNNEST
 2938              	
 2939              	// **************************************************************************
 2940              	//  Dictionary search
 2941              	
 2942              	//    NAME>	( na -- ca )
 2943              	// 	Return a code address given a name address.
 2944              	
 2945 1728 10170000 		.word	_TOKEN
 2946 172c 05       	_NAMET:	.byte  5
 2947 172d 4E414D45 		.ascii "NAME>"
 2947      3E
 2948 1732 00BF     		.p2align 2 	
 2949              	NAMET:
 2950 1734 404700BF 		_NEST
ARM GAS  stm32eforth-fl.s 			page 57


 2951 1738 ED090000 		_ADR	COUNT
 2952 173c 6D050000 		_DOLIT	0x1F
 2952      1F000000 
 2953 1744 D5060000 		_ADR	ANDD
 2954 1748 55070000 		_ADR	PLUS
 2955 174c 5D0D0000 		_ADR	ALGND
 2956 1750 1B040000 		_UNNEST
 2957              	
 2958              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2959              	// 	Compare u bytes in two strings. Return 0 if identical.
 2960              	//
 2961              	//  Picatout 2020-12-01, 
 2962              	//      Because of problem with .align directive that
 2963              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2964              	// 		words  to do a byte by byte comparison. 
 2965              	//
 2966 1754 2C170000 		.word	_NAMET
 2967 1758 05       	_SAMEQ:	.byte  5
 2968 1759 53414D45 		.ascii "SAME?"
 2968      3F
 2969 175e 00BF     		.p2align 2	
 2970              	SAMEQ:
 2971 1760 404700BF 		_NEST
 2972 1764 39060000 		_ADR	TOR
 2973 1768 BB050000 		_BRAN	SAME2
 2973      AC170000 
 2974              	SAME1:
 2975 1770 B5060000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 2976 1774 29060000 		_ADR	RAT   // a1 a2 a1 u 
 2977 1778 55070000 		_ADR	PLUS  // a1 a2 a1+u 
 2978 177c 09060000 		_ADR	CAT	   // a1 a2 c1    		
 2979 1780 B5060000 		_ADR	OVER  // a1 a2 c1 a2 
 2980 1784 29060000 		_ADR	RAT    
 2981 1788 55070000 		_ADR	PLUS    
 2982 178c 09060000 		_ADR	CAT	  // a1 a2 c1 c2
 2983 1790 65070000 		_ADR	SUBB  
 2984 1794 65080000 		_ADR	QDUP
 2985 1798 A9050000 		_QBRAN	SAME2
 2985      AC170000 
 2986 17a0 15060000 		_ADR	RFROM
 2987 17a4 81060000 		_ADR	DROP
 2988 17a8 1B040000 		_UNNEST	// strings not equal
 2989              	SAME2:
 2990 17ac 91050000 		_DONXT	SAME1
 2990      70170000 
 2991 17b4 6D050000 		_DOLIT	0
 2991      00000000 
 2992 17bc 1B040000 		_UNNEST	// strings equal
 2993              	
 2994              	//    find	( a na -- ca na | a F )
 2995              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2996              	
 2997              	//  Picatout 2020-12-01,  
 2998              	//		Modified from original. See comment for word "SAME?" 
 2999              	
 3000              	// 	.word	_SAMEQ
 3001              	// _FIND	.byte  4
ARM GAS  stm32eforth-fl.s 			page 58


 3002              	// 	.ascii "find"
 3003              	// 	.p2align 2 	
 3004              	FIND:
 3005 17c0 404700BF 		_NEST
 3006 17c4 A1060000 		_ADR	SWAP			// na a	
 3007 17c8 ED090000 		_ADR	COUNT			// na a+1 count
 3008 17cc 91060000 		_ADR	DUPP 
 3009 17d0 8F0A0000 		_ADR	TEMP
 3010 17d4 D5050000 		_ADR	STORE			// na a+1 count 
 3011 17d8 39060000 		_ADR  TOR		// na a+1  R: count  
 3012 17dc A1060000 		_ADR	SWAP			// a+1 na
 3013              	FIND1:
 3014 17e0 91060000 		_ADR	DUPP			// a+1 na na
 3015 17e4 A9050000 		_QBRAN	FIND6	// end of vocabulary
 3015      38180000 
 3016 17ec 91060000 		_ADR	DUPP			// a+1 na na
 3017 17f0 09060000 		_ADR	CAT			// a+1 na name1
 3018 17f4 6D050000 		_DOLIT	MASKK
 3018      1FFFFFFF 
 3019 17fc D5060000 		_ADR	ANDD
 3020 1800 29060000 		_ADR	RAT			// a+1 na name1 count 
 3021 1804 FD060000 		_ADR	XORR			// a+1 na,  same length?
 3022 1808 A9050000 		_QBRAN	FIND2
 3022      20180000 
 3023 1810 01080000 		_ADR	CELLM			// a+1 la
 3024 1814 E9050000 		_ADR	AT			// a+1 next_na
 3025 1818 BB050000 		_BRAN	FIND1			// try next word
 3025      E0170000 
 3026              	FIND2:   
 3027 1820 B1070000 		_ADR	ONEP			// a+1 na+1
 3028 1824 8F0A0000 		_ADR	TEMP
 3029 1828 E9050000 		_ADR	AT			// a+1 na+1 count
 3030 182c 61170000 		_ADR	SAMEQ		// a+1 na+1 ? 
 3031              	FIND3:	
 3032 1830 BB050000 		_BRAN	FIND4
 3032      50180000 
 3033              	FIND6:	
 3034 1838 15060000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 3035 183c 81060000 		_ADR	DROP			// a+1 0
 3036 1840 A1060000 		_ADR	SWAP			// 0 a+1
 3037 1844 C1070000 		_ADR	ONEM			// 0 a
 3038 1848 A1060000 		_ADR	SWAP			// a 0 
 3039 184c 1B040000 		_UNNEST			// return without a match
 3040              	FIND4:	
 3041 1850 A9050000 		_QBRAN	FIND5			// a+1 na+1
 3041      6C180000 
 3042 1858 C1070000 		_ADR	ONEM			// a+1 na
 3043 185c 01080000 		_ADR	CELLM			// a+4 la
 3044 1860 E9050000 		_ADR	AT			// a+1 next_na
 3045 1864 BB050000 		_BRAN	FIND1			// compare next name
 3045      E0170000 
 3046              	FIND5:	
 3047 186c 15060000 		_ADR	RFROM			// a+1 na+1 count
 3048 1870 81060000 		_ADR	DROP			// a+1 na+1
 3049 1874 A1060000 		_ADR	SWAP			// na+1 a+1
 3050 1878 81060000 		_ADR	DROP			// na+1
 3051 187c C1070000 		_ADR	ONEM			// na
ARM GAS  stm32eforth-fl.s 			page 59


 3052 1880 91060000 		_ADR	DUPP			// na na
 3053 1884 35170000 		_ADR	NAMET			// na ca
 3054 1888 A1060000 		_ADR	SWAP			// ca na
 3055 188c 1B040000 		_UNNEST			//  return with a match
 3056              	
 3057              	//    NAME?	( a -- ca na | a F )
 3058              	// 	Search all context vocabularies for a string.
 3059              	
 3060 1890 58170000 		.word	_SAMEQ
 3061 1894 05       	_NAMEQ:	.byte  5
 3062 1895 4E414D45 		.ascii "NAME?"
 3062      3F
 3063 189a 00BF     		.p2align 2 	
 3064              	NAMEQ:
 3065 189c 404700BF 		_NEST
 3066 18a0 0D0B0000 		_ADR	CNTXT
 3067 18a4 E9050000 		_ADR	AT
 3068 18a8 C1170000 		_ADR	FIND
 3069 18ac 1B040000 		_UNNEST
 3070              	
 3071              	// **************************************************************************
 3072              	//  Terminal input
 3073              	
 3074              	//    	  ( bot eot cur -- bot eot cur )
 3075              	// 	Backup the cursor by one character.
 3076              	
 3077              	// 	.word	_NAMEQ
 3078              	// _BKSP	.byte  2
 3079              	// 	.ascii "^H"
 3080              	// 	.p2align 2 	
 3081              	BKSP:
 3082 18b0 404700BF 		_NEST
 3083 18b4 39060000 		_ADR	TOR
 3084 18b8 B5060000 		_ADR	OVER
 3085 18bc 15060000 		_ADR	RFROM
 3086 18c0 A1060000 		_ADR	SWAP
 3087 18c4 B5060000 		_ADR	OVER
 3088 18c8 FD060000 		_ADR	XORR
 3089 18cc A9050000 		_QBRAN	BACK1
 3089      F8180000 
 3090 18d4 6D050000 		_DOLIT	BKSPP
 3090      08000000 
 3091 18dc 49050000 		_ADR	TECHO
 3092              	// 	_ADR	ATEXE
 3093 18e0 C1070000 		_ADR	ONEM
 3094 18e4 11080000 		_ADR	BLANK
 3095 18e8 49050000 		_ADR	TECHO
 3096              	// 	_ADR	ATEXE
 3097 18ec 6D050000 		_DOLIT	BKSPP
 3097      08000000 
 3098 18f4 49050000 		_ADR	TECHO
 3099              	// 	_ADR	ATEXE
 3100              	BACK1:
 3101 18f8 1B040000 		  _UNNEST
 3102              	
 3103              	//    TAP	 ( bot eot cur c -- bot eot cur )
 3104              	// 	Accept and echo the key stroke and bump the cursor.
ARM GAS  stm32eforth-fl.s 			page 60


 3105              	
 3106              	// 	.word	_BKSP
 3107              	// _TAP	.byte  3
 3108              	// 	.ascii "TAP"
 3109              	// 	.p2align 2 	
 3110              	TAP:
 3111 18fc 404700BF 		_NEST
 3112 1900 91060000 		_ADR	DUPP
 3113 1904 49050000 		_ADR	TECHO
 3114              	// 	_ADR	ATEXE
 3115 1908 B5060000 		_ADR	OVER
 3116 190c F5050000 		_ADR	CSTOR
 3117 1910 B1070000 		_ADR	ONEP
 3118 1914 1B040000 		_UNNEST
 3119              	
 3120              	//    kTAP	( bot eot cur c -- bot eot cur )
 3121              	// 	Process a key stroke, CR or backspace.
 3122              	
 3123              	// 	.word	_TAP
 3124              	// _KTAP	.byte  4
 3125              	// 	.ascii "kTAP"
 3126              	// 	.p2align 2 	
 3127              	KTAP:
 3128              	TTAP:
 3129 1918 404700BF 		_NEST
 3130 191c 91060000 		_ADR	DUPP
 3131 1920 6D050000 		_DOLIT	CRR
 3131      0D000000 
 3132 1928 FD060000 		_ADR	XORR
 3133 192c A9050000 		_QBRAN  KTAP2
 3133      5C190000 
 3134 1934 6D050000 		_DOLIT	BKSPP
 3134      08000000 
 3135 193c FD060000 		_ADR	XORR
 3136 1940 A9050000 		_QBRAN	KTAP1
 3136      54190000 
 3137 1948 11080000 		_ADR	BLANK
 3138 194c FD180000 		_ADR	TAP
 3139 1950 1B040000 		_UNNEST
 3140              	//	.word	0			// patch
 3141              	KTAP1:
 3142 1954 B1180000 		_ADR	BKSP
 3143 1958 1B040000 		_UNNEST
 3144              	KTAP2:
 3145 195c 81060000 		_ADR	DROP
 3146 1960 A1060000 		_ADR	SWAP
 3147 1964 81060000 		_ADR	DROP
 3148 1968 91060000 		_ADR	DUPP
 3149 196c 1B040000 		_UNNEST
 3150              	
 3151              	//    ACCEPT	( b u -- b u )
 3152              	// 	Accept characters to input buffer. Return with actual count.
 3153              	
 3154 1970 94180000 		.word	_NAMEQ
 3155 1974 06       	_ACCEP:	.byte  6
 3156 1975 41434345 		.ascii "ACCEPT"
 3156      5054
ARM GAS  stm32eforth-fl.s 			page 61


 3157 197b 00       		.p2align 2 	
 3158              	ACCEP:
 3159 197c 404700BF 		_NEST
 3160 1980 B5060000 		_ADR	OVER
 3161 1984 55070000 		_ADR	PLUS
 3162 1988 B5060000 		_ADR	OVER
 3163              	ACCP1:
 3164 198c A1080000 		_ADR	DDUP
 3165 1990 FD060000 		_ADR	XORR
 3166 1994 A9050000 		_QBRAN	ACCP4
 3166      D4190000 
 3167 199c DD120000 		_ADR	KEY
 3168 19a0 91060000 		_ADR	DUPP
 3169 19a4 11080000 		_ADR	BLANK
 3170 19a8 6D050000 		_DOLIT 127
 3170      7F000000 
 3171 19b0 E50B0000 		_ADR	WITHI
 3172 19b4 A9050000 		_QBRAN	ACCP2
 3172      C8190000 
 3173 19bc FD180000 		_ADR	TAP
 3174 19c0 BB050000 		_BRAN	ACCP3
 3174      CC190000 
 3175              	ACCP2:
 3176 19c8 19190000 		_ADR	KTAP
 3177              	// 	_ADR	ATEXE
 3178              	ACCP3:	  
 3179 19cc BB050000 		_BRAN	ACCP1
 3179      8C190000 
 3180              	ACCP4:
 3181 19d4 81060000 		_ADR	DROP
 3182 19d8 B5060000 		_ADR	OVER
 3183 19dc 65070000 		_ADR	SUBB
 3184 19e0 1B040000 		_UNNEST
 3185              	
 3186              	//    QUERY	( -- )
 3187              	// 	Accept input stream to terminal input buffer.
 3188              	
 3189 19e4 74190000 		.word	_ACCEP
 3190 19e8 05       	_QUERY:	.byte  5
 3191 19e9 51554552 		.ascii "QUERY"
 3191      59
 3192 19ee 00BF     		.p2align 2 	
 3193              	QUERY:
 3194 19f0 404700BF 		_NEST
 3195 19f4 4D0E0000 		_ADR	TIB
 3196 19f8 6D050000 		_DOLIT 80
 3196      50000000 
 3197 1a00 7D190000 		_ADR	ACCEP
 3198 1a04 CD0A0000 		_ADR	NTIB
 3199 1a08 D5050000 		_ADR	STORE
 3200 1a0c 81060000 		_ADR	DROP
 3201 1a10 6D050000 		_DOLIT	0
 3201      00000000 
 3202 1a18 B90A0000 		_ADR	INN
 3203 1a1c D5050000 		_ADR	STORE
 3204 1a20 1B040000 		_UNNEST
 3205              	
ARM GAS  stm32eforth-fl.s 			page 62


 3206              	// **************************************************************************
 3207              	//  Error handling
 3208              	
 3209              	//    ABORT	( a -- )
 3210              	// 	Reset data stack and jump to QUIT.
 3211              	
 3212 1a24 E8190000 		.word	_QUERY
 3213 1a28 05       	_ABORT:	.byte  5
 3214 1a29 41424F52 		.ascii "ABORT"
 3214      54
 3215 1a2e 00BF     		.p2align 2 	
 3216              	ABORT:
 3217 1a30 404700BF 		_NEST
 3218 1a34 19130000 		_ADR	SPACE
 3219 1a38 ED090000 		_ADR	COUNT
 3220 1a3c 6D130000 		_ADR	TYPEE
 3221 1a40 6D050000 		_DOLIT	0X3F
 3221      3F000000 
 3222 1a48 49050000 		_ADR	EMIT
 3223 1a4c A1130000 		_ADR	CR
 3224 1a50 C51B0000 		_ADR	PRESE
 3225 1a54 BB050000 		_BRAN	QUIT
 3225      E41B0000 
 3226              	
 3227              	//    _abort"	( f -- )
 3228              	// 	Run time routine of ABORT" . Abort with a message.
 3229              	
 3230              	// 	.word	_ABORT
 3231              	// _ABORQ	.byte  COMPO+6
 3232              	// 	.ascii "abort\""
 3233              	// 	.p2align 2 	
 3234              	ABORQ:
 3235 1a5c 404700BF 		_NEST
 3236 1a60 A9050000 		_QBRAN	ABOR1	// text flag
 3236      801A0000 
 3237 1a68 C1130000 		_ADR	DOSTR
 3238 1a6c ED090000 		_ADR	COUNT
 3239 1a70 6D130000 		_ADR	TYPEE
 3240 1a74 A1130000 		_ADR	CR
 3241 1a78 BB050000 		_BRAN	QUIT
 3241      E41B0000 
 3242              	ABOR1:
 3243 1a80 C1130000 		_ADR	DOSTR
 3244 1a84 81060000 		_ADR	DROP
 3245 1a88 1B040000 		_UNNEST			// drop error
 3246              	
 3247              	// **************************************************************************
 3248              	//  The text interpreter
 3249              	
 3250              	//    $INTERPRET  ( a -- )
 3251              	// 	Interpret a word. If failed, try to convert it to an integer.
 3252              	
 3253 1a8c 281A0000 		.word	_ABORT
 3254 1a90 0A       	_INTER:	.byte  10
 3255 1a91 2424494E 		.ascii "$$INTERPRET"
 3255      54455250 
 3255      524554
ARM GAS  stm32eforth-fl.s 			page 63


 3256              		.p2align 2 	
 3257              	INTER:
 3258 1a9c 404700BF 		_NEST
 3259 1aa0 9D180000 		_ADR	NAMEQ
 3260 1aa4 65080000 		_ADR	QDUP	// ?defined
 3261 1aa8 A9050000 		_QBRAN	INTE1
 3261      DC1A0000 
 3262 1ab0 E9050000 		_ADR	AT
 3263 1ab4 6D050000 		_DOLIT	COMPO
 3263      40000000 
 3264 1abc D5060000 		_ADR	ANDD	// ?compile only lexicon bits
 3265 1ac0 5D1A0000 		_ABORQ	13," compile only"
 3265      0D20636F 
 3265      6D70696C 
 3265      65206F6E 
 3265      6C7900BF 
 3266 1ad4 85050000 		_ADR	EXECU
 3267 1ad8 1B040000 		_UNNEST			// execute defined word
 3268              	INTE1:
 3269 1adc A5110000 		_ADR	NUMBQ
 3270 1ae0 A9050000 		_QBRAN	INTE2
 3270      EC1A0000 
 3271 1ae8 1B040000 		_UNNEST
 3272              	INTE2:
 3273 1aec 311A0000 		_ADR	ABORT	// error
 3274              	
 3275              	//    [	   ( -- )
 3276              	// 	Start the text interpreter.
 3277              	
 3278 1af0 901A0000 		.word	_INTER
 3279 1af4 81       	_LBRAC:	.byte  IMEDD+1
 3280 1af5 5B       		.ascii "["
 3281 1af6 00BF     		.p2align 2 	
 3282              	LBRAC:
 3283 1af8 404700BF 		_NEST
 3284 1afc 6D050000 		_DOLIT	INTER
 3284      9C1A0000 
 3285 1b04 E10A0000 		_ADR	TEVAL
 3286 1b08 D5050000 		_ADR	STORE
 3287 1b0c 1B040000 		_UNNEST
 3288              	
 3289              	//    .OK	 ( -- )
 3290              	// 	Display "ok" only while interpreting.
 3291              	
 3292 1b10 F41A0000 		.word	_LBRAC
 3293 1b14 03       	_DOTOK:	.byte  3
 3294 1b15 2E4F4B   		.ascii ".OK"
 3295              		.p2align 2 	
 3296              	DOTOK:
 3297 1b18 404700BF 		_NEST
 3298 1b1c 6D050000 		_DOLIT	INTER
 3298      9C1A0000 
 3299 1b24 E10A0000 		_ADR	TEVAL
 3300 1b28 E9050000 		_ADR	AT
 3301 1b2c 1D090000 		_ADR	EQUAL
 3302 1b30 A9050000 		_QBRAN	DOTO1
 3302      401B0000 
ARM GAS  stm32eforth-fl.s 			page 64


 3303 1b38 09140000 		_DOTQP	3," ok"
 3303      03206F6B 
 3304              	DOTO1:
 3305 1b40 A1130000 		_ADR	CR
 3306 1b44 1B040000 		_UNNEST
 3307              	
 3308              	//    ?STACK	( -- )
 3309              	// 	Abort if the data stack underflows.
 3310              	
 3311 1b48 141B0000 		.word	_DOTOK
 3312 1b4c 06       	_QSTAC:	.byte  6
 3313 1b4d 3F535441 		.ascii "?STACK"
 3313      434B
 3314 1b53 00       		.p2align 2 	
 3315              	QSTAC:
 3316 1b54 404700BF 		_NEST
 3317 1b58 C50D0000 		_ADR	DEPTH
 3318 1b5c C5060000 		_ADR	ZLESS	// check only for underflow
 3319 1b60 5D1A0000 		_ABORQ	10," underflow"
 3319      0A20756E 
 3319      64657266 
 3319      6C6F7700 
 3320 1b70 1B040000 		_UNNEST
 3321              	
 3322              	//    EVAL	( -- )
 3323              	// 	Interpret the input stream.
 3324              	
 3325 1b74 4C1B0000 		.word	_QSTAC
 3326 1b78 04       	_EVAL:	.byte  4
 3327 1b79 4556414C 		.ascii "EVAL"
 3328 1b7d 0000BF   		.p2align 2 	
 3329              	EVAL:
 3330 1b80 404700BF 		_NEST
 3331              	EVAL1:
 3332 1b84 19170000 	    _ADR	TOKEN
 3333 1b88 91060000 		_ADR	DUPP
 3334 1b8c 09060000 		_ADR	CAT	// ?input stream empty
 3335 1b90 A9050000 		_QBRAN	EVAL2
 3335      AC1B0000 
 3336 1b98 E10A0000 		_ADR	TEVAL
 3337 1b9c 650E0000 		_ADR	ATEXE
 3338 1ba0 551B0000 		_ADR	QSTAC	// evaluate input, check stack
 3339 1ba4 BB050000 		_BRAN	EVAL1
 3339      841B0000 
 3340              	EVAL2:
 3341 1bac 81060000 		_ADR	DROP
 3342 1bb0 191B0000 		_ADR	DOTOK
 3343 1bb4 1B040000 		_UNNEST	// prompt
 3344              	
 3345              	//    PRESET	( -- )
 3346              	// 	Reset data stack pointer and the terminal input buffer.
 3347              	
 3348 1bb8 781B0000 		.word	_EVAL
 3349 1bbc 06       	_PRESE:	.byte  6
 3350 1bbd 50524553 		.ascii "PRESET"
 3350      4554
 3351 1bc3 00       		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 65


 3352              	PRESE:
 3353 1bc4 404700BF 		_NEST 
 3354 1bc8 6D050000 		_DOLIT SPP 
 3354      804E0020 
 3355 1bd0 5D060000 		_ADR SPSTOR 
 3356 1bd4 1B040000 		_UNNEST 
 3357              	
 3358              	//    QUIT	( -- )
 3359              	// 	Reset return stack pointer and start text interpreter.
 3360              	
 3361 1bd8 BC1B0000 		.word	_PRESE
 3362 1bdc 04       	_QUIT:	.byte  4
 3363 1bdd 51554954 		.ascii "QUIT"
 3364 1be1 0000BF   		.p2align 2 	
 3365              	QUIT:
 3366 1be4 6D050000 		_DOLIT RPP 
 3366      804F0020 
 3367 1bec 4D060000 		_ADR RPSTOR 
 3368              	QUIT1:
 3369 1bf0 F91A0000 		_ADR	LBRAC			// start interpretation
 3370              	QUIT2:
 3371 1bf4 F1190000 		_ADR	QUERY			// get input
 3372 1bf8 811B0000 		_ADR	EVAL
 3373 1bfc BB050000 		_BRAN	QUIT2	// continue till error
 3373      F41B0000 
 3374              	
 3375              	/***************************
 3376              	//  Flash memory interface
 3377              	***************************/
 3378              		.p2align 2 
 3379              	unlock:	//  unlock flash memory	
 3380 1c04 DFF81474 		ldr	r7, flash_regs 
 3381 1c08 4FF03406 		mov r6,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 3382 1c0c FE60     		str r6,[r7,#FLASH_SR]
 3383 1c0e 3E69     		ldr r6,[r7,#FLASH_CR]
 3384 1c10 16F0800F 		tst r6,#(1<<7)
 3385 1c14 06D0     		beq 1f 
 3386 1c16 DFF80864 		ldr	r6, flash_regs+4 // key1
 3387 1c1a 7E60     		str	r6, [r7, #FLASH_KEYR]
 3388 1c1c DFF80464 		ldr	r6, flash_regs+8 // key2 
 3389 1c20 7E60     		str	r6, [r7, #FLASH_KEYR]
 3390 1c22 EFE7     		b unlock 
 3391              		/* unlock option registers */
 3392              	/*	
 3393              		ldr	r6, flash_regs+4 
 3394              		str	r6, [r7, #FLASH_OPTKEYR]
 3395              		ldr	r6, flash_regs+8
 3396              		str	r6, [r7, #FLASH_OPTKEYR]
 3397              	*/
 3398 1c24 7047     	1:	bx lr 
 3399              	
 3400 1c26 00BF     		.p2align 2 
 3401              	WAIT_BSY:
 3402 1c28 FC4F     		ldr	r7,flash_regs
 3403              	WAIT1:
 3404 1c2a FE68     		ldr	r6, [r7, #FLASH_SR]	//  FLASH_SR
 3405 1c2c 16F00106 		ands	r6, #0x1	//  BSY
ARM GAS  stm32eforth-fl.s 			page 66


 3406 1c30 FBD1     		bne	WAIT1
 3407 1c32 7047     		_RET 
 3408              		
 3409              		.p2align 2
 3410              	
 3411              	//    ERASE_PAGE	   ( adr -- F )
 3412              	// 	  Erase one page of flash memory.
 3413              	//    stm32f103 page size is 1024 bytes 
 3414              	//    adr is any address inside page to erase 
 3415              	//	  return success|fail flag 
 3416              	
 3417 1c34 DC1B0000 		.word _QUIT  
 3418 1c38 0A       	_EPAGE:	.byte  10
 3419 1c39 45524153 		.ascii "ERASE_PAGE"
 3419      455F5041 
 3419      4745
 3420 1c43 00       		.p2align 2 	
 3421              	
 3422              	EPAGE: 	//  page --
 3423 1c44 F54F     		ldr r7,flash_regs 	 
 3424 1c46 4FF00206 		mov r6,#2 // set PER bit 
 3425 1c4a 3E61     		str r6,[r7,#FLASH_CR]
 3426 1c4c 7D61     		str r5,[r7,#FLASH_AR] // page to erase address 
 3427 1c4e 3E69     		ldr	r6,[r7, #FLASH_CR]	
 3428 1c50 46F04006 		orr	R6,#0x40	//  set STRT bit   
 3429 1c54 3E61     		str	r6,[r7, #FLASH_CR]	//  start erasing
 3430 1c56 00B5FFF7 	 	_CALL	WAIT_BSY // wait until done
 3430      E6FF5DF8 
 3430      04EB
 3431 1c60 FD68     		ldr r5,[r7,#FLASH_SR] // check for errors 
 3432 1c62 05F01405 		and r5,r5,#(5<<2)
 3433 1c66 FEF7D5BB 		_NEXT 
 3434              	
 3435 1c6a 00BF     		.p2align 2 
 3436              	// store 16 bit word
 3437              	// expect flash unlocked
 3438              	// return success|fail flag   
 3439              	HWORD_WRITE: // ( hword address -- f  )
 3440 1c6c EB4F     		ldr r7,flash_regs 
 3441 1c6e 3C69     		ldr	r4, [r7, #FLASH_CR]	//  FLASH_CR
 3442 1c70 4FF00104 		mov r4,#1 // set PG 
 3443 1c74 3C61     		str r4,[r7,#FLASH_CR]
 3444 1c76 2E46     		mov r6,r5 
 3445 1c78 51F8045B 		_POP 
 3446 1c7c 3580     		strh r5,[r6] 
 3447 1c7e 00B5FFF7 		_CALL WAIT_BSY 
 3447      D2FF5DF8 
 3447      04EB
 3448 1c88 FD68     		ldr r5,[r7,#FLASH_SR]
 3449 1c8a 05F01405 		and r5,r5,#(5<<2) 
 3450 1c8e FEF7C1BB 		_NEXT 
 3451              	
 3452 1c92 00BF     		.p2align 2 
 3453              	//    I!	   ( data address -- )
 3454              	// 	   Write one word into flash memory
 3455              	//	   address must even 
 3456              	
ARM GAS  stm32eforth-fl.s 			page 67


 3457 1c94 381C0000 		.word	_EPAGE
 3458 1c98 02       	_ISTOR:	.byte  2
 3459 1c99 4921     		.ascii "I!"
 3460 1c9b 00       		.p2align 2 	
 3461              	ISTOR:	//  data address --
 3462 1c9c 404700BF 		_NEST 
 3463 1ca0 A1080000 		_ADR DDUP 
 3464 1ca4 39060000 		_ADR TOR 
 3465 1ca8 39060000 		_ADR TOR 
 3466 1cac 6D1C0000 		_ADR HWORD_WRITE
 3467 1cb0 A9050000 		_QBRAN 1f 
 3467      CC1C0000 
 3468 1cb8 5D1A0000 	0:	_ABORQ 10, "write failed"
 3468      0A777269 
 3468      74652066 
 3468      61696C65 
 3468      640000BF 
 3469 1ccc 15060000 	1:	_ADR RFROM
 3470 1cd0 6D050000 		_DOLIT 65536 
 3470      00000100 
 3471 1cd8 FD0C0000 		_ADR  SLASH
 3472 1cdc 15060000 		_ADR RFROM 
 3473 1ce0 6D050000 		_DOLIT 2 
 3473      02000000 
 3474 1ce8 55070000 		_ADR PLUS 
 3475 1cec 6D1C0000 		_ADR HWORD_WRITE 
 3476 1cf0 A9050000 		_QBRAN 2f
 3476      001D0000 
 3477 1cf8 BB050000 		_BRAN 0b 
 3477      B81C0000 
 3478 1d00 1B040000 	2:	_UNNEST
 3479              	
 3480              	// IMG_SIZE ( -- u )
 3481              	// return flash pages required to save 
 3482              	// user ram  
 3483 1d04 981C0000 		.word _ISTOR 
 3484 1d08 08       	_IMG_SIZE: .byte 8
 3485 1d09 494D475F 		.ascii "IMG_SIZE" 
 3485      53495A45 
 3486 1d11 0000BF   		.p2align 2
 3487              	IMG_SIZE: 
 3488 1d14 404700BF 		_NEST
 3489 1d18 6D050000 		_DOLIT VARS_END_OFS-IMG_SIGN_OFS 
 3489      38000000 
 3490 1d20 990B0000 		_ADR USER_END 
 3491 1d24 7D0B0000 		_ADR USER_BEGIN 
 3492 1d28 65070000 		_ADR SUBB 
 3493 1d2c 55070000 		_ADR PLUS 
 3494 1d30 6D050000 		_DOLIT PAGE_SIZE 
 3494      00040000 
 3495 1d38 C50C0000 		_ADR SLMOD 
 3496 1d3c A1060000 		_ADR SWAP 
 3497 1d40 A9050000 		_QBRAN 1f 
 3497      4C1D0000 
 3498 1d48 B1070000 		_ADR ONEP
 3499              	1:
 3500 1d4c 1B040000 		_UNNEST  
ARM GAS  stm32eforth-fl.s 			page 68


 3501              	
 3502              	// IMG? (  -- T|F )
 3503              	// check if an image has been saved in FLASH  
 3504 1d50 081D0000 		.word _IMG_SIZE 
 3505 1d54 04       	_IMGQ: .byte 4
 3506 1d55 494D473F 		.ascii "IMG?"
 3507 1d59 0000BF   		.p2align 2
 3508              	IMGQ:
 3509 1d5c 404700BF 		_NEST 
 3510 1d60 B10B0000 		_ADR IMG_ADR 
 3511 1d64 E9050000 		_ADR AT 
 3512 1d68 CD0B0000 		_ADR IMG_SIGN  
 3513 1d6c E9050000 		_ADR AT 
 3514 1d70 FD060000 		_ADR XORR  
 3515 1d74 09090000 		_ADR ZEQUAL
 3516 1d78 1B040000 		_UNNEST
 3517              	
 3518              	// LOAD_IMG (  -- )
 3519              	// Load saved image into RAM. 
 3520 1d7c 541D0000 		.word _IMGQ
 3521 1d80 08       	_LOAD_IMG: .byte 8 
 3522 1d81 4C4F4144 		.ascii "LOAD_IMG" 
 3522      5F494D47 
 3523 1d89 0000BF   		.p2align 2 
 3524              	LOAD_IMG:
 3525 1d8c 404700BF 		_NEST 
 3526 1d90 5D1D0000 		_ADR IMGQ 
 3527 1d94 A9050000 		_QBRAN 1f
 3527      E01D0000 
 3528              	/* copy system variables to RAM */
 3529 1d9c B10B0000 		_ADR IMG_ADR 
 3530 1da0 91060000 		_ADR DUPP 
 3531 1da4 39060000 		_ADR TOR   // save source address 
 3532 1da8 CD0B0000 		_ADR IMG_SIGN 
 3533 1dac 6D050000 		_DOLIT (VARS_END_OFS-IMG_SIGN_OFS) 
 3533      38000000 
 3534 1db4 91060000 		_ADR DUPP 
 3535 1db8 39060000 		_ADR TOR 
 3536 1dbc B50E0000 		_ADR MOVE // ( src dest count -- ) R: src count 
 3537              	/* copy user definitions */
 3538 1dc0 15060000 		_ADR RFROM 
 3539 1dc4 15060000 		_ADR RFROM  
 3540 1dc8 55070000 		_ADR PLUS // source address  
 3541 1dcc 7D0B0000 		_ADR USER_BEGIN // destination address
 3542 1dd0 150E0000 		_ADR HERE  
 3543 1dd4 B5060000 		_ADR OVER 
 3544 1dd8 65070000 		_ADR SUBB  // byte count 
 3545 1ddc B50E0000 		_ADR MOVE
 3546 1de0 1B040000 	1:	_UNNEST  
 3547              	
 3548              	// ERASE_MPG ( u1 u2 -- )
 3549              	// erase many pages 
 3550              	// u1 first page number 
 3551              	// u2 how many pages  
 3552 1de4 801D0000 		.word _LOAD_IMG
 3553 1de8 09       	_ERASE_MPG: .byte 9 
 3554 1de9 45524153 		.ascii "ERASE_MPG"	
ARM GAS  stm32eforth-fl.s 			page 69


 3554      455F4D50 
 3554      47
 3555 1df2 00BF     		.p2align 2 
 3556              	ERASE_MPG:
 3557 1df4 404700BF 		_NEST 
 3558 1df8 39060000 		_ADR TOR 
 3559 1dfc C91E0000 		_ADR PG_TO_ADR 
 3560 1e00 BB050000 		_BRAN 3f 
 3560      401E0000 
 3561              	1:
 3562 1e08 91060000 		_ADR DUPP 
 3563 1e0c 39060000 		_ADR TOR 
 3564 1e10 451C0000 		_ADR EPAGE
 3565 1e14 A9050000 		_QBRAN 2f 
 3565      301E0000 
 3566 1e1c 5D1A0000 		_ABORQ 12,"erase failed"
 3566      0C657261 
 3566      73652066 
 3566      61696C65 
 3566      640000BF 
 3567 1e30 15060000 	2:	_ADR RFROM
 3568 1e34 6D050000 		_DOLIT PAGE_SIZE 
 3568      00040000 
 3569 1e3c 55070000 		_ADR PLUS 
 3570              	3:
 3571 1e40 91050000 		_DONXT 1b 
 3571      081E0000 
 3572 1e48 07040000 		_ADR TPOP 
 3573 1e4c 1B040000 		_UNNEST 
 3574              	
 3575              	// FLSH_WR ( src dest u -- dest+u )
 3576              	// write u words to flash memory 
 3577 1e50 E81D0000 		.word _ERASE_MPG
 3578 1e54 07       	_FLSH_WR: .byte 7 
 3579 1e55 464C5348 		.ascii "FLSH_WR"
 3579      5F5752
 3580              		.p2align  
 3581              	FLSH_WR: 
 3582 1e5c 404700BF 		_NEST 
 3583 1e60 39060000 		_ADR TOR
 3584 1e64 BB050000 		_BRAN 3f  
 3584      8C1E0000 
 3585              	/* write system variables to FLASH */
 3586 1e6c 39060000 	2:  _ADR TOR  // destination address 
 3587 1e70 91060000 		_ADR DUPP 
 3588 1e74 E9050000 		_ADR AT   // get data 
 3589 1e78 29060000 		_ADR RAT  // get destination address 
 3590 1e7c 9D1C0000 		_ADR ISTOR
 3591 1e80 F1070000 		_ADR CELLP  // increment source address 
 3592 1e84 15060000 		_ADR RFROM 
 3593 1e88 F1070000 		_ADR CELLP  // increment dest address 
 3594 1e8c 91050000 	3:	_DONXT 2b
 3594      6C1E0000 
 3595 1e94 39060000 		_ADR TOR 
 3596 1e98 81060000 		_ADR DROP 
 3597 1e9c 15060000 		_ADR RFROM 
 3598 1ea0 1B040000 		_UNNEST 
ARM GAS  stm32eforth-fl.s 			page 70


 3599              	
 3600              	// ADR>PG ( a -- n )
 3601              	// convert address to page number, {0..127} 
 3602 1ea4 541E0000 		.word _FLSH_WR
 3603 1ea8 06       	_ADR_TO_PG: .byte 6 
 3604 1ea9 4144523E 		.ascii "ADR>PG" 
 3604      5047
 3605 1eaf 00       		.p2align 2 
 3606              	ADR_TO_PG: 
 3607 1eb0 4FEA9525 		lsr r5,#10 
 3608 1eb4 05F07F05 		and r5,#127 
 3609 1eb8 FEF7ACBA 		_NEXT  
 3610              	
 3611              	// PG>ADR ( n -- a )
 3612              	// convert page# to address 
 3613 1ebc A81E0000 		.word _ADR_TO_PG
 3614 1ec0 06       	_PG_TO_ADR: .byte 6 
 3615 1ec1 50473E41 		.ascii "PG>ADR" 
 3615      4452
 3616 1ec7 00       		.p2align 2 
 3617              	PG_TO_ADR:
 3618 1ec8 C0F20205 		movt r5,#2
 3619 1ecc 4FEA8525 		lsl r5,#10 
 3620 1ed0 FEF7A0BA 		_NEXT 
 3621              	
 3622              	// ERASE_IMG (  -- )
 3623              	// erase saved image  
 3624 1ed4 C01E0000 		.word _PG_TO_ADR 
 3625 1ed8 09       	_ERASE_IMG: .byte 9
 3626 1ed9 45524153 		.ascii "ERASE_IMG"
 3626      455F494D 
 3626      47
 3627 1ee2 00BF     		.p2align 2
 3628              	ERASE_IMG:
 3629 1ee4 404700BF 		_NEST
 3630 1ee8 B10B0000 		_ADR IMG_ADR 
 3631 1eec 151D0000 		_ADR IMG_SIZE // in page count 
 3632 1ef0 39060000 		_ADR TOR 
 3633 1ef4 BB050000 		_BRAN 2f 
 3633      101F0000 
 3634 1efc 91060000 	1:	_ADR DUPP 
 3635 1f00 451C0000 		_ADR EPAGE
 3636 1f04 6D050000 		_DOLIT PAGE_SIZE
 3636      00040000 
 3637 1f0c 55070000 		_ADR PLUS  
 3638 1f10 91050000 	2:	_DONXT 1b 
 3638      FC1E0000 
 3639 1f18 81060000 		_ADR DROP 
 3640 1f1c 1B040000 		_UNNEST 
 3641              	
 3642              	// SAVE_IMG (  -- )
 3643              	// save in flash memory system variables and user defintitions.
 3644 1f20 D81E0000 		.word _ERASE_IMG	
 3645 1f24 08       	_SAVE_IMG: .byte 8 
 3646 1f25 53415645 		.ascii "SAVE_IMG"
 3646      5F494D47 
 3647 1f2d 0000BF   		.p2align 2
ARM GAS  stm32eforth-fl.s 			page 71


 3648              	SAVE_IMG:
 3649 1f30 404700BF 		_NEST 
 3650 1f34 150E0000 		_ADR HERE 
 3651 1f38 7D0B0000 		_ADR USER_BEGIN
 3652 1f3c 1D090000 		_ADR EQUAL 
 3653 1f40 A9050000 		_QBRAN 1f
 3653      4C1F0000 
 3654 1f48 1B040000 		_UNNEST  
 3655 1f4c 5D1D0000 	1:	_ADR IMGQ 
 3656 1f50 A9050000 		_QBRAN 2f
 3656      5C1F0000 
 3657              	/* delete saved image */
 3658 1f58 E51E0000 		_ADR ERASE_IMG 
 3659              	/* save system variables */
 3660 1f5c CD0B0000 	2:	_ADR IMG_SIGN // src address
 3661 1f60 B10B0000 		_ADR IMG_ADR // dest address
 3662 1f64 6D050000 		_DOLIT (VARS_END_OFS-IMG_SIGN_OFS) 
 3662      38000000 
 3663 1f6c 35080000 		_ADR CELLSL  // word count 
 3664 1f70 5D1E0000 		_ADR FLSH_WR  // ( src dest count -- dest+u )
 3665              	/* write user definitions */
 3666 1f74 7D0B0000 		_ADR USER_BEGIN
 3667 1f78 A1060000 		_ADR SWAP  // ( src dest+ -- )
 3668 1f7c 150E0000 		_ADR HERE   
 3669 1f80 7D0B0000 		_ADR USER_BEGIN 
 3670 1f84 65070000 		_ADR SUBB 
 3671 1f88 35080000 		_ADR CELLSL  // src dest+ count -- 
 3672 1f8c 5D1E0000 		_ADR FLSH_WR  
 3673 1f90 1B040000 	9:	_UNNEST 
 3674              	
 3675              	// TURNKEY ( -- "WORD") 
 3676              	// set autorun program in 'BOOT variable 
 3677              	// and save image 
 3678 1f94 241F0000 		.word _SAVE_IMG
 3679 1f98 07       	_TURNKEY: .byte 7
 3680 1f99 5455524E 		.ascii "TURNKEY"
 3680      4B4559
 3681              		.p2align 2 
 3682              	TURNKEY:
 3683 1fa0 404700BF 		_NEST 
 3684 1fa4 31200000 		_ADR TICK 
 3685 1fa8 6D050000 		_DOLIT 1 
 3685      01000000 
 3686 1fb0 E9060000 		_ADR ORR 		
 3687 1fb4 710A0000 		_ADR TBOOT 
 3688 1fb8 D5050000 		_ADR STORE 
 3689 1fbc 311F0000 		_ADR SAVE_IMG 
 3690 1fc0 1B040000 		_UNNEST
 3691              	
 3692 1fc4 981F0000 		.word _TURNKEY
 3693 1fc8 06       	_FORGET: .byte 6 
 3694 1fc9 464F5247 		.ascii "FORGET"
 3694      4554
 3695 1fcf 00       		.p2align 2
 3696              	FORGET:
 3697 1fd0 404700BF 		_NEST 
 3698 1fd4 19170000 		_ADR TOKEN 
ARM GAS  stm32eforth-fl.s 			page 72


 3699 1fd8 91060000 		_ADR DUPP 
 3700 1fdc A9050000 		_QBRAN 9f 
 3700      18200000 
 3701 1fe4 9D180000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 3702 1fe8 65080000 		_ADR QDUP 
 3703 1fec A9050000 		_QBRAN 8f
 3703      14200000 
 3704 1ff4 01080000 		_ADR CELLM // ( ca la )
 3705 1ff8 91060000 		_ADR DUPP 
 3706 1ffc 210B0000 		_ADR CPP   
 3707 2000 D5050000 		_ADR STORE
 3708 2004 E9050000 		_ADR AT 
 3709 2008 490B0000 		_ADR LAST 
 3710 200c D5050000 		_ADR STORE
 3711 2010 91240000 		_ADR OVERT 
 3712 2014 81060000 	8:  _ADR DROP 
 3713 2018 1B040000 	9:	_UNNEST 
 3714              	
 3715              		.p2align 2 
 3716              	flash_regs:
 3717 201c 00200240 		.word FLASH_BASE_ADR // 0 
 3718 2020 23016745 		.word FLASH_KEY1   // 4 
 3719 2024 AB89EFCD 		.word FLASH_KEY2   // 8
 3720              	
 3721              	// **************************************************************************
 3722              	//  The compiler
 3723              	
 3724              	//    '	   ( -- ca )
 3725              	// 	Search context vocabularies for the next word in input stream.
 3726              	
 3727 2028 C81F0000 		.word	_FORGET
 3728 202c 01       	_TICK:	.byte  1
 3729 202d 27       		.ascii "'"
 3730 202e 00BF     		.p2align 2 	
 3731              	TICK:
 3732 2030 404700BF 		_NEST
 3733 2034 19170000 		_ADR	TOKEN
 3734 2038 9D180000 		_ADR	NAMEQ	// ?defined
 3735 203c A9050000 		_QBRAN	TICK1
 3735      48200000 
 3736 2044 1B040000 		_UNNEST	// yes, push code address
 3737              	TICK1:	
 3738 2048 BB050000 		_BRAN	ABORT	// no, error
 3738      301A0000 
 3739              	
 3740              	//    ALLOT	( n -- )
 3741              	// 	Allocate n bytes to the ram area.
 3742              	
 3743 2050 2C200000 		.word	_TICK
 3744 2054 05       	_ALLOT:	.byte  5
 3745 2055 414C4C4F 		.ascii "ALLOT"
 3745      54
 3746 205a 00BF     		.p2align 2 	
 3747              	ALLOT:
 3748 205c 404700BF 		_NEST
 3749 2060 210B0000 		_ADR	CPP
 3750 2064 A5090000 		_ADR	PSTOR
ARM GAS  stm32eforth-fl.s 			page 73


 3751 2068 1B040000 		_UNNEST			// adjust code pointer
 3752              	
 3753              	//    ,	   ( w -- )
 3754              	// 	Compile an integer into the code dictionary.
 3755              	
 3756 206c 54200000 		.word	_ALLOT
 3757 2070 012C     	_COMMA:	.byte  1,','
 3758 2072 00BF     		.p2align 2 	
 3759              	COMMA:
 3760 2074 404700BF 		_NEST
 3761 2078 150E0000 		_ADR	HERE
 3762 207c 91060000 		_ADR	DUPP
 3763 2080 F1070000 		_ADR	CELLP	// cell boundary
 3764 2084 210B0000 		_ADR	CPP
 3765 2088 D5050000 		_ADR	STORE
 3766 208c D5050000 		_ADR	STORE
 3767 2090 1B040000 		_UNNEST	// adjust code pointer, compile
 3768              		.p2align 2 
 3769              	//    [COMPILE]   ( -- //  string> )
 3770              	// 	Compile the next immediate word into code dictionary.
 3771              	
 3772 2094 70200000 		.word	_COMMA
 3773 2098 89       	_BCOMP:	.byte  IMEDD+9
 3774 2099 5B434F4D 		.ascii "[COMPILE]"
 3774      50494C45 
 3774      5D
 3775 20a2 00BF     		.p2align 2 	
 3776              	BCOMP:
 3777 20a4 404700BF 		_NEST
 3778 20a8 31200000 		_ADR	TICK
 3779 20ac 75200000 		_ADR	COMMA
 3780 20b0 1B040000 		_UNNEST
 3781              	
 3782              	//    COMPILE	( -- )
 3783              	// 	Compile the next address in colon list to code dictionary.
 3784              	
 3785 20b4 98200000 		.word	_BCOMP
 3786 20b8 47       	_COMPI:	.byte  COMPO+7
 3787 20b9 434F4D50 		.ascii "COMPILE"
 3787      494C45
 3788              		.p2align 2 	
 3789              	COMPI:
 3790 20c0 404700BF 		_NEST
 3791 20c4 15060000 		_ADR	RFROM
 3792 20c8 91060000 		_ADR	DUPP 
 3793 20cc E9050000 		_ADR	AT
 3794 20d0 6D050000 		_DOLIT 1 
 3794      01000000 
 3795 20d8 E9060000 		_ADR	ORR 
 3796 20dc 75200000 		_ADR	COMMA 
 3797 20e0 F1070000 		_ADR	CELLP 
 3798 20e4 39060000 		_ADR	TOR 
 3799 20e8 1B040000 		_UNNEST			// adjust return address
 3800              	
 3801              	//    LITERAL	( w -- )
 3802              	// 	Compile tos to code dictionary as an integer literal.
 3803              	
ARM GAS  stm32eforth-fl.s 			page 74


 3804 20ec B8200000 		.word	_COMPI
 3805 20f0 87       	_LITER:	.byte  IMEDD+7
 3806 20f1 4C495445 		.ascii "LITERAL"
 3806      52414C
 3807              		.p2align 2 	
 3808              	LITER:
 3809 20f8 404700BF 		_NEST
 3810 20fc 6D050000 		_COMPI	DOLIT
 3810      6C050000 
 3810      F1240000 
 3811 2108 75200000 		_ADR	COMMA
 3812 210c 1B040000 		_UNNEST
 3813              	
 3814              	//    $,"	( -- )
 3815              	// 	Compile a literal string up to next " .
 3816              	
 3817              	// 	.word	_LITER
 3818              	// _STRCQ	.byte  3
 3819              	// 	.ascii "$$,"""
 3820              	// 	.p2align 2 	
 3821              	STRCQ:
 3822 2110 404700BF 		_NEST
 3823 2114 6D050000 		_DOLIT -4
 3823      FCFFFFFF 
 3824 211c 210B0000 		_ADR	CPP
 3825 2120 A5090000 		_ADR	PSTOR
 3826 2124 6D050000 		_DOLIT	'\"'
 3826      22000000 
 3827 212c F5160000 		_ADR	WORDD			// move word to code dictionary
 3828 2130 ED090000 		_ADR	COUNT
 3829 2134 55070000 		_ADR	PLUS
 3830 2138 5D0D0000 		_ADR	ALGND			// calculate aligned end of string
 3831 213c 210B0000 		_ADR	CPP
 3832 2140 D5050000 		_ADR	STORE
 3833 2144 1B040000 		_UNNEST 			// adjust the code pointer
 3834              	
 3835              	/*******************
 3836              	//  Structures
 3837              	*******************/
 3838              	//    FOR	 ( -- a )
 3839              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3840              	
 3841 2148 F0200000 		.word	_LITER
 3842 214c C3       	_FOR:	.byte  COMPO+IMEDD+3
 3843 214d 464F52   		.ascii "FOR"
 3844              		.p2align 2 	
 3845              	FOR:
 3846 2150 404700BF 		_NEST
 3847 2154 6D050000 		_COMPI	TOR
 3847      38060000 
 3847      F1240000 
 3848 2160 150E0000 		_ADR	HERE
 3849 2164 1B040000 		_UNNEST
 3850              	
 3851              	//    BEGIN	( -- a )
 3852              	// 	Start an infinite or indefinite loop structure.
 3853              	
ARM GAS  stm32eforth-fl.s 			page 75


 3854 2168 4C210000 		.word	_FOR
 3855 216c C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 3856 216d 42454749 		.ascii "BEGIN"
 3856      4E
 3857 2172 00BF     		.p2align 2 	
 3858              	BEGIN:
 3859 2174 404700BF 		_NEST
 3860 2178 150E0000 		_ADR	HERE
 3861 217c 1B040000 		_UNNEST
 3862              		.p2align 2 
 3863              	
 3864              	//    NEXT	( a -- )
 3865              	// 	Terminate a FOR-NEXT loop structure.
 3866 2180 6C210000 		.word	_BEGIN
 3867 2184 C4       	_FNEXT:	.byte  COMPO+IMEDD+4
 3868 2185 4E455854 		.ascii "NEXT"
 3869 2189 0000BF   		.p2align 2 	
 3870              	FNEXT:
 3871 218c 404700BF 		_NEST
 3872 2190 6D050000 		_COMPI	DONXT
 3872      90050000 
 3872      F1240000 
 3873 219c 75200000 		_ADR	COMMA
 3874 21a0 1B040000 		_UNNEST
 3875              	
 3876              	//    UNTIL	( a -- )
 3877              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3878              	
 3879 21a4 84210000 		.word	_FNEXT
 3880 21a8 C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3881 21a9 554E5449 		.ascii "UNTIL"
 3881      4C
 3882 21ae 00BF     		.p2align 2 	
 3883              	UNTIL:
 3884 21b0 404700BF 		_NEST
 3885 21b4 6D050000 		_COMPI	QBRAN
 3885      A8050000 
 3885      F1240000 
 3886 21c0 75200000 		_ADR	COMMA
 3887 21c4 1B040000 		_UNNEST
 3888              	
 3889              	//    AGAIN	( a -- )
 3890              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3891              	
 3892 21c8 A8210000 		.word	_UNTIL
 3893 21cc C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3894 21cd 41474149 		.ascii "AGAIN"
 3894      4E
 3895 21d2 00BF     		.p2align 2 	
 3896              	AGAIN:
 3897 21d4 404700BF 		_NEST
 3898 21d8 6D050000 		_COMPI	BRAN
 3898      BA050000 
 3898      F1240000 
 3899 21e4 75200000 		_ADR	COMMA
 3900 21e8 1B040000 		_UNNEST
 3901              	
ARM GAS  stm32eforth-fl.s 			page 76


 3902              	//    IF	  ( -- A )
 3903              	// 	Begin a conditional branch structure.
 3904              	
 3905 21ec CC210000 		.word	_AGAIN
 3906 21f0 C2       	_IFF:	.byte  COMPO+IMEDD+2
 3907 21f1 4946     		.ascii "IF"
 3908 21f3 00       		.p2align 2 	
 3909              	IFF:
 3910 21f4 404700BF 		_NEST
 3911 21f8 6D050000 		_COMPI	QBRAN
 3911      A8050000 
 3911      F1240000 
 3912 2204 150E0000 		_ADR	HERE
 3913 2208 6D050000 		_DOLIT	4
 3913      04000000 
 3914 2210 210B0000 		_ADR	CPP
 3915 2214 A5090000 		_ADR	PSTOR
 3916 2218 1B040000 		_UNNEST
 3917              	
 3918              	//    AHEAD	( -- A )
 3919              	// 	Compile a forward branch instruction.
 3920              	
 3921 221c F0210000 		.word	_IFF
 3922 2220 C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 3923 2221 41484541 		.ascii "AHEAD"
 3923      44
 3924 2226 00BF     		.p2align 2 	
 3925              	AHEAD:
 3926 2228 404700BF 		_NEST
 3927 222c 6D050000 		_COMPI	BRAN
 3927      BA050000 
 3927      F1240000 
 3928 2238 150E0000 		_ADR	HERE
 3929 223c 6D050000 		_DOLIT	4
 3929      04000000 
 3930 2244 210B0000 		_ADR	CPP
 3931 2248 A5090000 		_ADR	PSTOR
 3932 224c 1B040000 		_UNNEST
 3933              	
 3934              	//    REPEAT	( A a -- )
 3935              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3936              	
 3937 2250 20220000 		.word	_AHEAD
 3938 2254 C6       	_REPEA:	.byte  COMPO+IMEDD+6
 3939 2255 52455045 		.ascii "REPEAT"
 3939      4154
 3940 225b 00       		.p2align 2 	
 3941              	REPEA:
 3942 225c 404700BF 		_NEST
 3943 2260 D5210000 		_ADR	AGAIN
 3944 2264 150E0000 		_ADR	HERE
 3945 2268 A1060000 		_ADR	SWAP
 3946 226c D5050000 		_ADR	STORE
 3947 2270 1B040000 		_UNNEST
 3948              	
 3949              	//    THEN	( A -- )
 3950              	// 	Terminate a conditional branch structure.
ARM GAS  stm32eforth-fl.s 			page 77


 3951              	
 3952 2274 54220000 		.word	_REPEA
 3953 2278 C4       	_THENN:	.byte  COMPO+IMEDD+4
 3954 2279 5448454E 		.ascii "THEN"
 3955 227d 0000BF   		.p2align 2 	
 3956              	THENN:
 3957 2280 404700BF 		_NEST
 3958 2284 150E0000 		_ADR	HERE
 3959 2288 A1060000 		_ADR	SWAP
 3960 228c D5050000 		_ADR	STORE
 3961 2290 1B040000 		_UNNEST
 3962              	
 3963              	//    AFT	 ( a -- a A )
 3964              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3965              	
 3966 2294 78220000 		.word	_THENN
 3967 2298 C3       	_AFT:	.byte  COMPO+IMEDD+3
 3968 2299 414654   		.ascii "AFT"
 3969              		.p2align 2 	
 3970              	AFT:
 3971 229c 404700BF 		_NEST
 3972 22a0 81060000 		_ADR	DROP
 3973 22a4 29220000 		_ADR	AHEAD
 3974 22a8 75210000 		_ADR	BEGIN
 3975 22ac A1060000 		_ADR	SWAP
 3976 22b0 1B040000 		_UNNEST
 3977              	
 3978              	//    ELSE	( A -- A )
 3979              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3980              	
 3981 22b4 98220000 		.word	_AFT
 3982 22b8 C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 3983 22b9 454C5345 		.ascii "ELSE"
 3984 22bd 0000BF   		.p2align 2 	
 3985              	ELSEE:
 3986 22c0 404700BF 		_NEST
 3987 22c4 29220000 		_ADR	AHEAD
 3988 22c8 A1060000 		_ADR	SWAP
 3989 22cc 81220000 		_ADR	THENN
 3990 22d0 1B040000 		_UNNEST
 3991              	
 3992              	//    WHILE	( a -- A a )
 3993              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3994              	
 3995 22d4 B8220000 		.word	_ELSEE
 3996 22d8 C5       	_WHILE:	.byte  COMPO+IMEDD+5
 3997 22d9 5748494C 		.ascii "WHILE"
 3997      45
 3998 22de 00BF     		.p2align 2 	
 3999              	WHILE:
 4000 22e0 404700BF 		_NEST
 4001 22e4 F5210000 		_ADR	IFF
 4002 22e8 A1060000 		_ADR	SWAP
 4003 22ec 1B040000 		_UNNEST
 4004              	
 4005              	//    ABORT"	( -- //  string> )
 4006              	// 	Conditional abort with an error message.
ARM GAS  stm32eforth-fl.s 			page 78


 4007              	
 4008 22f0 D8220000 		.word	_WHILE
 4009 22f4 86       	_ABRTQ:	.byte  IMEDD+6
 4010 22f5 41424F52 		.ascii "ABORT\""
 4010      5422
 4011 22fb 00       		.p2align 2 	
 4012              	ABRTQ:
 4013 22fc 404700BF 		_NEST
 4014 2300 6D050000 		_COMPI	ABORQ
 4014      5C1A0000 
 4014      F1240000 
 4015 230c 11210000 		_ADR	STRCQ
 4016 2310 1B040000 		_UNNEST
 4017              	
 4018              	//    $"	( -- //  string> )
 4019              	// 	Compile an inlineDCB literal.
 4020              	
 4021 2314 F4220000 		.word	_ABRTQ
 4022 2318 82       	_STRQ:	.byte  IMEDD+2
 4023 2319 2422     		.byte	'$','"'
 4024 231b 00       		.p2align 2 	
 4025              	STRQ:
 4026 231c 404700BF 		_NEST
 4027 2320 6D050000 		_COMPI	STRQP
 4027      EC130000 
 4027      F1240000 
 4028 232c 11210000 		_ADR	STRCQ
 4029 2330 1B040000 		_UNNEST
 4030              	
 4031              	//    ."	( -- //  string> )
 4032              	// 	Compile an inline word  literal to be typed out at run time.
 4033              	
 4034 2334 18230000 		.word	_STRQ
 4035 2338 C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 4036 2339 2E22     		.byte	'.','"'
 4037 233b 00       		.p2align 2 	
 4038              	DOTQ:
 4039 233c 404700BF 		_NEST
 4040 2340 6D050000 		_COMPI	DOTQP
 4040      08140000 
 4040      F1240000 
 4041 234c 11210000 		_ADR	STRCQ
 4042 2350 1B040000 		_UNNEST
 4043              	
 4044              	// **************************************************************************
 4045              	//  Name compiler
 4046              	
 4047              	//    ?UNIQUE	( a -- a )
 4048              	// 	Display a warning message if the word already exists.
 4049              	
 4050 2354 38230000 		.word	_DOTQ
 4051 2358 07       	_UNIQU:	.byte  7
 4052 2359 3F554E49 		.ascii "?UNIQUE"
 4052      515545
 4053              		.p2align 2 	
 4054              	UNIQU:
 4055 2360 404700BF 		_NEST
ARM GAS  stm32eforth-fl.s 			page 79


 4056 2364 91060000 		_ADR	DUPP
 4057 2368 9D180000 		_ADR	NAMEQ			// ?name exists
 4058 236c A9050000 		_QBRAN	UNIQ1	// redefinitions are OK
 4058      8C230000 
 4059 2374 09140000 		_DOTQP	7," reDef "		// but warn the user
 4059      07207265 
 4059      44656620 
 4060 2380 B5060000 		_ADR	OVER
 4061 2384 ED090000 		_ADR	COUNT
 4062 2388 6D130000 		_ADR	TYPEE			// just in case its not planned
 4063              	UNIQ1:
 4064 238c 81060000 		_ADR	DROP
 4065 2390 1B040000 		_UNNEST
 4066              	
 4067              	//    $,n	 ( na -- )
 4068              	// 	Build a new dictionary name using the data at na.
 4069              	
 4070              	// 	.word	_UNIQU
 4071              	// _SNAME	.byte  3
 4072              	// 	.ascii "$$,n"
 4073              	// 	.p2align 2 	
 4074              	SNAME:
 4075 2394 404700BF 		_NEST
 4076 2398 91060000 		_ADR	DUPP			//  na na
 4077 239c 09060000 		_ADR	CAT			//  ?null input
 4078 23a0 A9050000 		_QBRAN	SNAM1
 4078      DC230000 
 4079 23a8 61230000 		_ADR	UNIQU			//  na
 4080 23ac 490B0000 		_ADR	LAST			//  na last
 4081 23b0 E9050000 		_ADR	AT			//  na la
 4082 23b4 75200000 		_ADR	COMMA			//  na
 4083 23b8 91060000 		_ADR	DUPP			//  na na
 4084 23bc 490B0000 		_ADR	LAST			//  na na last
 4085 23c0 D5050000 		_ADR	STORE			//  na , save na for vocabulary link
 4086 23c4 ED090000 		_ADR	COUNT			//  na+1 count
 4087 23c8 55070000 		_ADR	PLUS			//  na+1+count
 4088 23cc 5D0D0000 		_ADR	ALGND			//  word boundary
 4089 23d0 210B0000 		_ADR	CPP
 4090 23d4 D5050000 		_ADR	STORE			//  top of dictionary now
 4091 23d8 1B040000 		_UNNEST
 4092              	SNAM1:
 4093 23dc ED130000 		_ADR	STRQP
 4094 23e0 07       		.byte	7
 4095 23e1 206E616D 		.ascii " name? "
 4095      653F20
 4096 23e8 BB050000 		_BRAN	ABORT
 4096      301A0000 
 4097              	
 4098              	//    $COMPILE	( a -- )
 4099              	// 	Compile next word to code dictionary as a token or literal.
 4100              	
 4101 23f0 58230000 		.word	_UNIQU
 4102 23f4 08       	_SCOMP:	.byte  8
 4103 23f5 2424434F 		.ascii "$$COMPILE"
 4103      4D50494C 
 4103      45
 4104 23fe 00BF     		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 80


 4105              	SCOMP:
 4106 2400 404700BF 		_NEST
 4107 2404 9D180000 		_ADR	NAMEQ
 4108 2408 65080000 		_ADR	QDUP	// defined?
 4109 240c A9050000 		_QBRAN	SCOM2
 4109      3C240000 
 4110 2414 E9050000 		_ADR	AT
 4111 2418 6D050000 		_DOLIT	IMEDD
 4111      80000000 
 4112 2420 D5060000 		_ADR	ANDD	// immediate?
 4113 2424 A9050000 		_QBRAN	SCOM1
 4113      34240000 
 4114 242c 85050000 		_ADR	EXECU
 4115 2430 1B040000 		_UNNEST			// it's immediate, execute
 4116              	SCOM1:
 4117 2434 F1240000 		_ADR	CALLC			// it's not immediate, compile
 4118 2438 1B040000 		_UNNEST	
 4119              	SCOM2:
 4120 243c A5110000 		_ADR	NUMBQ
 4121 2440 A9050000 		_QBRAN	SCOM3
 4121      50240000 
 4122 2448 F9200000 		_ADR	LITER
 4123 244c 1B040000 		_UNNEST			// compile number as integer
 4124              	SCOM3: // compilation abort 
 4125 2450 59240000 		_ADR COLON_ABORT 
 4126 2454 311A0000 		_ADR	ABORT			// error
 4127              	
 4128              	// before aborting a compilation 
 4129              	// reset HERE and LAST
 4130              	// to previous values. 
 4131              	COLON_ABORT:
 4132 2458 404700BF 		_NEST 
 4133 245c 490B0000 		_ADR LAST 
 4134 2460 E9050000 		_ADR AT 
 4135 2464 01080000 		_ADR CELLM 
 4136 2468 91060000 		_ADR DUPP 
 4137 246c 210B0000 		_ADR CPP  
 4138 2470 D5050000 		_ADR STORE 
 4139 2474 E9050000 		_ADR AT 
 4140 2478 490B0000 		_ADR LAST 
 4141 247c D5050000 		_ADR STORE 
 4142 2480 1B040000 		_UNNEST 
 4143              	
 4144              	//    OVERT	( -- )
 4145              	// 	Link a new word into the current vocabulary.
 4146              	
 4147 2484 F4230000 		.word	_SCOMP
 4148 2488 05       	_OVERT:	.byte  5
 4149 2489 4F564552 		.ascii "OVERT"
 4149      54
 4150 248e 00BF     		.p2align 2 	
 4151              	OVERT:
 4152 2490 404700BF 		_NEST
 4153 2494 490B0000 		_ADR	LAST
 4154 2498 E9050000 		_ADR	AT
 4155 249c 0D0B0000 		_ADR	CNTXT
 4156 24a0 D5050000 		_ADR	STORE
ARM GAS  stm32eforth-fl.s 			page 81


 4157 24a4 1B040000 		_UNNEST
 4158              	
 4159              	//    ; 	   ( -- )
 4160              	// 	Terminate a colon definition.
 4161              	
 4162 24a8 88240000 		.word	_OVERT
 4163 24ac C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 4164 24ad 3B       		.ascii ";"
 4165 24ae 00BF     		.p2align 2 	
 4166              	SEMIS:
 4167 24b0 404700BF 		_NEST
 4168 24b4 6D050000 		_DOLIT	UNNEST
 4168      1A040000 
 4169 24bc B1070000 		_ADR	ONEP 
 4170 24c0 75200000 		_ADR	COMMA
 4171 24c4 F91A0000 		_ADR	LBRAC
 4172 24c8 91240000 		_ADR	OVERT
 4173 24cc 1B040000 		_UNNEST
 4174              	
 4175              	//    ]	   ( -- )
 4176              	// 	Start compiling the words in the input stream.
 4177              	
 4178 24d0 AC240000 		.word	_SEMIS
 4179 24d4 01       	_RBRAC:	.byte  1
 4180 24d5 5D       		.ascii "]"
 4181 24d6 00BF     		.p2align 2 	
 4182              	RBRAC:
 4183 24d8 404700BF 		_NEST
 4184 24dc 6D050000 		_DOLIT	SCOMP
 4184      00240000 
 4185 24e4 E10A0000 		_ADR	TEVAL
 4186 24e8 D5050000 		_ADR	STORE
 4187 24ec 1B040000 		_UNNEST
 4188              	
 4189              	//    BL.W	( ca -- )
 4190              	// 	Assemble a branch-link long instruction to ca.
 4191              	// 	BL.W is split into 2 16 bit instructions with 11 bit address fields.
 4192              	
 4193              	// 	.word	_RBRAC
 4194              	// _CALLC	.byte  5
 4195              	// 	.ascii "call,"
 4196              	// 	.p2align 2 	
 4197              	CALLC:
 4198 24f0 404700BF 		_NEST
 4199 24f4 6D050000 		_DOLIT 1 
 4199      01000000 
 4200 24fc E9060000 		_ADR ORR 
 4201 2500 75200000 		_ADR COMMA  
 4202 2504 1B040000 		_UNNEST 
 4203              	
 4204              	
 4205              	// 	:	( -- //  string> )
 4206              	// 	Start a new colon definition using next word as its name.
 4207              	
 4208 2508 D4240000 		.word	_RBRAC
 4209 250c 01       	_COLON:	.byte  1
 4210 250d 3A       		.ascii ":"
ARM GAS  stm32eforth-fl.s 			page 82


 4211 250e 00BF     		.p2align 2 	
 4212              	COLON:
 4213 2510 404700BF 		_NEST
 4214 2514 19170000 		_ADR	TOKEN
 4215 2518 95230000 		_ADR	SNAME
 4216 251c 21040000 		_ADR	COMPI_NEST 
 4217 2520 D9240000 		_ADR	RBRAC
 4218 2524 1B040000 		_UNNEST
 4219              	
 4220              	//    IMMEDIATE   ( -- )
 4221              	// 	Make the last compiled word an immediate word.
 4222              	
 4223 2528 0C250000 		.word	_COLON
 4224 252c 09       	_IMMED:	.byte  9
 4225 252d 494D4D45 		.ascii "IMMEDIATE"
 4225      44494154 
 4225      45
 4226 2536 00BF     		.p2align 2 	
 4227              	IMMED:
 4228 2538 404700BF 		_NEST
 4229 253c 6D050000 		_DOLIT	IMEDD
 4229      80000000 
 4230 2544 490B0000 		_ADR	LAST
 4231 2548 E9050000 		_ADR	AT
 4232 254c E9050000 		_ADR	AT
 4233 2550 E9060000 		_ADR	ORR
 4234 2554 490B0000 		_ADR	LAST
 4235 2558 E9050000 		_ADR	AT
 4236 255c D5050000 		_ADR	STORE
 4237 2560 1B040000 		_UNNEST
 4238              	
 4239              	// **************************************************************************
 4240              	//  Defining words
 4241              	
 4242              	//    CONSTANT	( u -- //  string> )
 4243              	// 	Compile a new constant.
 4244              	
 4245 2564 2C250000 		.word	_IMMED
 4246 2568 08       	_CONST:	.byte  8
 4247 2569 434F4E53 		.ascii "CONSTANT"
 4247      54414E54 
 4248 2571 0000BF   		.p2align 2 	
 4249              	CONST:
 4250 2574 404700BF 		_NEST 
 4251 2578 19170000 		_ADR	TOKEN
 4252 257c 95230000 		_ADR	SNAME
 4253 2580 91240000 		_ADR	OVERT
 4254 2584 21040000 		_ADR	COMPI_NEST
 4255 2588 6D050000 		_DOLIT	DOCON
 4255      200A0000 
 4256 2590 F1240000 		_ADR	CALLC
 4257 2594 75200000 		_ADR	COMMA
 4258 2598 6D050000 		_DOLIT	UNNEST 
 4258      1A040000 
 4259 25a0 F1240000 		_ADR	CALLC  
 4260 25a4 1B040000 		_UNNEST
 4261              	
ARM GAS  stm32eforth-fl.s 			page 83


 4262              	//    CREATE	( -- //  string> )
 4263              	// 	Compile a new array entry without allocating code space.
 4264              	
 4265 25a8 68250000 		.word	_CONST
 4266 25ac 06       	_CREAT:	.byte  6
 4267 25ad 43524541 		.ascii "CREATE"
 4267      5445
 4268 25b3 00       		.p2align 2 	
 4269              	CREAT:
 4270 25b4 404700BF 		_NEST 
 4271 25b8 19170000 		_ADR	TOKEN
 4272 25bc 95230000 		_ADR	SNAME
 4273 25c0 91240000 		_ADR	OVERT
 4274 25c4 21040000 		_ADR	COMPI_NEST 
 4275 25c8 6D050000 		_DOLIT	DOVAR
 4275      140A0000 
 4276 25d0 F1240000 		_ADR	CALLC
 4277 25d4 1B040000 		_UNNEST
 4278              	
 4279              	//    VARIABLE	( -- //  string> )
 4280              	// 	Compile a new variable initialized to 0.
 4281              	
 4282 25d8 AC250000 		.word	_CREAT
 4283 25dc 08       	_VARIA:	.byte  8
 4284 25dd 56415249 		.ascii "VARIABLE"
 4284      41424C45 
 4285 25e5 0000BF   		.p2align 2 	
 4286              	VARIA:
 4287 25e8 404700BF 		_NEST
 4288 25ec B5250000 		_ADR	CREAT
 4289 25f0 6D050000 		_DOLIT	0
 4289      00000000 
 4290 25f8 75200000 		_ADR	COMMA
 4291 25fc 6D050000 		_DOLIT UNNEST
 4291      1A040000 
 4292 2604 F1240000 		_ADR	CALLC  
 4293 2608 1B040000 		_UNNEST
 4294              	
 4295              	// **************************************************************************
 4296              	//  Tools
 4297              	
 4298              	//  TRACE ( f -- )
 4299              	// enable or disable tracing 
 4300 260c DC250000 		.word _VARIA 
 4301 2610 05       	_TRACE: .byte 5
 4302 2611 54524143 		.ascii "TRACE"
 4302      45
 4303 2616 00BF     		.p2align 2
 4304              	TRACE: 
 4305 2618 404700BF 		_NEST 
 4306 261c 610B0000 		_ADR FTRACE 
 4307 2620 D5050000 		_ADR STORE 
 4308 2624 1B040000 		_UNNEST 
 4309              	
 4310              	// TR_PRINT ( ca -- )
 4311              	// print name from ca  
 4312 2628 10260000 		.word _TRACE 
ARM GAS  stm32eforth-fl.s 			page 84


 4313 262c 07       	_DBG_PRT: .byte 7 
 4314 262d 4442475F 		.ascii "DBG_PRT"
 4314      505254
 4315              	DBG_PRT:
 4316 2634 404700BF 		_NEST 
 4317 2638 65270000 		_ADR TNAME 
 4318 263c 65080000 		_ADR QDUP 
 4319 2640 A9050000 		_QBRAN 1f 
 4319      54260000 
 4320 2648 ED090000 		_ADR COUNT 
 4321 264c 6D130000 		_ADR TYPEE 
 4322 2650 A1130000 		_ADR CR
 4323              	1:  	
 4324 2654 1B040000 		_UNNEST 
 4325              	
 4326              	//    dm+	 ( a u -- a )
 4327              	// 	Dump u bytes from , leaving a+u on the stack.
 4328              	
 4329              	// 	.word	_TRACE
 4330              	// _DMP	.byte  3
 4331              	// 	.ascii "dm+"
 4332              	// 	.p2align 2 	
 4333              	DMP:
 4334 2658 404700BF 		_NEST
 4335 265c B5060000 		_ADR	OVER
 4336 2660 6D050000 		_DOLIT	4
 4336      04000000 
 4337 2668 4D140000 		_ADR	UDOTR			// display address
 4338 266c 19130000 		_ADR	SPACE
 4339 2670 39060000 		_ADR	TOR			// start count down loop
 4340 2674 BB050000 		_BRAN	PDUM2			// skip first pass
 4340      94260000 
 4341              	PDUM1:
 4342 267c 91060000 	  _ADR	DUPP
 4343 2680 09060000 		_ADR	CAT
 4344 2684 6D050000 		_DOLIT	3
 4344      03000000 
 4345 268c 4D140000 		_ADR	UDOTR			// display numeric data
 4346 2690 B1070000 		_ADR	ONEP			// increment address
 4347              	PDUM2:
 4348 2694 91050000 	  _ADR	DONXT
 4349 2698 7C260000 		.word	PDUM1	// loop till done
 4350 269c 1B040000 		_UNNEST
 4351              		.p2align 2 
 4352              	//    DUMP	( a u -- )
 4353              	// 	Dump u bytes from a, in a formatted manner.
 4354              	
 4355 26a0 DC250000 		.word	_VARIA
 4356 26a4 04       	_DUMP:	.byte  4
 4357 26a5 44554D50 		.ascii "DUMP"
 4358 26a9 0000BF   		.p2align 2 	
 4359              	DUMP:
 4360 26ac 404700BF 		_NEST
 4361 26b0 850A0000 		_ADR	BASE
 4362 26b4 E9050000 		_ADR	AT
 4363 26b8 39060000 		_ADR	TOR
 4364 26bc F5100000 		_ADR	HEX			// save radix,set hex
ARM GAS  stm32eforth-fl.s 			page 85


 4365 26c0 6D050000 		_DOLIT	16
 4365      10000000 
 4366 26c8 FD0C0000 		_ADR	SLASH			// change count to lines
 4367 26cc 39060000 		_ADR	TOR
 4368 26d0 BB050000 		_BRAN	DUMP4			// start count down loop
 4368      00270000 
 4369              	DUMP1:
 4370 26d8 A1130000 	  _ADR	CR
 4371 26dc 6D050000 		_DOLIT	16
 4371      10000000 
 4372 26e4 A1080000 		_ADR	DDUP
 4373 26e8 59260000 		_ADR	DMP			// display numeric
 4374 26ec 79080000 		_ADR	ROT
 4375 26f0 79080000 		_ADR	ROT
 4376 26f4 19130000 		_ADR	SPACE
 4377 26f8 19130000 		_ADR	SPACE
 4378 26fc 6D130000 		_ADR	TYPEE			// display printable characters
 4379              	DUMP4:
 4380 2700 91050000 	  _DONXT	DUMP1	// loop till done
 4380      D8260000 
 4381              	DUMP3:
 4382 2708 81060000 		_ADR	DROP
 4383 270c 15060000 		_ADR	RFROM
 4384 2710 850A0000 		_ADR	BASE
 4385 2714 D5050000 		_ADR	STORE			// restore radix
 4386 2718 1B040000 		_UNNEST
 4387              	
 4388              	//    .S	  ( ... -- ... )
 4389              	// 	Display the contents of the data stack.
 4390              	
 4391 271c A4260000 		.word	_DUMP
 4392              	_DOTS:
 4393 2720 02       		.byte  2
 4394 2721 2E53     		.ascii ".S"
 4395 2723 00       		.p2align 2 	
 4396              	DOTS:
 4397 2724 404700BF 		_NEST
 4398 2728 19130000 		_ADR	SPACE
 4399 272c C50D0000 		_ADR	DEPTH			// stack depth
 4400 2730 39060000 		_ADR	TOR			// start count down loop
 4401 2734 BB050000 		_BRAN	DOTS2			// skip first pass
 4401      48270000 
 4402              	DOTS1:
 4403 273c 29060000 		_ADR	RAT
 4404 2740 ED0D0000 		_ADR	PICK
 4405 2744 A5140000 		_ADR	DOT			// index stack, display contents
 4406              	DOTS2:
 4407 2748 91050000 		_DONXT	DOTS1	// loop till done
 4407      3C270000 
 4408 2750 19130000 		_ADR	SPACE
 4409 2754 1B040000 		_UNNEST
 4410              	
 4411              	//    >NAME	( ca -- na | F )
 4412              	// 	Convert code address to a name address.
 4413              	
 4414 2758 20270000 		.word	_DOTS
 4415 275c 05       	_TNAME:	.byte  5
ARM GAS  stm32eforth-fl.s 			page 86


 4416 275d 3E4E414D 		.ascii ">NAME"
 4416      45
 4417 2762 00BF     		.p2align 2 	
 4418              	TNAME:
 4419 2764 404700BF 		_NEST
 4420 2768 39060000 		_ADR	TOR			//  
 4421 276c 0D0B0000 		_ADR	CNTXT			//  va
 4422 2770 E9050000 		_ADR	AT			//  na
 4423              	TNAM1:
 4424 2774 91060000 		_ADR	DUPP			//  na na
 4425 2778 A9050000 		_QBRAN	TNAM2	//  vocabulary end, no match
 4425      A8270000 
 4426 2780 91060000 		_ADR	DUPP			//  na na
 4427 2784 35170000 		_ADR	NAMET			//  na ca
 4428 2788 29060000 		_ADR	RAT			//  na ca code
 4429 278c FD060000 		_ADR	XORR			//  na f --
 4430 2790 A9050000 		_QBRAN	TNAM2
 4430      A8270000 
 4431 2798 01080000 		_ADR	CELLM			//  la 
 4432 279c E9050000 		_ADR	AT			//  next_na
 4433 27a0 BB050000 		_BRAN	TNAM1
 4433      74270000 
 4434              	TNAM2:	
 4435 27a8 15060000 		_ADR	RFROM
 4436 27ac 81060000 		_ADR	DROP			//  0|na --
 4437 27b0 1B040000 		_UNNEST			// 0
 4438              	
 4439              	//    .ID	 ( na -- )
 4440              	// 	Display the name at address.
 4441              	
 4442 27b4 5C270000 		.word	_TNAME
 4443 27b8 03       	_DOTID:	.byte  3
 4444 27b9 2E4944   		.ascii ".ID"
 4445              		.p2align 2 	
 4446              	DOTID:
 4447 27bc 404700BF 		_NEST
 4448 27c0 65080000 		_ADR	QDUP			// if zero no name
 4449 27c4 A9050000 		_QBRAN	DOTI1
 4449      E4270000 
 4450 27cc ED090000 		_ADR	COUNT
 4451 27d0 6D050000 		_DOLIT	0x1F
 4451      1F000000 
 4452 27d8 D5060000 		_ADR	ANDD			// mask lexicon bits
 4453 27dc 6D130000 		_ADR	TYPEE
 4454 27e0 1B040000 		_UNNEST			// display name string
 4455              	DOTI1:
 4456 27e4 09140000 		_DOTQP	9," {noName}"
 4456      09207B6E 
 4456      6F4E616D 
 4456      657D00BF 
 4457 27f4 1B040000 		_UNNEST
 4458              	
 4459              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 4460              	.if WANT_SEE 
 4461              	//    SEE	 ( -- //  string> )
 4462              	// 	A simple decompiler.
 4463              	
ARM GAS  stm32eforth-fl.s 			page 87


 4464              		.word	_DOTID
 4465              	_SEE:	.byte  3
 4466              		.ascii "SEE"
 4467              		.p2align 2 	
 4468              	SEE:
 4469              		_NEST
 4470              		_ADR	TICK	//  ca --, starting address
 4471              		_ADR	CR	
 4472              		_DOLIT	20
 4473              		_ADR	TOR
 4474              	SEE1:
 4475              		_ADR	CELLP			//  a
 4476              		_ADR	DUPP			//  a a
 4477              		_ADR	DECOMP		//  a
 4478              		_DONXT	SEE1
 4479              		_ADR	DROP
 4480              		_UNNEST
 4481              	
 4482              	// 	DECOMPILE ( a -- )
 4483              	// 	Convert code in a.  Display name of command or as data.
 4484              	
 4485              		.word	_SEE
 4486              	_DECOM:	.byte  9
 4487              		.ascii "DECOMPILE"
 4488              		.p2align 2 
 4489              		
 4490              	DECOMP:	
 4491              		_NEST
 4492              		_ADR	DUPP			//  a a
 4493              	// 	_ADR	TOR			//  a
 4494              		_ADR	AT			//  a code
 4495              		_ADR	DUPP			//  a code code
 4496              		_DOLIT	0xF800D000 //0xF800F800
 4497              		_ADR	ANDD
 4498              		_DOLIT	0xF000D000 //0xF800F000
 4499              		_ADR	EQUAL			//  a code ?
 4500              		_ADR	INVER 
 4501              		_QBRAN	DECOM2	//  not a command
 4502              		//  a valid_code --, extract address and display name
 4503              		MOVW	R0,#0xFFE
 4504              		MOV	R4,R5
 4505              		LSL	R5,R5,#21		//  get bits 22-12
 4506              		ASR	R5,R5,#9		//  with sign extension
 4507              		LSR	R4,R4,#15		//  get bits 11-1
 4508              		AND	R4,R4,R0		//  retain only bits 11-1
 4509              		ORR	R5,R5,R4		//  get bits 22-1
 4510              		NOP
 4511              		_ADR	OVER			//  a offset a
 4512              		_ADR	PLUS			//  a target-4
 4513              		_ADR	CELLP			//  a target
 4514              		_ADR	TNAME			//  a na/0 --, is it a name?
 4515              		_ADR	QDUP			//  name address or zero
 4516              		_QBRAN	DECOM1
 4517              		_ADR	SPACE			//  a na
 4518              		_ADR	DOTID			//  a --, display name
 4519              	// 	_ADR	RFROM			//  a
 4520              		_ADR	DROP
ARM GAS  stm32eforth-fl.s 			page 88


 4521              		_UNNEST
 4522              	DECOM1:	// _ADR	RFROM		//  a
 4523              		_ADR	AT			//  data
 4524              		_ADR	UDOT			//  display data
 4525              		_UNNEST
 4526              	DECOM2:
 4527              		_ADR	UDOT
 4528              	// 	_ADR	RFROM
 4529              		_ADR	DROP
 4530              		_UNNEST
 4531              	
 4532              	//    WORDS	( -- )
 4533              	// 	Display the names in the context vocabulary.
 4534              	
 4535              		.word	_DECOM
 4536              	.else 
 4537 27f8 B8270000 		.word _DOTID 
 4538              	.endif 
 4539 27fc 05       	_WORDS:	.byte  5
 4540 27fd 574F5244 		.ascii "WORDS"
 4540      53
 4541 2802 00BF     		.p2align 2 	
 4542              	WORDS:
 4543 2804 404700BF 		_NEST
 4544 2808 A1130000 		_ADR	CR
 4545 280c 0D0B0000 		_ADR	CNTXT
 4546 2810 E9050000 		_ADR	AT			// only in context
 4547              	WORS1:
 4548 2814 65080000 		_ADR	QDUP			// ?at end of list
 4549 2818 A9050000 		_QBRAN	WORS2
 4549      3C280000 
 4550 2820 91060000 		_ADR	DUPP
 4551 2824 19130000 		_ADR	SPACE
 4552 2828 BD270000 		_ADR	DOTID			// display a name
 4553 282c 01080000 		_ADR	CELLM
 4554 2830 E9050000 		_ADR	AT
 4555 2834 BB050000 		_BRAN	WORS1
 4555      14280000 
 4556              	WORS2:
 4557 283c 1B040000 		_UNNEST
 4558              	
 4559              	// **************************************************************************
 4560              	//  cold start
 4561              	
 4562              	//    VER	 ( -- n )
 4563              	// 	Return the version number of this implementation.
 4564              	
 4565              	// 	.word	_WORDS
 4566              	// _VERSN	.byte  3
 4567              	// 	.ascii "VER"
 4568              	// 	.p2align 2 	
 4569              	VERSN:
 4570 2840 404700BF 		_NEST
 4571 2844 6D050000 		_DOLIT	VER*256+EXT
 4571      00010000 
 4572 284c 1B040000 		_UNNEST
 4573              	
ARM GAS  stm32eforth-fl.s 			page 89


 4574              	//    hi	  ( -- )
 4575              	// 	Display the sign-on message of eForth.
 4576              	
 4577 2850 FC270000 		.word	_WORDS
 4578 2854 02       	_HI:	.byte  2
 4579 2855 4849     		.ascii "HI"
 4580 2857 00       		.p2align 2 	
 4581              	HI:
 4582 2858 404700BF 		_NEST
 4583 285c A1130000 		_ADR	CR	// initialize I/O
 4584 2860 09140000 		_DOTQP	26, "blue pill stm32eForth-it v" 
 4584      1A626C75 
 4584      65207069 
 4584      6C6C2073 
 4584      746D3332 
 4585 2880 850A0000 		_ADR	BASE
 4586 2884 E9050000 		_ADR	AT
 4587 2888 F5100000 		_ADR	HEX	// save radix
 4588 288c 41280000 		_ADR	VERSN
 4589 2890 E50F0000 		_ADR	BDIGS
 4590 2894 31100000 		_ADR	DIG
 4591 2898 31100000 		_ADR	DIG
 4592 289c 6D050000 		_DOLIT	'.'
 4592      2E000000 
 4593 28a4 05100000 		_ADR	HOLD
 4594 28a8 51100000 		_ADR	DIGS
 4595 28ac A5100000 		_ADR	EDIGS
 4596 28b0 6D130000 		_ADR	TYPEE	// format version number
 4597 28b4 850A0000 		_ADR	BASE
 4598 28b8 D5050000 		_ADR	STORE
 4599 28bc A1130000 		_ADR	CR
 4600 28c0 1B040000 		_UNNEST			// restore radix
 4601              	
 4602              	//    COLD	( -- )
 4603              	// 	The high level cold start sequence.
 4604              	
 4605 28c4 54280000 		.word	_HI
 4606 28c8 04       	LASTN:	.byte  4
 4607 28c9 434F4C44 		.ascii "COLD"
 4608 28cd 000000   		.p2align 2,0	
 4609              	COLD:
 4610              	//  Initiate Forth registers
 4611 28d0 4FF00003 		mov r3,#UPP&0xffff
 4612 28d4 C2F20003 		movt r3,#UPP>>16 
 4613 28d8 03F59F42 		add R2,R3,#RPP&0xffff	// Forth return stack
 4614 28dc 03F59D41 		add R1,R3,#SPP&0xffff // Forth data stack
 4615 28e0 85EA0505 		eor R5,R5,R5			//  tos=0
 4616 28e4 1648     		ldr R0,=COLD1 
 4617 28e6 FDF795BD 		_NEXT
 4618              	COLD1:
 4619 28ea 6D050000 		_DOLIT  0 
 4619      00000000 
 4620 28f2 01000000 		_ADR ULED // turn off user LED 
 4621 28f6 6D050000 		_DOLIT	UZERO
 4621      00020000 
 4622 28fe 6D050000 		_DOLIT	UPP
 4622      00000020 
ARM GAS  stm32eforth-fl.s 			page 90


 4623 2906 6D050000 		_DOLIT	ULAST-UZERO
 4623      54000000 
 4624 290e B50E0000 		_ADR	MOVE 			// initialize user area
 4625 2912 C51B0000 		_ADR	PRESE			// initialize stack and TIB
 4626 2916 5D1D0000 		_ADR IMGQ		// if there is a saved image load it  
 4627 291a A9050000 		_QBRAN 1f
 4627      26290000 
 4628 2922 8D1D0000 		_ADR	LOAD_IMG 
 4629              	1:
 4630 2926 710A0000 		_ADR	TBOOT
 4631 292a 650E0000 		_ADR	ATEXE			// application boot
 4632 292e 91240000 		_ADR	OVERT
 4633 2932 BB050000 		_BRAN	QUIT			// start interpretation
 4633      E41B0000 
 4634              	COLD2:
 4635 293a 00BF     		.p2align 2 	
 4636              	CTOP:
 4637 293c FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4638              	
 4639              		.section .text.user, "a", %progbits 
 4640              		.p2align 10 
 4641              	USER_SPACE: // save user image here.  
 4642 0000 FFFFFFFF 		.word 0XFFFFFFFF
 4643              	
 4644              	  .end 
ARM GAS  stm32eforth-fl.s 			page 91


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  stm32eforth-fl.s 			page 92


board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
board/blue-pill/stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
board/blue-pill/stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
board/blue-pill/stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
board/blue-pill/stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
board/blue-pill/stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
board/blue-pill/stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
board/blue-pill/stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
board/blue-pill/stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
board/blue-pill/stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
board/blue-pill/stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
board/blue-pill/stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
board/blue-pill/stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
board/blue-pill/stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
board/blue-pill/stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
board/blue-pill/stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
board/blue-pill/stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
    stm32eforth-fl.s:91     *ABS*:0000000040011000 LED_GPIO
    stm32eforth-fl.s:92     *ABS*:000000000000000d LED_PIN
    stm32eforth-fl.s:93     *ABS*:0000000040013800 UART
    stm32eforth-fl.s:96     *ABS*:0000000020004e80 SPP
    stm32eforth-fl.s:97     *ABS*:0000000020004e80 TIBB
    stm32eforth-fl.s:98     *ABS*:0000000020004f80 RPP
    stm32eforth-fl.s:99     *ABS*:0000000020000000 UPP
    stm32eforth-fl.s:100    *ABS*:0000000020000100 DTOP
    stm32eforth-fl.s:101    *ABS*:0000000020004e00 DEND
    stm32eforth-fl.s:102    *ABS*:0000000020000000 RAMOFFSET
    stm32eforth-fl.s:103    *ABS*:0000000020005000 RAMEND
    stm32eforth-fl.s:108    *ABS*:0000000000000004 SEED_OFS
    stm32eforth-fl.s:109    *ABS*:0000000000000008 TICKS_OFS
    stm32eforth-fl.s:110    *ABS*:000000000000000c TIMER_OFS
    stm32eforth-fl.s:111    *ABS*:0000000000000010 FTRACE_OFS
    stm32eforth-fl.s:112    *ABS*:0000000000000014 IMG_SIGN_OFS
    stm32eforth-fl.s:113    *ABS*:0000000000000018 BOOT_OFS
    stm32eforth-fl.s:114    *ABS*:000000000000001c BASE_OFS
    stm32eforth-fl.s:115    *ABS*:0000000000000020 TMP_OFS
    stm32eforth-fl.s:116    *ABS*:0000000000000024 SPAN_OFS
    stm32eforth-fl.s:117    *ABS*:0000000000000028 TOIN_OFS
    stm32eforth-fl.s:118    *ABS*:000000000000002c NTIB_OFS
    stm32eforth-fl.s:119    *ABS*:0000000000000030 TIB_OFS
    stm32eforth-fl.s:120    *ABS*:0000000000000034 EVAL_OFS
    stm32eforth-fl.s:121    *ABS*:0000000000000038 HLD_OFS
    stm32eforth-fl.s:122    *ABS*:000000000000003c CTXT_OFS
    stm32eforth-fl.s:123    *ABS*:0000000000000040 FORTH_CTOP_OFS
    stm32eforth-fl.s:124    *ABS*:0000000000000044 RAM_CTOP_OFS
    stm32eforth-fl.s:125    *ABS*:0000000000000048 LASTN_OFS
    stm32eforth-fl.s:126    *ABS*:000000000000004c VARS_END_OFS
ARM GAS  stm32eforth-fl.s 			page 93


    stm32eforth-fl.s:212    .isr_vector:0000000000000000 isr_vectors
    stm32eforth-fl.s:379    .text:0000000000000060 reset_handler
    stm32eforth-fl.s:326    .text:0000000000000000 default_handler
    stm32eforth-fl.s:358    .text:0000000000000044 systick_handler
    stm32eforth-fl.s:294    .isr_vector:0000000000000130 $d
    stm32eforth-fl.s:296    .isr_vector:0000000000000200 UZERO
    stm32eforth-fl.s:4581   .text:0000000000002858 HI
                            *ABS*:000000000000000a BASEE
    stm32eforth-fl.s:3257   .text:0000000000001a9c INTER
    stm32eforth-fl.s:4606   .text:00000000000028c8 LASTN
    stm32eforth-fl.s:4636   .text:000000000000293c CTOP
    stm32eforth-fl.s:317    .isr_vector:0000000000000254 ULAST
    stm32eforth-fl.s:324    .text:0000000000000000 $t
    stm32eforth-fl.s:336    .text:0000000000000018 exception_msg
    stm32eforth-fl.s:717    .text:0000000000000548 EMIT
    stm32eforth-fl.s:341    .text:0000000000000030 REBOOT
    stm32eforth-fl.s:337    .text:0000000000000018 $d
    stm32eforth-fl.s:349    .text:0000000000000040 scb_adr
    stm32eforth-fl.s:350    .text:0000000000000040 $d
    stm32eforth-fl.s:356    .text:0000000000000044 $t
    stm32eforth-fl.s:368    .text:000000000000005e systick_exit
    stm32eforth-fl.s:490    .text:000000000000014c remap
    stm32eforth-fl.s:391    .text:000000000000007c init_devices
    stm32eforth-fl.s:3379   .text:0000000000001c04 unlock
    stm32eforth-fl.s:386    .text:0000000000000078 nest_adr
    stm32eforth-fl.s:4609   .text:00000000000028d0 COLD
    stm32eforth-fl.s:387    .text:0000000000000078 $d
    stm32eforth-fl.s:576    .text:000000000000040c NEST
    stm32eforth-fl.s:390    .text:000000000000007c $t
    stm32eforth-fl.s:406    .text:000000000000009a wait_hserdy
    stm32eforth-fl.s:426    .text:00000000000000b4 wait_pllrdy
    stm32eforth-fl.s:439    .text:00000000000000d4 wait_sws
    stm32eforth-fl.s:509    .text:000000000000017c remap_dest
    stm32eforth-fl.s:507    .text:0000000000000178 remap_src
    stm32eforth-fl.s:508    .text:0000000000000178 $d
    stm32eforth-fl.s:515    *ABS*:0000000000000001 VER
    stm32eforth-fl.s:516    *ABS*:0000000000000000 EXT
    stm32eforth-fl.s:520    *ABS*:0000000000000040 COMPO
    stm32eforth-fl.s:521    *ABS*:0000000000000080 IMEDD
    stm32eforth-fl.s:522    *ABS*:00000000ffffff1f MASKK
    stm32eforth-fl.s:524    *ABS*:0000000000000004 CELLL
    stm32eforth-fl.s:526    *ABS*:0000000000000008 VOCSS
    stm32eforth-fl.s:528    *ABS*:0000000000000008 BKSPP
    stm32eforth-fl.s:529    *ABS*:000000000000000a LF
    stm32eforth-fl.s:530    *ABS*:000000000000000d CRR
    stm32eforth-fl.s:531    *ABS*:000000000000001b ERR
    stm32eforth-fl.s:532    *ABS*:0000000000000027 TIC
    stm32eforth-fl.s:553    .text:0000000000000180 $t
    stm32eforth-fl.s:565    .text:0000000000000400 TPUSH
    stm32eforth-fl.s:580    .text:0000000000000414 INEXT
    stm32eforth-fl.s:570    .text:0000000000000406 TPOP
    stm32eforth-fl.s:592    .text:000000000000041a UNNEST
    stm32eforth-fl.s:604    .text:0000000000000420 COMPI_NEST
    stm32eforth-fl.s:619    .text:000000000000043e $d
    stm32eforth-fl.s:620    .text:0000000000000442 _RAND
    stm32eforth-fl.s:623    .text:000000000000044c RAND
    stm32eforth-fl.s:625    .text:0000000000000450 $d
ARM GAS  stm32eforth-fl.s 			page 94


    stm32eforth-fl.s:1585   .text:0000000000000a34 SEED
    stm32eforth-fl.s:850    .text:00000000000005e8 AT
    stm32eforth-fl.s:967    .text:0000000000000690 DUPP
    stm32eforth-fl.s:751    .text:000000000000056c DOLIT
    stm32eforth-fl.s:1079   .text:0000000000000744 LSHIFT
    stm32eforth-fl.s:1040   .text:00000000000006fc XORR
    stm32eforth-fl.s:1067   .text:000000000000072c RSHIFT
    stm32eforth-fl.s:837    .text:00000000000005d4 STORE
    stm32eforth-fl.s:1367   .text:00000000000008f4 ABSS
    stm32eforth-fl.s:978    .text:00000000000006a0 SWAP
    stm32eforth-fl.s:1933   .text:0000000000000ce4 MODD
    stm32eforth-fl.s:651    .text:00000000000004b4 _PAUSE
    stm32eforth-fl.s:653    .text:00000000000004ba $t
    stm32eforth-fl.s:654    .text:00000000000004bc PAUSE
    stm32eforth-fl.s:656    .text:00000000000004c0 $d
    stm32eforth-fl.s:1607   .text:0000000000000a5c TIMER
    stm32eforth-fl.s:658    .text:00000000000004c8 PAUSE_LOOP
    stm32eforth-fl.s:799    .text:00000000000005a8 QBRAN
    stm32eforth-fl.s:663    .text:00000000000004e0 PAUSE_EXIT
    stm32eforth-fl.s:816    .text:00000000000005ba BRAN
    stm32eforth-fl.s:669    .text:00000000000004e8 _ULED
    stm32eforth-fl.s:673    .text:00000000000004f0 ULED
    stm32eforth-fl.s:682    .text:0000000000000508 ULED_OFF
    stm32eforth-fl.s:688    .text:000000000000050c $d
    stm32eforth-fl.s:689    .text:0000000000000510 _QRX
    stm32eforth-fl.s:692    .text:0000000000000518 QKEY
    stm32eforth-fl.s:693    .text:0000000000000518 QRX
    stm32eforth-fl.s:704    .text:0000000000000538 QRX1
    stm32eforth-fl.s:712    .text:000000000000053e $d
    stm32eforth-fl.s:713    .text:0000000000000542 _TXSTO
    stm32eforth-fl.s:716    .text:0000000000000548 TXSTO
    stm32eforth-fl.s:718    .text:0000000000000548 TECHO
    stm32eforth-fl.s:721    .text:0000000000000550 TX1
    stm32eforth-fl.s:736    .text:0000000000000560 $d
    stm32eforth-fl.s:737    .text:0000000000000564 _NOP
    stm32eforth-fl.s:739    .text:0000000000000568 $t
    stm32eforth-fl.s:740    .text:0000000000000568 NOP
    stm32eforth-fl.s:759    .text:0000000000000576 $d
    stm32eforth-fl.s:760    .text:000000000000057a _EXECU
    stm32eforth-fl.s:762    .text:0000000000000582 $t
    stm32eforth-fl.s:763    .text:0000000000000584 EXECU
    stm32eforth-fl.s:778    .text:0000000000000590 DONXT
    stm32eforth-fl.s:785    .text:000000000000059e NEXT1
    stm32eforth-fl.s:805    .text:00000000000005b4 QBRAN1
    stm32eforth-fl.s:823    .text:00000000000005be $d
    stm32eforth-fl.s:824    .text:00000000000005c2 _EXIT
    stm32eforth-fl.s:827    .text:00000000000005c8 EXIT
    stm32eforth-fl.s:828    .text:00000000000005c8 $d
    stm32eforth-fl.s:834    .text:00000000000005d0 _STORE
    stm32eforth-fl.s:836    .text:00000000000005d2 $t
    stm32eforth-fl.s:846    .text:00000000000005e0 $d
    stm32eforth-fl.s:847    .text:00000000000005e4 _AT
    stm32eforth-fl.s:849    .text:00000000000005e6 $t
    stm32eforth-fl.s:857    .text:00000000000005ec $d
    stm32eforth-fl.s:858    .text:00000000000005f0 _CSTOR
    stm32eforth-fl.s:861    .text:00000000000005f4 CSTOR
    stm32eforth-fl.s:870    .text:0000000000000600 $d
ARM GAS  stm32eforth-fl.s 			page 95


    stm32eforth-fl.s:871    .text:0000000000000604 _CAT
    stm32eforth-fl.s:874    .text:0000000000000608 CAT
    stm32eforth-fl.s:881    .text:000000000000060c $d
    stm32eforth-fl.s:882    .text:0000000000000610 _RFROM
    stm32eforth-fl.s:885    .text:0000000000000614 RFROM
    stm32eforth-fl.s:893    .text:000000000000061e $d
    stm32eforth-fl.s:894    .text:0000000000000622 _RAT
    stm32eforth-fl.s:897    .text:0000000000000628 RAT
    stm32eforth-fl.s:905    .text:0000000000000630 $d
    stm32eforth-fl.s:906    .text:0000000000000634 _TOR
    stm32eforth-fl.s:909    .text:0000000000000638 TOR
    stm32eforth-fl.s:916    .text:0000000000000642 $d
    stm32eforth-fl.s:917    .text:0000000000000646 _RPSTOR
    stm32eforth-fl.s:919    .text:000000000000064a $t
    stm32eforth-fl.s:920    .text:000000000000064c RPSTOR
    stm32eforth-fl.s:928    .text:0000000000000654 $d
    stm32eforth-fl.s:929    .text:0000000000000658 _SPSTOR
    stm32eforth-fl.s:931    .text:000000000000065c $t
    stm32eforth-fl.s:932    .text:000000000000065c SPSTOR
    stm32eforth-fl.s:940    .text:0000000000000664 $d
    stm32eforth-fl.s:941    .text:0000000000000668 _SPAT
    stm32eforth-fl.s:943    .text:000000000000066c $t
    stm32eforth-fl.s:944    .text:000000000000066c SPAT
    stm32eforth-fl.s:952    .text:0000000000000674 $d
    stm32eforth-fl.s:953    .text:0000000000000678 _DROP
    stm32eforth-fl.s:956    .text:0000000000000680 DROP
    stm32eforth-fl.s:963    .text:0000000000000686 $d
    stm32eforth-fl.s:964    .text:000000000000068a _DUPP
    stm32eforth-fl.s:966    .text:000000000000068e $t
    stm32eforth-fl.s:974    .text:0000000000000696 $d
    stm32eforth-fl.s:975    .text:000000000000069a _SWAP
    stm32eforth-fl.s:987    .text:00000000000006a8 $d
    stm32eforth-fl.s:988    .text:00000000000006ac _OVER
    stm32eforth-fl.s:991    .text:00000000000006b4 OVER
    stm32eforth-fl.s:999    .text:00000000000006bc $d
    stm32eforth-fl.s:1000   .text:00000000000006c0 _ZLESS
    stm32eforth-fl.s:1003   .text:00000000000006c4 ZLESS
    stm32eforth-fl.s:1012   .text:00000000000006ca $d
    stm32eforth-fl.s:1013   .text:00000000000006ce _ANDD
    stm32eforth-fl.s:1015   .text:00000000000006d2 $t
    stm32eforth-fl.s:1016   .text:00000000000006d4 ANDD
    stm32eforth-fl.s:1024   .text:00000000000006de $d
    stm32eforth-fl.s:1025   .text:00000000000006e2 _ORR
    stm32eforth-fl.s:1028   .text:00000000000006e8 ORR
    stm32eforth-fl.s:1036   .text:00000000000006f2 $d
    stm32eforth-fl.s:1037   .text:00000000000006f6 _XORR
    stm32eforth-fl.s:1039   .text:00000000000006fa $t
    stm32eforth-fl.s:1048   .text:0000000000000706 $d
    stm32eforth-fl.s:1049   .text:000000000000070a _UPLUS
    stm32eforth-fl.s:1051   .text:000000000000070e $t
    stm32eforth-fl.s:1052   .text:0000000000000710 UPLUS
    stm32eforth-fl.s:1063   .text:0000000000000720 $d
    stm32eforth-fl.s:1064   .text:0000000000000724 _RSHIFT
    stm32eforth-fl.s:1075   .text:0000000000000736 $d
    stm32eforth-fl.s:1076   .text:000000000000073a _LSHIFT
    stm32eforth-fl.s:1087   .text:000000000000074e $d
    stm32eforth-fl.s:1088   .text:0000000000000752 _PLUS
ARM GAS  stm32eforth-fl.s 			page 96


    stm32eforth-fl.s:1090   .text:0000000000000754 $t
    stm32eforth-fl.s:1091   .text:0000000000000754 PLUS
    stm32eforth-fl.s:1099   .text:000000000000075c $d
    stm32eforth-fl.s:1100   .text:0000000000000760 _SUBB
    stm32eforth-fl.s:1102   .text:0000000000000762 $t
    stm32eforth-fl.s:1103   .text:0000000000000764 SUBB
    stm32eforth-fl.s:1111   .text:000000000000076e $d
    stm32eforth-fl.s:1112   .text:0000000000000772 _STAR
    stm32eforth-fl.s:1114   .text:0000000000000774 $t
    stm32eforth-fl.s:1115   .text:0000000000000774 STAR
    stm32eforth-fl.s:1123   .text:000000000000077e $d
    stm32eforth-fl.s:1124   .text:0000000000000782 _UMSTA
    stm32eforth-fl.s:1126   .text:0000000000000786 $t
    stm32eforth-fl.s:1127   .text:0000000000000788 UMSTA
    stm32eforth-fl.s:1137   .text:0000000000000794 $d
    stm32eforth-fl.s:1138   .text:0000000000000798 _MSTAR
    stm32eforth-fl.s:1141   .text:000000000000079c MSTAR
    stm32eforth-fl.s:1151   .text:00000000000007a8 $d
    stm32eforth-fl.s:1152   .text:00000000000007ac _ONEP
    stm32eforth-fl.s:1155   .text:00000000000007b0 ONEP
    stm32eforth-fl.s:1162   .text:00000000000007b6 $d
    stm32eforth-fl.s:1163   .text:00000000000007ba _ONEM
    stm32eforth-fl.s:1166   .text:00000000000007c0 ONEM
    stm32eforth-fl.s:1173   .text:00000000000007c6 $d
    stm32eforth-fl.s:1174   .text:00000000000007ca _TWOP
    stm32eforth-fl.s:1177   .text:00000000000007d0 TWOP
    stm32eforth-fl.s:1184   .text:00000000000007d6 $d
    stm32eforth-fl.s:1185   .text:00000000000007da _TWOM
    stm32eforth-fl.s:1188   .text:00000000000007e0 TWOM
    stm32eforth-fl.s:1195   .text:00000000000007e6 $d
    stm32eforth-fl.s:1196   .text:00000000000007ea _CELLP
    stm32eforth-fl.s:1198   .text:00000000000007f0 $t
    stm32eforth-fl.s:1199   .text:00000000000007f0 CELLP
    stm32eforth-fl.s:1206   .text:00000000000007f6 $d
    stm32eforth-fl.s:1207   .text:00000000000007fa _CELLM
    stm32eforth-fl.s:1209   .text:0000000000000800 $t
    stm32eforth-fl.s:1210   .text:0000000000000800 CELLM
    stm32eforth-fl.s:1217   .text:0000000000000806 $d
    stm32eforth-fl.s:1218   .text:000000000000080a _BLANK
    stm32eforth-fl.s:1221   .text:0000000000000810 BLANK
    stm32eforth-fl.s:1229   .text:000000000000081a $d
    stm32eforth-fl.s:1230   .text:000000000000081e _CELLS
    stm32eforth-fl.s:1232   .text:0000000000000824 $t
    stm32eforth-fl.s:1233   .text:0000000000000824 CELLS
    stm32eforth-fl.s:1240   .text:000000000000082a $d
    stm32eforth-fl.s:1241   .text:000000000000082e _CELLSL
    stm32eforth-fl.s:1243   .text:0000000000000834 $t
    stm32eforth-fl.s:1244   .text:0000000000000834 CELLSL
    stm32eforth-fl.s:1251   .text:000000000000083a $d
    stm32eforth-fl.s:1252   .text:000000000000083e _TWOST
    stm32eforth-fl.s:1255   .text:0000000000000844 TWOST
    stm32eforth-fl.s:1262   .text:000000000000084a $d
    stm32eforth-fl.s:1263   .text:000000000000084e _TWOSL
    stm32eforth-fl.s:1266   .text:0000000000000854 TWOSL
    stm32eforth-fl.s:1273   .text:000000000000085a $d
    stm32eforth-fl.s:1274   .text:000000000000085e _QDUP
    stm32eforth-fl.s:1277   .text:0000000000000864 QDUP
ARM GAS  stm32eforth-fl.s 			page 97


    stm32eforth-fl.s:1286   .text:000000000000086e $d
    stm32eforth-fl.s:1287   .text:0000000000000872 _ROT
    stm32eforth-fl.s:1289   .text:0000000000000876 $t
    stm32eforth-fl.s:1290   .text:0000000000000878 ROT
    stm32eforth-fl.s:1300   .text:0000000000000882 $d
    stm32eforth-fl.s:1301   .text:0000000000000886 _DDROP
    stm32eforth-fl.s:1303   .text:000000000000088c $t
    stm32eforth-fl.s:1304   .text:000000000000088c DDROP
    stm32eforth-fl.s:1312   .text:0000000000000896 $d
    stm32eforth-fl.s:1313   .text:000000000000089a _DDUP
    stm32eforth-fl.s:1316   .text:00000000000008a0 DDUP
    stm32eforth-fl.s:1325   .text:00000000000008ac $d
    stm32eforth-fl.s:1326   .text:00000000000008b0 _DPLUS
    stm32eforth-fl.s:1329   .text:00000000000008b4 DPLUS
    stm32eforth-fl.s:1341   .text:00000000000008c8 $d
    stm32eforth-fl.s:1342   .text:00000000000008cc _INVER
    stm32eforth-fl.s:1344   .text:00000000000008d0 $t
    stm32eforth-fl.s:1345   .text:00000000000008d0 INVER
    stm32eforth-fl.s:1352   .text:00000000000008d6 $d
    stm32eforth-fl.s:1353   .text:00000000000008da _NEGAT
    stm32eforth-fl.s:1356   .text:00000000000008e4 NEGAT
    stm32eforth-fl.s:1363   .text:00000000000008ea $d
    stm32eforth-fl.s:1364   .text:00000000000008ee _ABSS
    stm32eforth-fl.s:1366   .text:00000000000008f2 $t
    stm32eforth-fl.s:1376   .text:00000000000008fe $d
    stm32eforth-fl.s:1377   .text:0000000000000902 _ZEQUAL
    stm32eforth-fl.s:1380   .text:0000000000000908 ZEQUAL
    stm32eforth-fl.s:1390   .text:0000000000000916 $d
    stm32eforth-fl.s:1391   .text:000000000000091a _EQUAL
    stm32eforth-fl.s:1393   .text:000000000000091c $t
    stm32eforth-fl.s:1394   .text:000000000000091c EQUAL
    stm32eforth-fl.s:1405   .text:000000000000092c $d
    stm32eforth-fl.s:1406   .text:0000000000000930 _ULESS
    stm32eforth-fl.s:1409   .text:0000000000000934 ULESS
    stm32eforth-fl.s:1420   .text:0000000000000944 $d
    stm32eforth-fl.s:1421   .text:0000000000000948 _LESS
    stm32eforth-fl.s:1423   .text:000000000000094a $t
    stm32eforth-fl.s:1424   .text:000000000000094c LESS
    stm32eforth-fl.s:1435   .text:000000000000095c $d
    stm32eforth-fl.s:1436   .text:0000000000000960 _GREAT
    stm32eforth-fl.s:1438   .text:0000000000000962 $t
    stm32eforth-fl.s:1439   .text:0000000000000964 GREAT
    stm32eforth-fl.s:1450   .text:0000000000000974 $d
    stm32eforth-fl.s:1451   .text:0000000000000978 _MAX
    stm32eforth-fl.s:1453   .text:000000000000097c $t
    stm32eforth-fl.s:1454   .text:000000000000097c MAX
    stm32eforth-fl.s:1464   .text:0000000000000988 $d
    stm32eforth-fl.s:1465   .text:000000000000098c _MIN
    stm32eforth-fl.s:1467   .text:0000000000000990 $t
    stm32eforth-fl.s:1468   .text:0000000000000990 MIN
    stm32eforth-fl.s:1478   .text:000000000000099c $d
    stm32eforth-fl.s:1479   .text:00000000000009a0 _PSTOR
    stm32eforth-fl.s:1482   .text:00000000000009a4 PSTOR
    stm32eforth-fl.s:1493   .text:00000000000009b4 $d
    stm32eforth-fl.s:1494   .text:00000000000009b8 _DSTOR
    stm32eforth-fl.s:1497   .text:00000000000009bc DSTOR
    stm32eforth-fl.s:1508   .text:00000000000009d0 $d
ARM GAS  stm32eforth-fl.s 			page 98


    stm32eforth-fl.s:1509   .text:00000000000009d4 _DAT
    stm32eforth-fl.s:1512   .text:00000000000009d8 DAT
    stm32eforth-fl.s:1521   .text:00000000000009e2 $d
    stm32eforth-fl.s:1522   .text:00000000000009e6 _COUNT
    stm32eforth-fl.s:1524   .text:00000000000009ec $t
    stm32eforth-fl.s:1525   .text:00000000000009ec COUNT
    stm32eforth-fl.s:1534   .text:00000000000009f8 $d
    stm32eforth-fl.s:1535   .text:00000000000009fc _DNEGA
    stm32eforth-fl.s:1537   .text:0000000000000a04 $t
    stm32eforth-fl.s:1538   .text:0000000000000a04 DNEGA
    stm32eforth-fl.s:1556   .text:0000000000000a14 DOVAR
    stm32eforth-fl.s:1569   .text:0000000000000a20 DOCON
    stm32eforth-fl.s:1581   .text:0000000000000a2a $d
    stm32eforth-fl.s:1582   .text:0000000000000a2e _SEED
    stm32eforth-fl.s:1592   .text:0000000000000a3e $d
    stm32eforth-fl.s:1593   .text:0000000000000a42 _MSEC
    stm32eforth-fl.s:1596   .text:0000000000000a48 MSEC
    stm32eforth-fl.s:1603   .text:0000000000000a52 $d
    stm32eforth-fl.s:1604   .text:0000000000000a56 _TIMER
    stm32eforth-fl.s:1606   .text:0000000000000a5c $t
    stm32eforth-fl.s:1615   .text:0000000000000a66 $d
    stm32eforth-fl.s:1616   .text:0000000000000a6a _TBOOT
    stm32eforth-fl.s:1618   .text:0000000000000a70 $t
    stm32eforth-fl.s:1619   .text:0000000000000a70 TBOOT
    stm32eforth-fl.s:1627   .text:0000000000000a7a $d
    stm32eforth-fl.s:1628   .text:0000000000000a7e _BASE
    stm32eforth-fl.s:1631   .text:0000000000000a84 BASE
    stm32eforth-fl.s:1643   .text:0000000000000a8e TEMP
    stm32eforth-fl.s:1651   .text:0000000000000a98 $d
    stm32eforth-fl.s:1652   .text:0000000000000a9c _SPAN
    stm32eforth-fl.s:1655   .text:0000000000000aa4 SPAN
    stm32eforth-fl.s:1663   .text:0000000000000aae $d
    stm32eforth-fl.s:1664   .text:0000000000000ab2 _INN
    stm32eforth-fl.s:1666   .text:0000000000000ab6 $t
    stm32eforth-fl.s:1667   .text:0000000000000ab8 INN
    stm32eforth-fl.s:1675   .text:0000000000000ac2 $d
    stm32eforth-fl.s:1676   .text:0000000000000ac6 _NTIB
    stm32eforth-fl.s:1679   .text:0000000000000acc NTIB
    stm32eforth-fl.s:1687   .text:0000000000000ad6 $d
    stm32eforth-fl.s:1688   .text:0000000000000ada _TEVAL
    stm32eforth-fl.s:1690   .text:0000000000000ae0 $t
    stm32eforth-fl.s:1691   .text:0000000000000ae0 TEVAL
    stm32eforth-fl.s:1699   .text:0000000000000aea $d
    stm32eforth-fl.s:1700   .text:0000000000000aee _HLD
    stm32eforth-fl.s:1702   .text:0000000000000af2 $t
    stm32eforth-fl.s:1703   .text:0000000000000af4 HLD
    stm32eforth-fl.s:1711   .text:0000000000000afe $d
    stm32eforth-fl.s:1712   .text:0000000000000b02 _CNTXT
    stm32eforth-fl.s:1714   .text:0000000000000b0a $t
    stm32eforth-fl.s:1715   .text:0000000000000b0c CNTXT
    stm32eforth-fl.s:1716   .text:0000000000000b0c CRRNT
    stm32eforth-fl.s:1724   .text:0000000000000b16 $d
    stm32eforth-fl.s:1725   .text:0000000000000b1a _CP
    stm32eforth-fl.s:1728   .text:0000000000000b20 CPP
    stm32eforth-fl.s:1735   .text:0000000000000b2a $d
    stm32eforth-fl.s:1736   .text:0000000000000b2e _FCP
    stm32eforth-fl.s:1738   .text:0000000000000b32 $t
ARM GAS  stm32eforth-fl.s 			page 99


    stm32eforth-fl.s:1739   .text:0000000000000b34 FCP
    stm32eforth-fl.s:1747   .text:0000000000000b3e $d
    stm32eforth-fl.s:1748   .text:0000000000000b42 _LAST
    stm32eforth-fl.s:1751   .text:0000000000000b48 LAST
    stm32eforth-fl.s:1758   .text:0000000000000b52 $d
    stm32eforth-fl.s:1759   .text:0000000000000b56 _FTRACE
    stm32eforth-fl.s:1762   .text:0000000000000b60 FTRACE
    stm32eforth-fl.s:1773   .text:0000000000000b6a $d
    stm32eforth-fl.s:1774   .text:0000000000000b6e _USER_BGN
    stm32eforth-fl.s:1777   .text:0000000000000b7c USER_BEGIN
    stm32eforth-fl.s:1781   .text:0000000000000b84 USR_BGN_ADR
    stm32eforth-fl.s:1782   .text:0000000000000b84 $d
    stm32eforth-fl.s:1787   .text:0000000000000b8c _USER_END
    stm32eforth-fl.s:1790   .text:0000000000000b98 USER_END
    stm32eforth-fl.s:1794   .text:0000000000000ba0 USER_END_ADR
    stm32eforth-fl.s:1795   .text:0000000000000ba0 $d
    stm32eforth-fl.s:1800   .text:0000000000000ba8 _IMG_ADR
    stm32eforth-fl.s:1802   .text:0000000000000bb0 $t
    stm32eforth-fl.s:1803   .text:0000000000000bb0 IMG_ADR
    stm32eforth-fl.s:1807   .text:0000000000000bb8 USR_IMG_ADR
    stm32eforth-fl.s:1808   .text:0000000000000bb8 $d
    stm32eforth-fl.s:4641   .text.user:0000000000000000 USER_SPACE
    stm32eforth-fl.s:1813   .text:0000000000000bc0 _IMG_SIGN
    stm32eforth-fl.s:1816   .text:0000000000000bcc IMG_SIGN
    stm32eforth-fl.s:1828   .text:0000000000000bd6 $d
    stm32eforth-fl.s:1829   .text:0000000000000bda _WITHI
    stm32eforth-fl.s:1832   .text:0000000000000be4 WITHI
    stm32eforth-fl.s:1834   .text:0000000000000be8 $d
    stm32eforth-fl.s:1848   .text:0000000000000c08 _UMMOD
    stm32eforth-fl.s:1851   .text:0000000000000c10 UMMOD
    stm32eforth-fl.s:1855   .text:0000000000000c1a UMMOD0
    stm32eforth-fl.s:1862   .text:0000000000000c2a UMMOD1
    stm32eforth-fl.s:1868   .text:0000000000000c34 UMMOD2
    stm32eforth-fl.s:1878   .text:0000000000000c40 $d
    stm32eforth-fl.s:1879   .text:0000000000000c44 _MSMOD
    stm32eforth-fl.s:1881   .text:0000000000000c4a $t
    stm32eforth-fl.s:1882   .text:0000000000000c4c MSMOD
    stm32eforth-fl.s:1884   .text:0000000000000c50 $d
    stm32eforth-fl.s:1893   .text:0000000000000c78 MMOD1
    stm32eforth-fl.s:1900   .text:0000000000000c94 MMOD2
    stm32eforth-fl.s:1908   .text:0000000000000cb4 MMOD3
    stm32eforth-fl.s:1915   .text:0000000000000cbc _SLMOD
    stm32eforth-fl.s:1918   .text:0000000000000cc4 SLMOD
    stm32eforth-fl.s:1920   .text:0000000000000cc8 $d
    stm32eforth-fl.s:1930   .text:0000000000000ce0 _MODD
    stm32eforth-fl.s:1932   .text:0000000000000ce4 $t
    stm32eforth-fl.s:1935   .text:0000000000000ce8 $d
    stm32eforth-fl.s:1943   .text:0000000000000cf8 _SLASH
    stm32eforth-fl.s:1945   .text:0000000000000cfa $t
    stm32eforth-fl.s:1946   .text:0000000000000cfc SLASH
    stm32eforth-fl.s:1948   .text:0000000000000d00 $d
    stm32eforth-fl.s:1957   .text:0000000000000d14 _SSMOD
    stm32eforth-fl.s:1959   .text:0000000000000d1a $t
    stm32eforth-fl.s:1960   .text:0000000000000d1c SSMOD
    stm32eforth-fl.s:1962   .text:0000000000000d20 $d
    stm32eforth-fl.s:1972   .text:0000000000000d38 _STASL
    stm32eforth-fl.s:1975   .text:0000000000000d3c STASL
ARM GAS  stm32eforth-fl.s 			page 100


    stm32eforth-fl.s:1977   .text:0000000000000d40 $d
    stm32eforth-fl.s:1989   .text:0000000000000d54 _ALGND
    stm32eforth-fl.s:1991   .text:0000000000000d5c $t
    stm32eforth-fl.s:1992   .text:0000000000000d5c ALGND
    stm32eforth-fl.s:2001   .text:0000000000000d6c $d
    stm32eforth-fl.s:2002   .text:0000000000000d70 _TCHAR
    stm32eforth-fl.s:2004   .text:0000000000000d76 $t
    stm32eforth-fl.s:2005   .text:0000000000000d78 TCHAR
    stm32eforth-fl.s:2007   .text:0000000000000d7c $d
    stm32eforth-fl.s:2017   .text:0000000000000db4 TCHA1
    stm32eforth-fl.s:2024   .text:0000000000000dbc _DEPTH
    stm32eforth-fl.s:2026   .text:0000000000000dc2 $t
    stm32eforth-fl.s:2027   .text:0000000000000dc4 DEPTH
    stm32eforth-fl.s:2039   .text:0000000000000de0 $d
    stm32eforth-fl.s:2040   .text:0000000000000de4 _PICK
    stm32eforth-fl.s:2043   .text:0000000000000dec PICK
    stm32eforth-fl.s:2045   .text:0000000000000df0 $d
    stm32eforth-fl.s:2059   .text:0000000000000e0c _HERE
    stm32eforth-fl.s:2062   .text:0000000000000e14 HERE
    stm32eforth-fl.s:2064   .text:0000000000000e18 $d
    stm32eforth-fl.s:2072   .text:0000000000000e28 _PAD
    stm32eforth-fl.s:2074   .text:0000000000000e2c $t
    stm32eforth-fl.s:2075   .text:0000000000000e2c PAD
    stm32eforth-fl.s:2077   .text:0000000000000e30 $d
    stm32eforth-fl.s:2086   .text:0000000000000e48 _TIB
    stm32eforth-fl.s:2088   .text:0000000000000e4c $t
    stm32eforth-fl.s:2089   .text:0000000000000e4c TIB
    stm32eforth-fl.s:2097   .text:0000000000000e56 $d
    stm32eforth-fl.s:2098   .text:0000000000000e5a _ATEXE
    stm32eforth-fl.s:2101   .text:0000000000000e64 ATEXE
    stm32eforth-fl.s:2113   .text:0000000000000e78 $d
    stm32eforth-fl.s:2114   .text:0000000000000e7c _CMOVE
    stm32eforth-fl.s:2116   .text:0000000000000e82 $t
    stm32eforth-fl.s:2117   .text:0000000000000e84 CMOVE
    stm32eforth-fl.s:2124   .text:0000000000000e96 CMOV1
    stm32eforth-fl.s:2121   .text:0000000000000e8e CMOV0
    stm32eforth-fl.s:2129   .text:0000000000000ea0 CMOV2
    stm32eforth-fl.s:2136   .text:0000000000000ea8 $d
    stm32eforth-fl.s:2137   .text:0000000000000eac _MOVE
    stm32eforth-fl.s:2140   .text:0000000000000eb4 MOVE
    stm32eforth-fl.s:2148   .text:0000000000000eca MOVE1
    stm32eforth-fl.s:2145   .text:0000000000000ec2 MOVE0
    stm32eforth-fl.s:2153   .text:0000000000000ed4 MOVE2
    stm32eforth-fl.s:2160   .text:0000000000000edc $d
    stm32eforth-fl.s:2161   .text:0000000000000ee0 _FILL
    stm32eforth-fl.s:2164   .text:0000000000000ee8 FILL
    stm32eforth-fl.s:2167   .text:0000000000000ef0 FILL0
    stm32eforth-fl.s:2170   .text:0000000000000ef4 FILL1
    stm32eforth-fl.s:2176   .text:0000000000000f02 FILL2
    stm32eforth-fl.s:2183   .text:0000000000000f0a $d
    stm32eforth-fl.s:2184   .text:0000000000000f0e _PACKS
    stm32eforth-fl.s:2187   .text:0000000000000f18 PACKS
    stm32eforth-fl.s:2189   .text:0000000000000f1c $d
    stm32eforth-fl.s:2216   .text:0000000000000f74 _DIGIT
    stm32eforth-fl.s:2218   .text:0000000000000f7a $t
    stm32eforth-fl.s:2219   .text:0000000000000f7c DIGIT
    stm32eforth-fl.s:2221   .text:0000000000000f80 $d
ARM GAS  stm32eforth-fl.s 			page 101


    stm32eforth-fl.s:2235   .text:0000000000000fb4 _EXTRC
    stm32eforth-fl.s:2237   .text:0000000000000fbc $t
    stm32eforth-fl.s:2238   .text:0000000000000fbc EXTRC
    stm32eforth-fl.s:2240   .text:0000000000000fc0 $d
    stm32eforth-fl.s:2251   .text:0000000000000fe0 _BDIGS
    stm32eforth-fl.s:2254   .text:0000000000000fe4 BDIGS
    stm32eforth-fl.s:2256   .text:0000000000000fe8 $d
    stm32eforth-fl.s:2265   .text:0000000000000ffc _HOLD
    stm32eforth-fl.s:2268   .text:0000000000001004 HOLD
    stm32eforth-fl.s:2270   .text:0000000000001008 $d
    stm32eforth-fl.s:2283   .text:000000000000102c _DIG
    stm32eforth-fl.s:2285   .text:000000000000102e $t
    stm32eforth-fl.s:2286   .text:0000000000001030 DIG
    stm32eforth-fl.s:2288   .text:0000000000001034 $d
    stm32eforth-fl.s:2298   .text:000000000000104c _DIGS
    stm32eforth-fl.s:2301   .text:0000000000001050 DIGS
    stm32eforth-fl.s:2303   .text:0000000000001054 DIGS1
    stm32eforth-fl.s:2304   .text:0000000000001054 $d
    stm32eforth-fl.s:2308   .text:000000000000106c DIGS2
    stm32eforth-fl.s:2315   .text:0000000000001074 _SIGN
    stm32eforth-fl.s:2318   .text:000000000000107c SIGN
    stm32eforth-fl.s:2320   .text:0000000000001080 $d
    stm32eforth-fl.s:2324   .text:0000000000001098 SIGN1
    stm32eforth-fl.s:2331   .text:00000000000010a0 _EDIGS
    stm32eforth-fl.s:2334   .text:00000000000010a4 EDIGS
    stm32eforth-fl.s:2336   .text:00000000000010a8 $d
    stm32eforth-fl.s:2351   .text:00000000000010c4 STRR
    stm32eforth-fl.s:2352   .text:00000000000010c4 $t
    stm32eforth-fl.s:2353   .text:00000000000010c8 $d
    stm32eforth-fl.s:2367   .text:00000000000010f0 _HEX
    stm32eforth-fl.s:2369   .text:00000000000010f4 $t
    stm32eforth-fl.s:2370   .text:00000000000010f4 HEX
    stm32eforth-fl.s:2372   .text:00000000000010f8 $d
    stm32eforth-fl.s:2381   .text:0000000000001110 _DECIM
    stm32eforth-fl.s:2383   .text:0000000000001118 $t
    stm32eforth-fl.s:2384   .text:0000000000001118 DECIM
    stm32eforth-fl.s:2386   .text:000000000000111c $d
    stm32eforth-fl.s:2398   .text:0000000000001134 _DIGTQ
    stm32eforth-fl.s:2401   .text:000000000000113c DIGTQ
    stm32eforth-fl.s:2403   .text:0000000000001140 $d
    stm32eforth-fl.s:2416   .text:0000000000001188 DGTQ1
    stm32eforth-fl.s:2426   .text:000000000000119c _NUMBQ
    stm32eforth-fl.s:2428   .text:00000000000011a4 $t
    stm32eforth-fl.s:2429   .text:00000000000011a4 NUMBQ
    stm32eforth-fl.s:2431   .text:00000000000011a8 $d
    stm32eforth-fl.s:2447   .text:00000000000011f4 NUMQ1
    stm32eforth-fl.s:2495   .text:00000000000012bc NUMQ6
    stm32eforth-fl.s:2463   .text:0000000000001238 NUMQ2
    stm32eforth-fl.s:2487   .text:00000000000012a0 NUMQ4
    stm32eforth-fl.s:2484   .text:0000000000001294 NUMQ3
    stm32eforth-fl.s:2493   .text:00000000000012b8 NUMQ5
    stm32eforth-fl.s:2510   .text:00000000000012d8 _KEY
    stm32eforth-fl.s:2512   .text:00000000000012dc $t
    stm32eforth-fl.s:2513   .text:00000000000012dc KEY
    stm32eforth-fl.s:2515   .text:00000000000012e0 KEY1
    stm32eforth-fl.s:2516   .text:00000000000012e0 $d
    stm32eforth-fl.s:2524   .text:0000000000001308 GO_REBOOT
ARM GAS  stm32eforth-fl.s 			page 102


    stm32eforth-fl.s:2531   .text:0000000000001310 _SPACE
    stm32eforth-fl.s:2533   .text:0000000000001316 $t
    stm32eforth-fl.s:2534   .text:0000000000001318 SPACE
    stm32eforth-fl.s:2536   .text:000000000000131c $d
    stm32eforth-fl.s:2544   .text:000000000000132c _SPACS
    stm32eforth-fl.s:2547   .text:0000000000001334 SPACS
    stm32eforth-fl.s:2549   .text:0000000000001338 $d
    stm32eforth-fl.s:2555   .text:0000000000001354 CHAR2
    stm32eforth-fl.s:2553   .text:0000000000001350 CHAR1
    stm32eforth-fl.s:2563   .text:0000000000001364 _TYPEE
    stm32eforth-fl.s:2566   .text:000000000000136c TYPEE
    stm32eforth-fl.s:2568   .text:0000000000001370 $d
    stm32eforth-fl.s:2574   .text:0000000000001388 TYPE2
    stm32eforth-fl.s:2570   .text:000000000000137c TYPE1
    stm32eforth-fl.s:2583   .text:000000000000139c _CR
    stm32eforth-fl.s:2586   .text:00000000000013a0 CR
    stm32eforth-fl.s:2588   .text:00000000000013a4 $d
    stm32eforth-fl.s:2602   .text:00000000000013c0 DOSTR
    stm32eforth-fl.s:2603   .text:00000000000013c0 $t
    stm32eforth-fl.s:2605   .text:00000000000013c4 $d
    stm32eforth-fl.s:2624   .text:00000000000013ec STRQP
    stm32eforth-fl.s:2625   .text:00000000000013ec $t
    stm32eforth-fl.s:2626   .text:00000000000013f0 $d
    stm32eforth-fl.s:2636   .text:00000000000013f8 DOTST
    stm32eforth-fl.s:2637   .text:00000000000013f8 $t
    stm32eforth-fl.s:2638   .text:00000000000013fc $d
    stm32eforth-fl.s:2649   .text:0000000000001408 DOTQP
    stm32eforth-fl.s:2650   .text:0000000000001408 $t
    stm32eforth-fl.s:2651   .text:000000000000140c $d
    stm32eforth-fl.s:2659   .text:000000000000141c _DOTR
    stm32eforth-fl.s:2662   .text:0000000000001420 DOTR
    stm32eforth-fl.s:2664   .text:0000000000001424 $d
    stm32eforth-fl.s:2677   .text:0000000000001448 _UDOTR
    stm32eforth-fl.s:2679   .text:000000000000144c $t
    stm32eforth-fl.s:2680   .text:000000000000144c UDOTR
    stm32eforth-fl.s:2682   .text:0000000000001450 $d
    stm32eforth-fl.s:2697   .text:000000000000147c _UDOT
    stm32eforth-fl.s:2700   .text:0000000000001480 UDOT
    stm32eforth-fl.s:2702   .text:0000000000001484 $d
    stm32eforth-fl.s:2713   .text:00000000000014a0 _DOT
    stm32eforth-fl.s:2715   .text:00000000000014a2 $t
    stm32eforth-fl.s:2716   .text:00000000000014a4 DOT
    stm32eforth-fl.s:2718   .text:00000000000014a8 $d
    stm32eforth-fl.s:2725   .text:00000000000014cc DOT1
    stm32eforth-fl.s:2735   .text:00000000000014e0 _QUEST
    stm32eforth-fl.s:2737   .text:00000000000014e2 $t
    stm32eforth-fl.s:2738   .text:00000000000014e4 QUEST
    stm32eforth-fl.s:2740   .text:00000000000014e8 $d
    stm32eforth-fl.s:2754   .text:00000000000014f4 PARS
    stm32eforth-fl.s:2755   .text:00000000000014f4 $t
    stm32eforth-fl.s:2756   .text:00000000000014f8 $d
    stm32eforth-fl.s:2822   .text:0000000000001608 PARS8
    stm32eforth-fl.s:2786   .text:000000000000157c PARS3
    stm32eforth-fl.s:2769   .text:0000000000001534 PARS1
    stm32eforth-fl.s:2784   .text:0000000000001578 PARS2
    stm32eforth-fl.s:2790   .text:0000000000001588 PARS4
    stm32eforth-fl.s:2802   .text:00000000000015b8 PARS5
ARM GAS  stm32eforth-fl.s 			page 103


    stm32eforth-fl.s:2809   .text:00000000000015dc PARS6
    stm32eforth-fl.s:2815   .text:00000000000015f0 PARS7
    stm32eforth-fl.s:2832   .text:000000000000161c _PARSE
    stm32eforth-fl.s:2834   .text:0000000000001622 $t
    stm32eforth-fl.s:2835   .text:0000000000001624 PARSE
    stm32eforth-fl.s:2837   .text:0000000000001628 $d
    stm32eforth-fl.s:2857   .text:0000000000001668 _DOTPR
    stm32eforth-fl.s:2860   .text:000000000000166c DOTPR
    stm32eforth-fl.s:2862   .text:0000000000001670 $d
    stm32eforth-fl.s:2871   .text:0000000000001688 _PAREN
    stm32eforth-fl.s:2873   .text:000000000000168a $t
    stm32eforth-fl.s:2874   .text:000000000000168c PAREN
    stm32eforth-fl.s:2876   .text:0000000000001690 $d
    stm32eforth-fl.s:2885   .text:00000000000016a8 _BKSLA
    stm32eforth-fl.s:2887   .text:00000000000016aa $t
    stm32eforth-fl.s:2888   .text:00000000000016ac BKSLA
    stm32eforth-fl.s:2890   .text:00000000000016b0 $d
    stm32eforth-fl.s:2900   .text:00000000000016c8 _CHAR
    stm32eforth-fl.s:2903   .text:00000000000016d0 CHAR
    stm32eforth-fl.s:2905   .text:00000000000016d4 $d
    stm32eforth-fl.s:2915   .text:00000000000016ec _WORDD
    stm32eforth-fl.s:2918   .text:00000000000016f4 WORDD
    stm32eforth-fl.s:2920   .text:00000000000016f8 $d
    stm32eforth-fl.s:2930   .text:0000000000001710 _TOKEN
    stm32eforth-fl.s:2932   .text:0000000000001716 $t
    stm32eforth-fl.s:2933   .text:0000000000001718 TOKEN
    stm32eforth-fl.s:2935   .text:000000000000171c $d
    stm32eforth-fl.s:2946   .text:000000000000172c _NAMET
    stm32eforth-fl.s:2948   .text:0000000000001732 $t
    stm32eforth-fl.s:2949   .text:0000000000001734 NAMET
    stm32eforth-fl.s:2951   .text:0000000000001738 $d
    stm32eforth-fl.s:2967   .text:0000000000001758 _SAMEQ
    stm32eforth-fl.s:2969   .text:000000000000175e $t
    stm32eforth-fl.s:2970   .text:0000000000001760 SAMEQ
    stm32eforth-fl.s:2972   .text:0000000000001764 $d
    stm32eforth-fl.s:2989   .text:00000000000017ac SAME2
    stm32eforth-fl.s:2974   .text:0000000000001770 SAME1
    stm32eforth-fl.s:3004   .text:00000000000017c0 FIND
    stm32eforth-fl.s:3005   .text:00000000000017c0 $t
    stm32eforth-fl.s:3006   .text:00000000000017c4 $d
    stm32eforth-fl.s:3013   .text:00000000000017e0 FIND1
    stm32eforth-fl.s:3033   .text:0000000000001838 FIND6
    stm32eforth-fl.s:3026   .text:0000000000001820 FIND2
    stm32eforth-fl.s:3031   .text:0000000000001830 FIND3
    stm32eforth-fl.s:3040   .text:0000000000001850 FIND4
    stm32eforth-fl.s:3046   .text:000000000000186c FIND5
    stm32eforth-fl.s:3061   .text:0000000000001894 _NAMEQ
    stm32eforth-fl.s:3063   .text:000000000000189a $t
    stm32eforth-fl.s:3064   .text:000000000000189c NAMEQ
    stm32eforth-fl.s:3066   .text:00000000000018a0 $d
    stm32eforth-fl.s:3081   .text:00000000000018b0 BKSP
    stm32eforth-fl.s:3082   .text:00000000000018b0 $t
    stm32eforth-fl.s:3083   .text:00000000000018b4 $d
    stm32eforth-fl.s:3100   .text:00000000000018f8 BACK1
    stm32eforth-fl.s:3110   .text:00000000000018fc TAP
    stm32eforth-fl.s:3111   .text:00000000000018fc $t
    stm32eforth-fl.s:3112   .text:0000000000001900 $d
ARM GAS  stm32eforth-fl.s 			page 104


    stm32eforth-fl.s:3127   .text:0000000000001918 KTAP
    stm32eforth-fl.s:3128   .text:0000000000001918 TTAP
    stm32eforth-fl.s:3129   .text:0000000000001918 $t
    stm32eforth-fl.s:3130   .text:000000000000191c $d
    stm32eforth-fl.s:3144   .text:000000000000195c KTAP2
    stm32eforth-fl.s:3141   .text:0000000000001954 KTAP1
    stm32eforth-fl.s:3155   .text:0000000000001974 _ACCEP
    stm32eforth-fl.s:3158   .text:000000000000197c ACCEP
    stm32eforth-fl.s:3160   .text:0000000000001980 $d
    stm32eforth-fl.s:3163   .text:000000000000198c ACCP1
    stm32eforth-fl.s:3180   .text:00000000000019d4 ACCP4
    stm32eforth-fl.s:3175   .text:00000000000019c8 ACCP2
    stm32eforth-fl.s:3178   .text:00000000000019cc ACCP3
    stm32eforth-fl.s:3190   .text:00000000000019e8 _QUERY
    stm32eforth-fl.s:3192   .text:00000000000019ee $t
    stm32eforth-fl.s:3193   .text:00000000000019f0 QUERY
    stm32eforth-fl.s:3195   .text:00000000000019f4 $d
    stm32eforth-fl.s:3213   .text:0000000000001a28 _ABORT
    stm32eforth-fl.s:3215   .text:0000000000001a2e $t
    stm32eforth-fl.s:3216   .text:0000000000001a30 ABORT
    stm32eforth-fl.s:3218   .text:0000000000001a34 $d
    stm32eforth-fl.s:3352   .text:0000000000001bc4 PRESE
    stm32eforth-fl.s:3365   .text:0000000000001be4 QUIT
    stm32eforth-fl.s:3234   .text:0000000000001a5c ABORQ
    stm32eforth-fl.s:3235   .text:0000000000001a5c $t
    stm32eforth-fl.s:3236   .text:0000000000001a60 $d
    stm32eforth-fl.s:3242   .text:0000000000001a80 ABOR1
    stm32eforth-fl.s:3254   .text:0000000000001a90 _INTER
    stm32eforth-fl.s:3256   .text:0000000000001a9c $t
    stm32eforth-fl.s:3259   .text:0000000000001aa0 $d
    stm32eforth-fl.s:3268   .text:0000000000001adc INTE1
    stm32eforth-fl.s:3265   .text:0000000000001ad2 $t
    stm32eforth-fl.s:3266   .text:0000000000001ad4 $d
    stm32eforth-fl.s:3272   .text:0000000000001aec INTE2
    stm32eforth-fl.s:3279   .text:0000000000001af4 _LBRAC
    stm32eforth-fl.s:3281   .text:0000000000001af6 $t
    stm32eforth-fl.s:3282   .text:0000000000001af8 LBRAC
    stm32eforth-fl.s:3284   .text:0000000000001afc $d
    stm32eforth-fl.s:3293   .text:0000000000001b14 _DOTOK
    stm32eforth-fl.s:3295   .text:0000000000001b18 $t
    stm32eforth-fl.s:3296   .text:0000000000001b18 DOTOK
    stm32eforth-fl.s:3298   .text:0000000000001b1c $d
    stm32eforth-fl.s:3304   .text:0000000000001b40 DOTO1
    stm32eforth-fl.s:3305   .text:0000000000001b40 $d
    stm32eforth-fl.s:3312   .text:0000000000001b4c _QSTAC
    stm32eforth-fl.s:3315   .text:0000000000001b54 QSTAC
    stm32eforth-fl.s:3317   .text:0000000000001b58 $d
    stm32eforth-fl.s:3320   .text:0000000000001b70 $d
    stm32eforth-fl.s:3326   .text:0000000000001b78 _EVAL
    stm32eforth-fl.s:3329   .text:0000000000001b80 EVAL
    stm32eforth-fl.s:3331   .text:0000000000001b84 EVAL1
    stm32eforth-fl.s:3332   .text:0000000000001b84 $d
    stm32eforth-fl.s:3340   .text:0000000000001bac EVAL2
    stm32eforth-fl.s:3349   .text:0000000000001bbc _PRESE
    stm32eforth-fl.s:3354   .text:0000000000001bc8 $d
    stm32eforth-fl.s:3362   .text:0000000000001bdc _QUIT
    stm32eforth-fl.s:3366   .text:0000000000001be4 $d
ARM GAS  stm32eforth-fl.s 			page 105


    stm32eforth-fl.s:3368   .text:0000000000001bf0 QUIT1
    stm32eforth-fl.s:3370   .text:0000000000001bf4 QUIT2
    stm32eforth-fl.s:3378   .text:0000000000001c04 $t
    stm32eforth-fl.s:3716   .text:000000000000201c flash_regs
    stm32eforth-fl.s:3401   .text:0000000000001c28 WAIT_BSY
    stm32eforth-fl.s:3403   .text:0000000000001c2a WAIT1
    stm32eforth-fl.s:3417   .text:0000000000001c34 $d
    stm32eforth-fl.s:3418   .text:0000000000001c38 _EPAGE
    stm32eforth-fl.s:3422   .text:0000000000001c44 EPAGE
    stm32eforth-fl.s:3439   .text:0000000000001c6c HWORD_WRITE
    stm32eforth-fl.s:3457   .text:0000000000001c94 $d
    stm32eforth-fl.s:3458   .text:0000000000001c98 _ISTOR
    stm32eforth-fl.s:3461   .text:0000000000001c9c ISTOR
    stm32eforth-fl.s:3463   .text:0000000000001ca0 $d
    stm32eforth-fl.s:3469   .text:0000000000001ccc $d
    stm32eforth-fl.s:3484   .text:0000000000001d08 _IMG_SIZE
    stm32eforth-fl.s:3487   .text:0000000000001d14 IMG_SIZE
    stm32eforth-fl.s:3489   .text:0000000000001d18 $d
    stm32eforth-fl.s:3505   .text:0000000000001d54 _IMGQ
    stm32eforth-fl.s:3508   .text:0000000000001d5c IMGQ
    stm32eforth-fl.s:3510   .text:0000000000001d60 $d
    stm32eforth-fl.s:3521   .text:0000000000001d80 _LOAD_IMG
    stm32eforth-fl.s:3524   .text:0000000000001d8c LOAD_IMG
    stm32eforth-fl.s:3526   .text:0000000000001d90 $d
    stm32eforth-fl.s:3553   .text:0000000000001de8 _ERASE_MPG
    stm32eforth-fl.s:3555   .text:0000000000001df2 $t
    stm32eforth-fl.s:3556   .text:0000000000001df4 ERASE_MPG
    stm32eforth-fl.s:3558   .text:0000000000001df8 $d
    stm32eforth-fl.s:3617   .text:0000000000001ec8 PG_TO_ADR
    stm32eforth-fl.s:3567   .text:0000000000001e30 $d
    stm32eforth-fl.s:3578   .text:0000000000001e54 _FLSH_WR
    stm32eforth-fl.s:3581   .text:0000000000001e5c FLSH_WR
    stm32eforth-fl.s:3582   .text:0000000000001e5c $t
    stm32eforth-fl.s:3583   .text:0000000000001e60 $d
    stm32eforth-fl.s:3603   .text:0000000000001ea8 _ADR_TO_PG
    stm32eforth-fl.s:3606   .text:0000000000001eb0 ADR_TO_PG
    stm32eforth-fl.s:3613   .text:0000000000001ebc $d
    stm32eforth-fl.s:3614   .text:0000000000001ec0 _PG_TO_ADR
    stm32eforth-fl.s:3624   .text:0000000000001ed4 $d
    stm32eforth-fl.s:3625   .text:0000000000001ed8 _ERASE_IMG
    stm32eforth-fl.s:3627   .text:0000000000001ee2 $t
    stm32eforth-fl.s:3628   .text:0000000000001ee4 ERASE_IMG
    stm32eforth-fl.s:3630   .text:0000000000001ee8 $d
    stm32eforth-fl.s:3645   .text:0000000000001f24 _SAVE_IMG
    stm32eforth-fl.s:3648   .text:0000000000001f30 SAVE_IMG
    stm32eforth-fl.s:3650   .text:0000000000001f34 $d
    stm32eforth-fl.s:3679   .text:0000000000001f98 _TURNKEY
    stm32eforth-fl.s:3681   .text:0000000000001fa0 $t
    stm32eforth-fl.s:3682   .text:0000000000001fa0 TURNKEY
    stm32eforth-fl.s:3684   .text:0000000000001fa4 $d
    stm32eforth-fl.s:3731   .text:0000000000002030 TICK
    stm32eforth-fl.s:3693   .text:0000000000001fc8 _FORGET
    stm32eforth-fl.s:3696   .text:0000000000001fd0 FORGET
    stm32eforth-fl.s:3698   .text:0000000000001fd4 $d
    stm32eforth-fl.s:4151   .text:0000000000002490 OVERT
    stm32eforth-fl.s:3717   .text:000000000000201c $d
    stm32eforth-fl.s:3728   .text:000000000000202c _TICK
ARM GAS  stm32eforth-fl.s 			page 106


    stm32eforth-fl.s:3730   .text:000000000000202e $t
    stm32eforth-fl.s:3733   .text:0000000000002034 $d
    stm32eforth-fl.s:3737   .text:0000000000002048 TICK1
    stm32eforth-fl.s:3744   .text:0000000000002054 _ALLOT
    stm32eforth-fl.s:3746   .text:000000000000205a $t
    stm32eforth-fl.s:3747   .text:000000000000205c ALLOT
    stm32eforth-fl.s:3749   .text:0000000000002060 $d
    stm32eforth-fl.s:3757   .text:0000000000002070 _COMMA
    stm32eforth-fl.s:3758   .text:0000000000002072 $t
    stm32eforth-fl.s:3759   .text:0000000000002074 COMMA
    stm32eforth-fl.s:3761   .text:0000000000002078 $d
    stm32eforth-fl.s:3772   .text:0000000000002094 $d
    stm32eforth-fl.s:3773   .text:0000000000002098 _BCOMP
    stm32eforth-fl.s:3775   .text:00000000000020a2 $t
    stm32eforth-fl.s:3776   .text:00000000000020a4 BCOMP
    stm32eforth-fl.s:3778   .text:00000000000020a8 $d
    stm32eforth-fl.s:3786   .text:00000000000020b8 _COMPI
    stm32eforth-fl.s:3788   .text:00000000000020c0 $t
    stm32eforth-fl.s:3789   .text:00000000000020c0 COMPI
    stm32eforth-fl.s:3791   .text:00000000000020c4 $d
    stm32eforth-fl.s:3805   .text:00000000000020f0 _LITER
    stm32eforth-fl.s:3807   .text:00000000000020f8 $t
    stm32eforth-fl.s:3808   .text:00000000000020f8 LITER
    stm32eforth-fl.s:3810   .text:00000000000020fc $d
    stm32eforth-fl.s:4197   .text:00000000000024f0 CALLC
    stm32eforth-fl.s:3821   .text:0000000000002110 STRCQ
    stm32eforth-fl.s:3822   .text:0000000000002110 $t
    stm32eforth-fl.s:3823   .text:0000000000002114 $d
    stm32eforth-fl.s:3842   .text:000000000000214c _FOR
    stm32eforth-fl.s:3844   .text:0000000000002150 $t
    stm32eforth-fl.s:3845   .text:0000000000002150 FOR
    stm32eforth-fl.s:3847   .text:0000000000002154 $d
    stm32eforth-fl.s:3855   .text:000000000000216c _BEGIN
    stm32eforth-fl.s:3857   .text:0000000000002172 $t
    stm32eforth-fl.s:3858   .text:0000000000002174 BEGIN
    stm32eforth-fl.s:3860   .text:0000000000002178 $d
    stm32eforth-fl.s:3866   .text:0000000000002180 $d
    stm32eforth-fl.s:3867   .text:0000000000002184 _FNEXT
    stm32eforth-fl.s:3870   .text:000000000000218c FNEXT
    stm32eforth-fl.s:3872   .text:0000000000002190 $d
    stm32eforth-fl.s:3880   .text:00000000000021a8 _UNTIL
    stm32eforth-fl.s:3882   .text:00000000000021ae $t
    stm32eforth-fl.s:3883   .text:00000000000021b0 UNTIL
    stm32eforth-fl.s:3885   .text:00000000000021b4 $d
    stm32eforth-fl.s:3893   .text:00000000000021cc _AGAIN
    stm32eforth-fl.s:3895   .text:00000000000021d2 $t
    stm32eforth-fl.s:3896   .text:00000000000021d4 AGAIN
    stm32eforth-fl.s:3898   .text:00000000000021d8 $d
    stm32eforth-fl.s:3906   .text:00000000000021f0 _IFF
    stm32eforth-fl.s:3909   .text:00000000000021f4 IFF
    stm32eforth-fl.s:3911   .text:00000000000021f8 $d
    stm32eforth-fl.s:3922   .text:0000000000002220 _AHEAD
    stm32eforth-fl.s:3924   .text:0000000000002226 $t
    stm32eforth-fl.s:3925   .text:0000000000002228 AHEAD
    stm32eforth-fl.s:3927   .text:000000000000222c $d
    stm32eforth-fl.s:3938   .text:0000000000002254 _REPEA
    stm32eforth-fl.s:3941   .text:000000000000225c REPEA
ARM GAS  stm32eforth-fl.s 			page 107


    stm32eforth-fl.s:3943   .text:0000000000002260 $d
    stm32eforth-fl.s:3953   .text:0000000000002278 _THENN
    stm32eforth-fl.s:3956   .text:0000000000002280 THENN
    stm32eforth-fl.s:3958   .text:0000000000002284 $d
    stm32eforth-fl.s:3967   .text:0000000000002298 _AFT
    stm32eforth-fl.s:3969   .text:000000000000229c $t
    stm32eforth-fl.s:3970   .text:000000000000229c AFT
    stm32eforth-fl.s:3972   .text:00000000000022a0 $d
    stm32eforth-fl.s:3982   .text:00000000000022b8 _ELSEE
    stm32eforth-fl.s:3985   .text:00000000000022c0 ELSEE
    stm32eforth-fl.s:3987   .text:00000000000022c4 $d
    stm32eforth-fl.s:3996   .text:00000000000022d8 _WHILE
    stm32eforth-fl.s:3998   .text:00000000000022de $t
    stm32eforth-fl.s:3999   .text:00000000000022e0 WHILE
    stm32eforth-fl.s:4001   .text:00000000000022e4 $d
    stm32eforth-fl.s:4009   .text:00000000000022f4 _ABRTQ
    stm32eforth-fl.s:4012   .text:00000000000022fc ABRTQ
    stm32eforth-fl.s:4014   .text:0000000000002300 $d
    stm32eforth-fl.s:4022   .text:0000000000002318 _STRQ
    stm32eforth-fl.s:4025   .text:000000000000231c STRQ
    stm32eforth-fl.s:4027   .text:0000000000002320 $d
    stm32eforth-fl.s:4035   .text:0000000000002338 _DOTQ
    stm32eforth-fl.s:4038   .text:000000000000233c DOTQ
    stm32eforth-fl.s:4040   .text:0000000000002340 $d
    stm32eforth-fl.s:4051   .text:0000000000002358 _UNIQU
    stm32eforth-fl.s:4053   .text:0000000000002360 $t
    stm32eforth-fl.s:4054   .text:0000000000002360 UNIQU
    stm32eforth-fl.s:4056   .text:0000000000002364 $d
    stm32eforth-fl.s:4063   .text:000000000000238c UNIQ1
    stm32eforth-fl.s:4060   .text:0000000000002380 $d
    stm32eforth-fl.s:4074   .text:0000000000002394 SNAME
    stm32eforth-fl.s:4075   .text:0000000000002394 $t
    stm32eforth-fl.s:4076   .text:0000000000002398 $d
    stm32eforth-fl.s:4092   .text:00000000000023dc SNAM1
    stm32eforth-fl.s:4102   .text:00000000000023f4 _SCOMP
    stm32eforth-fl.s:4104   .text:00000000000023fe $t
    stm32eforth-fl.s:4105   .text:0000000000002400 SCOMP
    stm32eforth-fl.s:4107   .text:0000000000002404 $d
    stm32eforth-fl.s:4119   .text:000000000000243c SCOM2
    stm32eforth-fl.s:4116   .text:0000000000002434 SCOM1
    stm32eforth-fl.s:4124   .text:0000000000002450 SCOM3
    stm32eforth-fl.s:4131   .text:0000000000002458 COLON_ABORT
    stm32eforth-fl.s:4132   .text:0000000000002458 $t
    stm32eforth-fl.s:4133   .text:000000000000245c $d
    stm32eforth-fl.s:4148   .text:0000000000002488 _OVERT
    stm32eforth-fl.s:4150   .text:000000000000248e $t
    stm32eforth-fl.s:4153   .text:0000000000002494 $d
    stm32eforth-fl.s:4163   .text:00000000000024ac _SEMIS
    stm32eforth-fl.s:4165   .text:00000000000024ae $t
    stm32eforth-fl.s:4166   .text:00000000000024b0 SEMIS
    stm32eforth-fl.s:4168   .text:00000000000024b4 $d
    stm32eforth-fl.s:4179   .text:00000000000024d4 _RBRAC
    stm32eforth-fl.s:4181   .text:00000000000024d6 $t
    stm32eforth-fl.s:4182   .text:00000000000024d8 RBRAC
    stm32eforth-fl.s:4184   .text:00000000000024dc $d
    stm32eforth-fl.s:4198   .text:00000000000024f0 $t
    stm32eforth-fl.s:4199   .text:00000000000024f4 $d
ARM GAS  stm32eforth-fl.s 			page 108


    stm32eforth-fl.s:4209   .text:000000000000250c _COLON
    stm32eforth-fl.s:4211   .text:000000000000250e $t
    stm32eforth-fl.s:4212   .text:0000000000002510 COLON
    stm32eforth-fl.s:4214   .text:0000000000002514 $d
    stm32eforth-fl.s:4224   .text:000000000000252c _IMMED
    stm32eforth-fl.s:4226   .text:0000000000002536 $t
    stm32eforth-fl.s:4227   .text:0000000000002538 IMMED
    stm32eforth-fl.s:4229   .text:000000000000253c $d
    stm32eforth-fl.s:4246   .text:0000000000002568 _CONST
    stm32eforth-fl.s:4249   .text:0000000000002574 CONST
    stm32eforth-fl.s:4251   .text:0000000000002578 $d
    stm32eforth-fl.s:4266   .text:00000000000025ac _CREAT
    stm32eforth-fl.s:4269   .text:00000000000025b4 CREAT
    stm32eforth-fl.s:4271   .text:00000000000025b8 $d
    stm32eforth-fl.s:4283   .text:00000000000025dc _VARIA
    stm32eforth-fl.s:4286   .text:00000000000025e8 VARIA
    stm32eforth-fl.s:4288   .text:00000000000025ec $d
    stm32eforth-fl.s:4301   .text:0000000000002610 _TRACE
    stm32eforth-fl.s:4303   .text:0000000000002616 $t
    stm32eforth-fl.s:4304   .text:0000000000002618 TRACE
    stm32eforth-fl.s:4306   .text:000000000000261c $d
    stm32eforth-fl.s:4313   .text:000000000000262c _DBG_PRT
    stm32eforth-fl.s:4315   .text:0000000000002634 DBG_PRT
    stm32eforth-fl.s:4316   .text:0000000000002634 $t
    stm32eforth-fl.s:4317   .text:0000000000002638 $d
    stm32eforth-fl.s:4418   .text:0000000000002764 TNAME
    stm32eforth-fl.s:4333   .text:0000000000002658 DMP
    stm32eforth-fl.s:4334   .text:0000000000002658 $t
    stm32eforth-fl.s:4335   .text:000000000000265c $d
    stm32eforth-fl.s:4347   .text:0000000000002694 PDUM2
    stm32eforth-fl.s:4341   .text:000000000000267c PDUM1
    stm32eforth-fl.s:4355   .text:00000000000026a0 $d
    stm32eforth-fl.s:4356   .text:00000000000026a4 _DUMP
    stm32eforth-fl.s:4359   .text:00000000000026ac DUMP
    stm32eforth-fl.s:4361   .text:00000000000026b0 $d
    stm32eforth-fl.s:4379   .text:0000000000002700 DUMP4
    stm32eforth-fl.s:4369   .text:00000000000026d8 DUMP1
    stm32eforth-fl.s:4381   .text:0000000000002708 DUMP3
    stm32eforth-fl.s:4392   .text:0000000000002720 _DOTS
    stm32eforth-fl.s:4396   .text:0000000000002724 DOTS
    stm32eforth-fl.s:4398   .text:0000000000002728 $d
    stm32eforth-fl.s:4406   .text:0000000000002748 DOTS2
    stm32eforth-fl.s:4402   .text:000000000000273c DOTS1
    stm32eforth-fl.s:4415   .text:000000000000275c _TNAME
    stm32eforth-fl.s:4417   .text:0000000000002762 $t
    stm32eforth-fl.s:4420   .text:0000000000002768 $d
    stm32eforth-fl.s:4423   .text:0000000000002774 TNAM1
    stm32eforth-fl.s:4434   .text:00000000000027a8 TNAM2
    stm32eforth-fl.s:4443   .text:00000000000027b8 _DOTID
    stm32eforth-fl.s:4445   .text:00000000000027bc $t
    stm32eforth-fl.s:4446   .text:00000000000027bc DOTID
    stm32eforth-fl.s:4448   .text:00000000000027c0 $d
    stm32eforth-fl.s:4455   .text:00000000000027e4 DOTI1
    stm32eforth-fl.s:4456   .text:00000000000027f2 $t
    stm32eforth-fl.s:4457   .text:00000000000027f4 $d
    stm32eforth-fl.s:4459   *ABS*:0000000000000000 WANT_SEE
    stm32eforth-fl.s:4539   .text:00000000000027fc _WORDS
ARM GAS  stm32eforth-fl.s 			page 109


    stm32eforth-fl.s:4541   .text:0000000000002802 $t
    stm32eforth-fl.s:4542   .text:0000000000002804 WORDS
    stm32eforth-fl.s:4544   .text:0000000000002808 $d
    stm32eforth-fl.s:4547   .text:0000000000002814 WORS1
    stm32eforth-fl.s:4556   .text:000000000000283c WORS2
    stm32eforth-fl.s:4569   .text:0000000000002840 VERSN
    stm32eforth-fl.s:4570   .text:0000000000002840 $t
    stm32eforth-fl.s:4571   .text:0000000000002844 $d
    stm32eforth-fl.s:4578   .text:0000000000002854 _HI
    stm32eforth-fl.s:4583   .text:000000000000285c $d
    stm32eforth-fl.s:4585   .text:0000000000002880 $d
    stm32eforth-fl.s:4611   .text:00000000000028d0 $t
    stm32eforth-fl.s:4618   .text:00000000000028ea COLD1
    stm32eforth-fl.s:4619   .text:00000000000028ea $d
    stm32eforth-fl.s:4634   .text:000000000000293a COLD2
    stm32eforth-fl.s:4635   .text:000000000000293a $t
    stm32eforth-fl.s:4637   .text:000000000000293c $d
    stm32eforth-fl.s:4642   .text.user:0000000000000000 $d
    stm32eforth-fl.s:4644   .text:0000000000002940 $d
    stm32eforth-fl.s:340    .text:000000000000002f $d
    stm32eforth-fl.s:340    .text:0000000000000030 $t
    stm32eforth-fl.s:622    .text:0000000000000449 $d
    stm32eforth-fl.s:622    .text:000000000000044a $t
    stm32eforth-fl.s:671    .text:00000000000004ed $d
    stm32eforth-fl.s:671    .text:00000000000004ee $t
    stm32eforth-fl.s:691    .text:0000000000000515 $d
    stm32eforth-fl.s:691    .text:0000000000000516 $t
    stm32eforth-fl.s:715    .text:0000000000000547 $d
    stm32eforth-fl.s:715    .text:0000000000000548 $t
    stm32eforth-fl.s:826    .text:00000000000005c7 $d
    stm32eforth-fl.s:860    .text:00000000000005f3 $d
    stm32eforth-fl.s:860    .text:00000000000005f4 $t
    stm32eforth-fl.s:873    .text:0000000000000607 $d
    stm32eforth-fl.s:873    .text:0000000000000608 $t
    stm32eforth-fl.s:884    .text:0000000000000613 $d
    stm32eforth-fl.s:884    .text:0000000000000614 $t
    stm32eforth-fl.s:896    .text:0000000000000625 $d
    stm32eforth-fl.s:896    .text:0000000000000626 $t
    stm32eforth-fl.s:908    .text:0000000000000637 $d
    stm32eforth-fl.s:908    .text:0000000000000638 $t
    stm32eforth-fl.s:955    .text:000000000000067d $d
    stm32eforth-fl.s:955    .text:000000000000067e $t
    stm32eforth-fl.s:977    .text:000000000000069f $d
    stm32eforth-fl.s:977    .text:00000000000006a0 $t
    stm32eforth-fl.s:990    .text:00000000000006b1 $d
    stm32eforth-fl.s:990    .text:00000000000006b2 $t
    stm32eforth-fl.s:1002   .text:00000000000006c3 $d
    stm32eforth-fl.s:1002   .text:00000000000006c4 $t
    stm32eforth-fl.s:1027   .text:00000000000006e5 $d
    stm32eforth-fl.s:1027   .text:00000000000006e6 $t
    stm32eforth-fl.s:1066   .text:000000000000072b $d
    stm32eforth-fl.s:1066   .text:000000000000072c $t
    stm32eforth-fl.s:1078   .text:0000000000000741 $d
    stm32eforth-fl.s:1078   .text:0000000000000742 $t
    stm32eforth-fl.s:1140   .text:000000000000079b $d
    stm32eforth-fl.s:1140   .text:000000000000079c $t
    stm32eforth-fl.s:1154   .text:00000000000007af $d
ARM GAS  stm32eforth-fl.s 			page 110


    stm32eforth-fl.s:1154   .text:00000000000007b0 $t
    stm32eforth-fl.s:1165   .text:00000000000007bd $d
    stm32eforth-fl.s:1165   .text:00000000000007be $t
    stm32eforth-fl.s:1176   .text:00000000000007cd $d
    stm32eforth-fl.s:1176   .text:00000000000007ce $t
    stm32eforth-fl.s:1187   .text:00000000000007dd $d
    stm32eforth-fl.s:1187   .text:00000000000007de $t
    stm32eforth-fl.s:1220   .text:000000000000080d $d
    stm32eforth-fl.s:1220   .text:000000000000080e $t
    stm32eforth-fl.s:1254   .text:0000000000000841 $d
    stm32eforth-fl.s:1254   .text:0000000000000842 $t
    stm32eforth-fl.s:1265   .text:0000000000000851 $d
    stm32eforth-fl.s:1265   .text:0000000000000852 $t
    stm32eforth-fl.s:1276   .text:0000000000000863 $d
    stm32eforth-fl.s:1276   .text:0000000000000864 $t
    stm32eforth-fl.s:1315   .text:000000000000089f $d
    stm32eforth-fl.s:1315   .text:00000000000008a0 $t
    stm32eforth-fl.s:1328   .text:00000000000008b3 $d
    stm32eforth-fl.s:1328   .text:00000000000008b4 $t
    stm32eforth-fl.s:1355   .text:00000000000008e1 $d
    stm32eforth-fl.s:1355   .text:00000000000008e2 $t
    stm32eforth-fl.s:1379   .text:0000000000000905 $d
    stm32eforth-fl.s:1379   .text:0000000000000906 $t
    stm32eforth-fl.s:1408   .text:0000000000000933 $d
    stm32eforth-fl.s:1408   .text:0000000000000934 $t
    stm32eforth-fl.s:1481   .text:00000000000009a3 $d
    stm32eforth-fl.s:1481   .text:00000000000009a4 $t
    stm32eforth-fl.s:1496   .text:00000000000009bb $d
    stm32eforth-fl.s:1496   .text:00000000000009bc $t
    stm32eforth-fl.s:1511   .text:00000000000009d7 $d
    stm32eforth-fl.s:1511   .text:00000000000009d8 $t
    stm32eforth-fl.s:1584   .text:0000000000000a33 $d
    stm32eforth-fl.s:1584   .text:0000000000000a34 $t
    stm32eforth-fl.s:1595   .text:0000000000000a47 $d
    stm32eforth-fl.s:1595   .text:0000000000000a48 $t
    stm32eforth-fl.s:1630   .text:0000000000000a83 $d
    stm32eforth-fl.s:1630   .text:0000000000000a84 $t
    stm32eforth-fl.s:1654   .text:0000000000000aa1 $d
    stm32eforth-fl.s:1654   .text:0000000000000aa2 $t
    stm32eforth-fl.s:1678   .text:0000000000000acb $d
    stm32eforth-fl.s:1678   .text:0000000000000acc $t
    stm32eforth-fl.s:1727   .text:0000000000000b1d $d
    stm32eforth-fl.s:1727   .text:0000000000000b1e $t
    stm32eforth-fl.s:1750   .text:0000000000000b47 $d
    stm32eforth-fl.s:1750   .text:0000000000000b48 $t
    stm32eforth-fl.s:1761   .text:0000000000000b5d $d
    stm32eforth-fl.s:1761   .text:0000000000000b5e $t
    stm32eforth-fl.s:1776   .text:0000000000000b79 $d
    stm32eforth-fl.s:1776   .text:0000000000000b7a $t
    stm32eforth-fl.s:1789   .text:0000000000000b95 $d
    stm32eforth-fl.s:1789   .text:0000000000000b96 $t
    stm32eforth-fl.s:1815   .text:0000000000000bc9 $d
    stm32eforth-fl.s:1815   .text:0000000000000bca $t
    stm32eforth-fl.s:1831   .text:0000000000000be1 $d
    stm32eforth-fl.s:1831   .text:0000000000000be2 $t
    stm32eforth-fl.s:1850   .text:0000000000000c0f $d
    stm32eforth-fl.s:1850   .text:0000000000000c10 $t
ARM GAS  stm32eforth-fl.s 			page 111


    stm32eforth-fl.s:1917   .text:0000000000000cc1 $d
    stm32eforth-fl.s:1917   .text:0000000000000cc2 $t
    stm32eforth-fl.s:1974   .text:0000000000000d3b $d
    stm32eforth-fl.s:1974   .text:0000000000000d3c $t
    stm32eforth-fl.s:2042   .text:0000000000000de9 $d
    stm32eforth-fl.s:2042   .text:0000000000000dea $t
    stm32eforth-fl.s:2061   .text:0000000000000e11 $d
    stm32eforth-fl.s:2061   .text:0000000000000e12 $t
    stm32eforth-fl.s:2100   .text:0000000000000e63 $d
    stm32eforth-fl.s:2100   .text:0000000000000e64 $t
    stm32eforth-fl.s:2139   .text:0000000000000eb1 $d
    stm32eforth-fl.s:2139   .text:0000000000000eb2 $t
    stm32eforth-fl.s:2163   .text:0000000000000ee5 $d
    stm32eforth-fl.s:2163   .text:0000000000000ee6 $t
    stm32eforth-fl.s:2186   .text:0000000000000f15 $d
    stm32eforth-fl.s:2186   .text:0000000000000f16 $t
    stm32eforth-fl.s:2253   .text:0000000000000fe3 $d
    stm32eforth-fl.s:2253   .text:0000000000000fe4 $t
    stm32eforth-fl.s:2267   .text:0000000000001001 $d
    stm32eforth-fl.s:2267   .text:0000000000001002 $t
    stm32eforth-fl.s:2300   .text:000000000000104f $d
    stm32eforth-fl.s:2300   .text:0000000000001050 $t
    stm32eforth-fl.s:2317   .text:0000000000001079 $d
    stm32eforth-fl.s:2317   .text:000000000000107a $t
    stm32eforth-fl.s:2333   .text:00000000000010a3 $d
    stm32eforth-fl.s:2333   .text:00000000000010a4 $t
    stm32eforth-fl.s:2400   .text:000000000000113b $d
    stm32eforth-fl.s:2400   .text:000000000000113c $t
    stm32eforth-fl.s:2546   .text:0000000000001333 $d
    stm32eforth-fl.s:2546   .text:0000000000001334 $t
    stm32eforth-fl.s:2565   .text:0000000000001369 $d
    stm32eforth-fl.s:2565   .text:000000000000136a $t
    stm32eforth-fl.s:2585   .text:000000000000139f $d
    stm32eforth-fl.s:2585   .text:00000000000013a0 $t
    stm32eforth-fl.s:2661   .text:000000000000141f $d
    stm32eforth-fl.s:2661   .text:0000000000001420 $t
    stm32eforth-fl.s:2699   .text:000000000000147f $d
    stm32eforth-fl.s:2699   .text:0000000000001480 $t
    stm32eforth-fl.s:2859   .text:000000000000166b $d
    stm32eforth-fl.s:2859   .text:000000000000166c $t
    stm32eforth-fl.s:2902   .text:00000000000016cd $d
    stm32eforth-fl.s:2902   .text:00000000000016ce $t
    stm32eforth-fl.s:2917   .text:00000000000016f1 $d
    stm32eforth-fl.s:2917   .text:00000000000016f2 $t
    stm32eforth-fl.s:3157   .text:000000000000197b $d
    stm32eforth-fl.s:3157   .text:000000000000197c $t
    stm32eforth-fl.s:3314   .text:0000000000001b53 $d
    stm32eforth-fl.s:3314   .text:0000000000001b54 $t
    stm32eforth-fl.s:3319   .text:0000000000001b6f $d
    stm32eforth-fl.s:3328   .text:0000000000001b7d $d
    stm32eforth-fl.s:3328   .text:0000000000001b7e $t
    stm32eforth-fl.s:3351   .text:0000000000001bc3 $d
    stm32eforth-fl.s:3351   .text:0000000000001bc4 $t
    stm32eforth-fl.s:3364   .text:0000000000001be1 $d
    stm32eforth-fl.s:3364   .text:0000000000001be2 $t
    stm32eforth-fl.s:3420   .text:0000000000001c43 $d
    stm32eforth-fl.s:3420   .text:0000000000001c44 $t
ARM GAS  stm32eforth-fl.s 			page 112


    stm32eforth-fl.s:3460   .text:0000000000001c9b $d
    stm32eforth-fl.s:3460   .text:0000000000001c9c $t
    stm32eforth-fl.s:3468   .text:0000000000001cc9 $d
    stm32eforth-fl.s:3468   .text:0000000000001cca $t
    stm32eforth-fl.s:3486   .text:0000000000001d11 $d
    stm32eforth-fl.s:3486   .text:0000000000001d12 $t
    stm32eforth-fl.s:3507   .text:0000000000001d59 $d
    stm32eforth-fl.s:3507   .text:0000000000001d5a $t
    stm32eforth-fl.s:3523   .text:0000000000001d89 $d
    stm32eforth-fl.s:3523   .text:0000000000001d8a $t
    stm32eforth-fl.s:3566   .text:0000000000001e2d $d
    stm32eforth-fl.s:3566   .text:0000000000001e2e $t
    stm32eforth-fl.s:3605   .text:0000000000001eaf $d
    stm32eforth-fl.s:3605   .text:0000000000001eb0 $t
    stm32eforth-fl.s:3616   .text:0000000000001ec7 $d
    stm32eforth-fl.s:3616   .text:0000000000001ec8 $t
    stm32eforth-fl.s:3647   .text:0000000000001f2d $d
    stm32eforth-fl.s:3647   .text:0000000000001f2e $t
    stm32eforth-fl.s:3695   .text:0000000000001fcf $d
    stm32eforth-fl.s:3695   .text:0000000000001fd0 $t
    stm32eforth-fl.s:3869   .text:0000000000002189 $d
    stm32eforth-fl.s:3869   .text:000000000000218a $t
    stm32eforth-fl.s:3908   .text:00000000000021f3 $d
    stm32eforth-fl.s:3908   .text:00000000000021f4 $t
    stm32eforth-fl.s:3940   .text:000000000000225b $d
    stm32eforth-fl.s:3940   .text:000000000000225c $t
    stm32eforth-fl.s:3955   .text:000000000000227d $d
    stm32eforth-fl.s:3955   .text:000000000000227e $t
    stm32eforth-fl.s:3984   .text:00000000000022bd $d
    stm32eforth-fl.s:3984   .text:00000000000022be $t
    stm32eforth-fl.s:4011   .text:00000000000022fb $d
    stm32eforth-fl.s:4011   .text:00000000000022fc $t
    stm32eforth-fl.s:4024   .text:000000000000231b $d
    stm32eforth-fl.s:4024   .text:000000000000231c $t
    stm32eforth-fl.s:4037   .text:000000000000233b $d
    stm32eforth-fl.s:4037   .text:000000000000233c $t
    stm32eforth-fl.s:4248   .text:0000000000002571 $d
    stm32eforth-fl.s:4248   .text:0000000000002572 $t
    stm32eforth-fl.s:4268   .text:00000000000025b3 $d
    stm32eforth-fl.s:4268   .text:00000000000025b4 $t
    stm32eforth-fl.s:4285   .text:00000000000025e5 $d
    stm32eforth-fl.s:4285   .text:00000000000025e6 $t
    stm32eforth-fl.s:4358   .text:00000000000026a9 $d
    stm32eforth-fl.s:4358   .text:00000000000026aa $t
    stm32eforth-fl.s:4395   .text:0000000000002723 $d
    stm32eforth-fl.s:4395   .text:0000000000002724 $t
    stm32eforth-fl.s:4580   .text:0000000000002857 $d
    stm32eforth-fl.s:4580   .text:0000000000002858 $t
    stm32eforth-fl.s:4584   .text:000000000000287f $d

UNDEFINED SYMBOLS
_mstack
