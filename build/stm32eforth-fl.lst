ARM GAS  stm32eforth-fl.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	* 
   8              	*	This version use indirect threaded model. This model enable 
   9              	*	leaving the core Forth system in FLASH memory while the users 
  10              	*	definitions reside in RAM. 
  11              	*	R0 	is used as IP , inner interpreter address pointer 
  12              	*	R4 	is used as WP , working register 
  13              	*	R8 	is used as link register by _NEST macro it is initialized 
  14              	*  		NEST address and MUST BE PRESERVED.
  15              	*
  16              	*     Use USART1 for console I/O
  17              	*     port config: 115200 8N1 
  18              	*     TX on  PA9,  RX on PA10  
  19              	*
  20              	*     eForth is executed from flash, not copied to RAM
  21              	*     eForth use main stack R13 as return stack (thread stack not used) 
  22              	*
  23              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  24              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  25              	*     a 128 bytes tib is reserved below flwr_buffer 
  26              	*     Forth dstack is below tib and reserve 512 bytes 
  27              	*   
  28              	******************************************************
  29              	
  30              	*****************************************************************************
  31              	*	STM32eForth version 7.20
  32              	*	Chen-Hanson Ting,  July 2014
  33              	
  34              	*	Subroutine Threaded Forth Model
  35              	*	Adapted to STM32F407-Discovery Board
  36              	*	Assembled by Keil uVision 5.10
  37              	
  38              	*	Version 4.03
  39              	*	Direct Threaded Forth Model
  40              	*	Derived from 80386 eForth versin 4.02
  41              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  42              	
  43              	*	Subroutine thread (Branch-Link) model
  44              	*	  Register assignments
  45              	*	IP	 	R0 	*scratch
  46              	*	SP	 	R1  * data stack pointer
  47              	*	RP	 	R2 * return stack pointer 
  48              	*	UP	 	R3 
  49              	*	WP	 	R4	*scratch 
  50              	*	TOS	 	R5  * top of data stack
  51              	*	XP	 	R6 	*scratch
  52              	*	YP	 	R7	*scratch
  53              	*	  All Forth words are called by 
  54              	*	BL.W	addr
  55              	*	  All low level code words are terminaled by
  56              	*	BX	LR 	(_RET)
  57              	*	  All high level Forth words start with
ARM GAS  stm32eforth-fl.s 			page 2


  58              	*	STRFD	RP!,{LR}	(_NEST)
  59              	*	  All high level Forth words end with
  60              	*	LDRFD	RP!,{PC}	(_UNNEST)
  61              	*	  Top of data stack is cached in R5
  62              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  63              	*	TX on PA9 and RX on PA10.
  64              	
  65              	*	Version 5.02, 09oct04cht
  66              	*	fOR ADuC702x from Analog Devices
  67              	*	Version 6.01, 10apr08cht a
  68              	*	.p2align 2 to at91sam7x256
  69              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  70              	*	Running under uVision3 RealView from Keil
  71              	*	Version 7.01, 29jun14cht
  72              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  73              	*	.p2aligned to eForth 2 Model
  74              	*	Assembled to flash memory and executed therefrom.
  75              	*	Version 7.10, 30jun14cht
  76              	*	Flash memory mapped to Page 0 where codes are executed
  77              	*	Version 7.20, 02jul14cht
  78              	*	Irreducible Complexity
  79              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  80              	*	TURNKEY saves current application from RAM to flash.
  81              	*********************************************************/
  82              	
  83              	  .syntax unified
  84              	  .cpu cortex-m3
  85              	  .fpu softvfp
  86              	  .thumb
  87              	
  88              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
ARM GAS  stm32eforth-fl.s 			page 3


  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
ARM GAS  stm32eforth-fl.s 			page 4


  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
ARM GAS  stm32eforth-fl.s 			page 5


 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  89              	
  90              	/* blue pill specific constants */ 
  91              	  .equ LED_GPIO, GPIOC_BASE_ADR
  92              	  .equ LED_PIN, 13
  93              	  .equ UART, USART1_BASE_ADR 
  94              	
  95              	/* eForth specific constants */
  96              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  97              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  98              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  99              	.equ UPP ,	0x20000000	/*start of user area (UP0) */
 100              	.equ DTOP ,	0x20000100	/*start of usable RAM area (HERE) */
 101              	.equ DEND , 0x20004E00  /*usable RAM end */
 102              	 .equ RAMOFFSET ,	0x20000000	// remap
 103              	 .equ RAMEND, 0x20005000 // 20Ko
 104              	
 105              	/*************************************
 106              	   system variables offset from UPP
 107              	*************************************/
 108              	  .equ SEED_OFS, 4    // prng seed 
 109              	  .equ TICKS_OFS, SEED_OFS+4  // millseconds counter
 110              	  .equ TIMER_OFS, TICKS_OFS+4  // count down timer
 111              	  .equ FTRACE_OFS, TIMER_OFS+4  // compile to RAM 
 112              	  .equ IMG_SIGN_OFS, FTRACE_OFS+4  // image signature  
 113              	  .equ BOOT_OFS, IMG_SIGN_OFS+4  // boot program address
 114              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
 115              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
 116              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
 117              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
 118              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
 119              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
 120              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
 121              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
 122              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
 123              	  .equ FORTH_CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
 124              	  .equ RAM_CTOP_OFS, FORTH_CTOP_OFS+4  // ram free dictionary address
 125              	  .equ LASTN_OFS, RAM_CTOP_OFS+4     // last word in dictionary link nfa 
 126              	  .equ VARS_END_OFS, LASTN_OFS+4 // end of system variables  
 127              	  
 128              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
 129              	  .equ RX_QUEUE_OFS, VARS_END_OFS+4 // rx queue 
 130              	  .equ RX_HEAD_OFS, RX_QUEUE_OFS+RX_QUEUE_SIZE // queue head indice 
 131              	  .equ RX_TAIL_OFS, RX_HEAD_OFS+4 // queue tail indice 
 132              	  	
 133              	
 134              	/***********************************************
 135              	* MACROS
 136              	*	Assemble inline direct threaded code ending.
 137              	***********************************************/
 138              		.macro _CALL fn /* low level routine call */ 
 139              	 	PUSH {LR}
 140              		BL \fn  
 141              		POP {LR}
 142              		.endm
 143              		
ARM GAS  stm32eforth-fl.s 			page 6


 144              		.macro	_RET /*exit low level call */
 145              		BX LR 
 146              		.endm
 147              	
 148              		.macro _NEXT /* direct jump INEXT */ 
 149              		B INEXT   
 150              		.endm 
 151              	
 152              	 	.macro	_NEST /*start high level word */
 153              		BX R8 // BX R8 
 154              		NOP.N 
 155              		.endm
 156              	
 157              		.macro _ADR label 
 158              		.word 1+\label  
 159              		.endm 
 160              	
 161              	 	.macro	_UNNEST	/*end high level word */
 162              		_ADR UNNEST 
 163              		.endm
 164              	
 165              	 	.macro	_DOLIT u /*long literals */
 166              		_ADR	DOLIT
 167              		.word	\u 
 168              		.endm
 169              	
 170              		.macro _DOTQP len, text 
 171              		_ADR DOTQP 
 172              		.byte \len 
 173              		.ascii "\text" 
 174              		.p2align 2 
 175              		.endm
 176              	
 177              		.macro _COMPI name 
 178              		_DOLIT \name 
 179              		_ADR CALLC 
 180              		.endm 
 181              	
 182              		.macro _ABORQ len,name 
 183              		_ADR ABORQ 
 184              		.byte \len 
 185              		.ascii "\name"
 186              		.p2align 2 
 187              		.endm
 188              	
 189              		.macro _BRAN label 
 190              		_ADR BRAN 
 191              		.word \label 
 192              		.endm 
 193              	
 194              		.macro _QBRAN label 
 195              		_ADR QBRAN 
 196              		.word \label
 197              		.endm 
 198              	
 199              		.macro _DONXT label 
 200              		_ADR DONXT
ARM GAS  stm32eforth-fl.s 			page 7


 201              		.word \label 
 202              		.endm 
 203              	
 204              	 	.macro	_PUSH	/*push R5 on data stack*/
 205              		STR	R5,[R1,#-4]!
 206              		.endm
 207              	
 208              	 	.macro	_POP /*pop data stack to R5 */
 209              		LDR	R5,[R1],#4
 210              		.endm
 211              	
 212              	/*************************************
 213              	*   interrupt service vectors table 
 214              	**************************************/
 215              	   .section  .isr_vector,"a",%progbits
 216              	  .type  isr_vectors, %object
 217              	
 218              	isr_vectors:
 219 0000 00000000 	  .word   _mstack          /* main return stack address */
 220 0004 00000000 	  .word   reset_handler    /* startup address */
 221              	/* core interrupts || exceptions */
 222 0008 00000000 	  .word   default_handler  /*  NMI */
 223 000c 00000000 	  .word   default_handler  /*  HardFault */
 224 0010 00000000 	  .word   default_handler  /*  Memory Management */
 225 0014 00000000 	  .word   default_handler  /* Bus fault */
 226 0018 00000000 	  .word   default_handler  /* Usage fault */
 227 001c 00000000 	  .word   0
 228 0020 00000000 	  .word   0
 229 0024 00000000 	  .word   0
 230 0028 00000000 	  .word   0
 231 002c 00000000 	  .word   default_handler  /* SWI instruction */
 232 0030 00000000 	  .word   default_handler  /* Debug monitor */
 233 0034 00000000 	  .word   0
 234 0038 00000000 	  .word   default_handler  /* PendSV */
 235 003c 00000000 	  .word   systick_handler  /* Systick */
 236              	  
 237              	  /* External Interrupts */
 238 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 239 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 240 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 241 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 242 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 243 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 244 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 245 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 246 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 247 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 248 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 249 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 250 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 251 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 252 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 253 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 254 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 255 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 256 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 257 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
ARM GAS  stm32eforth-fl.s 			page 8


 258 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 259 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 260 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 261 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 262 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 263 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 264 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 265 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 266 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 267 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 268 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 269 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 270 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 271 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 272 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 273 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 274 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 275 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
 276 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 277 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 278 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 279 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 280 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 281 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 282 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 283 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 284 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 285 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 286 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 287 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 288 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 289 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 290 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 291 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 292 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 293 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 294 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 295 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 296 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 297 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 298              	  .size  isr_vectors, .-isr_vectors
 299              	
 300 0130 00000000 		.p2align 8
 300      00000000 
 300      00000000 
 300      00000000 
 300      00000000 
 301              	
 302              	UZERO:
 303 0200 00000000 		.word 0  			/*Reserved */
 304 0204 55AA0000 		.word 0xaa55 /* SEED  */ 
 305 0208 00000000 		.word 0      /* MSEC */
 306 020c 00000000 	    .word 0     /* TIMER */
 307 0210 00000000 		.word 0    /* FTRACE */ 
 308 0214 494D4147 		.ascii "IMAG" /* signature */ 
 309 0218 20290000 		.word HI  /*'BOOT */
 310 021c 0A000000 		.word BASEE 	/*BASE */
ARM GAS  stm32eforth-fl.s 			page 9


 311 0220 00000000 		.word 0			/*tmp */
 312 0224 00000000 		.word 0			/*SPAN */
 313 0228 00000000 		.word 0			/*>IN */
 314 022c 00000000 		.word 0			/*#TIB */
 315 0230 804E0020 		.word TIBB	/*TIB */
 316 0234 701A0000 		.word INTER	/*'EVAL */
 317 0238 00000000 		.word 0			/*HLD */
 318 023c 90290000 		.word LASTN	/*CONTEXT */
 319 0240 082A0000 		.word CTOP	/* FCP end of system dictionnary */
 320 0244 00010020 		.word DTOP	/* CP end of RAM dictionary RAM */
 321 0248 90290000 		.word LASTN	/*LAST word in dictionary */
 322 024c 00000000 		.word 0,0			/*reserved */
 322      00000000 
 323              	ULAST:
 324 0254 00000000 		.space  RX_QUEUE_SIZE+8 /* space reserved for rx_queue,head and tail pointer.
 324      00000000 
 324      00000000 
 324      00000000 
 324      00000000 
 325              	
 326              	
 327              	/*****************************************************
 328              	* default isr handler called on unexpected interrupt
 329              	*****************************************************/
 330              	    .section  .text,"ax",%progbits
 331              	  .type default_handler, %function
 332              	  .p2align 2 
 333              	  .global default_handler
 334              	default_handler:
 335              	// search last executed word 
 336 0000 10CA     		LDMFD R2!,{R4}
 337 0002 4FF00003 		mov r3,#UPP&0xffff
 338 0006 C2F20003 		movt r3,#UPP>>16 
 339 000a 03F59F42 		add R2,R3,#RPP&0xffff	// Forth return stack
 340 000e 03F59D41 		add R1,R3,#SPP&0xffff // Forth data stack
 341 0012 85EA0505 		eor R5,R5,R5			//  tos=0
 342 0016 1D66     		str r5,[r3,#RX_HEAD_OFS]
 343 0018 5D66     		str r5,[r3,#RX_TAIL_OFS]
 344 001a 41F8045D 		_PUSH
 345 001e 54F8045C 		ldr r5,[r4,#-4]
 346 0022 A5F10105 		sub r5,#1 
 347 0026 0A48     		ldr r0,word_that_crashed
 348 0028 F4E1     		b INEXT 	
 349 002a 034D     	1:	ldr r5,exception_msg 
 350 002c 00B5     		push {lr}
 351 002e 00F057F8 		bl uart_puts 
 352 0032 5DF804EB 		pop {lr}
 353              	// wait transmission completed
 354 0036 21E0     		b reboot  
 355              		.p2align 2 
 356              	exception_msg:
 357 0038 3C000000 		.word .+4 
 358 003c 12       		.byte 18
 359 003d 0D657863 		.ascii "\rexception reboot!"
 359      65707469 
 359      6F6E2072 
 359      65626F6F 
ARM GAS  stm32eforth-fl.s 			page 10


 359      7421
 360 004f 00       		.p2align 2
 361              	
 362              	word_that_crashed:
 363 0050 54000000 		.word .+4
 364 0054 81130000 		_ADR CR 
 365 0058 2D280000 		_ADR TNAME
 366 005c 65080000 		_ADR QDUP 
 367 0060 A9050000 		_QBRAN 2f 
 367      78000000 
 368 0068 ED090000 		_ADR COUNT 
 369 006c 4D130000 		_ADR TYPEE 
 370 0070 BB050000 		_BRAN 2f
 370      78000000 
 371              	2:
 372 0078 2B000000 		_ADR 1b 
 373              	
 374              	
 375              	/****************
 376              	   MCU reset 
 377              	****************/
 378              	reboot:
 379 007c 0348     		ldr r0,scb_adr 
 380 007e C168     		ldr r1,[r0,#SCB_AIRCR]
 381 0080 41F00401 		orr r1,#(1<<2)
 382 0084 C0F2FA51 		movt r1,#SCB_VECTKEY
 383 0088 C160     		str r1,[r0,#SCB_AIRCR]
 384 008a FEE7     		b . 
 385              		.p2align 2
 386              	scb_adr:
 387 008c 00ED00E0 		.word SCB_BASE_ADR 
 388              	
 389              	
 390              	/*******************************
 391              	  UART low level routines
 392              	********************************
 393              	
 394              	/*******************************
 395              	  initialise UART peripheral 
 396              	********************************/
 397              		.type uart_init, %function
 398              	uart_init:
 399              	/* set GPIOA PIN 9, uart TX  */
 400 0090 4FF40060 	  mov r0,#GPIOA_BASE_ADR&0XFFFF
 401 0094 C4F20100 	  movt r0,#GPIOA_BASE_ADR>>16	
 402 0098 4168     	  ldr r1,[r0,#GPIO_CRH]
 403 009a 6FF0F002 	  mvn r2,#(15<<4)
 404 009e 01EA0201 	  and r1,r1,r2
 405 00a2 4FF0A002 	  mov r2,#(0xA<<4)
 406 00a6 41EA0201 	  orr r1,r1,r2 
 407 00aa 4160     	  str r1,[r0,#GPIO_CRH]
 408 00ac 4FF46050 	  mov r0,#UART&0xFFFF
 409 00b0 C4F20100 	  movt r0,#UART>>16	
 410              	/* BAUD rate */
 411 00b4 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 412 00b8 8160     	  str r1,[r0,#USART_BRR]
 413 00ba 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
ARM GAS  stm32eforth-fl.s 			page 11


 414 00be C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 415              	/* enable interrupt in NVIC */
 416 00c0 4FF46140 	  mov r0,#NVIC_BASE_ADR&0xffff
 417 00c4 CEF20000 	  movt r0,#NVIC_BASE_ADR>>16 
 418 00c8 4168     	  ldr r1,[r0,#NVIC_ISER1]
 419 00ca 41F02001 	  orr r1,#32   
 420 00ce 4160     	  str r1,[r0,#NVIC_ISER1]
 421 00d0 7047     	  bx lr 
 422              	
 423              	/***********************************
 424              	uart_tx 
 425              	  input: R5 character to transmit 
 426              	  prerequisite: r4 initialise to UART_BASE_ADR
 427              	***********************************/
 428              		.type uart_tx,%function 
 429              	uart_tx:
 430              	1:
 431 00d2 2668     		ldr	r6, [r4, #USART_SR]	
 432 00d4 16F08006 		ands	r6, #0x80		//  TXE bit 
 433 00d8 FBD0     		beq	1b
 434 00da 2571     		strb	r5, [r4, #USART_DR]	
 435 00dc 7047     		bx lr 
 436              	
 437              	/*********************************
 438              	uart_puts 
 439              		input: r5 pointer to couted string
 440              		use: r9 hold char count.   
 441              	*********************************/
 442 00de 00BF     		.p2align 2 
 443              		.type uart_puts, %function 
 444              	uart_puts:
 445 00e0 4FF46054 		mov r4,#UART&0xFFFF
 446 00e4 C4F20104 		movt r4,#UART>>16
 447 00e8 2F46     		mov r7,r5 
 448 00ea 17F8019B 		ldrb r9,[r7],#1
 449 00ee 19EA0909 		ands r9,r9 
 450 00f2 08E0     		b 2f 
 451 00f4 17F8015B 	1:  ldrb r5,[r7],#1
 452 00f8 00B5     		push {lr}
 453 00fa FFF7EAFF 		bl uart_tx 
 454 00fe 5DF804EB 		pop {lr} 
 455 0102 B9F10109 		subs r9,#1 
 456 0106 F5D1     	2:	bne 1b 
 457 0108 2668     	3:	ldr r6,[r4,#USART_SR]
 458 010a 16F0400F 		tst r6,#(1<<6) // TC 
 459 010e FBD0     		beq 3b 
 460 0110 7047     		bx lr 
 461              	
 462              	/**************************
 463              		UART RX handler
 464              	**************************/
 465 0112 00BF     		.p2align 2
 466              		.type uart_rx_handler, %function
 467              	uart_rx_handler:
 468 0114 2DE9D002 		push {r4,r6,r7,r9}
 469 0118 4FF46054 		mov r4,#USART1_BASE_ADR&0xffff
 470 011c C4F20104 		movt r4,#USART1_BASE_ADR>>16
ARM GAS  stm32eforth-fl.s 			page 12


 471 0120 2668     		ldr r6,[r4,#USART_SR]
 472 0122 D4F80490 		ldr r9,[r4,#USART_DR]
 473 0126 16F0200F 		tst r6,#(1<<5) // RXNE 
 474 012a 0DD0     		beq 2f // no char received 
 475 012c B9F1030F 		cmp r9,#3
 476 0130 0DD0     		beq user_reboot // received CTRL-C then reboot MCU 
 477 0132 03F15007 		add r7,r3,#RX_QUEUE_OFS
 478 0136 5C6E     		ldr r4,[r3,#RX_TAIL_OFS]
 479 0138 2744     		add r7,r7,r4 
 480 013a 87F80090 		strb r9,[r7]
 481 013e 04F10104 		add r4,#1 
 482 0142 04F00F04 		and r4,#(RX_QUEUE_SIZE-1)
 483 0146 5C66     		str r4,[r3,#RX_TAIL_OFS]
 484              	2:	
 485 0148 BDE8D002 		pop {r4,r6,r7,r9}
 486 014c 7047     		bx lr 
 487              	
 488              	user_reboot:
 489 014e DFF80850 		ldr r5,user_reboot_msg
 490 0152 FFF7C5FF 		bl uart_puts 
 491 0156 91E7     		b reboot  
 492              	user_reboot_msg:
 493 0158 5C010000 		.word .+4
 494 015c 0D       		.byte 13 
 495 015d 0D757365 		.ascii "\ruser reboot!"
 495      72207265 
 495      626F6F74 
 495      21
 496 016a 00BF     		.p2align 2 
 497              	
 498              	/*********************************
 499              		system milliseconds counter
 500              	*********************************/	
 501              	  .type systick_handler, %function
 502              	  .p2align 2 
 503              	  .global systick_handler
 504              	systick_handler:
 505 016c 4FF00003 	  mov r3,#UPP&0xffff
 506 0170 C2F20003 	  movt r3,#UPP>>16  	
 507 0174 9868     	  ldr r0,[r3,#TICKS_OFS]  
 508 0176 00F10100 	  add r0,#1
 509 017a 9860     	  str r0,[r3,#TICKS_OFS]
 510 017c D868     	  ldr r0,[r3,#TIMER_OFS]
 511 017e 10B1     	  cbz r0, systick_exit
 512 0180 A0F10100 	  sub r0,#1
 513 0184 D860     	  str r0,[r3,#TIMER_OFS]
 514              	systick_exit:
 515 0186 7047     	  bx lr
 516              	
 517              	
 518              	
 519              	/**************************************
 520              	  reset_handler execute at MCU reset
 521              	***************************************/
 522              	//    .section  .text.reset_handler
 523              	  .type  reset_handler, %function
 524              	  .p2align 2 
ARM GAS  stm32eforth-fl.s 			page 13


 525              	  .global reset_handler
 526              	reset_handler:
 527 0188 00F05EF8 		bl	remap 
 528 018c 00F00CF8 		bl	init_devices	 	/* RCC, GPIOs */
 529 0190 FFF77EFF 		bl	uart_init 
 530 0194 01F020FD 		bl	unlock			/* unlock flash memory */
 531 0198 DFF80880 		ldr r8,nest_adr 
 532 019c 48F00108 		orr r8,r8,#1  
 533 01a0 02F0FAFB 		bl	COLD
 534              	nest_adr: 
 535 01a4 0C040000 		.word NEST 
 536              	
 537              	  .type init_devices, %function
 538              	  .p2align 2 
 539              	init_devices:
 540              	/* init clock to HSE 72 Mhz */
 541              	/* set 2 wait states in FLASH_ACR_LATENCY */
 542 01a8 4FF40050 		mov r0,#FLASH_BASE_ADR&0xffff
 543 01ac C4F20200 		movt r0,#FLASH_BASE_ADR>>16 
 544 01b0 4FF01202 	  mov r2,#0x12
 545 01b4 0260     	  str r2,[r0,#FLASH_ACR]
 546              	/* configure clock for HSE, 8 Mhz crystal */
 547              	/* enable HSE in RCC_CR */
 548 01b6 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 549 01ba C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 550 01be 0168     	  ldr r1,[r0,#RCC_CR]
 551 01c0 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 552 01c4 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 553              	/* wait HSERDY loop */
 554              	wait_hserdy:
 555 01c6 0168     	  ldr r1,[r0,#RCC_CR]
 556 01c8 11F4003F 	  tst r1,#(1<<17)
 557 01cc FBD0     	  beq wait_hserdy
 558              	
 559              	/************************************************* 
 560              	   configure PLL mul factor and source 
 561              	   SYSCLOCK=72 Mhz
 562              	   select HSE as  PLL source clock
 563              	   multiply frequency by 9 
 564              	   APB1 clock is limited to 36 Mhz so divide by 2 
 565              	****************************************************/
 566 01ce 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 567 01d2 C0F21D01 	  movt r1,#(7<<2)|1
 568 01d6 4160     	  str r1,[r0,#RCC_CFGR]
 569              	  /* enable PLL */
 570 01d8 0168     	  ldr r1,[r0,#RCC_CR]
 571 01da 41F08071 	  orr r1, #1<<24 
 572 01de 0160     	  str r1,[r0,#RCC_CR]
 573              	/* wait for PLLRDY */
 574              	wait_pllrdy:
 575 01e0 0168     	  ldr r1,[r0,#RCC_CR]
 576 01e2 11F0007F 	  tst r1,#(1<<25)
 577 01e6 FBD0     	  beq wait_pllrdy 
 578              	/* select PLL as sysclock */
 579 01e8 4168     	  ldr r1,[r0,#RCC_CFGR]
 580 01ea 4FF6FC72 	  mov r2,#0xfffc
 581 01ee CFF6FF72 	  movt r2,#0xffff
ARM GAS  stm32eforth-fl.s 			page 14


 582 01f2 01EA0201 	  and r1,r1,r2 
 583 01f6 4FF00202 	  mov r2,#2
 584 01fa 41EA0201 	  orr r1,r1,r2
 585 01fe 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 586              	/* wait for SWS==2 */
 587              	wait_sws:
 588 0200 4168     	  ldr r1,[r0,#RCC_CFGR]
 589 0202 11F0080F 	  tst r1,#(2<<2)
 590 0206 FBD0     	  beq wait_sws
 591              	/* now sysclock is 72 Mhz */
 592              	
 593              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 594 0208 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 595 020c C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 596 0210 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 597 0214 8161     	  str	r1, [r0, #RCC_APB2ENR]
 598              	
 599              	/* configure GPIOC:13 as output for user LED */
 600 0216 4FF48050 	  mov r0,#GPIOC_BASE_ADR&0xffff
 601 021a C4F20100 	  movt r0,#GPIOC_BASE_ADR>>16
 602 021e 4168     	  ldr r1,[r0,#GPIO_CRH]
 603 0220 6FF47002 	  mvn r2,#(15<<20)
 604 0224 01EA0201 	  and r1,r1,r2
 605 0228 4FF4C002 	  mov r2,#(6<<20)
 606 022c 41EA0201 	  orr r1,r1,r2
 607 0230 4160     	  str r1,[r0,#GPIO_CRH]
 608              	
 609              	/* configure systicks for 1msec ticks */
 610 0232 4EF21000 	  mov r0,#STK_BASE_ADR&0xFFFF
 611 0236 CEF20000 	  movt r0,#STK_BASE_ADR>>16	
 612 023a 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 613 023e 4160     	  str r1,[r0,#STK_LOAD]
 614 0240 4FF00301 	  mov r1,#3
 615 0244 0160     	  str r1,[r0,STK_CTL]
 616 0246 7047     	  bx lr  
 617              	
 618              	/* copy system to RAM */ 
 619              	//	.type remap, %function 
 620              	remap:
 621 0248 0B48     		ldr r0,remap_dest  
 622 024a 0A49     		ldr r1,remap_src 
 623 024c 4FF05402 		mov r2,#ULAST-UZERO 
 624 0250 51F8043B 	1:	ldr r3,[r1],#4 
 625 0254 40F8043B 		str r3,[r0],#4 
 626 0258 043A     		subs R2,#4 
 627 025a F9D1     		bne 1b
 628              	// zero end of RAM 
 629 025c 4FF4A042 		mov r2,#0x5000
 630 0260 C2F20002 		movt r2,#0x2000
 631 0264 83EA0303 		eor r3,r3,r3 
 632 0268 40F8043B 	2:  str r3,[r0],#4
 633 026c 9042     		cmp r0,r2 
 634 026e FBDB     		blt 2b 
 635 0270 7047     		bx lr  
 636 0272 00BF     		.p2align 2
 637              	remap_src:
 638 0274 00020000 		.word UZERO 
ARM GAS  stm32eforth-fl.s 			page 15


 639              	remap_dest:
 640 0278 00000020 		.word RAM_ADR  
 641              	
 642              	/********************
 643              	* Version control
 644              	*******************/
 645              	.equ VER ,	0x01	/*major release version */
 646              	.equ EXT ,	0x00	/*minor extension */
 647              	
 648              	/* Constants */
 649              	
 650              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 651              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 652              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 653              	
 654              	.equ CELLL ,	4	/*size of a cell */
 655              	.equ BASEE ,	10	/*default radix */
 656              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 657              	
 658              	.equ BKSPP ,	8	/*backspace */
 659              	.equ LF ,	10	  /*line feed */
 660              	.equ CRR ,	13	/*carriage return */
 661              	.equ ERR ,	27	/*error escape */
 662              	.equ TIC ,	39	/*tick */
 663              	
 664              	/********************************************************
 665              	* RAM memory mapping
 666              	* 	0x20000000	RAM base address
 667              	*	0x20000000  system variables	
 668              	* 	0x20000100	Forth dictionary
 669              	* 	0x2000????	top of dictionary, HERE
 670              	* 	0x2000????	WORD buffer, HERE+16
 671              	*   0x20004E00  end of user space
 672              	* 	0x20004E80	top of data stack  R2
 673              	* 	0x20004E80	TIB terminal input buffer
 674              	* 	0x20004F80	top of return stack  R1
 675              	* 	0x20005000	top of hardware stack for interrupts R14
 676              	********************************************************/
 677              	
 678              	
 679              	/******************************************************
 680              	*  COLD start moves the following to USER variables.
 681              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 682              	******************************************************/
 683 027c AFF30080 		.p2align 10
 683      00000000 
 683      00000000 
 683      00000000 
 683      00000000 
 684              	
 685              	
 686              	 
 687              	
 688              	/***********************************
 689              	//  Start of eForth system 
 690              	***********************************/
 691              	
ARM GAS  stm32eforth-fl.s 			page 16


 692              		.p2align 2 
 693              	
 694              	// PUSH R5, to be used in colon definition 
 695              	TPUSH:
 696 0400 41F8045D 		_PUSH
 697 0404 06E0     		_NEXT
 698              	
 699              	// POP R5, to be used in colon defintion  
 700              	TPOP:
 701 0406 51F8045B 		_POP 
 702 040a 03E0     		_NEXT
 703              	
 704              	
 705              	// hi level word enter 
 706              	NEST: 
 707 040c 42F8040D 		STMFD	R2!,{R0}
 708 0410 04F10300 		ADD R0,R4,#3
 709              	// inner interprer
 710              	INEXT: 
 711              	/*
 712              		ADD R6,R3,#FTRACE_OFS
 713              		LDR R6,[R6]
 714              		CBZ r6, 1f
 715              		_PUSH 
 716              		LDR R5,[R0]
 717              		SUB R5,#1
 718              		B DBG_PRT
 719              	*/
 720 0414 50F8044B 	1:	LDR R4,[R0],#4 
 721 0418 A047     		BLX R4 
 722              	UNNEST:
 723 041a 01CA     		LDMFD R2!,{R0}
 724 041c FAE7     		B INEXT 
 725              	
 726 041e 00BF     		.p2align 2 
 727              	
 728              	// compile "BX 	R8" 
 729              	// this is the only way 
 730              	// a colon defintion in RAM 
 731              	// can jump to NEST
 732              	// R8 is initialized to NEST address 
 733              	// and must be preserved   
 734              	COMPI_NEST:
 735 0420 03F14406 		add r6,r3,#RAM_CTOP_OFS 
 736 0424 3668     		ldr r6,[r6]
 737 0426 44F24077 		mov r7,#0x4700+(8<<3)
 738 042a 26F8027B 		strh r7,[r6],#2
 739 042e 4FF43F47 		mov r7,#0xbf00 // NOP.N   
 740 0432 26F8027B 		strh r7,[r6],#2 
 741 0436 03F14407 		add r7,r3,#RAM_CTOP_OFS 
 742 043a 3E60     		str r6,[r7]
 743 043c EAE7     		_NEXT  
 744              	
 745              	// RANDOM ( n1 -- {0..n1-1} )
 746              	// return pseudo random number 
 747              	// REF: https://en.wikipedia.org/wiki/Xorshift
 748              	
ARM GAS  stm32eforth-fl.s 			page 17


 749 043e 00000000 		.word 0
 750 0442 06       	_RAND: .byte 6
 751 0443 52414E44 		.ascii "RANDOM"
 751      4F4D
 752 0449 0000BF   		.p2align 2 
 753              	RAND:
 754 044c 404700BF 		_NEST 
 755 0450 350A0000 		_ADR SEED 
 756 0454 E9050000 		_ADR AT 
 757 0458 91060000 		_ADR DUPP 
 758 045c 6D050000 		_DOLIT 13
 758      0D000000 
 759 0464 45070000 		_ADR LSHIFT 
 760 0468 FD060000 		_ADR XORR  
 761 046c 91060000 		_ADR DUPP 
 762 0470 6D050000 		_DOLIT 17 
 762      11000000 
 763 0478 2D070000 		_ADR RSHIFT 
 764 047c FD060000 		_ADR XORR 
 765 0480 91060000 		_ADR DUPP
 766 0484 6D050000 		_DOLIT 5 
 766      05000000 
 767 048c 45070000 		_ADR LSHIFT 
 768 0490 FD060000 		_ADR XORR  
 769 0494 91060000 		_ADR DUPP 
 770 0498 350A0000 		_ADR SEED 
 771 049c D5050000 		_ADR STORE 
 772 04a0 F5080000 		_ADR ABSS
 773 04a4 A1060000 		_ADR SWAP 
 774 04a8 E50C0000 		_ADR MODD 
 775 04ac 1B040000 		_UNNEST 
 776              	
 777              	
 778              	// PAUSE ( u -- ) 
 779              	// suspend execution for u milliseconds
 780 04b0 42040000 		.word _RAND
 781 04b4 05       	_PAUSE: .byte 5
 782 04b5 50415553 		.ascii "PAUSE"
 782      45
 783 04ba 00BF     		.p2align 2
 784              	PAUSE:
 785 04bc 404700BF 		_NEST 
 786 04c0 5D0A0000 		_ADR TIMER 
 787 04c4 D5050000 		_ADR STORE 
 788              	PAUSE_LOOP:
 789 04c8 5D0A0000 		_ADR TIMER 
 790 04cc E9050000 		_ADR AT 
 791 04d0 A9050000 		_QBRAN PAUSE_EXIT 
 791      E0040000 
 792 04d8 BB050000 		_BRAN PAUSE_LOOP 
 792      C8040000 
 793              	PAUSE_EXIT: 		
 794 04e0 1B040000 		_UNNEST 
 795              	
 796              	//  ULED ( T|F -- )
 797              	// control user LED, -1 ON, 0 OFF  
 798 04e4 B4040000 		.word _PAUSE
ARM GAS  stm32eforth-fl.s 			page 18


 799 04e8 04       	_ULED: .byte 4
 800 04e9 554C4544 		.ascii "ULED"
 801 04ed 0000BF   		.p2align 2
 802              		.type ULED, %function 
 803              	ULED:
 804 04f0 4FF40056 		mov r6,#(1<<LED_PIN)
 805 04f4 4FF48054 		mov r4,#LED_GPIO&0xffff
 806 04f8 C4F20104 		movt r4,#LED_GPIO>>16
 807 04fc 2D00     		movs r5,r5 
 808 04fe 51F8045B 		_POP
 809 0502 01D0     		beq ULED_OFF 
 810 0504 6661     		str r6,[r4,#GPIO_BRR]
 811 0506 85E7     		_NEXT 
 812              	ULED_OFF:
 813 0508 2661     		str r6,[r4,#GPIO_BSRR]
 814 050a 83E7     		_NEXT    
 815              	
 816              	//    ?KEY	 ( -- c T | F )
 817              	// 	Return input character and true, or a false if no input.
 818 050c E8040000 		.word	_ULED
 819 0510 04       	_QRX:	.byte   4
 820 0511 3F4B4559 		.ascii "?KEY"
 821 0515 0000BF   		.p2align 2 
 822              	QKEY:
 823              	QRX: 
 824 0518 41F8045D 		_PUSH
 825 051c 5F6E     		ldr r7,[r3,#RX_TAIL_OFS] 
 826 051e 1E6E     		ldr r6,[r3,#RX_HEAD_OFS]
 827 0520 96EA0705 		eors r5,r6,r7 
 828 0524 0CD0     		beq 1f
 829 0526 03F15007 		add r7,r3,#RX_QUEUE_OFS 
 830 052a 3744     		add r7,r6 
 831 052c 3D78     		ldrb r5,[r7]
 832 052e 06F10106 		add r6,#1 
 833 0532 06F00F06 		and r6,#(RX_QUEUE_SIZE-1)
 834 0536 1E66     		str r6,[R3,#RX_HEAD_OFS]
 835 0538 41F8045D 		_PUSH 
 836 053c 4FF0FF35 		mov r5,#-1
 837 0540 68E7     	1:	_NEXT 
 838              	
 839              	//    TX!	 ( c -- )
 840              	// 	Send character c to the output device.
 841              	
 842 0542 10050000 		.word	_QRX
 843 0546 04       	_TXSTO:	.byte 4
 844 0547 454D4954 		.ascii "EMIT"
 845 054b 00       		.p2align 2 	
 846              	TXSTO:
 847              	EMIT:
 848              	TECHO:
 849 054c 4FF46054 		mov r4,#UART&0xFFFF
 850 0550 C4F20104 		movt r4,#UART>>16
 851 0554 FFF7BDFD 		bl uart_tx 
 852 0558 51F8045B 		_POP
 853 055c 5AE7     		_NEXT 
 854              		
 855              	/***************
ARM GAS  stm32eforth-fl.s 			page 19


 856              	//  The kernel
 857              	***************/
 858              	
 859              	//    NOP	( -- )
 860              	// 	do nothing.
 861              	
 862 055e 46050000 		.word	_TXSTO
 863 0562 03       	_NOP:	.byte   3
 864 0563 4E4F50   		.ascii "NOP"
 865 0566 00BF     		.p2align 2 	
 866              	NOP:
 867 0568 54E7     		_NEXT 
 868              	 
 869              	
 870              	//    doLIT	( -- w )
 871              	// 	Push an inline literal.
 872              	
 873              	// 	.word	_NOP
 874              	// _LIT	.byte   COMPO+5
 875              	// 	.ascii "doLIT"
 876 056a 00BF     	 	.p2align 2 	
 877              	DOLIT:
 878 056c 41F8045D 		_PUSH				//  store R5 on data stack
 879 0570 50F8045B 		LDR	R5,[R0],#4		//  get literal at word boundary
 880 0574 4EE7     		_NEXT 
 881              	
 882              	//    EXECUTE	( ca -- )
 883              	// 	Execute the word at ca.
 884              	
 885 0576 62050000 		.word	_NOP
 886 057a 07       	_EXECU:	.byte   7
 887 057b 45584543 		.ascii "EXECUTE"
 887      555445
 888 0582 00BF     		.p2align 2 	
 889              	EXECU: 
 890 0584 45F00104 		ORR	R4,R5,#1 
 891 0588 51F8045B 		_POP
 892 058c 2047     		BX R4 
 893 058e 41E7     		_NEXT 
 894              	
 895              	//    next	( -- ) counter on R:
 896              	// 	Run time code for the single index loop.
 897              	// 	: next ( -- ) \ hilevel model
 898              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 899              	
 900              	// 	.word	_EXECU
 901              	// _DONXT	.byte   COMPO+4
 902              	// 	.ascii "next"
 903              	// 	.p2align 2 	
 904              	DONXT:
 905 0590 1668     		LDR	R6,[R2]   // ( -- u )  
 906 0592 26B9     		CBNZ R6,NEXT1 
 907              		/* loop done */
 908 0594 02F10402 		ADD	R2,R2,#4 // drop counter 
 909 0598 00F10400 		ADD	R0,R0,#4 // skip after loop address 
 910 059c 3AE7     		_NEXT
 911              	NEXT1:
ARM GAS  stm32eforth-fl.s 			page 20


 912              		/* decrement loop counter */
 913 059e A6F10106 		SUB	R6,R6,#1
 914 05a2 1660     		STR	R6,[R2]
 915 05a4 0068     		LDR	R0,[R0]	// go begining of loop 
 916 05a6 35E7     		_NEXT 
 917              	
 918              	//    ?branch	( f -- )
 919              	// 	Branch if flag is zero.
 920              	
 921              	// 	.word	_DONXT
 922              	// _QBRAN	.byte   COMPO+7
 923              	// 	.ascii "?branch"
 924              	// 	.p2align 2 	
 925              	QBRAN:
 926 05a8 2D00     		MOVS	R5,R5
 927 05aa 51F8045B 		_POP
 928 05ae 01D1     		BNE	QBRAN1
 929 05b0 0068     		LDR	R0,[R0]
 930 05b2 2FE7     		_NEXT
 931              	QBRAN1:
 932 05b4 00F10400 	 	ADD	R0,R0,#4
 933 05b8 2CE7     		_NEXT
 934              	
 935              	//    branch	( -- )
 936              	// 	Branch to an inline address.
 937              	
 938              	// 	.word	_QBRAN
 939              	// _BRAN	.byte   COMPO+6
 940              	// 	.ascii "branch"
 941              	// 	.p2align 2 	
 942              	BRAN:
 943 05ba 0068     		LDR	R0,[R0]
 944 05bc 2AE7     		_NEXT
 945              	
 946              	//    EXIT	(  -- )
 947              	// 	Exit the currently executing command.
 948              	
 949 05be 7A050000 		.word	_EXECU
 950 05c2 04       	_EXIT:	.byte   4
 951 05c3 45584954 		.ascii "EXIT"
 952 05c7 00       		.p2align 2 	
 953              	EXIT:
 954 05c8 1B040000 		_UNNEST
 955              	
 956              	//    !	   ( w a -- )
 957              	// 	Pop the data stack to memory.
 958              	
 959 05cc C2050000 		.word	_EXIT
 960 05d0 01       	_STORE:	.byte   1
 961 05d1 21       		.ascii "!"
 962 05d2 00BF     		.p2align 2 	
 963              	STORE:
 964 05d4 51F8044B 		LDR	R4,[R1],#4
 965 05d8 2C60     		STR	R4,[R5]
 966 05da 51F8045B 		_POP
 967 05de 19E7     		_NEXT 
 968              	
ARM GAS  stm32eforth-fl.s 			page 21


 969              	//    @	   ( a -- w )
 970              	// 	Push memory location to the data stack.
 971              	
 972 05e0 D0050000 		.word	_STORE
 973 05e4 01       	_AT:	.byte   1
 974 05e5 40       		.ascii "@"
 975 05e6 00BF     		.p2align 2 	
 976              	AT:
 977 05e8 2D68     		LDR	R5,[R5]
 978 05ea 13E7     		_NEXT 
 979              	
 980              	//    C!	  ( c b -- )
 981              	// 	Pop the data stack to byte memory.
 982              	
 983 05ec E4050000 		.word	_AT
 984 05f0 02       	_CSTOR:	.byte   2
 985 05f1 4321     		.ascii "C!"
 986 05f3 00       		.p2align 2 	
 987              	CSTOR:
 988 05f4 51F8044B 		LDR	R4,[R1],#4
 989 05f8 2C70     		STRB R4,[R5]
 990 05fa 51F8045B 		_POP
 991 05fe 09E7     		_NEXT
 992              	
 993              	//    C@	  ( b -- c )
 994              	// 	Push byte memory location to the data stack.
 995              	
 996 0600 F0050000 		.word	_CSTOR
 997 0604 02       	_CAT:	.byte   2
 998 0605 4340     		.ascii "C@"
 999 0607 00       		.p2align 2 	
 1000              	CAT:
 1001 0608 2D78     		LDRB	R5,[R5]
 1002 060a 03E7     		_NEXT 
 1003              	
 1004              	//    R>	  ( -- w )
 1005              	// 	Pop the return stack to the data stack.
 1006              	
 1007 060c 04060000 		.word	_CAT
 1008 0610 02       	_RFROM:	.byte   2
 1009 0611 523E     		.ascii "R>"
 1010 0613 00       		.p2align 2 	
 1011              	RFROM:
 1012 0614 41F8045D 		_PUSH
 1013 0618 52F8045B 		LDR	R5,[R2],#4
 1014 061c FAE6     		_NEXT 
 1015              	
 1016              	//    R@	  ( -- w )
 1017              	// 	Copy top of return stack to the data stack.
 1018              	
 1019 061e 10060000 		.word	_RFROM
 1020 0622 02       	_RAT:	.byte   2
 1021 0623 5240     		.ascii "R@"
 1022 0625 0000BF   		.p2align 2 	
 1023              	RAT:
 1024 0628 41F8045D 		_PUSH
 1025 062c 1568     		LDR	R5,[R2]
ARM GAS  stm32eforth-fl.s 			page 22


 1026 062e F1E6     		_NEXT 
 1027              	
 1028              	//    >R	  ( w -- )
 1029              	// 	Push the data stack to the return stack.
 1030              	
 1031 0630 22060000 		.word	_RAT
 1032 0634 42       	_TOR:	.byte   COMPO+2
 1033 0635 3E52     		.ascii ">R"
 1034 0637 00       		.p2align 2 	
 1035              	TOR:
 1036 0638 42F8045D 		STR	R5,[R2,#-4]!
 1037 063c 51F8045B 		_POP
 1038 0640 E8E6     		_NEXT
 1039              	
 1040              	//	RP! ( u -- )
 1041              	// initialize RPP with u 
 1042 0642 34060000 		.word _TOR 
 1043 0646 03       	_RPSTOR: .byte 3 
 1044 0647 525021   		.ascii "RP!" 
 1045 064a 00BF     		.p2align 2 
 1046              	RPSTOR:
 1047 064c 2A46     		MOV R2,R5 
 1048 064e 51F8045B 		_POP  
 1049 0652 DFE6     		_NEXT 
 1050              	
 1051              	
 1052              	//	SP! ( u -- )
 1053              	// initialize SPP with u 
 1054 0654 46060000 		.word _RPSTOR  
 1055 0658 03       	_SPSTOR: .byte 3 
 1056 0659 535021   		.ascii "SP!" 
 1057              		.p2align 2 
 1058              	SPSTOR:
 1059 065c 2946     		MOV R1,R5 
 1060 065e 85EA0505 		EOR R5,R5,R5 
 1061 0662 D7E6     		_NEXT 
 1062              	
 1063              	//    SP@	 ( -- a )
 1064              	// 	Push the current data stack pointer.
 1065              	
 1066 0664 58060000 		.word	_SPSTOR
 1067 0668 03       	_SPAT:	.byte   3
 1068 0669 535040   		.ascii "SP@"
 1069              		.p2align 2 	
 1070              	SPAT:
 1071 066c 41F8045D 		_PUSH
 1072 0670 0D46     		MOV	R5,R1
 1073 0672 CFE6     		_NEXT
 1074              	
 1075              	//    DROP	( w -- )
 1076              	// 	Discard top stack item.
 1077              	
 1078 0674 68060000 		.word	_SPAT
 1079 0678 04       	_DROP:	.byte   4
 1080 0679 44524F50 		.ascii "DROP"
 1081 067d 0000BF   		.p2align 2 	
 1082              	DROP:
ARM GAS  stm32eforth-fl.s 			page 23


 1083 0680 51F8045B 		_POP
 1084 0684 C6E6     		_NEXT 
 1085              	
 1086              	//    DUP	 ( w -- w w )
 1087              	// 	Duplicate the top stack item.
 1088              	
 1089 0686 78060000 		.word	_DROP
 1090 068a 03       	_DUPP:	.byte   3
 1091 068b 445550   		.ascii "DUP"
 1092 068e 00BF     		.p2align 2 	
 1093              	DUPP:
 1094 0690 41F8045D 		_PUSH
 1095 0694 BEE6     		_NEXT 
 1096              	
 1097              	//    SWAP	( w1 w2 -- w2 w1 )
 1098              	// 	Exchange top two stack items.
 1099              	
 1100 0696 8A060000 		.word	_DUPP
 1101 069a 04       	_SWAP:	.byte   4
 1102 069b 53574150 		.ascii "SWAP"
 1103 069f 00       		.p2align 2 	
 1104              	SWAP:
 1105 06a0 0C68     		LDR	R4,[R1]
 1106 06a2 0D60     		STR	R5,[R1]
 1107 06a4 2546     		MOV	R5,R4
 1108 06a6 B5E6     		_NEXT 
 1109              	
 1110              	//    OVER	( w1 w2 -- w1 w2 w1 )
 1111              	// 	Copy second stack item to top.
 1112              	
 1113 06a8 9A060000 		.word	_SWAP
 1114 06ac 04       	_OVER:	.byte   4
 1115 06ad 4F564552 		.ascii "OVER"
 1116 06b1 0000BF   		.p2align 2 	
 1117              	OVER:
 1118 06b4 41F8045D 		_PUSH
 1119 06b8 4D68     		LDR	R5,[R1,#4]
 1120 06ba ABE6     		_NEXT 
 1121              	
 1122              	//    0<	  ( n -- t )
 1123              	// 	Return true if n is negative.
 1124              	
 1125 06bc AC060000 		.word	_OVER
 1126 06c0 02       	_ZLESS:	.byte   2
 1127 06c1 303C     		.ascii "0<"
 1128 06c3 00       		.p2align 2 	
 1129              	ZLESS:
 1130              	//	MOV	R4,#0
 1131              	//	ADD	R5,R4,R5,ASR #32
 1132 06c4 4FEAE575 		ASR R5,#31
 1133 06c8 A4E6     		_NEXT 
 1134              	
 1135              	//    AND	 ( w w -- w )
 1136              	// 	Bitwise AND.
 1137              	
 1138 06ca C0060000 		.word	_ZLESS
 1139 06ce 03       	_ANDD:	.byte   3
ARM GAS  stm32eforth-fl.s 			page 24


 1140 06cf 414E44   		.ascii "AND"
 1141 06d2 00BF     		.p2align 2 	
 1142              	ANDD:
 1143 06d4 51F8044B 		LDR	R4,[R1],#4
 1144 06d8 05EA0405 		AND	R5,R5,R4
 1145 06dc 9AE6     		_NEXT 
 1146              	
 1147              	//    OR	  ( w w -- w )
 1148              	// 	Bitwise inclusive OR.
 1149              	
 1150 06de CE060000 		.word	_ANDD
 1151 06e2 02       	_ORR:	.byte   2
 1152 06e3 4F52     		.ascii "OR"
 1153 06e5 0000BF   		.p2align 2 	
 1154              	ORR:
 1155 06e8 51F8044B 		LDR	R4,[R1],#4
 1156 06ec 45EA0405 		ORR	R5,R5,R4
 1157 06f0 90E6     		_NEXT 
 1158              	
 1159              	//    XOR	 ( w w -- w )
 1160              	// 	Bitwise exclusive OR.
 1161              	
 1162 06f2 E2060000 		.word	_ORR
 1163 06f6 03       	_XORR:	.byte   3
 1164 06f7 584F52   		.ascii "XOR"
 1165 06fa 00BF     		.p2align 2 	
 1166              	XORR:
 1167 06fc 51F8044B 		LDR	R4,[R1],#4
 1168 0700 85EA0405 		EOR	R5,R5,R4
 1169 0704 86E6     		_NEXT 
 1170              	
 1171              	//    UM+	 ( w w -- w cy )
 1172              	// 	Add two numbers, return the sum and carry flag.
 1173              	
 1174 0706 F6060000 		.word	_XORR
 1175 070a 03       	_UPLUS:	.byte   3
 1176 070b 554D2B   		.ascii "UM+"
 1177 070e 00BF     		.p2align 2 	
 1178              	UPLUS:
 1179 0710 0C68     		LDR	R4,[R1]
 1180 0712 6419     		ADDS	R4,R4,R5
 1181 0714 4FF00005 		MOV	R5,#0
 1182 0718 45F10005 		ADC	R5,R5,#0
 1183 071c 0C60     		STR	R4,[R1]
 1184 071e 79E6     		_NEXT 
 1185              	
 1186              	//    RSHIFT	 ( w # -- w )
 1187              	// 	arithmetic Right shift # bits.
 1188              	
 1189 0720 0A070000 		.word	_UPLUS
 1190 0724 06       	_RSHIFT:	.byte   6
 1191 0725 52534849 		.ascii "RSHIFT"
 1191      4654
 1192 072b 00       		.p2align 2 	
 1193              	RSHIFT:
 1194 072c 51F8044B 		LDR	R4,[R1],#4
 1195 0730 44FA05F5 		MOV	R5,R4,ASR R5
ARM GAS  stm32eforth-fl.s 			page 25


 1196 0734 6EE6     		_NEXT 
 1197              	
 1198              	//    LSHIFT	 ( w # -- w )
 1199              	// 	Right shift # bits.
 1200              	
 1201 0736 24070000 		.word	_RSHIFT
 1202 073a 06       	_LSHIFT:	.byte   6
 1203 073b 4C534849 		.ascii "LSHIFT"
 1203      4654
 1204 0741 0000BF   		.p2align 2 	
 1205              	LSHIFT:
 1206 0744 51F8044B 		LDR	R4,[R1],#4
 1207 0748 04FA05F5 		MOV	R5,R4,LSL R5
 1208 074c 62E6     		_NEXT
 1209              	
 1210              	//    +	 ( w w -- w )
 1211              	// 	Add.
 1212              	
 1213 074e 3A070000 		.word	_LSHIFT
 1214 0752 01       	_PLUS:	.byte   1
 1215 0753 2B       		.ascii "+"
 1216              		.p2align 2 	
 1217              	PLUS:
 1218 0754 51F8044B 		LDR	R4,[R1],#4
 1219 0758 2544     		ADD	R5,R5,R4
 1220 075a 5BE6     		_NEXT 
 1221              	
 1222              	//    -	 ( w w -- w )
 1223              	// 	Subtract.
 1224              	
 1225 075c 52070000 		.word	_PLUS
 1226 0760 01       	_SUBB:	.byte   1
 1227 0761 2D       		.ascii "-"
 1228 0762 00BF     		.p2align 2 	
 1229              	SUBB:
 1230 0764 51F8044B 		LDR	R4,[R1],#4
 1231 0768 C5EB0405 		RSB	R5,R5,R4
 1232 076c 52E6     		_NEXT 
 1233              	
 1234              	//    *	 ( w w -- w )
 1235              	// 	Multiply.
 1236              	
 1237 076e 60070000 		.word	_SUBB
 1238 0772 01       	_STAR:	.byte   1
 1239 0773 2A       		.ascii "*"
 1240              		.p2align 2 	
 1241              	STAR:
 1242 0774 51F8044B 		LDR	R4,[R1],#4
 1243 0778 04FB05F5 		MUL	R5,R4,R5
 1244 077c 4AE6     		_NEXT 
 1245              	
 1246              	//    UM*	 ( w w -- ud )
 1247              	// 	Unsigned multiply.
 1248              	
 1249 077e 72070000 		.word	_STAR
 1250 0782 03       	_UMSTA:	.byte   3
 1251 0783 554D2A   		.ascii "UM*"
ARM GAS  stm32eforth-fl.s 			page 26


 1252 0786 00BF     		.p2align 2 	
 1253              	UMSTA:
 1254 0788 0C68     		LDR	R4,[R1]
 1255 078a A5FB0467 		UMULL	R6,R7,R5,R4
 1256 078e 0E60     		STR	R6,[R1]
 1257 0790 3D46     		MOV	R5,R7
 1258 0792 3FE6     		_NEXT 
 1259              	
 1260              	//    M*	 ( w w -- d )
 1261              	// 	signed multiply.
 1262              	
 1263 0794 82070000 		.word	_UMSTA
 1264 0798 02       	_MSTAR:	.byte   2
 1265 0799 4D2A     		.ascii "M*"
 1266 079b 00       		.p2align 2 	
 1267              	MSTAR:
 1268 079c 0C68     		LDR	R4,[R1]
 1269 079e 85FB0467 		SMULL	R6,R7,R5,R4
 1270 07a2 0E60     		STR	R6,[R1]
 1271 07a4 3D46     		MOV	R5,R7
 1272 07a6 35E6     		_NEXT 
 1273              	
 1274              	//    1+	 ( w -- w+1 )
 1275              	// 	Add 1.
 1276              	
 1277 07a8 98070000 		.word	_MSTAR
 1278 07ac 02       	_ONEP:	.byte   2
 1279 07ad 312B     		.ascii "1+"
 1280 07af 00       		.p2align 2 	
 1281              	ONEP:
 1282 07b0 05F10105 		ADD	R5,R5,#1
 1283 07b4 2EE6     		_NEXT 
 1284              	
 1285              	//    1-	 ( w -- w-1 )
 1286              	// 	Subtract 1.
 1287              	
 1288 07b6 AC070000 		.word	_ONEP
 1289 07ba 02       	_ONEM:	.byte   2
 1290 07bb 312D     		.ascii "1-"
 1291 07bd 0000BF   		.p2align 2 	
 1292              	ONEM:
 1293 07c0 A5F10105 		SUB	R5,R5,#1
 1294 07c4 26E6     		_NEXT 
 1295              	
 1296              	//    2+	 ( w -- w+2 )
 1297              	// 	Add 1.
 1298              	
 1299 07c6 BA070000 		.word	_ONEM
 1300 07ca 02       	_TWOP:	.byte   2
 1301 07cb 322B     		.ascii "2+"
 1302 07cd 0000BF   		.p2align 2 	
 1303              	TWOP:
 1304 07d0 05F10205 		ADD	R5,R5,#2
 1305 07d4 1EE6     		_NEXT
 1306              	
 1307              	//    2-	 ( w -- w-2 )
 1308              	// 	Subtract 2.
ARM GAS  stm32eforth-fl.s 			page 27


 1309              	
 1310 07d6 CA070000 		.word	_TWOP
 1311 07da 02       	_TWOM:	.byte   2
 1312 07db 322D     		.ascii "2-"
 1313 07dd 0000BF   		.p2align 2 	
 1314              	TWOM:
 1315 07e0 A5F10205 		SUB	R5,R5,#2
 1316 07e4 16E6     		_NEXT
 1317              	
 1318              	//    CELL+	( w -- w+4 )
 1319              	// 	Add CELLL.
 1320              	
 1321 07e6 DA070000 		.word	_TWOM
 1322 07ea 05       	_CELLP:	.byte   5
 1323 07eb 43454C4C 		.ascii "CELL+"
 1323      2B
 1324              		.p2align 2 	
 1325              	CELLP:
 1326 07f0 05F10405 		ADD	R5,R5,#CELLL
 1327 07f4 0EE6     		_NEXT
 1328              	
 1329              	//    CELL-	( w -- w-4 )
 1330              	// 	Subtract CELLL.
 1331              	
 1332 07f6 EA070000 		.word	_CELLP
 1333 07fa 05       	_CELLM:	.byte   5
 1334 07fb 43454C4C 		.ascii "CELL-"
 1334      2D
 1335              		.p2align 2 	
 1336              	CELLM:
 1337 0800 A5F10405 		SUB	R5,R5,#CELLL
 1338 0804 06E6     		_NEXT
 1339              	 
 1340              	//    BL	( -- 32 )
 1341              	// 	Blank (ASCII space).
 1342              	
 1343 0806 FA070000 		.word	_CELLM
 1344 080a 02       	_BLANK:	.byte   2
 1345 080b 424C     		.ascii "BL"
 1346 080d 0000BF   		.p2align 2 	
 1347              	BLANK:
 1348 0810 41F8045D 		_PUSH
 1349 0814 4FF02005 		MOV	R5,#32
 1350 0818 FCE5     		_NEXT 
 1351              	
 1352              	//    CELLS	( w -- w*4 )
 1353              	// 	Multiply 4.
 1354              	
 1355 081a 0A080000 		.word	_BLANK
 1356 081e 05       	_CELLS:	.byte   5
 1357 081f 43454C4C 		.ascii "CELLS"
 1357      53
 1358              		.p2align 2 	
 1359              	CELLS:
 1360 0824 4FEA8505 		MOV	R5,R5,LSL#2
 1361 0828 F4E5     		_NEXT
 1362              	
ARM GAS  stm32eforth-fl.s 			page 28


 1363              	//    CELL/	( w -- w/4 )
 1364              	// 	Divide by 4.
 1365              	
 1366 082a 1E080000 		.word	_CELLS
 1367 082e 05       	_CELLSL:	.byte   5
 1368 082f 43454C4C 		.ascii "CELL/"
 1368      2F
 1369              		.p2align 2 	
 1370              	CELLSL:
 1371 0834 4FEAA505 		MOV	R5,R5,ASR#2
 1372 0838 ECE5     		_NEXT
 1373              	
 1374              	//    2*	( w -- w*2 )
 1375              	// 	Multiply 2.
 1376              	
 1377 083a 2E080000 		.word	_CELLSL
 1378 083e 02       	_TWOST:	.byte   2
 1379 083f 322A     		.ascii "2*"
 1380 0841 0000BF   		.p2align 2 	
 1381              	TWOST:
 1382 0844 4FEA4505 		MOV	R5,R5,LSL#1
 1383 0848 E4E5     		_NEXT
 1384              	
 1385              	//    2/	( w -- w/2 )
 1386              	// 	Divide by 2.
 1387              	
 1388 084a 3E080000 		.word	_TWOST
 1389 084e 02       	_TWOSL:	.byte   2
 1390 084f 322F     		.ascii "2/"
 1391 0851 0000BF   		.p2align 2 	
 1392              	TWOSL:
 1393 0854 4FEA6505 		MOV	R5,R5,ASR#1
 1394 0858 DCE5     		_NEXT
 1395              	
 1396              	//    ?DUP	( w -- w w | 0 )
 1397              	// 	Conditional duplicate.
 1398              	
 1399 085a 4E080000 		.word	_TWOSL
 1400 085e 04       	_QDUP:	.byte   4
 1401 085f 3F445550 		.ascii "?DUP"
 1402 0863 00       		.p2align 2 	
 1403              	QDUP:
 1404 0864 2C00     		MOVS	R4,R5
 1405 0866 18BF     		IT NE 
 1406 0868 41F8045D 	    STRNE	R5,[R1,#-4]!
 1407 086c D2E5     		_NEXT
 1408              	
 1409              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1410              	// 	Rotate top 3 items.
 1411              	
 1412 086e 5E080000 		.word	_QDUP
 1413 0872 03       	_ROT:	.byte   3
 1414 0873 524F54   		.ascii "ROT"
 1415 0876 00BF     		.p2align 2 	
 1416              	ROT:
 1417 0878 0C68     		LDR	R4,[R1]  // r4=w2 
 1418 087a 0D60     		STR	R5,[R1]  // w3 replace w2 
ARM GAS  stm32eforth-fl.s 			page 29


 1419 087c 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1420 087e 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1421 0880 C8E5     		_NEXT
 1422              	
 1423              	//    2DROP	( w1 w2 -- )
 1424              	// 	Drop top 2 items.
 1425              	
 1426 0882 72080000 		.word	_ROT
 1427 0886 05       	_DDROP:	.byte   5
 1428 0887 3244524F 		.ascii "2DROP"
 1428      50
 1429              		.p2align 2 	
 1430              	DDROP:
 1431 088c 51F8045B 		_POP
 1432 0890 51F8045B 		_POP
 1433 0894 BEE5     		_NEXT 
 1434              	
 1435              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1436              	// 	Duplicate top 2 items.
 1437              	
 1438 0896 86080000 		.word	_DDROP
 1439 089a 04       	_DDUP:	.byte   4
 1440 089b 32445550 		.ascii "2DUP"
 1441 089f 00       		.p2align 2 	
 1442              	DDUP:
 1443 08a0 0C68     		LDR	R4,[R1] // r4=w1
 1444 08a2 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1445 08a6 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1446 08aa B3E5     		_NEXT
 1447              	
 1448              	//    D+	( d1 d2 -- d3 )
 1449              	// 	Add top 2 double numbers.
 1450              	
 1451 08ac 9A080000 		.word	_DDUP
 1452 08b0 02       	_DPLUS:	.byte   2
 1453 08b1 442B     		.ascii "D+"
 1454 08b3 00       		.p2align 2 	
 1455              	DPLUS:
 1456 08b4 51F8044B 		LDR	R4,[R1],#4
 1457 08b8 51F8046B 		LDR	R6,[R1],#4
 1458 08bc 0F68     		LDR	R7,[R1]
 1459 08be E419     		ADDS	R4,R4,R7
 1460 08c0 0C60     		STR	R4,[R1]
 1461 08c2 45EB0605 		ADC	R5,R5,R6
 1462 08c6 A5E5     		_NEXT
 1463              	
 1464              	//    NOT	 ( w -- !w )
 1465              	// 	1"s complement.
 1466              	
 1467 08c8 B0080000 		.word	_DPLUS
 1468 08cc 03       	_INVER:	.byte   3
 1469 08cd 4E4F54   		.ascii "NOT"
 1470              		.p2align 2 	
 1471              	INVER:
 1472 08d0 6FEA0505 		MVN	R5,R5
 1473 08d4 9EE5     		_NEXT
 1474              	
ARM GAS  stm32eforth-fl.s 			page 30


 1475              	//    NEGATE	( w -- -w )
 1476              	// 	2's complement.
 1477              	
 1478 08d6 CC080000 		.word	_INVER
 1479 08da 06       	_NEGAT:	.byte   6
 1480 08db 4E454741 		.ascii "NEGATE"
 1480      5445
 1481 08e1 0000BF   		.p2align 2 	
 1482              	NEGAT:
 1483 08e4 C5F10005 		RSB	R5,R5,#0
 1484 08e8 94E5     		_NEXT
 1485              	
 1486              	//    ABS	 ( w -- |w| )
 1487              	// 	Absolute.
 1488              	
 1489 08ea DA080000 		.word	_NEGAT
 1490 08ee 03       	_ABSS:	.byte   3
 1491 08ef 414253   		.ascii "ABS"
 1492 08f2 00BF     		.p2align 2 	
 1493              	ABSS:
 1494 08f4 15F0004F 		TST	R5,#0x80000000
 1495 08f8 18BF     		IT NE
 1496 08fa 6D42     	    RSBNE   R5,R5,#0
 1497 08fc 8AE5     		_NEXT
 1498              	
 1499              	//  0= ( w -- f )
 1500              	// TOS==0?
 1501              	
 1502 08fe EE080000 		.word _ABSS
 1503 0902 02       	_ZEQUAL: .byte 2
 1504 0903 303D     		.ascii "0="
 1505 0905 0000BF   		.p2align 2
 1506              	ZEQUAL:
 1507 0908 15B9     		cbnz r5,1f
 1508 090a 4FF0FF35 		mov r5,#-1
 1509 090e 81E5     		_NEXT 
 1510 0910 85EA0505 	1:  eor r5,r5,r5  
 1511 0914 7EE5     		_NEXT 	
 1512              	
 1513              	//    =	 ( w w -- t )
 1514              	// 	Equal?
 1515              	
 1516 0916 02090000 		.word	_ZEQUAL
 1517 091a 01       	_EQUAL:	.byte   1
 1518 091b 3D       		.ascii "="
 1519              		.p2align 2 	
 1520              	EQUAL:
 1521 091c 51F8044B 		LDR	R4,[R1],#4
 1522 0920 A542     		CMP	R5,R4
 1523 0922 0CBF     		ITE EQ 
 1524 0924 6FF00005 	    MVNEQ	R5,#0
 1525 0928 0025     		MOVNE	R5,#0
 1526 092a 73E5     		_NEXT
 1527              	
 1528              	//    U<	 ( w w -- t )
 1529              	// 	Unsigned less?
 1530              	
ARM GAS  stm32eforth-fl.s 			page 31


 1531 092c 1A090000 		.word	_EQUAL
 1532 0930 02       	_ULESS:	.byte   2
 1533 0931 553C     		.ascii "U<"
 1534 0933 00       		.p2align 2 	
 1535              	ULESS:
 1536 0934 51F8044B 		LDR	R4,[R1],#4
 1537 0938 AC42     		CMP	R4,R5
 1538 093a 34BF     		ITE CC 
 1539 093c 6FF00005 		MVNCC	R5,#0
 1540 0940 0025     		MOVCS	R5,#0
 1541 0942 67E5     		_NEXT
 1542              	
 1543              	//    <	( w w -- t )
 1544              	// 	Less?
 1545              	
 1546 0944 30090000 		.word	_ULESS
 1547 0948 01       	_LESS:	.byte   1
 1548 0949 3C       		.ascii "<"
 1549 094a 00BF     		.p2align 2 	
 1550              	LESS:
 1551 094c 51F8044B 		LDR	R4,[R1],#4
 1552 0950 AC42     		CMP	R4,R5
 1553 0952 B4BF     	    ITE LT
 1554 0954 6FF00005 		MVNLT	R5,#0
 1555 0958 0025     		MOVGE	R5,#0
 1556 095a 5BE5     		_NEXT 
 1557              	
 1558              	//    >	( w w -- t )
 1559              	// 	greater?
 1560              	
 1561 095c 48090000 		.word	_LESS
 1562 0960 01       	_GREAT:	.byte   1
 1563 0961 3E       		.ascii ">"
 1564 0962 00BF     		.p2align 2 	
 1565              	GREAT:
 1566 0964 51F8044B 		LDR	R4,[R1],#4
 1567 0968 AC42     		CMP	R4,R5
 1568 096a CCBF     		ITE GT
 1569 096c 6FF00005 	    MVNGT	R5,#0
 1570 0970 0025     		MOVLE	R5,#0
 1571 0972 4FE5     		_NEXT
 1572              	
 1573              	//    MAX	 ( w w -- max )
 1574              	// 	Leave maximum.
 1575              	
 1576 0974 60090000 		.word	_GREAT
 1577 0978 03       	_MAX:	.byte   3
 1578 0979 4D4158   		.ascii "MAX"
 1579              		.p2align 2 	
 1580              	MAX:
 1581 097c 51F8044B 		LDR	R4,[R1],#4
 1582 0980 AC42     		CMP	R4,R5
 1583 0982 C8BF     		IT GT 
 1584 0984 2546     		MOVGT	R5,R4
 1585 0986 45E5     		_NEXT 
 1586              	
 1587              	//    MIN	 ( w w -- min )
ARM GAS  stm32eforth-fl.s 			page 32


 1588              	// 	Leave minimum.
 1589              	
 1590 0988 78090000 		.word	_MAX
 1591 098c 03       	_MIN:	.byte   3
 1592 098d 4D494E   		.ascii "MIN"
 1593              		.p2align 2 	
 1594              	MIN:
 1595 0990 51F8044B 		LDR	R4,[R1],#4
 1596 0994 AC42     		CMP	R4,R5
 1597 0996 B8BF     		IT LT
 1598 0998 2546     		MOVLT	R5,R4
 1599 099a 3BE5     		_NEXT
 1600              	
 1601              	//    +!	 ( w a -- )
 1602              	// 	Add to memory.
 1603              	
 1604 099c 8C090000 		.word	_MIN
 1605 09a0 02       	_PSTOR:	.byte   2
 1606 09a1 2B21     		.ascii "+!"
 1607 09a3 00       		.p2align 2 	
 1608              	PSTOR:
 1609 09a4 51F8044B 		LDR	R4,[R1],#4
 1610 09a8 2E68     		LDR	R6,[R5]
 1611 09aa 2644     		ADD	R6,R6,R4
 1612 09ac 2E60     		STR	R6,[R5]
 1613 09ae 51F8045B 		_POP
 1614 09b2 2FE5     		_NEXT
 1615              	
 1616              	//    2!	 ( d a -- )
 1617              	// 	Store double number.
 1618              	
 1619 09b4 A0090000 		.word	_PSTOR
 1620 09b8 02       	_DSTOR:	.byte   2
 1621 09b9 3221     		.ascii "2!"
 1622 09bb 00       		.p2align 2 	
 1623              	DSTOR:
 1624 09bc 51F8044B 		LDR	R4,[R1],#4
 1625 09c0 51F8046B 		LDR	R6,[R1],#4
 1626 09c4 45F8044B 		STR	R4,[R5],#4
 1627 09c8 2E60     		STR	R6,[R5]
 1628 09ca 51F8045B 		_POP
 1629 09ce 21E5     		_NEXT
 1630              	
 1631              	//    2@	 ( a -- d )
 1632              	// 	Fetch double number.
 1633              	
 1634 09d0 B8090000 		.word	_DSTOR
 1635 09d4 02       	_DAT:	.byte   2
 1636 09d5 3240     		.ascii "2@"
 1637 09d7 00       		.p2align 2 	
 1638              	DAT:
 1639 09d8 6C68     		LDR	R4,[R5,#4]
 1640 09da 41F8044D 		STR	R4,[R1,#-4]!
 1641 09de 2D68     		LDR	R5,[R5]
 1642 09e0 18E5     		_NEXT
 1643              	
 1644              	//    COUNT	( b -- b+1 c )
ARM GAS  stm32eforth-fl.s 			page 33


 1645              	// 	Fetch length of string.
 1646              	
 1647 09e2 D4090000 		.word	_DAT
 1648 09e6 05       	_COUNT:	.byte   5
 1649 09e7 434F554E 		.ascii "COUNT"
 1649      54
 1650              		.p2align 2 	
 1651              	COUNT:
 1652 09ec 15F8014B 		LDRB	R4,[R5],#1
 1653 09f0 41F8045D 		_PUSH
 1654 09f4 2546     		MOV	R5,R4
 1655 09f6 0DE5     		_NEXT
 1656              	
 1657              	//    DNEGATE	( d -- -d )
 1658              	// 	Negate double number.
 1659              	
 1660 09f8 E6090000 		.word	_COUNT
 1661 09fc 07       	_DNEGA:	.byte   7
 1662 09fd 444E4547 		.ascii "DNEGATE"
 1662      415445
 1663              		.p2align 2 	
 1664              	DNEGA:
 1665 0a04 0C68     		LDR	R4,[R1]
 1666 0a06 A6EB0606 		SUB	R6,R6,R6
 1667 0a0a 341B     		SUBS R4,R6,R4
 1668 0a0c 66EB0505 		SBC	R5,R6,R5
 1669 0a10 0C60     		STR	R4,[R1]
 1670 0a12 FFE4     		_NEXT
 1671              	
 1672              	// **************************************************************************
 1673              	//  System and user variables
 1674              	
 1675              	//    doVAR	( -- a )
 1676              	// 	Run time routine for VARIABLE and CREATE.
 1677              	
 1678              	// 	.word	_DNEGA
 1679              	// _DOVAR	.byte  COMPO+5
 1680              	// 	.ascii "doVAR"
 1681              	// 	.p2align 2 	
 1682              	DOVAR:
 1683 0a14 41F8045D 		_PUSH
 1684 0a18 0546     		MOV R5,R0
 1685 0a1a 00F10400 		ADD R0,R0,#4 
 1686 0a1e FCE4     		B UNNEST 
 1687              	
 1688              	//    doCON	( -- a ) 
 1689              	// 	Run time routine for CONSTANT.
 1690              	
 1691              	// 	.word	_DOVAR
 1692              	// _DOCON	.byte  COMPO+5
 1693              	// 	.ascii "doCON"
 1694              	// 	.p2align 2 	
 1695              	DOCON:
 1696 0a20 41F8045D 		_PUSH
 1697 0a24 50F8045B 		LDR.W R5,[R0],#4 
 1698 0a28 F7E4     		B UNNEST 
 1699              	
ARM GAS  stm32eforth-fl.s 			page 34


 1700              	/***********************
 1701              	  system variables 
 1702              	***********************/
 1703              	
 1704              	 // SEED ( -- a)
 1705              	 // return PRNG seed address 
 1706              	
 1707 0a2a FC090000 		.word _DNEGA
 1708 0a2e 04       	_SEED: .byte 4
 1709 0a2f 53454544 		.ascii "SEED"
 1710 0a33 00       		.p2align 2
 1711              	SEED:
 1712 0a34 41F8045D 		_PUSH 
 1713 0a38 03F10405 		ADD R5,R3,#SEED_OFS
 1714 0a3c EAE4     		_NEXT 	
 1715              	
 1716              	//  MSEC ( -- a)
 1717              	// return address of milliseconds counter
 1718 0a3e 2E0A0000 	  .word _SEED 
 1719 0a42 04       	_MSEC: .byte 4
 1720 0a43 4D534543 	  .ascii "MSEC"
 1721 0a47 00       	  .p2align 2 
 1722              	MSEC:
 1723 0a48 41F8045D 	  _PUSH
 1724 0a4c 03F10805 	  ADD R5,R3,#TICKS_OFS
 1725 0a50 E0E4     	  _NEXT 
 1726              	
 1727              	// TIMER ( -- a )
 1728              	// count down timer 
 1729 0a52 420A0000 	  .word _MSEC
 1730 0a56 05       	_TIMER:  .byte 5
 1731 0a57 54494D45 	  .ascii "TIMER"
 1731      52
 1732              	  .p2align 2 
 1733              	TIMER:
 1734 0a5c 41F8045D 	  _PUSH 
 1735 0a60 03F10C05 	  ADD R5,R3,#TIMER_OFS
 1736 0a64 D6E4     	  _NEXT
 1737              	
 1738              	//    'BOOT	 ( -- a )
 1739              	// 	Application.
 1740              	
 1741 0a66 560A0000 		.word	_TIMER
 1742 0a6a 05       	_TBOOT:	.byte   5
 1743 0a6b 27424F4F 		.ascii "'BOOT"
 1743      54
 1744              		.p2align 2 	
 1745              	TBOOT:
 1746 0a70 41F8045D 		_PUSH
 1747 0a74 03F11805 		ADD	R5,R3,#BOOT_OFS 
 1748 0a78 CCE4     		_NEXT
 1749              		
 1750              	//    BASE	( -- a )
 1751              	// 	Storage of the radix base for numeric I/O.
 1752              	
 1753 0a7a 6A0A0000 		.word	_TBOOT
 1754 0a7e 04       	_BASE:	.byte   4
ARM GAS  stm32eforth-fl.s 			page 35


 1755 0a7f 42415345 		.ascii "BASE"
 1756 0a83 00       		.p2align 2 	
 1757              	BASE:
 1758 0a84 41F8045D 		_PUSH
 1759 0a88 03F11C05 		ADD	R5,R3,#BASE_OFS
 1760 0a8c C2E4     		_NEXT
 1761              	
 1762              	//    tmp	 ( -- a )
 1763              	// 	A temporary storage location used in parse and find.
 1764              	
 1765              	// 	.word	_BASE
 1766              	// _TEMP	.byte   COMPO+3
 1767              	// 	.ascii "tmp"
 1768              	// 	.p2align 2 	
 1769              	TEMP:
 1770 0a8e 41F8045D 		_PUSH
 1771 0a92 03F12005 		ADD	R5,R3,#TMP_OFS
 1772 0a96 BDE4     		_NEXT
 1773              	
 1774              	//    SPAN	( -- a )
 1775              	// 	Hold character count received by EXPECT.
 1776              	
 1777 0a98 7E0A0000 		.word	_BASE
 1778 0a9c 04       	_SPAN:	.byte   4
 1779 0a9d 5350414E 		.ascii "SPAN"
 1780 0aa1 0000BF   		.p2align 2 	
 1781              	SPAN:
 1782 0aa4 41F8045D 		_PUSH
 1783 0aa8 03F12405 		ADD	R5,R3,#SPAN_OFS
 1784 0aac B2E4     		_NEXT
 1785              	
 1786              	//    >IN	 ( -- a )
 1787              	// 	Hold the character pointer while parsing input stream.
 1788              	
 1789 0aae 9C0A0000 		.word	_SPAN
 1790 0ab2 03       	_INN:	.byte   3
 1791 0ab3 3E494E   		.ascii ">IN"
 1792 0ab6 00BF     		.p2align 2 	
 1793              	INN:
 1794 0ab8 41F8045D 		_PUSH
 1795 0abc 03F12805 		ADD	R5,R3,#TOIN_OFS
 1796 0ac0 A8E4     		_NEXT
 1797              	
 1798              	//    #TIB	( -- a )
 1799              	// 	Hold the current count and address of the terminal input buffer.
 1800              	
 1801 0ac2 B20A0000 		.word	_INN
 1802 0ac6 04       	_NTIB:	.byte   4
 1803 0ac7 23544942 		.ascii "#TIB"
 1804 0acb 00       		.p2align 2 	
 1805              	NTIB:
 1806 0acc 41F8045D 		_PUSH
 1807 0ad0 03F12C05 		ADD	R5,R3,#NTIB_OFS
 1808 0ad4 9EE4     		_NEXT
 1809              	
 1810              	//    'EVAL	( -- a )
 1811              	// 	Execution vector of EVAL.
ARM GAS  stm32eforth-fl.s 			page 36


 1812              	
 1813 0ad6 C60A0000 		.word	_NTIB
 1814 0ada 05       	_TEVAL:	.byte   5
 1815 0adb 27455641 		.ascii "'EVAL"
 1815      4C
 1816              		.p2align 2 	
 1817              	TEVAL:
 1818 0ae0 41F8045D 		_PUSH
 1819 0ae4 03F13405 		ADD	R5,R3,#EVAL_OFS
 1820 0ae8 94E4     		_NEXT
 1821              	
 1822              	//    HLD	 ( -- a )
 1823              	// 	Hold a pointer in building a numeric output string.
 1824              	
 1825 0aea DA0A0000 		.word	_TEVAL
 1826 0aee 03       	_HLD:	.byte   3
 1827 0aef 484C44   		.ascii "HLD"
 1828 0af2 00BF     		.p2align 2 	
 1829              	HLD:
 1830 0af4 41F8045D 		_PUSH
 1831 0af8 03F13805 		ADD	R5,R3,#HLD_OFS
 1832 0afc 8AE4     		_NEXT
 1833              	
 1834              	//    CONTEXT	( -- a )
 1835              	// 	A area to specify vocabulary search order.
 1836              	
 1837 0afe EE0A0000 		.word	_HLD
 1838 0b02 07       	_CNTXT:	.byte   7
 1839 0b03 434F4E54 		.ascii "CONTEXT"
 1839      455854
 1840 0b0a 00BF     		.p2align 2 	
 1841              	CNTXT:
 1842              	CRRNT:
 1843 0b0c 41F8045D 		_PUSH
 1844 0b10 03F13C05 		ADD	R5,R3,#CTXT_OFS
 1845 0b14 7EE4     		_NEXT
 1846              	
 1847              	//    CP	( -- a )
 1848              	// 	Point to top name in RAM vocabulary.
 1849              	
 1850 0b16 020B0000 		.word	_CNTXT
 1851 0b1a 02       	_CP:	.byte   2
 1852 0b1b 4350     		.ascii "CP"
 1853 0b1d 0000BF   		.p2align 2 	
 1854              	CPP:
 1855 0b20 41F8045D 		_PUSH
 1856 0b24 03F14405 		ADD	R5,R3,#RAM_CTOP_OFS
 1857 0b28 74E4     		_NEXT
 1858              	
 1859              	//   FCP ( -- a )
 1860              	//  Point ot top of Forth system dictionary
 1861 0b2a 1A0B0000 		.word _CP
 1862 0b2e 03       	_FCP: .byte 3            
 1863 0b2f 464350   		.ascii "FCP"
 1864 0b32 00BF     		.p2align 2 
 1865              	FCP: 
 1866 0b34 41F8045D 		_PUSH 
ARM GAS  stm32eforth-fl.s 			page 37


 1867 0b38 03F14005 		ADD R5,R3,#FORTH_CTOP_OFS 
 1868 0b3c 6AE4     		_NEXT 
 1869              	
 1870              	//    LAST	( -- a )
 1871              	// 	Point to the last name in the name dictionary.
 1872              	
 1873 0b3e 2E0B0000 		.word	_FCP
 1874 0b42 04       	_LAST:	.byte   4
 1875 0b43 4C415354 		.ascii "LAST"
 1876 0b47 00       		.p2align 2 	
 1877              	LAST:
 1878 0b48 41F8045D 		_PUSH
 1879 0b4c 03F14805 		ADD	R5,R3,#LASTN_OFS
 1880 0b50 60E4     		_NEXT
 1881              	
 1882              	//	FTRACE ( -- a )
 1883              	// return trace flag address 
 1884 0b52 420B0000 		.word _LAST  
 1885 0b56 06       	_FTRACE: .byte 6
 1886 0b57 46545241 		.ascii "FTRACE"
 1886      4345
 1887 0b5d 0000BF   		.p2align 2 
 1888              	FTRACE:	
 1889 0b60 41F8045D 		_PUSH 
 1890 0b64 03F11005 		ADD R5,R3,#FTRACE_OFS 
 1891 0b68 54E4     		_NEXT 
 1892              	
 1893              	/***********************
 1894              		system constants 
 1895              	***********************/
 1896              	
 1897              	//	USER_BEGIN ( -- a )
 1898              	//  where user area begin in RAM
 1899 0b6a 560B0000 		.word _FTRACE
 1900 0b6e 0A       	_USER_BGN: .byte 10
 1901 0b6f 55534552 		.ascii "USER_BEGIN"
 1901      5F424547 
 1901      494E
 1902 0b79 0000BF   		.p2align 2
 1903              	USER_BEGIN:
 1904 0b7c 41F8045D 		_PUSH 
 1905 0b80 004D     		ldr r5,USR_BGN_ADR 
 1906 0b82 47E4     		_NEXT 
 1907              	USR_BGN_ADR:
 1908 0b84 00010020 	.word  DTOP 
 1909              	
 1910              	//  USER_END ( -- a )
 1911              	//  where user area end in RAM 
 1912 0b88 6E0B0000 		.word _USER_BGN
 1913 0b8c 08       	_USER_END: .byte 8 
 1914 0b8d 55534552 		.ascii "USER_END" 
 1914      5F454E44 
 1915 0b95 0000BF   		.p2align 2 
 1916              	USER_END:
 1917 0b98 41F8045D 		_PUSH 
 1918 0b9c 004D     		ldr r5,USER_END_ADR 
 1919 0b9e 39E4     		_NEXT 
ARM GAS  stm32eforth-fl.s 			page 38


 1920              	USER_END_ADR:
 1921 0ba0 004E0020 		.word DEND 
 1922              	
 1923              	//  IMG_ADR ( -- a )
 1924              	//  where user image is saved in FLASH
 1925 0ba4 8C0B0000 		.word _USER_END
 1926 0ba8 07       	_IMG_ADR: .byte 7
 1927 0ba9 494D475F 		.ascii "IMG_ADR"
 1927      414452
 1928              		.p2align 2 
 1929              	IMG_ADR:
 1930 0bb0 41F8045D 		_PUSH
 1931 0bb4 004D     		ldr r5,USR_IMG_ADR   
 1932 0bb6 2DE4     		_NEXT 
 1933              	USR_IMG_ADR:
 1934 0bb8 00000000 		.word USER_SPACE 
 1935              	
 1936              	// IMG_SIGN ( -- a )
 1937              	// image signature 
 1938 0bbc A80B0000 		.word _IMG_ADR 
 1939 0bc0 08       	_IMG_SIGN: .byte 8
 1940 0bc1 494D475F 		.ascii "IMG_SIGN"
 1940      5349474E 
 1941 0bc9 0000BF   		.p2align 2
 1942              	IMG_SIGN: 
 1943 0bcc 41F8045D 		_PUSH 
 1944 0bd0 03F11405 		ADD r5,r3,#IMG_SIGN_OFS 
 1945 0bd4 1EE4     		_NEXT 
 1946              	
 1947              	/* *********************
 1948              	  Common functions
 1949              	***********************/
 1950              	
 1951              	//    WITHIN	( u ul uh -- t )
 1952              	// 	Return true if u is within the range of ul and uh.
 1953              	
 1954 0bd6 C00B0000 		.word	_IMG_SIGN
 1955 0bda 06       	_WITHI:	.byte   6
 1956 0bdb 57495448 		.ascii "WITHIN"
 1956      494E
 1957 0be1 0000BF   		.p2align 2 	
 1958              	WITHI:
 1959 0be4 404700BF 		_NEST
 1960 0be8 B5060000 		_ADR	OVER
 1961 0bec 65070000 		_ADR	SUBB
 1962 0bf0 39060000 		_ADR	TOR
 1963 0bf4 65070000 		_ADR	SUBB
 1964 0bf8 15060000 		_ADR	RFROM
 1965 0bfc 35090000 		_ADR	ULESS
 1966 0c00 1B040000 		_UNNEST
 1967              	
 1968              	//  Divide
 1969              	
 1970              	//    UM/MOD	( udl udh u -- ur uq )
 1971              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1972              	
 1973 0c04 DA0B0000 		.word	_WITHI
ARM GAS  stm32eforth-fl.s 			page 39


 1974 0c08 06       	_UMMOD:	.byte   6
 1975 0c09 554D2F4D 		.ascii "UM/MOD"
 1975      4F44
 1976 0c0f 00       		.p2align 2 	
 1977              	UMMOD:
 1978 0c10 4FF00107 		MOV	R7,#1
 1979 0c14 51F8044B 		LDR	R4,[R1],#4
 1980 0c18 0E68     		LDR	R6,[R1]
 1981              	UMMOD0:
 1982 0c1a B619     		ADDS	R6,R6,R6
 1983 0c1c 6441     		ADCS	R4,R4,R4
 1984 0c1e 04D3     		BCC	UMMOD1
 1985 0c20 A4EB0504 		SUB	R4,R4,R5
 1986 0c24 06F10106 		ADD	R6,R6,#1
 1987 0c28 04E0     		B UMMOD2
 1988              	UMMOD1:
 1989 0c2a 641B     		SUBS	R4,R4,R5 
 1990 0c2c 28BF     		IT CS 
 1991 0c2e 0136     		ADDCS	R6,R6,#1
 1992 0c30 00D2     		BCS	UMMOD2
 1993 0c32 2C44     		ADD	R4,R4,R5
 1994              	UMMOD2:
 1995 0c34 FF19     		ADDS	R7,R7,R7
 1996 0c36 F0D3     		BCC	UMMOD0
 1997 0c38 3546     		MOV	R5,R6
 1998 0c3a 0C60     		STR	R4,[R1]
 1999 0c3c FFF7EABB 		_NEXT
 2000              	
 2001              	//    M/MOD	( d n -- r q )
 2002              	// 	Signed floored divide of double by single. Return mod and quotient.
 2003              	
 2004 0c40 080C0000 		.word	_UMMOD
 2005 0c44 05       	_MSMOD:	.byte  5
 2006 0c45 4D2F4D4F 		.ascii "M/MOD"
 2006      44
 2007 0c4a 00BF     		.p2align 2 	
 2008              	MSMOD:	
 2009 0c4c 404700BF 		_NEST
 2010 0c50 91060000 		_ADR	DUPP
 2011 0c54 C5060000 		_ADR	ZLESS
 2012 0c58 91060000 		_ADR	DUPP
 2013 0c5c 39060000 		_ADR	TOR
 2014 0c60 A9050000 		_QBRAN MMOD1
 2014      780C0000 
 2015 0c68 E5080000 		_ADR	NEGAT
 2016 0c6c 39060000 		_ADR	TOR
 2017 0c70 050A0000 		_ADR	DNEGA
 2018 0c74 15060000 		_ADR	RFROM
 2019              	MMOD1:
 2020 0c78 39060000 		_ADR	TOR
 2021 0c7c 91060000 		_ADR	DUPP
 2022 0c80 C5060000 		_ADR	ZLESS
 2023 0c84 A9050000 		_QBRAN MMOD2
 2023      940C0000 
 2024 0c8c 29060000 		_ADR	RAT
 2025 0c90 55070000 		_ADR	PLUS
 2026              	MMOD2:
ARM GAS  stm32eforth-fl.s 			page 40


 2027 0c94 15060000 		_ADR	RFROM
 2028 0c98 110C0000 		_ADR	UMMOD
 2029 0c9c 15060000 		_ADR	RFROM
 2030 0ca0 A9050000 		_QBRAN	MMOD3
 2030      B40C0000 
 2031 0ca8 A1060000 		_ADR	SWAP
 2032 0cac E5080000 		_ADR	NEGAT
 2033 0cb0 A1060000 		_ADR	SWAP
 2034              	MMOD3:   
 2035 0cb4 1B040000 		_UNNEST
 2036              	
 2037              	//    /MOD	( n n -- r q )
 2038              	// 	Signed divide. Return mod and quotient.
 2039              	
 2040 0cb8 440C0000 		.word	_MSMOD
 2041 0cbc 04       	_SLMOD:	.byte   4
 2042 0cbd 2F4D4F44 		.ascii "/MOD"
 2043 0cc1 0000BF   		.p2align 2 	
 2044              	SLMOD:
 2045 0cc4 404700BF 		_NEST
 2046 0cc8 B5060000 		_ADR	OVER
 2047 0ccc C5060000 		_ADR	ZLESS
 2048 0cd0 A1060000 		_ADR	SWAP
 2049 0cd4 4D0C0000 		_ADR	MSMOD
 2050 0cd8 1B040000 		_UNNEST
 2051              	
 2052              	//    MOD	 ( n n -- r )
 2053              	// 	Signed divide. Return mod only.
 2054              	
 2055 0cdc BC0C0000 		.word	_SLMOD
 2056 0ce0 03       	_MODD:	.byte  3
 2057 0ce1 4D4F44   		.ascii "MOD"
 2058              		.p2align 2 	
 2059              	MODD:
 2060 0ce4 404700BF 		_NEST
 2061 0ce8 C50C0000 		_ADR	SLMOD
 2062 0cec 81060000 		_ADR	DROP
 2063 0cf0 1B040000 		_UNNEST
 2064              	
 2065              	//    /	   ( n n -- q )
 2066              	// 	Signed divide. Return quotient only.
 2067              	
 2068 0cf4 E00C0000 		.word	_MODD
 2069 0cf8 01       	_SLASH:	.byte  1
 2070 0cf9 2F       		.ascii "/"
 2071 0cfa 00BF     		.p2align 2 	
 2072              	SLASH:
 2073 0cfc 404700BF 		_NEST
 2074 0d00 C50C0000 		_ADR	SLMOD
 2075 0d04 A1060000 		_ADR	SWAP
 2076 0d08 81060000 		_ADR	DROP
 2077 0d0c 1B040000 		_UNNEST
 2078              	
 2079              	//    */MOD	( n1 n2 n3 -- r q )
 2080              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 2081              	
 2082 0d10 F80C0000 		.word	_SLASH
ARM GAS  stm32eforth-fl.s 			page 41


 2083 0d14 05       	_SSMOD:	.byte  5
 2084 0d15 2A2F4D4F 		.ascii "*/MOD"
 2084      44
 2085 0d1a 00BF     		.p2align 2 	
 2086              	SSMOD:
 2087 0d1c 404700BF 		_NEST
 2088 0d20 39060000 		_ADR	TOR
 2089 0d24 9D070000 		_ADR	MSTAR
 2090 0d28 15060000 		_ADR	RFROM
 2091 0d2c 4D0C0000 		_ADR	MSMOD
 2092 0d30 1B040000 		_UNNEST
 2093              	
 2094              	//    */	  ( n1 n2 n3 -- q )
 2095              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 2096              	
 2097 0d34 140D0000 		.word	_SSMOD
 2098 0d38 02       	_STASL:	.byte  2
 2099 0d39 2A2F     		.ascii "*/"
 2100 0d3b 00       		.p2align 2 	
 2101              	STASL:
 2102 0d3c 404700BF 		_NEST
 2103 0d40 1D0D0000 		_ADR	SSMOD
 2104 0d44 A1060000 		_ADR	SWAP
 2105 0d48 81060000 		_ADR	DROP
 2106 0d4c 1B040000 		_UNNEST
 2107              	
 2108              	// **************************************************************************
 2109              	//  Miscellaneous
 2110              	
 2111              	//    ALIGNED	( b -- a )
 2112              	// 	Align address to the cell boundary.
 2113              	
 2114 0d50 380D0000 		.word	_STASL
 2115 0d54 07       	_ALGND:	.byte   7
 2116 0d55 414C4947 		.ascii "ALIGNED"
 2116      4E4544
 2117              		.p2align 2 	
 2118              	ALGND:
 2119 0d5c 05F10305 		ADD	R5,R5,#3
 2120 0d60 6FF00304 		MVN	R4,#3
 2121 0d64 05EA0405 		AND	R5,R5,R4
 2122 0d68 FFF754BB 		_NEXT
 2123              	
 2124              	//    >CHAR	( c -- c )
 2125              	// 	Filter non-printing characters.
 2126              	
 2127 0d6c 540D0000 		.word	_ALGND
 2128 0d70 05       	_TCHAR:	.byte  5
 2129 0d71 3E434841 		.ascii ">CHAR"
 2129      52
 2130 0d76 00BF     		.p2align 2 	
 2131              	TCHAR:
 2132 0d78 404700BF 		_NEST
 2133 0d7c 6D050000 		_DOLIT  0x7F
 2133      7F000000 
 2134 0d84 D5060000 		_ADR	ANDD
 2135 0d88 91060000 		_ADR	DUPP	// mask msb
ARM GAS  stm32eforth-fl.s 			page 42


 2136 0d8c 11080000 		_ADR	BLANK
 2137 0d90 6D050000 		_DOLIT 	127
 2137      7F000000 
 2138 0d98 E50B0000 		_ADR	WITHI	// check for printable
 2139 0d9c D1080000 		_ADR	INVER
 2140 0da0 A9050000 		_QBRAN	TCHA1
 2140      B40D0000 
 2141 0da8 81060000 		_ADR	DROP
 2142 0dac 6D050000 		_DOLIT 	'_'	// replace non-printables
 2142      5F000000 
 2143              	TCHA1:
 2144 0db4 1B040000 		  _UNNEST
 2145              	
 2146              	//    DEPTH	( -- n )
 2147              	// 	Return the depth of the data stack.
 2148              	
 2149 0db8 700D0000 		.word	_TCHAR
 2150 0dbc 05       	_DEPTH:	.byte  5
 2151 0dbd 44455054 		.ascii "DEPTH"
 2151      48
 2152 0dc2 00BF     		.p2align 2 	
 2153              	DEPTH:
 2154 0dc4 44F68066 		MOVW	R6,#SPP&0xffff
 2155 0dc8 C2F20006 	 	MOVT	R6,#SPP>>16 
 2156 0dcc A6EB0106 		SUB	R6,R6,R1
 2157 0dd0 41F8045D 		_PUSH
 2158 0dd4 4FEAA605 		ASR	R5,R6,#2
 2159 0dd8 FFF71CBB 		_NEXT
 2160              	
 2161              	//    PICK	( ... +n -- ... w )
 2162              	// 	Copy the nth stack item to tos.
 2163              	
 2164 0ddc BC0D0000 		.word	_DEPTH
 2165 0de0 04       	_PICK:	.byte  4
 2166 0de1 5049434B 		.ascii "PICK"
 2167 0de5 0000BF   		.p2align 2 	
 2168              	PICK:
 2169 0de8 404700BF 		_NEST
 2170 0dec B1070000 		_ADR	ONEP
 2171 0df0 25080000 		_ADR	CELLS
 2172 0df4 6D060000 		_ADR	SPAT
 2173 0df8 55070000 		_ADR	PLUS
 2174 0dfc E9050000 		_ADR	AT
 2175 0e00 1B040000 		_UNNEST
 2176              	
 2177              	// **************************************************************************
 2178              	//  Memory access
 2179              	
 2180              	//    HERE	( -- a )
 2181              	// 	Return the top of the code dictionary.
 2182              	
 2183 0e04 E00D0000 		.word	_PICK
 2184 0e08 04       	_HERE:	.byte  4
 2185 0e09 48455245 		.ascii "HERE"
 2186 0e0d 0000BF   		.p2align 2 	
 2187              	HERE:
 2188 0e10 404700BF 		_NEST
ARM GAS  stm32eforth-fl.s 			page 43


 2189 0e14 210B0000 		_ADR	CPP
 2190 0e18 E9050000 		_ADR	AT
 2191 0e1c 1B040000 		_UNNEST
 2192              		
 2193              	//    PAD	 ( -- a )
 2194              	// 	Return the address of a temporary buffer.
 2195              	
 2196 0e20 080E0000 		.word	_HERE
 2197 0e24 03       	_PAD:	.byte  3
 2198 0e25 504144   		.ascii "PAD"
 2199              		.p2align 2 	
 2200              	PAD:
 2201 0e28 404700BF 		_NEST
 2202 0e2c 110E0000 		_ADR	HERE
 2203 0e30 6D050000 		_DOLIT 80
 2203      50000000 
 2204 0e38 55070000 		_ADR PLUS 
 2205 0e3c 1B040000 		_UNNEST
 2206              	
 2207              	//    TIB	 ( -- a )
 2208              	// 	Return the address of the terminal input buffer.
 2209              	
 2210 0e40 240E0000 		.word	_PAD
 2211 0e44 03       	_TIB:	.byte  3
 2212 0e45 544942   		.ascii "TIB"
 2213              		.p2align 2 	
 2214              	TIB:
 2215 0e48 41F8045D 		_PUSH
 2216 0e4c 1D6B     		ldr r5,[r3,#TIB_OFS]
 2217 0e4e FFF7E1BA 		_NEXT
 2218              	
 2219              	//    @EXECUTE	( a -- )
 2220              	// 	Execute vector stored in address a.
 2221              	
 2222 0e52 440E0000 		.word	_TIB
 2223 0e56 08       	_ATEXE:	.byte   8
 2224 0e57 40455845 		.ascii "@EXECUTE"
 2224      43555445 
 2225 0e5f 00       		.p2align 2 	
 2226              	ATEXE: 
 2227 0e60 2C00     		MOVS	R4,R5
 2228 0e62 51F8045B 		_POP
 2229 0e66 2468     		LDR	R4,[R4]
 2230 0e68 44F00104 		ORR	R4,R4,#1
 2231 0e6c 18BF     	    IT NE 
 2232 0e6e 2047     		BXNE	R4
 2233 0e70 FFF7D0BA 		_NEXT
 2234              	
 2235              	//    CMOVE	( b1 b2 u -- )
 2236              	// 	Copy u bytes from b1 to b2.
 2237              	
 2238 0e74 560E0000 		.word	_ATEXE
 2239 0e78 05       	_CMOVE:	.byte   5
 2240 0e79 434D4F56 		.ascii "CMOVE"
 2240      45
 2241 0e7e 00BF     		.p2align 2 	
 2242              	CMOVE:
ARM GAS  stm32eforth-fl.s 			page 44


 2243 0e80 51F8046B 		LDR	R6,[R1],#4
 2244 0e84 51F8047B 		LDR	R7,[R1],#4
 2245 0e88 03E0     		B CMOV1
 2246              	CMOV0:
 2247 0e8a 17F8014B 		LDRB	R4,[R7],#1
 2248 0e8e 06F8014B 		STRB	R4,[R6],#1
 2249              	CMOV1:
 2250 0e92 2D00     		MOVS	R5,R5
 2251 0e94 02D0     		BEQ	CMOV2
 2252 0e96 A5F10105 		SUB	R5,R5,#1
 2253 0e9a F6E7     		B CMOV0
 2254              	CMOV2:
 2255 0e9c 51F8045B 		_POP
 2256 0ea0 FFF7B8BA 		_NEXT
 2257              	
 2258              	//    MOVE	( a1 a2 u -- )
 2259              	// 	Copy u words from a1 to a2.
 2260              	
 2261 0ea4 780E0000 		.word	_CMOVE
 2262 0ea8 04       	_MOVE:	.byte   4
 2263 0ea9 4D4F5645 		.ascii "MOVE"
 2264 0ead 0000BF   		.p2align 2 	
 2265              	MOVE:
 2266 0eb0 25F00305 		AND	R5,R5,#-4
 2267 0eb4 51F8046B 		LDR	R6,[R1],#4
 2268 0eb8 51F8047B 		LDR	R7,[R1],#4
 2269 0ebc 03E0     		B MOVE1
 2270              	MOVE0:
 2271 0ebe 57F8044B 		LDR	R4,[R7],#4
 2272 0ec2 46F8044B 		STR	R4,[R6],#4
 2273              	MOVE1:
 2274 0ec6 2D00     		MOVS	R5,R5
 2275 0ec8 02D0     		BEQ	MOVE2
 2276 0eca A5F10405 		SUB	R5,R5,#4
 2277 0ece F6E7     		B MOVE0
 2278              	MOVE2:
 2279 0ed0 51F8045B 		_POP
 2280 0ed4 FFF79EBA 		_NEXT
 2281              	
 2282              	//    FILL	( b u c -- )
 2283              	// 	Fill u bytes of character c to area beginning at b.
 2284              	
 2285 0ed8 A80E0000 		.word	_MOVE
 2286 0edc 04       	_FILL:	.byte   4
 2287 0edd 46494C4C 		.ascii "FILL"
 2288 0ee1 0000BF   		.p2align 2 	
 2289              	FILL:
 2290 0ee4 51F8046B 		LDR	R6,[R1],#4
 2291 0ee8 51F8047B 		LDR	R7,[R1],#4
 2292              	FILL0:
 2293 0eec 00E0     		B FILL1
 2294 0eee 2D46     		MOV	R5,R5
 2295              	FILL1:
 2296 0ef0 07F8015B 		STRB	R5,[R7],#1
 2297 0ef4 3600     		MOVS	R6,R6
 2298 0ef6 02D0     		BEQ	FILL2
 2299 0ef8 A6F10106 		SUB	R6,R6,#1
ARM GAS  stm32eforth-fl.s 			page 45


 2300 0efc F6E7     		B FILL0
 2301              	FILL2:
 2302 0efe 51F8045B 		_POP
 2303 0f02 FFF787BA 		_NEXT
 2304              	
 2305              	//    PACK$	( b u a -- a )
 2306              	// 	Build a counted word with u characters from b. Null fill.
 2307              	
 2308 0f06 DC0E0000 		.word	_FILL
 2309 0f0a 05       	_PACKS:	.byte  5
 2310 0f0b 5041434B 		.ascii "PACK$$"
 2310      2424
 2311 0f11 0000BF   		.p2align 2 	
 2312              	PACKS:
 2313 0f14 404700BF 		_NEST
 2314 0f18 5D0D0000 		_ADR	ALGND
 2315 0f1c 91060000 		_ADR	DUPP
 2316 0f20 39060000 		_ADR	TOR			// strings only on cell boundary
 2317 0f24 B5060000 		_ADR	OVER
 2318 0f28 55070000 		_ADR	PLUS
 2319 0f2c B1070000 		_ADR	ONEP
 2320 0f30 6D050000 		_DOLIT 	0xFFFFFFFC
 2320      FCFFFFFF 
 2321 0f38 D5060000 		_ADR	ANDD			// count mod cell
 2322 0f3c 6D050000 		_DOLIT 	0
 2322      00000000 
 2323 0f44 A1060000 		_ADR	SWAP
 2324 0f48 D5050000 		_ADR	STORE			// null fill cell
 2325 0f4c 29060000 		_ADR	RAT
 2326 0f50 A1080000 		_ADR	DDUP
 2327 0f54 F5050000 		_ADR	CSTOR
 2328 0f58 B1070000 		_ADR	ONEP			// save count
 2329 0f5c A1060000 		_ADR	SWAP
 2330 0f60 810E0000 		_ADR	CMOVE
 2331 0f64 15060000 		_ADR	RFROM
 2332 0f68 1B040000 		_UNNEST   			// move string
 2333              	
 2334              	// **************************************************************************
 2335              	//  Numeric output, single precision
 2336              	
 2337              	//    DIGIT	( u -- c )
 2338              	// 	Convert digit u to a character.
 2339              	
 2340 0f6c 0A0F0000 		.word	_PACKS
 2341 0f70 05       	_DIGIT:	.byte  5
 2342 0f71 44494749 		.ascii "DIGIT"
 2342      54
 2343 0f76 00BF     		.p2align 2 	
 2344              	DIGIT:
 2345 0f78 404700BF 		_NEST
 2346 0f7c 6D050000 		_DOLIT 9
 2346      09000000 
 2347 0f84 B5060000 		_ADR	OVER
 2348 0f88 4D090000 		_ADR	LESS
 2349 0f8c 6D050000 		_DOLIT	7
 2349      07000000 
 2350 0f94 D5060000 		_ADR	ANDD
ARM GAS  stm32eforth-fl.s 			page 46


 2351 0f98 55070000 		_ADR	PLUS
 2352 0f9c 6D050000 		_DOLIT	'0'
 2352      30000000 
 2353 0fa4 55070000 		_ADR	PLUS 
 2354 0fa8 1B040000 		_UNNEST
 2355              	
 2356              	//    EXTRACT	( n base -- n c )
 2357              	// 	Extract the least significant digit from n.
 2358              	
 2359 0fac 700F0000 		.word	_DIGIT
 2360 0fb0 07       	_EXTRC:	.byte  7
 2361 0fb1 45585452 		.ascii "EXTRACT"
 2361      414354
 2362              		.p2align 2 	
 2363              	EXTRC:
 2364 0fb8 404700BF 		_NEST
 2365 0fbc 6D050000 		_DOLIT 0
 2365      00000000 
 2366 0fc4 A1060000 		_ADR	SWAP
 2367 0fc8 110C0000 		_ADR	UMMOD
 2368 0fcc A1060000 		_ADR	SWAP
 2369 0fd0 790F0000 		_ADR	DIGIT
 2370 0fd4 1B040000 		_UNNEST
 2371              	
 2372              	//    <#	  ( -- )
 2373              	// 	Initiate the numeric output process.
 2374              	
 2375 0fd8 B00F0000 		.word	_EXTRC
 2376 0fdc 02       	_BDIGS:	.byte  2
 2377 0fdd 3C23     		.ascii "<#"
 2378 0fdf 00       		.p2align 2 	
 2379              	BDIGS:
 2380 0fe0 404700BF 		_NEST
 2381 0fe4 290E0000 		_ADR	PAD
 2382 0fe8 F50A0000 		_ADR	HLD
 2383 0fec D5050000 		_ADR	STORE
 2384 0ff0 1B040000 		_UNNEST
 2385              	
 2386              	//    HOLD	( c -- )
 2387              	// 	Insert a character into the numeric output string.
 2388              	
 2389 0ff4 DC0F0000 		.word	_BDIGS
 2390 0ff8 04       	_HOLD:	.byte  4
 2391 0ff9 484F4C44 		.ascii "HOLD"
 2392 0ffd 0000BF   		.p2align 2 	
 2393              	HOLD:
 2394 1000 404700BF 		_NEST
 2395 1004 F50A0000 		_ADR	HLD
 2396 1008 E9050000 		_ADR	AT
 2397 100c C1070000 		_ADR	ONEM
 2398 1010 91060000 		_ADR	DUPP
 2399 1014 F50A0000 		_ADR	HLD
 2400 1018 D5050000 		_ADR	STORE
 2401 101c F5050000 		_ADR	CSTOR
 2402 1020 1B040000 		_UNNEST
 2403              	
 2404              	//    #	   ( u -- u )
ARM GAS  stm32eforth-fl.s 			page 47


 2405              	// 	Extract one digit from u and append the digit to output string.
 2406              	
 2407 1024 F80F0000 		.word	_HOLD
 2408 1028 01       	_DIG:	.byte  1
 2409 1029 23       		.ascii "#"
 2410 102a 00BF     		.p2align 2 	
 2411              	DIG:
 2412 102c 404700BF 		_NEST
 2413 1030 850A0000 		_ADR	BASE
 2414 1034 E9050000 		_ADR	AT
 2415 1038 B90F0000 		_ADR	EXTRC
 2416 103c 01100000 		_ADR	HOLD
 2417 1040 1B040000 		_UNNEST
 2418              	
 2419              	//    #S	  ( u -- 0 )
 2420              	// 	Convert u until all digits are added to the output string.
 2421              	
 2422 1044 28100000 		.word	_DIG
 2423 1048 02       	_DIGS:	.byte  2
 2424 1049 2353     		.ascii "#S"
 2425 104b 00       		.p2align 2 	
 2426              	DIGS:
 2427 104c 404700BF 		_NEST
 2428              	DIGS1:
 2429 1050 2D100000 	    _ADR	DIG
 2430 1054 91060000 		_ADR	DUPP
 2431 1058 A9050000 		_QBRAN 	DIGS2
 2431      68100000 
 2432 1060 BB050000 		_BRAN	DIGS1
 2432      50100000 
 2433              	DIGS2:
 2434 1068 1B040000 		  _UNNEST
 2435              	
 2436              	//    SIGN	( n -- )
 2437              	// 	Add a minus sign to the numeric output string.
 2438              	
 2439 106c 48100000 		.word	_DIGS
 2440 1070 04       	_SIGN:	.byte  4
 2441 1071 5349474E 		.ascii "SIGN"
 2442 1075 0000BF   		.p2align 2 	
 2443              	SIGN:
 2444 1078 404700BF 		_NEST
 2445 107c C5060000 		_ADR	ZLESS
 2446 1080 A9050000 		_QBRAN	SIGN1
 2446      94100000 
 2447 1088 6D050000 		_DOLIT '-'
 2447      2D000000 
 2448 1090 01100000 		_ADR	HOLD
 2449              	SIGN1:
 2450 1094 1B040000 		  _UNNEST
 2451              	
 2452              	//    #>	  ( w -- b u )
 2453              	// 	Prepare the output word to be TYPE'd.
 2454              	
 2455 1098 70100000 		.word	_SIGN
 2456 109c 02       	_EDIGS:	.byte  2
 2457 109d 233E     		.ascii "#>"
ARM GAS  stm32eforth-fl.s 			page 48


 2458 109f 00       		.p2align 2 	
 2459              	EDIGS:
 2460 10a0 404700BF 		_NEST
 2461 10a4 81060000 		_ADR	DROP
 2462 10a8 F50A0000 		_ADR	HLD
 2463 10ac E9050000 		_ADR	AT
 2464 10b0 290E0000 		_ADR	PAD
 2465 10b4 B5060000 		_ADR	OVER
 2466 10b8 65070000 		_ADR	SUBB
 2467 10bc 1B040000 		_UNNEST
 2468              	
 2469              	//    str	 ( n -- b u )
 2470              	// 	Convert a signed integer to a numeric string.
 2471              	
 2472              	// 	.word	_EDIGS
 2473              	// _STRR	.byte  3
 2474              	// 	.ascii "str"
 2475              	// 	.p2align 2 	
 2476              	STRR:
 2477 10c0 404700BF 		_NEST
 2478 10c4 91060000 		_ADR	DUPP
 2479 10c8 39060000 		_ADR	TOR
 2480 10cc F5080000 		_ADR	ABSS
 2481 10d0 E10F0000 		_ADR	BDIGS
 2482 10d4 4D100000 		_ADR	DIGS
 2483 10d8 15060000 		_ADR	RFROM
 2484 10dc 79100000 		_ADR	SIGN
 2485 10e0 A1100000 		_ADR	EDIGS
 2486 10e4 1B040000 		_UNNEST
 2487              	
 2488              	//    HEX	 ( -- )
 2489              	// 	Use radix 16 as base for numeric conversions.
 2490              	
 2491 10e8 9C100000 		.word	_EDIGS
 2492 10ec 03       	_HEX:	.byte  3
 2493 10ed 484558   		.ascii "HEX"
 2494              		.p2align 2 	
 2495              	HEX:
 2496 10f0 404700BF 		_NEST
 2497 10f4 6D050000 		_DOLIT 16
 2497      10000000 
 2498 10fc 850A0000 		_ADR	BASE
 2499 1100 D5050000 		_ADR	STORE
 2500 1104 1B040000 		_UNNEST
 2501              	
 2502              	//    DECIMAL	( -- )
 2503              	// 	Use radix 10 as base for numeric conversions.
 2504              	
 2505 1108 EC100000 		.word	_HEX
 2506 110c 07       	_DECIM:	.byte  7
 2507 110d 44454349 		.ascii "DECIMAL"
 2507      4D414C
 2508              		.p2align 2 	
 2509              	DECIM:
 2510 1114 404700BF 		_NEST
 2511 1118 6D050000 		_DOLIT 10
 2511      0A000000 
ARM GAS  stm32eforth-fl.s 			page 49


 2512 1120 850A0000 		_ADR	BASE
 2513 1124 D5050000 		_ADR	STORE
 2514 1128 1B040000 		_UNNEST
 2515              	
 2516              	// **************************************************************************
 2517              	//  Numeric input, single precision
 2518              	
 2519              	//    DIGIT?	( c base -- u t )
 2520              	// 	Convert a character to its numeric value. A flag indicates success.
 2521              	
 2522 112c 0C110000 		.word	_DECIM
 2523 1130 06       	_DIGTQ:	.byte  6
 2524 1131 44494749 		.ascii "DIGIT?"
 2524      543F
 2525 1137 00       		.p2align 2 	
 2526              	DIGTQ:
 2527 1138 404700BF 		_NEST
 2528 113c 39060000 		_ADR	TOR
 2529 1140 6D050000 		_DOLIT 	'0'
 2529      30000000 
 2530 1148 65070000 		_ADR	SUBB
 2531 114c 6D050000 		_DOLIT 9
 2531      09000000 
 2532 1154 B5060000 		_ADR	OVER
 2533 1158 4D090000 		_ADR	LESS
 2534 115c A9050000 		_QBRAN	DGTQ1
 2534      84110000 
 2535 1164 6D050000 		_DOLIT 7
 2535      07000000 
 2536 116c 65070000 		_ADR	SUBB
 2537 1170 91060000 		_ADR	DUPP
 2538 1174 6D050000 		_DOLIT	10
 2538      0A000000 
 2539 117c 4D090000 		_ADR	LESS
 2540 1180 E9060000 		_ADR	ORR
 2541              	DGTQ1:
 2542 1184 91060000 		_ADR	DUPP
 2543 1188 15060000 		_ADR	RFROM
 2544 118c 35090000 		_ADR	ULESS
 2545 1190 1B040000 		_UNNEST
 2546              	
 2547              	//    NUMBER?	( a -- n T | a F )
 2548              	// 	Convert a number word to integer. Push a flag on tos.
 2549              	
 2550 1194 30110000 		.word	_DIGTQ
 2551 1198 07       	_NUMBQ:	.byte  7
 2552 1199 4E554D42 		.ascii "NUMBER?"
 2552      45523F
 2553              		.p2align 2 	
 2554              	NUMBQ:
 2555 11a0 404700BF 		_NEST
 2556 11a4 850A0000 		_ADR	BASE
 2557 11a8 E9050000 		_ADR	AT
 2558 11ac 39060000 		_ADR	TOR
 2559 11b0 6D050000 		_DOLIT	0
 2559      00000000 
 2560 11b8 B5060000 		_ADR	OVER
ARM GAS  stm32eforth-fl.s 			page 50


 2561 11bc ED090000 		_ADR	COUNT
 2562 11c0 B5060000 		_ADR	OVER
 2563 11c4 09060000 		_ADR	CAT
 2564 11c8 6D050000 		_DOLIT '$'
 2564      24000000 
 2565 11d0 1D090000 		_ADR	EQUAL
 2566 11d4 A9050000 		_QBRAN	NUMQ1
 2566      F0110000 
 2567 11dc F1100000 		_ADR	HEX
 2568 11e0 A1060000 		_ADR	SWAP
 2569 11e4 B1070000 		_ADR	ONEP
 2570 11e8 A1060000 		_ADR	SWAP
 2571 11ec C1070000 		_ADR	ONEM
 2572              	NUMQ1:
 2573 11f0 B5060000 		_ADR	OVER
 2574 11f4 09060000 		_ADR	CAT
 2575 11f8 6D050000 		_DOLIT	'-'
 2575      2D000000 
 2576 1200 1D090000 		_ADR	EQUAL
 2577 1204 39060000 		_ADR	TOR
 2578 1208 A1060000 		_ADR	SWAP
 2579 120c 29060000 		_ADR	RAT
 2580 1210 65070000 		_ADR	SUBB
 2581 1214 A1060000 		_ADR	SWAP
 2582 1218 29060000 		_ADR	RAT
 2583 121c 55070000 		_ADR	PLUS
 2584 1220 65080000 		_ADR	QDUP
 2585 1224 A9050000 		_QBRAN	NUMQ6
 2585      B8120000 
 2586 122c C1070000 		_ADR	ONEM
 2587 1230 39060000 		_ADR	TOR
 2588              	NUMQ2:
 2589 1234 91060000 		_ADR	DUPP
 2590 1238 39060000 		_ADR	TOR
 2591 123c 09060000 		_ADR	CAT
 2592 1240 850A0000 		_ADR	BASE
 2593 1244 E9050000 		_ADR	AT
 2594 1248 39110000 		_ADR	DIGTQ
 2595 124c A9050000 		_QBRAN	NUMQ4
 2595      9C120000 
 2596 1254 A1060000 		_ADR	SWAP
 2597 1258 850A0000 		_ADR	BASE
 2598 125c E9050000 		_ADR	AT
 2599 1260 75070000 		_ADR	STAR
 2600 1264 55070000 		_ADR	PLUS
 2601 1268 15060000 		_ADR	RFROM
 2602 126c B1070000 		_ADR	ONEP
 2603 1270 91050000 		_DONXT	NUMQ2
 2603      34120000 
 2604 1278 29060000 		_ADR	RAT
 2605 127c A1060000 		_ADR	SWAP
 2606 1280 81060000 		_ADR	DROP
 2607 1284 A9050000 		_QBRAN	NUMQ3
 2607      90120000 
 2608 128c E5080000 		_ADR	NEGAT
 2609              	NUMQ3:
 2610 1290 A1060000 		_ADR	SWAP
ARM GAS  stm32eforth-fl.s 			page 51


 2611 1294 BB050000 		_BRAN	NUMQ5
 2611      B4120000 
 2612              	NUMQ4:
 2613 129c 15060000 		_ADR	RFROM
 2614 12a0 15060000 		_ADR	RFROM
 2615 12a4 8D080000 		_ADR	DDROP
 2616 12a8 8D080000 		_ADR	DDROP
 2617 12ac 6D050000 		_DOLIT	0
 2617      00000000 
 2618              	NUMQ5:
 2619 12b4 91060000 		_ADR	DUPP
 2620              	NUMQ6:
 2621 12b8 15060000 		_ADR	RFROM
 2622 12bc 8D080000 		_ADR	DDROP
 2623 12c0 15060000 		_ADR	RFROM
 2624 12c4 850A0000 		_ADR	BASE
 2625 12c8 D5050000 		_ADR	STORE
 2626 12cc 1B040000 		_UNNEST
 2627              	
 2628              	// **************************************************************************
 2629              	//  Basic I/O
 2630              	
 2631              	//    KEY	 ( -- c )
 2632              	// 	Wait for and return an input character.
 2633              	
 2634 12d0 98110000 		.word	_NUMBQ
 2635 12d4 03       	_KEY:	.byte  3
 2636 12d5 4B4559   		.ascii "KEY"
 2637              		.p2align 2 	
 2638              	KEY:
 2639 12d8 404700BF 		_NEST
 2640              	KEY1:
 2641 12dc 19050000 		_ADR	QRX
 2642 12e0 A9050000 		_QBRAN	KEY1
 2642      DC120000 
 2643 12e8 1B040000 		_UNNEST
 2644              	
 2645              	//    SPACE	( -- )
 2646              	// 	Send the blank character to the output device.
 2647              	
 2648 12ec D4120000 		.word	_KEY
 2649 12f0 05       	_SPACE:	.byte  5
 2650 12f1 53504143 		.ascii "SPACE"
 2650      45
 2651 12f6 00BF     		.p2align 2 	
 2652              	SPACE:
 2653 12f8 404700BF 		_NEST
 2654 12fc 11080000 		_ADR	BLANK
 2655 1300 4D050000 		_ADR	EMIT
 2656 1304 1B040000 		_UNNEST
 2657              	
 2658              	//    SPACES	( +n -- )
 2659              	// 	Send n spaces to the output device.
 2660              	
 2661 1308 F0120000 		.word	_SPACE
 2662 130c 06       	_SPACS:	.byte  6
 2663 130d 53504143 		.ascii "SPACES"
ARM GAS  stm32eforth-fl.s 			page 52


 2663      4553
 2664 1313 00       		.p2align 2 	
 2665              	SPACS:
 2666 1314 404700BF 		_NEST
 2667 1318 6D050000 		_DOLIT	0
 2667      00000000 
 2668 1320 7D090000 		_ADR	MAX
 2669 1324 39060000 		_ADR	TOR
 2670 1328 BB050000 		_BRAN	CHAR2
 2670      34130000 
 2671              	CHAR1:
 2672 1330 F9120000 		_ADR	SPACE
 2673              	CHAR2:
 2674 1334 91050000 		_DONXT	CHAR1
 2674      30130000 
 2675 133c 1B040000 		_UNNEST
 2676              	
 2677              	//    TYPE	( b u -- )
 2678              	// 	Output u characters from b.
 2679              	
 2680 1340 0C130000 		.word	_SPACS
 2681 1344 04       	_TYPEE:	.byte	4
 2682 1345 54595045 		.ascii "TYPE"
 2683 1349 0000BF   		.p2align 2 	
 2684              	TYPEE:
 2685 134c 404700BF 		_NEST
 2686 1350 39060000 		_ADR  TOR   // ( a+1 -- R: u )
 2687 1354 BB050000 		_BRAN	TYPE2
 2687      68130000 
 2688              	TYPE1:  
 2689 135c ED090000 		_ADR  COUNT
 2690 1360 790D0000 		_ADR TCHAR
 2691 1364 4D050000 		_ADR EMIT
 2692              	TYPE2:  
 2693 1368 91050000 		_DONXT	TYPE1
 2693      5C130000 
 2694 1370 81060000 		_ADR	DROP
 2695 1374 1B040000 		_UNNEST
 2696              	
 2697              	//    CR	  ( -- )
 2698              	// 	Output a carriage return and a line feed.
 2699              	
 2700 1378 44130000 		.word	_TYPEE
 2701 137c 02       	_CR:	.byte  2
 2702 137d 4352     		.ascii "CR"
 2703 137f 00       		.p2align 2 	
 2704              	CR:
 2705 1380 404700BF 		_NEST
 2706 1384 6D050000 		_DOLIT	CRR
 2706      0D000000 
 2707 138c 4D050000 		_ADR	EMIT
 2708 1390 6D050000 		_DOLIT	LF
 2708      0A000000 
 2709 1398 4D050000 		_ADR	EMIT
 2710 139c 1B040000 		_UNNEST
 2711              	
 2712              	//    do_$	( -- a )
ARM GAS  stm32eforth-fl.s 			page 53


 2713              	// 	Return the address of a compiled string.
 2714              	//  adjust return address to skip over it.
 2715              	
 2716              	// 	.word	_CR
 2717              	// _DOSTR	.byte  COMPO+3
 2718              	// 	.ascii "do$$"
 2719              	// 	.p2align 2 	
 2720              	DOSTR:
 2721 13a0 404700BF 		_NEST     
 2722              	/* compiled string address is 2 levels deep */
 2723 13a4 15060000 		_ADR	RFROM	// { -- a1 }
 2724 13a8 15060000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2725 13ac 91060000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2726 13b0 ED090000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2727 13b4 55070000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2728 13b8 5D0D0000 		_ADR	ALGND	//  end of string
 2729              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2730 13bc 39060000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2731 13c0 A1060000 		_ADR	SWAP	//  count tugged
 2732 13c4 39060000 		_ADR	TOR     //  ( -- a2) is string address
 2733 13c8 1B040000 		_UNNEST
 2734              	
 2735              	//    $"|	( -- a )
 2736              	// 	Run time routine compiled by _". Return address of a compiled string.
 2737              	
 2738              	// 	.word	_DOSTR
 2739              	// _STRQP	.byte  COMPO+3
 2740              	// 	.ascii "$\"|"
 2741              	// 	.p2align 2 	
 2742              	STRQP:
 2743 13cc 404700BF 		_NEST
 2744 13d0 A1130000 		_ADR	DOSTR
 2745 13d4 1B040000 		_UNNEST			// force a call to dostr
 2746              	
 2747              	//    .$	( a -- )
 2748              	// 	Run time routine of ." . Output a compiled string.
 2749              	
 2750              	// 	.word	_STRQP
 2751              	// _DOTST	.byte  COMPO+2
 2752              	// 	.ascii ".$$"
 2753              	// 	.p2align 2 	
 2754              	DOTST:
 2755 13d8 404700BF 		_NEST
 2756 13dc ED090000 		_ADR	COUNT // ( -- a+1 c )
 2757 13e0 4D130000 		_ADR	TYPEE
 2758 13e4 1B040000 		_UNNEST
 2759              	
 2760              	//    ."|	( -- )
 2761              	// 	Run time routine of ." . Output a compiled string.
 2762              	
 2763              	// 	.word	_DOTST
 2764              	// _DOTQP	.byte  COMPO+3
 2765              	// 	.ascii ".""|"
 2766              	// 	.p2align 2 	
 2767              	DOTQP:
 2768 13e8 404700BF 		_NEST
 2769 13ec A1130000 		_ADR	DOSTR
ARM GAS  stm32eforth-fl.s 			page 54


 2770 13f0 D9130000 		_ADR	DOTST
 2771 13f4 1B040000 		_UNNEST
 2772              	
 2773              	//    .R	  ( n +n -- )
 2774              	// 	Display an integer in a field of n columns, right justified.
 2775              	
 2776 13f8 7C130000 		.word	_CR
 2777 13fc 02       	_DOTR:	.byte  2
 2778 13fd 2E52     		.ascii ".R"
 2779 13ff 00       		.p2align 2 	
 2780              	DOTR:
 2781 1400 404700BF 		_NEST
 2782 1404 39060000 		_ADR	TOR
 2783 1408 C1100000 		_ADR	STRR
 2784 140c 15060000 		_ADR	RFROM
 2785 1410 B5060000 		_ADR	OVER
 2786 1414 65070000 		_ADR	SUBB
 2787 1418 15130000 		_ADR	SPACS
 2788 141c 4D130000 		_ADR	TYPEE
 2789 1420 1B040000 		_UNNEST
 2790              	
 2791              	//    U.R	 ( u +n -- )
 2792              	// 	Display an unsigned integer in n column, right justified.
 2793              	
 2794 1424 FC130000 		.word	_DOTR
 2795 1428 03       	_UDOTR:	.byte  3
 2796 1429 552E52   		.ascii "U.R"
 2797              		.p2align 2 	
 2798              	UDOTR:
 2799 142c 404700BF 		_NEST
 2800 1430 39060000 		_ADR	TOR
 2801 1434 E10F0000 		_ADR	BDIGS
 2802 1438 4D100000 		_ADR	DIGS
 2803 143c A1100000 		_ADR	EDIGS
 2804 1440 15060000 		_ADR	RFROM
 2805 1444 B5060000 		_ADR	OVER
 2806 1448 65070000 		_ADR	SUBB
 2807 144c 15130000 		_ADR	SPACS
 2808 1450 4D130000 		_ADR	TYPEE
 2809 1454 1B040000 		_UNNEST
 2810              	
 2811              	//    U.	  ( u -- )
 2812              	// 	Display an unsigned integer in free format.
 2813              	
 2814 1458 28140000 		.word	_UDOTR
 2815 145c 02       	_UDOT:	.byte  2
 2816 145d 552E     		.ascii "U."
 2817 145f 00       		.p2align 2 	
 2818              	UDOT:
 2819 1460 404700BF 		_NEST
 2820 1464 E10F0000 		_ADR	BDIGS
 2821 1468 4D100000 		_ADR	DIGS
 2822 146c A1100000 		_ADR	EDIGS
 2823 1470 F9120000 		_ADR	SPACE
 2824 1474 4D130000 		_ADR	TYPEE
 2825 1478 1B040000 		_UNNEST
 2826              	
ARM GAS  stm32eforth-fl.s 			page 55


 2827              	//    .	   ( w -- )
 2828              	// 	Display an integer in free format, preceeded by a space.
 2829              	
 2830 147c 5C140000 		.word	_UDOT
 2831 1480 01       	_DOT:	.byte  1
 2832 1481 2E       		.ascii "."
 2833 1482 00BF     		.p2align 2 	
 2834              	DOT:
 2835 1484 404700BF 		_NEST
 2836 1488 850A0000 		_ADR	BASE
 2837 148c E9050000 		_ADR	AT
 2838 1490 6D050000 		_DOLIT 10
 2838      0A000000 
 2839 1498 FD060000 		_ADR	XORR			// ?decimal
 2840 149c A9050000 		_QBRAN	DOT1
 2840      AC140000 
 2841 14a4 61140000 		_ADR	UDOT
 2842 14a8 1B040000 		_UNNEST			// no,display unsigned
 2843              	DOT1:
 2844 14ac C1100000 	    _ADR	STRR
 2845 14b0 F9120000 		_ADR	SPACE
 2846 14b4 4D130000 		_ADR	TYPEE
 2847 14b8 1B040000 		_UNNEST			// yes, display signed
 2848              	
 2849              	//    ?	   ( a -- )
 2850              	// 	Display the contents in a memory cell.
 2851              	
 2852 14bc 80140000 		.word	_DOT
 2853 14c0 01       	_QUEST:	.byte  1
 2854 14c1 3F       		.ascii "?"
 2855 14c2 00BF     		.p2align 2 	
 2856              	QUEST:
 2857 14c4 404700BF 		_NEST
 2858 14c8 E9050000 		_ADR	AT
 2859 14cc 85140000 		_ADR	DOT
 2860 14d0 1B040000 		_UNNEST
 2861              	
 2862              	// **************************************************************************
 2863              	//  Parsing
 2864              	
 2865              	//    parse	( b u c -- b u delta //  string> )
 2866              	// 	Scan word delimited by c. Return found string and its offset.
 2867              	
 2868              	// 	.word	_QUEST
 2869              	// _PARS	.byte  5
 2870              	// 	.ascii "parse"
 2871              	// 	.p2align 2 	
 2872              	PARS:
 2873 14d4 404700BF 		_NEST
 2874 14d8 8F0A0000 		_ADR	TEMP
 2875 14dc D5050000 		_ADR	STORE
 2876 14e0 B5060000 		_ADR	OVER
 2877 14e4 39060000 		_ADR	TOR
 2878 14e8 91060000 		_ADR	DUPP
 2879 14ec A9050000 		_QBRAN	PARS8
 2879      E8150000 
 2880 14f4 C1070000 		_ADR	ONEM
ARM GAS  stm32eforth-fl.s 			page 56


 2881 14f8 8F0A0000 		_ADR	TEMP
 2882 14fc E9050000 		_ADR	AT
 2883 1500 11080000 		_ADR	BLANK
 2884 1504 1D090000 		_ADR	EQUAL
 2885 1508 A9050000 		_QBRAN	PARS3
 2885      5C150000 
 2886 1510 39060000 		_ADR	TOR
 2887              	PARS1:
 2888 1514 11080000 		_ADR	BLANK
 2889 1518 B5060000 		_ADR	OVER
 2890 151c 09060000 		_ADR	CAT			// skip leading blanks 
 2891 1520 65070000 		_ADR	SUBB
 2892 1524 C5060000 		_ADR	ZLESS
 2893 1528 D1080000 		_ADR	INVER
 2894 152c A9050000 		_QBRAN	PARS2
 2894      58150000 
 2895 1534 B1070000 		_ADR	ONEP
 2896 1538 91050000 		_DONXT	PARS1
 2896      14150000 
 2897 1540 15060000 		_ADR	RFROM
 2898 1544 81060000 		_ADR	DROP
 2899 1548 6D050000 		_DOLIT	0
 2899      00000000 
 2900 1550 91060000 		_ADR	DUPP
 2901 1554 1B040000 		_UNNEST
 2902              	PARS2:
 2903 1558 15060000 		_ADR	RFROM
 2904              	PARS3:
 2905 155c B5060000 		_ADR	OVER
 2906 1560 A1060000 		_ADR	SWAP
 2907 1564 39060000 		_ADR	TOR
 2908              	PARS4:
 2909 1568 8F0A0000 		_ADR	TEMP
 2910 156c E9050000 		_ADR	AT
 2911 1570 B5060000 		_ADR	OVER
 2912 1574 09060000 		_ADR	CAT
 2913 1578 65070000 		_ADR	SUBB			// scan for delimiter
 2914 157c 8F0A0000 		_ADR	TEMP
 2915 1580 E9050000 		_ADR	AT
 2916 1584 11080000 		_ADR	BLANK
 2917 1588 1D090000 		_ADR	EQUAL
 2918 158c A9050000 		_QBRAN	PARS5
 2918      98150000 
 2919 1594 C5060000 		_ADR	ZLESS
 2920              	PARS5:
 2921 1598 A9050000 		_QBRAN	PARS6
 2921      BC150000 
 2922 15a0 B1070000 		_ADR	ONEP
 2923 15a4 91050000 		_DONXT	PARS4
 2923      68150000 
 2924 15ac 91060000 		_ADR	DUPP
 2925 15b0 39060000 		_ADR	TOR
 2926 15b4 BB050000 		_BRAN	PARS7
 2926      D0150000 
 2927              	PARS6:
 2928 15bc 15060000 		_ADR	RFROM
 2929 15c0 81060000 		_ADR	DROP
ARM GAS  stm32eforth-fl.s 			page 57


 2930 15c4 91060000 		_ADR	DUPP
 2931 15c8 B1070000 		_ADR	ONEP
 2932 15cc 39060000 		_ADR	TOR
 2933              	PARS7:
 2934 15d0 B5060000 		_ADR	OVER
 2935 15d4 65070000 		_ADR	SUBB
 2936 15d8 15060000 		_ADR	RFROM
 2937 15dc 15060000 		_ADR	RFROM
 2938 15e0 65070000 		_ADR	SUBB
 2939 15e4 1B040000 		_UNNEST
 2940              	PARS8:
 2941 15e8 B5060000 		_ADR	OVER
 2942 15ec 15060000 		_ADR	RFROM
 2943 15f0 65070000 		_ADR	SUBB
 2944 15f4 1B040000 		_UNNEST
 2945              	
 2946              	//    PARSE	( c -- b u //  string> )
 2947              	// 	Scan input stream and return counted string delimited by c.
 2948              	
 2949 15f8 C0140000 		.word	_QUEST
 2950 15fc 05       	_PARSE:	.byte  5
 2951 15fd 50415253 		.ascii "PARSE"
 2951      45
 2952 1602 00BF     		.p2align 2 	
 2953              	PARSE:
 2954 1604 404700BF 		_NEST
 2955 1608 39060000 		_ADR	TOR
 2956 160c 490E0000 		_ADR	TIB
 2957 1610 B90A0000 		_ADR	INN
 2958 1614 E9050000 		_ADR	AT
 2959 1618 55070000 		_ADR	PLUS			// current input buffer pointer
 2960 161c CD0A0000 		_ADR	NTIB
 2961 1620 E9050000 		_ADR	AT
 2962 1624 B90A0000 		_ADR	INN
 2963 1628 E9050000 		_ADR	AT
 2964 162c 65070000 		_ADR	SUBB			// remaining count
 2965 1630 15060000 		_ADR	RFROM
 2966 1634 D5140000 		_ADR	PARS
 2967 1638 B90A0000 		_ADR	INN
 2968 163c A5090000 		_ADR	PSTOR
 2969 1640 1B040000 		_UNNEST
 2970              	
 2971              	//    .(	  ( -- )
 2972              	// 	Output following string up to next ) .
 2973              	
 2974 1644 FC150000 		.word	_PARSE
 2975 1648 82       	_DOTPR:	.byte  IMEDD+2
 2976 1649 2E28     		.ascii ".("
 2977 164b 00       		.p2align 2 	
 2978              	DOTPR:
 2979 164c 404700BF 		_NEST
 2980 1650 6D050000 		_DOLIT	')'
 2980      29000000 
 2981 1658 05160000 		_ADR	PARSE
 2982 165c 4D130000 		_ADR	TYPEE
 2983 1660 1B040000 		_UNNEST
 2984              	
ARM GAS  stm32eforth-fl.s 			page 58


 2985              	//    (	   ( -- )
 2986              	// 	Ignore following string up to next ) . A comment.
 2987              	
 2988 1664 48160000 		.word	_DOTPR
 2989 1668 81       	_PAREN:	.byte  IMEDD+1
 2990 1669 28       		.ascii "("
 2991 166a 00BF     		.p2align 2 	
 2992              	PAREN:
 2993 166c 404700BF 		_NEST
 2994 1670 6D050000 		_DOLIT	')'
 2994      29000000 
 2995 1678 05160000 		_ADR	PARSE
 2996 167c 8D080000 		_ADR	DDROP
 2997 1680 1B040000 		_UNNEST
 2998              	
 2999              	//    \	   ( -- )
 3000              	// 	Ignore following text till the end of line.
 3001              	
 3002 1684 68160000 		.word	_PAREN
 3003 1688 81       	_BKSLA:	.byte  IMEDD+1
 3004 1689 5C       		.byte	'\\'
 3005 168a 00BF     		.p2align 2 	
 3006              	BKSLA:
 3007 168c 404700BF 		_NEST
 3008 1690 CD0A0000 		_ADR	NTIB
 3009 1694 E9050000 		_ADR	AT
 3010 1698 B90A0000 		_ADR	INN
 3011 169c D5050000 		_ADR	STORE
 3012 16a0 1B040000 		_UNNEST
 3013              	
 3014              	//    CHAR	( -- c )
 3015              	// 	Parse next word and return its first character.
 3016              	
 3017 16a4 88160000 		.word	_BKSLA
 3018 16a8 04       	_CHAR:	.byte  4
 3019 16a9 43484152 		.ascii "CHAR"
 3020 16ad 0000BF   		.p2align 2 	
 3021              	CHAR:
 3022 16b0 404700BF 		_NEST
 3023 16b4 11080000 		_ADR	BLANK
 3024 16b8 05160000 		_ADR	PARSE
 3025 16bc 81060000 		_ADR	DROP
 3026 16c0 09060000 		_ADR	CAT
 3027 16c4 1B040000 		_UNNEST
 3028              	
 3029              	//    WORD	( c -- a //  string> )
 3030              	// 	Parse a word from input stream and copy it to code dictionary.
 3031              	
 3032 16c8 A8160000 		.word	_CHAR
 3033 16cc 04       	_WORDD:	.byte  4
 3034 16cd 574F5244 		.ascii "WORD"
 3035 16d1 0000BF   		.p2align 2 	
 3036              	WORDD:
 3037 16d4 404700BF 		_NEST
 3038 16d8 05160000 		_ADR	PARSE
 3039 16dc 110E0000 		_ADR	HERE
 3040 16e0 F1070000 		_ADR	CELLP
ARM GAS  stm32eforth-fl.s 			page 59


 3041 16e4 150F0000 		_ADR	PACKS
 3042 16e8 1B040000 		_UNNEST
 3043              	
 3044              	//    TOKEN	( -- a //  string> )
 3045              	// 	Parse a word from input stream and copy it to name dictionary.
 3046              	
 3047 16ec CC160000 		.word	_WORDD
 3048 16f0 05       	_TOKEN:	.byte  5
 3049 16f1 544F4B45 		.ascii "TOKEN"
 3049      4E
 3050 16f6 00BF     		.p2align 2 	
 3051              	TOKEN:
 3052 16f8 404700BF 		_NEST
 3053 16fc 11080000 		_ADR	BLANK
 3054 1700 D5160000 		_ADR	WORDD
 3055 1704 1B040000 		_UNNEST
 3056              	
 3057              	// **************************************************************************
 3058              	//  Dictionary search
 3059              	
 3060              	//    NAME>	( na -- ca )
 3061              	// 	Return a code address given a name address.
 3062              	
 3063 1708 F0160000 		.word	_TOKEN
 3064 170c 05       	_NAMET:	.byte  5
 3065 170d 4E414D45 		.ascii "NAME>"
 3065      3E
 3066 1712 00BF     		.p2align 2 	
 3067              	NAMET:
 3068 1714 404700BF 		_NEST
 3069 1718 ED090000 		_ADR	COUNT
 3070 171c 6D050000 		_DOLIT	0x1F
 3070      1F000000 
 3071 1724 D5060000 		_ADR	ANDD
 3072 1728 55070000 		_ADR	PLUS
 3073 172c 5D0D0000 		_ADR	ALGND
 3074 1730 1B040000 		_UNNEST
 3075              	
 3076              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 3077              	// 	Compare u bytes in two strings. Return 0 if identical.
 3078              	//
 3079              	//  Picatout 2020-12-01, 
 3080              	//      Because of problem with .align directive that
 3081              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 3082              	// 		words  to do a byte by byte comparison. 
 3083              	//
 3084 1734 0C170000 		.word	_NAMET
 3085 1738 05       	_SAMEQ:	.byte  5
 3086 1739 53414D45 		.ascii "SAME?"
 3086      3F
 3087 173e 00BF     		.p2align 2	
 3088              	SAMEQ:
 3089 1740 404700BF 		_NEST
 3090 1744 39060000 		_ADR	TOR
 3091 1748 BB050000 		_BRAN	SAME2
 3091      8C170000 
 3092              	SAME1:
ARM GAS  stm32eforth-fl.s 			page 60


 3093 1750 B5060000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 3094 1754 29060000 		_ADR	RAT   // a1 a2 a1 u 
 3095 1758 55070000 		_ADR	PLUS  // a1 a2 a1+u 
 3096 175c 09060000 		_ADR	CAT	   // a1 a2 c1    		
 3097 1760 B5060000 		_ADR	OVER  // a1 a2 c1 a2 
 3098 1764 29060000 		_ADR	RAT    
 3099 1768 55070000 		_ADR	PLUS    
 3100 176c 09060000 		_ADR	CAT	  // a1 a2 c1 c2
 3101 1770 65070000 		_ADR	SUBB  
 3102 1774 65080000 		_ADR	QDUP
 3103 1778 A9050000 		_QBRAN	SAME2
 3103      8C170000 
 3104 1780 15060000 		_ADR	RFROM
 3105 1784 81060000 		_ADR	DROP
 3106 1788 1B040000 		_UNNEST	// strings not equal
 3107              	SAME2:
 3108 178c 91050000 		_DONXT	SAME1
 3108      50170000 
 3109 1794 6D050000 		_DOLIT	0
 3109      00000000 
 3110 179c 1B040000 		_UNNEST	// strings equal
 3111              	
 3112              	//    find	( a na -- ca na | a F )
 3113              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 3114              	
 3115              	//  Picatout 2020-12-01,  
 3116              	//		Modified from original. See comment for word "SAME?" 
 3117              	
 3118              	// 	.word	_SAMEQ
 3119              	// _FIND	.byte  4
 3120              	// 	.ascii "find"
 3121              	// 	.p2align 2 	
 3122              	FIND:
 3123 17a0 404700BF 		_NEST
 3124 17a4 A1060000 		_ADR	SWAP			// na a	
 3125 17a8 ED090000 		_ADR	COUNT			// na a+1 count
 3126 17ac 91060000 		_ADR	DUPP 
 3127 17b0 8F0A0000 		_ADR	TEMP
 3128 17b4 D5050000 		_ADR	STORE			// na a+1 count 
 3129 17b8 39060000 		_ADR  TOR		// na a+1  R: count  
 3130 17bc A1060000 		_ADR	SWAP			// a+1 na
 3131              	FIND1:
 3132 17c0 91060000 		_ADR	DUPP			// a+1 na na
 3133 17c4 A9050000 		_QBRAN	FIND6	// end of vocabulary
 3133      18180000 
 3134 17cc 91060000 		_ADR	DUPP			// a+1 na na
 3135 17d0 09060000 		_ADR	CAT			// a+1 na name1
 3136 17d4 6D050000 		_DOLIT	MASKK
 3136      1FFFFFFF 
 3137 17dc D5060000 		_ADR	ANDD
 3138 17e0 29060000 		_ADR	RAT			// a+1 na name1 count 
 3139 17e4 FD060000 		_ADR	XORR			// a+1 na,  same length?
 3140 17e8 A9050000 		_QBRAN	FIND2
 3140      00180000 
 3141 17f0 01080000 		_ADR	CELLM			// a+1 la
 3142 17f4 E9050000 		_ADR	AT			// a+1 next_na
 3143 17f8 BB050000 		_BRAN	FIND1			// try next word
ARM GAS  stm32eforth-fl.s 			page 61


 3143      C0170000 
 3144              	FIND2:   
 3145 1800 B1070000 		_ADR	ONEP			// a+1 na+1
 3146 1804 8F0A0000 		_ADR	TEMP
 3147 1808 E9050000 		_ADR	AT			// a+1 na+1 count
 3148 180c 41170000 		_ADR	SAMEQ		// a+1 na+1 ? 
 3149              	FIND3:	
 3150 1810 BB050000 		_BRAN	FIND4
 3150      30180000 
 3151              	FIND6:	
 3152 1818 15060000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 3153 181c 81060000 		_ADR	DROP			// a+1 0
 3154 1820 A1060000 		_ADR	SWAP			// 0 a+1
 3155 1824 C1070000 		_ADR	ONEM			// 0 a
 3156 1828 A1060000 		_ADR	SWAP			// a 0 
 3157 182c 1B040000 		_UNNEST			// return without a match
 3158              	FIND4:	
 3159 1830 A9050000 		_QBRAN	FIND5			// a+1 na+1
 3159      4C180000 
 3160 1838 C1070000 		_ADR	ONEM			// a+1 na
 3161 183c 01080000 		_ADR	CELLM			// a+4 la
 3162 1840 E9050000 		_ADR	AT			// a+1 next_na
 3163 1844 BB050000 		_BRAN	FIND1			// compare next name
 3163      C0170000 
 3164              	FIND5:	
 3165 184c 15060000 		_ADR	RFROM			// a+1 na+1 count
 3166 1850 81060000 		_ADR	DROP			// a+1 na+1
 3167 1854 A1060000 		_ADR	SWAP			// na+1 a+1
 3168 1858 81060000 		_ADR	DROP			// na+1
 3169 185c C1070000 		_ADR	ONEM			// na
 3170 1860 91060000 		_ADR	DUPP			// na na
 3171 1864 15170000 		_ADR	NAMET			// na ca
 3172 1868 A1060000 		_ADR	SWAP			// ca na
 3173 186c 1B040000 		_UNNEST			//  return with a match
 3174              	
 3175              	//    NAME?	( a -- ca na | a F )
 3176              	// 	Search all context vocabularies for a string.
 3177              	
 3178 1870 38170000 		.word	_SAMEQ
 3179 1874 05       	_NAMEQ:	.byte  5
 3180 1875 4E414D45 		.ascii "NAME?"
 3180      3F
 3181 187a 00BF     		.p2align 2 	
 3182              	NAMEQ:
 3183 187c 404700BF 		_NEST
 3184 1880 0D0B0000 		_ADR	CNTXT
 3185 1884 E9050000 		_ADR	AT
 3186 1888 A1170000 		_ADR	FIND
 3187 188c 1B040000 		_UNNEST
 3188              	
 3189              	// **************************************************************************
 3190              	//  Terminal input
 3191              	
 3192              	//    	  ( bot eot cur -- bot eot cur )
 3193              	// 	Backup the cursor by one character.
 3194              	
 3195              	// 	.word	_NAMEQ
ARM GAS  stm32eforth-fl.s 			page 62


 3196              	// _BKSP	.byte  2
 3197              	// 	.ascii "^H"
 3198              	// 	.p2align 2 	
 3199              	BKSP:
 3200 1890 404700BF 		_NEST
 3201 1894 39060000 		_ADR	TOR
 3202 1898 B5060000 		_ADR	OVER
 3203 189c 15060000 		_ADR	RFROM
 3204 18a0 A1060000 		_ADR	SWAP
 3205 18a4 B5060000 		_ADR	OVER
 3206 18a8 FD060000 		_ADR	XORR
 3207 18ac A9050000 		_QBRAN	BACK1
 3207      D8180000 
 3208 18b4 6D050000 		_DOLIT	BKSPP
 3208      08000000 
 3209 18bc 4D050000 		_ADR	TECHO
 3210 18c0 C1070000 		_ADR	ONEM
 3211 18c4 11080000 		_ADR	BLANK
 3212 18c8 4D050000 		_ADR	TECHO
 3213 18cc 6D050000 		_DOLIT	BKSPP
 3213      08000000 
 3214 18d4 4D050000 		_ADR	TECHO
 3215              	BACK1:
 3216 18d8 1B040000 		  _UNNEST
 3217              	
 3218              	//    TAP	 ( bot eot cur c -- bot eot cur )
 3219              	// 	Accept and echo the key stroke and bump the cursor.
 3220              	
 3221              	// 	.word	_BKSP
 3222              	// _TAP	.byte  3
 3223              	// 	.ascii "TAP"
 3224              	// 	.p2align 2 	
 3225              	TAP:
 3226 18dc 404700BF 		_NEST
 3227 18e0 91060000 		_ADR	DUPP
 3228 18e4 4D050000 		_ADR	TECHO
 3229 18e8 B5060000 		_ADR	OVER
 3230 18ec F5050000 		_ADR	CSTOR
 3231 18f0 B1070000 		_ADR	ONEP
 3232 18f4 1B040000 		_UNNEST
 3233              	
 3234              	//    kTAP	( bot eot cur c -- bot eot cur )
 3235              	// 	Process a key stroke, CR or backspace.
 3236              	
 3237              	// 	.word	_TAP
 3238              	// _KTAP	.byte  4
 3239              	// 	.ascii "kTAP"
 3240              	// 	.p2align 2 	
 3241              	KTAP:
 3242              	TTAP:
 3243 18f8 404700BF 		_NEST
 3244 18fc 91060000 		_ADR	DUPP
 3245 1900 6D050000 		_DOLIT	CRR
 3245      0D000000 
 3246 1908 FD060000 		_ADR	XORR
 3247 190c A9050000 		_QBRAN  KTAP2
 3247      3C190000 
ARM GAS  stm32eforth-fl.s 			page 63


 3248 1914 6D050000 		_DOLIT	BKSPP
 3248      08000000 
 3249 191c FD060000 		_ADR	XORR
 3250 1920 A9050000 		_QBRAN	KTAP1
 3250      34190000 
 3251 1928 11080000 		_ADR	BLANK
 3252 192c DD180000 		_ADR	TAP
 3253 1930 1B040000 		_UNNEST
 3254              	//	.word	0			// patch
 3255              	KTAP1:
 3256 1934 91180000 		_ADR	BKSP
 3257 1938 1B040000 		_UNNEST
 3258              	KTAP2:
 3259 193c 81060000 		_ADR	DROP
 3260 1940 A1060000 		_ADR	SWAP
 3261 1944 81060000 		_ADR	DROP
 3262 1948 91060000 		_ADR	DUPP
 3263 194c 1B040000 		_UNNEST
 3264              	
 3265              	//    ACCEPT	( b u -- b u )
 3266              	// 	Accept characters to input buffer. Return with actual count.
 3267              	
 3268 1950 74180000 		.word	_NAMEQ
 3269 1954 06       	_ACCEP:	.byte  6
 3270 1955 41434345 		.ascii "ACCEPT"
 3270      5054
 3271 195b 00       		.p2align 2 	
 3272              	ACCEP:
 3273 195c 404700BF 		_NEST
 3274 1960 B5060000 		_ADR	OVER
 3275 1964 55070000 		_ADR	PLUS
 3276 1968 B5060000 		_ADR	OVER
 3277              	ACCP1:
 3278 196c A1080000 		_ADR	DDUP
 3279 1970 FD060000 		_ADR	XORR
 3280 1974 A9050000 		_QBRAN	ACCP4
 3280      B4190000 
 3281 197c D9120000 		_ADR	KEY
 3282 1980 91060000 		_ADR	DUPP
 3283 1984 11080000 		_ADR	BLANK
 3284 1988 6D050000 		_DOLIT 127
 3284      7F000000 
 3285 1990 E50B0000 		_ADR	WITHI
 3286 1994 A9050000 		_QBRAN	ACCP2
 3286      A8190000 
 3287 199c DD180000 		_ADR	TAP
 3288 19a0 BB050000 		_BRAN	ACCP3
 3288      AC190000 
 3289              	ACCP2:
 3290 19a8 F9180000 		_ADR	KTAP
 3291              	ACCP3:	  
 3292 19ac BB050000 		_BRAN	ACCP1
 3292      6C190000 
 3293              	ACCP4:
 3294 19b4 81060000 		_ADR	DROP
 3295 19b8 B5060000 		_ADR	OVER
 3296 19bc 65070000 		_ADR	SUBB
ARM GAS  stm32eforth-fl.s 			page 64


 3297 19c0 1B040000 		_UNNEST
 3298              	
 3299              	//    QUERY	( -- )
 3300              	// 	Accept input stream to terminal input buffer.
 3301              	
 3302 19c4 54190000 		.word	_ACCEP
 3303 19c8 05       	_QUERY:	.byte  5
 3304 19c9 51554552 		.ascii "QUERY"
 3304      59
 3305 19ce 00BF     		.p2align 2 	
 3306              	QUERY:
 3307 19d0 404700BF 		_NEST
 3308 19d4 490E0000 		_ADR	TIB
 3309 19d8 6D050000 		_DOLIT 80
 3309      50000000 
 3310 19e0 5D190000 		_ADR	ACCEP
 3311 19e4 CD0A0000 		_ADR	NTIB
 3312 19e8 D5050000 		_ADR	STORE
 3313 19ec 81060000 		_ADR	DROP
 3314 19f0 6D050000 		_DOLIT	0
 3314      00000000 
 3315 19f8 B90A0000 		_ADR	INN
 3316 19fc D5050000 		_ADR	STORE
 3317 1a00 1B040000 		_UNNEST
 3318              	
 3319              	// **************************************************************************
 3320              	//  Error handling
 3321              	
 3322              	//    ABORT	( a -- )
 3323              	// 	Reset data stack and jump to QUIT.
 3324              	
 3325 1a04 C8190000 		.word	_QUERY
 3326 1a08 05       	_ABORT:	.byte  5
 3327 1a09 41424F52 		.ascii "ABORT"
 3327      54
 3328 1a0e 00BF     		.p2align 2 	
 3329              	ABORT:
 3330 1a10 404700BF 		_NEST
 3331              	ABORT1:
 3332 1a14 F9120000 		_ADR	SPACE
 3333 1a18 ED090000 		_ADR	COUNT
 3334 1a1c 4D130000 		_ADR	TYPEE
 3335 1a20 6D050000 		_DOLIT	0X3F
 3335      3F000000 
 3336 1a28 4D050000 		_ADR	EMIT
 3337 1a2c 81130000 		_ADR	CR
 3338 1a30 991B0000 		_ADR	PRESE
 3339 1a34 BB050000 		_BRAN	QUIT
 3339      B81B0000 
 3340              	
 3341              	//    _abort"	( f -- )
 3342              	// 	Run time routine of ABORT" . Abort with a message.
 3343              	
 3344              	// 	.word	_ABORT
 3345              	// _ABORQ	.byte  COMPO+6
 3346              	// 	.ascii "abort\""
 3347              	// 	.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 65


 3348              	ABORQ:
 3349 1a3c 404700BF 		_NEST
 3350 1a40 A1130000 		_ADR	DOSTR
 3351 1a44 A1060000 		_ADR	SWAP 
 3352 1a48 A9050000 		_QBRAN	1f	// text flag
 3352      581A0000 
 3353 1a50 BB050000 		_BRAN	ABORT1
 3353      141A0000 
 3354              	1:
 3355 1a58 81060000 		_ADR	DROP
 3356 1a5c 1B040000 		_UNNEST			// drop error
 3357              	
 3358              	// **************************************************************************
 3359              	//  The text interpreter
 3360              	
 3361              	//    $INTERPRET  ( a -- )
 3362              	// 	Interpret a word. If failed, try to convert it to an integer.
 3363              	
 3364 1a60 081A0000 		.word	_ABORT
 3365 1a64 0A       	_INTER:	.byte  10
 3366 1a65 2424494E 		.ascii "$$INTERPRET"
 3366      54455250 
 3366      524554
 3367              		.p2align 2 	
 3368              	INTER:
 3369 1a70 404700BF 		_NEST
 3370 1a74 7D180000 		_ADR	NAMEQ
 3371 1a78 65080000 		_ADR	QDUP	// ?defined
 3372 1a7c A9050000 		_QBRAN	INTE1
 3372      B01A0000 
 3373 1a84 E9050000 		_ADR	AT
 3374 1a88 6D050000 		_DOLIT	COMPO
 3374      40000000 
 3375 1a90 D5060000 		_ADR	ANDD	// ?compile only lexicon bits
 3376 1a94 3D1A0000 		_ABORQ	13," compile only"
 3376      0D20636F 
 3376      6D70696C 
 3376      65206F6E 
 3376      6C7900BF 
 3377 1aa8 85050000 		_ADR	EXECU
 3378 1aac 1B040000 		_UNNEST			// execute defined word
 3379              	INTE1:
 3380 1ab0 A1110000 		_ADR	NUMBQ
 3381 1ab4 A9050000 		_QBRAN	INTE2
 3381      C01A0000 
 3382 1abc 1B040000 		_UNNEST
 3383              	INTE2:
 3384 1ac0 111A0000 		_ADR	ABORT	// error
 3385              	
 3386              	//    [	   ( -- )
 3387              	// 	Start the text interpreter.
 3388              	
 3389 1ac4 641A0000 		.word	_INTER
 3390 1ac8 81       	_LBRAC:	.byte  IMEDD+1
 3391 1ac9 5B       		.ascii "["
 3392 1aca 00BF     		.p2align 2 	
 3393              	LBRAC:
ARM GAS  stm32eforth-fl.s 			page 66


 3394 1acc 404700BF 		_NEST
 3395 1ad0 6D050000 		_DOLIT	INTER
 3395      701A0000 
 3396 1ad8 E10A0000 		_ADR	TEVAL
 3397 1adc D5050000 		_ADR	STORE
 3398 1ae0 1B040000 		_UNNEST
 3399              	
 3400              	//    .OK	 ( -- )
 3401              	// 	Display "ok" only while interpreting.
 3402              	
 3403 1ae4 C81A0000 		.word	_LBRAC
 3404 1ae8 03       	_DOTOK:	.byte  3
 3405 1ae9 2E4F4B   		.ascii ".OK"
 3406              		.p2align 2 	
 3407              	DOTOK:
 3408 1aec 404700BF 		_NEST
 3409 1af0 6D050000 		_DOLIT	INTER
 3409      701A0000 
 3410 1af8 E10A0000 		_ADR	TEVAL
 3411 1afc E9050000 		_ADR	AT
 3412 1b00 1D090000 		_ADR	EQUAL
 3413 1b04 A9050000 		_QBRAN	DOTO1
 3413      141B0000 
 3414 1b0c E9130000 		_DOTQP	3," ok"
 3414      03206F6B 
 3415              	DOTO1:
 3416 1b14 81130000 		_ADR	CR
 3417 1b18 1B040000 		_UNNEST
 3418              	
 3419              	//    ?STACK	( -- )
 3420              	// 	Abort if the data stack underflows.
 3421              	
 3422 1b1c E81A0000 		.word	_DOTOK
 3423 1b20 06       	_QSTAC:	.byte  6
 3424 1b21 3F535441 		.ascii "?STACK"
 3424      434B
 3425 1b27 00       		.p2align 2 	
 3426              	QSTAC:
 3427 1b28 404700BF 		_NEST
 3428 1b2c C50D0000 		_ADR	DEPTH
 3429 1b30 C5060000 		_ADR	ZLESS	// check only for underflow
 3430 1b34 3D1A0000 		_ABORQ	9,"underflow"
 3430      09756E64 
 3430      6572666C 
 3430      6F7700BF 
 3431 1b44 1B040000 		_UNNEST
 3432              	
 3433              	//    EVAL	( -- )
 3434              	// 	Interpret the input stream.
 3435              	
 3436 1b48 201B0000 		.word	_QSTAC
 3437 1b4c 04       	_EVAL:	.byte  4
 3438 1b4d 4556414C 		.ascii "EVAL"
 3439 1b51 0000BF   		.p2align 2 	
 3440              	EVAL:
 3441 1b54 404700BF 		_NEST
 3442              	EVAL1:
ARM GAS  stm32eforth-fl.s 			page 67


 3443 1b58 F9160000 	    _ADR	TOKEN
 3444 1b5c 91060000 		_ADR	DUPP
 3445 1b60 09060000 		_ADR	CAT	// ?input stream empty
 3446 1b64 A9050000 		_QBRAN	EVAL2
 3446      801B0000 
 3447 1b6c E10A0000 		_ADR	TEVAL
 3448 1b70 610E0000 		_ADR	ATEXE
 3449 1b74 291B0000 		_ADR	QSTAC	// evaluate input, check stack
 3450 1b78 BB050000 		_BRAN	EVAL1
 3450      581B0000 
 3451              	EVAL2:
 3452 1b80 81060000 		_ADR	DROP
 3453 1b84 ED1A0000 		_ADR	DOTOK
 3454 1b88 1B040000 		_UNNEST	// prompt
 3455              	
 3456              	//    PRESET	( -- )
 3457              	// 	Reset data stack pointer and the terminal input buffer.
 3458              	
 3459 1b8c 4C1B0000 		.word	_EVAL
 3460 1b90 06       	_PRESE:	.byte  6
 3461 1b91 50524553 		.ascii "PRESET"
 3461      4554
 3462 1b97 00       		.p2align 2 	
 3463              	PRESE:
 3464 1b98 404700BF 		_NEST 
 3465 1b9c 6D050000 		_DOLIT SPP 
 3465      804E0020 
 3466 1ba4 5D060000 		_ADR SPSTOR 
 3467 1ba8 1B040000 		_UNNEST 
 3468              	
 3469              	//    QUIT	( -- )
 3470              	// 	Reset return stack pointer and start text interpreter.
 3471              	
 3472 1bac 901B0000 		.word	_PRESE
 3473 1bb0 04       	_QUIT:	.byte  4
 3474 1bb1 51554954 		.ascii "QUIT"
 3475 1bb5 0000BF   		.p2align 2 	
 3476              	QUIT:
 3477 1bb8 6D050000 		_DOLIT RPP 
 3477      804F0020 
 3478 1bc0 4D060000 		_ADR RPSTOR 
 3479              	QUIT1:
 3480 1bc4 CD1A0000 		_ADR	LBRAC			// start interpretation
 3481              	QUIT2:
 3482 1bc8 D1190000 		_ADR	QUERY			// get input
 3483 1bcc 551B0000 		_ADR	EVAL
 3484 1bd0 BB050000 		_BRAN	QUIT2	// continue till error
 3484      C81B0000 
 3485              	
 3486              	/***************************
 3487              	//  Flash memory interface
 3488              	***************************/
 3489              		.p2align 2 
 3490              	unlock:	//  unlock flash memory	
 3491 1bd8 DFF81474 		ldr	r7, flash_regs 
 3492 1bdc 4FF03406 		mov r6,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 3493 1be0 FE60     		str r6,[r7,#FLASH_SR]
ARM GAS  stm32eforth-fl.s 			page 68


 3494 1be2 3E69     		ldr r6,[r7,#FLASH_CR]
 3495 1be4 16F0800F 		tst r6,#(1<<7)
 3496 1be8 06D0     		beq 1f 
 3497 1bea DFF80864 		ldr	r6, flash_regs+4 // key1
 3498 1bee 7E60     		str	r6, [r7, #FLASH_KEYR]
 3499 1bf0 DFF80464 		ldr	r6, flash_regs+8 // key2 
 3500 1bf4 7E60     		str	r6, [r7, #FLASH_KEYR]
 3501 1bf6 EFE7     		b unlock 
 3502              		/* unlock option registers */
 3503              	/*	
 3504              		ldr	r6, flash_regs+4 
 3505              		str	r6, [r7, #FLASH_OPTKEYR]
 3506              		ldr	r6, flash_regs+8
 3507              		str	r6, [r7, #FLASH_OPTKEYR]
 3508              	*/
 3509 1bf8 7047     	1:	bx lr 
 3510              	
 3511 1bfa 00BF     		.p2align 2 
 3512              	WAIT_BSY:
 3513 1bfc FC4F     		ldr	r7,flash_regs
 3514              	WAIT1:
 3515 1bfe FE68     		ldr	r6, [r7, #FLASH_SR]	//  FLASH_SR
 3516 1c00 16F00106 		ands	r6, #0x1	//  BSY
 3517 1c04 FBD1     		bne	WAIT1
 3518 1c06 7047     		_RET 
 3519              		
 3520              		.p2align 2
 3521              	
 3522              	//    ERASE_PAGE	   ( adr -- F )
 3523              	// 	  Erase one page of flash memory.
 3524              	//    stm32f103 page size is 1024 bytes 
 3525              	//    adr is any address inside page to erase 
 3526              	//	  return success|fail flag 
 3527              	
 3528 1c08 B01B0000 		.word _QUIT  
 3529 1c0c 0A       	_EPAGE:	.byte  10
 3530 1c0d 45524153 		.ascii "ERASE_PAGE"
 3530      455F5041 
 3530      4745
 3531 1c17 00       		.p2align 2 	
 3532              	
 3533              	EPAGE: 	//  page --
 3534 1c18 F54F     		ldr r7,flash_regs 	 
 3535 1c1a 4FF00206 		mov r6,#2 // set PER bit 
 3536 1c1e 3E61     		str r6,[r7,#FLASH_CR]
 3537 1c20 7D61     		str r5,[r7,#FLASH_AR] // page to erase address 
 3538 1c22 3E69     		ldr	r6,[r7, #FLASH_CR]	
 3539 1c24 46F04006 		orr	R6,#0x40	//  set STRT bit   
 3540 1c28 3E61     		str	r6,[r7, #FLASH_CR]	//  start erasing
 3541 1c2a 00B5FFF7 	 	_CALL	WAIT_BSY // wait until done
 3541      E6FF5DF8 
 3541      04EB
 3542 1c34 FD68     		ldr r5,[r7,#FLASH_SR] // check for errors 
 3543 1c36 05F01405 		and r5,r5,#(5<<2)
 3544 1c3a FEF7EBBB 		_NEXT 
 3545              	
 3546 1c3e 00BF     		.p2align 2 
ARM GAS  stm32eforth-fl.s 			page 69


 3547              	// store 16 bit word
 3548              	// expect flash unlocked
 3549              	// return success|fail flag   
 3550              	HWORD_WRITE: // ( hword address -- f  )
 3551 1c40 EB4F     		ldr r7,flash_regs 
 3552 1c42 3C69     		ldr	r4, [r7, #FLASH_CR]	//  FLASH_CR
 3553 1c44 4FF00104 		mov r4,#1 // set PG 
 3554 1c48 3C61     		str r4,[r7,#FLASH_CR]
 3555 1c4a 2E46     		mov r6,r5 
 3556 1c4c 51F8045B 		_POP 
 3557 1c50 3580     		strh r5,[r6] 
 3558 1c52 00B5FFF7 		_CALL WAIT_BSY 
 3558      D2FF5DF8 
 3558      04EB
 3559 1c5c FD68     		ldr r5,[r7,#FLASH_SR]
 3560 1c5e 05F01405 		and r5,r5,#(5<<2) 
 3561 1c62 FEF7D7BB 		_NEXT 
 3562              	
 3563 1c66 00BF     		.p2align 2 
 3564              	//    I!	   ( data address -- )
 3565              	// 	   Write one word into flash memory
 3566              	//	   address must even 
 3567              	
 3568 1c68 0C1C0000 		.word	_EPAGE
 3569 1c6c 02       	_ISTOR:	.byte  2
 3570 1c6d 4921     		.ascii "I!"
 3571 1c6f 00       		.p2align 2 	
 3572              	ISTOR:	//  data address --
 3573 1c70 404700BF 		_NEST 
 3574 1c74 A1080000 		_ADR DDUP 
 3575 1c78 39060000 		_ADR TOR 
 3576 1c7c 39060000 		_ADR TOR 
 3577 1c80 411C0000 		_ADR HWORD_WRITE
 3578 1c84 A9050000 		_QBRAN 1f 
 3578      A01C0000 
 3579 1c8c 3D1A0000 	0:	_ABORQ 10, "write failed"
 3579      0A777269 
 3579      74652066 
 3579      61696C65 
 3579      640000BF 
 3580 1ca0 15060000 	1:	_ADR RFROM
 3581 1ca4 6D050000 		_DOLIT 65536 
 3581      00000100 
 3582 1cac FD0C0000 		_ADR  SLASH
 3583 1cb0 15060000 		_ADR RFROM 
 3584 1cb4 6D050000 		_DOLIT 2 
 3584      02000000 
 3585 1cbc 55070000 		_ADR PLUS 
 3586 1cc0 411C0000 		_ADR HWORD_WRITE 
 3587 1cc4 A9050000 		_QBRAN 2f
 3587      D41C0000 
 3588 1ccc BB050000 		_BRAN 0b 
 3588      8C1C0000 
 3589 1cd4 1B040000 	2:	_UNNEST
 3590              	
 3591              	// IMG_SIZE ( -- u )
 3592              	// return flash pages required to save 
ARM GAS  stm32eforth-fl.s 			page 70


 3593              	// user ram  
 3594 1cd8 6C1C0000 		.word _ISTOR 
 3595 1cdc 08       	_IMG_SIZE: .byte 8
 3596 1cdd 494D475F 		.ascii "IMG_SIZE" 
 3596      53495A45 
 3597 1ce5 0000BF   		.p2align 2
 3598              	IMG_SIZE: 
 3599 1ce8 404700BF 		_NEST
 3600 1cec 6D050000 		_DOLIT VARS_END_OFS-IMG_SIGN_OFS 
 3600      38000000 
 3601 1cf4 990B0000 		_ADR USER_END 
 3602 1cf8 7D0B0000 		_ADR USER_BEGIN 
 3603 1cfc 65070000 		_ADR SUBB 
 3604 1d00 55070000 		_ADR PLUS 
 3605 1d04 6D050000 		_DOLIT PAGE_SIZE 
 3605      00040000 
 3606 1d0c C50C0000 		_ADR SLMOD 
 3607 1d10 A1060000 		_ADR SWAP 
 3608 1d14 A9050000 		_QBRAN 1f 
 3608      201D0000 
 3609 1d1c B1070000 		_ADR ONEP
 3610              	1:
 3611 1d20 1B040000 		_UNNEST  
 3612              	
 3613              	// IMG? (  -- T|F )
 3614              	// check if an image has been saved in FLASH  
 3615 1d24 DC1C0000 		.word _IMG_SIZE 
 3616 1d28 04       	_IMGQ: .byte 4
 3617 1d29 494D473F 		.ascii "IMG?"
 3618 1d2d 0000BF   		.p2align 2
 3619              	IMGQ:
 3620 1d30 404700BF 		_NEST 
 3621 1d34 B10B0000 		_ADR IMG_ADR 
 3622 1d38 E9050000 		_ADR AT 
 3623 1d3c CD0B0000 		_ADR IMG_SIGN  
 3624 1d40 E9050000 		_ADR AT 
 3625 1d44 FD060000 		_ADR XORR  
 3626 1d48 09090000 		_ADR ZEQUAL
 3627 1d4c 1B040000 		_UNNEST
 3628              	
 3629              	// LOAD_IMG (  -- )
 3630              	// Load saved image into RAM. 
 3631 1d50 281D0000 		.word _IMGQ
 3632 1d54 08       	_LOAD_IMG: .byte 8 
 3633 1d55 4C4F4144 		.ascii "LOAD_IMG" 
 3633      5F494D47 
 3634 1d5d 0000BF   		.p2align 2 
 3635              	LOAD_IMG:
 3636 1d60 404700BF 		_NEST 
 3637 1d64 311D0000 		_ADR IMGQ 
 3638 1d68 A9050000 		_QBRAN 1f
 3638      B41D0000 
 3639              	/* copy system variables to RAM */
 3640 1d70 B10B0000 		_ADR IMG_ADR 
 3641 1d74 91060000 		_ADR DUPP 
 3642 1d78 39060000 		_ADR TOR   // save source address 
 3643 1d7c CD0B0000 		_ADR IMG_SIGN 
ARM GAS  stm32eforth-fl.s 			page 71


 3644 1d80 6D050000 		_DOLIT (VARS_END_OFS-IMG_SIGN_OFS) 
 3644      38000000 
 3645 1d88 91060000 		_ADR DUPP 
 3646 1d8c 39060000 		_ADR TOR 
 3647 1d90 B10E0000 		_ADR MOVE // ( src dest count -- ) R: src count 
 3648              	/* copy user definitions */
 3649 1d94 15060000 		_ADR RFROM 
 3650 1d98 15060000 		_ADR RFROM  
 3651 1d9c 55070000 		_ADR PLUS // source address  
 3652 1da0 7D0B0000 		_ADR USER_BEGIN // destination address
 3653 1da4 110E0000 		_ADR HERE  
 3654 1da8 B5060000 		_ADR OVER 
 3655 1dac 65070000 		_ADR SUBB  // byte count 
 3656 1db0 B10E0000 		_ADR MOVE
 3657 1db4 1B040000 	1:	_UNNEST  
 3658              	
 3659              	// ERASE_MPG ( u1 u2 -- )
 3660              	// erase many pages 
 3661              	// u1 first page number 
 3662              	// u2 how many pages  
 3663 1db8 541D0000 		.word _LOAD_IMG
 3664 1dbc 09       	_ERASE_MPG: .byte 9 
 3665 1dbd 45524153 		.ascii "ERASE_MPG"	
 3665      455F4D50 
 3665      47
 3666 1dc6 00BF     		.p2align 2 
 3667              	ERASE_MPG:
 3668 1dc8 404700BF 		_NEST 
 3669 1dcc 39060000 		_ADR TOR 
 3670 1dd0 9D1E0000 		_ADR PG_TO_ADR 
 3671 1dd4 BB050000 		_BRAN 3f 
 3671      141E0000 
 3672              	1:
 3673 1ddc 91060000 		_ADR DUPP 
 3674 1de0 39060000 		_ADR TOR 
 3675 1de4 191C0000 		_ADR EPAGE
 3676 1de8 A9050000 		_QBRAN 2f 
 3676      041E0000 
 3677 1df0 3D1A0000 		_ABORQ 12,"erase failed"
 3677      0C657261 
 3677      73652066 
 3677      61696C65 
 3677      640000BF 
 3678 1e04 15060000 	2:	_ADR RFROM
 3679 1e08 6D050000 		_DOLIT PAGE_SIZE 
 3679      00040000 
 3680 1e10 55070000 		_ADR PLUS 
 3681              	3:
 3682 1e14 91050000 		_DONXT 1b 
 3682      DC1D0000 
 3683 1e1c 07040000 		_ADR TPOP 
 3684 1e20 1B040000 		_UNNEST 
 3685              	
 3686              	// FLSH_WR ( src dest u -- dest+u )
 3687              	// write u words to flash memory 
 3688 1e24 BC1D0000 		.word _ERASE_MPG
 3689 1e28 07       	_FLSH_WR: .byte 7 
ARM GAS  stm32eforth-fl.s 			page 72


 3690 1e29 464C5348 		.ascii "FLSH_WR"
 3690      5F5752
 3691              		.p2align  
 3692              	FLSH_WR: 
 3693 1e30 404700BF 		_NEST 
 3694 1e34 39060000 		_ADR TOR
 3695 1e38 BB050000 		_BRAN 3f  
 3695      601E0000 
 3696              	/* write system variables to FLASH */
 3697 1e40 39060000 	2:  _ADR TOR  // destination address 
 3698 1e44 91060000 		_ADR DUPP 
 3699 1e48 E9050000 		_ADR AT   // get data 
 3700 1e4c 29060000 		_ADR RAT  // get destination address 
 3701 1e50 711C0000 		_ADR ISTOR
 3702 1e54 F1070000 		_ADR CELLP  // increment source address 
 3703 1e58 15060000 		_ADR RFROM 
 3704 1e5c F1070000 		_ADR CELLP  // increment dest address 
 3705 1e60 91050000 	3:	_DONXT 2b
 3705      401E0000 
 3706 1e68 39060000 		_ADR TOR 
 3707 1e6c 81060000 		_ADR DROP 
 3708 1e70 15060000 		_ADR RFROM 
 3709 1e74 1B040000 		_UNNEST 
 3710              	
 3711              	// ADR>PG ( a -- n )
 3712              	// convert address to page number, {0..127} 
 3713 1e78 281E0000 		.word _FLSH_WR
 3714 1e7c 06       	_ADR_TO_PG: .byte 6 
 3715 1e7d 4144523E 		.ascii "ADR>PG" 
 3715      5047
 3716 1e83 00       		.p2align 2 
 3717              	ADR_TO_PG: 
 3718 1e84 4FEA9525 		lsr r5,#10 
 3719 1e88 05F07F05 		and r5,#127 
 3720 1e8c FEF7C2BA 		_NEXT  
 3721              	
 3722              	// PG>ADR ( n -- a )
 3723              	// convert page# to address 
 3724 1e90 7C1E0000 		.word _ADR_TO_PG
 3725 1e94 06       	_PG_TO_ADR: .byte 6 
 3726 1e95 50473E41 		.ascii "PG>ADR" 
 3726      4452
 3727 1e9b 00       		.p2align 2 
 3728              	PG_TO_ADR:
 3729 1e9c C0F20205 		movt r5,#2
 3730 1ea0 4FEA8525 		lsl r5,#10 
 3731 1ea4 FEF7B6BA 		_NEXT 
 3732              	
 3733              	// ERASE_IMG (  -- )
 3734              	// erase saved image  
 3735 1ea8 941E0000 		.word _PG_TO_ADR 
 3736 1eac 09       	_ERASE_IMG: .byte 9
 3737 1ead 45524153 		.ascii "ERASE_IMG"
 3737      455F494D 
 3737      47
 3738 1eb6 00BF     		.p2align 2
 3739              	ERASE_IMG:
ARM GAS  stm32eforth-fl.s 			page 73


 3740 1eb8 404700BF 		_NEST
 3741 1ebc B10B0000 		_ADR IMG_ADR 
 3742 1ec0 E91C0000 		_ADR IMG_SIZE // in page count 
 3743 1ec4 39060000 		_ADR TOR 
 3744 1ec8 BB050000 		_BRAN 2f 
 3744      E41E0000 
 3745 1ed0 91060000 	1:	_ADR DUPP 
 3746 1ed4 191C0000 		_ADR EPAGE
 3747 1ed8 6D050000 		_DOLIT PAGE_SIZE
 3747      00040000 
 3748 1ee0 55070000 		_ADR PLUS  
 3749 1ee4 91050000 	2:	_DONXT 1b 
 3749      D01E0000 
 3750 1eec 81060000 		_ADR DROP 
 3751 1ef0 1B040000 		_UNNEST 
 3752              	
 3753              	// SAVE_IMG (  -- )
 3754              	// save in flash memory system variables and user defintitions.
 3755 1ef4 AC1E0000 		.word _ERASE_IMG	
 3756 1ef8 08       	_SAVE_IMG: .byte 8 
 3757 1ef9 53415645 		.ascii "SAVE_IMG"
 3757      5F494D47 
 3758 1f01 0000BF   		.p2align 2
 3759              	SAVE_IMG:
 3760 1f04 404700BF 		_NEST 
 3761 1f08 110E0000 		_ADR HERE 
 3762 1f0c 7D0B0000 		_ADR USER_BEGIN
 3763 1f10 1D090000 		_ADR EQUAL 
 3764 1f14 A9050000 		_QBRAN 1f
 3764      201F0000 
 3765 1f1c 1B040000 		_UNNEST  
 3766 1f20 311D0000 	1:	_ADR IMGQ 
 3767 1f24 A9050000 		_QBRAN 2f
 3767      301F0000 
 3768              	/* delete saved image */
 3769 1f2c B91E0000 		_ADR ERASE_IMG 
 3770              	/* save system variables */
 3771 1f30 CD0B0000 	2:	_ADR IMG_SIGN // src address
 3772 1f34 B10B0000 		_ADR IMG_ADR // dest address
 3773 1f38 6D050000 		_DOLIT (VARS_END_OFS-IMG_SIGN_OFS) 
 3773      38000000 
 3774 1f40 35080000 		_ADR CELLSL  // word count 
 3775 1f44 311E0000 		_ADR FLSH_WR  // ( src dest count -- dest+u )
 3776              	/* write user definitions */
 3777 1f48 7D0B0000 		_ADR USER_BEGIN
 3778 1f4c A1060000 		_ADR SWAP  // ( src dest+ -- )
 3779 1f50 110E0000 		_ADR HERE   
 3780 1f54 7D0B0000 		_ADR USER_BEGIN 
 3781 1f58 65070000 		_ADR SUBB 
 3782 1f5c 35080000 		_ADR CELLSL  // src dest+ count -- 
 3783 1f60 311E0000 		_ADR FLSH_WR  
 3784 1f64 1B040000 	9:	_UNNEST 
 3785              	
 3786              	// TURNKEY ( -- "WORD") 
 3787              	// set autorun program in 'BOOT variable 
 3788              	// and save image 
 3789 1f68 F81E0000 		.word _SAVE_IMG
ARM GAS  stm32eforth-fl.s 			page 74


 3790 1f6c 07       	_TURNKEY: .byte 7
 3791 1f6d 5455524E 		.ascii "TURNKEY"
 3791      4B4559
 3792              		.p2align 2 
 3793              	TURNKEY:
 3794 1f74 404700BF 		_NEST 
 3795 1f78 05200000 		_ADR TICK 
 3796 1f7c 6D050000 		_DOLIT 1 
 3796      01000000 
 3797 1f84 E9060000 		_ADR ORR 		
 3798 1f88 710A0000 		_ADR TBOOT 
 3799 1f8c D5050000 		_ADR STORE 
 3800 1f90 051F0000 		_ADR SAVE_IMG 
 3801 1f94 1B040000 		_UNNEST
 3802              	
 3803 1f98 6C1F0000 		.word _TURNKEY
 3804 1f9c 06       	_FORGET: .byte 6 
 3805 1f9d 464F5247 		.ascii "FORGET"
 3805      4554
 3806 1fa3 00       		.p2align 2
 3807              	FORGET:
 3808 1fa4 404700BF 		_NEST 
 3809 1fa8 F9160000 		_ADR TOKEN 
 3810 1fac 91060000 		_ADR DUPP 
 3811 1fb0 A9050000 		_QBRAN 9f 
 3811      EC1F0000 
 3812 1fb8 7D180000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 3813 1fbc 65080000 		_ADR QDUP 
 3814 1fc0 A9050000 		_QBRAN 8f
 3814      E81F0000 
 3815 1fc8 01080000 		_ADR CELLM // ( ca la )
 3816 1fcc 91060000 		_ADR DUPP 
 3817 1fd0 210B0000 		_ADR CPP   
 3818 1fd4 D5050000 		_ADR STORE
 3819 1fd8 E9050000 		_ADR AT 
 3820 1fdc 490B0000 		_ADR LAST 
 3821 1fe0 D5050000 		_ADR STORE
 3822 1fe4 5D240000 		_ADR OVERT 
 3823 1fe8 81060000 	8:  _ADR DROP 
 3824 1fec 1B040000 	9:	_UNNEST 
 3825              	
 3826              		.p2align 2 
 3827              	flash_regs:
 3828 1ff0 00200240 		.word FLASH_BASE_ADR // 0 
 3829 1ff4 23016745 		.word FLASH_KEY1   // 4 
 3830 1ff8 AB89EFCD 		.word FLASH_KEY2   // 8
 3831              	
 3832              	// **************************************************************************
 3833              	//  The compiler
 3834              	
 3835              	//    '	   ( -- ca )
 3836              	// 	Search context vocabularies for the next word in input stream.
 3837              	
 3838 1ffc 9C1F0000 		.word	_FORGET
 3839 2000 01       	_TICK:	.byte  1
 3840 2001 27       		.ascii "'"
 3841 2002 00BF     		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 75


 3842              	TICK:
 3843 2004 404700BF 		_NEST
 3844 2008 F9160000 		_ADR	TOKEN
 3845 200c 7D180000 		_ADR	NAMEQ	// ?defined
 3846 2010 A9050000 		_QBRAN	TICK1
 3846      1C200000 
 3847 2018 1B040000 		_UNNEST	// yes, push code address
 3848              	TICK1:	
 3849 201c 111A0000 		_ADR ABORT	// no, error
 3850              	
 3851              	//    ALLOT	( n -- )
 3852              	// 	Allocate n bytes to the ram area.
 3853              	
 3854 2020 00200000 		.word	_TICK
 3855 2024 05       	_ALLOT:	.byte  5
 3856 2025 414C4C4F 		.ascii "ALLOT"
 3856      54
 3857 202a 00BF     		.p2align 2 	
 3858              	ALLOT:
 3859 202c 404700BF 		_NEST
 3860 2030 210B0000 		_ADR	CPP
 3861 2034 A5090000 		_ADR	PSTOR
 3862 2038 1B040000 		_UNNEST			// adjust code pointer
 3863              	
 3864              	//    ,	   ( w -- )
 3865              	// 	Compile an integer into the code dictionary.
 3866              	
 3867 203c 24200000 		.word	_ALLOT
 3868 2040 012C     	_COMMA:	.byte  1,','
 3869 2042 00BF     		.p2align 2 	
 3870              	COMMA:
 3871 2044 404700BF 		_NEST
 3872 2048 110E0000 		_ADR	HERE
 3873 204c 91060000 		_ADR	DUPP
 3874 2050 F1070000 		_ADR	CELLP	// cell boundary
 3875 2054 210B0000 		_ADR	CPP
 3876 2058 D5050000 		_ADR	STORE
 3877 205c D5050000 		_ADR	STORE
 3878 2060 1B040000 		_UNNEST	// adjust code pointer, compile
 3879              		.p2align 2 
 3880              	//    [COMPILE]   ( -- //  string> )
 3881              	// 	Compile the next immediate word into code dictionary.
 3882              	
 3883 2064 40200000 		.word	_COMMA
 3884 2068 89       	_BCOMP:	.byte  IMEDD+9
 3885 2069 5B434F4D 		.ascii "[COMPILE]"
 3885      50494C45 
 3885      5D
 3886 2072 00BF     		.p2align 2 	
 3887              	BCOMP:
 3888 2074 404700BF 		_NEST
 3889 2078 05200000 		_ADR	TICK
 3890 207c 45200000 		_ADR	COMMA
 3891 2080 1B040000 		_UNNEST
 3892              	
 3893              	//    COMPILE	( -- )
 3894              	// 	Compile the next address in colon list to code dictionary.
ARM GAS  stm32eforth-fl.s 			page 76


 3895              	
 3896 2084 68200000 		.word	_BCOMP
 3897 2088 47       	_COMPI:	.byte  COMPO+7
 3898 2089 434F4D50 		.ascii "COMPILE"
 3898      494C45
 3899              		.p2align 2 	
 3900              	COMPI:
 3901 2090 404700BF 		_NEST
 3902 2094 15060000 		_ADR	RFROM
 3903 2098 91060000 		_ADR	DUPP 
 3904 209c E9050000 		_ADR	AT
 3905 20a0 6D050000 		_DOLIT 1 
 3905      01000000 
 3906 20a8 E9060000 		_ADR	ORR 
 3907 20ac 45200000 		_ADR	COMMA 
 3908 20b0 F1070000 		_ADR	CELLP 
 3909 20b4 39060000 		_ADR	TOR 
 3910 20b8 1B040000 		_UNNEST			// adjust return address
 3911              	
 3912              	//    LITERAL	( w -- )
 3913              	// 	Compile tos to code dictionary as an integer literal.
 3914              	
 3915 20bc 88200000 		.word	_COMPI
 3916 20c0 87       	_LITER:	.byte  IMEDD+7
 3917 20c1 4C495445 		.ascii "LITERAL"
 3917      52414C
 3918              		.p2align 2 	
 3919              	LITER:
 3920 20c8 404700BF 		_NEST
 3921 20cc 6D050000 		_COMPI	DOLIT
 3921      6C050000 
 3921      B9240000 
 3922 20d8 45200000 		_ADR	COMMA
 3923 20dc 1B040000 		_UNNEST
 3924              	
 3925              	//    $,"	( -- )
 3926              	// 	Compile a literal string up to next " .
 3927              	
 3928              	// 	.word	_LITER
 3929              	// _STRCQ	.byte  3
 3930              	// 	.ascii "$,\""
 3931              	// 	.p2align 2 	
 3932              	STRCQ:
 3933 20e0 404700BF 		_NEST
 3934 20e4 6D050000 		_DOLIT -4
 3934      FCFFFFFF 
 3935 20ec 210B0000 		_ADR	CPP
 3936 20f0 A5090000 		_ADR	PSTOR
 3937 20f4 6D050000 		_DOLIT	'\"'
 3937      22000000 
 3938 20fc D5160000 		_ADR	WORDD			// move word to code dictionary
 3939 2100 ED090000 		_ADR	COUNT
 3940 2104 55070000 		_ADR	PLUS
 3941 2108 5D0D0000 		_ADR	ALGND			// calculate aligned end of string
 3942 210c 210B0000 		_ADR	CPP
 3943 2110 D5050000 		_ADR	STORE
 3944 2114 1B040000 		_UNNEST 			// adjust the code pointer
ARM GAS  stm32eforth-fl.s 			page 77


 3945              	
 3946              	/*******************
 3947              	//  Structures
 3948              	*******************/
 3949              	//    FOR	 ( -- a )
 3950              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3951              	
 3952 2118 C0200000 		.word	_LITER
 3953 211c C3       	_FOR:	.byte  COMPO+IMEDD+3
 3954 211d 464F52   		.ascii "FOR"
 3955              		.p2align 2 	
 3956              	FOR:
 3957 2120 404700BF 		_NEST
 3958 2124 6D050000 		_COMPI	TOR
 3958      38060000 
 3958      B9240000 
 3959 2130 110E0000 		_ADR	HERE
 3960 2134 1B040000 		_UNNEST
 3961              	
 3962              	//    BEGIN	( -- a )
 3963              	// 	Start an infinite or indefinite loop structure.
 3964              	
 3965 2138 1C210000 		.word	_FOR
 3966 213c C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 3967 213d 42454749 		.ascii "BEGIN"
 3967      4E
 3968 2142 00BF     		.p2align 2 	
 3969              	BEGIN:
 3970 2144 404700BF 		_NEST
 3971 2148 110E0000 		_ADR	HERE
 3972 214c 1B040000 		_UNNEST
 3973              		.p2align 2 
 3974              	
 3975              	//    NEXT	( a -- )
 3976              	// 	Terminate a FOR-NEXT loop structure.
 3977 2150 3C210000 		.word	_BEGIN
 3978 2154 C4       	_FNEXT:	.byte  COMPO+IMEDD+4
 3979 2155 4E455854 		.ascii "NEXT"
 3980 2159 0000BF   		.p2align 2 	
 3981              	FNEXT:
 3982 215c 404700BF 		_NEST
 3983 2160 6D050000 		_COMPI	DONXT
 3983      90050000 
 3983      B9240000 
 3984 216c 45200000 		_ADR	COMMA
 3985 2170 1B040000 		_UNNEST
 3986              	
 3987              	//    UNTIL	( a -- )
 3988              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3989              	
 3990 2174 54210000 		.word	_FNEXT
 3991 2178 C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3992 2179 554E5449 		.ascii "UNTIL"
 3992      4C
 3993 217e 00BF     		.p2align 2 	
 3994              	UNTIL:
 3995 2180 404700BF 		_NEST
ARM GAS  stm32eforth-fl.s 			page 78


 3996 2184 6D050000 		_COMPI	QBRAN
 3996      A8050000 
 3996      B9240000 
 3997 2190 45200000 		_ADR	COMMA
 3998 2194 1B040000 		_UNNEST
 3999              	
 4000              	//    AGAIN	( a -- )
 4001              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 4002              	
 4003 2198 78210000 		.word	_UNTIL
 4004 219c C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 4005 219d 41474149 		.ascii "AGAIN"
 4005      4E
 4006 21a2 00BF     		.p2align 2 	
 4007              	AGAIN:
 4008 21a4 404700BF 		_NEST
 4009 21a8 6D050000 		_COMPI	BRAN
 4009      BA050000 
 4009      B9240000 
 4010 21b4 45200000 		_ADR	COMMA
 4011 21b8 1B040000 		_UNNEST
 4012              	
 4013              	//    IF	  ( -- A )
 4014              	// 	Begin a conditional branch structure.
 4015              	
 4016 21bc 9C210000 		.word	_AGAIN
 4017 21c0 C2       	_IFF:	.byte  COMPO+IMEDD+2
 4018 21c1 4946     		.ascii "IF"
 4019 21c3 00       		.p2align 2 	
 4020              	IFF:
 4021 21c4 404700BF 		_NEST
 4022 21c8 6D050000 		_COMPI	QBRAN
 4022      A8050000 
 4022      B9240000 
 4023 21d4 110E0000 		_ADR	HERE
 4024 21d8 6D050000 		_DOLIT	4
 4024      04000000 
 4025 21e0 210B0000 		_ADR	CPP
 4026 21e4 A5090000 		_ADR	PSTOR
 4027 21e8 1B040000 		_UNNEST
 4028              	
 4029              	//    AHEAD	( -- A )
 4030              	// 	Compile a forward branch instruction.
 4031              	
 4032 21ec C0210000 		.word	_IFF
 4033 21f0 C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 4034 21f1 41484541 		.ascii "AHEAD"
 4034      44
 4035 21f6 00BF     		.p2align 2 	
 4036              	AHEAD:
 4037 21f8 404700BF 		_NEST
 4038 21fc 6D050000 		_COMPI	BRAN
 4038      BA050000 
 4038      B9240000 
 4039 2208 110E0000 		_ADR	HERE
 4040 220c 6D050000 		_DOLIT	4
 4040      04000000 
ARM GAS  stm32eforth-fl.s 			page 79


 4041 2214 210B0000 		_ADR	CPP
 4042 2218 A5090000 		_ADR	PSTOR
 4043 221c 1B040000 		_UNNEST
 4044              	
 4045              	//    REPEAT	( A a -- )
 4046              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 4047              	
 4048 2220 F0210000 		.word	_AHEAD
 4049 2224 C6       	_REPEA:	.byte  COMPO+IMEDD+6
 4050 2225 52455045 		.ascii "REPEAT"
 4050      4154
 4051 222b 00       		.p2align 2 	
 4052              	REPEA:
 4053 222c 404700BF 		_NEST
 4054 2230 A5210000 		_ADR	AGAIN
 4055 2234 110E0000 		_ADR	HERE
 4056 2238 A1060000 		_ADR	SWAP
 4057 223c D5050000 		_ADR	STORE
 4058 2240 1B040000 		_UNNEST
 4059              	
 4060              	//    THEN	( A -- )
 4061              	// 	Terminate a conditional branch structure.
 4062              	
 4063 2244 24220000 		.word	_REPEA
 4064 2248 C4       	_THENN:	.byte  COMPO+IMEDD+4
 4065 2249 5448454E 		.ascii "THEN"
 4066 224d 0000BF   		.p2align 2 	
 4067              	THENN:
 4068 2250 404700BF 		_NEST
 4069 2254 110E0000 		_ADR	HERE
 4070 2258 A1060000 		_ADR	SWAP
 4071 225c D5050000 		_ADR	STORE
 4072 2260 1B040000 		_UNNEST
 4073              	
 4074              	//    AFT	 ( a -- a A )
 4075              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 4076              	
 4077 2264 48220000 		.word	_THENN
 4078 2268 C3       	_AFT:	.byte  COMPO+IMEDD+3
 4079 2269 414654   		.ascii "AFT"
 4080              		.p2align 2 	
 4081              	AFT:
 4082 226c 404700BF 		_NEST
 4083 2270 81060000 		_ADR	DROP
 4084 2274 F9210000 		_ADR	AHEAD
 4085 2278 45210000 		_ADR	BEGIN
 4086 227c A1060000 		_ADR	SWAP
 4087 2280 1B040000 		_UNNEST
 4088              	
 4089              	//    ELSE	( A -- A )
 4090              	// 	Start the false clause in an IF-ELSE-THEN structure.
 4091              	
 4092 2284 68220000 		.word	_AFT
 4093 2288 C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 4094 2289 454C5345 		.ascii "ELSE"
 4095 228d 0000BF   		.p2align 2 	
 4096              	ELSEE:
ARM GAS  stm32eforth-fl.s 			page 80


 4097 2290 404700BF 		_NEST
 4098 2294 F9210000 		_ADR	AHEAD
 4099 2298 A1060000 		_ADR	SWAP
 4100 229c 51220000 		_ADR	THENN
 4101 22a0 1B040000 		_UNNEST
 4102              	
 4103              	//    WHILE	( a -- A a )
 4104              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 4105              	
 4106 22a4 88220000 		.word	_ELSEE
 4107 22a8 C5       	_WHILE:	.byte  COMPO+IMEDD+5
 4108 22a9 5748494C 		.ascii "WHILE"
 4108      45
 4109 22ae 00BF     		.p2align 2 	
 4110              	WHILE:
 4111 22b0 404700BF 		_NEST
 4112 22b4 C5210000 		_ADR	IFF
 4113 22b8 A1060000 		_ADR	SWAP
 4114 22bc 1B040000 		_UNNEST
 4115              	
 4116              	//    ABORT"	( -- //  string> )
 4117              	// 	Conditional abort with an error message.
 4118              	
 4119 22c0 A8220000 		.word	_WHILE
 4120 22c4 86       	_ABRTQ:	.byte  IMEDD+6
 4121 22c5 41424F52 		.ascii "ABORT\""
 4121      5422
 4122 22cb 00       		.p2align 2 	
 4123              	ABRTQ:
 4124 22cc 404700BF 		_NEST
 4125 22d0 6D050000 		_COMPI	ABORQ
 4125      3C1A0000 
 4125      B9240000 
 4126 22dc E1200000 		_ADR	STRCQ
 4127 22e0 1B040000 		_UNNEST
 4128              	
 4129              	//    $"	( -- //  string> )
 4130              	// 	Compile an inline word literal.
 4131              	
 4132 22e4 C4220000 		.word	_ABRTQ
 4133 22e8 82       	_STRQ:	.byte  IMEDD+2
 4134 22e9 2422     		.ascii	"$\""
 4135 22eb 00       		.p2align 2 	
 4136              	STRQ:
 4137 22ec 404700BF 		_NEST
 4138 22f0 6D050000 		_COMPI	STRQP
 4138      CC130000 
 4138      B9240000 
 4139 22fc E1200000 		_ADR	STRCQ
 4140 2300 1B040000 		_UNNEST
 4141              	
 4142              	//    ."	( -- //  string> )
 4143              	// 	Compile an inline word  literal to be typed out at run time.
 4144              	
 4145 2304 E8220000 		.word	_STRQ
 4146 2308 C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 4147 2309 2E22     		.ascii	".\""
ARM GAS  stm32eforth-fl.s 			page 81


 4148 230b 00       		.p2align 2 	
 4149              	DOTQ:
 4150 230c 404700BF 		_NEST
 4151 2310 6D050000 		_COMPI	DOTQP
 4151      E8130000 
 4151      B9240000 
 4152 231c E1200000 		_ADR	STRCQ
 4153 2320 1B040000 		_UNNEST
 4154              	
 4155              	// **************************************************************************
 4156              	//  Name compiler
 4157              	
 4158              	//    ?UNIQUE	( a -- a )
 4159              	// 	Display a warning message if the word already exists.
 4160              	
 4161 2324 08230000 		.word	_DOTQ
 4162 2328 07       	_UNIQU:	.byte  7
 4163 2329 3F554E49 		.ascii "?UNIQUE"
 4163      515545
 4164              		.p2align 2 	
 4165              	UNIQU:
 4166 2330 404700BF 		_NEST
 4167 2334 91060000 		_ADR	DUPP
 4168 2338 7D180000 		_ADR	NAMEQ			// ?name exists
 4169 233c A9050000 		_QBRAN	UNIQ1	// redefinitions are OK
 4169      5C230000 
 4170 2344 E9130000 		_DOTQP	7," reDef "		// but warn the user
 4170      07207265 
 4170      44656620 
 4171 2350 B5060000 		_ADR	OVER
 4172 2354 ED090000 		_ADR	COUNT
 4173 2358 4D130000 		_ADR	TYPEE			// just in case its not planned
 4174              	UNIQ1:
 4175 235c 81060000 		_ADR	DROP
 4176 2360 1B040000 		_UNNEST
 4177              	
 4178              	//    $,n	 ( na -- )
 4179              	// 	Build a new dictionary name using the data at na.
 4180              	
 4181              	// 	.word	_UNIQU
 4182              	// _SNAME	.byte  3
 4183              	// 	.ascii "$,n"
 4184              	// 	.p2align 2 	
 4185              	SNAME:
 4186 2364 404700BF 		_NEST
 4187 2368 91060000 		_ADR	DUPP			//  na na
 4188 236c 09060000 		_ADR	CAT			//  ?null input
 4189 2370 A9050000 		_QBRAN	SNAM1
 4189      AC230000 
 4190 2378 31230000 		_ADR	UNIQU			//  na
 4191 237c 490B0000 		_ADR	LAST			//  na last
 4192 2380 E9050000 		_ADR	AT			//  na la
 4193 2384 45200000 		_ADR	COMMA			//  na
 4194 2388 91060000 		_ADR	DUPP			//  na na
 4195 238c 490B0000 		_ADR	LAST			//  na na last
 4196 2390 D5050000 		_ADR	STORE			//  na , save na for vocabulary link
 4197 2394 ED090000 		_ADR	COUNT			//  na+1 count
ARM GAS  stm32eforth-fl.s 			page 82


 4198 2398 55070000 		_ADR	PLUS			//  na+1+count
 4199 239c 5D0D0000 		_ADR	ALGND			//  word boundary
 4200 23a0 210B0000 		_ADR	CPP
 4201 23a4 D5050000 		_ADR	STORE			//  top of dictionary now
 4202 23a8 1B040000 		_UNNEST
 4203              	SNAM1:
 4204 23ac CD130000 		_ADR	STRQP
 4205 23b0 07       		.byte	7
 4206 23b1 206E616D 		.ascii " name? "
 4206      653F20
 4207 23b8 111A0000 		_ADR	ABORT
 4208              	
 4209              	//    $COMPILE	( a -- )
 4210              	// 	Compile next word to code dictionary as a token or literal.
 4211              	
 4212 23bc 28230000 		.word	_UNIQU
 4213 23c0 08       	_SCOMP:	.byte  8
 4214 23c1 24434F4D 		.ascii "$COMPILE"
 4214      50494C45 
 4215 23c9 0000BF   		.p2align 2 	
 4216              	SCOMP:
 4217 23cc 404700BF 		_NEST
 4218 23d0 7D180000 		_ADR	NAMEQ
 4219 23d4 65080000 		_ADR	QDUP	// defined?
 4220 23d8 A9050000 		_QBRAN	SCOM2
 4220      08240000 
 4221 23e0 E9050000 		_ADR	AT
 4222 23e4 6D050000 		_DOLIT	IMEDD
 4222      80000000 
 4223 23ec D5060000 		_ADR	ANDD	// immediate?
 4224 23f0 A9050000 		_QBRAN	SCOM1
 4224      00240000 
 4225 23f8 85050000 		_ADR	EXECU
 4226 23fc 1B040000 		_UNNEST			// it's immediate, execute
 4227              	SCOM1:
 4228 2400 B9240000 		_ADR	CALLC			// it's not immediate, compile
 4229 2404 1B040000 		_UNNEST	
 4230              	SCOM2:
 4231 2408 A1110000 		_ADR	NUMBQ
 4232 240c A9050000 		_QBRAN	SCOM3
 4232      1C240000 
 4233 2414 C9200000 		_ADR	LITER
 4234 2418 1B040000 		_UNNEST			// compile number as integer
 4235              	SCOM3: // compilation abort 
 4236 241c 25240000 		_ADR COLON_ABORT 
 4237 2420 111A0000 		_ADR	ABORT			// error
 4238              	
 4239              	// before aborting a compilation 
 4240              	// reset HERE and LAST
 4241              	// to previous values. 
 4242              	COLON_ABORT:
 4243 2424 404700BF 		_NEST 
 4244 2428 490B0000 		_ADR LAST 
 4245 242c E9050000 		_ADR AT 
 4246 2430 01080000 		_ADR CELLM 
 4247 2434 91060000 		_ADR DUPP 
 4248 2438 210B0000 		_ADR CPP  
ARM GAS  stm32eforth-fl.s 			page 83


 4249 243c D5050000 		_ADR STORE 
 4250 2440 E9050000 		_ADR AT 
 4251 2444 490B0000 		_ADR LAST 
 4252 2448 D5050000 		_ADR STORE 
 4253 244c 1B040000 		_UNNEST 
 4254              	
 4255              	//    OVERT	( -- )
 4256              	// 	Link a new word into the current vocabulary.
 4257              	
 4258 2450 C0230000 		.word	_SCOMP
 4259 2454 05       	_OVERT:	.byte  5
 4260 2455 4F564552 		.ascii "OVERT"
 4260      54
 4261 245a 00BF     		.p2align 2 	
 4262              	OVERT:
 4263 245c 404700BF 		_NEST
 4264 2460 490B0000 		_ADR	LAST
 4265 2464 E9050000 		_ADR	AT
 4266 2468 0D0B0000 		_ADR	CNTXT
 4267 246c D5050000 		_ADR	STORE
 4268 2470 1B040000 		_UNNEST
 4269              	
 4270              	//    ; 	   ( -- )
 4271              	// 	Terminate a colon definition.
 4272              	
 4273 2474 54240000 		.word	_OVERT
 4274 2478 C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 4275 2479 3B       		.ascii ";"
 4276 247a 00BF     		.p2align 2 	
 4277              	SEMIS:
 4278 247c 404700BF 		_NEST
 4279 2480 6D050000 		_DOLIT	UNNEST
 4279      1A040000 
 4280 2488 B9240000 		_ADR	CALLC
 4281 248c CD1A0000 		_ADR	LBRAC
 4282 2490 5D240000 		_ADR	OVERT
 4283 2494 1B040000 		_UNNEST
 4284              	
 4285              	//    ]	   ( -- )
 4286              	// 	Start compiling the words in the input stream.
 4287              	
 4288 2498 78240000 		.word	_SEMIS
 4289 249c 01       	_RBRAC:	.byte  1
 4290 249d 5D       		.ascii "]"
 4291 249e 00BF     		.p2align 2 	
 4292              	RBRAC:
 4293 24a0 404700BF 		_NEST
 4294 24a4 6D050000 		_DOLIT	SCOMP
 4294      CC230000 
 4295 24ac E10A0000 		_ADR	TEVAL
 4296 24b0 D5050000 		_ADR	STORE
 4297 24b4 1B040000 		_UNNEST
 4298              	
 4299              	//    BL.W	( ca -- )
 4300              	// 	compile ca.
 4301              	
 4302              	// 	.word	_RBRAC
ARM GAS  stm32eforth-fl.s 			page 84


 4303              	// _CALLC	.byte  5
 4304              	// 	.ascii "call,"
 4305              	// 	.p2align 2 	
 4306              	CALLC:
 4307 24b8 404700BF 		_NEST
 4308 24bc 6D050000 		_DOLIT 1 
 4308      01000000 
 4309 24c4 E9060000 		_ADR ORR 
 4310 24c8 45200000 		_ADR COMMA  
 4311 24cc 1B040000 		_UNNEST 
 4312              	
 4313              	
 4314              	// 	:	( -- //  string> )
 4315              	// 	Start a new colon definition using next word as its name.
 4316              	
 4317 24d0 9C240000 		.word	_RBRAC
 4318 24d4 01       	_COLON:	.byte  1
 4319 24d5 3A       		.ascii ":"
 4320 24d6 00BF     		.p2align 2 	
 4321              	COLON:
 4322 24d8 404700BF 		_NEST
 4323 24dc F9160000 		_ADR	TOKEN
 4324 24e0 65230000 		_ADR	SNAME
 4325 24e4 21040000 		_ADR	COMPI_NEST 
 4326 24e8 A1240000 		_ADR	RBRAC
 4327 24ec 1B040000 		_UNNEST
 4328              	
 4329              	//    IMMEDIATE   ( -- )
 4330              	// 	Make the last compiled word an immediate word.
 4331              	
 4332 24f0 D4240000 		.word	_COLON
 4333 24f4 09       	_IMMED:	.byte  9
 4334 24f5 494D4D45 		.ascii "IMMEDIATE"
 4334      44494154 
 4334      45
 4335 24fe 00BF     		.p2align 2 	
 4336              	IMMED:
 4337 2500 404700BF 		_NEST
 4338 2504 6D050000 		_DOLIT	IMEDD
 4338      80000000 
 4339 250c 490B0000 		_ADR	LAST
 4340 2510 E9050000 		_ADR	AT
 4341 2514 E9050000 		_ADR	AT
 4342 2518 E9060000 		_ADR	ORR
 4343 251c 490B0000 		_ADR	LAST
 4344 2520 E9050000 		_ADR	AT
 4345 2524 D5050000 		_ADR	STORE
 4346 2528 1B040000 		_UNNEST
 4347              	
 4348              	// **************************************************************************
 4349              	//  Defining words
 4350              	
 4351              	//    CONSTANT	( u -- //  string> )
 4352              	// 	Compile a new constant.
 4353              	
 4354 252c F4240000 		.word	_IMMED
 4355 2530 08       	_CONST:	.byte  8
ARM GAS  stm32eforth-fl.s 			page 85


 4356 2531 434F4E53 		.ascii "CONSTANT"
 4356      54414E54 
 4357 2539 0000BF   		.p2align 2 	
 4358              	CONST:
 4359 253c 404700BF 		_NEST 
 4360 2540 F9160000 		_ADR	TOKEN
 4361 2544 65230000 		_ADR	SNAME
 4362 2548 5D240000 		_ADR	OVERT
 4363 254c 21040000 		_ADR	COMPI_NEST
 4364 2550 6D050000 		_DOLIT	DOCON
 4364      200A0000 
 4365 2558 B9240000 		_ADR	CALLC
 4366 255c 45200000 		_ADR	COMMA
 4367 2560 6D050000 		_DOLIT	UNNEST 
 4367      1A040000 
 4368 2568 B9240000 		_ADR	CALLC  
 4369 256c 1B040000 		_UNNEST
 4370              	
 4371              		.p2align 2 
 4372              	// doDOES> ( -- a )
 4373              	// runtime action of DOES> 
 4374              	// leave parameter field address on stack 
 4375              	DODOES:
 4376 2570 404700BF 		_NEST 
 4377 2574 15060000 		_ADR	RFROM
 4378 2578 F1070000 		_ADR	CELLP 
 4379 257c B1070000 		_ADR	ONEP  
 4380 2580 490B0000 		_ADR LAST 
 4381 2584 E9050000 		_ADR AT
 4382 2588 15170000 		_ADR NAMET 
 4383 258c F1070000 		_ADR CELLP 
 4384 2590 D5050000 		_ADR STORE  
 4385 2594 1B040000 		_UNNEST 
 4386              	
 4387              		.p2align 2
 4388              	//  DOES> ( -- )
 4389              	//  compile time action 
 4390 2598 30250000 		.word _CONST   
 4391 259c C5       	_DOES: .byte IMEDD+COMPO+5 
 4392 259d 444F4553 		.ascii "DOES>"
 4392      3E
 4393 25a2 00BF     		.p2align 2
 4394              	DOES: 
 4395 25a4 404700BF 		_NEST 
 4396 25a8 6D050000 		_DOLIT DODOES 
 4396      70250000 
 4397 25b0 B9240000 		_ADR CALLC 
 4398 25b4 6D050000 		_DOLIT	UNNEST
 4398      1A040000 
 4399 25bc B9240000 		_ADR	CALLC 
 4400 25c0 21040000 		_ADR COMPI_NEST
 4401 25c4 6D050000 		_DOLIT RFROM 
 4401      14060000 
 4402 25cc B9240000 		_ADR	CALLC
 4403 25d0 1B040000 		_UNNEST 
 4404              	
 4405              	
ARM GAS  stm32eforth-fl.s 			page 86


 4406              	
 4407              	//  DEFER@ ( "name" -- a )
 4408              	//  return value of code field of defered function. 
 4409 25d4 9C250000 		.word _DOES 
 4410 25d8 06       	_DEFERAT: .byte 6 
 4411 25d9 44454645 		.ascii "DEFER@"
 4411      5240
 4412 25df 00       		.p2align 2 
 4413              	DEFERAT: 
 4414 25e0 404700BF 		_NEST 
 4415 25e4 05200000 		_ADR TICK
 4416 25e8 F1070000 		_ADR CELLP 
 4417 25ec E9050000 		_ADR AT 
 4418 25f0 C1070000 		_ADR ONEM 
 4419 25f4 1B040000 		_UNNEST 
 4420              	
 4421              	// DEFER! ( "name1" "name2" -- )
 4422              	// assign an action to a defered word 
 4423 25f8 D8250000 		.word _DEFERAT 
 4424 25fc 06       	_DEFERSTO: .byte 6 
 4425 25fd 44454645 		.ascii "DEFER!" 
 4425      5221
 4426 2603 00       		.p2align 2 
 4427              	DEFERSTO:
 4428 2604 404700BF 		_NEST 
 4429 2608 05200000 		_ADR TICK 
 4430 260c B1070000 		_ADR ONEP 
 4431 2610 05200000 		_ADR TICK 
 4432 2614 F1070000 		_ADR CELLP 
 4433 2618 D5050000 		_ADR STORE 
 4434 261c 1B040000 		_UNNEST
 4435              	
 4436              	//  DEFER ( "name" -- )
 4437              	//  create a defered definition
 4438 2620 FC250000 		.word _DEFERSTO  
 4439 2624 05       	_DEFER: .byte 5 
 4440 2625 44454645 		.ascii "DEFER"
 4440      52
 4441 262a 00BF     		.p2align 2
 4442              	DEFER:
 4443 262c 404700BF 		_NEST 
 4444 2630 7D260000 		_ADR CREAT 
 4445 2634 6D050000 		_DOLIT UNNEST 
 4445      1A040000 
 4446 263c B9240000 		_ADR CALLC 
 4447 2640 6D050000 		_DOLIT DEFER_NOP
 4447      64260000 
 4448 2648 B1070000 		_ADR ONEP 
 4449 264c 490B0000 		_ADR LAST 
 4450 2650 E9050000 		_ADR AT 
 4451 2654 15170000 		_ADR NAMET 
 4452 2658 F1070000 		_ADR CELLP 
 4453 265c D5050000 		_ADR STORE 
 4454 2660 1B040000 		_UNNEST 
 4455              	DEFER_NOP:
 4456 2664 404700BF 		_NEST  
 4457 2668 69050000 		_ADR NOP 
ARM GAS  stm32eforth-fl.s 			page 87


 4458 266c 1B040000 		_UNNEST 
 4459              	
 4460              	//    CREATE	( -- //  string> )
 4461              	// 	Compile a new array entry without allocating code space.
 4462              	
 4463 2670 24260000 		.word	_DEFER 
 4464 2674 06       	_CREAT:	.byte  6
 4465 2675 43524541 		.ascii "CREATE"
 4465      5445
 4466 267b 00       		.p2align 2 	
 4467              	CREAT:
 4468 267c 404700BF 		_NEST 
 4469 2680 F9160000 		_ADR	TOKEN
 4470 2684 65230000 		_ADR	SNAME
 4471 2688 5D240000 		_ADR	OVERT
 4472 268c 21040000 		_ADR	COMPI_NEST 
 4473 2690 6D050000 		_DOLIT	DOVAR
 4473      140A0000 
 4474 2698 B9240000 		_ADR	CALLC
 4475 269c 1B040000 		_UNNEST
 4476              	
 4477              	//    VARIABLE	( -- //  string> )
 4478              	// 	Compile a new variable initialized to 0.
 4479              	
 4480 26a0 74260000 		.word	_CREAT
 4481 26a4 08       	_VARIA:	.byte  8
 4482 26a5 56415249 		.ascii "VARIABLE"
 4482      41424C45 
 4483 26ad 0000BF   		.p2align 2 	
 4484              	VARIA:
 4485 26b0 404700BF 		_NEST
 4486 26b4 7D260000 		_ADR	CREAT
 4487 26b8 6D050000 		_DOLIT	0
 4487      00000000 
 4488 26c0 45200000 		_ADR	COMMA
 4489 26c4 6D050000 		_DOLIT UNNEST
 4489      1A040000 
 4490 26cc B9240000 		_ADR	CALLC  
 4491 26d0 1B040000 		_UNNEST
 4492              	
 4493              	// **************************************************************************
 4494              	//  Tools
 4495              	
 4496              	//  TRACE ( f -- )
 4497              	// enable or disable tracing 
 4498 26d4 A4260000 		.word _VARIA 
 4499 26d8 05       	_TRACE: .byte 5
 4500 26d9 54524143 		.ascii "TRACE"
 4500      45
 4501 26de 00BF     		.p2align 2
 4502              	TRACE: 
 4503 26e0 404700BF 		_NEST 
 4504 26e4 610B0000 		_ADR FTRACE 
 4505 26e8 D5050000 		_ADR STORE 
 4506 26ec 1B040000 		_UNNEST 
 4507              	
 4508              	// TR_PRINT ( ca -- )
ARM GAS  stm32eforth-fl.s 			page 88


 4509              	// print name from ca  
 4510 26f0 D8260000 		.word _TRACE 
 4511 26f4 07       	_DBG_PRT: .byte 7 
 4512 26f5 4442475F 		.ascii "DBG_PRT"
 4512      505254
 4513              	DBG_PRT:
 4514 26fc 404700BF 		_NEST 
 4515 2700 2D280000 		_ADR TNAME 
 4516 2704 65080000 		_ADR QDUP 
 4517 2708 A9050000 		_QBRAN 1f 
 4517      1C270000 
 4518 2710 ED090000 		_ADR COUNT 
 4519 2714 4D130000 		_ADR TYPEE 
 4520 2718 81130000 		_ADR CR
 4521              	1:  	
 4522 271c 1B040000 		_UNNEST 
 4523              	
 4524              	//    dm+	 ( a u -- a )
 4525              	// 	Dump u bytes from , leaving a+u on the stack.
 4526              	
 4527              	// 	.word	_TRACE
 4528              	// _DMP	.byte  3
 4529              	// 	.ascii "dm+"
 4530              	// 	.p2align 2 	
 4531              	DMP:
 4532 2720 404700BF 		_NEST
 4533 2724 B5060000 		_ADR	OVER
 4534 2728 6D050000 		_DOLIT	4
 4534      04000000 
 4535 2730 2D140000 		_ADR	UDOTR			// display address
 4536 2734 F9120000 		_ADR	SPACE
 4537 2738 39060000 		_ADR	TOR			// start count down loop
 4538 273c BB050000 		_BRAN	PDUM2			// skip first pass
 4538      5C270000 
 4539              	PDUM1:
 4540 2744 91060000 	  _ADR	DUPP
 4541 2748 09060000 		_ADR	CAT
 4542 274c 6D050000 		_DOLIT	3
 4542      03000000 
 4543 2754 2D140000 		_ADR	UDOTR			// display numeric data
 4544 2758 B1070000 		_ADR	ONEP			// increment address
 4545              	PDUM2:
 4546 275c 91050000 	  _ADR	DONXT
 4547 2760 44270000 		.word	PDUM1	// loop till done
 4548 2764 1B040000 		_UNNEST
 4549              		.p2align 2 
 4550              	//    DUMP	( a u -- )
 4551              	// 	Dump u bytes from a, in a formatted manner.
 4552              	
 4553 2768 A4260000 		.word	_VARIA
 4554 276c 04       	_DUMP:	.byte  4
 4555 276d 44554D50 		.ascii "DUMP"
 4556 2771 0000BF   		.p2align 2 	
 4557              	DUMP:
 4558 2774 404700BF 		_NEST
 4559 2778 850A0000 		_ADR	BASE
 4560 277c E9050000 		_ADR	AT
ARM GAS  stm32eforth-fl.s 			page 89


 4561 2780 39060000 		_ADR	TOR
 4562 2784 F1100000 		_ADR	HEX			// save radix,set hex
 4563 2788 6D050000 		_DOLIT	16
 4563      10000000 
 4564 2790 FD0C0000 		_ADR	SLASH			// change count to lines
 4565 2794 39060000 		_ADR	TOR
 4566 2798 BB050000 		_BRAN	DUMP4			// start count down loop
 4566      C8270000 
 4567              	DUMP1:
 4568 27a0 81130000 	  _ADR	CR
 4569 27a4 6D050000 		_DOLIT	16
 4569      10000000 
 4570 27ac A1080000 		_ADR	DDUP
 4571 27b0 21270000 		_ADR	DMP			// display numeric
 4572 27b4 79080000 		_ADR	ROT
 4573 27b8 79080000 		_ADR	ROT
 4574 27bc F9120000 		_ADR	SPACE
 4575 27c0 F9120000 		_ADR	SPACE
 4576 27c4 4D130000 		_ADR	TYPEE			// display printable characters
 4577              	DUMP4:
 4578 27c8 91050000 	  _DONXT	DUMP1	// loop till done
 4578      A0270000 
 4579              	DUMP3:
 4580 27d0 81060000 		_ADR	DROP
 4581 27d4 15060000 		_ADR	RFROM
 4582 27d8 850A0000 		_ADR	BASE
 4583 27dc D5050000 		_ADR	STORE			// restore radix
 4584 27e0 1B040000 		_UNNEST
 4585              	
 4586              	//    .S	  ( ... -- ... )
 4587              	// 	Display the contents of the data stack.
 4588              	
 4589 27e4 6C270000 		.word	_DUMP
 4590              	_DOTS:
 4591 27e8 02       		.byte  2
 4592 27e9 2E53     		.ascii ".S"
 4593 27eb 00       		.p2align 2 	
 4594              	DOTS:
 4595 27ec 404700BF 		_NEST
 4596 27f0 F9120000 		_ADR	SPACE
 4597 27f4 C50D0000 		_ADR	DEPTH			// stack depth
 4598 27f8 39060000 		_ADR	TOR			// start count down loop
 4599 27fc BB050000 		_BRAN	DOTS2			// skip first pass
 4599      10280000 
 4600              	DOTS1:
 4601 2804 29060000 		_ADR	RAT
 4602 2808 E90D0000 		_ADR	PICK
 4603 280c 85140000 		_ADR	DOT			// index stack, display contents
 4604              	DOTS2:
 4605 2810 91050000 		_DONXT	DOTS1	// loop till done
 4605      04280000 
 4606 2818 F9120000 		_ADR	SPACE
 4607 281c 1B040000 		_UNNEST
 4608              	
 4609              	//    >NAME	( ca -- na | F )
 4610              	// 	Convert code address to a name address.
 4611              	
ARM GAS  stm32eforth-fl.s 			page 90


 4612 2820 E8270000 		.word	_DOTS
 4613 2824 05       	_TNAME:	.byte  5
 4614 2825 3E4E414D 		.ascii ">NAME"
 4614      45
 4615 282a 00BF     		.p2align 2 	
 4616              	TNAME:
 4617 282c 404700BF 		_NEST
 4618 2830 39060000 		_ADR	TOR			//  
 4619 2834 0D0B0000 		_ADR	CNTXT			//  va
 4620 2838 E9050000 		_ADR	AT			//  na
 4621              	TNAM1:
 4622 283c 91060000 		_ADR	DUPP			//  na na
 4623 2840 A9050000 		_QBRAN	TNAM2	//  vocabulary end, no match
 4623      70280000 
 4624 2848 91060000 		_ADR	DUPP			//  na na
 4625 284c 15170000 		_ADR	NAMET			//  na ca
 4626 2850 29060000 		_ADR	RAT			//  na ca code
 4627 2854 FD060000 		_ADR	XORR			//  na f --
 4628 2858 A9050000 		_QBRAN	TNAM2
 4628      70280000 
 4629 2860 01080000 		_ADR	CELLM			//  la 
 4630 2864 E9050000 		_ADR	AT			//  next_na
 4631 2868 BB050000 		_BRAN	TNAM1
 4631      3C280000 
 4632              	TNAM2:	
 4633 2870 15060000 		_ADR	RFROM
 4634 2874 81060000 		_ADR	DROP			//  0|na --
 4635 2878 1B040000 		_UNNEST			// 0
 4636              	
 4637              	//    .ID	 ( na -- )
 4638              	// 	Display the name at address.
 4639              	
 4640 287c 24280000 		.word	_TNAME
 4641 2880 03       	_DOTID:	.byte  3
 4642 2881 2E4944   		.ascii ".ID"
 4643              		.p2align 2 	
 4644              	DOTID:
 4645 2884 404700BF 		_NEST
 4646 2888 65080000 		_ADR	QDUP			// if zero no name
 4647 288c A9050000 		_QBRAN	DOTI1
 4647      AC280000 
 4648 2894 ED090000 		_ADR	COUNT
 4649 2898 6D050000 		_DOLIT	0x1F
 4649      1F000000 
 4650 28a0 D5060000 		_ADR	ANDD			// mask lexicon bits
 4651 28a4 4D130000 		_ADR	TYPEE
 4652 28a8 1B040000 		_UNNEST			// display name string
 4653              	DOTI1:
 4654 28ac E9130000 		_DOTQP	9," {noName}"
 4654      09207B6E 
 4654      6F4E616D 
 4654      657D00BF 
 4655 28bc 1B040000 		_UNNEST
 4656              	
 4657              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 4658              	.if WANT_SEE 
 4659              	//    SEE	 ( -- //  string> )
ARM GAS  stm32eforth-fl.s 			page 91


 4660              	// 	A simple decompiler.
 4661              	
 4662              		.word	_DOTID
 4663              	_SEE:	.byte  3
 4664              		.ascii "SEE"
 4665              		.p2align 2 	
 4666              	SEE:
 4667              		_NEST
 4668              		_ADR	TICK	//  ca --, starting address
 4669              		_ADR	CR	
 4670              		_DOLIT	20
 4671              		_ADR	TOR
 4672              	SEE1:
 4673              		_ADR	CELLP			//  a
 4674              		_ADR	DUPP			//  a a
 4675              		_ADR	DECOMP		//  a
 4676              		_DONXT	SEE1
 4677              		_ADR	DROP
 4678              		_UNNEST
 4679              	
 4680              	// 	DECOMPILE ( a -- )
 4681              	// 	Convert code in a.  Display name of command or as data.
 4682              	
 4683              		.word	_SEE
 4684              	_DECOM:	.byte  9
 4685              		.ascii "DECOMPILE"
 4686              		.p2align 2 
 4687              		
 4688              	DECOMP:	
 4689              		_NEST
 4690              		_ADR	DUPP			//  a a
 4691              	// 	_ADR	TOR			//  a
 4692              		_ADR	AT			//  a code
 4693              		_ADR	DUPP			//  a code code
 4694              		_DOLIT	0xF800D000 //0xF800F800
 4695              		_ADR	ANDD
 4696              		_DOLIT	0xF000D000 //0xF800F000
 4697              		_ADR	EQUAL			//  a code ?
 4698              		_ADR	INVER 
 4699              		_QBRAN	DECOM2	//  not a command
 4700              		//  a valid_code --, extract address and display name
 4701              		MOVW	R0,#0xFFE
 4702              		MOV	R4,R5
 4703              		LSL	R5,R5,#21		//  get bits 22-12
 4704              		ASR	R5,R5,#9		//  with sign extension
 4705              		LSR	R4,R4,#15		//  get bits 11-1
 4706              		AND	R4,R4,R0		//  retain only bits 11-1
 4707              		ORR	R5,R5,R4		//  get bits 22-1
 4708              		NOP
 4709              		_ADR	OVER			//  a offset a
 4710              		_ADR	PLUS			//  a target-4
 4711              		_ADR	CELLP			//  a target
 4712              		_ADR	TNAME			//  a na/0 --, is it a name?
 4713              		_ADR	QDUP			//  name address or zero
 4714              		_QBRAN	DECOM1
 4715              		_ADR	SPACE			//  a na
 4716              		_ADR	DOTID			//  a --, display name
ARM GAS  stm32eforth-fl.s 			page 92


 4717              	// 	_ADR	RFROM			//  a
 4718              		_ADR	DROP
 4719              		_UNNEST
 4720              	DECOM1:	// _ADR	RFROM		//  a
 4721              		_ADR	AT			//  data
 4722              		_ADR	UDOT			//  display data
 4723              		_UNNEST
 4724              	DECOM2:
 4725              		_ADR	UDOT
 4726              	// 	_ADR	RFROM
 4727              		_ADR	DROP
 4728              		_UNNEST
 4729              	
 4730              	//    WORDS	( -- )
 4731              	// 	Display the names in the context vocabulary.
 4732              	
 4733              		.word	_DECOM
 4734              	.else 
 4735 28c0 80280000 		.word _DOTID 
 4736              	.endif 
 4737 28c4 05       	_WORDS:	.byte  5
 4738 28c5 574F5244 		.ascii "WORDS"
 4738      53
 4739 28ca 00BF     		.p2align 2 	
 4740              	WORDS:
 4741 28cc 404700BF 		_NEST
 4742 28d0 81130000 		_ADR	CR
 4743 28d4 0D0B0000 		_ADR	CNTXT
 4744 28d8 E9050000 		_ADR	AT			// only in context
 4745              	WORS1:
 4746 28dc 65080000 		_ADR	QDUP			// ?at end of list
 4747 28e0 A9050000 		_QBRAN	WORS2
 4747      04290000 
 4748 28e8 91060000 		_ADR	DUPP
 4749 28ec F9120000 		_ADR	SPACE
 4750 28f0 85280000 		_ADR	DOTID			// display a name
 4751 28f4 01080000 		_ADR	CELLM
 4752 28f8 E9050000 		_ADR	AT
 4753 28fc BB050000 		_BRAN	WORS1
 4753      DC280000 
 4754              	WORS2:
 4755 2904 1B040000 		_UNNEST
 4756              	
 4757              	// **************************************************************************
 4758              	//  cold start
 4759              	
 4760              	//    VER	 ( -- n )
 4761              	// 	Return the version number of this implementation.
 4762              	
 4763              	// 	.word	_WORDS
 4764              	// _VERSN	.byte  3
 4765              	// 	.ascii "VER"
 4766              	// 	.p2align 2 	
 4767              	VERSN:
 4768 2908 404700BF 		_NEST
 4769 290c 6D050000 		_DOLIT	VER*256+EXT
 4769      00010000 
ARM GAS  stm32eforth-fl.s 			page 93


 4770 2914 1B040000 		_UNNEST
 4771              	
 4772              	//    hi	  ( -- )
 4773              	// 	Display the sign-on message of eForth.
 4774              	
 4775 2918 C4280000 		.word	_WORDS
 4776 291c 02       	_HI:	.byte  2
 4777 291d 4849     		.ascii "HI"
 4778 291f 00       		.p2align 2 	
 4779              	HI:
 4780 2920 404700BF 		_NEST
 4781 2924 81130000 		_ADR	CR	// initialize I/O
 4782 2928 E9130000 		_DOTQP	26, "blue pill stm32eForth-it v" 
 4782      1A626C75 
 4782      65207069 
 4782      6C6C2073 
 4782      746D3332 
 4783 2948 850A0000 		_ADR	BASE
 4784 294c E9050000 		_ADR	AT
 4785 2950 F1100000 		_ADR	HEX	// save radix
 4786 2954 09290000 		_ADR	VERSN
 4787 2958 E10F0000 		_ADR	BDIGS
 4788 295c 2D100000 		_ADR	DIG
 4789 2960 2D100000 		_ADR	DIG
 4790 2964 6D050000 		_DOLIT	'.'
 4790      2E000000 
 4791 296c 01100000 		_ADR	HOLD
 4792 2970 4D100000 		_ADR	DIGS
 4793 2974 A1100000 		_ADR	EDIGS
 4794 2978 4D130000 		_ADR	TYPEE	// format version number
 4795 297c 850A0000 		_ADR	BASE
 4796 2980 D5050000 		_ADR	STORE
 4797 2984 81130000 		_ADR	CR
 4798 2988 1B040000 		_UNNEST			// restore radix
 4799              	
 4800              	//    COLD	( -- )
 4801              	// 	The high level cold start sequence.
 4802              	
 4803 298c 1C290000 		.word	_HI
 4804 2990 04       	LASTN:	.byte  4
 4805 2991 434F4C44 		.ascii "COLD"
 4806 2995 000000   		.p2align 2,0	
 4807              	COLD:
 4808              	//  Initiate Forth registers
 4809 2998 4FF00003 		mov r3,#UPP&0xffff
 4810 299c C2F20003 		movt r3,#UPP>>16 
 4811 29a0 03F59F42 		add R2,R3,#RPP&0xffff	// Forth return stack
 4812 29a4 03F59D41 		add R1,R3,#SPP&0xffff // Forth data stack
 4813 29a8 85EA0505 		eor R5,R5,R5			//  tos=0
 4814 29ac 1D66     		str r5,[r3,#RX_HEAD_OFS]
 4815 29ae 5D66     		str r5,[r3,#RX_TAIL_OFS]
 4816 29b0 1648     		ldr R0,=COLD1 
 4817 29b2 FDF72FBD 		_NEXT
 4818              	COLD1:
 4819 29b6 6D050000 		_DOLIT  0 
 4819      00000000 
 4820 29be 01000000 		_ADR ULED // turn off user LED 
ARM GAS  stm32eforth-fl.s 			page 94


 4821 29c2 6D050000 		_DOLIT	UZERO
 4821      00020000 
 4822 29ca 6D050000 		_DOLIT	UPP
 4822      00000020 
 4823 29d2 6D050000 		_DOLIT	ULAST-UZERO
 4823      54000000 
 4824 29da B10E0000 		_ADR	MOVE 			// initialize user area
 4825 29de 991B0000 		_ADR	PRESE			// initialize stack and TIB
 4826 29e2 311D0000 		_ADR IMGQ		// if there is a saved image load it  
 4827 29e6 A9050000 		_QBRAN 1f
 4827      F2290000 
 4828 29ee 611D0000 		_ADR	LOAD_IMG 
 4829              	1:
 4830 29f2 710A0000 		_ADR	TBOOT
 4831 29f6 610E0000 		_ADR	ATEXE			// application boot
 4832 29fa 5D240000 		_ADR	OVERT
 4833 29fe BB050000 		_BRAN	QUIT			// start interpretation
 4833      B81B0000 
 4834              	COLD2:
 4835 2a06 00BF     		.p2align 2 	
 4836              	CTOP:
 4837 2a08 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4838              	
 4839              		.section .text.user, "a", %progbits 
 4840              		.p2align 10 
 4841              	USER_SPACE: // save user image here.  
 4842 0000 FFFFFFFF 		.word 0XFFFFFFFF
 4843              	
 4844              	  .end 
ARM GAS  stm32eforth-fl.s 			page 95


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  stm32eforth-fl.s 			page 96


board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
board/blue-pill/stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
board/blue-pill/stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
board/blue-pill/stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
board/blue-pill/stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
board/blue-pill/stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
board/blue-pill/stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
board/blue-pill/stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
board/blue-pill/stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
board/blue-pill/stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
board/blue-pill/stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
board/blue-pill/stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
board/blue-pill/stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
board/blue-pill/stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
board/blue-pill/stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
board/blue-pill/stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
board/blue-pill/stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
board/blue-pill/stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
board/blue-pill/stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
board/blue-pill/stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
board/blue-pill/stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
board/blue-pill/stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
board/blue-pill/stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
board/blue-pill/stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
board/blue-pill/stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
board/blue-pill/stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
board/blue-pill/stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
board/blue-pill/stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
board/blue-pill/stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
board/blue-pill/stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
board/blue-pill/stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
board/blue-pill/stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
board/blue-pill/stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
board/blue-pill/stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
    stm32eforth-fl.s:91     *ABS*:0000000040011000 LED_GPIO
    stm32eforth-fl.s:92     *ABS*:000000000000000d LED_PIN
    stm32eforth-fl.s:93     *ABS*:0000000040013800 UART
    stm32eforth-fl.s:96     *ABS*:0000000020004e80 SPP
    stm32eforth-fl.s:97     *ABS*:0000000020004e80 TIBB
    stm32eforth-fl.s:98     *ABS*:0000000020004f80 RPP
    stm32eforth-fl.s:99     *ABS*:0000000020000000 UPP
    stm32eforth-fl.s:100    *ABS*:0000000020000100 DTOP
    stm32eforth-fl.s:101    *ABS*:0000000020004e00 DEND
    stm32eforth-fl.s:102    *ABS*:0000000020000000 RAMOFFSET
    stm32eforth-fl.s:103    *ABS*:0000000020005000 RAMEND
    stm32eforth-fl.s:108    *ABS*:0000000000000004 SEED_OFS
    stm32eforth-fl.s:109    *ABS*:0000000000000008 TICKS_OFS
ARM GAS  stm32eforth-fl.s 			page 97


    stm32eforth-fl.s:110    *ABS*:000000000000000c TIMER_OFS
    stm32eforth-fl.s:111    *ABS*:0000000000000010 FTRACE_OFS
    stm32eforth-fl.s:112    *ABS*:0000000000000014 IMG_SIGN_OFS
    stm32eforth-fl.s:113    *ABS*:0000000000000018 BOOT_OFS
    stm32eforth-fl.s:114    *ABS*:000000000000001c BASE_OFS
    stm32eforth-fl.s:115    *ABS*:0000000000000020 TMP_OFS
    stm32eforth-fl.s:116    *ABS*:0000000000000024 SPAN_OFS
    stm32eforth-fl.s:117    *ABS*:0000000000000028 TOIN_OFS
    stm32eforth-fl.s:118    *ABS*:000000000000002c NTIB_OFS
    stm32eforth-fl.s:119    *ABS*:0000000000000030 TIB_OFS
    stm32eforth-fl.s:120    *ABS*:0000000000000034 EVAL_OFS
    stm32eforth-fl.s:121    *ABS*:0000000000000038 HLD_OFS
    stm32eforth-fl.s:122    *ABS*:000000000000003c CTXT_OFS
    stm32eforth-fl.s:123    *ABS*:0000000000000040 FORTH_CTOP_OFS
    stm32eforth-fl.s:124    *ABS*:0000000000000044 RAM_CTOP_OFS
    stm32eforth-fl.s:125    *ABS*:0000000000000048 LASTN_OFS
    stm32eforth-fl.s:126    *ABS*:000000000000004c VARS_END_OFS
    stm32eforth-fl.s:128    *ABS*:0000000000000010 RX_QUEUE_SIZE
    stm32eforth-fl.s:129    *ABS*:0000000000000050 RX_QUEUE_OFS
    stm32eforth-fl.s:130    *ABS*:0000000000000060 RX_HEAD_OFS
    stm32eforth-fl.s:131    *ABS*:0000000000000064 RX_TAIL_OFS
    stm32eforth-fl.s:218    .isr_vector:0000000000000000 isr_vectors
    stm32eforth-fl.s:526    .text:0000000000000188 reset_handler
    stm32eforth-fl.s:334    .text:0000000000000000 default_handler
    stm32eforth-fl.s:504    .text:000000000000016c systick_handler
    stm32eforth-fl.s:467    .text:0000000000000114 uart_rx_handler
    stm32eforth-fl.s:300    .isr_vector:0000000000000130 $d
    stm32eforth-fl.s:302    .isr_vector:0000000000000200 UZERO
    stm32eforth-fl.s:4779   .text:0000000000002920 HI
                            *ABS*:000000000000000a BASEE
    stm32eforth-fl.s:3368   .text:0000000000001a70 INTER
    stm32eforth-fl.s:4804   .text:0000000000002990 LASTN
    stm32eforth-fl.s:4836   .text:0000000000002a08 CTOP
    stm32eforth-fl.s:323    .isr_vector:0000000000000254 ULAST
    stm32eforth-fl.s:332    .text:0000000000000000 $t
    stm32eforth-fl.s:362    .text:0000000000000050 word_that_crashed
    stm32eforth-fl.s:710    .text:0000000000000414 INEXT
    stm32eforth-fl.s:356    .text:0000000000000038 exception_msg
    stm32eforth-fl.s:444    .text:00000000000000e0 uart_puts
    stm32eforth-fl.s:378    .text:000000000000007c reboot
    stm32eforth-fl.s:357    .text:0000000000000038 $d
    stm32eforth-fl.s:363    .text:0000000000000050 $d
    stm32eforth-fl.s:2704   .text:0000000000001380 CR
    stm32eforth-fl.s:4616   .text:000000000000282c TNAME
    stm32eforth-fl.s:1403   .text:0000000000000864 QDUP
    stm32eforth-fl.s:925    .text:00000000000005a8 QBRAN
    stm32eforth-fl.s:1651   .text:00000000000009ec COUNT
    stm32eforth-fl.s:2684   .text:000000000000134c TYPEE
    stm32eforth-fl.s:942    .text:00000000000005ba BRAN
    stm32eforth-fl.s:386    .text:000000000000008c scb_adr
    stm32eforth-fl.s:379    .text:000000000000007c $t
    stm32eforth-fl.s:387    .text:000000000000008c $d
    stm32eforth-fl.s:398    .text:0000000000000090 uart_init
    stm32eforth-fl.s:400    .text:0000000000000090 $t
    stm32eforth-fl.s:429    .text:00000000000000d2 uart_tx
    stm32eforth-fl.s:488    .text:000000000000014e user_reboot
    stm32eforth-fl.s:492    .text:0000000000000158 user_reboot_msg
ARM GAS  stm32eforth-fl.s 			page 98


    stm32eforth-fl.s:493    .text:0000000000000158 $d
    stm32eforth-fl.s:496    .text:000000000000016a $t
    stm32eforth-fl.s:514    .text:0000000000000186 systick_exit
    stm32eforth-fl.s:620    .text:0000000000000248 remap
    stm32eforth-fl.s:539    .text:00000000000001a8 init_devices
    stm32eforth-fl.s:3490   .text:0000000000001bd8 unlock
    stm32eforth-fl.s:534    .text:00000000000001a4 nest_adr
    stm32eforth-fl.s:4807   .text:0000000000002998 COLD
    stm32eforth-fl.s:535    .text:00000000000001a4 $d
    stm32eforth-fl.s:706    .text:000000000000040c NEST
    stm32eforth-fl.s:538    .text:00000000000001a8 $t
    stm32eforth-fl.s:554    .text:00000000000001c6 wait_hserdy
    stm32eforth-fl.s:574    .text:00000000000001e0 wait_pllrdy
    stm32eforth-fl.s:587    .text:0000000000000200 wait_sws
    stm32eforth-fl.s:639    .text:0000000000000278 remap_dest
    stm32eforth-fl.s:637    .text:0000000000000274 remap_src
    stm32eforth-fl.s:638    .text:0000000000000274 $d
    stm32eforth-fl.s:645    *ABS*:0000000000000001 VER
    stm32eforth-fl.s:646    *ABS*:0000000000000000 EXT
    stm32eforth-fl.s:650    *ABS*:0000000000000040 COMPO
    stm32eforth-fl.s:651    *ABS*:0000000000000080 IMEDD
    stm32eforth-fl.s:652    *ABS*:00000000ffffff1f MASKK
    stm32eforth-fl.s:654    *ABS*:0000000000000004 CELLL
    stm32eforth-fl.s:656    *ABS*:0000000000000008 VOCSS
    stm32eforth-fl.s:658    *ABS*:0000000000000008 BKSPP
    stm32eforth-fl.s:659    *ABS*:000000000000000a LF
    stm32eforth-fl.s:660    *ABS*:000000000000000d CRR
    stm32eforth-fl.s:661    *ABS*:000000000000001b ERR
    stm32eforth-fl.s:662    *ABS*:0000000000000027 TIC
    stm32eforth-fl.s:683    .text:000000000000027c $t
    stm32eforth-fl.s:695    .text:0000000000000400 TPUSH
    stm32eforth-fl.s:700    .text:0000000000000406 TPOP
    stm32eforth-fl.s:722    .text:000000000000041a UNNEST
    stm32eforth-fl.s:734    .text:0000000000000420 COMPI_NEST
    stm32eforth-fl.s:749    .text:000000000000043e $d
    stm32eforth-fl.s:750    .text:0000000000000442 _RAND
    stm32eforth-fl.s:753    .text:000000000000044c RAND
    stm32eforth-fl.s:755    .text:0000000000000450 $d
    stm32eforth-fl.s:1711   .text:0000000000000a34 SEED
    stm32eforth-fl.s:976    .text:00000000000005e8 AT
    stm32eforth-fl.s:1093   .text:0000000000000690 DUPP
    stm32eforth-fl.s:877    .text:000000000000056c DOLIT
    stm32eforth-fl.s:1205   .text:0000000000000744 LSHIFT
    stm32eforth-fl.s:1166   .text:00000000000006fc XORR
    stm32eforth-fl.s:1193   .text:000000000000072c RSHIFT
    stm32eforth-fl.s:963    .text:00000000000005d4 STORE
    stm32eforth-fl.s:1493   .text:00000000000008f4 ABSS
    stm32eforth-fl.s:1104   .text:00000000000006a0 SWAP
    stm32eforth-fl.s:2059   .text:0000000000000ce4 MODD
    stm32eforth-fl.s:781    .text:00000000000004b4 _PAUSE
    stm32eforth-fl.s:783    .text:00000000000004ba $t
    stm32eforth-fl.s:784    .text:00000000000004bc PAUSE
    stm32eforth-fl.s:786    .text:00000000000004c0 $d
    stm32eforth-fl.s:1733   .text:0000000000000a5c TIMER
    stm32eforth-fl.s:788    .text:00000000000004c8 PAUSE_LOOP
    stm32eforth-fl.s:793    .text:00000000000004e0 PAUSE_EXIT
    stm32eforth-fl.s:799    .text:00000000000004e8 _ULED
ARM GAS  stm32eforth-fl.s 			page 99


    stm32eforth-fl.s:803    .text:00000000000004f0 ULED
    stm32eforth-fl.s:812    .text:0000000000000508 ULED_OFF
    stm32eforth-fl.s:818    .text:000000000000050c $d
    stm32eforth-fl.s:819    .text:0000000000000510 _QRX
    stm32eforth-fl.s:822    .text:0000000000000518 QKEY
    stm32eforth-fl.s:823    .text:0000000000000518 QRX
    stm32eforth-fl.s:842    .text:0000000000000542 $d
    stm32eforth-fl.s:843    .text:0000000000000546 _TXSTO
    stm32eforth-fl.s:846    .text:000000000000054c TXSTO
    stm32eforth-fl.s:847    .text:000000000000054c EMIT
    stm32eforth-fl.s:848    .text:000000000000054c TECHO
    stm32eforth-fl.s:862    .text:000000000000055e $d
    stm32eforth-fl.s:863    .text:0000000000000562 _NOP
    stm32eforth-fl.s:865    .text:0000000000000566 $t
    stm32eforth-fl.s:866    .text:0000000000000568 NOP
    stm32eforth-fl.s:885    .text:0000000000000576 $d
    stm32eforth-fl.s:886    .text:000000000000057a _EXECU
    stm32eforth-fl.s:888    .text:0000000000000582 $t
    stm32eforth-fl.s:889    .text:0000000000000584 EXECU
    stm32eforth-fl.s:904    .text:0000000000000590 DONXT
    stm32eforth-fl.s:911    .text:000000000000059e NEXT1
    stm32eforth-fl.s:931    .text:00000000000005b4 QBRAN1
    stm32eforth-fl.s:949    .text:00000000000005be $d
    stm32eforth-fl.s:950    .text:00000000000005c2 _EXIT
    stm32eforth-fl.s:953    .text:00000000000005c8 EXIT
    stm32eforth-fl.s:954    .text:00000000000005c8 $d
    stm32eforth-fl.s:960    .text:00000000000005d0 _STORE
    stm32eforth-fl.s:962    .text:00000000000005d2 $t
    stm32eforth-fl.s:972    .text:00000000000005e0 $d
    stm32eforth-fl.s:973    .text:00000000000005e4 _AT
    stm32eforth-fl.s:975    .text:00000000000005e6 $t
    stm32eforth-fl.s:983    .text:00000000000005ec $d
    stm32eforth-fl.s:984    .text:00000000000005f0 _CSTOR
    stm32eforth-fl.s:987    .text:00000000000005f4 CSTOR
    stm32eforth-fl.s:996    .text:0000000000000600 $d
    stm32eforth-fl.s:997    .text:0000000000000604 _CAT
    stm32eforth-fl.s:1000   .text:0000000000000608 CAT
    stm32eforth-fl.s:1007   .text:000000000000060c $d
    stm32eforth-fl.s:1008   .text:0000000000000610 _RFROM
    stm32eforth-fl.s:1011   .text:0000000000000614 RFROM
    stm32eforth-fl.s:1019   .text:000000000000061e $d
    stm32eforth-fl.s:1020   .text:0000000000000622 _RAT
    stm32eforth-fl.s:1023   .text:0000000000000628 RAT
    stm32eforth-fl.s:1031   .text:0000000000000630 $d
    stm32eforth-fl.s:1032   .text:0000000000000634 _TOR
    stm32eforth-fl.s:1035   .text:0000000000000638 TOR
    stm32eforth-fl.s:1042   .text:0000000000000642 $d
    stm32eforth-fl.s:1043   .text:0000000000000646 _RPSTOR
    stm32eforth-fl.s:1045   .text:000000000000064a $t
    stm32eforth-fl.s:1046   .text:000000000000064c RPSTOR
    stm32eforth-fl.s:1054   .text:0000000000000654 $d
    stm32eforth-fl.s:1055   .text:0000000000000658 _SPSTOR
    stm32eforth-fl.s:1057   .text:000000000000065c $t
    stm32eforth-fl.s:1058   .text:000000000000065c SPSTOR
    stm32eforth-fl.s:1066   .text:0000000000000664 $d
    stm32eforth-fl.s:1067   .text:0000000000000668 _SPAT
    stm32eforth-fl.s:1069   .text:000000000000066c $t
ARM GAS  stm32eforth-fl.s 			page 100


    stm32eforth-fl.s:1070   .text:000000000000066c SPAT
    stm32eforth-fl.s:1078   .text:0000000000000674 $d
    stm32eforth-fl.s:1079   .text:0000000000000678 _DROP
    stm32eforth-fl.s:1082   .text:0000000000000680 DROP
    stm32eforth-fl.s:1089   .text:0000000000000686 $d
    stm32eforth-fl.s:1090   .text:000000000000068a _DUPP
    stm32eforth-fl.s:1092   .text:000000000000068e $t
    stm32eforth-fl.s:1100   .text:0000000000000696 $d
    stm32eforth-fl.s:1101   .text:000000000000069a _SWAP
    stm32eforth-fl.s:1113   .text:00000000000006a8 $d
    stm32eforth-fl.s:1114   .text:00000000000006ac _OVER
    stm32eforth-fl.s:1117   .text:00000000000006b4 OVER
    stm32eforth-fl.s:1125   .text:00000000000006bc $d
    stm32eforth-fl.s:1126   .text:00000000000006c0 _ZLESS
    stm32eforth-fl.s:1129   .text:00000000000006c4 ZLESS
    stm32eforth-fl.s:1138   .text:00000000000006ca $d
    stm32eforth-fl.s:1139   .text:00000000000006ce _ANDD
    stm32eforth-fl.s:1141   .text:00000000000006d2 $t
    stm32eforth-fl.s:1142   .text:00000000000006d4 ANDD
    stm32eforth-fl.s:1150   .text:00000000000006de $d
    stm32eforth-fl.s:1151   .text:00000000000006e2 _ORR
    stm32eforth-fl.s:1154   .text:00000000000006e8 ORR
    stm32eforth-fl.s:1162   .text:00000000000006f2 $d
    stm32eforth-fl.s:1163   .text:00000000000006f6 _XORR
    stm32eforth-fl.s:1165   .text:00000000000006fa $t
    stm32eforth-fl.s:1174   .text:0000000000000706 $d
    stm32eforth-fl.s:1175   .text:000000000000070a _UPLUS
    stm32eforth-fl.s:1177   .text:000000000000070e $t
    stm32eforth-fl.s:1178   .text:0000000000000710 UPLUS
    stm32eforth-fl.s:1189   .text:0000000000000720 $d
    stm32eforth-fl.s:1190   .text:0000000000000724 _RSHIFT
    stm32eforth-fl.s:1201   .text:0000000000000736 $d
    stm32eforth-fl.s:1202   .text:000000000000073a _LSHIFT
    stm32eforth-fl.s:1213   .text:000000000000074e $d
    stm32eforth-fl.s:1214   .text:0000000000000752 _PLUS
    stm32eforth-fl.s:1216   .text:0000000000000754 $t
    stm32eforth-fl.s:1217   .text:0000000000000754 PLUS
    stm32eforth-fl.s:1225   .text:000000000000075c $d
    stm32eforth-fl.s:1226   .text:0000000000000760 _SUBB
    stm32eforth-fl.s:1228   .text:0000000000000762 $t
    stm32eforth-fl.s:1229   .text:0000000000000764 SUBB
    stm32eforth-fl.s:1237   .text:000000000000076e $d
    stm32eforth-fl.s:1238   .text:0000000000000772 _STAR
    stm32eforth-fl.s:1240   .text:0000000000000774 $t
    stm32eforth-fl.s:1241   .text:0000000000000774 STAR
    stm32eforth-fl.s:1249   .text:000000000000077e $d
    stm32eforth-fl.s:1250   .text:0000000000000782 _UMSTA
    stm32eforth-fl.s:1252   .text:0000000000000786 $t
    stm32eforth-fl.s:1253   .text:0000000000000788 UMSTA
    stm32eforth-fl.s:1263   .text:0000000000000794 $d
    stm32eforth-fl.s:1264   .text:0000000000000798 _MSTAR
    stm32eforth-fl.s:1267   .text:000000000000079c MSTAR
    stm32eforth-fl.s:1277   .text:00000000000007a8 $d
    stm32eforth-fl.s:1278   .text:00000000000007ac _ONEP
    stm32eforth-fl.s:1281   .text:00000000000007b0 ONEP
    stm32eforth-fl.s:1288   .text:00000000000007b6 $d
    stm32eforth-fl.s:1289   .text:00000000000007ba _ONEM
ARM GAS  stm32eforth-fl.s 			page 101


    stm32eforth-fl.s:1292   .text:00000000000007c0 ONEM
    stm32eforth-fl.s:1299   .text:00000000000007c6 $d
    stm32eforth-fl.s:1300   .text:00000000000007ca _TWOP
    stm32eforth-fl.s:1303   .text:00000000000007d0 TWOP
    stm32eforth-fl.s:1310   .text:00000000000007d6 $d
    stm32eforth-fl.s:1311   .text:00000000000007da _TWOM
    stm32eforth-fl.s:1314   .text:00000000000007e0 TWOM
    stm32eforth-fl.s:1321   .text:00000000000007e6 $d
    stm32eforth-fl.s:1322   .text:00000000000007ea _CELLP
    stm32eforth-fl.s:1324   .text:00000000000007f0 $t
    stm32eforth-fl.s:1325   .text:00000000000007f0 CELLP
    stm32eforth-fl.s:1332   .text:00000000000007f6 $d
    stm32eforth-fl.s:1333   .text:00000000000007fa _CELLM
    stm32eforth-fl.s:1335   .text:0000000000000800 $t
    stm32eforth-fl.s:1336   .text:0000000000000800 CELLM
    stm32eforth-fl.s:1343   .text:0000000000000806 $d
    stm32eforth-fl.s:1344   .text:000000000000080a _BLANK
    stm32eforth-fl.s:1347   .text:0000000000000810 BLANK
    stm32eforth-fl.s:1355   .text:000000000000081a $d
    stm32eforth-fl.s:1356   .text:000000000000081e _CELLS
    stm32eforth-fl.s:1358   .text:0000000000000824 $t
    stm32eforth-fl.s:1359   .text:0000000000000824 CELLS
    stm32eforth-fl.s:1366   .text:000000000000082a $d
    stm32eforth-fl.s:1367   .text:000000000000082e _CELLSL
    stm32eforth-fl.s:1369   .text:0000000000000834 $t
    stm32eforth-fl.s:1370   .text:0000000000000834 CELLSL
    stm32eforth-fl.s:1377   .text:000000000000083a $d
    stm32eforth-fl.s:1378   .text:000000000000083e _TWOST
    stm32eforth-fl.s:1381   .text:0000000000000844 TWOST
    stm32eforth-fl.s:1388   .text:000000000000084a $d
    stm32eforth-fl.s:1389   .text:000000000000084e _TWOSL
    stm32eforth-fl.s:1392   .text:0000000000000854 TWOSL
    stm32eforth-fl.s:1399   .text:000000000000085a $d
    stm32eforth-fl.s:1400   .text:000000000000085e _QDUP
    stm32eforth-fl.s:1412   .text:000000000000086e $d
    stm32eforth-fl.s:1413   .text:0000000000000872 _ROT
    stm32eforth-fl.s:1415   .text:0000000000000876 $t
    stm32eforth-fl.s:1416   .text:0000000000000878 ROT
    stm32eforth-fl.s:1426   .text:0000000000000882 $d
    stm32eforth-fl.s:1427   .text:0000000000000886 _DDROP
    stm32eforth-fl.s:1429   .text:000000000000088c $t
    stm32eforth-fl.s:1430   .text:000000000000088c DDROP
    stm32eforth-fl.s:1438   .text:0000000000000896 $d
    stm32eforth-fl.s:1439   .text:000000000000089a _DDUP
    stm32eforth-fl.s:1442   .text:00000000000008a0 DDUP
    stm32eforth-fl.s:1451   .text:00000000000008ac $d
    stm32eforth-fl.s:1452   .text:00000000000008b0 _DPLUS
    stm32eforth-fl.s:1455   .text:00000000000008b4 DPLUS
    stm32eforth-fl.s:1467   .text:00000000000008c8 $d
    stm32eforth-fl.s:1468   .text:00000000000008cc _INVER
    stm32eforth-fl.s:1470   .text:00000000000008d0 $t
    stm32eforth-fl.s:1471   .text:00000000000008d0 INVER
    stm32eforth-fl.s:1478   .text:00000000000008d6 $d
    stm32eforth-fl.s:1479   .text:00000000000008da _NEGAT
    stm32eforth-fl.s:1482   .text:00000000000008e4 NEGAT
    stm32eforth-fl.s:1489   .text:00000000000008ea $d
    stm32eforth-fl.s:1490   .text:00000000000008ee _ABSS
ARM GAS  stm32eforth-fl.s 			page 102


    stm32eforth-fl.s:1492   .text:00000000000008f2 $t
    stm32eforth-fl.s:1502   .text:00000000000008fe $d
    stm32eforth-fl.s:1503   .text:0000000000000902 _ZEQUAL
    stm32eforth-fl.s:1506   .text:0000000000000908 ZEQUAL
    stm32eforth-fl.s:1516   .text:0000000000000916 $d
    stm32eforth-fl.s:1517   .text:000000000000091a _EQUAL
    stm32eforth-fl.s:1519   .text:000000000000091c $t
    stm32eforth-fl.s:1520   .text:000000000000091c EQUAL
    stm32eforth-fl.s:1531   .text:000000000000092c $d
    stm32eforth-fl.s:1532   .text:0000000000000930 _ULESS
    stm32eforth-fl.s:1535   .text:0000000000000934 ULESS
    stm32eforth-fl.s:1546   .text:0000000000000944 $d
    stm32eforth-fl.s:1547   .text:0000000000000948 _LESS
    stm32eforth-fl.s:1549   .text:000000000000094a $t
    stm32eforth-fl.s:1550   .text:000000000000094c LESS
    stm32eforth-fl.s:1561   .text:000000000000095c $d
    stm32eforth-fl.s:1562   .text:0000000000000960 _GREAT
    stm32eforth-fl.s:1564   .text:0000000000000962 $t
    stm32eforth-fl.s:1565   .text:0000000000000964 GREAT
    stm32eforth-fl.s:1576   .text:0000000000000974 $d
    stm32eforth-fl.s:1577   .text:0000000000000978 _MAX
    stm32eforth-fl.s:1579   .text:000000000000097c $t
    stm32eforth-fl.s:1580   .text:000000000000097c MAX
    stm32eforth-fl.s:1590   .text:0000000000000988 $d
    stm32eforth-fl.s:1591   .text:000000000000098c _MIN
    stm32eforth-fl.s:1593   .text:0000000000000990 $t
    stm32eforth-fl.s:1594   .text:0000000000000990 MIN
    stm32eforth-fl.s:1604   .text:000000000000099c $d
    stm32eforth-fl.s:1605   .text:00000000000009a0 _PSTOR
    stm32eforth-fl.s:1608   .text:00000000000009a4 PSTOR
    stm32eforth-fl.s:1619   .text:00000000000009b4 $d
    stm32eforth-fl.s:1620   .text:00000000000009b8 _DSTOR
    stm32eforth-fl.s:1623   .text:00000000000009bc DSTOR
    stm32eforth-fl.s:1634   .text:00000000000009d0 $d
    stm32eforth-fl.s:1635   .text:00000000000009d4 _DAT
    stm32eforth-fl.s:1638   .text:00000000000009d8 DAT
    stm32eforth-fl.s:1647   .text:00000000000009e2 $d
    stm32eforth-fl.s:1648   .text:00000000000009e6 _COUNT
    stm32eforth-fl.s:1650   .text:00000000000009ec $t
    stm32eforth-fl.s:1660   .text:00000000000009f8 $d
    stm32eforth-fl.s:1661   .text:00000000000009fc _DNEGA
    stm32eforth-fl.s:1663   .text:0000000000000a04 $t
    stm32eforth-fl.s:1664   .text:0000000000000a04 DNEGA
    stm32eforth-fl.s:1682   .text:0000000000000a14 DOVAR
    stm32eforth-fl.s:1695   .text:0000000000000a20 DOCON
    stm32eforth-fl.s:1707   .text:0000000000000a2a $d
    stm32eforth-fl.s:1708   .text:0000000000000a2e _SEED
    stm32eforth-fl.s:1718   .text:0000000000000a3e $d
    stm32eforth-fl.s:1719   .text:0000000000000a42 _MSEC
    stm32eforth-fl.s:1722   .text:0000000000000a48 MSEC
    stm32eforth-fl.s:1729   .text:0000000000000a52 $d
    stm32eforth-fl.s:1730   .text:0000000000000a56 _TIMER
    stm32eforth-fl.s:1732   .text:0000000000000a5c $t
    stm32eforth-fl.s:1741   .text:0000000000000a66 $d
    stm32eforth-fl.s:1742   .text:0000000000000a6a _TBOOT
    stm32eforth-fl.s:1744   .text:0000000000000a70 $t
    stm32eforth-fl.s:1745   .text:0000000000000a70 TBOOT
ARM GAS  stm32eforth-fl.s 			page 103


    stm32eforth-fl.s:1753   .text:0000000000000a7a $d
    stm32eforth-fl.s:1754   .text:0000000000000a7e _BASE
    stm32eforth-fl.s:1757   .text:0000000000000a84 BASE
    stm32eforth-fl.s:1769   .text:0000000000000a8e TEMP
    stm32eforth-fl.s:1777   .text:0000000000000a98 $d
    stm32eforth-fl.s:1778   .text:0000000000000a9c _SPAN
    stm32eforth-fl.s:1781   .text:0000000000000aa4 SPAN
    stm32eforth-fl.s:1789   .text:0000000000000aae $d
    stm32eforth-fl.s:1790   .text:0000000000000ab2 _INN
    stm32eforth-fl.s:1792   .text:0000000000000ab6 $t
    stm32eforth-fl.s:1793   .text:0000000000000ab8 INN
    stm32eforth-fl.s:1801   .text:0000000000000ac2 $d
    stm32eforth-fl.s:1802   .text:0000000000000ac6 _NTIB
    stm32eforth-fl.s:1805   .text:0000000000000acc NTIB
    stm32eforth-fl.s:1813   .text:0000000000000ad6 $d
    stm32eforth-fl.s:1814   .text:0000000000000ada _TEVAL
    stm32eforth-fl.s:1816   .text:0000000000000ae0 $t
    stm32eforth-fl.s:1817   .text:0000000000000ae0 TEVAL
    stm32eforth-fl.s:1825   .text:0000000000000aea $d
    stm32eforth-fl.s:1826   .text:0000000000000aee _HLD
    stm32eforth-fl.s:1828   .text:0000000000000af2 $t
    stm32eforth-fl.s:1829   .text:0000000000000af4 HLD
    stm32eforth-fl.s:1837   .text:0000000000000afe $d
    stm32eforth-fl.s:1838   .text:0000000000000b02 _CNTXT
    stm32eforth-fl.s:1840   .text:0000000000000b0a $t
    stm32eforth-fl.s:1841   .text:0000000000000b0c CNTXT
    stm32eforth-fl.s:1842   .text:0000000000000b0c CRRNT
    stm32eforth-fl.s:1850   .text:0000000000000b16 $d
    stm32eforth-fl.s:1851   .text:0000000000000b1a _CP
    stm32eforth-fl.s:1854   .text:0000000000000b20 CPP
    stm32eforth-fl.s:1861   .text:0000000000000b2a $d
    stm32eforth-fl.s:1862   .text:0000000000000b2e _FCP
    stm32eforth-fl.s:1864   .text:0000000000000b32 $t
    stm32eforth-fl.s:1865   .text:0000000000000b34 FCP
    stm32eforth-fl.s:1873   .text:0000000000000b3e $d
    stm32eforth-fl.s:1874   .text:0000000000000b42 _LAST
    stm32eforth-fl.s:1877   .text:0000000000000b48 LAST
    stm32eforth-fl.s:1884   .text:0000000000000b52 $d
    stm32eforth-fl.s:1885   .text:0000000000000b56 _FTRACE
    stm32eforth-fl.s:1888   .text:0000000000000b60 FTRACE
    stm32eforth-fl.s:1899   .text:0000000000000b6a $d
    stm32eforth-fl.s:1900   .text:0000000000000b6e _USER_BGN
    stm32eforth-fl.s:1903   .text:0000000000000b7c USER_BEGIN
    stm32eforth-fl.s:1907   .text:0000000000000b84 USR_BGN_ADR
    stm32eforth-fl.s:1908   .text:0000000000000b84 $d
    stm32eforth-fl.s:1913   .text:0000000000000b8c _USER_END
    stm32eforth-fl.s:1916   .text:0000000000000b98 USER_END
    stm32eforth-fl.s:1920   .text:0000000000000ba0 USER_END_ADR
    stm32eforth-fl.s:1921   .text:0000000000000ba0 $d
    stm32eforth-fl.s:1926   .text:0000000000000ba8 _IMG_ADR
    stm32eforth-fl.s:1928   .text:0000000000000bb0 $t
    stm32eforth-fl.s:1929   .text:0000000000000bb0 IMG_ADR
    stm32eforth-fl.s:1933   .text:0000000000000bb8 USR_IMG_ADR
    stm32eforth-fl.s:1934   .text:0000000000000bb8 $d
    stm32eforth-fl.s:4841   .text.user:0000000000000000 USER_SPACE
    stm32eforth-fl.s:1939   .text:0000000000000bc0 _IMG_SIGN
    stm32eforth-fl.s:1942   .text:0000000000000bcc IMG_SIGN
ARM GAS  stm32eforth-fl.s 			page 104


    stm32eforth-fl.s:1954   .text:0000000000000bd6 $d
    stm32eforth-fl.s:1955   .text:0000000000000bda _WITHI
    stm32eforth-fl.s:1958   .text:0000000000000be4 WITHI
    stm32eforth-fl.s:1960   .text:0000000000000be8 $d
    stm32eforth-fl.s:1974   .text:0000000000000c08 _UMMOD
    stm32eforth-fl.s:1977   .text:0000000000000c10 UMMOD
    stm32eforth-fl.s:1981   .text:0000000000000c1a UMMOD0
    stm32eforth-fl.s:1988   .text:0000000000000c2a UMMOD1
    stm32eforth-fl.s:1994   .text:0000000000000c34 UMMOD2
    stm32eforth-fl.s:2004   .text:0000000000000c40 $d
    stm32eforth-fl.s:2005   .text:0000000000000c44 _MSMOD
    stm32eforth-fl.s:2007   .text:0000000000000c4a $t
    stm32eforth-fl.s:2008   .text:0000000000000c4c MSMOD
    stm32eforth-fl.s:2010   .text:0000000000000c50 $d
    stm32eforth-fl.s:2019   .text:0000000000000c78 MMOD1
    stm32eforth-fl.s:2026   .text:0000000000000c94 MMOD2
    stm32eforth-fl.s:2034   .text:0000000000000cb4 MMOD3
    stm32eforth-fl.s:2041   .text:0000000000000cbc _SLMOD
    stm32eforth-fl.s:2044   .text:0000000000000cc4 SLMOD
    stm32eforth-fl.s:2046   .text:0000000000000cc8 $d
    stm32eforth-fl.s:2056   .text:0000000000000ce0 _MODD
    stm32eforth-fl.s:2058   .text:0000000000000ce4 $t
    stm32eforth-fl.s:2061   .text:0000000000000ce8 $d
    stm32eforth-fl.s:2069   .text:0000000000000cf8 _SLASH
    stm32eforth-fl.s:2071   .text:0000000000000cfa $t
    stm32eforth-fl.s:2072   .text:0000000000000cfc SLASH
    stm32eforth-fl.s:2074   .text:0000000000000d00 $d
    stm32eforth-fl.s:2083   .text:0000000000000d14 _SSMOD
    stm32eforth-fl.s:2085   .text:0000000000000d1a $t
    stm32eforth-fl.s:2086   .text:0000000000000d1c SSMOD
    stm32eforth-fl.s:2088   .text:0000000000000d20 $d
    stm32eforth-fl.s:2098   .text:0000000000000d38 _STASL
    stm32eforth-fl.s:2101   .text:0000000000000d3c STASL
    stm32eforth-fl.s:2103   .text:0000000000000d40 $d
    stm32eforth-fl.s:2115   .text:0000000000000d54 _ALGND
    stm32eforth-fl.s:2117   .text:0000000000000d5c $t
    stm32eforth-fl.s:2118   .text:0000000000000d5c ALGND
    stm32eforth-fl.s:2127   .text:0000000000000d6c $d
    stm32eforth-fl.s:2128   .text:0000000000000d70 _TCHAR
    stm32eforth-fl.s:2130   .text:0000000000000d76 $t
    stm32eforth-fl.s:2131   .text:0000000000000d78 TCHAR
    stm32eforth-fl.s:2133   .text:0000000000000d7c $d
    stm32eforth-fl.s:2143   .text:0000000000000db4 TCHA1
    stm32eforth-fl.s:2150   .text:0000000000000dbc _DEPTH
    stm32eforth-fl.s:2152   .text:0000000000000dc2 $t
    stm32eforth-fl.s:2153   .text:0000000000000dc4 DEPTH
    stm32eforth-fl.s:2164   .text:0000000000000ddc $d
    stm32eforth-fl.s:2165   .text:0000000000000de0 _PICK
    stm32eforth-fl.s:2168   .text:0000000000000de8 PICK
    stm32eforth-fl.s:2170   .text:0000000000000dec $d
    stm32eforth-fl.s:2184   .text:0000000000000e08 _HERE
    stm32eforth-fl.s:2187   .text:0000000000000e10 HERE
    stm32eforth-fl.s:2189   .text:0000000000000e14 $d
    stm32eforth-fl.s:2197   .text:0000000000000e24 _PAD
    stm32eforth-fl.s:2199   .text:0000000000000e28 $t
    stm32eforth-fl.s:2200   .text:0000000000000e28 PAD
    stm32eforth-fl.s:2202   .text:0000000000000e2c $d
ARM GAS  stm32eforth-fl.s 			page 105


    stm32eforth-fl.s:2211   .text:0000000000000e44 _TIB
    stm32eforth-fl.s:2213   .text:0000000000000e48 $t
    stm32eforth-fl.s:2214   .text:0000000000000e48 TIB
    stm32eforth-fl.s:2222   .text:0000000000000e52 $d
    stm32eforth-fl.s:2223   .text:0000000000000e56 _ATEXE
    stm32eforth-fl.s:2226   .text:0000000000000e60 ATEXE
    stm32eforth-fl.s:2238   .text:0000000000000e74 $d
    stm32eforth-fl.s:2239   .text:0000000000000e78 _CMOVE
    stm32eforth-fl.s:2241   .text:0000000000000e7e $t
    stm32eforth-fl.s:2242   .text:0000000000000e80 CMOVE
    stm32eforth-fl.s:2249   .text:0000000000000e92 CMOV1
    stm32eforth-fl.s:2246   .text:0000000000000e8a CMOV0
    stm32eforth-fl.s:2254   .text:0000000000000e9c CMOV2
    stm32eforth-fl.s:2261   .text:0000000000000ea4 $d
    stm32eforth-fl.s:2262   .text:0000000000000ea8 _MOVE
    stm32eforth-fl.s:2265   .text:0000000000000eb0 MOVE
    stm32eforth-fl.s:2273   .text:0000000000000ec6 MOVE1
    stm32eforth-fl.s:2270   .text:0000000000000ebe MOVE0
    stm32eforth-fl.s:2278   .text:0000000000000ed0 MOVE2
    stm32eforth-fl.s:2285   .text:0000000000000ed8 $d
    stm32eforth-fl.s:2286   .text:0000000000000edc _FILL
    stm32eforth-fl.s:2289   .text:0000000000000ee4 FILL
    stm32eforth-fl.s:2292   .text:0000000000000eec FILL0
    stm32eforth-fl.s:2295   .text:0000000000000ef0 FILL1
    stm32eforth-fl.s:2301   .text:0000000000000efe FILL2
    stm32eforth-fl.s:2308   .text:0000000000000f06 $d
    stm32eforth-fl.s:2309   .text:0000000000000f0a _PACKS
    stm32eforth-fl.s:2312   .text:0000000000000f14 PACKS
    stm32eforth-fl.s:2314   .text:0000000000000f18 $d
    stm32eforth-fl.s:2341   .text:0000000000000f70 _DIGIT
    stm32eforth-fl.s:2343   .text:0000000000000f76 $t
    stm32eforth-fl.s:2344   .text:0000000000000f78 DIGIT
    stm32eforth-fl.s:2346   .text:0000000000000f7c $d
    stm32eforth-fl.s:2360   .text:0000000000000fb0 _EXTRC
    stm32eforth-fl.s:2362   .text:0000000000000fb8 $t
    stm32eforth-fl.s:2363   .text:0000000000000fb8 EXTRC
    stm32eforth-fl.s:2365   .text:0000000000000fbc $d
    stm32eforth-fl.s:2376   .text:0000000000000fdc _BDIGS
    stm32eforth-fl.s:2379   .text:0000000000000fe0 BDIGS
    stm32eforth-fl.s:2381   .text:0000000000000fe4 $d
    stm32eforth-fl.s:2390   .text:0000000000000ff8 _HOLD
    stm32eforth-fl.s:2393   .text:0000000000001000 HOLD
    stm32eforth-fl.s:2395   .text:0000000000001004 $d
    stm32eforth-fl.s:2408   .text:0000000000001028 _DIG
    stm32eforth-fl.s:2410   .text:000000000000102a $t
    stm32eforth-fl.s:2411   .text:000000000000102c DIG
    stm32eforth-fl.s:2413   .text:0000000000001030 $d
    stm32eforth-fl.s:2423   .text:0000000000001048 _DIGS
    stm32eforth-fl.s:2426   .text:000000000000104c DIGS
    stm32eforth-fl.s:2428   .text:0000000000001050 DIGS1
    stm32eforth-fl.s:2429   .text:0000000000001050 $d
    stm32eforth-fl.s:2433   .text:0000000000001068 DIGS2
    stm32eforth-fl.s:2440   .text:0000000000001070 _SIGN
    stm32eforth-fl.s:2443   .text:0000000000001078 SIGN
    stm32eforth-fl.s:2445   .text:000000000000107c $d
    stm32eforth-fl.s:2449   .text:0000000000001094 SIGN1
    stm32eforth-fl.s:2456   .text:000000000000109c _EDIGS
ARM GAS  stm32eforth-fl.s 			page 106


    stm32eforth-fl.s:2459   .text:00000000000010a0 EDIGS
    stm32eforth-fl.s:2461   .text:00000000000010a4 $d
    stm32eforth-fl.s:2476   .text:00000000000010c0 STRR
    stm32eforth-fl.s:2477   .text:00000000000010c0 $t
    stm32eforth-fl.s:2478   .text:00000000000010c4 $d
    stm32eforth-fl.s:2492   .text:00000000000010ec _HEX
    stm32eforth-fl.s:2494   .text:00000000000010f0 $t
    stm32eforth-fl.s:2495   .text:00000000000010f0 HEX
    stm32eforth-fl.s:2497   .text:00000000000010f4 $d
    stm32eforth-fl.s:2506   .text:000000000000110c _DECIM
    stm32eforth-fl.s:2508   .text:0000000000001114 $t
    stm32eforth-fl.s:2509   .text:0000000000001114 DECIM
    stm32eforth-fl.s:2511   .text:0000000000001118 $d
    stm32eforth-fl.s:2523   .text:0000000000001130 _DIGTQ
    stm32eforth-fl.s:2526   .text:0000000000001138 DIGTQ
    stm32eforth-fl.s:2528   .text:000000000000113c $d
    stm32eforth-fl.s:2541   .text:0000000000001184 DGTQ1
    stm32eforth-fl.s:2551   .text:0000000000001198 _NUMBQ
    stm32eforth-fl.s:2553   .text:00000000000011a0 $t
    stm32eforth-fl.s:2554   .text:00000000000011a0 NUMBQ
    stm32eforth-fl.s:2556   .text:00000000000011a4 $d
    stm32eforth-fl.s:2572   .text:00000000000011f0 NUMQ1
    stm32eforth-fl.s:2620   .text:00000000000012b8 NUMQ6
    stm32eforth-fl.s:2588   .text:0000000000001234 NUMQ2
    stm32eforth-fl.s:2612   .text:000000000000129c NUMQ4
    stm32eforth-fl.s:2609   .text:0000000000001290 NUMQ3
    stm32eforth-fl.s:2618   .text:00000000000012b4 NUMQ5
    stm32eforth-fl.s:2635   .text:00000000000012d4 _KEY
    stm32eforth-fl.s:2637   .text:00000000000012d8 $t
    stm32eforth-fl.s:2638   .text:00000000000012d8 KEY
    stm32eforth-fl.s:2640   .text:00000000000012dc KEY1
    stm32eforth-fl.s:2641   .text:00000000000012dc $d
    stm32eforth-fl.s:2649   .text:00000000000012f0 _SPACE
    stm32eforth-fl.s:2651   .text:00000000000012f6 $t
    stm32eforth-fl.s:2652   .text:00000000000012f8 SPACE
    stm32eforth-fl.s:2654   .text:00000000000012fc $d
    stm32eforth-fl.s:2662   .text:000000000000130c _SPACS
    stm32eforth-fl.s:2665   .text:0000000000001314 SPACS
    stm32eforth-fl.s:2667   .text:0000000000001318 $d
    stm32eforth-fl.s:2673   .text:0000000000001334 CHAR2
    stm32eforth-fl.s:2671   .text:0000000000001330 CHAR1
    stm32eforth-fl.s:2681   .text:0000000000001344 _TYPEE
    stm32eforth-fl.s:2686   .text:0000000000001350 $d
    stm32eforth-fl.s:2692   .text:0000000000001368 TYPE2
    stm32eforth-fl.s:2688   .text:000000000000135c TYPE1
    stm32eforth-fl.s:2701   .text:000000000000137c _CR
    stm32eforth-fl.s:2706   .text:0000000000001384 $d
    stm32eforth-fl.s:2720   .text:00000000000013a0 DOSTR
    stm32eforth-fl.s:2721   .text:00000000000013a0 $t
    stm32eforth-fl.s:2723   .text:00000000000013a4 $d
    stm32eforth-fl.s:2742   .text:00000000000013cc STRQP
    stm32eforth-fl.s:2743   .text:00000000000013cc $t
    stm32eforth-fl.s:2744   .text:00000000000013d0 $d
    stm32eforth-fl.s:2754   .text:00000000000013d8 DOTST
    stm32eforth-fl.s:2755   .text:00000000000013d8 $t
    stm32eforth-fl.s:2756   .text:00000000000013dc $d
    stm32eforth-fl.s:2767   .text:00000000000013e8 DOTQP
ARM GAS  stm32eforth-fl.s 			page 107


    stm32eforth-fl.s:2768   .text:00000000000013e8 $t
    stm32eforth-fl.s:2769   .text:00000000000013ec $d
    stm32eforth-fl.s:2777   .text:00000000000013fc _DOTR
    stm32eforth-fl.s:2780   .text:0000000000001400 DOTR
    stm32eforth-fl.s:2782   .text:0000000000001404 $d
    stm32eforth-fl.s:2795   .text:0000000000001428 _UDOTR
    stm32eforth-fl.s:2797   .text:000000000000142c $t
    stm32eforth-fl.s:2798   .text:000000000000142c UDOTR
    stm32eforth-fl.s:2800   .text:0000000000001430 $d
    stm32eforth-fl.s:2815   .text:000000000000145c _UDOT
    stm32eforth-fl.s:2818   .text:0000000000001460 UDOT
    stm32eforth-fl.s:2820   .text:0000000000001464 $d
    stm32eforth-fl.s:2831   .text:0000000000001480 _DOT
    stm32eforth-fl.s:2833   .text:0000000000001482 $t
    stm32eforth-fl.s:2834   .text:0000000000001484 DOT
    stm32eforth-fl.s:2836   .text:0000000000001488 $d
    stm32eforth-fl.s:2843   .text:00000000000014ac DOT1
    stm32eforth-fl.s:2853   .text:00000000000014c0 _QUEST
    stm32eforth-fl.s:2855   .text:00000000000014c2 $t
    stm32eforth-fl.s:2856   .text:00000000000014c4 QUEST
    stm32eforth-fl.s:2858   .text:00000000000014c8 $d
    stm32eforth-fl.s:2872   .text:00000000000014d4 PARS
    stm32eforth-fl.s:2873   .text:00000000000014d4 $t
    stm32eforth-fl.s:2874   .text:00000000000014d8 $d
    stm32eforth-fl.s:2940   .text:00000000000015e8 PARS8
    stm32eforth-fl.s:2904   .text:000000000000155c PARS3
    stm32eforth-fl.s:2887   .text:0000000000001514 PARS1
    stm32eforth-fl.s:2902   .text:0000000000001558 PARS2
    stm32eforth-fl.s:2908   .text:0000000000001568 PARS4
    stm32eforth-fl.s:2920   .text:0000000000001598 PARS5
    stm32eforth-fl.s:2927   .text:00000000000015bc PARS6
    stm32eforth-fl.s:2933   .text:00000000000015d0 PARS7
    stm32eforth-fl.s:2950   .text:00000000000015fc _PARSE
    stm32eforth-fl.s:2952   .text:0000000000001602 $t
    stm32eforth-fl.s:2953   .text:0000000000001604 PARSE
    stm32eforth-fl.s:2955   .text:0000000000001608 $d
    stm32eforth-fl.s:2975   .text:0000000000001648 _DOTPR
    stm32eforth-fl.s:2978   .text:000000000000164c DOTPR
    stm32eforth-fl.s:2980   .text:0000000000001650 $d
    stm32eforth-fl.s:2989   .text:0000000000001668 _PAREN
    stm32eforth-fl.s:2991   .text:000000000000166a $t
    stm32eforth-fl.s:2992   .text:000000000000166c PAREN
    stm32eforth-fl.s:2994   .text:0000000000001670 $d
    stm32eforth-fl.s:3003   .text:0000000000001688 _BKSLA
    stm32eforth-fl.s:3005   .text:000000000000168a $t
    stm32eforth-fl.s:3006   .text:000000000000168c BKSLA
    stm32eforth-fl.s:3008   .text:0000000000001690 $d
    stm32eforth-fl.s:3018   .text:00000000000016a8 _CHAR
    stm32eforth-fl.s:3021   .text:00000000000016b0 CHAR
    stm32eforth-fl.s:3023   .text:00000000000016b4 $d
    stm32eforth-fl.s:3033   .text:00000000000016cc _WORDD
    stm32eforth-fl.s:3036   .text:00000000000016d4 WORDD
    stm32eforth-fl.s:3038   .text:00000000000016d8 $d
    stm32eforth-fl.s:3048   .text:00000000000016f0 _TOKEN
    stm32eforth-fl.s:3050   .text:00000000000016f6 $t
    stm32eforth-fl.s:3051   .text:00000000000016f8 TOKEN
    stm32eforth-fl.s:3053   .text:00000000000016fc $d
ARM GAS  stm32eforth-fl.s 			page 108


    stm32eforth-fl.s:3064   .text:000000000000170c _NAMET
    stm32eforth-fl.s:3066   .text:0000000000001712 $t
    stm32eforth-fl.s:3067   .text:0000000000001714 NAMET
    stm32eforth-fl.s:3069   .text:0000000000001718 $d
    stm32eforth-fl.s:3085   .text:0000000000001738 _SAMEQ
    stm32eforth-fl.s:3087   .text:000000000000173e $t
    stm32eforth-fl.s:3088   .text:0000000000001740 SAMEQ
    stm32eforth-fl.s:3090   .text:0000000000001744 $d
    stm32eforth-fl.s:3107   .text:000000000000178c SAME2
    stm32eforth-fl.s:3092   .text:0000000000001750 SAME1
    stm32eforth-fl.s:3122   .text:00000000000017a0 FIND
    stm32eforth-fl.s:3123   .text:00000000000017a0 $t
    stm32eforth-fl.s:3124   .text:00000000000017a4 $d
    stm32eforth-fl.s:3131   .text:00000000000017c0 FIND1
    stm32eforth-fl.s:3151   .text:0000000000001818 FIND6
    stm32eforth-fl.s:3144   .text:0000000000001800 FIND2
    stm32eforth-fl.s:3149   .text:0000000000001810 FIND3
    stm32eforth-fl.s:3158   .text:0000000000001830 FIND4
    stm32eforth-fl.s:3164   .text:000000000000184c FIND5
    stm32eforth-fl.s:3179   .text:0000000000001874 _NAMEQ
    stm32eforth-fl.s:3181   .text:000000000000187a $t
    stm32eforth-fl.s:3182   .text:000000000000187c NAMEQ
    stm32eforth-fl.s:3184   .text:0000000000001880 $d
    stm32eforth-fl.s:3199   .text:0000000000001890 BKSP
    stm32eforth-fl.s:3200   .text:0000000000001890 $t
    stm32eforth-fl.s:3201   .text:0000000000001894 $d
    stm32eforth-fl.s:3215   .text:00000000000018d8 BACK1
    stm32eforth-fl.s:3225   .text:00000000000018dc TAP
    stm32eforth-fl.s:3226   .text:00000000000018dc $t
    stm32eforth-fl.s:3227   .text:00000000000018e0 $d
    stm32eforth-fl.s:3241   .text:00000000000018f8 KTAP
    stm32eforth-fl.s:3242   .text:00000000000018f8 TTAP
    stm32eforth-fl.s:3243   .text:00000000000018f8 $t
    stm32eforth-fl.s:3244   .text:00000000000018fc $d
    stm32eforth-fl.s:3258   .text:000000000000193c KTAP2
    stm32eforth-fl.s:3255   .text:0000000000001934 KTAP1
    stm32eforth-fl.s:3269   .text:0000000000001954 _ACCEP
    stm32eforth-fl.s:3272   .text:000000000000195c ACCEP
    stm32eforth-fl.s:3274   .text:0000000000001960 $d
    stm32eforth-fl.s:3277   .text:000000000000196c ACCP1
    stm32eforth-fl.s:3293   .text:00000000000019b4 ACCP4
    stm32eforth-fl.s:3289   .text:00000000000019a8 ACCP2
    stm32eforth-fl.s:3291   .text:00000000000019ac ACCP3
    stm32eforth-fl.s:3303   .text:00000000000019c8 _QUERY
    stm32eforth-fl.s:3305   .text:00000000000019ce $t
    stm32eforth-fl.s:3306   .text:00000000000019d0 QUERY
    stm32eforth-fl.s:3308   .text:00000000000019d4 $d
    stm32eforth-fl.s:3326   .text:0000000000001a08 _ABORT
    stm32eforth-fl.s:3328   .text:0000000000001a0e $t
    stm32eforth-fl.s:3329   .text:0000000000001a10 ABORT
    stm32eforth-fl.s:3331   .text:0000000000001a14 ABORT1
    stm32eforth-fl.s:3332   .text:0000000000001a14 $d
    stm32eforth-fl.s:3463   .text:0000000000001b98 PRESE
    stm32eforth-fl.s:3476   .text:0000000000001bb8 QUIT
    stm32eforth-fl.s:3348   .text:0000000000001a3c ABORQ
    stm32eforth-fl.s:3349   .text:0000000000001a3c $t
    stm32eforth-fl.s:3350   .text:0000000000001a40 $d
ARM GAS  stm32eforth-fl.s 			page 109


    stm32eforth-fl.s:3365   .text:0000000000001a64 _INTER
    stm32eforth-fl.s:3367   .text:0000000000001a70 $t
    stm32eforth-fl.s:3370   .text:0000000000001a74 $d
    stm32eforth-fl.s:3379   .text:0000000000001ab0 INTE1
    stm32eforth-fl.s:3376   .text:0000000000001aa6 $t
    stm32eforth-fl.s:3377   .text:0000000000001aa8 $d
    stm32eforth-fl.s:3383   .text:0000000000001ac0 INTE2
    stm32eforth-fl.s:3390   .text:0000000000001ac8 _LBRAC
    stm32eforth-fl.s:3392   .text:0000000000001aca $t
    stm32eforth-fl.s:3393   .text:0000000000001acc LBRAC
    stm32eforth-fl.s:3395   .text:0000000000001ad0 $d
    stm32eforth-fl.s:3404   .text:0000000000001ae8 _DOTOK
    stm32eforth-fl.s:3406   .text:0000000000001aec $t
    stm32eforth-fl.s:3407   .text:0000000000001aec DOTOK
    stm32eforth-fl.s:3409   .text:0000000000001af0 $d
    stm32eforth-fl.s:3415   .text:0000000000001b14 DOTO1
    stm32eforth-fl.s:3416   .text:0000000000001b14 $d
    stm32eforth-fl.s:3423   .text:0000000000001b20 _QSTAC
    stm32eforth-fl.s:3426   .text:0000000000001b28 QSTAC
    stm32eforth-fl.s:3428   .text:0000000000001b2c $d
    stm32eforth-fl.s:3430   .text:0000000000001b42 $t
    stm32eforth-fl.s:3431   .text:0000000000001b44 $d
    stm32eforth-fl.s:3437   .text:0000000000001b4c _EVAL
    stm32eforth-fl.s:3440   .text:0000000000001b54 EVAL
    stm32eforth-fl.s:3442   .text:0000000000001b58 EVAL1
    stm32eforth-fl.s:3443   .text:0000000000001b58 $d
    stm32eforth-fl.s:3451   .text:0000000000001b80 EVAL2
    stm32eforth-fl.s:3460   .text:0000000000001b90 _PRESE
    stm32eforth-fl.s:3465   .text:0000000000001b9c $d
    stm32eforth-fl.s:3473   .text:0000000000001bb0 _QUIT
    stm32eforth-fl.s:3477   .text:0000000000001bb8 $d
    stm32eforth-fl.s:3479   .text:0000000000001bc4 QUIT1
    stm32eforth-fl.s:3481   .text:0000000000001bc8 QUIT2
    stm32eforth-fl.s:3489   .text:0000000000001bd8 $t
    stm32eforth-fl.s:3827   .text:0000000000001ff0 flash_regs
    stm32eforth-fl.s:3512   .text:0000000000001bfc WAIT_BSY
    stm32eforth-fl.s:3514   .text:0000000000001bfe WAIT1
    stm32eforth-fl.s:3528   .text:0000000000001c08 $d
    stm32eforth-fl.s:3529   .text:0000000000001c0c _EPAGE
    stm32eforth-fl.s:3533   .text:0000000000001c18 EPAGE
    stm32eforth-fl.s:3550   .text:0000000000001c40 HWORD_WRITE
    stm32eforth-fl.s:3568   .text:0000000000001c68 $d
    stm32eforth-fl.s:3569   .text:0000000000001c6c _ISTOR
    stm32eforth-fl.s:3572   .text:0000000000001c70 ISTOR
    stm32eforth-fl.s:3574   .text:0000000000001c74 $d
    stm32eforth-fl.s:3580   .text:0000000000001ca0 $d
    stm32eforth-fl.s:3595   .text:0000000000001cdc _IMG_SIZE
    stm32eforth-fl.s:3598   .text:0000000000001ce8 IMG_SIZE
    stm32eforth-fl.s:3600   .text:0000000000001cec $d
    stm32eforth-fl.s:3616   .text:0000000000001d28 _IMGQ
    stm32eforth-fl.s:3619   .text:0000000000001d30 IMGQ
    stm32eforth-fl.s:3621   .text:0000000000001d34 $d
    stm32eforth-fl.s:3632   .text:0000000000001d54 _LOAD_IMG
    stm32eforth-fl.s:3635   .text:0000000000001d60 LOAD_IMG
    stm32eforth-fl.s:3637   .text:0000000000001d64 $d
    stm32eforth-fl.s:3664   .text:0000000000001dbc _ERASE_MPG
    stm32eforth-fl.s:3666   .text:0000000000001dc6 $t
ARM GAS  stm32eforth-fl.s 			page 110


    stm32eforth-fl.s:3667   .text:0000000000001dc8 ERASE_MPG
    stm32eforth-fl.s:3669   .text:0000000000001dcc $d
    stm32eforth-fl.s:3728   .text:0000000000001e9c PG_TO_ADR
    stm32eforth-fl.s:3678   .text:0000000000001e04 $d
    stm32eforth-fl.s:3689   .text:0000000000001e28 _FLSH_WR
    stm32eforth-fl.s:3692   .text:0000000000001e30 FLSH_WR
    stm32eforth-fl.s:3693   .text:0000000000001e30 $t
    stm32eforth-fl.s:3694   .text:0000000000001e34 $d
    stm32eforth-fl.s:3714   .text:0000000000001e7c _ADR_TO_PG
    stm32eforth-fl.s:3717   .text:0000000000001e84 ADR_TO_PG
    stm32eforth-fl.s:3724   .text:0000000000001e90 $d
    stm32eforth-fl.s:3725   .text:0000000000001e94 _PG_TO_ADR
    stm32eforth-fl.s:3735   .text:0000000000001ea8 $d
    stm32eforth-fl.s:3736   .text:0000000000001eac _ERASE_IMG
    stm32eforth-fl.s:3738   .text:0000000000001eb6 $t
    stm32eforth-fl.s:3739   .text:0000000000001eb8 ERASE_IMG
    stm32eforth-fl.s:3741   .text:0000000000001ebc $d
    stm32eforth-fl.s:3756   .text:0000000000001ef8 _SAVE_IMG
    stm32eforth-fl.s:3759   .text:0000000000001f04 SAVE_IMG
    stm32eforth-fl.s:3761   .text:0000000000001f08 $d
    stm32eforth-fl.s:3790   .text:0000000000001f6c _TURNKEY
    stm32eforth-fl.s:3792   .text:0000000000001f74 $t
    stm32eforth-fl.s:3793   .text:0000000000001f74 TURNKEY
    stm32eforth-fl.s:3795   .text:0000000000001f78 $d
    stm32eforth-fl.s:3842   .text:0000000000002004 TICK
    stm32eforth-fl.s:3804   .text:0000000000001f9c _FORGET
    stm32eforth-fl.s:3807   .text:0000000000001fa4 FORGET
    stm32eforth-fl.s:3809   .text:0000000000001fa8 $d
    stm32eforth-fl.s:4262   .text:000000000000245c OVERT
    stm32eforth-fl.s:3828   .text:0000000000001ff0 $d
    stm32eforth-fl.s:3839   .text:0000000000002000 _TICK
    stm32eforth-fl.s:3841   .text:0000000000002002 $t
    stm32eforth-fl.s:3844   .text:0000000000002008 $d
    stm32eforth-fl.s:3848   .text:000000000000201c TICK1
    stm32eforth-fl.s:3855   .text:0000000000002024 _ALLOT
    stm32eforth-fl.s:3857   .text:000000000000202a $t
    stm32eforth-fl.s:3858   .text:000000000000202c ALLOT
    stm32eforth-fl.s:3860   .text:0000000000002030 $d
    stm32eforth-fl.s:3868   .text:0000000000002040 _COMMA
    stm32eforth-fl.s:3869   .text:0000000000002042 $t
    stm32eforth-fl.s:3870   .text:0000000000002044 COMMA
    stm32eforth-fl.s:3872   .text:0000000000002048 $d
    stm32eforth-fl.s:3883   .text:0000000000002064 $d
    stm32eforth-fl.s:3884   .text:0000000000002068 _BCOMP
    stm32eforth-fl.s:3886   .text:0000000000002072 $t
    stm32eforth-fl.s:3887   .text:0000000000002074 BCOMP
    stm32eforth-fl.s:3889   .text:0000000000002078 $d
    stm32eforth-fl.s:3897   .text:0000000000002088 _COMPI
    stm32eforth-fl.s:3899   .text:0000000000002090 $t
    stm32eforth-fl.s:3900   .text:0000000000002090 COMPI
    stm32eforth-fl.s:3902   .text:0000000000002094 $d
    stm32eforth-fl.s:3916   .text:00000000000020c0 _LITER
    stm32eforth-fl.s:3918   .text:00000000000020c8 $t
    stm32eforth-fl.s:3919   .text:00000000000020c8 LITER
    stm32eforth-fl.s:3921   .text:00000000000020cc $d
    stm32eforth-fl.s:4306   .text:00000000000024b8 CALLC
    stm32eforth-fl.s:3932   .text:00000000000020e0 STRCQ
ARM GAS  stm32eforth-fl.s 			page 111


    stm32eforth-fl.s:3933   .text:00000000000020e0 $t
    stm32eforth-fl.s:3934   .text:00000000000020e4 $d
    stm32eforth-fl.s:3953   .text:000000000000211c _FOR
    stm32eforth-fl.s:3955   .text:0000000000002120 $t
    stm32eforth-fl.s:3956   .text:0000000000002120 FOR
    stm32eforth-fl.s:3958   .text:0000000000002124 $d
    stm32eforth-fl.s:3966   .text:000000000000213c _BEGIN
    stm32eforth-fl.s:3968   .text:0000000000002142 $t
    stm32eforth-fl.s:3969   .text:0000000000002144 BEGIN
    stm32eforth-fl.s:3971   .text:0000000000002148 $d
    stm32eforth-fl.s:3977   .text:0000000000002150 $d
    stm32eforth-fl.s:3978   .text:0000000000002154 _FNEXT
    stm32eforth-fl.s:3981   .text:000000000000215c FNEXT
    stm32eforth-fl.s:3983   .text:0000000000002160 $d
    stm32eforth-fl.s:3991   .text:0000000000002178 _UNTIL
    stm32eforth-fl.s:3993   .text:000000000000217e $t
    stm32eforth-fl.s:3994   .text:0000000000002180 UNTIL
    stm32eforth-fl.s:3996   .text:0000000000002184 $d
    stm32eforth-fl.s:4004   .text:000000000000219c _AGAIN
    stm32eforth-fl.s:4006   .text:00000000000021a2 $t
    stm32eforth-fl.s:4007   .text:00000000000021a4 AGAIN
    stm32eforth-fl.s:4009   .text:00000000000021a8 $d
    stm32eforth-fl.s:4017   .text:00000000000021c0 _IFF
    stm32eforth-fl.s:4020   .text:00000000000021c4 IFF
    stm32eforth-fl.s:4022   .text:00000000000021c8 $d
    stm32eforth-fl.s:4033   .text:00000000000021f0 _AHEAD
    stm32eforth-fl.s:4035   .text:00000000000021f6 $t
    stm32eforth-fl.s:4036   .text:00000000000021f8 AHEAD
    stm32eforth-fl.s:4038   .text:00000000000021fc $d
    stm32eforth-fl.s:4049   .text:0000000000002224 _REPEA
    stm32eforth-fl.s:4052   .text:000000000000222c REPEA
    stm32eforth-fl.s:4054   .text:0000000000002230 $d
    stm32eforth-fl.s:4064   .text:0000000000002248 _THENN
    stm32eforth-fl.s:4067   .text:0000000000002250 THENN
    stm32eforth-fl.s:4069   .text:0000000000002254 $d
    stm32eforth-fl.s:4078   .text:0000000000002268 _AFT
    stm32eforth-fl.s:4080   .text:000000000000226c $t
    stm32eforth-fl.s:4081   .text:000000000000226c AFT
    stm32eforth-fl.s:4083   .text:0000000000002270 $d
    stm32eforth-fl.s:4093   .text:0000000000002288 _ELSEE
    stm32eforth-fl.s:4096   .text:0000000000002290 ELSEE
    stm32eforth-fl.s:4098   .text:0000000000002294 $d
    stm32eforth-fl.s:4107   .text:00000000000022a8 _WHILE
    stm32eforth-fl.s:4109   .text:00000000000022ae $t
    stm32eforth-fl.s:4110   .text:00000000000022b0 WHILE
    stm32eforth-fl.s:4112   .text:00000000000022b4 $d
    stm32eforth-fl.s:4120   .text:00000000000022c4 _ABRTQ
    stm32eforth-fl.s:4123   .text:00000000000022cc ABRTQ
    stm32eforth-fl.s:4125   .text:00000000000022d0 $d
    stm32eforth-fl.s:4133   .text:00000000000022e8 _STRQ
    stm32eforth-fl.s:4136   .text:00000000000022ec STRQ
    stm32eforth-fl.s:4138   .text:00000000000022f0 $d
    stm32eforth-fl.s:4146   .text:0000000000002308 _DOTQ
    stm32eforth-fl.s:4149   .text:000000000000230c DOTQ
    stm32eforth-fl.s:4151   .text:0000000000002310 $d
    stm32eforth-fl.s:4162   .text:0000000000002328 _UNIQU
    stm32eforth-fl.s:4164   .text:0000000000002330 $t
ARM GAS  stm32eforth-fl.s 			page 112


    stm32eforth-fl.s:4165   .text:0000000000002330 UNIQU
    stm32eforth-fl.s:4167   .text:0000000000002334 $d
    stm32eforth-fl.s:4174   .text:000000000000235c UNIQ1
    stm32eforth-fl.s:4171   .text:0000000000002350 $d
    stm32eforth-fl.s:4185   .text:0000000000002364 SNAME
    stm32eforth-fl.s:4186   .text:0000000000002364 $t
    stm32eforth-fl.s:4187   .text:0000000000002368 $d
    stm32eforth-fl.s:4203   .text:00000000000023ac SNAM1
    stm32eforth-fl.s:4213   .text:00000000000023c0 _SCOMP
    stm32eforth-fl.s:4216   .text:00000000000023cc SCOMP
    stm32eforth-fl.s:4218   .text:00000000000023d0 $d
    stm32eforth-fl.s:4230   .text:0000000000002408 SCOM2
    stm32eforth-fl.s:4227   .text:0000000000002400 SCOM1
    stm32eforth-fl.s:4235   .text:000000000000241c SCOM3
    stm32eforth-fl.s:4242   .text:0000000000002424 COLON_ABORT
    stm32eforth-fl.s:4243   .text:0000000000002424 $t
    stm32eforth-fl.s:4244   .text:0000000000002428 $d
    stm32eforth-fl.s:4259   .text:0000000000002454 _OVERT
    stm32eforth-fl.s:4261   .text:000000000000245a $t
    stm32eforth-fl.s:4264   .text:0000000000002460 $d
    stm32eforth-fl.s:4274   .text:0000000000002478 _SEMIS
    stm32eforth-fl.s:4276   .text:000000000000247a $t
    stm32eforth-fl.s:4277   .text:000000000000247c SEMIS
    stm32eforth-fl.s:4279   .text:0000000000002480 $d
    stm32eforth-fl.s:4289   .text:000000000000249c _RBRAC
    stm32eforth-fl.s:4291   .text:000000000000249e $t
    stm32eforth-fl.s:4292   .text:00000000000024a0 RBRAC
    stm32eforth-fl.s:4294   .text:00000000000024a4 $d
    stm32eforth-fl.s:4307   .text:00000000000024b8 $t
    stm32eforth-fl.s:4308   .text:00000000000024bc $d
    stm32eforth-fl.s:4318   .text:00000000000024d4 _COLON
    stm32eforth-fl.s:4320   .text:00000000000024d6 $t
    stm32eforth-fl.s:4321   .text:00000000000024d8 COLON
    stm32eforth-fl.s:4323   .text:00000000000024dc $d
    stm32eforth-fl.s:4333   .text:00000000000024f4 _IMMED
    stm32eforth-fl.s:4335   .text:00000000000024fe $t
    stm32eforth-fl.s:4336   .text:0000000000002500 IMMED
    stm32eforth-fl.s:4338   .text:0000000000002504 $d
    stm32eforth-fl.s:4355   .text:0000000000002530 _CONST
    stm32eforth-fl.s:4358   .text:000000000000253c CONST
    stm32eforth-fl.s:4360   .text:0000000000002540 $d
    stm32eforth-fl.s:4371   .text:0000000000002570 $t
    stm32eforth-fl.s:4375   .text:0000000000002570 DODOES
    stm32eforth-fl.s:4377   .text:0000000000002574 $d
    stm32eforth-fl.s:4390   .text:0000000000002598 $d
    stm32eforth-fl.s:4391   .text:000000000000259c _DOES
    stm32eforth-fl.s:4393   .text:00000000000025a2 $t
    stm32eforth-fl.s:4394   .text:00000000000025a4 DOES
    stm32eforth-fl.s:4396   .text:00000000000025a8 $d
    stm32eforth-fl.s:4410   .text:00000000000025d8 _DEFERAT
    stm32eforth-fl.s:4413   .text:00000000000025e0 DEFERAT
    stm32eforth-fl.s:4415   .text:00000000000025e4 $d
    stm32eforth-fl.s:4424   .text:00000000000025fc _DEFERSTO
    stm32eforth-fl.s:4427   .text:0000000000002604 DEFERSTO
    stm32eforth-fl.s:4429   .text:0000000000002608 $d
    stm32eforth-fl.s:4439   .text:0000000000002624 _DEFER
    stm32eforth-fl.s:4441   .text:000000000000262a $t
ARM GAS  stm32eforth-fl.s 			page 113


    stm32eforth-fl.s:4442   .text:000000000000262c DEFER
    stm32eforth-fl.s:4444   .text:0000000000002630 $d
    stm32eforth-fl.s:4467   .text:000000000000267c CREAT
    stm32eforth-fl.s:4455   .text:0000000000002664 DEFER_NOP
    stm32eforth-fl.s:4456   .text:0000000000002664 $t
    stm32eforth-fl.s:4457   .text:0000000000002668 $d
    stm32eforth-fl.s:4464   .text:0000000000002674 _CREAT
    stm32eforth-fl.s:4469   .text:0000000000002680 $d
    stm32eforth-fl.s:4481   .text:00000000000026a4 _VARIA
    stm32eforth-fl.s:4484   .text:00000000000026b0 VARIA
    stm32eforth-fl.s:4486   .text:00000000000026b4 $d
    stm32eforth-fl.s:4499   .text:00000000000026d8 _TRACE
    stm32eforth-fl.s:4501   .text:00000000000026de $t
    stm32eforth-fl.s:4502   .text:00000000000026e0 TRACE
    stm32eforth-fl.s:4504   .text:00000000000026e4 $d
    stm32eforth-fl.s:4511   .text:00000000000026f4 _DBG_PRT
    stm32eforth-fl.s:4513   .text:00000000000026fc DBG_PRT
    stm32eforth-fl.s:4514   .text:00000000000026fc $t
    stm32eforth-fl.s:4515   .text:0000000000002700 $d
    stm32eforth-fl.s:4531   .text:0000000000002720 DMP
    stm32eforth-fl.s:4532   .text:0000000000002720 $t
    stm32eforth-fl.s:4533   .text:0000000000002724 $d
    stm32eforth-fl.s:4545   .text:000000000000275c PDUM2
    stm32eforth-fl.s:4539   .text:0000000000002744 PDUM1
    stm32eforth-fl.s:4553   .text:0000000000002768 $d
    stm32eforth-fl.s:4554   .text:000000000000276c _DUMP
    stm32eforth-fl.s:4557   .text:0000000000002774 DUMP
    stm32eforth-fl.s:4559   .text:0000000000002778 $d
    stm32eforth-fl.s:4577   .text:00000000000027c8 DUMP4
    stm32eforth-fl.s:4567   .text:00000000000027a0 DUMP1
    stm32eforth-fl.s:4579   .text:00000000000027d0 DUMP3
    stm32eforth-fl.s:4590   .text:00000000000027e8 _DOTS
    stm32eforth-fl.s:4594   .text:00000000000027ec DOTS
    stm32eforth-fl.s:4596   .text:00000000000027f0 $d
    stm32eforth-fl.s:4604   .text:0000000000002810 DOTS2
    stm32eforth-fl.s:4600   .text:0000000000002804 DOTS1
    stm32eforth-fl.s:4613   .text:0000000000002824 _TNAME
    stm32eforth-fl.s:4615   .text:000000000000282a $t
    stm32eforth-fl.s:4618   .text:0000000000002830 $d
    stm32eforth-fl.s:4621   .text:000000000000283c TNAM1
    stm32eforth-fl.s:4632   .text:0000000000002870 TNAM2
    stm32eforth-fl.s:4641   .text:0000000000002880 _DOTID
    stm32eforth-fl.s:4643   .text:0000000000002884 $t
    stm32eforth-fl.s:4644   .text:0000000000002884 DOTID
    stm32eforth-fl.s:4646   .text:0000000000002888 $d
    stm32eforth-fl.s:4653   .text:00000000000028ac DOTI1
    stm32eforth-fl.s:4654   .text:00000000000028ba $t
    stm32eforth-fl.s:4655   .text:00000000000028bc $d
    stm32eforth-fl.s:4657   *ABS*:0000000000000000 WANT_SEE
    stm32eforth-fl.s:4737   .text:00000000000028c4 _WORDS
    stm32eforth-fl.s:4739   .text:00000000000028ca $t
    stm32eforth-fl.s:4740   .text:00000000000028cc WORDS
    stm32eforth-fl.s:4742   .text:00000000000028d0 $d
    stm32eforth-fl.s:4745   .text:00000000000028dc WORS1
    stm32eforth-fl.s:4754   .text:0000000000002904 WORS2
    stm32eforth-fl.s:4767   .text:0000000000002908 VERSN
    stm32eforth-fl.s:4768   .text:0000000000002908 $t
ARM GAS  stm32eforth-fl.s 			page 114


    stm32eforth-fl.s:4769   .text:000000000000290c $d
    stm32eforth-fl.s:4776   .text:000000000000291c _HI
    stm32eforth-fl.s:4781   .text:0000000000002924 $d
    stm32eforth-fl.s:4783   .text:0000000000002948 $d
    stm32eforth-fl.s:4809   .text:0000000000002998 $t
    stm32eforth-fl.s:4818   .text:00000000000029b6 COLD1
    stm32eforth-fl.s:4819   .text:00000000000029b6 $d
    stm32eforth-fl.s:4834   .text:0000000000002a06 COLD2
    stm32eforth-fl.s:4835   .text:0000000000002a06 $t
    stm32eforth-fl.s:4837   .text:0000000000002a08 $d
    stm32eforth-fl.s:4842   .text.user:0000000000000000 $d
    stm32eforth-fl.s:4844   .text:0000000000002a0c $d
    stm32eforth-fl.s:360    .text:000000000000004f $d
    stm32eforth-fl.s:752    .text:0000000000000449 $d
    stm32eforth-fl.s:752    .text:000000000000044a $t
    stm32eforth-fl.s:801    .text:00000000000004ed $d
    stm32eforth-fl.s:801    .text:00000000000004ee $t
    stm32eforth-fl.s:821    .text:0000000000000515 $d
    stm32eforth-fl.s:821    .text:0000000000000516 $t
    stm32eforth-fl.s:845    .text:000000000000054b $d
    stm32eforth-fl.s:845    .text:000000000000054c $t
    stm32eforth-fl.s:952    .text:00000000000005c7 $d
    stm32eforth-fl.s:986    .text:00000000000005f3 $d
    stm32eforth-fl.s:986    .text:00000000000005f4 $t
    stm32eforth-fl.s:999    .text:0000000000000607 $d
    stm32eforth-fl.s:999    .text:0000000000000608 $t
    stm32eforth-fl.s:1010   .text:0000000000000613 $d
    stm32eforth-fl.s:1010   .text:0000000000000614 $t
    stm32eforth-fl.s:1022   .text:0000000000000625 $d
    stm32eforth-fl.s:1022   .text:0000000000000626 $t
    stm32eforth-fl.s:1034   .text:0000000000000637 $d
    stm32eforth-fl.s:1034   .text:0000000000000638 $t
    stm32eforth-fl.s:1081   .text:000000000000067d $d
    stm32eforth-fl.s:1081   .text:000000000000067e $t
    stm32eforth-fl.s:1103   .text:000000000000069f $d
    stm32eforth-fl.s:1103   .text:00000000000006a0 $t
    stm32eforth-fl.s:1116   .text:00000000000006b1 $d
    stm32eforth-fl.s:1116   .text:00000000000006b2 $t
    stm32eforth-fl.s:1128   .text:00000000000006c3 $d
    stm32eforth-fl.s:1128   .text:00000000000006c4 $t
    stm32eforth-fl.s:1153   .text:00000000000006e5 $d
    stm32eforth-fl.s:1153   .text:00000000000006e6 $t
    stm32eforth-fl.s:1192   .text:000000000000072b $d
    stm32eforth-fl.s:1192   .text:000000000000072c $t
    stm32eforth-fl.s:1204   .text:0000000000000741 $d
    stm32eforth-fl.s:1204   .text:0000000000000742 $t
    stm32eforth-fl.s:1266   .text:000000000000079b $d
    stm32eforth-fl.s:1266   .text:000000000000079c $t
    stm32eforth-fl.s:1280   .text:00000000000007af $d
    stm32eforth-fl.s:1280   .text:00000000000007b0 $t
    stm32eforth-fl.s:1291   .text:00000000000007bd $d
    stm32eforth-fl.s:1291   .text:00000000000007be $t
    stm32eforth-fl.s:1302   .text:00000000000007cd $d
    stm32eforth-fl.s:1302   .text:00000000000007ce $t
    stm32eforth-fl.s:1313   .text:00000000000007dd $d
    stm32eforth-fl.s:1313   .text:00000000000007de $t
    stm32eforth-fl.s:1346   .text:000000000000080d $d
ARM GAS  stm32eforth-fl.s 			page 115


    stm32eforth-fl.s:1346   .text:000000000000080e $t
    stm32eforth-fl.s:1380   .text:0000000000000841 $d
    stm32eforth-fl.s:1380   .text:0000000000000842 $t
    stm32eforth-fl.s:1391   .text:0000000000000851 $d
    stm32eforth-fl.s:1391   .text:0000000000000852 $t
    stm32eforth-fl.s:1402   .text:0000000000000863 $d
    stm32eforth-fl.s:1402   .text:0000000000000864 $t
    stm32eforth-fl.s:1441   .text:000000000000089f $d
    stm32eforth-fl.s:1441   .text:00000000000008a0 $t
    stm32eforth-fl.s:1454   .text:00000000000008b3 $d
    stm32eforth-fl.s:1454   .text:00000000000008b4 $t
    stm32eforth-fl.s:1481   .text:00000000000008e1 $d
    stm32eforth-fl.s:1481   .text:00000000000008e2 $t
    stm32eforth-fl.s:1505   .text:0000000000000905 $d
    stm32eforth-fl.s:1505   .text:0000000000000906 $t
    stm32eforth-fl.s:1534   .text:0000000000000933 $d
    stm32eforth-fl.s:1534   .text:0000000000000934 $t
    stm32eforth-fl.s:1607   .text:00000000000009a3 $d
    stm32eforth-fl.s:1607   .text:00000000000009a4 $t
    stm32eforth-fl.s:1622   .text:00000000000009bb $d
    stm32eforth-fl.s:1622   .text:00000000000009bc $t
    stm32eforth-fl.s:1637   .text:00000000000009d7 $d
    stm32eforth-fl.s:1637   .text:00000000000009d8 $t
    stm32eforth-fl.s:1710   .text:0000000000000a33 $d
    stm32eforth-fl.s:1710   .text:0000000000000a34 $t
    stm32eforth-fl.s:1721   .text:0000000000000a47 $d
    stm32eforth-fl.s:1721   .text:0000000000000a48 $t
    stm32eforth-fl.s:1756   .text:0000000000000a83 $d
    stm32eforth-fl.s:1756   .text:0000000000000a84 $t
    stm32eforth-fl.s:1780   .text:0000000000000aa1 $d
    stm32eforth-fl.s:1780   .text:0000000000000aa2 $t
    stm32eforth-fl.s:1804   .text:0000000000000acb $d
    stm32eforth-fl.s:1804   .text:0000000000000acc $t
    stm32eforth-fl.s:1853   .text:0000000000000b1d $d
    stm32eforth-fl.s:1853   .text:0000000000000b1e $t
    stm32eforth-fl.s:1876   .text:0000000000000b47 $d
    stm32eforth-fl.s:1876   .text:0000000000000b48 $t
    stm32eforth-fl.s:1887   .text:0000000000000b5d $d
    stm32eforth-fl.s:1887   .text:0000000000000b5e $t
    stm32eforth-fl.s:1902   .text:0000000000000b79 $d
    stm32eforth-fl.s:1902   .text:0000000000000b7a $t
    stm32eforth-fl.s:1915   .text:0000000000000b95 $d
    stm32eforth-fl.s:1915   .text:0000000000000b96 $t
    stm32eforth-fl.s:1941   .text:0000000000000bc9 $d
    stm32eforth-fl.s:1941   .text:0000000000000bca $t
    stm32eforth-fl.s:1957   .text:0000000000000be1 $d
    stm32eforth-fl.s:1957   .text:0000000000000be2 $t
    stm32eforth-fl.s:1976   .text:0000000000000c0f $d
    stm32eforth-fl.s:1976   .text:0000000000000c10 $t
    stm32eforth-fl.s:2043   .text:0000000000000cc1 $d
    stm32eforth-fl.s:2043   .text:0000000000000cc2 $t
    stm32eforth-fl.s:2100   .text:0000000000000d3b $d
    stm32eforth-fl.s:2100   .text:0000000000000d3c $t
    stm32eforth-fl.s:2167   .text:0000000000000de5 $d
    stm32eforth-fl.s:2167   .text:0000000000000de6 $t
    stm32eforth-fl.s:2186   .text:0000000000000e0d $d
    stm32eforth-fl.s:2186   .text:0000000000000e0e $t
ARM GAS  stm32eforth-fl.s 			page 116


    stm32eforth-fl.s:2225   .text:0000000000000e5f $d
    stm32eforth-fl.s:2225   .text:0000000000000e60 $t
    stm32eforth-fl.s:2264   .text:0000000000000ead $d
    stm32eforth-fl.s:2264   .text:0000000000000eae $t
    stm32eforth-fl.s:2288   .text:0000000000000ee1 $d
    stm32eforth-fl.s:2288   .text:0000000000000ee2 $t
    stm32eforth-fl.s:2311   .text:0000000000000f11 $d
    stm32eforth-fl.s:2311   .text:0000000000000f12 $t
    stm32eforth-fl.s:2378   .text:0000000000000fdf $d
    stm32eforth-fl.s:2378   .text:0000000000000fe0 $t
    stm32eforth-fl.s:2392   .text:0000000000000ffd $d
    stm32eforth-fl.s:2392   .text:0000000000000ffe $t
    stm32eforth-fl.s:2425   .text:000000000000104b $d
    stm32eforth-fl.s:2425   .text:000000000000104c $t
    stm32eforth-fl.s:2442   .text:0000000000001075 $d
    stm32eforth-fl.s:2442   .text:0000000000001076 $t
    stm32eforth-fl.s:2458   .text:000000000000109f $d
    stm32eforth-fl.s:2458   .text:00000000000010a0 $t
    stm32eforth-fl.s:2525   .text:0000000000001137 $d
    stm32eforth-fl.s:2525   .text:0000000000001138 $t
    stm32eforth-fl.s:2664   .text:0000000000001313 $d
    stm32eforth-fl.s:2664   .text:0000000000001314 $t
    stm32eforth-fl.s:2683   .text:0000000000001349 $d
    stm32eforth-fl.s:2683   .text:000000000000134a $t
    stm32eforth-fl.s:2703   .text:000000000000137f $d
    stm32eforth-fl.s:2703   .text:0000000000001380 $t
    stm32eforth-fl.s:2779   .text:00000000000013ff $d
    stm32eforth-fl.s:2779   .text:0000000000001400 $t
    stm32eforth-fl.s:2817   .text:000000000000145f $d
    stm32eforth-fl.s:2817   .text:0000000000001460 $t
    stm32eforth-fl.s:2977   .text:000000000000164b $d
    stm32eforth-fl.s:2977   .text:000000000000164c $t
    stm32eforth-fl.s:3020   .text:00000000000016ad $d
    stm32eforth-fl.s:3020   .text:00000000000016ae $t
    stm32eforth-fl.s:3035   .text:00000000000016d1 $d
    stm32eforth-fl.s:3035   .text:00000000000016d2 $t
    stm32eforth-fl.s:3271   .text:000000000000195b $d
    stm32eforth-fl.s:3271   .text:000000000000195c $t
    stm32eforth-fl.s:3425   .text:0000000000001b27 $d
    stm32eforth-fl.s:3425   .text:0000000000001b28 $t
    stm32eforth-fl.s:3439   .text:0000000000001b51 $d
    stm32eforth-fl.s:3439   .text:0000000000001b52 $t
    stm32eforth-fl.s:3462   .text:0000000000001b97 $d
    stm32eforth-fl.s:3462   .text:0000000000001b98 $t
    stm32eforth-fl.s:3475   .text:0000000000001bb5 $d
    stm32eforth-fl.s:3475   .text:0000000000001bb6 $t
    stm32eforth-fl.s:3531   .text:0000000000001c17 $d
    stm32eforth-fl.s:3531   .text:0000000000001c18 $t
    stm32eforth-fl.s:3571   .text:0000000000001c6f $d
    stm32eforth-fl.s:3571   .text:0000000000001c70 $t
    stm32eforth-fl.s:3579   .text:0000000000001c9d $d
    stm32eforth-fl.s:3579   .text:0000000000001c9e $t
    stm32eforth-fl.s:3597   .text:0000000000001ce5 $d
    stm32eforth-fl.s:3597   .text:0000000000001ce6 $t
    stm32eforth-fl.s:3618   .text:0000000000001d2d $d
    stm32eforth-fl.s:3618   .text:0000000000001d2e $t
    stm32eforth-fl.s:3634   .text:0000000000001d5d $d
ARM GAS  stm32eforth-fl.s 			page 117


    stm32eforth-fl.s:3634   .text:0000000000001d5e $t
    stm32eforth-fl.s:3677   .text:0000000000001e01 $d
    stm32eforth-fl.s:3677   .text:0000000000001e02 $t
    stm32eforth-fl.s:3716   .text:0000000000001e83 $d
    stm32eforth-fl.s:3716   .text:0000000000001e84 $t
    stm32eforth-fl.s:3727   .text:0000000000001e9b $d
    stm32eforth-fl.s:3727   .text:0000000000001e9c $t
    stm32eforth-fl.s:3758   .text:0000000000001f01 $d
    stm32eforth-fl.s:3758   .text:0000000000001f02 $t
    stm32eforth-fl.s:3806   .text:0000000000001fa3 $d
    stm32eforth-fl.s:3806   .text:0000000000001fa4 $t
    stm32eforth-fl.s:3980   .text:0000000000002159 $d
    stm32eforth-fl.s:3980   .text:000000000000215a $t
    stm32eforth-fl.s:4019   .text:00000000000021c3 $d
    stm32eforth-fl.s:4019   .text:00000000000021c4 $t
    stm32eforth-fl.s:4051   .text:000000000000222b $d
    stm32eforth-fl.s:4051   .text:000000000000222c $t
    stm32eforth-fl.s:4066   .text:000000000000224d $d
    stm32eforth-fl.s:4066   .text:000000000000224e $t
    stm32eforth-fl.s:4095   .text:000000000000228d $d
    stm32eforth-fl.s:4095   .text:000000000000228e $t
    stm32eforth-fl.s:4122   .text:00000000000022cb $d
    stm32eforth-fl.s:4122   .text:00000000000022cc $t
    stm32eforth-fl.s:4135   .text:00000000000022eb $d
    stm32eforth-fl.s:4135   .text:00000000000022ec $t
    stm32eforth-fl.s:4148   .text:000000000000230b $d
    stm32eforth-fl.s:4148   .text:000000000000230c $t
    stm32eforth-fl.s:4215   .text:00000000000023c9 $d
    stm32eforth-fl.s:4215   .text:00000000000023ca $t
    stm32eforth-fl.s:4357   .text:0000000000002539 $d
    stm32eforth-fl.s:4357   .text:000000000000253a $t
    stm32eforth-fl.s:4412   .text:00000000000025df $d
    stm32eforth-fl.s:4412   .text:00000000000025e0 $t
    stm32eforth-fl.s:4426   .text:0000000000002603 $d
    stm32eforth-fl.s:4426   .text:0000000000002604 $t
    stm32eforth-fl.s:4466   .text:000000000000267b $d
    stm32eforth-fl.s:4466   .text:000000000000267c $t
    stm32eforth-fl.s:4483   .text:00000000000026ad $d
    stm32eforth-fl.s:4483   .text:00000000000026ae $t
    stm32eforth-fl.s:4556   .text:0000000000002771 $d
    stm32eforth-fl.s:4556   .text:0000000000002772 $t
    stm32eforth-fl.s:4593   .text:00000000000027eb $d
    stm32eforth-fl.s:4593   .text:00000000000027ec $t
    stm32eforth-fl.s:4778   .text:000000000000291f $d
    stm32eforth-fl.s:4778   .text:0000000000002920 $t
    stm32eforth-fl.s:4782   .text:0000000000002947 $d

UNDEFINED SYMBOLS
_mstack
