ARM GAS  stm32eforth-fl.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-12-07
   6              	*  IMPLEMENTATION NOTES:
   7              	* 	------------------------------------------------------------
   8              	*	La version stm32eforth-fl est une adaptation 
   9              	*	pour exécution en mémoire FLASH. L'objection de 
  10              	*	conserver la mémoire RAM pour les données seulement.
  11              	*	Les mots utilisateur seront donc compilés en mémoire FLASH.
  12              	*	-------------------------------------------------------------  
  13              	*    Use USART1 for console I/O
  14              	*    port config: 115200 8N1 
  15              	*    TX on  PA9,  RX on PA10  
  16              	*
  17              	*    eForth is executed from flash, not copied to RAM
  18              	*    eForth use main stack R13 as return stack (thread stack not used) 
  19              	*
  20              	*    Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  21              	*    a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  22              	*    a 128 bytes tib is reserved below flwr_buffer 
  23              	*    Forth dstack is below tib and reserve 512 bytes 
  24              	*   
  25              	******************************************************
  26              	
  27              	*****************************************************************************
  28              	*	STM32eForth version 7.20
  29              	*	Chen-Hanson Ting,  July 2014
  30              	
  31              	*	Subroutine Threaded Forth Model
  32              	*	Adapted to STM32F407-Discovery Board
  33              	*	Assembled by Keil uVision 5.10
  34              	
  35              	*	Version 4.03
  36              	*	Direct Threaded Forth Model
  37              	*	Derived from 80386 eForth versin 4.02
  38              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  39              	
  40              	*	Subroutine thread (Branch-Link) model
  41              	*	  Register assignments
  42              	*	IP	 	R0 	*scratch
  43              	*	SP	 	R1  * data stack pointer
  44              	*	RP	 	R2 * return stack pointer 
  45              	*	UP	 	R3 
  46              	*	WP	 	R4	*scratch 
  47              	*	TOS	 	R5  * top of data stack
  48              	*	XP	 	R6 	*scratch
  49              	*	YP	 	R7	*scratch
  50              	*	  All Forth words are called by 
  51              	*	BL.W	addr
  52              	*	  All low level code words are terminaled by
  53              	*	BX	LR 	(_NEXT)
  54              	*	  All high level Forth words start with
  55              	*	STRFD	RP!,{LR}	(_NEST)
  56              	*	  All high level Forth words end with
  57              	*	LDRFD	RP!,{PC}	(_UNNEST)
ARM GAS  stm32eforth-fl.s 			page 2


  58              	*	  Top of data stack is cached in R5
  59              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  60              	*	TX on PA9 and RX on PA10.
  61              	
  62              	*	Version 5.02, 09oct04cht
  63              	*	fOR ADuC702x from Analog Devices
  64              	*	Version 6.01, 10apr08cht a
  65              	*	.p2align 2 to at91sam7x256
  66              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  67              	*	Running under uVision3 RealView from Keil
  68              	*	Version 7.01, 29jun14cht
  69              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  70              	*	.p2aligned to eForth 2 Model
  71              	*	Assembled to flash memory and executed therefrom.
  72              	*	Version 7.10, 30jun14cht
  73              	*	Flash memory mapped to Page 0 where codes are executed
  74              	*	Version 7.20, 02jul14cht
  75              	*	Irreducible Complexity
  76              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  77              	*	TURNKEY saves current application from RAM to flash.
  78              	*********************************************************/
  79              	
  80              	  .syntax unified
  81              	  .cpu cortex-m3
  82              	  .fpu softvfp
  83              	  .thumb
  84              	
  85              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
ARM GAS  stm32eforth-fl.s 			page 3


  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
ARM GAS  stm32eforth-fl.s 			page 4


  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
  86              	
  87              	/* blue pill specific constants */ 
  88              	  .equ LED_GPIO, GPIOC_BASE_ADR
  89              	  .equ LED_PIN, 13
  90              	  .equ UART, USART1_BASE_ADR 
  91              	
  92              	/* eForth specific constants */
  93              		.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  94              		.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  95              		.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  96              		.equ UPP ,	0x20000000	/*start of user area (UP0) */
  97              		.equ DTOP ,	0x20000100	/*start of usable RAM area (HERE) */
  98              		.equ DEND , 0x20004E00  /*usable RAM end */
  99              		.equ RAMEND, 0x20005000 // 20Ko
 100              		.equ MAPOFFSET,	0x00000000	/* absolute */
 101              	
 102              	/*************************************
 103              	   system variables offset from UPP
 104              	*************************************/
 105              	  .equ SEED_OFS, 4    // prng seed 
ARM GAS  stm32eforth-fl.s 			page 5


 106              	  .equ MSEC_OFS, SEED_OFS+4  // millseconds counter
 107              	  .equ TIMER_OFS, MSEC_OFS+4  // count down timer
 108              	  .equ BOOT_OFS, TIMER_OFS+4  // boot program address
 109              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
 110              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
 111              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
 112              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
 113              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
 114              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
 115              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
 116              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
 117              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
 118              	  .equ CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
 119              	  .equ UTOP_OFS, CTOP_OFS+4 // where data space begin. 
 120              	  .equ LASTN_OFS, UTOP_OFS+4     // last word in dictionary link nfa 
 121              	  .equ VARS_END_OFS, LASTN_OFS+4 // end of system variables  
 122              	
 123              	/***********************************************
 124              	* MACROS
 125              	*	Assemble inline direct threaded code ending.
 126              	***********************************************/
 127              	 	.macro	_NEXT /*end low level word */
 128              		BX	LR
 129              		.endm
 130              	
 131              	 	.macro	_NEST /*start high level word */
 132              		STMFD	R2!,{LR}
 133              		.endm
 134              	
 135              	 	.macro	_UNNEST	/*end high level word */
 136              		LDMFD	R2!,{PC}
 137              		.endm
 138              	
 139              	 	.macro	_DOLIT /*long literals */
 140              		BL	DOLIT
 141              		.endm
 142              	
 143              	 	.macro	_PUSH	/*push R5 on data stack*/
 144              		STR	R5,[R1,#-4]!
 145              		.endm
 146              	
 147              	 	.macro	_POP /*pop data stack to R5 */
 148              		LDR	R5,[R1],#4
 149              		.endm
 150              	
 151              	/*************************************
 152              	*   interrupt service vectors table 
 153              	**************************************/
 154              	   .section  .isr_vector,"a",%progbits
 155              	  .type  isr_vectors, %object
 156              	
 157              	isr_vectors:
 158 0000 00000000 	  .word   _mstack          /* main return stack address */
 159 0004 00000000 	  .word   reset_handler    /* startup address */
 160              	/* core interrupts || exceptions */
 161 0008 00000000 	  .word   default_handler  /*  NMI */
 162 000c 00000000 	  .word   default_handler  /*  HardFault */
ARM GAS  stm32eforth-fl.s 			page 6


 163 0010 00000000 	  .word   default_handler  /*  Memory Management */
 164 0014 00000000 	  .word   default_handler  /* Bus fault */
 165 0018 00000000 	  .word   default_handler  /* Usage fault */
 166 001c 00000000 	  .word   0
 167 0020 00000000 	  .word   0
 168 0024 00000000 	  .word   0
 169 0028 00000000 	  .word   0
 170 002c 00000000 	  .word   default_handler  /* SWI instruction */
 171 0030 00000000 	  .word   default_handler  /* Debug monitor */
 172 0034 00000000 	  .word   0
 173 0038 00000000 	  .word   default_handler  /* PendSV */
 174 003c 00000000 	  .word   systick_handler  /* Systick */
 175              	  
 176              	  /* External Interrupts */
 177 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 178 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 179 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 180 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 181 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 182 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 183 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 184 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 185 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 186 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 187 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 188 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 189 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 190 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 191 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 192 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 193 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 194 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 195 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 196 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 197 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 198 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 199 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 200 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 201 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 202 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 203 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 204 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 205 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 206 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 207 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 208 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 209 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 210 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 211 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 212 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 213 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 214 00d4 00000000 	  .word      default_handler /* IRQ37, USART1 */                   
 215 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 216 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 217 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 218 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 219 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
ARM GAS  stm32eforth-fl.s 			page 7


 220 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 221 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 222 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 223 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 224 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 225 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 226 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 227 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 228 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 229 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 230 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 231 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 232 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 233 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 234 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 235 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 236 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 237              	
 238              		.p2align 4 
 239              	/******************************************************
 240              	*  COLD start moves the following to USER variables.
 241              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 242              	******************************************************/
 243              	UZERO:
 244 0130 00000000 		.word 0  			/*Reserved */
 245 0134 55AA0000 		.word 0xaa55 /* SEED  */ 
 246 0138 00000000 		.word 0      /* MSEC */
 247 013c 00000000 	    .word 0     /* TIMER */
 248 0140 60220000 		.word HI+MAPOFFSET  /*'BOOT */
 249 0144 0A000000 		.word BASEE 	/*BASE */
 250 0148 00000000 		.word 0			/*tmp */
 251 014c 00000000 		.word 0			/*SPAN */
 252 0150 00000000 		.word 0			/*>IN */
 253 0154 00000000 		.word 0			/*#TIB */
 254 0158 804E0020 		.word TIBB	/*TIB */
 255 015c E0160000 		.word INTER+MAPOFFSET	/*'EVAL */
 256 0160 00000000 		.word 0			/*HLD */
 257 0164 CC220000 		.word LASTN+MAPOFFSET	/*CONTEXT */
 258 0168 00240000 		.word CTOP+MAPOFFSET	/* end of system dictionnary */
 259 016c 50040000 		.word USER_RAM  	    /* end of user RAM */
 260 0170 CC220000 		.word LASTN+MAPOFFSET	/*LAST word in dictionary */
 261 0174 00000000 		.word 0,0			/*reserved */
 261      00000000 
 262              	ULAST:
 263              	
 264              	
 265              	/*****************************************************
 266              	* default isr handler called on unexpected interrupt
 267              	*****************************************************/
 268              	    .section  .text.default_handler,"ax",%progbits
 269              		.p2align 10
 270              	  .type default_handler, %function
 271              	  .global default_handler
 272              	default_handler:
 273 0000 DFF81870 		ldr r7,exception_msg 
 274 0004 17F8010B 		ldrb r0,[r7],#1 
 275 0008 41F8045D 	1:	_PUSH 
ARM GAS  stm32eforth-fl.s 			page 8


 276 000c 17F8015B 		ldrb r5,[r7],#1
 277 0010 00F010F9 		bl EMIT 
 278 0014 0138     		subs r0,r0,#1 
 279 0016 F7D1     		bne 1b 	
 280 0018 FFF7FEBF 		b reset_handler   
 281              	  .size  default_handler, .-default_handler
 282              	exception_msg:
 283 001c 20000000 		.word .+4 
 284 0020 12       		.byte 18
 285 0021 0A0D6578 		.ascii "\n\rexeption reboot!"
 285      65707469 
 285      6F6E2072 
 285      65626F6F 
 285      7421
 286 0033 00       		.p2align 2
 287              	
 288              	/*********************************
 289              		system milliseconds counter
 290              	*********************************/	
 291              	  .type systick_handler, %function
 292              	  .p2align 2 
 293              	  .global systick_handler
 294              	systick_handler:
 295 0034 4FF00003 	  mov r3,#UPP&0xffff
 296 0038 C2F20003 	  movt r3,#UPP>>16  	
 297 003c 9868     	  ldr r0,[r3,#MSEC_OFS]  
 298 003e 00F10100 	  add r0,#1
 299 0042 9860     	  str r0,[r3,#MSEC_OFS]
 300 0044 D868     	  ldr r0,[r3,#TIMER_OFS]
 301 0046 10B1     	  cbz r0, systick_exit
 302 0048 A0F10100 	  sub r0,#1
 303 004c D860     	  str r0,[r3,#TIMER_OFS]
 304              	systick_exit:
 305 004e 7047     	  bx lr
 306              	
 307              	/**************************************
 308              	  reset_handler execute at MCU reset
 309              	***************************************/
 310              	    .section  .text.reset_handler
 311              	  .type  reset_handler, %function
 312              	  .global reset_handler
 313              	reset_handler:
 314 0000 00F072F8 		bl	remap 
 315 0004 00F008F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 316 0008 01F018FC 		bl	UNLOCK			/* unlock flash memory */
 317 000c 0148     		ldr r0,forth_entry
 318 000e 40F00100 		orr r0,#1
 319 0012 0047     		bx r0 
 320              	forth_entry:
 321 0014 D4220000 		.word COLD+MAPOFFSET 
 322              	
 323              	
 324              	  .type init_devices, %function
 325              	  .p2align 2 
 326              	init_devices:
 327              	/* init clock to HSE 72 Mhz */
 328              	/* set 2 wait states in FLASH_ACR_LATENCY */
ARM GAS  stm32eforth-fl.s 			page 9


 329 0018 4FF40050 		mov r0,#FLASH_BASE_ADR&0xffff
 330 001c C4F20200 		movt r0,#FLASH_BASE_ADR>>16 
 331 0020 4FF01202 	  mov r2,#0x12
 332 0024 0260     	  str r2,[r0,#FLASH_ACR]
 333              	/* configure clock for HSE, 8 Mhz crystal */
 334              	/* enable HSE in RCC_CR */
 335 0026 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 336 002a C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 337 002e 0168     	  ldr r1,[r0,#RCC_CR]
 338 0030 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 339 0034 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 340              	/* wait HSERDY loop */
 341              	wait_hserdy:
 342 0036 0168     	  ldr r1,[r0,#RCC_CR]
 343 0038 11F4003F 	  tst r1,#(1<<17)
 344 003c FBD0     	  beq wait_hserdy
 345              	
 346              	/************************************************* 
 347              	   configure PLL mul factor and source 
 348              	   SYSCLOCK=72 Mhz
 349              	   select HSE as  PLL source clock
 350              	   multiply frequency by 9 
 351              	   APB1 clock is limited to 36 Mhz so divide by 2 
 352              	****************************************************/
 353 003e 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 354 0042 C0F21D01 	  movt r1,#(7<<2)|1
 355 0046 4160     	  str r1,[r0,#RCC_CFGR]
 356              	  /* enable PLL */
 357 0048 0168     	  ldr r1,[r0,#RCC_CR]
 358 004a 41F08071 	  orr r1, #1<<24 
 359 004e 0160     	  str r1,[r0,#RCC_CR]
 360              	/* wait for PLLRDY */
 361              	wait_pllrdy:
 362 0050 0168     	  ldr r1,[r0,#RCC_CR]
 363 0052 11F0007F 	  tst r1,#(1<<25)
 364 0056 FBD0     	  beq wait_pllrdy 
 365              	/* select PLL as sysclock */
 366 0058 4168     	  ldr r1,[r0,#RCC_CFGR]
 367 005a 4FF6FC72 	  mov r2,#0xfffc
 368 005e CFF6FF72 	  movt r2,#0xffff
 369 0062 01EA0201 	  and r1,r1,r2 
 370 0066 4FF00202 	  mov r2,#2
 371 006a 41EA0201 	  orr r1,r1,r2
 372 006e 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 373              	/* wait for SWS==2 */
 374              	wait_sws:
 375 0070 4168     	  ldr r1,[r0,#RCC_CFGR]
 376 0072 11F0080F 	  tst r1,#(2<<2)
 377 0076 FBD0     	  beq wait_sws
 378              	/* now sysclock is 72 Mhz */
 379              	
 380              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 381 0078 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 382 007c C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 383 0080 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 384 0084 8161     	  str	r1, [r0, #RCC_APB2ENR]
 385              	
ARM GAS  stm32eforth-fl.s 			page 10


 386              	/* configure GPIOC:13 as output for user LED */
 387 0086 4FF48050 	  mov r0,#GPIOC_BASE_ADR&0xffff
 388 008a C4F20100 	  movt r0,#GPIOC_BASE_ADR>>16
 389 008e 4168     	  ldr r1,[r0,#GPIO_CRH]
 390 0090 6FF47002 	  mvn r2,#(15<<20)
 391 0094 01EA0201 	  and r1,r1,r2
 392 0098 4FF4C002 	  mov r2,#(6<<20)
 393 009c 41EA0201 	  orr r1,r1,r2
 394 00a0 4160     	  str r1,[r0,#GPIO_CRH]
 395              	
 396              	/* configure USART1 */
 397              	/* set GPIOA PIN 9, uart TX  */
 398 00a2 4FF40060 	  mov r0,#GPIOA_BASE_ADR&0XFFFF
 399 00a6 C4F20100 	  movt r0,#GPIOA_BASE_ADR>>16	
 400 00aa 4168     	  ldr r1,[r0,#GPIO_CRH]
 401 00ac 6FF0F002 	  mvn r2,#(15<<4)
 402 00b0 01EA0201 	  and r1,r1,r2
 403 00b4 4FF0A002 	  mov r2,#(0xA<<4)
 404 00b8 41EA0201 	  orr r1,r1,r2 
 405 00bc 4160     	  str r1,[r0,#GPIO_CRH]
 406              	
 407 00be 4FF46050 	  mov r0,#UART&0xFFFF
 408 00c2 C4F20100 	  movt r0,#UART>>16	
 409              	/* BAUD rate */
 410 00c6 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 411 00ca 8160     	  str r1,[r0,#USART_BRR]
 412 00cc 42F20C01 	  mov r1,#(3<<2)+(1<<13)
 413 00d0 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 414              	/* configure systicks for 1msec ticks */
 415 00d2 4EF21000 	  mov r0,#STK_BASE_ADR&0xFFFF
 416 00d6 CEF20000 	  movt r0,#STK_BASE_ADR>>16	
 417 00da 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 418 00de 4160     	  str r1,[r0,#STK_LOAD]
 419 00e0 4FF00301 	  mov r1,#3
 420 00e4 0160     	  str r1,[r0,STK_CTL]
 421 00e6 7047     	  _NEXT  
 422              	
 423              	/* copy system variable to RAM */ 
 424              		.type remap, %function 
 425              	remap:
 426 00e8 DFF82C00 		ldr r0,remap_dest  
 427 00ec 0949     		ldr r1,remap_src 
 428 00ee 4FF04C02 		mov r2,#ULAST-UZERO 
 429 00f2 51F8043B 	1:	ldr r3,[r1],#4 
 430 00f6 40F8043B 		str r3,[r0],#4 
 431 00fa 043A     		subs R2,#4 
 432 00fc F9D1     		bne 1b
 433              	// zero end of RAM 
 434 00fe 4FF4A042 		mov r2,#0x5000
 435 0102 C2F20002 		movt r2,#0x2000
 436 0106 83EA0303 		eor r3,r3,r3 
 437 010a 40F8043B 	2:  str r3,[r0],#4
 438 010e 9042     		cmp r0,r2 
 439 0110 FBDB     		blt 2b 
 440 0112 7047     		_NEXT 
 441              	remap_src:
 442 0114 30010000 		.word UZERO 
ARM GAS  stm32eforth-fl.s 			page 11


 443              	remap_dest:
 444 0118 00000020 		.word RAM_ADR  
 445              	
 446              	
 447              	/********************
 448              	* Version control
 449              	*******************/
 450              	.equ VER ,	0x01	/*major release version */
 451              	.equ EXT ,	0x00	/*minor extension */
 452              	
 453              	/* Constants */
 454              	
 455              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 456              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 457              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 458              	
 459              	.equ CELLL ,	4	/*size of a cell */
 460              	.equ BASEE ,	10	/*default radix */
 461              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 462              	
 463              	.equ BKSPP ,	8	/*backspace */
 464              	.equ LF ,	10	  /*line feed */
 465              	.equ CRR ,	13	/*carriage return */
 466              	.equ ERR ,	27	/*error escape */
 467              	.equ TIC ,	39	/*tick */
 468              	
 469              	/********************************************************
 470              	* RAM memory mapping
 471              	* 	0x20000000	RAM base address
 472              	*	0x20000000  system variables	
 473              	* 	0x20000100	Forth dictionary
 474              	* 	0x2000????	top of dictionary, HERE
 475              	* 	0x2000????	WORD buffer, HERE+16
 476              	*   0x20004E00  end of user space
 477              	* 	0x20004E80	top of data stack  R2
 478              	* 	0x20004E80	TIB terminal input buffer
 479              	* 	0x20004F80	top of return stack  R1
 480              	* 	0x20005000	top of hardware stack for interrupts R14
 481              	********************************************************/
 482              	
 483              	
 484              	
 485              	 
 486              	
 487              	/***********************************
 488              	//  Start of Forth dictionary
 489              	***********************************/
 490              	
 491              		.p2align 2 
 492              	
 493              	// RANDOM ( n1 -- {0..n1-1} )
 494              	// return pseudo random number 
 495              	// REF: https://en.wikipedia.org/wiki/Xorshift
 496              	
 497 011c 00000000 		.word 0
 498 0120 06       	_RAND: .byte 6
 499 0121 52414E44 		.ascii "RANDOM"
ARM GAS  stm32eforth-fl.s 			page 12


 499      4F4D
 500 0127 00       		.p2align 2 
 501              	RAND:
 502 0128 42F804ED 		_NEST 
 503 012c 00F0EEFA 		bl SEED 
 504 0130 00F0D2F8 		bl AT 
 505 0134 4FEA4534 		lsl r4,r5,#13
 506 0138 85EA0405 		eor r5,r4
 507 013c 4FEA5544 		lsr r4,r5,#17
 508 0140 85EA0405 		eor r5,r4
 509 0144 4FEA4514 		lsl r4,r5,#5
 510 0148 85EA0405 		eor r5,r4
 511 014c 00F008F9 		bl DUPP 
 512 0150 00F0DCFA 		bl SEED 
 513 0154 00F0B6F8 		bl STORE 
 514 0158 00F036FA 		bl ABSS
 515 015c 00F008F9 		bl SWAP 
 516 0160 00F006FC 		bl MODD 
 517 0164 52F804FB 		_UNNEST 
 518              	
 519              	// REBOOT ( -- )
 520              	// hardware reset 
 521 0168 20010000 		.word _RAND+MAPOFFSET
 522 016c 06       	_REBOOT: .byte 6
 523 016d 5245424F 		.ascii "REBOOT"
 523      4F54
 524 0173 00       		.p2align 2 
 525              	REBOOT:
 526 0174 0348     		ldr r0,scb_adr 
 527 0176 C168     		ldr r1,[r0,#SCB_AIRCR]
 528 0178 41F00401 		orr r1,#(1<<2)
 529 017c C0F2FA51 		movt r1,#SCB_VECTKEY
 530 0180 C160     		str r1,[r0,#SCB_AIRCR]
 531 0182 FEE7     		b . 
 532              	scb_adr:
 533 0184 00ED00E0 		.word SCB_BASE_ADR 
 534              	
 535              	// PAUSE ( u -- ) 
 536              	// suspend execution for u milliseconds
 537 0188 6C010000 		.word _REBOOT+MAPOFFSET
 538 018c 05       	_PAUSE: .byte 5
 539 018d 50415553 		.ascii "PAUSE"
 539      45
 540 0192 00BF     		.p2align 2
 541              	PAUSE:
 542 0194 42F804ED 		_NEST 
 543 0198 00F0CCFA 		BL TIMER 
 544 019c 00F092F8 		BL STORE 
 545              	PAUSE_LOOP:
 546 01a0 00F0C8FA 		BL TIMER 
 547 01a4 00F098F8 		BL AT 
 548 01a8 00F070F8 		BL QBRAN 
 549 01ac B8010000 		.word PAUSE_EXIT 
 550 01b0 00F078F8 		BL BRAN 
 551 01b4 A0010000 		.word PAUSE_LOOP 
 552              	PAUSE_EXIT: 		
 553 01b8 52F804FB 		_UNNEST 
ARM GAS  stm32eforth-fl.s 			page 13


 554              	
 555              	//  ULED ( T|F -- )
 556              	// control user LED, -1 ON, 0 OFF  
 557 01bc 8C010000 		.word _PAUSE + MAPOFFSET
 558 01c0 04       	_ULED: .byte 4
 559 01c1 554C4544 		.ascii "ULED"
 560 01c5 0000BF   		.p2align 2
 561              		.type ULED, %function 
 562              	ULED:
 563 01c8 4FF40056 		mov r6,#(1<<LED_PIN)
 564 01cc 4FF48054 		mov r4,#LED_GPIO&0xffff
 565 01d0 C4F20104 		movt r4,#LED_GPIO>>16
 566 01d4 2800     		movs r0,r5 
 567 01d6 51F8045B 		_POP
 568 01da 01D0     		beq ULED_OFF 
 569 01dc 6661     		str r6,[r4,#GPIO_BRR]
 570 01de 7047     		_NEXT 
 571              	ULED_OFF:
 572 01e0 2661     		str r6,[r4,#GPIO_BSRR]
 573 01e2 7047     		_NEXT 
 574              		
 575              	//    ?RX	 ( -- c T | F )
 576              	// 	Return input character and true, or a false if no input.
 577 01e4 C0010000 		.word	_ULED+MAPOFFSET
 578 01e8 04       	_QRX:	.byte   4
 579 01e9 3F4B4559 		.ascii "?KEY"
 580 01ed 0000BF   		.p2align 2 
 581              	QKEY:
 582              	QRX: 
 583 01f0 41F8045D 		_PUSH
 584 01f4 4FF46054 		mov r4,#UART&0xFFFF
 585 01f8 C4F20104 		movt r4,#UART>>16
 586 01fc 2688     		ldrh	r6, [r4, #USART_SR]
 587 01fe 16F02006 		ands	r6, #0x20		//  RXE
 588 0202 05D0     		BEQ	QRX1
 589 0204 6568     	 	LDR	R5, [R4, #USART_DR]
 590 0206 41F8045D 		_PUSH
 591 020a 18BF     	    IT NE 
 592 020c 6FF00005 		MVNNE	R5,#0
 593              	QRX1:
 594 0210 08BF     		IT EQ 
 595 0212 0025     	    MOVEQ	R5,#0
 596 0214 7047     		_NEXT
 597 0216 00BF     		.p2align 2 
 598              	
 599              	//    TX!	 ( c -- )
 600              	// 	Send character c to the output device.
 601              	
 602 0218 E8010000 		.word	_QRX+MAPOFFSET
 603 021c 04       	_TXSTO:	.byte 4
 604 021d 454D4954 		.ascii "EMIT"
 605 0221 0000BF   		.p2align 2 	
 606              	TXSTO:
 607              	EMIT:
 608              	TECHO:
 609 0224 4FF46054 		mov r4,#UART&0xFFFF
 610 0228 C4F20104 		movt r4,#UART>>16
ARM GAS  stm32eforth-fl.s 			page 14


 611              	TX1:
 612 022c 2688     		ldrh	r6, [r4, #USART_SR]	
 613 022e 16F08006 		ands	r6, #0x80		//  TXE bit 
 614 0232 FBD0     		beq	TX1
 615 0234 A580     		strh	r5, [r4, #USART_DR]	
 616 0236 51F8045B 		_POP
 617 023a 7047     		_NEXT
 618              		
 619              	// **************************************************************************
 620              	//  The kernel
 621              	
 622              	//    NOP	( -- )
 623              	// 	do nothing.
 624              	
 625 023c 1C020000 		.word	_TXSTO+MAPOFFSET
 626 0240 03       	_NOP:	.byte   3
 627 0241 4E4F50   		.ascii "NOP"
 628              		.p2align 2 	
 629              	NOP:
 630 0244 7047     		_NEXT
 631              	 
 632              	
 633              	//    doLIT	( -- w )
 634              	// 	Push an inline literal.
 635              	
 636              	// 	.word	_NOP+MAPOFFSET
 637              	// _LIT	.byte   COMPO+5
 638              	// 	.ascii "doLIT"
 639              	// 	.p2align 2 	
 640              	DOLIT:
 641 0246 41F8045D 		_PUSH				//  store R5 on data stack
 642 024a 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 643 024e 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 644 0252 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 645 0256 7047     		_NEXT
 646              	
 647              	//    EXECUTE	( ca -- )
 648              	// 	Execute the word at ca.
 649              	
 650 0258 40020000 		.word	_NOP+MAPOFFSET
 651 025c 07       	_EXECU:	.byte   7
 652 025d 45584543 		.ascii "EXECUTE"
 652      555445
 653              		.p2align 2 	
 654              	EXECU:
 655 0264 45F00104 		ORR	R4,R5,#1		//  b0=1 
 656 0268 51F8045B 		_POP
 657 026c 2047     		BX	R4
 658              	
 659              	//    next	( -- ) counter on R:
 660              	// 	Run time code for the single index loop.
 661              	// 	: next ( -- ) \ hilevel model
 662              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 663              	
 664              	// 	.word	_EXECU+MAPOFFSET
 665              	// _DONXT	.byte   COMPO+4
 666              	// 	.ascii "next"
ARM GAS  stm32eforth-fl.s 			page 15


 667              	// 	.p2align 2 	
 668              	DONXT:
 669 026e 1468     		LDR	R4,[R2]   // ( -- u )  
 670 0270 24B9     		CBNZ R4,NEXT1 
 671              		/* loop done */
 672 0272 02F10402 		ADD	R2,R2,#4 // drop counter 
 673 0276 0EF1040E 		ADD	LR,LR,#4 // skip after loop address 
 674 027a 7047     		_NEXT
 675              	NEXT1:
 676              		/* decrement loop counter */
 677 027c A4F10104 		SUB	R4,R4,#1
 678 0280 1460     		STR	R4,[R2]
 679 0282 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 680 0286 4EF0010E 		ORR	LR,LR,#1 // begining of loop
 681 028a 7047     		_NEXT
 682              	
 683              	//    ?branch	( f -- )
 684              	// 	Branch if flag is zero.
 685              	
 686              	// 	.word	_DONXT+MAPOFFSET
 687              	// _QBRAN	.byte   COMPO+7
 688              	// 	.ascii "?branch"
 689              	// 	.p2align 2 	
 690              	QBRAN:
 691 028c 2C00     		MOVS	R4,R5
 692 028e 51F8045B 		_POP
 693 0292 04D1     		BNE	QBRAN1
 694 0294 5EF801EC 		LDR	LR,[LR,#-1]
 695 0298 4EF0010E 		ORR LR,LR,#1
 696 029c 7047     		_NEXT
 697              	QBRAN1:
 698 029e 0EF1040E 	 	ADD	LR,LR,#4
 699 02a2 7047     		_NEXT
 700              	
 701              	//    branch	( -- )
 702              	// 	Branch to an inline address.
 703              	
 704              	// 	.word	_QBRAN+MAPOFFSET
 705              	// _BRAN	.byte   COMPO+6
 706              	// 	.ascii "branch"
 707              	// 	.p2align 2 	
 708              	BRAN:
 709 02a4 5EF801EC 		LDR	LR,[LR,#-1]
 710 02a8 4EF0010E 		ORR	LR,LR,#1
 711 02ac 7047     		_NEXT
 712              	
 713              	//    EXIT	(  -- )
 714              	// 	Exit the currently executing command.
 715              	
 716 02ae 5C020000 		.word	_EXECU+MAPOFFSET
 717 02b2 04       	_EXIT:	.byte   4
 718 02b3 45584954 		.ascii "EXIT"
 719 02b7 00       		.p2align 2 	
 720              	EXIT:
 721 02b8 52F804FB 		_UNNEST
 722              	
 723              	//    !	   ( w a -- )
ARM GAS  stm32eforth-fl.s 			page 16


 724              	// 	Pop the data stack to memory.
 725              	
 726 02bc B2020000 		.word	_EXIT+MAPOFFSET
 727 02c0 01       	_STORE:	.byte   1
 728 02c1 21       		.ascii "!"
 729 02c2 00BF     		.p2align 2 	
 730              	STORE:
 731 02c4 51F8044B 		LDR	R4,[R1],#4
 732 02c8 2C60     		STR	R4,[R5]
 733 02ca 51F8045B 		_POP
 734 02ce 7047     		_NEXT
 735              	
 736              	//    @	   ( a -- w )
 737              	// 	Push memory location to the data stack.
 738              	
 739 02d0 C0020000 		.word	_STORE+MAPOFFSET
 740 02d4 01       	_AT:	.byte   1
 741 02d5 40       		.ascii "@"
 742 02d6 00BF     		.p2align 2 	
 743              	AT:
 744 02d8 2D68     		LDR	R5,[R5]
 745 02da 7047     		_NEXT
 746              	
 747              	//    C!	  ( c b -- )
 748              	// 	Pop the data stack to byte memory.
 749              	
 750 02dc D4020000 		.word	_AT+MAPOFFSET
 751 02e0 02       	_CSTOR:	.byte   2
 752 02e1 4321     		.ascii "C!"
 753 02e3 00       		.p2align 2 	
 754              	CSTOR:
 755 02e4 51F8044B 		LDR	R4,[R1],#4
 756 02e8 2C70     		STRB	R4,[R5]
 757 02ea 51F8045B 		_POP
 758 02ee 7047     		_NEXT
 759              	
 760              	//    C@	  ( b -- c )
 761              	// 	Push byte memory location to the data stack.
 762              	
 763 02f0 E0020000 		.word	_CSTOR+MAPOFFSET
 764 02f4 02       	_CAT:	.byte   2
 765 02f5 4340     		.ascii "C@"
 766 02f7 00       		.p2align 2 	
 767              	CAT:
 768 02f8 2D78     		LDRB	R5,[R5]
 769 02fa 7047     		_NEXT
 770              	
 771              	//    R>	  ( -- w )
 772              	// 	Pop the return stack to the data stack.
 773              	
 774 02fc F4020000 		.word	_CAT+MAPOFFSET
 775 0300 02       	_RFROM:	.byte   2
 776 0301 523E     		.ascii "R>"
 777 0303 00       		.p2align 2 	
 778              	RFROM:
 779 0304 41F8045D 		_PUSH
 780 0308 52F8045B 		LDR	R5,[R2],#4
ARM GAS  stm32eforth-fl.s 			page 17


 781 030c 7047     		_NEXT
 782              	
 783              	//    R@	  ( -- w )
 784              	// 	Copy top of return stack to the data stack.
 785              	
 786 030e 00030000 		.word	_RFROM+MAPOFFSET
 787 0312 02       	_RAT:	.byte   2
 788 0313 5240     		.ascii "R@"
 789 0315 0000BF   		.p2align 2 	
 790              	RAT:
 791 0318 41F8045D 		_PUSH
 792 031c 1568     		LDR	R5,[R2]
 793 031e 7047     		_NEXT
 794              	
 795              	//    >R	  ( w -- )
 796              	// 	Push the data stack to the return stack.
 797              	
 798 0320 12030000 		.word	_RAT+MAPOFFSET
 799 0324 42       	_TOR:	.byte   COMPO+2
 800 0325 3E52     		.ascii ">R"
 801 0327 00       		.p2align 2 	
 802              	TOR:
 803 0328 42F8045D 		STR	R5,[R2,#-4]!
 804 032c 51F8045B 		_POP
 805 0330 7047     		_NEXT
 806              	
 807              	//    SP@	 ( -- a )
 808              	// 	Push the current data stack pointer.
 809              	
 810 0332 24030000 		.word	_TOR+MAPOFFSET
 811 0336 03       	_SPAT:	.byte   3
 812 0337 535040   		.ascii "SP@"
 813 033a 00BF     		.p2align 2 	
 814              	SPAT:
 815 033c 41F8045D 		_PUSH
 816 0340 0D46     		MOV	R5,R1
 817 0342 7047     		_NEXT
 818              	
 819              	//    DROP	( w -- )
 820              	// 	Discard top stack item.
 821              	
 822 0344 36030000 		.word	_SPAT+MAPOFFSET
 823 0348 04       	_DROP:	.byte   4
 824 0349 44524F50 		.ascii "DROP"
 825 034d 0000BF   		.p2align 2 	
 826              	DROP:
 827 0350 51F8045B 		_POP
 828 0354 7047     		_NEXT
 829              	
 830              	//    DUP	 ( w -- w w )
 831              	// 	Duplicate the top stack item.
 832              	
 833 0356 48030000 		.word	_DROP+MAPOFFSET
 834 035a 03       	_DUPP:	.byte   3
 835 035b 445550   		.ascii "DUP"
 836 035e 00BF     		.p2align 2 	
 837              	DUPP:
ARM GAS  stm32eforth-fl.s 			page 18


 838 0360 41F8045D 		_PUSH
 839 0364 7047     		_NEXT
 840              	
 841              	//    SWAP	( w1 w2 -- w2 w1 )
 842              	// 	Exchange top two stack items.
 843              	
 844 0366 5A030000 		.word	_DUPP+MAPOFFSET
 845 036a 04       	_SWAP:	.byte   4
 846 036b 53574150 		.ascii "SWAP"
 847 036f 00       		.p2align 2 	
 848              	SWAP:
 849 0370 0C68     		LDR	R4,[R1]
 850 0372 0D60     		STR	R5,[R1]
 851 0374 2546     		MOV	R5,R4
 852 0376 7047     		_NEXT
 853              	
 854              	//    OVER	( w1 w2 -- w1 w2 w1 )
 855              	// 	Copy second stack item to top.
 856              	
 857 0378 6A030000 		.word	_SWAP+MAPOFFSET
 858 037c 04       	_OVER:	.byte   4
 859 037d 4F564552 		.ascii "OVER"
 860 0381 0000BF   		.p2align 2 	
 861              	OVER:
 862 0384 41F8045D 		_PUSH
 863 0388 4D68     		LDR	R5,[R1,#4]
 864 038a 7047     		_NEXT
 865              	
 866              	//    0<	  ( n -- t )
 867              	// 	Return true if n is negative.
 868              	
 869 038c 7C030000 		.word	_OVER+MAPOFFSET
 870 0390 02       	_ZLESS:	.byte   2
 871 0391 303C     		.ascii "0<"
 872 0393 00       		.p2align 2 	
 873              	ZLESS:
 874 0394 4FF00004 		MOV	R4,#0
 875 0398 04EB2505 		ADD	R5,R4,R5,ASR #32
 876 039c 7047     		_NEXT
 877              	
 878              	//    AND	 ( w w -- w )
 879              	// 	Bitwise AND.
 880              	
 881 039e 90030000 		.word	_ZLESS+MAPOFFSET
 882 03a2 03       	_ANDD:	.byte   3
 883 03a3 414E44   		.ascii "AND"
 884 03a6 00BF     		.p2align 2 	
 885              	ANDD:
 886 03a8 51F8044B 		LDR	R4,[R1],#4
 887 03ac 05EA0405 		AND	R5,R5,R4
 888 03b0 7047     		_NEXT
 889              	
 890              	//    OR	  ( w w -- w )
 891              	// 	Bitwise inclusive OR.
 892              	
 893 03b2 A2030000 		.word	_ANDD+MAPOFFSET
 894 03b6 02       	_ORR:	.byte   2
ARM GAS  stm32eforth-fl.s 			page 19


 895 03b7 4F52     		.ascii "OR"
 896 03b9 0000BF   		.p2align 2 	
 897              	ORR:
 898 03bc 51F8044B 		LDR	R4,[R1],#4
 899 03c0 45EA0405 		ORR	R5,R5,R4
 900 03c4 7047     		_NEXT
 901              	
 902              	//    XOR	 ( w w -- w )
 903              	// 	Bitwise exclusive OR.
 904              	
 905 03c6 B6030000 		.word	_ORR+MAPOFFSET
 906 03ca 03       	_XORR:	.byte   3
 907 03cb 584F52   		.ascii "XOR"
 908 03ce 00BF     		.p2align 2 	
 909              	XORR:
 910 03d0 51F8044B 		LDR	R4,[R1],#4
 911 03d4 85EA0405 		EOR	R5,R5,R4
 912 03d8 7047     		_NEXT
 913              	
 914              	//    UM+	 ( w w -- w cy )
 915              	// 	Add two numbers, return the sum and carry flag.
 916              	
 917 03da CA030000 		.word	_XORR+MAPOFFSET
 918 03de 03       	_UPLUS:	.byte   3
 919 03df 554D2B   		.ascii "UM+"
 920 03e2 00BF     		.p2align 2 	
 921              	UPLUS:
 922 03e4 0C68     		LDR	R4,[R1]
 923 03e6 6419     		ADDS	R4,R4,R5
 924 03e8 4FF00005 		MOV	R5,#0
 925 03ec 45F10005 		ADC	R5,R5,#0
 926 03f0 0C60     		STR	R4,[R1]
 927 03f2 7047     		_NEXT
 928              	
 929              	//    RSHIFT	 ( w # -- w )
 930              	// 	arithmetic Right shift # bits.
 931              	
 932 03f4 DE030000 		.word	_UPLUS+MAPOFFSET
 933 03f8 06       	_RSHIFT:	.byte   6
 934 03f9 52534849 		.ascii "RSHIFT"
 934      4654
 935 03ff 00       		.p2align 2 	
 936              	RSHIFT:
 937 0400 51F8044B 		LDR	R4,[R1],#4
 938 0404 44FA05F5 		MOV	R5,R4,ASR R5
 939 0408 7047     		_NEXT
 940              	
 941              	//    LSHIFT	 ( w # -- w )
 942              	// 	Right shift # bits.
 943              	
 944 040a F8030000 		.word	_RSHIFT+MAPOFFSET
 945 040e 06       	_LSHIFT:	.byte   6
 946 040f 4C534849 		.ascii "LSHIFT"
 946      4654
 947 0415 0000BF   		.p2align 2 	
 948              	LSHIFT:
 949 0418 51F8044B 		LDR	R4,[R1],#4
ARM GAS  stm32eforth-fl.s 			page 20


 950 041c 04FA05F5 		MOV	R5,R4,LSL R5
 951 0420 7047     		_NEXT
 952              	
 953              	//    +	 ( w w -- w )
 954              	// 	Add.
 955              	
 956 0422 0E040000 		.word	_LSHIFT+MAPOFFSET
 957 0426 01       	_PLUS:	.byte   1
 958 0427 2B       		.ascii "+"
 959              		.p2align 2 	
 960              	PLUS:
 961 0428 51F8044B 		LDR	R4,[R1],#4
 962 042c 2544     		ADD	R5,R5,R4
 963 042e 7047     		_NEXT
 964              	
 965              	//    -	 ( w w -- w )
 966              	// 	Subtract.
 967              	
 968 0430 26040000 		.word	_PLUS+MAPOFFSET
 969 0434 01       	_SUBB:	.byte   1
 970 0435 2D       		.ascii "-"
 971 0436 00BF     		.p2align 2 	
 972              	SUBB:
 973 0438 51F8044B 		LDR	R4,[R1],#4
 974 043c C5EB0405 		RSB	R5,R5,R4
 975 0440 7047     		_NEXT
 976              	
 977              	//    *	 ( w w -- w )
 978              	// 	Multiply.
 979              	
 980 0442 34040000 		.word	_SUBB+MAPOFFSET
 981 0446 01       	_STAR:	.byte   1
 982 0447 2A       		.ascii "*"
 983              		.p2align 2 	
 984              	STAR:
 985 0448 51F8044B 		LDR	R4,[R1],#4
 986 044c 04FB05F5 		MUL	R5,R4,R5
 987 0450 7047     		_NEXT
 988              	
 989              	//    UM*	 ( w w -- ud )
 990              	// 	Unsigned multiply.
 991              	
 992 0452 46040000 		.word	_STAR+MAPOFFSET
 993 0456 03       	_UMSTA:	.byte   3
 994 0457 554D2A   		.ascii "UM*"
 995 045a 00BF     		.p2align 2 	
 996              	UMSTA:
 997 045c 0C68     		LDR	R4,[R1]
 998 045e A5FB0467 		UMULL	R6,R7,R5,R4
 999 0462 0E60     		STR	R6,[R1]
 1000 0464 3D46     		MOV	R5,R7
 1001 0466 7047     		_NEXT
 1002              	
 1003              	//    M*	 ( w w -- d )
 1004              	// 	signed multiply.
 1005              	
 1006 0468 56040000 		.word	_UMSTA+MAPOFFSET
ARM GAS  stm32eforth-fl.s 			page 21


 1007 046c 02       	_MSTAR:	.byte   2
 1008 046d 4D2A     		.ascii "M*"
 1009 046f 00       		.p2align 2 	
 1010              	MSTAR:
 1011 0470 0C68     		LDR	R4,[R1]
 1012 0472 85FB0467 		SMULL	R6,R7,R5,R4
 1013 0476 0E60     		STR	R6,[R1]
 1014 0478 3D46     		MOV	R5,R7
 1015 047a 7047     		_NEXT
 1016              	
 1017              	//    1+	 ( w -- w+1 )
 1018              	// 	Add 1.
 1019              	
 1020 047c 6C040000 		.word	_MSTAR+MAPOFFSET
 1021 0480 02       	_ONEP:	.byte   2
 1022 0481 312B     		.ascii "1+"
 1023 0483 00       		.p2align 2 	
 1024              	ONEP:
 1025 0484 05F10105 		ADD	R5,R5,#1
 1026 0488 7047     		_NEXT
 1027              	
 1028              	//    1-	 ( w -- w-1 )
 1029              	// 	Subtract 1.
 1030              	
 1031 048a 80040000 		.word	_ONEP+MAPOFFSET
 1032 048e 02       	_ONEM:	.byte   2
 1033 048f 312D     		.ascii "1-"
 1034 0491 0000BF   		.p2align 2 	
 1035              	ONEM:
 1036 0494 A5F10105 		SUB	R5,R5,#1
 1037 0498 7047     		_NEXT
 1038              	
 1039              	//    2+	 ( w -- w+2 )
 1040              	// 	Add 1.
 1041              	
 1042 049a 8E040000 		.word	_ONEM+MAPOFFSET
 1043 049e 02       	_TWOP:	.byte   2
 1044 049f 322B     		.ascii "2+"
 1045 04a1 0000BF   		.p2align 2 	
 1046              	TWOP:
 1047 04a4 05F10205 		ADD	R5,R5,#2
 1048 04a8 7047     		_NEXT
 1049              	
 1050              	//    2-	 ( w -- w-2 )
 1051              	// 	Subtract 2.
 1052              	
 1053 04aa 9E040000 		.word	_TWOP+MAPOFFSET
 1054 04ae 02       	_TWOM:	.byte   2
 1055 04af 322D     		.ascii "2-"
 1056 04b1 0000BF   		.p2align 2 	
 1057              	TWOM:
 1058 04b4 A5F10205 		SUB	R5,R5,#2
 1059 04b8 7047     		_NEXT
 1060              	
 1061              	//    CELL+	( w -- w+4 )
 1062              	// 	Add CELLL.
 1063              	
ARM GAS  stm32eforth-fl.s 			page 22


 1064 04ba AE040000 		.word	_TWOM+MAPOFFSET
 1065 04be 05       	_CELLP:	.byte   5
 1066 04bf 43454C4C 		.ascii "CELL+"
 1066      2B
 1067              		.p2align 2 	
 1068              	CELLP:
 1069 04c4 05F10405 		ADD	R5,R5,#CELLL
 1070 04c8 7047     		_NEXT
 1071              	
 1072              	//    CELL-	( w -- w-4 )
 1073              	// 	Subtract CELLL.
 1074              	
 1075 04ca BE040000 		.word	_CELLP+MAPOFFSET
 1076 04ce 05       	_CELLM:	.byte   5
 1077 04cf 43454C4C 		.ascii "CELL-"
 1077      2D
 1078              		.p2align 2 	
 1079              	CELLM:
 1080 04d4 A5F10405 		SUB	R5,R5,#CELLL
 1081 04d8 7047     		_NEXT
 1082              	 
 1083              	//    BL	( -- 32 )
 1084              	// 	Blank (ASCII space).
 1085              	
 1086 04da CE040000 		.word	_CELLM+MAPOFFSET
 1087 04de 02       	_BLANK:	.byte   2
 1088 04df 424C     		.ascii "BL"
 1089 04e1 0000BF   		.p2align 2 	
 1090              	BLANK:
 1091 04e4 41F8045D 		_PUSH
 1092 04e8 4FF02005 		MOV	R5,#32
 1093 04ec 7047     		_NEXT
 1094              	
 1095              	//    CELLS	( w -- w*4 )
 1096              	// 	Multiply 4.
 1097              	
 1098 04ee DE040000 		.word	_BLANK+MAPOFFSET
 1099 04f2 05       	_CELLS:	.byte   5
 1100 04f3 43454C4C 		.ascii "CELLS"
 1100      53
 1101              		.p2align 2 	
 1102              	CELLS:
 1103 04f8 4FEA8505 		MOV	R5,R5,LSL#2
 1104 04fc 7047     		_NEXT
 1105              	
 1106              	//    CELL/	( w -- w/4 )
 1107              	// 	Divide by 4.
 1108              	
 1109 04fe F2040000 		.word	_CELLS+MAPOFFSET
 1110 0502 05       	_CELLSL:	.byte   5
 1111 0503 43454C4C 		.ascii "CELL/"
 1111      2F
 1112              		.p2align 2 	
 1113              	CELLSL:
 1114 0508 4FEAA505 		MOV	R5,R5,ASR#2
 1115 050c 7047     		_NEXT
 1116              	
ARM GAS  stm32eforth-fl.s 			page 23


 1117              	//    2*	( w -- w*2 )
 1118              	// 	Multiply 2.
 1119              	
 1120 050e 02050000 		.word	_CELLSL+MAPOFFSET
 1121 0512 02       	_TWOST:	.byte   2
 1122 0513 322A     		.ascii "2*"
 1123 0515 0000BF   		.p2align 2 	
 1124              	TWOST:
 1125 0518 4FEA4505 		MOV	R5,R5,LSL#1
 1126 051c 7047     		_NEXT
 1127              	
 1128              	//    2/	( w -- w/2 )
 1129              	// 	Divide by 2.
 1130              	
 1131 051e 12050000 		.word	_TWOST+MAPOFFSET
 1132 0522 02       	_TWOSL:	.byte   2
 1133 0523 322F     		.ascii "2/"
 1134 0525 0000BF   		.p2align 2 	
 1135              	TWOSL:
 1136 0528 4FEA6505 		MOV	R5,R5,ASR#1
 1137 052c 7047     		_NEXT
 1138              	
 1139              	//    ?DUP	( w -- w w | 0 )
 1140              	// 	Conditional duplicate.
 1141              	
 1142 052e 22050000 		.word	_TWOSL+MAPOFFSET
 1143 0532 04       	_QDUP:	.byte   4
 1144 0533 3F445550 		.ascii "?DUP"
 1145 0537 00       		.p2align 2 	
 1146              	QDUP:
 1147 0538 2C00     		MOVS	R4,R5
 1148 053a 18BF     		IT NE 
 1149 053c 41F8045D 	    STRNE	R5,[R1,#-4]!
 1150 0540 7047     		_NEXT
 1151              	
 1152              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1153              	// 	Rotate top 3 items.
 1154              	
 1155 0542 32050000 		.word	_QDUP+MAPOFFSET
 1156 0546 03       	_ROT:	.byte   3
 1157 0547 524F54   		.ascii "ROT"
 1158 054a 00BF     		.p2align 2 	
 1159              	ROT:
 1160 054c 0C68     		LDR	R4,[R1]  // r4=w2 
 1161 054e 0D60     		STR	R5,[R1]  // w3 replace w2 
 1162 0550 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1163 0552 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1164 0554 7047     		_NEXT
 1165              	
 1166              	//    2DROP	( w1 w2 -- )
 1167              	// 	Drop top 2 items.
 1168              	
 1169 0556 46050000 		.word	_ROT+MAPOFFSET
 1170 055a 05       	_DDROP:	.byte   5
 1171 055b 3244524F 		.ascii "2DROP"
 1171      50
 1172              		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 24


 1173              	DDROP:
 1174 0560 51F8045B 		_POP
 1175 0564 51F8045B 		_POP
 1176 0568 7047     		_NEXT
 1177              	
 1178              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1179              	// 	Duplicate top 2 items.
 1180              	
 1181 056a 5A050000 		.word	_DDROP+MAPOFFSET
 1182 056e 04       	_DDUP:	.byte   4
 1183 056f 32445550 		.ascii "2DUP"
 1184 0573 00       		.p2align 2 	
 1185              	DDUP:
 1186 0574 0C68     		LDR	R4,[R1] // r4=w1
 1187 0576 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1188 057a 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1189 057e 7047     		_NEXT
 1190              	
 1191              	//    D+	( d1 d2 -- d3 )
 1192              	// 	Add top 2 double numbers.
 1193              	
 1194 0580 6E050000 		.word	_DDUP+MAPOFFSET
 1195 0584 02       	_DPLUS:	.byte   2
 1196 0585 442B     		.ascii "D+"
 1197 0587 00       		.p2align 2 	
 1198              	DPLUS:
 1199 0588 51F8044B 		LDR	R4,[R1],#4
 1200 058c 51F8046B 		LDR	R6,[R1],#4
 1201 0590 0F68     		LDR	R7,[R1]
 1202 0592 E419     		ADDS	R4,R4,R7
 1203 0594 0C60     		STR	R4,[R1]
 1204 0596 45EB0605 		ADC	R5,R5,R6
 1205 059a 7047     		_NEXT
 1206              	
 1207              	//    NOT	 ( w -- !w )
 1208              	// 	1"s complement.
 1209              	
 1210 059c 84050000 		.word	_DPLUS+MAPOFFSET
 1211 05a0 03       	_INVER:	.byte   3
 1212 05a1 4E4F54   		.ascii "NOT"
 1213              		.p2align 2 	
 1214              	INVER:
 1215 05a4 6FEA0505 		MVN	R5,R5
 1216 05a8 7047     		_NEXT
 1217              	
 1218              	//    NEGATE	( w -- -w )
 1219              	// 	2's complement.
 1220              	
 1221 05aa A0050000 		.word	_INVER+MAPOFFSET
 1222 05ae 06       	_NEGAT:	.byte   6
 1223 05af 4E454741 		.ascii "NEGATE"
 1223      5445
 1224 05b5 0000BF   		.p2align 2 	
 1225              	NEGAT:
 1226 05b8 C5F10005 		RSB	R5,R5,#0
 1227 05bc 7047     		_NEXT
 1228              	
ARM GAS  stm32eforth-fl.s 			page 25


 1229              	//    ABS	 ( w -- |w| )
 1230              	// 	Absolute.
 1231              	
 1232 05be AE050000 		.word	_NEGAT+MAPOFFSET
 1233 05c2 03       	_ABSS:	.byte   3
 1234 05c3 414253   		.ascii "ABS"
 1235 05c6 00BF     		.p2align 2 	
 1236              	ABSS:
 1237 05c8 15F0004F 		TST	R5,#0x80000000
 1238 05cc 18BF     		IT NE
 1239 05ce 6D42     	    RSBNE   R5,R5,#0
 1240 05d0 7047     		_NEXT
 1241              	
 1242              	//  0= ( w -- f )
 1243              	// TOS==0?
 1244              	
 1245 05d2 C2050000 		.word _ABSS+MAPOFFSET
 1246 05d6 02       	_ZEQUAL: .byte 2
 1247 05d7 303D     		.ascii "0="
 1248 05d9 0000BF   		.p2align 2
 1249              	ZEQUAL:
 1250 05dc 15B9     		cbnz r5,1f
 1251 05de 4FF0FF35 		mov r5,#-1
 1252 05e2 7047     		_NEXT 
 1253 05e4 85EA0505 	1:  eor r5,r5,r5  
 1254 05e8 7047     		_NEXT 	
 1255              	
 1256              	//    =	 ( w w -- t )
 1257              	// 	Equal?
 1258              	
 1259 05ea D6050000 		.word	_ZEQUAL+MAPOFFSET
 1260 05ee 01       	_EQUAL:	.byte   1
 1261 05ef 3D       		.ascii "="
 1262              		.p2align 2 	
 1263              	EQUAL:
 1264 05f0 51F8044B 		LDR	R4,[R1],#4
 1265 05f4 A542     		CMP	R5,R4
 1266 05f6 0CBF     		ITE EQ 
 1267 05f8 6FF00005 	    MVNEQ	R5,#0
 1268 05fc 0025     		MOVNE	R5,#0
 1269 05fe 7047     		_NEXT
 1270              	
 1271              	//    U<	 ( w w -- t )
 1272              	// 	Unsigned equal?
 1273              	
 1274 0600 EE050000 		.word	_EQUAL+MAPOFFSET
 1275 0604 02       	_ULESS:	.byte   2
 1276 0605 553C     		.ascii "U<"
 1277 0607 00       		.p2align 2 	
 1278              	ULESS:
 1279 0608 51F8044B 		LDR	R4,[R1],#4
 1280 060c AC42     		CMP	R4,R5
 1281 060e 34BF     		ITE CC 
 1282 0610 6FF00005 		MVNCC	R5,#0
 1283 0614 0025     		MOVCS	R5,#0
 1284 0616 7047     		_NEXT
 1285              	
ARM GAS  stm32eforth-fl.s 			page 26


 1286              	//    <	( w w -- t )
 1287              	// 	Less?
 1288              	
 1289 0618 04060000 		.word	_ULESS+MAPOFFSET
 1290 061c 01       	_LESS:	.byte   1
 1291 061d 3C       		.ascii "<"
 1292 061e 00BF     		.p2align 2 	
 1293              	LESS:
 1294 0620 51F8044B 		LDR	R4,[R1],#4
 1295 0624 AC42     		CMP	R4,R5
 1296 0626 B4BF     	    ITE LT
 1297 0628 6FF00005 		MVNLT	R5,#0
 1298 062c 0025     		MOVGE	R5,#0
 1299 062e 7047     		_NEXT
 1300              	
 1301              	//    >	( w w -- t )
 1302              	// 	greater?
 1303              	
 1304 0630 1C060000 		.word	_LESS+MAPOFFSET
 1305 0634 01       	_GREAT:	.byte   1
 1306 0635 3E       		.ascii ">"
 1307 0636 00BF     		.p2align 2 	
 1308              	GREAT:
 1309 0638 51F8044B 		LDR	R4,[R1],#4
 1310 063c AC42     		CMP	R4,R5
 1311 063e CCBF     		ITE GT
 1312 0640 6FF00005 	    MVNGT	R5,#0
 1313 0644 0025     		MOVLE	R5,#0
 1314 0646 7047     		_NEXT
 1315              	
 1316              	//    MAX	 ( w w -- max )
 1317              	// 	Leave maximum.
 1318              	
 1319 0648 34060000 		.word	_GREAT+MAPOFFSET
 1320 064c 03       	_MAX:	.byte   3
 1321 064d 4D4158   		.ascii "MAX"
 1322              		.p2align 2 	
 1323              	MAX:
 1324 0650 51F8044B 		LDR	R4,[R1],#4
 1325 0654 AC42     		CMP	R4,R5
 1326 0656 C8BF     		IT GT 
 1327 0658 2546     		MOVGT	R5,R4
 1328 065a 7047     		_NEXT
 1329              	
 1330              	//    MIN	 ( w w -- min )
 1331              	// 	Leave minimum.
 1332              	
 1333 065c 4C060000 		.word	_MAX+MAPOFFSET
 1334 0660 03       	_MIN:	.byte   3
 1335 0661 4D494E   		.ascii "MIN"
 1336              		.p2align 2 	
 1337              	MIN:
 1338 0664 51F8044B 		LDR	R4,[R1],#4
 1339 0668 AC42     		CMP	R4,R5
 1340 066a B8BF     		IT LT
 1341 066c 2546     		MOVLT	R5,R4
 1342 066e 7047     		_NEXT
ARM GAS  stm32eforth-fl.s 			page 27


 1343              	
 1344              	//    +!	 ( w a -- )
 1345              	// 	Add to memory.
 1346              	
 1347 0670 60060000 		.word	_MIN+MAPOFFSET
 1348 0674 02       	_PSTOR:	.byte   2
 1349 0675 2B21     		.ascii "+!"
 1350 0677 00       		.p2align 2 	
 1351              	PSTOR:
 1352 0678 51F8044B 		LDR	R4,[R1],#4
 1353 067c 2E68     		LDR	R6,[R5]
 1354 067e 2644     		ADD	R6,R6,R4
 1355 0680 2E60     		STR	R6,[R5]
 1356 0682 51F8045B 		_POP
 1357 0686 7047     		_NEXT
 1358              	
 1359              	//    2!	 ( d a -- )
 1360              	// 	Store double number.
 1361              	
 1362 0688 74060000 		.word	_PSTOR+MAPOFFSET
 1363 068c 02       	_DSTOR:	.byte   2
 1364 068d 3221     		.ascii "2!"
 1365 068f 00       		.p2align 2 	
 1366              	DSTOR:
 1367 0690 51F8044B 		LDR	R4,[R1],#4
 1368 0694 51F8046B 		LDR	R6,[R1],#4
 1369 0698 45F8044B 		STR	R4,[R5],#4
 1370 069c 2E60     		STR	R6,[R5]
 1371 069e 51F8045B 		_POP
 1372 06a2 7047     		_NEXT
 1373              	
 1374              	//    2@	 ( a -- d )
 1375              	// 	Fetch double number.
 1376              	
 1377 06a4 8C060000 		.word	_DSTOR+MAPOFFSET
 1378 06a8 02       	_DAT:	.byte   2
 1379 06a9 3240     		.ascii "2@"
 1380 06ab 00       		.p2align 2 	
 1381              	DAT:
 1382 06ac 6C68     		LDR	R4,[R5,#4]
 1383 06ae 41F8044D 		STR	R4,[R1,#-4]!
 1384 06b2 2D68     		LDR	R5,[R5]
 1385 06b4 7047     		_NEXT
 1386              	
 1387              	//    COUNT	( b -- b+1 c )
 1388              	// 	Fetch length of string.
 1389              	
 1390 06b6 A8060000 		.word	_DAT+MAPOFFSET
 1391 06ba 05       	_COUNT:	.byte   5
 1392 06bb 434F554E 		.ascii "COUNT"
 1392      54
 1393              		.p2align 2 	
 1394              	COUNT:
 1395 06c0 15F8014B 		LDRB	R4,[R5],#1
 1396 06c4 41F8045D 		_PUSH
 1397 06c8 2546     		MOV	R5,R4
 1398 06ca 7047     		_NEXT
ARM GAS  stm32eforth-fl.s 			page 28


 1399              	
 1400              	//    DNEGATE	( d -- -d )
 1401              	// 	Negate double number.
 1402              	
 1403 06cc BA060000 		.word	_COUNT+MAPOFFSET
 1404 06d0 07       	_DNEGA:	.byte   7
 1405 06d1 444E4547 		.ascii "DNEGATE"
 1405      415445
 1406              		.p2align 2 	
 1407              	DNEGA:
 1408 06d8 0C68     		LDR	R4,[R1]
 1409 06da A6EB0606 		SUB	R6,R6,R6
 1410 06de 341B     		SUBS R4,R6,R4
 1411 06e0 66EB0505 		SBC	R5,R6,R5
 1412 06e4 0C60     		STR	R4,[R1]
 1413 06e6 7047     		_NEXT
 1414              	
 1415              	// **************************************************************************
 1416              	//  System and user variables
 1417              	
 1418              	//    doVAR	( -- a )
 1419              	// 	Run time routine for VARIABLE and CREATE.
 1420              	
 1421              	// 	.word	_DNEGA+MAPOFFSET
 1422              	// _DOVAR	.byte  COMPO+5
 1423              	// 	.ascii "doVAR"
 1424              	// 	.p2align 2 	
 1425              	DOVAR:
 1426 06e8 41F8045D 		_PUSH
 1427 06ec AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
 1428 06f0 52F804FB 		_UNNEST
 1429              	
 1430              	//    doCON	( -- a ) 
 1431              	// 	Run time routine for CONSTANT.
 1432              	
 1433              	// 	.word	_DOVAR+MAPOFFSET
 1434              	// _DOCON	.byte  COMPO+5
 1435              	// 	.ascii "doCON"
 1436              	// 	.p2align 2 	
 1437              	DOCON:
 1438 06f4 41F8045D 		_PUSH
 1439 06f8 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1440 06fc 52F804FB 		_UNNEST
 1441              	
 1442              	/***********************
 1443              	  system variables 
 1444              	***********************/
 1445              	
 1446              	 // SEED ( -- a)
 1447              	 // return PRNG seed address 
 1448              	
 1449 0700 D0060000 		.word _DNEGA+MAPOFFSET
 1450 0704 04       	_SEED: .byte 4
 1451 0705 53454544 		.ascii "SEED"
 1452 0709 0000BF   		.p2align 2
 1453              	SEED:
 1454 070c 41F8045D 		_PUSH 
ARM GAS  stm32eforth-fl.s 			page 29


 1455 0710 03F10405 		ADD R5,R3,#SEED_OFS
 1456 0714 7047     		_NEXT 	
 1457              	
 1458              	//  MSEC ( -- a)
 1459              	// return address of milliseconds counter
 1460 0716 04070000 	  .word _SEED+MAPOFFSET 
 1461 071a 04       	_MSEC: .byte 4
 1462 071b 4D534543 	  .ascii "MSEC"
 1463 071f 00       	  .p2align 2 
 1464              	MSEC:
 1465 0720 41F8045D 	  _PUSH
 1466 0724 03F10805 	  ADD R5,R3,#MSEC_OFS
 1467 0728 7047     	  _NEXT 
 1468              	
 1469              	// TIMER ( -- a )
 1470              	// count down timer 
 1471 072a 1A070000 	  .word _MSEC+MAPOFFSET
 1472 072e 05       	_TIMER:  .byte 5
 1473 072f 54494D45 	  .ascii "TIMER"
 1473      52
 1474              	  .p2align 2 
 1475              	TIMER:
 1476 0734 41F8045D 	  _PUSH 
 1477 0738 03F10C05 	  ADD R5,R3,#TIMER_OFS
 1478 073c 7047     	  _NEXT
 1479              	
 1480              	//    'BOOT	 ( -- a )
 1481              	// 	Application.
 1482              	
 1483 073e 2E070000 		.word	_TIMER+MAPOFFSET
 1484 0742 05       	_TBOOT:	.byte   5
 1485 0743 27424F4F 		.ascii "'BOOT"
 1485      54
 1486              		.p2align 2 	
 1487              	TBOOT:
 1488 0748 41F8045D 		_PUSH
 1489 074c 03F11005 		ADD	R5,R3,#BOOT_OFS 
 1490 0750 7047     		_NEXT
 1491              		
 1492              	//    BASE	( -- a )
 1493              	// 	Storage of the radix base for numeric I/O.
 1494              	
 1495 0752 42070000 		.word	_TBOOT+MAPOFFSET
 1496 0756 04       	_BASE:	.byte   4
 1497 0757 42415345 		.ascii "BASE"
 1498 075b 00       		.p2align 2 	
 1499              	BASE:
 1500 075c 41F8045D 		_PUSH
 1501 0760 03F11405 		ADD	R5,R3,#BASE_OFS
 1502 0764 7047     		_NEXT
 1503              	
 1504              	//    tmp	 ( -- a )
 1505              	// 	A temporary storage location used in parse and find.
 1506              	
 1507              	// 	.word	_BASE+MAPOFFSET
 1508              	// _TEMP	.byte   COMPO+3
 1509              	// 	.ascii "tmp"
ARM GAS  stm32eforth-fl.s 			page 30


 1510              	// 	.p2align 2 	
 1511              	TEMP:
 1512 0766 41F8045D 		_PUSH
 1513 076a 03F11805 		ADD	R5,R3,#TMP_OFS
 1514 076e 7047     		_NEXT
 1515              	
 1516              	//    SPAN	( -- a )
 1517              	// 	Hold character count received by EXPECT.
 1518              	
 1519 0770 56070000 		.word	_BASE+MAPOFFSET
 1520 0774 04       	_SPAN:	.byte   4
 1521 0775 5350414E 		.ascii "SPAN"
 1522 0779 0000BF   		.p2align 2 	
 1523              	SPAN:
 1524 077c 41F8045D 		_PUSH
 1525 0780 03F11C05 		ADD	R5,R3,#SPAN_OFS
 1526 0784 7047     		_NEXT
 1527              	
 1528              	//    >IN	 ( -- a )
 1529              	// 	Hold the character pointer while parsing input stream.
 1530              	
 1531 0786 74070000 		.word	_SPAN+MAPOFFSET
 1532 078a 03       	_INN:	.byte   3
 1533 078b 3E494E   		.ascii ">IN"
 1534 078e 00BF     		.p2align 2 	
 1535              	INN:
 1536 0790 41F8045D 		_PUSH
 1537 0794 03F12005 		ADD	R5,R3,#TOIN_OFS
 1538 0798 7047     		_NEXT
 1539              	
 1540              	//    #TIB	( -- a )
 1541              	// 	Hold the current count and address of the terminal input buffer.
 1542              	
 1543 079a 8A070000 		.word	_INN+MAPOFFSET
 1544 079e 04       	_NTIB:	.byte   4
 1545 079f 23544942 		.ascii "#TIB"
 1546 07a3 00       		.p2align 2 	
 1547              	NTIB:
 1548 07a4 41F8045D 		_PUSH
 1549 07a8 03F12405 		ADD	R5,R3,#NTIB_OFS
 1550 07ac 7047     		_NEXT
 1551              	
 1552              	//    'EVAL	( -- a )
 1553              	// 	Execution vector of EVAL.
 1554              	
 1555 07ae 9E070000 		.word	_NTIB+MAPOFFSET
 1556 07b2 05       	_TEVAL:	.byte   5
 1557 07b3 27455641 		.ascii "'EVAL"
 1557      4C
 1558              		.p2align 2 	
 1559              	TEVAL:
 1560 07b8 41F8045D 		_PUSH
 1561 07bc 03F12C05 		ADD	R5,R3,#EVAL_OFS
 1562 07c0 7047     		_NEXT
 1563              	
 1564              	//    HLD	 ( -- a )
 1565              	// 	Hold a pointer in building a numeric output string.
ARM GAS  stm32eforth-fl.s 			page 31


 1566              	
 1567 07c2 B2070000 		.word	_TEVAL+MAPOFFSET
 1568 07c6 03       	_HLD:	.byte   3
 1569 07c7 484C44   		.ascii "HLD"
 1570 07ca 00BF     		.p2align 2 	
 1571              	HLD:
 1572 07cc 41F8045D 		_PUSH
 1573 07d0 03F13005 		ADD	R5,R3,#HLD_OFS
 1574 07d4 7047     		_NEXT
 1575              	
 1576              	//    CONTEXT	( -- a )
 1577              	// 	A area to specify vocabulary search order.
 1578              	
 1579 07d6 C6070000 		.word	_HLD+MAPOFFSET
 1580 07da 07       	_CNTXT:	.byte   7
 1581 07db 434F4E54 		.ascii "CONTEXT"
 1581      455854
 1582 07e2 00BF     		.p2align 2 	
 1583              	CNTXT:
 1584              	CRRNT:
 1585 07e4 41F8045D 		_PUSH
 1586 07e8 03F13405 		ADD	R5,R3,#CTXT_OFS
 1587 07ec 7047     		_NEXT
 1588              	
 1589              	//    CP	( -- a )
 1590              	// 	Point to top name vocabulary.
 1591              	
 1592 07ee DA070000 		.word	_CNTXT+MAPOFFSET
 1593 07f2 02       	_CP:	.byte   2
 1594 07f3 4350     		.ascii "CP"
 1595 07f5 0000BF   		.p2align 2 	
 1596              	CPP:
 1597 07f8 41F8045D 		_PUSH
 1598 07fc 03F13805 		ADD	R5,R3,#CTOP_OFS
 1599 0800 7047     		_NEXT
 1600              	
 1601              	//   UTOP ( -- a )
 1602              	//  Point ot top RAM data 
 1603 0802 F2070000 		.word _CP+MAPOFFSET
 1604 0806 04       	_UTOP: .byte 4            
 1605 0807 55544F50 		.ascii "UTOP"
 1606 080b 00       		.p2align 2 
 1607              	UTOP: 
 1608 080c 41F8045D 		_PUSH 
 1609 0810 03F13C05 		ADD R5,R3,#UTOP_OFS 
 1610 0814 7047     		_NEXT 
 1611              	
 1612              	//    LAST	( -- a )
 1613              	// 	Point to the last name in the name dictionary.
 1614              	
 1615 0816 06080000 		.word	_UTOP+MAPOFFSET
 1616 081a 04       	_LAST:	.byte   4
 1617 081b 4C415354 		.ascii "LAST"
 1618 081f 00       		.p2align 2 	
 1619              	LAST:
 1620 0820 41F8045D 		_PUSH
 1621 0824 03F14005 		ADD	R5,R3,#LASTN_OFS
ARM GAS  stm32eforth-fl.s 			page 32


 1622 0828 7047     		_NEXT
 1623              	
 1624              	/***********************
 1625              		system constants 
 1626              	***********************/
 1627              	
 1628              	//	USER_BEGIN ( -- a )
 1629              	//  where user area begin in RAM
 1630 082a 1A080000 		.word _LAST+MAPOFFSET
 1631 082e 0A       	_USER_BGN: .byte 10
 1632 082f 55534552 		.ascii "USER_BEGIN"
 1632      5F424547 
 1632      494E
 1633 0839 0000BF   		.p2align 2
 1634              	USER_BEGIN:
 1635 083c 41F8045D 		_PUSH 
 1636 0840 004D     		ldr r5,USR_BGN_ADR 
 1637 0842 7047     		_NEXT 
 1638              	USR_BGN_ADR:
 1639 0844 00240000 	.word CTOP+MAPOFFSET 
 1640              	
 1641              	//  USER_END ( -- a )
 1642              	//  where user area end in RAM 
 1643 0848 2E080000 		.word _USER_BGN+MAPOFFSET
 1644 084c 08       	_USER_END: .byte 8 
 1645 084d 55534552 		.ascii "USER_END" 
 1645      5F454E44 
 1646 0855 0000BF   		.p2align 2 
 1647              	USER_END:
 1648 0858 41F8045D 		_PUSH 
 1649 085c 4FF49C45 		mov r5,#DEND&0xffff
 1650 0860 C2F20005 		movt r5,#DEND>>16 
 1651 0864 7047     		_NEXT 
 1652              	
 1653              	/* *********************
 1654              	  Common functions
 1655              	***********************/
 1656              	
 1657              	//    WITHIN	( u ul uh -- t )
 1658              	// 	Return true if u is within the range of ul and uh.
 1659              	
 1660 0866 4C080000 		.word	_USER_END+MAPOFFSET
 1661 086a 06       	_WITHI:	.byte   6
 1662 086b 57495448 		.ascii "WITHIN"
 1662      494E
 1663 0871 0000BF   		.p2align 2 	
 1664              	WITHI:
 1665 0874 42F804ED 		_NEST
 1666 0878 FFF784FD 		BL	OVER
 1667 087c FFF7DCFD 		BL	SUBB
 1668 0880 FFF752FD 		BL	TOR
 1669 0884 FFF7D8FD 		BL	SUBB
 1670 0888 FFF73CFD 		BL	RFROM
 1671 088c FFF7BCFE 		BL	ULESS
 1672 0890 52F804FB 		_UNNEST
 1673              	
 1674              	//  Divide
ARM GAS  stm32eforth-fl.s 			page 33


 1675              	
 1676              	//    UM/MOD	( udl udh u -- ur uq )
 1677              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1678              	
 1679 0894 6A080000 		.word	_WITHI+MAPOFFSET
 1680 0898 06       	_UMMOD:	.byte   6
 1681 0899 554D2F4D 		.ascii "UM/MOD"
 1681      4F44
 1682 089f 00       		.p2align 2 	
 1683              	UMMOD:
 1684 08a0 4FF00107 		MOV	R7,#1
 1685 08a4 51F8044B 		LDR	R4,[R1],#4
 1686 08a8 0E68     		LDR	R6,[R1]
 1687              	UMMOD0:
 1688 08aa B619     		ADDS	R6,R6,R6
 1689 08ac 6441     		ADCS	R4,R4,R4
 1690 08ae 04D3     		BCC	UMMOD1
 1691 08b0 A4EB0504 		SUB	R4,R4,R5
 1692 08b4 06F10106 		ADD	R6,R6,#1
 1693 08b8 04E0     		B UMMOD2
 1694              	UMMOD1:
 1695 08ba 641B     		SUBS	R4,R4,R5 
 1696 08bc 28BF     		IT CS 
 1697 08be 0136     		ADDCS	R6,R6,#1
 1698 08c0 00D2     		BCS	UMMOD2
 1699 08c2 2C44     		ADD	R4,R4,R5
 1700              	UMMOD2:
 1701 08c4 FF19     		ADDS	R7,R7,R7
 1702 08c6 F0D3     		BCC	UMMOD0
 1703 08c8 3546     		MOV	R5,R6
 1704 08ca 0C60     		STR	R4,[R1]
 1705 08cc 7047     		_NEXT
 1706              	
 1707              	//    M/MOD	( d n -- r q )
 1708              	// 	Signed floored divide of double by single. Return mod and quotient.
 1709              	
 1710 08ce 98080000 		.word	_UMMOD+MAPOFFSET
 1711 08d2 05       	_MSMOD:	.byte  5
 1712 08d3 4D2F4D4F 		.ascii "M/MOD"
 1712      44
 1713              		.p2align 2 	
 1714              	MSMOD:	
 1715 08d8 42F804ED 		_NEST
 1716 08dc FFF740FD 		BL	DUPP
 1717 08e0 FFF758FD 		BL	ZLESS
 1718 08e4 FFF73CFD 		BL	DUPP
 1719 08e8 FFF71EFD 		BL	TOR
 1720 08ec FFF7CEFC 		BL	QBRAN
 1721 08f0 04090000 		.word	MMOD1+MAPOFFSET
 1722 08f4 FFF760FE 		BL	NEGAT
 1723 08f8 FFF716FD 		BL	TOR
 1724 08fc FFF7ECFE 		BL	DNEGA
 1725 0900 FFF700FD 		BL	RFROM
 1726              	MMOD1:
 1727 0904 FFF710FD 	  BL	TOR
 1728 0908 FFF72AFD 		BL	DUPP
 1729 090c FFF742FD 		BL	ZLESS
ARM GAS  stm32eforth-fl.s 			page 34


 1730 0910 FFF7BCFC 		BL	QBRAN
 1731 0914 20090000 		.word	MMOD2+MAPOFFSET
 1732 0918 FFF7FEFC 		BL	RAT
 1733 091c FFF784FD 		BL	PLUS
 1734              	MMOD2:
 1735 0920 FFF7F0FC 	  BL	RFROM
 1736 0924 FFF7BCFF 		BL	UMMOD
 1737 0928 FFF7ECFC 		BL	RFROM
 1738 092c FFF7AEFC 		BL	QBRAN
 1739 0930 40090000 		.word	MMOD3+MAPOFFSET
 1740 0934 FFF71CFD 		BL	SWAP
 1741 0938 FFF73EFE 		BL	NEGAT
 1742 093c FFF718FD 		BL	SWAP
 1743              	MMOD3:   
 1744 0940 52F804FB 		_UNNEST
 1745              	
 1746              	//    /MOD	( n n -- r q )
 1747              	// 	Signed divide. Return mod and quotient.
 1748              	
 1749 0944 D2080000 		.word	_MSMOD+MAPOFFSET
 1750 0948 04       	_SLMOD:	.byte   4
 1751 0949 2F4D4F44 		.ascii "/MOD"
 1752 094d 0000BF   		.p2align 2 	
 1753              	SLMOD:
 1754 0950 42F804ED 		_NEST
 1755 0954 FFF716FD 		BL	OVER
 1756 0958 FFF71CFD 		BL	ZLESS
 1757 095c FFF708FD 		BL	SWAP
 1758 0960 FFF7BAFF 		BL	MSMOD
 1759 0964 52F804FB 		_UNNEST
 1760              	
 1761              	//    MOD	 ( n n -- r )
 1762              	// 	Signed divide. Return mod only.
 1763              	
 1764 0968 48090000 		.word	_SLMOD+MAPOFFSET
 1765 096c 03       	_MODD:	.byte  3
 1766 096d 4D4F44   		.ascii "MOD"
 1767              		.p2align 2 	
 1768              	MODD:
 1769 0970 42F804ED 		_NEST
 1770 0974 FFF7ECFF 		BL	SLMOD
 1771 0978 FFF7EAFC 		BL	DROP
 1772 097c 52F804FB 		_UNNEST
 1773              	
 1774              	//    /	   ( n n -- q )
 1775              	// 	Signed divide. Return quotient only.
 1776              	
 1777 0980 6C090000 		.word	_MODD+MAPOFFSET
 1778 0984 01       	_SLASH:	.byte  1
 1779 0985 2F       		.ascii "/"
 1780 0986 00BF     		.p2align 2 	
 1781              	SLASH:
 1782 0988 42F804ED 		_NEST
 1783 098c FFF7E0FF 		BL	SLMOD
 1784 0990 FFF7EEFC 		BL	SWAP
 1785 0994 FFF7DCFC 		BL	DROP
 1786 0998 52F804FB 		_UNNEST
ARM GAS  stm32eforth-fl.s 			page 35


 1787              	
 1788              	//    */MOD	( n1 n2 n3 -- r q )
 1789              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1790              	
 1791 099c 84090000 		.word	_SLASH+MAPOFFSET
 1792 09a0 05       	_SSMOD:	.byte  5
 1793 09a1 2A2F4D4F 		.ascii "*/MOD"
 1793      44
 1794 09a6 00BF     		.p2align 2 	
 1795              	SSMOD:
 1796 09a8 42F804ED 		_NEST
 1797 09ac FFF7BCFC 		BL	TOR
 1798 09b0 FFF75EFD 		BL	MSTAR
 1799 09b4 FFF7A6FC 		BL	RFROM
 1800 09b8 FFF78EFF 		BL	MSMOD
 1801 09bc 52F804FB 		_UNNEST
 1802              	
 1803              	//    */	  ( n1 n2 n3 -- q )
 1804              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1805              	
 1806 09c0 A0090000 		.word	_SSMOD+MAPOFFSET
 1807 09c4 02       	_STASL:	.byte  2
 1808 09c5 2A2F     		.ascii "*/"
 1809 09c7 00       		.p2align 2 	
 1810              	STASL:
 1811 09c8 42F804ED 		_NEST
 1812 09cc FFF7ECFF 		BL	SSMOD
 1813 09d0 FFF7CEFC 		BL	SWAP
 1814 09d4 FFF7BCFC 		BL	DROP
 1815 09d8 52F804FB 		_UNNEST
 1816              	
 1817              	// **************************************************************************
 1818              	//  Miscellaneous
 1819              	
 1820              	//    ALIGNED	( b -- a )
 1821              	// 	Align address to the cell boundary.
 1822              	
 1823 09dc C4090000 		.word	_STASL+MAPOFFSET
 1824 09e0 07       	_ALGND:	.byte   7
 1825 09e1 414C4947 		.ascii "ALIGNED"
 1825      4E4544
 1826              		.p2align 2 	
 1827              	ALGND:
 1828 09e8 05F10305 		ADD	R5,R5,#3
 1829 09ec 6FF00304 		MVN	R4,#3
 1830 09f0 05EA0405 		AND	R5,R5,R4
 1831 09f4 7047     		_NEXT
 1832              	
 1833              	//    >CHAR	( c -- c )
 1834              	// 	Filter non-printing characters.
 1835              	
 1836 09f6 E0090000 		.word	_ALGND+MAPOFFSET
 1837 09fa 05       	_TCHAR:	.byte  5
 1838 09fb 3E434841 		.ascii ">CHAR"
 1838      52
 1839              		.p2align 2 	
 1840              	TCHAR:
ARM GAS  stm32eforth-fl.s 			page 36


 1841 0a00 42F804ED 		_NEST
 1842 0a04 FFF71FFC 		_DOLIT
 1843 0a08 7F000000 		.word	0x7F
 1844 0a0c FFF7CCFC 		BL	ANDD
 1845 0a10 FFF7A6FC 		BL	DUPP	// mask msb
 1846 0a14 FFF766FD 		BL	BLANK
 1847 0a18 FFF715FC 		_DOLIT
 1848 0a1c 7F000000 		.word	127
 1849 0a20 FFF728FF 		BL	WITHI	// check for printable
 1850 0a24 FFF7BEFD 		BL	INVER
 1851 0a28 FFF730FC 		BL	QBRAN
 1852 0a2c 3C0A0000 		.word	TCHA1+MAPOFFSET
 1853 0a30 FFF78EFC 		BL	DROP
 1854 0a34 FFF707FC 		_DOLIT
 1855 0a38 5F000000 		.word	'_'	// replace non-printables
 1856              	TCHA1:
 1857 0a3c 52F804FB 		  _UNNEST
 1858              	
 1859              	//    DEPTH	( -- n )
 1860              	// 	Return the depth of the data stack.
 1861              	
 1862 0a40 FA090000 		.word	_TCHAR+MAPOFFSET
 1863 0a44 05       	_DEPTH:	.byte  5
 1864 0a45 44455054 		.ascii "DEPTH"
 1864      48
 1865 0a4a 00BF     		.p2align 2 	
 1866              	DEPTH:
 1867 0a4c 41F8045D 		_PUSH
 1868 0a50 44F68465 		MOVW	R5,#SPP&0xffff+4 
 1869 0a54 C2F20005 	 	MOVT	R5,#SPP>>16 
 1870 0a58 A5EB0105 		SUB	R5,R5,R1
 1871 0a5c 4FEAA505 		ASR	R5,R5,#2
 1872 0a60 A5F10105 		SUB	R5,R5,#1
 1873 0a64 7047     		_NEXT
 1874              	
 1875              	//    PICK	( ... +n -- ... w )
 1876              	// 	Copy the nth stack item to tos.
 1877              	
 1878 0a66 440A0000 		.word	_DEPTH+MAPOFFSET
 1879 0a6a 04       	_PICK:	.byte  4
 1880 0a6b 5049434B 		.ascii "PICK"
 1881 0a6f 00       		.p2align 2 	
 1882              	PICK:
 1883 0a70 42F804ED 		_NEST
 1884 0a74 FFF706FD 		BL	ONEP
 1885 0a78 FFF73EFD 		BL	CELLS
 1886 0a7c FFF75EFC 		BL	SPAT
 1887 0a80 FFF7D2FC 		BL	PLUS
 1888 0a84 FFF728FC 		BL	AT
 1889 0a88 52F804FB 		_UNNEST
 1890              	
 1891              	// **************************************************************************
 1892              	//  Memory access
 1893              	
 1894              	//    HERE	( -- a )
 1895              	// 	Return the top of the code dictionary.
 1896              	
ARM GAS  stm32eforth-fl.s 			page 37


 1897 0a8c 6A0A0000 		.word	_PICK+MAPOFFSET
 1898 0a90 04       	_HERE:	.byte  4
 1899 0a91 48455245 		.ascii "HERE"
 1900 0a95 0000BF   		.p2align 2 	
 1901              	HERE:
 1902 0a98 42F804ED 		_NEST
 1903 0a9c FFF7ACFE 		BL	CPP
 1904 0aa0 FFF71AFC 		BL	AT
 1905 0aa4 52F804FB 		_UNNEST
 1906              		
 1907              	// VHERE ( --a )
 1908              	// return address of top RAM space 
 1909 0aa8 900A0000 		.word _HERE+MAPOFFSET 
 1910 0aac 05       	_VHERE: .byte 5 
 1911 0aad 56484552 		.ascii "VHERE" 
 1911      45
 1912 0ab2 00BF     		.p2align 2 
 1913              	VHERE: 
 1914 0ab4 42F804ED 		_NEST 
 1915 0ab8 FFF7A8FE 		BL UTOP 
 1916 0abc FFF70CFC 		BL AT  
 1917 0ac0 52F804FB 		_UNNEST 
 1918              	
 1919              	//    PAD	 ( -- a )
 1920              	// 	Return the address of a temporary buffer.
 1921              	
 1922 0ac4 AC0A0000 		.word	_VHERE+MAPOFFSET
 1923 0ac8 03       	_PAD:	.byte  3
 1924 0ac9 504144   		.ascii "PAD"
 1925              		.p2align 2 	
 1926              	PAD:
 1927 0acc 42F804ED 		_NEST
 1928 0ad0 FFF7F0FF 		BL	VHERE
 1929 0ad4 05F15005 		ADD	R5,R5,#80
 1930 0ad8 52F804FB 		_UNNEST
 1931              	
 1932              	//    TIB	 ( -- a )
 1933              	// 	Return the address of the terminal input buffer.
 1934              	
 1935 0adc C80A0000 		.word	_PAD+MAPOFFSET
 1936 0ae0 03       	_TIB:	.byte  3
 1937 0ae1 544942   		.ascii "TIB"
 1938              		.p2align 2 	
 1939              	TIB:
 1940 0ae4 41F8045D 		_PUSH
 1941 0ae8 9D6A     		ldr r5,[r3,#TIB_OFS]
 1942 0aea 7047     		_NEXT
 1943              	
 1944              	//    @EXECUTE	( a -- )
 1945              	// 	Execute vector stored in address a.
 1946              	
 1947 0aec E00A0000 		.word	_TIB+MAPOFFSET
 1948 0af0 08       	_ATEXE:	.byte   8
 1949 0af1 40455845 		.ascii "@EXECUTE"
 1949      43555445 
 1950 0af9 0000BF   		.p2align 2 	
 1951              	ATEXE:
ARM GAS  stm32eforth-fl.s 			page 38


 1952 0afc 2C00     		MOVS	R4,R5
 1953 0afe 51F8045B 		_POP
 1954 0b02 2468     		LDR	R4,[R4]
 1955 0b04 44F00104 		ORR	R4,R4,#1
 1956 0b08 18BF     	    IT NE 
 1957 0b0a 2047     		BXNE	R4
 1958 0b0c 7047     		_NEXT
 1959              	
 1960              	//    CMOVE	( b1 b2 u -- )
 1961              	// 	Copy u bytes from b1 to b2.
 1962              	
 1963 0b0e F00A0000 		.word	_ATEXE+MAPOFFSET
 1964 0b12 05       	_CMOVE:	.byte   5
 1965 0b13 434D4F56 		.ascii "CMOVE"
 1965      45
 1966              		.p2align 2 	
 1967              	CMOVE:
 1968 0b18 51F8046B 		LDR	R6,[R1],#4
 1969 0b1c 51F8047B 		LDR	R7,[R1],#4
 1970 0b20 03E0     		B CMOV1
 1971              	CMOV0:
 1972 0b22 17F8014B 		LDRB	R4,[R7],#1
 1973 0b26 06F8014B 		STRB	R4,[R6],#1
 1974              	CMOV1:
 1975 0b2a 2D00     		MOVS	R5,R5
 1976 0b2c 02D0     		BEQ	CMOV2
 1977 0b2e A5F10105 		SUB	R5,R5,#1
 1978 0b32 F6E7     		B CMOV0
 1979              	CMOV2:
 1980 0b34 51F8045B 		_POP
 1981 0b38 7047     		_NEXT
 1982              	
 1983              	//    MOVE	( a1 a2 u -- )
 1984              	// 	Copy u words from a1 to a2.
 1985              	
 1986 0b3a 120B0000 		.word	_CMOVE+MAPOFFSET
 1987 0b3e 04       	_MOVE:	.byte   4
 1988 0b3f 4D4F5645 		.ascii "MOVE"
 1989 0b43 00       		.p2align 2 	
 1990              	MOVE:
 1991 0b44 25F00305 		AND	R5,R5,#-4
 1992 0b48 51F8046B 		LDR	R6,[R1],#4
 1993 0b4c 51F8047B 		LDR	R7,[R1],#4
 1994 0b50 03E0     		B MOVE1
 1995              	MOVE0:
 1996 0b52 57F8044B 		LDR	R4,[R7],#4
 1997 0b56 46F8044B 		STR	R4,[R6],#4
 1998              	MOVE1:
 1999 0b5a 2D00     		MOVS	R5,R5
 2000 0b5c 02D0     		BEQ	MOVE2
 2001 0b5e A5F10405 		SUB	R5,R5,#4
 2002 0b62 F6E7     		B MOVE0
 2003              	MOVE2:
 2004 0b64 51F8045B 		_POP
 2005 0b68 7047     		_NEXT
 2006              	
 2007              	//    FILL	( b u c -- )
ARM GAS  stm32eforth-fl.s 			page 39


 2008              	// 	Fill u bytes of character c to area beginning at b.
 2009              	
 2010 0b6a 3E0B0000 		.word	_MOVE+MAPOFFSET
 2011 0b6e 04       	_FILL:	.byte   4
 2012 0b6f 46494C4C 		.ascii "FILL"
 2013 0b73 00       		.p2align 2 	
 2014              	FILL:
 2015 0b74 51F8046B 		LDR	R6,[R1],#4
 2016 0b78 51F8047B 		LDR	R7,[R1],#4
 2017              	FILL0:
 2018 0b7c 00E0     		B FILL1
 2019 0b7e 2D46     		MOV	R5,R5
 2020              	FILL1:
 2021 0b80 07F8015B 		STRB	R5,[R7],#1
 2022 0b84 3600     		MOVS	R6,R6
 2023 0b86 02D0     		BEQ	FILL2
 2024 0b88 A6F10106 		SUB	R6,R6,#1
 2025 0b8c F6E7     		B FILL0
 2026              	FILL2:
 2027 0b8e 51F8045B 		_POP
 2028 0b92 7047     		_NEXT
 2029              	
 2030              	//    PACK$	( b u a -- a )
 2031              	// 	Build a counted word with u characters from b. Null fill.
 2032              	
 2033 0b94 6E0B0000 		.word	_FILL+MAPOFFSET
 2034 0b98 05       	_PACKS:	.byte  5
 2035 0b99 5041434B 		.ascii "PACK$$"
 2035      2424
 2036 0b9f 00       		.p2align 2 	
 2037              	PACKS:
 2038 0ba0 42F804ED 		_NEST
 2039 0ba4 FFF720FF 		BL	ALGND
 2040 0ba8 FFF7DAFB 		BL	DUPP
 2041 0bac FFF7BCFB 		BL	TOR			// strings only on cell boundary
 2042 0bb0 FFF7E8FB 		BL	OVER
 2043 0bb4 FFF738FC 		BL	PLUS
 2044 0bb8 FFF764FC 		BL	ONEP
 2045 0bbc FFF743FB 		_DOLIT
 2046 0bc0 FCFFFFFF 		.word	0xFFFFFFFC
 2047 0bc4 FFF7F0FB 		BL	ANDD			// count mod cell
 2048 0bc8 FFF73DFB 		_DOLIT
 2049 0bcc 00000000 		.word	0
 2050 0bd0 FFF7CEFB 		BL	SWAP
 2051 0bd4 FFF776FB 		BL	STORE			// null fill cell
 2052 0bd8 FFF79EFB 		BL	RAT
 2053 0bdc FFF7CAFC 		BL	DDUP
 2054 0be0 FFF780FB 		BL	CSTOR
 2055 0be4 FFF74EFC 		BL	ONEP			// save count
 2056 0be8 FFF7C2FB 		BL	SWAP
 2057 0bec FFF794FF 		BL	CMOVE
 2058 0bf0 FFF788FB 		BL	RFROM
 2059 0bf4 52F804FB 		_UNNEST   			// move string
 2060              	
 2061              	// **************************************************************************
 2062              	//  Numeric output, single precision
 2063              	
ARM GAS  stm32eforth-fl.s 			page 40


 2064              	//    DIGIT	( u -- c )
 2065              	// 	Convert digit u to a character.
 2066              	
 2067 0bf8 980B0000 		.word	_PACKS+MAPOFFSET
 2068 0bfc 05       	_DIGIT:	.byte  5
 2069 0bfd 44494749 		.ascii "DIGIT"
 2069      54
 2070 0c02 00BF     		.p2align 2 	
 2071              	DIGIT:
 2072 0c04 42F804ED 		_NEST
 2073 0c08 FFF71DFB 		_DOLIT
 2074 0c0c 09000000 		.word	9
 2075 0c10 FFF7B8FB 		BL	OVER
 2076 0c14 FFF704FD 		BL	LESS
 2077 0c18 05F00705 		AND	R5,R5,#7
 2078 0c1c FFF704FC 		BL	PLUS
 2079 0c20 05F13005 		ADD	R5,R5,#'0'
 2080 0c24 52F804FB 		_UNNEST
 2081              	
 2082              	//    EXTRACT	( n base -- n c )
 2083              	// 	Extract the least significant digit from n.
 2084              	
 2085 0c28 FC0B0000 		.word	_DIGIT+MAPOFFSET
 2086 0c2c 07       	_EXTRC:	.byte  7
 2087 0c2d 45585452 		.ascii "EXTRACT"
 2087      414354
 2088              		.p2align 2 	
 2089              	EXTRC:
 2090 0c34 42F804ED 		_NEST
 2091 0c38 FFF705FB 		_DOLIT
 2092 0c3c 00000000 		.word	0
 2093 0c40 FFF796FB 		BL	SWAP
 2094 0c44 FFF72CFE 		BL	UMMOD
 2095 0c48 FFF792FB 		BL	SWAP
 2096 0c4c FFF7DAFF 		BL	DIGIT
 2097 0c50 52F804FB 		_UNNEST
 2098              	
 2099              	//    <#	  ( -- )
 2100              	// 	Initiate the numeric output process.
 2101              	
 2102 0c54 2C0C0000 		.word	_EXTRC+MAPOFFSET
 2103 0c58 02       	_BDIGS:	.byte  2
 2104 0c59 3C23     		.ascii "<#"
 2105 0c5b 00       		.p2align 2 	
 2106              	BDIGS:
 2107 0c5c 42F804ED 		_NEST
 2108 0c60 FFF734FF 		BL	PAD
 2109 0c64 FFF7B2FD 		BL	HLD
 2110 0c68 FFF72CFB 		BL	STORE
 2111 0c6c 52F804FB 		_UNNEST
 2112              	
 2113              	//    HOLD	( c -- )
 2114              	// 	Insert a character into the numeric output string.
 2115              	
 2116 0c70 580C0000 		.word	_BDIGS+MAPOFFSET
 2117 0c74 04       	_HOLD:	.byte  4
 2118 0c75 484F4C44 		.ascii "HOLD"
ARM GAS  stm32eforth-fl.s 			page 41


 2119 0c79 0000BF   		.p2align 2 	
 2120              	HOLD:
 2121 0c7c 42F804ED 		_NEST
 2122 0c80 FFF7A4FD 		BL	HLD
 2123 0c84 FFF728FB 		BL	AT
 2124 0c88 FFF704FC 		BL	ONEM
 2125 0c8c FFF768FB 		BL	DUPP
 2126 0c90 FFF79CFD 		BL	HLD
 2127 0c94 FFF716FB 		BL	STORE
 2128 0c98 FFF724FB 		BL	CSTOR
 2129 0c9c 52F804FB 		_UNNEST
 2130              	
 2131              	//    #	   ( u -- u )
 2132              	// 	Extract one digit from u and append the digit to output string.
 2133              	
 2134 0ca0 740C0000 		.word	_HOLD+MAPOFFSET
 2135 0ca4 01       	_DIG:	.byte  1
 2136 0ca5 23       		.ascii "#"
 2137 0ca6 00BF     		.p2align 2 	
 2138              	DIG:
 2139 0ca8 42F804ED 		_NEST
 2140 0cac FFF756FD 		BL	BASE
 2141 0cb0 FFF712FB 		BL	AT
 2142 0cb4 FFF7BEFF 		BL	EXTRC
 2143 0cb8 FFF7E0FF 		BL	HOLD
 2144 0cbc 52F804FB 		_UNNEST
 2145              	
 2146              	//    #S	  ( u -- 0 )
 2147              	// 	Convert u until all digits are added to the output string.
 2148              	
 2149 0cc0 A40C0000 		.word	_DIG+MAPOFFSET
 2150 0cc4 02       	_DIGS:	.byte  2
 2151 0cc5 2353     		.ascii "#S"
 2152 0cc7 00       		.p2align 2 	
 2153              	DIGS:
 2154 0cc8 42F804ED 		_NEST
 2155              	DIGS1:
 2156 0ccc FFF7ECFF 	    BL	DIG
 2157 0cd0 FFF746FB 		BL	DUPP
 2158 0cd4 FFF7DAFA 		BL	QBRAN
 2159 0cd8 DE0C0000 		.word	DIGS2+MAPOFFSET
 2160 0cdc F6E7     		B	DIGS1
 2161              	DIGS2:
 2162 0cde 52F804FB 		  _UNNEST
 2163              	
 2164              	//    SIGN	( n -- )
 2165              	// 	Add a minus sign to the numeric output string.
 2166              	
 2167 0ce2 C40C0000 		.word	_DIGS+MAPOFFSET
 2168 0ce6 04       	_SIGN:	.byte  4
 2169 0ce7 5349474E 		.ascii "SIGN"
 2170 0ceb 00       		.p2align 2 	
 2171              	SIGN:
 2172 0cec 42F804ED 		_NEST
 2173 0cf0 FFF750FB 		BL	ZLESS
 2174 0cf4 FFF7CAFA 		BL	QBRAN
 2175 0cf8 080D0000 		.word	SIGN1+MAPOFFSET
ARM GAS  stm32eforth-fl.s 			page 42


 2176 0cfc FFF7A3FA 		_DOLIT
 2177 0d00 2D000000 		.word	'-'
 2178 0d04 FFF7BAFF 		BL	HOLD
 2179              	SIGN1:
 2180 0d08 52F804FB 		  _UNNEST
 2181              	
 2182              	//    #>	  ( w -- b u )
 2183              	// 	Prepare the outputDCB to be TYPE'd.
 2184              	
 2185 0d0c E60C0000 		.word	_SIGN+MAPOFFSET
 2186 0d10 02       	_EDIGS:	.byte  2
 2187 0d11 233E     		.ascii "#>"
 2188 0d13 00       		.p2align 2 	
 2189              	EDIGS:
 2190 0d14 42F804ED 		_NEST
 2191 0d18 FFF71AFB 		BL	DROP
 2192 0d1c FFF756FD 		BL	HLD
 2193 0d20 FFF7DAFA 		BL	AT
 2194 0d24 FFF7D2FE 		BL	PAD
 2195 0d28 FFF72CFB 		BL	OVER
 2196 0d2c FFF784FB 		BL	SUBB
 2197 0d30 52F804FB 		_UNNEST
 2198              	
 2199              	//    str	 ( n -- b u )
 2200              	// 	Convert a signed integer to a numeric string.
 2201              	
 2202              	// 	.word	_EDIGS+MAPOFFSET
 2203              	// _STRR	.byte  3
 2204              	// 	.ascii "str"
 2205              	// 	.p2align 2 	
 2206              	STRR:
 2207 0d34 42F804ED 		_NEST
 2208 0d38 FFF712FB 		BL	DUPP
 2209 0d3c FFF7F4FA 		BL	TOR
 2210 0d40 FFF742FC 		BL	ABSS
 2211 0d44 FFF78AFF 		BL	BDIGS
 2212 0d48 FFF7BEFF 		BL	DIGS
 2213 0d4c FFF7DAFA 		BL	RFROM
 2214 0d50 FFF7CCFF 		BL	SIGN
 2215 0d54 FFF7DEFF 		BL	EDIGS
 2216 0d58 52F804FB 		_UNNEST
 2217              	
 2218              	//    HEX	 ( -- )
 2219              	// 	Use radix 16 as base for numeric conversions.
 2220              	
 2221 0d5c 100D0000 		.word	_EDIGS+MAPOFFSET
 2222 0d60 03       	_HEX:	.byte  3
 2223 0d61 484558   		.ascii "HEX"
 2224              		.p2align 2 	
 2225              	HEX:
 2226 0d64 42F804ED 		_NEST
 2227 0d68 FFF76DFA 		_DOLIT
 2228 0d6c 10000000 		.word	16
 2229 0d70 FFF7F4FC 		BL	BASE
 2230 0d74 FFF7A6FA 		BL	STORE
 2231 0d78 52F804FB 		_UNNEST
 2232              	
ARM GAS  stm32eforth-fl.s 			page 43


 2233              	//    DECIMAL	( -- )
 2234              	// 	Use radix 10 as base for numeric conversions.
 2235              	
 2236 0d7c 600D0000 		.word	_HEX+MAPOFFSET
 2237 0d80 07       	_DECIM:	.byte  7
 2238 0d81 44454349 		.ascii "DECIMAL"
 2238      4D414C
 2239              		.p2align 2 	
 2240              	DECIM:
 2241 0d88 42F804ED 		_NEST
 2242 0d8c FFF75BFA 		_DOLIT
 2243 0d90 0A000000 		.word	10
 2244 0d94 FFF7E2FC 		BL	BASE
 2245 0d98 FFF794FA 		BL	STORE
 2246 0d9c 52F804FB 		_UNNEST
 2247              	
 2248              	// **************************************************************************
 2249              	//  Numeric input, single precision
 2250              	
 2251              	//    DIGIT?	( c base -- u t )
 2252              	// 	Convert a character to its numeric value. A flag indicates success.
 2253              	
 2254 0da0 800D0000 		.word	_DECIM+MAPOFFSET
 2255 0da4 06       	_DIGTQ:	.byte  6
 2256 0da5 44494749 		.ascii "DIGIT?"
 2256      543F
 2257 0dab 00       		.p2align 2 	
 2258              	DIGTQ:
 2259 0dac 42F804ED 		_NEST
 2260 0db0 FFF7BAFA 		BL	TOR
 2261 0db4 FFF747FA 		_DOLIT
 2262 0db8 30000000 		.word	'0'
 2263 0dbc FFF73CFB 		BL	SUBB
 2264 0dc0 FFF741FA 		_DOLIT
 2265 0dc4 09000000 		.word	9
 2266 0dc8 FFF7DCFA 		BL	OVER
 2267 0dcc FFF728FC 		BL	LESS
 2268 0dd0 FFF75CFA 		BL	QBRAN
 2269 0dd4 F80D0000 		.word	DGTQ1+MAPOFFSET
 2270 0dd8 FFF735FA 		_DOLIT
 2271 0ddc 07000000 		.word	7
 2272 0de0 FFF72AFB 		BL	SUBB
 2273 0de4 FFF7BCFA 		BL	DUPP
 2274 0de8 FFF72DFA 		_DOLIT
 2275 0dec 0A000000 		.word	10
 2276 0df0 FFF716FC 		BL	LESS
 2277 0df4 FFF7E2FA 		BL	ORR
 2278              	DGTQ1:
 2279 0df8 FFF7B2FA 	  BL	DUPP
 2280 0dfc FFF782FA 		BL	RFROM
 2281 0e00 FFF702FC 		BL	ULESS
 2282 0e04 52F804FB 		_UNNEST
 2283              	
 2284              	//    NUMBER?	( a -- n T | a F )
 2285              	// 	Convert a number word to integer. Push a flag on tos.
 2286              	
 2287 0e08 A40D0000 		.word	_DIGTQ+MAPOFFSET
ARM GAS  stm32eforth-fl.s 			page 44


 2288 0e0c 07       	_NUMBQ:	.byte  7
 2289 0e0d 4E554D42 		.ascii "NUMBER?"
 2289      45523F
 2290              		.p2align 2 	
 2291              	NUMBQ:
 2292 0e14 42F804ED 		_NEST
 2293 0e18 FFF7A0FC 		BL	BASE
 2294 0e1c FFF75CFA 		BL	AT
 2295 0e20 FFF782FA 		BL	TOR
 2296 0e24 FFF70FFA 		_DOLIT
 2297 0e28 00000000 		.word	0
 2298 0e2c FFF7AAFA 		BL	OVER
 2299 0e30 FFF746FC 		BL	COUNT
 2300 0e34 FFF7A6FA 		BL	OVER
 2301 0e38 FFF75EFA 		BL	CAT
 2302 0e3c FFF703FA 		_DOLIT
 2303 0e40 24000000 		.word	'$'
 2304 0e44 FFF7D4FB 		BL	EQUAL
 2305 0e48 FFF720FA 		BL	QBRAN
 2306 0e4c 640E0000 		.word	NUMQ1+MAPOFFSET
 2307 0e50 FFF788FF 		BL	HEX
 2308 0e54 FFF78CFA 		BL	SWAP
 2309 0e58 FFF714FB 		BL	ONEP
 2310 0e5c FFF788FA 		BL	SWAP
 2311 0e60 FFF718FB 		BL	ONEM
 2312              	NUMQ1:
 2313 0e64 FFF78EFA 		BL	OVER
 2314 0e68 FFF746FA 		BL	CAT
 2315 0e6c FFF7EBF9 		_DOLIT
 2316 0e70 2D000000 		.word	'-'
 2317 0e74 FFF7BCFB 		BL	EQUAL
 2318 0e78 FFF756FA 		BL	TOR
 2319 0e7c FFF778FA 		BL	SWAP
 2320 0e80 FFF74AFA 		BL	RAT
 2321 0e84 FFF7D8FA 		BL	SUBB
 2322 0e88 FFF772FA 		BL	SWAP
 2323 0e8c FFF744FA 		BL	RAT
 2324 0e90 FFF7CAFA 		BL	PLUS
 2325 0e94 FFF750FB 		BL	QDUP
 2326 0e98 FFF7F8F9 		BL	QBRAN
 2327 0e9c 280F0000 		.word	NUMQ6+MAPOFFSET
 2328 0ea0 FFF7F8FA 		BL	ONEM
 2329 0ea4 FFF740FA 		BL	TOR
 2330              	NUMQ2:
 2331 0ea8 FFF75AFA 		BL	DUPP
 2332 0eac FFF73CFA 		BL	TOR
 2333 0eb0 FFF722FA 		BL	CAT
 2334 0eb4 FFF752FC 		BL	BASE
 2335 0eb8 FFF70EFA 		BL	AT
 2336 0ebc FFF776FF 		BL	DIGTQ
 2337 0ec0 FFF7E4F9 		BL	QBRAN
 2338 0ec4 0C0F0000 		.word	NUMQ4+MAPOFFSET
 2339 0ec8 FFF752FA 		BL	SWAP
 2340 0ecc FFF746FC 		BL	BASE
 2341 0ed0 FFF702FA 		BL	AT
 2342 0ed4 FFF7B8FA 		BL	STAR
 2343 0ed8 FFF7A6FA 		BL	PLUS
ARM GAS  stm32eforth-fl.s 			page 45


 2344 0edc FFF712FA 		BL	RFROM
 2345 0ee0 FFF7D0FA 		BL	ONEP
 2346 0ee4 FFF7C3F9 		BL	DONXT
 2347 0ee8 A80E0000 		.word	NUMQ2+MAPOFFSET
 2348 0eec FFF714FA 		BL	RAT
 2349 0ef0 FFF73EFA 		BL	SWAP
 2350 0ef4 FFF72CFA 		BL	DROP
 2351 0ef8 FFF7C8F9 		BL	QBRAN
 2352 0efc 040F0000 		.word	NUMQ3+MAPOFFSET
 2353 0f00 FFF75AFB 		BL	NEGAT
 2354              	NUMQ3:
 2355 0f04 FFF734FA 		BL	SWAP
 2356 0f08 00F00CB8 		B.W	NUMQ5
 2357              	NUMQ4:
 2358 0f0c FFF7FAF9 		BL	RFROM
 2359 0f10 FFF7F8F9 		BL	RFROM
 2360 0f14 FFF724FB 		BL	DDROP
 2361 0f18 FFF722FB 		BL	DDROP
 2362 0f1c FFF793F9 		_DOLIT
 2363 0f20 00000000 		.word	0
 2364              	NUMQ5:
 2365 0f24 FFF71CFA 		BL	DUPP
 2366              	NUMQ6:
 2367 0f28 FFF7ECF9 		BL	RFROM
 2368 0f2c FFF718FB 		BL	DDROP
 2369 0f30 FFF7E8F9 		BL	RFROM
 2370 0f34 FFF712FC 		BL	BASE
 2371 0f38 FFF7C4F9 		BL	STORE
 2372 0f3c 52F804FB 		_UNNEST
 2373              	
 2374              	// **************************************************************************
 2375              	//  Basic I/O
 2376              	
 2377              	//    KEY	 ( -- c )
 2378              	// 	Wait for and return an input character.
 2379              	
 2380 0f40 0C0E0000 		.word	_NUMBQ+MAPOFFSET
 2381 0f44 03       	_KEY:	.byte  3
 2382 0f45 4B4559   		.ascii "KEY"
 2383              		.p2align 2 	
 2384              	KEY:
 2385 0f48 42F804ED 		_NEST
 2386              	KEY1:
 2387 0f4c FFF750F9 		BL	QRX
 2388 0f50 FFF79CF9 		BL	QBRAN
 2389 0f54 4C0F0000 		.word	KEY1+MAPOFFSET
 2390              	// CTRL-C reboot
 2391 0f58 FFF702FA 		BL DUPP 
 2392 0f5c FFF773F9 		BL DOLIT 
 2393 0f60 03000000 		.word 3 
 2394 0f64 FFF744FB 		BL EQUAL 
 2395 0f68 FFF71CFB 		BL INVER
 2396 0f6c FFF78EF9 		BL QBRAN
 2397 0f70 74010000 		.word REBOOT+MAPOFFSET 
 2398 0f74 52F804FB 		_UNNEST
 2399              	
 2400              	//    SPACE	( -- )
ARM GAS  stm32eforth-fl.s 			page 46


 2401              	// 	Send the blank character to the output device.
 2402              	
 2403 0f78 440F0000 		.word	_KEY+MAPOFFSET
 2404 0f7c 05       	_SPACE:	.byte  5
 2405 0f7d 53504143 		.ascii "SPACE"
 2405      45
 2406 0f82 00BF     		.p2align 2 	
 2407              	SPACE:
 2408 0f84 42F804ED 		_NEST
 2409 0f88 FFF7ACFA 		BL	BLANK
 2410 0f8c FFF74AF9 		BL	EMIT
 2411 0f90 52F804FB 		_UNNEST
 2412              	
 2413              	//    SPACES	( +n -- )
 2414              	// 	Send n spaces to the output device.
 2415              	
 2416 0f94 7C0F0000 		.word	_SPACE+MAPOFFSET
 2417 0f98 06       	_SPACS:	.byte  6
 2418 0f99 53504143 		.ascii "SPACES"
 2418      4553
 2419 0f9f 00       		.p2align 2 	
 2420              	SPACS:
 2421 0fa0 42F804ED 		_NEST
 2422 0fa4 FFF74FF9 		_DOLIT
 2423 0fa8 00000000 		.word	0
 2424 0fac FFF750FB 		BL	MAX
 2425 0fb0 FFF7BAF9 		BL	TOR
 2426 0fb4 00F002B8 		B.W	CHAR2
 2427              	CHAR1:
 2428 0fb8 FFF7E4FF 		BL	SPACE
 2429              	CHAR2:
 2430 0fbc FFF757F9 		BL	DONXT
 2431 0fc0 B80F0000 		.word	CHAR1+MAPOFFSET
 2432 0fc4 52F804FB 		_UNNEST
 2433              	
 2434              	//    TYPE	( b u -- )
 2435              	// 	Output u characters from b.
 2436              	
 2437 0fc8 980F0000 		.word	_SPACS+MAPOFFSET
 2438 0fcc 04       	_TYPEE:	.byte	4
 2439 0fcd 54595045 		.ascii "TYPE"
 2440 0fd1 0000BF   		.p2align 2 	
 2441              	TYPEE:
 2442 0fd4 42F804ED 		_NEST
 2443 0fd8 FFF7A6F9 		BL  TOR   // ( a+1 -- R: u )
 2444 0fdc 05E0     		B	TYPE2
 2445              	TYPE1:  
 2446 0fde FFF76FFB 		BL  COUNT
 2447 0fe2 FFF70DFD 		BL	TCHAR
 2448 0fe6 FFF71DF9 		BL	EMIT
 2449              	TYPE2:  
 2450 0fea FFF740F9 		BL  DONXT  
 2451 0fee DE0F0000 		.word	TYPE1+MAPOFFSET
 2452 0ff2 FFF7ADF9 		BL	DROP
 2453 0ff6 52F804FB 		_UNNEST
 2454              	
 2455              	//    CR	  ( -- )
ARM GAS  stm32eforth-fl.s 			page 47


 2456              	// 	Output a carriage return and a line feed.
 2457              	
 2458 0ffa CC0F0000 		.word	_TYPEE+MAPOFFSET
 2459 0ffe 02       	_CR:	.byte  2
 2460 0fff 4352     		.ascii "CR"
 2461 1001 0000BF   		.p2align 2 	
 2462              	CR:
 2463 1004 42F804ED 		_NEST
 2464 1008 FFF71DF9 		_DOLIT
 2465 100c 0D000000 		.word	CRR
 2466 1010 FFF708F9 		BL	EMIT
 2467 1014 FFF717F9 		_DOLIT
 2468 1018 0A000000 		.word	LF
 2469 101c FFF702F9 		BL	EMIT
 2470 1020 52F804FB 		_UNNEST
 2471              	
 2472              	//    do_$	( -- a )
 2473              	// 	Return the address of a compiled string.
 2474              	//  adjust return address to skip over it.
 2475              	
 2476              	// 	.word	_CR+MAPOFFSET
 2477              	// _DOSTR	.byte  COMPO+3
 2478              	// 	.ascii "do$$"
 2479              	// 	.p2align 2 	
 2480              	DOSTR:
 2481 1024 42F804ED 		_NEST     
 2482              	/* compiled string address is 2 levels deep */
 2483 1028 FFF76CF9 		BL	RFROM	// { -- a1 }
 2484 102c FFF76AF9 		BL	RFROM	//  {a1 -- a1 a2 } b0 set
 2485 1030 FFF730FA 		BL	ONEM	//  clear b0
 2486 1034 FFF794F9 		BL	DUPP	// {a1 a2 -- a1 a2 a2 }
 2487 1038 FFF742FB 		BL	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2488 103c FFF7F4F9 		BL	PLUS	// { -- a1 a2 a2+1+c }
 2489 1040 FFF7D2FC 		BL	ALGND	//  end of string
 2490 1044 FFF71EFA 		BL	ONEP	//  restore b0, this result in return address 2 level deep.
 2491 1048 FFF76EF9 		BL	TOR		//  address after string { -- a1 a2 }
 2492 104c FFF790F9 		BL	SWAP	//  count tugged
 2493 1050 FFF76AF9 		BL	TOR     //  ( -- a2) is string address
 2494 1054 52F804FB 		_UNNEST
 2495              	
 2496              	//    $"|	( -- a )
 2497              	// 	Run time routine compiled by _". Return address of a compiled string.
 2498              	
 2499              	// 	.word	_DOSTR+MAPOFFSET
 2500              	// _STRQP	.byte  COMPO+3
 2501              	// 	.ascii "$\"|"
 2502              	// 	.p2align 2 	
 2503              	STRQP:
 2504 1058 42F804ED 		_NEST
 2505 105c FFF7E2FF 		BL	DOSTR
 2506 1060 52F804FB 		_UNNEST			// force a call to dostr
 2507              	
 2508              	//    .$	( a -- )
 2509              	// 	Run time routine of ." . Output a compiled string.
 2510              	
 2511              	// 	.word	_STRQP+MAPOFFSET
 2512              	// _DOTST	.byte  COMPO+2
ARM GAS  stm32eforth-fl.s 			page 48


 2513              	// 	.ascii ".$$"
 2514              	// 	.p2align 2 	
 2515              	DOTST:
 2516 1064 42F804ED 		_NEST
 2517 1068 FFF72AFB 		BL	COUNT // ( -- a+1 c )
 2518 106c FFF7B2FF 		BL	TYPEE
 2519 1070 52F804FB 		_UNNEST
 2520              	
 2521              	//    ."|	( -- )
 2522              	// 	Run time routine of ." . Output a compiled string.
 2523              	
 2524              	// 	.word	_DOTST+MAPOFFSET
 2525              	// _DOTQP	.byte  COMPO+3
 2526              	// 	.ascii ".""|"
 2527              	// 	.p2align 2 	
 2528              	DOTQP:
 2529 1074 42F804ED 		_NEST
 2530 1078 FFF7D4FF 		BL	DOSTR
 2531 107c FFF7F2FF 		BL	DOTST
 2532 1080 52F804FB 		_UNNEST
 2533              	
 2534              	//    .R	  ( n +n -- )
 2535              	// 	Display an integer in a field of n columns, right justified.
 2536              	
 2537 1084 FE0F0000 		.word	_CR+MAPOFFSET
 2538 1088 02       	_DOTR:	.byte  2
 2539 1089 2E52     		.ascii ".R"
 2540 108b 00       		.p2align 2 	
 2541              	DOTR:
 2542 108c 42F804ED 		_NEST
 2543 1090 FFF74AF9 		BL	TOR
 2544 1094 FFF74EFE 		BL	STRR
 2545 1098 FFF734F9 		BL	RFROM
 2546 109c FFF772F9 		BL	OVER
 2547 10a0 FFF7CAF9 		BL	SUBB
 2548 10a4 FFF77CFF 		BL	SPACS
 2549 10a8 FFF794FF 		BL	TYPEE
 2550 10ac 52F804FB 		_UNNEST
 2551              	
 2552              	//    U.R	 ( u +n -- )
 2553              	// 	Display an unsigned integer in n column, right justified.
 2554              	
 2555 10b0 88100000 		.word	_DOTR+MAPOFFSET
 2556 10b4 03       	_UDOTR:	.byte  3
 2557 10b5 552E52   		.ascii "U.R"
 2558              		.p2align 2 	
 2559              	UDOTR:
 2560 10b8 42F804ED 		_NEST
 2561 10bc FFF734F9 		BL	TOR
 2562 10c0 FFF7CCFD 		BL	BDIGS
 2563 10c4 FFF700FE 		BL	DIGS
 2564 10c8 FFF724FE 		BL	EDIGS
 2565 10cc FFF71AF9 		BL	RFROM
 2566 10d0 FFF758F9 		BL	OVER
 2567 10d4 FFF7B0F9 		BL	SUBB
 2568 10d8 FFF762FF 		BL	SPACS
 2569 10dc FFF77AFF 		BL	TYPEE
ARM GAS  stm32eforth-fl.s 			page 49


 2570 10e0 52F804FB 		_UNNEST
 2571              	
 2572              	//    U.	  ( u -- )
 2573              	// 	Display an unsigned integer in free format.
 2574              	
 2575 10e4 B4100000 		.word	_UDOTR+MAPOFFSET
 2576 10e8 02       	_UDOT:	.byte  2
 2577 10e9 552E     		.ascii "U."
 2578 10eb 00       		.p2align 2 	
 2579              	UDOT:
 2580 10ec 42F804ED 		_NEST
 2581 10f0 FFF7B4FD 		BL	BDIGS
 2582 10f4 FFF7E8FD 		BL	DIGS
 2583 10f8 FFF70CFE 		BL	EDIGS
 2584 10fc FFF742FF 		BL	SPACE
 2585 1100 FFF768FF 		BL	TYPEE
 2586 1104 52F804FB 		_UNNEST
 2587              	
 2588              	//    .	   ( w -- )
 2589              	// 	Display an integer in free format, preceeded by a space.
 2590              	
 2591 1108 E8100000 		.word	_UDOT+MAPOFFSET
 2592 110c 01       	_DOT:	.byte  1
 2593 110d 2E       		.ascii "."
 2594 110e 00BF     		.p2align 2 	
 2595              	DOT:
 2596 1110 42F804ED 		_NEST
 2597 1114 FFF722FB 		BL	BASE
 2598 1118 FFF7DEF8 		BL	AT
 2599 111c FFF793F8 		_DOLIT
 2600 1120 0A000000 		.word	10
 2601 1124 FFF754F9 		BL	XORR			// ?decimal
 2602 1128 FFF7B0F8 		BL	QBRAN
 2603 112c 38110000 		.word	DOT1+MAPOFFSET
 2604 1130 FFF7DCFF 		BL	UDOT
 2605 1134 52F804FB 		_UNNEST			// no,display unsigned
 2606              	DOT1:
 2607 1138 FFF7FCFD 	    BL	STRR
 2608 113c FFF722FF 		BL	SPACE
 2609 1140 FFF748FF 		BL	TYPEE
 2610 1144 52F804FB 		_UNNEST			// yes, display signed
 2611              	
 2612              	//    ?	   ( a -- )
 2613              	// 	Display the contents in a memory cell.
 2614              	
 2615 1148 0C110000 		.word	_DOT+MAPOFFSET
 2616 114c 01       	_QUEST:	.byte  1
 2617 114d 3F       		.ascii "?"
 2618 114e 00BF     		.p2align 2 	
 2619              	QUEST:
 2620 1150 42F804ED 		_NEST
 2621 1154 FFF7C0F8 		BL	AT
 2622 1158 FFF7DAFF 		BL	DOT
 2623 115c 52F804FB 		_UNNEST
 2624              	
 2625              	// **************************************************************************
 2626              	//  Parsing
ARM GAS  stm32eforth-fl.s 			page 50


 2627              	
 2628              	//    parse	( b u c -- b u delta //  string> )
 2629              	// 	Scan word delimited by c. Return found string and its offset.
 2630              	
 2631              	// 	.word	_QUEST+MAPOFFSET
 2632              	// _PARS	.byte  5
 2633              	// 	.ascii "parse"
 2634              	// 	.p2align 2 	
 2635              	PARS:
 2636 1160 42F804ED 		_NEST
 2637 1164 FFF7FFFA 		BL	TEMP
 2638 1168 FFF7ACF8 		BL	STORE
 2639 116c FFF70AF9 		BL	OVER
 2640 1170 FFF7DAF8 		BL	TOR
 2641 1174 FFF7F4F8 		BL	DUPP
 2642 1178 FFF788F8 		BL	QBRAN
 2643 117c 6E120000 		.word	PARS8+MAPOFFSET
 2644 1180 FFF788F9 		BL	ONEM
 2645 1184 FFF7EFFA 		BL	TEMP
 2646 1188 FFF7A6F8 		BL	AT
 2647 118c FFF7AAF9 		BL	BLANK
 2648 1190 FFF72EFA 		BL	EQUAL
 2649 1194 FFF77AF8 		BL	QBRAN
 2650 1198 E8110000 		.word	PARS3+MAPOFFSET
 2651 119c FFF7C4F8 		BL	TOR
 2652              	PARS1:
 2653 11a0 FFF7A0F9 		BL	BLANK
 2654 11a4 FFF7EEF8 		BL	OVER
 2655 11a8 FFF7A6F8 		BL	CAT			// skip leading blanks 
 2656 11ac FFF744F9 		BL	SUBB
 2657 11b0 FFF7F0F8 		BL	ZLESS
 2658 11b4 FFF7F6F9 		BL	INVER
 2659 11b8 FFF768F8 		BL	QBRAN
 2660 11bc E4110000 		.word	PARS2+MAPOFFSET
 2661 11c0 FFF760F9 		BL	ONEP
 2662 11c4 FFF753F8 		BL	DONXT
 2663 11c8 A0110000 		.word	PARS1+MAPOFFSET
 2664 11cc FFF79AF8 		BL	RFROM
 2665 11d0 FFF7BEF8 		BL	DROP
 2666 11d4 FFF737F8 		_DOLIT
 2667 11d8 00000000 		.word	0
 2668 11dc FFF7C0F8 		BL	DUPP
 2669 11e0 52F804FB 		_UNNEST
 2670              	PARS2:
 2671 11e4 FFF78EF8 	  BL	RFROM
 2672              	PARS3:
 2673 11e8 FFF7CCF8 		BL	OVER
 2674 11ec FFF7C0F8 		BL	SWAP
 2675 11f0 FFF79AF8 		BL	TOR
 2676              	PARS4:
 2677 11f4 FFF7B7FA 		BL	TEMP
 2678 11f8 FFF76EF8 		BL	AT
 2679 11fc FFF7C2F8 		BL	OVER
 2680 1200 FFF77AF8 		BL	CAT
 2681 1204 FFF718F9 		BL	SUBB			// scan for delimiter
 2682 1208 FFF7ADFA 		BL	TEMP
 2683 120c FFF764F8 		BL	AT
ARM GAS  stm32eforth-fl.s 			page 51


 2684 1210 FFF768F9 		BL	BLANK
 2685 1214 FFF7ECF9 		BL	EQUAL
 2686 1218 FFF738F8 		BL	QBRAN
 2687 121c 24120000 		.word	PARS5+MAPOFFSET
 2688 1220 FFF7B8F8 		BL	ZLESS
 2689              	PARS5:
 2690 1224 FFF732F8 		BL	QBRAN
 2691 1228 42120000 		.word	PARS6+MAPOFFSET
 2692 122c FFF72AF9 		BL	ONEP
 2693 1230 FFF71DF8 		BL	DONXT
 2694 1234 F4110000 		.word	PARS4+MAPOFFSET
 2695 1238 FFF792F8 		BL	DUPP
 2696 123c FFF774F8 		BL	TOR
 2697 1240 09E0     		B	PARS7
 2698              	PARS6:
 2699 1242 FFF75FF8 		BL	RFROM
 2700 1246 FFF783F8 		BL	DROP
 2701 124a FFF789F8 		BL	DUPP
 2702 124e FFF719F9 		BL	ONEP
 2703 1252 FFF769F8 		BL	TOR
 2704              	PARS7:
 2705 1256 FFF795F8 		BL	OVER
 2706 125a FFF7EDF8 		BL	SUBB
 2707 125e FFF751F8 		BL	RFROM
 2708 1262 FFF74FF8 		BL	RFROM
 2709 1266 FFF7E7F8 		BL	SUBB
 2710 126a 52F804FB 		_UNNEST
 2711              	PARS8:
 2712 126e FFF789F8 		BL	OVER
 2713 1272 FFF747F8 		BL	RFROM
 2714 1276 FFF7DFF8 		BL	SUBB
 2715 127a 52F804FB 		_UNNEST
 2716              	
 2717              	//    PARSE	( c -- b u //  string> )
 2718              	// 	Scan input stream and return counted string delimited by c.
 2719              	
 2720 127e 4C110000 		.word	_QUEST+MAPOFFSET
 2721 1282 05       	_PARSE:	.byte  5
 2722 1283 50415253 		.ascii "PARSE"
 2722      45
 2723              		.p2align 2 	
 2724              	PARSE:
 2725 1288 42F804ED 		_NEST
 2726 128c FFF74CF8 		BL	TOR
 2727 1290 FFF728FC 		BL	TIB
 2728 1294 FFF77CFA 		BL	INN
 2729 1298 FFF71EF8 		BL	AT
 2730 129c FFF7C4F8 		BL	PLUS			// current input buffer pointer
 2731 12a0 FFF780FA 		BL	NTIB
 2732 12a4 FFF718F8 		BL	AT
 2733 12a8 FFF772FA 		BL	INN
 2734 12ac FFF714F8 		BL	AT
 2735 12b0 FFF7C2F8 		BL	SUBB			// remaining count
 2736 12b4 FFF726F8 		BL	RFROM
 2737 12b8 FFF752FF 		BL	PARS
 2738 12bc FFF768FA 		BL	INN
 2739 12c0 FFF7DAF9 		BL	PSTOR
ARM GAS  stm32eforth-fl.s 			page 52


 2740 12c4 52F804FB 		_UNNEST
 2741              	
 2742              	//    .(	  ( -- )
 2743              	// 	Output following string up to next ) .
 2744              	
 2745 12c8 82120000 		.word	_PARSE+MAPOFFSET
 2746 12cc 82       	_DOTPR:	.byte  IMEDD+2
 2747 12cd 2E28     		.ascii ".("
 2748 12cf 00       		.p2align 2 	
 2749              	DOTPR:
 2750 12d0 42F804ED 		_NEST
 2751 12d4 FEF7B7FF 		_DOLIT
 2752 12d8 29000000 		.word	')'
 2753 12dc FFF7D4FF 		BL	PARSE
 2754 12e0 FFF778FE 		BL	TYPEE
 2755 12e4 52F804FB 		_UNNEST
 2756              	
 2757              	//    (	   ( -- )
 2758              	// 	Ignore following string up to next ) . A comment.
 2759              	
 2760 12e8 CC120000 		.word	_DOTPR+MAPOFFSET
 2761 12ec 81       	_PAREN:	.byte  IMEDD+1
 2762 12ed 28       		.ascii "("
 2763 12ee 00BF     		.p2align 2 	
 2764              	PAREN:
 2765 12f0 42F804ED 		_NEST
 2766 12f4 FEF7A7FF 		_DOLIT
 2767 12f8 29000000 		.word	')'
 2768 12fc FFF7C4FF 		BL	PARSE
 2769 1300 FFF72EF9 		BL	DDROP
 2770 1304 52F804FB 		_UNNEST
 2771              	
 2772              	//    \	   ( -- )
 2773              	// 	Ignore following text till the end of line.
 2774              	
 2775 1308 EC120000 		.word	_PAREN+MAPOFFSET
 2776 130c 81       	_BKSLA:	.byte  IMEDD+1
 2777 130d 27       		.byte	'\'
 2778 130e 00BF     		.p2align 2 	
 2779              	BKSLA:
 2780 1310 42F804ED 		_NEST
 2781 1314 FFF746FA 		BL	NTIB
 2782 1318 FEF7DEFF 		BL	AT
 2783 131c FFF738FA 		BL	INN
 2784 1320 FEF7D0FF 		BL	STORE
 2785 1324 52F804FB 		_UNNEST
 2786              	
 2787              	//    CHAR	( -- c )
 2788              	// 	Parse next word and return its first character.
 2789              	
 2790 1328 0C130000 		.word	_BKSLA+MAPOFFSET
 2791 132c 04       	_CHAR:	.byte  4
 2792 132d 43484152 		.ascii "CHAR"
 2793 1331 0000BF   		.p2align 2 	
 2794              	CHAR:
 2795 1334 42F804ED 		_NEST
 2796 1338 FFF7D4F8 		BL	BLANK
ARM GAS  stm32eforth-fl.s 			page 53


 2797 133c FFF7A4FF 		BL	PARSE
 2798 1340 FFF706F8 		BL	DROP
 2799 1344 FEF7D8FF 		BL	CAT
 2800 1348 52F804FB 		_UNNEST
 2801              	
 2802              	//    WORD	( c -- a //  string> )
 2803              	// 	Parse a word from input stream and copy it to code dictionary.
 2804              	
 2805 134c 2C130000 		.word	_CHAR+MAPOFFSET
 2806 1350 04       	_WORDD:	.byte  4
 2807 1351 574F5244 		.ascii "WORD"
 2808 1355 0000BF   		.p2align 2 	
 2809              	WORDD:
 2810 1358 42F804ED 		_NEST
 2811 135c FFF794FF 		BL	PARSE
 2812 1360 FFF7A8FB 		BL	VHERE
 2813 1364 FFF7AEF8 		BL	CELLP
 2814 1368 FFF71AFC 		BL	PACKS
 2815 136c 52F804FB 		_UNNEST
 2816              	
 2817              	//    TOKEN	( -- a //  string> )
 2818              	// 	Parse a word from input stream and copy it to name dictionary.
 2819              	
 2820 1370 50130000 		.word	_WORDD+MAPOFFSET
 2821 1374 05       	_TOKEN:	.byte  5
 2822 1375 544F4B45 		.ascii "TOKEN"
 2822      4E
 2823 137a 00BF     		.p2align 2 	
 2824              	TOKEN:
 2825 137c 42F804ED 		_NEST
 2826 1380 FFF7B0F8 		BL	BLANK
 2827 1384 FFF7E8FF 		BL	WORDD
 2828 1388 52F804FB 		_UNNEST
 2829              	
 2830              	// **************************************************************************
 2831              	//  Dictionary search
 2832              	
 2833              	//    NAME>	( na -- ca )
 2834              	// 	Return a code address given a name address.
 2835              	
 2836 138c 74130000 		.word	_TOKEN+MAPOFFSET
 2837 1390 05       	_NAMET:	.byte  5
 2838 1391 4E414D45 		.ascii "NAME>"
 2838      3E
 2839 1396 00BF     		.p2align 2 	
 2840              	NAMET:
 2841 1398 42F804ED 		_NEST
 2842 139c FFF790F9 		BL	COUNT
 2843 13a0 FEF751FF 		_DOLIT
 2844 13a4 1F000000 		.word	0x1F
 2845 13a8 FEF7FEFF 		BL	ANDD
 2846 13ac FFF73CF8 		BL	PLUS
 2847 13b0 FFF71AFB 		BL	ALGND
 2848 13b4 52F804FB 		_UNNEST
 2849              	
 2850              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2851              	// 	Compare u bytes in two strings. Return 0 if identical.
ARM GAS  stm32eforth-fl.s 			page 54


 2852              	//
 2853              	//  Picatout 2020-12-01, 
 2854              	//      Because of problem with .align directive that
 2855              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2856              	// 		words  to do a byte by byte comparison. 
 2857              	//
 2858 13b8 90130000 		.word	_NAMET+MAPOFFSET
 2859 13bc 05       	_SAMEQ:	.byte  5
 2860 13bd 53414D45 		.ascii "SAME?"
 2860      3F
 2861 13c2 00BF     		.p2align 2	
 2862              	SAMEQ:
 2863 13c4 42F804ED 		_NEST
 2864 13c8 FEF7AEFF 		BL	TOR
 2865 13cc 00F01EB8 		B.W	SAME2
 2866              	SAME1:
 2867 13d0 FEF7D8FF 		BL	OVER  // ( a1 a2 -- a1 a2 a1 )
 2868 13d4 FEF7A0FF 		BL	RAT   // a1 a2 a1 u 
 2869 13d8 FFF726F8 		BL	PLUS  // a1 a2 a1+u 
 2870 13dc FEF78CFF 		BL	CAT	   // a1 a2 c1    		
 2871 13e0 FEF7D0FF 		BL	OVER  // a1 a2 c1 a2 
 2872 13e4 FEF798FF 		BL	RAT    
 2873 13e8 FFF71EF8 		BL	PLUS    
 2874 13ec FEF784FF 		BL	CAT	  // a1 a2 c1 c2
 2875 13f0 FFF722F8 		BL	SUBB  
 2876 13f4 FFF7A0F8 		BL	QDUP
 2877 13f8 FEF748FF 		BL	QBRAN
 2878 13fc 0C140000 		.word	SAME2+MAPOFFSET
 2879 1400 FEF780FF 		BL	RFROM
 2880 1404 FEF7A4FF 		BL	DROP
 2881 1408 52F804FB 		_UNNEST	// strings not equal
 2882              	SAME2:
 2883 140c FEF72FFF 		BL	DONXT
 2884 1410 D0130000 		.word	SAME1+MAPOFFSET
 2885 1414 FEF717FF 		_DOLIT
 2886 1418 00000000 		.word	0
 2887 141c 52F804FB 		_UNNEST	// strings equal
 2888              	
 2889              	//    find	( a na -- ca na | a F )
 2890              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2891              	
 2892              	//  Picatout 2020-12-01,  
 2893              	//		Modified from original. See comment for word "SAME?" 
 2894              	
 2895              	// 	.word	_SAMEQ+MAPOFFSET
 2896              	// _FIND	.byte  4
 2897              	// 	.ascii "find"
 2898              	// 	.p2align 2 	
 2899              	FIND:
 2900 1420 42F804ED 		_NEST
 2901 1424 FEF7A4FF 		BL	SWAP			// na a	
 2902 1428 FFF74AF9 		BL	COUNT			// na a+1 count
 2903 142c FEF798FF 		BL	DUPP 
 2904 1430 FFF799F9 		BL	TEMP
 2905 1434 FEF746FF 		BL	STORE			// na a+1 count 
 2906 1438 FEF776FF 		BL  TOR		// na a+1  R: count  
 2907 143c FEF798FF 		BL	SWAP			// a+1 na
ARM GAS  stm32eforth-fl.s 			page 55


 2908              	FIND1:
 2909 1440 FEF78EFF 		BL	DUPP			// a+1 na na
 2910 1444 FEF722FF 		BL	QBRAN
 2911 1448 90140000 		.word	FIND6+MAPOFFSET	// end of vocabulary
 2912 144c FEF788FF 		BL	DUPP			// a+1 na na
 2913 1450 FEF752FF 		BL	CAT			// a+1 na name1
 2914 1454 FEF7F7FE 		_DOLIT
 2915 1458 1FFFFFFF 		.word	MASKK
 2916 145c FEF7A4FF 		BL	ANDD
 2917 1460 FEF75AFF 		BL	RAT			// a+1 na name1 count 
 2918 1464 FEF7B4FF 		BL	XORR			// a+1 na,  same length?
 2919 1468 FEF710FF 		BL	QBRAN
 2920 146c 7C140000 		.word	FIND2+MAPOFFSET
 2921 1470 FFF730F8 		BL	CELLM			// a+1 la
 2922 1474 FEF730FF 		BL	AT			// a+1 next_na
 2923 1478 FFF7E2BF 		B.w	FIND1			// try next word
 2924              	FIND2:   
 2925 147c FFF702F8 		BL	ONEP			// a+1 na+1
 2926 1480 FFF771F9 		BL	TEMP
 2927 1484 FEF728FF 		BL	AT			// a+1 na+1 count
 2928 1488 FFF79CFF 		BL	SAMEQ		// a+1 na+1 ? 
 2929              	FIND3:	
 2930 148c 00F00CB8 		B.w	FIND4
 2931              	FIND6:	
 2932 1490 FEF738FF 		BL	RFROM			// a+1 0 name1 -- , no match
 2933 1494 FEF75CFF 		BL	DROP			// a+1 0
 2934 1498 FEF76AFF 		BL	SWAP			// 0 a+1
 2935 149c FEF7FAFF 		BL	ONEM			// 0 a
 2936 14a0 FEF766FF 		BL	SWAP			// a 0 
 2937 14a4 52F804FB 		_UNNEST			// return without a match
 2938              	FIND4:	
 2939 14a8 FEF7F0FE 		BL	QBRAN			// a+1 na+1
 2940 14ac C0140000 		.word	FIND5+MAPOFFSET	// found a match
 2941 14b0 FEF7F0FF 		BL	ONEM			// a+1 na
 2942 14b4 FFF70EF8 		BL	CELLM			// a+4 la
 2943 14b8 FEF70EFF 		BL	AT			// a+1 next_na
 2944 14bc FFF7C0BF 		B.w	FIND1			// compare next name
 2945              	FIND5:	
 2946 14c0 FEF720FF 		BL	RFROM			// a+1 na+1 count
 2947 14c4 FEF744FF 		BL	DROP			// a+1 na+1
 2948 14c8 FEF752FF 		BL	SWAP			// na+1 a+1
 2949 14cc FEF740FF 		BL	DROP			// na+1
 2950 14d0 FEF7E0FF 		BL	ONEM			// na
 2951 14d4 FEF744FF 		BL	DUPP			// na na
 2952 14d8 FFF75EFF 		BL	NAMET			// na ca
 2953 14dc FEF748FF 		BL	SWAP			// ca na
 2954 14e0 52F804FB 		_UNNEST			//  return with a match
 2955              	
 2956              	//    NAME?	( a -- ca na | a F )
 2957              	// 	Search all context vocabularies for a string.
 2958              	
 2959 14e4 BC130000 		.word	_SAMEQ+MAPOFFSET
 2960 14e8 05       	_NAMEQ:	.byte  5
 2961 14e9 4E414D45 		.ascii "NAME?"
 2961      3F
 2962 14ee 00BF     		.p2align 2 	
 2963              	NAMEQ:
ARM GAS  stm32eforth-fl.s 			page 56


 2964 14f0 42F804ED 		_NEST
 2965 14f4 FFF776F9 		BL	CNTXT
 2966 14f8 FEF7EEFE 		BL	AT
 2967 14fc FFF790FF 		BL	FIND
 2968 1500 52F804FB 		_UNNEST
 2969              	
 2970              	// **************************************************************************
 2971              	//  Terminal input
 2972              	
 2973              	//    	  ( bot eot cur -- bot eot cur )
 2974              	// 	Backup the cursor by one character.
 2975              	
 2976              	// 	.word	_NAMEQ+MAPOFFSET
 2977              	// _BKSP	.byte  2
 2978              	// 	.ascii "^H"
 2979              	// 	.p2align 2 	
 2980              	BKSP:
 2981 1504 42F804ED 		_NEST
 2982 1508 FEF70EFF 		BL	TOR
 2983 150c FEF73AFF 		BL	OVER
 2984 1510 FEF7F8FE 		BL	RFROM
 2985 1514 FEF72CFF 		BL	SWAP
 2986 1518 FEF734FF 		BL	OVER
 2987 151c FEF758FF 		BL	XORR
 2988 1520 FEF7B4FE 		BL	QBRAN
 2989 1524 4C150000 		.word	BACK1+MAPOFFSET
 2990 1528 FEF78DFE 		_DOLIT
 2991 152c 08000000 		.word	BKSPP
 2992 1530 FEF778FE 		BL	TECHO
 2993              	// 	BL	ATEXE
 2994 1534 FEF7AEFF 		BL	ONEM
 2995 1538 FEF7D4FF 		BL	BLANK
 2996 153c FEF772FE 		BL	TECHO
 2997              	// 	BL	ATEXE
 2998 1540 FEF781FE 		_DOLIT
 2999 1544 08000000 		.word	BKSPP
 3000 1548 FEF76CFE 		BL	TECHO
 3001              	// 	BL	ATEXE
 3002              	BACK1:
 3003 154c 52F804FB 		  _UNNEST
 3004              	
 3005              	//    TAP	 ( bot eot cur c -- bot eot cur )
 3006              	// 	Accept and echo the key stroke and bump the cursor.
 3007              	
 3008              	// 	.word	_BKSP+MAPOFFSET
 3009              	// _TAP	.byte  3
 3010              	// 	.ascii "TAP"
 3011              	// 	.p2align 2 	
 3012              	TAP:
 3013 1550 42F804ED 		_NEST
 3014 1554 FEF704FF 		BL	DUPP
 3015 1558 FEF764FE 		BL	TECHO
 3016              	// 	BL	ATEXE
 3017 155c FEF712FF 		BL	OVER
 3018 1560 FEF7C0FE 		BL	CSTOR
 3019 1564 FEF78EFF 		BL	ONEP
 3020 1568 52F804FB 		_UNNEST
ARM GAS  stm32eforth-fl.s 			page 57


 3021              	
 3022              	//    kTAP	( bot eot cur c -- bot eot cur )
 3023              	// 	Process a key stroke, CR or backspace.
 3024              	
 3025              	// 	.word	_TAP+MAPOFFSET
 3026              	// _KTAP	.byte  4
 3027              	// 	.ascii "kTAP"
 3028              	// 	.p2align 2 	
 3029              	KTAP:
 3030              	TTAP:
 3031 156c 42F804ED 		_NEST
 3032 1570 FEF7F6FE 		BL	DUPP
 3033 1574 FEF767FE 		_DOLIT
 3034 1578 0D000000 		.word	CRR
 3035 157c FEF728FF 		BL	XORR
 3036 1580 FEF784FE 		BL	QBRAN
 3037 1584 B4150000 		.word	KTAP2+MAPOFFSET
 3038 1588 FEF75DFE 		_DOLIT
 3039 158c 08000000 		.word	BKSPP
 3040 1590 FEF71EFF 		BL	XORR
 3041 1594 FEF77AFE 		BL	QBRAN
 3042 1598 AC150000 		.word	KTAP1+MAPOFFSET
 3043 159c FEF7A2FF 		BL	BLANK
 3044 15a0 FFF7D6FF 		BL	TAP
 3045 15a4 52F804FB 		_UNNEST
 3046 15a8 00000000 		.word	0			// patch
 3047              	KTAP1:
 3048 15ac FFF7AAFF 	  BL	BKSP
 3049 15b0 52F804FB 		_UNNEST
 3050              	KTAP2:
 3051 15b4 FEF7CCFE 	  BL	DROP
 3052 15b8 FEF7DAFE 		BL	SWAP
 3053 15bc FEF7C8FE 		BL	DROP
 3054 15c0 FEF7CEFE 		BL	DUPP
 3055 15c4 52F804FB 		_UNNEST
 3056              	
 3057              	//    ACCEPT	( b u -- b u )
 3058              	// 	Accept characters to input buffer. Return with actual count.
 3059              	
 3060 15c8 E8140000 		.word	_NAMEQ+MAPOFFSET
 3061 15cc 06       	_ACCEP:	.byte  6
 3062 15cd 41434345 		.ascii "ACCEPT"
 3062      5054
 3063 15d3 00       		.p2align 2 	
 3064              	ACCEP:
 3065 15d4 42F804ED 		_NEST
 3066 15d8 FEF7D4FE 		BL	OVER
 3067 15dc FEF724FF 		BL	PLUS
 3068 15e0 FEF7D0FE 		BL	OVER
 3069              	ACCP1:
 3070 15e4 FEF7C6FF 	  BL	DDUP
 3071 15e8 FEF7F2FE 		BL	XORR
 3072 15ec FEF74EFE 		BL	QBRAN
 3073 15f0 20160000 		.word	ACCP4+MAPOFFSET
 3074 15f4 FFF7A8FC 		BL	KEY
 3075 15f8 FEF7B2FE 		BL	DUPP
 3076 15fc FEF772FF 		BL	BLANK
ARM GAS  stm32eforth-fl.s 			page 58


 3077 1600 FEF721FE 		_DOLIT
 3078 1604 7F000000 		.word	127
 3079 1608 FFF734F9 		BL	WITHI
 3080 160c FEF73EFE 		BL	QBRAN
 3081 1610 1A160000 		.word	ACCP2+MAPOFFSET
 3082 1614 FFF79CFF 		BL	TAP
 3083 1618 01E0     		B	ACCP3
 3084              	ACCP2:
 3085 161a FFF7A7FF 	  BL	KTAP
 3086              	// 	BL	ATEXE
 3087              	ACCP3:	  
 3088 161e E1E7     		B	ACCP1
 3089              	ACCP4:
 3090 1620 FEF796FE 	  BL	DROP
 3091 1624 FEF7AEFE 		BL	OVER
 3092 1628 FEF706FF 		BL	SUBB
 3093 162c 52F804FB 		_UNNEST
 3094              	
 3095              	//    QUERY	( -- )
 3096              	// 	Accept input stream to terminal input buffer.
 3097              	
 3098 1630 CC150000 		.word	_ACCEP+MAPOFFSET
 3099 1634 05       	_QUERY:	.byte  5
 3100 1635 51554552 		.ascii "QUERY"
 3100      59
 3101 163a 00BF     		.p2align 2 	
 3102              	QUERY:
 3103 163c 42F804ED 		_NEST
 3104 1640 FFF750FA 		BL	TIB
 3105 1644 FEF7FFFD 		_DOLIT
 3106 1648 50000000 		.word	80
 3107 164c FFF7C2FF 		BL	ACCEP
 3108 1650 FFF7A8F8 		BL	NTIB
 3109 1654 FEF736FE 		BL	STORE
 3110 1658 FEF77AFE 		BL	DROP
 3111 165c FEF7F3FD 		_DOLIT
 3112 1660 00000000 		.word	0
 3113 1664 FFF794F8 		BL	INN
 3114 1668 FEF72CFE 		BL	STORE
 3115 166c 52F804FB 		_UNNEST
 3116              	
 3117              	// **************************************************************************
 3118              	//  Error handling
 3119              	
 3120              	//    ABORT	( a -- )
 3121              	// 	Reset data stack and jump to QUIT.
 3122              	
 3123 1670 34160000 		.word	_QUERY+MAPOFFSET
 3124 1674 05       	_ABORT:	.byte  5
 3125 1675 41424F52 		.ascii "ABORT"
 3125      54
 3126 167a 00BF     		.p2align 2 	
 3127              	ABORT:
 3128 167c 42F804ED 		_NEST
 3129 1680 FFF780FC 		BL	SPACE
 3130 1684 FFF71CF8 		BL	COUNT
 3131 1688 FFF7A4FC 		BL	TYPEE
ARM GAS  stm32eforth-fl.s 			page 59


 3132 168c FEF7DBFD 		_DOLIT
 3133 1690 3F000000 		.word	0X3F
 3134 1694 FEF7C6FD 		BL	EMIT
 3135 1698 FFF7B4FC 		BL	CR
 3136 169c 00F0B2F8 		BL	PRESE
 3137 16a0 00F0BCB8 		B.W	QUIT
 3138              	
 3139              	//    _abort"	( f -- )
 3140              	// 	Run time routine of ABORT" . Abort with a message.
 3141              	
 3142              	// 	.word	_ABORT+MAPOFFSET
 3143              	// _ABORQ	.byte  COMPO+6
 3144              	// 	.ascii "abort\""
 3145              	// 	.p2align 2 	
 3146              	ABORQ:
 3147 16a4 42F804ED 		_NEST
 3148 16a8 FEF7F0FD 		BL	QBRAN
 3149 16ac C4160000 		.word	ABOR1+MAPOFFSET	// text flag
 3150 16b0 FFF7B8FC 		BL	DOSTR
 3151 16b4 FFF704F8 		BL	COUNT
 3152 16b8 FFF78CFC 		BL	TYPEE
 3153 16bc FFF7A2FC 		BL	CR
 3154 16c0 00F0ACB8 		B.W	QUIT
 3155              	ABOR1:
 3156 16c4 FFF7AEFC 		BL	DOSTR
 3157 16c8 FEF742FE 		BL	DROP
 3158 16cc 52F804FB 		_UNNEST			// drop error
 3159              	
 3160              	// **************************************************************************
 3161              	//  The text interpreter
 3162              	
 3163              	//    $INTERPRET  ( a -- )
 3164              	// 	Interpret a word. If failed, try to convert it to an integer.
 3165              	
 3166 16d0 74160000 		.word	_ABORT+MAPOFFSET
 3167 16d4 0A       	_INTER:	.byte  10
 3168 16d5 2424494E 		.ascii "$$INTERPRET"
 3168      54455250 
 3168      524554
 3169              		.p2align 2 	
 3170              	INTER:
 3171 16e0 42F804ED 		_NEST
 3172 16e4 FFF704FF 		BL	NAMEQ
 3173 16e8 FEF726FF 		BL	QDUP	// ?defined
 3174 16ec FEF7CEFD 		BL	QBRAN
 3175 16f0 20170000 		.word	INTE1+MAPOFFSET
 3176 16f4 FEF7F0FD 		BL	AT
 3177 16f8 FEF7A5FD 		_DOLIT
 3178 16fc 40000000 		.word	COMPO
 3179 1700 FEF752FE 		BL	ANDD	// ?compile only lexicon bits
 3180 1704 FFF7CEFF 		BL	ABORQ
 3181 1708 0D       		.byte	13
 3182 1709 20636F6D 		.ascii " compile only"
 3182      70696C65 
 3182      206F6E6C 
 3182      79
 3183 1716 00BF     		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 60


 3184 1718 FEF7A4FD 		BL	EXECU
 3185 171c 52F804FB 		_UNNEST			// execute defined word
 3186              	INTE1:
 3187 1720 FFF778FB 	  BL	NUMBQ
 3188 1724 FEF7B2FD 		BL	QBRAN
 3189 1728 30170000 		.word	INTE2+MAPOFFSET
 3190 172c 52F804FB 		_UNNEST
 3191              	INTE2:
 3192 1730 FFF7A4BF 	  B.W	ABORT	// error
 3193              	
 3194              	//    [	   ( -- )
 3195              	// 	Start the text interpreter.
 3196              	
 3197 1734 D4160000 		.word	_INTER+MAPOFFSET
 3198 1738 81       	_LBRAC:	.byte  IMEDD+1
 3199 1739 5B       		.ascii "["
 3200 173a 00BF     		.p2align 2 	
 3201              	LBRAC:
 3202 173c 42F804ED 		_NEST
 3203 1740 FEF781FD 		_DOLIT
 3204 1744 E0160000 		.word	INTER+MAPOFFSET
 3205 1748 FFF736F8 		BL	TEVAL
 3206 174c FEF7BAFD 		BL	STORE
 3207 1750 52F804FB 		_UNNEST
 3208              	
 3209              	//    .OK	 ( -- )
 3210              	// 	Display "ok" only while interpreting.
 3211              	
 3212 1754 38170000 		.word	_LBRAC+MAPOFFSET
 3213 1758 03       	_DOTOK:	.byte  3
 3214 1759 2E4F4B   		.ascii ".OK"
 3215              		.p2align 2 	
 3216              	DOTOK:
 3217 175c 42F804ED 		_NEST
 3218 1760 FEF771FD 		_DOLIT
 3219 1764 E0160000 		.word	INTER+MAPOFFSET
 3220 1768 FFF726F8 		BL	TEVAL
 3221 176c FEF7B4FD 		BL	AT
 3222 1770 FEF73EFF 		BL	EQUAL
 3223 1774 FEF78AFD 		BL	QBRAN
 3224 1778 84170000 		.word	DOTO1+MAPOFFSET
 3225 177c FFF77AFC 		BL	DOTQP
 3226 1780 03       		.byte	3
 3227 1781 206F6B   		.ascii " ok"
 3228              	DOTO1:
 3229 1784 FFF73EFC 		BL	CR
 3230 1788 52F804FB 		_UNNEST
 3231              	
 3232              	//    ?STACK	( -- )
 3233              	// 	Abort if the data stack underflows.
 3234              	
 3235 178c 58170000 		.word	_DOTOK+MAPOFFSET
 3236 1790 06       	_QSTAC:	.byte  6
 3237 1791 3F535441 		.ascii "?STACK"
 3237      434B
 3238 1797 00       		.p2align 2 	
 3239              	QSTAC:
ARM GAS  stm32eforth-fl.s 			page 61


 3240 1798 42F804ED 		_NEST
 3241 179c FFF756F9 		BL	DEPTH
 3242 17a0 FEF7F8FD 		BL	ZLESS	// check only for underflow
 3243 17a4 FFF77EFF 		BL	ABORQ
 3244 17a8 0A       		.byte	10
 3245 17a9 20756E64 		.ascii " underflow"
 3245      6572666C 
 3245      6F77
 3246 17b3 00       		.p2align 2 	
 3247 17b4 52F804FB 		_UNNEST
 3248              	
 3249              	//    EVAL	( -- )
 3250              	// 	Interpret the input stream.
 3251              	
 3252 17b8 90170000 		.word	_QSTAC+MAPOFFSET
 3253 17bc 04       	_EVAL:	.byte  4
 3254 17bd 4556414C 		.ascii "EVAL"
 3255 17c1 0000BF   		.p2align 2 	
 3256              	EVAL:
 3257 17c4 42F804ED 		_NEST
 3258              	EVAL1:
 3259 17c8 FFF7D8FD 	    BL	TOKEN
 3260 17cc FEF7C8FD 		BL	DUPP
 3261 17d0 FEF792FD 		BL	CAT	// ?input stream empty
 3262 17d4 FEF75AFD 		BL	QBRAN
 3263 17d8 EC170000 		.word	EVAL2+MAPOFFSET
 3264 17dc FEF7ECFF 		BL	TEVAL
 3265 17e0 FFF78CF9 		BL	ATEXE
 3266 17e4 FFF7D8FF 		BL	QSTAC	// evaluate input, check stack
 3267 17e8 FFF7EEBF 		B.W	EVAL1
 3268              	EVAL2:
 3269 17ec FEF7B0FD 		BL	DROP
 3270 17f0 FFF7B4FF 		BL	DOTOK
 3271 17f4 52F804FB 		_UNNEST	// prompt
 3272              	
 3273              	//    PRESET	( -- )
 3274              	// 	Reset data stack pointer and the terminal input buffer.
 3275              	
 3276 17f8 BC170000 		.word	_EVAL+MAPOFFSET
 3277 17fc 06       	_PRESE:	.byte  6
 3278 17fd 50524553 		.ascii "PRESET"
 3278      4554
 3279 1803 00       		.p2align 2 	
 3280              	PRESE:
 3281              	//	_NEST
 3282 1804 44F68061 		MOVW	R1,#SPP&0xffff		//  init SP
 3283 1808 C2F20001 	 	MOVT	R1,#SPP>>16
 3284 180c 85EA0505 		EOR	R5,R5,R5			//  init TOS=0
 3285              	//	_UNNEST
 3286 1810 7047     		_NEXT
 3287              	
 3288              	//    QUIT	( -- )
 3289              	// 	Reset return stack pointer and start text interpreter.
 3290              	
 3291 1812 FC170000 		.word	_PRESE+MAPOFFSET
 3292 1816 04       	_QUIT:	.byte  4
 3293 1817 51554954 		.ascii "QUIT"
ARM GAS  stm32eforth-fl.s 			page 62


 3294 181b 00       		.p2align 2 	
 3295              	QUIT:
 3296 181c 42F804ED 		_NEST
 3297 1820 44F68072 		MOVW	R2,#RPP&0xffff  /* RESET RSTACK */
 3298 1824 C2F20002 	 	MOVT	R2,#RPP>>16 
 3299              	QUIT1:
 3300 1828 FFF788FF 		BL	LBRAC			// start interpretation
 3301              	QUIT2:
 3302 182c FFF706FF 		BL	QUERY			// get input
 3303 1830 FFF7C8FF 		BL	EVAL
 3304 1834 FEF736FD 		BL	BRAN
 3305 1838 2C180000 		.word	QUIT2+MAPOFFSET	// continue till error
 3306              	
 3307              	/***************************
 3308              	//  Flash memory interface
 3309              	***************************/
 3310              	UNLOCK:	//  unlock flash memory	
 3311 183c 9748     		ldr	r0, flash_regs 
 3312 183e 84EA0404 		eor r4,r4,r4 
 3313 1842 C460     		str r4,[r0,#FLASH_SR]
 3314 1844 964C     		ldr	r4, flash_regs+4 // key1
 3315 1846 4460     		str	r4, [r0, #FLASH_KEYR]
 3316 1848 964C     		ldr	r4, flash_regs+8 // key2 
 3317 184a 4460     		str	r4, [r0, #FLASH_KEYR]
 3318 184c 944C     		ldr	r4, flash_regs+4 
 3319 184e 8460     		str	r4, [r0, #FLASH_OPTKEYR]
 3320 1850 944C     		ldr	r4, flash_regs+8
 3321 1852 8460     		str	r4, [r0, #FLASH_OPTKEYR]
 3322 1854 7047     		bx lr 
 3323              	
 3324              	WAIT_BSY:
 3325 1856 9148     		ldr	r0,flash_regs
 3326              	WAIT1:
 3327 1858 C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 3328 185a 14F00104 		ands	r4, #0x1	//  BSY
 3329 185e FBD1     		bne	WAIT1
 3330 1860 7047     		_NEXT
 3331              	
 3332              	//    ERASE_PAGE	   ( adr -- )
 3333              	// 	  Erase one page of flash memory.
 3334              	//    stm32f103 page size is 1024 bytes 
 3335              	//    adr is any address inside page to erase 
 3336              	
 3337 1862 16180000 		.word	_QUIT+MAPOFFSET
 3338 1866 0A       	_EPAGE:	.byte  10
 3339 1867 45524153 		.ascii "ERASE_PAGE"
 3339      455F5041 
 3339      4745
 3340 1871 0000BF   		.p2align 2 	
 3341              	
 3342              	EPAGE: 	//  page --
 3343 1874 42F804ED 		_NEST
 3344 1878 FFF7EDFF 		bl	WAIT_BSY
 3345 187c FEF7E3FC 		_DOLIT 
 3346 1880 01000000 		.word 1 
 3347 1884 FFF7DAFF 		bl  UNLOCK 
 3348 1888 8448     		ldr r0,flash_regs 	 
ARM GAS  stm32eforth-fl.s 			page 63


 3349 188a 4FF00204 		mov r4,#2 // set PER bit 
 3350 188e 0461     		str r4,[r0,#FLASH_CR]
 3351 1890 4561     		str r5,[r0,#FLASH_AR] // page to erase address 
 3352 1892 0469     		ldr	r4,[r0, #FLASH_CR]	
 3353 1894 44F04004 		orr	R4,#0x40	//  set STRT bit   
 3354 1898 0461     		str	r4,[r0, #FLASH_CR]	//  start erasing
 3355 189a FFF7DCFF 	 	bl	WAIT_BSY // wait until done
 3356 189e FEF7D2FC 		_DOLIT 
 3357 18a2 00000000 		.word 0 
 3358 18a6 FFF7C9FF 		bl	UNLOCK  // lock flash write 
 3359 18aa C568     		ldr r5,[r0,#FLASH_SR] // check for errors 
 3360 18ac 05F01405 		and r5,r5,#(5<<2)
 3361 18b0 FFF7F8FE 		bl ABORQ 
 3362 18b4 0D       		.byte 13
 3363 18b5 20657261 		.ascii " erase error!"
 3363      73652065 
 3363      72726F72 
 3363      21
 3364 18c2 00BF     		.p2align 2
 3365 18c4 52F804FB 		_UNNEST
 3366              	
 3367              	// store 16 bit word
 3368              	// expect flash unlocked  
 3369              	HWORD_WRITE: // ( hword address -- )
 3370 18c8 42F804ED 		_NEST
 3371 18cc 0469     		ldr	r4, [r0, #FLASH_CR]	//  FLASH_CR
 3372              	//	bic r4,#(1<<9)|(1<<5)|(1<<4)|(1<<2)|(1<<1) //  clear OPTWRE|OPTER|OPTPG|MER|PER
 3373 18ce 4FF00104 		mov r4,#1 // set PG 
 3374 18d2 0461     		str r4,[r0,#FLASH_CR]
 3375 18d4 2E46     		mov r6,r5 
 3376 18d6 51F8045B 		_POP 
 3377 18da 3580     		strh r5,[r6] 
 3378 18dc FFF7BBFF 		bl WAIT_BSY 
 3379 18e0 C568     		ldr r5,[r0,#FLASH_SR]
 3380 18e2 05F01405 		and r5,r5,#(5<<2) 
 3381 18e6 FEF7D1FC 		bl QBRAN
 3382 18ea 00190000 		.word 1f+MAPOFFSET 
 3383 18ee FFF7D9FE 		bl ABORQ
 3384 18f2 0D       		.byte 13
 3385 18f3 20777269 		.ascii " write error!"
 3385      74652065 
 3385      72726F72 
 3385      21
 3386              		.p2align 2
 3387              	1:	 
 3388 1900 52F804FB 		_UNNEST 
 3389              	
 3390              	
 3391              	//    I!	   ( data address -- )
 3392              	// 	   Write one word into flash memory
 3393              	//	   address must even 
 3394              	
 3395 1904 66180000 		.word	_EPAGE+MAPOFFSET
 3396 1908 02       	_ISTOR:	.byte  2
 3397 1909 4921     		.ascii "I!"
 3398 190b 00       		.p2align 2 	
 3399              	ISTOR:	//  data address --
ARM GAS  stm32eforth-fl.s 			page 64


 3400 190c 42F804ED 		_NEST
 3401 1910 FFF7A1FF 		bl	WAIT_BSY
 3402 1914 FEF797FC 		_DOLIT 
 3403 1918 01000000 		.word 1 
 3404 191c FFF78EFF 		bl  UNLOCK 
 3405 1920 FEF728FE 		BL DDUP 
 3406 1924 FEF700FD 		BL TOR 
 3407 1928 FEF7FEFC 		BL TOR 
 3408 192c FFF7CCFF 		BL HWORD_WRITE
 3409 1930 FEF7E8FC 		BL RFROM 
 3410 1934 4FEA3545 		ror r5,r5,#16
 3411 1938 FEF7E4FC 		BL RFROM 
 3412 193c 05F10205 		add r5,r5,#2 
 3413 1940 FFF7C2FF 		BL HWORD_WRITE 
 3414 1944 FEF77FFC 		_DOLIT 
 3415 1948 00000000 		.word 0
 3416 194c FFF776FF 		bl UNLOCK 
 3417 1950 52F804FB 		_UNNEST
 3418              	
 3419              	
 3420              	// ERASE_MPG ( u1 u2 -- )
 3421              	// erase many pages 
 3422              	// u1 first page number 
 3423              	// u2 how many pages  
 3424 1954 08190000 		.word _ISTOR+MAPOFFSET
 3425 1958 09       	_ERASE_MPG: .byte 9 
 3426 1959 45524153 		.ascii "ERASE_MPG"	
 3426      455F4D50 
 3426      47
 3427 1962 00BF     		.p2align 2 
 3428              	ERASE_MPG:
 3429 1964 42F804ED 		_NEST 
 3430 1968 FEF7DEFC 		BL TOR 
 3431 196c 00F052F8 		BL PG_TO_ADR 
 3432 1970 FEF798FC 		BL BRAN 
 3433 1974 8C190000 		.word 2f+MAPOFFSET 
 3434              	1:
 3435 1978 FEF7F2FC 		BL DUPP 
 3436 197c FEF7D4FC 		BL TOR 
 3437 1980 FFF778FF 		BL EPAGE 
 3438 1984 FEF7BEFC 		BL RFROM
 3439 1988 05F58065 		add r5,#PAGE_SIZE 
 3440              	2:
 3441 198c FEF76FFC 		BL DONXT
 3442 1990 78190000 		.word 1b+MAPOFFSET 
 3443 1994 51F8045B 		_POP 
 3444 1998 52F804FB 		_UNNEST 
 3445              	
 3446              	// FLSH_WR ( src dest u -- dest+u )
 3447              	// write u words to flash memory 
 3448 199c 58190000 		.word _ERASE_MPG+MAPOFFSET
 3449 19a0 07       	_FLSH_WR: .byte 7 
 3450 19a1 464C5348 		.ascii "FLSH_WR"
 3450      5F5752
 3451              		.p2align  
 3452              	FLSH_WR: 
 3453 19a8 42F804ED 		_NEST 
ARM GAS  stm32eforth-fl.s 			page 65


 3454 19ac FEF7BCFC 		BL TOR
 3455 19b0 FEF778FC 		BL BRAN 
 3456 19b4 D8190000 		.word 3f+MAPOFFSET  
 3457              	/* write system variables to FLASH */
 3458 19b8 FEF7B6FC 	2:  BL TOR  // destination address 
 3459 19bc FEF7D0FC 		BL DUPP 
 3460 19c0 FEF78AFC 		BL AT   // get data 
 3461 19c4 FEF7A8FC 		BL RAT  // get destination address 
 3462 19c8 FFF7A0FF 		BL ISTOR
 3463 19cc FEF77AFD 		BL CELLP  // increment source address 
 3464 19d0 FEF798FC 		BL RFROM 
 3465 19d4 FEF776FD 		BL CELLP  // increment dest address 
 3466 19d8 FEF749FC 	3:	BL DONXT 
 3467 19dc B8190000 		.word 2b+MAPOFFSET
 3468 19e0 FEF7A2FC 		BL TOR 
 3469 19e4 FEF7B4FC 		BL DROP 
 3470 19e8 FEF78CFC 		BL RFROM 
 3471 19ec 52F804FB 		_UNNEST 
 3472              	
 3473              	// ADR>PG ( a -- n )
 3474              	// convert address to page number, {0..127} 
 3475 19f0 A0190000 		.word _FLSH_WR+MAPOFFSET
 3476 19f4 06       	_ADR_TO_PG: .byte 6 
 3477 19f5 4144523E 		.ascii "ADR>PG" 
 3477      5047
 3478 19fb 00       		.p2align 2 
 3479              	ADR_TO_PG: 
 3480 19fc 4FEA9525 		lsr r5,#10 
 3481 1a00 05F07F05 		and r5,#127 
 3482 1a04 7047     		_NEXT  
 3483              	
 3484              	// PG>ADR ( n -- a )
 3485              	// convert page# to address 
 3486 1a06 F4190000 		.word _ADR_TO_PG+MAPOFFSET
 3487 1a0a 06       	_PG_TO_ADR: .byte 6 
 3488 1a0b 50473E41 		.ascii "PG>ADR" 
 3488      4452
 3489 1a11 0000BF   		.p2align 2 
 3490              	PG_TO_ADR:
 3491 1a14 C0F20205 		movt r5,#2
 3492 1a18 4FEA8525 		lsl r5,#10 
 3493 1a1c 7047     		_NEXT 
 3494              	
 3495              	// TURNKEY ( -- "WORD") 
 3496              	// set autorun program in 'BOOT variable 
 3497              	// and save image in slot 0.
 3498 1a1e 0A1A0000 		.word _PG_TO_ADR+MAPOFFSET
 3499 1a22 07       	_TURNKEY: .byte 7
 3500 1a23 5455524E 		.ascii "TURNKEY"
 3500      4B4559
 3501 1a2a 00BF     		.p2align 2 
 3502              	TURNKEY:
 3503 1a2c 42F804ED 		_NEST 
 3504 1a30 00F03EF8 		BL TICK 
 3505 1a34 FEF788FE 		BL TBOOT 
 3506 1a38 FEF744FC 		BL STORE 
 3507              	// to be completed 
ARM GAS  stm32eforth-fl.s 			page 66


 3508 1a3c 52F804FB 		_UNNEST
 3509              	
 3510 1a40 221A0000 		.word _TURNKEY+MAPOFFSET
 3511 1a44 06       	_FORGET: .byte 6 
 3512 1a45 464F5247 		.ascii "FORGET"
 3512      4554
 3513 1a4b 00       		.p2align 2
 3514              	FORGET:
 3515 1a4c 42F804ED 		_NEST 
 3516 1a50 FFF794FC 		BL TOKEN 
 3517 1a54 FEF784FC 		BL DUPP 
 3518 1a58 FEF718FC 		BL QBRAN 
 3519 1a5c FEF7F3FB 		_DOLIT 
 3520 1a60 981A0000 		.word 9f+MAPOFFSET 
 3521 1a64 FFF744FD 		BL NAMEQ // ( a -- ca na | a 0 )
 3522 1a68 FEF766FD 		BL QDUP 
 3523 1a6c FEF70EFC 		BL QBRAN 
 3524 1a70 941A0000 		.word 8f+MAPOFFSET
 3525 1a74 FEF72EFD 		BL CELLM // ( ca la )
 3526 1a78 FEF772FC 		BL DUPP 
 3527 1a7c FEF7BCFE 		BL CPP   
 3528 1a80 FEF720FC 		BL STORE
 3529 1a84 FEF728FC 		BL AT 
 3530 1a88 FEF7CAFE 		BL LAST 
 3531 1a8c FEF71AFC 		BL STORE
 3532 1a90 00F024FA 		BL OVERT 
 3533 1a94 FEF75CFC 	8:  BL DROP 
 3534 1a98 52F804FB 	9:	_UNNEST 
 3535              	
 3536              	
 3537              	flash_regs:
 3538 1a9c 00200240 		.word FLASH_BASE_ADR // 0 
 3539 1aa0 23016745 		.word FLASH_KEY1   // 4 
 3540 1aa4 AB89EFCD 		.word FLASH_KEY2   // 8
 3541              	
 3542              	// **************************************************************************
 3543              	//  The compiler
 3544              	
 3545              	//    '	   ( -- ca )
 3546              	// 	Search context vocabularies for the next word in input stream.
 3547              	
 3548 1aa8 441A0000 		.word	_FORGET+MAPOFFSET
 3549 1aac 01       	_TICK:	.byte  1
 3550 1aad 27       		.ascii "'"
 3551 1aae 00BF     		.p2align 2 	
 3552              	TICK:
 3553 1ab0 42F804ED 		_NEST
 3554 1ab4 FFF762FC 		BL	TOKEN
 3555 1ab8 FFF71AFD 		BL	NAMEQ	// ?defined
 3556 1abc FEF7E6FB 		BL	QBRAN
 3557 1ac0 C81A0000 		.word	TICK1+MAPOFFSET
 3558 1ac4 52F804FB 		_UNNEST	// yes, push code address
 3559 1ac8 FFF7D8BD 	TICK1:	B.W	ABORT	// no, error
 3560              	
 3561              	//    ALLOT	( n -- )
 3562              	// 	Allocate n bytes to the ram area.
 3563              	
ARM GAS  stm32eforth-fl.s 			page 67


 3564 1acc AC1A0000 		.word	_TICK+MAPOFFSET
 3565 1ad0 05       	_ALLOT:	.byte  5
 3566 1ad1 414C4C4F 		.ascii "ALLOT"
 3566      54
 3567 1ad6 00BF     		.p2align 2 	
 3568              	ALLOT:
 3569 1ad8 42F804ED 		_NEST
 3570 1adc FEF78CFE 		BL	CPP
 3571 1ae0 FEF7CAFD 		BL	PSTOR
 3572 1ae4 52F804FB 		_UNNEST			// adjust code pointer
 3573              	
 3574              	//    ,	   ( w -- )
 3575              	// 	Compile an integer into the code dictionary.
 3576              	
 3577 1ae8 D01A0000 		.word	_ALLOT+MAPOFFSET
 3578 1aec 012C     	_COMMA:	.byte  1,','
 3579 1aee 00BF     		.p2align 2 	
 3580              	COMMA:
 3581 1af0 42F804ED 		_NEST
 3582 1af4 FEF7D0FF 		BL	HERE
 3583 1af8 FEF732FC 		BL	DUPP
 3584 1afc FEF7E2FC 		BL	CELLP	// cell boundary
 3585 1b00 FEF77AFE 		BL	CPP
 3586 1b04 FEF7DEFB 		BL	STORE
 3587 1b08 FEF7DCFB 		BL	STORE
 3588 1b0c 52F804FB 		_UNNEST	// adjust code pointer, compile
 3589              		.p2align 2 
 3590              	//    [COMPILE]   ( -- //  string> )
 3591              	// 	Compile the next immediate word into code dictionary.
 3592              	
 3593 1b10 EC1A0000 		.word	_COMMA+MAPOFFSET
 3594 1b14 89       	_BCOMP:	.byte  IMEDD+9
 3595 1b15 5B434F4D 		.ascii "[COMPILE]"
 3595      50494C45 
 3595      5D
 3596 1b1e 00BF     		.p2align 2 	
 3597              	BCOMP:
 3598 1b20 42F804ED 		_NEST
 3599 1b24 FFF7C4FF 		BL	TICK
 3600 1b28 FFF7E2FF 		BL	COMMA
 3601 1b2c 52F804FB 		_UNNEST
 3602              	
 3603              	//    COMPILE	( -- )
 3604              	// 	Compile the next address in colon list to code dictionary.
 3605              	
 3606 1b30 141B0000 		.word	_BCOMP+MAPOFFSET
 3607 1b34 47       	_COMPI:	.byte  COMPO+7
 3608 1b35 434F4D50 		.ascii "COMPILE"
 3608      494C45
 3609              		.p2align 2 	
 3610              	COMPI:
 3611 1b3c 42F804ED 		_NEST
 3612 1b40 FEF7E0FB 		BL	RFROM
 3613 1b44 25F00105 		BIC	R5,R5,#1
 3614 1b48 FEF70AFC 		BL	DUPP
 3615 1b4c FEF7C4FB 		BL	AT
 3616 1b50 00F0F2F9 		BL	CALLC			// compile BL instruction
ARM GAS  stm32eforth-fl.s 			page 68


 3617 1b54 FEF7B6FC 		BL	CELLP
 3618 1b58 45F00105 		ORR	R5,R5,#1
 3619 1b5c FEF7E4FB 		BL	TOR
 3620 1b60 52F804FB 		_UNNEST			// adjust return address
 3621              	
 3622              	//    LITERAL	( w -- )
 3623              	// 	Compile tos to code dictionary as an integer literal.
 3624              	
 3625 1b64 341B0000 		.word	_COMPI+MAPOFFSET
 3626 1b68 87       	_LITER:	.byte  IMEDD+7
 3627 1b69 4C495445 		.ascii "LITERAL"
 3627      52414C
 3628              		.p2align 2 	
 3629              	LITER:
 3630 1b70 42F804ED 		_NEST
 3631 1b74 FFF7E2FF 		BL	COMPI
 3632 1b78 46020000 		.word	DOLIT+MAPOFFSET
 3633 1b7c FFF7B8FF 		BL	COMMA
 3634 1b80 52F804FB 		_UNNEST
 3635              	
 3636              	//    $,"	( -- )
 3637              	// 	Compile a literal string up to next " .
 3638              	
 3639              	// 	.word	_LITER+MAPOFFSET
 3640              	// _STRCQ	.byte  3
 3641              	// 	.ascii "$$,"""
 3642              	// 	.p2align 2 	
 3643              	STRCQ:
 3644 1b84 42F804ED 		_NEST
 3645 1b88 FEF75DFB 		_DOLIT
 3646 1b8c FCFFFFFF 		.word	-4
 3647 1b90 FEF732FE 		BL	CPP
 3648 1b94 FEF770FD 		BL	PSTOR
 3649 1b98 FEF755FB 		_DOLIT
 3650 1b9c 22000000 		.word	'\"'
 3651 1ba0 FFF7DAFB 		BL	WORDD			// move word to code dictionary
 3652 1ba4 FEF78CFD 		BL	COUNT
 3653 1ba8 FEF73EFC 		BL	PLUS
 3654 1bac FEF71CFF 		BL	ALGND			// calculate aligned end of string
 3655 1bb0 FEF722FE 		BL	CPP
 3656 1bb4 FEF786FB 		BL	STORE
 3657 1bb8 52F804FB 		_UNNEST 			// adjust the code pointer
 3658              	
 3659              	// **************************************************************************
 3660              	//  Structures
 3661              	
 3662              	//    FOR	 ( -- a )
 3663              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3664              	
 3665 1bbc 681B0000 		.word	_LITER+MAPOFFSET
 3666 1bc0 C3       	_FOR:	.byte  COMPO+IMEDD+3
 3667 1bc1 464F52   		.ascii "FOR"
 3668              		.p2align 2 	
 3669              	FOR:
 3670 1bc4 42F804ED 		_NEST
 3671 1bc8 FFF7B8FF 		BL	COMPI
 3672 1bcc 28030000 		.word	TOR+MAPOFFSET
ARM GAS  stm32eforth-fl.s 			page 69


 3673 1bd0 FEF762FF 		BL	HERE
 3674 1bd4 52F804FB 		_UNNEST
 3675              	
 3676              	//    BEGIN	( -- a )
 3677              	// 	Start an infinite or indefinite loop structure.
 3678              	
 3679 1bd8 C01B0000 		.word	_FOR+MAPOFFSET
 3680 1bdc C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 3681 1bdd 42454749 		.ascii "BEGIN"
 3681      4E
 3682 1be2 00BF     		.p2align 2 	
 3683              	BEGIN:
 3684 1be4 42F804ED 		_NEST
 3685 1be8 FEF756FF 		BL	HERE
 3686 1bec 52F804FB 		_UNNEST
 3687              		.p2align 2 
 3688              	//    NEXT	( a -- )
 3689              	// 	Terminate a FOR-NEXT loop structure.
 3690              	
 3691 1bf0 DC1B0000 		.word	_BEGIN+MAPOFFSET
 3692 1bf4 C4       	_NEXT:	.byte  COMPO+IMEDD+4
 3693 1bf5 4E455854 		.ascii "NEXT"
 3694 1bf9 0000BF   		.p2align 2 	
 3695              	NEXT:
 3696 1bfc 42F804ED 		_NEST
 3697 1c00 FFF79CFF 		BL	COMPI
 3698 1c04 6E020000 		.word	DONXT+MAPOFFSET
 3699 1c08 FFF772FF 		BL	COMMA
 3700 1c0c 52F804FB 		_UNNEST
 3701              	
 3702              	//    UNTIL	( a -- )
 3703              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3704              	
 3705 1c10 F41B0000 		.word	_NEXT+MAPOFFSET
 3706 1c14 C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3707 1c15 554E5449 		.ascii "UNTIL"
 3707      4C
 3708 1c1a 00BF     		.p2align 2 	
 3709              	UNTIL:
 3710 1c1c 42F804ED 		_NEST
 3711 1c20 FFF78CFF 		BL	COMPI
 3712 1c24 8C020000 		.word	QBRAN+MAPOFFSET
 3713 1c28 FFF762FF 		BL	COMMA
 3714 1c2c 52F804FB 		_UNNEST
 3715              	
 3716              	//    AGAIN	( a -- )
 3717              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3718              	
 3719 1c30 141C0000 		.word	_UNTIL+MAPOFFSET
 3720 1c34 C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3721 1c35 41474149 		.ascii "AGAIN"
 3721      4E
 3722 1c3a 00BF     		.p2align 2 	
 3723              	AGAIN:
 3724 1c3c 42F804ED 		_NEST
 3725 1c40 FFF77CFF 		BL	COMPI
 3726 1c44 A4020000 		.word	BRAN+MAPOFFSET
ARM GAS  stm32eforth-fl.s 			page 70


 3727 1c48 FFF752FF 		BL	COMMA
 3728 1c4c 52F804FB 		_UNNEST
 3729              	
 3730              	//    IF	  ( -- A )
 3731              	// 	Begin a conditional branch structure.
 3732              	
 3733 1c50 341C0000 		.word	_AGAIN+MAPOFFSET
 3734 1c54 C2       	_IFF:	.byte  COMPO+IMEDD+2
 3735 1c55 4946     		.ascii "IF"
 3736 1c57 00       		.p2align 2 	
 3737              	IFF:
 3738 1c58 42F804ED 		_NEST
 3739 1c5c FFF76EFF 		BL	COMPI
 3740 1c60 8C020000 		.word	QBRAN+MAPOFFSET
 3741 1c64 FEF718FF 		BL	HERE
 3742 1c68 FEF7EDFA 		_DOLIT
 3743 1c6c 04000000 		.word	4
 3744 1c70 FEF7C2FD 		BL	CPP
 3745 1c74 FEF700FD 		BL	PSTOR
 3746 1c78 52F804FB 		_UNNEST
 3747              	
 3748              	//    AHEAD	( -- A )
 3749              	// 	Compile a forward branch instruction.
 3750              	
 3751 1c7c 541C0000 		.word	_IFF+MAPOFFSET
 3752 1c80 C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 3753 1c81 41484541 		.ascii "AHEAD"
 3753      44
 3754 1c86 00BF     		.p2align 2 	
 3755              	AHEAD:
 3756 1c88 42F804ED 		_NEST
 3757 1c8c FFF756FF 		BL	COMPI
 3758 1c90 A4020000 		.word	BRAN+MAPOFFSET
 3759 1c94 FEF700FF 		BL	HERE
 3760 1c98 FEF7D5FA 		_DOLIT
 3761 1c9c 04000000 		.word	4
 3762 1ca0 FEF7AAFD 		BL	CPP
 3763 1ca4 FEF7E8FC 		BL	PSTOR
 3764 1ca8 52F804FB 		_UNNEST
 3765              	
 3766              	//    REPEAT	( A a -- )
 3767              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3768              	
 3769 1cac 801C0000 		.word	_AHEAD+MAPOFFSET
 3770 1cb0 C6       	_REPEA:	.byte  COMPO+IMEDD+6
 3771 1cb1 52455045 		.ascii "REPEAT"
 3771      4154
 3772 1cb7 00       		.p2align 2 	
 3773              	REPEA:
 3774 1cb8 42F804ED 		_NEST
 3775 1cbc FFF7BEFF 		BL	AGAIN
 3776 1cc0 FEF7EAFE 		BL	HERE
 3777 1cc4 FEF754FB 		BL	SWAP
 3778 1cc8 FEF7FCFA 		BL	STORE
 3779 1ccc 52F804FB 		_UNNEST
 3780              	
 3781              	//    THEN	( A -- )
ARM GAS  stm32eforth-fl.s 			page 71


 3782              	// 	Terminate a conditional branch structure.
 3783              	
 3784 1cd0 B01C0000 		.word	_REPEA+MAPOFFSET
 3785 1cd4 C4       	_THENN:	.byte  COMPO+IMEDD+4
 3786 1cd5 5448454E 		.ascii "THEN"
 3787 1cd9 0000BF   		.p2align 2 	
 3788              	THENN:
 3789 1cdc 42F804ED 		_NEST
 3790 1ce0 FEF7DAFE 		BL	HERE
 3791 1ce4 FEF744FB 		BL	SWAP
 3792 1ce8 FEF7ECFA 		BL	STORE
 3793 1cec 52F804FB 		_UNNEST
 3794              	
 3795              	//    AFT	 ( a -- a A )
 3796              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3797              	
 3798 1cf0 D41C0000 		.word	_THENN+MAPOFFSET
 3799 1cf4 C3       	_AFT:	.byte  COMPO+IMEDD+3
 3800 1cf5 414654   		.ascii "AFT"
 3801              		.p2align 2 	
 3802              	AFT:
 3803 1cf8 42F804ED 		_NEST
 3804 1cfc FEF728FB 		BL	DROP
 3805 1d00 FFF7C2FF 		BL	AHEAD
 3806 1d04 FFF76EFF 		BL	BEGIN
 3807 1d08 FEF732FB 		BL	SWAP
 3808 1d0c 52F804FB 		_UNNEST
 3809              	
 3810              	//    ELSE	( A -- A )
 3811              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3812              	
 3813 1d10 F41C0000 		.word	_AFT+MAPOFFSET
 3814 1d14 C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 3815 1d15 454C5345 		.ascii "ELSE"
 3816 1d19 0000BF   		.p2align 2 	
 3817              	ELSEE:
 3818 1d1c 42F804ED 		_NEST
 3819 1d20 FFF7B2FF 		BL	AHEAD
 3820 1d24 FEF724FB 		BL	SWAP
 3821 1d28 FFF7D8FF 		BL	THENN
 3822 1d2c 52F804FB 		_UNNEST
 3823              	
 3824              	//    WHILE	( a -- A a )
 3825              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3826              	
 3827 1d30 141D0000 		.word	_ELSEE+MAPOFFSET
 3828 1d34 C5       	_WHILE:	.byte  COMPO+IMEDD+5
 3829 1d35 5748494C 		.ascii "WHILE"
 3829      45
 3830 1d3a 00BF     		.p2align 2 	
 3831              	WHILE:
 3832 1d3c 42F804ED 		_NEST
 3833 1d40 FFF78AFF 		BL	IFF
 3834 1d44 FEF714FB 		BL	SWAP
 3835 1d48 52F804FB 		_UNNEST
 3836              	
 3837              	//    ABORT"	( -- //  string> )
ARM GAS  stm32eforth-fl.s 			page 72


 3838              	// 	Conditional abort with an error message.
 3839              	
 3840 1d4c 341D0000 		.word	_WHILE+MAPOFFSET
 3841 1d50 86       	_ABRTQ:	.byte  IMEDD+6
 3842 1d51 41424F52 		.ascii "ABORT\""
 3842      5422
 3843 1d57 00       		.p2align 2 	
 3844              	ABRTQ:
 3845 1d58 42F804ED 		_NEST
 3846 1d5c FFF7EEFE 		BL	COMPI
 3847 1d60 A4160000 		.word	ABORQ+MAPOFFSET
 3848 1d64 FFF70EFF 		BL	STRCQ
 3849 1d68 52F804FB 		_UNNEST
 3850              	
 3851              	//    $"	( -- //  string> )
 3852              	// 	Compile an inlineDCB literal.
 3853              	
 3854 1d6c 501D0000 		.word	_ABRTQ+MAPOFFSET
 3855 1d70 82       	_STRQ:	.byte  IMEDD+2
 3856 1d71 2422     		.byte	'$','"'
 3857 1d73 00       		.p2align 2 	
 3858              	STRQ:
 3859 1d74 42F804ED 		_NEST
 3860 1d78 FFF7E0FE 		BL	COMPI
 3861 1d7c 58100000 		.word	STRQP+MAPOFFSET
 3862 1d80 FFF700FF 		BL	STRCQ
 3863 1d84 52F804FB 		_UNNEST
 3864              	
 3865              	//    ."	( -- //  string> )
 3866              	// 	Compile an inline word  literal to be typed out at run time.
 3867              	
 3868 1d88 701D0000 		.word	_STRQ+MAPOFFSET
 3869 1d8c C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 3870 1d8d 2E22     		.byte	'.','"'
 3871 1d8f 00       		.p2align 2 	
 3872              	DOTQ:
 3873 1d90 42F804ED 		_NEST
 3874 1d94 FFF7D2FE 		BL	COMPI
 3875 1d98 74100000 		.word	DOTQP+MAPOFFSET
 3876 1d9c FFF7F2FE 		BL	STRCQ
 3877 1da0 52F804FB 		_UNNEST
 3878              	
 3879              	// **************************************************************************
 3880              	//  Name compiler
 3881              	
 3882              	//    ?UNIQUE	( a -- a )
 3883              	// 	Display a warning message if the word already exists.
 3884              	
 3885 1da4 8C1D0000 		.word	_DOTQ+MAPOFFSET
 3886 1da8 07       	_UNIQU:	.byte  7
 3887 1da9 3F554E49 		.ascii "?UNIQUE"
 3887      515545
 3888              		.p2align 2 	
 3889              	UNIQU:
 3890 1db0 42F804ED 		_NEST
 3891 1db4 FEF7D4FA 		BL	DUPP
 3892 1db8 FFF79AFB 		BL	NAMEQ			// ?name exists
ARM GAS  stm32eforth-fl.s 			page 73


 3893 1dbc FEF766FA 		BL	QBRAN
 3894 1dc0 DC1D0000 		.word	UNIQ1+MAPOFFSET	// redefinitions are OK
 3895 1dc4 FFF756F9 		BL	DOTQP
 3896 1dc8 07       		.byte	7
 3897 1dc9 20726544 		.ascii " reDef "		// but warn the user
 3897      656620
 3898              		.p2align 2 	
 3899 1dd0 FEF7D8FA 		BL	OVER
 3900 1dd4 FEF774FC 		BL	COUNT
 3901 1dd8 FFF7FCF8 		BL	TYPEE			// just in case its not planned
 3902              	UNIQ1:
 3903 1ddc FEF7B8FA 		BL	DROP
 3904 1de0 52F804FB 		_UNNEST
 3905              	
 3906              	//    $,n	 ( na -- )
 3907              	// 	Build a new dictionary name using the data at na.
 3908              	
 3909              	// 	.word	_UNIQU+MAPOFFSET
 3910              	// _SNAME	.byte  3
 3911              	// 	.ascii "$$,n"
 3912              	// 	.p2align 2 	
 3913              	SNAME:
 3914 1de4 42F804ED 		_NEST
 3915 1de8 FEF7BAFA 		BL	DUPP			//  na na
 3916 1dec FEF784FA 		BL	CAT			//  ?null input
 3917 1df0 FEF74CFA 		BL	QBRAN
 3918 1df4 2C1E0000 		.word	SNAM1+MAPOFFSET
 3919 1df8 FFF7DAFF 		BL	UNIQU			//  na
 3920 1dfc FEF710FD 		BL	LAST			//  na last
 3921 1e00 FEF76AFA 		BL	AT			//  na la
 3922 1e04 FFF774FE 		BL	COMMA			//  na
 3923 1e08 FEF7AAFA 		BL	DUPP			//  na na
 3924 1e0c FEF708FD 		BL	LAST			//  na na last
 3925 1e10 FEF758FA 		BL	STORE			//  na , save na for vocabulary link
 3926 1e14 FEF754FC 		BL	COUNT			//  na+1 count
 3927 1e18 FEF706FB 		BL	PLUS			//  na+1+count
 3928 1e1c FEF7E4FD 		BL	ALGND			//  word boundary
 3929 1e20 FEF7EAFC 		BL	CPP
 3930 1e24 FEF74EFA 		BL	STORE			//  top of dictionary now
 3931 1e28 52F804FB 		_UNNEST
 3932              	SNAM1:
 3933 1e2c FFF714F9 		BL	STRQP
 3934 1e30 07       		.byte	7
 3935 1e31 206E616D 		.ascii " name? "
 3935      653F20
 3936 1e38 FFF720BC 		B.W	ABORT
 3937              	
 3938              	//    $COMPILE	( a -- )
 3939              	// 	Compile next word to code dictionary as a token or literal.
 3940              	
 3941 1e3c A81D0000 		.word	_UNIQU+MAPOFFSET
 3942 1e40 08       	_SCOMP:	.byte  8
 3943 1e41 2424434F 		.ascii "$$COMPILE"
 3943      4D50494C 
 3943      45
 3944 1e4a 00BF     		.p2align 2 	
 3945              	SCOMP:
ARM GAS  stm32eforth-fl.s 			page 74


 3946 1e4c 42F804ED 		_NEST
 3947 1e50 FFF74EFB 		BL	NAMEQ
 3948 1e54 FEF770FB 		BL	QDUP	// defined?
 3949 1e58 FEF718FA 		BL	QBRAN
 3950 1e5c 881E0000 		.word	SCOM2+MAPOFFSET
 3951 1e60 FEF73AFA 		BL	AT
 3952 1e64 FEF7EFF9 		_DOLIT
 3953 1e68 80000000 		.word	IMEDD
 3954 1e6c FEF79CFA 		BL	ANDD	// immediate?
 3955 1e70 FEF70CFA 		BL	QBRAN
 3956 1e74 801E0000 		.word	SCOM1+MAPOFFSET
 3957 1e78 FEF7F4F9 		BL	EXECU
 3958 1e7c 52F804FB 		_UNNEST			// it's immediate, execute
 3959              	SCOM1:
 3960 1e80 00F05AF8 		BL	CALLC			// it's not immediate, compile
 3961 1e84 52F804FB 		_UNNEST	
 3962              	SCOM2:
 3963 1e88 FEF7C4FF 		BL	NUMBQ
 3964 1e8c FEF7FEF9 		BL	QBRAN
 3965 1e90 9C1E0000 		.word	SCOM3+MAPOFFSET
 3966 1e94 FFF76CFE 		BL	LITER
 3967 1e98 52F804FB 		_UNNEST			// compile number as integer
 3968              	SCOM3: // compilation abort 
 3969 1e9c 00F002F8 		BL COLON_ABORT 
 3970 1ea0 FFF7ECBB 		B.W	ABORT			// error
 3971              	
 3972              	// before aborting a compilation 
 3973              	// reset HERE and LAST
 3974              	// to previous values.  
 3975              	COLON_ABORT:
 3976 1ea4 42F804ED 		_NEST 
 3977 1ea8 FEF7BAFC 		BL LAST 
 3978 1eac FEF714FA 		BL AT 
 3979 1eb0 FEF710FB 		BL CELLM 
 3980 1eb4 FEF754FA 		BL DUPP 
 3981 1eb8 FEF79EFC 		BL CPP  
 3982 1ebc FEF702FA 		BL STORE 
 3983 1ec0 FEF70AFA 		BL AT 
 3984 1ec4 FEF7ACFC 		BL LAST 
 3985 1ec8 FEF7FCF9 		BL STORE 
 3986 1ecc 52F804FB 		_UNNEST 
 3987              	
 3988              	//    OVERT	( -- )
 3989              	// 	Link a new word into the current vocabulary.
 3990              	
 3991 1ed0 401E0000 		.word	_SCOMP+MAPOFFSET
 3992 1ed4 05       	_OVERT:	.byte  5
 3993 1ed5 4F564552 		.ascii "OVERT"
 3993      54
 3994 1eda 00BF     		.p2align 2 	
 3995              	OVERT:
 3996 1edc 42F804ED 		_NEST
 3997 1ee0 FEF79EFC 		BL	LAST
 3998 1ee4 FEF7F8F9 		BL	AT
 3999 1ee8 FEF77CFC 		BL	CNTXT
 4000 1eec FEF7EAF9 		BL	STORE
 4001 1ef0 52F804FB 		_UNNEST
ARM GAS  stm32eforth-fl.s 			page 75


 4002              	
 4003              	//    ; 	   ( -- )
 4004              	// 	Terminate a colon definition.
 4005              	
 4006 1ef4 D41E0000 		.word	_OVERT+MAPOFFSET
 4007 1ef8 C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 4008 1ef9 3B       		.ascii ";"
 4009 1efa 00BF     		.p2align 2 	
 4010              	SEMIS:
 4011 1efc 42F804ED 		_NEST
 4012 1f00 FEF7A1F9 		_DOLIT
 4013 1f04 52F804FB 		_UNNEST
 4014 1f08 FFF7F2FD 		BL	COMMA
 4015 1f0c FFF716FC 		BL	LBRAC
 4016 1f10 FFF7E4FF 		BL	OVERT
 4017 1f14 52F804FB 		_UNNEST
 4018              	
 4019              	//    ]	   ( -- )
 4020              	// 	Start compiling the words in the input stream.
 4021              	
 4022 1f18 F81E0000 		.word	_SEMIS+MAPOFFSET
 4023 1f1c 01       	_RBRAC:	.byte  1
 4024 1f1d 5D       		.ascii "]"
 4025 1f1e 00BF     		.p2align 2 	
 4026              	RBRAC:
 4027 1f20 42F804ED 		_NEST
 4028 1f24 FEF78FF9 		_DOLIT
 4029 1f28 4C1E0000 		.word	SCOMP+MAPOFFSET
 4030 1f2c FEF744FC 		BL	TEVAL
 4031 1f30 FEF7C8F9 		BL	STORE
 4032 1f34 52F804FB 		_UNNEST
 4033              	
 4034              	//    BL.W	( ca -- )
 4035              	// 	Assemble a branch-link long instruction to ca.
 4036              	// 	BL.W is split into 2 16 bit instructions with 11 bit address fields.
 4037              	
 4038              	// 	.word	_RBRAC+MAPOFFSET
 4039              	// _CALLC	.byte  5
 4040              	// 	.ascii "call,"
 4041              	// 	.p2align 2 	
 4042              	CALLC:
 4043 1f38 42F804ED 		_NEST
 4044 1f3c 25F00105 		BIC	R5,R5,#1		//  clear b0 of address from R>
 4045 1f40 FEF7AAFD 		BL	HERE
 4046 1f44 FEF778FA 		BL	SUBB
 4047 1f48 A5F10405 		SUB	R5,R5,#4		//  pc offset
 4048 1f4c 40F2FF70 		MOVW	R0,#0x7FF		//  11 bit mask
 4049 1f50 2C46     		MOV	R4,R5
 4050 1f52 4FEA1535 		LSR	R5,R5,#12		//  get bits 22-12
 4051 1f56 05EA0005 		AND	R5,R5,R0
 4052 1f5a 4FEAC434 		LSL	R4,R4,#15		//  get bits 11-1
 4053 1f5e 45EA0405 		ORR	R5,R5,R4
 4054 1f62 45F07845 		ORR	R5,R5,#0xF8000000
 4055 1f66 45F47045 		ORR	R5,R5,#0xF000
 4056 1f6a FFF7C1FD 		BL	COMMA			//  assemble BL.W instruction
 4057 1f6e 52F804FB 		_UNNEST
 4058              	
ARM GAS  stm32eforth-fl.s 			page 76


 4059              	
 4060              	// 	:	( -- //  string> )
 4061              	// 	Start a new colon definition using next word as its name.
 4062              	
 4063 1f72 1C1F0000 		.word	_RBRAC+MAPOFFSET
 4064 1f76 01       	_COLON:	.byte  1
 4065 1f77 3A       		.ascii ":"
 4066              		.p2align 2 	
 4067              	COLON:
 4068 1f78 42F804ED 		_NEST
 4069 1f7c FFF7FEF9 		BL	TOKEN
 4070 1f80 FFF730FF 		BL	SNAME
 4071 1f84 FEF75FF9 		_DOLIT
 4072 1f88 42F804ED 		_NEST
 4073 1f8c FFF7B0FD 		BL	COMMA
 4074 1f90 FFF7C6FF 		BL	RBRAC
 4075 1f94 52F804FB 		_UNNEST
 4076              	
 4077              	//    IMMEDIATE   ( -- )
 4078              	// 	Make the last compiled word an immediate word.
 4079              	
 4080 1f98 761F0000 		.word	_COLON+MAPOFFSET
 4081 1f9c 09       	_IMMED:	.byte  9
 4082 1f9d 494D4D45 		.ascii "IMMEDIATE"
 4082      44494154 
 4082      45
 4083 1fa6 00BF     		.p2align 2 	
 4084              	IMMED:
 4085 1fa8 42F804ED 		_NEST
 4086 1fac FEF74BF9 		_DOLIT
 4087 1fb0 80000000 		.word	IMEDD
 4088 1fb4 FEF734FC 		BL	LAST
 4089 1fb8 FEF78EF9 		BL	AT
 4090 1fbc FEF78CF9 		BL	AT
 4091 1fc0 FEF7FCF9 		BL	ORR
 4092 1fc4 FEF72CFC 		BL	LAST
 4093 1fc8 FEF786F9 		BL	AT
 4094 1fcc FEF77AF9 		BL	STORE
 4095 1fd0 52F804FB 		_UNNEST
 4096              	
 4097              	// **************************************************************************
 4098              	//  Defining words
 4099              	
 4100              	//    CONSTANT	( u -- //  string> )
 4101              	// 	Compile a new constant.
 4102              	
 4103 1fd4 9C1F0000 		.word	_IMMED+MAPOFFSET
 4104 1fd8 08       	_CONST:	.byte  8
 4105 1fd9 434F4E53 		.ascii "CONSTANT"
 4105      54414E54 
 4106 1fe1 0000BF   		.p2align 2 	
 4107              	CONST:
 4108 1fe4 42F804ED 		_NEST
 4109 1fe8 FFF7C8F9 		BL	TOKEN
 4110 1fec FFF7FAFE 		BL	SNAME
 4111 1ff0 FFF774FF 		BL	OVERT
 4112 1ff4 FEF727F9 		_DOLIT
ARM GAS  stm32eforth-fl.s 			page 77


 4113 1ff8 42F804ED 		_NEST
 4114 1ffc FFF778FD 		BL	COMMA
 4115 2000 FEF721F9 		_DOLIT
 4116 2004 F4060000 		.word	DOCON+MAPOFFSET
 4117 2008 FFF796FF 		BL	CALLC
 4118 200c FFF770FD 		BL	COMMA
 4119 2010 52F804FB 		_UNNEST
 4120              	
 4121              	//    CREATE	( -- //  string> )
 4122              	// 	Compile a new array entry without allocating code space.
 4123              	
 4124 2014 D81F0000 		.word	_CONST+MAPOFFSET
 4125 2018 06       	_CREAT:	.byte  6
 4126 2019 43524541 		.ascii "CREATE"
 4126      5445
 4127 201f 00       		.p2align 2 	
 4128              	CREAT:
 4129 2020 42F804ED 		_NEST
 4130 2024 FFF7AAF9 		BL	TOKEN
 4131 2028 FFF7DCFE 		BL	SNAME
 4132 202c FFF756FF 		BL	OVERT
 4133 2030 FEF709F9 		_DOLIT
 4134 2034 42F804ED 		_NEST
 4135 2038 FFF75AFD 		BL	COMMA
 4136 203c FEF703F9 		_DOLIT
 4137 2040 E8060000 		.word	DOVAR+MAPOFFSET
 4138 2044 FFF778FF 		BL	CALLC
 4139 2048 52F804FB 		_UNNEST
 4140              	
 4141              	//    VARIABLE	( -- //  string> )
 4142              	// 	Compile a new variable initialized to 0.
 4143              	
 4144 204c 18200000 		.word	_CREAT+MAPOFFSET
 4145 2050 08       	_VARIA:	.byte  8
 4146 2051 56415249 		.ascii "VARIABLE"
 4146      41424C45 
 4147 2059 0000BF   		.p2align 2 	
 4148              	VARIA:
 4149 205c 42F804ED 		_NEST
 4150 2060 FFF7DEFF 		BL	CREAT
 4151 2064 FEF7EFF8 		_DOLIT
 4152 2068 00000000 		.word	0
 4153 206c FFF740FD 		BL	COMMA
 4154 2070 52F804FB 		_UNNEST
 4155              	
 4156              	// **************************************************************************
 4157              	//  Tools
 4158              	
 4159              	//    dm+	 ( a u -- a )
 4160              	// 	Dump u bytes from , leaving a+u on the stack.
 4161              	
 4162              	// 	.word	_VARIA+MAPOFFSET
 4163              	// _DMP	.byte  3
 4164              	// 	.ascii "dm+"
 4165              	// 	.p2align 2 	
 4166              	DMP:
 4167 2074 42F804ED 		_NEST
ARM GAS  stm32eforth-fl.s 			page 78


 4168 2078 FEF784F9 		BL	OVER
 4169 207c FEF7E3F8 		_DOLIT
 4170 2080 04000000 		.word	4
 4171 2084 FFF718F8 		BL	UDOTR			// display address
 4172 2088 FEF77CFF 		BL	SPACE
 4173 208c FEF74CF9 		BL	TOR			// start count down loop
 4174 2090 00F00CB8 		B.W	PDUM2			// skip first pass
 4175              	PDUM1:
 4176 2094 FEF764F9 	  BL	DUPP
 4177 2098 FEF72EF9 		BL	CAT
 4178 209c FEF7D3F8 		_DOLIT
 4179 20a0 03000000 		.word	3
 4180 20a4 FFF708F8 		BL	UDOTR			// display numeric data
 4181 20a8 FEF7ECF9 		BL	ONEP			// increment address
 4182              	PDUM2:
 4183 20ac FEF7DFF8 	  BL	DONXT
 4184 20b0 94200000 		.word	PDUM1+MAPOFFSET	// loop till done
 4185 20b4 52F804FB 		_UNNEST
 4186              		.p2align 2 
 4187              	//    DUMP	( a u -- )
 4188              	// 	Dump u bytes from a, in a formatted manner.
 4189              	
 4190 20b8 50200000 		.word	_VARIA+MAPOFFSET
 4191 20bc 04       	_DUMP:	.byte  4
 4192 20bd 44554D50 		.ascii "DUMP"
 4193 20c1 0000BF   		.p2align 2 	
 4194              	DUMP:
 4195 20c4 42F804ED 		_NEST
 4196 20c8 FEF748FB 		BL	BASE
 4197 20cc FEF704F9 		BL	AT
 4198 20d0 FEF72AF9 		BL	TOR
 4199 20d4 FEF746FE 		BL	HEX			// save radix,set hex
 4200 20d8 FEF7B5F8 		_DOLIT
 4201 20dc 10000000 		.word	16
 4202 20e0 FEF752FC 		BL	SLASH			// change count to lines
 4203 20e4 FEF720F9 		BL	TOR
 4204 20e8 00F014B8 		B.W	DUMP4			// start count down loop
 4205              	DUMP1:
 4206 20ec FEF78AFF 	  BL	CR
 4207 20f0 FEF7A9F8 		_DOLIT
 4208 20f4 10000000 		.word	16
 4209 20f8 FEF73CFA 		BL	DDUP
 4210 20fc FFF7BAFF 		BL	DMP			// display numeric
 4211 2100 FEF724FA 		BL	ROT
 4212 2104 FEF722FA 		BL	ROT
 4213 2108 FEF73CFF 		BL	SPACE
 4214 210c FEF73AFF 		BL	SPACE
 4215 2110 FEF760FF 		BL	TYPEE			// display printable characters
 4216              	DUMP4:
 4217 2114 FEF7ABF8 	  BL	DONXT
 4218 2118 EC200000 		.word	DUMP1+MAPOFFSET	// loop till done
 4219              	DUMP3:
 4220 211c FEF718F9 	  BL	DROP
 4221 2120 FEF7F0F8 		BL	RFROM
 4222 2124 FEF71AFB 		BL	BASE
 4223 2128 FEF7CCF8 		BL	STORE			// restore radix
 4224 212c 52F804FB 		_UNNEST
ARM GAS  stm32eforth-fl.s 			page 79


 4225              	
 4226              	//    .S	  ( ... -- ... )
 4227              	// 	Display the contents of the data stack.
 4228              	
 4229 2130 BC200000 		.word	_DUMP+MAPOFFSET
 4230              	_DOTS:
 4231 2134 02       		.byte  2
 4232 2135 2E53     		.ascii ".S"
 4233 2137 00       		.p2align 2 	
 4234              	DOTS:
 4235 2138 42F804ED 		_NEST
 4236 213c FEF722FF 		BL	SPACE
 4237 2140 FEF784FC 		BL	DEPTH			// stack depth
 4238 2144 FEF7F0F8 		BL	TOR			// start count down loop
 4239 2148 00F006B8 		B.W	DOTS2			// skip first pass
 4240              	DOTS1:
 4241 214c FEF7E4F8 		BL	RAT
 4242 2150 FEF78EFC 		BL	PICK
 4243 2154 FEF7DCFF 		BL	DOT			// index stack, display contents
 4244              	DOTS2:
 4245 2158 FEF789F8 		BL	DONXT
 4246 215c 4C210000 		.word	DOTS1+MAPOFFSET	// loop till done
 4247 2160 FEF710FF 		BL	SPACE
 4248 2164 52F804FB 		_UNNEST
 4249              	
 4250              	//    >NAME	( ca -- na | F )
 4251              	// 	Convert code address to a name address.
 4252              	
 4253 2168 34210000 		.word	_DOTS+MAPOFFSET
 4254 216c 05       	_TNAME:	.byte  5
 4255 216d 3E4E414D 		.ascii ">NAME"
 4255      45
 4256 2172 00BF     		.p2align 2 	
 4257              	TNAME:
 4258 2174 42F804ED 		_NEST
 4259 2178 FEF7D6F8 		BL	TOR			//  
 4260 217c FEF732FB 		BL	CNTXT			//  va
 4261 2180 FEF7AAF8 		BL	AT			//  na
 4262              	TNAM1:
 4263 2184 FEF7ECF8 		BL	DUPP			//  na na
 4264 2188 FEF780F8 		BL	QBRAN
 4265 218c B4210000 		.word	TNAM2+MAPOFFSET	//  vocabulary end, no match
 4266 2190 FEF7E6F8 		BL	DUPP			//  na na
 4267 2194 FFF700F9 		BL	NAMET			//  na ca
 4268 2198 FEF7BEF8 		BL	RAT			//  na ca code
 4269 219c FEF718F9 		BL	XORR			//  na f --
 4270 21a0 FEF774F8 		BL	QBRAN
 4271 21a4 B4210000 		.word	TNAM2+MAPOFFSET
 4272 21a8 FEF794F9 		BL	CELLM			//  la 
 4273 21ac FEF794F8 		BL	AT			//  next_na
 4274 21b0 FFF7E8BF 		B.W	TNAM1
 4275              	TNAM2:	
 4276 21b4 FEF7A6F8 		BL	RFROM
 4277 21b8 FEF7CAF8 		BL	DROP			//  0|na --
 4278 21bc 52F804FB 		_UNNEST			// 0
 4279              	
 4280              	//    .ID	 ( na -- )
ARM GAS  stm32eforth-fl.s 			page 80


 4281              	// 	Display the name at address.
 4282              	
 4283 21c0 6C210000 		.word	_TNAME+MAPOFFSET
 4284 21c4 03       	_DOTID:	.byte  3
 4285 21c5 2E4944   		.ascii ".ID"
 4286              		.p2align 2 	
 4287              	DOTID:
 4288 21c8 42F804ED 		_NEST
 4289 21cc FEF7B4F9 		BL	QDUP			// if zero no name
 4290 21d0 FEF75CF8 		BL	QBRAN
 4291 21d4 F0210000 		.word	DOTI1+MAPOFFSET
 4292 21d8 FEF772FA 		BL	COUNT
 4293 21dc FEF733F8 		_DOLIT
 4294 21e0 1F000000 		.word	0x1F
 4295 21e4 FEF7E0F8 		BL	ANDD			// mask lexicon bits
 4296 21e8 FEF7F4FE 		BL	TYPEE
 4297 21ec 52F804FB 		_UNNEST			// display name string
 4298              	DOTI1:
 4299 21f0 FEF740FF 		BL	DOTQP
 4300 21f4 09       		.byte	9
 4301 21f5 207B6E6F 		.ascii " {noName}"
 4301      4E616D65 
 4301      7D
 4302 21fe 00BF     		.p2align 2 	
 4303 2200 52F804FB 		_UNNEST
 4304              	
 4305              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 4306              	.if WANT_SEE 
 4307              	//    SEE	 ( -- //  string> )
 4308              	// 	A simple decompiler.
 4309              	
 4310              		.word	_DOTID+MAPOFFSET
 4311              	_SEE:	.byte  3
 4312              		.ascii "SEE"
 4313              		.p2align 2 	
 4314              	SEE:
 4315              		_NEST
 4316              		BL	TICK	//  ca --, starting address
 4317              		BL	CR	
 4318              		_DOLIT
 4319              		.word	20
 4320              		BL	TOR
 4321              	SEE1:
 4322              		BL	CELLP			//  a
 4323              		BL	DUPP			//  a a
 4324              		BL	DECOMP		//  a
 4325              		BL	DONXT
 4326              		.word	SEE1+MAPOFFSET
 4327              		BL	DROP
 4328              		_UNNEST
 4329              	
 4330              	// 	DECOMPILE ( a -- )
 4331              	// 	Convert code in a.  Display name of command or as data.
 4332              	
 4333              		.word	_SEE+MAPOFFSET
 4334              	_DECOM:	.byte  9
 4335              		.ascii "DECOMPILE"
ARM GAS  stm32eforth-fl.s 			page 81


 4336              		.p2align 2 
 4337              		
 4338              	DECOMP:	
 4339              		_NEST
 4340              		BL	DUPP			//  a a
 4341              	// 	BL	TOR			//  a
 4342              		BL	AT			//  a code
 4343              		BL	DUPP			//  a code code
 4344              		_DOLIT
 4345              		.word	0xF800D000 //0xF800F800
 4346              		BL	ANDD
 4347              		_DOLIT
 4348              		.word	0xF000D000 //0xF800F000
 4349              		BL	EQUAL			//  a code ?
 4350              		BL	INVER 
 4351              		BL	QBRAN
 4352              		.word	DECOM2+MAPOFFSET	//  not a command
 4353              		//  a valid_code --, extract address and display name
 4354              		MOVW	R0,#0xFFE
 4355              		MOV	R4,R5
 4356              		LSL	R5,R5,#21		//  get bits 22-12
 4357              		ASR	R5,R5,#9		//  with sign extension
 4358              		LSR	R4,R4,#15		//  get bits 11-1
 4359              		AND	R4,R4,R0		//  retain only bits 11-1
 4360              		ORR	R5,R5,R4		//  get bits 22-1
 4361              		NOP
 4362              		BL	OVER			//  a offset a
 4363              		BL	PLUS			//  a target-4
 4364              		BL	CELLP			//  a target
 4365              		BL	TNAME			//  a na/0 --, is it a name?
 4366              		BL	QDUP			//  name address or zero
 4367              		BL	QBRAN
 4368              		.word	DECOM1+MAPOFFSET
 4369              		BL	SPACE			//  a na
 4370              		BL	DOTID			//  a --, display name
 4371              	// 	BL	RFROM			//  a
 4372              		BL	DROP
 4373              		_UNNEST
 4374              	DECOM1:	// BL	RFROM		//  a
 4375              		BL	AT			//  data
 4376              		BL	UDOT			//  display data
 4377              		_UNNEST
 4378              	DECOM2:
 4379              		BL	UDOT
 4380              	// 	BL	RFROM
 4381              		BL	DROP
 4382              		_UNNEST
 4383              	
 4384              	//    WORDS	( -- )
 4385              	// 	Display the names in the context vocabulary.
 4386              	
 4387              		.word	_DECOM+MAPOFFSET
 4388              	.else 
 4389 2204 C4210000 		.word _DOTID+MAPOFFSET 
 4390              	.endif 
 4391 2208 05       	_WORDS:	.byte  5
 4392 2209 574F5244 		.ascii "WORDS"
ARM GAS  stm32eforth-fl.s 			page 82


 4392      53
 4393 220e 00BF     		.p2align 2 	
 4394              	WORDS:
 4395 2210 42F804ED 		_NEST
 4396 2214 FEF7F6FE 		BL	CR
 4397 2218 FEF7E4FA 		BL	CNTXT
 4398 221c FEF75CF8 		BL	AT			// only in context
 4399              	WORS1:
 4400 2220 FEF78AF9 		BL	QDUP			// ?at end of list
 4401 2224 FEF732F8 		BL	QBRAN
 4402 2228 44220000 		.word	WORS2+MAPOFFSET
 4403 222c FEF798F8 		BL	DUPP
 4404 2230 FEF7A8FE 		BL	SPACE
 4405 2234 FFF7C8FF 		BL	DOTID			// display a name
 4406 2238 FEF74CF9 		BL	CELLM
 4407 223c FEF74CF8 		BL	AT
 4408 2240 FFF7EEBF 		B.W	WORS1
 4409              	WORS2:
 4410 2244 52F804FB 		_UNNEST
 4411              	
 4412              	// **************************************************************************
 4413              	//  cold start
 4414              	
 4415              	//    VER	 ( -- n )
 4416              	// 	Return the version number of this implementation.
 4417              	
 4418              	// 	.word	_WORDS+MAPOFFSET
 4419              	// _VERSN	.byte  3
 4420              	// 	.ascii "VER"
 4421              	// 	.p2align 2 	
 4422              	VERSN:
 4423 2248 42F804ED 		_NEST
 4424 224c FDF7FBFF 		_DOLIT
 4425 2250 00010000 		.word	VER*256+EXT
 4426 2254 52F804FB 		_UNNEST
 4427              	
 4428              	//    hi	  ( -- )
 4429              	// 	Display the sign-on message of eForth.
 4430              	
 4431 2258 08220000 		.word	_WORDS+MAPOFFSET
 4432 225c 02       	_HI:	.byte  2
 4433 225d 4849     		.ascii "HI"
 4434 225f 00       		.p2align 2 	
 4435              	HI:
 4436 2260 42F804ED 		_NEST
 4437 2264 FEF7CEFE 		BL	CR	// initialize I/O
 4438 2268 FEF704FF 		BL	DOTQP
 4439 226c 17       		.byte	23
 4440 226d 626C7565 		.ascii "blue pill stm32eForth v" 
 4440      2070696C 
 4440      6C207374 
 4440      6D333265 
 4440      466F7274 
 4441              		.p2align 2
 4442 2284 FEF76AFA 		BL	BASE
 4443 2288 FEF726F8 		BL	AT
 4444 228c FEF76AFD 		BL	HEX	// save radix
ARM GAS  stm32eforth-fl.s 			page 83


 4445 2290 FFF7DAFF 		BL	VERSN
 4446 2294 FEF7E2FC 		BL	BDIGS
 4447 2298 FEF706FD 		BL	DIG
 4448 229c FEF704FD 		BL	DIG
 4449 22a0 FDF7D1FF 		_DOLIT
 4450 22a4 2E000000 		.word	'.'
 4451 22a8 FEF7E8FC 		BL	HOLD
 4452 22ac FEF70CFD 		BL	DIGS
 4453 22b0 FEF730FD 		BL	EDIGS
 4454 22b4 FEF78EFE 		BL	TYPEE	// format version number
 4455 22b8 FEF750FA 		BL	BASE
 4456 22bc FEF702F8 		BL	STORE
 4457 22c0 FEF7A0FE 		BL	CR
 4458 22c4 52F804FB 		_UNNEST			// restore radix
 4459              	
 4460              	//    COLD	( -- )
 4461              	// 	The high level cold start sequence.
 4462              	
 4463 22c8 5C220000 		.word	_HI+MAPOFFSET
 4464 22cc 04       	LASTN:	.byte  4
 4465 22cd 434F4C44 		.ascii "COLD"
 4466 22d1 000000   		.p2align 2,0	
 4467              	COLD:
 4468              	//  Initiate Forth registers
 4469 22d4 4FF00003 		MOV R3,#UPP&0xffff	//  user area 
 4470 22d8 C2F20003 	 	MOVT R3,#UPP>>16		  
 4471 22dc 03F59F42 		ADD R2,R3,#RPP&0xffff	// Forth return stack
 4472 22e0 03F59D41 		ADD R1,R3,#SPP&0xffff // Forth data stack
 4473 22e4 85EA0505 		EOR R5,R5,R5			//  tos=0
 4474 22e8 00BF     		NOP
 4475 22ea 42F804ED 		_NEST
 4476              	COLD1:
 4477 22ee FDF7AAFF 		_DOLIT 
 4478 22f2 00000000 		.word 0 
 4479 22f6 FDF767FF 		BL ULED // turn off user LED 
 4480 22fa FDF7A4FF 		_DOLIT
 4481 22fe 30010000 		.word	UZERO
 4482 2302 FDF7A0FF 		_DOLIT
 4483 2306 00000020 		.word	UPP
 4484 230a FDF79CFF 		_DOLIT
 4485 230e 4C000000 		.word	ULAST-UZERO
 4486 2312 FEF717FC 		BL	MOVE 			// initialize user area
 4487 2316 FFF775FA 		BL	PRESE			// initialize stack and TIB
 4488 231a FEF715FA 		BL	TBOOT
 4489 231e FEF7EDFB 		BL	ATEXE			// application boot
 4490 2322 FFF7DBFD 		BL	OVERT
 4491 2326 FFF779BA 		B.W	QUIT			// start interpretation
 4492              	COLD2:
 4493 232a 00BFAFF3 		.p2align 10 	
 4493      0080AFF3 
 4493      0080AFF3 
 4493      0080AFF3 
 4493      0080AFF3 
 4494              	CTOP:
 4495              	 // save user image here.  
 4496 2400 FFFFFFFF 		.word 0XFFFFFFFF
 4497              	
ARM GAS  stm32eforth-fl.s 			page 84


 4498              		.section .bss 
 4499 0000 00000000 	SYSTEM_VARS:  .space ULAST-UZERO+4 
 4499      00000000 
 4499      00000000 
 4499      00000000 
 4499      00000000 
 4500 0050 00000000 	FLASH_BUFFER: .space PAGE_SIZE 
 4500      00000000 
 4500      00000000 
 4500      00000000 
 4500      00000000 
 4501 0450 00000000 	USER_RAM: .space 20 
 4501      00000000 
 4501      00000000 
 4501      00000000 
 4501      00000000 
 4502              	
 4503              	  .end 
ARM GAS  stm32eforth-fl.s 			page 85


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  stm32eforth-fl.s 			page 86


board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
board/blue-pill/stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
board/blue-pill/stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
board/blue-pill/stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
board/blue-pill/stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
board/blue-pill/stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
board/blue-pill/stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
board/blue-pill/stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
board/blue-pill/stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
board/blue-pill/stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
board/blue-pill/stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
board/blue-pill/stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
board/blue-pill/stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
board/blue-pill/stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
board/blue-pill/stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
board/blue-pill/stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
board/blue-pill/stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
    stm32eforth-fl.s:88     *ABS*:0000000040011000 LED_GPIO
    stm32eforth-fl.s:89     *ABS*:000000000000000d LED_PIN
    stm32eforth-fl.s:90     *ABS*:0000000040013800 UART
    stm32eforth-fl.s:93     *ABS*:0000000020004e80 SPP
    stm32eforth-fl.s:94     *ABS*:0000000020004e80 TIBB
    stm32eforth-fl.s:95     *ABS*:0000000020004f80 RPP
    stm32eforth-fl.s:96     *ABS*:0000000020000000 UPP
    stm32eforth-fl.s:97     *ABS*:0000000020000100 DTOP
    stm32eforth-fl.s:98     *ABS*:0000000020004e00 DEND
    stm32eforth-fl.s:99     *ABS*:0000000020005000 RAMEND
    stm32eforth-fl.s:100    *ABS*:0000000000000000 MAPOFFSET
    stm32eforth-fl.s:105    *ABS*:0000000000000004 SEED_OFS
    stm32eforth-fl.s:106    *ABS*:0000000000000008 MSEC_OFS
    stm32eforth-fl.s:107    *ABS*:000000000000000c TIMER_OFS
    stm32eforth-fl.s:108    *ABS*:0000000000000010 BOOT_OFS
    stm32eforth-fl.s:109    *ABS*:0000000000000014 BASE_OFS
    stm32eforth-fl.s:110    *ABS*:0000000000000018 TMP_OFS
    stm32eforth-fl.s:111    *ABS*:000000000000001c SPAN_OFS
    stm32eforth-fl.s:112    *ABS*:0000000000000020 TOIN_OFS
    stm32eforth-fl.s:113    *ABS*:0000000000000024 NTIB_OFS
    stm32eforth-fl.s:114    *ABS*:0000000000000028 TIB_OFS
    stm32eforth-fl.s:115    *ABS*:000000000000002c EVAL_OFS
    stm32eforth-fl.s:116    *ABS*:0000000000000030 HLD_OFS
    stm32eforth-fl.s:117    *ABS*:0000000000000034 CTXT_OFS
    stm32eforth-fl.s:118    *ABS*:0000000000000038 CTOP_OFS
    stm32eforth-fl.s:119    *ABS*:000000000000003c UTOP_OFS
    stm32eforth-fl.s:120    *ABS*:0000000000000040 LASTN_OFS
    stm32eforth-fl.s:121    *ABS*:0000000000000044 VARS_END_OFS
    stm32eforth-fl.s:157    .isr_vector:0000000000000000 isr_vectors
    stm32eforth-fl.s:313    .text.reset_handler:0000000000000000 reset_handler
ARM GAS  stm32eforth-fl.s 			page 87


    stm32eforth-fl.s:272    .text.default_handler:0000000000000000 default_handler
    stm32eforth-fl.s:294    .text.default_handler:0000000000000034 systick_handler
    stm32eforth-fl.s:238    .isr_vector:0000000000000130 $d
    stm32eforth-fl.s:243    .isr_vector:0000000000000130 UZERO
    stm32eforth-fl.s:4435   .text.reset_handler:0000000000002260 HI
                            *ABS*:000000000000000a BASEE
    stm32eforth-fl.s:3170   .text.reset_handler:00000000000016e0 INTER
    stm32eforth-fl.s:4464   .text.reset_handler:00000000000022cc LASTN
    stm32eforth-fl.s:4494   .text.reset_handler:0000000000002400 CTOP
    stm32eforth-fl.s:4501   .bss:0000000000000450 USER_RAM
    stm32eforth-fl.s:262    .isr_vector:000000000000017c ULAST
    stm32eforth-fl.s:269    .text.default_handler:0000000000000000 $t
    stm32eforth-fl.s:282    .text.default_handler:000000000000001c exception_msg
    stm32eforth-fl.s:607    .text.reset_handler:0000000000000224 EMIT
    stm32eforth-fl.s:283    .text.default_handler:000000000000001c $d
    stm32eforth-fl.s:304    .text.default_handler:000000000000004e systick_exit
    stm32eforth-fl.s:425    .text.reset_handler:00000000000000e8 remap
    stm32eforth-fl.s:314    .text.reset_handler:0000000000000000 $t
    stm32eforth-fl.s:326    .text.reset_handler:0000000000000018 init_devices
    stm32eforth-fl.s:3310   .text.reset_handler:000000000000183c UNLOCK
    stm32eforth-fl.s:320    .text.reset_handler:0000000000000014 forth_entry
    stm32eforth-fl.s:321    .text.reset_handler:0000000000000014 $d
    stm32eforth-fl.s:4467   .text.reset_handler:00000000000022d4 COLD
    stm32eforth-fl.s:325    .text.reset_handler:0000000000000018 $t
    stm32eforth-fl.s:341    .text.reset_handler:0000000000000036 wait_hserdy
    stm32eforth-fl.s:361    .text.reset_handler:0000000000000050 wait_pllrdy
    stm32eforth-fl.s:374    .text.reset_handler:0000000000000070 wait_sws
    stm32eforth-fl.s:443    .text.reset_handler:0000000000000118 remap_dest
    stm32eforth-fl.s:441    .text.reset_handler:0000000000000114 remap_src
    stm32eforth-fl.s:442    .text.reset_handler:0000000000000114 $d
    stm32eforth-fl.s:450    *ABS*:0000000000000001 VER
    stm32eforth-fl.s:451    *ABS*:0000000000000000 EXT
    stm32eforth-fl.s:455    *ABS*:0000000000000040 COMPO
    stm32eforth-fl.s:456    *ABS*:0000000000000080 IMEDD
    stm32eforth-fl.s:457    *ABS*:00000000ffffff1f MASKK
    stm32eforth-fl.s:459    *ABS*:0000000000000004 CELLL
    stm32eforth-fl.s:461    *ABS*:0000000000000008 VOCSS
    stm32eforth-fl.s:463    *ABS*:0000000000000008 BKSPP
    stm32eforth-fl.s:464    *ABS*:000000000000000a LF
    stm32eforth-fl.s:465    *ABS*:000000000000000d CRR
    stm32eforth-fl.s:466    *ABS*:000000000000001b ERR
    stm32eforth-fl.s:467    *ABS*:0000000000000027 TIC
    stm32eforth-fl.s:497    .text.reset_handler:000000000000011c $d
    stm32eforth-fl.s:498    .text.reset_handler:0000000000000120 _RAND
    stm32eforth-fl.s:501    .text.reset_handler:0000000000000128 RAND
    stm32eforth-fl.s:1453   .text.reset_handler:000000000000070c SEED
    stm32eforth-fl.s:743    .text.reset_handler:00000000000002d8 AT
    stm32eforth-fl.s:837    .text.reset_handler:0000000000000360 DUPP
    stm32eforth-fl.s:730    .text.reset_handler:00000000000002c4 STORE
    stm32eforth-fl.s:1236   .text.reset_handler:00000000000005c8 ABSS
    stm32eforth-fl.s:848    .text.reset_handler:0000000000000370 SWAP
    stm32eforth-fl.s:1768   .text.reset_handler:0000000000000970 MODD
    stm32eforth-fl.s:521    .text.reset_handler:0000000000000168 $d
    stm32eforth-fl.s:522    .text.reset_handler:000000000000016c _REBOOT
    stm32eforth-fl.s:525    .text.reset_handler:0000000000000174 REBOOT
    stm32eforth-fl.s:532    .text.reset_handler:0000000000000184 scb_adr
    stm32eforth-fl.s:533    .text.reset_handler:0000000000000184 $d
ARM GAS  stm32eforth-fl.s 			page 88


    stm32eforth-fl.s:538    .text.reset_handler:000000000000018c _PAUSE
    stm32eforth-fl.s:540    .text.reset_handler:0000000000000192 $t
    stm32eforth-fl.s:541    .text.reset_handler:0000000000000194 PAUSE
    stm32eforth-fl.s:1475   .text.reset_handler:0000000000000734 TIMER
    stm32eforth-fl.s:545    .text.reset_handler:00000000000001a0 PAUSE_LOOP
    stm32eforth-fl.s:690    .text.reset_handler:000000000000028c QBRAN
    stm32eforth-fl.s:549    .text.reset_handler:00000000000001ac $d
    stm32eforth-fl.s:552    .text.reset_handler:00000000000001b8 PAUSE_EXIT
    stm32eforth-fl.s:708    .text.reset_handler:00000000000002a4 BRAN
    stm32eforth-fl.s:550    .text.reset_handler:00000000000001b0 $t
    stm32eforth-fl.s:551    .text.reset_handler:00000000000001b4 $d
    stm32eforth-fl.s:553    .text.reset_handler:00000000000001b8 $t
    stm32eforth-fl.s:557    .text.reset_handler:00000000000001bc $d
    stm32eforth-fl.s:558    .text.reset_handler:00000000000001c0 _ULED
    stm32eforth-fl.s:562    .text.reset_handler:00000000000001c8 ULED
    stm32eforth-fl.s:571    .text.reset_handler:00000000000001e0 ULED_OFF
    stm32eforth-fl.s:577    .text.reset_handler:00000000000001e4 $d
    stm32eforth-fl.s:578    .text.reset_handler:00000000000001e8 _QRX
    stm32eforth-fl.s:581    .text.reset_handler:00000000000001f0 QKEY
    stm32eforth-fl.s:582    .text.reset_handler:00000000000001f0 QRX
    stm32eforth-fl.s:593    .text.reset_handler:0000000000000210 QRX1
    stm32eforth-fl.s:602    .text.reset_handler:0000000000000218 $d
    stm32eforth-fl.s:603    .text.reset_handler:000000000000021c _TXSTO
    stm32eforth-fl.s:606    .text.reset_handler:0000000000000224 TXSTO
    stm32eforth-fl.s:608    .text.reset_handler:0000000000000224 TECHO
    stm32eforth-fl.s:611    .text.reset_handler:000000000000022c TX1
    stm32eforth-fl.s:625    .text.reset_handler:000000000000023c $d
    stm32eforth-fl.s:626    .text.reset_handler:0000000000000240 _NOP
    stm32eforth-fl.s:628    .text.reset_handler:0000000000000244 $t
    stm32eforth-fl.s:629    .text.reset_handler:0000000000000244 NOP
    stm32eforth-fl.s:640    .text.reset_handler:0000000000000246 DOLIT
    stm32eforth-fl.s:650    .text.reset_handler:0000000000000258 $d
    stm32eforth-fl.s:651    .text.reset_handler:000000000000025c _EXECU
    stm32eforth-fl.s:653    .text.reset_handler:0000000000000264 $t
    stm32eforth-fl.s:654    .text.reset_handler:0000000000000264 EXECU
    stm32eforth-fl.s:668    .text.reset_handler:000000000000026e DONXT
    stm32eforth-fl.s:675    .text.reset_handler:000000000000027c NEXT1
    stm32eforth-fl.s:697    .text.reset_handler:000000000000029e QBRAN1
    stm32eforth-fl.s:716    .text.reset_handler:00000000000002ae $d
    stm32eforth-fl.s:717    .text.reset_handler:00000000000002b2 _EXIT
    stm32eforth-fl.s:720    .text.reset_handler:00000000000002b8 EXIT
    stm32eforth-fl.s:726    .text.reset_handler:00000000000002bc $d
    stm32eforth-fl.s:727    .text.reset_handler:00000000000002c0 _STORE
    stm32eforth-fl.s:729    .text.reset_handler:00000000000002c2 $t
    stm32eforth-fl.s:739    .text.reset_handler:00000000000002d0 $d
    stm32eforth-fl.s:740    .text.reset_handler:00000000000002d4 _AT
    stm32eforth-fl.s:742    .text.reset_handler:00000000000002d6 $t
    stm32eforth-fl.s:750    .text.reset_handler:00000000000002dc $d
    stm32eforth-fl.s:751    .text.reset_handler:00000000000002e0 _CSTOR
    stm32eforth-fl.s:754    .text.reset_handler:00000000000002e4 CSTOR
    stm32eforth-fl.s:763    .text.reset_handler:00000000000002f0 $d
    stm32eforth-fl.s:764    .text.reset_handler:00000000000002f4 _CAT
    stm32eforth-fl.s:767    .text.reset_handler:00000000000002f8 CAT
    stm32eforth-fl.s:774    .text.reset_handler:00000000000002fc $d
    stm32eforth-fl.s:775    .text.reset_handler:0000000000000300 _RFROM
    stm32eforth-fl.s:778    .text.reset_handler:0000000000000304 RFROM
    stm32eforth-fl.s:786    .text.reset_handler:000000000000030e $d
ARM GAS  stm32eforth-fl.s 			page 89


    stm32eforth-fl.s:787    .text.reset_handler:0000000000000312 _RAT
    stm32eforth-fl.s:790    .text.reset_handler:0000000000000318 RAT
    stm32eforth-fl.s:798    .text.reset_handler:0000000000000320 $d
    stm32eforth-fl.s:799    .text.reset_handler:0000000000000324 _TOR
    stm32eforth-fl.s:802    .text.reset_handler:0000000000000328 TOR
    stm32eforth-fl.s:810    .text.reset_handler:0000000000000332 $d
    stm32eforth-fl.s:811    .text.reset_handler:0000000000000336 _SPAT
    stm32eforth-fl.s:813    .text.reset_handler:000000000000033a $t
    stm32eforth-fl.s:814    .text.reset_handler:000000000000033c SPAT
    stm32eforth-fl.s:822    .text.reset_handler:0000000000000344 $d
    stm32eforth-fl.s:823    .text.reset_handler:0000000000000348 _DROP
    stm32eforth-fl.s:826    .text.reset_handler:0000000000000350 DROP
    stm32eforth-fl.s:833    .text.reset_handler:0000000000000356 $d
    stm32eforth-fl.s:834    .text.reset_handler:000000000000035a _DUPP
    stm32eforth-fl.s:836    .text.reset_handler:000000000000035e $t
    stm32eforth-fl.s:844    .text.reset_handler:0000000000000366 $d
    stm32eforth-fl.s:845    .text.reset_handler:000000000000036a _SWAP
    stm32eforth-fl.s:857    .text.reset_handler:0000000000000378 $d
    stm32eforth-fl.s:858    .text.reset_handler:000000000000037c _OVER
    stm32eforth-fl.s:861    .text.reset_handler:0000000000000384 OVER
    stm32eforth-fl.s:869    .text.reset_handler:000000000000038c $d
    stm32eforth-fl.s:870    .text.reset_handler:0000000000000390 _ZLESS
    stm32eforth-fl.s:873    .text.reset_handler:0000000000000394 ZLESS
    stm32eforth-fl.s:881    .text.reset_handler:000000000000039e $d
    stm32eforth-fl.s:882    .text.reset_handler:00000000000003a2 _ANDD
    stm32eforth-fl.s:884    .text.reset_handler:00000000000003a6 $t
    stm32eforth-fl.s:885    .text.reset_handler:00000000000003a8 ANDD
    stm32eforth-fl.s:893    .text.reset_handler:00000000000003b2 $d
    stm32eforth-fl.s:894    .text.reset_handler:00000000000003b6 _ORR
    stm32eforth-fl.s:897    .text.reset_handler:00000000000003bc ORR
    stm32eforth-fl.s:905    .text.reset_handler:00000000000003c6 $d
    stm32eforth-fl.s:906    .text.reset_handler:00000000000003ca _XORR
    stm32eforth-fl.s:908    .text.reset_handler:00000000000003ce $t
    stm32eforth-fl.s:909    .text.reset_handler:00000000000003d0 XORR
    stm32eforth-fl.s:917    .text.reset_handler:00000000000003da $d
    stm32eforth-fl.s:918    .text.reset_handler:00000000000003de _UPLUS
    stm32eforth-fl.s:920    .text.reset_handler:00000000000003e2 $t
    stm32eforth-fl.s:921    .text.reset_handler:00000000000003e4 UPLUS
    stm32eforth-fl.s:932    .text.reset_handler:00000000000003f4 $d
    stm32eforth-fl.s:933    .text.reset_handler:00000000000003f8 _RSHIFT
    stm32eforth-fl.s:936    .text.reset_handler:0000000000000400 RSHIFT
    stm32eforth-fl.s:944    .text.reset_handler:000000000000040a $d
    stm32eforth-fl.s:945    .text.reset_handler:000000000000040e _LSHIFT
    stm32eforth-fl.s:948    .text.reset_handler:0000000000000418 LSHIFT
    stm32eforth-fl.s:956    .text.reset_handler:0000000000000422 $d
    stm32eforth-fl.s:957    .text.reset_handler:0000000000000426 _PLUS
    stm32eforth-fl.s:959    .text.reset_handler:0000000000000428 $t
    stm32eforth-fl.s:960    .text.reset_handler:0000000000000428 PLUS
    stm32eforth-fl.s:968    .text.reset_handler:0000000000000430 $d
    stm32eforth-fl.s:969    .text.reset_handler:0000000000000434 _SUBB
    stm32eforth-fl.s:971    .text.reset_handler:0000000000000436 $t
    stm32eforth-fl.s:972    .text.reset_handler:0000000000000438 SUBB
    stm32eforth-fl.s:980    .text.reset_handler:0000000000000442 $d
    stm32eforth-fl.s:981    .text.reset_handler:0000000000000446 _STAR
    stm32eforth-fl.s:983    .text.reset_handler:0000000000000448 $t
    stm32eforth-fl.s:984    .text.reset_handler:0000000000000448 STAR
    stm32eforth-fl.s:992    .text.reset_handler:0000000000000452 $d
ARM GAS  stm32eforth-fl.s 			page 90


    stm32eforth-fl.s:993    .text.reset_handler:0000000000000456 _UMSTA
    stm32eforth-fl.s:995    .text.reset_handler:000000000000045a $t
    stm32eforth-fl.s:996    .text.reset_handler:000000000000045c UMSTA
    stm32eforth-fl.s:1006   .text.reset_handler:0000000000000468 $d
    stm32eforth-fl.s:1007   .text.reset_handler:000000000000046c _MSTAR
    stm32eforth-fl.s:1010   .text.reset_handler:0000000000000470 MSTAR
    stm32eforth-fl.s:1020   .text.reset_handler:000000000000047c $d
    stm32eforth-fl.s:1021   .text.reset_handler:0000000000000480 _ONEP
    stm32eforth-fl.s:1024   .text.reset_handler:0000000000000484 ONEP
    stm32eforth-fl.s:1031   .text.reset_handler:000000000000048a $d
    stm32eforth-fl.s:1032   .text.reset_handler:000000000000048e _ONEM
    stm32eforth-fl.s:1035   .text.reset_handler:0000000000000494 ONEM
    stm32eforth-fl.s:1042   .text.reset_handler:000000000000049a $d
    stm32eforth-fl.s:1043   .text.reset_handler:000000000000049e _TWOP
    stm32eforth-fl.s:1046   .text.reset_handler:00000000000004a4 TWOP
    stm32eforth-fl.s:1053   .text.reset_handler:00000000000004aa $d
    stm32eforth-fl.s:1054   .text.reset_handler:00000000000004ae _TWOM
    stm32eforth-fl.s:1057   .text.reset_handler:00000000000004b4 TWOM
    stm32eforth-fl.s:1064   .text.reset_handler:00000000000004ba $d
    stm32eforth-fl.s:1065   .text.reset_handler:00000000000004be _CELLP
    stm32eforth-fl.s:1067   .text.reset_handler:00000000000004c4 $t
    stm32eforth-fl.s:1068   .text.reset_handler:00000000000004c4 CELLP
    stm32eforth-fl.s:1075   .text.reset_handler:00000000000004ca $d
    stm32eforth-fl.s:1076   .text.reset_handler:00000000000004ce _CELLM
    stm32eforth-fl.s:1078   .text.reset_handler:00000000000004d4 $t
    stm32eforth-fl.s:1079   .text.reset_handler:00000000000004d4 CELLM
    stm32eforth-fl.s:1086   .text.reset_handler:00000000000004da $d
    stm32eforth-fl.s:1087   .text.reset_handler:00000000000004de _BLANK
    stm32eforth-fl.s:1090   .text.reset_handler:00000000000004e4 BLANK
    stm32eforth-fl.s:1098   .text.reset_handler:00000000000004ee $d
    stm32eforth-fl.s:1099   .text.reset_handler:00000000000004f2 _CELLS
    stm32eforth-fl.s:1101   .text.reset_handler:00000000000004f8 $t
    stm32eforth-fl.s:1102   .text.reset_handler:00000000000004f8 CELLS
    stm32eforth-fl.s:1109   .text.reset_handler:00000000000004fe $d
    stm32eforth-fl.s:1110   .text.reset_handler:0000000000000502 _CELLSL
    stm32eforth-fl.s:1112   .text.reset_handler:0000000000000508 $t
    stm32eforth-fl.s:1113   .text.reset_handler:0000000000000508 CELLSL
    stm32eforth-fl.s:1120   .text.reset_handler:000000000000050e $d
    stm32eforth-fl.s:1121   .text.reset_handler:0000000000000512 _TWOST
    stm32eforth-fl.s:1124   .text.reset_handler:0000000000000518 TWOST
    stm32eforth-fl.s:1131   .text.reset_handler:000000000000051e $d
    stm32eforth-fl.s:1132   .text.reset_handler:0000000000000522 _TWOSL
    stm32eforth-fl.s:1135   .text.reset_handler:0000000000000528 TWOSL
    stm32eforth-fl.s:1142   .text.reset_handler:000000000000052e $d
    stm32eforth-fl.s:1143   .text.reset_handler:0000000000000532 _QDUP
    stm32eforth-fl.s:1146   .text.reset_handler:0000000000000538 QDUP
    stm32eforth-fl.s:1155   .text.reset_handler:0000000000000542 $d
    stm32eforth-fl.s:1156   .text.reset_handler:0000000000000546 _ROT
    stm32eforth-fl.s:1158   .text.reset_handler:000000000000054a $t
    stm32eforth-fl.s:1159   .text.reset_handler:000000000000054c ROT
    stm32eforth-fl.s:1169   .text.reset_handler:0000000000000556 $d
    stm32eforth-fl.s:1170   .text.reset_handler:000000000000055a _DDROP
    stm32eforth-fl.s:1172   .text.reset_handler:0000000000000560 $t
    stm32eforth-fl.s:1173   .text.reset_handler:0000000000000560 DDROP
    stm32eforth-fl.s:1181   .text.reset_handler:000000000000056a $d
    stm32eforth-fl.s:1182   .text.reset_handler:000000000000056e _DDUP
    stm32eforth-fl.s:1185   .text.reset_handler:0000000000000574 DDUP
ARM GAS  stm32eforth-fl.s 			page 91


    stm32eforth-fl.s:1194   .text.reset_handler:0000000000000580 $d
    stm32eforth-fl.s:1195   .text.reset_handler:0000000000000584 _DPLUS
    stm32eforth-fl.s:1198   .text.reset_handler:0000000000000588 DPLUS
    stm32eforth-fl.s:1210   .text.reset_handler:000000000000059c $d
    stm32eforth-fl.s:1211   .text.reset_handler:00000000000005a0 _INVER
    stm32eforth-fl.s:1213   .text.reset_handler:00000000000005a4 $t
    stm32eforth-fl.s:1214   .text.reset_handler:00000000000005a4 INVER
    stm32eforth-fl.s:1221   .text.reset_handler:00000000000005aa $d
    stm32eforth-fl.s:1222   .text.reset_handler:00000000000005ae _NEGAT
    stm32eforth-fl.s:1225   .text.reset_handler:00000000000005b8 NEGAT
    stm32eforth-fl.s:1232   .text.reset_handler:00000000000005be $d
    stm32eforth-fl.s:1233   .text.reset_handler:00000000000005c2 _ABSS
    stm32eforth-fl.s:1235   .text.reset_handler:00000000000005c6 $t
    stm32eforth-fl.s:1245   .text.reset_handler:00000000000005d2 $d
    stm32eforth-fl.s:1246   .text.reset_handler:00000000000005d6 _ZEQUAL
    stm32eforth-fl.s:1249   .text.reset_handler:00000000000005dc ZEQUAL
    stm32eforth-fl.s:1259   .text.reset_handler:00000000000005ea $d
    stm32eforth-fl.s:1260   .text.reset_handler:00000000000005ee _EQUAL
    stm32eforth-fl.s:1262   .text.reset_handler:00000000000005f0 $t
    stm32eforth-fl.s:1263   .text.reset_handler:00000000000005f0 EQUAL
    stm32eforth-fl.s:1274   .text.reset_handler:0000000000000600 $d
    stm32eforth-fl.s:1275   .text.reset_handler:0000000000000604 _ULESS
    stm32eforth-fl.s:1278   .text.reset_handler:0000000000000608 ULESS
    stm32eforth-fl.s:1289   .text.reset_handler:0000000000000618 $d
    stm32eforth-fl.s:1290   .text.reset_handler:000000000000061c _LESS
    stm32eforth-fl.s:1292   .text.reset_handler:000000000000061e $t
    stm32eforth-fl.s:1293   .text.reset_handler:0000000000000620 LESS
    stm32eforth-fl.s:1304   .text.reset_handler:0000000000000630 $d
    stm32eforth-fl.s:1305   .text.reset_handler:0000000000000634 _GREAT
    stm32eforth-fl.s:1307   .text.reset_handler:0000000000000636 $t
    stm32eforth-fl.s:1308   .text.reset_handler:0000000000000638 GREAT
    stm32eforth-fl.s:1319   .text.reset_handler:0000000000000648 $d
    stm32eforth-fl.s:1320   .text.reset_handler:000000000000064c _MAX
    stm32eforth-fl.s:1322   .text.reset_handler:0000000000000650 $t
    stm32eforth-fl.s:1323   .text.reset_handler:0000000000000650 MAX
    stm32eforth-fl.s:1333   .text.reset_handler:000000000000065c $d
    stm32eforth-fl.s:1334   .text.reset_handler:0000000000000660 _MIN
    stm32eforth-fl.s:1336   .text.reset_handler:0000000000000664 $t
    stm32eforth-fl.s:1337   .text.reset_handler:0000000000000664 MIN
    stm32eforth-fl.s:1347   .text.reset_handler:0000000000000670 $d
    stm32eforth-fl.s:1348   .text.reset_handler:0000000000000674 _PSTOR
    stm32eforth-fl.s:1351   .text.reset_handler:0000000000000678 PSTOR
    stm32eforth-fl.s:1362   .text.reset_handler:0000000000000688 $d
    stm32eforth-fl.s:1363   .text.reset_handler:000000000000068c _DSTOR
    stm32eforth-fl.s:1366   .text.reset_handler:0000000000000690 DSTOR
    stm32eforth-fl.s:1377   .text.reset_handler:00000000000006a4 $d
    stm32eforth-fl.s:1378   .text.reset_handler:00000000000006a8 _DAT
    stm32eforth-fl.s:1381   .text.reset_handler:00000000000006ac DAT
    stm32eforth-fl.s:1390   .text.reset_handler:00000000000006b6 $d
    stm32eforth-fl.s:1391   .text.reset_handler:00000000000006ba _COUNT
    stm32eforth-fl.s:1393   .text.reset_handler:00000000000006c0 $t
    stm32eforth-fl.s:1394   .text.reset_handler:00000000000006c0 COUNT
    stm32eforth-fl.s:1403   .text.reset_handler:00000000000006cc $d
    stm32eforth-fl.s:1404   .text.reset_handler:00000000000006d0 _DNEGA
    stm32eforth-fl.s:1406   .text.reset_handler:00000000000006d8 $t
    stm32eforth-fl.s:1407   .text.reset_handler:00000000000006d8 DNEGA
    stm32eforth-fl.s:1425   .text.reset_handler:00000000000006e8 DOVAR
ARM GAS  stm32eforth-fl.s 			page 92


    stm32eforth-fl.s:1437   .text.reset_handler:00000000000006f4 DOCON
    stm32eforth-fl.s:1449   .text.reset_handler:0000000000000700 $d
    stm32eforth-fl.s:1450   .text.reset_handler:0000000000000704 _SEED
    stm32eforth-fl.s:1460   .text.reset_handler:0000000000000716 $d
    stm32eforth-fl.s:1461   .text.reset_handler:000000000000071a _MSEC
    stm32eforth-fl.s:1464   .text.reset_handler:0000000000000720 MSEC
    stm32eforth-fl.s:1471   .text.reset_handler:000000000000072a $d
    stm32eforth-fl.s:1472   .text.reset_handler:000000000000072e _TIMER
    stm32eforth-fl.s:1474   .text.reset_handler:0000000000000734 $t
    stm32eforth-fl.s:1483   .text.reset_handler:000000000000073e $d
    stm32eforth-fl.s:1484   .text.reset_handler:0000000000000742 _TBOOT
    stm32eforth-fl.s:1486   .text.reset_handler:0000000000000748 $t
    stm32eforth-fl.s:1487   .text.reset_handler:0000000000000748 TBOOT
    stm32eforth-fl.s:1495   .text.reset_handler:0000000000000752 $d
    stm32eforth-fl.s:1496   .text.reset_handler:0000000000000756 _BASE
    stm32eforth-fl.s:1499   .text.reset_handler:000000000000075c BASE
    stm32eforth-fl.s:1511   .text.reset_handler:0000000000000766 TEMP
    stm32eforth-fl.s:1519   .text.reset_handler:0000000000000770 $d
    stm32eforth-fl.s:1520   .text.reset_handler:0000000000000774 _SPAN
    stm32eforth-fl.s:1523   .text.reset_handler:000000000000077c SPAN
    stm32eforth-fl.s:1531   .text.reset_handler:0000000000000786 $d
    stm32eforth-fl.s:1532   .text.reset_handler:000000000000078a _INN
    stm32eforth-fl.s:1534   .text.reset_handler:000000000000078e $t
    stm32eforth-fl.s:1535   .text.reset_handler:0000000000000790 INN
    stm32eforth-fl.s:1543   .text.reset_handler:000000000000079a $d
    stm32eforth-fl.s:1544   .text.reset_handler:000000000000079e _NTIB
    stm32eforth-fl.s:1547   .text.reset_handler:00000000000007a4 NTIB
    stm32eforth-fl.s:1555   .text.reset_handler:00000000000007ae $d
    stm32eforth-fl.s:1556   .text.reset_handler:00000000000007b2 _TEVAL
    stm32eforth-fl.s:1558   .text.reset_handler:00000000000007b8 $t
    stm32eforth-fl.s:1559   .text.reset_handler:00000000000007b8 TEVAL
    stm32eforth-fl.s:1567   .text.reset_handler:00000000000007c2 $d
    stm32eforth-fl.s:1568   .text.reset_handler:00000000000007c6 _HLD
    stm32eforth-fl.s:1570   .text.reset_handler:00000000000007ca $t
    stm32eforth-fl.s:1571   .text.reset_handler:00000000000007cc HLD
    stm32eforth-fl.s:1579   .text.reset_handler:00000000000007d6 $d
    stm32eforth-fl.s:1580   .text.reset_handler:00000000000007da _CNTXT
    stm32eforth-fl.s:1582   .text.reset_handler:00000000000007e2 $t
    stm32eforth-fl.s:1583   .text.reset_handler:00000000000007e4 CNTXT
    stm32eforth-fl.s:1584   .text.reset_handler:00000000000007e4 CRRNT
    stm32eforth-fl.s:1592   .text.reset_handler:00000000000007ee $d
    stm32eforth-fl.s:1593   .text.reset_handler:00000000000007f2 _CP
    stm32eforth-fl.s:1596   .text.reset_handler:00000000000007f8 CPP
    stm32eforth-fl.s:1603   .text.reset_handler:0000000000000802 $d
    stm32eforth-fl.s:1604   .text.reset_handler:0000000000000806 _UTOP
    stm32eforth-fl.s:1607   .text.reset_handler:000000000000080c UTOP
    stm32eforth-fl.s:1615   .text.reset_handler:0000000000000816 $d
    stm32eforth-fl.s:1616   .text.reset_handler:000000000000081a _LAST
    stm32eforth-fl.s:1619   .text.reset_handler:0000000000000820 LAST
    stm32eforth-fl.s:1630   .text.reset_handler:000000000000082a $d
    stm32eforth-fl.s:1631   .text.reset_handler:000000000000082e _USER_BGN
    stm32eforth-fl.s:1634   .text.reset_handler:000000000000083c USER_BEGIN
    stm32eforth-fl.s:1638   .text.reset_handler:0000000000000844 USR_BGN_ADR
    stm32eforth-fl.s:1639   .text.reset_handler:0000000000000844 $d
    stm32eforth-fl.s:1644   .text.reset_handler:000000000000084c _USER_END
    stm32eforth-fl.s:1647   .text.reset_handler:0000000000000858 USER_END
    stm32eforth-fl.s:1660   .text.reset_handler:0000000000000866 $d
ARM GAS  stm32eforth-fl.s 			page 93


    stm32eforth-fl.s:1661   .text.reset_handler:000000000000086a _WITHI
    stm32eforth-fl.s:1664   .text.reset_handler:0000000000000874 WITHI
    stm32eforth-fl.s:1679   .text.reset_handler:0000000000000894 $d
    stm32eforth-fl.s:1680   .text.reset_handler:0000000000000898 _UMMOD
    stm32eforth-fl.s:1683   .text.reset_handler:00000000000008a0 UMMOD
    stm32eforth-fl.s:1687   .text.reset_handler:00000000000008aa UMMOD0
    stm32eforth-fl.s:1694   .text.reset_handler:00000000000008ba UMMOD1
    stm32eforth-fl.s:1700   .text.reset_handler:00000000000008c4 UMMOD2
    stm32eforth-fl.s:1710   .text.reset_handler:00000000000008ce $d
    stm32eforth-fl.s:1711   .text.reset_handler:00000000000008d2 _MSMOD
    stm32eforth-fl.s:1713   .text.reset_handler:00000000000008d8 $t
    stm32eforth-fl.s:1714   .text.reset_handler:00000000000008d8 MSMOD
    stm32eforth-fl.s:1721   .text.reset_handler:00000000000008f0 $d
    stm32eforth-fl.s:1726   .text.reset_handler:0000000000000904 MMOD1
    stm32eforth-fl.s:1722   .text.reset_handler:00000000000008f4 $t
    stm32eforth-fl.s:1731   .text.reset_handler:0000000000000914 $d
    stm32eforth-fl.s:1734   .text.reset_handler:0000000000000920 MMOD2
    stm32eforth-fl.s:1732   .text.reset_handler:0000000000000918 $t
    stm32eforth-fl.s:1739   .text.reset_handler:0000000000000930 $d
    stm32eforth-fl.s:1743   .text.reset_handler:0000000000000940 MMOD3
    stm32eforth-fl.s:1740   .text.reset_handler:0000000000000934 $t
    stm32eforth-fl.s:1749   .text.reset_handler:0000000000000944 $d
    stm32eforth-fl.s:1750   .text.reset_handler:0000000000000948 _SLMOD
    stm32eforth-fl.s:1753   .text.reset_handler:0000000000000950 SLMOD
    stm32eforth-fl.s:1764   .text.reset_handler:0000000000000968 $d
    stm32eforth-fl.s:1765   .text.reset_handler:000000000000096c _MODD
    stm32eforth-fl.s:1767   .text.reset_handler:0000000000000970 $t
    stm32eforth-fl.s:1777   .text.reset_handler:0000000000000980 $d
    stm32eforth-fl.s:1778   .text.reset_handler:0000000000000984 _SLASH
    stm32eforth-fl.s:1780   .text.reset_handler:0000000000000986 $t
    stm32eforth-fl.s:1781   .text.reset_handler:0000000000000988 SLASH
    stm32eforth-fl.s:1791   .text.reset_handler:000000000000099c $d
    stm32eforth-fl.s:1792   .text.reset_handler:00000000000009a0 _SSMOD
    stm32eforth-fl.s:1794   .text.reset_handler:00000000000009a6 $t
    stm32eforth-fl.s:1795   .text.reset_handler:00000000000009a8 SSMOD
    stm32eforth-fl.s:1806   .text.reset_handler:00000000000009c0 $d
    stm32eforth-fl.s:1807   .text.reset_handler:00000000000009c4 _STASL
    stm32eforth-fl.s:1810   .text.reset_handler:00000000000009c8 STASL
    stm32eforth-fl.s:1823   .text.reset_handler:00000000000009dc $d
    stm32eforth-fl.s:1824   .text.reset_handler:00000000000009e0 _ALGND
    stm32eforth-fl.s:1826   .text.reset_handler:00000000000009e8 $t
    stm32eforth-fl.s:1827   .text.reset_handler:00000000000009e8 ALGND
    stm32eforth-fl.s:1836   .text.reset_handler:00000000000009f6 $d
    stm32eforth-fl.s:1837   .text.reset_handler:00000000000009fa _TCHAR
    stm32eforth-fl.s:1839   .text.reset_handler:0000000000000a00 $t
    stm32eforth-fl.s:1840   .text.reset_handler:0000000000000a00 TCHAR
    stm32eforth-fl.s:1843   .text.reset_handler:0000000000000a08 $d
    stm32eforth-fl.s:1844   .text.reset_handler:0000000000000a0c $t
    stm32eforth-fl.s:1848   .text.reset_handler:0000000000000a1c $d
    stm32eforth-fl.s:1849   .text.reset_handler:0000000000000a20 $t
    stm32eforth-fl.s:1852   .text.reset_handler:0000000000000a2c $d
    stm32eforth-fl.s:1856   .text.reset_handler:0000000000000a3c TCHA1
    stm32eforth-fl.s:1853   .text.reset_handler:0000000000000a30 $t
    stm32eforth-fl.s:1855   .text.reset_handler:0000000000000a38 $d
    stm32eforth-fl.s:1857   .text.reset_handler:0000000000000a3c $t
    stm32eforth-fl.s:1862   .text.reset_handler:0000000000000a40 $d
    stm32eforth-fl.s:1863   .text.reset_handler:0000000000000a44 _DEPTH
ARM GAS  stm32eforth-fl.s 			page 94


    stm32eforth-fl.s:1865   .text.reset_handler:0000000000000a4a $t
    stm32eforth-fl.s:1866   .text.reset_handler:0000000000000a4c DEPTH
    stm32eforth-fl.s:1878   .text.reset_handler:0000000000000a66 $d
    stm32eforth-fl.s:1879   .text.reset_handler:0000000000000a6a _PICK
    stm32eforth-fl.s:1882   .text.reset_handler:0000000000000a70 PICK
    stm32eforth-fl.s:1897   .text.reset_handler:0000000000000a8c $d
    stm32eforth-fl.s:1898   .text.reset_handler:0000000000000a90 _HERE
    stm32eforth-fl.s:1901   .text.reset_handler:0000000000000a98 HERE
    stm32eforth-fl.s:1909   .text.reset_handler:0000000000000aa8 $d
    stm32eforth-fl.s:1910   .text.reset_handler:0000000000000aac _VHERE
    stm32eforth-fl.s:1912   .text.reset_handler:0000000000000ab2 $t
    stm32eforth-fl.s:1913   .text.reset_handler:0000000000000ab4 VHERE
    stm32eforth-fl.s:1922   .text.reset_handler:0000000000000ac4 $d
    stm32eforth-fl.s:1923   .text.reset_handler:0000000000000ac8 _PAD
    stm32eforth-fl.s:1925   .text.reset_handler:0000000000000acc $t
    stm32eforth-fl.s:1926   .text.reset_handler:0000000000000acc PAD
    stm32eforth-fl.s:1935   .text.reset_handler:0000000000000adc $d
    stm32eforth-fl.s:1936   .text.reset_handler:0000000000000ae0 _TIB
    stm32eforth-fl.s:1938   .text.reset_handler:0000000000000ae4 $t
    stm32eforth-fl.s:1939   .text.reset_handler:0000000000000ae4 TIB
    stm32eforth-fl.s:1947   .text.reset_handler:0000000000000aec $d
    stm32eforth-fl.s:1948   .text.reset_handler:0000000000000af0 _ATEXE
    stm32eforth-fl.s:1951   .text.reset_handler:0000000000000afc ATEXE
    stm32eforth-fl.s:1963   .text.reset_handler:0000000000000b0e $d
    stm32eforth-fl.s:1964   .text.reset_handler:0000000000000b12 _CMOVE
    stm32eforth-fl.s:1966   .text.reset_handler:0000000000000b18 $t
    stm32eforth-fl.s:1967   .text.reset_handler:0000000000000b18 CMOVE
    stm32eforth-fl.s:1974   .text.reset_handler:0000000000000b2a CMOV1
    stm32eforth-fl.s:1971   .text.reset_handler:0000000000000b22 CMOV0
    stm32eforth-fl.s:1979   .text.reset_handler:0000000000000b34 CMOV2
    stm32eforth-fl.s:1986   .text.reset_handler:0000000000000b3a $d
    stm32eforth-fl.s:1987   .text.reset_handler:0000000000000b3e _MOVE
    stm32eforth-fl.s:1990   .text.reset_handler:0000000000000b44 MOVE
    stm32eforth-fl.s:1998   .text.reset_handler:0000000000000b5a MOVE1
    stm32eforth-fl.s:1995   .text.reset_handler:0000000000000b52 MOVE0
    stm32eforth-fl.s:2003   .text.reset_handler:0000000000000b64 MOVE2
    stm32eforth-fl.s:2010   .text.reset_handler:0000000000000b6a $d
    stm32eforth-fl.s:2011   .text.reset_handler:0000000000000b6e _FILL
    stm32eforth-fl.s:2014   .text.reset_handler:0000000000000b74 FILL
    stm32eforth-fl.s:2017   .text.reset_handler:0000000000000b7c FILL0
    stm32eforth-fl.s:2020   .text.reset_handler:0000000000000b80 FILL1
    stm32eforth-fl.s:2026   .text.reset_handler:0000000000000b8e FILL2
    stm32eforth-fl.s:2033   .text.reset_handler:0000000000000b94 $d
    stm32eforth-fl.s:2034   .text.reset_handler:0000000000000b98 _PACKS
    stm32eforth-fl.s:2037   .text.reset_handler:0000000000000ba0 PACKS
    stm32eforth-fl.s:2046   .text.reset_handler:0000000000000bc0 $d
    stm32eforth-fl.s:2047   .text.reset_handler:0000000000000bc4 $t
    stm32eforth-fl.s:2049   .text.reset_handler:0000000000000bcc $d
    stm32eforth-fl.s:2050   .text.reset_handler:0000000000000bd0 $t
    stm32eforth-fl.s:2067   .text.reset_handler:0000000000000bf8 $d
    stm32eforth-fl.s:2068   .text.reset_handler:0000000000000bfc _DIGIT
    stm32eforth-fl.s:2070   .text.reset_handler:0000000000000c02 $t
    stm32eforth-fl.s:2071   .text.reset_handler:0000000000000c04 DIGIT
    stm32eforth-fl.s:2074   .text.reset_handler:0000000000000c0c $d
    stm32eforth-fl.s:2075   .text.reset_handler:0000000000000c10 $t
    stm32eforth-fl.s:2085   .text.reset_handler:0000000000000c28 $d
    stm32eforth-fl.s:2086   .text.reset_handler:0000000000000c2c _EXTRC
ARM GAS  stm32eforth-fl.s 			page 95


    stm32eforth-fl.s:2088   .text.reset_handler:0000000000000c34 $t
    stm32eforth-fl.s:2089   .text.reset_handler:0000000000000c34 EXTRC
    stm32eforth-fl.s:2092   .text.reset_handler:0000000000000c3c $d
    stm32eforth-fl.s:2093   .text.reset_handler:0000000000000c40 $t
    stm32eforth-fl.s:2102   .text.reset_handler:0000000000000c54 $d
    stm32eforth-fl.s:2103   .text.reset_handler:0000000000000c58 _BDIGS
    stm32eforth-fl.s:2106   .text.reset_handler:0000000000000c5c BDIGS
    stm32eforth-fl.s:2116   .text.reset_handler:0000000000000c70 $d
    stm32eforth-fl.s:2117   .text.reset_handler:0000000000000c74 _HOLD
    stm32eforth-fl.s:2120   .text.reset_handler:0000000000000c7c HOLD
    stm32eforth-fl.s:2134   .text.reset_handler:0000000000000ca0 $d
    stm32eforth-fl.s:2135   .text.reset_handler:0000000000000ca4 _DIG
    stm32eforth-fl.s:2137   .text.reset_handler:0000000000000ca6 $t
    stm32eforth-fl.s:2138   .text.reset_handler:0000000000000ca8 DIG
    stm32eforth-fl.s:2149   .text.reset_handler:0000000000000cc0 $d
    stm32eforth-fl.s:2150   .text.reset_handler:0000000000000cc4 _DIGS
    stm32eforth-fl.s:2153   .text.reset_handler:0000000000000cc8 DIGS
    stm32eforth-fl.s:2155   .text.reset_handler:0000000000000ccc DIGS1
    stm32eforth-fl.s:2159   .text.reset_handler:0000000000000cd8 $d
    stm32eforth-fl.s:2161   .text.reset_handler:0000000000000cde DIGS2
    stm32eforth-fl.s:2160   .text.reset_handler:0000000000000cdc $t
    stm32eforth-fl.s:2167   .text.reset_handler:0000000000000ce2 $d
    stm32eforth-fl.s:2168   .text.reset_handler:0000000000000ce6 _SIGN
    stm32eforth-fl.s:2171   .text.reset_handler:0000000000000cec SIGN
    stm32eforth-fl.s:2175   .text.reset_handler:0000000000000cf8 $d
    stm32eforth-fl.s:2179   .text.reset_handler:0000000000000d08 SIGN1
    stm32eforth-fl.s:2176   .text.reset_handler:0000000000000cfc $t
    stm32eforth-fl.s:2177   .text.reset_handler:0000000000000d00 $d
    stm32eforth-fl.s:2178   .text.reset_handler:0000000000000d04 $t
    stm32eforth-fl.s:2185   .text.reset_handler:0000000000000d0c $d
    stm32eforth-fl.s:2186   .text.reset_handler:0000000000000d10 _EDIGS
    stm32eforth-fl.s:2189   .text.reset_handler:0000000000000d14 EDIGS
    stm32eforth-fl.s:2206   .text.reset_handler:0000000000000d34 STRR
    stm32eforth-fl.s:2221   .text.reset_handler:0000000000000d5c $d
    stm32eforth-fl.s:2222   .text.reset_handler:0000000000000d60 _HEX
    stm32eforth-fl.s:2224   .text.reset_handler:0000000000000d64 $t
    stm32eforth-fl.s:2225   .text.reset_handler:0000000000000d64 HEX
    stm32eforth-fl.s:2228   .text.reset_handler:0000000000000d6c $d
    stm32eforth-fl.s:2229   .text.reset_handler:0000000000000d70 $t
    stm32eforth-fl.s:2236   .text.reset_handler:0000000000000d7c $d
    stm32eforth-fl.s:2237   .text.reset_handler:0000000000000d80 _DECIM
    stm32eforth-fl.s:2239   .text.reset_handler:0000000000000d88 $t
    stm32eforth-fl.s:2240   .text.reset_handler:0000000000000d88 DECIM
    stm32eforth-fl.s:2243   .text.reset_handler:0000000000000d90 $d
    stm32eforth-fl.s:2244   .text.reset_handler:0000000000000d94 $t
    stm32eforth-fl.s:2254   .text.reset_handler:0000000000000da0 $d
    stm32eforth-fl.s:2255   .text.reset_handler:0000000000000da4 _DIGTQ
    stm32eforth-fl.s:2258   .text.reset_handler:0000000000000dac DIGTQ
    stm32eforth-fl.s:2262   .text.reset_handler:0000000000000db8 $d
    stm32eforth-fl.s:2263   .text.reset_handler:0000000000000dbc $t
    stm32eforth-fl.s:2265   .text.reset_handler:0000000000000dc4 $d
    stm32eforth-fl.s:2266   .text.reset_handler:0000000000000dc8 $t
    stm32eforth-fl.s:2269   .text.reset_handler:0000000000000dd4 $d
    stm32eforth-fl.s:2278   .text.reset_handler:0000000000000df8 DGTQ1
    stm32eforth-fl.s:2270   .text.reset_handler:0000000000000dd8 $t
    stm32eforth-fl.s:2271   .text.reset_handler:0000000000000ddc $d
    stm32eforth-fl.s:2272   .text.reset_handler:0000000000000de0 $t
ARM GAS  stm32eforth-fl.s 			page 96


    stm32eforth-fl.s:2275   .text.reset_handler:0000000000000dec $d
    stm32eforth-fl.s:2276   .text.reset_handler:0000000000000df0 $t
    stm32eforth-fl.s:2287   .text.reset_handler:0000000000000e08 $d
    stm32eforth-fl.s:2288   .text.reset_handler:0000000000000e0c _NUMBQ
    stm32eforth-fl.s:2290   .text.reset_handler:0000000000000e14 $t
    stm32eforth-fl.s:2291   .text.reset_handler:0000000000000e14 NUMBQ
    stm32eforth-fl.s:2297   .text.reset_handler:0000000000000e28 $d
    stm32eforth-fl.s:2298   .text.reset_handler:0000000000000e2c $t
    stm32eforth-fl.s:2303   .text.reset_handler:0000000000000e40 $d
    stm32eforth-fl.s:2304   .text.reset_handler:0000000000000e44 $t
    stm32eforth-fl.s:2306   .text.reset_handler:0000000000000e4c $d
    stm32eforth-fl.s:2312   .text.reset_handler:0000000000000e64 NUMQ1
    stm32eforth-fl.s:2307   .text.reset_handler:0000000000000e50 $t
    stm32eforth-fl.s:2316   .text.reset_handler:0000000000000e70 $d
    stm32eforth-fl.s:2317   .text.reset_handler:0000000000000e74 $t
    stm32eforth-fl.s:2327   .text.reset_handler:0000000000000e9c $d
    stm32eforth-fl.s:2366   .text.reset_handler:0000000000000f28 NUMQ6
    stm32eforth-fl.s:2328   .text.reset_handler:0000000000000ea0 $t
    stm32eforth-fl.s:2330   .text.reset_handler:0000000000000ea8 NUMQ2
    stm32eforth-fl.s:2338   .text.reset_handler:0000000000000ec4 $d
    stm32eforth-fl.s:2357   .text.reset_handler:0000000000000f0c NUMQ4
    stm32eforth-fl.s:2339   .text.reset_handler:0000000000000ec8 $t
    stm32eforth-fl.s:2347   .text.reset_handler:0000000000000ee8 $d
    stm32eforth-fl.s:2348   .text.reset_handler:0000000000000eec $t
    stm32eforth-fl.s:2352   .text.reset_handler:0000000000000efc $d
    stm32eforth-fl.s:2354   .text.reset_handler:0000000000000f04 NUMQ3
    stm32eforth-fl.s:2353   .text.reset_handler:0000000000000f00 $t
    stm32eforth-fl.s:2364   .text.reset_handler:0000000000000f24 NUMQ5
    stm32eforth-fl.s:2363   .text.reset_handler:0000000000000f20 $d
    stm32eforth-fl.s:2365   .text.reset_handler:0000000000000f24 $t
    stm32eforth-fl.s:2380   .text.reset_handler:0000000000000f40 $d
    stm32eforth-fl.s:2381   .text.reset_handler:0000000000000f44 _KEY
    stm32eforth-fl.s:2383   .text.reset_handler:0000000000000f48 $t
    stm32eforth-fl.s:2384   .text.reset_handler:0000000000000f48 KEY
    stm32eforth-fl.s:2386   .text.reset_handler:0000000000000f4c KEY1
    stm32eforth-fl.s:2389   .text.reset_handler:0000000000000f54 $d
    stm32eforth-fl.s:2391   .text.reset_handler:0000000000000f58 $t
    stm32eforth-fl.s:2393   .text.reset_handler:0000000000000f60 $d
    stm32eforth-fl.s:2394   .text.reset_handler:0000000000000f64 $t
    stm32eforth-fl.s:2397   .text.reset_handler:0000000000000f70 $d
    stm32eforth-fl.s:2398   .text.reset_handler:0000000000000f74 $t
    stm32eforth-fl.s:2403   .text.reset_handler:0000000000000f78 $d
    stm32eforth-fl.s:2404   .text.reset_handler:0000000000000f7c _SPACE
    stm32eforth-fl.s:2406   .text.reset_handler:0000000000000f82 $t
    stm32eforth-fl.s:2407   .text.reset_handler:0000000000000f84 SPACE
    stm32eforth-fl.s:2416   .text.reset_handler:0000000000000f94 $d
    stm32eforth-fl.s:2417   .text.reset_handler:0000000000000f98 _SPACS
    stm32eforth-fl.s:2420   .text.reset_handler:0000000000000fa0 SPACS
    stm32eforth-fl.s:2423   .text.reset_handler:0000000000000fa8 $d
    stm32eforth-fl.s:2424   .text.reset_handler:0000000000000fac $t
    stm32eforth-fl.s:2429   .text.reset_handler:0000000000000fbc CHAR2
    stm32eforth-fl.s:2427   .text.reset_handler:0000000000000fb8 CHAR1
    stm32eforth-fl.s:2431   .text.reset_handler:0000000000000fc0 $d
    stm32eforth-fl.s:2432   .text.reset_handler:0000000000000fc4 $t
    stm32eforth-fl.s:2437   .text.reset_handler:0000000000000fc8 $d
    stm32eforth-fl.s:2438   .text.reset_handler:0000000000000fcc _TYPEE
    stm32eforth-fl.s:2441   .text.reset_handler:0000000000000fd4 TYPEE
ARM GAS  stm32eforth-fl.s 			page 97


    stm32eforth-fl.s:2449   .text.reset_handler:0000000000000fea TYPE2
    stm32eforth-fl.s:2445   .text.reset_handler:0000000000000fde TYPE1
    stm32eforth-fl.s:2451   .text.reset_handler:0000000000000fee $d
    stm32eforth-fl.s:2452   .text.reset_handler:0000000000000ff2 $t
    stm32eforth-fl.s:2458   .text.reset_handler:0000000000000ffa $d
    stm32eforth-fl.s:2459   .text.reset_handler:0000000000000ffe _CR
    stm32eforth-fl.s:2462   .text.reset_handler:0000000000001004 CR
    stm32eforth-fl.s:2465   .text.reset_handler:000000000000100c $d
    stm32eforth-fl.s:2466   .text.reset_handler:0000000000001010 $t
    stm32eforth-fl.s:2468   .text.reset_handler:0000000000001018 $d
    stm32eforth-fl.s:2469   .text.reset_handler:000000000000101c $t
    stm32eforth-fl.s:2480   .text.reset_handler:0000000000001024 DOSTR
    stm32eforth-fl.s:2503   .text.reset_handler:0000000000001058 STRQP
    stm32eforth-fl.s:2515   .text.reset_handler:0000000000001064 DOTST
    stm32eforth-fl.s:2528   .text.reset_handler:0000000000001074 DOTQP
    stm32eforth-fl.s:2537   .text.reset_handler:0000000000001084 $d
    stm32eforth-fl.s:2538   .text.reset_handler:0000000000001088 _DOTR
    stm32eforth-fl.s:2541   .text.reset_handler:000000000000108c DOTR
    stm32eforth-fl.s:2555   .text.reset_handler:00000000000010b0 $d
    stm32eforth-fl.s:2556   .text.reset_handler:00000000000010b4 _UDOTR
    stm32eforth-fl.s:2558   .text.reset_handler:00000000000010b8 $t
    stm32eforth-fl.s:2559   .text.reset_handler:00000000000010b8 UDOTR
    stm32eforth-fl.s:2575   .text.reset_handler:00000000000010e4 $d
    stm32eforth-fl.s:2576   .text.reset_handler:00000000000010e8 _UDOT
    stm32eforth-fl.s:2579   .text.reset_handler:00000000000010ec UDOT
    stm32eforth-fl.s:2591   .text.reset_handler:0000000000001108 $d
    stm32eforth-fl.s:2592   .text.reset_handler:000000000000110c _DOT
    stm32eforth-fl.s:2594   .text.reset_handler:000000000000110e $t
    stm32eforth-fl.s:2595   .text.reset_handler:0000000000001110 DOT
    stm32eforth-fl.s:2600   .text.reset_handler:0000000000001120 $d
    stm32eforth-fl.s:2601   .text.reset_handler:0000000000001124 $t
    stm32eforth-fl.s:2603   .text.reset_handler:000000000000112c $d
    stm32eforth-fl.s:2606   .text.reset_handler:0000000000001138 DOT1
    stm32eforth-fl.s:2604   .text.reset_handler:0000000000001130 $t
    stm32eforth-fl.s:2615   .text.reset_handler:0000000000001148 $d
    stm32eforth-fl.s:2616   .text.reset_handler:000000000000114c _QUEST
    stm32eforth-fl.s:2618   .text.reset_handler:000000000000114e $t
    stm32eforth-fl.s:2619   .text.reset_handler:0000000000001150 QUEST
    stm32eforth-fl.s:2635   .text.reset_handler:0000000000001160 PARS
    stm32eforth-fl.s:2643   .text.reset_handler:000000000000117c $d
    stm32eforth-fl.s:2711   .text.reset_handler:000000000000126e PARS8
    stm32eforth-fl.s:2644   .text.reset_handler:0000000000001180 $t
    stm32eforth-fl.s:2650   .text.reset_handler:0000000000001198 $d
    stm32eforth-fl.s:2672   .text.reset_handler:00000000000011e8 PARS3
    stm32eforth-fl.s:2651   .text.reset_handler:000000000000119c $t
    stm32eforth-fl.s:2652   .text.reset_handler:00000000000011a0 PARS1
    stm32eforth-fl.s:2660   .text.reset_handler:00000000000011bc $d
    stm32eforth-fl.s:2670   .text.reset_handler:00000000000011e4 PARS2
    stm32eforth-fl.s:2661   .text.reset_handler:00000000000011c0 $t
    stm32eforth-fl.s:2663   .text.reset_handler:00000000000011c8 $d
    stm32eforth-fl.s:2664   .text.reset_handler:00000000000011cc $t
    stm32eforth-fl.s:2667   .text.reset_handler:00000000000011d8 $d
    stm32eforth-fl.s:2668   .text.reset_handler:00000000000011dc $t
    stm32eforth-fl.s:2676   .text.reset_handler:00000000000011f4 PARS4
    stm32eforth-fl.s:2687   .text.reset_handler:000000000000121c $d
    stm32eforth-fl.s:2689   .text.reset_handler:0000000000001224 PARS5
    stm32eforth-fl.s:2688   .text.reset_handler:0000000000001220 $t
ARM GAS  stm32eforth-fl.s 			page 98


    stm32eforth-fl.s:2691   .text.reset_handler:0000000000001228 $d
    stm32eforth-fl.s:2698   .text.reset_handler:0000000000001242 PARS6
    stm32eforth-fl.s:2692   .text.reset_handler:000000000000122c $t
    stm32eforth-fl.s:2694   .text.reset_handler:0000000000001234 $d
    stm32eforth-fl.s:2695   .text.reset_handler:0000000000001238 $t
    stm32eforth-fl.s:2704   .text.reset_handler:0000000000001256 PARS7
    stm32eforth-fl.s:2720   .text.reset_handler:000000000000127e $d
    stm32eforth-fl.s:2721   .text.reset_handler:0000000000001282 _PARSE
    stm32eforth-fl.s:2723   .text.reset_handler:0000000000001288 $t
    stm32eforth-fl.s:2724   .text.reset_handler:0000000000001288 PARSE
    stm32eforth-fl.s:2745   .text.reset_handler:00000000000012c8 $d
    stm32eforth-fl.s:2746   .text.reset_handler:00000000000012cc _DOTPR
    stm32eforth-fl.s:2749   .text.reset_handler:00000000000012d0 DOTPR
    stm32eforth-fl.s:2752   .text.reset_handler:00000000000012d8 $d
    stm32eforth-fl.s:2753   .text.reset_handler:00000000000012dc $t
    stm32eforth-fl.s:2760   .text.reset_handler:00000000000012e8 $d
    stm32eforth-fl.s:2761   .text.reset_handler:00000000000012ec _PAREN
    stm32eforth-fl.s:2763   .text.reset_handler:00000000000012ee $t
    stm32eforth-fl.s:2764   .text.reset_handler:00000000000012f0 PAREN
    stm32eforth-fl.s:2767   .text.reset_handler:00000000000012f8 $d
    stm32eforth-fl.s:2768   .text.reset_handler:00000000000012fc $t
    stm32eforth-fl.s:2775   .text.reset_handler:0000000000001308 $d
    stm32eforth-fl.s:2776   .text.reset_handler:000000000000130c _BKSLA
    stm32eforth-fl.s:2778   .text.reset_handler:000000000000130e $t
    stm32eforth-fl.s:2779   .text.reset_handler:0000000000001310 BKSLA
    stm32eforth-fl.s:2790   .text.reset_handler:0000000000001328 $d
    stm32eforth-fl.s:2791   .text.reset_handler:000000000000132c _CHAR
    stm32eforth-fl.s:2794   .text.reset_handler:0000000000001334 CHAR
    stm32eforth-fl.s:2805   .text.reset_handler:000000000000134c $d
    stm32eforth-fl.s:2806   .text.reset_handler:0000000000001350 _WORDD
    stm32eforth-fl.s:2809   .text.reset_handler:0000000000001358 WORDD
    stm32eforth-fl.s:2820   .text.reset_handler:0000000000001370 $d
    stm32eforth-fl.s:2821   .text.reset_handler:0000000000001374 _TOKEN
    stm32eforth-fl.s:2823   .text.reset_handler:000000000000137a $t
    stm32eforth-fl.s:2824   .text.reset_handler:000000000000137c TOKEN
    stm32eforth-fl.s:2836   .text.reset_handler:000000000000138c $d
    stm32eforth-fl.s:2837   .text.reset_handler:0000000000001390 _NAMET
    stm32eforth-fl.s:2839   .text.reset_handler:0000000000001396 $t
    stm32eforth-fl.s:2840   .text.reset_handler:0000000000001398 NAMET
    stm32eforth-fl.s:2844   .text.reset_handler:00000000000013a4 $d
    stm32eforth-fl.s:2845   .text.reset_handler:00000000000013a8 $t
    stm32eforth-fl.s:2858   .text.reset_handler:00000000000013b8 $d
    stm32eforth-fl.s:2859   .text.reset_handler:00000000000013bc _SAMEQ
    stm32eforth-fl.s:2861   .text.reset_handler:00000000000013c2 $t
    stm32eforth-fl.s:2862   .text.reset_handler:00000000000013c4 SAMEQ
    stm32eforth-fl.s:2882   .text.reset_handler:000000000000140c SAME2
    stm32eforth-fl.s:2866   .text.reset_handler:00000000000013d0 SAME1
    stm32eforth-fl.s:2878   .text.reset_handler:00000000000013fc $d
    stm32eforth-fl.s:2879   .text.reset_handler:0000000000001400 $t
    stm32eforth-fl.s:2884   .text.reset_handler:0000000000001410 $d
    stm32eforth-fl.s:2885   .text.reset_handler:0000000000001414 $t
    stm32eforth-fl.s:2886   .text.reset_handler:0000000000001418 $d
    stm32eforth-fl.s:2887   .text.reset_handler:000000000000141c $t
    stm32eforth-fl.s:2899   .text.reset_handler:0000000000001420 FIND
    stm32eforth-fl.s:2908   .text.reset_handler:0000000000001440 FIND1
    stm32eforth-fl.s:2911   .text.reset_handler:0000000000001448 $d
    stm32eforth-fl.s:2931   .text.reset_handler:0000000000001490 FIND6
ARM GAS  stm32eforth-fl.s 			page 99


    stm32eforth-fl.s:2912   .text.reset_handler:000000000000144c $t
    stm32eforth-fl.s:2915   .text.reset_handler:0000000000001458 $d
    stm32eforth-fl.s:2916   .text.reset_handler:000000000000145c $t
    stm32eforth-fl.s:2920   .text.reset_handler:000000000000146c $d
    stm32eforth-fl.s:2924   .text.reset_handler:000000000000147c FIND2
    stm32eforth-fl.s:2921   .text.reset_handler:0000000000001470 $t
    stm32eforth-fl.s:2929   .text.reset_handler:000000000000148c FIND3
    stm32eforth-fl.s:2938   .text.reset_handler:00000000000014a8 FIND4
    stm32eforth-fl.s:2940   .text.reset_handler:00000000000014ac $d
    stm32eforth-fl.s:2945   .text.reset_handler:00000000000014c0 FIND5
    stm32eforth-fl.s:2941   .text.reset_handler:00000000000014b0 $t
    stm32eforth-fl.s:2959   .text.reset_handler:00000000000014e4 $d
    stm32eforth-fl.s:2960   .text.reset_handler:00000000000014e8 _NAMEQ
    stm32eforth-fl.s:2962   .text.reset_handler:00000000000014ee $t
    stm32eforth-fl.s:2963   .text.reset_handler:00000000000014f0 NAMEQ
    stm32eforth-fl.s:2980   .text.reset_handler:0000000000001504 BKSP
    stm32eforth-fl.s:2989   .text.reset_handler:0000000000001524 $d
    stm32eforth-fl.s:3002   .text.reset_handler:000000000000154c BACK1
    stm32eforth-fl.s:2990   .text.reset_handler:0000000000001528 $t
    stm32eforth-fl.s:2991   .text.reset_handler:000000000000152c $d
    stm32eforth-fl.s:2992   .text.reset_handler:0000000000001530 $t
    stm32eforth-fl.s:2999   .text.reset_handler:0000000000001544 $d
    stm32eforth-fl.s:3000   .text.reset_handler:0000000000001548 $t
    stm32eforth-fl.s:3012   .text.reset_handler:0000000000001550 TAP
    stm32eforth-fl.s:3029   .text.reset_handler:000000000000156c KTAP
    stm32eforth-fl.s:3030   .text.reset_handler:000000000000156c TTAP
    stm32eforth-fl.s:3034   .text.reset_handler:0000000000001578 $d
    stm32eforth-fl.s:3035   .text.reset_handler:000000000000157c $t
    stm32eforth-fl.s:3037   .text.reset_handler:0000000000001584 $d
    stm32eforth-fl.s:3050   .text.reset_handler:00000000000015b4 KTAP2
    stm32eforth-fl.s:3038   .text.reset_handler:0000000000001588 $t
    stm32eforth-fl.s:3039   .text.reset_handler:000000000000158c $d
    stm32eforth-fl.s:3040   .text.reset_handler:0000000000001590 $t
    stm32eforth-fl.s:3042   .text.reset_handler:0000000000001598 $d
    stm32eforth-fl.s:3047   .text.reset_handler:00000000000015ac KTAP1
    stm32eforth-fl.s:3043   .text.reset_handler:000000000000159c $t
    stm32eforth-fl.s:3046   .text.reset_handler:00000000000015a8 $d
    stm32eforth-fl.s:3048   .text.reset_handler:00000000000015ac $t
    stm32eforth-fl.s:3060   .text.reset_handler:00000000000015c8 $d
    stm32eforth-fl.s:3061   .text.reset_handler:00000000000015cc _ACCEP
    stm32eforth-fl.s:3064   .text.reset_handler:00000000000015d4 ACCEP
    stm32eforth-fl.s:3069   .text.reset_handler:00000000000015e4 ACCP1
    stm32eforth-fl.s:3073   .text.reset_handler:00000000000015f0 $d
    stm32eforth-fl.s:3089   .text.reset_handler:0000000000001620 ACCP4
    stm32eforth-fl.s:3074   .text.reset_handler:00000000000015f4 $t
    stm32eforth-fl.s:3078   .text.reset_handler:0000000000001604 $d
    stm32eforth-fl.s:3079   .text.reset_handler:0000000000001608 $t
    stm32eforth-fl.s:3081   .text.reset_handler:0000000000001610 $d
    stm32eforth-fl.s:3084   .text.reset_handler:000000000000161a ACCP2
    stm32eforth-fl.s:3082   .text.reset_handler:0000000000001614 $t
    stm32eforth-fl.s:3087   .text.reset_handler:000000000000161e ACCP3
    stm32eforth-fl.s:3098   .text.reset_handler:0000000000001630 $d
    stm32eforth-fl.s:3099   .text.reset_handler:0000000000001634 _QUERY
    stm32eforth-fl.s:3101   .text.reset_handler:000000000000163a $t
    stm32eforth-fl.s:3102   .text.reset_handler:000000000000163c QUERY
    stm32eforth-fl.s:3106   .text.reset_handler:0000000000001648 $d
    stm32eforth-fl.s:3107   .text.reset_handler:000000000000164c $t
ARM GAS  stm32eforth-fl.s 			page 100


    stm32eforth-fl.s:3112   .text.reset_handler:0000000000001660 $d
    stm32eforth-fl.s:3113   .text.reset_handler:0000000000001664 $t
    stm32eforth-fl.s:3123   .text.reset_handler:0000000000001670 $d
    stm32eforth-fl.s:3124   .text.reset_handler:0000000000001674 _ABORT
    stm32eforth-fl.s:3126   .text.reset_handler:000000000000167a $t
    stm32eforth-fl.s:3127   .text.reset_handler:000000000000167c ABORT
    stm32eforth-fl.s:3133   .text.reset_handler:0000000000001690 $d
    stm32eforth-fl.s:3134   .text.reset_handler:0000000000001694 $t
    stm32eforth-fl.s:3280   .text.reset_handler:0000000000001804 PRESE
    stm32eforth-fl.s:3295   .text.reset_handler:000000000000181c QUIT
    stm32eforth-fl.s:3146   .text.reset_handler:00000000000016a4 ABORQ
    stm32eforth-fl.s:3149   .text.reset_handler:00000000000016ac $d
    stm32eforth-fl.s:3155   .text.reset_handler:00000000000016c4 ABOR1
    stm32eforth-fl.s:3150   .text.reset_handler:00000000000016b0 $t
    stm32eforth-fl.s:3166   .text.reset_handler:00000000000016d0 $d
    stm32eforth-fl.s:3167   .text.reset_handler:00000000000016d4 _INTER
    stm32eforth-fl.s:3169   .text.reset_handler:00000000000016e0 $t
    stm32eforth-fl.s:3175   .text.reset_handler:00000000000016f0 $d
    stm32eforth-fl.s:3186   .text.reset_handler:0000000000001720 INTE1
    stm32eforth-fl.s:3176   .text.reset_handler:00000000000016f4 $t
    stm32eforth-fl.s:3178   .text.reset_handler:00000000000016fc $d
    stm32eforth-fl.s:3179   .text.reset_handler:0000000000001700 $t
    stm32eforth-fl.s:3181   .text.reset_handler:0000000000001708 $d
    stm32eforth-fl.s:3183   .text.reset_handler:0000000000001716 $t
    stm32eforth-fl.s:3189   .text.reset_handler:0000000000001728 $d
    stm32eforth-fl.s:3191   .text.reset_handler:0000000000001730 INTE2
    stm32eforth-fl.s:3190   .text.reset_handler:000000000000172c $t
    stm32eforth-fl.s:3197   .text.reset_handler:0000000000001734 $d
    stm32eforth-fl.s:3198   .text.reset_handler:0000000000001738 _LBRAC
    stm32eforth-fl.s:3200   .text.reset_handler:000000000000173a $t
    stm32eforth-fl.s:3201   .text.reset_handler:000000000000173c LBRAC
    stm32eforth-fl.s:3204   .text.reset_handler:0000000000001744 $d
    stm32eforth-fl.s:3205   .text.reset_handler:0000000000001748 $t
    stm32eforth-fl.s:3212   .text.reset_handler:0000000000001754 $d
    stm32eforth-fl.s:3213   .text.reset_handler:0000000000001758 _DOTOK
    stm32eforth-fl.s:3215   .text.reset_handler:000000000000175c $t
    stm32eforth-fl.s:3216   .text.reset_handler:000000000000175c DOTOK
    stm32eforth-fl.s:3219   .text.reset_handler:0000000000001764 $d
    stm32eforth-fl.s:3220   .text.reset_handler:0000000000001768 $t
    stm32eforth-fl.s:3224   .text.reset_handler:0000000000001778 $d
    stm32eforth-fl.s:3228   .text.reset_handler:0000000000001784 DOTO1
    stm32eforth-fl.s:3225   .text.reset_handler:000000000000177c $t
    stm32eforth-fl.s:3226   .text.reset_handler:0000000000001780 $d
    stm32eforth-fl.s:3229   .text.reset_handler:0000000000001784 $t
    stm32eforth-fl.s:3235   .text.reset_handler:000000000000178c $d
    stm32eforth-fl.s:3236   .text.reset_handler:0000000000001790 _QSTAC
    stm32eforth-fl.s:3239   .text.reset_handler:0000000000001798 QSTAC
    stm32eforth-fl.s:3244   .text.reset_handler:00000000000017a8 $d
    stm32eforth-fl.s:3252   .text.reset_handler:00000000000017b8 $d
    stm32eforth-fl.s:3253   .text.reset_handler:00000000000017bc _EVAL
    stm32eforth-fl.s:3256   .text.reset_handler:00000000000017c4 EVAL
    stm32eforth-fl.s:3258   .text.reset_handler:00000000000017c8 EVAL1
    stm32eforth-fl.s:3263   .text.reset_handler:00000000000017d8 $d
    stm32eforth-fl.s:3268   .text.reset_handler:00000000000017ec EVAL2
    stm32eforth-fl.s:3264   .text.reset_handler:00000000000017dc $t
    stm32eforth-fl.s:3276   .text.reset_handler:00000000000017f8 $d
    stm32eforth-fl.s:3277   .text.reset_handler:00000000000017fc _PRESE
ARM GAS  stm32eforth-fl.s 			page 101


    stm32eforth-fl.s:3291   .text.reset_handler:0000000000001812 $d
    stm32eforth-fl.s:3292   .text.reset_handler:0000000000001816 _QUIT
    stm32eforth-fl.s:3299   .text.reset_handler:0000000000001828 QUIT1
    stm32eforth-fl.s:3301   .text.reset_handler:000000000000182c QUIT2
    stm32eforth-fl.s:3305   .text.reset_handler:0000000000001838 $d
    stm32eforth-fl.s:3537   .text.reset_handler:0000000000001a9c flash_regs
    stm32eforth-fl.s:3311   .text.reset_handler:000000000000183c $t
    stm32eforth-fl.s:3324   .text.reset_handler:0000000000001856 WAIT_BSY
    stm32eforth-fl.s:3326   .text.reset_handler:0000000000001858 WAIT1
    stm32eforth-fl.s:3337   .text.reset_handler:0000000000001862 $d
    stm32eforth-fl.s:3338   .text.reset_handler:0000000000001866 _EPAGE
    stm32eforth-fl.s:3342   .text.reset_handler:0000000000001874 EPAGE
    stm32eforth-fl.s:3346   .text.reset_handler:0000000000001880 $d
    stm32eforth-fl.s:3347   .text.reset_handler:0000000000001884 $t
    stm32eforth-fl.s:3357   .text.reset_handler:00000000000018a2 $d
    stm32eforth-fl.s:3358   .text.reset_handler:00000000000018a6 $t
    stm32eforth-fl.s:3362   .text.reset_handler:00000000000018b4 $d
    stm32eforth-fl.s:3364   .text.reset_handler:00000000000018c2 $t
    stm32eforth-fl.s:3369   .text.reset_handler:00000000000018c8 HWORD_WRITE
    stm32eforth-fl.s:3382   .text.reset_handler:00000000000018ea $d
    stm32eforth-fl.s:3383   .text.reset_handler:00000000000018ee $t
    stm32eforth-fl.s:3384   .text.reset_handler:00000000000018f2 $d
    stm32eforth-fl.s:3386   .text.reset_handler:0000000000001900 $t
    stm32eforth-fl.s:3395   .text.reset_handler:0000000000001904 $d
    stm32eforth-fl.s:3396   .text.reset_handler:0000000000001908 _ISTOR
    stm32eforth-fl.s:3399   .text.reset_handler:000000000000190c ISTOR
    stm32eforth-fl.s:3403   .text.reset_handler:0000000000001918 $d
    stm32eforth-fl.s:3404   .text.reset_handler:000000000000191c $t
    stm32eforth-fl.s:3415   .text.reset_handler:0000000000001948 $d
    stm32eforth-fl.s:3416   .text.reset_handler:000000000000194c $t
    stm32eforth-fl.s:3424   .text.reset_handler:0000000000001954 $d
    stm32eforth-fl.s:3425   .text.reset_handler:0000000000001958 _ERASE_MPG
    stm32eforth-fl.s:3427   .text.reset_handler:0000000000001962 $t
    stm32eforth-fl.s:3428   .text.reset_handler:0000000000001964 ERASE_MPG
    stm32eforth-fl.s:3490   .text.reset_handler:0000000000001a14 PG_TO_ADR
    stm32eforth-fl.s:3433   .text.reset_handler:0000000000001974 $d
    stm32eforth-fl.s:3435   .text.reset_handler:0000000000001978 $t
    stm32eforth-fl.s:3442   .text.reset_handler:0000000000001990 $d
    stm32eforth-fl.s:3443   .text.reset_handler:0000000000001994 $t
    stm32eforth-fl.s:3448   .text.reset_handler:000000000000199c $d
    stm32eforth-fl.s:3449   .text.reset_handler:00000000000019a0 _FLSH_WR
    stm32eforth-fl.s:3452   .text.reset_handler:00000000000019a8 FLSH_WR
    stm32eforth-fl.s:3453   .text.reset_handler:00000000000019a8 $t
    stm32eforth-fl.s:3456   .text.reset_handler:00000000000019b4 $d
    stm32eforth-fl.s:3458   .text.reset_handler:00000000000019b8 $t
    stm32eforth-fl.s:3467   .text.reset_handler:00000000000019dc $d
    stm32eforth-fl.s:3468   .text.reset_handler:00000000000019e0 $t
    stm32eforth-fl.s:3475   .text.reset_handler:00000000000019f0 $d
    stm32eforth-fl.s:3476   .text.reset_handler:00000000000019f4 _ADR_TO_PG
    stm32eforth-fl.s:3479   .text.reset_handler:00000000000019fc ADR_TO_PG
    stm32eforth-fl.s:3486   .text.reset_handler:0000000000001a06 $d
    stm32eforth-fl.s:3487   .text.reset_handler:0000000000001a0a _PG_TO_ADR
    stm32eforth-fl.s:3498   .text.reset_handler:0000000000001a1e $d
    stm32eforth-fl.s:3499   .text.reset_handler:0000000000001a22 _TURNKEY
    stm32eforth-fl.s:3501   .text.reset_handler:0000000000001a2a $t
    stm32eforth-fl.s:3502   .text.reset_handler:0000000000001a2c TURNKEY
    stm32eforth-fl.s:3552   .text.reset_handler:0000000000001ab0 TICK
ARM GAS  stm32eforth-fl.s 			page 102


    stm32eforth-fl.s:3510   .text.reset_handler:0000000000001a40 $d
    stm32eforth-fl.s:3511   .text.reset_handler:0000000000001a44 _FORGET
    stm32eforth-fl.s:3514   .text.reset_handler:0000000000001a4c FORGET
    stm32eforth-fl.s:3520   .text.reset_handler:0000000000001a60 $d
    stm32eforth-fl.s:3521   .text.reset_handler:0000000000001a64 $t
    stm32eforth-fl.s:3524   .text.reset_handler:0000000000001a70 $d
    stm32eforth-fl.s:3525   .text.reset_handler:0000000000001a74 $t
    stm32eforth-fl.s:3995   .text.reset_handler:0000000000001edc OVERT
    stm32eforth-fl.s:3538   .text.reset_handler:0000000000001a9c $d
    stm32eforth-fl.s:3549   .text.reset_handler:0000000000001aac _TICK
    stm32eforth-fl.s:3551   .text.reset_handler:0000000000001aae $t
    stm32eforth-fl.s:3557   .text.reset_handler:0000000000001ac0 $d
    stm32eforth-fl.s:3559   .text.reset_handler:0000000000001ac8 TICK1
    stm32eforth-fl.s:3558   .text.reset_handler:0000000000001ac4 $t
    stm32eforth-fl.s:3564   .text.reset_handler:0000000000001acc $d
    stm32eforth-fl.s:3565   .text.reset_handler:0000000000001ad0 _ALLOT
    stm32eforth-fl.s:3567   .text.reset_handler:0000000000001ad6 $t
    stm32eforth-fl.s:3568   .text.reset_handler:0000000000001ad8 ALLOT
    stm32eforth-fl.s:3577   .text.reset_handler:0000000000001ae8 $d
    stm32eforth-fl.s:3578   .text.reset_handler:0000000000001aec _COMMA
    stm32eforth-fl.s:3579   .text.reset_handler:0000000000001aee $t
    stm32eforth-fl.s:3580   .text.reset_handler:0000000000001af0 COMMA
    stm32eforth-fl.s:3593   .text.reset_handler:0000000000001b10 $d
    stm32eforth-fl.s:3594   .text.reset_handler:0000000000001b14 _BCOMP
    stm32eforth-fl.s:3596   .text.reset_handler:0000000000001b1e $t
    stm32eforth-fl.s:3597   .text.reset_handler:0000000000001b20 BCOMP
    stm32eforth-fl.s:3606   .text.reset_handler:0000000000001b30 $d
    stm32eforth-fl.s:3607   .text.reset_handler:0000000000001b34 _COMPI
    stm32eforth-fl.s:3609   .text.reset_handler:0000000000001b3c $t
    stm32eforth-fl.s:3610   .text.reset_handler:0000000000001b3c COMPI
    stm32eforth-fl.s:4042   .text.reset_handler:0000000000001f38 CALLC
    stm32eforth-fl.s:3625   .text.reset_handler:0000000000001b64 $d
    stm32eforth-fl.s:3626   .text.reset_handler:0000000000001b68 _LITER
    stm32eforth-fl.s:3628   .text.reset_handler:0000000000001b70 $t
    stm32eforth-fl.s:3629   .text.reset_handler:0000000000001b70 LITER
    stm32eforth-fl.s:3632   .text.reset_handler:0000000000001b78 $d
    stm32eforth-fl.s:3633   .text.reset_handler:0000000000001b7c $t
    stm32eforth-fl.s:3643   .text.reset_handler:0000000000001b84 STRCQ
    stm32eforth-fl.s:3646   .text.reset_handler:0000000000001b8c $d
    stm32eforth-fl.s:3647   .text.reset_handler:0000000000001b90 $t
    stm32eforth-fl.s:3650   .text.reset_handler:0000000000001b9c $d
    stm32eforth-fl.s:3651   .text.reset_handler:0000000000001ba0 $t
    stm32eforth-fl.s:3665   .text.reset_handler:0000000000001bbc $d
    stm32eforth-fl.s:3666   .text.reset_handler:0000000000001bc0 _FOR
    stm32eforth-fl.s:3668   .text.reset_handler:0000000000001bc4 $t
    stm32eforth-fl.s:3669   .text.reset_handler:0000000000001bc4 FOR
    stm32eforth-fl.s:3672   .text.reset_handler:0000000000001bcc $d
    stm32eforth-fl.s:3673   .text.reset_handler:0000000000001bd0 $t
    stm32eforth-fl.s:3679   .text.reset_handler:0000000000001bd8 $d
    stm32eforth-fl.s:3680   .text.reset_handler:0000000000001bdc _BEGIN
    stm32eforth-fl.s:3682   .text.reset_handler:0000000000001be2 $t
    stm32eforth-fl.s:3683   .text.reset_handler:0000000000001be4 BEGIN
    stm32eforth-fl.s:3691   .text.reset_handler:0000000000001bf0 $d
    stm32eforth-fl.s:3692   .text.reset_handler:0000000000001bf4 _NEXT
    stm32eforth-fl.s:3695   .text.reset_handler:0000000000001bfc NEXT
    stm32eforth-fl.s:3698   .text.reset_handler:0000000000001c04 $d
    stm32eforth-fl.s:3699   .text.reset_handler:0000000000001c08 $t
ARM GAS  stm32eforth-fl.s 			page 103


    stm32eforth-fl.s:3705   .text.reset_handler:0000000000001c10 $d
    stm32eforth-fl.s:3706   .text.reset_handler:0000000000001c14 _UNTIL
    stm32eforth-fl.s:3708   .text.reset_handler:0000000000001c1a $t
    stm32eforth-fl.s:3709   .text.reset_handler:0000000000001c1c UNTIL
    stm32eforth-fl.s:3712   .text.reset_handler:0000000000001c24 $d
    stm32eforth-fl.s:3713   .text.reset_handler:0000000000001c28 $t
    stm32eforth-fl.s:3719   .text.reset_handler:0000000000001c30 $d
    stm32eforth-fl.s:3720   .text.reset_handler:0000000000001c34 _AGAIN
    stm32eforth-fl.s:3722   .text.reset_handler:0000000000001c3a $t
    stm32eforth-fl.s:3723   .text.reset_handler:0000000000001c3c AGAIN
    stm32eforth-fl.s:3726   .text.reset_handler:0000000000001c44 $d
    stm32eforth-fl.s:3727   .text.reset_handler:0000000000001c48 $t
    stm32eforth-fl.s:3733   .text.reset_handler:0000000000001c50 $d
    stm32eforth-fl.s:3734   .text.reset_handler:0000000000001c54 _IFF
    stm32eforth-fl.s:3737   .text.reset_handler:0000000000001c58 IFF
    stm32eforth-fl.s:3740   .text.reset_handler:0000000000001c60 $d
    stm32eforth-fl.s:3741   .text.reset_handler:0000000000001c64 $t
    stm32eforth-fl.s:3743   .text.reset_handler:0000000000001c6c $d
    stm32eforth-fl.s:3744   .text.reset_handler:0000000000001c70 $t
    stm32eforth-fl.s:3751   .text.reset_handler:0000000000001c7c $d
    stm32eforth-fl.s:3752   .text.reset_handler:0000000000001c80 _AHEAD
    stm32eforth-fl.s:3754   .text.reset_handler:0000000000001c86 $t
    stm32eforth-fl.s:3755   .text.reset_handler:0000000000001c88 AHEAD
    stm32eforth-fl.s:3758   .text.reset_handler:0000000000001c90 $d
    stm32eforth-fl.s:3759   .text.reset_handler:0000000000001c94 $t
    stm32eforth-fl.s:3761   .text.reset_handler:0000000000001c9c $d
    stm32eforth-fl.s:3762   .text.reset_handler:0000000000001ca0 $t
    stm32eforth-fl.s:3769   .text.reset_handler:0000000000001cac $d
    stm32eforth-fl.s:3770   .text.reset_handler:0000000000001cb0 _REPEA
    stm32eforth-fl.s:3773   .text.reset_handler:0000000000001cb8 REPEA
    stm32eforth-fl.s:3784   .text.reset_handler:0000000000001cd0 $d
    stm32eforth-fl.s:3785   .text.reset_handler:0000000000001cd4 _THENN
    stm32eforth-fl.s:3788   .text.reset_handler:0000000000001cdc THENN
    stm32eforth-fl.s:3798   .text.reset_handler:0000000000001cf0 $d
    stm32eforth-fl.s:3799   .text.reset_handler:0000000000001cf4 _AFT
    stm32eforth-fl.s:3801   .text.reset_handler:0000000000001cf8 $t
    stm32eforth-fl.s:3802   .text.reset_handler:0000000000001cf8 AFT
    stm32eforth-fl.s:3813   .text.reset_handler:0000000000001d10 $d
    stm32eforth-fl.s:3814   .text.reset_handler:0000000000001d14 _ELSEE
    stm32eforth-fl.s:3817   .text.reset_handler:0000000000001d1c ELSEE
    stm32eforth-fl.s:3827   .text.reset_handler:0000000000001d30 $d
    stm32eforth-fl.s:3828   .text.reset_handler:0000000000001d34 _WHILE
    stm32eforth-fl.s:3830   .text.reset_handler:0000000000001d3a $t
    stm32eforth-fl.s:3831   .text.reset_handler:0000000000001d3c WHILE
    stm32eforth-fl.s:3840   .text.reset_handler:0000000000001d4c $d
    stm32eforth-fl.s:3841   .text.reset_handler:0000000000001d50 _ABRTQ
    stm32eforth-fl.s:3844   .text.reset_handler:0000000000001d58 ABRTQ
    stm32eforth-fl.s:3847   .text.reset_handler:0000000000001d60 $d
    stm32eforth-fl.s:3848   .text.reset_handler:0000000000001d64 $t
    stm32eforth-fl.s:3854   .text.reset_handler:0000000000001d6c $d
    stm32eforth-fl.s:3855   .text.reset_handler:0000000000001d70 _STRQ
    stm32eforth-fl.s:3858   .text.reset_handler:0000000000001d74 STRQ
    stm32eforth-fl.s:3861   .text.reset_handler:0000000000001d7c $d
    stm32eforth-fl.s:3862   .text.reset_handler:0000000000001d80 $t
    stm32eforth-fl.s:3868   .text.reset_handler:0000000000001d88 $d
    stm32eforth-fl.s:3869   .text.reset_handler:0000000000001d8c _DOTQ
    stm32eforth-fl.s:3872   .text.reset_handler:0000000000001d90 DOTQ
ARM GAS  stm32eforth-fl.s 			page 104


    stm32eforth-fl.s:3875   .text.reset_handler:0000000000001d98 $d
    stm32eforth-fl.s:3876   .text.reset_handler:0000000000001d9c $t
    stm32eforth-fl.s:3885   .text.reset_handler:0000000000001da4 $d
    stm32eforth-fl.s:3886   .text.reset_handler:0000000000001da8 _UNIQU
    stm32eforth-fl.s:3888   .text.reset_handler:0000000000001db0 $t
    stm32eforth-fl.s:3889   .text.reset_handler:0000000000001db0 UNIQU
    stm32eforth-fl.s:3894   .text.reset_handler:0000000000001dc0 $d
    stm32eforth-fl.s:3902   .text.reset_handler:0000000000001ddc UNIQ1
    stm32eforth-fl.s:3895   .text.reset_handler:0000000000001dc4 $t
    stm32eforth-fl.s:3896   .text.reset_handler:0000000000001dc8 $d
    stm32eforth-fl.s:3898   .text.reset_handler:0000000000001dd0 $t
    stm32eforth-fl.s:3913   .text.reset_handler:0000000000001de4 SNAME
    stm32eforth-fl.s:3918   .text.reset_handler:0000000000001df4 $d
    stm32eforth-fl.s:3932   .text.reset_handler:0000000000001e2c SNAM1
    stm32eforth-fl.s:3919   .text.reset_handler:0000000000001df8 $t
    stm32eforth-fl.s:3934   .text.reset_handler:0000000000001e30 $d
    stm32eforth-fl.s:3936   .text.reset_handler:0000000000001e38 $t
    stm32eforth-fl.s:3941   .text.reset_handler:0000000000001e3c $d
    stm32eforth-fl.s:3942   .text.reset_handler:0000000000001e40 _SCOMP
    stm32eforth-fl.s:3944   .text.reset_handler:0000000000001e4a $t
    stm32eforth-fl.s:3945   .text.reset_handler:0000000000001e4c SCOMP
    stm32eforth-fl.s:3950   .text.reset_handler:0000000000001e5c $d
    stm32eforth-fl.s:3962   .text.reset_handler:0000000000001e88 SCOM2
    stm32eforth-fl.s:3951   .text.reset_handler:0000000000001e60 $t
    stm32eforth-fl.s:3953   .text.reset_handler:0000000000001e68 $d
    stm32eforth-fl.s:3954   .text.reset_handler:0000000000001e6c $t
    stm32eforth-fl.s:3956   .text.reset_handler:0000000000001e74 $d
    stm32eforth-fl.s:3959   .text.reset_handler:0000000000001e80 SCOM1
    stm32eforth-fl.s:3957   .text.reset_handler:0000000000001e78 $t
    stm32eforth-fl.s:3965   .text.reset_handler:0000000000001e90 $d
    stm32eforth-fl.s:3968   .text.reset_handler:0000000000001e9c SCOM3
    stm32eforth-fl.s:3966   .text.reset_handler:0000000000001e94 $t
    stm32eforth-fl.s:3975   .text.reset_handler:0000000000001ea4 COLON_ABORT
    stm32eforth-fl.s:3991   .text.reset_handler:0000000000001ed0 $d
    stm32eforth-fl.s:3992   .text.reset_handler:0000000000001ed4 _OVERT
    stm32eforth-fl.s:3994   .text.reset_handler:0000000000001eda $t
    stm32eforth-fl.s:4006   .text.reset_handler:0000000000001ef4 $d
    stm32eforth-fl.s:4007   .text.reset_handler:0000000000001ef8 _SEMIS
    stm32eforth-fl.s:4009   .text.reset_handler:0000000000001efa $t
    stm32eforth-fl.s:4010   .text.reset_handler:0000000000001efc SEMIS
    stm32eforth-fl.s:4022   .text.reset_handler:0000000000001f18 $d
    stm32eforth-fl.s:4023   .text.reset_handler:0000000000001f1c _RBRAC
    stm32eforth-fl.s:4025   .text.reset_handler:0000000000001f1e $t
    stm32eforth-fl.s:4026   .text.reset_handler:0000000000001f20 RBRAC
    stm32eforth-fl.s:4029   .text.reset_handler:0000000000001f28 $d
    stm32eforth-fl.s:4030   .text.reset_handler:0000000000001f2c $t
    stm32eforth-fl.s:4063   .text.reset_handler:0000000000001f72 $d
    stm32eforth-fl.s:4064   .text.reset_handler:0000000000001f76 _COLON
    stm32eforth-fl.s:4066   .text.reset_handler:0000000000001f78 $t
    stm32eforth-fl.s:4067   .text.reset_handler:0000000000001f78 COLON
    stm32eforth-fl.s:4080   .text.reset_handler:0000000000001f98 $d
    stm32eforth-fl.s:4081   .text.reset_handler:0000000000001f9c _IMMED
    stm32eforth-fl.s:4083   .text.reset_handler:0000000000001fa6 $t
    stm32eforth-fl.s:4084   .text.reset_handler:0000000000001fa8 IMMED
    stm32eforth-fl.s:4087   .text.reset_handler:0000000000001fb0 $d
    stm32eforth-fl.s:4088   .text.reset_handler:0000000000001fb4 $t
    stm32eforth-fl.s:4103   .text.reset_handler:0000000000001fd4 $d
ARM GAS  stm32eforth-fl.s 			page 105


    stm32eforth-fl.s:4104   .text.reset_handler:0000000000001fd8 _CONST
    stm32eforth-fl.s:4107   .text.reset_handler:0000000000001fe4 CONST
    stm32eforth-fl.s:4116   .text.reset_handler:0000000000002004 $d
    stm32eforth-fl.s:4117   .text.reset_handler:0000000000002008 $t
    stm32eforth-fl.s:4124   .text.reset_handler:0000000000002014 $d
    stm32eforth-fl.s:4125   .text.reset_handler:0000000000002018 _CREAT
    stm32eforth-fl.s:4128   .text.reset_handler:0000000000002020 CREAT
    stm32eforth-fl.s:4137   .text.reset_handler:0000000000002040 $d
    stm32eforth-fl.s:4138   .text.reset_handler:0000000000002044 $t
    stm32eforth-fl.s:4144   .text.reset_handler:000000000000204c $d
    stm32eforth-fl.s:4145   .text.reset_handler:0000000000002050 _VARIA
    stm32eforth-fl.s:4148   .text.reset_handler:000000000000205c VARIA
    stm32eforth-fl.s:4152   .text.reset_handler:0000000000002068 $d
    stm32eforth-fl.s:4153   .text.reset_handler:000000000000206c $t
    stm32eforth-fl.s:4166   .text.reset_handler:0000000000002074 DMP
    stm32eforth-fl.s:4170   .text.reset_handler:0000000000002080 $d
    stm32eforth-fl.s:4171   .text.reset_handler:0000000000002084 $t
    stm32eforth-fl.s:4182   .text.reset_handler:00000000000020ac PDUM2
    stm32eforth-fl.s:4175   .text.reset_handler:0000000000002094 PDUM1
    stm32eforth-fl.s:4179   .text.reset_handler:00000000000020a0 $d
    stm32eforth-fl.s:4180   .text.reset_handler:00000000000020a4 $t
    stm32eforth-fl.s:4184   .text.reset_handler:00000000000020b0 $d
    stm32eforth-fl.s:4185   .text.reset_handler:00000000000020b4 $t
    stm32eforth-fl.s:4190   .text.reset_handler:00000000000020b8 $d
    stm32eforth-fl.s:4191   .text.reset_handler:00000000000020bc _DUMP
    stm32eforth-fl.s:4194   .text.reset_handler:00000000000020c4 DUMP
    stm32eforth-fl.s:4201   .text.reset_handler:00000000000020dc $d
    stm32eforth-fl.s:4202   .text.reset_handler:00000000000020e0 $t
    stm32eforth-fl.s:4216   .text.reset_handler:0000000000002114 DUMP4
    stm32eforth-fl.s:4205   .text.reset_handler:00000000000020ec DUMP1
    stm32eforth-fl.s:4208   .text.reset_handler:00000000000020f4 $d
    stm32eforth-fl.s:4209   .text.reset_handler:00000000000020f8 $t
    stm32eforth-fl.s:4218   .text.reset_handler:0000000000002118 $d
    stm32eforth-fl.s:4219   .text.reset_handler:000000000000211c DUMP3
    stm32eforth-fl.s:4220   .text.reset_handler:000000000000211c $t
    stm32eforth-fl.s:4229   .text.reset_handler:0000000000002130 $d
    stm32eforth-fl.s:4230   .text.reset_handler:0000000000002134 _DOTS
    stm32eforth-fl.s:4234   .text.reset_handler:0000000000002138 DOTS
    stm32eforth-fl.s:4244   .text.reset_handler:0000000000002158 DOTS2
    stm32eforth-fl.s:4240   .text.reset_handler:000000000000214c DOTS1
    stm32eforth-fl.s:4246   .text.reset_handler:000000000000215c $d
    stm32eforth-fl.s:4247   .text.reset_handler:0000000000002160 $t
    stm32eforth-fl.s:4253   .text.reset_handler:0000000000002168 $d
    stm32eforth-fl.s:4254   .text.reset_handler:000000000000216c _TNAME
    stm32eforth-fl.s:4256   .text.reset_handler:0000000000002172 $t
    stm32eforth-fl.s:4257   .text.reset_handler:0000000000002174 TNAME
    stm32eforth-fl.s:4262   .text.reset_handler:0000000000002184 TNAM1
    stm32eforth-fl.s:4265   .text.reset_handler:000000000000218c $d
    stm32eforth-fl.s:4275   .text.reset_handler:00000000000021b4 TNAM2
    stm32eforth-fl.s:4266   .text.reset_handler:0000000000002190 $t
    stm32eforth-fl.s:4271   .text.reset_handler:00000000000021a4 $d
    stm32eforth-fl.s:4272   .text.reset_handler:00000000000021a8 $t
    stm32eforth-fl.s:4283   .text.reset_handler:00000000000021c0 $d
    stm32eforth-fl.s:4284   .text.reset_handler:00000000000021c4 _DOTID
    stm32eforth-fl.s:4286   .text.reset_handler:00000000000021c8 $t
    stm32eforth-fl.s:4287   .text.reset_handler:00000000000021c8 DOTID
    stm32eforth-fl.s:4291   .text.reset_handler:00000000000021d4 $d
ARM GAS  stm32eforth-fl.s 			page 106


    stm32eforth-fl.s:4298   .text.reset_handler:00000000000021f0 DOTI1
    stm32eforth-fl.s:4292   .text.reset_handler:00000000000021d8 $t
    stm32eforth-fl.s:4294   .text.reset_handler:00000000000021e0 $d
    stm32eforth-fl.s:4295   .text.reset_handler:00000000000021e4 $t
    stm32eforth-fl.s:4300   .text.reset_handler:00000000000021f4 $d
    stm32eforth-fl.s:4302   .text.reset_handler:00000000000021fe $t
    stm32eforth-fl.s:4305   *ABS*:0000000000000000 WANT_SEE
    stm32eforth-fl.s:4389   .text.reset_handler:0000000000002204 $d
    stm32eforth-fl.s:4391   .text.reset_handler:0000000000002208 _WORDS
    stm32eforth-fl.s:4393   .text.reset_handler:000000000000220e $t
    stm32eforth-fl.s:4394   .text.reset_handler:0000000000002210 WORDS
    stm32eforth-fl.s:4399   .text.reset_handler:0000000000002220 WORS1
    stm32eforth-fl.s:4402   .text.reset_handler:0000000000002228 $d
    stm32eforth-fl.s:4409   .text.reset_handler:0000000000002244 WORS2
    stm32eforth-fl.s:4403   .text.reset_handler:000000000000222c $t
    stm32eforth-fl.s:4422   .text.reset_handler:0000000000002248 VERSN
    stm32eforth-fl.s:4425   .text.reset_handler:0000000000002250 $d
    stm32eforth-fl.s:4426   .text.reset_handler:0000000000002254 $t
    stm32eforth-fl.s:4431   .text.reset_handler:0000000000002258 $d
    stm32eforth-fl.s:4432   .text.reset_handler:000000000000225c _HI
    stm32eforth-fl.s:4439   .text.reset_handler:000000000000226c $d
    stm32eforth-fl.s:4441   .text.reset_handler:0000000000002284 $t
    stm32eforth-fl.s:4450   .text.reset_handler:00000000000022a4 $d
    stm32eforth-fl.s:4451   .text.reset_handler:00000000000022a8 $t
    stm32eforth-fl.s:4463   .text.reset_handler:00000000000022c8 $d
    stm32eforth-fl.s:4469   .text.reset_handler:00000000000022d4 $t
    stm32eforth-fl.s:4476   .text.reset_handler:00000000000022ee COLD1
    stm32eforth-fl.s:4478   .text.reset_handler:00000000000022f2 $d
    stm32eforth-fl.s:4479   .text.reset_handler:00000000000022f6 $t
    stm32eforth-fl.s:4481   .text.reset_handler:00000000000022fe $d
    stm32eforth-fl.s:4482   .text.reset_handler:0000000000002302 $t
    stm32eforth-fl.s:4483   .text.reset_handler:0000000000002306 $d
    stm32eforth-fl.s:4484   .text.reset_handler:000000000000230a $t
    stm32eforth-fl.s:4485   .text.reset_handler:000000000000230e $d
    stm32eforth-fl.s:4486   .text.reset_handler:0000000000002312 $t
    stm32eforth-fl.s:4492   .text.reset_handler:000000000000232a COLD2
    stm32eforth-fl.s:4496   .text.reset_handler:0000000000002400 $d
    stm32eforth-fl.s:4499   .bss:0000000000000000 SYSTEM_VARS
    stm32eforth-fl.s:4499   .bss:0000000000000000 $d
    stm32eforth-fl.s:4500   .bss:0000000000000050 FLASH_BUFFER
    stm32eforth-fl.s:286    .text.default_handler:0000000000000033 $d
    stm32eforth-fl.s:286    .text.default_handler:0000000000000034 $t
    stm32eforth-fl.s:500    .text.reset_handler:0000000000000127 $d
    stm32eforth-fl.s:500    .text.reset_handler:0000000000000128 $t
    stm32eforth-fl.s:524    .text.reset_handler:0000000000000173 $d
    stm32eforth-fl.s:524    .text.reset_handler:0000000000000174 $t
    stm32eforth-fl.s:560    .text.reset_handler:00000000000001c5 $d
    stm32eforth-fl.s:560    .text.reset_handler:00000000000001c6 $t
    stm32eforth-fl.s:580    .text.reset_handler:00000000000001ed $d
    stm32eforth-fl.s:580    .text.reset_handler:00000000000001ee $t
    stm32eforth-fl.s:605    .text.reset_handler:0000000000000221 $d
    stm32eforth-fl.s:605    .text.reset_handler:0000000000000222 $t
    stm32eforth-fl.s:719    .text.reset_handler:00000000000002b7 $d
    stm32eforth-fl.s:719    .text.reset_handler:00000000000002b8 $t
    stm32eforth-fl.s:753    .text.reset_handler:00000000000002e3 $d
    stm32eforth-fl.s:753    .text.reset_handler:00000000000002e4 $t
    stm32eforth-fl.s:766    .text.reset_handler:00000000000002f7 $d
ARM GAS  stm32eforth-fl.s 			page 107


    stm32eforth-fl.s:766    .text.reset_handler:00000000000002f8 $t
    stm32eforth-fl.s:777    .text.reset_handler:0000000000000303 $d
    stm32eforth-fl.s:777    .text.reset_handler:0000000000000304 $t
    stm32eforth-fl.s:789    .text.reset_handler:0000000000000315 $d
    stm32eforth-fl.s:789    .text.reset_handler:0000000000000316 $t
    stm32eforth-fl.s:801    .text.reset_handler:0000000000000327 $d
    stm32eforth-fl.s:801    .text.reset_handler:0000000000000328 $t
    stm32eforth-fl.s:825    .text.reset_handler:000000000000034d $d
    stm32eforth-fl.s:825    .text.reset_handler:000000000000034e $t
    stm32eforth-fl.s:847    .text.reset_handler:000000000000036f $d
    stm32eforth-fl.s:847    .text.reset_handler:0000000000000370 $t
    stm32eforth-fl.s:860    .text.reset_handler:0000000000000381 $d
    stm32eforth-fl.s:860    .text.reset_handler:0000000000000382 $t
    stm32eforth-fl.s:872    .text.reset_handler:0000000000000393 $d
    stm32eforth-fl.s:872    .text.reset_handler:0000000000000394 $t
    stm32eforth-fl.s:896    .text.reset_handler:00000000000003b9 $d
    stm32eforth-fl.s:896    .text.reset_handler:00000000000003ba $t
    stm32eforth-fl.s:935    .text.reset_handler:00000000000003ff $d
    stm32eforth-fl.s:935    .text.reset_handler:0000000000000400 $t
    stm32eforth-fl.s:947    .text.reset_handler:0000000000000415 $d
    stm32eforth-fl.s:947    .text.reset_handler:0000000000000416 $t
    stm32eforth-fl.s:1009   .text.reset_handler:000000000000046f $d
    stm32eforth-fl.s:1009   .text.reset_handler:0000000000000470 $t
    stm32eforth-fl.s:1023   .text.reset_handler:0000000000000483 $d
    stm32eforth-fl.s:1023   .text.reset_handler:0000000000000484 $t
    stm32eforth-fl.s:1034   .text.reset_handler:0000000000000491 $d
    stm32eforth-fl.s:1034   .text.reset_handler:0000000000000492 $t
    stm32eforth-fl.s:1045   .text.reset_handler:00000000000004a1 $d
    stm32eforth-fl.s:1045   .text.reset_handler:00000000000004a2 $t
    stm32eforth-fl.s:1056   .text.reset_handler:00000000000004b1 $d
    stm32eforth-fl.s:1056   .text.reset_handler:00000000000004b2 $t
    stm32eforth-fl.s:1089   .text.reset_handler:00000000000004e1 $d
    stm32eforth-fl.s:1089   .text.reset_handler:00000000000004e2 $t
    stm32eforth-fl.s:1123   .text.reset_handler:0000000000000515 $d
    stm32eforth-fl.s:1123   .text.reset_handler:0000000000000516 $t
    stm32eforth-fl.s:1134   .text.reset_handler:0000000000000525 $d
    stm32eforth-fl.s:1134   .text.reset_handler:0000000000000526 $t
    stm32eforth-fl.s:1145   .text.reset_handler:0000000000000537 $d
    stm32eforth-fl.s:1145   .text.reset_handler:0000000000000538 $t
    stm32eforth-fl.s:1184   .text.reset_handler:0000000000000573 $d
    stm32eforth-fl.s:1184   .text.reset_handler:0000000000000574 $t
    stm32eforth-fl.s:1197   .text.reset_handler:0000000000000587 $d
    stm32eforth-fl.s:1197   .text.reset_handler:0000000000000588 $t
    stm32eforth-fl.s:1224   .text.reset_handler:00000000000005b5 $d
    stm32eforth-fl.s:1224   .text.reset_handler:00000000000005b6 $t
    stm32eforth-fl.s:1248   .text.reset_handler:00000000000005d9 $d
    stm32eforth-fl.s:1248   .text.reset_handler:00000000000005da $t
    stm32eforth-fl.s:1277   .text.reset_handler:0000000000000607 $d
    stm32eforth-fl.s:1277   .text.reset_handler:0000000000000608 $t
    stm32eforth-fl.s:1350   .text.reset_handler:0000000000000677 $d
    stm32eforth-fl.s:1350   .text.reset_handler:0000000000000678 $t
    stm32eforth-fl.s:1365   .text.reset_handler:000000000000068f $d
    stm32eforth-fl.s:1365   .text.reset_handler:0000000000000690 $t
    stm32eforth-fl.s:1380   .text.reset_handler:00000000000006ab $d
    stm32eforth-fl.s:1380   .text.reset_handler:00000000000006ac $t
    stm32eforth-fl.s:1452   .text.reset_handler:0000000000000709 $d
    stm32eforth-fl.s:1452   .text.reset_handler:000000000000070a $t
ARM GAS  stm32eforth-fl.s 			page 108


    stm32eforth-fl.s:1463   .text.reset_handler:000000000000071f $d
    stm32eforth-fl.s:1463   .text.reset_handler:0000000000000720 $t
    stm32eforth-fl.s:1498   .text.reset_handler:000000000000075b $d
    stm32eforth-fl.s:1498   .text.reset_handler:000000000000075c $t
    stm32eforth-fl.s:1522   .text.reset_handler:0000000000000779 $d
    stm32eforth-fl.s:1522   .text.reset_handler:000000000000077a $t
    stm32eforth-fl.s:1546   .text.reset_handler:00000000000007a3 $d
    stm32eforth-fl.s:1546   .text.reset_handler:00000000000007a4 $t
    stm32eforth-fl.s:1595   .text.reset_handler:00000000000007f5 $d
    stm32eforth-fl.s:1595   .text.reset_handler:00000000000007f6 $t
    stm32eforth-fl.s:1606   .text.reset_handler:000000000000080b $d
    stm32eforth-fl.s:1606   .text.reset_handler:000000000000080c $t
    stm32eforth-fl.s:1618   .text.reset_handler:000000000000081f $d
    stm32eforth-fl.s:1618   .text.reset_handler:0000000000000820 $t
    stm32eforth-fl.s:1633   .text.reset_handler:0000000000000839 $d
    stm32eforth-fl.s:1633   .text.reset_handler:000000000000083a $t
    stm32eforth-fl.s:1646   .text.reset_handler:0000000000000855 $d
    stm32eforth-fl.s:1646   .text.reset_handler:0000000000000856 $t
    stm32eforth-fl.s:1663   .text.reset_handler:0000000000000871 $d
    stm32eforth-fl.s:1663   .text.reset_handler:0000000000000872 $t
    stm32eforth-fl.s:1682   .text.reset_handler:000000000000089f $d
    stm32eforth-fl.s:1682   .text.reset_handler:00000000000008a0 $t
    stm32eforth-fl.s:1752   .text.reset_handler:000000000000094d $d
    stm32eforth-fl.s:1752   .text.reset_handler:000000000000094e $t
    stm32eforth-fl.s:1809   .text.reset_handler:00000000000009c7 $d
    stm32eforth-fl.s:1809   .text.reset_handler:00000000000009c8 $t
    stm32eforth-fl.s:1881   .text.reset_handler:0000000000000a6f $d
    stm32eforth-fl.s:1881   .text.reset_handler:0000000000000a70 $t
    stm32eforth-fl.s:1900   .text.reset_handler:0000000000000a95 $d
    stm32eforth-fl.s:1900   .text.reset_handler:0000000000000a96 $t
    stm32eforth-fl.s:1950   .text.reset_handler:0000000000000af9 $d
    stm32eforth-fl.s:1950   .text.reset_handler:0000000000000afa $t
    stm32eforth-fl.s:1989   .text.reset_handler:0000000000000b43 $d
    stm32eforth-fl.s:1989   .text.reset_handler:0000000000000b44 $t
    stm32eforth-fl.s:2013   .text.reset_handler:0000000000000b73 $d
    stm32eforth-fl.s:2013   .text.reset_handler:0000000000000b74 $t
    stm32eforth-fl.s:2036   .text.reset_handler:0000000000000b9f $d
    stm32eforth-fl.s:2036   .text.reset_handler:0000000000000ba0 $t
    stm32eforth-fl.s:2105   .text.reset_handler:0000000000000c5b $d
    stm32eforth-fl.s:2105   .text.reset_handler:0000000000000c5c $t
    stm32eforth-fl.s:2119   .text.reset_handler:0000000000000c79 $d
    stm32eforth-fl.s:2119   .text.reset_handler:0000000000000c7a $t
    stm32eforth-fl.s:2152   .text.reset_handler:0000000000000cc7 $d
    stm32eforth-fl.s:2152   .text.reset_handler:0000000000000cc8 $t
    stm32eforth-fl.s:2170   .text.reset_handler:0000000000000ceb $d
    stm32eforth-fl.s:2170   .text.reset_handler:0000000000000cec $t
    stm32eforth-fl.s:2188   .text.reset_handler:0000000000000d13 $d
    stm32eforth-fl.s:2188   .text.reset_handler:0000000000000d14 $t
    stm32eforth-fl.s:2257   .text.reset_handler:0000000000000dab $d
    stm32eforth-fl.s:2257   .text.reset_handler:0000000000000dac $t
    stm32eforth-fl.s:2419   .text.reset_handler:0000000000000f9f $d
    stm32eforth-fl.s:2419   .text.reset_handler:0000000000000fa0 $t
    stm32eforth-fl.s:2440   .text.reset_handler:0000000000000fd1 $d
    stm32eforth-fl.s:2440   .text.reset_handler:0000000000000fd2 $t
    stm32eforth-fl.s:2461   .text.reset_handler:0000000000001001 $d
    stm32eforth-fl.s:2461   .text.reset_handler:0000000000001002 $t
    stm32eforth-fl.s:2540   .text.reset_handler:000000000000108b $d
ARM GAS  stm32eforth-fl.s 			page 109


    stm32eforth-fl.s:2540   .text.reset_handler:000000000000108c $t
    stm32eforth-fl.s:2578   .text.reset_handler:00000000000010eb $d
    stm32eforth-fl.s:2578   .text.reset_handler:00000000000010ec $t
    stm32eforth-fl.s:2748   .text.reset_handler:00000000000012cf $d
    stm32eforth-fl.s:2748   .text.reset_handler:00000000000012d0 $t
    stm32eforth-fl.s:2793   .text.reset_handler:0000000000001331 $d
    stm32eforth-fl.s:2793   .text.reset_handler:0000000000001332 $t
    stm32eforth-fl.s:2808   .text.reset_handler:0000000000001355 $d
    stm32eforth-fl.s:2808   .text.reset_handler:0000000000001356 $t
    stm32eforth-fl.s:3063   .text.reset_handler:00000000000015d3 $d
    stm32eforth-fl.s:3063   .text.reset_handler:00000000000015d4 $t
    stm32eforth-fl.s:3238   .text.reset_handler:0000000000001797 $d
    stm32eforth-fl.s:3238   .text.reset_handler:0000000000001798 $t
    stm32eforth-fl.s:3246   .text.reset_handler:00000000000017b3 $d
    stm32eforth-fl.s:3246   .text.reset_handler:00000000000017b4 $t
    stm32eforth-fl.s:3255   .text.reset_handler:00000000000017c1 $d
    stm32eforth-fl.s:3255   .text.reset_handler:00000000000017c2 $t
    stm32eforth-fl.s:3279   .text.reset_handler:0000000000001803 $d
    stm32eforth-fl.s:3279   .text.reset_handler:0000000000001804 $t
    stm32eforth-fl.s:3294   .text.reset_handler:000000000000181b $d
    stm32eforth-fl.s:3294   .text.reset_handler:000000000000181c $t
    stm32eforth-fl.s:3340   .text.reset_handler:0000000000001871 $d
    stm32eforth-fl.s:3340   .text.reset_handler:0000000000001872 $t
    stm32eforth-fl.s:3398   .text.reset_handler:000000000000190b $d
    stm32eforth-fl.s:3398   .text.reset_handler:000000000000190c $t
    stm32eforth-fl.s:3478   .text.reset_handler:00000000000019fb $d
    stm32eforth-fl.s:3478   .text.reset_handler:00000000000019fc $t
    stm32eforth-fl.s:3489   .text.reset_handler:0000000000001a11 $d
    stm32eforth-fl.s:3489   .text.reset_handler:0000000000001a12 $t
    stm32eforth-fl.s:3513   .text.reset_handler:0000000000001a4b $d
    stm32eforth-fl.s:3513   .text.reset_handler:0000000000001a4c $t
    stm32eforth-fl.s:3694   .text.reset_handler:0000000000001bf9 $d
    stm32eforth-fl.s:3694   .text.reset_handler:0000000000001bfa $t
    stm32eforth-fl.s:3736   .text.reset_handler:0000000000001c57 $d
    stm32eforth-fl.s:3736   .text.reset_handler:0000000000001c58 $t
    stm32eforth-fl.s:3772   .text.reset_handler:0000000000001cb7 $d
    stm32eforth-fl.s:3772   .text.reset_handler:0000000000001cb8 $t
    stm32eforth-fl.s:3787   .text.reset_handler:0000000000001cd9 $d
    stm32eforth-fl.s:3787   .text.reset_handler:0000000000001cda $t
    stm32eforth-fl.s:3816   .text.reset_handler:0000000000001d19 $d
    stm32eforth-fl.s:3816   .text.reset_handler:0000000000001d1a $t
    stm32eforth-fl.s:3843   .text.reset_handler:0000000000001d57 $d
    stm32eforth-fl.s:3843   .text.reset_handler:0000000000001d58 $t
    stm32eforth-fl.s:3857   .text.reset_handler:0000000000001d73 $d
    stm32eforth-fl.s:3857   .text.reset_handler:0000000000001d74 $t
    stm32eforth-fl.s:3871   .text.reset_handler:0000000000001d8f $d
    stm32eforth-fl.s:3871   .text.reset_handler:0000000000001d90 $t
    stm32eforth-fl.s:4106   .text.reset_handler:0000000000001fe1 $d
    stm32eforth-fl.s:4106   .text.reset_handler:0000000000001fe2 $t
    stm32eforth-fl.s:4127   .text.reset_handler:000000000000201f $d
    stm32eforth-fl.s:4127   .text.reset_handler:0000000000002020 $t
    stm32eforth-fl.s:4147   .text.reset_handler:0000000000002059 $d
    stm32eforth-fl.s:4147   .text.reset_handler:000000000000205a $t
    stm32eforth-fl.s:4193   .text.reset_handler:00000000000020c1 $d
    stm32eforth-fl.s:4193   .text.reset_handler:00000000000020c2 $t
    stm32eforth-fl.s:4233   .text.reset_handler:0000000000002137 $d
    stm32eforth-fl.s:4233   .text.reset_handler:0000000000002138 $t
ARM GAS  stm32eforth-fl.s 			page 110


    stm32eforth-fl.s:4434   .text.reset_handler:000000000000225f $d
    stm32eforth-fl.s:4434   .text.reset_handler:0000000000002260 $t

UNDEFINED SYMBOLS
_mstack
