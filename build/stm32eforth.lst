ARM GAS  stm32eforth.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  stm32eforth.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.p2align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.p2aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m3
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
ARM GAS  stm32eforth.s 			page 3


  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
ARM GAS  stm32eforth.s 			page 4


  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  81              	
  82              	/* blue pill specific constants */ 
  83              	  .equ LED_GPIO, GPIOC_BASE_ADR
  84              	  .equ LED_PIN, 13
  85              	  .equ UART, USART1_BASE_ADR 
  86              	
ARM GAS  stm32eforth.s 			page 5


  87              	/* eForth specific constants */
  88              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  89              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  90              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  91              	.equ UPP ,	0x20000000	/*start of user area (UP0) */
  92              	.equ DTOP ,	0x20000100	/*start of usable RAM area (HERE) */
  93              	.equ DEND , 0x20004E00  /*usable RAM end */
  94              	 .equ RAMOFFSET ,	0x20000000	// remap
  95              	 .equ RAMEND, 0x20005000 // 20Ko
  96              	 .equ FLASHOFFSET ,	0x08000c00	// remap
  97              	//.equ RAMOFFSET  ,	0x00000000	/* absolute */
  98              	//.equ MAPOFFSET  ,	0x00000000	/* absolute */
  99              	  .equ MAPOFFSET , (RAMOFFSET-FLASHOFFSET)
 100              	
 101              	/*************************************
 102              	   system variables offset from UPP
 103              	*************************************/
 104              	  .equ SEED_OFS, 4    // prng seed 
 105              	  .equ TICKS_OFS, SEED_OFS+4  // millseconds counter
 106              	  .equ TIMER_OFS, TICKS_OFS+4  // count down timer
 107              	  .equ TORAM_OFS, TIMER_OFS+4  // compile to RAM 
 108              	  .equ IMG_SIGN_OFS, TORAM_OFS+4  // image signature  
 109              	  .equ BOOT_OFS, IMG_SIGN_OFS+4  // boot program address
 110              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
 111              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
 112              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
 113              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
 114              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
 115              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
 116              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
 117              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
 118              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
 119              	  .equ FORTH_CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
 120              	  .equ USER_CTOP_OFS, FORTH_CTOP_OFS+4  // ram free dictionary address
 121              	  .equ LASTN_OFS, USER_CTOP_OFS+4     // last word in dictionary link nfa 
 122              	  .equ VARS_END_OFS, LASTN_OFS+4 // end of system variables  
 123              	  
 124              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
 125              	  .equ RX_QUEUE_OFS, VARS_END_OFS+4 // rx queue 
 126              	  .equ RX_HEAD_OFS, RX_QUEUE_OFS+RX_QUEUE_SIZE // queue head indice 
 127              	  .equ RX_TAIL_OFS, RX_HEAD_OFS+4 // queue tail indice 
 128              	
 129              	
 130              	/***********************************************
 131              	* MACROS
 132              	*	Assemble inline direct threaded code ending.
 133              	***********************************************/
 134              		.macro _CALL fn /* low level routine call */ 
 135              	 	PUSH {LR}
 136              		BL \fn  
 137              		POP {LR}
 138              		.endm
 139              		
 140              		.macro _MOV32 R V 
 141              		MOV \R, #\V&0xffff
 142              		MOVT \R, #\V>>16
 143              		.endm
ARM GAS  stm32eforth.s 			page 6


 144              	
 145              		.macro	_NEXT /*end low level word */
 146              		BX	LR
 147              		.endm
 148              	
 149              	 	.macro	_NEST /*start high level word */
 150              		STMFD	R2!,{LR}
 151              		.endm
 152              	
 153              	 	.macro	_UNNEST	/*end high level word */
 154              		LDMFD	R2!,{PC}
 155              		.endm
 156              	
 157              	 	.macro	_DOLIT /*long literals */
 158              		BL	DOLIT
 159              		.endm
 160              	
 161              	 	.macro	_PUSH	/*push R5 on data stack*/
 162              		STR	R5,[R1,#-4]!
 163              		.endm
 164              	
 165              	 	.macro	_POP /*pop data stack to R5 */
 166              		LDR	R5,[R1],#4
 167              		.endm
 168              	
 169              	/*************************************
 170              	*   interrupt service vectors table 
 171              	**************************************/
 172              	   .section  .isr_vector,"a",%progbits
 173              	  .type  isr_vectors, %object
 174              	
 175              	isr_vectors:
 176 0000 00000000 	  .word   _mstack          /* main return stack address */
 177 0004 00000000 	  .word   reset_handler    /* startup address */
 178              	/* core interrupts || exceptions */
 179 0008 00000000 	  .word   default_handler  /*  NMI */
 180 000c 00000000 	  .word   default_handler  /*  HardFault */
 181 0010 00000000 	  .word   default_handler  /*  Memory Management */
 182 0014 00000000 	  .word   default_handler  /* Bus fault */
 183 0018 00000000 	  .word   default_handler  /* Usage fault */
 184 001c 00000000 	  .word   0
 185 0020 00000000 	  .word   0
 186 0024 00000000 	  .word   0
 187 0028 00000000 	  .word   0
 188 002c 00000000 	  .word   default_handler  /* SWI instruction */
 189 0030 00000000 	  .word   default_handler  /* Debug monitor */
 190 0034 00000000 	  .word   0
 191 0038 00000000 	  .word   default_handler  /* PendSV */
 192 003c 00000000 	  .word   systick_handler  /* Systick */
 193              	  
 194              	  /* External Interrupts */
 195 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 196 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 197 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 198 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 199 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 200 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
ARM GAS  stm32eforth.s 			page 7


 201 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 202 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 203 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 204 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 205 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 206 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 207 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 208 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 209 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 210 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 211 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 212 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 213 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 214 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 215 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 216 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 217 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 218 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 219 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 220 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 221 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 222 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 223 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 224 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 225 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 226 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 227 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 228 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 229 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 230 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 231 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 232 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
 233 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 234 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 235 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 236 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 237 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 238 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 239 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 240 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 241 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 242 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 243 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 244 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 245 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 246 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 247 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 248 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 249 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 250 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 251 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 252 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 253 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 254 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 255              	
 256              	  .size  isr_vectors, .-isr_vectors
 257              	
ARM GAS  stm32eforth.s 			page 8


 258              	/*****************************************************
 259              	* default isr handler called on unexpected interrupt
 260              	*****************************************************/
 261              	    .section  .text.default_handler,"ax",%progbits
 262              	
 263              	  .type default_handler, %function
 264              	  .p2align 2 
 265              	  .global default_handler
 266              	default_handler:
 267 0000 014D     		ldr r5,exception_msg 
 268 0002 00F04FF8 		bl uart_puts 
 269 0006 39E0     		b reset_mcu    
 270              	  .size  default_handler, .-default_handler
 271              	exception_msg:
 272 0008 0C000000 		.word .+4 
 273 000c 12       		.byte 18
 274 000d 0A0D6578 		.ascii "\n\rexeption reboot!"
 274      65707469 
 274      6F6E2072 
 274      65626F6F 
 274      7421
 275 001f 00       		.p2align 2
 276              	
 277              	/*********************************
 278              		system milliseconds counter
 279              	*********************************/	
 280              	  .type systick_handler, %function
 281              	  .p2align 2 
 282              	  .global systick_handler
 283              	systick_handler:
 284 0020 4FF00003 	  mov r3,#UPP&0xffff
 285 0024 C2F20003 	  movt r3,#UPP>>16  	
 286 0028 9868     	  ldr r0,[r3,#TICKS_OFS]  
 287 002a 00F10100 	  add r0,#1
 288 002e 9860     	  str r0,[r3,#TICKS_OFS]
 289 0030 D868     	  ldr r0,[r3,#TIMER_OFS]
 290 0032 10B1     	  cbz r0, systick_exit
 291 0034 A0F10100 	  sub r0,#1
 292 0038 D860     	  str r0,[r3,#TIMER_OFS]
 293              	systick_exit:
 294 003a 7047     	  bx lr
 295              	
 296              	
 297              	
 298              	/**************************
 299              		UART RX handler
 300              	**************************/
 301              		.p2align 2
 302              		.type uart_rx_handler, %function
 303              	uart_rx_handler:
 304 003c 2DE9D002 		push {r4,r6,r7,r9}
 305 0040 4FF46054 		_MOV32 r4,UART 
 305      C4F20104 
 306 0048 2668     		ldr r6,[r4,#USART_SR]
 307 004a D4F80490 		ldr r9,[r4,#USART_DR]
 308 004e 16F0200F 		tst r6,#(1<<5) // RXNE 
 309 0052 0DD0     		beq 2f // no char received 
ARM GAS  stm32eforth.s 			page 9


 310 0054 B9F1030F 		cmp r9,#3
 311 0058 0DD0     		beq user_reboot // received CTRL-C then reboot MCU 
 312 005a 03F15007 		add r7,r3,#RX_QUEUE_OFS
 313 005e 5C6E     		ldr r4,[r3,#RX_TAIL_OFS]
 314 0060 2744     		add r7,r7,r4 
 315 0062 87F80090 		strb r9,[r7]
 316 0066 04F10104 		add r4,#1 
 317 006a 04F00F04 		and r4,#(RX_QUEUE_SIZE-1)
 318 006e 5C66     		str r4,[r3,#RX_TAIL_OFS]
 319              	2:	
 320 0070 BDE8D002 		pop {r4,r6,r7,r9}
 321 0074 7047     		bx lr 
 322              	
 323              	user_reboot:
 324 0076 064D     		ldr r5,user_reboot_msg
 325 0078 00F014F8 		bl uart_puts 
 326              	reset_mcu: 
 327 007c 0348     		ldr r0,scb_adr 
 328 007e C168     		ldr r1,[r0,#SCB_AIRCR]
 329 0080 41F00401 		orr r1,#(1<<2)
 330 0084 C0F2FA51 		movt r1,#SCB_VECTKEY
 331 0088 C160     		str r1,[r0,#SCB_AIRCR]
 332 008a FEE7     		b . 
 333              		.p2align 2 
 334              	scb_adr:
 335 008c 00ED00E0 		.word SCB_BASE_ADR 
 336              	user_reboot_msg:
 337 0090 94000000 		.word .+4
 338 0094 0D       		.byte 13 
 339 0095 0D757365 		.ascii "\ruser reboot!"
 339      72207265 
 339      626F6F74 
 339      21
 340 00a2 00BF     		.p2align 2 
 341              	
 342              	// send counted string to uart 
 343              	// input: r5 string* 
 344              		.type uart_puts,%function 
 345              	uart_puts:
 346 00a4 4FF46050 		_MOV32 r0,UART 
 346      C4F20100 
 347 00ac 15F8011B 		ldrb r1,[r5],#1 // string length
 348 00b0 0940     		ands r1,r1
 349 00b2 0CD0     	1:	beq 9f 
 350 00b4 0268     	2:  ldr r2,[r0,#USART_SR]
 351 00b6 12F08002 		ands r2,#0x80 
 352 00ba FBD0     		beq 2b 	
 353 00bc 15F8012B 		ldrb r2,[r5],#1
 354 00c0 0271     		strb r2,[r0,#USART_DR]
 355 00c2 0139     		subs r1,r1,#1 
 356 00c4 F6D1     		bne 2b 
 357 00c6 0268     	3:	ldr r2,[r0,#USART_SR]
 358 00c8 12F04002 		ands r2,#(1<<6)
 359 00cc FBD0     		beq 3b 
 360 00ce 7047     	9:  bx lr 
 361              	
 362              	
ARM GAS  stm32eforth.s 			page 10


 363              	/**************************************
 364              	  reset_handler execute at MCU reset
 365              	***************************************/
 366              	    .section  .text.reset_handler
 367              	  .type  reset_handler, %function
 368              	  .p2align 2 
 369              	  .global reset_handler
 370              	reset_handler:
 371 0000 00F07BF8 		bl	remap 
 372 0004 00F008F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 373 0008 00F056F8 		bl  uart_init
 374              	//	bl	UNLOCK			/* unlock flash memory */
 375 000c 0148     		ldr r0,forth_entry
 376 000e 40F00100 		orr r0,#1
 377 0012 0047     		bx r0 
 378              	forth_entry:
 379 0014 601D0018 		.word COLD+MAPOFFSET 
 380              	
 381              	  .type init_devices, %function
 382              	  .p2align 2 
 383              	init_devices:
 384              	/* init clock to HSE 72 Mhz */
 385              	/* set 2 wait states in FLASH_ACR_LATENCY */
 386 0018 4FF40050 		mov r0,#FLASH_BASE_ADR&0xffff
 387 001c C4F20200 		movt r0,#FLASH_BASE_ADR>>16 
 388 0020 4FF01202 	  mov r2,#0x12
 389 0024 0260     	  str r2,[r0,#FLASH_ACR]
 390              	/* configure clock for HSE, 8 Mhz crystal */
 391              	/* enable HSE in RCC_CR */
 392 0026 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 393 002a C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 394 002e 0168     	  ldr r1,[r0,#RCC_CR]
 395 0030 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 396 0034 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 397              	/* wait HSERDY loop */
 398              	wait_hserdy:
 399 0036 0168     	  ldr r1,[r0,#RCC_CR]
 400 0038 11F4003F 	  tst r1,#(1<<17)
 401 003c FBD0     	  beq wait_hserdy
 402              	
 403              	/************************************************* 
 404              	   configure PLL mul factor and source 
 405              	   SYSCLOCK=72 Mhz
 406              	   select HSE as  PLL source clock
 407              	   multiply frequency by 9 
 408              	   APB1 clock is limited to 36 Mhz so divide by 2 
 409              	****************************************************/
 410 003e 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 411 0042 C0F21D01 	  movt r1,#(7<<2)|1
 412 0046 4160     	  str r1,[r0,#RCC_CFGR]
 413              	  /* enable PLL */
 414 0048 0168     	  ldr r1,[r0,#RCC_CR]
 415 004a 41F08071 	  orr r1, #1<<24 
 416 004e 0160     	  str r1,[r0,#RCC_CR]
 417              	/* wait for PLLRDY */
 418              	wait_pllrdy:
 419 0050 0168     	  ldr r1,[r0,#RCC_CR]
ARM GAS  stm32eforth.s 			page 11


 420 0052 11F0007F 	  tst r1,#(1<<25)
 421 0056 FBD0     	  beq wait_pllrdy 
 422              	/* select PLL as sysclock */
 423 0058 4168     	  ldr r1,[r0,#RCC_CFGR]
 424 005a 4FF6FC72 	  mov r2,#0xfffc
 425 005e CFF6FF72 	  movt r2,#0xffff
 426 0062 01EA0201 	  and r1,r1,r2 
 427 0066 4FF00202 	  mov r2,#2
 428 006a 41EA0201 	  orr r1,r1,r2
 429 006e 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 430              	/* wait for SWS==2 */
 431              	wait_sws:
 432 0070 4168     	  ldr r1,[r0,#RCC_CFGR]
 433 0072 11F0080F 	  tst r1,#(2<<2)
 434 0076 FBD0     	  beq wait_sws
 435              	/* now sysclock is 72 Mhz */
 436              	
 437              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 438 0078 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 439 007c C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 440 0080 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 441 0084 8161     	  str	r1, [r0, #RCC_APB2ENR]
 442              	
 443              	/* configure GPIOC:13 as output for user LED */
 444 0086 4FF48050 	  mov r0,#GPIOC_BASE_ADR&0xffff
 445 008a C4F20100 	  movt r0,#GPIOC_BASE_ADR>>16
 446 008e 4168     	  ldr r1,[r0,#GPIO_CRH]
 447 0090 6FF47002 	  mvn r2,#(15<<20)
 448 0094 01EA0201 	  and r1,r1,r2
 449 0098 4FF4C002 	  mov r2,#(6<<20)
 450 009c 41EA0201 	  orr r1,r1,r2
 451 00a0 4160     	  str r1,[r0,#GPIO_CRH]
 452              	
 453              	/* configure systicks for 1msec ticks */
 454 00a2 4EF21000 	  mov r0,#STK_BASE_ADR&0xFFFF
 455 00a6 CEF20000 	  movt r0,#STK_BASE_ADR>>16	
 456 00aa 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 457 00ae 4160     	  str r1,[r0,#STK_LOAD]
 458 00b0 4FF00301 	  mov r1,#3
 459 00b4 0160     	  str r1,[r0,STK_CTL]
 460 00b6 7047     	  _NEXT  
 461              	
 462              	/*******************************
 463              	  initialize UART peripheral 
 464              	********************************/
 465              		.type uart_init, %function
 466              	uart_init:
 467              	/* set GPIOA PIN 9, uart TX  */
 468 00b8 4FF40060 	  _MOV32 r0,GPIOA_BASE_ADR
 468      C4F20100 
 469 00c0 4168     	  ldr r1,[r0,#GPIO_CRH]
 470 00c2 6FF0F002 	  mvn r2,#(15<<4)
 471 00c6 01EA0201 	  and r1,r1,r2
 472 00ca 4FF0A002 	  mov r2,#(0xA<<4)
 473 00ce 41EA0201 	  orr r1,r1,r2 
 474 00d2 4160     	  str r1,[r0,#GPIO_CRH]
 475 00d4 4FF46050 	  _MOV32 r0,UART 
ARM GAS  stm32eforth.s 			page 12


 475      C4F20100 
 476              	/* BAUD rate */
 477 00dc 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 478 00e0 8160     	  str r1,[r0,#USART_BRR]
 479 00e2 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 480 00e6 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 481              	/* enable interrupt in NVIC */
 482 00e8 4FF46140 	  _MOV32 r0,NVIC_BASE_ADR
 482      CEF20000 
 483 00f0 4168     	  ldr r1,[r0,#NVIC_ISER1]
 484 00f2 41F02001 	  orr r1,#32   
 485 00f6 4160     	  str r1,[r0,#NVIC_ISER1]
 486 00f8 7047     	  bx lr 
 487              	
 488              	/* copy system to RAM */ 
 489              		.type remap, %function 
 490              	
 491              	remap:
 492 00fa 0D48     		ldr r0,remap_dest  
 493 00fc 0B49     		ldr r1,remap_src 
 494 00fe 42F2C852 		mov r2,#CTOP-UZERO 
 495 0102 02F10302 		add r2,r2,#3
 496 0106 22F00302 		and r2,r2,#~3 
 497 010a 51F8043B 	1:	ldr r3,[r1],#4 
 498 010e 40F8043B 		str r3,[r0],#4 
 499 0112 043A     		subs R2,#4 
 500 0114 F9D1     		bne 1b
 501              	// zero end of RAM 
 502 0116 4FF4A042 		mov r2,#0x5000
 503 011a C2F20002 		movt r2,#0x2000
 504 011e 83EA0303 		eor r3,r3,r3 
 505 0122 40F8043B 	2:  str r3,[r0],#4
 506 0126 9042     		cmp r0,r2 
 507 0128 FBDB     		blt 2b 
 508 012a 7047     		_NEXT 
 509              	remap_src:
 510 012c 00040000 		.word UZERO 
 511              	remap_dest:
 512 0130 00000020 		.word RAMOFFSET 
 513              	
 514              	/********************
 515              	* Version control
 516              	*******************/
 517              	.equ VER ,	0x01	/*major release version */
 518              	.equ EXT ,	0x00	/*minor extension */
 519              	
 520              	/* Constants */
 521              	
 522              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 523              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 524              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 525              	
 526              	.equ CELLL ,	4	/*size of a cell */
 527              	.equ BASEE ,	10	/*default radix */
 528              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 529              	
 530              	.equ BKSPP ,	8	/*backspace */
ARM GAS  stm32eforth.s 			page 13


 531              	.equ LF ,	10	  /*line feed */
 532              	.equ CRR ,	13	/*carriage return */
 533              	.equ ERR ,	27	/*error escape */
 534              	.equ TIC ,	39	/*tick */
 535              	
 536              	/********************************************************
 537              	* RAM memory mapping
 538              	* 	0x20000000	RAM base address
 539              	*	0x20000000  system variables	
 540              	* 	0x20000100	Forth dictionary
 541              	* 	0x2000????	top of dictionary, HERE
 542              	* 	0x2000????	WORD buffer, HERE+16
 543              	*   0x20004E00  end of user space
 544              	* 	0x20004E80	top of data stack  R2
 545              	* 	0x20004E80	TIB terminal input buffer
 546              	* 	0x20004F80	top of return stack  R1
 547              	* 	0x20005000	top of hardware stack for interrupts R14
 548              	********************************************************/
 549              	
 550              	
 551              	/******************************************************
 552              	*  COLD start moves the following to USER variables.
 553              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 554              	******************************************************/
 555 0134 AFF30080 		.p2align 10
 555      AFF30080 
 555      AFF30080 
 555      00000000 
 555      00000000 
 556              	
 557              	UZERO:
 558 0400 00000000 		.word 0  			/*Reserved */
 559 0404 55AA0000 		.word 0xaa55 /* SEED  */ 
 560 0408 00000000 		.word 0      /* MSEC */
 561 040c 00000000 	    .word 0     /* TIMER */
 562 0410 FFFFFFFF 		.word -1    /* >RAM */ 
 563 0414 494D4147 		.ascii "IMAG" /* signature */ 
 564 0418 EC1C0018 		.word HI+MAPOFFSET  /*'BOOT */
 565 041c 0A000000 		.word BASEE 	/*BASE */
 566 0420 00000000 		.word 0			/*tmp */
 567 0424 00000000 		.word 0			/*SPAN */
 568 0428 00000000 		.word 0			/*>IN */
 569 042c 00000000 		.word 0			/*#TIB */
 570 0430 804E0020 		.word TIBB	/*TIB */
 571 0434 100E0018 		.word INTER+MAPOFFSET	/*'EVAL */
 572 0438 00000000 		.word 0			/*HLD */
 573 043c 581D0018 		.word LASTN+MAPOFFSET	/*CONTEXT */
 574 0440 C81D0018 		.word CTOP+MAPOFFSET	/* FCP end of system dictionnary */
 575 0444 C81D0018 		.word CTOP+MAPOFFSET	/* CP end of RAM dictionary RAM */
 576 0448 581D0018 		.word LASTN+MAPOFFSET	/*LAST word in dictionary */
 577 044c 00000000 		.word 0,0			/*reserved */
 577      00000000 
 578              	ULAST:
 579 0454 00000000 		.space  RX_QUEUE_SIZE+8 /* space reserved for rx_queue,head and tail pointer.
 579      00000000 
 579      00000000 
 579      00000000 
ARM GAS  stm32eforth.s 			page 14


 579      00000000 
 580              	
 581              	
 582              	/***********************************
 583              	//  Start of Forth dictionary
 584              	***********************************/
 585              	
 586              		.p2align 2 
 587              	
 588              	// RANDOM ( n1 -- {0..n1-1} )
 589              	// return pseudo random number 
 590              	// REF: https://en.wikipedia.org/wiki/Xorshift
 591              	
 592 046c 00000000 		.word 0
 593 0470 06       	_RAND: .byte 6
 594 0471 52414E44 		.ascii "RANDOM"
 594      4F4D
 595 0477 00       		.p2align 2 
 596              	RAND:
 597 0478 42F804ED 		_NEST 
 598 047c 00F0E0FA 		bl SEED 
 599 0480 00F0C4F8 		bl AT 
 600 0484 4FEA4534 		lsl r4,r5,#13
 601 0488 85EA0405 		eor r5,r4
 602 048c 4FEA5544 		lsr r4,r5,#17
 603 0490 85EA0405 		eor r5,r4
 604 0494 4FEA4514 		lsl r4,r5,#5
 605 0498 85EA0405 		eor r5,r4
 606 049c 00F0FAF8 		bl DUPP 
 607 04a0 00F0CEFA 		bl SEED 
 608 04a4 00F0A8F8 		bl STORE 
 609 04a8 00F028FA 		bl ABSS
 610 04ac 00F0FAF8 		bl SWAP 
 611 04b0 00F01CFC 		bl MODD 
 612 04b4 52F804FB 		_UNNEST 
 613              	
 614              	// PAUSE ( u -- ) 
 615              	// suspend execution for u milliseconds
 616 04b8 70F8FF17 		.word _RAND+MAPOFFSET
 617 04bc 05       	_PAUSE: .byte 5
 618 04bd 50415553 		.ascii "PAUSE"
 618      45
 619 04c2 00BF     		.p2align 2
 620              	PAUSE:
 621 04c4 42F804ED 		_NEST 
 622 04c8 00F0CEFA 		BL TIMER 
 623 04cc 00F094F8 		BL STORE 
 624              	PAUSE_LOOP:
 625 04d0 00F0CAFA 		BL TIMER 
 626 04d4 00F09AF8 		BL AT 
 627 04d8 00F072F8 		BL QBRAN 
 628 04dc E8040000 		.word PAUSE_EXIT 
 629 04e0 00F07AF8 		BL BRAN 
 630 04e4 D0040000 		.word PAUSE_LOOP 
 631              	PAUSE_EXIT: 		
 632 04e8 52F804FB 		_UNNEST 
 633              	
ARM GAS  stm32eforth.s 			page 15


 634              	//  ULED ( T|F -- )
 635              	// control user LED, -1 ON, 0 OFF  
 636 04ec BCF8FF17 		.word _PAUSE + MAPOFFSET
 637 04f0 04       	_ULED: .byte 4
 638 04f1 554C4544 		.ascii "ULED"
 639 04f5 0000BF   		.p2align 2
 640              		.type ULED, %function 
 641              	ULED:
 642 04f8 4FF40056 		mov r6,#(1<<LED_PIN)
 643 04fc 4FF48054 		mov r4,#LED_GPIO&0xffff
 644 0500 C4F20104 		movt r4,#LED_GPIO>>16
 645 0504 2800     		movs r0,r5 
 646 0506 51F8045B 		_POP
 647 050a 01D0     		beq ULED_OFF 
 648 050c 6661     		str r6,[r4,#GPIO_BRR]
 649 050e 7047     		_NEXT 
 650              	ULED_OFF:
 651 0510 2661     		str r6,[r4,#GPIO_BSRR]
 652 0512 7047     		_NEXT 
 653              		
 654              	//    ?RX	 ( -- c T | F )
 655              	// 	Return input character and true, or a false if no input.
 656 0514 F0F8FF17 		.word	_ULED+MAPOFFSET
 657 0518 04       	_QRX:	.byte   4
 658 0519 3F4B4559 		.ascii "?KEY"
 659 051d 0000BF   		.p2align 2 
 660              	QKEY:
 661              	QRX: 
 662 0520 41F8045D 		_PUSH
 663 0524 5F6E     		ldr r7,[r3,#RX_TAIL_OFS] 
 664 0526 1E6E     		ldr r6,[r3,#RX_HEAD_OFS]
 665 0528 96EA0705 		eors r5,r6,r7 
 666 052c 0CD0     		beq 1f
 667 052e 03F15007 		add r7,r3,#RX_QUEUE_OFS 
 668 0532 3744     		add r7,r6 
 669 0534 3D78     		ldrb r5,[r7]
 670 0536 06F10106 		add r6,#1 
 671 053a 06F00F06 		and r6,#(RX_QUEUE_SIZE-1)
 672 053e 1E66     		str r6,[R3,#RX_HEAD_OFS]
 673 0540 41F8045D 		_PUSH 
 674 0544 4FF0FF35 		mov r5,#-1
 675 0548 7047     	1:	_NEXT 
 676 054a 00BF     		.p2align 2 
 677              	
 678              	//    TX!	 ( c -- )
 679              	// 	Send character c to the output device.
 680              	
 681 054c 18F9FF17 		.word	_QRX+MAPOFFSET
 682 0550 04       	_TXSTO:	.byte 4
 683 0551 454D4954 		.ascii "EMIT"
 684 0555 0000BF   		.p2align 2 	
 685              	TXSTO:
 686              	EMIT:
 687              	TECHO:
 688 0558 4FF46054 		_MOV32 r4,UART 
 688      C4F20104 
 689 0560 2668     	1:	ldr	r6, [r4, #USART_SR]	
ARM GAS  stm32eforth.s 			page 16


 690 0562 16F08006 		ands	r6, #0x80		//  TXE bit 
 691 0566 FBD0     		beq	1b
 692 0568 2571     		strb	r5, [r4, #USART_DR]	
 693 056a 51F8045B 		_POP
 694 056e 7047     		_NEXT 
 695              		
 696              	// **************************************************************************
 697              	//  The kernel
 698              	
 699              	//    NOP	( -- )
 700              	// 	do nothing.
 701              	
 702 0570 50F9FF17 		.word	_TXSTO+MAPOFFSET
 703 0574 03       	_NOP:	.byte   3
 704 0575 4E4F50   		.ascii "NOP"
 705              		.p2align 2 	
 706              	NOP:
 707 0578 7047     		_NEXT
 708              	 
 709              	
 710              	//    doLIT	( -- w )
 711              	// 	Push an inline literal.
 712              	
 713              	// 	.word	_NOP+MAPOFFSET
 714              	// _LIT	.byte   COMPO+5
 715              	// 	.ascii "doLIT"
 716              	// 	.p2align 2 	
 717              	DOLIT:
 718 057a 41F8045D 		_PUSH				//  store R5 on data stack
 719 057e 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 720 0582 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 721 0586 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 722 058a 7047     		_NEXT
 723              	
 724              	//    EXECUTE	( ca -- )
 725              	// 	Execute the word at ca.
 726              	
 727 058c 74F9FF17 		.word	_NOP+MAPOFFSET
 728 0590 07       	_EXECU:	.byte   7
 729 0591 45584543 		.ascii "EXECUTE"
 729      555445
 730              		.p2align 2 	
 731              	EXECU:
 732 0598 45F00104 		ORR	R4,R5,#1		//  b0=1 
 733 059c 51F8045B 		_POP
 734 05a0 2047     		BX	R4
 735              	
 736              	//    next	( -- ) counter on R:
 737              	// 	Run time code for the single index loop.
 738              	// 	: next ( -- ) \ hilevel model
 739              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 740              	
 741              	// 	.word	_EXECU+MAPOFFSET
 742              	// _DONXT	.byte   COMPO+4
 743              	// 	.ascii "next"
 744              	// 	.p2align 2 	
 745              	DONXT:
ARM GAS  stm32eforth.s 			page 17


 746 05a2 1468     		LDR	R4,[R2]   // ( -- u )  
 747 05a4 24B9     		CBNZ R4,NEXT1 
 748              		/* loop done */
 749 05a6 02F10402 		ADD	R2,R2,#4 // drop counter 
 750 05aa 0EF1040E 		ADD	LR,LR,#4 // skip after loop address 
 751 05ae 7047     		_NEXT
 752              	NEXT1:
 753              		/* decrement loop counter */
 754 05b0 A4F10104 		SUB	R4,R4,#1
 755 05b4 1460     		STR	R4,[R2]
 756 05b6 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 757 05ba 4EF0010E 		ORR	LR,LR,#1 // begining of loop
 758 05be 7047     		_NEXT
 759              	
 760              	//    ?branch	( f -- )
 761              	// 	Branch if flag is zero.
 762              	
 763              	// 	.word	_DONXT+MAPOFFSET
 764              	// _QBRAN	.byte   COMPO+7
 765              	// 	.ascii "?branch"
 766              	// 	.p2align 2 	
 767              	QBRAN:
 768 05c0 2C00     		MOVS	R4,R5
 769 05c2 51F8045B 		_POP
 770 05c6 04D1     		BNE	QBRAN1
 771 05c8 5EF801EC 		LDR	LR,[LR,#-1]
 772 05cc 4EF0010E 		ORR LR,LR,#1
 773 05d0 7047     		_NEXT
 774              	QBRAN1:
 775 05d2 0EF1040E 	 	ADD	LR,LR,#4
 776 05d6 7047     		_NEXT
 777              	
 778              	//    branch	( -- )
 779              	// 	Branch to an inline address.
 780              	
 781              	// 	.word	_QBRAN+MAPOFFSET
 782              	// _BRAN	.byte   COMPO+6
 783              	// 	.ascii "branch"
 784              	// 	.p2align 2 	
 785              	BRAN:
 786 05d8 5EF801EC 		LDR	LR,[LR,#-1]
 787 05dc 4EF0010E 		ORR	LR,LR,#1
 788 05e0 7047     		_NEXT
 789              	
 790              	//    EXIT	(  -- )
 791              	// 	Exit the currently executing command.
 792              	
 793 05e2 90F9FF17 		.word	_EXECU+MAPOFFSET
 794 05e6 04       	_EXIT:	.byte   4
 795 05e7 45584954 		.ascii "EXIT"
 796 05eb 00       		.p2align 2 	
 797              	EXIT:
 798 05ec 52F804FB 		_UNNEST
 799              	
 800              	//    !	   ( w a -- )
 801              	// 	Pop the data stack to memory.
 802              	
ARM GAS  stm32eforth.s 			page 18


 803 05f0 E6F9FF17 		.word	_EXIT+MAPOFFSET
 804 05f4 01       	_STORE:	.byte   1
 805 05f5 21       		.ascii "!"
 806 05f6 00BF     		.p2align 2 	
 807              	STORE:
 808 05f8 51F8044B 		LDR	R4,[R1],#4
 809 05fc 2C60     		STR	R4,[R5]
 810 05fe 51F8045B 		_POP
 811 0602 7047     		_NEXT
 812              	
 813              	//    @	   ( a -- w )
 814              	// 	Push memory location to the data stack.
 815              	
 816 0604 F4F9FF17 		.word	_STORE+MAPOFFSET
 817 0608 01       	_AT:	.byte   1
 818 0609 40       		.ascii "@"
 819 060a 00BF     		.p2align 2 	
 820              	AT:
 821 060c 2D68     		LDR	R5,[R5]
 822 060e 7047     		_NEXT
 823              	
 824              	//    C!	  ( c b -- )
 825              	// 	Pop the data stack to byte memory.
 826              	
 827 0610 08FAFF17 		.word	_AT+MAPOFFSET
 828 0614 02       	_CSTOR:	.byte   2
 829 0615 4321     		.ascii "C!"
 830 0617 00       		.p2align 2 	
 831              	CSTOR:
 832 0618 51F8044B 		LDR	R4,[R1],#4
 833 061c 2C70     		STRB	R4,[R5]
 834 061e 51F8045B 		_POP
 835 0622 7047     		_NEXT
 836              	
 837              	//    C@	  ( b -- c )
 838              	// 	Push byte memory location to the data stack.
 839              	
 840 0624 14FAFF17 		.word	_CSTOR+MAPOFFSET
 841 0628 02       	_CAT:	.byte   2
 842 0629 4340     		.ascii "C@"
 843 062b 00       		.p2align 2 	
 844              	CAT:
 845 062c 2D78     		LDRB	R5,[R5]
 846 062e 7047     		_NEXT
 847              	
 848              	//    R>	  ( -- w )
 849              	// 	Pop the return stack to the data stack.
 850              	
 851 0630 28FAFF17 		.word	_CAT+MAPOFFSET
 852 0634 02       	_RFROM:	.byte   2
 853 0635 523E     		.ascii "R>"
 854 0637 00       		.p2align 2 	
 855              	RFROM:
 856 0638 41F8045D 		_PUSH
 857 063c 52F8045B 		LDR	R5,[R2],#4
 858 0640 7047     		_NEXT
 859              	
ARM GAS  stm32eforth.s 			page 19


 860              	//    R@	  ( -- w )
 861              	// 	Copy top of return stack to the data stack.
 862              	
 863 0642 34FAFF17 		.word	_RFROM+MAPOFFSET
 864 0646 02       	_RAT:	.byte   2
 865 0647 5240     		.ascii "R@"
 866 0649 0000BF   		.p2align 2 	
 867              	RAT:
 868 064c 41F8045D 		_PUSH
 869 0650 1568     		LDR	R5,[R2]
 870 0652 7047     		_NEXT
 871              	
 872              	//    >R	  ( w -- )
 873              	// 	Push the data stack to the return stack.
 874              	
 875 0654 46FAFF17 		.word	_RAT+MAPOFFSET
 876 0658 42       	_TOR:	.byte   COMPO+2
 877 0659 3E52     		.ascii ">R"
 878 065b 00       		.p2align 2 	
 879              	TOR:
 880 065c 42F8045D 		STR	R5,[R2,#-4]!
 881 0660 51F8045B 		_POP
 882 0664 7047     		_NEXT
 883              	
 884              	//    SP@	 ( -- a )
 885              	// 	Push the current data stack pointer.
 886              	
 887 0666 58FAFF17 		.word	_TOR+MAPOFFSET
 888 066a 03       	_SPAT:	.byte   3
 889 066b 535040   		.ascii "SP@"
 890 066e 00BF     		.p2align 2 	
 891              	SPAT:
 892 0670 41F8045D 		_PUSH
 893 0674 0D46     		MOV	R5,R1
 894 0676 7047     		_NEXT
 895              	
 896              	//    DROP	( w -- )
 897              	// 	Discard top stack item.
 898              	
 899 0678 6AFAFF17 		.word	_SPAT+MAPOFFSET
 900 067c 04       	_DROP:	.byte   4
 901 067d 44524F50 		.ascii "DROP"
 902 0681 0000BF   		.p2align 2 	
 903              	DROP:
 904 0684 51F8045B 		_POP
 905 0688 7047     		_NEXT
 906              	
 907              	//    DUP	 ( w -- w w )
 908              	// 	Duplicate the top stack item.
 909              	
 910 068a 7CFAFF17 		.word	_DROP+MAPOFFSET
 911 068e 03       	_DUPP:	.byte   3
 912 068f 445550   		.ascii "DUP"
 913 0692 00BF     		.p2align 2 	
 914              	DUPP:
 915 0694 41F8045D 		_PUSH
 916 0698 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 20


 917              	
 918              	//    SWAP	( w1 w2 -- w2 w1 )
 919              	// 	Exchange top two stack items.
 920              	
 921 069a 8EFAFF17 		.word	_DUPP+MAPOFFSET
 922 069e 04       	_SWAP:	.byte   4
 923 069f 53574150 		.ascii "SWAP"
 924 06a3 00       		.p2align 2 	
 925              	SWAP:
 926 06a4 0C68     		LDR	R4,[R1]
 927 06a6 0D60     		STR	R5,[R1]
 928 06a8 2546     		MOV	R5,R4
 929 06aa 7047     		_NEXT
 930              	
 931              	//    OVER	( w1 w2 -- w1 w2 w1 )
 932              	// 	Copy second stack item to top.
 933              	
 934 06ac 9EFAFF17 		.word	_SWAP+MAPOFFSET
 935 06b0 04       	_OVER:	.byte   4
 936 06b1 4F564552 		.ascii "OVER"
 937 06b5 0000BF   		.p2align 2 	
 938              	OVER:
 939 06b8 41F8045D 		_PUSH
 940 06bc 4D68     		LDR	R5,[R1,#4]
 941 06be 7047     		_NEXT
 942              	
 943              	//    0<	  ( n -- t )
 944              	// 	Return true if n is negative.
 945              	
 946 06c0 B0FAFF17 		.word	_OVER+MAPOFFSET
 947 06c4 02       	_ZLESS:	.byte   2
 948 06c5 303C     		.ascii "0<"
 949 06c7 00       		.p2align 2 	
 950              	ZLESS:
 951 06c8 4FF00004 		MOV	R4,#0
 952 06cc 04EB2505 		ADD	R5,R4,R5,ASR #32
 953 06d0 7047     		_NEXT
 954              	
 955              	//    AND	 ( w w -- w )
 956              	// 	Bitwise AND.
 957              	
 958 06d2 C4FAFF17 		.word	_ZLESS+MAPOFFSET
 959 06d6 03       	_ANDD:	.byte   3
 960 06d7 414E44   		.ascii "AND"
 961 06da 00BF     		.p2align 2 	
 962              	ANDD:
 963 06dc 51F8044B 		LDR	R4,[R1],#4
 964 06e0 05EA0405 		AND	R5,R5,R4
 965 06e4 7047     		_NEXT
 966              	
 967              	//    OR	  ( w w -- w )
 968              	// 	Bitwise inclusive OR.
 969              	
 970 06e6 D6FAFF17 		.word	_ANDD+MAPOFFSET
 971 06ea 02       	_ORR:	.byte   2
 972 06eb 4F52     		.ascii "OR"
 973 06ed 0000BF   		.p2align 2 	
ARM GAS  stm32eforth.s 			page 21


 974              	ORR:
 975 06f0 51F8044B 		LDR	R4,[R1],#4
 976 06f4 45EA0405 		ORR	R5,R5,R4
 977 06f8 7047     		_NEXT
 978              	
 979              	//    XOR	 ( w w -- w )
 980              	// 	Bitwise exclusive OR.
 981              	
 982 06fa EAFAFF17 		.word	_ORR+MAPOFFSET
 983 06fe 03       	_XORR:	.byte   3
 984 06ff 584F52   		.ascii "XOR"
 985 0702 00BF     		.p2align 2 	
 986              	XORR:
 987 0704 51F8044B 		LDR	R4,[R1],#4
 988 0708 85EA0405 		EOR	R5,R5,R4
 989 070c 7047     		_NEXT
 990              	
 991              	//    UM+	 ( w w -- w cy )
 992              	// 	Add two numbers, return the sum and carry flag.
 993              	
 994 070e FEFAFF17 		.word	_XORR+MAPOFFSET
 995 0712 03       	_UPLUS:	.byte   3
 996 0713 554D2B   		.ascii "UM+"
 997 0716 00BF     		.p2align 2 	
 998              	UPLUS:
 999 0718 0C68     		LDR	R4,[R1]
 1000 071a 6419     		ADDS	R4,R4,R5
 1001 071c 4FF00005 		MOV	R5,#0
 1002 0720 45F10005 		ADC	R5,R5,#0
 1003 0724 0C60     		STR	R4,[R1]
 1004 0726 7047     		_NEXT
 1005              	
 1006              	//    RSHIFT	 ( w # -- w )
 1007              	// 	arithmetic Right shift # bits.
 1008              	
 1009 0728 12FBFF17 		.word	_UPLUS+MAPOFFSET
 1010 072c 06       	_RSHIFT:	.byte   6
 1011 072d 52534849 		.ascii "RSHIFT"
 1011      4654
 1012 0733 00       		.p2align 2 	
 1013              	RSHIFT:
 1014 0734 51F8044B 		LDR	R4,[R1],#4
 1015 0738 44FA05F5 		MOV	R5,R4,ASR R5
 1016 073c 7047     		_NEXT
 1017              	
 1018              	//    LSHIFT	 ( w # -- w )
 1019              	// 	Right shift # bits.
 1020              	
 1021 073e 2CFBFF17 		.word	_RSHIFT+MAPOFFSET
 1022 0742 06       	_LSHIFT:	.byte   6
 1023 0743 4C534849 		.ascii "LSHIFT"
 1023      4654
 1024 0749 0000BF   		.p2align 2 	
 1025              	LSHIFT:
 1026 074c 51F8044B 		LDR	R4,[R1],#4
 1027 0750 04FA05F5 		MOV	R5,R4,LSL R5
 1028 0754 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 22


 1029              	
 1030              	//    +	 ( w w -- w )
 1031              	// 	Add.
 1032              	
 1033 0756 42FBFF17 		.word	_LSHIFT+MAPOFFSET
 1034 075a 01       	_PLUS:	.byte   1
 1035 075b 2B       		.ascii "+"
 1036              		.p2align 2 	
 1037              	PLUS:
 1038 075c 51F8044B 		LDR	R4,[R1],#4
 1039 0760 2544     		ADD	R5,R5,R4
 1040 0762 7047     		_NEXT
 1041              	
 1042              	//    -	 ( w w -- w )
 1043              	// 	Subtract.
 1044              	
 1045 0764 5AFBFF17 		.word	_PLUS+MAPOFFSET
 1046 0768 01       	_SUBB:	.byte   1
 1047 0769 2D       		.ascii "-"
 1048 076a 00BF     		.p2align 2 	
 1049              	SUBB:
 1050 076c 51F8044B 		LDR	R4,[R1],#4
 1051 0770 C5EB0405 		RSB	R5,R5,R4
 1052 0774 7047     		_NEXT
 1053              	
 1054              	//    *	 ( w w -- w )
 1055              	// 	Multiply.
 1056              	
 1057 0776 68FBFF17 		.word	_SUBB+MAPOFFSET
 1058 077a 01       	_STAR:	.byte   1
 1059 077b 2A       		.ascii "*"
 1060              		.p2align 2 	
 1061              	STAR:
 1062 077c 51F8044B 		LDR	R4,[R1],#4
 1063 0780 04FB05F5 		MUL	R5,R4,R5
 1064 0784 7047     		_NEXT
 1065              	
 1066              	//    UM*	 ( w w -- ud )
 1067              	// 	Unsigned multiply.
 1068              	
 1069 0786 7AFBFF17 		.word	_STAR+MAPOFFSET
 1070 078a 03       	_UMSTA:	.byte   3
 1071 078b 554D2A   		.ascii "UM*"
 1072 078e 00BF     		.p2align 2 	
 1073              	UMSTA:
 1074 0790 0C68     		LDR	R4,[R1]
 1075 0792 A5FB0467 		UMULL	R6,R7,R5,R4
 1076 0796 0E60     		STR	R6,[R1]
 1077 0798 3D46     		MOV	R5,R7
 1078 079a 7047     		_NEXT
 1079              	
 1080              	//    M*	 ( w w -- d )
 1081              	// 	signed multiply.
 1082              	
 1083 079c 8AFBFF17 		.word	_UMSTA+MAPOFFSET
 1084 07a0 02       	_MSTAR:	.byte   2
 1085 07a1 4D2A     		.ascii "M*"
ARM GAS  stm32eforth.s 			page 23


 1086 07a3 00       		.p2align 2 	
 1087              	MSTAR:
 1088 07a4 0C68     		LDR	R4,[R1]
 1089 07a6 85FB0467 		SMULL	R6,R7,R5,R4
 1090 07aa 0E60     		STR	R6,[R1]
 1091 07ac 3D46     		MOV	R5,R7
 1092 07ae 7047     		_NEXT
 1093              	
 1094              	//    1+	 ( w -- w+1 )
 1095              	// 	Add 1.
 1096              	
 1097 07b0 A0FBFF17 		.word	_MSTAR+MAPOFFSET
 1098 07b4 02       	_ONEP:	.byte   2
 1099 07b5 312B     		.ascii "1+"
 1100 07b7 00       		.p2align 2 	
 1101              	ONEP:
 1102 07b8 05F10105 		ADD	R5,R5,#1
 1103 07bc 7047     		_NEXT
 1104              	
 1105              	//    1-	 ( w -- w-1 )
 1106              	// 	Subtract 1.
 1107              	
 1108 07be B4FBFF17 		.word	_ONEP+MAPOFFSET
 1109 07c2 02       	_ONEM:	.byte   2
 1110 07c3 312D     		.ascii "1-"
 1111 07c5 0000BF   		.p2align 2 	
 1112              	ONEM:
 1113 07c8 A5F10105 		SUB	R5,R5,#1
 1114 07cc 7047     		_NEXT
 1115              	
 1116              	//    2+	 ( w -- w+2 )
 1117              	// 	Add 1.
 1118              	
 1119 07ce C2FBFF17 		.word	_ONEM+MAPOFFSET
 1120 07d2 02       	_TWOP:	.byte   2
 1121 07d3 322B     		.ascii "2+"
 1122 07d5 0000BF   		.p2align 2 	
 1123              	TWOP:
 1124 07d8 05F10205 		ADD	R5,R5,#2
 1125 07dc 7047     		_NEXT
 1126              	
 1127              	//    2-	 ( w -- w-2 )
 1128              	// 	Subtract 2.
 1129              	
 1130 07de D2FBFF17 		.word	_TWOP+MAPOFFSET
 1131 07e2 02       	_TWOM:	.byte   2
 1132 07e3 322D     		.ascii "2-"
 1133 07e5 0000BF   		.p2align 2 	
 1134              	TWOM:
 1135 07e8 A5F10205 		SUB	R5,R5,#2
 1136 07ec 7047     		_NEXT
 1137              	
 1138              	//    CELL+	( w -- w+4 )
 1139              	// 	Add CELLL.
 1140              	
 1141 07ee E2FBFF17 		.word	_TWOM+MAPOFFSET
 1142 07f2 05       	_CELLP:	.byte   5
ARM GAS  stm32eforth.s 			page 24


 1143 07f3 43454C4C 		.ascii "CELL+"
 1143      2B
 1144              		.p2align 2 	
 1145              	CELLP:
 1146 07f8 05F10405 		ADD	R5,R5,#CELLL
 1147 07fc 7047     		_NEXT
 1148              	
 1149              	//    CELL-	( w -- w-4 )
 1150              	// 	Subtract CELLL.
 1151              	
 1152 07fe F2FBFF17 		.word	_CELLP+MAPOFFSET
 1153 0802 05       	_CELLM:	.byte   5
 1154 0803 43454C4C 		.ascii "CELL-"
 1154      2D
 1155              		.p2align 2 	
 1156              	CELLM:
 1157 0808 A5F10405 		SUB	R5,R5,#CELLL
 1158 080c 7047     		_NEXT
 1159              	 
 1160              	//    BL	( -- 32 )
 1161              	// 	Blank (ASCII space).
 1162              	
 1163 080e 02FCFF17 		.word	_CELLM+MAPOFFSET
 1164 0812 02       	_BLANK:	.byte   2
 1165 0813 424C     		.ascii "BL"
 1166 0815 0000BF   		.p2align 2 	
 1167              	BLANK:
 1168 0818 41F8045D 		_PUSH
 1169 081c 4FF02005 		MOV	R5,#32
 1170 0820 7047     		_NEXT
 1171              	
 1172              	//    CELLS	( w -- w*4 )
 1173              	// 	Multiply 4.
 1174              	
 1175 0822 12FCFF17 		.word	_BLANK+MAPOFFSET
 1176 0826 05       	_CELLS:	.byte   5
 1177 0827 43454C4C 		.ascii "CELLS"
 1177      53
 1178              		.p2align 2 	
 1179              	CELLS:
 1180 082c 4FEA8505 		MOV	R5,R5,LSL#2
 1181 0830 7047     		_NEXT
 1182              	
 1183              	//    CELL/	( w -- w/4 )
 1184              	// 	Divide by 4.
 1185              	
 1186 0832 26FCFF17 		.word	_CELLS+MAPOFFSET
 1187 0836 05       	_CELLSL:	.byte   5
 1188 0837 43454C4C 		.ascii "CELL/"
 1188      2F
 1189              		.p2align 2 	
 1190              	CELLSL:
 1191 083c 4FEAA505 		MOV	R5,R5,ASR#2
 1192 0840 7047     		_NEXT
 1193              	
 1194              	//    2*	( w -- w*2 )
 1195              	// 	Multiply 2.
ARM GAS  stm32eforth.s 			page 25


 1196              	
 1197 0842 36FCFF17 		.word	_CELLSL+MAPOFFSET
 1198 0846 02       	_TWOST:	.byte   2
 1199 0847 322A     		.ascii "2*"
 1200 0849 0000BF   		.p2align 2 	
 1201              	TWOST:
 1202 084c 4FEA4505 		MOV	R5,R5,LSL#1
 1203 0850 7047     		_NEXT
 1204              	
 1205              	//    2/	( w -- w/2 )
 1206              	// 	Divide by 2.
 1207              	
 1208 0852 46FCFF17 		.word	_TWOST+MAPOFFSET
 1209 0856 02       	_TWOSL:	.byte   2
 1210 0857 322F     		.ascii "2/"
 1211 0859 0000BF   		.p2align 2 	
 1212              	TWOSL:
 1213 085c 4FEA6505 		MOV	R5,R5,ASR#1
 1214 0860 7047     		_NEXT
 1215              	
 1216              	//    ?DUP	( w -- w w | 0 )
 1217              	// 	Conditional duplicate.
 1218              	
 1219 0862 56FCFF17 		.word	_TWOSL+MAPOFFSET
 1220 0866 04       	_QDUP:	.byte   4
 1221 0867 3F445550 		.ascii "?DUP"
 1222 086b 00       		.p2align 2 	
 1223              	QDUP:
 1224 086c 2C00     		MOVS	R4,R5
 1225 086e 18BF     		IT NE 
 1226 0870 41F8045D 	    STRNE	R5,[R1,#-4]!
 1227 0874 7047     		_NEXT
 1228              	
 1229              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1230              	// 	Rotate top 3 items.
 1231              	
 1232 0876 66FCFF17 		.word	_QDUP+MAPOFFSET
 1233 087a 03       	_ROT:	.byte   3
 1234 087b 524F54   		.ascii "ROT"
 1235 087e 00BF     		.p2align 2 	
 1236              	ROT:
 1237 0880 0C68     		LDR	R4,[R1]  // r4=w2 
 1238 0882 0D60     		STR	R5,[R1]  // w3 replace w2 
 1239 0884 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1240 0886 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1241 0888 7047     		_NEXT
 1242              	
 1243              	//    2DROP	( w1 w2 -- )
 1244              	// 	Drop top 2 items.
 1245              	
 1246 088a 7AFCFF17 		.word	_ROT+MAPOFFSET
 1247 088e 05       	_DDROP:	.byte   5
 1248 088f 3244524F 		.ascii "2DROP"
 1248      50
 1249              		.p2align 2 	
 1250              	DDROP:
 1251 0894 51F8045B 		_POP
ARM GAS  stm32eforth.s 			page 26


 1252 0898 51F8045B 		_POP
 1253 089c 7047     		_NEXT
 1254              	
 1255              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1256              	// 	Duplicate top 2 items.
 1257              	
 1258 089e 8EFCFF17 		.word	_DDROP+MAPOFFSET
 1259 08a2 04       	_DDUP:	.byte   4
 1260 08a3 32445550 		.ascii "2DUP"
 1261 08a7 00       		.p2align 2 	
 1262              	DDUP:
 1263 08a8 0C68     		LDR	R4,[R1] // r4=w1
 1264 08aa 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1265 08ae 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1266 08b2 7047     		_NEXT
 1267              	
 1268              	//    D+	( d1 d2 -- d3 )
 1269              	// 	Add top 2 double numbers.
 1270              	
 1271 08b4 A2FCFF17 		.word	_DDUP+MAPOFFSET
 1272 08b8 02       	_DPLUS:	.byte   2
 1273 08b9 442B     		.ascii "D+"
 1274 08bb 00       		.p2align 2 	
 1275              	DPLUS:
 1276 08bc 51F8044B 		LDR	R4,[R1],#4
 1277 08c0 51F8046B 		LDR	R6,[R1],#4
 1278 08c4 0F68     		LDR	R7,[R1]
 1279 08c6 E419     		ADDS	R4,R4,R7
 1280 08c8 0C60     		STR	R4,[R1]
 1281 08ca 45EB0605 		ADC	R5,R5,R6
 1282 08ce 7047     		_NEXT
 1283              	
 1284              	//    NOT	 ( w -- !w )
 1285              	// 	1"s complement.
 1286              	
 1287 08d0 B8FCFF17 		.word	_DPLUS+MAPOFFSET
 1288 08d4 03       	_INVER:	.byte   3
 1289 08d5 4E4F54   		.ascii "NOT"
 1290              		.p2align 2 	
 1291              	INVER:
 1292 08d8 6FEA0505 		MVN	R5,R5
 1293 08dc 7047     		_NEXT
 1294              	
 1295              	//    NEGATE	( w -- -w )
 1296              	// 	2's complement.
 1297              	
 1298 08de D4FCFF17 		.word	_INVER+MAPOFFSET
 1299 08e2 06       	_NEGAT:	.byte   6
 1300 08e3 4E454741 		.ascii "NEGATE"
 1300      5445
 1301 08e9 0000BF   		.p2align 2 	
 1302              	NEGAT:
 1303 08ec C5F10005 		RSB	R5,R5,#0
 1304 08f0 7047     		_NEXT
 1305              	
 1306              	//    ABS	 ( w -- |w| )
 1307              	// 	Absolute.
ARM GAS  stm32eforth.s 			page 27


 1308              	
 1309 08f2 E2FCFF17 		.word	_NEGAT+MAPOFFSET
 1310 08f6 03       	_ABSS:	.byte   3
 1311 08f7 414253   		.ascii "ABS"
 1312 08fa 00BF     		.p2align 2 	
 1313              	ABSS:
 1314 08fc 15F0004F 		TST	R5,#0x80000000
 1315 0900 18BF     		IT NE
 1316 0902 6D42     	    RSBNE   R5,R5,#0
 1317 0904 7047     		_NEXT
 1318              	
 1319              	//  0= ( w -- f )
 1320              	// TOS==0?
 1321              	
 1322 0906 F6FCFF17 		.word _ABSS+MAPOFFSET
 1323 090a 02       	_ZEQUAL: .byte 2
 1324 090b 303D     		.ascii "0="
 1325 090d 0000BF   		.p2align 2
 1326              	ZEQUAL:
 1327 0910 15B9     		cbnz r5,1f
 1328 0912 4FF0FF35 		mov r5,#-1
 1329 0916 7047     		_NEXT 
 1330 0918 85EA0505 	1:  eor r5,r5,r5  
 1331 091c 7047     		_NEXT 	
 1332              	
 1333              	//    =	 ( w w -- t )
 1334              	// 	Equal?
 1335              	
 1336 091e 0AFDFF17 		.word	_ZEQUAL+MAPOFFSET
 1337 0922 01       	_EQUAL:	.byte   1
 1338 0923 3D       		.ascii "="
 1339              		.p2align 2 	
 1340              	EQUAL:
 1341 0924 51F8044B 		LDR	R4,[R1],#4
 1342 0928 A542     		CMP	R5,R4
 1343 092a 0CBF     		ITE EQ 
 1344 092c 6FF00005 	    MVNEQ	R5,#0
 1345 0930 0025     		MOVNE	R5,#0
 1346 0932 7047     		_NEXT
 1347              	
 1348              	//    U<	 ( w w -- t )
 1349              	// 	Unsigned equal?
 1350              	
 1351 0934 22FDFF17 		.word	_EQUAL+MAPOFFSET
 1352 0938 02       	_ULESS:	.byte   2
 1353 0939 553C     		.ascii "U<"
 1354 093b 00       		.p2align 2 	
 1355              	ULESS:
 1356 093c 51F8044B 		LDR	R4,[R1],#4
 1357 0940 AC42     		CMP	R4,R5
 1358 0942 34BF     		ITE CC 
 1359 0944 6FF00005 		MVNCC	R5,#0
 1360 0948 0025     		MOVCS	R5,#0
 1361 094a 7047     		_NEXT
 1362              	
 1363              	//    <	( w w -- t )
 1364              	// 	Less?
ARM GAS  stm32eforth.s 			page 28


 1365              	
 1366 094c 38FDFF17 		.word	_ULESS+MAPOFFSET
 1367 0950 01       	_LESS:	.byte   1
 1368 0951 3C       		.ascii "<"
 1369 0952 00BF     		.p2align 2 	
 1370              	LESS:
 1371 0954 51F8044B 		LDR	R4,[R1],#4
 1372 0958 AC42     		CMP	R4,R5
 1373 095a B4BF     	    ITE LT
 1374 095c 6FF00005 		MVNLT	R5,#0
 1375 0960 0025     		MOVGE	R5,#0
 1376 0962 7047     		_NEXT
 1377              	
 1378              	//    >	( w w -- t )
 1379              	// 	greater?
 1380              	
 1381 0964 50FDFF17 		.word	_LESS+MAPOFFSET
 1382 0968 01       	_GREAT:	.byte   1
 1383 0969 3E       		.ascii ">"
 1384 096a 00BF     		.p2align 2 	
 1385              	GREAT:
 1386 096c 51F8044B 		LDR	R4,[R1],#4
 1387 0970 AC42     		CMP	R4,R5
 1388 0972 CCBF     		ITE GT
 1389 0974 6FF00005 	    MVNGT	R5,#0
 1390 0978 0025     		MOVLE	R5,#0
 1391 097a 7047     		_NEXT
 1392              	
 1393              	//    MAX	 ( w w -- max )
 1394              	// 	Leave maximum.
 1395              	
 1396 097c 68FDFF17 		.word	_GREAT+MAPOFFSET
 1397 0980 03       	_MAX:	.byte   3
 1398 0981 4D4158   		.ascii "MAX"
 1399              		.p2align 2 	
 1400              	MAX:
 1401 0984 51F8044B 		LDR	R4,[R1],#4
 1402 0988 AC42     		CMP	R4,R5
 1403 098a C8BF     		IT GT 
 1404 098c 2546     		MOVGT	R5,R4
 1405 098e 7047     		_NEXT
 1406              	
 1407              	//    MIN	 ( w w -- min )
 1408              	// 	Leave minimum.
 1409              	
 1410 0990 80FDFF17 		.word	_MAX+MAPOFFSET
 1411 0994 03       	_MIN:	.byte   3
 1412 0995 4D494E   		.ascii "MIN"
 1413              		.p2align 2 	
 1414              	MIN:
 1415 0998 51F8044B 		LDR	R4,[R1],#4
 1416 099c AC42     		CMP	R4,R5
 1417 099e B8BF     		IT LT
 1418 09a0 2546     		MOVLT	R5,R4
 1419 09a2 7047     		_NEXT
 1420              	
 1421              	//    +!	 ( w a -- )
ARM GAS  stm32eforth.s 			page 29


 1422              	// 	Add to memory.
 1423              	
 1424 09a4 94FDFF17 		.word	_MIN+MAPOFFSET
 1425 09a8 02       	_PSTOR:	.byte   2
 1426 09a9 2B21     		.ascii "+!"
 1427 09ab 00       		.p2align 2 	
 1428              	PSTOR:
 1429 09ac 51F8044B 		LDR	R4,[R1],#4
 1430 09b0 2E68     		LDR	R6,[R5]
 1431 09b2 2644     		ADD	R6,R6,R4
 1432 09b4 2E60     		STR	R6,[R5]
 1433 09b6 51F8045B 		_POP
 1434 09ba 7047     		_NEXT
 1435              	
 1436              	//    2!	 ( d a -- )
 1437              	// 	Store double number.
 1438              	
 1439 09bc A8FDFF17 		.word	_PSTOR+MAPOFFSET
 1440 09c0 02       	_DSTOR:	.byte   2
 1441 09c1 3221     		.ascii "2!"
 1442 09c3 00       		.p2align 2 	
 1443              	DSTOR:
 1444 09c4 51F8044B 		LDR	R4,[R1],#4
 1445 09c8 51F8046B 		LDR	R6,[R1],#4
 1446 09cc 45F8044B 		STR	R4,[R5],#4
 1447 09d0 2E60     		STR	R6,[R5]
 1448 09d2 51F8045B 		_POP
 1449 09d6 7047     		_NEXT
 1450              	
 1451              	//    2@	 ( a -- d )
 1452              	// 	Fetch double number.
 1453              	
 1454 09d8 C0FDFF17 		.word	_DSTOR+MAPOFFSET
 1455 09dc 02       	_DAT:	.byte   2
 1456 09dd 3240     		.ascii "2@"
 1457 09df 00       		.p2align 2 	
 1458              	DAT:
 1459 09e0 6C68     		LDR	R4,[R5,#4]
 1460 09e2 41F8044D 		STR	R4,[R1,#-4]!
 1461 09e6 2D68     		LDR	R5,[R5]
 1462 09e8 7047     		_NEXT
 1463              	
 1464              	//    COUNT	( b -- b+1 c )
 1465              	// 	Fetch length of string.
 1466              	
 1467 09ea DCFDFF17 		.word	_DAT+MAPOFFSET
 1468 09ee 05       	_COUNT:	.byte   5
 1469 09ef 434F554E 		.ascii "COUNT"
 1469      54
 1470              		.p2align 2 	
 1471              	COUNT:
 1472 09f4 15F8014B 		LDRB	R4,[R5],#1
 1473 09f8 41F8045D 		_PUSH
 1474 09fc 2546     		MOV	R5,R4
 1475 09fe 7047     		_NEXT
 1476              	
 1477              	//    DNEGATE	( d -- -d )
ARM GAS  stm32eforth.s 			page 30


 1478              	// 	Negate double number.
 1479              	
 1480 0a00 EEFDFF17 		.word	_COUNT+MAPOFFSET
 1481 0a04 07       	_DNEGA:	.byte   7
 1482 0a05 444E4547 		.ascii "DNEGATE"
 1482      415445
 1483              		.p2align 2 	
 1484              	DNEGA:
 1485 0a0c 0C68     		LDR	R4,[R1]
 1486 0a0e A6EB0606 		SUB	R6,R6,R6
 1487 0a12 341B     		SUBS R4,R6,R4
 1488 0a14 66EB0505 		SBC	R5,R6,R5
 1489 0a18 0C60     		STR	R4,[R1]
 1490 0a1a 7047     		_NEXT
 1491              	
 1492              	// **************************************************************************
 1493              	//  System and user variables
 1494              	
 1495              	//    doVAR	( -- a )
 1496              	// 	Run time routine for VARIABLE and CREATE.
 1497              	
 1498              	// 	.word	_DNEGA+MAPOFFSET
 1499              	// _DOVAR	.byte  COMPO+5
 1500              	// 	.ascii "doVAR"
 1501              	// 	.p2align 2 	
 1502              	DOVAR:
 1503 0a1c 41F8045D 		_PUSH
 1504 0a20 AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
 1505 0a24 52F804FB 		_UNNEST
 1506              	
 1507              	//    doCON	( -- a ) 
 1508              	// 	Run time routine for CONSTANT.
 1509              	
 1510              	// 	.word	_DOVAR+MAPOFFSET
 1511              	// _DOCON	.byte  COMPO+5
 1512              	// 	.ascii "doCON"
 1513              	// 	.p2align 2 	
 1514              	DOCON:
 1515 0a28 41F8045D 		_PUSH
 1516 0a2c 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1517 0a30 52F804FB 		_UNNEST
 1518              	
 1519              	/***********************
 1520              	  system variables 
 1521              	***********************/
 1522              	
 1523              	 // SEED ( -- a)
 1524              	 // return PRNG seed address 
 1525              	
 1526 0a34 04FEFF17 		.word _DNEGA+MAPOFFSET
 1527 0a38 04       	_SEED: .byte 4
 1528 0a39 53454544 		.ascii "SEED"
 1529 0a3d 0000BF   		.p2align 2
 1530              	SEED:
 1531 0a40 41F8045D 		_PUSH 
 1532 0a44 03F10405 		ADD R5,R3,#SEED_OFS
 1533 0a48 7047     		_NEXT 	
ARM GAS  stm32eforth.s 			page 31


 1534              	
 1535              	//  MSEC ( -- a)
 1536              	// return address of milliseconds counter
 1537 0a4a 38FEFF17 	  .word _SEED+MAPOFFSET 
 1538 0a4e 04       	_MSEC: .byte 4
 1539 0a4f 4D534543 	  .ascii "MSEC"
 1540 0a53 00       	  .p2align 2 
 1541              	MSEC:
 1542 0a54 41F8045D 	  _PUSH
 1543 0a58 03F10805 	  ADD R5,R3,#TICKS_OFS
 1544 0a5c 7047     	  _NEXT 
 1545              	
 1546              	// TIMER ( -- a )
 1547              	// count down timer 
 1548 0a5e 4EFEFF17 	  .word _MSEC+MAPOFFSET
 1549 0a62 05       	_TIMER:  .byte 5
 1550 0a63 54494D45 	  .ascii "TIMER"
 1550      52
 1551              	  .p2align 2 
 1552              	TIMER:
 1553 0a68 41F8045D 	  _PUSH 
 1554 0a6c 03F10C05 	  ADD R5,R3,#TIMER_OFS
 1555 0a70 7047     	  _NEXT
 1556              	
 1557              	// >RAM ( -- a )
 1558              	// compilation target 
 1559              	// -1 compile to RAM, 0 compile to FLASH 
 1560 0a72 62FEFF17 		.word _TIMER+MAPOFFSET
 1561 0a76 04       	_TORAM: .byte 4 
 1562 0a77 3E52414D 		.ascii ">RAM" 
 1563 0a7b 00       		.p2align 2 
 1564              	TORAM:
 1565 0a7c 41F8045D 		_PUSH 
 1566 0a80 03F11005 		ADD R5,R3,#TORAM_OFS
 1567 0a84 7047     		_NEXT 
 1568              	
 1569              	//    'BOOT	 ( -- a )
 1570              	// 	Application.
 1571              	
 1572 0a86 76FEFF17 		.word	_TORAM+MAPOFFSET
 1573 0a8a 05       	_TBOOT:	.byte   5
 1574 0a8b 27424F4F 		.ascii "'BOOT"
 1574      54
 1575              		.p2align 2 	
 1576              	TBOOT:
 1577 0a90 41F8045D 		_PUSH
 1578 0a94 03F11805 		ADD	R5,R3,#BOOT_OFS 
 1579 0a98 7047     		_NEXT
 1580              		
 1581              	//    BASE	( -- a )
 1582              	// 	Storage of the radix base for numeric I/O.
 1583              	
 1584 0a9a 8AFEFF17 		.word	_TBOOT+MAPOFFSET
 1585 0a9e 04       	_BASE:	.byte   4
 1586 0a9f 42415345 		.ascii "BASE"
 1587 0aa3 00       		.p2align 2 	
 1588              	BASE:
ARM GAS  stm32eforth.s 			page 32


 1589 0aa4 41F8045D 		_PUSH
 1590 0aa8 03F11C05 		ADD	R5,R3,#BASE_OFS
 1591 0aac 7047     		_NEXT
 1592              	
 1593              	//    tmp	 ( -- a )
 1594              	// 	A temporary storage location used in parse and find.
 1595              	
 1596              	// 	.word	_BASE+MAPOFFSET
 1597              	// _TEMP	.byte   COMPO+3
 1598              	// 	.ascii "tmp"
 1599              	// 	.p2align 2 	
 1600              	TEMP:
 1601 0aae 41F8045D 		_PUSH
 1602 0ab2 03F12005 		ADD	R5,R3,#TMP_OFS
 1603 0ab6 7047     		_NEXT
 1604              	
 1605              	//    SPAN	( -- a )
 1606              	// 	Hold character count received by EXPECT.
 1607              	
 1608 0ab8 9EFEFF17 		.word	_BASE+MAPOFFSET
 1609 0abc 04       	_SPAN:	.byte   4
 1610 0abd 5350414E 		.ascii "SPAN"
 1611 0ac1 0000BF   		.p2align 2 	
 1612              	SPAN:
 1613 0ac4 41F8045D 		_PUSH
 1614 0ac8 03F12405 		ADD	R5,R3,#SPAN_OFS
 1615 0acc 7047     		_NEXT
 1616              	
 1617              	//    >IN	 ( -- a )
 1618              	// 	Hold the character pointer while parsing input stream.
 1619              	
 1620 0ace BCFEFF17 		.word	_SPAN+MAPOFFSET
 1621 0ad2 03       	_INN:	.byte   3
 1622 0ad3 3E494E   		.ascii ">IN"
 1623 0ad6 00BF     		.p2align 2 	
 1624              	INN:
 1625 0ad8 41F8045D 		_PUSH
 1626 0adc 03F12805 		ADD	R5,R3,#TOIN_OFS
 1627 0ae0 7047     		_NEXT
 1628              	
 1629              	//    #TIB	( -- a )
 1630              	// 	Hold the current count and address of the terminal input buffer.
 1631              	
 1632 0ae2 D2FEFF17 		.word	_INN+MAPOFFSET
 1633 0ae6 04       	_NTIB:	.byte   4
 1634 0ae7 23544942 		.ascii "#TIB"
 1635 0aeb 00       		.p2align 2 	
 1636              	NTIB:
 1637 0aec 41F8045D 		_PUSH
 1638 0af0 03F12C05 		ADD	R5,R3,#NTIB_OFS
 1639 0af4 7047     		_NEXT
 1640              	
 1641              	//    'EVAL	( -- a )
 1642              	// 	Execution vector of EVAL.
 1643              	
 1644 0af6 E6FEFF17 		.word	_NTIB+MAPOFFSET
 1645 0afa 05       	_TEVAL:	.byte   5
ARM GAS  stm32eforth.s 			page 33


 1646 0afb 27455641 		.ascii "'EVAL"
 1646      4C
 1647              		.p2align 2 	
 1648              	TEVAL:
 1649 0b00 41F8045D 		_PUSH
 1650 0b04 03F13405 		ADD	R5,R3,#EVAL_OFS
 1651 0b08 7047     		_NEXT
 1652              	
 1653              	//    HLD	 ( -- a )
 1654              	// 	Hold a pointer in building a numeric output string.
 1655              	
 1656 0b0a FAFEFF17 		.word	_TEVAL+MAPOFFSET
 1657 0b0e 03       	_HLD:	.byte   3
 1658 0b0f 484C44   		.ascii "HLD"
 1659 0b12 00BF     		.p2align 2 	
 1660              	HLD:
 1661 0b14 41F8045D 		_PUSH
 1662 0b18 03F13805 		ADD	R5,R3,#HLD_OFS
 1663 0b1c 7047     		_NEXT
 1664              	
 1665              	//    CONTEXT	( -- a )
 1666              	// 	A area to specify vocabulary search order.
 1667              	
 1668 0b1e 0EFFFF17 		.word	_HLD+MAPOFFSET
 1669 0b22 07       	_CNTXT:	.byte   7
 1670 0b23 434F4E54 		.ascii "CONTEXT"
 1670      455854
 1671 0b2a 00BF     		.p2align 2 	
 1672              	CNTXT:
 1673              	CRRNT:
 1674 0b2c 41F8045D 		_PUSH
 1675 0b30 03F13C05 		ADD	R5,R3,#CTXT_OFS
 1676 0b34 7047     		_NEXT
 1677              	
 1678              	//    CP	( -- a )
 1679              	// 	Point to top name in RAM vocabulary.
 1680              	
 1681 0b36 22FFFF17 		.word	_CNTXT+MAPOFFSET
 1682 0b3a 02       	_CP:	.byte   2
 1683 0b3b 4350     		.ascii "CP"
 1684 0b3d 0000BF   		.p2align 2 	
 1685              	CPP:
 1686 0b40 41F8045D 		_PUSH
 1687 0b44 03F14405 		ADD	R5,R3,#USER_CTOP_OFS
 1688 0b48 7047     		_NEXT
 1689              	
 1690              	//   FCP ( -- a )
 1691              	//  Point ot top of Forth system dictionary
 1692 0b4a 3AFFFF17 		.word _CP+MAPOFFSET
 1693 0b4e 03       	_FCP: .byte 3            
 1694 0b4f 464350   		.ascii "FCP"
 1695 0b52 00BF     		.p2align 2 
 1696              	FCP: 
 1697 0b54 41F8045D 		_PUSH 
 1698 0b58 03F14005 		ADD R5,R3,#FORTH_CTOP_OFS 
 1699 0b5c 7047     		_NEXT 
 1700              	
ARM GAS  stm32eforth.s 			page 34


 1701              	//    LAST	( -- a )
 1702              	// 	Point to the last name in the name dictionary.
 1703              	
 1704 0b5e 4EFFFF17 		.word	_FCP+MAPOFFSET
 1705 0b62 04       	_LAST:	.byte   4
 1706 0b63 4C415354 		.ascii "LAST"
 1707 0b67 00       		.p2align 2 	
 1708              	LAST:
 1709 0b68 41F8045D 		_PUSH
 1710 0b6c 03F14805 		ADD	R5,R3,#LASTN_OFS
 1711 0b70 7047     		_NEXT
 1712              	
 1713              	/***********************
 1714              		system constants 
 1715              	***********************/
 1716              	
 1717              	//	USER_BEGIN ( -- a )
 1718              	//  where user area begin in RAM
 1719 0b72 62FFFF17 		.word _LAST+MAPOFFSET
 1720 0b76 0A       	_USER_BGN: .byte 10
 1721 0b77 55534552 		.ascii "USER_BEGIN"
 1721      5F424547 
 1721      494E
 1722 0b81 0000BF   		.p2align 2
 1723              	USER_BEGIN:
 1724 0b84 41F8045D 		_PUSH 
 1725 0b88 004D     		ldr r5,USR_BGN_ADR 
 1726 0b8a 7047     		_NEXT 
 1727              	USR_BGN_ADR:
 1728 0b8c C81D0018 	.word CTOP+MAPOFFSET 
 1729              	
 1730              	//  USER_END ( -- a )
 1731              	//  where user area end in RAM 
 1732 0b90 76FFFF17 		.word _USER_BGN+MAPOFFSET
 1733 0b94 08       	_USER_END: .byte 8 
 1734 0b95 55534552 		.ascii "USER_END" 
 1734      5F454E44 
 1735 0b9d 0000BF   		.p2align 2 
 1736              	USER_END:
 1737 0ba0 41F8045D 		_PUSH 
 1738 0ba4 4FF49C45 		mov r5,#DEND&0xffff
 1739 0ba8 C2F20005 		movt r5,#DEND>>16 
 1740 0bac 7047     		_NEXT 
 1741              	
 1742              	//  IMG_ADR ( -- a )
 1743              	//  where user image is saved in FLASH
 1744 0bae 94FFFF17 		.word _USER_END+MAPOFFSET
 1745 0bb2 07       	_IMG_ADR: .byte 7
 1746 0bb3 494D475F 		.ascii "IMG_ADR"
 1746      414452
 1747 0bba 00BF     		.p2align 2 
 1748              	IMG_ADR:
 1749 0bbc 41F8045D 		_PUSH
 1750 0bc0 004D     		ldr r5,USR_IMG_ADR   
 1751 0bc2 7047     		_NEXT 
 1752              	USR_IMG_ADR:
 1753 0bc4 002C0000 		.word USER_SPACE 
ARM GAS  stm32eforth.s 			page 35


 1754              	
 1755              	// image signature 
 1756 0bc8 B2FFFF17 		.word _IMG_ADR+MAPOFFSET
 1757 0bcc 08       	_IMG_SIGN: .byte 8
 1758 0bcd 494D475F 		.ascii "IMG_SIGN"
 1758      5349474E 
 1759 0bd5 0000BF   		.p2align 2	
 1760              	IMG_SIGN: 
 1761 0bd8 41F8045D 		_PUSH 
 1762 0bdc 03F11405 		ADD r5,r3,#IMG_SIGN_OFS 
 1763 0be0 7047     		_NEXT 
 1764              	
 1765              	/* *********************
 1766              	  Common functions
 1767              	***********************/
 1768              	
 1769              	//    WITHIN	( u ul uh -- t )
 1770              	// 	Return true if u is within the range of ul and uh.
 1771              	
 1772 0be2 B2FFFF17 		.word	_IMG_ADR+MAPOFFSET
 1773 0be6 06       	_WITHI:	.byte   6
 1774 0be7 57495448 		.ascii "WITHIN"
 1774      494E
 1775 0bed 0000BF   		.p2align 2 	
 1776              	WITHI:
 1777 0bf0 42F804ED 		_NEST
 1778 0bf4 FFF760FD 		BL	OVER
 1779 0bf8 FFF7B8FD 		BL	SUBB
 1780 0bfc FFF72EFD 		BL	TOR
 1781 0c00 FFF7B4FD 		BL	SUBB
 1782 0c04 FFF718FD 		BL	RFROM
 1783 0c08 FFF798FE 		BL	ULESS
 1784 0c0c 52F804FB 		_UNNEST
 1785              	
 1786              	//  Divide
 1787              	
 1788              	//    UM/MOD	( udl udh u -- ur uq )
 1789              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1790              	
 1791 0c10 E6FFFF17 		.word	_WITHI+MAPOFFSET
 1792 0c14 06       	_UMMOD:	.byte   6
 1793 0c15 554D2F4D 		.ascii "UM/MOD"
 1793      4F44
 1794 0c1b 00       		.p2align 2 	
 1795              	UMMOD:
 1796 0c1c 4FF00107 		MOV	R7,#1
 1797 0c20 51F8044B 		LDR	R4,[R1],#4
 1798 0c24 0E68     		LDR	R6,[R1]
 1799              	UMMOD0:
 1800 0c26 B619     		ADDS	R6,R6,R6
 1801 0c28 6441     		ADCS	R4,R4,R4
 1802 0c2a 04D3     		BCC	UMMOD1
 1803 0c2c A4EB0504 		SUB	R4,R4,R5
 1804 0c30 06F10106 		ADD	R6,R6,#1
 1805 0c34 04E0     		B UMMOD2
 1806              	UMMOD1:
 1807 0c36 641B     		SUBS	R4,R4,R5 
ARM GAS  stm32eforth.s 			page 36


 1808 0c38 28BF     		IT CS 
 1809 0c3a 0136     		ADDCS	R6,R6,#1
 1810 0c3c 00D2     		BCS	UMMOD2
 1811 0c3e 2C44     		ADD	R4,R4,R5
 1812              	UMMOD2:
 1813 0c40 FF19     		ADDS	R7,R7,R7
 1814 0c42 F0D3     		BCC	UMMOD0
 1815 0c44 3546     		MOV	R5,R6
 1816 0c46 0C60     		STR	R4,[R1]
 1817 0c48 7047     		_NEXT
 1818              	
 1819              	//    M/MOD	( d n -- r q )
 1820              	// 	Signed floored divide of double by single. Return mod and quotient.
 1821              	
 1822 0c4a 14000018 		.word	_UMMOD+MAPOFFSET
 1823 0c4e 05       	_MSMOD:	.byte  5
 1824 0c4f 4D2F4D4F 		.ascii "M/MOD"
 1824      44
 1825              		.p2align 2 	
 1826              	MSMOD:	
 1827 0c54 42F804ED 		_NEST
 1828 0c58 FFF71CFD 		BL	DUPP
 1829 0c5c FFF734FD 		BL	ZLESS
 1830 0c60 FFF718FD 		BL	DUPP
 1831 0c64 FFF7FAFC 		BL	TOR
 1832 0c68 FFF7AAFC 		BL	QBRAN
 1833 0c6c 80000018 		.word	MMOD1+MAPOFFSET
 1834 0c70 FFF73CFE 		BL	NEGAT
 1835 0c74 FFF7F2FC 		BL	TOR
 1836 0c78 FFF7C8FE 		BL	DNEGA
 1837 0c7c FFF7DCFC 		BL	RFROM
 1838              	MMOD1:
 1839 0c80 FFF7ECFC 	  BL	TOR
 1840 0c84 FFF706FD 		BL	DUPP
 1841 0c88 FFF71EFD 		BL	ZLESS
 1842 0c8c FFF798FC 		BL	QBRAN
 1843 0c90 9C000018 		.word	MMOD2+MAPOFFSET
 1844 0c94 FFF7DAFC 		BL	RAT
 1845 0c98 FFF760FD 		BL	PLUS
 1846              	MMOD2:
 1847 0c9c FFF7CCFC 	  BL	RFROM
 1848 0ca0 FFF7BCFF 		BL	UMMOD
 1849 0ca4 FFF7C8FC 		BL	RFROM
 1850 0ca8 FFF78AFC 		BL	QBRAN
 1851 0cac BC000018 		.word	MMOD3+MAPOFFSET
 1852 0cb0 FFF7F8FC 		BL	SWAP
 1853 0cb4 FFF71AFE 		BL	NEGAT
 1854 0cb8 FFF7F4FC 		BL	SWAP
 1855              	MMOD3:   
 1856 0cbc 52F804FB 		_UNNEST
 1857              	
 1858              	//    /MOD	( n n -- r q )
 1859              	// 	Signed divide. Return mod and quotient.
 1860              	
 1861 0cc0 4E000018 		.word	_MSMOD+MAPOFFSET
 1862 0cc4 04       	_SLMOD:	.byte   4
 1863 0cc5 2F4D4F44 		.ascii "/MOD"
ARM GAS  stm32eforth.s 			page 37


 1864 0cc9 0000BF   		.p2align 2 	
 1865              	SLMOD:
 1866 0ccc 42F804ED 		_NEST
 1867 0cd0 FFF7F2FC 		BL	OVER
 1868 0cd4 FFF7F8FC 		BL	ZLESS
 1869 0cd8 FFF7E4FC 		BL	SWAP
 1870 0cdc FFF7BAFF 		BL	MSMOD
 1871 0ce0 52F804FB 		_UNNEST
 1872              	
 1873              	//    MOD	 ( n n -- r )
 1874              	// 	Signed divide. Return mod only.
 1875              	
 1876 0ce4 C4000018 		.word	_SLMOD+MAPOFFSET
 1877 0ce8 03       	_MODD:	.byte  3
 1878 0ce9 4D4F44   		.ascii "MOD"
 1879              		.p2align 2 	
 1880              	MODD:
 1881 0cec 42F804ED 		_NEST
 1882 0cf0 FFF7ECFF 		BL	SLMOD
 1883 0cf4 FFF7C6FC 		BL	DROP
 1884 0cf8 52F804FB 		_UNNEST
 1885              	
 1886              	//    /	   ( n n -- q )
 1887              	// 	Signed divide. Return quotient only.
 1888              	
 1889 0cfc E8000018 		.word	_MODD+MAPOFFSET
 1890 0d00 01       	_SLASH:	.byte  1
 1891 0d01 2F       		.ascii "/"
 1892 0d02 00BF     		.p2align 2 	
 1893              	SLASH:
 1894 0d04 42F804ED 		_NEST
 1895 0d08 FFF7E0FF 		BL	SLMOD
 1896 0d0c FFF7CAFC 		BL	SWAP
 1897 0d10 FFF7B8FC 		BL	DROP
 1898 0d14 52F804FB 		_UNNEST
 1899              	
 1900              	//    */MOD	( n1 n2 n3 -- r q )
 1901              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1902              	
 1903 0d18 00010018 		.word	_SLASH+MAPOFFSET
 1904 0d1c 05       	_SSMOD:	.byte  5
 1905 0d1d 2A2F4D4F 		.ascii "*/MOD"
 1905      44
 1906 0d22 00BF     		.p2align 2 	
 1907              	SSMOD:
 1908 0d24 42F804ED 		_NEST
 1909 0d28 FFF798FC 		BL	TOR
 1910 0d2c FFF73AFD 		BL	MSTAR
 1911 0d30 FFF782FC 		BL	RFROM
 1912 0d34 FFF78EFF 		BL	MSMOD
 1913 0d38 52F804FB 		_UNNEST
 1914              	
 1915              	//    */	  ( n1 n2 n3 -- q )
 1916              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1917              	
 1918 0d3c 1C010018 		.word	_SSMOD+MAPOFFSET
 1919 0d40 02       	_STASL:	.byte  2
ARM GAS  stm32eforth.s 			page 38


 1920 0d41 2A2F     		.ascii "*/"
 1921 0d43 00       		.p2align 2 	
 1922              	STASL:
 1923 0d44 42F804ED 		_NEST
 1924 0d48 FFF7ECFF 		BL	SSMOD
 1925 0d4c FFF7AAFC 		BL	SWAP
 1926 0d50 FFF798FC 		BL	DROP
 1927 0d54 52F804FB 		_UNNEST
 1928              	
 1929              	// **************************************************************************
 1930              	//  Miscellaneous
 1931              	
 1932              	//    ALIGNED	( b -- a )
 1933              	// 	Align address to the cell boundary.
 1934              	
 1935 0d58 40010018 		.word	_STASL+MAPOFFSET
 1936 0d5c 07       	_ALGND:	.byte   7
 1937 0d5d 414C4947 		.ascii "ALIGNED"
 1937      4E4544
 1938              		.p2align 2 	
 1939              	ALGND:
 1940 0d64 05F10305 		ADD	R5,R5,#3
 1941 0d68 6FF00304 		MVN	R4,#3
 1942 0d6c 05EA0405 		AND	R5,R5,R4
 1943 0d70 7047     		_NEXT
 1944              	
 1945              	//    >CHAR	( c -- c )
 1946              	// 	Filter non-printing characters.
 1947              	
 1948 0d72 5C010018 		.word	_ALGND+MAPOFFSET
 1949 0d76 05       	_TCHAR:	.byte  5
 1950 0d77 3E434841 		.ascii ">CHAR"
 1950      52
 1951              		.p2align 2 	
 1952              	TCHAR:
 1953 0d7c 42F804ED 		_NEST
 1954 0d80 FFF7FBFB 		_DOLIT
 1955 0d84 7F000000 		.word	0x7F
 1956 0d88 FFF7A8FC 		BL	ANDD
 1957 0d8c FFF782FC 		BL	DUPP	// mask msb
 1958 0d90 FFF742FD 		BL	BLANK
 1959 0d94 FFF7F1FB 		_DOLIT
 1960 0d98 7F000000 		.word	127
 1961 0d9c FFF728FF 		BL	WITHI	// check for printable
 1962 0da0 FFF79AFD 		BL	INVER
 1963 0da4 FFF70CFC 		BL	QBRAN
 1964 0da8 B8010018 		.word	TCHA1+MAPOFFSET
 1965 0dac FFF76AFC 		BL	DROP
 1966 0db0 FFF7E3FB 		_DOLIT
 1967 0db4 5F000000 		.word	'_'	// replace non-printables
 1968              	TCHA1:
 1969 0db8 52F804FB 		  _UNNEST
 1970              	
 1971              	//    DEPTH	( -- n )
 1972              	// 	Return the depth of the data stack.
 1973              	
 1974 0dbc 76010018 		.word	_TCHAR+MAPOFFSET
ARM GAS  stm32eforth.s 			page 39


 1975 0dc0 05       	_DEPTH:	.byte  5
 1976 0dc1 44455054 		.ascii "DEPTH"
 1976      48
 1977 0dc6 00BF     		.p2align 2 	
 1978              	DEPTH:
 1979 0dc8 03F59D46 		ADD	R6,R3,#SPP&0xffff 
 1980 0dcc A6EB0106 		SUB	R6,R6,R1
 1981 0dd0 41F8045D 		_PUSH
 1982 0dd4 4FEAA605 		ASR	R5,R6,#2
 1983 0dd8 7047     		_NEXT
 1984              	
 1985              	//    PICK	( ... +n -- ... w )
 1986              	// 	Copy the nth stack item to tos.
 1987              	
 1988 0dda C0010018 		.word	_DEPTH+MAPOFFSET
 1989 0dde 04       	_PICK:	.byte  4
 1990 0ddf 5049434B 		.ascii "PICK"
 1991 0de3 00       		.p2align 2 	
 1992              	PICK:
 1993 0de4 42F804ED 		_NEST
 1994 0de8 FFF7E6FC 		BL	ONEP
 1995 0dec FFF71EFD 		BL	CELLS
 1996 0df0 FFF73EFC 		BL	SPAT
 1997 0df4 FFF7B2FC 		BL	PLUS
 1998 0df8 FFF708FC 		BL	AT
 1999 0dfc 52F804FB 		_UNNEST
 2000              	
 2001              	// **************************************************************************
 2002              	//  Memory access
 2003              	
 2004              	//    HERE	( -- a )
 2005              	// 	Return the top of the code dictionary.
 2006              	
 2007 0e00 DE010018 		.word	_PICK+MAPOFFSET
 2008 0e04 04       	_HERE:	.byte  4
 2009 0e05 48455245 		.ascii "HERE"
 2010 0e09 0000BF   		.p2align 2 	
 2011              	HERE:
 2012 0e0c 42F804ED 		_NEST
 2013 0e10 FFF796FE 		BL	CPP
 2014 0e14 FFF7FAFB 		BL	AT
 2015 0e18 52F804FB 		_UNNEST
 2016              		
 2017              	//    PAD	 ( -- a )
 2018              	// 	Return the address of a temporary buffer.
 2019              	
 2020 0e1c 04020018 		.word	_HERE+MAPOFFSET
 2021 0e20 03       	_PAD:	.byte  3
 2022 0e21 504144   		.ascii "PAD"
 2023              		.p2align 2 	
 2024              	PAD:
 2025 0e24 42F804ED 		_NEST
 2026 0e28 FFF7F0FF 		BL	HERE
 2027 0e2c 05F15005 		ADD	R5,R5,#80
 2028 0e30 52F804FB 		_UNNEST
 2029              	
 2030              	//    TIB	 ( -- a )
ARM GAS  stm32eforth.s 			page 40


 2031              	// 	Return the address of the terminal input buffer.
 2032              	
 2033 0e34 20020018 		.word	_PAD+MAPOFFSET
 2034 0e38 03       	_TIB:	.byte  3
 2035 0e39 544942   		.ascii "TIB"
 2036              		.p2align 2 	
 2037              	TIB:
 2038 0e3c 41F8045D 		_PUSH
 2039 0e40 1D6B     		ldr r5,[r3,#TIB_OFS]
 2040 0e42 7047     		_NEXT
 2041              	
 2042              	//    @EXECUTE	( a -- )
 2043              	// 	Execute vector stored in address a.
 2044              	
 2045 0e44 38020018 		.word	_TIB+MAPOFFSET
 2046 0e48 08       	_ATEXE:	.byte   8
 2047 0e49 40455845 		.ascii "@EXECUTE"
 2047      43555445 
 2048 0e51 0000BF   		.p2align 2 	
 2049              	ATEXE:
 2050 0e54 2C00     		MOVS	R4,R5
 2051 0e56 51F8045B 		_POP
 2052 0e5a 2468     		LDR	R4,[R4]
 2053 0e5c 44F00104 		ORR	R4,R4,#1
 2054 0e60 18BF     	    IT NE 
 2055 0e62 2047     		BXNE	R4
 2056 0e64 7047     		_NEXT
 2057              	
 2058              	//    CMOVE	( b1 b2 u -- )
 2059              	// 	Copy u bytes from b1 to b2.
 2060              	
 2061 0e66 48020018 		.word	_ATEXE+MAPOFFSET
 2062 0e6a 05       	_CMOVE:	.byte   5
 2063 0e6b 434D4F56 		.ascii "CMOVE"
 2063      45
 2064              		.p2align 2 	
 2065              	CMOVE:
 2066 0e70 51F8046B 		LDR	R6,[R1],#4
 2067 0e74 51F8047B 		LDR	R7,[R1],#4
 2068 0e78 03E0     		B CMOV1
 2069              	CMOV0:
 2070 0e7a 17F8014B 		LDRB	R4,[R7],#1
 2071 0e7e 06F8014B 		STRB	R4,[R6],#1
 2072              	CMOV1:
 2073 0e82 2D00     		MOVS	R5,R5
 2074 0e84 02D0     		BEQ	CMOV2
 2075 0e86 A5F10105 		SUB	R5,R5,#1
 2076 0e8a F6E7     		B CMOV0
 2077              	CMOV2:
 2078 0e8c 51F8045B 		_POP
 2079 0e90 7047     		_NEXT
 2080              	
 2081              	//    MOVE	( a1 a2 u -- )
 2082              	// 	Copy u words from a1 to a2.
 2083              	
 2084 0e92 6A020018 		.word	_CMOVE+MAPOFFSET
 2085 0e96 04       	_MOVE:	.byte   4
ARM GAS  stm32eforth.s 			page 41


 2086 0e97 4D4F5645 		.ascii "MOVE"
 2087 0e9b 00       		.p2align 2 	
 2088              	MOVE:
 2089 0e9c 25F00305 		AND	R5,R5,#-4
 2090 0ea0 51F8046B 		LDR	R6,[R1],#4
 2091 0ea4 51F8047B 		LDR	R7,[R1],#4
 2092 0ea8 03E0     		B MOVE1
 2093              	MOVE0:
 2094 0eaa 57F8044B 		LDR	R4,[R7],#4
 2095 0eae 46F8044B 		STR	R4,[R6],#4
 2096              	MOVE1:
 2097 0eb2 2D00     		MOVS	R5,R5
 2098 0eb4 02D0     		BEQ	MOVE2
 2099 0eb6 A5F10405 		SUB	R5,R5,#4
 2100 0eba F6E7     		B MOVE0
 2101              	MOVE2:
 2102 0ebc 51F8045B 		_POP
 2103 0ec0 7047     		_NEXT
 2104              	
 2105              	//    FILL	( b u c -- )
 2106              	// 	Fill u bytes of character c to area beginning at b.
 2107              	
 2108 0ec2 96020018 		.word	_MOVE+MAPOFFSET
 2109 0ec6 04       	_FILL:	.byte   4
 2110 0ec7 46494C4C 		.ascii "FILL"
 2111 0ecb 00       		.p2align 2 	
 2112              	FILL:
 2113 0ecc 51F8046B 		LDR	R6,[R1],#4
 2114 0ed0 51F8047B 		LDR	R7,[R1],#4
 2115              	FILL0:
 2116 0ed4 00E0     		B FILL1
 2117 0ed6 2D46     		MOV	R5,R5
 2118              	FILL1:
 2119 0ed8 07F8015B 		STRB	R5,[R7],#1
 2120 0edc 3600     		MOVS	R6,R6
 2121 0ede 02D0     		BEQ	FILL2
 2122 0ee0 A6F10106 		SUB	R6,R6,#1
 2123 0ee4 F6E7     		B FILL0
 2124              	FILL2:
 2125 0ee6 51F8045B 		_POP
 2126 0eea 7047     		_NEXT
 2127              	
 2128              	//    PACK$	( b u a -- a )
 2129              	// 	Build a counted word with u characters from b. Null fill.
 2130              	
 2131 0eec C6020018 		.word	_FILL+MAPOFFSET
 2132 0ef0 05       	_PACKS:	.byte  5
 2133 0ef1 5041434B 		.ascii "PACK$$"
 2133      2424
 2134 0ef7 00       		.p2align 2 	
 2135              	PACKS:
 2136 0ef8 42F804ED 		_NEST
 2137 0efc FFF732FF 		BL	ALGND
 2138 0f00 FFF7C8FB 		BL	DUPP
 2139 0f04 FFF7AAFB 		BL	TOR			// strings only on cell boundary
 2140 0f08 FFF7D6FB 		BL	OVER
 2141 0f0c FFF726FC 		BL	PLUS
ARM GAS  stm32eforth.s 			page 42


 2142 0f10 FFF752FC 		BL	ONEP
 2143 0f14 FFF731FB 		_DOLIT
 2144 0f18 FCFFFFFF 		.word	0xFFFFFFFC
 2145 0f1c FFF7DEFB 		BL	ANDD			// count mod cell
 2146 0f20 FFF72BFB 		_DOLIT
 2147 0f24 00000000 		.word	0
 2148 0f28 FFF7BCFB 		BL	SWAP
 2149 0f2c FFF764FB 		BL	STORE			// null fill cell
 2150 0f30 FFF78CFB 		BL	RAT
 2151 0f34 FFF7B8FC 		BL	DDUP
 2152 0f38 FFF76EFB 		BL	CSTOR
 2153 0f3c FFF73CFC 		BL	ONEP			// save count
 2154 0f40 FFF7B0FB 		BL	SWAP
 2155 0f44 FFF794FF 		BL	CMOVE
 2156 0f48 FFF776FB 		BL	RFROM
 2157 0f4c 52F804FB 		_UNNEST   			// move string
 2158              	
 2159              	// **************************************************************************
 2160              	//  Numeric output, single precision
 2161              	
 2162              	//    DIGIT	( u -- c )
 2163              	// 	Convert digit u to a character.
 2164              	
 2165 0f50 F0020018 		.word	_PACKS+MAPOFFSET
 2166 0f54 05       	_DIGIT:	.byte  5
 2167 0f55 44494749 		.ascii "DIGIT"
 2167      54
 2168 0f5a 00BF     		.p2align 2 	
 2169              	DIGIT:
 2170 0f5c 42F804ED 		_NEST
 2171 0f60 FFF70BFB 		_DOLIT
 2172 0f64 09000000 		.word	9
 2173 0f68 FFF7A6FB 		BL	OVER
 2174 0f6c FFF7F2FC 		BL	LESS
 2175 0f70 05F00705 		AND	R5,R5,#7
 2176 0f74 FFF7F2FB 		BL	PLUS
 2177 0f78 05F13005 		ADD	R5,R5,#'0'
 2178 0f7c 52F804FB 		_UNNEST
 2179              	
 2180              	//    EXTRACT	( n base -- n c )
 2181              	// 	Extract the least significant digit from n.
 2182              	
 2183 0f80 54030018 		.word	_DIGIT+MAPOFFSET
 2184 0f84 07       	_EXTRC:	.byte  7
 2185 0f85 45585452 		.ascii "EXTRACT"
 2185      414354
 2186              		.p2align 2 	
 2187              	EXTRC:
 2188 0f8c 42F804ED 		_NEST
 2189 0f90 FFF7F3FA 		_DOLIT
 2190 0f94 00000000 		.word	0
 2191 0f98 FFF784FB 		BL	SWAP
 2192 0f9c FFF73EFE 		BL	UMMOD
 2193 0fa0 FFF780FB 		BL	SWAP
 2194 0fa4 FFF7DAFF 		BL	DIGIT
 2195 0fa8 52F804FB 		_UNNEST
 2196              	
ARM GAS  stm32eforth.s 			page 43


 2197              	//    <#	  ( -- )
 2198              	// 	Initiate the numeric output process.
 2199              	
 2200 0fac 84030018 		.word	_EXTRC+MAPOFFSET
 2201 0fb0 02       	_BDIGS:	.byte  2
 2202 0fb1 3C23     		.ascii "<#"
 2203 0fb3 00       		.p2align 2 	
 2204              	BDIGS:
 2205 0fb4 42F804ED 		_NEST
 2206 0fb8 FFF734FF 		BL	PAD
 2207 0fbc FFF7AAFD 		BL	HLD
 2208 0fc0 FFF71AFB 		BL	STORE
 2209 0fc4 52F804FB 		_UNNEST
 2210              	
 2211              	//    HOLD	( c -- )
 2212              	// 	Insert a character into the numeric output string.
 2213              	
 2214 0fc8 B0030018 		.word	_BDIGS+MAPOFFSET
 2215 0fcc 04       	_HOLD:	.byte  4
 2216 0fcd 484F4C44 		.ascii "HOLD"
 2217 0fd1 0000BF   		.p2align 2 	
 2218              	HOLD:
 2219 0fd4 42F804ED 		_NEST
 2220 0fd8 FFF79CFD 		BL	HLD
 2221 0fdc FFF716FB 		BL	AT
 2222 0fe0 FFF7F2FB 		BL	ONEM
 2223 0fe4 FFF756FB 		BL	DUPP
 2224 0fe8 FFF794FD 		BL	HLD
 2225 0fec FFF704FB 		BL	STORE
 2226 0ff0 FFF712FB 		BL	CSTOR
 2227 0ff4 52F804FB 		_UNNEST
 2228              	
 2229              	//    #	   ( u -- u )
 2230              	// 	Extract one digit from u and append the digit to output string.
 2231              	
 2232 0ff8 CC030018 		.word	_HOLD+MAPOFFSET
 2233 0ffc 01       	_DIG:	.byte  1
 2234 0ffd 23       		.ascii "#"
 2235 0ffe 00BF     		.p2align 2 	
 2236              	DIG:
 2237 1000 42F804ED 		_NEST
 2238 1004 FFF74EFD 		BL	BASE
 2239 1008 FFF700FB 		BL	AT
 2240 100c FFF7BEFF 		BL	EXTRC
 2241 1010 FFF7E0FF 		BL	HOLD
 2242 1014 52F804FB 		_UNNEST
 2243              	
 2244              	//    #S	  ( u -- 0 )
 2245              	// 	Convert u until all digits are added to the output string.
 2246              	
 2247 1018 FC030018 		.word	_DIG+MAPOFFSET
 2248 101c 02       	_DIGS:	.byte  2
 2249 101d 2353     		.ascii "#S"
 2250 101f 00       		.p2align 2 	
 2251              	DIGS:
 2252 1020 42F804ED 		_NEST
 2253              	DIGS1:
ARM GAS  stm32eforth.s 			page 44


 2254 1024 FFF7ECFF 	    BL	DIG
 2255 1028 FFF734FB 		BL	DUPP
 2256 102c FFF7C8FA 		BL	QBRAN
 2257 1030 36040018 		.word	DIGS2+MAPOFFSET
 2258 1034 F6E7     		B	DIGS1
 2259              	DIGS2:
 2260 1036 52F804FB 		  _UNNEST
 2261              	
 2262              	//    SIGN	( n -- )
 2263              	// 	Add a minus sign to the numeric output string.
 2264              	
 2265 103a 1C040018 		.word	_DIGS+MAPOFFSET
 2266 103e 04       	_SIGN:	.byte  4
 2267 103f 5349474E 		.ascii "SIGN"
 2268 1043 00       		.p2align 2 	
 2269              	SIGN:
 2270 1044 42F804ED 		_NEST
 2271 1048 FFF73EFB 		BL	ZLESS
 2272 104c FFF7B8FA 		BL	QBRAN
 2273 1050 60040018 		.word	SIGN1+MAPOFFSET
 2274 1054 FFF791FA 		_DOLIT
 2275 1058 2D000000 		.word	'-'
 2276 105c FFF7BAFF 		BL	HOLD
 2277              	SIGN1:
 2278 1060 52F804FB 		  _UNNEST
 2279              	
 2280              	//    #>	  ( w -- b u )
 2281              	// 	Prepare the outputDCB to be TYPE'd.
 2282              	
 2283 1064 3E040018 		.word	_SIGN+MAPOFFSET
 2284 1068 02       	_EDIGS:	.byte  2
 2285 1069 233E     		.ascii "#>"
 2286 106b 00       		.p2align 2 	
 2287              	EDIGS:
 2288 106c 42F804ED 		_NEST
 2289 1070 FFF708FB 		BL	DROP
 2290 1074 FFF74EFD 		BL	HLD
 2291 1078 FFF7C8FA 		BL	AT
 2292 107c FFF7D2FE 		BL	PAD
 2293 1080 FFF71AFB 		BL	OVER
 2294 1084 FFF772FB 		BL	SUBB
 2295 1088 52F804FB 		_UNNEST
 2296              	
 2297              	//    str	 ( n -- b u )
 2298              	// 	Convert a signed integer to a numeric string.
 2299              	
 2300              	// 	.word	_EDIGS+MAPOFFSET
 2301              	// _STRR	.byte  3
 2302              	// 	.ascii "str"
 2303              	// 	.p2align 2 	
 2304              	STRR:
 2305 108c 42F804ED 		_NEST
 2306 1090 FFF700FB 		BL	DUPP
 2307 1094 FFF7E2FA 		BL	TOR
 2308 1098 FFF730FC 		BL	ABSS
 2309 109c FFF78AFF 		BL	BDIGS
 2310 10a0 FFF7BEFF 		BL	DIGS
ARM GAS  stm32eforth.s 			page 45


 2311 10a4 FFF7C8FA 		BL	RFROM
 2312 10a8 FFF7CCFF 		BL	SIGN
 2313 10ac FFF7DEFF 		BL	EDIGS
 2314 10b0 52F804FB 		_UNNEST
 2315              	
 2316              	//    HEX	 ( -- )
 2317              	// 	Use radix 16 as base for numeric conversions.
 2318              	
 2319 10b4 68040018 		.word	_EDIGS+MAPOFFSET
 2320 10b8 03       	_HEX:	.byte  3
 2321 10b9 484558   		.ascii "HEX"
 2322              		.p2align 2 	
 2323              	HEX:
 2324 10bc 42F804ED 		_NEST
 2325 10c0 FFF75BFA 		_DOLIT
 2326 10c4 10000000 		.word	16
 2327 10c8 FFF7ECFC 		BL	BASE
 2328 10cc FFF794FA 		BL	STORE
 2329 10d0 52F804FB 		_UNNEST
 2330              	
 2331              	//    DECIMAL	( -- )
 2332              	// 	Use radix 10 as base for numeric conversions.
 2333              	
 2334 10d4 B8040018 		.word	_HEX+MAPOFFSET
 2335 10d8 07       	_DECIM:	.byte  7
 2336 10d9 44454349 		.ascii "DECIMAL"
 2336      4D414C
 2337              		.p2align 2 	
 2338              	DECIM:
 2339 10e0 42F804ED 		_NEST
 2340 10e4 FFF749FA 		_DOLIT
 2341 10e8 0A000000 		.word	10
 2342 10ec FFF7DAFC 		BL	BASE
 2343 10f0 FFF782FA 		BL	STORE
 2344 10f4 52F804FB 		_UNNEST
 2345              	
 2346              	// **************************************************************************
 2347              	//  Numeric input, single precision
 2348              	
 2349              	//    DIGIT?	( c base -- u t )
 2350              	// 	Convert a character to its numeric value. A flag indicates success.
 2351              	
 2352 10f8 D8040018 		.word	_DECIM+MAPOFFSET
 2353 10fc 06       	_DIGTQ:	.byte  6
 2354 10fd 44494749 		.ascii "DIGIT?"
 2354      543F
 2355 1103 00       		.p2align 2 	
 2356              	DIGTQ:
 2357 1104 42F804ED 		_NEST
 2358 1108 FFF7A8FA 		BL	TOR
 2359 110c FFF735FA 		_DOLIT
 2360 1110 30000000 		.word	'0'
 2361 1114 FFF72AFB 		BL	SUBB
 2362 1118 FFF72FFA 		_DOLIT
 2363 111c 09000000 		.word	9
 2364 1120 FFF7CAFA 		BL	OVER
 2365 1124 FFF716FC 		BL	LESS
ARM GAS  stm32eforth.s 			page 46


 2366 1128 FFF74AFA 		BL	QBRAN
 2367 112c 50050018 		.word	DGTQ1+MAPOFFSET
 2368 1130 FFF723FA 		_DOLIT
 2369 1134 07000000 		.word	7
 2370 1138 FFF718FB 		BL	SUBB
 2371 113c FFF7AAFA 		BL	DUPP
 2372 1140 FFF71BFA 		_DOLIT
 2373 1144 0A000000 		.word	10
 2374 1148 FFF704FC 		BL	LESS
 2375 114c FFF7D0FA 		BL	ORR
 2376              	DGTQ1:
 2377 1150 FFF7A0FA 	  BL	DUPP
 2378 1154 FFF770FA 		BL	RFROM
 2379 1158 FFF7F0FB 		BL	ULESS
 2380 115c 52F804FB 		_UNNEST
 2381              	
 2382              	//    NUMBER?	( a -- n T | a F )
 2383              	// 	Convert a number word to integer. Push a flag on tos.
 2384              	
 2385 1160 FC040018 		.word	_DIGTQ+MAPOFFSET
 2386 1164 07       	_NUMBQ:	.byte  7
 2387 1165 4E554D42 		.ascii "NUMBER?"
 2387      45523F
 2388              		.p2align 2 	
 2389              	NUMBQ:
 2390 116c 42F804ED 		_NEST
 2391 1170 FFF798FC 		BL	BASE
 2392 1174 FFF74AFA 		BL	AT
 2393 1178 FFF770FA 		BL	TOR
 2394 117c FFF7FDF9 		_DOLIT
 2395 1180 00000000 		.word	0
 2396 1184 FFF798FA 		BL	OVER
 2397 1188 FFF734FC 		BL	COUNT
 2398 118c FFF794FA 		BL	OVER
 2399 1190 FFF74CFA 		BL	CAT
 2400 1194 FFF7F1F9 		_DOLIT
 2401 1198 24000000 		.word	'$'
 2402 119c FFF7C2FB 		BL	EQUAL
 2403 11a0 FFF70EFA 		BL	QBRAN
 2404 11a4 BC050018 		.word	NUMQ1+MAPOFFSET
 2405 11a8 FFF788FF 		BL	HEX
 2406 11ac FFF77AFA 		BL	SWAP
 2407 11b0 FFF702FB 		BL	ONEP
 2408 11b4 FFF776FA 		BL	SWAP
 2409 11b8 FFF706FB 		BL	ONEM
 2410              	NUMQ1:
 2411 11bc FFF77CFA 		BL	OVER
 2412 11c0 FFF734FA 		BL	CAT
 2413 11c4 FFF7D9F9 		_DOLIT
 2414 11c8 2D000000 		.word	'-'
 2415 11cc FFF7AAFB 		BL	EQUAL
 2416 11d0 FFF744FA 		BL	TOR
 2417 11d4 FFF766FA 		BL	SWAP
 2418 11d8 FFF738FA 		BL	RAT
 2419 11dc FFF7C6FA 		BL	SUBB
 2420 11e0 FFF760FA 		BL	SWAP
 2421 11e4 FFF732FA 		BL	RAT
ARM GAS  stm32eforth.s 			page 47


 2422 11e8 FFF7B8FA 		BL	PLUS
 2423 11ec FFF73EFB 		BL	QDUP
 2424 11f0 FFF7E6F9 		BL	QBRAN
 2425 11f4 80060018 		.word	NUMQ6+MAPOFFSET
 2426 11f8 FFF7E6FA 		BL	ONEM
 2427 11fc FFF72EFA 		BL	TOR
 2428              	NUMQ2:
 2429 1200 FFF748FA 		BL	DUPP
 2430 1204 FFF72AFA 		BL	TOR
 2431 1208 FFF710FA 		BL	CAT
 2432 120c FFF74AFC 		BL	BASE
 2433 1210 FFF7FCF9 		BL	AT
 2434 1214 FFF776FF 		BL	DIGTQ
 2435 1218 FFF7D2F9 		BL	QBRAN
 2436 121c 64060018 		.word	NUMQ4+MAPOFFSET
 2437 1220 FFF740FA 		BL	SWAP
 2438 1224 FFF73EFC 		BL	BASE
 2439 1228 FFF7F0F9 		BL	AT
 2440 122c FFF7A6FA 		BL	STAR
 2441 1230 FFF794FA 		BL	PLUS
 2442 1234 FFF700FA 		BL	RFROM
 2443 1238 FFF7BEFA 		BL	ONEP
 2444 123c FFF7B1F9 		BL	DONXT
 2445 1240 00060018 		.word	NUMQ2+MAPOFFSET
 2446 1244 FFF702FA 		BL	RAT
 2447 1248 FFF72CFA 		BL	SWAP
 2448 124c FFF71AFA 		BL	DROP
 2449 1250 FFF7B6F9 		BL	QBRAN
 2450 1254 5C060018 		.word	NUMQ3+MAPOFFSET
 2451 1258 FFF748FB 		BL	NEGAT
 2452              	NUMQ3:
 2453 125c FFF722FA 		BL	SWAP
 2454 1260 00F00CB8 		B.W	NUMQ5
 2455              	NUMQ4:
 2456 1264 FFF7E8F9 		BL	RFROM
 2457 1268 FFF7E6F9 		BL	RFROM
 2458 126c FFF712FB 		BL	DDROP
 2459 1270 FFF710FB 		BL	DDROP
 2460 1274 FFF781F9 		_DOLIT
 2461 1278 00000000 		.word	0
 2462              	NUMQ5:
 2463 127c FFF70AFA 		BL	DUPP
 2464              	NUMQ6:
 2465 1280 FFF7DAF9 		BL	RFROM
 2466 1284 FFF706FB 		BL	DDROP
 2467 1288 FFF7D6F9 		BL	RFROM
 2468 128c FFF70AFC 		BL	BASE
 2469 1290 FFF7B2F9 		BL	STORE
 2470 1294 52F804FB 		_UNNEST
 2471              	
 2472              	// **************************************************************************
 2473              	//  Basic I/O
 2474              	
 2475              	//    KEY	 ( -- c )
 2476              	// 	Wait for and return an input character.
 2477              	
 2478 1298 64050018 		.word	_NUMBQ+MAPOFFSET
ARM GAS  stm32eforth.s 			page 48


 2479 129c 03       	_KEY:	.byte  3
 2480 129d 4B4559   		.ascii "KEY"
 2481              		.p2align 2 	
 2482              	KEY:
 2483 12a0 42F804ED 		_NEST
 2484              	KEY1:
 2485 12a4 FFF73CF9 		BL	QRX
 2486 12a8 FFF78AF9 		BL	QBRAN
 2487 12ac A4060018 		.word	KEY1+MAPOFFSET
 2488 12b0 52F804FB 		_UNNEST
 2489              	
 2490              	//    SPACE	( -- )
 2491              	// 	Send the blank character to the output device.
 2492              	
 2493 12b4 9C060018 		.word	_KEY+MAPOFFSET
 2494 12b8 05       	_SPACE:	.byte  5
 2495 12b9 53504143 		.ascii "SPACE"
 2495      45
 2496 12be 00BF     		.p2align 2 	
 2497              	SPACE:
 2498 12c0 42F804ED 		_NEST
 2499 12c4 FFF7A8FA 		BL	BLANK
 2500 12c8 FFF746F9 		BL	EMIT
 2501 12cc 52F804FB 		_UNNEST
 2502              	
 2503              	//    SPACES	( +n -- )
 2504              	// 	Send n spaces to the output device.
 2505              	
 2506 12d0 B8060018 		.word	_SPACE+MAPOFFSET
 2507 12d4 06       	_SPACS:	.byte  6
 2508 12d5 53504143 		.ascii "SPACES"
 2508      4553
 2509 12db 00       		.p2align 2 	
 2510              	SPACS:
 2511 12dc 42F804ED 		_NEST
 2512 12e0 FFF74BF9 		_DOLIT
 2513 12e4 00000000 		.word	0
 2514 12e8 FFF74CFB 		BL	MAX
 2515 12ec FFF7B6F9 		BL	TOR
 2516 12f0 00F002B8 		B.W	CHAR2
 2517              	CHAR1:
 2518 12f4 FFF7E4FF 		BL	SPACE
 2519              	CHAR2:
 2520 12f8 FFF753F9 		BL	DONXT
 2521 12fc F4060018 		.word	CHAR1+MAPOFFSET
 2522 1300 52F804FB 		_UNNEST
 2523              	
 2524              	//    TYPE	( b u -- )
 2525              	// 	Output u characters from b.
 2526              	
 2527 1304 D4060018 		.word	_SPACS+MAPOFFSET
 2528 1308 04       	_TYPEE:	.byte	4
 2529 1309 54595045 		.ascii "TYPE"
 2530 130d 0000BF   		.p2align 2 	
 2531              	TYPEE:
 2532 1310 42F804ED 		_NEST
 2533 1314 FFF7A2F9 		BL  TOR   // ( a+1 -- R: u )
ARM GAS  stm32eforth.s 			page 49


 2534 1318 05E0     		B	TYPE2
 2535              	TYPE1:  
 2536 131a FFF76BFB 		BL  COUNT
 2537 131e FFF72DFD 		BL	TCHAR
 2538 1322 FFF719F9 		BL	EMIT
 2539              	TYPE2:  
 2540 1326 FFF73CF9 		BL  DONXT  
 2541 132a 1A070018 		.word	TYPE1+MAPOFFSET
 2542 132e FFF7A9F9 		BL	DROP
 2543 1332 52F804FB 		_UNNEST
 2544              	
 2545              	//    CR	  ( -- )
 2546              	// 	Output a carriage return and a line feed.
 2547              	
 2548 1336 08070018 		.word	_TYPEE+MAPOFFSET
 2549 133a 02       	_CR:	.byte  2
 2550 133b 4352     		.ascii "CR"
 2551 133d 0000BF   		.p2align 2 	
 2552              	CR:
 2553 1340 42F804ED 		_NEST
 2554 1344 FFF719F9 		_DOLIT
 2555 1348 0D000000 		.word	CRR
 2556 134c FFF704F9 		BL	EMIT
 2557 1350 FFF713F9 		_DOLIT
 2558 1354 0A000000 		.word	LF
 2559 1358 FFF7FEF8 		BL	EMIT
 2560 135c 52F804FB 		_UNNEST
 2561              	
 2562              	//    do_$	( -- a )
 2563              	// 	Return the address of a compiled string.
 2564              	//  adjust return address to skip over it.
 2565              	
 2566              	// 	.word	_CR+MAPOFFSET
 2567              	// _DOSTR	.byte  COMPO+3
 2568              	// 	.ascii "do$$"
 2569              	// 	.p2align 2 	
 2570              	DOSTR:
 2571 1360 42F804ED 		_NEST     
 2572              	/* compiled string address is 2 levels deep */
 2573 1364 FFF768F9 		BL	RFROM	// { -- a1 }
 2574 1368 FFF766F9 		BL	RFROM	//  {a1 -- a1 a2 } b0 set
 2575 136c FFF72CFA 		BL	ONEM	//  clear b0
 2576 1370 FFF790F9 		BL	DUPP	// {a1 a2 -- a1 a2 a2 }
 2577 1374 FFF73EFB 		BL	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2578 1378 FFF7F0F9 		BL	PLUS	// { -- a1 a2 a2+1+c }
 2579 137c FFF7F2FC 		BL	ALGND	//  end of string
 2580 1380 FFF71AFA 		BL	ONEP	//  restore b0, this result in return address 2 level deep.
 2581 1384 FFF76AF9 		BL	TOR		//  address after string { -- a1 a2 }
 2582 1388 FFF78CF9 		BL	SWAP	//  count tugged
 2583 138c FFF766F9 		BL	TOR     //  ( -- a2) is string address
 2584 1390 52F804FB 		_UNNEST
 2585              	
 2586              	//    $"|	( -- a )
 2587              	// 	Run time routine compiled by _". Return address of a compiled string.
 2588              	
 2589              	// 	.word	_DOSTR+MAPOFFSET
 2590              	// _STRQP	.byte  COMPO+3
ARM GAS  stm32eforth.s 			page 50


 2591              	// 	.ascii "$\"|"
 2592              	// 	.p2align 2 	
 2593              	STRQP:
 2594 1394 42F804ED 		_NEST
 2595 1398 FFF7E2FF 		BL	DOSTR
 2596 139c 52F804FB 		_UNNEST			// force a call to dostr
 2597              	
 2598              	//    .$	( a -- )
 2599              	// 	Run time routine of ." . Output a compiled string.
 2600              	
 2601              	// 	.word	_STRQP+MAPOFFSET
 2602              	// _DOTST	.byte  COMPO+2
 2603              	// 	.ascii ".$$"
 2604              	// 	.p2align 2 	
 2605              	DOTST:
 2606 13a0 42F804ED 		_NEST
 2607 13a4 FFF726FB 		BL	COUNT // ( -- a+1 c )
 2608 13a8 FFF7B2FF 		BL	TYPEE
 2609 13ac 52F804FB 		_UNNEST
 2610              	
 2611              	//    ."|	( -- )
 2612              	// 	Run time routine of ." . Output a compiled string.
 2613              	
 2614              	// 	.word	_DOTST+MAPOFFSET
 2615              	// _DOTQP	.byte  COMPO+3
 2616              	// 	.ascii ".""|"
 2617              	// 	.p2align 2 	
 2618              	DOTQP:
 2619 13b0 42F804ED 		_NEST
 2620 13b4 FFF7D4FF 		BL	DOSTR
 2621 13b8 FFF7F2FF 		BL	DOTST
 2622 13bc 52F804FB 		_UNNEST
 2623              	
 2624              	//    .R	  ( n +n -- )
 2625              	// 	Display an integer in a field of n columns, right justified.
 2626              	
 2627 13c0 3A070018 		.word	_CR+MAPOFFSET
 2628 13c4 02       	_DOTR:	.byte  2
 2629 13c5 2E52     		.ascii ".R"
 2630 13c7 00       		.p2align 2 	
 2631              	DOTR:
 2632 13c8 42F804ED 		_NEST
 2633 13cc FFF746F9 		BL	TOR
 2634 13d0 FFF75CFE 		BL	STRR
 2635 13d4 FFF730F9 		BL	RFROM
 2636 13d8 FFF76EF9 		BL	OVER
 2637 13dc FFF7C6F9 		BL	SUBB
 2638 13e0 FFF77CFF 		BL	SPACS
 2639 13e4 FFF794FF 		BL	TYPEE
 2640 13e8 52F804FB 		_UNNEST
 2641              	
 2642              	//    U.R	 ( u +n -- )
 2643              	// 	Display an unsigned integer in n column, right justified.
 2644              	
 2645 13ec C4070018 		.word	_DOTR+MAPOFFSET
 2646 13f0 03       	_UDOTR:	.byte  3
 2647 13f1 552E52   		.ascii "U.R"
ARM GAS  stm32eforth.s 			page 51


 2648              		.p2align 2 	
 2649              	UDOTR:
 2650 13f4 42F804ED 		_NEST
 2651 13f8 FFF730F9 		BL	TOR
 2652 13fc FFF7DAFD 		BL	BDIGS
 2653 1400 FFF70EFE 		BL	DIGS
 2654 1404 FFF732FE 		BL	EDIGS
 2655 1408 FFF716F9 		BL	RFROM
 2656 140c FFF754F9 		BL	OVER
 2657 1410 FFF7ACF9 		BL	SUBB
 2658 1414 FFF762FF 		BL	SPACS
 2659 1418 FFF77AFF 		BL	TYPEE
 2660 141c 52F804FB 		_UNNEST
 2661              	
 2662              	//    U.	  ( u -- )
 2663              	// 	Display an unsigned integer in free format.
 2664              	
 2665 1420 F0070018 		.word	_UDOTR+MAPOFFSET
 2666 1424 02       	_UDOT:	.byte  2
 2667 1425 552E     		.ascii "U."
 2668 1427 00       		.p2align 2 	
 2669              	UDOT:
 2670 1428 42F804ED 		_NEST
 2671 142c FFF7C2FD 		BL	BDIGS
 2672 1430 FFF7F6FD 		BL	DIGS
 2673 1434 FFF71AFE 		BL	EDIGS
 2674 1438 FFF742FF 		BL	SPACE
 2675 143c FFF768FF 		BL	TYPEE
 2676 1440 52F804FB 		_UNNEST
 2677              	
 2678              	//    .	   ( w -- )
 2679              	// 	Display an integer in free format, preceeded by a space.
 2680              	
 2681 1444 24080018 		.word	_UDOT+MAPOFFSET
 2682 1448 01       	_DOT:	.byte  1
 2683 1449 2E       		.ascii "."
 2684 144a 00BF     		.p2align 2 	
 2685              	DOT:
 2686 144c 42F804ED 		_NEST
 2687 1450 FFF728FB 		BL	BASE
 2688 1454 FFF7DAF8 		BL	AT
 2689 1458 FFF78FF8 		_DOLIT
 2690 145c 0A000000 		.word	10
 2691 1460 FFF750F9 		BL	XORR			// ?decimal
 2692 1464 FFF7ACF8 		BL	QBRAN
 2693 1468 74080018 		.word	DOT1+MAPOFFSET
 2694 146c FFF7DCFF 		BL	UDOT
 2695 1470 52F804FB 		_UNNEST			// no,display unsigned
 2696              	DOT1:
 2697 1474 FFF70AFE 	    BL	STRR
 2698 1478 FFF722FF 		BL	SPACE
 2699 147c FFF748FF 		BL	TYPEE
 2700 1480 52F804FB 		_UNNEST			// yes, display signed
 2701              	
 2702              	//    ?	   ( a -- )
 2703              	// 	Display the contents in a memory cell.
 2704              	
ARM GAS  stm32eforth.s 			page 52


 2705 1484 48080018 		.word	_DOT+MAPOFFSET
 2706 1488 01       	_QUEST:	.byte  1
 2707 1489 3F       		.ascii "?"
 2708 148a 00BF     		.p2align 2 	
 2709              	QUEST:
 2710 148c 42F804ED 		_NEST
 2711 1490 FFF7BCF8 		BL	AT
 2712 1494 FFF7DAFF 		BL	DOT
 2713 1498 52F804FB 		_UNNEST
 2714              	
 2715              	// **************************************************************************
 2716              	//  Parsing
 2717              	
 2718              	//    parse	( b u c -- b u delta //  string> )
 2719              	// 	Scan word delimited by c. Return found string and its offset.
 2720              	
 2721              	// 	.word	_QUEST+MAPOFFSET
 2722              	// _PARS	.byte  5
 2723              	// 	.ascii "parse"
 2724              	// 	.p2align 2 	
 2725              	PARS:
 2726 149c 42F804ED 		_NEST
 2727 14a0 FFF705FB 		BL	TEMP
 2728 14a4 FFF7A8F8 		BL	STORE
 2729 14a8 FFF706F9 		BL	OVER
 2730 14ac FFF7D6F8 		BL	TOR
 2731 14b0 FFF7F0F8 		BL	DUPP
 2732 14b4 FFF784F8 		BL	QBRAN
 2733 14b8 AA090018 		.word	PARS8+MAPOFFSET
 2734 14bc FFF784F9 		BL	ONEM
 2735 14c0 FFF7F5FA 		BL	TEMP
 2736 14c4 FFF7A2F8 		BL	AT
 2737 14c8 FFF7A6F9 		BL	BLANK
 2738 14cc FFF72AFA 		BL	EQUAL
 2739 14d0 FFF776F8 		BL	QBRAN
 2740 14d4 24090018 		.word	PARS3+MAPOFFSET
 2741 14d8 FFF7C0F8 		BL	TOR
 2742              	PARS1:
 2743 14dc FFF79CF9 		BL	BLANK
 2744 14e0 FFF7EAF8 		BL	OVER
 2745 14e4 FFF7A2F8 		BL	CAT			// skip leading blanks 
 2746 14e8 FFF740F9 		BL	SUBB
 2747 14ec FFF7ECF8 		BL	ZLESS
 2748 14f0 FFF7F2F9 		BL	INVER
 2749 14f4 FFF764F8 		BL	QBRAN
 2750 14f8 20090018 		.word	PARS2+MAPOFFSET
 2751 14fc FFF75CF9 		BL	ONEP
 2752 1500 FFF74FF8 		BL	DONXT
 2753 1504 DC080018 		.word	PARS1+MAPOFFSET
 2754 1508 FFF796F8 		BL	RFROM
 2755 150c FFF7BAF8 		BL	DROP
 2756 1510 FFF733F8 		_DOLIT
 2757 1514 00000000 		.word	0
 2758 1518 FFF7BCF8 		BL	DUPP
 2759 151c 52F804FB 		_UNNEST
 2760              	PARS2:
 2761 1520 FFF78AF8 	  BL	RFROM
ARM GAS  stm32eforth.s 			page 53


 2762              	PARS3:
 2763 1524 FFF7C8F8 		BL	OVER
 2764 1528 FFF7BCF8 		BL	SWAP
 2765 152c FFF796F8 		BL	TOR
 2766              	PARS4:
 2767 1530 FFF7BDFA 		BL	TEMP
 2768 1534 FFF76AF8 		BL	AT
 2769 1538 FFF7BEF8 		BL	OVER
 2770 153c FFF776F8 		BL	CAT
 2771 1540 FFF714F9 		BL	SUBB			// scan for delimiter
 2772 1544 FFF7B3FA 		BL	TEMP
 2773 1548 FFF760F8 		BL	AT
 2774 154c FFF764F9 		BL	BLANK
 2775 1550 FFF7E8F9 		BL	EQUAL
 2776 1554 FFF734F8 		BL	QBRAN
 2777 1558 60090018 		.word	PARS5+MAPOFFSET
 2778 155c FFF7B4F8 		BL	ZLESS
 2779              	PARS5:
 2780 1560 FFF72EF8 		BL	QBRAN
 2781 1564 7E090018 		.word	PARS6+MAPOFFSET
 2782 1568 FFF726F9 		BL	ONEP
 2783 156c FFF719F8 		BL	DONXT
 2784 1570 30090018 		.word	PARS4+MAPOFFSET
 2785 1574 FFF78EF8 		BL	DUPP
 2786 1578 FFF770F8 		BL	TOR
 2787 157c 09E0     		B	PARS7
 2788              	PARS6:
 2789 157e FFF75BF8 		BL	RFROM
 2790 1582 FFF77FF8 		BL	DROP
 2791 1586 FFF785F8 		BL	DUPP
 2792 158a FFF715F9 		BL	ONEP
 2793 158e FFF765F8 		BL	TOR
 2794              	PARS7:
 2795 1592 FFF791F8 		BL	OVER
 2796 1596 FFF7E9F8 		BL	SUBB
 2797 159a FFF74DF8 		BL	RFROM
 2798 159e FFF74BF8 		BL	RFROM
 2799 15a2 FFF7E3F8 		BL	SUBB
 2800 15a6 52F804FB 		_UNNEST
 2801              	PARS8:
 2802 15aa FFF785F8 		BL	OVER
 2803 15ae FFF743F8 		BL	RFROM
 2804 15b2 FFF7DBF8 		BL	SUBB
 2805 15b6 52F804FB 		_UNNEST
 2806              	
 2807              	//    PARSE	( c -- b u //  string> )
 2808              	// 	Scan input stream and return counted string delimited by c.
 2809              	
 2810 15ba 88080018 		.word	_QUEST+MAPOFFSET
 2811 15be 05       	_PARSE:	.byte  5
 2812 15bf 50415253 		.ascii "PARSE"
 2812      45
 2813              		.p2align 2 	
 2814              	PARSE:
 2815 15c4 42F804ED 		_NEST
 2816 15c8 FFF748F8 		BL	TOR
 2817 15cc FFF736FC 		BL	TIB
ARM GAS  stm32eforth.s 			page 54


 2818 15d0 FFF782FA 		BL	INN
 2819 15d4 FFF71AF8 		BL	AT
 2820 15d8 FFF7C0F8 		BL	PLUS			// current input buffer pointer
 2821 15dc FFF786FA 		BL	NTIB
 2822 15e0 FFF714F8 		BL	AT
 2823 15e4 FFF778FA 		BL	INN
 2824 15e8 FFF710F8 		BL	AT
 2825 15ec FFF7BEF8 		BL	SUBB			// remaining count
 2826 15f0 FFF722F8 		BL	RFROM
 2827 15f4 FFF752FF 		BL	PARS
 2828 15f8 FFF76EFA 		BL	INN
 2829 15fc FFF7D6F9 		BL	PSTOR
 2830 1600 52F804FB 		_UNNEST
 2831              	
 2832              	//    .(	  ( -- )
 2833              	// 	Output following string up to next ) .
 2834              	
 2835 1604 BE090018 		.word	_PARSE+MAPOFFSET
 2836 1608 82       	_DOTPR:	.byte  IMEDD+2
 2837 1609 2E28     		.ascii ".("
 2838 160b 00       		.p2align 2 	
 2839              	DOTPR:
 2840 160c 42F804ED 		_NEST
 2841 1610 FEF7B3FF 		_DOLIT
 2842 1614 29000000 		.word	')'
 2843 1618 FFF7D4FF 		BL	PARSE
 2844 161c FFF778FE 		BL	TYPEE
 2845 1620 52F804FB 		_UNNEST
 2846              	
 2847              	//    (	   ( -- )
 2848              	// 	Ignore following string up to next ) . A comment.
 2849              	
 2850 1624 080A0018 		.word	_DOTPR+MAPOFFSET
 2851 1628 81       	_PAREN:	.byte  IMEDD+1
 2852 1629 28       		.ascii "("
 2853 162a 00BF     		.p2align 2 	
 2854              	PAREN:
 2855 162c 42F804ED 		_NEST
 2856 1630 FEF7A3FF 		_DOLIT
 2857 1634 29000000 		.word	')'
 2858 1638 FFF7C4FF 		BL	PARSE
 2859 163c FFF72AF9 		BL	DDROP
 2860 1640 52F804FB 		_UNNEST
 2861              	
 2862              	//    \	   ( -- )
 2863              	// 	Ignore following text till the end of line.
 2864              	
 2865 1644 280A0018 		.word	_PAREN+MAPOFFSET
 2866 1648 81       	_BKSLA:	.byte  IMEDD+1
 2867 1649 5C       		.ascii	"\\"
 2868 164a 00BF     		.p2align 2 	
 2869              	BKSLA:
 2870 164c 42F804ED 		_NEST
 2871 1650 FFF74CFA 		BL	NTIB
 2872 1654 FEF7DAFF 		BL	AT
 2873 1658 FFF73EFA 		BL	INN
 2874 165c FEF7CCFF 		BL	STORE
ARM GAS  stm32eforth.s 			page 55


 2875 1660 52F804FB 		_UNNEST
 2876              	
 2877              	//    CHAR	( -- c )
 2878              	// 	Parse next word and return its first character.
 2879              	
 2880 1664 480A0018 		.word	_BKSLA+MAPOFFSET
 2881 1668 04       	_CHAR:	.byte  4
 2882 1669 43484152 		.ascii "CHAR"
 2883 166d 0000BF   		.p2align 2 	
 2884              	CHAR:
 2885 1670 42F804ED 		_NEST
 2886 1674 FFF7D0F8 		BL	BLANK
 2887 1678 FFF7A4FF 		BL	PARSE
 2888 167c FFF702F8 		BL	DROP
 2889 1680 FEF7D4FF 		BL	CAT
 2890 1684 52F804FB 		_UNNEST
 2891              	
 2892              	//    WORD	( c -- a //  string> )
 2893              	// 	Parse a word from input stream and copy it to code dictionary.
 2894              	
 2895 1688 680A0018 		.word	_CHAR+MAPOFFSET
 2896 168c 04       	_WORDD:	.byte  4
 2897 168d 574F5244 		.ascii "WORD"
 2898 1691 0000BF   		.p2align 2 	
 2899              	WORDD:
 2900 1694 42F804ED 		_NEST
 2901 1698 FFF794FF 		BL	PARSE
 2902 169c FFF7B6FB 		BL	HERE
 2903 16a0 FFF7AAF8 		BL	CELLP
 2904 16a4 FFF728FC 		BL	PACKS
 2905 16a8 52F804FB 		_UNNEST
 2906              	
 2907              	//    TOKEN	( -- a //  string> )
 2908              	// 	Parse a word from input stream and copy it to name dictionary.
 2909              	
 2910 16ac 8C0A0018 		.word	_WORDD+MAPOFFSET
 2911 16b0 05       	_TOKEN:	.byte  5
 2912 16b1 544F4B45 		.ascii "TOKEN"
 2912      4E
 2913 16b6 00BF     		.p2align 2 	
 2914              	TOKEN:
 2915 16b8 42F804ED 		_NEST
 2916 16bc FFF7ACF8 		BL	BLANK
 2917 16c0 FFF7E8FF 		BL	WORDD
 2918 16c4 52F804FB 		_UNNEST
 2919              	
 2920              	// **************************************************************************
 2921              	//  Dictionary search
 2922              	
 2923              	//    NAME>	( na -- ca )
 2924              	// 	Return a code address given a name address.
 2925              	
 2926 16c8 B00A0018 		.word	_TOKEN+MAPOFFSET
 2927 16cc 05       	_NAMET:	.byte  5
 2928 16cd 4E414D45 		.ascii "NAME>"
 2928      3E
 2929 16d2 00BF     		.p2align 2 	
ARM GAS  stm32eforth.s 			page 56


 2930              	NAMET:
 2931 16d4 42F804ED 		_NEST
 2932 16d8 FFF78CF9 		BL	COUNT
 2933 16dc FEF74DFF 		_DOLIT
 2934 16e0 1F000000 		.word	0x1F
 2935 16e4 FEF7FAFF 		BL	ANDD
 2936 16e8 FFF738F8 		BL	PLUS
 2937 16ec FFF73AFB 		BL	ALGND
 2938 16f0 52F804FB 		_UNNEST
 2939              	
 2940              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2941              	// 	Compare u bytes in two strings. Return 0 if identical.
 2942              	//
 2943              	//  Picatout 2020-12-01, 
 2944              	//      Because of problem with .align directive that
 2945              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2946              	// 		words  to do a byte by byte comparison. 
 2947              	//
 2948 16f4 CC0A0018 		.word	_NAMET+MAPOFFSET
 2949 16f8 05       	_SAMEQ:	.byte  5
 2950 16f9 53414D45 		.ascii "SAME?"
 2950      3F
 2951 16fe 00BF     		.p2align 2	
 2952              	SAMEQ:
 2953 1700 42F804ED 		_NEST
 2954 1704 FEF7AAFF 		BL	TOR
 2955 1708 00F01EB8 		B.W	SAME2
 2956              	SAME1:
 2957 170c FEF7D4FF 		BL	OVER  // ( a1 a2 -- a1 a2 a1 )
 2958 1710 FEF79CFF 		BL	RAT   // a1 a2 a1 u 
 2959 1714 FFF722F8 		BL	PLUS  // a1 a2 a1+u 
 2960 1718 FEF788FF 		BL	CAT	   // a1 a2 c1    		
 2961 171c FEF7CCFF 		BL	OVER  // a1 a2 c1 a2 
 2962 1720 FEF794FF 		BL	RAT    
 2963 1724 FFF71AF8 		BL	PLUS    
 2964 1728 FEF780FF 		BL	CAT	  // a1 a2 c1 c2
 2965 172c FFF71EF8 		BL	SUBB  
 2966 1730 FFF79CF8 		BL	QDUP
 2967 1734 FEF744FF 		BL	QBRAN
 2968 1738 480B0018 		.word	SAME2+MAPOFFSET
 2969 173c FEF77CFF 		BL	RFROM
 2970 1740 FEF7A0FF 		BL	DROP
 2971 1744 52F804FB 		_UNNEST	// strings not equal
 2972              	SAME2:
 2973 1748 FEF72BFF 		BL	DONXT
 2974 174c 0C0B0018 		.word	SAME1+MAPOFFSET
 2975 1750 FEF713FF 		_DOLIT
 2976 1754 00000000 		.word	0
 2977 1758 52F804FB 		_UNNEST	// strings equal
 2978              	
 2979              	//    find	( a na -- ca na | a F )
 2980              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2981              	
 2982              	//  Picatout 2020-12-01,  
 2983              	//		Modified from original. See comment for word "SAME?" 
 2984              	
 2985              	// 	.word	_SAMEQ+MAPOFFSET
ARM GAS  stm32eforth.s 			page 57


 2986              	// _FIND	.byte  4
 2987              	// 	.ascii "find"
 2988              	// 	.p2align 2 	
 2989              	FIND:
 2990 175c 42F804ED 		_NEST
 2991 1760 FEF7A0FF 		BL	SWAP			// na a	
 2992 1764 FFF746F9 		BL	COUNT			// na a+1 count
 2993 1768 FEF794FF 		BL	DUPP 
 2994 176c FFF79FF9 		BL	TEMP
 2995 1770 FEF742FF 		BL	STORE			// na a+1 count 
 2996 1774 FEF772FF 		BL  TOR		// na a+1  R: count  
 2997 1778 FEF794FF 		BL	SWAP			// a+1 na
 2998              	FIND1:
 2999 177c FEF78AFF 		BL	DUPP			// a+1 na na
 3000 1780 FEF71EFF 		BL	QBRAN
 3001 1784 CC0B0018 		.word	FIND6+MAPOFFSET	// end of vocabulary
 3002 1788 FEF784FF 		BL	DUPP			// a+1 na na
 3003 178c FEF74EFF 		BL	CAT			// a+1 na name1
 3004 1790 FEF7F3FE 		_DOLIT
 3005 1794 1FFFFFFF 		.word	MASKK
 3006 1798 FEF7A0FF 		BL	ANDD
 3007 179c FEF756FF 		BL	RAT			// a+1 na name1 count 
 3008 17a0 FEF7B0FF 		BL	XORR			// a+1 na,  same length?
 3009 17a4 FEF70CFF 		BL	QBRAN
 3010 17a8 B80B0018 		.word	FIND2+MAPOFFSET
 3011 17ac FFF72CF8 		BL	CELLM			// a+1 la
 3012 17b0 FEF72CFF 		BL	AT			// a+1 next_na
 3013 17b4 FFF7E2BF 		B.w	FIND1			// try next word
 3014              	FIND2:   
 3015 17b8 FEF7FEFF 		BL	ONEP			// a+1 na+1
 3016 17bc FFF777F9 		BL	TEMP
 3017 17c0 FEF724FF 		BL	AT			// a+1 na+1 count
 3018 17c4 FFF79CFF 		BL	SAMEQ		// a+1 na+1 ? 
 3019              	FIND3:	
 3020 17c8 00F00CB8 		B.w	FIND4
 3021              	FIND6:	
 3022 17cc FEF734FF 		BL	RFROM			// a+1 0 name1 -- , no match
 3023 17d0 FEF758FF 		BL	DROP			// a+1 0
 3024 17d4 FEF766FF 		BL	SWAP			// 0 a+1
 3025 17d8 FEF7F6FF 		BL	ONEM			// 0 a
 3026 17dc FEF762FF 		BL	SWAP			// a 0 
 3027 17e0 52F804FB 		_UNNEST			// return without a match
 3028              	FIND4:	
 3029 17e4 FEF7ECFE 		BL	QBRAN			// a+1 na+1
 3030 17e8 FC0B0018 		.word	FIND5+MAPOFFSET	// found a match
 3031 17ec FEF7ECFF 		BL	ONEM			// a+1 na
 3032 17f0 FFF70AF8 		BL	CELLM			// a+4 la
 3033 17f4 FEF70AFF 		BL	AT			// a+1 next_na
 3034 17f8 FFF7C0BF 		B.w	FIND1			// compare next name
 3035              	FIND5:	
 3036 17fc FEF71CFF 		BL	RFROM			// a+1 na+1 count
 3037 1800 FEF740FF 		BL	DROP			// a+1 na+1
 3038 1804 FEF74EFF 		BL	SWAP			// na+1 a+1
 3039 1808 FEF73CFF 		BL	DROP			// na+1
 3040 180c FEF7DCFF 		BL	ONEM			// na
 3041 1810 FEF740FF 		BL	DUPP			// na na
 3042 1814 FFF75EFF 		BL	NAMET			// na ca
ARM GAS  stm32eforth.s 			page 58


 3043 1818 FEF744FF 		BL	SWAP			// ca na
 3044 181c 52F804FB 		_UNNEST			//  return with a match
 3045              	
 3046              	//    NAME?	( a -- ca na | a F )
 3047              	// 	Search all context vocabularies for a string.
 3048              	
 3049 1820 F80A0018 		.word	_SAMEQ+MAPOFFSET
 3050 1824 05       	_NAMEQ:	.byte  5
 3051 1825 4E414D45 		.ascii "NAME?"
 3051      3F
 3052 182a 00BF     		.p2align 2 	
 3053              	NAMEQ:
 3054 182c 42F804ED 		_NEST
 3055 1830 FFF77CF9 		BL	CNTXT
 3056 1834 FEF7EAFE 		BL	AT
 3057 1838 FFF790FF 		BL	FIND
 3058 183c 52F804FB 		_UNNEST
 3059              	
 3060              	// **************************************************************************
 3061              	//  Terminal input
 3062              	
 3063              	//    	  ( bot eot cur -- bot eot cur )
 3064              	// 	Backup the cursor by one character.
 3065              	
 3066              	// 	.word	_NAMEQ+MAPOFFSET
 3067              	// _BKSP	.byte  2
 3068              	// 	.ascii "^H"
 3069              	// 	.p2align 2 	
 3070              	BKSP:
 3071 1840 42F804ED 		_NEST
 3072 1844 FEF70AFF 		BL	TOR
 3073 1848 FEF736FF 		BL	OVER
 3074 184c FEF7F4FE 		BL	RFROM
 3075 1850 FEF728FF 		BL	SWAP
 3076 1854 FEF730FF 		BL	OVER
 3077 1858 FEF754FF 		BL	XORR
 3078 185c FEF7B0FE 		BL	QBRAN
 3079 1860 880C0018 		.word	BACK1+MAPOFFSET
 3080 1864 FEF789FE 		_DOLIT
 3081 1868 08000000 		.word	BKSPP
 3082 186c FEF774FE 		BL	TECHO
 3083              	// 	BL	ATEXE
 3084 1870 FEF7AAFF 		BL	ONEM
 3085 1874 FEF7D0FF 		BL	BLANK
 3086 1878 FEF76EFE 		BL	TECHO
 3087              	// 	BL	ATEXE
 3088 187c FEF77DFE 		_DOLIT
 3089 1880 08000000 		.word	BKSPP
 3090 1884 FEF768FE 		BL	TECHO
 3091              	// 	BL	ATEXE
 3092              	BACK1:
 3093 1888 52F804FB 		  _UNNEST
 3094              	
 3095              	//    TAP	 ( bot eot cur c -- bot eot cur )
 3096              	// 	Accept and echo the key stroke and bump the cursor.
 3097              	
 3098              	// 	.word	_BKSP+MAPOFFSET
ARM GAS  stm32eforth.s 			page 59


 3099              	// _TAP	.byte  3
 3100              	// 	.ascii "TAP"
 3101              	// 	.p2align 2 	
 3102              	TAP:
 3103 188c 42F804ED 		_NEST
 3104 1890 FEF700FF 		BL	DUPP
 3105 1894 FEF760FE 		BL	TECHO
 3106              	// 	BL	ATEXE
 3107 1898 FEF70EFF 		BL	OVER
 3108 189c FEF7BCFE 		BL	CSTOR
 3109 18a0 FEF78AFF 		BL	ONEP
 3110 18a4 52F804FB 		_UNNEST
 3111              	
 3112              	//    kTAP	( bot eot cur c -- bot eot cur )
 3113              	// 	Process a key stroke, CR or backspace.
 3114              	
 3115              	// 	.word	_TAP+MAPOFFSET
 3116              	// _KTAP	.byte  4
 3117              	// 	.ascii "kTAP"
 3118              	// 	.p2align 2 	
 3119              	KTAP:
 3120              	TTAP:
 3121 18a8 42F804ED 		_NEST
 3122 18ac FEF7F2FE 		BL	DUPP
 3123 18b0 FEF763FE 		_DOLIT
 3124 18b4 0D000000 		.word	CRR
 3125 18b8 FEF724FF 		BL	XORR
 3126 18bc FEF780FE 		BL	QBRAN
 3127 18c0 F00C0018 		.word	KTAP2+MAPOFFSET
 3128 18c4 FEF759FE 		_DOLIT
 3129 18c8 08000000 		.word	BKSPP
 3130 18cc FEF71AFF 		BL	XORR
 3131 18d0 FEF776FE 		BL	QBRAN
 3132 18d4 E80C0018 		.word	KTAP1+MAPOFFSET
 3133 18d8 FEF79EFF 		BL	BLANK
 3134 18dc FFF7D6FF 		BL	TAP
 3135 18e0 52F804FB 		_UNNEST
 3136 18e4 00000000 		.word	0			// patch
 3137              	KTAP1:
 3138 18e8 FFF7AAFF 	  BL	BKSP
 3139 18ec 52F804FB 		_UNNEST
 3140              	KTAP2:
 3141 18f0 FEF7C8FE 	  BL	DROP
 3142 18f4 FEF7D6FE 		BL	SWAP
 3143 18f8 FEF7C4FE 		BL	DROP
 3144 18fc FEF7CAFE 		BL	DUPP
 3145 1900 52F804FB 		_UNNEST
 3146              	
 3147              	//    ACCEPT	( b u -- b u )
 3148              	// 	Accept characters to input buffer. Return with actual count.
 3149              	
 3150 1904 240C0018 		.word	_NAMEQ+MAPOFFSET
 3151 1908 06       	_ACCEP:	.byte  6
 3152 1909 41434345 		.ascii "ACCEPT"
 3152      5054
 3153 190f 00       		.p2align 2 	
 3154              	ACCEP:
ARM GAS  stm32eforth.s 			page 60


 3155 1910 42F804ED 		_NEST
 3156 1914 FEF7D0FE 		BL	OVER
 3157 1918 FEF720FF 		BL	PLUS
 3158 191c FEF7CCFE 		BL	OVER
 3159              	ACCP1:
 3160 1920 FEF7C2FF 	  BL	DDUP
 3161 1924 FEF7EEFE 		BL	XORR
 3162 1928 FEF74AFE 		BL	QBRAN
 3163 192c 5C0D0018 		.word	ACCP4+MAPOFFSET
 3164 1930 FFF7B6FC 		BL	KEY
 3165 1934 FEF7AEFE 		BL	DUPP
 3166 1938 FEF76EFF 		BL	BLANK
 3167 193c FEF71DFE 		_DOLIT
 3168 1940 7F000000 		.word	127
 3169 1944 FFF754F9 		BL	WITHI
 3170 1948 FEF73AFE 		BL	QBRAN
 3171 194c 560D0018 		.word	ACCP2+MAPOFFSET
 3172 1950 FFF79CFF 		BL	TAP
 3173 1954 01E0     		B	ACCP3
 3174              	ACCP2:
 3175 1956 FFF7A7FF 	  BL	KTAP
 3176              	// 	BL	ATEXE
 3177              	ACCP3:	  
 3178 195a E1E7     		B	ACCP1
 3179              	ACCP4:
 3180 195c FEF792FE 	  BL	DROP
 3181 1960 FEF7AAFE 		BL	OVER
 3182 1964 FEF702FF 		BL	SUBB
 3183 1968 52F804FB 		_UNNEST
 3184              	
 3185              	//    QUERY	( -- )
 3186              	// 	Accept input stream to terminal input buffer.
 3187              	
 3188 196c 080D0018 		.word	_ACCEP+MAPOFFSET
 3189 1970 05       	_QUERY:	.byte  5
 3190 1971 51554552 		.ascii "QUERY"
 3190      59
 3191 1976 00BF     		.p2align 2 	
 3192              	QUERY:
 3193 1978 42F804ED 		_NEST
 3194 197c FFF75EFA 		BL	TIB
 3195 1980 FEF7FBFD 		_DOLIT
 3196 1984 50000000 		.word	80
 3197 1988 FFF7C2FF 		BL	ACCEP
 3198 198c FFF7AEF8 		BL	NTIB
 3199 1990 FEF732FE 		BL	STORE
 3200 1994 FEF776FE 		BL	DROP
 3201 1998 FEF7EFFD 		_DOLIT
 3202 199c 00000000 		.word	0
 3203 19a0 FFF79AF8 		BL	INN
 3204 19a4 FEF728FE 		BL	STORE
 3205 19a8 52F804FB 		_UNNEST
 3206              	
 3207              	// **************************************************************************
 3208              	//  Error handling
 3209              	
 3210              	//    ABORT	( a -- )
ARM GAS  stm32eforth.s 			page 61


 3211              	// 	Reset data stack and jump to QUIT.
 3212              	
 3213 19ac 700D0018 		.word	_QUERY+MAPOFFSET
 3214 19b0 05       	_ABORT:	.byte  5
 3215 19b1 41424F52 		.ascii "ABORT"
 3215      54
 3216 19b6 00BF     		.p2align 2 	
 3217              	ABORT:
 3218 19b8 42F804ED 		_NEST
 3219 19bc FFF780FC 		BL	SPACE
 3220              	ABORT1:
 3221 19c0 FFF718F8 		BL	COUNT
 3222 19c4 FFF7A4FC 		BL	TYPEE
 3223 19c8 FEF7D7FD 		_DOLIT
 3224 19cc 3F000000 		.word	0X3F
 3225 19d0 FEF7C2FD 		BL	EMIT
 3226 19d4 FFF7B4FC 		BL	CR
 3227 19d8 00F0ACF8 		BL	PRESE
 3228 19dc 00F0B4B8 		B.W	QUIT
 3229              	
 3230              	//    _abort"	( f -- )
 3231              	// 	Run time routine of ABORT" . Abort with a message.
 3232              	
 3233              	// 	.word	_ABORT+MAPOFFSET
 3234              	// _ABORQ	.byte  COMPO+6
 3235              	// 	.ascii "abort\""
 3236              	// 	.p2align 2 	
 3237              	ABORQ:
 3238 19e0 42F804ED 		_NEST
 3239 19e4 FFF7BCFC 		BL	DOSTR 
 3240 19e8 FEF75CFE 		BL	SWAP 
 3241 19ec FEF7E8FD 		BL	QBRAN
 3242 19f0 F60D0018 		.word	1f+MAPOFFSET	// text flag
 3243 19f4 E4E7     		B	ABORT1 
 3244              	1:
 3245 19f6 FEF745FE 		BL	DROP
 3246 19fa 52F804FB 		_UNNEST			// drop error
 3247              	
 3248              	// **************************************************************************
 3249              	//  The text interpreter
 3250              	
 3251              	//    $INTERPRET  ( a -- )
 3252              	// 	Interpret a word. If failed, try to convert it to an integer.
 3253              	
 3254 19fe B00D0018 		.word	_ABORT+MAPOFFSET
 3255 1a02 0A       	_INTER:	.byte  10
 3256 1a03 2424494E 		.ascii "$$INTERPRET"
 3256      54455250 
 3256      524554
 3257 1a0e 00BF     		.p2align 2 	
 3258              	INTER:
 3259 1a10 42F804ED 		_NEST
 3260 1a14 FFF70AFF 		BL	NAMEQ
 3261 1a18 FEF728FF 		BL	QDUP	// ?defined
 3262 1a1c FEF7D0FD 		BL	QBRAN
 3263 1a20 500E0018 		.word	INTE1+MAPOFFSET
 3264 1a24 FEF7F2FD 		BL	AT
ARM GAS  stm32eforth.s 			page 62


 3265 1a28 FEF7A7FD 		_DOLIT
 3266 1a2c 40000000 		.word	COMPO
 3267 1a30 FEF754FE 		BL	ANDD	// ?compile only lexicon bits
 3268 1a34 FFF7D4FF 		BL	ABORQ
 3269 1a38 0D       		.byte	13
 3270 1a39 20636F6D 		.ascii " compile only"
 3270      70696C65 
 3270      206F6E6C 
 3270      79
 3271 1a46 00BF     		.p2align 2 	
 3272 1a48 FEF7A6FD 		BL	EXECU
 3273 1a4c 52F804FB 		_UNNEST			// execute defined word
 3274              	INTE1:
 3275 1a50 FFF78CFB 	  BL	NUMBQ
 3276 1a54 FEF7B4FD 		BL	QBRAN
 3277 1a58 600E0018 		.word	INTE2+MAPOFFSET
 3278 1a5c 52F804FB 		_UNNEST
 3279              	INTE2:
 3280 1a60 FFF7AABF 	  B.W	ABORT	// error
 3281              	
 3282              	//    [	   ( -- )
 3283              	// 	Start the text interpreter.
 3284              	
 3285 1a64 020E0018 		.word	_INTER+MAPOFFSET
 3286 1a68 81       	_LBRAC:	.byte  IMEDD+1
 3287 1a69 5B       		.ascii "["
 3288 1a6a 00BF     		.p2align 2 	
 3289              	LBRAC:
 3290 1a6c 42F804ED 		_NEST
 3291 1a70 FEF783FD 		_DOLIT
 3292 1a74 100E0018 		.word	INTER+MAPOFFSET
 3293 1a78 FFF742F8 		BL	TEVAL
 3294 1a7c FEF7BCFD 		BL	STORE
 3295 1a80 52F804FB 		_UNNEST
 3296              	
 3297              	//    .OK	 ( -- )
 3298              	// 	Display "ok" only while interpreting.
 3299              	
 3300 1a84 680E0018 		.word	_LBRAC+MAPOFFSET
 3301 1a88 03       	_DOTOK:	.byte  3
 3302 1a89 2E4F4B   		.ascii ".OK"
 3303              		.p2align 2 	
 3304              	DOTOK:
 3305 1a8c 42F804ED 		_NEST
 3306 1a90 FEF773FD 		_DOLIT
 3307 1a94 100E0018 		.word	INTER+MAPOFFSET
 3308 1a98 FFF732F8 		BL	TEVAL
 3309 1a9c FEF7B6FD 		BL	AT
 3310 1aa0 FEF740FF 		BL	EQUAL
 3311 1aa4 FEF78CFD 		BL	QBRAN
 3312 1aa8 B40E0018 		.word	DOTO1+MAPOFFSET
 3313 1aac FFF780FC 		BL	DOTQP
 3314 1ab0 03       		.byte	3
 3315 1ab1 206F6B   		.ascii " ok"
 3316              	DOTO1:
 3317 1ab4 FFF744FC 		BL	CR
 3318 1ab8 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 63


 3319              	
 3320              	//    ?STACK	( -- )
 3321              	// 	Abort if the data stack underflows.
 3322              	
 3323 1abc 880E0018 		.word	_DOTOK+MAPOFFSET
 3324 1ac0 06       	_QSTAC:	.byte  6
 3325 1ac1 3F535441 		.ascii "?STACK"
 3325      434B
 3326 1ac7 00       		.p2align 2 	
 3327              	QSTAC:
 3328 1ac8 42F804ED 		_NEST
 3329 1acc FFF77CF9 		BL	DEPTH
 3330 1ad0 FEF7FAFD 		BL	ZLESS	// check only for underflow
 3331 1ad4 FFF784FF 		BL	ABORQ
 3332 1ad8 0A       		.byte	10
 3333 1ad9 20756E64 		.ascii " underflow"
 3333      6572666C 
 3333      6F77
 3334 1ae3 00       		.p2align 2 	
 3335 1ae4 52F804FB 		_UNNEST
 3336              	
 3337              	//    EVAL	( -- )
 3338              	// 	Interpret the input stream.
 3339              	
 3340 1ae8 C00E0018 		.word	_QSTAC+MAPOFFSET
 3341 1aec 04       	_EVAL:	.byte  4
 3342 1aed 4556414C 		.ascii "EVAL"
 3343 1af1 0000BF   		.p2align 2 	
 3344              	EVAL:
 3345 1af4 42F804ED 		_NEST
 3346              	EVAL1:
 3347 1af8 FFF7DEFD 	    BL	TOKEN
 3348 1afc FEF7CAFD 		BL	DUPP
 3349 1b00 FEF794FD 		BL	CAT	// ?input stream empty
 3350 1b04 FEF75CFD 		BL	QBRAN
 3351 1b08 1C0F0018 		.word	EVAL2+MAPOFFSET
 3352 1b0c FEF7F8FF 		BL	TEVAL
 3353 1b10 FFF7A0F9 		BL	ATEXE
 3354 1b14 FFF7D8FF 		BL	QSTAC	// evaluate input, check stack
 3355 1b18 FFF7EEBF 		B.W	EVAL1
 3356              	EVAL2:
 3357 1b1c FEF7B2FD 		BL	DROP
 3358 1b20 FFF7B4FF 		BL	DOTOK
 3359 1b24 52F804FB 		_UNNEST	// prompt
 3360              	
 3361              	//    PRESET	( -- )
 3362              	// 	Reset data stack pointer and the terminal input buffer.
 3363              	
 3364 1b28 EC0E0018 		.word	_EVAL+MAPOFFSET
 3365 1b2c 06       	_PRESE:	.byte  6
 3366 1b2d 50524553 		.ascii "PRESET"
 3366      4554
 3367 1b33 00       		.p2align 2 	
 3368              	PRESE:
 3369              	//	_NEST
 3370 1b34 03F59D41 		ADD	R1,R3,#SPP&0xffff		//  init SP
 3371 1b38 85EA0505 		EOR	R5,R5,R5			//  init TOS=0
ARM GAS  stm32eforth.s 			page 64


 3372              	//	_UNNEST
 3373 1b3c 7047     		_NEXT
 3374              	
 3375              	//    QUIT	( -- )
 3376              	// 	Reset return stack pointer and start text interpreter.
 3377              	
 3378 1b3e 2C0F0018 		.word	_PRESE+MAPOFFSET
 3379 1b42 04       	_QUIT:	.byte  4
 3380 1b43 51554954 		.ascii "QUIT"
 3381 1b47 00       		.p2align 2 	
 3382              	QUIT:
 3383 1b48 42F804ED 		_NEST
 3384 1b4c 44F68072 		MOVW	R2,#RPP&0xffff  /* RESET RSTACK */
 3385 1b50 C2F20002 	 	MOVT	R2,#RPP>>16 
 3386              	QUIT1:
 3387 1b54 FFF78AFF 		BL	LBRAC			// start interpretation
 3388              	QUIT2:
 3389 1b58 FFF70EFF 		BL	QUERY			// get input
 3390 1b5c FFF7CAFF 		BL	EVAL
 3391 1b60 FEF73AFD 		BL	BRAN
 3392 1b64 580F0018 		.word	QUIT2+MAPOFFSET	// continue till error
 3393              	
 3394              	/***************************
 3395              	//  Flash memory interface
 3396              	***************************/
 3397              	// UNLOCK ( T|F -- )
 3398              	// lock or unlock FLASH write 
 3399              	
 3400 1b68 420F0018 		.word _QUIT+MAPOFFSET  
 3401 1b6c 06       	_UNLOCK: .byte 6
 3402 1b6d 554E4C4F 		.ascii "UNLOCK"
 3402      434B
 3403 1b73 00       		.p2align 2  
 3404              	UNLOCK:	//  unlock flash memory	
 3405 1b74 42F804ED 		_NEST 
 3406 1b78 FEF722FD 		BL QBRAN
 3407 1b7c 9E0F0018 		.word LOCK+MAPOFFSET
 3408 1b80 DFF80404 		ldr	r0, flash_regs 
 3409 1b84 4FF03404 		mov r4,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 3410 1b88 C460     		str r4,[r0,#FLASH_SR]
 3411 1b8a 0469     		ldr r4,[r0,#FLASH_CR]
 3412 1b8c 14F0800F 		tst r4,#(1<<7)
 3413 1b90 03D0     		beq 1f 
 3414 1b92 FE4C     		ldr	r4, flash_regs+4 // key1
 3415 1b94 4460     		str	r4, [r0, #FLASH_KEYR]
 3416 1b96 FE4C     		ldr	r4, flash_regs+8 // key2 
 3417 1b98 4460     		str	r4, [r0, #FLASH_KEYR]
 3418              		/* unlock option registers */
 3419              	/*
 3420              		ldr	r4, flash_regs+4 
 3421              		str	r4, [r0, #FLASH_OPTKEYR]
 3422              		ldr	r4, flash_regs+8
 3423              		str	r4, [r0, #FLASH_OPTKEYR]
 3424              	*/ 
 3425              	1:
 3426 1b9a 52F804FB 		_UNNEST
 3427              	 // lock flash memory
ARM GAS  stm32eforth.s 			page 65


 3428              	LOCK: 
 3429 1b9e FA48     		ldr r0,flash_regs  
 3430              	//	ldr r4,[r0,#FLASH_CR]
 3431 1ba0 4FF08004 		mov r4,#(1<<7)
 3432 1ba4 0461     		str r4,[r0,#FLASH_CR]
 3433 1ba6 52F804FB 		_UNNEST  
 3434              	
 3435              	WAIT_BSY:
 3436 1baa F748     		ldr	r0,flash_regs
 3437              	WAIT1:
 3438 1bac C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 3439 1bae 14F00104 		ands	r4, #0x1	//  BSY
 3440 1bb2 FBD1     		bne	WAIT1
 3441 1bb4 7047     		_NEXT
 3442              	
 3443              	//    ERASE_PAGE	   ( adr -- )
 3444              	// 	  Erase one page of flash memory.
 3445              	//    stm32f103 page size is 1024 bytes 
 3446              	//    adr is any address inside page to erase 
 3447              	
 3448 1bb6 6C0F0018 		.word	_UNLOCK+MAPOFFSET
 3449 1bba 0A       	_EPAGE:	.byte  10
 3450 1bbb 45524153 		.ascii "ERASE_PAGE"
 3450      455F5041 
 3450      4745
 3451 1bc5 0000BF   		.p2align 2 	
 3452              	
 3453              	EPAGE: 	//  page --
 3454 1bc8 42F804ED 		_NEST
 3455 1bcc FFF7EDFF 		bl	WAIT_BSY
 3456 1bd0 FEF7D3FC 		_DOLIT 
 3457 1bd4 01000000 		.word 1 
 3458 1bd8 FFF7CCFF 		bl  UNLOCK 
 3459 1bdc EA48     		ldr r0,flash_regs 	 
 3460 1bde 4FF00204 		mov r4,#2 // set PER bit 
 3461 1be2 0461     		str r4,[r0,#FLASH_CR]
 3462 1be4 4561     		str r5,[r0,#FLASH_AR] // page to erase address 
 3463 1be6 0469     		ldr	r4,[r0, #FLASH_CR]	
 3464 1be8 44F04004 		orr	R4,#0x40	//  set STRT bit   
 3465 1bec 0461     		str	r4,[r0, #FLASH_CR]	//  start erasing
 3466 1bee FFF7DCFF 	 	bl	WAIT_BSY // wait until done
 3467 1bf2 FEF7C2FC 		_DOLIT 
 3468 1bf6 00000000 		.word 0 
 3469 1bfa FFF7BBFF 		bl	UNLOCK  // lock flash write 
 3470 1bfe C568     		ldr r5,[r0,#FLASH_SR] // check for errors 
 3471 1c00 05F01405 		and r5,r5,#(5<<2)
 3472 1c04 FFF7ECFE 		bl ABORQ 
 3473 1c08 0D       		.byte 13
 3474 1c09 20657261 		.ascii " erase error!"
 3474      73652065 
 3474      72726F72 
 3474      21
 3475 1c16 00BF     		.p2align 2
 3476 1c18 52F804FB 		_UNNEST
 3477              	
 3478              	// store 16 bit word
 3479              	// expect flash unlocked  
ARM GAS  stm32eforth.s 			page 66


 3480              	HWORD_WRITE: // ( hword address -- )
 3481 1c1c 42F804ED 		_NEST
 3482 1c20 0469     		ldr	r4, [r0, #FLASH_CR]	//  FLASH_CR
 3483              	//	bic r4,#(1<<9)|(1<<5)|(1<<4)|(1<<2)|(1<<1) //  clear OPTWRE|OPTER|OPTPG|MER|PER
 3484 1c22 4FF00104 		mov r4,#1 // set PG 
 3485 1c26 0461     		str r4,[r0,#FLASH_CR]
 3486 1c28 2E46     		mov r6,r5 
 3487 1c2a 51F8045B 		_POP 
 3488 1c2e 3580     		strh r5,[r6] 
 3489 1c30 FFF7BBFF 		bl WAIT_BSY 
 3490 1c34 C568     		ldr r5,[r0,#FLASH_SR]
 3491 1c36 05F01405 		and r5,r5,#(5<<2) 
 3492 1c3a FEF7C1FC 		bl QBRAN
 3493 1c3e 54100018 		.word 1f+MAPOFFSET 
 3494 1c42 FFF7CDFE 		bl ABORQ
 3495 1c46 0D       		.byte 13
 3496 1c47 20777269 		.ascii " write error!"
 3496      74652065 
 3496      72726F72 
 3496      21
 3497              		.p2align 2
 3498              	1:	 
 3499 1c54 52F804FB 		_UNNEST 
 3500              	
 3501              	
 3502              	//    I!	   ( data address -- )
 3503              	// 	   Write one word into flash memory
 3504              	//	   address must even 
 3505              	
 3506 1c58 BA0F0018 		.word	_EPAGE+MAPOFFSET
 3507 1c5c 02       	_ISTOR:	.byte  2
 3508 1c5d 4921     		.ascii "I!"
 3509 1c5f 00       		.p2align 2 	
 3510              	ISTOR:	//  data address --
 3511 1c60 42F804ED 		_NEST
 3512 1c64 FFF7A1FF 		bl	WAIT_BSY
 3513 1c68 FEF787FC 		_DOLIT 
 3514 1c6c 01000000 		.word 1 
 3515 1c70 FFF780FF 		bl  UNLOCK 
 3516 1c74 FEF718FE 		BL DDUP 
 3517 1c78 FEF7F0FC 		BL TOR 
 3518 1c7c FEF7EEFC 		BL TOR 
 3519 1c80 FFF7CCFF 		BL HWORD_WRITE
 3520 1c84 FEF7D8FC 		BL RFROM 
 3521 1c88 4FEA3545 		ror r5,r5,#16
 3522 1c8c FEF7D4FC 		BL RFROM 
 3523 1c90 05F10205 		add r5,r5,#2 
 3524 1c94 FFF7C2FF 		BL HWORD_WRITE 
 3525 1c98 FEF76FFC 		_DOLIT 
 3526 1c9c 00000000 		.word 0
 3527 1ca0 FFF768FF 		bl UNLOCK 
 3528 1ca4 52F804FB 		_UNNEST
 3529              	
 3530              	// IMG_SIZE ( -- u )
 3531              	// return flash pages required to save 
 3532              	// user ram  
 3533 1ca8 5C100018 		.word _ISTOR+MAPOFFSET 
ARM GAS  stm32eforth.s 			page 67


 3534 1cac 08       	_IMG_SIZE: .byte 8
 3535 1cad 494D475F 		.ascii "IMG_SIZE" 
 3535      53495A45 
 3536 1cb5 0000BF   		.p2align 2
 3537              	IMG_SIZE: 
 3538 1cb8 42F804ED 		_NEST
 3539 1cbc FEF75DFC 		_DOLIT 
 3540 1cc0 38000000 		.word VARS_END_OFS-IMG_SIGN_OFS 
 3541 1cc4 FEF76CFF 		BL USER_END 
 3542 1cc8 FEF75CFF 		BL USER_BEGIN 
 3543 1ccc FEF74EFD 		BL SUBB 
 3544 1cd0 FEF744FD 		BL PLUS 
 3545 1cd4 FEF751FC 		_DOLIT 
 3546 1cd8 00040000 		.word 1024 
 3547 1cdc FEF7F6FF 		BL SLMOD 
 3548 1ce0 FEF7E0FC 		BL SWAP 
 3549 1ce4 FEF76CFC 		BL QBRAN 
 3550 1ce8 F0100018 		.word 1f+MAPOFFSET 
 3551 1cec FEF764FD 		BL ONEP
 3552              	1:
 3553 1cf0 52F804FB 		_UNNEST  
 3554              	
 3555              	// IMG? (  -- T|F )
 3556              	// check if an image has been saved in FLASH 
 3557 1cf4 AC100018 		.word _IMG_SIZE+MAPOFFSET 
 3558 1cf8 04       	_IMGQ: .byte 4
 3559 1cf9 494D473F 		.ascii "IMG?"
 3560 1cfd 0000BF   		.p2align 2
 3561              	IMGQ:
 3562 1d00 42F804ED 		_NEST 
 3563 1d04 FEF75AFF 		BL IMG_ADR 
 3564 1d08 FEF780FC 		BL AT 
 3565 1d0c FEF764FF 		BL IMG_SIGN  
 3566 1d10 FEF77CFC 		BL AT 
 3567 1d14 FEF7F6FC 		BL XORR  
 3568 1d18 FEF7FAFD 		BL ZEQUAL
 3569 1d1c 52F804FB 		_UNNEST
 3570              	
 3571              	// LOAD_IMG (  -- )
 3572              	// Load image from FLASH to RAM. 
 3573 1d20 F8100018 		.word _IMGQ+MAPOFFSET
 3574 1d24 08       	_LOAD_IMG: .byte 8 
 3575 1d25 4C4F4144 		.ascii "LOAD_IMG" 
 3575      5F494D47 
 3576 1d2d 0000BF   		.p2align 2 
 3577              	LOAD_IMG:
 3578 1d30 42F804ED 		_NEST 
 3579 1d34 FFF7E4FF 		BL IMGQ 
 3580 1d38 FEF742FC 		BL QBRAN 
 3581 1d3c 84110018 		.word 1f+MAPOFFSET
 3582              	/* copy system variables to RAM */
 3583 1d40 FEF73CFF 		BL IMG_ADR 
 3584 1d44 FEF7A6FC 		BL DUPP 
 3585 1d48 FEF788FC 		BL TOR   // save source address 
 3586 1d4c FEF744FF 		BL IMG_SIGN 
 3587 1d50 41F8045D 		_PUSH 
 3588 1d54 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
ARM GAS  stm32eforth.s 			page 68


 3589 1d58 FEF79CFC 		BL DUPP 
 3590 1d5c FEF77EFC 		BL TOR 
 3591 1d60 FFF79CF8 		BL MOVE // ( src dest count -- ) R: src count 
 3592              	/* copy user definitions */
 3593 1d64 FEF768FC 		BL RFROM 
 3594 1d68 FEF766FC 		BL RFROM  
 3595 1d6c FEF7F6FC 		BL PLUS // source address  
 3596 1d70 FEF708FF 		BL USER_BEGIN // destination address
 3597 1d74 FFF74AF8 		BL HERE  
 3598 1d78 FEF79EFC 		BL OVER 
 3599 1d7c FEF7F6FC 		BL SUBB  // byte count 
 3600 1d80 FFF78CF8 		BL MOVE
 3601 1d84 52F804FB 	1:	_UNNEST  
 3602              	
 3603              	// ERASE_MPG ( u1 u2 -- )
 3604              	// erase many pages 
 3605              	// u1 first page number 
 3606              	// u2 how many pages  
 3607 1d88 24110018 		.word _LOAD_IMG+MAPOFFSET
 3608 1d8c 09       	_ERASE_MPG: .byte 9 
 3609 1d8d 45524153 		.ascii "ERASE_MPG"	
 3609      455F4D50 
 3609      47
 3610 1d96 00BF     		.p2align 2 
 3611              	ERASE_MPG:
 3612 1d98 42F804ED 		_NEST 
 3613 1d9c FEF75EFC 		BL TOR 
 3614 1da0 00F052F8 		BL PG_TO_ADR 
 3615 1da4 FEF718FC 		BL BRAN 
 3616 1da8 C0110018 		.word 2f+MAPOFFSET 
 3617              	1:
 3618 1dac FEF772FC 		BL DUPP 
 3619 1db0 FEF754FC 		BL TOR 
 3620 1db4 FFF708FF 		BL EPAGE 
 3621 1db8 FEF73EFC 		BL RFROM
 3622 1dbc 05F58065 		add r5,#PAGE_SIZE 
 3623              	2:
 3624 1dc0 FEF7EFFB 		BL DONXT
 3625 1dc4 AC110018 		.word 1b+MAPOFFSET 
 3626 1dc8 51F8045B 		_POP 
 3627 1dcc 52F804FB 		_UNNEST 
 3628              	
 3629              	// FLSH_WR ( src dest u -- dest+u )
 3630              	// write u words to flash memory 
 3631 1dd0 8C110018 		.word _ERASE_MPG+MAPOFFSET
 3632 1dd4 07       	_FLSH_WR: .byte 7 
 3633 1dd5 464C5348 		.ascii "FLSH_WR"
 3633      5F5752
 3634              		.p2align  
 3635              	FLSH_WR: 
 3636 1ddc 42F804ED 		_NEST 
 3637 1de0 FEF73CFC 		BL TOR
 3638 1de4 FEF7F8FB 		BL BRAN 
 3639 1de8 0C120018 		.word 3f+MAPOFFSET  
 3640              	/* write system variables to FLASH */
 3641 1dec FEF736FC 	2:  BL TOR  // destination address 
 3642 1df0 FEF750FC 		BL DUPP 
ARM GAS  stm32eforth.s 			page 69


 3643 1df4 FEF70AFC 		BL AT   // get data 
 3644 1df8 FEF728FC 		BL RAT  // get destination address 
 3645 1dfc FFF730FF 		BL ISTOR
 3646 1e00 FEF7FAFC 		BL CELLP  // increment source address 
 3647 1e04 FEF718FC 		BL RFROM 
 3648 1e08 FEF7F6FC 		BL CELLP  // increment dest address 
 3649 1e0c FEF7C9FB 	3:	BL DONXT 
 3650 1e10 EC110018 		.word 2b+MAPOFFSET
 3651 1e14 FEF722FC 		BL TOR 
 3652 1e18 FEF734FC 		BL DROP 
 3653 1e1c FEF70CFC 		BL RFROM 
 3654 1e20 52F804FB 		_UNNEST 
 3655              	
 3656              	// ADR>PG ( a -- n )
 3657              	// convert address to page number, {0..127} 
 3658 1e24 D4110018 		.word _FLSH_WR+MAPOFFSET
 3659 1e28 06       	_ADR_TO_PG: .byte 6 
 3660 1e29 4144523E 		.ascii "ADR>PG" 
 3660      5047
 3661 1e2f 00       		.p2align 2 
 3662              	ADR_TO_PG: 
 3663 1e30 4FEA9525 		lsr r5,#10 
 3664 1e34 05F07F05 		and r5,#127 
 3665 1e38 7047     		_NEXT  
 3666              	
 3667              	// PG>ADR ( n -- a )
 3668              	// convert page# to address 
 3669 1e3a 28120018 		.word _ADR_TO_PG+MAPOFFSET
 3670 1e3e 06       	_PG_TO_ADR: .byte 6 
 3671 1e3f 50473E41 		.ascii "PG>ADR" 
 3671      4452
 3672 1e45 0000BF   		.p2align 2 
 3673              	PG_TO_ADR:
 3674 1e48 C0F20205 		movt r5,#2
 3675 1e4c 4FEA8525 		lsl r5,#10 
 3676 1e50 7047     		_NEXT 
 3677              	
 3678              	// ERASE_IMG (  -- )
 3679              	// erase image in from FLASH  
 3680 1e52 3E120018 		.word _PG_TO_ADR+MAPOFFSET 
 3681 1e56 09       	_ERASE_IMG: .byte 9
 3682 1e57 45524153 		.ascii "ERASE_IMG"
 3682      455F494D 
 3682      47
 3683              		.p2align 2
 3684              	ERASE_IMG:
 3685 1e60 42F804ED 		_NEST
 3686 1e64 FEF7AAFE 		BL IMG_ADR 
 3687 1e68 FFF726FF 		BL IMG_SIZE 
 3688 1e6c FEF7F6FB 		BL TOR 
 3689 1e70 FEF7B2FB 		BL BRAN 
 3690 1e74 84120018 		.word  2f+MAPOFFSET 
 3691 1e78 FEF70CFC 	1:	BL DUPP 
 3692 1e7c FFF7A4FE 		BL EPAGE
 3693 1e80 05F58065 		ADD R5,#PAGE_SIZE 
 3694 1e84 FEF78DFB 	2:	BL DONXT 
 3695 1e88 78120018 		.word 1b+MAPOFFSET 
ARM GAS  stm32eforth.s 			page 70


 3696 1e8c FEF7FAFB 		BL DROP 
 3697 1e90 52F804FB 		_UNNEST 
 3698              	
 3699              	// SAVE_IMG ( -- )
 3700              	// save in FLASH memory system variables and user defintitions.
 3701 1e94 56120018 		.word _ERASE_IMG+MAPOFFSET	
 3702 1e98 08       	_SAVE_IMG: .byte 8 
 3703 1e99 53415645 		.ascii "SAVE_IMG"
 3703      5F494D47 
 3704 1ea1 0000BF   		.p2align 2
 3705              	SAVE_IMG:
 3706 1ea4 42F804ED 		_NEST 
 3707 1ea8 FEF7B0FF 		BL HERE 
 3708 1eac FEF76AFE 		BL USER_BEGIN
 3709 1eb0 FEF738FD 		BL EQUAL 
 3710 1eb4 FEF784FB 		BL QBRAN
 3711 1eb8 C0120018 		.word 1f+MAPOFFSET 
 3712 1ebc 52F804FB 		_UNNEST  // nothing to save 
 3713 1ec0 FFF71EFF 	1:	BL IMGQ 
 3714 1ec4 FEF77CFB 		BL QBRAN 
 3715 1ec8 D0120018 		.word 2f+MAPOFFSET
 3716              	/* delete saved image */
 3717 1ecc FFF7C8FF 		BL ERASE_IMG 
 3718              	/* save system variables */
 3719              	2:	
 3720 1ed0 FEF782FE 		BL IMG_SIGN // src address 
 3721 1ed4 FEF772FE 		BL IMG_ADR  //  ( src dest --  
 3722 1ed8 41F8045D 		_PUSH 
 3723 1edc 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 3724 1ee0 FEF7ACFC 		BL CELLSL  // word count 
 3725 1ee4 FFF77AFF 		BL FLSH_WR  // ( src dest count -- dest+u )
 3726              	/* write user definitions */
 3727 1ee8 FEF74CFE 		BL USER_BEGIN
 3728 1eec FEF7DAFB 		BL SWAP  // ( src dest+ -- )
 3729 1ef0 FEF78CFF 		BL HERE   
 3730 1ef4 FEF746FE 		BL USER_BEGIN 
 3731 1ef8 FEF738FC 		BL SUBB 
 3732 1efc FEF79EFC 		BL CELLSL  // src dest+ count -- 
 3733 1f00 FFF76CFF 		BL FLSH_WR  
 3734 1f04 52F804FB 		_UNNEST 
 3735              	
 3736              	// TURNKEY ( -- "WORD") 
 3737              	// set autorun program in 'BOOT variable 
 3738              	// and save image in slot 0.
 3739 1f08 98120018 		.word _SAVE_IMG+MAPOFFSET
 3740 1f0c 07       	_TURNKEY: .byte 7
 3741 1f0d 5455524E 		.ascii "TURNKEY"
 3741      4B4559
 3742              		.p2align 2 
 3743              	TURNKEY:
 3744 1f14 42F804ED 		_NEST 
 3745 1f18 00F040F8 		BL TICK 
 3746 1f1c FEF7B8FD 		BL TBOOT 
 3747 1f20 FEF76AFB 		BL STORE 
 3748 1f24 FFF7BEFF 		BL SAVE_IMG 
 3749 1f28 52F804FB 		_UNNEST
 3750              	
ARM GAS  stm32eforth.s 			page 71


 3751 1f2c 0C130018 		.word _TURNKEY+MAPOFFSET
 3752 1f30 06       	_FORGET: .byte 6 
 3753 1f31 464F5247 		.ascii "FORGET"
 3753      4554
 3754 1f37 00       		.p2align 2
 3755              	FORGET:
 3756 1f38 42F804ED 		_NEST 
 3757 1f3c FFF7BCFB 		BL TOKEN 
 3758 1f40 FEF7A8FB 		BL DUPP 
 3759 1f44 FEF73CFB 		BL QBRAN 
 3760 1f48 FEF717FB 		_DOLIT 
 3761 1f4c 84130018 		.word 9f+MAPOFFSET 
 3762 1f50 FFF76CFC 		BL NAMEQ // ( a -- ca na | a 0 )
 3763 1f54 FEF78AFC 		BL QDUP 
 3764 1f58 FEF732FB 		BL QBRAN 
 3765 1f5c 80130018 		.word 8f+MAPOFFSET
 3766 1f60 FEF752FC 		BL CELLM // ( ca la )
 3767 1f64 FEF796FB 		BL DUPP 
 3768 1f68 FEF7EAFD 		BL CPP   
 3769 1f6c FEF744FB 		BL STORE
 3770 1f70 FEF74CFB 		BL AT 
 3771 1f74 FEF7F8FD 		BL LAST 
 3772 1f78 FEF73EFB 		BL STORE
 3773 1f7c 00F024FA 		BL OVERT 
 3774 1f80 FEF780FB 	8:  BL DROP 
 3775 1f84 52F804FB 	9:	_UNNEST 
 3776              	
 3777              	
 3778              	flash_regs:
 3779 1f88 00200240 		.word FLASH_BASE_ADR // 0 
 3780 1f8c 23016745 		.word FLASH_KEY1   // 4 
 3781 1f90 AB89EFCD 		.word FLASH_KEY2   // 8
 3782              	
 3783              	// **************************************************************************
 3784              	//  The compiler
 3785              	
 3786              	//    '	   ( -- ca )
 3787              	// 	Search context vocabularies for the next word in input stream.
 3788              	
 3789 1f94 30130018 		.word	_FORGET+MAPOFFSET
 3790 1f98 01       	_TICK:	.byte  1
 3791 1f99 27       		.ascii "'"
 3792 1f9a 00BF     		.p2align 2 	
 3793              	TICK:
 3794 1f9c 42F804ED 		_NEST
 3795 1fa0 FFF78AFB 		BL	TOKEN
 3796 1fa4 FFF742FC 		BL	NAMEQ	// ?defined
 3797 1fa8 FEF70AFB 		BL	QBRAN
 3798 1fac B4130018 		.word	TICK1+MAPOFFSET
 3799 1fb0 52F804FB 		_UNNEST	// yes, push code address
 3800 1fb4 FFF700BD 	TICK1:	B.W	ABORT	// no, error
 3801              	
 3802              	//    ALLOT	( n -- )
 3803              	// 	Allocate n bytes to the ram area.
 3804              	
 3805 1fb8 98130018 		.word	_TICK+MAPOFFSET
 3806 1fbc 05       	_ALLOT:	.byte  5
ARM GAS  stm32eforth.s 			page 72


 3807 1fbd 414C4C4F 		.ascii "ALLOT"
 3807      54
 3808 1fc2 00BF     		.p2align 2 	
 3809              	ALLOT:
 3810 1fc4 42F804ED 		_NEST
 3811 1fc8 FEF7BAFD 		BL	CPP
 3812 1fcc FEF7EEFC 		BL	PSTOR
 3813 1fd0 52F804FB 		_UNNEST			// adjust code pointer
 3814              	
 3815              	//    ,	   ( w -- )
 3816              	// 	Compile an integer into the code dictionary.
 3817              	
 3818 1fd4 BC130018 		.word	_ALLOT+MAPOFFSET
 3819 1fd8 012C     	_COMMA:	.byte  1,','
 3820 1fda 00BF     		.p2align 2 	
 3821              	COMMA:
 3822 1fdc 42F804ED 		_NEST
 3823 1fe0 FEF714FF 		BL	HERE
 3824 1fe4 FEF756FB 		BL	DUPP
 3825 1fe8 FEF706FC 		BL	CELLP	// cell boundary
 3826 1fec FEF7A8FD 		BL	CPP
 3827 1ff0 FEF702FB 		BL	STORE
 3828 1ff4 FEF700FB 		BL	STORE
 3829 1ff8 52F804FB 		_UNNEST	// adjust code pointer, compile
 3830              		.p2align 2 
 3831              	//    [COMPILE]   ( -- //  string> )
 3832              	// 	Compile the next immediate word into code dictionary.
 3833              	
 3834 1ffc D8130018 		.word	_COMMA+MAPOFFSET
 3835 2000 89       	_BCOMP:	.byte  IMEDD+9
 3836 2001 5B434F4D 		.ascii "[COMPILE]"
 3836      50494C45 
 3836      5D
 3837 200a 00BF     		.p2align 2 	
 3838              	BCOMP:
 3839 200c 42F804ED 		_NEST
 3840 2010 FFF7C4FF 		BL	TICK
 3841 2014 FFF7E2FF 		BL	COMMA
 3842 2018 52F804FB 		_UNNEST
 3843              	
 3844              	//    COMPILE	( -- )
 3845              	// 	Compile the next address in colon list to code dictionary.
 3846              	
 3847 201c 00140018 		.word	_BCOMP+MAPOFFSET
 3848 2020 47       	_COMPI:	.byte  COMPO+7
 3849 2021 434F4D50 		.ascii "COMPILE"
 3849      494C45
 3850              		.p2align 2 	
 3851              	COMPI:
 3852 2028 42F804ED 		_NEST
 3853 202c FEF704FB 		BL	RFROM
 3854 2030 25F00105 		BIC	R5,R5,#1
 3855 2034 FEF72EFB 		BL	DUPP
 3856 2038 FEF7E8FA 		BL	AT
 3857 203c 00F016FA 		BL	CALLC			// compile BL instruction
 3858 2040 FEF7DAFB 		BL	CELLP
 3859 2044 45F00105 		ORR	R5,R5,#1
ARM GAS  stm32eforth.s 			page 73


 3860 2048 FEF708FB 		BL	TOR
 3861 204c 52F804FB 		_UNNEST			// adjust return address
 3862              	
 3863              	//    LITERAL	( w -- )
 3864              	// 	Compile tos to code dictionary as an integer literal.
 3865              	
 3866 2050 20140018 		.word	_COMPI+MAPOFFSET
 3867 2054 87       	_LITER:	.byte  IMEDD+7
 3868 2055 4C495445 		.ascii "LITERAL"
 3868      52414C
 3869              		.p2align 2 	
 3870              	LITER:
 3871 205c 42F804ED 		_NEST
 3872 2060 FFF7E2FF 		BL	COMPI
 3873 2064 7AF9FF17 		.word	DOLIT+MAPOFFSET
 3874 2068 FFF7B8FF 		BL	COMMA
 3875 206c 52F804FB 		_UNNEST
 3876              	
 3877              	//    $,"	( -- )
 3878              	// 	Compile a literal string up to next " .
 3879              	
 3880              	// 	.word	_LITER+MAPOFFSET
 3881              	// _STRCQ	.byte  3
 3882              	// 	.ascii "$$,"""
 3883              	// 	.p2align 2 	
 3884              	STRCQ:
 3885 2070 42F804ED 		_NEST
 3886 2074 FEF781FA 		_DOLIT
 3887 2078 FCFFFFFF 		.word	-4
 3888 207c FEF760FD 		BL	CPP
 3889 2080 FEF794FC 		BL	PSTOR
 3890 2084 FEF779FA 		_DOLIT
 3891 2088 22000000 		.word	'\"'
 3892 208c FFF702FB 		BL	WORDD			// move word to code dictionary
 3893 2090 FEF7B0FC 		BL	COUNT
 3894 2094 FEF762FB 		BL	PLUS
 3895 2098 FEF764FE 		BL	ALGND			// calculate aligned end of string
 3896 209c FEF750FD 		BL	CPP
 3897 20a0 FEF7AAFA 		BL	STORE
 3898 20a4 52F804FB 		_UNNEST 			// adjust the code pointer
 3899              	
 3900              	// **************************************************************************
 3901              	//  Structures
 3902              	
 3903              	//    FOR	 ( -- a )
 3904              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3905              	
 3906 20a8 54140018 		.word	_LITER+MAPOFFSET
 3907 20ac C3       	_FOR:	.byte  COMPO+IMEDD+3
 3908 20ad 464F52   		.ascii "FOR"
 3909              		.p2align 2 	
 3910              	FOR:
 3911 20b0 42F804ED 		_NEST
 3912 20b4 FFF7B8FF 		BL	COMPI
 3913 20b8 5CFAFF17 		.word	TOR+MAPOFFSET
 3914 20bc FEF7A6FE 		BL	HERE
 3915 20c0 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 74


 3916              	
 3917              	//    BEGIN	( -- a )
 3918              	// 	Start an infinite or indefinite loop structure.
 3919              	
 3920 20c4 AC140018 		.word	_FOR+MAPOFFSET
 3921 20c8 C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 3922 20c9 42454749 		.ascii "BEGIN"
 3922      4E
 3923 20ce 00BF     		.p2align 2 	
 3924              	BEGIN:
 3925 20d0 42F804ED 		_NEST
 3926 20d4 FEF79AFE 		BL	HERE
 3927 20d8 52F804FB 		_UNNEST
 3928              		.p2align 2 
 3929              	//    NEXT	( a -- )
 3930              	// 	Terminate a FOR-NEXT loop structure.
 3931              	
 3932 20dc C8140018 		.word	_BEGIN+MAPOFFSET
 3933 20e0 C4       	_NEXT:	.byte  COMPO+IMEDD+4
 3934 20e1 4E455854 		.ascii "NEXT"
 3935 20e5 0000BF   		.p2align 2 	
 3936              	NEXT:
 3937 20e8 42F804ED 		_NEST
 3938 20ec FFF79CFF 		BL	COMPI
 3939 20f0 A2F9FF17 		.word	DONXT+MAPOFFSET
 3940 20f4 FFF772FF 		BL	COMMA
 3941 20f8 52F804FB 		_UNNEST
 3942              	
 3943              	//    UNTIL	( a -- )
 3944              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3945              	
 3946 20fc E0140018 		.word	_NEXT+MAPOFFSET
 3947 2100 C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3948 2101 554E5449 		.ascii "UNTIL"
 3948      4C
 3949 2106 00BF     		.p2align 2 	
 3950              	UNTIL:
 3951 2108 42F804ED 		_NEST
 3952 210c FFF78CFF 		BL	COMPI
 3953 2110 C0F9FF17 		.word	QBRAN+MAPOFFSET
 3954 2114 FFF762FF 		BL	COMMA
 3955 2118 52F804FB 		_UNNEST
 3956              	
 3957              	//    AGAIN	( a -- )
 3958              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3959              	
 3960 211c 00150018 		.word	_UNTIL+MAPOFFSET
 3961 2120 C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3962 2121 41474149 		.ascii "AGAIN"
 3962      4E
 3963 2126 00BF     		.p2align 2 	
 3964              	AGAIN:
 3965 2128 42F804ED 		_NEST
 3966 212c FFF77CFF 		BL	COMPI
 3967 2130 D8F9FF17 		.word	BRAN+MAPOFFSET
 3968 2134 FFF752FF 		BL	COMMA
 3969 2138 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 75


 3970              	
 3971              	//    IF	  ( -- A )
 3972              	// 	Begin a conditional branch structure.
 3973              	
 3974 213c 20150018 		.word	_AGAIN+MAPOFFSET
 3975 2140 C2       	_IFF:	.byte  COMPO+IMEDD+2
 3976 2141 4946     		.ascii "IF"
 3977 2143 00       		.p2align 2 	
 3978              	IFF:
 3979 2144 42F804ED 		_NEST
 3980 2148 FFF76EFF 		BL	COMPI
 3981 214c C0F9FF17 		.word	QBRAN+MAPOFFSET
 3982 2150 FEF75CFE 		BL	HERE
 3983 2154 FEF711FA 		_DOLIT
 3984 2158 04000000 		.word	4
 3985 215c FEF7F0FC 		BL	CPP
 3986 2160 FEF724FC 		BL	PSTOR
 3987 2164 52F804FB 		_UNNEST
 3988              	
 3989              	//    AHEAD	( -- A )
 3990              	// 	Compile a forward branch instruction.
 3991              	
 3992 2168 40150018 		.word	_IFF+MAPOFFSET
 3993 216c C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 3994 216d 41484541 		.ascii "AHEAD"
 3994      44
 3995 2172 00BF     		.p2align 2 	
 3996              	AHEAD:
 3997 2174 42F804ED 		_NEST
 3998 2178 FFF756FF 		BL	COMPI
 3999 217c D8F9FF17 		.word	BRAN+MAPOFFSET
 4000 2180 FEF744FE 		BL	HERE
 4001 2184 FEF7F9F9 		_DOLIT
 4002 2188 04000000 		.word	4
 4003 218c FEF7D8FC 		BL	CPP
 4004 2190 FEF70CFC 		BL	PSTOR
 4005 2194 52F804FB 		_UNNEST
 4006              	
 4007              	//    REPEAT	( A a -- )
 4008              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 4009              	
 4010 2198 6C150018 		.word	_AHEAD+MAPOFFSET
 4011 219c C6       	_REPEA:	.byte  COMPO+IMEDD+6
 4012 219d 52455045 		.ascii "REPEAT"
 4012      4154
 4013 21a3 00       		.p2align 2 	
 4014              	REPEA:
 4015 21a4 42F804ED 		_NEST
 4016 21a8 FFF7BEFF 		BL	AGAIN
 4017 21ac FEF72EFE 		BL	HERE
 4018 21b0 FEF778FA 		BL	SWAP
 4019 21b4 FEF720FA 		BL	STORE
 4020 21b8 52F804FB 		_UNNEST
 4021              	
 4022              	//    THEN	( A -- )
 4023              	// 	Terminate a conditional branch structure.
 4024              	
ARM GAS  stm32eforth.s 			page 76


 4025 21bc 9C150018 		.word	_REPEA+MAPOFFSET
 4026 21c0 C4       	_THENN:	.byte  COMPO+IMEDD+4
 4027 21c1 5448454E 		.ascii "THEN"
 4028 21c5 0000BF   		.p2align 2 	
 4029              	THENN:
 4030 21c8 42F804ED 		_NEST
 4031 21cc FEF71EFE 		BL	HERE
 4032 21d0 FEF768FA 		BL	SWAP
 4033 21d4 FEF710FA 		BL	STORE
 4034 21d8 52F804FB 		_UNNEST
 4035              	
 4036              	//    AFT	 ( a -- a A )
 4037              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 4038              	
 4039 21dc C0150018 		.word	_THENN+MAPOFFSET
 4040 21e0 C3       	_AFT:	.byte  COMPO+IMEDD+3
 4041 21e1 414654   		.ascii "AFT"
 4042              		.p2align 2 	
 4043              	AFT:
 4044 21e4 42F804ED 		_NEST
 4045 21e8 FEF74CFA 		BL	DROP
 4046 21ec FFF7C2FF 		BL	AHEAD
 4047 21f0 FFF76EFF 		BL	BEGIN
 4048 21f4 FEF756FA 		BL	SWAP
 4049 21f8 52F804FB 		_UNNEST
 4050              	
 4051              	//    ELSE	( A -- A )
 4052              	// 	Start the false clause in an IF-ELSE-THEN structure.
 4053              	
 4054 21fc E0150018 		.word	_AFT+MAPOFFSET
 4055 2200 C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 4056 2201 454C5345 		.ascii "ELSE"
 4057 2205 0000BF   		.p2align 2 	
 4058              	ELSEE:
 4059 2208 42F804ED 		_NEST
 4060 220c FFF7B2FF 		BL	AHEAD
 4061 2210 FEF748FA 		BL	SWAP
 4062 2214 FFF7D8FF 		BL	THENN
 4063 2218 52F804FB 		_UNNEST
 4064              	
 4065              	//    WHILE	( a -- A a )
 4066              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 4067              	
 4068 221c 00160018 		.word	_ELSEE+MAPOFFSET
 4069 2220 C5       	_WHILE:	.byte  COMPO+IMEDD+5
 4070 2221 5748494C 		.ascii "WHILE"
 4070      45
 4071 2226 00BF     		.p2align 2 	
 4072              	WHILE:
 4073 2228 42F804ED 		_NEST
 4074 222c FFF78AFF 		BL	IFF
 4075 2230 FEF738FA 		BL	SWAP
 4076 2234 52F804FB 		_UNNEST
 4077              	
 4078              	//    ABORT"	( -- //  string> )
 4079              	// 	Conditional abort with an error message.
 4080              	
ARM GAS  stm32eforth.s 			page 77


 4081 2238 20160018 		.word	_WHILE+MAPOFFSET
 4082 223c 86       	_ABRTQ:	.byte  IMEDD+6
 4083 223d 41424F52 		.ascii "ABORT\""
 4083      5422
 4084 2243 00       		.p2align 2 	
 4085              	ABRTQ:
 4086 2244 42F804ED 		_NEST
 4087 2248 FFF7EEFE 		BL	COMPI
 4088 224c E00D0018 		.word	ABORQ+MAPOFFSET
 4089 2250 FFF70EFF 		BL	STRCQ
 4090 2254 52F804FB 		_UNNEST
 4091              	
 4092              	//    $"	( -- //  string> )
 4093              	// 	Compile an inlineDCB literal.
 4094              	
 4095 2258 3C160018 		.word	_ABRTQ+MAPOFFSET
 4096 225c 82       	_STRQ:	.byte  IMEDD+2
 4097 225d 2422     		.byte	'$','"'
 4098 225f 00       		.p2align 2 	
 4099              	STRQ:
 4100 2260 42F804ED 		_NEST
 4101 2264 FFF7E0FE 		BL	COMPI
 4102 2268 94070018 		.word	STRQP+MAPOFFSET
 4103 226c FFF700FF 		BL	STRCQ
 4104 2270 52F804FB 		_UNNEST
 4105              	
 4106              	//    ."	( -- //  string> )
 4107              	// 	Compile an inline word  literal to be typed out at run time.
 4108              	
 4109 2274 5C160018 		.word	_STRQ+MAPOFFSET
 4110 2278 C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 4111 2279 2E22     		.ascii	".\""
 4112 227b 00       		.p2align 2 	
 4113              	DOTQ:
 4114 227c 42F804ED 		_NEST
 4115 2280 FFF7D2FE 		BL	COMPI
 4116 2284 B0070018 		.word	DOTQP+MAPOFFSET
 4117 2288 FFF7F2FE 		BL	STRCQ
 4118 228c 52F804FB 		_UNNEST
 4119              	
 4120              	// **************************************************************************
 4121              	//  Name compiler
 4122              	
 4123              	//    ?UNIQUE	( a -- a )
 4124              	// 	Display a warning message if the word already exists.
 4125              	
 4126 2290 78160018 		.word	_DOTQ+MAPOFFSET
 4127 2294 07       	_UNIQU:	.byte  7
 4128 2295 3F554E49 		.ascii "?UNIQUE"
 4128      515545
 4129              		.p2align 2 	
 4130              	UNIQU:
 4131 229c 42F804ED 		_NEST
 4132 22a0 FEF7F8F9 		BL	DUPP
 4133 22a4 FFF7C2FA 		BL	NAMEQ			// ?name exists
 4134 22a8 FEF78AF9 		BL	QBRAN
 4135 22ac C8160018 		.word	UNIQ1+MAPOFFSET	// redefinitions are OK
ARM GAS  stm32eforth.s 			page 78


 4136 22b0 FFF77EF8 		BL	DOTQP
 4137 22b4 07       		.byte	7
 4138 22b5 20726544 		.ascii " reDef "		// but warn the user
 4138      656620
 4139              		.p2align 2 	
 4140 22bc FEF7FCF9 		BL	OVER
 4141 22c0 FEF798FB 		BL	COUNT
 4142 22c4 FFF724F8 		BL	TYPEE			// just in case its not planned
 4143              	UNIQ1:
 4144 22c8 FEF7DCF9 		BL	DROP
 4145 22cc 52F804FB 		_UNNEST
 4146              	
 4147              	//    $,n	 ( na -- )
 4148              	// 	Build a new dictionary name using the data at na.
 4149              	
 4150              	// 	.word	_UNIQU+MAPOFFSET
 4151              	// _SNAME	.byte  3
 4152              	// 	.ascii "$,n"
 4153              	// 	.p2align 2 	
 4154              	SNAME:
 4155 22d0 42F804ED 		_NEST
 4156 22d4 FEF7DEF9 		BL	DUPP			//  na na
 4157 22d8 FEF7A8F9 		BL	CAT			//  ?null input
 4158 22dc FEF770F9 		BL	QBRAN
 4159 22e0 18170018 		.word	SNAM1+MAPOFFSET
 4160 22e4 FFF7DAFF 		BL	UNIQU			//  na
 4161 22e8 FEF73EFC 		BL	LAST			//  na last
 4162 22ec FEF78EF9 		BL	AT			//  na la
 4163 22f0 FFF774FE 		BL	COMMA			//  na
 4164 22f4 FEF7CEF9 		BL	DUPP			//  na na
 4165 22f8 FEF736FC 		BL	LAST			//  na na last
 4166 22fc FEF77CF9 		BL	STORE			//  na , save na for vocabulary link
 4167 2300 FEF778FB 		BL	COUNT			//  na+1 count
 4168 2304 FEF72AFA 		BL	PLUS			//  na+1+count
 4169 2308 FEF72CFD 		BL	ALGND			//  word boundary
 4170 230c FEF718FC 		BL	CPP
 4171 2310 FEF772F9 		BL	STORE			//  top of dictionary now
 4172 2314 52F804FB 		_UNNEST
 4173              	SNAM1:
 4174 2318 FFF73CF8 		BL	STRQP
 4175 231c 07       		.byte	7
 4176 231d 206E616D 		.ascii " name? "
 4176      653F20
 4177 2324 FFF748BB 		B.W	ABORT
 4178              	
 4179              	//    $COMPILE	( a -- )
 4180              	// 	Compile next word to code dictionary as a token or literal.
 4181              	
 4182 2328 94160018 		.word	_UNIQU+MAPOFFSET
 4183 232c 07       	_SCOMP:	.byte  7
 4184 232d 24434F4D 		.ascii "$COMPILE"
 4184      50494C45 
 4185 2335 0000BF   		.p2align 2 	
 4186              	SCOMP:
 4187 2338 42F804ED 		_NEST
 4188 233c FFF776FA 		BL	NAMEQ
 4189 2340 FEF794FA 		BL	QDUP	// defined?
ARM GAS  stm32eforth.s 			page 79


 4190 2344 FEF73CF9 		BL	QBRAN
 4191 2348 74170018 		.word	SCOM2+MAPOFFSET
 4192 234c FEF75EF9 		BL	AT
 4193 2350 FEF713F9 		_DOLIT
 4194 2354 80000000 		.word	IMEDD
 4195 2358 FEF7C0F9 		BL	ANDD	// immediate?
 4196 235c FEF730F9 		BL	QBRAN
 4197 2360 6C170018 		.word	SCOM1+MAPOFFSET
 4198 2364 FEF718F9 		BL	EXECU
 4199 2368 52F804FB 		_UNNEST			// it's immediate, execute
 4200              	SCOM1:
 4201 236c 00F07EF8 		BL	CALLC			// it's not immediate, compile
 4202 2370 52F804FB 		_UNNEST	
 4203              	SCOM2:
 4204 2374 FEF7FAFE 		BL	NUMBQ
 4205 2378 FEF722F9 		BL	QBRAN
 4206 237c 88170018 		.word	SCOM3+MAPOFFSET
 4207 2380 FFF76CFE 		BL	LITER
 4208 2384 52F804FB 		_UNNEST			// compile number as integer
 4209              	SCOM3: // compilation abort 
 4210 2388 00F002F8 		BL COLON_ABORT 
 4211 238c FFF714BB 		B.W	ABORT			// error
 4212              	
 4213              	// before aborting a compilation 
 4214              	// reset HERE and LAST
 4215              	// to previous values.  
 4216              	COLON_ABORT:
 4217 2390 42F804ED 		_NEST 
 4218 2394 FEF7E8FB 		BL LAST 
 4219 2398 FEF738F9 		BL AT 
 4220 239c FEF734FA 		BL CELLM 
 4221 23a0 FEF778F9 		BL DUPP 
 4222 23a4 FEF7CCFB 		BL CPP  
 4223 23a8 FEF726F9 		BL STORE 
 4224 23ac FEF72EF9 		BL AT 
 4225 23b0 FEF7DAFB 		BL LAST 
 4226 23b4 FEF720F9 		BL STORE 
 4227 23b8 52F804FB 		_UNNEST 
 4228              	
 4229              	//    OVERT	( -- )
 4230              	// 	Link a new word into the current vocabulary.
 4231              	
 4232 23bc 2C170018 		.word	_SCOMP+MAPOFFSET
 4233 23c0 05       	_OVERT:	.byte  5
 4234 23c1 4F564552 		.ascii "OVERT"
 4234      54
 4235 23c6 00BF     		.p2align 2 	
 4236              	OVERT:
 4237 23c8 42F804ED 		_NEST
 4238 23cc FEF7CCFB 		BL	LAST
 4239 23d0 FEF71CF9 		BL	AT
 4240 23d4 FEF7AAFB 		BL	CNTXT
 4241 23d8 FEF70EF9 		BL	STORE
 4242 23dc 52F804FB 		_UNNEST
 4243              	
 4244              	//    ; 	   ( -- )
 4245              	// 	Terminate a colon definition.
ARM GAS  stm32eforth.s 			page 80


 4246              	
 4247 23e0 C0170018 		.word	_OVERT+MAPOFFSET
 4248 23e4 C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 4249 23e5 3B       		.ascii ";"
 4250 23e6 00BF     		.p2align 2 	
 4251              	SEMIS:
 4252 23e8 42F804ED 		_NEST
 4253 23ec FEF7C5F8 		_DOLIT
 4254 23f0 52F804FB 		_UNNEST
 4255 23f4 FFF7F2FD 		BL	COMMA
 4256 23f8 FFF738FB 		BL	LBRAC
 4257 23fc FFF7E4FF 		BL	OVERT
 4258 2400 52F804FB 		_UNNEST
 4259              	
 4260              	//    ]	   ( -- )
 4261              	// 	Start compiling the words in the input stream.
 4262              	
 4263 2404 E4170018 		.word	_SEMIS+MAPOFFSET
 4264 2408 01       	_RBRAC:	.byte  1
 4265 2409 5D       		.ascii "]"
 4266 240a 00BF     		.p2align 2 	
 4267              	RBRAC:
 4268 240c 42F804ED 		_NEST
 4269 2410 FEF7B3F8 		_DOLIT
 4270 2414 38170018 		.word	SCOMP+MAPOFFSET
 4271 2418 FEF772FB 		BL	TEVAL
 4272 241c FEF7ECF8 		BL	STORE
 4273 2420 52F804FB 		_UNNEST
 4274              	
 4275              	
 4276              	//    BL.W	( ca -- asm_code )
 4277              	// 	Assemble a branch-link long instruction to ca.
 4278              	COMPILE_BLW:
 4279 2424 42F804ED 		_NEST 
 4280 2428 4FEA6505 		ASR R5,R5,#1 
 4281 242c 4FF45044 		_MOV32 R4,0xF000D000 
 4281      CFF20004 
 4282 2434 65F30A04 		BFI R4,R5,#0,#11
 4283 2438 4FEAD525 		LSR R5,#11
 4284 243c 65F31944 		BFI R4,R5,#16,#10
 4285 2440 4FEAA525 		ASR R5,#10
 4286 2444 65F3CB24 		BFI R4,R5,#11,#1
 4287 2448 4FEA6505 		ASR R5,#1
 4288 244c 65F34D34 		BFI R4,R5,#13,#1
 4289 2450 4FEA6505 		ASR R5,#1
 4290 2454 65F39A64 		BFI R4,R5,#26,#1
 4291 2458 14F0806F 		TST R4,#(1<<26)
 4292 245c 02D1     		BNE 1f
 4293 245e 00BF     		NOP 
 4294 2460 84F42054 		EOR R4,R4,#(5<<11)
 4295 2464 4FEA3445 	1:  ROR R5,R4,#16 
 4296 2468 52F804FB 		_UNNEST 
 4297              	
 4298              	// 	.word	_RBRAC+MAPOFFSET
 4299              	// _CALLC	.byte  5
 4300              	// 	.ascii "call,"
 4301              	// 	.p2align 2 	
ARM GAS  stm32eforth.s 			page 81


 4302              	CALLC:
 4303 246c 42F804ED 		_NEST
 4304 2470 25F00105 		BIC R5,R5,#1 
 4305 2474 FEF7CAFC 		BL HERE 
 4306 2478 FEF778F9 		BL SUBB 
 4307 247c A5F10405 		SUB R5,R5,#4 
 4308 2480 FFF7D0FF 		BL COMPILE_BLW 
 4309 2484 FFF7AAFD 		BL	COMMA			//  assemble BL.W instruction
 4310 2488 52F804FB 		_UNNEST
 4311              	
 4312              		.p2align 
 4313              	// 	:	( -- //  string> )
 4314              	// 	Start a new colon definition using next word as its name.
 4315              	
 4316 248c 08180018 		.word	_RBRAC+MAPOFFSET
 4317 2490 01       	_COLON:	.byte  1
 4318 2491 3A       		.ascii ":"
 4319 2492 00BF     		.p2align 2 	
 4320              	COLON:
 4321 2494 42F804ED 		_NEST
 4322 2498 FFF70EF9 		BL	TOKEN
 4323 249c FFF718FF 		BL	SNAME
 4324 24a0 FEF76BF8 		_DOLIT
 4325 24a4 42F804ED 		_NEST
 4326 24a8 FFF798FD 		BL	COMMA
 4327 24ac FFF7AEFF 		BL	RBRAC
 4328 24b0 52F804FB 		_UNNEST
 4329              	
 4330              	//    IMMEDIATE   ( -- )
 4331              	// 	Make the last compiled word an immediate word.
 4332              	
 4333 24b4 90180018 		.word	_COLON+MAPOFFSET
 4334 24b8 09       	_IMMED:	.byte  9
 4335 24b9 494D4D45 		.ascii "IMMEDIATE"
 4335      44494154 
 4335      45
 4336 24c2 00BF     		.p2align 2 	
 4337              	IMMED:
 4338 24c4 42F804ED 		_NEST
 4339 24c8 FEF757F8 		_DOLIT
 4340 24cc 80000000 		.word	IMEDD
 4341 24d0 FEF74AFB 		BL	LAST
 4342 24d4 FEF79AF8 		BL	AT
 4343 24d8 FEF798F8 		BL	AT
 4344 24dc FEF708F9 		BL	ORR
 4345 24e0 FEF742FB 		BL	LAST
 4346 24e4 FEF792F8 		BL	AT
 4347 24e8 FEF786F8 		BL	STORE
 4348 24ec 52F804FB 		_UNNEST
 4349              	
 4350              	// **************************************************************************
 4351              	//  Defining words
 4352              	
 4353              	//    CONSTANT	( u -- //  string> )
 4354              	// 	Compile a new constant.
 4355              	
 4356 24f0 B8180018 		.word	_IMMED+MAPOFFSET
ARM GAS  stm32eforth.s 			page 82


 4357 24f4 08       	_CONST:	.byte  8
 4358 24f5 434F4E53 		.ascii "CONSTANT"
 4358      54414E54 
 4359 24fd 0000BF   		.p2align 2 	
 4360              	CONST:
 4361 2500 42F804ED 		_NEST
 4362 2504 FFF7D8F8 		BL	TOKEN
 4363 2508 FFF7E2FE 		BL	SNAME
 4364 250c FFF75CFF 		BL	OVERT
 4365 2510 FEF733F8 		_DOLIT
 4366 2514 42F804ED 		_NEST
 4367 2518 FFF760FD 		BL	COMMA
 4368 251c FEF72DF8 		_DOLIT
 4369 2520 28FEFF17 		.word	DOCON+MAPOFFSET
 4370 2524 FFF7A2FF 		BL	CALLC
 4371 2528 FFF758FD 		BL	COMMA
 4372 252c 52F804FB 		_UNNEST
 4373              	
 4374              		.p2align 2 
 4375              	// doDOES> ( -- a )
 4376              	// runtime action of DOES> 
 4377              	// leave parameter field address on stack 
 4378              	DODOES:
 4379 2530 42F804ED 		_NEST 
 4380 2534 FEF78AF8 		BL RAT 
 4381 2538 FEF746F9 		BL ONEM 
 4382 253c FEF75CF9 		BL	CELLP
 4383 2540 FEF712FB 		BL LAST 
 4384 2544 FEF762F8 		BL AT
 4385 2548 FFF7C4F8 		BL NAMET 
 4386 254c FEF754F9 		BL CELLP 
 4387 2550 FEF7A0F8 		BL DUPP
 4388 2554 FEF782F8 		BL TOR 
 4389 2558 FEF708F9 		BL SUBB 
 4390 255c A5F10405 		SUB R5,R5,#4
 4391 2560 FFF760FF 		BL	COMPILE_BLW
 4392 2564 FEF768F8 		BL RFROM
 4393 2568 FEF746F8 		BL STORE  
 4394 256c 52F804FB 		_UNNEST 
 4395              	
 4396              		
 4397              	
 4398              		.p2align 2
 4399              	//  DOES> ( -- )
 4400              	//  compile time action 
 4401 2570 F4240000 		.word _CONST   
 4402 2574 C5       	_DOES: .byte IMEDD+COMPO+5 
 4403 2575 444F4553 		.ascii "DOES>"
 4403      3E
 4404 257a 00BF     		.p2align 2
 4405              	DOES: 
 4406 257c 42F804ED 		_NEST 
 4407 2580 FDF7FBFF 		_DOLIT 
 4408 2584 30190018 		.word DODOES + MAPOFFSET
 4409 2588 FFF770FF 		BL CALLC 
 4410 258c FDF7F5FF 		_DOLIT	
 4411 2590 52F804FB 		_UNNEST 
ARM GAS  stm32eforth.s 			page 83


 4412 2594 FFF722FD 		BL	COMMA  
 4413 2598 FDF7EFFF 		_DOLIT 
 4414 259c 42F804ED 		_NEST 
 4415 25a0 FFF71CFD 		BL COMMA 
 4416 25a4 FDF7E9FF 		_DOLIT 
 4417 25a8 38FAFF17 		.word RFROM+MAPOFFSET  
 4418 25ac FFF75EFF 		BL	CALLC
 4419 25b0 FDF7E3FF 		_DOLIT 
 4420 25b4 C8FBFF17 		.word ONEM+MAPOFFSET 
 4421 25b8 FFF758FF 		BL CALLC 
 4422 25bc 52F804FB 		_UNNEST 
 4423              	
 4424              	
 4425              	//    CREATE	( -- //  string> )
 4426              	// 	Compile a new array entry without allocating code space.
 4427              	
 4428 25c0 74190018 		.word	_DOES+MAPOFFSET
 4429 25c4 06       	_CREAT:	.byte  6
 4430 25c5 43524541 		.ascii "CREATE"
 4430      5445
 4431 25cb 00       		.p2align 2 	
 4432              	CREAT:
 4433 25cc 42F804ED 		_NEST
 4434 25d0 FFF772F8 		BL	TOKEN
 4435 25d4 FFF77CFE 		BL	SNAME
 4436 25d8 FFF7F6FE 		BL	OVERT
 4437 25dc FDF7CDFF 		_DOLIT
 4438 25e0 42F804ED 		_NEST
 4439 25e4 FFF7FAFC 		BL	COMMA
 4440 25e8 FDF7C7FF 		_DOLIT
 4441 25ec 1CFEFF17 		.word	DOVAR+MAPOFFSET
 4442 25f0 FFF73CFF 		BL	CALLC
 4443 25f4 52F804FB 		_UNNEST
 4444              	
 4445              	//    VARIABLE	( -- //  string> )
 4446              	// 	Compile a new variable initialized to 0.
 4447              	
 4448 25f8 C4190018 		.word	_CREAT+MAPOFFSET
 4449 25fc 08       	_VARIA:	.byte  8
 4450 25fd 56415249 		.ascii "VARIABLE"
 4450      41424C45 
 4451 2605 0000BF   		.p2align 2 	
 4452              	VARIA:
 4453 2608 42F804ED 		_NEST
 4454 260c FFF7DEFF 		BL	CREAT
 4455 2610 FDF7B3FF 		_DOLIT
 4456 2614 00000000 		.word	0
 4457 2618 FFF7E0FC 		BL	COMMA
 4458 261c 52F804FB 		_UNNEST
 4459              	
 4460              	// **************************************************************************
 4461              	//  Tools
 4462              	
 4463              	//    dm+	 ( a u -- a )
 4464              	// 	Dump u bytes from , leaving a+u on the stack.
 4465              	
 4466              	// 	.word	_VARIA+MAPOFFSET
ARM GAS  stm32eforth.s 			page 84


 4467              	// _DMP	.byte  3
 4468              	// 	.ascii "dm+"
 4469              	// 	.p2align 2 	
 4470              	DMP:
 4471 2620 42F804ED 		_NEST
 4472 2624 FEF748F8 		BL	OVER
 4473 2628 FDF7A7FF 		_DOLIT
 4474 262c 04000000 		.word	4
 4475 2630 FEF7E0FE 		BL	UDOTR			// display address
 4476 2634 FEF744FE 		BL	SPACE
 4477 2638 FEF710F8 		BL	TOR			// start count down loop
 4478 263c 00F00CB8 		B.W	PDUM2			// skip first pass
 4479              	PDUM1:
 4480 2640 FEF728F8 	  BL	DUPP
 4481 2644 FDF7F2FF 		BL	CAT
 4482 2648 FDF797FF 		_DOLIT
 4483 264c 03000000 		.word	3
 4484 2650 FEF7D0FE 		BL	UDOTR			// display numeric data
 4485 2654 FEF7B0F8 		BL	ONEP			// increment address
 4486              	PDUM2:
 4487 2658 FDF7A3FF 	  BL	DONXT
 4488 265c 401A0018 		.word	PDUM1+MAPOFFSET	// loop till done
 4489 2660 52F804FB 		_UNNEST
 4490              		.p2align 2 
 4491              	//    DUMP	( a u -- )
 4492              	// 	Dump u bytes from a, in a formatted manner.
 4493              	
 4494 2664 FC190018 		.word	_VARIA+MAPOFFSET
 4495 2668 04       	_DUMP:	.byte  4
 4496 2669 44554D50 		.ascii "DUMP"
 4497 266d 0000BF   		.p2align 2 	
 4498              	DUMP:
 4499 2670 42F804ED 		_NEST
 4500 2674 FEF716FA 		BL	BASE
 4501 2678 FDF7C8FF 		BL	AT
 4502 267c FDF7EEFF 		BL	TOR
 4503 2680 FEF71CFD 		BL	HEX			// save radix,set hex
 4504 2684 FDF779FF 		_DOLIT
 4505 2688 10000000 		.word	16
 4506 268c FEF73AFB 		BL	SLASH			// change count to lines
 4507 2690 FDF7E4FF 		BL	TOR
 4508 2694 00F014B8 		B.W	DUMP4			// start count down loop
 4509              	DUMP1:
 4510 2698 FEF752FE 	  BL	CR
 4511 269c FDF76DFF 		_DOLIT
 4512 26a0 10000000 		.word	16
 4513 26a4 FEF700F9 		BL	DDUP
 4514 26a8 FFF7BAFF 		BL	DMP			// display numeric
 4515 26ac FEF7E8F8 		BL	ROT
 4516 26b0 FEF7E6F8 		BL	ROT
 4517 26b4 FEF704FE 		BL	SPACE
 4518 26b8 FEF702FE 		BL	SPACE
 4519 26bc FEF728FE 		BL	TYPEE			// display printable characters
 4520              	DUMP4:
 4521 26c0 FDF76FFF 	  BL	DONXT
 4522 26c4 981A0018 		.word	DUMP1+MAPOFFSET	// loop till done
 4523              	DUMP3:
ARM GAS  stm32eforth.s 			page 85


 4524 26c8 FDF7DCFF 	  BL	DROP
 4525 26cc FDF7B4FF 		BL	RFROM
 4526 26d0 FEF7E8F9 		BL	BASE
 4527 26d4 FDF790FF 		BL	STORE			// restore radix
 4528 26d8 52F804FB 		_UNNEST
 4529              	
 4530              	//    .S	  ( ... -- ... )
 4531              	// 	Display the contents of the data stack.
 4532              	
 4533 26dc 681A0018 		.word	_DUMP+MAPOFFSET
 4534              	_DOTS:
 4535 26e0 02       		.byte  2
 4536 26e1 2E53     		.ascii ".S"
 4537 26e3 00       		.p2align 2 	
 4538              	DOTS:
 4539 26e4 42F804ED 		_NEST
 4540 26e8 FEF7EAFD 		BL	SPACE
 4541 26ec FEF76CFB 		BL	DEPTH			// stack depth
 4542 26f0 FDF7B4FF 		BL	TOR			// start count down loop
 4543 26f4 00F006B8 		B.W	DOTS2			// skip first pass
 4544              	DOTS1:
 4545 26f8 FDF7A8FF 		BL	RAT
 4546 26fc FEF772FB 		BL	PICK
 4547 2700 FEF7A4FE 		BL	DOT			// index stack, display contents
 4548              	DOTS2:
 4549 2704 FDF74DFF 		BL	DONXT
 4550 2708 F81A0018 		.word	DOTS1+MAPOFFSET	// loop till done
 4551 270c FEF7D8FD 		BL	SPACE
 4552 2710 52F804FB 		_UNNEST
 4553              	
 4554              	//    >NAME	( ca -- na | F )
 4555              	// 	Convert code address to a name address.
 4556              	
 4557 2714 E01A0018 		.word	_DOTS+MAPOFFSET
 4558 2718 05       	_TNAME:	.byte  5
 4559 2719 3E4E414D 		.ascii ">NAME"
 4559      45
 4560 271e 00BF     		.p2align 2 	
 4561              	TNAME:
 4562 2720 42F804ED 		_NEST
 4563 2724 FDF79AFF 		BL	TOR			//  
 4564 2728 FEF700FA 		BL	CNTXT			//  va
 4565 272c FDF76EFF 		BL	AT			//  na
 4566              	TNAM1:
 4567 2730 FDF7B0FF 		BL	DUPP			//  na na
 4568 2734 FDF744FF 		BL	QBRAN
 4569 2738 601B0018 		.word	TNAM2+MAPOFFSET	//  vocabulary end, no match
 4570 273c FDF7AAFF 		BL	DUPP			//  na na
 4571 2740 FEF7C8FF 		BL	NAMET			//  na ca
 4572 2744 FDF782FF 		BL	RAT			//  na ca code
 4573 2748 FDF7DCFF 		BL	XORR			//  na f --
 4574 274c FDF738FF 		BL	QBRAN
 4575 2750 601B0018 		.word	TNAM2+MAPOFFSET
 4576 2754 FEF758F8 		BL	CELLM			//  la 
 4577 2758 FDF758FF 		BL	AT			//  next_na
 4578 275c FFF7E8BF 		B.W	TNAM1
 4579              	TNAM2:	
ARM GAS  stm32eforth.s 			page 86


 4580 2760 FDF76AFF 		BL	RFROM
 4581 2764 FDF78EFF 		BL	DROP			//  0|na --
 4582 2768 52F804FB 		_UNNEST			// 0
 4583              	
 4584              	//    .ID	 ( na -- )
 4585              	// 	Display the name at address.
 4586              	
 4587 276c 181B0018 		.word	_TNAME+MAPOFFSET
 4588 2770 03       	_DOTID:	.byte  3
 4589 2771 2E4944   		.ascii ".ID"
 4590              		.p2align 2 	
 4591              	DOTID:
 4592 2774 42F804ED 		_NEST
 4593 2778 FEF778F8 		BL	QDUP			// if zero no name
 4594 277c FDF720FF 		BL	QBRAN
 4595 2780 9C1B0018 		.word	DOTI1+MAPOFFSET
 4596 2784 FEF736F9 		BL	COUNT
 4597 2788 FDF7F7FE 		_DOLIT
 4598 278c 1F000000 		.word	0x1F
 4599 2790 FDF7A4FF 		BL	ANDD			// mask lexicon bits
 4600 2794 FEF7BCFD 		BL	TYPEE
 4601 2798 52F804FB 		_UNNEST			// display name string
 4602              	DOTI1:
 4603 279c FEF708FE 		BL	DOTQP
 4604 27a0 09       		.byte	9
 4605 27a1 207B6E6F 		.ascii " {noName}"
 4605      4E616D65 
 4605      7D
 4606 27aa 00BF     		.p2align 2 	
 4607 27ac 52F804FB 		_UNNEST
 4608              	
 4609              		.equ WANT_SEE, 1  // set to 1 if you want SEE 
 4610              	.if WANT_SEE 
 4611              	//    SEE	 ( -- //  string> )
 4612              	// 	A simple decompiler.
 4613              	
 4614 27b0 701B0018 		.word	_DOTID+MAPOFFSET
 4615 27b4 03       	_SEE:	.byte  3
 4616 27b5 534545   		.ascii "SEE"
 4617              		.p2align 2 	
 4618              	SEE:
 4619 27b8 42F804ED 		_NEST
 4620 27bc FFF7EEFB 		BL	TICK	//  ca --, starting address
 4621 27c0 FEF7BEFD 		BL	CR	
 4622 27c4 FDF7D9FE 		_DOLIT
 4623 27c8 14000000 		.word	20
 4624 27cc FDF746FF 		BL	TOR
 4625              	SEE1:
 4626 27d0 FEF712F8 		BL	CELLP			//  a
 4627 27d4 FDF75EFF 		BL	DUPP			//  a a
 4628 27d8 00F010F8 		BL	DECOMP		//  a
 4629 27dc FDF7E1FE 		BL	DONXT
 4630 27e0 D01B0018 		.word	SEE1+MAPOFFSET
 4631 27e4 FDF74EFF 		BL	DROP
 4632 27e8 52F804FB 		_UNNEST
 4633              	
 4634              	// 	DECOMPILE ( a -- )
ARM GAS  stm32eforth.s 			page 87


 4635              	// 	Convert code in a.  Display name of command or as data.
 4636              	
 4637 27ec B41B0018 		.word	_SEE+MAPOFFSET
 4638 27f0 09       	_DECOM:	.byte  9
 4639 27f1 4445434F 		.ascii "DECOMPILE"
 4639      4D50494C 
 4639      45
 4640 27fa 00BF     		.p2align 2 
 4641              		
 4642              	DECOMP:	
 4643 27fc 42F804ED 		_NEST
 4644 2800 FDF748FF 		BL	DUPP			//  a a
 4645              	// 	BL	TOR			//  a
 4646 2804 FDF702FF 		BL	AT			//  a code
 4647 2808 FDF744FF 		BL	DUPP			//  a code code
 4648 280c FDF7B5FE 		_DOLIT
 4649 2810 00D000F8 		.word	0xF800D000 //0xF800F800
 4650 2814 FDF762FF 		BL	ANDD
 4651 2818 FDF7AFFE 		_DOLIT
 4652 281c 00D000F0 		.word	0xF000D000 //0xF800F000
 4653 2820 FEF780F8 		BL	EQUAL			//  a code ?
 4654 2824 FEF758F8 		BL	INVER 
 4655 2828 FDF7CAFE 		BL	QBRAN
 4656 282c 841C0018 		.word	DECOM2+MAPOFFSET	//  not a command
 4657              		//  a valid_code --, extract address and display name
 4658 2830 40F6FE70 		MOVW	R0,#0xFFE
 4659 2834 2C46     		MOV	R4,R5
 4660 2836 4FEA4555 		LSL	R5,R5,#21		//  get bits 22-12
 4661 283a 4FEA6525 		ASR	R5,R5,#9		//  with sign extension
 4662 283e 4FEAD434 		LSR	R4,R4,#15		//  get bits 11-1
 4663 2842 04EA0004 		AND	R4,R4,R0		//  retain only bits 11-1
 4664 2846 45EA0405 		ORR	R5,R5,R4		//  get bits 22-1
 4665 284a 00BF     		NOP
 4666 284c FDF734FF 		BL	OVER			//  a offset a
 4667 2850 FDF784FF 		BL	PLUS			//  a target-4
 4668 2854 FDF7D0FF 		BL	CELLP			//  a target
 4669 2858 FFF762FF 		BL	TNAME			//  a na/0 --, is it a name?
 4670 285c FEF706F8 		BL	QDUP			//  name address or zero
 4671 2860 FDF7AEFE 		BL	QBRAN
 4672 2864 781C0018 		.word	DECOM1+MAPOFFSET
 4673 2868 FEF72AFD 		BL	SPACE			//  a na
 4674 286c FFF782FF 		BL	DOTID			//  a --, display name
 4675              	// 	BL	RFROM			//  a
 4676 2870 FDF708FF 		BL	DROP
 4677 2874 52F804FB 		_UNNEST
 4678              	DECOM1:	// BL	RFROM		//  a
 4679 2878 FDF7C8FE 		BL	AT			//  data
 4680 287c FEF7D4FD 		BL	UDOT			//  display data
 4681 2880 52F804FB 		_UNNEST
 4682              	DECOM2:
 4683 2884 FEF7D0FD 		BL	UDOT
 4684              	// 	BL	RFROM
 4685 2888 FDF7FCFE 		BL	DROP
 4686 288c 52F804FB 		_UNNEST
 4687              	
 4688              	//    WORDS	( -- )
 4689              	// 	Display the names in the context vocabulary.
ARM GAS  stm32eforth.s 			page 88


 4690              	
 4691 2890 F01B0018 		.word	_DECOM+MAPOFFSET
 4692              	.else 
 4693              		.word _DOTID+MAPOFFSET 
 4694              	.endif 
 4695 2894 05       	_WORDS:	.byte  5
 4696 2895 574F5244 		.ascii "WORDS"
 4696      53
 4697 289a 00BF     		.p2align 2 	
 4698              	WORDS:
 4699 289c 42F804ED 		_NEST
 4700 28a0 FEF74EFD 		BL	CR
 4701 28a4 FEF742F9 		BL	CNTXT
 4702 28a8 FDF7B0FE 		BL	AT			// only in context
 4703              	WORS1:
 4704 28ac FDF7DEFF 		BL	QDUP			// ?at end of list
 4705 28b0 FDF786FE 		BL	QBRAN
 4706 28b4 D01C0018 		.word	WORS2+MAPOFFSET
 4707 28b8 FDF7ECFE 		BL	DUPP
 4708 28bc FEF700FD 		BL	SPACE
 4709 28c0 FFF758FF 		BL	DOTID			// display a name
 4710 28c4 FDF7A0FF 		BL	CELLM
 4711 28c8 FDF7A0FE 		BL	AT
 4712 28cc FFF7EEBF 		B.W	WORS1
 4713              	WORS2:
 4714 28d0 52F804FB 		_UNNEST
 4715              	
 4716              	// **************************************************************************
 4717              	//  cold start
 4718              	
 4719              	//    VER	 ( -- n )
 4720              	// 	Return the version number of this implementation.
 4721              	
 4722              	// 	.word	_WORDS+MAPOFFSET
 4723              	// _VERSN	.byte  3
 4724              	// 	.ascii "VER"
 4725              	// 	.p2align 2 	
 4726              	VERSN:
 4727 28d4 42F804ED 		_NEST
 4728 28d8 FDF74FFE 		_DOLIT
 4729 28dc 00010000 		.word	VER*256+EXT
 4730 28e0 52F804FB 		_UNNEST
 4731              	
 4732              	//    hi	  ( -- )
 4733              	// 	Display the sign-on message of eForth.
 4734              	
 4735 28e4 941C0018 		.word	_WORDS+MAPOFFSET
 4736 28e8 02       	_HI:	.byte  2
 4737 28e9 4849     		.ascii "HI"
 4738 28eb 00       		.p2align 2 	
 4739              	HI:
 4740 28ec 42F804ED 		_NEST
 4741 28f0 FEF726FD 		BL	CR	// initialize I/O
 4742 28f4 FEF75CFD 		BL	DOTQP
 4743 28f8 17       		.byte	23
 4744 28f9 626C7565 		.ascii "blue pill stm32eForth v" 
 4744      2070696C 
ARM GAS  stm32eforth.s 			page 89


 4744      6C207374 
 4744      6D333265 
 4744      466F7274 
 4745              		.p2align 2
 4746 2910 FEF7C8F8 		BL	BASE
 4747 2914 FDF77AFE 		BL	AT
 4748 2918 FEF7D0FB 		BL	HEX	// save radix
 4749 291c FFF7DAFF 		BL	VERSN
 4750 2920 FEF748FB 		BL	BDIGS
 4751 2924 FEF76CFB 		BL	DIG
 4752 2928 FEF76AFB 		BL	DIG
 4753 292c FDF725FE 		_DOLIT
 4754 2930 2E000000 		.word	'.'
 4755 2934 FEF74EFB 		BL	HOLD
 4756 2938 FEF772FB 		BL	DIGS
 4757 293c FEF796FB 		BL	EDIGS
 4758 2940 FEF7E6FC 		BL	TYPEE	// format version number
 4759 2944 FEF7AEF8 		BL	BASE
 4760 2948 FDF756FE 		BL	STORE
 4761 294c FEF7F8FC 		BL	CR
 4762 2950 52F804FB 		_UNNEST			// restore radix
 4763              	
 4764              	//    COLD	( -- )
 4765              	// 	The high level cold start sequence.
 4766              	
 4767 2954 E81C0018 		.word	_HI+MAPOFFSET
 4768 2958 04       	LASTN:	.byte  4
 4769 2959 434F4C44 		.ascii "COLD"
 4770 295d 000000   		.p2align 2,0	
 4771              	COLD:
 4772              	//  Initiate Forth registers
 4773 2960 4FF00003 		MOV R3,#UPP&0xffff	//  user area 
 4774 2964 C2F20003 	 	MOVT R3,#UPP>>16		  
 4775 2968 03F59F42 		ADD R2,R3,#RPP&0xffff	// Forth return stack
 4776 296c 03F59D41 		ADD R1,R3,#SPP&0xffff // Forth data stack
 4777 2970 85EA0505 		EOR R5,R5,R5			//  tos=0
 4778 2974 42F804ED 		_NEST
 4779              	COLD1:
 4780 2978 FDF7FFFD 		_DOLIT 
 4781 297c 00000000 		.word 0 
 4782 2980 FDF7BAFD 		BL ULED // turn off user LED 
 4783 2984 FDF7F9FD 		_DOLIT
 4784 2988 00040000 		.word	UZERO
 4785 298c FDF7F5FD 		_DOLIT
 4786 2990 00000020 		.word	UPP
 4787 2994 FDF7F1FD 		_DOLIT
 4788 2998 54000000 		.word	ULAST-UZERO
 4789 299c FEF77EFA 		BL	MOVE 			// initialize user area
 4790 29a0 FFF7C8F8 		BL	PRESE			// initialize stack
 4791              		// check if user image saved in slot 0 
 4792 29a4 FFF7ACF9 		BL IMGQ 
 4793 29a8 FDF70AFE 		BL	QBRAN 
 4794 29ac B41D0018 		.word 1f+MAPOFFSET
 4795 29b0 FFF7BEF9 		BL	LOAD_IMG 
 4796 29b4 FEF76CF8 	1:	BL	TBOOT
 4797 29b8 FEF74CFA 		BL	ATEXE			// application boot
 4798 29bc FFF704FD 		BL	OVERT
ARM GAS  stm32eforth.s 			page 90


 4799 29c0 FFF7C2B8 		B.W	QUIT			// start interpretation
 4800              	COLD2:
 4801 29c4 AFF30080 		.p2align 3 	
 4802              	CTOP:
 4803 29c8 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4804 29cc AFF30080 		.p2align 10 
 4804      AFF30080 
 4804      AFF30080 
 4804      AFF30080 
 4804      AFF30080 
 4805              	USER_SPACE: // save user image here.  
 4806 2c00 FFFFFFFF 		.word 0XFFFFFFFF
 4807              	
 4808              	  .end 
ARM GAS  stm32eforth.s 			page 91


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  stm32eforth.s 			page 92


board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
board/blue-pill/stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
board/blue-pill/stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
board/blue-pill/stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
board/blue-pill/stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
board/blue-pill/stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
board/blue-pill/stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
board/blue-pill/stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
board/blue-pill/stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
board/blue-pill/stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
board/blue-pill/stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
board/blue-pill/stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
board/blue-pill/stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
board/blue-pill/stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
board/blue-pill/stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
board/blue-pill/stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
board/blue-pill/stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
board/blue-pill/stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
board/blue-pill/stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
board/blue-pill/stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
board/blue-pill/stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
board/blue-pill/stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
board/blue-pill/stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
board/blue-pill/stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
board/blue-pill/stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
board/blue-pill/stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
board/blue-pill/stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
board/blue-pill/stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
board/blue-pill/stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
board/blue-pill/stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
board/blue-pill/stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
board/blue-pill/stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
board/blue-pill/stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
board/blue-pill/stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32eforth.s:83     *ABS*:0000000040011000 LED_GPIO
       stm32eforth.s:84     *ABS*:000000000000000d LED_PIN
       stm32eforth.s:85     *ABS*:0000000040013800 UART
       stm32eforth.s:88     *ABS*:0000000020004e80 SPP
       stm32eforth.s:89     *ABS*:0000000020004e80 TIBB
       stm32eforth.s:90     *ABS*:0000000020004f80 RPP
       stm32eforth.s:91     *ABS*:0000000020000000 UPP
       stm32eforth.s:92     *ABS*:0000000020000100 DTOP
       stm32eforth.s:93     *ABS*:0000000020004e00 DEND
       stm32eforth.s:94     *ABS*:0000000020000000 RAMOFFSET
       stm32eforth.s:95     *ABS*:0000000020005000 RAMEND
       stm32eforth.s:96     *ABS*:0000000008000c00 FLASHOFFSET
       stm32eforth.s:99     *ABS*:0000000017fff400 MAPOFFSET
ARM GAS  stm32eforth.s 			page 93


       stm32eforth.s:104    *ABS*:0000000000000004 SEED_OFS
       stm32eforth.s:105    *ABS*:0000000000000008 TICKS_OFS
       stm32eforth.s:106    *ABS*:000000000000000c TIMER_OFS
       stm32eforth.s:107    *ABS*:0000000000000010 TORAM_OFS
       stm32eforth.s:108    *ABS*:0000000000000014 IMG_SIGN_OFS
       stm32eforth.s:109    *ABS*:0000000000000018 BOOT_OFS
       stm32eforth.s:110    *ABS*:000000000000001c BASE_OFS
       stm32eforth.s:111    *ABS*:0000000000000020 TMP_OFS
       stm32eforth.s:112    *ABS*:0000000000000024 SPAN_OFS
       stm32eforth.s:113    *ABS*:0000000000000028 TOIN_OFS
       stm32eforth.s:114    *ABS*:000000000000002c NTIB_OFS
       stm32eforth.s:115    *ABS*:0000000000000030 TIB_OFS
       stm32eforth.s:116    *ABS*:0000000000000034 EVAL_OFS
       stm32eforth.s:117    *ABS*:0000000000000038 HLD_OFS
       stm32eforth.s:118    *ABS*:000000000000003c CTXT_OFS
       stm32eforth.s:119    *ABS*:0000000000000040 FORTH_CTOP_OFS
       stm32eforth.s:120    *ABS*:0000000000000044 USER_CTOP_OFS
       stm32eforth.s:121    *ABS*:0000000000000048 LASTN_OFS
       stm32eforth.s:122    *ABS*:000000000000004c VARS_END_OFS
       stm32eforth.s:124    *ABS*:0000000000000010 RX_QUEUE_SIZE
       stm32eforth.s:125    *ABS*:0000000000000050 RX_QUEUE_OFS
       stm32eforth.s:126    *ABS*:0000000000000060 RX_HEAD_OFS
       stm32eforth.s:127    *ABS*:0000000000000064 RX_TAIL_OFS
       stm32eforth.s:175    .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:370    .text.reset_handler:0000000000000000 reset_handler
       stm32eforth.s:266    .text.default_handler:0000000000000000 default_handler
       stm32eforth.s:283    .text.default_handler:0000000000000020 systick_handler
       stm32eforth.s:303    .text.default_handler:000000000000003c uart_rx_handler
       stm32eforth.s:264    .text.default_handler:0000000000000000 $t
       stm32eforth.s:271    .text.default_handler:0000000000000008 exception_msg
       stm32eforth.s:345    .text.default_handler:00000000000000a4 uart_puts
       stm32eforth.s:326    .text.default_handler:000000000000007c reset_mcu
       stm32eforth.s:272    .text.default_handler:0000000000000008 $d
       stm32eforth.s:293    .text.default_handler:000000000000003a systick_exit
       stm32eforth.s:323    .text.default_handler:0000000000000076 user_reboot
       stm32eforth.s:336    .text.default_handler:0000000000000090 user_reboot_msg
       stm32eforth.s:334    .text.default_handler:000000000000008c scb_adr
       stm32eforth.s:335    .text.default_handler:000000000000008c $d
       stm32eforth.s:340    .text.default_handler:00000000000000a2 $t
       stm32eforth.s:368    .text.reset_handler:0000000000000000 $t
       stm32eforth.s:491    .text.reset_handler:00000000000000fa remap
       stm32eforth.s:383    .text.reset_handler:0000000000000018 init_devices
       stm32eforth.s:466    .text.reset_handler:00000000000000b8 uart_init
       stm32eforth.s:378    .text.reset_handler:0000000000000014 forth_entry
       stm32eforth.s:379    .text.reset_handler:0000000000000014 $d
       stm32eforth.s:4771   .text.reset_handler:0000000000002960 COLD
       stm32eforth.s:382    .text.reset_handler:0000000000000018 $t
       stm32eforth.s:398    .text.reset_handler:0000000000000036 wait_hserdy
       stm32eforth.s:418    .text.reset_handler:0000000000000050 wait_pllrdy
       stm32eforth.s:431    .text.reset_handler:0000000000000070 wait_sws
       stm32eforth.s:511    .text.reset_handler:0000000000000130 remap_dest
       stm32eforth.s:509    .text.reset_handler:000000000000012c remap_src
       stm32eforth.s:4802   .text.reset_handler:00000000000029c8 CTOP
       stm32eforth.s:557    .text.reset_handler:0000000000000400 UZERO
       stm32eforth.s:510    .text.reset_handler:000000000000012c $d
       stm32eforth.s:517    *ABS*:0000000000000001 VER
       stm32eforth.s:518    *ABS*:0000000000000000 EXT
ARM GAS  stm32eforth.s 			page 94


       stm32eforth.s:522    *ABS*:0000000000000040 COMPO
       stm32eforth.s:523    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:524    *ABS*:00000000ffffff1f MASKK
       stm32eforth.s:526    *ABS*:0000000000000004 CELLL
       stm32eforth.s:527    *ABS*:000000000000000a BASEE
       stm32eforth.s:528    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:530    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:531    *ABS*:000000000000000a LF
       stm32eforth.s:532    *ABS*:000000000000000d CRR
       stm32eforth.s:533    *ABS*:000000000000001b ERR
       stm32eforth.s:534    *ABS*:0000000000000027 TIC
       stm32eforth.s:555    .text.reset_handler:0000000000000134 $t
       stm32eforth.s:558    .text.reset_handler:0000000000000400 $d
       stm32eforth.s:4739   .text.reset_handler:00000000000028ec HI
       stm32eforth.s:3258   .text.reset_handler:0000000000001a10 INTER
       stm32eforth.s:4768   .text.reset_handler:0000000000002958 LASTN
       stm32eforth.s:578    .text.reset_handler:0000000000000454 ULAST
       stm32eforth.s:592    .text.reset_handler:000000000000046c $d
       stm32eforth.s:593    .text.reset_handler:0000000000000470 _RAND
       stm32eforth.s:596    .text.reset_handler:0000000000000478 RAND
       stm32eforth.s:1530   .text.reset_handler:0000000000000a40 SEED
       stm32eforth.s:820    .text.reset_handler:000000000000060c AT
       stm32eforth.s:914    .text.reset_handler:0000000000000694 DUPP
       stm32eforth.s:807    .text.reset_handler:00000000000005f8 STORE
       stm32eforth.s:1313   .text.reset_handler:00000000000008fc ABSS
       stm32eforth.s:925    .text.reset_handler:00000000000006a4 SWAP
       stm32eforth.s:1880   .text.reset_handler:0000000000000cec MODD
       stm32eforth.s:616    .text.reset_handler:00000000000004b8 $d
       stm32eforth.s:617    .text.reset_handler:00000000000004bc _PAUSE
       stm32eforth.s:619    .text.reset_handler:00000000000004c2 $t
       stm32eforth.s:620    .text.reset_handler:00000000000004c4 PAUSE
       stm32eforth.s:1552   .text.reset_handler:0000000000000a68 TIMER
       stm32eforth.s:624    .text.reset_handler:00000000000004d0 PAUSE_LOOP
       stm32eforth.s:767    .text.reset_handler:00000000000005c0 QBRAN
       stm32eforth.s:628    .text.reset_handler:00000000000004dc $d
       stm32eforth.s:631    .text.reset_handler:00000000000004e8 PAUSE_EXIT
       stm32eforth.s:785    .text.reset_handler:00000000000005d8 BRAN
       stm32eforth.s:629    .text.reset_handler:00000000000004e0 $t
       stm32eforth.s:630    .text.reset_handler:00000000000004e4 $d
       stm32eforth.s:632    .text.reset_handler:00000000000004e8 $t
       stm32eforth.s:636    .text.reset_handler:00000000000004ec $d
       stm32eforth.s:637    .text.reset_handler:00000000000004f0 _ULED
       stm32eforth.s:641    .text.reset_handler:00000000000004f8 ULED
       stm32eforth.s:650    .text.reset_handler:0000000000000510 ULED_OFF
       stm32eforth.s:656    .text.reset_handler:0000000000000514 $d
       stm32eforth.s:657    .text.reset_handler:0000000000000518 _QRX
       stm32eforth.s:660    .text.reset_handler:0000000000000520 QKEY
       stm32eforth.s:661    .text.reset_handler:0000000000000520 QRX
       stm32eforth.s:681    .text.reset_handler:000000000000054c $d
       stm32eforth.s:682    .text.reset_handler:0000000000000550 _TXSTO
       stm32eforth.s:685    .text.reset_handler:0000000000000558 TXSTO
       stm32eforth.s:686    .text.reset_handler:0000000000000558 EMIT
       stm32eforth.s:687    .text.reset_handler:0000000000000558 TECHO
       stm32eforth.s:702    .text.reset_handler:0000000000000570 $d
       stm32eforth.s:703    .text.reset_handler:0000000000000574 _NOP
       stm32eforth.s:705    .text.reset_handler:0000000000000578 $t
       stm32eforth.s:706    .text.reset_handler:0000000000000578 NOP
ARM GAS  stm32eforth.s 			page 95


       stm32eforth.s:717    .text.reset_handler:000000000000057a DOLIT
       stm32eforth.s:727    .text.reset_handler:000000000000058c $d
       stm32eforth.s:728    .text.reset_handler:0000000000000590 _EXECU
       stm32eforth.s:730    .text.reset_handler:0000000000000598 $t
       stm32eforth.s:731    .text.reset_handler:0000000000000598 EXECU
       stm32eforth.s:745    .text.reset_handler:00000000000005a2 DONXT
       stm32eforth.s:752    .text.reset_handler:00000000000005b0 NEXT1
       stm32eforth.s:774    .text.reset_handler:00000000000005d2 QBRAN1
       stm32eforth.s:793    .text.reset_handler:00000000000005e2 $d
       stm32eforth.s:794    .text.reset_handler:00000000000005e6 _EXIT
       stm32eforth.s:797    .text.reset_handler:00000000000005ec EXIT
       stm32eforth.s:803    .text.reset_handler:00000000000005f0 $d
       stm32eforth.s:804    .text.reset_handler:00000000000005f4 _STORE
       stm32eforth.s:806    .text.reset_handler:00000000000005f6 $t
       stm32eforth.s:816    .text.reset_handler:0000000000000604 $d
       stm32eforth.s:817    .text.reset_handler:0000000000000608 _AT
       stm32eforth.s:819    .text.reset_handler:000000000000060a $t
       stm32eforth.s:827    .text.reset_handler:0000000000000610 $d
       stm32eforth.s:828    .text.reset_handler:0000000000000614 _CSTOR
       stm32eforth.s:831    .text.reset_handler:0000000000000618 CSTOR
       stm32eforth.s:840    .text.reset_handler:0000000000000624 $d
       stm32eforth.s:841    .text.reset_handler:0000000000000628 _CAT
       stm32eforth.s:844    .text.reset_handler:000000000000062c CAT
       stm32eforth.s:851    .text.reset_handler:0000000000000630 $d
       stm32eforth.s:852    .text.reset_handler:0000000000000634 _RFROM
       stm32eforth.s:855    .text.reset_handler:0000000000000638 RFROM
       stm32eforth.s:863    .text.reset_handler:0000000000000642 $d
       stm32eforth.s:864    .text.reset_handler:0000000000000646 _RAT
       stm32eforth.s:867    .text.reset_handler:000000000000064c RAT
       stm32eforth.s:875    .text.reset_handler:0000000000000654 $d
       stm32eforth.s:876    .text.reset_handler:0000000000000658 _TOR
       stm32eforth.s:879    .text.reset_handler:000000000000065c TOR
       stm32eforth.s:887    .text.reset_handler:0000000000000666 $d
       stm32eforth.s:888    .text.reset_handler:000000000000066a _SPAT
       stm32eforth.s:890    .text.reset_handler:000000000000066e $t
       stm32eforth.s:891    .text.reset_handler:0000000000000670 SPAT
       stm32eforth.s:899    .text.reset_handler:0000000000000678 $d
       stm32eforth.s:900    .text.reset_handler:000000000000067c _DROP
       stm32eforth.s:903    .text.reset_handler:0000000000000684 DROP
       stm32eforth.s:910    .text.reset_handler:000000000000068a $d
       stm32eforth.s:911    .text.reset_handler:000000000000068e _DUPP
       stm32eforth.s:913    .text.reset_handler:0000000000000692 $t
       stm32eforth.s:921    .text.reset_handler:000000000000069a $d
       stm32eforth.s:922    .text.reset_handler:000000000000069e _SWAP
       stm32eforth.s:934    .text.reset_handler:00000000000006ac $d
       stm32eforth.s:935    .text.reset_handler:00000000000006b0 _OVER
       stm32eforth.s:938    .text.reset_handler:00000000000006b8 OVER
       stm32eforth.s:946    .text.reset_handler:00000000000006c0 $d
       stm32eforth.s:947    .text.reset_handler:00000000000006c4 _ZLESS
       stm32eforth.s:950    .text.reset_handler:00000000000006c8 ZLESS
       stm32eforth.s:958    .text.reset_handler:00000000000006d2 $d
       stm32eforth.s:959    .text.reset_handler:00000000000006d6 _ANDD
       stm32eforth.s:961    .text.reset_handler:00000000000006da $t
       stm32eforth.s:962    .text.reset_handler:00000000000006dc ANDD
       stm32eforth.s:970    .text.reset_handler:00000000000006e6 $d
       stm32eforth.s:971    .text.reset_handler:00000000000006ea _ORR
       stm32eforth.s:974    .text.reset_handler:00000000000006f0 ORR
ARM GAS  stm32eforth.s 			page 96


       stm32eforth.s:982    .text.reset_handler:00000000000006fa $d
       stm32eforth.s:983    .text.reset_handler:00000000000006fe _XORR
       stm32eforth.s:985    .text.reset_handler:0000000000000702 $t
       stm32eforth.s:986    .text.reset_handler:0000000000000704 XORR
       stm32eforth.s:994    .text.reset_handler:000000000000070e $d
       stm32eforth.s:995    .text.reset_handler:0000000000000712 _UPLUS
       stm32eforth.s:997    .text.reset_handler:0000000000000716 $t
       stm32eforth.s:998    .text.reset_handler:0000000000000718 UPLUS
       stm32eforth.s:1009   .text.reset_handler:0000000000000728 $d
       stm32eforth.s:1010   .text.reset_handler:000000000000072c _RSHIFT
       stm32eforth.s:1013   .text.reset_handler:0000000000000734 RSHIFT
       stm32eforth.s:1021   .text.reset_handler:000000000000073e $d
       stm32eforth.s:1022   .text.reset_handler:0000000000000742 _LSHIFT
       stm32eforth.s:1025   .text.reset_handler:000000000000074c LSHIFT
       stm32eforth.s:1033   .text.reset_handler:0000000000000756 $d
       stm32eforth.s:1034   .text.reset_handler:000000000000075a _PLUS
       stm32eforth.s:1036   .text.reset_handler:000000000000075c $t
       stm32eforth.s:1037   .text.reset_handler:000000000000075c PLUS
       stm32eforth.s:1045   .text.reset_handler:0000000000000764 $d
       stm32eforth.s:1046   .text.reset_handler:0000000000000768 _SUBB
       stm32eforth.s:1048   .text.reset_handler:000000000000076a $t
       stm32eforth.s:1049   .text.reset_handler:000000000000076c SUBB
       stm32eforth.s:1057   .text.reset_handler:0000000000000776 $d
       stm32eforth.s:1058   .text.reset_handler:000000000000077a _STAR
       stm32eforth.s:1060   .text.reset_handler:000000000000077c $t
       stm32eforth.s:1061   .text.reset_handler:000000000000077c STAR
       stm32eforth.s:1069   .text.reset_handler:0000000000000786 $d
       stm32eforth.s:1070   .text.reset_handler:000000000000078a _UMSTA
       stm32eforth.s:1072   .text.reset_handler:000000000000078e $t
       stm32eforth.s:1073   .text.reset_handler:0000000000000790 UMSTA
       stm32eforth.s:1083   .text.reset_handler:000000000000079c $d
       stm32eforth.s:1084   .text.reset_handler:00000000000007a0 _MSTAR
       stm32eforth.s:1087   .text.reset_handler:00000000000007a4 MSTAR
       stm32eforth.s:1097   .text.reset_handler:00000000000007b0 $d
       stm32eforth.s:1098   .text.reset_handler:00000000000007b4 _ONEP
       stm32eforth.s:1101   .text.reset_handler:00000000000007b8 ONEP
       stm32eforth.s:1108   .text.reset_handler:00000000000007be $d
       stm32eforth.s:1109   .text.reset_handler:00000000000007c2 _ONEM
       stm32eforth.s:1112   .text.reset_handler:00000000000007c8 ONEM
       stm32eforth.s:1119   .text.reset_handler:00000000000007ce $d
       stm32eforth.s:1120   .text.reset_handler:00000000000007d2 _TWOP
       stm32eforth.s:1123   .text.reset_handler:00000000000007d8 TWOP
       stm32eforth.s:1130   .text.reset_handler:00000000000007de $d
       stm32eforth.s:1131   .text.reset_handler:00000000000007e2 _TWOM
       stm32eforth.s:1134   .text.reset_handler:00000000000007e8 TWOM
       stm32eforth.s:1141   .text.reset_handler:00000000000007ee $d
       stm32eforth.s:1142   .text.reset_handler:00000000000007f2 _CELLP
       stm32eforth.s:1144   .text.reset_handler:00000000000007f8 $t
       stm32eforth.s:1145   .text.reset_handler:00000000000007f8 CELLP
       stm32eforth.s:1152   .text.reset_handler:00000000000007fe $d
       stm32eforth.s:1153   .text.reset_handler:0000000000000802 _CELLM
       stm32eforth.s:1155   .text.reset_handler:0000000000000808 $t
       stm32eforth.s:1156   .text.reset_handler:0000000000000808 CELLM
       stm32eforth.s:1163   .text.reset_handler:000000000000080e $d
       stm32eforth.s:1164   .text.reset_handler:0000000000000812 _BLANK
       stm32eforth.s:1167   .text.reset_handler:0000000000000818 BLANK
       stm32eforth.s:1175   .text.reset_handler:0000000000000822 $d
ARM GAS  stm32eforth.s 			page 97


       stm32eforth.s:1176   .text.reset_handler:0000000000000826 _CELLS
       stm32eforth.s:1178   .text.reset_handler:000000000000082c $t
       stm32eforth.s:1179   .text.reset_handler:000000000000082c CELLS
       stm32eforth.s:1186   .text.reset_handler:0000000000000832 $d
       stm32eforth.s:1187   .text.reset_handler:0000000000000836 _CELLSL
       stm32eforth.s:1189   .text.reset_handler:000000000000083c $t
       stm32eforth.s:1190   .text.reset_handler:000000000000083c CELLSL
       stm32eforth.s:1197   .text.reset_handler:0000000000000842 $d
       stm32eforth.s:1198   .text.reset_handler:0000000000000846 _TWOST
       stm32eforth.s:1201   .text.reset_handler:000000000000084c TWOST
       stm32eforth.s:1208   .text.reset_handler:0000000000000852 $d
       stm32eforth.s:1209   .text.reset_handler:0000000000000856 _TWOSL
       stm32eforth.s:1212   .text.reset_handler:000000000000085c TWOSL
       stm32eforth.s:1219   .text.reset_handler:0000000000000862 $d
       stm32eforth.s:1220   .text.reset_handler:0000000000000866 _QDUP
       stm32eforth.s:1223   .text.reset_handler:000000000000086c QDUP
       stm32eforth.s:1232   .text.reset_handler:0000000000000876 $d
       stm32eforth.s:1233   .text.reset_handler:000000000000087a _ROT
       stm32eforth.s:1235   .text.reset_handler:000000000000087e $t
       stm32eforth.s:1236   .text.reset_handler:0000000000000880 ROT
       stm32eforth.s:1246   .text.reset_handler:000000000000088a $d
       stm32eforth.s:1247   .text.reset_handler:000000000000088e _DDROP
       stm32eforth.s:1249   .text.reset_handler:0000000000000894 $t
       stm32eforth.s:1250   .text.reset_handler:0000000000000894 DDROP
       stm32eforth.s:1258   .text.reset_handler:000000000000089e $d
       stm32eforth.s:1259   .text.reset_handler:00000000000008a2 _DDUP
       stm32eforth.s:1262   .text.reset_handler:00000000000008a8 DDUP
       stm32eforth.s:1271   .text.reset_handler:00000000000008b4 $d
       stm32eforth.s:1272   .text.reset_handler:00000000000008b8 _DPLUS
       stm32eforth.s:1275   .text.reset_handler:00000000000008bc DPLUS
       stm32eforth.s:1287   .text.reset_handler:00000000000008d0 $d
       stm32eforth.s:1288   .text.reset_handler:00000000000008d4 _INVER
       stm32eforth.s:1290   .text.reset_handler:00000000000008d8 $t
       stm32eforth.s:1291   .text.reset_handler:00000000000008d8 INVER
       stm32eforth.s:1298   .text.reset_handler:00000000000008de $d
       stm32eforth.s:1299   .text.reset_handler:00000000000008e2 _NEGAT
       stm32eforth.s:1302   .text.reset_handler:00000000000008ec NEGAT
       stm32eforth.s:1309   .text.reset_handler:00000000000008f2 $d
       stm32eforth.s:1310   .text.reset_handler:00000000000008f6 _ABSS
       stm32eforth.s:1312   .text.reset_handler:00000000000008fa $t
       stm32eforth.s:1322   .text.reset_handler:0000000000000906 $d
       stm32eforth.s:1323   .text.reset_handler:000000000000090a _ZEQUAL
       stm32eforth.s:1326   .text.reset_handler:0000000000000910 ZEQUAL
       stm32eforth.s:1336   .text.reset_handler:000000000000091e $d
       stm32eforth.s:1337   .text.reset_handler:0000000000000922 _EQUAL
       stm32eforth.s:1339   .text.reset_handler:0000000000000924 $t
       stm32eforth.s:1340   .text.reset_handler:0000000000000924 EQUAL
       stm32eforth.s:1351   .text.reset_handler:0000000000000934 $d
       stm32eforth.s:1352   .text.reset_handler:0000000000000938 _ULESS
       stm32eforth.s:1355   .text.reset_handler:000000000000093c ULESS
       stm32eforth.s:1366   .text.reset_handler:000000000000094c $d
       stm32eforth.s:1367   .text.reset_handler:0000000000000950 _LESS
       stm32eforth.s:1369   .text.reset_handler:0000000000000952 $t
       stm32eforth.s:1370   .text.reset_handler:0000000000000954 LESS
       stm32eforth.s:1381   .text.reset_handler:0000000000000964 $d
       stm32eforth.s:1382   .text.reset_handler:0000000000000968 _GREAT
       stm32eforth.s:1384   .text.reset_handler:000000000000096a $t
ARM GAS  stm32eforth.s 			page 98


       stm32eforth.s:1385   .text.reset_handler:000000000000096c GREAT
       stm32eforth.s:1396   .text.reset_handler:000000000000097c $d
       stm32eforth.s:1397   .text.reset_handler:0000000000000980 _MAX
       stm32eforth.s:1399   .text.reset_handler:0000000000000984 $t
       stm32eforth.s:1400   .text.reset_handler:0000000000000984 MAX
       stm32eforth.s:1410   .text.reset_handler:0000000000000990 $d
       stm32eforth.s:1411   .text.reset_handler:0000000000000994 _MIN
       stm32eforth.s:1413   .text.reset_handler:0000000000000998 $t
       stm32eforth.s:1414   .text.reset_handler:0000000000000998 MIN
       stm32eforth.s:1424   .text.reset_handler:00000000000009a4 $d
       stm32eforth.s:1425   .text.reset_handler:00000000000009a8 _PSTOR
       stm32eforth.s:1428   .text.reset_handler:00000000000009ac PSTOR
       stm32eforth.s:1439   .text.reset_handler:00000000000009bc $d
       stm32eforth.s:1440   .text.reset_handler:00000000000009c0 _DSTOR
       stm32eforth.s:1443   .text.reset_handler:00000000000009c4 DSTOR
       stm32eforth.s:1454   .text.reset_handler:00000000000009d8 $d
       stm32eforth.s:1455   .text.reset_handler:00000000000009dc _DAT
       stm32eforth.s:1458   .text.reset_handler:00000000000009e0 DAT
       stm32eforth.s:1467   .text.reset_handler:00000000000009ea $d
       stm32eforth.s:1468   .text.reset_handler:00000000000009ee _COUNT
       stm32eforth.s:1470   .text.reset_handler:00000000000009f4 $t
       stm32eforth.s:1471   .text.reset_handler:00000000000009f4 COUNT
       stm32eforth.s:1480   .text.reset_handler:0000000000000a00 $d
       stm32eforth.s:1481   .text.reset_handler:0000000000000a04 _DNEGA
       stm32eforth.s:1483   .text.reset_handler:0000000000000a0c $t
       stm32eforth.s:1484   .text.reset_handler:0000000000000a0c DNEGA
       stm32eforth.s:1502   .text.reset_handler:0000000000000a1c DOVAR
       stm32eforth.s:1514   .text.reset_handler:0000000000000a28 DOCON
       stm32eforth.s:1526   .text.reset_handler:0000000000000a34 $d
       stm32eforth.s:1527   .text.reset_handler:0000000000000a38 _SEED
       stm32eforth.s:1537   .text.reset_handler:0000000000000a4a $d
       stm32eforth.s:1538   .text.reset_handler:0000000000000a4e _MSEC
       stm32eforth.s:1541   .text.reset_handler:0000000000000a54 MSEC
       stm32eforth.s:1548   .text.reset_handler:0000000000000a5e $d
       stm32eforth.s:1549   .text.reset_handler:0000000000000a62 _TIMER
       stm32eforth.s:1551   .text.reset_handler:0000000000000a68 $t
       stm32eforth.s:1560   .text.reset_handler:0000000000000a72 $d
       stm32eforth.s:1561   .text.reset_handler:0000000000000a76 _TORAM
       stm32eforth.s:1564   .text.reset_handler:0000000000000a7c TORAM
       stm32eforth.s:1572   .text.reset_handler:0000000000000a86 $d
       stm32eforth.s:1573   .text.reset_handler:0000000000000a8a _TBOOT
       stm32eforth.s:1575   .text.reset_handler:0000000000000a90 $t
       stm32eforth.s:1576   .text.reset_handler:0000000000000a90 TBOOT
       stm32eforth.s:1584   .text.reset_handler:0000000000000a9a $d
       stm32eforth.s:1585   .text.reset_handler:0000000000000a9e _BASE
       stm32eforth.s:1588   .text.reset_handler:0000000000000aa4 BASE
       stm32eforth.s:1600   .text.reset_handler:0000000000000aae TEMP
       stm32eforth.s:1608   .text.reset_handler:0000000000000ab8 $d
       stm32eforth.s:1609   .text.reset_handler:0000000000000abc _SPAN
       stm32eforth.s:1612   .text.reset_handler:0000000000000ac4 SPAN
       stm32eforth.s:1620   .text.reset_handler:0000000000000ace $d
       stm32eforth.s:1621   .text.reset_handler:0000000000000ad2 _INN
       stm32eforth.s:1623   .text.reset_handler:0000000000000ad6 $t
       stm32eforth.s:1624   .text.reset_handler:0000000000000ad8 INN
       stm32eforth.s:1632   .text.reset_handler:0000000000000ae2 $d
       stm32eforth.s:1633   .text.reset_handler:0000000000000ae6 _NTIB
       stm32eforth.s:1636   .text.reset_handler:0000000000000aec NTIB
ARM GAS  stm32eforth.s 			page 99


       stm32eforth.s:1644   .text.reset_handler:0000000000000af6 $d
       stm32eforth.s:1645   .text.reset_handler:0000000000000afa _TEVAL
       stm32eforth.s:1647   .text.reset_handler:0000000000000b00 $t
       stm32eforth.s:1648   .text.reset_handler:0000000000000b00 TEVAL
       stm32eforth.s:1656   .text.reset_handler:0000000000000b0a $d
       stm32eforth.s:1657   .text.reset_handler:0000000000000b0e _HLD
       stm32eforth.s:1659   .text.reset_handler:0000000000000b12 $t
       stm32eforth.s:1660   .text.reset_handler:0000000000000b14 HLD
       stm32eforth.s:1668   .text.reset_handler:0000000000000b1e $d
       stm32eforth.s:1669   .text.reset_handler:0000000000000b22 _CNTXT
       stm32eforth.s:1671   .text.reset_handler:0000000000000b2a $t
       stm32eforth.s:1672   .text.reset_handler:0000000000000b2c CNTXT
       stm32eforth.s:1673   .text.reset_handler:0000000000000b2c CRRNT
       stm32eforth.s:1681   .text.reset_handler:0000000000000b36 $d
       stm32eforth.s:1682   .text.reset_handler:0000000000000b3a _CP
       stm32eforth.s:1685   .text.reset_handler:0000000000000b40 CPP
       stm32eforth.s:1692   .text.reset_handler:0000000000000b4a $d
       stm32eforth.s:1693   .text.reset_handler:0000000000000b4e _FCP
       stm32eforth.s:1695   .text.reset_handler:0000000000000b52 $t
       stm32eforth.s:1696   .text.reset_handler:0000000000000b54 FCP
       stm32eforth.s:1704   .text.reset_handler:0000000000000b5e $d
       stm32eforth.s:1705   .text.reset_handler:0000000000000b62 _LAST
       stm32eforth.s:1708   .text.reset_handler:0000000000000b68 LAST
       stm32eforth.s:1719   .text.reset_handler:0000000000000b72 $d
       stm32eforth.s:1720   .text.reset_handler:0000000000000b76 _USER_BGN
       stm32eforth.s:1723   .text.reset_handler:0000000000000b84 USER_BEGIN
       stm32eforth.s:1727   .text.reset_handler:0000000000000b8c USR_BGN_ADR
       stm32eforth.s:1728   .text.reset_handler:0000000000000b8c $d
       stm32eforth.s:1733   .text.reset_handler:0000000000000b94 _USER_END
       stm32eforth.s:1736   .text.reset_handler:0000000000000ba0 USER_END
       stm32eforth.s:1744   .text.reset_handler:0000000000000bae $d
       stm32eforth.s:1745   .text.reset_handler:0000000000000bb2 _IMG_ADR
       stm32eforth.s:1747   .text.reset_handler:0000000000000bba $t
       stm32eforth.s:1748   .text.reset_handler:0000000000000bbc IMG_ADR
       stm32eforth.s:1752   .text.reset_handler:0000000000000bc4 USR_IMG_ADR
       stm32eforth.s:1753   .text.reset_handler:0000000000000bc4 $d
       stm32eforth.s:4805   .text.reset_handler:0000000000002c00 USER_SPACE
       stm32eforth.s:1757   .text.reset_handler:0000000000000bcc _IMG_SIGN
       stm32eforth.s:1760   .text.reset_handler:0000000000000bd8 IMG_SIGN
       stm32eforth.s:1772   .text.reset_handler:0000000000000be2 $d
       stm32eforth.s:1773   .text.reset_handler:0000000000000be6 _WITHI
       stm32eforth.s:1776   .text.reset_handler:0000000000000bf0 WITHI
       stm32eforth.s:1791   .text.reset_handler:0000000000000c10 $d
       stm32eforth.s:1792   .text.reset_handler:0000000000000c14 _UMMOD
       stm32eforth.s:1795   .text.reset_handler:0000000000000c1c UMMOD
       stm32eforth.s:1799   .text.reset_handler:0000000000000c26 UMMOD0
       stm32eforth.s:1806   .text.reset_handler:0000000000000c36 UMMOD1
       stm32eforth.s:1812   .text.reset_handler:0000000000000c40 UMMOD2
       stm32eforth.s:1822   .text.reset_handler:0000000000000c4a $d
       stm32eforth.s:1823   .text.reset_handler:0000000000000c4e _MSMOD
       stm32eforth.s:1825   .text.reset_handler:0000000000000c54 $t
       stm32eforth.s:1826   .text.reset_handler:0000000000000c54 MSMOD
       stm32eforth.s:1833   .text.reset_handler:0000000000000c6c $d
       stm32eforth.s:1838   .text.reset_handler:0000000000000c80 MMOD1
       stm32eforth.s:1834   .text.reset_handler:0000000000000c70 $t
       stm32eforth.s:1843   .text.reset_handler:0000000000000c90 $d
       stm32eforth.s:1846   .text.reset_handler:0000000000000c9c MMOD2
ARM GAS  stm32eforth.s 			page 100


       stm32eforth.s:1844   .text.reset_handler:0000000000000c94 $t
       stm32eforth.s:1851   .text.reset_handler:0000000000000cac $d
       stm32eforth.s:1855   .text.reset_handler:0000000000000cbc MMOD3
       stm32eforth.s:1852   .text.reset_handler:0000000000000cb0 $t
       stm32eforth.s:1861   .text.reset_handler:0000000000000cc0 $d
       stm32eforth.s:1862   .text.reset_handler:0000000000000cc4 _SLMOD
       stm32eforth.s:1865   .text.reset_handler:0000000000000ccc SLMOD
       stm32eforth.s:1876   .text.reset_handler:0000000000000ce4 $d
       stm32eforth.s:1877   .text.reset_handler:0000000000000ce8 _MODD
       stm32eforth.s:1879   .text.reset_handler:0000000000000cec $t
       stm32eforth.s:1889   .text.reset_handler:0000000000000cfc $d
       stm32eforth.s:1890   .text.reset_handler:0000000000000d00 _SLASH
       stm32eforth.s:1892   .text.reset_handler:0000000000000d02 $t
       stm32eforth.s:1893   .text.reset_handler:0000000000000d04 SLASH
       stm32eforth.s:1903   .text.reset_handler:0000000000000d18 $d
       stm32eforth.s:1904   .text.reset_handler:0000000000000d1c _SSMOD
       stm32eforth.s:1906   .text.reset_handler:0000000000000d22 $t
       stm32eforth.s:1907   .text.reset_handler:0000000000000d24 SSMOD
       stm32eforth.s:1918   .text.reset_handler:0000000000000d3c $d
       stm32eforth.s:1919   .text.reset_handler:0000000000000d40 _STASL
       stm32eforth.s:1922   .text.reset_handler:0000000000000d44 STASL
       stm32eforth.s:1935   .text.reset_handler:0000000000000d58 $d
       stm32eforth.s:1936   .text.reset_handler:0000000000000d5c _ALGND
       stm32eforth.s:1938   .text.reset_handler:0000000000000d64 $t
       stm32eforth.s:1939   .text.reset_handler:0000000000000d64 ALGND
       stm32eforth.s:1948   .text.reset_handler:0000000000000d72 $d
       stm32eforth.s:1949   .text.reset_handler:0000000000000d76 _TCHAR
       stm32eforth.s:1951   .text.reset_handler:0000000000000d7c $t
       stm32eforth.s:1952   .text.reset_handler:0000000000000d7c TCHAR
       stm32eforth.s:1955   .text.reset_handler:0000000000000d84 $d
       stm32eforth.s:1956   .text.reset_handler:0000000000000d88 $t
       stm32eforth.s:1960   .text.reset_handler:0000000000000d98 $d
       stm32eforth.s:1961   .text.reset_handler:0000000000000d9c $t
       stm32eforth.s:1964   .text.reset_handler:0000000000000da8 $d
       stm32eforth.s:1968   .text.reset_handler:0000000000000db8 TCHA1
       stm32eforth.s:1965   .text.reset_handler:0000000000000dac $t
       stm32eforth.s:1967   .text.reset_handler:0000000000000db4 $d
       stm32eforth.s:1969   .text.reset_handler:0000000000000db8 $t
       stm32eforth.s:1974   .text.reset_handler:0000000000000dbc $d
       stm32eforth.s:1975   .text.reset_handler:0000000000000dc0 _DEPTH
       stm32eforth.s:1977   .text.reset_handler:0000000000000dc6 $t
       stm32eforth.s:1978   .text.reset_handler:0000000000000dc8 DEPTH
       stm32eforth.s:1988   .text.reset_handler:0000000000000dda $d
       stm32eforth.s:1989   .text.reset_handler:0000000000000dde _PICK
       stm32eforth.s:1992   .text.reset_handler:0000000000000de4 PICK
       stm32eforth.s:2007   .text.reset_handler:0000000000000e00 $d
       stm32eforth.s:2008   .text.reset_handler:0000000000000e04 _HERE
       stm32eforth.s:2011   .text.reset_handler:0000000000000e0c HERE
       stm32eforth.s:2020   .text.reset_handler:0000000000000e1c $d
       stm32eforth.s:2021   .text.reset_handler:0000000000000e20 _PAD
       stm32eforth.s:2023   .text.reset_handler:0000000000000e24 $t
       stm32eforth.s:2024   .text.reset_handler:0000000000000e24 PAD
       stm32eforth.s:2033   .text.reset_handler:0000000000000e34 $d
       stm32eforth.s:2034   .text.reset_handler:0000000000000e38 _TIB
       stm32eforth.s:2036   .text.reset_handler:0000000000000e3c $t
       stm32eforth.s:2037   .text.reset_handler:0000000000000e3c TIB
       stm32eforth.s:2045   .text.reset_handler:0000000000000e44 $d
ARM GAS  stm32eforth.s 			page 101


       stm32eforth.s:2046   .text.reset_handler:0000000000000e48 _ATEXE
       stm32eforth.s:2049   .text.reset_handler:0000000000000e54 ATEXE
       stm32eforth.s:2061   .text.reset_handler:0000000000000e66 $d
       stm32eforth.s:2062   .text.reset_handler:0000000000000e6a _CMOVE
       stm32eforth.s:2064   .text.reset_handler:0000000000000e70 $t
       stm32eforth.s:2065   .text.reset_handler:0000000000000e70 CMOVE
       stm32eforth.s:2072   .text.reset_handler:0000000000000e82 CMOV1
       stm32eforth.s:2069   .text.reset_handler:0000000000000e7a CMOV0
       stm32eforth.s:2077   .text.reset_handler:0000000000000e8c CMOV2
       stm32eforth.s:2084   .text.reset_handler:0000000000000e92 $d
       stm32eforth.s:2085   .text.reset_handler:0000000000000e96 _MOVE
       stm32eforth.s:2088   .text.reset_handler:0000000000000e9c MOVE
       stm32eforth.s:2096   .text.reset_handler:0000000000000eb2 MOVE1
       stm32eforth.s:2093   .text.reset_handler:0000000000000eaa MOVE0
       stm32eforth.s:2101   .text.reset_handler:0000000000000ebc MOVE2
       stm32eforth.s:2108   .text.reset_handler:0000000000000ec2 $d
       stm32eforth.s:2109   .text.reset_handler:0000000000000ec6 _FILL
       stm32eforth.s:2112   .text.reset_handler:0000000000000ecc FILL
       stm32eforth.s:2115   .text.reset_handler:0000000000000ed4 FILL0
       stm32eforth.s:2118   .text.reset_handler:0000000000000ed8 FILL1
       stm32eforth.s:2124   .text.reset_handler:0000000000000ee6 FILL2
       stm32eforth.s:2131   .text.reset_handler:0000000000000eec $d
       stm32eforth.s:2132   .text.reset_handler:0000000000000ef0 _PACKS
       stm32eforth.s:2135   .text.reset_handler:0000000000000ef8 PACKS
       stm32eforth.s:2144   .text.reset_handler:0000000000000f18 $d
       stm32eforth.s:2145   .text.reset_handler:0000000000000f1c $t
       stm32eforth.s:2147   .text.reset_handler:0000000000000f24 $d
       stm32eforth.s:2148   .text.reset_handler:0000000000000f28 $t
       stm32eforth.s:2165   .text.reset_handler:0000000000000f50 $d
       stm32eforth.s:2166   .text.reset_handler:0000000000000f54 _DIGIT
       stm32eforth.s:2168   .text.reset_handler:0000000000000f5a $t
       stm32eforth.s:2169   .text.reset_handler:0000000000000f5c DIGIT
       stm32eforth.s:2172   .text.reset_handler:0000000000000f64 $d
       stm32eforth.s:2173   .text.reset_handler:0000000000000f68 $t
       stm32eforth.s:2183   .text.reset_handler:0000000000000f80 $d
       stm32eforth.s:2184   .text.reset_handler:0000000000000f84 _EXTRC
       stm32eforth.s:2186   .text.reset_handler:0000000000000f8c $t
       stm32eforth.s:2187   .text.reset_handler:0000000000000f8c EXTRC
       stm32eforth.s:2190   .text.reset_handler:0000000000000f94 $d
       stm32eforth.s:2191   .text.reset_handler:0000000000000f98 $t
       stm32eforth.s:2200   .text.reset_handler:0000000000000fac $d
       stm32eforth.s:2201   .text.reset_handler:0000000000000fb0 _BDIGS
       stm32eforth.s:2204   .text.reset_handler:0000000000000fb4 BDIGS
       stm32eforth.s:2214   .text.reset_handler:0000000000000fc8 $d
       stm32eforth.s:2215   .text.reset_handler:0000000000000fcc _HOLD
       stm32eforth.s:2218   .text.reset_handler:0000000000000fd4 HOLD
       stm32eforth.s:2232   .text.reset_handler:0000000000000ff8 $d
       stm32eforth.s:2233   .text.reset_handler:0000000000000ffc _DIG
       stm32eforth.s:2235   .text.reset_handler:0000000000000ffe $t
       stm32eforth.s:2236   .text.reset_handler:0000000000001000 DIG
       stm32eforth.s:2247   .text.reset_handler:0000000000001018 $d
       stm32eforth.s:2248   .text.reset_handler:000000000000101c _DIGS
       stm32eforth.s:2251   .text.reset_handler:0000000000001020 DIGS
       stm32eforth.s:2253   .text.reset_handler:0000000000001024 DIGS1
       stm32eforth.s:2257   .text.reset_handler:0000000000001030 $d
       stm32eforth.s:2259   .text.reset_handler:0000000000001036 DIGS2
       stm32eforth.s:2258   .text.reset_handler:0000000000001034 $t
ARM GAS  stm32eforth.s 			page 102


       stm32eforth.s:2265   .text.reset_handler:000000000000103a $d
       stm32eforth.s:2266   .text.reset_handler:000000000000103e _SIGN
       stm32eforth.s:2269   .text.reset_handler:0000000000001044 SIGN
       stm32eforth.s:2273   .text.reset_handler:0000000000001050 $d
       stm32eforth.s:2277   .text.reset_handler:0000000000001060 SIGN1
       stm32eforth.s:2274   .text.reset_handler:0000000000001054 $t
       stm32eforth.s:2275   .text.reset_handler:0000000000001058 $d
       stm32eforth.s:2276   .text.reset_handler:000000000000105c $t
       stm32eforth.s:2283   .text.reset_handler:0000000000001064 $d
       stm32eforth.s:2284   .text.reset_handler:0000000000001068 _EDIGS
       stm32eforth.s:2287   .text.reset_handler:000000000000106c EDIGS
       stm32eforth.s:2304   .text.reset_handler:000000000000108c STRR
       stm32eforth.s:2319   .text.reset_handler:00000000000010b4 $d
       stm32eforth.s:2320   .text.reset_handler:00000000000010b8 _HEX
       stm32eforth.s:2322   .text.reset_handler:00000000000010bc $t
       stm32eforth.s:2323   .text.reset_handler:00000000000010bc HEX
       stm32eforth.s:2326   .text.reset_handler:00000000000010c4 $d
       stm32eforth.s:2327   .text.reset_handler:00000000000010c8 $t
       stm32eforth.s:2334   .text.reset_handler:00000000000010d4 $d
       stm32eforth.s:2335   .text.reset_handler:00000000000010d8 _DECIM
       stm32eforth.s:2337   .text.reset_handler:00000000000010e0 $t
       stm32eforth.s:2338   .text.reset_handler:00000000000010e0 DECIM
       stm32eforth.s:2341   .text.reset_handler:00000000000010e8 $d
       stm32eforth.s:2342   .text.reset_handler:00000000000010ec $t
       stm32eforth.s:2352   .text.reset_handler:00000000000010f8 $d
       stm32eforth.s:2353   .text.reset_handler:00000000000010fc _DIGTQ
       stm32eforth.s:2356   .text.reset_handler:0000000000001104 DIGTQ
       stm32eforth.s:2360   .text.reset_handler:0000000000001110 $d
       stm32eforth.s:2361   .text.reset_handler:0000000000001114 $t
       stm32eforth.s:2363   .text.reset_handler:000000000000111c $d
       stm32eforth.s:2364   .text.reset_handler:0000000000001120 $t
       stm32eforth.s:2367   .text.reset_handler:000000000000112c $d
       stm32eforth.s:2376   .text.reset_handler:0000000000001150 DGTQ1
       stm32eforth.s:2368   .text.reset_handler:0000000000001130 $t
       stm32eforth.s:2369   .text.reset_handler:0000000000001134 $d
       stm32eforth.s:2370   .text.reset_handler:0000000000001138 $t
       stm32eforth.s:2373   .text.reset_handler:0000000000001144 $d
       stm32eforth.s:2374   .text.reset_handler:0000000000001148 $t
       stm32eforth.s:2385   .text.reset_handler:0000000000001160 $d
       stm32eforth.s:2386   .text.reset_handler:0000000000001164 _NUMBQ
       stm32eforth.s:2388   .text.reset_handler:000000000000116c $t
       stm32eforth.s:2389   .text.reset_handler:000000000000116c NUMBQ
       stm32eforth.s:2395   .text.reset_handler:0000000000001180 $d
       stm32eforth.s:2396   .text.reset_handler:0000000000001184 $t
       stm32eforth.s:2401   .text.reset_handler:0000000000001198 $d
       stm32eforth.s:2402   .text.reset_handler:000000000000119c $t
       stm32eforth.s:2404   .text.reset_handler:00000000000011a4 $d
       stm32eforth.s:2410   .text.reset_handler:00000000000011bc NUMQ1
       stm32eforth.s:2405   .text.reset_handler:00000000000011a8 $t
       stm32eforth.s:2414   .text.reset_handler:00000000000011c8 $d
       stm32eforth.s:2415   .text.reset_handler:00000000000011cc $t
       stm32eforth.s:2425   .text.reset_handler:00000000000011f4 $d
       stm32eforth.s:2464   .text.reset_handler:0000000000001280 NUMQ6
       stm32eforth.s:2426   .text.reset_handler:00000000000011f8 $t
       stm32eforth.s:2428   .text.reset_handler:0000000000001200 NUMQ2
       stm32eforth.s:2436   .text.reset_handler:000000000000121c $d
       stm32eforth.s:2455   .text.reset_handler:0000000000001264 NUMQ4
ARM GAS  stm32eforth.s 			page 103


       stm32eforth.s:2437   .text.reset_handler:0000000000001220 $t
       stm32eforth.s:2445   .text.reset_handler:0000000000001240 $d
       stm32eforth.s:2446   .text.reset_handler:0000000000001244 $t
       stm32eforth.s:2450   .text.reset_handler:0000000000001254 $d
       stm32eforth.s:2452   .text.reset_handler:000000000000125c NUMQ3
       stm32eforth.s:2451   .text.reset_handler:0000000000001258 $t
       stm32eforth.s:2462   .text.reset_handler:000000000000127c NUMQ5
       stm32eforth.s:2461   .text.reset_handler:0000000000001278 $d
       stm32eforth.s:2463   .text.reset_handler:000000000000127c $t
       stm32eforth.s:2478   .text.reset_handler:0000000000001298 $d
       stm32eforth.s:2479   .text.reset_handler:000000000000129c _KEY
       stm32eforth.s:2481   .text.reset_handler:00000000000012a0 $t
       stm32eforth.s:2482   .text.reset_handler:00000000000012a0 KEY
       stm32eforth.s:2484   .text.reset_handler:00000000000012a4 KEY1
       stm32eforth.s:2487   .text.reset_handler:00000000000012ac $d
       stm32eforth.s:2488   .text.reset_handler:00000000000012b0 $t
       stm32eforth.s:2493   .text.reset_handler:00000000000012b4 $d
       stm32eforth.s:2494   .text.reset_handler:00000000000012b8 _SPACE
       stm32eforth.s:2496   .text.reset_handler:00000000000012be $t
       stm32eforth.s:2497   .text.reset_handler:00000000000012c0 SPACE
       stm32eforth.s:2506   .text.reset_handler:00000000000012d0 $d
       stm32eforth.s:2507   .text.reset_handler:00000000000012d4 _SPACS
       stm32eforth.s:2510   .text.reset_handler:00000000000012dc SPACS
       stm32eforth.s:2513   .text.reset_handler:00000000000012e4 $d
       stm32eforth.s:2514   .text.reset_handler:00000000000012e8 $t
       stm32eforth.s:2519   .text.reset_handler:00000000000012f8 CHAR2
       stm32eforth.s:2517   .text.reset_handler:00000000000012f4 CHAR1
       stm32eforth.s:2521   .text.reset_handler:00000000000012fc $d
       stm32eforth.s:2522   .text.reset_handler:0000000000001300 $t
       stm32eforth.s:2527   .text.reset_handler:0000000000001304 $d
       stm32eforth.s:2528   .text.reset_handler:0000000000001308 _TYPEE
       stm32eforth.s:2531   .text.reset_handler:0000000000001310 TYPEE
       stm32eforth.s:2539   .text.reset_handler:0000000000001326 TYPE2
       stm32eforth.s:2535   .text.reset_handler:000000000000131a TYPE1
       stm32eforth.s:2541   .text.reset_handler:000000000000132a $d
       stm32eforth.s:2542   .text.reset_handler:000000000000132e $t
       stm32eforth.s:2548   .text.reset_handler:0000000000001336 $d
       stm32eforth.s:2549   .text.reset_handler:000000000000133a _CR
       stm32eforth.s:2552   .text.reset_handler:0000000000001340 CR
       stm32eforth.s:2555   .text.reset_handler:0000000000001348 $d
       stm32eforth.s:2556   .text.reset_handler:000000000000134c $t
       stm32eforth.s:2558   .text.reset_handler:0000000000001354 $d
       stm32eforth.s:2559   .text.reset_handler:0000000000001358 $t
       stm32eforth.s:2570   .text.reset_handler:0000000000001360 DOSTR
       stm32eforth.s:2593   .text.reset_handler:0000000000001394 STRQP
       stm32eforth.s:2605   .text.reset_handler:00000000000013a0 DOTST
       stm32eforth.s:2618   .text.reset_handler:00000000000013b0 DOTQP
       stm32eforth.s:2627   .text.reset_handler:00000000000013c0 $d
       stm32eforth.s:2628   .text.reset_handler:00000000000013c4 _DOTR
       stm32eforth.s:2631   .text.reset_handler:00000000000013c8 DOTR
       stm32eforth.s:2645   .text.reset_handler:00000000000013ec $d
       stm32eforth.s:2646   .text.reset_handler:00000000000013f0 _UDOTR
       stm32eforth.s:2648   .text.reset_handler:00000000000013f4 $t
       stm32eforth.s:2649   .text.reset_handler:00000000000013f4 UDOTR
       stm32eforth.s:2665   .text.reset_handler:0000000000001420 $d
       stm32eforth.s:2666   .text.reset_handler:0000000000001424 _UDOT
       stm32eforth.s:2669   .text.reset_handler:0000000000001428 UDOT
ARM GAS  stm32eforth.s 			page 104


       stm32eforth.s:2681   .text.reset_handler:0000000000001444 $d
       stm32eforth.s:2682   .text.reset_handler:0000000000001448 _DOT
       stm32eforth.s:2684   .text.reset_handler:000000000000144a $t
       stm32eforth.s:2685   .text.reset_handler:000000000000144c DOT
       stm32eforth.s:2690   .text.reset_handler:000000000000145c $d
       stm32eforth.s:2691   .text.reset_handler:0000000000001460 $t
       stm32eforth.s:2693   .text.reset_handler:0000000000001468 $d
       stm32eforth.s:2696   .text.reset_handler:0000000000001474 DOT1
       stm32eforth.s:2694   .text.reset_handler:000000000000146c $t
       stm32eforth.s:2705   .text.reset_handler:0000000000001484 $d
       stm32eforth.s:2706   .text.reset_handler:0000000000001488 _QUEST
       stm32eforth.s:2708   .text.reset_handler:000000000000148a $t
       stm32eforth.s:2709   .text.reset_handler:000000000000148c QUEST
       stm32eforth.s:2725   .text.reset_handler:000000000000149c PARS
       stm32eforth.s:2733   .text.reset_handler:00000000000014b8 $d
       stm32eforth.s:2801   .text.reset_handler:00000000000015aa PARS8
       stm32eforth.s:2734   .text.reset_handler:00000000000014bc $t
       stm32eforth.s:2740   .text.reset_handler:00000000000014d4 $d
       stm32eforth.s:2762   .text.reset_handler:0000000000001524 PARS3
       stm32eforth.s:2741   .text.reset_handler:00000000000014d8 $t
       stm32eforth.s:2742   .text.reset_handler:00000000000014dc PARS1
       stm32eforth.s:2750   .text.reset_handler:00000000000014f8 $d
       stm32eforth.s:2760   .text.reset_handler:0000000000001520 PARS2
       stm32eforth.s:2751   .text.reset_handler:00000000000014fc $t
       stm32eforth.s:2753   .text.reset_handler:0000000000001504 $d
       stm32eforth.s:2754   .text.reset_handler:0000000000001508 $t
       stm32eforth.s:2757   .text.reset_handler:0000000000001514 $d
       stm32eforth.s:2758   .text.reset_handler:0000000000001518 $t
       stm32eforth.s:2766   .text.reset_handler:0000000000001530 PARS4
       stm32eforth.s:2777   .text.reset_handler:0000000000001558 $d
       stm32eforth.s:2779   .text.reset_handler:0000000000001560 PARS5
       stm32eforth.s:2778   .text.reset_handler:000000000000155c $t
       stm32eforth.s:2781   .text.reset_handler:0000000000001564 $d
       stm32eforth.s:2788   .text.reset_handler:000000000000157e PARS6
       stm32eforth.s:2782   .text.reset_handler:0000000000001568 $t
       stm32eforth.s:2784   .text.reset_handler:0000000000001570 $d
       stm32eforth.s:2785   .text.reset_handler:0000000000001574 $t
       stm32eforth.s:2794   .text.reset_handler:0000000000001592 PARS7
       stm32eforth.s:2810   .text.reset_handler:00000000000015ba $d
       stm32eforth.s:2811   .text.reset_handler:00000000000015be _PARSE
       stm32eforth.s:2813   .text.reset_handler:00000000000015c4 $t
       stm32eforth.s:2814   .text.reset_handler:00000000000015c4 PARSE
       stm32eforth.s:2835   .text.reset_handler:0000000000001604 $d
       stm32eforth.s:2836   .text.reset_handler:0000000000001608 _DOTPR
       stm32eforth.s:2839   .text.reset_handler:000000000000160c DOTPR
       stm32eforth.s:2842   .text.reset_handler:0000000000001614 $d
       stm32eforth.s:2843   .text.reset_handler:0000000000001618 $t
       stm32eforth.s:2850   .text.reset_handler:0000000000001624 $d
       stm32eforth.s:2851   .text.reset_handler:0000000000001628 _PAREN
       stm32eforth.s:2853   .text.reset_handler:000000000000162a $t
       stm32eforth.s:2854   .text.reset_handler:000000000000162c PAREN
       stm32eforth.s:2857   .text.reset_handler:0000000000001634 $d
       stm32eforth.s:2858   .text.reset_handler:0000000000001638 $t
       stm32eforth.s:2865   .text.reset_handler:0000000000001644 $d
       stm32eforth.s:2866   .text.reset_handler:0000000000001648 _BKSLA
       stm32eforth.s:2868   .text.reset_handler:000000000000164a $t
       stm32eforth.s:2869   .text.reset_handler:000000000000164c BKSLA
ARM GAS  stm32eforth.s 			page 105


       stm32eforth.s:2880   .text.reset_handler:0000000000001664 $d
       stm32eforth.s:2881   .text.reset_handler:0000000000001668 _CHAR
       stm32eforth.s:2884   .text.reset_handler:0000000000001670 CHAR
       stm32eforth.s:2895   .text.reset_handler:0000000000001688 $d
       stm32eforth.s:2896   .text.reset_handler:000000000000168c _WORDD
       stm32eforth.s:2899   .text.reset_handler:0000000000001694 WORDD
       stm32eforth.s:2910   .text.reset_handler:00000000000016ac $d
       stm32eforth.s:2911   .text.reset_handler:00000000000016b0 _TOKEN
       stm32eforth.s:2913   .text.reset_handler:00000000000016b6 $t
       stm32eforth.s:2914   .text.reset_handler:00000000000016b8 TOKEN
       stm32eforth.s:2926   .text.reset_handler:00000000000016c8 $d
       stm32eforth.s:2927   .text.reset_handler:00000000000016cc _NAMET
       stm32eforth.s:2929   .text.reset_handler:00000000000016d2 $t
       stm32eforth.s:2930   .text.reset_handler:00000000000016d4 NAMET
       stm32eforth.s:2934   .text.reset_handler:00000000000016e0 $d
       stm32eforth.s:2935   .text.reset_handler:00000000000016e4 $t
       stm32eforth.s:2948   .text.reset_handler:00000000000016f4 $d
       stm32eforth.s:2949   .text.reset_handler:00000000000016f8 _SAMEQ
       stm32eforth.s:2951   .text.reset_handler:00000000000016fe $t
       stm32eforth.s:2952   .text.reset_handler:0000000000001700 SAMEQ
       stm32eforth.s:2972   .text.reset_handler:0000000000001748 SAME2
       stm32eforth.s:2956   .text.reset_handler:000000000000170c SAME1
       stm32eforth.s:2968   .text.reset_handler:0000000000001738 $d
       stm32eforth.s:2969   .text.reset_handler:000000000000173c $t
       stm32eforth.s:2974   .text.reset_handler:000000000000174c $d
       stm32eforth.s:2975   .text.reset_handler:0000000000001750 $t
       stm32eforth.s:2976   .text.reset_handler:0000000000001754 $d
       stm32eforth.s:2977   .text.reset_handler:0000000000001758 $t
       stm32eforth.s:2989   .text.reset_handler:000000000000175c FIND
       stm32eforth.s:2998   .text.reset_handler:000000000000177c FIND1
       stm32eforth.s:3001   .text.reset_handler:0000000000001784 $d
       stm32eforth.s:3021   .text.reset_handler:00000000000017cc FIND6
       stm32eforth.s:3002   .text.reset_handler:0000000000001788 $t
       stm32eforth.s:3005   .text.reset_handler:0000000000001794 $d
       stm32eforth.s:3006   .text.reset_handler:0000000000001798 $t
       stm32eforth.s:3010   .text.reset_handler:00000000000017a8 $d
       stm32eforth.s:3014   .text.reset_handler:00000000000017b8 FIND2
       stm32eforth.s:3011   .text.reset_handler:00000000000017ac $t
       stm32eforth.s:3019   .text.reset_handler:00000000000017c8 FIND3
       stm32eforth.s:3028   .text.reset_handler:00000000000017e4 FIND4
       stm32eforth.s:3030   .text.reset_handler:00000000000017e8 $d
       stm32eforth.s:3035   .text.reset_handler:00000000000017fc FIND5
       stm32eforth.s:3031   .text.reset_handler:00000000000017ec $t
       stm32eforth.s:3049   .text.reset_handler:0000000000001820 $d
       stm32eforth.s:3050   .text.reset_handler:0000000000001824 _NAMEQ
       stm32eforth.s:3052   .text.reset_handler:000000000000182a $t
       stm32eforth.s:3053   .text.reset_handler:000000000000182c NAMEQ
       stm32eforth.s:3070   .text.reset_handler:0000000000001840 BKSP
       stm32eforth.s:3079   .text.reset_handler:0000000000001860 $d
       stm32eforth.s:3092   .text.reset_handler:0000000000001888 BACK1
       stm32eforth.s:3080   .text.reset_handler:0000000000001864 $t
       stm32eforth.s:3081   .text.reset_handler:0000000000001868 $d
       stm32eforth.s:3082   .text.reset_handler:000000000000186c $t
       stm32eforth.s:3089   .text.reset_handler:0000000000001880 $d
       stm32eforth.s:3090   .text.reset_handler:0000000000001884 $t
       stm32eforth.s:3102   .text.reset_handler:000000000000188c TAP
       stm32eforth.s:3119   .text.reset_handler:00000000000018a8 KTAP
ARM GAS  stm32eforth.s 			page 106


       stm32eforth.s:3120   .text.reset_handler:00000000000018a8 TTAP
       stm32eforth.s:3124   .text.reset_handler:00000000000018b4 $d
       stm32eforth.s:3125   .text.reset_handler:00000000000018b8 $t
       stm32eforth.s:3127   .text.reset_handler:00000000000018c0 $d
       stm32eforth.s:3140   .text.reset_handler:00000000000018f0 KTAP2
       stm32eforth.s:3128   .text.reset_handler:00000000000018c4 $t
       stm32eforth.s:3129   .text.reset_handler:00000000000018c8 $d
       stm32eforth.s:3130   .text.reset_handler:00000000000018cc $t
       stm32eforth.s:3132   .text.reset_handler:00000000000018d4 $d
       stm32eforth.s:3137   .text.reset_handler:00000000000018e8 KTAP1
       stm32eforth.s:3133   .text.reset_handler:00000000000018d8 $t
       stm32eforth.s:3136   .text.reset_handler:00000000000018e4 $d
       stm32eforth.s:3138   .text.reset_handler:00000000000018e8 $t
       stm32eforth.s:3150   .text.reset_handler:0000000000001904 $d
       stm32eforth.s:3151   .text.reset_handler:0000000000001908 _ACCEP
       stm32eforth.s:3154   .text.reset_handler:0000000000001910 ACCEP
       stm32eforth.s:3159   .text.reset_handler:0000000000001920 ACCP1
       stm32eforth.s:3163   .text.reset_handler:000000000000192c $d
       stm32eforth.s:3179   .text.reset_handler:000000000000195c ACCP4
       stm32eforth.s:3164   .text.reset_handler:0000000000001930 $t
       stm32eforth.s:3168   .text.reset_handler:0000000000001940 $d
       stm32eforth.s:3169   .text.reset_handler:0000000000001944 $t
       stm32eforth.s:3171   .text.reset_handler:000000000000194c $d
       stm32eforth.s:3174   .text.reset_handler:0000000000001956 ACCP2
       stm32eforth.s:3172   .text.reset_handler:0000000000001950 $t
       stm32eforth.s:3177   .text.reset_handler:000000000000195a ACCP3
       stm32eforth.s:3188   .text.reset_handler:000000000000196c $d
       stm32eforth.s:3189   .text.reset_handler:0000000000001970 _QUERY
       stm32eforth.s:3191   .text.reset_handler:0000000000001976 $t
       stm32eforth.s:3192   .text.reset_handler:0000000000001978 QUERY
       stm32eforth.s:3196   .text.reset_handler:0000000000001984 $d
       stm32eforth.s:3197   .text.reset_handler:0000000000001988 $t
       stm32eforth.s:3202   .text.reset_handler:000000000000199c $d
       stm32eforth.s:3203   .text.reset_handler:00000000000019a0 $t
       stm32eforth.s:3213   .text.reset_handler:00000000000019ac $d
       stm32eforth.s:3214   .text.reset_handler:00000000000019b0 _ABORT
       stm32eforth.s:3216   .text.reset_handler:00000000000019b6 $t
       stm32eforth.s:3217   .text.reset_handler:00000000000019b8 ABORT
       stm32eforth.s:3220   .text.reset_handler:00000000000019c0 ABORT1
       stm32eforth.s:3224   .text.reset_handler:00000000000019cc $d
       stm32eforth.s:3225   .text.reset_handler:00000000000019d0 $t
       stm32eforth.s:3368   .text.reset_handler:0000000000001b34 PRESE
       stm32eforth.s:3382   .text.reset_handler:0000000000001b48 QUIT
       stm32eforth.s:3237   .text.reset_handler:00000000000019e0 ABORQ
       stm32eforth.s:3242   .text.reset_handler:00000000000019f0 $d
       stm32eforth.s:3243   .text.reset_handler:00000000000019f4 $t
       stm32eforth.s:3254   .text.reset_handler:00000000000019fe $d
       stm32eforth.s:3255   .text.reset_handler:0000000000001a02 _INTER
       stm32eforth.s:3257   .text.reset_handler:0000000000001a0e $t
       stm32eforth.s:3263   .text.reset_handler:0000000000001a20 $d
       stm32eforth.s:3274   .text.reset_handler:0000000000001a50 INTE1
       stm32eforth.s:3264   .text.reset_handler:0000000000001a24 $t
       stm32eforth.s:3266   .text.reset_handler:0000000000001a2c $d
       stm32eforth.s:3267   .text.reset_handler:0000000000001a30 $t
       stm32eforth.s:3269   .text.reset_handler:0000000000001a38 $d
       stm32eforth.s:3271   .text.reset_handler:0000000000001a46 $t
       stm32eforth.s:3277   .text.reset_handler:0000000000001a58 $d
ARM GAS  stm32eforth.s 			page 107


       stm32eforth.s:3279   .text.reset_handler:0000000000001a60 INTE2
       stm32eforth.s:3278   .text.reset_handler:0000000000001a5c $t
       stm32eforth.s:3285   .text.reset_handler:0000000000001a64 $d
       stm32eforth.s:3286   .text.reset_handler:0000000000001a68 _LBRAC
       stm32eforth.s:3288   .text.reset_handler:0000000000001a6a $t
       stm32eforth.s:3289   .text.reset_handler:0000000000001a6c LBRAC
       stm32eforth.s:3292   .text.reset_handler:0000000000001a74 $d
       stm32eforth.s:3293   .text.reset_handler:0000000000001a78 $t
       stm32eforth.s:3300   .text.reset_handler:0000000000001a84 $d
       stm32eforth.s:3301   .text.reset_handler:0000000000001a88 _DOTOK
       stm32eforth.s:3303   .text.reset_handler:0000000000001a8c $t
       stm32eforth.s:3304   .text.reset_handler:0000000000001a8c DOTOK
       stm32eforth.s:3307   .text.reset_handler:0000000000001a94 $d
       stm32eforth.s:3308   .text.reset_handler:0000000000001a98 $t
       stm32eforth.s:3312   .text.reset_handler:0000000000001aa8 $d
       stm32eforth.s:3316   .text.reset_handler:0000000000001ab4 DOTO1
       stm32eforth.s:3313   .text.reset_handler:0000000000001aac $t
       stm32eforth.s:3314   .text.reset_handler:0000000000001ab0 $d
       stm32eforth.s:3317   .text.reset_handler:0000000000001ab4 $t
       stm32eforth.s:3323   .text.reset_handler:0000000000001abc $d
       stm32eforth.s:3324   .text.reset_handler:0000000000001ac0 _QSTAC
       stm32eforth.s:3327   .text.reset_handler:0000000000001ac8 QSTAC
       stm32eforth.s:3332   .text.reset_handler:0000000000001ad8 $d
       stm32eforth.s:3340   .text.reset_handler:0000000000001ae8 $d
       stm32eforth.s:3341   .text.reset_handler:0000000000001aec _EVAL
       stm32eforth.s:3344   .text.reset_handler:0000000000001af4 EVAL
       stm32eforth.s:3346   .text.reset_handler:0000000000001af8 EVAL1
       stm32eforth.s:3351   .text.reset_handler:0000000000001b08 $d
       stm32eforth.s:3356   .text.reset_handler:0000000000001b1c EVAL2
       stm32eforth.s:3352   .text.reset_handler:0000000000001b0c $t
       stm32eforth.s:3364   .text.reset_handler:0000000000001b28 $d
       stm32eforth.s:3365   .text.reset_handler:0000000000001b2c _PRESE
       stm32eforth.s:3378   .text.reset_handler:0000000000001b3e $d
       stm32eforth.s:3379   .text.reset_handler:0000000000001b42 _QUIT
       stm32eforth.s:3386   .text.reset_handler:0000000000001b54 QUIT1
       stm32eforth.s:3388   .text.reset_handler:0000000000001b58 QUIT2
       stm32eforth.s:3392   .text.reset_handler:0000000000001b64 $d
       stm32eforth.s:3401   .text.reset_handler:0000000000001b6c _UNLOCK
       stm32eforth.s:3404   .text.reset_handler:0000000000001b74 UNLOCK
       stm32eforth.s:3407   .text.reset_handler:0000000000001b7c $d
       stm32eforth.s:3428   .text.reset_handler:0000000000001b9e LOCK
       stm32eforth.s:3778   .text.reset_handler:0000000000001f88 flash_regs
       stm32eforth.s:3408   .text.reset_handler:0000000000001b80 $t
       stm32eforth.s:3435   .text.reset_handler:0000000000001baa WAIT_BSY
       stm32eforth.s:3437   .text.reset_handler:0000000000001bac WAIT1
       stm32eforth.s:3448   .text.reset_handler:0000000000001bb6 $d
       stm32eforth.s:3449   .text.reset_handler:0000000000001bba _EPAGE
       stm32eforth.s:3453   .text.reset_handler:0000000000001bc8 EPAGE
       stm32eforth.s:3457   .text.reset_handler:0000000000001bd4 $d
       stm32eforth.s:3458   .text.reset_handler:0000000000001bd8 $t
       stm32eforth.s:3468   .text.reset_handler:0000000000001bf6 $d
       stm32eforth.s:3469   .text.reset_handler:0000000000001bfa $t
       stm32eforth.s:3473   .text.reset_handler:0000000000001c08 $d
       stm32eforth.s:3475   .text.reset_handler:0000000000001c16 $t
       stm32eforth.s:3480   .text.reset_handler:0000000000001c1c HWORD_WRITE
       stm32eforth.s:3493   .text.reset_handler:0000000000001c3e $d
       stm32eforth.s:3494   .text.reset_handler:0000000000001c42 $t
ARM GAS  stm32eforth.s 			page 108


       stm32eforth.s:3495   .text.reset_handler:0000000000001c46 $d
       stm32eforth.s:3497   .text.reset_handler:0000000000001c54 $t
       stm32eforth.s:3506   .text.reset_handler:0000000000001c58 $d
       stm32eforth.s:3507   .text.reset_handler:0000000000001c5c _ISTOR
       stm32eforth.s:3510   .text.reset_handler:0000000000001c60 ISTOR
       stm32eforth.s:3514   .text.reset_handler:0000000000001c6c $d
       stm32eforth.s:3515   .text.reset_handler:0000000000001c70 $t
       stm32eforth.s:3526   .text.reset_handler:0000000000001c9c $d
       stm32eforth.s:3527   .text.reset_handler:0000000000001ca0 $t
       stm32eforth.s:3533   .text.reset_handler:0000000000001ca8 $d
       stm32eforth.s:3534   .text.reset_handler:0000000000001cac _IMG_SIZE
       stm32eforth.s:3537   .text.reset_handler:0000000000001cb8 IMG_SIZE
       stm32eforth.s:3540   .text.reset_handler:0000000000001cc0 $d
       stm32eforth.s:3541   .text.reset_handler:0000000000001cc4 $t
       stm32eforth.s:3546   .text.reset_handler:0000000000001cd8 $d
       stm32eforth.s:3547   .text.reset_handler:0000000000001cdc $t
       stm32eforth.s:3550   .text.reset_handler:0000000000001ce8 $d
       stm32eforth.s:3551   .text.reset_handler:0000000000001cec $t
       stm32eforth.s:3557   .text.reset_handler:0000000000001cf4 $d
       stm32eforth.s:3558   .text.reset_handler:0000000000001cf8 _IMGQ
       stm32eforth.s:3561   .text.reset_handler:0000000000001d00 IMGQ
       stm32eforth.s:3573   .text.reset_handler:0000000000001d20 $d
       stm32eforth.s:3574   .text.reset_handler:0000000000001d24 _LOAD_IMG
       stm32eforth.s:3577   .text.reset_handler:0000000000001d30 LOAD_IMG
       stm32eforth.s:3581   .text.reset_handler:0000000000001d3c $d
       stm32eforth.s:3583   .text.reset_handler:0000000000001d40 $t
       stm32eforth.s:3607   .text.reset_handler:0000000000001d88 $d
       stm32eforth.s:3608   .text.reset_handler:0000000000001d8c _ERASE_MPG
       stm32eforth.s:3610   .text.reset_handler:0000000000001d96 $t
       stm32eforth.s:3611   .text.reset_handler:0000000000001d98 ERASE_MPG
       stm32eforth.s:3673   .text.reset_handler:0000000000001e48 PG_TO_ADR
       stm32eforth.s:3616   .text.reset_handler:0000000000001da8 $d
       stm32eforth.s:3618   .text.reset_handler:0000000000001dac $t
       stm32eforth.s:3625   .text.reset_handler:0000000000001dc4 $d
       stm32eforth.s:3626   .text.reset_handler:0000000000001dc8 $t
       stm32eforth.s:3631   .text.reset_handler:0000000000001dd0 $d
       stm32eforth.s:3632   .text.reset_handler:0000000000001dd4 _FLSH_WR
       stm32eforth.s:3635   .text.reset_handler:0000000000001ddc FLSH_WR
       stm32eforth.s:3636   .text.reset_handler:0000000000001ddc $t
       stm32eforth.s:3639   .text.reset_handler:0000000000001de8 $d
       stm32eforth.s:3641   .text.reset_handler:0000000000001dec $t
       stm32eforth.s:3650   .text.reset_handler:0000000000001e10 $d
       stm32eforth.s:3651   .text.reset_handler:0000000000001e14 $t
       stm32eforth.s:3658   .text.reset_handler:0000000000001e24 $d
       stm32eforth.s:3659   .text.reset_handler:0000000000001e28 _ADR_TO_PG
       stm32eforth.s:3662   .text.reset_handler:0000000000001e30 ADR_TO_PG
       stm32eforth.s:3669   .text.reset_handler:0000000000001e3a $d
       stm32eforth.s:3670   .text.reset_handler:0000000000001e3e _PG_TO_ADR
       stm32eforth.s:3680   .text.reset_handler:0000000000001e52 $d
       stm32eforth.s:3681   .text.reset_handler:0000000000001e56 _ERASE_IMG
       stm32eforth.s:3683   .text.reset_handler:0000000000001e60 $t
       stm32eforth.s:3684   .text.reset_handler:0000000000001e60 ERASE_IMG
       stm32eforth.s:3690   .text.reset_handler:0000000000001e74 $d
       stm32eforth.s:3691   .text.reset_handler:0000000000001e78 $t
       stm32eforth.s:3695   .text.reset_handler:0000000000001e88 $d
       stm32eforth.s:3696   .text.reset_handler:0000000000001e8c $t
       stm32eforth.s:3701   .text.reset_handler:0000000000001e94 $d
ARM GAS  stm32eforth.s 			page 109


       stm32eforth.s:3702   .text.reset_handler:0000000000001e98 _SAVE_IMG
       stm32eforth.s:3705   .text.reset_handler:0000000000001ea4 SAVE_IMG
       stm32eforth.s:3711   .text.reset_handler:0000000000001eb8 $d
       stm32eforth.s:3712   .text.reset_handler:0000000000001ebc $t
       stm32eforth.s:3715   .text.reset_handler:0000000000001ec8 $d
       stm32eforth.s:3717   .text.reset_handler:0000000000001ecc $t
       stm32eforth.s:3739   .text.reset_handler:0000000000001f08 $d
       stm32eforth.s:3740   .text.reset_handler:0000000000001f0c _TURNKEY
       stm32eforth.s:3742   .text.reset_handler:0000000000001f14 $t
       stm32eforth.s:3743   .text.reset_handler:0000000000001f14 TURNKEY
       stm32eforth.s:3793   .text.reset_handler:0000000000001f9c TICK
       stm32eforth.s:3751   .text.reset_handler:0000000000001f2c $d
       stm32eforth.s:3752   .text.reset_handler:0000000000001f30 _FORGET
       stm32eforth.s:3755   .text.reset_handler:0000000000001f38 FORGET
       stm32eforth.s:3761   .text.reset_handler:0000000000001f4c $d
       stm32eforth.s:3762   .text.reset_handler:0000000000001f50 $t
       stm32eforth.s:3765   .text.reset_handler:0000000000001f5c $d
       stm32eforth.s:3766   .text.reset_handler:0000000000001f60 $t
       stm32eforth.s:4236   .text.reset_handler:00000000000023c8 OVERT
       stm32eforth.s:3779   .text.reset_handler:0000000000001f88 $d
       stm32eforth.s:3790   .text.reset_handler:0000000000001f98 _TICK
       stm32eforth.s:3792   .text.reset_handler:0000000000001f9a $t
       stm32eforth.s:3798   .text.reset_handler:0000000000001fac $d
       stm32eforth.s:3800   .text.reset_handler:0000000000001fb4 TICK1
       stm32eforth.s:3799   .text.reset_handler:0000000000001fb0 $t
       stm32eforth.s:3805   .text.reset_handler:0000000000001fb8 $d
       stm32eforth.s:3806   .text.reset_handler:0000000000001fbc _ALLOT
       stm32eforth.s:3808   .text.reset_handler:0000000000001fc2 $t
       stm32eforth.s:3809   .text.reset_handler:0000000000001fc4 ALLOT
       stm32eforth.s:3818   .text.reset_handler:0000000000001fd4 $d
       stm32eforth.s:3819   .text.reset_handler:0000000000001fd8 _COMMA
       stm32eforth.s:3820   .text.reset_handler:0000000000001fda $t
       stm32eforth.s:3821   .text.reset_handler:0000000000001fdc COMMA
       stm32eforth.s:3834   .text.reset_handler:0000000000001ffc $d
       stm32eforth.s:3835   .text.reset_handler:0000000000002000 _BCOMP
       stm32eforth.s:3837   .text.reset_handler:000000000000200a $t
       stm32eforth.s:3838   .text.reset_handler:000000000000200c BCOMP
       stm32eforth.s:3847   .text.reset_handler:000000000000201c $d
       stm32eforth.s:3848   .text.reset_handler:0000000000002020 _COMPI
       stm32eforth.s:3850   .text.reset_handler:0000000000002028 $t
       stm32eforth.s:3851   .text.reset_handler:0000000000002028 COMPI
       stm32eforth.s:4302   .text.reset_handler:000000000000246c CALLC
       stm32eforth.s:3866   .text.reset_handler:0000000000002050 $d
       stm32eforth.s:3867   .text.reset_handler:0000000000002054 _LITER
       stm32eforth.s:3869   .text.reset_handler:000000000000205c $t
       stm32eforth.s:3870   .text.reset_handler:000000000000205c LITER
       stm32eforth.s:3873   .text.reset_handler:0000000000002064 $d
       stm32eforth.s:3874   .text.reset_handler:0000000000002068 $t
       stm32eforth.s:3884   .text.reset_handler:0000000000002070 STRCQ
       stm32eforth.s:3887   .text.reset_handler:0000000000002078 $d
       stm32eforth.s:3888   .text.reset_handler:000000000000207c $t
       stm32eforth.s:3891   .text.reset_handler:0000000000002088 $d
       stm32eforth.s:3892   .text.reset_handler:000000000000208c $t
       stm32eforth.s:3906   .text.reset_handler:00000000000020a8 $d
       stm32eforth.s:3907   .text.reset_handler:00000000000020ac _FOR
       stm32eforth.s:3909   .text.reset_handler:00000000000020b0 $t
       stm32eforth.s:3910   .text.reset_handler:00000000000020b0 FOR
ARM GAS  stm32eforth.s 			page 110


       stm32eforth.s:3913   .text.reset_handler:00000000000020b8 $d
       stm32eforth.s:3914   .text.reset_handler:00000000000020bc $t
       stm32eforth.s:3920   .text.reset_handler:00000000000020c4 $d
       stm32eforth.s:3921   .text.reset_handler:00000000000020c8 _BEGIN
       stm32eforth.s:3923   .text.reset_handler:00000000000020ce $t
       stm32eforth.s:3924   .text.reset_handler:00000000000020d0 BEGIN
       stm32eforth.s:3932   .text.reset_handler:00000000000020dc $d
       stm32eforth.s:3933   .text.reset_handler:00000000000020e0 _NEXT
       stm32eforth.s:3936   .text.reset_handler:00000000000020e8 NEXT
       stm32eforth.s:3939   .text.reset_handler:00000000000020f0 $d
       stm32eforth.s:3940   .text.reset_handler:00000000000020f4 $t
       stm32eforth.s:3946   .text.reset_handler:00000000000020fc $d
       stm32eforth.s:3947   .text.reset_handler:0000000000002100 _UNTIL
       stm32eforth.s:3949   .text.reset_handler:0000000000002106 $t
       stm32eforth.s:3950   .text.reset_handler:0000000000002108 UNTIL
       stm32eforth.s:3953   .text.reset_handler:0000000000002110 $d
       stm32eforth.s:3954   .text.reset_handler:0000000000002114 $t
       stm32eforth.s:3960   .text.reset_handler:000000000000211c $d
       stm32eforth.s:3961   .text.reset_handler:0000000000002120 _AGAIN
       stm32eforth.s:3963   .text.reset_handler:0000000000002126 $t
       stm32eforth.s:3964   .text.reset_handler:0000000000002128 AGAIN
       stm32eforth.s:3967   .text.reset_handler:0000000000002130 $d
       stm32eforth.s:3968   .text.reset_handler:0000000000002134 $t
       stm32eforth.s:3974   .text.reset_handler:000000000000213c $d
       stm32eforth.s:3975   .text.reset_handler:0000000000002140 _IFF
       stm32eforth.s:3978   .text.reset_handler:0000000000002144 IFF
       stm32eforth.s:3981   .text.reset_handler:000000000000214c $d
       stm32eforth.s:3982   .text.reset_handler:0000000000002150 $t
       stm32eforth.s:3984   .text.reset_handler:0000000000002158 $d
       stm32eforth.s:3985   .text.reset_handler:000000000000215c $t
       stm32eforth.s:3992   .text.reset_handler:0000000000002168 $d
       stm32eforth.s:3993   .text.reset_handler:000000000000216c _AHEAD
       stm32eforth.s:3995   .text.reset_handler:0000000000002172 $t
       stm32eforth.s:3996   .text.reset_handler:0000000000002174 AHEAD
       stm32eforth.s:3999   .text.reset_handler:000000000000217c $d
       stm32eforth.s:4000   .text.reset_handler:0000000000002180 $t
       stm32eforth.s:4002   .text.reset_handler:0000000000002188 $d
       stm32eforth.s:4003   .text.reset_handler:000000000000218c $t
       stm32eforth.s:4010   .text.reset_handler:0000000000002198 $d
       stm32eforth.s:4011   .text.reset_handler:000000000000219c _REPEA
       stm32eforth.s:4014   .text.reset_handler:00000000000021a4 REPEA
       stm32eforth.s:4025   .text.reset_handler:00000000000021bc $d
       stm32eforth.s:4026   .text.reset_handler:00000000000021c0 _THENN
       stm32eforth.s:4029   .text.reset_handler:00000000000021c8 THENN
       stm32eforth.s:4039   .text.reset_handler:00000000000021dc $d
       stm32eforth.s:4040   .text.reset_handler:00000000000021e0 _AFT
       stm32eforth.s:4042   .text.reset_handler:00000000000021e4 $t
       stm32eforth.s:4043   .text.reset_handler:00000000000021e4 AFT
       stm32eforth.s:4054   .text.reset_handler:00000000000021fc $d
       stm32eforth.s:4055   .text.reset_handler:0000000000002200 _ELSEE
       stm32eforth.s:4058   .text.reset_handler:0000000000002208 ELSEE
       stm32eforth.s:4068   .text.reset_handler:000000000000221c $d
       stm32eforth.s:4069   .text.reset_handler:0000000000002220 _WHILE
       stm32eforth.s:4071   .text.reset_handler:0000000000002226 $t
       stm32eforth.s:4072   .text.reset_handler:0000000000002228 WHILE
       stm32eforth.s:4081   .text.reset_handler:0000000000002238 $d
       stm32eforth.s:4082   .text.reset_handler:000000000000223c _ABRTQ
ARM GAS  stm32eforth.s 			page 111


       stm32eforth.s:4085   .text.reset_handler:0000000000002244 ABRTQ
       stm32eforth.s:4088   .text.reset_handler:000000000000224c $d
       stm32eforth.s:4089   .text.reset_handler:0000000000002250 $t
       stm32eforth.s:4095   .text.reset_handler:0000000000002258 $d
       stm32eforth.s:4096   .text.reset_handler:000000000000225c _STRQ
       stm32eforth.s:4099   .text.reset_handler:0000000000002260 STRQ
       stm32eforth.s:4102   .text.reset_handler:0000000000002268 $d
       stm32eforth.s:4103   .text.reset_handler:000000000000226c $t
       stm32eforth.s:4109   .text.reset_handler:0000000000002274 $d
       stm32eforth.s:4110   .text.reset_handler:0000000000002278 _DOTQ
       stm32eforth.s:4113   .text.reset_handler:000000000000227c DOTQ
       stm32eforth.s:4116   .text.reset_handler:0000000000002284 $d
       stm32eforth.s:4117   .text.reset_handler:0000000000002288 $t
       stm32eforth.s:4126   .text.reset_handler:0000000000002290 $d
       stm32eforth.s:4127   .text.reset_handler:0000000000002294 _UNIQU
       stm32eforth.s:4129   .text.reset_handler:000000000000229c $t
       stm32eforth.s:4130   .text.reset_handler:000000000000229c UNIQU
       stm32eforth.s:4135   .text.reset_handler:00000000000022ac $d
       stm32eforth.s:4143   .text.reset_handler:00000000000022c8 UNIQ1
       stm32eforth.s:4136   .text.reset_handler:00000000000022b0 $t
       stm32eforth.s:4137   .text.reset_handler:00000000000022b4 $d
       stm32eforth.s:4139   .text.reset_handler:00000000000022bc $t
       stm32eforth.s:4154   .text.reset_handler:00000000000022d0 SNAME
       stm32eforth.s:4159   .text.reset_handler:00000000000022e0 $d
       stm32eforth.s:4173   .text.reset_handler:0000000000002318 SNAM1
       stm32eforth.s:4160   .text.reset_handler:00000000000022e4 $t
       stm32eforth.s:4175   .text.reset_handler:000000000000231c $d
       stm32eforth.s:4177   .text.reset_handler:0000000000002324 $t
       stm32eforth.s:4182   .text.reset_handler:0000000000002328 $d
       stm32eforth.s:4183   .text.reset_handler:000000000000232c _SCOMP
       stm32eforth.s:4186   .text.reset_handler:0000000000002338 SCOMP
       stm32eforth.s:4191   .text.reset_handler:0000000000002348 $d
       stm32eforth.s:4203   .text.reset_handler:0000000000002374 SCOM2
       stm32eforth.s:4192   .text.reset_handler:000000000000234c $t
       stm32eforth.s:4194   .text.reset_handler:0000000000002354 $d
       stm32eforth.s:4195   .text.reset_handler:0000000000002358 $t
       stm32eforth.s:4197   .text.reset_handler:0000000000002360 $d
       stm32eforth.s:4200   .text.reset_handler:000000000000236c SCOM1
       stm32eforth.s:4198   .text.reset_handler:0000000000002364 $t
       stm32eforth.s:4206   .text.reset_handler:000000000000237c $d
       stm32eforth.s:4209   .text.reset_handler:0000000000002388 SCOM3
       stm32eforth.s:4207   .text.reset_handler:0000000000002380 $t
       stm32eforth.s:4216   .text.reset_handler:0000000000002390 COLON_ABORT
       stm32eforth.s:4232   .text.reset_handler:00000000000023bc $d
       stm32eforth.s:4233   .text.reset_handler:00000000000023c0 _OVERT
       stm32eforth.s:4235   .text.reset_handler:00000000000023c6 $t
       stm32eforth.s:4247   .text.reset_handler:00000000000023e0 $d
       stm32eforth.s:4248   .text.reset_handler:00000000000023e4 _SEMIS
       stm32eforth.s:4250   .text.reset_handler:00000000000023e6 $t
       stm32eforth.s:4251   .text.reset_handler:00000000000023e8 SEMIS
       stm32eforth.s:4263   .text.reset_handler:0000000000002404 $d
       stm32eforth.s:4264   .text.reset_handler:0000000000002408 _RBRAC
       stm32eforth.s:4266   .text.reset_handler:000000000000240a $t
       stm32eforth.s:4267   .text.reset_handler:000000000000240c RBRAC
       stm32eforth.s:4270   .text.reset_handler:0000000000002414 $d
       stm32eforth.s:4271   .text.reset_handler:0000000000002418 $t
       stm32eforth.s:4278   .text.reset_handler:0000000000002424 COMPILE_BLW
ARM GAS  stm32eforth.s 			page 112


       stm32eforth.s:4316   .text.reset_handler:000000000000248c $d
       stm32eforth.s:4317   .text.reset_handler:0000000000002490 _COLON
       stm32eforth.s:4319   .text.reset_handler:0000000000002492 $t
       stm32eforth.s:4320   .text.reset_handler:0000000000002494 COLON
       stm32eforth.s:4333   .text.reset_handler:00000000000024b4 $d
       stm32eforth.s:4334   .text.reset_handler:00000000000024b8 _IMMED
       stm32eforth.s:4336   .text.reset_handler:00000000000024c2 $t
       stm32eforth.s:4337   .text.reset_handler:00000000000024c4 IMMED
       stm32eforth.s:4340   .text.reset_handler:00000000000024cc $d
       stm32eforth.s:4341   .text.reset_handler:00000000000024d0 $t
       stm32eforth.s:4356   .text.reset_handler:00000000000024f0 $d
       stm32eforth.s:4357   .text.reset_handler:00000000000024f4 _CONST
       stm32eforth.s:4360   .text.reset_handler:0000000000002500 CONST
       stm32eforth.s:4369   .text.reset_handler:0000000000002520 $d
       stm32eforth.s:4370   .text.reset_handler:0000000000002524 $t
       stm32eforth.s:4378   .text.reset_handler:0000000000002530 DODOES
       stm32eforth.s:4401   .text.reset_handler:0000000000002570 $d
       stm32eforth.s:4402   .text.reset_handler:0000000000002574 _DOES
       stm32eforth.s:4404   .text.reset_handler:000000000000257a $t
       stm32eforth.s:4405   .text.reset_handler:000000000000257c DOES
       stm32eforth.s:4408   .text.reset_handler:0000000000002584 $d
       stm32eforth.s:4409   .text.reset_handler:0000000000002588 $t
       stm32eforth.s:4417   .text.reset_handler:00000000000025a8 $d
       stm32eforth.s:4418   .text.reset_handler:00000000000025ac $t
       stm32eforth.s:4420   .text.reset_handler:00000000000025b4 $d
       stm32eforth.s:4421   .text.reset_handler:00000000000025b8 $t
       stm32eforth.s:4428   .text.reset_handler:00000000000025c0 $d
       stm32eforth.s:4429   .text.reset_handler:00000000000025c4 _CREAT
       stm32eforth.s:4432   .text.reset_handler:00000000000025cc CREAT
       stm32eforth.s:4441   .text.reset_handler:00000000000025ec $d
       stm32eforth.s:4442   .text.reset_handler:00000000000025f0 $t
       stm32eforth.s:4448   .text.reset_handler:00000000000025f8 $d
       stm32eforth.s:4449   .text.reset_handler:00000000000025fc _VARIA
       stm32eforth.s:4452   .text.reset_handler:0000000000002608 VARIA
       stm32eforth.s:4456   .text.reset_handler:0000000000002614 $d
       stm32eforth.s:4457   .text.reset_handler:0000000000002618 $t
       stm32eforth.s:4470   .text.reset_handler:0000000000002620 DMP
       stm32eforth.s:4474   .text.reset_handler:000000000000262c $d
       stm32eforth.s:4475   .text.reset_handler:0000000000002630 $t
       stm32eforth.s:4486   .text.reset_handler:0000000000002658 PDUM2
       stm32eforth.s:4479   .text.reset_handler:0000000000002640 PDUM1
       stm32eforth.s:4483   .text.reset_handler:000000000000264c $d
       stm32eforth.s:4484   .text.reset_handler:0000000000002650 $t
       stm32eforth.s:4488   .text.reset_handler:000000000000265c $d
       stm32eforth.s:4489   .text.reset_handler:0000000000002660 $t
       stm32eforth.s:4494   .text.reset_handler:0000000000002664 $d
       stm32eforth.s:4495   .text.reset_handler:0000000000002668 _DUMP
       stm32eforth.s:4498   .text.reset_handler:0000000000002670 DUMP
       stm32eforth.s:4505   .text.reset_handler:0000000000002688 $d
       stm32eforth.s:4506   .text.reset_handler:000000000000268c $t
       stm32eforth.s:4520   .text.reset_handler:00000000000026c0 DUMP4
       stm32eforth.s:4509   .text.reset_handler:0000000000002698 DUMP1
       stm32eforth.s:4512   .text.reset_handler:00000000000026a0 $d
       stm32eforth.s:4513   .text.reset_handler:00000000000026a4 $t
       stm32eforth.s:4522   .text.reset_handler:00000000000026c4 $d
       stm32eforth.s:4523   .text.reset_handler:00000000000026c8 DUMP3
       stm32eforth.s:4524   .text.reset_handler:00000000000026c8 $t
ARM GAS  stm32eforth.s 			page 113


       stm32eforth.s:4533   .text.reset_handler:00000000000026dc $d
       stm32eforth.s:4534   .text.reset_handler:00000000000026e0 _DOTS
       stm32eforth.s:4538   .text.reset_handler:00000000000026e4 DOTS
       stm32eforth.s:4548   .text.reset_handler:0000000000002704 DOTS2
       stm32eforth.s:4544   .text.reset_handler:00000000000026f8 DOTS1
       stm32eforth.s:4550   .text.reset_handler:0000000000002708 $d
       stm32eforth.s:4551   .text.reset_handler:000000000000270c $t
       stm32eforth.s:4557   .text.reset_handler:0000000000002714 $d
       stm32eforth.s:4558   .text.reset_handler:0000000000002718 _TNAME
       stm32eforth.s:4560   .text.reset_handler:000000000000271e $t
       stm32eforth.s:4561   .text.reset_handler:0000000000002720 TNAME
       stm32eforth.s:4566   .text.reset_handler:0000000000002730 TNAM1
       stm32eforth.s:4569   .text.reset_handler:0000000000002738 $d
       stm32eforth.s:4579   .text.reset_handler:0000000000002760 TNAM2
       stm32eforth.s:4570   .text.reset_handler:000000000000273c $t
       stm32eforth.s:4575   .text.reset_handler:0000000000002750 $d
       stm32eforth.s:4576   .text.reset_handler:0000000000002754 $t
       stm32eforth.s:4587   .text.reset_handler:000000000000276c $d
       stm32eforth.s:4588   .text.reset_handler:0000000000002770 _DOTID
       stm32eforth.s:4590   .text.reset_handler:0000000000002774 $t
       stm32eforth.s:4591   .text.reset_handler:0000000000002774 DOTID
       stm32eforth.s:4595   .text.reset_handler:0000000000002780 $d
       stm32eforth.s:4602   .text.reset_handler:000000000000279c DOTI1
       stm32eforth.s:4596   .text.reset_handler:0000000000002784 $t
       stm32eforth.s:4598   .text.reset_handler:000000000000278c $d
       stm32eforth.s:4599   .text.reset_handler:0000000000002790 $t
       stm32eforth.s:4604   .text.reset_handler:00000000000027a0 $d
       stm32eforth.s:4606   .text.reset_handler:00000000000027aa $t
       stm32eforth.s:4609   *ABS*:0000000000000001 WANT_SEE
       stm32eforth.s:4614   .text.reset_handler:00000000000027b0 $d
       stm32eforth.s:4615   .text.reset_handler:00000000000027b4 _SEE
       stm32eforth.s:4617   .text.reset_handler:00000000000027b8 $t
       stm32eforth.s:4618   .text.reset_handler:00000000000027b8 SEE
       stm32eforth.s:4623   .text.reset_handler:00000000000027c8 $d
       stm32eforth.s:4624   .text.reset_handler:00000000000027cc $t
       stm32eforth.s:4625   .text.reset_handler:00000000000027d0 SEE1
       stm32eforth.s:4642   .text.reset_handler:00000000000027fc DECOMP
       stm32eforth.s:4630   .text.reset_handler:00000000000027e0 $d
       stm32eforth.s:4631   .text.reset_handler:00000000000027e4 $t
       stm32eforth.s:4637   .text.reset_handler:00000000000027ec $d
       stm32eforth.s:4638   .text.reset_handler:00000000000027f0 _DECOM
       stm32eforth.s:4640   .text.reset_handler:00000000000027fa $t
       stm32eforth.s:4649   .text.reset_handler:0000000000002810 $d
       stm32eforth.s:4650   .text.reset_handler:0000000000002814 $t
       stm32eforth.s:4652   .text.reset_handler:000000000000281c $d
       stm32eforth.s:4653   .text.reset_handler:0000000000002820 $t
       stm32eforth.s:4656   .text.reset_handler:000000000000282c $d
       stm32eforth.s:4682   .text.reset_handler:0000000000002884 DECOM2
       stm32eforth.s:4658   .text.reset_handler:0000000000002830 $t
       stm32eforth.s:4672   .text.reset_handler:0000000000002864 $d
       stm32eforth.s:4678   .text.reset_handler:0000000000002878 DECOM1
       stm32eforth.s:4673   .text.reset_handler:0000000000002868 $t
       stm32eforth.s:4691   .text.reset_handler:0000000000002890 $d
       stm32eforth.s:4695   .text.reset_handler:0000000000002894 _WORDS
       stm32eforth.s:4697   .text.reset_handler:000000000000289a $t
       stm32eforth.s:4698   .text.reset_handler:000000000000289c WORDS
       stm32eforth.s:4703   .text.reset_handler:00000000000028ac WORS1
ARM GAS  stm32eforth.s 			page 114


       stm32eforth.s:4706   .text.reset_handler:00000000000028b4 $d
       stm32eforth.s:4713   .text.reset_handler:00000000000028d0 WORS2
       stm32eforth.s:4707   .text.reset_handler:00000000000028b8 $t
       stm32eforth.s:4726   .text.reset_handler:00000000000028d4 VERSN
       stm32eforth.s:4729   .text.reset_handler:00000000000028dc $d
       stm32eforth.s:4730   .text.reset_handler:00000000000028e0 $t
       stm32eforth.s:4735   .text.reset_handler:00000000000028e4 $d
       stm32eforth.s:4736   .text.reset_handler:00000000000028e8 _HI
       stm32eforth.s:4743   .text.reset_handler:00000000000028f8 $d
       stm32eforth.s:4745   .text.reset_handler:0000000000002910 $t
       stm32eforth.s:4754   .text.reset_handler:0000000000002930 $d
       stm32eforth.s:4755   .text.reset_handler:0000000000002934 $t
       stm32eforth.s:4767   .text.reset_handler:0000000000002954 $d
       stm32eforth.s:4773   .text.reset_handler:0000000000002960 $t
       stm32eforth.s:4779   .text.reset_handler:0000000000002978 COLD1
       stm32eforth.s:4781   .text.reset_handler:000000000000297c $d
       stm32eforth.s:4782   .text.reset_handler:0000000000002980 $t
       stm32eforth.s:4784   .text.reset_handler:0000000000002988 $d
       stm32eforth.s:4785   .text.reset_handler:000000000000298c $t
       stm32eforth.s:4786   .text.reset_handler:0000000000002990 $d
       stm32eforth.s:4787   .text.reset_handler:0000000000002994 $t
       stm32eforth.s:4788   .text.reset_handler:0000000000002998 $d
       stm32eforth.s:4789   .text.reset_handler:000000000000299c $t
       stm32eforth.s:4794   .text.reset_handler:00000000000029ac $d
       stm32eforth.s:4795   .text.reset_handler:00000000000029b0 $t
       stm32eforth.s:4800   .text.reset_handler:00000000000029c4 COLD2
       stm32eforth.s:4803   .text.reset_handler:00000000000029c8 $d
       stm32eforth.s:4804   .text.reset_handler:00000000000029cc $t
       stm32eforth.s:4806   .text.reset_handler:0000000000002c00 $d
       stm32eforth.s:275    .text.default_handler:000000000000001f $d
       stm32eforth.s:275    .text.default_handler:0000000000000020 $t
       stm32eforth.s:595    .text.reset_handler:0000000000000477 $d
       stm32eforth.s:595    .text.reset_handler:0000000000000478 $t
       stm32eforth.s:639    .text.reset_handler:00000000000004f5 $d
       stm32eforth.s:639    .text.reset_handler:00000000000004f6 $t
       stm32eforth.s:659    .text.reset_handler:000000000000051d $d
       stm32eforth.s:659    .text.reset_handler:000000000000051e $t
       stm32eforth.s:684    .text.reset_handler:0000000000000555 $d
       stm32eforth.s:684    .text.reset_handler:0000000000000556 $t
       stm32eforth.s:796    .text.reset_handler:00000000000005eb $d
       stm32eforth.s:796    .text.reset_handler:00000000000005ec $t
       stm32eforth.s:830    .text.reset_handler:0000000000000617 $d
       stm32eforth.s:830    .text.reset_handler:0000000000000618 $t
       stm32eforth.s:843    .text.reset_handler:000000000000062b $d
       stm32eforth.s:843    .text.reset_handler:000000000000062c $t
       stm32eforth.s:854    .text.reset_handler:0000000000000637 $d
       stm32eforth.s:854    .text.reset_handler:0000000000000638 $t
       stm32eforth.s:866    .text.reset_handler:0000000000000649 $d
       stm32eforth.s:866    .text.reset_handler:000000000000064a $t
       stm32eforth.s:878    .text.reset_handler:000000000000065b $d
       stm32eforth.s:878    .text.reset_handler:000000000000065c $t
       stm32eforth.s:902    .text.reset_handler:0000000000000681 $d
       stm32eforth.s:902    .text.reset_handler:0000000000000682 $t
       stm32eforth.s:924    .text.reset_handler:00000000000006a3 $d
       stm32eforth.s:924    .text.reset_handler:00000000000006a4 $t
       stm32eforth.s:937    .text.reset_handler:00000000000006b5 $d
       stm32eforth.s:937    .text.reset_handler:00000000000006b6 $t
ARM GAS  stm32eforth.s 			page 115


       stm32eforth.s:949    .text.reset_handler:00000000000006c7 $d
       stm32eforth.s:949    .text.reset_handler:00000000000006c8 $t
       stm32eforth.s:973    .text.reset_handler:00000000000006ed $d
       stm32eforth.s:973    .text.reset_handler:00000000000006ee $t
       stm32eforth.s:1012   .text.reset_handler:0000000000000733 $d
       stm32eforth.s:1012   .text.reset_handler:0000000000000734 $t
       stm32eforth.s:1024   .text.reset_handler:0000000000000749 $d
       stm32eforth.s:1024   .text.reset_handler:000000000000074a $t
       stm32eforth.s:1086   .text.reset_handler:00000000000007a3 $d
       stm32eforth.s:1086   .text.reset_handler:00000000000007a4 $t
       stm32eforth.s:1100   .text.reset_handler:00000000000007b7 $d
       stm32eforth.s:1100   .text.reset_handler:00000000000007b8 $t
       stm32eforth.s:1111   .text.reset_handler:00000000000007c5 $d
       stm32eforth.s:1111   .text.reset_handler:00000000000007c6 $t
       stm32eforth.s:1122   .text.reset_handler:00000000000007d5 $d
       stm32eforth.s:1122   .text.reset_handler:00000000000007d6 $t
       stm32eforth.s:1133   .text.reset_handler:00000000000007e5 $d
       stm32eforth.s:1133   .text.reset_handler:00000000000007e6 $t
       stm32eforth.s:1166   .text.reset_handler:0000000000000815 $d
       stm32eforth.s:1166   .text.reset_handler:0000000000000816 $t
       stm32eforth.s:1200   .text.reset_handler:0000000000000849 $d
       stm32eforth.s:1200   .text.reset_handler:000000000000084a $t
       stm32eforth.s:1211   .text.reset_handler:0000000000000859 $d
       stm32eforth.s:1211   .text.reset_handler:000000000000085a $t
       stm32eforth.s:1222   .text.reset_handler:000000000000086b $d
       stm32eforth.s:1222   .text.reset_handler:000000000000086c $t
       stm32eforth.s:1261   .text.reset_handler:00000000000008a7 $d
       stm32eforth.s:1261   .text.reset_handler:00000000000008a8 $t
       stm32eforth.s:1274   .text.reset_handler:00000000000008bb $d
       stm32eforth.s:1274   .text.reset_handler:00000000000008bc $t
       stm32eforth.s:1301   .text.reset_handler:00000000000008e9 $d
       stm32eforth.s:1301   .text.reset_handler:00000000000008ea $t
       stm32eforth.s:1325   .text.reset_handler:000000000000090d $d
       stm32eforth.s:1325   .text.reset_handler:000000000000090e $t
       stm32eforth.s:1354   .text.reset_handler:000000000000093b $d
       stm32eforth.s:1354   .text.reset_handler:000000000000093c $t
       stm32eforth.s:1427   .text.reset_handler:00000000000009ab $d
       stm32eforth.s:1427   .text.reset_handler:00000000000009ac $t
       stm32eforth.s:1442   .text.reset_handler:00000000000009c3 $d
       stm32eforth.s:1442   .text.reset_handler:00000000000009c4 $t
       stm32eforth.s:1457   .text.reset_handler:00000000000009df $d
       stm32eforth.s:1457   .text.reset_handler:00000000000009e0 $t
       stm32eforth.s:1529   .text.reset_handler:0000000000000a3d $d
       stm32eforth.s:1529   .text.reset_handler:0000000000000a3e $t
       stm32eforth.s:1540   .text.reset_handler:0000000000000a53 $d
       stm32eforth.s:1540   .text.reset_handler:0000000000000a54 $t
       stm32eforth.s:1563   .text.reset_handler:0000000000000a7b $d
       stm32eforth.s:1563   .text.reset_handler:0000000000000a7c $t
       stm32eforth.s:1587   .text.reset_handler:0000000000000aa3 $d
       stm32eforth.s:1587   .text.reset_handler:0000000000000aa4 $t
       stm32eforth.s:1611   .text.reset_handler:0000000000000ac1 $d
       stm32eforth.s:1611   .text.reset_handler:0000000000000ac2 $t
       stm32eforth.s:1635   .text.reset_handler:0000000000000aeb $d
       stm32eforth.s:1635   .text.reset_handler:0000000000000aec $t
       stm32eforth.s:1684   .text.reset_handler:0000000000000b3d $d
       stm32eforth.s:1684   .text.reset_handler:0000000000000b3e $t
       stm32eforth.s:1707   .text.reset_handler:0000000000000b67 $d
ARM GAS  stm32eforth.s 			page 116


       stm32eforth.s:1707   .text.reset_handler:0000000000000b68 $t
       stm32eforth.s:1722   .text.reset_handler:0000000000000b81 $d
       stm32eforth.s:1722   .text.reset_handler:0000000000000b82 $t
       stm32eforth.s:1735   .text.reset_handler:0000000000000b9d $d
       stm32eforth.s:1735   .text.reset_handler:0000000000000b9e $t
       stm32eforth.s:1759   .text.reset_handler:0000000000000bd5 $d
       stm32eforth.s:1759   .text.reset_handler:0000000000000bd6 $t
       stm32eforth.s:1775   .text.reset_handler:0000000000000bed $d
       stm32eforth.s:1775   .text.reset_handler:0000000000000bee $t
       stm32eforth.s:1794   .text.reset_handler:0000000000000c1b $d
       stm32eforth.s:1794   .text.reset_handler:0000000000000c1c $t
       stm32eforth.s:1864   .text.reset_handler:0000000000000cc9 $d
       stm32eforth.s:1864   .text.reset_handler:0000000000000cca $t
       stm32eforth.s:1921   .text.reset_handler:0000000000000d43 $d
       stm32eforth.s:1921   .text.reset_handler:0000000000000d44 $t
       stm32eforth.s:1991   .text.reset_handler:0000000000000de3 $d
       stm32eforth.s:1991   .text.reset_handler:0000000000000de4 $t
       stm32eforth.s:2010   .text.reset_handler:0000000000000e09 $d
       stm32eforth.s:2010   .text.reset_handler:0000000000000e0a $t
       stm32eforth.s:2048   .text.reset_handler:0000000000000e51 $d
       stm32eforth.s:2048   .text.reset_handler:0000000000000e52 $t
       stm32eforth.s:2087   .text.reset_handler:0000000000000e9b $d
       stm32eforth.s:2087   .text.reset_handler:0000000000000e9c $t
       stm32eforth.s:2111   .text.reset_handler:0000000000000ecb $d
       stm32eforth.s:2111   .text.reset_handler:0000000000000ecc $t
       stm32eforth.s:2134   .text.reset_handler:0000000000000ef7 $d
       stm32eforth.s:2134   .text.reset_handler:0000000000000ef8 $t
       stm32eforth.s:2203   .text.reset_handler:0000000000000fb3 $d
       stm32eforth.s:2203   .text.reset_handler:0000000000000fb4 $t
       stm32eforth.s:2217   .text.reset_handler:0000000000000fd1 $d
       stm32eforth.s:2217   .text.reset_handler:0000000000000fd2 $t
       stm32eforth.s:2250   .text.reset_handler:000000000000101f $d
       stm32eforth.s:2250   .text.reset_handler:0000000000001020 $t
       stm32eforth.s:2268   .text.reset_handler:0000000000001043 $d
       stm32eforth.s:2268   .text.reset_handler:0000000000001044 $t
       stm32eforth.s:2286   .text.reset_handler:000000000000106b $d
       stm32eforth.s:2286   .text.reset_handler:000000000000106c $t
       stm32eforth.s:2355   .text.reset_handler:0000000000001103 $d
       stm32eforth.s:2355   .text.reset_handler:0000000000001104 $t
       stm32eforth.s:2509   .text.reset_handler:00000000000012db $d
       stm32eforth.s:2509   .text.reset_handler:00000000000012dc $t
       stm32eforth.s:2530   .text.reset_handler:000000000000130d $d
       stm32eforth.s:2530   .text.reset_handler:000000000000130e $t
       stm32eforth.s:2551   .text.reset_handler:000000000000133d $d
       stm32eforth.s:2551   .text.reset_handler:000000000000133e $t
       stm32eforth.s:2630   .text.reset_handler:00000000000013c7 $d
       stm32eforth.s:2630   .text.reset_handler:00000000000013c8 $t
       stm32eforth.s:2668   .text.reset_handler:0000000000001427 $d
       stm32eforth.s:2668   .text.reset_handler:0000000000001428 $t
       stm32eforth.s:2838   .text.reset_handler:000000000000160b $d
       stm32eforth.s:2838   .text.reset_handler:000000000000160c $t
       stm32eforth.s:2883   .text.reset_handler:000000000000166d $d
       stm32eforth.s:2883   .text.reset_handler:000000000000166e $t
       stm32eforth.s:2898   .text.reset_handler:0000000000001691 $d
       stm32eforth.s:2898   .text.reset_handler:0000000000001692 $t
       stm32eforth.s:3153   .text.reset_handler:000000000000190f $d
       stm32eforth.s:3153   .text.reset_handler:0000000000001910 $t
ARM GAS  stm32eforth.s 			page 117


       stm32eforth.s:3326   .text.reset_handler:0000000000001ac7 $d
       stm32eforth.s:3326   .text.reset_handler:0000000000001ac8 $t
       stm32eforth.s:3334   .text.reset_handler:0000000000001ae3 $d
       stm32eforth.s:3334   .text.reset_handler:0000000000001ae4 $t
       stm32eforth.s:3343   .text.reset_handler:0000000000001af1 $d
       stm32eforth.s:3343   .text.reset_handler:0000000000001af2 $t
       stm32eforth.s:3367   .text.reset_handler:0000000000001b33 $d
       stm32eforth.s:3367   .text.reset_handler:0000000000001b34 $t
       stm32eforth.s:3381   .text.reset_handler:0000000000001b47 $d
       stm32eforth.s:3381   .text.reset_handler:0000000000001b48 $t
       stm32eforth.s:3403   .text.reset_handler:0000000000001b73 $d
       stm32eforth.s:3403   .text.reset_handler:0000000000001b74 $t
       stm32eforth.s:3451   .text.reset_handler:0000000000001bc5 $d
       stm32eforth.s:3451   .text.reset_handler:0000000000001bc6 $t
       stm32eforth.s:3509   .text.reset_handler:0000000000001c5f $d
       stm32eforth.s:3509   .text.reset_handler:0000000000001c60 $t
       stm32eforth.s:3536   .text.reset_handler:0000000000001cb5 $d
       stm32eforth.s:3536   .text.reset_handler:0000000000001cb6 $t
       stm32eforth.s:3560   .text.reset_handler:0000000000001cfd $d
       stm32eforth.s:3560   .text.reset_handler:0000000000001cfe $t
       stm32eforth.s:3576   .text.reset_handler:0000000000001d2d $d
       stm32eforth.s:3576   .text.reset_handler:0000000000001d2e $t
       stm32eforth.s:3661   .text.reset_handler:0000000000001e2f $d
       stm32eforth.s:3661   .text.reset_handler:0000000000001e30 $t
       stm32eforth.s:3672   .text.reset_handler:0000000000001e45 $d
       stm32eforth.s:3672   .text.reset_handler:0000000000001e46 $t
       stm32eforth.s:3704   .text.reset_handler:0000000000001ea1 $d
       stm32eforth.s:3704   .text.reset_handler:0000000000001ea2 $t
       stm32eforth.s:3754   .text.reset_handler:0000000000001f37 $d
       stm32eforth.s:3754   .text.reset_handler:0000000000001f38 $t
       stm32eforth.s:3935   .text.reset_handler:00000000000020e5 $d
       stm32eforth.s:3935   .text.reset_handler:00000000000020e6 $t
       stm32eforth.s:3977   .text.reset_handler:0000000000002143 $d
       stm32eforth.s:3977   .text.reset_handler:0000000000002144 $t
       stm32eforth.s:4013   .text.reset_handler:00000000000021a3 $d
       stm32eforth.s:4013   .text.reset_handler:00000000000021a4 $t
       stm32eforth.s:4028   .text.reset_handler:00000000000021c5 $d
       stm32eforth.s:4028   .text.reset_handler:00000000000021c6 $t
       stm32eforth.s:4057   .text.reset_handler:0000000000002205 $d
       stm32eforth.s:4057   .text.reset_handler:0000000000002206 $t
       stm32eforth.s:4084   .text.reset_handler:0000000000002243 $d
       stm32eforth.s:4084   .text.reset_handler:0000000000002244 $t
       stm32eforth.s:4098   .text.reset_handler:000000000000225f $d
       stm32eforth.s:4098   .text.reset_handler:0000000000002260 $t
       stm32eforth.s:4112   .text.reset_handler:000000000000227b $d
       stm32eforth.s:4112   .text.reset_handler:000000000000227c $t
       stm32eforth.s:4185   .text.reset_handler:0000000000002335 $d
       stm32eforth.s:4185   .text.reset_handler:0000000000002336 $t
       stm32eforth.s:4359   .text.reset_handler:00000000000024fd $d
       stm32eforth.s:4359   .text.reset_handler:00000000000024fe $t
       stm32eforth.s:4431   .text.reset_handler:00000000000025cb $d
       stm32eforth.s:4431   .text.reset_handler:00000000000025cc $t
       stm32eforth.s:4451   .text.reset_handler:0000000000002605 $d
       stm32eforth.s:4451   .text.reset_handler:0000000000002606 $t
       stm32eforth.s:4497   .text.reset_handler:000000000000266d $d
       stm32eforth.s:4497   .text.reset_handler:000000000000266e $t
       stm32eforth.s:4537   .text.reset_handler:00000000000026e3 $d
ARM GAS  stm32eforth.s 			page 118


       stm32eforth.s:4537   .text.reset_handler:00000000000026e4 $t
       stm32eforth.s:4738   .text.reset_handler:00000000000028eb $d
       stm32eforth.s:4738   .text.reset_handler:00000000000028ec $t

UNDEFINED SYMBOLS
_mstack
