ARM GAS  stm32eforth.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  stm32eforth.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.p2align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.p2aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m3
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
ARM GAS  stm32eforth.s 			page 3


  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
ARM GAS  stm32eforth.s 			page 4


  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
  81              	
  82              	/* blue pill specific constants */ 
  83              	  .equ LED_GPIO, GPIOC_BASE_ADR
  84              	  .equ LED_PIN, 13
  85              	  .equ UART, USART1_BASE_ADR 
  86              	
  87              	/* eForth specific constants */
  88              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  89              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  90              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  91              	.equ UPP ,	0x20000000	/*start of user area (UP0) */
  92              	.equ DTOP ,	0x20000100	/*start of usable RAM area (HERE) */
  93              	.equ DEND , 0x20004E00  /*usable RAM end */
  94              	 .equ RAMOFFSET ,	0x20000000	// remap
  95              	 .equ RAMEND, 0x20005000 // 20Ko
  96              	 .equ FLASHOFFSET ,	0x08000c00	// remap
  97              	//.equ RAMOFFSET  ,	0x00000000	/* absolute */
  98              	//.equ MAPOFFSET  ,	0x00000000	/* absolute */
  99              	  .equ MAPOFFSET , (RAMOFFSET-FLASHOFFSET)
 100              	
 101              	/*************************************
 102              	   system variables offset from UPP
 103              	*************************************/
 104              	  .equ SEED_OFS, 4    // prng seed 
 105              	  .equ TICKS_OFS, SEED_OFS+4  // millseconds counter
ARM GAS  stm32eforth.s 			page 5


 106              	  .equ TIMER_OFS, TICKS_OFS+4  // count down timer
 107              	  .equ TORAM_OFS, TIMER_OFS+4  // compile to RAM 
 108              	  .equ IMG_SIGN_OFS, TORAM_OFS+4  // image signature  
 109              	  .equ BOOT_OFS, IMG_SIGN_OFS+4  // boot program address
 110              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
 111              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
 112              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
 113              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
 114              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
 115              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
 116              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
 117              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
 118              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
 119              	  .equ FORTH_CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
 120              	  .equ USER_CTOP_OFS, FORTH_CTOP_OFS+4  // ram free dictionary address
 121              	  .equ LASTN_OFS, USER_CTOP_OFS+4     // last word in dictionary link nfa 
 122              	  .equ VARS_END_OFS, LASTN_OFS+4 // end of system variables  
 123              	
 124              	/***********************************************
 125              	* MACROS
 126              	*	Assemble inline direct threaded code ending.
 127              	***********************************************/
 128              	 	.macro	_NEXT /*end low level word */
 129              		BX	LR
 130              		.endm
 131              	
 132              	 	.macro	_NEST /*start high level word */
 133              		STMFD	R2!,{LR}
 134              		.endm
 135              	
 136              	 	.macro	_UNNEST	/*end high level word */
 137              		LDMFD	R2!,{PC}
 138              		.endm
 139              	
 140              	 	.macro	_DOLIT /*long literals */
 141              		BL	DOLIT
 142              		.endm
 143              	
 144              	 	.macro	_PUSH	/*push R5 on data stack*/
 145              		STR	R5,[R1,#-4]!
 146              		.endm
 147              	
 148              	 	.macro	_POP /*pop data stack to R5 */
 149              		LDR	R5,[R1],#4
 150              		.endm
 151              	
 152              	/*************************************
 153              	*   interrupt service vectors table 
 154              	**************************************/
 155              	   .section  .isr_vector,"a",%progbits
 156              	  .type  isr_vectors, %object
 157              	
 158              	isr_vectors:
 159 0000 00000000 	  .word   _mstack          /* main return stack address */
 160 0004 00000000 	  .word   reset_handler    /* startup address */
 161              	/* core interrupts || exceptions */
 162 0008 00000000 	  .word   default_handler  /*  NMI */
ARM GAS  stm32eforth.s 			page 6


 163 000c 00000000 	  .word   default_handler  /*  HardFault */
 164 0010 00000000 	  .word   default_handler  /*  Memory Management */
 165 0014 00000000 	  .word   default_handler  /* Bus fault */
 166 0018 00000000 	  .word   default_handler  /* Usage fault */
 167 001c 00000000 	  .word   0
 168 0020 00000000 	  .word   0
 169 0024 00000000 	  .word   0
 170 0028 00000000 	  .word   0
 171 002c 00000000 	  .word   default_handler  /* SWI instruction */
 172 0030 00000000 	  .word   default_handler  /* Debug monitor */
 173 0034 00000000 	  .word   0
 174 0038 00000000 	  .word   default_handler  /* PendSV */
 175 003c 00000000 	  .word   systick_handler  /* Systick */
 176              	  
 177              	  /* External Interrupts */
 178 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 179 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 180 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 181 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 182 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 183 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 184 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 185 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 186 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 187 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 188 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 189 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 190 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 191 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 192 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 193 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 194 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 195 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 196 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 197 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 198 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 199 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 200 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 201 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 202 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 203 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 204 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 205 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 206 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 207 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 208 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 209 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 210 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 211 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 212 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 213 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 214 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 215 00d4 00000000 	  .word      default_handler /* IRQ37, USART1 */                   
 216 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 217 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 218 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 219 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
ARM GAS  stm32eforth.s 			page 7


 220 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 221 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 222 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 223 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 224 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 225 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 226 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 227 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 228 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 229 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 230 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 231 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 232 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 233 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 234 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 235 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 236 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 237 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 238              	
 239              	  .size  isr_vectors, .-isr_vectors
 240              	
 241              	/*****************************************************
 242              	* default isr handler called on unexpected interrupt
 243              	*****************************************************/
 244              	    .section  .text.default_handler,"ax",%progbits
 245              	
 246              	  .type default_handler, %function
 247              	  .p2align 2 
 248              	  .global default_handler
 249              	default_handler:
 250 0000 DFF81870 		ldr r7,exception_msg 
 251 0004 17F8010B 		ldrb r0,[r7],#1 
 252 0008 41F8045D 	1:	_PUSH 
 253 000c 17F8015B 		ldrb r5,[r7],#1
 254 0010 00F0ACFA 		bl EMIT 
 255 0014 0138     		subs r0,r0,#1 
 256 0016 F7D1     		bne 1b 	
 257 0018 FFF7FEBF 		b reset_handler   
 258              	  .size  default_handler, .-default_handler
 259              	exception_msg:
 260 001c 20000000 		.word .+4 
 261 0020 12       		.byte 18
 262 0021 0A0D6578 		.ascii "\n\rexeption reboot!"
 262      65707469 
 262      6F6E2072 
 262      65626F6F 
 262      7421
 263 0033 00       		.p2align 2
 264              	
 265              	/*********************************
 266              		system milliseconds counter
 267              	*********************************/	
 268              	  .type systick_handler, %function
 269              	  .p2align 2 
 270              	  .global systick_handler
 271              	systick_handler:
 272 0034 4FF00003 	  mov r3,#UPP&0xffff
ARM GAS  stm32eforth.s 			page 8


 273 0038 C2F20003 	  movt r3,#UPP>>16  	
 274 003c 9868     	  ldr r0,[r3,#TICKS_OFS]  
 275 003e 00F10100 	  add r0,#1
 276 0042 9860     	  str r0,[r3,#TICKS_OFS]
 277 0044 D868     	  ldr r0,[r3,#TIMER_OFS]
 278 0046 10B1     	  cbz r0, systick_exit
 279 0048 A0F10100 	  sub r0,#1
 280 004c D860     	  str r0,[r3,#TIMER_OFS]
 281              	systick_exit:
 282 004e 7047     	  bx lr
 283              	
 284              	
 285              	/**************************************
 286              	  reset_handler execute at MCU reset
 287              	***************************************/
 288              	    .section  .text.reset_handler
 289              	  .type  reset_handler, %function
 290              	  .p2align 2 
 291              	  .global reset_handler
 292              	reset_handler:
 293 0000 00F070F8 		bl	remap 
 294 0004 00F006F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 295              	//	bl	UNLOCK			/* unlock flash memory */
 296 0008 0148     		ldr r0,forth_entry
 297 000a 40F00100 		orr r0,#1
 298 000e 0047     		bx r0 
 299              	forth_entry:
 300 0010 F81B0018 		.word COLD+MAPOFFSET 
 301              	
 302              	  .type init_devices, %function
 303              	  .p2align 2 
 304              	init_devices:
 305              	/* init clock to HSE 72 Mhz */
 306              	/* set 2 wait states in FLASH_ACR_LATENCY */
 307 0014 4FF40050 		mov r0,#FLASH_BASE_ADR&0xffff
 308 0018 C4F20200 		movt r0,#FLASH_BASE_ADR>>16 
 309 001c 4FF01202 	  mov r2,#0x12
 310 0020 0260     	  str r2,[r0,#FLASH_ACR]
 311              	/* configure clock for HSE, 8 Mhz crystal */
 312              	/* enable HSE in RCC_CR */
 313 0022 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 314 0026 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 315 002a 0168     	  ldr r1,[r0,#RCC_CR]
 316 002c 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 317 0030 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 318              	/* wait HSERDY loop */
 319              	wait_hserdy:
 320 0032 0168     	  ldr r1,[r0,#RCC_CR]
 321 0034 11F4003F 	  tst r1,#(1<<17)
 322 0038 FBD0     	  beq wait_hserdy
 323              	
 324              	/************************************************* 
 325              	   configure PLL mul factor and source 
 326              	   SYSCLOCK=72 Mhz
 327              	   select HSE as  PLL source clock
 328              	   multiply frequency by 9 
 329              	   APB1 clock is limited to 36 Mhz so divide by 2 
ARM GAS  stm32eforth.s 			page 9


 330              	****************************************************/
 331 003a 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 332 003e C0F21D01 	  movt r1,#(7<<2)|1
 333 0042 4160     	  str r1,[r0,#RCC_CFGR]
 334              	  /* enable PLL */
 335 0044 0168     	  ldr r1,[r0,#RCC_CR]
 336 0046 41F08071 	  orr r1, #1<<24 
 337 004a 0160     	  str r1,[r0,#RCC_CR]
 338              	/* wait for PLLRDY */
 339              	wait_pllrdy:
 340 004c 0168     	  ldr r1,[r0,#RCC_CR]
 341 004e 11F0007F 	  tst r1,#(1<<25)
 342 0052 FBD0     	  beq wait_pllrdy 
 343              	/* select PLL as sysclock */
 344 0054 4168     	  ldr r1,[r0,#RCC_CFGR]
 345 0056 4FF6FC72 	  mov r2,#0xfffc
 346 005a CFF6FF72 	  movt r2,#0xffff
 347 005e 01EA0201 	  and r1,r1,r2 
 348 0062 4FF00202 	  mov r2,#2
 349 0066 41EA0201 	  orr r1,r1,r2
 350 006a 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 351              	/* wait for SWS==2 */
 352              	wait_sws:
 353 006c 4168     	  ldr r1,[r0,#RCC_CFGR]
 354 006e 11F0080F 	  tst r1,#(2<<2)
 355 0072 FBD0     	  beq wait_sws
 356              	/* now sysclock is 72 Mhz */
 357              	
 358              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 359 0074 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 360 0078 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 361 007c 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 362 0080 8161     	  str	r1, [r0, #RCC_APB2ENR]
 363              	
 364              	/* configure GPIOC:13 as output for user LED */
 365 0082 4FF48050 	  mov r0,#GPIOC_BASE_ADR&0xffff
 366 0086 C4F20100 	  movt r0,#GPIOC_BASE_ADR>>16
 367 008a 4168     	  ldr r1,[r0,#GPIO_CRH]
 368 008c 6FF47002 	  mvn r2,#(15<<20)
 369 0090 01EA0201 	  and r1,r1,r2
 370 0094 4FF4C002 	  mov r2,#(6<<20)
 371 0098 41EA0201 	  orr r1,r1,r2
 372 009c 4160     	  str r1,[r0,#GPIO_CRH]
 373              	
 374              	/* configure USART1 */
 375              	/* set GPIOA PIN 9, uart TX  */
 376 009e 4FF40060 	  mov r0,#GPIOA_BASE_ADR&0XFFFF
 377 00a2 C4F20100 	  movt r0,#GPIOA_BASE_ADR>>16	
 378 00a6 4168     	  ldr r1,[r0,#GPIO_CRH]
 379 00a8 6FF0F002 	  mvn r2,#(15<<4)
 380 00ac 01EA0201 	  and r1,r1,r2
 381 00b0 4FF0A002 	  mov r2,#(0xA<<4)
 382 00b4 41EA0201 	  orr r1,r1,r2 
 383 00b8 4160     	  str r1,[r0,#GPIO_CRH]
 384              	
 385 00ba 4FF46050 	  mov r0,#UART&0xFFFF
 386 00be C4F20100 	  movt r0,#UART>>16	
ARM GAS  stm32eforth.s 			page 10


 387              	/* BAUD rate */
 388 00c2 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 389 00c6 8160     	  str r1,[r0,#USART_BRR]
 390 00c8 42F20C01 	  mov r1,#(3<<2)+(1<<13)
 391 00cc C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 392              	/* configure systicks for 1msec ticks */
 393 00ce 4EF21000 	  mov r0,#STK_BASE_ADR&0xFFFF
 394 00d2 CEF20000 	  movt r0,#STK_BASE_ADR>>16	
 395 00d6 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 396 00da 4160     	  str r1,[r0,#STK_LOAD]
 397 00dc 4FF00301 	  mov r1,#3
 398 00e0 0160     	  str r1,[r0,STK_CTL]
 399 00e2 7047     	  _NEXT  
 400              	
 401              	/* copy system to RAM */ 
 402              		.type remap, %function 
 403              	
 404              	remap:
 405 00e4 DFF83400 		ldr r0,remap_dest  
 406 00e8 0B49     		ldr r1,remap_src 
 407 00ea 42F27042 		mov r2,#CTOP-UZERO 
 408 00ee 02F10302 		add r2,r2,#3
 409 00f2 22F00302 		and r2,r2,#~3 
 410 00f6 51F8043B 	1:	ldr r3,[r1],#4 
 411 00fa 40F8043B 		str r3,[r0],#4 
 412 00fe 043A     		subs R2,#4 
 413 0100 F9D1     		bne 1b
 414              	// zero end of RAM 
 415 0102 4FF4A042 		mov r2,#0x5000
 416 0106 C2F20002 		movt r2,#0x2000
 417 010a 83EA0303 		eor r3,r3,r3 
 418 010e 40F8043B 	2:  str r3,[r0],#4
 419 0112 9042     		cmp r0,r2 
 420 0114 FBDB     		blt 2b 
 421 0116 7047     		_NEXT 
 422              	remap_src:
 423 0118 00040000 		.word UZERO 
 424              	remap_dest:
 425 011c 00000020 		.word RAMOFFSET 
 426              	
 427              	/********************
 428              	* Version control
 429              	*******************/
 430              	.equ VER ,	0x01	/*major release version */
 431              	.equ EXT ,	0x00	/*minor extension */
 432              	
 433              	/* Constants */
 434              	
 435              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 436              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 437              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 438              	
 439              	.equ CELLL ,	4	/*size of a cell */
 440              	.equ BASEE ,	10	/*default radix */
 441              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 442              	
 443              	.equ BKSPP ,	8	/*backspace */
ARM GAS  stm32eforth.s 			page 11


 444              	.equ LF ,	10	  /*line feed */
 445              	.equ CRR ,	13	/*carriage return */
 446              	.equ ERR ,	27	/*error escape */
 447              	.equ TIC ,	39	/*tick */
 448              	
 449              	/********************************************************
 450              	* RAM memory mapping
 451              	* 	0x20000000	RAM base address
 452              	*	0x20000000  system variables	
 453              	* 	0x20000100	Forth dictionary
 454              	* 	0x2000????	top of dictionary, HERE
 455              	* 	0x2000????	WORD buffer, HERE+16
 456              	*   0x20004E00  end of user space
 457              	* 	0x20004E80	top of data stack  R2
 458              	* 	0x20004E80	TIB terminal input buffer
 459              	* 	0x20004F80	top of return stack  R1
 460              	* 	0x20005000	top of hardware stack for interrupts R14
 461              	********************************************************/
 462              	
 463              	
 464              	/******************************************************
 465              	*  COLD start moves the following to USER variables.
 466              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 467              	******************************************************/
 468 0120 AFF30080 		.p2align 10
 468      AFF30080 
 468      AFF30080 
 468      AFF30080 
 468      AFF30080 
 469              	
 470              	UZERO:
 471 0400 00000000 		.word 0  			/*Reserved */
 472 0404 55AA0000 		.word 0xaa55 /* SEED  */ 
 473 0408 00000000 		.word 0      /* MSEC */
 474 040c 00000000 	    .word 0     /* TIMER */
 475 0410 FFFFFFFF 		.word -1    /* >RAM */ 
 476 0414 494D4147 		.ascii "IMAG" /* signature */ 
 477 0418 841B0018 		.word HI+MAPOFFSET  /*'BOOT */
 478 041c 0A000000 		.word BASEE 	/*BASE */
 479 0420 00000000 		.word 0			/*tmp */
 480 0424 00000000 		.word 0			/*SPAN */
 481 0428 00000000 		.word 0			/*>IN */
 482 042c 00000000 		.word 0			/*#TIB */
 483 0430 804E0020 		.word TIBB	/*TIB */
 484 0434 440E0018 		.word INTER+MAPOFFSET	/*'EVAL */
 485 0438 00000000 		.word 0			/*HLD */
 486 043c F01B0018 		.word LASTN+MAPOFFSET	/*CONTEXT */
 487 0440 701C0018 		.word CTOP+MAPOFFSET	/* FCP end of system dictionnary */
 488 0444 701C0018 		.word CTOP+MAPOFFSET	/* CP end of RAM dictionary RAM */
 489 0448 F01B0018 		.word LASTN+MAPOFFSET	/*LAST word in dictionary */
 490 044c 00000000 		.word 0,0			/*reserved */
 490      00000000 
 491              	ULAST:
 492              	
 493              	
 494              	/***********************************
 495              	//  Start of Forth dictionary
ARM GAS  stm32eforth.s 			page 12


 496              	***********************************/
 497              	
 498              		.p2align 2 
 499              	
 500              	// RANDOM ( n1 -- {0..n1-1} )
 501              	// return pseudo random number 
 502              	// REF: https://en.wikipedia.org/wiki/Xorshift
 503              	
 504 0454 00000000 		.word 0
 505 0458 06       	_RAND: .byte 6
 506 0459 52414E44 		.ascii "RANDOM"
 506      4F4D
 507 045f 00       		.p2align 2 
 508              	RAND:
 509 0460 42F804ED 		_NEST 
 510 0464 00F0EEFA 		bl SEED 
 511 0468 00F0D2F8 		bl AT 
 512 046c 4FEA4534 		lsl r4,r5,#13
 513 0470 85EA0405 		eor r5,r4
 514 0474 4FEA5544 		lsr r4,r5,#17
 515 0478 85EA0405 		eor r5,r4
 516 047c 4FEA4514 		lsl r4,r5,#5
 517 0480 85EA0405 		eor r5,r4
 518 0484 00F008F9 		bl DUPP 
 519 0488 00F0DCFA 		bl SEED 
 520 048c 00F0B6F8 		bl STORE 
 521 0490 00F036FA 		bl ABSS
 522 0494 00F008F9 		bl SWAP 
 523 0498 00F02AFC 		bl MODD 
 524 049c 52F804FB 		_UNNEST 
 525              	
 526              	// REBOOT ( -- )
 527              	// hardware reset 
 528 04a0 58F8FF17 		.word _RAND+MAPOFFSET
 529 04a4 06       	_REBOOT: .byte 6
 530 04a5 5245424F 		.ascii "REBOOT"
 530      4F54
 531 04ab 00       		.p2align 2 
 532              	REBOOT:
 533 04ac 0348     		ldr r0,scb_adr 
 534 04ae C168     		ldr r1,[r0,#SCB_AIRCR]
 535 04b0 41F00401 		orr r1,#(1<<2)
 536 04b4 C0F2FA51 		movt r1,#SCB_VECTKEY
 537 04b8 C160     		str r1,[r0,#SCB_AIRCR]
 538 04ba FEE7     		b . 
 539              	scb_adr:
 540 04bc 00ED00E0 		.word SCB_BASE_ADR 
 541              	
 542              	// PAUSE ( u -- ) 
 543              	// suspend execution for u milliseconds
 544 04c0 A4F8FF17 		.word _REBOOT+MAPOFFSET
 545 04c4 05       	_PAUSE: .byte 5
 546 04c5 50415553 		.ascii "PAUSE"
 546      45
 547 04ca 00BF     		.p2align 2
 548              	PAUSE:
 549 04cc 42F804ED 		_NEST 
ARM GAS  stm32eforth.s 			page 13


 550 04d0 00F0CCFA 		BL TIMER 
 551 04d4 00F092F8 		BL STORE 
 552              	PAUSE_LOOP:
 553 04d8 00F0C8FA 		BL TIMER 
 554 04dc 00F098F8 		BL AT 
 555 04e0 00F070F8 		BL QBRAN 
 556 04e4 F0040000 		.word PAUSE_EXIT 
 557 04e8 00F078F8 		BL BRAN 
 558 04ec D8040000 		.word PAUSE_LOOP 
 559              	PAUSE_EXIT: 		
 560 04f0 52F804FB 		_UNNEST 
 561              	
 562              	//  ULED ( T|F -- )
 563              	// control user LED, -1 ON, 0 OFF  
 564 04f4 C4F8FF17 		.word _PAUSE + MAPOFFSET
 565 04f8 04       	_ULED: .byte 4
 566 04f9 554C4544 		.ascii "ULED"
 567 04fd 0000BF   		.p2align 2
 568              		.type ULED, %function 
 569              	ULED:
 570 0500 4FF40056 		mov r6,#(1<<LED_PIN)
 571 0504 4FF48054 		mov r4,#LED_GPIO&0xffff
 572 0508 C4F20104 		movt r4,#LED_GPIO>>16
 573 050c 2800     		movs r0,r5 
 574 050e 51F8045B 		_POP
 575 0512 01D0     		beq ULED_OFF 
 576 0514 6661     		str r6,[r4,#GPIO_BRR]
 577 0516 7047     		_NEXT 
 578              	ULED_OFF:
 579 0518 2661     		str r6,[r4,#GPIO_BSRR]
 580 051a 7047     		_NEXT 
 581              		
 582              	//    ?RX	 ( -- c T | F )
 583              	// 	Return input character and true, or a false if no input.
 584 051c F8F8FF17 		.word	_ULED+MAPOFFSET
 585 0520 04       	_QRX:	.byte   4
 586 0521 3F4B4559 		.ascii "?KEY"
 587 0525 0000BF   		.p2align 2 
 588              	QKEY:
 589              	QRX: 
 590 0528 41F8045D 		_PUSH
 591 052c 4FF46054 		mov r4,#UART&0xFFFF
 592 0530 C4F20104 		movt r4,#UART>>16
 593 0534 2688     		ldrh	r6, [r4, #USART_SR]
 594 0536 16F02006 		ands	r6, #0x20		//  RXE
 595 053a 05D0     		BEQ	QRX1
 596 053c 6568     	 	LDR	R5, [R4, #USART_DR]
 597 053e 41F8045D 		_PUSH
 598 0542 18BF     	    IT NE 
 599 0544 6FF00005 		MVNNE	R5,#0
 600              	QRX1:
 601 0548 08BF     		IT EQ 
 602 054a 0025     	    MOVEQ	R5,#0
 603 054c 7047     		_NEXT
 604 054e 00BF     		.p2align 2 
 605              	
 606              	//    TX!	 ( c -- )
ARM GAS  stm32eforth.s 			page 14


 607              	// 	Send character c to the output device.
 608              	
 609 0550 20F9FF17 		.word	_QRX+MAPOFFSET
 610 0554 04       	_TXSTO:	.byte 4
 611 0555 454D4954 		.ascii "EMIT"
 612 0559 0000BF   		.p2align 2 	
 613              	TXSTO:
 614              	EMIT:
 615              	TECHO:
 616 055c 4FF46054 		mov r4,#UART&0xFFFF
 617 0560 C4F20104 		movt r4,#UART>>16
 618              	TX1:
 619 0564 2688     		ldrh	r6, [r4, #USART_SR]	
 620 0566 16F08006 		ands	r6, #0x80		//  TXE bit 
 621 056a FBD0     		beq	TX1
 622 056c A580     		strh	r5, [r4, #USART_DR]	
 623 056e 51F8045B 		_POP
 624 0572 7047     		_NEXT
 625              		
 626              	// **************************************************************************
 627              	//  The kernel
 628              	
 629              	//    NOP	( -- )
 630              	// 	do nothing.
 631              	
 632 0574 54F9FF17 		.word	_TXSTO+MAPOFFSET
 633 0578 03       	_NOP:	.byte   3
 634 0579 4E4F50   		.ascii "NOP"
 635              		.p2align 2 	
 636              	NOP:
 637 057c 7047     		_NEXT
 638              	 
 639              	
 640              	//    doLIT	( -- w )
 641              	// 	Push an inline literal.
 642              	
 643              	// 	.word	_NOP+MAPOFFSET
 644              	// _LIT	.byte   COMPO+5
 645              	// 	.ascii "doLIT"
 646              	// 	.p2align 2 	
 647              	DOLIT:
 648 057e 41F8045D 		_PUSH				//  store R5 on data stack
 649 0582 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 650 0586 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 651 058a 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 652 058e 7047     		_NEXT
 653              	
 654              	//    EXECUTE	( ca -- )
 655              	// 	Execute the word at ca.
 656              	
 657 0590 78F9FF17 		.word	_NOP+MAPOFFSET
 658 0594 07       	_EXECU:	.byte   7
 659 0595 45584543 		.ascii "EXECUTE"
 659      555445
 660              		.p2align 2 	
 661              	EXECU:
 662 059c 45F00104 		ORR	R4,R5,#1		//  b0=1 
ARM GAS  stm32eforth.s 			page 15


 663 05a0 51F8045B 		_POP
 664 05a4 2047     		BX	R4
 665              	
 666              	//    next	( -- ) counter on R:
 667              	// 	Run time code for the single index loop.
 668              	// 	: next ( -- ) \ hilevel model
 669              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 670              	
 671              	// 	.word	_EXECU+MAPOFFSET
 672              	// _DONXT	.byte   COMPO+4
 673              	// 	.ascii "next"
 674              	// 	.p2align 2 	
 675              	DONXT:
 676 05a6 1468     		LDR	R4,[R2]   // ( -- u )  
 677 05a8 24B9     		CBNZ R4,NEXT1 
 678              		/* loop done */
 679 05aa 02F10402 		ADD	R2,R2,#4 // drop counter 
 680 05ae 0EF1040E 		ADD	LR,LR,#4 // skip after loop address 
 681 05b2 7047     		_NEXT
 682              	NEXT1:
 683              		/* decrement loop counter */
 684 05b4 A4F10104 		SUB	R4,R4,#1
 685 05b8 1460     		STR	R4,[R2]
 686 05ba 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 687 05be 4EF0010E 		ORR	LR,LR,#1 // begining of loop
 688 05c2 7047     		_NEXT
 689              	
 690              	//    ?branch	( f -- )
 691              	// 	Branch if flag is zero.
 692              	
 693              	// 	.word	_DONXT+MAPOFFSET
 694              	// _QBRAN	.byte   COMPO+7
 695              	// 	.ascii "?branch"
 696              	// 	.p2align 2 	
 697              	QBRAN:
 698 05c4 2C00     		MOVS	R4,R5
 699 05c6 51F8045B 		_POP
 700 05ca 04D1     		BNE	QBRAN1
 701 05cc 5EF801EC 		LDR	LR,[LR,#-1]
 702 05d0 4EF0010E 		ORR LR,LR,#1
 703 05d4 7047     		_NEXT
 704              	QBRAN1:
 705 05d6 0EF1040E 	 	ADD	LR,LR,#4
 706 05da 7047     		_NEXT
 707              	
 708              	//    branch	( -- )
 709              	// 	Branch to an inline address.
 710              	
 711              	// 	.word	_QBRAN+MAPOFFSET
 712              	// _BRAN	.byte   COMPO+6
 713              	// 	.ascii "branch"
 714              	// 	.p2align 2 	
 715              	BRAN:
 716 05dc 5EF801EC 		LDR	LR,[LR,#-1]
 717 05e0 4EF0010E 		ORR	LR,LR,#1
 718 05e4 7047     		_NEXT
 719              	
ARM GAS  stm32eforth.s 			page 16


 720              	//    EXIT	(  -- )
 721              	// 	Exit the currently executing command.
 722              	
 723 05e6 94F9FF17 		.word	_EXECU+MAPOFFSET
 724 05ea 04       	_EXIT:	.byte   4
 725 05eb 45584954 		.ascii "EXIT"
 726 05ef 00       		.p2align 2 	
 727              	EXIT:
 728 05f0 52F804FB 		_UNNEST
 729              	
 730              	//    !	   ( w a -- )
 731              	// 	Pop the data stack to memory.
 732              	
 733 05f4 EAF9FF17 		.word	_EXIT+MAPOFFSET
 734 05f8 01       	_STORE:	.byte   1
 735 05f9 21       		.ascii "!"
 736 05fa 00BF     		.p2align 2 	
 737              	STORE:
 738 05fc 51F8044B 		LDR	R4,[R1],#4
 739 0600 2C60     		STR	R4,[R5]
 740 0602 51F8045B 		_POP
 741 0606 7047     		_NEXT
 742              	
 743              	//    @	   ( a -- w )
 744              	// 	Push memory location to the data stack.
 745              	
 746 0608 F8F9FF17 		.word	_STORE+MAPOFFSET
 747 060c 01       	_AT:	.byte   1
 748 060d 40       		.ascii "@"
 749 060e 00BF     		.p2align 2 	
 750              	AT:
 751 0610 2D68     		LDR	R5,[R5]
 752 0612 7047     		_NEXT
 753              	
 754              	//    C!	  ( c b -- )
 755              	// 	Pop the data stack to byte memory.
 756              	
 757 0614 0CFAFF17 		.word	_AT+MAPOFFSET
 758 0618 02       	_CSTOR:	.byte   2
 759 0619 4321     		.ascii "C!"
 760 061b 00       		.p2align 2 	
 761              	CSTOR:
 762 061c 51F8044B 		LDR	R4,[R1],#4
 763 0620 2C70     		STRB	R4,[R5]
 764 0622 51F8045B 		_POP
 765 0626 7047     		_NEXT
 766              	
 767              	//    C@	  ( b -- c )
 768              	// 	Push byte memory location to the data stack.
 769              	
 770 0628 18FAFF17 		.word	_CSTOR+MAPOFFSET
 771 062c 02       	_CAT:	.byte   2
 772 062d 4340     		.ascii "C@"
 773 062f 00       		.p2align 2 	
 774              	CAT:
 775 0630 2D78     		LDRB	R5,[R5]
 776 0632 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 17


 777              	
 778              	//    R>	  ( -- w )
 779              	// 	Pop the return stack to the data stack.
 780              	
 781 0634 2CFAFF17 		.word	_CAT+MAPOFFSET
 782 0638 02       	_RFROM:	.byte   2
 783 0639 523E     		.ascii "R>"
 784 063b 00       		.p2align 2 	
 785              	RFROM:
 786 063c 41F8045D 		_PUSH
 787 0640 52F8045B 		LDR	R5,[R2],#4
 788 0644 7047     		_NEXT
 789              	
 790              	//    R@	  ( -- w )
 791              	// 	Copy top of return stack to the data stack.
 792              	
 793 0646 38FAFF17 		.word	_RFROM+MAPOFFSET
 794 064a 02       	_RAT:	.byte   2
 795 064b 5240     		.ascii "R@"
 796 064d 0000BF   		.p2align 2 	
 797              	RAT:
 798 0650 41F8045D 		_PUSH
 799 0654 1568     		LDR	R5,[R2]
 800 0656 7047     		_NEXT
 801              	
 802              	//    >R	  ( w -- )
 803              	// 	Push the data stack to the return stack.
 804              	
 805 0658 4AFAFF17 		.word	_RAT+MAPOFFSET
 806 065c 42       	_TOR:	.byte   COMPO+2
 807 065d 3E52     		.ascii ">R"
 808 065f 00       		.p2align 2 	
 809              	TOR:
 810 0660 42F8045D 		STR	R5,[R2,#-4]!
 811 0664 51F8045B 		_POP
 812 0668 7047     		_NEXT
 813              	
 814              	//    SP@	 ( -- a )
 815              	// 	Push the current data stack pointer.
 816              	
 817 066a 5CFAFF17 		.word	_TOR+MAPOFFSET
 818 066e 03       	_SPAT:	.byte   3
 819 066f 535040   		.ascii "SP@"
 820 0672 00BF     		.p2align 2 	
 821              	SPAT:
 822 0674 41F8045D 		_PUSH
 823 0678 0D46     		MOV	R5,R1
 824 067a 7047     		_NEXT
 825              	
 826              	//    DROP	( w -- )
 827              	// 	Discard top stack item.
 828              	
 829 067c 6EFAFF17 		.word	_SPAT+MAPOFFSET
 830 0680 04       	_DROP:	.byte   4
 831 0681 44524F50 		.ascii "DROP"
 832 0685 0000BF   		.p2align 2 	
 833              	DROP:
ARM GAS  stm32eforth.s 			page 18


 834 0688 51F8045B 		_POP
 835 068c 7047     		_NEXT
 836              	
 837              	//    DUP	 ( w -- w w )
 838              	// 	Duplicate the top stack item.
 839              	
 840 068e 80FAFF17 		.word	_DROP+MAPOFFSET
 841 0692 03       	_DUPP:	.byte   3
 842 0693 445550   		.ascii "DUP"
 843 0696 00BF     		.p2align 2 	
 844              	DUPP:
 845 0698 41F8045D 		_PUSH
 846 069c 7047     		_NEXT
 847              	
 848              	//    SWAP	( w1 w2 -- w2 w1 )
 849              	// 	Exchange top two stack items.
 850              	
 851 069e 92FAFF17 		.word	_DUPP+MAPOFFSET
 852 06a2 04       	_SWAP:	.byte   4
 853 06a3 53574150 		.ascii "SWAP"
 854 06a7 00       		.p2align 2 	
 855              	SWAP:
 856 06a8 0C68     		LDR	R4,[R1]
 857 06aa 0D60     		STR	R5,[R1]
 858 06ac 2546     		MOV	R5,R4
 859 06ae 7047     		_NEXT
 860              	
 861              	//    OVER	( w1 w2 -- w1 w2 w1 )
 862              	// 	Copy second stack item to top.
 863              	
 864 06b0 A2FAFF17 		.word	_SWAP+MAPOFFSET
 865 06b4 04       	_OVER:	.byte   4
 866 06b5 4F564552 		.ascii "OVER"
 867 06b9 0000BF   		.p2align 2 	
 868              	OVER:
 869 06bc 41F8045D 		_PUSH
 870 06c0 4D68     		LDR	R5,[R1,#4]
 871 06c2 7047     		_NEXT
 872              	
 873              	//    0<	  ( n -- t )
 874              	// 	Return true if n is negative.
 875              	
 876 06c4 B4FAFF17 		.word	_OVER+MAPOFFSET
 877 06c8 02       	_ZLESS:	.byte   2
 878 06c9 303C     		.ascii "0<"
 879 06cb 00       		.p2align 2 	
 880              	ZLESS:
 881 06cc 4FF00004 		MOV	R4,#0
 882 06d0 04EB2505 		ADD	R5,R4,R5,ASR #32
 883 06d4 7047     		_NEXT
 884              	
 885              	//    AND	 ( w w -- w )
 886              	// 	Bitwise AND.
 887              	
 888 06d6 C8FAFF17 		.word	_ZLESS+MAPOFFSET
 889 06da 03       	_ANDD:	.byte   3
 890 06db 414E44   		.ascii "AND"
ARM GAS  stm32eforth.s 			page 19


 891 06de 00BF     		.p2align 2 	
 892              	ANDD:
 893 06e0 51F8044B 		LDR	R4,[R1],#4
 894 06e4 05EA0405 		AND	R5,R5,R4
 895 06e8 7047     		_NEXT
 896              	
 897              	//    OR	  ( w w -- w )
 898              	// 	Bitwise inclusive OR.
 899              	
 900 06ea DAFAFF17 		.word	_ANDD+MAPOFFSET
 901 06ee 02       	_ORR:	.byte   2
 902 06ef 4F52     		.ascii "OR"
 903 06f1 0000BF   		.p2align 2 	
 904              	ORR:
 905 06f4 51F8044B 		LDR	R4,[R1],#4
 906 06f8 45EA0405 		ORR	R5,R5,R4
 907 06fc 7047     		_NEXT
 908              	
 909              	//    XOR	 ( w w -- w )
 910              	// 	Bitwise exclusive OR.
 911              	
 912 06fe EEFAFF17 		.word	_ORR+MAPOFFSET
 913 0702 03       	_XORR:	.byte   3
 914 0703 584F52   		.ascii "XOR"
 915 0706 00BF     		.p2align 2 	
 916              	XORR:
 917 0708 51F8044B 		LDR	R4,[R1],#4
 918 070c 85EA0405 		EOR	R5,R5,R4
 919 0710 7047     		_NEXT
 920              	
 921              	//    UM+	 ( w w -- w cy )
 922              	// 	Add two numbers, return the sum and carry flag.
 923              	
 924 0712 02FBFF17 		.word	_XORR+MAPOFFSET
 925 0716 03       	_UPLUS:	.byte   3
 926 0717 554D2B   		.ascii "UM+"
 927 071a 00BF     		.p2align 2 	
 928              	UPLUS:
 929 071c 0C68     		LDR	R4,[R1]
 930 071e 6419     		ADDS	R4,R4,R5
 931 0720 4FF00005 		MOV	R5,#0
 932 0724 45F10005 		ADC	R5,R5,#0
 933 0728 0C60     		STR	R4,[R1]
 934 072a 7047     		_NEXT
 935              	
 936              	//    RSHIFT	 ( w # -- w )
 937              	// 	arithmetic Right shift # bits.
 938              	
 939 072c 16FBFF17 		.word	_UPLUS+MAPOFFSET
 940 0730 06       	_RSHIFT:	.byte   6
 941 0731 52534849 		.ascii "RSHIFT"
 941      4654
 942 0737 00       		.p2align 2 	
 943              	RSHIFT:
 944 0738 51F8044B 		LDR	R4,[R1],#4
 945 073c 44FA05F5 		MOV	R5,R4,ASR R5
 946 0740 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 20


 947              	
 948              	//    LSHIFT	 ( w # -- w )
 949              	// 	Right shift # bits.
 950              	
 951 0742 30FBFF17 		.word	_RSHIFT+MAPOFFSET
 952 0746 06       	_LSHIFT:	.byte   6
 953 0747 4C534849 		.ascii "LSHIFT"
 953      4654
 954 074d 0000BF   		.p2align 2 	
 955              	LSHIFT:
 956 0750 51F8044B 		LDR	R4,[R1],#4
 957 0754 04FA05F5 		MOV	R5,R4,LSL R5
 958 0758 7047     		_NEXT
 959              	
 960              	//    +	 ( w w -- w )
 961              	// 	Add.
 962              	
 963 075a 46FBFF17 		.word	_LSHIFT+MAPOFFSET
 964 075e 01       	_PLUS:	.byte   1
 965 075f 2B       		.ascii "+"
 966              		.p2align 2 	
 967              	PLUS:
 968 0760 51F8044B 		LDR	R4,[R1],#4
 969 0764 2544     		ADD	R5,R5,R4
 970 0766 7047     		_NEXT
 971              	
 972              	//    -	 ( w w -- w )
 973              	// 	Subtract.
 974              	
 975 0768 5EFBFF17 		.word	_PLUS+MAPOFFSET
 976 076c 01       	_SUBB:	.byte   1
 977 076d 2D       		.ascii "-"
 978 076e 00BF     		.p2align 2 	
 979              	SUBB:
 980 0770 51F8044B 		LDR	R4,[R1],#4
 981 0774 C5EB0405 		RSB	R5,R5,R4
 982 0778 7047     		_NEXT
 983              	
 984              	//    *	 ( w w -- w )
 985              	// 	Multiply.
 986              	
 987 077a 6CFBFF17 		.word	_SUBB+MAPOFFSET
 988 077e 01       	_STAR:	.byte   1
 989 077f 2A       		.ascii "*"
 990              		.p2align 2 	
 991              	STAR:
 992 0780 51F8044B 		LDR	R4,[R1],#4
 993 0784 04FB05F5 		MUL	R5,R4,R5
 994 0788 7047     		_NEXT
 995              	
 996              	//    UM*	 ( w w -- ud )
 997              	// 	Unsigned multiply.
 998              	
 999 078a 7EFBFF17 		.word	_STAR+MAPOFFSET
 1000 078e 03       	_UMSTA:	.byte   3
 1001 078f 554D2A   		.ascii "UM*"
 1002 0792 00BF     		.p2align 2 	
ARM GAS  stm32eforth.s 			page 21


 1003              	UMSTA:
 1004 0794 0C68     		LDR	R4,[R1]
 1005 0796 A5FB0467 		UMULL	R6,R7,R5,R4
 1006 079a 0E60     		STR	R6,[R1]
 1007 079c 3D46     		MOV	R5,R7
 1008 079e 7047     		_NEXT
 1009              	
 1010              	//    M*	 ( w w -- d )
 1011              	// 	signed multiply.
 1012              	
 1013 07a0 8EFBFF17 		.word	_UMSTA+MAPOFFSET
 1014 07a4 02       	_MSTAR:	.byte   2
 1015 07a5 4D2A     		.ascii "M*"
 1016 07a7 00       		.p2align 2 	
 1017              	MSTAR:
 1018 07a8 0C68     		LDR	R4,[R1]
 1019 07aa 85FB0467 		SMULL	R6,R7,R5,R4
 1020 07ae 0E60     		STR	R6,[R1]
 1021 07b0 3D46     		MOV	R5,R7
 1022 07b2 7047     		_NEXT
 1023              	
 1024              	//    1+	 ( w -- w+1 )
 1025              	// 	Add 1.
 1026              	
 1027 07b4 A4FBFF17 		.word	_MSTAR+MAPOFFSET
 1028 07b8 02       	_ONEP:	.byte   2
 1029 07b9 312B     		.ascii "1+"
 1030 07bb 00       		.p2align 2 	
 1031              	ONEP:
 1032 07bc 05F10105 		ADD	R5,R5,#1
 1033 07c0 7047     		_NEXT
 1034              	
 1035              	//    1-	 ( w -- w-1 )
 1036              	// 	Subtract 1.
 1037              	
 1038 07c2 B8FBFF17 		.word	_ONEP+MAPOFFSET
 1039 07c6 02       	_ONEM:	.byte   2
 1040 07c7 312D     		.ascii "1-"
 1041 07c9 0000BF   		.p2align 2 	
 1042              	ONEM:
 1043 07cc A5F10105 		SUB	R5,R5,#1
 1044 07d0 7047     		_NEXT
 1045              	
 1046              	//    2+	 ( w -- w+2 )
 1047              	// 	Add 1.
 1048              	
 1049 07d2 C6FBFF17 		.word	_ONEM+MAPOFFSET
 1050 07d6 02       	_TWOP:	.byte   2
 1051 07d7 322B     		.ascii "2+"
 1052 07d9 0000BF   		.p2align 2 	
 1053              	TWOP:
 1054 07dc 05F10205 		ADD	R5,R5,#2
 1055 07e0 7047     		_NEXT
 1056              	
 1057              	//    2-	 ( w -- w-2 )
 1058              	// 	Subtract 2.
 1059              	
ARM GAS  stm32eforth.s 			page 22


 1060 07e2 D6FBFF17 		.word	_TWOP+MAPOFFSET
 1061 07e6 02       	_TWOM:	.byte   2
 1062 07e7 322D     		.ascii "2-"
 1063 07e9 0000BF   		.p2align 2 	
 1064              	TWOM:
 1065 07ec A5F10205 		SUB	R5,R5,#2
 1066 07f0 7047     		_NEXT
 1067              	
 1068              	//    CELL+	( w -- w+4 )
 1069              	// 	Add CELLL.
 1070              	
 1071 07f2 E6FBFF17 		.word	_TWOM+MAPOFFSET
 1072 07f6 05       	_CELLP:	.byte   5
 1073 07f7 43454C4C 		.ascii "CELL+"
 1073      2B
 1074              		.p2align 2 	
 1075              	CELLP:
 1076 07fc 05F10405 		ADD	R5,R5,#CELLL
 1077 0800 7047     		_NEXT
 1078              	
 1079              	//    CELL-	( w -- w-4 )
 1080              	// 	Subtract CELLL.
 1081              	
 1082 0802 F6FBFF17 		.word	_CELLP+MAPOFFSET
 1083 0806 05       	_CELLM:	.byte   5
 1084 0807 43454C4C 		.ascii "CELL-"
 1084      2D
 1085              		.p2align 2 	
 1086              	CELLM:
 1087 080c A5F10405 		SUB	R5,R5,#CELLL
 1088 0810 7047     		_NEXT
 1089              	 
 1090              	//    BL	( -- 32 )
 1091              	// 	Blank (ASCII space).
 1092              	
 1093 0812 06FCFF17 		.word	_CELLM+MAPOFFSET
 1094 0816 02       	_BLANK:	.byte   2
 1095 0817 424C     		.ascii "BL"
 1096 0819 0000BF   		.p2align 2 	
 1097              	BLANK:
 1098 081c 41F8045D 		_PUSH
 1099 0820 4FF02005 		MOV	R5,#32
 1100 0824 7047     		_NEXT
 1101              	
 1102              	//    CELLS	( w -- w*4 )
 1103              	// 	Multiply 4.
 1104              	
 1105 0826 16FCFF17 		.word	_BLANK+MAPOFFSET
 1106 082a 05       	_CELLS:	.byte   5
 1107 082b 43454C4C 		.ascii "CELLS"
 1107      53
 1108              		.p2align 2 	
 1109              	CELLS:
 1110 0830 4FEA8505 		MOV	R5,R5,LSL#2
 1111 0834 7047     		_NEXT
 1112              	
 1113              	//    CELL/	( w -- w/4 )
ARM GAS  stm32eforth.s 			page 23


 1114              	// 	Divide by 4.
 1115              	
 1116 0836 2AFCFF17 		.word	_CELLS+MAPOFFSET
 1117 083a 05       	_CELLSL:	.byte   5
 1118 083b 43454C4C 		.ascii "CELL/"
 1118      2F
 1119              		.p2align 2 	
 1120              	CELLSL:
 1121 0840 4FEAA505 		MOV	R5,R5,ASR#2
 1122 0844 7047     		_NEXT
 1123              	
 1124              	//    2*	( w -- w*2 )
 1125              	// 	Multiply 2.
 1126              	
 1127 0846 3AFCFF17 		.word	_CELLSL+MAPOFFSET
 1128 084a 02       	_TWOST:	.byte   2
 1129 084b 322A     		.ascii "2*"
 1130 084d 0000BF   		.p2align 2 	
 1131              	TWOST:
 1132 0850 4FEA4505 		MOV	R5,R5,LSL#1
 1133 0854 7047     		_NEXT
 1134              	
 1135              	//    2/	( w -- w/2 )
 1136              	// 	Divide by 2.
 1137              	
 1138 0856 4AFCFF17 		.word	_TWOST+MAPOFFSET
 1139 085a 02       	_TWOSL:	.byte   2
 1140 085b 322F     		.ascii "2/"
 1141 085d 0000BF   		.p2align 2 	
 1142              	TWOSL:
 1143 0860 4FEA6505 		MOV	R5,R5,ASR#1
 1144 0864 7047     		_NEXT
 1145              	
 1146              	//    ?DUP	( w -- w w | 0 )
 1147              	// 	Conditional duplicate.
 1148              	
 1149 0866 5AFCFF17 		.word	_TWOSL+MAPOFFSET
 1150 086a 04       	_QDUP:	.byte   4
 1151 086b 3F445550 		.ascii "?DUP"
 1152 086f 00       		.p2align 2 	
 1153              	QDUP:
 1154 0870 2C00     		MOVS	R4,R5
 1155 0872 18BF     		IT NE 
 1156 0874 41F8045D 	    STRNE	R5,[R1,#-4]!
 1157 0878 7047     		_NEXT
 1158              	
 1159              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1160              	// 	Rotate top 3 items.
 1161              	
 1162 087a 6AFCFF17 		.word	_QDUP+MAPOFFSET
 1163 087e 03       	_ROT:	.byte   3
 1164 087f 524F54   		.ascii "ROT"
 1165 0882 00BF     		.p2align 2 	
 1166              	ROT:
 1167 0884 0C68     		LDR	R4,[R1]  // r4=w2 
 1168 0886 0D60     		STR	R5,[R1]  // w3 replace w2 
 1169 0888 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
ARM GAS  stm32eforth.s 			page 24


 1170 088a 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1171 088c 7047     		_NEXT
 1172              	
 1173              	//    2DROP	( w1 w2 -- )
 1174              	// 	Drop top 2 items.
 1175              	
 1176 088e 7EFCFF17 		.word	_ROT+MAPOFFSET
 1177 0892 05       	_DDROP:	.byte   5
 1178 0893 3244524F 		.ascii "2DROP"
 1178      50
 1179              		.p2align 2 	
 1180              	DDROP:
 1181 0898 51F8045B 		_POP
 1182 089c 51F8045B 		_POP
 1183 08a0 7047     		_NEXT
 1184              	
 1185              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1186              	// 	Duplicate top 2 items.
 1187              	
 1188 08a2 92FCFF17 		.word	_DDROP+MAPOFFSET
 1189 08a6 04       	_DDUP:	.byte   4
 1190 08a7 32445550 		.ascii "2DUP"
 1191 08ab 00       		.p2align 2 	
 1192              	DDUP:
 1193 08ac 0C68     		LDR	R4,[R1] // r4=w1
 1194 08ae 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1195 08b2 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1196 08b6 7047     		_NEXT
 1197              	
 1198              	//    D+	( d1 d2 -- d3 )
 1199              	// 	Add top 2 double numbers.
 1200              	
 1201 08b8 A6FCFF17 		.word	_DDUP+MAPOFFSET
 1202 08bc 02       	_DPLUS:	.byte   2
 1203 08bd 442B     		.ascii "D+"
 1204 08bf 00       		.p2align 2 	
 1205              	DPLUS:
 1206 08c0 51F8044B 		LDR	R4,[R1],#4
 1207 08c4 51F8046B 		LDR	R6,[R1],#4
 1208 08c8 0F68     		LDR	R7,[R1]
 1209 08ca E419     		ADDS	R4,R4,R7
 1210 08cc 0C60     		STR	R4,[R1]
 1211 08ce 45EB0605 		ADC	R5,R5,R6
 1212 08d2 7047     		_NEXT
 1213              	
 1214              	//    NOT	 ( w -- !w )
 1215              	// 	1"s complement.
 1216              	
 1217 08d4 BCFCFF17 		.word	_DPLUS+MAPOFFSET
 1218 08d8 03       	_INVER:	.byte   3
 1219 08d9 4E4F54   		.ascii "NOT"
 1220              		.p2align 2 	
 1221              	INVER:
 1222 08dc 6FEA0505 		MVN	R5,R5
 1223 08e0 7047     		_NEXT
 1224              	
 1225              	//    NEGATE	( w -- -w )
ARM GAS  stm32eforth.s 			page 25


 1226              	// 	2's complement.
 1227              	
 1228 08e2 D8FCFF17 		.word	_INVER+MAPOFFSET
 1229 08e6 06       	_NEGAT:	.byte   6
 1230 08e7 4E454741 		.ascii "NEGATE"
 1230      5445
 1231 08ed 0000BF   		.p2align 2 	
 1232              	NEGAT:
 1233 08f0 C5F10005 		RSB	R5,R5,#0
 1234 08f4 7047     		_NEXT
 1235              	
 1236              	//    ABS	 ( w -- |w| )
 1237              	// 	Absolute.
 1238              	
 1239 08f6 E6FCFF17 		.word	_NEGAT+MAPOFFSET
 1240 08fa 03       	_ABSS:	.byte   3
 1241 08fb 414253   		.ascii "ABS"
 1242 08fe 00BF     		.p2align 2 	
 1243              	ABSS:
 1244 0900 15F0004F 		TST	R5,#0x80000000
 1245 0904 18BF     		IT NE
 1246 0906 6D42     	    RSBNE   R5,R5,#0
 1247 0908 7047     		_NEXT
 1248              	
 1249              	//  0= ( w -- f )
 1250              	// TOS==0?
 1251              	
 1252 090a FAFCFF17 		.word _ABSS+MAPOFFSET
 1253 090e 02       	_ZEQUAL: .byte 2
 1254 090f 303D     		.ascii "0="
 1255 0911 0000BF   		.p2align 2
 1256              	ZEQUAL:
 1257 0914 15B9     		cbnz r5,1f
 1258 0916 4FF0FF35 		mov r5,#-1
 1259 091a 7047     		_NEXT 
 1260 091c 85EA0505 	1:  eor r5,r5,r5  
 1261 0920 7047     		_NEXT 	
 1262              	
 1263              	//    =	 ( w w -- t )
 1264              	// 	Equal?
 1265              	
 1266 0922 0EFDFF17 		.word	_ZEQUAL+MAPOFFSET
 1267 0926 01       	_EQUAL:	.byte   1
 1268 0927 3D       		.ascii "="
 1269              		.p2align 2 	
 1270              	EQUAL:
 1271 0928 51F8044B 		LDR	R4,[R1],#4
 1272 092c A542     		CMP	R5,R4
 1273 092e 0CBF     		ITE EQ 
 1274 0930 6FF00005 	    MVNEQ	R5,#0
 1275 0934 0025     		MOVNE	R5,#0
 1276 0936 7047     		_NEXT
 1277              	
 1278              	//    U<	 ( w w -- t )
 1279              	// 	Unsigned equal?
 1280              	
 1281 0938 26FDFF17 		.word	_EQUAL+MAPOFFSET
ARM GAS  stm32eforth.s 			page 26


 1282 093c 02       	_ULESS:	.byte   2
 1283 093d 553C     		.ascii "U<"
 1284 093f 00       		.p2align 2 	
 1285              	ULESS:
 1286 0940 51F8044B 		LDR	R4,[R1],#4
 1287 0944 AC42     		CMP	R4,R5
 1288 0946 34BF     		ITE CC 
 1289 0948 6FF00005 		MVNCC	R5,#0
 1290 094c 0025     		MOVCS	R5,#0
 1291 094e 7047     		_NEXT
 1292              	
 1293              	//    <	( w w -- t )
 1294              	// 	Less?
 1295              	
 1296 0950 3CFDFF17 		.word	_ULESS+MAPOFFSET
 1297 0954 01       	_LESS:	.byte   1
 1298 0955 3C       		.ascii "<"
 1299 0956 00BF     		.p2align 2 	
 1300              	LESS:
 1301 0958 51F8044B 		LDR	R4,[R1],#4
 1302 095c AC42     		CMP	R4,R5
 1303 095e B4BF     	    ITE LT
 1304 0960 6FF00005 		MVNLT	R5,#0
 1305 0964 0025     		MOVGE	R5,#0
 1306 0966 7047     		_NEXT
 1307              	
 1308              	//    >	( w w -- t )
 1309              	// 	greater?
 1310              	
 1311 0968 54FDFF17 		.word	_LESS+MAPOFFSET
 1312 096c 01       	_GREAT:	.byte   1
 1313 096d 3E       		.ascii ">"
 1314 096e 00BF     		.p2align 2 	
 1315              	GREAT:
 1316 0970 51F8044B 		LDR	R4,[R1],#4
 1317 0974 AC42     		CMP	R4,R5
 1318 0976 CCBF     		ITE GT
 1319 0978 6FF00005 	    MVNGT	R5,#0
 1320 097c 0025     		MOVLE	R5,#0
 1321 097e 7047     		_NEXT
 1322              	
 1323              	//    MAX	 ( w w -- max )
 1324              	// 	Leave maximum.
 1325              	
 1326 0980 6CFDFF17 		.word	_GREAT+MAPOFFSET
 1327 0984 03       	_MAX:	.byte   3
 1328 0985 4D4158   		.ascii "MAX"
 1329              		.p2align 2 	
 1330              	MAX:
 1331 0988 51F8044B 		LDR	R4,[R1],#4
 1332 098c AC42     		CMP	R4,R5
 1333 098e C8BF     		IT GT 
 1334 0990 2546     		MOVGT	R5,R4
 1335 0992 7047     		_NEXT
 1336              	
 1337              	//    MIN	 ( w w -- min )
 1338              	// 	Leave minimum.
ARM GAS  stm32eforth.s 			page 27


 1339              	
 1340 0994 84FDFF17 		.word	_MAX+MAPOFFSET
 1341 0998 03       	_MIN:	.byte   3
 1342 0999 4D494E   		.ascii "MIN"
 1343              		.p2align 2 	
 1344              	MIN:
 1345 099c 51F8044B 		LDR	R4,[R1],#4
 1346 09a0 AC42     		CMP	R4,R5
 1347 09a2 B8BF     		IT LT
 1348 09a4 2546     		MOVLT	R5,R4
 1349 09a6 7047     		_NEXT
 1350              	
 1351              	//    +!	 ( w a -- )
 1352              	// 	Add to memory.
 1353              	
 1354 09a8 98FDFF17 		.word	_MIN+MAPOFFSET
 1355 09ac 02       	_PSTOR:	.byte   2
 1356 09ad 2B21     		.ascii "+!"
 1357 09af 00       		.p2align 2 	
 1358              	PSTOR:
 1359 09b0 51F8044B 		LDR	R4,[R1],#4
 1360 09b4 2E68     		LDR	R6,[R5]
 1361 09b6 2644     		ADD	R6,R6,R4
 1362 09b8 2E60     		STR	R6,[R5]
 1363 09ba 51F8045B 		_POP
 1364 09be 7047     		_NEXT
 1365              	
 1366              	//    2!	 ( d a -- )
 1367              	// 	Store double number.
 1368              	
 1369 09c0 ACFDFF17 		.word	_PSTOR+MAPOFFSET
 1370 09c4 02       	_DSTOR:	.byte   2
 1371 09c5 3221     		.ascii "2!"
 1372 09c7 00       		.p2align 2 	
 1373              	DSTOR:
 1374 09c8 51F8044B 		LDR	R4,[R1],#4
 1375 09cc 51F8046B 		LDR	R6,[R1],#4
 1376 09d0 45F8044B 		STR	R4,[R5],#4
 1377 09d4 2E60     		STR	R6,[R5]
 1378 09d6 51F8045B 		_POP
 1379 09da 7047     		_NEXT
 1380              	
 1381              	//    2@	 ( a -- d )
 1382              	// 	Fetch double number.
 1383              	
 1384 09dc C4FDFF17 		.word	_DSTOR+MAPOFFSET
 1385 09e0 02       	_DAT:	.byte   2
 1386 09e1 3240     		.ascii "2@"
 1387 09e3 00       		.p2align 2 	
 1388              	DAT:
 1389 09e4 6C68     		LDR	R4,[R5,#4]
 1390 09e6 41F8044D 		STR	R4,[R1,#-4]!
 1391 09ea 2D68     		LDR	R5,[R5]
 1392 09ec 7047     		_NEXT
 1393              	
 1394              	//    COUNT	( b -- b+1 c )
 1395              	// 	Fetch length of string.
ARM GAS  stm32eforth.s 			page 28


 1396              	
 1397 09ee E0FDFF17 		.word	_DAT+MAPOFFSET
 1398 09f2 05       	_COUNT:	.byte   5
 1399 09f3 434F554E 		.ascii "COUNT"
 1399      54
 1400              		.p2align 2 	
 1401              	COUNT:
 1402 09f8 15F8014B 		LDRB	R4,[R5],#1
 1403 09fc 41F8045D 		_PUSH
 1404 0a00 2546     		MOV	R5,R4
 1405 0a02 7047     		_NEXT
 1406              	
 1407              	//    DNEGATE	( d -- -d )
 1408              	// 	Negate double number.
 1409              	
 1410 0a04 F2FDFF17 		.word	_COUNT+MAPOFFSET
 1411 0a08 07       	_DNEGA:	.byte   7
 1412 0a09 444E4547 		.ascii "DNEGATE"
 1412      415445
 1413              		.p2align 2 	
 1414              	DNEGA:
 1415 0a10 0C68     		LDR	R4,[R1]
 1416 0a12 A6EB0606 		SUB	R6,R6,R6
 1417 0a16 341B     		SUBS R4,R6,R4
 1418 0a18 66EB0505 		SBC	R5,R6,R5
 1419 0a1c 0C60     		STR	R4,[R1]
 1420 0a1e 7047     		_NEXT
 1421              	
 1422              	// **************************************************************************
 1423              	//  System and user variables
 1424              	
 1425              	//    doVAR	( -- a )
 1426              	// 	Run time routine for VARIABLE and CREATE.
 1427              	
 1428              	// 	.word	_DNEGA+MAPOFFSET
 1429              	// _DOVAR	.byte  COMPO+5
 1430              	// 	.ascii "doVAR"
 1431              	// 	.p2align 2 	
 1432              	DOVAR:
 1433 0a20 41F8045D 		_PUSH
 1434 0a24 AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
 1435 0a28 52F804FB 		_UNNEST
 1436              	
 1437              	//    doCON	( -- a ) 
 1438              	// 	Run time routine for CONSTANT.
 1439              	
 1440              	// 	.word	_DOVAR+MAPOFFSET
 1441              	// _DOCON	.byte  COMPO+5
 1442              	// 	.ascii "doCON"
 1443              	// 	.p2align 2 	
 1444              	DOCON:
 1445 0a2c 41F8045D 		_PUSH
 1446 0a30 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1447 0a34 52F804FB 		_UNNEST
 1448              	
 1449              	/***********************
 1450              	  system variables 
ARM GAS  stm32eforth.s 			page 29


 1451              	***********************/
 1452              	
 1453              	 // SEED ( -- a)
 1454              	 // return PRNG seed address 
 1455              	
 1456 0a38 08FEFF17 		.word _DNEGA+MAPOFFSET
 1457 0a3c 04       	_SEED: .byte 4
 1458 0a3d 53454544 		.ascii "SEED"
 1459 0a41 0000BF   		.p2align 2
 1460              	SEED:
 1461 0a44 41F8045D 		_PUSH 
 1462 0a48 03F10405 		ADD R5,R3,#SEED_OFS
 1463 0a4c 7047     		_NEXT 	
 1464              	
 1465              	//  MSEC ( -- a)
 1466              	// return address of milliseconds counter
 1467 0a4e 3CFEFF17 	  .word _SEED+MAPOFFSET 
 1468 0a52 04       	_MSEC: .byte 4
 1469 0a53 4D534543 	  .ascii "MSEC"
 1470 0a57 00       	  .p2align 2 
 1471              	MSEC:
 1472 0a58 41F8045D 	  _PUSH
 1473 0a5c 03F10805 	  ADD R5,R3,#TICKS_OFS
 1474 0a60 7047     	  _NEXT 
 1475              	
 1476              	// TIMER ( -- a )
 1477              	// count down timer 
 1478 0a62 52FEFF17 	  .word _MSEC+MAPOFFSET
 1479 0a66 05       	_TIMER:  .byte 5
 1480 0a67 54494D45 	  .ascii "TIMER"
 1480      52
 1481              	  .p2align 2 
 1482              	TIMER:
 1483 0a6c 41F8045D 	  _PUSH 
 1484 0a70 03F10C05 	  ADD R5,R3,#TIMER_OFS
 1485 0a74 7047     	  _NEXT
 1486              	
 1487              	// >RAM ( -- a )
 1488              	// compilation target 
 1489              	// -1 compile to RAM, 0 compile to FLASH 
 1490 0a76 66FEFF17 		.word _TIMER+MAPOFFSET
 1491 0a7a 04       	_TORAM: .byte 4 
 1492 0a7b 3E52414D 		.ascii ">RAM" 
 1493 0a7f 00       		.p2align 2 
 1494              	TORAM:
 1495 0a80 41F8045D 		_PUSH 
 1496 0a84 03F11005 		ADD R5,R3,#TORAM_OFS
 1497 0a88 7047     		_NEXT 
 1498              	
 1499              	//    'BOOT	 ( -- a )
 1500              	// 	Application.
 1501              	
 1502 0a8a 7AFEFF17 		.word	_TORAM+MAPOFFSET
 1503 0a8e 05       	_TBOOT:	.byte   5
 1504 0a8f 27424F4F 		.ascii "'BOOT"
 1504      54
 1505              		.p2align 2 	
ARM GAS  stm32eforth.s 			page 30


 1506              	TBOOT:
 1507 0a94 41F8045D 		_PUSH
 1508 0a98 03F11805 		ADD	R5,R3,#BOOT_OFS 
 1509 0a9c 7047     		_NEXT
 1510              		
 1511              	//    BASE	( -- a )
 1512              	// 	Storage of the radix base for numeric I/O.
 1513              	
 1514 0a9e 8EFEFF17 		.word	_TBOOT+MAPOFFSET
 1515 0aa2 04       	_BASE:	.byte   4
 1516 0aa3 42415345 		.ascii "BASE"
 1517 0aa7 00       		.p2align 2 	
 1518              	BASE:
 1519 0aa8 41F8045D 		_PUSH
 1520 0aac 03F11C05 		ADD	R5,R3,#BASE_OFS
 1521 0ab0 7047     		_NEXT
 1522              	
 1523              	//    tmp	 ( -- a )
 1524              	// 	A temporary storage location used in parse and find.
 1525              	
 1526              	// 	.word	_BASE+MAPOFFSET
 1527              	// _TEMP	.byte   COMPO+3
 1528              	// 	.ascii "tmp"
 1529              	// 	.p2align 2 	
 1530              	TEMP:
 1531 0ab2 41F8045D 		_PUSH
 1532 0ab6 03F12005 		ADD	R5,R3,#TMP_OFS
 1533 0aba 7047     		_NEXT
 1534              	
 1535              	//    SPAN	( -- a )
 1536              	// 	Hold character count received by EXPECT.
 1537              	
 1538 0abc A2FEFF17 		.word	_BASE+MAPOFFSET
 1539 0ac0 04       	_SPAN:	.byte   4
 1540 0ac1 5350414E 		.ascii "SPAN"
 1541 0ac5 0000BF   		.p2align 2 	
 1542              	SPAN:
 1543 0ac8 41F8045D 		_PUSH
 1544 0acc 03F12405 		ADD	R5,R3,#SPAN_OFS
 1545 0ad0 7047     		_NEXT
 1546              	
 1547              	//    >IN	 ( -- a )
 1548              	// 	Hold the character pointer while parsing input stream.
 1549              	
 1550 0ad2 C0FEFF17 		.word	_SPAN+MAPOFFSET
 1551 0ad6 03       	_INN:	.byte   3
 1552 0ad7 3E494E   		.ascii ">IN"
 1553 0ada 00BF     		.p2align 2 	
 1554              	INN:
 1555 0adc 41F8045D 		_PUSH
 1556 0ae0 03F12805 		ADD	R5,R3,#TOIN_OFS
 1557 0ae4 7047     		_NEXT
 1558              	
 1559              	//    #TIB	( -- a )
 1560              	// 	Hold the current count and address of the terminal input buffer.
 1561              	
 1562 0ae6 D6FEFF17 		.word	_INN+MAPOFFSET
ARM GAS  stm32eforth.s 			page 31


 1563 0aea 04       	_NTIB:	.byte   4
 1564 0aeb 23544942 		.ascii "#TIB"
 1565 0aef 00       		.p2align 2 	
 1566              	NTIB:
 1567 0af0 41F8045D 		_PUSH
 1568 0af4 03F12C05 		ADD	R5,R3,#NTIB_OFS
 1569 0af8 7047     		_NEXT
 1570              	
 1571              	//    'EVAL	( -- a )
 1572              	// 	Execution vector of EVAL.
 1573              	
 1574 0afa EAFEFF17 		.word	_NTIB+MAPOFFSET
 1575 0afe 05       	_TEVAL:	.byte   5
 1576 0aff 27455641 		.ascii "'EVAL"
 1576      4C
 1577              		.p2align 2 	
 1578              	TEVAL:
 1579 0b04 41F8045D 		_PUSH
 1580 0b08 03F13405 		ADD	R5,R3,#EVAL_OFS
 1581 0b0c 7047     		_NEXT
 1582              	
 1583              	//    HLD	 ( -- a )
 1584              	// 	Hold a pointer in building a numeric output string.
 1585              	
 1586 0b0e FEFEFF17 		.word	_TEVAL+MAPOFFSET
 1587 0b12 03       	_HLD:	.byte   3
 1588 0b13 484C44   		.ascii "HLD"
 1589 0b16 00BF     		.p2align 2 	
 1590              	HLD:
 1591 0b18 41F8045D 		_PUSH
 1592 0b1c 03F13805 		ADD	R5,R3,#HLD_OFS
 1593 0b20 7047     		_NEXT
 1594              	
 1595              	//    CONTEXT	( -- a )
 1596              	// 	A area to specify vocabulary search order.
 1597              	
 1598 0b22 12FFFF17 		.word	_HLD+MAPOFFSET
 1599 0b26 07       	_CNTXT:	.byte   7
 1600 0b27 434F4E54 		.ascii "CONTEXT"
 1600      455854
 1601 0b2e 00BF     		.p2align 2 	
 1602              	CNTXT:
 1603              	CRRNT:
 1604 0b30 41F8045D 		_PUSH
 1605 0b34 03F13C05 		ADD	R5,R3,#CTXT_OFS
 1606 0b38 7047     		_NEXT
 1607              	
 1608              	//    CP	( -- a )
 1609              	// 	Point to top name in RAM vocabulary.
 1610              	
 1611 0b3a 26FFFF17 		.word	_CNTXT+MAPOFFSET
 1612 0b3e 02       	_CP:	.byte   2
 1613 0b3f 4350     		.ascii "CP"
 1614 0b41 0000BF   		.p2align 2 	
 1615              	CPP:
 1616 0b44 41F8045D 		_PUSH
 1617 0b48 03F14405 		ADD	R5,R3,#USER_CTOP_OFS
ARM GAS  stm32eforth.s 			page 32


 1618 0b4c 7047     		_NEXT
 1619              	
 1620              	//   FCP ( -- a )
 1621              	//  Point ot top of Forth system dictionary
 1622 0b4e 3EFFFF17 		.word _CP+MAPOFFSET
 1623 0b52 03       	_FCP: .byte 3            
 1624 0b53 464350   		.ascii "FCP"
 1625 0b56 00BF     		.p2align 2 
 1626              	FCP: 
 1627 0b58 41F8045D 		_PUSH 
 1628 0b5c 03F14005 		ADD R5,R3,#FORTH_CTOP_OFS 
 1629 0b60 7047     		_NEXT 
 1630              	
 1631              	//    LAST	( -- a )
 1632              	// 	Point to the last name in the name dictionary.
 1633              	
 1634 0b62 52FFFF17 		.word	_FCP+MAPOFFSET
 1635 0b66 04       	_LAST:	.byte   4
 1636 0b67 4C415354 		.ascii "LAST"
 1637 0b6b 00       		.p2align 2 	
 1638              	LAST:
 1639 0b6c 41F8045D 		_PUSH
 1640 0b70 03F14805 		ADD	R5,R3,#LASTN_OFS
 1641 0b74 7047     		_NEXT
 1642              	
 1643              	/***********************
 1644              		system constants 
 1645              	***********************/
 1646              	
 1647              	//	USER_BEGIN ( -- a )
 1648              	//  where user area begin in RAM
 1649 0b76 66FFFF17 		.word _LAST+MAPOFFSET
 1650 0b7a 0A       	_USER_BGN: .byte 10
 1651 0b7b 55534552 		.ascii "USER_BEGIN"
 1651      5F424547 
 1651      494E
 1652 0b85 0000BF   		.p2align 2
 1653              	USER_BEGIN:
 1654 0b88 41F8045D 		_PUSH 
 1655 0b8c 004D     		ldr r5,USR_BGN_ADR 
 1656 0b8e 7047     		_NEXT 
 1657              	USR_BGN_ADR:
 1658 0b90 701C0018 	.word CTOP+MAPOFFSET 
 1659              	
 1660              	//  USER_END ( -- a )
 1661              	//  where user area end in RAM 
 1662 0b94 7AFFFF17 		.word _USER_BGN+MAPOFFSET
 1663 0b98 08       	_USER_END: .byte 8 
 1664 0b99 55534552 		.ascii "USER_END" 
 1664      5F454E44 
 1665 0ba1 0000BF   		.p2align 2 
 1666              	USER_END:
 1667 0ba4 41F8045D 		_PUSH 
 1668 0ba8 4FF49C45 		mov r5,#DEND&0xffff
 1669 0bac C2F20005 		movt r5,#DEND>>16 
 1670 0bb0 7047     		_NEXT 
 1671              	
ARM GAS  stm32eforth.s 			page 33


 1672              	//  IMG_ADR ( -- a )
 1673              	//  where user image is saved in FLASH
 1674 0bb2 98FFFF17 		.word _USER_END+MAPOFFSET
 1675 0bb6 07       	_IMG_ADR: .byte 7
 1676 0bb7 494D475F 		.ascii "IMG_ADR"
 1676      414452
 1677 0bbe 00BF     		.p2align 2 
 1678              	IMG_ADR:
 1679 0bc0 41F8045D 		_PUSH
 1680 0bc4 004D     		ldr r5,USR_IMG_ADR   
 1681 0bc6 7047     		_NEXT 
 1682              	USR_IMG_ADR:
 1683 0bc8 002C0000 		.word USER_SPACE 
 1684              	
 1685              	// image signature 
 1686 0bcc B6FFFF17 		.word _IMG_ADR+MAPOFFSET
 1687 0bd0 08       	_IMG_SIGN: .byte 8
 1688 0bd1 494D475F 		.ascii "IMG_SIGN"
 1688      5349474E 
 1689 0bd9 0000BF   		.p2align 2	
 1690              	IMG_SIGN: 
 1691 0bdc 41F8045D 		_PUSH 
 1692 0be0 03F11405 		ADD r5,r3,#IMG_SIGN_OFS 
 1693 0be4 7047     		_NEXT 
 1694              	
 1695              	/* *********************
 1696              	  Common functions
 1697              	***********************/
 1698              	
 1699              	//    WITHIN	( u ul uh -- t )
 1700              	// 	Return true if u is within the range of ul and uh.
 1701              	
 1702 0be6 B6FFFF17 		.word	_IMG_ADR+MAPOFFSET
 1703 0bea 06       	_WITHI:	.byte   6
 1704 0beb 57495448 		.ascii "WITHIN"
 1704      494E
 1705 0bf1 0000BF   		.p2align 2 	
 1706              	WITHI:
 1707 0bf4 42F804ED 		_NEST
 1708 0bf8 FFF760FD 		BL	OVER
 1709 0bfc FFF7B8FD 		BL	SUBB
 1710 0c00 FFF72EFD 		BL	TOR
 1711 0c04 FFF7B4FD 		BL	SUBB
 1712 0c08 FFF718FD 		BL	RFROM
 1713 0c0c FFF798FE 		BL	ULESS
 1714 0c10 52F804FB 		_UNNEST
 1715              	
 1716              	//  Divide
 1717              	
 1718              	//    UM/MOD	( udl udh u -- ur uq )
 1719              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1720              	
 1721 0c14 EAFFFF17 		.word	_WITHI+MAPOFFSET
 1722 0c18 06       	_UMMOD:	.byte   6
 1723 0c19 554D2F4D 		.ascii "UM/MOD"
 1723      4F44
 1724 0c1f 00       		.p2align 2 	
ARM GAS  stm32eforth.s 			page 34


 1725              	UMMOD:
 1726 0c20 4FF00107 		MOV	R7,#1
 1727 0c24 51F8044B 		LDR	R4,[R1],#4
 1728 0c28 0E68     		LDR	R6,[R1]
 1729              	UMMOD0:
 1730 0c2a B619     		ADDS	R6,R6,R6
 1731 0c2c 6441     		ADCS	R4,R4,R4
 1732 0c2e 04D3     		BCC	UMMOD1
 1733 0c30 A4EB0504 		SUB	R4,R4,R5
 1734 0c34 06F10106 		ADD	R6,R6,#1
 1735 0c38 04E0     		B UMMOD2
 1736              	UMMOD1:
 1737 0c3a 641B     		SUBS	R4,R4,R5 
 1738 0c3c 28BF     		IT CS 
 1739 0c3e 0136     		ADDCS	R6,R6,#1
 1740 0c40 00D2     		BCS	UMMOD2
 1741 0c42 2C44     		ADD	R4,R4,R5
 1742              	UMMOD2:
 1743 0c44 FF19     		ADDS	R7,R7,R7
 1744 0c46 F0D3     		BCC	UMMOD0
 1745 0c48 3546     		MOV	R5,R6
 1746 0c4a 0C60     		STR	R4,[R1]
 1747 0c4c 7047     		_NEXT
 1748              	
 1749              	//    M/MOD	( d n -- r q )
 1750              	// 	Signed floored divide of double by single. Return mod and quotient.
 1751              	
 1752 0c4e 18000018 		.word	_UMMOD+MAPOFFSET
 1753 0c52 05       	_MSMOD:	.byte  5
 1754 0c53 4D2F4D4F 		.ascii "M/MOD"
 1754      44
 1755              		.p2align 2 	
 1756              	MSMOD:	
 1757 0c58 42F804ED 		_NEST
 1758 0c5c FFF71CFD 		BL	DUPP
 1759 0c60 FFF734FD 		BL	ZLESS
 1760 0c64 FFF718FD 		BL	DUPP
 1761 0c68 FFF7FAFC 		BL	TOR
 1762 0c6c FFF7AAFC 		BL	QBRAN
 1763 0c70 84000018 		.word	MMOD1+MAPOFFSET
 1764 0c74 FFF73CFE 		BL	NEGAT
 1765 0c78 FFF7F2FC 		BL	TOR
 1766 0c7c FFF7C8FE 		BL	DNEGA
 1767 0c80 FFF7DCFC 		BL	RFROM
 1768              	MMOD1:
 1769 0c84 FFF7ECFC 	  BL	TOR
 1770 0c88 FFF706FD 		BL	DUPP
 1771 0c8c FFF71EFD 		BL	ZLESS
 1772 0c90 FFF798FC 		BL	QBRAN
 1773 0c94 A0000018 		.word	MMOD2+MAPOFFSET
 1774 0c98 FFF7DAFC 		BL	RAT
 1775 0c9c FFF760FD 		BL	PLUS
 1776              	MMOD2:
 1777 0ca0 FFF7CCFC 	  BL	RFROM
 1778 0ca4 FFF7BCFF 		BL	UMMOD
 1779 0ca8 FFF7C8FC 		BL	RFROM
 1780 0cac FFF78AFC 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 35


 1781 0cb0 C0000018 		.word	MMOD3+MAPOFFSET
 1782 0cb4 FFF7F8FC 		BL	SWAP
 1783 0cb8 FFF71AFE 		BL	NEGAT
 1784 0cbc FFF7F4FC 		BL	SWAP
 1785              	MMOD3:   
 1786 0cc0 52F804FB 		_UNNEST
 1787              	
 1788              	//    /MOD	( n n -- r q )
 1789              	// 	Signed divide. Return mod and quotient.
 1790              	
 1791 0cc4 52000018 		.word	_MSMOD+MAPOFFSET
 1792 0cc8 04       	_SLMOD:	.byte   4
 1793 0cc9 2F4D4F44 		.ascii "/MOD"
 1794 0ccd 0000BF   		.p2align 2 	
 1795              	SLMOD:
 1796 0cd0 42F804ED 		_NEST
 1797 0cd4 FFF7F2FC 		BL	OVER
 1798 0cd8 FFF7F8FC 		BL	ZLESS
 1799 0cdc FFF7E4FC 		BL	SWAP
 1800 0ce0 FFF7BAFF 		BL	MSMOD
 1801 0ce4 52F804FB 		_UNNEST
 1802              	
 1803              	//    MOD	 ( n n -- r )
 1804              	// 	Signed divide. Return mod only.
 1805              	
 1806 0ce8 C8000018 		.word	_SLMOD+MAPOFFSET
 1807 0cec 03       	_MODD:	.byte  3
 1808 0ced 4D4F44   		.ascii "MOD"
 1809              		.p2align 2 	
 1810              	MODD:
 1811 0cf0 42F804ED 		_NEST
 1812 0cf4 FFF7ECFF 		BL	SLMOD
 1813 0cf8 FFF7C6FC 		BL	DROP
 1814 0cfc 52F804FB 		_UNNEST
 1815              	
 1816              	//    /	   ( n n -- q )
 1817              	// 	Signed divide. Return quotient only.
 1818              	
 1819 0d00 EC000018 		.word	_MODD+MAPOFFSET
 1820 0d04 01       	_SLASH:	.byte  1
 1821 0d05 2F       		.ascii "/"
 1822 0d06 00BF     		.p2align 2 	
 1823              	SLASH:
 1824 0d08 42F804ED 		_NEST
 1825 0d0c FFF7E0FF 		BL	SLMOD
 1826 0d10 FFF7CAFC 		BL	SWAP
 1827 0d14 FFF7B8FC 		BL	DROP
 1828 0d18 52F804FB 		_UNNEST
 1829              	
 1830              	//    */MOD	( n1 n2 n3 -- r q )
 1831              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1832              	
 1833 0d1c 04010018 		.word	_SLASH+MAPOFFSET
 1834 0d20 05       	_SSMOD:	.byte  5
 1835 0d21 2A2F4D4F 		.ascii "*/MOD"
 1835      44
 1836 0d26 00BF     		.p2align 2 	
ARM GAS  stm32eforth.s 			page 36


 1837              	SSMOD:
 1838 0d28 42F804ED 		_NEST
 1839 0d2c FFF798FC 		BL	TOR
 1840 0d30 FFF73AFD 		BL	MSTAR
 1841 0d34 FFF782FC 		BL	RFROM
 1842 0d38 FFF78EFF 		BL	MSMOD
 1843 0d3c 52F804FB 		_UNNEST
 1844              	
 1845              	//    */	  ( n1 n2 n3 -- q )
 1846              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1847              	
 1848 0d40 20010018 		.word	_SSMOD+MAPOFFSET
 1849 0d44 02       	_STASL:	.byte  2
 1850 0d45 2A2F     		.ascii "*/"
 1851 0d47 00       		.p2align 2 	
 1852              	STASL:
 1853 0d48 42F804ED 		_NEST
 1854 0d4c FFF7ECFF 		BL	SSMOD
 1855 0d50 FFF7AAFC 		BL	SWAP
 1856 0d54 FFF798FC 		BL	DROP
 1857 0d58 52F804FB 		_UNNEST
 1858              	
 1859              	// **************************************************************************
 1860              	//  Miscellaneous
 1861              	
 1862              	//    ALIGNED	( b -- a )
 1863              	// 	Align address to the cell boundary.
 1864              	
 1865 0d5c 44010018 		.word	_STASL+MAPOFFSET
 1866 0d60 07       	_ALGND:	.byte   7
 1867 0d61 414C4947 		.ascii "ALIGNED"
 1867      4E4544
 1868              		.p2align 2 	
 1869              	ALGND:
 1870 0d68 05F10305 		ADD	R5,R5,#3
 1871 0d6c 6FF00304 		MVN	R4,#3
 1872 0d70 05EA0405 		AND	R5,R5,R4
 1873 0d74 7047     		_NEXT
 1874              	
 1875              	//    >CHAR	( c -- c )
 1876              	// 	Filter non-printing characters.
 1877              	
 1878 0d76 60010018 		.word	_ALGND+MAPOFFSET
 1879 0d7a 05       	_TCHAR:	.byte  5
 1880 0d7b 3E434841 		.ascii ">CHAR"
 1880      52
 1881              		.p2align 2 	
 1882              	TCHAR:
 1883 0d80 42F804ED 		_NEST
 1884 0d84 FFF7FBFB 		_DOLIT
 1885 0d88 7F000000 		.word	0x7F
 1886 0d8c FFF7A8FC 		BL	ANDD
 1887 0d90 FFF782FC 		BL	DUPP	// mask msb
 1888 0d94 FFF742FD 		BL	BLANK
 1889 0d98 FFF7F1FB 		_DOLIT
 1890 0d9c 7F000000 		.word	127
 1891 0da0 FFF728FF 		BL	WITHI	// check for printable
ARM GAS  stm32eforth.s 			page 37


 1892 0da4 FFF79AFD 		BL	INVER
 1893 0da8 FFF70CFC 		BL	QBRAN
 1894 0dac BC010018 		.word	TCHA1+MAPOFFSET
 1895 0db0 FFF76AFC 		BL	DROP
 1896 0db4 FFF7E3FB 		_DOLIT
 1897 0db8 5F000000 		.word	'_'	// replace non-printables
 1898              	TCHA1:
 1899 0dbc 52F804FB 		  _UNNEST
 1900              	
 1901              	//    DEPTH	( -- n )
 1902              	// 	Return the depth of the data stack.
 1903              	
 1904 0dc0 7A010018 		.word	_TCHAR+MAPOFFSET
 1905 0dc4 05       	_DEPTH:	.byte  5
 1906 0dc5 44455054 		.ascii "DEPTH"
 1906      48
 1907 0dca 00BF     		.p2align 2 	
 1908              	DEPTH:
 1909 0dcc 41F8045D 		_PUSH
 1910 0dd0 44F68465 		MOVW	R5,#SPP&0xffff+4 
 1911 0dd4 C2F20005 	 	MOVT	R5,#SPP>>16 
 1912 0dd8 A5EB0105 		SUB	R5,R5,R1
 1913 0ddc 4FEAA505 		ASR	R5,R5,#2
 1914 0de0 A5F10105 		SUB	R5,R5,#1
 1915 0de4 7047     		_NEXT
 1916              	
 1917              	//    PICK	( ... +n -- ... w )
 1918              	// 	Copy the nth stack item to tos.
 1919              	
 1920 0de6 C4010018 		.word	_DEPTH+MAPOFFSET
 1921 0dea 04       	_PICK:	.byte  4
 1922 0deb 5049434B 		.ascii "PICK"
 1923 0def 00       		.p2align 2 	
 1924              	PICK:
 1925 0df0 42F804ED 		_NEST
 1926 0df4 FFF7E2FC 		BL	ONEP
 1927 0df8 FFF71AFD 		BL	CELLS
 1928 0dfc FFF73AFC 		BL	SPAT
 1929 0e00 FFF7AEFC 		BL	PLUS
 1930 0e04 FFF704FC 		BL	AT
 1931 0e08 52F804FB 		_UNNEST
 1932              	
 1933              	// **************************************************************************
 1934              	//  Memory access
 1935              	
 1936              	//    HERE	( -- a )
 1937              	// 	Return the top of the code dictionary.
 1938              	
 1939 0e0c EA010018 		.word	_PICK+MAPOFFSET
 1940 0e10 04       	_HERE:	.byte  4
 1941 0e11 48455245 		.ascii "HERE"
 1942 0e15 0000BF   		.p2align 2 	
 1943              	HERE:
 1944 0e18 42F804ED 		_NEST
 1945 0e1c FFF792FE 		BL	CPP
 1946 0e20 FFF7F6FB 		BL	AT
 1947 0e24 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 38


 1948              		
 1949              	//    PAD	 ( -- a )
 1950              	// 	Return the address of a temporary buffer.
 1951              	
 1952 0e28 10020018 		.word	_HERE+MAPOFFSET
 1953 0e2c 03       	_PAD:	.byte  3
 1954 0e2d 504144   		.ascii "PAD"
 1955              		.p2align 2 	
 1956              	PAD:
 1957 0e30 42F804ED 		_NEST
 1958 0e34 FFF7F0FF 		BL	HERE
 1959 0e38 05F15005 		ADD	R5,R5,#80
 1960 0e3c 52F804FB 		_UNNEST
 1961              	
 1962              	//    TIB	 ( -- a )
 1963              	// 	Return the address of the terminal input buffer.
 1964              	
 1965 0e40 2C020018 		.word	_PAD+MAPOFFSET
 1966 0e44 03       	_TIB:	.byte  3
 1967 0e45 544942   		.ascii "TIB"
 1968              		.p2align 2 	
 1969              	TIB:
 1970 0e48 41F8045D 		_PUSH
 1971 0e4c 1D6B     		ldr r5,[r3,#TIB_OFS]
 1972 0e4e 7047     		_NEXT
 1973              	
 1974              	//    @EXECUTE	( a -- )
 1975              	// 	Execute vector stored in address a.
 1976              	
 1977 0e50 44020018 		.word	_TIB+MAPOFFSET
 1978 0e54 08       	_ATEXE:	.byte   8
 1979 0e55 40455845 		.ascii "@EXECUTE"
 1979      43555445 
 1980 0e5d 0000BF   		.p2align 2 	
 1981              	ATEXE:
 1982 0e60 2C00     		MOVS	R4,R5
 1983 0e62 51F8045B 		_POP
 1984 0e66 2468     		LDR	R4,[R4]
 1985 0e68 44F00104 		ORR	R4,R4,#1
 1986 0e6c 18BF     	    IT NE 
 1987 0e6e 2047     		BXNE	R4
 1988 0e70 7047     		_NEXT
 1989              	
 1990              	//    CMOVE	( b1 b2 u -- )
 1991              	// 	Copy u bytes from b1 to b2.
 1992              	
 1993 0e72 54020018 		.word	_ATEXE+MAPOFFSET
 1994 0e76 05       	_CMOVE:	.byte   5
 1995 0e77 434D4F56 		.ascii "CMOVE"
 1995      45
 1996              		.p2align 2 	
 1997              	CMOVE:
 1998 0e7c 51F8046B 		LDR	R6,[R1],#4
 1999 0e80 51F8047B 		LDR	R7,[R1],#4
 2000 0e84 03E0     		B CMOV1
 2001              	CMOV0:
 2002 0e86 17F8014B 		LDRB	R4,[R7],#1
ARM GAS  stm32eforth.s 			page 39


 2003 0e8a 06F8014B 		STRB	R4,[R6],#1
 2004              	CMOV1:
 2005 0e8e 2D00     		MOVS	R5,R5
 2006 0e90 02D0     		BEQ	CMOV2
 2007 0e92 A5F10105 		SUB	R5,R5,#1
 2008 0e96 F6E7     		B CMOV0
 2009              	CMOV2:
 2010 0e98 51F8045B 		_POP
 2011 0e9c 7047     		_NEXT
 2012              	
 2013              	//    MOVE	( a1 a2 u -- )
 2014              	// 	Copy u words from a1 to a2.
 2015              	
 2016 0e9e 76020018 		.word	_CMOVE+MAPOFFSET
 2017 0ea2 04       	_MOVE:	.byte   4
 2018 0ea3 4D4F5645 		.ascii "MOVE"
 2019 0ea7 00       		.p2align 2 	
 2020              	MOVE:
 2021 0ea8 25F00305 		AND	R5,R5,#-4
 2022 0eac 51F8046B 		LDR	R6,[R1],#4
 2023 0eb0 51F8047B 		LDR	R7,[R1],#4
 2024 0eb4 03E0     		B MOVE1
 2025              	MOVE0:
 2026 0eb6 57F8044B 		LDR	R4,[R7],#4
 2027 0eba 46F8044B 		STR	R4,[R6],#4
 2028              	MOVE1:
 2029 0ebe 2D00     		MOVS	R5,R5
 2030 0ec0 02D0     		BEQ	MOVE2
 2031 0ec2 A5F10405 		SUB	R5,R5,#4
 2032 0ec6 F6E7     		B MOVE0
 2033              	MOVE2:
 2034 0ec8 51F8045B 		_POP
 2035 0ecc 7047     		_NEXT
 2036              	
 2037              	//    FILL	( b u c -- )
 2038              	// 	Fill u bytes of character c to area beginning at b.
 2039              	
 2040 0ece A2020018 		.word	_MOVE+MAPOFFSET
 2041 0ed2 04       	_FILL:	.byte   4
 2042 0ed3 46494C4C 		.ascii "FILL"
 2043 0ed7 00       		.p2align 2 	
 2044              	FILL:
 2045 0ed8 51F8046B 		LDR	R6,[R1],#4
 2046 0edc 51F8047B 		LDR	R7,[R1],#4
 2047              	FILL0:
 2048 0ee0 00E0     		B FILL1
 2049 0ee2 2D46     		MOV	R5,R5
 2050              	FILL1:
 2051 0ee4 07F8015B 		STRB	R5,[R7],#1
 2052 0ee8 3600     		MOVS	R6,R6
 2053 0eea 02D0     		BEQ	FILL2
 2054 0eec A6F10106 		SUB	R6,R6,#1
 2055 0ef0 F6E7     		B FILL0
 2056              	FILL2:
 2057 0ef2 51F8045B 		_POP
 2058 0ef6 7047     		_NEXT
 2059              	
ARM GAS  stm32eforth.s 			page 40


 2060              	//    PACK$	( b u a -- a )
 2061              	// 	Build a counted word with u characters from b. Null fill.
 2062              	
 2063 0ef8 D2020018 		.word	_FILL+MAPOFFSET
 2064 0efc 05       	_PACKS:	.byte  5
 2065 0efd 5041434B 		.ascii "PACK$$"
 2065      2424
 2066 0f03 00       		.p2align 2 	
 2067              	PACKS:
 2068 0f04 42F804ED 		_NEST
 2069 0f08 FFF72EFF 		BL	ALGND
 2070 0f0c FFF7C4FB 		BL	DUPP
 2071 0f10 FFF7A6FB 		BL	TOR			// strings only on cell boundary
 2072 0f14 FFF7D2FB 		BL	OVER
 2073 0f18 FFF722FC 		BL	PLUS
 2074 0f1c FFF74EFC 		BL	ONEP
 2075 0f20 FFF72DFB 		_DOLIT
 2076 0f24 FCFFFFFF 		.word	0xFFFFFFFC
 2077 0f28 FFF7DAFB 		BL	ANDD			// count mod cell
 2078 0f2c FFF727FB 		_DOLIT
 2079 0f30 00000000 		.word	0
 2080 0f34 FFF7B8FB 		BL	SWAP
 2081 0f38 FFF760FB 		BL	STORE			// null fill cell
 2082 0f3c FFF788FB 		BL	RAT
 2083 0f40 FFF7B4FC 		BL	DDUP
 2084 0f44 FFF76AFB 		BL	CSTOR
 2085 0f48 FFF738FC 		BL	ONEP			// save count
 2086 0f4c FFF7ACFB 		BL	SWAP
 2087 0f50 FFF794FF 		BL	CMOVE
 2088 0f54 FFF772FB 		BL	RFROM
 2089 0f58 52F804FB 		_UNNEST   			// move string
 2090              	
 2091              	// **************************************************************************
 2092              	//  Numeric output, single precision
 2093              	
 2094              	//    DIGIT	( u -- c )
 2095              	// 	Convert digit u to a character.
 2096              	
 2097 0f5c FC020018 		.word	_PACKS+MAPOFFSET
 2098 0f60 05       	_DIGIT:	.byte  5
 2099 0f61 44494749 		.ascii "DIGIT"
 2099      54
 2100 0f66 00BF     		.p2align 2 	
 2101              	DIGIT:
 2102 0f68 42F804ED 		_NEST
 2103 0f6c FFF707FB 		_DOLIT
 2104 0f70 09000000 		.word	9
 2105 0f74 FFF7A2FB 		BL	OVER
 2106 0f78 FFF7EEFC 		BL	LESS
 2107 0f7c 05F00705 		AND	R5,R5,#7
 2108 0f80 FFF7EEFB 		BL	PLUS
 2109 0f84 05F13005 		ADD	R5,R5,#'0'
 2110 0f88 52F804FB 		_UNNEST
 2111              	
 2112              	//    EXTRACT	( n base -- n c )
 2113              	// 	Extract the least significant digit from n.
 2114              	
ARM GAS  stm32eforth.s 			page 41


 2115 0f8c 60030018 		.word	_DIGIT+MAPOFFSET
 2116 0f90 07       	_EXTRC:	.byte  7
 2117 0f91 45585452 		.ascii "EXTRACT"
 2117      414354
 2118              		.p2align 2 	
 2119              	EXTRC:
 2120 0f98 42F804ED 		_NEST
 2121 0f9c FFF7EFFA 		_DOLIT
 2122 0fa0 00000000 		.word	0
 2123 0fa4 FFF780FB 		BL	SWAP
 2124 0fa8 FFF73AFE 		BL	UMMOD
 2125 0fac FFF77CFB 		BL	SWAP
 2126 0fb0 FFF7DAFF 		BL	DIGIT
 2127 0fb4 52F804FB 		_UNNEST
 2128              	
 2129              	//    <#	  ( -- )
 2130              	// 	Initiate the numeric output process.
 2131              	
 2132 0fb8 90030018 		.word	_EXTRC+MAPOFFSET
 2133 0fbc 02       	_BDIGS:	.byte  2
 2134 0fbd 3C23     		.ascii "<#"
 2135 0fbf 00       		.p2align 2 	
 2136              	BDIGS:
 2137 0fc0 42F804ED 		_NEST
 2138 0fc4 FFF734FF 		BL	PAD
 2139 0fc8 FFF7A6FD 		BL	HLD
 2140 0fcc FFF716FB 		BL	STORE
 2141 0fd0 52F804FB 		_UNNEST
 2142              	
 2143              	//    HOLD	( c -- )
 2144              	// 	Insert a character into the numeric output string.
 2145              	
 2146 0fd4 BC030018 		.word	_BDIGS+MAPOFFSET
 2147 0fd8 04       	_HOLD:	.byte  4
 2148 0fd9 484F4C44 		.ascii "HOLD"
 2149 0fdd 0000BF   		.p2align 2 	
 2150              	HOLD:
 2151 0fe0 42F804ED 		_NEST
 2152 0fe4 FFF798FD 		BL	HLD
 2153 0fe8 FFF712FB 		BL	AT
 2154 0fec FFF7EEFB 		BL	ONEM
 2155 0ff0 FFF752FB 		BL	DUPP
 2156 0ff4 FFF790FD 		BL	HLD
 2157 0ff8 FFF700FB 		BL	STORE
 2158 0ffc FFF70EFB 		BL	CSTOR
 2159 1000 52F804FB 		_UNNEST
 2160              	
 2161              	//    #	   ( u -- u )
 2162              	// 	Extract one digit from u and append the digit to output string.
 2163              	
 2164 1004 D8030018 		.word	_HOLD+MAPOFFSET
 2165 1008 01       	_DIG:	.byte  1
 2166 1009 23       		.ascii "#"
 2167 100a 00BF     		.p2align 2 	
 2168              	DIG:
 2169 100c 42F804ED 		_NEST
 2170 1010 FFF74AFD 		BL	BASE
ARM GAS  stm32eforth.s 			page 42


 2171 1014 FFF7FCFA 		BL	AT
 2172 1018 FFF7BEFF 		BL	EXTRC
 2173 101c FFF7E0FF 		BL	HOLD
 2174 1020 52F804FB 		_UNNEST
 2175              	
 2176              	//    #S	  ( u -- 0 )
 2177              	// 	Convert u until all digits are added to the output string.
 2178              	
 2179 1024 08040018 		.word	_DIG+MAPOFFSET
 2180 1028 02       	_DIGS:	.byte  2
 2181 1029 2353     		.ascii "#S"
 2182 102b 00       		.p2align 2 	
 2183              	DIGS:
 2184 102c 42F804ED 		_NEST
 2185              	DIGS1:
 2186 1030 FFF7ECFF 	    BL	DIG
 2187 1034 FFF730FB 		BL	DUPP
 2188 1038 FFF7C4FA 		BL	QBRAN
 2189 103c 42040018 		.word	DIGS2+MAPOFFSET
 2190 1040 F6E7     		B	DIGS1
 2191              	DIGS2:
 2192 1042 52F804FB 		  _UNNEST
 2193              	
 2194              	//    SIGN	( n -- )
 2195              	// 	Add a minus sign to the numeric output string.
 2196              	
 2197 1046 28040018 		.word	_DIGS+MAPOFFSET
 2198 104a 04       	_SIGN:	.byte  4
 2199 104b 5349474E 		.ascii "SIGN"
 2200 104f 00       		.p2align 2 	
 2201              	SIGN:
 2202 1050 42F804ED 		_NEST
 2203 1054 FFF73AFB 		BL	ZLESS
 2204 1058 FFF7B4FA 		BL	QBRAN
 2205 105c 6C040018 		.word	SIGN1+MAPOFFSET
 2206 1060 FFF78DFA 		_DOLIT
 2207 1064 2D000000 		.word	'-'
 2208 1068 FFF7BAFF 		BL	HOLD
 2209              	SIGN1:
 2210 106c 52F804FB 		  _UNNEST
 2211              	
 2212              	//    #>	  ( w -- b u )
 2213              	// 	Prepare the outputDCB to be TYPE'd.
 2214              	
 2215 1070 4A040018 		.word	_SIGN+MAPOFFSET
 2216 1074 02       	_EDIGS:	.byte  2
 2217 1075 233E     		.ascii "#>"
 2218 1077 00       		.p2align 2 	
 2219              	EDIGS:
 2220 1078 42F804ED 		_NEST
 2221 107c FFF704FB 		BL	DROP
 2222 1080 FFF74AFD 		BL	HLD
 2223 1084 FFF7C4FA 		BL	AT
 2224 1088 FFF7D2FE 		BL	PAD
 2225 108c FFF716FB 		BL	OVER
 2226 1090 FFF76EFB 		BL	SUBB
 2227 1094 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 43


 2228              	
 2229              	//    str	 ( n -- b u )
 2230              	// 	Convert a signed integer to a numeric string.
 2231              	
 2232              	// 	.word	_EDIGS+MAPOFFSET
 2233              	// _STRR	.byte  3
 2234              	// 	.ascii "str"
 2235              	// 	.p2align 2 	
 2236              	STRR:
 2237 1098 42F804ED 		_NEST
 2238 109c FFF7FCFA 		BL	DUPP
 2239 10a0 FFF7DEFA 		BL	TOR
 2240 10a4 FFF72CFC 		BL	ABSS
 2241 10a8 FFF78AFF 		BL	BDIGS
 2242 10ac FFF7BEFF 		BL	DIGS
 2243 10b0 FFF7C4FA 		BL	RFROM
 2244 10b4 FFF7CCFF 		BL	SIGN
 2245 10b8 FFF7DEFF 		BL	EDIGS
 2246 10bc 52F804FB 		_UNNEST
 2247              	
 2248              	//    HEX	 ( -- )
 2249              	// 	Use radix 16 as base for numeric conversions.
 2250              	
 2251 10c0 74040018 		.word	_EDIGS+MAPOFFSET
 2252 10c4 03       	_HEX:	.byte  3
 2253 10c5 484558   		.ascii "HEX"
 2254              		.p2align 2 	
 2255              	HEX:
 2256 10c8 42F804ED 		_NEST
 2257 10cc FFF757FA 		_DOLIT
 2258 10d0 10000000 		.word	16
 2259 10d4 FFF7E8FC 		BL	BASE
 2260 10d8 FFF790FA 		BL	STORE
 2261 10dc 52F804FB 		_UNNEST
 2262              	
 2263              	//    DECIMAL	( -- )
 2264              	// 	Use radix 10 as base for numeric conversions.
 2265              	
 2266 10e0 C4040018 		.word	_HEX+MAPOFFSET
 2267 10e4 07       	_DECIM:	.byte  7
 2268 10e5 44454349 		.ascii "DECIMAL"
 2268      4D414C
 2269              		.p2align 2 	
 2270              	DECIM:
 2271 10ec 42F804ED 		_NEST
 2272 10f0 FFF745FA 		_DOLIT
 2273 10f4 0A000000 		.word	10
 2274 10f8 FFF7D6FC 		BL	BASE
 2275 10fc FFF77EFA 		BL	STORE
 2276 1100 52F804FB 		_UNNEST
 2277              	
 2278              	// **************************************************************************
 2279              	//  Numeric input, single precision
 2280              	
 2281              	//    DIGIT?	( c base -- u t )
 2282              	// 	Convert a character to its numeric value. A flag indicates success.
 2283              	
ARM GAS  stm32eforth.s 			page 44


 2284 1104 E4040018 		.word	_DECIM+MAPOFFSET
 2285 1108 06       	_DIGTQ:	.byte  6
 2286 1109 44494749 		.ascii "DIGIT?"
 2286      543F
 2287 110f 00       		.p2align 2 	
 2288              	DIGTQ:
 2289 1110 42F804ED 		_NEST
 2290 1114 FFF7A4FA 		BL	TOR
 2291 1118 FFF731FA 		_DOLIT
 2292 111c 30000000 		.word	'0'
 2293 1120 FFF726FB 		BL	SUBB
 2294 1124 FFF72BFA 		_DOLIT
 2295 1128 09000000 		.word	9
 2296 112c FFF7C6FA 		BL	OVER
 2297 1130 FFF712FC 		BL	LESS
 2298 1134 FFF746FA 		BL	QBRAN
 2299 1138 5C050018 		.word	DGTQ1+MAPOFFSET
 2300 113c FFF71FFA 		_DOLIT
 2301 1140 07000000 		.word	7
 2302 1144 FFF714FB 		BL	SUBB
 2303 1148 FFF7A6FA 		BL	DUPP
 2304 114c FFF717FA 		_DOLIT
 2305 1150 0A000000 		.word	10
 2306 1154 FFF700FC 		BL	LESS
 2307 1158 FFF7CCFA 		BL	ORR
 2308              	DGTQ1:
 2309 115c FFF79CFA 	  BL	DUPP
 2310 1160 FFF76CFA 		BL	RFROM
 2311 1164 FFF7ECFB 		BL	ULESS
 2312 1168 52F804FB 		_UNNEST
 2313              	
 2314              	//    NUMBER?	( a -- n T | a F )
 2315              	// 	Convert a number word to integer. Push a flag on tos.
 2316              	
 2317 116c 08050018 		.word	_DIGTQ+MAPOFFSET
 2318 1170 07       	_NUMBQ:	.byte  7
 2319 1171 4E554D42 		.ascii "NUMBER?"
 2319      45523F
 2320              		.p2align 2 	
 2321              	NUMBQ:
 2322 1178 42F804ED 		_NEST
 2323 117c FFF794FC 		BL	BASE
 2324 1180 FFF746FA 		BL	AT
 2325 1184 FFF76CFA 		BL	TOR
 2326 1188 FFF7F9F9 		_DOLIT
 2327 118c 00000000 		.word	0
 2328 1190 FFF794FA 		BL	OVER
 2329 1194 FFF730FC 		BL	COUNT
 2330 1198 FFF790FA 		BL	OVER
 2331 119c FFF748FA 		BL	CAT
 2332 11a0 FFF7EDF9 		_DOLIT
 2333 11a4 24000000 		.word	'$'
 2334 11a8 FFF7BEFB 		BL	EQUAL
 2335 11ac FFF70AFA 		BL	QBRAN
 2336 11b0 C8050018 		.word	NUMQ1+MAPOFFSET
 2337 11b4 FFF788FF 		BL	HEX
 2338 11b8 FFF776FA 		BL	SWAP
ARM GAS  stm32eforth.s 			page 45


 2339 11bc FFF7FEFA 		BL	ONEP
 2340 11c0 FFF772FA 		BL	SWAP
 2341 11c4 FFF702FB 		BL	ONEM
 2342              	NUMQ1:
 2343 11c8 FFF778FA 		BL	OVER
 2344 11cc FFF730FA 		BL	CAT
 2345 11d0 FFF7D5F9 		_DOLIT
 2346 11d4 2D000000 		.word	'-'
 2347 11d8 FFF7A6FB 		BL	EQUAL
 2348 11dc FFF740FA 		BL	TOR
 2349 11e0 FFF762FA 		BL	SWAP
 2350 11e4 FFF734FA 		BL	RAT
 2351 11e8 FFF7C2FA 		BL	SUBB
 2352 11ec FFF75CFA 		BL	SWAP
 2353 11f0 FFF72EFA 		BL	RAT
 2354 11f4 FFF7B4FA 		BL	PLUS
 2355 11f8 FFF73AFB 		BL	QDUP
 2356 11fc FFF7E2F9 		BL	QBRAN
 2357 1200 8C060018 		.word	NUMQ6+MAPOFFSET
 2358 1204 FFF7E2FA 		BL	ONEM
 2359 1208 FFF72AFA 		BL	TOR
 2360              	NUMQ2:
 2361 120c FFF744FA 		BL	DUPP
 2362 1210 FFF726FA 		BL	TOR
 2363 1214 FFF70CFA 		BL	CAT
 2364 1218 FFF746FC 		BL	BASE
 2365 121c FFF7F8F9 		BL	AT
 2366 1220 FFF776FF 		BL	DIGTQ
 2367 1224 FFF7CEF9 		BL	QBRAN
 2368 1228 70060018 		.word	NUMQ4+MAPOFFSET
 2369 122c FFF73CFA 		BL	SWAP
 2370 1230 FFF73AFC 		BL	BASE
 2371 1234 FFF7ECF9 		BL	AT
 2372 1238 FFF7A2FA 		BL	STAR
 2373 123c FFF790FA 		BL	PLUS
 2374 1240 FFF7FCF9 		BL	RFROM
 2375 1244 FFF7BAFA 		BL	ONEP
 2376 1248 FFF7ADF9 		BL	DONXT
 2377 124c 0C060018 		.word	NUMQ2+MAPOFFSET
 2378 1250 FFF7FEF9 		BL	RAT
 2379 1254 FFF728FA 		BL	SWAP
 2380 1258 FFF716FA 		BL	DROP
 2381 125c FFF7B2F9 		BL	QBRAN
 2382 1260 68060018 		.word	NUMQ3+MAPOFFSET
 2383 1264 FFF744FB 		BL	NEGAT
 2384              	NUMQ3:
 2385 1268 FFF71EFA 		BL	SWAP
 2386 126c 00F00CB8 		B.W	NUMQ5
 2387              	NUMQ4:
 2388 1270 FFF7E4F9 		BL	RFROM
 2389 1274 FFF7E2F9 		BL	RFROM
 2390 1278 FFF70EFB 		BL	DDROP
 2391 127c FFF70CFB 		BL	DDROP
 2392 1280 FFF77DF9 		_DOLIT
 2393 1284 00000000 		.word	0
 2394              	NUMQ5:
 2395 1288 FFF706FA 		BL	DUPP
ARM GAS  stm32eforth.s 			page 46


 2396              	NUMQ6:
 2397 128c FFF7D6F9 		BL	RFROM
 2398 1290 FFF702FB 		BL	DDROP
 2399 1294 FFF7D2F9 		BL	RFROM
 2400 1298 FFF706FC 		BL	BASE
 2401 129c FFF7AEF9 		BL	STORE
 2402 12a0 52F804FB 		_UNNEST
 2403              	
 2404              	// **************************************************************************
 2405              	//  Basic I/O
 2406              	
 2407              	//    KEY	 ( -- c )
 2408              	// 	Wait for and return an input character.
 2409              	
 2410 12a4 70050018 		.word	_NUMBQ+MAPOFFSET
 2411 12a8 03       	_KEY:	.byte  3
 2412 12a9 4B4559   		.ascii "KEY"
 2413              		.p2align 2 	
 2414              	KEY:
 2415 12ac 42F804ED 		_NEST
 2416              	KEY1:
 2417 12b0 FFF73AF9 		BL	QRX
 2418 12b4 FFF786F9 		BL	QBRAN
 2419 12b8 B0060018 		.word	KEY1+MAPOFFSET
 2420              	// CTRL-C reboot
 2421 12bc FFF7ECF9 		BL DUPP 
 2422 12c0 FFF75DF9 		BL DOLIT 
 2423 12c4 03000000 		.word 3 
 2424 12c8 FFF72EFB 		BL EQUAL 
 2425 12cc FFF706FB 		BL INVER
 2426 12d0 FFF778F9 		BL QBRAN
 2427 12d4 ACF8FF17 		.word REBOOT+MAPOFFSET 
 2428 12d8 52F804FB 		_UNNEST
 2429              	
 2430              	//    SPACE	( -- )
 2431              	// 	Send the blank character to the output device.
 2432              	
 2433 12dc A8060018 		.word	_KEY+MAPOFFSET
 2434 12e0 05       	_SPACE:	.byte  5
 2435 12e1 53504143 		.ascii "SPACE"
 2435      45
 2436 12e6 00BF     		.p2align 2 	
 2437              	SPACE:
 2438 12e8 42F804ED 		_NEST
 2439 12ec FFF796FA 		BL	BLANK
 2440 12f0 FFF734F9 		BL	EMIT
 2441 12f4 52F804FB 		_UNNEST
 2442              	
 2443              	//    SPACES	( +n -- )
 2444              	// 	Send n spaces to the output device.
 2445              	
 2446 12f8 E0060018 		.word	_SPACE+MAPOFFSET
 2447 12fc 06       	_SPACS:	.byte  6
 2448 12fd 53504143 		.ascii "SPACES"
 2448      4553
 2449 1303 00       		.p2align 2 	
 2450              	SPACS:
ARM GAS  stm32eforth.s 			page 47


 2451 1304 42F804ED 		_NEST
 2452 1308 FFF739F9 		_DOLIT
 2453 130c 00000000 		.word	0
 2454 1310 FFF73AFB 		BL	MAX
 2455 1314 FFF7A4F9 		BL	TOR
 2456 1318 00F002B8 		B.W	CHAR2
 2457              	CHAR1:
 2458 131c FFF7E4FF 		BL	SPACE
 2459              	CHAR2:
 2460 1320 FFF741F9 		BL	DONXT
 2461 1324 1C070018 		.word	CHAR1+MAPOFFSET
 2462 1328 52F804FB 		_UNNEST
 2463              	
 2464              	//    TYPE	( b u -- )
 2465              	// 	Output u characters from b.
 2466              	
 2467 132c FC060018 		.word	_SPACS+MAPOFFSET
 2468 1330 04       	_TYPEE:	.byte	4
 2469 1331 54595045 		.ascii "TYPE"
 2470 1335 0000BF   		.p2align 2 	
 2471              	TYPEE:
 2472 1338 42F804ED 		_NEST
 2473 133c FFF790F9 		BL  TOR   // ( a+1 -- R: u )
 2474 1340 05E0     		B	TYPE2
 2475              	TYPE1:  
 2476 1342 FFF759FB 		BL  COUNT
 2477 1346 FFF71BFD 		BL	TCHAR
 2478 134a FFF707F9 		BL	EMIT
 2479              	TYPE2:  
 2480 134e FFF72AF9 		BL  DONXT  
 2481 1352 42070018 		.word	TYPE1+MAPOFFSET
 2482 1356 FFF797F9 		BL	DROP
 2483 135a 52F804FB 		_UNNEST
 2484              	
 2485              	//    CR	  ( -- )
 2486              	// 	Output a carriage return and a line feed.
 2487              	
 2488 135e 30070018 		.word	_TYPEE+MAPOFFSET
 2489 1362 02       	_CR:	.byte  2
 2490 1363 4352     		.ascii "CR"
 2491 1365 0000BF   		.p2align 2 	
 2492              	CR:
 2493 1368 42F804ED 		_NEST
 2494 136c FFF707F9 		_DOLIT
 2495 1370 0D000000 		.word	CRR
 2496 1374 FFF7F2F8 		BL	EMIT
 2497 1378 FFF701F9 		_DOLIT
 2498 137c 0A000000 		.word	LF
 2499 1380 FFF7ECF8 		BL	EMIT
 2500 1384 52F804FB 		_UNNEST
 2501              	
 2502              	//    do_$	( -- a )
 2503              	// 	Return the address of a compiled string.
 2504              	//  adjust return address to skip over it.
 2505              	
 2506              	// 	.word	_CR+MAPOFFSET
 2507              	// _DOSTR	.byte  COMPO+3
ARM GAS  stm32eforth.s 			page 48


 2508              	// 	.ascii "do$$"
 2509              	// 	.p2align 2 	
 2510              	DOSTR:
 2511 1388 42F804ED 		_NEST     
 2512              	/* compiled string address is 2 levels deep */
 2513 138c FFF756F9 		BL	RFROM	// { -- a1 }
 2514 1390 FFF754F9 		BL	RFROM	//  {a1 -- a1 a2 } b0 set
 2515 1394 FFF71AFA 		BL	ONEM	//  clear b0
 2516 1398 FFF77EF9 		BL	DUPP	// {a1 a2 -- a1 a2 a2 }
 2517 139c FFF72CFB 		BL	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2518 13a0 FFF7DEF9 		BL	PLUS	// { -- a1 a2 a2+1+c }
 2519 13a4 FFF7E0FC 		BL	ALGND	//  end of string
 2520 13a8 FFF708FA 		BL	ONEP	//  restore b0, this result in return address 2 level deep.
 2521 13ac FFF758F9 		BL	TOR		//  address after string { -- a1 a2 }
 2522 13b0 FFF77AF9 		BL	SWAP	//  count tugged
 2523 13b4 FFF754F9 		BL	TOR     //  ( -- a2) is string address
 2524 13b8 52F804FB 		_UNNEST
 2525              	
 2526              	//    $"|	( -- a )
 2527              	// 	Run time routine compiled by _". Return address of a compiled string.
 2528              	
 2529              	// 	.word	_DOSTR+MAPOFFSET
 2530              	// _STRQP	.byte  COMPO+3
 2531              	// 	.ascii "$\"|"
 2532              	// 	.p2align 2 	
 2533              	STRQP:
 2534 13bc 42F804ED 		_NEST
 2535 13c0 FFF7E2FF 		BL	DOSTR
 2536 13c4 52F804FB 		_UNNEST			// force a call to dostr
 2537              	
 2538              	//    .$	( a -- )
 2539              	// 	Run time routine of ." . Output a compiled string.
 2540              	
 2541              	// 	.word	_STRQP+MAPOFFSET
 2542              	// _DOTST	.byte  COMPO+2
 2543              	// 	.ascii ".$$"
 2544              	// 	.p2align 2 	
 2545              	DOTST:
 2546 13c8 42F804ED 		_NEST
 2547 13cc FFF714FB 		BL	COUNT // ( -- a+1 c )
 2548 13d0 FFF7B2FF 		BL	TYPEE
 2549 13d4 52F804FB 		_UNNEST
 2550              	
 2551              	//    ."|	( -- )
 2552              	// 	Run time routine of ." . Output a compiled string.
 2553              	
 2554              	// 	.word	_DOTST+MAPOFFSET
 2555              	// _DOTQP	.byte  COMPO+3
 2556              	// 	.ascii ".""|"
 2557              	// 	.p2align 2 	
 2558              	DOTQP:
 2559 13d8 42F804ED 		_NEST
 2560 13dc FFF7D4FF 		BL	DOSTR
 2561 13e0 FFF7F2FF 		BL	DOTST
 2562 13e4 52F804FB 		_UNNEST
 2563              	
 2564              	//    .R	  ( n +n -- )
ARM GAS  stm32eforth.s 			page 49


 2565              	// 	Display an integer in a field of n columns, right justified.
 2566              	
 2567 13e8 62070018 		.word	_CR+MAPOFFSET
 2568 13ec 02       	_DOTR:	.byte  2
 2569 13ed 2E52     		.ascii ".R"
 2570 13ef 00       		.p2align 2 	
 2571              	DOTR:
 2572 13f0 42F804ED 		_NEST
 2573 13f4 FFF734F9 		BL	TOR
 2574 13f8 FFF74EFE 		BL	STRR
 2575 13fc FFF71EF9 		BL	RFROM
 2576 1400 FFF75CF9 		BL	OVER
 2577 1404 FFF7B4F9 		BL	SUBB
 2578 1408 FFF77CFF 		BL	SPACS
 2579 140c FFF794FF 		BL	TYPEE
 2580 1410 52F804FB 		_UNNEST
 2581              	
 2582              	//    U.R	 ( u +n -- )
 2583              	// 	Display an unsigned integer in n column, right justified.
 2584              	
 2585 1414 EC070018 		.word	_DOTR+MAPOFFSET
 2586 1418 03       	_UDOTR:	.byte  3
 2587 1419 552E52   		.ascii "U.R"
 2588              		.p2align 2 	
 2589              	UDOTR:
 2590 141c 42F804ED 		_NEST
 2591 1420 FFF71EF9 		BL	TOR
 2592 1424 FFF7CCFD 		BL	BDIGS
 2593 1428 FFF700FE 		BL	DIGS
 2594 142c FFF724FE 		BL	EDIGS
 2595 1430 FFF704F9 		BL	RFROM
 2596 1434 FFF742F9 		BL	OVER
 2597 1438 FFF79AF9 		BL	SUBB
 2598 143c FFF762FF 		BL	SPACS
 2599 1440 FFF77AFF 		BL	TYPEE
 2600 1444 52F804FB 		_UNNEST
 2601              	
 2602              	//    U.	  ( u -- )
 2603              	// 	Display an unsigned integer in free format.
 2604              	
 2605 1448 18080018 		.word	_UDOTR+MAPOFFSET
 2606 144c 02       	_UDOT:	.byte  2
 2607 144d 552E     		.ascii "U."
 2608 144f 00       		.p2align 2 	
 2609              	UDOT:
 2610 1450 42F804ED 		_NEST
 2611 1454 FFF7B4FD 		BL	BDIGS
 2612 1458 FFF7E8FD 		BL	DIGS
 2613 145c FFF70CFE 		BL	EDIGS
 2614 1460 FFF742FF 		BL	SPACE
 2615 1464 FFF768FF 		BL	TYPEE
 2616 1468 52F804FB 		_UNNEST
 2617              	
 2618              	//    .	   ( w -- )
 2619              	// 	Display an integer in free format, preceeded by a space.
 2620              	
 2621 146c 4C080018 		.word	_UDOT+MAPOFFSET
ARM GAS  stm32eforth.s 			page 50


 2622 1470 01       	_DOT:	.byte  1
 2623 1471 2E       		.ascii "."
 2624 1472 00BF     		.p2align 2 	
 2625              	DOT:
 2626 1474 42F804ED 		_NEST
 2627 1478 FFF716FB 		BL	BASE
 2628 147c FFF7C8F8 		BL	AT
 2629 1480 FFF77DF8 		_DOLIT
 2630 1484 0A000000 		.word	10
 2631 1488 FFF73EF9 		BL	XORR			// ?decimal
 2632 148c FFF79AF8 		BL	QBRAN
 2633 1490 9C080018 		.word	DOT1+MAPOFFSET
 2634 1494 FFF7DCFF 		BL	UDOT
 2635 1498 52F804FB 		_UNNEST			// no,display unsigned
 2636              	DOT1:
 2637 149c FFF7FCFD 	    BL	STRR
 2638 14a0 FFF722FF 		BL	SPACE
 2639 14a4 FFF748FF 		BL	TYPEE
 2640 14a8 52F804FB 		_UNNEST			// yes, display signed
 2641              	
 2642              	//    ?	   ( a -- )
 2643              	// 	Display the contents in a memory cell.
 2644              	
 2645 14ac 70080018 		.word	_DOT+MAPOFFSET
 2646 14b0 01       	_QUEST:	.byte  1
 2647 14b1 3F       		.ascii "?"
 2648 14b2 00BF     		.p2align 2 	
 2649              	QUEST:
 2650 14b4 42F804ED 		_NEST
 2651 14b8 FFF7AAF8 		BL	AT
 2652 14bc FFF7DAFF 		BL	DOT
 2653 14c0 52F804FB 		_UNNEST
 2654              	
 2655              	// **************************************************************************
 2656              	//  Parsing
 2657              	
 2658              	//    parse	( b u c -- b u delta //  string> )
 2659              	// 	Scan word delimited by c. Return found string and its offset.
 2660              	
 2661              	// 	.word	_QUEST+MAPOFFSET
 2662              	// _PARS	.byte  5
 2663              	// 	.ascii "parse"
 2664              	// 	.p2align 2 	
 2665              	PARS:
 2666 14c4 42F804ED 		_NEST
 2667 14c8 FFF7F3FA 		BL	TEMP
 2668 14cc FFF796F8 		BL	STORE
 2669 14d0 FFF7F4F8 		BL	OVER
 2670 14d4 FFF7C4F8 		BL	TOR
 2671 14d8 FFF7DEF8 		BL	DUPP
 2672 14dc FFF772F8 		BL	QBRAN
 2673 14e0 D2090018 		.word	PARS8+MAPOFFSET
 2674 14e4 FFF772F9 		BL	ONEM
 2675 14e8 FFF7E3FA 		BL	TEMP
 2676 14ec FFF790F8 		BL	AT
 2677 14f0 FFF794F9 		BL	BLANK
 2678 14f4 FFF718FA 		BL	EQUAL
ARM GAS  stm32eforth.s 			page 51


 2679 14f8 FFF764F8 		BL	QBRAN
 2680 14fc 4C090018 		.word	PARS3+MAPOFFSET
 2681 1500 FFF7AEF8 		BL	TOR
 2682              	PARS1:
 2683 1504 FFF78AF9 		BL	BLANK
 2684 1508 FFF7D8F8 		BL	OVER
 2685 150c FFF790F8 		BL	CAT			// skip leading blanks 
 2686 1510 FFF72EF9 		BL	SUBB
 2687 1514 FFF7DAF8 		BL	ZLESS
 2688 1518 FFF7E0F9 		BL	INVER
 2689 151c FFF752F8 		BL	QBRAN
 2690 1520 48090018 		.word	PARS2+MAPOFFSET
 2691 1524 FFF74AF9 		BL	ONEP
 2692 1528 FFF73DF8 		BL	DONXT
 2693 152c 04090018 		.word	PARS1+MAPOFFSET
 2694 1530 FFF784F8 		BL	RFROM
 2695 1534 FFF7A8F8 		BL	DROP
 2696 1538 FFF721F8 		_DOLIT
 2697 153c 00000000 		.word	0
 2698 1540 FFF7AAF8 		BL	DUPP
 2699 1544 52F804FB 		_UNNEST
 2700              	PARS2:
 2701 1548 FFF778F8 	  BL	RFROM
 2702              	PARS3:
 2703 154c FFF7B6F8 		BL	OVER
 2704 1550 FFF7AAF8 		BL	SWAP
 2705 1554 FFF784F8 		BL	TOR
 2706              	PARS4:
 2707 1558 FFF7ABFA 		BL	TEMP
 2708 155c FFF758F8 		BL	AT
 2709 1560 FFF7ACF8 		BL	OVER
 2710 1564 FFF764F8 		BL	CAT
 2711 1568 FFF702F9 		BL	SUBB			// scan for delimiter
 2712 156c FFF7A1FA 		BL	TEMP
 2713 1570 FFF74EF8 		BL	AT
 2714 1574 FFF752F9 		BL	BLANK
 2715 1578 FFF7D6F9 		BL	EQUAL
 2716 157c FFF722F8 		BL	QBRAN
 2717 1580 88090018 		.word	PARS5+MAPOFFSET
 2718 1584 FFF7A2F8 		BL	ZLESS
 2719              	PARS5:
 2720 1588 FFF71CF8 		BL	QBRAN
 2721 158c A6090018 		.word	PARS6+MAPOFFSET
 2722 1590 FFF714F9 		BL	ONEP
 2723 1594 FFF707F8 		BL	DONXT
 2724 1598 58090018 		.word	PARS4+MAPOFFSET
 2725 159c FFF77CF8 		BL	DUPP
 2726 15a0 FFF75EF8 		BL	TOR
 2727 15a4 09E0     		B	PARS7
 2728              	PARS6:
 2729 15a6 FFF749F8 		BL	RFROM
 2730 15aa FFF76DF8 		BL	DROP
 2731 15ae FFF773F8 		BL	DUPP
 2732 15b2 FFF703F9 		BL	ONEP
 2733 15b6 FFF753F8 		BL	TOR
 2734              	PARS7:
 2735 15ba FFF77FF8 		BL	OVER
ARM GAS  stm32eforth.s 			page 52


 2736 15be FFF7D7F8 		BL	SUBB
 2737 15c2 FFF73BF8 		BL	RFROM
 2738 15c6 FFF739F8 		BL	RFROM
 2739 15ca FFF7D1F8 		BL	SUBB
 2740 15ce 52F804FB 		_UNNEST
 2741              	PARS8:
 2742 15d2 FFF773F8 		BL	OVER
 2743 15d6 FFF731F8 		BL	RFROM
 2744 15da FFF7C9F8 		BL	SUBB
 2745 15de 52F804FB 		_UNNEST
 2746              	
 2747              	//    PARSE	( c -- b u //  string> )
 2748              	// 	Scan input stream and return counted string delimited by c.
 2749              	
 2750 15e2 B0080018 		.word	_QUEST+MAPOFFSET
 2751 15e6 05       	_PARSE:	.byte  5
 2752 15e7 50415253 		.ascii "PARSE"
 2752      45
 2753              		.p2align 2 	
 2754              	PARSE:
 2755 15ec 42F804ED 		_NEST
 2756 15f0 FFF736F8 		BL	TOR
 2757 15f4 FFF728FC 		BL	TIB
 2758 15f8 FFF770FA 		BL	INN
 2759 15fc FFF708F8 		BL	AT
 2760 1600 FFF7AEF8 		BL	PLUS			// current input buffer pointer
 2761 1604 FFF774FA 		BL	NTIB
 2762 1608 FFF702F8 		BL	AT
 2763 160c FFF766FA 		BL	INN
 2764 1610 FEF7FEFF 		BL	AT
 2765 1614 FFF7ACF8 		BL	SUBB			// remaining count
 2766 1618 FFF710F8 		BL	RFROM
 2767 161c FFF752FF 		BL	PARS
 2768 1620 FFF75CFA 		BL	INN
 2769 1624 FFF7C4F9 		BL	PSTOR
 2770 1628 52F804FB 		_UNNEST
 2771              	
 2772              	//    .(	  ( -- )
 2773              	// 	Output following string up to next ) .
 2774              	
 2775 162c E6090018 		.word	_PARSE+MAPOFFSET
 2776 1630 82       	_DOTPR:	.byte  IMEDD+2
 2777 1631 2E28     		.ascii ".("
 2778 1633 00       		.p2align 2 	
 2779              	DOTPR:
 2780 1634 42F804ED 		_NEST
 2781 1638 FEF7A1FF 		_DOLIT
 2782 163c 29000000 		.word	')'
 2783 1640 FFF7D4FF 		BL	PARSE
 2784 1644 FFF778FE 		BL	TYPEE
 2785 1648 52F804FB 		_UNNEST
 2786              	
 2787              	//    (	   ( -- )
 2788              	// 	Ignore following string up to next ) . A comment.
 2789              	
 2790 164c 300A0018 		.word	_DOTPR+MAPOFFSET
 2791 1650 81       	_PAREN:	.byte  IMEDD+1
ARM GAS  stm32eforth.s 			page 53


 2792 1651 28       		.ascii "("
 2793 1652 00BF     		.p2align 2 	
 2794              	PAREN:
 2795 1654 42F804ED 		_NEST
 2796 1658 FEF791FF 		_DOLIT
 2797 165c 29000000 		.word	')'
 2798 1660 FFF7C4FF 		BL	PARSE
 2799 1664 FFF718F9 		BL	DDROP
 2800 1668 52F804FB 		_UNNEST
 2801              	
 2802              	//    \	   ( -- )
 2803              	// 	Ignore following text till the end of line.
 2804              	
 2805 166c 500A0018 		.word	_PAREN+MAPOFFSET
 2806 1670 81       	_BKSLA:	.byte  IMEDD+1
 2807 1671 27       		.byte	'\'
 2808 1672 00BF     		.p2align 2 	
 2809              	BKSLA:
 2810 1674 42F804ED 		_NEST
 2811 1678 FFF73AFA 		BL	NTIB
 2812 167c FEF7C8FF 		BL	AT
 2813 1680 FFF72CFA 		BL	INN
 2814 1684 FEF7BAFF 		BL	STORE
 2815 1688 52F804FB 		_UNNEST
 2816              	
 2817              	//    CHAR	( -- c )
 2818              	// 	Parse next word and return its first character.
 2819              	
 2820 168c 700A0018 		.word	_BKSLA+MAPOFFSET
 2821 1690 04       	_CHAR:	.byte  4
 2822 1691 43484152 		.ascii "CHAR"
 2823 1695 0000BF   		.p2align 2 	
 2824              	CHAR:
 2825 1698 42F804ED 		_NEST
 2826 169c FFF7BEF8 		BL	BLANK
 2827 16a0 FFF7A4FF 		BL	PARSE
 2828 16a4 FEF7F0FF 		BL	DROP
 2829 16a8 FEF7C2FF 		BL	CAT
 2830 16ac 52F804FB 		_UNNEST
 2831              	
 2832              	//    WORD	( c -- a //  string> )
 2833              	// 	Parse a word from input stream and copy it to code dictionary.
 2834              	
 2835 16b0 900A0018 		.word	_CHAR+MAPOFFSET
 2836 16b4 04       	_WORDD:	.byte  4
 2837 16b5 574F5244 		.ascii "WORD"
 2838 16b9 0000BF   		.p2align 2 	
 2839              	WORDD:
 2840 16bc 42F804ED 		_NEST
 2841 16c0 FFF794FF 		BL	PARSE
 2842 16c4 FFF7A8FB 		BL	HERE
 2843 16c8 FFF798F8 		BL	CELLP
 2844 16cc FFF71AFC 		BL	PACKS
 2845 16d0 52F804FB 		_UNNEST
 2846              	
 2847              	//    TOKEN	( -- a //  string> )
 2848              	// 	Parse a word from input stream and copy it to name dictionary.
ARM GAS  stm32eforth.s 			page 54


 2849              	
 2850 16d4 B40A0018 		.word	_WORDD+MAPOFFSET
 2851 16d8 05       	_TOKEN:	.byte  5
 2852 16d9 544F4B45 		.ascii "TOKEN"
 2852      4E
 2853 16de 00BF     		.p2align 2 	
 2854              	TOKEN:
 2855 16e0 42F804ED 		_NEST
 2856 16e4 FFF79AF8 		BL	BLANK
 2857 16e8 FFF7E8FF 		BL	WORDD
 2858 16ec 52F804FB 		_UNNEST
 2859              	
 2860              	// **************************************************************************
 2861              	//  Dictionary search
 2862              	
 2863              	//    NAME>	( na -- ca )
 2864              	// 	Return a code address given a name address.
 2865              	
 2866 16f0 D80A0018 		.word	_TOKEN+MAPOFFSET
 2867 16f4 05       	_NAMET:	.byte  5
 2868 16f5 4E414D45 		.ascii "NAME>"
 2868      3E
 2869 16fa 00BF     		.p2align 2 	
 2870              	NAMET:
 2871 16fc 42F804ED 		_NEST
 2872 1700 FFF77AF9 		BL	COUNT
 2873 1704 FEF73BFF 		_DOLIT
 2874 1708 1F000000 		.word	0x1F
 2875 170c FEF7E8FF 		BL	ANDD
 2876 1710 FFF726F8 		BL	PLUS
 2877 1714 FFF728FB 		BL	ALGND
 2878 1718 52F804FB 		_UNNEST
 2879              	
 2880              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2881              	// 	Compare u bytes in two strings. Return 0 if identical.
 2882              	//
 2883              	//  Picatout 2020-12-01, 
 2884              	//      Because of problem with .align directive that
 2885              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2886              	// 		words  to do a byte by byte comparison. 
 2887              	//
 2888 171c F40A0018 		.word	_NAMET+MAPOFFSET
 2889 1720 05       	_SAMEQ:	.byte  5
 2890 1721 53414D45 		.ascii "SAME?"
 2890      3F
 2891 1726 00BF     		.p2align 2	
 2892              	SAMEQ:
 2893 1728 42F804ED 		_NEST
 2894 172c FEF798FF 		BL	TOR
 2895 1730 00F01EB8 		B.W	SAME2
 2896              	SAME1:
 2897 1734 FEF7C2FF 		BL	OVER  // ( a1 a2 -- a1 a2 a1 )
 2898 1738 FEF78AFF 		BL	RAT   // a1 a2 a1 u 
 2899 173c FFF710F8 		BL	PLUS  // a1 a2 a1+u 
 2900 1740 FEF776FF 		BL	CAT	   // a1 a2 c1    		
 2901 1744 FEF7BAFF 		BL	OVER  // a1 a2 c1 a2 
 2902 1748 FEF782FF 		BL	RAT    
ARM GAS  stm32eforth.s 			page 55


 2903 174c FFF708F8 		BL	PLUS    
 2904 1750 FEF76EFF 		BL	CAT	  // a1 a2 c1 c2
 2905 1754 FFF70CF8 		BL	SUBB  
 2906 1758 FFF78AF8 		BL	QDUP
 2907 175c FEF732FF 		BL	QBRAN
 2908 1760 700B0018 		.word	SAME2+MAPOFFSET
 2909 1764 FEF76AFF 		BL	RFROM
 2910 1768 FEF78EFF 		BL	DROP
 2911 176c 52F804FB 		_UNNEST	// strings not equal
 2912              	SAME2:
 2913 1770 FEF719FF 		BL	DONXT
 2914 1774 340B0018 		.word	SAME1+MAPOFFSET
 2915 1778 FEF701FF 		_DOLIT
 2916 177c 00000000 		.word	0
 2917 1780 52F804FB 		_UNNEST	// strings equal
 2918              	
 2919              	//    find	( a na -- ca na | a F )
 2920              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2921              	
 2922              	//  Picatout 2020-12-01,  
 2923              	//		Modified from original. See comment for word "SAME?" 
 2924              	
 2925              	// 	.word	_SAMEQ+MAPOFFSET
 2926              	// _FIND	.byte  4
 2927              	// 	.ascii "find"
 2928              	// 	.p2align 2 	
 2929              	FIND:
 2930 1784 42F804ED 		_NEST
 2931 1788 FEF78EFF 		BL	SWAP			// na a	
 2932 178c FFF734F9 		BL	COUNT			// na a+1 count
 2933 1790 FEF782FF 		BL	DUPP 
 2934 1794 FFF78DF9 		BL	TEMP
 2935 1798 FEF730FF 		BL	STORE			// na a+1 count 
 2936 179c FEF760FF 		BL  TOR		// na a+1  R: count  
 2937 17a0 FEF782FF 		BL	SWAP			// a+1 na
 2938              	FIND1:
 2939 17a4 FEF778FF 		BL	DUPP			// a+1 na na
 2940 17a8 FEF70CFF 		BL	QBRAN
 2941 17ac F40B0018 		.word	FIND6+MAPOFFSET	// end of vocabulary
 2942 17b0 FEF772FF 		BL	DUPP			// a+1 na na
 2943 17b4 FEF73CFF 		BL	CAT			// a+1 na name1
 2944 17b8 FEF7E1FE 		_DOLIT
 2945 17bc 1FFFFFFF 		.word	MASKK
 2946 17c0 FEF78EFF 		BL	ANDD
 2947 17c4 FEF744FF 		BL	RAT			// a+1 na name1 count 
 2948 17c8 FEF79EFF 		BL	XORR			// a+1 na,  same length?
 2949 17cc FEF7FAFE 		BL	QBRAN
 2950 17d0 E00B0018 		.word	FIND2+MAPOFFSET
 2951 17d4 FFF71AF8 		BL	CELLM			// a+1 la
 2952 17d8 FEF71AFF 		BL	AT			// a+1 next_na
 2953 17dc FFF7E2BF 		B.w	FIND1			// try next word
 2954              	FIND2:   
 2955 17e0 FEF7ECFF 		BL	ONEP			// a+1 na+1
 2956 17e4 FFF765F9 		BL	TEMP
 2957 17e8 FEF712FF 		BL	AT			// a+1 na+1 count
 2958 17ec FFF79CFF 		BL	SAMEQ		// a+1 na+1 ? 
 2959              	FIND3:	
ARM GAS  stm32eforth.s 			page 56


 2960 17f0 00F00CB8 		B.w	FIND4
 2961              	FIND6:	
 2962 17f4 FEF722FF 		BL	RFROM			// a+1 0 name1 -- , no match
 2963 17f8 FEF746FF 		BL	DROP			// a+1 0
 2964 17fc FEF754FF 		BL	SWAP			// 0 a+1
 2965 1800 FEF7E4FF 		BL	ONEM			// 0 a
 2966 1804 FEF750FF 		BL	SWAP			// a 0 
 2967 1808 52F804FB 		_UNNEST			// return without a match
 2968              	FIND4:	
 2969 180c FEF7DAFE 		BL	QBRAN			// a+1 na+1
 2970 1810 240C0018 		.word	FIND5+MAPOFFSET	// found a match
 2971 1814 FEF7DAFF 		BL	ONEM			// a+1 na
 2972 1818 FEF7F8FF 		BL	CELLM			// a+4 la
 2973 181c FEF7F8FE 		BL	AT			// a+1 next_na
 2974 1820 FFF7C0BF 		B.w	FIND1			// compare next name
 2975              	FIND5:	
 2976 1824 FEF70AFF 		BL	RFROM			// a+1 na+1 count
 2977 1828 FEF72EFF 		BL	DROP			// a+1 na+1
 2978 182c FEF73CFF 		BL	SWAP			// na+1 a+1
 2979 1830 FEF72AFF 		BL	DROP			// na+1
 2980 1834 FEF7CAFF 		BL	ONEM			// na
 2981 1838 FEF72EFF 		BL	DUPP			// na na
 2982 183c FFF75EFF 		BL	NAMET			// na ca
 2983 1840 FEF732FF 		BL	SWAP			// ca na
 2984 1844 52F804FB 		_UNNEST			//  return with a match
 2985              	
 2986              	//    NAME?	( a -- ca na | a F )
 2987              	// 	Search all context vocabularies for a string.
 2988              	
 2989 1848 200B0018 		.word	_SAMEQ+MAPOFFSET
 2990 184c 05       	_NAMEQ:	.byte  5
 2991 184d 4E414D45 		.ascii "NAME?"
 2991      3F
 2992 1852 00BF     		.p2align 2 	
 2993              	NAMEQ:
 2994 1854 42F804ED 		_NEST
 2995 1858 FFF76AF9 		BL	CNTXT
 2996 185c FEF7D8FE 		BL	AT
 2997 1860 FFF790FF 		BL	FIND
 2998 1864 52F804FB 		_UNNEST
 2999              	
 3000              	// **************************************************************************
 3001              	//  Terminal input
 3002              	
 3003              	//    	  ( bot eot cur -- bot eot cur )
 3004              	// 	Backup the cursor by one character.
 3005              	
 3006              	// 	.word	_NAMEQ+MAPOFFSET
 3007              	// _BKSP	.byte  2
 3008              	// 	.ascii "^H"
 3009              	// 	.p2align 2 	
 3010              	BKSP:
 3011 1868 42F804ED 		_NEST
 3012 186c FEF7F8FE 		BL	TOR
 3013 1870 FEF724FF 		BL	OVER
 3014 1874 FEF7E2FE 		BL	RFROM
 3015 1878 FEF716FF 		BL	SWAP
ARM GAS  stm32eforth.s 			page 57


 3016 187c FEF71EFF 		BL	OVER
 3017 1880 FEF742FF 		BL	XORR
 3018 1884 FEF79EFE 		BL	QBRAN
 3019 1888 B00C0018 		.word	BACK1+MAPOFFSET
 3020 188c FEF777FE 		_DOLIT
 3021 1890 08000000 		.word	BKSPP
 3022 1894 FEF762FE 		BL	TECHO
 3023              	// 	BL	ATEXE
 3024 1898 FEF798FF 		BL	ONEM
 3025 189c FEF7BEFF 		BL	BLANK
 3026 18a0 FEF75CFE 		BL	TECHO
 3027              	// 	BL	ATEXE
 3028 18a4 FEF76BFE 		_DOLIT
 3029 18a8 08000000 		.word	BKSPP
 3030 18ac FEF756FE 		BL	TECHO
 3031              	// 	BL	ATEXE
 3032              	BACK1:
 3033 18b0 52F804FB 		  _UNNEST
 3034              	
 3035              	//    TAP	 ( bot eot cur c -- bot eot cur )
 3036              	// 	Accept and echo the key stroke and bump the cursor.
 3037              	
 3038              	// 	.word	_BKSP+MAPOFFSET
 3039              	// _TAP	.byte  3
 3040              	// 	.ascii "TAP"
 3041              	// 	.p2align 2 	
 3042              	TAP:
 3043 18b4 42F804ED 		_NEST
 3044 18b8 FEF7EEFE 		BL	DUPP
 3045 18bc FEF74EFE 		BL	TECHO
 3046              	// 	BL	ATEXE
 3047 18c0 FEF7FCFE 		BL	OVER
 3048 18c4 FEF7AAFE 		BL	CSTOR
 3049 18c8 FEF778FF 		BL	ONEP
 3050 18cc 52F804FB 		_UNNEST
 3051              	
 3052              	//    kTAP	( bot eot cur c -- bot eot cur )
 3053              	// 	Process a key stroke, CR or backspace.
 3054              	
 3055              	// 	.word	_TAP+MAPOFFSET
 3056              	// _KTAP	.byte  4
 3057              	// 	.ascii "kTAP"
 3058              	// 	.p2align 2 	
 3059              	KTAP:
 3060              	TTAP:
 3061 18d0 42F804ED 		_NEST
 3062 18d4 FEF7E0FE 		BL	DUPP
 3063 18d8 FEF751FE 		_DOLIT
 3064 18dc 0D000000 		.word	CRR
 3065 18e0 FEF712FF 		BL	XORR
 3066 18e4 FEF76EFE 		BL	QBRAN
 3067 18e8 180D0018 		.word	KTAP2+MAPOFFSET
 3068 18ec FEF747FE 		_DOLIT
 3069 18f0 08000000 		.word	BKSPP
 3070 18f4 FEF708FF 		BL	XORR
 3071 18f8 FEF764FE 		BL	QBRAN
 3072 18fc 100D0018 		.word	KTAP1+MAPOFFSET
ARM GAS  stm32eforth.s 			page 58


 3073 1900 FEF78CFF 		BL	BLANK
 3074 1904 FFF7D6FF 		BL	TAP
 3075 1908 52F804FB 		_UNNEST
 3076 190c 00000000 		.word	0			// patch
 3077              	KTAP1:
 3078 1910 FFF7AAFF 	  BL	BKSP
 3079 1914 52F804FB 		_UNNEST
 3080              	KTAP2:
 3081 1918 FEF7B6FE 	  BL	DROP
 3082 191c FEF7C4FE 		BL	SWAP
 3083 1920 FEF7B2FE 		BL	DROP
 3084 1924 FEF7B8FE 		BL	DUPP
 3085 1928 52F804FB 		_UNNEST
 3086              	
 3087              	//    ACCEPT	( b u -- b u )
 3088              	// 	Accept characters to input buffer. Return with actual count.
 3089              	
 3090 192c 4C0C0018 		.word	_NAMEQ+MAPOFFSET
 3091 1930 06       	_ACCEP:	.byte  6
 3092 1931 41434345 		.ascii "ACCEPT"
 3092      5054
 3093 1937 00       		.p2align 2 	
 3094              	ACCEP:
 3095 1938 42F804ED 		_NEST
 3096 193c FEF7BEFE 		BL	OVER
 3097 1940 FEF70EFF 		BL	PLUS
 3098 1944 FEF7BAFE 		BL	OVER
 3099              	ACCP1:
 3100 1948 FEF7B0FF 	  BL	DDUP
 3101 194c FEF7DCFE 		BL	XORR
 3102 1950 FEF738FE 		BL	QBRAN
 3103 1954 840D0018 		.word	ACCP4+MAPOFFSET
 3104 1958 FFF7A8FC 		BL	KEY
 3105 195c FEF79CFE 		BL	DUPP
 3106 1960 FEF75CFF 		BL	BLANK
 3107 1964 FEF70BFE 		_DOLIT
 3108 1968 7F000000 		.word	127
 3109 196c FFF742F9 		BL	WITHI
 3110 1970 FEF728FE 		BL	QBRAN
 3111 1974 7E0D0018 		.word	ACCP2+MAPOFFSET
 3112 1978 FFF79CFF 		BL	TAP
 3113 197c 01E0     		B	ACCP3
 3114              	ACCP2:
 3115 197e FFF7A7FF 	  BL	KTAP
 3116              	// 	BL	ATEXE
 3117              	ACCP3:	  
 3118 1982 E1E7     		B	ACCP1
 3119              	ACCP4:
 3120 1984 FEF780FE 	  BL	DROP
 3121 1988 FEF798FE 		BL	OVER
 3122 198c FEF7F0FE 		BL	SUBB
 3123 1990 52F804FB 		_UNNEST
 3124              	
 3125              	//    QUERY	( -- )
 3126              	// 	Accept input stream to terminal input buffer.
 3127              	
 3128 1994 300D0018 		.word	_ACCEP+MAPOFFSET
ARM GAS  stm32eforth.s 			page 59


 3129 1998 05       	_QUERY:	.byte  5
 3130 1999 51554552 		.ascii "QUERY"
 3130      59
 3131 199e 00BF     		.p2align 2 	
 3132              	QUERY:
 3133 19a0 42F804ED 		_NEST
 3134 19a4 FFF750FA 		BL	TIB
 3135 19a8 FEF7E9FD 		_DOLIT
 3136 19ac 50000000 		.word	80
 3137 19b0 FFF7C2FF 		BL	ACCEP
 3138 19b4 FFF79CF8 		BL	NTIB
 3139 19b8 FEF720FE 		BL	STORE
 3140 19bc FEF764FE 		BL	DROP
 3141 19c0 FEF7DDFD 		_DOLIT
 3142 19c4 00000000 		.word	0
 3143 19c8 FFF788F8 		BL	INN
 3144 19cc FEF716FE 		BL	STORE
 3145 19d0 52F804FB 		_UNNEST
 3146              	
 3147              	// **************************************************************************
 3148              	//  Error handling
 3149              	
 3150              	//    ABORT	( a -- )
 3151              	// 	Reset data stack and jump to QUIT.
 3152              	
 3153 19d4 980D0018 		.word	_QUERY+MAPOFFSET
 3154 19d8 05       	_ABORT:	.byte  5
 3155 19d9 41424F52 		.ascii "ABORT"
 3155      54
 3156 19de 00BF     		.p2align 2 	
 3157              	ABORT:
 3158 19e0 42F804ED 		_NEST
 3159 19e4 FFF780FC 		BL	SPACE
 3160 19e8 FFF706F8 		BL	COUNT
 3161 19ec FFF7A4FC 		BL	TYPEE
 3162 19f0 FEF7C5FD 		_DOLIT
 3163 19f4 3F000000 		.word	0X3F
 3164 19f8 FEF7B0FD 		BL	EMIT
 3165 19fc FFF7B4FC 		BL	CR
 3166 1a00 00F0B2F8 		BL	PRESE
 3167 1a04 00F0BCB8 		B.W	QUIT
 3168              	
 3169              	//    _abort"	( f -- )
 3170              	// 	Run time routine of ABORT" . Abort with a message.
 3171              	
 3172              	// 	.word	_ABORT+MAPOFFSET
 3173              	// _ABORQ	.byte  COMPO+6
 3174              	// 	.ascii "abort\""
 3175              	// 	.p2align 2 	
 3176              	ABORQ:
 3177 1a08 42F804ED 		_NEST
 3178 1a0c FEF7DAFD 		BL	QBRAN
 3179 1a10 280E0018 		.word	ABOR1+MAPOFFSET	// text flag
 3180 1a14 FFF7B8FC 		BL	DOSTR
 3181 1a18 FEF7EEFF 		BL	COUNT
 3182 1a1c FFF78CFC 		BL	TYPEE
 3183 1a20 FFF7A2FC 		BL	CR
ARM GAS  stm32eforth.s 			page 60


 3184 1a24 00F0ACB8 		B.W	QUIT
 3185              	ABOR1:
 3186 1a28 FFF7AEFC 		BL	DOSTR
 3187 1a2c FEF72CFE 		BL	DROP
 3188 1a30 52F804FB 		_UNNEST			// drop error
 3189              	
 3190              	// **************************************************************************
 3191              	//  The text interpreter
 3192              	
 3193              	//    $INTERPRET  ( a -- )
 3194              	// 	Interpret a word. If failed, try to convert it to an integer.
 3195              	
 3196 1a34 D80D0018 		.word	_ABORT+MAPOFFSET
 3197 1a38 0A       	_INTER:	.byte  10
 3198 1a39 2424494E 		.ascii "$$INTERPRET"
 3198      54455250 
 3198      524554
 3199              		.p2align 2 	
 3200              	INTER:
 3201 1a44 42F804ED 		_NEST
 3202 1a48 FFF704FF 		BL	NAMEQ
 3203 1a4c FEF710FF 		BL	QDUP	// ?defined
 3204 1a50 FEF7B8FD 		BL	QBRAN
 3205 1a54 840E0018 		.word	INTE1+MAPOFFSET
 3206 1a58 FEF7DAFD 		BL	AT
 3207 1a5c FEF78FFD 		_DOLIT
 3208 1a60 40000000 		.word	COMPO
 3209 1a64 FEF73CFE 		BL	ANDD	// ?compile only lexicon bits
 3210 1a68 FFF7CEFF 		BL	ABORQ
 3211 1a6c 0D       		.byte	13
 3212 1a6d 20636F6D 		.ascii " compile only"
 3212      70696C65 
 3212      206F6E6C 
 3212      79
 3213 1a7a 00BF     		.p2align 2 	
 3214 1a7c FEF78EFD 		BL	EXECU
 3215 1a80 52F804FB 		_UNNEST			// execute defined word
 3216              	INTE1:
 3217 1a84 FFF778FB 	  BL	NUMBQ
 3218 1a88 FEF79CFD 		BL	QBRAN
 3219 1a8c 940E0018 		.word	INTE2+MAPOFFSET
 3220 1a90 52F804FB 		_UNNEST
 3221              	INTE2:
 3222 1a94 FFF7A4BF 	  B.W	ABORT	// error
 3223              	
 3224              	//    [	   ( -- )
 3225              	// 	Start the text interpreter.
 3226              	
 3227 1a98 380E0018 		.word	_INTER+MAPOFFSET
 3228 1a9c 81       	_LBRAC:	.byte  IMEDD+1
 3229 1a9d 5B       		.ascii "["
 3230 1a9e 00BF     		.p2align 2 	
 3231              	LBRAC:
 3232 1aa0 42F804ED 		_NEST
 3233 1aa4 FEF76BFD 		_DOLIT
 3234 1aa8 440E0018 		.word	INTER+MAPOFFSET
 3235 1aac FFF72AF8 		BL	TEVAL
ARM GAS  stm32eforth.s 			page 61


 3236 1ab0 FEF7A4FD 		BL	STORE
 3237 1ab4 52F804FB 		_UNNEST
 3238              	
 3239              	//    .OK	 ( -- )
 3240              	// 	Display "ok" only while interpreting.
 3241              	
 3242 1ab8 9C0E0018 		.word	_LBRAC+MAPOFFSET
 3243 1abc 03       	_DOTOK:	.byte  3
 3244 1abd 2E4F4B   		.ascii ".OK"
 3245              		.p2align 2 	
 3246              	DOTOK:
 3247 1ac0 42F804ED 		_NEST
 3248 1ac4 FEF75BFD 		_DOLIT
 3249 1ac8 440E0018 		.word	INTER+MAPOFFSET
 3250 1acc FFF71AF8 		BL	TEVAL
 3251 1ad0 FEF79EFD 		BL	AT
 3252 1ad4 FEF728FF 		BL	EQUAL
 3253 1ad8 FEF774FD 		BL	QBRAN
 3254 1adc E80E0018 		.word	DOTO1+MAPOFFSET
 3255 1ae0 FFF77AFC 		BL	DOTQP
 3256 1ae4 03       		.byte	3
 3257 1ae5 206F6B   		.ascii " ok"
 3258              	DOTO1:
 3259 1ae8 FFF73EFC 		BL	CR
 3260 1aec 52F804FB 		_UNNEST
 3261              	
 3262              	//    ?STACK	( -- )
 3263              	// 	Abort if the data stack underflows.
 3264              	
 3265 1af0 BC0E0018 		.word	_DOTOK+MAPOFFSET
 3266 1af4 06       	_QSTAC:	.byte  6
 3267 1af5 3F535441 		.ascii "?STACK"
 3267      434B
 3268 1afb 00       		.p2align 2 	
 3269              	QSTAC:
 3270 1afc 42F804ED 		_NEST
 3271 1b00 FFF764F9 		BL	DEPTH
 3272 1b04 FEF7E2FD 		BL	ZLESS	// check only for underflow
 3273 1b08 FFF77EFF 		BL	ABORQ
 3274 1b0c 0A       		.byte	10
 3275 1b0d 20756E64 		.ascii " underflow"
 3275      6572666C 
 3275      6F77
 3276 1b17 00       		.p2align 2 	
 3277 1b18 52F804FB 		_UNNEST
 3278              	
 3279              	//    EVAL	( -- )
 3280              	// 	Interpret the input stream.
 3281              	
 3282 1b1c F40E0018 		.word	_QSTAC+MAPOFFSET
 3283 1b20 04       	_EVAL:	.byte  4
 3284 1b21 4556414C 		.ascii "EVAL"
 3285 1b25 0000BF   		.p2align 2 	
 3286              	EVAL:
 3287 1b28 42F804ED 		_NEST
 3288              	EVAL1:
 3289 1b2c FFF7D8FD 	    BL	TOKEN
ARM GAS  stm32eforth.s 			page 62


 3290 1b30 FEF7B2FD 		BL	DUPP
 3291 1b34 FEF77CFD 		BL	CAT	// ?input stream empty
 3292 1b38 FEF744FD 		BL	QBRAN
 3293 1b3c 500F0018 		.word	EVAL2+MAPOFFSET
 3294 1b40 FEF7E0FF 		BL	TEVAL
 3295 1b44 FFF78CF9 		BL	ATEXE
 3296 1b48 FFF7D8FF 		BL	QSTAC	// evaluate input, check stack
 3297 1b4c FFF7EEBF 		B.W	EVAL1
 3298              	EVAL2:
 3299 1b50 FEF79AFD 		BL	DROP
 3300 1b54 FFF7B4FF 		BL	DOTOK
 3301 1b58 52F804FB 		_UNNEST	// prompt
 3302              	
 3303              	//    PRESET	( -- )
 3304              	// 	Reset data stack pointer and the terminal input buffer.
 3305              	
 3306 1b5c 200F0018 		.word	_EVAL+MAPOFFSET
 3307 1b60 06       	_PRESE:	.byte  6
 3308 1b61 50524553 		.ascii "PRESET"
 3308      4554
 3309 1b67 00       		.p2align 2 	
 3310              	PRESE:
 3311              	//	_NEST
 3312 1b68 44F68061 		MOVW	R1,#SPP&0xffff		//  init SP
 3313 1b6c C2F20001 	 	MOVT	R1,#SPP>>16
 3314 1b70 85EA0505 		EOR	R5,R5,R5			//  init TOS=0
 3315              	//	_UNNEST
 3316 1b74 7047     		_NEXT
 3317              	
 3318              	//    QUIT	( -- )
 3319              	// 	Reset return stack pointer and start text interpreter.
 3320              	
 3321 1b76 600F0018 		.word	_PRESE+MAPOFFSET
 3322 1b7a 04       	_QUIT:	.byte  4
 3323 1b7b 51554954 		.ascii "QUIT"
 3324 1b7f 00       		.p2align 2 	
 3325              	QUIT:
 3326 1b80 42F804ED 		_NEST
 3327 1b84 44F68072 		MOVW	R2,#RPP&0xffff  /* RESET RSTACK */
 3328 1b88 C2F20002 	 	MOVT	R2,#RPP>>16 
 3329              	QUIT1:
 3330 1b8c FFF788FF 		BL	LBRAC			// start interpretation
 3331              	QUIT2:
 3332 1b90 FFF706FF 		BL	QUERY			// get input
 3333 1b94 FFF7C8FF 		BL	EVAL
 3334 1b98 FEF720FD 		BL	BRAN
 3335 1b9c 900F0018 		.word	QUIT2+MAPOFFSET	// continue till error
 3336              	
 3337              	/***************************
 3338              	//  Flash memory interface
 3339              	***************************/
 3340              	// UNLOCK ( T|F -- )
 3341              	// lock or unlock FLASH write 
 3342              	
 3343 1ba0 7A0F0018 		.word _QUIT+MAPOFFSET  
 3344 1ba4 06       	_UNLOCK: .byte 6
 3345 1ba5 554E4C4F 		.ascii "UNLOCK"
ARM GAS  stm32eforth.s 			page 63


 3345      434B
 3346 1bab 00       		.p2align 2  
 3347              	UNLOCK:	//  unlock flash memory	
 3348 1bac 42F804ED 		_NEST 
 3349 1bb0 FEF708FD 		BL QBRAN
 3350 1bb4 D60F0018 		.word LOCK+MAPOFFSET
 3351 1bb8 DFF80404 		ldr	r0, flash_regs 
 3352 1bbc 4FF03404 		mov r4,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 3353 1bc0 C460     		str r4,[r0,#FLASH_SR]
 3354 1bc2 0469     		ldr r4,[r0,#FLASH_CR]
 3355 1bc4 14F0800F 		tst r4,#(1<<7)
 3356 1bc8 03D0     		beq 1f 
 3357 1bca FE4C     		ldr	r4, flash_regs+4 // key1
 3358 1bcc 4460     		str	r4, [r0, #FLASH_KEYR]
 3359 1bce FE4C     		ldr	r4, flash_regs+8 // key2 
 3360 1bd0 4460     		str	r4, [r0, #FLASH_KEYR]
 3361              		/* unlock option registers */
 3362              	/*
 3363              		ldr	r4, flash_regs+4 
 3364              		str	r4, [r0, #FLASH_OPTKEYR]
 3365              		ldr	r4, flash_regs+8
 3366              		str	r4, [r0, #FLASH_OPTKEYR]
 3367              	*/ 
 3368              	1:
 3369 1bd2 52F804FB 		_UNNEST
 3370              	 // lock flash memory
 3371              	LOCK: 
 3372 1bd6 FA48     		ldr r0,flash_regs  
 3373              	//	ldr r4,[r0,#FLASH_CR]
 3374 1bd8 4FF08004 		mov r4,#(1<<7)
 3375 1bdc 0461     		str r4,[r0,#FLASH_CR]
 3376 1bde 52F804FB 		_UNNEST  
 3377              	
 3378              	WAIT_BSY:
 3379 1be2 F748     		ldr	r0,flash_regs
 3380              	WAIT1:
 3381 1be4 C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 3382 1be6 14F00104 		ands	r4, #0x1	//  BSY
 3383 1bea FBD1     		bne	WAIT1
 3384 1bec 7047     		_NEXT
 3385              	
 3386              	//    ERASE_PAGE	   ( adr -- )
 3387              	// 	  Erase one page of flash memory.
 3388              	//    stm32f103 page size is 1024 bytes 
 3389              	//    adr is any address inside page to erase 
 3390              	
 3391 1bee A40F0018 		.word	_UNLOCK+MAPOFFSET
 3392 1bf2 0A       	_EPAGE:	.byte  10
 3393 1bf3 45524153 		.ascii "ERASE_PAGE"
 3393      455F5041 
 3393      4745
 3394 1bfd 0000BF   		.p2align 2 	
 3395              	
 3396              	EPAGE: 	//  page --
 3397 1c00 42F804ED 		_NEST
 3398 1c04 FFF7EDFF 		bl	WAIT_BSY
 3399 1c08 FEF7B9FC 		_DOLIT 
ARM GAS  stm32eforth.s 			page 64


 3400 1c0c 01000000 		.word 1 
 3401 1c10 FFF7CCFF 		bl  UNLOCK 
 3402 1c14 EA48     		ldr r0,flash_regs 	 
 3403 1c16 4FF00204 		mov r4,#2 // set PER bit 
 3404 1c1a 0461     		str r4,[r0,#FLASH_CR]
 3405 1c1c 4561     		str r5,[r0,#FLASH_AR] // page to erase address 
 3406 1c1e 0469     		ldr	r4,[r0, #FLASH_CR]	
 3407 1c20 44F04004 		orr	R4,#0x40	//  set STRT bit   
 3408 1c24 0461     		str	r4,[r0, #FLASH_CR]	//  start erasing
 3409 1c26 FFF7DCFF 	 	bl	WAIT_BSY // wait until done
 3410 1c2a FEF7A8FC 		_DOLIT 
 3411 1c2e 00000000 		.word 0 
 3412 1c32 FFF7BBFF 		bl	UNLOCK  // lock flash write 
 3413 1c36 C568     		ldr r5,[r0,#FLASH_SR] // check for errors 
 3414 1c38 05F01405 		and r5,r5,#(5<<2)
 3415 1c3c FFF7E4FE 		bl ABORQ 
 3416 1c40 0D       		.byte 13
 3417 1c41 20657261 		.ascii " erase error!"
 3417      73652065 
 3417      72726F72 
 3417      21
 3418 1c4e 00BF     		.p2align 2
 3419 1c50 52F804FB 		_UNNEST
 3420              	
 3421              	// store 16 bit word
 3422              	// expect flash unlocked  
 3423              	HWORD_WRITE: // ( hword address -- )
 3424 1c54 42F804ED 		_NEST
 3425 1c58 0469     		ldr	r4, [r0, #FLASH_CR]	//  FLASH_CR
 3426              	//	bic r4,#(1<<9)|(1<<5)|(1<<4)|(1<<2)|(1<<1) //  clear OPTWRE|OPTER|OPTPG|MER|PER
 3427 1c5a 4FF00104 		mov r4,#1 // set PG 
 3428 1c5e 0461     		str r4,[r0,#FLASH_CR]
 3429 1c60 2E46     		mov r6,r5 
 3430 1c62 51F8045B 		_POP 
 3431 1c66 3580     		strh r5,[r6] 
 3432 1c68 FFF7BBFF 		bl WAIT_BSY 
 3433 1c6c C568     		ldr r5,[r0,#FLASH_SR]
 3434 1c6e 05F01405 		and r5,r5,#(5<<2) 
 3435 1c72 FEF7A7FC 		bl QBRAN
 3436 1c76 8C100018 		.word 1f+MAPOFFSET 
 3437 1c7a FFF7C5FE 		bl ABORQ
 3438 1c7e 0D       		.byte 13
 3439 1c7f 20777269 		.ascii " write error!"
 3439      74652065 
 3439      72726F72 
 3439      21
 3440              		.p2align 2
 3441              	1:	 
 3442 1c8c 52F804FB 		_UNNEST 
 3443              	
 3444              	
 3445              	//    I!	   ( data address -- )
 3446              	// 	   Write one word into flash memory
 3447              	//	   address must even 
 3448              	
 3449 1c90 F20F0018 		.word	_EPAGE+MAPOFFSET
 3450 1c94 02       	_ISTOR:	.byte  2
ARM GAS  stm32eforth.s 			page 65


 3451 1c95 4921     		.ascii "I!"
 3452 1c97 00       		.p2align 2 	
 3453              	ISTOR:	//  data address --
 3454 1c98 42F804ED 		_NEST
 3455 1c9c FFF7A1FF 		bl	WAIT_BSY
 3456 1ca0 FEF76DFC 		_DOLIT 
 3457 1ca4 01000000 		.word 1 
 3458 1ca8 FFF780FF 		bl  UNLOCK 
 3459 1cac FEF7FEFD 		BL DDUP 
 3460 1cb0 FEF7D6FC 		BL TOR 
 3461 1cb4 FEF7D4FC 		BL TOR 
 3462 1cb8 FFF7CCFF 		BL HWORD_WRITE
 3463 1cbc FEF7BEFC 		BL RFROM 
 3464 1cc0 4FEA3545 		ror r5,r5,#16
 3465 1cc4 FEF7BAFC 		BL RFROM 
 3466 1cc8 05F10205 		add r5,r5,#2 
 3467 1ccc FFF7C2FF 		BL HWORD_WRITE 
 3468 1cd0 FEF755FC 		_DOLIT 
 3469 1cd4 00000000 		.word 0
 3470 1cd8 FFF768FF 		bl UNLOCK 
 3471 1cdc 52F804FB 		_UNNEST
 3472              	
 3473              	// IMG_SIZE ( -- u )
 3474              	// return flash pages required to save 
 3475              	// user ram  
 3476 1ce0 94100018 		.word _ISTOR+MAPOFFSET 
 3477 1ce4 08       	_IMG_SIZE: .byte 8
 3478 1ce5 494D475F 		.ascii "IMG_SIZE" 
 3478      53495A45 
 3479 1ced 0000BF   		.p2align 2
 3480              	IMG_SIZE: 
 3481 1cf0 42F804ED 		_NEST
 3482 1cf4 FEF743FC 		_DOLIT 
 3483 1cf8 38000000 		.word VARS_END_OFS-IMG_SIGN_OFS 
 3484 1cfc FEF752FF 		BL USER_END 
 3485 1d00 FEF742FF 		BL USER_BEGIN 
 3486 1d04 FEF734FD 		BL SUBB 
 3487 1d08 FEF72AFD 		BL PLUS 
 3488 1d0c FEF737FC 		_DOLIT 
 3489 1d10 00040000 		.word 1024 
 3490 1d14 FEF7DCFF 		BL SLMOD 
 3491 1d18 FEF7C6FC 		BL SWAP 
 3492 1d1c FEF752FC 		BL QBRAN 
 3493 1d20 28110018 		.word 1f+MAPOFFSET 
 3494 1d24 FEF74AFD 		BL ONEP
 3495              	1:
 3496 1d28 52F804FB 		_UNNEST  
 3497              	
 3498              	// IMG? (  -- T|F )
 3499              	// check if an image has been saved in FLASH 
 3500 1d2c E4100018 		.word _IMG_SIZE+MAPOFFSET 
 3501 1d30 04       	_IMGQ: .byte 4
 3502 1d31 494D473F 		.ascii "IMG?"
 3503 1d35 0000BF   		.p2align 2
 3504              	IMGQ:
 3505 1d38 42F804ED 		_NEST 
 3506 1d3c FEF740FF 		BL IMG_ADR 
ARM GAS  stm32eforth.s 			page 66


 3507 1d40 FEF766FC 		BL AT 
 3508 1d44 FEF74AFF 		BL IMG_SIGN  
 3509 1d48 FEF762FC 		BL AT 
 3510 1d4c FEF7DCFC 		BL XORR  
 3511 1d50 FEF7E0FD 		BL ZEQUAL
 3512 1d54 52F804FB 		_UNNEST
 3513              	
 3514              	// LOAD_IMG (  -- )
 3515              	// Load image from FLASH to RAM. 
 3516 1d58 30110018 		.word _IMGQ+MAPOFFSET
 3517 1d5c 08       	_LOAD_IMG: .byte 8 
 3518 1d5d 4C4F4144 		.ascii "LOAD_IMG" 
 3518      5F494D47 
 3519 1d65 0000BF   		.p2align 2 
 3520              	LOAD_IMG:
 3521 1d68 42F804ED 		_NEST 
 3522 1d6c FFF7E4FF 		BL IMGQ 
 3523 1d70 FEF728FC 		BL QBRAN 
 3524 1d74 BC110018 		.word 1f+MAPOFFSET
 3525              	/* copy system variables to RAM */
 3526 1d78 FEF722FF 		BL IMG_ADR 
 3527 1d7c FEF78CFC 		BL DUPP 
 3528 1d80 FEF76EFC 		BL TOR   // save source address 
 3529 1d84 FEF72AFF 		BL IMG_SIGN 
 3530 1d88 41F8045D 		_PUSH 
 3531 1d8c 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 3532 1d90 FEF782FC 		BL DUPP 
 3533 1d94 FEF764FC 		BL TOR 
 3534 1d98 FFF786F8 		BL MOVE // ( src dest count -- ) R: src count 
 3535              	/* copy user definitions */
 3536 1d9c FEF74EFC 		BL RFROM 
 3537 1da0 FEF74CFC 		BL RFROM  
 3538 1da4 FEF7DCFC 		BL PLUS // source address  
 3539 1da8 FEF7EEFE 		BL USER_BEGIN // destination address
 3540 1dac FFF734F8 		BL HERE  
 3541 1db0 FEF784FC 		BL OVER 
 3542 1db4 FEF7DCFC 		BL SUBB  // byte count 
 3543 1db8 FFF776F8 		BL MOVE
 3544 1dbc 52F804FB 	1:	_UNNEST  
 3545              	
 3546              	// ERASE_MPG ( u1 u2 -- )
 3547              	// erase many pages 
 3548              	// u1 first page number 
 3549              	// u2 how many pages  
 3550 1dc0 5C110018 		.word _LOAD_IMG+MAPOFFSET
 3551 1dc4 09       	_ERASE_MPG: .byte 9 
 3552 1dc5 45524153 		.ascii "ERASE_MPG"	
 3552      455F4D50 
 3552      47
 3553 1dce 00BF     		.p2align 2 
 3554              	ERASE_MPG:
 3555 1dd0 42F804ED 		_NEST 
 3556 1dd4 FEF744FC 		BL TOR 
 3557 1dd8 00F052F8 		BL PG_TO_ADR 
 3558 1ddc FEF7FEFB 		BL BRAN 
 3559 1de0 F8110018 		.word 2f+MAPOFFSET 
 3560              	1:
ARM GAS  stm32eforth.s 			page 67


 3561 1de4 FEF758FC 		BL DUPP 
 3562 1de8 FEF73AFC 		BL TOR 
 3563 1dec FFF708FF 		BL EPAGE 
 3564 1df0 FEF724FC 		BL RFROM
 3565 1df4 05F58065 		add r5,#PAGE_SIZE 
 3566              	2:
 3567 1df8 FEF7D5FB 		BL DONXT
 3568 1dfc E4110018 		.word 1b+MAPOFFSET 
 3569 1e00 51F8045B 		_POP 
 3570 1e04 52F804FB 		_UNNEST 
 3571              	
 3572              	// FLSH_WR ( src dest u -- dest+u )
 3573              	// write u words to flash memory 
 3574 1e08 C4110018 		.word _ERASE_MPG+MAPOFFSET
 3575 1e0c 07       	_FLSH_WR: .byte 7 
 3576 1e0d 464C5348 		.ascii "FLSH_WR"
 3576      5F5752
 3577              		.p2align  
 3578              	FLSH_WR: 
 3579 1e14 42F804ED 		_NEST 
 3580 1e18 FEF722FC 		BL TOR
 3581 1e1c FEF7DEFB 		BL BRAN 
 3582 1e20 44120018 		.word 3f+MAPOFFSET  
 3583              	/* write system variables to FLASH */
 3584 1e24 FEF71CFC 	2:  BL TOR  // destination address 
 3585 1e28 FEF736FC 		BL DUPP 
 3586 1e2c FEF7F0FB 		BL AT   // get data 
 3587 1e30 FEF70EFC 		BL RAT  // get destination address 
 3588 1e34 FFF730FF 		BL ISTOR
 3589 1e38 FEF7E0FC 		BL CELLP  // increment source address 
 3590 1e3c FEF7FEFB 		BL RFROM 
 3591 1e40 FEF7DCFC 		BL CELLP  // increment dest address 
 3592 1e44 FEF7AFFB 	3:	BL DONXT 
 3593 1e48 24120018 		.word 2b+MAPOFFSET
 3594 1e4c FEF708FC 		BL TOR 
 3595 1e50 FEF71AFC 		BL DROP 
 3596 1e54 FEF7F2FB 		BL RFROM 
 3597 1e58 52F804FB 		_UNNEST 
 3598              	
 3599              	// ADR>PG ( a -- n )
 3600              	// convert address to page number, {0..127} 
 3601 1e5c 0C120018 		.word _FLSH_WR+MAPOFFSET
 3602 1e60 06       	_ADR_TO_PG: .byte 6 
 3603 1e61 4144523E 		.ascii "ADR>PG" 
 3603      5047
 3604 1e67 00       		.p2align 2 
 3605              	ADR_TO_PG: 
 3606 1e68 4FEA9525 		lsr r5,#10 
 3607 1e6c 05F07F05 		and r5,#127 
 3608 1e70 7047     		_NEXT  
 3609              	
 3610              	// PG>ADR ( n -- a )
 3611              	// convert page# to address 
 3612 1e72 60120018 		.word _ADR_TO_PG+MAPOFFSET
 3613 1e76 06       	_PG_TO_ADR: .byte 6 
 3614 1e77 50473E41 		.ascii "PG>ADR" 
 3614      4452
ARM GAS  stm32eforth.s 			page 68


 3615 1e7d 0000BF   		.p2align 2 
 3616              	PG_TO_ADR:
 3617 1e80 C0F20205 		movt r5,#2
 3618 1e84 4FEA8525 		lsl r5,#10 
 3619 1e88 7047     		_NEXT 
 3620              	
 3621              	// ERASE_IMG (  -- )
 3622              	// erase image in from FLASH  
 3623 1e8a 76120018 		.word _PG_TO_ADR+MAPOFFSET 
 3624 1e8e 09       	_ERASE_IMG: .byte 9
 3625 1e8f 45524153 		.ascii "ERASE_IMG"
 3625      455F494D 
 3625      47
 3626              		.p2align 2
 3627              	ERASE_IMG:
 3628 1e98 42F804ED 		_NEST
 3629 1e9c FEF790FE 		BL IMG_ADR 
 3630 1ea0 FFF726FF 		BL IMG_SIZE 
 3631 1ea4 FEF7DCFB 		BL TOR 
 3632 1ea8 FEF798FB 		BL BRAN 
 3633 1eac BC120018 		.word  2f+MAPOFFSET 
 3634 1eb0 FEF7F2FB 	1:	BL DUPP 
 3635 1eb4 FFF7A4FE 		BL EPAGE
 3636 1eb8 05F58065 		ADD R5,#PAGE_SIZE 
 3637 1ebc FEF773FB 	2:	BL DONXT 
 3638 1ec0 B0120018 		.word 1b+MAPOFFSET 
 3639 1ec4 FEF7E0FB 		BL DROP 
 3640 1ec8 52F804FB 		_UNNEST 
 3641              	
 3642              	// SAVE_IMG ( -- )
 3643              	// save in FLASH memory system variables and user defintitions.
 3644 1ecc 8E120018 		.word _ERASE_IMG+MAPOFFSET	
 3645 1ed0 08       	_SAVE_IMG: .byte 8 
 3646 1ed1 53415645 		.ascii "SAVE_IMG"
 3646      5F494D47 
 3647 1ed9 0000BF   		.p2align 2
 3648              	SAVE_IMG:
 3649 1edc 42F804ED 		_NEST 
 3650 1ee0 FEF79AFF 		BL HERE 
 3651 1ee4 FEF750FE 		BL USER_BEGIN
 3652 1ee8 FEF71EFD 		BL EQUAL 
 3653 1eec FEF76AFB 		BL QBRAN
 3654 1ef0 F8120018 		.word 1f+MAPOFFSET 
 3655 1ef4 52F804FB 		_UNNEST  // nothing to save 
 3656 1ef8 FFF71EFF 	1:	BL IMGQ 
 3657 1efc FEF762FB 		BL QBRAN 
 3658 1f00 08130018 		.word 2f+MAPOFFSET
 3659              	/* delete saved image */
 3660 1f04 FFF7C8FF 		BL ERASE_IMG 
 3661              	/* save system variables */
 3662              	2:	
 3663 1f08 FEF768FE 		BL IMG_SIGN // src address 
 3664 1f0c FEF758FE 		BL IMG_ADR  //  ( src dest --  
 3665 1f10 41F8045D 		_PUSH 
 3666 1f14 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 3667 1f18 FEF792FC 		BL CELLSL  // word count 
 3668 1f1c FFF77AFF 		BL FLSH_WR  // ( src dest count -- dest+u )
ARM GAS  stm32eforth.s 			page 69


 3669              	/* write user definitions */
 3670 1f20 FEF732FE 		BL USER_BEGIN
 3671 1f24 FEF7C0FB 		BL SWAP  // ( src dest+ -- )
 3672 1f28 FEF776FF 		BL HERE   
 3673 1f2c FEF72CFE 		BL USER_BEGIN 
 3674 1f30 FEF71EFC 		BL SUBB 
 3675 1f34 FEF784FC 		BL CELLSL  // src dest+ count -- 
 3676 1f38 FFF76CFF 		BL FLSH_WR  
 3677 1f3c 52F804FB 		_UNNEST 
 3678              	
 3679              	// TURNKEY ( -- "WORD") 
 3680              	// set autorun program in 'BOOT variable 
 3681              	// and save image in slot 0.
 3682 1f40 D0120018 		.word _SAVE_IMG+MAPOFFSET
 3683 1f44 07       	_TURNKEY: .byte 7
 3684 1f45 5455524E 		.ascii "TURNKEY"
 3684      4B4559
 3685              		.p2align 2 
 3686              	TURNKEY:
 3687 1f4c 42F804ED 		_NEST 
 3688 1f50 00F040F8 		BL TICK 
 3689 1f54 FEF79EFD 		BL TBOOT 
 3690 1f58 FEF750FB 		BL STORE 
 3691 1f5c FFF7BEFF 		BL SAVE_IMG 
 3692 1f60 52F804FB 		_UNNEST
 3693              	
 3694 1f64 44130018 		.word _TURNKEY+MAPOFFSET
 3695 1f68 06       	_FORGET: .byte 6 
 3696 1f69 464F5247 		.ascii "FORGET"
 3696      4554
 3697 1f6f 00       		.p2align 2
 3698              	FORGET:
 3699 1f70 42F804ED 		_NEST 
 3700 1f74 FFF7B4FB 		BL TOKEN 
 3701 1f78 FEF78EFB 		BL DUPP 
 3702 1f7c FEF722FB 		BL QBRAN 
 3703 1f80 FEF7FDFA 		_DOLIT 
 3704 1f84 BC130018 		.word 9f+MAPOFFSET 
 3705 1f88 FFF764FC 		BL NAMEQ // ( a -- ca na | a 0 )
 3706 1f8c FEF770FC 		BL QDUP 
 3707 1f90 FEF718FB 		BL QBRAN 
 3708 1f94 B8130018 		.word 8f+MAPOFFSET
 3709 1f98 FEF738FC 		BL CELLM // ( ca la )
 3710 1f9c FEF77CFB 		BL DUPP 
 3711 1fa0 FEF7D0FD 		BL CPP   
 3712 1fa4 FEF72AFB 		BL STORE
 3713 1fa8 FEF732FB 		BL AT 
 3714 1fac FEF7DEFD 		BL LAST 
 3715 1fb0 FEF724FB 		BL STORE
 3716 1fb4 00F024FA 		BL OVERT 
 3717 1fb8 FEF766FB 	8:  BL DROP 
 3718 1fbc 52F804FB 	9:	_UNNEST 
 3719              	
 3720              	
 3721              	flash_regs:
 3722 1fc0 00200240 		.word FLASH_BASE_ADR // 0 
 3723 1fc4 23016745 		.word FLASH_KEY1   // 4 
ARM GAS  stm32eforth.s 			page 70


 3724 1fc8 AB89EFCD 		.word FLASH_KEY2   // 8
 3725              	
 3726              	// **************************************************************************
 3727              	//  The compiler
 3728              	
 3729              	//    '	   ( -- ca )
 3730              	// 	Search context vocabularies for the next word in input stream.
 3731              	
 3732 1fcc 68130018 		.word	_FORGET+MAPOFFSET
 3733 1fd0 01       	_TICK:	.byte  1
 3734 1fd1 27       		.ascii "'"
 3735 1fd2 00BF     		.p2align 2 	
 3736              	TICK:
 3737 1fd4 42F804ED 		_NEST
 3738 1fd8 FFF782FB 		BL	TOKEN
 3739 1fdc FFF73AFC 		BL	NAMEQ	// ?defined
 3740 1fe0 FEF7F0FA 		BL	QBRAN
 3741 1fe4 EC130018 		.word	TICK1+MAPOFFSET
 3742 1fe8 52F804FB 		_UNNEST	// yes, push code address
 3743 1fec FFF7F8BC 	TICK1:	B.W	ABORT	// no, error
 3744              	
 3745              	//    ALLOT	( n -- )
 3746              	// 	Allocate n bytes to the ram area.
 3747              	
 3748 1ff0 D0130018 		.word	_TICK+MAPOFFSET
 3749 1ff4 05       	_ALLOT:	.byte  5
 3750 1ff5 414C4C4F 		.ascii "ALLOT"
 3750      54
 3751 1ffa 00BF     		.p2align 2 	
 3752              	ALLOT:
 3753 1ffc 42F804ED 		_NEST
 3754 2000 FEF7A0FD 		BL	CPP
 3755 2004 FEF7D4FC 		BL	PSTOR
 3756 2008 52F804FB 		_UNNEST			// adjust code pointer
 3757              	
 3758              	//    ,	   ( w -- )
 3759              	// 	Compile an integer into the code dictionary.
 3760              	
 3761 200c F4130018 		.word	_ALLOT+MAPOFFSET
 3762 2010 012C     	_COMMA:	.byte  1,','
 3763 2012 00BF     		.p2align 2 	
 3764              	COMMA:
 3765 2014 42F804ED 		_NEST
 3766 2018 FEF7FEFE 		BL	HERE
 3767 201c FEF73CFB 		BL	DUPP
 3768 2020 FEF7ECFB 		BL	CELLP	// cell boundary
 3769 2024 FEF78EFD 		BL	CPP
 3770 2028 FEF7E8FA 		BL	STORE
 3771 202c FEF7E6FA 		BL	STORE
 3772 2030 52F804FB 		_UNNEST	// adjust code pointer, compile
 3773              		.p2align 2 
 3774              	//    [COMPILE]   ( -- //  string> )
 3775              	// 	Compile the next immediate word into code dictionary.
 3776              	
 3777 2034 10140018 		.word	_COMMA+MAPOFFSET
 3778 2038 89       	_BCOMP:	.byte  IMEDD+9
 3779 2039 5B434F4D 		.ascii "[COMPILE]"
ARM GAS  stm32eforth.s 			page 71


 3779      50494C45 
 3779      5D
 3780 2042 00BF     		.p2align 2 	
 3781              	BCOMP:
 3782 2044 42F804ED 		_NEST
 3783 2048 FFF7C4FF 		BL	TICK
 3784 204c FFF7E2FF 		BL	COMMA
 3785 2050 52F804FB 		_UNNEST
 3786              	
 3787              	//    COMPILE	( -- )
 3788              	// 	Compile the next address in colon list to code dictionary.
 3789              	
 3790 2054 38140018 		.word	_BCOMP+MAPOFFSET
 3791 2058 47       	_COMPI:	.byte  COMPO+7
 3792 2059 434F4D50 		.ascii "COMPILE"
 3792      494C45
 3793              		.p2align 2 	
 3794              	COMPI:
 3795 2060 42F804ED 		_NEST
 3796 2064 FEF7EAFA 		BL	RFROM
 3797 2068 25F00105 		BIC	R5,R5,#1
 3798 206c FEF714FB 		BL	DUPP
 3799 2070 FEF7CEFA 		BL	AT
 3800 2074 00F0F2F9 		BL	CALLC			// compile BL instruction
 3801 2078 FEF7C0FB 		BL	CELLP
 3802 207c 45F00105 		ORR	R5,R5,#1
 3803 2080 FEF7EEFA 		BL	TOR
 3804 2084 52F804FB 		_UNNEST			// adjust return address
 3805              	
 3806              	//    LITERAL	( w -- )
 3807              	// 	Compile tos to code dictionary as an integer literal.
 3808              	
 3809 2088 58140018 		.word	_COMPI+MAPOFFSET
 3810 208c 87       	_LITER:	.byte  IMEDD+7
 3811 208d 4C495445 		.ascii "LITERAL"
 3811      52414C
 3812              		.p2align 2 	
 3813              	LITER:
 3814 2094 42F804ED 		_NEST
 3815 2098 FFF7E2FF 		BL	COMPI
 3816 209c 7EF9FF17 		.word	DOLIT+MAPOFFSET
 3817 20a0 FFF7B8FF 		BL	COMMA
 3818 20a4 52F804FB 		_UNNEST
 3819              	
 3820              	//    $,"	( -- )
 3821              	// 	Compile a literal string up to next " .
 3822              	
 3823              	// 	.word	_LITER+MAPOFFSET
 3824              	// _STRCQ	.byte  3
 3825              	// 	.ascii "$$,"""
 3826              	// 	.p2align 2 	
 3827              	STRCQ:
 3828 20a8 42F804ED 		_NEST
 3829 20ac FEF767FA 		_DOLIT
 3830 20b0 FCFFFFFF 		.word	-4
 3831 20b4 FEF746FD 		BL	CPP
 3832 20b8 FEF77AFC 		BL	PSTOR
ARM GAS  stm32eforth.s 			page 72


 3833 20bc FEF75FFA 		_DOLIT
 3834 20c0 22000000 		.word	'\"'
 3835 20c4 FFF7FAFA 		BL	WORDD			// move word to code dictionary
 3836 20c8 FEF796FC 		BL	COUNT
 3837 20cc FEF748FB 		BL	PLUS
 3838 20d0 FEF74AFE 		BL	ALGND			// calculate aligned end of string
 3839 20d4 FEF736FD 		BL	CPP
 3840 20d8 FEF790FA 		BL	STORE
 3841 20dc 52F804FB 		_UNNEST 			// adjust the code pointer
 3842              	
 3843              	// **************************************************************************
 3844              	//  Structures
 3845              	
 3846              	//    FOR	 ( -- a )
 3847              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3848              	
 3849 20e0 8C140018 		.word	_LITER+MAPOFFSET
 3850 20e4 C3       	_FOR:	.byte  COMPO+IMEDD+3
 3851 20e5 464F52   		.ascii "FOR"
 3852              		.p2align 2 	
 3853              	FOR:
 3854 20e8 42F804ED 		_NEST
 3855 20ec FFF7B8FF 		BL	COMPI
 3856 20f0 60FAFF17 		.word	TOR+MAPOFFSET
 3857 20f4 FEF790FE 		BL	HERE
 3858 20f8 52F804FB 		_UNNEST
 3859              	
 3860              	//    BEGIN	( -- a )
 3861              	// 	Start an infinite or indefinite loop structure.
 3862              	
 3863 20fc E4140018 		.word	_FOR+MAPOFFSET
 3864 2100 C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 3865 2101 42454749 		.ascii "BEGIN"
 3865      4E
 3866 2106 00BF     		.p2align 2 	
 3867              	BEGIN:
 3868 2108 42F804ED 		_NEST
 3869 210c FEF784FE 		BL	HERE
 3870 2110 52F804FB 		_UNNEST
 3871              		.p2align 2 
 3872              	//    NEXT	( a -- )
 3873              	// 	Terminate a FOR-NEXT loop structure.
 3874              	
 3875 2114 00150018 		.word	_BEGIN+MAPOFFSET
 3876 2118 C4       	_NEXT:	.byte  COMPO+IMEDD+4
 3877 2119 4E455854 		.ascii "NEXT"
 3878 211d 0000BF   		.p2align 2 	
 3879              	NEXT:
 3880 2120 42F804ED 		_NEST
 3881 2124 FFF79CFF 		BL	COMPI
 3882 2128 A6F9FF17 		.word	DONXT+MAPOFFSET
 3883 212c FFF772FF 		BL	COMMA
 3884 2130 52F804FB 		_UNNEST
 3885              	
 3886              	//    UNTIL	( a -- )
 3887              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3888              	
ARM GAS  stm32eforth.s 			page 73


 3889 2134 18150018 		.word	_NEXT+MAPOFFSET
 3890 2138 C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3891 2139 554E5449 		.ascii "UNTIL"
 3891      4C
 3892 213e 00BF     		.p2align 2 	
 3893              	UNTIL:
 3894 2140 42F804ED 		_NEST
 3895 2144 FFF78CFF 		BL	COMPI
 3896 2148 C4F9FF17 		.word	QBRAN+MAPOFFSET
 3897 214c FFF762FF 		BL	COMMA
 3898 2150 52F804FB 		_UNNEST
 3899              	
 3900              	//    AGAIN	( a -- )
 3901              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3902              	
 3903 2154 38150018 		.word	_UNTIL+MAPOFFSET
 3904 2158 C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3905 2159 41474149 		.ascii "AGAIN"
 3905      4E
 3906 215e 00BF     		.p2align 2 	
 3907              	AGAIN:
 3908 2160 42F804ED 		_NEST
 3909 2164 FFF77CFF 		BL	COMPI
 3910 2168 DCF9FF17 		.word	BRAN+MAPOFFSET
 3911 216c FFF752FF 		BL	COMMA
 3912 2170 52F804FB 		_UNNEST
 3913              	
 3914              	//    IF	  ( -- A )
 3915              	// 	Begin a conditional branch structure.
 3916              	
 3917 2174 58150018 		.word	_AGAIN+MAPOFFSET
 3918 2178 C2       	_IFF:	.byte  COMPO+IMEDD+2
 3919 2179 4946     		.ascii "IF"
 3920 217b 00       		.p2align 2 	
 3921              	IFF:
 3922 217c 42F804ED 		_NEST
 3923 2180 FFF76EFF 		BL	COMPI
 3924 2184 C4F9FF17 		.word	QBRAN+MAPOFFSET
 3925 2188 FEF746FE 		BL	HERE
 3926 218c FEF7F7F9 		_DOLIT
 3927 2190 04000000 		.word	4
 3928 2194 FEF7D6FC 		BL	CPP
 3929 2198 FEF70AFC 		BL	PSTOR
 3930 219c 52F804FB 		_UNNEST
 3931              	
 3932              	//    AHEAD	( -- A )
 3933              	// 	Compile a forward branch instruction.
 3934              	
 3935 21a0 78150018 		.word	_IFF+MAPOFFSET
 3936 21a4 C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 3937 21a5 41484541 		.ascii "AHEAD"
 3937      44
 3938 21aa 00BF     		.p2align 2 	
 3939              	AHEAD:
 3940 21ac 42F804ED 		_NEST
 3941 21b0 FFF756FF 		BL	COMPI
 3942 21b4 DCF9FF17 		.word	BRAN+MAPOFFSET
ARM GAS  stm32eforth.s 			page 74


 3943 21b8 FEF72EFE 		BL	HERE
 3944 21bc FEF7DFF9 		_DOLIT
 3945 21c0 04000000 		.word	4
 3946 21c4 FEF7BEFC 		BL	CPP
 3947 21c8 FEF7F2FB 		BL	PSTOR
 3948 21cc 52F804FB 		_UNNEST
 3949              	
 3950              	//    REPEAT	( A a -- )
 3951              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3952              	
 3953 21d0 A4150018 		.word	_AHEAD+MAPOFFSET
 3954 21d4 C6       	_REPEA:	.byte  COMPO+IMEDD+6
 3955 21d5 52455045 		.ascii "REPEAT"
 3955      4154
 3956 21db 00       		.p2align 2 	
 3957              	REPEA:
 3958 21dc 42F804ED 		_NEST
 3959 21e0 FFF7BEFF 		BL	AGAIN
 3960 21e4 FEF718FE 		BL	HERE
 3961 21e8 FEF75EFA 		BL	SWAP
 3962 21ec FEF706FA 		BL	STORE
 3963 21f0 52F804FB 		_UNNEST
 3964              	
 3965              	//    THEN	( A -- )
 3966              	// 	Terminate a conditional branch structure.
 3967              	
 3968 21f4 D4150018 		.word	_REPEA+MAPOFFSET
 3969 21f8 C4       	_THENN:	.byte  COMPO+IMEDD+4
 3970 21f9 5448454E 		.ascii "THEN"
 3971 21fd 0000BF   		.p2align 2 	
 3972              	THENN:
 3973 2200 42F804ED 		_NEST
 3974 2204 FEF708FE 		BL	HERE
 3975 2208 FEF74EFA 		BL	SWAP
 3976 220c FEF7F6F9 		BL	STORE
 3977 2210 52F804FB 		_UNNEST
 3978              	
 3979              	//    AFT	 ( a -- a A )
 3980              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3981              	
 3982 2214 F8150018 		.word	_THENN+MAPOFFSET
 3983 2218 C3       	_AFT:	.byte  COMPO+IMEDD+3
 3984 2219 414654   		.ascii "AFT"
 3985              		.p2align 2 	
 3986              	AFT:
 3987 221c 42F804ED 		_NEST
 3988 2220 FEF732FA 		BL	DROP
 3989 2224 FFF7C2FF 		BL	AHEAD
 3990 2228 FFF76EFF 		BL	BEGIN
 3991 222c FEF73CFA 		BL	SWAP
 3992 2230 52F804FB 		_UNNEST
 3993              	
 3994              	//    ELSE	( A -- A )
 3995              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3996              	
 3997 2234 18160018 		.word	_AFT+MAPOFFSET
 3998 2238 C4       	_ELSEE:	.byte  COMPO+IMEDD+4
ARM GAS  stm32eforth.s 			page 75


 3999 2239 454C5345 		.ascii "ELSE"
 4000 223d 0000BF   		.p2align 2 	
 4001              	ELSEE:
 4002 2240 42F804ED 		_NEST
 4003 2244 FFF7B2FF 		BL	AHEAD
 4004 2248 FEF72EFA 		BL	SWAP
 4005 224c FFF7D8FF 		BL	THENN
 4006 2250 52F804FB 		_UNNEST
 4007              	
 4008              	//    WHILE	( a -- A a )
 4009              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 4010              	
 4011 2254 38160018 		.word	_ELSEE+MAPOFFSET
 4012 2258 C5       	_WHILE:	.byte  COMPO+IMEDD+5
 4013 2259 5748494C 		.ascii "WHILE"
 4013      45
 4014 225e 00BF     		.p2align 2 	
 4015              	WHILE:
 4016 2260 42F804ED 		_NEST
 4017 2264 FFF78AFF 		BL	IFF
 4018 2268 FEF71EFA 		BL	SWAP
 4019 226c 52F804FB 		_UNNEST
 4020              	
 4021              	//    ABORT"	( -- //  string> )
 4022              	// 	Conditional abort with an error message.
 4023              	
 4024 2270 58160018 		.word	_WHILE+MAPOFFSET
 4025 2274 86       	_ABRTQ:	.byte  IMEDD+6
 4026 2275 41424F52 		.ascii "ABORT\""
 4026      5422
 4027 227b 00       		.p2align 2 	
 4028              	ABRTQ:
 4029 227c 42F804ED 		_NEST
 4030 2280 FFF7EEFE 		BL	COMPI
 4031 2284 080E0018 		.word	ABORQ+MAPOFFSET
 4032 2288 FFF70EFF 		BL	STRCQ
 4033 228c 52F804FB 		_UNNEST
 4034              	
 4035              	//    $"	( -- //  string> )
 4036              	// 	Compile an inlineDCB literal.
 4037              	
 4038 2290 74160018 		.word	_ABRTQ+MAPOFFSET
 4039 2294 82       	_STRQ:	.byte  IMEDD+2
 4040 2295 2422     		.byte	'$','"'
 4041 2297 00       		.p2align 2 	
 4042              	STRQ:
 4043 2298 42F804ED 		_NEST
 4044 229c FFF7E0FE 		BL	COMPI
 4045 22a0 BC070018 		.word	STRQP+MAPOFFSET
 4046 22a4 FFF700FF 		BL	STRCQ
 4047 22a8 52F804FB 		_UNNEST
 4048              	
 4049              	//    ."	( -- //  string> )
 4050              	// 	Compile an inline word  literal to be typed out at run time.
 4051              	
 4052 22ac 94160018 		.word	_STRQ+MAPOFFSET
 4053 22b0 C2       	_DOTQ:	.byte  IMEDD+COMPO+2
ARM GAS  stm32eforth.s 			page 76


 4054 22b1 2E22     		.byte	'.','"'
 4055 22b3 00       		.p2align 2 	
 4056              	DOTQ:
 4057 22b4 42F804ED 		_NEST
 4058 22b8 FFF7D2FE 		BL	COMPI
 4059 22bc D8070018 		.word	DOTQP+MAPOFFSET
 4060 22c0 FFF7F2FE 		BL	STRCQ
 4061 22c4 52F804FB 		_UNNEST
 4062              	
 4063              	// **************************************************************************
 4064              	//  Name compiler
 4065              	
 4066              	//    ?UNIQUE	( a -- a )
 4067              	// 	Display a warning message if the word already exists.
 4068              	
 4069 22c8 B0160018 		.word	_DOTQ+MAPOFFSET
 4070 22cc 07       	_UNIQU:	.byte  7
 4071 22cd 3F554E49 		.ascii "?UNIQUE"
 4071      515545
 4072              		.p2align 2 	
 4073              	UNIQU:
 4074 22d4 42F804ED 		_NEST
 4075 22d8 FEF7DEF9 		BL	DUPP
 4076 22dc FFF7BAFA 		BL	NAMEQ			// ?name exists
 4077 22e0 FEF770F9 		BL	QBRAN
 4078 22e4 00170018 		.word	UNIQ1+MAPOFFSET	// redefinitions are OK
 4079 22e8 FFF776F8 		BL	DOTQP
 4080 22ec 07       		.byte	7
 4081 22ed 20726544 		.ascii " reDef "		// but warn the user
 4081      656620
 4082              		.p2align 2 	
 4083 22f4 FEF7E2F9 		BL	OVER
 4084 22f8 FEF77EFB 		BL	COUNT
 4085 22fc FFF71CF8 		BL	TYPEE			// just in case its not planned
 4086              	UNIQ1:
 4087 2300 FEF7C2F9 		BL	DROP
 4088 2304 52F804FB 		_UNNEST
 4089              	
 4090              	//    $,n	 ( na -- )
 4091              	// 	Build a new dictionary name using the data at na.
 4092              	
 4093              	// 	.word	_UNIQU+MAPOFFSET
 4094              	// _SNAME	.byte  3
 4095              	// 	.ascii "$$,n"
 4096              	// 	.p2align 2 	
 4097              	SNAME:
 4098 2308 42F804ED 		_NEST
 4099 230c FEF7C4F9 		BL	DUPP			//  na na
 4100 2310 FEF78EF9 		BL	CAT			//  ?null input
 4101 2314 FEF756F9 		BL	QBRAN
 4102 2318 50170018 		.word	SNAM1+MAPOFFSET
 4103 231c FFF7DAFF 		BL	UNIQU			//  na
 4104 2320 FEF724FC 		BL	LAST			//  na last
 4105 2324 FEF774F9 		BL	AT			//  na la
 4106 2328 FFF774FE 		BL	COMMA			//  na
 4107 232c FEF7B4F9 		BL	DUPP			//  na na
 4108 2330 FEF71CFC 		BL	LAST			//  na na last
ARM GAS  stm32eforth.s 			page 77


 4109 2334 FEF762F9 		BL	STORE			//  na , save na for vocabulary link
 4110 2338 FEF75EFB 		BL	COUNT			//  na+1 count
 4111 233c FEF710FA 		BL	PLUS			//  na+1+count
 4112 2340 FEF712FD 		BL	ALGND			//  word boundary
 4113 2344 FEF7FEFB 		BL	CPP
 4114 2348 FEF758F9 		BL	STORE			//  top of dictionary now
 4115 234c 52F804FB 		_UNNEST
 4116              	SNAM1:
 4117 2350 FFF734F8 		BL	STRQP
 4118 2354 07       		.byte	7
 4119 2355 206E616D 		.ascii " name? "
 4119      653F20
 4120 235c FFF740BB 		B.W	ABORT
 4121              	
 4122              	//    $COMPILE	( a -- )
 4123              	// 	Compile next word to code dictionary as a token or literal.
 4124              	
 4125 2360 CC160018 		.word	_UNIQU+MAPOFFSET
 4126 2364 08       	_SCOMP:	.byte  8
 4127 2365 2424434F 		.ascii "$$COMPILE"
 4127      4D50494C 
 4127      45
 4128 236e 00BF     		.p2align 2 	
 4129              	SCOMP:
 4130 2370 42F804ED 		_NEST
 4131 2374 FFF76EFA 		BL	NAMEQ
 4132 2378 FEF77AFA 		BL	QDUP	// defined?
 4133 237c FEF722F9 		BL	QBRAN
 4134 2380 AC170018 		.word	SCOM2+MAPOFFSET
 4135 2384 FEF744F9 		BL	AT
 4136 2388 FEF7F9F8 		_DOLIT
 4137 238c 80000000 		.word	IMEDD
 4138 2390 FEF7A6F9 		BL	ANDD	// immediate?
 4139 2394 FEF716F9 		BL	QBRAN
 4140 2398 A4170018 		.word	SCOM1+MAPOFFSET
 4141 239c FEF7FEF8 		BL	EXECU
 4142 23a0 52F804FB 		_UNNEST			// it's immediate, execute
 4143              	SCOM1:
 4144 23a4 00F05AF8 		BL	CALLC			// it's not immediate, compile
 4145 23a8 52F804FB 		_UNNEST	
 4146              	SCOM2:
 4147 23ac FEF7E4FE 		BL	NUMBQ
 4148 23b0 FEF708F9 		BL	QBRAN
 4149 23b4 C0170018 		.word	SCOM3+MAPOFFSET
 4150 23b8 FFF76CFE 		BL	LITER
 4151 23bc 52F804FB 		_UNNEST			// compile number as integer
 4152              	SCOM3: // compilation abort 
 4153 23c0 00F002F8 		BL COLON_ABORT 
 4154 23c4 FFF70CBB 		B.W	ABORT			// error
 4155              	
 4156              	// before aborting a compilation 
 4157              	// reset HERE and LAST
 4158              	// to previous values.  
 4159              	COLON_ABORT:
 4160 23c8 42F804ED 		_NEST 
 4161 23cc FEF7CEFB 		BL LAST 
 4162 23d0 FEF71EF9 		BL AT 
ARM GAS  stm32eforth.s 			page 78


 4163 23d4 FEF71AFA 		BL CELLM 
 4164 23d8 FEF75EF9 		BL DUPP 
 4165 23dc FEF7B2FB 		BL CPP  
 4166 23e0 FEF70CF9 		BL STORE 
 4167 23e4 FEF714F9 		BL AT 
 4168 23e8 FEF7C0FB 		BL LAST 
 4169 23ec FEF706F9 		BL STORE 
 4170 23f0 52F804FB 		_UNNEST 
 4171              	
 4172              	//    OVERT	( -- )
 4173              	// 	Link a new word into the current vocabulary.
 4174              	
 4175 23f4 64170018 		.word	_SCOMP+MAPOFFSET
 4176 23f8 05       	_OVERT:	.byte  5
 4177 23f9 4F564552 		.ascii "OVERT"
 4177      54
 4178 23fe 00BF     		.p2align 2 	
 4179              	OVERT:
 4180 2400 42F804ED 		_NEST
 4181 2404 FEF7B2FB 		BL	LAST
 4182 2408 FEF702F9 		BL	AT
 4183 240c FEF790FB 		BL	CNTXT
 4184 2410 FEF7F4F8 		BL	STORE
 4185 2414 52F804FB 		_UNNEST
 4186              	
 4187              	//    ; 	   ( -- )
 4188              	// 	Terminate a colon definition.
 4189              	
 4190 2418 F8170018 		.word	_OVERT+MAPOFFSET
 4191 241c C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 4192 241d 3B       		.ascii ";"
 4193 241e 00BF     		.p2align 2 	
 4194              	SEMIS:
 4195 2420 42F804ED 		_NEST
 4196 2424 FEF7ABF8 		_DOLIT
 4197 2428 52F804FB 		_UNNEST
 4198 242c FFF7F2FD 		BL	COMMA
 4199 2430 FFF736FB 		BL	LBRAC
 4200 2434 FFF7E4FF 		BL	OVERT
 4201 2438 52F804FB 		_UNNEST
 4202              	
 4203              	//    ]	   ( -- )
 4204              	// 	Start compiling the words in the input stream.
 4205              	
 4206 243c 1C180018 		.word	_SEMIS+MAPOFFSET
 4207 2440 01       	_RBRAC:	.byte  1
 4208 2441 5D       		.ascii "]"
 4209 2442 00BF     		.p2align 2 	
 4210              	RBRAC:
 4211 2444 42F804ED 		_NEST
 4212 2448 FEF799F8 		_DOLIT
 4213 244c 70170018 		.word	SCOMP+MAPOFFSET
 4214 2450 FEF758FB 		BL	TEVAL
 4215 2454 FEF7D2F8 		BL	STORE
 4216 2458 52F804FB 		_UNNEST
 4217              	
 4218              	//    BL.W	( ca -- )
ARM GAS  stm32eforth.s 			page 79


 4219              	// 	Assemble a branch-link long instruction to ca.
 4220              	// 	BL.W is split into 2 16 bit instructions with 11 bit address fields.
 4221              	
 4222              	// 	.word	_RBRAC+MAPOFFSET
 4223              	// _CALLC	.byte  5
 4224              	// 	.ascii "call,"
 4225              	// 	.p2align 2 	
 4226              	CALLC:
 4227 245c 42F804ED 		_NEST
 4228 2460 25F00105 		BIC	R5,R5,#1		//  clear b0 of address from R>
 4229 2464 FEF7D8FC 		BL	HERE
 4230 2468 FEF782F9 		BL	SUBB
 4231 246c A5F10405 		SUB	R5,R5,#4		//  pc offset
 4232 2470 40F2FF70 		MOVW	R0,#0x7FF		//  11 bit mask
 4233 2474 2C46     		MOV	R4,R5
 4234 2476 4FEA1535 		LSR	R5,R5,#12		//  get bits 22-12
 4235 247a 05EA0005 		AND	R5,R5,R0
 4236 247e 4FEAC434 		LSL	R4,R4,#15		//  get bits 11-1
 4237 2482 45EA0405 		ORR	R5,R5,R4
 4238 2486 45F07845 		ORR	R5,R5,#0xF8000000
 4239 248a 45F47045 		ORR	R5,R5,#0xF000
 4240 248e FFF7C1FD 		BL	COMMA			//  assemble BL.W instruction
 4241 2492 52F804FB 		_UNNEST
 4242              	
 4243              	
 4244              	// 	:	( -- //  string> )
 4245              	// 	Start a new colon definition using next word as its name.
 4246              	
 4247 2496 40180018 		.word	_RBRAC+MAPOFFSET
 4248 249a 01       	_COLON:	.byte  1
 4249 249b 3A       		.ascii ":"
 4250              		.p2align 2 	
 4251              	COLON:
 4252 249c 42F804ED 		_NEST
 4253 24a0 FFF71EF9 		BL	TOKEN
 4254 24a4 FFF730FF 		BL	SNAME
 4255 24a8 FEF769F8 		_DOLIT
 4256 24ac 42F804ED 		_NEST
 4257 24b0 FFF7B0FD 		BL	COMMA
 4258 24b4 FFF7C6FF 		BL	RBRAC
 4259 24b8 52F804FB 		_UNNEST
 4260              	
 4261              	//    IMMEDIATE   ( -- )
 4262              	// 	Make the last compiled word an immediate word.
 4263              	
 4264 24bc 9A180018 		.word	_COLON+MAPOFFSET
 4265 24c0 09       	_IMMED:	.byte  9
 4266 24c1 494D4D45 		.ascii "IMMEDIATE"
 4266      44494154 
 4266      45
 4267 24ca 00BF     		.p2align 2 	
 4268              	IMMED:
 4269 24cc 42F804ED 		_NEST
 4270 24d0 FEF755F8 		_DOLIT
 4271 24d4 80000000 		.word	IMEDD
 4272 24d8 FEF748FB 		BL	LAST
 4273 24dc FEF798F8 		BL	AT
ARM GAS  stm32eforth.s 			page 80


 4274 24e0 FEF796F8 		BL	AT
 4275 24e4 FEF706F9 		BL	ORR
 4276 24e8 FEF740FB 		BL	LAST
 4277 24ec FEF790F8 		BL	AT
 4278 24f0 FEF784F8 		BL	STORE
 4279 24f4 52F804FB 		_UNNEST
 4280              	
 4281              	// **************************************************************************
 4282              	//  Defining words
 4283              	
 4284              	//    CONSTANT	( u -- //  string> )
 4285              	// 	Compile a new constant.
 4286              	
 4287 24f8 C0180018 		.word	_IMMED+MAPOFFSET
 4288 24fc 08       	_CONST:	.byte  8
 4289 24fd 434F4E53 		.ascii "CONSTANT"
 4289      54414E54 
 4290 2505 0000BF   		.p2align 2 	
 4291              	CONST:
 4292 2508 42F804ED 		_NEST
 4293 250c FFF7E8F8 		BL	TOKEN
 4294 2510 FFF7FAFE 		BL	SNAME
 4295 2514 FFF774FF 		BL	OVERT
 4296 2518 FEF731F8 		_DOLIT
 4297 251c 42F804ED 		_NEST
 4298 2520 FFF778FD 		BL	COMMA
 4299 2524 FEF72BF8 		_DOLIT
 4300 2528 2CFEFF17 		.word	DOCON+MAPOFFSET
 4301 252c FFF796FF 		BL	CALLC
 4302 2530 FFF770FD 		BL	COMMA
 4303 2534 52F804FB 		_UNNEST
 4304              	
 4305              	//    CREATE	( -- //  string> )
 4306              	// 	Compile a new array entry without allocating code space.
 4307              	
 4308 2538 FC180018 		.word	_CONST+MAPOFFSET
 4309 253c 06       	_CREAT:	.byte  6
 4310 253d 43524541 		.ascii "CREATE"
 4310      5445
 4311 2543 00       		.p2align 2 	
 4312              	CREAT:
 4313 2544 42F804ED 		_NEST
 4314 2548 FFF7CAF8 		BL	TOKEN
 4315 254c FFF7DCFE 		BL	SNAME
 4316 2550 FFF756FF 		BL	OVERT
 4317 2554 FEF713F8 		_DOLIT
 4318 2558 42F804ED 		_NEST
 4319 255c FFF75AFD 		BL	COMMA
 4320 2560 FEF70DF8 		_DOLIT
 4321 2564 20FEFF17 		.word	DOVAR+MAPOFFSET
 4322 2568 FFF778FF 		BL	CALLC
 4323 256c 52F804FB 		_UNNEST
 4324              	
 4325              	//    VARIABLE	( -- //  string> )
 4326              	// 	Compile a new variable initialized to 0.
 4327              	
 4328 2570 3C190018 		.word	_CREAT+MAPOFFSET
ARM GAS  stm32eforth.s 			page 81


 4329 2574 08       	_VARIA:	.byte  8
 4330 2575 56415249 		.ascii "VARIABLE"
 4330      41424C45 
 4331 257d 0000BF   		.p2align 2 	
 4332              	VARIA:
 4333 2580 42F804ED 		_NEST
 4334 2584 FFF7DEFF 		BL	CREAT
 4335 2588 FDF7F9FF 		_DOLIT
 4336 258c 00000000 		.word	0
 4337 2590 FFF740FD 		BL	COMMA
 4338 2594 52F804FB 		_UNNEST
 4339              	
 4340              	// **************************************************************************
 4341              	//  Tools
 4342              	
 4343              	//    dm+	 ( a u -- a )
 4344              	// 	Dump u bytes from , leaving a+u on the stack.
 4345              	
 4346              	// 	.word	_VARIA+MAPOFFSET
 4347              	// _DMP	.byte  3
 4348              	// 	.ascii "dm+"
 4349              	// 	.p2align 2 	
 4350              	DMP:
 4351 2598 42F804ED 		_NEST
 4352 259c FEF78EF8 		BL	OVER
 4353 25a0 FDF7EDFF 		_DOLIT
 4354 25a4 04000000 		.word	4
 4355 25a8 FEF738FF 		BL	UDOTR			// display address
 4356 25ac FEF79CFE 		BL	SPACE
 4357 25b0 FEF756F8 		BL	TOR			// start count down loop
 4358 25b4 00F00CB8 		B.W	PDUM2			// skip first pass
 4359              	PDUM1:
 4360 25b8 FEF76EF8 	  BL	DUPP
 4361 25bc FEF738F8 		BL	CAT
 4362 25c0 FDF7DDFF 		_DOLIT
 4363 25c4 03000000 		.word	3
 4364 25c8 FEF728FF 		BL	UDOTR			// display numeric data
 4365 25cc FEF7F6F8 		BL	ONEP			// increment address
 4366              	PDUM2:
 4367 25d0 FDF7E9FF 	  BL	DONXT
 4368 25d4 B8190018 		.word	PDUM1+MAPOFFSET	// loop till done
 4369 25d8 52F804FB 		_UNNEST
 4370              		.p2align 2 
 4371              	//    DUMP	( a u -- )
 4372              	// 	Dump u bytes from a, in a formatted manner.
 4373              	
 4374 25dc 74190018 		.word	_VARIA+MAPOFFSET
 4375 25e0 04       	_DUMP:	.byte  4
 4376 25e1 44554D50 		.ascii "DUMP"
 4377 25e5 0000BF   		.p2align 2 	
 4378              	DUMP:
 4379 25e8 42F804ED 		_NEST
 4380 25ec FEF75CFA 		BL	BASE
 4381 25f0 FEF70EF8 		BL	AT
 4382 25f4 FEF734F8 		BL	TOR
 4383 25f8 FEF766FD 		BL	HEX			// save radix,set hex
 4384 25fc FDF7BFFF 		_DOLIT
ARM GAS  stm32eforth.s 			page 82


 4385 2600 10000000 		.word	16
 4386 2604 FEF780FB 		BL	SLASH			// change count to lines
 4387 2608 FEF72AF8 		BL	TOR
 4388 260c 00F014B8 		B.W	DUMP4			// start count down loop
 4389              	DUMP1:
 4390 2610 FEF7AAFE 	  BL	CR
 4391 2614 FDF7B3FF 		_DOLIT
 4392 2618 10000000 		.word	16
 4393 261c FEF746F9 		BL	DDUP
 4394 2620 FFF7BAFF 		BL	DMP			// display numeric
 4395 2624 FEF72EF9 		BL	ROT
 4396 2628 FEF72CF9 		BL	ROT
 4397 262c FEF75CFE 		BL	SPACE
 4398 2630 FEF75AFE 		BL	SPACE
 4399 2634 FEF780FE 		BL	TYPEE			// display printable characters
 4400              	DUMP4:
 4401 2638 FDF7B5FF 	  BL	DONXT
 4402 263c 101A0018 		.word	DUMP1+MAPOFFSET	// loop till done
 4403              	DUMP3:
 4404 2640 FEF722F8 	  BL	DROP
 4405 2644 FDF7FAFF 		BL	RFROM
 4406 2648 FEF72EFA 		BL	BASE
 4407 264c FDF7D6FF 		BL	STORE			// restore radix
 4408 2650 52F804FB 		_UNNEST
 4409              	
 4410              	//    .S	  ( ... -- ... )
 4411              	// 	Display the contents of the data stack.
 4412              	
 4413 2654 E0190018 		.word	_DUMP+MAPOFFSET
 4414              	_DOTS:
 4415 2658 02       		.byte  2
 4416 2659 2E53     		.ascii ".S"
 4417 265b 00       		.p2align 2 	
 4418              	DOTS:
 4419 265c 42F804ED 		_NEST
 4420 2660 FEF742FE 		BL	SPACE
 4421 2664 FEF7B2FB 		BL	DEPTH			// stack depth
 4422 2668 FDF7FAFF 		BL	TOR			// start count down loop
 4423 266c 00F006B8 		B.W	DOTS2			// skip first pass
 4424              	DOTS1:
 4425 2670 FDF7EEFF 		BL	RAT
 4426 2674 FEF7BCFB 		BL	PICK
 4427 2678 FEF7FCFE 		BL	DOT			// index stack, display contents
 4428              	DOTS2:
 4429 267c FDF793FF 		BL	DONXT
 4430 2680 701A0018 		.word	DOTS1+MAPOFFSET	// loop till done
 4431 2684 FEF730FE 		BL	SPACE
 4432 2688 52F804FB 		_UNNEST
 4433              	
 4434              	//    >NAME	( ca -- na | F )
 4435              	// 	Convert code address to a name address.
 4436              	
 4437 268c 581A0018 		.word	_DOTS+MAPOFFSET
 4438 2690 05       	_TNAME:	.byte  5
 4439 2691 3E4E414D 		.ascii ">NAME"
 4439      45
 4440 2696 00BF     		.p2align 2 	
ARM GAS  stm32eforth.s 			page 83


 4441              	TNAME:
 4442 2698 42F804ED 		_NEST
 4443 269c FDF7E0FF 		BL	TOR			//  
 4444 26a0 FEF746FA 		BL	CNTXT			//  va
 4445 26a4 FDF7B4FF 		BL	AT			//  na
 4446              	TNAM1:
 4447 26a8 FDF7F6FF 		BL	DUPP			//  na na
 4448 26ac FDF78AFF 		BL	QBRAN
 4449 26b0 D81A0018 		.word	TNAM2+MAPOFFSET	//  vocabulary end, no match
 4450 26b4 FDF7F0FF 		BL	DUPP			//  na na
 4451 26b8 FFF720F8 		BL	NAMET			//  na ca
 4452 26bc FDF7C8FF 		BL	RAT			//  na ca code
 4453 26c0 FEF722F8 		BL	XORR			//  na f --
 4454 26c4 FDF77EFF 		BL	QBRAN
 4455 26c8 D81A0018 		.word	TNAM2+MAPOFFSET
 4456 26cc FEF79EF8 		BL	CELLM			//  la 
 4457 26d0 FDF79EFF 		BL	AT			//  next_na
 4458 26d4 FFF7E8BF 		B.W	TNAM1
 4459              	TNAM2:	
 4460 26d8 FDF7B0FF 		BL	RFROM
 4461 26dc FDF7D4FF 		BL	DROP			//  0|na --
 4462 26e0 52F804FB 		_UNNEST			// 0
 4463              	
 4464              	//    .ID	 ( na -- )
 4465              	// 	Display the name at address.
 4466              	
 4467 26e4 901A0018 		.word	_TNAME+MAPOFFSET
 4468 26e8 03       	_DOTID:	.byte  3
 4469 26e9 2E4944   		.ascii ".ID"
 4470              		.p2align 2 	
 4471              	DOTID:
 4472 26ec 42F804ED 		_NEST
 4473 26f0 FEF7BEF8 		BL	QDUP			// if zero no name
 4474 26f4 FDF766FF 		BL	QBRAN
 4475 26f8 141B0018 		.word	DOTI1+MAPOFFSET
 4476 26fc FEF77CF9 		BL	COUNT
 4477 2700 FDF73DFF 		_DOLIT
 4478 2704 1F000000 		.word	0x1F
 4479 2708 FDF7EAFF 		BL	ANDD			// mask lexicon bits
 4480 270c FEF714FE 		BL	TYPEE
 4481 2710 52F804FB 		_UNNEST			// display name string
 4482              	DOTI1:
 4483 2714 FEF760FE 		BL	DOTQP
 4484 2718 09       		.byte	9
 4485 2719 207B6E6F 		.ascii " {noName}"
 4485      4E616D65 
 4485      7D
 4486 2722 00BF     		.p2align 2 	
 4487 2724 52F804FB 		_UNNEST
 4488              	
 4489              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 4490              	.if WANT_SEE 
 4491              	//    SEE	 ( -- //  string> )
 4492              	// 	A simple decompiler.
 4493              	
 4494              		.word	_DOTID+MAPOFFSET
 4495              	_SEE:	.byte  3
ARM GAS  stm32eforth.s 			page 84


 4496              		.ascii "SEE"
 4497              		.p2align 2 	
 4498              	SEE:
 4499              		_NEST
 4500              		BL	TICK	//  ca --, starting address
 4501              		BL	CR	
 4502              		_DOLIT
 4503              		.word	20
 4504              		BL	TOR
 4505              	SEE1:
 4506              		BL	CELLP			//  a
 4507              		BL	DUPP			//  a a
 4508              		BL	DECOMP		//  a
 4509              		BL	DONXT
 4510              		.word	SEE1+MAPOFFSET
 4511              		BL	DROP
 4512              		_UNNEST
 4513              	
 4514              	// 	DECOMPILE ( a -- )
 4515              	// 	Convert code in a.  Display name of command or as data.
 4516              	
 4517              		.word	_SEE+MAPOFFSET
 4518              	_DECOM:	.byte  9
 4519              		.ascii "DECOMPILE"
 4520              		.p2align 2 
 4521              		
 4522              	DECOMP:	
 4523              		_NEST
 4524              		BL	DUPP			//  a a
 4525              	// 	BL	TOR			//  a
 4526              		BL	AT			//  a code
 4527              		BL	DUPP			//  a code code
 4528              		_DOLIT
 4529              		.word	0xF800D000 //0xF800F800
 4530              		BL	ANDD
 4531              		_DOLIT
 4532              		.word	0xF000D000 //0xF800F000
 4533              		BL	EQUAL			//  a code ?
 4534              		BL	INVER 
 4535              		BL	QBRAN
 4536              		.word	DECOM2+MAPOFFSET	//  not a command
 4537              		//  a valid_code --, extract address and display name
 4538              		MOVW	R0,#0xFFE
 4539              		MOV	R4,R5
 4540              		LSL	R5,R5,#21		//  get bits 22-12
 4541              		ASR	R5,R5,#9		//  with sign extension
 4542              		LSR	R4,R4,#15		//  get bits 11-1
 4543              		AND	R4,R4,R0		//  retain only bits 11-1
 4544              		ORR	R5,R5,R4		//  get bits 22-1
 4545              		NOP
 4546              		BL	OVER			//  a offset a
 4547              		BL	PLUS			//  a target-4
 4548              		BL	CELLP			//  a target
 4549              		BL	TNAME			//  a na/0 --, is it a name?
 4550              		BL	QDUP			//  name address or zero
 4551              		BL	QBRAN
 4552              		.word	DECOM1+MAPOFFSET
ARM GAS  stm32eforth.s 			page 85


 4553              		BL	SPACE			//  a na
 4554              		BL	DOTID			//  a --, display name
 4555              	// 	BL	RFROM			//  a
 4556              		BL	DROP
 4557              		_UNNEST
 4558              	DECOM1:	// BL	RFROM		//  a
 4559              		BL	AT			//  data
 4560              		BL	UDOT			//  display data
 4561              		_UNNEST
 4562              	DECOM2:
 4563              		BL	UDOT
 4564              	// 	BL	RFROM
 4565              		BL	DROP
 4566              		_UNNEST
 4567              	
 4568              	//    WORDS	( -- )
 4569              	// 	Display the names in the context vocabulary.
 4570              	
 4571              		.word	_DECOM+MAPOFFSET
 4572              	.else 
 4573 2728 E81A0018 		.word _DOTID+MAPOFFSET 
 4574              	.endif 
 4575 272c 05       	_WORDS:	.byte  5
 4576 272d 574F5244 		.ascii "WORDS"
 4576      53
 4577 2732 00BF     		.p2align 2 	
 4578              	WORDS:
 4579 2734 42F804ED 		_NEST
 4580 2738 FEF716FE 		BL	CR
 4581 273c FEF7F8F9 		BL	CNTXT
 4582 2740 FDF766FF 		BL	AT			// only in context
 4583              	WORS1:
 4584 2744 FEF794F8 		BL	QDUP			// ?at end of list
 4585 2748 FDF73CFF 		BL	QBRAN
 4586 274c 681B0018 		.word	WORS2+MAPOFFSET
 4587 2750 FDF7A2FF 		BL	DUPP
 4588 2754 FEF7C8FD 		BL	SPACE
 4589 2758 FFF7C8FF 		BL	DOTID			// display a name
 4590 275c FEF756F8 		BL	CELLM
 4591 2760 FDF756FF 		BL	AT
 4592 2764 FFF7EEBF 		B.W	WORS1
 4593              	WORS2:
 4594 2768 52F804FB 		_UNNEST
 4595              	
 4596              	// **************************************************************************
 4597              	//  cold start
 4598              	
 4599              	//    VER	 ( -- n )
 4600              	// 	Return the version number of this implementation.
 4601              	
 4602              	// 	.word	_WORDS+MAPOFFSET
 4603              	// _VERSN	.byte  3
 4604              	// 	.ascii "VER"
 4605              	// 	.p2align 2 	
 4606              	VERSN:
 4607 276c 42F804ED 		_NEST
 4608 2770 FDF705FF 		_DOLIT
ARM GAS  stm32eforth.s 			page 86


 4609 2774 00010000 		.word	VER*256+EXT
 4610 2778 52F804FB 		_UNNEST
 4611              	
 4612              	//    hi	  ( -- )
 4613              	// 	Display the sign-on message of eForth.
 4614              	
 4615 277c 2C1B0018 		.word	_WORDS+MAPOFFSET
 4616 2780 02       	_HI:	.byte  2
 4617 2781 4849     		.ascii "HI"
 4618 2783 00       		.p2align 2 	
 4619              	HI:
 4620 2784 42F804ED 		_NEST
 4621 2788 FEF7EEFD 		BL	CR	// initialize I/O
 4622 278c FEF724FE 		BL	DOTQP
 4623 2790 17       		.byte	23
 4624 2791 626C7565 		.ascii "blue pill stm32eForth v" 
 4624      2070696C 
 4624      6C207374 
 4624      6D333265 
 4624      466F7274 
 4625              		.p2align 2
 4626 27a8 FEF77EF9 		BL	BASE
 4627 27ac FDF730FF 		BL	AT
 4628 27b0 FEF78AFC 		BL	HEX	// save radix
 4629 27b4 FFF7DAFF 		BL	VERSN
 4630 27b8 FEF702FC 		BL	BDIGS
 4631 27bc FEF726FC 		BL	DIG
 4632 27c0 FEF724FC 		BL	DIG
 4633 27c4 FDF7DBFE 		_DOLIT
 4634 27c8 2E000000 		.word	'.'
 4635 27cc FEF708FC 		BL	HOLD
 4636 27d0 FEF72CFC 		BL	DIGS
 4637 27d4 FEF750FC 		BL	EDIGS
 4638 27d8 FEF7AEFD 		BL	TYPEE	// format version number
 4639 27dc FEF764F9 		BL	BASE
 4640 27e0 FDF70CFF 		BL	STORE
 4641 27e4 FEF7C0FD 		BL	CR
 4642 27e8 52F804FB 		_UNNEST			// restore radix
 4643              	
 4644              	//    COLD	( -- )
 4645              	// 	The high level cold start sequence.
 4646              	
 4647 27ec 801B0018 		.word	_HI+MAPOFFSET
 4648 27f0 04       	LASTN:	.byte  4
 4649 27f1 434F4C44 		.ascii "COLD"
 4650 27f5 000000   		.p2align 2,0	
 4651              	COLD:
 4652              	//  Initiate Forth registers
 4653 27f8 4FF00003 		MOV R3,#UPP&0xffff	//  user area 
 4654 27fc C2F20003 	 	MOVT R3,#UPP>>16		  
 4655 2800 03F59F42 		ADD R2,R3,#RPP&0xffff	// Forth return stack
 4656 2804 03F59D41 		ADD R1,R3,#SPP&0xffff // Forth data stack
 4657 2808 85EA0505 		EOR R5,R5,R5			//  tos=0
 4658 280c 00BF     		NOP
 4659 280e 42F804ED 		_NEST
 4660              	COLD1:
 4661 2812 FDF7B4FE 		_DOLIT 
ARM GAS  stm32eforth.s 			page 87


 4662 2816 00000000 		.word 0 
 4663 281a FDF771FE 		BL ULED // turn off user LED 
 4664 281e FDF7AEFE 		_DOLIT
 4665 2822 00040000 		.word	UZERO
 4666 2826 FDF7AAFE 		_DOLIT
 4667 282a 00000020 		.word	UPP
 4668 282e FDF7A6FE 		_DOLIT
 4669 2832 54000000 		.word	ULAST-UZERO
 4670 2836 FEF737FB 		BL	MOVE 			// initialize user area
 4671 283a FFF795F9 		BL	PRESE			// initialize stack and TIB
 4672 283e FDF79EFE 		_DOLIT				// check if user image saved in slot 0 
 4673 2842 00000000 		.word 0
 4674 2846 FFF777FA 		BL IMGQ 
 4675 284a FDF7BBFE 		BL	QBRAN 
 4676 284e 5E1C0018 		.word 1f+MAPOFFSET
 4677 2852 FDF794FE 		_DOLIT 
 4678 2856 00000000 		.word 0
 4679 285a FFF785FA 		BL	LOAD_IMG 
 4680 285e FEF719F9 	1:	BL	TBOOT
 4681 2862 FEF7FDFA 		BL	ATEXE			// application boot
 4682 2866 FFF7CBFD 		BL	OVERT
 4683 286a FFF789B9 		B.W	QUIT			// start interpretation
 4684              	COLD2:
 4685 286e 00BF     		.p2align 3 	
 4686              	CTOP:
 4687 2870 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4688 2874 AFF30080 		.p2align 10 
 4688      AFF30080 
 4688      AFF30080 
 4688      00000000 
 4688      00000000 
 4689              	USER_SPACE: // save user image here.  
 4690 2c00 FFFFFFFF 		.word 0XFFFFFFFF
 4691              	
 4692              	  .end 
ARM GAS  stm32eforth.s 			page 88


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  stm32eforth.s 			page 89


board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
board/blue-pill/stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
board/blue-pill/stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
board/blue-pill/stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
board/blue-pill/stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
board/blue-pill/stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
board/blue-pill/stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
board/blue-pill/stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
board/blue-pill/stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
board/blue-pill/stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
board/blue-pill/stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
board/blue-pill/stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
board/blue-pill/stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
board/blue-pill/stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
board/blue-pill/stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
board/blue-pill/stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
board/blue-pill/stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32eforth.s:83     *ABS*:0000000040011000 LED_GPIO
       stm32eforth.s:84     *ABS*:000000000000000d LED_PIN
       stm32eforth.s:85     *ABS*:0000000040013800 UART
       stm32eforth.s:88     *ABS*:0000000020004e80 SPP
       stm32eforth.s:89     *ABS*:0000000020004e80 TIBB
       stm32eforth.s:90     *ABS*:0000000020004f80 RPP
       stm32eforth.s:91     *ABS*:0000000020000000 UPP
       stm32eforth.s:92     *ABS*:0000000020000100 DTOP
       stm32eforth.s:93     *ABS*:0000000020004e00 DEND
       stm32eforth.s:94     *ABS*:0000000020000000 RAMOFFSET
       stm32eforth.s:95     *ABS*:0000000020005000 RAMEND
       stm32eforth.s:96     *ABS*:0000000008000c00 FLASHOFFSET
       stm32eforth.s:99     *ABS*:0000000017fff400 MAPOFFSET
       stm32eforth.s:104    *ABS*:0000000000000004 SEED_OFS
       stm32eforth.s:105    *ABS*:0000000000000008 TICKS_OFS
       stm32eforth.s:106    *ABS*:000000000000000c TIMER_OFS
       stm32eforth.s:107    *ABS*:0000000000000010 TORAM_OFS
       stm32eforth.s:108    *ABS*:0000000000000014 IMG_SIGN_OFS
       stm32eforth.s:109    *ABS*:0000000000000018 BOOT_OFS
       stm32eforth.s:110    *ABS*:000000000000001c BASE_OFS
       stm32eforth.s:111    *ABS*:0000000000000020 TMP_OFS
       stm32eforth.s:112    *ABS*:0000000000000024 SPAN_OFS
       stm32eforth.s:113    *ABS*:0000000000000028 TOIN_OFS
       stm32eforth.s:114    *ABS*:000000000000002c NTIB_OFS
       stm32eforth.s:115    *ABS*:0000000000000030 TIB_OFS
       stm32eforth.s:116    *ABS*:0000000000000034 EVAL_OFS
       stm32eforth.s:117    *ABS*:0000000000000038 HLD_OFS
       stm32eforth.s:118    *ABS*:000000000000003c CTXT_OFS
       stm32eforth.s:119    *ABS*:0000000000000040 FORTH_CTOP_OFS
       stm32eforth.s:120    *ABS*:0000000000000044 USER_CTOP_OFS
ARM GAS  stm32eforth.s 			page 90


       stm32eforth.s:121    *ABS*:0000000000000048 LASTN_OFS
       stm32eforth.s:122    *ABS*:000000000000004c VARS_END_OFS
       stm32eforth.s:158    .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:292    .text.reset_handler:0000000000000000 reset_handler
       stm32eforth.s:249    .text.default_handler:0000000000000000 default_handler
       stm32eforth.s:271    .text.default_handler:0000000000000034 systick_handler
       stm32eforth.s:247    .text.default_handler:0000000000000000 $t
       stm32eforth.s:259    .text.default_handler:000000000000001c exception_msg
       stm32eforth.s:614    .text.reset_handler:000000000000055c EMIT
       stm32eforth.s:260    .text.default_handler:000000000000001c $d
       stm32eforth.s:281    .text.default_handler:000000000000004e systick_exit
       stm32eforth.s:290    .text.reset_handler:0000000000000000 $t
       stm32eforth.s:404    .text.reset_handler:00000000000000e4 remap
       stm32eforth.s:304    .text.reset_handler:0000000000000014 init_devices
       stm32eforth.s:299    .text.reset_handler:0000000000000010 forth_entry
       stm32eforth.s:300    .text.reset_handler:0000000000000010 $d
       stm32eforth.s:4651   .text.reset_handler:00000000000027f8 COLD
       stm32eforth.s:303    .text.reset_handler:0000000000000014 $t
       stm32eforth.s:319    .text.reset_handler:0000000000000032 wait_hserdy
       stm32eforth.s:339    .text.reset_handler:000000000000004c wait_pllrdy
       stm32eforth.s:352    .text.reset_handler:000000000000006c wait_sws
       stm32eforth.s:424    .text.reset_handler:000000000000011c remap_dest
       stm32eforth.s:422    .text.reset_handler:0000000000000118 remap_src
       stm32eforth.s:4686   .text.reset_handler:0000000000002870 CTOP
       stm32eforth.s:470    .text.reset_handler:0000000000000400 UZERO
       stm32eforth.s:423    .text.reset_handler:0000000000000118 $d
       stm32eforth.s:430    *ABS*:0000000000000001 VER
       stm32eforth.s:431    *ABS*:0000000000000000 EXT
       stm32eforth.s:435    *ABS*:0000000000000040 COMPO
       stm32eforth.s:436    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:437    *ABS*:00000000ffffff1f MASKK
       stm32eforth.s:439    *ABS*:0000000000000004 CELLL
       stm32eforth.s:440    *ABS*:000000000000000a BASEE
       stm32eforth.s:441    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:443    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:444    *ABS*:000000000000000a LF
       stm32eforth.s:445    *ABS*:000000000000000d CRR
       stm32eforth.s:446    *ABS*:000000000000001b ERR
       stm32eforth.s:447    *ABS*:0000000000000027 TIC
       stm32eforth.s:468    .text.reset_handler:0000000000000120 $t
       stm32eforth.s:471    .text.reset_handler:0000000000000400 $d
       stm32eforth.s:4619   .text.reset_handler:0000000000002784 HI
       stm32eforth.s:3200   .text.reset_handler:0000000000001a44 INTER
       stm32eforth.s:4648   .text.reset_handler:00000000000027f0 LASTN
       stm32eforth.s:491    .text.reset_handler:0000000000000454 ULAST
       stm32eforth.s:504    .text.reset_handler:0000000000000454 $d
       stm32eforth.s:505    .text.reset_handler:0000000000000458 _RAND
       stm32eforth.s:508    .text.reset_handler:0000000000000460 RAND
       stm32eforth.s:1460   .text.reset_handler:0000000000000a44 SEED
       stm32eforth.s:750    .text.reset_handler:0000000000000610 AT
       stm32eforth.s:844    .text.reset_handler:0000000000000698 DUPP
       stm32eforth.s:737    .text.reset_handler:00000000000005fc STORE
       stm32eforth.s:1243   .text.reset_handler:0000000000000900 ABSS
       stm32eforth.s:855    .text.reset_handler:00000000000006a8 SWAP
       stm32eforth.s:1810   .text.reset_handler:0000000000000cf0 MODD
       stm32eforth.s:528    .text.reset_handler:00000000000004a0 $d
       stm32eforth.s:529    .text.reset_handler:00000000000004a4 _REBOOT
ARM GAS  stm32eforth.s 			page 91


       stm32eforth.s:532    .text.reset_handler:00000000000004ac REBOOT
       stm32eforth.s:539    .text.reset_handler:00000000000004bc scb_adr
       stm32eforth.s:540    .text.reset_handler:00000000000004bc $d
       stm32eforth.s:545    .text.reset_handler:00000000000004c4 _PAUSE
       stm32eforth.s:547    .text.reset_handler:00000000000004ca $t
       stm32eforth.s:548    .text.reset_handler:00000000000004cc PAUSE
       stm32eforth.s:1482   .text.reset_handler:0000000000000a6c TIMER
       stm32eforth.s:552    .text.reset_handler:00000000000004d8 PAUSE_LOOP
       stm32eforth.s:697    .text.reset_handler:00000000000005c4 QBRAN
       stm32eforth.s:556    .text.reset_handler:00000000000004e4 $d
       stm32eforth.s:559    .text.reset_handler:00000000000004f0 PAUSE_EXIT
       stm32eforth.s:715    .text.reset_handler:00000000000005dc BRAN
       stm32eforth.s:557    .text.reset_handler:00000000000004e8 $t
       stm32eforth.s:558    .text.reset_handler:00000000000004ec $d
       stm32eforth.s:560    .text.reset_handler:00000000000004f0 $t
       stm32eforth.s:564    .text.reset_handler:00000000000004f4 $d
       stm32eforth.s:565    .text.reset_handler:00000000000004f8 _ULED
       stm32eforth.s:569    .text.reset_handler:0000000000000500 ULED
       stm32eforth.s:578    .text.reset_handler:0000000000000518 ULED_OFF
       stm32eforth.s:584    .text.reset_handler:000000000000051c $d
       stm32eforth.s:585    .text.reset_handler:0000000000000520 _QRX
       stm32eforth.s:588    .text.reset_handler:0000000000000528 QKEY
       stm32eforth.s:589    .text.reset_handler:0000000000000528 QRX
       stm32eforth.s:600    .text.reset_handler:0000000000000548 QRX1
       stm32eforth.s:609    .text.reset_handler:0000000000000550 $d
       stm32eforth.s:610    .text.reset_handler:0000000000000554 _TXSTO
       stm32eforth.s:613    .text.reset_handler:000000000000055c TXSTO
       stm32eforth.s:615    .text.reset_handler:000000000000055c TECHO
       stm32eforth.s:618    .text.reset_handler:0000000000000564 TX1
       stm32eforth.s:632    .text.reset_handler:0000000000000574 $d
       stm32eforth.s:633    .text.reset_handler:0000000000000578 _NOP
       stm32eforth.s:635    .text.reset_handler:000000000000057c $t
       stm32eforth.s:636    .text.reset_handler:000000000000057c NOP
       stm32eforth.s:647    .text.reset_handler:000000000000057e DOLIT
       stm32eforth.s:657    .text.reset_handler:0000000000000590 $d
       stm32eforth.s:658    .text.reset_handler:0000000000000594 _EXECU
       stm32eforth.s:660    .text.reset_handler:000000000000059c $t
       stm32eforth.s:661    .text.reset_handler:000000000000059c EXECU
       stm32eforth.s:675    .text.reset_handler:00000000000005a6 DONXT
       stm32eforth.s:682    .text.reset_handler:00000000000005b4 NEXT1
       stm32eforth.s:704    .text.reset_handler:00000000000005d6 QBRAN1
       stm32eforth.s:723    .text.reset_handler:00000000000005e6 $d
       stm32eforth.s:724    .text.reset_handler:00000000000005ea _EXIT
       stm32eforth.s:727    .text.reset_handler:00000000000005f0 EXIT
       stm32eforth.s:733    .text.reset_handler:00000000000005f4 $d
       stm32eforth.s:734    .text.reset_handler:00000000000005f8 _STORE
       stm32eforth.s:736    .text.reset_handler:00000000000005fa $t
       stm32eforth.s:746    .text.reset_handler:0000000000000608 $d
       stm32eforth.s:747    .text.reset_handler:000000000000060c _AT
       stm32eforth.s:749    .text.reset_handler:000000000000060e $t
       stm32eforth.s:757    .text.reset_handler:0000000000000614 $d
       stm32eforth.s:758    .text.reset_handler:0000000000000618 _CSTOR
       stm32eforth.s:761    .text.reset_handler:000000000000061c CSTOR
       stm32eforth.s:770    .text.reset_handler:0000000000000628 $d
       stm32eforth.s:771    .text.reset_handler:000000000000062c _CAT
       stm32eforth.s:774    .text.reset_handler:0000000000000630 CAT
       stm32eforth.s:781    .text.reset_handler:0000000000000634 $d
ARM GAS  stm32eforth.s 			page 92


       stm32eforth.s:782    .text.reset_handler:0000000000000638 _RFROM
       stm32eforth.s:785    .text.reset_handler:000000000000063c RFROM
       stm32eforth.s:793    .text.reset_handler:0000000000000646 $d
       stm32eforth.s:794    .text.reset_handler:000000000000064a _RAT
       stm32eforth.s:797    .text.reset_handler:0000000000000650 RAT
       stm32eforth.s:805    .text.reset_handler:0000000000000658 $d
       stm32eforth.s:806    .text.reset_handler:000000000000065c _TOR
       stm32eforth.s:809    .text.reset_handler:0000000000000660 TOR
       stm32eforth.s:817    .text.reset_handler:000000000000066a $d
       stm32eforth.s:818    .text.reset_handler:000000000000066e _SPAT
       stm32eforth.s:820    .text.reset_handler:0000000000000672 $t
       stm32eforth.s:821    .text.reset_handler:0000000000000674 SPAT
       stm32eforth.s:829    .text.reset_handler:000000000000067c $d
       stm32eforth.s:830    .text.reset_handler:0000000000000680 _DROP
       stm32eforth.s:833    .text.reset_handler:0000000000000688 DROP
       stm32eforth.s:840    .text.reset_handler:000000000000068e $d
       stm32eforth.s:841    .text.reset_handler:0000000000000692 _DUPP
       stm32eforth.s:843    .text.reset_handler:0000000000000696 $t
       stm32eforth.s:851    .text.reset_handler:000000000000069e $d
       stm32eforth.s:852    .text.reset_handler:00000000000006a2 _SWAP
       stm32eforth.s:864    .text.reset_handler:00000000000006b0 $d
       stm32eforth.s:865    .text.reset_handler:00000000000006b4 _OVER
       stm32eforth.s:868    .text.reset_handler:00000000000006bc OVER
       stm32eforth.s:876    .text.reset_handler:00000000000006c4 $d
       stm32eforth.s:877    .text.reset_handler:00000000000006c8 _ZLESS
       stm32eforth.s:880    .text.reset_handler:00000000000006cc ZLESS
       stm32eforth.s:888    .text.reset_handler:00000000000006d6 $d
       stm32eforth.s:889    .text.reset_handler:00000000000006da _ANDD
       stm32eforth.s:891    .text.reset_handler:00000000000006de $t
       stm32eforth.s:892    .text.reset_handler:00000000000006e0 ANDD
       stm32eforth.s:900    .text.reset_handler:00000000000006ea $d
       stm32eforth.s:901    .text.reset_handler:00000000000006ee _ORR
       stm32eforth.s:904    .text.reset_handler:00000000000006f4 ORR
       stm32eforth.s:912    .text.reset_handler:00000000000006fe $d
       stm32eforth.s:913    .text.reset_handler:0000000000000702 _XORR
       stm32eforth.s:915    .text.reset_handler:0000000000000706 $t
       stm32eforth.s:916    .text.reset_handler:0000000000000708 XORR
       stm32eforth.s:924    .text.reset_handler:0000000000000712 $d
       stm32eforth.s:925    .text.reset_handler:0000000000000716 _UPLUS
       stm32eforth.s:927    .text.reset_handler:000000000000071a $t
       stm32eforth.s:928    .text.reset_handler:000000000000071c UPLUS
       stm32eforth.s:939    .text.reset_handler:000000000000072c $d
       stm32eforth.s:940    .text.reset_handler:0000000000000730 _RSHIFT
       stm32eforth.s:943    .text.reset_handler:0000000000000738 RSHIFT
       stm32eforth.s:951    .text.reset_handler:0000000000000742 $d
       stm32eforth.s:952    .text.reset_handler:0000000000000746 _LSHIFT
       stm32eforth.s:955    .text.reset_handler:0000000000000750 LSHIFT
       stm32eforth.s:963    .text.reset_handler:000000000000075a $d
       stm32eforth.s:964    .text.reset_handler:000000000000075e _PLUS
       stm32eforth.s:966    .text.reset_handler:0000000000000760 $t
       stm32eforth.s:967    .text.reset_handler:0000000000000760 PLUS
       stm32eforth.s:975    .text.reset_handler:0000000000000768 $d
       stm32eforth.s:976    .text.reset_handler:000000000000076c _SUBB
       stm32eforth.s:978    .text.reset_handler:000000000000076e $t
       stm32eforth.s:979    .text.reset_handler:0000000000000770 SUBB
       stm32eforth.s:987    .text.reset_handler:000000000000077a $d
       stm32eforth.s:988    .text.reset_handler:000000000000077e _STAR
ARM GAS  stm32eforth.s 			page 93


       stm32eforth.s:990    .text.reset_handler:0000000000000780 $t
       stm32eforth.s:991    .text.reset_handler:0000000000000780 STAR
       stm32eforth.s:999    .text.reset_handler:000000000000078a $d
       stm32eforth.s:1000   .text.reset_handler:000000000000078e _UMSTA
       stm32eforth.s:1002   .text.reset_handler:0000000000000792 $t
       stm32eforth.s:1003   .text.reset_handler:0000000000000794 UMSTA
       stm32eforth.s:1013   .text.reset_handler:00000000000007a0 $d
       stm32eforth.s:1014   .text.reset_handler:00000000000007a4 _MSTAR
       stm32eforth.s:1017   .text.reset_handler:00000000000007a8 MSTAR
       stm32eforth.s:1027   .text.reset_handler:00000000000007b4 $d
       stm32eforth.s:1028   .text.reset_handler:00000000000007b8 _ONEP
       stm32eforth.s:1031   .text.reset_handler:00000000000007bc ONEP
       stm32eforth.s:1038   .text.reset_handler:00000000000007c2 $d
       stm32eforth.s:1039   .text.reset_handler:00000000000007c6 _ONEM
       stm32eforth.s:1042   .text.reset_handler:00000000000007cc ONEM
       stm32eforth.s:1049   .text.reset_handler:00000000000007d2 $d
       stm32eforth.s:1050   .text.reset_handler:00000000000007d6 _TWOP
       stm32eforth.s:1053   .text.reset_handler:00000000000007dc TWOP
       stm32eforth.s:1060   .text.reset_handler:00000000000007e2 $d
       stm32eforth.s:1061   .text.reset_handler:00000000000007e6 _TWOM
       stm32eforth.s:1064   .text.reset_handler:00000000000007ec TWOM
       stm32eforth.s:1071   .text.reset_handler:00000000000007f2 $d
       stm32eforth.s:1072   .text.reset_handler:00000000000007f6 _CELLP
       stm32eforth.s:1074   .text.reset_handler:00000000000007fc $t
       stm32eforth.s:1075   .text.reset_handler:00000000000007fc CELLP
       stm32eforth.s:1082   .text.reset_handler:0000000000000802 $d
       stm32eforth.s:1083   .text.reset_handler:0000000000000806 _CELLM
       stm32eforth.s:1085   .text.reset_handler:000000000000080c $t
       stm32eforth.s:1086   .text.reset_handler:000000000000080c CELLM
       stm32eforth.s:1093   .text.reset_handler:0000000000000812 $d
       stm32eforth.s:1094   .text.reset_handler:0000000000000816 _BLANK
       stm32eforth.s:1097   .text.reset_handler:000000000000081c BLANK
       stm32eforth.s:1105   .text.reset_handler:0000000000000826 $d
       stm32eforth.s:1106   .text.reset_handler:000000000000082a _CELLS
       stm32eforth.s:1108   .text.reset_handler:0000000000000830 $t
       stm32eforth.s:1109   .text.reset_handler:0000000000000830 CELLS
       stm32eforth.s:1116   .text.reset_handler:0000000000000836 $d
       stm32eforth.s:1117   .text.reset_handler:000000000000083a _CELLSL
       stm32eforth.s:1119   .text.reset_handler:0000000000000840 $t
       stm32eforth.s:1120   .text.reset_handler:0000000000000840 CELLSL
       stm32eforth.s:1127   .text.reset_handler:0000000000000846 $d
       stm32eforth.s:1128   .text.reset_handler:000000000000084a _TWOST
       stm32eforth.s:1131   .text.reset_handler:0000000000000850 TWOST
       stm32eforth.s:1138   .text.reset_handler:0000000000000856 $d
       stm32eforth.s:1139   .text.reset_handler:000000000000085a _TWOSL
       stm32eforth.s:1142   .text.reset_handler:0000000000000860 TWOSL
       stm32eforth.s:1149   .text.reset_handler:0000000000000866 $d
       stm32eforth.s:1150   .text.reset_handler:000000000000086a _QDUP
       stm32eforth.s:1153   .text.reset_handler:0000000000000870 QDUP
       stm32eforth.s:1162   .text.reset_handler:000000000000087a $d
       stm32eforth.s:1163   .text.reset_handler:000000000000087e _ROT
       stm32eforth.s:1165   .text.reset_handler:0000000000000882 $t
       stm32eforth.s:1166   .text.reset_handler:0000000000000884 ROT
       stm32eforth.s:1176   .text.reset_handler:000000000000088e $d
       stm32eforth.s:1177   .text.reset_handler:0000000000000892 _DDROP
       stm32eforth.s:1179   .text.reset_handler:0000000000000898 $t
       stm32eforth.s:1180   .text.reset_handler:0000000000000898 DDROP
ARM GAS  stm32eforth.s 			page 94


       stm32eforth.s:1188   .text.reset_handler:00000000000008a2 $d
       stm32eforth.s:1189   .text.reset_handler:00000000000008a6 _DDUP
       stm32eforth.s:1192   .text.reset_handler:00000000000008ac DDUP
       stm32eforth.s:1201   .text.reset_handler:00000000000008b8 $d
       stm32eforth.s:1202   .text.reset_handler:00000000000008bc _DPLUS
       stm32eforth.s:1205   .text.reset_handler:00000000000008c0 DPLUS
       stm32eforth.s:1217   .text.reset_handler:00000000000008d4 $d
       stm32eforth.s:1218   .text.reset_handler:00000000000008d8 _INVER
       stm32eforth.s:1220   .text.reset_handler:00000000000008dc $t
       stm32eforth.s:1221   .text.reset_handler:00000000000008dc INVER
       stm32eforth.s:1228   .text.reset_handler:00000000000008e2 $d
       stm32eforth.s:1229   .text.reset_handler:00000000000008e6 _NEGAT
       stm32eforth.s:1232   .text.reset_handler:00000000000008f0 NEGAT
       stm32eforth.s:1239   .text.reset_handler:00000000000008f6 $d
       stm32eforth.s:1240   .text.reset_handler:00000000000008fa _ABSS
       stm32eforth.s:1242   .text.reset_handler:00000000000008fe $t
       stm32eforth.s:1252   .text.reset_handler:000000000000090a $d
       stm32eforth.s:1253   .text.reset_handler:000000000000090e _ZEQUAL
       stm32eforth.s:1256   .text.reset_handler:0000000000000914 ZEQUAL
       stm32eforth.s:1266   .text.reset_handler:0000000000000922 $d
       stm32eforth.s:1267   .text.reset_handler:0000000000000926 _EQUAL
       stm32eforth.s:1269   .text.reset_handler:0000000000000928 $t
       stm32eforth.s:1270   .text.reset_handler:0000000000000928 EQUAL
       stm32eforth.s:1281   .text.reset_handler:0000000000000938 $d
       stm32eforth.s:1282   .text.reset_handler:000000000000093c _ULESS
       stm32eforth.s:1285   .text.reset_handler:0000000000000940 ULESS
       stm32eforth.s:1296   .text.reset_handler:0000000000000950 $d
       stm32eforth.s:1297   .text.reset_handler:0000000000000954 _LESS
       stm32eforth.s:1299   .text.reset_handler:0000000000000956 $t
       stm32eforth.s:1300   .text.reset_handler:0000000000000958 LESS
       stm32eforth.s:1311   .text.reset_handler:0000000000000968 $d
       stm32eforth.s:1312   .text.reset_handler:000000000000096c _GREAT
       stm32eforth.s:1314   .text.reset_handler:000000000000096e $t
       stm32eforth.s:1315   .text.reset_handler:0000000000000970 GREAT
       stm32eforth.s:1326   .text.reset_handler:0000000000000980 $d
       stm32eforth.s:1327   .text.reset_handler:0000000000000984 _MAX
       stm32eforth.s:1329   .text.reset_handler:0000000000000988 $t
       stm32eforth.s:1330   .text.reset_handler:0000000000000988 MAX
       stm32eforth.s:1340   .text.reset_handler:0000000000000994 $d
       stm32eforth.s:1341   .text.reset_handler:0000000000000998 _MIN
       stm32eforth.s:1343   .text.reset_handler:000000000000099c $t
       stm32eforth.s:1344   .text.reset_handler:000000000000099c MIN
       stm32eforth.s:1354   .text.reset_handler:00000000000009a8 $d
       stm32eforth.s:1355   .text.reset_handler:00000000000009ac _PSTOR
       stm32eforth.s:1358   .text.reset_handler:00000000000009b0 PSTOR
       stm32eforth.s:1369   .text.reset_handler:00000000000009c0 $d
       stm32eforth.s:1370   .text.reset_handler:00000000000009c4 _DSTOR
       stm32eforth.s:1373   .text.reset_handler:00000000000009c8 DSTOR
       stm32eforth.s:1384   .text.reset_handler:00000000000009dc $d
       stm32eforth.s:1385   .text.reset_handler:00000000000009e0 _DAT
       stm32eforth.s:1388   .text.reset_handler:00000000000009e4 DAT
       stm32eforth.s:1397   .text.reset_handler:00000000000009ee $d
       stm32eforth.s:1398   .text.reset_handler:00000000000009f2 _COUNT
       stm32eforth.s:1400   .text.reset_handler:00000000000009f8 $t
       stm32eforth.s:1401   .text.reset_handler:00000000000009f8 COUNT
       stm32eforth.s:1410   .text.reset_handler:0000000000000a04 $d
       stm32eforth.s:1411   .text.reset_handler:0000000000000a08 _DNEGA
ARM GAS  stm32eforth.s 			page 95


       stm32eforth.s:1413   .text.reset_handler:0000000000000a10 $t
       stm32eforth.s:1414   .text.reset_handler:0000000000000a10 DNEGA
       stm32eforth.s:1432   .text.reset_handler:0000000000000a20 DOVAR
       stm32eforth.s:1444   .text.reset_handler:0000000000000a2c DOCON
       stm32eforth.s:1456   .text.reset_handler:0000000000000a38 $d
       stm32eforth.s:1457   .text.reset_handler:0000000000000a3c _SEED
       stm32eforth.s:1467   .text.reset_handler:0000000000000a4e $d
       stm32eforth.s:1468   .text.reset_handler:0000000000000a52 _MSEC
       stm32eforth.s:1471   .text.reset_handler:0000000000000a58 MSEC
       stm32eforth.s:1478   .text.reset_handler:0000000000000a62 $d
       stm32eforth.s:1479   .text.reset_handler:0000000000000a66 _TIMER
       stm32eforth.s:1481   .text.reset_handler:0000000000000a6c $t
       stm32eforth.s:1490   .text.reset_handler:0000000000000a76 $d
       stm32eforth.s:1491   .text.reset_handler:0000000000000a7a _TORAM
       stm32eforth.s:1494   .text.reset_handler:0000000000000a80 TORAM
       stm32eforth.s:1502   .text.reset_handler:0000000000000a8a $d
       stm32eforth.s:1503   .text.reset_handler:0000000000000a8e _TBOOT
       stm32eforth.s:1505   .text.reset_handler:0000000000000a94 $t
       stm32eforth.s:1506   .text.reset_handler:0000000000000a94 TBOOT
       stm32eforth.s:1514   .text.reset_handler:0000000000000a9e $d
       stm32eforth.s:1515   .text.reset_handler:0000000000000aa2 _BASE
       stm32eforth.s:1518   .text.reset_handler:0000000000000aa8 BASE
       stm32eforth.s:1530   .text.reset_handler:0000000000000ab2 TEMP
       stm32eforth.s:1538   .text.reset_handler:0000000000000abc $d
       stm32eforth.s:1539   .text.reset_handler:0000000000000ac0 _SPAN
       stm32eforth.s:1542   .text.reset_handler:0000000000000ac8 SPAN
       stm32eforth.s:1550   .text.reset_handler:0000000000000ad2 $d
       stm32eforth.s:1551   .text.reset_handler:0000000000000ad6 _INN
       stm32eforth.s:1553   .text.reset_handler:0000000000000ada $t
       stm32eforth.s:1554   .text.reset_handler:0000000000000adc INN
       stm32eforth.s:1562   .text.reset_handler:0000000000000ae6 $d
       stm32eforth.s:1563   .text.reset_handler:0000000000000aea _NTIB
       stm32eforth.s:1566   .text.reset_handler:0000000000000af0 NTIB
       stm32eforth.s:1574   .text.reset_handler:0000000000000afa $d
       stm32eforth.s:1575   .text.reset_handler:0000000000000afe _TEVAL
       stm32eforth.s:1577   .text.reset_handler:0000000000000b04 $t
       stm32eforth.s:1578   .text.reset_handler:0000000000000b04 TEVAL
       stm32eforth.s:1586   .text.reset_handler:0000000000000b0e $d
       stm32eforth.s:1587   .text.reset_handler:0000000000000b12 _HLD
       stm32eforth.s:1589   .text.reset_handler:0000000000000b16 $t
       stm32eforth.s:1590   .text.reset_handler:0000000000000b18 HLD
       stm32eforth.s:1598   .text.reset_handler:0000000000000b22 $d
       stm32eforth.s:1599   .text.reset_handler:0000000000000b26 _CNTXT
       stm32eforth.s:1601   .text.reset_handler:0000000000000b2e $t
       stm32eforth.s:1602   .text.reset_handler:0000000000000b30 CNTXT
       stm32eforth.s:1603   .text.reset_handler:0000000000000b30 CRRNT
       stm32eforth.s:1611   .text.reset_handler:0000000000000b3a $d
       stm32eforth.s:1612   .text.reset_handler:0000000000000b3e _CP
       stm32eforth.s:1615   .text.reset_handler:0000000000000b44 CPP
       stm32eforth.s:1622   .text.reset_handler:0000000000000b4e $d
       stm32eforth.s:1623   .text.reset_handler:0000000000000b52 _FCP
       stm32eforth.s:1625   .text.reset_handler:0000000000000b56 $t
       stm32eforth.s:1626   .text.reset_handler:0000000000000b58 FCP
       stm32eforth.s:1634   .text.reset_handler:0000000000000b62 $d
       stm32eforth.s:1635   .text.reset_handler:0000000000000b66 _LAST
       stm32eforth.s:1638   .text.reset_handler:0000000000000b6c LAST
       stm32eforth.s:1649   .text.reset_handler:0000000000000b76 $d
ARM GAS  stm32eforth.s 			page 96


       stm32eforth.s:1650   .text.reset_handler:0000000000000b7a _USER_BGN
       stm32eforth.s:1653   .text.reset_handler:0000000000000b88 USER_BEGIN
       stm32eforth.s:1657   .text.reset_handler:0000000000000b90 USR_BGN_ADR
       stm32eforth.s:1658   .text.reset_handler:0000000000000b90 $d
       stm32eforth.s:1663   .text.reset_handler:0000000000000b98 _USER_END
       stm32eforth.s:1666   .text.reset_handler:0000000000000ba4 USER_END
       stm32eforth.s:1674   .text.reset_handler:0000000000000bb2 $d
       stm32eforth.s:1675   .text.reset_handler:0000000000000bb6 _IMG_ADR
       stm32eforth.s:1677   .text.reset_handler:0000000000000bbe $t
       stm32eforth.s:1678   .text.reset_handler:0000000000000bc0 IMG_ADR
       stm32eforth.s:1682   .text.reset_handler:0000000000000bc8 USR_IMG_ADR
       stm32eforth.s:1683   .text.reset_handler:0000000000000bc8 $d
       stm32eforth.s:4689   .text.reset_handler:0000000000002c00 USER_SPACE
       stm32eforth.s:1687   .text.reset_handler:0000000000000bd0 _IMG_SIGN
       stm32eforth.s:1690   .text.reset_handler:0000000000000bdc IMG_SIGN
       stm32eforth.s:1702   .text.reset_handler:0000000000000be6 $d
       stm32eforth.s:1703   .text.reset_handler:0000000000000bea _WITHI
       stm32eforth.s:1706   .text.reset_handler:0000000000000bf4 WITHI
       stm32eforth.s:1721   .text.reset_handler:0000000000000c14 $d
       stm32eforth.s:1722   .text.reset_handler:0000000000000c18 _UMMOD
       stm32eforth.s:1725   .text.reset_handler:0000000000000c20 UMMOD
       stm32eforth.s:1729   .text.reset_handler:0000000000000c2a UMMOD0
       stm32eforth.s:1736   .text.reset_handler:0000000000000c3a UMMOD1
       stm32eforth.s:1742   .text.reset_handler:0000000000000c44 UMMOD2
       stm32eforth.s:1752   .text.reset_handler:0000000000000c4e $d
       stm32eforth.s:1753   .text.reset_handler:0000000000000c52 _MSMOD
       stm32eforth.s:1755   .text.reset_handler:0000000000000c58 $t
       stm32eforth.s:1756   .text.reset_handler:0000000000000c58 MSMOD
       stm32eforth.s:1763   .text.reset_handler:0000000000000c70 $d
       stm32eforth.s:1768   .text.reset_handler:0000000000000c84 MMOD1
       stm32eforth.s:1764   .text.reset_handler:0000000000000c74 $t
       stm32eforth.s:1773   .text.reset_handler:0000000000000c94 $d
       stm32eforth.s:1776   .text.reset_handler:0000000000000ca0 MMOD2
       stm32eforth.s:1774   .text.reset_handler:0000000000000c98 $t
       stm32eforth.s:1781   .text.reset_handler:0000000000000cb0 $d
       stm32eforth.s:1785   .text.reset_handler:0000000000000cc0 MMOD3
       stm32eforth.s:1782   .text.reset_handler:0000000000000cb4 $t
       stm32eforth.s:1791   .text.reset_handler:0000000000000cc4 $d
       stm32eforth.s:1792   .text.reset_handler:0000000000000cc8 _SLMOD
       stm32eforth.s:1795   .text.reset_handler:0000000000000cd0 SLMOD
       stm32eforth.s:1806   .text.reset_handler:0000000000000ce8 $d
       stm32eforth.s:1807   .text.reset_handler:0000000000000cec _MODD
       stm32eforth.s:1809   .text.reset_handler:0000000000000cf0 $t
       stm32eforth.s:1819   .text.reset_handler:0000000000000d00 $d
       stm32eforth.s:1820   .text.reset_handler:0000000000000d04 _SLASH
       stm32eforth.s:1822   .text.reset_handler:0000000000000d06 $t
       stm32eforth.s:1823   .text.reset_handler:0000000000000d08 SLASH
       stm32eforth.s:1833   .text.reset_handler:0000000000000d1c $d
       stm32eforth.s:1834   .text.reset_handler:0000000000000d20 _SSMOD
       stm32eforth.s:1836   .text.reset_handler:0000000000000d26 $t
       stm32eforth.s:1837   .text.reset_handler:0000000000000d28 SSMOD
       stm32eforth.s:1848   .text.reset_handler:0000000000000d40 $d
       stm32eforth.s:1849   .text.reset_handler:0000000000000d44 _STASL
       stm32eforth.s:1852   .text.reset_handler:0000000000000d48 STASL
       stm32eforth.s:1865   .text.reset_handler:0000000000000d5c $d
       stm32eforth.s:1866   .text.reset_handler:0000000000000d60 _ALGND
       stm32eforth.s:1868   .text.reset_handler:0000000000000d68 $t
ARM GAS  stm32eforth.s 			page 97


       stm32eforth.s:1869   .text.reset_handler:0000000000000d68 ALGND
       stm32eforth.s:1878   .text.reset_handler:0000000000000d76 $d
       stm32eforth.s:1879   .text.reset_handler:0000000000000d7a _TCHAR
       stm32eforth.s:1881   .text.reset_handler:0000000000000d80 $t
       stm32eforth.s:1882   .text.reset_handler:0000000000000d80 TCHAR
       stm32eforth.s:1885   .text.reset_handler:0000000000000d88 $d
       stm32eforth.s:1886   .text.reset_handler:0000000000000d8c $t
       stm32eforth.s:1890   .text.reset_handler:0000000000000d9c $d
       stm32eforth.s:1891   .text.reset_handler:0000000000000da0 $t
       stm32eforth.s:1894   .text.reset_handler:0000000000000dac $d
       stm32eforth.s:1898   .text.reset_handler:0000000000000dbc TCHA1
       stm32eforth.s:1895   .text.reset_handler:0000000000000db0 $t
       stm32eforth.s:1897   .text.reset_handler:0000000000000db8 $d
       stm32eforth.s:1899   .text.reset_handler:0000000000000dbc $t
       stm32eforth.s:1904   .text.reset_handler:0000000000000dc0 $d
       stm32eforth.s:1905   .text.reset_handler:0000000000000dc4 _DEPTH
       stm32eforth.s:1907   .text.reset_handler:0000000000000dca $t
       stm32eforth.s:1908   .text.reset_handler:0000000000000dcc DEPTH
       stm32eforth.s:1920   .text.reset_handler:0000000000000de6 $d
       stm32eforth.s:1921   .text.reset_handler:0000000000000dea _PICK
       stm32eforth.s:1924   .text.reset_handler:0000000000000df0 PICK
       stm32eforth.s:1939   .text.reset_handler:0000000000000e0c $d
       stm32eforth.s:1940   .text.reset_handler:0000000000000e10 _HERE
       stm32eforth.s:1943   .text.reset_handler:0000000000000e18 HERE
       stm32eforth.s:1952   .text.reset_handler:0000000000000e28 $d
       stm32eforth.s:1953   .text.reset_handler:0000000000000e2c _PAD
       stm32eforth.s:1955   .text.reset_handler:0000000000000e30 $t
       stm32eforth.s:1956   .text.reset_handler:0000000000000e30 PAD
       stm32eforth.s:1965   .text.reset_handler:0000000000000e40 $d
       stm32eforth.s:1966   .text.reset_handler:0000000000000e44 _TIB
       stm32eforth.s:1968   .text.reset_handler:0000000000000e48 $t
       stm32eforth.s:1969   .text.reset_handler:0000000000000e48 TIB
       stm32eforth.s:1977   .text.reset_handler:0000000000000e50 $d
       stm32eforth.s:1978   .text.reset_handler:0000000000000e54 _ATEXE
       stm32eforth.s:1981   .text.reset_handler:0000000000000e60 ATEXE
       stm32eforth.s:1993   .text.reset_handler:0000000000000e72 $d
       stm32eforth.s:1994   .text.reset_handler:0000000000000e76 _CMOVE
       stm32eforth.s:1996   .text.reset_handler:0000000000000e7c $t
       stm32eforth.s:1997   .text.reset_handler:0000000000000e7c CMOVE
       stm32eforth.s:2004   .text.reset_handler:0000000000000e8e CMOV1
       stm32eforth.s:2001   .text.reset_handler:0000000000000e86 CMOV0
       stm32eforth.s:2009   .text.reset_handler:0000000000000e98 CMOV2
       stm32eforth.s:2016   .text.reset_handler:0000000000000e9e $d
       stm32eforth.s:2017   .text.reset_handler:0000000000000ea2 _MOVE
       stm32eforth.s:2020   .text.reset_handler:0000000000000ea8 MOVE
       stm32eforth.s:2028   .text.reset_handler:0000000000000ebe MOVE1
       stm32eforth.s:2025   .text.reset_handler:0000000000000eb6 MOVE0
       stm32eforth.s:2033   .text.reset_handler:0000000000000ec8 MOVE2
       stm32eforth.s:2040   .text.reset_handler:0000000000000ece $d
       stm32eforth.s:2041   .text.reset_handler:0000000000000ed2 _FILL
       stm32eforth.s:2044   .text.reset_handler:0000000000000ed8 FILL
       stm32eforth.s:2047   .text.reset_handler:0000000000000ee0 FILL0
       stm32eforth.s:2050   .text.reset_handler:0000000000000ee4 FILL1
       stm32eforth.s:2056   .text.reset_handler:0000000000000ef2 FILL2
       stm32eforth.s:2063   .text.reset_handler:0000000000000ef8 $d
       stm32eforth.s:2064   .text.reset_handler:0000000000000efc _PACKS
       stm32eforth.s:2067   .text.reset_handler:0000000000000f04 PACKS
ARM GAS  stm32eforth.s 			page 98


       stm32eforth.s:2076   .text.reset_handler:0000000000000f24 $d
       stm32eforth.s:2077   .text.reset_handler:0000000000000f28 $t
       stm32eforth.s:2079   .text.reset_handler:0000000000000f30 $d
       stm32eforth.s:2080   .text.reset_handler:0000000000000f34 $t
       stm32eforth.s:2097   .text.reset_handler:0000000000000f5c $d
       stm32eforth.s:2098   .text.reset_handler:0000000000000f60 _DIGIT
       stm32eforth.s:2100   .text.reset_handler:0000000000000f66 $t
       stm32eforth.s:2101   .text.reset_handler:0000000000000f68 DIGIT
       stm32eforth.s:2104   .text.reset_handler:0000000000000f70 $d
       stm32eforth.s:2105   .text.reset_handler:0000000000000f74 $t
       stm32eforth.s:2115   .text.reset_handler:0000000000000f8c $d
       stm32eforth.s:2116   .text.reset_handler:0000000000000f90 _EXTRC
       stm32eforth.s:2118   .text.reset_handler:0000000000000f98 $t
       stm32eforth.s:2119   .text.reset_handler:0000000000000f98 EXTRC
       stm32eforth.s:2122   .text.reset_handler:0000000000000fa0 $d
       stm32eforth.s:2123   .text.reset_handler:0000000000000fa4 $t
       stm32eforth.s:2132   .text.reset_handler:0000000000000fb8 $d
       stm32eforth.s:2133   .text.reset_handler:0000000000000fbc _BDIGS
       stm32eforth.s:2136   .text.reset_handler:0000000000000fc0 BDIGS
       stm32eforth.s:2146   .text.reset_handler:0000000000000fd4 $d
       stm32eforth.s:2147   .text.reset_handler:0000000000000fd8 _HOLD
       stm32eforth.s:2150   .text.reset_handler:0000000000000fe0 HOLD
       stm32eforth.s:2164   .text.reset_handler:0000000000001004 $d
       stm32eforth.s:2165   .text.reset_handler:0000000000001008 _DIG
       stm32eforth.s:2167   .text.reset_handler:000000000000100a $t
       stm32eforth.s:2168   .text.reset_handler:000000000000100c DIG
       stm32eforth.s:2179   .text.reset_handler:0000000000001024 $d
       stm32eforth.s:2180   .text.reset_handler:0000000000001028 _DIGS
       stm32eforth.s:2183   .text.reset_handler:000000000000102c DIGS
       stm32eforth.s:2185   .text.reset_handler:0000000000001030 DIGS1
       stm32eforth.s:2189   .text.reset_handler:000000000000103c $d
       stm32eforth.s:2191   .text.reset_handler:0000000000001042 DIGS2
       stm32eforth.s:2190   .text.reset_handler:0000000000001040 $t
       stm32eforth.s:2197   .text.reset_handler:0000000000001046 $d
       stm32eforth.s:2198   .text.reset_handler:000000000000104a _SIGN
       stm32eforth.s:2201   .text.reset_handler:0000000000001050 SIGN
       stm32eforth.s:2205   .text.reset_handler:000000000000105c $d
       stm32eforth.s:2209   .text.reset_handler:000000000000106c SIGN1
       stm32eforth.s:2206   .text.reset_handler:0000000000001060 $t
       stm32eforth.s:2207   .text.reset_handler:0000000000001064 $d
       stm32eforth.s:2208   .text.reset_handler:0000000000001068 $t
       stm32eforth.s:2215   .text.reset_handler:0000000000001070 $d
       stm32eforth.s:2216   .text.reset_handler:0000000000001074 _EDIGS
       stm32eforth.s:2219   .text.reset_handler:0000000000001078 EDIGS
       stm32eforth.s:2236   .text.reset_handler:0000000000001098 STRR
       stm32eforth.s:2251   .text.reset_handler:00000000000010c0 $d
       stm32eforth.s:2252   .text.reset_handler:00000000000010c4 _HEX
       stm32eforth.s:2254   .text.reset_handler:00000000000010c8 $t
       stm32eforth.s:2255   .text.reset_handler:00000000000010c8 HEX
       stm32eforth.s:2258   .text.reset_handler:00000000000010d0 $d
       stm32eforth.s:2259   .text.reset_handler:00000000000010d4 $t
       stm32eforth.s:2266   .text.reset_handler:00000000000010e0 $d
       stm32eforth.s:2267   .text.reset_handler:00000000000010e4 _DECIM
       stm32eforth.s:2269   .text.reset_handler:00000000000010ec $t
       stm32eforth.s:2270   .text.reset_handler:00000000000010ec DECIM
       stm32eforth.s:2273   .text.reset_handler:00000000000010f4 $d
       stm32eforth.s:2274   .text.reset_handler:00000000000010f8 $t
ARM GAS  stm32eforth.s 			page 99


       stm32eforth.s:2284   .text.reset_handler:0000000000001104 $d
       stm32eforth.s:2285   .text.reset_handler:0000000000001108 _DIGTQ
       stm32eforth.s:2288   .text.reset_handler:0000000000001110 DIGTQ
       stm32eforth.s:2292   .text.reset_handler:000000000000111c $d
       stm32eforth.s:2293   .text.reset_handler:0000000000001120 $t
       stm32eforth.s:2295   .text.reset_handler:0000000000001128 $d
       stm32eforth.s:2296   .text.reset_handler:000000000000112c $t
       stm32eforth.s:2299   .text.reset_handler:0000000000001138 $d
       stm32eforth.s:2308   .text.reset_handler:000000000000115c DGTQ1
       stm32eforth.s:2300   .text.reset_handler:000000000000113c $t
       stm32eforth.s:2301   .text.reset_handler:0000000000001140 $d
       stm32eforth.s:2302   .text.reset_handler:0000000000001144 $t
       stm32eforth.s:2305   .text.reset_handler:0000000000001150 $d
       stm32eforth.s:2306   .text.reset_handler:0000000000001154 $t
       stm32eforth.s:2317   .text.reset_handler:000000000000116c $d
       stm32eforth.s:2318   .text.reset_handler:0000000000001170 _NUMBQ
       stm32eforth.s:2320   .text.reset_handler:0000000000001178 $t
       stm32eforth.s:2321   .text.reset_handler:0000000000001178 NUMBQ
       stm32eforth.s:2327   .text.reset_handler:000000000000118c $d
       stm32eforth.s:2328   .text.reset_handler:0000000000001190 $t
       stm32eforth.s:2333   .text.reset_handler:00000000000011a4 $d
       stm32eforth.s:2334   .text.reset_handler:00000000000011a8 $t
       stm32eforth.s:2336   .text.reset_handler:00000000000011b0 $d
       stm32eforth.s:2342   .text.reset_handler:00000000000011c8 NUMQ1
       stm32eforth.s:2337   .text.reset_handler:00000000000011b4 $t
       stm32eforth.s:2346   .text.reset_handler:00000000000011d4 $d
       stm32eforth.s:2347   .text.reset_handler:00000000000011d8 $t
       stm32eforth.s:2357   .text.reset_handler:0000000000001200 $d
       stm32eforth.s:2396   .text.reset_handler:000000000000128c NUMQ6
       stm32eforth.s:2358   .text.reset_handler:0000000000001204 $t
       stm32eforth.s:2360   .text.reset_handler:000000000000120c NUMQ2
       stm32eforth.s:2368   .text.reset_handler:0000000000001228 $d
       stm32eforth.s:2387   .text.reset_handler:0000000000001270 NUMQ4
       stm32eforth.s:2369   .text.reset_handler:000000000000122c $t
       stm32eforth.s:2377   .text.reset_handler:000000000000124c $d
       stm32eforth.s:2378   .text.reset_handler:0000000000001250 $t
       stm32eforth.s:2382   .text.reset_handler:0000000000001260 $d
       stm32eforth.s:2384   .text.reset_handler:0000000000001268 NUMQ3
       stm32eforth.s:2383   .text.reset_handler:0000000000001264 $t
       stm32eforth.s:2394   .text.reset_handler:0000000000001288 NUMQ5
       stm32eforth.s:2393   .text.reset_handler:0000000000001284 $d
       stm32eforth.s:2395   .text.reset_handler:0000000000001288 $t
       stm32eforth.s:2410   .text.reset_handler:00000000000012a4 $d
       stm32eforth.s:2411   .text.reset_handler:00000000000012a8 _KEY
       stm32eforth.s:2413   .text.reset_handler:00000000000012ac $t
       stm32eforth.s:2414   .text.reset_handler:00000000000012ac KEY
       stm32eforth.s:2416   .text.reset_handler:00000000000012b0 KEY1
       stm32eforth.s:2419   .text.reset_handler:00000000000012b8 $d
       stm32eforth.s:2421   .text.reset_handler:00000000000012bc $t
       stm32eforth.s:2423   .text.reset_handler:00000000000012c4 $d
       stm32eforth.s:2424   .text.reset_handler:00000000000012c8 $t
       stm32eforth.s:2427   .text.reset_handler:00000000000012d4 $d
       stm32eforth.s:2428   .text.reset_handler:00000000000012d8 $t
       stm32eforth.s:2433   .text.reset_handler:00000000000012dc $d
       stm32eforth.s:2434   .text.reset_handler:00000000000012e0 _SPACE
       stm32eforth.s:2436   .text.reset_handler:00000000000012e6 $t
       stm32eforth.s:2437   .text.reset_handler:00000000000012e8 SPACE
ARM GAS  stm32eforth.s 			page 100


       stm32eforth.s:2446   .text.reset_handler:00000000000012f8 $d
       stm32eforth.s:2447   .text.reset_handler:00000000000012fc _SPACS
       stm32eforth.s:2450   .text.reset_handler:0000000000001304 SPACS
       stm32eforth.s:2453   .text.reset_handler:000000000000130c $d
       stm32eforth.s:2454   .text.reset_handler:0000000000001310 $t
       stm32eforth.s:2459   .text.reset_handler:0000000000001320 CHAR2
       stm32eforth.s:2457   .text.reset_handler:000000000000131c CHAR1
       stm32eforth.s:2461   .text.reset_handler:0000000000001324 $d
       stm32eforth.s:2462   .text.reset_handler:0000000000001328 $t
       stm32eforth.s:2467   .text.reset_handler:000000000000132c $d
       stm32eforth.s:2468   .text.reset_handler:0000000000001330 _TYPEE
       stm32eforth.s:2471   .text.reset_handler:0000000000001338 TYPEE
       stm32eforth.s:2479   .text.reset_handler:000000000000134e TYPE2
       stm32eforth.s:2475   .text.reset_handler:0000000000001342 TYPE1
       stm32eforth.s:2481   .text.reset_handler:0000000000001352 $d
       stm32eforth.s:2482   .text.reset_handler:0000000000001356 $t
       stm32eforth.s:2488   .text.reset_handler:000000000000135e $d
       stm32eforth.s:2489   .text.reset_handler:0000000000001362 _CR
       stm32eforth.s:2492   .text.reset_handler:0000000000001368 CR
       stm32eforth.s:2495   .text.reset_handler:0000000000001370 $d
       stm32eforth.s:2496   .text.reset_handler:0000000000001374 $t
       stm32eforth.s:2498   .text.reset_handler:000000000000137c $d
       stm32eforth.s:2499   .text.reset_handler:0000000000001380 $t
       stm32eforth.s:2510   .text.reset_handler:0000000000001388 DOSTR
       stm32eforth.s:2533   .text.reset_handler:00000000000013bc STRQP
       stm32eforth.s:2545   .text.reset_handler:00000000000013c8 DOTST
       stm32eforth.s:2558   .text.reset_handler:00000000000013d8 DOTQP
       stm32eforth.s:2567   .text.reset_handler:00000000000013e8 $d
       stm32eforth.s:2568   .text.reset_handler:00000000000013ec _DOTR
       stm32eforth.s:2571   .text.reset_handler:00000000000013f0 DOTR
       stm32eforth.s:2585   .text.reset_handler:0000000000001414 $d
       stm32eforth.s:2586   .text.reset_handler:0000000000001418 _UDOTR
       stm32eforth.s:2588   .text.reset_handler:000000000000141c $t
       stm32eforth.s:2589   .text.reset_handler:000000000000141c UDOTR
       stm32eforth.s:2605   .text.reset_handler:0000000000001448 $d
       stm32eforth.s:2606   .text.reset_handler:000000000000144c _UDOT
       stm32eforth.s:2609   .text.reset_handler:0000000000001450 UDOT
       stm32eforth.s:2621   .text.reset_handler:000000000000146c $d
       stm32eforth.s:2622   .text.reset_handler:0000000000001470 _DOT
       stm32eforth.s:2624   .text.reset_handler:0000000000001472 $t
       stm32eforth.s:2625   .text.reset_handler:0000000000001474 DOT
       stm32eforth.s:2630   .text.reset_handler:0000000000001484 $d
       stm32eforth.s:2631   .text.reset_handler:0000000000001488 $t
       stm32eforth.s:2633   .text.reset_handler:0000000000001490 $d
       stm32eforth.s:2636   .text.reset_handler:000000000000149c DOT1
       stm32eforth.s:2634   .text.reset_handler:0000000000001494 $t
       stm32eforth.s:2645   .text.reset_handler:00000000000014ac $d
       stm32eforth.s:2646   .text.reset_handler:00000000000014b0 _QUEST
       stm32eforth.s:2648   .text.reset_handler:00000000000014b2 $t
       stm32eforth.s:2649   .text.reset_handler:00000000000014b4 QUEST
       stm32eforth.s:2665   .text.reset_handler:00000000000014c4 PARS
       stm32eforth.s:2673   .text.reset_handler:00000000000014e0 $d
       stm32eforth.s:2741   .text.reset_handler:00000000000015d2 PARS8
       stm32eforth.s:2674   .text.reset_handler:00000000000014e4 $t
       stm32eforth.s:2680   .text.reset_handler:00000000000014fc $d
       stm32eforth.s:2702   .text.reset_handler:000000000000154c PARS3
       stm32eforth.s:2681   .text.reset_handler:0000000000001500 $t
ARM GAS  stm32eforth.s 			page 101


       stm32eforth.s:2682   .text.reset_handler:0000000000001504 PARS1
       stm32eforth.s:2690   .text.reset_handler:0000000000001520 $d
       stm32eforth.s:2700   .text.reset_handler:0000000000001548 PARS2
       stm32eforth.s:2691   .text.reset_handler:0000000000001524 $t
       stm32eforth.s:2693   .text.reset_handler:000000000000152c $d
       stm32eforth.s:2694   .text.reset_handler:0000000000001530 $t
       stm32eforth.s:2697   .text.reset_handler:000000000000153c $d
       stm32eforth.s:2698   .text.reset_handler:0000000000001540 $t
       stm32eforth.s:2706   .text.reset_handler:0000000000001558 PARS4
       stm32eforth.s:2717   .text.reset_handler:0000000000001580 $d
       stm32eforth.s:2719   .text.reset_handler:0000000000001588 PARS5
       stm32eforth.s:2718   .text.reset_handler:0000000000001584 $t
       stm32eforth.s:2721   .text.reset_handler:000000000000158c $d
       stm32eforth.s:2728   .text.reset_handler:00000000000015a6 PARS6
       stm32eforth.s:2722   .text.reset_handler:0000000000001590 $t
       stm32eforth.s:2724   .text.reset_handler:0000000000001598 $d
       stm32eforth.s:2725   .text.reset_handler:000000000000159c $t
       stm32eforth.s:2734   .text.reset_handler:00000000000015ba PARS7
       stm32eforth.s:2750   .text.reset_handler:00000000000015e2 $d
       stm32eforth.s:2751   .text.reset_handler:00000000000015e6 _PARSE
       stm32eforth.s:2753   .text.reset_handler:00000000000015ec $t
       stm32eforth.s:2754   .text.reset_handler:00000000000015ec PARSE
       stm32eforth.s:2775   .text.reset_handler:000000000000162c $d
       stm32eforth.s:2776   .text.reset_handler:0000000000001630 _DOTPR
       stm32eforth.s:2779   .text.reset_handler:0000000000001634 DOTPR
       stm32eforth.s:2782   .text.reset_handler:000000000000163c $d
       stm32eforth.s:2783   .text.reset_handler:0000000000001640 $t
       stm32eforth.s:2790   .text.reset_handler:000000000000164c $d
       stm32eforth.s:2791   .text.reset_handler:0000000000001650 _PAREN
       stm32eforth.s:2793   .text.reset_handler:0000000000001652 $t
       stm32eforth.s:2794   .text.reset_handler:0000000000001654 PAREN
       stm32eforth.s:2797   .text.reset_handler:000000000000165c $d
       stm32eforth.s:2798   .text.reset_handler:0000000000001660 $t
       stm32eforth.s:2805   .text.reset_handler:000000000000166c $d
       stm32eforth.s:2806   .text.reset_handler:0000000000001670 _BKSLA
       stm32eforth.s:2808   .text.reset_handler:0000000000001672 $t
       stm32eforth.s:2809   .text.reset_handler:0000000000001674 BKSLA
       stm32eforth.s:2820   .text.reset_handler:000000000000168c $d
       stm32eforth.s:2821   .text.reset_handler:0000000000001690 _CHAR
       stm32eforth.s:2824   .text.reset_handler:0000000000001698 CHAR
       stm32eforth.s:2835   .text.reset_handler:00000000000016b0 $d
       stm32eforth.s:2836   .text.reset_handler:00000000000016b4 _WORDD
       stm32eforth.s:2839   .text.reset_handler:00000000000016bc WORDD
       stm32eforth.s:2850   .text.reset_handler:00000000000016d4 $d
       stm32eforth.s:2851   .text.reset_handler:00000000000016d8 _TOKEN
       stm32eforth.s:2853   .text.reset_handler:00000000000016de $t
       stm32eforth.s:2854   .text.reset_handler:00000000000016e0 TOKEN
       stm32eforth.s:2866   .text.reset_handler:00000000000016f0 $d
       stm32eforth.s:2867   .text.reset_handler:00000000000016f4 _NAMET
       stm32eforth.s:2869   .text.reset_handler:00000000000016fa $t
       stm32eforth.s:2870   .text.reset_handler:00000000000016fc NAMET
       stm32eforth.s:2874   .text.reset_handler:0000000000001708 $d
       stm32eforth.s:2875   .text.reset_handler:000000000000170c $t
       stm32eforth.s:2888   .text.reset_handler:000000000000171c $d
       stm32eforth.s:2889   .text.reset_handler:0000000000001720 _SAMEQ
       stm32eforth.s:2891   .text.reset_handler:0000000000001726 $t
       stm32eforth.s:2892   .text.reset_handler:0000000000001728 SAMEQ
ARM GAS  stm32eforth.s 			page 102


       stm32eforth.s:2912   .text.reset_handler:0000000000001770 SAME2
       stm32eforth.s:2896   .text.reset_handler:0000000000001734 SAME1
       stm32eforth.s:2908   .text.reset_handler:0000000000001760 $d
       stm32eforth.s:2909   .text.reset_handler:0000000000001764 $t
       stm32eforth.s:2914   .text.reset_handler:0000000000001774 $d
       stm32eforth.s:2915   .text.reset_handler:0000000000001778 $t
       stm32eforth.s:2916   .text.reset_handler:000000000000177c $d
       stm32eforth.s:2917   .text.reset_handler:0000000000001780 $t
       stm32eforth.s:2929   .text.reset_handler:0000000000001784 FIND
       stm32eforth.s:2938   .text.reset_handler:00000000000017a4 FIND1
       stm32eforth.s:2941   .text.reset_handler:00000000000017ac $d
       stm32eforth.s:2961   .text.reset_handler:00000000000017f4 FIND6
       stm32eforth.s:2942   .text.reset_handler:00000000000017b0 $t
       stm32eforth.s:2945   .text.reset_handler:00000000000017bc $d
       stm32eforth.s:2946   .text.reset_handler:00000000000017c0 $t
       stm32eforth.s:2950   .text.reset_handler:00000000000017d0 $d
       stm32eforth.s:2954   .text.reset_handler:00000000000017e0 FIND2
       stm32eforth.s:2951   .text.reset_handler:00000000000017d4 $t
       stm32eforth.s:2959   .text.reset_handler:00000000000017f0 FIND3
       stm32eforth.s:2968   .text.reset_handler:000000000000180c FIND4
       stm32eforth.s:2970   .text.reset_handler:0000000000001810 $d
       stm32eforth.s:2975   .text.reset_handler:0000000000001824 FIND5
       stm32eforth.s:2971   .text.reset_handler:0000000000001814 $t
       stm32eforth.s:2989   .text.reset_handler:0000000000001848 $d
       stm32eforth.s:2990   .text.reset_handler:000000000000184c _NAMEQ
       stm32eforth.s:2992   .text.reset_handler:0000000000001852 $t
       stm32eforth.s:2993   .text.reset_handler:0000000000001854 NAMEQ
       stm32eforth.s:3010   .text.reset_handler:0000000000001868 BKSP
       stm32eforth.s:3019   .text.reset_handler:0000000000001888 $d
       stm32eforth.s:3032   .text.reset_handler:00000000000018b0 BACK1
       stm32eforth.s:3020   .text.reset_handler:000000000000188c $t
       stm32eforth.s:3021   .text.reset_handler:0000000000001890 $d
       stm32eforth.s:3022   .text.reset_handler:0000000000001894 $t
       stm32eforth.s:3029   .text.reset_handler:00000000000018a8 $d
       stm32eforth.s:3030   .text.reset_handler:00000000000018ac $t
       stm32eforth.s:3042   .text.reset_handler:00000000000018b4 TAP
       stm32eforth.s:3059   .text.reset_handler:00000000000018d0 KTAP
       stm32eforth.s:3060   .text.reset_handler:00000000000018d0 TTAP
       stm32eforth.s:3064   .text.reset_handler:00000000000018dc $d
       stm32eforth.s:3065   .text.reset_handler:00000000000018e0 $t
       stm32eforth.s:3067   .text.reset_handler:00000000000018e8 $d
       stm32eforth.s:3080   .text.reset_handler:0000000000001918 KTAP2
       stm32eforth.s:3068   .text.reset_handler:00000000000018ec $t
       stm32eforth.s:3069   .text.reset_handler:00000000000018f0 $d
       stm32eforth.s:3070   .text.reset_handler:00000000000018f4 $t
       stm32eforth.s:3072   .text.reset_handler:00000000000018fc $d
       stm32eforth.s:3077   .text.reset_handler:0000000000001910 KTAP1
       stm32eforth.s:3073   .text.reset_handler:0000000000001900 $t
       stm32eforth.s:3076   .text.reset_handler:000000000000190c $d
       stm32eforth.s:3078   .text.reset_handler:0000000000001910 $t
       stm32eforth.s:3090   .text.reset_handler:000000000000192c $d
       stm32eforth.s:3091   .text.reset_handler:0000000000001930 _ACCEP
       stm32eforth.s:3094   .text.reset_handler:0000000000001938 ACCEP
       stm32eforth.s:3099   .text.reset_handler:0000000000001948 ACCP1
       stm32eforth.s:3103   .text.reset_handler:0000000000001954 $d
       stm32eforth.s:3119   .text.reset_handler:0000000000001984 ACCP4
       stm32eforth.s:3104   .text.reset_handler:0000000000001958 $t
ARM GAS  stm32eforth.s 			page 103


       stm32eforth.s:3108   .text.reset_handler:0000000000001968 $d
       stm32eforth.s:3109   .text.reset_handler:000000000000196c $t
       stm32eforth.s:3111   .text.reset_handler:0000000000001974 $d
       stm32eforth.s:3114   .text.reset_handler:000000000000197e ACCP2
       stm32eforth.s:3112   .text.reset_handler:0000000000001978 $t
       stm32eforth.s:3117   .text.reset_handler:0000000000001982 ACCP3
       stm32eforth.s:3128   .text.reset_handler:0000000000001994 $d
       stm32eforth.s:3129   .text.reset_handler:0000000000001998 _QUERY
       stm32eforth.s:3131   .text.reset_handler:000000000000199e $t
       stm32eforth.s:3132   .text.reset_handler:00000000000019a0 QUERY
       stm32eforth.s:3136   .text.reset_handler:00000000000019ac $d
       stm32eforth.s:3137   .text.reset_handler:00000000000019b0 $t
       stm32eforth.s:3142   .text.reset_handler:00000000000019c4 $d
       stm32eforth.s:3143   .text.reset_handler:00000000000019c8 $t
       stm32eforth.s:3153   .text.reset_handler:00000000000019d4 $d
       stm32eforth.s:3154   .text.reset_handler:00000000000019d8 _ABORT
       stm32eforth.s:3156   .text.reset_handler:00000000000019de $t
       stm32eforth.s:3157   .text.reset_handler:00000000000019e0 ABORT
       stm32eforth.s:3163   .text.reset_handler:00000000000019f4 $d
       stm32eforth.s:3164   .text.reset_handler:00000000000019f8 $t
       stm32eforth.s:3310   .text.reset_handler:0000000000001b68 PRESE
       stm32eforth.s:3325   .text.reset_handler:0000000000001b80 QUIT
       stm32eforth.s:3176   .text.reset_handler:0000000000001a08 ABORQ
       stm32eforth.s:3179   .text.reset_handler:0000000000001a10 $d
       stm32eforth.s:3185   .text.reset_handler:0000000000001a28 ABOR1
       stm32eforth.s:3180   .text.reset_handler:0000000000001a14 $t
       stm32eforth.s:3196   .text.reset_handler:0000000000001a34 $d
       stm32eforth.s:3197   .text.reset_handler:0000000000001a38 _INTER
       stm32eforth.s:3199   .text.reset_handler:0000000000001a44 $t
       stm32eforth.s:3205   .text.reset_handler:0000000000001a54 $d
       stm32eforth.s:3216   .text.reset_handler:0000000000001a84 INTE1
       stm32eforth.s:3206   .text.reset_handler:0000000000001a58 $t
       stm32eforth.s:3208   .text.reset_handler:0000000000001a60 $d
       stm32eforth.s:3209   .text.reset_handler:0000000000001a64 $t
       stm32eforth.s:3211   .text.reset_handler:0000000000001a6c $d
       stm32eforth.s:3213   .text.reset_handler:0000000000001a7a $t
       stm32eforth.s:3219   .text.reset_handler:0000000000001a8c $d
       stm32eforth.s:3221   .text.reset_handler:0000000000001a94 INTE2
       stm32eforth.s:3220   .text.reset_handler:0000000000001a90 $t
       stm32eforth.s:3227   .text.reset_handler:0000000000001a98 $d
       stm32eforth.s:3228   .text.reset_handler:0000000000001a9c _LBRAC
       stm32eforth.s:3230   .text.reset_handler:0000000000001a9e $t
       stm32eforth.s:3231   .text.reset_handler:0000000000001aa0 LBRAC
       stm32eforth.s:3234   .text.reset_handler:0000000000001aa8 $d
       stm32eforth.s:3235   .text.reset_handler:0000000000001aac $t
       stm32eforth.s:3242   .text.reset_handler:0000000000001ab8 $d
       stm32eforth.s:3243   .text.reset_handler:0000000000001abc _DOTOK
       stm32eforth.s:3245   .text.reset_handler:0000000000001ac0 $t
       stm32eforth.s:3246   .text.reset_handler:0000000000001ac0 DOTOK
       stm32eforth.s:3249   .text.reset_handler:0000000000001ac8 $d
       stm32eforth.s:3250   .text.reset_handler:0000000000001acc $t
       stm32eforth.s:3254   .text.reset_handler:0000000000001adc $d
       stm32eforth.s:3258   .text.reset_handler:0000000000001ae8 DOTO1
       stm32eforth.s:3255   .text.reset_handler:0000000000001ae0 $t
       stm32eforth.s:3256   .text.reset_handler:0000000000001ae4 $d
       stm32eforth.s:3259   .text.reset_handler:0000000000001ae8 $t
       stm32eforth.s:3265   .text.reset_handler:0000000000001af0 $d
ARM GAS  stm32eforth.s 			page 104


       stm32eforth.s:3266   .text.reset_handler:0000000000001af4 _QSTAC
       stm32eforth.s:3269   .text.reset_handler:0000000000001afc QSTAC
       stm32eforth.s:3274   .text.reset_handler:0000000000001b0c $d
       stm32eforth.s:3282   .text.reset_handler:0000000000001b1c $d
       stm32eforth.s:3283   .text.reset_handler:0000000000001b20 _EVAL
       stm32eforth.s:3286   .text.reset_handler:0000000000001b28 EVAL
       stm32eforth.s:3288   .text.reset_handler:0000000000001b2c EVAL1
       stm32eforth.s:3293   .text.reset_handler:0000000000001b3c $d
       stm32eforth.s:3298   .text.reset_handler:0000000000001b50 EVAL2
       stm32eforth.s:3294   .text.reset_handler:0000000000001b40 $t
       stm32eforth.s:3306   .text.reset_handler:0000000000001b5c $d
       stm32eforth.s:3307   .text.reset_handler:0000000000001b60 _PRESE
       stm32eforth.s:3321   .text.reset_handler:0000000000001b76 $d
       stm32eforth.s:3322   .text.reset_handler:0000000000001b7a _QUIT
       stm32eforth.s:3329   .text.reset_handler:0000000000001b8c QUIT1
       stm32eforth.s:3331   .text.reset_handler:0000000000001b90 QUIT2
       stm32eforth.s:3335   .text.reset_handler:0000000000001b9c $d
       stm32eforth.s:3344   .text.reset_handler:0000000000001ba4 _UNLOCK
       stm32eforth.s:3347   .text.reset_handler:0000000000001bac UNLOCK
       stm32eforth.s:3350   .text.reset_handler:0000000000001bb4 $d
       stm32eforth.s:3371   .text.reset_handler:0000000000001bd6 LOCK
       stm32eforth.s:3721   .text.reset_handler:0000000000001fc0 flash_regs
       stm32eforth.s:3351   .text.reset_handler:0000000000001bb8 $t
       stm32eforth.s:3378   .text.reset_handler:0000000000001be2 WAIT_BSY
       stm32eforth.s:3380   .text.reset_handler:0000000000001be4 WAIT1
       stm32eforth.s:3391   .text.reset_handler:0000000000001bee $d
       stm32eforth.s:3392   .text.reset_handler:0000000000001bf2 _EPAGE
       stm32eforth.s:3396   .text.reset_handler:0000000000001c00 EPAGE
       stm32eforth.s:3400   .text.reset_handler:0000000000001c0c $d
       stm32eforth.s:3401   .text.reset_handler:0000000000001c10 $t
       stm32eforth.s:3411   .text.reset_handler:0000000000001c2e $d
       stm32eforth.s:3412   .text.reset_handler:0000000000001c32 $t
       stm32eforth.s:3416   .text.reset_handler:0000000000001c40 $d
       stm32eforth.s:3418   .text.reset_handler:0000000000001c4e $t
       stm32eforth.s:3423   .text.reset_handler:0000000000001c54 HWORD_WRITE
       stm32eforth.s:3436   .text.reset_handler:0000000000001c76 $d
       stm32eforth.s:3437   .text.reset_handler:0000000000001c7a $t
       stm32eforth.s:3438   .text.reset_handler:0000000000001c7e $d
       stm32eforth.s:3440   .text.reset_handler:0000000000001c8c $t
       stm32eforth.s:3449   .text.reset_handler:0000000000001c90 $d
       stm32eforth.s:3450   .text.reset_handler:0000000000001c94 _ISTOR
       stm32eforth.s:3453   .text.reset_handler:0000000000001c98 ISTOR
       stm32eforth.s:3457   .text.reset_handler:0000000000001ca4 $d
       stm32eforth.s:3458   .text.reset_handler:0000000000001ca8 $t
       stm32eforth.s:3469   .text.reset_handler:0000000000001cd4 $d
       stm32eforth.s:3470   .text.reset_handler:0000000000001cd8 $t
       stm32eforth.s:3476   .text.reset_handler:0000000000001ce0 $d
       stm32eforth.s:3477   .text.reset_handler:0000000000001ce4 _IMG_SIZE
       stm32eforth.s:3480   .text.reset_handler:0000000000001cf0 IMG_SIZE
       stm32eforth.s:3483   .text.reset_handler:0000000000001cf8 $d
       stm32eforth.s:3484   .text.reset_handler:0000000000001cfc $t
       stm32eforth.s:3489   .text.reset_handler:0000000000001d10 $d
       stm32eforth.s:3490   .text.reset_handler:0000000000001d14 $t
       stm32eforth.s:3493   .text.reset_handler:0000000000001d20 $d
       stm32eforth.s:3494   .text.reset_handler:0000000000001d24 $t
       stm32eforth.s:3500   .text.reset_handler:0000000000001d2c $d
       stm32eforth.s:3501   .text.reset_handler:0000000000001d30 _IMGQ
ARM GAS  stm32eforth.s 			page 105


       stm32eforth.s:3504   .text.reset_handler:0000000000001d38 IMGQ
       stm32eforth.s:3516   .text.reset_handler:0000000000001d58 $d
       stm32eforth.s:3517   .text.reset_handler:0000000000001d5c _LOAD_IMG
       stm32eforth.s:3520   .text.reset_handler:0000000000001d68 LOAD_IMG
       stm32eforth.s:3524   .text.reset_handler:0000000000001d74 $d
       stm32eforth.s:3526   .text.reset_handler:0000000000001d78 $t
       stm32eforth.s:3550   .text.reset_handler:0000000000001dc0 $d
       stm32eforth.s:3551   .text.reset_handler:0000000000001dc4 _ERASE_MPG
       stm32eforth.s:3553   .text.reset_handler:0000000000001dce $t
       stm32eforth.s:3554   .text.reset_handler:0000000000001dd0 ERASE_MPG
       stm32eforth.s:3616   .text.reset_handler:0000000000001e80 PG_TO_ADR
       stm32eforth.s:3559   .text.reset_handler:0000000000001de0 $d
       stm32eforth.s:3561   .text.reset_handler:0000000000001de4 $t
       stm32eforth.s:3568   .text.reset_handler:0000000000001dfc $d
       stm32eforth.s:3569   .text.reset_handler:0000000000001e00 $t
       stm32eforth.s:3574   .text.reset_handler:0000000000001e08 $d
       stm32eforth.s:3575   .text.reset_handler:0000000000001e0c _FLSH_WR
       stm32eforth.s:3578   .text.reset_handler:0000000000001e14 FLSH_WR
       stm32eforth.s:3579   .text.reset_handler:0000000000001e14 $t
       stm32eforth.s:3582   .text.reset_handler:0000000000001e20 $d
       stm32eforth.s:3584   .text.reset_handler:0000000000001e24 $t
       stm32eforth.s:3593   .text.reset_handler:0000000000001e48 $d
       stm32eforth.s:3594   .text.reset_handler:0000000000001e4c $t
       stm32eforth.s:3601   .text.reset_handler:0000000000001e5c $d
       stm32eforth.s:3602   .text.reset_handler:0000000000001e60 _ADR_TO_PG
       stm32eforth.s:3605   .text.reset_handler:0000000000001e68 ADR_TO_PG
       stm32eforth.s:3612   .text.reset_handler:0000000000001e72 $d
       stm32eforth.s:3613   .text.reset_handler:0000000000001e76 _PG_TO_ADR
       stm32eforth.s:3623   .text.reset_handler:0000000000001e8a $d
       stm32eforth.s:3624   .text.reset_handler:0000000000001e8e _ERASE_IMG
       stm32eforth.s:3626   .text.reset_handler:0000000000001e98 $t
       stm32eforth.s:3627   .text.reset_handler:0000000000001e98 ERASE_IMG
       stm32eforth.s:3633   .text.reset_handler:0000000000001eac $d
       stm32eforth.s:3634   .text.reset_handler:0000000000001eb0 $t
       stm32eforth.s:3638   .text.reset_handler:0000000000001ec0 $d
       stm32eforth.s:3639   .text.reset_handler:0000000000001ec4 $t
       stm32eforth.s:3644   .text.reset_handler:0000000000001ecc $d
       stm32eforth.s:3645   .text.reset_handler:0000000000001ed0 _SAVE_IMG
       stm32eforth.s:3648   .text.reset_handler:0000000000001edc SAVE_IMG
       stm32eforth.s:3654   .text.reset_handler:0000000000001ef0 $d
       stm32eforth.s:3655   .text.reset_handler:0000000000001ef4 $t
       stm32eforth.s:3658   .text.reset_handler:0000000000001f00 $d
       stm32eforth.s:3660   .text.reset_handler:0000000000001f04 $t
       stm32eforth.s:3682   .text.reset_handler:0000000000001f40 $d
       stm32eforth.s:3683   .text.reset_handler:0000000000001f44 _TURNKEY
       stm32eforth.s:3685   .text.reset_handler:0000000000001f4c $t
       stm32eforth.s:3686   .text.reset_handler:0000000000001f4c TURNKEY
       stm32eforth.s:3736   .text.reset_handler:0000000000001fd4 TICK
       stm32eforth.s:3694   .text.reset_handler:0000000000001f64 $d
       stm32eforth.s:3695   .text.reset_handler:0000000000001f68 _FORGET
       stm32eforth.s:3698   .text.reset_handler:0000000000001f70 FORGET
       stm32eforth.s:3704   .text.reset_handler:0000000000001f84 $d
       stm32eforth.s:3705   .text.reset_handler:0000000000001f88 $t
       stm32eforth.s:3708   .text.reset_handler:0000000000001f94 $d
       stm32eforth.s:3709   .text.reset_handler:0000000000001f98 $t
       stm32eforth.s:4179   .text.reset_handler:0000000000002400 OVERT
       stm32eforth.s:3722   .text.reset_handler:0000000000001fc0 $d
ARM GAS  stm32eforth.s 			page 106


       stm32eforth.s:3733   .text.reset_handler:0000000000001fd0 _TICK
       stm32eforth.s:3735   .text.reset_handler:0000000000001fd2 $t
       stm32eforth.s:3741   .text.reset_handler:0000000000001fe4 $d
       stm32eforth.s:3743   .text.reset_handler:0000000000001fec TICK1
       stm32eforth.s:3742   .text.reset_handler:0000000000001fe8 $t
       stm32eforth.s:3748   .text.reset_handler:0000000000001ff0 $d
       stm32eforth.s:3749   .text.reset_handler:0000000000001ff4 _ALLOT
       stm32eforth.s:3751   .text.reset_handler:0000000000001ffa $t
       stm32eforth.s:3752   .text.reset_handler:0000000000001ffc ALLOT
       stm32eforth.s:3761   .text.reset_handler:000000000000200c $d
       stm32eforth.s:3762   .text.reset_handler:0000000000002010 _COMMA
       stm32eforth.s:3763   .text.reset_handler:0000000000002012 $t
       stm32eforth.s:3764   .text.reset_handler:0000000000002014 COMMA
       stm32eforth.s:3777   .text.reset_handler:0000000000002034 $d
       stm32eforth.s:3778   .text.reset_handler:0000000000002038 _BCOMP
       stm32eforth.s:3780   .text.reset_handler:0000000000002042 $t
       stm32eforth.s:3781   .text.reset_handler:0000000000002044 BCOMP
       stm32eforth.s:3790   .text.reset_handler:0000000000002054 $d
       stm32eforth.s:3791   .text.reset_handler:0000000000002058 _COMPI
       stm32eforth.s:3793   .text.reset_handler:0000000000002060 $t
       stm32eforth.s:3794   .text.reset_handler:0000000000002060 COMPI
       stm32eforth.s:4226   .text.reset_handler:000000000000245c CALLC
       stm32eforth.s:3809   .text.reset_handler:0000000000002088 $d
       stm32eforth.s:3810   .text.reset_handler:000000000000208c _LITER
       stm32eforth.s:3812   .text.reset_handler:0000000000002094 $t
       stm32eforth.s:3813   .text.reset_handler:0000000000002094 LITER
       stm32eforth.s:3816   .text.reset_handler:000000000000209c $d
       stm32eforth.s:3817   .text.reset_handler:00000000000020a0 $t
       stm32eforth.s:3827   .text.reset_handler:00000000000020a8 STRCQ
       stm32eforth.s:3830   .text.reset_handler:00000000000020b0 $d
       stm32eforth.s:3831   .text.reset_handler:00000000000020b4 $t
       stm32eforth.s:3834   .text.reset_handler:00000000000020c0 $d
       stm32eforth.s:3835   .text.reset_handler:00000000000020c4 $t
       stm32eforth.s:3849   .text.reset_handler:00000000000020e0 $d
       stm32eforth.s:3850   .text.reset_handler:00000000000020e4 _FOR
       stm32eforth.s:3852   .text.reset_handler:00000000000020e8 $t
       stm32eforth.s:3853   .text.reset_handler:00000000000020e8 FOR
       stm32eforth.s:3856   .text.reset_handler:00000000000020f0 $d
       stm32eforth.s:3857   .text.reset_handler:00000000000020f4 $t
       stm32eforth.s:3863   .text.reset_handler:00000000000020fc $d
       stm32eforth.s:3864   .text.reset_handler:0000000000002100 _BEGIN
       stm32eforth.s:3866   .text.reset_handler:0000000000002106 $t
       stm32eforth.s:3867   .text.reset_handler:0000000000002108 BEGIN
       stm32eforth.s:3875   .text.reset_handler:0000000000002114 $d
       stm32eforth.s:3876   .text.reset_handler:0000000000002118 _NEXT
       stm32eforth.s:3879   .text.reset_handler:0000000000002120 NEXT
       stm32eforth.s:3882   .text.reset_handler:0000000000002128 $d
       stm32eforth.s:3883   .text.reset_handler:000000000000212c $t
       stm32eforth.s:3889   .text.reset_handler:0000000000002134 $d
       stm32eforth.s:3890   .text.reset_handler:0000000000002138 _UNTIL
       stm32eforth.s:3892   .text.reset_handler:000000000000213e $t
       stm32eforth.s:3893   .text.reset_handler:0000000000002140 UNTIL
       stm32eforth.s:3896   .text.reset_handler:0000000000002148 $d
       stm32eforth.s:3897   .text.reset_handler:000000000000214c $t
       stm32eforth.s:3903   .text.reset_handler:0000000000002154 $d
       stm32eforth.s:3904   .text.reset_handler:0000000000002158 _AGAIN
       stm32eforth.s:3906   .text.reset_handler:000000000000215e $t
ARM GAS  stm32eforth.s 			page 107


       stm32eforth.s:3907   .text.reset_handler:0000000000002160 AGAIN
       stm32eforth.s:3910   .text.reset_handler:0000000000002168 $d
       stm32eforth.s:3911   .text.reset_handler:000000000000216c $t
       stm32eforth.s:3917   .text.reset_handler:0000000000002174 $d
       stm32eforth.s:3918   .text.reset_handler:0000000000002178 _IFF
       stm32eforth.s:3921   .text.reset_handler:000000000000217c IFF
       stm32eforth.s:3924   .text.reset_handler:0000000000002184 $d
       stm32eforth.s:3925   .text.reset_handler:0000000000002188 $t
       stm32eforth.s:3927   .text.reset_handler:0000000000002190 $d
       stm32eforth.s:3928   .text.reset_handler:0000000000002194 $t
       stm32eforth.s:3935   .text.reset_handler:00000000000021a0 $d
       stm32eforth.s:3936   .text.reset_handler:00000000000021a4 _AHEAD
       stm32eforth.s:3938   .text.reset_handler:00000000000021aa $t
       stm32eforth.s:3939   .text.reset_handler:00000000000021ac AHEAD
       stm32eforth.s:3942   .text.reset_handler:00000000000021b4 $d
       stm32eforth.s:3943   .text.reset_handler:00000000000021b8 $t
       stm32eforth.s:3945   .text.reset_handler:00000000000021c0 $d
       stm32eforth.s:3946   .text.reset_handler:00000000000021c4 $t
       stm32eforth.s:3953   .text.reset_handler:00000000000021d0 $d
       stm32eforth.s:3954   .text.reset_handler:00000000000021d4 _REPEA
       stm32eforth.s:3957   .text.reset_handler:00000000000021dc REPEA
       stm32eforth.s:3968   .text.reset_handler:00000000000021f4 $d
       stm32eforth.s:3969   .text.reset_handler:00000000000021f8 _THENN
       stm32eforth.s:3972   .text.reset_handler:0000000000002200 THENN
       stm32eforth.s:3982   .text.reset_handler:0000000000002214 $d
       stm32eforth.s:3983   .text.reset_handler:0000000000002218 _AFT
       stm32eforth.s:3985   .text.reset_handler:000000000000221c $t
       stm32eforth.s:3986   .text.reset_handler:000000000000221c AFT
       stm32eforth.s:3997   .text.reset_handler:0000000000002234 $d
       stm32eforth.s:3998   .text.reset_handler:0000000000002238 _ELSEE
       stm32eforth.s:4001   .text.reset_handler:0000000000002240 ELSEE
       stm32eforth.s:4011   .text.reset_handler:0000000000002254 $d
       stm32eforth.s:4012   .text.reset_handler:0000000000002258 _WHILE
       stm32eforth.s:4014   .text.reset_handler:000000000000225e $t
       stm32eforth.s:4015   .text.reset_handler:0000000000002260 WHILE
       stm32eforth.s:4024   .text.reset_handler:0000000000002270 $d
       stm32eforth.s:4025   .text.reset_handler:0000000000002274 _ABRTQ
       stm32eforth.s:4028   .text.reset_handler:000000000000227c ABRTQ
       stm32eforth.s:4031   .text.reset_handler:0000000000002284 $d
       stm32eforth.s:4032   .text.reset_handler:0000000000002288 $t
       stm32eforth.s:4038   .text.reset_handler:0000000000002290 $d
       stm32eforth.s:4039   .text.reset_handler:0000000000002294 _STRQ
       stm32eforth.s:4042   .text.reset_handler:0000000000002298 STRQ
       stm32eforth.s:4045   .text.reset_handler:00000000000022a0 $d
       stm32eforth.s:4046   .text.reset_handler:00000000000022a4 $t
       stm32eforth.s:4052   .text.reset_handler:00000000000022ac $d
       stm32eforth.s:4053   .text.reset_handler:00000000000022b0 _DOTQ
       stm32eforth.s:4056   .text.reset_handler:00000000000022b4 DOTQ
       stm32eforth.s:4059   .text.reset_handler:00000000000022bc $d
       stm32eforth.s:4060   .text.reset_handler:00000000000022c0 $t
       stm32eforth.s:4069   .text.reset_handler:00000000000022c8 $d
       stm32eforth.s:4070   .text.reset_handler:00000000000022cc _UNIQU
       stm32eforth.s:4072   .text.reset_handler:00000000000022d4 $t
       stm32eforth.s:4073   .text.reset_handler:00000000000022d4 UNIQU
       stm32eforth.s:4078   .text.reset_handler:00000000000022e4 $d
       stm32eforth.s:4086   .text.reset_handler:0000000000002300 UNIQ1
       stm32eforth.s:4079   .text.reset_handler:00000000000022e8 $t
ARM GAS  stm32eforth.s 			page 108


       stm32eforth.s:4080   .text.reset_handler:00000000000022ec $d
       stm32eforth.s:4082   .text.reset_handler:00000000000022f4 $t
       stm32eforth.s:4097   .text.reset_handler:0000000000002308 SNAME
       stm32eforth.s:4102   .text.reset_handler:0000000000002318 $d
       stm32eforth.s:4116   .text.reset_handler:0000000000002350 SNAM1
       stm32eforth.s:4103   .text.reset_handler:000000000000231c $t
       stm32eforth.s:4118   .text.reset_handler:0000000000002354 $d
       stm32eforth.s:4120   .text.reset_handler:000000000000235c $t
       stm32eforth.s:4125   .text.reset_handler:0000000000002360 $d
       stm32eforth.s:4126   .text.reset_handler:0000000000002364 _SCOMP
       stm32eforth.s:4128   .text.reset_handler:000000000000236e $t
       stm32eforth.s:4129   .text.reset_handler:0000000000002370 SCOMP
       stm32eforth.s:4134   .text.reset_handler:0000000000002380 $d
       stm32eforth.s:4146   .text.reset_handler:00000000000023ac SCOM2
       stm32eforth.s:4135   .text.reset_handler:0000000000002384 $t
       stm32eforth.s:4137   .text.reset_handler:000000000000238c $d
       stm32eforth.s:4138   .text.reset_handler:0000000000002390 $t
       stm32eforth.s:4140   .text.reset_handler:0000000000002398 $d
       stm32eforth.s:4143   .text.reset_handler:00000000000023a4 SCOM1
       stm32eforth.s:4141   .text.reset_handler:000000000000239c $t
       stm32eforth.s:4149   .text.reset_handler:00000000000023b4 $d
       stm32eforth.s:4152   .text.reset_handler:00000000000023c0 SCOM3
       stm32eforth.s:4150   .text.reset_handler:00000000000023b8 $t
       stm32eforth.s:4159   .text.reset_handler:00000000000023c8 COLON_ABORT
       stm32eforth.s:4175   .text.reset_handler:00000000000023f4 $d
       stm32eforth.s:4176   .text.reset_handler:00000000000023f8 _OVERT
       stm32eforth.s:4178   .text.reset_handler:00000000000023fe $t
       stm32eforth.s:4190   .text.reset_handler:0000000000002418 $d
       stm32eforth.s:4191   .text.reset_handler:000000000000241c _SEMIS
       stm32eforth.s:4193   .text.reset_handler:000000000000241e $t
       stm32eforth.s:4194   .text.reset_handler:0000000000002420 SEMIS
       stm32eforth.s:4206   .text.reset_handler:000000000000243c $d
       stm32eforth.s:4207   .text.reset_handler:0000000000002440 _RBRAC
       stm32eforth.s:4209   .text.reset_handler:0000000000002442 $t
       stm32eforth.s:4210   .text.reset_handler:0000000000002444 RBRAC
       stm32eforth.s:4213   .text.reset_handler:000000000000244c $d
       stm32eforth.s:4214   .text.reset_handler:0000000000002450 $t
       stm32eforth.s:4247   .text.reset_handler:0000000000002496 $d
       stm32eforth.s:4248   .text.reset_handler:000000000000249a _COLON
       stm32eforth.s:4250   .text.reset_handler:000000000000249c $t
       stm32eforth.s:4251   .text.reset_handler:000000000000249c COLON
       stm32eforth.s:4264   .text.reset_handler:00000000000024bc $d
       stm32eforth.s:4265   .text.reset_handler:00000000000024c0 _IMMED
       stm32eforth.s:4267   .text.reset_handler:00000000000024ca $t
       stm32eforth.s:4268   .text.reset_handler:00000000000024cc IMMED
       stm32eforth.s:4271   .text.reset_handler:00000000000024d4 $d
       stm32eforth.s:4272   .text.reset_handler:00000000000024d8 $t
       stm32eforth.s:4287   .text.reset_handler:00000000000024f8 $d
       stm32eforth.s:4288   .text.reset_handler:00000000000024fc _CONST
       stm32eforth.s:4291   .text.reset_handler:0000000000002508 CONST
       stm32eforth.s:4300   .text.reset_handler:0000000000002528 $d
       stm32eforth.s:4301   .text.reset_handler:000000000000252c $t
       stm32eforth.s:4308   .text.reset_handler:0000000000002538 $d
       stm32eforth.s:4309   .text.reset_handler:000000000000253c _CREAT
       stm32eforth.s:4312   .text.reset_handler:0000000000002544 CREAT
       stm32eforth.s:4321   .text.reset_handler:0000000000002564 $d
       stm32eforth.s:4322   .text.reset_handler:0000000000002568 $t
ARM GAS  stm32eforth.s 			page 109


       stm32eforth.s:4328   .text.reset_handler:0000000000002570 $d
       stm32eforth.s:4329   .text.reset_handler:0000000000002574 _VARIA
       stm32eforth.s:4332   .text.reset_handler:0000000000002580 VARIA
       stm32eforth.s:4336   .text.reset_handler:000000000000258c $d
       stm32eforth.s:4337   .text.reset_handler:0000000000002590 $t
       stm32eforth.s:4350   .text.reset_handler:0000000000002598 DMP
       stm32eforth.s:4354   .text.reset_handler:00000000000025a4 $d
       stm32eforth.s:4355   .text.reset_handler:00000000000025a8 $t
       stm32eforth.s:4366   .text.reset_handler:00000000000025d0 PDUM2
       stm32eforth.s:4359   .text.reset_handler:00000000000025b8 PDUM1
       stm32eforth.s:4363   .text.reset_handler:00000000000025c4 $d
       stm32eforth.s:4364   .text.reset_handler:00000000000025c8 $t
       stm32eforth.s:4368   .text.reset_handler:00000000000025d4 $d
       stm32eforth.s:4369   .text.reset_handler:00000000000025d8 $t
       stm32eforth.s:4374   .text.reset_handler:00000000000025dc $d
       stm32eforth.s:4375   .text.reset_handler:00000000000025e0 _DUMP
       stm32eforth.s:4378   .text.reset_handler:00000000000025e8 DUMP
       stm32eforth.s:4385   .text.reset_handler:0000000000002600 $d
       stm32eforth.s:4386   .text.reset_handler:0000000000002604 $t
       stm32eforth.s:4400   .text.reset_handler:0000000000002638 DUMP4
       stm32eforth.s:4389   .text.reset_handler:0000000000002610 DUMP1
       stm32eforth.s:4392   .text.reset_handler:0000000000002618 $d
       stm32eforth.s:4393   .text.reset_handler:000000000000261c $t
       stm32eforth.s:4402   .text.reset_handler:000000000000263c $d
       stm32eforth.s:4403   .text.reset_handler:0000000000002640 DUMP3
       stm32eforth.s:4404   .text.reset_handler:0000000000002640 $t
       stm32eforth.s:4413   .text.reset_handler:0000000000002654 $d
       stm32eforth.s:4414   .text.reset_handler:0000000000002658 _DOTS
       stm32eforth.s:4418   .text.reset_handler:000000000000265c DOTS
       stm32eforth.s:4428   .text.reset_handler:000000000000267c DOTS2
       stm32eforth.s:4424   .text.reset_handler:0000000000002670 DOTS1
       stm32eforth.s:4430   .text.reset_handler:0000000000002680 $d
       stm32eforth.s:4431   .text.reset_handler:0000000000002684 $t
       stm32eforth.s:4437   .text.reset_handler:000000000000268c $d
       stm32eforth.s:4438   .text.reset_handler:0000000000002690 _TNAME
       stm32eforth.s:4440   .text.reset_handler:0000000000002696 $t
       stm32eforth.s:4441   .text.reset_handler:0000000000002698 TNAME
       stm32eforth.s:4446   .text.reset_handler:00000000000026a8 TNAM1
       stm32eforth.s:4449   .text.reset_handler:00000000000026b0 $d
       stm32eforth.s:4459   .text.reset_handler:00000000000026d8 TNAM2
       stm32eforth.s:4450   .text.reset_handler:00000000000026b4 $t
       stm32eforth.s:4455   .text.reset_handler:00000000000026c8 $d
       stm32eforth.s:4456   .text.reset_handler:00000000000026cc $t
       stm32eforth.s:4467   .text.reset_handler:00000000000026e4 $d
       stm32eforth.s:4468   .text.reset_handler:00000000000026e8 _DOTID
       stm32eforth.s:4470   .text.reset_handler:00000000000026ec $t
       stm32eforth.s:4471   .text.reset_handler:00000000000026ec DOTID
       stm32eforth.s:4475   .text.reset_handler:00000000000026f8 $d
       stm32eforth.s:4482   .text.reset_handler:0000000000002714 DOTI1
       stm32eforth.s:4476   .text.reset_handler:00000000000026fc $t
       stm32eforth.s:4478   .text.reset_handler:0000000000002704 $d
       stm32eforth.s:4479   .text.reset_handler:0000000000002708 $t
       stm32eforth.s:4484   .text.reset_handler:0000000000002718 $d
       stm32eforth.s:4486   .text.reset_handler:0000000000002722 $t
       stm32eforth.s:4489   *ABS*:0000000000000000 WANT_SEE
       stm32eforth.s:4573   .text.reset_handler:0000000000002728 $d
       stm32eforth.s:4575   .text.reset_handler:000000000000272c _WORDS
ARM GAS  stm32eforth.s 			page 110


       stm32eforth.s:4577   .text.reset_handler:0000000000002732 $t
       stm32eforth.s:4578   .text.reset_handler:0000000000002734 WORDS
       stm32eforth.s:4583   .text.reset_handler:0000000000002744 WORS1
       stm32eforth.s:4586   .text.reset_handler:000000000000274c $d
       stm32eforth.s:4593   .text.reset_handler:0000000000002768 WORS2
       stm32eforth.s:4587   .text.reset_handler:0000000000002750 $t
       stm32eforth.s:4606   .text.reset_handler:000000000000276c VERSN
       stm32eforth.s:4609   .text.reset_handler:0000000000002774 $d
       stm32eforth.s:4610   .text.reset_handler:0000000000002778 $t
       stm32eforth.s:4615   .text.reset_handler:000000000000277c $d
       stm32eforth.s:4616   .text.reset_handler:0000000000002780 _HI
       stm32eforth.s:4623   .text.reset_handler:0000000000002790 $d
       stm32eforth.s:4625   .text.reset_handler:00000000000027a8 $t
       stm32eforth.s:4634   .text.reset_handler:00000000000027c8 $d
       stm32eforth.s:4635   .text.reset_handler:00000000000027cc $t
       stm32eforth.s:4647   .text.reset_handler:00000000000027ec $d
       stm32eforth.s:4653   .text.reset_handler:00000000000027f8 $t
       stm32eforth.s:4660   .text.reset_handler:0000000000002812 COLD1
       stm32eforth.s:4662   .text.reset_handler:0000000000002816 $d
       stm32eforth.s:4663   .text.reset_handler:000000000000281a $t
       stm32eforth.s:4665   .text.reset_handler:0000000000002822 $d
       stm32eforth.s:4666   .text.reset_handler:0000000000002826 $t
       stm32eforth.s:4667   .text.reset_handler:000000000000282a $d
       stm32eforth.s:4668   .text.reset_handler:000000000000282e $t
       stm32eforth.s:4669   .text.reset_handler:0000000000002832 $d
       stm32eforth.s:4670   .text.reset_handler:0000000000002836 $t
       stm32eforth.s:4673   .text.reset_handler:0000000000002842 $d
       stm32eforth.s:4674   .text.reset_handler:0000000000002846 $t
       stm32eforth.s:4676   .text.reset_handler:000000000000284e $d
       stm32eforth.s:4677   .text.reset_handler:0000000000002852 $t
       stm32eforth.s:4678   .text.reset_handler:0000000000002856 $d
       stm32eforth.s:4679   .text.reset_handler:000000000000285a $t
       stm32eforth.s:4684   .text.reset_handler:000000000000286e COLD2
       stm32eforth.s:4687   .text.reset_handler:0000000000002870 $d
       stm32eforth.s:4688   .text.reset_handler:0000000000002874 $t
       stm32eforth.s:4690   .text.reset_handler:0000000000002c00 $d
       stm32eforth.s:263    .text.default_handler:0000000000000033 $d
       stm32eforth.s:263    .text.default_handler:0000000000000034 $t
       stm32eforth.s:507    .text.reset_handler:000000000000045f $d
       stm32eforth.s:507    .text.reset_handler:0000000000000460 $t
       stm32eforth.s:531    .text.reset_handler:00000000000004ab $d
       stm32eforth.s:531    .text.reset_handler:00000000000004ac $t
       stm32eforth.s:567    .text.reset_handler:00000000000004fd $d
       stm32eforth.s:567    .text.reset_handler:00000000000004fe $t
       stm32eforth.s:587    .text.reset_handler:0000000000000525 $d
       stm32eforth.s:587    .text.reset_handler:0000000000000526 $t
       stm32eforth.s:612    .text.reset_handler:0000000000000559 $d
       stm32eforth.s:612    .text.reset_handler:000000000000055a $t
       stm32eforth.s:726    .text.reset_handler:00000000000005ef $d
       stm32eforth.s:726    .text.reset_handler:00000000000005f0 $t
       stm32eforth.s:760    .text.reset_handler:000000000000061b $d
       stm32eforth.s:760    .text.reset_handler:000000000000061c $t
       stm32eforth.s:773    .text.reset_handler:000000000000062f $d
       stm32eforth.s:773    .text.reset_handler:0000000000000630 $t
       stm32eforth.s:784    .text.reset_handler:000000000000063b $d
       stm32eforth.s:784    .text.reset_handler:000000000000063c $t
       stm32eforth.s:796    .text.reset_handler:000000000000064d $d
ARM GAS  stm32eforth.s 			page 111


       stm32eforth.s:796    .text.reset_handler:000000000000064e $t
       stm32eforth.s:808    .text.reset_handler:000000000000065f $d
       stm32eforth.s:808    .text.reset_handler:0000000000000660 $t
       stm32eforth.s:832    .text.reset_handler:0000000000000685 $d
       stm32eforth.s:832    .text.reset_handler:0000000000000686 $t
       stm32eforth.s:854    .text.reset_handler:00000000000006a7 $d
       stm32eforth.s:854    .text.reset_handler:00000000000006a8 $t
       stm32eforth.s:867    .text.reset_handler:00000000000006b9 $d
       stm32eforth.s:867    .text.reset_handler:00000000000006ba $t
       stm32eforth.s:879    .text.reset_handler:00000000000006cb $d
       stm32eforth.s:879    .text.reset_handler:00000000000006cc $t
       stm32eforth.s:903    .text.reset_handler:00000000000006f1 $d
       stm32eforth.s:903    .text.reset_handler:00000000000006f2 $t
       stm32eforth.s:942    .text.reset_handler:0000000000000737 $d
       stm32eforth.s:942    .text.reset_handler:0000000000000738 $t
       stm32eforth.s:954    .text.reset_handler:000000000000074d $d
       stm32eforth.s:954    .text.reset_handler:000000000000074e $t
       stm32eforth.s:1016   .text.reset_handler:00000000000007a7 $d
       stm32eforth.s:1016   .text.reset_handler:00000000000007a8 $t
       stm32eforth.s:1030   .text.reset_handler:00000000000007bb $d
       stm32eforth.s:1030   .text.reset_handler:00000000000007bc $t
       stm32eforth.s:1041   .text.reset_handler:00000000000007c9 $d
       stm32eforth.s:1041   .text.reset_handler:00000000000007ca $t
       stm32eforth.s:1052   .text.reset_handler:00000000000007d9 $d
       stm32eforth.s:1052   .text.reset_handler:00000000000007da $t
       stm32eforth.s:1063   .text.reset_handler:00000000000007e9 $d
       stm32eforth.s:1063   .text.reset_handler:00000000000007ea $t
       stm32eforth.s:1096   .text.reset_handler:0000000000000819 $d
       stm32eforth.s:1096   .text.reset_handler:000000000000081a $t
       stm32eforth.s:1130   .text.reset_handler:000000000000084d $d
       stm32eforth.s:1130   .text.reset_handler:000000000000084e $t
       stm32eforth.s:1141   .text.reset_handler:000000000000085d $d
       stm32eforth.s:1141   .text.reset_handler:000000000000085e $t
       stm32eforth.s:1152   .text.reset_handler:000000000000086f $d
       stm32eforth.s:1152   .text.reset_handler:0000000000000870 $t
       stm32eforth.s:1191   .text.reset_handler:00000000000008ab $d
       stm32eforth.s:1191   .text.reset_handler:00000000000008ac $t
       stm32eforth.s:1204   .text.reset_handler:00000000000008bf $d
       stm32eforth.s:1204   .text.reset_handler:00000000000008c0 $t
       stm32eforth.s:1231   .text.reset_handler:00000000000008ed $d
       stm32eforth.s:1231   .text.reset_handler:00000000000008ee $t
       stm32eforth.s:1255   .text.reset_handler:0000000000000911 $d
       stm32eforth.s:1255   .text.reset_handler:0000000000000912 $t
       stm32eforth.s:1284   .text.reset_handler:000000000000093f $d
       stm32eforth.s:1284   .text.reset_handler:0000000000000940 $t
       stm32eforth.s:1357   .text.reset_handler:00000000000009af $d
       stm32eforth.s:1357   .text.reset_handler:00000000000009b0 $t
       stm32eforth.s:1372   .text.reset_handler:00000000000009c7 $d
       stm32eforth.s:1372   .text.reset_handler:00000000000009c8 $t
       stm32eforth.s:1387   .text.reset_handler:00000000000009e3 $d
       stm32eforth.s:1387   .text.reset_handler:00000000000009e4 $t
       stm32eforth.s:1459   .text.reset_handler:0000000000000a41 $d
       stm32eforth.s:1459   .text.reset_handler:0000000000000a42 $t
       stm32eforth.s:1470   .text.reset_handler:0000000000000a57 $d
       stm32eforth.s:1470   .text.reset_handler:0000000000000a58 $t
       stm32eforth.s:1493   .text.reset_handler:0000000000000a7f $d
       stm32eforth.s:1493   .text.reset_handler:0000000000000a80 $t
ARM GAS  stm32eforth.s 			page 112


       stm32eforth.s:1517   .text.reset_handler:0000000000000aa7 $d
       stm32eforth.s:1517   .text.reset_handler:0000000000000aa8 $t
       stm32eforth.s:1541   .text.reset_handler:0000000000000ac5 $d
       stm32eforth.s:1541   .text.reset_handler:0000000000000ac6 $t
       stm32eforth.s:1565   .text.reset_handler:0000000000000aef $d
       stm32eforth.s:1565   .text.reset_handler:0000000000000af0 $t
       stm32eforth.s:1614   .text.reset_handler:0000000000000b41 $d
       stm32eforth.s:1614   .text.reset_handler:0000000000000b42 $t
       stm32eforth.s:1637   .text.reset_handler:0000000000000b6b $d
       stm32eforth.s:1637   .text.reset_handler:0000000000000b6c $t
       stm32eforth.s:1652   .text.reset_handler:0000000000000b85 $d
       stm32eforth.s:1652   .text.reset_handler:0000000000000b86 $t
       stm32eforth.s:1665   .text.reset_handler:0000000000000ba1 $d
       stm32eforth.s:1665   .text.reset_handler:0000000000000ba2 $t
       stm32eforth.s:1689   .text.reset_handler:0000000000000bd9 $d
       stm32eforth.s:1689   .text.reset_handler:0000000000000bda $t
       stm32eforth.s:1705   .text.reset_handler:0000000000000bf1 $d
       stm32eforth.s:1705   .text.reset_handler:0000000000000bf2 $t
       stm32eforth.s:1724   .text.reset_handler:0000000000000c1f $d
       stm32eforth.s:1724   .text.reset_handler:0000000000000c20 $t
       stm32eforth.s:1794   .text.reset_handler:0000000000000ccd $d
       stm32eforth.s:1794   .text.reset_handler:0000000000000cce $t
       stm32eforth.s:1851   .text.reset_handler:0000000000000d47 $d
       stm32eforth.s:1851   .text.reset_handler:0000000000000d48 $t
       stm32eforth.s:1923   .text.reset_handler:0000000000000def $d
       stm32eforth.s:1923   .text.reset_handler:0000000000000df0 $t
       stm32eforth.s:1942   .text.reset_handler:0000000000000e15 $d
       stm32eforth.s:1942   .text.reset_handler:0000000000000e16 $t
       stm32eforth.s:1980   .text.reset_handler:0000000000000e5d $d
       stm32eforth.s:1980   .text.reset_handler:0000000000000e5e $t
       stm32eforth.s:2019   .text.reset_handler:0000000000000ea7 $d
       stm32eforth.s:2019   .text.reset_handler:0000000000000ea8 $t
       stm32eforth.s:2043   .text.reset_handler:0000000000000ed7 $d
       stm32eforth.s:2043   .text.reset_handler:0000000000000ed8 $t
       stm32eforth.s:2066   .text.reset_handler:0000000000000f03 $d
       stm32eforth.s:2066   .text.reset_handler:0000000000000f04 $t
       stm32eforth.s:2135   .text.reset_handler:0000000000000fbf $d
       stm32eforth.s:2135   .text.reset_handler:0000000000000fc0 $t
       stm32eforth.s:2149   .text.reset_handler:0000000000000fdd $d
       stm32eforth.s:2149   .text.reset_handler:0000000000000fde $t
       stm32eforth.s:2182   .text.reset_handler:000000000000102b $d
       stm32eforth.s:2182   .text.reset_handler:000000000000102c $t
       stm32eforth.s:2200   .text.reset_handler:000000000000104f $d
       stm32eforth.s:2200   .text.reset_handler:0000000000001050 $t
       stm32eforth.s:2218   .text.reset_handler:0000000000001077 $d
       stm32eforth.s:2218   .text.reset_handler:0000000000001078 $t
       stm32eforth.s:2287   .text.reset_handler:000000000000110f $d
       stm32eforth.s:2287   .text.reset_handler:0000000000001110 $t
       stm32eforth.s:2449   .text.reset_handler:0000000000001303 $d
       stm32eforth.s:2449   .text.reset_handler:0000000000001304 $t
       stm32eforth.s:2470   .text.reset_handler:0000000000001335 $d
       stm32eforth.s:2470   .text.reset_handler:0000000000001336 $t
       stm32eforth.s:2491   .text.reset_handler:0000000000001365 $d
       stm32eforth.s:2491   .text.reset_handler:0000000000001366 $t
       stm32eforth.s:2570   .text.reset_handler:00000000000013ef $d
       stm32eforth.s:2570   .text.reset_handler:00000000000013f0 $t
       stm32eforth.s:2608   .text.reset_handler:000000000000144f $d
ARM GAS  stm32eforth.s 			page 113


       stm32eforth.s:2608   .text.reset_handler:0000000000001450 $t
       stm32eforth.s:2778   .text.reset_handler:0000000000001633 $d
       stm32eforth.s:2778   .text.reset_handler:0000000000001634 $t
       stm32eforth.s:2823   .text.reset_handler:0000000000001695 $d
       stm32eforth.s:2823   .text.reset_handler:0000000000001696 $t
       stm32eforth.s:2838   .text.reset_handler:00000000000016b9 $d
       stm32eforth.s:2838   .text.reset_handler:00000000000016ba $t
       stm32eforth.s:3093   .text.reset_handler:0000000000001937 $d
       stm32eforth.s:3093   .text.reset_handler:0000000000001938 $t
       stm32eforth.s:3268   .text.reset_handler:0000000000001afb $d
       stm32eforth.s:3268   .text.reset_handler:0000000000001afc $t
       stm32eforth.s:3276   .text.reset_handler:0000000000001b17 $d
       stm32eforth.s:3276   .text.reset_handler:0000000000001b18 $t
       stm32eforth.s:3285   .text.reset_handler:0000000000001b25 $d
       stm32eforth.s:3285   .text.reset_handler:0000000000001b26 $t
       stm32eforth.s:3309   .text.reset_handler:0000000000001b67 $d
       stm32eforth.s:3309   .text.reset_handler:0000000000001b68 $t
       stm32eforth.s:3324   .text.reset_handler:0000000000001b7f $d
       stm32eforth.s:3324   .text.reset_handler:0000000000001b80 $t
       stm32eforth.s:3346   .text.reset_handler:0000000000001bab $d
       stm32eforth.s:3346   .text.reset_handler:0000000000001bac $t
       stm32eforth.s:3394   .text.reset_handler:0000000000001bfd $d
       stm32eforth.s:3394   .text.reset_handler:0000000000001bfe $t
       stm32eforth.s:3452   .text.reset_handler:0000000000001c97 $d
       stm32eforth.s:3452   .text.reset_handler:0000000000001c98 $t
       stm32eforth.s:3479   .text.reset_handler:0000000000001ced $d
       stm32eforth.s:3479   .text.reset_handler:0000000000001cee $t
       stm32eforth.s:3503   .text.reset_handler:0000000000001d35 $d
       stm32eforth.s:3503   .text.reset_handler:0000000000001d36 $t
       stm32eforth.s:3519   .text.reset_handler:0000000000001d65 $d
       stm32eforth.s:3519   .text.reset_handler:0000000000001d66 $t
       stm32eforth.s:3604   .text.reset_handler:0000000000001e67 $d
       stm32eforth.s:3604   .text.reset_handler:0000000000001e68 $t
       stm32eforth.s:3615   .text.reset_handler:0000000000001e7d $d
       stm32eforth.s:3615   .text.reset_handler:0000000000001e7e $t
       stm32eforth.s:3647   .text.reset_handler:0000000000001ed9 $d
       stm32eforth.s:3647   .text.reset_handler:0000000000001eda $t
       stm32eforth.s:3697   .text.reset_handler:0000000000001f6f $d
       stm32eforth.s:3697   .text.reset_handler:0000000000001f70 $t
       stm32eforth.s:3878   .text.reset_handler:000000000000211d $d
       stm32eforth.s:3878   .text.reset_handler:000000000000211e $t
       stm32eforth.s:3920   .text.reset_handler:000000000000217b $d
       stm32eforth.s:3920   .text.reset_handler:000000000000217c $t
       stm32eforth.s:3956   .text.reset_handler:00000000000021db $d
       stm32eforth.s:3956   .text.reset_handler:00000000000021dc $t
       stm32eforth.s:3971   .text.reset_handler:00000000000021fd $d
       stm32eforth.s:3971   .text.reset_handler:00000000000021fe $t
       stm32eforth.s:4000   .text.reset_handler:000000000000223d $d
       stm32eforth.s:4000   .text.reset_handler:000000000000223e $t
       stm32eforth.s:4027   .text.reset_handler:000000000000227b $d
       stm32eforth.s:4027   .text.reset_handler:000000000000227c $t
       stm32eforth.s:4041   .text.reset_handler:0000000000002297 $d
       stm32eforth.s:4041   .text.reset_handler:0000000000002298 $t
       stm32eforth.s:4055   .text.reset_handler:00000000000022b3 $d
       stm32eforth.s:4055   .text.reset_handler:00000000000022b4 $t
       stm32eforth.s:4290   .text.reset_handler:0000000000002505 $d
       stm32eforth.s:4290   .text.reset_handler:0000000000002506 $t
ARM GAS  stm32eforth.s 			page 114


       stm32eforth.s:4311   .text.reset_handler:0000000000002543 $d
       stm32eforth.s:4311   .text.reset_handler:0000000000002544 $t
       stm32eforth.s:4331   .text.reset_handler:000000000000257d $d
       stm32eforth.s:4331   .text.reset_handler:000000000000257e $t
       stm32eforth.s:4377   .text.reset_handler:00000000000025e5 $d
       stm32eforth.s:4377   .text.reset_handler:00000000000025e6 $t
       stm32eforth.s:4417   .text.reset_handler:000000000000265b $d
       stm32eforth.s:4417   .text.reset_handler:000000000000265c $t
       stm32eforth.s:4618   .text.reset_handler:0000000000002783 $d
       stm32eforth.s:4618   .text.reset_handler:0000000000002784 $t

UNDEFINED SYMBOLS
_mstack
