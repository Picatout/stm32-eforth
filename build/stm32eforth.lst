ARM GAS  stm32eforth.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  stm32eforth.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.p2align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.p2aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m3
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
ARM GAS  stm32eforth.s 			page 3


  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
ARM GAS  stm32eforth.s 			page 4


  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  81              	
  82              	/* blue pill specific constants */ 
  83              	  .equ LED_GPIO, GPIOC_BASE_ADR
  84              	  .equ LED_PIN, 13
  85              	  .equ UART, USART1_BASE_ADR 
  86              	
ARM GAS  stm32eforth.s 			page 5


  87              	/* eForth specific constants */
  88              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  89              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  90              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  91              	.equ UPP ,	0x20000130	/*start of user area (UP0) */
  92              	// .equ DTOP ,	0x20000240	/*start of usable RAM area (HERE) */
  93              	.equ DEND , 0x20004E00  /*usable RAM end */
  94              	 .equ RAMOFFSET ,	UPP 	// remap
  95              	 .equ RAMEND, 0x20005000 // 20Ko
  96              	 .equ FLASHOFFSET ,	0x08000130	// remap
  97              	//.equ RAMOFFSET  ,	0x00000000	/* absolute */
  98              	//.equ MAPOFFSET  ,	0x00000000	/* absolute */
  99              	  .equ MAPOFFSET , (RAMOFFSET-FLASHOFFSET)
 100              	
 101              	/*************************************
 102              	   system variables offset from UPP
 103              	*************************************/
 104              	  .equ SEED_OFS, 4    // prng seed 
 105              	  .equ TICKS_OFS, SEED_OFS+4  // millseconds counter
 106              	  .equ TIMER_OFS, TICKS_OFS+4  // count down timer
 107              	  .equ TORAM_OFS, TIMER_OFS+4  // compile to RAM 
 108              	  .equ IMG_SIGN_OFS, TORAM_OFS+4  // image signature  
 109              	  .equ BOOT_OFS, IMG_SIGN_OFS+4  // boot program address
 110              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
 111              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
 112              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
 113              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
 114              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
 115              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
 116              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
 117              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
 118              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
 119              	  .equ FORTH_CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
 120              	  .equ USER_CTOP_OFS, FORTH_CTOP_OFS+4  // ram free dictionary address
 121              	  .equ LASTN_OFS, USER_CTOP_OFS+4     // last word in dictionary link nfa 
 122              	  .equ VARS_END_OFS, LASTN_OFS+4 // end of system variables  
 123              	  
 124              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
 125              	  .equ RX_QUEUE_OFS, VARS_END_OFS+4 // rx queue 
 126              	  .equ RX_HEAD_OFS, RX_QUEUE_OFS+RX_QUEUE_SIZE // queue head indice 
 127              	  .equ RX_TAIL_OFS, RX_HEAD_OFS+4 // queue tail indice 
 128              	
 129              	
 130              	/***********************************************
 131              	* MACROS
 132              	*	Assemble inline direct threaded code ending.
 133              	***********************************************/
 134              		.macro _CALL fn /* low level routine call */ 
 135              	 	PUSH {LR}
 136              		BL \fn  
 137              		POP {LR}
 138              		.endm
 139              		
 140              		.macro _MOV32 R V 
 141              		MOV \R, #\V&0xffff
 142              		MOVT \R, #\V>>16
 143              		.endm
ARM GAS  stm32eforth.s 			page 6


 144              	
 145              		.macro	_NEXT /*end low level word */
 146              		BX	LR
 147              		.endm
 148              	
 149              	 	.macro	_NEST /*start high level word */
 150              		STMFD	R2!,{LR}
 151              		.endm
 152              	
 153              	 	.macro	_UNNEST	/*end high level word */
 154              		LDMFD	R2!,{PC}
 155              		.endm
 156              	
 157              	 	.macro	_DOLIT  value /*long literals */
 158              		BL	DOLIT
 159              		.word \value 
 160              		.endm
 161              	
 162              	 	.macro	_PUSH	/*push R5 on data stack*/
 163              		STR	R5,[R1,#-4]!
 164              		.endm
 165              	
 166              	 	.macro	_POP /*pop data stack to R5 */
 167              		LDR	R5,[R1],#4
 168              		.endm
 169              	
 170              		.macro _HEADER  label, nlen, name
 171              			.section .inflash.dictinary 
 172              		LF_\label:   // link field
 173              			.word link 
 174              			.equ link , . 
 175              		_\label: .byte \nlen    // name field
 176              			.ascii "\name"
 177              			.p2align 2 
 178              		CA_\label:   // code field address 
 179              			.word \label + MAPOFFSET 
 180              			.section .text, "ax", %progbits 
 181              			.p2align 2 
 182              		\label:  // code address in .section .text 
 183              		.endm 
 184              	
 185              		.equ link, 0
 186              	
 187              	
 188              	/*************************************
 189              	*   interrupt service vectors table 
 190              	**************************************/
 191              	   .section  .isr_vector,"a",%progbits
 192              	  .type  isr_vectors, %object
 193              	
 194              	isr_vectors:
 195 0000 00000000 	  .word   _mstack          /* main return stack address */
 196 0004 00000000 	  .word   reset_handler    /* startup address */
 197              	/* core interrupts || exceptions */
 198 0008 00000000 	  .word   default_handler  /*  NMI */
 199 000c 00000000 	  .word   default_handler  /*  HardFault */
 200 0010 00000000 	  .word   default_handler  /*  Memory Management */
ARM GAS  stm32eforth.s 			page 7


 201 0014 00000000 	  .word   default_handler  /* Bus fault */
 202 0018 00000000 	  .word   default_handler  /* Usage fault */
 203 001c 00000000 	  .word   0
 204 0020 00000000 	  .word   0
 205 0024 00000000 	  .word   0
 206 0028 00000000 	  .word   0
 207 002c 00000000 	  .word   default_handler  /* SWI instruction */
 208 0030 00000000 	  .word   default_handler  /* Debug monitor */
 209 0034 00000000 	  .word   0
 210 0038 00000000 	  .word   default_handler  /* PendSV */
 211 003c 00000000 	  .word   systick_handler  /* Systick */
 212              	  
 213              	  /* External Interrupts */
 214 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 215 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 216 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 217 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 218 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 219 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 220 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 221 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 222 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 223 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 224 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 225 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 226 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 227 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 228 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 229 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 230 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 231 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 232 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 233 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 234 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 235 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 236 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 237 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 238 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 239 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 240 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 241 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 242 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 243 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 244 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 245 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 246 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 247 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 248 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 249 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 250 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 251 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
 252 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 253 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 254 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 255 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 256 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 257 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
ARM GAS  stm32eforth.s 			page 8


 258 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 259 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 260 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 261 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 262 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 263 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 264 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 265 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 266 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 267 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 268 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 269 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 270 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 271 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 272 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 273 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 274              	isr_end:
 275              	  .size  isr_vectors, .-isr_vectors
 276              	
 277              	/*****************************************************
 278              	* default isr handler called on unexpected interrupt
 279              	*****************************************************/
 280              	   .section  .inflash, "ax", %progbits 
 281              	   
 282              	  .type default_handler, %function
 283              	  .p2align 2 
 284              	  .global default_handler
 285              	default_handler:
 286 0000 014D     		ldr r5,exception_msg 
 287 0002 00F04FF8 		bl uart_puts 
 288 0006 39E0     		b reset_mcu    
 289              	  .size  default_handler, .-default_handler
 290              	exception_msg:
 291 0008 0C000000 		.word .+4 
 292 000c 12       		.byte 18
 293 000d 0A0D6578 		.ascii "\n\rexeption reboot!"
 293      65707469 
 293      6F6E2072 
 293      65626F6F 
 293      7421
 294 001f 00       		.p2align 2
 295              	
 296              	/*********************************
 297              		system milliseconds counter
 298              	*********************************/	
 299              	  .type systick_handler, %function
 300              	  .p2align 2 
 301              	  .global systick_handler
 302              	systick_handler:
 303 0020 4FF49873 	  _MOV32 r3,UPP
 303      C2F20003 
 304 0028 9868     	  ldr r0,[r3,#TICKS_OFS]  
 305 002a 00F10100 	  add r0,#1
 306 002e 9860     	  str r0,[r3,#TICKS_OFS]
 307 0030 D868     	  ldr r0,[r3,#TIMER_OFS]
 308 0032 10B1     	  cbz r0, systick_exit
 309 0034 A0F10100 	  sub r0,#1
ARM GAS  stm32eforth.s 			page 9


 310 0038 D860     	  str r0,[r3,#TIMER_OFS]
 311              	systick_exit:
 312 003a 7047     	  bx lr
 313              	
 314              	
 315              	
 316              	/**************************
 317              		UART RX handler
 318              	**************************/
 319              		.p2align 2
 320              		.type uart_rx_handler, %function
 321              	uart_rx_handler:
 322 003c 2DE9D002 		push {r4,r6,r7,r9}
 323 0040 4FF46054 		_MOV32 r4,UART 
 323      C4F20104 
 324 0048 2668     		ldr r6,[r4,#USART_SR]
 325 004a D4F80490 		ldr r9,[r4,#USART_DR]
 326 004e 16F0200F 		tst r6,#(1<<5) // RXNE 
 327 0052 0DD0     		beq 2f // no char received 
 328 0054 B9F1030F 		cmp r9,#3
 329 0058 0DD0     		beq user_reboot // received CTRL-C then reboot MCU 
 330 005a 03F15007 		add r7,r3,#RX_QUEUE_OFS
 331 005e 5C6E     		ldr r4,[r3,#RX_TAIL_OFS]
 332 0060 2744     		add r7,r7,r4 
 333 0062 87F80090 		strb r9,[r7]
 334 0066 04F10104 		add r4,#1 
 335 006a 04F00F04 		and r4,#(RX_QUEUE_SIZE-1)
 336 006e 5C66     		str r4,[r3,#RX_TAIL_OFS]
 337              	2:	
 338 0070 BDE8D002 		pop {r4,r6,r7,r9}
 339 0074 7047     		bx lr 
 340              	
 341              	user_reboot:
 342 0076 064D     		ldr r5,user_reboot_msg
 343 0078 00F014F8 		bl uart_puts 
 344              	reset_mcu: 
 345 007c 0348     		ldr r0,scb_adr 
 346 007e C168     		ldr r1,[r0,#SCB_AIRCR]
 347 0080 41F00401 		orr r1,#(1<<2)
 348 0084 C0F2FA51 		movt r1,#SCB_VECTKEY
 349 0088 C160     		str r1,[r0,#SCB_AIRCR]
 350 008a FEE7     		b . 
 351              		.p2align 2 
 352              	scb_adr:
 353 008c 00ED00E0 		.word SCB_BASE_ADR 
 354              	user_reboot_msg:
 355 0090 94000000 		.word .+4
 356 0094 0D       		.byte 13 
 357 0095 0D757365 		.ascii "\ruser reboot!"
 357      72207265 
 357      626F6F74 
 357      21
 358 00a2 00BF     		.p2align 2 
 359              	
 360              	// send counted string to uart 
 361              	// input: r5 string* 
 362              		.type uart_puts,%function 
ARM GAS  stm32eforth.s 			page 10


 363              	uart_puts:
 364 00a4 4FF46050 		_MOV32 r0,UART 
 364      C4F20100 
 365 00ac 15F8011B 		ldrb r1,[r5],#1 // string length
 366 00b0 0940     		ands r1,r1
 367 00b2 0CD0     	1:	beq 9f 
 368 00b4 0268     	2:  ldr r2,[r0,#USART_SR]
 369 00b6 12F08002 		ands r2,#0x80 
 370 00ba FBD0     		beq 2b 	
 371 00bc 15F8012B 		ldrb r2,[r5],#1
 372 00c0 0271     		strb r2,[r0,#USART_DR]
 373 00c2 0139     		subs r1,r1,#1 
 374 00c4 F6D1     		bne 2b 
 375 00c6 0268     	3:	ldr r2,[r0,#USART_SR]
 376 00c8 12F04002 		ands r2,#(1<<6)
 377 00cc FBD0     		beq 3b 
 378 00ce 7047     	9:  bx lr 
 379              	
 380              	
 381              	/**************************************
 382              	  reset_handler execute at MCU reset
 383              	***************************************/
 384              	  .type  reset_handler, %function
 385              	  .p2align 2 
 386              	  .global reset_handler
 387              	reset_handler:
 388 00d0 00F08FF8 		bl	remap 
 389 00d4 00F01CF8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 390 00d8 00F06AF8 		bl  uart_init
 391              	//	bl	UNLOCK			/* unlock flash memory */
 392 00dc 00F008F8 		bl forth_init 
 393 00e0 0248     		ldr r0,forth_entry
 394 00e2 40F00100 		orr r0,#1
 395 00e6 8047     		blx r0
 396 00e8 FFF7FEBF 		b.w .  
 397              		.p2align 2 
 398              	forth_entry:
 399 00ec AC1F0018 		.word COLD+MAPOFFSET 
 400              	
 401              		.type forth_init, %function 
 402              	forth_init:
 403 00f0 4FF49873 		_MOV32 r3,UPP 
 403      C2F20003 
 404 00f8 4FF49D41 		_MOV32 R1,SPP
 404      C2F20001 
 405 0100 4FF49F42 		_MOV32 R2,RPP
 405      C2F20002 
 406 0108 85EA0505 		EOR R5,R5  
 407 010c 7047     		BX LR 
 408              	
 409              	  .type init_devices, %function
 410 010e 00BF     	  .p2align 2 
 411              	init_devices:
 412              	/* init clock to HSE 72 Mhz */
 413              	/* set 2 wait states in FLASH_ACR_LATENCY */
 414 0110 4FF40050 	  _MOV32 R0,FLASH_BASE_ADR 
 414      C4F20200 
ARM GAS  stm32eforth.s 			page 11


 415 0118 4FF01202 	  mov r2,#0x12
 416 011c 0260     	  str r2,[r0,#FLASH_ACR]
 417              	/* configure clock for HSE, 8 Mhz crystal */
 418              	/* enable HSE in RCC_CR */
 419 011e 4FF48050 	  _MOV32 R0,RCC_BASE_ADR 
 419      C4F20200 
 420 0126 0168     	  ldr r1,[r0,#RCC_CR]
 421 0128 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 422 012c 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 423              	/* wait HSERDY loop */
 424              	wait_hserdy:
 425 012e 0168     	  ldr r1,[r0,#RCC_CR]
 426 0130 11F4003F 	  tst r1,#(1<<17)
 427 0134 FBD0     	  beq wait_hserdy
 428              	
 429              	/************************************************* 
 430              	   configure PLL mul factor and source 
 431              	   SYSCLOCK=72 Mhz
 432              	   select HSE as  PLL source clock
 433              	   multiply frequency by 9 
 434              	   APB1 clock is limited to 36 Mhz so divide by 2 
 435              	****************************************************/
 436 0136 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 437 013a C0F21D01 	  movt r1,#(7<<2)|1
 438 013e 4160     	  str r1,[r0,#RCC_CFGR]
 439              	  /* enable PLL */
 440 0140 0168     	  ldr r1,[r0,#RCC_CR]
 441 0142 41F08071 	  orr r1, #1<<24 
 442 0146 0160     	  str r1,[r0,#RCC_CR]
 443              	/* wait for PLLRDY */
 444              	wait_pllrdy:
 445 0148 0168     	  ldr r1,[r0,#RCC_CR]
 446 014a 11F0007F 	  tst r1,#(1<<25)
 447 014e FBD0     	  beq wait_pllrdy 
 448              	/* select PLL as sysclock */
 449 0150 4168     	  ldr r1,[r0,#RCC_CFGR]
 450 0152 4FF6FC72 	  _MOV32 r2,0xfffffffc
 450      CFF6FF72 
 451 015a 01EA0201 	  and r1,r1,r2 
 452 015e 4FF00202 	  mov r2,#2
 453 0162 41EA0201 	  orr r1,r1,r2
 454 0166 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 455              	/* wait for SWS==2 */
 456              	wait_sws:
 457 0168 4168     	  ldr r1,[r0,#RCC_CFGR]
 458 016a 11F0080F 	  tst r1,#(2<<2)
 459 016e FBD0     	  beq wait_sws
 460              	/* now sysclock is 72 Mhz */
 461              	
 462              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 463 0170 4FF48050 	  _MOV32 r0,RCC_BASE_ADR
 463      C4F20200 
 464 0178 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 465 017c 8161     	  str	r1, [r0, #RCC_APB2ENR]
 466              	
 467              	/* configure GPIOC:13 as output for user LED */
 468 017e 4FF48050 	  _MOV32 r0,GPIOC_BASE_ADR 
ARM GAS  stm32eforth.s 			page 12


 468      C4F20100 
 469 0186 4168     	  ldr r1,[r0,#GPIO_CRH]
 470 0188 6FF47002 	  mvn r2,#(15<<20)
 471 018c 01EA0201 	  and r1,r1,r2
 472 0190 4FF4C002 	  mov r2,#(6<<20)
 473 0194 41EA0201 	  orr r1,r1,r2
 474 0198 4160     	  str r1,[r0,#GPIO_CRH]
 475              	
 476              	/* configure systicks for 1msec ticks */
 477 019a 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 477      CEF20000 
 478 01a2 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 479 01a6 4160     	  str r1,[r0,#STK_LOAD]
 480 01a8 4FF00301 	  mov r1,#3
 481 01ac 0160     	  str r1,[r0,STK_CTL]
 482 01ae 7047     	  _NEXT  
 483              	
 484              	/*******************************
 485              	  initialize UART peripheral 
 486              	********************************/
 487              		.type uart_init, %function
 488              	uart_init:
 489              	/* set GPIOA PIN 9, uart TX  */
 490 01b0 4FF40060 	  _MOV32 r0,GPIOA_BASE_ADR
 490      C4F20100 
 491 01b8 4168     	  ldr r1,[r0,#GPIO_CRH]
 492 01ba 6FF0F002 	  mvn r2,#(15<<4)
 493 01be 01EA0201 	  and r1,r1,r2
 494 01c2 4FF0A002 	  mov r2,#(0xA<<4)
 495 01c6 41EA0201 	  orr r1,r1,r2 
 496 01ca 4160     	  str r1,[r0,#GPIO_CRH]
 497 01cc 4FF46050 	  _MOV32 r0,UART 
 497      C4F20100 
 498              	/* BAUD rate */
 499 01d4 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 500 01d8 8160     	  str r1,[r0,#USART_BRR]
 501 01da 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 502 01de C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 503              	/* enable interrupt in NVIC */
 504 01e0 4FF46140 	  _MOV32 r0,NVIC_BASE_ADR
 504      CEF20000 
 505 01e8 4168     	  ldr r1,[r0,#NVIC_ISER1]
 506 01ea 41F02001 	  orr r1,#32   
 507 01ee 4160     	  str r1,[r0,#NVIC_ISER1]
 508 01f0 7047     	  bx lr 
 509              	
 510              	/* copy system to RAM */ 
 511              		.type remap, %function 
 512              	
 513              	remap:
 514              	// tranfert isr_vector to RAM at 0x20000000
 515 01f2 4FF00000 		_MOV32 r0,RAM_ADR
 515      C2F20000 
 516 01fa 81EA0101 		eor r1,r1
 517 01fe 4FF49872 		mov r2,#(isr_end-isr_vectors) 
 518 0202 51F8043B 	1:	ldr r3,[r1],#4
 519 0206 40F8043B 		str r3,[r0],#4
ARM GAS  stm32eforth.s 			page 13


 520 020a 043A     		subs r2,#4
 521 020c F9D1     		bne 1b
 522              	// set new vector table address
 523 020e 4FF46D40 		_MOV32 r0,SCB_BASE_ADR
 523      CEF20000 
 524 0216 4FF00001 		_MOV32 r1,RAM_ADR 
 524      C2F20001 
 525 021e 8160     		str r1,[r0,#SCB_VTOR]
 526              	// copy system variable and code 	
 527 0220 DFF83400 		ldr r0,remap_dest
 528 0224 0B49     		ldr r1,remap_src 
 529 0226 42F21802 		mov r2,#CTOP-UZERO 
 530 022a 02F10302 		add r2,r2,#3
 531 022e 22F00302 		and r2,r2,#~3 
 532 0232 51F8043B 	1:	ldr r3,[r1],#4 
 533 0236 40F8043B 		str r3,[r0],#4 
 534 023a 043A     		subs R2,#4 
 535 023c F9D1     		bne 1b
 536              	// zero end of RAM 
 537 023e 4FF4A042 		_MOV32 r2,RAM_END 
 537      C2F20002 
 538 0246 83EA0303 		eor r3,r3,r3 
 539 024a 40F8043B 	2:  str r3,[r0],#4
 540 024e 9042     		cmp r0,r2 
 541 0250 FBDB     		blt 2b 
 542 0252 7047     		_NEXT 
 543              	remap_src:
 544 0254 00000000 		.word UZERO 
 545              	remap_dest:
 546 0258 30010020 		.word RAMOFFSET 
 547              	
 548              	/********************
 549              	* Version control
 550              	*******************/
 551              	.equ VER ,	0x01	/*major release version */
 552              	.equ EXT ,	0x00	/*minor extension */
 553              	
 554              	/* Constants */
 555              	
 556              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 557              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 558              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 559              	
 560              	.equ CELLL ,	4	/*size of a cell */
 561              	.equ BASEE ,	10	/*default radix */
 562              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 563              	
 564              	.equ BKSPP ,	8	/*backspace */
 565              	.equ LF ,	10	  /*line feed */
 566              	.equ CRR ,	13	/*carriage return */
 567              	.equ ERR ,	27	/*error escape */
 568              	.equ TIC ,	39	/*tick */
 569              	
 570              	/********************************************************
 571              	* RAM memory mapping
 572              	* 	0x20000000	RAM base address
 573              	*	0x20000000  system variables	
ARM GAS  stm32eforth.s 			page 14


 574              	* 	0x20000100	Forth dictionary
 575              	* 	0x2000????	top of dictionary, HERE
 576              	* 	0x2000????	WORD buffer, HERE+16
 577              	*   0x20004E00  end of user space
 578              	* 	0x20004E80	top of data stack  R2
 579              	* 	0x20004E80	TIB terminal input buffer
 580              	* 	0x20004F80	top of return stack  R1
 581              	* 	0x20005000	top of hardware stack for interrupts R14
 582              	********************************************************/
 583              	
 584              	
 585              	/******************************************************
 586              	*  COLD start moves the following to USER variables.
 587              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 588              	******************************************************/
 589              		.section  .text, "ax" ,%progbits 
 590              		.p2align 2
 591              	
 592              	UZERO:
 593 0000 00000000 		.word 0  			/*Reserved */
 594 0004 55AA0000 		.word 0xaa55 /* SEED  */ 
 595 0008 00000000 		.word 0      /* MSEC */
 596 000c 00000000 	    .word 0     /* TIMER */
 597 0010 FFFFFFFF 		.word -1    /* >RAM */ 
 598 0014 494D4147 		.ascii "IMAG" /* signature */ 
 599 0018 501F0018 		.word HI+MAPOFFSET  /*'BOOT */
 600 001c 0A000000 		.word BASEE 	/*BASE */
 601 0020 00000000 		.word 0			/*tmp */
 602 0024 00000000 		.word 0			/*SPAN */
 603 0028 00000000 		.word 0			/*>IN */
 604 002c 00000000 		.word 0			/*#TIB */
 605 0030 804E0020 		.word TIBB	/*TIB */
 606 0034 08110018 		.word INTER+MAPOFFSET	/*'EVAL */
 607 0038 00000000 		.word 0			/*HLD */
 608 003c 880B0000 		.word _LASTN	/*CONTEXT */
 609 0040 18200000 		.word CTOP  	/* FCP end of system dictionnary */
 610 0044 18200018 		.word CTOP+MAPOFFSET	/* CP end of RAM dictionary RAM */
 611 0048 880B0000 		.word _LASTN	/*LAST word in dictionary */
 612 004c 00000000 		.word 0,0			/*reserved */
 612      00000000 
 613              	ULAST:
 614 0054 00000000 		.space  RX_QUEUE_SIZE+8 /* space reserved for rx_queue,head and tail pointer.
 614      00000000 
 614      00000000 
 614      00000000 
 614      00000000 
 615              	
 616              	
 617              	/***********************************
 618              	//  Start of Forth dictionary
 619              	***********************************/
 620              	
 621 006c AFF30080 		.p2align 4
 622              	
 623              	// RANDOM ( n1 -- {0..n1-1} )
 624              	// return pseudo random number 
 625              	// REF: https://en.wikipedia.org/wiki/Xorshift
ARM GAS  stm32eforth.s 			page 15


 626              	
 627              		_HEADER RAND,6,RANDOM 
 628 0070 42F804ED 		_NEST 
 629 0074 00F0D2F9 		bl SEED 
 630 0078 00F096F8 		bl AT 
 631 007c 4FEA4534 		lsl r4,r5,#13
 632 0080 85EA0405 		eor r5,r4
 633 0084 4FEA5544 		lsr r4,r5,#17
 634 0088 85EA0405 		eor r5,r4
 635 008c 4FEA4514 		lsl r4,r5,#5
 636 0090 85EA0405 		eor r5,r4
 637 0094 00F0AAF8 		bl DUPP 
 638 0098 00F0C0F9 		bl SEED 
 639 009c 00F07EF8 		bl STORE 
 640 00a0 00F050F9 		bl ABSS
 641 00a4 00F0A6F8 		bl SWAP 
 642 00a8 00F094FA 		bl MODD 
 643 00ac 52F804FB 		_UNNEST 
 644              	
 645              	// PAUSE ( u -- ) 
 646              	// suspend execution for u milliseconds
 647              		_HEADER PAUSE,5,PAUSE 
 648 00b0 42F804ED 		_NEST 
 649 00b4 00F0BEF9 		BL TIMER 
 650 00b8 00F070F8 		BL STORE 
 651              	PAUSE_LOOP:
 652 00bc 00F0BAF9 		BL TIMER 
 653 00c0 00F072F8 		BL AT 
 654 00c4 00F056F8 		BL QBRAN 
 655 00c8 D4000000 		.word PAUSE_EXIT 
 656 00cc 00F05EF8 		BL BRAN 
 657 00d0 BC000000 		.word PAUSE_LOOP 
 658              	PAUSE_EXIT: 		
 659 00d4 52F804FB 		_UNNEST 
 660              	
 661              	//  ULED ( T|F -- )
 662              	// control user LED, -1 ON, 0 OFF  
 663              		_HEADER ULED,4,ULED
 664 00d8 4FF40056 		mov r6,#(1<<LED_PIN)
 665 00dc 4FF48054 		_MOV32 r4,LED_GPIO 
 665      C4F20104 
 666 00e4 2800     		movs r0,r5 
 667 00e6 51F8045B 		_POP
 668 00ea 01D0     		beq ULED_OFF 
 669 00ec 6661     		str r6,[r4,#GPIO_BRR]
 670 00ee 7047     		_NEXT 
 671              	ULED_OFF:
 672 00f0 2661     		str r6,[r4,#GPIO_BSRR]
 673 00f2 7047     		_NEXT 
 674              		
 675              	//    ?RX	 ( -- c T | F )
 676              	// 	Return input character and true, or a false if no input.
 677              		_HEADER QRX,4,"?KEY"
 678              	QKEY: 
 679 00f4 41F8045D 		_PUSH
 680 00f8 5F6E     		ldr r7,[r3,#RX_TAIL_OFS] 
 681 00fa 1E6E     		ldr r6,[r3,#RX_HEAD_OFS]
ARM GAS  stm32eforth.s 			page 16


 682 00fc 96EA0705 		eors r5,r6,r7 
 683 0100 0CD0     		beq 1f
 684 0102 03F15007 		add r7,r3,#RX_QUEUE_OFS 
 685 0106 3744     		add r7,r6 
 686 0108 3D78     		ldrb r5,[r7]
 687 010a 06F10106 		add r6,#1 
 688 010e 06F00F06 		and r6,#(RX_QUEUE_SIZE-1)
 689 0112 1E66     		str r6,[R3,#RX_HEAD_OFS]
 690 0114 41F8045D 		_PUSH 
 691 0118 4FF0FF35 		mov r5,#-1
 692 011c 7047     	1:	_NEXT 
 693 011e 00BF     		.p2align 2 
 694              	
 695              	//    TX!	 ( c -- )
 696              	// 	Send character c to the output device.
 697              		_HEADER EMIT,4,EMIT
 698              	TECHO:
 699 0120 4FF46054 		_MOV32 r4,UART 
 699      C4F20104 
 700 0128 2668     	1:	ldr	r6, [r4, #USART_SR]	
 701 012a 16F08006 		ands	r6, #0x80		//  TXE bit 
 702 012e FBD0     		beq	1b
 703 0130 2571     		strb	r5, [r4, #USART_DR]	
 704 0132 51F8045B 		_POP
 705 0136 7047     		_NEXT 
 706              		
 707              	// **************************************************************************
 708              	//  The kernel
 709              	
 710              	//    NOP	( -- )
 711              	// 	do nothing.
 712              		_HEADER NOP,3,NOP 
 713 0138 7047     		_NEXT
 714              	 
 715              	
 716              	//    doLIT	( -- w )
 717              	// 	Push an inline literal.
 718              	
 719              	// 	.word	_NOP+MAPOFFSET
 720              	// _LIT	.byte   COMPO+5
 721              	// 	.ascii "doLIT"
 722              	// 	.p2align 2 	
 723              	DOLIT:
 724 013a 41F8045D 		_PUSH				//  store R5 on data stack
 725 013e 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 726 0142 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 727 0146 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 728 014a 7047     		_NEXT
 729              	
 730              	//    EXECUTE	( ca -- )
 731              	// 	Execute the word at ca.
 732              		_HEADER EXECU,7,EXECUTE 
 733 014c 45F00104 		ORR	R4,R5,#1		//  b0=1 
 734 0150 51F8045B 		_POP
 735 0154 2047     		BX	R4
 736              	
 737              	//    next	( -- ) counter on R:
ARM GAS  stm32eforth.s 			page 17


 738              	// 	Run time code for the single index loop.
 739              	// 	: next ( -- ) \ hilevel model
 740              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 741              	
 742              	// 	.word	_EXECU+MAPOFFSET
 743              	// _DONXT	.byte   COMPO+4
 744              	// 	.ascii "next"
 745              	// 	.p2align 2 	
 746              	DONXT:
 747 0156 1468     		LDR	R4,[R2]   // ( -- u )  
 748 0158 24B9     		CBNZ R4,NEXT1 
 749              		/* loop done */
 750 015a 02F10402 		ADD	R2,R2,#4 // drop counter 
 751 015e 0EF1040E 		ADD	LR,LR,#4 // skip after loop address 
 752 0162 7047     		_NEXT
 753              	NEXT1:
 754              		/* decrement loop counter */
 755 0164 A4F10104 		SUB	R4,R4,#1
 756 0168 1460     		STR	R4,[R2]
 757 016a 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 758 016e 4EF0010E 		ORR	LR,LR,#1 // begining of loop
 759 0172 7047     		_NEXT
 760              	
 761              	//    ?branch	( f -- )
 762              	// 	Branch if flag is zero.
 763              	
 764              	// 	.word	_DONXT+MAPOFFSET
 765              	// _QBRAN	.byte   COMPO+7
 766              	// 	.ascii "?branch"
 767              	// 	.p2align 2 	
 768              	QBRAN:
 769 0174 2C00     		MOVS	R4,R5
 770 0176 51F8045B 		_POP
 771 017a 04D1     		BNE	QBRAN1
 772 017c 5EF801EC 		LDR	LR,[LR,#-1]
 773 0180 4EF0010E 		ORR LR,LR,#1
 774 0184 7047     		_NEXT
 775              	QBRAN1:
 776 0186 0EF1040E 	 	ADD	LR,LR,#4
 777 018a 7047     		_NEXT
 778              	
 779              	//    branch	( -- )
 780              	// 	Branch to an inline address.
 781              	
 782              	// 	.word	_QBRAN+MAPOFFSET
 783              	// _BRAN	.byte   COMPO+6
 784              	// 	.ascii "branch"
 785              	// 	.p2align 2 	
 786              	BRAN:
 787 018c 5EF801EC 		LDR	LR,[LR,#-1]
 788 0190 4EF0010E 		ORR	LR,LR,#1
 789 0194 7047     		_NEXT
 790              	
 791              	//    EXIT	(  -- )
 792              	// 	Exit the currently executing command.
 793 0196 00BF     		_HEADER EXIT,4,EXIT 
 794 0198 52F804FB 		_UNNEST 
ARM GAS  stm32eforth.s 			page 18


 795              	
 796              	//    !	   ( w a -- )
 797              	// 	Pop the data stack to memory.
 798              		_HEADER STORE,1,"!"
 799 019c 51F8044B 		LDR	R4,[R1],#4
 800 01a0 2C60     		STR	R4,[R5]
 801 01a2 51F8045B 		_POP
 802 01a6 7047     		_NEXT
 803              	
 804              	//    @	   ( a -- w )
 805              	// 	Push memory location to the data stack.
 806              		_HEADER AT,1,"@"
 807 01a8 2D68     		LDR	R5,[R5]
 808 01aa 7047     		_NEXT
 809              	
 810              	//    C!	  ( c b -- )
 811              	// 	Pop the data stack to byte memory.
 812              		_HEADER CSTOR,2,"C!"
 813 01ac 51F8044B 		LDR	R4,[R1],#4
 814 01b0 2C70     		STRB	R4,[R5]
 815 01b2 51F8045B 		_POP
 816 01b6 7047     		_NEXT
 817              	
 818              	//    C@	  ( b -- c )
 819              	// 	Push byte memory location to the data stack.
 820              		_HEADER CAT,2,"C@"
 821 01b8 2D78     		LDRB	R5,[R5]
 822 01ba 7047     		_NEXT
 823              	
 824              	//    R>	  ( -- w )
 825              	// 	Pop the return stack to the data stack.
 826              		_HEADER RFROM,2,"R>"
 827 01bc 41F8045D 		_PUSH
 828 01c0 52F8045B 		LDR	R5,[R2],#4
 829 01c4 7047     		_NEXT
 830              	
 831              	//    R@	  ( -- w )
 832              	// 	Copy top of return stack to the data stack.
 833 01c6 00BF     		_HEADER RAT,2,"R@"
 834 01c8 41F8045D 		_PUSH
 835 01cc 1568     		LDR	R5,[R2]
 836 01ce 7047     		_NEXT
 837              	
 838              	//    >R	  ( w -- )
 839              	// 	Push the data stack to the return stack.
 840              		_HEADER TOR,2+COMPO,">R"
 841 01d0 42F8045D 		STR	R5,[R2,#-4]!
 842 01d4 51F8045B 		_POP
 843 01d8 7047     		_NEXT  
 844              	
 845              	//    SP@	 ( -- a )
 846              	// 	Push the current data stack pointer.
 847 01da 00BF     		_HEADER SPAT,3,"SP@"
 848 01dc 41F8045D 		_PUSH
 849 01e0 0D46     		MOV	R5,R1
 850 01e2 7047     		_NEXT
 851              	
ARM GAS  stm32eforth.s 			page 19


 852              	//    DROP	( w -- )
 853              	// 	Discard top stack item.
 854              		_HEADER DROP,4,DROP
 855 01e4 51F8045B 		_POP
 856 01e8 7047     		_NEXT
 857              	
 858              	//    DUP	 ( w -- w w )
 859              	// 	Duplicate the top stack item.
 860 01ea 00BF     		_HEADER DUPP,3,"DUP"
 861 01ec 41F8045D 		_PUSH
 862 01f0 7047     		_NEXT
 863              	
 864              	//    SWAP	( w1 w2 -- w2 w1 )
 865              	// 	Exchange top two stack items.
 866 01f2 00BF     		_HEADER SWAP,4,"SWAP"
 867 01f4 0C68     		LDR	R4,[R1]
 868 01f6 0D60     		STR	R5,[R1]
 869 01f8 2546     		MOV	R5,R4
 870 01fa 7047     		_NEXT
 871              	
 872              	//    OVER	( w1 w2 -- w1 w2 w1 )
 873              	// 	Copy second stack item to top.
 874              		_HEADER OVER,4,"OVER"
 875 01fc 41F8045D 		_PUSH
 876 0200 4D68     		LDR	R5,[R1,#4]
 877 0202 7047     		_NEXT
 878              	
 879              	//    0<	  ( n -- t )
 880              	// 	Return true if n is negative.
 881              		_HEADER ZLESS,2,"0<"
 882 0204 4FF00004 		MOV	R4,#0
 883 0208 04EB2505 		ADD	R5,R4,R5,ASR #32
 884 020c 7047     		_NEXT
 885              	
 886              	//    AND	 ( w w -- w )
 887              	// 	Bitwise AND.
 888 020e 00BF     		_HEADER ANDD,3,"AND"
 889 0210 51F8044B 		LDR	R4,[R1],#4
 890 0214 05EA0405 		AND	R5,R4
 891 0218 7047     		_NEXT
 892              	
 893              	//    OR	  ( w w -- w )
 894              	// 	Bitwise inclusive OR.
 895 021a 00BF     		_HEADER ORR,2,"OR"
 896 021c 51F8044B 		LDR	R4,[R1],#4
 897 0220 45EA0405 		ORR	R5,R4
 898 0224 7047     		_NEXT
 899              	
 900              	//    XOR	 ( w w -- w )
 901              	// 	Bitwise exclusive OR.
 902 0226 00BF     		_HEADER XORR,3,"XOR"
 903 0228 51F8044B 		LDR	R4,[R1],#4
 904 022c 85EA0405 		EOR	R5,R4
 905 0230 7047     		_NEXT
 906              	
 907              	//    UM+	 ( w w -- w cy )
 908              	// 	Add two numbers, return the sum and carry flag.
ARM GAS  stm32eforth.s 			page 20


 909 0232 00BF     		_HEADER UPLUS,3,"UM+"
 910 0234 0C68     		LDR	R4,[R1]
 911 0236 6419     		ADDS	R4,R4,R5
 912 0238 4FF00005 		MOV	R5,#0
 913 023c 45F10005 		ADC	R5,R5,#0
 914 0240 0C60     		STR	R4,[R1]
 915 0242 7047     		_NEXT
 916              	
 917              	//    RSHIFT	 ( w # -- w )
 918              	// 	arithmetic Right shift # bits.
 919              		_HEADER RSHIFT,6,"RSHIFT"
 920 0244 51F8044B 		LDR	R4,[R1],#4
 921 0248 44FA05F5 		MOV	R5,R4,ASR R5
 922 024c 7047     		_NEXT
 923              	
 924              	//    LSHIFT	 ( w # -- w )
 925              	// 	Right shift # bits.
 926 024e 00BF     		_HEADER LSHIFT,6,"LSHIFT"
 927 0250 51F8044B 		LDR	R4,[R1],#4
 928 0254 04FA05F5 		MOV	R5,R4,LSL R5
 929 0258 7047     		_NEXT
 930              	
 931              	//    +	 ( w w -- w )
 932              	// 	Add.
 933 025a 00BF     		_HEADER PLUS,1,"+"
 934 025c 51F8044B 		LDR	R4,[R1],#4
 935 0260 2544     		ADD	R5,R5,R4
 936 0262 7047     		_NEXT
 937              	
 938              	//    -	 ( w w -- w )
 939              	// 	Subtract.
 940              		_HEADER SUBB,1,"-"
 941 0264 51F8044B 		LDR	R4,[R1],#4
 942 0268 C5EB0405 		RSB	R5,R5,R4
 943 026c 7047     		_NEXT
 944              	
 945              	//    *	 ( w w -- w )
 946              	// 	Multiply.
 947 026e 00BF     		_HEADER STAR,1,"*"
 948 0270 51F8044B 		LDR	R4,[R1],#4
 949 0274 04FB05F5 		MUL	R5,R4,R5
 950 0278 7047     		_NEXT
 951              	
 952              	//    UM*	 ( w w -- ud )
 953              	// 	Unsigned multiply.
 954 027a 00BF     		_HEADER UMSTA,3,"UM*"
 955 027c 0C68     		LDR	R4,[R1]
 956 027e A5FB0467 		UMULL	R6,R7,R5,R4
 957 0282 0E60     		STR	R6,[R1]
 958 0284 3D46     		MOV	R5,R7
 959 0286 7047     		_NEXT
 960              	
 961              	//    M*	 ( w w -- d )
 962              	// 	signed multiply.
 963              		_HEADER MSTAR,2,"M*"
 964 0288 0C68     		LDR	R4,[R1]
 965 028a 85FB0467 		SMULL	R6,R7,R5,R4
ARM GAS  stm32eforth.s 			page 21


 966 028e 0E60     		STR	R6,[R1]
 967 0290 3D46     		MOV	R5,R7
 968 0292 7047     		_NEXT
 969              	
 970              	//    1+	 ( w -- w+1 )
 971              	// 	Add 1.
 972              		_HEADER ONEP,2,"1+"
 973 0294 05F10105 		ADD	R5,R5,#1
 974 0298 7047     		_NEXT
 975              	
 976              	//    1-	 ( w -- w-1 )
 977              	// 	Subtract 1.
 978 029a 00BF     		_HEADER ONEM,2,"1-"
 979 029c A5F10105 		SUB	R5,R5,#1
 980 02a0 7047     		_NEXT
 981              	
 982              	//    2+	 ( w -- w+2 )
 983              	// 	Add 1.
 984 02a2 00BF     		_HEADER TWOP,2,"2+"
 985 02a4 05F10205 		ADD	R5,R5,#2
 986 02a8 7047     		_NEXT
 987              	
 988              	//    2-	 ( w -- w-2 )
 989              	// 	Subtract 2.
 990 02aa 00BF     		_HEADER TWOM,2,"2-"
 991 02ac A5F10205 		SUB	R5,R5,#2
 992 02b0 7047     		_NEXT
 993              	
 994              	//    CELL+	( w -- w+4 )
 995              	// 	Add CELLL.
 996 02b2 00BF     		_HEADER CELLP,5,"CELL+"
 997 02b4 05F10405 		ADD	R5,R5,#CELLL
 998 02b8 7047     		_NEXT
 999              	
 1000              	//    CELL-	( w -- w-4 )
 1001              	// 	Subtract CELLL.
 1002 02ba 00BF     		_HEADER CELLM,5,"CELL-"
 1003 02bc A5F10405 		SUB	R5,R5,#CELLL
 1004 02c0 7047     		_NEXT
 1005              	 
 1006              	//    BL	( -- 32 )
 1007              	// 	Blank (ASCII space).
 1008 02c2 00BF     		_HEADER BLANK,2,"BL"
 1009 02c4 41F8045D 		_PUSH
 1010 02c8 4FF02005 		MOV	R5,#32
 1011 02cc 7047     		_NEXT
 1012              	
 1013              	//    CELLS	( w -- w*4 )
 1014              	// 	Multiply 4.
 1015 02ce 00BF     		_HEADER CELLS,5,"CELLS"
 1016 02d0 4FEA8505 		MOV	R5,R5,LSL#2
 1017 02d4 7047     		_NEXT
 1018              	
 1019              	//    CELL/	( w -- w/4 )
 1020              	// 	Divide by 4.
 1021 02d6 00BF     		_HEADER CELLSL,5,"CELL/"
 1022 02d8 4FEAA505 		MOV	R5,R5,ASR#2
ARM GAS  stm32eforth.s 			page 22


 1023 02dc 7047     		_NEXT
 1024              	
 1025              	//    2*	( w -- w*2 )
 1026              	// 	Multiply 2.
 1027 02de 00BF     		_HEADER TWOST,2,"2*"
 1028 02e0 4FEA4505 		MOV	R5,R5,LSL#1
 1029 02e4 7047     		_NEXT
 1030              	
 1031              	//    2/	( w -- w/2 )
 1032              	// 	Divide by 2.
 1033 02e6 00BF     		_HEADER TWOSL,2,"2/"
 1034 02e8 4FEA6505 		MOV	R5,R5,ASR#1
 1035 02ec 7047     		_NEXT
 1036              	
 1037              	//    ?DUP	( w -- w w | 0 )
 1038              	// 	Conditional duplicate.
 1039 02ee 00BF     		_HEADER QDUP,4,"?DUP"
 1040 02f0 2C00     		MOVS	R4,R5
 1041 02f2 18BF     		IT NE 
 1042 02f4 41F8045D 	    STRNE	R5,[R1,#-4]!
 1043 02f8 7047     		_NEXT
 1044              	
 1045              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1046              	// 	Rotate top 3 items.
 1047 02fa 00BF     		_HEADER ROT,3,"ROT"
 1048 02fc 0C68     		LDR	R4,[R1]  // r4=w2 
 1049 02fe 0D60     		STR	R5,[R1]  // w3 replace w2 
 1050 0300 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1051 0302 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1052 0304 7047     		_NEXT
 1053              	
 1054              	//    2DROP	( w1 w2 -- )
 1055              	// 	Drop top 2 items.
 1056 0306 00BF     		_HEADER DDROP,5,"2DROP"
 1057 0308 51F8045B 		_POP
 1058 030c 51F8045B 		_POP
 1059 0310 7047     		_NEXT
 1060              	
 1061              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1062              	// 	Duplicate top 2 items.
 1063 0312 00BF     		_HEADER DDUP,4,"2DUP"
 1064 0314 0C68     		LDR	R4,[R1] // r4=w1
 1065 0316 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1066 031a 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1067 031e 7047     		_NEXT
 1068              	
 1069              	//    D+	( d1 d2 -- d3 )
 1070              	// 	Add top 2 double numbers.
 1071              		_HEADER DPLUS,2,"D+"
 1072 0320 51F8044B 		LDR	R4,[R1],#4
 1073 0324 51F8046B 		LDR	R6,[R1],#4
 1074 0328 0F68     		LDR	R7,[R1]
 1075 032a E419     		ADDS	R4,R4,R7
 1076 032c 0C60     		STR	R4,[R1]
 1077 032e 45EB0605 		ADC	R5,R5,R6
 1078 0332 7047     		_NEXT
 1079              	
ARM GAS  stm32eforth.s 			page 23


 1080              	//    NOT	 ( w -- !w )
 1081              	// 	1"s complement.
 1082              		_HEADER INVER,3,"NOT"
 1083 0334 6FEA0505 		MVN	R5,R5
 1084 0338 7047     		_NEXT
 1085              	
 1086              	//    NEGATE	( w -- -w )
 1087              	// 	2's complement.
 1088 033a 00BF     		_HEADER NEGAT,6,"NEGATE"
 1089 033c C5F10005 		RSB	R5,R5,#0
 1090 0340 7047     		_NEXT
 1091              	
 1092              	//    ABS	 ( w -- |w| )
 1093              	// 	Absolute.
 1094 0342 00BF     		_HEADER ABSS,3,"ABS"
 1095 0344 15F0004F 		TST	R5,#0x80000000
 1096 0348 18BF     		IT NE
 1097 034a 6D42     	    RSBNE   R5,R5,#0
 1098 034c 7047     		_NEXT
 1099              	
 1100              	//  0= ( w -- f )
 1101              	// TOS==0?
 1102 034e 00BF     		_HEADER ZEQUAL,2,"0="
 1103 0350 15B9     		cbnz r5,1f
 1104 0352 4FF0FF35 		mov r5,#-1
 1105 0356 7047     		_NEXT 
 1106 0358 85EA0505 	1:  eor r5,r5,r5  
 1107 035c 7047     		_NEXT 	
 1108              	
 1109              	//    =	 ( w w -- t )
 1110              	// 	Equal?
 1111 035e 00BF     		_HEADER EQUAL,1,"="
 1112 0360 51F8044B 		LDR	R4,[R1],#4
 1113 0364 A542     		CMP	R5,R4
 1114 0366 0CBF     		ITE EQ 
 1115 0368 6FF00005 	    MVNEQ	R5,#0
 1116 036c 0025     		MOVNE	R5,#0
 1117 036e 7047     		_NEXT
 1118              	
 1119              	//    U<	 ( w w -- t )
 1120              	// 	Unsigned equal?
 1121              		_HEADER ULESS,2,"U<"
 1122 0370 51F8044B 		LDR	R4,[R1],#4
 1123 0374 AC42     		CMP	R4,R5
 1124 0376 34BF     		ITE CC 
 1125 0378 6FF00005 		MVNCC	R5,#0
 1126 037c 0025     		MOVCS	R5,#0
 1127 037e 7047     		_NEXT
 1128              	
 1129              	//    <	( w w -- t )
 1130              	// 	Less?
 1131              		_HEADER LESS,1,"<"
 1132 0380 51F8044B 		LDR	R4,[R1],#4
 1133 0384 AC42     		CMP	R4,R5
 1134 0386 B4BF     	    ITE LT
 1135 0388 6FF00005 		MVNLT	R5,#0
 1136 038c 0025     		MOVGE	R5,#0
ARM GAS  stm32eforth.s 			page 24


 1137 038e 7047     		_NEXT
 1138              	
 1139              	//    >	( w w -- t )
 1140              	// 	greater?
 1141              		_HEADER GREAT,1,">"
 1142 0390 51F8044B 		LDR	R4,[R1],#4
 1143 0394 AC42     		CMP	R4,R5
 1144 0396 CCBF     		ITE GT
 1145 0398 6FF00005 	    MVNGT	R5,#0
 1146 039c 0025     		MOVLE	R5,#0
 1147 039e 7047     		_NEXT
 1148              	
 1149              	//    MAX	 ( w w -- max )
 1150              	// 	Leave maximum.
 1151              		_HEADER MAX,3,"MAX"
 1152 03a0 51F8044B 		LDR	R4,[R1],#4
 1153 03a4 AC42     		CMP	R4,R5
 1154 03a6 C8BF     		IT GT 
 1155 03a8 2546     		MOVGT	R5,R4
 1156 03aa 7047     		_NEXT
 1157              	
 1158              	//    MIN	 ( w w -- min )
 1159              	// 	Leave minimum.
 1160              		_HEADER MIN,3,"MIN"
 1161 03ac 51F8044B 		LDR	R4,[R1],#4
 1162 03b0 AC42     		CMP	R4,R5
 1163 03b2 B8BF     		IT LT
 1164 03b4 2546     		MOVLT	R5,R4
 1165 03b6 7047     		_NEXT
 1166              	
 1167              	//    +!	 ( w a -- )
 1168              	// 	Add to memory.
 1169              		_HEADER PSTOR,2,"+!"
 1170 03b8 51F8044B 		LDR	R4,[R1],#4
 1171 03bc 2E68     		LDR	R6,[R5]
 1172 03be 2644     		ADD	R6,R6,R4
 1173 03c0 2E60     		STR	R6,[R5]
 1174 03c2 51F8045B 		_POP
 1175 03c6 7047     		_NEXT
 1176              	
 1177              	//    2!	 ( d a -- )
 1178              	// 	Store double number.
 1179              		_HEADER DSTOR,2,"2!"
 1180 03c8 51F8044B 		LDR	R4,[R1],#4
 1181 03cc 51F8046B 		LDR	R6,[R1],#4
 1182 03d0 45F8044B 		STR	R4,[R5],#4
 1183 03d4 2E60     		STR	R6,[R5]
 1184 03d6 51F8045B 		_POP
 1185 03da 7047     		_NEXT
 1186              	
 1187              	//    2@	 ( a -- d )
 1188              	// 	Fetch double number.
 1189              		_HEADER DAT,2,"2@"
 1190 03dc 6C68     		LDR	R4,[R5,#4]
 1191 03de 41F8044D 		STR	R4,[R1,#-4]!
 1192 03e2 2D68     		LDR	R5,[R5]
 1193 03e4 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 25


 1194              	
 1195              	//    COUNT	( b -- b+1 c )
 1196              	// 	Fetch length of string.
 1197 03e6 00BF     		_HEADER COUNT,5,"COUNT"
 1198 03e8 15F8014B 		LDRB	R4,[R5],#1
 1199 03ec 41F8045D 		_PUSH
 1200 03f0 2546     		MOV	R5,R4
 1201 03f2 7047     		_NEXT
 1202              	
 1203              	//    DNEGATE	( d -- -d )
 1204              	// 	Negate double number.
 1205              		_HEADER DNEGA,7,"DNEGATE"
 1206 03f4 0C68     		LDR	R4,[R1]
 1207 03f6 A6EB0606 		SUB	R6,R6,R6
 1208 03fa 341B     		SUBS R4,R6,R4
 1209 03fc 66EB0505 		SBC	R5,R6,R5
 1210 0400 0C60     		STR	R4,[R1]
 1211 0402 7047     		_NEXT
 1212              	
 1213              	// **************************************************************************
 1214              	//  System and user variables
 1215              	
 1216              	//    doVAR	( -- a )
 1217              	// 	Run time routine for VARIABLE and CREATE.
 1218              	
 1219              	// 	.word	_DNEGA+MAPOFFSET
 1220              	// _DOVAR	.byte  COMPO+5
 1221              	// 	.ascii "doVAR"
 1222              	// 	.p2align 2 	
 1223              	DOVAR:
 1224 0404 41F8045D 		_PUSH
 1225 0408 AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
 1226 040c 52F804FB 		_UNNEST
 1227              	
 1228              	//    doCON	( -- a ) 
 1229              	// 	Run time routine for CONSTANT.
 1230              	
 1231              	// 	.word	_DOVAR+MAPOFFSET
 1232              	// _DOCON	.byte  COMPO+5
 1233              	// 	.ascii "doCON"
 1234              	// 	.p2align 2 	
 1235              	DOCON:
 1236 0410 41F8045D 		_PUSH
 1237 0414 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1238 0418 52F804FB 		_UNNEST
 1239              	
 1240              	/***********************
 1241              	  system variables 
 1242              	***********************/
 1243              	
 1244              	 // SEED ( -- a)
 1245              	 // return PRNG seed address 
 1246              		_HEADER SEED,4,"SEED"
 1247 041c 41F8045D 		_PUSH 
 1248 0420 03F10405 		ADD R5,R3,#SEED_OFS
 1249 0424 7047     		_NEXT 	
 1250              	
ARM GAS  stm32eforth.s 			page 26


 1251              	//  MSEC ( -- a)
 1252              	// return address of milliseconds counter
 1253 0426 00BF     		_HEADER MSEC,4,"MSEC"
 1254 0428 41F8045D 	  _PUSH
 1255 042c 03F10805 	  ADD R5,R3,#TICKS_OFS
 1256 0430 7047     	  _NEXT 
 1257              	
 1258              	// TIMER ( -- a )
 1259              	// count down timer 
 1260 0432 00BF     		_HEADER TIMER,5,"TIMER"
 1261 0434 41F8045D 	  _PUSH 
 1262 0438 03F10C05 	  ADD R5,R3,#TIMER_OFS
 1263 043c 7047     	  _NEXT
 1264              	
 1265              	//    'BOOT	 ( -- a )
 1266              	// 	Application.
 1267 043e 00BF     		_HEADER TBOOT,5,"'BOOT"
 1268 0440 41F8045D 		_PUSH
 1269 0444 03F11805 		ADD	R5,R3,#BOOT_OFS 
 1270 0448 7047     		_NEXT
 1271              	
 1272              	//    BASE	( -- a )
 1273              	// 	Storage of the radix base for numeric I/O.
 1274 044a 00BF     		_HEADER BASE,4,"BASE"
 1275 044c 41F8045D 		_PUSH
 1276 0450 03F11C05 		ADD	R5,R3,#BASE_OFS
 1277 0454 7047     		_NEXT
 1278              	
 1279              	//    tmp	 ( -- a )
 1280              	// 	A temporary storage location used in parse and find.
 1281              	
 1282              	// 	.word	_BASE+MAPOFFSET
 1283              	// _TEMP	.byte   COMPO+3
 1284              	// 	.ascii "tmp"
 1285              	// 	.p2align 2 	
 1286              	TEMP:
 1287 0456 41F8045D 		_PUSH
 1288 045a 03F12005 		ADD	R5,R3,#TMP_OFS
 1289 045e 7047     		_NEXT
 1290              	
 1291              	//    SPAN	( -- a )
 1292              	// 	Hold character count received by EXPECT.
 1293              		_HEADER SPAN,4,"SPAN"
 1294 0460 41F8045D 		_PUSH
 1295 0464 03F12405 		ADD	R5,R3,#SPAN_OFS
 1296 0468 7047     		_NEXT
 1297              	
 1298              	//    >IN	 ( -- a )
 1299              	// 	Hold the character pointer while parsing input stream.
 1300 046a 00BF     		_HEADER INN,3,">IN"
 1301 046c 41F8045D 		_PUSH
 1302 0470 03F12805 		ADD	R5,R3,#TOIN_OFS
 1303 0474 7047     		_NEXT
 1304              	
 1305              	//    #TIB	( -- a )
 1306              	// 	Hold the current count and address of the terminal input buffer.
 1307 0476 00BF     		_HEADER NTIB,4,"#TIB"
ARM GAS  stm32eforth.s 			page 27


 1308 0478 41F8045D 		_PUSH
 1309 047c 03F12C05 		ADD	R5,R3,#NTIB_OFS
 1310 0480 7047     		_NEXT
 1311              	
 1312              	//    'EVAL	( -- a )
 1313              	// 	Execution vector of EVAL.
 1314 0482 00BF     		_HEADER TEVAL,5,"'EVAL"
 1315 0484 41F8045D 		_PUSH
 1316 0488 03F13405 		ADD	R5,R3,#EVAL_OFS
 1317 048c 7047     		_NEXT
 1318              	
 1319              	//    HLD	 ( -- a )
 1320              	// 	Hold a pointer in building a numeric output string.
 1321 048e 00BF     		_HEADER HLD,3,"HLD"
 1322 0490 41F8045D 		_PUSH
 1323 0494 03F13805 		ADD	R5,R3,#HLD_OFS
 1324 0498 7047     		_NEXT
 1325              	
 1326              	//    CONTEXT	( -- a )
 1327              	// 	A area to specify vocabulary search order.
 1328 049a 00BF     		_HEADER CNTXT,7,"CONTEXT"
 1329              	CRRNT:
 1330 049c 41F8045D 		_PUSH
 1331 04a0 03F13C05 		ADD	R5,R3,#CTXT_OFS
 1332 04a4 7047     		_NEXT
 1333              	
 1334              	//    CP	( -- a )
 1335              	// 	Point to top name in RAM vocabulary.
 1336 04a6 00BF     		_HEADER CPP,2,"CP"
 1337 04a8 41F8045D 		_PUSH
 1338 04ac 03F14405 		ADD	R5,R3,#USER_CTOP_OFS
 1339 04b0 7047     		_NEXT
 1340              	
 1341              	//   FCP ( -- a )
 1342              	//  Point ot top of Forth system dictionary
 1343 04b2 00BF     		_HEADER FCP,3,"FCP"
 1344 04b4 41F8045D 		_PUSH 
 1345 04b8 03F14005 		ADD R5,R3,#FORTH_CTOP_OFS 
 1346 04bc 7047     		_NEXT 
 1347              	
 1348              	//    LAST	( -- a )
 1349              	// 	Point to the last name in the name dictionary.
 1350 04be 00BF     		_HEADER LAST,4,"LAST"
 1351 04c0 41F8045D 		_PUSH
 1352 04c4 03F14805 		ADD	R5,R3,#LASTN_OFS
 1353 04c8 7047     		_NEXT
 1354              	
 1355              	/***********************
 1356              		system constants 
 1357              	***********************/
 1358              	
 1359              	//	USER_BEGIN ( -- a )
 1360              	//  where user area begin in RAM
 1361 04ca 00BF     		_HEADER USER_BEGIN,10,"USER_BEGIN"
 1362 04cc 41F8045D 		_PUSH 
 1363 04d0 004D     		ldr r5,USR_BGN_ADR 
 1364 04d2 7047     		_NEXT 
ARM GAS  stm32eforth.s 			page 28


 1365              	USR_BGN_ADR:
 1366 04d4 18200018 	.word CTOP+MAPOFFSET 
 1367              	
 1368              	//  USER_END ( -- a )
 1369              	//  where user area end in RAM 
 1370              		_HEADER USER_END,8,"USER_END"
 1371 04d8 41F8045D 		_PUSH 
 1372 04dc 4FF49C45 		_MOV32 R5,DEND 
 1372      C2F20005 
 1373 04e4 7047     		_NEXT 
 1374              	
 1375              	//  IMG_ADR ( -- a )
 1376              	//  where user image is saved in FLASH
 1377 04e6 00BF     		_HEADER IMG_ADR,7,"IMG_ADR"
 1378 04e8 41F8045D 		_PUSH
 1379 04ec 004D     		ldr r5,USR_IMG_ADR   
 1380 04ee 7047     		_NEXT 
 1381              	USR_IMG_ADR:
 1382 04f0 00000000 		.word USER_SPACE 
 1383              	
 1384              	//  IMG_SIGN ( -- a )
 1385              	// image signature 
 1386              		_HEADER IMG_SIGN,8,"IMG_SIGN"
 1387 04f4 41F8045D 		_PUSH 
 1388 04f8 03F11405 		ADD r5,r3,#IMG_SIGN_OFS 
 1389 04fc 7047     		_NEXT 
 1390              	
 1391              	/* *********************
 1392              	  Common functions
 1393              	***********************/
 1394              	
 1395              	//    WITHIN	( u ul uh -- t )
 1396              	// 	Return true if u is within the range of ul and uh.
 1397 04fe 00BF     		_HEADER WITHI,6,"WITHIN"
 1398 0500 42F804ED 		_NEST
 1399 0504 FFF77AFE 		BL	OVER
 1400 0508 FFF7ACFE 		BL	SUBB
 1401 050c FFF760FE 		BL	TOR
 1402 0510 FFF7A8FE 		BL	SUBB
 1403 0514 FFF752FE 		BL	RFROM
 1404 0518 FFF72AFF 		BL	ULESS
 1405 051c 52F804FB 		_UNNEST
 1406              	
 1407              	//  Divide
 1408              	
 1409              	//    UM/MOD	( udl udh u -- ur uq )
 1410              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1411              		_HEADER UMMOD,6,"UM/MOD"
 1412 0520 4FF00107 		MOV	R7,#1
 1413 0524 51F8044B 		LDR	R4,[R1],#4
 1414 0528 0E68     		LDR	R6,[R1]
 1415              	UMMOD0:
 1416 052a B619     		ADDS	R6,R6,R6
 1417 052c 6441     		ADCS	R4,R4,R4
 1418 052e 04D3     		BCC	UMMOD1
 1419 0530 A4EB0504 		SUB	R4,R4,R5
 1420 0534 06F10106 		ADD	R6,R6,#1
ARM GAS  stm32eforth.s 			page 29


 1421 0538 04E0     		B UMMOD2
 1422              	UMMOD1:
 1423 053a 641B     		SUBS	R4,R4,R5 
 1424 053c 28BF     		IT CS 
 1425 053e 0136     		ADDCS	R6,R6,#1
 1426 0540 00D2     		BCS	UMMOD2
 1427 0542 2C44     		ADD	R4,R4,R5
 1428              	UMMOD2:
 1429 0544 FF19     		ADDS	R7,R7,R7
 1430 0546 F0D3     		BCC	UMMOD0
 1431 0548 3546     		MOV	R5,R6
 1432 054a 0C60     		STR	R4,[R1]
 1433 054c 7047     		_NEXT
 1434              	
 1435              	//    M/MOD	( d n -- r q )
 1436              	// 	Signed floored divide of double by single. Return mod and quotient.
 1437 054e 00BF     		_HEADER MSMOD,5,"M/MOD"
 1438 0550 42F804ED 		_NEST
 1439 0554 FFF74AFE 		BL	DUPP
 1440 0558 FFF754FE 		BL	ZLESS
 1441 055c FFF746FE 		BL	DUPP
 1442 0560 FFF736FE 		BL	TOR
 1443 0564 FFF706FE 		BL	QBRAN
 1444 0568 7C050018 		.word	MMOD1+MAPOFFSET
 1445 056c FFF7E6FE 		BL	NEGAT
 1446 0570 FFF72EFE 		BL	TOR
 1447 0574 FFF73EFF 		BL	DNEGA
 1448 0578 FFF720FE 		BL	RFROM
 1449              	MMOD1:
 1450 057c FFF728FE 	  BL	TOR
 1451 0580 FFF734FE 		BL	DUPP
 1452 0584 FFF73EFE 		BL	ZLESS
 1453 0588 FFF7F4FD 		BL	QBRAN
 1454 058c 98050018 		.word	MMOD2+MAPOFFSET
 1455 0590 FFF71AFE 		BL	RAT
 1456 0594 FFF762FE 		BL	PLUS
 1457              	MMOD2:
 1458 0598 FFF710FE 	  BL	RFROM
 1459 059c FFF7C0FF 		BL	UMMOD
 1460 05a0 FFF70CFE 		BL	RFROM
 1461 05a4 FFF7E6FD 		BL	QBRAN
 1462 05a8 B8050018 		.word	MMOD3+MAPOFFSET
 1463 05ac FFF722FE 		BL	SWAP
 1464 05b0 FFF7C4FE 		BL	NEGAT
 1465 05b4 FFF71EFE 		BL	SWAP
 1466              	MMOD3:   
 1467 05b8 52F804FB 		_UNNEST
 1468              	
 1469              	//    /MOD	( n n -- r q )
 1470              	// 	Signed divide. Return mod and quotient.
 1471              		_HEADER SLMOD,4,"/MOD"
 1472 05bc 42F804ED 		_NEST
 1473 05c0 FFF71CFE 		BL	OVER
 1474 05c4 FFF71EFE 		BL	ZLESS
 1475 05c8 FFF714FE 		BL	SWAP
 1476 05cc FFF7C0FF 		BL	MSMOD
 1477 05d0 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 30


 1478              	
 1479              	//    MOD	 ( n n -- r )
 1480              	// 	Signed divide. Return mod only.
 1481              		_HEADER MODD,3,"MODD"
 1482 05d4 42F804ED 		_NEST
 1483 05d8 FFF7F0FF 		BL	SLMOD
 1484 05dc FFF702FE 		BL	DROP
 1485 05e0 52F804FB 		_UNNEST
 1486              	
 1487              	//    /	   ( n n -- q )
 1488              	// 	Signed divide. Return quotient only.
 1489              		_HEADER SLASH,1,"/"
 1490 05e4 42F804ED 		_NEST
 1491 05e8 FFF7E8FF 		BL	SLMOD
 1492 05ec FFF702FE 		BL	SWAP
 1493 05f0 FFF7F8FD 		BL	DROP
 1494 05f4 52F804FB 		_UNNEST
 1495              	
 1496              	//    */MOD	( n1 n2 n3 -- r q )
 1497              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1498              		_HEADER SSMOD,5,"*/MOD"
 1499 05f8 42F804ED 		_NEST
 1500 05fc FFF7E8FD 		BL	TOR
 1501 0600 FFF742FE 		BL	MSTAR
 1502 0604 FFF7DAFD 		BL	RFROM
 1503 0608 FFF7A2FF 		BL	MSMOD
 1504 060c 52F804FB 		_UNNEST
 1505              	
 1506              	//    */	  ( n1 n2 n3 -- q )
 1507              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1508              		_HEADER STASL,2,"*/"
 1509 0610 42F804ED 		_NEST
 1510 0614 FFF7F0FF 		BL	SSMOD
 1511 0618 FFF7ECFD 		BL	SWAP
 1512 061c FFF7E2FD 		BL	DROP
 1513 0620 52F804FB 		_UNNEST
 1514              	
 1515              	// **************************************************************************
 1516              	//  Miscellaneous
 1517              	
 1518              	//    ALIGNED	( b -- a )
 1519              	// 	Align address to the cell boundary.
 1520              		_HEADER ALGND,7,"ALIGNED"
 1521 0624 05F10305 		ADD	R5,R5,#3
 1522 0628 6FF00304 		MVN	R4,#3
 1523 062c 05EA0405 		AND	R5,R5,R4
 1524 0630 7047     		_NEXT
 1525              	
 1526              	//    >CHAR	( c -- c )
 1527              	// 	Filter non-printing characters.
 1528 0632 00BF     		_HEADER TCHAR,5,">CHAR"
 1529 0634 42F804ED 		_NEST
 1530 0638 FFF77FFD 		_DOLIT 0x7F
 1530      7F000000 
 1531 0640 FFF7E6FD 		BL	ANDD
 1532 0644 FFF7D2FD 		BL	DUPP	// mask msb
 1533 0648 FFF73CFE 		BL	BLANK
ARM GAS  stm32eforth.s 			page 31


 1534 064c FFF775FD 		_DOLIT 127
 1534      7F000000 
 1535 0654 FFF754FF 		BL	WITHI	// check for printable
 1536 0658 FFF76CFE 		BL	INVER
 1537 065c FFF78AFD 		BL	QBRAN
 1538 0660 70060018 		.word	TCHA1+MAPOFFSET
 1539 0664 FFF7BEFD 		BL	DROP
 1540 0668 FFF767FD 		_DOLIT 	'_'	// replace non-printables
 1540      5F000000 
 1541              	TCHA1:
 1542 0670 52F804FB 		  _UNNEST
 1543              	
 1544              	//    DEPTH	( -- n )
 1545              	// 	Return the depth of the data stack.
 1546              		_HEADER DEPTH,5,"DEPTH"
 1547 0674 4FF49D46 		_MOV32 R6,SPP 
 1547      C2F20006 
 1548 067c A6EB0106 		SUB	R6,R6,R1
 1549 0680 41F8045D 		_PUSH
 1550 0684 4FEAA605 		ASR	R5,R6,#2
 1551 0688 7047     		_NEXT  
 1552              	
 1553              	//    PICK	( ... +n -- ... w )
 1554              	// 	Copy the nth stack item to tos.
 1555 068a 00BF     		_HEADER PICK,4,"PICK"
 1556 068c 42F804ED 		_NEST
 1557 0690 FFF700FE 		BL	ONEP
 1558 0694 FFF71CFE 		BL	CELLS
 1559 0698 FFF7A0FD 		BL	SPAT
 1560 069c FFF7DEFD 		BL	PLUS
 1561 06a0 FFF782FD 		BL	AT
 1562 06a4 52F804FB 		_UNNEST
 1563              	
 1564              	// **************************************************************************
 1565              	//  Memory access
 1566              	
 1567              	//    HERE	( -- a )
 1568              	// 	Return the top of the code dictionary.
 1569              		_HEADER HERE,4,"HERE"
 1570 06a8 42F804ED 		_NEST
 1571 06ac FFF7FCFE 		BL	CPP
 1572 06b0 FFF77AFD 		BL	AT
 1573 06b4 52F804FB 		_UNNEST
 1574              		
 1575              	//    PAD	 ( -- a )
 1576              	// 	Return the address of a temporary buffer.
 1577              		_HEADER PAD,4,"PAD"
 1578 06b8 42F804ED 		_NEST
 1579 06bc FFF7F4FF 		BL	HERE
 1580 06c0 05F15005 		ADD	R5,R5,#80
 1581 06c4 52F804FB 		_UNNEST
 1582              	
 1583              	//    TIB	 ( -- a )
 1584              	// 	Return the address of the terminal input buffer.
 1585              		_HEADER TIB,3,"TIB"
 1586 06c8 41F8045D 		_PUSH
 1587 06cc 1D6B     		ldr r5,[r3,#TIB_OFS]
ARM GAS  stm32eforth.s 			page 32


 1588 06ce 7047     		_NEXT
 1589              	
 1590              	//    @EXECUTE	( a -- )
 1591              	// 	Execute vector stored in address a.
 1592              		_HEADER ATEXE,8,"@EXECUTE"
 1593 06d0 2C00     		MOVS	R4,R5
 1594 06d2 51F8045B 		_POP
 1595 06d6 2468     		LDR	R4,[R4]
 1596 06d8 44F00104 		ORR	R4,R4,#1
 1597 06dc 18BF     	    IT NE 
 1598 06de 2047     		BXNE	R4
 1599 06e0 7047     		_NEXT
 1600              	
 1601              	//    CMOVE	( b1 b2 u -- )
 1602              	// 	Copy u bytes from b1 to b2.
 1603 06e2 00BF     		_HEADER CMOVE,5,"CMOVE"
 1604 06e4 51F8046B 		LDR	R6,[R1],#4
 1605 06e8 51F8047B 		LDR	R7,[R1],#4
 1606 06ec 03E0     		B CMOV1
 1607              	CMOV0:
 1608 06ee 17F8014B 		LDRB	R4,[R7],#1
 1609 06f2 06F8014B 		STRB	R4,[R6],#1
 1610              	CMOV1:
 1611 06f6 2D00     		MOVS	R5,R5
 1612 06f8 02D0     		BEQ	CMOV2
 1613 06fa A5F10105 		SUB	R5,R5,#1
 1614 06fe F6E7     		B CMOV0
 1615              	CMOV2:
 1616 0700 51F8045B 		_POP
 1617 0704 7047     		_NEXT
 1618              	
 1619              	//    MOVE	( a1 a2 u -- )
 1620              	// 	Copy u words from a1 to a2.
 1621 0706 00BF     		_HEADER MOVE,4,"MOVE"
 1622 0708 25F00305 		AND	R5,R5,#-4
 1623 070c 51F8046B 		LDR	R6,[R1],#4
 1624 0710 51F8047B 		LDR	R7,[R1],#4
 1625 0714 03E0     		B MOVE1
 1626              	MOVE0:
 1627 0716 57F8044B 		LDR	R4,[R7],#4
 1628 071a 46F8044B 		STR	R4,[R6],#4
 1629              	MOVE1:
 1630 071e 2D00     		MOVS	R5,R5
 1631 0720 02D0     		BEQ	MOVE2
 1632 0722 A5F10405 		SUB	R5,R5,#4
 1633 0726 F6E7     		B MOVE0
 1634              	MOVE2:
 1635 0728 51F8045B 		_POP
 1636 072c 7047     		_NEXT
 1637              	
 1638              	//    FILL	( b u c -- )
 1639              	// 	Fill u bytes of character c to area beginning at b.
 1640 072e 00BF     		_HEADER FILL,4,"FILL"
 1641 0730 51F8046B 		LDR	R6,[R1],#4
 1642 0734 51F8047B 		LDR	R7,[R1],#4
 1643              	FILL0:
 1644 0738 00E0     		B FILL1
ARM GAS  stm32eforth.s 			page 33


 1645 073a 2D46     		MOV	R5,R5
 1646              	FILL1:
 1647 073c 07F8015B 		STRB	R5,[R7],#1
 1648 0740 3600     		MOVS	R6,R6
 1649 0742 02D0     		BEQ	FILL2
 1650 0744 A6F10106 		SUB	R6,R6,#1
 1651 0748 F6E7     		B FILL0
 1652              	FILL2:
 1653 074a 51F8045B 		_POP
 1654 074e 7047     		_NEXT
 1655              	
 1656              	//    PACK$	( b u a -- a )
 1657              	// 	Build a counted word with u characters from b. Null fill.
 1658              		_HEADER PACKS,5,"PACK$"
 1659 0750 42F804ED 		_NEST
 1660 0754 FFF766FF 		BL	ALGND
 1661 0758 FFF748FD 		BL	DUPP
 1662 075c FFF738FD 		BL	TOR			// strings only on cell boundary
 1663 0760 FFF74CFD 		BL	OVER
 1664 0764 FFF77AFD 		BL	PLUS
 1665 0768 FFF794FD 		BL	ONEP
 1666 076c FFF7E5FC 		_DOLIT 0xFFFFFFFC
 1666      FCFFFFFF 
 1667 0774 FFF74CFD 		BL	ANDD			// count mod cell
 1668 0778 FFF7DFFC 		_DOLIT 	0
 1668      00000000 
 1669 0780 FFF738FD 		BL	SWAP
 1670 0784 FFF70AFD 		BL	STORE			// null fill cell
 1671 0788 FFF71EFD 		BL	RAT
 1672 078c FFF7C2FD 		BL	DDUP
 1673 0790 FFF70CFD 		BL	CSTOR
 1674 0794 FFF77EFD 		BL	ONEP			// save count
 1675 0798 FFF72CFD 		BL	SWAP
 1676 079c FFF7A2FF 		BL	CMOVE
 1677 07a0 FFF70CFD 		BL	RFROM
 1678 07a4 52F804FB 		_UNNEST   			// move string
 1679              	
 1680              	// **************************************************************************
 1681              	//  Numeric output, single precision
 1682              	
 1683              	//    DIGIT	( u -- c )
 1684              	// 	Convert digit u to a character.
 1685              		_HEADER DIGIT,5,"DIGIT"
 1686 07a8 42F804ED 		_NEST
 1687 07ac FFF7C5FC 		_DOLIT 9
 1687      09000000 
 1688 07b4 FFF722FD 		BL	OVER
 1689 07b8 FFF7E2FD 		BL	LESS
 1690 07bc 05F00705 		AND	R5,R5,#7
 1691 07c0 FFF74CFD 		BL	PLUS
 1692 07c4 05F13005 		ADD	R5,R5,#'0'
 1693 07c8 52F804FB 		_UNNEST
 1694              	
 1695              	//    EXTRACT	( n base -- n c )
 1696              	// 	Extract the least significant digit from n.
 1697              		_HEADER EXTRC,7,"EXTRACT"
 1698 07cc 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 34


 1699 07d0 FFF7B3FC 		_DOLIT 0
 1699      00000000 
 1700 07d8 FFF70CFD 		BL	SWAP
 1701 07dc FFF7A0FE 		BL	UMMOD
 1702 07e0 FFF708FD 		BL	SWAP
 1703 07e4 FFF7E0FF 		BL	DIGIT
 1704 07e8 52F804FB 		_UNNEST
 1705              	
 1706              	//    <#	  ( -- )
 1707              	// 	Initiate the numeric output process.
 1708              		_HEADER BDIGS,2,"<#"
 1709 07ec 42F804ED 		_NEST
 1710 07f0 FFF762FF 		BL	PAD
 1711 07f4 FFF74CFE 		BL	HLD
 1712 07f8 FFF7D0FC 		BL	STORE
 1713 07fc 52F804FB 		_UNNEST
 1714              	
 1715              	//    HOLD	( c -- )
 1716              	// 	Insert a character into the numeric output string.
 1717              		_HEADER HOLD,4,"HOLD"
 1718 0800 42F804ED 		_NEST
 1719 0804 FFF744FE 		BL	HLD
 1720 0808 FFF7CEFC 		BL	AT
 1721 080c FFF746FD 		BL	ONEM
 1722 0810 FFF7ECFC 		BL	DUPP
 1723 0814 FFF73CFE 		BL	HLD
 1724 0818 FFF7C0FC 		BL	STORE
 1725 081c FFF7C6FC 		BL	CSTOR
 1726 0820 52F804FB 		_UNNEST
 1727              	
 1728              	//    #	   ( u -- u )
 1729              	// 	Extract one digit from u and append the digit to output string.
 1730              		_HEADER DIG,1,"#"
 1731 0824 42F804ED 		_NEST
 1732 0828 FFF710FE 		BL	BASE
 1733 082c FFF7BCFC 		BL	AT
 1734 0830 FFF7CCFF 		BL	EXTRC
 1735 0834 FFF7E4FF 		BL	HOLD
 1736 0838 52F804FB 		_UNNEST
 1737              	
 1738              	//    #S	  ( u -- 0 )
 1739              	// 	Convert u until all digits are added to the output string.
 1740              		_HEADER DIGS,2,"#S"
 1741 083c 42F804ED 		_NEST
 1742              	DIGS1:
 1743 0840 FFF7F0FF 	    BL	DIG
 1744 0844 FFF7D2FC 		BL	DUPP
 1745 0848 FFF794FC 		BL	QBRAN
 1746 084c 52080018 		.word	DIGS2+MAPOFFSET
 1747 0850 F6E7     		B	DIGS1
 1748              	DIGS2:
 1749 0852 52F804FB 		  _UNNEST
 1750              	
 1751              	//    SIGN	( n -- )
 1752              	// 	Add a minus sign to the numeric output string.
 1753 0856 00BF     		_HEADER SIGN, 4,"SIGN"
 1754 0858 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 35


 1755 085c FFF7D2FC 		BL	ZLESS
 1756 0860 FFF788FC 		BL	QBRAN
 1757 0864 74080018 		.word	SIGN1+MAPOFFSET
 1758 0868 FFF767FC 		_DOLIT '-'
 1758      2D000000 
 1759 0870 FFF7C6FF 		BL	HOLD
 1760              	SIGN1:
 1761 0874 52F804FB 		  _UNNEST
 1762              	
 1763              	//    #>	  ( w -- b u )
 1764              	// 	Prepare the outputDCB to be TYPE'd.
 1765              		_HEADER EDIGS,2,"#>"
 1766 0878 42F804ED 		_NEST
 1767 087c FFF7B2FC 		BL	DROP
 1768 0880 FFF706FE 		BL	HLD
 1769 0884 FFF790FC 		BL	AT
 1770 0888 FFF716FF 		BL	PAD
 1771 088c FFF7B6FC 		BL	OVER
 1772 0890 FFF7E8FC 		BL	SUBB
 1773 0894 52F804FB 		_UNNEST
 1774              	
 1775              	//    str	 ( n -- b u )
 1776              	// 	Convert a signed integer to a numeric string.
 1777              	
 1778              	// 	.word	_EDIGS+MAPOFFSET
 1779              	// _STRR	.byte  3
 1780              	// 	.ascii "str"
 1781              	// 	.p2align 2 	
 1782              	STRR:
 1783 0898 42F804ED 		_NEST
 1784 089c FFF7A6FC 		BL	DUPP
 1785 08a0 FFF796FC 		BL	TOR
 1786 08a4 FFF74EFD 		BL	ABSS
 1787 08a8 FFF7A0FF 		BL	BDIGS
 1788 08ac FFF7C6FF 		BL	DIGS
 1789 08b0 FFF784FC 		BL	RFROM
 1790 08b4 FFF7D0FF 		BL	SIGN
 1791 08b8 FFF7DEFF 		BL	EDIGS
 1792 08bc 52F804FB 		_UNNEST
 1793              	
 1794              	//    HEX	 ( -- )
 1795              	// 	Use radix 16 as base for numeric conversions.
 1796              		_HEADER HEX,3,"HEX"
 1797 08c0 42F804ED 		_NEST
 1798 08c4 FFF739FC 		_DOLIT 16
 1798      10000000 
 1799 08cc FFF7BEFD 		BL	BASE
 1800 08d0 FFF764FC 		BL	STORE
 1801 08d4 52F804FB 		_UNNEST
 1802              	
 1803              	//    DECIMAL	( -- )
 1804              	// 	Use radix 10 as base for numeric conversions.
 1805              		_HEADER DECIM,7,"DECIMAL"
 1806 08d8 42F804ED 		_NEST
 1807 08dc FFF72DFC 		_DOLIT 10
 1807      0A000000 
 1808 08e4 FFF7B2FD 		BL	BASE
ARM GAS  stm32eforth.s 			page 36


 1809 08e8 FFF758FC 		BL	STORE
 1810 08ec 52F804FB 		_UNNEST
 1811              	
 1812              	// **************************************************************************
 1813              	//  Numeric input, single precision
 1814              	
 1815              	//    DIGIT?	( c base -- u t )
 1816              	// 	Convert a character to its numeric value. A flag indicates success.
 1817              		_HEADER DIGTQ,6,"DIGIT?"
 1818 08f0 42F804ED 		_NEST
 1819 08f4 FFF76CFC 		BL	TOR
 1820 08f8 FFF71FFC 		_DOLIT '0'
 1820      30000000 
 1821 0900 FFF7B0FC 		BL	SUBB
 1822 0904 FFF719FC 		_DOLIT 9
 1822      09000000 
 1823 090c FFF776FC 		BL	OVER
 1824 0910 FFF736FD 		BL	LESS
 1825 0914 FFF72EFC 		BL	QBRAN
 1826 0918 3C090018 		.word	DGTQ1+MAPOFFSET
 1827 091c FFF70DFC 		_DOLIT 7
 1827      07000000 
 1828 0924 FFF79EFC 		BL	SUBB
 1829 0928 FFF760FC 		BL	DUPP
 1830 092c FFF705FC 		_DOLIT 10
 1830      0A000000 
 1831 0934 FFF724FD 		BL	LESS
 1832 0938 FFF770FC 		BL	ORR
 1833              	DGTQ1:
 1834 093c FFF756FC 	  BL	DUPP
 1835 0940 FFF73CFC 		BL	RFROM
 1836 0944 FFF714FD 		BL	ULESS
 1837 0948 52F804FB 		_UNNEST
 1838              	
 1839              	//    NUMBER?	( a -- n T | a F )
 1840              	// 	Convert a number word to integer. Push a flag on tos.
 1841              		_HEADER NUMBQ,7,"NUMBER?"
 1842 094c 42F804ED 		_NEST
 1843 0950 FFF77CFD 		BL	BASE
 1844 0954 FFF728FC 		BL	AT
 1845 0958 FFF73AFC 		BL	TOR
 1846 095c FFF7EDFB 		_DOLIT 0
 1846      00000000 
 1847 0964 FFF74AFC 		BL	OVER
 1848 0968 FFF73EFD 		BL	COUNT
 1849 096c FFF746FC 		BL	OVER
 1850 0970 FFF722FC 		BL	CAT
 1851 0974 FFF7E1FB 		_DOLIT '$'
 1851      24000000 
 1852 097c FFF7F0FC 		BL	EQUAL
 1853 0980 FFF7F8FB 		BL	QBRAN
 1854 0984 9C090018 		.word	NUMQ1+MAPOFFSET
 1855 0988 FFF79AFF 		BL	HEX
 1856 098c FFF732FC 		BL	SWAP
 1857 0990 FFF780FC 		BL	ONEP
 1858 0994 FFF72EFC 		BL	SWAP
 1859 0998 FFF780FC 		BL	ONEM
ARM GAS  stm32eforth.s 			page 37


 1860              	NUMQ1:
 1861 099c FFF72EFC 		BL	OVER
 1862 09a0 FFF70AFC 		BL	CAT
 1863 09a4 FFF7C9FB 		_DOLIT '-'
 1863      2D000000 
 1864 09ac FFF7D8FC 		BL	EQUAL
 1865 09b0 FFF70EFC 		BL	TOR
 1866 09b4 FFF71EFC 		BL	SWAP
 1867 09b8 FFF706FC 		BL	RAT
 1868 09bc FFF752FC 		BL	SUBB
 1869 09c0 FFF718FC 		BL	SWAP
 1870 09c4 FFF700FC 		BL	RAT
 1871 09c8 FFF748FC 		BL	PLUS
 1872 09cc FFF790FC 		BL	QDUP
 1873 09d0 FFF7D0FB 		BL	QBRAN
 1874 09d4 600A0018 		.word	NUMQ6+MAPOFFSET
 1875 09d8 FFF760FC 		BL	ONEM
 1876 09dc FFF7F8FB 		BL	TOR
 1877              	NUMQ2:
 1878 09e0 FFF704FC 		BL	DUPP
 1879 09e4 FFF7F4FB 		BL	TOR
 1880 09e8 FFF7E6FB 		BL	CAT
 1881 09ec FFF72EFD 		BL	BASE
 1882 09f0 FFF7DAFB 		BL	AT
 1883 09f4 FFF77CFF 		BL	DIGTQ
 1884 09f8 FFF7BCFB 		BL	QBRAN
 1885 09fc 440A0018 		.word	NUMQ4+MAPOFFSET
 1886 0a00 FFF7F8FB 		BL	SWAP
 1887 0a04 FFF722FD 		BL	BASE
 1888 0a08 FFF7CEFB 		BL	AT
 1889 0a0c FFF730FC 		BL	STAR
 1890 0a10 FFF724FC 		BL	PLUS
 1891 0a14 FFF7D2FB 		BL	RFROM
 1892 0a18 FFF73CFC 		BL	ONEP
 1893 0a1c FFF79BFB 		BL	DONXT
 1894 0a20 E0090018 		.word	NUMQ2+MAPOFFSET
 1895 0a24 FFF7D0FB 		BL	RAT
 1896 0a28 FFF7E4FB 		BL	SWAP
 1897 0a2c FFF7DAFB 		BL	DROP
 1898 0a30 FFF7A0FB 		BL	QBRAN
 1899 0a34 3C0A0018 		.word	NUMQ3+MAPOFFSET
 1900 0a38 FFF780FC 		BL	NEGAT
 1901              	NUMQ3:
 1902 0a3c FFF7DAFB 		BL	SWAP
 1903 0a40 00F00CB8 		B.W	NUMQ5
 1904              	NUMQ4:
 1905 0a44 FFF7BAFB 		BL	RFROM
 1906 0a48 FFF7B8FB 		BL	RFROM
 1907 0a4c FFF75CFC 		BL	DDROP
 1908 0a50 FFF75AFC 		BL	DDROP
 1909 0a54 FFF771FB 		_DOLIT	0
 1909      00000000 
 1910              	NUMQ5:
 1911 0a5c FFF7C6FB 		BL	DUPP
 1912              	NUMQ6:
 1913 0a60 FFF7ACFB 		BL	RFROM
 1914 0a64 FFF750FC 		BL	DDROP
ARM GAS  stm32eforth.s 			page 38


 1915 0a68 FFF7A8FB 		BL	RFROM
 1916 0a6c FFF7EEFC 		BL	BASE
 1917 0a70 FFF794FB 		BL	STORE
 1918 0a74 52F804FB 		_UNNEST
 1919              	
 1920              	// **************************************************************************
 1921              	//  Basic I/O
 1922              	
 1923              	//    KEY	 ( -- c )
 1924              	// 	Wait for and return an input character.
 1925              		_HEADER KEY,3,"KEY"
 1926 0a78 42F804ED 		_NEST
 1927              	KEY1:
 1928 0a7c FFF73AFB 		BL	QRX
 1929 0a80 FFF778FB 		BL	QBRAN
 1930 0a84 7C0A0018 		.word	KEY1+MAPOFFSET
 1931 0a88 52F804FB 		_UNNEST
 1932              	
 1933              	//    SPACE	( -- )
 1934              	// 	Send the blank character to the output device.
 1935              		_HEADER SPACE,5,"SPACE"
 1936 0a8c 42F804ED 		_NEST
 1937 0a90 FFF718FC 		BL	BLANK
 1938 0a94 FFF744FB 		BL	EMIT
 1939 0a98 52F804FB 		_UNNEST
 1940              	
 1941              	//    SPACES	( +n -- )
 1942              	// 	Send n spaces to the output device.
 1943              		_HEADER SPACS,6,"SPACES"
 1944 0a9c 42F804ED 		_NEST
 1945 0aa0 FFF74BFB 		_DOLIT 0
 1945      00000000 
 1946 0aa8 FFF77AFC 		BL	MAX
 1947 0aac FFF790FB 		BL	TOR
 1948 0ab0 00F002B8 		B.W	CHAR2
 1949              	CHAR1:
 1950 0ab4 FFF7EAFF 		BL	SPACE
 1951              	CHAR2:
 1952 0ab8 FFF74DFB 		BL	DONXT
 1953 0abc B40A0018 		.word	CHAR1+MAPOFFSET
 1954 0ac0 52F804FB 		_UNNEST
 1955              	
 1956              	//    TYPE	( b u -- )
 1957              	// 	Output u characters from b.
 1958              		_HEADER TYPEE,4,"TYPE"
 1959 0ac4 42F804ED 		_NEST
 1960 0ac8 FFF782FB 		BL  TOR   // ( a+1 -- R: u )
 1961 0acc 00F006B8 		B.W	TYPE2
 1962              	TYPE1:  
 1963 0ad0 FFF78AFC 		BL  COUNT
 1964 0ad4 FFF7AEFD 		BL	TCHAR
 1965 0ad8 FFF722FB 		BL	EMIT
 1966              	TYPE2:  
 1967 0adc FFF73BFB 		BL  DONXT  
 1968 0ae0 D00A0018 		.word	TYPE1+MAPOFFSET
 1969 0ae4 FFF77EFB 		BL	DROP
 1970 0ae8 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 39


 1971              	
 1972              	//    CR	  ( -- )
 1973              	// 	Output a carriage return and a line feed.
 1974              		_HEADER CR,2,"CR"
 1975 0aec 42F804ED 		_NEST
 1976 0af0 FFF723FB 		_DOLIT	CRR
 1976      0D000000 
 1977 0af8 FFF712FB 		BL	EMIT
 1978 0afc FFF71DFB 		_DOLIT	LF
 1978      0A000000 
 1979 0b04 FFF70CFB 		BL	EMIT
 1980 0b08 52F804FB 		_UNNEST
 1981              	
 1982              	//    do_$	( -- a )
 1983              	// 	Return the address of a compiled string.
 1984              	//  adjust return address to skip over it.
 1985              	
 1986              	// 	.word	_CR+MAPOFFSET
 1987              	// _DOSTR	.byte  COMPO+3
 1988              	// 	.ascii "do$$"
 1989              	// 	.p2align 2 	
 1990              	DOSTR:
 1991 0b0c 42F804ED 		_NEST     
 1992              	/* compiled string address is 2 levels deep */
 1993 0b10 FFF754FB 		BL	RFROM	// { -- a1 }
 1994 0b14 FFF752FB 		BL	RFROM	//  {a1 -- a1 a2 } b0 set
 1995 0b18 FFF7C0FB 		BL	ONEM	//  clear b0
 1996 0b1c FFF766FB 		BL	DUPP	// {a1 a2 -- a1 a2 a2 }
 1997 0b20 FFF762FC 		BL	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 1998 0b24 FFF79AFB 		BL	PLUS	// { -- a1 a2 a2+1+c }
 1999 0b28 FFF77CFD 		BL	ALGND	//  end of string
 2000 0b2c FFF7B2FB 		BL	ONEP	//  restore b0, this result in return address 2 level deep.
 2001 0b30 FFF74EFB 		BL	TOR		//  address after string { -- a1 a2 }
 2002 0b34 FFF75EFB 		BL	SWAP	//  count tugged
 2003 0b38 FFF74AFB 		BL	TOR     //  ( -- a2) is string address
 2004 0b3c 52F804FB 		_UNNEST
 2005              	
 2006              	//    $"|	( -- a )
 2007              	// 	Run time routine compiled by _". Return address of a compiled string.
 2008              	
 2009              	// 	.word	_DOSTR+MAPOFFSET
 2010              	// _STRQP	.byte  COMPO+3
 2011              	// 	.ascii "$\"|"
 2012              	// 	.p2align 2 	
 2013              	STRQP:
 2014 0b40 42F804ED 		_NEST
 2015 0b44 FFF7E2FF 		BL	DOSTR
 2016 0b48 52F804FB 		_UNNEST			// force a call to dostr
 2017              	
 2018              	//    .$	( a -- )
 2019              	// 	Run time routine of ." . Output a compiled string.
 2020              	
 2021              	// 	.word	_STRQP+MAPOFFSET
 2022              	// _DOTST	.byte  COMPO+2
 2023              	// 	.ascii ".$$"
 2024              	// 	.p2align 2 	
 2025              	DOTST:
ARM GAS  stm32eforth.s 			page 40


 2026 0b4c 42F804ED 		_NEST
 2027 0b50 FFF74AFC 		BL	COUNT // ( -- a+1 c )
 2028 0b54 FFF7B6FF 		BL	TYPEE
 2029 0b58 52F804FB 		_UNNEST
 2030              	
 2031              	//    ."|	( -- )
 2032              	// 	Run time routine of ." . Output a compiled string.
 2033              	
 2034              	// 	.word	_DOTST+MAPOFFSET
 2035              	// _DOTQP	.byte  COMPO+3
 2036              	// 	.ascii ".""|"
 2037              	// 	.p2align 2 	
 2038              	DOTQP:
 2039 0b5c 42F804ED 		_NEST
 2040 0b60 FFF7D4FF 		BL	DOSTR
 2041 0b64 FFF7F2FF 		BL	DOTST
 2042 0b68 52F804FB 		_UNNEST
 2043              	
 2044              	//    .R	  ( n +n -- )
 2045              	// 	Display an integer in a field of n columns, right justified.
 2046              		_HEADER DOTR,2,".R"
 2047 0b6c 42F804ED 		_NEST
 2048 0b70 FFF72EFB 		BL	TOR
 2049 0b74 FFF790FE 		BL	STRR
 2050 0b78 FFF720FB 		BL	RFROM
 2051 0b7c FFF73EFB 		BL	OVER
 2052 0b80 FFF770FB 		BL	SUBB
 2053 0b84 FFF78AFF 		BL	SPACS
 2054 0b88 FFF79CFF 		BL	TYPEE
 2055 0b8c 52F804FB 		_UNNEST
 2056              	
 2057              	//    U.R	 ( u +n -- )
 2058              	// 	Display an unsigned integer in n column, right justified.
 2059              		_HEADER UDOTR,3,"U.R"
 2060 0b90 42F804ED 		_NEST
 2061 0b94 FFF71CFB 		BL	TOR
 2062 0b98 FFF728FE 		BL	BDIGS
 2063 0b9c FFF74EFE 		BL	DIGS
 2064 0ba0 FFF76AFE 		BL	EDIGS
 2065 0ba4 FFF70AFB 		BL	RFROM
 2066 0ba8 FFF728FB 		BL	OVER
 2067 0bac FFF75AFB 		BL	SUBB
 2068 0bb0 FFF774FF 		BL	SPACS
 2069 0bb4 FFF786FF 		BL	TYPEE
 2070 0bb8 52F804FB 		_UNNEST
 2071              	
 2072              	//    U.	  ( u -- )
 2073              	// 	Display an unsigned integer in free format.
 2074              		_HEADER UDOT,2,"U."
 2075 0bbc 42F804ED 		_NEST
 2076 0bc0 FFF714FE 		BL	BDIGS
 2077 0bc4 FFF73AFE 		BL	DIGS
 2078 0bc8 FFF756FE 		BL	EDIGS
 2079 0bcc FFF75EFF 		BL	SPACE
 2080 0bd0 FFF778FF 		BL	TYPEE
 2081 0bd4 52F804FB 		_UNNEST
 2082              	
ARM GAS  stm32eforth.s 			page 41


 2083              	//    .	   ( w -- )
 2084              	// 	Display an integer in free format, preceeded by a space.
 2085              		_HEADER DOT,1,"."
 2086 0bd8 42F804ED 		_NEST
 2087 0bdc FFF736FC 		BL	BASE
 2088 0be0 FFF7E2FA 		BL	AT
 2089 0be4 FFF7A9FA 		_DOLIT	10
 2089      0A000000 
 2090 0bec FFF71CFB 		BL	XORR			// ?decimal
 2091 0bf0 FFF7C0FA 		BL	QBRAN
 2092 0bf4 000C0018 		.word	DOT1+MAPOFFSET
 2093 0bf8 FFF7E0FF 		BL	UDOT
 2094 0bfc 52F804FB 		_UNNEST			// no,display unsigned
 2095              	DOT1:
 2096 0c00 FFF74AFE 	    BL	STRR
 2097 0c04 FFF742FF 		BL	SPACE
 2098 0c08 FFF75CFF 		BL	TYPEE
 2099 0c0c 52F804FB 		_UNNEST			// yes, display signed
 2100              	
 2101              	//    ?	   ( a -- )
 2102              	// 	Display the contents in a memory cell.
 2103              		_HEADER QUEST,1,"?"
 2104 0c10 42F804ED 		_NEST
 2105 0c14 FFF7C8FA 		BL	AT
 2106 0c18 FFF7DEFF 		BL	DOT
 2107 0c1c 52F804FB 		_UNNEST
 2108              	
 2109              	// **************************************************************************
 2110              	//  Parsing
 2111              	
 2112              	//    parse	( b u c -- b u delta //  string> )
 2113              	// 	Scan word delimited by c. Return found string and its offset.
 2114              	
 2115              	// 	.word	_QUEST+MAPOFFSET
 2116              	// _PARS	.byte  5
 2117              	// 	.ascii "parse"
 2118              	// 	.p2align 2 	
 2119              	PARS:
 2120 0c20 42F804ED 		_NEST
 2121 0c24 FFF717FC 		BL	TEMP
 2122 0c28 FFF7B8FA 		BL	STORE
 2123 0c2c FFF7E6FA 		BL	OVER
 2124 0c30 FFF7CEFA 		BL	TOR
 2125 0c34 FFF7DAFA 		BL	DUPP
 2126 0c38 FFF79CFA 		BL	QBRAN
 2127 0c3c 2E0D0018 		.word	PARS8+MAPOFFSET
 2128 0c40 FFF72CFB 		BL	ONEM
 2129 0c44 FFF707FC 		BL	TEMP
 2130 0c48 FFF7AEFA 		BL	AT
 2131 0c4c FFF73AFB 		BL	BLANK
 2132 0c50 FFF786FB 		BL	EQUAL
 2133 0c54 FFF78EFA 		BL	QBRAN
 2134 0c58 A80C0018 		.word	PARS3+MAPOFFSET
 2135 0c5c FFF7B8FA 		BL	TOR
 2136              	PARS1:
 2137 0c60 FFF730FB 		BL	BLANK
 2138 0c64 FFF7CAFA 		BL	OVER
ARM GAS  stm32eforth.s 			page 42


 2139 0c68 FFF7A6FA 		BL	CAT			// skip leading blanks 
 2140 0c6c FFF7FAFA 		BL	SUBB
 2141 0c70 FFF7C8FA 		BL	ZLESS
 2142 0c74 FFF75EFB 		BL	INVER
 2143 0c78 FFF77CFA 		BL	QBRAN
 2144 0c7c A40C0018 		.word	PARS2+MAPOFFSET
 2145 0c80 FFF708FB 		BL	ONEP
 2146 0c84 FFF767FA 		BL	DONXT
 2147 0c88 600C0018 		.word	PARS1+MAPOFFSET
 2148 0c8c FFF796FA 		BL	RFROM
 2149 0c90 FFF7A8FA 		BL	DROP
 2150 0c94 FFF751FA 		_DOLIT	0
 2150      00000000 
 2151 0c9c FFF7A6FA 		BL	DUPP
 2152 0ca0 52F804FB 		_UNNEST
 2153              	PARS2:
 2154 0ca4 FFF78AFA 	  BL	RFROM
 2155              	PARS3:
 2156 0ca8 FFF7A8FA 		BL	OVER
 2157 0cac FFF7A2FA 		BL	SWAP
 2158 0cb0 FFF78EFA 		BL	TOR
 2159              	PARS4:
 2160 0cb4 FFF7CFFB 		BL	TEMP
 2161 0cb8 FFF776FA 		BL	AT
 2162 0cbc FFF79EFA 		BL	OVER
 2163 0cc0 FFF77AFA 		BL	CAT
 2164 0cc4 FFF7CEFA 		BL	SUBB			// scan for delimiter
 2165 0cc8 FFF7C5FB 		BL	TEMP
 2166 0ccc FFF76CFA 		BL	AT
 2167 0cd0 FFF7F8FA 		BL	BLANK
 2168 0cd4 FFF744FB 		BL	EQUAL
 2169 0cd8 FFF74CFA 		BL	QBRAN
 2170 0cdc E40C0018 		.word	PARS5+MAPOFFSET
 2171 0ce0 FFF790FA 		BL	ZLESS
 2172              	PARS5:
 2173 0ce4 FFF746FA 		BL	QBRAN
 2174 0ce8 020D0018 		.word	PARS6+MAPOFFSET
 2175 0cec FFF7D2FA 		BL	ONEP
 2176 0cf0 FFF731FA 		BL	DONXT
 2177 0cf4 B40C0018 		.word	PARS4+MAPOFFSET
 2178 0cf8 FFF778FA 		BL	DUPP
 2179 0cfc FFF768FA 		BL	TOR
 2180 0d00 09E0     		B	PARS7
 2181              	PARS6:
 2182 0d02 FFF75BFA 		BL	RFROM
 2183 0d06 FFF76DFA 		BL	DROP
 2184 0d0a FFF76FFA 		BL	DUPP
 2185 0d0e FFF7C1FA 		BL	ONEP
 2186 0d12 FFF75DFA 		BL	TOR
 2187              	PARS7:
 2188 0d16 FFF771FA 		BL	OVER
 2189 0d1a FFF7A3FA 		BL	SUBB
 2190 0d1e FFF74DFA 		BL	RFROM
 2191 0d22 FFF74BFA 		BL	RFROM
 2192 0d26 FFF79DFA 		BL	SUBB
 2193 0d2a 52F804FB 		_UNNEST
 2194              	PARS8:
ARM GAS  stm32eforth.s 			page 43


 2195 0d2e FFF765FA 		BL	OVER
 2196 0d32 FFF743FA 		BL	RFROM
 2197 0d36 FFF795FA 		BL	SUBB
 2198 0d3a 52F804FB 		_UNNEST
 2199              	
 2200              	//    PARSE	( c -- b u //  string> )
 2201              	// 	Scan input stream and return counted string delimited by c.
 2202 0d3e 00BF     		_HEADER PARSE,5,"PARSE"
 2203 0d40 42F804ED 		_NEST
 2204 0d44 FFF744FA 		BL	TOR
 2205 0d48 FFF7BEFC 		BL	TIB
 2206 0d4c FFF78EFB 		BL	INN
 2207 0d50 FFF72AFA 		BL	AT
 2208 0d54 FFF782FA 		BL	PLUS			// current input buffer pointer
 2209 0d58 FFF78EFB 		BL	NTIB
 2210 0d5c FFF724FA 		BL	AT
 2211 0d60 FFF784FB 		BL	INN
 2212 0d64 FFF720FA 		BL	AT
 2213 0d68 FFF77CFA 		BL	SUBB			// remaining count
 2214 0d6c FFF726FA 		BL	RFROM
 2215 0d70 FFF756FF 		BL	PARS
 2216 0d74 FFF77AFB 		BL	INN
 2217 0d78 FFF71EFB 		BL	PSTOR
 2218 0d7c 52F804FB 		_UNNEST
 2219              	
 2220              	//    .(	  ( -- )
 2221              	// 	Output following string up to next ) .
 2222              		_HEADER DOTPR,IMEDD+2,".("
 2223 0d80 42F804ED 		_NEST
 2224 0d84 FFF7D9F9 		_DOLIT	')'
 2224      29000000 
 2225 0d8c FFF7D8FF 		BL	PARSE
 2226 0d90 FFF798FE 		BL	TYPEE
 2227 0d94 52F804FB 		_UNNEST
 2228              	
 2229              	//    (	   ( -- )
 2230              	// 	Ignore following string up to next ) . A comment.
 2231              		_HEADER PAREN,IMEDD+1,"("
 2232 0d98 42F804ED 		_NEST
 2233 0d9c FFF7CDF9 		_DOLIT	')'
 2233      29000000 
 2234 0da4 FFF7CCFF 		BL	PARSE
 2235 0da8 FFF7AEFA 		BL	DDROP
 2236 0dac 52F804FB 		_UNNEST
 2237              	
 2238              	//    \	   ( -- )
 2239              	// 	Ignore following text till the end of line.
 2240              		_HEADER BKSLA,1,"\\"
 2241 0db0 42F804ED 		_NEST
 2242 0db4 FFF760FB 		BL	NTIB
 2243 0db8 FFF7F6F9 		BL	AT
 2244 0dbc FFF756FB 		BL	INN
 2245 0dc0 FFF7ECF9 		BL	STORE
 2246 0dc4 52F804FB 		_UNNEST
 2247              	
 2248              	//    CHAR	( -- c )
 2249              	// 	Parse next word and return its first character.
ARM GAS  stm32eforth.s 			page 44


 2250              		_HEADER CAHR,4,"CHAR"
 2251 0dc8 42F804ED 		_NEST
 2252 0dcc FFF77AFA 		BL	BLANK
 2253 0dd0 FFF7B6FF 		BL	PARSE
 2254 0dd4 FFF706FA 		BL	DROP
 2255 0dd8 FFF7EEF9 		BL	CAT
 2256 0ddc 52F804FB 		_UNNEST
 2257              	
 2258              	//    WORD	( c -- a //  string> )
 2259              	// 	Parse a word from input stream and copy it to code dictionary.
 2260              		_HEADER WORDD,4,"WORD"
 2261 0de0 42F804ED 		_NEST
 2262 0de4 FFF7ACFF 		BL	PARSE
 2263 0de8 FFF75EFC 		BL	HERE
 2264 0dec FFF762FA 		BL	CELLP
 2265 0df0 FFF7AEFC 		BL	PACKS
 2266 0df4 52F804FB 		_UNNEST
 2267              	
 2268              	//    TOKEN	( -- a //  string> )
 2269              	// 	Parse a word from input stream and copy it to name dictionary.
 2270              		_HEADER TOKEN,5,"TOKEN"
 2271 0df8 42F804ED 		_NEST
 2272 0dfc FFF762FA 		BL	BLANK
 2273 0e00 FFF7EEFF 		BL	WORDD
 2274 0e04 52F804FB 		_UNNEST
 2275              	
 2276              	// **************************************************************************
 2277              	//  Dictionary search
 2278              	
 2279              	//    >CFA	( na -- cfa )
 2280              	// 	Return a code field address given a name address.
 2281              		_HEADER TOCFA,4,">CFA"
 2282 0e08 42F804ED 		_NEST
 2283 0e0c FFF7ECFA 		BL	COUNT
 2284 0e10 FFF793F9 		_DOLIT	0x1F
 2284      1F000000 
 2285 0e18 FFF7FAF9 		BL	ANDD
 2286 0e1c FFF71EFA 		BL	PLUS
 2287 0e20 FFF700FC 		BL	ALGND
 2288 0e24 52F804FB 		_UNNEST
 2289              	
 2290              	//	NAME> ( na -- ca ) 
 2291              	// Return code address 
 2292              		_HEADER NAMET,5,"NAME>"
 2293 0e28 42F804ED 		_NEST 
 2294 0e2c FFF7ECFF 		BL	TOCFA
 2295 0e30 FFF7BAF9 		BL	AT  
 2296 0e34 52F804FB 		_UNNEST 
 2297              	
 2298              	
 2299              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2300              	// 	Compare u bytes in two strings. Return 0 if identical.
 2301              	//
 2302              	//  Picatout 2020-12-01, 
 2303              	//      Because of problem with .align directive that
 2304              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2305              	// 		words  to do a byte by byte comparison. 
ARM GAS  stm32eforth.s 			page 45


 2306              	//
 2307              		_HEADER SAMEQ,5,"SAME?"
 2308 0e38 42F804ED 		_NEST
 2309 0e3c FFF7C8F9 		BL	TOR
 2310 0e40 00F01EB8 		B.W	SAME2
 2311              	SAME1:
 2312 0e44 FFF7DAF9 		BL	OVER  // ( a1 a2 -- a1 a2 a1 )
 2313 0e48 FFF7BEF9 		BL	RAT   // a1 a2 a1 u 
 2314 0e4c FFF706FA 		BL	PLUS  // a1 a2 a1+u 
 2315 0e50 FFF7B2F9 		BL	CAT	   // a1 a2 c1    		
 2316 0e54 FFF7D2F9 		BL	OVER  // a1 a2 c1 a2 
 2317 0e58 FFF7B6F9 		BL	RAT    
 2318 0e5c FFF7FEF9 		BL	PLUS    
 2319 0e60 FFF7AAF9 		BL	CAT	  // a1 a2 c1 c2
 2320 0e64 FFF7FEF9 		BL	SUBB  
 2321 0e68 FFF742FA 		BL	QDUP
 2322 0e6c FFF782F9 		BL	QBRAN
 2323 0e70 800E0018 		.word	SAME2+MAPOFFSET
 2324 0e74 FFF7A2F9 		BL	RFROM
 2325 0e78 FFF7B4F9 		BL	DROP
 2326 0e7c 52F804FB 		_UNNEST	// strings not equal
 2327              	SAME2:
 2328 0e80 FFF769F9 		BL	DONXT
 2329 0e84 440E0018 		.word	SAME1+MAPOFFSET
 2330 0e88 FFF757F9 		_DOLIT	0
 2330      00000000 
 2331 0e90 52F804FB 		_UNNEST	// strings equal
 2332              	
 2333              	//    find	( a na -- ca na | a F )
 2334              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2335              	
 2336              	//  Picatout 2020-12-01,  
 2337              	//		Modified from original. See comment for word "SAME?" 
 2338              	
 2339              	// 	.word	_SAMEQ+MAPOFFSET
 2340              	// _FIND	.byte  4
 2341              	// 	.ascii "find"
 2342              	// 	.p2align 2 	
 2343              	FIND:
 2344 0e94 42F804ED 		_NEST
 2345 0e98 FFF7ACF9 		BL	SWAP			// na a	
 2346 0e9c FFF7A4FA 		BL	COUNT			// na a+1 count
 2347 0ea0 FFF7A4F9 		BL	DUPP 
 2348 0ea4 FFF7D7FA 		BL	TEMP
 2349 0ea8 FFF778F9 		BL	STORE			// na a+1 count 
 2350 0eac FFF790F9 		BL  TOR		// na a+1  R: count  
 2351 0eb0 FFF7A0F9 		BL	SWAP			// a+1 na
 2352              	FIND1:
 2353 0eb4 FFF79AF9 		BL	DUPP			// a+1 na na
 2354 0eb8 FFF75CF9 		BL	QBRAN
 2355 0ebc 040F0018 		.word	FIND6+MAPOFFSET	// end of vocabulary
 2356 0ec0 FFF794F9 		BL	DUPP			// a+1 na na
 2357 0ec4 FFF778F9 		BL	CAT			// a+1 na name1
 2358 0ec8 FFF737F9 		_DOLIT	MASKK
 2358      1FFFFFFF 
 2359 0ed0 FFF79EF9 		BL	ANDD
 2360 0ed4 FFF778F9 		BL	RAT			// a+1 na name1 count 
ARM GAS  stm32eforth.s 			page 46


 2361 0ed8 FFF7A6F9 		BL	XORR			// a+1 na,  same length?
 2362 0edc FFF74AF9 		BL	QBRAN
 2363 0ee0 F00E0018 		.word	FIND2+MAPOFFSET
 2364 0ee4 FFF7EAF9 		BL	CELLM			// a+1 la
 2365 0ee8 FFF75EF9 		BL	AT			// a+1 next_na
 2366 0eec FFF7E2BF 		B.w	FIND1			// try next word
 2367              	FIND2:   
 2368 0ef0 FFF7D0F9 		BL	ONEP			// a+1 na+1
 2369 0ef4 FFF7AFFA 		BL	TEMP
 2370 0ef8 FFF756F9 		BL	AT			// a+1 na+1 count
 2371 0efc FFF79CFF 		BL	SAMEQ		// a+1 na+1 ? 
 2372              	FIND3:	
 2373 0f00 00F00CB8 		B.w	FIND4
 2374              	FIND6:	
 2375 0f04 FFF75AF9 		BL	RFROM			// a+1 0 name1 -- , no match
 2376 0f08 FFF76CF9 		BL	DROP			// a+1 0
 2377 0f0c FFF772F9 		BL	SWAP			// 0 a+1
 2378 0f10 FFF7C4F9 		BL	ONEM			// 0 a
 2379 0f14 FFF76EF9 		BL	SWAP			// a 0 
 2380 0f18 52F804FB 		_UNNEST			// return without a match
 2381              	FIND4:	
 2382 0f1c FFF72AF9 		BL	QBRAN			// a+1 na+1
 2383 0f20 340F0018 		.word	FIND5+MAPOFFSET	// found a match
 2384 0f24 FFF7BAF9 		BL	ONEM			// a+1 na
 2385 0f28 FFF7C8F9 		BL	CELLM			// a+4 la
 2386 0f2c FFF73CF9 		BL	AT			// a+1 next_na
 2387 0f30 FFF7C0BF 		B.w	FIND1			// compare next name
 2388              	FIND5:	
 2389 0f34 FFF742F9 		BL	RFROM			// a+1 na+1 count
 2390 0f38 FFF754F9 		BL	DROP			// a+1 na+1
 2391 0f3c FFF75AF9 		BL	SWAP			// na+1 a+1
 2392 0f40 FFF750F9 		BL	DROP			// na+1
 2393 0f44 FFF7AAF9 		BL	ONEM			// na
 2394 0f48 FFF750F9 		BL	DUPP			// na na
 2395 0f4c FFF76CFF 		BL	NAMET			// na ca
 2396 0f50 FFF750F9 		BL	SWAP			// ca na
 2397 0f54 52F804FB 		_UNNEST			//  return with a match
 2398              	
 2399              	//    NAME?	( a -- ca na | a F )
 2400              	// 	Search all context vocabularies for a string.
 2401              		_HEADER NAMEQ,5,"NAME?"
 2402 0f58 42F804ED 		_NEST
 2403 0f5c FFF79EFA 		BL	CNTXT
 2404 0f60 FFF722F9 		BL	AT
 2405 0f64 FFF796FF 		BL	FIND
 2406 0f68 52F804FB 		_UNNEST
 2407              	
 2408              	// **************************************************************************
 2409              	//  Terminal input
 2410              	
 2411              	//    	  ( bot eot cur -- bot eot cur )
 2412              	// 	Backup the cursor by one character.
 2413              	
 2414              	// 	.word	_NAMEQ+MAPOFFSET
 2415              	// _BKSP	.byte  2
 2416              	// 	.ascii "^H"
 2417              	// 	.p2align 2 	
ARM GAS  stm32eforth.s 			page 47


 2418              	BKSP:
 2419 0f6c 42F804ED 		_NEST
 2420 0f70 FFF72EF9 		BL	TOR
 2421 0f74 FFF742F9 		BL	OVER
 2422 0f78 FFF720F9 		BL	RFROM
 2423 0f7c FFF73AF9 		BL	SWAP
 2424 0f80 FFF73CF9 		BL	OVER
 2425 0f84 FFF750F9 		BL	XORR
 2426 0f88 FFF7F4F8 		BL	QBRAN
 2427 0f8c B40F0018 		.word	BACK1+MAPOFFSET
 2428 0f90 FFF7D3F8 		_DOLIT	BKSPP
 2428      08000000 
 2429 0f98 FFF7C2F8 		BL	TECHO
 2430              	// 	BL	ATEXE
 2431 0f9c FFF77EF9 		BL	ONEM
 2432 0fa0 FFF790F9 		BL	BLANK
 2433 0fa4 FFF7BCF8 		BL	TECHO
 2434              	// 	BL	ATEXE
 2435 0fa8 FFF7C7F8 		_DOLIT	BKSPP
 2435      08000000 
 2436 0fb0 FFF7B6F8 		BL	TECHO
 2437              	// 	BL	ATEXE
 2438              	BACK1:
 2439 0fb4 52F804FB 		  _UNNEST
 2440              	
 2441              	//    TAP	 ( bot eot cur c -- bot eot cur )
 2442              	// 	Accept and echo the key stroke and bump the cursor.
 2443              	
 2444              	// 	.word	_BKSP+MAPOFFSET
 2445              	// _TAP	.byte  3
 2446              	// 	.ascii "TAP"
 2447              	// 	.p2align 2 	
 2448              	TAP:
 2449 0fb8 42F804ED 		_NEST
 2450 0fbc FFF716F9 		BL	DUPP
 2451 0fc0 FFF7AEF8 		BL	TECHO
 2452              	// 	BL	ATEXE
 2453 0fc4 FFF71AF9 		BL	OVER
 2454 0fc8 FFF7F0F8 		BL	CSTOR
 2455 0fcc FFF762F9 		BL	ONEP
 2456 0fd0 52F804FB 		_UNNEST
 2457              	
 2458              	//    kTAP	( bot eot cur c -- bot eot cur )
 2459              	// 	Process a key stroke, CR or backspace.
 2460              	
 2461              	// 	.word	_TAP+MAPOFFSET
 2462              	// _KTAP	.byte  4
 2463              	// 	.ascii "kTAP"
 2464              	// 	.p2align 2 	
 2465              	KTAP:
 2466              	TTAP:
 2467 0fd4 42F804ED 		_NEST
 2468 0fd8 FFF708F9 		BL	DUPP
 2469 0fdc FFF7ADF8 		_DOLIT	CRR
 2469      0D000000 
 2470 0fe4 FFF720F9 		BL	XORR
 2471 0fe8 FFF7C4F8 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 48


 2472 0fec 1C100018 		.word	KTAP2+MAPOFFSET
 2473 0ff0 FFF7A3F8 		_DOLIT	BKSPP
 2473      08000000 
 2474 0ff8 FFF716F9 		BL	XORR
 2475 0ffc FFF7BAF8 		BL	QBRAN
 2476 1000 14100018 		.word	KTAP1+MAPOFFSET
 2477 1004 FFF75EF9 		BL	BLANK
 2478 1008 FFF7D6FF 		BL	TAP
 2479 100c 52F804FB 		_UNNEST
 2480 1010 00000000 		.word	0			// patch
 2481              	KTAP1:
 2482 1014 FFF7AAFF 	  BL	BKSP
 2483 1018 52F804FB 		_UNNEST
 2484              	KTAP2:
 2485 101c FFF7E2F8 	  BL	DROP
 2486 1020 FFF7E8F8 		BL	SWAP
 2487 1024 FFF7DEF8 		BL	DROP
 2488 1028 FFF7E0F8 		BL	DUPP
 2489 102c 52F804FB 		_UNNEST
 2490              	
 2491              	//    ACCEPT	( b u -- b u )
 2492              	// 	Accept characters to input buffer. Return with actual count.
 2493              		_HEADER ACCEP,6,"ACCEPT"
 2494 1030 42F804ED 		_NEST
 2495 1034 FFF7E2F8 		BL	OVER
 2496 1038 FFF710F9 		BL	PLUS
 2497 103c FFF7DEF8 		BL	OVER
 2498              	ACCP1:
 2499 1040 FFF768F9 	  BL	DDUP
 2500 1044 FFF7F0F8 		BL	XORR
 2501 1048 FFF794F8 		BL	QBRAN
 2502 104c 7C100018 		.word	ACCP4+MAPOFFSET
 2503 1050 FFF712FD 		BL	KEY
 2504 1054 FFF7CAF8 		BL	DUPP
 2505 1058 FFF734F9 		BL	BLANK
 2506 105c FFF76DF8 		_DOLIT	127
 2506      7F000000 
 2507 1064 FFF74CFA 		BL	WITHI
 2508 1068 FFF784F8 		BL	QBRAN
 2509 106c 76100018 		.word	ACCP2+MAPOFFSET
 2510 1070 FFF7A2FF 		BL	TAP
 2511 1074 01E0     		B	ACCP3
 2512              	ACCP2:
 2513 1076 FFF7ADFF 	  BL	KTAP
 2514              	// 	BL	ATEXE
 2515              	ACCP3:	  
 2516 107a E1E7     		B	ACCP1
 2517              	ACCP4:
 2518 107c FFF7B2F8 	  BL	DROP
 2519 1080 FFF7BCF8 		BL	OVER
 2520 1084 FFF7EEF8 		BL	SUBB
 2521 1088 52F804FB 		_UNNEST
 2522              	
 2523              	//    QUERY	( -- )
 2524              	// 	Accept input stream to terminal input buffer.
 2525              		_HEADER QUERY,5,"QUERY"
 2526 108c 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 49


 2527 1090 FFF71AFB 		BL	TIB
 2528 1094 FFF751F8 		_DOLIT	80
 2528      50000000 
 2529 109c FFF7C8FF 		BL	ACCEP
 2530 10a0 FFF7EAF9 		BL	NTIB
 2531 10a4 FFF77AF8 		BL	STORE
 2532 10a8 FFF79CF8 		BL	DROP
 2533 10ac FFF745F8 		_DOLIT	0
 2533      00000000 
 2534 10b4 FFF7DAF9 		BL	INN
 2535 10b8 FFF770F8 		BL	STORE
 2536 10bc 52F804FB 		_UNNEST
 2537              	
 2538              	// **************************************************************************
 2539              	//  Error handling
 2540              	
 2541              	//    ABORT	( a -- )
 2542              	// 	Reset data stack and jump to QUIT.
 2543              		_HEADER ABORT,5,"ABORT"
 2544 10c0 42F804ED 		_NEST
 2545 10c4 FFF7E2FC 		BL	SPACE
 2546              	ABORT1:
 2547 10c8 FFF78EF9 		BL	COUNT
 2548 10cc FFF7FAFC 		BL	TYPEE
 2549 10d0 FFF733F8 		_DOLIT	0X3F
 2549      3F000000 
 2550 10d8 FFF722F8 		BL	EMIT
 2551 10dc FFF706FD 		BL	CR
 2552 10e0 00F08AF8 		BL	PRESE
 2553 10e4 00F092B8 		B.W	QUIT
 2554              	
 2555              	//    _abort"	( f -- )
 2556              	// 	Run time routine of ABORT" . Abort with a message.
 2557              	
 2558              	// 	.word	_ABORT+MAPOFFSET
 2559              	// _ABORQ	.byte  COMPO+6
 2560              	// 	.ascii "abort\""
 2561              	// 	.p2align 2 	
 2562              	ABORQ:
 2563 10e8 42F804ED 		_NEST
 2564 10ec FFF70EFD 		BL	DOSTR 
 2565 10f0 FFF780F8 		BL	SWAP 
 2566 10f4 FFF73EF8 		BL	QBRAN
 2567 10f8 FE100018 		.word	1f+MAPOFFSET	// text flag
 2568 10fc E4E7     		B	ABORT1 
 2569              	1:
 2570 10fe FFF771F8 		BL	DROP
 2571 1102 52F804FB 		_UNNEST			// drop error
 2572              	
 2573              	// **************************************************************************
 2574              	//  The text interpreter
 2575              	
 2576              	//    $INTERPRET  ( a -- )
 2577              	// 	Interpret a word. If failed, try to convert it to an integer.
 2578 1106 00BF     		_HEADER INTER,10,"$INTERPRET"
 2579 1108 42F804ED 		_NEST
 2580 110c FFF724FF 		BL	NAMEQ
ARM GAS  stm32eforth.s 			page 50


 2581 1110 FFF7EEF8 		BL	QDUP	// ?defined
 2582 1114 FFF72EF8 		BL	QBRAN
 2583 1118 48110018 		.word	INTE1+MAPOFFSET
 2584 111c FFF744F8 		BL	AT
 2585 1120 FFF70BF8 		_DOLIT	COMPO
 2585      40000000 
 2586 1128 FFF772F8 		BL	ANDD	// ?compile only lexicon bits
 2587 112c FFF7DCFF 		BL	ABORQ
 2588 1130 0D       		.byte	13
 2589 1131 20636F6D 		.ascii " compile only"
 2589      70696C65 
 2589      206F6E6C 
 2589      79
 2590 113e 00BF     		.p2align 2 	
 2591 1140 FFF704F8 		BL	EXECU
 2592 1144 52F804FB 		_UNNEST			// execute defined word
 2593              	INTE1:
 2594 1148 FFF700FC 	  BL	NUMBQ
 2595 114c FFF712F8 		BL	QBRAN
 2596 1150 58110018 		.word	INTE2+MAPOFFSET
 2597 1154 52F804FB 		_UNNEST
 2598              	INTE2:
 2599 1158 FFF7B2BF 	  B.W	ABORT	// error
 2600              	
 2601              	//    [	   ( -- )
 2602              	// 	Start the text interpreter.
 2603              		_HEADER LBRAC,IMEDD+1,"["
 2604 115c 42F804ED 		_NEST
 2605 1160 FEF7EBFF 		_DOLIT	INTER+MAPOFFSET
 2605      08110018 
 2606 1168 FFF78CF9 		BL	TEVAL
 2607 116c FFF716F8 		BL	STORE
 2608 1170 52F804FB 		_UNNEST
 2609              	
 2610              	//    .OK	 ( -- )
 2611              	// 	Display "ok" only while interpreting.
 2612              		_HEADER DOTOK,3,".OK"
 2613 1174 42F804ED 		_NEST
 2614 1178 FEF7DFFF 		_DOLIT	INTER+MAPOFFSET
 2614      08110018 
 2615 1180 FFF780F9 		BL	TEVAL
 2616 1184 FFF710F8 		BL	AT
 2617 1188 FFF7EAF8 		BL	EQUAL
 2618 118c FEF7F2FF 		BL	QBRAN
 2619 1190 9C110018 		.word	DOTO1+MAPOFFSET
 2620 1194 FFF7E2FC 		BL	DOTQP
 2621 1198 03       		.byte	3
 2622 1199 206F6B   		.ascii " ok"
 2623              	DOTO1:
 2624 119c FFF7A6FC 		BL	CR
 2625 11a0 52F804FB 		_UNNEST
 2626              	
 2627              	//    ?STACK	( -- )
 2628              	// 	Abort if the data stack underflows.
 2629              		_HEADER QSTAC,6,"?STACK"
 2630 11a4 42F804ED 		_NEST
 2631 11a8 FFF764FA 		BL	DEPTH
ARM GAS  stm32eforth.s 			page 51


 2632 11ac FFF72AF8 		BL	ZLESS	// check only for underflow
 2633 11b0 FFF79AFF 		BL	ABORQ
 2634 11b4 0A       		.byte	10
 2635 11b5 20756E64 		.ascii " underflow"
 2635      6572666C 
 2635      6F77
 2636 11bf 00       		.p2align 2 	
 2637 11c0 52F804FB 		_UNNEST
 2638              	
 2639              	//    EVAL	( -- )
 2640              	// 	Interpret the input stream.
 2641              		_HEADER EVAL,4,"EVAL"
 2642 11c4 42F804ED 		_NEST
 2643              	EVAL1:
 2644 11c8 FFF716FE 	    BL	TOKEN
 2645 11cc FFF70EF8 		BL	DUPP
 2646 11d0 FEF7F2FF 		BL	CAT	// ?input stream empty
 2647 11d4 FEF7CEFF 		BL	QBRAN
 2648 11d8 EC110018 		.word	EVAL2+MAPOFFSET
 2649 11dc FFF752F9 		BL	TEVAL
 2650 11e0 FFF776FA 		BL	ATEXE
 2651 11e4 FFF7DEFF 		BL	QSTAC	// evaluate input, check stack
 2652 11e8 FFF7EEBF 		B.W	EVAL1
 2653              	EVAL2:
 2654 11ec FEF7FAFF 		BL	DROP
 2655 11f0 FFF7C0FF 		BL	DOTOK
 2656 11f4 52F804FB 		_UNNEST	// prompt
 2657              	
 2658              	//    PRESET	( -- )
 2659              	// 	Reset data stack pointer and the terminal input buffer.
 2660              		_HEADER PRESE,6,"PRESET"
 2661 11f8 42F804ED 		_NEST
 2662 11fc 4FF49D41 		_MOV32 R1,SPP // init SP 
 2662      C2F20001 
 2663 1204 85EA0505 		EOR	R5,R5,R5//  init TOS=0
 2664 1208 52F804FB 		_UNNEST 
 2665              	
 2666              	//    QUIT	( -- )
 2667              	// 	Reset return stack pointer and start text interpreter.
 2668              		_HEADER QUIT,4,"QUIT"
 2669 120c 42F804ED 		_NEST
 2670 1210 4FF49F42 		_MOV32 R2,RPP
 2670      C2F20002 
 2671              	QUIT1:
 2672 1218 FFF7A0FF 		BL	LBRAC			// start interpretation
 2673              	QUIT2:
 2674 121c FFF736FF 		BL	QUERY			// get input
 2675 1220 FFF7D0FF 		BL	EVAL
 2676 1224 FEF7B2FF 		BL	BRAN
 2677 1228 1C120018 		.word	QUIT2+MAPOFFSET	// continue till error
 2678              	
 2679              	/***************************
 2680              	//  Flash memory interface
 2681              	***************************/
 2682              	// UNLOCK ( T|F -- )
 2683              	// lock or unlock FLASH write 
 2684              		_HEADER UNLOCK,6,"UNLOCK"
ARM GAS  stm32eforth.s 			page 52


 2685 122c 42F804ED 		_NEST 
 2686 1230 FEF7A0FF 		BL QBRAN
 2687 1234 54120018 		.word LOCK+MAPOFFSET
 2688 1238 D548     		ldr	r0, flash_regs 
 2689 123a 4FF03404 		mov r4,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 2690 123e C460     		str r4,[r0,#FLASH_SR]
 2691 1240 0469     		ldr r4,[r0,#FLASH_CR]
 2692 1242 14F0800F 		tst r4,#(1<<7)
 2693 1246 03D0     		beq 1f 
 2694 1248 D24C     		ldr	r4, flash_regs+4 // key1
 2695 124a 4460     		str	r4, [r0, #FLASH_KEYR]
 2696 124c D24C     		ldr	r4, flash_regs+8 // key2 
 2697 124e 4460     		str	r4, [r0, #FLASH_KEYR]
 2698              		/* unlock option registers */
 2699              	/*
 2700              		ldr	r4, flash_regs+4 
 2701              		str	r4, [r0, #FLASH_OPTKEYR]
 2702              		ldr	r4, flash_regs+8
 2703              		str	r4, [r0, #FLASH_OPTKEYR]
 2704              	*/ 
 2705              	1:
 2706 1250 52F804FB 		_UNNEST
 2707              	 // lock flash memory
 2708              	LOCK: 
 2709 1254 CE48     		ldr r0,flash_regs  
 2710              	//	ldr r4,[r0,#FLASH_CR]
 2711 1256 4FF08004 		mov r4,#(1<<7)
 2712 125a 0461     		str r4,[r0,#FLASH_CR]
 2713 125c 52F804FB 		_UNNEST  
 2714              	
 2715              	WAIT_BSY:
 2716 1260 CB48     		ldr	r0,flash_regs
 2717              	WAIT1:
 2718 1262 C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 2719 1264 14F00104 		ands	r4, #0x1	//  BSY
 2720 1268 FBD1     		bne	WAIT1
 2721 126a 7047     		_NEXT
 2722              	
 2723              	//    ERASE_PAGE	   ( adr -- )
 2724              	// 	  Erase one page of flash memory.
 2725              	//    stm32f103 page size is 1024 bytes 
 2726              	//    adr is any address inside page to erase 
 2727              		_HEADER EPAGE,10,"ERASE_PAGE"
 2728 126c 42F804ED 		_NEST
 2729 1270 FFF7F6FF 		bl	WAIT_BSY
 2730 1274 FEF761FF 		_DOLIT 1 
 2730      01000000 
 2731 127c FFF7D6FF 		bl  UNLOCK 
 2732 1280 C348     		ldr r0,flash_regs 	 
 2733 1282 4FF00204 		mov r4,#2 // set PER bit 
 2734 1286 0461     		str r4,[r0,#FLASH_CR]
 2735 1288 4561     		str r5,[r0,#FLASH_AR] // page to erase address 
 2736 128a 0469     		ldr	r4,[r0, #FLASH_CR]	
 2737 128c 44F04004 		orr	R4,#0x40	//  set STRT bit   
 2738 1290 0461     		str	r4,[r0, #FLASH_CR]	//  start erasing
 2739 1292 FFF7E5FF 	 	bl	WAIT_BSY // wait until done
 2740 1296 FEF750FF 		_DOLIT 0 
ARM GAS  stm32eforth.s 			page 53


 2740      00000000 
 2741 129e FFF7C5FF 		bl	UNLOCK  // lock flash write 
 2742 12a2 C568     		ldr r5,[r0,#FLASH_SR] // check for errors 
 2743 12a4 05F01405 		and r5,r5,#(5<<2)
 2744 12a8 FFF71EFF 		bl ABORQ 
 2745 12ac 0D       		.byte 13
 2746 12ad 20657261 		.ascii " erase error!"
 2746      73652065 
 2746      72726F72 
 2746      21
 2747 12ba 00BF     		.p2align 2
 2748 12bc 52F804FB 		_UNNEST
 2749              	
 2750              	// store 16 bit word
 2751              	// expect flash unlocked  
 2752              	HWORD_WRITE: // ( hword address -- )
 2753 12c0 42F804ED 		_NEST
 2754 12c4 0469     		ldr	r4, [r0, #FLASH_CR]	//  FLASH_CR
 2755              	//	bic r4,#(1<<9)|(1<<5)|(1<<4)|(1<<2)|(1<<1) //  clear OPTWRE|OPTER|OPTPG|MER|PER
 2756 12c6 4FF00104 		mov r4,#1 // set PG 
 2757 12ca 0461     		str r4,[r0,#FLASH_CR]
 2758 12cc 2E46     		mov r6,r5 
 2759 12ce 51F8045B 		_POP 
 2760 12d2 3580     		strh r5,[r6] 
 2761 12d4 FFF7C4FF 		bl WAIT_BSY 
 2762 12d8 C568     		ldr r5,[r0,#FLASH_SR]
 2763 12da 05F01405 		and r5,r5,#(5<<2) 
 2764 12de FEF749FF 		bl QBRAN
 2765 12e2 F8120018 		.word 1f+MAPOFFSET 
 2766 12e6 FFF7FFFE 		bl ABORQ
 2767 12ea 0D       		.byte 13
 2768 12eb 20777269 		.ascii " write error!"
 2768      74652065 
 2768      72726F72 
 2768      21
 2769              		.p2align 2
 2770              	1:	 
 2771 12f8 52F804FB 		_UNNEST 
 2772              	
 2773              	
 2774              	//    I!	   ( data address -- )
 2775              	// 	   Write one word into flash memory
 2776              	//	   address must even 
 2777              		_HEADER ISTOR,2,"I!"
 2778 12fc 42F804ED 		_NEST
 2779 1300 FFF7AEFF 		bl	WAIT_BSY
 2780 1304 FEF719FF 		_DOLIT 1 
 2780      01000000 
 2781 130c FFF78EFF 		bl  UNLOCK 
 2782 1310 FFF700F8 		BL DDUP 
 2783 1314 FEF75CFF 		BL TOR 
 2784 1318 FEF75AFF 		BL TOR 
 2785 131c FFF7D0FF 		BL HWORD_WRITE
 2786 1320 FEF74CFF 		BL RFROM 
 2787 1324 4FEA3545 		ror r5,r5,#16
 2788 1328 FEF748FF 		BL RFROM 
 2789 132c 05F10205 		add r5,r5,#2 
ARM GAS  stm32eforth.s 			page 54


 2790 1330 FFF7C6FF 		BL HWORD_WRITE 
 2791 1334 FEF701FF 		_DOLIT 0
 2791      00000000 
 2792 133c FFF776FF 		bl UNLOCK 
 2793 1340 52F804FB 		_UNNEST
 2794              	
 2795              	// IMG_SIZE ( -- u )
 2796              	// return flash pages required to save 
 2797              	// user ram  
 2798              		_HEADER IMG_SIZE,8,"IMG_SIZE"
 2799 1344 42F804ED 		_NEST
 2800 1348 FEF7F7FE 		_DOLIT VARS_END_OFS-IMG_SIGN_OFS 
 2800      38000000 
 2801 1350 FFF7C2F8 		BL USER_END 
 2802 1354 FFF7BAF8 		BL USER_BEGIN 
 2803 1358 FEF784FF 		BL SUBB 
 2804 135c FEF77EFF 		BL PLUS 
 2805 1360 FEF7EBFE 		_DOLIT 1024 
 2805      00040000 
 2806 1368 FFF728F9 		BL SLMOD 
 2807 136c FEF742FF 		BL SWAP 
 2808 1370 FEF700FF 		BL QBRAN 
 2809 1374 7C130018 		.word 1f+MAPOFFSET 
 2810 1378 FEF78CFF 		BL ONEP
 2811              	1:
 2812 137c 52F804FB 		_UNNEST  
 2813              	
 2814              	// IMG? (  -- T|F )
 2815              	// check if an image has been saved in FLASH 
 2816              		_HEADER IMGQ,4,"IMG?"
 2817 1380 42F804ED 		_NEST 
 2818 1384 FFF7B0F8 		BL IMG_ADR 
 2819 1388 FEF70EFF 		BL AT 
 2820 138c FFF7B2F8 		BL IMG_SIGN  
 2821 1390 FEF70AFF 		BL AT 
 2822 1394 FEF748FF 		BL XORR  
 2823 1398 FEF7DAFF 		BL ZEQUAL
 2824 139c 52F804FB 		_UNNEST
 2825              	
 2826              	// LOAD_IMG (  -- )
 2827              	// Load image from FLASH to RAM. 
 2828              		_HEADER LOAD_IMG,8,"LOAD_IMG"
 2829 13a0 42F804ED 		_NEST 
 2830 13a4 FFF7ECFF 		BL IMGQ 
 2831 13a8 FEF7E4FE 		BL QBRAN 
 2832 13ac F4130018 		.word 1f+MAPOFFSET
 2833              	/* copy system variables to RAM */
 2834 13b0 FFF79AF8 		BL IMG_ADR 
 2835 13b4 FEF71AFF 		BL DUPP 
 2836 13b8 FEF70AFF 		BL TOR   // save source address 
 2837 13bc FFF79AF8 		BL IMG_SIGN 
 2838 13c0 41F8045D 		_PUSH 
 2839 13c4 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 2840 13c8 FEF710FF 		BL DUPP 
 2841 13cc FEF700FF 		BL TOR 
 2842 13d0 FFF79AF9 		BL MOVE // ( src dest count -- ) R: src count 
 2843              	/* copy user definitions */
ARM GAS  stm32eforth.s 			page 55


 2844 13d4 FEF7F2FE 		BL RFROM 
 2845 13d8 FEF7F0FE 		BL RFROM  
 2846 13dc FEF73EFF 		BL PLUS // source address  
 2847 13e0 FFF774F8 		BL USER_BEGIN // destination address
 2848 13e4 FFF760F9 		BL HERE  
 2849 13e8 FEF708FF 		BL OVER 
 2850 13ec FEF73AFF 		BL SUBB  // byte count 
 2851 13f0 FFF78AF9 		BL MOVE
 2852 13f4 52F804FB 	1:	_UNNEST  
 2853              	
 2854              	// ERASE_MPG ( u1 u2 -- )
 2855              	// erase many pages 
 2856              	// u1 first page number 
 2857              	// u2 how many pages  
 2858              		_HEADER ERASE_MPG,9,"ERASE_MPG"
 2859 13f8 42F804ED 		_NEST 
 2860 13fc FEF7E8FE 		BL TOR 
 2861 1400 00F040F8 		BL PG_TO_ADR 
 2862 1404 FEF7C2FE 		BL BRAN 
 2863 1408 20140018 		.word 2f+MAPOFFSET 
 2864              	1:
 2865 140c FEF7EEFE 		BL DUPP 
 2866 1410 FEF7DEFE 		BL TOR 
 2867 1414 FFF72AFF 		BL EPAGE 
 2868 1418 FEF7D0FE 		BL RFROM
 2869 141c 05F58065 		add r5,#PAGE_SIZE 
 2870              	2:
 2871 1420 FEF799FE 		BL DONXT
 2872 1424 0C140018 		.word 1b+MAPOFFSET 
 2873 1428 51F8045B 		_POP 
 2874 142c 52F804FB 		_UNNEST 
 2875              	
 2876              	// FLSH_WR ( src dest u -- dest+u )
 2877              	// write u words to flash memory 
 2878              		_HEADER FLSH_WR,7,"FLSH_WR"
 2879 1430 42F804ED 		_NEST 
 2880 1434 FEF7CCFE 		BL TOR
 2881 1438 FEF7A8FE 		BL BRAN 
 2882 143c 60140018 		.word 3f+MAPOFFSET  
 2883              	/* write system variables to FLASH */
 2884 1440 FEF7C6FE 	2:  BL TOR  // destination address 
 2885 1444 FEF7D2FE 		BL DUPP 
 2886 1448 FEF7AEFE 		BL AT   // get data 
 2887 144c FEF7BCFE 		BL RAT  // get destination address 
 2888 1450 FFF754FF 		BL ISTOR
 2889 1454 FEF72EFF 		BL CELLP  // increment source address 
 2890 1458 FEF7B0FE 		BL RFROM 
 2891 145c FEF72AFF 		BL CELLP  // increment dest address 
 2892 1460 FEF779FE 	3:	BL DONXT 
 2893 1464 40140018 		.word 2b+MAPOFFSET
 2894 1468 FEF7B2FE 		BL TOR 
 2895 146c FEF7BAFE 		BL DROP 
 2896 1470 FEF7A4FE 		BL RFROM 
 2897 1474 52F804FB 		_UNNEST 
 2898              	
 2899              	// ADR>PG ( a -- n )
 2900              	// convert address to page number, {0..127} 
ARM GAS  stm32eforth.s 			page 56


 2901              		_HEADER ADR_TO_PG,6,"ADR>PG"
 2902 1478 4FEA9525 		lsr r5,#10 
 2903 147c 05F07F05 		and r5,#127 
 2904 1480 7047     		_NEXT  
 2905              	
 2906              	// PG>ADR ( n -- a )
 2907              	// convert page# to address 
 2908 1482 00BF     		_HEADER PG_TO_ADR,6,"PG>ADR"
 2909 1484 C0F20205 		movt r5,#2
 2910 1488 4FEA8525 		lsl r5,#10 
 2911 148c 7047     		_NEXT 
 2912              	
 2913              	// ERASE_IMG (  -- )
 2914              	// erase image in from FLASH  
 2915 148e 00BF     		_HEADER ERASE_IMG,9,"ERASE_IMG"
 2916 1490 42F804ED 		_NEST
 2917 1494 FFF728F8 		BL IMG_ADR 
 2918 1498 FFF754FF 		BL IMG_SIZE 
 2919 149c FEF798FE 		BL TOR 
 2920 14a0 FEF774FE 		BL BRAN 
 2921 14a4 B4140018 		.word  2f+MAPOFFSET 
 2922 14a8 FEF7A0FE 	1:	BL DUPP 
 2923 14ac FFF7DEFE 		BL EPAGE
 2924 14b0 05F58065 		ADD R5,#PAGE_SIZE 
 2925 14b4 FEF74FFE 	2:	BL DONXT 
 2926 14b8 A8140018 		.word 1b+MAPOFFSET 
 2927 14bc FEF792FE 		BL DROP 
 2928 14c0 52F804FB 		_UNNEST 
 2929              	
 2930              	// SAVE_IMG ( -- )
 2931              	// save in FLASH memory system variables and user defintitions.
 2932              		_HEADER SAVE_IMG,8,"SAVE_IMG"
 2933 14c4 42F804ED 		_NEST 
 2934 14c8 FFF7EEF8 		BL HERE 
 2935 14cc FEF7FEFF 		BL USER_BEGIN
 2936 14d0 FEF746FF 		BL EQUAL 
 2937 14d4 FEF74EFE 		BL QBRAN
 2938 14d8 E0140018 		.word 1f+MAPOFFSET 
 2939 14dc 52F804FB 		_UNNEST  // nothing to save 
 2940 14e0 FFF74EFF 	1:	BL IMGQ 
 2941 14e4 FEF746FE 		BL QBRAN 
 2942 14e8 F0140018 		.word 2f+MAPOFFSET
 2943              	/* delete saved image */
 2944 14ec FFF7D0FF 		BL ERASE_IMG 
 2945              	/* save system variables */
 2946              	2:	
 2947 14f0 FFF700F8 		BL IMG_SIGN // src address 
 2948 14f4 FEF7F8FF 		BL IMG_ADR  //  ( src dest --  
 2949 14f8 41F8045D 		_PUSH 
 2950 14fc 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 2951 1500 FEF7EAFE 		BL CELLSL  // word count 
 2952 1504 FFF794FF 		BL FLSH_WR  // ( src dest count -- dest+u )
 2953              	/* write user definitions */
 2954 1508 FEF7E0FF 		BL USER_BEGIN
 2955 150c FEF772FE 		BL SWAP  // ( src dest+ -- )
 2956 1510 FFF7CAF8 		BL HERE   
 2957 1514 FEF7DAFF 		BL USER_BEGIN 
ARM GAS  stm32eforth.s 			page 57


 2958 1518 FEF7A4FE 		BL SUBB 
 2959 151c FEF7DCFE 		BL CELLSL  // src dest+ count -- 
 2960 1520 FFF786FF 		BL FLSH_WR  
 2961 1524 52F804FB 		_UNNEST 
 2962              	
 2963              	// TURNKEY ( -- "WORD") 
 2964              	// set autorun program in 'BOOT variable 
 2965              	// and save image in slot 0.
 2966              		_HEADER TURNKEY,7,"TURNKEY"
 2967 1528 42F804ED 		_NEST 
 2968 152c 00F036F8 		BL TICK 
 2969 1530 FEF786FF 		BL TBOOT 
 2970 1534 FEF732FE 		BL STORE 
 2971 1538 FFF7C4FF 		BL SAVE_IMG 
 2972 153c 52F804FB 		_UNNEST
 2973              	
 2974              	// FORGET ( -- ) "word"
 2975              	// forget all words defined from "word"	
 2976              		_HEADER FORGET,6,"FORGET"
 2977 1540 42F804ED 		_NEST 
 2978 1544 FFF758FC 		BL TOKEN 
 2979 1548 FEF750FE 		BL DUPP 
 2980 154c FEF712FE 		BL QBRAN 
 2981 1550 FEF7F3FD 		_DOLIT 9f+MAPOFFSET 
 2981      8C150018 
 2982 1558 FFF7FEFC 		BL NAMEQ // ( a -- ca na | a 0 )
 2983 155c FEF7C8FE 		BL QDUP 
 2984 1560 FEF708FE 		BL QBRAN 
 2985 1564 88150018 		.word 8f+MAPOFFSET
 2986 1568 FEF7A8FE 		BL CELLM // ( ca la )
 2987 156c FEF73EFE 		BL DUPP 
 2988 1570 FEF79AFF 		BL CPP   
 2989 1574 FEF712FE 		BL STORE
 2990 1578 FEF716FE 		BL AT 
 2991 157c FEF7A0FF 		BL LAST 
 2992 1580 FEF70CFE 		BL STORE
 2993 1584 00F0A0F9 		BL OVERT 
 2994 1588 FEF72CFE 	8:  BL DROP 
 2995 158c 52F804FB 	9:	_UNNEST 
 2996              	
 2997              	flash_regs:
 2998 1590 00200240 		.word FLASH_BASE_ADR // 0 
 2999 1594 23016745 		.word FLASH_KEY1   // 4 
 3000 1598 AB89EFCD 		.word FLASH_KEY2   // 8
 3001              	
 3002              	// **************************************************************************
 3003              	//  The compiler
 3004              	
 3005              	//    '	   ( -- ca )
 3006              	// 	Search context vocabularies for the next word in input stream.
 3007              		_HEADER TICK,1,"'"
 3008 159c 42F804ED 		_NEST
 3009 15a0 FFF72AFC 		BL	TOKEN
 3010 15a4 FFF7D8FC 		BL	NAMEQ	// ?defined
 3011 15a8 FEF7E4FD 		BL	QBRAN
 3012 15ac B4150018 		.word	TICK1+MAPOFFSET
 3013 15b0 52F804FB 		_UNNEST	// yes, push code address
ARM GAS  stm32eforth.s 			page 58


 3014 15b4 FFF784BD 	TICK1:	B.W	ABORT	// no, error
 3015              	
 3016              	//    ALLOT	( n -- )
 3017              	// 	Allocate n bytes to the ram area.
 3018              		_HEADER ALLOT,5,"ALLOT"
 3019 15b8 42F804ED 		_NEST
 3020 15bc FEF774FF 		BL	CPP
 3021 15c0 FEF7FAFE 		BL	PSTOR
 3022 15c4 52F804FB 		_UNNEST			// adjust code pointer
 3023              	
 3024              	//    ,	   ( w -- )
 3025              	// 	Compile an integer into the code dictionary.
 3026              		_HEADER COMMA,1,","
 3027 15c8 42F804ED 		_NEST
 3028 15cc FFF76CF8 		BL	HERE
 3029 15d0 FEF70CFE 		BL	DUPP
 3030 15d4 FEF76EFE 		BL	CELLP	// cell boundary
 3031 15d8 FEF766FF 		BL	CPP
 3032 15dc FEF7DEFD 		BL	STORE
 3033 15e0 FEF7DCFD 		BL	STORE
 3034 15e4 52F804FB 		_UNNEST	// adjust code pointer, compile
 3035              		.p2align 2 
 3036              	//    [COMPILE]   ( -- //  string> )
 3037              	// 	Compile the next immediate word into code dictionary.
 3038              		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3039 15e8 42F804ED 		_NEST
 3040 15ec FFF7D6FF 		BL	TICK
 3041 15f0 FFF7EAFF 		BL	COMMA
 3042 15f4 52F804FB 		_UNNEST
 3043              	
 3044              	//    COMPILE	( -- )
 3045              	// 	Compile the next address in colon list to code dictionary.
 3046              		_HEADER COMPI,COMPO+7,"COMPILE"
 3047 15f8 42F804ED 		_NEST
 3048 15fc FEF7DEFD 		BL	RFROM
 3049 1600 25F00105 		BIC	R5,R5,#1
 3050 1604 FEF7F2FD 		BL	DUPP
 3051 1608 FEF7CEFD 		BL	AT
 3052 160c 00F0A3F9 		BL	CALLC			// compile BL instruction
 3053 1610 FEF750FE 		BL	CELLP
 3054 1614 45F00105 		ORR	R5,R5,#1
 3055 1618 FEF7DAFD 		BL	TOR
 3056 161c 52F804FB 		_UNNEST			// adjust return address
 3057              	
 3058              	//    LITERAL	( w -- )
 3059              	// 	Compile tos to code dictionary as an integer literal.
 3060              		_HEADER LITER,IMEDD+7,"LITERAL"
 3061 1620 40090018 		.word	_COMPI+MAPOFFSET
 3062 1624 42F804ED 		_NEST
 3063 1628 FFF7E6FF 		BL	COMPI
 3064 162c 3A010018 		.word	DOLIT+MAPOFFSET
 3065 1630 FFF7CAFF 		BL	COMMA
 3066 1634 52F804FB 		_UNNEST
 3067              	
 3068              	//    $,"	( -- )
 3069              	// 	Compile a literal string up to next " .
 3070              	
ARM GAS  stm32eforth.s 			page 59


 3071              	// 	.word	_LITER+MAPOFFSET
 3072              	// _STRCQ	.byte  3
 3073              	// 	.ascii "$$,"""
 3074              	// 	.p2align 2 	
 3075              	STRCQ:
 3076 1638 42F804ED 		_NEST
 3077 163c FEF77DFD 		_DOLIT	-4
 3077      FCFFFFFF 
 3078 1644 FEF730FF 		BL	CPP
 3079 1648 FEF7B6FE 		BL	PSTOR
 3080 164c FEF775FD 		_DOLIT	'\"'
 3080      22000000 
 3081 1654 FFF7C4FB 		BL	WORDD			// move word to code dictionary
 3082 1658 FEF7C6FE 		BL	COUNT
 3083 165c FEF7FEFD 		BL	PLUS
 3084 1660 FEF7E0FF 		BL	ALGND			// calculate aligned end of string
 3085 1664 FEF720FF 		BL	CPP
 3086 1668 FEF798FD 		BL	STORE
 3087 166c 52F804FB 		_UNNEST 			// adjust the code pointer
 3088              	
 3089              	// **************************************************************************
 3090              	//  Structures
 3091              	
 3092              	//    FOR	 ( -- a )
 3093              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3094              		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3095 1670 42F804ED 		_NEST
 3096 1674 FFF7C0FF 		BL	COMPI
 3097 1678 D0010018 		.word	TOR+MAPOFFSET
 3098 167c FFF714F8 		BL	HERE
 3099 1680 52F804FB 		_UNNEST
 3100              	
 3101              	//    BEGIN	( -- a )
 3102              	// 	Start an infinite or indefinite loop structure.
 3103              		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3104 1684 42F804ED 		_NEST
 3105 1688 FFF70EF8 		BL	HERE
 3106 168c 52F804FB 		_UNNEST
 3107              		.p2align 2 
 3108              	//    NEXT	( a -- )
 3109              	// 	Terminate a FOR-NEXT loop structure.
 3110              		_HEADER NEXT,COMPO+IMEDD+4,"NEXT"
 3111 1690 42F804ED 		_NEST
 3112 1694 FFF7B0FF 		BL	COMPI
 3113 1698 56010018 		.word	DONXT+MAPOFFSET
 3114 169c FFF794FF 		BL	COMMA
 3115 16a0 52F804FB 		_UNNEST
 3116              	
 3117              	//    UNTIL	( a -- )
 3118              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3119              		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3120 16a4 42F804ED 		_NEST
 3121 16a8 FFF7A6FF 		BL	COMPI
 3122 16ac 74010018 		.word	QBRAN+MAPOFFSET
 3123 16b0 FFF78AFF 		BL	COMMA
 3124 16b4 52F804FB 		_UNNEST
 3125              	
ARM GAS  stm32eforth.s 			page 60


 3126              	//    AGAIN	( a -- )
 3127              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3128              		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3129 16b8 42F804ED 		_NEST
 3130 16bc FFF79CFF 		BL	COMPI
 3131 16c0 8C010018 		.word	BRAN+MAPOFFSET
 3132 16c4 FFF780FF 		BL	COMMA
 3133 16c8 52F804FB 		_UNNEST
 3134              	
 3135              	//    IF	  ( -- A )
 3136              	// 	Begin a conditional branch structure.
 3137              		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3138 16cc 42F804ED 		_NEST
 3139 16d0 FFF792FF 		BL	COMPI
 3140 16d4 74010018 		.word	QBRAN+MAPOFFSET
 3141 16d8 FEF7E6FF 		BL	HERE
 3142 16dc FEF72DFD 		_DOLIT	4
 3142      04000000 
 3143 16e4 FEF7E0FE 		BL	CPP
 3144 16e8 FEF766FE 		BL	PSTOR
 3145 16ec 52F804FB 		_UNNEST
 3146              	
 3147              	//    AHEAD	( -- A )
 3148              	// 	Compile a forward branch instruction.
 3149              		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3150 16f0 42F804ED 		_NEST
 3151 16f4 FFF780FF 		BL	COMPI
 3152 16f8 8C010018 		.word	BRAN+MAPOFFSET
 3153 16fc FEF7D4FF 		BL	HERE
 3154 1700 FEF71BFD 		_DOLIT	4
 3154      04000000 
 3155 1708 FEF7CEFE 		BL	CPP
 3156 170c FEF754FE 		BL	PSTOR
 3157 1710 52F804FB 		_UNNEST
 3158              	
 3159              	//    REPEAT	( A a -- )
 3160              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3161              		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3162 1714 42F804ED 		_NEST
 3163 1718 FFF7CEFF 		BL	AGAIN
 3164 171c FEF7C4FF 		BL	HERE
 3165 1720 FEF768FD 		BL	SWAP
 3166 1724 FEF73AFD 		BL	STORE
 3167 1728 52F804FB 		_UNNEST
 3168              	
 3169              	//    THEN	( A -- )
 3170              	// 	Terminate a conditional branch structure.
 3171              		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3172 172c 42F804ED 		_NEST
 3173 1730 FEF7BAFF 		BL	HERE
 3174 1734 FEF75EFD 		BL	SWAP
 3175 1738 FEF730FD 		BL	STORE
 3176 173c 52F804FB 		_UNNEST
 3177              	
 3178              	//    AFT	 ( a -- a A )
 3179              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3180              		_HEADER AFT,COMPO+IMEDD+3,"AFT"
ARM GAS  stm32eforth.s 			page 61


 3181 1740 42F804ED 		_NEST
 3182 1744 FEF74EFD 		BL	DROP
 3183 1748 FFF7D2FF 		BL	AHEAD
 3184 174c FFF79AFF 		BL	BEGIN
 3185 1750 FEF750FD 		BL	SWAP
 3186 1754 52F804FB 		_UNNEST
 3187              	
 3188              	//    ELSE	( A -- A )
 3189              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3190              		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3191 1758 42F804ED 		_NEST
 3192 175c FFF7C8FF 		BL	AHEAD
 3193 1760 FEF748FD 		BL	SWAP
 3194 1764 FFF7E2FF 		BL	THENN
 3195 1768 52F804FB 		_UNNEST
 3196              	
 3197              	//    WHILE	( a -- A a )
 3198              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3199              		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3200 176c 42F804ED 		_NEST
 3201 1770 FFF7ACFF 		BL	IFF
 3202 1774 FEF73EFD 		BL	SWAP
 3203 1778 52F804FB 		_UNNEST
 3204              	
 3205              	//    ABORT"	( -- //  string> )
 3206              	// 	Conditional abort with an error message.
 3207              		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3208 177c 42F804ED 		_NEST
 3209 1780 FFF73AFF 		BL	COMPI
 3210 1784 E8100018 		.word	ABORQ+MAPOFFSET
 3211 1788 FFF756FF 		BL	STRCQ
 3212 178c 52F804FB 		_UNNEST
 3213              	
 3214              	//    $"	( -- //  string> )
 3215              	// 	Compile an inline string literal.
 3216              		_HEADER STRQ,IMEDD+2,"$\""
 3217 1790 42F804ED 		_NEST
 3218 1794 FFF730FF 		BL	COMPI
 3219 1798 400B0018 		.word	STRQP+MAPOFFSET
 3220 179c FFF74CFF 		BL	STRCQ
 3221 17a0 52F804FB 		_UNNEST
 3222              	
 3223              	//    ."	( -- //  string> )
 3224              	// 	Compile an inline word  literal to be typed out at run time.
 3225              		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3226 17a4 42F804ED 		_NEST
 3227 17a8 FFF726FF 		BL	COMPI
 3228 17ac 5C0B0018 		.word	DOTQP+MAPOFFSET
 3229 17b0 FFF742FF 		BL	STRCQ
 3230 17b4 52F804FB 		_UNNEST
 3231              	
 3232              	/*******************
 3233              	  Name compiler
 3234              	*******************/
 3235              	
 3236              	//    ?UNIQUE	( a -- a )
 3237              	// 	Display a warning message if the word already exists.
ARM GAS  stm32eforth.s 			page 62


 3238              		_HEADER UNIQU,7,"?UNIQUE"
 3239 17b8 42F804ED 		_NEST
 3240 17bc FEF716FD 		BL	DUPP
 3241 17c0 FFF7CAFB 		BL	NAMEQ			// ?name exists
 3242 17c4 FEF7D6FC 		BL	QBRAN
 3243 17c8 E4170018 		.word	UNIQ1+MAPOFFSET	// redefinitions are OK
 3244 17cc FFF7C6F9 		BL	DOTQP
 3245 17d0 07       		.byte	7
 3246 17d1 20726544 		.ascii " reDef "		// but warn the user
 3246      656620
 3247              		.p2align 2 	
 3248 17d8 FEF710FD 		BL	OVER
 3249 17dc FEF704FE 		BL	COUNT
 3250 17e0 FFF770F9 		BL	TYPEE			// just in case its not planned
 3251              	UNIQ1:
 3252 17e4 FEF7FEFC 		BL	DROP
 3253 17e8 52F804FB 		_UNNEST
 3254              	
 3255              	//    $,n	 ( na -- )
 3256              	// 	Build a new dictionary name using the data at na.
 3257              	
 3258              	// 	.word	_UNIQU+MAPOFFSET
 3259              	// _SNAME	.byte  3
 3260              	// 	.ascii "$,n"
 3261              	// 	.p2align 2 	
 3262              	SNAME:
 3263 17ec 42F804ED 		_NEST
 3264 17f0 FEF7FCFC 		BL	DUPP			//  na na
 3265 17f4 FEF7E0FC 		BL	CAT			//  ?null input
 3266 17f8 FEF7BCFC 		BL	QBRAN
 3267 17fc 34180018 		.word	SNAM1+MAPOFFSET
 3268 1800 FFF7DAFF 		BL	UNIQU			//  na
 3269 1804 FEF75CFE 		BL	LAST			//  na last
 3270 1808 FEF7CEFC 		BL	AT			//  na la
 3271 180c FFF7DCFE 		BL	COMMA			//  na
 3272 1810 FEF7ECFC 		BL	DUPP			//  na na
 3273 1814 FEF754FE 		BL	LAST			//  na na last
 3274 1818 FEF7C0FC 		BL	STORE			//  na , save na for vocabulary link
 3275 181c FEF7E4FD 		BL	COUNT			//  na+1 count
 3276 1820 FEF71CFD 		BL	PLUS			//  na+1+count
 3277 1824 FEF7FEFE 		BL	ALGND			//  word boundary
 3278 1828 FEF73EFE 		BL	CPP
 3279 182c FEF7B6FC 		BL	STORE			//  top of dictionary now
 3280 1830 52F804FB 		_UNNEST
 3281              	SNAM1:
 3282 1834 FFF784F9 		BL	STRQP
 3283 1838 07       		.byte	7
 3284 1839 206E616D 		.ascii " name? "
 3284      653F20
 3285 1840 FFF73EBC 		B.W	ABORT
 3286              	
 3287              	//    $COMPILE	( a -- )
 3288              	// 	Compile next word to code dictionary as a token or literal.
 3289              		_HEADER SCOMP,7,"$COMPILE"
 3290 1844 42F804ED 		_NEST
 3291 1848 FFF786FB 		BL	NAMEQ
 3292 184c FEF750FD 		BL	QDUP	// defined?
ARM GAS  stm32eforth.s 			page 63


 3293 1850 FEF790FC 		BL	QBRAN
 3294 1854 80180018 		.word	SCOM2+MAPOFFSET
 3295 1858 FEF7A6FC 		BL	AT
 3296 185c FEF76DFC 		_DOLIT	IMEDD
 3296      80000000 
 3297 1864 FEF7D4FC 		BL	ANDD	// immediate?
 3298 1868 FEF784FC 		BL	QBRAN
 3299 186c 78180018 		.word	SCOM1+MAPOFFSET
 3300 1870 FEF76CFC 		BL	EXECU
 3301 1874 52F804FB 		_UNNEST			// it's immediate, execute
 3302              	SCOM1:
 3303 1878 00F06DF8 		BL	CALLC			// it's not immediate, compile
 3304 187c 52F804FB 		_UNNEST	
 3305              	SCOM2:
 3306 1880 FFF764F8 		BL	NUMBQ
 3307 1884 FEF776FC 		BL	QBRAN
 3308 1888 94180018 		.word	SCOM3+MAPOFFSET
 3309 188c FFF7C8FE 		BL	LITER
 3310 1890 52F804FB 		_UNNEST			// compile number as integer
 3311              	SCOM3: // compilation abort 
 3312 1894 00F002F8 		BL COLON_ABORT 
 3313 1898 FFF712BC 		B.W	ABORT			// error
 3314              	
 3315              	// before aborting a compilation 
 3316              	// reset HERE and LAST
 3317              	// to previous values.  
 3318              	COLON_ABORT:
 3319 189c 42F804ED 		_NEST 
 3320 18a0 FEF70EFE 		BL LAST 
 3321 18a4 FEF780FC 		BL AT 
 3322 18a8 FEF708FD 		BL CELLM 
 3323 18ac FEF79EFC 		BL DUPP 
 3324 18b0 FEF7FAFD 		BL CPP  
 3325 18b4 FEF772FC 		BL STORE 
 3326 18b8 FEF776FC 		BL AT 
 3327 18bc FEF700FE 		BL LAST 
 3328 18c0 FEF76CFC 		BL STORE 
 3329 18c4 52F804FB 		_UNNEST 
 3330              	
 3331              	//    OVERT	( -- )
 3332              	// 	Link a new word into the current vocabulary.
 3333              		_HEADER OVERT,5,"OVERT"
 3334 18c8 42F804ED 		_NEST
 3335 18cc FEF7F8FD 		BL	LAST
 3336 18d0 FEF76AFC 		BL	AT
 3337 18d4 FEF7E2FD 		BL	CNTXT
 3338 18d8 FEF760FC 		BL	STORE
 3339 18dc 52F804FB 		_UNNEST
 3340              	
 3341              	//    ; 	   ( -- )
 3342              	// 	Terminate a colon definition.
 3343              		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3344 18e0 42F804ED 		_NEST
 3345 18e4 FEF729FC 		BL	DOLIT 
 3346 18e8 52F804FB 		_UNNEST
 3347 18ec FFF76CFE 		BL	COMMA
 3348 18f0 FFF734FC 		BL	LBRAC
ARM GAS  stm32eforth.s 			page 64


 3349 18f4 FFF7E8FF 		BL	OVERT
 3350 18f8 52F804FB 		_UNNEST
 3351              	
 3352              	//    ]	   ( -- )
 3353              	// 	Start compiling the words in the input stream.
 3354              		_HEADER RBRAC,1,"]"
 3355 18fc 42F804ED 		_NEST
 3356 1900 FEF71BFC 		_DOLIT SCOMP+MAPOFFSET
 3356      44180018 
 3357 1908 FEF7BCFD 		BL	TEVAL
 3358 190c FEF746FC 		BL	STORE
 3359 1910 52F804FB 		_UNNEST
 3360              	
 3361              	
 3362              	//    COMPILE_BLW	( ca -- asm_code )
 3363              	// 	Assemble a branch-link long instruction to ca.
 3364              	// ref: ARM-v7M architecture reference, section A7.7.18 
 3365              	COMPILE_BLW:
 3366 1914 4FEA6505 		ASR R5,R5,#1 
 3367 1918 4FF45044 		_MOV32 R4,0xF000D000 
 3367      CFF20004 
 3368 1920 65F30A04 		BFI R4,R5,#0,#11
 3369 1924 4FEAD525 		LSR R5,#11
 3370 1928 65F31944 		BFI R4,R5,#16,#10
 3371 192c 4FEAA525 		ASR R5,#10
 3372 1930 65F3CB24 		BFI R4,R5,#11,#1
 3373 1934 4FEA6505 		ASR R5,#1
 3374 1938 65F34D34 		BFI R4,R5,#13,#1
 3375 193c 4FEA6505 		ASR R5,#1
 3376 1940 65F39A64 		BFI R4,R5,#26,#1
 3377 1944 14F0806F 		TST R4,#(1<<26)
 3378 1948 02D1     		BNE 1f
 3379 194a 00BF     		NOP 
 3380 194c 84F42054 		EOR R4,R4,#(5<<11)
 3381 1950 4FEA3445 	1:  ROR R5,R4,#16 
 3382 1954 7047     		_NEXT 
 3383              	
 3384              	// 	.word	_RBRAC+MAPOFFSET
 3385              	// _CALLC	.byte  5
 3386              	// 	.ascii "call,"
 3387              	// 	.p2align 2 	
 3388              	CALLC:
 3389 1956 42F804ED 		_NEST
 3390 195a 25F00105 		BIC R5,R5,#1 
 3391 195e FEF7A3FE 		BL HERE 
 3392 1962 FEF77FFC 		BL SUBB 
 3393 1966 A5F10405 		SUB R5,R5,#4 
 3394 196a FFF7D3FF 		BL COMPILE_BLW 
 3395 196e FFF72BFE 		BL	COMMA			//  assemble BL.W instruction
 3396 1972 52F804FB 		_UNNEST
 3397              	
 3398              		.p2align 
 3399              	// 	:	( -- //  string> )
 3400              	// 	Start a new colon definition using next word as its name.
 3401 1976 00BF     		_HEADER COLON,1,":"
 3402 1978 42F804ED 		_NEST
 3403 197c 00F01AF8 		BL	HEAD 
ARM GAS  stm32eforth.s 			page 65


 3404 1980 FFF7BCFF 		BL	RBRAC
 3405 1984 52F804FB 		_UNNEST
 3406              	
 3407              	//    IMMEDIATE   ( -- )
 3408              	// 	Make the last compiled word an immediate word.
 3409              		_HEADER IMMED,9,"IMMEDIATE"
 3410 1988 42F804ED 		_NEST
 3411 198c FEF7D5FB 		_DOLIT IMEDD
 3411      80000000 
 3412 1994 FEF794FD 		BL	LAST
 3413 1998 FEF706FC 		BL	AT
 3414 199c FEF704FC 		BL	AT
 3415 19a0 FEF73CFC 		BL	ORR
 3416 19a4 FEF78CFD 		BL	LAST
 3417 19a8 FEF7FEFB 		BL	AT
 3418 19ac FEF7F6FB 		BL	STORE
 3419 19b0 52F804FB 		_UNNEST
 3420              	
 3421              	/*********************
 3422              	   Defining words
 3423              	*********************/
 3424              	
 3425              	//  HEADER ( -- )  "string"
 3426              	// create a dictionary header in RAM
 3427              		_HEADER HEAD,6,"HEADER"
 3428 19b4 42F804ED 		_NEST 
 3429 19b8 FFF71EFA 		BL	TOKEN
 3430 19bc FFF716FF 		BL	SNAME
 3431              	//	BL	OVERT  
 3432 19c0 FEF772FE 		BL	HERE   
 3433 19c4 FEF776FC 		BL	CELLP
 3434 19c8 FFF7FEFD 		BL	COMMA 
 3435 19cc FEF7B5FB 		BL	DOLIT 
 3436 19d0 42F804ED 		_NEST 
 3437 19d4 FFF7F8FD 		BL	COMMA 
 3438 19d8 52F804FB 		_UNNEST 
 3439              	
 3440              	//    CONSTANT	( u -- //  string> )
 3441              	// 	Compile a new constant.
 3442              		_HEADER CONST,8,"CONSTANT" 
 3443 19dc 42F804ED 		_NEST
 3444 19e0 FFF7E8FF 		BL	HEAD 
 3445 19e4 FEF7A9FB 		_DOLIT DOCON+MAPOFFSET
 3445      10040018 
 3446 19ec FFF7B3FF 		BL	CALLC
 3447 19f0 FFF7EAFD 		BL	COMMA
 3448 19f4 FFF768FF 		BL	OVERT 
 3449 19f8 52F804FB 		_UNNEST
 3450              	
 3451              		.p2align 2 
 3452              	// doDOES> ( -- )
 3453              	// set code addresse in code field of new word 
 3454              	DODOES:
 3455 19fc 42F804ED 		_NEST 
 3456 1a00 FEF75EFD 		BL	LAST 
 3457 1a04 FEF7D0FB 		BL	AT 
 3458 1a08 FFF7FEF9 		BL 	TOCFA
ARM GAS  stm32eforth.s 			page 66


 3459 1a0c FEF74CFE 		BL	HERE  // this is ca of new word 
 3460 1a10 FEF7F4FB 		BL	OVER  
 3461 1a14 FEF7C2FB 		BL	STORE
 3462 1a18 FEF78FFB 		BL	DOLIT 
 3463 1a1c 42F804ED 		_NEST 
 3464 1a20 FFF7D2FD 		BL COMMA  
 3465 1a24 FEF789FB 		_DOLIT 12 
 3465      0C000000 
 3466 1a2c FEF716FC 		BL	PLUS  // parameter field of new word 
 3467 1a30 FFF7F6FD 		BL	LITER
 3468 1a34 FEF7C8FB 		BL RAT 
 3469 1a38 FEF730FC 		BL ONEM 
 3470 1a3c FEF73AFC 		BL	CELLP
 3471 1a40 FFF789FF 		BL	CALLC  
 3472 1a44 FEF779FB 		BL	DOLIT 
 3473 1a48 52F804FB 		_UNNEST 
 3474 1a4c FFF7BCFD 		BL	COMMA 
 3475 1a50 FFF73AFF 		BL	OVERT 
 3476 1a54 52F804FB 		_UNNEST 
 3477              	
 3478              		
 3479              	
 3480              		.p2align 2
 3481              	//  DOES> ( -- )
 3482              	//  compile time action 
 3483              		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3484 1a58 42F804ED 		_NEST 
 3485 1a5c FEF76DFB 		_DOLIT DODOES+MAPOFFSET
 3485      FC190018 
 3486 1a64 FFF777FF 		BL CALLC 
 3487 1a68 FEF767FB 		BL	DOLIT	
 3488 1a6c 52F804FB 		_UNNEST 
 3489 1a70 FFF7AAFD 		BL	COMMA  
 3490 1a74 FEF761FB 		BL	DOLIT 
 3491 1a78 42F804ED 		_NEST 
 3492 1a7c FFF7A4FD 		BL	COMMA 
 3493 1a80 52F804FB 		_UNNEST 
 3494              	
 3495              	
 3496              	//    CREATE	( -- //  string> )
 3497              	// 	Compile a new array entry without allocating code space.
 3498              		_HEADER CREAT,6,"CREATE"
 3499 1a84 42F804ED 		_NEST
 3500 1a88 FFF794FF 		BL	HEAD 
 3501 1a8c FEF755FB 		_DOLIT DOVAR+MAPOFFSET 
 3501      04040018 
 3502 1a94 FFF75FFF 		BL	CALLC  
 3503 1a98 52F804FB 		_UNNEST
 3504              	
 3505              	//    VARIABLE	( -- //  string> )
 3506              	// 	Compile a new variable initialized to 0.
 3507              		_HEADER VARIA,8,"VARIABLE"
 3508 1a9c 42F804ED 		_NEST
 3509 1aa0 FFF7F0FF 		BL	CREAT
 3510 1aa4 FEF749FB 		_DOLIT 0
 3510      00000000 
 3511 1aac FFF78CFD 		BL	COMMA
ARM GAS  stm32eforth.s 			page 67


 3512 1ab0 FFF70AFF 		BL	OVERT 
 3513 1ab4 52F804FB 		_UNNEST
 3514              	
 3515              	/*************
 3516              	   Tools
 3517              	*************/
 3518              	
 3519              	//    dm+	 ( a u -- a )
 3520              	// 	Dump u bytes from , leaving a+u on the stack.
 3521              	
 3522              	// 	.word	_VARIA+MAPOFFSET
 3523              	// _DMP	.byte  3
 3524              	// 	.ascii "dm+"
 3525              	// 	.p2align 2 	
 3526              	DMP:
 3527 1ab8 42F804ED 		_NEST
 3528 1abc FEF79EFB 		BL	OVER
 3529 1ac0 FEF73BFB 		_DOLIT	4
 3529      04000000 
 3530 1ac8 FFF762F8 		BL	UDOTR			// display address
 3531 1acc FEF7DEFF 		BL	SPACE
 3532 1ad0 FEF77EFB 		BL	TOR			// start count down loop
 3533 1ad4 00F00CB8 		B.W	PDUM2			// skip first pass
 3534              	PDUM1:
 3535 1ad8 FEF788FB 	  BL	DUPP
 3536 1adc FEF76CFB 		BL	CAT
 3537 1ae0 FEF72BFB 		_DOLIT 3
 3537      03000000 
 3538 1ae8 FFF752F8 		BL	UDOTR			// display numeric data
 3539 1aec FEF7D2FB 		BL	ONEP			// increment address
 3540              	PDUM2:
 3541 1af0 FEF731FB 	  BL	DONXT
 3542 1af4 D81A0018 		.word	PDUM1+MAPOFFSET	// loop till done
 3543 1af8 52F804FB 		_UNNEST
 3544              		.p2align 2 
 3545              	//    DUMP	( a u -- )
 3546              	// 	Dump u bytes from a, in a formatted manner.
 3547              		_HEADER DUMP,4,"DUMP"
 3548 1afc 42F804ED 		_NEST
 3549 1b00 FEF7A4FC 		BL	BASE
 3550 1b04 FEF750FB 		BL	AT
 3551 1b08 FEF762FB 		BL	TOR
 3552 1b0c FEF7D8FE 		BL	HEX			// save radix,set hex
 3553 1b10 FEF713FB 		_DOLIT	16
 3553      10000000 
 3554 1b18 FEF764FD 		BL	SLASH			// change count to lines
 3555 1b1c FEF758FB 		BL	TOR
 3556 1b20 00F014B8 		B.W	DUMP4			// start count down loop
 3557              	DUMP1:
 3558 1b24 FEF7E2FF 	  BL	CR
 3559 1b28 FEF707FB 		_DOLIT	16
 3559      10000000 
 3560 1b30 FEF7F0FB 		BL	DDUP
 3561 1b34 FFF7C0FF 		BL	DMP			// display numeric
 3562 1b38 FEF7E0FB 		BL	ROT
 3563 1b3c FEF7DEFB 		BL	ROT
 3564 1b40 FEF7A4FF 		BL	SPACE
ARM GAS  stm32eforth.s 			page 68


 3565 1b44 FEF7A2FF 		BL	SPACE
 3566 1b48 FEF7BCFF 		BL	TYPEE			// display printable characters
 3567              	DUMP4:
 3568 1b4c FEF703FB 	  BL	DONXT
 3569 1b50 241B0018 		.word	DUMP1+MAPOFFSET	// loop till done
 3570              	DUMP3:
 3571 1b54 FEF746FB 	  BL	DROP
 3572 1b58 FEF730FB 		BL	RFROM
 3573 1b5c FEF776FC 		BL	BASE
 3574 1b60 FEF71CFB 		BL	STORE			// restore radix
 3575 1b64 52F804FB 		_UNNEST
 3576              	
 3577              	//    .S	  ( ... -- ... )
 3578              	// 	Display the contents of the data stack.
 3579              		_HEADER DOTS,2,".S"
 3580 1b68 42F804ED 		_NEST
 3581 1b6c FEF78EFF 		BL	SPACE
 3582 1b70 FEF780FD 		BL	DEPTH			// stack depth
 3583 1b74 FEF72CFB 		BL	TOR			// start count down loop
 3584 1b78 00F006B8 		B.W	DOTS2			// skip first pass
 3585              	DOTS1:
 3586 1b7c FEF724FB 		BL	RAT
 3587 1b80 FEF784FD 		BL	PICK
 3588 1b84 FFF728F8 		BL	DOT			// index stack, display contents
 3589              	DOTS2:
 3590 1b88 FEF7E5FA 		BL	DONXT
 3591 1b8c 7C1B0018 		.word	DOTS1+MAPOFFSET	// loop till done
 3592 1b90 FEF77CFF 		BL	SPACE
 3593 1b94 52F804FB 		_UNNEST
 3594              	
 3595              	//    >NAME	( ca -- na | F )
 3596              	// 	Convert code address to a name address.
 3597              		_HEADER TNAME,5,">NAME"
 3598 1b98 42F804ED 		_NEST
 3599 1b9c FEF718FB 		BL	TOR			//  
 3600 1ba0 FEF77CFC 		BL	CNTXT			//  va
 3601 1ba4 FEF700FB 		BL	AT			//  na
 3602              	TNAM1:
 3603 1ba8 FEF720FB 		BL	DUPP			//  na na
 3604 1bac FEF7E2FA 		BL	QBRAN
 3605 1bb0 D81B0018 		.word	TNAM2+MAPOFFSET	//  vocabulary end, no match
 3606 1bb4 FEF71AFB 		BL	DUPP			//  na na
 3607 1bb8 FFF736F9 		BL	NAMET			//  na ca
 3608 1bbc FEF704FB 		BL	RAT			//  na ca code
 3609 1bc0 FEF732FB 		BL	XORR			//  na f --
 3610 1bc4 FEF7D6FA 		BL	QBRAN
 3611 1bc8 D81B0018 		.word	TNAM2+MAPOFFSET
 3612 1bcc FEF776FB 		BL	CELLM			//  la 
 3613 1bd0 FEF7EAFA 		BL	AT			//  next_na
 3614 1bd4 FFF7E8BF 		B.W	TNAM1
 3615              	TNAM2:	
 3616 1bd8 FEF7F0FA 		BL	RFROM
 3617 1bdc FEF702FB 		BL	DROP			//  0|na --
 3618 1be0 52F804FB 		_UNNEST			// 0
 3619              	
 3620              	//    .ID	 ( na -- )
 3621              	// 	Display the name at address.
ARM GAS  stm32eforth.s 			page 69


 3622              		_HEADER DOTID,3,".ID"
 3623 1be4 42F804ED 		_NEST
 3624 1be8 FEF782FB 		BL	QDUP			// if zero no name
 3625 1bec FEF7C2FA 		BL	QBRAN
 3626 1bf0 0C1C0018 		.word	DOTI1+MAPOFFSET
 3627 1bf4 FEF7F8FB 		BL	COUNT
 3628 1bf8 FEF79FFA 		_DOLIT	0x1F
 3628      1F000000 
 3629 1c00 FEF706FB 		BL	ANDD			// mask lexicon bits
 3630 1c04 FEF75EFF 		BL	TYPEE
 3631 1c08 52F804FB 		_UNNEST			// display name string
 3632              	DOTI1:
 3633 1c0c FEF7A6FF 		BL	DOTQP
 3634 1c10 09       		.byte	9
 3635 1c11 207B6E6F 		.ascii " {noName}"
 3635      4E616D65 
 3635      7D
 3636 1c1a 00BF     		.p2align 2 	
 3637 1c1c 52F804FB 		_UNNEST
 3638              	
 3639              		.equ WANT_SEE, 1  // set to 1 if you want SEE 
 3640              		.if WANT_SEE 
 3641              	
 3642              	// .CA ( ca -- ca )
 3643              	// print code field address 
 3644              	DOTCA:
 3645 1c20 42F804ED 		_NEST 
 3646 1c24 FEF7E2FA 		BL  DUPP
 3647 1c28 FEF7C8FF 		BL UDOT 
 3648 1c2c FEF785FA 		_DOLIT 2 
 3648      02000000 
 3649 1c34 FEF732FF 		BL SPACS 
 3650 1c38 52F804FB 		_UNNEST 
 3651              	
 3652              	// CODE_ABORT ( ca -- f )
 3653              	// abort if code definition
 3654              	CODE_ABORT:
 3655 1c3c 42F804ED 		_NEST 
 3656 1c40 FFF7EEFF 		BL DOTCA  
 3657 1c44 FEF7D2FA 		BL DUPP 
 3658 1c48 FEF7AEFA 		BL AT 
 3659 1c4c FEF775FA 		BL DOLIT 
 3660 1c50 42F804ED 		_NEST 
 3661 1c54 FEF7E8FA 		BL XORR 
 3662 1c58 FEF78CFA 		BL QBRAN 
 3663 1c5c 741C0018 		.word 1f+MAPOFFSET 
 3664 1c60 FEF73AFE 		BL DECIM
 3665 1c64 FFF740FA 		BL ABORQ 
 3666 1c68 09       		.byte 9 
 3667 1c69 636F6465 		.ascii "code word"
 3667      20776F72 
 3667      64
 3668 1c72 00BF     		.p2align 2
 3669              	1:	 
 3670 1c74 FEF772FF 		BL DOTQP 
 3671 1c78 04       		.byte 4
 3672 1c79 6E657374 		.ascii "nest"
ARM GAS  stm32eforth.s 			page 70


 3673 1c7d 0000BF   		.p2align 2 
 3674 1c80 FEF734FF 		BL CR 
 3675 1c84 52F804FB 		_UNNEST 
 3676              	
 3677              	
 3678              	// UNNEST? ( ca -- ca f )
 3679              	// check if UNNEST 
 3680              	UNNESTQ:
 3681 1c88 42F804ED 		_NEST 
 3682 1c8c FEF7AEFA 		BL DUPP 
 3683 1c90 FEF78AFA 		BL AT 
 3684 1c94 FEF751FA 		BL DOLIT 
 3685 1c98 52F804FB 		_UNNEST  
 3686 1c9c FEF760FB 		BL EQUAL
 3687 1ca0 FEF7A4FA 		BL DUPP 
 3688 1ca4 FEF766FA 		BL QBRAN
 3689 1ca8 BC1C0018 		.word 1f+MAPOFFSET  
 3690 1cac FEF756FF 		BL DOTQP
 3691 1cb0 06       		.byte 6
 3692 1cb1 756E6E65 		.ascii "unnest" 
 3692      7374
 3693 1cb7 00       		.p2align 2
 3694 1cb8 FEF718FF 		BL CR  
 3695 1cbc 52F804FB 	1:	_UNNEST 
 3696              	
 3697              	
 3698              	// search no name routine from code address. 
 3699              	NONAMEQ: // ( ca -- na|ca f )
 3700 1cc0 42F804ED 		_NEST 
 3701 1cc4 FEF739FA 		_DOLIT 0 
 3701      00000000 
 3702 1ccc FEF792FA 		BL SWAP 
 3703 1cd0 FEF733FA 		_DOLIT NONAME_SUB
 3703      18000000 
 3704 1cd8 FEF77AFA 		BL TOR   
 3705 1cdc FEF786FA 	0:	BL DUPP // ( 0 ca ca -- )  
 3706 1ce0 FEF772FA 		BL RAT  
 3707 1ce4 FEF760FA 		BL AT 
 3708 1ce8 FEF702FB 		BL QDUP 
 3709 1cec FEF742FA 		BL QBRAN 
 3710 1cf0 481D0018 		.word 2f+MAPOFFSET 
 3711 1cf4 FEF798FA 		BL XORR 
 3712 1cf8 FEF73CFA 		BL QBRAN 
 3713 1cfc 141D0018 		.word 1f+MAPOFFSET 
 3714 1d00 FEF75CFA 		BL RFROM 
 3715 1d04 FEF7D6FA 		BL CELLP
 3716 1d08 FEF762FA 		BL TOR  
 3717 1d0c FEF73EFA 		BL BRAN 
 3718 1d10 DC1C0018 		.word 0b+MAPOFFSET 
 3719 1d14 FEF752FA 	1:  BL RFROM 
 3720 1d18 FEF70FFA 		_DOLIT NONAME_SUB
 3720      18000000 
 3721 1d20 FEF7A0FA 		BL SUBB
 3722 1d24 FEF709FA 		_DOLIT ANONYMOUS 
 3722      54000000 
 3723 1d2c FEF796FA 		BL	PLUS
 3724 1d30 FEF73AFA 		BL	AT   
ARM GAS  stm32eforth.s 			page 71


 3725 1d34 FEF75EFA 		BL	SWAP 
 3726 1d38 FEF754FA 		BL	DROP
 3727 1d3c FEF75AFA 		BL	SWAP 
 3728 1d40 FEF7F8FA 		BL	INVER 
 3729 1d44 52F804FB 		_UNNEST 
 3730 1d48 FEF74CFA 	2:	BL DROP 
 3731 1d4c FEF752FA 		BL SWAP 
 3732 1d50 FEF734FA 		BL RFROM
 3733 1d54 FEF746FA 		BL DROP 
 3734 1d58 52F804FB 		_UNNEST 
 3735              	
 3736              		.p2align 2 
 3737              	
 3738              	
 3739              	// print noname routine label ( n -- )
 3740              	// n is offset in ANONYMOUS array 
 3741              	DOTNONAME:
 3742 1d5c 42F804ED 		_NEST 
 3743 1d60 41F8045D 		_PUSH 
 3744 1d64 FEF7E9F9 		_DOLIT ANONYMOUS 
 3744      54000000 
 3745 1d6c FEF776FA 		BL PLUS 
 3746 1d70 FEF71AFA 		BL AT 
 3747 1d74 FEF7A6FE 		BL TYPEE 
 3748 1d78 52F804FB 		_UNNEST 
 3749              	
 3750              	// IS_BLW ( code -- f )
 3751              	// check if it is a BL instruction 
 3752              	IS_BLW:
 3753 1d7c 42F804ED 		_NEST 
 3754 1d80 FEF7DBF9 		_DOLIT 0xD000F000
 3754      00F000D0 
 3755 1d88 FEF730FA 		BL DUPP 
 3756 1d8c FEF720FA 		BL TOR 
 3757 1d90 FEF73EFA 		BL ANDD
 3758 1d94 FEF712FA 		BL RFROM  
 3759 1d98 FEF7E2FA 		BL EQUAL   
 3760 1d9c 52F804FB 		_UNNEST 
 3761              	
 3762              	//    SEE	 ( -- //  string> )
 3763              	// 	A simple decompiler.
 3764              		_HEADER SEE,3,"SEE"
 3765 1da0 42F804ED 		_NEST
 3766 1da4 FEF752FB 		BL BASE 
 3767 1da8 FEF7FEF9 		BL AT 
 3768 1dac FEF710FA 		BL TOR 
 3769 1db0 FEF786FD 		BL HEX 
 3770 1db4 FFF7F2FB 		BL	TICK	//  ca --, starting address
 3771 1db8 FEF798FE 		BL	CR	
 3772 1dbc FFF73EFF 		BL  CODE_ABORT
 3773 1dc0 00F008F8 		BL	SCOL 
 3774 1dc4 FEF7FAF9 		BL  RFROM 
 3775 1dc8 FEF740FB 		BL 	BASE 
 3776 1dcc FEF7E6F9 		BL	STORE 
 3777 1dd0 52F804FB 		_UNNEST
 3778              	
 3779              	
ARM GAS  stm32eforth.s 			page 72


 3780              	// SEECOLON ( ca -- )
 3781              	// Decompile colon definition 
 3782              		_HEADER SCOL,8,"SEECOLON"
 3783 1dd4 42F804ED 		_NEST 
 3784 1dd8 FEF7AFF9 		_DOLIT 9  
 3784      09000000 
 3785 1de0 FEF7F6F9 		BL TOR // not a BL counter limit to 10 consecutives 
 3786              	SCOL1:
 3787 1de4 FEF766FA 		BL	CELLP			//  a
 3788 1de8 FFF71AFF 		BL  DOTCA 
 3789 1dec FFF74CFF 		BL  UNNESTQ
 3790 1df0 FEF7C0F9 		BL	QBRAN 
 3791 1df4 241E0018 		.word 1f+MAPOFFSET  
 3792 1df8 FEF7F8F9 		BL	DUPP 
 3793 1dfc FEF75AFA 		BL	CELLP
 3794 1e00 FEF7D2F9 		BL	AT 
 3795 1e04 FFF7BAFF 		BL	IS_BLW
 3796 1e08 FEF794FA 		BL	INVER  
 3797 1e0c FEF7B2F9 		BL	QBRAN 
 3798 1e10 E41D0018 		.word SCOL1+MAPOFFSET 
 3799 1e14 FEF7D2F9 		BL	RFROM 
 3800 1e18 FEF7E4F9 		BL	DROP 
 3801 1e1c FEF7B6F9 		BL	BRAN 
 3802 1e20 381E0018 		.word 2f+MAPOFFSET 
 3803 1e24 FEF7E2F9 	1:	BL	DUPP			//  a a
 3804 1e28 00F02CF8 		BL	DECOMP		//  a
 3805 1e2c FEF75EFE 		BL	CR 
 3806 1e30 FEF791F9 		BL	DONXT  
 3807 1e34 E41D0018 		.word	SCOL1+MAPOFFSET
 3808 1e38 FEF7D4F9 	2:	BL DROP 
 3809 1e3c 52F804FB 		_UNNEST
 3810              	
 3811              	// BL-ADR ( asm_code -- rel_adr )
 3812              	// get absolute address from asm_code 
 3813              	// ref: ARM-v7M architecture reference, section A7.7.18 
 3814              	BLADR: 
 3815 1e40 4FEA0504 		MOV.W R4,R5
 3816 1e44 4FEA3444 		ROR R4,#16 
 3817 1e48 64F30A05 		BFI R5,R4,#0,#11 
 3818 1e4c 4FEAE424 		ASR R4,#11 
 3819 1e50 64F35555 		BFI R5,R4,#21,#1 
 3820 1e54 4FEAA404 		ASR R4,#2
 3821 1e58 64F39655 		BFI R5,R4,#22,#1
 3822 1e5c 4FEAE404 		ASR R4,#3
 3823 1e60 64F3D425 		BFI R5,R4,#11,#10
 3824 1e64 4FEAA424 		ASR R4,#10 
 3825 1e68 64F3D755 		BFI R5,R4,#23,#1
 3826 1e6c 15F4000F 		TST R5,#(1<<23)
 3827 1e70 40F00280 		BNE.W 1f
 3828 1e74 85F4C005 		EOR R5,R5,#(3<<21)
 3829 1e78 4FEA0525 	1:	LSL R5,#8
 3830 1e7c 4FEAE515 		ASR R5,#7 
 3831 1e80 7047     		_NEXT 
 3832              	
 3833              		
 3834              	// 	DECOMPILE ( a -- )
 3835              	// 	Convert code in a.  Display name of command or as data.
ARM GAS  stm32eforth.s 			page 73


 3836 1e82 00BF     		_HEADER DECOMP,9,"DECOMPILE"
 3837 1e84 42F804ED 		_NEST
 3838 1e88 FEF7B0F9 		BL	DUPP			//  a a
 3839 1e8c FEF78CF9 		BL	AT			//  a code
 3840 1e90 FEF7ACF9 		BL	DUPP			//  a code code
 3841 1e94 FFF772FF 		BL	IS_BLW
 3842 1e98 FEF76CF9 		BL	QBRAN
 3843 1e9c FC1E0018 		.word	DECOM2+MAPOFFSET	//  not a BL instruction 
 3844              		//  a valid_code --, extract address and display name
 3845 1ea0 FEF75CFE 		BL DOTQP  
 3846 1ea4 03       		.byte 3
 3847 1ea5 424C20   		.ascii "BL "
 3848              		.p2align 2
 3849 1ea8 FFF7CAFF 		BL  BLADR   // extract relative address from BL code
 3850 1eac FEF7A6F9 		BL	OVER			//  a offset a
 3851 1eb0 FEF7D4F9 		BL	PLUS			//  a target-4
 3852 1eb4 FEF7FEF9 		BL	CELLP			//  a target
 3853 1eb8 FFF7B2FE 		BL  DOTCA 
 3854 1ebc FFF700FF 		BL	NONAMEQ 
 3855 1ec0 FEF758F9 		BL	QBRAN 
 3856 1ec4 D01E0018 		.word DECOMP1+MAPOFFSET  
 3857 1ec8 FEF760F9 		BL	BRAN 
 3858 1ecc D41E0018 		.word DECOMP3+MAPOFFSET 
 3859              	DECOMP1:
 3860 1ed0 FFF762FE 		BL	TNAME			//  a na/0 --, is it a name?
 3861              	DECOMP3:
 3862 1ed4 FFF786FE 		BL	DOTID			//  a --, display name
 3863 1ed8 FEF784F9 		BL	DROP
 3864              	// reset not BL counter 
 3865 1edc FEF76EF9 		BL	RFROM 
 3866 1ee0 FEF76CF9 		BL	RFROM 
 3867 1ee4 FEF77EF9 		BL	DROP
 3868 1ee8 FEF727F9 		_DOLIT 9  
 3868      09000000 
 3869 1ef0 FEF76EF9 		BL	TOR 
 3870 1ef4 FEF76CF9 		BL	TOR 	
 3871 1ef8 52F804FB 		_UNNEST
 3872              	DECOM2: // not a BL 
 3873 1efc FEF75EFE 		BL	UDOT
 3874 1f00 FEF770F9 		BL	DROP
 3875 1f04 52F804FB 		_UNNEST
 3876              	.endif 
 3877              	
 3878              	//    WORDS	( -- )
 3879              	// 	Display the names in the context vocabulary.
 3880              		_HEADER WORDS,5,"WORDS"
 3881 1f08 42F804ED 		_NEST
 3882 1f0c FEF7EEFD 		BL	CR
 3883 1f10 FEF7C4FA 		BL	CNTXT
 3884 1f14 FEF748F9 		BL	AT			// only in context
 3885              	WORS1:
 3886 1f18 FEF7EAF9 		BL	QDUP			// ?at end of list
 3887 1f1c FEF72AF9 		BL	QBRAN
 3888 1f20 3C1F0018 		.word	WORS2+MAPOFFSET
 3889 1f24 FEF762F9 		BL	DUPP
 3890 1f28 FEF7B0FD 		BL	SPACE
 3891 1f2c FFF75AFE 		BL	DOTID			// display a name
ARM GAS  stm32eforth.s 			page 74


 3892 1f30 FEF7C4F9 		BL	CELLM
 3893 1f34 FEF738F9 		BL	AT
 3894 1f38 FFF7EEBF 		B.W	WORS1
 3895              	WORS2:
 3896 1f3c 52F804FB 		_UNNEST
 3897              	
 3898              	// **************************************************************************
 3899              	//  cold start
 3900              	
 3901              	//    VER	 ( -- n )
 3902              	// 	Return the version number of this implementation.
 3903              	
 3904              	// 	.word	_WORDS+MAPOFFSET
 3905              	// _VERSN	.byte  3
 3906              	// 	.ascii "VER"
 3907              	// 	.p2align 2 	
 3908              	VERSN:
 3909 1f40 42F804ED 		_NEST
 3910 1f44 FEF7F9F8 		_DOLIT	VER*256+EXT
 3910      00010000 
 3911 1f4c 52F804FB 		_UNNEST
 3912              	
 3913              	//    hi	  ( -- )
 3914              	// 	Display the sign-on message of eForth.
 3915              		_HEADER HI,2,"HI"
 3916 1f50 42F804ED 		_NEST
 3917 1f54 FEF7CAFD 		BL	CR	// initialize I/O
 3918 1f58 FEF7EFF8 		_DOLIT hi_msg 
 3918      00000000 
 3919 1f60 FEF742FA 		BL	COUNT 
 3920 1f64 FEF7AEFD 		BL	TYPEE 
 3921 1f68 FEF770FA 		BL	BASE
 3922 1f6c FEF71CF9 		BL	AT
 3923 1f70 FEF7A6FC 		BL	HEX	// save radix
 3924 1f74 FFF7E4FF 		BL	VERSN
 3925 1f78 FEF738FC 		BL	BDIGS
 3926 1f7c FEF752FC 		BL	DIG
 3927 1f80 FEF750FC 		BL	DIG
 3928 1f84 FEF7D9F8 		_DOLIT	'.'
 3928      2E000000 
 3929 1f8c FEF738FC 		BL	HOLD
 3930 1f90 FEF754FC 		BL	DIGS
 3931 1f94 FEF770FC 		BL	EDIGS
 3932 1f98 FEF794FD 		BL	TYPEE	// format version number
 3933 1f9c FEF756FA 		BL	BASE
 3934 1fa0 FEF7FCF8 		BL	STORE
 3935 1fa4 FEF7A2FD 		BL	CR
 3936 1fa8 52F804FB 		_UNNEST			// restore radix
 3937              	
 3938              		.section .rodata
 3939              		.p2align 2 
 3940              	hi_msg:
 3941 0000 17       		.byte	23
 3942 0001 626C7565 		.ascii "blue pill stm32eForth v" 
 3942      2070696C 
 3942      6C207374 
 3942      6D333265 
ARM GAS  stm32eforth.s 			page 75


 3942      466F7274 
 3943              		.p2align 2 
 3944              	
 3945              		.section  .text, "ax" ,%progbits 
 3946              	
 3947              	//    COLD	( -- )
 3948              	// 	The high level cold start sequence.
 3949              		_HEADER LASTN,4,"COLD"
 3950              	COLD:
 3951              	//  Initiate Forth registers
 3952 1fac 4FF49873 		_MOV32 R3,UPP // system variables area 
 3952      C2F20003 
 3953 1fb4 4FF49D41 		_MOV32 R1,SPP // Forth data stack 
 3953      C2F20001 
 3954 1fbc 4FF49F42 		_MOV32 R2,RPP // Forth return stack 
 3954      C2F20002 
 3955 1fc4 85EA0505 		EOR R5,R5,R5			//  tos=0
 3956 1fc8 42F804ED 		_NEST
 3957              	COLD1:
 3958 1fcc FEF7B5F8 		_DOLIT 0 
 3958      00000000 
 3959 1fd4 FEF780F8 		BL ULED // turn off user LED 
 3960 1fd8 FEF7AFF8 		_DOLIT	UZERO
 3960      00000000 
 3961 1fe0 FEF7ABF8 		_DOLIT	UPP
 3961      30010020 
 3962 1fe8 FEF7A7F8 		_DOLIT	ULAST-UZERO
 3962      54000000 
 3963 1ff0 FEF78AFB 		BL	MOVE 			// initialize user area
 3964 1ff4 FFF700F9 		BL	PRESE			// initialize stack
 3965              		// check if user image saved in slot 0 
 3966 1ff8 FFF7C2F9 		BL IMGQ 
 3967 1ffc FEF7BAF8 		BL	QBRAN 
 3968 2000 08200018 		.word 1f+MAPOFFSET
 3969 2004 FFF7CCF9 		BL	LOAD_IMG 
 3970 2008 FEF71AFA 	1:	BL	TBOOT
 3971 200c FEF760FB 		BL	ATEXE			// application boot
 3972 2010 FFF75AFC 		BL	OVERT
 3973 2014 FFF7FAB8 		B.W	QUIT			// start interpretation
 3974              		.p2align 2
 3975              	CTOP: 
 3976              	COLD2:
 3977 2018 FFFFFFFF 		.word	0XFFFFFFFF
 3978              		
 3979              	/********************************
 3980              	  data that doesn't need to be 
 3981              	  copied in RAM 
 3982              	*******************************/
 3983              		.section .rodata 
 3984              		.p2align 2
 3985              	NONAME_SUB: // routine not in the dictionary 
 3986 0018 8C010018 		.word BRAN+MAPOFFSET,QBRAN+MAPOFFSET, DOLIT+MAPOFFSET,DONXT+MAPOFFSET,DODOES+MAPOFFSET
 3986      74010018 
 3986      3A010018 
 3986      56010018 
 3986      FC190018 
 3987 002c 04040018 		.word DOVAR+MAPOFFSET,DOCON+MAPOFFSET,IS_BLW+MAPOFFSET,DOTQP+MAPOFFSET,BLADR+MAPOFFSET  
ARM GAS  stm32eforth.s 			page 76


 3987      10040018 
 3987      7C1D0018 
 3987      5C0B0018 
 3987      401E0018 
 3988 0040 201C0018 		.word DOTCA+MAPOFFSET,NONAMEQ+MAPOFFSET,STRCQ+MAPOFFSET,VERSN+MAPOFFSET  
 3988      C01C0018 
 3988      38160018 
 3988      401F0018 
 3989 0050 00000000 		.word 0 
 3990              	
 3991              	ANONYMOUS: // anonymous routines 
 3992 0054 8C000000 		.word BRAN_LBL,QBRAN_LBL,DOLIT_LBL,DONEXT_LBL,DODOES_LBL,DOVAR_LBL,DOCON_LBL
 3992      98000000 
 3992      A4000000 
 3992      B0000000 
 3992      BC000000 
 3993 0070 E0000000 		.word IS_BLW_LBL,DOTQP_LBL,BLADR_LBL,DOTCA_LBL,NONAMEQ_LBL,STRCQ_LBL,VERSN_LBL   
 3993      EC000000 
 3993      F0000000 
 3993      FC000000 
 3993      08010000 
 3994              	
 3995              	BRAN_LBL:
 3996 008c 09       		.byte 9 
 3997 008d 207B6272 		.ascii " {branch}"
 3997      616E6368 
 3997      7D
 3998 0096 0000     		.p2align 2 
 3999              	QBRAN_LBL:
 4000 0098 0A       		.byte 10
 4001 0099 207B3F62 		.ascii " {?branch}"
 4001      72616E63 
 4001      687D
 4002 00a3 00       		.p2align 2
 4003              	DOLIT_LBL:
 4004 00a4 08       		.byte 8 
 4005 00a5 207B646F 		.ascii " {doLit}"
 4005      4C69747D 
 4006 00ad 000000   		.p2align 2 
 4007              	DONEXT_LBL:
 4008 00b0 09       		.byte 9
 4009 00b1 207B646F 		.ascii " {doNext}"
 4009      4E657874 
 4009      7D
 4010 00ba 0000     		.p2align 2 
 4011              	DODOES_LBL:
 4012 00bc 09       		.byte 9
 4013 00bd 207B646F 		.ascii " {doDoes}"
 4013      446F6573 
 4013      7D
 4014 00c6 0000     		.p2align 2 
 4015              	DOVAR_LBL:
 4016 00c8 08       		.byte 8
 4017 00c9 207B646F 		.ascii " {doVar}"
 4017      5661727D 
 4018 00d1 000000   		.p2align 2 
 4019              	DOCON_LBL:
ARM GAS  stm32eforth.s 			page 77


 4020 00d4 0A       		.byte 10
 4021 00d5 207B646F 		.ascii " {doConst}"
 4021      436F6E73 
 4021      747D
 4022 00df 00       		.p2align 2 
 4023              	IS_BLW_LBL:
 4024 00e0 0B       		.byte 11 
 4025 00e1 207B424C 		.ascii " {BL code?}"
 4025      20636F64 
 4025      653F7D
 4026              		.p2align 2 
 4027              	DOTQP_LBL:
 4028 00ec 03       		.byte 3
 4029 00ed 202E22   		.ascii " .\""
 4030              		.p2align 
 4031              	BLADR_LBL:
 4032 00f0 09       		.byte 9
 4033 00f1 207B424C 		.ascii " {BL>ADR}"
 4033      3E414452 
 4033      7D
 4034 00fa 0000     		.p2align 2 
 4035              	DOTCA_LBL:
 4036 00fc 08       		.byte  8
 4037 00fd 207B646F 		.ascii " {dotca}"
 4037      7463617D 
 4038 0105 000000   		.p2align 2 
 4039              	NONAMEQ_LBL:
 4040 0108 0A       		.byte  10
 4041 0109 207B6E6F 		.ascii " {noname?}"
 4041      6E616D65 
 4041      3F7D
 4042 0113 00       		.p2align 2 
 4043              	STRCQ_LBL:
 4044 0114 06       		.byte  6
 4045 0115 207B242C 		.ascii " {$,\"}"
 4045      227D
 4046 011b 00       		.p2align 2 
 4047              	VERSN_LBL:
 4048 011c 0A       		.byte  10
 4049 011d 207B7665 		.ascii " {version}"
 4049      7273696F 
 4049      6E7D
 4050 0127 00       		.p2align 2 
 4051              	
 4052              		.section .user 
 4053              		.p2align 10 
 4054              	USER_SPACE: // save user image here.  
 4055 0000 FFFFFFFF 		.word 0XFFFFFFFF
 4056              	
 4057              	
 4058              	  .end 
ARM GAS  stm32eforth.s 			page 78


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  stm32eforth.s 			page 79


board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
board/blue-pill/stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
board/blue-pill/stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
board/blue-pill/stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
board/blue-pill/stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
board/blue-pill/stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
board/blue-pill/stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
board/blue-pill/stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
board/blue-pill/stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
board/blue-pill/stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
board/blue-pill/stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
board/blue-pill/stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
board/blue-pill/stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
board/blue-pill/stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
board/blue-pill/stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
board/blue-pill/stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
board/blue-pill/stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
board/blue-pill/stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
board/blue-pill/stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
board/blue-pill/stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
board/blue-pill/stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
board/blue-pill/stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
board/blue-pill/stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
board/blue-pill/stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
board/blue-pill/stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
board/blue-pill/stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
board/blue-pill/stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
board/blue-pill/stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
board/blue-pill/stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
board/blue-pill/stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
board/blue-pill/stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
board/blue-pill/stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
board/blue-pill/stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
board/blue-pill/stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32eforth.s:83     *ABS*:0000000040011000 LED_GPIO
       stm32eforth.s:84     *ABS*:000000000000000d LED_PIN
       stm32eforth.s:85     *ABS*:0000000040013800 UART
       stm32eforth.s:88     *ABS*:0000000020004e80 SPP
       stm32eforth.s:89     *ABS*:0000000020004e80 TIBB
       stm32eforth.s:90     *ABS*:0000000020004f80 RPP
       stm32eforth.s:91     *ABS*:0000000020000130 UPP
       stm32eforth.s:93     *ABS*:0000000020004e00 DEND
       stm32eforth.s:94     *ABS*:0000000020000130 RAMOFFSET
       stm32eforth.s:95     *ABS*:0000000020005000 RAMEND
       stm32eforth.s:96     *ABS*:0000000008000130 FLASHOFFSET
       stm32eforth.s:99     *ABS*:0000000018000000 MAPOFFSET
       stm32eforth.s:104    *ABS*:0000000000000004 SEED_OFS
ARM GAS  stm32eforth.s 			page 80


       stm32eforth.s:105    *ABS*:0000000000000008 TICKS_OFS
       stm32eforth.s:106    *ABS*:000000000000000c TIMER_OFS
       stm32eforth.s:107    *ABS*:0000000000000010 TORAM_OFS
       stm32eforth.s:108    *ABS*:0000000000000014 IMG_SIGN_OFS
       stm32eforth.s:109    *ABS*:0000000000000018 BOOT_OFS
       stm32eforth.s:110    *ABS*:000000000000001c BASE_OFS
       stm32eforth.s:111    *ABS*:0000000000000020 TMP_OFS
       stm32eforth.s:112    *ABS*:0000000000000024 SPAN_OFS
       stm32eforth.s:113    *ABS*:0000000000000028 TOIN_OFS
       stm32eforth.s:114    *ABS*:000000000000002c NTIB_OFS
       stm32eforth.s:115    *ABS*:0000000000000030 TIB_OFS
       stm32eforth.s:116    *ABS*:0000000000000034 EVAL_OFS
       stm32eforth.s:117    *ABS*:0000000000000038 HLD_OFS
       stm32eforth.s:118    *ABS*:000000000000003c CTXT_OFS
       stm32eforth.s:119    *ABS*:0000000000000040 FORTH_CTOP_OFS
       stm32eforth.s:120    *ABS*:0000000000000044 USER_CTOP_OFS
       stm32eforth.s:121    *ABS*:0000000000000048 LASTN_OFS
       stm32eforth.s:122    *ABS*:000000000000004c VARS_END_OFS
       stm32eforth.s:124    *ABS*:0000000000000010 RX_QUEUE_SIZE
       stm32eforth.s:125    *ABS*:0000000000000050 RX_QUEUE_OFS
       stm32eforth.s:126    *ABS*:0000000000000060 RX_HEAD_OFS
       stm32eforth.s:127    *ABS*:0000000000000064 RX_TAIL_OFS
       stm32eforth.s:3915   .inflash.dictinary:0000000000000b88 link
       stm32eforth.s:194    .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:387    .inflash:00000000000000d0 reset_handler
       stm32eforth.s:285    .inflash:0000000000000000 default_handler
       stm32eforth.s:302    .inflash:0000000000000020 systick_handler
       stm32eforth.s:321    .inflash:000000000000003c uart_rx_handler
       stm32eforth.s:274    .isr_vector:0000000000000130 isr_end
       stm32eforth.s:283    .inflash:0000000000000000 $t
       stm32eforth.s:290    .inflash:0000000000000008 exception_msg
       stm32eforth.s:363    .inflash:00000000000000a4 uart_puts
       stm32eforth.s:344    .inflash:000000000000007c reset_mcu
       stm32eforth.s:291    .inflash:0000000000000008 $d
       stm32eforth.s:311    .inflash:000000000000003a systick_exit
       stm32eforth.s:341    .inflash:0000000000000076 user_reboot
       stm32eforth.s:354    .inflash:0000000000000090 user_reboot_msg
       stm32eforth.s:352    .inflash:000000000000008c scb_adr
       stm32eforth.s:353    .inflash:000000000000008c $d
       stm32eforth.s:358    .inflash:00000000000000a2 $t
       stm32eforth.s:513    .inflash:00000000000001f2 remap
       stm32eforth.s:411    .inflash:0000000000000110 init_devices
       stm32eforth.s:488    .inflash:00000000000001b0 uart_init
       stm32eforth.s:402    .inflash:00000000000000f0 forth_init
       stm32eforth.s:398    .inflash:00000000000000ec forth_entry
       stm32eforth.s:399    .inflash:00000000000000ec $d
       stm32eforth.s:3950   .text:0000000000001fac COLD
       stm32eforth.s:403    .inflash:00000000000000f0 $t
       stm32eforth.s:424    .inflash:000000000000012e wait_hserdy
       stm32eforth.s:444    .inflash:0000000000000148 wait_pllrdy
       stm32eforth.s:456    .inflash:0000000000000168 wait_sws
       stm32eforth.s:545    .inflash:0000000000000258 remap_dest
       stm32eforth.s:543    .inflash:0000000000000254 remap_src
       stm32eforth.s:3975   .text:0000000000002018 CTOP
       stm32eforth.s:592    .text:0000000000000000 UZERO
       stm32eforth.s:544    .inflash:0000000000000254 $d
       stm32eforth.s:551    *ABS*:0000000000000001 VER
ARM GAS  stm32eforth.s 			page 81


       stm32eforth.s:552    *ABS*:0000000000000000 EXT
       stm32eforth.s:556    *ABS*:0000000000000040 COMPO
       stm32eforth.s:557    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:558    *ABS*:00000000ffffff1f MASKK
       stm32eforth.s:560    *ABS*:0000000000000004 CELLL
       stm32eforth.s:561    *ABS*:000000000000000a BASEE
       stm32eforth.s:562    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:564    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:565    *ABS*:000000000000000a LF
       stm32eforth.s:566    *ABS*:000000000000000d CRR
       stm32eforth.s:567    *ABS*:000000000000001b ERR
       stm32eforth.s:568    *ABS*:0000000000000027 TIC
       stm32eforth.s:593    .text:0000000000000000 $d
       stm32eforth.s:3915   .text:0000000000001f50 HI
       stm32eforth.s:2578   .text:0000000000001108 INTER
       stm32eforth.s:3915   .inflash.dictinary:0000000000000b88 _LASTN
       stm32eforth.s:613    .text:0000000000000054 ULAST
       stm32eforth.s:621    .text:000000000000006c $t
               .inflash.dictinary:0000000000000000 LF_RAND
               .inflash.dictinary:0000000000000004 _RAND
               .inflash.dictinary:000000000000000b $d
       stm32eforth.s:627    .inflash.dictinary:000000000000000c CA_RAND
       stm32eforth.s:627    .text:0000000000000070 RAND
       stm32eforth.s:1246   .text:000000000000041c SEED
       stm32eforth.s:806    .text:00000000000001a8 AT
       stm32eforth.s:860    .text:00000000000001ec DUPP
       stm32eforth.s:798    .text:000000000000019c STORE
       stm32eforth.s:1094   .text:0000000000000344 ABSS
       stm32eforth.s:866    .text:00000000000001f4 SWAP
       stm32eforth.s:1481   .text:00000000000005d4 MODD
       stm32eforth.s:627    .inflash.dictinary:0000000000000010 LF_PAUSE
       stm32eforth.s:627    .inflash.dictinary:0000000000000014 _PAUSE
       stm32eforth.s:647    .inflash.dictinary:000000000000001c CA_PAUSE
       stm32eforth.s:647    .text:00000000000000b0 PAUSE
       stm32eforth.s:1260   .text:0000000000000434 TIMER
       stm32eforth.s:651    .text:00000000000000bc PAUSE_LOOP
       stm32eforth.s:768    .text:0000000000000174 QBRAN
       stm32eforth.s:655    .text:00000000000000c8 $d
       stm32eforth.s:658    .text:00000000000000d4 PAUSE_EXIT
       stm32eforth.s:786    .text:000000000000018c BRAN
       stm32eforth.s:656    .text:00000000000000cc $t
       stm32eforth.s:657    .text:00000000000000d0 $d
       stm32eforth.s:659    .text:00000000000000d4 $t
       stm32eforth.s:647    .inflash.dictinary:0000000000000020 LF_ULED
       stm32eforth.s:647    .inflash.dictinary:0000000000000024 _ULED
       stm32eforth.s:663    .inflash.dictinary:000000000000002c CA_ULED
       stm32eforth.s:663    .text:00000000000000d8 ULED
       stm32eforth.s:671    .text:00000000000000f0 ULED_OFF
       stm32eforth.s:663    .inflash.dictinary:0000000000000030 LF_QRX
       stm32eforth.s:663    .inflash.dictinary:0000000000000034 _QRX
       stm32eforth.s:677    .inflash.dictinary:000000000000003c CA_QRX
       stm32eforth.s:677    .text:00000000000000f4 QRX
       stm32eforth.s:678    .text:00000000000000f4 QKEY
       stm32eforth.s:677    .inflash.dictinary:0000000000000040 LF_EMIT
       stm32eforth.s:677    .inflash.dictinary:0000000000000044 _EMIT
       stm32eforth.s:697    .inflash.dictinary:000000000000004c CA_EMIT
       stm32eforth.s:697    .text:0000000000000120 EMIT
ARM GAS  stm32eforth.s 			page 82


       stm32eforth.s:698    .text:0000000000000120 TECHO
       stm32eforth.s:697    .inflash.dictinary:0000000000000050 LF_NOP
       stm32eforth.s:697    .inflash.dictinary:0000000000000054 _NOP
       stm32eforth.s:712    .inflash.dictinary:0000000000000058 CA_NOP
       stm32eforth.s:712    .text:0000000000000138 NOP
       stm32eforth.s:723    .text:000000000000013a DOLIT
       stm32eforth.s:712    .inflash.dictinary:000000000000005c LF_EXECU
       stm32eforth.s:712    .inflash.dictinary:0000000000000060 _EXECU
       stm32eforth.s:732    .inflash.dictinary:0000000000000068 CA_EXECU
       stm32eforth.s:732    .text:000000000000014c EXECU
       stm32eforth.s:746    .text:0000000000000156 DONXT
       stm32eforth.s:753    .text:0000000000000164 NEXT1
       stm32eforth.s:775    .text:0000000000000186 QBRAN1
       stm32eforth.s:732    .inflash.dictinary:000000000000006c LF_EXIT
       stm32eforth.s:732    .inflash.dictinary:0000000000000070 _EXIT
       stm32eforth.s:793    .inflash.dictinary:0000000000000078 CA_EXIT
       stm32eforth.s:793    .text:0000000000000198 EXIT
       stm32eforth.s:793    .inflash.dictinary:000000000000007c LF_STORE
       stm32eforth.s:793    .inflash.dictinary:0000000000000080 _STORE
       stm32eforth.s:798    .inflash.dictinary:0000000000000084 CA_STORE
       stm32eforth.s:798    .inflash.dictinary:0000000000000088 LF_AT
       stm32eforth.s:798    .inflash.dictinary:000000000000008c _AT
       stm32eforth.s:806    .inflash.dictinary:0000000000000090 CA_AT
       stm32eforth.s:806    .inflash.dictinary:0000000000000094 LF_CSTOR
       stm32eforth.s:806    .inflash.dictinary:0000000000000098 _CSTOR
       stm32eforth.s:812    .inflash.dictinary:000000000000009c CA_CSTOR
       stm32eforth.s:812    .text:00000000000001ac CSTOR
       stm32eforth.s:812    .inflash.dictinary:00000000000000a0 LF_CAT
       stm32eforth.s:812    .inflash.dictinary:00000000000000a4 _CAT
       stm32eforth.s:820    .inflash.dictinary:00000000000000a8 CA_CAT
       stm32eforth.s:820    .text:00000000000001b8 CAT
       stm32eforth.s:820    .inflash.dictinary:00000000000000ac LF_RFROM
       stm32eforth.s:820    .inflash.dictinary:00000000000000b0 _RFROM
       stm32eforth.s:826    .inflash.dictinary:00000000000000b4 CA_RFROM
       stm32eforth.s:826    .text:00000000000001bc RFROM
       stm32eforth.s:826    .inflash.dictinary:00000000000000b8 LF_RAT
       stm32eforth.s:826    .inflash.dictinary:00000000000000bc _RAT
       stm32eforth.s:833    .inflash.dictinary:00000000000000c0 CA_RAT
       stm32eforth.s:833    .text:00000000000001c8 RAT
       stm32eforth.s:833    .inflash.dictinary:00000000000000c4 LF_TOR
       stm32eforth.s:833    .inflash.dictinary:00000000000000c8 _TOR
       stm32eforth.s:840    .inflash.dictinary:00000000000000cc CA_TOR
       stm32eforth.s:840    .text:00000000000001d0 TOR
       stm32eforth.s:840    .inflash.dictinary:00000000000000d0 LF_SPAT
       stm32eforth.s:840    .inflash.dictinary:00000000000000d4 _SPAT
       stm32eforth.s:847    .inflash.dictinary:00000000000000d8 CA_SPAT
       stm32eforth.s:847    .text:00000000000001dc SPAT
       stm32eforth.s:847    .inflash.dictinary:00000000000000dc LF_DROP
       stm32eforth.s:847    .inflash.dictinary:00000000000000e0 _DROP
       stm32eforth.s:854    .inflash.dictinary:00000000000000e8 CA_DROP
       stm32eforth.s:854    .text:00000000000001e4 DROP
       stm32eforth.s:854    .inflash.dictinary:00000000000000ec LF_DUPP
       stm32eforth.s:854    .inflash.dictinary:00000000000000f0 _DUPP
       stm32eforth.s:860    .inflash.dictinary:00000000000000f4 CA_DUPP
       stm32eforth.s:860    .inflash.dictinary:00000000000000f8 LF_SWAP
       stm32eforth.s:860    .inflash.dictinary:00000000000000fc _SWAP
       stm32eforth.s:866    .inflash.dictinary:0000000000000104 CA_SWAP
ARM GAS  stm32eforth.s 			page 83


       stm32eforth.s:866    .inflash.dictinary:0000000000000108 LF_OVER
       stm32eforth.s:866    .inflash.dictinary:000000000000010c _OVER
       stm32eforth.s:874    .inflash.dictinary:0000000000000114 CA_OVER
       stm32eforth.s:874    .text:00000000000001fc OVER
       stm32eforth.s:874    .inflash.dictinary:0000000000000118 LF_ZLESS
       stm32eforth.s:874    .inflash.dictinary:000000000000011c _ZLESS
       stm32eforth.s:881    .inflash.dictinary:0000000000000120 CA_ZLESS
       stm32eforth.s:881    .text:0000000000000204 ZLESS
       stm32eforth.s:881    .inflash.dictinary:0000000000000124 LF_ANDD
       stm32eforth.s:881    .inflash.dictinary:0000000000000128 _ANDD
       stm32eforth.s:888    .inflash.dictinary:000000000000012c CA_ANDD
       stm32eforth.s:888    .text:0000000000000210 ANDD
       stm32eforth.s:888    .inflash.dictinary:0000000000000130 LF_ORR
       stm32eforth.s:888    .inflash.dictinary:0000000000000134 _ORR
       stm32eforth.s:895    .inflash.dictinary:0000000000000138 CA_ORR
       stm32eforth.s:895    .text:000000000000021c ORR
       stm32eforth.s:895    .inflash.dictinary:000000000000013c LF_XORR
       stm32eforth.s:895    .inflash.dictinary:0000000000000140 _XORR
       stm32eforth.s:902    .inflash.dictinary:0000000000000144 CA_XORR
       stm32eforth.s:902    .text:0000000000000228 XORR
       stm32eforth.s:902    .inflash.dictinary:0000000000000148 LF_UPLUS
       stm32eforth.s:902    .inflash.dictinary:000000000000014c _UPLUS
       stm32eforth.s:909    .inflash.dictinary:0000000000000150 CA_UPLUS
       stm32eforth.s:909    .text:0000000000000234 UPLUS
       stm32eforth.s:909    .inflash.dictinary:0000000000000154 LF_RSHIFT
       stm32eforth.s:909    .inflash.dictinary:0000000000000158 _RSHIFT
       stm32eforth.s:919    .inflash.dictinary:0000000000000160 CA_RSHIFT
       stm32eforth.s:919    .text:0000000000000244 RSHIFT
       stm32eforth.s:919    .inflash.dictinary:0000000000000164 LF_LSHIFT
       stm32eforth.s:919    .inflash.dictinary:0000000000000168 _LSHIFT
       stm32eforth.s:926    .inflash.dictinary:0000000000000170 CA_LSHIFT
       stm32eforth.s:926    .text:0000000000000250 LSHIFT
       stm32eforth.s:926    .inflash.dictinary:0000000000000174 LF_PLUS
       stm32eforth.s:926    .inflash.dictinary:0000000000000178 _PLUS
       stm32eforth.s:933    .inflash.dictinary:000000000000017c CA_PLUS
       stm32eforth.s:933    .text:000000000000025c PLUS
       stm32eforth.s:933    .inflash.dictinary:0000000000000180 LF_SUBB
       stm32eforth.s:933    .inflash.dictinary:0000000000000184 _SUBB
       stm32eforth.s:940    .inflash.dictinary:0000000000000188 CA_SUBB
       stm32eforth.s:940    .text:0000000000000264 SUBB
       stm32eforth.s:940    .inflash.dictinary:000000000000018c LF_STAR
       stm32eforth.s:940    .inflash.dictinary:0000000000000190 _STAR
       stm32eforth.s:947    .inflash.dictinary:0000000000000194 CA_STAR
       stm32eforth.s:947    .text:0000000000000270 STAR
       stm32eforth.s:947    .inflash.dictinary:0000000000000198 LF_UMSTA
       stm32eforth.s:947    .inflash.dictinary:000000000000019c _UMSTA
       stm32eforth.s:954    .inflash.dictinary:00000000000001a0 CA_UMSTA
       stm32eforth.s:954    .text:000000000000027c UMSTA
       stm32eforth.s:954    .inflash.dictinary:00000000000001a4 LF_MSTAR
       stm32eforth.s:954    .inflash.dictinary:00000000000001a8 _MSTAR
       stm32eforth.s:963    .inflash.dictinary:00000000000001ac CA_MSTAR
       stm32eforth.s:963    .text:0000000000000288 MSTAR
       stm32eforth.s:963    .inflash.dictinary:00000000000001b0 LF_ONEP
       stm32eforth.s:963    .inflash.dictinary:00000000000001b4 _ONEP
       stm32eforth.s:972    .inflash.dictinary:00000000000001b8 CA_ONEP
       stm32eforth.s:972    .text:0000000000000294 ONEP
       stm32eforth.s:972    .inflash.dictinary:00000000000001bc LF_ONEM
ARM GAS  stm32eforth.s 			page 84


       stm32eforth.s:972    .inflash.dictinary:00000000000001c0 _ONEM
       stm32eforth.s:978    .inflash.dictinary:00000000000001c4 CA_ONEM
       stm32eforth.s:978    .text:000000000000029c ONEM
       stm32eforth.s:978    .inflash.dictinary:00000000000001c8 LF_TWOP
       stm32eforth.s:978    .inflash.dictinary:00000000000001cc _TWOP
       stm32eforth.s:984    .inflash.dictinary:00000000000001d0 CA_TWOP
       stm32eforth.s:984    .text:00000000000002a4 TWOP
       stm32eforth.s:984    .inflash.dictinary:00000000000001d4 LF_TWOM
       stm32eforth.s:984    .inflash.dictinary:00000000000001d8 _TWOM
       stm32eforth.s:990    .inflash.dictinary:00000000000001dc CA_TWOM
       stm32eforth.s:990    .text:00000000000002ac TWOM
       stm32eforth.s:990    .inflash.dictinary:00000000000001e0 LF_CELLP
       stm32eforth.s:990    .inflash.dictinary:00000000000001e4 _CELLP
       stm32eforth.s:996    .inflash.dictinary:00000000000001ec CA_CELLP
       stm32eforth.s:996    .text:00000000000002b4 CELLP
       stm32eforth.s:996    .inflash.dictinary:00000000000001f0 LF_CELLM
       stm32eforth.s:996    .inflash.dictinary:00000000000001f4 _CELLM
       stm32eforth.s:1002   .inflash.dictinary:00000000000001fc CA_CELLM
       stm32eforth.s:1002   .text:00000000000002bc CELLM
       stm32eforth.s:1002   .inflash.dictinary:0000000000000200 LF_BLANK
       stm32eforth.s:1002   .inflash.dictinary:0000000000000204 _BLANK
       stm32eforth.s:1008   .inflash.dictinary:0000000000000208 CA_BLANK
       stm32eforth.s:1008   .text:00000000000002c4 BLANK
       stm32eforth.s:1008   .inflash.dictinary:000000000000020c LF_CELLS
       stm32eforth.s:1008   .inflash.dictinary:0000000000000210 _CELLS
       stm32eforth.s:1015   .inflash.dictinary:0000000000000218 CA_CELLS
       stm32eforth.s:1015   .text:00000000000002d0 CELLS
       stm32eforth.s:1015   .inflash.dictinary:000000000000021c LF_CELLSL
       stm32eforth.s:1015   .inflash.dictinary:0000000000000220 _CELLSL
       stm32eforth.s:1021   .inflash.dictinary:0000000000000228 CA_CELLSL
       stm32eforth.s:1021   .text:00000000000002d8 CELLSL
       stm32eforth.s:1021   .inflash.dictinary:000000000000022c LF_TWOST
       stm32eforth.s:1021   .inflash.dictinary:0000000000000230 _TWOST
       stm32eforth.s:1027   .inflash.dictinary:0000000000000234 CA_TWOST
       stm32eforth.s:1027   .text:00000000000002e0 TWOST
       stm32eforth.s:1027   .inflash.dictinary:0000000000000238 LF_TWOSL
       stm32eforth.s:1027   .inflash.dictinary:000000000000023c _TWOSL
       stm32eforth.s:1033   .inflash.dictinary:0000000000000240 CA_TWOSL
       stm32eforth.s:1033   .text:00000000000002e8 TWOSL
       stm32eforth.s:1033   .inflash.dictinary:0000000000000244 LF_QDUP
       stm32eforth.s:1033   .inflash.dictinary:0000000000000248 _QDUP
       stm32eforth.s:1039   .inflash.dictinary:0000000000000250 CA_QDUP
       stm32eforth.s:1039   .text:00000000000002f0 QDUP
       stm32eforth.s:1039   .inflash.dictinary:0000000000000254 LF_ROT
       stm32eforth.s:1039   .inflash.dictinary:0000000000000258 _ROT
       stm32eforth.s:1047   .inflash.dictinary:000000000000025c CA_ROT
       stm32eforth.s:1047   .text:00000000000002fc ROT
       stm32eforth.s:1047   .inflash.dictinary:0000000000000260 LF_DDROP
       stm32eforth.s:1047   .inflash.dictinary:0000000000000264 _DDROP
       stm32eforth.s:1056   .inflash.dictinary:000000000000026c CA_DDROP
       stm32eforth.s:1056   .text:0000000000000308 DDROP
       stm32eforth.s:1056   .inflash.dictinary:0000000000000270 LF_DDUP
       stm32eforth.s:1056   .inflash.dictinary:0000000000000274 _DDUP
       stm32eforth.s:1063   .inflash.dictinary:000000000000027c CA_DDUP
       stm32eforth.s:1063   .text:0000000000000314 DDUP
       stm32eforth.s:1063   .inflash.dictinary:0000000000000280 LF_DPLUS
       stm32eforth.s:1063   .inflash.dictinary:0000000000000284 _DPLUS
ARM GAS  stm32eforth.s 			page 85


       stm32eforth.s:1071   .inflash.dictinary:0000000000000288 CA_DPLUS
       stm32eforth.s:1071   .text:0000000000000320 DPLUS
       stm32eforth.s:1071   .inflash.dictinary:000000000000028c LF_INVER
       stm32eforth.s:1071   .inflash.dictinary:0000000000000290 _INVER
       stm32eforth.s:1082   .inflash.dictinary:0000000000000294 CA_INVER
       stm32eforth.s:1082   .text:0000000000000334 INVER
       stm32eforth.s:1082   .inflash.dictinary:0000000000000298 LF_NEGAT
       stm32eforth.s:1082   .inflash.dictinary:000000000000029c _NEGAT
       stm32eforth.s:1088   .inflash.dictinary:00000000000002a4 CA_NEGAT
       stm32eforth.s:1088   .text:000000000000033c NEGAT
       stm32eforth.s:1088   .inflash.dictinary:00000000000002a8 LF_ABSS
       stm32eforth.s:1088   .inflash.dictinary:00000000000002ac _ABSS
       stm32eforth.s:1094   .inflash.dictinary:00000000000002b0 CA_ABSS
       stm32eforth.s:1094   .inflash.dictinary:00000000000002b4 LF_ZEQUAL
       stm32eforth.s:1094   .inflash.dictinary:00000000000002b8 _ZEQUAL
       stm32eforth.s:1102   .inflash.dictinary:00000000000002bc CA_ZEQUAL
       stm32eforth.s:1102   .text:0000000000000350 ZEQUAL
       stm32eforth.s:1102   .inflash.dictinary:00000000000002c0 LF_EQUAL
       stm32eforth.s:1102   .inflash.dictinary:00000000000002c4 _EQUAL
       stm32eforth.s:1111   .inflash.dictinary:00000000000002c8 CA_EQUAL
       stm32eforth.s:1111   .text:0000000000000360 EQUAL
       stm32eforth.s:1111   .inflash.dictinary:00000000000002cc LF_ULESS
       stm32eforth.s:1111   .inflash.dictinary:00000000000002d0 _ULESS
       stm32eforth.s:1121   .inflash.dictinary:00000000000002d4 CA_ULESS
       stm32eforth.s:1121   .text:0000000000000370 ULESS
       stm32eforth.s:1121   .inflash.dictinary:00000000000002d8 LF_LESS
       stm32eforth.s:1121   .inflash.dictinary:00000000000002dc _LESS
       stm32eforth.s:1131   .inflash.dictinary:00000000000002e0 CA_LESS
       stm32eforth.s:1131   .text:0000000000000380 LESS
       stm32eforth.s:1131   .inflash.dictinary:00000000000002e4 LF_GREAT
       stm32eforth.s:1131   .inflash.dictinary:00000000000002e8 _GREAT
       stm32eforth.s:1141   .inflash.dictinary:00000000000002ec CA_GREAT
       stm32eforth.s:1141   .text:0000000000000390 GREAT
       stm32eforth.s:1141   .inflash.dictinary:00000000000002f0 LF_MAX
       stm32eforth.s:1141   .inflash.dictinary:00000000000002f4 _MAX
       stm32eforth.s:1151   .inflash.dictinary:00000000000002f8 CA_MAX
       stm32eforth.s:1151   .text:00000000000003a0 MAX
       stm32eforth.s:1151   .inflash.dictinary:00000000000002fc LF_MIN
       stm32eforth.s:1151   .inflash.dictinary:0000000000000300 _MIN
       stm32eforth.s:1160   .inflash.dictinary:0000000000000304 CA_MIN
       stm32eforth.s:1160   .text:00000000000003ac MIN
       stm32eforth.s:1160   .inflash.dictinary:0000000000000308 LF_PSTOR
       stm32eforth.s:1160   .inflash.dictinary:000000000000030c _PSTOR
       stm32eforth.s:1169   .inflash.dictinary:0000000000000310 CA_PSTOR
       stm32eforth.s:1169   .text:00000000000003b8 PSTOR
       stm32eforth.s:1169   .inflash.dictinary:0000000000000314 LF_DSTOR
       stm32eforth.s:1169   .inflash.dictinary:0000000000000318 _DSTOR
       stm32eforth.s:1179   .inflash.dictinary:000000000000031c CA_DSTOR
       stm32eforth.s:1179   .text:00000000000003c8 DSTOR
       stm32eforth.s:1179   .inflash.dictinary:0000000000000320 LF_DAT
       stm32eforth.s:1179   .inflash.dictinary:0000000000000324 _DAT
       stm32eforth.s:1189   .inflash.dictinary:0000000000000328 CA_DAT
       stm32eforth.s:1189   .text:00000000000003dc DAT
       stm32eforth.s:1189   .inflash.dictinary:000000000000032c LF_COUNT
       stm32eforth.s:1189   .inflash.dictinary:0000000000000330 _COUNT
       stm32eforth.s:1197   .inflash.dictinary:0000000000000338 CA_COUNT
       stm32eforth.s:1197   .text:00000000000003e8 COUNT
ARM GAS  stm32eforth.s 			page 86


       stm32eforth.s:1197   .inflash.dictinary:000000000000033c LF_DNEGA
       stm32eforth.s:1197   .inflash.dictinary:0000000000000340 _DNEGA
       stm32eforth.s:1205   .inflash.dictinary:0000000000000348 CA_DNEGA
       stm32eforth.s:1205   .text:00000000000003f4 DNEGA
       stm32eforth.s:1223   .text:0000000000000404 DOVAR
       stm32eforth.s:1235   .text:0000000000000410 DOCON
       stm32eforth.s:1205   .inflash.dictinary:000000000000034c LF_SEED
       stm32eforth.s:1205   .inflash.dictinary:0000000000000350 _SEED
       stm32eforth.s:1246   .inflash.dictinary:0000000000000358 CA_SEED
       stm32eforth.s:1246   .inflash.dictinary:000000000000035c LF_MSEC
       stm32eforth.s:1246   .inflash.dictinary:0000000000000360 _MSEC
       stm32eforth.s:1253   .inflash.dictinary:0000000000000368 CA_MSEC
       stm32eforth.s:1253   .text:0000000000000428 MSEC
       stm32eforth.s:1253   .inflash.dictinary:000000000000036c LF_TIMER
       stm32eforth.s:1253   .inflash.dictinary:0000000000000370 _TIMER
       stm32eforth.s:1260   .inflash.dictinary:0000000000000378 CA_TIMER
       stm32eforth.s:1260   .inflash.dictinary:000000000000037c LF_TBOOT
       stm32eforth.s:1260   .inflash.dictinary:0000000000000380 _TBOOT
       stm32eforth.s:1267   .inflash.dictinary:0000000000000388 CA_TBOOT
       stm32eforth.s:1267   .text:0000000000000440 TBOOT
       stm32eforth.s:1267   .inflash.dictinary:000000000000038c LF_BASE
       stm32eforth.s:1267   .inflash.dictinary:0000000000000390 _BASE
       stm32eforth.s:1274   .inflash.dictinary:0000000000000398 CA_BASE
       stm32eforth.s:1274   .text:000000000000044c BASE
       stm32eforth.s:1286   .text:0000000000000456 TEMP
       stm32eforth.s:1274   .inflash.dictinary:000000000000039c LF_SPAN
       stm32eforth.s:1274   .inflash.dictinary:00000000000003a0 _SPAN
       stm32eforth.s:1293   .inflash.dictinary:00000000000003a8 CA_SPAN
       stm32eforth.s:1293   .text:0000000000000460 SPAN
       stm32eforth.s:1293   .inflash.dictinary:00000000000003ac LF_INN
       stm32eforth.s:1293   .inflash.dictinary:00000000000003b0 _INN
       stm32eforth.s:1300   .inflash.dictinary:00000000000003b4 CA_INN
       stm32eforth.s:1300   .text:000000000000046c INN
       stm32eforth.s:1300   .inflash.dictinary:00000000000003b8 LF_NTIB
       stm32eforth.s:1300   .inflash.dictinary:00000000000003bc _NTIB
       stm32eforth.s:1307   .inflash.dictinary:00000000000003c4 CA_NTIB
       stm32eforth.s:1307   .text:0000000000000478 NTIB
       stm32eforth.s:1307   .inflash.dictinary:00000000000003c8 LF_TEVAL
       stm32eforth.s:1307   .inflash.dictinary:00000000000003cc _TEVAL
       stm32eforth.s:1314   .inflash.dictinary:00000000000003d4 CA_TEVAL
       stm32eforth.s:1314   .text:0000000000000484 TEVAL
       stm32eforth.s:1314   .inflash.dictinary:00000000000003d8 LF_HLD
       stm32eforth.s:1314   .inflash.dictinary:00000000000003dc _HLD
       stm32eforth.s:1321   .inflash.dictinary:00000000000003e0 CA_HLD
       stm32eforth.s:1321   .text:0000000000000490 HLD
       stm32eforth.s:1321   .inflash.dictinary:00000000000003e4 LF_CNTXT
       stm32eforth.s:1321   .inflash.dictinary:00000000000003e8 _CNTXT
       stm32eforth.s:1328   .inflash.dictinary:00000000000003f0 CA_CNTXT
       stm32eforth.s:1328   .text:000000000000049c CNTXT
       stm32eforth.s:1329   .text:000000000000049c CRRNT
       stm32eforth.s:1328   .inflash.dictinary:00000000000003f4 LF_CPP
       stm32eforth.s:1328   .inflash.dictinary:00000000000003f8 _CPP
       stm32eforth.s:1336   .inflash.dictinary:00000000000003fc CA_CPP
       stm32eforth.s:1336   .text:00000000000004a8 CPP
       stm32eforth.s:1336   .inflash.dictinary:0000000000000400 LF_FCP
       stm32eforth.s:1336   .inflash.dictinary:0000000000000404 _FCP
       stm32eforth.s:1343   .inflash.dictinary:0000000000000408 CA_FCP
ARM GAS  stm32eforth.s 			page 87


       stm32eforth.s:1343   .text:00000000000004b4 FCP
       stm32eforth.s:1343   .inflash.dictinary:000000000000040c LF_LAST
       stm32eforth.s:1343   .inflash.dictinary:0000000000000410 _LAST
       stm32eforth.s:1350   .inflash.dictinary:0000000000000418 CA_LAST
       stm32eforth.s:1350   .text:00000000000004c0 LAST
       stm32eforth.s:1350   .inflash.dictinary:000000000000041c LF_USER_BEGIN
       stm32eforth.s:1350   .inflash.dictinary:0000000000000420 _USER_BEGIN
       stm32eforth.s:1361   .inflash.dictinary:000000000000042c CA_USER_BEGIN
       stm32eforth.s:1361   .text:00000000000004cc USER_BEGIN
       stm32eforth.s:1365   .text:00000000000004d4 USR_BGN_ADR
       stm32eforth.s:1366   .text:00000000000004d4 $d
       stm32eforth.s:1361   .inflash.dictinary:0000000000000430 LF_USER_END
       stm32eforth.s:1361   .inflash.dictinary:0000000000000434 _USER_END
       stm32eforth.s:1370   .inflash.dictinary:0000000000000440 CA_USER_END
       stm32eforth.s:1370   .text:00000000000004d8 USER_END
       stm32eforth.s:1370   .text:00000000000004d8 $t
       stm32eforth.s:1370   .inflash.dictinary:0000000000000444 LF_IMG_ADR
       stm32eforth.s:1370   .inflash.dictinary:0000000000000448 _IMG_ADR
       stm32eforth.s:1377   .inflash.dictinary:0000000000000450 CA_IMG_ADR
       stm32eforth.s:1377   .text:00000000000004e8 IMG_ADR
       stm32eforth.s:1381   .text:00000000000004f0 USR_IMG_ADR
       stm32eforth.s:1382   .text:00000000000004f0 $d
       stm32eforth.s:4054   .user:0000000000000000 USER_SPACE
       stm32eforth.s:1377   .inflash.dictinary:0000000000000454 LF_IMG_SIGN
       stm32eforth.s:1377   .inflash.dictinary:0000000000000458 _IMG_SIGN
       stm32eforth.s:1386   .inflash.dictinary:0000000000000464 CA_IMG_SIGN
       stm32eforth.s:1386   .text:00000000000004f4 IMG_SIGN
       stm32eforth.s:1386   .text:00000000000004f4 $t
       stm32eforth.s:1386   .inflash.dictinary:0000000000000468 LF_WITHI
       stm32eforth.s:1386   .inflash.dictinary:000000000000046c _WITHI
       stm32eforth.s:1397   .inflash.dictinary:0000000000000474 CA_WITHI
       stm32eforth.s:1397   .text:0000000000000500 WITHI
       stm32eforth.s:1397   .inflash.dictinary:0000000000000478 LF_UMMOD
       stm32eforth.s:1397   .inflash.dictinary:000000000000047c _UMMOD
       stm32eforth.s:1411   .inflash.dictinary:0000000000000484 CA_UMMOD
       stm32eforth.s:1411   .text:0000000000000520 UMMOD
       stm32eforth.s:1415   .text:000000000000052a UMMOD0
       stm32eforth.s:1422   .text:000000000000053a UMMOD1
       stm32eforth.s:1428   .text:0000000000000544 UMMOD2
       stm32eforth.s:1411   .inflash.dictinary:0000000000000488 LF_MSMOD
       stm32eforth.s:1411   .inflash.dictinary:000000000000048c _MSMOD
       stm32eforth.s:1437   .inflash.dictinary:0000000000000494 CA_MSMOD
       stm32eforth.s:1437   .text:0000000000000550 MSMOD
       stm32eforth.s:1444   .text:0000000000000568 $d
       stm32eforth.s:1449   .text:000000000000057c MMOD1
       stm32eforth.s:1445   .text:000000000000056c $t
       stm32eforth.s:1454   .text:000000000000058c $d
       stm32eforth.s:1457   .text:0000000000000598 MMOD2
       stm32eforth.s:1455   .text:0000000000000590 $t
       stm32eforth.s:1462   .text:00000000000005a8 $d
       stm32eforth.s:1466   .text:00000000000005b8 MMOD3
       stm32eforth.s:1463   .text:00000000000005ac $t
       stm32eforth.s:1437   .inflash.dictinary:0000000000000498 LF_SLMOD
       stm32eforth.s:1437   .inflash.dictinary:000000000000049c _SLMOD
       stm32eforth.s:1471   .inflash.dictinary:00000000000004a4 CA_SLMOD
       stm32eforth.s:1471   .text:00000000000005bc SLMOD
       stm32eforth.s:1471   .inflash.dictinary:00000000000004a8 LF_MODD
ARM GAS  stm32eforth.s 			page 88


       stm32eforth.s:1471   .inflash.dictinary:00000000000004ac _MODD
       stm32eforth.s:1481   .inflash.dictinary:00000000000004b4 CA_MODD
       stm32eforth.s:1481   .inflash.dictinary:00000000000004b8 LF_SLASH
       stm32eforth.s:1481   .inflash.dictinary:00000000000004bc _SLASH
       stm32eforth.s:1489   .inflash.dictinary:00000000000004c0 CA_SLASH
       stm32eforth.s:1489   .text:00000000000005e4 SLASH
       stm32eforth.s:1489   .inflash.dictinary:00000000000004c4 LF_SSMOD
       stm32eforth.s:1489   .inflash.dictinary:00000000000004c8 _SSMOD
       stm32eforth.s:1498   .inflash.dictinary:00000000000004d0 CA_SSMOD
       stm32eforth.s:1498   .text:00000000000005f8 SSMOD
       stm32eforth.s:1498   .inflash.dictinary:00000000000004d4 LF_STASL
       stm32eforth.s:1498   .inflash.dictinary:00000000000004d8 _STASL
       stm32eforth.s:1508   .inflash.dictinary:00000000000004dc CA_STASL
       stm32eforth.s:1508   .text:0000000000000610 STASL
       stm32eforth.s:1508   .inflash.dictinary:00000000000004e0 LF_ALGND
       stm32eforth.s:1508   .inflash.dictinary:00000000000004e4 _ALGND
       stm32eforth.s:1520   .inflash.dictinary:00000000000004ec CA_ALGND
       stm32eforth.s:1520   .text:0000000000000624 ALGND
       stm32eforth.s:1520   .inflash.dictinary:00000000000004f0 LF_TCHAR
       stm32eforth.s:1520   .inflash.dictinary:00000000000004f4 _TCHAR
       stm32eforth.s:1528   .inflash.dictinary:00000000000004fc CA_TCHAR
       stm32eforth.s:1528   .text:0000000000000634 TCHAR
       stm32eforth.s:1530   .text:000000000000063c $d
       stm32eforth.s:1531   .text:0000000000000640 $t
       stm32eforth.s:1534   .text:0000000000000650 $d
       stm32eforth.s:1535   .text:0000000000000654 $t
       stm32eforth.s:1538   .text:0000000000000660 $d
       stm32eforth.s:1541   .text:0000000000000670 TCHA1
       stm32eforth.s:1539   .text:0000000000000664 $t
       stm32eforth.s:1540   .text:000000000000066c $d
       stm32eforth.s:1542   .text:0000000000000670 $t
       stm32eforth.s:1528   .inflash.dictinary:0000000000000500 LF_DEPTH
       stm32eforth.s:1528   .inflash.dictinary:0000000000000504 _DEPTH
       stm32eforth.s:1546   .inflash.dictinary:000000000000050c CA_DEPTH
       stm32eforth.s:1546   .text:0000000000000674 DEPTH
       stm32eforth.s:1546   .inflash.dictinary:0000000000000510 LF_PICK
       stm32eforth.s:1546   .inflash.dictinary:0000000000000514 _PICK
       stm32eforth.s:1555   .inflash.dictinary:000000000000051c CA_PICK
       stm32eforth.s:1555   .text:000000000000068c PICK
       stm32eforth.s:1555   .inflash.dictinary:0000000000000520 LF_HERE
       stm32eforth.s:1555   .inflash.dictinary:0000000000000524 _HERE
       stm32eforth.s:1569   .inflash.dictinary:000000000000052c CA_HERE
       stm32eforth.s:1569   .text:00000000000006a8 HERE
       stm32eforth.s:1569   .inflash.dictinary:0000000000000530 LF_PAD
       stm32eforth.s:1569   .inflash.dictinary:0000000000000534 _PAD
       stm32eforth.s:1577   .inflash.dictinary:0000000000000538 CA_PAD
       stm32eforth.s:1577   .text:00000000000006b8 PAD
       stm32eforth.s:1577   .inflash.dictinary:000000000000053c LF_TIB
       stm32eforth.s:1577   .inflash.dictinary:0000000000000540 _TIB
       stm32eforth.s:1585   .inflash.dictinary:0000000000000544 CA_TIB
       stm32eforth.s:1585   .text:00000000000006c8 TIB
       stm32eforth.s:1585   .inflash.dictinary:0000000000000548 LF_ATEXE
       stm32eforth.s:1585   .inflash.dictinary:000000000000054c _ATEXE
       stm32eforth.s:1592   .inflash.dictinary:0000000000000558 CA_ATEXE
       stm32eforth.s:1592   .text:00000000000006d0 ATEXE
       stm32eforth.s:1592   .inflash.dictinary:000000000000055c LF_CMOVE
       stm32eforth.s:1592   .inflash.dictinary:0000000000000560 _CMOVE
ARM GAS  stm32eforth.s 			page 89


       stm32eforth.s:1603   .inflash.dictinary:0000000000000568 CA_CMOVE
       stm32eforth.s:1603   .text:00000000000006e4 CMOVE
       stm32eforth.s:1610   .text:00000000000006f6 CMOV1
       stm32eforth.s:1607   .text:00000000000006ee CMOV0
       stm32eforth.s:1615   .text:0000000000000700 CMOV2
       stm32eforth.s:1603   .inflash.dictinary:000000000000056c LF_MOVE
       stm32eforth.s:1603   .inflash.dictinary:0000000000000570 _MOVE
       stm32eforth.s:1621   .inflash.dictinary:0000000000000578 CA_MOVE
       stm32eforth.s:1621   .text:0000000000000708 MOVE
       stm32eforth.s:1629   .text:000000000000071e MOVE1
       stm32eforth.s:1626   .text:0000000000000716 MOVE0
       stm32eforth.s:1634   .text:0000000000000728 MOVE2
       stm32eforth.s:1621   .inflash.dictinary:000000000000057c LF_FILL
       stm32eforth.s:1621   .inflash.dictinary:0000000000000580 _FILL
       stm32eforth.s:1640   .inflash.dictinary:0000000000000588 CA_FILL
       stm32eforth.s:1640   .text:0000000000000730 FILL
       stm32eforth.s:1643   .text:0000000000000738 FILL0
       stm32eforth.s:1646   .text:000000000000073c FILL1
       stm32eforth.s:1652   .text:000000000000074a FILL2
       stm32eforth.s:1640   .inflash.dictinary:000000000000058c LF_PACKS
       stm32eforth.s:1640   .inflash.dictinary:0000000000000590 _PACKS
       stm32eforth.s:1658   .inflash.dictinary:0000000000000598 CA_PACKS
       stm32eforth.s:1658   .text:0000000000000750 PACKS
       stm32eforth.s:1666   .text:0000000000000770 $d
       stm32eforth.s:1667   .text:0000000000000774 $t
       stm32eforth.s:1668   .text:000000000000077c $d
       stm32eforth.s:1669   .text:0000000000000780 $t
       stm32eforth.s:1658   .inflash.dictinary:000000000000059c LF_DIGIT
       stm32eforth.s:1658   .inflash.dictinary:00000000000005a0 _DIGIT
       stm32eforth.s:1685   .inflash.dictinary:00000000000005a8 CA_DIGIT
       stm32eforth.s:1685   .text:00000000000007a8 DIGIT
       stm32eforth.s:1687   .text:00000000000007b0 $d
       stm32eforth.s:1688   .text:00000000000007b4 $t
       stm32eforth.s:1685   .inflash.dictinary:00000000000005ac LF_EXTRC
       stm32eforth.s:1685   .inflash.dictinary:00000000000005b0 _EXTRC
       stm32eforth.s:1697   .inflash.dictinary:00000000000005b8 CA_EXTRC
       stm32eforth.s:1697   .text:00000000000007cc EXTRC
       stm32eforth.s:1699   .text:00000000000007d4 $d
       stm32eforth.s:1700   .text:00000000000007d8 $t
       stm32eforth.s:1697   .inflash.dictinary:00000000000005bc LF_BDIGS
       stm32eforth.s:1697   .inflash.dictinary:00000000000005c0 _BDIGS
       stm32eforth.s:1708   .inflash.dictinary:00000000000005c4 CA_BDIGS
       stm32eforth.s:1708   .text:00000000000007ec BDIGS
       stm32eforth.s:1708   .inflash.dictinary:00000000000005c8 LF_HOLD
       stm32eforth.s:1708   .inflash.dictinary:00000000000005cc _HOLD
       stm32eforth.s:1717   .inflash.dictinary:00000000000005d4 CA_HOLD
       stm32eforth.s:1717   .text:0000000000000800 HOLD
       stm32eforth.s:1717   .inflash.dictinary:00000000000005d8 LF_DIG
       stm32eforth.s:1717   .inflash.dictinary:00000000000005dc _DIG
       stm32eforth.s:1730   .inflash.dictinary:00000000000005e0 CA_DIG
       stm32eforth.s:1730   .text:0000000000000824 DIG
       stm32eforth.s:1730   .inflash.dictinary:00000000000005e4 LF_DIGS
       stm32eforth.s:1730   .inflash.dictinary:00000000000005e8 _DIGS
       stm32eforth.s:1740   .inflash.dictinary:00000000000005ec CA_DIGS
       stm32eforth.s:1740   .text:000000000000083c DIGS
       stm32eforth.s:1742   .text:0000000000000840 DIGS1
       stm32eforth.s:1746   .text:000000000000084c $d
ARM GAS  stm32eforth.s 			page 90


       stm32eforth.s:1748   .text:0000000000000852 DIGS2
       stm32eforth.s:1747   .text:0000000000000850 $t
       stm32eforth.s:1740   .inflash.dictinary:00000000000005f0 LF_SIGN
       stm32eforth.s:1740   .inflash.dictinary:00000000000005f4 _SIGN
       stm32eforth.s:1753   .inflash.dictinary:00000000000005fc CA_SIGN
       stm32eforth.s:1753   .text:0000000000000858 SIGN
       stm32eforth.s:1757   .text:0000000000000864 $d
       stm32eforth.s:1760   .text:0000000000000874 SIGN1
       stm32eforth.s:1758   .text:0000000000000868 $t
       stm32eforth.s:1758   .text:000000000000086c $d
       stm32eforth.s:1759   .text:0000000000000870 $t
       stm32eforth.s:1753   .inflash.dictinary:0000000000000600 LF_EDIGS
       stm32eforth.s:1753   .inflash.dictinary:0000000000000604 _EDIGS
       stm32eforth.s:1765   .inflash.dictinary:0000000000000608 CA_EDIGS
       stm32eforth.s:1765   .text:0000000000000878 EDIGS
       stm32eforth.s:1782   .text:0000000000000898 STRR
       stm32eforth.s:1765   .inflash.dictinary:000000000000060c LF_HEX
       stm32eforth.s:1765   .inflash.dictinary:0000000000000610 _HEX
       stm32eforth.s:1796   .inflash.dictinary:0000000000000614 CA_HEX
       stm32eforth.s:1796   .text:00000000000008c0 HEX
       stm32eforth.s:1798   .text:00000000000008c8 $d
       stm32eforth.s:1799   .text:00000000000008cc $t
       stm32eforth.s:1796   .inflash.dictinary:0000000000000618 LF_DECIM
       stm32eforth.s:1796   .inflash.dictinary:000000000000061c _DECIM
       stm32eforth.s:1805   .inflash.dictinary:0000000000000624 CA_DECIM
       stm32eforth.s:1805   .text:00000000000008d8 DECIM
       stm32eforth.s:1807   .text:00000000000008e0 $d
       stm32eforth.s:1808   .text:00000000000008e4 $t
       stm32eforth.s:1805   .inflash.dictinary:0000000000000628 LF_DIGTQ
       stm32eforth.s:1805   .inflash.dictinary:000000000000062c _DIGTQ
       stm32eforth.s:1817   .inflash.dictinary:0000000000000634 CA_DIGTQ
       stm32eforth.s:1817   .text:00000000000008f0 DIGTQ
       stm32eforth.s:1820   .text:00000000000008fc $d
       stm32eforth.s:1821   .text:0000000000000900 $t
       stm32eforth.s:1822   .text:0000000000000908 $d
       stm32eforth.s:1823   .text:000000000000090c $t
       stm32eforth.s:1826   .text:0000000000000918 $d
       stm32eforth.s:1833   .text:000000000000093c DGTQ1
       stm32eforth.s:1827   .text:000000000000091c $t
       stm32eforth.s:1827   .text:0000000000000920 $d
       stm32eforth.s:1828   .text:0000000000000924 $t
       stm32eforth.s:1830   .text:0000000000000930 $d
       stm32eforth.s:1831   .text:0000000000000934 $t
       stm32eforth.s:1817   .inflash.dictinary:0000000000000638 LF_NUMBQ
       stm32eforth.s:1817   .inflash.dictinary:000000000000063c _NUMBQ
       stm32eforth.s:1841   .inflash.dictinary:0000000000000644 CA_NUMBQ
       stm32eforth.s:1841   .text:000000000000094c NUMBQ
       stm32eforth.s:1846   .text:0000000000000960 $d
       stm32eforth.s:1847   .text:0000000000000964 $t
       stm32eforth.s:1851   .text:0000000000000978 $d
       stm32eforth.s:1852   .text:000000000000097c $t
       stm32eforth.s:1854   .text:0000000000000984 $d
       stm32eforth.s:1860   .text:000000000000099c NUMQ1
       stm32eforth.s:1855   .text:0000000000000988 $t
       stm32eforth.s:1863   .text:00000000000009a8 $d
       stm32eforth.s:1864   .text:00000000000009ac $t
       stm32eforth.s:1874   .text:00000000000009d4 $d
ARM GAS  stm32eforth.s 			page 91


       stm32eforth.s:1912   .text:0000000000000a60 NUMQ6
       stm32eforth.s:1875   .text:00000000000009d8 $t
       stm32eforth.s:1877   .text:00000000000009e0 NUMQ2
       stm32eforth.s:1885   .text:00000000000009fc $d
       stm32eforth.s:1904   .text:0000000000000a44 NUMQ4
       stm32eforth.s:1886   .text:0000000000000a00 $t
       stm32eforth.s:1894   .text:0000000000000a20 $d
       stm32eforth.s:1895   .text:0000000000000a24 $t
       stm32eforth.s:1899   .text:0000000000000a34 $d
       stm32eforth.s:1901   .text:0000000000000a3c NUMQ3
       stm32eforth.s:1900   .text:0000000000000a38 $t
       stm32eforth.s:1910   .text:0000000000000a5c NUMQ5
       stm32eforth.s:1909   .text:0000000000000a58 $d
       stm32eforth.s:1911   .text:0000000000000a5c $t
       stm32eforth.s:1841   .inflash.dictinary:0000000000000648 LF_KEY
       stm32eforth.s:1841   .inflash.dictinary:000000000000064c _KEY
       stm32eforth.s:1925   .inflash.dictinary:0000000000000650 CA_KEY
       stm32eforth.s:1925   .text:0000000000000a78 KEY
       stm32eforth.s:1927   .text:0000000000000a7c KEY1
       stm32eforth.s:1930   .text:0000000000000a84 $d
       stm32eforth.s:1931   .text:0000000000000a88 $t
       stm32eforth.s:1925   .inflash.dictinary:0000000000000654 LF_SPACE
       stm32eforth.s:1925   .inflash.dictinary:0000000000000658 _SPACE
       stm32eforth.s:1935   .inflash.dictinary:0000000000000660 CA_SPACE
       stm32eforth.s:1935   .text:0000000000000a8c SPACE
       stm32eforth.s:1935   .inflash.dictinary:0000000000000664 LF_SPACS
       stm32eforth.s:1935   .inflash.dictinary:0000000000000668 _SPACS
       stm32eforth.s:1943   .inflash.dictinary:0000000000000670 CA_SPACS
       stm32eforth.s:1943   .text:0000000000000a9c SPACS
       stm32eforth.s:1945   .text:0000000000000aa4 $d
       stm32eforth.s:1946   .text:0000000000000aa8 $t
       stm32eforth.s:1951   .text:0000000000000ab8 CHAR2
       stm32eforth.s:1949   .text:0000000000000ab4 CHAR1
       stm32eforth.s:1953   .text:0000000000000abc $d
       stm32eforth.s:1954   .text:0000000000000ac0 $t
       stm32eforth.s:1943   .inflash.dictinary:0000000000000674 LF_TYPEE
       stm32eforth.s:1943   .inflash.dictinary:0000000000000678 _TYPEE
       stm32eforth.s:1958   .inflash.dictinary:0000000000000680 CA_TYPEE
       stm32eforth.s:1958   .text:0000000000000ac4 TYPEE
       stm32eforth.s:1966   .text:0000000000000adc TYPE2
       stm32eforth.s:1962   .text:0000000000000ad0 TYPE1
       stm32eforth.s:1968   .text:0000000000000ae0 $d
       stm32eforth.s:1969   .text:0000000000000ae4 $t
       stm32eforth.s:1958   .inflash.dictinary:0000000000000684 LF_CR
       stm32eforth.s:1958   .inflash.dictinary:0000000000000688 _CR
       stm32eforth.s:1974   .inflash.dictinary:000000000000068c CA_CR
       stm32eforth.s:1974   .text:0000000000000aec CR
       stm32eforth.s:1976   .text:0000000000000af4 $d
       stm32eforth.s:1977   .text:0000000000000af8 $t
       stm32eforth.s:1978   .text:0000000000000b00 $d
       stm32eforth.s:1979   .text:0000000000000b04 $t
       stm32eforth.s:1990   .text:0000000000000b0c DOSTR
       stm32eforth.s:2013   .text:0000000000000b40 STRQP
       stm32eforth.s:2025   .text:0000000000000b4c DOTST
       stm32eforth.s:2038   .text:0000000000000b5c DOTQP
       stm32eforth.s:1974   .inflash.dictinary:0000000000000690 LF_DOTR
       stm32eforth.s:1974   .inflash.dictinary:0000000000000694 _DOTR
ARM GAS  stm32eforth.s 			page 92


       stm32eforth.s:2046   .inflash.dictinary:0000000000000698 CA_DOTR
       stm32eforth.s:2046   .text:0000000000000b6c DOTR
       stm32eforth.s:2046   .inflash.dictinary:000000000000069c LF_UDOTR
       stm32eforth.s:2046   .inflash.dictinary:00000000000006a0 _UDOTR
       stm32eforth.s:2059   .inflash.dictinary:00000000000006a4 CA_UDOTR
       stm32eforth.s:2059   .text:0000000000000b90 UDOTR
       stm32eforth.s:2059   .inflash.dictinary:00000000000006a8 LF_UDOT
       stm32eforth.s:2059   .inflash.dictinary:00000000000006ac _UDOT
       stm32eforth.s:2074   .inflash.dictinary:00000000000006b0 CA_UDOT
       stm32eforth.s:2074   .text:0000000000000bbc UDOT
       stm32eforth.s:2074   .inflash.dictinary:00000000000006b4 LF_DOT
       stm32eforth.s:2074   .inflash.dictinary:00000000000006b8 _DOT
       stm32eforth.s:2085   .inflash.dictinary:00000000000006bc CA_DOT
       stm32eforth.s:2085   .text:0000000000000bd8 DOT
       stm32eforth.s:2089   .text:0000000000000be8 $d
       stm32eforth.s:2090   .text:0000000000000bec $t
       stm32eforth.s:2092   .text:0000000000000bf4 $d
       stm32eforth.s:2095   .text:0000000000000c00 DOT1
       stm32eforth.s:2093   .text:0000000000000bf8 $t
       stm32eforth.s:2085   .inflash.dictinary:00000000000006c0 LF_QUEST
       stm32eforth.s:2085   .inflash.dictinary:00000000000006c4 _QUEST
       stm32eforth.s:2103   .inflash.dictinary:00000000000006c8 CA_QUEST
       stm32eforth.s:2103   .text:0000000000000c10 QUEST
       stm32eforth.s:2119   .text:0000000000000c20 PARS
       stm32eforth.s:2127   .text:0000000000000c3c $d
       stm32eforth.s:2194   .text:0000000000000d2e PARS8
       stm32eforth.s:2128   .text:0000000000000c40 $t
       stm32eforth.s:2134   .text:0000000000000c58 $d
       stm32eforth.s:2155   .text:0000000000000ca8 PARS3
       stm32eforth.s:2135   .text:0000000000000c5c $t
       stm32eforth.s:2136   .text:0000000000000c60 PARS1
       stm32eforth.s:2144   .text:0000000000000c7c $d
       stm32eforth.s:2153   .text:0000000000000ca4 PARS2
       stm32eforth.s:2145   .text:0000000000000c80 $t
       stm32eforth.s:2147   .text:0000000000000c88 $d
       stm32eforth.s:2148   .text:0000000000000c8c $t
       stm32eforth.s:2150   .text:0000000000000c98 $d
       stm32eforth.s:2151   .text:0000000000000c9c $t
       stm32eforth.s:2159   .text:0000000000000cb4 PARS4
       stm32eforth.s:2170   .text:0000000000000cdc $d
       stm32eforth.s:2172   .text:0000000000000ce4 PARS5
       stm32eforth.s:2171   .text:0000000000000ce0 $t
       stm32eforth.s:2174   .text:0000000000000ce8 $d
       stm32eforth.s:2181   .text:0000000000000d02 PARS6
       stm32eforth.s:2175   .text:0000000000000cec $t
       stm32eforth.s:2177   .text:0000000000000cf4 $d
       stm32eforth.s:2178   .text:0000000000000cf8 $t
       stm32eforth.s:2187   .text:0000000000000d16 PARS7
       stm32eforth.s:2103   .inflash.dictinary:00000000000006cc LF_PARSE
       stm32eforth.s:2103   .inflash.dictinary:00000000000006d0 _PARSE
       stm32eforth.s:2202   .inflash.dictinary:00000000000006d8 CA_PARSE
       stm32eforth.s:2202   .text:0000000000000d40 PARSE
       stm32eforth.s:2202   .inflash.dictinary:00000000000006dc LF_DOTPR
       stm32eforth.s:2202   .inflash.dictinary:00000000000006e0 _DOTPR
       stm32eforth.s:2222   .inflash.dictinary:00000000000006e4 CA_DOTPR
       stm32eforth.s:2222   .text:0000000000000d80 DOTPR
       stm32eforth.s:2224   .text:0000000000000d88 $d
ARM GAS  stm32eforth.s 			page 93


       stm32eforth.s:2225   .text:0000000000000d8c $t
       stm32eforth.s:2222   .inflash.dictinary:00000000000006e8 LF_PAREN
       stm32eforth.s:2222   .inflash.dictinary:00000000000006ec _PAREN
       stm32eforth.s:2231   .inflash.dictinary:00000000000006f0 CA_PAREN
       stm32eforth.s:2231   .text:0000000000000d98 PAREN
       stm32eforth.s:2233   .text:0000000000000da0 $d
       stm32eforth.s:2234   .text:0000000000000da4 $t
       stm32eforth.s:2231   .inflash.dictinary:00000000000006f4 LF_BKSLA
       stm32eforth.s:2231   .inflash.dictinary:00000000000006f8 _BKSLA
       stm32eforth.s:2240   .inflash.dictinary:00000000000006fc CA_BKSLA
       stm32eforth.s:2240   .text:0000000000000db0 BKSLA
       stm32eforth.s:2240   .inflash.dictinary:0000000000000700 LF_CAHR
       stm32eforth.s:2240   .inflash.dictinary:0000000000000704 _CAHR
       stm32eforth.s:2250   .inflash.dictinary:000000000000070c CA_CAHR
       stm32eforth.s:2250   .text:0000000000000dc8 CAHR
       stm32eforth.s:2250   .inflash.dictinary:0000000000000710 LF_WORDD
       stm32eforth.s:2250   .inflash.dictinary:0000000000000714 _WORDD
       stm32eforth.s:2260   .inflash.dictinary:000000000000071c CA_WORDD
       stm32eforth.s:2260   .text:0000000000000de0 WORDD
       stm32eforth.s:2260   .inflash.dictinary:0000000000000720 LF_TOKEN
       stm32eforth.s:2260   .inflash.dictinary:0000000000000724 _TOKEN
       stm32eforth.s:2270   .inflash.dictinary:000000000000072c CA_TOKEN
       stm32eforth.s:2270   .text:0000000000000df8 TOKEN
       stm32eforth.s:2270   .inflash.dictinary:0000000000000730 LF_TOCFA
       stm32eforth.s:2270   .inflash.dictinary:0000000000000734 _TOCFA
       stm32eforth.s:2281   .inflash.dictinary:000000000000073c CA_TOCFA
       stm32eforth.s:2281   .text:0000000000000e08 TOCFA
       stm32eforth.s:2284   .text:0000000000000e14 $d
       stm32eforth.s:2285   .text:0000000000000e18 $t
       stm32eforth.s:2281   .inflash.dictinary:0000000000000740 LF_NAMET
       stm32eforth.s:2281   .inflash.dictinary:0000000000000744 _NAMET
       stm32eforth.s:2292   .inflash.dictinary:000000000000074c CA_NAMET
       stm32eforth.s:2292   .text:0000000000000e28 NAMET
       stm32eforth.s:2292   .inflash.dictinary:0000000000000750 LF_SAMEQ
       stm32eforth.s:2292   .inflash.dictinary:0000000000000754 _SAMEQ
       stm32eforth.s:2307   .inflash.dictinary:000000000000075c CA_SAMEQ
       stm32eforth.s:2307   .text:0000000000000e38 SAMEQ
       stm32eforth.s:2327   .text:0000000000000e80 SAME2
       stm32eforth.s:2311   .text:0000000000000e44 SAME1
       stm32eforth.s:2323   .text:0000000000000e70 $d
       stm32eforth.s:2324   .text:0000000000000e74 $t
       stm32eforth.s:2329   .text:0000000000000e84 $d
       stm32eforth.s:2330   .text:0000000000000e88 $t
       stm32eforth.s:2330   .text:0000000000000e8c $d
       stm32eforth.s:2331   .text:0000000000000e90 $t
       stm32eforth.s:2343   .text:0000000000000e94 FIND
       stm32eforth.s:2352   .text:0000000000000eb4 FIND1
       stm32eforth.s:2355   .text:0000000000000ebc $d
       stm32eforth.s:2374   .text:0000000000000f04 FIND6
       stm32eforth.s:2356   .text:0000000000000ec0 $t
       stm32eforth.s:2358   .text:0000000000000ecc $d
       stm32eforth.s:2359   .text:0000000000000ed0 $t
       stm32eforth.s:2363   .text:0000000000000ee0 $d
       stm32eforth.s:2367   .text:0000000000000ef0 FIND2
       stm32eforth.s:2364   .text:0000000000000ee4 $t
       stm32eforth.s:2372   .text:0000000000000f00 FIND3
       stm32eforth.s:2381   .text:0000000000000f1c FIND4
ARM GAS  stm32eforth.s 			page 94


       stm32eforth.s:2383   .text:0000000000000f20 $d
       stm32eforth.s:2388   .text:0000000000000f34 FIND5
       stm32eforth.s:2384   .text:0000000000000f24 $t
       stm32eforth.s:2307   .inflash.dictinary:0000000000000760 LF_NAMEQ
       stm32eforth.s:2307   .inflash.dictinary:0000000000000764 _NAMEQ
       stm32eforth.s:2401   .inflash.dictinary:000000000000076c CA_NAMEQ
       stm32eforth.s:2401   .text:0000000000000f58 NAMEQ
       stm32eforth.s:2418   .text:0000000000000f6c BKSP
       stm32eforth.s:2427   .text:0000000000000f8c $d
       stm32eforth.s:2438   .text:0000000000000fb4 BACK1
       stm32eforth.s:2428   .text:0000000000000f90 $t
       stm32eforth.s:2428   .text:0000000000000f94 $d
       stm32eforth.s:2429   .text:0000000000000f98 $t
       stm32eforth.s:2435   .text:0000000000000fac $d
       stm32eforth.s:2436   .text:0000000000000fb0 $t
       stm32eforth.s:2448   .text:0000000000000fb8 TAP
       stm32eforth.s:2465   .text:0000000000000fd4 KTAP
       stm32eforth.s:2466   .text:0000000000000fd4 TTAP
       stm32eforth.s:2469   .text:0000000000000fe0 $d
       stm32eforth.s:2470   .text:0000000000000fe4 $t
       stm32eforth.s:2472   .text:0000000000000fec $d
       stm32eforth.s:2484   .text:000000000000101c KTAP2
       stm32eforth.s:2473   .text:0000000000000ff0 $t
       stm32eforth.s:2473   .text:0000000000000ff4 $d
       stm32eforth.s:2474   .text:0000000000000ff8 $t
       stm32eforth.s:2476   .text:0000000000001000 $d
       stm32eforth.s:2481   .text:0000000000001014 KTAP1
       stm32eforth.s:2477   .text:0000000000001004 $t
       stm32eforth.s:2480   .text:0000000000001010 $d
       stm32eforth.s:2482   .text:0000000000001014 $t
       stm32eforth.s:2401   .inflash.dictinary:0000000000000770 LF_ACCEP
       stm32eforth.s:2401   .inflash.dictinary:0000000000000774 _ACCEP
       stm32eforth.s:2493   .inflash.dictinary:000000000000077c CA_ACCEP
       stm32eforth.s:2493   .text:0000000000001030 ACCEP
       stm32eforth.s:2498   .text:0000000000001040 ACCP1
       stm32eforth.s:2502   .text:000000000000104c $d
       stm32eforth.s:2517   .text:000000000000107c ACCP4
       stm32eforth.s:2503   .text:0000000000001050 $t
       stm32eforth.s:2506   .text:0000000000001060 $d
       stm32eforth.s:2507   .text:0000000000001064 $t
       stm32eforth.s:2509   .text:000000000000106c $d
       stm32eforth.s:2512   .text:0000000000001076 ACCP2
       stm32eforth.s:2510   .text:0000000000001070 $t
       stm32eforth.s:2515   .text:000000000000107a ACCP3
       stm32eforth.s:2493   .inflash.dictinary:0000000000000780 LF_QUERY
       stm32eforth.s:2493   .inflash.dictinary:0000000000000784 _QUERY
       stm32eforth.s:2525   .inflash.dictinary:000000000000078c CA_QUERY
       stm32eforth.s:2525   .text:000000000000108c QUERY
       stm32eforth.s:2528   .text:0000000000001098 $d
       stm32eforth.s:2529   .text:000000000000109c $t
       stm32eforth.s:2533   .text:00000000000010b0 $d
       stm32eforth.s:2534   .text:00000000000010b4 $t
       stm32eforth.s:2525   .inflash.dictinary:0000000000000790 LF_ABORT
       stm32eforth.s:2525   .inflash.dictinary:0000000000000794 _ABORT
       stm32eforth.s:2543   .inflash.dictinary:000000000000079c CA_ABORT
       stm32eforth.s:2543   .text:00000000000010c0 ABORT
       stm32eforth.s:2546   .text:00000000000010c8 ABORT1
ARM GAS  stm32eforth.s 			page 95


       stm32eforth.s:2549   .text:00000000000010d4 $d
       stm32eforth.s:2550   .text:00000000000010d8 $t
       stm32eforth.s:2660   .text:00000000000011f8 PRESE
       stm32eforth.s:2668   .text:000000000000120c QUIT
       stm32eforth.s:2562   .text:00000000000010e8 ABORQ
       stm32eforth.s:2567   .text:00000000000010f8 $d
       stm32eforth.s:2568   .text:00000000000010fc $t
       stm32eforth.s:2543   .inflash.dictinary:00000000000007a0 LF_INTER
       stm32eforth.s:2543   .inflash.dictinary:00000000000007a4 _INTER
       stm32eforth.s:2578   .inflash.dictinary:00000000000007b0 CA_INTER
       stm32eforth.s:2583   .text:0000000000001118 $d
       stm32eforth.s:2593   .text:0000000000001148 INTE1
       stm32eforth.s:2584   .text:000000000000111c $t
       stm32eforth.s:2585   .text:0000000000001124 $d
       stm32eforth.s:2586   .text:0000000000001128 $t
       stm32eforth.s:2588   .text:0000000000001130 $d
       stm32eforth.s:2590   .text:000000000000113e $t
       stm32eforth.s:2596   .text:0000000000001150 $d
       stm32eforth.s:2598   .text:0000000000001158 INTE2
       stm32eforth.s:2597   .text:0000000000001154 $t
       stm32eforth.s:2578   .inflash.dictinary:00000000000007b4 LF_LBRAC
       stm32eforth.s:2578   .inflash.dictinary:00000000000007b8 _LBRAC
       stm32eforth.s:2603   .inflash.dictinary:00000000000007bc CA_LBRAC
       stm32eforth.s:2603   .text:000000000000115c LBRAC
       stm32eforth.s:2605   .text:0000000000001164 $d
       stm32eforth.s:2606   .text:0000000000001168 $t
       stm32eforth.s:2603   .inflash.dictinary:00000000000007c0 LF_DOTOK
       stm32eforth.s:2603   .inflash.dictinary:00000000000007c4 _DOTOK
       stm32eforth.s:2612   .inflash.dictinary:00000000000007c8 CA_DOTOK
       stm32eforth.s:2612   .text:0000000000001174 DOTOK
       stm32eforth.s:2614   .text:000000000000117c $d
       stm32eforth.s:2615   .text:0000000000001180 $t
       stm32eforth.s:2619   .text:0000000000001190 $d
       stm32eforth.s:2623   .text:000000000000119c DOTO1
       stm32eforth.s:2620   .text:0000000000001194 $t
       stm32eforth.s:2621   .text:0000000000001198 $d
       stm32eforth.s:2624   .text:000000000000119c $t
       stm32eforth.s:2612   .inflash.dictinary:00000000000007cc LF_QSTAC
       stm32eforth.s:2612   .inflash.dictinary:00000000000007d0 _QSTAC
       stm32eforth.s:2629   .inflash.dictinary:00000000000007d8 CA_QSTAC
       stm32eforth.s:2629   .text:00000000000011a4 QSTAC
       stm32eforth.s:2634   .text:00000000000011b4 $d
       stm32eforth.s:2629   .inflash.dictinary:00000000000007dc LF_EVAL
       stm32eforth.s:2629   .inflash.dictinary:00000000000007e0 _EVAL
       stm32eforth.s:2641   .inflash.dictinary:00000000000007e8 CA_EVAL
       stm32eforth.s:2641   .text:00000000000011c4 EVAL
       stm32eforth.s:2643   .text:00000000000011c8 EVAL1
       stm32eforth.s:2648   .text:00000000000011d8 $d
       stm32eforth.s:2653   .text:00000000000011ec EVAL2
       stm32eforth.s:2649   .text:00000000000011dc $t
       stm32eforth.s:2641   .inflash.dictinary:00000000000007ec LF_PRESE
       stm32eforth.s:2641   .inflash.dictinary:00000000000007f0 _PRESE
       stm32eforth.s:2660   .inflash.dictinary:00000000000007f8 CA_PRESE
       stm32eforth.s:2660   .inflash.dictinary:00000000000007fc LF_QUIT
       stm32eforth.s:2660   .inflash.dictinary:0000000000000800 _QUIT
       stm32eforth.s:2668   .inflash.dictinary:0000000000000808 CA_QUIT
       stm32eforth.s:2671   .text:0000000000001218 QUIT1
ARM GAS  stm32eforth.s 			page 96


       stm32eforth.s:2673   .text:000000000000121c QUIT2
       stm32eforth.s:2677   .text:0000000000001228 $d
       stm32eforth.s:2668   .inflash.dictinary:000000000000080c LF_UNLOCK
       stm32eforth.s:2668   .inflash.dictinary:0000000000000810 _UNLOCK
       stm32eforth.s:2684   .inflash.dictinary:0000000000000818 CA_UNLOCK
       stm32eforth.s:2684   .text:000000000000122c UNLOCK
       stm32eforth.s:2684   .text:000000000000122c $t
       stm32eforth.s:2687   .text:0000000000001234 $d
       stm32eforth.s:2708   .text:0000000000001254 LOCK
       stm32eforth.s:2997   .text:0000000000001590 flash_regs
       stm32eforth.s:2688   .text:0000000000001238 $t
       stm32eforth.s:2715   .text:0000000000001260 WAIT_BSY
       stm32eforth.s:2717   .text:0000000000001262 WAIT1
       stm32eforth.s:2684   .inflash.dictinary:000000000000081c LF_EPAGE
       stm32eforth.s:2684   .inflash.dictinary:0000000000000820 _EPAGE
       stm32eforth.s:2727   .inflash.dictinary:000000000000082c CA_EPAGE
       stm32eforth.s:2727   .text:000000000000126c EPAGE
       stm32eforth.s:2730   .text:0000000000001278 $d
       stm32eforth.s:2731   .text:000000000000127c $t
       stm32eforth.s:2740   .text:000000000000129a $d
       stm32eforth.s:2741   .text:000000000000129e $t
       stm32eforth.s:2745   .text:00000000000012ac $d
       stm32eforth.s:2747   .text:00000000000012ba $t
       stm32eforth.s:2752   .text:00000000000012c0 HWORD_WRITE
       stm32eforth.s:2765   .text:00000000000012e2 $d
       stm32eforth.s:2766   .text:00000000000012e6 $t
       stm32eforth.s:2767   .text:00000000000012ea $d
       stm32eforth.s:2769   .text:00000000000012f8 $t
       stm32eforth.s:2727   .inflash.dictinary:0000000000000830 LF_ISTOR
       stm32eforth.s:2727   .inflash.dictinary:0000000000000834 _ISTOR
       stm32eforth.s:2777   .inflash.dictinary:0000000000000838 CA_ISTOR
       stm32eforth.s:2777   .text:00000000000012fc ISTOR
       stm32eforth.s:2780   .text:0000000000001308 $d
       stm32eforth.s:2781   .text:000000000000130c $t
       stm32eforth.s:2791   .text:0000000000001338 $d
       stm32eforth.s:2792   .text:000000000000133c $t
       stm32eforth.s:2777   .inflash.dictinary:000000000000083c LF_IMG_SIZE
       stm32eforth.s:2777   .inflash.dictinary:0000000000000840 _IMG_SIZE
       stm32eforth.s:2798   .inflash.dictinary:000000000000084c CA_IMG_SIZE
       stm32eforth.s:2798   .text:0000000000001344 IMG_SIZE
       stm32eforth.s:2800   .text:000000000000134c $d
       stm32eforth.s:2801   .text:0000000000001350 $t
       stm32eforth.s:2805   .text:0000000000001364 $d
       stm32eforth.s:2806   .text:0000000000001368 $t
       stm32eforth.s:2809   .text:0000000000001374 $d
       stm32eforth.s:2810   .text:0000000000001378 $t
       stm32eforth.s:2798   .inflash.dictinary:0000000000000850 LF_IMGQ
       stm32eforth.s:2798   .inflash.dictinary:0000000000000854 _IMGQ
       stm32eforth.s:2816   .inflash.dictinary:000000000000085c CA_IMGQ
       stm32eforth.s:2816   .text:0000000000001380 IMGQ
       stm32eforth.s:2816   .inflash.dictinary:0000000000000860 LF_LOAD_IMG
       stm32eforth.s:2816   .inflash.dictinary:0000000000000864 _LOAD_IMG
       stm32eforth.s:2828   .inflash.dictinary:0000000000000870 CA_LOAD_IMG
       stm32eforth.s:2828   .text:00000000000013a0 LOAD_IMG
       stm32eforth.s:2832   .text:00000000000013ac $d
       stm32eforth.s:2834   .text:00000000000013b0 $t
       stm32eforth.s:2828   .inflash.dictinary:0000000000000874 LF_ERASE_MPG
ARM GAS  stm32eforth.s 			page 97


       stm32eforth.s:2828   .inflash.dictinary:0000000000000878 _ERASE_MPG
       stm32eforth.s:2858   .inflash.dictinary:0000000000000884 CA_ERASE_MPG
       stm32eforth.s:2858   .text:00000000000013f8 ERASE_MPG
       stm32eforth.s:2908   .text:0000000000001484 PG_TO_ADR
       stm32eforth.s:2863   .text:0000000000001408 $d
       stm32eforth.s:2865   .text:000000000000140c $t
       stm32eforth.s:2872   .text:0000000000001424 $d
       stm32eforth.s:2873   .text:0000000000001428 $t
       stm32eforth.s:2858   .inflash.dictinary:0000000000000888 LF_FLSH_WR
       stm32eforth.s:2858   .inflash.dictinary:000000000000088c _FLSH_WR
       stm32eforth.s:2878   .inflash.dictinary:0000000000000894 CA_FLSH_WR
       stm32eforth.s:2878   .text:0000000000001430 FLSH_WR
       stm32eforth.s:2882   .text:000000000000143c $d
       stm32eforth.s:2884   .text:0000000000001440 $t
       stm32eforth.s:2893   .text:0000000000001464 $d
       stm32eforth.s:2894   .text:0000000000001468 $t
       stm32eforth.s:2878   .inflash.dictinary:0000000000000898 LF_ADR_TO_PG
       stm32eforth.s:2878   .inflash.dictinary:000000000000089c _ADR_TO_PG
       stm32eforth.s:2901   .inflash.dictinary:00000000000008a4 CA_ADR_TO_PG
       stm32eforth.s:2901   .text:0000000000001478 ADR_TO_PG
       stm32eforth.s:2901   .inflash.dictinary:00000000000008a8 LF_PG_TO_ADR
       stm32eforth.s:2901   .inflash.dictinary:00000000000008ac _PG_TO_ADR
       stm32eforth.s:2908   .inflash.dictinary:00000000000008b4 CA_PG_TO_ADR
       stm32eforth.s:2908   .inflash.dictinary:00000000000008b8 LF_ERASE_IMG
       stm32eforth.s:2908   .inflash.dictinary:00000000000008bc _ERASE_IMG
       stm32eforth.s:2915   .inflash.dictinary:00000000000008c8 CA_ERASE_IMG
       stm32eforth.s:2915   .text:0000000000001490 ERASE_IMG
       stm32eforth.s:2921   .text:00000000000014a4 $d
       stm32eforth.s:2922   .text:00000000000014a8 $t
       stm32eforth.s:2926   .text:00000000000014b8 $d
       stm32eforth.s:2927   .text:00000000000014bc $t
       stm32eforth.s:2915   .inflash.dictinary:00000000000008cc LF_SAVE_IMG
       stm32eforth.s:2915   .inflash.dictinary:00000000000008d0 _SAVE_IMG
       stm32eforth.s:2932   .inflash.dictinary:00000000000008dc CA_SAVE_IMG
       stm32eforth.s:2932   .text:00000000000014c4 SAVE_IMG
       stm32eforth.s:2938   .text:00000000000014d8 $d
       stm32eforth.s:2939   .text:00000000000014dc $t
       stm32eforth.s:2942   .text:00000000000014e8 $d
       stm32eforth.s:2944   .text:00000000000014ec $t
       stm32eforth.s:2932   .inflash.dictinary:00000000000008e0 LF_TURNKEY
       stm32eforth.s:2932   .inflash.dictinary:00000000000008e4 _TURNKEY
       stm32eforth.s:2966   .inflash.dictinary:00000000000008ec CA_TURNKEY
       stm32eforth.s:2966   .text:0000000000001528 TURNKEY
       stm32eforth.s:3007   .text:000000000000159c TICK
       stm32eforth.s:2966   .inflash.dictinary:00000000000008f0 LF_FORGET
       stm32eforth.s:2966   .inflash.dictinary:00000000000008f4 _FORGET
       stm32eforth.s:2976   .inflash.dictinary:00000000000008fc CA_FORGET
       stm32eforth.s:2976   .text:0000000000001540 FORGET
       stm32eforth.s:2981   .text:0000000000001554 $d
       stm32eforth.s:2982   .text:0000000000001558 $t
       stm32eforth.s:2985   .text:0000000000001564 $d
       stm32eforth.s:2986   .text:0000000000001568 $t
       stm32eforth.s:3333   .text:00000000000018c8 OVERT
       stm32eforth.s:2998   .text:0000000000001590 $d
       stm32eforth.s:2976   .inflash.dictinary:0000000000000900 LF_TICK
       stm32eforth.s:2976   .inflash.dictinary:0000000000000904 _TICK
       stm32eforth.s:3007   .inflash.dictinary:0000000000000908 CA_TICK
ARM GAS  stm32eforth.s 			page 98


       stm32eforth.s:3007   .text:000000000000159c $t
       stm32eforth.s:3012   .text:00000000000015ac $d
       stm32eforth.s:3014   .text:00000000000015b4 TICK1
       stm32eforth.s:3013   .text:00000000000015b0 $t
       stm32eforth.s:3007   .inflash.dictinary:000000000000090c LF_ALLOT
       stm32eforth.s:3007   .inflash.dictinary:0000000000000910 _ALLOT
       stm32eforth.s:3018   .inflash.dictinary:0000000000000918 CA_ALLOT
       stm32eforth.s:3018   .text:00000000000015b8 ALLOT
       stm32eforth.s:3018   .inflash.dictinary:000000000000091c LF_COMMA
       stm32eforth.s:3018   .inflash.dictinary:0000000000000920 _COMMA
       stm32eforth.s:3026   .inflash.dictinary:0000000000000924 CA_COMMA
       stm32eforth.s:3026   .text:00000000000015c8 COMMA
       stm32eforth.s:3026   .inflash.dictinary:0000000000000928 LF_BCOMP
       stm32eforth.s:3026   .inflash.dictinary:000000000000092c _BCOMP
       stm32eforth.s:3038   .inflash.dictinary:0000000000000938 CA_BCOMP
       stm32eforth.s:3038   .text:00000000000015e8 BCOMP
       stm32eforth.s:3038   .inflash.dictinary:000000000000093c LF_COMPI
       stm32eforth.s:3038   .inflash.dictinary:0000000000000940 _COMPI
       stm32eforth.s:3046   .inflash.dictinary:0000000000000948 CA_COMPI
       stm32eforth.s:3046   .text:00000000000015f8 COMPI
       stm32eforth.s:3388   .text:0000000000001956 CALLC
       stm32eforth.s:3046   .inflash.dictinary:000000000000094c LF_LITER
       stm32eforth.s:3046   .inflash.dictinary:0000000000000950 _LITER
       stm32eforth.s:3060   .inflash.dictinary:0000000000000958 CA_LITER
       stm32eforth.s:3060   .text:0000000000001620 LITER
       stm32eforth.s:3061   .text:0000000000001620 $d
       stm32eforth.s:3062   .text:0000000000001624 $t
       stm32eforth.s:3064   .text:000000000000162c $d
       stm32eforth.s:3065   .text:0000000000001630 $t
       stm32eforth.s:3075   .text:0000000000001638 STRCQ
       stm32eforth.s:3077   .text:0000000000001640 $d
       stm32eforth.s:3078   .text:0000000000001644 $t
       stm32eforth.s:3080   .text:0000000000001650 $d
       stm32eforth.s:3081   .text:0000000000001654 $t
       stm32eforth.s:3060   .inflash.dictinary:000000000000095c LF_FOR
       stm32eforth.s:3060   .inflash.dictinary:0000000000000960 _FOR
       stm32eforth.s:3094   .inflash.dictinary:0000000000000964 CA_FOR
       stm32eforth.s:3094   .text:0000000000001670 FOR
       stm32eforth.s:3097   .text:0000000000001678 $d
       stm32eforth.s:3098   .text:000000000000167c $t
       stm32eforth.s:3094   .inflash.dictinary:0000000000000968 LF_BEGIN
       stm32eforth.s:3094   .inflash.dictinary:000000000000096c _BEGIN
       stm32eforth.s:3103   .inflash.dictinary:0000000000000974 CA_BEGIN
       stm32eforth.s:3103   .text:0000000000001684 BEGIN
       stm32eforth.s:3103   .inflash.dictinary:0000000000000978 LF_NEXT
       stm32eforth.s:3103   .inflash.dictinary:000000000000097c _NEXT
       stm32eforth.s:3110   .inflash.dictinary:0000000000000984 CA_NEXT
       stm32eforth.s:3110   .text:0000000000001690 NEXT
       stm32eforth.s:3113   .text:0000000000001698 $d
       stm32eforth.s:3114   .text:000000000000169c $t
       stm32eforth.s:3110   .inflash.dictinary:0000000000000988 LF_UNTIL
       stm32eforth.s:3110   .inflash.dictinary:000000000000098c _UNTIL
       stm32eforth.s:3119   .inflash.dictinary:0000000000000994 CA_UNTIL
       stm32eforth.s:3119   .text:00000000000016a4 UNTIL
       stm32eforth.s:3122   .text:00000000000016ac $d
       stm32eforth.s:3123   .text:00000000000016b0 $t
       stm32eforth.s:3119   .inflash.dictinary:0000000000000998 LF_AGAIN
ARM GAS  stm32eforth.s 			page 99


       stm32eforth.s:3119   .inflash.dictinary:000000000000099c _AGAIN
       stm32eforth.s:3128   .inflash.dictinary:00000000000009a4 CA_AGAIN
       stm32eforth.s:3128   .text:00000000000016b8 AGAIN
       stm32eforth.s:3131   .text:00000000000016c0 $d
       stm32eforth.s:3132   .text:00000000000016c4 $t
       stm32eforth.s:3128   .inflash.dictinary:00000000000009a8 LF_IFF
       stm32eforth.s:3128   .inflash.dictinary:00000000000009ac _IFF
       stm32eforth.s:3137   .inflash.dictinary:00000000000009b0 CA_IFF
       stm32eforth.s:3137   .text:00000000000016cc IFF
       stm32eforth.s:3140   .text:00000000000016d4 $d
       stm32eforth.s:3141   .text:00000000000016d8 $t
       stm32eforth.s:3142   .text:00000000000016e0 $d
       stm32eforth.s:3143   .text:00000000000016e4 $t
       stm32eforth.s:3137   .inflash.dictinary:00000000000009b4 LF_AHEAD
       stm32eforth.s:3137   .inflash.dictinary:00000000000009b8 _AHEAD
       stm32eforth.s:3149   .inflash.dictinary:00000000000009c0 CA_AHEAD
       stm32eforth.s:3149   .text:00000000000016f0 AHEAD
       stm32eforth.s:3152   .text:00000000000016f8 $d
       stm32eforth.s:3153   .text:00000000000016fc $t
       stm32eforth.s:3154   .text:0000000000001704 $d
       stm32eforth.s:3155   .text:0000000000001708 $t
       stm32eforth.s:3149   .inflash.dictinary:00000000000009c4 LF_REPEA
       stm32eforth.s:3149   .inflash.dictinary:00000000000009c8 _REPEA
       stm32eforth.s:3161   .inflash.dictinary:00000000000009d0 CA_REPEA
       stm32eforth.s:3161   .text:0000000000001714 REPEA
       stm32eforth.s:3161   .inflash.dictinary:00000000000009d4 LF_THENN
       stm32eforth.s:3161   .inflash.dictinary:00000000000009d8 _THENN
       stm32eforth.s:3171   .inflash.dictinary:00000000000009e0 CA_THENN
       stm32eforth.s:3171   .text:000000000000172c THENN
       stm32eforth.s:3171   .inflash.dictinary:00000000000009e4 LF_AFT
       stm32eforth.s:3171   .inflash.dictinary:00000000000009e8 _AFT
       stm32eforth.s:3180   .inflash.dictinary:00000000000009ec CA_AFT
       stm32eforth.s:3180   .text:0000000000001740 AFT
       stm32eforth.s:3180   .inflash.dictinary:00000000000009f0 LF_ELSEE
       stm32eforth.s:3180   .inflash.dictinary:00000000000009f4 _ELSEE
       stm32eforth.s:3190   .inflash.dictinary:00000000000009fc CA_ELSEE
       stm32eforth.s:3190   .text:0000000000001758 ELSEE
       stm32eforth.s:3190   .inflash.dictinary:0000000000000a00 LF_WHILE
       stm32eforth.s:3190   .inflash.dictinary:0000000000000a04 _WHILE
       stm32eforth.s:3199   .inflash.dictinary:0000000000000a0c CA_WHILE
       stm32eforth.s:3199   .text:000000000000176c WHILE
       stm32eforth.s:3199   .inflash.dictinary:0000000000000a10 LF_ABRTQ
       stm32eforth.s:3199   .inflash.dictinary:0000000000000a14 _ABRTQ
       stm32eforth.s:3207   .inflash.dictinary:0000000000000a1c CA_ABRTQ
       stm32eforth.s:3207   .text:000000000000177c ABRTQ
       stm32eforth.s:3210   .text:0000000000001784 $d
       stm32eforth.s:3211   .text:0000000000001788 $t
       stm32eforth.s:3207   .inflash.dictinary:0000000000000a20 LF_STRQ
       stm32eforth.s:3207   .inflash.dictinary:0000000000000a24 _STRQ
       stm32eforth.s:3216   .inflash.dictinary:0000000000000a28 CA_STRQ
       stm32eforth.s:3216   .text:0000000000001790 STRQ
       stm32eforth.s:3219   .text:0000000000001798 $d
       stm32eforth.s:3220   .text:000000000000179c $t
       stm32eforth.s:3216   .inflash.dictinary:0000000000000a2c LF_DOTQ
       stm32eforth.s:3216   .inflash.dictinary:0000000000000a30 _DOTQ
       stm32eforth.s:3225   .inflash.dictinary:0000000000000a34 CA_DOTQ
       stm32eforth.s:3225   .text:00000000000017a4 DOTQ
ARM GAS  stm32eforth.s 			page 100


       stm32eforth.s:3228   .text:00000000000017ac $d
       stm32eforth.s:3229   .text:00000000000017b0 $t
       stm32eforth.s:3225   .inflash.dictinary:0000000000000a38 LF_UNIQU
       stm32eforth.s:3225   .inflash.dictinary:0000000000000a3c _UNIQU
       stm32eforth.s:3238   .inflash.dictinary:0000000000000a44 CA_UNIQU
       stm32eforth.s:3238   .text:00000000000017b8 UNIQU
       stm32eforth.s:3243   .text:00000000000017c8 $d
       stm32eforth.s:3251   .text:00000000000017e4 UNIQ1
       stm32eforth.s:3244   .text:00000000000017cc $t
       stm32eforth.s:3245   .text:00000000000017d0 $d
       stm32eforth.s:3247   .text:00000000000017d8 $t
       stm32eforth.s:3262   .text:00000000000017ec SNAME
       stm32eforth.s:3267   .text:00000000000017fc $d
       stm32eforth.s:3281   .text:0000000000001834 SNAM1
       stm32eforth.s:3268   .text:0000000000001800 $t
       stm32eforth.s:3283   .text:0000000000001838 $d
       stm32eforth.s:3285   .text:0000000000001840 $t
       stm32eforth.s:3238   .inflash.dictinary:0000000000000a48 LF_SCOMP
       stm32eforth.s:3238   .inflash.dictinary:0000000000000a4c _SCOMP
       stm32eforth.s:3289   .inflash.dictinary:0000000000000a58 CA_SCOMP
       stm32eforth.s:3289   .text:0000000000001844 SCOMP
       stm32eforth.s:3294   .text:0000000000001854 $d
       stm32eforth.s:3305   .text:0000000000001880 SCOM2
       stm32eforth.s:3295   .text:0000000000001858 $t
       stm32eforth.s:3296   .text:0000000000001860 $d
       stm32eforth.s:3297   .text:0000000000001864 $t
       stm32eforth.s:3299   .text:000000000000186c $d
       stm32eforth.s:3302   .text:0000000000001878 SCOM1
       stm32eforth.s:3300   .text:0000000000001870 $t
       stm32eforth.s:3308   .text:0000000000001888 $d
       stm32eforth.s:3311   .text:0000000000001894 SCOM3
       stm32eforth.s:3309   .text:000000000000188c $t
       stm32eforth.s:3318   .text:000000000000189c COLON_ABORT
       stm32eforth.s:3289   .inflash.dictinary:0000000000000a5c LF_OVERT
       stm32eforth.s:3289   .inflash.dictinary:0000000000000a60 _OVERT
       stm32eforth.s:3333   .inflash.dictinary:0000000000000a68 CA_OVERT
       stm32eforth.s:3333   .inflash.dictinary:0000000000000a6c LF_SEMIS
       stm32eforth.s:3333   .inflash.dictinary:0000000000000a70 _SEMIS
       stm32eforth.s:3343   .inflash.dictinary:0000000000000a74 CA_SEMIS
       stm32eforth.s:3343   .text:00000000000018e0 SEMIS
       stm32eforth.s:3343   .inflash.dictinary:0000000000000a78 LF_RBRAC
       stm32eforth.s:3343   .inflash.dictinary:0000000000000a7c _RBRAC
       stm32eforth.s:3354   .inflash.dictinary:0000000000000a80 CA_RBRAC
       stm32eforth.s:3354   .text:00000000000018fc RBRAC
       stm32eforth.s:3356   .text:0000000000001904 $d
       stm32eforth.s:3357   .text:0000000000001908 $t
       stm32eforth.s:3365   .text:0000000000001914 COMPILE_BLW
       stm32eforth.s:3354   .inflash.dictinary:0000000000000a84 LF_COLON
       stm32eforth.s:3354   .inflash.dictinary:0000000000000a88 _COLON
       stm32eforth.s:3401   .inflash.dictinary:0000000000000a8c CA_COLON
       stm32eforth.s:3401   .text:0000000000001978 COLON
       stm32eforth.s:3427   .text:00000000000019b4 HEAD
       stm32eforth.s:3401   .inflash.dictinary:0000000000000a90 LF_IMMED
       stm32eforth.s:3401   .inflash.dictinary:0000000000000a94 _IMMED
       stm32eforth.s:3409   .inflash.dictinary:0000000000000aa0 CA_IMMED
       stm32eforth.s:3409   .text:0000000000001988 IMMED
       stm32eforth.s:3411   .text:0000000000001990 $d
ARM GAS  stm32eforth.s 			page 101


       stm32eforth.s:3412   .text:0000000000001994 $t
       stm32eforth.s:3409   .inflash.dictinary:0000000000000aa4 LF_HEAD
       stm32eforth.s:3409   .inflash.dictinary:0000000000000aa8 _HEAD
       stm32eforth.s:3427   .inflash.dictinary:0000000000000ab0 CA_HEAD
       stm32eforth.s:3427   .inflash.dictinary:0000000000000ab4 LF_CONST
       stm32eforth.s:3427   .inflash.dictinary:0000000000000ab8 _CONST
       stm32eforth.s:3442   .inflash.dictinary:0000000000000ac4 CA_CONST
       stm32eforth.s:3442   .text:00000000000019dc CONST
       stm32eforth.s:3445   .text:00000000000019e8 $d
       stm32eforth.s:3446   .text:00000000000019ec $t
       stm32eforth.s:3454   .text:00000000000019fc DODOES
       stm32eforth.s:3465   .text:0000000000001a28 $d
       stm32eforth.s:3466   .text:0000000000001a2c $t
       stm32eforth.s:3442   .inflash.dictinary:0000000000000ac8 LF_DOES
       stm32eforth.s:3442   .inflash.dictinary:0000000000000acc _DOES
       stm32eforth.s:3483   .inflash.dictinary:0000000000000ad4 CA_DOES
       stm32eforth.s:3483   .text:0000000000001a58 DOES
       stm32eforth.s:3485   .text:0000000000001a60 $d
       stm32eforth.s:3486   .text:0000000000001a64 $t
       stm32eforth.s:3483   .inflash.dictinary:0000000000000ad8 LF_CREAT
       stm32eforth.s:3483   .inflash.dictinary:0000000000000adc _CREAT
       stm32eforth.s:3498   .inflash.dictinary:0000000000000ae4 CA_CREAT
       stm32eforth.s:3498   .text:0000000000001a84 CREAT
       stm32eforth.s:3501   .text:0000000000001a90 $d
       stm32eforth.s:3502   .text:0000000000001a94 $t
       stm32eforth.s:3498   .inflash.dictinary:0000000000000ae8 LF_VARIA
       stm32eforth.s:3498   .inflash.dictinary:0000000000000aec _VARIA
       stm32eforth.s:3507   .inflash.dictinary:0000000000000af8 CA_VARIA
       stm32eforth.s:3507   .text:0000000000001a9c VARIA
       stm32eforth.s:3510   .text:0000000000001aa8 $d
       stm32eforth.s:3511   .text:0000000000001aac $t
       stm32eforth.s:3526   .text:0000000000001ab8 DMP
       stm32eforth.s:3529   .text:0000000000001ac4 $d
       stm32eforth.s:3530   .text:0000000000001ac8 $t
       stm32eforth.s:3540   .text:0000000000001af0 PDUM2
       stm32eforth.s:3534   .text:0000000000001ad8 PDUM1
       stm32eforth.s:3537   .text:0000000000001ae4 $d
       stm32eforth.s:3538   .text:0000000000001ae8 $t
       stm32eforth.s:3542   .text:0000000000001af4 $d
       stm32eforth.s:3543   .text:0000000000001af8 $t
       stm32eforth.s:3507   .inflash.dictinary:0000000000000afc LF_DUMP
       stm32eforth.s:3507   .inflash.dictinary:0000000000000b00 _DUMP
       stm32eforth.s:3547   .inflash.dictinary:0000000000000b08 CA_DUMP
       stm32eforth.s:3547   .text:0000000000001afc DUMP
       stm32eforth.s:3553   .text:0000000000001b14 $d
       stm32eforth.s:3554   .text:0000000000001b18 $t
       stm32eforth.s:3567   .text:0000000000001b4c DUMP4
       stm32eforth.s:3557   .text:0000000000001b24 DUMP1
       stm32eforth.s:3559   .text:0000000000001b2c $d
       stm32eforth.s:3560   .text:0000000000001b30 $t
       stm32eforth.s:3569   .text:0000000000001b50 $d
       stm32eforth.s:3570   .text:0000000000001b54 DUMP3
       stm32eforth.s:3571   .text:0000000000001b54 $t
       stm32eforth.s:3547   .inflash.dictinary:0000000000000b0c LF_DOTS
       stm32eforth.s:3547   .inflash.dictinary:0000000000000b10 _DOTS
       stm32eforth.s:3579   .inflash.dictinary:0000000000000b14 CA_DOTS
       stm32eforth.s:3579   .text:0000000000001b68 DOTS
ARM GAS  stm32eforth.s 			page 102


       stm32eforth.s:3589   .text:0000000000001b88 DOTS2
       stm32eforth.s:3585   .text:0000000000001b7c DOTS1
       stm32eforth.s:3591   .text:0000000000001b8c $d
       stm32eforth.s:3592   .text:0000000000001b90 $t
       stm32eforth.s:3579   .inflash.dictinary:0000000000000b18 LF_TNAME
       stm32eforth.s:3579   .inflash.dictinary:0000000000000b1c _TNAME
       stm32eforth.s:3597   .inflash.dictinary:0000000000000b24 CA_TNAME
       stm32eforth.s:3597   .text:0000000000001b98 TNAME
       stm32eforth.s:3602   .text:0000000000001ba8 TNAM1
       stm32eforth.s:3605   .text:0000000000001bb0 $d
       stm32eforth.s:3615   .text:0000000000001bd8 TNAM2
       stm32eforth.s:3606   .text:0000000000001bb4 $t
       stm32eforth.s:3611   .text:0000000000001bc8 $d
       stm32eforth.s:3612   .text:0000000000001bcc $t
       stm32eforth.s:3597   .inflash.dictinary:0000000000000b28 LF_DOTID
       stm32eforth.s:3597   .inflash.dictinary:0000000000000b2c _DOTID
       stm32eforth.s:3622   .inflash.dictinary:0000000000000b30 CA_DOTID
       stm32eforth.s:3622   .text:0000000000001be4 DOTID
       stm32eforth.s:3626   .text:0000000000001bf0 $d
       stm32eforth.s:3632   .text:0000000000001c0c DOTI1
       stm32eforth.s:3627   .text:0000000000001bf4 $t
       stm32eforth.s:3628   .text:0000000000001bfc $d
       stm32eforth.s:3629   .text:0000000000001c00 $t
       stm32eforth.s:3634   .text:0000000000001c10 $d
       stm32eforth.s:3636   .text:0000000000001c1a $t
       stm32eforth.s:3639   *ABS*:0000000000000001 WANT_SEE
       stm32eforth.s:3644   .text:0000000000001c20 DOTCA
       stm32eforth.s:3648   .text:0000000000001c30 $d
       stm32eforth.s:3649   .text:0000000000001c34 $t
       stm32eforth.s:3654   .text:0000000000001c3c CODE_ABORT
       stm32eforth.s:3663   .text:0000000000001c5c $d
       stm32eforth.s:3664   .text:0000000000001c60 $t
       stm32eforth.s:3666   .text:0000000000001c68 $d
       stm32eforth.s:3668   .text:0000000000001c72 $t
       stm32eforth.s:3671   .text:0000000000001c78 $d
       stm32eforth.s:3680   .text:0000000000001c88 UNNESTQ
       stm32eforth.s:3689   .text:0000000000001ca8 $d
       stm32eforth.s:3690   .text:0000000000001cac $t
       stm32eforth.s:3691   .text:0000000000001cb0 $d
       stm32eforth.s:3699   .text:0000000000001cc0 NONAMEQ
       stm32eforth.s:3701   .text:0000000000001cc8 $d
       stm32eforth.s:3702   .text:0000000000001ccc $t
       stm32eforth.s:3703   .text:0000000000001cd4 $d
       stm32eforth.s:3985   .rodata:0000000000000018 NONAME_SUB
       stm32eforth.s:3704   .text:0000000000001cd8 $t
       stm32eforth.s:3710   .text:0000000000001cf0 $d
       stm32eforth.s:3711   .text:0000000000001cf4 $t
       stm32eforth.s:3713   .text:0000000000001cfc $d
       stm32eforth.s:3714   .text:0000000000001d00 $t
       stm32eforth.s:3718   .text:0000000000001d10 $d
       stm32eforth.s:3719   .text:0000000000001d14 $t
       stm32eforth.s:3720   .text:0000000000001d1c $d
       stm32eforth.s:3721   .text:0000000000001d20 $t
       stm32eforth.s:3722   .text:0000000000001d28 $d
       stm32eforth.s:3991   .rodata:0000000000000054 ANONYMOUS
       stm32eforth.s:3723   .text:0000000000001d2c $t
       stm32eforth.s:3741   .text:0000000000001d5c DOTNONAME
ARM GAS  stm32eforth.s 			page 103


       stm32eforth.s:3744   .text:0000000000001d68 $d
       stm32eforth.s:3745   .text:0000000000001d6c $t
       stm32eforth.s:3752   .text:0000000000001d7c IS_BLW
       stm32eforth.s:3754   .text:0000000000001d84 $d
       stm32eforth.s:3755   .text:0000000000001d88 $t
       stm32eforth.s:3622   .inflash.dictinary:0000000000000b34 LF_SEE
       stm32eforth.s:3622   .inflash.dictinary:0000000000000b38 _SEE
       stm32eforth.s:3764   .inflash.dictinary:0000000000000b3c CA_SEE
       stm32eforth.s:3764   .text:0000000000001da0 SEE
       stm32eforth.s:3782   .text:0000000000001dd4 SCOL
       stm32eforth.s:3764   .inflash.dictinary:0000000000000b40 LF_SCOL
       stm32eforth.s:3764   .inflash.dictinary:0000000000000b44 _SCOL
       stm32eforth.s:3782   .inflash.dictinary:0000000000000b50 CA_SCOL
       stm32eforth.s:3784   .text:0000000000001ddc $d
       stm32eforth.s:3785   .text:0000000000001de0 $t
       stm32eforth.s:3786   .text:0000000000001de4 SCOL1
       stm32eforth.s:3791   .text:0000000000001df4 $d
       stm32eforth.s:3792   .text:0000000000001df8 $t
       stm32eforth.s:3798   .text:0000000000001e10 $d
       stm32eforth.s:3799   .text:0000000000001e14 $t
       stm32eforth.s:3802   .text:0000000000001e20 $d
       stm32eforth.s:3803   .text:0000000000001e24 $t
       stm32eforth.s:3836   .text:0000000000001e84 DECOMP
       stm32eforth.s:3807   .text:0000000000001e34 $d
       stm32eforth.s:3808   .text:0000000000001e38 $t
       stm32eforth.s:3814   .text:0000000000001e40 BLADR
       stm32eforth.s:3782   .inflash.dictinary:0000000000000b54 LF_DECOMP
       stm32eforth.s:3782   .inflash.dictinary:0000000000000b58 _DECOMP
       stm32eforth.s:3836   .inflash.dictinary:0000000000000b64 CA_DECOMP
       stm32eforth.s:3843   .text:0000000000001e9c $d
       stm32eforth.s:3872   .text:0000000000001efc DECOM2
       stm32eforth.s:3845   .text:0000000000001ea0 $t
       stm32eforth.s:3846   .text:0000000000001ea4 $d
       stm32eforth.s:3848   .text:0000000000001ea8 $t
       stm32eforth.s:3856   .text:0000000000001ec4 $d
       stm32eforth.s:3859   .text:0000000000001ed0 DECOMP1
       stm32eforth.s:3857   .text:0000000000001ec8 $t
       stm32eforth.s:3858   .text:0000000000001ecc $d
       stm32eforth.s:3861   .text:0000000000001ed4 DECOMP3
       stm32eforth.s:3860   .text:0000000000001ed0 $t
       stm32eforth.s:3868   .text:0000000000001eec $d
       stm32eforth.s:3869   .text:0000000000001ef0 $t
       stm32eforth.s:3836   .inflash.dictinary:0000000000000b68 LF_WORDS
       stm32eforth.s:3836   .inflash.dictinary:0000000000000b6c _WORDS
       stm32eforth.s:3880   .inflash.dictinary:0000000000000b74 CA_WORDS
       stm32eforth.s:3880   .text:0000000000001f08 WORDS
       stm32eforth.s:3885   .text:0000000000001f18 WORS1
       stm32eforth.s:3888   .text:0000000000001f20 $d
       stm32eforth.s:3895   .text:0000000000001f3c WORS2
       stm32eforth.s:3889   .text:0000000000001f24 $t
       stm32eforth.s:3908   .text:0000000000001f40 VERSN
       stm32eforth.s:3910   .text:0000000000001f48 $d
       stm32eforth.s:3911   .text:0000000000001f4c $t
       stm32eforth.s:3880   .inflash.dictinary:0000000000000b78 LF_HI
       stm32eforth.s:3880   .inflash.dictinary:0000000000000b7c _HI
       stm32eforth.s:3915   .inflash.dictinary:0000000000000b80 CA_HI
       stm32eforth.s:3918   .text:0000000000001f5c $d
ARM GAS  stm32eforth.s 			page 104


       stm32eforth.s:3940   .rodata:0000000000000000 hi_msg
       stm32eforth.s:3919   .text:0000000000001f60 $t
       stm32eforth.s:3928   .text:0000000000001f88 $d
       stm32eforth.s:3929   .text:0000000000001f8c $t
       stm32eforth.s:3939   .rodata:0000000000000000 $d
       stm32eforth.s:3915   .inflash.dictinary:0000000000000b84 LF_LASTN
       stm32eforth.s:3949   .inflash.dictinary:0000000000000b90 CA_LASTN
       stm32eforth.s:3949   .text:0000000000001fac LASTN
       stm32eforth.s:3957   .text:0000000000001fcc COLD1
       stm32eforth.s:3958   .text:0000000000001fd0 $d
       stm32eforth.s:3959   .text:0000000000001fd4 $t
       stm32eforth.s:3960   .text:0000000000001fdc $d
       stm32eforth.s:3961   .text:0000000000001fe0 $t
       stm32eforth.s:3961   .text:0000000000001fe4 $d
       stm32eforth.s:3962   .text:0000000000001fe8 $t
       stm32eforth.s:3962   .text:0000000000001fec $d
       stm32eforth.s:3963   .text:0000000000001ff0 $t
       stm32eforth.s:3968   .text:0000000000002000 $d
       stm32eforth.s:3969   .text:0000000000002004 $t
       stm32eforth.s:3976   .text:0000000000002018 COLD2
       stm32eforth.s:3977   .text:0000000000002018 $d
       stm32eforth.s:3995   .rodata:000000000000008c BRAN_LBL
       stm32eforth.s:3999   .rodata:0000000000000098 QBRAN_LBL
       stm32eforth.s:4003   .rodata:00000000000000a4 DOLIT_LBL
       stm32eforth.s:4007   .rodata:00000000000000b0 DONEXT_LBL
       stm32eforth.s:4011   .rodata:00000000000000bc DODOES_LBL
       stm32eforth.s:4015   .rodata:00000000000000c8 DOVAR_LBL
       stm32eforth.s:4019   .rodata:00000000000000d4 DOCON_LBL
       stm32eforth.s:4023   .rodata:00000000000000e0 IS_BLW_LBL
       stm32eforth.s:4027   .rodata:00000000000000ec DOTQP_LBL
       stm32eforth.s:4031   .rodata:00000000000000f0 BLADR_LBL
       stm32eforth.s:4035   .rodata:00000000000000fc DOTCA_LBL
       stm32eforth.s:4039   .rodata:0000000000000108 NONAMEQ_LBL
       stm32eforth.s:4043   .rodata:0000000000000114 STRCQ_LBL
       stm32eforth.s:4047   .rodata:000000000000011c VERSN_LBL
       stm32eforth.s:4053   .user:0000000000000000 $d
       stm32eforth.s:2636   .text:00000000000011bf $d
       stm32eforth.s:2636   .text:00000000000011c0 $t
       stm32eforth.s:3673   .text:0000000000001c7d $d
       stm32eforth.s:3673   .text:0000000000001c7e $t
       stm32eforth.s:3693   .text:0000000000001cb7 $d
       stm32eforth.s:3693   .text:0000000000001cb8 $t
       stm32eforth.s:294    .inflash:000000000000001f $d
       stm32eforth.s:294    .inflash:0000000000000020 $t

UNDEFINED SYMBOLS
_mstack
