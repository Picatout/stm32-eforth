ARM GAS  stm32eforth.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  stm32eforth.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.p2align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.p2aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m3
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
ARM GAS  stm32eforth.s 			page 3


  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
ARM GAS  stm32eforth.s 			page 4


  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
  81              	
  82              	/* blue pill specific constants */ 
  83              	  .equ LED_GPIO, GPIOC_BASE_ADR
  84              	  .equ LED_PIN, 13
  85              	  .equ UART, USART1_BASE_ADR 
  86              	
  87              	/* eForth specific constants */
  88              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  89              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  90              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  91              	.equ UPP ,	0x20000000	/*start of user area (UP0) */
  92              	.equ DTOP ,	0x20000100	/*start of usable RAM area (HERE) */
  93              	.equ DEND , 0x20004E00  /*usable RAM end */
  94              	 .equ RAMOFFSET ,	0x20000000	// remap
  95              	 .equ RAMEND, 0x20005000 // 20Ko
  96              	 .equ FLASHOFFSET ,	0x08000c00	// remap
  97              	//.equ RAMOFFSET  ,	0x00000000	/* absolute */
  98              	//.equ MAPOFFSET  ,	0x00000000	/* absolute */
  99              	  .equ MAPOFFSET , (RAMOFFSET-FLASHOFFSET)
 100              	
 101              	
 102              	
 103              	/*************************************
 104              	   system variables offset from UPP
 105              	*************************************/
ARM GAS  stm32eforth.s 			page 5


 106              	  .equ TICKS_OFS, 4  // millseconds counter
 107              	  .equ TIMER_OFS, 8  // count down timer
 108              	  .equ BOOT_OFS, 12  // boot program address
 109              	  .equ BASE_OFS, 16  // numeric conversion base 
 110              	  .equ TMP_OFS, 20   // temporary variable
 111              	  .equ SPAN_OFS, 24  // character count received by expect  
 112              	  .equ TOIN_OFS, 28  // >IN  parse pointer in TIB
 113              	  .equ NTIB_OFS, 32  // #TIB  characters in TIB 
 114              	  .equ TIB_OFS, 36   // TIB buffer address 
 115              	  .equ EVAL_OFS, 40  // eval|compile vector 
 116              	  .equ HLD_OFS, 44   // hold pointer 
 117              	  .equ CTXT_OFS, 48  // context pointer 
 118              	  .equ FLSH_CTOP_OFS, 52  // flash free dictionary address 
 119              	  .equ RAM_CTOP_OFS, 56  // ram free dictionary address
 120              	  .equ LASTN_OFS, 60     // last word in dictionary link nfa 
 121              	
 122              	
 123              	
 124              	
 125              	/***********************************************
 126              	* MACROS
 127              	*	Assemble inline direct threaded code ending.
 128              	***********************************************/
 129              	 	.macro	_NEXT /*end low level word */
 130              		BX	LR
 131              		.endm
 132              	
 133              	 	.macro	_NEST /*start high level word */
 134              		STMFD	R2!,{LR}
 135              		.endm
 136              	
 137              	 	.macro	_UNNEST	/*end high level word */
 138              		LDMFD	R2!,{PC}
 139              		.endm
 140              	
 141              	 	.macro	_DOLIT /*long literals */
 142              		BL	DOLIT
 143              		.endm
 144              	
 145              	 	.macro	_PUSH	/*push R5 on data stack*/
 146              		STR	R5,[R1,#-4]!
 147              		.endm
 148              	
 149              	 	.macro	_POP /*pop data stack to R5 */
 150              		LDR	R5,[R1],#4
 151              		.endm
 152              	
 153              	/*************************************
 154              	*   interrupt service vectors table 
 155              	**************************************/
 156              	   .section  .isr_vector,"a",%progbits
 157              	  .type  isr_vectors, %object
 158              	
 159              	isr_vectors:
 160 0000 00000000 	  .word   _mstack          /* main return stack address */
 161 0004 00000000 	  .word   reset_handler    /* startup address */
 162              	/* core interrupts || exceptions */
ARM GAS  stm32eforth.s 			page 6


 163 0008 00000000 	  .word   default_handler  /*  NMI */
 164 000c 00000000 	  .word   default_handler  /*  HardFault */
 165 0010 00000000 	  .word   default_handler  /*  Memory Management */
 166 0014 00000000 	  .word   default_handler  /* Bus fault */
 167 0018 00000000 	  .word   default_handler  /* Usage fault */
 168 001c 00000000 	  .word   0
 169 0020 00000000 	  .word   0
 170 0024 00000000 	  .word   0
 171 0028 00000000 	  .word   0
 172 002c 00000000 	  .word   default_handler  /* SWI instruction */
 173 0030 00000000 	  .word   default_handler  /* Debug monitor */
 174 0034 00000000 	  .word   0
 175 0038 00000000 	  .word   default_handler  /* PendSV */
 176 003c 00000000 	  .word   systick_handler  /* Systick */
 177              	  
 178              	  /* External Interrupts */
 179 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 180 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 181 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 182 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 183 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 184 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 185 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 186 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 187 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 188 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 189 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 190 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 191 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 192 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 193 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 194 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 195 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 196 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 197 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 198 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 199 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 200 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 201 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 202 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 203 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 204 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 205 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 206 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 207 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 208 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 209 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 210 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 211 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 212 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 213 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 214 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 215 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 216 00d4 00000000 	  .word      default_handler /* IRQ37, USART1 */                   
 217 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 218 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 219 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
ARM GAS  stm32eforth.s 			page 7


 220 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 221 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 222 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 223 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 224 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 225 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 226 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 227 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 228 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 229 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 230 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 231 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 232 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 233 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 234 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 235 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 236 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 237 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 238 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 239              	
 240              	  .size  isr_vectors, .-isr_vectors
 241              	
 242              	/*****************************************************
 243              	* default isr handler called on unexpected interrupt
 244              	*****************************************************/
 245              	    .section  .text.default_handler,"ax",%progbits
 246              	
 247              	  .type default_handler, %function
 248              	  .p2align 2 
 249              	  .global default_handler
 250              	default_handler:
 251 0000 DFF82400 		ldr r0,cr_adr
 252 0004 40F00100 		orr r0,r0,#1 
 253 0008 8047     		blx	r0	// new line
 254 000a 0848     		ldr r0,dotqp_adr 
 255 000c 40F00100 		orr r0,r0,#1 
 256 0010 8047     		blx	r0
 257 0012 10       		.byte	16
 258 0013 20657863 		.ascii " exception halt!"	
 258      65707469 
 258      6F6E2068 
 258      616C7421 
 259 0023 00       		.p2align 2 
 260 0024 FFF7FEBF 		b reset_handler   
 261              	  .size  default_handler, .-default_handler
 262              	cr_adr:
 263 0028 601E00E8 		.word CR-MAPOFFSET
 264              	dotqp_adr:
 265 002c D01E00E8 		.word DOTQP-MAPOFFSET 
 266              	
 267              	/*********************************
 268              		system milliseconds counter
 269              	*********************************/	
 270              	  .type systick_handler, %function
 271              	  .p2align 2 
 272              	  .global systick_handler
 273              	systick_handler:
ARM GAS  stm32eforth.s 			page 8


 274 0030 4FF00003 	  mov r3,#UPP&0xffff
 275 0034 C2F20003 	  movt r3,#UPP>>16  	
 276 0038 5868     	  ldr r0,[r3,#TICKS_OFS]  
 277 003a 00F10100 	  add r0,#1
 278 003e 5860     	  str r0,[r3,#TICKS_OFS]
 279 0040 9868     	  ldr r0,[r3,#TIMER_OFS]
 280 0042 10B1     	  cbz r0, systick_exit
 281 0044 A0F10100 	  sub r0,#1
 282 0048 9860     	  str r0,[r3,#TIMER_OFS]
 283              	systick_exit:
 284 004a 7047     	  bx lr
 285              	
 286              	
 287              	/**************************************
 288              	  reset_handler execute at MCU reset
 289              	***************************************/
 290              	    .section  .text.reset_handler
 291              	  .type  reset_handler, %function
 292              	  .p2align 2 
 293              	  .global reset_handler
 294              	reset_handler:
 295 0000 00F070F8 		bl	remap 
 296 0004 00F006F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 297              	//	bl	UNLOCK			/* unlock flash memory */
 298 0008 0148     		ldr r0,forth_entry
 299 000a 40F00100 		orr r0,#1
 300 000e 0047     		bx r0 
 301              	forth_entry:
 302 0010 A4180018 		.word COLD+MAPOFFSET 
 303              	
 304              	  .type init_devices, %function
 305              	  .p2align 2 
 306              	init_devices:
 307              	/* init clock to HSE 72 Mhz */
 308              	/* set 2 wait states in FLASH_ACR_LATENCY */
 309 0014 4FF40050 		mov r0,#FLASH_BASE_ADR&0xffff
 310 0018 C4F20200 		movt r0,#FLASH_BASE_ADR>>16 
 311 001c 4FF01202 	  mov r2,#0x12
 312 0020 0260     	  str r2,[r0,#FLASH_ACR]
 313              	/* configure clock for HSE, 8 Mhz crystal */
 314              	/* enable HSE in RCC_CR */
 315 0022 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 316 0026 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 317 002a 0168     	  ldr r1,[r0,#RCC_CR]
 318 002c 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 319 0030 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 320              	/* wait HSERDY loop */
 321              	wait_hserdy:
 322 0032 0168     	  ldr r1,[r0,#RCC_CR]
 323 0034 11F4003F 	  tst r1,#(1<<17)
 324 0038 FBD0     	  beq wait_hserdy
 325              	
 326              	/************************************************* 
 327              	   configure PLL mul factor and source 
 328              	   SYSCLOCK=72 Mhz
 329              	   select HSE as  PLL source clock
 330              	   multiply frequency by 9 
ARM GAS  stm32eforth.s 			page 9


 331              	   APB1 clock is limited to 36 Mhz so divide by 2 
 332              	****************************************************/
 333 003a 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 334 003e C0F21D01 	  movt r1,#(7<<2)|1
 335 0042 4160     	  str r1,[r0,#RCC_CFGR]
 336              	  /* enable PLL */
 337 0044 0168     	  ldr r1,[r0,#RCC_CR]
 338 0046 41F08071 	  orr r1, #1<<24 
 339 004a 0160     	  str r1,[r0,#RCC_CR]
 340              	/* wait for PLLRDY */
 341              	wait_pllrdy:
 342 004c 0168     	  ldr r1,[r0,#RCC_CR]
 343 004e 11F0007F 	  tst r1,#(1<<25)
 344 0052 FBD0     	  beq wait_pllrdy 
 345              	/* select PLL as sysclock */
 346 0054 4168     	  ldr r1,[r0,#RCC_CFGR]
 347 0056 4FF6FC72 	  mov r2,#0xfffc
 348 005a CFF6FF72 	  movt r2,#0xffff
 349 005e 01EA0201 	  and r1,r1,r2 
 350 0062 4FF00202 	  mov r2,#2
 351 0066 41EA0201 	  orr r1,r1,r2
 352 006a 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 353              	/* wait for SWS==2 */
 354              	wait_sws:
 355 006c 4168     	  ldr r1,[r0,#RCC_CFGR]
 356 006e 11F0080F 	  tst r1,#(2<<2)
 357 0072 FBD0     	  beq wait_sws
 358              	/* now sysclock is 72 Mhz */
 359              	
 360              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 361 0074 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 362 0078 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 363 007c 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 364 0080 8161     	  str	r1, [r0, #RCC_APB2ENR]
 365              	
 366              	/* configure GPIOC:13 as output for user LED */
 367 0082 4FF48050 	  mov r0,#GPIOC_BASE_ADR&0xffff
 368 0086 C4F20100 	  movt r0,#GPIOC_BASE_ADR>>16
 369 008a 4168     	  ldr r1,[r0,#GPIO_CRH]
 370 008c 6FF47002 	  mvn r2,#(15<<20)
 371 0090 01EA0201 	  and r1,r1,r2
 372 0094 4FF4C002 	  mov r2,#(6<<20)
 373 0098 41EA0201 	  orr r1,r1,r2
 374 009c 4160     	  str r1,[r0,#GPIO_CRH]
 375              	
 376              	/* configure USART1 */
 377              	/* set GPIOA PIN 9, uart TX  */
 378 009e 4FF40060 	  mov r0,#GPIOA_BASE_ADR&0XFFFF
 379 00a2 C4F20100 	  movt r0,#GPIOA_BASE_ADR>>16	
 380 00a6 4168     	  ldr r1,[r0,#GPIO_CRH]
 381 00a8 6FF0F002 	  mvn r2,#(15<<4)
 382 00ac 01EA0201 	  and r1,r1,r2
 383 00b0 4FF0A002 	  mov r2,#(0xA<<4)
 384 00b4 41EA0201 	  orr r1,r1,r2 
 385 00b8 4160     	  str r1,[r0,#GPIO_CRH]
 386              	
 387 00ba 4FF46050 	  mov r0,#UART&0xFFFF
ARM GAS  stm32eforth.s 			page 10


 388 00be C4F20100 	  movt r0,#UART>>16	
 389              	/* BAUD rate */
 390 00c2 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 391 00c6 8160     	  str r1,[r0,#USART_BRR]
 392 00c8 42F20C01 	  mov r1,#(3<<2)+(1<<13)
 393 00cc C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 394              	/* configure systicks for 1msec ticks */
 395 00ce 4EF21000 	  mov r0,#STK_BASE_ADR&0xFFFF
 396 00d2 CEF20000 	  movt r0,#STK_BASE_ADR>>16	
 397 00d6 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 398 00da 4160     	  str r1,[r0,#STK_LOAD]
 399 00dc 4FF00301 	  mov r1,#3
 400 00e0 0160     	  str r1,[r0,STK_CTL]
 401 00e2 7047     	  _NEXT  
 402              	
 403              	/* copy system to RAM */ 
 404              		.type remap, %function 
 405              	
 406              	remap:
 407 00e4 DFF83400 		ldr r0,remap_dest  
 408 00e8 0B49     		ldr r1,remap_src 
 409 00ea 42F20E12 		mov r2,#CTOP-UZERO 
 410 00ee 02F10302 		add r2,r2,#3
 411 00f2 22F00302 		and r2,r2,#~3 
 412 00f6 51F8043B 	1:	ldr r3,[r1],#4 
 413 00fa 40F8043B 		str r3,[r0],#4 
 414 00fe 043A     		subs R2,#4 
 415 0100 F9D1     		bne 1b
 416              	// zero end of RAM 
 417 0102 4FF4A042 		mov r2,#0x5000
 418 0106 C2F20002 		movt r2,#0x2000
 419 010a 83EA0303 		eor r3,r3,r3 
 420 010e 40F8043B 	2:  str r3,[r0],#4
 421 0112 9042     		cmp r0,r2 
 422 0114 FBDB     		blt 2b 
 423 0116 7047     		_NEXT 
 424              	remap_src:
 425 0118 00040000 		.word UZERO 
 426              	remap_dest:
 427 011c 00000020 		.word RAMOFFSET 
 428              	
 429              	/********************
 430              	* Version control
 431              	*******************/
 432              	.equ VER ,	0x01	/*major release version */
 433              	.equ EXT ,	0x00	/*minor extension */
 434              	
 435              	/* Constants */
 436              	
 437              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 438              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 439              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 440              	
 441              	.equ CELLL ,	4	/*size of a cell */
 442              	.equ BASEE ,	10	/*default radix */
 443              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 444              	
ARM GAS  stm32eforth.s 			page 11


 445              	.equ BKSPP ,	8	/*backspace */
 446              	.equ LF ,	10	  /*line feed */
 447              	.equ CRR ,	13	/*carriage return */
 448              	.equ ERR ,	27	/*error escape */
 449              	.equ TIC ,	39	/*tick */
 450              	
 451              	/********************************************************
 452              	* RAM memory mapping
 453              	* 	0x20000000	RAM base address
 454              	*	0x20000000  system variables	
 455              	* 	0x20000100	Forth dictionary
 456              	* 	0x2000????	top of dictionary, HERE
 457              	* 	0x2000????	WORD buffer, HERE+16
 458              	*   0x20004E00  end of user space
 459              	* 	0x20004E80	top of data stack  R2
 460              	* 	0x20004E80	TIB terminal input buffer
 461              	* 	0x20004F80	top of return stack  R1
 462              	* 	0x20005000	top of hardware stack for interrupts R14
 463              	********************************************************/
 464              	
 465              	
 466              	/******************************************************
 467              	*  COLD start moves the following to USER variables.
 468              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 469              	******************************************************/
 470 0120 AFF30080 		.p2align 10
 470      AFF30080 
 470      AFF30080 
 470      AFF30080 
 470      AFF30080 
 471              	
 472              	UZERO:
 473 0400 00000000 		.word 0  			/*Reserved */
 474 0404 00000000 		.word 0      /* system Ticks */
 475 0408 00000000 	    .word 0     /* delay timer */
 476 040c 30180018 		.word HI+MAPOFFSET  	/*'BOOT */
 477 0410 0A000000 		.word BASEE 	/*BASE */
 478 0414 00000000 		.word 0			/*tmp */
 479 0418 00000000 		.word 0			/*SPAN */
 480 041c 00000000 		.word 0			/*>IN */
 481 0420 00000000 		.word 0			/*#TIB */
 482 0424 804E0020 		.word TIBB	/*TIB */
 483 0428 3C0D0018 		.word INTER+MAPOFFSET	/*'EVAL */
 484 042c 00000000 		.word 0			/*HLD */
 485 0430 9C180018 		.word LASTN+MAPOFFSET	/*CONTEXT */
 486 0434 0E190018 		.word CTOP+MAPOFFSET	/*end of dictionnary */
 487 0438 0E190018 		.word CTOP+MAPOFFSET	/* end of RAM dictionary RAM */
 488 043c 9C180018 		.word LASTN+MAPOFFSET	/*LAST word in dictionary */
 489 0440 00000000 		.word 0,0			/*reserved */
 489      00000000 
 490              	ULAST:
 491              	 
 492              	
 493              	/***********************************
 494              	//  Start of Forth dictionary
 495              	***********************************/
 496              	
ARM GAS  stm32eforth.s 			page 12


 497              		.p2align 2 
 498              	
 499              	// REBOOT ( -- )
 500              	// hardware reset 
 501 0448 00000000 		.word 0
 502 044c 06       	_REBOOT: .byte 6
 503 044d 5245424F 		.ascii "REBOOT"
 503      4F54
 504 0453 00       		.p2align 2 
 505              	REBOOT:
 506 0454 0348     		ldr r0,scb_adr 
 507 0456 C168     		ldr r1,[r0,#SCB_AIRCR]
 508 0458 41F00401 		orr r1,#(1<<2)
 509 045c C0F2FA51 		movt r1,#SCB_VECTKEY
 510 0460 C160     		str r1,[r0,#SCB_AIRCR]
 511 0462 FEE7     		b . 
 512              	scb_adr:
 513 0464 00ED00E0 		.word SCB_BASE_ADR 
 514              	// PAUSE ( u -- ) 
 515              	// suspend execution for u milliseconds
 516 0468 4CF8FF17 		.word _REBOOT+MAPOFFSET
 517 046c 05       	_PAUSE: .byte 5
 518 046d 50415553 		.ascii "PAUSE"
 518      45
 519 0472 00BF     		.p2align 2
 520              	PAUSE:
 521 0474 42F804ED 		_NEST 
 522 0478 00F0B6FA 		BL TIMER 
 523 047c 00F092F8 		BL STORE 
 524              	PAUSE_LOOP:
 525 0480 00F0B2FA 		BL TIMER 
 526 0484 00F098F8 		BL AT 
 527 0488 00F070F8 		BL QBRAN 
 528 048c 98040000 		.word PAUSE_EXIT 
 529 0490 00F078F8 		BL BRAN 
 530 0494 80040000 		.word PAUSE_LOOP 
 531              	PAUSE_EXIT: 		
 532 0498 52F804FB 		_UNNEST 
 533              	
 534              	//  ULED ( T|F -- )
 535              	// control user LED, -1 ON, 0 OFF  
 536 049c 6CF8FF17 		.word _PAUSE + MAPOFFSET
 537 04a0 04       	_ULED: .byte 4
 538 04a1 554C4544 		.ascii "ULED"
 539 04a5 0000BF   		.p2align 2
 540              		.type ULED, %function 
 541              	ULED:
 542 04a8 4FF40056 		mov r6,#(1<<LED_PIN)
 543 04ac 4FF48054 		mov r4,#LED_GPIO&0xffff
 544 04b0 C4F20104 		movt r4,#LED_GPIO>>16
 545 04b4 2800     		movs r0,r5 
 546 04b6 51F8045B 		_POP
 547 04ba 01D0     		beq ULED_OFF 
 548 04bc 6661     		str r6,[r4,#GPIO_BRR]
 549 04be 7047     		_NEXT 
 550              	ULED_OFF:
 551 04c0 2661     		str r6,[r4,#GPIO_BSRR]
ARM GAS  stm32eforth.s 			page 13


 552 04c2 7047     		_NEXT 
 553              		
 554              	//    ?RX	 ( -- c T | F )
 555              	// 	Return input character and true, or a false if no input.
 556 04c4 A0F8FF17 		.word	_ULED+MAPOFFSET
 557 04c8 04       	_QRX:	.byte   4
 558 04c9 3F4B4559 		.ascii "?KEY"
 559 04cd 0000BF   		.p2align 2 
 560              	QKEY:
 561              	QRX: 
 562 04d0 41F8045D 		_PUSH
 563 04d4 4FF46054 		mov r4,#UART&0xFFFF
 564 04d8 C4F20104 		movt r4,#UART>>16
 565 04dc 2688     		ldrh	r6, [r4, #USART_SR]
 566 04de 16F02006 		ands	r6, #0x20		//  RXE
 567 04e2 05D0     		BEQ	QRX1
 568 04e4 6568     	 	LDR	R5, [R4, #USART_DR]
 569 04e6 41F8045D 		_PUSH
 570 04ea 18BF     	    IT NE 
 571 04ec 6FF00005 		MVNNE	R5,#0
 572              	QRX1:
 573 04f0 08BF     		IT EQ 
 574 04f2 0025     	    MOVEQ	R5,#0
 575 04f4 7047     		_NEXT
 576 04f6 00BF     		.p2align 2 
 577              	
 578              	//    TX!	 ( c -- )
 579              	// 	Send character c to the output device.
 580              	
 581 04f8 C8F8FF17 		.word	_QRX+MAPOFFSET
 582 04fc 04       	_TXSTO:	.byte 4
 583 04fd 454D4954 		.ascii "EMIT"
 584 0501 0000BF   		.p2align 2 	
 585              	TXSTO:
 586              	EMIT:
 587              	TECHO:
 588 0504 4FF46054 		mov r4,#UART&0xFFFF
 589 0508 C4F20104 		movt r4,#UART>>16
 590              	TX1:
 591 050c 2688     		ldrh	r6, [r4, #USART_SR]	
 592 050e 16F08006 		ands	r6, #0x80		//  TXE bit 
 593 0512 FBD0     		beq	TX1
 594 0514 A580     		strh	r5, [r4, #USART_DR]	
 595 0516 51F8045B 		_POP
 596 051a 7047     		_NEXT
 597              	
 598              	
 599              		
 600              	// **************************************************************************
 601              	//  The kernel
 602              	
 603              	//    NOP	( -- )
 604              	// 	do nothing.
 605              	
 606 051c FCF8FF17 		.word	_TXSTO+MAPOFFSET
 607 0520 03       	_NOP:	.byte   3
 608 0521 4E4F50   		.ascii "NOP"
ARM GAS  stm32eforth.s 			page 14


 609              		.p2align 2 	
 610              	NOP:
 611 0524 7047     		_NEXT
 612              	 
 613              	
 614              	//    doLIT	( -- w )
 615              	// 	Push an inline literal.
 616              	
 617              	// 	.word	_NOP+MAPOFFSET
 618              	// _LIT	.byte   COMPO+5
 619              	// 	.ascii "doLIT"
 620              	// 	.p2align 2 	
 621              	DOLIT:
 622 0526 41F8045D 		_PUSH				//  store R5 on data stack
 623 052a 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 624 052e 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 625 0532 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 626 0536 7047     		_NEXT
 627              	
 628              	//    EXECUTE	( ca -- )
 629              	// 	Execute the word at ca.
 630              	
 631 0538 20F9FF17 		.word	_NOP+MAPOFFSET
 632 053c 07       	_EXECU:	.byte   7
 633 053d 45584543 		.ascii "EXECUTE"
 633      555445
 634              		.p2align 2 	
 635              	EXECU:
 636 0544 45F00104 		ORR	R4,R5,#1		//  b0=1 
 637 0548 51F8045B 		_POP
 638 054c 2047     		BX	R4
 639              	
 640              	//    next	( -- ) counter on R:
 641              	// 	Run time code for the single index loop.
 642              	// 	: next ( -- ) \ hilevel model
 643              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 644              	
 645              	// 	.word	_EXECU+MAPOFFSET
 646              	// _DONXT	.byte   COMPO+4
 647              	// 	.ascii "next"
 648              	// 	.p2align 2 	
 649              	DONXT:
 650 054e 1468     		LDR	R4,[R2]   // ( -- u )  
 651 0550 24B9     		CBNZ R4,NEXT1 
 652              		/* loop done */
 653 0552 02F10402 		ADD	R2,R2,#4 // drop counter 
 654 0556 0EF1040E 		ADD	LR,LR,#4 // skip after loop address 
 655 055a 7047     		_NEXT
 656              	NEXT1:
 657              		/* decrement loop counter */
 658 055c A4F10104 		SUB	R4,R4,#1
 659 0560 1460     		STR	R4,[R2]
 660 0562 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 661 0566 4EF0010E 		ORR	LR,LR,#1 // begining of loop
 662 056a 7047     		_NEXT
 663              	
 664              	//    ?branch	( f -- )
ARM GAS  stm32eforth.s 			page 15


 665              	// 	Branch if flag is zero.
 666              	
 667              	// 	.word	_DONXT+MAPOFFSET
 668              	// _QBRAN	.byte   COMPO+7
 669              	// 	.ascii "?branch"
 670              	// 	.p2align 2 	
 671              	QBRAN:
 672 056c 2C00     		MOVS	R4,R5
 673 056e 51F8045B 		_POP
 674 0572 04D1     		BNE	QBRAN1
 675 0574 5EF801EC 		LDR	LR,[LR,#-1]
 676 0578 4EF0010E 		ORR LR,LR,#1
 677 057c 7047     		_NEXT
 678              	QBRAN1:
 679 057e 0EF1040E 	 	ADD	LR,LR,#4
 680 0582 7047     		_NEXT
 681              	
 682              	//    branch	( -- )
 683              	// 	Branch to an inline address.
 684              	
 685              	// 	.word	_QBRAN+MAPOFFSET
 686              	// _BRAN	.byte   COMPO+6
 687              	// 	.ascii "branch"
 688              	// 	.p2align 2 	
 689              	BRAN:
 690 0584 5EF801EC 		LDR	LR,[LR,#-1]
 691 0588 4EF0010E 		ORR	LR,LR,#1
 692 058c 7047     		_NEXT
 693              	
 694              	//    EXIT	(  -- )
 695              	// 	Exit the currently executing command.
 696              	
 697 058e 3CF9FF17 		.word	_EXECU+MAPOFFSET
 698 0592 04       	_EXIT:	.byte   4
 699 0593 45584954 		.ascii "EXIT"
 700 0597 00       		.p2align 2 	
 701              	EXIT:
 702 0598 52F804FB 		_UNNEST
 703              	
 704              	//    !	   ( w a -- )
 705              	// 	Pop the data stack to memory.
 706              	
 707 059c 92F9FF17 		.word	_EXIT+MAPOFFSET
 708 05a0 01       	_STORE:	.byte   1
 709 05a1 21       		.ascii "!"
 710 05a2 00BF     		.p2align 2 	
 711              	STORE:
 712 05a4 51F8044B 		LDR	R4,[R1],#4
 713 05a8 2C60     		STR	R4,[R5]
 714 05aa 51F8045B 		_POP
 715 05ae 7047     		_NEXT
 716              	
 717              	//    @	   ( a -- w )
 718              	// 	Push memory location to the data stack.
 719              	
 720 05b0 A0F9FF17 		.word	_STORE+MAPOFFSET
 721 05b4 01       	_AT:	.byte   1
ARM GAS  stm32eforth.s 			page 16


 722 05b5 40       		.ascii "@"
 723 05b6 00BF     		.p2align 2 	
 724              	AT:
 725 05b8 2D68     		LDR	R5,[R5]
 726 05ba 7047     		_NEXT
 727              	
 728              	//    C!	  ( c b -- )
 729              	// 	Pop the data stack to byte memory.
 730              	
 731 05bc B4F9FF17 		.word	_AT+MAPOFFSET
 732 05c0 02       	_CSTOR:	.byte   2
 733 05c1 4321     		.ascii "C!"
 734 05c3 00       		.p2align 2 	
 735              	CSTOR:
 736 05c4 51F8044B 		LDR	R4,[R1],#4
 737 05c8 2C70     		STRB	R4,[R5]
 738 05ca 51F8045B 		_POP
 739 05ce 7047     		_NEXT
 740              	
 741              	//    C@	  ( b -- c )
 742              	// 	Push byte memory location to the data stack.
 743              	
 744 05d0 C0F9FF17 		.word	_CSTOR+MAPOFFSET
 745 05d4 02       	_CAT:	.byte   2
 746 05d5 4340     		.ascii "C@"
 747 05d7 00       		.p2align 2 	
 748              	CAT:
 749 05d8 2D78     		LDRB	R5,[R5]
 750 05da 7047     		_NEXT
 751              	
 752              	//    R>	  ( -- w )
 753              	// 	Pop the return stack to the data stack.
 754              	
 755 05dc D4F9FF17 		.word	_CAT+MAPOFFSET
 756 05e0 02       	_RFROM:	.byte   2
 757 05e1 523E     		.ascii "R>"
 758 05e3 00       		.p2align 2 	
 759              	RFROM:
 760 05e4 41F8045D 		_PUSH
 761 05e8 52F8045B 		LDR	R5,[R2],#4
 762 05ec 7047     		_NEXT
 763              	
 764              	//    R@	  ( -- w )
 765              	// 	Copy top of return stack to the data stack.
 766              	
 767 05ee E0F9FF17 		.word	_RFROM+MAPOFFSET
 768 05f2 02       	_RAT:	.byte   2
 769 05f3 5240     		.ascii "R@"
 770 05f5 0000BF   		.p2align 2 	
 771              	RAT:
 772 05f8 41F8045D 		_PUSH
 773 05fc 1568     		LDR	R5,[R2]
 774 05fe 7047     		_NEXT
 775              	
 776              	//    >R	  ( w -- )
 777              	// 	Push the data stack to the return stack.
 778              	
ARM GAS  stm32eforth.s 			page 17


 779 0600 F2F9FF17 		.word	_RAT+MAPOFFSET
 780 0604 42       	_TOR:	.byte   COMPO+2
 781 0605 3E52     		.ascii ">R"
 782 0607 00       		.p2align 2 	
 783              	TOR:
 784 0608 42F8045D 		STR	R5,[R2,#-4]!
 785 060c 51F8045B 		_POP
 786 0610 7047     		_NEXT
 787              	
 788              	//    SP@	 ( -- a )
 789              	// 	Push the current data stack pointer.
 790              	
 791 0612 04FAFF17 		.word	_TOR+MAPOFFSET
 792 0616 03       	_SPAT:	.byte   3
 793 0617 535040   		.ascii "SP@"
 794 061a 00BF     		.p2align 2 	
 795              	SPAT:
 796 061c 41F8045D 		_PUSH
 797 0620 0D46     		MOV	R5,R1
 798 0622 7047     		_NEXT
 799              	
 800              	//    DROP	( w -- )
 801              	// 	Discard top stack item.
 802              	
 803 0624 16FAFF17 		.word	_SPAT+MAPOFFSET
 804 0628 04       	_DROP:	.byte   4
 805 0629 44524F50 		.ascii "DROP"
 806 062d 0000BF   		.p2align 2 	
 807              	DROP:
 808 0630 51F8045B 		_POP
 809 0634 7047     		_NEXT
 810              	
 811              	//    DUP	 ( w -- w w )
 812              	// 	Duplicate the top stack item.
 813              	
 814 0636 28FAFF17 		.word	_DROP+MAPOFFSET
 815 063a 03       	_DUPP:	.byte   3
 816 063b 445550   		.ascii "DUP"
 817 063e 00BF     		.p2align 2 	
 818              	DUPP:
 819 0640 41F8045D 		_PUSH
 820 0644 7047     		_NEXT
 821              	
 822              	//    SWAP	( w1 w2 -- w2 w1 )
 823              	// 	Exchange top two stack items.
 824              	
 825 0646 3AFAFF17 		.word	_DUPP+MAPOFFSET
 826 064a 04       	_SWAP:	.byte   4
 827 064b 53574150 		.ascii "SWAP"
 828 064f 00       		.p2align 2 	
 829              	SWAP:
 830 0650 0C68     		LDR	R4,[R1]
 831 0652 0D60     		STR	R5,[R1]
 832 0654 2546     		MOV	R5,R4
 833 0656 7047     		_NEXT
 834              	
 835              	//    OVER	( w1 w2 -- w1 w2 w1 )
ARM GAS  stm32eforth.s 			page 18


 836              	// 	Copy second stack item to top.
 837              	
 838 0658 4AFAFF17 		.word	_SWAP+MAPOFFSET
 839 065c 04       	_OVER:	.byte   4
 840 065d 4F564552 		.ascii "OVER"
 841 0661 0000BF   		.p2align 2 	
 842              	OVER:
 843 0664 41F8045D 		_PUSH
 844 0668 4D68     		LDR	R5,[R1,#4]
 845 066a 7047     		_NEXT
 846              	
 847              	//    0<	  ( n -- t )
 848              	// 	Return true if n is negative.
 849              	
 850 066c 5CFAFF17 		.word	_OVER+MAPOFFSET
 851 0670 02       	_ZLESS:	.byte   2
 852 0671 303C     		.ascii "0<"
 853 0673 00       		.p2align 2 	
 854              	ZLESS:
 855 0674 4FF00004 		MOV	R4,#0
 856 0678 04EB2505 		ADD	R5,R4,R5,ASR #32
 857 067c 7047     		_NEXT
 858              	
 859              	//    AND	 ( w w -- w )
 860              	// 	Bitwise AND.
 861              	
 862 067e 70FAFF17 		.word	_ZLESS+MAPOFFSET
 863 0682 03       	_ANDD:	.byte   3
 864 0683 414E44   		.ascii "AND"
 865 0686 00BF     		.p2align 2 	
 866              	ANDD:
 867 0688 51F8044B 		LDR	R4,[R1],#4
 868 068c 05EA0405 		AND	R5,R5,R4
 869 0690 7047     		_NEXT
 870              	
 871              	//    OR	  ( w w -- w )
 872              	// 	Bitwise inclusive OR.
 873              	
 874 0692 82FAFF17 		.word	_ANDD+MAPOFFSET
 875 0696 02       	_ORR:	.byte   2
 876 0697 4F52     		.ascii "OR"
 877 0699 0000BF   		.p2align 2 	
 878              	ORR:
 879 069c 51F8044B 		LDR	R4,[R1],#4
 880 06a0 45EA0405 		ORR	R5,R5,R4
 881 06a4 7047     		_NEXT
 882              	
 883              	//    XOR	 ( w w -- w )
 884              	// 	Bitwise exclusive OR.
 885              	
 886 06a6 96FAFF17 		.word	_ORR+MAPOFFSET
 887 06aa 03       	_XORR:	.byte   3
 888 06ab 584F52   		.ascii "XOR"
 889 06ae 00BF     		.p2align 2 	
 890              	XORR:
 891 06b0 51F8044B 		LDR	R4,[R1],#4
 892 06b4 85EA0405 		EOR	R5,R5,R4
ARM GAS  stm32eforth.s 			page 19


 893 06b8 7047     		_NEXT
 894              	
 895              	//    UM+	 ( w w -- w cy )
 896              	// 	Add two numbers, return the sum and carry flag.
 897              	
 898 06ba AAFAFF17 		.word	_XORR+MAPOFFSET
 899 06be 03       	_UPLUS:	.byte   3
 900 06bf 554D2B   		.ascii "UM+"
 901 06c2 00BF     		.p2align 2 	
 902              	UPLUS:
 903 06c4 0C68     		LDR	R4,[R1]
 904 06c6 6419     		ADDS	R4,R4,R5
 905 06c8 4FF00005 		MOV	R5,#0
 906 06cc 45F10005 		ADC	R5,R5,#0
 907 06d0 0C60     		STR	R4,[R1]
 908 06d2 7047     		_NEXT
 909              	
 910              	//    RSHIFT	 ( w # -- w )
 911              	// 	arithmetic Right shift # bits.
 912              	
 913 06d4 BEFAFF17 		.word	_UPLUS+MAPOFFSET
 914 06d8 06       	_RSHIFT:	.byte   6
 915 06d9 52534849 		.ascii "RSHIFT"
 915      4654
 916 06df 00       		.p2align 2 	
 917              	RSHIFT:
 918 06e0 51F8044B 		LDR	R4,[R1],#4
 919 06e4 44FA05F5 		MOV	R5,R4,ASR R5
 920 06e8 7047     		_NEXT
 921              	
 922              	//    LSHIFT	 ( w # -- w )
 923              	// 	Right shift # bits.
 924              	
 925 06ea D8FAFF17 		.word	_RSHIFT+MAPOFFSET
 926 06ee 06       	_LSHIFT:	.byte   6
 927 06ef 4C534849 		.ascii "LSHIFT"
 927      4654
 928 06f5 0000BF   		.p2align 2 	
 929              	LSHIFT:
 930 06f8 51F8044B 		LDR	R4,[R1],#4
 931 06fc 04FA05F5 		MOV	R5,R4,LSL R5
 932 0700 7047     		_NEXT
 933              	
 934              	//    +	 ( w w -- w )
 935              	// 	Add.
 936              	
 937 0702 EEFAFF17 		.word	_LSHIFT+MAPOFFSET
 938 0706 01       	_PLUS:	.byte   1
 939 0707 2B       		.ascii "+"
 940              		.p2align 2 	
 941              	PLUS:
 942 0708 51F8044B 		LDR	R4,[R1],#4
 943 070c 2544     		ADD	R5,R5,R4
 944 070e 7047     		_NEXT
 945              	
 946              	//    -	 ( w w -- w )
 947              	// 	Subtract.
ARM GAS  stm32eforth.s 			page 20


 948              	
 949 0710 06FBFF17 		.word	_PLUS+MAPOFFSET
 950 0714 01       	_SUBB:	.byte   1
 951 0715 2D       		.ascii "-"
 952 0716 00BF     		.p2align 2 	
 953              	SUBB:
 954 0718 51F8044B 		LDR	R4,[R1],#4
 955 071c C5EB0405 		RSB	R5,R5,R4
 956 0720 7047     		_NEXT
 957              	
 958              	//    *	 ( w w -- w )
 959              	// 	Multiply.
 960              	
 961 0722 14FBFF17 		.word	_SUBB+MAPOFFSET
 962 0726 01       	_STAR:	.byte   1
 963 0727 2A       		.ascii "*"
 964              		.p2align 2 	
 965              	STAR:
 966 0728 51F8044B 		LDR	R4,[R1],#4
 967 072c 04FB05F5 		MUL	R5,R4,R5
 968 0730 7047     		_NEXT
 969              	
 970              	//    UM*	 ( w w -- ud )
 971              	// 	Unsigned multiply.
 972              	
 973 0732 26FBFF17 		.word	_STAR+MAPOFFSET
 974 0736 03       	_UMSTA:	.byte   3
 975 0737 554D2A   		.ascii "UM*"
 976 073a 00BF     		.p2align 2 	
 977              	UMSTA:
 978 073c 0C68     		LDR	R4,[R1]
 979 073e A5FB0467 		UMULL	R6,R7,R5,R4
 980 0742 0E60     		STR	R6,[R1]
 981 0744 3D46     		MOV	R5,R7
 982 0746 7047     		_NEXT
 983              	
 984              	//    M*	 ( w w -- d )
 985              	// 	signed multiply.
 986              	
 987 0748 36FBFF17 		.word	_UMSTA+MAPOFFSET
 988 074c 02       	_MSTAR:	.byte   2
 989 074d 4D2A     		.ascii "M*"
 990 074f 00       		.p2align 2 	
 991              	MSTAR:
 992 0750 0C68     		LDR	R4,[R1]
 993 0752 85FB0467 		SMULL	R6,R7,R5,R4
 994 0756 0E60     		STR	R6,[R1]
 995 0758 3D46     		MOV	R5,R7
 996 075a 7047     		_NEXT
 997              	
 998              	//    1+	 ( w -- w+1 )
 999              	// 	Add 1.
 1000              	
 1001 075c 4CFBFF17 		.word	_MSTAR+MAPOFFSET
 1002 0760 02       	_ONEP:	.byte   2
 1003 0761 312B     		.ascii "1+"
 1004 0763 00       		.p2align 2 	
ARM GAS  stm32eforth.s 			page 21


 1005              	ONEP:
 1006 0764 05F10105 		ADD	R5,R5,#1
 1007 0768 7047     		_NEXT
 1008              	
 1009              	//    1-	 ( w -- w-1 )
 1010              	// 	Subtract 1.
 1011              	
 1012 076a 60FBFF17 		.word	_ONEP+MAPOFFSET
 1013 076e 02       	_ONEM:	.byte   2
 1014 076f 312D     		.ascii "1-"
 1015 0771 0000BF   		.p2align 2 	
 1016              	ONEM:
 1017 0774 A5F10105 		SUB	R5,R5,#1
 1018 0778 7047     		_NEXT
 1019              	
 1020              	//    2+	 ( w -- w+2 )
 1021              	// 	Add 1.
 1022              	
 1023 077a 6EFBFF17 		.word	_ONEM+MAPOFFSET
 1024 077e 02       	_TWOP:	.byte   2
 1025 077f 322B     		.ascii "2+"
 1026 0781 0000BF   		.p2align 2 	
 1027              	TWOP:
 1028 0784 05F10205 		ADD	R5,R5,#2
 1029 0788 7047     		_NEXT
 1030              	
 1031              	//    2-	 ( w -- w-2 )
 1032              	// 	Subtract 2.
 1033              	
 1034 078a 7EFBFF17 		.word	_TWOP+MAPOFFSET
 1035 078e 02       	_TWOM:	.byte   2
 1036 078f 322D     		.ascii "2-"
 1037 0791 0000BF   		.p2align 2 	
 1038              	TWOM:
 1039 0794 A5F10205 		SUB	R5,R5,#2
 1040 0798 7047     		_NEXT
 1041              	
 1042              	//    CELL+	( w -- w+4 )
 1043              	// 	Add CELLL.
 1044              	
 1045 079a 8EFBFF17 		.word	_TWOM+MAPOFFSET
 1046 079e 05       	_CELLP:	.byte   5
 1047 079f 43454C4C 		.ascii "CELL+"
 1047      2B
 1048              		.p2align 2 	
 1049              	CELLP:
 1050 07a4 05F10405 		ADD	R5,R5,#CELLL
 1051 07a8 7047     		_NEXT
 1052              	
 1053              	//    CELL-	( w -- w-4 )
 1054              	// 	Subtract CELLL.
 1055              	
 1056 07aa 9EFBFF17 		.word	_CELLP+MAPOFFSET
 1057 07ae 05       	_CELLM:	.byte   5
 1058 07af 43454C4C 		.ascii "CELL-"
 1058      2D
 1059              		.p2align 2 	
ARM GAS  stm32eforth.s 			page 22


 1060              	CELLM:
 1061 07b4 A5F10405 		SUB	R5,R5,#CELLL
 1062 07b8 7047     		_NEXT
 1063              	 
 1064              	//    BL	( -- 32 )
 1065              	// 	Blank (ASCII space).
 1066              	
 1067 07ba AEFBFF17 		.word	_CELLM+MAPOFFSET
 1068 07be 02       	_BLANK:	.byte   2
 1069 07bf 424C     		.ascii "BL"
 1070 07c1 0000BF   		.p2align 2 	
 1071              	BLANK:
 1072 07c4 41F8045D 		_PUSH
 1073 07c8 4FF02005 		MOV	R5,#32
 1074 07cc 7047     		_NEXT
 1075              	
 1076              	//    CELLS	( w -- w*4 )
 1077              	// 	Multiply 4.
 1078              	
 1079 07ce BEFBFF17 		.word	_BLANK+MAPOFFSET
 1080 07d2 05       	_CELLS:	.byte   5
 1081 07d3 43454C4C 		.ascii "CELLS"
 1081      53
 1082              		.p2align 2 	
 1083              	CELLS:
 1084 07d8 4FEA8505 		MOV	R5,R5,LSL#2
 1085 07dc 7047     		_NEXT
 1086              	
 1087              	//    CELL/	( w -- w/4 )
 1088              	// 	Divide by 4.
 1089              	
 1090 07de D2FBFF17 		.word	_CELLS+MAPOFFSET
 1091 07e2 05       	_CELLSL:	.byte   5
 1092 07e3 43454C4C 		.ascii "CELL/"
 1092      2F
 1093              		.p2align 2 	
 1094              	CELLSL:
 1095 07e8 4FEAA505 		MOV	R5,R5,ASR#2
 1096 07ec 7047     		_NEXT
 1097              	
 1098              	//    2*	( w -- w*2 )
 1099              	// 	Multiply 2.
 1100              	
 1101 07ee E2FBFF17 		.word	_CELLSL+MAPOFFSET
 1102 07f2 02       	_TWOST:	.byte   2
 1103 07f3 322A     		.ascii "2*"
 1104 07f5 0000BF   		.p2align 2 	
 1105              	TWOST:
 1106 07f8 4FEA4505 		MOV	R5,R5,LSL#1
 1107 07fc 7047     		_NEXT
 1108              	
 1109              	//    2/	( w -- w/2 )
 1110              	// 	Divide by 2.
 1111              	
 1112 07fe F2FBFF17 		.word	_TWOST+MAPOFFSET
 1113 0802 02       	_TWOSL:	.byte   2
 1114 0803 322F     		.ascii "2/"
ARM GAS  stm32eforth.s 			page 23


 1115 0805 0000BF   		.p2align 2 	
 1116              	TWOSL:
 1117 0808 4FEA6505 		MOV	R5,R5,ASR#1
 1118 080c 7047     		_NEXT
 1119              	
 1120              	//    ?DUP	( w -- w w | 0 )
 1121              	// 	Conditional duplicate.
 1122              	
 1123 080e 02FCFF17 		.word	_TWOSL+MAPOFFSET
 1124 0812 04       	_QDUP:	.byte   4
 1125 0813 3F445550 		.ascii "?DUP"
 1126 0817 00       		.p2align 2 	
 1127              	QDUP:
 1128 0818 2C00     		MOVS	R4,R5
 1129 081a 18BF     		IT NE 
 1130 081c 41F8045D 	    STRNE	R5,[R1,#-4]!
 1131 0820 7047     		_NEXT
 1132              	
 1133              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1134              	// 	Rotate top 3 items.
 1135              	
 1136 0822 12FCFF17 		.word	_QDUP+MAPOFFSET
 1137 0826 03       	_ROT:	.byte   3
 1138 0827 524F54   		.ascii "ROT"
 1139 082a 00BF     		.p2align 2 	
 1140              	ROT:
 1141 082c 0C68     		LDR	R4,[R1]  // r4=w2 
 1142 082e 0D60     		STR	R5,[R1]  // w3 replace w2 
 1143 0830 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1144 0832 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1145 0834 7047     		_NEXT
 1146              	
 1147              	//    2DROP	( w1 w2 -- )
 1148              	// 	Drop top 2 items.
 1149              	
 1150 0836 26FCFF17 		.word	_ROT+MAPOFFSET
 1151 083a 05       	_DDROP:	.byte   5
 1152 083b 3244524F 		.ascii "2DROP"
 1152      50
 1153              		.p2align 2 	
 1154              	DDROP:
 1155 0840 51F8045B 		_POP
 1156 0844 51F8045B 		_POP
 1157 0848 7047     		_NEXT
 1158              	
 1159              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1160              	// 	Duplicate top 2 items.
 1161              	
 1162 084a 3AFCFF17 		.word	_DDROP+MAPOFFSET
 1163 084e 04       	_DDUP:	.byte   4
 1164 084f 32445550 		.ascii "2DUP"
 1165 0853 00       		.p2align 2 	
 1166              	DDUP:
 1167 0854 0C68     		LDR	R4,[R1] // r4=w1
 1168 0856 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1169 085a 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1170 085e 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 24


 1171              	
 1172              	//    D+	( d1 d2 -- d3 )
 1173              	// 	Add top 2 double numbers.
 1174              	
 1175 0860 4EFCFF17 		.word	_DDUP+MAPOFFSET
 1176 0864 02       	_DPLUS:	.byte   2
 1177 0865 442B     		.ascii "D+"
 1178 0867 00       		.p2align 2 	
 1179              	DPLUS:
 1180 0868 51F8044B 		LDR	R4,[R1],#4
 1181 086c 51F8046B 		LDR	R6,[R1],#4
 1182 0870 0F68     		LDR	R7,[R1]
 1183 0872 E419     		ADDS	R4,R4,R7
 1184 0874 0C60     		STR	R4,[R1]
 1185 0876 45EB0605 		ADC	R5,R5,R6
 1186 087a 7047     		_NEXT
 1187              	
 1188              	//    NOT	 ( w -- !w )
 1189              	// 	1"s complement.
 1190              	
 1191 087c 64FCFF17 		.word	_DPLUS+MAPOFFSET
 1192 0880 03       	_INVER:	.byte   3
 1193 0881 4E4F54   		.ascii "NOT"
 1194              		.p2align 2 	
 1195              	INVER:
 1196 0884 6FEA0505 		MVN	R5,R5
 1197 0888 7047     		_NEXT
 1198              	
 1199              	//    NEGATE	( w -- -w )
 1200              	// 	2's complement.
 1201              	
 1202 088a 80FCFF17 		.word	_INVER+MAPOFFSET
 1203 088e 06       	_NEGAT:	.byte   6
 1204 088f 4E454741 		.ascii "NEGATE"
 1204      5445
 1205 0895 0000BF   		.p2align 2 	
 1206              	NEGAT:
 1207 0898 C5F10005 		RSB	R5,R5,#0
 1208 089c 7047     		_NEXT
 1209              	
 1210              	//    ABS	 ( w -- |w| )
 1211              	// 	Absolute.
 1212              	
 1213 089e 8EFCFF17 		.word	_NEGAT+MAPOFFSET
 1214 08a2 03       	_ABSS:	.byte   3
 1215 08a3 414253   		.ascii "ABS"
 1216 08a6 00BF     		.p2align 2 	
 1217              	ABSS:
 1218 08a8 15F0004F 		TST	R5,#0x80000000
 1219 08ac 18BF     		IT NE
 1220 08ae 6D42     	    RSBNE   R5,R5,#0
 1221 08b0 7047     		_NEXT
 1222              	
 1223              	//    =	 ( w w -- t )
 1224              	// 	Equal?
 1225              	
 1226 08b2 A2FCFF17 		.word	_ABSS+MAPOFFSET
ARM GAS  stm32eforth.s 			page 25


 1227 08b6 01       	_EQUAL:	.byte   1
 1228 08b7 3D       		.ascii "="
 1229              		.p2align 2 	
 1230              	EQUAL:
 1231 08b8 51F8044B 		LDR	R4,[R1],#4
 1232 08bc A542     		CMP	R5,R4
 1233 08be 0CBF     		ITE EQ 
 1234 08c0 6FF00005 	    MVNEQ	R5,#0
 1235 08c4 0025     		MOVNE	R5,#0
 1236 08c6 7047     		_NEXT
 1237              	
 1238              	//    U<	 ( w w -- t )
 1239              	// 	Unsigned equal?
 1240              	
 1241 08c8 B6FCFF17 		.word	_EQUAL+MAPOFFSET
 1242 08cc 02       	_ULESS:	.byte   2
 1243 08cd 553C     		.ascii "U<"
 1244 08cf 00       		.p2align 2 	
 1245              	ULESS:
 1246 08d0 51F8044B 		LDR	R4,[R1],#4
 1247 08d4 AC42     		CMP	R4,R5
 1248 08d6 34BF     		ITE CC 
 1249 08d8 6FF00005 		MVNCC	R5,#0
 1250 08dc 0025     		MOVCS	R5,#0
 1251 08de 7047     		_NEXT
 1252              	
 1253              	//    <	( w w -- t )
 1254              	// 	Less?
 1255              	
 1256 08e0 CCFCFF17 		.word	_ULESS+MAPOFFSET
 1257 08e4 01       	_LESS:	.byte   1
 1258 08e5 3C       		.ascii "<"
 1259 08e6 00BF     		.p2align 2 	
 1260              	LESS:
 1261 08e8 51F8044B 		LDR	R4,[R1],#4
 1262 08ec AC42     		CMP	R4,R5
 1263 08ee B4BF     	    ITE LT
 1264 08f0 6FF00005 		MVNLT	R5,#0
 1265 08f4 0025     		MOVGE	R5,#0
 1266 08f6 7047     		_NEXT
 1267              	
 1268              	//    >	( w w -- t )
 1269              	// 	greater?
 1270              	
 1271 08f8 E4FCFF17 		.word	_LESS+MAPOFFSET
 1272 08fc 01       	_GREAT:	.byte   1
 1273 08fd 3E       		.ascii ">"
 1274 08fe 00BF     		.p2align 2 	
 1275              	GREAT:
 1276 0900 51F8044B 		LDR	R4,[R1],#4
 1277 0904 AC42     		CMP	R4,R5
 1278 0906 CCBF     		ITE GT
 1279 0908 6FF00005 	    MVNGT	R5,#0
 1280 090c 0025     		MOVLE	R5,#0
 1281 090e 7047     		_NEXT
 1282              	
 1283              	//    MAX	 ( w w -- max )
ARM GAS  stm32eforth.s 			page 26


 1284              	// 	Leave maximum.
 1285              	
 1286 0910 FCFCFF17 		.word	_GREAT+MAPOFFSET
 1287 0914 03       	_MAX:	.byte   3
 1288 0915 4D4158   		.ascii "MAX"
 1289              		.p2align 2 	
 1290              	MAX:
 1291 0918 51F8044B 		LDR	R4,[R1],#4
 1292 091c AC42     		CMP	R4,R5
 1293 091e C8BF     		IT GT 
 1294 0920 2546     		MOVGT	R5,R4
 1295 0922 7047     		_NEXT
 1296              	
 1297              	//    MIN	 ( w w -- min )
 1298              	// 	Leave minimum.
 1299              	
 1300 0924 14FDFF17 		.word	_MAX+MAPOFFSET
 1301 0928 03       	_MIN:	.byte   3
 1302 0929 4D494E   		.ascii "MIN"
 1303              		.p2align 2 	
 1304              	MIN:
 1305 092c 51F8044B 		LDR	R4,[R1],#4
 1306 0930 AC42     		CMP	R4,R5
 1307 0932 B8BF     		IT LT
 1308 0934 2546     		MOVLT	R5,R4
 1309 0936 7047     		_NEXT
 1310              	
 1311              	//    +!	 ( w a -- )
 1312              	// 	Add to memory.
 1313              	
 1314 0938 28FDFF17 		.word	_MIN+MAPOFFSET
 1315 093c 02       	_PSTOR:	.byte   2
 1316 093d 2B21     		.ascii "+!"
 1317 093f 00       		.p2align 2 	
 1318              	PSTOR:
 1319 0940 51F8044B 		LDR	R4,[R1],#4
 1320 0944 2E68     		LDR	R6,[R5]
 1321 0946 2644     		ADD	R6,R6,R4
 1322 0948 2E60     		STR	R6,[R5]
 1323 094a 51F8045B 		_POP
 1324 094e 7047     		_NEXT
 1325              	
 1326              	//    2!	 ( d a -- )
 1327              	// 	Store double number.
 1328              	
 1329 0950 3CFDFF17 		.word	_PSTOR+MAPOFFSET
 1330 0954 02       	_DSTOR:	.byte   2
 1331 0955 3221     		.ascii "2!"
 1332 0957 00       		.p2align 2 	
 1333              	DSTOR:
 1334 0958 51F8044B 		LDR	R4,[R1],#4
 1335 095c 51F8046B 		LDR	R6,[R1],#4
 1336 0960 45F8044B 		STR	R4,[R5],#4
 1337 0964 2E60     		STR	R6,[R5]
 1338 0966 51F8045B 		_POP
 1339 096a 7047     		_NEXT
 1340              	
ARM GAS  stm32eforth.s 			page 27


 1341              	//    2@	 ( a -- d )
 1342              	// 	Fetch double number.
 1343              	
 1344 096c 54FDFF17 		.word	_DSTOR+MAPOFFSET
 1345 0970 02       	_DAT:	.byte   2
 1346 0971 3240     		.ascii "2@"
 1347 0973 00       		.p2align 2 	
 1348              	DAT:
 1349 0974 6C68     		LDR	R4,[R5,#4]
 1350 0976 41F8044D 		STR	R4,[R1,#-4]!
 1351 097a 2D68     		LDR	R5,[R5]
 1352 097c 7047     		_NEXT
 1353              	
 1354              	//    COUNT	( b -- b+1 c )
 1355              	// 	Fetch length of string.
 1356              	
 1357 097e 70FDFF17 		.word	_DAT+MAPOFFSET
 1358 0982 05       	_COUNT:	.byte   5
 1359 0983 434F554E 		.ascii "COUNT"
 1359      54
 1360              		.p2align 2 	
 1361              	COUNT:
 1362 0988 15F8014B 		LDRB	R4,[R5],#1
 1363 098c 41F8045D 		_PUSH
 1364 0990 2546     		MOV	R5,R4
 1365 0992 7047     		_NEXT
 1366              	
 1367              	//    DNEGATE	( d -- -d )
 1368              	// 	Negate double number.
 1369              	
 1370 0994 82FDFF17 		.word	_COUNT+MAPOFFSET
 1371 0998 07       	_DNEGA:	.byte   7
 1372 0999 444E4547 		.ascii "DNEGATE"
 1372      415445
 1373              		.p2align 2 	
 1374              	DNEGA:
 1375 09a0 0C68     		LDR	R4,[R1]
 1376 09a2 A6EB0606 		SUB	R6,R6,R6
 1377 09a6 341B     		SUBS R4,R6,R4
 1378 09a8 66EB0505 		SBC	R5,R6,R5
 1379 09ac 0C60     		STR	R4,[R1]
 1380 09ae 7047     		_NEXT
 1381              	
 1382              	// **************************************************************************
 1383              	//  System and user variables
 1384              	
 1385              	//    doVAR	( -- a )
 1386              	// 	Run time routine for VARIABLE and CREATE.
 1387              	
 1388              	// 	.word	_DNEGA+MAPOFFSET
 1389              	// _DOVAR	.byte  COMPO+5
 1390              	// 	.ascii "doVAR"
 1391              	// 	.p2align 2 	
 1392              	DOVAR:
 1393 09b0 41F8045D 		_PUSH
 1394 09b4 AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
 1395 09b8 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 28


 1396              	
 1397              	//    doCON	( -- a ) 
 1398              	// 	Run time routine for CONSTANT.
 1399              	
 1400              	// 	.word	_DOVAR+MAPOFFSET
 1401              	// _DOCON	.byte  COMPO+5
 1402              	// 	.ascii "doCON"
 1403              	// 	.p2align 2 	
 1404              	DOCON:
 1405 09bc 41F8045D 		_PUSH
 1406 09c0 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1407 09c4 52F804FB 		_UNNEST
 1408              	
 1409              	/***********************
 1410              	  system variables 
 1411              	***********************/
 1412              	  
 1413              	//  MSEC ( -- a)
 1414              	// return address of milliseconds counter
 1415 09c8 98FDFF17 	  .word _DNEGA+MAPOFFSET 
 1416 09cc 04       	_MSEC: .byte 4
 1417 09cd 4D534543 	  .ascii "MSEC"
 1418 09d1 0000BF   	  .p2align 2 
 1419              	MSEC:
 1420 09d4 41F8045D 	  _PUSH
 1421 09d8 03F10405 	  ADD R5,R3,#TICKS_OFS
 1422 09dc 7047     	  _NEXT 
 1423              	
 1424              	// TIMER ( -- a )
 1425 09de CCFDFF17 	  .word _MSEC+MAPOFFSET
 1426 09e2 05       	_TIMER:  .byte 5
 1427 09e3 54494D45 	  .ascii "TIMER"
 1427      52
 1428              	  .p2align 2 
 1429              	TIMER:
 1430 09e8 41F8045D 	  _PUSH 
 1431 09ec 03F10805 	  ADD R5,R3,#TIMER_OFS
 1432 09f0 7047     	  _NEXT
 1433              	
 1434              	//    'BOOT	 ( -- a )
 1435              	// 	Application.
 1436              	
 1437 09f2 E2FDFF17 		.word	_TIMER+MAPOFFSET
 1438 09f6 05       	_TBOOT:	.byte   5
 1439 09f7 27424F4F 		.ascii "'BOOT"
 1439      54
 1440              		.p2align 2 	
 1441              	TBOOT:
 1442 09fc 41F8045D 		_PUSH
 1443 0a00 03F10C05 		ADD	R5,R3,#BOOT_OFS 
 1444 0a04 7047     		_NEXT
 1445              		
 1446              	//    BASE	( -- a )
 1447              	// 	Storage of the radix base for numeric I/O.
 1448              	
 1449 0a06 F6FDFF17 		.word	_TBOOT+MAPOFFSET
 1450 0a0a 04       	_BASE:	.byte   4
ARM GAS  stm32eforth.s 			page 29


 1451 0a0b 42415345 		.ascii "BASE"
 1452 0a0f 00       		.p2align 2 	
 1453              	BASE:
 1454 0a10 41F8045D 		_PUSH
 1455 0a14 03F11005 		ADD	R5,R3,#BASE_OFS
 1456 0a18 7047     		_NEXT
 1457              	
 1458              	//    tmp	 ( -- a )
 1459              	// 	A temporary storage location used in parse and find.
 1460              	
 1461              	// 	.word	_BASE+MAPOFFSET
 1462              	// _TEMP	.byte   COMPO+3
 1463              	// 	.ascii "tmp"
 1464              	// 	.p2align 2 	
 1465              	TEMP:
 1466 0a1a 41F8045D 		_PUSH
 1467 0a1e 03F11405 		ADD	R5,R3,#TMP_OFS
 1468 0a22 7047     		_NEXT
 1469              	
 1470              	//    SPAN	( -- a )
 1471              	// 	Hold character count received by EXPECT.
 1472              	
 1473 0a24 0AFEFF17 		.word	_BASE+MAPOFFSET
 1474 0a28 04       	_SPAN:	.byte   4
 1475 0a29 5350414E 		.ascii "SPAN"
 1476 0a2d 0000BF   		.p2align 2 	
 1477              	SPAN:
 1478 0a30 41F8045D 		_PUSH
 1479 0a34 03F11805 		ADD	R5,R3,#SPAN_OFS
 1480 0a38 7047     		_NEXT
 1481              	
 1482              	//    >IN	 ( -- a )
 1483              	// 	Hold the character pointer while parsing input stream.
 1484              	
 1485 0a3a 28FEFF17 		.word	_SPAN+MAPOFFSET
 1486 0a3e 03       	_INN:	.byte   3
 1487 0a3f 3E494E   		.ascii ">IN"
 1488 0a42 00BF     		.p2align 2 	
 1489              	INN:
 1490 0a44 41F8045D 		_PUSH
 1491 0a48 03F11C05 		ADD	R5,R3,#TOIN_OFS
 1492 0a4c 7047     		_NEXT
 1493              	
 1494              	//    #TIB	( -- a )
 1495              	// 	Hold the current count and address of the terminal input buffer.
 1496              	
 1497 0a4e 3EFEFF17 		.word	_INN+MAPOFFSET
 1498 0a52 04       	_NTIB:	.byte   4
 1499 0a53 23544942 		.ascii "#TIB"
 1500 0a57 00       		.p2align 2 	
 1501              	NTIB:
 1502 0a58 41F8045D 		_PUSH
 1503 0a5c 03F12005 		ADD	R5,R3,#NTIB_OFS
 1504 0a60 7047     		_NEXT
 1505              	
 1506              	//    'EVAL	( -- a )
 1507              	// 	Execution vector of EVAL.
ARM GAS  stm32eforth.s 			page 30


 1508              	
 1509 0a62 52FEFF17 		.word	_NTIB+MAPOFFSET
 1510 0a66 05       	_TEVAL:	.byte   5
 1511 0a67 27455641 		.ascii "'EVAL"
 1511      4C
 1512              		.p2align 2 	
 1513              	TEVAL:
 1514 0a6c 41F8045D 		_PUSH
 1515 0a70 03F12805 		ADD	R5,R3,#EVAL_OFS
 1516 0a74 7047     		_NEXT
 1517              	
 1518              	//    HLD	 ( -- a )
 1519              	// 	Hold a pointer in building a numeric output string.
 1520              	
 1521 0a76 66FEFF17 		.word	_TEVAL+MAPOFFSET
 1522 0a7a 03       	_HLD:	.byte   3
 1523 0a7b 484C44   		.ascii "HLD"
 1524 0a7e 00BF     		.p2align 2 	
 1525              	HLD:
 1526 0a80 41F8045D 		_PUSH
 1527 0a84 03F12C05 		ADD	R5,R3,#HLD_OFS
 1528 0a88 7047     		_NEXT
 1529              	
 1530              	//    CONTEXT	( -- a )
 1531              	// 	A area to specify vocabulary search order.
 1532              	
 1533 0a8a 7AFEFF17 		.word	_HLD+MAPOFFSET
 1534 0a8e 07       	_CNTXT:	.byte   7
 1535 0a8f 434F4E54 		.ascii "CONTEXT"
 1535      455854
 1536 0a96 00BF     		.p2align 2 	
 1537              	CNTXT:
 1538              	CRRNT:
 1539 0a98 41F8045D 		_PUSH
 1540 0a9c 03F13005 		ADD	R5,R3,#CTXT_OFS
 1541 0aa0 7047     		_NEXT
 1542              	
 1543              	//    CP	( -- a )
 1544              	// 	Point to top name in RAM vocabulary.
 1545              	
 1546 0aa2 8EFEFF17 		.word	_CNTXT+MAPOFFSET
 1547 0aa6 02       	_CP:	.byte   2
 1548 0aa7 4350     		.ascii "CP"
 1549 0aa9 0000BF   		.p2align 2 	
 1550              	CPP:
 1551 0aac 41F8045D 		_PUSH
 1552 0ab0 03F13805 		ADD	R5,R3,#RAM_CTOP_OFS
 1553 0ab4 7047     		_NEXT
 1554              	
 1555              	//   FCP ( -- a )
 1556              	//  Point ot top of Flash dictionary
 1557 0ab6 A6FEFF17 		.word _CP+MAPOFFSET
 1558 0aba 04       	_FCPP: .byte 4 
 1559 0abb 46435050 		.ascii "FCPP"
 1560 0abf 00       		.p2align 2 
 1561              	FCPP: 
 1562 0ac0 41F8045D 		_PUSH 
ARM GAS  stm32eforth.s 			page 31


 1563 0ac4 03F13405 		ADD R5,R3,#FLSH_CTOP_OFS 
 1564 0ac8 7047     		_NEXT 
 1565              	
 1566              	//    LAST	( -- a )
 1567              	// 	Point to the last name in the name dictionary.
 1568              	
 1569 0aca BAFEFF17 		.word	_FCPP+MAPOFFSET
 1570 0ace 04       	_LAST:	.byte   4
 1571 0acf 4C415354 		.ascii "LAST"
 1572 0ad3 00       		.p2align 2 	
 1573              	LAST:
 1574 0ad4 41F8045D 		_PUSH
 1575 0ad8 03F13C05 		ADD	R5,R3,#LASTN_OFS
 1576 0adc 7047     		_NEXT
 1577              	
 1578              	// **************************************************************************
 1579              	//  Common functions
 1580              	
 1581              	//    WITHIN	( u ul uh -- t )
 1582              	// 	Return true if u is within the range of ul and uh.
 1583              	
 1584 0ade CEFEFF17 		.word	_LAST+MAPOFFSET
 1585 0ae2 06       	_WITHI:	.byte   6
 1586 0ae3 57495448 		.ascii "WITHIN"
 1586      494E
 1587 0ae9 0000BF   		.p2align 2 	
 1588              	WITHI:
 1589 0aec 42F804ED 		_NEST
 1590 0af0 FFF7B8FD 		BL	OVER
 1591 0af4 FFF710FE 		BL	SUBB
 1592 0af8 FFF786FD 		BL	TOR
 1593 0afc FFF70CFE 		BL	SUBB
 1594 0b00 FFF770FD 		BL	RFROM
 1595 0b04 FFF7E4FE 		BL	ULESS
 1596 0b08 52F804FB 		_UNNEST
 1597              	
 1598              	//  Divide
 1599              	
 1600              	//    UM/MOD	( udl udh u -- ur uq )
 1601              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1602              	
 1603 0b0c E2FEFF17 		.word	_WITHI+MAPOFFSET
 1604 0b10 06       	_UMMOD:	.byte   6
 1605 0b11 554D2F4D 		.ascii "UM/MOD"
 1605      4F44
 1606 0b17 00       		.p2align 2 	
 1607              	UMMOD:
 1608 0b18 4FF00107 		MOV	R7,#1
 1609 0b1c 51F8044B 		LDR	R4,[R1],#4
 1610 0b20 0E68     		LDR	R6,[R1]
 1611              	UMMOD0:
 1612 0b22 B619     		ADDS	R6,R6,R6
 1613 0b24 6441     		ADCS	R4,R4,R4
 1614 0b26 04D3     		BCC	UMMOD1
 1615 0b28 A4EB0504 		SUB	R4,R4,R5
 1616 0b2c 06F10106 		ADD	R6,R6,#1
 1617 0b30 04E0     		B UMMOD2
ARM GAS  stm32eforth.s 			page 32


 1618              	UMMOD1:
 1619 0b32 641B     		SUBS	R4,R4,R5 
 1620 0b34 28BF     		IT CS 
 1621 0b36 0136     		ADDCS	R6,R6,#1
 1622 0b38 00D2     		BCS	UMMOD2
 1623 0b3a 2C44     		ADD	R4,R4,R5
 1624              	UMMOD2:
 1625 0b3c FF19     		ADDS	R7,R7,R7
 1626 0b3e F0D3     		BCC	UMMOD0
 1627 0b40 3546     		MOV	R5,R6
 1628 0b42 0C60     		STR	R4,[R1]
 1629 0b44 7047     		_NEXT
 1630              	
 1631              	//    M/MOD	( d n -- r q )
 1632              	// 	Signed floored divide of double by single. Return mod and quotient.
 1633              	
 1634 0b46 10FFFF17 		.word	_UMMOD+MAPOFFSET
 1635 0b4a 05       	_MSMOD:	.byte  5
 1636 0b4b 4D2F4D4F 		.ascii "M/MOD"
 1636      44
 1637              		.p2align 2 	
 1638              	MSMOD:	
 1639 0b50 42F804ED 		_NEST
 1640 0b54 FFF774FD 		BL	DUPP
 1641 0b58 FFF78CFD 		BL	ZLESS
 1642 0b5c FFF770FD 		BL	DUPP
 1643 0b60 FFF752FD 		BL	TOR
 1644 0b64 FFF702FD 		BL	QBRAN
 1645 0b68 7CFFFF17 		.word	MMOD1+MAPOFFSET
 1646 0b6c FFF794FE 		BL	NEGAT
 1647 0b70 FFF74AFD 		BL	TOR
 1648 0b74 FFF714FF 		BL	DNEGA
 1649 0b78 FFF734FD 		BL	RFROM
 1650              	MMOD1:
 1651 0b7c FFF744FD 	  BL	TOR
 1652 0b80 FFF75EFD 		BL	DUPP
 1653 0b84 FFF776FD 		BL	ZLESS
 1654 0b88 FFF7F0FC 		BL	QBRAN
 1655 0b8c 98FFFF17 		.word	MMOD2+MAPOFFSET
 1656 0b90 FFF732FD 		BL	RAT
 1657 0b94 FFF7B8FD 		BL	PLUS
 1658              	MMOD2:
 1659 0b98 FFF724FD 	  BL	RFROM
 1660 0b9c FFF7BCFF 		BL	UMMOD
 1661 0ba0 FFF720FD 		BL	RFROM
 1662 0ba4 FFF7E2FC 		BL	QBRAN
 1663 0ba8 B8FFFF17 		.word	MMOD3+MAPOFFSET
 1664 0bac FFF750FD 		BL	SWAP
 1665 0bb0 FFF772FE 		BL	NEGAT
 1666 0bb4 FFF74CFD 		BL	SWAP
 1667              	MMOD3:   
 1668 0bb8 52F804FB 		_UNNEST
 1669              	
 1670              	//    /MOD	( n n -- r q )
 1671              	// 	Signed divide. Return mod and quotient.
 1672              	
 1673 0bbc 4AFFFF17 		.word	_MSMOD+MAPOFFSET
ARM GAS  stm32eforth.s 			page 33


 1674 0bc0 04       	_SLMOD:	.byte   4
 1675 0bc1 2F4D4F44 		.ascii "/MOD"
 1676 0bc5 0000BF   		.p2align 2 	
 1677              	SLMOD:
 1678 0bc8 42F804ED 		_NEST
 1679 0bcc FFF74AFD 		BL	OVER
 1680 0bd0 FFF750FD 		BL	ZLESS
 1681 0bd4 FFF73CFD 		BL	SWAP
 1682 0bd8 FFF7BAFF 		BL	MSMOD
 1683 0bdc 52F804FB 		_UNNEST
 1684              	
 1685              	//    MOD	 ( n n -- r )
 1686              	// 	Signed divide. Return mod only.
 1687              	
 1688 0be0 C0FFFF17 		.word	_SLMOD+MAPOFFSET
 1689 0be4 03       	_MODD:	.byte  3
 1690 0be5 4D4F44   		.ascii "MOD"
 1691              		.p2align 2 	
 1692              	MODD:
 1693 0be8 42F804ED 		_NEST
 1694 0bec FFF7ECFF 		BL	SLMOD
 1695 0bf0 FFF71EFD 		BL	DROP
 1696 0bf4 52F804FB 		_UNNEST
 1697              	
 1698              	//    /	   ( n n -- q )
 1699              	// 	Signed divide. Return quotient only.
 1700              	
 1701 0bf8 E4FFFF17 		.word	_MODD+MAPOFFSET
 1702 0bfc 01       	_SLASH:	.byte  1
 1703 0bfd 2F       		.ascii "/"
 1704 0bfe 00BF     		.p2align 2 	
 1705              	SLASH:
 1706 0c00 42F804ED 		_NEST
 1707 0c04 FFF7E0FF 		BL	SLMOD
 1708 0c08 FFF722FD 		BL	SWAP
 1709 0c0c FFF710FD 		BL	DROP
 1710 0c10 52F804FB 		_UNNEST
 1711              	
 1712              	//    */MOD	( n1 n2 n3 -- r q )
 1713              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1714              	
 1715 0c14 FCFFFF17 		.word	_SLASH+MAPOFFSET
 1716 0c18 05       	_SSMOD:	.byte  5
 1717 0c19 2A2F4D4F 		.ascii "*/MOD"
 1717      44
 1718 0c1e 00BF     		.p2align 2 	
 1719              	SSMOD:
 1720 0c20 42F804ED 		_NEST
 1721 0c24 FFF7F0FC 		BL	TOR
 1722 0c28 FFF792FD 		BL	MSTAR
 1723 0c2c FFF7DAFC 		BL	RFROM
 1724 0c30 FFF78EFF 		BL	MSMOD
 1725 0c34 52F804FB 		_UNNEST
 1726              	
 1727              	//    */	  ( n1 n2 n3 -- q )
 1728              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1729              	
ARM GAS  stm32eforth.s 			page 34


 1730 0c38 18000018 		.word	_SSMOD+MAPOFFSET
 1731 0c3c 02       	_STASL:	.byte  2
 1732 0c3d 2A2F     		.ascii "*/"
 1733 0c3f 00       		.p2align 2 	
 1734              	STASL:
 1735 0c40 42F804ED 		_NEST
 1736 0c44 FFF7ECFF 		BL	SSMOD
 1737 0c48 FFF702FD 		BL	SWAP
 1738 0c4c FFF7F0FC 		BL	DROP
 1739 0c50 52F804FB 		_UNNEST
 1740              	
 1741              	// **************************************************************************
 1742              	//  Miscellaneous
 1743              	
 1744              	//    ALIGNED	( b -- a )
 1745              	// 	Align address to the cell boundary.
 1746              	
 1747 0c54 3C000018 		.word	_STASL+MAPOFFSET
 1748 0c58 07       	_ALGND:	.byte   7
 1749 0c59 414C4947 		.ascii "ALIGNED"
 1749      4E4544
 1750              		.p2align 2 	
 1751              	ALGND:
 1752 0c60 05F10305 		ADD	R5,R5,#3
 1753 0c64 6FF00304 		MVN	R4,#3
 1754 0c68 05EA0405 		AND	R5,R5,R4
 1755 0c6c 7047     		_NEXT
 1756              	
 1757              	//    >CHAR	( c -- c )
 1758              	// 	Filter non-printing characters.
 1759              	
 1760 0c6e 58000018 		.word	_ALGND+MAPOFFSET
 1761 0c72 05       	_TCHAR:	.byte  5
 1762 0c73 3E434841 		.ascii ">CHAR"
 1762      52
 1763              		.p2align 2 	
 1764              	TCHAR:
 1765 0c78 42F804ED 		_NEST
 1766 0c7c FFF753FC 		_DOLIT
 1767 0c80 7F000000 		.word	0x7F
 1768 0c84 FFF700FD 		BL	ANDD
 1769 0c88 FFF7DAFC 		BL	DUPP	// mask msb
 1770 0c8c FFF79AFD 		BL	BLANK
 1771 0c90 FFF749FC 		_DOLIT
 1772 0c94 7F000000 		.word	127
 1773 0c98 FFF728FF 		BL	WITHI	// check for printable
 1774 0c9c FFF7F2FD 		BL	INVER
 1775 0ca0 FFF764FC 		BL	QBRAN
 1776 0ca4 B4000018 		.word	TCHA1+MAPOFFSET
 1777 0ca8 FFF7C2FC 		BL	DROP
 1778 0cac FFF73BFC 		_DOLIT
 1779 0cb0 5F000000 		.word	'_'	// replace non-printables
 1780              	TCHA1:
 1781 0cb4 52F804FB 		  _UNNEST
 1782              	
 1783              	//    DEPTH	( -- n )
 1784              	// 	Return the depth of the data stack.
ARM GAS  stm32eforth.s 			page 35


 1785              	
 1786 0cb8 72000018 		.word	_TCHAR+MAPOFFSET
 1787 0cbc 05       	_DEPTH:	.byte  5
 1788 0cbd 44455054 		.ascii "DEPTH"
 1788      48
 1789 0cc2 00BF     		.p2align 2 	
 1790              	DEPTH:
 1791 0cc4 41F8045D 		_PUSH
 1792 0cc8 44F68465 		MOVW	R5,#SPP&0xffff+4 
 1793 0ccc C2F20005 	 	MOVT	R5,#SPP>>16 
 1794 0cd0 A5EB0105 		SUB	R5,R5,R1
 1795 0cd4 4FEAA505 		ASR	R5,R5,#2
 1796 0cd8 A5F10105 		SUB	R5,R5,#1
 1797 0cdc 7047     		_NEXT
 1798              	
 1799              	//    PICK	( ... +n -- ... w )
 1800              	// 	Copy the nth stack item to tos.
 1801              	
 1802 0cde BC000018 		.word	_DEPTH+MAPOFFSET
 1803 0ce2 04       	_PICK:	.byte  4
 1804 0ce3 5049434B 		.ascii "PICK"
 1805 0ce7 00       		.p2align 2 	
 1806              	PICK:
 1807 0ce8 42F804ED 		_NEST
 1808 0cec FFF73AFD 		BL	ONEP
 1809 0cf0 FFF772FD 		BL	CELLS
 1810 0cf4 FFF792FC 		BL	SPAT
 1811 0cf8 FFF706FD 		BL	PLUS
 1812 0cfc FFF75CFC 		BL	AT
 1813 0d00 52F804FB 		_UNNEST
 1814              	
 1815              	// **************************************************************************
 1816              	//  Memory access
 1817              	
 1818              	//    HERE	( -- a )
 1819              	// 	Return the top of the code dictionary.
 1820              	
 1821 0d04 E2000018 		.word	_PICK+MAPOFFSET
 1822 0d08 04       	_HERE:	.byte  4
 1823 0d09 48455245 		.ascii "HERE"
 1824 0d0d 0000BF   		.p2align 2 	
 1825              	HERE:
 1826 0d10 42F804ED 		_NEST
 1827 0d14 FFF7CAFE 		BL	CPP
 1828 0d18 FFF74EFC 		BL	AT
 1829 0d1c 52F804FB 		_UNNEST
 1830              		
 1831              	//    PAD	 ( -- a )
 1832              	// 	Return the address of a temporary buffer.
 1833              	
 1834 0d20 08010018 		.word	_HERE+MAPOFFSET
 1835 0d24 03       	_PAD:	.byte  3
 1836 0d25 504144   		.ascii "PAD"
 1837              		.p2align 2 	
 1838              	PAD:
 1839 0d28 42F804ED 		_NEST
 1840 0d2c FFF7F0FF 		BL	HERE
ARM GAS  stm32eforth.s 			page 36


 1841 0d30 05F15005 		ADD	R5,R5,#80
 1842 0d34 52F804FB 		_UNNEST
 1843              	
 1844              	//    TIB	 ( -- a )
 1845              	// 	Return the address of the terminal input buffer.
 1846              	
 1847 0d38 24010018 		.word	_PAD+MAPOFFSET
 1848 0d3c 03       	_TIB:	.byte  3
 1849 0d3d 544942   		.ascii "TIB"
 1850              		.p2align 2 	
 1851              	TIB:
 1852 0d40 41F8045D 		_PUSH
 1853 0d44 5D6A     		ldr r5,[r3,#TIB_OFS]
 1854 0d46 7047     		_NEXT
 1855              	
 1856              	//    @EXECUTE	( a -- )
 1857              	// 	Execute vector stored in address a.
 1858              	
 1859 0d48 3C010018 		.word	_TIB+MAPOFFSET
 1860 0d4c 08       	_ATEXE:	.byte   8
 1861 0d4d 40455845 		.ascii "@EXECUTE"
 1861      43555445 
 1862 0d55 0000BF   		.p2align 2 	
 1863              	ATEXE:
 1864 0d58 2C00     		MOVS	R4,R5
 1865 0d5a 51F8045B 		_POP
 1866 0d5e 2468     		LDR	R4,[R4]
 1867 0d60 44F00104 		ORR	R4,R4,#1
 1868 0d64 18BF     	    IT NE 
 1869 0d66 2047     		BXNE	R4
 1870 0d68 7047     		_NEXT
 1871              	
 1872              	//    CMOVE	( b1 b2 u -- )
 1873              	// 	Copy u bytes from b1 to b2.
 1874              	
 1875 0d6a 4C010018 		.word	_ATEXE+MAPOFFSET
 1876 0d6e 05       	_CMOVE:	.byte   5
 1877 0d6f 434D4F56 		.ascii "CMOVE"
 1877      45
 1878              		.p2align 2 	
 1879              	CMOVE:
 1880 0d74 51F8046B 		LDR	R6,[R1],#4
 1881 0d78 51F8047B 		LDR	R7,[R1],#4
 1882 0d7c 03E0     		B CMOV1
 1883              	CMOV0:
 1884 0d7e 17F8014B 		LDRB	R4,[R7],#1
 1885 0d82 06F8014B 		STRB	R4,[R6],#1
 1886              	CMOV1:
 1887 0d86 2D00     		MOVS	R5,R5
 1888 0d88 02D0     		BEQ	CMOV2
 1889 0d8a A5F10105 		SUB	R5,R5,#1
 1890 0d8e F6E7     		B CMOV0
 1891              	CMOV2:
 1892 0d90 51F8045B 		_POP
 1893 0d94 7047     		_NEXT
 1894              	
 1895              	//    MOVE	( a1 a2 u -- )
ARM GAS  stm32eforth.s 			page 37


 1896              	// 	Copy u words from a1 to a2.
 1897              	
 1898 0d96 6E010018 		.word	_CMOVE+MAPOFFSET
 1899 0d9a 04       	_MOVE:	.byte   4
 1900 0d9b 4D4F5645 		.ascii "MOVE"
 1901 0d9f 00       		.p2align 2 	
 1902              	MOVE:
 1903 0da0 25F00305 		AND	R5,R5,#-4
 1904 0da4 51F8046B 		LDR	R6,[R1],#4
 1905 0da8 51F8047B 		LDR	R7,[R1],#4
 1906 0dac 03E0     		B MOVE1
 1907              	MOVE0:
 1908 0dae 57F8044B 		LDR	R4,[R7],#4
 1909 0db2 46F8044B 		STR	R4,[R6],#4
 1910              	MOVE1:
 1911 0db6 2D00     		MOVS	R5,R5
 1912 0db8 02D0     		BEQ	MOVE2
 1913 0dba A5F10405 		SUB	R5,R5,#4
 1914 0dbe F6E7     		B MOVE0
 1915              	MOVE2:
 1916 0dc0 51F8045B 		_POP
 1917 0dc4 7047     		_NEXT
 1918              	
 1919              	//    FILL	( b u c -- )
 1920              	// 	Fill u bytes of character c to area beginning at b.
 1921              	
 1922 0dc6 9A010018 		.word	_MOVE+MAPOFFSET
 1923 0dca 04       	_FILL:	.byte   4
 1924 0dcb 46494C4C 		.ascii "FILL"
 1925 0dcf 00       		.p2align 2 	
 1926              	FILL:
 1927 0dd0 51F8046B 		LDR	R6,[R1],#4
 1928 0dd4 51F8047B 		LDR	R7,[R1],#4
 1929              	FILL0:
 1930 0dd8 00E0     		B FILL1
 1931 0dda 2D46     		MOV	R5,R5
 1932              	FILL1:
 1933 0ddc 07F8015B 		STRB	R5,[R7],#1
 1934 0de0 3600     		MOVS	R6,R6
 1935 0de2 02D0     		BEQ	FILL2
 1936 0de4 A6F10106 		SUB	R6,R6,#1
 1937 0de8 F6E7     		B FILL0
 1938              	FILL2:
 1939 0dea 51F8045B 		_POP
 1940 0dee 7047     		_NEXT
 1941              	
 1942              	//    PACK$	( b u a -- a )
 1943              	// 	Build a counted word with u characters from b. Null fill.
 1944              	
 1945 0df0 CA010018 		.word	_FILL+MAPOFFSET
 1946 0df4 05       	_PACKS:	.byte  5
 1947 0df5 5041434B 		.ascii "PACK$$"
 1947      2424
 1948 0dfb 00       		.p2align 2 	
 1949              	PACKS:
 1950 0dfc 42F804ED 		_NEST
 1951 0e00 FFF72EFF 		BL	ALGND
ARM GAS  stm32eforth.s 			page 38


 1952 0e04 FFF71CFC 		BL	DUPP
 1953 0e08 FFF7FEFB 		BL	TOR			// strings only on cell boundary
 1954 0e0c FFF72AFC 		BL	OVER
 1955 0e10 FFF77AFC 		BL	PLUS
 1956 0e14 FFF7A6FC 		BL	ONEP
 1957 0e18 FFF785FB 		_DOLIT
 1958 0e1c FCFFFFFF 		.word	0xFFFFFFFC
 1959 0e20 FFF732FC 		BL	ANDD			// count mod cell
 1960 0e24 FFF77FFB 		_DOLIT
 1961 0e28 00000000 		.word	0
 1962 0e2c FFF710FC 		BL	SWAP
 1963 0e30 FFF7B8FB 		BL	STORE			// null fill cell
 1964 0e34 FFF7E0FB 		BL	RAT
 1965 0e38 FFF70CFD 		BL	DDUP
 1966 0e3c FFF7C2FB 		BL	CSTOR
 1967 0e40 FFF790FC 		BL	ONEP			// save count
 1968 0e44 FFF704FC 		BL	SWAP
 1969 0e48 FFF794FF 		BL	CMOVE
 1970 0e4c FFF7CAFB 		BL	RFROM
 1971 0e50 52F804FB 		_UNNEST   			// move string
 1972              	
 1973              	// **************************************************************************
 1974              	//  Numeric output, single precision
 1975              	
 1976              	//    DIGIT	( u -- c )
 1977              	// 	Convert digit u to a character.
 1978              	
 1979 0e54 F4010018 		.word	_PACKS+MAPOFFSET
 1980 0e58 05       	_DIGIT:	.byte  5
 1981 0e59 44494749 		.ascii "DIGIT"
 1981      54
 1982 0e5e 00BF     		.p2align 2 	
 1983              	DIGIT:
 1984 0e60 42F804ED 		_NEST
 1985 0e64 FFF75FFB 		_DOLIT
 1986 0e68 09000000 		.word	9
 1987 0e6c FFF7FAFB 		BL	OVER
 1988 0e70 FFF73AFD 		BL	LESS
 1989 0e74 05F00705 		AND	R5,R5,#7
 1990 0e78 FFF746FC 		BL	PLUS
 1991 0e7c 05F13005 		ADD	R5,R5,#'0'
 1992 0e80 52F804FB 		_UNNEST
 1993              	
 1994              	//    EXTRACT	( n base -- n c )
 1995              	// 	Extract the least significant digit from n.
 1996              	
 1997 0e84 58020018 		.word	_DIGIT+MAPOFFSET
 1998 0e88 07       	_EXTRC:	.byte  7
 1999 0e89 45585452 		.ascii "EXTRACT"
 1999      414354
 2000              		.p2align 2 	
 2001              	EXTRC:
 2002 0e90 42F804ED 		_NEST
 2003 0e94 FFF747FB 		_DOLIT
 2004 0e98 00000000 		.word	0
 2005 0e9c FFF7D8FB 		BL	SWAP
 2006 0ea0 FFF73AFE 		BL	UMMOD
ARM GAS  stm32eforth.s 			page 39


 2007 0ea4 FFF7D4FB 		BL	SWAP
 2008 0ea8 FFF7DAFF 		BL	DIGIT
 2009 0eac 52F804FB 		_UNNEST
 2010              	
 2011              	//    <#	  ( -- )
 2012              	// 	Initiate the numeric output process.
 2013              	
 2014 0eb0 88020018 		.word	_EXTRC+MAPOFFSET
 2015 0eb4 02       	_BDIGS:	.byte  2
 2016 0eb5 3C23     		.ascii "<#"
 2017 0eb7 00       		.p2align 2 	
 2018              	BDIGS:
 2019 0eb8 42F804ED 		_NEST
 2020 0ebc FFF734FF 		BL	PAD
 2021 0ec0 FFF7DEFD 		BL	HLD
 2022 0ec4 FFF76EFB 		BL	STORE
 2023 0ec8 52F804FB 		_UNNEST
 2024              	
 2025              	//    HOLD	( c -- )
 2026              	// 	Insert a character into the numeric output string.
 2027              	
 2028 0ecc B4020018 		.word	_BDIGS+MAPOFFSET
 2029 0ed0 04       	_HOLD:	.byte  4
 2030 0ed1 484F4C44 		.ascii "HOLD"
 2031 0ed5 0000BF   		.p2align 2 	
 2032              	HOLD:
 2033 0ed8 42F804ED 		_NEST
 2034 0edc FFF7D0FD 		BL	HLD
 2035 0ee0 FFF76AFB 		BL	AT
 2036 0ee4 FFF746FC 		BL	ONEM
 2037 0ee8 FFF7AAFB 		BL	DUPP
 2038 0eec FFF7C8FD 		BL	HLD
 2039 0ef0 FFF758FB 		BL	STORE
 2040 0ef4 FFF766FB 		BL	CSTOR
 2041 0ef8 52F804FB 		_UNNEST
 2042              	
 2043              	//    #	   ( u -- u )
 2044              	// 	Extract one digit from u and append the digit to output string.
 2045              	
 2046 0efc D0020018 		.word	_HOLD+MAPOFFSET
 2047 0f00 01       	_DIG:	.byte  1
 2048 0f01 23       		.ascii "#"
 2049 0f02 00BF     		.p2align 2 	
 2050              	DIG:
 2051 0f04 42F804ED 		_NEST
 2052 0f08 FFF782FD 		BL	BASE
 2053 0f0c FFF754FB 		BL	AT
 2054 0f10 FFF7BEFF 		BL	EXTRC
 2055 0f14 FFF7E0FF 		BL	HOLD
 2056 0f18 52F804FB 		_UNNEST
 2057              	
 2058              	//    #S	  ( u -- 0 )
 2059              	// 	Convert u until all digits are added to the output string.
 2060              	
 2061 0f1c 00030018 		.word	_DIG+MAPOFFSET
 2062 0f20 02       	_DIGS:	.byte  2
 2063 0f21 2353     		.ascii "#S"
ARM GAS  stm32eforth.s 			page 40


 2064 0f23 00       		.p2align 2 	
 2065              	DIGS:
 2066 0f24 42F804ED 		_NEST
 2067              	DIGS1:
 2068 0f28 FFF7ECFF 	    BL	DIG
 2069 0f2c FFF788FB 		BL	DUPP
 2070 0f30 FFF71CFB 		BL	QBRAN
 2071 0f34 3A030018 		.word	DIGS2+MAPOFFSET
 2072 0f38 F6E7     		B	DIGS1
 2073              	DIGS2:
 2074 0f3a 52F804FB 		  _UNNEST
 2075              	
 2076              	//    SIGN	( n -- )
 2077              	// 	Add a minus sign to the numeric output string.
 2078              	
 2079 0f3e 20030018 		.word	_DIGS+MAPOFFSET
 2080 0f42 04       	_SIGN:	.byte  4
 2081 0f43 5349474E 		.ascii "SIGN"
 2082 0f47 00       		.p2align 2 	
 2083              	SIGN:
 2084 0f48 42F804ED 		_NEST
 2085 0f4c FFF792FB 		BL	ZLESS
 2086 0f50 FFF70CFB 		BL	QBRAN
 2087 0f54 64030018 		.word	SIGN1+MAPOFFSET
 2088 0f58 FFF7E5FA 		_DOLIT
 2089 0f5c 2D000000 		.word	'-'
 2090 0f60 FFF7BAFF 		BL	HOLD
 2091              	SIGN1:
 2092 0f64 52F804FB 		  _UNNEST
 2093              	
 2094              	//    #>	  ( w -- b u )
 2095              	// 	Prepare the outputDCB to be TYPE'd.
 2096              	
 2097 0f68 42030018 		.word	_SIGN+MAPOFFSET
 2098 0f6c 02       	_EDIGS:	.byte  2
 2099 0f6d 233E     		.ascii "#>"
 2100 0f6f 00       		.p2align 2 	
 2101              	EDIGS:
 2102 0f70 42F804ED 		_NEST
 2103 0f74 FFF75CFB 		BL	DROP
 2104 0f78 FFF782FD 		BL	HLD
 2105 0f7c FFF71CFB 		BL	AT
 2106 0f80 FFF7D2FE 		BL	PAD
 2107 0f84 FFF76EFB 		BL	OVER
 2108 0f88 FFF7C6FB 		BL	SUBB
 2109 0f8c 52F804FB 		_UNNEST
 2110              	
 2111              	//    str	 ( n -- b u )
 2112              	// 	Convert a signed integer to a numeric string.
 2113              	
 2114              	// 	.word	_EDIGS+MAPOFFSET
 2115              	// _STRR	.byte  3
 2116              	// 	.ascii "str"
 2117              	// 	.p2align 2 	
 2118              	STRR:
 2119 0f90 42F804ED 		_NEST
 2120 0f94 FFF754FB 		BL	DUPP
ARM GAS  stm32eforth.s 			page 41


 2121 0f98 FFF736FB 		BL	TOR
 2122 0f9c FFF784FC 		BL	ABSS
 2123 0fa0 FFF78AFF 		BL	BDIGS
 2124 0fa4 FFF7BEFF 		BL	DIGS
 2125 0fa8 FFF71CFB 		BL	RFROM
 2126 0fac FFF7CCFF 		BL	SIGN
 2127 0fb0 FFF7DEFF 		BL	EDIGS
 2128 0fb4 52F804FB 		_UNNEST
 2129              	
 2130              	//    HEX	 ( -- )
 2131              	// 	Use radix 16 as base for numeric conversions.
 2132              	
 2133 0fb8 6C030018 		.word	_EDIGS+MAPOFFSET
 2134 0fbc 03       	_HEX:	.byte  3
 2135 0fbd 484558   		.ascii "HEX"
 2136              		.p2align 2 	
 2137              	HEX:
 2138 0fc0 42F804ED 		_NEST
 2139 0fc4 FFF7AFFA 		_DOLIT
 2140 0fc8 10000000 		.word	16
 2141 0fcc FFF720FD 		BL	BASE
 2142 0fd0 FFF7E8FA 		BL	STORE
 2143 0fd4 52F804FB 		_UNNEST
 2144              	
 2145              	//    DECIMAL	( -- )
 2146              	// 	Use radix 10 as base for numeric conversions.
 2147              	
 2148 0fd8 BC030018 		.word	_HEX+MAPOFFSET
 2149 0fdc 07       	_DECIM:	.byte  7
 2150 0fdd 44454349 		.ascii "DECIMAL"
 2150      4D414C
 2151              		.p2align 2 	
 2152              	DECIM:
 2153 0fe4 42F804ED 		_NEST
 2154 0fe8 FFF79DFA 		_DOLIT
 2155 0fec 0A000000 		.word	10
 2156 0ff0 FFF70EFD 		BL	BASE
 2157 0ff4 FFF7D6FA 		BL	STORE
 2158 0ff8 52F804FB 		_UNNEST
 2159              	
 2160              	// **************************************************************************
 2161              	//  Numeric input, single precision
 2162              	
 2163              	//    DIGIT?	( c base -- u t )
 2164              	// 	Convert a character to its numeric value. A flag indicates success.
 2165              	
 2166 0ffc DC030018 		.word	_DECIM+MAPOFFSET
 2167 1000 06       	_DIGTQ:	.byte  6
 2168 1001 44494749 		.ascii "DIGIT?"
 2168      543F
 2169 1007 00       		.p2align 2 	
 2170              	DIGTQ:
 2171 1008 42F804ED 		_NEST
 2172 100c FFF7FCFA 		BL	TOR
 2173 1010 FFF789FA 		_DOLIT
 2174 1014 30000000 		.word	'0'
 2175 1018 FFF77EFB 		BL	SUBB
ARM GAS  stm32eforth.s 			page 42


 2176 101c FFF783FA 		_DOLIT
 2177 1020 09000000 		.word	9
 2178 1024 FFF71EFB 		BL	OVER
 2179 1028 FFF75EFC 		BL	LESS
 2180 102c FFF79EFA 		BL	QBRAN
 2181 1030 54040018 		.word	DGTQ1+MAPOFFSET
 2182 1034 FFF777FA 		_DOLIT
 2183 1038 07000000 		.word	7
 2184 103c FFF76CFB 		BL	SUBB
 2185 1040 FFF7FEFA 		BL	DUPP
 2186 1044 FFF76FFA 		_DOLIT
 2187 1048 0A000000 		.word	10
 2188 104c FFF74CFC 		BL	LESS
 2189 1050 FFF724FB 		BL	ORR
 2190              	DGTQ1:
 2191 1054 FFF7F4FA 	  BL	DUPP
 2192 1058 FFF7C4FA 		BL	RFROM
 2193 105c FFF738FC 		BL	ULESS
 2194 1060 52F804FB 		_UNNEST
 2195              	
 2196              	//    NUMBER?	( a -- n T | a F )
 2197              	// 	Convert a number word to integer. Push a flag on tos.
 2198              	
 2199 1064 00040018 		.word	_DIGTQ+MAPOFFSET
 2200 1068 07       	_NUMBQ:	.byte  7
 2201 1069 4E554D42 		.ascii "NUMBER?"
 2201      45523F
 2202              		.p2align 2 	
 2203              	NUMBQ:
 2204 1070 42F804ED 		_NEST
 2205 1074 FFF7CCFC 		BL	BASE
 2206 1078 FFF79EFA 		BL	AT
 2207 107c FFF7C4FA 		BL	TOR
 2208 1080 FFF751FA 		_DOLIT
 2209 1084 00000000 		.word	0
 2210 1088 FFF7ECFA 		BL	OVER
 2211 108c FFF77CFC 		BL	COUNT
 2212 1090 FFF7E8FA 		BL	OVER
 2213 1094 FFF7A0FA 		BL	CAT
 2214 1098 FFF745FA 		_DOLIT
 2215 109c 24000000 		.word	'$'
 2216 10a0 FFF70AFC 		BL	EQUAL
 2217 10a4 FFF762FA 		BL	QBRAN
 2218 10a8 C0040018 		.word	NUMQ1+MAPOFFSET
 2219 10ac FFF788FF 		BL	HEX
 2220 10b0 FFF7CEFA 		BL	SWAP
 2221 10b4 FFF756FB 		BL	ONEP
 2222 10b8 FFF7CAFA 		BL	SWAP
 2223 10bc FFF75AFB 		BL	ONEM
 2224              	NUMQ1:
 2225 10c0 FFF7D0FA 		BL	OVER
 2226 10c4 FFF788FA 		BL	CAT
 2227 10c8 FFF72DFA 		_DOLIT
 2228 10cc 2D000000 		.word	'-'
 2229 10d0 FFF7F2FB 		BL	EQUAL
 2230 10d4 FFF798FA 		BL	TOR
 2231 10d8 FFF7BAFA 		BL	SWAP
ARM GAS  stm32eforth.s 			page 43


 2232 10dc FFF78CFA 		BL	RAT
 2233 10e0 FFF71AFB 		BL	SUBB
 2234 10e4 FFF7B4FA 		BL	SWAP
 2235 10e8 FFF786FA 		BL	RAT
 2236 10ec FFF70CFB 		BL	PLUS
 2237 10f0 FFF792FB 		BL	QDUP
 2238 10f4 FFF73AFA 		BL	QBRAN
 2239 10f8 84050018 		.word	NUMQ6+MAPOFFSET
 2240 10fc FFF73AFB 		BL	ONEM
 2241 1100 FFF782FA 		BL	TOR
 2242              	NUMQ2:
 2243 1104 FFF79CFA 		BL	DUPP
 2244 1108 FFF77EFA 		BL	TOR
 2245 110c FFF764FA 		BL	CAT
 2246 1110 FFF77EFC 		BL	BASE
 2247 1114 FFF750FA 		BL	AT
 2248 1118 FFF776FF 		BL	DIGTQ
 2249 111c FFF726FA 		BL	QBRAN
 2250 1120 68050018 		.word	NUMQ4+MAPOFFSET
 2251 1124 FFF794FA 		BL	SWAP
 2252 1128 FFF772FC 		BL	BASE
 2253 112c FFF744FA 		BL	AT
 2254 1130 FFF7FAFA 		BL	STAR
 2255 1134 FFF7E8FA 		BL	PLUS
 2256 1138 FFF754FA 		BL	RFROM
 2257 113c FFF712FB 		BL	ONEP
 2258 1140 FFF705FA 		BL	DONXT
 2259 1144 04050018 		.word	NUMQ2+MAPOFFSET
 2260 1148 FFF756FA 		BL	RAT
 2261 114c FFF780FA 		BL	SWAP
 2262 1150 FFF76EFA 		BL	DROP
 2263 1154 FFF70AFA 		BL	QBRAN
 2264 1158 60050018 		.word	NUMQ3+MAPOFFSET
 2265 115c FFF79CFB 		BL	NEGAT
 2266              	NUMQ3:
 2267 1160 FFF776FA 		BL	SWAP
 2268 1164 00F00CB8 		B.W	NUMQ5
 2269              	NUMQ4:
 2270 1168 FFF73CFA 		BL	RFROM
 2271 116c FFF73AFA 		BL	RFROM
 2272 1170 FFF766FB 		BL	DDROP
 2273 1174 FFF764FB 		BL	DDROP
 2274 1178 FFF7D5F9 		_DOLIT
 2275 117c 00000000 		.word	0
 2276              	NUMQ5:
 2277 1180 FFF75EFA 		BL	DUPP
 2278              	NUMQ6:
 2279 1184 FFF72EFA 		BL	RFROM
 2280 1188 FFF75AFB 		BL	DDROP
 2281 118c FFF72AFA 		BL	RFROM
 2282 1190 FFF73EFC 		BL	BASE
 2283 1194 FFF706FA 		BL	STORE
 2284 1198 52F804FB 		_UNNEST
 2285              	
 2286              	// **************************************************************************
 2287              	//  Basic I/O
 2288              	
ARM GAS  stm32eforth.s 			page 44


 2289              	//    KEY	 ( -- c )
 2290              	// 	Wait for and return an input character.
 2291              	
 2292 119c 68040018 		.word	_NUMBQ+MAPOFFSET
 2293 11a0 03       	_KEY:	.byte  3
 2294 11a1 4B4559   		.ascii "KEY"
 2295              		.p2align 2 	
 2296              	KEY:
 2297 11a4 42F804ED 		_NEST
 2298              	KEY1:
 2299 11a8 FFF792F9 		BL	QRX
 2300 11ac FFF7DEF9 		BL	QBRAN
 2301 11b0 A8050018 		.word	KEY1+MAPOFFSET
 2302              	// CTRL-C reboot
 2303 11b4 FFF744FA 		BL DUPP 
 2304 11b8 FFF7B5F9 		BL DOLIT 
 2305 11bc 03000000 		.word 3 
 2306 11c0 FFF77AFB 		BL EQUAL 
 2307 11c4 FFF75EFB 		BL INVER
 2308 11c8 FFF7D0F9 		BL QBRAN
 2309 11cc 54F8FF17 		.word REBOOT+MAPOFFSET 
 2310 11d0 52F804FB 		_UNNEST
 2311              	
 2312              	//    SPACE	( -- )
 2313              	// 	Send the blank character to the output device.
 2314              	
 2315 11d4 A0050018 		.word	_KEY+MAPOFFSET
 2316 11d8 05       	_SPACE:	.byte  5
 2317 11d9 53504143 		.ascii "SPACE"
 2317      45
 2318 11de 00BF     		.p2align 2 	
 2319              	SPACE:
 2320 11e0 42F804ED 		_NEST
 2321 11e4 FFF7EEFA 		BL	BLANK
 2322 11e8 FFF78CF9 		BL	EMIT
 2323 11ec 52F804FB 		_UNNEST
 2324              	
 2325              	//    SPACES	( +n -- )
 2326              	// 	Send n spaces to the output device.
 2327              	
 2328 11f0 D8050018 		.word	_SPACE+MAPOFFSET
 2329 11f4 06       	_SPACS:	.byte  6
 2330 11f5 53504143 		.ascii "SPACES"
 2330      4553
 2331 11fb 00       		.p2align 2 	
 2332              	SPACS:
 2333 11fc 42F804ED 		_NEST
 2334 1200 FFF791F9 		_DOLIT
 2335 1204 00000000 		.word	0
 2336 1208 FFF786FB 		BL	MAX
 2337 120c FFF7FCF9 		BL	TOR
 2338 1210 00F002B8 		B.W	CHAR2
 2339              	CHAR1:
 2340 1214 FFF7E4FF 		BL	SPACE
 2341              	CHAR2:
 2342 1218 FFF799F9 		BL	DONXT
 2343 121c 14060018 		.word	CHAR1+MAPOFFSET
ARM GAS  stm32eforth.s 			page 45


 2344 1220 52F804FB 		_UNNEST
 2345              	
 2346              	//    TYPE	( b u -- )
 2347              	// 	Output u characters from b.
 2348              	
 2349 1224 F4050018 		.word	_SPACS+MAPOFFSET
 2350 1228 04       	_TYPEE:	.byte	4
 2351 1229 54595045 		.ascii "TYPE"
 2352 122d 0000BF   		.p2align 2 	
 2353              	TYPEE:
 2354 1230 42F804ED 		_NEST
 2355 1234 FFF7E8F9 		BL  TOR   // ( a+1 -- R: u )
 2356 1238 05E0     		B	TYPE2
 2357              	TYPE1:  
 2358 123a FFF7A5FB 		BL  COUNT
 2359 123e FFF71BFD 		BL	TCHAR
 2360 1242 FFF75FF9 		BL	EMIT
 2361              	TYPE2:  
 2362 1246 FFF782F9 		BL  DONXT  
 2363 124a 3A060018 		.word	TYPE1+MAPOFFSET
 2364 124e FFF7EFF9 		BL	DROP
 2365 1252 52F804FB 		_UNNEST
 2366              	
 2367              	//    CR	  ( -- )
 2368              	// 	Output a carriage return and a line feed.
 2369              	
 2370 1256 28060018 		.word	_TYPEE+MAPOFFSET
 2371 125a 02       	_CR:	.byte  2
 2372 125b 4352     		.ascii "CR"
 2373 125d 0000BF   		.p2align 2 	
 2374              	CR:
 2375 1260 42F804ED 		_NEST
 2376 1264 FFF75FF9 		_DOLIT
 2377 1268 0D000000 		.word	CRR
 2378 126c FFF74AF9 		BL	EMIT
 2379 1270 FFF759F9 		_DOLIT
 2380 1274 0A000000 		.word	LF
 2381 1278 FFF744F9 		BL	EMIT
 2382 127c 52F804FB 		_UNNEST
 2383              	
 2384              	//    do_$	( -- a )
 2385              	// 	Return the address of a compiled string.
 2386              	//  adjust return address to skip over it.
 2387              	
 2388              	// 	.word	_CR+MAPOFFSET
 2389              	// _DOSTR	.byte  COMPO+3
 2390              	// 	.ascii "do$$"
 2391              	// 	.p2align 2 	
 2392              	DOSTR:
 2393 1280 42F804ED 		_NEST     
 2394              	/* compiled string address is 2 levels deep */
 2395 1284 FFF7AEF9 		BL	RFROM	// { -- a1 }
 2396 1288 FFF7ACF9 		BL	RFROM	//  {a1 -- a1 a2 } b0 set
 2397 128c FFF772FA 		BL	ONEM	//  clear b0
 2398 1290 FFF7D6F9 		BL	DUPP	// {a1 a2 -- a1 a2 a2 }
 2399 1294 FFF778FB 		BL	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2400 1298 FFF736FA 		BL	PLUS	// { -- a1 a2 a2+1+c }
ARM GAS  stm32eforth.s 			page 46


 2401 129c FFF7E0FC 		BL	ALGND	//  end of string
 2402 12a0 FFF760FA 		BL	ONEP	//  restore b0, this result in return address 2 level deep.
 2403 12a4 FFF7B0F9 		BL	TOR		//  address after string { -- a1 a2 }
 2404 12a8 FFF7D2F9 		BL	SWAP	//  count tugged
 2405 12ac FFF7ACF9 		BL	TOR     //  ( -- a2) is string address
 2406 12b0 52F804FB 		_UNNEST
 2407              	
 2408              	//    $"|	( -- a )
 2409              	// 	Run time routine compiled by _". Return address of a compiled string.
 2410              	
 2411              	// 	.word	_DOSTR+MAPOFFSET
 2412              	// _STRQP	.byte  COMPO+3
 2413              	// 	.ascii "$\"|"
 2414              	// 	.p2align 2 	
 2415              	STRQP:
 2416 12b4 42F804ED 		_NEST
 2417 12b8 FFF7E2FF 		BL	DOSTR
 2418 12bc 52F804FB 		_UNNEST			// force a call to dostr
 2419              	
 2420              	//    .$	( a -- )
 2421              	// 	Run time routine of ." . Output a compiled string.
 2422              	
 2423              	// 	.word	_STRQP+MAPOFFSET
 2424              	// _DOTST	.byte  COMPO+2
 2425              	// 	.ascii ".$$"
 2426              	// 	.p2align 2 	
 2427              	DOTST:
 2428 12c0 42F804ED 		_NEST
 2429 12c4 FFF760FB 		BL	COUNT // ( -- a+1 c )
 2430 12c8 FFF7B2FF 		BL	TYPEE
 2431 12cc 52F804FB 		_UNNEST
 2432              	
 2433              	//    ."|	( -- )
 2434              	// 	Run time routine of ." . Output a compiled string.
 2435              	
 2436              	// 	.word	_DOTST+MAPOFFSET
 2437              	// _DOTQP	.byte  COMPO+3
 2438              	// 	.ascii ".""|"
 2439              	// 	.p2align 2 	
 2440              	DOTQP:
 2441 12d0 42F804ED 		_NEST
 2442 12d4 FFF7D4FF 		BL	DOSTR
 2443 12d8 FFF7F2FF 		BL	DOTST
 2444 12dc 52F804FB 		_UNNEST
 2445              	
 2446              	//    .R	  ( n +n -- )
 2447              	// 	Display an integer in a field of n columns, right justified.
 2448              	
 2449 12e0 5A060018 		.word	_CR+MAPOFFSET
 2450 12e4 02       	_DOTR:	.byte  2
 2451 12e5 2E52     		.ascii ".R"
 2452 12e7 00       		.p2align 2 	
 2453              	DOTR:
 2454 12e8 42F804ED 		_NEST
 2455 12ec FFF78CF9 		BL	TOR
 2456 12f0 FFF74EFE 		BL	STRR
 2457 12f4 FFF776F9 		BL	RFROM
ARM GAS  stm32eforth.s 			page 47


 2458 12f8 FFF7B4F9 		BL	OVER
 2459 12fc FFF70CFA 		BL	SUBB
 2460 1300 FFF77CFF 		BL	SPACS
 2461 1304 FFF794FF 		BL	TYPEE
 2462 1308 52F804FB 		_UNNEST
 2463              	
 2464              	//    U.R	 ( u +n -- )
 2465              	// 	Display an unsigned integer in n column, right justified.
 2466              	
 2467 130c E4060018 		.word	_DOTR+MAPOFFSET
 2468 1310 03       	_UDOTR:	.byte  3
 2469 1311 552E52   		.ascii "U.R"
 2470              		.p2align 2 	
 2471              	UDOTR:
 2472 1314 42F804ED 		_NEST
 2473 1318 FFF776F9 		BL	TOR
 2474 131c FFF7CCFD 		BL	BDIGS
 2475 1320 FFF700FE 		BL	DIGS
 2476 1324 FFF724FE 		BL	EDIGS
 2477 1328 FFF75CF9 		BL	RFROM
 2478 132c FFF79AF9 		BL	OVER
 2479 1330 FFF7F2F9 		BL	SUBB
 2480 1334 FFF762FF 		BL	SPACS
 2481 1338 FFF77AFF 		BL	TYPEE
 2482 133c 52F804FB 		_UNNEST
 2483              	
 2484              	//    U.	  ( u -- )
 2485              	// 	Display an unsigned integer in free format.
 2486              	
 2487 1340 10070018 		.word	_UDOTR+MAPOFFSET
 2488 1344 02       	_UDOT:	.byte  2
 2489 1345 552E     		.ascii "U."
 2490 1347 00       		.p2align 2 	
 2491              	UDOT:
 2492 1348 42F804ED 		_NEST
 2493 134c FFF7B4FD 		BL	BDIGS
 2494 1350 FFF7E8FD 		BL	DIGS
 2495 1354 FFF70CFE 		BL	EDIGS
 2496 1358 FFF742FF 		BL	SPACE
 2497 135c FFF768FF 		BL	TYPEE
 2498 1360 52F804FB 		_UNNEST
 2499              	
 2500              	//    .	   ( w -- )
 2501              	// 	Display an integer in free format, preceeded by a space.
 2502              	
 2503 1364 44070018 		.word	_UDOT+MAPOFFSET
 2504 1368 01       	_DOT:	.byte  1
 2505 1369 2E       		.ascii "."
 2506 136a 00BF     		.p2align 2 	
 2507              	DOT:
 2508 136c 42F804ED 		_NEST
 2509 1370 FFF74EFB 		BL	BASE
 2510 1374 FFF720F9 		BL	AT
 2511 1378 FFF7D5F8 		_DOLIT
 2512 137c 0A000000 		.word	10
 2513 1380 FFF796F9 		BL	XORR			// ?decimal
 2514 1384 FFF7F2F8 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 48


 2515 1388 94070018 		.word	DOT1+MAPOFFSET
 2516 138c FFF7DCFF 		BL	UDOT
 2517 1390 52F804FB 		_UNNEST			// no,display unsigned
 2518              	DOT1:
 2519 1394 FFF7FCFD 	    BL	STRR
 2520 1398 FFF722FF 		BL	SPACE
 2521 139c FFF748FF 		BL	TYPEE
 2522 13a0 52F804FB 		_UNNEST			// yes, display signed
 2523              	
 2524              	//    ?	   ( a -- )
 2525              	// 	Display the contents in a memory cell.
 2526              	
 2527 13a4 68070018 		.word	_DOT+MAPOFFSET
 2528 13a8 01       	_QUEST:	.byte  1
 2529 13a9 3F       		.ascii "?"
 2530 13aa 00BF     		.p2align 2 	
 2531              	QUEST:
 2532 13ac 42F804ED 		_NEST
 2533 13b0 FFF702F9 		BL	AT
 2534 13b4 FFF7DAFF 		BL	DOT
 2535 13b8 52F804FB 		_UNNEST
 2536              	
 2537              	// **************************************************************************
 2538              	//  Parsing
 2539              	
 2540              	//    parse	( b u c -- b u delta //  string> )
 2541              	// 	Scan word delimited by c. Return found string and its offset.
 2542              	
 2543              	// 	.word	_QUEST+MAPOFFSET
 2544              	// _PARS	.byte  5
 2545              	// 	.ascii "parse"
 2546              	// 	.p2align 2 	
 2547              	PARS:
 2548 13bc 42F804ED 		_NEST
 2549 13c0 FFF72BFB 		BL	TEMP
 2550 13c4 FFF7EEF8 		BL	STORE
 2551 13c8 FFF74CF9 		BL	OVER
 2552 13cc FFF71CF9 		BL	TOR
 2553 13d0 FFF736F9 		BL	DUPP
 2554 13d4 FFF7CAF8 		BL	QBRAN
 2555 13d8 CA080018 		.word	PARS8+MAPOFFSET
 2556 13dc FFF7CAF9 		BL	ONEM
 2557 13e0 FFF71BFB 		BL	TEMP
 2558 13e4 FFF7E8F8 		BL	AT
 2559 13e8 FFF7ECF9 		BL	BLANK
 2560 13ec FFF764FA 		BL	EQUAL
 2561 13f0 FFF7BCF8 		BL	QBRAN
 2562 13f4 44080018 		.word	PARS3+MAPOFFSET
 2563 13f8 FFF706F9 		BL	TOR
 2564              	PARS1:
 2565 13fc FFF7E2F9 		BL	BLANK
 2566 1400 FFF730F9 		BL	OVER
 2567 1404 FFF7E8F8 		BL	CAT			// skip leading blanks 
 2568 1408 FFF786F9 		BL	SUBB
 2569 140c FFF732F9 		BL	ZLESS
 2570 1410 FFF738FA 		BL	INVER
 2571 1414 FFF7AAF8 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 49


 2572 1418 40080018 		.word	PARS2+MAPOFFSET
 2573 141c FFF7A2F9 		BL	ONEP
 2574 1420 FFF795F8 		BL	DONXT
 2575 1424 FC070018 		.word	PARS1+MAPOFFSET
 2576 1428 FFF7DCF8 		BL	RFROM
 2577 142c FFF700F9 		BL	DROP
 2578 1430 FFF779F8 		_DOLIT
 2579 1434 00000000 		.word	0
 2580 1438 FFF702F9 		BL	DUPP
 2581 143c 52F804FB 		_UNNEST
 2582              	PARS2:
 2583 1440 FFF7D0F8 	  BL	RFROM
 2584              	PARS3:
 2585 1444 FFF70EF9 		BL	OVER
 2586 1448 FFF702F9 		BL	SWAP
 2587 144c FFF7DCF8 		BL	TOR
 2588              	PARS4:
 2589 1450 FFF7E3FA 		BL	TEMP
 2590 1454 FFF7B0F8 		BL	AT
 2591 1458 FFF704F9 		BL	OVER
 2592 145c FFF7BCF8 		BL	CAT
 2593 1460 FFF75AF9 		BL	SUBB			// scan for delimiter
 2594 1464 FFF7D9FA 		BL	TEMP
 2595 1468 FFF7A6F8 		BL	AT
 2596 146c FFF7AAF9 		BL	BLANK
 2597 1470 FFF722FA 		BL	EQUAL
 2598 1474 FFF77AF8 		BL	QBRAN
 2599 1478 80080018 		.word	PARS5+MAPOFFSET
 2600 147c FFF7FAF8 		BL	ZLESS
 2601              	PARS5:
 2602 1480 FFF774F8 		BL	QBRAN
 2603 1484 9E080018 		.word	PARS6+MAPOFFSET
 2604 1488 FFF76CF9 		BL	ONEP
 2605 148c FFF75FF8 		BL	DONXT
 2606 1490 50080018 		.word	PARS4+MAPOFFSET
 2607 1494 FFF7D4F8 		BL	DUPP
 2608 1498 FFF7B6F8 		BL	TOR
 2609 149c 09E0     		B	PARS7
 2610              	PARS6:
 2611 149e FFF7A1F8 		BL	RFROM
 2612 14a2 FFF7C5F8 		BL	DROP
 2613 14a6 FFF7CBF8 		BL	DUPP
 2614 14aa FFF75BF9 		BL	ONEP
 2615 14ae FFF7ABF8 		BL	TOR
 2616              	PARS7:
 2617 14b2 FFF7D7F8 		BL	OVER
 2618 14b6 FFF72FF9 		BL	SUBB
 2619 14ba FFF793F8 		BL	RFROM
 2620 14be FFF791F8 		BL	RFROM
 2621 14c2 FFF729F9 		BL	SUBB
 2622 14c6 52F804FB 		_UNNEST
 2623              	PARS8:
 2624 14ca FFF7CBF8 		BL	OVER
 2625 14ce FFF789F8 		BL	RFROM
 2626 14d2 FFF721F9 		BL	SUBB
 2627 14d6 52F804FB 		_UNNEST
 2628              	
ARM GAS  stm32eforth.s 			page 50


 2629              	//    PARSE	( c -- b u //  string> )
 2630              	// 	Scan input stream and return counted string delimited by c.
 2631              	
 2632 14da A8070018 		.word	_QUEST+MAPOFFSET
 2633 14de 05       	_PARSE:	.byte  5
 2634 14df 50415253 		.ascii "PARSE"
 2634      45
 2635              		.p2align 2 	
 2636              	PARSE:
 2637 14e4 42F804ED 		_NEST
 2638 14e8 FFF78EF8 		BL	TOR
 2639 14ec FFF728FC 		BL	TIB
 2640 14f0 FFF7A8FA 		BL	INN
 2641 14f4 FFF760F8 		BL	AT
 2642 14f8 FFF706F9 		BL	PLUS			// current input buffer pointer
 2643 14fc FFF7ACFA 		BL	NTIB
 2644 1500 FFF75AF8 		BL	AT
 2645 1504 FFF79EFA 		BL	INN
 2646 1508 FFF756F8 		BL	AT
 2647 150c FFF704F9 		BL	SUBB			// remaining count
 2648 1510 FFF768F8 		BL	RFROM
 2649 1514 FFF752FF 		BL	PARS
 2650 1518 FFF794FA 		BL	INN
 2651 151c FFF710FA 		BL	PSTOR
 2652 1520 52F804FB 		_UNNEST
 2653              	
 2654              	//    .(	  ( -- )
 2655              	// 	Output following string up to next ) .
 2656              	
 2657 1524 DE080018 		.word	_PARSE+MAPOFFSET
 2658 1528 82       	_DOTPR:	.byte  IMEDD+2
 2659 1529 2E28     		.ascii ".("
 2660 152b 00       		.p2align 2 	
 2661              	DOTPR:
 2662 152c 42F804ED 		_NEST
 2663 1530 FEF7F9FF 		_DOLIT
 2664 1534 29000000 		.word	')'
 2665 1538 FFF7D4FF 		BL	PARSE
 2666 153c FFF778FE 		BL	TYPEE
 2667 1540 52F804FB 		_UNNEST
 2668              	
 2669              	//    (	   ( -- )
 2670              	// 	Ignore following string up to next ) . A comment.
 2671              	
 2672 1544 28090018 		.word	_DOTPR+MAPOFFSET
 2673 1548 81       	_PAREN:	.byte  IMEDD+1
 2674 1549 28       		.ascii "("
 2675 154a 00BF     		.p2align 2 	
 2676              	PAREN:
 2677 154c 42F804ED 		_NEST
 2678 1550 FEF7E9FF 		_DOLIT
 2679 1554 29000000 		.word	')'
 2680 1558 FFF7C4FF 		BL	PARSE
 2681 155c FFF770F9 		BL	DDROP
 2682 1560 52F804FB 		_UNNEST
 2683              	
 2684              	//    \	   ( -- )
ARM GAS  stm32eforth.s 			page 51


 2685              	// 	Ignore following text till the end of line.
 2686              	
 2687 1564 48090018 		.word	_PAREN+MAPOFFSET
 2688 1568 81       	_BKSLA:	.byte  IMEDD+1
 2689 1569 27       		.byte	'\'
 2690 156a 00BF     		.p2align 2 	
 2691              	BKSLA:
 2692 156c 42F804ED 		_NEST
 2693 1570 FFF772FA 		BL	NTIB
 2694 1574 FFF720F8 		BL	AT
 2695 1578 FFF764FA 		BL	INN
 2696 157c FFF712F8 		BL	STORE
 2697 1580 52F804FB 		_UNNEST
 2698              	
 2699              	//    CHAR	( -- c )
 2700              	// 	Parse next word and return its first character.
 2701              	
 2702 1584 68090018 		.word	_BKSLA+MAPOFFSET
 2703 1588 04       	_CHAR:	.byte  4
 2704 1589 43484152 		.ascii "CHAR"
 2705 158d 0000BF   		.p2align 2 	
 2706              	CHAR:
 2707 1590 42F804ED 		_NEST
 2708 1594 FFF716F9 		BL	BLANK
 2709 1598 FFF7A4FF 		BL	PARSE
 2710 159c FFF748F8 		BL	DROP
 2711 15a0 FFF71AF8 		BL	CAT
 2712 15a4 52F804FB 		_UNNEST
 2713              	
 2714              	//    WORD	( c -- a //  string> )
 2715              	// 	Parse a word from input stream and copy it to code dictionary.
 2716              	
 2717 15a8 88090018 		.word	_CHAR+MAPOFFSET
 2718 15ac 04       	_WORDD:	.byte  4
 2719 15ad 574F5244 		.ascii "WORD"
 2720 15b1 0000BF   		.p2align 2 	
 2721              	WORDD:
 2722 15b4 42F804ED 		_NEST
 2723 15b8 FFF794FF 		BL	PARSE
 2724 15bc FFF7A8FB 		BL	HERE
 2725 15c0 FFF7F0F8 		BL	CELLP
 2726 15c4 FFF71AFC 		BL	PACKS
 2727 15c8 52F804FB 		_UNNEST
 2728              	
 2729              	//    TOKEN	( -- a //  string> )
 2730              	// 	Parse a word from input stream and copy it to name dictionary.
 2731              	
 2732 15cc AC090018 		.word	_WORDD+MAPOFFSET
 2733 15d0 05       	_TOKEN:	.byte  5
 2734 15d1 544F4B45 		.ascii "TOKEN"
 2734      4E
 2735 15d6 00BF     		.p2align 2 	
 2736              	TOKEN:
 2737 15d8 42F804ED 		_NEST
 2738 15dc FFF7F2F8 		BL	BLANK
 2739 15e0 FFF7E8FF 		BL	WORDD
 2740 15e4 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 52


 2741              	
 2742              	// **************************************************************************
 2743              	//  Dictionary search
 2744              	
 2745              	//    NAME>	( na -- ca )
 2746              	// 	Return a code address given a name address.
 2747              	
 2748 15e8 D0090018 		.word	_TOKEN+MAPOFFSET
 2749 15ec 05       	_NAMET:	.byte  5
 2750 15ed 4E414D45 		.ascii "NAME>"
 2750      3E
 2751 15f2 00BF     		.p2align 2 	
 2752              	NAMET:
 2753 15f4 42F804ED 		_NEST
 2754 15f8 FFF7C6F9 		BL	COUNT
 2755 15fc FEF793FF 		_DOLIT
 2756 1600 1F000000 		.word	0x1F
 2757 1604 FFF740F8 		BL	ANDD
 2758 1608 FFF77EF8 		BL	PLUS
 2759 160c FFF728FB 		BL	ALGND
 2760 1610 52F804FB 		_UNNEST
 2761              	
 2762              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2763              	// 	Compare u bytes in two strings. Return 0 if identical.
 2764              	//
 2765              	//  Picatout 2020-12-01, 
 2766              	//      Because of problem with .align directive that
 2767              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2768              	// 		words  to do a byte by byte comparison. 
 2769              	//
 2770 1614 EC090018 		.word	_NAMET+MAPOFFSET
 2771 1618 05       	_SAMEQ:	.byte  5
 2772 1619 53414D45 		.ascii "SAME?"
 2772      3F
 2773 161e 00BF     		.p2align 2	
 2774              	SAMEQ:
 2775 1620 42F804ED 		_NEST
 2776 1624 FEF7F0FF 		BL	TOR
 2777 1628 00F01EB8 		B.W	SAME2
 2778              	SAME1:
 2779 162c FFF71AF8 		BL	OVER  // ( a1 a2 -- a1 a2 a1 )
 2780 1630 FEF7E2FF 		BL	RAT   // a1 a2 a1 u 
 2781 1634 FFF768F8 		BL	PLUS  // a1 a2 a1+u 
 2782 1638 FEF7CEFF 		BL	CAT	   // a1 a2 c1    		
 2783 163c FFF712F8 		BL	OVER  // a1 a2 c1 a2 
 2784 1640 FEF7DAFF 		BL	RAT    
 2785 1644 FFF760F8 		BL	PLUS    
 2786 1648 FEF7C6FF 		BL	CAT	  // a1 a2 c1 c2
 2787 164c FFF764F8 		BL	SUBB  
 2788 1650 FFF7E2F8 		BL	QDUP
 2789 1654 FEF78AFF 		BL	QBRAN
 2790 1658 680A0018 		.word	SAME2+MAPOFFSET
 2791 165c FEF7C2FF 		BL	RFROM
 2792 1660 FEF7E6FF 		BL	DROP
 2793 1664 52F804FB 		_UNNEST	// strings not equal
 2794              	SAME2:
 2795 1668 FEF771FF 		BL	DONXT
ARM GAS  stm32eforth.s 			page 53


 2796 166c 2C0A0018 		.word	SAME1+MAPOFFSET
 2797 1670 FEF759FF 		_DOLIT
 2798 1674 00000000 		.word	0
 2799 1678 52F804FB 		_UNNEST	// strings equal
 2800              	
 2801              	//    find	( a na -- ca na | a F )
 2802              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2803              	
 2804              	//  Picatout 2020-12-01,  
 2805              	//		Modified from original. See comment for word "SAME?" 
 2806              	
 2807              	// 	.word	_SAMEQ+MAPOFFSET
 2808              	// _FIND	.byte  4
 2809              	// 	.ascii "find"
 2810              	// 	.p2align 2 	
 2811              	FIND:
 2812 167c 42F804ED 		_NEST
 2813 1680 FEF7E6FF 		BL	SWAP			// na a	
 2814 1684 FFF780F9 		BL	COUNT			// na a+1 count
 2815 1688 FEF7DAFF 		BL	DUPP 
 2816 168c FFF7C5F9 		BL	TEMP
 2817 1690 FEF788FF 		BL	STORE			// na a+1 count 
 2818 1694 FEF7B8FF 		BL  TOR		// na a+1  R: count  
 2819 1698 FEF7DAFF 		BL	SWAP			// a+1 na
 2820              	FIND1:
 2821 169c FEF7D0FF 		BL	DUPP			// a+1 na na
 2822 16a0 FEF764FF 		BL	QBRAN
 2823 16a4 EC0A0018 		.word	FIND6+MAPOFFSET	// end of vocabulary
 2824 16a8 FEF7CAFF 		BL	DUPP			// a+1 na na
 2825 16ac FEF794FF 		BL	CAT			// a+1 na name1
 2826 16b0 FEF739FF 		_DOLIT
 2827 16b4 1FFFFFFF 		.word	MASKK
 2828 16b8 FEF7E6FF 		BL	ANDD
 2829 16bc FEF79CFF 		BL	RAT			// a+1 na name1 count 
 2830 16c0 FEF7F6FF 		BL	XORR			// a+1 na,  same length?
 2831 16c4 FEF752FF 		BL	QBRAN
 2832 16c8 D80A0018 		.word	FIND2+MAPOFFSET
 2833 16cc FFF772F8 		BL	CELLM			// a+1 la
 2834 16d0 FEF772FF 		BL	AT			// a+1 next_na
 2835 16d4 FFF7E2BF 		B.w	FIND1			// try next word
 2836              	FIND2:   
 2837 16d8 FFF744F8 		BL	ONEP			// a+1 na+1
 2838 16dc FFF79DF9 		BL	TEMP
 2839 16e0 FEF76AFF 		BL	AT			// a+1 na+1 count
 2840 16e4 FFF79CFF 		BL	SAMEQ		// a+1 na+1 ? 
 2841              	FIND3:	
 2842 16e8 00F00CB8 		B.w	FIND4
 2843              	FIND6:	
 2844 16ec FEF77AFF 		BL	RFROM			// a+1 0 name1 -- , no match
 2845 16f0 FEF79EFF 		BL	DROP			// a+1 0
 2846 16f4 FEF7ACFF 		BL	SWAP			// 0 a+1
 2847 16f8 FFF73CF8 		BL	ONEM			// 0 a
 2848 16fc FEF7A8FF 		BL	SWAP			// a 0 
 2849 1700 52F804FB 		_UNNEST			// return without a match
 2850              	FIND4:	
 2851 1704 FEF732FF 		BL	QBRAN			// a+1 na+1
 2852 1708 1C0B0018 		.word	FIND5+MAPOFFSET	// found a match
ARM GAS  stm32eforth.s 			page 54


 2853 170c FFF732F8 		BL	ONEM			// a+1 na
 2854 1710 FFF750F8 		BL	CELLM			// a+4 la
 2855 1714 FEF750FF 		BL	AT			// a+1 next_na
 2856 1718 FFF7C0BF 		B.w	FIND1			// compare next name
 2857              	FIND5:	
 2858 171c FEF762FF 		BL	RFROM			// a+1 na+1 count
 2859 1720 FEF786FF 		BL	DROP			// a+1 na+1
 2860 1724 FEF794FF 		BL	SWAP			// na+1 a+1
 2861 1728 FEF782FF 		BL	DROP			// na+1
 2862 172c FFF722F8 		BL	ONEM			// na
 2863 1730 FEF786FF 		BL	DUPP			// na na
 2864 1734 FFF75EFF 		BL	NAMET			// na ca
 2865 1738 FEF78AFF 		BL	SWAP			// ca na
 2866 173c 52F804FB 		_UNNEST			//  return with a match
 2867              	
 2868              	//    NAME?	( a -- ca na | a F )
 2869              	// 	Search all context vocabularies for a string.
 2870              	
 2871 1740 180A0018 		.word	_SAMEQ+MAPOFFSET
 2872 1744 05       	_NAMEQ:	.byte  5
 2873 1745 4E414D45 		.ascii "NAME?"
 2873      3F
 2874 174a 00BF     		.p2align 2 	
 2875              	NAMEQ:
 2876 174c 42F804ED 		_NEST
 2877 1750 FFF7A2F9 		BL	CNTXT
 2878 1754 FEF730FF 		BL	AT
 2879 1758 FFF790FF 		BL	FIND
 2880 175c 52F804FB 		_UNNEST
 2881              	
 2882              	// **************************************************************************
 2883              	//  Terminal input
 2884              	
 2885              	//    	  ( bot eot cur -- bot eot cur )
 2886              	// 	Backup the cursor by one character.
 2887              	
 2888              	// 	.word	_NAMEQ+MAPOFFSET
 2889              	// _BKSP	.byte  2
 2890              	// 	.ascii "^H"
 2891              	// 	.p2align 2 	
 2892              	BKSP:
 2893 1760 42F804ED 		_NEST
 2894 1764 FEF750FF 		BL	TOR
 2895 1768 FEF77CFF 		BL	OVER
 2896 176c FEF73AFF 		BL	RFROM
 2897 1770 FEF76EFF 		BL	SWAP
 2898 1774 FEF776FF 		BL	OVER
 2899 1778 FEF79AFF 		BL	XORR
 2900 177c FEF7F6FE 		BL	QBRAN
 2901 1780 A80B0018 		.word	BACK1+MAPOFFSET
 2902 1784 FEF7CFFE 		_DOLIT
 2903 1788 08000000 		.word	BKSPP
 2904 178c FEF7BAFE 		BL	TECHO
 2905              	// 	BL	ATEXE
 2906 1790 FEF7F0FF 		BL	ONEM
 2907 1794 FFF716F8 		BL	BLANK
 2908 1798 FEF7B4FE 		BL	TECHO
ARM GAS  stm32eforth.s 			page 55


 2909              	// 	BL	ATEXE
 2910 179c FEF7C3FE 		_DOLIT
 2911 17a0 08000000 		.word	BKSPP
 2912 17a4 FEF7AEFE 		BL	TECHO
 2913              	// 	BL	ATEXE
 2914              	BACK1:
 2915 17a8 52F804FB 		  _UNNEST
 2916              	
 2917              	//    TAP	 ( bot eot cur c -- bot eot cur )
 2918              	// 	Accept and echo the key stroke and bump the cursor.
 2919              	
 2920              	// 	.word	_BKSP+MAPOFFSET
 2921              	// _TAP	.byte  3
 2922              	// 	.ascii "TAP"
 2923              	// 	.p2align 2 	
 2924              	TAP:
 2925 17ac 42F804ED 		_NEST
 2926 17b0 FEF746FF 		BL	DUPP
 2927 17b4 FEF7A6FE 		BL	TECHO
 2928              	// 	BL	ATEXE
 2929 17b8 FEF754FF 		BL	OVER
 2930 17bc FEF702FF 		BL	CSTOR
 2931 17c0 FEF7D0FF 		BL	ONEP
 2932 17c4 52F804FB 		_UNNEST
 2933              	
 2934              	//    kTAP	( bot eot cur c -- bot eot cur )
 2935              	// 	Process a key stroke, CR or backspace.
 2936              	
 2937              	// 	.word	_TAP+MAPOFFSET
 2938              	// _KTAP	.byte  4
 2939              	// 	.ascii "kTAP"
 2940              	// 	.p2align 2 	
 2941              	KTAP:
 2942              	TTAP:
 2943 17c8 42F804ED 		_NEST
 2944 17cc FEF738FF 		BL	DUPP
 2945 17d0 FEF7A9FE 		_DOLIT
 2946 17d4 0D000000 		.word	CRR
 2947 17d8 FEF76AFF 		BL	XORR
 2948 17dc FEF7C6FE 		BL	QBRAN
 2949 17e0 100C0018 		.word	KTAP2+MAPOFFSET
 2950 17e4 FEF79FFE 		_DOLIT
 2951 17e8 08000000 		.word	BKSPP
 2952 17ec FEF760FF 		BL	XORR
 2953 17f0 FEF7BCFE 		BL	QBRAN
 2954 17f4 080C0018 		.word	KTAP1+MAPOFFSET
 2955 17f8 FEF7E4FF 		BL	BLANK
 2956 17fc FFF7D6FF 		BL	TAP
 2957 1800 52F804FB 		_UNNEST
 2958 1804 00000000 		.word	0			// patch
 2959              	KTAP1:
 2960 1808 FFF7AAFF 	  BL	BKSP
 2961 180c 52F804FB 		_UNNEST
 2962              	KTAP2:
 2963 1810 FEF70EFF 	  BL	DROP
 2964 1814 FEF71CFF 		BL	SWAP
 2965 1818 FEF70AFF 		BL	DROP
ARM GAS  stm32eforth.s 			page 56


 2966 181c FEF710FF 		BL	DUPP
 2967 1820 52F804FB 		_UNNEST
 2968              	
 2969              	//    ACCEPT	( b u -- b u )
 2970              	// 	Accept characters to input buffer. Return with actual count.
 2971              	
 2972 1824 440B0018 		.word	_NAMEQ+MAPOFFSET
 2973 1828 06       	_ACCEP:	.byte  6
 2974 1829 41434345 		.ascii "ACCEPT"
 2974      5054
 2975 182f 00       		.p2align 2 	
 2976              	ACCEP:
 2977 1830 42F804ED 		_NEST
 2978 1834 FEF716FF 		BL	OVER
 2979 1838 FEF766FF 		BL	PLUS
 2980 183c FEF712FF 		BL	OVER
 2981              	ACCP1:
 2982 1840 FFF708F8 	  BL	DDUP
 2983 1844 FEF734FF 		BL	XORR
 2984 1848 FEF790FE 		BL	QBRAN
 2985 184c 7C0C0018 		.word	ACCP4+MAPOFFSET
 2986 1850 FFF7A8FC 		BL	KEY
 2987 1854 FEF7F4FE 		BL	DUPP
 2988 1858 FEF7B4FF 		BL	BLANK
 2989 185c FEF763FE 		_DOLIT
 2990 1860 7F000000 		.word	127
 2991 1864 FFF742F9 		BL	WITHI
 2992 1868 FEF780FE 		BL	QBRAN
 2993 186c 760C0018 		.word	ACCP2+MAPOFFSET
 2994 1870 FFF79CFF 		BL	TAP
 2995 1874 01E0     		B	ACCP3
 2996              	ACCP2:
 2997 1876 FFF7A7FF 	  BL	KTAP
 2998              	// 	BL	ATEXE
 2999              	ACCP3:	  
 3000 187a E1E7     		B	ACCP1
 3001              	ACCP4:
 3002 187c FEF7D8FE 	  BL	DROP
 3003 1880 FEF7F0FE 		BL	OVER
 3004 1884 FEF748FF 		BL	SUBB
 3005 1888 52F804FB 		_UNNEST
 3006              	
 3007              	//    QUERY	( -- )
 3008              	// 	Accept input stream to terminal input buffer.
 3009              	
 3010 188c 280C0018 		.word	_ACCEP+MAPOFFSET
 3011 1890 05       	_QUERY:	.byte  5
 3012 1891 51554552 		.ascii "QUERY"
 3012      59
 3013 1896 00BF     		.p2align 2 	
 3014              	QUERY:
 3015 1898 42F804ED 		_NEST
 3016 189c FFF750FA 		BL	TIB
 3017 18a0 FEF741FE 		_DOLIT
 3018 18a4 50000000 		.word	80
 3019 18a8 FFF7C2FF 		BL	ACCEP
 3020 18ac FFF7D4F8 		BL	NTIB
ARM GAS  stm32eforth.s 			page 57


 3021 18b0 FEF778FE 		BL	STORE
 3022 18b4 FEF7BCFE 		BL	DROP
 3023 18b8 FEF735FE 		_DOLIT
 3024 18bc 00000000 		.word	0
 3025 18c0 FFF7C0F8 		BL	INN
 3026 18c4 FEF76EFE 		BL	STORE
 3027 18c8 52F804FB 		_UNNEST
 3028              	
 3029              	// **************************************************************************
 3030              	//  Error handling
 3031              	
 3032              	//    ABORT	( a -- )
 3033              	// 	Reset data stack and jump to QUIT.
 3034              	
 3035 18cc 900C0018 		.word	_QUERY+MAPOFFSET
 3036 18d0 05       	_ABORT:	.byte  5
 3037 18d1 41424F52 		.ascii "ABORT"
 3037      54
 3038 18d6 00BF     		.p2align 2 	
 3039              	ABORT:
 3040 18d8 42F804ED 		_NEST
 3041 18dc FFF780FC 		BL	SPACE
 3042 18e0 FFF752F8 		BL	COUNT
 3043 18e4 FFF7A4FC 		BL	TYPEE
 3044 18e8 FEF71DFE 		_DOLIT
 3045 18ec 3F000000 		.word	0X3F
 3046 18f0 FEF708FE 		BL	EMIT
 3047 18f4 FFF7B4FC 		BL	CR
 3048 18f8 00F0B2F8 		BL	PRESE
 3049 18fc 00F0BCB8 		B.W	QUIT
 3050              	
 3051              	//    _abort"	( f -- )
 3052              	// 	Run time routine of ABORT" . Abort with a message.
 3053              	
 3054              	// 	.word	_ABORT+MAPOFFSET
 3055              	// _ABORQ	.byte  COMPO+6
 3056              	// 	.ascii "abort\""
 3057              	// 	.p2align 2 	
 3058              	ABORQ:
 3059 1900 42F804ED 		_NEST
 3060 1904 FEF732FE 		BL	QBRAN
 3061 1908 200D0018 		.word	ABOR1+MAPOFFSET	// text flag
 3062 190c FFF7B8FC 		BL	DOSTR
 3063 1910 FFF73AF8 		BL	COUNT
 3064 1914 FFF78CFC 		BL	TYPEE
 3065 1918 FFF7A2FC 		BL	CR
 3066 191c 00F0ACB8 		B.W	QUIT
 3067              	ABOR1:
 3068 1920 FFF7AEFC 	  BL	DOSTR
 3069 1924 FEF784FE 		BL	DROP
 3070 1928 52F804FB 		_UNNEST			// drop error
 3071              	
 3072              	// **************************************************************************
 3073              	//  The text interpreter
 3074              	
 3075              	//    $INTERPRET  ( a -- )
 3076              	// 	Interpret a word. If failed, try to convert it to an integer.
ARM GAS  stm32eforth.s 			page 58


 3077              	
 3078 192c D00C0018 		.word	_ABORT+MAPOFFSET
 3079 1930 0A       	_INTER:	.byte  10
 3080 1931 2424494E 		.ascii "$$INTERPRET"
 3080      54455250 
 3080      524554
 3081              		.p2align 2 	
 3082              	INTER:
 3083 193c 42F804ED 		_NEST
 3084 1940 FFF704FF 		BL	NAMEQ
 3085 1944 FEF768FF 		BL	QDUP	// ?defined
 3086 1948 FEF710FE 		BL	QBRAN
 3087 194c 7C0D0018 		.word	INTE1+MAPOFFSET
 3088 1950 FEF732FE 		BL	AT
 3089 1954 FEF7E7FD 		_DOLIT
 3090 1958 40000000 		.word	COMPO
 3091 195c FEF794FE 		BL	ANDD	// ?compile only lexicon bits
 3092 1960 FFF7CEFF 		BL	ABORQ
 3093 1964 0D       		.byte	13
 3094 1965 20636F6D 		.ascii " compile only"
 3094      70696C65 
 3094      206F6E6C 
 3094      79
 3095 1972 00BF     		.p2align 2 	
 3096 1974 FEF7E6FD 		BL	EXECU
 3097 1978 52F804FB 		_UNNEST			// execute defined word
 3098              	INTE1:
 3099 197c FFF778FB 	  BL	NUMBQ
 3100 1980 FEF7F4FD 		BL	QBRAN
 3101 1984 8C0D0018 		.word	INTE2+MAPOFFSET
 3102 1988 52F804FB 		_UNNEST
 3103              	INTE2:
 3104 198c FFF7A4BF 	  B.W	ABORT	// error
 3105              	
 3106              	//    [	   ( -- )
 3107              	// 	Start the text interpreter.
 3108              	
 3109 1990 300D0018 		.word	_INTER+MAPOFFSET
 3110 1994 81       	_LBRAC:	.byte  IMEDD+1
 3111 1995 5B       		.ascii "["
 3112 1996 00BF     		.p2align 2 	
 3113              	LBRAC:
 3114 1998 42F804ED 		_NEST
 3115 199c FEF7C3FD 		_DOLIT
 3116 19a0 3C0D0018 		.word	INTER+MAPOFFSET
 3117 19a4 FFF762F8 		BL	TEVAL
 3118 19a8 FEF7FCFD 		BL	STORE
 3119 19ac 52F804FB 		_UNNEST
 3120              	
 3121              	//    .OK	 ( -- )
 3122              	// 	Display "ok" only while interpreting.
 3123              	
 3124 19b0 940D0018 		.word	_LBRAC+MAPOFFSET
 3125 19b4 03       	_DOTOK:	.byte  3
 3126 19b5 2E4F4B   		.ascii ".OK"
 3127              		.p2align 2 	
 3128              	DOTOK:
ARM GAS  stm32eforth.s 			page 59


 3129 19b8 42F804ED 		_NEST
 3130 19bc FEF7B3FD 		_DOLIT
 3131 19c0 3C0D0018 		.word	INTER+MAPOFFSET
 3132 19c4 FFF752F8 		BL	TEVAL
 3133 19c8 FEF7F6FD 		BL	AT
 3134 19cc FEF774FF 		BL	EQUAL
 3135 19d0 FEF7CCFD 		BL	QBRAN
 3136 19d4 E00D0018 		.word	DOTO1+MAPOFFSET
 3137 19d8 FFF77AFC 		BL	DOTQP
 3138 19dc 03       		.byte	3
 3139 19dd 206F6B   		.ascii " ok"
 3140              	DOTO1:
 3141 19e0 FFF73EFC 		BL	CR
 3142 19e4 52F804FB 		_UNNEST
 3143              	
 3144              	//    ?STACK	( -- )
 3145              	// 	Abort if the data stack underflows.
 3146              	
 3147 19e8 B40D0018 		.word	_DOTOK+MAPOFFSET
 3148 19ec 06       	_QSTAC:	.byte  6
 3149 19ed 3F535441 		.ascii "?STACK"
 3149      434B
 3150 19f3 00       		.p2align 2 	
 3151              	QSTAC:
 3152 19f4 42F804ED 		_NEST
 3153 19f8 FFF764F9 		BL	DEPTH
 3154 19fc FEF73AFE 		BL	ZLESS	// check only for underflow
 3155 1a00 FFF77EFF 		BL	ABORQ
 3156 1a04 0A       		.byte	10
 3157 1a05 20756E64 		.ascii " underflow"
 3157      6572666C 
 3157      6F77
 3158 1a0f 00       		.p2align 2 	
 3159 1a10 52F804FB 		_UNNEST
 3160              	
 3161              	//    EVAL	( -- )
 3162              	// 	Interpret the input stream.
 3163              	
 3164 1a14 EC0D0018 		.word	_QSTAC+MAPOFFSET
 3165 1a18 04       	_EVAL:	.byte  4
 3166 1a19 4556414C 		.ascii "EVAL"
 3167 1a1d 0000BF   		.p2align 2 	
 3168              	EVAL:
 3169 1a20 42F804ED 		_NEST
 3170              	EVAL1:
 3171 1a24 FFF7D8FD 	    BL	TOKEN
 3172 1a28 FEF70AFE 		BL	DUPP
 3173 1a2c FEF7D4FD 		BL	CAT	// ?input stream empty
 3174 1a30 FEF79CFD 		BL	QBRAN
 3175 1a34 480E0018 		.word	EVAL2+MAPOFFSET
 3176 1a38 FFF718F8 		BL	TEVAL
 3177 1a3c FFF78CF9 		BL	ATEXE
 3178 1a40 FFF7D8FF 		BL	QSTAC	// evaluate input, check stack
 3179 1a44 FFF7EEBF 		B.W	EVAL1
 3180              	EVAL2:
 3181 1a48 FEF7F2FD 		BL	DROP
 3182 1a4c FFF7B4FF 		BL	DOTOK
ARM GAS  stm32eforth.s 			page 60


 3183 1a50 52F804FB 		_UNNEST	// prompt
 3184              	
 3185              	//    PRESET	( -- )
 3186              	// 	Reset data stack pointer and the terminal input buffer.
 3187              	
 3188 1a54 180E0018 		.word	_EVAL+MAPOFFSET
 3189 1a58 06       	_PRESE:	.byte  6
 3190 1a59 50524553 		.ascii "PRESET"
 3190      4554
 3191 1a5f 00       		.p2align 2 	
 3192              	PRESE:
 3193              	//	_NEST
 3194 1a60 44F68061 		MOVW	R1,#SPP&0xffff		//  init SP
 3195 1a64 C2F20001 	 	MOVT	R1,#SPP>>16
 3196 1a68 85EA0505 		EOR	R5,R5,R5			//  init TOS=0
 3197              	//	_UNNEST
 3198 1a6c 7047     		_NEXT
 3199              	
 3200              	//    QUIT	( -- )
 3201              	// 	Reset return stack pointer and start text interpreter.
 3202              	
 3203 1a6e 580E0018 		.word	_PRESE+MAPOFFSET
 3204 1a72 04       	_QUIT:	.byte  4
 3205 1a73 51554954 		.ascii "QUIT"
 3206 1a77 00       		.p2align 2 	
 3207              	QUIT:
 3208 1a78 42F804ED 		_NEST
 3209 1a7c 44F68072 		MOVW	R2,#RPP&0xffff  /* RESET RSTACK */
 3210 1a80 C2F20002 	 	MOVT	R2,#RPP>>16 
 3211              	QUIT1:
 3212 1a84 FFF788FF 		BL	LBRAC			// start interpretation
 3213              	QUIT2:
 3214 1a88 FFF706FF 		BL	QUERY			// get input
 3215 1a8c FFF7C8FF 		BL	EVAL
 3216 1a90 FEF778FD 		BL	BRAN
 3217 1a94 880E0018 		.word	QUIT2+MAPOFFSET	// continue till error
 3218              	
 3219              	/***************************
 3220              	//  Flash memory interface
 3221              	***************************/
 3222              	// UNLOCK ( T|F -- )
 3223              	// lock or unlock FLASH write 
 3224              	
 3225 1a98 720E0018 		.word _QUIT+MAPOFFSET  
 3226 1a9c 06       	_UNLOCK: .byte 6
 3227 1a9d 554E4C4F 		.ascii "UNLOCK"
 3227      434B
 3228 1aa3 00       		.p2align 2  
 3229              	UNLOCK:	//  unlock flash memory	
 3230 1aa4 FEF762FD 		BL QBRAN 
 3231 1aa8 BA0E0018 		.word UNLOCK1+MAPOFFSET 
 3232              	LOCK: // lock flash memory 
 3233 1aac DFF8640A 		ldr r0,=FLASH_BASE_ADR 
 3234 1ab0 0469     		ldr r4,[r0,#FLASH_CR]
 3235 1ab2 44F08004 		orr r4,#(1<<7)
 3236 1ab6 0461     		str r4,[r0,#FLASH_CR]
 3237 1ab8 7047     		_NEXT 
ARM GAS  stm32eforth.s 			page 61


 3238              	UNLOCK1:
 3239 1aba DFF8580A 		ldr	r0, =FLASH_BASE_ADR
 3240 1abe DFF8584A 		ldr	r4, =FLASH_KEY1
 3241 1ac2 4460     		str	r4, [r0, #FLASH_KEYR]
 3242 1ac4 DFF8544A 		ldr	r4, =FLASH_KEY2 
 3243 1ac8 4460     		str	r4, [r0, #FLASH_KEYR]
 3244              		/* unlock option registers */
 3245 1aca DFF84C4A 		ldr	r4, =FLASH_KEY1
 3246 1ace 8460     		str	r4, [r0, #FLASH_OPTKEYR]
 3247 1ad0 DFF8484A 		ldr	r4, =FLASH_KEY2
 3248 1ad4 8460     		str	r4, [r0, #FLASH_OPTKEYR]
 3249 1ad6 7047     		_NEXT
 3250              	
 3251              	WAIT_BSY:
 3252 1ad8 DFF8380A 		ldr	r0,=FLASH_BASE_ADR
 3253              	WAIT1:
 3254 1adc C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 3255 1ade 14F00104 		ands	r4, #0x1	//  BSY
 3256 1ae2 FBD1     		bne	WAIT1
 3257 1ae4 7047     		_NEXT
 3258              	
 3259              	
 3260              	
 3261              	//    ERASE_SECTOR	   ( sector -- )
 3262              	// 	  Erase one sector of flash memory.  Sector=0 to 11
 3263              	
 3264 1ae6 9C0E0018 		.word	_UNLOCK+MAPOFFSET
 3265 1aea 0C       	_ESECT:	.byte  12
 3266 1aeb 45524153 		.ascii "ERASE_SECTOR"
 3266      455F5345 
 3266      43544F52 
 3267 1af7 00       		.p2align 2 	
 3268              	
 3269              	ESECT: 	//  sector --
 3270 1af8 42F804ED 		_NEST
 3271 1afc FFF7ECFF 		bl	WAIT_BSY
 3272 1b00 0469     		ldr	r4,[r0, #FLASH_CR]	
 3273 1b02 24F07804 		bic	r4,r4,#0x78	//  clear SNB
 3274 1b06 4FEAC505 		lsl	R5,R5,#3		//  align sector #
 3275 1b0a 44EA0504 		orr	r4,r4,r5		//  put in sector #
 3276 1b0e 44F48034 		orr	R4,R4,#0x10000	//  set STRT bit
 3277 1b12 44F40074 		orr	R4,R4,#0x200	//  PSIZE=32
 3278 1b16 44F00204 		orr	R4,R4,#2		//  set SER bit, enable erase
 3279 1b1a 0461     		str	r4,[r0, #0x10]	//  start erasing
 3280              	// 	bl	WAIT_BSY
 3281 1b1c 51F8045B 		_POP
 3282 1b20 52F804FB 		_UNNEST
 3283              	
 3284              	//    I!	   ( data address -- )
 3285              	// 	   Write one word into flash memory
 3286              	
 3287 1b24 EA0E0018 		.word	_ESECT+MAPOFFSET
 3288 1b28 02       	_ISTOR:	.byte  2
 3289 1b29 4921     		.ascii "I!"
 3290 1b2b 00       		.p2align 2 	
 3291              	
 3292              	ISTOR:	//  data address --
ARM GAS  stm32eforth.s 			page 62


 3293 1b2c 42F804ED 		_NEST
 3294 1b30 FFF7D2FF 		bl	WAIT_BSY
 3295 1b34 0469     		ldr	r4, [r0, #0x10]	//  FLASH_CR
 3296 1b36 44F00104 		orr	r4,R4,#0x1		//  PG
 3297 1b3a 0461     		str	r4, [r0, #0x10]	//  enable programming
 3298 1b3c FEF732FD 		bl	STORE
 3299 1b40 FFF7CAFF 		bl	WAIT_BSY
 3300 1b44 0469     		ldr	r4, [r0, #0x10]	//  FLASH_CR
 3301 1b46 24F00104 		bic	r4,R4,#0x1		//  PG
 3302 1b4a 0461     		str	r4, [r0, #0x10]	//  disable programming
 3303 1b4c 52F804FB 		_UNNEST
 3304              	
 3305              	//    TURNKEY	( -- )
 3306              	// 	Copy dictionary from RAM to flash.
 3307              	
 3308 1b50 280F0018 		.word	_ISTOR+MAPOFFSET
 3309 1b54 07       	_TURN:	.byte   7
 3310 1b55 5455524E 		.ascii "TURNKEY"
 3310      4B4559
 3311              		.p2align 2 
 3312 1b5c 42F804ED 	TURN:	_NEST
 3313 1b60 FEF7E1FC 		_DOLIT			//  save user area
 3314 1b64 00000020 		.word	RAMOFFSET
 3315 1b68 FEF7DDFC 		_DOLIT
 3316 1b6c C0000000 		.word	0xC0			//  to boot array
 3317 1b70 FEF7D9FC 		_DOLIT
 3318 1b74 40000000 		.word	0x40
 3319 1b78 FFF712F9 		BL	MOVE
 3320 1b7c FEF7D3FC 		_DOLIT
 3321 1b80 00000000 		.word	0
 3322 1b84 FEF7CFFC 		_DOLIT
 3323 1b88 000C0008 		.word	FLASHOFFSET
 3324 1b8c FEF78EFF 		BL	CPP
 3325 1b90 FEF712FD 		BL	AT
 3326 1b94 FEF728FE 		BL	CELLSL
 3327 1b98 FEF736FD 		BL	TOR
 3328              	TURN1:
 3329 1b9c FEF762FD 		BL	OVER
 3330 1ba0 FEF70AFD 		BL	AT
 3331 1ba4 FEF75EFD 		BL	OVER
 3332 1ba8 FFF7C0FF 		BL	ISTOR
 3333 1bac FEF750FD 		BL	SWAP
 3334 1bb0 FEF7F8FD 		BL	CELLP
 3335 1bb4 FEF74CFD 		BL	SWAP
 3336 1bb8 FEF7F4FD 		BL	CELLP
 3337 1bbc FEF7C7FC 		BL	DONXT
 3338 1bc0 9C0F0018 		.word	TURN1+MAPOFFSET
 3339 1bc4 FEF73CFE 		BL	DDROP
 3340 1bc8 52F804FB 		_UNNEST
 3341              	
 3342              	// **************************************************************************
 3343              	//  The compiler
 3344              	
 3345              	//    '	   ( -- ca )
 3346              	// 	Search context vocabularies for the next word in input stream.
 3347              	
 3348 1bcc 540F0018 		.word	_TURN+MAPOFFSET
ARM GAS  stm32eforth.s 			page 63


 3349 1bd0 01       	_TICK:	.byte  1
 3350 1bd1 27       		.ascii "'"
 3351 1bd2 00BF     		.p2align 2 	
 3352              	TICK:
 3353 1bd4 42F804ED 		_NEST
 3354 1bd8 FFF7FEFC 		BL	TOKEN
 3355 1bdc FFF7B6FD 		BL	NAMEQ	// ?defined
 3356 1be0 FEF7C4FC 		BL	QBRAN
 3357 1be4 EC0F0018 		.word	TICK1+MAPOFFSET
 3358 1be8 52F804FB 		_UNNEST	// yes, push code address
 3359 1bec FFF774BE 	TICK1:	B.W	ABORT	// no, error
 3360              	
 3361              	//    ALLOT	( n -- )
 3362              	// 	Allocate n bytes to the ram area.
 3363              	
 3364 1bf0 D00F0018 		.word	_TICK+MAPOFFSET
 3365 1bf4 05       	_ALLOT:	.byte  5
 3366 1bf5 414C4C4F 		.ascii "ALLOT"
 3366      54
 3367 1bfa 00BF     		.p2align 2 	
 3368              	ALLOT:
 3369 1bfc 42F804ED 		_NEST
 3370 1c00 FEF754FF 		BL	CPP
 3371 1c04 FEF79CFE 		BL	PSTOR
 3372 1c08 52F804FB 		_UNNEST			// adjust code pointer
 3373              	
 3374              	//    ,	   ( w -- )
 3375              	// 	Compile an integer into the code dictionary.
 3376              	
 3377 1c0c F40F0018 		.word	_ALLOT+MAPOFFSET
 3378 1c10 012C     	_COMMA:	.byte  1,','
 3379 1c12 00BF     		.p2align 2 	
 3380              	COMMA:
 3381 1c14 42F804ED 		_NEST
 3382 1c18 FFF77AF8 		BL	HERE
 3383 1c1c FEF710FD 		BL	DUPP
 3384 1c20 FEF7C0FD 		BL	CELLP	// cell boundary
 3385 1c24 FEF742FF 		BL	CPP
 3386 1c28 FEF7BCFC 		BL	STORE
 3387 1c2c FEF7BAFC 		BL	STORE
 3388 1c30 52F804FB 		_UNNEST	// adjust code pointer, compile
 3389              		.p2align 2 
 3390              	//    [COMPILE]   ( -- //  string> )
 3391              	// 	Compile the next immediate word into code dictionary.
 3392              	
 3393 1c34 10100018 		.word	_COMMA+MAPOFFSET
 3394 1c38 89       	_BCOMP:	.byte  IMEDD+9
 3395 1c39 5B434F4D 		.ascii "[COMPILE]"
 3395      50494C45 
 3395      5D
 3396 1c42 00BF     		.p2align 2 	
 3397              	BCOMP:
 3398 1c44 42F804ED 		_NEST
 3399 1c48 FFF7C4FF 		BL	TICK
 3400 1c4c FFF7E2FF 		BL	COMMA
 3401 1c50 52F804FB 		_UNNEST
 3402              	
ARM GAS  stm32eforth.s 			page 64


 3403              	//    COMPILE	( -- )
 3404              	// 	Compile the next address in colon list to code dictionary.
 3405              	
 3406 1c54 38100018 		.word	_BCOMP+MAPOFFSET
 3407 1c58 47       	_COMPI:	.byte  COMPO+7
 3408 1c59 434F4D50 		.ascii "COMPILE"
 3408      494C45
 3409              		.p2align 2 	
 3410              	COMPI:
 3411 1c60 42F804ED 		_NEST
 3412 1c64 FEF7BEFC 		BL	RFROM
 3413 1c68 25F00105 		BIC	R5,R5,#1
 3414 1c6c FEF7E8FC 		BL	DUPP
 3415 1c70 FEF7A2FC 		BL	AT
 3416 1c74 00F0DAF9 		BL	CALLC			// compile BL instruction
 3417 1c78 FEF794FD 		BL	CELLP
 3418 1c7c 45F00105 		ORR	R5,R5,#1
 3419 1c80 FEF7C2FC 		BL	TOR
 3420 1c84 52F804FB 		_UNNEST			// adjust return address
 3421              	
 3422              	//    LITERAL	( w -- )
 3423              	// 	Compile tos to code dictionary as an integer literal.
 3424              	
 3425 1c88 58100018 		.word	_COMPI+MAPOFFSET
 3426 1c8c 87       	_LITER:	.byte  IMEDD+7
 3427 1c8d 4C495445 		.ascii "LITERAL"
 3427      52414C
 3428              		.p2align 2 	
 3429              	LITER:
 3430 1c94 42F804ED 		_NEST
 3431 1c98 FFF7E2FF 		BL	COMPI
 3432 1c9c 26F9FF17 		.word	DOLIT+MAPOFFSET
 3433 1ca0 FFF7B8FF 		BL	COMMA
 3434 1ca4 52F804FB 		_UNNEST
 3435              	
 3436              	//    $,"	( -- )
 3437              	// 	Compile a literal string up to next " .
 3438              	
 3439              	// 	.word	_LITER+MAPOFFSET
 3440              	// _STRCQ	.byte  3
 3441              	// 	.ascii "$$,"""
 3442              	// 	.p2align 2 	
 3443              	STRCQ:
 3444 1ca8 42F804ED 		_NEST
 3445 1cac FEF73BFC 		_DOLIT
 3446 1cb0 FCFFFFFF 		.word	-4
 3447 1cb4 FEF7FAFE 		BL	CPP
 3448 1cb8 FEF742FE 		BL	PSTOR
 3449 1cbc FEF733FC 		_DOLIT
 3450 1cc0 22000000 		.word	'\"'
 3451 1cc4 FFF776FC 		BL	WORDD			// moveDCB to code dictionary
 3452 1cc8 FEF75EFE 		BL	COUNT
 3453 1ccc FEF71CFD 		BL	PLUS
 3454 1cd0 FEF7C6FF 		BL	ALGND			// calculate aligned end of string
 3455 1cd4 FEF7EAFE 		BL	CPP
 3456 1cd8 FEF764FC 		BL	STORE
 3457 1cdc 52F804FB 		_UNNEST 			// adjust the code pointer
ARM GAS  stm32eforth.s 			page 65


 3458              	
 3459              	// **************************************************************************
 3460              	//  Structures
 3461              	
 3462              	//    FOR	 ( -- a )
 3463              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3464              	
 3465 1ce0 8C100018 		.word	_LITER+MAPOFFSET
 3466 1ce4 83       	_FOR:	.byte  IMEDD+3
 3467 1ce5 464F52   		.ascii "FOR"
 3468              		.p2align 2 	
 3469              	FOR:
 3470 1ce8 42F804ED 		_NEST
 3471 1cec FFF7B8FF 		BL	COMPI
 3472 1cf0 08FAFF17 		.word	TOR+MAPOFFSET
 3473 1cf4 FFF70CF8 		BL	HERE
 3474 1cf8 52F804FB 		_UNNEST
 3475              	
 3476              	//    BEGIN	( -- a )
 3477              	// 	Start an infinite or indefinite loop structure.
 3478              	
 3479 1cfc E4100018 		.word	_FOR+MAPOFFSET
 3480 1d00 85       	_BEGIN:	.byte  IMEDD+5
 3481 1d01 42454749 		.ascii "BEGIN"
 3481      4E
 3482 1d06 00BF     		.p2align 2 	
 3483              	BEGIN:
 3484 1d08 42F804ED 		_NEST
 3485 1d0c FFF700F8 		BL	HERE
 3486 1d10 52F804FB 		_UNNEST
 3487              		.p2align 2 
 3488              	//    NEXT	( a -- )
 3489              	// 	Terminate a FOR-NEXT loop structure.
 3490              	
 3491 1d14 00110018 		.word	_BEGIN+MAPOFFSET
 3492 1d18 84       	_NEXT:	.byte  IMEDD+4
 3493 1d19 4E455854 		.ascii "NEXT"
 3494 1d1d 0000BF   		.p2align 2 	
 3495              	NEXT:
 3496 1d20 42F804ED 		_NEST
 3497 1d24 FFF79CFF 		BL	COMPI
 3498 1d28 4EF9FF17 		.word	DONXT+MAPOFFSET
 3499 1d2c FFF772FF 		BL	COMMA
 3500 1d30 52F804FB 		_UNNEST
 3501              	
 3502              	//    UNTIL	( a -- )
 3503              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3504              	
 3505 1d34 18110018 		.word	_NEXT+MAPOFFSET
 3506 1d38 85       	_UNTIL:	.byte  IMEDD+5
 3507 1d39 554E5449 		.ascii "UNTIL"
 3507      4C
 3508 1d3e 00BF     		.p2align 2 	
 3509              	UNTIL:
 3510 1d40 42F804ED 		_NEST
 3511 1d44 FFF78CFF 		BL	COMPI
 3512 1d48 6CF9FF17 		.word	QBRAN+MAPOFFSET
ARM GAS  stm32eforth.s 			page 66


 3513 1d4c FFF762FF 		BL	COMMA
 3514 1d50 52F804FB 		_UNNEST
 3515              	
 3516              	//    AGAIN	( a -- )
 3517              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3518              	
 3519 1d54 38110018 		.word	_UNTIL+MAPOFFSET
 3520 1d58 85       	_AGAIN:	.byte  IMEDD+5
 3521 1d59 41474149 		.ascii "AGAIN"
 3521      4E
 3522 1d5e 00BF     		.p2align 2 	
 3523              	AGAIN:
 3524 1d60 42F804ED 		_NEST
 3525 1d64 FFF77CFF 		BL	COMPI
 3526 1d68 84F9FF17 		.word	BRAN+MAPOFFSET
 3527 1d6c FFF752FF 		BL	COMMA
 3528 1d70 52F804FB 		_UNNEST
 3529              	
 3530              	//    IF	  ( -- A )
 3531              	// 	Begin a conditional branch structure.
 3532              	
 3533 1d74 58110018 		.word	_AGAIN+MAPOFFSET
 3534 1d78 82       	_IFF:	.byte  IMEDD+2
 3535 1d79 4946     		.ascii "IF"
 3536 1d7b 00       		.p2align 2 	
 3537              	IFF:
 3538 1d7c 42F804ED 		_NEST
 3539 1d80 FFF76EFF 		BL	COMPI
 3540 1d84 6CF9FF17 		.word	QBRAN+MAPOFFSET
 3541 1d88 FEF7C2FF 		BL	HERE
 3542 1d8c FEF7CBFB 		_DOLIT
 3543 1d90 04000000 		.word	4
 3544 1d94 FEF78AFE 		BL	CPP
 3545 1d98 FEF7D2FD 		BL	PSTOR
 3546 1d9c 52F804FB 		_UNNEST
 3547              	
 3548              	//    AHEAD	( -- A )
 3549              	// 	Compile a forward branch instruction.
 3550              	
 3551 1da0 78110018 		.word	_IFF+MAPOFFSET
 3552 1da4 85       	_AHEAD:	.byte  IMEDD+5
 3553 1da5 41484541 		.ascii "AHEAD"
 3553      44
 3554 1daa 00BF     		.p2align 2 	
 3555              	AHEAD:
 3556 1dac 42F804ED 		_NEST
 3557 1db0 FFF756FF 		BL	COMPI
 3558 1db4 84F9FF17 		.word	BRAN+MAPOFFSET
 3559 1db8 FEF7AAFF 		BL	HERE
 3560 1dbc FEF7B3FB 		_DOLIT
 3561 1dc0 04000000 		.word	4
 3562 1dc4 FEF772FE 		BL	CPP
 3563 1dc8 FEF7BAFD 		BL	PSTOR
 3564 1dcc 52F804FB 		_UNNEST
 3565              	
 3566              	//    REPEAT	( A a -- )
 3567              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
ARM GAS  stm32eforth.s 			page 67


 3568              	
 3569 1dd0 A4110018 		.word	_AHEAD+MAPOFFSET
 3570 1dd4 86       	_REPEA:	.byte  IMEDD+6
 3571 1dd5 52455045 		.ascii "REPEAT"
 3571      4154
 3572 1ddb 00       		.p2align 2 	
 3573              	REPEA:
 3574 1ddc 42F804ED 		_NEST
 3575 1de0 FFF7BEFF 		BL	AGAIN
 3576 1de4 FEF794FF 		BL	HERE
 3577 1de8 FEF732FC 		BL	SWAP
 3578 1dec FEF7DAFB 		BL	STORE
 3579 1df0 52F804FB 		_UNNEST
 3580              	
 3581              	//    THEN	( A -- )
 3582              	// 	Terminate a conditional branch structure.
 3583              	
 3584 1df4 D4110018 		.word	_REPEA+MAPOFFSET
 3585 1df8 84       	_THENN:	.byte  IMEDD+4
 3586 1df9 5448454E 		.ascii "THEN"
 3587 1dfd 0000BF   		.p2align 2 	
 3588              	THENN:
 3589 1e00 42F804ED 		_NEST
 3590 1e04 FEF784FF 		BL	HERE
 3591 1e08 FEF722FC 		BL	SWAP
 3592 1e0c FEF7CAFB 		BL	STORE
 3593 1e10 52F804FB 		_UNNEST
 3594              	
 3595              	//    AFT	 ( a -- a A )
 3596              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3597              	
 3598 1e14 F8110018 		.word	_THENN+MAPOFFSET
 3599 1e18 83       	_AFT:	.byte  IMEDD+3
 3600 1e19 414654   		.ascii "AFT"
 3601              		.p2align 2 	
 3602              	AFT:
 3603 1e1c 42F804ED 		_NEST
 3604 1e20 FEF706FC 		BL	DROP
 3605 1e24 FFF7C2FF 		BL	AHEAD
 3606 1e28 FFF76EFF 		BL	BEGIN
 3607 1e2c FEF710FC 		BL	SWAP
 3608 1e30 52F804FB 		_UNNEST
 3609              	
 3610              	//    ELSE	( A -- A )
 3611              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3612              	
 3613 1e34 18120018 		.word	_AFT+MAPOFFSET
 3614 1e38 84       	_ELSEE:	.byte  IMEDD+4
 3615 1e39 454C5345 		.ascii "ELSE"
 3616 1e3d 0000BF   		.p2align 2 	
 3617              	ELSEE:
 3618 1e40 42F804ED 		_NEST
 3619 1e44 FFF7B2FF 		BL	AHEAD
 3620 1e48 FEF702FC 		BL	SWAP
 3621 1e4c FFF7D8FF 		BL	THENN
 3622 1e50 52F804FB 		_UNNEST
 3623              	
ARM GAS  stm32eforth.s 			page 68


 3624              	//    WHILE	( a -- A a )
 3625              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3626              	
 3627 1e54 38120018 		.word	_ELSEE+MAPOFFSET
 3628 1e58 85       	_WHILE:	.byte  IMEDD+5
 3629 1e59 5748494C 		.ascii "WHILE"
 3629      45
 3630 1e5e 00BF     		.p2align 2 	
 3631              	WHILE:
 3632 1e60 42F804ED 		_NEST
 3633 1e64 FFF78AFF 		BL	IFF
 3634 1e68 FEF7F2FB 		BL	SWAP
 3635 1e6c 52F804FB 		_UNNEST
 3636              	
 3637              	//    ABORT"	( -- //  string> )
 3638              	// 	Conditional abort with an error message.
 3639              	
 3640 1e70 58120018 		.word	_WHILE+MAPOFFSET
 3641 1e74 86       	_ABRTQ:	.byte  IMEDD+6
 3642 1e75 41424F52 		.ascii "ABORT\""
 3642      5422
 3643 1e7b 00       		.p2align 2 	
 3644              	ABRTQ:
 3645 1e7c 42F804ED 		_NEST
 3646 1e80 FFF7EEFE 		BL	COMPI
 3647 1e84 000D0018 		.word	ABORQ+MAPOFFSET
 3648 1e88 FFF70EFF 		BL	STRCQ
 3649 1e8c 52F804FB 		_UNNEST
 3650              	
 3651              	//    $"	( -- //  string> )
 3652              	// 	Compile an inlineDCB literal.
 3653              	
 3654 1e90 74120018 		.word	_ABRTQ+MAPOFFSET
 3655 1e94 82       	_STRQ:	.byte  IMEDD+2
 3656 1e95 2422     		.byte	'$','"'
 3657 1e97 00       		.p2align 2 	
 3658              	STRQ:
 3659 1e98 42F804ED 		_NEST
 3660 1e9c FFF7E0FE 		BL	COMPI
 3661 1ea0 B4060018 		.word	STRQP+MAPOFFSET
 3662 1ea4 FFF700FF 		BL	STRCQ
 3663 1ea8 52F804FB 		_UNNEST
 3664              	
 3665              	//    ."	( -- //  string> )
 3666              	// 	Compile an inlineDCB literal to be typed out at run time.
 3667              	
 3668 1eac 94120018 		.word	_STRQ+MAPOFFSET
 3669 1eb0 82       	_DOTQ:	.byte  IMEDD+2
 3670 1eb1 2E22     		.byte	'.','"'
 3671 1eb3 00       		.p2align 2 	
 3672              	DOTQ:
 3673 1eb4 42F804ED 		_NEST
 3674 1eb8 FFF7D2FE 		BL	COMPI
 3675 1ebc D0060018 		.word	DOTQP+MAPOFFSET
 3676 1ec0 FFF7F2FE 		BL	STRCQ
 3677 1ec4 52F804FB 		_UNNEST
 3678              	
ARM GAS  stm32eforth.s 			page 69


 3679              	// **************************************************************************
 3680              	//  Name compiler
 3681              	
 3682              	//    ?UNIQUE	( a -- a )
 3683              	// 	Display a warning message if the word already exists.
 3684              	
 3685 1ec8 B0120018 		.word	_DOTQ+MAPOFFSET
 3686 1ecc 07       	_UNIQU:	.byte  7
 3687 1ecd 3F554E49 		.ascii "?UNIQUE"
 3687      515545
 3688              		.p2align 2 	
 3689              	UNIQU:
 3690 1ed4 42F804ED 		_NEST
 3691 1ed8 FEF7B2FB 		BL	DUPP
 3692 1edc FFF736FC 		BL	NAMEQ			// ?name exists
 3693 1ee0 FEF744FB 		BL	QBRAN
 3694 1ee4 00130018 		.word	UNIQ1+MAPOFFSET	// redefinitions are OK
 3695 1ee8 FFF7F2F9 		BL	DOTQP
 3696 1eec 07       		.byte	7
 3697 1eed 20726544 		.ascii " reDef "		// but warn the user
 3697      656620
 3698              		.p2align 2 	
 3699 1ef4 FEF7B6FB 		BL	OVER
 3700 1ef8 FEF746FD 		BL	COUNT
 3701 1efc FFF798F9 		BL	TYPEE			// just in case its not planned
 3702              	UNIQ1:
 3703 1f00 FEF796FB 		BL	DROP
 3704 1f04 52F804FB 		_UNNEST
 3705              	
 3706              	//    $,n	 ( na -- )
 3707              	// 	Build a new dictionary name using the data at na.
 3708              	
 3709              	// 	.word	_UNIQU+MAPOFFSET
 3710              	// _SNAME	.byte  3
 3711              	// 	.ascii "$$,n"
 3712              	// 	.p2align 2 	
 3713              	SNAME:
 3714 1f08 42F804ED 		_NEST
 3715 1f0c FEF798FB 		BL	DUPP			//  na na
 3716 1f10 FEF762FB 		BL	CAT			//  ?null input
 3717 1f14 FEF72AFB 		BL	QBRAN
 3718 1f18 50130018 		.word	SNAM1+MAPOFFSET
 3719 1f1c FFF7DAFF 		BL	UNIQU			//  na
 3720 1f20 FEF7D8FD 		BL	LAST			//  na last
 3721 1f24 FEF748FB 		BL	AT			//  na la
 3722 1f28 FFF774FE 		BL	COMMA			//  na
 3723 1f2c FEF788FB 		BL	DUPP			//  na na
 3724 1f30 FEF7D0FD 		BL	LAST			//  na na last
 3725 1f34 FEF736FB 		BL	STORE			//  na , save na for vocabulary link
 3726 1f38 FEF726FD 		BL	COUNT			//  na+1 count
 3727 1f3c FEF7E4FB 		BL	PLUS			//  na+1+count
 3728 1f40 FEF78EFE 		BL	ALGND			//  word boundary
 3729 1f44 FEF7B2FD 		BL	CPP
 3730 1f48 FEF72CFB 		BL	STORE			//  top of dictionary now
 3731 1f4c 52F804FB 		_UNNEST
 3732              	SNAM1:
 3733 1f50 FFF7B0F9 		BL	STRQP
ARM GAS  stm32eforth.s 			page 70


 3734 1f54 07       		.byte	7
 3735 1f55 206E616D 		.ascii " name? "
 3735      653F20
 3736 1f5c FFF7BCBC 		B.W	ABORT
 3737              	
 3738              	//    $COMPILE	( a -- )
 3739              	// 	Compile next word to code dictionary as a token or literal.
 3740              	
 3741 1f60 CC120018 		.word	_UNIQU+MAPOFFSET
 3742 1f64 08       	_SCOMP:	.byte  8
 3743 1f65 2424434F 		.ascii "$$COMPILE"
 3743      4D50494C 
 3743      45
 3744 1f6e 00BF     		.p2align 2 	
 3745              	SCOMP:
 3746 1f70 42F804ED 		_NEST
 3747 1f74 FFF7EAFB 		BL	NAMEQ
 3748 1f78 FEF74EFC 		BL	QDUP	// defined?
 3749 1f7c FEF7F6FA 		BL	QBRAN
 3750 1f80 AC130018 		.word	SCOM2+MAPOFFSET
 3751 1f84 FEF718FB 		BL	AT
 3752 1f88 FEF7CDFA 		_DOLIT
 3753 1f8c 80000000 		.word	IMEDD
 3754 1f90 FEF77AFB 		BL	ANDD	// immediate?
 3755 1f94 FEF7EAFA 		BL	QBRAN
 3756 1f98 A4130018 		.word	SCOM1+MAPOFFSET
 3757 1f9c FEF7D2FA 		BL	EXECU
 3758 1fa0 52F804FB 		_UNNEST			// it's immediate, execute
 3759              	SCOM1:
 3760 1fa4 00F042F8 		BL	CALLC			// it's not immediate, compile
 3761 1fa8 52F804FB 		_UNNEST	
 3762              	SCOM2:
 3763 1fac FFF760F8 		BL	NUMBQ
 3764 1fb0 FEF7DCFA 		BL	QBRAN
 3765 1fb4 C0130018 		.word	SCOM3+MAPOFFSET
 3766 1fb8 FFF76CFE 		BL	LITER
 3767 1fbc 52F804FB 		_UNNEST			// compile number as integer
 3768              	SCOM3:
 3769 1fc0 FFF78ABC 		B.W	ABORT			// error
 3770              	
 3771              	//    OVERT	( -- )
 3772              	// 	Link a new word into the current vocabulary.
 3773              	
 3774 1fc4 64130018 		.word	_SCOMP+MAPOFFSET
 3775 1fc8 05       	_OVERT:	.byte  5
 3776 1fc9 4F564552 		.ascii "OVERT"
 3776      54
 3777 1fce 00BF     		.p2align 2 	
 3778              	OVERT:
 3779 1fd0 42F804ED 		_NEST
 3780 1fd4 FEF77EFD 		BL	LAST
 3781 1fd8 FEF7EEFA 		BL	AT
 3782 1fdc FEF75CFD 		BL	CNTXT
 3783 1fe0 FEF7E0FA 		BL	STORE
 3784 1fe4 52F804FB 		_UNNEST
 3785              	
 3786              	//    ; 	   ( -- )
ARM GAS  stm32eforth.s 			page 71


 3787              	// 	Terminate a colon definition.
 3788              	
 3789 1fe8 C8130018 		.word	_OVERT+MAPOFFSET
 3790 1fec C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 3791 1fed 3B       		.ascii ";"
 3792 1fee 00BF     		.p2align 2 	
 3793              	SEMIS:
 3794 1ff0 42F804ED 		_NEST
 3795 1ff4 FEF797FA 		_DOLIT
 3796 1ff8 52F804FB 		_UNNEST
 3797 1ffc FFF70AFE 		BL	COMMA
 3798 2000 FFF7CAFC 		BL	LBRAC
 3799 2004 FFF7E4FF 		BL	OVERT
 3800 2008 52F804FB 		_UNNEST
 3801              	
 3802              	//    ]	   ( -- )
 3803              	// 	Start compiling the words in the input stream.
 3804              	
 3805 200c EC130018 		.word	_SEMIS+MAPOFFSET
 3806 2010 01       	_RBRAC:	.byte  1
 3807 2011 5D       		.ascii "]"
 3808 2012 00BF     		.p2align 2 	
 3809              	RBRAC:
 3810 2014 42F804ED 		_NEST
 3811 2018 FEF785FA 		_DOLIT
 3812 201c 70130018 		.word	SCOMP+MAPOFFSET
 3813 2020 FEF724FD 		BL	TEVAL
 3814 2024 FEF7BEFA 		BL	STORE
 3815 2028 52F804FB 		_UNNEST
 3816              	
 3817              	//    BL.W	( ca -- )
 3818              	// 	Assemble a branch-link long instruction to ca.
 3819              	// 	BL.W is split into 2 16 bit instructions with 11 bit address fields.
 3820              	
 3821              	// 	.word	_RBRAC+MAPOFFSET
 3822              	// _CALLC	.byte  5
 3823              	// 	.ascii "call,"
 3824              	// 	.p2align 2 	
 3825              	CALLC:
 3826 202c 42F804ED 		_NEST
 3827 2030 25F00105 		BIC	R5,R5,#1		//  clear b0 of address from R>
 3828 2034 FEF76CFE 		BL	HERE
 3829 2038 FEF76EFB 		BL	SUBB
 3830 203c A5F10405 		SUB	R5,R5,#4		//  pc offset
 3831 2040 40F2FF70 		MOVW	R0,#0x7FF		//  11 bit mask
 3832 2044 2C46     		MOV	R4,R5
 3833 2046 4FEA1535 		LSR	R5,R5,#12		//  get bits 22-12
 3834 204a 05EA0005 		AND	R5,R5,R0
 3835 204e 4FEAC434 		LSL	R4,R4,#15		//  get bits 11-1
 3836 2052 45EA0405 		ORR	R5,R5,R4
 3837 2056 45F07845 		ORR	R5,R5,#0xF8000000
 3838 205a 45F47045 		ORR	R5,R5,#0xF000
 3839 205e FFF7D9FD 		BL	COMMA			//  assemble BL.W instruction
 3840 2062 52F804FB 		_UNNEST
 3841              	
 3842              	
 3843              	// 	:	( -- //  string> )
ARM GAS  stm32eforth.s 			page 72


 3844              	// 	Start a new colon definition using next word as its name.
 3845              	
 3846 2066 10140018 		.word	_RBRAC+MAPOFFSET
 3847 206a 01       	_COLON:	.byte  1
 3848 206b 3A       		.ascii ":"
 3849              		.p2align 2 	
 3850              	COLON:
 3851 206c 42F804ED 		_NEST
 3852 2070 FFF7B2FA 		BL	TOKEN
 3853 2074 FFF748FF 		BL	SNAME
 3854 2078 FEF755FA 		_DOLIT
 3855 207c 42F804ED 		_NEST
 3856 2080 FFF7C8FD 		BL	COMMA
 3857 2084 FFF7C6FF 		BL	RBRAC
 3858 2088 52F804FB 		_UNNEST
 3859              	
 3860              	//    IMMEDIATE   ( -- )
 3861              	// 	Make the last compiled word an immediate word.
 3862              	
 3863 208c 6A140018 		.word	_COLON+MAPOFFSET
 3864 2090 09       	_IMMED:	.byte  9
 3865 2091 494D4D45 		.ascii "IMMEDIATE"
 3865      44494154 
 3865      45
 3866 209a 00BF     		.p2align 2 	
 3867              	IMMED:
 3868 209c 42F804ED 		_NEST
 3869 20a0 FEF741FA 		_DOLIT
 3870 20a4 80000000 		.word	IMEDD
 3871 20a8 FEF714FD 		BL	LAST
 3872 20ac FEF784FA 		BL	AT
 3873 20b0 FEF782FA 		BL	AT
 3874 20b4 FEF7F2FA 		BL	ORR
 3875 20b8 FEF70CFD 		BL	LAST
 3876 20bc FEF77CFA 		BL	AT
 3877 20c0 FEF770FA 		BL	STORE
 3878 20c4 52F804FB 		_UNNEST
 3879              	
 3880              	// **************************************************************************
 3881              	//  Defining words
 3882              	
 3883              	//    CONSTANT	( u -- //  string> )
 3884              	// 	Compile a new constant.
 3885              	
 3886 20c8 90140018 		.word	_IMMED+MAPOFFSET
 3887 20cc 08       	_CONST:	.byte  8
 3888 20cd 434F4E53 		.ascii "CONSTANT"
 3888      54414E54 
 3889 20d5 0000BF   		.p2align 2 	
 3890              	CONST:
 3891 20d8 42F804ED 		_NEST
 3892 20dc FFF77CFA 		BL	TOKEN
 3893 20e0 FFF712FF 		BL	SNAME
 3894 20e4 FFF774FF 		BL	OVERT
 3895 20e8 FEF71DFA 		_DOLIT
 3896 20ec 42F804ED 		_NEST
 3897 20f0 FFF790FD 		BL	COMMA
ARM GAS  stm32eforth.s 			page 73


 3898 20f4 FEF717FA 		_DOLIT
 3899 20f8 BCFDFF17 		.word	DOCON+MAPOFFSET
 3900 20fc FFF796FF 		BL	CALLC
 3901 2100 FFF788FD 		BL	COMMA
 3902 2104 52F804FB 		_UNNEST
 3903              	
 3904              	//    CREATE	( -- //  string> )
 3905              	// 	Compile a new array entry without allocating code space.
 3906              	
 3907 2108 CC140018 		.word	_CONST+MAPOFFSET
 3908 210c 06       	_CREAT:	.byte  6
 3909 210d 43524541 		.ascii "CREATE"
 3909      5445
 3910 2113 00       		.p2align 2 	
 3911              	CREAT:
 3912 2114 42F804ED 		_NEST
 3913 2118 FFF75EFA 		BL	TOKEN
 3914 211c FFF7F4FE 		BL	SNAME
 3915 2120 FFF756FF 		BL	OVERT
 3916 2124 FEF7FFF9 		_DOLIT
 3917 2128 42F804ED 		_NEST
 3918 212c FFF772FD 		BL	COMMA
 3919 2130 FEF7F9F9 		_DOLIT
 3920 2134 B0FDFF17 		.word	DOVAR+MAPOFFSET
 3921 2138 FFF778FF 		BL	CALLC
 3922 213c 52F804FB 		_UNNEST
 3923              	
 3924              	//    VARIABLE	( -- //  string> )
 3925              	// 	Compile a new variable initialized to 0.
 3926              	
 3927 2140 0C150018 		.word	_CREAT+MAPOFFSET
 3928 2144 08       	_VARIA:	.byte  8
 3929 2145 56415249 		.ascii "VARIABLE"
 3929      41424C45 
 3930 214d 0000BF   		.p2align 2 	
 3931              	VARIA:
 3932 2150 42F804ED 		_NEST
 3933 2154 FFF7DEFF 		BL	CREAT
 3934 2158 FEF7E5F9 		_DOLIT
 3935 215c 00000000 		.word	0
 3936 2160 FFF758FD 		BL	COMMA
 3937 2164 52F804FB 		_UNNEST
 3938              	
 3939              	// **************************************************************************
 3940              	//  Tools
 3941              	
 3942              	//    dm+	 ( a u -- a )
 3943              	// 	Dump u bytes from , leaving a+u on the stack.
 3944              	
 3945              	// 	.word	_VARIA+MAPOFFSET
 3946              	// _DMP	.byte  3
 3947              	// 	.ascii "dm+"
 3948              	// 	.p2align 2 	
 3949              	DMP:
 3950 2168 42F804ED 		_NEST
 3951 216c FEF77AFA 		BL	OVER
 3952 2170 FEF7D9F9 		_DOLIT
ARM GAS  stm32eforth.s 			page 74


 3953 2174 04000000 		.word	4
 3954 2178 FFF7CCF8 		BL	UDOTR			// display address
 3955 217c FFF730F8 		BL	SPACE
 3956 2180 FEF742FA 		BL	TOR			// start count down loop
 3957 2184 00F00CB8 		B.W	PDUM2			// skip first pass
 3958              	PDUM1:
 3959 2188 FEF75AFA 	  BL	DUPP
 3960 218c FEF724FA 		BL	CAT
 3961 2190 FEF7C9F9 		_DOLIT
 3962 2194 03000000 		.word	3
 3963 2198 FFF7BCF8 		BL	UDOTR			// display numeric data
 3964 219c FEF7E2FA 		BL	ONEP			// increment address
 3965              	PDUM2:
 3966 21a0 FEF7D5F9 	  BL	DONXT
 3967 21a4 88150018 		.word	PDUM1+MAPOFFSET	// loop till done
 3968 21a8 52F804FB 		_UNNEST
 3969              		.p2align 2 
 3970              	//    DUMP	( a u -- )
 3971              	// 	Dump u bytes from a, in a formatted manner.
 3972              	
 3973 21ac 44150018 		.word	_VARIA+MAPOFFSET
 3974 21b0 04       	_DUMP:	.byte  4
 3975 21b1 44554D50 		.ascii "DUMP"
 3976 21b5 0000BF   		.p2align 2 	
 3977              	DUMP:
 3978 21b8 42F804ED 		_NEST
 3979 21bc FEF728FC 		BL	BASE
 3980 21c0 FEF7FAF9 		BL	AT
 3981 21c4 FEF720FA 		BL	TOR
 3982 21c8 FEF7FAFE 		BL	HEX			// save radix,set hex
 3983 21cc FEF7ABF9 		_DOLIT
 3984 21d0 10000000 		.word	16
 3985 21d4 FEF714FD 		BL	SLASH			// change count to lines
 3986 21d8 FEF716FA 		BL	TOR
 3987 21dc 00F014B8 		B.W	DUMP4			// start count down loop
 3988              	DUMP1:
 3989 21e0 FFF73EF8 	  BL	CR
 3990 21e4 FEF79FF9 		_DOLIT
 3991 21e8 10000000 		.word	16
 3992 21ec FEF732FB 		BL	DDUP
 3993 21f0 FFF7BAFF 		BL	DMP			// display numeric
 3994 21f4 FEF71AFB 		BL	ROT
 3995 21f8 FEF718FB 		BL	ROT
 3996 21fc FEF7F0FF 		BL	SPACE
 3997 2200 FEF7EEFF 		BL	SPACE
 3998 2204 FFF714F8 		BL	TYPEE			// display printable characters
 3999              	DUMP4:
 4000 2208 FEF7A1F9 	  BL	DONXT
 4001 220c E0150018 		.word	DUMP1+MAPOFFSET	// loop till done
 4002              	DUMP3:
 4003 2210 FEF70EFA 	  BL	DROP
 4004 2214 FEF7E6F9 		BL	RFROM
 4005 2218 FEF7FAFB 		BL	BASE
 4006 221c FEF7C2F9 		BL	STORE			// restore radix
 4007 2220 52F804FB 		_UNNEST
 4008              	
 4009              	//    .S	  ( ... -- ... )
ARM GAS  stm32eforth.s 			page 75


 4010              	// 	Display the contents of the data stack.
 4011              	
 4012 2224 B0150018 		.word	_DUMP+MAPOFFSET
 4013              	_DOTS:
 4014 2228 02       		.byte  2
 4015 2229 2E53     		.ascii ".S"
 4016 222b 00       		.p2align 2 	
 4017              	DOTS:
 4018 222c 42F804ED 		_NEST
 4019 2230 FEF7D6FF 		BL	SPACE
 4020 2234 FEF746FD 		BL	DEPTH			// stack depth
 4021 2238 FEF7E6F9 		BL	TOR			// start count down loop
 4022 223c 00F006B8 		B.W	DOTS2			// skip first pass
 4023              	DOTS1:
 4024 2240 FEF7DAF9 		BL	RAT
 4025 2244 FEF750FD 		BL	PICK
 4026 2248 FFF790F8 		BL	DOT			// index stack, display contents
 4027              	DOTS2:
 4028 224c FEF77FF9 		BL	DONXT
 4029 2250 40160018 		.word	DOTS1+MAPOFFSET	// loop till done
 4030 2254 FEF7C4FF 		BL	SPACE
 4031 2258 52F804FB 		_UNNEST
 4032              	
 4033              	//    >NAME	( ca -- na | F )
 4034              	// 	Convert code address to a name address.
 4035              	
 4036 225c 28160018 		.word	_DOTS+MAPOFFSET
 4037 2260 05       	_TNAME:	.byte  5
 4038 2261 3E4E414D 		.ascii ">NAME"
 4038      45
 4039 2266 00BF     		.p2align 2 	
 4040              	TNAME:
 4041 2268 42F804ED 		_NEST
 4042 226c FEF7CCF9 		BL	TOR			//  
 4043 2270 FEF712FC 		BL	CNTXT			//  va
 4044 2274 FEF7A0F9 		BL	AT			//  na
 4045              	TNAM1:
 4046 2278 FEF7E2F9 		BL	DUPP			//  na na
 4047 227c FEF776F9 		BL	QBRAN
 4048 2280 A8160018 		.word	TNAM2+MAPOFFSET	//  vocabulary end, no match
 4049 2284 FEF7DCF9 		BL	DUPP			//  na na
 4050 2288 FFF7B4F9 		BL	NAMET			//  na ca
 4051 228c FEF7B4F9 		BL	RAT			//  na ca code
 4052 2290 FEF70EFA 		BL	XORR			//  na f --
 4053 2294 FEF76AF9 		BL	QBRAN
 4054 2298 A8160018 		.word	TNAM2+MAPOFFSET
 4055 229c FEF78AFA 		BL	CELLM			//  la 
 4056 22a0 FEF78AF9 		BL	AT			//  next_na
 4057 22a4 FFF7E8BF 		B.W	TNAM1
 4058              	TNAM2:	
 4059 22a8 FEF79CF9 		BL	RFROM
 4060 22ac FEF7C0F9 		BL	DROP			//  0|na --
 4061 22b0 52F804FB 		_UNNEST			// 0
 4062              	
 4063              	//    .ID	 ( na -- )
 4064              	// 	Display the name at address.
 4065              	
ARM GAS  stm32eforth.s 			page 76


 4066 22b4 60160018 		.word	_TNAME+MAPOFFSET
 4067 22b8 03       	_DOTID:	.byte  3
 4068 22b9 2E4944   		.ascii ".ID"
 4069              		.p2align 2 	
 4070              	DOTID:
 4071 22bc 42F804ED 		_NEST
 4072 22c0 FEF7AAFA 		BL	QDUP			// if zero no name
 4073 22c4 FEF752F9 		BL	QBRAN
 4074 22c8 E4160018 		.word	DOTI1+MAPOFFSET
 4075 22cc FEF75CFB 		BL	COUNT
 4076 22d0 FEF729F9 		_DOLIT
 4077 22d4 1F000000 		.word	0x1F
 4078 22d8 FEF7D6F9 		BL	ANDD			// mask lexicon bits
 4079 22dc FEF7A8FF 		BL	TYPEE
 4080 22e0 52F804FB 		_UNNEST			// display name string
 4081              	DOTI1:
 4082 22e4 FEF7F4FF 	  BL	DOTQP
 4083 22e8 09       		.byte	9
 4084 22e9 207B6E6F 		.ascii " {noName}"
 4084      4E616D65 
 4084      7D
 4085 22f2 00BF     		.p2align 2 	
 4086 22f4 52F804FB 		_UNNEST
 4087              	
 4088              	//    SEE	 ( -- //  string> )
 4089              	// 	A simple decompiler.
 4090              	
 4091 22f8 B8160018 		.word	_DOTID+MAPOFFSET
 4092 22fc 03       	_SEE:	.byte  3
 4093 22fd 534545   		.ascii "SEE"
 4094              		.p2align 2 	
 4095              	SEE:
 4096 2300 42F804ED 		_NEST
 4097 2304 FFF766FC 		BL	TICK	//  ca --, starting address
 4098 2308 FEF7AAFF 		BL	CR	
 4099 230c FEF70BF9 		_DOLIT
 4100 2310 14000000 		.word	20
 4101 2314 FEF778F9 		BL	TOR
 4102              	SEE1:
 4103 2318 FEF744FA 		BL	CELLP			//  a
 4104 231c FEF790F9 		BL	DUPP			//  a a
 4105 2320 00F010F8 		BL	DECOMP		//  a
 4106 2324 FEF713F9 		BL	DONXT
 4107 2328 18170018 		.word	SEE1+MAPOFFSET
 4108 232c FEF780F9 		BL	DROP
 4109 2330 52F804FB 		_UNNEST
 4110              	
 4111              	// 	DECOMPILE ( a -- )
 4112              	// 	Convert code in a.  Display name of command or as data.
 4113              	
 4114 2334 FC160018 		.word	_SEE+MAPOFFSET
 4115 2338 09       	_DECOM:	.byte  9
 4116 2339 4445434F 		.ascii "DECOMPILE"
 4116      4D50494C 
 4116      45
 4117 2342 00BF     		.p2align 2 
 4118              		
ARM GAS  stm32eforth.s 			page 77


 4119              	DECOMP:	
 4120 2344 42F804ED 		_NEST
 4121 2348 FEF77AF9 		BL	DUPP			//  a a
 4122              	// 	BL	TOR			//  a
 4123 234c FEF734F9 		BL	AT			//  a code
 4124 2350 FEF776F9 		BL	DUPP			//  a code code
 4125 2354 FEF7E7F8 		_DOLIT
 4126 2358 00F800F8 		.word	0xF800F800
 4127 235c FEF794F9 		BL	ANDD
 4128 2360 FEF7E1F8 		_DOLIT
 4129 2364 00F000F8 		.word	0xF800F000
 4130 2368 FEF7A6FA 		BL	EQUAL			//  a code ?
 4131 236c FEF7FEF8 		BL	QBRAN
 4132 2370 C8170018 		.word	DECOM2+MAPOFFSET	//  not a command
 4133              		//  a valid_code --, extract address and display name
 4134 2374 40F6FE70 		MOVW	R0,#0xFFE
 4135 2378 2C46     		MOV	R4,R5
 4136 237a 4FEA4555 		LSL	R5,R5,#21		//  get bits 22-12
 4137 237e 4FEA6525 		ASR	R5,R5,#9		//  with sign extension
 4138 2382 4FEAD434 		LSR	R4,R4,#15		//  get bits 11-1
 4139 2386 04EA0004 		AND	R4,R4,R0		//  retain only bits 11-1
 4140 238a 45EA0405 		ORR	R5,R5,R4		//  get bits 22-1
 4141 238e 00BF     		NOP
 4142 2390 FEF768F9 		BL	OVER			//  a offset a
 4143 2394 FEF7B8F9 		BL	PLUS			//  a target-4
 4144 2398 FEF704FA 		BL	CELLP			//  a target
 4145 239c FFF764FF 		BL	TNAME			//  a na/0 --, is it a name?
 4146 23a0 FEF73AFA 		BL	QDUP			//  name address or zero
 4147 23a4 FEF7E2F8 		BL	QBRAN
 4148 23a8 BC170018 		.word	DECOM1+MAPOFFSET
 4149 23ac FEF718FF 		BL	SPACE			//  a na
 4150 23b0 FFF784FF 		BL	DOTID			//  a --, display name
 4151              	// 	BL	RFROM			//  a
 4152 23b4 FEF73CF9 		BL	DROP
 4153 23b8 52F804FB 		_UNNEST
 4154              	DECOM1:	// BL	RFROM		//  a
 4155 23bc FEF7FCF8 		BL	AT			//  data
 4156 23c0 FEF7C2FF 		BL	UDOT			//  display data
 4157 23c4 52F804FB 		_UNNEST
 4158              	DECOM2:
 4159 23c8 FEF7BEFF 		BL	UDOT
 4160              	// 	BL	RFROM
 4161 23cc FEF730F9 		BL	DROP
 4162 23d0 52F804FB 		_UNNEST
 4163              	
 4164              	//    WORDS	( -- )
 4165              	// 	Display the names in the context vocabulary.
 4166              	
 4167 23d4 38170018 		.word	_DECOM+MAPOFFSET
 4168 23d8 05       	_WORDS:	.byte  5
 4169 23d9 574F5244 		.ascii "WORDS"
 4169      53
 4170 23de 00BF     		.p2align 2 	
 4171              	WORDS:
 4172 23e0 42F804ED 		_NEST
 4173 23e4 FEF73CFF 		BL	CR
 4174 23e8 FEF756FB 		BL	CNTXT
ARM GAS  stm32eforth.s 			page 78


 4175 23ec FEF7E4F8 		BL	AT			// only in context
 4176              	WORS1:
 4177 23f0 FEF712FA 		BL	QDUP			// ?at end of list
 4178 23f4 FEF7BAF8 		BL	QBRAN
 4179 23f8 14180018 		.word	WORS2+MAPOFFSET
 4180 23fc FEF720F9 		BL	DUPP
 4181 2400 FEF7EEFE 		BL	SPACE
 4182 2404 FFF75AFF 		BL	DOTID			// display a name
 4183 2408 FEF7D4F9 		BL	CELLM
 4184 240c FEF7D4F8 		BL	AT
 4185 2410 FFF7EEBF 		B.W	WORS1
 4186              	WORS2:
 4187 2414 52F804FB 		_UNNEST
 4188              	
 4189              	// **************************************************************************
 4190              	//  cold start
 4191              	
 4192              	//    VER	 ( -- n )
 4193              	// 	Return the version number of this implementation.
 4194              	
 4195              	// 	.word	_WORDS+MAPOFFSET
 4196              	// _VERSN	.byte  3
 4197              	// 	.ascii "VER"
 4198              	// 	.p2align 2 	
 4199              	VERSN:
 4200 2418 42F804ED 		_NEST
 4201 241c FEF783F8 		_DOLIT
 4202 2420 00010000 		.word	VER*256+EXT
 4203 2424 52F804FB 		_UNNEST
 4204              	
 4205              	//    hi	  ( -- )
 4206              	// 	Display the sign-on message of eForth.
 4207              	
 4208 2428 D8170018 		.word	_WORDS+MAPOFFSET
 4209 242c 02       	_HI:	.byte  2
 4210 242d 4849     		.ascii "HI"
 4211 242f 00       		.p2align 2 	
 4212              	HI:
 4213 2430 42F804ED 		_NEST
 4214 2434 FEF714FF 		BL	CR	// initialize I/O
 4215 2438 FEF74AFF 		BL	DOTQP
 4216 243c 17       		.byte	23
 4217 243d 626C7565 		.ascii "blue pill stm32eForth v" 
 4217      2070696C 
 4217      6C207374 
 4217      6D333265 
 4217      466F7274 
 4218              		.p2align 2
 4219 2454 FEF7DCFA 		BL	BASE
 4220 2458 FEF7AEF8 		BL	AT
 4221 245c FEF7B0FD 		BL	HEX	// save radix
 4222 2460 FFF7DAFF 		BL	VERSN
 4223 2464 FEF728FD 		BL	BDIGS
 4224 2468 FEF74CFD 		BL	DIG
 4225 246c FEF74AFD 		BL	DIG
 4226 2470 FEF759F8 		_DOLIT
 4227 2474 2E000000 		.word	'.'
ARM GAS  stm32eforth.s 			page 79


 4228 2478 FEF72EFD 		BL	HOLD
 4229 247c FEF752FD 		BL	DIGS
 4230 2480 FEF776FD 		BL	EDIGS
 4231 2484 FEF7D4FE 		BL	TYPEE	// format version number
 4232 2488 FEF7C2FA 		BL	BASE
 4233 248c FEF78AF8 		BL	STORE
 4234 2490 FEF7E6FE 		BL	CR
 4235 2494 52F804FB 		_UNNEST			// restore radix
 4236              	
 4237              	//    COLD	( -- )
 4238              	// 	The high level cold start sequence.
 4239              	
 4240 2498 2C180018 		.word	_HI+MAPOFFSET
 4241 249c 04       	LASTN:	.byte  4
 4242 249d 434F4C44 		.ascii "COLD"
 4243 24a1 000000   		.p2align 2,0	
 4244              	COLD:
 4245              	//  Initiate Forth registers
 4246 24a4 4FF00003 		MOV R3,#UPP&0xffff	//  user area 
 4247 24a8 C2F20003 	 	MOVT R3,#UPP>>16		  
 4248 24ac 03F59F42 		ADD R2,R3,#RPP&0xffff	// Forth return stack
 4249 24b0 03F59D41 		ADD R1,R3,#SPP&0xffff // Forth data stack
 4250 24b4 85EA0505 		EOR R5,R5,R5			//  tos=0
 4251 24b8 00BF     		NOP
 4252 24ba 42F804ED 		_NEST
 4253              	COLD1:
 4254 24be FEF732F8 		_DOLIT 
 4255 24c2 00000000 		.word 0 
 4256 24c6 FDF7EFFF 		BL ULED // turn off user LED 
 4257 24ca FEF72CF8 		_DOLIT
 4258 24ce 00040000 		.word	UZERO
 4259 24d2 FEF728F8 		_DOLIT
 4260 24d6 00000020 		.word	UPP
 4261 24da FEF724F8 		_DOLIT
 4262 24de 48000000 		.word	ULAST-UZERO
 4263 24e2 FEF75DFC 		BL	MOVE 			// initialize user area
 4264 24e6 FFF7BBFA 		BL	PRESE			// initialize stack and TIB
 4265 24ea FEF787FA 		BL	TBOOT
 4266 24ee FEF733FC 		BL	ATEXE			// application boot
 4267 24f2 FEF7DBFA 		BL	CPP 
 4268 24f6 FEF75FF8 		BL	AT 
 4269 24fa FEF7B1FB 		BL  ALGND 
 4270 24fe FEF7D5FA 		BL	CPP 
 4271 2502 FEF74FF8 		BL	STORE 
 4272 2506 FFF763FD 		BL	OVERT
 4273 250a FFF7B5BA 		B.W	QUIT			// start interpretation
 4274              	COLD2:	
 4275              	CTOP:
 4276 250e FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4277              	
 4278 2512 00000020 	  .end 
 4278      02402301 
 4278      6745AB89 
 4278      EFCD
ARM GAS  stm32eforth.s 			page 80


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
ARM GAS  stm32eforth.s 			page 81


board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
board/blue-pill/stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
board/blue-pill/stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
board/blue-pill/stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
board/blue-pill/stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
board/blue-pill/stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
board/blue-pill/stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
board/blue-pill/stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
board/blue-pill/stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
board/blue-pill/stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
board/blue-pill/stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
board/blue-pill/stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
board/blue-pill/stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
board/blue-pill/stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
board/blue-pill/stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
board/blue-pill/stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
board/blue-pill/stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32eforth.s:83     *ABS*:0000000040011000 LED_GPIO
       stm32eforth.s:84     *ABS*:000000000000000d LED_PIN
       stm32eforth.s:85     *ABS*:0000000040013800 UART
       stm32eforth.s:88     *ABS*:0000000020004e80 SPP
       stm32eforth.s:89     *ABS*:0000000020004e80 TIBB
       stm32eforth.s:90     *ABS*:0000000020004f80 RPP
       stm32eforth.s:91     *ABS*:0000000020000000 UPP
       stm32eforth.s:92     *ABS*:0000000020000100 DTOP
       stm32eforth.s:93     *ABS*:0000000020004e00 DEND
       stm32eforth.s:94     *ABS*:0000000020000000 RAMOFFSET
       stm32eforth.s:95     *ABS*:0000000020005000 RAMEND
       stm32eforth.s:96     *ABS*:0000000008000c00 FLASHOFFSET
       stm32eforth.s:99     *ABS*:0000000017fff400 MAPOFFSET
       stm32eforth.s:106    *ABS*:0000000000000004 TICKS_OFS
       stm32eforth.s:107    *ABS*:0000000000000008 TIMER_OFS
       stm32eforth.s:108    *ABS*:000000000000000c BOOT_OFS
       stm32eforth.s:109    *ABS*:0000000000000010 BASE_OFS
       stm32eforth.s:110    *ABS*:0000000000000014 TMP_OFS
       stm32eforth.s:111    *ABS*:0000000000000018 SPAN_OFS
       stm32eforth.s:112    *ABS*:000000000000001c TOIN_OFS
       stm32eforth.s:113    *ABS*:0000000000000020 NTIB_OFS
       stm32eforth.s:114    *ABS*:0000000000000024 TIB_OFS
       stm32eforth.s:115    *ABS*:0000000000000028 EVAL_OFS
       stm32eforth.s:116    *ABS*:000000000000002c HLD_OFS
       stm32eforth.s:117    *ABS*:0000000000000030 CTXT_OFS
       stm32eforth.s:118    *ABS*:0000000000000034 FLSH_CTOP_OFS
       stm32eforth.s:119    *ABS*:0000000000000038 RAM_CTOP_OFS
       stm32eforth.s:120    *ABS*:000000000000003c LASTN_OFS
       stm32eforth.s:159    .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:294    .text.reset_handler:0000000000000000 reset_handler
       stm32eforth.s:250    .text.default_handler:0000000000000000 default_handler
ARM GAS  stm32eforth.s 			page 82


       stm32eforth.s:273    .text.default_handler:0000000000000030 systick_handler
       stm32eforth.s:248    .text.default_handler:0000000000000000 $t
       stm32eforth.s:262    .text.default_handler:0000000000000028 cr_adr
       stm32eforth.s:264    .text.default_handler:000000000000002c dotqp_adr
       stm32eforth.s:257    .text.default_handler:0000000000000012 $d
       stm32eforth.s:263    .text.default_handler:0000000000000028 $d
       stm32eforth.s:2374   .text.reset_handler:0000000000001260 CR
       stm32eforth.s:2440   .text.reset_handler:00000000000012d0 DOTQP
       stm32eforth.s:271    .text.default_handler:0000000000000030 $t
       stm32eforth.s:283    .text.default_handler:000000000000004a systick_exit
       stm32eforth.s:292    .text.reset_handler:0000000000000000 $t
       stm32eforth.s:406    .text.reset_handler:00000000000000e4 remap
       stm32eforth.s:306    .text.reset_handler:0000000000000014 init_devices
       stm32eforth.s:301    .text.reset_handler:0000000000000010 forth_entry
       stm32eforth.s:302    .text.reset_handler:0000000000000010 $d
       stm32eforth.s:4244   .text.reset_handler:00000000000024a4 COLD
       stm32eforth.s:305    .text.reset_handler:0000000000000014 $t
       stm32eforth.s:321    .text.reset_handler:0000000000000032 wait_hserdy
       stm32eforth.s:341    .text.reset_handler:000000000000004c wait_pllrdy
       stm32eforth.s:354    .text.reset_handler:000000000000006c wait_sws
       stm32eforth.s:426    .text.reset_handler:000000000000011c remap_dest
       stm32eforth.s:424    .text.reset_handler:0000000000000118 remap_src
       stm32eforth.s:4275   .text.reset_handler:000000000000250e CTOP
       stm32eforth.s:472    .text.reset_handler:0000000000000400 UZERO
       stm32eforth.s:425    .text.reset_handler:0000000000000118 $d
       stm32eforth.s:432    *ABS*:0000000000000001 VER
       stm32eforth.s:433    *ABS*:0000000000000000 EXT
       stm32eforth.s:437    *ABS*:0000000000000040 COMPO
       stm32eforth.s:438    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:439    *ABS*:00000000ffffff1f MASKK
       stm32eforth.s:441    *ABS*:0000000000000004 CELLL
       stm32eforth.s:442    *ABS*:000000000000000a BASEE
       stm32eforth.s:443    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:445    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:446    *ABS*:000000000000000a LF
       stm32eforth.s:447    *ABS*:000000000000000d CRR
       stm32eforth.s:448    *ABS*:000000000000001b ERR
       stm32eforth.s:449    *ABS*:0000000000000027 TIC
       stm32eforth.s:470    .text.reset_handler:0000000000000120 $t
       stm32eforth.s:473    .text.reset_handler:0000000000000400 $d
       stm32eforth.s:4212   .text.reset_handler:0000000000002430 HI
       stm32eforth.s:3082   .text.reset_handler:000000000000193c INTER
       stm32eforth.s:4241   .text.reset_handler:000000000000249c LASTN
       stm32eforth.s:490    .text.reset_handler:0000000000000448 ULAST
       stm32eforth.s:501    .text.reset_handler:0000000000000448 $d
       stm32eforth.s:502    .text.reset_handler:000000000000044c _REBOOT
       stm32eforth.s:505    .text.reset_handler:0000000000000454 REBOOT
       stm32eforth.s:512    .text.reset_handler:0000000000000464 scb_adr
       stm32eforth.s:513    .text.reset_handler:0000000000000464 $d
       stm32eforth.s:517    .text.reset_handler:000000000000046c _PAUSE
       stm32eforth.s:519    .text.reset_handler:0000000000000472 $t
       stm32eforth.s:520    .text.reset_handler:0000000000000474 PAUSE
       stm32eforth.s:1429   .text.reset_handler:00000000000009e8 TIMER
       stm32eforth.s:711    .text.reset_handler:00000000000005a4 STORE
       stm32eforth.s:524    .text.reset_handler:0000000000000480 PAUSE_LOOP
       stm32eforth.s:724    .text.reset_handler:00000000000005b8 AT
       stm32eforth.s:671    .text.reset_handler:000000000000056c QBRAN
ARM GAS  stm32eforth.s 			page 83


       stm32eforth.s:528    .text.reset_handler:000000000000048c $d
       stm32eforth.s:531    .text.reset_handler:0000000000000498 PAUSE_EXIT
       stm32eforth.s:689    .text.reset_handler:0000000000000584 BRAN
       stm32eforth.s:529    .text.reset_handler:0000000000000490 $t
       stm32eforth.s:530    .text.reset_handler:0000000000000494 $d
       stm32eforth.s:532    .text.reset_handler:0000000000000498 $t
       stm32eforth.s:536    .text.reset_handler:000000000000049c $d
       stm32eforth.s:537    .text.reset_handler:00000000000004a0 _ULED
       stm32eforth.s:541    .text.reset_handler:00000000000004a8 ULED
       stm32eforth.s:550    .text.reset_handler:00000000000004c0 ULED_OFF
       stm32eforth.s:556    .text.reset_handler:00000000000004c4 $d
       stm32eforth.s:557    .text.reset_handler:00000000000004c8 _QRX
       stm32eforth.s:560    .text.reset_handler:00000000000004d0 QKEY
       stm32eforth.s:561    .text.reset_handler:00000000000004d0 QRX
       stm32eforth.s:572    .text.reset_handler:00000000000004f0 QRX1
       stm32eforth.s:581    .text.reset_handler:00000000000004f8 $d
       stm32eforth.s:582    .text.reset_handler:00000000000004fc _TXSTO
       stm32eforth.s:585    .text.reset_handler:0000000000000504 TXSTO
       stm32eforth.s:586    .text.reset_handler:0000000000000504 EMIT
       stm32eforth.s:587    .text.reset_handler:0000000000000504 TECHO
       stm32eforth.s:590    .text.reset_handler:000000000000050c TX1
       stm32eforth.s:606    .text.reset_handler:000000000000051c $d
       stm32eforth.s:607    .text.reset_handler:0000000000000520 _NOP
       stm32eforth.s:609    .text.reset_handler:0000000000000524 $t
       stm32eforth.s:610    .text.reset_handler:0000000000000524 NOP
       stm32eforth.s:621    .text.reset_handler:0000000000000526 DOLIT
       stm32eforth.s:631    .text.reset_handler:0000000000000538 $d
       stm32eforth.s:632    .text.reset_handler:000000000000053c _EXECU
       stm32eforth.s:634    .text.reset_handler:0000000000000544 $t
       stm32eforth.s:635    .text.reset_handler:0000000000000544 EXECU
       stm32eforth.s:649    .text.reset_handler:000000000000054e DONXT
       stm32eforth.s:656    .text.reset_handler:000000000000055c NEXT1
       stm32eforth.s:678    .text.reset_handler:000000000000057e QBRAN1
       stm32eforth.s:697    .text.reset_handler:000000000000058e $d
       stm32eforth.s:698    .text.reset_handler:0000000000000592 _EXIT
       stm32eforth.s:701    .text.reset_handler:0000000000000598 EXIT
       stm32eforth.s:707    .text.reset_handler:000000000000059c $d
       stm32eforth.s:708    .text.reset_handler:00000000000005a0 _STORE
       stm32eforth.s:710    .text.reset_handler:00000000000005a2 $t
       stm32eforth.s:720    .text.reset_handler:00000000000005b0 $d
       stm32eforth.s:721    .text.reset_handler:00000000000005b4 _AT
       stm32eforth.s:723    .text.reset_handler:00000000000005b6 $t
       stm32eforth.s:731    .text.reset_handler:00000000000005bc $d
       stm32eforth.s:732    .text.reset_handler:00000000000005c0 _CSTOR
       stm32eforth.s:735    .text.reset_handler:00000000000005c4 CSTOR
       stm32eforth.s:744    .text.reset_handler:00000000000005d0 $d
       stm32eforth.s:745    .text.reset_handler:00000000000005d4 _CAT
       stm32eforth.s:748    .text.reset_handler:00000000000005d8 CAT
       stm32eforth.s:755    .text.reset_handler:00000000000005dc $d
       stm32eforth.s:756    .text.reset_handler:00000000000005e0 _RFROM
       stm32eforth.s:759    .text.reset_handler:00000000000005e4 RFROM
       stm32eforth.s:767    .text.reset_handler:00000000000005ee $d
       stm32eforth.s:768    .text.reset_handler:00000000000005f2 _RAT
       stm32eforth.s:771    .text.reset_handler:00000000000005f8 RAT
       stm32eforth.s:779    .text.reset_handler:0000000000000600 $d
       stm32eforth.s:780    .text.reset_handler:0000000000000604 _TOR
       stm32eforth.s:783    .text.reset_handler:0000000000000608 TOR
ARM GAS  stm32eforth.s 			page 84


       stm32eforth.s:791    .text.reset_handler:0000000000000612 $d
       stm32eforth.s:792    .text.reset_handler:0000000000000616 _SPAT
       stm32eforth.s:794    .text.reset_handler:000000000000061a $t
       stm32eforth.s:795    .text.reset_handler:000000000000061c SPAT
       stm32eforth.s:803    .text.reset_handler:0000000000000624 $d
       stm32eforth.s:804    .text.reset_handler:0000000000000628 _DROP
       stm32eforth.s:807    .text.reset_handler:0000000000000630 DROP
       stm32eforth.s:814    .text.reset_handler:0000000000000636 $d
       stm32eforth.s:815    .text.reset_handler:000000000000063a _DUPP
       stm32eforth.s:817    .text.reset_handler:000000000000063e $t
       stm32eforth.s:818    .text.reset_handler:0000000000000640 DUPP
       stm32eforth.s:825    .text.reset_handler:0000000000000646 $d
       stm32eforth.s:826    .text.reset_handler:000000000000064a _SWAP
       stm32eforth.s:829    .text.reset_handler:0000000000000650 SWAP
       stm32eforth.s:838    .text.reset_handler:0000000000000658 $d
       stm32eforth.s:839    .text.reset_handler:000000000000065c _OVER
       stm32eforth.s:842    .text.reset_handler:0000000000000664 OVER
       stm32eforth.s:850    .text.reset_handler:000000000000066c $d
       stm32eforth.s:851    .text.reset_handler:0000000000000670 _ZLESS
       stm32eforth.s:854    .text.reset_handler:0000000000000674 ZLESS
       stm32eforth.s:862    .text.reset_handler:000000000000067e $d
       stm32eforth.s:863    .text.reset_handler:0000000000000682 _ANDD
       stm32eforth.s:865    .text.reset_handler:0000000000000686 $t
       stm32eforth.s:866    .text.reset_handler:0000000000000688 ANDD
       stm32eforth.s:874    .text.reset_handler:0000000000000692 $d
       stm32eforth.s:875    .text.reset_handler:0000000000000696 _ORR
       stm32eforth.s:878    .text.reset_handler:000000000000069c ORR
       stm32eforth.s:886    .text.reset_handler:00000000000006a6 $d
       stm32eforth.s:887    .text.reset_handler:00000000000006aa _XORR
       stm32eforth.s:889    .text.reset_handler:00000000000006ae $t
       stm32eforth.s:890    .text.reset_handler:00000000000006b0 XORR
       stm32eforth.s:898    .text.reset_handler:00000000000006ba $d
       stm32eforth.s:899    .text.reset_handler:00000000000006be _UPLUS
       stm32eforth.s:901    .text.reset_handler:00000000000006c2 $t
       stm32eforth.s:902    .text.reset_handler:00000000000006c4 UPLUS
       stm32eforth.s:913    .text.reset_handler:00000000000006d4 $d
       stm32eforth.s:914    .text.reset_handler:00000000000006d8 _RSHIFT
       stm32eforth.s:917    .text.reset_handler:00000000000006e0 RSHIFT
       stm32eforth.s:925    .text.reset_handler:00000000000006ea $d
       stm32eforth.s:926    .text.reset_handler:00000000000006ee _LSHIFT
       stm32eforth.s:929    .text.reset_handler:00000000000006f8 LSHIFT
       stm32eforth.s:937    .text.reset_handler:0000000000000702 $d
       stm32eforth.s:938    .text.reset_handler:0000000000000706 _PLUS
       stm32eforth.s:940    .text.reset_handler:0000000000000708 $t
       stm32eforth.s:941    .text.reset_handler:0000000000000708 PLUS
       stm32eforth.s:949    .text.reset_handler:0000000000000710 $d
       stm32eforth.s:950    .text.reset_handler:0000000000000714 _SUBB
       stm32eforth.s:952    .text.reset_handler:0000000000000716 $t
       stm32eforth.s:953    .text.reset_handler:0000000000000718 SUBB
       stm32eforth.s:961    .text.reset_handler:0000000000000722 $d
       stm32eforth.s:962    .text.reset_handler:0000000000000726 _STAR
       stm32eforth.s:964    .text.reset_handler:0000000000000728 $t
       stm32eforth.s:965    .text.reset_handler:0000000000000728 STAR
       stm32eforth.s:973    .text.reset_handler:0000000000000732 $d
       stm32eforth.s:974    .text.reset_handler:0000000000000736 _UMSTA
       stm32eforth.s:976    .text.reset_handler:000000000000073a $t
       stm32eforth.s:977    .text.reset_handler:000000000000073c UMSTA
ARM GAS  stm32eforth.s 			page 85


       stm32eforth.s:987    .text.reset_handler:0000000000000748 $d
       stm32eforth.s:988    .text.reset_handler:000000000000074c _MSTAR
       stm32eforth.s:991    .text.reset_handler:0000000000000750 MSTAR
       stm32eforth.s:1001   .text.reset_handler:000000000000075c $d
       stm32eforth.s:1002   .text.reset_handler:0000000000000760 _ONEP
       stm32eforth.s:1005   .text.reset_handler:0000000000000764 ONEP
       stm32eforth.s:1012   .text.reset_handler:000000000000076a $d
       stm32eforth.s:1013   .text.reset_handler:000000000000076e _ONEM
       stm32eforth.s:1016   .text.reset_handler:0000000000000774 ONEM
       stm32eforth.s:1023   .text.reset_handler:000000000000077a $d
       stm32eforth.s:1024   .text.reset_handler:000000000000077e _TWOP
       stm32eforth.s:1027   .text.reset_handler:0000000000000784 TWOP
       stm32eforth.s:1034   .text.reset_handler:000000000000078a $d
       stm32eforth.s:1035   .text.reset_handler:000000000000078e _TWOM
       stm32eforth.s:1038   .text.reset_handler:0000000000000794 TWOM
       stm32eforth.s:1045   .text.reset_handler:000000000000079a $d
       stm32eforth.s:1046   .text.reset_handler:000000000000079e _CELLP
       stm32eforth.s:1048   .text.reset_handler:00000000000007a4 $t
       stm32eforth.s:1049   .text.reset_handler:00000000000007a4 CELLP
       stm32eforth.s:1056   .text.reset_handler:00000000000007aa $d
       stm32eforth.s:1057   .text.reset_handler:00000000000007ae _CELLM
       stm32eforth.s:1059   .text.reset_handler:00000000000007b4 $t
       stm32eforth.s:1060   .text.reset_handler:00000000000007b4 CELLM
       stm32eforth.s:1067   .text.reset_handler:00000000000007ba $d
       stm32eforth.s:1068   .text.reset_handler:00000000000007be _BLANK
       stm32eforth.s:1071   .text.reset_handler:00000000000007c4 BLANK
       stm32eforth.s:1079   .text.reset_handler:00000000000007ce $d
       stm32eforth.s:1080   .text.reset_handler:00000000000007d2 _CELLS
       stm32eforth.s:1082   .text.reset_handler:00000000000007d8 $t
       stm32eforth.s:1083   .text.reset_handler:00000000000007d8 CELLS
       stm32eforth.s:1090   .text.reset_handler:00000000000007de $d
       stm32eforth.s:1091   .text.reset_handler:00000000000007e2 _CELLSL
       stm32eforth.s:1093   .text.reset_handler:00000000000007e8 $t
       stm32eforth.s:1094   .text.reset_handler:00000000000007e8 CELLSL
       stm32eforth.s:1101   .text.reset_handler:00000000000007ee $d
       stm32eforth.s:1102   .text.reset_handler:00000000000007f2 _TWOST
       stm32eforth.s:1105   .text.reset_handler:00000000000007f8 TWOST
       stm32eforth.s:1112   .text.reset_handler:00000000000007fe $d
       stm32eforth.s:1113   .text.reset_handler:0000000000000802 _TWOSL
       stm32eforth.s:1116   .text.reset_handler:0000000000000808 TWOSL
       stm32eforth.s:1123   .text.reset_handler:000000000000080e $d
       stm32eforth.s:1124   .text.reset_handler:0000000000000812 _QDUP
       stm32eforth.s:1127   .text.reset_handler:0000000000000818 QDUP
       stm32eforth.s:1136   .text.reset_handler:0000000000000822 $d
       stm32eforth.s:1137   .text.reset_handler:0000000000000826 _ROT
       stm32eforth.s:1139   .text.reset_handler:000000000000082a $t
       stm32eforth.s:1140   .text.reset_handler:000000000000082c ROT
       stm32eforth.s:1150   .text.reset_handler:0000000000000836 $d
       stm32eforth.s:1151   .text.reset_handler:000000000000083a _DDROP
       stm32eforth.s:1153   .text.reset_handler:0000000000000840 $t
       stm32eforth.s:1154   .text.reset_handler:0000000000000840 DDROP
       stm32eforth.s:1162   .text.reset_handler:000000000000084a $d
       stm32eforth.s:1163   .text.reset_handler:000000000000084e _DDUP
       stm32eforth.s:1166   .text.reset_handler:0000000000000854 DDUP
       stm32eforth.s:1175   .text.reset_handler:0000000000000860 $d
       stm32eforth.s:1176   .text.reset_handler:0000000000000864 _DPLUS
       stm32eforth.s:1179   .text.reset_handler:0000000000000868 DPLUS
ARM GAS  stm32eforth.s 			page 86


       stm32eforth.s:1191   .text.reset_handler:000000000000087c $d
       stm32eforth.s:1192   .text.reset_handler:0000000000000880 _INVER
       stm32eforth.s:1194   .text.reset_handler:0000000000000884 $t
       stm32eforth.s:1195   .text.reset_handler:0000000000000884 INVER
       stm32eforth.s:1202   .text.reset_handler:000000000000088a $d
       stm32eforth.s:1203   .text.reset_handler:000000000000088e _NEGAT
       stm32eforth.s:1206   .text.reset_handler:0000000000000898 NEGAT
       stm32eforth.s:1213   .text.reset_handler:000000000000089e $d
       stm32eforth.s:1214   .text.reset_handler:00000000000008a2 _ABSS
       stm32eforth.s:1216   .text.reset_handler:00000000000008a6 $t
       stm32eforth.s:1217   .text.reset_handler:00000000000008a8 ABSS
       stm32eforth.s:1226   .text.reset_handler:00000000000008b2 $d
       stm32eforth.s:1227   .text.reset_handler:00000000000008b6 _EQUAL
       stm32eforth.s:1229   .text.reset_handler:00000000000008b8 $t
       stm32eforth.s:1230   .text.reset_handler:00000000000008b8 EQUAL
       stm32eforth.s:1241   .text.reset_handler:00000000000008c8 $d
       stm32eforth.s:1242   .text.reset_handler:00000000000008cc _ULESS
       stm32eforth.s:1245   .text.reset_handler:00000000000008d0 ULESS
       stm32eforth.s:1256   .text.reset_handler:00000000000008e0 $d
       stm32eforth.s:1257   .text.reset_handler:00000000000008e4 _LESS
       stm32eforth.s:1259   .text.reset_handler:00000000000008e6 $t
       stm32eforth.s:1260   .text.reset_handler:00000000000008e8 LESS
       stm32eforth.s:1271   .text.reset_handler:00000000000008f8 $d
       stm32eforth.s:1272   .text.reset_handler:00000000000008fc _GREAT
       stm32eforth.s:1274   .text.reset_handler:00000000000008fe $t
       stm32eforth.s:1275   .text.reset_handler:0000000000000900 GREAT
       stm32eforth.s:1286   .text.reset_handler:0000000000000910 $d
       stm32eforth.s:1287   .text.reset_handler:0000000000000914 _MAX
       stm32eforth.s:1289   .text.reset_handler:0000000000000918 $t
       stm32eforth.s:1290   .text.reset_handler:0000000000000918 MAX
       stm32eforth.s:1300   .text.reset_handler:0000000000000924 $d
       stm32eforth.s:1301   .text.reset_handler:0000000000000928 _MIN
       stm32eforth.s:1303   .text.reset_handler:000000000000092c $t
       stm32eforth.s:1304   .text.reset_handler:000000000000092c MIN
       stm32eforth.s:1314   .text.reset_handler:0000000000000938 $d
       stm32eforth.s:1315   .text.reset_handler:000000000000093c _PSTOR
       stm32eforth.s:1318   .text.reset_handler:0000000000000940 PSTOR
       stm32eforth.s:1329   .text.reset_handler:0000000000000950 $d
       stm32eforth.s:1330   .text.reset_handler:0000000000000954 _DSTOR
       stm32eforth.s:1333   .text.reset_handler:0000000000000958 DSTOR
       stm32eforth.s:1344   .text.reset_handler:000000000000096c $d
       stm32eforth.s:1345   .text.reset_handler:0000000000000970 _DAT
       stm32eforth.s:1348   .text.reset_handler:0000000000000974 DAT
       stm32eforth.s:1357   .text.reset_handler:000000000000097e $d
       stm32eforth.s:1358   .text.reset_handler:0000000000000982 _COUNT
       stm32eforth.s:1360   .text.reset_handler:0000000000000988 $t
       stm32eforth.s:1361   .text.reset_handler:0000000000000988 COUNT
       stm32eforth.s:1370   .text.reset_handler:0000000000000994 $d
       stm32eforth.s:1371   .text.reset_handler:0000000000000998 _DNEGA
       stm32eforth.s:1373   .text.reset_handler:00000000000009a0 $t
       stm32eforth.s:1374   .text.reset_handler:00000000000009a0 DNEGA
       stm32eforth.s:1392   .text.reset_handler:00000000000009b0 DOVAR
       stm32eforth.s:1404   .text.reset_handler:00000000000009bc DOCON
       stm32eforth.s:1415   .text.reset_handler:00000000000009c8 $d
       stm32eforth.s:1416   .text.reset_handler:00000000000009cc _MSEC
       stm32eforth.s:1419   .text.reset_handler:00000000000009d4 MSEC
       stm32eforth.s:1425   .text.reset_handler:00000000000009de $d
ARM GAS  stm32eforth.s 			page 87


       stm32eforth.s:1426   .text.reset_handler:00000000000009e2 _TIMER
       stm32eforth.s:1428   .text.reset_handler:00000000000009e8 $t
       stm32eforth.s:1437   .text.reset_handler:00000000000009f2 $d
       stm32eforth.s:1438   .text.reset_handler:00000000000009f6 _TBOOT
       stm32eforth.s:1440   .text.reset_handler:00000000000009fc $t
       stm32eforth.s:1441   .text.reset_handler:00000000000009fc TBOOT
       stm32eforth.s:1449   .text.reset_handler:0000000000000a06 $d
       stm32eforth.s:1450   .text.reset_handler:0000000000000a0a _BASE
       stm32eforth.s:1453   .text.reset_handler:0000000000000a10 BASE
       stm32eforth.s:1465   .text.reset_handler:0000000000000a1a TEMP
       stm32eforth.s:1473   .text.reset_handler:0000000000000a24 $d
       stm32eforth.s:1474   .text.reset_handler:0000000000000a28 _SPAN
       stm32eforth.s:1477   .text.reset_handler:0000000000000a30 SPAN
       stm32eforth.s:1485   .text.reset_handler:0000000000000a3a $d
       stm32eforth.s:1486   .text.reset_handler:0000000000000a3e _INN
       stm32eforth.s:1488   .text.reset_handler:0000000000000a42 $t
       stm32eforth.s:1489   .text.reset_handler:0000000000000a44 INN
       stm32eforth.s:1497   .text.reset_handler:0000000000000a4e $d
       stm32eforth.s:1498   .text.reset_handler:0000000000000a52 _NTIB
       stm32eforth.s:1501   .text.reset_handler:0000000000000a58 NTIB
       stm32eforth.s:1509   .text.reset_handler:0000000000000a62 $d
       stm32eforth.s:1510   .text.reset_handler:0000000000000a66 _TEVAL
       stm32eforth.s:1512   .text.reset_handler:0000000000000a6c $t
       stm32eforth.s:1513   .text.reset_handler:0000000000000a6c TEVAL
       stm32eforth.s:1521   .text.reset_handler:0000000000000a76 $d
       stm32eforth.s:1522   .text.reset_handler:0000000000000a7a _HLD
       stm32eforth.s:1524   .text.reset_handler:0000000000000a7e $t
       stm32eforth.s:1525   .text.reset_handler:0000000000000a80 HLD
       stm32eforth.s:1533   .text.reset_handler:0000000000000a8a $d
       stm32eforth.s:1534   .text.reset_handler:0000000000000a8e _CNTXT
       stm32eforth.s:1536   .text.reset_handler:0000000000000a96 $t
       stm32eforth.s:1537   .text.reset_handler:0000000000000a98 CNTXT
       stm32eforth.s:1538   .text.reset_handler:0000000000000a98 CRRNT
       stm32eforth.s:1546   .text.reset_handler:0000000000000aa2 $d
       stm32eforth.s:1547   .text.reset_handler:0000000000000aa6 _CP
       stm32eforth.s:1550   .text.reset_handler:0000000000000aac CPP
       stm32eforth.s:1557   .text.reset_handler:0000000000000ab6 $d
       stm32eforth.s:1558   .text.reset_handler:0000000000000aba _FCPP
       stm32eforth.s:1561   .text.reset_handler:0000000000000ac0 FCPP
       stm32eforth.s:1569   .text.reset_handler:0000000000000aca $d
       stm32eforth.s:1570   .text.reset_handler:0000000000000ace _LAST
       stm32eforth.s:1573   .text.reset_handler:0000000000000ad4 LAST
       stm32eforth.s:1584   .text.reset_handler:0000000000000ade $d
       stm32eforth.s:1585   .text.reset_handler:0000000000000ae2 _WITHI
       stm32eforth.s:1588   .text.reset_handler:0000000000000aec WITHI
       stm32eforth.s:1603   .text.reset_handler:0000000000000b0c $d
       stm32eforth.s:1604   .text.reset_handler:0000000000000b10 _UMMOD
       stm32eforth.s:1607   .text.reset_handler:0000000000000b18 UMMOD
       stm32eforth.s:1611   .text.reset_handler:0000000000000b22 UMMOD0
       stm32eforth.s:1618   .text.reset_handler:0000000000000b32 UMMOD1
       stm32eforth.s:1624   .text.reset_handler:0000000000000b3c UMMOD2
       stm32eforth.s:1634   .text.reset_handler:0000000000000b46 $d
       stm32eforth.s:1635   .text.reset_handler:0000000000000b4a _MSMOD
       stm32eforth.s:1637   .text.reset_handler:0000000000000b50 $t
       stm32eforth.s:1638   .text.reset_handler:0000000000000b50 MSMOD
       stm32eforth.s:1645   .text.reset_handler:0000000000000b68 $d
       stm32eforth.s:1650   .text.reset_handler:0000000000000b7c MMOD1
ARM GAS  stm32eforth.s 			page 88


       stm32eforth.s:1646   .text.reset_handler:0000000000000b6c $t
       stm32eforth.s:1655   .text.reset_handler:0000000000000b8c $d
       stm32eforth.s:1658   .text.reset_handler:0000000000000b98 MMOD2
       stm32eforth.s:1656   .text.reset_handler:0000000000000b90 $t
       stm32eforth.s:1663   .text.reset_handler:0000000000000ba8 $d
       stm32eforth.s:1667   .text.reset_handler:0000000000000bb8 MMOD3
       stm32eforth.s:1664   .text.reset_handler:0000000000000bac $t
       stm32eforth.s:1673   .text.reset_handler:0000000000000bbc $d
       stm32eforth.s:1674   .text.reset_handler:0000000000000bc0 _SLMOD
       stm32eforth.s:1677   .text.reset_handler:0000000000000bc8 SLMOD
       stm32eforth.s:1688   .text.reset_handler:0000000000000be0 $d
       stm32eforth.s:1689   .text.reset_handler:0000000000000be4 _MODD
       stm32eforth.s:1691   .text.reset_handler:0000000000000be8 $t
       stm32eforth.s:1692   .text.reset_handler:0000000000000be8 MODD
       stm32eforth.s:1701   .text.reset_handler:0000000000000bf8 $d
       stm32eforth.s:1702   .text.reset_handler:0000000000000bfc _SLASH
       stm32eforth.s:1704   .text.reset_handler:0000000000000bfe $t
       stm32eforth.s:1705   .text.reset_handler:0000000000000c00 SLASH
       stm32eforth.s:1715   .text.reset_handler:0000000000000c14 $d
       stm32eforth.s:1716   .text.reset_handler:0000000000000c18 _SSMOD
       stm32eforth.s:1718   .text.reset_handler:0000000000000c1e $t
       stm32eforth.s:1719   .text.reset_handler:0000000000000c20 SSMOD
       stm32eforth.s:1730   .text.reset_handler:0000000000000c38 $d
       stm32eforth.s:1731   .text.reset_handler:0000000000000c3c _STASL
       stm32eforth.s:1734   .text.reset_handler:0000000000000c40 STASL
       stm32eforth.s:1747   .text.reset_handler:0000000000000c54 $d
       stm32eforth.s:1748   .text.reset_handler:0000000000000c58 _ALGND
       stm32eforth.s:1750   .text.reset_handler:0000000000000c60 $t
       stm32eforth.s:1751   .text.reset_handler:0000000000000c60 ALGND
       stm32eforth.s:1760   .text.reset_handler:0000000000000c6e $d
       stm32eforth.s:1761   .text.reset_handler:0000000000000c72 _TCHAR
       stm32eforth.s:1763   .text.reset_handler:0000000000000c78 $t
       stm32eforth.s:1764   .text.reset_handler:0000000000000c78 TCHAR
       stm32eforth.s:1767   .text.reset_handler:0000000000000c80 $d
       stm32eforth.s:1768   .text.reset_handler:0000000000000c84 $t
       stm32eforth.s:1772   .text.reset_handler:0000000000000c94 $d
       stm32eforth.s:1773   .text.reset_handler:0000000000000c98 $t
       stm32eforth.s:1776   .text.reset_handler:0000000000000ca4 $d
       stm32eforth.s:1780   .text.reset_handler:0000000000000cb4 TCHA1
       stm32eforth.s:1777   .text.reset_handler:0000000000000ca8 $t
       stm32eforth.s:1779   .text.reset_handler:0000000000000cb0 $d
       stm32eforth.s:1781   .text.reset_handler:0000000000000cb4 $t
       stm32eforth.s:1786   .text.reset_handler:0000000000000cb8 $d
       stm32eforth.s:1787   .text.reset_handler:0000000000000cbc _DEPTH
       stm32eforth.s:1789   .text.reset_handler:0000000000000cc2 $t
       stm32eforth.s:1790   .text.reset_handler:0000000000000cc4 DEPTH
       stm32eforth.s:1802   .text.reset_handler:0000000000000cde $d
       stm32eforth.s:1803   .text.reset_handler:0000000000000ce2 _PICK
       stm32eforth.s:1806   .text.reset_handler:0000000000000ce8 PICK
       stm32eforth.s:1821   .text.reset_handler:0000000000000d04 $d
       stm32eforth.s:1822   .text.reset_handler:0000000000000d08 _HERE
       stm32eforth.s:1825   .text.reset_handler:0000000000000d10 HERE
       stm32eforth.s:1834   .text.reset_handler:0000000000000d20 $d
       stm32eforth.s:1835   .text.reset_handler:0000000000000d24 _PAD
       stm32eforth.s:1837   .text.reset_handler:0000000000000d28 $t
       stm32eforth.s:1838   .text.reset_handler:0000000000000d28 PAD
       stm32eforth.s:1847   .text.reset_handler:0000000000000d38 $d
ARM GAS  stm32eforth.s 			page 89


       stm32eforth.s:1848   .text.reset_handler:0000000000000d3c _TIB
       stm32eforth.s:1850   .text.reset_handler:0000000000000d40 $t
       stm32eforth.s:1851   .text.reset_handler:0000000000000d40 TIB
       stm32eforth.s:1859   .text.reset_handler:0000000000000d48 $d
       stm32eforth.s:1860   .text.reset_handler:0000000000000d4c _ATEXE
       stm32eforth.s:1863   .text.reset_handler:0000000000000d58 ATEXE
       stm32eforth.s:1875   .text.reset_handler:0000000000000d6a $d
       stm32eforth.s:1876   .text.reset_handler:0000000000000d6e _CMOVE
       stm32eforth.s:1878   .text.reset_handler:0000000000000d74 $t
       stm32eforth.s:1879   .text.reset_handler:0000000000000d74 CMOVE
       stm32eforth.s:1886   .text.reset_handler:0000000000000d86 CMOV1
       stm32eforth.s:1883   .text.reset_handler:0000000000000d7e CMOV0
       stm32eforth.s:1891   .text.reset_handler:0000000000000d90 CMOV2
       stm32eforth.s:1898   .text.reset_handler:0000000000000d96 $d
       stm32eforth.s:1899   .text.reset_handler:0000000000000d9a _MOVE
       stm32eforth.s:1902   .text.reset_handler:0000000000000da0 MOVE
       stm32eforth.s:1910   .text.reset_handler:0000000000000db6 MOVE1
       stm32eforth.s:1907   .text.reset_handler:0000000000000dae MOVE0
       stm32eforth.s:1915   .text.reset_handler:0000000000000dc0 MOVE2
       stm32eforth.s:1922   .text.reset_handler:0000000000000dc6 $d
       stm32eforth.s:1923   .text.reset_handler:0000000000000dca _FILL
       stm32eforth.s:1926   .text.reset_handler:0000000000000dd0 FILL
       stm32eforth.s:1929   .text.reset_handler:0000000000000dd8 FILL0
       stm32eforth.s:1932   .text.reset_handler:0000000000000ddc FILL1
       stm32eforth.s:1938   .text.reset_handler:0000000000000dea FILL2
       stm32eforth.s:1945   .text.reset_handler:0000000000000df0 $d
       stm32eforth.s:1946   .text.reset_handler:0000000000000df4 _PACKS
       stm32eforth.s:1949   .text.reset_handler:0000000000000dfc PACKS
       stm32eforth.s:1958   .text.reset_handler:0000000000000e1c $d
       stm32eforth.s:1959   .text.reset_handler:0000000000000e20 $t
       stm32eforth.s:1961   .text.reset_handler:0000000000000e28 $d
       stm32eforth.s:1962   .text.reset_handler:0000000000000e2c $t
       stm32eforth.s:1979   .text.reset_handler:0000000000000e54 $d
       stm32eforth.s:1980   .text.reset_handler:0000000000000e58 _DIGIT
       stm32eforth.s:1982   .text.reset_handler:0000000000000e5e $t
       stm32eforth.s:1983   .text.reset_handler:0000000000000e60 DIGIT
       stm32eforth.s:1986   .text.reset_handler:0000000000000e68 $d
       stm32eforth.s:1987   .text.reset_handler:0000000000000e6c $t
       stm32eforth.s:1997   .text.reset_handler:0000000000000e84 $d
       stm32eforth.s:1998   .text.reset_handler:0000000000000e88 _EXTRC
       stm32eforth.s:2000   .text.reset_handler:0000000000000e90 $t
       stm32eforth.s:2001   .text.reset_handler:0000000000000e90 EXTRC
       stm32eforth.s:2004   .text.reset_handler:0000000000000e98 $d
       stm32eforth.s:2005   .text.reset_handler:0000000000000e9c $t
       stm32eforth.s:2014   .text.reset_handler:0000000000000eb0 $d
       stm32eforth.s:2015   .text.reset_handler:0000000000000eb4 _BDIGS
       stm32eforth.s:2018   .text.reset_handler:0000000000000eb8 BDIGS
       stm32eforth.s:2028   .text.reset_handler:0000000000000ecc $d
       stm32eforth.s:2029   .text.reset_handler:0000000000000ed0 _HOLD
       stm32eforth.s:2032   .text.reset_handler:0000000000000ed8 HOLD
       stm32eforth.s:2046   .text.reset_handler:0000000000000efc $d
       stm32eforth.s:2047   .text.reset_handler:0000000000000f00 _DIG
       stm32eforth.s:2049   .text.reset_handler:0000000000000f02 $t
       stm32eforth.s:2050   .text.reset_handler:0000000000000f04 DIG
       stm32eforth.s:2061   .text.reset_handler:0000000000000f1c $d
       stm32eforth.s:2062   .text.reset_handler:0000000000000f20 _DIGS
       stm32eforth.s:2065   .text.reset_handler:0000000000000f24 DIGS
ARM GAS  stm32eforth.s 			page 90


       stm32eforth.s:2067   .text.reset_handler:0000000000000f28 DIGS1
       stm32eforth.s:2071   .text.reset_handler:0000000000000f34 $d
       stm32eforth.s:2073   .text.reset_handler:0000000000000f3a DIGS2
       stm32eforth.s:2072   .text.reset_handler:0000000000000f38 $t
       stm32eforth.s:2079   .text.reset_handler:0000000000000f3e $d
       stm32eforth.s:2080   .text.reset_handler:0000000000000f42 _SIGN
       stm32eforth.s:2083   .text.reset_handler:0000000000000f48 SIGN
       stm32eforth.s:2087   .text.reset_handler:0000000000000f54 $d
       stm32eforth.s:2091   .text.reset_handler:0000000000000f64 SIGN1
       stm32eforth.s:2088   .text.reset_handler:0000000000000f58 $t
       stm32eforth.s:2089   .text.reset_handler:0000000000000f5c $d
       stm32eforth.s:2090   .text.reset_handler:0000000000000f60 $t
       stm32eforth.s:2097   .text.reset_handler:0000000000000f68 $d
       stm32eforth.s:2098   .text.reset_handler:0000000000000f6c _EDIGS
       stm32eforth.s:2101   .text.reset_handler:0000000000000f70 EDIGS
       stm32eforth.s:2118   .text.reset_handler:0000000000000f90 STRR
       stm32eforth.s:2133   .text.reset_handler:0000000000000fb8 $d
       stm32eforth.s:2134   .text.reset_handler:0000000000000fbc _HEX
       stm32eforth.s:2136   .text.reset_handler:0000000000000fc0 $t
       stm32eforth.s:2137   .text.reset_handler:0000000000000fc0 HEX
       stm32eforth.s:2140   .text.reset_handler:0000000000000fc8 $d
       stm32eforth.s:2141   .text.reset_handler:0000000000000fcc $t
       stm32eforth.s:2148   .text.reset_handler:0000000000000fd8 $d
       stm32eforth.s:2149   .text.reset_handler:0000000000000fdc _DECIM
       stm32eforth.s:2151   .text.reset_handler:0000000000000fe4 $t
       stm32eforth.s:2152   .text.reset_handler:0000000000000fe4 DECIM
       stm32eforth.s:2155   .text.reset_handler:0000000000000fec $d
       stm32eforth.s:2156   .text.reset_handler:0000000000000ff0 $t
       stm32eforth.s:2166   .text.reset_handler:0000000000000ffc $d
       stm32eforth.s:2167   .text.reset_handler:0000000000001000 _DIGTQ
       stm32eforth.s:2170   .text.reset_handler:0000000000001008 DIGTQ
       stm32eforth.s:2174   .text.reset_handler:0000000000001014 $d
       stm32eforth.s:2175   .text.reset_handler:0000000000001018 $t
       stm32eforth.s:2177   .text.reset_handler:0000000000001020 $d
       stm32eforth.s:2178   .text.reset_handler:0000000000001024 $t
       stm32eforth.s:2181   .text.reset_handler:0000000000001030 $d
       stm32eforth.s:2190   .text.reset_handler:0000000000001054 DGTQ1
       stm32eforth.s:2182   .text.reset_handler:0000000000001034 $t
       stm32eforth.s:2183   .text.reset_handler:0000000000001038 $d
       stm32eforth.s:2184   .text.reset_handler:000000000000103c $t
       stm32eforth.s:2187   .text.reset_handler:0000000000001048 $d
       stm32eforth.s:2188   .text.reset_handler:000000000000104c $t
       stm32eforth.s:2199   .text.reset_handler:0000000000001064 $d
       stm32eforth.s:2200   .text.reset_handler:0000000000001068 _NUMBQ
       stm32eforth.s:2202   .text.reset_handler:0000000000001070 $t
       stm32eforth.s:2203   .text.reset_handler:0000000000001070 NUMBQ
       stm32eforth.s:2209   .text.reset_handler:0000000000001084 $d
       stm32eforth.s:2210   .text.reset_handler:0000000000001088 $t
       stm32eforth.s:2215   .text.reset_handler:000000000000109c $d
       stm32eforth.s:2216   .text.reset_handler:00000000000010a0 $t
       stm32eforth.s:2218   .text.reset_handler:00000000000010a8 $d
       stm32eforth.s:2224   .text.reset_handler:00000000000010c0 NUMQ1
       stm32eforth.s:2219   .text.reset_handler:00000000000010ac $t
       stm32eforth.s:2228   .text.reset_handler:00000000000010cc $d
       stm32eforth.s:2229   .text.reset_handler:00000000000010d0 $t
       stm32eforth.s:2239   .text.reset_handler:00000000000010f8 $d
       stm32eforth.s:2278   .text.reset_handler:0000000000001184 NUMQ6
ARM GAS  stm32eforth.s 			page 91


       stm32eforth.s:2240   .text.reset_handler:00000000000010fc $t
       stm32eforth.s:2242   .text.reset_handler:0000000000001104 NUMQ2
       stm32eforth.s:2250   .text.reset_handler:0000000000001120 $d
       stm32eforth.s:2269   .text.reset_handler:0000000000001168 NUMQ4
       stm32eforth.s:2251   .text.reset_handler:0000000000001124 $t
       stm32eforth.s:2259   .text.reset_handler:0000000000001144 $d
       stm32eforth.s:2260   .text.reset_handler:0000000000001148 $t
       stm32eforth.s:2264   .text.reset_handler:0000000000001158 $d
       stm32eforth.s:2266   .text.reset_handler:0000000000001160 NUMQ3
       stm32eforth.s:2265   .text.reset_handler:000000000000115c $t
       stm32eforth.s:2276   .text.reset_handler:0000000000001180 NUMQ5
       stm32eforth.s:2275   .text.reset_handler:000000000000117c $d
       stm32eforth.s:2277   .text.reset_handler:0000000000001180 $t
       stm32eforth.s:2292   .text.reset_handler:000000000000119c $d
       stm32eforth.s:2293   .text.reset_handler:00000000000011a0 _KEY
       stm32eforth.s:2295   .text.reset_handler:00000000000011a4 $t
       stm32eforth.s:2296   .text.reset_handler:00000000000011a4 KEY
       stm32eforth.s:2298   .text.reset_handler:00000000000011a8 KEY1
       stm32eforth.s:2301   .text.reset_handler:00000000000011b0 $d
       stm32eforth.s:2303   .text.reset_handler:00000000000011b4 $t
       stm32eforth.s:2305   .text.reset_handler:00000000000011bc $d
       stm32eforth.s:2306   .text.reset_handler:00000000000011c0 $t
       stm32eforth.s:2309   .text.reset_handler:00000000000011cc $d
       stm32eforth.s:2310   .text.reset_handler:00000000000011d0 $t
       stm32eforth.s:2315   .text.reset_handler:00000000000011d4 $d
       stm32eforth.s:2316   .text.reset_handler:00000000000011d8 _SPACE
       stm32eforth.s:2318   .text.reset_handler:00000000000011de $t
       stm32eforth.s:2319   .text.reset_handler:00000000000011e0 SPACE
       stm32eforth.s:2328   .text.reset_handler:00000000000011f0 $d
       stm32eforth.s:2329   .text.reset_handler:00000000000011f4 _SPACS
       stm32eforth.s:2332   .text.reset_handler:00000000000011fc SPACS
       stm32eforth.s:2335   .text.reset_handler:0000000000001204 $d
       stm32eforth.s:2336   .text.reset_handler:0000000000001208 $t
       stm32eforth.s:2341   .text.reset_handler:0000000000001218 CHAR2
       stm32eforth.s:2339   .text.reset_handler:0000000000001214 CHAR1
       stm32eforth.s:2343   .text.reset_handler:000000000000121c $d
       stm32eforth.s:2344   .text.reset_handler:0000000000001220 $t
       stm32eforth.s:2349   .text.reset_handler:0000000000001224 $d
       stm32eforth.s:2350   .text.reset_handler:0000000000001228 _TYPEE
       stm32eforth.s:2353   .text.reset_handler:0000000000001230 TYPEE
       stm32eforth.s:2361   .text.reset_handler:0000000000001246 TYPE2
       stm32eforth.s:2357   .text.reset_handler:000000000000123a TYPE1
       stm32eforth.s:2363   .text.reset_handler:000000000000124a $d
       stm32eforth.s:2364   .text.reset_handler:000000000000124e $t
       stm32eforth.s:2370   .text.reset_handler:0000000000001256 $d
       stm32eforth.s:2371   .text.reset_handler:000000000000125a _CR
       stm32eforth.s:2377   .text.reset_handler:0000000000001268 $d
       stm32eforth.s:2378   .text.reset_handler:000000000000126c $t
       stm32eforth.s:2380   .text.reset_handler:0000000000001274 $d
       stm32eforth.s:2381   .text.reset_handler:0000000000001278 $t
       stm32eforth.s:2392   .text.reset_handler:0000000000001280 DOSTR
       stm32eforth.s:2415   .text.reset_handler:00000000000012b4 STRQP
       stm32eforth.s:2427   .text.reset_handler:00000000000012c0 DOTST
       stm32eforth.s:2449   .text.reset_handler:00000000000012e0 $d
       stm32eforth.s:2450   .text.reset_handler:00000000000012e4 _DOTR
       stm32eforth.s:2453   .text.reset_handler:00000000000012e8 DOTR
       stm32eforth.s:2467   .text.reset_handler:000000000000130c $d
ARM GAS  stm32eforth.s 			page 92


       stm32eforth.s:2468   .text.reset_handler:0000000000001310 _UDOTR
       stm32eforth.s:2470   .text.reset_handler:0000000000001314 $t
       stm32eforth.s:2471   .text.reset_handler:0000000000001314 UDOTR
       stm32eforth.s:2487   .text.reset_handler:0000000000001340 $d
       stm32eforth.s:2488   .text.reset_handler:0000000000001344 _UDOT
       stm32eforth.s:2491   .text.reset_handler:0000000000001348 UDOT
       stm32eforth.s:2503   .text.reset_handler:0000000000001364 $d
       stm32eforth.s:2504   .text.reset_handler:0000000000001368 _DOT
       stm32eforth.s:2506   .text.reset_handler:000000000000136a $t
       stm32eforth.s:2507   .text.reset_handler:000000000000136c DOT
       stm32eforth.s:2512   .text.reset_handler:000000000000137c $d
       stm32eforth.s:2513   .text.reset_handler:0000000000001380 $t
       stm32eforth.s:2515   .text.reset_handler:0000000000001388 $d
       stm32eforth.s:2518   .text.reset_handler:0000000000001394 DOT1
       stm32eforth.s:2516   .text.reset_handler:000000000000138c $t
       stm32eforth.s:2527   .text.reset_handler:00000000000013a4 $d
       stm32eforth.s:2528   .text.reset_handler:00000000000013a8 _QUEST
       stm32eforth.s:2530   .text.reset_handler:00000000000013aa $t
       stm32eforth.s:2531   .text.reset_handler:00000000000013ac QUEST
       stm32eforth.s:2547   .text.reset_handler:00000000000013bc PARS
       stm32eforth.s:2555   .text.reset_handler:00000000000013d8 $d
       stm32eforth.s:2623   .text.reset_handler:00000000000014ca PARS8
       stm32eforth.s:2556   .text.reset_handler:00000000000013dc $t
       stm32eforth.s:2562   .text.reset_handler:00000000000013f4 $d
       stm32eforth.s:2584   .text.reset_handler:0000000000001444 PARS3
       stm32eforth.s:2563   .text.reset_handler:00000000000013f8 $t
       stm32eforth.s:2564   .text.reset_handler:00000000000013fc PARS1
       stm32eforth.s:2572   .text.reset_handler:0000000000001418 $d
       stm32eforth.s:2582   .text.reset_handler:0000000000001440 PARS2
       stm32eforth.s:2573   .text.reset_handler:000000000000141c $t
       stm32eforth.s:2575   .text.reset_handler:0000000000001424 $d
       stm32eforth.s:2576   .text.reset_handler:0000000000001428 $t
       stm32eforth.s:2579   .text.reset_handler:0000000000001434 $d
       stm32eforth.s:2580   .text.reset_handler:0000000000001438 $t
       stm32eforth.s:2588   .text.reset_handler:0000000000001450 PARS4
       stm32eforth.s:2599   .text.reset_handler:0000000000001478 $d
       stm32eforth.s:2601   .text.reset_handler:0000000000001480 PARS5
       stm32eforth.s:2600   .text.reset_handler:000000000000147c $t
       stm32eforth.s:2603   .text.reset_handler:0000000000001484 $d
       stm32eforth.s:2610   .text.reset_handler:000000000000149e PARS6
       stm32eforth.s:2604   .text.reset_handler:0000000000001488 $t
       stm32eforth.s:2606   .text.reset_handler:0000000000001490 $d
       stm32eforth.s:2607   .text.reset_handler:0000000000001494 $t
       stm32eforth.s:2616   .text.reset_handler:00000000000014b2 PARS7
       stm32eforth.s:2632   .text.reset_handler:00000000000014da $d
       stm32eforth.s:2633   .text.reset_handler:00000000000014de _PARSE
       stm32eforth.s:2635   .text.reset_handler:00000000000014e4 $t
       stm32eforth.s:2636   .text.reset_handler:00000000000014e4 PARSE
       stm32eforth.s:2657   .text.reset_handler:0000000000001524 $d
       stm32eforth.s:2658   .text.reset_handler:0000000000001528 _DOTPR
       stm32eforth.s:2661   .text.reset_handler:000000000000152c DOTPR
       stm32eforth.s:2664   .text.reset_handler:0000000000001534 $d
       stm32eforth.s:2665   .text.reset_handler:0000000000001538 $t
       stm32eforth.s:2672   .text.reset_handler:0000000000001544 $d
       stm32eforth.s:2673   .text.reset_handler:0000000000001548 _PAREN
       stm32eforth.s:2675   .text.reset_handler:000000000000154a $t
       stm32eforth.s:2676   .text.reset_handler:000000000000154c PAREN
ARM GAS  stm32eforth.s 			page 93


       stm32eforth.s:2679   .text.reset_handler:0000000000001554 $d
       stm32eforth.s:2680   .text.reset_handler:0000000000001558 $t
       stm32eforth.s:2687   .text.reset_handler:0000000000001564 $d
       stm32eforth.s:2688   .text.reset_handler:0000000000001568 _BKSLA
       stm32eforth.s:2690   .text.reset_handler:000000000000156a $t
       stm32eforth.s:2691   .text.reset_handler:000000000000156c BKSLA
       stm32eforth.s:2702   .text.reset_handler:0000000000001584 $d
       stm32eforth.s:2703   .text.reset_handler:0000000000001588 _CHAR
       stm32eforth.s:2706   .text.reset_handler:0000000000001590 CHAR
       stm32eforth.s:2717   .text.reset_handler:00000000000015a8 $d
       stm32eforth.s:2718   .text.reset_handler:00000000000015ac _WORDD
       stm32eforth.s:2721   .text.reset_handler:00000000000015b4 WORDD
       stm32eforth.s:2732   .text.reset_handler:00000000000015cc $d
       stm32eforth.s:2733   .text.reset_handler:00000000000015d0 _TOKEN
       stm32eforth.s:2735   .text.reset_handler:00000000000015d6 $t
       stm32eforth.s:2736   .text.reset_handler:00000000000015d8 TOKEN
       stm32eforth.s:2748   .text.reset_handler:00000000000015e8 $d
       stm32eforth.s:2749   .text.reset_handler:00000000000015ec _NAMET
       stm32eforth.s:2751   .text.reset_handler:00000000000015f2 $t
       stm32eforth.s:2752   .text.reset_handler:00000000000015f4 NAMET
       stm32eforth.s:2756   .text.reset_handler:0000000000001600 $d
       stm32eforth.s:2757   .text.reset_handler:0000000000001604 $t
       stm32eforth.s:2770   .text.reset_handler:0000000000001614 $d
       stm32eforth.s:2771   .text.reset_handler:0000000000001618 _SAMEQ
       stm32eforth.s:2773   .text.reset_handler:000000000000161e $t
       stm32eforth.s:2774   .text.reset_handler:0000000000001620 SAMEQ
       stm32eforth.s:2794   .text.reset_handler:0000000000001668 SAME2
       stm32eforth.s:2778   .text.reset_handler:000000000000162c SAME1
       stm32eforth.s:2790   .text.reset_handler:0000000000001658 $d
       stm32eforth.s:2791   .text.reset_handler:000000000000165c $t
       stm32eforth.s:2796   .text.reset_handler:000000000000166c $d
       stm32eforth.s:2797   .text.reset_handler:0000000000001670 $t
       stm32eforth.s:2798   .text.reset_handler:0000000000001674 $d
       stm32eforth.s:2799   .text.reset_handler:0000000000001678 $t
       stm32eforth.s:2811   .text.reset_handler:000000000000167c FIND
       stm32eforth.s:2820   .text.reset_handler:000000000000169c FIND1
       stm32eforth.s:2823   .text.reset_handler:00000000000016a4 $d
       stm32eforth.s:2843   .text.reset_handler:00000000000016ec FIND6
       stm32eforth.s:2824   .text.reset_handler:00000000000016a8 $t
       stm32eforth.s:2827   .text.reset_handler:00000000000016b4 $d
       stm32eforth.s:2828   .text.reset_handler:00000000000016b8 $t
       stm32eforth.s:2832   .text.reset_handler:00000000000016c8 $d
       stm32eforth.s:2836   .text.reset_handler:00000000000016d8 FIND2
       stm32eforth.s:2833   .text.reset_handler:00000000000016cc $t
       stm32eforth.s:2841   .text.reset_handler:00000000000016e8 FIND3
       stm32eforth.s:2850   .text.reset_handler:0000000000001704 FIND4
       stm32eforth.s:2852   .text.reset_handler:0000000000001708 $d
       stm32eforth.s:2857   .text.reset_handler:000000000000171c FIND5
       stm32eforth.s:2853   .text.reset_handler:000000000000170c $t
       stm32eforth.s:2871   .text.reset_handler:0000000000001740 $d
       stm32eforth.s:2872   .text.reset_handler:0000000000001744 _NAMEQ
       stm32eforth.s:2874   .text.reset_handler:000000000000174a $t
       stm32eforth.s:2875   .text.reset_handler:000000000000174c NAMEQ
       stm32eforth.s:2892   .text.reset_handler:0000000000001760 BKSP
       stm32eforth.s:2901   .text.reset_handler:0000000000001780 $d
       stm32eforth.s:2914   .text.reset_handler:00000000000017a8 BACK1
       stm32eforth.s:2902   .text.reset_handler:0000000000001784 $t
ARM GAS  stm32eforth.s 			page 94


       stm32eforth.s:2903   .text.reset_handler:0000000000001788 $d
       stm32eforth.s:2904   .text.reset_handler:000000000000178c $t
       stm32eforth.s:2911   .text.reset_handler:00000000000017a0 $d
       stm32eforth.s:2912   .text.reset_handler:00000000000017a4 $t
       stm32eforth.s:2924   .text.reset_handler:00000000000017ac TAP
       stm32eforth.s:2941   .text.reset_handler:00000000000017c8 KTAP
       stm32eforth.s:2942   .text.reset_handler:00000000000017c8 TTAP
       stm32eforth.s:2946   .text.reset_handler:00000000000017d4 $d
       stm32eforth.s:2947   .text.reset_handler:00000000000017d8 $t
       stm32eforth.s:2949   .text.reset_handler:00000000000017e0 $d
       stm32eforth.s:2962   .text.reset_handler:0000000000001810 KTAP2
       stm32eforth.s:2950   .text.reset_handler:00000000000017e4 $t
       stm32eforth.s:2951   .text.reset_handler:00000000000017e8 $d
       stm32eforth.s:2952   .text.reset_handler:00000000000017ec $t
       stm32eforth.s:2954   .text.reset_handler:00000000000017f4 $d
       stm32eforth.s:2959   .text.reset_handler:0000000000001808 KTAP1
       stm32eforth.s:2955   .text.reset_handler:00000000000017f8 $t
       stm32eforth.s:2958   .text.reset_handler:0000000000001804 $d
       stm32eforth.s:2960   .text.reset_handler:0000000000001808 $t
       stm32eforth.s:2972   .text.reset_handler:0000000000001824 $d
       stm32eforth.s:2973   .text.reset_handler:0000000000001828 _ACCEP
       stm32eforth.s:2976   .text.reset_handler:0000000000001830 ACCEP
       stm32eforth.s:2981   .text.reset_handler:0000000000001840 ACCP1
       stm32eforth.s:2985   .text.reset_handler:000000000000184c $d
       stm32eforth.s:3001   .text.reset_handler:000000000000187c ACCP4
       stm32eforth.s:2986   .text.reset_handler:0000000000001850 $t
       stm32eforth.s:2990   .text.reset_handler:0000000000001860 $d
       stm32eforth.s:2991   .text.reset_handler:0000000000001864 $t
       stm32eforth.s:2993   .text.reset_handler:000000000000186c $d
       stm32eforth.s:2996   .text.reset_handler:0000000000001876 ACCP2
       stm32eforth.s:2994   .text.reset_handler:0000000000001870 $t
       stm32eforth.s:2999   .text.reset_handler:000000000000187a ACCP3
       stm32eforth.s:3010   .text.reset_handler:000000000000188c $d
       stm32eforth.s:3011   .text.reset_handler:0000000000001890 _QUERY
       stm32eforth.s:3013   .text.reset_handler:0000000000001896 $t
       stm32eforth.s:3014   .text.reset_handler:0000000000001898 QUERY
       stm32eforth.s:3018   .text.reset_handler:00000000000018a4 $d
       stm32eforth.s:3019   .text.reset_handler:00000000000018a8 $t
       stm32eforth.s:3024   .text.reset_handler:00000000000018bc $d
       stm32eforth.s:3025   .text.reset_handler:00000000000018c0 $t
       stm32eforth.s:3035   .text.reset_handler:00000000000018cc $d
       stm32eforth.s:3036   .text.reset_handler:00000000000018d0 _ABORT
       stm32eforth.s:3038   .text.reset_handler:00000000000018d6 $t
       stm32eforth.s:3039   .text.reset_handler:00000000000018d8 ABORT
       stm32eforth.s:3045   .text.reset_handler:00000000000018ec $d
       stm32eforth.s:3046   .text.reset_handler:00000000000018f0 $t
       stm32eforth.s:3192   .text.reset_handler:0000000000001a60 PRESE
       stm32eforth.s:3207   .text.reset_handler:0000000000001a78 QUIT
       stm32eforth.s:3058   .text.reset_handler:0000000000001900 ABORQ
       stm32eforth.s:3061   .text.reset_handler:0000000000001908 $d
       stm32eforth.s:3067   .text.reset_handler:0000000000001920 ABOR1
       stm32eforth.s:3062   .text.reset_handler:000000000000190c $t
       stm32eforth.s:3078   .text.reset_handler:000000000000192c $d
       stm32eforth.s:3079   .text.reset_handler:0000000000001930 _INTER
       stm32eforth.s:3081   .text.reset_handler:000000000000193c $t
       stm32eforth.s:3087   .text.reset_handler:000000000000194c $d
       stm32eforth.s:3098   .text.reset_handler:000000000000197c INTE1
ARM GAS  stm32eforth.s 			page 95


       stm32eforth.s:3088   .text.reset_handler:0000000000001950 $t
       stm32eforth.s:3090   .text.reset_handler:0000000000001958 $d
       stm32eforth.s:3091   .text.reset_handler:000000000000195c $t
       stm32eforth.s:3093   .text.reset_handler:0000000000001964 $d
       stm32eforth.s:3095   .text.reset_handler:0000000000001972 $t
       stm32eforth.s:3101   .text.reset_handler:0000000000001984 $d
       stm32eforth.s:3103   .text.reset_handler:000000000000198c INTE2
       stm32eforth.s:3102   .text.reset_handler:0000000000001988 $t
       stm32eforth.s:3109   .text.reset_handler:0000000000001990 $d
       stm32eforth.s:3110   .text.reset_handler:0000000000001994 _LBRAC
       stm32eforth.s:3112   .text.reset_handler:0000000000001996 $t
       stm32eforth.s:3113   .text.reset_handler:0000000000001998 LBRAC
       stm32eforth.s:3116   .text.reset_handler:00000000000019a0 $d
       stm32eforth.s:3117   .text.reset_handler:00000000000019a4 $t
       stm32eforth.s:3124   .text.reset_handler:00000000000019b0 $d
       stm32eforth.s:3125   .text.reset_handler:00000000000019b4 _DOTOK
       stm32eforth.s:3127   .text.reset_handler:00000000000019b8 $t
       stm32eforth.s:3128   .text.reset_handler:00000000000019b8 DOTOK
       stm32eforth.s:3131   .text.reset_handler:00000000000019c0 $d
       stm32eforth.s:3132   .text.reset_handler:00000000000019c4 $t
       stm32eforth.s:3136   .text.reset_handler:00000000000019d4 $d
       stm32eforth.s:3140   .text.reset_handler:00000000000019e0 DOTO1
       stm32eforth.s:3137   .text.reset_handler:00000000000019d8 $t
       stm32eforth.s:3138   .text.reset_handler:00000000000019dc $d
       stm32eforth.s:3141   .text.reset_handler:00000000000019e0 $t
       stm32eforth.s:3147   .text.reset_handler:00000000000019e8 $d
       stm32eforth.s:3148   .text.reset_handler:00000000000019ec _QSTAC
       stm32eforth.s:3151   .text.reset_handler:00000000000019f4 QSTAC
       stm32eforth.s:3156   .text.reset_handler:0000000000001a04 $d
       stm32eforth.s:3164   .text.reset_handler:0000000000001a14 $d
       stm32eforth.s:3165   .text.reset_handler:0000000000001a18 _EVAL
       stm32eforth.s:3168   .text.reset_handler:0000000000001a20 EVAL
       stm32eforth.s:3170   .text.reset_handler:0000000000001a24 EVAL1
       stm32eforth.s:3175   .text.reset_handler:0000000000001a34 $d
       stm32eforth.s:3180   .text.reset_handler:0000000000001a48 EVAL2
       stm32eforth.s:3176   .text.reset_handler:0000000000001a38 $t
       stm32eforth.s:3188   .text.reset_handler:0000000000001a54 $d
       stm32eforth.s:3189   .text.reset_handler:0000000000001a58 _PRESE
       stm32eforth.s:3203   .text.reset_handler:0000000000001a6e $d
       stm32eforth.s:3204   .text.reset_handler:0000000000001a72 _QUIT
       stm32eforth.s:3211   .text.reset_handler:0000000000001a84 QUIT1
       stm32eforth.s:3213   .text.reset_handler:0000000000001a88 QUIT2
       stm32eforth.s:3217   .text.reset_handler:0000000000001a94 $d
       stm32eforth.s:3226   .text.reset_handler:0000000000001a9c _UNLOCK
       stm32eforth.s:3229   .text.reset_handler:0000000000001aa4 UNLOCK
       stm32eforth.s:3231   .text.reset_handler:0000000000001aa8 $d
       stm32eforth.s:3238   .text.reset_handler:0000000000001aba UNLOCK1
       stm32eforth.s:3232   .text.reset_handler:0000000000001aac LOCK
       stm32eforth.s:3233   .text.reset_handler:0000000000001aac $t
       stm32eforth.s:3251   .text.reset_handler:0000000000001ad8 WAIT_BSY
       stm32eforth.s:3253   .text.reset_handler:0000000000001adc WAIT1
       stm32eforth.s:3264   .text.reset_handler:0000000000001ae6 $d
       stm32eforth.s:3265   .text.reset_handler:0000000000001aea _ESECT
       stm32eforth.s:3269   .text.reset_handler:0000000000001af8 ESECT
       stm32eforth.s:3287   .text.reset_handler:0000000000001b24 $d
       stm32eforth.s:3288   .text.reset_handler:0000000000001b28 _ISTOR
       stm32eforth.s:3292   .text.reset_handler:0000000000001b2c ISTOR
ARM GAS  stm32eforth.s 			page 96


       stm32eforth.s:3308   .text.reset_handler:0000000000001b50 $d
       stm32eforth.s:3309   .text.reset_handler:0000000000001b54 _TURN
       stm32eforth.s:3311   .text.reset_handler:0000000000001b5c $t
       stm32eforth.s:3312   .text.reset_handler:0000000000001b5c TURN
       stm32eforth.s:3314   .text.reset_handler:0000000000001b64 $d
       stm32eforth.s:3315   .text.reset_handler:0000000000001b68 $t
       stm32eforth.s:3316   .text.reset_handler:0000000000001b6c $d
       stm32eforth.s:3317   .text.reset_handler:0000000000001b70 $t
       stm32eforth.s:3318   .text.reset_handler:0000000000001b74 $d
       stm32eforth.s:3319   .text.reset_handler:0000000000001b78 $t
       stm32eforth.s:3321   .text.reset_handler:0000000000001b80 $d
       stm32eforth.s:3322   .text.reset_handler:0000000000001b84 $t
       stm32eforth.s:3323   .text.reset_handler:0000000000001b88 $d
       stm32eforth.s:3324   .text.reset_handler:0000000000001b8c $t
       stm32eforth.s:3328   .text.reset_handler:0000000000001b9c TURN1
       stm32eforth.s:3338   .text.reset_handler:0000000000001bc0 $d
       stm32eforth.s:3339   .text.reset_handler:0000000000001bc4 $t
       stm32eforth.s:3348   .text.reset_handler:0000000000001bcc $d
       stm32eforth.s:3349   .text.reset_handler:0000000000001bd0 _TICK
       stm32eforth.s:3351   .text.reset_handler:0000000000001bd2 $t
       stm32eforth.s:3352   .text.reset_handler:0000000000001bd4 TICK
       stm32eforth.s:3357   .text.reset_handler:0000000000001be4 $d
       stm32eforth.s:3359   .text.reset_handler:0000000000001bec TICK1
       stm32eforth.s:3358   .text.reset_handler:0000000000001be8 $t
       stm32eforth.s:3364   .text.reset_handler:0000000000001bf0 $d
       stm32eforth.s:3365   .text.reset_handler:0000000000001bf4 _ALLOT
       stm32eforth.s:3367   .text.reset_handler:0000000000001bfa $t
       stm32eforth.s:3368   .text.reset_handler:0000000000001bfc ALLOT
       stm32eforth.s:3377   .text.reset_handler:0000000000001c0c $d
       stm32eforth.s:3378   .text.reset_handler:0000000000001c10 _COMMA
       stm32eforth.s:3379   .text.reset_handler:0000000000001c12 $t
       stm32eforth.s:3380   .text.reset_handler:0000000000001c14 COMMA
       stm32eforth.s:3393   .text.reset_handler:0000000000001c34 $d
       stm32eforth.s:3394   .text.reset_handler:0000000000001c38 _BCOMP
       stm32eforth.s:3396   .text.reset_handler:0000000000001c42 $t
       stm32eforth.s:3397   .text.reset_handler:0000000000001c44 BCOMP
       stm32eforth.s:3406   .text.reset_handler:0000000000001c54 $d
       stm32eforth.s:3407   .text.reset_handler:0000000000001c58 _COMPI
       stm32eforth.s:3409   .text.reset_handler:0000000000001c60 $t
       stm32eforth.s:3410   .text.reset_handler:0000000000001c60 COMPI
       stm32eforth.s:3825   .text.reset_handler:000000000000202c CALLC
       stm32eforth.s:3425   .text.reset_handler:0000000000001c88 $d
       stm32eforth.s:3426   .text.reset_handler:0000000000001c8c _LITER
       stm32eforth.s:3428   .text.reset_handler:0000000000001c94 $t
       stm32eforth.s:3429   .text.reset_handler:0000000000001c94 LITER
       stm32eforth.s:3432   .text.reset_handler:0000000000001c9c $d
       stm32eforth.s:3433   .text.reset_handler:0000000000001ca0 $t
       stm32eforth.s:3443   .text.reset_handler:0000000000001ca8 STRCQ
       stm32eforth.s:3446   .text.reset_handler:0000000000001cb0 $d
       stm32eforth.s:3447   .text.reset_handler:0000000000001cb4 $t
       stm32eforth.s:3450   .text.reset_handler:0000000000001cc0 $d
       stm32eforth.s:3451   .text.reset_handler:0000000000001cc4 $t
       stm32eforth.s:3465   .text.reset_handler:0000000000001ce0 $d
       stm32eforth.s:3466   .text.reset_handler:0000000000001ce4 _FOR
       stm32eforth.s:3468   .text.reset_handler:0000000000001ce8 $t
       stm32eforth.s:3469   .text.reset_handler:0000000000001ce8 FOR
       stm32eforth.s:3472   .text.reset_handler:0000000000001cf0 $d
ARM GAS  stm32eforth.s 			page 97


       stm32eforth.s:3473   .text.reset_handler:0000000000001cf4 $t
       stm32eforth.s:3479   .text.reset_handler:0000000000001cfc $d
       stm32eforth.s:3480   .text.reset_handler:0000000000001d00 _BEGIN
       stm32eforth.s:3482   .text.reset_handler:0000000000001d06 $t
       stm32eforth.s:3483   .text.reset_handler:0000000000001d08 BEGIN
       stm32eforth.s:3491   .text.reset_handler:0000000000001d14 $d
       stm32eforth.s:3492   .text.reset_handler:0000000000001d18 _NEXT
       stm32eforth.s:3495   .text.reset_handler:0000000000001d20 NEXT
       stm32eforth.s:3498   .text.reset_handler:0000000000001d28 $d
       stm32eforth.s:3499   .text.reset_handler:0000000000001d2c $t
       stm32eforth.s:3505   .text.reset_handler:0000000000001d34 $d
       stm32eforth.s:3506   .text.reset_handler:0000000000001d38 _UNTIL
       stm32eforth.s:3508   .text.reset_handler:0000000000001d3e $t
       stm32eforth.s:3509   .text.reset_handler:0000000000001d40 UNTIL
       stm32eforth.s:3512   .text.reset_handler:0000000000001d48 $d
       stm32eforth.s:3513   .text.reset_handler:0000000000001d4c $t
       stm32eforth.s:3519   .text.reset_handler:0000000000001d54 $d
       stm32eforth.s:3520   .text.reset_handler:0000000000001d58 _AGAIN
       stm32eforth.s:3522   .text.reset_handler:0000000000001d5e $t
       stm32eforth.s:3523   .text.reset_handler:0000000000001d60 AGAIN
       stm32eforth.s:3526   .text.reset_handler:0000000000001d68 $d
       stm32eforth.s:3527   .text.reset_handler:0000000000001d6c $t
       stm32eforth.s:3533   .text.reset_handler:0000000000001d74 $d
       stm32eforth.s:3534   .text.reset_handler:0000000000001d78 _IFF
       stm32eforth.s:3537   .text.reset_handler:0000000000001d7c IFF
       stm32eforth.s:3540   .text.reset_handler:0000000000001d84 $d
       stm32eforth.s:3541   .text.reset_handler:0000000000001d88 $t
       stm32eforth.s:3543   .text.reset_handler:0000000000001d90 $d
       stm32eforth.s:3544   .text.reset_handler:0000000000001d94 $t
       stm32eforth.s:3551   .text.reset_handler:0000000000001da0 $d
       stm32eforth.s:3552   .text.reset_handler:0000000000001da4 _AHEAD
       stm32eforth.s:3554   .text.reset_handler:0000000000001daa $t
       stm32eforth.s:3555   .text.reset_handler:0000000000001dac AHEAD
       stm32eforth.s:3558   .text.reset_handler:0000000000001db4 $d
       stm32eforth.s:3559   .text.reset_handler:0000000000001db8 $t
       stm32eforth.s:3561   .text.reset_handler:0000000000001dc0 $d
       stm32eforth.s:3562   .text.reset_handler:0000000000001dc4 $t
       stm32eforth.s:3569   .text.reset_handler:0000000000001dd0 $d
       stm32eforth.s:3570   .text.reset_handler:0000000000001dd4 _REPEA
       stm32eforth.s:3573   .text.reset_handler:0000000000001ddc REPEA
       stm32eforth.s:3584   .text.reset_handler:0000000000001df4 $d
       stm32eforth.s:3585   .text.reset_handler:0000000000001df8 _THENN
       stm32eforth.s:3588   .text.reset_handler:0000000000001e00 THENN
       stm32eforth.s:3598   .text.reset_handler:0000000000001e14 $d
       stm32eforth.s:3599   .text.reset_handler:0000000000001e18 _AFT
       stm32eforth.s:3601   .text.reset_handler:0000000000001e1c $t
       stm32eforth.s:3602   .text.reset_handler:0000000000001e1c AFT
       stm32eforth.s:3613   .text.reset_handler:0000000000001e34 $d
       stm32eforth.s:3614   .text.reset_handler:0000000000001e38 _ELSEE
       stm32eforth.s:3617   .text.reset_handler:0000000000001e40 ELSEE
       stm32eforth.s:3627   .text.reset_handler:0000000000001e54 $d
       stm32eforth.s:3628   .text.reset_handler:0000000000001e58 _WHILE
       stm32eforth.s:3630   .text.reset_handler:0000000000001e5e $t
       stm32eforth.s:3631   .text.reset_handler:0000000000001e60 WHILE
       stm32eforth.s:3640   .text.reset_handler:0000000000001e70 $d
       stm32eforth.s:3641   .text.reset_handler:0000000000001e74 _ABRTQ
       stm32eforth.s:3644   .text.reset_handler:0000000000001e7c ABRTQ
ARM GAS  stm32eforth.s 			page 98


       stm32eforth.s:3647   .text.reset_handler:0000000000001e84 $d
       stm32eforth.s:3648   .text.reset_handler:0000000000001e88 $t
       stm32eforth.s:3654   .text.reset_handler:0000000000001e90 $d
       stm32eforth.s:3655   .text.reset_handler:0000000000001e94 _STRQ
       stm32eforth.s:3658   .text.reset_handler:0000000000001e98 STRQ
       stm32eforth.s:3661   .text.reset_handler:0000000000001ea0 $d
       stm32eforth.s:3662   .text.reset_handler:0000000000001ea4 $t
       stm32eforth.s:3668   .text.reset_handler:0000000000001eac $d
       stm32eforth.s:3669   .text.reset_handler:0000000000001eb0 _DOTQ
       stm32eforth.s:3672   .text.reset_handler:0000000000001eb4 DOTQ
       stm32eforth.s:3675   .text.reset_handler:0000000000001ebc $d
       stm32eforth.s:3676   .text.reset_handler:0000000000001ec0 $t
       stm32eforth.s:3685   .text.reset_handler:0000000000001ec8 $d
       stm32eforth.s:3686   .text.reset_handler:0000000000001ecc _UNIQU
       stm32eforth.s:3688   .text.reset_handler:0000000000001ed4 $t
       stm32eforth.s:3689   .text.reset_handler:0000000000001ed4 UNIQU
       stm32eforth.s:3694   .text.reset_handler:0000000000001ee4 $d
       stm32eforth.s:3702   .text.reset_handler:0000000000001f00 UNIQ1
       stm32eforth.s:3695   .text.reset_handler:0000000000001ee8 $t
       stm32eforth.s:3696   .text.reset_handler:0000000000001eec $d
       stm32eforth.s:3698   .text.reset_handler:0000000000001ef4 $t
       stm32eforth.s:3713   .text.reset_handler:0000000000001f08 SNAME
       stm32eforth.s:3718   .text.reset_handler:0000000000001f18 $d
       stm32eforth.s:3732   .text.reset_handler:0000000000001f50 SNAM1
       stm32eforth.s:3719   .text.reset_handler:0000000000001f1c $t
       stm32eforth.s:3734   .text.reset_handler:0000000000001f54 $d
       stm32eforth.s:3736   .text.reset_handler:0000000000001f5c $t
       stm32eforth.s:3741   .text.reset_handler:0000000000001f60 $d
       stm32eforth.s:3742   .text.reset_handler:0000000000001f64 _SCOMP
       stm32eforth.s:3744   .text.reset_handler:0000000000001f6e $t
       stm32eforth.s:3745   .text.reset_handler:0000000000001f70 SCOMP
       stm32eforth.s:3750   .text.reset_handler:0000000000001f80 $d
       stm32eforth.s:3762   .text.reset_handler:0000000000001fac SCOM2
       stm32eforth.s:3751   .text.reset_handler:0000000000001f84 $t
       stm32eforth.s:3753   .text.reset_handler:0000000000001f8c $d
       stm32eforth.s:3754   .text.reset_handler:0000000000001f90 $t
       stm32eforth.s:3756   .text.reset_handler:0000000000001f98 $d
       stm32eforth.s:3759   .text.reset_handler:0000000000001fa4 SCOM1
       stm32eforth.s:3757   .text.reset_handler:0000000000001f9c $t
       stm32eforth.s:3765   .text.reset_handler:0000000000001fb4 $d
       stm32eforth.s:3768   .text.reset_handler:0000000000001fc0 SCOM3
       stm32eforth.s:3766   .text.reset_handler:0000000000001fb8 $t
       stm32eforth.s:3774   .text.reset_handler:0000000000001fc4 $d
       stm32eforth.s:3775   .text.reset_handler:0000000000001fc8 _OVERT
       stm32eforth.s:3777   .text.reset_handler:0000000000001fce $t
       stm32eforth.s:3778   .text.reset_handler:0000000000001fd0 OVERT
       stm32eforth.s:3789   .text.reset_handler:0000000000001fe8 $d
       stm32eforth.s:3790   .text.reset_handler:0000000000001fec _SEMIS
       stm32eforth.s:3792   .text.reset_handler:0000000000001fee $t
       stm32eforth.s:3793   .text.reset_handler:0000000000001ff0 SEMIS
       stm32eforth.s:3805   .text.reset_handler:000000000000200c $d
       stm32eforth.s:3806   .text.reset_handler:0000000000002010 _RBRAC
       stm32eforth.s:3808   .text.reset_handler:0000000000002012 $t
       stm32eforth.s:3809   .text.reset_handler:0000000000002014 RBRAC
       stm32eforth.s:3812   .text.reset_handler:000000000000201c $d
       stm32eforth.s:3813   .text.reset_handler:0000000000002020 $t
       stm32eforth.s:3846   .text.reset_handler:0000000000002066 $d
ARM GAS  stm32eforth.s 			page 99


       stm32eforth.s:3847   .text.reset_handler:000000000000206a _COLON
       stm32eforth.s:3849   .text.reset_handler:000000000000206c $t
       stm32eforth.s:3850   .text.reset_handler:000000000000206c COLON
       stm32eforth.s:3863   .text.reset_handler:000000000000208c $d
       stm32eforth.s:3864   .text.reset_handler:0000000000002090 _IMMED
       stm32eforth.s:3866   .text.reset_handler:000000000000209a $t
       stm32eforth.s:3867   .text.reset_handler:000000000000209c IMMED
       stm32eforth.s:3870   .text.reset_handler:00000000000020a4 $d
       stm32eforth.s:3871   .text.reset_handler:00000000000020a8 $t
       stm32eforth.s:3886   .text.reset_handler:00000000000020c8 $d
       stm32eforth.s:3887   .text.reset_handler:00000000000020cc _CONST
       stm32eforth.s:3890   .text.reset_handler:00000000000020d8 CONST
       stm32eforth.s:3899   .text.reset_handler:00000000000020f8 $d
       stm32eforth.s:3900   .text.reset_handler:00000000000020fc $t
       stm32eforth.s:3907   .text.reset_handler:0000000000002108 $d
       stm32eforth.s:3908   .text.reset_handler:000000000000210c _CREAT
       stm32eforth.s:3911   .text.reset_handler:0000000000002114 CREAT
       stm32eforth.s:3920   .text.reset_handler:0000000000002134 $d
       stm32eforth.s:3921   .text.reset_handler:0000000000002138 $t
       stm32eforth.s:3927   .text.reset_handler:0000000000002140 $d
       stm32eforth.s:3928   .text.reset_handler:0000000000002144 _VARIA
       stm32eforth.s:3931   .text.reset_handler:0000000000002150 VARIA
       stm32eforth.s:3935   .text.reset_handler:000000000000215c $d
       stm32eforth.s:3936   .text.reset_handler:0000000000002160 $t
       stm32eforth.s:3949   .text.reset_handler:0000000000002168 DMP
       stm32eforth.s:3953   .text.reset_handler:0000000000002174 $d
       stm32eforth.s:3954   .text.reset_handler:0000000000002178 $t
       stm32eforth.s:3965   .text.reset_handler:00000000000021a0 PDUM2
       stm32eforth.s:3958   .text.reset_handler:0000000000002188 PDUM1
       stm32eforth.s:3962   .text.reset_handler:0000000000002194 $d
       stm32eforth.s:3963   .text.reset_handler:0000000000002198 $t
       stm32eforth.s:3967   .text.reset_handler:00000000000021a4 $d
       stm32eforth.s:3968   .text.reset_handler:00000000000021a8 $t
       stm32eforth.s:3973   .text.reset_handler:00000000000021ac $d
       stm32eforth.s:3974   .text.reset_handler:00000000000021b0 _DUMP
       stm32eforth.s:3977   .text.reset_handler:00000000000021b8 DUMP
       stm32eforth.s:3984   .text.reset_handler:00000000000021d0 $d
       stm32eforth.s:3985   .text.reset_handler:00000000000021d4 $t
       stm32eforth.s:3999   .text.reset_handler:0000000000002208 DUMP4
       stm32eforth.s:3988   .text.reset_handler:00000000000021e0 DUMP1
       stm32eforth.s:3991   .text.reset_handler:00000000000021e8 $d
       stm32eforth.s:3992   .text.reset_handler:00000000000021ec $t
       stm32eforth.s:4001   .text.reset_handler:000000000000220c $d
       stm32eforth.s:4002   .text.reset_handler:0000000000002210 DUMP3
       stm32eforth.s:4003   .text.reset_handler:0000000000002210 $t
       stm32eforth.s:4012   .text.reset_handler:0000000000002224 $d
       stm32eforth.s:4013   .text.reset_handler:0000000000002228 _DOTS
       stm32eforth.s:4017   .text.reset_handler:000000000000222c DOTS
       stm32eforth.s:4027   .text.reset_handler:000000000000224c DOTS2
       stm32eforth.s:4023   .text.reset_handler:0000000000002240 DOTS1
       stm32eforth.s:4029   .text.reset_handler:0000000000002250 $d
       stm32eforth.s:4030   .text.reset_handler:0000000000002254 $t
       stm32eforth.s:4036   .text.reset_handler:000000000000225c $d
       stm32eforth.s:4037   .text.reset_handler:0000000000002260 _TNAME
       stm32eforth.s:4039   .text.reset_handler:0000000000002266 $t
       stm32eforth.s:4040   .text.reset_handler:0000000000002268 TNAME
       stm32eforth.s:4045   .text.reset_handler:0000000000002278 TNAM1
ARM GAS  stm32eforth.s 			page 100


       stm32eforth.s:4048   .text.reset_handler:0000000000002280 $d
       stm32eforth.s:4058   .text.reset_handler:00000000000022a8 TNAM2
       stm32eforth.s:4049   .text.reset_handler:0000000000002284 $t
       stm32eforth.s:4054   .text.reset_handler:0000000000002298 $d
       stm32eforth.s:4055   .text.reset_handler:000000000000229c $t
       stm32eforth.s:4066   .text.reset_handler:00000000000022b4 $d
       stm32eforth.s:4067   .text.reset_handler:00000000000022b8 _DOTID
       stm32eforth.s:4069   .text.reset_handler:00000000000022bc $t
       stm32eforth.s:4070   .text.reset_handler:00000000000022bc DOTID
       stm32eforth.s:4074   .text.reset_handler:00000000000022c8 $d
       stm32eforth.s:4081   .text.reset_handler:00000000000022e4 DOTI1
       stm32eforth.s:4075   .text.reset_handler:00000000000022cc $t
       stm32eforth.s:4077   .text.reset_handler:00000000000022d4 $d
       stm32eforth.s:4078   .text.reset_handler:00000000000022d8 $t
       stm32eforth.s:4083   .text.reset_handler:00000000000022e8 $d
       stm32eforth.s:4085   .text.reset_handler:00000000000022f2 $t
       stm32eforth.s:4091   .text.reset_handler:00000000000022f8 $d
       stm32eforth.s:4092   .text.reset_handler:00000000000022fc _SEE
       stm32eforth.s:4094   .text.reset_handler:0000000000002300 $t
       stm32eforth.s:4095   .text.reset_handler:0000000000002300 SEE
       stm32eforth.s:4100   .text.reset_handler:0000000000002310 $d
       stm32eforth.s:4101   .text.reset_handler:0000000000002314 $t
       stm32eforth.s:4102   .text.reset_handler:0000000000002318 SEE1
       stm32eforth.s:4119   .text.reset_handler:0000000000002344 DECOMP
       stm32eforth.s:4107   .text.reset_handler:0000000000002328 $d
       stm32eforth.s:4108   .text.reset_handler:000000000000232c $t
       stm32eforth.s:4114   .text.reset_handler:0000000000002334 $d
       stm32eforth.s:4115   .text.reset_handler:0000000000002338 _DECOM
       stm32eforth.s:4117   .text.reset_handler:0000000000002342 $t
       stm32eforth.s:4126   .text.reset_handler:0000000000002358 $d
       stm32eforth.s:4127   .text.reset_handler:000000000000235c $t
       stm32eforth.s:4129   .text.reset_handler:0000000000002364 $d
       stm32eforth.s:4130   .text.reset_handler:0000000000002368 $t
       stm32eforth.s:4132   .text.reset_handler:0000000000002370 $d
       stm32eforth.s:4158   .text.reset_handler:00000000000023c8 DECOM2
       stm32eforth.s:4134   .text.reset_handler:0000000000002374 $t
       stm32eforth.s:4148   .text.reset_handler:00000000000023a8 $d
       stm32eforth.s:4154   .text.reset_handler:00000000000023bc DECOM1
       stm32eforth.s:4149   .text.reset_handler:00000000000023ac $t
       stm32eforth.s:4167   .text.reset_handler:00000000000023d4 $d
       stm32eforth.s:4168   .text.reset_handler:00000000000023d8 _WORDS
       stm32eforth.s:4170   .text.reset_handler:00000000000023de $t
       stm32eforth.s:4171   .text.reset_handler:00000000000023e0 WORDS
       stm32eforth.s:4176   .text.reset_handler:00000000000023f0 WORS1
       stm32eforth.s:4179   .text.reset_handler:00000000000023f8 $d
       stm32eforth.s:4186   .text.reset_handler:0000000000002414 WORS2
       stm32eforth.s:4180   .text.reset_handler:00000000000023fc $t
       stm32eforth.s:4199   .text.reset_handler:0000000000002418 VERSN
       stm32eforth.s:4202   .text.reset_handler:0000000000002420 $d
       stm32eforth.s:4203   .text.reset_handler:0000000000002424 $t
       stm32eforth.s:4208   .text.reset_handler:0000000000002428 $d
       stm32eforth.s:4209   .text.reset_handler:000000000000242c _HI
       stm32eforth.s:4216   .text.reset_handler:000000000000243c $d
       stm32eforth.s:4218   .text.reset_handler:0000000000002454 $t
       stm32eforth.s:4227   .text.reset_handler:0000000000002474 $d
       stm32eforth.s:4228   .text.reset_handler:0000000000002478 $t
       stm32eforth.s:4240   .text.reset_handler:0000000000002498 $d
ARM GAS  stm32eforth.s 			page 101


       stm32eforth.s:4246   .text.reset_handler:00000000000024a4 $t
       stm32eforth.s:4253   .text.reset_handler:00000000000024be COLD1
       stm32eforth.s:4255   .text.reset_handler:00000000000024c2 $d
       stm32eforth.s:4256   .text.reset_handler:00000000000024c6 $t
       stm32eforth.s:4258   .text.reset_handler:00000000000024ce $d
       stm32eforth.s:4259   .text.reset_handler:00000000000024d2 $t
       stm32eforth.s:4260   .text.reset_handler:00000000000024d6 $d
       stm32eforth.s:4261   .text.reset_handler:00000000000024da $t
       stm32eforth.s:4262   .text.reset_handler:00000000000024de $d
       stm32eforth.s:4263   .text.reset_handler:00000000000024e2 $t
       stm32eforth.s:4274   .text.reset_handler:000000000000250e COLD2
       stm32eforth.s:4276   .text.reset_handler:000000000000250e $d
       stm32eforth.s:4278   .text.reset_handler:0000000000002514 $d
       stm32eforth.s:259    .text.default_handler:0000000000000023 $d
       stm32eforth.s:259    .text.default_handler:0000000000000024 $t
       stm32eforth.s:504    .text.reset_handler:0000000000000453 $d
       stm32eforth.s:504    .text.reset_handler:0000000000000454 $t
       stm32eforth.s:539    .text.reset_handler:00000000000004a5 $d
       stm32eforth.s:539    .text.reset_handler:00000000000004a6 $t
       stm32eforth.s:559    .text.reset_handler:00000000000004cd $d
       stm32eforth.s:559    .text.reset_handler:00000000000004ce $t
       stm32eforth.s:584    .text.reset_handler:0000000000000501 $d
       stm32eforth.s:584    .text.reset_handler:0000000000000502 $t
       stm32eforth.s:700    .text.reset_handler:0000000000000597 $d
       stm32eforth.s:700    .text.reset_handler:0000000000000598 $t
       stm32eforth.s:734    .text.reset_handler:00000000000005c3 $d
       stm32eforth.s:734    .text.reset_handler:00000000000005c4 $t
       stm32eforth.s:747    .text.reset_handler:00000000000005d7 $d
       stm32eforth.s:747    .text.reset_handler:00000000000005d8 $t
       stm32eforth.s:758    .text.reset_handler:00000000000005e3 $d
       stm32eforth.s:758    .text.reset_handler:00000000000005e4 $t
       stm32eforth.s:770    .text.reset_handler:00000000000005f5 $d
       stm32eforth.s:770    .text.reset_handler:00000000000005f6 $t
       stm32eforth.s:782    .text.reset_handler:0000000000000607 $d
       stm32eforth.s:782    .text.reset_handler:0000000000000608 $t
       stm32eforth.s:806    .text.reset_handler:000000000000062d $d
       stm32eforth.s:806    .text.reset_handler:000000000000062e $t
       stm32eforth.s:828    .text.reset_handler:000000000000064f $d
       stm32eforth.s:828    .text.reset_handler:0000000000000650 $t
       stm32eforth.s:841    .text.reset_handler:0000000000000661 $d
       stm32eforth.s:841    .text.reset_handler:0000000000000662 $t
       stm32eforth.s:853    .text.reset_handler:0000000000000673 $d
       stm32eforth.s:853    .text.reset_handler:0000000000000674 $t
       stm32eforth.s:877    .text.reset_handler:0000000000000699 $d
       stm32eforth.s:877    .text.reset_handler:000000000000069a $t
       stm32eforth.s:916    .text.reset_handler:00000000000006df $d
       stm32eforth.s:916    .text.reset_handler:00000000000006e0 $t
       stm32eforth.s:928    .text.reset_handler:00000000000006f5 $d
       stm32eforth.s:928    .text.reset_handler:00000000000006f6 $t
       stm32eforth.s:990    .text.reset_handler:000000000000074f $d
       stm32eforth.s:990    .text.reset_handler:0000000000000750 $t
       stm32eforth.s:1004   .text.reset_handler:0000000000000763 $d
       stm32eforth.s:1004   .text.reset_handler:0000000000000764 $t
       stm32eforth.s:1015   .text.reset_handler:0000000000000771 $d
       stm32eforth.s:1015   .text.reset_handler:0000000000000772 $t
       stm32eforth.s:1026   .text.reset_handler:0000000000000781 $d
       stm32eforth.s:1026   .text.reset_handler:0000000000000782 $t
ARM GAS  stm32eforth.s 			page 102


       stm32eforth.s:1037   .text.reset_handler:0000000000000791 $d
       stm32eforth.s:1037   .text.reset_handler:0000000000000792 $t
       stm32eforth.s:1070   .text.reset_handler:00000000000007c1 $d
       stm32eforth.s:1070   .text.reset_handler:00000000000007c2 $t
       stm32eforth.s:1104   .text.reset_handler:00000000000007f5 $d
       stm32eforth.s:1104   .text.reset_handler:00000000000007f6 $t
       stm32eforth.s:1115   .text.reset_handler:0000000000000805 $d
       stm32eforth.s:1115   .text.reset_handler:0000000000000806 $t
       stm32eforth.s:1126   .text.reset_handler:0000000000000817 $d
       stm32eforth.s:1126   .text.reset_handler:0000000000000818 $t
       stm32eforth.s:1165   .text.reset_handler:0000000000000853 $d
       stm32eforth.s:1165   .text.reset_handler:0000000000000854 $t
       stm32eforth.s:1178   .text.reset_handler:0000000000000867 $d
       stm32eforth.s:1178   .text.reset_handler:0000000000000868 $t
       stm32eforth.s:1205   .text.reset_handler:0000000000000895 $d
       stm32eforth.s:1205   .text.reset_handler:0000000000000896 $t
       stm32eforth.s:1244   .text.reset_handler:00000000000008cf $d
       stm32eforth.s:1244   .text.reset_handler:00000000000008d0 $t
       stm32eforth.s:1317   .text.reset_handler:000000000000093f $d
       stm32eforth.s:1317   .text.reset_handler:0000000000000940 $t
       stm32eforth.s:1332   .text.reset_handler:0000000000000957 $d
       stm32eforth.s:1332   .text.reset_handler:0000000000000958 $t
       stm32eforth.s:1347   .text.reset_handler:0000000000000973 $d
       stm32eforth.s:1347   .text.reset_handler:0000000000000974 $t
       stm32eforth.s:1418   .text.reset_handler:00000000000009d1 $d
       stm32eforth.s:1418   .text.reset_handler:00000000000009d2 $t
       stm32eforth.s:1452   .text.reset_handler:0000000000000a0f $d
       stm32eforth.s:1452   .text.reset_handler:0000000000000a10 $t
       stm32eforth.s:1476   .text.reset_handler:0000000000000a2d $d
       stm32eforth.s:1476   .text.reset_handler:0000000000000a2e $t
       stm32eforth.s:1500   .text.reset_handler:0000000000000a57 $d
       stm32eforth.s:1500   .text.reset_handler:0000000000000a58 $t
       stm32eforth.s:1549   .text.reset_handler:0000000000000aa9 $d
       stm32eforth.s:1549   .text.reset_handler:0000000000000aaa $t
       stm32eforth.s:1560   .text.reset_handler:0000000000000abf $d
       stm32eforth.s:1560   .text.reset_handler:0000000000000ac0 $t
       stm32eforth.s:1572   .text.reset_handler:0000000000000ad3 $d
       stm32eforth.s:1572   .text.reset_handler:0000000000000ad4 $t
       stm32eforth.s:1587   .text.reset_handler:0000000000000ae9 $d
       stm32eforth.s:1587   .text.reset_handler:0000000000000aea $t
       stm32eforth.s:1606   .text.reset_handler:0000000000000b17 $d
       stm32eforth.s:1606   .text.reset_handler:0000000000000b18 $t
       stm32eforth.s:1676   .text.reset_handler:0000000000000bc5 $d
       stm32eforth.s:1676   .text.reset_handler:0000000000000bc6 $t
       stm32eforth.s:1733   .text.reset_handler:0000000000000c3f $d
       stm32eforth.s:1733   .text.reset_handler:0000000000000c40 $t
       stm32eforth.s:1805   .text.reset_handler:0000000000000ce7 $d
       stm32eforth.s:1805   .text.reset_handler:0000000000000ce8 $t
       stm32eforth.s:1824   .text.reset_handler:0000000000000d0d $d
       stm32eforth.s:1824   .text.reset_handler:0000000000000d0e $t
       stm32eforth.s:1862   .text.reset_handler:0000000000000d55 $d
       stm32eforth.s:1862   .text.reset_handler:0000000000000d56 $t
       stm32eforth.s:1901   .text.reset_handler:0000000000000d9f $d
       stm32eforth.s:1901   .text.reset_handler:0000000000000da0 $t
       stm32eforth.s:1925   .text.reset_handler:0000000000000dcf $d
       stm32eforth.s:1925   .text.reset_handler:0000000000000dd0 $t
       stm32eforth.s:1948   .text.reset_handler:0000000000000dfb $d
ARM GAS  stm32eforth.s 			page 103


       stm32eforth.s:1948   .text.reset_handler:0000000000000dfc $t
       stm32eforth.s:2017   .text.reset_handler:0000000000000eb7 $d
       stm32eforth.s:2017   .text.reset_handler:0000000000000eb8 $t
       stm32eforth.s:2031   .text.reset_handler:0000000000000ed5 $d
       stm32eforth.s:2031   .text.reset_handler:0000000000000ed6 $t
       stm32eforth.s:2064   .text.reset_handler:0000000000000f23 $d
       stm32eforth.s:2064   .text.reset_handler:0000000000000f24 $t
       stm32eforth.s:2082   .text.reset_handler:0000000000000f47 $d
       stm32eforth.s:2082   .text.reset_handler:0000000000000f48 $t
       stm32eforth.s:2100   .text.reset_handler:0000000000000f6f $d
       stm32eforth.s:2100   .text.reset_handler:0000000000000f70 $t
       stm32eforth.s:2169   .text.reset_handler:0000000000001007 $d
       stm32eforth.s:2169   .text.reset_handler:0000000000001008 $t
       stm32eforth.s:2331   .text.reset_handler:00000000000011fb $d
       stm32eforth.s:2331   .text.reset_handler:00000000000011fc $t
       stm32eforth.s:2352   .text.reset_handler:000000000000122d $d
       stm32eforth.s:2352   .text.reset_handler:000000000000122e $t
       stm32eforth.s:2373   .text.reset_handler:000000000000125d $d
       stm32eforth.s:2373   .text.reset_handler:000000000000125e $t
       stm32eforth.s:2452   .text.reset_handler:00000000000012e7 $d
       stm32eforth.s:2452   .text.reset_handler:00000000000012e8 $t
       stm32eforth.s:2490   .text.reset_handler:0000000000001347 $d
       stm32eforth.s:2490   .text.reset_handler:0000000000001348 $t
       stm32eforth.s:2660   .text.reset_handler:000000000000152b $d
       stm32eforth.s:2660   .text.reset_handler:000000000000152c $t
       stm32eforth.s:2705   .text.reset_handler:000000000000158d $d
       stm32eforth.s:2705   .text.reset_handler:000000000000158e $t
       stm32eforth.s:2720   .text.reset_handler:00000000000015b1 $d
       stm32eforth.s:2720   .text.reset_handler:00000000000015b2 $t
       stm32eforth.s:2975   .text.reset_handler:000000000000182f $d
       stm32eforth.s:2975   .text.reset_handler:0000000000001830 $t
       stm32eforth.s:3150   .text.reset_handler:00000000000019f3 $d
       stm32eforth.s:3150   .text.reset_handler:00000000000019f4 $t
       stm32eforth.s:3158   .text.reset_handler:0000000000001a0f $d
       stm32eforth.s:3158   .text.reset_handler:0000000000001a10 $t
       stm32eforth.s:3167   .text.reset_handler:0000000000001a1d $d
       stm32eforth.s:3167   .text.reset_handler:0000000000001a1e $t
       stm32eforth.s:3191   .text.reset_handler:0000000000001a5f $d
       stm32eforth.s:3191   .text.reset_handler:0000000000001a60 $t
       stm32eforth.s:3206   .text.reset_handler:0000000000001a77 $d
       stm32eforth.s:3206   .text.reset_handler:0000000000001a78 $t
       stm32eforth.s:3228   .text.reset_handler:0000000000001aa3 $d
       stm32eforth.s:3228   .text.reset_handler:0000000000001aa4 $t
       stm32eforth.s:3267   .text.reset_handler:0000000000001af7 $d
       stm32eforth.s:3267   .text.reset_handler:0000000000001af8 $t
       stm32eforth.s:3290   .text.reset_handler:0000000000001b2b $d
       stm32eforth.s:3290   .text.reset_handler:0000000000001b2c $t
       stm32eforth.s:3494   .text.reset_handler:0000000000001d1d $d
       stm32eforth.s:3494   .text.reset_handler:0000000000001d1e $t
       stm32eforth.s:3536   .text.reset_handler:0000000000001d7b $d
       stm32eforth.s:3536   .text.reset_handler:0000000000001d7c $t
       stm32eforth.s:3572   .text.reset_handler:0000000000001ddb $d
       stm32eforth.s:3572   .text.reset_handler:0000000000001ddc $t
       stm32eforth.s:3587   .text.reset_handler:0000000000001dfd $d
       stm32eforth.s:3587   .text.reset_handler:0000000000001dfe $t
       stm32eforth.s:3616   .text.reset_handler:0000000000001e3d $d
       stm32eforth.s:3616   .text.reset_handler:0000000000001e3e $t
ARM GAS  stm32eforth.s 			page 104


       stm32eforth.s:3643   .text.reset_handler:0000000000001e7b $d
       stm32eforth.s:3643   .text.reset_handler:0000000000001e7c $t
       stm32eforth.s:3657   .text.reset_handler:0000000000001e97 $d
       stm32eforth.s:3657   .text.reset_handler:0000000000001e98 $t
       stm32eforth.s:3671   .text.reset_handler:0000000000001eb3 $d
       stm32eforth.s:3671   .text.reset_handler:0000000000001eb4 $t
       stm32eforth.s:3889   .text.reset_handler:00000000000020d5 $d
       stm32eforth.s:3889   .text.reset_handler:00000000000020d6 $t
       stm32eforth.s:3910   .text.reset_handler:0000000000002113 $d
       stm32eforth.s:3910   .text.reset_handler:0000000000002114 $t
       stm32eforth.s:3930   .text.reset_handler:000000000000214d $d
       stm32eforth.s:3930   .text.reset_handler:000000000000214e $t
       stm32eforth.s:3976   .text.reset_handler:00000000000021b5 $d
       stm32eforth.s:3976   .text.reset_handler:00000000000021b6 $t
       stm32eforth.s:4016   .text.reset_handler:000000000000222b $d
       stm32eforth.s:4016   .text.reset_handler:000000000000222c $t
       stm32eforth.s:4211   .text.reset_handler:000000000000242f $d
       stm32eforth.s:4211   .text.reset_handler:0000000000002430 $t

UNDEFINED SYMBOLS
_mstack
