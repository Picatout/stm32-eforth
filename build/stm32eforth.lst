ARM GAS  stm32eforth.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  stm32eforth.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.p2align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.p2aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m3
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
ARM GAS  stm32eforth.s 			page 3


  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
ARM GAS  stm32eforth.s 			page 4


  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  81              	
  82              	/* blue pill specific constants */ 
  83              	  .equ LED_GPIO, GPIOC_BASE_ADR
  84              	  .equ LED_PIN, 13
  85              	  .equ UART, USART1_BASE_ADR 
  86              	
ARM GAS  stm32eforth.s 			page 5


  87              	/* eForth specific constants */
  88              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  89              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  90              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  91              	.equ UPP ,	0x20000130	/*start of user area (UP0) */
  92              	// .equ DTOP ,	0x20000240	/*start of usable RAM area (HERE) */
  93              	.equ DEND , 0x20004E00  /*usable RAM end */
  94              	 .equ RAMOFFSET ,	UPP 	// remap
  95              	 .equ RAMEND, 0x20005000 // 20Ko
  96              	 .equ FLASHOFFSET ,	0x08000130	// remap
  97              	//.equ RAMOFFSET  ,	0x00000000	/* absolute */
  98              	//.equ MAPOFFSET  ,	0x00000000	/* absolute */
  99              	  .equ MAPOFFSET , (RAMOFFSET-FLASHOFFSET)
 100              	  .equ IRQOFFSET , (RAM_ADR-FLASH_ADR)
 101              	
 102              	/*************************************
 103              	   system variables offset from UPP
 104              	*************************************/
 105              	  .equ SEED_OFS, 4    // prng seed 
 106              	  .equ TICKS_OFS, SEED_OFS+4  // millseconds counter
 107              	  .equ TIMER_OFS, TICKS_OFS+4  // count down timer
 108              	  .equ TORAM_OFS, TIMER_OFS+4  // compile to RAM 
 109              	  .equ IMG_SIGN_OFS, TORAM_OFS+4  // image signature  
 110              	  .equ BOOT_OFS, IMG_SIGN_OFS+4  // boot program address
 111              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
 112              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
 113              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
 114              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
 115              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
 116              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
 117              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
 118              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
 119              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
 120              	  .equ FORTH_CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
 121              	  .equ USER_CTOP_OFS, FORTH_CTOP_OFS+4  // ram free dictionary address
 122              	  .equ LASTN_OFS, USER_CTOP_OFS+4     // last word in dictionary link nfa 
 123              	  .equ VARS_END_OFS, LASTN_OFS+4 // end of system variables  
 124              	  
 125              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
 126              	  .equ RX_QUEUE_OFS, VARS_END_OFS+4 // rx queue 
 127              	  .equ RX_HEAD_OFS, RX_QUEUE_OFS+RX_QUEUE_SIZE // queue head indice 
 128              	  .equ RX_TAIL_OFS, RX_HEAD_OFS+4 // queue tail indice 
 129              	
 130              	
 131              	/***********************************************
 132              	* MACROS
 133              	*	Assemble inline direct threaded code ending.
 134              	***********************************************/
 135              		.macro _CALL fn /* low level routine call */ 
 136              	 	PUSH {LR}
 137              		BL \fn  
 138              		POP {LR}
 139              		.endm
 140              		
 141              		.macro _MOV32 R V 
 142              		MOV \R, #\V&0xffff
 143              		MOVT \R, #\V>>16
ARM GAS  stm32eforth.s 			page 6


 144              		.endm
 145              	
 146              		.macro	_NEXT /*end low level word */
 147              		BX	LR
 148              		.endm
 149              	
 150              	 	.macro	_NEST /*start high level word */
 151              		STMFD	R2!,{LR}
 152              		.endm
 153              	
 154              	 	.macro	_UNNEST	/*end high level word */
 155              		LDMFD	R2!,{PC}
 156              		.endm
 157              	
 158              	 	.macro	_DOLIT  value /*long literals */
 159              		BL	DOLIT
 160              		.word \value 
 161              		.endm
 162              	
 163              	 	.macro	_PUSH	/*push R5 on data stack*/
 164              		STR	R5,[R1,#-4]!
 165              		.endm
 166              	
 167              	 	.macro	_POP /*pop data stack to R5 */
 168              		LDR	R5,[R1],#4
 169              		.endm
 170              	
 171              		.macro _HEADER  label, nlen, name
 172              			.section .inflash.dictinary 
 173              		LF_\label:   // link field
 174              			.word link 
 175              			.equ link , . 
 176              		_\label: .byte \nlen    // name field
 177              			.ascii "\name"
 178              			.p2align 2 
 179              		CA_\label:   // code field address 
 180              			.word \label + MAPOFFSET 
 181              			.section .text, "ax", %progbits 
 182              			.p2align 2 
 183              		\label:  // code address in .section .text 
 184              		.endm 
 185              	
 186              		.equ link, 0
 187              	
 188              	
 189              	/*************************************
 190              	*   interrupt service vectors table 
 191              	**************************************/
 192              	   .section  .isr_vector,"a",%progbits
 193              	  .type  isr_vectors, %object
 194              	
 195              	isr_vectors:
 196 0000 00000000 	  .word   _mstack          /* main return stack address */
 197 0004 00000000 	  .word   reset_handler    /* startup address */
 198              	/* core interrupts || exceptions */
 199 0008 00000000 	  .word   default_handler  /*  -14 NMI */
 200 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
ARM GAS  stm32eforth.s 			page 7


 201 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
 202 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
 203 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
 204 001c 00000000 	  .word   0 /* -9 */
 205 0020 00000000 	  .word   0 /* -8 */ 
 206 0024 00000000 	  .word   0 /* -7 */
 207 0028 00000000 	  .word   0	/* -6 */
 208 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
 209 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
 210 0034 00000000 	  .word   0 /* -3 */
 211 0038 00000000 	  .word   default_handler  /* -2 PendSV */
 212 003c 00000000 	  .word   systick_handler  /* -1 Systick */
 213              	 irq0:  
 214              	  /* External Interrupts */
 215 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
 216 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 217 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 218 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 219 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 220 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 221 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 222 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 223 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 224 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 225 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 226 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 227 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 228 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 229 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 230 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 231 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 232 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 233 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 234 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 235 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 236 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 237 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 238 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 239 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 240 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 241 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 242 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 243 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 244 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 245 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 246 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 247 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 248 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 249 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 250 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 251 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 252 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
 253 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 254 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 255 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 256 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 257 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
ARM GAS  stm32eforth.s 			page 8


 258 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 259 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 260 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 261 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 262 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 263 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 264 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 265 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 266 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 267 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 268 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 269 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 270 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 271 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 272 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 273 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 274 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 275              	isr_end:
 276              	  .size  isr_vectors, .-isr_vectors
 277              	
 278              	/*****************************************************
 279              	* default isr handler called on unexpected interrupt
 280              	*****************************************************/
 281              	   .section  .inflash, "ax", %progbits 
 282              	   
 283              	  .type default_handler, %function
 284              	  .p2align 2 
 285              	  .global default_handler
 286              	default_handler:
 287 0000 014D     		ldr r5,exception_msg 
 288 0002 00F04FF8 		bl uart_puts 
 289 0006 39E0     		b reset_mcu    
 290              	  .size  default_handler, .-default_handler
 291              	exception_msg:
 292 0008 0C000000 		.word .+4 
 293 000c 12       		.byte 18
 294 000d 0A0D6578 		.ascii "\n\rexeption reboot!"
 294      65707469 
 294      6F6E2072 
 294      65626F6F 
 294      7421
 295 001f 00       		.p2align 2
 296              	
 297              	/*********************************
 298              		system milliseconds counter
 299              	*********************************/	
 300              	  .type systick_handler, %function
 301              	  .p2align 2 
 302              	  .global systick_handler
 303              	systick_handler:
 304 0020 4FF49873 	  _MOV32 r3,UPP
 304      C2F20003 
 305 0028 9868     	  ldr r0,[r3,#TICKS_OFS]  
 306 002a 00F10100 	  add r0,#1
 307 002e 9860     	  str r0,[r3,#TICKS_OFS]
 308 0030 D868     	  ldr r0,[r3,#TIMER_OFS]
 309 0032 10B1     	  cbz r0, systick_exit
ARM GAS  stm32eforth.s 			page 9


 310 0034 A0F10100 	  sub r0,#1
 311 0038 D860     	  str r0,[r3,#TIMER_OFS]
 312              	systick_exit:
 313 003a 7047     	  bx lr
 314              	
 315              	
 316              	
 317              	/**************************
 318              		UART RX handler
 319              	**************************/
 320              		.p2align 2
 321              		.type uart_rx_handler, %function
 322              	uart_rx_handler:
 323 003c 2DE9D002 		push {r4,r6,r7,r9}
 324 0040 4FF46054 		_MOV32 r4,UART 
 324      C4F20104 
 325 0048 2668     		ldr r6,[r4,#USART_SR]
 326 004a D4F80490 		ldr r9,[r4,#USART_DR]
 327 004e 16F0200F 		tst r6,#(1<<5) // RXNE 
 328 0052 0DD0     		beq 2f // no char received 
 329 0054 B9F1030F 		cmp r9,#3
 330 0058 0DD0     		beq user_reboot // received CTRL-C then reboot MCU 
 331 005a 03F15007 		add r7,r3,#RX_QUEUE_OFS
 332 005e 5C6E     		ldr r4,[r3,#RX_TAIL_OFS]
 333 0060 2744     		add r7,r7,r4 
 334 0062 87F80090 		strb r9,[r7]
 335 0066 04F10104 		add r4,#1 
 336 006a 04F00F04 		and r4,#(RX_QUEUE_SIZE-1)
 337 006e 5C66     		str r4,[r3,#RX_TAIL_OFS]
 338              	2:	
 339 0070 BDE8D002 		pop {r4,r6,r7,r9}
 340 0074 7047     		bx lr 
 341              	
 342              	user_reboot:
 343 0076 064D     		ldr r5,user_reboot_msg
 344 0078 00F014F8 		bl uart_puts 
 345              	reset_mcu: 
 346 007c 0348     		ldr r0,scb_adr 
 347 007e C168     		ldr r1,[r0,#SCB_AIRCR]
 348 0080 41F00401 		orr r1,#(1<<2)
 349 0084 C0F2FA51 		movt r1,#SCB_VECTKEY
 350 0088 C160     		str r1,[r0,#SCB_AIRCR]
 351 008a FEE7     		b . 
 352              		.p2align 2 
 353              	scb_adr:
 354 008c 00ED00E0 		.word SCB_BASE_ADR 
 355              	user_reboot_msg:
 356 0090 94000000 		.word .+4
 357 0094 0D       		.byte 13 
 358 0095 0D757365 		.ascii "\ruser reboot!"
 358      72207265 
 358      626F6F74 
 358      21
 359 00a2 00BF     		.p2align 2 
 360              	
 361              	// send counted string to uart 
 362              	// input: r5 string* 
ARM GAS  stm32eforth.s 			page 10


 363              		.type uart_puts,%function 
 364              	uart_puts:
 365 00a4 4FF46050 		_MOV32 r0,UART 
 365      C4F20100 
 366 00ac 15F8011B 		ldrb r1,[r5],#1 // string length
 367 00b0 0940     		ands r1,r1
 368 00b2 0CD0     	1:	beq 9f 
 369 00b4 0268     	2:  ldr r2,[r0,#USART_SR]
 370 00b6 12F08002 		ands r2,#0x80 
 371 00ba FBD0     		beq 2b 	
 372 00bc 15F8012B 		ldrb r2,[r5],#1
 373 00c0 0271     		strb r2,[r0,#USART_DR]
 374 00c2 0139     		subs r1,r1,#1 
 375 00c4 F6D1     		bne 2b 
 376 00c6 0268     	3:	ldr r2,[r0,#USART_SR]
 377 00c8 12F04002 		ands r2,#(1<<6)
 378 00cc FBD0     		beq 3b 
 379 00ce 7047     	9:  bx lr 
 380              	
 381              	
 382              	/**************************************
 383              	  reset_handler execute at MCU reset
 384              	***************************************/
 385              	  .type  reset_handler, %function
 386              	  .p2align 2 
 387              	  .global reset_handler
 388              	reset_handler:
 389 00d0 00F08FF8 		bl	remap 
 390 00d4 00F01CF8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 391 00d8 00F06AF8 		bl  uart_init
 392              	//	bl	UNLOCK			/* unlock flash memory */
 393 00dc 00F008F8 		bl forth_init 
 394 00e0 0248     		ldr r0,forth_entry
 395 00e2 40F00100 		orr r0,#1
 396 00e6 8047     		blx r0
 397 00e8 FFF7FEBF 		b.w .  
 398              		.p2align 2 
 399              	forth_entry:
 400 00ec 3C200018 		.word COLD+MAPOFFSET 
 401              	
 402              		.type forth_init, %function 
 403              	forth_init:
 404 00f0 4FF49873 		_MOV32 r3,UPP 
 404      C2F20003 
 405 00f8 4FF49D41 		_MOV32 R1,SPP
 405      C2F20001 
 406 0100 4FF49F42 		_MOV32 R2,RPP
 406      C2F20002 
 407 0108 85EA0505 		EOR R5,R5  
 408 010c 7047     		BX LR 
 409              	
 410              	  .type init_devices, %function
 411 010e 00BF     	  .p2align 2 
 412              	init_devices:
 413              	/* init clock to HSE 72 Mhz */
 414              	/* set 2 wait states in FLASH_ACR_LATENCY */
 415 0110 4FF40050 	  _MOV32 R0,FLASH_BASE_ADR 
ARM GAS  stm32eforth.s 			page 11


 415      C4F20200 
 416 0118 4FF01202 	  mov r2,#0x12
 417 011c 0260     	  str r2,[r0,#FLASH_ACR]
 418              	/* configure clock for HSE, 8 Mhz crystal */
 419              	/* enable HSE in RCC_CR */
 420 011e 4FF48050 	  _MOV32 R0,RCC_BASE_ADR 
 420      C4F20200 
 421 0126 0168     	  ldr r1,[r0,#RCC_CR]
 422 0128 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 423 012c 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 424              	/* wait HSERDY loop */
 425              	wait_hserdy:
 426 012e 0168     	  ldr r1,[r0,#RCC_CR]
 427 0130 11F4003F 	  tst r1,#(1<<17)
 428 0134 FBD0     	  beq wait_hserdy
 429              	
 430              	/************************************************* 
 431              	   configure PLL mul factor and source 
 432              	   SYSCLOCK=72 Mhz
 433              	   select HSE as  PLL source clock
 434              	   multiply frequency by 9 
 435              	   APB1 clock is limited to 36 Mhz so divide by 2 
 436              	****************************************************/
 437 0136 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 438 013a C0F21D01 	  movt r1,#(7<<2)|1
 439 013e 4160     	  str r1,[r0,#RCC_CFGR]
 440              	  /* enable PLL */
 441 0140 0168     	  ldr r1,[r0,#RCC_CR]
 442 0142 41F08071 	  orr r1, #1<<24 
 443 0146 0160     	  str r1,[r0,#RCC_CR]
 444              	/* wait for PLLRDY */
 445              	wait_pllrdy:
 446 0148 0168     	  ldr r1,[r0,#RCC_CR]
 447 014a 11F0007F 	  tst r1,#(1<<25)
 448 014e FBD0     	  beq wait_pllrdy 
 449              	/* select PLL as sysclock */
 450 0150 4168     	  ldr r1,[r0,#RCC_CFGR]
 451 0152 4FF6FC72 	  _MOV32 r2,0xfffffffc
 451      CFF6FF72 
 452 015a 01EA0201 	  and r1,r1,r2 
 453 015e 4FF00202 	  mov r2,#2
 454 0162 41EA0201 	  orr r1,r1,r2
 455 0166 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 456              	/* wait for SWS==2 */
 457              	wait_sws:
 458 0168 4168     	  ldr r1,[r0,#RCC_CFGR]
 459 016a 11F0080F 	  tst r1,#(2<<2)
 460 016e FBD0     	  beq wait_sws
 461              	/* now sysclock is 72 Mhz */
 462              	
 463              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 464 0170 4FF48050 	  _MOV32 r0,RCC_BASE_ADR
 464      C4F20200 
 465 0178 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 466 017c 8161     	  str	r1, [r0, #RCC_APB2ENR]
 467              	
 468              	/* configure GPIOC:13 as output for user LED */
ARM GAS  stm32eforth.s 			page 12


 469 017e 4FF48050 	  _MOV32 r0,GPIOC_BASE_ADR 
 469      C4F20100 
 470 0186 4168     	  ldr r1,[r0,#GPIO_CRH]
 471 0188 6FF47002 	  mvn r2,#(15<<20)
 472 018c 01EA0201 	  and r1,r1,r2
 473 0190 4FF4C002 	  mov r2,#(6<<20)
 474 0194 41EA0201 	  orr r1,r1,r2
 475 0198 4160     	  str r1,[r0,#GPIO_CRH]
 476              	
 477              	/* configure systicks for 1msec ticks */
 478 019a 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 478      CEF20000 
 479 01a2 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 480 01a6 4160     	  str r1,[r0,#STK_LOAD]
 481 01a8 4FF00301 	  mov r1,#3
 482 01ac 0160     	  str r1,[r0,STK_CTL]
 483 01ae 7047     	  _NEXT  
 484              	
 485              	/*******************************
 486              	  initialize UART peripheral 
 487              	********************************/
 488              		.type uart_init, %function
 489              	uart_init:
 490              	/* set GPIOA PIN 9, uart TX  */
 491 01b0 4FF40060 	  _MOV32 r0,GPIOA_BASE_ADR
 491      C4F20100 
 492 01b8 4168     	  ldr r1,[r0,#GPIO_CRH]
 493 01ba 6FF0F002 	  mvn r2,#(15<<4)
 494 01be 01EA0201 	  and r1,r1,r2
 495 01c2 4FF0A002 	  mov r2,#(0xA<<4)
 496 01c6 41EA0201 	  orr r1,r1,r2 
 497 01ca 4160     	  str r1,[r0,#GPIO_CRH]
 498 01cc 4FF46050 	  _MOV32 r0,UART 
 498      C4F20100 
 499              	/* BAUD rate */
 500 01d4 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 501 01d8 8160     	  str r1,[r0,#USART_BRR]
 502 01da 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 503 01de C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 504              	/* enable interrupt in NVIC */
 505 01e0 4FF46140 	  _MOV32 r0,NVIC_BASE_ADR
 505      CEF20000 
 506 01e8 4168     	  ldr r1,[r0,#NVIC_ISER1]
 507 01ea 41F02001 	  orr r1,#32   
 508 01ee 4160     	  str r1,[r0,#NVIC_ISER1]
 509 01f0 7047     	  bx lr 
 510              	
 511              	/* copy system to RAM */ 
 512              		.type remap, %function 
 513              	
 514              	remap:
 515              	// tranfert isr_vector to RAM at 0x20000000
 516 01f2 4FF00000 		_MOV32 r0,RAM_ADR
 516      C2F20000 
 517 01fa 81EA0101 		eor r1,r1
 518 01fe 4FF49872 		mov r2,#(isr_end-isr_vectors) 
 519 0202 51F8043B 	1:	ldr r3,[r1],#4
ARM GAS  stm32eforth.s 			page 13


 520 0206 40F8043B 		str r3,[r0],#4
 521 020a 043A     		subs r2,#4
 522 020c F9D1     		bne 1b
 523              	// set new vector table address
 524 020e 4FF46D40 		_MOV32 r0,SCB_BASE_ADR
 524      CEF20000 
 525 0216 4FF00001 		_MOV32 r1,RAM_ADR 
 525      C2F20001 
 526 021e 8160     		str r1,[r0,#SCB_VTOR]
 527              	// copy system variable and code 	
 528 0220 DFF83400 		ldr r0,remap_dest
 529 0224 0B49     		ldr r1,remap_src 
 530 0226 42F2A802 		mov r2,#CTOP-UZERO 
 531 022a 02F10302 		add r2,r2,#3
 532 022e 22F00302 		and r2,r2,#~3 
 533 0232 51F8043B 	1:	ldr r3,[r1],#4 
 534 0236 40F8043B 		str r3,[r0],#4 
 535 023a 043A     		subs R2,#4 
 536 023c F9D1     		bne 1b
 537              	// zero end of RAM 
 538 023e 4FF4A042 		_MOV32 r2,RAM_END 
 538      C2F20002 
 539 0246 83EA0303 		eor r3,r3,r3 
 540 024a 40F8043B 	2:  str r3,[r0],#4
 541 024e 9042     		cmp r0,r2 
 542 0250 FBDB     		blt 2b 
 543 0252 7047     		_NEXT 
 544              	remap_src:
 545 0254 00000000 		.word UZERO 
 546              	remap_dest:
 547 0258 30010020 		.word RAMOFFSET 
 548              	
 549              	/********************
 550              	* Version control
 551              	*******************/
 552              	.equ VER ,	0x01	/*major release version */
 553              	.equ EXT ,	0x00	/*minor extension */
 554              	
 555              	/* Constants */
 556              	
 557              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 558              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 559              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 560              	
 561              	.equ CELLL ,	4	/*size of a cell */
 562              	.equ BASEE ,	10	/*default radix */
 563              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 564              	
 565              	.equ BKSPP ,	8	/*backspace */
 566              	.equ LF ,	10	  /*line feed */
 567              	.equ CRR ,	13	/*carriage return */
 568              	.equ ERR ,	27	/*error escape */
 569              	.equ TIC ,	39	/*tick */
 570              	
 571              	/********************************************************
 572              	* RAM memory mapping
 573              	* 	0x20000000	RAM base address
ARM GAS  stm32eforth.s 			page 14


 574              	*	0x20000000  system variables	
 575              	* 	0x20000100	Forth dictionary
 576              	* 	0x2000????	top of dictionary, HERE
 577              	* 	0x2000????	WORD buffer, HERE+16
 578              	*   0x20004E00  end of user space
 579              	* 	0x20004E80	top of data stack  R2
 580              	* 	0x20004E80	TIB terminal input buffer
 581              	* 	0x20004F80	top of return stack  R1
 582              	* 	0x20005000	top of hardware stack for interrupts R14
 583              	********************************************************/
 584              	
 585              	
 586              	/******************************************************
 587              	*  COLD start moves the following to USER variables.
 588              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 589              	******************************************************/
 590              		.section  .text, "ax" ,%progbits 
 591              		.p2align 2
 592              	
 593              	UZERO:
 594 0000 00000000 		.word 0  			/*Reserved */
 595 0004 55AA0000 		.word 0xaa55 /* SEED  */ 
 596 0008 00000000 		.word 0      /* MSEC */
 597 000c 00000000 	    .word 0     /* TIMER */
 598 0010 FFFFFFFF 		.word -1    /* >RAM */ 
 599 0014 494D4147 		.ascii "IMAG" /* signature */ 
 600 0018 E01F0018 		.word HI+MAPOFFSET  /*'BOOT */
 601 001c 0A000000 		.word BASEE 	/*BASE */
 602 0020 00000000 		.word 0			/*tmp */
 603 0024 00000000 		.word 0			/*SPAN */
 604 0028 00000000 		.word 0			/*>IN */
 605 002c 00000000 		.word 0			/*#TIB */
 606 0030 804E0020 		.word TIBB	/*TIB */
 607 0034 58110018 		.word INTER+MAPOFFSET	/*'EVAL */
 608 0038 00000000 		.word 0			/*HLD */
 609 003c C80B0000 		.word _LASTN	/*CONTEXT */
 610 0040 A8200000 		.word CTOP  	/* FCP end of system dictionnary */
 611 0044 A8200018 		.word CTOP+MAPOFFSET	/* CP end of RAM dictionary RAM */
 612 0048 C80B0000 		.word _LASTN	/*LAST word in dictionary */
 613 004c 00000000 		.word 0,0			/*reserved */
 613      00000000 
 614              	ULAST:
 615 0054 00000000 		.space  RX_QUEUE_SIZE+8 /* space reserved for rx_queue,head and tail pointer.
 615      00000000 
 615      00000000 
 615      00000000 
 615      00000000 
 616              	
 617              	
 618              	/***********************************
 619              	//  Start of Forth dictionary
 620              	***********************************/
 621              	
 622 006c AFF30080 		.p2align 4
 623              	
 624              	// RST-IVEC ( n -- )
 625              	// reset interrupt vector n to default_handler
ARM GAS  stm32eforth.s 			page 15


 626              		_HEADER RSTIVEC,8,"RST-IVEC"
 627 0070 42F804ED 		_NEST 
 628 0074 00F089F8 		_DOLIT default_handler 
 628      00000000 
 629 007c 00F0E2F8 		BL	SWAP 
 630 0080 00F04EF9 		BL	CELLS 
 631 0084 00F081F8 		_DOLIT irq0+IRQOFFSET  
 631      40000018 
 632 008c 00F00EF9 		BL	PLUS 
 633 0090 00F0ACF8 		BL	STORE 
 634 0094 52F804FB 		_UNNEST 
 635              	
 636              	//	SET-IVEC ( a n -- )
 637              	// set interrupt vector address 
 638              		_HEADER SETIVEC,8,"SET-IVEC"
 639 0098 42F804ED 		_NEST
 640 009c 00F0D2F8 		BL	SWAP 
 641 00a0 00F020F9 		BL 	ONEP 
 642 00a4 00F0CEF8 		BL	SWAP  
 643 00a8 00F03AF9 		BL CELLS 
 644 00ac 00F06DF8 		_DOLIT irq0+IRQOFFSET  
 644      40000018 
 645 00b4 00F0FAF8 		BL	PLUS 
 646 00b8 00F098F8 		BL 	STORE 
 647 00bc 52F804FB 		_UNNEST 
 648              	
 649              	
 650              	// RANDOM ( n1 -- {0..n1-1} )
 651              	// return pseudo random number 
 652              	// REF: https://en.wikipedia.org/wiki/Xorshift
 653              	
 654              		_HEADER RAND,6,RANDOM 
 655 00c0 42F804ED 		_NEST 
 656 00c4 00F0D2F9 		bl SEED 
 657 00c8 00F096F8 		bl AT 
 658 00cc 4FEA4534 		lsl r4,r5,#13
 659 00d0 85EA0405 		eor r5,r4
 660 00d4 4FEA5544 		lsr r4,r5,#17
 661 00d8 85EA0405 		eor r5,r4
 662 00dc 4FEA4514 		lsl r4,r5,#5
 663 00e0 85EA0405 		eor r5,r4
 664 00e4 00F0AAF8 		bl DUPP 
 665 00e8 00F0C0F9 		bl SEED 
 666 00ec 00F07EF8 		bl STORE 
 667 00f0 00F050F9 		bl ABSS
 668 00f4 00F0A6F8 		bl SWAP 
 669 00f8 00F094FA 		bl MODD 
 670 00fc 52F804FB 		_UNNEST 
 671              	
 672              	// PAUSE ( u -- ) 
 673              	// suspend execution for u milliseconds
 674              		_HEADER PAUSE,5,PAUSE 
 675 0100 42F804ED 		_NEST 
 676 0104 00F0BEF9 		BL TIMER 
 677 0108 00F070F8 		BL STORE 
 678              	PAUSE_LOOP:
 679 010c 00F0BAF9 		BL TIMER 
ARM GAS  stm32eforth.s 			page 16


 680 0110 00F072F8 		BL AT 
 681 0114 00F056F8 		BL QBRAN 
 682 0118 24010000 		.word PAUSE_EXIT 
 683 011c 00F05EF8 		BL BRAN 
 684 0120 0C010000 		.word PAUSE_LOOP 
 685              	PAUSE_EXIT: 		
 686 0124 52F804FB 		_UNNEST 
 687              	
 688              	//  ULED ( T|F -- )
 689              	// control user LED, -1 ON, 0 OFF  
 690              		_HEADER ULED,4,ULED
 691 0128 4FF40056 		mov r6,#(1<<LED_PIN)
 692 012c 4FF48054 		_MOV32 r4,LED_GPIO 
 692      C4F20104 
 693 0134 2800     		movs r0,r5 
 694 0136 51F8045B 		_POP
 695 013a 01D0     		beq ULED_OFF 
 696 013c 6661     		str r6,[r4,#GPIO_BRR]
 697 013e 7047     		_NEXT 
 698              	ULED_OFF:
 699 0140 2661     		str r6,[r4,#GPIO_BSRR]
 700 0142 7047     		_NEXT 
 701              		
 702              	//    ?RX	 ( -- c T | F )
 703              	// 	Return input character and true, or a false if no input.
 704              		_HEADER QRX,4,"?KEY"
 705              	QKEY: 
 706 0144 41F8045D 		_PUSH
 707 0148 5F6E     		ldr r7,[r3,#RX_TAIL_OFS] 
 708 014a 1E6E     		ldr r6,[r3,#RX_HEAD_OFS]
 709 014c 96EA0705 		eors r5,r6,r7 
 710 0150 0CD0     		beq 1f
 711 0152 03F15007 		add r7,r3,#RX_QUEUE_OFS 
 712 0156 3744     		add r7,r6 
 713 0158 3D78     		ldrb r5,[r7]
 714 015a 06F10106 		add r6,#1 
 715 015e 06F00F06 		and r6,#(RX_QUEUE_SIZE-1)
 716 0162 1E66     		str r6,[R3,#RX_HEAD_OFS]
 717 0164 41F8045D 		_PUSH 
 718 0168 4FF0FF35 		mov r5,#-1
 719 016c 7047     	1:	_NEXT 
 720 016e 00BF     		.p2align 2 
 721              	
 722              	//    TX!	 ( c -- )
 723              	// 	Send character c to the output device.
 724              		_HEADER EMIT,4,EMIT
 725              	TECHO:
 726 0170 4FF46054 		_MOV32 r4,UART 
 726      C4F20104 
 727 0178 2668     	1:	ldr	r6, [r4, #USART_SR]	
 728 017a 16F08006 		ands	r6, #0x80		//  TXE bit 
 729 017e FBD0     		beq	1b
 730 0180 2571     		strb	r5, [r4, #USART_DR]	
 731 0182 51F8045B 		_POP
 732 0186 7047     		_NEXT 
 733              		
 734              	// **************************************************************************
ARM GAS  stm32eforth.s 			page 17


 735              	//  The kernel
 736              	
 737              	//    NOP	( -- )
 738              	// 	do nothing.
 739              		_HEADER NOP,3,NOP 
 740 0188 7047     		_NEXT
 741              	 
 742              	
 743              	//    doLIT	( -- w )
 744              	// 	Push an inline literal.
 745              	
 746              	// 	.word	_NOP+MAPOFFSET
 747              	// _LIT	.byte   COMPO+5
 748              	// 	.ascii "doLIT"
 749              	// 	.p2align 2 	
 750              	DOLIT:
 751 018a 41F8045D 		_PUSH				//  store R5 on data stack
 752 018e 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 753 0192 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 754 0196 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 755 019a 7047     		_NEXT
 756              	
 757              	//    EXECUTE	( ca -- )
 758              	// 	Execute the word at ca.
 759              		_HEADER EXECU,7,EXECUTE 
 760 019c 45F00104 		ORR	R4,R5,#1		//  b0=1 
 761 01a0 51F8045B 		_POP
 762 01a4 2047     		BX	R4
 763              	
 764              	//    next	( -- ) counter on R:
 765              	// 	Run time code for the single index loop.
 766              	// 	: next ( -- ) \ hilevel model
 767              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 768              	
 769              	// 	.word	_EXECU+MAPOFFSET
 770              	// _DONXT	.byte   COMPO+4
 771              	// 	.ascii "next"
 772              	// 	.p2align 2 	
 773              	DONXT:
 774 01a6 1468     		LDR	R4,[R2]   // ( -- u )  
 775 01a8 24B9     		CBNZ R4,NEXT1 
 776              		/* loop done */
 777 01aa 02F10402 		ADD	R2,R2,#4 // drop counter 
 778 01ae 0EF1040E 		ADD	LR,LR,#4 // skip after loop address 
 779 01b2 7047     		_NEXT
 780              	NEXT1:
 781              		/* decrement loop counter */
 782 01b4 A4F10104 		SUB	R4,R4,#1
 783 01b8 1460     		STR	R4,[R2]
 784 01ba 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 785 01be 4EF0010E 		ORR	LR,LR,#1 // begining of loop
 786 01c2 7047     		_NEXT
 787              	
 788              	//    ?branch	( f -- )
 789              	// 	Branch if flag is zero.
 790              	
 791              	// 	.word	_DONXT+MAPOFFSET
ARM GAS  stm32eforth.s 			page 18


 792              	// _QBRAN	.byte   COMPO+7
 793              	// 	.ascii "?branch"
 794              	// 	.p2align 2 	
 795              	QBRAN:
 796 01c4 2C00     		MOVS	R4,R5
 797 01c6 51F8045B 		_POP
 798 01ca 04D1     		BNE	QBRAN1
 799 01cc 5EF801EC 		LDR	LR,[LR,#-1]
 800 01d0 4EF0010E 		ORR LR,LR,#1
 801 01d4 7047     		_NEXT
 802              	QBRAN1:
 803 01d6 0EF1040E 	 	ADD	LR,LR,#4
 804 01da 7047     		_NEXT
 805              	
 806              	//    branch	( -- )
 807              	// 	Branch to an inline address.
 808              	
 809              	// 	.word	_QBRAN+MAPOFFSET
 810              	// _BRAN	.byte   COMPO+6
 811              	// 	.ascii "branch"
 812              	// 	.p2align 2 	
 813              	BRAN:
 814 01dc 5EF801EC 		LDR	LR,[LR,#-1]
 815 01e0 4EF0010E 		ORR	LR,LR,#1
 816 01e4 7047     		_NEXT
 817              	
 818              	//    EXIT	(  -- )
 819              	// 	Exit the currently executing command.
 820 01e6 00BF     		_HEADER EXIT,4,EXIT 
 821 01e8 52F804FB 		_UNNEST 
 822              	
 823              	//    !	   ( w a -- )
 824              	// 	Pop the data stack to memory.
 825              		_HEADER STORE,1,"!"
 826 01ec 51F8044B 		LDR	R4,[R1],#4
 827 01f0 2C60     		STR	R4,[R5]
 828 01f2 51F8045B 		_POP
 829 01f6 7047     		_NEXT
 830              	
 831              	//    @	   ( a -- w )
 832              	// 	Push memory location to the data stack.
 833              		_HEADER AT,1,"@"
 834 01f8 2D68     		LDR	R5,[R5]
 835 01fa 7047     		_NEXT
 836              	
 837              	//    C!	  ( c b -- )
 838              	// 	Pop the data stack to byte memory.
 839              		_HEADER CSTOR,2,"C!"
 840 01fc 51F8044B 		LDR	R4,[R1],#4
 841 0200 2C70     		STRB	R4,[R5]
 842 0202 51F8045B 		_POP
 843 0206 7047     		_NEXT
 844              	
 845              	//    C@	  ( b -- c )
 846              	// 	Push byte memory location to the data stack.
 847              		_HEADER CAT,2,"C@"
 848 0208 2D78     		LDRB	R5,[R5]
ARM GAS  stm32eforth.s 			page 19


 849 020a 7047     		_NEXT
 850              	
 851              	//    R>	  ( -- w )
 852              	// 	Pop the return stack to the data stack.
 853              		_HEADER RFROM,2,"R>"
 854 020c 41F8045D 		_PUSH
 855 0210 52F8045B 		LDR	R5,[R2],#4
 856 0214 7047     		_NEXT
 857              	
 858              	//    R@	  ( -- w )
 859              	// 	Copy top of return stack to the data stack.
 860 0216 00BF     		_HEADER RAT,2,"R@"
 861 0218 41F8045D 		_PUSH
 862 021c 1568     		LDR	R5,[R2]
 863 021e 7047     		_NEXT
 864              	
 865              	//    >R	  ( w -- )
 866              	// 	Push the data stack to the return stack.
 867              		_HEADER TOR,2+COMPO,">R"
 868 0220 42F8045D 		STR	R5,[R2,#-4]!
 869 0224 51F8045B 		_POP
 870 0228 7047     		_NEXT  
 871              	
 872              	//    SP@	 ( -- a )
 873              	// 	Push the current data stack pointer.
 874 022a 00BF     		_HEADER SPAT,3,"SP@"
 875 022c 41F8045D 		_PUSH
 876 0230 0D46     		MOV	R5,R1
 877 0232 7047     		_NEXT
 878              	
 879              	//    DROP	( w -- )
 880              	// 	Discard top stack item.
 881              		_HEADER DROP,4,DROP
 882 0234 51F8045B 		_POP
 883 0238 7047     		_NEXT
 884              	
 885              	//    DUP	 ( w -- w w )
 886              	// 	Duplicate the top stack item.
 887 023a 00BF     		_HEADER DUPP,3,"DUP"
 888 023c 41F8045D 		_PUSH
 889 0240 7047     		_NEXT
 890              	
 891              	//    SWAP	( w1 w2 -- w2 w1 )
 892              	// 	Exchange top two stack items.
 893 0242 00BF     		_HEADER SWAP,4,"SWAP"
 894 0244 0C68     		LDR	R4,[R1]
 895 0246 0D60     		STR	R5,[R1]
 896 0248 2546     		MOV	R5,R4
 897 024a 7047     		_NEXT
 898              	
 899              	//    OVER	( w1 w2 -- w1 w2 w1 )
 900              	// 	Copy second stack item to top.
 901              		_HEADER OVER,4,"OVER"
 902 024c 41F8045D 		_PUSH
 903 0250 4D68     		LDR	R5,[R1,#4]
 904 0252 7047     		_NEXT
 905              	
ARM GAS  stm32eforth.s 			page 20


 906              	//    0<	  ( n -- t )
 907              	// 	Return true if n is negative.
 908              		_HEADER ZLESS,2,"0<"
 909 0254 4FF00004 		MOV	R4,#0
 910 0258 04EB2505 		ADD	R5,R4,R5,ASR #32
 911 025c 7047     		_NEXT
 912              	
 913              	//    AND	 ( w w -- w )
 914              	// 	Bitwise AND.
 915 025e 00BF     		_HEADER ANDD,3,"AND"
 916 0260 51F8044B 		LDR	R4,[R1],#4
 917 0264 05EA0405 		AND	R5,R4
 918 0268 7047     		_NEXT
 919              	
 920              	//    OR	  ( w w -- w )
 921              	// 	Bitwise inclusive OR.
 922 026a 00BF     		_HEADER ORR,2,"OR"
 923 026c 51F8044B 		LDR	R4,[R1],#4
 924 0270 45EA0405 		ORR	R5,R4
 925 0274 7047     		_NEXT
 926              	
 927              	//    XOR	 ( w w -- w )
 928              	// 	Bitwise exclusive OR.
 929 0276 00BF     		_HEADER XORR,3,"XOR"
 930 0278 51F8044B 		LDR	R4,[R1],#4
 931 027c 85EA0405 		EOR	R5,R4
 932 0280 7047     		_NEXT
 933              	
 934              	//    UM+	 ( w w -- w cy )
 935              	// 	Add two numbers, return the sum and carry flag.
 936 0282 00BF     		_HEADER UPLUS,3,"UM+"
 937 0284 0C68     		LDR	R4,[R1]
 938 0286 6419     		ADDS	R4,R4,R5
 939 0288 4FF00005 		MOV	R5,#0
 940 028c 45F10005 		ADC	R5,R5,#0
 941 0290 0C60     		STR	R4,[R1]
 942 0292 7047     		_NEXT
 943              	
 944              	//    RSHIFT	 ( w # -- w )
 945              	// 	arithmetic Right shift # bits.
 946              		_HEADER RSHIFT,6,"RSHIFT"
 947 0294 51F8044B 		LDR	R4,[R1],#4
 948 0298 44FA05F5 		MOV	R5,R4,ASR R5
 949 029c 7047     		_NEXT
 950              	
 951              	//    LSHIFT	 ( w # -- w )
 952              	// 	Right shift # bits.
 953 029e 00BF     		_HEADER LSHIFT,6,"LSHIFT"
 954 02a0 51F8044B 		LDR	R4,[R1],#4
 955 02a4 04FA05F5 		MOV	R5,R4,LSL R5
 956 02a8 7047     		_NEXT
 957              	
 958              	//    +	 ( w w -- w )
 959              	// 	Add.
 960 02aa 00BF     		_HEADER PLUS,1,"+"
 961 02ac 51F8044B 		LDR	R4,[R1],#4
 962 02b0 2544     		ADD	R5,R5,R4
ARM GAS  stm32eforth.s 			page 21


 963 02b2 7047     		_NEXT
 964              	
 965              	//    -	 ( w w -- w )
 966              	// 	Subtract.
 967              		_HEADER SUBB,1,"-"
 968 02b4 51F8044B 		LDR	R4,[R1],#4
 969 02b8 C5EB0405 		RSB	R5,R5,R4
 970 02bc 7047     		_NEXT
 971              	
 972              	//    *	 ( w w -- w )
 973              	// 	Multiply.
 974 02be 00BF     		_HEADER STAR,1,"*"
 975 02c0 51F8044B 		LDR	R4,[R1],#4
 976 02c4 04FB05F5 		MUL	R5,R4,R5
 977 02c8 7047     		_NEXT
 978              	
 979              	//    UM*	 ( w w -- ud )
 980              	// 	Unsigned multiply.
 981 02ca 00BF     		_HEADER UMSTA,3,"UM*"
 982 02cc 0C68     		LDR	R4,[R1]
 983 02ce A5FB0467 		UMULL	R6,R7,R5,R4
 984 02d2 0E60     		STR	R6,[R1]
 985 02d4 3D46     		MOV	R5,R7
 986 02d6 7047     		_NEXT
 987              	
 988              	//    M*	 ( w w -- d )
 989              	// 	signed multiply.
 990              		_HEADER MSTAR,2,"M*"
 991 02d8 0C68     		LDR	R4,[R1]
 992 02da 85FB0467 		SMULL	R6,R7,R5,R4
 993 02de 0E60     		STR	R6,[R1]
 994 02e0 3D46     		MOV	R5,R7
 995 02e2 7047     		_NEXT
 996              	
 997              	//    1+	 ( w -- w+1 )
 998              	// 	Add 1.
 999              		_HEADER ONEP,2,"1+"
 1000 02e4 05F10105 		ADD	R5,R5,#1
 1001 02e8 7047     		_NEXT
 1002              	
 1003              	//    1-	 ( w -- w-1 )
 1004              	// 	Subtract 1.
 1005 02ea 00BF     		_HEADER ONEM,2,"1-"
 1006 02ec A5F10105 		SUB	R5,R5,#1
 1007 02f0 7047     		_NEXT
 1008              	
 1009              	//    2+	 ( w -- w+2 )
 1010              	// 	Add 1.
 1011 02f2 00BF     		_HEADER TWOP,2,"2+"
 1012 02f4 05F10205 		ADD	R5,R5,#2
 1013 02f8 7047     		_NEXT
 1014              	
 1015              	//    2-	 ( w -- w-2 )
 1016              	// 	Subtract 2.
 1017 02fa 00BF     		_HEADER TWOM,2,"2-"
 1018 02fc A5F10205 		SUB	R5,R5,#2
 1019 0300 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 22


 1020              	
 1021              	//    CELL+	( w -- w+4 )
 1022              	// 	Add CELLL.
 1023 0302 00BF     		_HEADER CELLP,5,"CELL+"
 1024 0304 05F10405 		ADD	R5,R5,#CELLL
 1025 0308 7047     		_NEXT
 1026              	
 1027              	//    CELL-	( w -- w-4 )
 1028              	// 	Subtract CELLL.
 1029 030a 00BF     		_HEADER CELLM,5,"CELL-"
 1030 030c A5F10405 		SUB	R5,R5,#CELLL
 1031 0310 7047     		_NEXT
 1032              	 
 1033              	//    BL	( -- 32 )
 1034              	// 	Blank (ASCII space).
 1035 0312 00BF     		_HEADER BLANK,2,"BL"
 1036 0314 41F8045D 		_PUSH
 1037 0318 4FF02005 		MOV	R5,#32
 1038 031c 7047     		_NEXT
 1039              	
 1040              	//    CELLS	( w -- w*4 )
 1041              	// 	Multiply 4.
 1042 031e 00BF     		_HEADER CELLS,5,"CELLS"
 1043 0320 4FEA8505 		MOV	R5,R5,LSL#2
 1044 0324 7047     		_NEXT
 1045              	
 1046              	//    CELL/	( w -- w/4 )
 1047              	// 	Divide by 4.
 1048 0326 00BF     		_HEADER CELLSL,5,"CELL/"
 1049 0328 4FEAA505 		MOV	R5,R5,ASR#2
 1050 032c 7047     		_NEXT
 1051              	
 1052              	//    2*	( w -- w*2 )
 1053              	// 	Multiply 2.
 1054 032e 00BF     		_HEADER TWOST,2,"2*"
 1055 0330 4FEA4505 		MOV	R5,R5,LSL#1
 1056 0334 7047     		_NEXT
 1057              	
 1058              	//    2/	( w -- w/2 )
 1059              	// 	Divide by 2.
 1060 0336 00BF     		_HEADER TWOSL,2,"2/"
 1061 0338 4FEA6505 		MOV	R5,R5,ASR#1
 1062 033c 7047     		_NEXT
 1063              	
 1064              	//    ?DUP	( w -- w w | 0 )
 1065              	// 	Conditional duplicate.
 1066 033e 00BF     		_HEADER QDUP,4,"?DUP"
 1067 0340 2C00     		MOVS	R4,R5
 1068 0342 18BF     		IT NE 
 1069 0344 41F8045D 	    STRNE	R5,[R1,#-4]!
 1070 0348 7047     		_NEXT
 1071              	
 1072              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1073              	// 	Rotate top 3 items.
 1074 034a 00BF     		_HEADER ROT,3,"ROT"
 1075 034c 0C68     		LDR	R4,[R1]  // r4=w2 
 1076 034e 0D60     		STR	R5,[R1]  // w3 replace w2 
ARM GAS  stm32eforth.s 			page 23


 1077 0350 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1078 0352 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1079 0354 7047     		_NEXT
 1080              	
 1081              	//    2DROP	( w1 w2 -- )
 1082              	// 	Drop top 2 items.
 1083 0356 00BF     		_HEADER DDROP,5,"2DROP"
 1084 0358 51F8045B 		_POP
 1085 035c 51F8045B 		_POP
 1086 0360 7047     		_NEXT
 1087              	
 1088              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1089              	// 	Duplicate top 2 items.
 1090 0362 00BF     		_HEADER DDUP,4,"2DUP"
 1091 0364 0C68     		LDR	R4,[R1] // r4=w1
 1092 0366 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1093 036a 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1094 036e 7047     		_NEXT
 1095              	
 1096              	//    D+	( d1 d2 -- d3 )
 1097              	// 	Add top 2 double numbers.
 1098              		_HEADER DPLUS,2,"D+"
 1099 0370 51F8044B 		LDR	R4,[R1],#4
 1100 0374 51F8046B 		LDR	R6,[R1],#4
 1101 0378 0F68     		LDR	R7,[R1]
 1102 037a E419     		ADDS	R4,R4,R7
 1103 037c 0C60     		STR	R4,[R1]
 1104 037e 45EB0605 		ADC	R5,R5,R6
 1105 0382 7047     		_NEXT
 1106              	
 1107              	//    NOT	 ( w -- !w )
 1108              	// 	1"s complement.
 1109              		_HEADER INVER,3,"NOT"
 1110 0384 6FEA0505 		MVN	R5,R5
 1111 0388 7047     		_NEXT
 1112              	
 1113              	//    NEGATE	( w -- -w )
 1114              	// 	2's complement.
 1115 038a 00BF     		_HEADER NEGAT,6,"NEGATE"
 1116 038c C5F10005 		RSB	R5,R5,#0
 1117 0390 7047     		_NEXT
 1118              	
 1119              	//    ABS	 ( w -- |w| )
 1120              	// 	Absolute.
 1121 0392 00BF     		_HEADER ABSS,3,"ABS"
 1122 0394 15F0004F 		TST	R5,#0x80000000
 1123 0398 18BF     		IT NE
 1124 039a 6D42     	    RSBNE   R5,R5,#0
 1125 039c 7047     		_NEXT
 1126              	
 1127              	//  0= ( w -- f )
 1128              	// TOS==0?
 1129 039e 00BF     		_HEADER ZEQUAL,2,"0="
 1130 03a0 15B9     		cbnz r5,1f
 1131 03a2 4FF0FF35 		mov r5,#-1
 1132 03a6 7047     		_NEXT 
 1133 03a8 85EA0505 	1:  eor r5,r5,r5  
ARM GAS  stm32eforth.s 			page 24


 1134 03ac 7047     		_NEXT 	
 1135              	
 1136              	//    =	 ( w w -- t )
 1137              	// 	Equal?
 1138 03ae 00BF     		_HEADER EQUAL,1,"="
 1139 03b0 51F8044B 		LDR	R4,[R1],#4
 1140 03b4 A542     		CMP	R5,R4
 1141 03b6 0CBF     		ITE EQ 
 1142 03b8 6FF00005 	    MVNEQ	R5,#0
 1143 03bc 0025     		MOVNE	R5,#0
 1144 03be 7047     		_NEXT
 1145              	
 1146              	//    U<	 ( w w -- t )
 1147              	// 	Unsigned equal?
 1148              		_HEADER ULESS,2,"U<"
 1149 03c0 51F8044B 		LDR	R4,[R1],#4
 1150 03c4 AC42     		CMP	R4,R5
 1151 03c6 34BF     		ITE CC 
 1152 03c8 6FF00005 		MVNCC	R5,#0
 1153 03cc 0025     		MOVCS	R5,#0
 1154 03ce 7047     		_NEXT
 1155              	
 1156              	//    <	( w w -- t )
 1157              	// 	Less?
 1158              		_HEADER LESS,1,"<"
 1159 03d0 51F8044B 		LDR	R4,[R1],#4
 1160 03d4 AC42     		CMP	R4,R5
 1161 03d6 B4BF     	    ITE LT
 1162 03d8 6FF00005 		MVNLT	R5,#0
 1163 03dc 0025     		MOVGE	R5,#0
 1164 03de 7047     		_NEXT
 1165              	
 1166              	//    >	( w w -- t )
 1167              	// 	greater?
 1168              		_HEADER GREAT,1,">"
 1169 03e0 51F8044B 		LDR	R4,[R1],#4
 1170 03e4 AC42     		CMP	R4,R5
 1171 03e6 CCBF     		ITE GT
 1172 03e8 6FF00005 	    MVNGT	R5,#0
 1173 03ec 0025     		MOVLE	R5,#0
 1174 03ee 7047     		_NEXT
 1175              	
 1176              	//    MAX	 ( w w -- max )
 1177              	// 	Leave maximum.
 1178              		_HEADER MAX,3,"MAX"
 1179 03f0 51F8044B 		LDR	R4,[R1],#4
 1180 03f4 AC42     		CMP	R4,R5
 1181 03f6 C8BF     		IT GT 
 1182 03f8 2546     		MOVGT	R5,R4
 1183 03fa 7047     		_NEXT
 1184              	
 1185              	//    MIN	 ( w w -- min )
 1186              	// 	Leave minimum.
 1187              		_HEADER MIN,3,"MIN"
 1188 03fc 51F8044B 		LDR	R4,[R1],#4
 1189 0400 AC42     		CMP	R4,R5
 1190 0402 B8BF     		IT LT
ARM GAS  stm32eforth.s 			page 25


 1191 0404 2546     		MOVLT	R5,R4
 1192 0406 7047     		_NEXT
 1193              	
 1194              	//    +!	 ( w a -- )
 1195              	// 	Add to memory.
 1196              		_HEADER PSTOR,2,"+!"
 1197 0408 51F8044B 		LDR	R4,[R1],#4
 1198 040c 2E68     		LDR	R6,[R5]
 1199 040e 2644     		ADD	R6,R6,R4
 1200 0410 2E60     		STR	R6,[R5]
 1201 0412 51F8045B 		_POP
 1202 0416 7047     		_NEXT
 1203              	
 1204              	//    2!	 ( d a -- )
 1205              	// 	Store double number.
 1206              		_HEADER DSTOR,2,"2!"
 1207 0418 51F8044B 		LDR	R4,[R1],#4
 1208 041c 51F8046B 		LDR	R6,[R1],#4
 1209 0420 45F8044B 		STR	R4,[R5],#4
 1210 0424 2E60     		STR	R6,[R5]
 1211 0426 51F8045B 		_POP
 1212 042a 7047     		_NEXT
 1213              	
 1214              	//    2@	 ( a -- d )
 1215              	// 	Fetch double number.
 1216              		_HEADER DAT,2,"2@"
 1217 042c 6C68     		LDR	R4,[R5,#4]
 1218 042e 41F8044D 		STR	R4,[R1,#-4]!
 1219 0432 2D68     		LDR	R5,[R5]
 1220 0434 7047     		_NEXT
 1221              	
 1222              	//    COUNT	( b -- b+1 c )
 1223              	// 	Fetch length of string.
 1224 0436 00BF     		_HEADER COUNT,5,"COUNT"
 1225 0438 15F8014B 		LDRB	R4,[R5],#1
 1226 043c 41F8045D 		_PUSH
 1227 0440 2546     		MOV	R5,R4
 1228 0442 7047     		_NEXT
 1229              	
 1230              	//    DNEGATE	( d -- -d )
 1231              	// 	Negate double number.
 1232              		_HEADER DNEGA,7,"DNEGATE"
 1233 0444 0C68     		LDR	R4,[R1]
 1234 0446 A6EB0606 		SUB	R6,R6,R6
 1235 044a 341B     		SUBS R4,R6,R4
 1236 044c 66EB0505 		SBC	R5,R6,R5
 1237 0450 0C60     		STR	R4,[R1]
 1238 0452 7047     		_NEXT
 1239              	
 1240              	// **************************************************************************
 1241              	//  System and user variables
 1242              	
 1243              	//    doVAR	( -- a )
 1244              	// 	Run time routine for VARIABLE and CREATE.
 1245              	
 1246              	// 	.word	_DNEGA+MAPOFFSET
 1247              	// _DOVAR	.byte  COMPO+5
ARM GAS  stm32eforth.s 			page 26


 1248              	// 	.ascii "doVAR"
 1249              	// 	.p2align 2 	
 1250              	DOVAR:
 1251 0454 41F8045D 		_PUSH
 1252 0458 AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
 1253 045c 52F804FB 		_UNNEST
 1254              	
 1255              	//    doCON	( -- a ) 
 1256              	// 	Run time routine for CONSTANT.
 1257              	
 1258              	// 	.word	_DOVAR+MAPOFFSET
 1259              	// _DOCON	.byte  COMPO+5
 1260              	// 	.ascii "doCON"
 1261              	// 	.p2align 2 	
 1262              	DOCON:
 1263 0460 41F8045D 		_PUSH
 1264 0464 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1265 0468 52F804FB 		_UNNEST
 1266              	
 1267              	/***********************
 1268              	  system variables 
 1269              	***********************/
 1270              	
 1271              	 // SEED ( -- a)
 1272              	 // return PRNG seed address 
 1273              		_HEADER SEED,4,"SEED"
 1274 046c 41F8045D 		_PUSH 
 1275 0470 03F10405 		ADD R5,R3,#SEED_OFS
 1276 0474 7047     		_NEXT 	
 1277              	
 1278              	//  MSEC ( -- a)
 1279              	// return address of milliseconds counter
 1280 0476 00BF     		_HEADER MSEC,4,"MSEC"
 1281 0478 41F8045D 	  _PUSH
 1282 047c 03F10805 	  ADD R5,R3,#TICKS_OFS
 1283 0480 7047     	  _NEXT 
 1284              	
 1285              	// TIMER ( -- a )
 1286              	// count down timer 
 1287 0482 00BF     		_HEADER TIMER,5,"TIMER"
 1288 0484 41F8045D 	  _PUSH 
 1289 0488 03F10C05 	  ADD R5,R3,#TIMER_OFS
 1290 048c 7047     	  _NEXT
 1291              	
 1292              	//    'BOOT	 ( -- a )
 1293              	// 	Application.
 1294 048e 00BF     		_HEADER TBOOT,5,"'BOOT"
 1295 0490 41F8045D 		_PUSH
 1296 0494 03F11805 		ADD	R5,R3,#BOOT_OFS 
 1297 0498 7047     		_NEXT
 1298              	
 1299              	//    BASE	( -- a )
 1300              	// 	Storage of the radix base for numeric I/O.
 1301 049a 00BF     		_HEADER BASE,4,"BASE"
 1302 049c 41F8045D 		_PUSH
 1303 04a0 03F11C05 		ADD	R5,R3,#BASE_OFS
 1304 04a4 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 27


 1305              	
 1306              	//    tmp	 ( -- a )
 1307              	// 	A temporary storage location used in parse and find.
 1308              	
 1309              	// 	.word	_BASE+MAPOFFSET
 1310              	// _TEMP	.byte   COMPO+3
 1311              	// 	.ascii "tmp"
 1312              	// 	.p2align 2 	
 1313              	TEMP:
 1314 04a6 41F8045D 		_PUSH
 1315 04aa 03F12005 		ADD	R5,R3,#TMP_OFS
 1316 04ae 7047     		_NEXT
 1317              	
 1318              	//    SPAN	( -- a )
 1319              	// 	Hold character count received by EXPECT.
 1320              		_HEADER SPAN,4,"SPAN"
 1321 04b0 41F8045D 		_PUSH
 1322 04b4 03F12405 		ADD	R5,R3,#SPAN_OFS
 1323 04b8 7047     		_NEXT
 1324              	
 1325              	//    >IN	 ( -- a )
 1326              	// 	Hold the character pointer while parsing input stream.
 1327 04ba 00BF     		_HEADER INN,3,">IN"
 1328 04bc 41F8045D 		_PUSH
 1329 04c0 03F12805 		ADD	R5,R3,#TOIN_OFS
 1330 04c4 7047     		_NEXT
 1331              	
 1332              	//    #TIB	( -- a )
 1333              	// 	Hold the current count and address of the terminal input buffer.
 1334 04c6 00BF     		_HEADER NTIB,4,"#TIB"
 1335 04c8 41F8045D 		_PUSH
 1336 04cc 03F12C05 		ADD	R5,R3,#NTIB_OFS
 1337 04d0 7047     		_NEXT
 1338              	
 1339              	//    'EVAL	( -- a )
 1340              	// 	Execution vector of EVAL.
 1341 04d2 00BF     		_HEADER TEVAL,5,"'EVAL"
 1342 04d4 41F8045D 		_PUSH
 1343 04d8 03F13405 		ADD	R5,R3,#EVAL_OFS
 1344 04dc 7047     		_NEXT
 1345              	
 1346              	//    HLD	 ( -- a )
 1347              	// 	Hold a pointer in building a numeric output string.
 1348 04de 00BF     		_HEADER HLD,3,"HLD"
 1349 04e0 41F8045D 		_PUSH
 1350 04e4 03F13805 		ADD	R5,R3,#HLD_OFS
 1351 04e8 7047     		_NEXT
 1352              	
 1353              	//    CONTEXT	( -- a )
 1354              	// 	A area to specify vocabulary search order.
 1355 04ea 00BF     		_HEADER CNTXT,7,"CONTEXT"
 1356              	CRRNT:
 1357 04ec 41F8045D 		_PUSH
 1358 04f0 03F13C05 		ADD	R5,R3,#CTXT_OFS
 1359 04f4 7047     		_NEXT
 1360              	
 1361              	//    CP	( -- a )
ARM GAS  stm32eforth.s 			page 28


 1362              	// 	Point to top name in RAM vocabulary.
 1363 04f6 00BF     		_HEADER CPP,2,"CP"
 1364 04f8 41F8045D 		_PUSH
 1365 04fc 03F14405 		ADD	R5,R3,#USER_CTOP_OFS
 1366 0500 7047     		_NEXT
 1367              	
 1368              	//   FCP ( -- a )
 1369              	//  Point ot top of Forth system dictionary
 1370 0502 00BF     		_HEADER FCP,3,"FCP"
 1371 0504 41F8045D 		_PUSH 
 1372 0508 03F14005 		ADD R5,R3,#FORTH_CTOP_OFS 
 1373 050c 7047     		_NEXT 
 1374              	
 1375              	//    LAST	( -- a )
 1376              	// 	Point to the last name in the name dictionary.
 1377 050e 00BF     		_HEADER LAST,4,"LAST"
 1378 0510 41F8045D 		_PUSH
 1379 0514 03F14805 		ADD	R5,R3,#LASTN_OFS
 1380 0518 7047     		_NEXT
 1381              	
 1382              	/***********************
 1383              		system constants 
 1384              	***********************/
 1385              	
 1386              	//	USER_BEGIN ( -- a )
 1387              	//  where user area begin in RAM
 1388 051a 00BF     		_HEADER USER_BEGIN,10,"USER_BEGIN"
 1389 051c 41F8045D 		_PUSH 
 1390 0520 004D     		ldr r5,USR_BGN_ADR 
 1391 0522 7047     		_NEXT 
 1392              	USR_BGN_ADR:
 1393 0524 A8200018 	.word CTOP+MAPOFFSET 
 1394              	
 1395              	//  USER_END ( -- a )
 1396              	//  where user area end in RAM 
 1397              		_HEADER USER_END,8,"USER_END"
 1398 0528 41F8045D 		_PUSH 
 1399 052c 4FF49C45 		_MOV32 R5,DEND 
 1399      C2F20005 
 1400 0534 7047     		_NEXT 
 1401              	
 1402              	//  IMG_ADR ( -- a )
 1403              	//  where user image is saved in FLASH
 1404 0536 00BF     		_HEADER IMG_ADR,7,"IMG_ADR"
 1405 0538 41F8045D 		_PUSH
 1406 053c 004D     		ldr r5,USR_IMG_ADR   
 1407 053e 7047     		_NEXT 
 1408              	USR_IMG_ADR:
 1409 0540 00000000 		.word USER_SPACE 
 1410              	
 1411              	//  IMG_SIGN ( -- a )
 1412              	// image signature 
 1413              		_HEADER IMG_SIGN,8,"IMG_SIGN"
 1414 0544 41F8045D 		_PUSH 
 1415 0548 03F11405 		ADD r5,r3,#IMG_SIGN_OFS 
 1416 054c 7047     		_NEXT 
 1417              	
ARM GAS  stm32eforth.s 			page 29


 1418              	/* *********************
 1419              	  Common functions
 1420              	***********************/
 1421              	
 1422              	//    WITHIN	( u ul uh -- t )
 1423              	// 	Return true if u is within the range of ul and uh.
 1424 054e 00BF     		_HEADER WITHI,6,"WITHIN"
 1425 0550 42F804ED 		_NEST
 1426 0554 FFF77AFE 		BL	OVER
 1427 0558 FFF7ACFE 		BL	SUBB
 1428 055c FFF760FE 		BL	TOR
 1429 0560 FFF7A8FE 		BL	SUBB
 1430 0564 FFF752FE 		BL	RFROM
 1431 0568 FFF72AFF 		BL	ULESS
 1432 056c 52F804FB 		_UNNEST
 1433              	
 1434              	//  Divide
 1435              	
 1436              	//    UM/MOD	( udl udh u -- ur uq )
 1437              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1438              		_HEADER UMMOD,6,"UM/MOD"
 1439 0570 4FF00107 		MOV	R7,#1
 1440 0574 51F8044B 		LDR	R4,[R1],#4
 1441 0578 0E68     		LDR	R6,[R1]
 1442              	UMMOD0:
 1443 057a B619     		ADDS	R6,R6,R6
 1444 057c 6441     		ADCS	R4,R4,R4
 1445 057e 04D3     		BCC	UMMOD1
 1446 0580 A4EB0504 		SUB	R4,R4,R5
 1447 0584 06F10106 		ADD	R6,R6,#1
 1448 0588 04E0     		B UMMOD2
 1449              	UMMOD1:
 1450 058a 641B     		SUBS	R4,R4,R5 
 1451 058c 28BF     		IT CS 
 1452 058e 0136     		ADDCS	R6,R6,#1
 1453 0590 00D2     		BCS	UMMOD2
 1454 0592 2C44     		ADD	R4,R4,R5
 1455              	UMMOD2:
 1456 0594 FF19     		ADDS	R7,R7,R7
 1457 0596 F0D3     		BCC	UMMOD0
 1458 0598 3546     		MOV	R5,R6
 1459 059a 0C60     		STR	R4,[R1]
 1460 059c 7047     		_NEXT
 1461              	
 1462              	//    M/MOD	( d n -- r q )
 1463              	// 	Signed floored divide of double by single. Return mod and quotient.
 1464 059e 00BF     		_HEADER MSMOD,5,"M/MOD"
 1465 05a0 42F804ED 		_NEST
 1466 05a4 FFF74AFE 		BL	DUPP
 1467 05a8 FFF754FE 		BL	ZLESS
 1468 05ac FFF746FE 		BL	DUPP
 1469 05b0 FFF736FE 		BL	TOR
 1470 05b4 FFF706FE 		BL	QBRAN
 1471 05b8 CC050018 		.word	MMOD1+MAPOFFSET
 1472 05bc FFF7E6FE 		BL	NEGAT
 1473 05c0 FFF72EFE 		BL	TOR
 1474 05c4 FFF73EFF 		BL	DNEGA
ARM GAS  stm32eforth.s 			page 30


 1475 05c8 FFF720FE 		BL	RFROM
 1476              	MMOD1:
 1477 05cc FFF728FE 	  BL	TOR
 1478 05d0 FFF734FE 		BL	DUPP
 1479 05d4 FFF73EFE 		BL	ZLESS
 1480 05d8 FFF7F4FD 		BL	QBRAN
 1481 05dc E8050018 		.word	MMOD2+MAPOFFSET
 1482 05e0 FFF71AFE 		BL	RAT
 1483 05e4 FFF762FE 		BL	PLUS
 1484              	MMOD2:
 1485 05e8 FFF710FE 	  BL	RFROM
 1486 05ec FFF7C0FF 		BL	UMMOD
 1487 05f0 FFF70CFE 		BL	RFROM
 1488 05f4 FFF7E6FD 		BL	QBRAN
 1489 05f8 08060018 		.word	MMOD3+MAPOFFSET
 1490 05fc FFF722FE 		BL	SWAP
 1491 0600 FFF7C4FE 		BL	NEGAT
 1492 0604 FFF71EFE 		BL	SWAP
 1493              	MMOD3:   
 1494 0608 52F804FB 		_UNNEST
 1495              	
 1496              	//    /MOD	( n n -- r q )
 1497              	// 	Signed divide. Return mod and quotient.
 1498              		_HEADER SLMOD,4,"/MOD"
 1499 060c 42F804ED 		_NEST
 1500 0610 FFF71CFE 		BL	OVER
 1501 0614 FFF71EFE 		BL	ZLESS
 1502 0618 FFF714FE 		BL	SWAP
 1503 061c FFF7C0FF 		BL	MSMOD
 1504 0620 52F804FB 		_UNNEST
 1505              	
 1506              	//    MOD	 ( n n -- r )
 1507              	// 	Signed divide. Return mod only.
 1508              		_HEADER MODD,3,"MODD"
 1509 0624 42F804ED 		_NEST
 1510 0628 FFF7F0FF 		BL	SLMOD
 1511 062c FFF702FE 		BL	DROP
 1512 0630 52F804FB 		_UNNEST
 1513              	
 1514              	//    /	   ( n n -- q )
 1515              	// 	Signed divide. Return quotient only.
 1516              		_HEADER SLASH,1,"/"
 1517 0634 42F804ED 		_NEST
 1518 0638 FFF7E8FF 		BL	SLMOD
 1519 063c FFF702FE 		BL	SWAP
 1520 0640 FFF7F8FD 		BL	DROP
 1521 0644 52F804FB 		_UNNEST
 1522              	
 1523              	//    */MOD	( n1 n2 n3 -- r q )
 1524              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1525              		_HEADER SSMOD,5,"*/MOD"
 1526 0648 42F804ED 		_NEST
 1527 064c FFF7E8FD 		BL	TOR
 1528 0650 FFF742FE 		BL	MSTAR
 1529 0654 FFF7DAFD 		BL	RFROM
 1530 0658 FFF7A2FF 		BL	MSMOD
 1531 065c 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 31


 1532              	
 1533              	//    */	  ( n1 n2 n3 -- q )
 1534              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1535              		_HEADER STASL,2,"*/"
 1536 0660 42F804ED 		_NEST
 1537 0664 FFF7F0FF 		BL	SSMOD
 1538 0668 FFF7ECFD 		BL	SWAP
 1539 066c FFF7E2FD 		BL	DROP
 1540 0670 52F804FB 		_UNNEST
 1541              	
 1542              	// **************************************************************************
 1543              	//  Miscellaneous
 1544              	
 1545              	//    ALIGNED	( b -- a )
 1546              	// 	Align address to the cell boundary.
 1547              		_HEADER ALGND,7,"ALIGNED"
 1548 0674 05F10305 		ADD	R5,R5,#3
 1549 0678 6FF00304 		MVN	R4,#3
 1550 067c 05EA0405 		AND	R5,R5,R4
 1551 0680 7047     		_NEXT
 1552              	
 1553              	//    >CHAR	( c -- c )
 1554              	// 	Filter non-printing characters.
 1555 0682 00BF     		_HEADER TCHAR,5,">CHAR"
 1556 0684 42F804ED 		_NEST
 1557 0688 FFF77FFD 		_DOLIT 0x7F
 1557      7F000000 
 1558 0690 FFF7E6FD 		BL	ANDD
 1559 0694 FFF7D2FD 		BL	DUPP	// mask msb
 1560 0698 FFF73CFE 		BL	BLANK
 1561 069c FFF775FD 		_DOLIT 127
 1561      7F000000 
 1562 06a4 FFF754FF 		BL	WITHI	// check for printable
 1563 06a8 FFF76CFE 		BL	INVER
 1564 06ac FFF78AFD 		BL	QBRAN
 1565 06b0 C0060018 		.word	TCHA1+MAPOFFSET
 1566 06b4 FFF7BEFD 		BL	DROP
 1567 06b8 FFF767FD 		_DOLIT 	'_'	// replace non-printables
 1567      5F000000 
 1568              	TCHA1:
 1569 06c0 52F804FB 		  _UNNEST
 1570              	
 1571              	//    DEPTH	( -- n )
 1572              	// 	Return the depth of the data stack.
 1573              		_HEADER DEPTH,5,"DEPTH"
 1574 06c4 4FF49D46 		_MOV32 R6,SPP 
 1574      C2F20006 
 1575 06cc A6EB0106 		SUB	R6,R6,R1
 1576 06d0 41F8045D 		_PUSH
 1577 06d4 4FEAA605 		ASR	R5,R6,#2
 1578 06d8 7047     		_NEXT  
 1579              	
 1580              	//    PICK	( ... +n -- ... w )
 1581              	// 	Copy the nth stack item to tos.
 1582 06da 00BF     		_HEADER PICK,4,"PICK"
 1583 06dc 42F804ED 		_NEST
 1584 06e0 FFF700FE 		BL	ONEP
ARM GAS  stm32eforth.s 			page 32


 1585 06e4 FFF71CFE 		BL	CELLS
 1586 06e8 FFF7A0FD 		BL	SPAT
 1587 06ec FFF7DEFD 		BL	PLUS
 1588 06f0 FFF782FD 		BL	AT
 1589 06f4 52F804FB 		_UNNEST
 1590              	
 1591              	// **************************************************************************
 1592              	//  Memory access
 1593              	
 1594              	//    HERE	( -- a )
 1595              	// 	Return the top of the code dictionary.
 1596              		_HEADER HERE,4,"HERE"
 1597 06f8 42F804ED 		_NEST
 1598 06fc FFF7FCFE 		BL	CPP
 1599 0700 FFF77AFD 		BL	AT
 1600 0704 52F804FB 		_UNNEST
 1601              		
 1602              	//    PAD	 ( -- a )
 1603              	// 	Return the address of a temporary buffer.
 1604              		_HEADER PAD,4,"PAD"
 1605 0708 42F804ED 		_NEST
 1606 070c FFF7F4FF 		BL	HERE
 1607 0710 05F15005 		ADD	R5,R5,#80
 1608 0714 52F804FB 		_UNNEST
 1609              	
 1610              	//    TIB	 ( -- a )
 1611              	// 	Return the address of the terminal input buffer.
 1612              		_HEADER TIB,3,"TIB"
 1613 0718 41F8045D 		_PUSH
 1614 071c 1D6B     		ldr r5,[r3,#TIB_OFS]
 1615 071e 7047     		_NEXT
 1616              	
 1617              	//    @EXECUTE	( a -- )
 1618              	// 	Execute vector stored in address a.
 1619              		_HEADER ATEXE,8,"@EXECUTE"
 1620 0720 2C00     		MOVS	R4,R5
 1621 0722 51F8045B 		_POP
 1622 0726 2468     		LDR	R4,[R4]
 1623 0728 44F00104 		ORR	R4,R4,#1
 1624 072c 18BF     	    IT NE 
 1625 072e 2047     		BXNE	R4
 1626 0730 7047     		_NEXT
 1627              	
 1628              	//    CMOVE	( b1 b2 u -- )
 1629              	// 	Copy u bytes from b1 to b2.
 1630 0732 00BF     		_HEADER CMOVE,5,"CMOVE"
 1631 0734 51F8046B 		LDR	R6,[R1],#4
 1632 0738 51F8047B 		LDR	R7,[R1],#4
 1633 073c 03E0     		B CMOV1
 1634              	CMOV0:
 1635 073e 17F8014B 		LDRB	R4,[R7],#1
 1636 0742 06F8014B 		STRB	R4,[R6],#1
 1637              	CMOV1:
 1638 0746 2D00     		MOVS	R5,R5
 1639 0748 02D0     		BEQ	CMOV2
 1640 074a A5F10105 		SUB	R5,R5,#1
 1641 074e F6E7     		B CMOV0
ARM GAS  stm32eforth.s 			page 33


 1642              	CMOV2:
 1643 0750 51F8045B 		_POP
 1644 0754 7047     		_NEXT
 1645              	
 1646              	//    MOVE	( a1 a2 u -- )
 1647              	// 	Copy u words from a1 to a2.
 1648 0756 00BF     		_HEADER MOVE,4,"MOVE"
 1649 0758 25F00305 		AND	R5,R5,#-4
 1650 075c 51F8046B 		LDR	R6,[R1],#4
 1651 0760 51F8047B 		LDR	R7,[R1],#4
 1652 0764 03E0     		B MOVE1
 1653              	MOVE0:
 1654 0766 57F8044B 		LDR	R4,[R7],#4
 1655 076a 46F8044B 		STR	R4,[R6],#4
 1656              	MOVE1:
 1657 076e 2D00     		MOVS	R5,R5
 1658 0770 02D0     		BEQ	MOVE2
 1659 0772 A5F10405 		SUB	R5,R5,#4
 1660 0776 F6E7     		B MOVE0
 1661              	MOVE2:
 1662 0778 51F8045B 		_POP
 1663 077c 7047     		_NEXT
 1664              	
 1665              	//    FILL	( b u c -- )
 1666              	// 	Fill u bytes of character c to area beginning at b.
 1667 077e 00BF     		_HEADER FILL,4,"FILL"
 1668 0780 51F8046B 		LDR	R6,[R1],#4
 1669 0784 51F8047B 		LDR	R7,[R1],#4
 1670              	FILL0:
 1671 0788 00E0     		B FILL1
 1672 078a 2D46     		MOV	R5,R5
 1673              	FILL1:
 1674 078c 07F8015B 		STRB	R5,[R7],#1
 1675 0790 3600     		MOVS	R6,R6
 1676 0792 02D0     		BEQ	FILL2
 1677 0794 A6F10106 		SUB	R6,R6,#1
 1678 0798 F6E7     		B FILL0
 1679              	FILL2:
 1680 079a 51F8045B 		_POP
 1681 079e 7047     		_NEXT
 1682              	
 1683              	//    PACK$	( b u a -- a )
 1684              	// 	Build a counted word with u characters from b. Null fill.
 1685              		_HEADER PACKS,5,"PACK$"
 1686 07a0 42F804ED 		_NEST
 1687 07a4 FFF766FF 		BL	ALGND
 1688 07a8 FFF748FD 		BL	DUPP
 1689 07ac FFF738FD 		BL	TOR			// strings only on cell boundary
 1690 07b0 FFF74CFD 		BL	OVER
 1691 07b4 FFF77AFD 		BL	PLUS
 1692 07b8 FFF794FD 		BL	ONEP
 1693 07bc FFF7E5FC 		_DOLIT 0xFFFFFFFC
 1693      FCFFFFFF 
 1694 07c4 FFF74CFD 		BL	ANDD			// count mod cell
 1695 07c8 FFF7DFFC 		_DOLIT 	0
 1695      00000000 
 1696 07d0 FFF738FD 		BL	SWAP
ARM GAS  stm32eforth.s 			page 34


 1697 07d4 FFF70AFD 		BL	STORE			// null fill cell
 1698 07d8 FFF71EFD 		BL	RAT
 1699 07dc FFF7C2FD 		BL	DDUP
 1700 07e0 FFF70CFD 		BL	CSTOR
 1701 07e4 FFF77EFD 		BL	ONEP			// save count
 1702 07e8 FFF72CFD 		BL	SWAP
 1703 07ec FFF7A2FF 		BL	CMOVE
 1704 07f0 FFF70CFD 		BL	RFROM
 1705 07f4 52F804FB 		_UNNEST   			// move string
 1706              	
 1707              	// **************************************************************************
 1708              	//  Numeric output, single precision
 1709              	
 1710              	//    DIGIT	( u -- c )
 1711              	// 	Convert digit u to a character.
 1712              		_HEADER DIGIT,5,"DIGIT"
 1713 07f8 42F804ED 		_NEST
 1714 07fc FFF7C5FC 		_DOLIT 9
 1714      09000000 
 1715 0804 FFF722FD 		BL	OVER
 1716 0808 FFF7E2FD 		BL	LESS
 1717 080c 05F00705 		AND	R5,R5,#7
 1718 0810 FFF74CFD 		BL	PLUS
 1719 0814 05F13005 		ADD	R5,R5,#'0'
 1720 0818 52F804FB 		_UNNEST
 1721              	
 1722              	//    EXTRACT	( n base -- n c )
 1723              	// 	Extract the least significant digit from n.
 1724              		_HEADER EXTRC,7,"EXTRACT"
 1725 081c 42F804ED 		_NEST
 1726 0820 FFF7B3FC 		_DOLIT 0
 1726      00000000 
 1727 0828 FFF70CFD 		BL	SWAP
 1728 082c FFF7A0FE 		BL	UMMOD
 1729 0830 FFF708FD 		BL	SWAP
 1730 0834 FFF7E0FF 		BL	DIGIT
 1731 0838 52F804FB 		_UNNEST
 1732              	
 1733              	//    <#	  ( -- )
 1734              	// 	Initiate the numeric output process.
 1735              		_HEADER BDIGS,2,"<#"
 1736 083c 42F804ED 		_NEST
 1737 0840 FFF762FF 		BL	PAD
 1738 0844 FFF74CFE 		BL	HLD
 1739 0848 FFF7D0FC 		BL	STORE
 1740 084c 52F804FB 		_UNNEST
 1741              	
 1742              	//    HOLD	( c -- )
 1743              	// 	Insert a character into the numeric output string.
 1744              		_HEADER HOLD,4,"HOLD"
 1745 0850 42F804ED 		_NEST
 1746 0854 FFF744FE 		BL	HLD
 1747 0858 FFF7CEFC 		BL	AT
 1748 085c FFF746FD 		BL	ONEM
 1749 0860 FFF7ECFC 		BL	DUPP
 1750 0864 FFF73CFE 		BL	HLD
 1751 0868 FFF7C0FC 		BL	STORE
ARM GAS  stm32eforth.s 			page 35


 1752 086c FFF7C6FC 		BL	CSTOR
 1753 0870 52F804FB 		_UNNEST
 1754              	
 1755              	//    #	   ( u -- u )
 1756              	// 	Extract one digit from u and append the digit to output string.
 1757              		_HEADER DIG,1,"#"
 1758 0874 42F804ED 		_NEST
 1759 0878 FFF710FE 		BL	BASE
 1760 087c FFF7BCFC 		BL	AT
 1761 0880 FFF7CCFF 		BL	EXTRC
 1762 0884 FFF7E4FF 		BL	HOLD
 1763 0888 52F804FB 		_UNNEST
 1764              	
 1765              	//    #S	  ( u -- 0 )
 1766              	// 	Convert u until all digits are added to the output string.
 1767              		_HEADER DIGS,2,"#S"
 1768 088c 42F804ED 		_NEST
 1769              	DIGS1:
 1770 0890 FFF7F0FF 	    BL	DIG
 1771 0894 FFF7D2FC 		BL	DUPP
 1772 0898 FFF794FC 		BL	QBRAN
 1773 089c A2080018 		.word	DIGS2+MAPOFFSET
 1774 08a0 F6E7     		B	DIGS1
 1775              	DIGS2:
 1776 08a2 52F804FB 		  _UNNEST
 1777              	
 1778              	//    SIGN	( n -- )
 1779              	// 	Add a minus sign to the numeric output string.
 1780 08a6 00BF     		_HEADER SIGN, 4,"SIGN"
 1781 08a8 42F804ED 		_NEST
 1782 08ac FFF7D2FC 		BL	ZLESS
 1783 08b0 FFF788FC 		BL	QBRAN
 1784 08b4 C4080018 		.word	SIGN1+MAPOFFSET
 1785 08b8 FFF767FC 		_DOLIT '-'
 1785      2D000000 
 1786 08c0 FFF7C6FF 		BL	HOLD
 1787              	SIGN1:
 1788 08c4 52F804FB 		  _UNNEST
 1789              	
 1790              	//    #>	  ( w -- b u )
 1791              	// 	Prepare the outputDCB to be TYPE'd.
 1792              		_HEADER EDIGS,2,"#>"
 1793 08c8 42F804ED 		_NEST
 1794 08cc FFF7B2FC 		BL	DROP
 1795 08d0 FFF706FE 		BL	HLD
 1796 08d4 FFF790FC 		BL	AT
 1797 08d8 FFF716FF 		BL	PAD
 1798 08dc FFF7B6FC 		BL	OVER
 1799 08e0 FFF7E8FC 		BL	SUBB
 1800 08e4 52F804FB 		_UNNEST
 1801              	
 1802              	//    str	 ( n -- b u )
 1803              	// 	Convert a signed integer to a numeric string.
 1804              	
 1805              	// 	.word	_EDIGS+MAPOFFSET
 1806              	// _STRR	.byte  3
 1807              	// 	.ascii "str"
ARM GAS  stm32eforth.s 			page 36


 1808              	// 	.p2align 2 	
 1809              	STRR:
 1810 08e8 42F804ED 		_NEST
 1811 08ec FFF7A6FC 		BL	DUPP
 1812 08f0 FFF796FC 		BL	TOR
 1813 08f4 FFF74EFD 		BL	ABSS
 1814 08f8 FFF7A0FF 		BL	BDIGS
 1815 08fc FFF7C6FF 		BL	DIGS
 1816 0900 FFF784FC 		BL	RFROM
 1817 0904 FFF7D0FF 		BL	SIGN
 1818 0908 FFF7DEFF 		BL	EDIGS
 1819 090c 52F804FB 		_UNNEST
 1820              	
 1821              	//    HEX	 ( -- )
 1822              	// 	Use radix 16 as base for numeric conversions.
 1823              		_HEADER HEX,3,"HEX"
 1824 0910 42F804ED 		_NEST
 1825 0914 FFF739FC 		_DOLIT 16
 1825      10000000 
 1826 091c FFF7BEFD 		BL	BASE
 1827 0920 FFF764FC 		BL	STORE
 1828 0924 52F804FB 		_UNNEST
 1829              	
 1830              	//    DECIMAL	( -- )
 1831              	// 	Use radix 10 as base for numeric conversions.
 1832              		_HEADER DECIM,7,"DECIMAL"
 1833 0928 42F804ED 		_NEST
 1834 092c FFF72DFC 		_DOLIT 10
 1834      0A000000 
 1835 0934 FFF7B2FD 		BL	BASE
 1836 0938 FFF758FC 		BL	STORE
 1837 093c 52F804FB 		_UNNEST
 1838              	
 1839              	// **************************************************************************
 1840              	//  Numeric input, single precision
 1841              	
 1842              	//    DIGIT?	( c base -- u t )
 1843              	// 	Convert a character to its numeric value. A flag indicates success.
 1844              		_HEADER DIGTQ,6,"DIGIT?"
 1845 0940 42F804ED 		_NEST
 1846 0944 FFF76CFC 		BL	TOR
 1847 0948 FFF71FFC 		_DOLIT '0'
 1847      30000000 
 1848 0950 FFF7B0FC 		BL	SUBB
 1849 0954 FFF719FC 		_DOLIT 9
 1849      09000000 
 1850 095c FFF776FC 		BL	OVER
 1851 0960 FFF736FD 		BL	LESS
 1852 0964 FFF72EFC 		BL	QBRAN
 1853 0968 8C090018 		.word	DGTQ1+MAPOFFSET
 1854 096c FFF70DFC 		_DOLIT 7
 1854      07000000 
 1855 0974 FFF79EFC 		BL	SUBB
 1856 0978 FFF760FC 		BL	DUPP
 1857 097c FFF705FC 		_DOLIT 10
 1857      0A000000 
 1858 0984 FFF724FD 		BL	LESS
ARM GAS  stm32eforth.s 			page 37


 1859 0988 FFF770FC 		BL	ORR
 1860              	DGTQ1:
 1861 098c FFF756FC 	  BL	DUPP
 1862 0990 FFF73CFC 		BL	RFROM
 1863 0994 FFF714FD 		BL	ULESS
 1864 0998 52F804FB 		_UNNEST
 1865              	
 1866              	//    NUMBER?	( a -- n T | a F )
 1867              	// 	Convert a number word to integer. Push a flag on tos.
 1868              		_HEADER NUMBQ,7,"NUMBER?"
 1869 099c 42F804ED 		_NEST
 1870 09a0 FFF77CFD 		BL	BASE
 1871 09a4 FFF728FC 		BL	AT
 1872 09a8 FFF73AFC 		BL	TOR
 1873 09ac FFF7EDFB 		_DOLIT 0
 1873      00000000 
 1874 09b4 FFF74AFC 		BL	OVER
 1875 09b8 FFF73EFD 		BL	COUNT
 1876 09bc FFF746FC 		BL	OVER
 1877 09c0 FFF722FC 		BL	CAT
 1878 09c4 FFF7E1FB 		_DOLIT '$'
 1878      24000000 
 1879 09cc FFF7F0FC 		BL	EQUAL
 1880 09d0 FFF7F8FB 		BL	QBRAN
 1881 09d4 EC090018 		.word	NUMQ1+MAPOFFSET
 1882 09d8 FFF79AFF 		BL	HEX
 1883 09dc FFF732FC 		BL	SWAP
 1884 09e0 FFF780FC 		BL	ONEP
 1885 09e4 FFF72EFC 		BL	SWAP
 1886 09e8 FFF780FC 		BL	ONEM
 1887              	NUMQ1:
 1888 09ec FFF72EFC 		BL	OVER
 1889 09f0 FFF70AFC 		BL	CAT
 1890 09f4 FFF7C9FB 		_DOLIT '-'
 1890      2D000000 
 1891 09fc FFF7D8FC 		BL	EQUAL
 1892 0a00 FFF70EFC 		BL	TOR
 1893 0a04 FFF71EFC 		BL	SWAP
 1894 0a08 FFF706FC 		BL	RAT
 1895 0a0c FFF752FC 		BL	SUBB
 1896 0a10 FFF718FC 		BL	SWAP
 1897 0a14 FFF700FC 		BL	RAT
 1898 0a18 FFF748FC 		BL	PLUS
 1899 0a1c FFF790FC 		BL	QDUP
 1900 0a20 FFF7D0FB 		BL	QBRAN
 1901 0a24 B00A0018 		.word	NUMQ6+MAPOFFSET
 1902 0a28 FFF760FC 		BL	ONEM
 1903 0a2c FFF7F8FB 		BL	TOR
 1904              	NUMQ2:
 1905 0a30 FFF704FC 		BL	DUPP
 1906 0a34 FFF7F4FB 		BL	TOR
 1907 0a38 FFF7E6FB 		BL	CAT
 1908 0a3c FFF72EFD 		BL	BASE
 1909 0a40 FFF7DAFB 		BL	AT
 1910 0a44 FFF77CFF 		BL	DIGTQ
 1911 0a48 FFF7BCFB 		BL	QBRAN
 1912 0a4c 940A0018 		.word	NUMQ4+MAPOFFSET
ARM GAS  stm32eforth.s 			page 38


 1913 0a50 FFF7F8FB 		BL	SWAP
 1914 0a54 FFF722FD 		BL	BASE
 1915 0a58 FFF7CEFB 		BL	AT
 1916 0a5c FFF730FC 		BL	STAR
 1917 0a60 FFF724FC 		BL	PLUS
 1918 0a64 FFF7D2FB 		BL	RFROM
 1919 0a68 FFF73CFC 		BL	ONEP
 1920 0a6c FFF79BFB 		BL	DONXT
 1921 0a70 300A0018 		.word	NUMQ2+MAPOFFSET
 1922 0a74 FFF7D0FB 		BL	RAT
 1923 0a78 FFF7E4FB 		BL	SWAP
 1924 0a7c FFF7DAFB 		BL	DROP
 1925 0a80 FFF7A0FB 		BL	QBRAN
 1926 0a84 8C0A0018 		.word	NUMQ3+MAPOFFSET
 1927 0a88 FFF780FC 		BL	NEGAT
 1928              	NUMQ3:
 1929 0a8c FFF7DAFB 		BL	SWAP
 1930 0a90 00F00CB8 		B.W	NUMQ5
 1931              	NUMQ4:
 1932 0a94 FFF7BAFB 		BL	RFROM
 1933 0a98 FFF7B8FB 		BL	RFROM
 1934 0a9c FFF75CFC 		BL	DDROP
 1935 0aa0 FFF75AFC 		BL	DDROP
 1936 0aa4 FFF771FB 		_DOLIT	0
 1936      00000000 
 1937              	NUMQ5:
 1938 0aac FFF7C6FB 		BL	DUPP
 1939              	NUMQ6:
 1940 0ab0 FFF7ACFB 		BL	RFROM
 1941 0ab4 FFF750FC 		BL	DDROP
 1942 0ab8 FFF7A8FB 		BL	RFROM
 1943 0abc FFF7EEFC 		BL	BASE
 1944 0ac0 FFF794FB 		BL	STORE
 1945 0ac4 52F804FB 		_UNNEST
 1946              	
 1947              	// **************************************************************************
 1948              	//  Basic I/O
 1949              	
 1950              	//    KEY	 ( -- c )
 1951              	// 	Wait for and return an input character.
 1952              		_HEADER KEY,3,"KEY"
 1953 0ac8 42F804ED 		_NEST
 1954              	KEY1:
 1955 0acc FFF73AFB 		BL	QRX
 1956 0ad0 FFF778FB 		BL	QBRAN
 1957 0ad4 CC0A0018 		.word	KEY1+MAPOFFSET
 1958 0ad8 52F804FB 		_UNNEST
 1959              	
 1960              	//    SPACE	( -- )
 1961              	// 	Send the blank character to the output device.
 1962              		_HEADER SPACE,5,"SPACE"
 1963 0adc 42F804ED 		_NEST
 1964 0ae0 FFF718FC 		BL	BLANK
 1965 0ae4 FFF744FB 		BL	EMIT
 1966 0ae8 52F804FB 		_UNNEST
 1967              	
 1968              	//    SPACES	( +n -- )
ARM GAS  stm32eforth.s 			page 39


 1969              	// 	Send n spaces to the output device.
 1970              		_HEADER SPACS,6,"SPACES"
 1971 0aec 42F804ED 		_NEST
 1972 0af0 FFF74BFB 		_DOLIT 0
 1972      00000000 
 1973 0af8 FFF77AFC 		BL	MAX
 1974 0afc FFF790FB 		BL	TOR
 1975 0b00 00F002B8 		B.W	CHAR2
 1976              	CHAR1:
 1977 0b04 FFF7EAFF 		BL	SPACE
 1978              	CHAR2:
 1979 0b08 FFF74DFB 		BL	DONXT
 1980 0b0c 040B0018 		.word	CHAR1+MAPOFFSET
 1981 0b10 52F804FB 		_UNNEST
 1982              	
 1983              	//    TYPE	( b u -- )
 1984              	// 	Output u characters from b.
 1985              		_HEADER TYPEE,4,"TYPE"
 1986 0b14 42F804ED 		_NEST
 1987 0b18 FFF782FB 		BL  TOR   // ( a+1 -- R: u )
 1988 0b1c 00F006B8 		B.W	TYPE2
 1989              	TYPE1:  
 1990 0b20 FFF78AFC 		BL  COUNT
 1991 0b24 FFF7AEFD 		BL	TCHAR
 1992 0b28 FFF722FB 		BL	EMIT
 1993              	TYPE2:  
 1994 0b2c FFF73BFB 		BL  DONXT  
 1995 0b30 200B0018 		.word	TYPE1+MAPOFFSET
 1996 0b34 FFF77EFB 		BL	DROP
 1997 0b38 52F804FB 		_UNNEST
 1998              	
 1999              	//    CR	  ( -- )
 2000              	// 	Output a carriage return and a line feed.
 2001              		_HEADER CR,2,"CR"
 2002 0b3c 42F804ED 		_NEST
 2003 0b40 FFF723FB 		_DOLIT	CRR
 2003      0D000000 
 2004 0b48 FFF712FB 		BL	EMIT
 2005 0b4c FFF71DFB 		_DOLIT	LF
 2005      0A000000 
 2006 0b54 FFF70CFB 		BL	EMIT
 2007 0b58 52F804FB 		_UNNEST
 2008              	
 2009              	//    do_$	( -- a )
 2010              	// 	Return the address of a compiled string.
 2011              	//  adjust return address to skip over it.
 2012              	
 2013              	// 	.word	_CR+MAPOFFSET
 2014              	// _DOSTR	.byte  COMPO+3
 2015              	// 	.ascii "do$$"
 2016              	// 	.p2align 2 	
 2017              	DOSTR:
 2018 0b5c 42F804ED 		_NEST     
 2019              	/* compiled string address is 2 levels deep */
 2020 0b60 FFF754FB 		BL	RFROM	// { -- a1 }
 2021 0b64 FFF752FB 		BL	RFROM	//  {a1 -- a1 a2 } b0 set
 2022 0b68 FFF7C0FB 		BL	ONEM	//  clear b0
ARM GAS  stm32eforth.s 			page 40


 2023 0b6c FFF766FB 		BL	DUPP	// {a1 a2 -- a1 a2 a2 }
 2024 0b70 FFF762FC 		BL	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2025 0b74 FFF79AFB 		BL	PLUS	// { -- a1 a2 a2+1+c }
 2026 0b78 FFF77CFD 		BL	ALGND	//  end of string
 2027 0b7c FFF7B2FB 		BL	ONEP	//  restore b0, this result in return address 2 level deep.
 2028 0b80 FFF74EFB 		BL	TOR		//  address after string { -- a1 a2 }
 2029 0b84 FFF75EFB 		BL	SWAP	//  count tugged
 2030 0b88 FFF74AFB 		BL	TOR     //  ( -- a2) is string address
 2031 0b8c 52F804FB 		_UNNEST
 2032              	
 2033              	//    $"|	( -- a )
 2034              	// 	Run time routine compiled by _". Return address of a compiled string.
 2035              	
 2036              	// 	.word	_DOSTR+MAPOFFSET
 2037              	// _STRQP	.byte  COMPO+3
 2038              	// 	.ascii "$\"|"
 2039              	// 	.p2align 2 	
 2040              	STRQP:
 2041 0b90 42F804ED 		_NEST
 2042 0b94 FFF7E2FF 		BL	DOSTR
 2043 0b98 52F804FB 		_UNNEST			// force a call to dostr
 2044              	
 2045              	//    .$	( a -- )
 2046              	// 	Run time routine of ." . Output a compiled string.
 2047              	
 2048              	// 	.word	_STRQP+MAPOFFSET
 2049              	// _DOTST	.byte  COMPO+2
 2050              	// 	.ascii ".$$"
 2051              	// 	.p2align 2 	
 2052              	DOTST:
 2053 0b9c 42F804ED 		_NEST
 2054 0ba0 FFF74AFC 		BL	COUNT // ( -- a+1 c )
 2055 0ba4 FFF7B6FF 		BL	TYPEE
 2056 0ba8 52F804FB 		_UNNEST
 2057              	
 2058              	//    ."|	( -- )
 2059              	// 	Run time routine of ." . Output a compiled string.
 2060              	
 2061              	// 	.word	_DOTST+MAPOFFSET
 2062              	// _DOTQP	.byte  COMPO+3
 2063              	// 	.ascii ".""|"
 2064              	// 	.p2align 2 	
 2065              	DOTQP:
 2066 0bac 42F804ED 		_NEST
 2067 0bb0 FFF7D4FF 		BL	DOSTR
 2068 0bb4 FFF7F2FF 		BL	DOTST
 2069 0bb8 52F804FB 		_UNNEST
 2070              	
 2071              	//    .R	  ( n +n -- )
 2072              	// 	Display an integer in a field of n columns, right justified.
 2073              		_HEADER DOTR,2,".R"
 2074 0bbc 42F804ED 		_NEST
 2075 0bc0 FFF72EFB 		BL	TOR
 2076 0bc4 FFF790FE 		BL	STRR
 2077 0bc8 FFF720FB 		BL	RFROM
 2078 0bcc FFF73EFB 		BL	OVER
 2079 0bd0 FFF770FB 		BL	SUBB
ARM GAS  stm32eforth.s 			page 41


 2080 0bd4 FFF78AFF 		BL	SPACS
 2081 0bd8 FFF79CFF 		BL	TYPEE
 2082 0bdc 52F804FB 		_UNNEST
 2083              	
 2084              	//    U.R	 ( u +n -- )
 2085              	// 	Display an unsigned integer in n column, right justified.
 2086              		_HEADER UDOTR,3,"U.R"
 2087 0be0 42F804ED 		_NEST
 2088 0be4 FFF71CFB 		BL	TOR
 2089 0be8 FFF728FE 		BL	BDIGS
 2090 0bec FFF74EFE 		BL	DIGS
 2091 0bf0 FFF76AFE 		BL	EDIGS
 2092 0bf4 FFF70AFB 		BL	RFROM
 2093 0bf8 FFF728FB 		BL	OVER
 2094 0bfc FFF75AFB 		BL	SUBB
 2095 0c00 FFF774FF 		BL	SPACS
 2096 0c04 FFF786FF 		BL	TYPEE
 2097 0c08 52F804FB 		_UNNEST
 2098              	
 2099              	//    U.	  ( u -- )
 2100              	// 	Display an unsigned integer in free format.
 2101              		_HEADER UDOT,2,"U."
 2102 0c0c 42F804ED 		_NEST
 2103 0c10 FFF714FE 		BL	BDIGS
 2104 0c14 FFF73AFE 		BL	DIGS
 2105 0c18 FFF756FE 		BL	EDIGS
 2106 0c1c FFF75EFF 		BL	SPACE
 2107 0c20 FFF778FF 		BL	TYPEE
 2108 0c24 52F804FB 		_UNNEST
 2109              	
 2110              	//    .	   ( w -- )
 2111              	// 	Display an integer in free format, preceeded by a space.
 2112              		_HEADER DOT,1,"."
 2113 0c28 42F804ED 		_NEST
 2114 0c2c FFF736FC 		BL	BASE
 2115 0c30 FFF7E2FA 		BL	AT
 2116 0c34 FFF7A9FA 		_DOLIT	10
 2116      0A000000 
 2117 0c3c FFF71CFB 		BL	XORR			// ?decimal
 2118 0c40 FFF7C0FA 		BL	QBRAN
 2119 0c44 500C0018 		.word	DOT1+MAPOFFSET
 2120 0c48 FFF7E0FF 		BL	UDOT
 2121 0c4c 52F804FB 		_UNNEST			// no,display unsigned
 2122              	DOT1:
 2123 0c50 FFF74AFE 	    BL	STRR
 2124 0c54 FFF742FF 		BL	SPACE
 2125 0c58 FFF75CFF 		BL	TYPEE
 2126 0c5c 52F804FB 		_UNNEST			// yes, display signed
 2127              	
 2128              	//    ?	   ( a -- )
 2129              	// 	Display the contents in a memory cell.
 2130              		_HEADER QUEST,1,"?"
 2131 0c60 42F804ED 		_NEST
 2132 0c64 FFF7C8FA 		BL	AT
 2133 0c68 FFF7DEFF 		BL	DOT
 2134 0c6c 52F804FB 		_UNNEST
 2135              	
ARM GAS  stm32eforth.s 			page 42


 2136              	// **************************************************************************
 2137              	//  Parsing
 2138              	
 2139              	//    parse	( b u c -- b u delta //  string> )
 2140              	// 	Scan word delimited by c. Return found string and its offset.
 2141              	
 2142              	// 	.word	_QUEST+MAPOFFSET
 2143              	// _PARS	.byte  5
 2144              	// 	.ascii "parse"
 2145              	// 	.p2align 2 	
 2146              	PARS:
 2147 0c70 42F804ED 		_NEST
 2148 0c74 FFF717FC 		BL	TEMP
 2149 0c78 FFF7B8FA 		BL	STORE
 2150 0c7c FFF7E6FA 		BL	OVER
 2151 0c80 FFF7CEFA 		BL	TOR
 2152 0c84 FFF7DAFA 		BL	DUPP
 2153 0c88 FFF79CFA 		BL	QBRAN
 2154 0c8c 7E0D0018 		.word	PARS8+MAPOFFSET
 2155 0c90 FFF72CFB 		BL	ONEM
 2156 0c94 FFF707FC 		BL	TEMP
 2157 0c98 FFF7AEFA 		BL	AT
 2158 0c9c FFF73AFB 		BL	BLANK
 2159 0ca0 FFF786FB 		BL	EQUAL
 2160 0ca4 FFF78EFA 		BL	QBRAN
 2161 0ca8 F80C0018 		.word	PARS3+MAPOFFSET
 2162 0cac FFF7B8FA 		BL	TOR
 2163              	PARS1:
 2164 0cb0 FFF730FB 		BL	BLANK
 2165 0cb4 FFF7CAFA 		BL	OVER
 2166 0cb8 FFF7A6FA 		BL	CAT			// skip leading blanks 
 2167 0cbc FFF7FAFA 		BL	SUBB
 2168 0cc0 FFF7C8FA 		BL	ZLESS
 2169 0cc4 FFF75EFB 		BL	INVER
 2170 0cc8 FFF77CFA 		BL	QBRAN
 2171 0ccc F40C0018 		.word	PARS2+MAPOFFSET
 2172 0cd0 FFF708FB 		BL	ONEP
 2173 0cd4 FFF767FA 		BL	DONXT
 2174 0cd8 B00C0018 		.word	PARS1+MAPOFFSET
 2175 0cdc FFF796FA 		BL	RFROM
 2176 0ce0 FFF7A8FA 		BL	DROP
 2177 0ce4 FFF751FA 		_DOLIT	0
 2177      00000000 
 2178 0cec FFF7A6FA 		BL	DUPP
 2179 0cf0 52F804FB 		_UNNEST
 2180              	PARS2:
 2181 0cf4 FFF78AFA 	  BL	RFROM
 2182              	PARS3:
 2183 0cf8 FFF7A8FA 		BL	OVER
 2184 0cfc FFF7A2FA 		BL	SWAP
 2185 0d00 FFF78EFA 		BL	TOR
 2186              	PARS4:
 2187 0d04 FFF7CFFB 		BL	TEMP
 2188 0d08 FFF776FA 		BL	AT
 2189 0d0c FFF79EFA 		BL	OVER
 2190 0d10 FFF77AFA 		BL	CAT
 2191 0d14 FFF7CEFA 		BL	SUBB			// scan for delimiter
ARM GAS  stm32eforth.s 			page 43


 2192 0d18 FFF7C5FB 		BL	TEMP
 2193 0d1c FFF76CFA 		BL	AT
 2194 0d20 FFF7F8FA 		BL	BLANK
 2195 0d24 FFF744FB 		BL	EQUAL
 2196 0d28 FFF74CFA 		BL	QBRAN
 2197 0d2c 340D0018 		.word	PARS5+MAPOFFSET
 2198 0d30 FFF790FA 		BL	ZLESS
 2199              	PARS5:
 2200 0d34 FFF746FA 		BL	QBRAN
 2201 0d38 520D0018 		.word	PARS6+MAPOFFSET
 2202 0d3c FFF7D2FA 		BL	ONEP
 2203 0d40 FFF731FA 		BL	DONXT
 2204 0d44 040D0018 		.word	PARS4+MAPOFFSET
 2205 0d48 FFF778FA 		BL	DUPP
 2206 0d4c FFF768FA 		BL	TOR
 2207 0d50 09E0     		B	PARS7
 2208              	PARS6:
 2209 0d52 FFF75BFA 		BL	RFROM
 2210 0d56 FFF76DFA 		BL	DROP
 2211 0d5a FFF76FFA 		BL	DUPP
 2212 0d5e FFF7C1FA 		BL	ONEP
 2213 0d62 FFF75DFA 		BL	TOR
 2214              	PARS7:
 2215 0d66 FFF771FA 		BL	OVER
 2216 0d6a FFF7A3FA 		BL	SUBB
 2217 0d6e FFF74DFA 		BL	RFROM
 2218 0d72 FFF74BFA 		BL	RFROM
 2219 0d76 FFF79DFA 		BL	SUBB
 2220 0d7a 52F804FB 		_UNNEST
 2221              	PARS8:
 2222 0d7e FFF765FA 		BL	OVER
 2223 0d82 FFF743FA 		BL	RFROM
 2224 0d86 FFF795FA 		BL	SUBB
 2225 0d8a 52F804FB 		_UNNEST
 2226              	
 2227              	//    PARSE	( c -- b u //  string> )
 2228              	// 	Scan input stream and return counted string delimited by c.
 2229 0d8e 00BF     		_HEADER PARSE,5,"PARSE"
 2230 0d90 42F804ED 		_NEST
 2231 0d94 FFF744FA 		BL	TOR
 2232 0d98 FFF7BEFC 		BL	TIB
 2233 0d9c FFF78EFB 		BL	INN
 2234 0da0 FFF72AFA 		BL	AT
 2235 0da4 FFF782FA 		BL	PLUS			// current input buffer pointer
 2236 0da8 FFF78EFB 		BL	NTIB
 2237 0dac FFF724FA 		BL	AT
 2238 0db0 FFF784FB 		BL	INN
 2239 0db4 FFF720FA 		BL	AT
 2240 0db8 FFF77CFA 		BL	SUBB			// remaining count
 2241 0dbc FFF726FA 		BL	RFROM
 2242 0dc0 FFF756FF 		BL	PARS
 2243 0dc4 FFF77AFB 		BL	INN
 2244 0dc8 FFF71EFB 		BL	PSTOR
 2245 0dcc 52F804FB 		_UNNEST
 2246              	
 2247              	//    .(	  ( -- )
 2248              	// 	Output following string up to next ) .
ARM GAS  stm32eforth.s 			page 44


 2249              		_HEADER DOTPR,IMEDD+2,".("
 2250 0dd0 42F804ED 		_NEST
 2251 0dd4 FFF7D9F9 		_DOLIT	')'
 2251      29000000 
 2252 0ddc FFF7D8FF 		BL	PARSE
 2253 0de0 FFF798FE 		BL	TYPEE
 2254 0de4 52F804FB 		_UNNEST
 2255              	
 2256              	//    (	   ( -- )
 2257              	// 	Ignore following string up to next ) . A comment.
 2258              		_HEADER PAREN,IMEDD+1,"("
 2259 0de8 42F804ED 		_NEST
 2260 0dec FFF7CDF9 		_DOLIT	')'
 2260      29000000 
 2261 0df4 FFF7CCFF 		BL	PARSE
 2262 0df8 FFF7AEFA 		BL	DDROP
 2263 0dfc 52F804FB 		_UNNEST
 2264              	
 2265              	//    \	   ( -- )
 2266              	// 	Ignore following text till the end of line.
 2267              		_HEADER BKSLA,1,"\\"
 2268 0e00 42F804ED 		_NEST
 2269 0e04 FFF760FB 		BL	NTIB
 2270 0e08 FFF7F6F9 		BL	AT
 2271 0e0c FFF756FB 		BL	INN
 2272 0e10 FFF7ECF9 		BL	STORE
 2273 0e14 52F804FB 		_UNNEST
 2274              	
 2275              	//    CHAR	( -- c )
 2276              	// 	Parse next word and return its first character.
 2277              		_HEADER CAHR,4,"CHAR"
 2278 0e18 42F804ED 		_NEST
 2279 0e1c FFF77AFA 		BL	BLANK
 2280 0e20 FFF7B6FF 		BL	PARSE
 2281 0e24 FFF706FA 		BL	DROP
 2282 0e28 FFF7EEF9 		BL	CAT
 2283 0e2c 52F804FB 		_UNNEST
 2284              	
 2285              	//    WORD	( c -- a //  string> )
 2286              	// 	Parse a word from input stream and copy it to code dictionary.
 2287              		_HEADER WORDD,4,"WORD"
 2288 0e30 42F804ED 		_NEST
 2289 0e34 FFF7ACFF 		BL	PARSE
 2290 0e38 FFF75EFC 		BL	HERE
 2291 0e3c FFF762FA 		BL	CELLP
 2292 0e40 FFF7AEFC 		BL	PACKS
 2293 0e44 52F804FB 		_UNNEST
 2294              	
 2295              	//    TOKEN	( -- a //  string> )
 2296              	// 	Parse a word from input stream and copy it to name dictionary.
 2297              		_HEADER TOKEN,5,"TOKEN"
 2298 0e48 42F804ED 		_NEST
 2299 0e4c FFF762FA 		BL	BLANK
 2300 0e50 FFF7EEFF 		BL	WORDD
 2301 0e54 52F804FB 		_UNNEST
 2302              	
 2303              	// **************************************************************************
ARM GAS  stm32eforth.s 			page 45


 2304              	//  Dictionary search
 2305              	
 2306              	//    >CFA	( na -- cfa )
 2307              	// 	Return a code field address given a name address.
 2308              		_HEADER TOCFA,4,">CFA"
 2309 0e58 42F804ED 		_NEST
 2310 0e5c FFF7ECFA 		BL	COUNT
 2311 0e60 FFF793F9 		_DOLIT	0x1F
 2311      1F000000 
 2312 0e68 FFF7FAF9 		BL	ANDD
 2313 0e6c FFF71EFA 		BL	PLUS
 2314 0e70 FFF700FC 		BL	ALGND
 2315 0e74 52F804FB 		_UNNEST
 2316              	
 2317              	//	NAME> ( na -- ca ) 
 2318              	// Return code address 
 2319              		_HEADER NAMET,5,"NAME>"
 2320 0e78 42F804ED 		_NEST 
 2321 0e7c FFF7ECFF 		BL	TOCFA
 2322 0e80 FFF7BAF9 		BL	AT  
 2323 0e84 52F804FB 		_UNNEST 
 2324              	
 2325              	
 2326              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2327              	// 	Compare u bytes in two strings. Return 0 if identical.
 2328              	//
 2329              	//  Picatout 2020-12-01, 
 2330              	//      Because of problem with .align directive that
 2331              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2332              	// 		words  to do a byte by byte comparison. 
 2333              	//
 2334              		_HEADER SAMEQ,5,"SAME?"
 2335 0e88 42F804ED 		_NEST
 2336 0e8c FFF7C8F9 		BL	TOR
 2337 0e90 00F01EB8 		B.W	SAME2
 2338              	SAME1:
 2339 0e94 FFF7DAF9 		BL	OVER  // ( a1 a2 -- a1 a2 a1 )
 2340 0e98 FFF7BEF9 		BL	RAT   // a1 a2 a1 u 
 2341 0e9c FFF706FA 		BL	PLUS  // a1 a2 a1+u 
 2342 0ea0 FFF7B2F9 		BL	CAT	   // a1 a2 c1    		
 2343 0ea4 FFF7D2F9 		BL	OVER  // a1 a2 c1 a2 
 2344 0ea8 FFF7B6F9 		BL	RAT    
 2345 0eac FFF7FEF9 		BL	PLUS    
 2346 0eb0 FFF7AAF9 		BL	CAT	  // a1 a2 c1 c2
 2347 0eb4 FFF7FEF9 		BL	SUBB  
 2348 0eb8 FFF742FA 		BL	QDUP
 2349 0ebc FFF782F9 		BL	QBRAN
 2350 0ec0 D00E0018 		.word	SAME2+MAPOFFSET
 2351 0ec4 FFF7A2F9 		BL	RFROM
 2352 0ec8 FFF7B4F9 		BL	DROP
 2353 0ecc 52F804FB 		_UNNEST	// strings not equal
 2354              	SAME2:
 2355 0ed0 FFF769F9 		BL	DONXT
 2356 0ed4 940E0018 		.word	SAME1+MAPOFFSET
 2357 0ed8 FFF757F9 		_DOLIT	0
 2357      00000000 
 2358 0ee0 52F804FB 		_UNNEST	// strings equal
ARM GAS  stm32eforth.s 			page 46


 2359              	
 2360              	//    find	( a na -- ca na | a F )
 2361              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2362              	
 2363              	//  Picatout 2020-12-01,  
 2364              	//		Modified from original. See comment for word "SAME?" 
 2365              	
 2366              	// 	.word	_SAMEQ+MAPOFFSET
 2367              	// _FIND	.byte  4
 2368              	// 	.ascii "find"
 2369              	// 	.p2align 2 	
 2370              	FIND:
 2371 0ee4 42F804ED 		_NEST
 2372 0ee8 FFF7ACF9 		BL	SWAP			// na a	
 2373 0eec FFF7A4FA 		BL	COUNT			// na a+1 count
 2374 0ef0 FFF7A4F9 		BL	DUPP 
 2375 0ef4 FFF7D7FA 		BL	TEMP
 2376 0ef8 FFF778F9 		BL	STORE			// na a+1 count 
 2377 0efc FFF790F9 		BL  TOR		// na a+1  R: count  
 2378 0f00 FFF7A0F9 		BL	SWAP			// a+1 na
 2379              	FIND1:
 2380 0f04 FFF79AF9 		BL	DUPP			// a+1 na na
 2381 0f08 FFF75CF9 		BL	QBRAN
 2382 0f0c 540F0018 		.word	FIND6+MAPOFFSET	// end of vocabulary
 2383 0f10 FFF794F9 		BL	DUPP			// a+1 na na
 2384 0f14 FFF778F9 		BL	CAT			// a+1 na name1
 2385 0f18 FFF737F9 		_DOLIT	MASKK
 2385      1FFFFFFF 
 2386 0f20 FFF79EF9 		BL	ANDD
 2387 0f24 FFF778F9 		BL	RAT			// a+1 na name1 count 
 2388 0f28 FFF7A6F9 		BL	XORR			// a+1 na,  same length?
 2389 0f2c FFF74AF9 		BL	QBRAN
 2390 0f30 400F0018 		.word	FIND2+MAPOFFSET
 2391 0f34 FFF7EAF9 		BL	CELLM			// a+1 la
 2392 0f38 FFF75EF9 		BL	AT			// a+1 next_na
 2393 0f3c FFF7E2BF 		B.w	FIND1			// try next word
 2394              	FIND2:   
 2395 0f40 FFF7D0F9 		BL	ONEP			// a+1 na+1
 2396 0f44 FFF7AFFA 		BL	TEMP
 2397 0f48 FFF756F9 		BL	AT			// a+1 na+1 count
 2398 0f4c FFF79CFF 		BL	SAMEQ		// a+1 na+1 ? 
 2399              	FIND3:	
 2400 0f50 00F00CB8 		B.w	FIND4
 2401              	FIND6:	
 2402 0f54 FFF75AF9 		BL	RFROM			// a+1 0 name1 -- , no match
 2403 0f58 FFF76CF9 		BL	DROP			// a+1 0
 2404 0f5c FFF772F9 		BL	SWAP			// 0 a+1
 2405 0f60 FFF7C4F9 		BL	ONEM			// 0 a
 2406 0f64 FFF76EF9 		BL	SWAP			// a 0 
 2407 0f68 52F804FB 		_UNNEST			// return without a match
 2408              	FIND4:	
 2409 0f6c FFF72AF9 		BL	QBRAN			// a+1 na+1
 2410 0f70 840F0018 		.word	FIND5+MAPOFFSET	// found a match
 2411 0f74 FFF7BAF9 		BL	ONEM			// a+1 na
 2412 0f78 FFF7C8F9 		BL	CELLM			// a+4 la
 2413 0f7c FFF73CF9 		BL	AT			// a+1 next_na
 2414 0f80 FFF7C0BF 		B.w	FIND1			// compare next name
ARM GAS  stm32eforth.s 			page 47


 2415              	FIND5:	
 2416 0f84 FFF742F9 		BL	RFROM			// a+1 na+1 count
 2417 0f88 FFF754F9 		BL	DROP			// a+1 na+1
 2418 0f8c FFF75AF9 		BL	SWAP			// na+1 a+1
 2419 0f90 FFF750F9 		BL	DROP			// na+1
 2420 0f94 FFF7AAF9 		BL	ONEM			// na
 2421 0f98 FFF750F9 		BL	DUPP			// na na
 2422 0f9c FFF76CFF 		BL	NAMET			// na ca
 2423 0fa0 FFF750F9 		BL	SWAP			// ca na
 2424 0fa4 52F804FB 		_UNNEST			//  return with a match
 2425              	
 2426              	//    NAME?	( a -- ca na | a F )
 2427              	// 	Search all context vocabularies for a string.
 2428              		_HEADER NAMEQ,5,"NAME?"
 2429 0fa8 42F804ED 		_NEST
 2430 0fac FFF79EFA 		BL	CNTXT
 2431 0fb0 FFF722F9 		BL	AT
 2432 0fb4 FFF796FF 		BL	FIND
 2433 0fb8 52F804FB 		_UNNEST
 2434              	
 2435              	// **************************************************************************
 2436              	//  Terminal input
 2437              	
 2438              	//    	  ( bot eot cur -- bot eot cur )
 2439              	// 	Backup the cursor by one character.
 2440              	
 2441              	// 	.word	_NAMEQ+MAPOFFSET
 2442              	// _BKSP	.byte  2
 2443              	// 	.ascii "^H"
 2444              	// 	.p2align 2 	
 2445              	BKSP:
 2446 0fbc 42F804ED 		_NEST
 2447 0fc0 FFF72EF9 		BL	TOR
 2448 0fc4 FFF742F9 		BL	OVER
 2449 0fc8 FFF720F9 		BL	RFROM
 2450 0fcc FFF73AF9 		BL	SWAP
 2451 0fd0 FFF73CF9 		BL	OVER
 2452 0fd4 FFF750F9 		BL	XORR
 2453 0fd8 FFF7F4F8 		BL	QBRAN
 2454 0fdc 04100018 		.word	BACK1+MAPOFFSET
 2455 0fe0 FFF7D3F8 		_DOLIT	BKSPP
 2455      08000000 
 2456 0fe8 FFF7C2F8 		BL	TECHO
 2457              	// 	BL	ATEXE
 2458 0fec FFF77EF9 		BL	ONEM
 2459 0ff0 FFF790F9 		BL	BLANK
 2460 0ff4 FFF7BCF8 		BL	TECHO
 2461              	// 	BL	ATEXE
 2462 0ff8 FFF7C7F8 		_DOLIT	BKSPP
 2462      08000000 
 2463 1000 FFF7B6F8 		BL	TECHO
 2464              	// 	BL	ATEXE
 2465              	BACK1:
 2466 1004 52F804FB 		  _UNNEST
 2467              	
 2468              	//    TAP	 ( bot eot cur c -- bot eot cur )
 2469              	// 	Accept and echo the key stroke and bump the cursor.
ARM GAS  stm32eforth.s 			page 48


 2470              	
 2471              	// 	.word	_BKSP+MAPOFFSET
 2472              	// _TAP	.byte  3
 2473              	// 	.ascii "TAP"
 2474              	// 	.p2align 2 	
 2475              	TAP:
 2476 1008 42F804ED 		_NEST
 2477 100c FFF716F9 		BL	DUPP
 2478 1010 FFF7AEF8 		BL	TECHO
 2479              	// 	BL	ATEXE
 2480 1014 FFF71AF9 		BL	OVER
 2481 1018 FFF7F0F8 		BL	CSTOR
 2482 101c FFF762F9 		BL	ONEP
 2483 1020 52F804FB 		_UNNEST
 2484              	
 2485              	//    kTAP	( bot eot cur c -- bot eot cur )
 2486              	// 	Process a key stroke, CR or backspace.
 2487              	
 2488              	// 	.word	_TAP+MAPOFFSET
 2489              	// _KTAP	.byte  4
 2490              	// 	.ascii "kTAP"
 2491              	// 	.p2align 2 	
 2492              	KTAP:
 2493              	TTAP:
 2494 1024 42F804ED 		_NEST
 2495 1028 FFF708F9 		BL	DUPP
 2496 102c FFF7ADF8 		_DOLIT	CRR
 2496      0D000000 
 2497 1034 FFF720F9 		BL	XORR
 2498 1038 FFF7C4F8 		BL	QBRAN
 2499 103c 6C100018 		.word	KTAP2+MAPOFFSET
 2500 1040 FFF7A3F8 		_DOLIT	BKSPP
 2500      08000000 
 2501 1048 FFF716F9 		BL	XORR
 2502 104c FFF7BAF8 		BL	QBRAN
 2503 1050 64100018 		.word	KTAP1+MAPOFFSET
 2504 1054 FFF75EF9 		BL	BLANK
 2505 1058 FFF7D6FF 		BL	TAP
 2506 105c 52F804FB 		_UNNEST
 2507 1060 00000000 		.word	0			// patch
 2508              	KTAP1:
 2509 1064 FFF7AAFF 	  BL	BKSP
 2510 1068 52F804FB 		_UNNEST
 2511              	KTAP2:
 2512 106c FFF7E2F8 	  BL	DROP
 2513 1070 FFF7E8F8 		BL	SWAP
 2514 1074 FFF7DEF8 		BL	DROP
 2515 1078 FFF7E0F8 		BL	DUPP
 2516 107c 52F804FB 		_UNNEST
 2517              	
 2518              	//    ACCEPT	( b u -- b u )
 2519              	// 	Accept characters to input buffer. Return with actual count.
 2520              		_HEADER ACCEP,6,"ACCEPT"
 2521 1080 42F804ED 		_NEST
 2522 1084 FFF7E2F8 		BL	OVER
 2523 1088 FFF710F9 		BL	PLUS
 2524 108c FFF7DEF8 		BL	OVER
ARM GAS  stm32eforth.s 			page 49


 2525              	ACCP1:
 2526 1090 FFF768F9 	  BL	DDUP
 2527 1094 FFF7F0F8 		BL	XORR
 2528 1098 FFF794F8 		BL	QBRAN
 2529 109c CC100018 		.word	ACCP4+MAPOFFSET
 2530 10a0 FFF712FD 		BL	KEY
 2531 10a4 FFF7CAF8 		BL	DUPP
 2532 10a8 FFF734F9 		BL	BLANK
 2533 10ac FFF76DF8 		_DOLIT	127
 2533      7F000000 
 2534 10b4 FFF74CFA 		BL	WITHI
 2535 10b8 FFF784F8 		BL	QBRAN
 2536 10bc C6100018 		.word	ACCP2+MAPOFFSET
 2537 10c0 FFF7A2FF 		BL	TAP
 2538 10c4 01E0     		B	ACCP3
 2539              	ACCP2:
 2540 10c6 FFF7ADFF 	  BL	KTAP
 2541              	// 	BL	ATEXE
 2542              	ACCP3:	  
 2543 10ca E1E7     		B	ACCP1
 2544              	ACCP4:
 2545 10cc FFF7B2F8 	  BL	DROP
 2546 10d0 FFF7BCF8 		BL	OVER
 2547 10d4 FFF7EEF8 		BL	SUBB
 2548 10d8 52F804FB 		_UNNEST
 2549              	
 2550              	//    QUERY	( -- )
 2551              	// 	Accept input stream to terminal input buffer.
 2552              		_HEADER QUERY,5,"QUERY"
 2553 10dc 42F804ED 		_NEST
 2554 10e0 FFF71AFB 		BL	TIB
 2555 10e4 FFF751F8 		_DOLIT	80
 2555      50000000 
 2556 10ec FFF7C8FF 		BL	ACCEP
 2557 10f0 FFF7EAF9 		BL	NTIB
 2558 10f4 FFF77AF8 		BL	STORE
 2559 10f8 FFF79CF8 		BL	DROP
 2560 10fc FFF745F8 		_DOLIT	0
 2560      00000000 
 2561 1104 FFF7DAF9 		BL	INN
 2562 1108 FFF770F8 		BL	STORE
 2563 110c 52F804FB 		_UNNEST
 2564              	
 2565              	// **************************************************************************
 2566              	//  Error handling
 2567              	
 2568              	//    ABORT	( a -- )
 2569              	// 	Reset data stack and jump to QUIT.
 2570              		_HEADER ABORT,5,"ABORT"
 2571 1110 42F804ED 		_NEST
 2572 1114 FFF7E2FC 		BL	SPACE
 2573              	ABORT1:
 2574 1118 FFF78EF9 		BL	COUNT
 2575 111c FFF7FAFC 		BL	TYPEE
 2576 1120 FFF733F8 		_DOLIT	0X3F
 2576      3F000000 
 2577 1128 FFF722F8 		BL	EMIT
ARM GAS  stm32eforth.s 			page 50


 2578 112c FFF706FD 		BL	CR
 2579 1130 00F08AF8 		BL	PRESE
 2580 1134 00F092B8 		B.W	QUIT
 2581              	
 2582              	//    _abort"	( f -- )
 2583              	// 	Run time routine of ABORT" . Abort with a message.
 2584              	
 2585              	// 	.word	_ABORT+MAPOFFSET
 2586              	// _ABORQ	.byte  COMPO+6
 2587              	// 	.ascii "abort\""
 2588              	// 	.p2align 2 	
 2589              	ABORQ:
 2590 1138 42F804ED 		_NEST
 2591 113c FFF70EFD 		BL	DOSTR 
 2592 1140 FFF780F8 		BL	SWAP 
 2593 1144 FFF73EF8 		BL	QBRAN
 2594 1148 4E110018 		.word	1f+MAPOFFSET	// text flag
 2595 114c E4E7     		B	ABORT1 
 2596              	1:
 2597 114e FFF771F8 		BL	DROP
 2598 1152 52F804FB 		_UNNEST			// drop error
 2599              	
 2600              	// **************************************************************************
 2601              	//  The text interpreter
 2602              	
 2603              	//    $INTERPRET  ( a -- )
 2604              	// 	Interpret a word. If failed, try to convert it to an integer.
 2605 1156 00BF     		_HEADER INTER,10,"$INTERPRET"
 2606 1158 42F804ED 		_NEST
 2607 115c FFF724FF 		BL	NAMEQ
 2608 1160 FFF7EEF8 		BL	QDUP	// ?defined
 2609 1164 FFF72EF8 		BL	QBRAN
 2610 1168 98110018 		.word	INTE1+MAPOFFSET
 2611 116c FFF744F8 		BL	AT
 2612 1170 FFF70BF8 		_DOLIT	COMPO
 2612      40000000 
 2613 1178 FFF772F8 		BL	ANDD	// ?compile only lexicon bits
 2614 117c FFF7DCFF 		BL	ABORQ
 2615 1180 0D       		.byte	13
 2616 1181 20636F6D 		.ascii " compile only"
 2616      70696C65 
 2616      206F6E6C 
 2616      79
 2617 118e 00BF     		.p2align 2 	
 2618 1190 FFF704F8 		BL	EXECU
 2619 1194 52F804FB 		_UNNEST			// execute defined word
 2620              	INTE1:
 2621 1198 FFF700FC 	  BL	NUMBQ
 2622 119c FFF712F8 		BL	QBRAN
 2623 11a0 A8110018 		.word	INTE2+MAPOFFSET
 2624 11a4 52F804FB 		_UNNEST
 2625              	INTE2:
 2626 11a8 FFF7B2BF 	  B.W	ABORT	// error
 2627              	
 2628              	//    [	   ( -- )
 2629              	// 	Start the text interpreter.
 2630              		_HEADER LBRAC,IMEDD+1,"["
ARM GAS  stm32eforth.s 			page 51


 2631 11ac 42F804ED 		_NEST
 2632 11b0 FEF7EBFF 		_DOLIT	INTER+MAPOFFSET
 2632      58110018 
 2633 11b8 FFF78CF9 		BL	TEVAL
 2634 11bc FFF716F8 		BL	STORE
 2635 11c0 52F804FB 		_UNNEST
 2636              	
 2637              	//    .OK	 ( -- )
 2638              	// 	Display "ok" only while interpreting.
 2639              		_HEADER DOTOK,3,".OK"
 2640 11c4 42F804ED 		_NEST
 2641 11c8 FEF7DFFF 		_DOLIT	INTER+MAPOFFSET
 2641      58110018 
 2642 11d0 FFF780F9 		BL	TEVAL
 2643 11d4 FFF710F8 		BL	AT
 2644 11d8 FFF7EAF8 		BL	EQUAL
 2645 11dc FEF7F2FF 		BL	QBRAN
 2646 11e0 EC110018 		.word	DOTO1+MAPOFFSET
 2647 11e4 FFF7E2FC 		BL	DOTQP
 2648 11e8 03       		.byte	3
 2649 11e9 206F6B   		.ascii " ok"
 2650              	DOTO1:
 2651 11ec FFF7A6FC 		BL	CR
 2652 11f0 52F804FB 		_UNNEST
 2653              	
 2654              	//    ?STACK	( -- )
 2655              	// 	Abort if the data stack underflows.
 2656              		_HEADER QSTAC,6,"?STACK"
 2657 11f4 42F804ED 		_NEST
 2658 11f8 FFF764FA 		BL	DEPTH
 2659 11fc FFF72AF8 		BL	ZLESS	// check only for underflow
 2660 1200 FFF79AFF 		BL	ABORQ
 2661 1204 0A       		.byte	10
 2662 1205 20756E64 		.ascii " underflow"
 2662      6572666C 
 2662      6F77
 2663 120f 00       		.p2align 2 	
 2664 1210 52F804FB 		_UNNEST
 2665              	
 2666              	//    EVAL	( -- )
 2667              	// 	Interpret the input stream.
 2668              		_HEADER EVAL,4,"EVAL"
 2669 1214 42F804ED 		_NEST
 2670              	EVAL1:
 2671 1218 FFF716FE 	    BL	TOKEN
 2672 121c FFF70EF8 		BL	DUPP
 2673 1220 FEF7F2FF 		BL	CAT	// ?input stream empty
 2674 1224 FEF7CEFF 		BL	QBRAN
 2675 1228 3C120018 		.word	EVAL2+MAPOFFSET
 2676 122c FFF752F9 		BL	TEVAL
 2677 1230 FFF776FA 		BL	ATEXE
 2678 1234 FFF7DEFF 		BL	QSTAC	// evaluate input, check stack
 2679 1238 FFF7EEBF 		B.W	EVAL1
 2680              	EVAL2:
 2681 123c FEF7FAFF 		BL	DROP
 2682 1240 FFF7C0FF 		BL	DOTOK
 2683 1244 52F804FB 		_UNNEST	// prompt
ARM GAS  stm32eforth.s 			page 52


 2684              	
 2685              	//    PRESET	( -- )
 2686              	// 	Reset data stack pointer and the terminal input buffer.
 2687              		_HEADER PRESE,6,"PRESET"
 2688 1248 42F804ED 		_NEST
 2689 124c 4FF49D41 		_MOV32 R1,SPP // init SP 
 2689      C2F20001 
 2690 1254 85EA0505 		EOR	R5,R5,R5//  init TOS=0
 2691 1258 52F804FB 		_UNNEST 
 2692              	
 2693              	//    QUIT	( -- )
 2694              	// 	Reset return stack pointer and start text interpreter.
 2695              		_HEADER QUIT,4,"QUIT"
 2696 125c 42F804ED 		_NEST
 2697 1260 4FF49F42 		_MOV32 R2,RPP
 2697      C2F20002 
 2698              	QUIT1:
 2699 1268 FFF7A0FF 		BL	LBRAC			// start interpretation
 2700              	QUIT2:
 2701 126c FFF736FF 		BL	QUERY			// get input
 2702 1270 FFF7D0FF 		BL	EVAL
 2703 1274 FEF7B2FF 		BL	BRAN
 2704 1278 6C120018 		.word	QUIT2+MAPOFFSET	// continue till error
 2705              	
 2706              	/***************************
 2707              	//  Flash memory interface
 2708              	***************************/
 2709              	// UNLOCK ( T|F -- )
 2710              	// lock or unlock FLASH write 
 2711              		_HEADER UNLOCK,6,"UNLOCK"
 2712 127c 42F804ED 		_NEST 
 2713 1280 FEF7A0FF 		BL QBRAN
 2714 1284 A4120018 		.word LOCK+MAPOFFSET
 2715 1288 D548     		ldr	r0, flash_regs 
 2716 128a 4FF03404 		mov r4,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 2717 128e C460     		str r4,[r0,#FLASH_SR]
 2718 1290 0469     		ldr r4,[r0,#FLASH_CR]
 2719 1292 14F0800F 		tst r4,#(1<<7)
 2720 1296 03D0     		beq 1f 
 2721 1298 D24C     		ldr	r4, flash_regs+4 // key1
 2722 129a 4460     		str	r4, [r0, #FLASH_KEYR]
 2723 129c D24C     		ldr	r4, flash_regs+8 // key2 
 2724 129e 4460     		str	r4, [r0, #FLASH_KEYR]
 2725              		/* unlock option registers */
 2726              	/*
 2727              		ldr	r4, flash_regs+4 
 2728              		str	r4, [r0, #FLASH_OPTKEYR]
 2729              		ldr	r4, flash_regs+8
 2730              		str	r4, [r0, #FLASH_OPTKEYR]
 2731              	*/ 
 2732              	1:
 2733 12a0 52F804FB 		_UNNEST
 2734              	 // lock flash memory
 2735              	LOCK: 
 2736 12a4 CE48     		ldr r0,flash_regs  
 2737              	//	ldr r4,[r0,#FLASH_CR]
 2738 12a6 4FF08004 		mov r4,#(1<<7)
ARM GAS  stm32eforth.s 			page 53


 2739 12aa 0461     		str r4,[r0,#FLASH_CR]
 2740 12ac 52F804FB 		_UNNEST  
 2741              	
 2742              	WAIT_BSY:
 2743 12b0 CB48     		ldr	r0,flash_regs
 2744              	WAIT1:
 2745 12b2 C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 2746 12b4 14F00104 		ands	r4, #0x1	//  BSY
 2747 12b8 FBD1     		bne	WAIT1
 2748 12ba 7047     		_NEXT
 2749              	
 2750              	//    ERASE_PAGE	   ( adr -- )
 2751              	// 	  Erase one page of flash memory.
 2752              	//    stm32f103 page size is 1024 bytes 
 2753              	//    adr is any address inside page to erase 
 2754              		_HEADER EPAGE,10,"ERASE_PAGE"
 2755 12bc 42F804ED 		_NEST
 2756 12c0 FFF7F6FF 		bl	WAIT_BSY
 2757 12c4 FEF761FF 		_DOLIT 1 
 2757      01000000 
 2758 12cc FFF7D6FF 		bl  UNLOCK 
 2759 12d0 C348     		ldr r0,flash_regs 	 
 2760 12d2 4FF00204 		mov r4,#2 // set PER bit 
 2761 12d6 0461     		str r4,[r0,#FLASH_CR]
 2762 12d8 4561     		str r5,[r0,#FLASH_AR] // page to erase address 
 2763 12da 0469     		ldr	r4,[r0, #FLASH_CR]	
 2764 12dc 44F04004 		orr	R4,#0x40	//  set STRT bit   
 2765 12e0 0461     		str	r4,[r0, #FLASH_CR]	//  start erasing
 2766 12e2 FFF7E5FF 	 	bl	WAIT_BSY // wait until done
 2767 12e6 FEF750FF 		_DOLIT 0 
 2767      00000000 
 2768 12ee FFF7C5FF 		bl	UNLOCK  // lock flash write 
 2769 12f2 C568     		ldr r5,[r0,#FLASH_SR] // check for errors 
 2770 12f4 05F01405 		and r5,r5,#(5<<2)
 2771 12f8 FFF71EFF 		bl ABORQ 
 2772 12fc 0D       		.byte 13
 2773 12fd 20657261 		.ascii " erase error!"
 2773      73652065 
 2773      72726F72 
 2773      21
 2774 130a 00BF     		.p2align 2
 2775 130c 52F804FB 		_UNNEST
 2776              	
 2777              	// store 16 bit word
 2778              	// expect flash unlocked  
 2779              	HWORD_WRITE: // ( hword address -- )
 2780 1310 42F804ED 		_NEST
 2781 1314 0469     		ldr	r4, [r0, #FLASH_CR]	//  FLASH_CR
 2782              	//	bic r4,#(1<<9)|(1<<5)|(1<<4)|(1<<2)|(1<<1) //  clear OPTWRE|OPTER|OPTPG|MER|PER
 2783 1316 4FF00104 		mov r4,#1 // set PG 
 2784 131a 0461     		str r4,[r0,#FLASH_CR]
 2785 131c 2E46     		mov r6,r5 
 2786 131e 51F8045B 		_POP 
 2787 1322 3580     		strh r5,[r6] 
 2788 1324 FFF7C4FF 		bl WAIT_BSY 
 2789 1328 C568     		ldr r5,[r0,#FLASH_SR]
 2790 132a 05F01405 		and r5,r5,#(5<<2) 
ARM GAS  stm32eforth.s 			page 54


 2791 132e FEF749FF 		bl QBRAN
 2792 1332 48130018 		.word 1f+MAPOFFSET 
 2793 1336 FFF7FFFE 		bl ABORQ
 2794 133a 0D       		.byte 13
 2795 133b 20777269 		.ascii " write error!"
 2795      74652065 
 2795      72726F72 
 2795      21
 2796              		.p2align 2
 2797              	1:	 
 2798 1348 52F804FB 		_UNNEST 
 2799              	
 2800              	
 2801              	//    I!	   ( data address -- )
 2802              	// 	   Write one word into flash memory
 2803              	//	   address must even 
 2804              		_HEADER ISTOR,2,"I!"
 2805 134c 42F804ED 		_NEST
 2806 1350 FFF7AEFF 		bl	WAIT_BSY
 2807 1354 FEF719FF 		_DOLIT 1 
 2807      01000000 
 2808 135c FFF78EFF 		bl  UNLOCK 
 2809 1360 FFF700F8 		BL DDUP 
 2810 1364 FEF75CFF 		BL TOR 
 2811 1368 FEF75AFF 		BL TOR 
 2812 136c FFF7D0FF 		BL HWORD_WRITE
 2813 1370 FEF74CFF 		BL RFROM 
 2814 1374 4FEA3545 		ror r5,r5,#16
 2815 1378 FEF748FF 		BL RFROM 
 2816 137c 05F10205 		add r5,r5,#2 
 2817 1380 FFF7C6FF 		BL HWORD_WRITE 
 2818 1384 FEF701FF 		_DOLIT 0
 2818      00000000 
 2819 138c FFF776FF 		bl UNLOCK 
 2820 1390 52F804FB 		_UNNEST
 2821              	
 2822              	// IMG_SIZE ( -- u )
 2823              	// return flash pages required to save 
 2824              	// user ram  
 2825              		_HEADER IMG_SIZE,8,"IMG_SIZE"
 2826 1394 42F804ED 		_NEST
 2827 1398 FEF7F7FE 		_DOLIT VARS_END_OFS-IMG_SIGN_OFS 
 2827      38000000 
 2828 13a0 FFF7C2F8 		BL USER_END 
 2829 13a4 FFF7BAF8 		BL USER_BEGIN 
 2830 13a8 FEF784FF 		BL SUBB 
 2831 13ac FEF77EFF 		BL PLUS 
 2832 13b0 FEF7EBFE 		_DOLIT 1024 
 2832      00040000 
 2833 13b8 FFF728F9 		BL SLMOD 
 2834 13bc FEF742FF 		BL SWAP 
 2835 13c0 FEF700FF 		BL QBRAN 
 2836 13c4 CC130018 		.word 1f+MAPOFFSET 
 2837 13c8 FEF78CFF 		BL ONEP
 2838              	1:
 2839 13cc 52F804FB 		_UNNEST  
 2840              	
ARM GAS  stm32eforth.s 			page 55


 2841              	// IMG? (  -- T|F )
 2842              	// check if an image has been saved in FLASH 
 2843              		_HEADER IMGQ,4,"IMG?"
 2844 13d0 42F804ED 		_NEST 
 2845 13d4 FFF7B0F8 		BL IMG_ADR 
 2846 13d8 FEF70EFF 		BL AT 
 2847 13dc FFF7B2F8 		BL IMG_SIGN  
 2848 13e0 FEF70AFF 		BL AT 
 2849 13e4 FEF748FF 		BL XORR  
 2850 13e8 FEF7DAFF 		BL ZEQUAL
 2851 13ec 52F804FB 		_UNNEST
 2852              	
 2853              	// LOAD_IMG (  -- )
 2854              	// Load image from FLASH to RAM. 
 2855              		_HEADER LOAD_IMG,8,"LOAD_IMG"
 2856 13f0 42F804ED 		_NEST 
 2857 13f4 FFF7ECFF 		BL IMGQ 
 2858 13f8 FEF7E4FE 		BL QBRAN 
 2859 13fc 44140018 		.word 1f+MAPOFFSET
 2860              	/* copy system variables to RAM */
 2861 1400 FFF79AF8 		BL IMG_ADR 
 2862 1404 FEF71AFF 		BL DUPP 
 2863 1408 FEF70AFF 		BL TOR   // save source address 
 2864 140c FFF79AF8 		BL IMG_SIGN 
 2865 1410 41F8045D 		_PUSH 
 2866 1414 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 2867 1418 FEF710FF 		BL DUPP 
 2868 141c FEF700FF 		BL TOR 
 2869 1420 FFF79AF9 		BL MOVE // ( src dest count -- ) R: src count 
 2870              	/* copy user definitions */
 2871 1424 FEF7F2FE 		BL RFROM 
 2872 1428 FEF7F0FE 		BL RFROM  
 2873 142c FEF73EFF 		BL PLUS // source address  
 2874 1430 FFF774F8 		BL USER_BEGIN // destination address
 2875 1434 FFF760F9 		BL HERE  
 2876 1438 FEF708FF 		BL OVER 
 2877 143c FEF73AFF 		BL SUBB  // byte count 
 2878 1440 FFF78AF9 		BL MOVE
 2879 1444 52F804FB 	1:	_UNNEST  
 2880              	
 2881              	// ERASE_MPG ( u1 u2 -- )
 2882              	// erase many pages 
 2883              	// u1 first page number 
 2884              	// u2 how many pages  
 2885              		_HEADER ERASE_MPG,9,"ERASE_MPG"
 2886 1448 42F804ED 		_NEST 
 2887 144c FEF7E8FE 		BL TOR 
 2888 1450 00F040F8 		BL PG_TO_ADR 
 2889 1454 FEF7C2FE 		BL BRAN 
 2890 1458 70140018 		.word 2f+MAPOFFSET 
 2891              	1:
 2892 145c FEF7EEFE 		BL DUPP 
 2893 1460 FEF7DEFE 		BL TOR 
 2894 1464 FFF72AFF 		BL EPAGE 
 2895 1468 FEF7D0FE 		BL RFROM
 2896 146c 05F58065 		add r5,#PAGE_SIZE 
 2897              	2:
ARM GAS  stm32eforth.s 			page 56


 2898 1470 FEF799FE 		BL DONXT
 2899 1474 5C140018 		.word 1b+MAPOFFSET 
 2900 1478 51F8045B 		_POP 
 2901 147c 52F804FB 		_UNNEST 
 2902              	
 2903              	// FLSH_WR ( src dest u -- dest+u )
 2904              	// write u words to flash memory 
 2905              		_HEADER FLSH_WR,7,"FLSH_WR"
 2906 1480 42F804ED 		_NEST 
 2907 1484 FEF7CCFE 		BL TOR
 2908 1488 FEF7A8FE 		BL BRAN 
 2909 148c B0140018 		.word 3f+MAPOFFSET  
 2910              	/* write system variables to FLASH */
 2911 1490 FEF7C6FE 	2:  BL TOR  // destination address 
 2912 1494 FEF7D2FE 		BL DUPP 
 2913 1498 FEF7AEFE 		BL AT   // get data 
 2914 149c FEF7BCFE 		BL RAT  // get destination address 
 2915 14a0 FFF754FF 		BL ISTOR
 2916 14a4 FEF72EFF 		BL CELLP  // increment source address 
 2917 14a8 FEF7B0FE 		BL RFROM 
 2918 14ac FEF72AFF 		BL CELLP  // increment dest address 
 2919 14b0 FEF779FE 	3:	BL DONXT 
 2920 14b4 90140018 		.word 2b+MAPOFFSET
 2921 14b8 FEF7B2FE 		BL TOR 
 2922 14bc FEF7BAFE 		BL DROP 
 2923 14c0 FEF7A4FE 		BL RFROM 
 2924 14c4 52F804FB 		_UNNEST 
 2925              	
 2926              	// ADR>PG ( a -- n )
 2927              	// convert address to page number, {0..127} 
 2928              		_HEADER ADR_TO_PG,6,"ADR>PG"
 2929 14c8 4FEA9525 		lsr r5,#10 
 2930 14cc 05F07F05 		and r5,#127 
 2931 14d0 7047     		_NEXT  
 2932              	
 2933              	// PG>ADR ( n -- a )
 2934              	// convert page# to address 
 2935 14d2 00BF     		_HEADER PG_TO_ADR,6,"PG>ADR"
 2936 14d4 C0F20205 		movt r5,#2
 2937 14d8 4FEA8525 		lsl r5,#10 
 2938 14dc 7047     		_NEXT 
 2939              	
 2940              	// ERASE_IMG (  -- )
 2941              	// erase image in from FLASH  
 2942 14de 00BF     		_HEADER ERASE_IMG,9,"ERASE_IMG"
 2943 14e0 42F804ED 		_NEST
 2944 14e4 FFF728F8 		BL IMG_ADR 
 2945 14e8 FFF754FF 		BL IMG_SIZE 
 2946 14ec FEF798FE 		BL TOR 
 2947 14f0 FEF774FE 		BL BRAN 
 2948 14f4 04150018 		.word  2f+MAPOFFSET 
 2949 14f8 FEF7A0FE 	1:	BL DUPP 
 2950 14fc FFF7DEFE 		BL EPAGE
 2951 1500 05F58065 		ADD R5,#PAGE_SIZE 
 2952 1504 FEF74FFE 	2:	BL DONXT 
 2953 1508 F8140018 		.word 1b+MAPOFFSET 
 2954 150c FEF792FE 		BL DROP 
ARM GAS  stm32eforth.s 			page 57


 2955 1510 52F804FB 		_UNNEST 
 2956              	
 2957              	// SAVE_IMG ( -- )
 2958              	// save in FLASH memory system variables and user defintitions.
 2959              		_HEADER SAVE_IMG,8,"SAVE_IMG"
 2960 1514 42F804ED 		_NEST 
 2961 1518 FFF7EEF8 		BL HERE 
 2962 151c FEF7FEFF 		BL USER_BEGIN
 2963 1520 FEF746FF 		BL EQUAL 
 2964 1524 FEF74EFE 		BL QBRAN
 2965 1528 30150018 		.word 1f+MAPOFFSET 
 2966 152c 52F804FB 		_UNNEST  // nothing to save 
 2967 1530 FFF74EFF 	1:	BL IMGQ 
 2968 1534 FEF746FE 		BL QBRAN 
 2969 1538 40150018 		.word 2f+MAPOFFSET
 2970              	/* delete saved image */
 2971 153c FFF7D0FF 		BL ERASE_IMG 
 2972              	/* save system variables */
 2973              	2:	
 2974 1540 FFF700F8 		BL IMG_SIGN // src address 
 2975 1544 FEF7F8FF 		BL IMG_ADR  //  ( src dest --  
 2976 1548 41F8045D 		_PUSH 
 2977 154c 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 2978 1550 FEF7EAFE 		BL CELLSL  // word count 
 2979 1554 FFF794FF 		BL FLSH_WR  // ( src dest count -- dest+u )
 2980              	/* write user definitions */
 2981 1558 FEF7E0FF 		BL USER_BEGIN
 2982 155c FEF772FE 		BL SWAP  // ( src dest+ -- )
 2983 1560 FFF7CAF8 		BL HERE   
 2984 1564 FEF7DAFF 		BL USER_BEGIN 
 2985 1568 FEF7A4FE 		BL SUBB 
 2986 156c FEF7DCFE 		BL CELLSL  // src dest+ count -- 
 2987 1570 FFF786FF 		BL FLSH_WR  
 2988 1574 52F804FB 		_UNNEST 
 2989              	
 2990              	// TURNKEY ( -- "WORD") 
 2991              	// set autorun program in 'BOOT variable 
 2992              	// and save image in slot 0.
 2993              		_HEADER TURNKEY,7,"TURNKEY"
 2994 1578 42F804ED 		_NEST 
 2995 157c 00F036F8 		BL TICK 
 2996 1580 FEF786FF 		BL TBOOT 
 2997 1584 FEF732FE 		BL STORE 
 2998 1588 FFF7C4FF 		BL SAVE_IMG 
 2999 158c 52F804FB 		_UNNEST
 3000              	
 3001              	// FORGET ( -- ) "word"
 3002              	// forget all words defined from "word"	
 3003              		_HEADER FORGET,6,"FORGET"
 3004 1590 42F804ED 		_NEST 
 3005 1594 FFF758FC 		BL TOKEN 
 3006 1598 FEF750FE 		BL DUPP 
 3007 159c FEF712FE 		BL QBRAN 
 3008 15a0 FEF7F3FD 		_DOLIT 9f+MAPOFFSET 
 3008      DC150018 
 3009 15a8 FFF7FEFC 		BL NAMEQ // ( a -- ca na | a 0 )
 3010 15ac FEF7C8FE 		BL QDUP 
ARM GAS  stm32eforth.s 			page 58


 3011 15b0 FEF708FE 		BL QBRAN 
 3012 15b4 D8150018 		.word 8f+MAPOFFSET
 3013 15b8 FEF7A8FE 		BL CELLM // ( ca la )
 3014 15bc FEF73EFE 		BL DUPP 
 3015 15c0 FEF79AFF 		BL CPP   
 3016 15c4 FEF712FE 		BL STORE
 3017 15c8 FEF716FE 		BL AT 
 3018 15cc FEF7A0FF 		BL LAST 
 3019 15d0 FEF70CFE 		BL STORE
 3020 15d4 00F0A0F9 		BL OVERT 
 3021 15d8 FEF72CFE 	8:  BL DROP 
 3022 15dc 52F804FB 	9:	_UNNEST 
 3023              	
 3024              	flash_regs:
 3025 15e0 00200240 		.word FLASH_BASE_ADR // 0 
 3026 15e4 23016745 		.word FLASH_KEY1   // 4 
 3027 15e8 AB89EFCD 		.word FLASH_KEY2   // 8
 3028              	
 3029              	// **************************************************************************
 3030              	//  The compiler
 3031              	
 3032              	//    '	   ( -- ca )
 3033              	// 	Search context vocabularies for the next word in input stream.
 3034              		_HEADER TICK,1,"'"
 3035 15ec 42F804ED 		_NEST
 3036 15f0 FFF72AFC 		BL	TOKEN
 3037 15f4 FFF7D8FC 		BL	NAMEQ	// ?defined
 3038 15f8 FEF7E4FD 		BL	QBRAN
 3039 15fc 04160018 		.word	TICK1+MAPOFFSET
 3040 1600 52F804FB 		_UNNEST	// yes, push code address
 3041 1604 FFF784BD 	TICK1:	B.W	ABORT	// no, error
 3042              	
 3043              	//    ALLOT	( n -- )
 3044              	// 	Allocate n bytes to the ram area.
 3045              		_HEADER ALLOT,5,"ALLOT"
 3046 1608 42F804ED 		_NEST
 3047 160c FEF774FF 		BL	CPP
 3048 1610 FEF7FAFE 		BL	PSTOR
 3049 1614 52F804FB 		_UNNEST			// adjust code pointer
 3050              	
 3051              	//    ,	   ( w -- )
 3052              	// 	Compile an integer into the code dictionary.
 3053              		_HEADER COMMA,1,","
 3054 1618 42F804ED 		_NEST
 3055 161c FFF76CF8 		BL	HERE
 3056 1620 FEF70CFE 		BL	DUPP
 3057 1624 FEF76EFE 		BL	CELLP	// cell boundary
 3058 1628 FEF766FF 		BL	CPP
 3059 162c FEF7DEFD 		BL	STORE
 3060 1630 FEF7DCFD 		BL	STORE
 3061 1634 52F804FB 		_UNNEST	// adjust code pointer, compile
 3062              		.p2align 2 
 3063              	//    [COMPILE]   ( -- //  string> )
 3064              	// 	Compile the next immediate word into code dictionary.
 3065              		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3066 1638 42F804ED 		_NEST
 3067 163c FFF7D6FF 		BL	TICK
ARM GAS  stm32eforth.s 			page 59


 3068 1640 FFF7EAFF 		BL	COMMA
 3069 1644 52F804FB 		_UNNEST
 3070              	
 3071              	//    COMPILE	( -- )
 3072              	// 	Compile the next address in colon list to code dictionary.
 3073              		_HEADER COMPI,COMPO+7,"COMPILE"
 3074 1648 42F804ED 		_NEST
 3075 164c FEF7DEFD 		BL	RFROM
 3076 1650 25F00105 		BIC	R5,R5,#1
 3077 1654 FEF7F2FD 		BL	DUPP
 3078 1658 FEF7CEFD 		BL	AT
 3079 165c 00F0A3F9 		BL	CALLC			// compile BL instruction
 3080 1660 FEF750FE 		BL	CELLP
 3081 1664 45F00105 		ORR	R5,R5,#1
 3082 1668 FEF7DAFD 		BL	TOR
 3083 166c 52F804FB 		_UNNEST			// adjust return address
 3084              	
 3085              	//    LITERAL	( w -- )
 3086              	// 	Compile tos to code dictionary as an integer literal.
 3087              		_HEADER LITER,IMEDD+7,"LITERAL"
 3088 1670 68090018 		.word	_COMPI+MAPOFFSET
 3089 1674 42F804ED 		_NEST
 3090 1678 FFF7E6FF 		BL	COMPI
 3091 167c 8A010018 		.word	DOLIT+MAPOFFSET
 3092 1680 FFF7CAFF 		BL	COMMA
 3093 1684 52F804FB 		_UNNEST
 3094              	
 3095              	//    $,"	( -- )
 3096              	// 	Compile a literal string up to next " .
 3097              	
 3098              	// 	.word	_LITER+MAPOFFSET
 3099              	// _STRCQ	.byte  3
 3100              	// 	.ascii "$$,"""
 3101              	// 	.p2align 2 	
 3102              	STRCQ:
 3103 1688 42F804ED 		_NEST
 3104 168c FEF77DFD 		_DOLIT	-4
 3104      FCFFFFFF 
 3105 1694 FEF730FF 		BL	CPP
 3106 1698 FEF7B6FE 		BL	PSTOR
 3107 169c FEF775FD 		_DOLIT	'\"'
 3107      22000000 
 3108 16a4 FFF7C4FB 		BL	WORDD			// move word to code dictionary
 3109 16a8 FEF7C6FE 		BL	COUNT
 3110 16ac FEF7FEFD 		BL	PLUS
 3111 16b0 FEF7E0FF 		BL	ALGND			// calculate aligned end of string
 3112 16b4 FEF720FF 		BL	CPP
 3113 16b8 FEF798FD 		BL	STORE
 3114 16bc 52F804FB 		_UNNEST 			// adjust the code pointer
 3115              	
 3116              	// **************************************************************************
 3117              	//  Structures
 3118              	
 3119              	//    FOR	 ( -- a )
 3120              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3121              		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3122 16c0 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 60


 3123 16c4 FFF7C0FF 		BL	COMPI
 3124 16c8 20020018 		.word	TOR+MAPOFFSET
 3125 16cc FFF714F8 		BL	HERE
 3126 16d0 52F804FB 		_UNNEST
 3127              	
 3128              	//    BEGIN	( -- a )
 3129              	// 	Start an infinite or indefinite loop structure.
 3130              		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3131 16d4 42F804ED 		_NEST
 3132 16d8 FFF70EF8 		BL	HERE
 3133 16dc 52F804FB 		_UNNEST
 3134              		.p2align 2 
 3135              	//    NEXT	( a -- )
 3136              	// 	Terminate a FOR-NEXT loop structure.
 3137              		_HEADER NEXT,COMPO+IMEDD+4,"NEXT"
 3138 16e0 42F804ED 		_NEST
 3139 16e4 FFF7B0FF 		BL	COMPI
 3140 16e8 A6010018 		.word	DONXT+MAPOFFSET
 3141 16ec FFF794FF 		BL	COMMA
 3142 16f0 52F804FB 		_UNNEST
 3143              	
 3144              	//    UNTIL	( a -- )
 3145              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3146              		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3147 16f4 42F804ED 		_NEST
 3148 16f8 FFF7A6FF 		BL	COMPI
 3149 16fc C4010018 		.word	QBRAN+MAPOFFSET
 3150 1700 FFF78AFF 		BL	COMMA
 3151 1704 52F804FB 		_UNNEST
 3152              	
 3153              	//    AGAIN	( a -- )
 3154              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3155              		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3156 1708 42F804ED 		_NEST
 3157 170c FFF79CFF 		BL	COMPI
 3158 1710 DC010018 		.word	BRAN+MAPOFFSET
 3159 1714 FFF780FF 		BL	COMMA
 3160 1718 52F804FB 		_UNNEST
 3161              	
 3162              	//    IF	  ( -- A )
 3163              	// 	Begin a conditional branch structure.
 3164              		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3165 171c 42F804ED 		_NEST
 3166 1720 FFF792FF 		BL	COMPI
 3167 1724 C4010018 		.word	QBRAN+MAPOFFSET
 3168 1728 FEF7E6FF 		BL	HERE
 3169 172c FEF72DFD 		_DOLIT	4
 3169      04000000 
 3170 1734 FEF7E0FE 		BL	CPP
 3171 1738 FEF766FE 		BL	PSTOR
 3172 173c 52F804FB 		_UNNEST
 3173              	
 3174              	//    AHEAD	( -- A )
 3175              	// 	Compile a forward branch instruction.
 3176              		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3177 1740 42F804ED 		_NEST
 3178 1744 FFF780FF 		BL	COMPI
ARM GAS  stm32eforth.s 			page 61


 3179 1748 DC010018 		.word	BRAN+MAPOFFSET
 3180 174c FEF7D4FF 		BL	HERE
 3181 1750 FEF71BFD 		_DOLIT	4
 3181      04000000 
 3182 1758 FEF7CEFE 		BL	CPP
 3183 175c FEF754FE 		BL	PSTOR
 3184 1760 52F804FB 		_UNNEST
 3185              	
 3186              	//    REPEAT	( A a -- )
 3187              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3188              		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3189 1764 42F804ED 		_NEST
 3190 1768 FFF7CEFF 		BL	AGAIN
 3191 176c FEF7C4FF 		BL	HERE
 3192 1770 FEF768FD 		BL	SWAP
 3193 1774 FEF73AFD 		BL	STORE
 3194 1778 52F804FB 		_UNNEST
 3195              	
 3196              	//    THEN	( A -- )
 3197              	// 	Terminate a conditional branch structure.
 3198              		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3199 177c 42F804ED 		_NEST
 3200 1780 FEF7BAFF 		BL	HERE
 3201 1784 FEF75EFD 		BL	SWAP
 3202 1788 FEF730FD 		BL	STORE
 3203 178c 52F804FB 		_UNNEST
 3204              	
 3205              	//    AFT	 ( a -- a A )
 3206              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3207              		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3208 1790 42F804ED 		_NEST
 3209 1794 FEF74EFD 		BL	DROP
 3210 1798 FFF7D2FF 		BL	AHEAD
 3211 179c FFF79AFF 		BL	BEGIN
 3212 17a0 FEF750FD 		BL	SWAP
 3213 17a4 52F804FB 		_UNNEST
 3214              	
 3215              	//    ELSE	( A -- A )
 3216              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3217              		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3218 17a8 42F804ED 		_NEST
 3219 17ac FFF7C8FF 		BL	AHEAD
 3220 17b0 FEF748FD 		BL	SWAP
 3221 17b4 FFF7E2FF 		BL	THENN
 3222 17b8 52F804FB 		_UNNEST
 3223              	
 3224              	//    WHILE	( a -- A a )
 3225              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3226              		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3227 17bc 42F804ED 		_NEST
 3228 17c0 FFF7ACFF 		BL	IFF
 3229 17c4 FEF73EFD 		BL	SWAP
 3230 17c8 52F804FB 		_UNNEST
 3231              	
 3232              	//    ABORT"	( -- //  string> )
 3233              	// 	Conditional abort with an error message.
 3234              		_HEADER ABRTQ,IMEDD+6,"ABORT\""
ARM GAS  stm32eforth.s 			page 62


 3235 17cc 42F804ED 		_NEST
 3236 17d0 FFF73AFF 		BL	COMPI
 3237 17d4 38110018 		.word	ABORQ+MAPOFFSET
 3238 17d8 FFF756FF 		BL	STRCQ
 3239 17dc 52F804FB 		_UNNEST
 3240              	
 3241              	//    $"	( -- //  string> )
 3242              	// 	Compile an inline string literal.
 3243              		_HEADER STRQ,IMEDD+2,"$\""
 3244 17e0 42F804ED 		_NEST
 3245 17e4 FFF730FF 		BL	COMPI
 3246 17e8 900B0018 		.word	STRQP+MAPOFFSET
 3247 17ec FFF74CFF 		BL	STRCQ
 3248 17f0 52F804FB 		_UNNEST
 3249              	
 3250              	//    ."	( -- //  string> )
 3251              	// 	Compile an inline word  literal to be typed out at run time.
 3252              		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3253 17f4 42F804ED 		_NEST
 3254 17f8 FFF726FF 		BL	COMPI
 3255 17fc AC0B0018 		.word	DOTQP+MAPOFFSET
 3256 1800 FFF742FF 		BL	STRCQ
 3257 1804 52F804FB 		_UNNEST
 3258              	
 3259              	/*******************
 3260              	  Name compiler
 3261              	*******************/
 3262              	
 3263              	//    ?UNIQUE	( a -- a )
 3264              	// 	Display a warning message if the word already exists.
 3265              		_HEADER UNIQU,7,"?UNIQUE"
 3266 1808 42F804ED 		_NEST
 3267 180c FEF716FD 		BL	DUPP
 3268 1810 FFF7CAFB 		BL	NAMEQ			// ?name exists
 3269 1814 FEF7D6FC 		BL	QBRAN
 3270 1818 34180018 		.word	UNIQ1+MAPOFFSET	// redefinitions are OK
 3271 181c FFF7C6F9 		BL	DOTQP
 3272 1820 07       		.byte	7
 3273 1821 20726544 		.ascii " reDef "		// but warn the user
 3273      656620
 3274              		.p2align 2 	
 3275 1828 FEF710FD 		BL	OVER
 3276 182c FEF704FE 		BL	COUNT
 3277 1830 FFF770F9 		BL	TYPEE			// just in case its not planned
 3278              	UNIQ1:
 3279 1834 FEF7FEFC 		BL	DROP
 3280 1838 52F804FB 		_UNNEST
 3281              	
 3282              	//    $,n	 ( na -- )
 3283              	// 	Build a new dictionary name using the data at na.
 3284              	
 3285              	// 	.word	_UNIQU+MAPOFFSET
 3286              	// _SNAME	.byte  3
 3287              	// 	.ascii "$,n"
 3288              	// 	.p2align 2 	
 3289              	SNAME:
 3290 183c 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 63


 3291 1840 FEF7FCFC 		BL	DUPP			//  na na
 3292 1844 FEF7E0FC 		BL	CAT			//  ?null input
 3293 1848 FEF7BCFC 		BL	QBRAN
 3294 184c 84180018 		.word	SNAM1+MAPOFFSET
 3295 1850 FFF7DAFF 		BL	UNIQU			//  na
 3296 1854 FEF75CFE 		BL	LAST			//  na last
 3297 1858 FEF7CEFC 		BL	AT			//  na la
 3298 185c FFF7DCFE 		BL	COMMA			//  na
 3299 1860 FEF7ECFC 		BL	DUPP			//  na na
 3300 1864 FEF754FE 		BL	LAST			//  na na last
 3301 1868 FEF7C0FC 		BL	STORE			//  na , save na for vocabulary link
 3302 186c FEF7E4FD 		BL	COUNT			//  na+1 count
 3303 1870 FEF71CFD 		BL	PLUS			//  na+1+count
 3304 1874 FEF7FEFE 		BL	ALGND			//  word boundary
 3305 1878 FEF73EFE 		BL	CPP
 3306 187c FEF7B6FC 		BL	STORE			//  top of dictionary now
 3307 1880 52F804FB 		_UNNEST
 3308              	SNAM1:
 3309 1884 FFF784F9 		BL	STRQP
 3310 1888 07       		.byte	7
 3311 1889 206E616D 		.ascii " name? "
 3311      653F20
 3312 1890 FFF73EBC 		B.W	ABORT
 3313              	
 3314              	//    $COMPILE	( a -- )
 3315              	// 	Compile next word to code dictionary as a token or literal.
 3316              		_HEADER SCOMP,7,"$COMPILE"
 3317 1894 42F804ED 		_NEST
 3318 1898 FFF786FB 		BL	NAMEQ
 3319 189c FEF750FD 		BL	QDUP	// defined?
 3320 18a0 FEF790FC 		BL	QBRAN
 3321 18a4 D0180018 		.word	SCOM2+MAPOFFSET
 3322 18a8 FEF7A6FC 		BL	AT
 3323 18ac FEF76DFC 		_DOLIT	IMEDD
 3323      80000000 
 3324 18b4 FEF7D4FC 		BL	ANDD	// immediate?
 3325 18b8 FEF784FC 		BL	QBRAN
 3326 18bc C8180018 		.word	SCOM1+MAPOFFSET
 3327 18c0 FEF76CFC 		BL	EXECU
 3328 18c4 52F804FB 		_UNNEST			// it's immediate, execute
 3329              	SCOM1:
 3330 18c8 00F06DF8 		BL	CALLC			// it's not immediate, compile
 3331 18cc 52F804FB 		_UNNEST	
 3332              	SCOM2:
 3333 18d0 FFF764F8 		BL	NUMBQ
 3334 18d4 FEF776FC 		BL	QBRAN
 3335 18d8 E4180018 		.word	SCOM3+MAPOFFSET
 3336 18dc FFF7C8FE 		BL	LITER
 3337 18e0 52F804FB 		_UNNEST			// compile number as integer
 3338              	SCOM3: // compilation abort 
 3339 18e4 00F002F8 		BL COLON_ABORT 
 3340 18e8 FFF712BC 		B.W	ABORT			// error
 3341              	
 3342              	// before aborting a compilation 
 3343              	// reset HERE and LAST
 3344              	// to previous values.  
 3345              	COLON_ABORT:
ARM GAS  stm32eforth.s 			page 64


 3346 18ec 42F804ED 		_NEST 
 3347 18f0 FEF70EFE 		BL LAST 
 3348 18f4 FEF780FC 		BL AT 
 3349 18f8 FEF708FD 		BL CELLM 
 3350 18fc FEF79EFC 		BL DUPP 
 3351 1900 FEF7FAFD 		BL CPP  
 3352 1904 FEF772FC 		BL STORE 
 3353 1908 FEF776FC 		BL AT 
 3354 190c FEF700FE 		BL LAST 
 3355 1910 FEF76CFC 		BL STORE 
 3356 1914 52F804FB 		_UNNEST 
 3357              	
 3358              	//    OVERT	( -- )
 3359              	// 	Link a new word into the current vocabulary.
 3360              		_HEADER OVERT,5,"OVERT"
 3361 1918 42F804ED 		_NEST
 3362 191c FEF7F8FD 		BL	LAST
 3363 1920 FEF76AFC 		BL	AT
 3364 1924 FEF7E2FD 		BL	CNTXT
 3365 1928 FEF760FC 		BL	STORE
 3366 192c 52F804FB 		_UNNEST
 3367              	
 3368              	//    ; 	   ( -- )
 3369              	// 	Terminate a colon definition.
 3370              		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3371 1930 42F804ED 		_NEST
 3372 1934 FEF729FC 		BL	DOLIT 
 3373 1938 52F804FB 		_UNNEST
 3374 193c FFF76CFE 		BL	COMMA
 3375 1940 FFF734FC 		BL	LBRAC
 3376 1944 FFF7E8FF 		BL	OVERT
 3377 1948 52F804FB 		_UNNEST
 3378              	
 3379              	//    ]	   ( -- )
 3380              	// 	Start compiling the words in the input stream.
 3381              		_HEADER RBRAC,1,"]"
 3382 194c 42F804ED 		_NEST
 3383 1950 FEF71BFC 		_DOLIT SCOMP+MAPOFFSET
 3383      94180018 
 3384 1958 FEF7BCFD 		BL	TEVAL
 3385 195c FEF746FC 		BL	STORE
 3386 1960 52F804FB 		_UNNEST
 3387              	
 3388              	
 3389              	//    COMPILE_BLW	( ca -- asm_code )
 3390              	// 	Assemble a branch-link long instruction to ca.
 3391              	// ref: ARM-v7M architecture reference, section A7.7.18 
 3392              	COMPILE_BLW:
 3393 1964 4FEA6505 		ASR R5,R5,#1 
 3394 1968 4FF45044 		_MOV32 R4,0xF000D000 
 3394      CFF20004 
 3395 1970 65F30A04 		BFI R4,R5,#0,#11
 3396 1974 4FEAD525 		LSR R5,#11
 3397 1978 65F31944 		BFI R4,R5,#16,#10
 3398 197c 4FEAA525 		ASR R5,#10
 3399 1980 65F3CB24 		BFI R4,R5,#11,#1
 3400 1984 4FEA6505 		ASR R5,#1
ARM GAS  stm32eforth.s 			page 65


 3401 1988 65F34D34 		BFI R4,R5,#13,#1
 3402 198c 4FEA6505 		ASR R5,#1
 3403 1990 65F39A64 		BFI R4,R5,#26,#1
 3404 1994 14F0806F 		TST R4,#(1<<26)
 3405 1998 02D1     		BNE 1f
 3406 199a 00BF     		NOP 
 3407 199c 84F42054 		EOR R4,R4,#(5<<11)
 3408 19a0 4FEA3445 	1:  ROR R5,R4,#16 
 3409 19a4 7047     		_NEXT 
 3410              	
 3411              	// 	.word	_RBRAC+MAPOFFSET
 3412              	// _CALLC	.byte  5
 3413              	// 	.ascii "call,"
 3414              	// 	.p2align 2 	
 3415              	CALLC:
 3416 19a6 42F804ED 		_NEST
 3417 19aa 25F00105 		BIC R5,R5,#1 
 3418 19ae FEF7A3FE 		BL HERE 
 3419 19b2 FEF77FFC 		BL SUBB 
 3420 19b6 A5F10405 		SUB R5,R5,#4 
 3421 19ba FFF7D3FF 		BL COMPILE_BLW 
 3422 19be FFF72BFE 		BL	COMMA			//  assemble BL.W instruction
 3423 19c2 52F804FB 		_UNNEST
 3424              	
 3425              		.p2align 
 3426              	// 	:	( -- //  string> )
 3427              	// 	Start a new colon definition using next word as its name.
 3428 19c6 00BF     		_HEADER COLON,1,":"
 3429 19c8 42F804ED 		_NEST
 3430 19cc 00F03AF8 		BL	HEAD 
 3431 19d0 FFF7BCFF 		BL	RBRAC
 3432 19d4 52F804FB 		_UNNEST
 3433              	
 3434              	//    IMMEDIATE   ( -- )
 3435              	// 	Make the last compiled word an immediate word.
 3436              		_HEADER IMMED,9,"IMMEDIATE"
 3437 19d8 42F804ED 		_NEST
 3438 19dc FEF7D5FB 		_DOLIT IMEDD
 3438      80000000 
 3439 19e4 FEF794FD 		BL	LAST
 3440 19e8 FEF706FC 		BL	AT
 3441 19ec FEF704FC 		BL	AT
 3442 19f0 FEF73CFC 		BL	ORR
 3443 19f4 FEF78CFD 		BL	LAST
 3444 19f8 FEF7FEFB 		BL	AT
 3445 19fc FEF7F6FB 		BL	STORE
 3446 1a00 52F804FB 		_UNNEST
 3447              	
 3448              	
 3449              	//  I: ( -- a )
 3450              	// debute la compilation 
 3451              	// d'une routine d'interruption. 
 3452              		_HEADER ICOLON,2,"I:"
 3453 1a04 42F804ED 		_NEST 
 3454 1a08 FEF776FE 		BL	HERE
 3455 1a0c FEF7BDFB 		BL	DOLIT 
 3456 1a10 42F804ED 		_NEST 
ARM GAS  stm32eforth.s 			page 66


 3457 1a14 FFF700FE 		BL	COMMA 
 3458 1a18 FFF798FF 		BL	RBRAC 
 3459 1a1c 52F804FB 		_UNNEST 
 3460              	
 3461              	// I; ( a -- a )
 3462              	// Termine la compilation 
 3463              	// d'une routine d'interruption. 
 3464              		_HEADER ISEMIS,IMEDD+COMPO+2,"I;"
 3465 1a20 42F804ED 		_NEST 
 3466 1a24 FEF7B1FB 		BL	DOLIT 
 3467 1a28 52F804EB 		LDMFD	R2!,{LR}
 3468 1a2c FFF7F4FD 		BL	COMMA
 3469 1a30 FEF7ABFB 		BL	DOLIT 
 3470 1a34 7047     		BX LR 
 3471 1a36 00BF     		NOP 
 3472 1a38 FFF7EEFD 		BL COMMA 
 3473 1a3c FFF7B6FB 		BL	LBRAC
 3474 1a40 52F804FB 		_UNNEST 
 3475              	
 3476              	
 3477              	/*********************
 3478              	   Defining words
 3479              	*********************/
 3480              	
 3481              	//  HEADER ( -- )  "string"
 3482              	// create a dictionary header in RAM
 3483              		_HEADER HEAD,6,"HEADER"
 3484 1a44 42F804ED 		_NEST 
 3485 1a48 FFF7FEF9 		BL	TOKEN
 3486 1a4c FFF7F6FE 		BL	SNAME
 3487              	//	BL	OVERT  
 3488 1a50 FEF752FE 		BL	HERE   
 3489 1a54 FEF756FC 		BL	CELLP
 3490 1a58 FFF7DEFD 		BL	COMMA 
 3491 1a5c FEF795FB 		BL	DOLIT 
 3492 1a60 42F804ED 		_NEST 
 3493 1a64 FFF7D8FD 		BL	COMMA 
 3494 1a68 52F804FB 		_UNNEST 
 3495              	
 3496              	//    CONSTANT	( u -- //  string> )
 3497              	// 	Compile a new constant.
 3498              		_HEADER CONST,8,"CONSTANT" 
 3499 1a6c 42F804ED 		_NEST
 3500 1a70 FFF7E8FF 		BL	HEAD 
 3501 1a74 FEF789FB 		_DOLIT DOCON+MAPOFFSET
 3501      60040018 
 3502 1a7c FFF793FF 		BL	CALLC
 3503 1a80 FFF7CAFD 		BL	COMMA
 3504 1a84 FFF748FF 		BL	OVERT 
 3505 1a88 52F804FB 		_UNNEST
 3506              	
 3507              		.p2align 2 
 3508              	// doDOES> ( -- )
 3509              	// set code addresse in code field of new word 
 3510              	DODOES:
 3511 1a8c 42F804ED 		_NEST 
 3512 1a90 FEF73EFD 		BL	LAST 
ARM GAS  stm32eforth.s 			page 67


 3513 1a94 FEF7B0FB 		BL	AT 
 3514 1a98 FFF7DEF9 		BL 	TOCFA
 3515 1a9c FEF72CFE 		BL	HERE  // this is ca of new word 
 3516 1aa0 FEF7D4FB 		BL	OVER  
 3517 1aa4 FEF7A2FB 		BL	STORE
 3518 1aa8 FEF76FFB 		BL	DOLIT 
 3519 1aac 42F804ED 		_NEST 
 3520 1ab0 FFF7B2FD 		BL COMMA  
 3521 1ab4 FEF769FB 		_DOLIT 12 
 3521      0C000000 
 3522 1abc FEF7F6FB 		BL	PLUS  // parameter field of new word 
 3523 1ac0 FFF7D6FD 		BL	LITER
 3524 1ac4 FEF7A8FB 		BL RAT 
 3525 1ac8 FEF710FC 		BL ONEM 
 3526 1acc FEF71AFC 		BL	CELLP
 3527 1ad0 FFF769FF 		BL	CALLC  
 3528 1ad4 FEF759FB 		BL	DOLIT 
 3529 1ad8 52F804FB 		_UNNEST 
 3530 1adc FFF79CFD 		BL	COMMA 
 3531 1ae0 FFF71AFF 		BL	OVERT 
 3532 1ae4 52F804FB 		_UNNEST 
 3533              	
 3534              		
 3535              	
 3536              		.p2align 2
 3537              	//  DOES> ( -- )
 3538              	//  compile time action 
 3539              		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3540 1ae8 42F804ED 		_NEST 
 3541 1aec FEF74DFB 		_DOLIT DODOES+MAPOFFSET
 3541      8C1A0018 
 3542 1af4 FFF757FF 		BL CALLC 
 3543 1af8 FEF747FB 		BL	DOLIT	
 3544 1afc 52F804FB 		_UNNEST 
 3545 1b00 FFF78AFD 		BL	COMMA  
 3546 1b04 FEF741FB 		BL	DOLIT 
 3547 1b08 42F804ED 		_NEST 
 3548 1b0c FFF784FD 		BL	COMMA 
 3549 1b10 52F804FB 		_UNNEST 
 3550              	
 3551              	
 3552              	//    CREATE	( -- //  string> )
 3553              	// 	Compile a new array entry without allocating code space.
 3554              		_HEADER CREAT,6,"CREATE"
 3555 1b14 42F804ED 		_NEST
 3556 1b18 FFF794FF 		BL	HEAD 
 3557 1b1c FEF735FB 		_DOLIT DOVAR+MAPOFFSET 
 3557      54040018 
 3558 1b24 FFF73FFF 		BL	CALLC  
 3559 1b28 52F804FB 		_UNNEST
 3560              	
 3561              	//    VARIABLE	( -- //  string> )
 3562              	// 	Compile a new variable initialized to 0.
 3563              		_HEADER VARIA,8,"VARIABLE"
 3564 1b2c 42F804ED 		_NEST
 3565 1b30 FFF7F0FF 		BL	CREAT
 3566 1b34 FEF729FB 		_DOLIT 0
ARM GAS  stm32eforth.s 			page 68


 3566      00000000 
 3567 1b3c FFF76CFD 		BL	COMMA
 3568 1b40 FFF7EAFE 		BL	OVERT 
 3569 1b44 52F804FB 		_UNNEST
 3570              	
 3571              	/*************
 3572              	   Tools
 3573              	*************/
 3574              	
 3575              	//    dm+	 ( a u -- a )
 3576              	// 	Dump u bytes from , leaving a+u on the stack.
 3577              	
 3578              	// 	.word	_VARIA+MAPOFFSET
 3579              	// _DMP	.byte  3
 3580              	// 	.ascii "dm+"
 3581              	// 	.p2align 2 	
 3582              	DMP:
 3583 1b48 42F804ED 		_NEST
 3584 1b4c FEF77EFB 		BL	OVER
 3585 1b50 FEF71BFB 		_DOLIT	4
 3585      04000000 
 3586 1b58 FFF742F8 		BL	UDOTR			// display address
 3587 1b5c FEF7BEFF 		BL	SPACE
 3588 1b60 FEF75EFB 		BL	TOR			// start count down loop
 3589 1b64 00F00CB8 		B.W	PDUM2			// skip first pass
 3590              	PDUM1:
 3591 1b68 FEF768FB 	  BL	DUPP
 3592 1b6c FEF74CFB 		BL	CAT
 3593 1b70 FEF70BFB 		_DOLIT 3
 3593      03000000 
 3594 1b78 FFF732F8 		BL	UDOTR			// display numeric data
 3595 1b7c FEF7B2FB 		BL	ONEP			// increment address
 3596              	PDUM2:
 3597 1b80 FEF711FB 	  BL	DONXT
 3598 1b84 681B0018 		.word	PDUM1+MAPOFFSET	// loop till done
 3599 1b88 52F804FB 		_UNNEST
 3600              		.p2align 2 
 3601              	//    DUMP	( a u -- )
 3602              	// 	Dump u bytes from a, in a formatted manner.
 3603              		_HEADER DUMP,4,"DUMP"
 3604 1b8c 42F804ED 		_NEST
 3605 1b90 FEF784FC 		BL	BASE
 3606 1b94 FEF730FB 		BL	AT
 3607 1b98 FEF742FB 		BL	TOR
 3608 1b9c FEF7B8FE 		BL	HEX			// save radix,set hex
 3609 1ba0 FEF7F3FA 		_DOLIT	16
 3609      10000000 
 3610 1ba8 FEF744FD 		BL	SLASH			// change count to lines
 3611 1bac FEF738FB 		BL	TOR
 3612 1bb0 00F014B8 		B.W	DUMP4			// start count down loop
 3613              	DUMP1:
 3614 1bb4 FEF7C2FF 	  BL	CR
 3615 1bb8 FEF7E7FA 		_DOLIT	16
 3615      10000000 
 3616 1bc0 FEF7D0FB 		BL	DDUP
 3617 1bc4 FFF7C0FF 		BL	DMP			// display numeric
 3618 1bc8 FEF7C0FB 		BL	ROT
ARM GAS  stm32eforth.s 			page 69


 3619 1bcc FEF7BEFB 		BL	ROT
 3620 1bd0 FEF784FF 		BL	SPACE
 3621 1bd4 FEF782FF 		BL	SPACE
 3622 1bd8 FEF79CFF 		BL	TYPEE			// display printable characters
 3623              	DUMP4:
 3624 1bdc FEF7E3FA 	  BL	DONXT
 3625 1be0 B41B0018 		.word	DUMP1+MAPOFFSET	// loop till done
 3626              	DUMP3:
 3627 1be4 FEF726FB 	  BL	DROP
 3628 1be8 FEF710FB 		BL	RFROM
 3629 1bec FEF756FC 		BL	BASE
 3630 1bf0 FEF7FCFA 		BL	STORE			// restore radix
 3631 1bf4 52F804FB 		_UNNEST
 3632              	
 3633              	//    .S	  ( ... -- ... )
 3634              	// 	Display the contents of the data stack.
 3635              		_HEADER DOTS,2,".S"
 3636 1bf8 42F804ED 		_NEST
 3637 1bfc FEF76EFF 		BL	SPACE
 3638 1c00 FEF760FD 		BL	DEPTH			// stack depth
 3639 1c04 FEF70CFB 		BL	TOR			// start count down loop
 3640 1c08 00F006B8 		B.W	DOTS2			// skip first pass
 3641              	DOTS1:
 3642 1c0c FEF704FB 		BL	RAT
 3643 1c10 FEF764FD 		BL	PICK
 3644 1c14 FFF708F8 		BL	DOT			// index stack, display contents
 3645              	DOTS2:
 3646 1c18 FEF7C5FA 		BL	DONXT
 3647 1c1c 0C1C0018 		.word	DOTS1+MAPOFFSET	// loop till done
 3648 1c20 FEF75CFF 		BL	SPACE
 3649 1c24 52F804FB 		_UNNEST
 3650              	
 3651              	//    >NAME	( ca -- na | F )
 3652              	// 	Convert code address to a name address.
 3653              		_HEADER TNAME,5,">NAME"
 3654 1c28 42F804ED 		_NEST
 3655 1c2c FEF7F8FA 		BL	TOR			//  
 3656 1c30 FEF75CFC 		BL	CNTXT			//  va
 3657 1c34 FEF7E0FA 		BL	AT			//  na
 3658              	TNAM1:
 3659 1c38 FEF700FB 		BL	DUPP			//  na na
 3660 1c3c FEF7C2FA 		BL	QBRAN
 3661 1c40 681C0018 		.word	TNAM2+MAPOFFSET	//  vocabulary end, no match
 3662 1c44 FEF7FAFA 		BL	DUPP			//  na na
 3663 1c48 FFF716F9 		BL	NAMET			//  na ca
 3664 1c4c FEF7E4FA 		BL	RAT			//  na ca code
 3665 1c50 FEF712FB 		BL	XORR			//  na f --
 3666 1c54 FEF7B6FA 		BL	QBRAN
 3667 1c58 681C0018 		.word	TNAM2+MAPOFFSET
 3668 1c5c FEF756FB 		BL	CELLM			//  la 
 3669 1c60 FEF7CAFA 		BL	AT			//  next_na
 3670 1c64 FFF7E8BF 		B.W	TNAM1
 3671              	TNAM2:	
 3672 1c68 FEF7D0FA 		BL	RFROM
 3673 1c6c FEF7E2FA 		BL	DROP			//  0|na --
 3674 1c70 52F804FB 		_UNNEST			// 0
 3675              	
ARM GAS  stm32eforth.s 			page 70


 3676              	//    .ID	 ( na -- )
 3677              	// 	Display the name at address.
 3678              		_HEADER DOTID,3,".ID"
 3679 1c74 42F804ED 		_NEST
 3680 1c78 FEF762FB 		BL	QDUP			// if zero no name
 3681 1c7c FEF7A2FA 		BL	QBRAN
 3682 1c80 9C1C0018 		.word	DOTI1+MAPOFFSET
 3683 1c84 FEF7D8FB 		BL	COUNT
 3684 1c88 FEF77FFA 		_DOLIT	0x1F
 3684      1F000000 
 3685 1c90 FEF7E6FA 		BL	ANDD			// mask lexicon bits
 3686 1c94 FEF73EFF 		BL	TYPEE
 3687 1c98 52F804FB 		_UNNEST			// display name string
 3688              	DOTI1:
 3689 1c9c FEF786FF 		BL	DOTQP
 3690 1ca0 09       		.byte	9
 3691 1ca1 207B6E6F 		.ascii " {noName}"
 3691      4E616D65 
 3691      7D
 3692 1caa 00BF     		.p2align 2 	
 3693 1cac 52F804FB 		_UNNEST
 3694              	
 3695              		.equ WANT_SEE, 1  // set to 1 if you want SEE 
 3696              		.if WANT_SEE 
 3697              	
 3698              	// .CA ( ca -- ca )
 3699              	// print code field address 
 3700              	DOTCA:
 3701 1cb0 42F804ED 		_NEST 
 3702 1cb4 FEF7C2FA 		BL  DUPP
 3703 1cb8 FEF7A8FF 		BL UDOT 
 3704 1cbc FEF765FA 		_DOLIT 2 
 3704      02000000 
 3705 1cc4 FEF712FF 		BL SPACS 
 3706 1cc8 52F804FB 		_UNNEST 
 3707              	
 3708              	// CODE_ABORT ( ca -- f )
 3709              	// abort if code definition
 3710              	CODE_ABORT:
 3711 1ccc 42F804ED 		_NEST 
 3712 1cd0 FFF7EEFF 		BL DOTCA  
 3713 1cd4 FEF7B2FA 		BL DUPP 
 3714 1cd8 FEF78EFA 		BL AT 
 3715 1cdc FEF755FA 		BL DOLIT 
 3716 1ce0 42F804ED 		_NEST 
 3717 1ce4 FEF7C8FA 		BL XORR 
 3718 1ce8 FEF76CFA 		BL QBRAN 
 3719 1cec 041D0018 		.word 1f+MAPOFFSET 
 3720 1cf0 FEF71AFE 		BL DECIM
 3721 1cf4 FFF720FA 		BL ABORQ 
 3722 1cf8 09       		.byte 9 
 3723 1cf9 636F6465 		.ascii "code word"
 3723      20776F72 
 3723      64
 3724 1d02 00BF     		.p2align 2
 3725              	1:	 
 3726 1d04 FEF752FF 		BL DOTQP 
ARM GAS  stm32eforth.s 			page 71


 3727 1d08 04       		.byte 4
 3728 1d09 6E657374 		.ascii "nest"
 3729 1d0d 0000BF   		.p2align 2 
 3730 1d10 FEF714FF 		BL CR 
 3731 1d14 52F804FB 		_UNNEST 
 3732              	
 3733              	
 3734              	// UNNEST? ( ca -- ca f )
 3735              	// check if UNNEST 
 3736              	UNNESTQ:
 3737 1d18 42F804ED 		_NEST 
 3738 1d1c FEF78EFA 		BL DUPP 
 3739 1d20 FEF76AFA 		BL AT 
 3740 1d24 FEF731FA 		BL DOLIT 
 3741 1d28 52F804FB 		_UNNEST  
 3742 1d2c FEF740FB 		BL EQUAL
 3743 1d30 FEF784FA 		BL DUPP 
 3744 1d34 FEF746FA 		BL QBRAN
 3745 1d38 4C1D0018 		.word 1f+MAPOFFSET  
 3746 1d3c FEF736FF 		BL DOTQP
 3747 1d40 06       		.byte 6
 3748 1d41 756E6E65 		.ascii "unnest" 
 3748      7374
 3749 1d47 00       		.p2align 2
 3750 1d48 FEF7F8FE 		BL CR  
 3751 1d4c 52F804FB 	1:	_UNNEST 
 3752              	
 3753              	
 3754              	// search no name routine from code address. 
 3755              	NONAMEQ: // ( ca -- na|ca f )
 3756 1d50 42F804ED 		_NEST 
 3757 1d54 FEF719FA 		_DOLIT 0 
 3757      00000000 
 3758 1d5c FEF772FA 		BL SWAP 
 3759 1d60 FEF713FA 		_DOLIT NONAME_SUB
 3759      18000000 
 3760 1d68 FEF75AFA 		BL TOR   
 3761 1d6c FEF766FA 	0:	BL DUPP // ( 0 ca ca -- )  
 3762 1d70 FEF752FA 		BL RAT  
 3763 1d74 FEF740FA 		BL AT 
 3764 1d78 FEF7E2FA 		BL QDUP 
 3765 1d7c FEF722FA 		BL QBRAN 
 3766 1d80 D81D0018 		.word 2f+MAPOFFSET 
 3767 1d84 FEF778FA 		BL XORR 
 3768 1d88 FEF71CFA 		BL QBRAN 
 3769 1d8c A41D0018 		.word 1f+MAPOFFSET 
 3770 1d90 FEF73CFA 		BL RFROM 
 3771 1d94 FEF7B6FA 		BL CELLP
 3772 1d98 FEF742FA 		BL TOR  
 3773 1d9c FEF71EFA 		BL BRAN 
 3774 1da0 6C1D0018 		.word 0b+MAPOFFSET 
 3775 1da4 FEF732FA 	1:  BL RFROM 
 3776 1da8 FEF7EFF9 		_DOLIT NONAME_SUB
 3776      18000000 
 3777 1db0 FEF780FA 		BL SUBB
 3778 1db4 FEF7E9F9 		_DOLIT ANONYMOUS 
 3778      54000000 
ARM GAS  stm32eforth.s 			page 72


 3779 1dbc FEF776FA 		BL	PLUS
 3780 1dc0 FEF71AFA 		BL	AT   
 3781 1dc4 FEF73EFA 		BL	SWAP 
 3782 1dc8 FEF734FA 		BL	DROP
 3783 1dcc FEF73AFA 		BL	SWAP 
 3784 1dd0 FEF7D8FA 		BL	INVER 
 3785 1dd4 52F804FB 		_UNNEST 
 3786 1dd8 FEF72CFA 	2:	BL DROP 
 3787 1ddc FEF732FA 		BL SWAP 
 3788 1de0 FEF714FA 		BL RFROM
 3789 1de4 FEF726FA 		BL DROP 
 3790 1de8 52F804FB 		_UNNEST 
 3791              	
 3792              		.p2align 2 
 3793              	
 3794              	
 3795              	// print noname routine label ( n -- )
 3796              	// n is offset in ANONYMOUS array 
 3797              	DOTNONAME:
 3798 1dec 42F804ED 		_NEST 
 3799 1df0 41F8045D 		_PUSH 
 3800 1df4 FEF7C9F9 		_DOLIT ANONYMOUS 
 3800      54000000 
 3801 1dfc FEF756FA 		BL PLUS 
 3802 1e00 FEF7FAF9 		BL AT 
 3803 1e04 FEF786FE 		BL TYPEE 
 3804 1e08 52F804FB 		_UNNEST 
 3805              	
 3806              	// IS_BLW ( code -- f )
 3807              	// check if it is a BL instruction 
 3808              	IS_BLW:
 3809 1e0c 42F804ED 		_NEST 
 3810 1e10 FEF7BBF9 		_DOLIT 0xD000F000
 3810      00F000D0 
 3811 1e18 FEF710FA 		BL DUPP 
 3812 1e1c FEF700FA 		BL TOR 
 3813 1e20 FEF71EFA 		BL ANDD
 3814 1e24 FEF7F2F9 		BL RFROM  
 3815 1e28 FEF7C2FA 		BL EQUAL   
 3816 1e2c 52F804FB 		_UNNEST 
 3817              	
 3818              	//    SEE	 ( -- //  string> )
 3819              	// 	A simple decompiler.
 3820              		_HEADER SEE,3,"SEE"
 3821 1e30 42F804ED 		_NEST
 3822 1e34 FEF732FB 		BL BASE 
 3823 1e38 FEF7DEF9 		BL AT 
 3824 1e3c FEF7F0F9 		BL TOR 
 3825 1e40 FEF766FD 		BL HEX 
 3826 1e44 FFF7D2FB 		BL	TICK	//  ca --, starting address
 3827 1e48 FEF778FE 		BL	CR	
 3828 1e4c FFF73EFF 		BL  CODE_ABORT
 3829 1e50 00F008F8 		BL	SCOL 
 3830 1e54 FEF7DAF9 		BL  RFROM 
 3831 1e58 FEF720FB 		BL 	BASE 
 3832 1e5c FEF7C6F9 		BL	STORE 
 3833 1e60 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 73


 3834              	
 3835              	
 3836              	// SEECOLON ( ca -- )
 3837              	// Decompile colon definition 
 3838              		_HEADER SCOL,8,"SEECOLON"
 3839 1e64 42F804ED 		_NEST 
 3840 1e68 FEF78FF9 		_DOLIT 9  
 3840      09000000 
 3841 1e70 FEF7D6F9 		BL TOR // not a BL counter limit to 10 consecutives 
 3842              	SCOL1:
 3843 1e74 FEF746FA 		BL	CELLP			//  a
 3844 1e78 FFF71AFF 		BL  DOTCA 
 3845 1e7c FFF74CFF 		BL  UNNESTQ
 3846 1e80 FEF7A0F9 		BL	QBRAN 
 3847 1e84 B41E0018 		.word 1f+MAPOFFSET  
 3848 1e88 FEF7D8F9 		BL	DUPP 
 3849 1e8c FEF73AFA 		BL	CELLP
 3850 1e90 FEF7B2F9 		BL	AT 
 3851 1e94 FFF7BAFF 		BL	IS_BLW
 3852 1e98 FEF774FA 		BL	INVER  
 3853 1e9c FEF792F9 		BL	QBRAN 
 3854 1ea0 741E0018 		.word SCOL1+MAPOFFSET 
 3855 1ea4 FEF7B2F9 		BL	RFROM 
 3856 1ea8 FEF7C4F9 		BL	DROP 
 3857 1eac FEF796F9 		BL	BRAN 
 3858 1eb0 C81E0018 		.word 2f+MAPOFFSET 
 3859 1eb4 FEF7C2F9 	1:	BL	DUPP			//  a a
 3860 1eb8 00F02CF8 		BL	DECOMP		//  a
 3861 1ebc FEF73EFE 		BL	CR 
 3862 1ec0 FEF771F9 		BL	DONXT  
 3863 1ec4 741E0018 		.word	SCOL1+MAPOFFSET
 3864 1ec8 FEF7B4F9 	2:	BL DROP 
 3865 1ecc 52F804FB 		_UNNEST
 3866              	
 3867              	// BL-ADR ( asm_code -- rel_adr )
 3868              	// get absolute address from asm_code 
 3869              	// ref: ARM-v7M architecture reference, section A7.7.18 
 3870              	BLADR: 
 3871 1ed0 4FEA0504 		MOV.W R4,R5
 3872 1ed4 4FEA3444 		ROR R4,#16 
 3873 1ed8 64F30A05 		BFI R5,R4,#0,#11 
 3874 1edc 4FEAE424 		ASR R4,#11 
 3875 1ee0 64F35555 		BFI R5,R4,#21,#1 
 3876 1ee4 4FEAA404 		ASR R4,#2
 3877 1ee8 64F39655 		BFI R5,R4,#22,#1
 3878 1eec 4FEAE404 		ASR R4,#3
 3879 1ef0 64F3D425 		BFI R5,R4,#11,#10
 3880 1ef4 4FEAA424 		ASR R4,#10 
 3881 1ef8 64F3D755 		BFI R5,R4,#23,#1
 3882 1efc 15F4000F 		TST R5,#(1<<23)
 3883 1f00 40F00280 		BNE.W 1f
 3884 1f04 85F4C005 		EOR R5,R5,#(3<<21)
 3885 1f08 4FEA0525 	1:	LSL R5,#8
 3886 1f0c 4FEAE515 		ASR R5,#7 
 3887 1f10 7047     		_NEXT 
 3888              	
 3889              		
ARM GAS  stm32eforth.s 			page 74


 3890              	// 	DECOMPILE ( a -- )
 3891              	// 	Convert code in a.  Display name of command or as data.
 3892 1f12 00BF     		_HEADER DECOMP,9,"DECOMPILE"
 3893 1f14 42F804ED 		_NEST
 3894 1f18 FEF790F9 		BL	DUPP			//  a a
 3895 1f1c FEF76CF9 		BL	AT			//  a code
 3896 1f20 FEF78CF9 		BL	DUPP			//  a code code
 3897 1f24 FFF772FF 		BL	IS_BLW
 3898 1f28 FEF74CF9 		BL	QBRAN
 3899 1f2c 8C1F0018 		.word	DECOM2+MAPOFFSET	//  not a BL instruction 
 3900              		//  a valid_code --, extract address and display name
 3901 1f30 FEF73CFE 		BL DOTQP  
 3902 1f34 03       		.byte 3
 3903 1f35 424C20   		.ascii "BL "
 3904              		.p2align 2
 3905 1f38 FFF7CAFF 		BL  BLADR   // extract relative address from BL code
 3906 1f3c FEF786F9 		BL	OVER			//  a offset a
 3907 1f40 FEF7B4F9 		BL	PLUS			//  a target-4
 3908 1f44 FEF7DEF9 		BL	CELLP			//  a target
 3909 1f48 FFF7B2FE 		BL  DOTCA 
 3910 1f4c FFF700FF 		BL	NONAMEQ 
 3911 1f50 FEF738F9 		BL	QBRAN 
 3912 1f54 601F0018 		.word DECOMP1+MAPOFFSET  
 3913 1f58 FEF740F9 		BL	BRAN 
 3914 1f5c 641F0018 		.word DECOMP3+MAPOFFSET 
 3915              	DECOMP1:
 3916 1f60 FFF762FE 		BL	TNAME			//  a na/0 --, is it a name?
 3917              	DECOMP3:
 3918 1f64 FFF786FE 		BL	DOTID			//  a --, display name
 3919 1f68 FEF764F9 		BL	DROP
 3920              	// reset not BL counter 
 3921 1f6c FEF74EF9 		BL	RFROM 
 3922 1f70 FEF74CF9 		BL	RFROM 
 3923 1f74 FEF75EF9 		BL	DROP
 3924 1f78 FEF707F9 		_DOLIT 9  
 3924      09000000 
 3925 1f80 FEF74EF9 		BL	TOR 
 3926 1f84 FEF74CF9 		BL	TOR 	
 3927 1f88 52F804FB 		_UNNEST
 3928              	DECOM2: // not a BL 
 3929 1f8c FEF73EFE 		BL	UDOT
 3930 1f90 FEF750F9 		BL	DROP
 3931 1f94 52F804FB 		_UNNEST
 3932              	.endif 
 3933              	
 3934              	//    WORDS	( -- )
 3935              	// 	Display the names in the context vocabulary.
 3936              		_HEADER WORDS,5,"WORDS"
 3937 1f98 42F804ED 		_NEST
 3938 1f9c FEF7CEFD 		BL	CR
 3939 1fa0 FEF7A4FA 		BL	CNTXT
 3940 1fa4 FEF728F9 		BL	AT			// only in context
 3941              	WORS1:
 3942 1fa8 FEF7CAF9 		BL	QDUP			// ?at end of list
 3943 1fac FEF70AF9 		BL	QBRAN
 3944 1fb0 CC1F0018 		.word	WORS2+MAPOFFSET
 3945 1fb4 FEF742F9 		BL	DUPP
ARM GAS  stm32eforth.s 			page 75


 3946 1fb8 FEF790FD 		BL	SPACE
 3947 1fbc FFF75AFE 		BL	DOTID			// display a name
 3948 1fc0 FEF7A4F9 		BL	CELLM
 3949 1fc4 FEF718F9 		BL	AT
 3950 1fc8 FFF7EEBF 		B.W	WORS1
 3951              	WORS2:
 3952 1fcc 52F804FB 		_UNNEST
 3953              	
 3954              	// **************************************************************************
 3955              	//  cold start
 3956              	
 3957              	//    VER	 ( -- n )
 3958              	// 	Return the version number of this implementation.
 3959              	
 3960              	// 	.word	_WORDS+MAPOFFSET
 3961              	// _VERSN	.byte  3
 3962              	// 	.ascii "VER"
 3963              	// 	.p2align 2 	
 3964              	VERSN:
 3965 1fd0 42F804ED 		_NEST
 3966 1fd4 FEF7D9F8 		_DOLIT	VER*256+EXT
 3966      00010000 
 3967 1fdc 52F804FB 		_UNNEST
 3968              	
 3969              	//    hi	  ( -- )
 3970              	// 	Display the sign-on message of eForth.
 3971              		_HEADER HI,2,"HI"
 3972 1fe0 42F804ED 		_NEST
 3973 1fe4 FEF7AAFD 		BL	CR	// initialize I/O
 3974 1fe8 FEF7CFF8 		_DOLIT hi_msg 
 3974      00000000 
 3975 1ff0 FEF722FA 		BL	COUNT 
 3976 1ff4 FEF78EFD 		BL	TYPEE 
 3977 1ff8 FEF750FA 		BL	BASE
 3978 1ffc FEF7FCF8 		BL	AT
 3979 2000 FEF786FC 		BL	HEX	// save radix
 3980 2004 FFF7E4FF 		BL	VERSN
 3981 2008 FEF718FC 		BL	BDIGS
 3982 200c FEF732FC 		BL	DIG
 3983 2010 FEF730FC 		BL	DIG
 3984 2014 FEF7B9F8 		_DOLIT	'.'
 3984      2E000000 
 3985 201c FEF718FC 		BL	HOLD
 3986 2020 FEF734FC 		BL	DIGS
 3987 2024 FEF750FC 		BL	EDIGS
 3988 2028 FEF774FD 		BL	TYPEE	// format version number
 3989 202c FEF736FA 		BL	BASE
 3990 2030 FEF7DCF8 		BL	STORE
 3991 2034 FEF782FD 		BL	CR
 3992 2038 52F804FB 		_UNNEST			// restore radix
 3993              	
 3994              		.section .rodata
 3995              		.p2align 2 
 3996              	hi_msg:
 3997 0000 17       		.byte	23
 3998 0001 626C7565 		.ascii "blue pill stm32eForth v" 
 3998      2070696C 
ARM GAS  stm32eforth.s 			page 76


 3998      6C207374 
 3998      6D333265 
 3998      466F7274 
 3999              		.p2align 2 
 4000              	
 4001              		.section  .text, "ax" ,%progbits 
 4002              	
 4003              	//    COLD	( -- )
 4004              	// 	The high level cold start sequence.
 4005              		_HEADER LASTN,4,"COLD"
 4006              	COLD:
 4007              	//  Initiate Forth registers
 4008 203c 4FF49873 		_MOV32 R3,UPP // system variables area 
 4008      C2F20003 
 4009 2044 4FF49D41 		_MOV32 R1,SPP // Forth data stack 
 4009      C2F20001 
 4010 204c 4FF49F42 		_MOV32 R2,RPP // Forth return stack 
 4010      C2F20002 
 4011 2054 85EA0505 		EOR R5,R5,R5			//  tos=0
 4012 2058 42F804ED 		_NEST
 4013              	COLD1:
 4014 205c FEF795F8 		_DOLIT 0 
 4014      00000000 
 4015 2064 FEF760F8 		BL ULED // turn off user LED 
 4016 2068 FEF78FF8 		_DOLIT	UZERO
 4016      00000000 
 4017 2070 FEF78BF8 		_DOLIT	UPP
 4017      30010020 
 4018 2078 FEF787F8 		_DOLIT	ULAST-UZERO
 4018      54000000 
 4019 2080 FEF76AFB 		BL	MOVE 			// initialize user area
 4020 2084 FFF7E0F8 		BL	PRESE			// initialize stack
 4021              		// check if user image saved in slot 0 
 4022 2088 FFF7A2F9 		BL IMGQ 
 4023 208c FEF79AF8 		BL	QBRAN 
 4024 2090 98200018 		.word 1f+MAPOFFSET
 4025 2094 FFF7ACF9 		BL	LOAD_IMG 
 4026 2098 FEF7FAF9 	1:	BL	TBOOT
 4027 209c FEF740FB 		BL	ATEXE			// application boot
 4028 20a0 FFF73AFC 		BL	OVERT
 4029 20a4 FFF7DAB8 		B.W	QUIT			// start interpretation
 4030              		.p2align 2
 4031              	CTOP: 
 4032              	COLD2:
 4033 20a8 FFFFFFFF 		.word	0XFFFFFFFF
 4034              		
 4035              	/********************************
 4036              	  data that doesn't need to be 
 4037              	  copied in RAM 
 4038              	*******************************/
 4039              		.section .rodata 
 4040              		.p2align 2
 4041              	NONAME_SUB: // routine not in the dictionary 
 4042 0018 DC010018 		.word BRAN+MAPOFFSET,QBRAN+MAPOFFSET, DOLIT+MAPOFFSET,DONXT+MAPOFFSET,DODOES+MAPOFFSET
 4042      C4010018 
 4042      8A010018 
 4042      A6010018 
ARM GAS  stm32eforth.s 			page 77


 4042      8C1A0018 
 4043 002c 54040018 		.word DOVAR+MAPOFFSET,DOCON+MAPOFFSET,IS_BLW+MAPOFFSET,DOTQP+MAPOFFSET,BLADR+MAPOFFSET  
 4043      60040018 
 4043      0C1E0018 
 4043      AC0B0018 
 4043      D01E0018 
 4044 0040 B01C0018 		.word DOTCA+MAPOFFSET,NONAMEQ+MAPOFFSET,STRCQ+MAPOFFSET,VERSN+MAPOFFSET  
 4044      501D0018 
 4044      88160018 
 4044      D01F0018 
 4045 0050 00000000 		.word 0 
 4046              	
 4047              	ANONYMOUS: // anonymous routines 
 4048 0054 8C000000 		.word BRAN_LBL,QBRAN_LBL,DOLIT_LBL,DONEXT_LBL,DODOES_LBL,DOVAR_LBL,DOCON_LBL
 4048      98000000 
 4048      A4000000 
 4048      B0000000 
 4048      BC000000 
 4049 0070 E0000000 		.word IS_BLW_LBL,DOTQP_LBL,BLADR_LBL,DOTCA_LBL,NONAMEQ_LBL,STRCQ_LBL,VERSN_LBL   
 4049      EC000000 
 4049      F0000000 
 4049      FC000000 
 4049      08010000 
 4050              	
 4051              	BRAN_LBL:
 4052 008c 09       		.byte 9 
 4053 008d 207B6272 		.ascii " {branch}"
 4053      616E6368 
 4053      7D
 4054 0096 0000     		.p2align 2 
 4055              	QBRAN_LBL:
 4056 0098 0A       		.byte 10
 4057 0099 207B3F62 		.ascii " {?branch}"
 4057      72616E63 
 4057      687D
 4058 00a3 00       		.p2align 2
 4059              	DOLIT_LBL:
 4060 00a4 08       		.byte 8 
 4061 00a5 207B646F 		.ascii " {doLit}"
 4061      4C69747D 
 4062 00ad 000000   		.p2align 2 
 4063              	DONEXT_LBL:
 4064 00b0 09       		.byte 9
 4065 00b1 207B646F 		.ascii " {doNext}"
 4065      4E657874 
 4065      7D
 4066 00ba 0000     		.p2align 2 
 4067              	DODOES_LBL:
 4068 00bc 09       		.byte 9
 4069 00bd 207B646F 		.ascii " {doDoes}"
 4069      446F6573 
 4069      7D
 4070 00c6 0000     		.p2align 2 
 4071              	DOVAR_LBL:
 4072 00c8 08       		.byte 8
 4073 00c9 207B646F 		.ascii " {doVar}"
 4073      5661727D 
ARM GAS  stm32eforth.s 			page 78


 4074 00d1 000000   		.p2align 2 
 4075              	DOCON_LBL:
 4076 00d4 0A       		.byte 10
 4077 00d5 207B646F 		.ascii " {doConst}"
 4077      436F6E73 
 4077      747D
 4078 00df 00       		.p2align 2 
 4079              	IS_BLW_LBL:
 4080 00e0 0B       		.byte 11 
 4081 00e1 207B424C 		.ascii " {BL code?}"
 4081      20636F64 
 4081      653F7D
 4082              		.p2align 2 
 4083              	DOTQP_LBL:
 4084 00ec 03       		.byte 3
 4085 00ed 202E22   		.ascii " .\""
 4086              		.p2align 
 4087              	BLADR_LBL:
 4088 00f0 09       		.byte 9
 4089 00f1 207B424C 		.ascii " {BL>ADR}"
 4089      3E414452 
 4089      7D
 4090 00fa 0000     		.p2align 2 
 4091              	DOTCA_LBL:
 4092 00fc 08       		.byte  8
 4093 00fd 207B646F 		.ascii " {dotca}"
 4093      7463617D 
 4094 0105 000000   		.p2align 2 
 4095              	NONAMEQ_LBL:
 4096 0108 0A       		.byte  10
 4097 0109 207B6E6F 		.ascii " {noname?}"
 4097      6E616D65 
 4097      3F7D
 4098 0113 00       		.p2align 2 
 4099              	STRCQ_LBL:
 4100 0114 06       		.byte  6
 4101 0115 207B242C 		.ascii " {$,\"}"
 4101      227D
 4102 011b 00       		.p2align 2 
 4103              	VERSN_LBL:
 4104 011c 0A       		.byte  10
 4105 011d 207B7665 		.ascii " {version}"
 4105      7273696F 
 4105      6E7D
 4106 0127 00       		.p2align 2 
 4107              	
 4108              		.section .user 
 4109              		.p2align 10 
 4110              	USER_SPACE: // save user image here.  
 4111 0000 FFFFFFFF 		.word 0XFFFFFFFF
 4112              	
 4113              	
 4114              	  .end 
ARM GAS  stm32eforth.s 			page 79


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  stm32eforth.s 			page 80


board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
board/blue-pill/stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
board/blue-pill/stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
board/blue-pill/stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
board/blue-pill/stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
board/blue-pill/stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
board/blue-pill/stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
board/blue-pill/stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
board/blue-pill/stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
board/blue-pill/stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
board/blue-pill/stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
board/blue-pill/stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
board/blue-pill/stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
board/blue-pill/stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
board/blue-pill/stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
board/blue-pill/stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
board/blue-pill/stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
board/blue-pill/stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
board/blue-pill/stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
board/blue-pill/stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
board/blue-pill/stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
board/blue-pill/stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
board/blue-pill/stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
board/blue-pill/stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
board/blue-pill/stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
board/blue-pill/stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
board/blue-pill/stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
board/blue-pill/stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
board/blue-pill/stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
board/blue-pill/stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
board/blue-pill/stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
board/blue-pill/stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
board/blue-pill/stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
board/blue-pill/stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32eforth.s:83     *ABS*:0000000040011000 LED_GPIO
       stm32eforth.s:84     *ABS*:000000000000000d LED_PIN
       stm32eforth.s:85     *ABS*:0000000040013800 UART
       stm32eforth.s:88     *ABS*:0000000020004e80 SPP
       stm32eforth.s:89     *ABS*:0000000020004e80 TIBB
       stm32eforth.s:90     *ABS*:0000000020004f80 RPP
       stm32eforth.s:91     *ABS*:0000000020000130 UPP
       stm32eforth.s:93     *ABS*:0000000020004e00 DEND
       stm32eforth.s:94     *ABS*:0000000020000130 RAMOFFSET
       stm32eforth.s:95     *ABS*:0000000020005000 RAMEND
       stm32eforth.s:96     *ABS*:0000000008000130 FLASHOFFSET
       stm32eforth.s:99     *ABS*:0000000018000000 MAPOFFSET
       stm32eforth.s:100    *ABS*:0000000018000000 IRQOFFSET
ARM GAS  stm32eforth.s 			page 81


       stm32eforth.s:105    *ABS*:0000000000000004 SEED_OFS
       stm32eforth.s:106    *ABS*:0000000000000008 TICKS_OFS
       stm32eforth.s:107    *ABS*:000000000000000c TIMER_OFS
       stm32eforth.s:108    *ABS*:0000000000000010 TORAM_OFS
       stm32eforth.s:109    *ABS*:0000000000000014 IMG_SIGN_OFS
       stm32eforth.s:110    *ABS*:0000000000000018 BOOT_OFS
       stm32eforth.s:111    *ABS*:000000000000001c BASE_OFS
       stm32eforth.s:112    *ABS*:0000000000000020 TMP_OFS
       stm32eforth.s:113    *ABS*:0000000000000024 SPAN_OFS
       stm32eforth.s:114    *ABS*:0000000000000028 TOIN_OFS
       stm32eforth.s:115    *ABS*:000000000000002c NTIB_OFS
       stm32eforth.s:116    *ABS*:0000000000000030 TIB_OFS
       stm32eforth.s:117    *ABS*:0000000000000034 EVAL_OFS
       stm32eforth.s:118    *ABS*:0000000000000038 HLD_OFS
       stm32eforth.s:119    *ABS*:000000000000003c CTXT_OFS
       stm32eforth.s:120    *ABS*:0000000000000040 FORTH_CTOP_OFS
       stm32eforth.s:121    *ABS*:0000000000000044 USER_CTOP_OFS
       stm32eforth.s:122    *ABS*:0000000000000048 LASTN_OFS
       stm32eforth.s:123    *ABS*:000000000000004c VARS_END_OFS
       stm32eforth.s:125    *ABS*:0000000000000010 RX_QUEUE_SIZE
       stm32eforth.s:126    *ABS*:0000000000000050 RX_QUEUE_OFS
       stm32eforth.s:127    *ABS*:0000000000000060 RX_HEAD_OFS
       stm32eforth.s:128    *ABS*:0000000000000064 RX_TAIL_OFS
       stm32eforth.s:3971   .inflash.dictinary:0000000000000bc8 link
       stm32eforth.s:195    .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:388    .inflash:00000000000000d0 reset_handler
       stm32eforth.s:286    .inflash:0000000000000000 default_handler
       stm32eforth.s:303    .inflash:0000000000000020 systick_handler
       stm32eforth.s:213    .isr_vector:0000000000000040 irq0
       stm32eforth.s:322    .inflash:000000000000003c uart_rx_handler
       stm32eforth.s:275    .isr_vector:0000000000000130 isr_end
       stm32eforth.s:284    .inflash:0000000000000000 $t
       stm32eforth.s:291    .inflash:0000000000000008 exception_msg
       stm32eforth.s:364    .inflash:00000000000000a4 uart_puts
       stm32eforth.s:345    .inflash:000000000000007c reset_mcu
       stm32eforth.s:292    .inflash:0000000000000008 $d
       stm32eforth.s:312    .inflash:000000000000003a systick_exit
       stm32eforth.s:342    .inflash:0000000000000076 user_reboot
       stm32eforth.s:355    .inflash:0000000000000090 user_reboot_msg
       stm32eforth.s:353    .inflash:000000000000008c scb_adr
       stm32eforth.s:354    .inflash:000000000000008c $d
       stm32eforth.s:359    .inflash:00000000000000a2 $t
       stm32eforth.s:514    .inflash:00000000000001f2 remap
       stm32eforth.s:412    .inflash:0000000000000110 init_devices
       stm32eforth.s:489    .inflash:00000000000001b0 uart_init
       stm32eforth.s:403    .inflash:00000000000000f0 forth_init
       stm32eforth.s:399    .inflash:00000000000000ec forth_entry
       stm32eforth.s:400    .inflash:00000000000000ec $d
       stm32eforth.s:4006   .text:000000000000203c COLD
       stm32eforth.s:404    .inflash:00000000000000f0 $t
       stm32eforth.s:425    .inflash:000000000000012e wait_hserdy
       stm32eforth.s:445    .inflash:0000000000000148 wait_pllrdy
       stm32eforth.s:457    .inflash:0000000000000168 wait_sws
       stm32eforth.s:546    .inflash:0000000000000258 remap_dest
       stm32eforth.s:544    .inflash:0000000000000254 remap_src
       stm32eforth.s:4031   .text:00000000000020a8 CTOP
       stm32eforth.s:593    .text:0000000000000000 UZERO
ARM GAS  stm32eforth.s 			page 82


       stm32eforth.s:545    .inflash:0000000000000254 $d
       stm32eforth.s:552    *ABS*:0000000000000001 VER
       stm32eforth.s:553    *ABS*:0000000000000000 EXT
       stm32eforth.s:557    *ABS*:0000000000000040 COMPO
       stm32eforth.s:558    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:559    *ABS*:00000000ffffff1f MASKK
       stm32eforth.s:561    *ABS*:0000000000000004 CELLL
       stm32eforth.s:562    *ABS*:000000000000000a BASEE
       stm32eforth.s:563    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:565    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:566    *ABS*:000000000000000a LF
       stm32eforth.s:567    *ABS*:000000000000000d CRR
       stm32eforth.s:568    *ABS*:000000000000001b ERR
       stm32eforth.s:569    *ABS*:0000000000000027 TIC
       stm32eforth.s:594    .text:0000000000000000 $d
       stm32eforth.s:3971   .text:0000000000001fe0 HI
       stm32eforth.s:2605   .text:0000000000001158 INTER
       stm32eforth.s:3971   .inflash.dictinary:0000000000000bc8 _LASTN
       stm32eforth.s:614    .text:0000000000000054 ULAST
       stm32eforth.s:622    .text:000000000000006c $t
               .inflash.dictinary:0000000000000000 LF_RSTIVEC
               .inflash.dictinary:0000000000000004 _RSTIVEC
               .inflash.dictinary:000000000000000d $d
       stm32eforth.s:626    .inflash.dictinary:0000000000000010 CA_RSTIVEC
       stm32eforth.s:626    .text:0000000000000070 RSTIVEC
       stm32eforth.s:750    .text:000000000000018a DOLIT
       stm32eforth.s:628    .text:0000000000000078 $d
       stm32eforth.s:893    .text:0000000000000244 SWAP
       stm32eforth.s:629    .text:000000000000007c $t
       stm32eforth.s:1042   .text:0000000000000320 CELLS
       stm32eforth.s:631    .text:0000000000000088 $d
       stm32eforth.s:960    .text:00000000000002ac PLUS
       stm32eforth.s:632    .text:000000000000008c $t
       stm32eforth.s:825    .text:00000000000001ec STORE
       stm32eforth.s:626    .inflash.dictinary:0000000000000014 LF_SETIVEC
       stm32eforth.s:626    .inflash.dictinary:0000000000000018 _SETIVEC
       stm32eforth.s:638    .inflash.dictinary:0000000000000024 CA_SETIVEC
       stm32eforth.s:638    .text:0000000000000098 SETIVEC
       stm32eforth.s:999    .text:00000000000002e4 ONEP
       stm32eforth.s:644    .text:00000000000000b0 $d
       stm32eforth.s:645    .text:00000000000000b4 $t
       stm32eforth.s:638    .inflash.dictinary:0000000000000028 LF_RAND
       stm32eforth.s:638    .inflash.dictinary:000000000000002c _RAND
       stm32eforth.s:654    .inflash.dictinary:0000000000000034 CA_RAND
       stm32eforth.s:654    .text:00000000000000c0 RAND
       stm32eforth.s:1273   .text:000000000000046c SEED
       stm32eforth.s:833    .text:00000000000001f8 AT
       stm32eforth.s:887    .text:000000000000023c DUPP
       stm32eforth.s:1121   .text:0000000000000394 ABSS
       stm32eforth.s:1508   .text:0000000000000624 MODD
       stm32eforth.s:654    .inflash.dictinary:0000000000000038 LF_PAUSE
       stm32eforth.s:654    .inflash.dictinary:000000000000003c _PAUSE
       stm32eforth.s:674    .inflash.dictinary:0000000000000044 CA_PAUSE
       stm32eforth.s:674    .text:0000000000000100 PAUSE
       stm32eforth.s:1287   .text:0000000000000484 TIMER
       stm32eforth.s:678    .text:000000000000010c PAUSE_LOOP
       stm32eforth.s:795    .text:00000000000001c4 QBRAN
ARM GAS  stm32eforth.s 			page 83


       stm32eforth.s:682    .text:0000000000000118 $d
       stm32eforth.s:685    .text:0000000000000124 PAUSE_EXIT
       stm32eforth.s:813    .text:00000000000001dc BRAN
       stm32eforth.s:683    .text:000000000000011c $t
       stm32eforth.s:684    .text:0000000000000120 $d
       stm32eforth.s:686    .text:0000000000000124 $t
       stm32eforth.s:674    .inflash.dictinary:0000000000000048 LF_ULED
       stm32eforth.s:674    .inflash.dictinary:000000000000004c _ULED
       stm32eforth.s:690    .inflash.dictinary:0000000000000054 CA_ULED
       stm32eforth.s:690    .text:0000000000000128 ULED
       stm32eforth.s:698    .text:0000000000000140 ULED_OFF
       stm32eforth.s:690    .inflash.dictinary:0000000000000058 LF_QRX
       stm32eforth.s:690    .inflash.dictinary:000000000000005c _QRX
       stm32eforth.s:704    .inflash.dictinary:0000000000000064 CA_QRX
       stm32eforth.s:704    .text:0000000000000144 QRX
       stm32eforth.s:705    .text:0000000000000144 QKEY
       stm32eforth.s:704    .inflash.dictinary:0000000000000068 LF_EMIT
       stm32eforth.s:704    .inflash.dictinary:000000000000006c _EMIT
       stm32eforth.s:724    .inflash.dictinary:0000000000000074 CA_EMIT
       stm32eforth.s:724    .text:0000000000000170 EMIT
       stm32eforth.s:725    .text:0000000000000170 TECHO
       stm32eforth.s:724    .inflash.dictinary:0000000000000078 LF_NOP
       stm32eforth.s:724    .inflash.dictinary:000000000000007c _NOP
       stm32eforth.s:739    .inflash.dictinary:0000000000000080 CA_NOP
       stm32eforth.s:739    .text:0000000000000188 NOP
       stm32eforth.s:739    .inflash.dictinary:0000000000000084 LF_EXECU
       stm32eforth.s:739    .inflash.dictinary:0000000000000088 _EXECU
       stm32eforth.s:759    .inflash.dictinary:0000000000000090 CA_EXECU
       stm32eforth.s:759    .text:000000000000019c EXECU
       stm32eforth.s:773    .text:00000000000001a6 DONXT
       stm32eforth.s:780    .text:00000000000001b4 NEXT1
       stm32eforth.s:802    .text:00000000000001d6 QBRAN1
       stm32eforth.s:759    .inflash.dictinary:0000000000000094 LF_EXIT
       stm32eforth.s:759    .inflash.dictinary:0000000000000098 _EXIT
       stm32eforth.s:820    .inflash.dictinary:00000000000000a0 CA_EXIT
       stm32eforth.s:820    .text:00000000000001e8 EXIT
       stm32eforth.s:820    .inflash.dictinary:00000000000000a4 LF_STORE
       stm32eforth.s:820    .inflash.dictinary:00000000000000a8 _STORE
       stm32eforth.s:825    .inflash.dictinary:00000000000000ac CA_STORE
       stm32eforth.s:825    .inflash.dictinary:00000000000000b0 LF_AT
       stm32eforth.s:825    .inflash.dictinary:00000000000000b4 _AT
       stm32eforth.s:833    .inflash.dictinary:00000000000000b8 CA_AT
       stm32eforth.s:833    .inflash.dictinary:00000000000000bc LF_CSTOR
       stm32eforth.s:833    .inflash.dictinary:00000000000000c0 _CSTOR
       stm32eforth.s:839    .inflash.dictinary:00000000000000c4 CA_CSTOR
       stm32eforth.s:839    .text:00000000000001fc CSTOR
       stm32eforth.s:839    .inflash.dictinary:00000000000000c8 LF_CAT
       stm32eforth.s:839    .inflash.dictinary:00000000000000cc _CAT
       stm32eforth.s:847    .inflash.dictinary:00000000000000d0 CA_CAT
       stm32eforth.s:847    .text:0000000000000208 CAT
       stm32eforth.s:847    .inflash.dictinary:00000000000000d4 LF_RFROM
       stm32eforth.s:847    .inflash.dictinary:00000000000000d8 _RFROM
       stm32eforth.s:853    .inflash.dictinary:00000000000000dc CA_RFROM
       stm32eforth.s:853    .text:000000000000020c RFROM
       stm32eforth.s:853    .inflash.dictinary:00000000000000e0 LF_RAT
       stm32eforth.s:853    .inflash.dictinary:00000000000000e4 _RAT
       stm32eforth.s:860    .inflash.dictinary:00000000000000e8 CA_RAT
ARM GAS  stm32eforth.s 			page 84


       stm32eforth.s:860    .text:0000000000000218 RAT
       stm32eforth.s:860    .inflash.dictinary:00000000000000ec LF_TOR
       stm32eforth.s:860    .inflash.dictinary:00000000000000f0 _TOR
       stm32eforth.s:867    .inflash.dictinary:00000000000000f4 CA_TOR
       stm32eforth.s:867    .text:0000000000000220 TOR
       stm32eforth.s:867    .inflash.dictinary:00000000000000f8 LF_SPAT
       stm32eforth.s:867    .inflash.dictinary:00000000000000fc _SPAT
       stm32eforth.s:874    .inflash.dictinary:0000000000000100 CA_SPAT
       stm32eforth.s:874    .text:000000000000022c SPAT
       stm32eforth.s:874    .inflash.dictinary:0000000000000104 LF_DROP
       stm32eforth.s:874    .inflash.dictinary:0000000000000108 _DROP
       stm32eforth.s:881    .inflash.dictinary:0000000000000110 CA_DROP
       stm32eforth.s:881    .text:0000000000000234 DROP
       stm32eforth.s:881    .inflash.dictinary:0000000000000114 LF_DUPP
       stm32eforth.s:881    .inflash.dictinary:0000000000000118 _DUPP
       stm32eforth.s:887    .inflash.dictinary:000000000000011c CA_DUPP
       stm32eforth.s:887    .inflash.dictinary:0000000000000120 LF_SWAP
       stm32eforth.s:887    .inflash.dictinary:0000000000000124 _SWAP
       stm32eforth.s:893    .inflash.dictinary:000000000000012c CA_SWAP
       stm32eforth.s:893    .inflash.dictinary:0000000000000130 LF_OVER
       stm32eforth.s:893    .inflash.dictinary:0000000000000134 _OVER
       stm32eforth.s:901    .inflash.dictinary:000000000000013c CA_OVER
       stm32eforth.s:901    .text:000000000000024c OVER
       stm32eforth.s:901    .inflash.dictinary:0000000000000140 LF_ZLESS
       stm32eforth.s:901    .inflash.dictinary:0000000000000144 _ZLESS
       stm32eforth.s:908    .inflash.dictinary:0000000000000148 CA_ZLESS
       stm32eforth.s:908    .text:0000000000000254 ZLESS
       stm32eforth.s:908    .inflash.dictinary:000000000000014c LF_ANDD
       stm32eforth.s:908    .inflash.dictinary:0000000000000150 _ANDD
       stm32eforth.s:915    .inflash.dictinary:0000000000000154 CA_ANDD
       stm32eforth.s:915    .text:0000000000000260 ANDD
       stm32eforth.s:915    .inflash.dictinary:0000000000000158 LF_ORR
       stm32eforth.s:915    .inflash.dictinary:000000000000015c _ORR
       stm32eforth.s:922    .inflash.dictinary:0000000000000160 CA_ORR
       stm32eforth.s:922    .text:000000000000026c ORR
       stm32eforth.s:922    .inflash.dictinary:0000000000000164 LF_XORR
       stm32eforth.s:922    .inflash.dictinary:0000000000000168 _XORR
       stm32eforth.s:929    .inflash.dictinary:000000000000016c CA_XORR
       stm32eforth.s:929    .text:0000000000000278 XORR
       stm32eforth.s:929    .inflash.dictinary:0000000000000170 LF_UPLUS
       stm32eforth.s:929    .inflash.dictinary:0000000000000174 _UPLUS
       stm32eforth.s:936    .inflash.dictinary:0000000000000178 CA_UPLUS
       stm32eforth.s:936    .text:0000000000000284 UPLUS
       stm32eforth.s:936    .inflash.dictinary:000000000000017c LF_RSHIFT
       stm32eforth.s:936    .inflash.dictinary:0000000000000180 _RSHIFT
       stm32eforth.s:946    .inflash.dictinary:0000000000000188 CA_RSHIFT
       stm32eforth.s:946    .text:0000000000000294 RSHIFT
       stm32eforth.s:946    .inflash.dictinary:000000000000018c LF_LSHIFT
       stm32eforth.s:946    .inflash.dictinary:0000000000000190 _LSHIFT
       stm32eforth.s:953    .inflash.dictinary:0000000000000198 CA_LSHIFT
       stm32eforth.s:953    .text:00000000000002a0 LSHIFT
       stm32eforth.s:953    .inflash.dictinary:000000000000019c LF_PLUS
       stm32eforth.s:953    .inflash.dictinary:00000000000001a0 _PLUS
       stm32eforth.s:960    .inflash.dictinary:00000000000001a4 CA_PLUS
       stm32eforth.s:960    .inflash.dictinary:00000000000001a8 LF_SUBB
       stm32eforth.s:960    .inflash.dictinary:00000000000001ac _SUBB
       stm32eforth.s:967    .inflash.dictinary:00000000000001b0 CA_SUBB
ARM GAS  stm32eforth.s 			page 85


       stm32eforth.s:967    .text:00000000000002b4 SUBB
       stm32eforth.s:967    .inflash.dictinary:00000000000001b4 LF_STAR
       stm32eforth.s:967    .inflash.dictinary:00000000000001b8 _STAR
       stm32eforth.s:974    .inflash.dictinary:00000000000001bc CA_STAR
       stm32eforth.s:974    .text:00000000000002c0 STAR
       stm32eforth.s:974    .inflash.dictinary:00000000000001c0 LF_UMSTA
       stm32eforth.s:974    .inflash.dictinary:00000000000001c4 _UMSTA
       stm32eforth.s:981    .inflash.dictinary:00000000000001c8 CA_UMSTA
       stm32eforth.s:981    .text:00000000000002cc UMSTA
       stm32eforth.s:981    .inflash.dictinary:00000000000001cc LF_MSTAR
       stm32eforth.s:981    .inflash.dictinary:00000000000001d0 _MSTAR
       stm32eforth.s:990    .inflash.dictinary:00000000000001d4 CA_MSTAR
       stm32eforth.s:990    .text:00000000000002d8 MSTAR
       stm32eforth.s:990    .inflash.dictinary:00000000000001d8 LF_ONEP
       stm32eforth.s:990    .inflash.dictinary:00000000000001dc _ONEP
       stm32eforth.s:999    .inflash.dictinary:00000000000001e0 CA_ONEP
       stm32eforth.s:999    .inflash.dictinary:00000000000001e4 LF_ONEM
       stm32eforth.s:999    .inflash.dictinary:00000000000001e8 _ONEM
       stm32eforth.s:1005   .inflash.dictinary:00000000000001ec CA_ONEM
       stm32eforth.s:1005   .text:00000000000002ec ONEM
       stm32eforth.s:1005   .inflash.dictinary:00000000000001f0 LF_TWOP
       stm32eforth.s:1005   .inflash.dictinary:00000000000001f4 _TWOP
       stm32eforth.s:1011   .inflash.dictinary:00000000000001f8 CA_TWOP
       stm32eforth.s:1011   .text:00000000000002f4 TWOP
       stm32eforth.s:1011   .inflash.dictinary:00000000000001fc LF_TWOM
       stm32eforth.s:1011   .inflash.dictinary:0000000000000200 _TWOM
       stm32eforth.s:1017   .inflash.dictinary:0000000000000204 CA_TWOM
       stm32eforth.s:1017   .text:00000000000002fc TWOM
       stm32eforth.s:1017   .inflash.dictinary:0000000000000208 LF_CELLP
       stm32eforth.s:1017   .inflash.dictinary:000000000000020c _CELLP
       stm32eforth.s:1023   .inflash.dictinary:0000000000000214 CA_CELLP
       stm32eforth.s:1023   .text:0000000000000304 CELLP
       stm32eforth.s:1023   .inflash.dictinary:0000000000000218 LF_CELLM
       stm32eforth.s:1023   .inflash.dictinary:000000000000021c _CELLM
       stm32eforth.s:1029   .inflash.dictinary:0000000000000224 CA_CELLM
       stm32eforth.s:1029   .text:000000000000030c CELLM
       stm32eforth.s:1029   .inflash.dictinary:0000000000000228 LF_BLANK
       stm32eforth.s:1029   .inflash.dictinary:000000000000022c _BLANK
       stm32eforth.s:1035   .inflash.dictinary:0000000000000230 CA_BLANK
       stm32eforth.s:1035   .text:0000000000000314 BLANK
       stm32eforth.s:1035   .inflash.dictinary:0000000000000234 LF_CELLS
       stm32eforth.s:1035   .inflash.dictinary:0000000000000238 _CELLS
       stm32eforth.s:1042   .inflash.dictinary:0000000000000240 CA_CELLS
       stm32eforth.s:1042   .inflash.dictinary:0000000000000244 LF_CELLSL
       stm32eforth.s:1042   .inflash.dictinary:0000000000000248 _CELLSL
       stm32eforth.s:1048   .inflash.dictinary:0000000000000250 CA_CELLSL
       stm32eforth.s:1048   .text:0000000000000328 CELLSL
       stm32eforth.s:1048   .inflash.dictinary:0000000000000254 LF_TWOST
       stm32eforth.s:1048   .inflash.dictinary:0000000000000258 _TWOST
       stm32eforth.s:1054   .inflash.dictinary:000000000000025c CA_TWOST
       stm32eforth.s:1054   .text:0000000000000330 TWOST
       stm32eforth.s:1054   .inflash.dictinary:0000000000000260 LF_TWOSL
       stm32eforth.s:1054   .inflash.dictinary:0000000000000264 _TWOSL
       stm32eforth.s:1060   .inflash.dictinary:0000000000000268 CA_TWOSL
       stm32eforth.s:1060   .text:0000000000000338 TWOSL
       stm32eforth.s:1060   .inflash.dictinary:000000000000026c LF_QDUP
       stm32eforth.s:1060   .inflash.dictinary:0000000000000270 _QDUP
ARM GAS  stm32eforth.s 			page 86


       stm32eforth.s:1066   .inflash.dictinary:0000000000000278 CA_QDUP
       stm32eforth.s:1066   .text:0000000000000340 QDUP
       stm32eforth.s:1066   .inflash.dictinary:000000000000027c LF_ROT
       stm32eforth.s:1066   .inflash.dictinary:0000000000000280 _ROT
       stm32eforth.s:1074   .inflash.dictinary:0000000000000284 CA_ROT
       stm32eforth.s:1074   .text:000000000000034c ROT
       stm32eforth.s:1074   .inflash.dictinary:0000000000000288 LF_DDROP
       stm32eforth.s:1074   .inflash.dictinary:000000000000028c _DDROP
       stm32eforth.s:1083   .inflash.dictinary:0000000000000294 CA_DDROP
       stm32eforth.s:1083   .text:0000000000000358 DDROP
       stm32eforth.s:1083   .inflash.dictinary:0000000000000298 LF_DDUP
       stm32eforth.s:1083   .inflash.dictinary:000000000000029c _DDUP
       stm32eforth.s:1090   .inflash.dictinary:00000000000002a4 CA_DDUP
       stm32eforth.s:1090   .text:0000000000000364 DDUP
       stm32eforth.s:1090   .inflash.dictinary:00000000000002a8 LF_DPLUS
       stm32eforth.s:1090   .inflash.dictinary:00000000000002ac _DPLUS
       stm32eforth.s:1098   .inflash.dictinary:00000000000002b0 CA_DPLUS
       stm32eforth.s:1098   .text:0000000000000370 DPLUS
       stm32eforth.s:1098   .inflash.dictinary:00000000000002b4 LF_INVER
       stm32eforth.s:1098   .inflash.dictinary:00000000000002b8 _INVER
       stm32eforth.s:1109   .inflash.dictinary:00000000000002bc CA_INVER
       stm32eforth.s:1109   .text:0000000000000384 INVER
       stm32eforth.s:1109   .inflash.dictinary:00000000000002c0 LF_NEGAT
       stm32eforth.s:1109   .inflash.dictinary:00000000000002c4 _NEGAT
       stm32eforth.s:1115   .inflash.dictinary:00000000000002cc CA_NEGAT
       stm32eforth.s:1115   .text:000000000000038c NEGAT
       stm32eforth.s:1115   .inflash.dictinary:00000000000002d0 LF_ABSS
       stm32eforth.s:1115   .inflash.dictinary:00000000000002d4 _ABSS
       stm32eforth.s:1121   .inflash.dictinary:00000000000002d8 CA_ABSS
       stm32eforth.s:1121   .inflash.dictinary:00000000000002dc LF_ZEQUAL
       stm32eforth.s:1121   .inflash.dictinary:00000000000002e0 _ZEQUAL
       stm32eforth.s:1129   .inflash.dictinary:00000000000002e4 CA_ZEQUAL
       stm32eforth.s:1129   .text:00000000000003a0 ZEQUAL
       stm32eforth.s:1129   .inflash.dictinary:00000000000002e8 LF_EQUAL
       stm32eforth.s:1129   .inflash.dictinary:00000000000002ec _EQUAL
       stm32eforth.s:1138   .inflash.dictinary:00000000000002f0 CA_EQUAL
       stm32eforth.s:1138   .text:00000000000003b0 EQUAL
       stm32eforth.s:1138   .inflash.dictinary:00000000000002f4 LF_ULESS
       stm32eforth.s:1138   .inflash.dictinary:00000000000002f8 _ULESS
       stm32eforth.s:1148   .inflash.dictinary:00000000000002fc CA_ULESS
       stm32eforth.s:1148   .text:00000000000003c0 ULESS
       stm32eforth.s:1148   .inflash.dictinary:0000000000000300 LF_LESS
       stm32eforth.s:1148   .inflash.dictinary:0000000000000304 _LESS
       stm32eforth.s:1158   .inflash.dictinary:0000000000000308 CA_LESS
       stm32eforth.s:1158   .text:00000000000003d0 LESS
       stm32eforth.s:1158   .inflash.dictinary:000000000000030c LF_GREAT
       stm32eforth.s:1158   .inflash.dictinary:0000000000000310 _GREAT
       stm32eforth.s:1168   .inflash.dictinary:0000000000000314 CA_GREAT
       stm32eforth.s:1168   .text:00000000000003e0 GREAT
       stm32eforth.s:1168   .inflash.dictinary:0000000000000318 LF_MAX
       stm32eforth.s:1168   .inflash.dictinary:000000000000031c _MAX
       stm32eforth.s:1178   .inflash.dictinary:0000000000000320 CA_MAX
       stm32eforth.s:1178   .text:00000000000003f0 MAX
       stm32eforth.s:1178   .inflash.dictinary:0000000000000324 LF_MIN
       stm32eforth.s:1178   .inflash.dictinary:0000000000000328 _MIN
       stm32eforth.s:1187   .inflash.dictinary:000000000000032c CA_MIN
       stm32eforth.s:1187   .text:00000000000003fc MIN
ARM GAS  stm32eforth.s 			page 87


       stm32eforth.s:1187   .inflash.dictinary:0000000000000330 LF_PSTOR
       stm32eforth.s:1187   .inflash.dictinary:0000000000000334 _PSTOR
       stm32eforth.s:1196   .inflash.dictinary:0000000000000338 CA_PSTOR
       stm32eforth.s:1196   .text:0000000000000408 PSTOR
       stm32eforth.s:1196   .inflash.dictinary:000000000000033c LF_DSTOR
       stm32eforth.s:1196   .inflash.dictinary:0000000000000340 _DSTOR
       stm32eforth.s:1206   .inflash.dictinary:0000000000000344 CA_DSTOR
       stm32eforth.s:1206   .text:0000000000000418 DSTOR
       stm32eforth.s:1206   .inflash.dictinary:0000000000000348 LF_DAT
       stm32eforth.s:1206   .inflash.dictinary:000000000000034c _DAT
       stm32eforth.s:1216   .inflash.dictinary:0000000000000350 CA_DAT
       stm32eforth.s:1216   .text:000000000000042c DAT
       stm32eforth.s:1216   .inflash.dictinary:0000000000000354 LF_COUNT
       stm32eforth.s:1216   .inflash.dictinary:0000000000000358 _COUNT
       stm32eforth.s:1224   .inflash.dictinary:0000000000000360 CA_COUNT
       stm32eforth.s:1224   .text:0000000000000438 COUNT
       stm32eforth.s:1224   .inflash.dictinary:0000000000000364 LF_DNEGA
       stm32eforth.s:1224   .inflash.dictinary:0000000000000368 _DNEGA
       stm32eforth.s:1232   .inflash.dictinary:0000000000000370 CA_DNEGA
       stm32eforth.s:1232   .text:0000000000000444 DNEGA
       stm32eforth.s:1250   .text:0000000000000454 DOVAR
       stm32eforth.s:1262   .text:0000000000000460 DOCON
       stm32eforth.s:1232   .inflash.dictinary:0000000000000374 LF_SEED
       stm32eforth.s:1232   .inflash.dictinary:0000000000000378 _SEED
       stm32eforth.s:1273   .inflash.dictinary:0000000000000380 CA_SEED
       stm32eforth.s:1273   .inflash.dictinary:0000000000000384 LF_MSEC
       stm32eforth.s:1273   .inflash.dictinary:0000000000000388 _MSEC
       stm32eforth.s:1280   .inflash.dictinary:0000000000000390 CA_MSEC
       stm32eforth.s:1280   .text:0000000000000478 MSEC
       stm32eforth.s:1280   .inflash.dictinary:0000000000000394 LF_TIMER
       stm32eforth.s:1280   .inflash.dictinary:0000000000000398 _TIMER
       stm32eforth.s:1287   .inflash.dictinary:00000000000003a0 CA_TIMER
       stm32eforth.s:1287   .inflash.dictinary:00000000000003a4 LF_TBOOT
       stm32eforth.s:1287   .inflash.dictinary:00000000000003a8 _TBOOT
       stm32eforth.s:1294   .inflash.dictinary:00000000000003b0 CA_TBOOT
       stm32eforth.s:1294   .text:0000000000000490 TBOOT
       stm32eforth.s:1294   .inflash.dictinary:00000000000003b4 LF_BASE
       stm32eforth.s:1294   .inflash.dictinary:00000000000003b8 _BASE
       stm32eforth.s:1301   .inflash.dictinary:00000000000003c0 CA_BASE
       stm32eforth.s:1301   .text:000000000000049c BASE
       stm32eforth.s:1313   .text:00000000000004a6 TEMP
       stm32eforth.s:1301   .inflash.dictinary:00000000000003c4 LF_SPAN
       stm32eforth.s:1301   .inflash.dictinary:00000000000003c8 _SPAN
       stm32eforth.s:1320   .inflash.dictinary:00000000000003d0 CA_SPAN
       stm32eforth.s:1320   .text:00000000000004b0 SPAN
       stm32eforth.s:1320   .inflash.dictinary:00000000000003d4 LF_INN
       stm32eforth.s:1320   .inflash.dictinary:00000000000003d8 _INN
       stm32eforth.s:1327   .inflash.dictinary:00000000000003dc CA_INN
       stm32eforth.s:1327   .text:00000000000004bc INN
       stm32eforth.s:1327   .inflash.dictinary:00000000000003e0 LF_NTIB
       stm32eforth.s:1327   .inflash.dictinary:00000000000003e4 _NTIB
       stm32eforth.s:1334   .inflash.dictinary:00000000000003ec CA_NTIB
       stm32eforth.s:1334   .text:00000000000004c8 NTIB
       stm32eforth.s:1334   .inflash.dictinary:00000000000003f0 LF_TEVAL
       stm32eforth.s:1334   .inflash.dictinary:00000000000003f4 _TEVAL
       stm32eforth.s:1341   .inflash.dictinary:00000000000003fc CA_TEVAL
       stm32eforth.s:1341   .text:00000000000004d4 TEVAL
ARM GAS  stm32eforth.s 			page 88


       stm32eforth.s:1341   .inflash.dictinary:0000000000000400 LF_HLD
       stm32eforth.s:1341   .inflash.dictinary:0000000000000404 _HLD
       stm32eforth.s:1348   .inflash.dictinary:0000000000000408 CA_HLD
       stm32eforth.s:1348   .text:00000000000004e0 HLD
       stm32eforth.s:1348   .inflash.dictinary:000000000000040c LF_CNTXT
       stm32eforth.s:1348   .inflash.dictinary:0000000000000410 _CNTXT
       stm32eforth.s:1355   .inflash.dictinary:0000000000000418 CA_CNTXT
       stm32eforth.s:1355   .text:00000000000004ec CNTXT
       stm32eforth.s:1356   .text:00000000000004ec CRRNT
       stm32eforth.s:1355   .inflash.dictinary:000000000000041c LF_CPP
       stm32eforth.s:1355   .inflash.dictinary:0000000000000420 _CPP
       stm32eforth.s:1363   .inflash.dictinary:0000000000000424 CA_CPP
       stm32eforth.s:1363   .text:00000000000004f8 CPP
       stm32eforth.s:1363   .inflash.dictinary:0000000000000428 LF_FCP
       stm32eforth.s:1363   .inflash.dictinary:000000000000042c _FCP
       stm32eforth.s:1370   .inflash.dictinary:0000000000000430 CA_FCP
       stm32eforth.s:1370   .text:0000000000000504 FCP
       stm32eforth.s:1370   .inflash.dictinary:0000000000000434 LF_LAST
       stm32eforth.s:1370   .inflash.dictinary:0000000000000438 _LAST
       stm32eforth.s:1377   .inflash.dictinary:0000000000000440 CA_LAST
       stm32eforth.s:1377   .text:0000000000000510 LAST
       stm32eforth.s:1377   .inflash.dictinary:0000000000000444 LF_USER_BEGIN
       stm32eforth.s:1377   .inflash.dictinary:0000000000000448 _USER_BEGIN
       stm32eforth.s:1388   .inflash.dictinary:0000000000000454 CA_USER_BEGIN
       stm32eforth.s:1388   .text:000000000000051c USER_BEGIN
       stm32eforth.s:1392   .text:0000000000000524 USR_BGN_ADR
       stm32eforth.s:1393   .text:0000000000000524 $d
       stm32eforth.s:1388   .inflash.dictinary:0000000000000458 LF_USER_END
       stm32eforth.s:1388   .inflash.dictinary:000000000000045c _USER_END
       stm32eforth.s:1397   .inflash.dictinary:0000000000000468 CA_USER_END
       stm32eforth.s:1397   .text:0000000000000528 USER_END
       stm32eforth.s:1397   .text:0000000000000528 $t
       stm32eforth.s:1397   .inflash.dictinary:000000000000046c LF_IMG_ADR
       stm32eforth.s:1397   .inflash.dictinary:0000000000000470 _IMG_ADR
       stm32eforth.s:1404   .inflash.dictinary:0000000000000478 CA_IMG_ADR
       stm32eforth.s:1404   .text:0000000000000538 IMG_ADR
       stm32eforth.s:1408   .text:0000000000000540 USR_IMG_ADR
       stm32eforth.s:1409   .text:0000000000000540 $d
       stm32eforth.s:4110   .user:0000000000000000 USER_SPACE
       stm32eforth.s:1404   .inflash.dictinary:000000000000047c LF_IMG_SIGN
       stm32eforth.s:1404   .inflash.dictinary:0000000000000480 _IMG_SIGN
       stm32eforth.s:1413   .inflash.dictinary:000000000000048c CA_IMG_SIGN
       stm32eforth.s:1413   .text:0000000000000544 IMG_SIGN
       stm32eforth.s:1413   .text:0000000000000544 $t
       stm32eforth.s:1413   .inflash.dictinary:0000000000000490 LF_WITHI
       stm32eforth.s:1413   .inflash.dictinary:0000000000000494 _WITHI
       stm32eforth.s:1424   .inflash.dictinary:000000000000049c CA_WITHI
       stm32eforth.s:1424   .text:0000000000000550 WITHI
       stm32eforth.s:1424   .inflash.dictinary:00000000000004a0 LF_UMMOD
       stm32eforth.s:1424   .inflash.dictinary:00000000000004a4 _UMMOD
       stm32eforth.s:1438   .inflash.dictinary:00000000000004ac CA_UMMOD
       stm32eforth.s:1438   .text:0000000000000570 UMMOD
       stm32eforth.s:1442   .text:000000000000057a UMMOD0
       stm32eforth.s:1449   .text:000000000000058a UMMOD1
       stm32eforth.s:1455   .text:0000000000000594 UMMOD2
       stm32eforth.s:1438   .inflash.dictinary:00000000000004b0 LF_MSMOD
       stm32eforth.s:1438   .inflash.dictinary:00000000000004b4 _MSMOD
ARM GAS  stm32eforth.s 			page 89


       stm32eforth.s:1464   .inflash.dictinary:00000000000004bc CA_MSMOD
       stm32eforth.s:1464   .text:00000000000005a0 MSMOD
       stm32eforth.s:1471   .text:00000000000005b8 $d
       stm32eforth.s:1476   .text:00000000000005cc MMOD1
       stm32eforth.s:1472   .text:00000000000005bc $t
       stm32eforth.s:1481   .text:00000000000005dc $d
       stm32eforth.s:1484   .text:00000000000005e8 MMOD2
       stm32eforth.s:1482   .text:00000000000005e0 $t
       stm32eforth.s:1489   .text:00000000000005f8 $d
       stm32eforth.s:1493   .text:0000000000000608 MMOD3
       stm32eforth.s:1490   .text:00000000000005fc $t
       stm32eforth.s:1464   .inflash.dictinary:00000000000004c0 LF_SLMOD
       stm32eforth.s:1464   .inflash.dictinary:00000000000004c4 _SLMOD
       stm32eforth.s:1498   .inflash.dictinary:00000000000004cc CA_SLMOD
       stm32eforth.s:1498   .text:000000000000060c SLMOD
       stm32eforth.s:1498   .inflash.dictinary:00000000000004d0 LF_MODD
       stm32eforth.s:1498   .inflash.dictinary:00000000000004d4 _MODD
       stm32eforth.s:1508   .inflash.dictinary:00000000000004dc CA_MODD
       stm32eforth.s:1508   .inflash.dictinary:00000000000004e0 LF_SLASH
       stm32eforth.s:1508   .inflash.dictinary:00000000000004e4 _SLASH
       stm32eforth.s:1516   .inflash.dictinary:00000000000004e8 CA_SLASH
       stm32eforth.s:1516   .text:0000000000000634 SLASH
       stm32eforth.s:1516   .inflash.dictinary:00000000000004ec LF_SSMOD
       stm32eforth.s:1516   .inflash.dictinary:00000000000004f0 _SSMOD
       stm32eforth.s:1525   .inflash.dictinary:00000000000004f8 CA_SSMOD
       stm32eforth.s:1525   .text:0000000000000648 SSMOD
       stm32eforth.s:1525   .inflash.dictinary:00000000000004fc LF_STASL
       stm32eforth.s:1525   .inflash.dictinary:0000000000000500 _STASL
       stm32eforth.s:1535   .inflash.dictinary:0000000000000504 CA_STASL
       stm32eforth.s:1535   .text:0000000000000660 STASL
       stm32eforth.s:1535   .inflash.dictinary:0000000000000508 LF_ALGND
       stm32eforth.s:1535   .inflash.dictinary:000000000000050c _ALGND
       stm32eforth.s:1547   .inflash.dictinary:0000000000000514 CA_ALGND
       stm32eforth.s:1547   .text:0000000000000674 ALGND
       stm32eforth.s:1547   .inflash.dictinary:0000000000000518 LF_TCHAR
       stm32eforth.s:1547   .inflash.dictinary:000000000000051c _TCHAR
       stm32eforth.s:1555   .inflash.dictinary:0000000000000524 CA_TCHAR
       stm32eforth.s:1555   .text:0000000000000684 TCHAR
       stm32eforth.s:1557   .text:000000000000068c $d
       stm32eforth.s:1558   .text:0000000000000690 $t
       stm32eforth.s:1561   .text:00000000000006a0 $d
       stm32eforth.s:1562   .text:00000000000006a4 $t
       stm32eforth.s:1565   .text:00000000000006b0 $d
       stm32eforth.s:1568   .text:00000000000006c0 TCHA1
       stm32eforth.s:1566   .text:00000000000006b4 $t
       stm32eforth.s:1567   .text:00000000000006bc $d
       stm32eforth.s:1569   .text:00000000000006c0 $t
       stm32eforth.s:1555   .inflash.dictinary:0000000000000528 LF_DEPTH
       stm32eforth.s:1555   .inflash.dictinary:000000000000052c _DEPTH
       stm32eforth.s:1573   .inflash.dictinary:0000000000000534 CA_DEPTH
       stm32eforth.s:1573   .text:00000000000006c4 DEPTH
       stm32eforth.s:1573   .inflash.dictinary:0000000000000538 LF_PICK
       stm32eforth.s:1573   .inflash.dictinary:000000000000053c _PICK
       stm32eforth.s:1582   .inflash.dictinary:0000000000000544 CA_PICK
       stm32eforth.s:1582   .text:00000000000006dc PICK
       stm32eforth.s:1582   .inflash.dictinary:0000000000000548 LF_HERE
       stm32eforth.s:1582   .inflash.dictinary:000000000000054c _HERE
ARM GAS  stm32eforth.s 			page 90


       stm32eforth.s:1596   .inflash.dictinary:0000000000000554 CA_HERE
       stm32eforth.s:1596   .text:00000000000006f8 HERE
       stm32eforth.s:1596   .inflash.dictinary:0000000000000558 LF_PAD
       stm32eforth.s:1596   .inflash.dictinary:000000000000055c _PAD
       stm32eforth.s:1604   .inflash.dictinary:0000000000000560 CA_PAD
       stm32eforth.s:1604   .text:0000000000000708 PAD
       stm32eforth.s:1604   .inflash.dictinary:0000000000000564 LF_TIB
       stm32eforth.s:1604   .inflash.dictinary:0000000000000568 _TIB
       stm32eforth.s:1612   .inflash.dictinary:000000000000056c CA_TIB
       stm32eforth.s:1612   .text:0000000000000718 TIB
       stm32eforth.s:1612   .inflash.dictinary:0000000000000570 LF_ATEXE
       stm32eforth.s:1612   .inflash.dictinary:0000000000000574 _ATEXE
       stm32eforth.s:1619   .inflash.dictinary:0000000000000580 CA_ATEXE
       stm32eforth.s:1619   .text:0000000000000720 ATEXE
       stm32eforth.s:1619   .inflash.dictinary:0000000000000584 LF_CMOVE
       stm32eforth.s:1619   .inflash.dictinary:0000000000000588 _CMOVE
       stm32eforth.s:1630   .inflash.dictinary:0000000000000590 CA_CMOVE
       stm32eforth.s:1630   .text:0000000000000734 CMOVE
       stm32eforth.s:1637   .text:0000000000000746 CMOV1
       stm32eforth.s:1634   .text:000000000000073e CMOV0
       stm32eforth.s:1642   .text:0000000000000750 CMOV2
       stm32eforth.s:1630   .inflash.dictinary:0000000000000594 LF_MOVE
       stm32eforth.s:1630   .inflash.dictinary:0000000000000598 _MOVE
       stm32eforth.s:1648   .inflash.dictinary:00000000000005a0 CA_MOVE
       stm32eforth.s:1648   .text:0000000000000758 MOVE
       stm32eforth.s:1656   .text:000000000000076e MOVE1
       stm32eforth.s:1653   .text:0000000000000766 MOVE0
       stm32eforth.s:1661   .text:0000000000000778 MOVE2
       stm32eforth.s:1648   .inflash.dictinary:00000000000005a4 LF_FILL
       stm32eforth.s:1648   .inflash.dictinary:00000000000005a8 _FILL
       stm32eforth.s:1667   .inflash.dictinary:00000000000005b0 CA_FILL
       stm32eforth.s:1667   .text:0000000000000780 FILL
       stm32eforth.s:1670   .text:0000000000000788 FILL0
       stm32eforth.s:1673   .text:000000000000078c FILL1
       stm32eforth.s:1679   .text:000000000000079a FILL2
       stm32eforth.s:1667   .inflash.dictinary:00000000000005b4 LF_PACKS
       stm32eforth.s:1667   .inflash.dictinary:00000000000005b8 _PACKS
       stm32eforth.s:1685   .inflash.dictinary:00000000000005c0 CA_PACKS
       stm32eforth.s:1685   .text:00000000000007a0 PACKS
       stm32eforth.s:1693   .text:00000000000007c0 $d
       stm32eforth.s:1694   .text:00000000000007c4 $t
       stm32eforth.s:1695   .text:00000000000007cc $d
       stm32eforth.s:1696   .text:00000000000007d0 $t
       stm32eforth.s:1685   .inflash.dictinary:00000000000005c4 LF_DIGIT
       stm32eforth.s:1685   .inflash.dictinary:00000000000005c8 _DIGIT
       stm32eforth.s:1712   .inflash.dictinary:00000000000005d0 CA_DIGIT
       stm32eforth.s:1712   .text:00000000000007f8 DIGIT
       stm32eforth.s:1714   .text:0000000000000800 $d
       stm32eforth.s:1715   .text:0000000000000804 $t
       stm32eforth.s:1712   .inflash.dictinary:00000000000005d4 LF_EXTRC
       stm32eforth.s:1712   .inflash.dictinary:00000000000005d8 _EXTRC
       stm32eforth.s:1724   .inflash.dictinary:00000000000005e0 CA_EXTRC
       stm32eforth.s:1724   .text:000000000000081c EXTRC
       stm32eforth.s:1726   .text:0000000000000824 $d
       stm32eforth.s:1727   .text:0000000000000828 $t
       stm32eforth.s:1724   .inflash.dictinary:00000000000005e4 LF_BDIGS
       stm32eforth.s:1724   .inflash.dictinary:00000000000005e8 _BDIGS
ARM GAS  stm32eforth.s 			page 91


       stm32eforth.s:1735   .inflash.dictinary:00000000000005ec CA_BDIGS
       stm32eforth.s:1735   .text:000000000000083c BDIGS
       stm32eforth.s:1735   .inflash.dictinary:00000000000005f0 LF_HOLD
       stm32eforth.s:1735   .inflash.dictinary:00000000000005f4 _HOLD
       stm32eforth.s:1744   .inflash.dictinary:00000000000005fc CA_HOLD
       stm32eforth.s:1744   .text:0000000000000850 HOLD
       stm32eforth.s:1744   .inflash.dictinary:0000000000000600 LF_DIG
       stm32eforth.s:1744   .inflash.dictinary:0000000000000604 _DIG
       stm32eforth.s:1757   .inflash.dictinary:0000000000000608 CA_DIG
       stm32eforth.s:1757   .text:0000000000000874 DIG
       stm32eforth.s:1757   .inflash.dictinary:000000000000060c LF_DIGS
       stm32eforth.s:1757   .inflash.dictinary:0000000000000610 _DIGS
       stm32eforth.s:1767   .inflash.dictinary:0000000000000614 CA_DIGS
       stm32eforth.s:1767   .text:000000000000088c DIGS
       stm32eforth.s:1769   .text:0000000000000890 DIGS1
       stm32eforth.s:1773   .text:000000000000089c $d
       stm32eforth.s:1775   .text:00000000000008a2 DIGS2
       stm32eforth.s:1774   .text:00000000000008a0 $t
       stm32eforth.s:1767   .inflash.dictinary:0000000000000618 LF_SIGN
       stm32eforth.s:1767   .inflash.dictinary:000000000000061c _SIGN
       stm32eforth.s:1780   .inflash.dictinary:0000000000000624 CA_SIGN
       stm32eforth.s:1780   .text:00000000000008a8 SIGN
       stm32eforth.s:1784   .text:00000000000008b4 $d
       stm32eforth.s:1787   .text:00000000000008c4 SIGN1
       stm32eforth.s:1785   .text:00000000000008b8 $t
       stm32eforth.s:1785   .text:00000000000008bc $d
       stm32eforth.s:1786   .text:00000000000008c0 $t
       stm32eforth.s:1780   .inflash.dictinary:0000000000000628 LF_EDIGS
       stm32eforth.s:1780   .inflash.dictinary:000000000000062c _EDIGS
       stm32eforth.s:1792   .inflash.dictinary:0000000000000630 CA_EDIGS
       stm32eforth.s:1792   .text:00000000000008c8 EDIGS
       stm32eforth.s:1809   .text:00000000000008e8 STRR
       stm32eforth.s:1792   .inflash.dictinary:0000000000000634 LF_HEX
       stm32eforth.s:1792   .inflash.dictinary:0000000000000638 _HEX
       stm32eforth.s:1823   .inflash.dictinary:000000000000063c CA_HEX
       stm32eforth.s:1823   .text:0000000000000910 HEX
       stm32eforth.s:1825   .text:0000000000000918 $d
       stm32eforth.s:1826   .text:000000000000091c $t
       stm32eforth.s:1823   .inflash.dictinary:0000000000000640 LF_DECIM
       stm32eforth.s:1823   .inflash.dictinary:0000000000000644 _DECIM
       stm32eforth.s:1832   .inflash.dictinary:000000000000064c CA_DECIM
       stm32eforth.s:1832   .text:0000000000000928 DECIM
       stm32eforth.s:1834   .text:0000000000000930 $d
       stm32eforth.s:1835   .text:0000000000000934 $t
       stm32eforth.s:1832   .inflash.dictinary:0000000000000650 LF_DIGTQ
       stm32eforth.s:1832   .inflash.dictinary:0000000000000654 _DIGTQ
       stm32eforth.s:1844   .inflash.dictinary:000000000000065c CA_DIGTQ
       stm32eforth.s:1844   .text:0000000000000940 DIGTQ
       stm32eforth.s:1847   .text:000000000000094c $d
       stm32eforth.s:1848   .text:0000000000000950 $t
       stm32eforth.s:1849   .text:0000000000000958 $d
       stm32eforth.s:1850   .text:000000000000095c $t
       stm32eforth.s:1853   .text:0000000000000968 $d
       stm32eforth.s:1860   .text:000000000000098c DGTQ1
       stm32eforth.s:1854   .text:000000000000096c $t
       stm32eforth.s:1854   .text:0000000000000970 $d
       stm32eforth.s:1855   .text:0000000000000974 $t
ARM GAS  stm32eforth.s 			page 92


       stm32eforth.s:1857   .text:0000000000000980 $d
       stm32eforth.s:1858   .text:0000000000000984 $t
       stm32eforth.s:1844   .inflash.dictinary:0000000000000660 LF_NUMBQ
       stm32eforth.s:1844   .inflash.dictinary:0000000000000664 _NUMBQ
       stm32eforth.s:1868   .inflash.dictinary:000000000000066c CA_NUMBQ
       stm32eforth.s:1868   .text:000000000000099c NUMBQ
       stm32eforth.s:1873   .text:00000000000009b0 $d
       stm32eforth.s:1874   .text:00000000000009b4 $t
       stm32eforth.s:1878   .text:00000000000009c8 $d
       stm32eforth.s:1879   .text:00000000000009cc $t
       stm32eforth.s:1881   .text:00000000000009d4 $d
       stm32eforth.s:1887   .text:00000000000009ec NUMQ1
       stm32eforth.s:1882   .text:00000000000009d8 $t
       stm32eforth.s:1890   .text:00000000000009f8 $d
       stm32eforth.s:1891   .text:00000000000009fc $t
       stm32eforth.s:1901   .text:0000000000000a24 $d
       stm32eforth.s:1939   .text:0000000000000ab0 NUMQ6
       stm32eforth.s:1902   .text:0000000000000a28 $t
       stm32eforth.s:1904   .text:0000000000000a30 NUMQ2
       stm32eforth.s:1912   .text:0000000000000a4c $d
       stm32eforth.s:1931   .text:0000000000000a94 NUMQ4
       stm32eforth.s:1913   .text:0000000000000a50 $t
       stm32eforth.s:1921   .text:0000000000000a70 $d
       stm32eforth.s:1922   .text:0000000000000a74 $t
       stm32eforth.s:1926   .text:0000000000000a84 $d
       stm32eforth.s:1928   .text:0000000000000a8c NUMQ3
       stm32eforth.s:1927   .text:0000000000000a88 $t
       stm32eforth.s:1937   .text:0000000000000aac NUMQ5
       stm32eforth.s:1936   .text:0000000000000aa8 $d
       stm32eforth.s:1938   .text:0000000000000aac $t
       stm32eforth.s:1868   .inflash.dictinary:0000000000000670 LF_KEY
       stm32eforth.s:1868   .inflash.dictinary:0000000000000674 _KEY
       stm32eforth.s:1952   .inflash.dictinary:0000000000000678 CA_KEY
       stm32eforth.s:1952   .text:0000000000000ac8 KEY
       stm32eforth.s:1954   .text:0000000000000acc KEY1
       stm32eforth.s:1957   .text:0000000000000ad4 $d
       stm32eforth.s:1958   .text:0000000000000ad8 $t
       stm32eforth.s:1952   .inflash.dictinary:000000000000067c LF_SPACE
       stm32eforth.s:1952   .inflash.dictinary:0000000000000680 _SPACE
       stm32eforth.s:1962   .inflash.dictinary:0000000000000688 CA_SPACE
       stm32eforth.s:1962   .text:0000000000000adc SPACE
       stm32eforth.s:1962   .inflash.dictinary:000000000000068c LF_SPACS
       stm32eforth.s:1962   .inflash.dictinary:0000000000000690 _SPACS
       stm32eforth.s:1970   .inflash.dictinary:0000000000000698 CA_SPACS
       stm32eforth.s:1970   .text:0000000000000aec SPACS
       stm32eforth.s:1972   .text:0000000000000af4 $d
       stm32eforth.s:1973   .text:0000000000000af8 $t
       stm32eforth.s:1978   .text:0000000000000b08 CHAR2
       stm32eforth.s:1976   .text:0000000000000b04 CHAR1
       stm32eforth.s:1980   .text:0000000000000b0c $d
       stm32eforth.s:1981   .text:0000000000000b10 $t
       stm32eforth.s:1970   .inflash.dictinary:000000000000069c LF_TYPEE
       stm32eforth.s:1970   .inflash.dictinary:00000000000006a0 _TYPEE
       stm32eforth.s:1985   .inflash.dictinary:00000000000006a8 CA_TYPEE
       stm32eforth.s:1985   .text:0000000000000b14 TYPEE
       stm32eforth.s:1993   .text:0000000000000b2c TYPE2
       stm32eforth.s:1989   .text:0000000000000b20 TYPE1
ARM GAS  stm32eforth.s 			page 93


       stm32eforth.s:1995   .text:0000000000000b30 $d
       stm32eforth.s:1996   .text:0000000000000b34 $t
       stm32eforth.s:1985   .inflash.dictinary:00000000000006ac LF_CR
       stm32eforth.s:1985   .inflash.dictinary:00000000000006b0 _CR
       stm32eforth.s:2001   .inflash.dictinary:00000000000006b4 CA_CR
       stm32eforth.s:2001   .text:0000000000000b3c CR
       stm32eforth.s:2003   .text:0000000000000b44 $d
       stm32eforth.s:2004   .text:0000000000000b48 $t
       stm32eforth.s:2005   .text:0000000000000b50 $d
       stm32eforth.s:2006   .text:0000000000000b54 $t
       stm32eforth.s:2017   .text:0000000000000b5c DOSTR
       stm32eforth.s:2040   .text:0000000000000b90 STRQP
       stm32eforth.s:2052   .text:0000000000000b9c DOTST
       stm32eforth.s:2065   .text:0000000000000bac DOTQP
       stm32eforth.s:2001   .inflash.dictinary:00000000000006b8 LF_DOTR
       stm32eforth.s:2001   .inflash.dictinary:00000000000006bc _DOTR
       stm32eforth.s:2073   .inflash.dictinary:00000000000006c0 CA_DOTR
       stm32eforth.s:2073   .text:0000000000000bbc DOTR
       stm32eforth.s:2073   .inflash.dictinary:00000000000006c4 LF_UDOTR
       stm32eforth.s:2073   .inflash.dictinary:00000000000006c8 _UDOTR
       stm32eforth.s:2086   .inflash.dictinary:00000000000006cc CA_UDOTR
       stm32eforth.s:2086   .text:0000000000000be0 UDOTR
       stm32eforth.s:2086   .inflash.dictinary:00000000000006d0 LF_UDOT
       stm32eforth.s:2086   .inflash.dictinary:00000000000006d4 _UDOT
       stm32eforth.s:2101   .inflash.dictinary:00000000000006d8 CA_UDOT
       stm32eforth.s:2101   .text:0000000000000c0c UDOT
       stm32eforth.s:2101   .inflash.dictinary:00000000000006dc LF_DOT
       stm32eforth.s:2101   .inflash.dictinary:00000000000006e0 _DOT
       stm32eforth.s:2112   .inflash.dictinary:00000000000006e4 CA_DOT
       stm32eforth.s:2112   .text:0000000000000c28 DOT
       stm32eforth.s:2116   .text:0000000000000c38 $d
       stm32eforth.s:2117   .text:0000000000000c3c $t
       stm32eforth.s:2119   .text:0000000000000c44 $d
       stm32eforth.s:2122   .text:0000000000000c50 DOT1
       stm32eforth.s:2120   .text:0000000000000c48 $t
       stm32eforth.s:2112   .inflash.dictinary:00000000000006e8 LF_QUEST
       stm32eforth.s:2112   .inflash.dictinary:00000000000006ec _QUEST
       stm32eforth.s:2130   .inflash.dictinary:00000000000006f0 CA_QUEST
       stm32eforth.s:2130   .text:0000000000000c60 QUEST
       stm32eforth.s:2146   .text:0000000000000c70 PARS
       stm32eforth.s:2154   .text:0000000000000c8c $d
       stm32eforth.s:2221   .text:0000000000000d7e PARS8
       stm32eforth.s:2155   .text:0000000000000c90 $t
       stm32eforth.s:2161   .text:0000000000000ca8 $d
       stm32eforth.s:2182   .text:0000000000000cf8 PARS3
       stm32eforth.s:2162   .text:0000000000000cac $t
       stm32eforth.s:2163   .text:0000000000000cb0 PARS1
       stm32eforth.s:2171   .text:0000000000000ccc $d
       stm32eforth.s:2180   .text:0000000000000cf4 PARS2
       stm32eforth.s:2172   .text:0000000000000cd0 $t
       stm32eforth.s:2174   .text:0000000000000cd8 $d
       stm32eforth.s:2175   .text:0000000000000cdc $t
       stm32eforth.s:2177   .text:0000000000000ce8 $d
       stm32eforth.s:2178   .text:0000000000000cec $t
       stm32eforth.s:2186   .text:0000000000000d04 PARS4
       stm32eforth.s:2197   .text:0000000000000d2c $d
       stm32eforth.s:2199   .text:0000000000000d34 PARS5
ARM GAS  stm32eforth.s 			page 94


       stm32eforth.s:2198   .text:0000000000000d30 $t
       stm32eforth.s:2201   .text:0000000000000d38 $d
       stm32eforth.s:2208   .text:0000000000000d52 PARS6
       stm32eforth.s:2202   .text:0000000000000d3c $t
       stm32eforth.s:2204   .text:0000000000000d44 $d
       stm32eforth.s:2205   .text:0000000000000d48 $t
       stm32eforth.s:2214   .text:0000000000000d66 PARS7
       stm32eforth.s:2130   .inflash.dictinary:00000000000006f4 LF_PARSE
       stm32eforth.s:2130   .inflash.dictinary:00000000000006f8 _PARSE
       stm32eforth.s:2229   .inflash.dictinary:0000000000000700 CA_PARSE
       stm32eforth.s:2229   .text:0000000000000d90 PARSE
       stm32eforth.s:2229   .inflash.dictinary:0000000000000704 LF_DOTPR
       stm32eforth.s:2229   .inflash.dictinary:0000000000000708 _DOTPR
       stm32eforth.s:2249   .inflash.dictinary:000000000000070c CA_DOTPR
       stm32eforth.s:2249   .text:0000000000000dd0 DOTPR
       stm32eforth.s:2251   .text:0000000000000dd8 $d
       stm32eforth.s:2252   .text:0000000000000ddc $t
       stm32eforth.s:2249   .inflash.dictinary:0000000000000710 LF_PAREN
       stm32eforth.s:2249   .inflash.dictinary:0000000000000714 _PAREN
       stm32eforth.s:2258   .inflash.dictinary:0000000000000718 CA_PAREN
       stm32eforth.s:2258   .text:0000000000000de8 PAREN
       stm32eforth.s:2260   .text:0000000000000df0 $d
       stm32eforth.s:2261   .text:0000000000000df4 $t
       stm32eforth.s:2258   .inflash.dictinary:000000000000071c LF_BKSLA
       stm32eforth.s:2258   .inflash.dictinary:0000000000000720 _BKSLA
       stm32eforth.s:2267   .inflash.dictinary:0000000000000724 CA_BKSLA
       stm32eforth.s:2267   .text:0000000000000e00 BKSLA
       stm32eforth.s:2267   .inflash.dictinary:0000000000000728 LF_CAHR
       stm32eforth.s:2267   .inflash.dictinary:000000000000072c _CAHR
       stm32eforth.s:2277   .inflash.dictinary:0000000000000734 CA_CAHR
       stm32eforth.s:2277   .text:0000000000000e18 CAHR
       stm32eforth.s:2277   .inflash.dictinary:0000000000000738 LF_WORDD
       stm32eforth.s:2277   .inflash.dictinary:000000000000073c _WORDD
       stm32eforth.s:2287   .inflash.dictinary:0000000000000744 CA_WORDD
       stm32eforth.s:2287   .text:0000000000000e30 WORDD
       stm32eforth.s:2287   .inflash.dictinary:0000000000000748 LF_TOKEN
       stm32eforth.s:2287   .inflash.dictinary:000000000000074c _TOKEN
       stm32eforth.s:2297   .inflash.dictinary:0000000000000754 CA_TOKEN
       stm32eforth.s:2297   .text:0000000000000e48 TOKEN
       stm32eforth.s:2297   .inflash.dictinary:0000000000000758 LF_TOCFA
       stm32eforth.s:2297   .inflash.dictinary:000000000000075c _TOCFA
       stm32eforth.s:2308   .inflash.dictinary:0000000000000764 CA_TOCFA
       stm32eforth.s:2308   .text:0000000000000e58 TOCFA
       stm32eforth.s:2311   .text:0000000000000e64 $d
       stm32eforth.s:2312   .text:0000000000000e68 $t
       stm32eforth.s:2308   .inflash.dictinary:0000000000000768 LF_NAMET
       stm32eforth.s:2308   .inflash.dictinary:000000000000076c _NAMET
       stm32eforth.s:2319   .inflash.dictinary:0000000000000774 CA_NAMET
       stm32eforth.s:2319   .text:0000000000000e78 NAMET
       stm32eforth.s:2319   .inflash.dictinary:0000000000000778 LF_SAMEQ
       stm32eforth.s:2319   .inflash.dictinary:000000000000077c _SAMEQ
       stm32eforth.s:2334   .inflash.dictinary:0000000000000784 CA_SAMEQ
       stm32eforth.s:2334   .text:0000000000000e88 SAMEQ
       stm32eforth.s:2354   .text:0000000000000ed0 SAME2
       stm32eforth.s:2338   .text:0000000000000e94 SAME1
       stm32eforth.s:2350   .text:0000000000000ec0 $d
       stm32eforth.s:2351   .text:0000000000000ec4 $t
ARM GAS  stm32eforth.s 			page 95


       stm32eforth.s:2356   .text:0000000000000ed4 $d
       stm32eforth.s:2357   .text:0000000000000ed8 $t
       stm32eforth.s:2357   .text:0000000000000edc $d
       stm32eforth.s:2358   .text:0000000000000ee0 $t
       stm32eforth.s:2370   .text:0000000000000ee4 FIND
       stm32eforth.s:2379   .text:0000000000000f04 FIND1
       stm32eforth.s:2382   .text:0000000000000f0c $d
       stm32eforth.s:2401   .text:0000000000000f54 FIND6
       stm32eforth.s:2383   .text:0000000000000f10 $t
       stm32eforth.s:2385   .text:0000000000000f1c $d
       stm32eforth.s:2386   .text:0000000000000f20 $t
       stm32eforth.s:2390   .text:0000000000000f30 $d
       stm32eforth.s:2394   .text:0000000000000f40 FIND2
       stm32eforth.s:2391   .text:0000000000000f34 $t
       stm32eforth.s:2399   .text:0000000000000f50 FIND3
       stm32eforth.s:2408   .text:0000000000000f6c FIND4
       stm32eforth.s:2410   .text:0000000000000f70 $d
       stm32eforth.s:2415   .text:0000000000000f84 FIND5
       stm32eforth.s:2411   .text:0000000000000f74 $t
       stm32eforth.s:2334   .inflash.dictinary:0000000000000788 LF_NAMEQ
       stm32eforth.s:2334   .inflash.dictinary:000000000000078c _NAMEQ
       stm32eforth.s:2428   .inflash.dictinary:0000000000000794 CA_NAMEQ
       stm32eforth.s:2428   .text:0000000000000fa8 NAMEQ
       stm32eforth.s:2445   .text:0000000000000fbc BKSP
       stm32eforth.s:2454   .text:0000000000000fdc $d
       stm32eforth.s:2465   .text:0000000000001004 BACK1
       stm32eforth.s:2455   .text:0000000000000fe0 $t
       stm32eforth.s:2455   .text:0000000000000fe4 $d
       stm32eforth.s:2456   .text:0000000000000fe8 $t
       stm32eforth.s:2462   .text:0000000000000ffc $d
       stm32eforth.s:2463   .text:0000000000001000 $t
       stm32eforth.s:2475   .text:0000000000001008 TAP
       stm32eforth.s:2492   .text:0000000000001024 KTAP
       stm32eforth.s:2493   .text:0000000000001024 TTAP
       stm32eforth.s:2496   .text:0000000000001030 $d
       stm32eforth.s:2497   .text:0000000000001034 $t
       stm32eforth.s:2499   .text:000000000000103c $d
       stm32eforth.s:2511   .text:000000000000106c KTAP2
       stm32eforth.s:2500   .text:0000000000001040 $t
       stm32eforth.s:2500   .text:0000000000001044 $d
       stm32eforth.s:2501   .text:0000000000001048 $t
       stm32eforth.s:2503   .text:0000000000001050 $d
       stm32eforth.s:2508   .text:0000000000001064 KTAP1
       stm32eforth.s:2504   .text:0000000000001054 $t
       stm32eforth.s:2507   .text:0000000000001060 $d
       stm32eforth.s:2509   .text:0000000000001064 $t
       stm32eforth.s:2428   .inflash.dictinary:0000000000000798 LF_ACCEP
       stm32eforth.s:2428   .inflash.dictinary:000000000000079c _ACCEP
       stm32eforth.s:2520   .inflash.dictinary:00000000000007a4 CA_ACCEP
       stm32eforth.s:2520   .text:0000000000001080 ACCEP
       stm32eforth.s:2525   .text:0000000000001090 ACCP1
       stm32eforth.s:2529   .text:000000000000109c $d
       stm32eforth.s:2544   .text:00000000000010cc ACCP4
       stm32eforth.s:2530   .text:00000000000010a0 $t
       stm32eforth.s:2533   .text:00000000000010b0 $d
       stm32eforth.s:2534   .text:00000000000010b4 $t
       stm32eforth.s:2536   .text:00000000000010bc $d
ARM GAS  stm32eforth.s 			page 96


       stm32eforth.s:2539   .text:00000000000010c6 ACCP2
       stm32eforth.s:2537   .text:00000000000010c0 $t
       stm32eforth.s:2542   .text:00000000000010ca ACCP3
       stm32eforth.s:2520   .inflash.dictinary:00000000000007a8 LF_QUERY
       stm32eforth.s:2520   .inflash.dictinary:00000000000007ac _QUERY
       stm32eforth.s:2552   .inflash.dictinary:00000000000007b4 CA_QUERY
       stm32eforth.s:2552   .text:00000000000010dc QUERY
       stm32eforth.s:2555   .text:00000000000010e8 $d
       stm32eforth.s:2556   .text:00000000000010ec $t
       stm32eforth.s:2560   .text:0000000000001100 $d
       stm32eforth.s:2561   .text:0000000000001104 $t
       stm32eforth.s:2552   .inflash.dictinary:00000000000007b8 LF_ABORT
       stm32eforth.s:2552   .inflash.dictinary:00000000000007bc _ABORT
       stm32eforth.s:2570   .inflash.dictinary:00000000000007c4 CA_ABORT
       stm32eforth.s:2570   .text:0000000000001110 ABORT
       stm32eforth.s:2573   .text:0000000000001118 ABORT1
       stm32eforth.s:2576   .text:0000000000001124 $d
       stm32eforth.s:2577   .text:0000000000001128 $t
       stm32eforth.s:2687   .text:0000000000001248 PRESE
       stm32eforth.s:2695   .text:000000000000125c QUIT
       stm32eforth.s:2589   .text:0000000000001138 ABORQ
       stm32eforth.s:2594   .text:0000000000001148 $d
       stm32eforth.s:2595   .text:000000000000114c $t
       stm32eforth.s:2570   .inflash.dictinary:00000000000007c8 LF_INTER
       stm32eforth.s:2570   .inflash.dictinary:00000000000007cc _INTER
       stm32eforth.s:2605   .inflash.dictinary:00000000000007d8 CA_INTER
       stm32eforth.s:2610   .text:0000000000001168 $d
       stm32eforth.s:2620   .text:0000000000001198 INTE1
       stm32eforth.s:2611   .text:000000000000116c $t
       stm32eforth.s:2612   .text:0000000000001174 $d
       stm32eforth.s:2613   .text:0000000000001178 $t
       stm32eforth.s:2615   .text:0000000000001180 $d
       stm32eforth.s:2617   .text:000000000000118e $t
       stm32eforth.s:2623   .text:00000000000011a0 $d
       stm32eforth.s:2625   .text:00000000000011a8 INTE2
       stm32eforth.s:2624   .text:00000000000011a4 $t
       stm32eforth.s:2605   .inflash.dictinary:00000000000007dc LF_LBRAC
       stm32eforth.s:2605   .inflash.dictinary:00000000000007e0 _LBRAC
       stm32eforth.s:2630   .inflash.dictinary:00000000000007e4 CA_LBRAC
       stm32eforth.s:2630   .text:00000000000011ac LBRAC
       stm32eforth.s:2632   .text:00000000000011b4 $d
       stm32eforth.s:2633   .text:00000000000011b8 $t
       stm32eforth.s:2630   .inflash.dictinary:00000000000007e8 LF_DOTOK
       stm32eforth.s:2630   .inflash.dictinary:00000000000007ec _DOTOK
       stm32eforth.s:2639   .inflash.dictinary:00000000000007f0 CA_DOTOK
       stm32eforth.s:2639   .text:00000000000011c4 DOTOK
       stm32eforth.s:2641   .text:00000000000011cc $d
       stm32eforth.s:2642   .text:00000000000011d0 $t
       stm32eforth.s:2646   .text:00000000000011e0 $d
       stm32eforth.s:2650   .text:00000000000011ec DOTO1
       stm32eforth.s:2647   .text:00000000000011e4 $t
       stm32eforth.s:2648   .text:00000000000011e8 $d
       stm32eforth.s:2651   .text:00000000000011ec $t
       stm32eforth.s:2639   .inflash.dictinary:00000000000007f4 LF_QSTAC
       stm32eforth.s:2639   .inflash.dictinary:00000000000007f8 _QSTAC
       stm32eforth.s:2656   .inflash.dictinary:0000000000000800 CA_QSTAC
       stm32eforth.s:2656   .text:00000000000011f4 QSTAC
ARM GAS  stm32eforth.s 			page 97


       stm32eforth.s:2661   .text:0000000000001204 $d
       stm32eforth.s:2656   .inflash.dictinary:0000000000000804 LF_EVAL
       stm32eforth.s:2656   .inflash.dictinary:0000000000000808 _EVAL
       stm32eforth.s:2668   .inflash.dictinary:0000000000000810 CA_EVAL
       stm32eforth.s:2668   .text:0000000000001214 EVAL
       stm32eforth.s:2670   .text:0000000000001218 EVAL1
       stm32eforth.s:2675   .text:0000000000001228 $d
       stm32eforth.s:2680   .text:000000000000123c EVAL2
       stm32eforth.s:2676   .text:000000000000122c $t
       stm32eforth.s:2668   .inflash.dictinary:0000000000000814 LF_PRESE
       stm32eforth.s:2668   .inflash.dictinary:0000000000000818 _PRESE
       stm32eforth.s:2687   .inflash.dictinary:0000000000000820 CA_PRESE
       stm32eforth.s:2687   .inflash.dictinary:0000000000000824 LF_QUIT
       stm32eforth.s:2687   .inflash.dictinary:0000000000000828 _QUIT
       stm32eforth.s:2695   .inflash.dictinary:0000000000000830 CA_QUIT
       stm32eforth.s:2698   .text:0000000000001268 QUIT1
       stm32eforth.s:2700   .text:000000000000126c QUIT2
       stm32eforth.s:2704   .text:0000000000001278 $d
       stm32eforth.s:2695   .inflash.dictinary:0000000000000834 LF_UNLOCK
       stm32eforth.s:2695   .inflash.dictinary:0000000000000838 _UNLOCK
       stm32eforth.s:2711   .inflash.dictinary:0000000000000840 CA_UNLOCK
       stm32eforth.s:2711   .text:000000000000127c UNLOCK
       stm32eforth.s:2711   .text:000000000000127c $t
       stm32eforth.s:2714   .text:0000000000001284 $d
       stm32eforth.s:2735   .text:00000000000012a4 LOCK
       stm32eforth.s:3024   .text:00000000000015e0 flash_regs
       stm32eforth.s:2715   .text:0000000000001288 $t
       stm32eforth.s:2742   .text:00000000000012b0 WAIT_BSY
       stm32eforth.s:2744   .text:00000000000012b2 WAIT1
       stm32eforth.s:2711   .inflash.dictinary:0000000000000844 LF_EPAGE
       stm32eforth.s:2711   .inflash.dictinary:0000000000000848 _EPAGE
       stm32eforth.s:2754   .inflash.dictinary:0000000000000854 CA_EPAGE
       stm32eforth.s:2754   .text:00000000000012bc EPAGE
       stm32eforth.s:2757   .text:00000000000012c8 $d
       stm32eforth.s:2758   .text:00000000000012cc $t
       stm32eforth.s:2767   .text:00000000000012ea $d
       stm32eforth.s:2768   .text:00000000000012ee $t
       stm32eforth.s:2772   .text:00000000000012fc $d
       stm32eforth.s:2774   .text:000000000000130a $t
       stm32eforth.s:2779   .text:0000000000001310 HWORD_WRITE
       stm32eforth.s:2792   .text:0000000000001332 $d
       stm32eforth.s:2793   .text:0000000000001336 $t
       stm32eforth.s:2794   .text:000000000000133a $d
       stm32eforth.s:2796   .text:0000000000001348 $t
       stm32eforth.s:2754   .inflash.dictinary:0000000000000858 LF_ISTOR
       stm32eforth.s:2754   .inflash.dictinary:000000000000085c _ISTOR
       stm32eforth.s:2804   .inflash.dictinary:0000000000000860 CA_ISTOR
       stm32eforth.s:2804   .text:000000000000134c ISTOR
       stm32eforth.s:2807   .text:0000000000001358 $d
       stm32eforth.s:2808   .text:000000000000135c $t
       stm32eforth.s:2818   .text:0000000000001388 $d
       stm32eforth.s:2819   .text:000000000000138c $t
       stm32eforth.s:2804   .inflash.dictinary:0000000000000864 LF_IMG_SIZE
       stm32eforth.s:2804   .inflash.dictinary:0000000000000868 _IMG_SIZE
       stm32eforth.s:2825   .inflash.dictinary:0000000000000874 CA_IMG_SIZE
       stm32eforth.s:2825   .text:0000000000001394 IMG_SIZE
       stm32eforth.s:2827   .text:000000000000139c $d
ARM GAS  stm32eforth.s 			page 98


       stm32eforth.s:2828   .text:00000000000013a0 $t
       stm32eforth.s:2832   .text:00000000000013b4 $d
       stm32eforth.s:2833   .text:00000000000013b8 $t
       stm32eforth.s:2836   .text:00000000000013c4 $d
       stm32eforth.s:2837   .text:00000000000013c8 $t
       stm32eforth.s:2825   .inflash.dictinary:0000000000000878 LF_IMGQ
       stm32eforth.s:2825   .inflash.dictinary:000000000000087c _IMGQ
       stm32eforth.s:2843   .inflash.dictinary:0000000000000884 CA_IMGQ
       stm32eforth.s:2843   .text:00000000000013d0 IMGQ
       stm32eforth.s:2843   .inflash.dictinary:0000000000000888 LF_LOAD_IMG
       stm32eforth.s:2843   .inflash.dictinary:000000000000088c _LOAD_IMG
       stm32eforth.s:2855   .inflash.dictinary:0000000000000898 CA_LOAD_IMG
       stm32eforth.s:2855   .text:00000000000013f0 LOAD_IMG
       stm32eforth.s:2859   .text:00000000000013fc $d
       stm32eforth.s:2861   .text:0000000000001400 $t
       stm32eforth.s:2855   .inflash.dictinary:000000000000089c LF_ERASE_MPG
       stm32eforth.s:2855   .inflash.dictinary:00000000000008a0 _ERASE_MPG
       stm32eforth.s:2885   .inflash.dictinary:00000000000008ac CA_ERASE_MPG
       stm32eforth.s:2885   .text:0000000000001448 ERASE_MPG
       stm32eforth.s:2935   .text:00000000000014d4 PG_TO_ADR
       stm32eforth.s:2890   .text:0000000000001458 $d
       stm32eforth.s:2892   .text:000000000000145c $t
       stm32eforth.s:2899   .text:0000000000001474 $d
       stm32eforth.s:2900   .text:0000000000001478 $t
       stm32eforth.s:2885   .inflash.dictinary:00000000000008b0 LF_FLSH_WR
       stm32eforth.s:2885   .inflash.dictinary:00000000000008b4 _FLSH_WR
       stm32eforth.s:2905   .inflash.dictinary:00000000000008bc CA_FLSH_WR
       stm32eforth.s:2905   .text:0000000000001480 FLSH_WR
       stm32eforth.s:2909   .text:000000000000148c $d
       stm32eforth.s:2911   .text:0000000000001490 $t
       stm32eforth.s:2920   .text:00000000000014b4 $d
       stm32eforth.s:2921   .text:00000000000014b8 $t
       stm32eforth.s:2905   .inflash.dictinary:00000000000008c0 LF_ADR_TO_PG
       stm32eforth.s:2905   .inflash.dictinary:00000000000008c4 _ADR_TO_PG
       stm32eforth.s:2928   .inflash.dictinary:00000000000008cc CA_ADR_TO_PG
       stm32eforth.s:2928   .text:00000000000014c8 ADR_TO_PG
       stm32eforth.s:2928   .inflash.dictinary:00000000000008d0 LF_PG_TO_ADR
       stm32eforth.s:2928   .inflash.dictinary:00000000000008d4 _PG_TO_ADR
       stm32eforth.s:2935   .inflash.dictinary:00000000000008dc CA_PG_TO_ADR
       stm32eforth.s:2935   .inflash.dictinary:00000000000008e0 LF_ERASE_IMG
       stm32eforth.s:2935   .inflash.dictinary:00000000000008e4 _ERASE_IMG
       stm32eforth.s:2942   .inflash.dictinary:00000000000008f0 CA_ERASE_IMG
       stm32eforth.s:2942   .text:00000000000014e0 ERASE_IMG
       stm32eforth.s:2948   .text:00000000000014f4 $d
       stm32eforth.s:2949   .text:00000000000014f8 $t
       stm32eforth.s:2953   .text:0000000000001508 $d
       stm32eforth.s:2954   .text:000000000000150c $t
       stm32eforth.s:2942   .inflash.dictinary:00000000000008f4 LF_SAVE_IMG
       stm32eforth.s:2942   .inflash.dictinary:00000000000008f8 _SAVE_IMG
       stm32eforth.s:2959   .inflash.dictinary:0000000000000904 CA_SAVE_IMG
       stm32eforth.s:2959   .text:0000000000001514 SAVE_IMG
       stm32eforth.s:2965   .text:0000000000001528 $d
       stm32eforth.s:2966   .text:000000000000152c $t
       stm32eforth.s:2969   .text:0000000000001538 $d
       stm32eforth.s:2971   .text:000000000000153c $t
       stm32eforth.s:2959   .inflash.dictinary:0000000000000908 LF_TURNKEY
       stm32eforth.s:2959   .inflash.dictinary:000000000000090c _TURNKEY
ARM GAS  stm32eforth.s 			page 99


       stm32eforth.s:2993   .inflash.dictinary:0000000000000914 CA_TURNKEY
       stm32eforth.s:2993   .text:0000000000001578 TURNKEY
       stm32eforth.s:3034   .text:00000000000015ec TICK
       stm32eforth.s:2993   .inflash.dictinary:0000000000000918 LF_FORGET
       stm32eforth.s:2993   .inflash.dictinary:000000000000091c _FORGET
       stm32eforth.s:3003   .inflash.dictinary:0000000000000924 CA_FORGET
       stm32eforth.s:3003   .text:0000000000001590 FORGET
       stm32eforth.s:3008   .text:00000000000015a4 $d
       stm32eforth.s:3009   .text:00000000000015a8 $t
       stm32eforth.s:3012   .text:00000000000015b4 $d
       stm32eforth.s:3013   .text:00000000000015b8 $t
       stm32eforth.s:3360   .text:0000000000001918 OVERT
       stm32eforth.s:3025   .text:00000000000015e0 $d
       stm32eforth.s:3003   .inflash.dictinary:0000000000000928 LF_TICK
       stm32eforth.s:3003   .inflash.dictinary:000000000000092c _TICK
       stm32eforth.s:3034   .inflash.dictinary:0000000000000930 CA_TICK
       stm32eforth.s:3034   .text:00000000000015ec $t
       stm32eforth.s:3039   .text:00000000000015fc $d
       stm32eforth.s:3041   .text:0000000000001604 TICK1
       stm32eforth.s:3040   .text:0000000000001600 $t
       stm32eforth.s:3034   .inflash.dictinary:0000000000000934 LF_ALLOT
       stm32eforth.s:3034   .inflash.dictinary:0000000000000938 _ALLOT
       stm32eforth.s:3045   .inflash.dictinary:0000000000000940 CA_ALLOT
       stm32eforth.s:3045   .text:0000000000001608 ALLOT
       stm32eforth.s:3045   .inflash.dictinary:0000000000000944 LF_COMMA
       stm32eforth.s:3045   .inflash.dictinary:0000000000000948 _COMMA
       stm32eforth.s:3053   .inflash.dictinary:000000000000094c CA_COMMA
       stm32eforth.s:3053   .text:0000000000001618 COMMA
       stm32eforth.s:3053   .inflash.dictinary:0000000000000950 LF_BCOMP
       stm32eforth.s:3053   .inflash.dictinary:0000000000000954 _BCOMP
       stm32eforth.s:3065   .inflash.dictinary:0000000000000960 CA_BCOMP
       stm32eforth.s:3065   .text:0000000000001638 BCOMP
       stm32eforth.s:3065   .inflash.dictinary:0000000000000964 LF_COMPI
       stm32eforth.s:3065   .inflash.dictinary:0000000000000968 _COMPI
       stm32eforth.s:3073   .inflash.dictinary:0000000000000970 CA_COMPI
       stm32eforth.s:3073   .text:0000000000001648 COMPI
       stm32eforth.s:3415   .text:00000000000019a6 CALLC
       stm32eforth.s:3073   .inflash.dictinary:0000000000000974 LF_LITER
       stm32eforth.s:3073   .inflash.dictinary:0000000000000978 _LITER
       stm32eforth.s:3087   .inflash.dictinary:0000000000000980 CA_LITER
       stm32eforth.s:3087   .text:0000000000001670 LITER
       stm32eforth.s:3088   .text:0000000000001670 $d
       stm32eforth.s:3089   .text:0000000000001674 $t
       stm32eforth.s:3091   .text:000000000000167c $d
       stm32eforth.s:3092   .text:0000000000001680 $t
       stm32eforth.s:3102   .text:0000000000001688 STRCQ
       stm32eforth.s:3104   .text:0000000000001690 $d
       stm32eforth.s:3105   .text:0000000000001694 $t
       stm32eforth.s:3107   .text:00000000000016a0 $d
       stm32eforth.s:3108   .text:00000000000016a4 $t
       stm32eforth.s:3087   .inflash.dictinary:0000000000000984 LF_FOR
       stm32eforth.s:3087   .inflash.dictinary:0000000000000988 _FOR
       stm32eforth.s:3121   .inflash.dictinary:000000000000098c CA_FOR
       stm32eforth.s:3121   .text:00000000000016c0 FOR
       stm32eforth.s:3124   .text:00000000000016c8 $d
       stm32eforth.s:3125   .text:00000000000016cc $t
       stm32eforth.s:3121   .inflash.dictinary:0000000000000990 LF_BEGIN
ARM GAS  stm32eforth.s 			page 100


       stm32eforth.s:3121   .inflash.dictinary:0000000000000994 _BEGIN
       stm32eforth.s:3130   .inflash.dictinary:000000000000099c CA_BEGIN
       stm32eforth.s:3130   .text:00000000000016d4 BEGIN
       stm32eforth.s:3130   .inflash.dictinary:00000000000009a0 LF_NEXT
       stm32eforth.s:3130   .inflash.dictinary:00000000000009a4 _NEXT
       stm32eforth.s:3137   .inflash.dictinary:00000000000009ac CA_NEXT
       stm32eforth.s:3137   .text:00000000000016e0 NEXT
       stm32eforth.s:3140   .text:00000000000016e8 $d
       stm32eforth.s:3141   .text:00000000000016ec $t
       stm32eforth.s:3137   .inflash.dictinary:00000000000009b0 LF_UNTIL
       stm32eforth.s:3137   .inflash.dictinary:00000000000009b4 _UNTIL
       stm32eforth.s:3146   .inflash.dictinary:00000000000009bc CA_UNTIL
       stm32eforth.s:3146   .text:00000000000016f4 UNTIL
       stm32eforth.s:3149   .text:00000000000016fc $d
       stm32eforth.s:3150   .text:0000000000001700 $t
       stm32eforth.s:3146   .inflash.dictinary:00000000000009c0 LF_AGAIN
       stm32eforth.s:3146   .inflash.dictinary:00000000000009c4 _AGAIN
       stm32eforth.s:3155   .inflash.dictinary:00000000000009cc CA_AGAIN
       stm32eforth.s:3155   .text:0000000000001708 AGAIN
       stm32eforth.s:3158   .text:0000000000001710 $d
       stm32eforth.s:3159   .text:0000000000001714 $t
       stm32eforth.s:3155   .inflash.dictinary:00000000000009d0 LF_IFF
       stm32eforth.s:3155   .inflash.dictinary:00000000000009d4 _IFF
       stm32eforth.s:3164   .inflash.dictinary:00000000000009d8 CA_IFF
       stm32eforth.s:3164   .text:000000000000171c IFF
       stm32eforth.s:3167   .text:0000000000001724 $d
       stm32eforth.s:3168   .text:0000000000001728 $t
       stm32eforth.s:3169   .text:0000000000001730 $d
       stm32eforth.s:3170   .text:0000000000001734 $t
       stm32eforth.s:3164   .inflash.dictinary:00000000000009dc LF_AHEAD
       stm32eforth.s:3164   .inflash.dictinary:00000000000009e0 _AHEAD
       stm32eforth.s:3176   .inflash.dictinary:00000000000009e8 CA_AHEAD
       stm32eforth.s:3176   .text:0000000000001740 AHEAD
       stm32eforth.s:3179   .text:0000000000001748 $d
       stm32eforth.s:3180   .text:000000000000174c $t
       stm32eforth.s:3181   .text:0000000000001754 $d
       stm32eforth.s:3182   .text:0000000000001758 $t
       stm32eforth.s:3176   .inflash.dictinary:00000000000009ec LF_REPEA
       stm32eforth.s:3176   .inflash.dictinary:00000000000009f0 _REPEA
       stm32eforth.s:3188   .inflash.dictinary:00000000000009f8 CA_REPEA
       stm32eforth.s:3188   .text:0000000000001764 REPEA
       stm32eforth.s:3188   .inflash.dictinary:00000000000009fc LF_THENN
       stm32eforth.s:3188   .inflash.dictinary:0000000000000a00 _THENN
       stm32eforth.s:3198   .inflash.dictinary:0000000000000a08 CA_THENN
       stm32eforth.s:3198   .text:000000000000177c THENN
       stm32eforth.s:3198   .inflash.dictinary:0000000000000a0c LF_AFT
       stm32eforth.s:3198   .inflash.dictinary:0000000000000a10 _AFT
       stm32eforth.s:3207   .inflash.dictinary:0000000000000a14 CA_AFT
       stm32eforth.s:3207   .text:0000000000001790 AFT
       stm32eforth.s:3207   .inflash.dictinary:0000000000000a18 LF_ELSEE
       stm32eforth.s:3207   .inflash.dictinary:0000000000000a1c _ELSEE
       stm32eforth.s:3217   .inflash.dictinary:0000000000000a24 CA_ELSEE
       stm32eforth.s:3217   .text:00000000000017a8 ELSEE
       stm32eforth.s:3217   .inflash.dictinary:0000000000000a28 LF_WHILE
       stm32eforth.s:3217   .inflash.dictinary:0000000000000a2c _WHILE
       stm32eforth.s:3226   .inflash.dictinary:0000000000000a34 CA_WHILE
       stm32eforth.s:3226   .text:00000000000017bc WHILE
ARM GAS  stm32eforth.s 			page 101


       stm32eforth.s:3226   .inflash.dictinary:0000000000000a38 LF_ABRTQ
       stm32eforth.s:3226   .inflash.dictinary:0000000000000a3c _ABRTQ
       stm32eforth.s:3234   .inflash.dictinary:0000000000000a44 CA_ABRTQ
       stm32eforth.s:3234   .text:00000000000017cc ABRTQ
       stm32eforth.s:3237   .text:00000000000017d4 $d
       stm32eforth.s:3238   .text:00000000000017d8 $t
       stm32eforth.s:3234   .inflash.dictinary:0000000000000a48 LF_STRQ
       stm32eforth.s:3234   .inflash.dictinary:0000000000000a4c _STRQ
       stm32eforth.s:3243   .inflash.dictinary:0000000000000a50 CA_STRQ
       stm32eforth.s:3243   .text:00000000000017e0 STRQ
       stm32eforth.s:3246   .text:00000000000017e8 $d
       stm32eforth.s:3247   .text:00000000000017ec $t
       stm32eforth.s:3243   .inflash.dictinary:0000000000000a54 LF_DOTQ
       stm32eforth.s:3243   .inflash.dictinary:0000000000000a58 _DOTQ
       stm32eforth.s:3252   .inflash.dictinary:0000000000000a5c CA_DOTQ
       stm32eforth.s:3252   .text:00000000000017f4 DOTQ
       stm32eforth.s:3255   .text:00000000000017fc $d
       stm32eforth.s:3256   .text:0000000000001800 $t
       stm32eforth.s:3252   .inflash.dictinary:0000000000000a60 LF_UNIQU
       stm32eforth.s:3252   .inflash.dictinary:0000000000000a64 _UNIQU
       stm32eforth.s:3265   .inflash.dictinary:0000000000000a6c CA_UNIQU
       stm32eforth.s:3265   .text:0000000000001808 UNIQU
       stm32eforth.s:3270   .text:0000000000001818 $d
       stm32eforth.s:3278   .text:0000000000001834 UNIQ1
       stm32eforth.s:3271   .text:000000000000181c $t
       stm32eforth.s:3272   .text:0000000000001820 $d
       stm32eforth.s:3274   .text:0000000000001828 $t
       stm32eforth.s:3289   .text:000000000000183c SNAME
       stm32eforth.s:3294   .text:000000000000184c $d
       stm32eforth.s:3308   .text:0000000000001884 SNAM1
       stm32eforth.s:3295   .text:0000000000001850 $t
       stm32eforth.s:3310   .text:0000000000001888 $d
       stm32eforth.s:3312   .text:0000000000001890 $t
       stm32eforth.s:3265   .inflash.dictinary:0000000000000a70 LF_SCOMP
       stm32eforth.s:3265   .inflash.dictinary:0000000000000a74 _SCOMP
       stm32eforth.s:3316   .inflash.dictinary:0000000000000a80 CA_SCOMP
       stm32eforth.s:3316   .text:0000000000001894 SCOMP
       stm32eforth.s:3321   .text:00000000000018a4 $d
       stm32eforth.s:3332   .text:00000000000018d0 SCOM2
       stm32eforth.s:3322   .text:00000000000018a8 $t
       stm32eforth.s:3323   .text:00000000000018b0 $d
       stm32eforth.s:3324   .text:00000000000018b4 $t
       stm32eforth.s:3326   .text:00000000000018bc $d
       stm32eforth.s:3329   .text:00000000000018c8 SCOM1
       stm32eforth.s:3327   .text:00000000000018c0 $t
       stm32eforth.s:3335   .text:00000000000018d8 $d
       stm32eforth.s:3338   .text:00000000000018e4 SCOM3
       stm32eforth.s:3336   .text:00000000000018dc $t
       stm32eforth.s:3345   .text:00000000000018ec COLON_ABORT
       stm32eforth.s:3316   .inflash.dictinary:0000000000000a84 LF_OVERT
       stm32eforth.s:3316   .inflash.dictinary:0000000000000a88 _OVERT
       stm32eforth.s:3360   .inflash.dictinary:0000000000000a90 CA_OVERT
       stm32eforth.s:3360   .inflash.dictinary:0000000000000a94 LF_SEMIS
       stm32eforth.s:3360   .inflash.dictinary:0000000000000a98 _SEMIS
       stm32eforth.s:3370   .inflash.dictinary:0000000000000a9c CA_SEMIS
       stm32eforth.s:3370   .text:0000000000001930 SEMIS
       stm32eforth.s:3370   .inflash.dictinary:0000000000000aa0 LF_RBRAC
ARM GAS  stm32eforth.s 			page 102


       stm32eforth.s:3370   .inflash.dictinary:0000000000000aa4 _RBRAC
       stm32eforth.s:3381   .inflash.dictinary:0000000000000aa8 CA_RBRAC
       stm32eforth.s:3381   .text:000000000000194c RBRAC
       stm32eforth.s:3383   .text:0000000000001954 $d
       stm32eforth.s:3384   .text:0000000000001958 $t
       stm32eforth.s:3392   .text:0000000000001964 COMPILE_BLW
       stm32eforth.s:3381   .inflash.dictinary:0000000000000aac LF_COLON
       stm32eforth.s:3381   .inflash.dictinary:0000000000000ab0 _COLON
       stm32eforth.s:3428   .inflash.dictinary:0000000000000ab4 CA_COLON
       stm32eforth.s:3428   .text:00000000000019c8 COLON
       stm32eforth.s:3483   .text:0000000000001a44 HEAD
       stm32eforth.s:3428   .inflash.dictinary:0000000000000ab8 LF_IMMED
       stm32eforth.s:3428   .inflash.dictinary:0000000000000abc _IMMED
       stm32eforth.s:3436   .inflash.dictinary:0000000000000ac8 CA_IMMED
       stm32eforth.s:3436   .text:00000000000019d8 IMMED
       stm32eforth.s:3438   .text:00000000000019e0 $d
       stm32eforth.s:3439   .text:00000000000019e4 $t
       stm32eforth.s:3436   .inflash.dictinary:0000000000000acc LF_ICOLON
       stm32eforth.s:3436   .inflash.dictinary:0000000000000ad0 _ICOLON
       stm32eforth.s:3452   .inflash.dictinary:0000000000000ad4 CA_ICOLON
       stm32eforth.s:3452   .text:0000000000001a04 ICOLON
       stm32eforth.s:3452   .inflash.dictinary:0000000000000ad8 LF_ISEMIS
       stm32eforth.s:3452   .inflash.dictinary:0000000000000adc _ISEMIS
       stm32eforth.s:3464   .inflash.dictinary:0000000000000ae0 CA_ISEMIS
       stm32eforth.s:3464   .text:0000000000001a20 ISEMIS
       stm32eforth.s:3464   .inflash.dictinary:0000000000000ae4 LF_HEAD
       stm32eforth.s:3464   .inflash.dictinary:0000000000000ae8 _HEAD
       stm32eforth.s:3483   .inflash.dictinary:0000000000000af0 CA_HEAD
       stm32eforth.s:3483   .inflash.dictinary:0000000000000af4 LF_CONST
       stm32eforth.s:3483   .inflash.dictinary:0000000000000af8 _CONST
       stm32eforth.s:3498   .inflash.dictinary:0000000000000b04 CA_CONST
       stm32eforth.s:3498   .text:0000000000001a6c CONST
       stm32eforth.s:3501   .text:0000000000001a78 $d
       stm32eforth.s:3502   .text:0000000000001a7c $t
       stm32eforth.s:3510   .text:0000000000001a8c DODOES
       stm32eforth.s:3521   .text:0000000000001ab8 $d
       stm32eforth.s:3522   .text:0000000000001abc $t
       stm32eforth.s:3498   .inflash.dictinary:0000000000000b08 LF_DOES
       stm32eforth.s:3498   .inflash.dictinary:0000000000000b0c _DOES
       stm32eforth.s:3539   .inflash.dictinary:0000000000000b14 CA_DOES
       stm32eforth.s:3539   .text:0000000000001ae8 DOES
       stm32eforth.s:3541   .text:0000000000001af0 $d
       stm32eforth.s:3542   .text:0000000000001af4 $t
       stm32eforth.s:3539   .inflash.dictinary:0000000000000b18 LF_CREAT
       stm32eforth.s:3539   .inflash.dictinary:0000000000000b1c _CREAT
       stm32eforth.s:3554   .inflash.dictinary:0000000000000b24 CA_CREAT
       stm32eforth.s:3554   .text:0000000000001b14 CREAT
       stm32eforth.s:3557   .text:0000000000001b20 $d
       stm32eforth.s:3558   .text:0000000000001b24 $t
       stm32eforth.s:3554   .inflash.dictinary:0000000000000b28 LF_VARIA
       stm32eforth.s:3554   .inflash.dictinary:0000000000000b2c _VARIA
       stm32eforth.s:3563   .inflash.dictinary:0000000000000b38 CA_VARIA
       stm32eforth.s:3563   .text:0000000000001b2c VARIA
       stm32eforth.s:3566   .text:0000000000001b38 $d
       stm32eforth.s:3567   .text:0000000000001b3c $t
       stm32eforth.s:3582   .text:0000000000001b48 DMP
       stm32eforth.s:3585   .text:0000000000001b54 $d
ARM GAS  stm32eforth.s 			page 103


       stm32eforth.s:3586   .text:0000000000001b58 $t
       stm32eforth.s:3596   .text:0000000000001b80 PDUM2
       stm32eforth.s:3590   .text:0000000000001b68 PDUM1
       stm32eforth.s:3593   .text:0000000000001b74 $d
       stm32eforth.s:3594   .text:0000000000001b78 $t
       stm32eforth.s:3598   .text:0000000000001b84 $d
       stm32eforth.s:3599   .text:0000000000001b88 $t
       stm32eforth.s:3563   .inflash.dictinary:0000000000000b3c LF_DUMP
       stm32eforth.s:3563   .inflash.dictinary:0000000000000b40 _DUMP
       stm32eforth.s:3603   .inflash.dictinary:0000000000000b48 CA_DUMP
       stm32eforth.s:3603   .text:0000000000001b8c DUMP
       stm32eforth.s:3609   .text:0000000000001ba4 $d
       stm32eforth.s:3610   .text:0000000000001ba8 $t
       stm32eforth.s:3623   .text:0000000000001bdc DUMP4
       stm32eforth.s:3613   .text:0000000000001bb4 DUMP1
       stm32eforth.s:3615   .text:0000000000001bbc $d
       stm32eforth.s:3616   .text:0000000000001bc0 $t
       stm32eforth.s:3625   .text:0000000000001be0 $d
       stm32eforth.s:3626   .text:0000000000001be4 DUMP3
       stm32eforth.s:3627   .text:0000000000001be4 $t
       stm32eforth.s:3603   .inflash.dictinary:0000000000000b4c LF_DOTS
       stm32eforth.s:3603   .inflash.dictinary:0000000000000b50 _DOTS
       stm32eforth.s:3635   .inflash.dictinary:0000000000000b54 CA_DOTS
       stm32eforth.s:3635   .text:0000000000001bf8 DOTS
       stm32eforth.s:3645   .text:0000000000001c18 DOTS2
       stm32eforth.s:3641   .text:0000000000001c0c DOTS1
       stm32eforth.s:3647   .text:0000000000001c1c $d
       stm32eforth.s:3648   .text:0000000000001c20 $t
       stm32eforth.s:3635   .inflash.dictinary:0000000000000b58 LF_TNAME
       stm32eforth.s:3635   .inflash.dictinary:0000000000000b5c _TNAME
       stm32eforth.s:3653   .inflash.dictinary:0000000000000b64 CA_TNAME
       stm32eforth.s:3653   .text:0000000000001c28 TNAME
       stm32eforth.s:3658   .text:0000000000001c38 TNAM1
       stm32eforth.s:3661   .text:0000000000001c40 $d
       stm32eforth.s:3671   .text:0000000000001c68 TNAM2
       stm32eforth.s:3662   .text:0000000000001c44 $t
       stm32eforth.s:3667   .text:0000000000001c58 $d
       stm32eforth.s:3668   .text:0000000000001c5c $t
       stm32eforth.s:3653   .inflash.dictinary:0000000000000b68 LF_DOTID
       stm32eforth.s:3653   .inflash.dictinary:0000000000000b6c _DOTID
       stm32eforth.s:3678   .inflash.dictinary:0000000000000b70 CA_DOTID
       stm32eforth.s:3678   .text:0000000000001c74 DOTID
       stm32eforth.s:3682   .text:0000000000001c80 $d
       stm32eforth.s:3688   .text:0000000000001c9c DOTI1
       stm32eforth.s:3683   .text:0000000000001c84 $t
       stm32eforth.s:3684   .text:0000000000001c8c $d
       stm32eforth.s:3685   .text:0000000000001c90 $t
       stm32eforth.s:3690   .text:0000000000001ca0 $d
       stm32eforth.s:3692   .text:0000000000001caa $t
       stm32eforth.s:3695   *ABS*:0000000000000001 WANT_SEE
       stm32eforth.s:3700   .text:0000000000001cb0 DOTCA
       stm32eforth.s:3704   .text:0000000000001cc0 $d
       stm32eforth.s:3705   .text:0000000000001cc4 $t
       stm32eforth.s:3710   .text:0000000000001ccc CODE_ABORT
       stm32eforth.s:3719   .text:0000000000001cec $d
       stm32eforth.s:3720   .text:0000000000001cf0 $t
       stm32eforth.s:3722   .text:0000000000001cf8 $d
ARM GAS  stm32eforth.s 			page 104


       stm32eforth.s:3724   .text:0000000000001d02 $t
       stm32eforth.s:3727   .text:0000000000001d08 $d
       stm32eforth.s:3736   .text:0000000000001d18 UNNESTQ
       stm32eforth.s:3745   .text:0000000000001d38 $d
       stm32eforth.s:3746   .text:0000000000001d3c $t
       stm32eforth.s:3747   .text:0000000000001d40 $d
       stm32eforth.s:3755   .text:0000000000001d50 NONAMEQ
       stm32eforth.s:3757   .text:0000000000001d58 $d
       stm32eforth.s:3758   .text:0000000000001d5c $t
       stm32eforth.s:3759   .text:0000000000001d64 $d
       stm32eforth.s:4041   .rodata:0000000000000018 NONAME_SUB
       stm32eforth.s:3760   .text:0000000000001d68 $t
       stm32eforth.s:3766   .text:0000000000001d80 $d
       stm32eforth.s:3767   .text:0000000000001d84 $t
       stm32eforth.s:3769   .text:0000000000001d8c $d
       stm32eforth.s:3770   .text:0000000000001d90 $t
       stm32eforth.s:3774   .text:0000000000001da0 $d
       stm32eforth.s:3775   .text:0000000000001da4 $t
       stm32eforth.s:3776   .text:0000000000001dac $d
       stm32eforth.s:3777   .text:0000000000001db0 $t
       stm32eforth.s:3778   .text:0000000000001db8 $d
       stm32eforth.s:4047   .rodata:0000000000000054 ANONYMOUS
       stm32eforth.s:3779   .text:0000000000001dbc $t
       stm32eforth.s:3797   .text:0000000000001dec DOTNONAME
       stm32eforth.s:3800   .text:0000000000001df8 $d
       stm32eforth.s:3801   .text:0000000000001dfc $t
       stm32eforth.s:3808   .text:0000000000001e0c IS_BLW
       stm32eforth.s:3810   .text:0000000000001e14 $d
       stm32eforth.s:3811   .text:0000000000001e18 $t
       stm32eforth.s:3678   .inflash.dictinary:0000000000000b74 LF_SEE
       stm32eforth.s:3678   .inflash.dictinary:0000000000000b78 _SEE
       stm32eforth.s:3820   .inflash.dictinary:0000000000000b7c CA_SEE
       stm32eforth.s:3820   .text:0000000000001e30 SEE
       stm32eforth.s:3838   .text:0000000000001e64 SCOL
       stm32eforth.s:3820   .inflash.dictinary:0000000000000b80 LF_SCOL
       stm32eforth.s:3820   .inflash.dictinary:0000000000000b84 _SCOL
       stm32eforth.s:3838   .inflash.dictinary:0000000000000b90 CA_SCOL
       stm32eforth.s:3840   .text:0000000000001e6c $d
       stm32eforth.s:3841   .text:0000000000001e70 $t
       stm32eforth.s:3842   .text:0000000000001e74 SCOL1
       stm32eforth.s:3847   .text:0000000000001e84 $d
       stm32eforth.s:3848   .text:0000000000001e88 $t
       stm32eforth.s:3854   .text:0000000000001ea0 $d
       stm32eforth.s:3855   .text:0000000000001ea4 $t
       stm32eforth.s:3858   .text:0000000000001eb0 $d
       stm32eforth.s:3859   .text:0000000000001eb4 $t
       stm32eforth.s:3892   .text:0000000000001f14 DECOMP
       stm32eforth.s:3863   .text:0000000000001ec4 $d
       stm32eforth.s:3864   .text:0000000000001ec8 $t
       stm32eforth.s:3870   .text:0000000000001ed0 BLADR
       stm32eforth.s:3838   .inflash.dictinary:0000000000000b94 LF_DECOMP
       stm32eforth.s:3838   .inflash.dictinary:0000000000000b98 _DECOMP
       stm32eforth.s:3892   .inflash.dictinary:0000000000000ba4 CA_DECOMP
       stm32eforth.s:3899   .text:0000000000001f2c $d
       stm32eforth.s:3928   .text:0000000000001f8c DECOM2
       stm32eforth.s:3901   .text:0000000000001f30 $t
       stm32eforth.s:3902   .text:0000000000001f34 $d
ARM GAS  stm32eforth.s 			page 105


       stm32eforth.s:3904   .text:0000000000001f38 $t
       stm32eforth.s:3912   .text:0000000000001f54 $d
       stm32eforth.s:3915   .text:0000000000001f60 DECOMP1
       stm32eforth.s:3913   .text:0000000000001f58 $t
       stm32eforth.s:3914   .text:0000000000001f5c $d
       stm32eforth.s:3917   .text:0000000000001f64 DECOMP3
       stm32eforth.s:3916   .text:0000000000001f60 $t
       stm32eforth.s:3924   .text:0000000000001f7c $d
       stm32eforth.s:3925   .text:0000000000001f80 $t
       stm32eforth.s:3892   .inflash.dictinary:0000000000000ba8 LF_WORDS
       stm32eforth.s:3892   .inflash.dictinary:0000000000000bac _WORDS
       stm32eforth.s:3936   .inflash.dictinary:0000000000000bb4 CA_WORDS
       stm32eforth.s:3936   .text:0000000000001f98 WORDS
       stm32eforth.s:3941   .text:0000000000001fa8 WORS1
       stm32eforth.s:3944   .text:0000000000001fb0 $d
       stm32eforth.s:3951   .text:0000000000001fcc WORS2
       stm32eforth.s:3945   .text:0000000000001fb4 $t
       stm32eforth.s:3964   .text:0000000000001fd0 VERSN
       stm32eforth.s:3966   .text:0000000000001fd8 $d
       stm32eforth.s:3967   .text:0000000000001fdc $t
       stm32eforth.s:3936   .inflash.dictinary:0000000000000bb8 LF_HI
       stm32eforth.s:3936   .inflash.dictinary:0000000000000bbc _HI
       stm32eforth.s:3971   .inflash.dictinary:0000000000000bc0 CA_HI
       stm32eforth.s:3974   .text:0000000000001fec $d
       stm32eforth.s:3996   .rodata:0000000000000000 hi_msg
       stm32eforth.s:3975   .text:0000000000001ff0 $t
       stm32eforth.s:3984   .text:0000000000002018 $d
       stm32eforth.s:3985   .text:000000000000201c $t
       stm32eforth.s:3995   .rodata:0000000000000000 $d
       stm32eforth.s:3971   .inflash.dictinary:0000000000000bc4 LF_LASTN
       stm32eforth.s:4005   .inflash.dictinary:0000000000000bd0 CA_LASTN
       stm32eforth.s:4005   .text:000000000000203c LASTN
       stm32eforth.s:4013   .text:000000000000205c COLD1
       stm32eforth.s:4014   .text:0000000000002060 $d
       stm32eforth.s:4015   .text:0000000000002064 $t
       stm32eforth.s:4016   .text:000000000000206c $d
       stm32eforth.s:4017   .text:0000000000002070 $t
       stm32eforth.s:4017   .text:0000000000002074 $d
       stm32eforth.s:4018   .text:0000000000002078 $t
       stm32eforth.s:4018   .text:000000000000207c $d
       stm32eforth.s:4019   .text:0000000000002080 $t
       stm32eforth.s:4024   .text:0000000000002090 $d
       stm32eforth.s:4025   .text:0000000000002094 $t
       stm32eforth.s:4032   .text:00000000000020a8 COLD2
       stm32eforth.s:4033   .text:00000000000020a8 $d
       stm32eforth.s:4051   .rodata:000000000000008c BRAN_LBL
       stm32eforth.s:4055   .rodata:0000000000000098 QBRAN_LBL
       stm32eforth.s:4059   .rodata:00000000000000a4 DOLIT_LBL
       stm32eforth.s:4063   .rodata:00000000000000b0 DONEXT_LBL
       stm32eforth.s:4067   .rodata:00000000000000bc DODOES_LBL
       stm32eforth.s:4071   .rodata:00000000000000c8 DOVAR_LBL
       stm32eforth.s:4075   .rodata:00000000000000d4 DOCON_LBL
       stm32eforth.s:4079   .rodata:00000000000000e0 IS_BLW_LBL
       stm32eforth.s:4083   .rodata:00000000000000ec DOTQP_LBL
       stm32eforth.s:4087   .rodata:00000000000000f0 BLADR_LBL
       stm32eforth.s:4091   .rodata:00000000000000fc DOTCA_LBL
       stm32eforth.s:4095   .rodata:0000000000000108 NONAMEQ_LBL
ARM GAS  stm32eforth.s 			page 106


       stm32eforth.s:4099   .rodata:0000000000000114 STRCQ_LBL
       stm32eforth.s:4103   .rodata:000000000000011c VERSN_LBL
       stm32eforth.s:4109   .user:0000000000000000 $d
       stm32eforth.s:2663   .text:000000000000120f $d
       stm32eforth.s:2663   .text:0000000000001210 $t
       stm32eforth.s:3729   .text:0000000000001d0d $d
       stm32eforth.s:3729   .text:0000000000001d0e $t
       stm32eforth.s:3749   .text:0000000000001d47 $d
       stm32eforth.s:3749   .text:0000000000001d48 $t
       stm32eforth.s:295    .inflash:000000000000001f $d
       stm32eforth.s:295    .inflash:0000000000000020 $t

UNDEFINED SYMBOLS
_mstack
