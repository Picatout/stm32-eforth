ARM GAS  stm32eforth.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  stm32eforth.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m3
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
ARM GAS  stm32eforth.s 			page 3


  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
ARM GAS  stm32eforth.s 			page 4


  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
  81              	
  82              	/*************************************
  83              	    uninitialized variables 
  84              	*************************************/
  85              	  .section .bss
  86              	 
  87 0000 00000000 	system_vars: .space ULAST-UZERO
  87      00000000 
  87      00000000 
  87      00000000 
  87      00000000 
  88              	
  89              	  .equ ticks , system_vars+4
  90              	  .equ timer , system_var+8
  91              	
  92              	
  93              	/***********************************************
  94              	* MACROS
  95              	*	Assemble inline direct threaded code ending.
  96              	***********************************************/
  97              	 	.macro	_NEXT /*end low level word */
  98              		BX	LR
  99              		.endm
 100              	
 101              	 	.macro	_NEST /*start high level word */
 102              		STMFD	R2!,{LR}
 103              		.endm
 104              	
 105              	 	.macro	_UNNEST	/*end high level word */
 106              		LDMFD	R2!,{PC}
 107              		.endm
 108              	
 109              	 	.macro	_DOLIT /*long literals */
 110              		BL	DOLIT
 111              		.endm
 112              	
 113              	 	.macro	_PUSH	/*push R5 on data stack*/
 114              		STR	R5,[R1,#-4]!
 115              		.endm
 116              	
 117              	 	.macro	_POP /*pop data stack to R5 */
 118              		LDR	R5,[R1],#4
 119              		.endm
 120              	
 121              	/*************************************
ARM GAS  stm32eforth.s 			page 5


 122              	*   interrupt service vectors table 
 123              	**************************************/
 124              	   .section  .isr_vector,"a",%progbits
 125              	  .type  isr_vectors, %object
 126              	
 127              	isr_vectors:
 128 0000 00000000 	  .word   _rstack          /* return stack address */
 129 0004 00000000 	  .word   reset_handler    /* startup address */
 130              	/* core interrupts || exceptions */
 131 0008 00000000 	  .word   default_handler  /*  NMI */
 132 000c 00000000 	  .word   default_handler  /*  HardFault */
 133 0010 00000000 	  .word   default_handler  /*  Memory Management */
 134 0014 00000000 	  .word   default_handler  /* Bus fault */
 135 0018 00000000 	  .word   default_handler  /* Usage fault */
 136 001c 00000000 	  .word   0
 137 0020 00000000 	  .word   0
 138 0024 00000000 	  .word   0
 139 0028 00000000 	  .word   0
 140 002c 00000000 	  .word   default_handler  /* SWI instruction */
 141 0030 00000000 	  .word   default_handler  /* Debug monitor */
 142 0034 00000000 	  .word   0
 143 0038 00000000 	  .word   default_handler  /* PendSV */
 144 003c 00000000 	  .word   systick_handler  /* Systick */
 145              	  
 146              	  /* External Interrupts */
 147 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 148 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 149 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 150 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 151 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 152 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 153 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 154 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 155 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 156 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 157 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 158 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 159 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 160 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 161 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 162 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 163 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 164 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 165 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 166 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 167 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 168 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 169 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 170 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 171 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 172 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 173 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 174 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 175 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 176 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 177 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 178 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
ARM GAS  stm32eforth.s 			page 6


 179 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 180 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 181 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 182 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 183 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 184 00d4 00000000 	  .word      default_handler /* IRQ37, USART1 */                   
 185 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 186 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 187 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 188 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 189 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 190 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 191 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 192 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 193 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 194 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 195 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 196 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 197 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 198 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 199 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 200 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 201 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 202 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 203 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 204 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 205 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 206 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 207              	
 208              	  .size  isr_vectors, .-isr_vectors
 209              	
 210              	/*****************************************************
 211              	* default isr handler called on unexpected interrupt
 212              	*****************************************************/
 213              	    .section  .text.default_handler,"ax",%progbits
 214              	
 215              	  .type default_handler, %function
 216              	  .align 2 
 217              	  .global default_handler
 218              	default_handler:
 219 0000 00F0E2F8 		_DOLIT 
 220 0004 FFFFFFFF 		.word -1
 221 0008 FFF7FEFF 		BL ULED 
 222 000c 00F0B0FF 		BL	CR	// new line
 223 0010 00F0E8FF 		BL	DOTQP
 224 0014 10       		.byte	16
 225 0015 20657863 		.ascii " exception hatl!"	// model
 225      65707469 
 225      6F6E2068 
 225      61746C21 
 226 0025 0000BF   		.align 2 
 227 0028 00F06EFE 		BL HEX 
 228 002c 41F8045D 		_PUSH 
 229 0030 4EEA0E05 		ORR R5,LR,LR 
 230 0034 00F014FA 		BL ONEM 
 231 0038 01F024F8 		BL UDOT 
 232              	Infinite_Loop:
ARM GAS  stm32eforth.s 			page 7


 233 003c FEE7     	  b  Infinite_Loop
 234              	  .size  default_handler, .-default_handler
 235              	
 236              	  .type systick_handler, %function
 237 003e 00BF     	  .align 2 
 238              	  .global systick_handler
 239              	systick_handler:
 240 0040 0548     	  ldr r0,=ticks 
 241 0042 0168     	  ldr r1,[r0]
 242 0044 01F10101 	  add r1,#1
 243 0048 0160     	  str r1,[r0]
 244 004a 4168     	  ldr r1,[r0,#4]
 245 004c 11B1     	  cbz r1, stk_exit
 246 004e A1F10101 	  sub r1,#1
 247 0052 4160     	  str r1,[r0,#4]
 248              	stk_exit:
 249 0054 7047     	  bx lr
 250              	
 251              	  .equ LED_GPIO, GPIOC_BASE_ADR
 252              	  .equ LED_PIN, 13
 253              	
 254              	/**************************************
 255              	  reset_handler execute at MCU reset
 256              	***************************************/
 257 0056 0000     	    .section  .text.reset_handler
 258              	  .type  reset_handler, %function
 259              	  .align 2 
 260              	  .global reset_handler
 261              	reset_handler:
 262              	/* zero RAM */
 263 0000 4FF00000 		mov r0,#0
 264 0004 C2F20000 		movt r0,#0x2000
 265 0008 4FF00001 		mov r1,#0
 266 000c 4FF4A042 		mov r2,#0x5000 // RAM size 
 267              	zero_loop:
 268 0010 40F8041B 		str r1,[r0],#4
 269 0014 043A     		subs r2,#4
 270 0016 FBD1     		bne zero_loop		
 271 0018 00F004F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 272 001c 01F0D0FB 		bl	UNLOCK			/* unlock flash memory */
 273 0020 02F0C8B8 		b	COLD
 274              	
 275              	  .type init_devices, %function
 276              	  .align 2 
 277              	init_devices:
 278              	/* init clock to HSE 72 Mhz */
 279              	/* set 2 wait states in FLASH_ACR_LATENCY */
 280 0024 4FF40050 		mov r0,#FLASH_BASE_ADR&0xffff
 281 0028 C4F20200 		movt r0,#FLASH_BASE_ADR>>16 
 282 002c 4FF01202 	  mov r2,#0x12
 283 0030 0260     	  str r2,[r0,#FLASH_ACR]
 284              	/* configure clock for HSE, 8 Mhz crystal */
 285              	/* enable HSE in RCC_CR */
 286 0032 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 287 0036 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 288 003a 0168     	  ldr r1,[r0,#RCC_CR]
 289 003c 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
ARM GAS  stm32eforth.s 			page 8


 290 0040 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 291              	/* wait HSERDY loop */
 292              	wait_hserdy:
 293 0042 0168     	  ldr r1,[r0,#RCC_CR]
 294 0044 11F4003F 	  tst r1,#(1<<17)
 295 0048 FBD0     	  beq wait_hserdy
 296              	
 297              	/************************************************* 
 298              	   configure PLL mul factor and source 
 299              	   SYSCLOCK=72 Mhz
 300              	   select HSE as  PLL source clock
 301              	   multiply frequency by 9 
 302              	   APB1 clock is limited to 36 Mhz so divide by 2 
 303              	****************************************************/
 304 004a 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 305 004e C0F21D01 	  movt r1,#(7<<2)|1
 306 0052 4160     	  str r1,[r0,#RCC_CFGR]
 307              	  /* enable PLL */
 308 0054 0168     	  ldr r1,[r0,#RCC_CR]
 309 0056 41F08071 	  orr r1, #1<<24 
 310 005a 0160     	  str r1,[r0,#RCC_CR]
 311              	/* wait for PLLRDY */
 312              	wait_pllrdy:
 313 005c 0168     	  ldr r1,[r0,#RCC_CR]
 314 005e 11F0007F 	  tst r1,#(1<<25)
 315 0062 FBD0     	  beq wait_pllrdy 
 316              	/* select PLL as sysclock */
 317 0064 4168     	  ldr r1,[r0,#RCC_CFGR]
 318 0066 4FF6FC72 	  mov r2,#0xfffc
 319 006a CFF6FF72 	  movt r2,#0xffff
 320 006e 01EA0201 	  and r1,r1,r2 
 321 0072 4FF00202 	  mov r2,#2
 322 0076 41EA0201 	  orr r1,r1,r2
 323 007a 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 324              	/* wait for SWS==2 */
 325              	wait_sws:
 326 007c 4168     	  ldr r1,[r0,#RCC_CFGR]
 327 007e 11F0080F 	  tst r1,#(2<<2)
 328 0082 FBD0     	  beq wait_sws
 329              	/* now sysclock is 72 Mhz */
 330              	
 331              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 332 0084 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 333 0088 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 334 008c 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 335 0090 8161     	  str	r1, [r0, #RCC_APB2ENR]
 336              	
 337              	/* configure GPIOC:13 as output for user LED */
 338 0092 4FF48050 	  mov r0,#GPIOC_BASE_ADR&0xffff
 339 0096 C4F20100 	  movt r0,#GPIOC_BASE_ADR>>16
 340 009a 4168     	  ldr r1,[r0,#GPIO_CRH]
 341 009c 6FF47002 	  mvn r2,#(15<<20)
 342 00a0 01EA0201 	  and r1,r1,r2
 343 00a4 4FF4C002 	  mov r2,#(6<<20)
 344 00a8 41EA0201 	  orr r1,r1,r2
 345 00ac 4160     	  str r1,[r0,#GPIO_CRH]
 346              	
ARM GAS  stm32eforth.s 			page 9


 347              	/* configure USART1 */
 348              	/* set GPIOA PIN 9, uart TX  */
 349 00ae 4FF40060 	  mov r0,#GPIOA_BASE_ADR&0XFFFF
 350 00b2 C4F20100 	  movt r0,#GPIOA_BASE_ADR>>16	
 351 00b6 4168     	  ldr r1,[r0,#GPIO_CRH]
 352 00b8 6FF0F002 	  mvn r2,#(15<<4)
 353 00bc 01EA0201 	  and r1,r1,r2
 354 00c0 4FF0A002 	  mov r2,#(0xA<<4)
 355 00c4 41EA0201 	  orr r1,r1,r2 
 356 00c8 4160     	  str r1,[r0,#GPIO_CRH]
 357              	
 358              	  .equ UART, USART1_BASE_ADR 
 359 00ca 4FF46050 	  mov r0,#UART&0xFFFF
 360 00ce C4F20100 	  movt r0,#UART>>16	
 361              	/* BAUD rate */
 362 00d2 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 363 00d6 8160     	  str r1,[r0,#USART_BRR]
 364 00d8 42F20C01 	  mov r1,#(3<<2)+(1<<13)
 365 00dc C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 366              	/* configure systicks for 1msec ticks */
 367 00de 4EF21000 	  mov r0,#STK_BASE_ADR&0xFFFF
 368 00e2 CEF20000 	  movt r0,#STK_BASE_ADR>>16	
 369 00e6 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 370 00ea 4160     	  str r1,[r0,#STK_LOAD]
 371 00ec 4FF00301 	  mov r1,#3
 372 00f0 0160     	  str r1,[r0,STK_CTL]
 373 00f2 7047     	  bx lr 
 374              	
 375              	
 376              	/********************
 377              	* Version control
 378              	*******************/
 379              	.equ VER ,	0x01	/*major release version */
 380              	.equ EXT ,	0x01	/*minor extension */
 381              	
 382              	/* Constants */
 383              	
 384              	// .equ RAMOFFSET ,	0x20000000	;remap
 385              	// .equ MAPOFFSET ,	0x08000000	;remap
 386              	.equ RAMOFFSET  ,	0x00000000	/* absolute */
 387              	.equ MAPOFFSET  ,	0x00000000	/* absolute */
 388              	
 389              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 390              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 391              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 392              	
 393              	.equ CELLL ,	4	/*size of a cell */
 394              	.equ BASEE ,	16	/*default radix */
 395              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 396              	
 397              	.equ BKSPP ,	8	/*backspace */
 398              	.equ LF ,	10	  /*line feed */
 399              	.equ CRR ,	13	/*carriage return */
 400              	.equ ERR ,	27	/*error escape */
 401              	.equ TIC ,	39	/*tick */
 402              	
 403              	/********************************************************
ARM GAS  stm32eforth.s 			page 10


 404              	* RAM memory mapping
 405              	* 	0x20000000	RAM base address
 406              	*	  0x20000000  system variables	
 407              	* 	0x20000100	Forth dictionary
 408              	* 	0x2000????	top of dictionary, HERE
 409              	* 	0x2000????	WORD buffer, HERE+16
 410              	*   0x20004E00  end of user space
 411              	* 	0x20004F00	top of data stack
 412              	* 	0x20004F00	TIB terminal input buffer
 413              	* 	0x20004F80	top of return stack
 414              	* 	0x20005000	top of hardware stack for interrupts
 415              	********************************************************/
 416              	
 417              	.equ SPP 	,	0x20004F00	/*top of data stack (SP0) */
 418              	.equ TIBB ,	0x20004F00	/*terminal input buffer (TIB) */
 419              	.equ RPP 	,	0x20004F80	/*top of return stack (RP0) */
 420              	.equ UPP 	,	0x20000000	/*start of user area (UP0) */
 421              	.equ DTOP ,	0x20000100	/*start of usable RAM area (HERE) */
 422              	.equ DEND , 0x20004E00  /*usable RAM end */
 423              	
 424              	
 425              	/******************************************************
 426              	*  COLD start moves the following to USER variables.
 427              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 428              	******************************************************/
 429              		.align 2   	
 430              	  
 431              	  .equ TICKS_OFS, 4
 432              	  .equ TIMER_OFS, 8
 433              	  .equ BOOT_OFS, 12
 434              	  .equ BASE_OFS, 16
 435              	  .equ TMP_OFS, 20
 436              	  .equ SPAN_OFS, 24 
 437              	  .equ TOIN_OFS, 28
 438              	  .equ NTIB_OFS, 32
 439              	  .equ TIB_OFS, 36
 440              	  .equ EVAL_OFS, 40
 441              	  .equ HLD_OFS, 44 
 442              	  .equ CTXT_OFS, 48 
 443              	  .equ FLSH_CTOP_OFS, 52
 444              	  .equ RAM_CTOP_OFS, 56
 445              	  .equ LASTN_OFS, 60
 446              	
 447              	UZERO:
 448 00f4 00000000 		.word 0  			/*Reserved */
 449 00f8 00000000 		.word 0      /* system Ticks */
 450 00fc 00000000 	    .word 0     /* delay timer */
 451 0100 40210000 		.word HI  	/*'BOOT */
 452 0104 10000000 		.word BASEE 	/*BASE */
 453 0108 00000000 		.word 0			/*tmp */
 454 010c 00000000 		.word 0			/*SPAN */
 455 0110 00000000 		.word 0			/*>IN */
 456 0114 00000000 		.word 0			/*#TIB */
 457 0118 004F0020 		.word TIBB	/*TIB */
 458 011c 5C160000 		.word INTER	/*'EVAL */
 459 0120 00000000 		.word 0			/*HLD */
 460 0124 AC210000 		.word LASTN	/*CONTEXT */
ARM GAS  stm32eforth.s 			page 11


 461 0128 0A220000 		.word CTOP	/*FLASH */
 462 012c 00010020 		.word DTOP	/* start adress of RAM dictionary RAM */
 463 0130 AC210000 		.word LASTN	/*LAST */
 464 0134 00000000 	  .word 0,0			/*reserved */
 464      00000000 
 465              	ULAST:
 466              	
 467              	 
 468              	
 469              	// **********************************************************************
 470              	//  Start of Forth dictionary
 471              	//  usart1
 472              		.align 2 
 473              	
 474              	
 475              	//  ULED ( T|F -- )
 476              	// control user LED 
 477 013c 00000000 		.word 0
 478 0140 04       	_ULED: .byte 4
 479 0141 554C4544 		.ascii "ULED"
 480 0145 0000BF   		.align 2
 481              		.type ULED, %function 
 482              	ULED:
 483 0148 4FF40056 		mov r6,#(1<<LED_PIN)
 484 014c 4FF48054 		mov r4,#LED_GPIO&0xffff
 485 0150 C4F20104 		movt r4,#LED_GPIO>>16
 486 0154 2800     		movs r0,r5 
 487 0156 51F8045B 		_POP
 488 015a 01D0     		beq ULED_OFF 
 489 015c 6661     		str r6,[r4,#GPIO_BRR]
 490 015e 7047     		_NEXT 
 491              	ULED_OFF:
 492 0160 2661     		str r6,[r4,#GPIO_BSRR]	
 493 0162 7047     		_NEXT 
 494              		
 495              	//    ?RX	 ( -- c T | F )
 496              	// 	Return input character and true, or a false if no input.
 497 0164 40010000 		.word	_ULED-MAPOFFSET
 498 0168 04       	_QRX:	.byte   4
 499 0169 3F4B4559 		.ascii "?KEY"
 500 016d 0000BF   		.align 2 
 501              	QKEY:
 502              	QRX: 
 503 0170 41F8045D 		_PUSH
 504 0174 4FF46054 		mov r4,#UART&0xFFFF
 505 0178 C4F20104 		movt r4,#UART>>16
 506 017c 2688     		ldrh	r6, [r4, #USART_SR]	//  USART->SR
 507 017e 16F02006 		ands	r6, #0x20		//  RXE
 508 0182 05D0     		BEQ	QRX1
 509 0184 6568     	 	LDR	R5, [R4, #USART_DR]
 510 0186 41F8045D 		_PUSH
 511 018a 18BF     	  IT NE 
 512 018c 6FF00005 		MVNNE	R5,#0
 513              	QRX1:
 514 0190 08BF     		IT EQ 
 515 0192 0025     	  MOVEQ	R5,#0
 516 0194 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 12


 517 0196 00BF     		.align 2 
 518              	
 519              	//    TX!	 ( c -- )
 520              	// 	Send character c to the output device.
 521              	
 522 0198 68010000 		.word	_QRX-MAPOFFSET
 523 019c 04       	_TXSTO:	.byte 4
 524 019d 454D4954 		.ascii "EMIT"
 525 01a1 0000BF   		.align 2 	
 526              	TXSTO:
 527              	EMIT:
 528              	TECHO:
 529 01a4 4FF46054 		mov r4,#UART&0xFFFF
 530 01a8 C4F20104 		movt r4,#UART>>16
 531              	TX1:
 532 01ac 2688     		ldrh	r6, [r4, #USART_SR]	
 533 01ae 16F08006 		ands	r6, #0x80		//  TXE bit 
 534 01b2 FBD0     		beq	TX1
 535 01b4 A580     		strh	r5, [r4, #USART_DR]	
 536 01b6 51F8045B 		_POP
 537 01ba 7047     		_NEXT
 538              	
 539              		.align 2 
 540              		
 541              	// **************************************************************************
 542              	//  The kernel
 543              	
 544              	//    NOP	( -- )
 545              	// 	do nothing.
 546              	
 547 01bc 9C010000 		.word	_TXSTO-MAPOFFSET
 548 01c0 03       	_NOP:	.byte   3
 549 01c1 4E4F50   		.ascii "NOP"
 550              		.align 2 	
 551              	NOP:
 552 01c4 7047     		_NEXT
 553 01c6 00BF     		.align 2 
 554              	
 555              	//    doLIT	( -- w )
 556              	// 	Push an inline literal.
 557              	
 558              	// 	.word	_NOP-MAPOFFSET
 559              	// _LIT	.byte   COMPO+5
 560              	// 	.ascii "doLIT"
 561              	// 	.align 2 	
 562              	DOLIT:
 563 01c8 41F8045D 		_PUSH				//  store R5 on data stack
 564 01cc 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 565 01d0 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 566 01d4 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 567 01d8 7047     		_NEXT
 568 01da 00BF     		.align 2 
 569              	
 570              	//    EXECUTE	( ca -- )
 571              	// 	Execute the word at ca.
 572              	
 573 01dc C0010000 		.word	_NOP-MAPOFFSET
ARM GAS  stm32eforth.s 			page 13


 574 01e0 07       	_EXECU:	.byte   7
 575 01e1 45584543 		.ascii "EXECUTE"
 575      555445
 576              		.align 2 	
 577              	EXECU:
 578 01e8 45F00104 		ORR	R4,R5,#1		//  b0=1 
 579 01ec 51F8045B 		_POP
 580 01f0 2047     		BX	R4
 581 01f2 00BF     		.align 2 
 582              	
 583              	//    next	( -- )
 584              	// 	Run time code for the single index loop.
 585              	// 	: next ( -- ) \ hilevel model
 586              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 587              	
 588              	// 	.word	_EXECU-MAPOFFSET
 589              	// _DONXT	.byte   COMPO+4
 590              	// 	.ascii "next"
 591              	// 	.align 2 	
 592              	DONXT:
 593 01f4 1468     		LDR	R4,[R2]
 594 01f6 2400     		MOVS	R4,R4
 595 01f8 04D1     		BNE	NEXT1
 596 01fa 02F10402 		ADD	R2,R2,#4
 597 01fe 0EF1040E 		ADD	LR,LR,#4
 598 0202 7047     		_NEXT
 599              	NEXT1:
 600 0204 A4F10104 		SUB	R4,R4,#1
 601 0208 1460     		STR	R4,[R2]
 602 020a 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 603 020e 4EF0010E 		ORR	LR,LR,#1
 604 0212 7047     		_NEXT
 605              		.align 2 
 606              	//    ?branch	( f -- )
 607              	// 	Branch if flag is zero.
 608              	
 609              	// 	.word	_DONXT-MAPOFFSET
 610              	// _QBRAN	.byte   COMPO+7
 611              	// 	.ascii "?branch"
 612              	// 	.align 2 	
 613              	QBRAN:
 614 0214 2C00     		MOVS	R4,R5
 615 0216 51F8045B 		_POP
 616 021a 04D1     		BNE	QBRAN1
 617 021c 5EF801EC 		LDR	LR,[LR,#-1]
 618 0220 4EF0010E 		ORR LR,LR,#1
 619 0224 7047     		_NEXT
 620              	QBRAN1:
 621 0226 0EF1040E 	 	ADD	LR,LR,#4
 622 022a 7047     		_NEXT
 623              		.align 2 
 624              	
 625              	//    branch	( -- )
 626              	// 	Branch to an inline address.
 627              	
 628              	// 	.word	_QBRAN-MAPOFFSET
 629              	// _BRAN	.byte   COMPO+6
ARM GAS  stm32eforth.s 			page 14


 630              	// 	.ascii "branch"
 631              	// 	.align 2 	
 632              	BRAN:
 633 022c 5EF801EC 		LDR	LR,[LR,#-1]
 634 0230 4EF0010E 		ORR	LR,LR,#1
 635 0234 7047     		_NEXT
 636 0236 00BF     		.align 2 
 637              	
 638              	//    EXIT	(  -- )
 639              	// 	Exit the currently executing command.
 640              	
 641 0238 E0010000 		.word	_EXECU-MAPOFFSET
 642 023c 04       	_EXIT:	.byte   4
 643 023d 45584954 		.ascii "EXIT"
 644 0241 0000BF   		.align 2 	
 645              	EXIT:
 646 0244 52F804FB 		_UNNEST
 647              		.align 2 
 648              	//    !	   ( w a -- )
 649              	// 	Pop the data stack to memory.
 650              	
 651 0248 3C020000 		.word	_EXIT-MAPOFFSET
 652 024c 01       	_STORE:	.byte   1
 653 024d 21       		.ascii "!"
 654 024e 00BF     		.align 2 	
 655              	STORE:
 656 0250 51F8044B 		LDR	R4,[R1],#4
 657 0254 2C60     		STR	R4,[R5]
 658 0256 51F8045B 		_POP
 659 025a 7047     		_NEXT
 660              		.align 2 
 661              	//    @	   ( a -- w )
 662              	// 	Push memory location to the data stack.
 663              	
 664 025c 4C020000 		.word	_STORE-MAPOFFSET
 665 0260 01       	_AT:	.byte   1
 666 0261 40       		.ascii "@"
 667 0262 00BF     		.align 2 	
 668              	AT:
 669 0264 2D68     		LDR	R5,[R5]
 670 0266 7047     		_NEXT
 671              		.align 2 
 672              	//    C!	  ( c b -- )
 673              	// 	Pop the data stack to byte memory.
 674              	
 675 0268 60020000 		.word	_AT-MAPOFFSET
 676 026c 02       	_CSTOR:	.byte   2
 677 026d 4321     		.ascii "C!"
 678 026f 00       		.align 2 	
 679              	CSTOR:
 680 0270 51F8044B 		LDR	R4,[R1],#4
 681 0274 2C70     		STRB	R4,[R5]
 682 0276 51F8045B 		_POP
 683 027a 7047     		_NEXT
 684              		.align 2 
 685              	//    C@	  ( b -- c )
 686              	// 	Push byte memory location to the data stack.
ARM GAS  stm32eforth.s 			page 15


 687              	
 688 027c 6C020000 		.word	_CSTOR-MAPOFFSET
 689 0280 02       	_CAT:	.byte   2
 690 0281 4340     		.ascii "C@"
 691 0283 00       		.align 2 	
 692              	CAT:
 693 0284 2D78     		LDRB	R5,[R5]
 694 0286 7047     		_NEXT
 695              		.align 2 
 696              	//    R>	  ( -- w )
 697              	// 	Pop the return stack to the data stack.
 698              	
 699 0288 80020000 		.word	_CAT-MAPOFFSET
 700 028c 02       	_RFROM:	.byte   2
 701 028d 523E     		.ascii "R>"
 702 028f 00       		.align 2 	
 703              	RFROM:
 704 0290 41F8045D 		_PUSH
 705 0294 52F8045B 		LDR	R5,[R2],#4
 706 0298 7047     		_NEXT
 707 029a 00BF     		.align 2 
 708              	
 709              	//    R@	  ( -- w )
 710              	// 	Copy top of return stack to the data stack.
 711              	
 712 029c 8C020000 		.word	_RFROM-MAPOFFSET
 713 02a0 02       	_RAT:	.byte   2
 714 02a1 5240     		.ascii "R@"
 715 02a3 00       		.align 2 	
 716              	RAT:
 717 02a4 41F8045D 		_PUSH
 718 02a8 1568     		LDR	R5,[R2]
 719 02aa 7047     		_NEXT
 720              		.align 2 
 721              	//    >R	  ( w -- )
 722              	// 	Push the data stack to the return stack.
 723              	
 724 02ac A0020000 		.word	_RAT-MAPOFFSET
 725 02b0 42       	_TOR:	.byte   COMPO+2
 726 02b1 3E52     		.ascii ">R"
 727 02b3 00       		.align 2 	
 728              	TOR:
 729 02b4 42F8045D 		STR	R5,[R2,#-4]!
 730 02b8 51F8045B 		_POP
 731 02bc 7047     		_NEXT
 732 02be 00BF     		.align 2 
 733              	
 734              	//    SP@	 ( -- a )
 735              	// 	Push the current data stack pointer.
 736              	
 737 02c0 B0020000 		.word	_TOR-MAPOFFSET
 738 02c4 03       	_SPAT:	.byte   3
 739 02c5 535040   		.ascii "SP@"
 740              		.align 2 	
 741              	SPAT:
 742 02c8 41F8045D 		_PUSH
 743 02cc 0D46     		MOV	R5,R1
ARM GAS  stm32eforth.s 			page 16


 744 02ce 7047     		_NEXT
 745              		.align 2 
 746              	//    DROP	( w -- )
 747              	// 	Discard top stack item.
 748              	
 749 02d0 C4020000 		.word	_SPAT-MAPOFFSET
 750 02d4 04       	_DROP:	.byte   4
 751 02d5 44524F50 		.ascii "DROP"
 752 02d9 0000BF   		.align 2 	
 753              	DROP:
 754 02dc 51F8045B 		_POP
 755 02e0 7047     		_NEXT
 756 02e2 00BF     		.align 2 
 757              	
 758              	//    DUP	 ( w -- w w )
 759              	// 	Duplicate the top stack item.
 760              	
 761 02e4 D4020000 		.word	_DROP-MAPOFFSET
 762 02e8 03       	_DUPP:	.byte   3
 763 02e9 445550   		.ascii "DUP"
 764              		.align 2 	
 765              	DUPP:
 766 02ec 41F8045D 		_PUSH
 767 02f0 7047     		_NEXT
 768 02f2 00BF     		.align 2 
 769              	
 770              	//    SWAP	( w1 w2 -- w2 w1 )
 771              	// 	Exchange top two stack items.
 772              	
 773 02f4 E8020000 		.word	_DUPP-MAPOFFSET
 774 02f8 04       	_SWAP:	.byte   4
 775 02f9 53574150 		.ascii "SWAP"
 776 02fd 0000BF   		.align 2 	
 777              	SWAP:
 778 0300 0C68     		LDR	R4,[R1]
 779 0302 0D60     		STR	R5,[R1]
 780 0304 2546     		MOV	R5,R4
 781 0306 7047     		_NEXT
 782              		.align 2 
 783              	//    OVER	( w1 w2 -- w1 w2 w1 )
 784              	// 	Copy second stack item to top.
 785              	
 786 0308 F8020000 		.word	_SWAP-MAPOFFSET
 787 030c 04       	_OVER:	.byte   4
 788 030d 4F564552 		.ascii "OVER"
 789 0311 0000BF   		.align 2 	
 790              	OVER:
 791 0314 41F8045D 		_PUSH
 792 0318 4D68     		LDR	R5,[R1,#4]
 793 031a 7047     		_NEXT
 794              		.align 2 
 795              	//    0<	  ( n -- t )
 796              	// 	Return true if n is negative.
 797              	
 798 031c 0C030000 		.word	_OVER-MAPOFFSET
 799 0320 02       	_ZLESS:	.byte   2
 800 0321 303C     		.ascii "0<"
ARM GAS  stm32eforth.s 			page 17


 801 0323 00       		.align 2 	
 802              	ZLESS:
 803 0324 4FF00004 		MOV	R4,#0
 804 0328 04EB2505 		ADD	R5,R4,R5,ASR #32
 805 032c 7047     		_NEXT
 806 032e 00BF     		.align 2 
 807              	
 808              	//    AND	 ( w w -- w )
 809              	// 	Bitwise AND.
 810              	
 811 0330 20030000 		.word	_ZLESS-MAPOFFSET
 812 0334 03       	_ANDD:	.byte   3
 813 0335 414E44   		.ascii "AND"
 814              		.align 2 	
 815              	ANDD:
 816 0338 51F8044B 		LDR	R4,[R1],#4
 817 033c 05EA0405 		AND	R5,R5,R4
 818 0340 7047     		_NEXT
 819 0342 00BF     		.align 2 
 820              	
 821              	//    OR	  ( w w -- w )
 822              	// 	Bitwise inclusive OR.
 823              	
 824 0344 34030000 		.word	_ANDD-MAPOFFSET
 825 0348 02       	_ORR:	.byte   2
 826 0349 4F52     		.ascii "OR"
 827 034b 00       		.align 2 	
 828              	ORR:
 829 034c 51F8044B 		LDR	R4,[R1],#4
 830 0350 45EA0405 		ORR	R5,R5,R4
 831 0354 7047     		_NEXT
 832 0356 00BF     		.align 2 
 833              	
 834              	//    XOR	 ( w w -- w )
 835              	// 	Bitwise exclusive OR.
 836              	
 837 0358 48030000 		.word	_ORR-MAPOFFSET
 838 035c 03       	_XORR:	.byte   3
 839 035d 584F52   		.ascii "XOR"
 840              		.align 2 	
 841              	XORR:
 842 0360 51F8044B 		LDR	R4,[R1],#4
 843 0364 85EA0405 		EOR	R5,R5,R4
 844 0368 7047     		_NEXT
 845 036a 00BF     		.align 2 
 846              	
 847              	//    UM+	 ( w w -- w cy )
 848              	// 	Add two numbers, return the sum and carry flag.
 849              	
 850 036c 5C030000 		.word	_XORR-MAPOFFSET
 851 0370 03       	_UPLUS:	.byte   3
 852 0371 554D2B   		.ascii "UM+"
 853              		.align 2 	
 854              	UPLUS:
 855 0374 0C68     		LDR	R4,[R1]
 856 0376 6419     		ADDS	R4,R4,R5
 857 0378 4FF00005 		MOV	R5,#0
ARM GAS  stm32eforth.s 			page 18


 858 037c 45F10005 		ADC	R5,R5,#0
 859 0380 0C60     		STR	R4,[R1]
 860 0382 7047     		_NEXT
 861              		.align 2 
 862              	//    RSHIFT	 ( w # -- w )
 863              	// 	Right shift # bits.
 864              	
 865 0384 70030000 		.word	_UPLUS-MAPOFFSET
 866 0388 06       	_RSHIFT:	.byte   6
 867 0389 52534849 		.ascii "RSHIFT"
 867      4654
 868 038f 00       		.align 2 	
 869              	RSHIFT:
 870 0390 51F8044B 		LDR	R4,[R1],#4
 871 0394 44FA05F5 		MOV	R5,R4,ASR R5
 872 0398 7047     		_NEXT
 873 039a 00BF     		.align 2 
 874              	
 875              	//    LSHIFT	 ( w # -- w )
 876              	// 	Right shift # bits.
 877              	
 878 039c 88030000 		.word	_RSHIFT-MAPOFFSET
 879 03a0 06       	_LSHIFT:	.byte   6
 880 03a1 4C534849 		.ascii "LSHIFT"
 880      4654
 881 03a7 00       		.align 2 	
 882              	LSHIFT:
 883 03a8 51F8044B 		LDR	R4,[R1],#4
 884 03ac 04FA05F5 		MOV	R5,R4,LSL R5
 885 03b0 7047     		_NEXT
 886 03b2 00BF     		.align 2 
 887              	
 888              	//    +	 ( w w -- w )
 889              	// 	Add.
 890              	
 891 03b4 A0030000 		.word	_LSHIFT-MAPOFFSET
 892 03b8 01       	_PLUS:	.byte   1
 893 03b9 2B       		.ascii "+"
 894 03ba 00BF     		.align 2 	
 895              	PLUS:
 896 03bc 51F8044B 		LDR	R4,[R1],#4
 897 03c0 2544     		ADD	R5,R5,R4
 898 03c2 7047     		_NEXT
 899              		.align 2 
 900              	//    -	 ( w w -- w )
 901              	// 	Subtract.
 902              	
 903 03c4 B8030000 		.word	_PLUS-MAPOFFSET
 904 03c8 01       	_SUBB:	.byte   1
 905 03c9 2D       		.ascii "-"
 906 03ca 00BF     		.align 2 	
 907              	SUBB:
 908 03cc 51F8044B 		LDR	R4,[R1],#4
 909 03d0 C5EB0405 		RSB	R5,R5,R4
 910 03d4 7047     		_NEXT
 911 03d6 00BF     		.align 2 
 912              	
ARM GAS  stm32eforth.s 			page 19


 913              	//    *	 ( w w -- w )
 914              	// 	Multiply.
 915              	
 916 03d8 C8030000 		.word	_SUBB-MAPOFFSET
 917 03dc 01       	_STAR:	.byte   1
 918 03dd 2A       		.ascii "*"
 919 03de 00BF     		.align 2 	
 920              	STAR:
 921 03e0 51F8044B 		LDR	R4,[R1],#4
 922 03e4 04FB05F5 		MUL	R5,R4,R5
 923 03e8 7047     		_NEXT
 924 03ea 00BF     		.align 2 
 925              	
 926              	//    UM*	 ( w w -- ud )
 927              	// 	Unsigned multiply.
 928              	
 929 03ec DC030000 		.word	_STAR-MAPOFFSET
 930 03f0 03       	_UMSTA:	.byte   3
 931 03f1 554D2A   		.ascii "UM*"
 932              		.align 2 	
 933              	UMSTA:
 934 03f4 0C68     		LDR	R4,[R1]
 935 03f6 A5FB0467 		UMULL	R6,R7,R5,R4
 936 03fa 0E60     		STR	R6,[R1]
 937 03fc 3D46     		MOV	R5,R7
 938 03fe 7047     		_NEXT
 939              		.align 2 
 940              	//    M*	 ( w w -- d )
 941              	// 	Unsigned multiply.
 942              	
 943 0400 F0030000 		.word	_UMSTA-MAPOFFSET
 944 0404 02       	_MSTAR:	.byte   2
 945 0405 4D2A     		.ascii "M*"
 946 0407 00       		.align 2 	
 947              	MSTAR:
 948 0408 0C68     		LDR	R4,[R1]
 949 040a 85FB0467 		SMULL	R6,R7,R5,R4
 950 040e 0E60     		STR	R6,[R1]
 951 0410 3D46     		MOV	R5,R7
 952 0412 7047     		_NEXT
 953              		.align 2 
 954              	//    1+	 ( w -- w+1 )
 955              	// 	Add 1.
 956              	
 957 0414 04040000 		.word	_MSTAR-MAPOFFSET
 958 0418 02       	_ONEP:	.byte   2
 959 0419 312B     		.ascii "1+"
 960 041b 00       		.align 2 	
 961              	ONEP:
 962 041c 05F10105 		ADD	R5,R5,#1
 963 0420 7047     		_NEXT
 964 0422 00BF     		.align 2 
 965              	
 966              	//    1-	 ( w -- w-1 )
 967              	// 	Subtract 1.
 968              	
 969 0424 18040000 		.word	_ONEP-MAPOFFSET
ARM GAS  stm32eforth.s 			page 20


 970 0428 02       	_ONEM:	.byte   2
 971 0429 312D     		.ascii "1-"
 972 042b 00       		.align 2 	
 973              	ONEM:
 974 042c A5F10105 		SUB	R5,R5,#1
 975 0430 7047     		_NEXT
 976 0432 00BF     		.align 2 
 977              	
 978              	//    2+	 ( w -- w+2 )
 979              	// 	Add 1.
 980              	
 981 0434 28040000 		.word	_ONEM-MAPOFFSET
 982 0438 02       	_TWOP:	.byte   2
 983 0439 322B     		.ascii "2+"
 984 043b 00       		.align 2 	
 985              	TWOP:
 986 043c 05F10205 		ADD	R5,R5,#2
 987 0440 7047     		_NEXT
 988 0442 00BF     		.align 2 
 989              	
 990              	//    2-	 ( w -- w-2 )
 991              	// 	Subtract 2.
 992              	
 993 0444 38040000 		.word	_TWOP-MAPOFFSET
 994 0448 02       	_TWOM:	.byte   2
 995 0449 322D     		.ascii "2-"
 996 044b 00       		.align 2 	
 997              	TWOM:
 998 044c A5F10205 		SUB	R5,R5,#2
 999 0450 7047     		_NEXT
 1000 0452 00BF     		.align 2 
 1001              	
 1002              	//    CELL+	( w -- w+4 )
 1003              	// 	Add 4.
 1004              	
 1005 0454 48040000 		.word	_TWOM-MAPOFFSET
 1006 0458 05       	_CELLP:	.byte   5
 1007 0459 43454C4C 		.ascii "CELL+"
 1007      2B
 1008 045e 00BF     		.align 2 	
 1009              	CELLP:
 1010 0460 05F10405 		ADD	R5,R5,#4
 1011 0464 7047     		_NEXT
 1012 0466 00BF     		.align 2 
 1013              	
 1014              	//    CELL-	( w -- w-4 )
 1015              	// 	Subtract 4.
 1016              	
 1017 0468 58040000 		.word	_CELLP-MAPOFFSET
 1018 046c 05       	_CELLM:	.byte   5
 1019 046d 43454C4C 		.ascii "CELL-"
 1019      2D
 1020 0472 00BF     		.align 2 	
 1021              	CELLM:
 1022 0474 A5F10405 		SUB	R5,R5,#4
 1023 0478 7047     		_NEXT
 1024 047a 00BF     		.align 2 
ARM GAS  stm32eforth.s 			page 21


 1025              	 
 1026              	//    BL	( -- 32 )
 1027              	// 	Blank (ASCII space).
 1028              	
 1029 047c 6C040000 		.word	_CELLM-MAPOFFSET
 1030 0480 02       	_BLANK:	.byte   2
 1031 0481 424C     		.ascii "BL"
 1032 0483 00       		.align 2 	
 1033              	BLANK:
 1034 0484 41F8045D 		_PUSH
 1035 0488 4FF02005 		MOV	R5,#32
 1036 048c 7047     		_NEXT
 1037 048e 00BF     		.align 2 
 1038              	
 1039              	//    CELLS	( w -- w*4 )
 1040              	// 	Multiply 4.
 1041              	
 1042 0490 80040000 		.word	_BLANK-MAPOFFSET
 1043 0494 05       	_CELLS:	.byte   5
 1044 0495 43454C4C 		.ascii "CELLS"
 1044      53
 1045 049a 00BF     		.align 2 	
 1046              	CELLS:
 1047 049c 4FEA8505 		MOV	R5,R5,LSL#2
 1048 04a0 7047     		_NEXT
 1049 04a2 00BF     		.align 2 
 1050              	
 1051              	//    CELL/	( w -- w/4 )
 1052              	// 	Divide by 4.
 1053              	
 1054 04a4 94040000 		.word	_CELLS-MAPOFFSET
 1055 04a8 05       	_CELLSL:	.byte   5
 1056 04a9 43454C4C 		.ascii "CELL/"
 1056      2F
 1057 04ae 00BF     		.align 2 	
 1058              	CELLSL:
 1059 04b0 4FEAA505 		MOV	R5,R5,ASR#2
 1060 04b4 7047     		_NEXT
 1061 04b6 00BF     		.align 2 
 1062              	
 1063              	//    2*	( w -- w*2 )
 1064              	// 	Multiply 2.
 1065              	
 1066 04b8 A8040000 		.word	_CELLSL-MAPOFFSET
 1067 04bc 02       	_TWOST:	.byte   2
 1068 04bd 322A     		.ascii "2*"
 1069 04bf 00       		.align 2 	
 1070              	TWOST:
 1071 04c0 4FEA4505 		MOV	R5,R5,LSL#1
 1072 04c4 7047     		_NEXT
 1073 04c6 00BF     		.align 2 
 1074              	
 1075              	//    2/	( w -- w/2 )
 1076              	// 	Divide by 2.
 1077              	
 1078 04c8 BC040000 		.word	_TWOST-MAPOFFSET
 1079 04cc 02       	_TWOSL:	.byte   2
ARM GAS  stm32eforth.s 			page 22


 1080 04cd 322F     		.ascii "2/"
 1081 04cf 00       		.align 2 	
 1082              	TWOSL:
 1083 04d0 4FEA6505 		MOV	R5,R5,ASR#1
 1084 04d4 7047     		_NEXT
 1085 04d6 00BF     		.align 2 
 1086              	
 1087              	//    ?DUP	( w -- w w | 0 )
 1088              	// 	Conditional duplicate.
 1089              	
 1090 04d8 CC040000 		.word	_TWOSL-MAPOFFSET
 1091 04dc 04       	_QDUP:	.byte   4
 1092 04dd 3F445550 		.ascii "?DUP"
 1093 04e1 0000BF   		.align 2 	
 1094              	QDUP:
 1095 04e4 2C00     		MOVS	R4,R5
 1096 04e6 18BF     		IT NE 
 1097 04e8 41F8045D 	  STRNE	R5,[R1,#-4]!
 1098 04ec 7047     		_NEXT
 1099 04ee 00BF     		.align 2 
 1100              	
 1101              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1102              	// 	Rotate top 3 items.
 1103              	
 1104 04f0 DC040000 		.word	_QDUP-MAPOFFSET
 1105 04f4 03       	_ROT:	.byte   3
 1106 04f5 524F54   		.ascii "ROT"
 1107              		.align 2 	
 1108              	ROT:
 1109 04f8 0C68     		LDR	R4,[R1]
 1110 04fa 0D60     		STR	R5,[R1]
 1111 04fc 4D68     		LDR	R5,[R1,#4]
 1112 04fe 4C60     		STR	R4,[R1,#4]
 1113 0500 7047     		_NEXT
 1114 0502 00BF     		.align 2 
 1115              	
 1116              	//    2DROP	( w1 w2 -- )
 1117              	// 	Drop top 2 items.
 1118              	
 1119 0504 F4040000 		.word	_ROT-MAPOFFSET
 1120 0508 05       	_DDROP:	.byte   5
 1121 0509 3244524F 		.ascii "2DROP"
 1121      50
 1122 050e 00BF     		.align 2 	
 1123              	DDROP:
 1124 0510 51F8045B 		_POP
 1125 0514 51F8045B 		_POP
 1126 0518 7047     		_NEXT
 1127 051a 00BF     		.align 2 
 1128              	
 1129              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1130              	// 	Duplicate top 2 items.
 1131              	
 1132 051c 08050000 		.word	_DDROP-MAPOFFSET
 1133 0520 04       	_DDUP:	.byte   4
 1134 0521 32445550 		.ascii "2DUP"
 1135 0525 0000BF   		.align 2 	
ARM GAS  stm32eforth.s 			page 23


 1136              	DDUP:
 1137 0528 0C68     		LDR	R4,[R1]
 1138 052a 41F8045D 		STR	R5,[R1,#-4]!
 1139 052e 41F8044D 		STR	R4,[R1,#-4]!
 1140 0532 7047     		_NEXT
 1141              		.align 2 
 1142              	//    D+	( d1 d2 -- d3 )
 1143              	// 	Add top 2 double numbers.
 1144              	
 1145 0534 20050000 		.word	_DDUP-MAPOFFSET
 1146 0538 02       	_DPLUS:	.byte   2
 1147 0539 442B     		.ascii "D+"
 1148 053b 00       		.align 2 	
 1149              	DPLUS:
 1150 053c 51F8044B 		LDR	R4,[R1],#4
 1151 0540 51F8046B 		LDR	R6,[R1],#4
 1152 0544 0F68     		LDR	R7,[R1]
 1153 0546 E419     		ADDS	R4,R4,R7
 1154 0548 0C60     		STR	R4,[R1]
 1155 054a 45EB0605 		ADC	R5,R5,R6
 1156 054e 7047     		_NEXT
 1157              		.align 2 
 1158              	//    NOT	 ( w -- !w )
 1159              	// 	1"s complement.
 1160              	
 1161 0550 38050000 		.word	_DPLUS-MAPOFFSET
 1162 0554 03       	_INVER:	.byte   3
 1163 0555 4E4F54   		.ascii "NOT"
 1164              		.align 2 	
 1165              	INVER:
 1166 0558 6FEA0505 		MVN	R5,R5
 1167 055c 7047     		_NEXT
 1168 055e 00BF     		.align 2 
 1169              	
 1170              	//    NEGATE	( w -- -w )
 1171              	// 	2's complement.
 1172              	
 1173 0560 54050000 		.word	_INVER-MAPOFFSET
 1174 0564 06       	_NEGAT:	.byte   6
 1175 0565 4E454741 		.ascii "NEGATE"
 1175      5445
 1176 056b 00       		.align 2 	
 1177              	NEGAT:
 1178 056c C5F10005 		RSB	R5,R5,#0
 1179 0570 7047     		_NEXT
 1180 0572 00BF     		.align 2 
 1181              	
 1182              	//    ABS	 ( w -- |w| )
 1183              	// 	Absolute.
 1184              	
 1185 0574 64050000 		.word	_NEGAT-MAPOFFSET
 1186 0578 03       	_ABSS:	.byte   3
 1187 0579 414253   		.ascii "ABS"
 1188              		.align 2 	
 1189              	ABSS:
 1190 057c 15F0004F 		TST	R5,#0x80000000
 1191 0580 18BF     		IT NE
ARM GAS  stm32eforth.s 			page 24


 1192 0582 6D42     	  RSBNE   R5,R5,#0
 1193 0584 7047     		_NEXT
 1194 0586 00BF     		.align 2 
 1195              	
 1196              	//    =	 ( w w -- t )
 1197              	// 	Equal?
 1198              	
 1199 0588 78050000 		.word	_ABSS-MAPOFFSET
 1200 058c 01       	_EQUAL:	.byte   1
 1201 058d 3D       		.ascii "="
 1202 058e 00BF     		.align 2 	
 1203              	EQUAL:
 1204 0590 51F8044B 		LDR	R4,[R1],#4
 1205 0594 A542     		CMP	R5,R4
 1206 0596 0CBF     		ITE EQ 
 1207 0598 6FF00005 	  MVNEQ	R5,#0
 1208 059c 0025     		MOVNE	R5,#0
 1209 059e 7047     		_NEXT
 1210              		.align 2 
 1211              	//    U<	 ( w w -- t )
 1212              	// 	Unsigned equal?
 1213              	
 1214 05a0 8C050000 		.word	_EQUAL-MAPOFFSET
 1215 05a4 02       	_ULESS:	.byte   2
 1216 05a5 553C     		.ascii "U<"
 1217 05a7 00       		.align 2 	
 1218              	ULESS:
 1219 05a8 51F8044B 		LDR	R4,[R1],#4
 1220 05ac AC42     		CMP	R4,R5
 1221 05ae 34BF     		ITE CC 
 1222 05b0 6FF00005 	  MVNCC	R5,#0
 1223 05b4 0025     		MOVCS	R5,#0
 1224 05b6 7047     		_NEXT
 1225              		.align 2 
 1226              	//    <	( w w -- t )
 1227              	// 	Less?
 1228              	
 1229 05b8 A4050000 		.word	_ULESS-MAPOFFSET
 1230 05bc 01       	_LESS:	.byte   1
 1231 05bd 3C       		.ascii "<"
 1232 05be 00BF     		.align 2 	
 1233              	LESS:
 1234 05c0 51F8044B 		LDR	R4,[R1],#4
 1235 05c4 AC42     		CMP	R4,R5
 1236 05c6 B4BF     	  ITE LT
 1237 05c8 6FF00005 		MVNLT	R5,#0
 1238 05cc 0025     		MOVGE	R5,#0
 1239 05ce 7047     		_NEXT
 1240              		.align 2 
 1241              	//    >	( w w -- t )
 1242              	// 	greater?
 1243              	
 1244 05d0 BC050000 		.word	_LESS-MAPOFFSET
 1245 05d4 01       	_GREAT:	.byte   1
 1246 05d5 3E       		.ascii ">"
 1247 05d6 00BF     		.align 2 	
 1248              	GREAT:
ARM GAS  stm32eforth.s 			page 25


 1249 05d8 51F8044B 		LDR	R4,[R1],#4
 1250 05dc AC42     		CMP	R4,R5
 1251 05de CCBF     		ITE GT
 1252 05e0 6FF00005 	  MVNGT	R5,#0
 1253 05e4 0025     		MOVLE	R5,#0
 1254 05e6 7047     		_NEXT
 1255              		.align 2 
 1256              	//    MAX	 ( w w -- max )
 1257              	// 	Leave maximum.
 1258              	
 1259 05e8 D4050000 		.word	_GREAT-MAPOFFSET
 1260 05ec 03       	_MAX:	.byte   3
 1261 05ed 4D4158   		.ascii "MAX"
 1262              		.align 2 	
 1263              	MAX:
 1264 05f0 51F8044B 		LDR	R4,[R1],#4
 1265 05f4 AC42     		CMP	R4,R5
 1266 05f6 C8BF     		IT GT 
 1267 05f8 2546     	  MOVGT	R5,R4
 1268 05fa 7047     		_NEXT
 1269              		.align 2 
 1270              	//    MIN	 ( w w -- min )
 1271              	// 	Leave minimum.
 1272              	
 1273 05fc EC050000 		.word	_MAX-MAPOFFSET
 1274 0600 03       	_MIN:	.byte   3
 1275 0601 4D494E   		.ascii "MIN"
 1276              		.align 2 	
 1277              	MIN:
 1278 0604 51F8044B 		LDR	R4,[R1],#4
 1279 0608 AC42     		CMP	R4,R5
 1280 060a B8BF     		IT LT
 1281 060c 2546     	  MOVLT	R5,R4
 1282 060e 7047     		_NEXT
 1283              		.align 2 
 1284              	//    +!	 ( w a -- )
 1285              	// 	Add to memory.
 1286              	
 1287 0610 00060000 		.word	_MIN-MAPOFFSET
 1288 0614 02       	_PSTOR:	.byte   2
 1289 0615 2B21     		.ascii "+!"
 1290 0617 00       		.align 2 	
 1291              	PSTOR:
 1292 0618 51F8044B 		LDR	R4,[R1],#4
 1293 061c 2E68     		LDR	R6,[R5]
 1294 061e 2644     		ADD	R6,R6,R4
 1295 0620 2E60     		STR	R6,[R5]
 1296 0622 51F8045B 		_POP
 1297 0626 7047     		_NEXT
 1298              		.align 2 
 1299              	//    2!	 ( d a -- )
 1300              	// 	Store double number.
 1301              	
 1302 0628 14060000 		.word	_PSTOR-MAPOFFSET
 1303 062c 02       	_DSTOR:	.byte   2
 1304 062d 3221     		.ascii "2!"
 1305 062f 00       		.align 2 	
ARM GAS  stm32eforth.s 			page 26


 1306              	DSTOR:
 1307 0630 51F8044B 		LDR	R4,[R1],#4
 1308 0634 51F8046B 		LDR	R6,[R1],#4
 1309 0638 45F8044B 		STR	R4,[R5],#4
 1310 063c 2E60     		STR	R6,[R5]
 1311 063e 51F8045B 		_POP
 1312 0642 7047     		_NEXT
 1313              		.align 2 
 1314              	//    2@	 ( a -- d )
 1315              	// 	Fetch double number.
 1316              	
 1317 0644 2C060000 		.word	_DSTOR-MAPOFFSET
 1318 0648 02       	_DAT:	.byte   2
 1319 0649 3240     		.ascii "2@"
 1320 064b 00       		.align 2 	
 1321              	DAT:
 1322 064c 6C68     		LDR	R4,[R5,#4]
 1323 064e 41F8044D 		STR	R4,[R1,#-4]!
 1324 0652 2D68     		LDR	R5,[R5]
 1325 0654 7047     		_NEXT
 1326 0656 00BF     		.align 2 
 1327              	
 1328              	//    COUNT	( b -- b+1 c )
 1329              	// 	Fetch length of string.
 1330              	
 1331 0658 48060000 		.word	_DAT-MAPOFFSET
 1332 065c 05       	_COUNT:	.byte   5
 1333 065d 434F554E 		.ascii "COUNT"
 1333      54
 1334 0662 00BF     		.align 2 	
 1335              	COUNT:
 1336 0664 15F8014B 		LDRB	R4,[R5],#1
 1337 0668 41F8045D 		_PUSH
 1338 066c 2546     		MOV	R5,R4
 1339 066e 7047     		_NEXT
 1340              		.align 2 
 1341              	
 1342              	//    DNEGATE	( d -- -d )
 1343              	// 	Negate double number.
 1344              	
 1345 0670 5C060000 		.word	_COUNT-MAPOFFSET
 1346 0674 07       	_DNEGA:	.byte   7
 1347 0675 444E4547 		.ascii "DNEGATE"
 1347      415445
 1348              		.align 2 	
 1349              	DNEGA:
 1350 067c 0C68     		LDR	R4,[R1]
 1351 067e A8EB0808 		SUB	R8,R8,R8
 1352 0682 341B     		SUBS	R4,R6,R4
 1353 0684 66EB0505 		SBC	R5,R6,R5
 1354 0688 0C60     		STR	R4,[R1]
 1355 068a 7047     		_NEXT
 1356              		.align 2 
 1357              	// **************************************************************************
 1358              	//  System and user variables
 1359              	
 1360              	//    doVAR	( -- a )
ARM GAS  stm32eforth.s 			page 27


 1361              	// 	Run time routine for VARIABLE and CREATE.
 1362              	
 1363              	// 	.word	_DNEGA-MAPOFFSET
 1364              	// _DOVAR	.byte  COMPO+5
 1365              	// 	.ascii "doVAR"
 1366              	// 	.align 2 	
 1367              	DOVAR:
 1368 068c 41F8045D 		_PUSH
 1369 0690 AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
 1370 0694 52F804FB 		_UNNEST
 1371              		.align 2 
 1372              	
 1373              	//    doCON	( -- a ) 
 1374              	// 	Run time r outine for CONSTANT.
 1375              	
 1376              	// 	.word	_DOVAR-MAPOFFSET
 1377              	// _DOCON	.byte  COMPO+5
 1378              	// 	.ascii "doCON"
 1379              	// 	.align 2 	
 1380              	DOCON:
 1381 0698 41F8045D 		_PUSH
 1382 069c 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1383 06a0 52F804FB 		_UNNEST
 1384              		.align 2 
 1385              	/***********************
 1386              	  system variables 
 1387              	***********************/
 1388              	  
 1389              	//  TICKS ( -- a)
 1390 06a4 74060000 	  .word _DNEGA-MAPOFFSET 
 1391 06a8 05       	_TICKS: .byte 5
 1392 06a9 5449434B 	  .ascii "TICKS"
 1392      53
 1393 06ae 00BF     	  .align 2 
 1394              	TICKS:
 1395 06b0 41F8045D 	  _PUSH
 1396 06b4 03F10405 	  ADD R5,R3,#TICKS_OFS
 1397 06b8 7047     	  _NEXT 
 1398 06ba 00BF     	  .align 2 
 1399              	
 1400              	// TIMER ( -- a )
 1401 06bc A8060000 	  .word _TICKS-MAPOFFSET
 1402 06c0 05       	_TIMER:  .byte 5
 1403 06c1 54494D45 	  .ascii "TIMER"
 1403      52
 1404 06c6 00BF     	  .align 2 
 1405              	TIMER:
 1406 06c8 41F8045D 	  _PUSH 
 1407 06cc 05F13505 	  ADD R5,53,#TIMER_OFS
 1408 06d0 7047     	  _NEXT
 1409 06d2 00BF     	  .align 2 
 1410              	
 1411              	//    'BOOT	 ( -- a )
 1412              	// 	Application.
 1413              	
 1414 06d4 C0060000 		.word	_TIMER-MAPOFFSET
 1415 06d8 05       	_TBOOT:	.byte   5
ARM GAS  stm32eforth.s 			page 28


 1416 06d9 27424F4F 		.ascii "'BOOT"
 1416      54
 1417 06de 00BF     		.align 2 	
 1418              	TBOOT:
 1419 06e0 41F8045D 		_PUSH
 1420 06e4 03F10C05 		ADD	R5,R3,#BOOT_OFS 
 1421 06e8 7047     		_NEXT
 1422 06ea 00BF     		.align 2 
 1423              		
 1424              	//    BASE	( -- a )
 1425              	// 	Storage of the radix base for numeric I/O.
 1426              	
 1427 06ec D8060000 		.word	_TBOOT-MAPOFFSET
 1428 06f0 04       	_BASE:	.byte   4
 1429 06f1 42415345 		.ascii "BASE"
 1430 06f5 0000BF   		.align 2 	
 1431              	BASE:
 1432 06f8 41F8045D 		_PUSH
 1433 06fc 03F11005 		ADD	R5,R3,#BASE_OFS
 1434 0700 7047     		_NEXT
 1435 0702 00BF     		.align 2 
 1436              	
 1437              	//    tmp	 ( -- a )
 1438              	// 	A temporary storage location used in parse and find.
 1439              	
 1440              	// 	.word	_BASE-MAPOFFSET
 1441              	// _TEMP	.byte   COMPO+3
 1442              	// 	.ascii "tmp"
 1443              	// 	.align 2 	
 1444              	TEMP:
 1445 0704 41F8045D 		_PUSH
 1446 0708 03F11405 		ADD	R5,R3,#TMP_OFS
 1447 070c 7047     		_NEXT
 1448 070e 00BF     		.align 2 
 1449              	
 1450              	//    SPAN	( -- a )
 1451              	// 	Hold character count received by EXPECT.
 1452              	
 1453 0710 F0060000 		.word	_BASE-MAPOFFSET
 1454 0714 04       	_SPAN:	.byte   4
 1455 0715 5350414E 		.ascii "SPAN"
 1456 0719 0000BF   		.align 2 	
 1457              	SPAN:
 1458 071c 41F8045D 		_PUSH
 1459 0720 03F11805 		ADD	R5,R3,#SPAN_OFS
 1460 0724 7047     		_NEXT
 1461 0726 00BF     		.align 2 
 1462              	
 1463              	//    >IN	 ( -- a )
 1464              	// 	Hold the character pointer while parsing input stream.
 1465              	
 1466 0728 14070000 		.word	_SPAN-MAPOFFSET
 1467 072c 03       	_INN:	.byte   3
 1468 072d 3E494E   		.ascii ">IN"
 1469              		.align 2 	
 1470              	INN:
 1471 0730 41F8045D 		_PUSH
ARM GAS  stm32eforth.s 			page 29


 1472 0734 03F11C05 		ADD	R5,R3,#TOIN_OFS
 1473 0738 7047     		_NEXT
 1474 073a 00BF     		.align 2 
 1475              	
 1476              	//    #TIB	( -- a )
 1477              	// 	Hold the current count and address of the terminal input buffer.
 1478              	
 1479 073c 2C070000 		.word	_INN-MAPOFFSET
 1480 0740 04       	_NTIB:	.byte   4
 1481 0741 23544942 		.ascii "#TIB"
 1482 0745 0000BF   		.align 2 	
 1483              	NTIB:
 1484 0748 41F8045D 		_PUSH
 1485 074c 03F12005 		ADD	R5,R3,#NTIB_OFS
 1486 0750 7047     		_NEXT
 1487 0752 00BF     		.align 2 
 1488              	
 1489              	//    'EVAL	( -- a )
 1490              	// 	Execution vector of EVAL.
 1491              	
 1492 0754 40070000 		.word	_NTIB-MAPOFFSET
 1493 0758 05       	_TEVAL:	.byte   5
 1494 0759 27455641 		.ascii "'EVAL"
 1494      4C
 1495 075e 00BF     		.align 2 	
 1496              	TEVAL:
 1497 0760 41F8045D 		_PUSH
 1498 0764 03F12805 		ADD	R5,R3,#EVAL_OFS
 1499 0768 7047     		_NEXT
 1500 076a 00BF     		.align 2 
 1501              	
 1502              	//    HLD	 ( -- a )
 1503              	// 	Hold a pointer in building a numeric output string.
 1504              	
 1505 076c 58070000 		.word	_TEVAL-MAPOFFSET
 1506 0770 03       	_HLD:	.byte   3
 1507 0771 484C44   		.ascii "HLD"
 1508              		.align 2 	
 1509              	HLD:
 1510 0774 41F8045D 		_PUSH
 1511 0778 03F12C05 		ADD	R5,R3,#HLD_OFS
 1512 077c 7047     		_NEXT
 1513 077e 00BF     		.align 2 
 1514              	
 1515              	//    CONTEXT	( -- a )
 1516              	// 	A area to specify vocabulary search order.
 1517              	
 1518 0780 70070000 		.word	_HLD-MAPOFFSET
 1519 0784 07       	_CNTXT:	.byte   7
 1520 0785 434F4E54 		.ascii "CONTEXT"
 1520      455854
 1521              		.align 2 	
 1522              	CNTXT:
 1523              	CRRNT:
 1524 078c 41F8045D 		_PUSH
 1525 0790 03F13005 		ADD	R5,R3,#CTXT_OFS
 1526 0794 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 30


 1527 0796 00BF     		.align 2 
 1528              	
 1529              	//    CP	( -- a )
 1530              	// 	Point to top name in RAM vocabulary.
 1531              	
 1532 0798 84070000 		.word	_CNTXT-MAPOFFSET
 1533 079c 02       	_CP:	.byte   2
 1534 079d 4350     		.ascii "CP"
 1535 079f 00       		.align 2 	
 1536              	CPP:
 1537 07a0 41F8045D 		_PUSH
 1538 07a4 03F13805 		ADD	R5,R3,#RAM_CTOP_OFS
 1539 07a8 7047     		_NEXT
 1540 07aa 00BF     		.align 2 
 1541              	
 1542              	//   FCP ( -- a )
 1543              	//  Point ot top of Flash dictionary
 1544 07ac 9C070000 		.word _CP-MAPOFFSET
 1545 07b0 04       	_FCPP: .byte 4 
 1546 07b1 46435050 		.ascii "FCPP"
 1547 07b5 0000BF   		.align 2 
 1548              	FCPP: 
 1549 07b8 41F8045D 		_PUSH 
 1550 07bc 03F13405 		ADD R5,R3,#FLSH_CTOP_OFS 
 1551 07c0 7047     		_NEXT 
 1552 07c2 00BF     		.align 2  
 1553              	
 1554              	//    LAST	( -- a )
 1555              	// 	Point to the last name in the name dictionary.
 1556              	
 1557 07c4 B0070000 		.word	_FCPP-MAPOFFSET
 1558 07c8 04       	_LAST:	.byte   4
 1559 07c9 4C415354 		.ascii "LAST"
 1560 07cd 0000BF   		.align 2 	
 1561              	LAST:
 1562 07d0 41F8045D 		_PUSH
 1563 07d4 03F13C05 		ADD	R5,R3,#LASTN_OFS
 1564 07d8 7047     		_NEXT
 1565 07da 00BF     		.align 2 
 1566              	
 1567              	// **************************************************************************
 1568              	//  Common functions
 1569              	
 1570              	//    WITHIN	( u ul uh -- t )
 1571              	// 	Return true if u is within the range of ul and uh.
 1572              	
 1573 07dc C8070000 		.word	_LAST-MAPOFFSET
 1574 07e0 06       	_WITHI:	.byte   6
 1575 07e1 57495448 		.ascii "WITHIN"
 1575      494E
 1576 07e7 00       		.align 2 	
 1577              	WITHI:
 1578 07e8 42F804ED 		_NEST
 1579 07ec FFF792FD 		BL	OVER
 1580 07f0 FFF7ECFD 		BL	SUBB
 1581 07f4 FFF75EFD 		BL	TOR
 1582 07f8 FFF7E8FD 		BL	SUBB
ARM GAS  stm32eforth.s 			page 31


 1583 07fc FFF748FD 		BL	RFROM
 1584 0800 FFF7D2FE 		BL	ULESS
 1585 0804 52F804FB 		_UNNEST
 1586              		.align 2 
 1587              	//  Divide
 1588              	
 1589              	//    UM/MOD	( udl udh u -- ur uq )
 1590              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1591              	
 1592 0808 E0070000 		.word	_WITHI-MAPOFFSET
 1593 080c 06       	_UMMOD:	.byte   6
 1594 080d 554D2F4D 		.ascii "UM/MOD"
 1594      4F44
 1595 0813 00       		.align 2 	
 1596              	UMMOD:
 1597 0814 4FF00107 		MOV	R7,#1
 1598 0818 51F8044B 		LDR	R4,[R1],#4
 1599 081c 0E68     		LDR	R6,[R1]
 1600              	UMMOD0:
 1601 081e B619     		ADDS	R6,R6,R6
 1602 0820 6441     		ADCS	R4,R4,R4
 1603 0822 04D3     		BCC	UMMOD1
 1604 0824 A4EB0504 		SUB	R4,R4,R5
 1605 0828 06F10106 		ADD	R6,R6,#1
 1606 082c 04E0     		B UMMOD2
 1607              	UMMOD1:
 1608 082e 641B     		SUBS	R4,R4,R5 
 1609 0830 56F10106 		ADCS	R6,R6,#1
 1610 0834 00D2     		BCS	UMMOD2
 1611 0836 2C44     		ADD	R4,R4,R5
 1612              	UMMOD2:
 1613 0838 FF19     		ADDS	R7,R7,R7
 1614 083a F0D3     		BCC	UMMOD0
 1615 083c 3546     		MOV	R5,R6
 1616 083e 0C60     		STR	R4,[R1]
 1617 0840 7047     		_NEXT
 1618 0842 00BF     		.align 2 
 1619              	
 1620              	//    M/MOD	( d n -- r q )
 1621              	// 	Signed floored divide of double by single. Return mod and quotient.
 1622              	
 1623 0844 0C080000 		.word	_UMMOD-MAPOFFSET
 1624 0848 05       	_MSMOD:	.byte  5
 1625 0849 4D2F4D4F 		.ascii "M/MOD"
 1625      44
 1626 084e 00BF     		.align 2 	
 1627              	MSMOD:	
 1628 0850 42F804ED 		_NEST
 1629 0854 FFF74AFD 		BL	DUPP
 1630 0858 FFF764FD 		BL	ZLESS
 1631 085c FFF746FD 		BL	DUPP
 1632 0860 FFF728FD 		BL	TOR
 1633 0864 FFF7D6FC 		BL	QBRAN
 1634 0868 7C080000 		.word	MMOD1-MAPOFFSET
 1635 086c FFF77EFE 		BL	NEGAT
 1636 0870 FFF720FD 		BL	TOR
 1637 0874 FFF702FF 		BL	DNEGA
ARM GAS  stm32eforth.s 			page 32


 1638 0878 FFF70AFD 		BL	RFROM
 1639              	MMOD1:
 1640 087c FFF71AFD 	  BL	TOR
 1641 0880 FFF734FD 		BL	DUPP
 1642 0884 FFF74EFD 		BL	ZLESS
 1643 0888 FFF7C4FC 		BL	QBRAN
 1644 088c 98080000 		.word	MMOD2-MAPOFFSET
 1645 0890 FFF708FD 		BL	RAT
 1646 0894 FFF792FD 		BL	PLUS
 1647              	MMOD2:
 1648 0898 FFF7FAFC 	  BL	RFROM
 1649 089c FFF7BAFF 		BL	UMMOD
 1650 08a0 FFF7F6FC 		BL	RFROM
 1651 08a4 FFF7B6FC 		BL	QBRAN
 1652 08a8 B8080000 		.word	MMOD3-MAPOFFSET
 1653 08ac FFF728FD 		BL	SWAP
 1654 08b0 FFF75CFE 		BL	NEGAT
 1655 08b4 FFF724FD 		BL	SWAP
 1656              	MMOD3:   
 1657 08b8 52F804FB 		_UNNEST
 1658              		.align 2 
 1659              	
 1660              	//    /MOD	( n n -- r q )
 1661              	// 	Signed divide. Return mod and quotient.
 1662              	
 1663 08bc 48080000 		.word	_MSMOD-MAPOFFSET
 1664 08c0 04       	_SLMOD:	.byte   4
 1665 08c1 2F4D4F44 		.ascii "/MOD"
 1666 08c5 0000BF   		.align 2 	
 1667              	SLMOD:
 1668 08c8 42F804ED 		_NEST
 1669 08cc FFF722FD 		BL	OVER
 1670 08d0 FFF728FD 		BL	ZLESS
 1671 08d4 FFF714FD 		BL	SWAP
 1672 08d8 FFF7BAFF 		BL	MSMOD
 1673 08dc 52F804FB 		_UNNEST
 1674              		.align 2 
 1675              	//    MOD	 ( n n -- r )
 1676              	// 	Signed divide. Return mod only.
 1677              	
 1678 08e0 C0080000 		.word	_SLMOD-MAPOFFSET
 1679 08e4 03       	_MODD:	.byte  3
 1680 08e5 4D4F44   		.ascii "MOD"
 1681              		.align 2 	
 1682              	MODD:
 1683 08e8 42F804ED 		_NEST
 1684 08ec FFF7ECFF 		BL	SLMOD
 1685 08f0 FFF7F4FC 		BL	DROP
 1686 08f4 52F804FB 		_UNNEST
 1687              		.align 2 
 1688              	//    /	   ( n n -- q )
 1689              	// 	Signed divide. Return quotient only.
 1690              	
 1691 08f8 E4080000 		.word	_MODD-MAPOFFSET
 1692 08fc 01       	_SLASH:	.byte  1
 1693 08fd 2F       		.ascii "/"
 1694 08fe 00BF     		.align 2 	
ARM GAS  stm32eforth.s 			page 33


 1695              	SLASH:
 1696 0900 42F804ED 		_NEST
 1697 0904 FFF7E0FF 		BL	SLMOD
 1698 0908 FFF7FAFC 		BL	SWAP
 1699 090c FFF7E6FC 		BL	DROP
 1700 0910 52F804FB 		_UNNEST
 1701              		.align 2 
 1702              	//    */MOD	( n1 n2 n3 -- r q )
 1703              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1704              	
 1705 0914 FC080000 		.word	_SLASH-MAPOFFSET
 1706 0918 05       	_SSMOD:	.byte  5
 1707 0919 2A2F4D4F 		.ascii "*/MOD"
 1707      44
 1708 091e 00BF     		.align 2 	
 1709              	SSMOD:
 1710 0920 42F804ED 		_NEST
 1711 0924 FFF7C6FC 		BL	TOR
 1712 0928 FFF76EFD 		BL	MSTAR
 1713 092c FFF7B0FC 		BL	RFROM
 1714 0930 FFF78EFF 		BL	MSMOD
 1715 0934 52F804FB 		_UNNEST
 1716              		.align 2 
 1717              	//    */	  ( n1 n2 n3 -- q )
 1718              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1719              	
 1720 0938 18090000 		.word	_SSMOD-MAPOFFSET
 1721 093c 02       	_STASL:	.byte  2
 1722 093d 2A2F     		.ascii "*/"
 1723 093f 00       		.align 2 	
 1724              	STASL:
 1725 0940 42F804ED 		_NEST
 1726 0944 FFF7ECFF 		BL	SSMOD
 1727 0948 FFF7DAFC 		BL	SWAP
 1728 094c FFF7C6FC 		BL	DROP
 1729 0950 52F804FB 		_UNNEST
 1730              		.align 2 
 1731              	// **************************************************************************
 1732              	//  Miscellaneous
 1733              	
 1734              	//    ALIGNED	( b -- a )
 1735              	// 	Align address to the cell boundary.
 1736              	
 1737 0954 3C090000 		.word	_STASL-MAPOFFSET
 1738 0958 07       	_ALGND:	.byte   7
 1739 0959 414C4947 		.ascii "ALIGNED"
 1739      4E4544
 1740              		.align 2 	
 1741              	ALGND:
 1742 0960 05F10305 		ADD	R5,R5,#3
 1743 0964 6FF00304 		MVN	R4,#3
 1744 0968 05EA0405 		AND	R5,R5,R4
 1745 096c 7047     		_NEXT
 1746 096e 00BF     		.align 2 
 1747              	
 1748              	//    >CHAR	( c -- c )
 1749              	// 	Filter non-printing characters.
ARM GAS  stm32eforth.s 			page 34


 1750              	
 1751 0970 58090000 		.word	_ALGND-MAPOFFSET
 1752 0974 05       	_TCHAR:	.byte  5
 1753 0975 3E434841 		.ascii ">CHAR"
 1753      52
 1754 097a 00BF     		.align 2 	
 1755              	TCHAR:
 1756 097c 42F804ED 		_NEST
 1757 0980 FFF722FC 		_DOLIT
 1758 0984 7F000000 		.word	0x7F
 1759 0988 FFF7D6FC 		BL	ANDD
 1760 098c FFF7AEFC 		BL	DUPP	// mask msb
 1761 0990 FFF778FD 		BL	BLANK
 1762 0994 FFF718FC 		_DOLIT
 1763 0998 7F000000 		.word	127
 1764 099c FFF724FF 		BL	WITHI	// check for printable
 1765 09a0 FFF7DAFD 		BL	INVER
 1766 09a4 FFF736FC 		BL	QBRAN
 1767 09a8 B8090000 		.word	TCHA1-MAPOFFSET
 1768 09ac FFF796FC 		BL	DROP
 1769 09b0 FFF70AFC 		_DOLIT
 1770 09b4 5F000000 		.word	'_'	// replace non-printables
 1771              	TCHA1:
 1772 09b8 52F804FB 		  _UNNEST
 1773              		.align 2 
 1774              	//    DEPTH	( -- n )
 1775              	// 	Return the depth of the data stack.
 1776              	
 1777 09bc 74090000 		.word	_TCHAR-MAPOFFSET
 1778 09c0 05       	_DEPTH:	.byte  5
 1779 09c1 44455054 		.ascii "DEPTH"
 1779      48
 1780 09c6 00BF     		.align 2 	
 1781              	DEPTH:
 1782 09c8 41F8045D 		_PUSH
 1783 09cc 44F60475 		MOVW	R5,#0X4f04
 1784 09d0 C2F20005 	 	MOVT	R5,#0X2000
 1785 09d4 A5EB0105 		SUB	R5,R5,R1
 1786 09d8 4FEAA505 		ASR	R5,R5,#2
 1787 09dc A5F10105 		SUB	R5,R5,#1
 1788 09e0 7047     		_NEXT
 1789 09e2 00BF     		.align 2 
 1790              	
 1791              	//    PICK	( ... +n -- ... w )
 1792              	// 	Copy the nth stack item to tos.
 1793              	
 1794 09e4 C0090000 		.word	_DEPTH-MAPOFFSET
 1795 09e8 04       	_PICK:	.byte  4
 1796 09e9 5049434B 		.ascii "PICK"
 1797 09ed 0000BF   		.align 2 	
 1798              	PICK:
 1799 09f0 42F804ED 		_NEST
 1800 09f4 FFF712FD 		BL	ONEP
 1801 09f8 FFF750FD 		BL	CELLS
 1802 09fc FFF764FC 		BL	SPAT
 1803 0a00 FFF7DCFC 		BL	PLUS
 1804 0a04 FFF72EFC 		BL	AT
ARM GAS  stm32eforth.s 			page 35


 1805 0a08 52F804FB 		_UNNEST
 1806              		.align 2 
 1807              	
 1808              	// **************************************************************************
 1809              	//  Memory access
 1810              	
 1811              	//    HERE	( -- a )
 1812              	// 	Return the top of the code dictionary.
 1813              	
 1814 0a0c E8090000 		.word	_PICK-MAPOFFSET
 1815 0a10 04       	_HERE:	.byte  4
 1816 0a11 48455245 		.ascii "HERE"
 1817 0a15 0000BF   		.align 2 	
 1818              	HERE:
 1819 0a18 42F804ED 		_NEST
 1820 0a1c FFF7C0FE 		BL	CPP
 1821 0a20 FFF720FC 		BL	AT
 1822 0a24 52F804FB 		_UNNEST
 1823              		.align 2 
 1824              		
 1825              	//    PAD	 ( -- a )
 1826              	// 	Return the address of a temporary buffer.
 1827              	
 1828 0a28 100A0000 		.word	_HERE-MAPOFFSET
 1829 0a2c 03       	_PAD:	.byte  3
 1830 0a2d 504144   		.ascii "PAD"
 1831              		.align 2 	
 1832              	PAD:
 1833 0a30 42F804ED 		_NEST
 1834 0a34 FFF7F0FF 		BL	HERE
 1835 0a38 05F15005 		ADD	R5,R5,#80
 1836 0a3c 52F804FB 		_UNNEST
 1837              		.align 2 
 1838              	//    TIB	 ( -- a )
 1839              	// 	Return the address of the terminal input buffer.
 1840              	
 1841 0a40 2C0A0000 		.word	_PAD-MAPOFFSET
 1842 0a44 03       	_TIB:	.byte  3
 1843 0a45 544942   		.ascii "TIB"
 1844              		.align 2 	
 1845              		.equ TIB_ADR, 0x20004F00
 1846              	TIB:
 1847 0a48 41F8045D 		_PUSH
 1848 0a4c 4FF49E45 		mov r5,#TIB_ADR&0xffff
 1849 0a50 C2F20005 		movt r5,#TIB_ADR>>16
 1850 0a54 7047     		_NEXT
 1851 0a56 00BF     		.align 2 
 1852              	
 1853              	//    @EXECUTE	( a -- )
 1854              	// 	Execute vector stored in address a.
 1855              	
 1856 0a58 440A0000 		.word	_TIB-MAPOFFSET
 1857 0a5c 08       	_ATEXE:	.byte   8
 1858 0a5d 40455845 		.ascii "@EXECUTE"
 1858      43555445 
 1859 0a65 0000BF   		.align 2 	
 1860              	ATEXE:
ARM GAS  stm32eforth.s 			page 36


 1861 0a68 2C00     		MOVS	R4,R5
 1862 0a6a 51F8045B 		_POP
 1863 0a6e 2468     		LDR	R4,[R4]
 1864 0a70 44F00104 		ORR	R4,R4,#1
 1865 0a74 18BF     	    IT NE 
 1866 0a76 2047     		BXNE	R4
 1867 0a78 7047     		_NEXT
 1868 0a7a 00BF     		.align 2 
 1869              	
 1870              	//    CMOVE	( b1 b2 u -- )
 1871              	// 	Copy u bytes from b1 to b2.
 1872              	
 1873 0a7c 5C0A0000 		.word	_ATEXE-MAPOFFSET
 1874 0a80 05       	_CMOVE:	.byte   5
 1875 0a81 434D4F56 		.ascii "CMOVE"
 1875      45
 1876 0a86 00BF     		.align 2 	
 1877              	CMOVE:
 1878 0a88 51F8046B 		LDR	R6,[R1],#4
 1879 0a8c 51F8047B 		LDR	R7,[R1],#4
 1880 0a90 03E0     		B CMOV1
 1881              	CMOV0:
 1882 0a92 17F8014B 		LDRB	R4,[R7],#1
 1883 0a96 06F8014B 		STRB	R4,[R6],#1
 1884              	CMOV1:
 1885 0a9a 2D00     		MOVS	R5,R5
 1886 0a9c 02D0     		BEQ	CMOV2
 1887 0a9e A5F10105 		SUB	R5,R5,#1
 1888 0aa2 F6E7     		B CMOV0
 1889              	CMOV2:
 1890 0aa4 51F8045B 		_POP
 1891 0aa8 7047     		_NEXT
 1892 0aaa 00BF     		.align 2 
 1893              	
 1894              	//    MOVE	( a1 a2 u -- )
 1895              	// 	Copy u words from a1 to a2.
 1896              	
 1897 0aac 800A0000 		.word	_CMOVE-MAPOFFSET
 1898 0ab0 04       	_MOVE:	.byte   4
 1899 0ab1 4D4F5645 		.ascii "MOVE"
 1900 0ab5 0000BF   		.align 2 	
 1901              	MOVE:
 1902 0ab8 25F00305 		AND	R5,R5,#-4
 1903 0abc 51F8046B 		LDR	R6,[R1],#4
 1904 0ac0 51F8047B 		LDR	R7,[R1],#4
 1905 0ac4 03E0     		B MOVE1
 1906              	MOVE0:
 1907 0ac6 57F8044B 		LDR	R4,[R7],#4
 1908 0aca 46F8044B 		STR	R4,[R6],#4
 1909              	MOVE1:
 1910 0ace 2D00     		MOVS	R5,R5
 1911 0ad0 02D0     		BEQ	MOVE2
 1912 0ad2 A5F10405 		SUB	R5,R5,#4
 1913 0ad6 F6E7     		B MOVE0
 1914              	MOVE2:
 1915 0ad8 51F8045B 		_POP
 1916 0adc 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 37


 1917 0ade 00BF     		.align 2 
 1918              	
 1919              	//    FILL	( b u c -- )
 1920              	// 	Fill u bytes of character c to area beginning at b.
 1921              	
 1922 0ae0 B00A0000 		.word	_MOVE-MAPOFFSET
 1923 0ae4 04       	_FILL:	.byte   4
 1924 0ae5 46494C4C 		.ascii "FILL"
 1925 0ae9 0000BF   		.align 2 	
 1926              	FILL:
 1927 0aec 51F8046B 		LDR	R6,[R1],#4
 1928 0af0 51F8047B 		LDR	R7,[R1],#4
 1929              	FILL0:
 1930 0af4 00E0     		B FILL1
 1931 0af6 2D46     		MOV	R5,R5
 1932              	FILL1:
 1933 0af8 07F8015B 		STRB	R5,[R7],#1
 1934 0afc 3600     		MOVS	R6,R6
 1935 0afe 02D0     		BEQ	FILL2
 1936 0b00 A6F10106 		SUB	R6,R6,#1
 1937 0b04 F6E7     		B FILL0
 1938              	FILL2:
 1939 0b06 51F8045B 		_POP
 1940 0b0a 7047     		_NEXT
 1941              		.align 2 
 1942              	//    PACK$	( b u a -- a )
 1943              	// 	Build a countedDCB with u characters from b. Null fill.
 1944              	
 1945 0b0c E40A0000 		.word	_FILL-MAPOFFSET
 1946 0b10 05       	_PACKS:	.byte  5
 1947 0b11 5041434B 		.ascii "PACK$$"
 1947      2424
 1948 0b17 00       		.align 2 	
 1949              	PACKS:
 1950 0b18 42F804ED 		_NEST
 1951 0b1c FFF720FF 		BL	ALGND
 1952 0b20 FFF7E4FB 		BL	DUPP
 1953 0b24 FFF7C6FB 		BL	TOR			// strings only on cell boundary
 1954 0b28 FFF7F4FB 		BL	OVER
 1955 0b2c FFF746FC 		BL	PLUS
 1956 0b30 FFF774FC 		BL	ONEP
 1957 0b34 FFF748FB 		_DOLIT
 1958 0b38 FCFFFFFF 		.word	0xFFFFFFFC
 1959 0b3c FFF7FCFB 		BL	ANDD			// count mod cell
 1960 0b40 FFF742FB 		_DOLIT
 1961 0b44 00000000 		.word	0
 1962 0b48 FFF7DAFB 		BL	SWAP
 1963 0b4c FFF780FB 		BL	STORE			// null fill cell
 1964 0b50 FFF7A8FB 		BL	RAT
 1965 0b54 FFF7E8FC 		BL	DDUP
 1966 0b58 FFF78AFB 		BL	CSTOR
 1967 0b5c FFF75EFC 		BL	ONEP			// save count
 1968 0b60 FFF7CEFB 		BL	SWAP
 1969 0b64 FFF790FF 		BL	CMOVE
 1970 0b68 FFF792FB 		BL	RFROM
 1971 0b6c 52F804FB 		_UNNEST   			// move string
 1972              		.align 2 
ARM GAS  stm32eforth.s 			page 38


 1973              	// **************************************************************************
 1974              	//  Numeric output, single precision
 1975              	
 1976              	//    DIGIT	( u -- c )
 1977              	// 	Convert digit u to a character.
 1978              	
 1979 0b70 100B0000 		.word	_PACKS-MAPOFFSET
 1980 0b74 05       	_DIGIT:	.byte  5
 1981 0b75 44494749 		.ascii "DIGIT"
 1981      54
 1982 0b7a 00BF     		.align 2 	
 1983              	DIGIT:
 1984 0b7c 42F804ED 		_NEST
 1985 0b80 FFF722FB 		_DOLIT
 1986 0b84 09000000 		.word	9
 1987 0b88 FFF7C4FB 		BL	OVER
 1988 0b8c FFF718FD 		BL	LESS
 1989 0b90 05F00705 		AND	R5,R5,#7
 1990 0b94 FFF712FC 		BL	PLUS
 1991 0b98 05F13005 		ADD	R5,R5,#'0'
 1992 0b9c 52F804FB 		_UNNEST
 1993              		.align 2 
 1994              	//    EXTRACT	( n base -- n c )
 1995              	// 	Extract the least significant digit from n.
 1996              	
 1997 0ba0 740B0000 		.word	_DIGIT-MAPOFFSET
 1998 0ba4 07       	_EXTRC:	.byte  7
 1999 0ba5 45585452 		.ascii "EXTRACT"
 1999      414354
 2000              		.align 2 	
 2001              	EXTRC:
 2002 0bac 42F804ED 		_NEST
 2003 0bb0 FFF70AFB 		_DOLIT
 2004 0bb4 00000000 		.word	0
 2005 0bb8 FFF7A2FB 		BL	SWAP
 2006 0bbc FFF72AFE 		BL	UMMOD
 2007 0bc0 FFF79EFB 		BL	SWAP
 2008 0bc4 FFF7DAFF 		BL	DIGIT
 2009 0bc8 52F804FB 		_UNNEST
 2010              		.align 2 
 2011              	//    <#	  ( -- )
 2012              	// 	Initiate the numeric output process.
 2013              	
 2014 0bcc A40B0000 		.word	_EXTRC-MAPOFFSET
 2015 0bd0 02       	_BDIGS:	.byte  2
 2016 0bd1 3C23     		.ascii "<#"
 2017 0bd3 00       		.align 2 	
 2018              	BDIGS:
 2019 0bd4 42F804ED 		_NEST
 2020 0bd8 FFF72AFF 		BL	PAD
 2021 0bdc FFF7CAFD 		BL	HLD
 2022 0be0 FFF736FB 		BL	STORE
 2023 0be4 52F804FB 		_UNNEST
 2024              		.align 2 
 2025              	
 2026              	//    HOLD	( c -- )
 2027              	// 	Insert a character into the numeric output string.
ARM GAS  stm32eforth.s 			page 39


 2028              	
 2029 0be8 D00B0000 		.word	_BDIGS-MAPOFFSET
 2030 0bec 04       	_HOLD:	.byte  4
 2031 0bed 484F4C44 		.ascii "HOLD"
 2032 0bf1 0000BF   		.align 2 	
 2033              	HOLD:
 2034 0bf4 42F804ED 		_NEST
 2035 0bf8 FFF7BCFD 		BL	HLD
 2036 0bfc FFF732FB 		BL	AT
 2037 0c00 FFF714FC 		BL	ONEM
 2038 0c04 FFF772FB 		BL	DUPP
 2039 0c08 FFF7B4FD 		BL	HLD
 2040 0c0c FFF720FB 		BL	STORE
 2041 0c10 FFF72EFB 		BL	CSTOR
 2042 0c14 52F804FB 		_UNNEST
 2043              		.align 2
 2044              	
 2045              	//    #	   ( u -- u )
 2046              	// 	Extract one digit from u and append the digit to output string.
 2047              	
 2048 0c18 EC0B0000 		.word	_HOLD-MAPOFFSET
 2049 0c1c 01       	_DIG:	.byte  1
 2050 0c1d 23       		.ascii "#"
 2051 0c1e 00BF     		.align 2 	
 2052              	DIG:
 2053 0c20 42F804ED 		_NEST
 2054 0c24 FFF768FD 		BL	BASE
 2055 0c28 FFF71CFB 		BL	AT
 2056 0c2c FFF7BEFF 		BL	EXTRC
 2057 0c30 FFF7E0FF 		BL	HOLD
 2058 0c34 52F804FB 		_UNNEST
 2059              		.align 2 
 2060              	//    #S	  ( u -- 0 )
 2061              	// 	Convert u until all digits are added to the output string.
 2062              	
 2063 0c38 1C0C0000 		.word	_DIG-MAPOFFSET
 2064 0c3c 02       	_DIGS:	.byte  2
 2065 0c3d 2353     		.ascii "#S"
 2066 0c3f 00       		.align 2 	
 2067              	DIGS:
 2068 0c40 42F804ED 		_NEST
 2069              	DIGS1:
 2070 0c44 FFF7ECFF 	    BL	DIG
 2071 0c48 FFF750FB 		BL	DUPP
 2072 0c4c FFF7E2FA 		BL	QBRAN
 2073 0c50 560C0000 		.word	DIGS2-MAPOFFSET
 2074 0c54 F6E7     		B	DIGS1
 2075              	DIGS2:
 2076 0c56 52F804FB 		  _UNNEST
 2077 0c5a 00BF     		.align 2 
 2078              	
 2079              	//    SIGN	( n -- )
 2080              	// 	Add a minus sign to the numeric output string.
 2081              	
 2082 0c5c 3C0C0000 		.word	_DIGS-MAPOFFSET
 2083 0c60 04       	_SIGN:	.byte  4
 2084 0c61 5349474E 		.ascii "SIGN"
ARM GAS  stm32eforth.s 			page 40


 2085 0c65 0000BF   		.align 2 	
 2086              	SIGN:
 2087 0c68 42F804ED 		_NEST
 2088 0c6c FFF75AFB 		BL	ZLESS
 2089 0c70 FFF7D0FA 		BL	QBRAN
 2090 0c74 840C0000 		.word	SIGN1-MAPOFFSET
 2091 0c78 FFF7A6FA 		_DOLIT
 2092 0c7c 2D000000 		.word	'-'
 2093 0c80 FFF7B8FF 		BL	HOLD
 2094              	SIGN1:
 2095 0c84 52F804FB 		  _UNNEST
 2096              		.align 2 
 2097              	//    #>	  ( w -- b u )
 2098              	// 	Prepare the outputDCB to be TYPE'd.
 2099              	
 2100 0c88 600C0000 		.word	_SIGN-MAPOFFSET
 2101 0c8c 02       	_EDIGS:	.byte  2
 2102 0c8d 233E     		.ascii "#>"
 2103 0c8f 00       		.align 2 	
 2104              	EDIGS:
 2105 0c90 42F804ED 		_NEST
 2106 0c94 FFF722FB 		BL	DROP
 2107 0c98 FFF76CFD 		BL	HLD
 2108 0c9c FFF7E2FA 		BL	AT
 2109 0ca0 FFF7C6FE 		BL	PAD
 2110 0ca4 FFF736FB 		BL	OVER
 2111 0ca8 FFF790FB 		BL	SUBB
 2112 0cac 52F804FB 		_UNNEST
 2113              		.align 2 
 2114              	//    str	 ( n -- b u )
 2115              	// 	Convert a signed integer to a numeric string.
 2116              	
 2117              	// 	.word	_EDIGS-MAPOFFSET
 2118              	// _STRR	.byte  3
 2119              	// 	.ascii "str"
 2120              	// 	.align 2 	
 2121              	STRR:
 2122 0cb0 42F804ED 		_NEST
 2123 0cb4 FFF71AFB 		BL	DUPP
 2124 0cb8 FFF7FCFA 		BL	TOR
 2125 0cbc FFF75EFC 		BL	ABSS
 2126 0cc0 FFF788FF 		BL	BDIGS
 2127 0cc4 FFF7BCFF 		BL	DIGS
 2128 0cc8 FFF7E2FA 		BL	RFROM
 2129 0ccc FFF7CCFF 		BL	SIGN
 2130 0cd0 FFF7DEFF 		BL	EDIGS
 2131 0cd4 52F804FB 		_UNNEST
 2132              		.align 2 
 2133              	//    HEX	 ( -- )
 2134              	// 	Use radix 16 as base for numeric conversions.
 2135              	
 2136 0cd8 8C0C0000 		.word	_EDIGS-MAPOFFSET
 2137 0cdc 03       	_HEX:	.byte  3
 2138 0cdd 484558   		.ascii "HEX"
 2139              		.align 2 	
 2140              	HEX:
 2141 0ce0 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 41


 2142 0ce4 FFF770FA 		_DOLIT
 2143 0ce8 10000000 		.word	16
 2144 0cec FFF704FD 		BL	BASE
 2145 0cf0 FFF7AEFA 		BL	STORE
 2146 0cf4 52F804FB 		_UNNEST
 2147              		.align 2
 2148              	
 2149              	//    DECIMAL	( -- )
 2150              	// 	Use radix 10 as base for numeric conversions.
 2151              	
 2152 0cf8 DC0C0000 		.word	_HEX-MAPOFFSET
 2153 0cfc 07       	_DECIM:	.byte  7
 2154 0cfd 44454349 		.ascii "DECIMAL"
 2154      4D414C
 2155              		.align 2 	
 2156              	DECIM:
 2157 0d04 42F804ED 		_NEST
 2158 0d08 FFF75EFA 		_DOLIT
 2159 0d0c 0A000000 		.word	10
 2160 0d10 FFF7F2FC 		BL	BASE
 2161 0d14 FFF79CFA 		BL	STORE
 2162 0d18 52F804FB 		_UNNEST
 2163              		.align 2
 2164              	
 2165              	// **************************************************************************
 2166              	//  Numeric input, single precision
 2167              	
 2168              	//    DIGIT?	( c base -- u t )
 2169              	// 	Convert a character to its numeric value. A flag indicates success.
 2170              	
 2171 0d1c FC0C0000 		.word	_DECIM-MAPOFFSET
 2172 0d20 06       	_DIGTQ:	.byte  6
 2173 0d21 44494749 		.ascii "DIGIT?"
 2173      543F
 2174 0d27 00       		.align 2 	
 2175              	DIGTQ:
 2176 0d28 42F804ED 		_NEST
 2177 0d2c FFF7C2FA 		BL	TOR
 2178 0d30 FFF74AFA 		_DOLIT
 2179 0d34 30000000 		.word	'0'
 2180 0d38 FFF748FB 		BL	SUBB
 2181 0d3c FFF744FA 		_DOLIT
 2182 0d40 09000000 		.word	9
 2183 0d44 FFF7E6FA 		BL	OVER
 2184 0d48 FFF73AFC 		BL	LESS
 2185 0d4c FFF762FA 		BL	QBRAN
 2186 0d50 740D0000 		.word	DGTQ1-MAPOFFSET
 2187 0d54 FFF738FA 		_DOLIT
 2188 0d58 07000000 		.word	7
 2189 0d5c FFF736FB 		BL	SUBB
 2190 0d60 FFF7C4FA 		BL	DUPP
 2191 0d64 FFF730FA 		_DOLIT
 2192 0d68 0A000000 		.word	10
 2193 0d6c FFF728FC 		BL	LESS
 2194 0d70 FFF7ECFA 		BL	ORR
 2195              	DGTQ1:
 2196 0d74 FFF7BAFA 	  BL	DUPP
ARM GAS  stm32eforth.s 			page 42


 2197 0d78 FFF78AFA 		BL	RFROM
 2198 0d7c FFF714FC 		BL	ULESS
 2199 0d80 52F804FB 		_UNNEST
 2200              		.align 2 
 2201              	//    NUMBER?	( a -- n T | a F )
 2202              	// 	Convert a numberDCB to integer. Push a flag on tos.
 2203              	
 2204 0d84 200D0000 		.word	_DIGTQ-MAPOFFSET
 2205 0d88 07       	_NUMBQ:	.byte  7
 2206 0d89 4E554D42 		.ascii "NUMBER?"
 2206      45523F
 2207              		.align 2 	
 2208              	NUMBQ:
 2209 0d90 42F804ED 		_NEST
 2210 0d94 FFF7B0FC 		BL	BASE
 2211 0d98 FFF764FA 		BL	AT
 2212 0d9c FFF78AFA 		BL	TOR
 2213 0da0 FFF712FA 		_DOLIT
 2214 0da4 00000000 		.word	0
 2215 0da8 FFF7B4FA 		BL	OVER
 2216 0dac FFF75AFC 		BL	COUNT
 2217 0db0 FFF7B0FA 		BL	OVER
 2218 0db4 FFF766FA 		BL	CAT
 2219 0db8 FFF706FA 		_DOLIT
 2220 0dbc 5F000000 		.word	'_'
 2221 0dc0 FFF7E6FB 		BL	EQUAL
 2222 0dc4 FFF726FA 		BL	QBRAN
 2223 0dc8 E00D0000 		.word	NUMQ1-MAPOFFSET
 2224 0dcc FFF788FF 		BL	HEX
 2225 0dd0 FFF796FA 		BL	SWAP
 2226 0dd4 FFF722FB 		BL	ONEP
 2227 0dd8 FFF792FA 		BL	SWAP
 2228 0ddc FFF726FB 		BL	ONEM
 2229              	NUMQ1:
 2230 0de0 FFF798FA 	  BL	OVER
 2231 0de4 FFF74EFA 		BL	CAT
 2232 0de8 FFF7EEF9 		_DOLIT
 2233 0dec 2D000000 		.word	'-'
 2234 0df0 FFF7CEFB 		BL	EQUAL
 2235 0df4 FFF75EFA 		BL	TOR
 2236 0df8 FFF782FA 		BL	SWAP
 2237 0dfc FFF752FA 		BL	RAT
 2238 0e00 FFF7E4FA 		BL	SUBB
 2239 0e04 FFF77CFA 		BL	SWAP
 2240 0e08 FFF74CFA 		BL	RAT
 2241 0e0c FFF7D6FA 		BL	PLUS
 2242 0e10 FFF768FB 		BL	QDUP
 2243 0e14 FFF7FEF9 		BL	QBRAN
 2244 0e18 A40E0000 		.word	NUMQ6-MAPOFFSET
 2245 0e1c FFF706FB 		BL	ONEM
 2246 0e20 FFF748FA 		BL	TOR
 2247              	NUMQ2:
 2248 0e24 FFF762FA 	  BL	DUPP
 2249 0e28 FFF744FA 		BL	TOR
 2250 0e2c FFF72AFA 		BL	CAT
 2251 0e30 FFF762FC 		BL	BASE
 2252 0e34 FFF716FA 		BL	AT
ARM GAS  stm32eforth.s 			page 43


 2253 0e38 FFF776FF 		BL	DIGTQ
 2254 0e3c FFF7EAF9 		BL	QBRAN
 2255 0e40 880E0000 		.word	NUMQ4-MAPOFFSET
 2256 0e44 FFF75CFA 		BL	SWAP
 2257 0e48 FFF756FC 		BL	BASE
 2258 0e4c FFF70AFA 		BL	AT
 2259 0e50 FFF7C6FA 		BL	STAR
 2260 0e54 FFF7B2FA 		BL	PLUS
 2261 0e58 FFF71AFA 		BL	RFROM
 2262 0e5c FFF7DEFA 		BL	ONEP
 2263 0e60 FFF7C8F9 		BL	DONXT
 2264 0e64 240E0000 		.word	NUMQ2-MAPOFFSET
 2265 0e68 FFF71CFA 		BL	RAT
 2266 0e6c FFF748FA 		BL	SWAP
 2267 0e70 FFF734FA 		BL	DROP
 2268 0e74 FFF7CEF9 		BL	QBRAN
 2269 0e78 800E0000 		.word	NUMQ3-MAPOFFSET
 2270 0e7c FFF776FB 		BL	NEGAT
 2271              	NUMQ3:
 2272 0e80 FFF73EFA 	  BL	SWAP
 2273 0e84 00F00CB8 		B.W	NUMQ5
 2274              	NUMQ4:
 2275 0e88 FFF702FA 	  BL	RFROM
 2276 0e8c FFF700FA 		BL	RFROM
 2277 0e90 FFF73EFB 		BL	DDROP
 2278 0e94 FFF73CFB 		BL	DDROP
 2279 0e98 FFF796F9 		_DOLIT
 2280 0e9c 00000000 		.word	0
 2281              	NUMQ5:
 2282 0ea0 FFF724FA 	  BL	DUPP
 2283              	NUMQ6:
 2284 0ea4 FFF7F4F9 	  BL	RFROM
 2285 0ea8 FFF732FB 		BL	DDROP
 2286 0eac FFF7F0F9 		BL	RFROM
 2287 0eb0 FFF722FC 		BL	BASE
 2288 0eb4 FFF7CCF9 		BL	STORE
 2289 0eb8 52F804FB 		_UNNEST
 2290              		.align 2 
 2291              	// **************************************************************************
 2292              	//  Basic I/O
 2293              	
 2294              	//    KEY	 ( -- c )
 2295              	// 	Wait for and return an input character.
 2296              	
 2297 0ebc 880D0000 		.word	_NUMBQ-MAPOFFSET
 2298 0ec0 03       	_KEY:	.byte  3
 2299 0ec1 4B4559   		.ascii "KEY"
 2300              		.align 2 	
 2301              	KEY:
 2302 0ec4 42F804ED 		_NEST
 2303              	KEY1:
 2304 0ec8 FFF752F9 	  BL	QRX
 2305 0ecc FFF7A2F9 		BL	QBRAN
 2306 0ed0 C80E0000 		.word	KEY1-MAPOFFSET
 2307 0ed4 52F804FB 		_UNNEST
 2308              		.align 2 
 2309              	//    SPACE	( -- )
ARM GAS  stm32eforth.s 			page 44


 2310              	// 	Send the blank character to the output device.
 2311              	
 2312 0ed8 C00E0000 		.word	_KEY-MAPOFFSET
 2313 0edc 05       	_SPACE:	.byte  5
 2314 0edd 53504143 		.ascii "SPACE"
 2314      45
 2315 0ee2 00BF     		.align 2 	
 2316              	SPACE:
 2317 0ee4 42F804ED 		_NEST
 2318 0ee8 FFF7CCFA 		BL	BLANK
 2319 0eec FFF75AF9 		BL	EMIT
 2320 0ef0 52F804FB 		_UNNEST
 2321              		.align 2 
 2322              	//    SPACES	( +n -- )
 2323              	// 	Send n spaces to the output device.
 2324              	
 2325 0ef4 DC0E0000 		.word	_SPACE-MAPOFFSET
 2326 0ef8 06       	_SPACS:	.byte  6
 2327 0ef9 53504143 		.ascii "SPACES"
 2327      4553
 2328 0eff 00       		.align 2 	
 2329              	SPACS:
 2330 0f00 42F804ED 		_NEST
 2331 0f04 FFF760F9 		_DOLIT
 2332 0f08 00000000 		.word	0
 2333 0f0c FFF770FB 		BL	MAX
 2334 0f10 FFF7D0F9 		BL	TOR
 2335 0f14 00F002B8 		B.W	CHAR2
 2336              	CHAR1:
 2337 0f18 FFF7E4FF 	  BL	SPACE
 2338              	CHAR2:
 2339 0f1c FFF76AF9 	  BL	DONXT
 2340 0f20 180F0000 		.word	CHAR1-MAPOFFSET
 2341 0f24 52F804FB 		_UNNEST
 2342              		.align 2 
 2343              	
 2344              	//    TYPE	( b u -- )
 2345              	// 	Output u characters from b.
 2346              	
 2347 0f28 F80E0000 		.word	_SPACS-MAPOFFSET
 2348 0f2c 04       	_TYPEE:	.byte	4
 2349 0f2d 54595045 		.ascii "TYPE"
 2350 0f31 0000BF   		.align 2 	
 2351              	TYPEE:
 2352 0f34 42F804ED 		_NEST
 2353 0f38 FFF7BCF9 		BL  TOR
 2354 0f3c 00F006B8 		B.W	TYPE2
 2355              	TYPE1:  
 2356 0f40 FFF790FB 		BL  COUNT
 2357 0f44 FFF71AFD 		BL	TCHAR
 2358 0f48 FFF72CF9 		BL	EMIT
 2359              	TYPE2:  
 2360 0f4c FFF752F9 		BL  DONXT
 2361 0f50 400F0000 		.word	TYPE1-MAPOFFSET
 2362 0f54 FFF7C2F9 		BL	DROP
 2363 0f58 52F804FB 		_UNNEST
 2364              		.align 2 
ARM GAS  stm32eforth.s 			page 45


 2365              	
 2366              	//    CR	  ( -- )
 2367              	// 	Output a carriage return and a line feed.
 2368              	
 2369 0f5c 2C0F0000 		.word	_TYPEE-MAPOFFSET
 2370 0f60 02       	_CR:	.byte  2
 2371 0f61 4352     		.ascii "CR"
 2372 0f63 00       		.align 2 	
 2373              	CR:
 2374 0f64 42F804ED 		_NEST
 2375 0f68 FFF72EF9 		_DOLIT
 2376 0f6c 0D000000 		.word	CRR
 2377 0f70 FFF718F9 		BL	EMIT
 2378 0f74 FFF728F9 		_DOLIT
 2379 0f78 0A000000 		.word	LF
 2380 0f7c FFF712F9 		BL	EMIT
 2381 0f80 52F804FB 		_UNNEST
 2382              		.align 2 
 2383              	//    do_$	( -- a )
 2384              	// 	Return the address of a compiled string.
 2385              	
 2386              	// 	.word	_CR-MAPOFFSET
 2387              	// _DOSTR	.byte  COMPO+3
 2388              	// 	.ascii "do$$"
 2389              	// 	.align 2 	
 2390              	DOSTR:
 2391 0f84 42F804ED 		_NEST
 2392 0f88 FFF782F9 		BL	RFROM
 2393 0f8c FFF780F9 		BL	RFROM			//  b0 set
 2394 0f90 FFF74CFA 		BL	ONEM			//  clear b0
 2395 0f94 FFF7AAF9 		BL	DUPP
 2396 0f98 FFF764FB 		BL	COUNT			//  get addr+1 count
 2397 0f9c FFF70EFA 		BL	PLUS
 2398 0fa0 FFF7DEFC 		BL	ALGND			//  end of string
 2399 0fa4 FFF73AFA 		BL	ONEP			//  restore b0
 2400 0fa8 FFF784F9 		BL	TOR				//  address after string
 2401 0fac FFF7A8F9 		BL	SWAP			//  count tugged
 2402 0fb0 FFF780F9 		BL	TOR
 2403 0fb4 52F804FB 		_UNNEST
 2404              		.align 2 
 2405              	//    $"|	( -- a )
 2406              	// 	Run time routine compiled by _". Return address of a compiled string.
 2407              	
 2408              	// 	.word	_DOSTR-MAPOFFSET
 2409              	// _STRQP	.byte  COMPO+3
 2410              	// 	.ascii "$$""|"
 2411              	// 	.align 2 	
 2412              	STRQP:
 2413 0fb8 42F804ED 		_NEST
 2414 0fbc FFF7E2FF 		BL	DOSTR
 2415 0fc0 52F804FB 		_UNNEST			// force a call to dostr
 2416              		.align 2
 2417              	
 2418              	//    .$	( -- )
 2419              	// 	Run time routine of ." . Output a compiled string.
 2420              	
 2421              	// 	.word	_STRQP-MAPOFFSET
ARM GAS  stm32eforth.s 			page 46


 2422              	// _DOTST	.byte  COMPO+2
 2423              	// 	.ascii ".$$"
 2424              	// 	.align 2 	
 2425              	DOTST:
 2426 0fc4 42F804ED 		_NEST
 2427 0fc8 FFF74CFB 		BL	COUNT
 2428 0fcc FFF7B2FF 		BL	TYPEE
 2429 0fd0 52F804FB 		_UNNEST
 2430              		.align 2 
 2431              	//    ."|	( -- )
 2432              	// 	Run time routine of ." . Output a compiled string.
 2433              	
 2434              	// 	.word	_DOTST-MAPOFFSET
 2435              	// _DOTQP	.byte  COMPO+3
 2436              	// 	.ascii ".""|"
 2437              	// 	.align 2 	
 2438              	DOTQP:
 2439 0fd4 42F804ED 		_NEST
 2440 0fd8 FFF7D4FF 		BL	DOSTR
 2441 0fdc FFF7F2FF 		BL	DOTST
 2442 0fe0 52F804FB 		_UNNEST
 2443              		.align 2 
 2444              	//    .R	  ( n +n -- )
 2445              	// 	Display an integer in a field of n columns, right justified.
 2446              	
 2447 0fe4 600F0000 		.word	_CR-MAPOFFSET
 2448 0fe8 02       	_DOTR:	.byte  2
 2449 0fe9 2E52     		.ascii ".R"
 2450 0feb 00       		.align 2 	
 2451              	DOTR:
 2452 0fec 42F804ED 		_NEST
 2453 0ff0 FFF760F9 		BL	TOR
 2454 0ff4 FFF75CFE 		BL	STRR
 2455 0ff8 FFF74AF9 		BL	RFROM
 2456 0ffc FFF78AF9 		BL	OVER
 2457 1000 FFF7E4F9 		BL	SUBB
 2458 1004 FFF77CFF 		BL	SPACS
 2459 1008 FFF794FF 		BL	TYPEE
 2460 100c 52F804FB 		_UNNEST
 2461              		.align 2 
 2462              	//    U.R	 ( u +n -- )
 2463              	// 	Display an unsigned integer in n column, right justified.
 2464              	
 2465 1010 E80F0000 		.word	_DOTR-MAPOFFSET
 2466 1014 03       	_UDOTR:	.byte  3
 2467 1015 552E52   		.ascii "U.R"
 2468              		.align 2 	
 2469              	UDOTR:
 2470 1018 42F804ED 		_NEST
 2471 101c FFF74AF9 		BL	TOR
 2472 1020 FFF7D8FD 		BL	BDIGS
 2473 1024 FFF70CFE 		BL	DIGS
 2474 1028 FFF732FE 		BL	EDIGS
 2475 102c FFF730F9 		BL	RFROM
 2476 1030 FFF770F9 		BL	OVER
 2477 1034 FFF7CAF9 		BL	SUBB
 2478 1038 FFF762FF 		BL	SPACS
ARM GAS  stm32eforth.s 			page 47


 2479 103c FFF77AFF 		BL	TYPEE
 2480 1040 52F804FB 		_UNNEST
 2481              		.align 2 
 2482              	//    U.	  ( u -- )
 2483              	// 	Display an unsigned integer in free format.
 2484              	
 2485 1044 14100000 		.word	_UDOTR-MAPOFFSET
 2486 1048 02       	_UDOT:	.byte  2
 2487 1049 552E     		.ascii "U."
 2488 104b 00       		.align 2 	
 2489              	UDOT:
 2490 104c 42F804ED 		_NEST
 2491 1050 FFF7C0FD 		BL	BDIGS
 2492 1054 FFF7F4FD 		BL	DIGS
 2493 1058 FFF71AFE 		BL	EDIGS
 2494 105c FFF742FF 		BL	SPACE
 2495 1060 FFF768FF 		BL	TYPEE
 2496 1064 52F804FB 		_UNNEST
 2497              		.align 2 
 2498              	//    .	   ( w -- )
 2499              	// 	Display an integer in free format, preceeded by a space.
 2500              	
 2501 1068 48100000 		.word	_UDOT-MAPOFFSET
 2502 106c 01       	_DOT:	.byte  1
 2503 106d 2E       		.ascii "."
 2504 106e 00BF     		.align 2 	
 2505              	DOT:
 2506 1070 42F804ED 		_NEST
 2507 1074 FFF740FB 		BL	BASE
 2508 1078 FFF7F4F8 		BL	AT
 2509 107c FFF7A4F8 		_DOLIT
 2510 1080 0A000000 		.word	10
 2511 1084 FFF76CF9 		BL	XORR			// ?decimal
 2512 1088 FFF7C4F8 		BL	QBRAN
 2513 108c 98100000 		.word	DOT1-MAPOFFSET
 2514 1090 FFF7DCFF 		BL	UDOT
 2515 1094 52F804FB 		_UNNEST			// no,display unsigned
 2516              	DOT1:
 2517 1098 FFF70AFE 	    BL	STRR
 2518 109c FFF722FF 		BL	SPACE
 2519 10a0 FFF748FF 		BL	TYPEE
 2520 10a4 52F804FB 		_UNNEST			// yes, display signed
 2521              		.align 2 
 2522              	//    ?	   ( a -- )
 2523              	// 	Display the contents in a memory cell.
 2524              	
 2525 10a8 6C100000 		.word	_DOT-MAPOFFSET
 2526 10ac 01       	_QUEST:	.byte  1
 2527 10ad 3F       		.ascii "?"
 2528 10ae 00BF     		.align 2 	
 2529              	QUEST:
 2530 10b0 42F804ED 		_NEST
 2531 10b4 FFF7D6F8 		BL	AT
 2532 10b8 FFF7DAFF 		BL	DOT
 2533 10bc 52F804FB 		_UNNEST
 2534              		.align 2 
 2535              	
ARM GAS  stm32eforth.s 			page 48


 2536              	// **************************************************************************
 2537              	//  Parsing
 2538              	
 2539              	//    parse	( b u c -- b u delta //  string> )
 2540              	// 	ScanDCB delimited by c. Return found string and its offset.
 2541              	
 2542              	// 	.word	_QUEST-MAPOFFSET
 2543              	// _PARS	.byte  5
 2544              	// 	.ascii "parse"
 2545              	// 	.align 2 	
 2546              	PARS:
 2547 10c0 42F804ED 		_NEST
 2548 10c4 FFF71EFB 		BL	TEMP
 2549 10c8 FFF7C2F8 		BL	STORE
 2550 10cc FFF722F9 		BL	OVER
 2551 10d0 FFF7F0F8 		BL	TOR
 2552 10d4 FFF70AF9 		BL	DUPP
 2553 10d8 FFF79CF8 		BL	QBRAN
 2554 10dc CE110000 		.word	PARS8-MAPOFFSET
 2555 10e0 FFF7A4F9 		BL	ONEM
 2556 10e4 FFF70EFB 		BL	TEMP
 2557 10e8 FFF7BCF8 		BL	AT
 2558 10ec FFF7CAF9 		BL	BLANK
 2559 10f0 FFF74EFA 		BL	EQUAL
 2560 10f4 FFF78EF8 		BL	QBRAN
 2561 10f8 48110000 		.word	PARS3-MAPOFFSET
 2562 10fc FFF7DAF8 		BL	TOR
 2563              	PARS1:
 2564 1100 FFF7C0F9 	  BL	BLANK
 2565 1104 FFF706F9 		BL	OVER
 2566 1108 FFF7BCF8 		BL	CAT			// skip leading blanks 
 2567 110c FFF75EF9 		BL	SUBB
 2568 1110 FFF708F9 		BL	ZLESS
 2569 1114 FFF720FA 		BL	INVER
 2570 1118 FFF77CF8 		BL	QBRAN
 2571 111c 44110000 		.word	PARS2-MAPOFFSET
 2572 1120 FFF77CF9 		BL	ONEP
 2573 1124 FFF766F8 		BL	DONXT
 2574 1128 00110000 		.word	PARS1-MAPOFFSET
 2575 112c FFF7B0F8 		BL	RFROM
 2576 1130 FFF7D4F8 		BL	DROP
 2577 1134 FFF748F8 		_DOLIT
 2578 1138 00000000 		.word	0
 2579 113c FFF7D6F8 		BL	DUPP
 2580 1140 52F804FB 		_UNNEST
 2581              	PARS2:
 2582 1144 FFF7A4F8 	  BL	RFROM
 2583              	PARS3:
 2584 1148 FFF7E4F8 	  BL	OVER
 2585 114c FFF7D8F8 		BL	SWAP
 2586 1150 FFF7B0F8 		BL	TOR
 2587              	PARS4:
 2588 1154 FFF7D6FA 	  BL	TEMP
 2589 1158 FFF784F8 		BL	AT
 2590 115c FFF7DAF8 		BL	OVER
 2591 1160 FFF790F8 		BL	CAT
 2592 1164 FFF732F9 		BL	SUBB			// scan for delimiter
ARM GAS  stm32eforth.s 			page 49


 2593 1168 FFF7CCFA 		BL	TEMP
 2594 116c FFF77AF8 		BL	AT
 2595 1170 FFF788F9 		BL	BLANK
 2596 1174 FFF70CFA 		BL	EQUAL
 2597 1178 FFF74CF8 		BL	QBRAN
 2598 117c 84110000 		.word	PARS5-MAPOFFSET
 2599 1180 FFF7D0F8 		BL	ZLESS
 2600              	PARS5:
 2601 1184 FFF746F8 	  BL	QBRAN
 2602 1188 A2110000 		.word	PARS6-MAPOFFSET
 2603 118c FFF746F9 		BL	ONEP
 2604 1190 FFF730F8 		BL	DONXT
 2605 1194 54110000 		.word	PARS4-MAPOFFSET
 2606 1198 FFF7A8F8 		BL	DUPP
 2607 119c FFF78AF8 		BL	TOR
 2608 11a0 09E0     		B	PARS7
 2609              	PARS6:
 2610 11a2 FFF775F8 	  BL	RFROM
 2611 11a6 FFF799F8 		BL	DROP
 2612 11aa FFF79FF8 		BL	DUPP
 2613 11ae FFF735F9 		BL	ONEP
 2614 11b2 FFF77FF8 		BL	TOR
 2615              	PARS7:
 2616 11b6 FFF7ADF8 	  BL	OVER
 2617 11ba FFF707F9 		BL	SUBB
 2618 11be FFF767F8 		BL	RFROM
 2619 11c2 FFF765F8 		BL	RFROM
 2620 11c6 FFF701F9 		BL	SUBB
 2621 11ca 52F804FB 		_UNNEST
 2622              	PARS8:
 2623 11ce FFF7A1F8 	  BL	OVER
 2624 11d2 FFF75DF8 		BL	RFROM
 2625 11d6 FFF7F9F8 		BL	SUBB
 2626 11da 52F804FB 		_UNNEST
 2627 11de 00BF     		.align 2 
 2628              	
 2629              	//    PARSE	( c -- b u //  string> )
 2630              	// 	Scan input stream and return counted string delimited by c.
 2631              	
 2632 11e0 AC100000 		.word	_QUEST-MAPOFFSET
 2633 11e4 05       	_PARSE:	.byte  5
 2634 11e5 50415253 		.ascii "PARSE"
 2634      45
 2635 11ea 00BF     		.align 2 	
 2636              	PARSE:
 2637 11ec 42F804ED 		_NEST
 2638 11f0 FFF760F8 		BL	TOR
 2639 11f4 FFF728FC 		BL	TIB
 2640 11f8 FFF79AFA 		BL	INN
 2641 11fc FFF732F8 		BL	AT
 2642 1200 FFF7DCF8 		BL	PLUS			// current input buffer pointer
 2643 1204 FFF7A0FA 		BL	NTIB
 2644 1208 FFF72CF8 		BL	AT
 2645 120c FFF790FA 		BL	INN
 2646 1210 FFF728F8 		BL	AT
 2647 1214 FFF7DAF8 		BL	SUBB			// remaining count
 2648 1218 FFF73AF8 		BL	RFROM
ARM GAS  stm32eforth.s 			page 50


 2649 121c FFF750FF 		BL	PARS
 2650 1220 FFF786FA 		BL	INN
 2651 1224 FFF7F8F9 		BL	PSTOR
 2652 1228 52F804FB 		_UNNEST
 2653              		.align 2 
 2654              	//    .(	  ( -- )
 2655              	// 	Output following string up to next ) .
 2656              	
 2657 122c E4110000 		.word	_PARSE-MAPOFFSET
 2658 1230 82       	_DOTPR:	.byte  IMEDD+2
 2659 1231 2E28     		.ascii ".("
 2660 1233 00       		.align 2 	
 2661              	DOTPR:
 2662 1234 42F804ED 		_NEST
 2663 1238 FEF7C6FF 		_DOLIT
 2664 123c 29000000 		.word	')'
 2665 1240 FFF7D4FF 		BL	PARSE
 2666 1244 FFF776FE 		BL	TYPEE
 2667 1248 52F804FB 		_UNNEST
 2668              		.align 2 
 2669              	//    (	   ( -- )
 2670              	// 	Ignore following string up to next ) . A comment.
 2671              	
 2672 124c 30120000 		.word	_DOTPR-MAPOFFSET
 2673 1250 81       	_PAREN:	.byte  IMEDD+1
 2674 1251 28       		.ascii "("
 2675 1252 00BF     		.align 2 	
 2676              	PAREN:
 2677 1254 42F804ED 		_NEST
 2678 1258 FEF7B6FF 		_DOLIT
 2679 125c 29000000 		.word	')'
 2680 1260 FFF7C4FF 		BL	PARSE
 2681 1264 FFF754F9 		BL	DDROP
 2682 1268 52F804FB 		_UNNEST
 2683              		.align 2 
 2684              	//    \	   ( -- )
 2685              	// 	Ignore following text till the end of line.
 2686              	
 2687 126c 50120000 		.word	_PAREN-MAPOFFSET
 2688 1270 81       	_BKSLA:	.byte  IMEDD+1
 2689 1271 27       		.byte	'\'
 2690 1272 00BF     		.align 2 	
 2691              	BKSLA:
 2692 1274 42F804ED 		_NEST
 2693 1278 FFF766FA 		BL	NTIB
 2694 127c FEF7F2FF 		BL	AT
 2695 1280 FFF756FA 		BL	INN
 2696 1284 FEF7E4FF 		BL	STORE
 2697 1288 52F804FB 		_UNNEST
 2698              		.align 2 
 2699              	//    CHAR	( -- c )
 2700              	// 	Parse next word and return its first character.
 2701              	
 2702 128c 70120000 		.word	_BKSLA-MAPOFFSET
 2703 1290 04       	_CHAR:	.byte  4
 2704 1291 43484152 		.ascii "CHAR"
 2705 1295 0000BF   		.align 2 	
ARM GAS  stm32eforth.s 			page 51


 2706              	CHAR:
 2707 1298 42F804ED 		_NEST
 2708 129c FFF7F2F8 		BL	BLANK
 2709 12a0 FFF7A4FF 		BL	PARSE
 2710 12a4 FFF71AF8 		BL	DROP
 2711 12a8 FEF7ECFF 		BL	CAT
 2712 12ac 52F804FB 		_UNNEST
 2713              		.align 2 
 2714              	//    WORD	( c -- a //  string> )
 2715              	// 	Parse a word from input stream and copy it to code dictionary.
 2716              	
 2717 12b0 90120000 		.word	_CHAR-MAPOFFSET
 2718 12b4 04       	_WORDD:	.byte  4
 2719 12b5 574F5244 		.ascii "WORD"
 2720 12b9 0000BF   		.align 2 	
 2721              	WORDD:
 2722 12bc 42F804ED 		_NEST
 2723 12c0 FFF794FF 		BL	PARSE
 2724 12c4 FFF7A8FB 		BL	HERE
 2725 12c8 FFF7CAF8 		BL	CELLP
 2726 12cc FFF724FC 		BL	PACKS
 2727 12d0 52F804FB 		_UNNEST
 2728              		.align 2 
 2729              	//    TOKEN	( -- a //  string> )
 2730              	// 	Parse a word from input stream and copy it to name dictionary.
 2731              	
 2732 12d4 B4120000 		.word	_WORDD-MAPOFFSET
 2733 12d8 05       	_TOKEN:	.byte  5
 2734 12d9 544F4B45 		.ascii "TOKEN"
 2734      4E
 2735 12de 00BF     		.align 2 	
 2736              	TOKEN:
 2737 12e0 42F804ED 		_NEST
 2738 12e4 FFF7CEF8 		BL	BLANK
 2739 12e8 FFF7E8FF 		BL	WORDD
 2740 12ec 52F804FB 		_UNNEST
 2741              		.align 2 
 2742              	// **************************************************************************
 2743              	//  Dictionary search
 2744              	
 2745              	//    NAME>	( na -- ca )
 2746              	// 	Return a code address given a name address.
 2747              	
 2748 12f0 D8120000 		.word	_TOKEN-MAPOFFSET
 2749 12f4 05       	_NAMET:	.byte  5
 2750 12f5 4E414D45 		.ascii "NAME>"
 2750      3E
 2751 12fa 00BF     		.align 2 	
 2752              	NAMET:
 2753 12fc 42F804ED 		_NEST
 2754 1300 FFF7B0F9 		BL	COUNT
 2755 1304 FEF760FF 		_DOLIT
 2756 1308 1F000000 		.word	0x1F
 2757 130c FFF714F8 		BL	ANDD
 2758 1310 FFF754F8 		BL	PLUS
 2759 1314 FFF724FB 		BL	ALGND
 2760 1318 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 52


 2761              		.align 2 
 2762              	//    SAME?	( a a u -- a a f \ -0+ )
 2763              	// 	Compare u cells in two strings. Return 0 if identical.
 2764              	
 2765 131c F4120000 		.word	_NAMET-MAPOFFSET
 2766 1320 05       	_SAMEQ:	.byte  5
 2767 1321 53414D45 		.ascii "SAME?"
 2767      3F
 2768 1326 00BF     		.align 2 	
 2769              	SAMEQ:
 2770 1328 42F804ED 		_NEST
 2771 132c FEF7C2FF 		BL	TOR
 2772 1330 00F022B8 		B.W	SAME2
 2773              	SAME1:
 2774 1334 FEF7EEFF 	  BL	OVER
 2775 1338 FEF7B4FF 		BL	RAT
 2776 133c FFF7AEF8 		BL	CELLS
 2777 1340 FFF73CF8 		BL	PLUS
 2778 1344 FEF78EFF 		BL	AT			// 32/16 mix-up
 2779 1348 FEF7E4FF 		BL	OVER
 2780 134c FEF7AAFF 		BL	RAT
 2781 1350 FFF7A4F8 		BL	CELLS
 2782 1354 FFF732F8 		BL	PLUS
 2783 1358 FEF784FF 		BL	AT			// 32/16 mix-up
 2784 135c FFF736F8 		BL	SUBB
 2785 1360 FFF7C0F8 		BL	QDUP
 2786 1364 FEF756FF 		BL	QBRAN
 2787 1368 78130000 		.word	SAME2-MAPOFFSET
 2788 136c FEF790FF 		BL	RFROM
 2789 1370 FEF7B4FF 		BL	DROP
 2790 1374 52F804FB 		_UNNEST			// strings not equal
 2791              	SAME2:
 2792 1378 FEF73CFF 	  BL	DONXT
 2793 137c 34130000 		.word	SAME1-MAPOFFSET
 2794 1380 FEF722FF 		_DOLIT
 2795 1384 00000000 		.word	0
 2796 1388 52F804FB 		_UNNEST			// strings equal
 2797              		.align 2 
 2798              	//    find	( a na -- ca na | a F )
 2799              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2800              	
 2801              	// 	.word	_SAMEQ-MAPOFFSET
 2802              	// _FIND	.byte  4
 2803              	// 	.ascii "find"
 2804              	// 	.align 2 	
 2805              	FIND:
 2806 138c 42F804ED 		_NEST
 2807 1390 FEF7B6FF 		BL	SWAP			//  na a	
 2808 1394 FEF7AAFF 		BL	DUPP			//  na a a
 2809 1398 FEF774FF 		BL	CAT			//  na a count
 2810 139c FFF788F8 		BL	CELLSL		//  na a count/4
 2811 13a0 FFF7B0F9 		BL	TEMP
 2812 13a4 FEF754FF 		BL	STORE			//  na a
 2813 13a8 FEF7A0FF 		BL	DUPP			//  na a a
 2814 13ac FEF75AFF 		BL	AT			//  na a word1
 2815 13b0 FEF780FF 		BL	TOR			//  na a
 2816 13b4 FFF754F8 		BL	CELLP			//  na a+4
ARM GAS  stm32eforth.s 			page 53


 2817 13b8 FEF7A2FF 		BL	SWAP			//  a+4 na
 2818              	FIND1:
 2819 13bc FEF796FF 		BL	DUPP			//  a+4 na na
 2820 13c0 FEF728FF 		BL	QBRAN
 2821 13c4 0C140000 		.word	FIND6-MAPOFFSET	//  end of vocabulary
 2822 13c8 FEF790FF 		BL	DUPP			//  a+4 na na
 2823 13cc FEF74AFF 		BL	AT			//  a+4 na name1
 2824 13d0 FEF7FAFE 		_DOLIT
 2825 13d4 1FFFFFFF 		.word	MASKK
 2826 13d8 FEF7AEFF 		BL	ANDD
 2827 13dc FEF762FF 		BL	RAT			//  a+4 na name1 word1
 2828 13e0 FEF7BEFF 		BL	XORR			//  a+4 na ?
 2829 13e4 FEF716FF 		BL	QBRAN
 2830 13e8 F8130000 		.word	FIND2-MAPOFFSET
 2831 13ec FFF742F8 		BL	CELLM			//  a+4 la
 2832 13f0 FEF738FF 		BL	AT			//  a+4 next_na
 2833 13f4 FFF7E2BF 		B.w	FIND1			//  try next word
 2834              	FIND2:   
 2835 13f8 FFF732F8 		BL	CELLP			//  a+4 na+4
 2836 13fc FFF782F9 		BL	TEMP
 2837 1400 FEF730FF 		BL	AT			//  a+4 na+4 count/4
 2838 1404 FFF790FF 		BL	SAMEQ			//  a+4 na+4 ? 
 2839              	FIND3:	
 2840 1408 00F00CB8 		B.w	FIND4
 2841              	FIND6:	
 2842 140c FEF740FF 		BL	RFROM			//  a+4 0 name1 -- , no match
 2843 1410 FEF764FF 		BL	DROP			//  a+4 0
 2844 1414 FEF774FF 		BL	SWAP			//  0 a+4
 2845 1418 FFF72CF8 		BL	CELLM			//  0 a
 2846 141c FEF770FF 		BL	SWAP			//  a 0 
 2847 1420 52F804FB 		_UNNEST			//  return without a match
 2848              	FIND4:	
 2849 1424 FEF7F6FE 		BL	QBRAN			//  a+4 na+4
 2850 1428 3C140000 		.word	FIND5-MAPOFFSET	//  found a match
 2851 142c FFF722F8 		BL	CELLM			//  a+4 na
 2852 1430 FFF720F8 		BL	CELLM			//  a+4 la
 2853 1434 FEF716FF 		BL	AT			//  a+4 next_na
 2854 1438 FFF7C0BF 		B.w	FIND1			//  compare next name
 2855              	FIND5:	
 2856 143c FEF728FF 		BL	RFROM			//  a+4 na+4 count/4
 2857 1440 FEF74CFF 		BL	DROP			//  a+4 na+4
 2858 1444 FEF75CFF 		BL	SWAP			//  na+4 a+4
 2859 1448 FEF748FF 		BL	DROP			//  na+4
 2860 144c FFF712F8 		BL	CELLM			//  na
 2861 1450 FEF74CFF 		BL	DUPP			//  na na
 2862 1454 FFF752FF 		BL	NAMET			//  na ca
 2863 1458 FEF752FF 		BL	SWAP			//  ca na
 2864 145c 52F804FB 		_UNNEST			//  return with a match
 2865              		.align 2 
 2866              	
 2867              	//    NAME?	( a -- ca na | a F )
 2868              	// 	Search all context vocabularies for a string.
 2869              	
 2870 1460 20130000 		.word	_SAMEQ-MAPOFFSET
 2871 1464 05       	_NAMEQ:	.byte  5
 2872 1465 4E414D45 		.ascii "NAME?"
 2872      3F
ARM GAS  stm32eforth.s 			page 54


 2873 146a 00BF     		.align 2 	
 2874              	NAMEQ:
 2875 146c 42F804ED 		_NEST
 2876 1470 FFF78CF9 		BL	CNTXT
 2877 1474 FEF7F6FE 		BL	AT
 2878 1478 FFF788FF 		BL	FIND
 2879 147c 52F804FB 		_UNNEST
 2880              		.align 2 
 2881              	// **************************************************************************
 2882              	//  Terminal input
 2883              	
 2884              	//    	  ( bot eot cur -- bot eot cur )
 2885              	// 	Backup the cursor by one character.
 2886              	
 2887              	// 	.word	_NAMEQ-MAPOFFSET
 2888              	// _BKSP	.byte  2
 2889              	// 	.ascii "^H"
 2890              	// 	.align 2 	
 2891              	BKSP:
 2892 1480 42F804ED 		_NEST
 2893 1484 FEF716FF 		BL	TOR
 2894 1488 FEF744FF 		BL	OVER
 2895 148c FEF700FF 		BL	RFROM
 2896 1490 FEF736FF 		BL	SWAP
 2897 1494 FEF73EFF 		BL	OVER
 2898 1498 FEF762FF 		BL	XORR
 2899 149c FEF7BAFE 		BL	QBRAN
 2900 14a0 C8140000 		.word	BACK1-MAPOFFSET
 2901 14a4 FEF790FE 		_DOLIT
 2902 14a8 08000000 		.word	BKSPP
 2903 14ac FEF77AFE 		BL	TECHO
 2904              	// 	BL	ATEXE
 2905 14b0 FEF7BCFF 		BL	ONEM
 2906 14b4 FEF7E6FF 		BL	BLANK
 2907 14b8 FEF774FE 		BL	TECHO
 2908              	// 	BL	ATEXE
 2909 14bc FEF784FE 		_DOLIT
 2910 14c0 08000000 		.word	BKSPP
 2911 14c4 FEF76EFE 		BL	TECHO
 2912              	// 	BL	ATEXE
 2913              	BACK1:
 2914 14c8 52F804FB 		  _UNNEST
 2915              		.align 2 
 2916              	//    TAP	 ( bot eot cur c -- bot eot cur )
 2917              	// 	Accept and echo the key stroke and bump the cursor.
 2918              	
 2919              	// 	.word	_BKSP-MAPOFFSET
 2920              	// _TAP	.byte  3
 2921              	// 	.ascii "TAP"
 2922              	// 	.align 2 	
 2923              	TAP:
 2924 14cc 42F804ED 		_NEST
 2925 14d0 FEF70CFF 		BL	DUPP
 2926 14d4 FEF766FE 		BL	TECHO
 2927              	// 	BL	ATEXE
 2928 14d8 FEF71CFF 		BL	OVER
 2929 14dc FEF7C8FE 		BL	CSTOR
ARM GAS  stm32eforth.s 			page 55


 2930 14e0 FEF79CFF 		BL	ONEP
 2931 14e4 52F804FB 		_UNNEST
 2932              		.align 2 
 2933              	//    kTAP	( bot eot cur c -- bot eot cur )
 2934              	// 	Process a key stroke, CR or backspace.
 2935              	
 2936              	// 	.word	_TAP-MAPOFFSET
 2937              	// _KTAP	.byte  4
 2938              	// 	.ascii "kTAP"
 2939              	// 	.align 2 	
 2940              	KTAP:
 2941              	TTAP:
 2942 14e8 42F804ED 		_NEST
 2943 14ec FEF7FEFE 		BL	DUPP
 2944 14f0 FEF76AFE 		_DOLIT
 2945 14f4 0D000000 		.word	CRR
 2946 14f8 FEF732FF 		BL	XORR
 2947 14fc FEF78AFE 		BL	QBRAN
 2948 1500 30150000 		.word	KTAP2-MAPOFFSET
 2949 1504 FEF760FE 		_DOLIT
 2950 1508 08000000 		.word	BKSPP
 2951 150c FEF728FF 		BL	XORR
 2952 1510 FEF780FE 		BL	QBRAN
 2953 1514 28150000 		.word	KTAP1-MAPOFFSET
 2954 1518 FEF7B4FF 		BL	BLANK
 2955 151c FFF7D6FF 		BL	TAP
 2956 1520 52F804FB 		_UNNEST
 2957 1524 00000000 		.word	0			// patch
 2958              	KTAP1:
 2959 1528 FFF7AAFF 	  BL	BKSP
 2960 152c 52F804FB 		_UNNEST
 2961              	KTAP2:
 2962 1530 FEF7D4FE 	  BL	DROP
 2963 1534 FEF7E4FE 		BL	SWAP
 2964 1538 FEF7D0FE 		BL	DROP
 2965 153c FEF7D6FE 		BL	DUPP
 2966 1540 52F804FB 		_UNNEST
 2967              		.align 2 
 2968              	//    ACCEPT	( b u -- b u )
 2969              	// 	Accept characters to input buffer. Return with actual count.
 2970              	
 2971 1544 64140000 		.word	_NAMEQ-MAPOFFSET
 2972 1548 06       	_ACCEP:	.byte  6
 2973 1549 41434345 		.ascii "ACCEPT"
 2973      5054
 2974 154f 00       		.align 2 	
 2975              	ACCEP:
 2976 1550 42F804ED 		_NEST
 2977 1554 FEF7DEFE 		BL	OVER
 2978 1558 FEF730FF 		BL	PLUS
 2979 155c FEF7DAFE 		BL	OVER
 2980              	ACCP1:
 2981 1560 FEF7E2FF 	  BL	DDUP
 2982 1564 FEF7FCFE 		BL	XORR
 2983 1568 FEF754FE 		BL	QBRAN
 2984 156c 9C150000 		.word	ACCP4-MAPOFFSET
 2985 1570 FFF7A8FC 		BL	KEY
ARM GAS  stm32eforth.s 			page 56


 2986 1574 FEF7BAFE 		BL	DUPP
 2987 1578 FEF784FF 		BL	BLANK
 2988 157c FEF724FE 		_DOLIT
 2989 1580 7F000000 		.word	127
 2990 1584 FFF730F9 		BL	WITHI
 2991 1588 FEF744FE 		BL	QBRAN
 2992 158c 96150000 		.word	ACCP2-MAPOFFSET
 2993 1590 FFF79CFF 		BL	TAP
 2994 1594 01E0     		B	ACCP3
 2995              	ACCP2:
 2996 1596 FFF7A7FF 	  BL	KTAP
 2997              	// 	BL	ATEXE
 2998              	ACCP3:	  
 2999 159a E1E7     		B	ACCP1
 3000              	ACCP4:
 3001 159c FEF79EFE 	  BL	DROP
 3002 15a0 FEF7B8FE 		BL	OVER
 3003 15a4 FEF712FF 		BL	SUBB
 3004 15a8 52F804FB 		_UNNEST
 3005              		.align 2 
 3006              	//    QUERY	( -- )
 3007              	// 	Accept input stream to terminal input buffer.
 3008              	
 3009 15ac 48150000 		.word	_ACCEP-MAPOFFSET
 3010 15b0 05       	_QUERY:	.byte  5
 3011 15b1 51554552 		.ascii "QUERY"
 3011      59
 3012 15b6 00BF     		.align 2 	
 3013              	QUERY:
 3014 15b8 42F804ED 		_NEST
 3015 15bc FFF744FA 		BL	TIB
 3016 15c0 FEF702FE 		_DOLIT
 3017 15c4 50000000 		.word	80
 3018 15c8 FFF7C2FF 		BL	ACCEP
 3019 15cc FFF7BCF8 		BL	NTIB
 3020 15d0 FEF73EFE 		BL	STORE
 3021 15d4 FEF782FE 		BL	DROP
 3022 15d8 FEF7F6FD 		_DOLIT
 3023 15dc 00000000 		.word	0
 3024 15e0 FFF7A6F8 		BL	INN
 3025 15e4 FEF734FE 		BL	STORE
 3026 15e8 52F804FB 		_UNNEST
 3027              		.align 2 
 3028              	// **************************************************************************
 3029              	//  Error handling
 3030              	
 3031              	//    ABORT	( a -- )
 3032              	// 	Reset data stack and jump to QUIT.
 3033              	
 3034 15ec B0150000 		.word	_QUERY-MAPOFFSET
 3035 15f0 05       	_ABORT:	.byte  5
 3036 15f1 41424F52 		.ascii "ABORT"
 3036      54
 3037 15f6 00BF     		.align 2 	
 3038              	ABORT:
 3039 15f8 42F804ED 		_NEST
 3040 15fc FFF772FC 		BL	SPACE
ARM GAS  stm32eforth.s 			page 57


 3041 1600 FFF730F8 		BL	COUNT
 3042 1604 FFF796FC 		BL	TYPEE
 3043 1608 FEF7DEFD 		_DOLIT
 3044 160c 3F000000 		.word	0X3F
 3045 1610 FEF7C8FD 		BL	EMIT
 3046 1614 FFF7A6FC 		BL	CR
 3047 1618 00F0B2F8 		BL	PRESE
 3048 161c 00F0C0B8 		B.W	QUIT
 3049              		.align 2 
 3050              	
 3051              	//    _abort"	( f -- )
 3052              	// 	Run time routine of ABORT" . Abort with a message.
 3053              	
 3054              	// 	.word	_ABORT-MAPOFFSET
 3055              	// _ABORQ	.byte  COMPO+6
 3056              	// 	.ascii "abort\""
 3057              	// 	.align 2 	
 3058              	ABORQ:
 3059 1620 42F804ED 		_NEST
 3060 1624 FEF7F6FD 		BL	QBRAN
 3061 1628 40160000 		.word	ABOR1-MAPOFFSET	// text flag
 3062 162c FFF7AAFC 		BL	DOSTR
 3063 1630 FFF718F8 		BL	COUNT
 3064 1634 FFF77EFC 		BL	TYPEE
 3065 1638 FFF794FC 		BL	CR
 3066 163c 00F0B0B8 		B.W	QUIT
 3067              	ABOR1:
 3068 1640 FFF7A0FC 	  BL	DOSTR
 3069 1644 FEF74AFE 		BL	DROP
 3070 1648 52F804FB 		_UNNEST			// drop error
 3071              		.align 2 
 3072              	// **************************************************************************
 3073              	//  The text interpreter
 3074              	
 3075              	//    $INTERPRET  ( a -- )
 3076              	// 	Interpret a word. If failed, try to convert it to an integer.
 3077              	
 3078 164c F0150000 		.word	_ABORT-MAPOFFSET
 3079 1650 0A       	_INTER:	.byte  10
 3080 1651 2424494E 		.ascii "$$INTERPRET"
 3080      54455250 
 3080      524554
 3081              		.align 2 	
 3082              	INTER:
 3083 165c 42F804ED 		_NEST
 3084 1660 FFF704FF 		BL	NAMEQ
 3085 1664 FEF73EFF 		BL	QDUP	// ?defined
 3086 1668 FEF7D4FD 		BL	QBRAN
 3087 166c 9C160000 		.word	INTE1-MAPOFFSET
 3088 1670 FEF7F8FD 		BL	AT
 3089 1674 FEF7A8FD 		_DOLIT
 3090 1678 40000000 		.word	COMPO
 3091 167c FEF75CFE 		BL	ANDD	// ?compile only lexicon bits
 3092 1680 FFF7CEFF 		BL	ABORQ
 3093 1684 0D       		.byte	13
 3094 1685 20636F6D 		.ascii " compile only"
 3094      70696C65 
ARM GAS  stm32eforth.s 			page 58


 3094      206F6E6C 
 3094      79
 3095 1692 00BF     		.align 2 	
 3096 1694 FEF7A8FD 		BL	EXECU
 3097 1698 52F804FB 		_UNNEST			// execute defined word
 3098              	INTE1:
 3099 169c FFF778FB 	  BL	NUMBQ
 3100 16a0 FEF7B8FD 		BL	QBRAN
 3101 16a4 AC160000 		.word	INTE2-MAPOFFSET
 3102 16a8 52F804FB 		_UNNEST
 3103              	INTE2:
 3104 16ac FFF7A4BF 	  B.W	ABORT	// error
 3105              	
 3106              	//    [	   ( -- )
 3107              	// 	Start the text interpreter.
 3108              	
 3109 16b0 50160000 		.word	_INTER-MAPOFFSET
 3110 16b4 81       	_LBRAC:	.byte  IMEDD+1
 3111 16b5 5B       		.ascii "["
 3112 16b6 00BF     		.align 2 	
 3113              	LBRAC:
 3114 16b8 42F804ED 		_NEST
 3115 16bc FEF784FD 		_DOLIT
 3116 16c0 5C160000 		.word	INTER-MAPOFFSET
 3117 16c4 FFF74CF8 		BL	TEVAL
 3118 16c8 FEF7C2FD 		BL	STORE
 3119 16cc 52F804FB 		_UNNEST
 3120              		.align 2 
 3121              	//    .OK	 ( -- )
 3122              	// 	Display "ok" only while interpreting.
 3123              	
 3124 16d0 B4160000 		.word	_LBRAC-MAPOFFSET
 3125 16d4 03       	_DOTOK:	.byte  3
 3126 16d5 2E4F4B   		.ascii ".OK"
 3127              		.align 2 	
 3128              	DOTOK:
 3129 16d8 42F804ED 		_NEST
 3130 16dc FEF774FD 		_DOLIT
 3131 16e0 5C160000 		.word	INTER-MAPOFFSET
 3132 16e4 FFF73CF8 		BL	TEVAL
 3133 16e8 FEF7BCFD 		BL	AT
 3134 16ec FEF750FF 		BL	EQUAL
 3135 16f0 FEF790FD 		BL	QBRAN
 3136 16f4 00170000 		.word	DOTO1-MAPOFFSET
 3137 16f8 FFF76CFC 		BL	DOTQP
 3138 16fc 03       		.byte	3
 3139 16fd 206F6B   		.ascii " ok"
 3140              		.align 2 	
 3141              	DOTO1:
 3142 1700 FFF730FC 	  BL	CR
 3143 1704 52F804FB 		_UNNEST
 3144              		.align 2 
 3145              	//    ?STACK	( -- )
 3146              	// 	Abort if the data stack underflows.
 3147              	
 3148 1708 D4160000 		.word	_DOTOK-MAPOFFSET
 3149 170c 06       	_QSTAC:	.byte  6
ARM GAS  stm32eforth.s 			page 59


 3150 170d 3F535441 		.ascii "?STACK"
 3150      434B
 3151 1713 00       		.align 2 	
 3152              	QSTAC:
 3153 1714 42F804ED 		_NEST
 3154 1718 FFF756F9 		BL	DEPTH
 3155 171c FEF702FE 		BL	ZLESS	// check only for underflow
 3156 1720 FFF77EFF 		BL	ABORQ
 3157 1724 0A       		.byte	10
 3158 1725 20756E64 		.ascii " underflow"
 3158      6572666C 
 3158      6F77
 3159 172f 00       		.align 2 	
 3160 1730 52F804FB 		_UNNEST
 3161              		.align 2 
 3162              	//    EVAL	( -- )
 3163              	// 	Interpret the input stream.
 3164              	
 3165 1734 0C170000 		.word	_QSTAC-MAPOFFSET
 3166 1738 04       	_EVAL:	.byte  4
 3167 1739 4556414C 		.ascii "EVAL"
 3168 173d 0000BF   		.align 2 	
 3169              	EVAL:
 3170 1740 42F804ED 		_NEST
 3171              	EVAL1:
 3172 1744 FFF7CCFD 	    BL	TOKEN
 3173 1748 FEF7D0FD 		BL	DUPP
 3174 174c FEF79AFD 		BL	CAT	// ?input stream empty
 3175 1750 FEF760FD 		BL	QBRAN
 3176 1754 68170000 		.word	EVAL2-MAPOFFSET
 3177 1758 FFF702F8 		BL	TEVAL
 3178 175c FFF784F9 		BL	ATEXE
 3179 1760 FFF7D8FF 		BL	QSTAC	// evaluate input, check stack
 3180 1764 FFF7EEBF 		B.W	EVAL1
 3181              	EVAL2:
 3182 1768 FEF7B8FD 	  BL	DROP
 3183 176c FFF7B4FF 		BL	DOTOK
 3184 1770 52F804FB 		_UNNEST	// prompt
 3185              		.align 2 
 3186              	
 3187              	//    PRESET	( -- )
 3188              	// 	Reset data stack pointer and the terminal input buffer.
 3189              	
 3190 1774 38170000 		.word	_EVAL-MAPOFFSET
 3191 1778 06       	_PRESE:	.byte  6
 3192 1779 50524553 		.ascii "PRESET"
 3192      4554
 3193 177f 00       		.align 2 	
 3194              	PRESE:
 3195 1780 42F804ED 		_NEST
 3196 1784 44F60071 		MOVW	R1,#0x4F00		//  init SP
 3197 1788 C2F20001 	 	MOVT	R1,#0X2000
 3198 178c 40F20000 		MOVW	R0,#0			//  init TOS ???
 3199 1790 52F804FB 		_UNNEST
 3200              		.align 2 
 3201              	
 3202              	//    QUIT	( -- )
ARM GAS  stm32eforth.s 			page 60


 3203              	// 	Reset return stack pointer and start text interpreter.
 3204              	
 3205 1794 78170000 		.word	_PRESE-MAPOFFSET
 3206 1798 04       	_QUIT:	.byte  4
 3207 1799 51554954 		.ascii "QUIT"
 3208 179d 0000BF   		.align 2 	
 3209              	QUIT:
 3210 17a0 42F804ED 		_NEST
 3211 17a4 44F68072 		MOVW	R2,#0x4F80  /* RESET RSTACK */
 3212 17a8 C2F20002 	 	MOVT	R2,#0x2000
 3213              	QUIT1:
 3214 17ac FFF784FF 	  BL	LBRAC			// start interpretation
 3215              	QUIT2:
 3216 17b0 FFF702FF 	  BL	QUERY			// get input
 3217 17b4 FFF7C4FF 		BL	EVAL
 3218 17b8 FEF738FD 		BL	BRAN
 3219 17bc B0170000 		.word	QUIT2-MAPOFFSET	// continue till error
 3220              	
 3221              	/***************************
 3222              	//  Flash memory interface
 3223              	***************************/
 3224              	UNLOCK:	//  unlock flash memory	
 3225 17c0 DFF84C0A 		ldr	r0, =FLASH_BASE_ADR
 3226 17c4 DFF84C4A 		ldr	r4, =FLASH_KEY1
 3227 17c8 4460     		str	r4, [r0, #FLASH_KEYR]
 3228 17ca DFF84C4A 		ldr	r4, =FLASH_KEY2
 3229 17ce 4460     		str	r4, [r0, #FLASH_KEYR]
 3230              		/* unlock option registers */
 3231 17d0 DFF8404A 		ldr	r4, =FLASH_KEY1
 3232 17d4 8460     		str	r4, [r0, #FLASH_OPTKEYR]
 3233 17d6 DFF8404A 		ldr	r4, =FLASH_KEY2
 3234 17da 8460     		str	r4, [r0, #FLASH_OPTKEYR]
 3235 17dc 7047     		_NEXT
 3236 17de 00BF     		.align 2 
 3237              	WAIT_BSY:
 3238 17e0 DFF82C0A 		ldr	r0,=FLASH_BASE_ADR
 3239              	WAIT1:
 3240 17e4 C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 3241 17e6 14F00104 		ands	r4, #0x1	//  BSY
 3242 17ea FBD1     		bne	WAIT1
 3243 17ec 7047     		_NEXT
 3244 17ee 00BF     		.align 2 
 3245              	
 3246              	//    ERASE_SECTOR	   ( sector -- )
 3247              	// 	  Erase one sector of flash memory.  Sector=0 to 11
 3248              	
 3249 17f0 98170000 		.word	_QUIT-MAPOFFSET
 3250 17f4 0C       	_ESECT:	.byte  12
 3251 17f5 45524153 		.ascii "ERASE_SECTOR"
 3251      455F5345 
 3251      43544F52 
 3252 1801 0000BF   		.align 2 	
 3253              	
 3254              	ESECT: 	//  sector --
 3255 1804 42F804ED 		_NEST
 3256 1808 FFF7EAFF 		bl	WAIT_BSY
 3257 180c 0469     		ldr	r4,[r0, #FLASH_CR]	
ARM GAS  stm32eforth.s 			page 61


 3258 180e 24F07804 		bic	r4,r4,#0x78	//  clear SNB
 3259 1812 4FEAC505 		lsl	R5,R5,#3		//  align sector #
 3260 1816 44EA0504 		orr	r4,r4,r5		//  put in sector #
 3261 181a 44F48034 		orr	R4,R4,#0x10000	//  set STRT bit
 3262 181e 44F40074 		orr	R4,R4,#0x200	//  PSIZE=32
 3263 1822 44F00204 		orr	R4,R4,#2		//  set SER bit, enable erase
 3264 1826 0461     		str	r4,[r0, #0x10]	//  start erasing
 3265              	// 	bl	WAIT_BSY
 3266 1828 51F8045B 		_POP
 3267 182c 52F804FB 		_UNNEST
 3268              		.align 2 
 3269              	//    I!	   ( data address -- )
 3270              	// 	   Write one word into flash memory
 3271              	
 3272 1830 F4170000 		.word	_ESECT-MAPOFFSET
 3273 1834 02       	_ISTOR:	.byte  2
 3274 1835 4921     		.ascii "I!"
 3275 1837 00       		.align 2 	
 3276              	
 3277              	ISTOR:	//  data address --
 3278 1838 42F804ED 		_NEST
 3279 183c FFF7D0FF 		bl	WAIT_BSY
 3280 1840 0469     		ldr	r4, [r0, #0x10]	//  FLASH_CR
 3281 1842 44F00104 		orr	r4,R4,#0x1		//  PG
 3282 1846 0461     		str	r4, [r0, #0x10]	//  enable programming
 3283 1848 FEF702FD 		bl	STORE
 3284 184c FFF7C8FF 		bl	WAIT_BSY
 3285 1850 0469     		ldr	r4, [r0, #0x10]	//  FLASH_CR
 3286 1852 24F00104 		bic	r4,R4,#0x1		//  PG
 3287 1856 0461     		str	r4, [r0, #0x10]	//  disable programming
 3288 1858 52F804FB 		_UNNEST
 3289              		.align 2 
 3290              		
 3291              	
 3292              	//    TURNKEY	( -- )
 3293              	// 	Copy dictionary from RAM to flash.
 3294              	
 3295 185c 34180000 		.word	_ISTOR-MAPOFFSET
 3296 1860 07       	_TURN:	.byte   7
 3297 1861 5455524E 		.ascii "TURNKEY"
 3297      4B4559
 3298              		.align 2 
 3299 1868 42F804ED 	TURN:	_NEST
 3300 186c FEF7ACFC 		_DOLIT			//  save user area
 3301 1870 00FF0000 		.word	0XFF00
 3302 1874 FEF7A8FC 		_DOLIT
 3303 1878 C0000000 		.word	0xC0			//  to boot array
 3304 187c FEF7A4FC 		_DOLIT
 3305 1880 40000000 		.word	0x40
 3306 1884 FFF718F9 		BL	MOVE
 3307 1888 FEF79EFC 		_DOLIT
 3308 188c 00000000 		.word	0
 3309 1890 FEF79AFC 		_DOLIT
 3310 1894 00000008 		.word	0x8000000
 3311 1898 FEF782FF 		BL	CPP
 3312 189c FEF7E2FC 		BL	AT
 3313 18a0 FEF706FE 		BL	CELLSL
ARM GAS  stm32eforth.s 			page 62


 3314 18a4 FEF706FD 		BL	TOR
 3315              	TURN1:
 3316 18a8 FEF734FD 		BL	OVER
 3317 18ac FEF7DAFC 		BL	AT
 3318 18b0 FEF730FD 		BL	OVER
 3319 18b4 FFF7C0FF 		BL	ISTOR
 3320 18b8 FEF722FD 		BL	SWAP
 3321 18bc FEF7D0FD 		BL	CELLP
 3322 18c0 FEF71EFD 		BL	SWAP
 3323 18c4 FEF7CCFD 		BL	CELLP
 3324 18c8 FEF794FC 		BL	DONXT
 3325 18cc A8180000 		.word	TURN1-MAPOFFSET
 3326 18d0 FEF71EFE 		BL	DDROP
 3327 18d4 52F804FB 		_UNNEST
 3328              		.align 2 
 3329              	
 3330              	// **************************************************************************
 3331              	//  The compiler
 3332              	
 3333              	//    '	   ( -- ca )
 3334              	// 	Search context vocabularies for the next word in input stream.
 3335              	
 3336 18d8 60180000 		.word	_TURN-MAPOFFSET
 3337 18dc 01       	_TICK:	.byte  1
 3338 18dd 27       		.ascii "'"
 3339 18de 00BF     		.align 2 	
 3340              	TICK:
 3341 18e0 42F804ED 		_NEST
 3342 18e4 FFF7FCFC 		BL	TOKEN
 3343 18e8 FFF7C0FD 		BL	NAMEQ	// ?defined
 3344 18ec FEF792FC 		BL	QBRAN
 3345 18f0 F8180000 		.word	TICK1-MAPOFFSET
 3346 18f4 52F804FB 		_UNNEST	// yes, push code address
 3347 18f8 FFF77EBE 	TICK1:	B.W	ABORT	// no, error
 3348              	
 3349              	//    ALLOT	( n -- )
 3350              	// 	Allocate n bytes to the ram area.
 3351              	
 3352 18fc DC180000 		.word	_TICK-MAPOFFSET
 3353 1900 05       	_ALLOT:	.byte  5
 3354 1901 414C4C4F 		.ascii "ALLOT"
 3354      54
 3355 1906 00BF     		.align 2 	
 3356              	ALLOT:
 3357 1908 42F804ED 		_NEST
 3358 190c FEF748FF 		BL	CPP
 3359 1910 FEF782FE 		BL	PSTOR
 3360 1914 52F804FB 		_UNNEST			// adjust code pointer
 3361              		.align 2 
 3362              	//    ,	   ( w -- )
 3363              	// 	Compile an integer into the code dictionary.
 3364              	
 3365 1918 00190000 		.word	_ALLOT-MAPOFFSET
 3366 191c 012C     	_COMMA:	.byte  1,','
 3367 191e 00BF     		.align 2 	
 3368              	COMMA:
 3369 1920 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 63


 3370 1924 FFF778F8 		BL	HERE
 3371 1928 FEF7E0FC 		BL	DUPP
 3372 192c FEF798FD 		BL	CELLP	// cell boundary
 3373 1930 FEF736FF 		BL	CPP
 3374 1934 FEF78CFC 		BL	STORE
 3375 1938 FEF78AFC 		BL	STORE
 3376 193c 52F804FB 		_UNNEST	// adjust code pointer, compile
 3377              		.align 2 
 3378              	//    [COMPILE]   ( -- //  string> )
 3379              	// 	Compile the next immediate word into code dictionary.
 3380              	
 3381 1940 1C190000 		.word	_COMMA-MAPOFFSET
 3382 1944 89       	_BCOMP:	.byte  IMEDD+9
 3383 1945 5B434F4D 		.ascii "[COMPILE]"
 3383      50494C45 
 3383      5D
 3384 194e 00BF     		.align 2 	
 3385              	BCOMP:
 3386 1950 42F804ED 		_NEST
 3387 1954 FFF7C4FF 		BL	TICK
 3388 1958 FFF7E2FF 		BL	COMMA
 3389 195c 52F804FB 		_UNNEST
 3390              		.align 2 
 3391              	//    COMPILE	( -- )
 3392              	// 	Compile the next address in colon list to code dictionary.
 3393              	
 3394 1960 44190000 		.word	_BCOMP-MAPOFFSET
 3395 1964 47       	_COMPI:	.byte  COMPO+7
 3396 1965 434F4D50 		.ascii "COMPILE"
 3396      494C45
 3397              		.align 2 	
 3398              	COMPI:
 3399 196c 42F804ED 		_NEST
 3400 1970 FEF78EFC 		BL	RFROM
 3401 1974 25F00105 		BIC	R5,R5,#1
 3402 1978 FEF7B8FC 		BL	DUPP
 3403 197c FEF772FC 		BL	AT
 3404 1980 00F0DAF9 		BL	CALLC			// compile BL instruction
 3405 1984 FEF76CFD 		BL	CELLP
 3406 1988 45F00105 		ORR	R5,R5,#1
 3407 198c FEF792FC 		BL	TOR
 3408 1990 52F804FB 		_UNNEST			// adjust return address
 3409              		.align 2 
 3410              	//    LITERAL	( w -- )
 3411              	// 	Compile tos to code dictionary as an integer literal.
 3412              	
 3413 1994 64190000 		.word	_COMPI-MAPOFFSET
 3414 1998 87       	_LITER:	.byte  IMEDD+7
 3415 1999 4C495445 		.ascii "LITERAL"
 3415      52414C
 3416              		.align 2 	
 3417              	LITER:
 3418 19a0 42F804ED 		_NEST
 3419 19a4 FFF7E2FF 		BL	COMPI
 3420 19a8 C8010000 		.word	DOLIT-MAPOFFSET
 3421 19ac FFF7B8FF 		BL	COMMA
 3422 19b0 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 64


 3423              		.align 2 
 3424              	//    $,"	( -- )
 3425              	// 	Compile a literal string up to next " .
 3426              	
 3427              	// 	.word	_LITER-MAPOFFSET
 3428              	// _STRCQ	.byte  3
 3429              	// 	.ascii "$$,"""
 3430              	// 	.align 2 	
 3431              	STRCQ:
 3432 19b4 42F804ED 		_NEST
 3433 19b8 FEF706FC 		_DOLIT
 3434 19bc FCFFFFFF 		.word	-4
 3435 19c0 FEF7EEFE 		BL	CPP
 3436 19c4 FEF728FE 		BL	PSTOR
 3437 19c8 FEF7FEFB 		_DOLIT
 3438 19cc 22000000 		.word	'\"'
 3439 19d0 FFF774FC 		BL	WORDD			// moveDCB to code dictionary
 3440 19d4 FEF746FE 		BL	COUNT
 3441 19d8 FEF7F0FC 		BL	PLUS
 3442 19dc FEF7C0FF 		BL	ALGND			// calculate aligned end of string
 3443 19e0 FEF7DEFE 		BL	CPP
 3444 19e4 FEF734FC 		BL	STORE
 3445 19e8 52F804FB 		_UNNEST 			// adjust the code pointer
 3446              		.align 2 
 3447              	// **************************************************************************
 3448              	//  Structures
 3449              	
 3450              	//    FOR	 ( -- a )
 3451              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3452              	
 3453 19ec 98190000 		.word	_LITER-MAPOFFSET
 3454 19f0 83       	_FOR:	.byte  IMEDD+3
 3455 19f1 464F52   		.ascii "FOR"
 3456              		.align 2 	
 3457              	FOR:
 3458 19f4 42F804ED 		_NEST
 3459 19f8 FFF7B8FF 		BL	COMPI
 3460 19fc B4020000 		.word	TOR-MAPOFFSET
 3461 1a00 FFF70AF8 		BL	HERE
 3462 1a04 52F804FB 		_UNNEST
 3463              		.align 2 
 3464              	//    BEGIN	( -- a )
 3465              	// 	Start an infinite or indefinite loop structure.
 3466              	
 3467 1a08 F0190000 		.word	_FOR-MAPOFFSET
 3468 1a0c 85       	_BEGIN:	.byte  IMEDD+5
 3469 1a0d 42454749 		.ascii "BEGIN"
 3469      4E
 3470 1a12 00BF     		.align 2 	
 3471              	BEGIN:
 3472 1a14 42F804ED 		_NEST
 3473 1a18 FEF7FEFF 		BL	HERE
 3474 1a1c 52F804FB 		_UNNEST
 3475              		.align 2 
 3476              	//    NEXT	( a -- )
 3477              	// 	Terminate a FOR-NEXT loop structure.
 3478              	
ARM GAS  stm32eforth.s 			page 65


 3479 1a20 0C1A0000 		.word	_BEGIN-MAPOFFSET
 3480 1a24 84       	_NEXT:	.byte  IMEDD+4
 3481 1a25 4E455854 		.ascii "NEXT"
 3482 1a29 0000BF   		.align 2 	
 3483              	NEXT:
 3484 1a2c 42F804ED 		_NEST
 3485 1a30 FFF79CFF 		BL	COMPI
 3486 1a34 F4010000 		.word	DONXT-MAPOFFSET
 3487 1a38 FFF772FF 		BL	COMMA
 3488 1a3c 52F804FB 		_UNNEST
 3489              		.align 2 
 3490              	//    UNTIL	( a -- )
 3491              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3492              	
 3493 1a40 241A0000 		.word	_NEXT-MAPOFFSET
 3494 1a44 85       	_UNTIL:	.byte  IMEDD+5
 3495 1a45 554E5449 		.ascii "UNTIL"
 3495      4C
 3496 1a4a 00BF     		.align 2 	
 3497              	UNTIL:
 3498 1a4c 42F804ED 		_NEST
 3499 1a50 FFF78CFF 		BL	COMPI
 3500 1a54 14020000 		.word	QBRAN-MAPOFFSET
 3501 1a58 FFF762FF 		BL	COMMA
 3502 1a5c 52F804FB 		_UNNEST
 3503              		.align 2 
 3504              	//    AGAIN	( a -- )
 3505              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3506              	
 3507 1a60 441A0000 		.word	_UNTIL-MAPOFFSET
 3508 1a64 85       	_AGAIN:	.byte  IMEDD+5
 3509 1a65 41474149 		.ascii "AGAIN"
 3509      4E
 3510 1a6a 00BF     		.align 2 	
 3511              	AGAIN:
 3512 1a6c 42F804ED 		_NEST
 3513 1a70 FFF77CFF 		BL	COMPI
 3514 1a74 2C020000 		.word	BRAN-MAPOFFSET
 3515 1a78 FFF752FF 		BL	COMMA
 3516 1a7c 52F804FB 		_UNNEST
 3517              		.align 2 
 3518              	//    IF	  ( -- A )
 3519              	// 	Begin a conditional branch structure.
 3520              	
 3521 1a80 641A0000 		.word	_AGAIN-MAPOFFSET
 3522 1a84 82       	_IFF:	.byte  IMEDD+2
 3523 1a85 4946     		.ascii "IF"
 3524 1a87 00       		.align 2 	
 3525              	IFF:
 3526 1a88 42F804ED 		_NEST
 3527 1a8c FFF76EFF 		BL	COMPI
 3528 1a90 14020000 		.word	QBRAN-MAPOFFSET
 3529 1a94 FEF7C0FF 		BL	HERE
 3530 1a98 FEF796FB 		_DOLIT
 3531 1a9c 04000000 		.word	4
 3532 1aa0 FEF77EFE 		BL	CPP
 3533 1aa4 FEF7B8FD 		BL	PSTOR
ARM GAS  stm32eforth.s 			page 66


 3534 1aa8 52F804FB 		_UNNEST
 3535              		.align 2 
 3536              	//    AHEAD	( -- A )
 3537              	// 	Compile a forward branch instruction.
 3538              	
 3539 1aac 841A0000 		.word	_IFF-MAPOFFSET
 3540 1ab0 85       	_AHEAD:	.byte  IMEDD+5
 3541 1ab1 41484541 		.ascii "AHEAD"
 3541      44
 3542 1ab6 00BF     		.align 2 	
 3543              	AHEAD:
 3544 1ab8 42F804ED 		_NEST
 3545 1abc FFF756FF 		BL	COMPI
 3546 1ac0 2C020000 		.word	BRAN-MAPOFFSET
 3547 1ac4 FEF7A8FF 		BL	HERE
 3548 1ac8 FEF77EFB 		_DOLIT
 3549 1acc 04000000 		.word	4
 3550 1ad0 FEF766FE 		BL	CPP
 3551 1ad4 FEF7A0FD 		BL	PSTOR
 3552 1ad8 52F804FB 		_UNNEST
 3553              		.align 2 
 3554              	//    REPEAT	( A a -- )
 3555              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3556              	
 3557 1adc B01A0000 		.word	_AHEAD-MAPOFFSET
 3558 1ae0 86       	_REPEA:	.byte  IMEDD+6
 3559 1ae1 52455045 		.ascii "REPEAT"
 3559      4154
 3560 1ae7 00       		.align 2 	
 3561              	REPEA:
 3562 1ae8 42F804ED 		_NEST
 3563 1aec FFF7BEFF 		BL	AGAIN
 3564 1af0 FEF792FF 		BL	HERE
 3565 1af4 FEF704FC 		BL	SWAP
 3566 1af8 FEF7AAFB 		BL	STORE
 3567 1afc 52F804FB 		_UNNEST
 3568              		.align 2 
 3569              	//    THEN	( A -- )
 3570              	// 	Terminate a conditional branch structure.
 3571              	
 3572 1b00 E01A0000 		.word	_REPEA-MAPOFFSET
 3573 1b04 84       	_THENN:	.byte  IMEDD+4
 3574 1b05 5448454E 		.ascii "THEN"
 3575 1b09 0000BF   		.align 2 	
 3576              	THENN:
 3577 1b0c 42F804ED 		_NEST
 3578 1b10 FEF782FF 		BL	HERE
 3579 1b14 FEF7F4FB 		BL	SWAP
 3580 1b18 FEF79AFB 		BL	STORE
 3581 1b1c 52F804FB 		_UNNEST
 3582              		.align 2 
 3583              	//    AFT	 ( a -- a A )
 3584              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3585              	
 3586 1b20 041B0000 		.word	_THENN-MAPOFFSET
 3587 1b24 83       	_AFT:	.byte  IMEDD+3
 3588 1b25 414654   		.ascii "AFT"
ARM GAS  stm32eforth.s 			page 67


 3589              		.align 2 	
 3590              	AFT:
 3591 1b28 42F804ED 		_NEST
 3592 1b2c FEF7D6FB 		BL	DROP
 3593 1b30 FFF7C2FF 		BL	AHEAD
 3594 1b34 FFF76EFF 		BL	BEGIN
 3595 1b38 FEF7E2FB 		BL	SWAP
 3596 1b3c 52F804FB 		_UNNEST
 3597              		.align 2 
 3598              	//    ELSE	( A -- A )
 3599              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3600              	
 3601 1b40 241B0000 		.word	_AFT-MAPOFFSET
 3602 1b44 84       	_ELSEE:	.byte  IMEDD+4
 3603 1b45 454C5345 		.ascii "ELSE"
 3604 1b49 0000BF   		.align 2 	
 3605              	ELSEE:
 3606 1b4c 42F804ED 		_NEST
 3607 1b50 FFF7B2FF 		BL	AHEAD
 3608 1b54 FEF7D4FB 		BL	SWAP
 3609 1b58 FFF7D8FF 		BL	THENN
 3610 1b5c 52F804FB 		_UNNEST
 3611              		.align 2 
 3612              	//    WHILE	( a -- A a )
 3613              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3614              	
 3615 1b60 441B0000 		.word	_ELSEE-MAPOFFSET
 3616 1b64 85       	_WHILE:	.byte  IMEDD+5
 3617 1b65 5748494C 		.ascii "WHILE"
 3617      45
 3618 1b6a 00BF     		.align 2 	
 3619              	WHILE:
 3620 1b6c 42F804ED 		_NEST
 3621 1b70 FFF78AFF 		BL	IFF
 3622 1b74 FEF7C4FB 		BL	SWAP
 3623 1b78 52F804FB 		_UNNEST
 3624              		.align 2 
 3625              	//    ABORT"	( -- //  string> )
 3626              	// 	Conditional abort with an error message.
 3627              	
 3628 1b7c 641B0000 		.word	_WHILE-MAPOFFSET
 3629 1b80 86       	_ABRTQ:	.byte  IMEDD+6
 3630 1b81 41424F52 		.ascii "ABORT\""
 3630      5422
 3631 1b87 00       		.align 2 	
 3632              	ABRTQ:
 3633 1b88 42F804ED 		_NEST
 3634 1b8c FFF7EEFE 		BL	COMPI
 3635 1b90 20160000 		.word	ABORQ-MAPOFFSET
 3636 1b94 FFF70EFF 		BL	STRCQ
 3637 1b98 52F804FB 		_UNNEST
 3638              		.align 2 
 3639              	//    $"	( -- //  string> )
 3640              	// 	Compile an inlineDCB literal.
 3641              	
 3642 1b9c 801B0000 		.word	_ABRTQ-MAPOFFSET
 3643 1ba0 82       	_STRQ:	.byte  IMEDD+2
ARM GAS  stm32eforth.s 			page 68


 3644 1ba1 2422     		.byte	'$','"'
 3645 1ba3 00       		.align 2 	
 3646              	STRQ:
 3647 1ba4 42F804ED 		_NEST
 3648 1ba8 FFF7E0FE 		BL	COMPI
 3649 1bac B80F0000 		.word	STRQP-MAPOFFSET
 3650 1bb0 FFF700FF 		BL	STRCQ
 3651 1bb4 52F804FB 		_UNNEST
 3652              		.align 2 
 3653              	//    ."	( -- //  string> )
 3654              	// 	Compile an inlineDCB literal to be typed out at run time.
 3655              	
 3656 1bb8 A01B0000 		.word	_STRQ-MAPOFFSET
 3657 1bbc 82       	_DOTQ:	.byte  IMEDD+2
 3658 1bbd 2E22     		.byte	'.','"'
 3659 1bbf 00       		.align 2 	
 3660              	DOTQ:
 3661 1bc0 42F804ED 		_NEST
 3662 1bc4 FFF7D2FE 		BL	COMPI
 3663 1bc8 D40F0000 		.word	DOTQP-MAPOFFSET
 3664 1bcc FFF7F2FE 		BL	STRCQ
 3665 1bd0 52F804FB 		_UNNEST
 3666              		.align 2 
 3667              	// **************************************************************************
 3668              	//  Name compiler
 3669              	
 3670              	//    ?UNIQUE	( a -- a )
 3671              	// 	Display a warning message if the word already exists.
 3672              	
 3673 1bd4 BC1B0000 		.word	_DOTQ-MAPOFFSET
 3674 1bd8 07       	_UNIQU:	.byte  7
 3675 1bd9 3F554E49 		.ascii "?UNIQUE"
 3675      515545
 3676              		.align 2 	
 3677              	UNIQU:
 3678 1be0 42F804ED 		_NEST
 3679 1be4 FEF782FB 		BL	DUPP
 3680 1be8 FFF740FC 		BL	NAMEQ			// ?name exists
 3681 1bec FEF712FB 		BL	QBRAN
 3682 1bf0 0C1C0000 		.word	UNIQ1-MAPOFFSET	// redefinitions are OK
 3683 1bf4 FFF7EEF9 		BL	DOTQP
 3684 1bf8 07       		.byte	7
 3685 1bf9 20726544 		.ascii " reDef "		// but warn the user
 3685      656620
 3686              		.align 2 	
 3687 1c00 FEF788FB 		BL	OVER
 3688 1c04 FEF72EFD 		BL	COUNT
 3689 1c08 FFF794F9 		BL	TYPEE			// just in case its not planned
 3690              	UNIQ1:
 3691 1c0c FEF766FB 		BL	DROP
 3692 1c10 52F804FB 		_UNNEST
 3693              		.align 2 
 3694              	//    $,n	 ( na -- )
 3695              	// 	Build a new dictionary name using the data at na.
 3696              	
 3697              	// 	.word	_UNIQU-MAPOFFSET
 3698              	// _SNAME	.byte  3
ARM GAS  stm32eforth.s 			page 69


 3699              	// 	.ascii "$$,n"
 3700              	// 	.align 2 	
 3701              	SNAME:
 3702 1c14 42F804ED 		_NEST
 3703 1c18 FEF768FB 		BL	DUPP			//  na na
 3704 1c1c FEF732FB 		BL	CAT			//  ?null input
 3705 1c20 FEF7F8FA 		BL	QBRAN
 3706 1c24 5C1C0000 		.word	SNAM1-MAPOFFSET
 3707 1c28 FFF7DAFF 		BL	UNIQU			//  na
 3708 1c2c FEF7D0FD 		BL	LAST			//  na last
 3709 1c30 FEF718FB 		BL	AT			//  na la
 3710 1c34 FFF774FE 		BL	COMMA			//  na
 3711 1c38 FEF758FB 		BL	DUPP			//  na na
 3712 1c3c FEF7C8FD 		BL	LAST			//  na na last
 3713 1c40 FEF706FB 		BL	STORE			//  na , save na for vocabulary link
 3714 1c44 FEF70EFD 		BL	COUNT			//  na+1 count
 3715 1c48 FEF7B8FB 		BL	PLUS			//  na+1+count
 3716 1c4c FEF788FE 		BL	ALGND			//  word boundary
 3717 1c50 FEF7A6FD 		BL	CPP
 3718 1c54 FEF7FCFA 		BL	STORE			//  top of dictionary now
 3719 1c58 52F804FB 		_UNNEST
 3720              	SNAM1:
 3721 1c5c FFF7ACF9 		BL	STRQP
 3722 1c60 07       		.byte	7
 3723 1c61 206E616D 		.ascii " name? "
 3723      653F20
 3724 1c68 FFF7C6BC 		B.W	ABORT
 3725              	
 3726              	//    $COMPILE	( a -- )
 3727              	// 	Compile next word to code dictionary as a token or literal.
 3728              	
 3729 1c6c D81B0000 		.word	_UNIQU-MAPOFFSET
 3730 1c70 08       	_SCOMP:	.byte  8
 3731 1c71 2424434F 		.ascii "$$COMPILE"
 3731      4D50494C 
 3731      45
 3732 1c7a 00BF     		.align 2 	
 3733              	SCOMP:
 3734 1c7c 42F804ED 		_NEST
 3735 1c80 FFF7F4FB 		BL	NAMEQ
 3736 1c84 FEF72EFC 		BL	QDUP	// defined?
 3737 1c88 FEF7C4FA 		BL	QBRAN
 3738 1c8c B81C0000 		.word	SCOM2-MAPOFFSET
 3739 1c90 FEF7E8FA 		BL	AT
 3740 1c94 FEF798FA 		_DOLIT
 3741 1c98 80000000 		.word	IMEDD
 3742 1c9c FEF74CFB 		BL	ANDD	// immediate?
 3743 1ca0 FEF7B8FA 		BL	QBRAN
 3744 1ca4 B01C0000 		.word	SCOM1-MAPOFFSET
 3745 1ca8 FEF79EFA 		BL	EXECU
 3746 1cac 52F804FB 		_UNNEST			// it's immediate, execute
 3747              	SCOM1:
 3748 1cb0 00F042F8 		BL	CALLC			// it's not immediate, compile
 3749 1cb4 52F804FB 		_UNNEST	
 3750              	SCOM2:
 3751 1cb8 FFF76AF8 		BL	NUMBQ
 3752 1cbc FEF7AAFA 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 70


 3753 1cc0 CC1C0000 		.word	SCOM3-MAPOFFSET
 3754 1cc4 FFF76CFE 		BL	LITER
 3755 1cc8 52F804FB 		_UNNEST			// compile number as integer
 3756              	SCOM3:
 3757 1ccc FFF794BC 		B.W	ABORT			// error
 3758              	
 3759              	//    OVERT	( -- )
 3760              	// 	Link a new word into the current vocabulary.
 3761              	
 3762 1cd0 701C0000 		.word	_SCOMP-MAPOFFSET
 3763 1cd4 05       	_OVERT:	.byte  5
 3764 1cd5 4F564552 		.ascii "OVERT"
 3764      54
 3765 1cda 00BF     		.align 2 	
 3766              	OVERT:
 3767 1cdc 42F804ED 		_NEST
 3768 1ce0 FEF776FD 		BL	LAST
 3769 1ce4 FEF7BEFA 		BL	AT
 3770 1ce8 FEF750FD 		BL	CNTXT
 3771 1cec FEF7B0FA 		BL	STORE
 3772 1cf0 52F804FB 		_UNNEST
 3773              		.align 2 
 3774              	
 3775              	//    ; 	   ( -- )
 3776              	// 	Terminate a colon definition.
 3777              	
 3778 1cf4 D41C0000 		.word	_OVERT-MAPOFFSET
 3779 1cf8 C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 3780 1cf9 2F2F20   		.ascii "// "
 3781              		.align 2 	
 3782              	SEMIS:
 3783 1cfc 42F804ED 		_NEST
 3784 1d00 FEF762FA 		_DOLIT
 3785 1d04 52F804FB 		_UNNEST
 3786 1d08 FFF70AFE 		BL	COMMA
 3787 1d0c FFF7D4FC 		BL	LBRAC
 3788 1d10 FFF7E4FF 		BL	OVERT
 3789 1d14 52F804FB 		_UNNEST
 3790              		.align 2 
 3791              	
 3792              	//    ]	   ( -- )
 3793              	// 	Start compiling the words in the input stream.
 3794              	
 3795 1d18 F81C0000 		.word	_SEMIS-MAPOFFSET
 3796 1d1c 01       	_RBRAC:	.byte  1
 3797 1d1d 5D       		.ascii "]"
 3798 1d1e 00BF     		.align 2 	
 3799              	RBRAC:
 3800 1d20 42F804ED 		_NEST
 3801 1d24 FEF750FA 		_DOLIT
 3802 1d28 7C1C0000 		.word	SCOMP-MAPOFFSET
 3803 1d2c FEF718FD 		BL	TEVAL
 3804 1d30 FEF78EFA 		BL	STORE
 3805 1d34 52F804FB 		_UNNEST
 3806              		.align 2 
 3807              	//    BL.W	( ca -- )
 3808              	// 	Assemble a branch-link long instruction to ca.
ARM GAS  stm32eforth.s 			page 71


 3809              	// 	BL.W is split into 2 16 bit instructions with 11 bit address fields.
 3810              	
 3811              	// 	.word	_RBRAC-MAPOFFSET
 3812              	// _CALLC	.byte  5
 3813              	// 	.ascii "call,"
 3814              	// 	.align 2 	
 3815              	CALLC:
 3816 1d38 42F804ED 		_NEST
 3817 1d3c 25F00105 		BIC	R5,R5,#1		//  clear b0 of address from R>
 3818 1d40 FEF76AFE 		BL	HERE
 3819 1d44 FEF742FB 		BL	SUBB
 3820 1d48 A5F10405 		SUB	R5,R5,#4		//  pc offset
 3821 1d4c 40F2FF70 		MOVW	R0,#0x7FF		//  11 bit mask
 3822 1d50 2C46     		MOV	R4,R5
 3823 1d52 4FEA1535 		LSR	R5,R5,#12		//  get bits 22-12
 3824 1d56 05EA0005 		AND	R5,R5,R0
 3825 1d5a 4FEAC434 		LSL	R4,R4,#15		//  get bits 11-1
 3826 1d5e 45EA0405 		ORR	R5,R5,R4
 3827 1d62 45F07845 		ORR	R5,R5,#0xF8000000
 3828 1d66 45F47045 		ORR	R5,R5,#0xF000
 3829 1d6a FFF7D9FD 		BL	COMMA			//  assemble BL.W instruction
 3830 1d6e 52F804FB 		_UNNEST
 3831 1d72 00BF     		.align 2 
 3832              	
 3833              	// 	:	( -- //  string> )
 3834              	// 	Start a new colon definition using next word as its name.
 3835              	
 3836 1d74 1C1D0000 		.word	_RBRAC-MAPOFFSET
 3837 1d78 01       	_COLON:	.byte  1
 3838 1d79 3A       		.ascii ":"
 3839 1d7a 00BF     		.align 2 	
 3840              	COLON:
 3841 1d7c 42F804ED 		_NEST
 3842 1d80 FFF7AEFA 		BL	TOKEN
 3843 1d84 FFF746FF 		BL	SNAME
 3844 1d88 FEF71EFA 		_DOLIT
 3845 1d8c 42F804ED 		_NEST
 3846 1d90 FFF7C6FD 		BL	COMMA
 3847 1d94 FFF7C4FF 		BL	RBRAC
 3848 1d98 52F804FB 		_UNNEST
 3849              		.align 2 
 3850              	//    IMMEDIATE   ( -- )
 3851              	// 	Make the last compiled word an immediate word.
 3852              	
 3853 1d9c 781D0000 		.word	_COLON-MAPOFFSET
 3854 1da0 09       	_IMMED:	.byte  9
 3855 1da1 494D4D45 		.ascii "IMMEDIATE"
 3855      44494154 
 3855      45
 3856 1daa 00BF     		.align 2 	
 3857              	IMMED:
 3858 1dac 42F804ED 		_NEST
 3859 1db0 FEF70AFA 		_DOLIT
 3860 1db4 80000000 		.word	IMEDD
 3861 1db8 FEF70AFD 		BL	LAST
 3862 1dbc FEF752FA 		BL	AT
 3863 1dc0 FEF750FA 		BL	AT
ARM GAS  stm32eforth.s 			page 72


 3864 1dc4 FEF7C2FA 		BL	ORR
 3865 1dc8 FEF702FD 		BL	LAST
 3866 1dcc FEF74AFA 		BL	AT
 3867 1dd0 FEF73EFA 		BL	STORE
 3868 1dd4 52F804FB 		_UNNEST
 3869              		.align 2 
 3870              	// **************************************************************************
 3871              	//  Defining words
 3872              	
 3873              	//    CONSTANT	( u -- //  string> )
 3874              	// 	Compile a new constant.
 3875              	
 3876 1dd8 A01D0000 		.word	_IMMED-MAPOFFSET
 3877 1ddc 08       	_CONST:	.byte  8
 3878 1ddd 434F4E53 		.ascii "CONSTANT"
 3878      54414E54 
 3879 1de5 0000BF   		.align 2 	
 3880              	CONST:
 3881 1de8 42F804ED 		_NEST
 3882 1dec FFF778FA 		BL	TOKEN
 3883 1df0 FFF710FF 		BL	SNAME
 3884 1df4 FFF772FF 		BL	OVERT
 3885 1df8 FEF7E6F9 		_DOLIT
 3886 1dfc 42F804ED 		_NEST
 3887 1e00 FFF78EFD 		BL	COMMA
 3888 1e04 FEF7E0F9 		_DOLIT
 3889 1e08 98060000 		.word	DOCON-MAPOFFSET
 3890 1e0c FFF794FF 		BL	CALLC
 3891 1e10 FFF786FD 		BL	COMMA
 3892 1e14 52F804FB 		_UNNEST
 3893              		.align 2 
 3894              	//    CREATE	( -- //  string> )
 3895              	// 	Compile a new array entry without allocating code space.
 3896              	
 3897 1e18 DC1D0000 		.word	_CONST-MAPOFFSET
 3898 1e1c 06       	_CREAT:	.byte  6
 3899 1e1d 43524541 		.ascii "CREATE"
 3899      5445
 3900 1e23 00       		.align 2 	
 3901              	CREAT:
 3902 1e24 42F804ED 		_NEST
 3903 1e28 FFF75AFA 		BL	TOKEN
 3904 1e2c FFF7F2FE 		BL	SNAME
 3905 1e30 FFF754FF 		BL	OVERT
 3906 1e34 FEF7C8F9 		_DOLIT
 3907 1e38 42F804ED 		_NEST
 3908 1e3c FFF770FD 		BL	COMMA
 3909 1e40 FEF7C2F9 		_DOLIT
 3910 1e44 8C060000 		.word	DOVAR-MAPOFFSET
 3911 1e48 FFF776FF 		BL	CALLC
 3912 1e4c 52F804FB 		_UNNEST
 3913              		.align 2 
 3914              	//    VARIABLE	( -- //  string> )
 3915              	// 	Compile a new variable initialized to 0.
 3916              	
 3917 1e50 1C1E0000 		.word	_CREAT-MAPOFFSET
 3918 1e54 08       	_VARIA:	.byte  8
ARM GAS  stm32eforth.s 			page 73


 3919 1e55 56415249 		.ascii "VARIABLE"
 3919      41424C45 
 3920 1e5d 0000BF   		.align 2 	
 3921              	VARIA:
 3922 1e60 42F804ED 		_NEST
 3923 1e64 FFF7DEFF 		BL	CREAT
 3924 1e68 FEF7AEF9 		_DOLIT
 3925 1e6c 00000000 		.word	0
 3926 1e70 FFF756FD 		BL	COMMA
 3927 1e74 52F804FB 		_UNNEST
 3928              		.align 2 
 3929              	// **************************************************************************
 3930              	//  Tools
 3931              	
 3932              	//    dm+	 ( a u -- a )
 3933              	// 	Dump u bytes from , leaving a+u on the stack.
 3934              	
 3935              	// 	.word	_VARIA-MAPOFFSET
 3936              	// _DMP	.byte  3
 3937              	// 	.ascii "dm+"
 3938              	// 	.align 2 	
 3939              	DMP:
 3940 1e78 42F804ED 		_NEST
 3941 1e7c FEF74AFA 		BL	OVER
 3942 1e80 FEF7A2F9 		_DOLIT
 3943 1e84 04000000 		.word	4
 3944 1e88 FFF7C6F8 		BL	UDOTR			// display address
 3945 1e8c FFF72AF8 		BL	SPACE
 3946 1e90 FEF710FA 		BL	TOR			// start count down loop
 3947 1e94 00F00CB8 		B.W	PDUM2			// skip first pass
 3948              	PDUM1:
 3949 1e98 FEF728FA 	  BL	DUPP
 3950 1e9c FEF7F2F9 		BL	CAT
 3951 1ea0 FEF792F9 		_DOLIT
 3952 1ea4 03000000 		.word	3
 3953 1ea8 FFF7B6F8 		BL	UDOTR			// display numeric data
 3954 1eac FEF7B6FA 		BL	ONEP			// increment address
 3955              	PDUM2:
 3956 1eb0 FEF7A0F9 	  BL	DONXT
 3957 1eb4 981E0000 		.word	PDUM1-MAPOFFSET	// loop till done
 3958 1eb8 52F804FB 		_UNNEST
 3959              		.align 2 
 3960              	//    DUMP	( a u -- )
 3961              	// 	Dump u bytes from a, in a formatted manner.
 3962              	
 3963 1ebc 541E0000 		.word	_VARIA-MAPOFFSET
 3964 1ec0 04       	_DUMP:	.byte  4
 3965 1ec1 44554D50 		.ascii "DUMP"
 3966 1ec5 0000BF   		.align 2 	
 3967              	DUMP:
 3968 1ec8 42F804ED 		_NEST
 3969 1ecc FEF714FC 		BL	BASE
 3970 1ed0 FEF7C8F9 		BL	AT
 3971 1ed4 FEF7EEF9 		BL	TOR
 3972 1ed8 FEF702FF 		BL	HEX			// save radix,set hex
 3973 1edc FEF774F9 		_DOLIT
 3974 1ee0 10000000 		.word	16
ARM GAS  stm32eforth.s 			page 74


 3975 1ee4 FEF70CFD 		BL	SLASH			// change count to lines
 3976 1ee8 FEF7E4F9 		BL	TOR
 3977 1eec 00F014B8 		B.W	DUMP4			// start count down loop
 3978              	DUMP1:
 3979 1ef0 FFF738F8 	  BL	CR
 3980 1ef4 FEF768F9 		_DOLIT
 3981 1ef8 10000000 		.word	16
 3982 1efc FEF714FB 		BL	DDUP
 3983 1f00 FFF7BAFF 		BL	DMP			// display numeric
 3984 1f04 FEF7F8FA 		BL	ROT
 3985 1f08 FEF7F6FA 		BL	ROT
 3986 1f0c FEF7EAFF 		BL	SPACE
 3987 1f10 FEF7E8FF 		BL	SPACE
 3988 1f14 FFF70EF8 		BL	TYPEE			// display printable characters
 3989              	DUMP4:
 3990 1f18 FEF76CF9 	  BL	DONXT
 3991 1f1c F01E0000 		.word	DUMP1-MAPOFFSET	// loop till done
 3992              	DUMP3:
 3993 1f20 FEF7DCF9 	  BL	DROP
 3994 1f24 FEF7B4F9 		BL	RFROM
 3995 1f28 FEF7E6FB 		BL	BASE
 3996 1f2c FEF790F9 		BL	STORE			// restore radix
 3997 1f30 52F804FB 		_UNNEST
 3998              		.align 2 
 3999              	//    .S	  ( ... -- ... )
 4000              	// 	Display the contents of the data stack.
 4001              	
 4002 1f34 C01E0000 		.word	_DUMP-MAPOFFSET
 4003              	_DOTS:
 4004 1f38 02       		.byte  2
 4005 1f39 2E53     		.ascii ".S"
 4006 1f3b 00       		.align 2 	
 4007              	DOTS:
 4008 1f3c 42F804ED 		_NEST
 4009 1f40 FEF7D0FF 		BL	SPACE
 4010 1f44 FEF740FD 		BL	DEPTH			// stack depth
 4011 1f48 FEF7B4F9 		BL	TOR			// start count down loop
 4012 1f4c 00F006B8 		B.W	DOTS2			// skip first pass
 4013              	DOTS1:
 4014 1f50 FEF7A8F9 	  BL	RAT
 4015 1f54 FEF74CFD 		BL	PICK
 4016 1f58 FFF78AF8 		BL	DOT			// index stack, display contents
 4017              	DOTS2:
 4018 1f5c FEF74AF9 	  BL	DONXT
 4019 1f60 501F0000 		.word	DOTS1-MAPOFFSET	// loop till done
 4020 1f64 FEF7BEFF 		BL	SPACE
 4021 1f68 52F804FB 		_UNNEST
 4022              		.align 2 
 4023              	//    >NAME	( ca -- na | F )
 4024              	// 	Convert code address to a name address.
 4025              	
 4026 1f6c 381F0000 		.word	_DOTS-MAPOFFSET
 4027 1f70 05       	_TNAME:	.byte  5
 4028 1f71 3E4E414D 		.ascii ">NAME"
 4028      45
 4029 1f76 00BF     		.align 2 	
 4030              	TNAME:
ARM GAS  stm32eforth.s 			page 75


 4031 1f78 42F804ED 		_NEST
 4032 1f7c FEF79AF9 		BL	TOR			//  
 4033 1f80 FEF704FC 		BL	CNTXT			//  va
 4034 1f84 FEF76EF9 		BL	AT			//  na
 4035              	TNAM1:
 4036 1f88 FEF7B0F9 		BL	DUPP			//  na na
 4037 1f8c FEF742F9 		BL	QBRAN
 4038 1f90 B81F0000 		.word	TNAM2-MAPOFFSET	//  vocabulary end, no match
 4039 1f94 FEF7AAF9 		BL	DUPP			//  na na
 4040 1f98 FFF7B0F9 		BL	NAMET			//  na ca
 4041 1f9c FEF782F9 		BL	RAT			//  na ca code
 4042 1fa0 FEF7DEF9 		BL	XORR			//  na f --
 4043 1fa4 FEF736F9 		BL	QBRAN
 4044 1fa8 B81F0000 		.word	TNAM2-MAPOFFSET
 4045 1fac FEF762FA 		BL	CELLM			//  la 
 4046 1fb0 FEF758F9 		BL	AT			//  next_na
 4047 1fb4 FFF7E8BF 		B.W	TNAM1
 4048              	TNAM2:	
 4049 1fb8 FEF76AF9 		BL	RFROM
 4050 1fbc FEF78EF9 		BL	DROP			//  0|na --
 4051 1fc0 52F804FB 		_UNNEST			// 0
 4052              		.align 2 
 4053              	//    .ID	 ( na -- )
 4054              	// 	Display the name at address.
 4055              	
 4056 1fc4 701F0000 		.word	_TNAME-MAPOFFSET
 4057 1fc8 03       	_DOTID:	.byte  3
 4058 1fc9 2E4944   		.ascii ".ID"
 4059              		.align 2 	
 4060              	DOTID:
 4061 1fcc 42F804ED 		_NEST
 4062 1fd0 FEF788FA 		BL	QDUP			// if zero no name
 4063 1fd4 FEF71EF9 		BL	QBRAN
 4064 1fd8 F41F0000 		.word	DOTI1-MAPOFFSET
 4065 1fdc FEF742FB 		BL	COUNT
 4066 1fe0 FEF7F2F8 		_DOLIT
 4067 1fe4 1F000000 		.word	0x1F
 4068 1fe8 FEF7A6F9 		BL	ANDD			// mask lexicon bits
 4069 1fec FEF7A2FF 		BL	TYPEE
 4070 1ff0 52F804FB 		_UNNEST			// display name string
 4071              	DOTI1:
 4072 1ff4 FEF7EEFF 	  BL	DOTQP
 4073 1ff8 09       		.byte	9
 4074 1ff9 207B6E6F 		.ascii " {noName}"
 4074      4E616D65 
 4074      7D
 4075 2002 00BF     		.align 2 	
 4076 2004 52F804FB 		_UNNEST
 4077              		.align 2 
 4078              	//    SEE	 ( -- //  string> )
 4079              	// 	A simple decompiler.
 4080              	
 4081 2008 C81F0000 		.word	_DOTID-MAPOFFSET
 4082 200c 03       	_SEE:	.byte  3
 4083 200d 534545   		.ascii "SEE"
 4084              		.align 2 	
 4085              	SEE:
ARM GAS  stm32eforth.s 			page 76


 4086 2010 42F804ED 		_NEST
 4087 2014 FFF764FC 		BL	TICK	//  ca --, starting address
 4088 2018 FEF7A4FF 		BL	CR	
 4089 201c FEF7D4F8 		_DOLIT
 4090 2020 14000000 		.word	20
 4091 2024 FEF746F9 		BL	TOR
 4092              	SEE1:
 4093 2028 FEF71AFA 		BL	CELLP			//  a
 4094 202c FEF75EF9 		BL	DUPP			//  a a
 4095 2030 00F010F8 		BL	DECOMP		//  a
 4096 2034 FEF7DEF8 		BL	DONXT
 4097 2038 28200000 		.word	SEE1-MAPOFFSET
 4098 203c FEF74EF9 		BL	DROP
 4099 2040 52F804FB 		_UNNEST
 4100              		.align 2 
 4101              	// 	DECOMPILE ( a -- )
 4102              	// 	Convert code in a.  Display name of command or as data.
 4103              	
 4104 2044 0C200000 		.word	_SEE-MAPOFFSET
 4105 2048 09       	_DECOM:	.byte  9
 4106 2049 4445434F 		.ascii "DECOMPILE"
 4106      4D50494C 
 4106      45
 4107 2052 00BF     		.align 2 
 4108              		
 4109              	DECOMP:	
 4110 2054 42F804ED 		_NEST
 4111 2058 FEF748F9 		BL	DUPP			//  a a
 4112              	// 	BL	TOR			//  a
 4113 205c FEF702F9 		BL	AT			//  a code
 4114 2060 FEF744F9 		BL	DUPP			//  a code code
 4115 2064 FEF7B0F8 		_DOLIT
 4116 2068 00F800F8 		.word	0xF800F800
 4117 206c FEF764F9 		BL	ANDD
 4118 2070 FEF7AAF8 		_DOLIT
 4119 2074 00F000F8 		.word	0xF800F000
 4120 2078 FEF78AFA 		BL	EQUAL			//  a code ?
 4121 207c FEF7CAF8 		BL	QBRAN
 4122 2080 D8200000 		.word	DECOM2-MAPOFFSET	//  not a command
 4123              		//  a valid_code --, extract address and display name
 4124 2084 40F6FE70 		MOVW	R0,#0xFFE
 4125 2088 2C46     		MOV	R4,R5
 4126 208a 4FEA4555 		LSL	R5,R5,#21		//  get bits 22-12
 4127 208e 4FEA6525 		ASR	R5,R5,#9		//  with sign extension
 4128 2092 4FEAD434 		LSR	R4,R4,#15		//  get bits 11-1
 4129 2096 04EA0004 		AND	R4,R4,R0		//  retain only bits 11-1
 4130 209a 45EA0405 		ORR	R5,R5,R4		//  get bits 22-1
 4131 209e 00BF     		NOP
 4132 20a0 FEF738F9 		BL	OVER			//  a offset a
 4133 20a4 FEF78AF9 		BL	PLUS			//  a target-4
 4134 20a8 FEF7DAF9 		BL	CELLP			//  a target
 4135 20ac FFF764FF 		BL	TNAME			//  a na/0 --, is it a name?
 4136 20b0 FEF718FA 		BL	QDUP			//  name address or zero
 4137 20b4 FEF7AEF8 		BL	QBRAN
 4138 20b8 CC200000 		.word	DECOM1-MAPOFFSET
 4139 20bc FEF712FF 		BL	SPACE			//  a na
 4140 20c0 FFF784FF 		BL	DOTID			//  a --, display name
ARM GAS  stm32eforth.s 			page 77


 4141              	// 	BL	RFROM			//  a
 4142 20c4 FEF70AF9 		BL	DROP
 4143 20c8 52F804FB 		_UNNEST
 4144              	DECOM1:	// BL	RFROM		//  a
 4145 20cc FEF7CAF8 		BL	AT			//  data
 4146 20d0 FEF7BCFF 		BL	UDOT			//  display data
 4147 20d4 52F804FB 		_UNNEST
 4148              	DECOM2:
 4149 20d8 FEF7B8FF 		BL	UDOT
 4150              	// 	BL	RFROM
 4151 20dc FEF7FEF8 		BL	DROP
 4152 20e0 52F804FB 		_UNNEST
 4153              		.align 2 
 4154              	//    WORDS	( -- )
 4155              	// 	Display the names in the context vocabulary.
 4156              	
 4157 20e4 48200000 		.word	_DECOM-MAPOFFSET
 4158 20e8 05       	_WORDS:	.byte  5
 4159 20e9 574F5244 		.ascii "WORDS"
 4159      53
 4160 20ee 00BF     		.align 2 	
 4161              	WORDS:
 4162 20f0 42F804ED 		_NEST
 4163 20f4 FEF736FF 		BL	CR
 4164 20f8 FEF748FB 		BL	CNTXT
 4165 20fc FEF7B2F8 		BL	AT			// only in context
 4166              	WORS1:
 4167 2100 FEF7F0F9 		BL	QDUP			// ?at end of list
 4168 2104 FEF786F8 		BL	QBRAN
 4169 2108 24210000 		.word	WORS2-MAPOFFSET
 4170 210c FEF7EEF8 		BL	DUPP
 4171 2110 FEF7E8FE 		BL	SPACE
 4172 2114 FFF75AFF 		BL	DOTID			// display a name
 4173 2118 FEF7ACF9 		BL	CELLM
 4174 211c FEF7A2F8 		BL	AT
 4175 2120 FFF7EEBF 		B.W	WORS1
 4176              	WORS2:
 4177 2124 52F804FB 		_UNNEST
 4178              		.align 2 
 4179              	
 4180              	// **************************************************************************
 4181              	//  cold start
 4182              	
 4183              	//    VER	 ( -- n )
 4184              	// 	Return the version number of this implementation.
 4185              	
 4186              	// 	.word	_WORDS-MAPOFFSET
 4187              	// _VERSN	.byte  3
 4188              	// 	.ascii "VER"
 4189              	// 	.align 2 	
 4190              	VERSN:
 4191 2128 42F804ED 		_NEST
 4192 212c FEF74CF8 		_DOLIT
 4193 2130 01010000 		.word	VER*256+EXT
 4194 2134 52F804FB 		_UNNEST
 4195              		.align 2 
 4196              	
ARM GAS  stm32eforth.s 			page 78


 4197              	//    hi	  ( -- )
 4198              	// 	Display the sign-on message of eForth.
 4199              	
 4200 2138 E8200000 		.word	_WORDS-MAPOFFSET
 4201 213c 02       	_HI:	.byte  2
 4202 213d 4849     		.ascii "HI"
 4203 213f 00       		.align 2 	
 4204              	HI:
 4205 2140 42F804ED 		_NEST
 4206 2144 FEF70EFF 		BL	CR	// initialize I/O
 4207 2148 FEF744FF 		BL	DOTQP
 4208 214c 17       		.byte	23
 4209 214d 626C7565 		.ascii "blue pill stm32eForth v"	// model
 4209      2070696C 
 4209      6C207374 
 4209      6D333265 
 4209      466F7274 
 4210              		.align 2
 4211 2164 FEF7C8FA 		BL	BASE
 4212 2168 FEF77CF8 		BL	AT
 4213 216c FEF7B8FD 		BL	HEX	// save radix
 4214 2170 FFF7DAFF 		BL	VERSN
 4215 2174 FEF72EFD 		BL	BDIGS
 4216 2178 FEF752FD 		BL	DIG
 4217 217c FEF750FD 		BL	DIG
 4218 2180 FEF722F8 		_DOLIT
 4219 2184 2E000000 		.word	'.'
 4220 2188 FEF734FD 		BL	HOLD
 4221 218c FEF758FD 		BL	DIGS
 4222 2190 FEF77EFD 		BL	EDIGS
 4223 2194 FEF7CEFE 		BL	TYPEE	// format version number
 4224 2198 FEF7AEFA 		BL	BASE
 4225 219c FEF758F8 		BL	STORE
 4226 21a0 FEF7E0FE 		BL	CR
 4227 21a4 52F804FB 		_UNNEST			// restore radix
 4228              		.align 2 
 4229              	
 4230              	//    COLD	( -- )
 4231              	// 	The high level cold start sequence.
 4232              	
 4233 21a8 3C210000 		.word	_HI-MAPOFFSET
 4234 21ac 04       	LASTN:	.byte  4
 4235 21ad 434F4C44 		.ascii "COLD"
 4236 21b1 0000BF   		.align 2 	
 4237              		.type COLD,%function 
 4238              	COLD:
 4239              	//  Initiate Forth registers
 4240 21b4 4FF00003 		MOV R3,#UPP&0xffff		//  user area 
 4241 21b8 C2F20003 	 	MOVT R3,#UPP>>16		  
 4242 21bc 03F59F42 		ADD R2,R3,#0x4f80	// Forth return stack
 4243 21c0 03F59E41 		ADD R1,R3,#0x4F00 // Forth data stack
 4244 21c4 4FF00005 		MOV R5,#0			//  tos
 4245 21c8 00BF     		NOP
 4246 21ca 42F804ED 		_NEST
 4247              	COLD1:
 4248 21ce FDF7FBFF 		_DOLIT 
 4249 21d2 00000000 		.word 0 
ARM GAS  stm32eforth.s 			page 79


 4250 21d6 FDF7B7FF 		BL ULED // turn off user LED 
 4251 21da FDF7F5FF 		_DOLIT
 4252 21de F4000000 		.word	UZERO-MAPOFFSET
 4253 21e2 FDF7F1FF 		_DOLIT
 4254 21e6 00000020 		.word	UPP
 4255 21ea FDF7EDFF 		_DOLIT
 4256 21ee 48000000 		.word	ULAST-UZERO
 4257 21f2 FEF761FC 		BL	MOVE 			// initialize user area
 4258 21f6 FFF7C3FA 		BL	PRESE			// initialize stack and TIB
 4259 21fa FEF771FA 		BL	TBOOT
 4260 21fe FEF733FC 		BL	ATEXE			// application boot
 4261 2202 FFF76BFD 		BL	OVERT
 4262 2206 FFF7CBBA 		B.W	QUIT			// start interpretation
 4263              	COLD2:	
 4264              	CTOP:
 4265 220a FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4266              	
 4267              	
 4268 220e 00000020 	  .end 
 4268      02402301 
 4268      6745AB89 
 4268      EFCD
ARM GAS  stm32eforth.s 			page 80


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
ARM GAS  stm32eforth.s 			page 81


board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32eforth.s:87     .bss:0000000000000000 system_vars
       stm32eforth.s:465    .text.reset_handler:000000000000013c ULAST
       stm32eforth.s:447    .text.reset_handler:00000000000000f4 UZERO
       stm32eforth.s:87     .bss:0000000000000004 ticks
       stm32eforth.s:127    .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:261    .text.reset_handler:0000000000000000 reset_handler
       stm32eforth.s:218    .text.default_handler:0000000000000000 default_handler
       stm32eforth.s:239    .text.default_handler:0000000000000040 systick_handler
       stm32eforth.s:216    .text.default_handler:0000000000000000 $t
       stm32eforth.s:562    .text.reset_handler:00000000000001c8 DOLIT
       stm32eforth.s:220    .text.default_handler:0000000000000004 $d
       stm32eforth.s:482    .text.reset_handler:0000000000000148 ULED
       stm32eforth.s:221    .text.default_handler:0000000000000008 $t
       stm32eforth.s:2373   .text.reset_handler:0000000000000f64 CR
       stm32eforth.s:2438   .text.reset_handler:0000000000000fd4 DOTQP
       stm32eforth.s:224    .text.default_handler:0000000000000014 $d
       stm32eforth.s:2140   .text.reset_handler:0000000000000ce0 HEX
       stm32eforth.s:973    .text.reset_handler:000000000000042c ONEM
       stm32eforth.s:2489   .text.reset_handler:000000000000104c UDOT
       stm32eforth.s:232    .text.default_handler:000000000000003c Infinite_Loop
       stm32eforth.s:248    .text.default_handler:0000000000000054 stk_exit
       stm32eforth.s:251    *ABS*:0000000040011000 LED_GPIO
       stm32eforth.s:252    *ABS*:000000000000000d LED_PIN
       stm32eforth.s:259    .text.reset_handler:0000000000000000 $t
       stm32eforth.s:267    .text.reset_handler:0000000000000010 zero_loop
       stm32eforth.s:277    .text.reset_handler:0000000000000024 init_devices
       stm32eforth.s:3224   .text.reset_handler:00000000000017c0 UNLOCK
       stm32eforth.s:4238   .text.reset_handler:00000000000021b4 COLD
       stm32eforth.s:292    .text.reset_handler:0000000000000042 wait_hserdy
       stm32eforth.s:312    .text.reset_handler:000000000000005c wait_pllrdy
       stm32eforth.s:325    .text.reset_handler:000000000000007c wait_sws
       stm32eforth.s:358    *ABS*:0000000040013800 UART
       stm32eforth.s:379    *ABS*:0000000000000001 VER
       stm32eforth.s:380    *ABS*:0000000000000001 EXT
       stm32eforth.s:386    *ABS*:0000000000000000 RAMOFFSET
       stm32eforth.s:387    *ABS*:0000000000000000 MAPOFFSET
       stm32eforth.s:389    *ABS*:0000000000000040 COMPO
       stm32eforth.s:390    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:391    *ABS*:00000000ffffff1f MASKK
       stm32eforth.s:393    *ABS*:0000000000000004 CELLL
       stm32eforth.s:394    *ABS*:0000000000000010 BASEE
       stm32eforth.s:395    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:397    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:398    *ABS*:000000000000000a LF
       stm32eforth.s:399    *ABS*:000000000000000d CRR
       stm32eforth.s:400    *ABS*:000000000000001b ERR
       stm32eforth.s:401    *ABS*:0000000000000027 TIC
ARM GAS  stm32eforth.s 			page 82


       stm32eforth.s:417    *ABS*:0000000020004f00 SPP
       stm32eforth.s:418    *ABS*:0000000020004f00 TIBB
       stm32eforth.s:419    *ABS*:0000000020004f80 RPP
       stm32eforth.s:420    *ABS*:0000000020000000 UPP
       stm32eforth.s:421    *ABS*:0000000020000100 DTOP
       stm32eforth.s:422    *ABS*:0000000020004e00 DEND
       stm32eforth.s:431    *ABS*:0000000000000004 TICKS_OFS
       stm32eforth.s:432    *ABS*:0000000000000008 TIMER_OFS
       stm32eforth.s:433    *ABS*:000000000000000c BOOT_OFS
       stm32eforth.s:434    *ABS*:0000000000000010 BASE_OFS
       stm32eforth.s:435    *ABS*:0000000000000014 TMP_OFS
       stm32eforth.s:436    *ABS*:0000000000000018 SPAN_OFS
       stm32eforth.s:437    *ABS*:000000000000001c TOIN_OFS
       stm32eforth.s:438    *ABS*:0000000000000020 NTIB_OFS
       stm32eforth.s:439    *ABS*:0000000000000024 TIB_OFS
       stm32eforth.s:440    *ABS*:0000000000000028 EVAL_OFS
       stm32eforth.s:441    *ABS*:000000000000002c HLD_OFS
       stm32eforth.s:442    *ABS*:0000000000000030 CTXT_OFS
       stm32eforth.s:443    *ABS*:0000000000000034 FLSH_CTOP_OFS
       stm32eforth.s:444    *ABS*:0000000000000038 RAM_CTOP_OFS
       stm32eforth.s:445    *ABS*:000000000000003c LASTN_OFS
       stm32eforth.s:448    .text.reset_handler:00000000000000f4 $d
       stm32eforth.s:4204   .text.reset_handler:0000000000002140 HI
       stm32eforth.s:3082   .text.reset_handler:000000000000165c INTER
       stm32eforth.s:4234   .text.reset_handler:00000000000021ac LASTN
       stm32eforth.s:4264   .text.reset_handler:000000000000220a CTOP
       stm32eforth.s:477    .text.reset_handler:000000000000013c $d
       stm32eforth.s:478    .text.reset_handler:0000000000000140 _ULED
       stm32eforth.s:491    .text.reset_handler:0000000000000160 ULED_OFF
       stm32eforth.s:497    .text.reset_handler:0000000000000164 $d
       stm32eforth.s:498    .text.reset_handler:0000000000000168 _QRX
       stm32eforth.s:501    .text.reset_handler:0000000000000170 QKEY
       stm32eforth.s:502    .text.reset_handler:0000000000000170 QRX
       stm32eforth.s:513    .text.reset_handler:0000000000000190 QRX1
       stm32eforth.s:522    .text.reset_handler:0000000000000198 $d
       stm32eforth.s:523    .text.reset_handler:000000000000019c _TXSTO
       stm32eforth.s:526    .text.reset_handler:00000000000001a4 TXSTO
       stm32eforth.s:527    .text.reset_handler:00000000000001a4 EMIT
       stm32eforth.s:528    .text.reset_handler:00000000000001a4 TECHO
       stm32eforth.s:531    .text.reset_handler:00000000000001ac TX1
       stm32eforth.s:547    .text.reset_handler:00000000000001bc $d
       stm32eforth.s:548    .text.reset_handler:00000000000001c0 _NOP
       stm32eforth.s:550    .text.reset_handler:00000000000001c4 $t
       stm32eforth.s:551    .text.reset_handler:00000000000001c4 NOP
       stm32eforth.s:573    .text.reset_handler:00000000000001dc $d
       stm32eforth.s:574    .text.reset_handler:00000000000001e0 _EXECU
       stm32eforth.s:576    .text.reset_handler:00000000000001e8 $t
       stm32eforth.s:577    .text.reset_handler:00000000000001e8 EXECU
       stm32eforth.s:592    .text.reset_handler:00000000000001f4 DONXT
       stm32eforth.s:599    .text.reset_handler:0000000000000204 NEXT1
       stm32eforth.s:613    .text.reset_handler:0000000000000214 QBRAN
       stm32eforth.s:620    .text.reset_handler:0000000000000226 QBRAN1
       stm32eforth.s:632    .text.reset_handler:000000000000022c BRAN
       stm32eforth.s:641    .text.reset_handler:0000000000000238 $d
       stm32eforth.s:642    .text.reset_handler:000000000000023c _EXIT
       stm32eforth.s:645    .text.reset_handler:0000000000000244 EXIT
       stm32eforth.s:651    .text.reset_handler:0000000000000248 $d
ARM GAS  stm32eforth.s 			page 83


       stm32eforth.s:652    .text.reset_handler:000000000000024c _STORE
       stm32eforth.s:654    .text.reset_handler:000000000000024e $t
       stm32eforth.s:655    .text.reset_handler:0000000000000250 STORE
       stm32eforth.s:664    .text.reset_handler:000000000000025c $d
       stm32eforth.s:665    .text.reset_handler:0000000000000260 _AT
       stm32eforth.s:667    .text.reset_handler:0000000000000262 $t
       stm32eforth.s:668    .text.reset_handler:0000000000000264 AT
       stm32eforth.s:675    .text.reset_handler:0000000000000268 $d
       stm32eforth.s:676    .text.reset_handler:000000000000026c _CSTOR
       stm32eforth.s:679    .text.reset_handler:0000000000000270 CSTOR
       stm32eforth.s:688    .text.reset_handler:000000000000027c $d
       stm32eforth.s:689    .text.reset_handler:0000000000000280 _CAT
       stm32eforth.s:692    .text.reset_handler:0000000000000284 CAT
       stm32eforth.s:699    .text.reset_handler:0000000000000288 $d
       stm32eforth.s:700    .text.reset_handler:000000000000028c _RFROM
       stm32eforth.s:703    .text.reset_handler:0000000000000290 RFROM
       stm32eforth.s:712    .text.reset_handler:000000000000029c $d
       stm32eforth.s:713    .text.reset_handler:00000000000002a0 _RAT
       stm32eforth.s:716    .text.reset_handler:00000000000002a4 RAT
       stm32eforth.s:724    .text.reset_handler:00000000000002ac $d
       stm32eforth.s:725    .text.reset_handler:00000000000002b0 _TOR
       stm32eforth.s:728    .text.reset_handler:00000000000002b4 TOR
       stm32eforth.s:737    .text.reset_handler:00000000000002c0 $d
       stm32eforth.s:738    .text.reset_handler:00000000000002c4 _SPAT
       stm32eforth.s:740    .text.reset_handler:00000000000002c8 $t
       stm32eforth.s:741    .text.reset_handler:00000000000002c8 SPAT
       stm32eforth.s:749    .text.reset_handler:00000000000002d0 $d
       stm32eforth.s:750    .text.reset_handler:00000000000002d4 _DROP
       stm32eforth.s:753    .text.reset_handler:00000000000002dc DROP
       stm32eforth.s:761    .text.reset_handler:00000000000002e4 $d
       stm32eforth.s:762    .text.reset_handler:00000000000002e8 _DUPP
       stm32eforth.s:764    .text.reset_handler:00000000000002ec $t
       stm32eforth.s:765    .text.reset_handler:00000000000002ec DUPP
       stm32eforth.s:773    .text.reset_handler:00000000000002f4 $d
       stm32eforth.s:774    .text.reset_handler:00000000000002f8 _SWAP
       stm32eforth.s:777    .text.reset_handler:0000000000000300 SWAP
       stm32eforth.s:786    .text.reset_handler:0000000000000308 $d
       stm32eforth.s:787    .text.reset_handler:000000000000030c _OVER
       stm32eforth.s:790    .text.reset_handler:0000000000000314 OVER
       stm32eforth.s:798    .text.reset_handler:000000000000031c $d
       stm32eforth.s:799    .text.reset_handler:0000000000000320 _ZLESS
       stm32eforth.s:802    .text.reset_handler:0000000000000324 ZLESS
       stm32eforth.s:811    .text.reset_handler:0000000000000330 $d
       stm32eforth.s:812    .text.reset_handler:0000000000000334 _ANDD
       stm32eforth.s:814    .text.reset_handler:0000000000000338 $t
       stm32eforth.s:815    .text.reset_handler:0000000000000338 ANDD
       stm32eforth.s:824    .text.reset_handler:0000000000000344 $d
       stm32eforth.s:825    .text.reset_handler:0000000000000348 _ORR
       stm32eforth.s:828    .text.reset_handler:000000000000034c ORR
       stm32eforth.s:837    .text.reset_handler:0000000000000358 $d
       stm32eforth.s:838    .text.reset_handler:000000000000035c _XORR
       stm32eforth.s:840    .text.reset_handler:0000000000000360 $t
       stm32eforth.s:841    .text.reset_handler:0000000000000360 XORR
       stm32eforth.s:850    .text.reset_handler:000000000000036c $d
       stm32eforth.s:851    .text.reset_handler:0000000000000370 _UPLUS
       stm32eforth.s:853    .text.reset_handler:0000000000000374 $t
       stm32eforth.s:854    .text.reset_handler:0000000000000374 UPLUS
ARM GAS  stm32eforth.s 			page 84


       stm32eforth.s:865    .text.reset_handler:0000000000000384 $d
       stm32eforth.s:866    .text.reset_handler:0000000000000388 _RSHIFT
       stm32eforth.s:869    .text.reset_handler:0000000000000390 RSHIFT
       stm32eforth.s:878    .text.reset_handler:000000000000039c $d
       stm32eforth.s:879    .text.reset_handler:00000000000003a0 _LSHIFT
       stm32eforth.s:882    .text.reset_handler:00000000000003a8 LSHIFT
       stm32eforth.s:891    .text.reset_handler:00000000000003b4 $d
       stm32eforth.s:892    .text.reset_handler:00000000000003b8 _PLUS
       stm32eforth.s:894    .text.reset_handler:00000000000003ba $t
       stm32eforth.s:895    .text.reset_handler:00000000000003bc PLUS
       stm32eforth.s:903    .text.reset_handler:00000000000003c4 $d
       stm32eforth.s:904    .text.reset_handler:00000000000003c8 _SUBB
       stm32eforth.s:906    .text.reset_handler:00000000000003ca $t
       stm32eforth.s:907    .text.reset_handler:00000000000003cc SUBB
       stm32eforth.s:916    .text.reset_handler:00000000000003d8 $d
       stm32eforth.s:917    .text.reset_handler:00000000000003dc _STAR
       stm32eforth.s:919    .text.reset_handler:00000000000003de $t
       stm32eforth.s:920    .text.reset_handler:00000000000003e0 STAR
       stm32eforth.s:929    .text.reset_handler:00000000000003ec $d
       stm32eforth.s:930    .text.reset_handler:00000000000003f0 _UMSTA
       stm32eforth.s:932    .text.reset_handler:00000000000003f4 $t
       stm32eforth.s:933    .text.reset_handler:00000000000003f4 UMSTA
       stm32eforth.s:943    .text.reset_handler:0000000000000400 $d
       stm32eforth.s:944    .text.reset_handler:0000000000000404 _MSTAR
       stm32eforth.s:947    .text.reset_handler:0000000000000408 MSTAR
       stm32eforth.s:957    .text.reset_handler:0000000000000414 $d
       stm32eforth.s:958    .text.reset_handler:0000000000000418 _ONEP
       stm32eforth.s:961    .text.reset_handler:000000000000041c ONEP
       stm32eforth.s:969    .text.reset_handler:0000000000000424 $d
       stm32eforth.s:970    .text.reset_handler:0000000000000428 _ONEM
       stm32eforth.s:981    .text.reset_handler:0000000000000434 $d
       stm32eforth.s:982    .text.reset_handler:0000000000000438 _TWOP
       stm32eforth.s:985    .text.reset_handler:000000000000043c TWOP
       stm32eforth.s:993    .text.reset_handler:0000000000000444 $d
       stm32eforth.s:994    .text.reset_handler:0000000000000448 _TWOM
       stm32eforth.s:997    .text.reset_handler:000000000000044c TWOM
       stm32eforth.s:1005   .text.reset_handler:0000000000000454 $d
       stm32eforth.s:1006   .text.reset_handler:0000000000000458 _CELLP
       stm32eforth.s:1008   .text.reset_handler:000000000000045e $t
       stm32eforth.s:1009   .text.reset_handler:0000000000000460 CELLP
       stm32eforth.s:1017   .text.reset_handler:0000000000000468 $d
       stm32eforth.s:1018   .text.reset_handler:000000000000046c _CELLM
       stm32eforth.s:1020   .text.reset_handler:0000000000000472 $t
       stm32eforth.s:1021   .text.reset_handler:0000000000000474 CELLM
       stm32eforth.s:1029   .text.reset_handler:000000000000047c $d
       stm32eforth.s:1030   .text.reset_handler:0000000000000480 _BLANK
       stm32eforth.s:1033   .text.reset_handler:0000000000000484 BLANK
       stm32eforth.s:1042   .text.reset_handler:0000000000000490 $d
       stm32eforth.s:1043   .text.reset_handler:0000000000000494 _CELLS
       stm32eforth.s:1045   .text.reset_handler:000000000000049a $t
       stm32eforth.s:1046   .text.reset_handler:000000000000049c CELLS
       stm32eforth.s:1054   .text.reset_handler:00000000000004a4 $d
       stm32eforth.s:1055   .text.reset_handler:00000000000004a8 _CELLSL
       stm32eforth.s:1057   .text.reset_handler:00000000000004ae $t
       stm32eforth.s:1058   .text.reset_handler:00000000000004b0 CELLSL
       stm32eforth.s:1066   .text.reset_handler:00000000000004b8 $d
       stm32eforth.s:1067   .text.reset_handler:00000000000004bc _TWOST
ARM GAS  stm32eforth.s 			page 85


       stm32eforth.s:1070   .text.reset_handler:00000000000004c0 TWOST
       stm32eforth.s:1078   .text.reset_handler:00000000000004c8 $d
       stm32eforth.s:1079   .text.reset_handler:00000000000004cc _TWOSL
       stm32eforth.s:1082   .text.reset_handler:00000000000004d0 TWOSL
       stm32eforth.s:1090   .text.reset_handler:00000000000004d8 $d
       stm32eforth.s:1091   .text.reset_handler:00000000000004dc _QDUP
       stm32eforth.s:1094   .text.reset_handler:00000000000004e4 QDUP
       stm32eforth.s:1104   .text.reset_handler:00000000000004f0 $d
       stm32eforth.s:1105   .text.reset_handler:00000000000004f4 _ROT
       stm32eforth.s:1107   .text.reset_handler:00000000000004f8 $t
       stm32eforth.s:1108   .text.reset_handler:00000000000004f8 ROT
       stm32eforth.s:1119   .text.reset_handler:0000000000000504 $d
       stm32eforth.s:1120   .text.reset_handler:0000000000000508 _DDROP
       stm32eforth.s:1122   .text.reset_handler:000000000000050e $t
       stm32eforth.s:1123   .text.reset_handler:0000000000000510 DDROP
       stm32eforth.s:1132   .text.reset_handler:000000000000051c $d
       stm32eforth.s:1133   .text.reset_handler:0000000000000520 _DDUP
       stm32eforth.s:1136   .text.reset_handler:0000000000000528 DDUP
       stm32eforth.s:1145   .text.reset_handler:0000000000000534 $d
       stm32eforth.s:1146   .text.reset_handler:0000000000000538 _DPLUS
       stm32eforth.s:1149   .text.reset_handler:000000000000053c DPLUS
       stm32eforth.s:1161   .text.reset_handler:0000000000000550 $d
       stm32eforth.s:1162   .text.reset_handler:0000000000000554 _INVER
       stm32eforth.s:1164   .text.reset_handler:0000000000000558 $t
       stm32eforth.s:1165   .text.reset_handler:0000000000000558 INVER
       stm32eforth.s:1173   .text.reset_handler:0000000000000560 $d
       stm32eforth.s:1174   .text.reset_handler:0000000000000564 _NEGAT
       stm32eforth.s:1177   .text.reset_handler:000000000000056c NEGAT
       stm32eforth.s:1185   .text.reset_handler:0000000000000574 $d
       stm32eforth.s:1186   .text.reset_handler:0000000000000578 _ABSS
       stm32eforth.s:1188   .text.reset_handler:000000000000057c $t
       stm32eforth.s:1189   .text.reset_handler:000000000000057c ABSS
       stm32eforth.s:1199   .text.reset_handler:0000000000000588 $d
       stm32eforth.s:1200   .text.reset_handler:000000000000058c _EQUAL
       stm32eforth.s:1202   .text.reset_handler:000000000000058e $t
       stm32eforth.s:1203   .text.reset_handler:0000000000000590 EQUAL
       stm32eforth.s:1214   .text.reset_handler:00000000000005a0 $d
       stm32eforth.s:1215   .text.reset_handler:00000000000005a4 _ULESS
       stm32eforth.s:1218   .text.reset_handler:00000000000005a8 ULESS
       stm32eforth.s:1229   .text.reset_handler:00000000000005b8 $d
       stm32eforth.s:1230   .text.reset_handler:00000000000005bc _LESS
       stm32eforth.s:1232   .text.reset_handler:00000000000005be $t
       stm32eforth.s:1233   .text.reset_handler:00000000000005c0 LESS
       stm32eforth.s:1244   .text.reset_handler:00000000000005d0 $d
       stm32eforth.s:1245   .text.reset_handler:00000000000005d4 _GREAT
       stm32eforth.s:1247   .text.reset_handler:00000000000005d6 $t
       stm32eforth.s:1248   .text.reset_handler:00000000000005d8 GREAT
       stm32eforth.s:1259   .text.reset_handler:00000000000005e8 $d
       stm32eforth.s:1260   .text.reset_handler:00000000000005ec _MAX
       stm32eforth.s:1262   .text.reset_handler:00000000000005f0 $t
       stm32eforth.s:1263   .text.reset_handler:00000000000005f0 MAX
       stm32eforth.s:1273   .text.reset_handler:00000000000005fc $d
       stm32eforth.s:1274   .text.reset_handler:0000000000000600 _MIN
       stm32eforth.s:1276   .text.reset_handler:0000000000000604 $t
       stm32eforth.s:1277   .text.reset_handler:0000000000000604 MIN
       stm32eforth.s:1287   .text.reset_handler:0000000000000610 $d
       stm32eforth.s:1288   .text.reset_handler:0000000000000614 _PSTOR
ARM GAS  stm32eforth.s 			page 86


       stm32eforth.s:1291   .text.reset_handler:0000000000000618 PSTOR
       stm32eforth.s:1302   .text.reset_handler:0000000000000628 $d
       stm32eforth.s:1303   .text.reset_handler:000000000000062c _DSTOR
       stm32eforth.s:1306   .text.reset_handler:0000000000000630 DSTOR
       stm32eforth.s:1317   .text.reset_handler:0000000000000644 $d
       stm32eforth.s:1318   .text.reset_handler:0000000000000648 _DAT
       stm32eforth.s:1321   .text.reset_handler:000000000000064c DAT
       stm32eforth.s:1331   .text.reset_handler:0000000000000658 $d
       stm32eforth.s:1332   .text.reset_handler:000000000000065c _COUNT
       stm32eforth.s:1334   .text.reset_handler:0000000000000662 $t
       stm32eforth.s:1335   .text.reset_handler:0000000000000664 COUNT
       stm32eforth.s:1345   .text.reset_handler:0000000000000670 $d
       stm32eforth.s:1346   .text.reset_handler:0000000000000674 _DNEGA
       stm32eforth.s:1348   .text.reset_handler:000000000000067c $t
       stm32eforth.s:1349   .text.reset_handler:000000000000067c DNEGA
       stm32eforth.s:1367   .text.reset_handler:000000000000068c DOVAR
       stm32eforth.s:1380   .text.reset_handler:0000000000000698 DOCON
       stm32eforth.s:1390   .text.reset_handler:00000000000006a4 $d
       stm32eforth.s:1391   .text.reset_handler:00000000000006a8 _TICKS
       stm32eforth.s:1393   .text.reset_handler:00000000000006ae $t
       stm32eforth.s:1394   .text.reset_handler:00000000000006b0 TICKS
       stm32eforth.s:1401   .text.reset_handler:00000000000006bc $d
       stm32eforth.s:1402   .text.reset_handler:00000000000006c0 _TIMER
       stm32eforth.s:1404   .text.reset_handler:00000000000006c6 $t
       stm32eforth.s:1405   .text.reset_handler:00000000000006c8 TIMER
       stm32eforth.s:1414   .text.reset_handler:00000000000006d4 $d
       stm32eforth.s:1415   .text.reset_handler:00000000000006d8 _TBOOT
       stm32eforth.s:1417   .text.reset_handler:00000000000006de $t
       stm32eforth.s:1418   .text.reset_handler:00000000000006e0 TBOOT
       stm32eforth.s:1427   .text.reset_handler:00000000000006ec $d
       stm32eforth.s:1428   .text.reset_handler:00000000000006f0 _BASE
       stm32eforth.s:1431   .text.reset_handler:00000000000006f8 BASE
       stm32eforth.s:1444   .text.reset_handler:0000000000000704 TEMP
       stm32eforth.s:1453   .text.reset_handler:0000000000000710 $d
       stm32eforth.s:1454   .text.reset_handler:0000000000000714 _SPAN
       stm32eforth.s:1457   .text.reset_handler:000000000000071c SPAN
       stm32eforth.s:1466   .text.reset_handler:0000000000000728 $d
       stm32eforth.s:1467   .text.reset_handler:000000000000072c _INN
       stm32eforth.s:1469   .text.reset_handler:0000000000000730 $t
       stm32eforth.s:1470   .text.reset_handler:0000000000000730 INN
       stm32eforth.s:1479   .text.reset_handler:000000000000073c $d
       stm32eforth.s:1480   .text.reset_handler:0000000000000740 _NTIB
       stm32eforth.s:1483   .text.reset_handler:0000000000000748 NTIB
       stm32eforth.s:1492   .text.reset_handler:0000000000000754 $d
       stm32eforth.s:1493   .text.reset_handler:0000000000000758 _TEVAL
       stm32eforth.s:1495   .text.reset_handler:000000000000075e $t
       stm32eforth.s:1496   .text.reset_handler:0000000000000760 TEVAL
       stm32eforth.s:1505   .text.reset_handler:000000000000076c $d
       stm32eforth.s:1506   .text.reset_handler:0000000000000770 _HLD
       stm32eforth.s:1508   .text.reset_handler:0000000000000774 $t
       stm32eforth.s:1509   .text.reset_handler:0000000000000774 HLD
       stm32eforth.s:1518   .text.reset_handler:0000000000000780 $d
       stm32eforth.s:1519   .text.reset_handler:0000000000000784 _CNTXT
       stm32eforth.s:1521   .text.reset_handler:000000000000078c $t
       stm32eforth.s:1522   .text.reset_handler:000000000000078c CNTXT
       stm32eforth.s:1523   .text.reset_handler:000000000000078c CRRNT
       stm32eforth.s:1532   .text.reset_handler:0000000000000798 $d
ARM GAS  stm32eforth.s 			page 87


       stm32eforth.s:1533   .text.reset_handler:000000000000079c _CP
       stm32eforth.s:1536   .text.reset_handler:00000000000007a0 CPP
       stm32eforth.s:1544   .text.reset_handler:00000000000007ac $d
       stm32eforth.s:1545   .text.reset_handler:00000000000007b0 _FCPP
       stm32eforth.s:1548   .text.reset_handler:00000000000007b8 FCPP
       stm32eforth.s:1557   .text.reset_handler:00000000000007c4 $d
       stm32eforth.s:1558   .text.reset_handler:00000000000007c8 _LAST
       stm32eforth.s:1561   .text.reset_handler:00000000000007d0 LAST
       stm32eforth.s:1573   .text.reset_handler:00000000000007dc $d
       stm32eforth.s:1574   .text.reset_handler:00000000000007e0 _WITHI
       stm32eforth.s:1577   .text.reset_handler:00000000000007e8 WITHI
       stm32eforth.s:1592   .text.reset_handler:0000000000000808 $d
       stm32eforth.s:1593   .text.reset_handler:000000000000080c _UMMOD
       stm32eforth.s:1596   .text.reset_handler:0000000000000814 UMMOD
       stm32eforth.s:1600   .text.reset_handler:000000000000081e UMMOD0
       stm32eforth.s:1607   .text.reset_handler:000000000000082e UMMOD1
       stm32eforth.s:1612   .text.reset_handler:0000000000000838 UMMOD2
       stm32eforth.s:1623   .text.reset_handler:0000000000000844 $d
       stm32eforth.s:1624   .text.reset_handler:0000000000000848 _MSMOD
       stm32eforth.s:1626   .text.reset_handler:000000000000084e $t
       stm32eforth.s:1627   .text.reset_handler:0000000000000850 MSMOD
       stm32eforth.s:1634   .text.reset_handler:0000000000000868 $d
       stm32eforth.s:1639   .text.reset_handler:000000000000087c MMOD1
       stm32eforth.s:1635   .text.reset_handler:000000000000086c $t
       stm32eforth.s:1644   .text.reset_handler:000000000000088c $d
       stm32eforth.s:1647   .text.reset_handler:0000000000000898 MMOD2
       stm32eforth.s:1645   .text.reset_handler:0000000000000890 $t
       stm32eforth.s:1652   .text.reset_handler:00000000000008a8 $d
       stm32eforth.s:1656   .text.reset_handler:00000000000008b8 MMOD3
       stm32eforth.s:1653   .text.reset_handler:00000000000008ac $t
       stm32eforth.s:1663   .text.reset_handler:00000000000008bc $d
       stm32eforth.s:1664   .text.reset_handler:00000000000008c0 _SLMOD
       stm32eforth.s:1667   .text.reset_handler:00000000000008c8 SLMOD
       stm32eforth.s:1678   .text.reset_handler:00000000000008e0 $d
       stm32eforth.s:1679   .text.reset_handler:00000000000008e4 _MODD
       stm32eforth.s:1681   .text.reset_handler:00000000000008e8 $t
       stm32eforth.s:1682   .text.reset_handler:00000000000008e8 MODD
       stm32eforth.s:1691   .text.reset_handler:00000000000008f8 $d
       stm32eforth.s:1692   .text.reset_handler:00000000000008fc _SLASH
       stm32eforth.s:1694   .text.reset_handler:00000000000008fe $t
       stm32eforth.s:1695   .text.reset_handler:0000000000000900 SLASH
       stm32eforth.s:1705   .text.reset_handler:0000000000000914 $d
       stm32eforth.s:1706   .text.reset_handler:0000000000000918 _SSMOD
       stm32eforth.s:1708   .text.reset_handler:000000000000091e $t
       stm32eforth.s:1709   .text.reset_handler:0000000000000920 SSMOD
       stm32eforth.s:1720   .text.reset_handler:0000000000000938 $d
       stm32eforth.s:1721   .text.reset_handler:000000000000093c _STASL
       stm32eforth.s:1724   .text.reset_handler:0000000000000940 STASL
       stm32eforth.s:1737   .text.reset_handler:0000000000000954 $d
       stm32eforth.s:1738   .text.reset_handler:0000000000000958 _ALGND
       stm32eforth.s:1740   .text.reset_handler:0000000000000960 $t
       stm32eforth.s:1741   .text.reset_handler:0000000000000960 ALGND
       stm32eforth.s:1751   .text.reset_handler:0000000000000970 $d
       stm32eforth.s:1752   .text.reset_handler:0000000000000974 _TCHAR
       stm32eforth.s:1754   .text.reset_handler:000000000000097a $t
       stm32eforth.s:1755   .text.reset_handler:000000000000097c TCHAR
       stm32eforth.s:1758   .text.reset_handler:0000000000000984 $d
ARM GAS  stm32eforth.s 			page 88


       stm32eforth.s:1759   .text.reset_handler:0000000000000988 $t
       stm32eforth.s:1763   .text.reset_handler:0000000000000998 $d
       stm32eforth.s:1764   .text.reset_handler:000000000000099c $t
       stm32eforth.s:1767   .text.reset_handler:00000000000009a8 $d
       stm32eforth.s:1771   .text.reset_handler:00000000000009b8 TCHA1
       stm32eforth.s:1768   .text.reset_handler:00000000000009ac $t
       stm32eforth.s:1770   .text.reset_handler:00000000000009b4 $d
       stm32eforth.s:1772   .text.reset_handler:00000000000009b8 $t
       stm32eforth.s:1777   .text.reset_handler:00000000000009bc $d
       stm32eforth.s:1778   .text.reset_handler:00000000000009c0 _DEPTH
       stm32eforth.s:1780   .text.reset_handler:00000000000009c6 $t
       stm32eforth.s:1781   .text.reset_handler:00000000000009c8 DEPTH
       stm32eforth.s:1794   .text.reset_handler:00000000000009e4 $d
       stm32eforth.s:1795   .text.reset_handler:00000000000009e8 _PICK
       stm32eforth.s:1798   .text.reset_handler:00000000000009f0 PICK
       stm32eforth.s:1814   .text.reset_handler:0000000000000a0c $d
       stm32eforth.s:1815   .text.reset_handler:0000000000000a10 _HERE
       stm32eforth.s:1818   .text.reset_handler:0000000000000a18 HERE
       stm32eforth.s:1828   .text.reset_handler:0000000000000a28 $d
       stm32eforth.s:1829   .text.reset_handler:0000000000000a2c _PAD
       stm32eforth.s:1831   .text.reset_handler:0000000000000a30 $t
       stm32eforth.s:1832   .text.reset_handler:0000000000000a30 PAD
       stm32eforth.s:1841   .text.reset_handler:0000000000000a40 $d
       stm32eforth.s:1842   .text.reset_handler:0000000000000a44 _TIB
       stm32eforth.s:1844   .text.reset_handler:0000000000000a48 $t
       stm32eforth.s:1845   *ABS*:0000000020004f00 TIB_ADR
       stm32eforth.s:1846   .text.reset_handler:0000000000000a48 TIB
       stm32eforth.s:1856   .text.reset_handler:0000000000000a58 $d
       stm32eforth.s:1857   .text.reset_handler:0000000000000a5c _ATEXE
       stm32eforth.s:1860   .text.reset_handler:0000000000000a68 ATEXE
       stm32eforth.s:1873   .text.reset_handler:0000000000000a7c $d
       stm32eforth.s:1874   .text.reset_handler:0000000000000a80 _CMOVE
       stm32eforth.s:1876   .text.reset_handler:0000000000000a86 $t
       stm32eforth.s:1877   .text.reset_handler:0000000000000a88 CMOVE
       stm32eforth.s:1884   .text.reset_handler:0000000000000a9a CMOV1
       stm32eforth.s:1881   .text.reset_handler:0000000000000a92 CMOV0
       stm32eforth.s:1889   .text.reset_handler:0000000000000aa4 CMOV2
       stm32eforth.s:1897   .text.reset_handler:0000000000000aac $d
       stm32eforth.s:1898   .text.reset_handler:0000000000000ab0 _MOVE
       stm32eforth.s:1901   .text.reset_handler:0000000000000ab8 MOVE
       stm32eforth.s:1909   .text.reset_handler:0000000000000ace MOVE1
       stm32eforth.s:1906   .text.reset_handler:0000000000000ac6 MOVE0
       stm32eforth.s:1914   .text.reset_handler:0000000000000ad8 MOVE2
       stm32eforth.s:1922   .text.reset_handler:0000000000000ae0 $d
       stm32eforth.s:1923   .text.reset_handler:0000000000000ae4 _FILL
       stm32eforth.s:1926   .text.reset_handler:0000000000000aec FILL
       stm32eforth.s:1929   .text.reset_handler:0000000000000af4 FILL0
       stm32eforth.s:1932   .text.reset_handler:0000000000000af8 FILL1
       stm32eforth.s:1938   .text.reset_handler:0000000000000b06 FILL2
       stm32eforth.s:1945   .text.reset_handler:0000000000000b0c $d
       stm32eforth.s:1946   .text.reset_handler:0000000000000b10 _PACKS
       stm32eforth.s:1949   .text.reset_handler:0000000000000b18 PACKS
       stm32eforth.s:1958   .text.reset_handler:0000000000000b38 $d
       stm32eforth.s:1959   .text.reset_handler:0000000000000b3c $t
       stm32eforth.s:1961   .text.reset_handler:0000000000000b44 $d
       stm32eforth.s:1962   .text.reset_handler:0000000000000b48 $t
       stm32eforth.s:1979   .text.reset_handler:0000000000000b70 $d
ARM GAS  stm32eforth.s 			page 89


       stm32eforth.s:1980   .text.reset_handler:0000000000000b74 _DIGIT
       stm32eforth.s:1982   .text.reset_handler:0000000000000b7a $t
       stm32eforth.s:1983   .text.reset_handler:0000000000000b7c DIGIT
       stm32eforth.s:1986   .text.reset_handler:0000000000000b84 $d
       stm32eforth.s:1987   .text.reset_handler:0000000000000b88 $t
       stm32eforth.s:1997   .text.reset_handler:0000000000000ba0 $d
       stm32eforth.s:1998   .text.reset_handler:0000000000000ba4 _EXTRC
       stm32eforth.s:2000   .text.reset_handler:0000000000000bac $t
       stm32eforth.s:2001   .text.reset_handler:0000000000000bac EXTRC
       stm32eforth.s:2004   .text.reset_handler:0000000000000bb4 $d
       stm32eforth.s:2005   .text.reset_handler:0000000000000bb8 $t
       stm32eforth.s:2014   .text.reset_handler:0000000000000bcc $d
       stm32eforth.s:2015   .text.reset_handler:0000000000000bd0 _BDIGS
       stm32eforth.s:2018   .text.reset_handler:0000000000000bd4 BDIGS
       stm32eforth.s:2029   .text.reset_handler:0000000000000be8 $d
       stm32eforth.s:2030   .text.reset_handler:0000000000000bec _HOLD
       stm32eforth.s:2033   .text.reset_handler:0000000000000bf4 HOLD
       stm32eforth.s:2048   .text.reset_handler:0000000000000c18 $d
       stm32eforth.s:2049   .text.reset_handler:0000000000000c1c _DIG
       stm32eforth.s:2051   .text.reset_handler:0000000000000c1e $t
       stm32eforth.s:2052   .text.reset_handler:0000000000000c20 DIG
       stm32eforth.s:2063   .text.reset_handler:0000000000000c38 $d
       stm32eforth.s:2064   .text.reset_handler:0000000000000c3c _DIGS
       stm32eforth.s:2067   .text.reset_handler:0000000000000c40 DIGS
       stm32eforth.s:2069   .text.reset_handler:0000000000000c44 DIGS1
       stm32eforth.s:2073   .text.reset_handler:0000000000000c50 $d
       stm32eforth.s:2075   .text.reset_handler:0000000000000c56 DIGS2
       stm32eforth.s:2074   .text.reset_handler:0000000000000c54 $t
       stm32eforth.s:2082   .text.reset_handler:0000000000000c5c $d
       stm32eforth.s:2083   .text.reset_handler:0000000000000c60 _SIGN
       stm32eforth.s:2086   .text.reset_handler:0000000000000c68 SIGN
       stm32eforth.s:2090   .text.reset_handler:0000000000000c74 $d
       stm32eforth.s:2094   .text.reset_handler:0000000000000c84 SIGN1
       stm32eforth.s:2091   .text.reset_handler:0000000000000c78 $t
       stm32eforth.s:2092   .text.reset_handler:0000000000000c7c $d
       stm32eforth.s:2093   .text.reset_handler:0000000000000c80 $t
       stm32eforth.s:2100   .text.reset_handler:0000000000000c88 $d
       stm32eforth.s:2101   .text.reset_handler:0000000000000c8c _EDIGS
       stm32eforth.s:2104   .text.reset_handler:0000000000000c90 EDIGS
       stm32eforth.s:2121   .text.reset_handler:0000000000000cb0 STRR
       stm32eforth.s:2136   .text.reset_handler:0000000000000cd8 $d
       stm32eforth.s:2137   .text.reset_handler:0000000000000cdc _HEX
       stm32eforth.s:2139   .text.reset_handler:0000000000000ce0 $t
       stm32eforth.s:2143   .text.reset_handler:0000000000000ce8 $d
       stm32eforth.s:2144   .text.reset_handler:0000000000000cec $t
       stm32eforth.s:2152   .text.reset_handler:0000000000000cf8 $d
       stm32eforth.s:2153   .text.reset_handler:0000000000000cfc _DECIM
       stm32eforth.s:2155   .text.reset_handler:0000000000000d04 $t
       stm32eforth.s:2156   .text.reset_handler:0000000000000d04 DECIM
       stm32eforth.s:2159   .text.reset_handler:0000000000000d0c $d
       stm32eforth.s:2160   .text.reset_handler:0000000000000d10 $t
       stm32eforth.s:2171   .text.reset_handler:0000000000000d1c $d
       stm32eforth.s:2172   .text.reset_handler:0000000000000d20 _DIGTQ
       stm32eforth.s:2175   .text.reset_handler:0000000000000d28 DIGTQ
       stm32eforth.s:2179   .text.reset_handler:0000000000000d34 $d
       stm32eforth.s:2180   .text.reset_handler:0000000000000d38 $t
       stm32eforth.s:2182   .text.reset_handler:0000000000000d40 $d
ARM GAS  stm32eforth.s 			page 90


       stm32eforth.s:2183   .text.reset_handler:0000000000000d44 $t
       stm32eforth.s:2186   .text.reset_handler:0000000000000d50 $d
       stm32eforth.s:2195   .text.reset_handler:0000000000000d74 DGTQ1
       stm32eforth.s:2187   .text.reset_handler:0000000000000d54 $t
       stm32eforth.s:2188   .text.reset_handler:0000000000000d58 $d
       stm32eforth.s:2189   .text.reset_handler:0000000000000d5c $t
       stm32eforth.s:2192   .text.reset_handler:0000000000000d68 $d
       stm32eforth.s:2193   .text.reset_handler:0000000000000d6c $t
       stm32eforth.s:2204   .text.reset_handler:0000000000000d84 $d
       stm32eforth.s:2205   .text.reset_handler:0000000000000d88 _NUMBQ
       stm32eforth.s:2207   .text.reset_handler:0000000000000d90 $t
       stm32eforth.s:2208   .text.reset_handler:0000000000000d90 NUMBQ
       stm32eforth.s:2214   .text.reset_handler:0000000000000da4 $d
       stm32eforth.s:2215   .text.reset_handler:0000000000000da8 $t
       stm32eforth.s:2220   .text.reset_handler:0000000000000dbc $d
       stm32eforth.s:2221   .text.reset_handler:0000000000000dc0 $t
       stm32eforth.s:2223   .text.reset_handler:0000000000000dc8 $d
       stm32eforth.s:2229   .text.reset_handler:0000000000000de0 NUMQ1
       stm32eforth.s:2224   .text.reset_handler:0000000000000dcc $t
       stm32eforth.s:2233   .text.reset_handler:0000000000000dec $d
       stm32eforth.s:2234   .text.reset_handler:0000000000000df0 $t
       stm32eforth.s:2244   .text.reset_handler:0000000000000e18 $d
       stm32eforth.s:2283   .text.reset_handler:0000000000000ea4 NUMQ6
       stm32eforth.s:2245   .text.reset_handler:0000000000000e1c $t
       stm32eforth.s:2247   .text.reset_handler:0000000000000e24 NUMQ2
       stm32eforth.s:2255   .text.reset_handler:0000000000000e40 $d
       stm32eforth.s:2274   .text.reset_handler:0000000000000e88 NUMQ4
       stm32eforth.s:2256   .text.reset_handler:0000000000000e44 $t
       stm32eforth.s:2264   .text.reset_handler:0000000000000e64 $d
       stm32eforth.s:2265   .text.reset_handler:0000000000000e68 $t
       stm32eforth.s:2269   .text.reset_handler:0000000000000e78 $d
       stm32eforth.s:2271   .text.reset_handler:0000000000000e80 NUMQ3
       stm32eforth.s:2270   .text.reset_handler:0000000000000e7c $t
       stm32eforth.s:2281   .text.reset_handler:0000000000000ea0 NUMQ5
       stm32eforth.s:2280   .text.reset_handler:0000000000000e9c $d
       stm32eforth.s:2282   .text.reset_handler:0000000000000ea0 $t
       stm32eforth.s:2297   .text.reset_handler:0000000000000ebc $d
       stm32eforth.s:2298   .text.reset_handler:0000000000000ec0 _KEY
       stm32eforth.s:2300   .text.reset_handler:0000000000000ec4 $t
       stm32eforth.s:2301   .text.reset_handler:0000000000000ec4 KEY
       stm32eforth.s:2303   .text.reset_handler:0000000000000ec8 KEY1
       stm32eforth.s:2306   .text.reset_handler:0000000000000ed0 $d
       stm32eforth.s:2307   .text.reset_handler:0000000000000ed4 $t
       stm32eforth.s:2312   .text.reset_handler:0000000000000ed8 $d
       stm32eforth.s:2313   .text.reset_handler:0000000000000edc _SPACE
       stm32eforth.s:2315   .text.reset_handler:0000000000000ee2 $t
       stm32eforth.s:2316   .text.reset_handler:0000000000000ee4 SPACE
       stm32eforth.s:2325   .text.reset_handler:0000000000000ef4 $d
       stm32eforth.s:2326   .text.reset_handler:0000000000000ef8 _SPACS
       stm32eforth.s:2329   .text.reset_handler:0000000000000f00 SPACS
       stm32eforth.s:2332   .text.reset_handler:0000000000000f08 $d
       stm32eforth.s:2333   .text.reset_handler:0000000000000f0c $t
       stm32eforth.s:2338   .text.reset_handler:0000000000000f1c CHAR2
       stm32eforth.s:2336   .text.reset_handler:0000000000000f18 CHAR1
       stm32eforth.s:2340   .text.reset_handler:0000000000000f20 $d
       stm32eforth.s:2341   .text.reset_handler:0000000000000f24 $t
       stm32eforth.s:2347   .text.reset_handler:0000000000000f28 $d
ARM GAS  stm32eforth.s 			page 91


       stm32eforth.s:2348   .text.reset_handler:0000000000000f2c _TYPEE
       stm32eforth.s:2351   .text.reset_handler:0000000000000f34 TYPEE
       stm32eforth.s:2359   .text.reset_handler:0000000000000f4c TYPE2
       stm32eforth.s:2355   .text.reset_handler:0000000000000f40 TYPE1
       stm32eforth.s:2361   .text.reset_handler:0000000000000f50 $d
       stm32eforth.s:2362   .text.reset_handler:0000000000000f54 $t
       stm32eforth.s:2369   .text.reset_handler:0000000000000f5c $d
       stm32eforth.s:2370   .text.reset_handler:0000000000000f60 _CR
       stm32eforth.s:2376   .text.reset_handler:0000000000000f6c $d
       stm32eforth.s:2377   .text.reset_handler:0000000000000f70 $t
       stm32eforth.s:2379   .text.reset_handler:0000000000000f78 $d
       stm32eforth.s:2380   .text.reset_handler:0000000000000f7c $t
       stm32eforth.s:2390   .text.reset_handler:0000000000000f84 DOSTR
       stm32eforth.s:2412   .text.reset_handler:0000000000000fb8 STRQP
       stm32eforth.s:2425   .text.reset_handler:0000000000000fc4 DOTST
       stm32eforth.s:2447   .text.reset_handler:0000000000000fe4 $d
       stm32eforth.s:2448   .text.reset_handler:0000000000000fe8 _DOTR
       stm32eforth.s:2451   .text.reset_handler:0000000000000fec DOTR
       stm32eforth.s:2465   .text.reset_handler:0000000000001010 $d
       stm32eforth.s:2466   .text.reset_handler:0000000000001014 _UDOTR
       stm32eforth.s:2468   .text.reset_handler:0000000000001018 $t
       stm32eforth.s:2469   .text.reset_handler:0000000000001018 UDOTR
       stm32eforth.s:2485   .text.reset_handler:0000000000001044 $d
       stm32eforth.s:2486   .text.reset_handler:0000000000001048 _UDOT
       stm32eforth.s:2501   .text.reset_handler:0000000000001068 $d
       stm32eforth.s:2502   .text.reset_handler:000000000000106c _DOT
       stm32eforth.s:2504   .text.reset_handler:000000000000106e $t
       stm32eforth.s:2505   .text.reset_handler:0000000000001070 DOT
       stm32eforth.s:2510   .text.reset_handler:0000000000001080 $d
       stm32eforth.s:2511   .text.reset_handler:0000000000001084 $t
       stm32eforth.s:2513   .text.reset_handler:000000000000108c $d
       stm32eforth.s:2516   .text.reset_handler:0000000000001098 DOT1
       stm32eforth.s:2514   .text.reset_handler:0000000000001090 $t
       stm32eforth.s:2525   .text.reset_handler:00000000000010a8 $d
       stm32eforth.s:2526   .text.reset_handler:00000000000010ac _QUEST
       stm32eforth.s:2528   .text.reset_handler:00000000000010ae $t
       stm32eforth.s:2529   .text.reset_handler:00000000000010b0 QUEST
       stm32eforth.s:2546   .text.reset_handler:00000000000010c0 PARS
       stm32eforth.s:2554   .text.reset_handler:00000000000010dc $d
       stm32eforth.s:2622   .text.reset_handler:00000000000011ce PARS8
       stm32eforth.s:2555   .text.reset_handler:00000000000010e0 $t
       stm32eforth.s:2561   .text.reset_handler:00000000000010f8 $d
       stm32eforth.s:2583   .text.reset_handler:0000000000001148 PARS3
       stm32eforth.s:2562   .text.reset_handler:00000000000010fc $t
       stm32eforth.s:2563   .text.reset_handler:0000000000001100 PARS1
       stm32eforth.s:2571   .text.reset_handler:000000000000111c $d
       stm32eforth.s:2581   .text.reset_handler:0000000000001144 PARS2
       stm32eforth.s:2572   .text.reset_handler:0000000000001120 $t
       stm32eforth.s:2574   .text.reset_handler:0000000000001128 $d
       stm32eforth.s:2575   .text.reset_handler:000000000000112c $t
       stm32eforth.s:2578   .text.reset_handler:0000000000001138 $d
       stm32eforth.s:2579   .text.reset_handler:000000000000113c $t
       stm32eforth.s:2587   .text.reset_handler:0000000000001154 PARS4
       stm32eforth.s:2598   .text.reset_handler:000000000000117c $d
       stm32eforth.s:2600   .text.reset_handler:0000000000001184 PARS5
       stm32eforth.s:2599   .text.reset_handler:0000000000001180 $t
       stm32eforth.s:2602   .text.reset_handler:0000000000001188 $d
ARM GAS  stm32eforth.s 			page 92


       stm32eforth.s:2609   .text.reset_handler:00000000000011a2 PARS6
       stm32eforth.s:2603   .text.reset_handler:000000000000118c $t
       stm32eforth.s:2605   .text.reset_handler:0000000000001194 $d
       stm32eforth.s:2606   .text.reset_handler:0000000000001198 $t
       stm32eforth.s:2615   .text.reset_handler:00000000000011b6 PARS7
       stm32eforth.s:2632   .text.reset_handler:00000000000011e0 $d
       stm32eforth.s:2633   .text.reset_handler:00000000000011e4 _PARSE
       stm32eforth.s:2635   .text.reset_handler:00000000000011ea $t
       stm32eforth.s:2636   .text.reset_handler:00000000000011ec PARSE
       stm32eforth.s:2657   .text.reset_handler:000000000000122c $d
       stm32eforth.s:2658   .text.reset_handler:0000000000001230 _DOTPR
       stm32eforth.s:2661   .text.reset_handler:0000000000001234 DOTPR
       stm32eforth.s:2664   .text.reset_handler:000000000000123c $d
       stm32eforth.s:2665   .text.reset_handler:0000000000001240 $t
       stm32eforth.s:2672   .text.reset_handler:000000000000124c $d
       stm32eforth.s:2673   .text.reset_handler:0000000000001250 _PAREN
       stm32eforth.s:2675   .text.reset_handler:0000000000001252 $t
       stm32eforth.s:2676   .text.reset_handler:0000000000001254 PAREN
       stm32eforth.s:2679   .text.reset_handler:000000000000125c $d
       stm32eforth.s:2680   .text.reset_handler:0000000000001260 $t
       stm32eforth.s:2687   .text.reset_handler:000000000000126c $d
       stm32eforth.s:2688   .text.reset_handler:0000000000001270 _BKSLA
       stm32eforth.s:2690   .text.reset_handler:0000000000001272 $t
       stm32eforth.s:2691   .text.reset_handler:0000000000001274 BKSLA
       stm32eforth.s:2702   .text.reset_handler:000000000000128c $d
       stm32eforth.s:2703   .text.reset_handler:0000000000001290 _CHAR
       stm32eforth.s:2706   .text.reset_handler:0000000000001298 CHAR
       stm32eforth.s:2717   .text.reset_handler:00000000000012b0 $d
       stm32eforth.s:2718   .text.reset_handler:00000000000012b4 _WORDD
       stm32eforth.s:2721   .text.reset_handler:00000000000012bc WORDD
       stm32eforth.s:2732   .text.reset_handler:00000000000012d4 $d
       stm32eforth.s:2733   .text.reset_handler:00000000000012d8 _TOKEN
       stm32eforth.s:2735   .text.reset_handler:00000000000012de $t
       stm32eforth.s:2736   .text.reset_handler:00000000000012e0 TOKEN
       stm32eforth.s:2748   .text.reset_handler:00000000000012f0 $d
       stm32eforth.s:2749   .text.reset_handler:00000000000012f4 _NAMET
       stm32eforth.s:2751   .text.reset_handler:00000000000012fa $t
       stm32eforth.s:2752   .text.reset_handler:00000000000012fc NAMET
       stm32eforth.s:2756   .text.reset_handler:0000000000001308 $d
       stm32eforth.s:2757   .text.reset_handler:000000000000130c $t
       stm32eforth.s:2765   .text.reset_handler:000000000000131c $d
       stm32eforth.s:2766   .text.reset_handler:0000000000001320 _SAMEQ
       stm32eforth.s:2768   .text.reset_handler:0000000000001326 $t
       stm32eforth.s:2769   .text.reset_handler:0000000000001328 SAMEQ
       stm32eforth.s:2791   .text.reset_handler:0000000000001378 SAME2
       stm32eforth.s:2773   .text.reset_handler:0000000000001334 SAME1
       stm32eforth.s:2787   .text.reset_handler:0000000000001368 $d
       stm32eforth.s:2788   .text.reset_handler:000000000000136c $t
       stm32eforth.s:2793   .text.reset_handler:000000000000137c $d
       stm32eforth.s:2794   .text.reset_handler:0000000000001380 $t
       stm32eforth.s:2795   .text.reset_handler:0000000000001384 $d
       stm32eforth.s:2796   .text.reset_handler:0000000000001388 $t
       stm32eforth.s:2805   .text.reset_handler:000000000000138c FIND
       stm32eforth.s:2818   .text.reset_handler:00000000000013bc FIND1
       stm32eforth.s:2821   .text.reset_handler:00000000000013c4 $d
       stm32eforth.s:2841   .text.reset_handler:000000000000140c FIND6
       stm32eforth.s:2822   .text.reset_handler:00000000000013c8 $t
ARM GAS  stm32eforth.s 			page 93


       stm32eforth.s:2825   .text.reset_handler:00000000000013d4 $d
       stm32eforth.s:2826   .text.reset_handler:00000000000013d8 $t
       stm32eforth.s:2830   .text.reset_handler:00000000000013e8 $d
       stm32eforth.s:2834   .text.reset_handler:00000000000013f8 FIND2
       stm32eforth.s:2831   .text.reset_handler:00000000000013ec $t
       stm32eforth.s:2839   .text.reset_handler:0000000000001408 FIND3
       stm32eforth.s:2848   .text.reset_handler:0000000000001424 FIND4
       stm32eforth.s:2850   .text.reset_handler:0000000000001428 $d
       stm32eforth.s:2855   .text.reset_handler:000000000000143c FIND5
       stm32eforth.s:2851   .text.reset_handler:000000000000142c $t
       stm32eforth.s:2870   .text.reset_handler:0000000000001460 $d
       stm32eforth.s:2871   .text.reset_handler:0000000000001464 _NAMEQ
       stm32eforth.s:2873   .text.reset_handler:000000000000146a $t
       stm32eforth.s:2874   .text.reset_handler:000000000000146c NAMEQ
       stm32eforth.s:2891   .text.reset_handler:0000000000001480 BKSP
       stm32eforth.s:2900   .text.reset_handler:00000000000014a0 $d
       stm32eforth.s:2913   .text.reset_handler:00000000000014c8 BACK1
       stm32eforth.s:2901   .text.reset_handler:00000000000014a4 $t
       stm32eforth.s:2902   .text.reset_handler:00000000000014a8 $d
       stm32eforth.s:2903   .text.reset_handler:00000000000014ac $t
       stm32eforth.s:2910   .text.reset_handler:00000000000014c0 $d
       stm32eforth.s:2911   .text.reset_handler:00000000000014c4 $t
       stm32eforth.s:2923   .text.reset_handler:00000000000014cc TAP
       stm32eforth.s:2940   .text.reset_handler:00000000000014e8 KTAP
       stm32eforth.s:2941   .text.reset_handler:00000000000014e8 TTAP
       stm32eforth.s:2945   .text.reset_handler:00000000000014f4 $d
       stm32eforth.s:2946   .text.reset_handler:00000000000014f8 $t
       stm32eforth.s:2948   .text.reset_handler:0000000000001500 $d
       stm32eforth.s:2961   .text.reset_handler:0000000000001530 KTAP2
       stm32eforth.s:2949   .text.reset_handler:0000000000001504 $t
       stm32eforth.s:2950   .text.reset_handler:0000000000001508 $d
       stm32eforth.s:2951   .text.reset_handler:000000000000150c $t
       stm32eforth.s:2953   .text.reset_handler:0000000000001514 $d
       stm32eforth.s:2958   .text.reset_handler:0000000000001528 KTAP1
       stm32eforth.s:2954   .text.reset_handler:0000000000001518 $t
       stm32eforth.s:2957   .text.reset_handler:0000000000001524 $d
       stm32eforth.s:2959   .text.reset_handler:0000000000001528 $t
       stm32eforth.s:2971   .text.reset_handler:0000000000001544 $d
       stm32eforth.s:2972   .text.reset_handler:0000000000001548 _ACCEP
       stm32eforth.s:2975   .text.reset_handler:0000000000001550 ACCEP
       stm32eforth.s:2980   .text.reset_handler:0000000000001560 ACCP1
       stm32eforth.s:2984   .text.reset_handler:000000000000156c $d
       stm32eforth.s:3000   .text.reset_handler:000000000000159c ACCP4
       stm32eforth.s:2985   .text.reset_handler:0000000000001570 $t
       stm32eforth.s:2989   .text.reset_handler:0000000000001580 $d
       stm32eforth.s:2990   .text.reset_handler:0000000000001584 $t
       stm32eforth.s:2992   .text.reset_handler:000000000000158c $d
       stm32eforth.s:2995   .text.reset_handler:0000000000001596 ACCP2
       stm32eforth.s:2993   .text.reset_handler:0000000000001590 $t
       stm32eforth.s:2998   .text.reset_handler:000000000000159a ACCP3
       stm32eforth.s:3009   .text.reset_handler:00000000000015ac $d
       stm32eforth.s:3010   .text.reset_handler:00000000000015b0 _QUERY
       stm32eforth.s:3012   .text.reset_handler:00000000000015b6 $t
       stm32eforth.s:3013   .text.reset_handler:00000000000015b8 QUERY
       stm32eforth.s:3017   .text.reset_handler:00000000000015c4 $d
       stm32eforth.s:3018   .text.reset_handler:00000000000015c8 $t
       stm32eforth.s:3023   .text.reset_handler:00000000000015dc $d
ARM GAS  stm32eforth.s 			page 94


       stm32eforth.s:3024   .text.reset_handler:00000000000015e0 $t
       stm32eforth.s:3034   .text.reset_handler:00000000000015ec $d
       stm32eforth.s:3035   .text.reset_handler:00000000000015f0 _ABORT
       stm32eforth.s:3037   .text.reset_handler:00000000000015f6 $t
       stm32eforth.s:3038   .text.reset_handler:00000000000015f8 ABORT
       stm32eforth.s:3044   .text.reset_handler:000000000000160c $d
       stm32eforth.s:3045   .text.reset_handler:0000000000001610 $t
       stm32eforth.s:3194   .text.reset_handler:0000000000001780 PRESE
       stm32eforth.s:3209   .text.reset_handler:00000000000017a0 QUIT
       stm32eforth.s:3058   .text.reset_handler:0000000000001620 ABORQ
       stm32eforth.s:3061   .text.reset_handler:0000000000001628 $d
       stm32eforth.s:3067   .text.reset_handler:0000000000001640 ABOR1
       stm32eforth.s:3062   .text.reset_handler:000000000000162c $t
       stm32eforth.s:3078   .text.reset_handler:000000000000164c $d
       stm32eforth.s:3079   .text.reset_handler:0000000000001650 _INTER
       stm32eforth.s:3081   .text.reset_handler:000000000000165c $t
       stm32eforth.s:3087   .text.reset_handler:000000000000166c $d
       stm32eforth.s:3098   .text.reset_handler:000000000000169c INTE1
       stm32eforth.s:3088   .text.reset_handler:0000000000001670 $t
       stm32eforth.s:3090   .text.reset_handler:0000000000001678 $d
       stm32eforth.s:3091   .text.reset_handler:000000000000167c $t
       stm32eforth.s:3093   .text.reset_handler:0000000000001684 $d
       stm32eforth.s:3095   .text.reset_handler:0000000000001692 $t
       stm32eforth.s:3101   .text.reset_handler:00000000000016a4 $d
       stm32eforth.s:3103   .text.reset_handler:00000000000016ac INTE2
       stm32eforth.s:3102   .text.reset_handler:00000000000016a8 $t
       stm32eforth.s:3109   .text.reset_handler:00000000000016b0 $d
       stm32eforth.s:3110   .text.reset_handler:00000000000016b4 _LBRAC
       stm32eforth.s:3112   .text.reset_handler:00000000000016b6 $t
       stm32eforth.s:3113   .text.reset_handler:00000000000016b8 LBRAC
       stm32eforth.s:3116   .text.reset_handler:00000000000016c0 $d
       stm32eforth.s:3117   .text.reset_handler:00000000000016c4 $t
       stm32eforth.s:3124   .text.reset_handler:00000000000016d0 $d
       stm32eforth.s:3125   .text.reset_handler:00000000000016d4 _DOTOK
       stm32eforth.s:3127   .text.reset_handler:00000000000016d8 $t
       stm32eforth.s:3128   .text.reset_handler:00000000000016d8 DOTOK
       stm32eforth.s:3131   .text.reset_handler:00000000000016e0 $d
       stm32eforth.s:3132   .text.reset_handler:00000000000016e4 $t
       stm32eforth.s:3136   .text.reset_handler:00000000000016f4 $d
       stm32eforth.s:3141   .text.reset_handler:0000000000001700 DOTO1
       stm32eforth.s:3137   .text.reset_handler:00000000000016f8 $t
       stm32eforth.s:3138   .text.reset_handler:00000000000016fc $d
       stm32eforth.s:3140   .text.reset_handler:0000000000001700 $t
       stm32eforth.s:3148   .text.reset_handler:0000000000001708 $d
       stm32eforth.s:3149   .text.reset_handler:000000000000170c _QSTAC
       stm32eforth.s:3152   .text.reset_handler:0000000000001714 QSTAC
       stm32eforth.s:3157   .text.reset_handler:0000000000001724 $d
       stm32eforth.s:3165   .text.reset_handler:0000000000001734 $d
       stm32eforth.s:3166   .text.reset_handler:0000000000001738 _EVAL
       stm32eforth.s:3169   .text.reset_handler:0000000000001740 EVAL
       stm32eforth.s:3171   .text.reset_handler:0000000000001744 EVAL1
       stm32eforth.s:3176   .text.reset_handler:0000000000001754 $d
       stm32eforth.s:3181   .text.reset_handler:0000000000001768 EVAL2
       stm32eforth.s:3177   .text.reset_handler:0000000000001758 $t
       stm32eforth.s:3190   .text.reset_handler:0000000000001774 $d
       stm32eforth.s:3191   .text.reset_handler:0000000000001778 _PRESE
       stm32eforth.s:3205   .text.reset_handler:0000000000001794 $d
ARM GAS  stm32eforth.s 			page 95


       stm32eforth.s:3206   .text.reset_handler:0000000000001798 _QUIT
       stm32eforth.s:3213   .text.reset_handler:00000000000017ac QUIT1
       stm32eforth.s:3215   .text.reset_handler:00000000000017b0 QUIT2
       stm32eforth.s:3219   .text.reset_handler:00000000000017bc $d
       stm32eforth.s:3225   .text.reset_handler:00000000000017c0 $t
       stm32eforth.s:3237   .text.reset_handler:00000000000017e0 WAIT_BSY
       stm32eforth.s:3239   .text.reset_handler:00000000000017e4 WAIT1
       stm32eforth.s:3249   .text.reset_handler:00000000000017f0 $d
       stm32eforth.s:3250   .text.reset_handler:00000000000017f4 _ESECT
       stm32eforth.s:3254   .text.reset_handler:0000000000001804 ESECT
       stm32eforth.s:3272   .text.reset_handler:0000000000001830 $d
       stm32eforth.s:3273   .text.reset_handler:0000000000001834 _ISTOR
       stm32eforth.s:3277   .text.reset_handler:0000000000001838 ISTOR
       stm32eforth.s:3295   .text.reset_handler:000000000000185c $d
       stm32eforth.s:3296   .text.reset_handler:0000000000001860 _TURN
       stm32eforth.s:3298   .text.reset_handler:0000000000001868 $t
       stm32eforth.s:3299   .text.reset_handler:0000000000001868 TURN
       stm32eforth.s:3301   .text.reset_handler:0000000000001870 $d
       stm32eforth.s:3302   .text.reset_handler:0000000000001874 $t
       stm32eforth.s:3303   .text.reset_handler:0000000000001878 $d
       stm32eforth.s:3304   .text.reset_handler:000000000000187c $t
       stm32eforth.s:3305   .text.reset_handler:0000000000001880 $d
       stm32eforth.s:3306   .text.reset_handler:0000000000001884 $t
       stm32eforth.s:3308   .text.reset_handler:000000000000188c $d
       stm32eforth.s:3309   .text.reset_handler:0000000000001890 $t
       stm32eforth.s:3310   .text.reset_handler:0000000000001894 $d
       stm32eforth.s:3311   .text.reset_handler:0000000000001898 $t
       stm32eforth.s:3315   .text.reset_handler:00000000000018a8 TURN1
       stm32eforth.s:3325   .text.reset_handler:00000000000018cc $d
       stm32eforth.s:3326   .text.reset_handler:00000000000018d0 $t
       stm32eforth.s:3336   .text.reset_handler:00000000000018d8 $d
       stm32eforth.s:3337   .text.reset_handler:00000000000018dc _TICK
       stm32eforth.s:3339   .text.reset_handler:00000000000018de $t
       stm32eforth.s:3340   .text.reset_handler:00000000000018e0 TICK
       stm32eforth.s:3345   .text.reset_handler:00000000000018f0 $d
       stm32eforth.s:3347   .text.reset_handler:00000000000018f8 TICK1
       stm32eforth.s:3346   .text.reset_handler:00000000000018f4 $t
       stm32eforth.s:3352   .text.reset_handler:00000000000018fc $d
       stm32eforth.s:3353   .text.reset_handler:0000000000001900 _ALLOT
       stm32eforth.s:3355   .text.reset_handler:0000000000001906 $t
       stm32eforth.s:3356   .text.reset_handler:0000000000001908 ALLOT
       stm32eforth.s:3365   .text.reset_handler:0000000000001918 $d
       stm32eforth.s:3366   .text.reset_handler:000000000000191c _COMMA
       stm32eforth.s:3367   .text.reset_handler:000000000000191e $t
       stm32eforth.s:3368   .text.reset_handler:0000000000001920 COMMA
       stm32eforth.s:3381   .text.reset_handler:0000000000001940 $d
       stm32eforth.s:3382   .text.reset_handler:0000000000001944 _BCOMP
       stm32eforth.s:3384   .text.reset_handler:000000000000194e $t
       stm32eforth.s:3385   .text.reset_handler:0000000000001950 BCOMP
       stm32eforth.s:3394   .text.reset_handler:0000000000001960 $d
       stm32eforth.s:3395   .text.reset_handler:0000000000001964 _COMPI
       stm32eforth.s:3397   .text.reset_handler:000000000000196c $t
       stm32eforth.s:3398   .text.reset_handler:000000000000196c COMPI
       stm32eforth.s:3815   .text.reset_handler:0000000000001d38 CALLC
       stm32eforth.s:3413   .text.reset_handler:0000000000001994 $d
       stm32eforth.s:3414   .text.reset_handler:0000000000001998 _LITER
       stm32eforth.s:3416   .text.reset_handler:00000000000019a0 $t
ARM GAS  stm32eforth.s 			page 96


       stm32eforth.s:3417   .text.reset_handler:00000000000019a0 LITER
       stm32eforth.s:3420   .text.reset_handler:00000000000019a8 $d
       stm32eforth.s:3421   .text.reset_handler:00000000000019ac $t
       stm32eforth.s:3431   .text.reset_handler:00000000000019b4 STRCQ
       stm32eforth.s:3434   .text.reset_handler:00000000000019bc $d
       stm32eforth.s:3435   .text.reset_handler:00000000000019c0 $t
       stm32eforth.s:3438   .text.reset_handler:00000000000019cc $d
       stm32eforth.s:3439   .text.reset_handler:00000000000019d0 $t
       stm32eforth.s:3453   .text.reset_handler:00000000000019ec $d
       stm32eforth.s:3454   .text.reset_handler:00000000000019f0 _FOR
       stm32eforth.s:3456   .text.reset_handler:00000000000019f4 $t
       stm32eforth.s:3457   .text.reset_handler:00000000000019f4 FOR
       stm32eforth.s:3460   .text.reset_handler:00000000000019fc $d
       stm32eforth.s:3461   .text.reset_handler:0000000000001a00 $t
       stm32eforth.s:3467   .text.reset_handler:0000000000001a08 $d
       stm32eforth.s:3468   .text.reset_handler:0000000000001a0c _BEGIN
       stm32eforth.s:3470   .text.reset_handler:0000000000001a12 $t
       stm32eforth.s:3471   .text.reset_handler:0000000000001a14 BEGIN
       stm32eforth.s:3479   .text.reset_handler:0000000000001a20 $d
       stm32eforth.s:3480   .text.reset_handler:0000000000001a24 _NEXT
       stm32eforth.s:3483   .text.reset_handler:0000000000001a2c NEXT
       stm32eforth.s:3486   .text.reset_handler:0000000000001a34 $d
       stm32eforth.s:3487   .text.reset_handler:0000000000001a38 $t
       stm32eforth.s:3493   .text.reset_handler:0000000000001a40 $d
       stm32eforth.s:3494   .text.reset_handler:0000000000001a44 _UNTIL
       stm32eforth.s:3496   .text.reset_handler:0000000000001a4a $t
       stm32eforth.s:3497   .text.reset_handler:0000000000001a4c UNTIL
       stm32eforth.s:3500   .text.reset_handler:0000000000001a54 $d
       stm32eforth.s:3501   .text.reset_handler:0000000000001a58 $t
       stm32eforth.s:3507   .text.reset_handler:0000000000001a60 $d
       stm32eforth.s:3508   .text.reset_handler:0000000000001a64 _AGAIN
       stm32eforth.s:3510   .text.reset_handler:0000000000001a6a $t
       stm32eforth.s:3511   .text.reset_handler:0000000000001a6c AGAIN
       stm32eforth.s:3514   .text.reset_handler:0000000000001a74 $d
       stm32eforth.s:3515   .text.reset_handler:0000000000001a78 $t
       stm32eforth.s:3521   .text.reset_handler:0000000000001a80 $d
       stm32eforth.s:3522   .text.reset_handler:0000000000001a84 _IFF
       stm32eforth.s:3525   .text.reset_handler:0000000000001a88 IFF
       stm32eforth.s:3528   .text.reset_handler:0000000000001a90 $d
       stm32eforth.s:3529   .text.reset_handler:0000000000001a94 $t
       stm32eforth.s:3531   .text.reset_handler:0000000000001a9c $d
       stm32eforth.s:3532   .text.reset_handler:0000000000001aa0 $t
       stm32eforth.s:3539   .text.reset_handler:0000000000001aac $d
       stm32eforth.s:3540   .text.reset_handler:0000000000001ab0 _AHEAD
       stm32eforth.s:3542   .text.reset_handler:0000000000001ab6 $t
       stm32eforth.s:3543   .text.reset_handler:0000000000001ab8 AHEAD
       stm32eforth.s:3546   .text.reset_handler:0000000000001ac0 $d
       stm32eforth.s:3547   .text.reset_handler:0000000000001ac4 $t
       stm32eforth.s:3549   .text.reset_handler:0000000000001acc $d
       stm32eforth.s:3550   .text.reset_handler:0000000000001ad0 $t
       stm32eforth.s:3557   .text.reset_handler:0000000000001adc $d
       stm32eforth.s:3558   .text.reset_handler:0000000000001ae0 _REPEA
       stm32eforth.s:3561   .text.reset_handler:0000000000001ae8 REPEA
       stm32eforth.s:3572   .text.reset_handler:0000000000001b00 $d
       stm32eforth.s:3573   .text.reset_handler:0000000000001b04 _THENN
       stm32eforth.s:3576   .text.reset_handler:0000000000001b0c THENN
       stm32eforth.s:3586   .text.reset_handler:0000000000001b20 $d
ARM GAS  stm32eforth.s 			page 97


       stm32eforth.s:3587   .text.reset_handler:0000000000001b24 _AFT
       stm32eforth.s:3589   .text.reset_handler:0000000000001b28 $t
       stm32eforth.s:3590   .text.reset_handler:0000000000001b28 AFT
       stm32eforth.s:3601   .text.reset_handler:0000000000001b40 $d
       stm32eforth.s:3602   .text.reset_handler:0000000000001b44 _ELSEE
       stm32eforth.s:3605   .text.reset_handler:0000000000001b4c ELSEE
       stm32eforth.s:3615   .text.reset_handler:0000000000001b60 $d
       stm32eforth.s:3616   .text.reset_handler:0000000000001b64 _WHILE
       stm32eforth.s:3618   .text.reset_handler:0000000000001b6a $t
       stm32eforth.s:3619   .text.reset_handler:0000000000001b6c WHILE
       stm32eforth.s:3628   .text.reset_handler:0000000000001b7c $d
       stm32eforth.s:3629   .text.reset_handler:0000000000001b80 _ABRTQ
       stm32eforth.s:3632   .text.reset_handler:0000000000001b88 ABRTQ
       stm32eforth.s:3635   .text.reset_handler:0000000000001b90 $d
       stm32eforth.s:3636   .text.reset_handler:0000000000001b94 $t
       stm32eforth.s:3642   .text.reset_handler:0000000000001b9c $d
       stm32eforth.s:3643   .text.reset_handler:0000000000001ba0 _STRQ
       stm32eforth.s:3646   .text.reset_handler:0000000000001ba4 STRQ
       stm32eforth.s:3649   .text.reset_handler:0000000000001bac $d
       stm32eforth.s:3650   .text.reset_handler:0000000000001bb0 $t
       stm32eforth.s:3656   .text.reset_handler:0000000000001bb8 $d
       stm32eforth.s:3657   .text.reset_handler:0000000000001bbc _DOTQ
       stm32eforth.s:3660   .text.reset_handler:0000000000001bc0 DOTQ
       stm32eforth.s:3663   .text.reset_handler:0000000000001bc8 $d
       stm32eforth.s:3664   .text.reset_handler:0000000000001bcc $t
       stm32eforth.s:3673   .text.reset_handler:0000000000001bd4 $d
       stm32eforth.s:3674   .text.reset_handler:0000000000001bd8 _UNIQU
       stm32eforth.s:3676   .text.reset_handler:0000000000001be0 $t
       stm32eforth.s:3677   .text.reset_handler:0000000000001be0 UNIQU
       stm32eforth.s:3682   .text.reset_handler:0000000000001bf0 $d
       stm32eforth.s:3690   .text.reset_handler:0000000000001c0c UNIQ1
       stm32eforth.s:3683   .text.reset_handler:0000000000001bf4 $t
       stm32eforth.s:3684   .text.reset_handler:0000000000001bf8 $d
       stm32eforth.s:3686   .text.reset_handler:0000000000001c00 $t
       stm32eforth.s:3701   .text.reset_handler:0000000000001c14 SNAME
       stm32eforth.s:3706   .text.reset_handler:0000000000001c24 $d
       stm32eforth.s:3720   .text.reset_handler:0000000000001c5c SNAM1
       stm32eforth.s:3707   .text.reset_handler:0000000000001c28 $t
       stm32eforth.s:3722   .text.reset_handler:0000000000001c60 $d
       stm32eforth.s:3724   .text.reset_handler:0000000000001c68 $t
       stm32eforth.s:3729   .text.reset_handler:0000000000001c6c $d
       stm32eforth.s:3730   .text.reset_handler:0000000000001c70 _SCOMP
       stm32eforth.s:3732   .text.reset_handler:0000000000001c7a $t
       stm32eforth.s:3733   .text.reset_handler:0000000000001c7c SCOMP
       stm32eforth.s:3738   .text.reset_handler:0000000000001c8c $d
       stm32eforth.s:3750   .text.reset_handler:0000000000001cb8 SCOM2
       stm32eforth.s:3739   .text.reset_handler:0000000000001c90 $t
       stm32eforth.s:3741   .text.reset_handler:0000000000001c98 $d
       stm32eforth.s:3742   .text.reset_handler:0000000000001c9c $t
       stm32eforth.s:3744   .text.reset_handler:0000000000001ca4 $d
       stm32eforth.s:3747   .text.reset_handler:0000000000001cb0 SCOM1
       stm32eforth.s:3745   .text.reset_handler:0000000000001ca8 $t
       stm32eforth.s:3753   .text.reset_handler:0000000000001cc0 $d
       stm32eforth.s:3756   .text.reset_handler:0000000000001ccc SCOM3
       stm32eforth.s:3754   .text.reset_handler:0000000000001cc4 $t
       stm32eforth.s:3762   .text.reset_handler:0000000000001cd0 $d
       stm32eforth.s:3763   .text.reset_handler:0000000000001cd4 _OVERT
ARM GAS  stm32eforth.s 			page 98


       stm32eforth.s:3765   .text.reset_handler:0000000000001cda $t
       stm32eforth.s:3766   .text.reset_handler:0000000000001cdc OVERT
       stm32eforth.s:3778   .text.reset_handler:0000000000001cf4 $d
       stm32eforth.s:3779   .text.reset_handler:0000000000001cf8 _SEMIS
       stm32eforth.s:3781   .text.reset_handler:0000000000001cfc $t
       stm32eforth.s:3782   .text.reset_handler:0000000000001cfc SEMIS
       stm32eforth.s:3795   .text.reset_handler:0000000000001d18 $d
       stm32eforth.s:3796   .text.reset_handler:0000000000001d1c _RBRAC
       stm32eforth.s:3798   .text.reset_handler:0000000000001d1e $t
       stm32eforth.s:3799   .text.reset_handler:0000000000001d20 RBRAC
       stm32eforth.s:3802   .text.reset_handler:0000000000001d28 $d
       stm32eforth.s:3803   .text.reset_handler:0000000000001d2c $t
       stm32eforth.s:3836   .text.reset_handler:0000000000001d74 $d
       stm32eforth.s:3837   .text.reset_handler:0000000000001d78 _COLON
       stm32eforth.s:3839   .text.reset_handler:0000000000001d7a $t
       stm32eforth.s:3840   .text.reset_handler:0000000000001d7c COLON
       stm32eforth.s:3853   .text.reset_handler:0000000000001d9c $d
       stm32eforth.s:3854   .text.reset_handler:0000000000001da0 _IMMED
       stm32eforth.s:3856   .text.reset_handler:0000000000001daa $t
       stm32eforth.s:3857   .text.reset_handler:0000000000001dac IMMED
       stm32eforth.s:3860   .text.reset_handler:0000000000001db4 $d
       stm32eforth.s:3861   .text.reset_handler:0000000000001db8 $t
       stm32eforth.s:3876   .text.reset_handler:0000000000001dd8 $d
       stm32eforth.s:3877   .text.reset_handler:0000000000001ddc _CONST
       stm32eforth.s:3880   .text.reset_handler:0000000000001de8 CONST
       stm32eforth.s:3889   .text.reset_handler:0000000000001e08 $d
       stm32eforth.s:3890   .text.reset_handler:0000000000001e0c $t
       stm32eforth.s:3897   .text.reset_handler:0000000000001e18 $d
       stm32eforth.s:3898   .text.reset_handler:0000000000001e1c _CREAT
       stm32eforth.s:3901   .text.reset_handler:0000000000001e24 CREAT
       stm32eforth.s:3910   .text.reset_handler:0000000000001e44 $d
       stm32eforth.s:3911   .text.reset_handler:0000000000001e48 $t
       stm32eforth.s:3917   .text.reset_handler:0000000000001e50 $d
       stm32eforth.s:3918   .text.reset_handler:0000000000001e54 _VARIA
       stm32eforth.s:3921   .text.reset_handler:0000000000001e60 VARIA
       stm32eforth.s:3925   .text.reset_handler:0000000000001e6c $d
       stm32eforth.s:3926   .text.reset_handler:0000000000001e70 $t
       stm32eforth.s:3939   .text.reset_handler:0000000000001e78 DMP
       stm32eforth.s:3943   .text.reset_handler:0000000000001e84 $d
       stm32eforth.s:3944   .text.reset_handler:0000000000001e88 $t
       stm32eforth.s:3955   .text.reset_handler:0000000000001eb0 PDUM2
       stm32eforth.s:3948   .text.reset_handler:0000000000001e98 PDUM1
       stm32eforth.s:3952   .text.reset_handler:0000000000001ea4 $d
       stm32eforth.s:3953   .text.reset_handler:0000000000001ea8 $t
       stm32eforth.s:3957   .text.reset_handler:0000000000001eb4 $d
       stm32eforth.s:3958   .text.reset_handler:0000000000001eb8 $t
       stm32eforth.s:3963   .text.reset_handler:0000000000001ebc $d
       stm32eforth.s:3964   .text.reset_handler:0000000000001ec0 _DUMP
       stm32eforth.s:3967   .text.reset_handler:0000000000001ec8 DUMP
       stm32eforth.s:3974   .text.reset_handler:0000000000001ee0 $d
       stm32eforth.s:3975   .text.reset_handler:0000000000001ee4 $t
       stm32eforth.s:3989   .text.reset_handler:0000000000001f18 DUMP4
       stm32eforth.s:3978   .text.reset_handler:0000000000001ef0 DUMP1
       stm32eforth.s:3981   .text.reset_handler:0000000000001ef8 $d
       stm32eforth.s:3982   .text.reset_handler:0000000000001efc $t
       stm32eforth.s:3991   .text.reset_handler:0000000000001f1c $d
       stm32eforth.s:3992   .text.reset_handler:0000000000001f20 DUMP3
ARM GAS  stm32eforth.s 			page 99


       stm32eforth.s:3993   .text.reset_handler:0000000000001f20 $t
       stm32eforth.s:4002   .text.reset_handler:0000000000001f34 $d
       stm32eforth.s:4003   .text.reset_handler:0000000000001f38 _DOTS
       stm32eforth.s:4007   .text.reset_handler:0000000000001f3c DOTS
       stm32eforth.s:4017   .text.reset_handler:0000000000001f5c DOTS2
       stm32eforth.s:4013   .text.reset_handler:0000000000001f50 DOTS1
       stm32eforth.s:4019   .text.reset_handler:0000000000001f60 $d
       stm32eforth.s:4020   .text.reset_handler:0000000000001f64 $t
       stm32eforth.s:4026   .text.reset_handler:0000000000001f6c $d
       stm32eforth.s:4027   .text.reset_handler:0000000000001f70 _TNAME
       stm32eforth.s:4029   .text.reset_handler:0000000000001f76 $t
       stm32eforth.s:4030   .text.reset_handler:0000000000001f78 TNAME
       stm32eforth.s:4035   .text.reset_handler:0000000000001f88 TNAM1
       stm32eforth.s:4038   .text.reset_handler:0000000000001f90 $d
       stm32eforth.s:4048   .text.reset_handler:0000000000001fb8 TNAM2
       stm32eforth.s:4039   .text.reset_handler:0000000000001f94 $t
       stm32eforth.s:4044   .text.reset_handler:0000000000001fa8 $d
       stm32eforth.s:4045   .text.reset_handler:0000000000001fac $t
       stm32eforth.s:4056   .text.reset_handler:0000000000001fc4 $d
       stm32eforth.s:4057   .text.reset_handler:0000000000001fc8 _DOTID
       stm32eforth.s:4059   .text.reset_handler:0000000000001fcc $t
       stm32eforth.s:4060   .text.reset_handler:0000000000001fcc DOTID
       stm32eforth.s:4064   .text.reset_handler:0000000000001fd8 $d
       stm32eforth.s:4071   .text.reset_handler:0000000000001ff4 DOTI1
       stm32eforth.s:4065   .text.reset_handler:0000000000001fdc $t
       stm32eforth.s:4067   .text.reset_handler:0000000000001fe4 $d
       stm32eforth.s:4068   .text.reset_handler:0000000000001fe8 $t
       stm32eforth.s:4073   .text.reset_handler:0000000000001ff8 $d
       stm32eforth.s:4075   .text.reset_handler:0000000000002002 $t
       stm32eforth.s:4081   .text.reset_handler:0000000000002008 $d
       stm32eforth.s:4082   .text.reset_handler:000000000000200c _SEE
       stm32eforth.s:4084   .text.reset_handler:0000000000002010 $t
       stm32eforth.s:4085   .text.reset_handler:0000000000002010 SEE
       stm32eforth.s:4090   .text.reset_handler:0000000000002020 $d
       stm32eforth.s:4091   .text.reset_handler:0000000000002024 $t
       stm32eforth.s:4092   .text.reset_handler:0000000000002028 SEE1
       stm32eforth.s:4109   .text.reset_handler:0000000000002054 DECOMP
       stm32eforth.s:4097   .text.reset_handler:0000000000002038 $d
       stm32eforth.s:4098   .text.reset_handler:000000000000203c $t
       stm32eforth.s:4104   .text.reset_handler:0000000000002044 $d
       stm32eforth.s:4105   .text.reset_handler:0000000000002048 _DECOM
       stm32eforth.s:4107   .text.reset_handler:0000000000002052 $t
       stm32eforth.s:4116   .text.reset_handler:0000000000002068 $d
       stm32eforth.s:4117   .text.reset_handler:000000000000206c $t
       stm32eforth.s:4119   .text.reset_handler:0000000000002074 $d
       stm32eforth.s:4120   .text.reset_handler:0000000000002078 $t
       stm32eforth.s:4122   .text.reset_handler:0000000000002080 $d
       stm32eforth.s:4148   .text.reset_handler:00000000000020d8 DECOM2
       stm32eforth.s:4124   .text.reset_handler:0000000000002084 $t
       stm32eforth.s:4138   .text.reset_handler:00000000000020b8 $d
       stm32eforth.s:4144   .text.reset_handler:00000000000020cc DECOM1
       stm32eforth.s:4139   .text.reset_handler:00000000000020bc $t
       stm32eforth.s:4157   .text.reset_handler:00000000000020e4 $d
       stm32eforth.s:4158   .text.reset_handler:00000000000020e8 _WORDS
       stm32eforth.s:4160   .text.reset_handler:00000000000020ee $t
       stm32eforth.s:4161   .text.reset_handler:00000000000020f0 WORDS
       stm32eforth.s:4166   .text.reset_handler:0000000000002100 WORS1
ARM GAS  stm32eforth.s 			page 100


       stm32eforth.s:4169   .text.reset_handler:0000000000002108 $d
       stm32eforth.s:4176   .text.reset_handler:0000000000002124 WORS2
       stm32eforth.s:4170   .text.reset_handler:000000000000210c $t
       stm32eforth.s:4190   .text.reset_handler:0000000000002128 VERSN
       stm32eforth.s:4193   .text.reset_handler:0000000000002130 $d
       stm32eforth.s:4194   .text.reset_handler:0000000000002134 $t
       stm32eforth.s:4200   .text.reset_handler:0000000000002138 $d
       stm32eforth.s:4201   .text.reset_handler:000000000000213c _HI
       stm32eforth.s:4208   .text.reset_handler:000000000000214c $d
       stm32eforth.s:4210   .text.reset_handler:0000000000002164 $t
       stm32eforth.s:4219   .text.reset_handler:0000000000002184 $d
       stm32eforth.s:4220   .text.reset_handler:0000000000002188 $t
       stm32eforth.s:4233   .text.reset_handler:00000000000021a8 $d
       stm32eforth.s:4247   .text.reset_handler:00000000000021ce COLD1
       stm32eforth.s:4249   .text.reset_handler:00000000000021d2 $d
       stm32eforth.s:4250   .text.reset_handler:00000000000021d6 $t
       stm32eforth.s:4252   .text.reset_handler:00000000000021de $d
       stm32eforth.s:4253   .text.reset_handler:00000000000021e2 $t
       stm32eforth.s:4254   .text.reset_handler:00000000000021e6 $d
       stm32eforth.s:4255   .text.reset_handler:00000000000021ea $t
       stm32eforth.s:4256   .text.reset_handler:00000000000021ee $d
       stm32eforth.s:4257   .text.reset_handler:00000000000021f2 $t
       stm32eforth.s:4263   .text.reset_handler:000000000000220a COLD2
       stm32eforth.s:4265   .text.reset_handler:000000000000220a $d
       stm32eforth.s:4268   .text.reset_handler:0000000000002210 $d
       stm32eforth.s:257    .text.default_handler:0000000000000056 $d
       stm32eforth.s:4268   .text.default_handler:0000000000000058 $d
       stm32eforth.s:226    .text.default_handler:0000000000000025 $d
       stm32eforth.s:226    .text.default_handler:0000000000000026 $t
       stm32eforth.s:480    .text.reset_handler:0000000000000145 $d
       stm32eforth.s:480    .text.reset_handler:0000000000000146 $t
       stm32eforth.s:500    .text.reset_handler:000000000000016d $d
       stm32eforth.s:500    .text.reset_handler:000000000000016e $t
       stm32eforth.s:525    .text.reset_handler:00000000000001a1 $d
       stm32eforth.s:525    .text.reset_handler:00000000000001a2 $t
       stm32eforth.s:644    .text.reset_handler:0000000000000241 $d
       stm32eforth.s:644    .text.reset_handler:0000000000000242 $t
       stm32eforth.s:678    .text.reset_handler:000000000000026f $d
       stm32eforth.s:678    .text.reset_handler:0000000000000270 $t
       stm32eforth.s:691    .text.reset_handler:0000000000000283 $d
       stm32eforth.s:691    .text.reset_handler:0000000000000284 $t
       stm32eforth.s:702    .text.reset_handler:000000000000028f $d
       stm32eforth.s:702    .text.reset_handler:0000000000000290 $t
       stm32eforth.s:715    .text.reset_handler:00000000000002a3 $d
       stm32eforth.s:715    .text.reset_handler:00000000000002a4 $t
       stm32eforth.s:727    .text.reset_handler:00000000000002b3 $d
       stm32eforth.s:727    .text.reset_handler:00000000000002b4 $t
       stm32eforth.s:752    .text.reset_handler:00000000000002d9 $d
       stm32eforth.s:752    .text.reset_handler:00000000000002da $t
       stm32eforth.s:776    .text.reset_handler:00000000000002fd $d
       stm32eforth.s:776    .text.reset_handler:00000000000002fe $t
       stm32eforth.s:789    .text.reset_handler:0000000000000311 $d
       stm32eforth.s:789    .text.reset_handler:0000000000000312 $t
       stm32eforth.s:801    .text.reset_handler:0000000000000323 $d
       stm32eforth.s:801    .text.reset_handler:0000000000000324 $t
       stm32eforth.s:827    .text.reset_handler:000000000000034b $d
       stm32eforth.s:827    .text.reset_handler:000000000000034c $t
ARM GAS  stm32eforth.s 			page 101


       stm32eforth.s:868    .text.reset_handler:000000000000038f $d
       stm32eforth.s:868    .text.reset_handler:0000000000000390 $t
       stm32eforth.s:881    .text.reset_handler:00000000000003a7 $d
       stm32eforth.s:881    .text.reset_handler:00000000000003a8 $t
       stm32eforth.s:946    .text.reset_handler:0000000000000407 $d
       stm32eforth.s:946    .text.reset_handler:0000000000000408 $t
       stm32eforth.s:960    .text.reset_handler:000000000000041b $d
       stm32eforth.s:960    .text.reset_handler:000000000000041c $t
       stm32eforth.s:972    .text.reset_handler:000000000000042b $d
       stm32eforth.s:972    .text.reset_handler:000000000000042c $t
       stm32eforth.s:984    .text.reset_handler:000000000000043b $d
       stm32eforth.s:984    .text.reset_handler:000000000000043c $t
       stm32eforth.s:996    .text.reset_handler:000000000000044b $d
       stm32eforth.s:996    .text.reset_handler:000000000000044c $t
       stm32eforth.s:1032   .text.reset_handler:0000000000000483 $d
       stm32eforth.s:1032   .text.reset_handler:0000000000000484 $t
       stm32eforth.s:1069   .text.reset_handler:00000000000004bf $d
       stm32eforth.s:1069   .text.reset_handler:00000000000004c0 $t
       stm32eforth.s:1081   .text.reset_handler:00000000000004cf $d
       stm32eforth.s:1081   .text.reset_handler:00000000000004d0 $t
       stm32eforth.s:1093   .text.reset_handler:00000000000004e1 $d
       stm32eforth.s:1093   .text.reset_handler:00000000000004e2 $t
       stm32eforth.s:1135   .text.reset_handler:0000000000000525 $d
       stm32eforth.s:1135   .text.reset_handler:0000000000000526 $t
       stm32eforth.s:1148   .text.reset_handler:000000000000053b $d
       stm32eforth.s:1148   .text.reset_handler:000000000000053c $t
       stm32eforth.s:1176   .text.reset_handler:000000000000056b $d
       stm32eforth.s:1176   .text.reset_handler:000000000000056c $t
       stm32eforth.s:1217   .text.reset_handler:00000000000005a7 $d
       stm32eforth.s:1217   .text.reset_handler:00000000000005a8 $t
       stm32eforth.s:1290   .text.reset_handler:0000000000000617 $d
       stm32eforth.s:1290   .text.reset_handler:0000000000000618 $t
       stm32eforth.s:1305   .text.reset_handler:000000000000062f $d
       stm32eforth.s:1305   .text.reset_handler:0000000000000630 $t
       stm32eforth.s:1320   .text.reset_handler:000000000000064b $d
       stm32eforth.s:1320   .text.reset_handler:000000000000064c $t
       stm32eforth.s:1430   .text.reset_handler:00000000000006f5 $d
       stm32eforth.s:1430   .text.reset_handler:00000000000006f6 $t
       stm32eforth.s:1456   .text.reset_handler:0000000000000719 $d
       stm32eforth.s:1456   .text.reset_handler:000000000000071a $t
       stm32eforth.s:1482   .text.reset_handler:0000000000000745 $d
       stm32eforth.s:1482   .text.reset_handler:0000000000000746 $t
       stm32eforth.s:1535   .text.reset_handler:000000000000079f $d
       stm32eforth.s:1535   .text.reset_handler:00000000000007a0 $t
       stm32eforth.s:1547   .text.reset_handler:00000000000007b5 $d
       stm32eforth.s:1547   .text.reset_handler:00000000000007b6 $t
       stm32eforth.s:1560   .text.reset_handler:00000000000007cd $d
       stm32eforth.s:1560   .text.reset_handler:00000000000007ce $t
       stm32eforth.s:1576   .text.reset_handler:00000000000007e7 $d
       stm32eforth.s:1576   .text.reset_handler:00000000000007e8 $t
       stm32eforth.s:1595   .text.reset_handler:0000000000000813 $d
       stm32eforth.s:1595   .text.reset_handler:0000000000000814 $t
       stm32eforth.s:1666   .text.reset_handler:00000000000008c5 $d
       stm32eforth.s:1666   .text.reset_handler:00000000000008c6 $t
       stm32eforth.s:1723   .text.reset_handler:000000000000093f $d
       stm32eforth.s:1723   .text.reset_handler:0000000000000940 $t
       stm32eforth.s:1797   .text.reset_handler:00000000000009ed $d
ARM GAS  stm32eforth.s 			page 102


       stm32eforth.s:1797   .text.reset_handler:00000000000009ee $t
       stm32eforth.s:1817   .text.reset_handler:0000000000000a15 $d
       stm32eforth.s:1817   .text.reset_handler:0000000000000a16 $t
       stm32eforth.s:1859   .text.reset_handler:0000000000000a65 $d
       stm32eforth.s:1859   .text.reset_handler:0000000000000a66 $t
       stm32eforth.s:1900   .text.reset_handler:0000000000000ab5 $d
       stm32eforth.s:1900   .text.reset_handler:0000000000000ab6 $t
       stm32eforth.s:1925   .text.reset_handler:0000000000000ae9 $d
       stm32eforth.s:1925   .text.reset_handler:0000000000000aea $t
       stm32eforth.s:1948   .text.reset_handler:0000000000000b17 $d
       stm32eforth.s:1948   .text.reset_handler:0000000000000b18 $t
       stm32eforth.s:2017   .text.reset_handler:0000000000000bd3 $d
       stm32eforth.s:2017   .text.reset_handler:0000000000000bd4 $t
       stm32eforth.s:2032   .text.reset_handler:0000000000000bf1 $d
       stm32eforth.s:2032   .text.reset_handler:0000000000000bf2 $t
       stm32eforth.s:2066   .text.reset_handler:0000000000000c3f $d
       stm32eforth.s:2066   .text.reset_handler:0000000000000c40 $t
       stm32eforth.s:2085   .text.reset_handler:0000000000000c65 $d
       stm32eforth.s:2085   .text.reset_handler:0000000000000c66 $t
       stm32eforth.s:2103   .text.reset_handler:0000000000000c8f $d
       stm32eforth.s:2103   .text.reset_handler:0000000000000c90 $t
       stm32eforth.s:2174   .text.reset_handler:0000000000000d27 $d
       stm32eforth.s:2174   .text.reset_handler:0000000000000d28 $t
       stm32eforth.s:2328   .text.reset_handler:0000000000000eff $d
       stm32eforth.s:2328   .text.reset_handler:0000000000000f00 $t
       stm32eforth.s:2350   .text.reset_handler:0000000000000f31 $d
       stm32eforth.s:2350   .text.reset_handler:0000000000000f32 $t
       stm32eforth.s:2372   .text.reset_handler:0000000000000f63 $d
       stm32eforth.s:2372   .text.reset_handler:0000000000000f64 $t
       stm32eforth.s:2450   .text.reset_handler:0000000000000feb $d
       stm32eforth.s:2450   .text.reset_handler:0000000000000fec $t
       stm32eforth.s:2488   .text.reset_handler:000000000000104b $d
       stm32eforth.s:2488   .text.reset_handler:000000000000104c $t
       stm32eforth.s:2660   .text.reset_handler:0000000000001233 $d
       stm32eforth.s:2660   .text.reset_handler:0000000000001234 $t
       stm32eforth.s:2705   .text.reset_handler:0000000000001295 $d
       stm32eforth.s:2705   .text.reset_handler:0000000000001296 $t
       stm32eforth.s:2720   .text.reset_handler:00000000000012b9 $d
       stm32eforth.s:2720   .text.reset_handler:00000000000012ba $t
       stm32eforth.s:2974   .text.reset_handler:000000000000154f $d
       stm32eforth.s:2974   .text.reset_handler:0000000000001550 $t
       stm32eforth.s:3151   .text.reset_handler:0000000000001713 $d
       stm32eforth.s:3151   .text.reset_handler:0000000000001714 $t
       stm32eforth.s:3159   .text.reset_handler:000000000000172f $d
       stm32eforth.s:3159   .text.reset_handler:0000000000001730 $t
       stm32eforth.s:3168   .text.reset_handler:000000000000173d $d
       stm32eforth.s:3168   .text.reset_handler:000000000000173e $t
       stm32eforth.s:3193   .text.reset_handler:000000000000177f $d
       stm32eforth.s:3193   .text.reset_handler:0000000000001780 $t
       stm32eforth.s:3208   .text.reset_handler:000000000000179d $d
       stm32eforth.s:3208   .text.reset_handler:000000000000179e $t
       stm32eforth.s:3252   .text.reset_handler:0000000000001801 $d
       stm32eforth.s:3252   .text.reset_handler:0000000000001802 $t
       stm32eforth.s:3275   .text.reset_handler:0000000000001837 $d
       stm32eforth.s:3275   .text.reset_handler:0000000000001838 $t
       stm32eforth.s:3482   .text.reset_handler:0000000000001a29 $d
       stm32eforth.s:3482   .text.reset_handler:0000000000001a2a $t
ARM GAS  stm32eforth.s 			page 103


       stm32eforth.s:3524   .text.reset_handler:0000000000001a87 $d
       stm32eforth.s:3524   .text.reset_handler:0000000000001a88 $t
       stm32eforth.s:3560   .text.reset_handler:0000000000001ae7 $d
       stm32eforth.s:3560   .text.reset_handler:0000000000001ae8 $t
       stm32eforth.s:3575   .text.reset_handler:0000000000001b09 $d
       stm32eforth.s:3575   .text.reset_handler:0000000000001b0a $t
       stm32eforth.s:3604   .text.reset_handler:0000000000001b49 $d
       stm32eforth.s:3604   .text.reset_handler:0000000000001b4a $t
       stm32eforth.s:3631   .text.reset_handler:0000000000001b87 $d
       stm32eforth.s:3631   .text.reset_handler:0000000000001b88 $t
       stm32eforth.s:3645   .text.reset_handler:0000000000001ba3 $d
       stm32eforth.s:3645   .text.reset_handler:0000000000001ba4 $t
       stm32eforth.s:3659   .text.reset_handler:0000000000001bbf $d
       stm32eforth.s:3659   .text.reset_handler:0000000000001bc0 $t
       stm32eforth.s:3879   .text.reset_handler:0000000000001de5 $d
       stm32eforth.s:3879   .text.reset_handler:0000000000001de6 $t
       stm32eforth.s:3900   .text.reset_handler:0000000000001e23 $d
       stm32eforth.s:3900   .text.reset_handler:0000000000001e24 $t
       stm32eforth.s:3920   .text.reset_handler:0000000000001e5d $d
       stm32eforth.s:3920   .text.reset_handler:0000000000001e5e $t
       stm32eforth.s:3966   .text.reset_handler:0000000000001ec5 $d
       stm32eforth.s:3966   .text.reset_handler:0000000000001ec6 $t
       stm32eforth.s:4006   .text.reset_handler:0000000000001f3b $d
       stm32eforth.s:4006   .text.reset_handler:0000000000001f3c $t
       stm32eforth.s:4203   .text.reset_handler:000000000000213f $d
       stm32eforth.s:4203   .text.reset_handler:0000000000002140 $t
       stm32eforth.s:4236   .text.reset_handler:00000000000021b1 $d
       stm32eforth.s:4236   .text.reset_handler:00000000000021b2 $t

UNDEFINED SYMBOLS
system_var
_rstack
