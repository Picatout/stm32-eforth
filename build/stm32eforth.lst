ARM GAS  stm32eforth.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  stm32eforth.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.p2align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.p2aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m3
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
ARM GAS  stm32eforth.s 			page 3


  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
ARM GAS  stm32eforth.s 			page 4


  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  81              	
  82              	/* blue pill specific constants */ 
  83              	  .equ LED_GPIO, GPIOC_BASE_ADR
  84              	  .equ LED_PIN, 13
  85              	  .equ UART, USART1_BASE_ADR 
  86              	
ARM GAS  stm32eforth.s 			page 5


  87              	/* eForth specific constants */
  88              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  89              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  90              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  91              	.equ UPP ,	0x20000140	/*start of user area (UP0) */
  92              	.equ DTOP ,	0x20000240	/*start of usable RAM area (HERE) */
  93              	.equ DEND , 0x20004E00  /*usable RAM end */
  94              	 .equ RAMOFFSET ,	UPP 	// remap
  95              	 .equ RAMEND, 0x20005000 // 20Ko
  96              	 .equ FLASHOFFSET ,	0x08000c00	// remap
  97              	//.equ RAMOFFSET  ,	0x00000000	/* absolute */
  98              	//.equ MAPOFFSET  ,	0x00000000	/* absolute */
  99              	  .equ MAPOFFSET , (RAMOFFSET-FLASHOFFSET)
 100              	
 101              	/*************************************
 102              	   system variables offset from UPP
 103              	*************************************/
 104              	  .equ SEED_OFS, 4    // prng seed 
 105              	  .equ TICKS_OFS, SEED_OFS+4  // millseconds counter
 106              	  .equ TIMER_OFS, TICKS_OFS+4  // count down timer
 107              	  .equ TORAM_OFS, TIMER_OFS+4  // compile to RAM 
 108              	  .equ IMG_SIGN_OFS, TORAM_OFS+4  // image signature  
 109              	  .equ BOOT_OFS, IMG_SIGN_OFS+4  // boot program address
 110              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
 111              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
 112              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
 113              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
 114              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
 115              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
 116              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
 117              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
 118              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
 119              	  .equ FORTH_CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
 120              	  .equ USER_CTOP_OFS, FORTH_CTOP_OFS+4  // ram free dictionary address
 121              	  .equ LASTN_OFS, USER_CTOP_OFS+4     // last word in dictionary link nfa 
 122              	  .equ VARS_END_OFS, LASTN_OFS+4 // end of system variables  
 123              	  
 124              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
 125              	  .equ RX_QUEUE_OFS, VARS_END_OFS+4 // rx queue 
 126              	  .equ RX_HEAD_OFS, RX_QUEUE_OFS+RX_QUEUE_SIZE // queue head indice 
 127              	  .equ RX_TAIL_OFS, RX_HEAD_OFS+4 // queue tail indice 
 128              	
 129              	
 130              	/***********************************************
 131              	* MACROS
 132              	*	Assemble inline direct threaded code ending.
 133              	***********************************************/
 134              		.macro _CALL fn /* low level routine call */ 
 135              	 	PUSH {LR}
 136              		BL \fn  
 137              		POP {LR}
 138              		.endm
 139              		
 140              		.macro _MOV32 R V 
 141              		MOV \R, #\V&0xffff
 142              		MOVT \R, #\V>>16
 143              		.endm
ARM GAS  stm32eforth.s 			page 6


 144              	
 145              		.macro	_NEXT /*end low level word */
 146              		BX	LR
 147              		.endm
 148              	
 149              	 	.macro	_NEST /*start high level word */
 150              		STMFD	R2!,{LR}
 151              		.endm
 152              	
 153              	 	.macro	_UNNEST	/*end high level word */
 154              		LDMFD	R2!,{PC}
 155              		.endm
 156              	
 157              	 	.macro	_DOLIT /*long literals */
 158              		BL	DOLIT
 159              		.endm
 160              	
 161              	 	.macro	_PUSH	/*push R5 on data stack*/
 162              		STR	R5,[R1,#-4]!
 163              		.endm
 164              	
 165              	 	.macro	_POP /*pop data stack to R5 */
 166              		LDR	R5,[R1],#4
 167              		.endm
 168              	
 169              	/*************************************
 170              	*   interrupt service vectors table 
 171              	**************************************/
 172              	   .section  .isr_vector,"a",%progbits
 173              	  .type  isr_vectors, %object
 174              	
 175              	isr_vectors:
 176 0000 00000000 	  .word   _mstack          /* main return stack address */
 177 0004 00000000 	  .word   reset_handler    /* startup address */
 178              	/* core interrupts || exceptions */
 179 0008 00000000 	  .word   default_handler  /*  NMI */
 180 000c 00000000 	  .word   default_handler  /*  HardFault */
 181 0010 00000000 	  .word   default_handler  /*  Memory Management */
 182 0014 00000000 	  .word   default_handler  /* Bus fault */
 183 0018 00000000 	  .word   default_handler  /* Usage fault */
 184 001c 00000000 	  .word   0
 185 0020 00000000 	  .word   0
 186 0024 00000000 	  .word   0
 187 0028 00000000 	  .word   0
 188 002c 00000000 	  .word   default_handler  /* SWI instruction */
 189 0030 00000000 	  .word   default_handler  /* Debug monitor */
 190 0034 00000000 	  .word   0
 191 0038 00000000 	  .word   default_handler  /* PendSV */
 192 003c 00000000 	  .word   systick_handler  /* Systick */
 193              	  
 194              	  /* External Interrupts */
 195 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 196 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 197 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 198 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 199 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 200 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
ARM GAS  stm32eforth.s 			page 7


 201 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 202 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 203 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 204 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 205 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 206 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 207 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 208 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 209 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 210 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 211 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 212 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 213 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 214 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 215 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 216 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 217 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 218 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 219 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 220 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 221 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 222 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 223 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 224 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 225 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 226 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 227 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 228 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 229 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 230 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 231 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 232 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
 233 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 234 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 235 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 236 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 237 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 238 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 239 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 240 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 241 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 242 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 243 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 244 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 245 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 246 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 247 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 248 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 249 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 250 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 251 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 252 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 253 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 254 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 255              	isr_end:
 256              	  .size  isr_vectors, .-isr_vectors
 257              	
ARM GAS  stm32eforth.s 			page 8


 258              	/*****************************************************
 259              	* default isr handler called on unexpected interrupt
 260              	*****************************************************/
 261              	    .section  .text.default_handler,"ax",%progbits
 262              	
 263              	  .type default_handler, %function
 264              	  .p2align 2 
 265              	  .global default_handler
 266              	default_handler:
 267 0000 014D     		ldr r5,exception_msg 
 268 0002 00F04FF8 		bl uart_puts 
 269 0006 39E0     		b reset_mcu    
 270              	  .size  default_handler, .-default_handler
 271              	exception_msg:
 272 0008 0C000000 		.word .+4 
 273 000c 12       		.byte 18
 274 000d 0A0D6578 		.ascii "\n\rexeption reboot!"
 274      65707469 
 274      6F6E2072 
 274      65626F6F 
 274      7421
 275 001f 00       		.p2align 2
 276              	
 277              	/*********************************
 278              		system milliseconds counter
 279              	*********************************/	
 280              	  .type systick_handler, %function
 281              	  .p2align 2 
 282              	  .global systick_handler
 283              	systick_handler:
 284 0020 4FF4A073 	  _MOV32 r3,UPP
 284      C2F20003 
 285 0028 9868     	  ldr r0,[r3,#TICKS_OFS]  
 286 002a 00F10100 	  add r0,#1
 287 002e 9860     	  str r0,[r3,#TICKS_OFS]
 288 0030 D868     	  ldr r0,[r3,#TIMER_OFS]
 289 0032 10B1     	  cbz r0, systick_exit
 290 0034 A0F10100 	  sub r0,#1
 291 0038 D860     	  str r0,[r3,#TIMER_OFS]
 292              	systick_exit:
 293 003a 7047     	  bx lr
 294              	
 295              	
 296              	
 297              	/**************************
 298              		UART RX handler
 299              	**************************/
 300              		.p2align 2
 301              		.type uart_rx_handler, %function
 302              	uart_rx_handler:
 303 003c 2DE9D002 		push {r4,r6,r7,r9}
 304 0040 4FF46054 		_MOV32 r4,UART 
 304      C4F20104 
 305 0048 2668     		ldr r6,[r4,#USART_SR]
 306 004a D4F80490 		ldr r9,[r4,#USART_DR]
 307 004e 16F0200F 		tst r6,#(1<<5) // RXNE 
 308 0052 0DD0     		beq 2f // no char received 
ARM GAS  stm32eforth.s 			page 9


 309 0054 B9F1030F 		cmp r9,#3
 310 0058 0DD0     		beq user_reboot // received CTRL-C then reboot MCU 
 311 005a 03F15007 		add r7,r3,#RX_QUEUE_OFS
 312 005e 5C6E     		ldr r4,[r3,#RX_TAIL_OFS]
 313 0060 2744     		add r7,r7,r4 
 314 0062 87F80090 		strb r9,[r7]
 315 0066 04F10104 		add r4,#1 
 316 006a 04F00F04 		and r4,#(RX_QUEUE_SIZE-1)
 317 006e 5C66     		str r4,[r3,#RX_TAIL_OFS]
 318              	2:	
 319 0070 BDE8D002 		pop {r4,r6,r7,r9}
 320 0074 7047     		bx lr 
 321              	
 322              	user_reboot:
 323 0076 064D     		ldr r5,user_reboot_msg
 324 0078 00F014F8 		bl uart_puts 
 325              	reset_mcu: 
 326 007c 0348     		ldr r0,scb_adr 
 327 007e C168     		ldr r1,[r0,#SCB_AIRCR]
 328 0080 41F00401 		orr r1,#(1<<2)
 329 0084 C0F2FA51 		movt r1,#SCB_VECTKEY
 330 0088 C160     		str r1,[r0,#SCB_AIRCR]
 331 008a FEE7     		b . 
 332              		.p2align 2 
 333              	scb_adr:
 334 008c 00ED00E0 		.word SCB_BASE_ADR 
 335              	user_reboot_msg:
 336 0090 94000000 		.word .+4
 337 0094 0D       		.byte 13 
 338 0095 0D757365 		.ascii "\ruser reboot!"
 338      72207265 
 338      626F6F74 
 338      21
 339 00a2 00BF     		.p2align 2 
 340              	
 341              	// send counted string to uart 
 342              	// input: r5 string* 
 343              		.type uart_puts,%function 
 344              	uart_puts:
 345 00a4 4FF46050 		_MOV32 r0,UART 
 345      C4F20100 
 346 00ac 15F8011B 		ldrb r1,[r5],#1 // string length
 347 00b0 0940     		ands r1,r1
 348 00b2 0CD0     	1:	beq 9f 
 349 00b4 0268     	2:  ldr r2,[r0,#USART_SR]
 350 00b6 12F08002 		ands r2,#0x80 
 351 00ba FBD0     		beq 2b 	
 352 00bc 15F8012B 		ldrb r2,[r5],#1
 353 00c0 0271     		strb r2,[r0,#USART_DR]
 354 00c2 0139     		subs r1,r1,#1 
 355 00c4 F6D1     		bne 2b 
 356 00c6 0268     	3:	ldr r2,[r0,#USART_SR]
 357 00c8 12F04002 		ands r2,#(1<<6)
 358 00cc FBD0     		beq 3b 
 359 00ce 7047     	9:  bx lr 
 360              	
 361              	
ARM GAS  stm32eforth.s 			page 10


 362              	/**************************************
 363              	  reset_handler execute at MCU reset
 364              	***************************************/
 365              	    .section  .text.reset_handler
 366              	  .type  reset_handler, %function
 367              	  .p2align 2 
 368              	  .global reset_handler
 369              	reset_handler:
 370 0000 00F08FF8 		bl	remap 
 371 0004 00F01CF8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 372 0008 00F06AF8 		bl  uart_init
 373              	//	bl	UNLOCK			/* unlock flash memory */
 374 000c 00F008F8 		bl forth_init 
 375 0010 0248     		ldr r0,forth_entry
 376 0012 40F00100 		orr r0,#1
 377 0016 8047     		blx r0
 378 0018 FFF7FEBF 		b.w .  
 379              		.p2align 2 
 380              	forth_entry:
 381 001c DC200018 		.word COLD+MAPOFFSET 
 382              	
 383              		.type forth_init, %function 
 384              	forth_init:
 385 0020 4FF4A073 		_MOV32 r3,UPP 
 385      C2F20003 
 386 0028 4FF49D41 		_MOV32 R1,SPP
 386      C2F20001 
 387 0030 4FF49F42 		_MOV32 R2,RPP
 387      C2F20002 
 388 0038 85EA0505 		EOR R5,R5  
 389 003c 7047     		BX LR 
 390              	
 391              	  .type init_devices, %function
 392 003e 00BF     	  .p2align 2 
 393              	init_devices:
 394              	/* init clock to HSE 72 Mhz */
 395              	/* set 2 wait states in FLASH_ACR_LATENCY */
 396 0040 4FF40050 	  _MOV32 R0,FLASH_BASE_ADR 
 396      C4F20200 
 397 0048 4FF01202 	  mov r2,#0x12
 398 004c 0260     	  str r2,[r0,#FLASH_ACR]
 399              	/* configure clock for HSE, 8 Mhz crystal */
 400              	/* enable HSE in RCC_CR */
 401 004e 4FF48050 	  _MOV32 R0,RCC_BASE_ADR 
 401      C4F20200 
 402 0056 0168     	  ldr r1,[r0,#RCC_CR]
 403 0058 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 404 005c 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 405              	/* wait HSERDY loop */
 406              	wait_hserdy:
 407 005e 0168     	  ldr r1,[r0,#RCC_CR]
 408 0060 11F4003F 	  tst r1,#(1<<17)
 409 0064 FBD0     	  beq wait_hserdy
 410              	
 411              	/************************************************* 
 412              	   configure PLL mul factor and source 
 413              	   SYSCLOCK=72 Mhz
ARM GAS  stm32eforth.s 			page 11


 414              	   select HSE as  PLL source clock
 415              	   multiply frequency by 9 
 416              	   APB1 clock is limited to 36 Mhz so divide by 2 
 417              	****************************************************/
 418 0066 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 419 006a C0F21D01 	  movt r1,#(7<<2)|1
 420 006e 4160     	  str r1,[r0,#RCC_CFGR]
 421              	  /* enable PLL */
 422 0070 0168     	  ldr r1,[r0,#RCC_CR]
 423 0072 41F08071 	  orr r1, #1<<24 
 424 0076 0160     	  str r1,[r0,#RCC_CR]
 425              	/* wait for PLLRDY */
 426              	wait_pllrdy:
 427 0078 0168     	  ldr r1,[r0,#RCC_CR]
 428 007a 11F0007F 	  tst r1,#(1<<25)
 429 007e FBD0     	  beq wait_pllrdy 
 430              	/* select PLL as sysclock */
 431 0080 4168     	  ldr r1,[r0,#RCC_CFGR]
 432 0082 4FF6FC72 	  _MOV32 r2,0xfffffffc
 432      CFF6FF72 
 433 008a 01EA0201 	  and r1,r1,r2 
 434 008e 4FF00202 	  mov r2,#2
 435 0092 41EA0201 	  orr r1,r1,r2
 436 0096 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 437              	/* wait for SWS==2 */
 438              	wait_sws:
 439 0098 4168     	  ldr r1,[r0,#RCC_CFGR]
 440 009a 11F0080F 	  tst r1,#(2<<2)
 441 009e FBD0     	  beq wait_sws
 442              	/* now sysclock is 72 Mhz */
 443              	
 444              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 445 00a0 4FF48050 	  _MOV32 r0,RCC_BASE_ADR
 445      C4F20200 
 446 00a8 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 447 00ac 8161     	  str	r1, [r0, #RCC_APB2ENR]
 448              	
 449              	/* configure GPIOC:13 as output for user LED */
 450 00ae 4FF48050 	  _MOV32 r0,GPIOC_BASE_ADR 
 450      C4F20100 
 451 00b6 4168     	  ldr r1,[r0,#GPIO_CRH]
 452 00b8 6FF47002 	  mvn r2,#(15<<20)
 453 00bc 01EA0201 	  and r1,r1,r2
 454 00c0 4FF4C002 	  mov r2,#(6<<20)
 455 00c4 41EA0201 	  orr r1,r1,r2
 456 00c8 4160     	  str r1,[r0,#GPIO_CRH]
 457              	
 458              	/* configure systicks for 1msec ticks */
 459 00ca 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 459      CEF20000 
 460 00d2 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 461 00d6 4160     	  str r1,[r0,#STK_LOAD]
 462 00d8 4FF00301 	  mov r1,#3
 463 00dc 0160     	  str r1,[r0,STK_CTL]
 464 00de 7047     	  _NEXT  
 465              	
 466              	/*******************************
ARM GAS  stm32eforth.s 			page 12


 467              	  initialize UART peripheral 
 468              	********************************/
 469              		.type uart_init, %function
 470              	uart_init:
 471              	/* set GPIOA PIN 9, uart TX  */
 472 00e0 4FF40060 	  _MOV32 r0,GPIOA_BASE_ADR
 472      C4F20100 
 473 00e8 4168     	  ldr r1,[r0,#GPIO_CRH]
 474 00ea 6FF0F002 	  mvn r2,#(15<<4)
 475 00ee 01EA0201 	  and r1,r1,r2
 476 00f2 4FF0A002 	  mov r2,#(0xA<<4)
 477 00f6 41EA0201 	  orr r1,r1,r2 
 478 00fa 4160     	  str r1,[r0,#GPIO_CRH]
 479 00fc 4FF46050 	  _MOV32 r0,UART 
 479      C4F20100 
 480              	/* BAUD rate */
 481 0104 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 482 0108 8160     	  str r1,[r0,#USART_BRR]
 483 010a 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 484 010e C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 485              	/* enable interrupt in NVIC */
 486 0110 4FF46140 	  _MOV32 r0,NVIC_BASE_ADR
 486      CEF20000 
 487 0118 4168     	  ldr r1,[r0,#NVIC_ISER1]
 488 011a 41F02001 	  orr r1,#32   
 489 011e 4160     	  str r1,[r0,#NVIC_ISER1]
 490 0120 7047     	  bx lr 
 491              	
 492              	/* copy system to RAM */ 
 493              		.type remap, %function 
 494              	
 495              	remap:
 496              	// tranfert isr_vector to RAM at 0x20000000
 497 0122 4FF00000 		_MOV32 r0,RAM_ADR
 497      C2F20000 
 498 012a 81EA0101 		eor r1,r1
 499 012e 4FF49872 		mov r2,#(isr_end-isr_vectors) 
 500 0132 51F8043B 	1:	ldr r3,[r1],#4
 501 0136 40F8043B 		str r3,[r0],#4
 502 013a 043A     		subs r2,#4
 503 013c F9D1     		bne 1b
 504              	// set new vector table address
 505 013e 4FF46D40 		_MOV32 r0,SCB_BASE_ADR
 505      CEF20000 
 506 0146 4FF00001 		_MOV32 r1,RAM_ADR 
 506      C2F20001 
 507 014e 8160     		str r1,[r0,#SCB_VTOR]
 508              	// copy system variable and code 	
 509 0150 DFF83400 		ldr r0,remap_dest
 510 0154 0B49     		ldr r1,remap_src 
 511 0156 42F60802 		mov r2,#CTOP-UZERO 
 512 015a 02F10302 		add r2,r2,#3
 513 015e 22F00302 		and r2,r2,#~3 
 514 0162 51F8043B 	1:	ldr r3,[r1],#4 
 515 0166 40F8043B 		str r3,[r0],#4 
 516 016a 043A     		subs R2,#4 
 517 016c F9D1     		bne 1b
ARM GAS  stm32eforth.s 			page 13


 518              	// zero end of RAM 
 519 016e 4FF4A042 		_MOV32 r2,RAM_END 
 519      C2F20002 
 520 0176 83EA0303 		eor r3,r3,r3 
 521 017a 40F8043B 	2:  str r3,[r0],#4
 522 017e 9042     		cmp r0,r2 
 523 0180 FBDB     		blt 2b 
 524 0182 7047     		_NEXT 
 525              	remap_src:
 526 0184 00040000 		.word UZERO 
 527              	remap_dest:
 528 0188 40010020 		.word RAMOFFSET 
 529              	
 530              	/********************
 531              	* Version control
 532              	*******************/
 533              	.equ VER ,	0x01	/*major release version */
 534              	.equ EXT ,	0x00	/*minor extension */
 535              	
 536              	/* Constants */
 537              	
 538              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 539              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 540              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 541              	
 542              	.equ CELLL ,	4	/*size of a cell */
 543              	.equ BASEE ,	10	/*default radix */
 544              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 545              	
 546              	.equ BKSPP ,	8	/*backspace */
 547              	.equ LF ,	10	  /*line feed */
 548              	.equ CRR ,	13	/*carriage return */
 549              	.equ ERR ,	27	/*error escape */
 550              	.equ TIC ,	39	/*tick */
 551              	
 552              	/********************************************************
 553              	* RAM memory mapping
 554              	* 	0x20000000	RAM base address
 555              	*	0x20000000  system variables	
 556              	* 	0x20000100	Forth dictionary
 557              	* 	0x2000????	top of dictionary, HERE
 558              	* 	0x2000????	WORD buffer, HERE+16
 559              	*   0x20004E00  end of user space
 560              	* 	0x20004E80	top of data stack  R2
 561              	* 	0x20004E80	TIB terminal input buffer
 562              	* 	0x20004F80	top of return stack  R1
 563              	* 	0x20005000	top of hardware stack for interrupts R14
 564              	********************************************************/
 565              	
 566              	
 567              	/******************************************************
 568              	*  COLD start moves the following to USER variables.
 569              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 570              	******************************************************/
 571 018c AFF30080 		.p2align 10
 571      AFF30080 
 571      AFF30080 
ARM GAS  stm32eforth.s 			page 14


 571      AFF30080 
 571      AFF30080 
 572              	
 573              	UZERO:
 574 0400 00000000 		.word 0  			/*Reserved */
 575 0404 55AA0000 		.word 0xaa55 /* SEED  */ 
 576 0408 00000000 		.word 0      /* MSEC */
 577 040c 00000000 	    .word 0     /* TIMER */
 578 0410 FFFFFFFF 		.word -1    /* >RAM */ 
 579 0414 494D4147 		.ascii "IMAG" /* signature */ 
 580 0418 68200018 		.word HI+MAPOFFSET  /*'BOOT */
 581 041c 0A000000 		.word BASEE 	/*BASE */
 582 0420 00000000 		.word 0			/*tmp */
 583 0424 00000000 		.word 0			/*SPAN */
 584 0428 00000000 		.word 0			/*>IN */
 585 042c 00000000 		.word 0			/*#TIB */
 586 0430 804E0020 		.word TIBB	/*TIB */
 587 0434 500F0018 		.word INTER+MAPOFFSET	/*'EVAL */
 588 0438 00000000 		.word 0			/*HLD */
 589 043c D4200018 		.word LASTN+MAPOFFSET	/*CONTEXT */
 590 0440 48210018 		.word CTOP+MAPOFFSET	/* FCP end of system dictionnary */
 591 0444 48210018 		.word CTOP+MAPOFFSET	/* CP end of RAM dictionary RAM */
 592 0448 D4200018 		.word LASTN+MAPOFFSET	/*LAST word in dictionary */
 593 044c 00000000 		.word 0,0			/*reserved */
 593      00000000 
 594              	ULAST:
 595 0454 00000000 		.space  RX_QUEUE_SIZE+8 /* space reserved for rx_queue,head and tail pointer.
 595      00000000 
 595      00000000 
 595      00000000 
 595      00000000 
 596              	
 597              	
 598              	/***********************************
 599              	//  Start of Forth dictionary
 600              	***********************************/
 601              	
 602              		.p2align 2 
 603              	
 604              	// RANDOM ( n1 -- {0..n1-1} )
 605              	// return pseudo random number 
 606              	// REF: https://en.wikipedia.org/wiki/Xorshift
 607              	
 608 046c 00000000 		.word 0
 609 0470 06       	_RAND: .byte 6
 610 0471 52414E44 		.ascii "RANDOM"
 610      4F4D
 611 0477 00       		.p2align 2 
 612              	RAND:
 613 0478 42F804ED 		_NEST 
 614 047c 00F0E0FA 		bl SEED 
 615 0480 00F0C4F8 		bl AT 
 616 0484 4FEA4534 		lsl r4,r5,#13
 617 0488 85EA0405 		eor r5,r4
 618 048c 4FEA5544 		lsr r4,r5,#17
 619 0490 85EA0405 		eor r5,r4
 620 0494 4FEA4514 		lsl r4,r5,#5
ARM GAS  stm32eforth.s 			page 15


 621 0498 85EA0405 		eor r5,r4
 622 049c 00F0FAF8 		bl DUPP 
 623 04a0 00F0CEFA 		bl SEED 
 624 04a4 00F0A8F8 		bl STORE 
 625 04a8 00F028FA 		bl ABSS
 626 04ac 00F0FAF8 		bl SWAP 
 627 04b0 00F01CFC 		bl MODD 
 628 04b4 52F804FB 		_UNNEST 
 629              	
 630              	// PAUSE ( u -- ) 
 631              	// suspend execution for u milliseconds
 632 04b8 B0F9FF17 		.word _RAND+MAPOFFSET
 633 04bc 05       	_PAUSE: .byte 5
 634 04bd 50415553 		.ascii "PAUSE"
 634      45
 635 04c2 00BF     		.p2align 2
 636              	PAUSE:
 637 04c4 42F804ED 		_NEST 
 638 04c8 00F0CEFA 		BL TIMER 
 639 04cc 00F094F8 		BL STORE 
 640              	PAUSE_LOOP:
 641 04d0 00F0CAFA 		BL TIMER 
 642 04d4 00F09AF8 		BL AT 
 643 04d8 00F072F8 		BL QBRAN 
 644 04dc E8040000 		.word PAUSE_EXIT 
 645 04e0 00F07AF8 		BL BRAN 
 646 04e4 D0040000 		.word PAUSE_LOOP 
 647              	PAUSE_EXIT: 		
 648 04e8 52F804FB 		_UNNEST 
 649              	
 650              	//  ULED ( T|F -- )
 651              	// control user LED, -1 ON, 0 OFF  
 652 04ec FCF9FF17 		.word _PAUSE + MAPOFFSET
 653 04f0 04       	_ULED: .byte 4
 654 04f1 554C4544 		.ascii "ULED"
 655 04f5 0000BF   		.p2align 2
 656              		.type ULED, %function 
 657              	ULED:
 658 04f8 4FF40056 		mov r6,#(1<<LED_PIN)
 659 04fc 4FF48054 		_MOV32 r4,LED_GPIO 
 659      C4F20104 
 660 0504 2800     		movs r0,r5 
 661 0506 51F8045B 		_POP
 662 050a 01D0     		beq ULED_OFF 
 663 050c 6661     		str r6,[r4,#GPIO_BRR]
 664 050e 7047     		_NEXT 
 665              	ULED_OFF:
 666 0510 2661     		str r6,[r4,#GPIO_BSRR]
 667 0512 7047     		_NEXT 
 668              		
 669              	//    ?RX	 ( -- c T | F )
 670              	// 	Return input character and true, or a false if no input.
 671 0514 30FAFF17 		.word	_ULED+MAPOFFSET
 672 0518 04       	_QRX:	.byte   4
 673 0519 3F4B4559 		.ascii "?KEY"
 674 051d 0000BF   		.p2align 2 
 675              	QKEY:
ARM GAS  stm32eforth.s 			page 16


 676              	QRX: 
 677 0520 41F8045D 		_PUSH
 678 0524 5F6E     		ldr r7,[r3,#RX_TAIL_OFS] 
 679 0526 1E6E     		ldr r6,[r3,#RX_HEAD_OFS]
 680 0528 96EA0705 		eors r5,r6,r7 
 681 052c 0CD0     		beq 1f
 682 052e 03F15007 		add r7,r3,#RX_QUEUE_OFS 
 683 0532 3744     		add r7,r6 
 684 0534 3D78     		ldrb r5,[r7]
 685 0536 06F10106 		add r6,#1 
 686 053a 06F00F06 		and r6,#(RX_QUEUE_SIZE-1)
 687 053e 1E66     		str r6,[R3,#RX_HEAD_OFS]
 688 0540 41F8045D 		_PUSH 
 689 0544 4FF0FF35 		mov r5,#-1
 690 0548 7047     	1:	_NEXT 
 691 054a 00BF     		.p2align 2 
 692              	
 693              	//    TX!	 ( c -- )
 694              	// 	Send character c to the output device.
 695              	
 696 054c 58FAFF17 		.word	_QRX+MAPOFFSET
 697 0550 04       	_TXSTO:	.byte 4
 698 0551 454D4954 		.ascii "EMIT"
 699 0555 0000BF   		.p2align 2 	
 700              	TXSTO:
 701              	EMIT:
 702              	TECHO:
 703 0558 4FF46054 		_MOV32 r4,UART 
 703      C4F20104 
 704 0560 2668     	1:	ldr	r6, [r4, #USART_SR]	
 705 0562 16F08006 		ands	r6, #0x80		//  TXE bit 
 706 0566 FBD0     		beq	1b
 707 0568 2571     		strb	r5, [r4, #USART_DR]	
 708 056a 51F8045B 		_POP
 709 056e 7047     		_NEXT 
 710              		
 711              	// **************************************************************************
 712              	//  The kernel
 713              	
 714              	//    NOP	( -- )
 715              	// 	do nothing.
 716              	
 717 0570 90FAFF17 		.word	_TXSTO+MAPOFFSET
 718 0574 03       	_NOP:	.byte   3
 719 0575 4E4F50   		.ascii "NOP"
 720              		.p2align 2 	
 721              	NOP:
 722 0578 7047     		_NEXT
 723              	 
 724              	
 725              	//    doLIT	( -- w )
 726              	// 	Push an inline literal.
 727              	
 728              	// 	.word	_NOP+MAPOFFSET
 729              	// _LIT	.byte   COMPO+5
 730              	// 	.ascii "doLIT"
 731              	// 	.p2align 2 	
ARM GAS  stm32eforth.s 			page 17


 732              	DOLIT:
 733 057a 41F8045D 		_PUSH				//  store R5 on data stack
 734 057e 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 735 0582 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 736 0586 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 737 058a 7047     		_NEXT
 738              	
 739              	//    EXECUTE	( ca -- )
 740              	// 	Execute the word at ca.
 741              	
 742 058c B4FAFF17 		.word	_NOP+MAPOFFSET
 743 0590 07       	_EXECU:	.byte   7
 744 0591 45584543 		.ascii "EXECUTE"
 744      555445
 745              		.p2align 2 	
 746              	EXECU:
 747 0598 45F00104 		ORR	R4,R5,#1		//  b0=1 
 748 059c 51F8045B 		_POP
 749 05a0 2047     		BX	R4
 750              	
 751              	//    next	( -- ) counter on R:
 752              	// 	Run time code for the single index loop.
 753              	// 	: next ( -- ) \ hilevel model
 754              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 755              	
 756              	// 	.word	_EXECU+MAPOFFSET
 757              	// _DONXT	.byte   COMPO+4
 758              	// 	.ascii "next"
 759              	// 	.p2align 2 	
 760              	DONXT:
 761 05a2 1468     		LDR	R4,[R2]   // ( -- u )  
 762 05a4 24B9     		CBNZ R4,NEXT1 
 763              		/* loop done */
 764 05a6 02F10402 		ADD	R2,R2,#4 // drop counter 
 765 05aa 0EF1040E 		ADD	LR,LR,#4 // skip after loop address 
 766 05ae 7047     		_NEXT
 767              	NEXT1:
 768              		/* decrement loop counter */
 769 05b0 A4F10104 		SUB	R4,R4,#1
 770 05b4 1460     		STR	R4,[R2]
 771 05b6 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 772 05ba 4EF0010E 		ORR	LR,LR,#1 // begining of loop
 773 05be 7047     		_NEXT
 774              	
 775              	//    ?branch	( f -- )
 776              	// 	Branch if flag is zero.
 777              	
 778              	// 	.word	_DONXT+MAPOFFSET
 779              	// _QBRAN	.byte   COMPO+7
 780              	// 	.ascii "?branch"
 781              	// 	.p2align 2 	
 782              	QBRAN:
 783 05c0 2C00     		MOVS	R4,R5
 784 05c2 51F8045B 		_POP
 785 05c6 04D1     		BNE	QBRAN1
 786 05c8 5EF801EC 		LDR	LR,[LR,#-1]
 787 05cc 4EF0010E 		ORR LR,LR,#1
ARM GAS  stm32eforth.s 			page 18


 788 05d0 7047     		_NEXT
 789              	QBRAN1:
 790 05d2 0EF1040E 	 	ADD	LR,LR,#4
 791 05d6 7047     		_NEXT
 792              	
 793              	//    branch	( -- )
 794              	// 	Branch to an inline address.
 795              	
 796              	// 	.word	_QBRAN+MAPOFFSET
 797              	// _BRAN	.byte   COMPO+6
 798              	// 	.ascii "branch"
 799              	// 	.p2align 2 	
 800              	BRAN:
 801 05d8 5EF801EC 		LDR	LR,[LR,#-1]
 802 05dc 4EF0010E 		ORR	LR,LR,#1
 803 05e0 7047     		_NEXT
 804              	
 805              	//    EXIT	(  -- )
 806              	// 	Exit the currently executing command.
 807              	
 808 05e2 D0FAFF17 		.word	_EXECU+MAPOFFSET
 809 05e6 04       	_EXIT:	.byte   4
 810 05e7 45584954 		.ascii "EXIT"
 811 05eb 00       		.p2align 2 	
 812              	EXIT:
 813 05ec 52F804FB 		_UNNEST
 814              	
 815              	//    !	   ( w a -- )
 816              	// 	Pop the data stack to memory.
 817              	
 818 05f0 26FBFF17 		.word	_EXIT+MAPOFFSET
 819 05f4 01       	_STORE:	.byte   1
 820 05f5 21       		.ascii "!"
 821 05f6 00BF     		.p2align 2 	
 822              	STORE:
 823 05f8 51F8044B 		LDR	R4,[R1],#4
 824 05fc 2C60     		STR	R4,[R5]
 825 05fe 51F8045B 		_POP
 826 0602 7047     		_NEXT
 827              	
 828              	//    @	   ( a -- w )
 829              	// 	Push memory location to the data stack.
 830              	
 831 0604 34FBFF17 		.word	_STORE+MAPOFFSET
 832 0608 01       	_AT:	.byte   1
 833 0609 40       		.ascii "@"
 834 060a 00BF     		.p2align 2 	
 835              	AT:
 836 060c 2D68     		LDR	R5,[R5]
 837 060e 7047     		_NEXT
 838              	
 839              	//    C!	  ( c b -- )
 840              	// 	Pop the data stack to byte memory.
 841              	
 842 0610 48FBFF17 		.word	_AT+MAPOFFSET
 843 0614 02       	_CSTOR:	.byte   2
 844 0615 4321     		.ascii "C!"
ARM GAS  stm32eforth.s 			page 19


 845 0617 00       		.p2align 2 	
 846              	CSTOR:
 847 0618 51F8044B 		LDR	R4,[R1],#4
 848 061c 2C70     		STRB	R4,[R5]
 849 061e 51F8045B 		_POP
 850 0622 7047     		_NEXT
 851              	
 852              	//    C@	  ( b -- c )
 853              	// 	Push byte memory location to the data stack.
 854              	
 855 0624 54FBFF17 		.word	_CSTOR+MAPOFFSET
 856 0628 02       	_CAT:	.byte   2
 857 0629 4340     		.ascii "C@"
 858 062b 00       		.p2align 2 	
 859              	CAT:
 860 062c 2D78     		LDRB	R5,[R5]
 861 062e 7047     		_NEXT
 862              	
 863              	//    R>	  ( -- w )
 864              	// 	Pop the return stack to the data stack.
 865              	
 866 0630 68FBFF17 		.word	_CAT+MAPOFFSET
 867 0634 02       	_RFROM:	.byte   2
 868 0635 523E     		.ascii "R>"
 869 0637 00       		.p2align 2 	
 870              	RFROM:
 871 0638 41F8045D 		_PUSH
 872 063c 52F8045B 		LDR	R5,[R2],#4
 873 0640 7047     		_NEXT
 874              	
 875              	//    R@	  ( -- w )
 876              	// 	Copy top of return stack to the data stack.
 877              	
 878 0642 74FBFF17 		.word	_RFROM+MAPOFFSET
 879 0646 02       	_RAT:	.byte   2
 880 0647 5240     		.ascii "R@"
 881 0649 0000BF   		.p2align 2 	
 882              	RAT:
 883 064c 41F8045D 		_PUSH
 884 0650 1568     		LDR	R5,[R2]
 885 0652 7047     		_NEXT
 886              	
 887              	//    >R	  ( w -- )
 888              	// 	Push the data stack to the return stack.
 889              	
 890 0654 86FBFF17 		.word	_RAT+MAPOFFSET
 891 0658 42       	_TOR:	.byte   COMPO+2
 892 0659 3E52     		.ascii ">R"
 893 065b 00       		.p2align 2 	
 894              	TOR:
 895 065c 42F8045D 		STR	R5,[R2,#-4]!
 896 0660 51F8045B 		_POP
 897 0664 7047     		_NEXT
 898              	
 899              	//    SP@	 ( -- a )
 900              	// 	Push the current data stack pointer.
 901              	
ARM GAS  stm32eforth.s 			page 20


 902 0666 98FBFF17 		.word	_TOR+MAPOFFSET
 903 066a 03       	_SPAT:	.byte   3
 904 066b 535040   		.ascii "SP@"
 905 066e 00BF     		.p2align 2 	
 906              	SPAT:
 907 0670 41F8045D 		_PUSH
 908 0674 0D46     		MOV	R5,R1
 909 0676 7047     		_NEXT
 910              	
 911              	//    DROP	( w -- )
 912              	// 	Discard top stack item.
 913              	
 914 0678 AAFBFF17 		.word	_SPAT+MAPOFFSET
 915 067c 04       	_DROP:	.byte   4
 916 067d 44524F50 		.ascii "DROP"
 917 0681 0000BF   		.p2align 2 	
 918              	DROP:
 919 0684 51F8045B 		_POP
 920 0688 7047     		_NEXT
 921              	
 922              	//    DUP	 ( w -- w w )
 923              	// 	Duplicate the top stack item.
 924              	
 925 068a BCFBFF17 		.word	_DROP+MAPOFFSET
 926 068e 03       	_DUPP:	.byte   3
 927 068f 445550   		.ascii "DUP"
 928 0692 00BF     		.p2align 2 	
 929              	DUPP:
 930 0694 41F8045D 		_PUSH
 931 0698 7047     		_NEXT
 932              	
 933              	//    SWAP	( w1 w2 -- w2 w1 )
 934              	// 	Exchange top two stack items.
 935              	
 936 069a CEFBFF17 		.word	_DUPP+MAPOFFSET
 937 069e 04       	_SWAP:	.byte   4
 938 069f 53574150 		.ascii "SWAP"
 939 06a3 00       		.p2align 2 	
 940              	SWAP:
 941 06a4 0C68     		LDR	R4,[R1]
 942 06a6 0D60     		STR	R5,[R1]
 943 06a8 2546     		MOV	R5,R4
 944 06aa 7047     		_NEXT
 945              	
 946              	//    OVER	( w1 w2 -- w1 w2 w1 )
 947              	// 	Copy second stack item to top.
 948              	
 949 06ac DEFBFF17 		.word	_SWAP+MAPOFFSET
 950 06b0 04       	_OVER:	.byte   4
 951 06b1 4F564552 		.ascii "OVER"
 952 06b5 0000BF   		.p2align 2 	
 953              	OVER:
 954 06b8 41F8045D 		_PUSH
 955 06bc 4D68     		LDR	R5,[R1,#4]
 956 06be 7047     		_NEXT
 957              	
 958              	//    0<	  ( n -- t )
ARM GAS  stm32eforth.s 			page 21


 959              	// 	Return true if n is negative.
 960              	
 961 06c0 F0FBFF17 		.word	_OVER+MAPOFFSET
 962 06c4 02       	_ZLESS:	.byte   2
 963 06c5 303C     		.ascii "0<"
 964 06c7 00       		.p2align 2 	
 965              	ZLESS:
 966 06c8 4FF00004 		MOV	R4,#0
 967 06cc 04EB2505 		ADD	R5,R4,R5,ASR #32
 968 06d0 7047     		_NEXT
 969              	
 970              	//    AND	 ( w w -- w )
 971              	// 	Bitwise AND.
 972              	
 973 06d2 04FCFF17 		.word	_ZLESS+MAPOFFSET
 974 06d6 03       	_ANDD:	.byte   3
 975 06d7 414E44   		.ascii "AND"
 976 06da 00BF     		.p2align 2 	
 977              	ANDD:
 978 06dc 51F8044B 		LDR	R4,[R1],#4
 979 06e0 05EA0405 		AND	R5,R4
 980 06e4 7047     		_NEXT
 981 06e6 00BF     		.p2align 2
 982              	
 983              	//    OR	  ( w w -- w )
 984              	// 	Bitwise inclusive OR.
 985              	
 986 06e8 16FCFF17 		.word	_ANDD+MAPOFFSET
 987 06ec 02       	_ORR:	.byte   2
 988 06ed 4F52     		.ascii "OR"
 989 06ef 00       		.p2align 2 	
 990              	ORR:
 991 06f0 51F8044B 		LDR	R4,[R1],#4
 992 06f4 45EA0405 		ORR	R5,R4
 993 06f8 7047     		_NEXT
 994 06fa 00BF     		.p2align 2
 995              	
 996              	//    XOR	 ( w w -- w )
 997              	// 	Bitwise exclusive OR.
 998              	
 999 06fc 2CFCFF17 		.word	_ORR+MAPOFFSET
 1000 0700 03       	_XORR:	.byte   3
 1001 0701 584F52   		.ascii "XOR"
 1002              		.p2align 2 	
 1003              	XORR:
 1004 0704 51F8044B 		LDR	R4,[R1],#4
 1005 0708 85EA0405 		EOR	R5,R4
 1006 070c 7047     		_NEXT
 1007 070e 00BF     		.p2align 2
 1008              	
 1009              	//    UM+	 ( w w -- w cy )
 1010              	// 	Add two numbers, return the sum and carry flag.
 1011              	
 1012 0710 40FCFF17 		.word	_XORR+MAPOFFSET
 1013 0714 03       	_UPLUS:	.byte   3
 1014 0715 554D2B   		.ascii "UM+"
 1015              		.p2align 2 	
ARM GAS  stm32eforth.s 			page 22


 1016              	UPLUS:
 1017 0718 0C68     		LDR	R4,[R1]
 1018 071a 6419     		ADDS	R4,R4,R5
 1019 071c 4FF00005 		MOV	R5,#0
 1020 0720 45F10005 		ADC	R5,R5,#0
 1021 0724 0C60     		STR	R4,[R1]
 1022 0726 7047     		_NEXT
 1023              	
 1024              	//    RSHIFT	 ( w # -- w )
 1025              	// 	arithmetic Right shift # bits.
 1026              	
 1027 0728 54FCFF17 		.word	_UPLUS+MAPOFFSET
 1028 072c 06       	_RSHIFT:	.byte   6
 1029 072d 52534849 		.ascii "RSHIFT"
 1029      4654
 1030 0733 00       		.p2align 2 	
 1031              	RSHIFT:
 1032 0734 51F8044B 		LDR	R4,[R1],#4
 1033 0738 44FA05F5 		MOV	R5,R4,ASR R5
 1034 073c 7047     		_NEXT
 1035              	
 1036              	//    LSHIFT	 ( w # -- w )
 1037              	// 	Right shift # bits.
 1038              	
 1039 073e 6CFCFF17 		.word	_RSHIFT+MAPOFFSET
 1040 0742 06       	_LSHIFT:	.byte   6
 1041 0743 4C534849 		.ascii "LSHIFT"
 1041      4654
 1042 0749 0000BF   		.p2align 2 	
 1043              	LSHIFT:
 1044 074c 51F8044B 		LDR	R4,[R1],#4
 1045 0750 04FA05F5 		MOV	R5,R4,LSL R5
 1046 0754 7047     		_NEXT
 1047              	
 1048              	//    +	 ( w w -- w )
 1049              	// 	Add.
 1050              	
 1051 0756 82FCFF17 		.word	_LSHIFT+MAPOFFSET
 1052 075a 01       	_PLUS:	.byte   1
 1053 075b 2B       		.ascii "+"
 1054              		.p2align 2 	
 1055              	PLUS:
 1056 075c 51F8044B 		LDR	R4,[R1],#4
 1057 0760 2544     		ADD	R5,R5,R4
 1058 0762 7047     		_NEXT
 1059              	
 1060              	//    -	 ( w w -- w )
 1061              	// 	Subtract.
 1062              	
 1063 0764 9AFCFF17 		.word	_PLUS+MAPOFFSET
 1064 0768 01       	_SUBB:	.byte   1
 1065 0769 2D       		.ascii "-"
 1066 076a 00BF     		.p2align 2 	
 1067              	SUBB:
 1068 076c 51F8044B 		LDR	R4,[R1],#4
 1069 0770 C5EB0405 		RSB	R5,R5,R4
 1070 0774 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 23


 1071              	
 1072              	//    *	 ( w w -- w )
 1073              	// 	Multiply.
 1074              	
 1075 0776 A8FCFF17 		.word	_SUBB+MAPOFFSET
 1076 077a 01       	_STAR:	.byte   1
 1077 077b 2A       		.ascii "*"
 1078              		.p2align 2 	
 1079              	STAR:
 1080 077c 51F8044B 		LDR	R4,[R1],#4
 1081 0780 04FB05F5 		MUL	R5,R4,R5
 1082 0784 7047     		_NEXT
 1083              	
 1084              	//    UM*	 ( w w -- ud )
 1085              	// 	Unsigned multiply.
 1086              	
 1087 0786 BAFCFF17 		.word	_STAR+MAPOFFSET
 1088 078a 03       	_UMSTA:	.byte   3
 1089 078b 554D2A   		.ascii "UM*"
 1090 078e 00BF     		.p2align 2 	
 1091              	UMSTA:
 1092 0790 0C68     		LDR	R4,[R1]
 1093 0792 A5FB0467 		UMULL	R6,R7,R5,R4
 1094 0796 0E60     		STR	R6,[R1]
 1095 0798 3D46     		MOV	R5,R7
 1096 079a 7047     		_NEXT
 1097              	
 1098              	//    M*	 ( w w -- d )
 1099              	// 	signed multiply.
 1100              	
 1101 079c CAFCFF17 		.word	_UMSTA+MAPOFFSET
 1102 07a0 02       	_MSTAR:	.byte   2
 1103 07a1 4D2A     		.ascii "M*"
 1104 07a3 00       		.p2align 2 	
 1105              	MSTAR:
 1106 07a4 0C68     		LDR	R4,[R1]
 1107 07a6 85FB0467 		SMULL	R6,R7,R5,R4
 1108 07aa 0E60     		STR	R6,[R1]
 1109 07ac 3D46     		MOV	R5,R7
 1110 07ae 7047     		_NEXT
 1111              	
 1112              	//    1+	 ( w -- w+1 )
 1113              	// 	Add 1.
 1114              	
 1115 07b0 E0FCFF17 		.word	_MSTAR+MAPOFFSET
 1116 07b4 02       	_ONEP:	.byte   2
 1117 07b5 312B     		.ascii "1+"
 1118 07b7 00       		.p2align 2 	
 1119              	ONEP:
 1120 07b8 05F10105 		ADD	R5,R5,#1
 1121 07bc 7047     		_NEXT
 1122              	
 1123              	//    1-	 ( w -- w-1 )
 1124              	// 	Subtract 1.
 1125              	
 1126 07be F4FCFF17 		.word	_ONEP+MAPOFFSET
 1127 07c2 02       	_ONEM:	.byte   2
ARM GAS  stm32eforth.s 			page 24


 1128 07c3 312D     		.ascii "1-"
 1129 07c5 0000BF   		.p2align 2 	
 1130              	ONEM:
 1131 07c8 A5F10105 		SUB	R5,R5,#1
 1132 07cc 7047     		_NEXT
 1133              	
 1134              	//    2+	 ( w -- w+2 )
 1135              	// 	Add 1.
 1136              	
 1137 07ce 02FDFF17 		.word	_ONEM+MAPOFFSET
 1138 07d2 02       	_TWOP:	.byte   2
 1139 07d3 322B     		.ascii "2+"
 1140 07d5 0000BF   		.p2align 2 	
 1141              	TWOP:
 1142 07d8 05F10205 		ADD	R5,R5,#2
 1143 07dc 7047     		_NEXT
 1144              	
 1145              	//    2-	 ( w -- w-2 )
 1146              	// 	Subtract 2.
 1147              	
 1148 07de 12FDFF17 		.word	_TWOP+MAPOFFSET
 1149 07e2 02       	_TWOM:	.byte   2
 1150 07e3 322D     		.ascii "2-"
 1151 07e5 0000BF   		.p2align 2 	
 1152              	TWOM:
 1153 07e8 A5F10205 		SUB	R5,R5,#2
 1154 07ec 7047     		_NEXT
 1155              	
 1156              	//    CELL+	( w -- w+4 )
 1157              	// 	Add CELLL.
 1158              	
 1159 07ee 22FDFF17 		.word	_TWOM+MAPOFFSET
 1160 07f2 05       	_CELLP:	.byte   5
 1161 07f3 43454C4C 		.ascii "CELL+"
 1161      2B
 1162              		.p2align 2 	
 1163              	CELLP:
 1164 07f8 05F10405 		ADD	R5,R5,#CELLL
 1165 07fc 7047     		_NEXT
 1166              	
 1167              	//    CELL-	( w -- w-4 )
 1168              	// 	Subtract CELLL.
 1169              	
 1170 07fe 32FDFF17 		.word	_CELLP+MAPOFFSET
 1171 0802 05       	_CELLM:	.byte   5
 1172 0803 43454C4C 		.ascii "CELL-"
 1172      2D
 1173              		.p2align 2 	
 1174              	CELLM:
 1175 0808 A5F10405 		SUB	R5,R5,#CELLL
 1176 080c 7047     		_NEXT
 1177              	 
 1178              	//    BL	( -- 32 )
 1179              	// 	Blank (ASCII space).
 1180              	
 1181 080e 42FDFF17 		.word	_CELLM+MAPOFFSET
 1182 0812 02       	_BLANK:	.byte   2
ARM GAS  stm32eforth.s 			page 25


 1183 0813 424C     		.ascii "BL"
 1184 0815 0000BF   		.p2align 2 	
 1185              	BLANK:
 1186 0818 41F8045D 		_PUSH
 1187 081c 4FF02005 		MOV	R5,#32
 1188 0820 7047     		_NEXT
 1189              	
 1190              	//    CELLS	( w -- w*4 )
 1191              	// 	Multiply 4.
 1192              	
 1193 0822 52FDFF17 		.word	_BLANK+MAPOFFSET
 1194 0826 05       	_CELLS:	.byte   5
 1195 0827 43454C4C 		.ascii "CELLS"
 1195      53
 1196              		.p2align 2 	
 1197              	CELLS:
 1198 082c 4FEA8505 		MOV	R5,R5,LSL#2
 1199 0830 7047     		_NEXT
 1200              	
 1201              	//    CELL/	( w -- w/4 )
 1202              	// 	Divide by 4.
 1203              	
 1204 0832 66FDFF17 		.word	_CELLS+MAPOFFSET
 1205 0836 05       	_CELLSL:	.byte   5
 1206 0837 43454C4C 		.ascii "CELL/"
 1206      2F
 1207              		.p2align 2 	
 1208              	CELLSL:
 1209 083c 4FEAA505 		MOV	R5,R5,ASR#2
 1210 0840 7047     		_NEXT
 1211              	
 1212              	//    2*	( w -- w*2 )
 1213              	// 	Multiply 2.
 1214              	
 1215 0842 76FDFF17 		.word	_CELLSL+MAPOFFSET
 1216 0846 02       	_TWOST:	.byte   2
 1217 0847 322A     		.ascii "2*"
 1218 0849 0000BF   		.p2align 2 	
 1219              	TWOST:
 1220 084c 4FEA4505 		MOV	R5,R5,LSL#1
 1221 0850 7047     		_NEXT
 1222              	
 1223              	//    2/	( w -- w/2 )
 1224              	// 	Divide by 2.
 1225              	
 1226 0852 86FDFF17 		.word	_TWOST+MAPOFFSET
 1227 0856 02       	_TWOSL:	.byte   2
 1228 0857 322F     		.ascii "2/"
 1229 0859 0000BF   		.p2align 2 	
 1230              	TWOSL:
 1231 085c 4FEA6505 		MOV	R5,R5,ASR#1
 1232 0860 7047     		_NEXT
 1233              	
 1234              	//    ?DUP	( w -- w w | 0 )
 1235              	// 	Conditional duplicate.
 1236              	
 1237 0862 96FDFF17 		.word	_TWOSL+MAPOFFSET
ARM GAS  stm32eforth.s 			page 26


 1238 0866 04       	_QDUP:	.byte   4
 1239 0867 3F445550 		.ascii "?DUP"
 1240 086b 00       		.p2align 2 	
 1241              	QDUP:
 1242 086c 2C00     		MOVS	R4,R5
 1243 086e 18BF     		IT NE 
 1244 0870 41F8045D 	    STRNE	R5,[R1,#-4]!
 1245 0874 7047     		_NEXT
 1246              	
 1247              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1248              	// 	Rotate top 3 items.
 1249              	
 1250 0876 A6FDFF17 		.word	_QDUP+MAPOFFSET
 1251 087a 03       	_ROT:	.byte   3
 1252 087b 524F54   		.ascii "ROT"
 1253 087e 00BF     		.p2align 2 	
 1254              	ROT:
 1255 0880 0C68     		LDR	R4,[R1]  // r4=w2 
 1256 0882 0D60     		STR	R5,[R1]  // w3 replace w2 
 1257 0884 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1258 0886 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1259 0888 7047     		_NEXT
 1260              	
 1261              	//    2DROP	( w1 w2 -- )
 1262              	// 	Drop top 2 items.
 1263              	
 1264 088a BAFDFF17 		.word	_ROT+MAPOFFSET
 1265 088e 05       	_DDROP:	.byte   5
 1266 088f 3244524F 		.ascii "2DROP"
 1266      50
 1267              		.p2align 2 	
 1268              	DDROP:
 1269 0894 51F8045B 		_POP
 1270 0898 51F8045B 		_POP
 1271 089c 7047     		_NEXT
 1272              	
 1273              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1274              	// 	Duplicate top 2 items.
 1275              	
 1276 089e CEFDFF17 		.word	_DDROP+MAPOFFSET
 1277 08a2 04       	_DDUP:	.byte   4
 1278 08a3 32445550 		.ascii "2DUP"
 1279 08a7 00       		.p2align 2 	
 1280              	DDUP:
 1281 08a8 0C68     		LDR	R4,[R1] // r4=w1
 1282 08aa 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1283 08ae 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1284 08b2 7047     		_NEXT
 1285              	
 1286              	//    D+	( d1 d2 -- d3 )
 1287              	// 	Add top 2 double numbers.
 1288              	
 1289 08b4 E2FDFF17 		.word	_DDUP+MAPOFFSET
 1290 08b8 02       	_DPLUS:	.byte   2
 1291 08b9 442B     		.ascii "D+"
 1292 08bb 00       		.p2align 2 	
 1293              	DPLUS:
ARM GAS  stm32eforth.s 			page 27


 1294 08bc 51F8044B 		LDR	R4,[R1],#4
 1295 08c0 51F8046B 		LDR	R6,[R1],#4
 1296 08c4 0F68     		LDR	R7,[R1]
 1297 08c6 E419     		ADDS	R4,R4,R7
 1298 08c8 0C60     		STR	R4,[R1]
 1299 08ca 45EB0605 		ADC	R5,R5,R6
 1300 08ce 7047     		_NEXT
 1301              	
 1302              	//    NOT	 ( w -- !w )
 1303              	// 	1"s complement.
 1304              	
 1305 08d0 F8FDFF17 		.word	_DPLUS+MAPOFFSET
 1306 08d4 03       	_INVER:	.byte   3
 1307 08d5 4E4F54   		.ascii "NOT"
 1308              		.p2align 2 	
 1309              	INVER:
 1310 08d8 6FEA0505 		MVN	R5,R5
 1311 08dc 7047     		_NEXT
 1312              	
 1313              	//    NEGATE	( w -- -w )
 1314              	// 	2's complement.
 1315              	
 1316 08de 14FEFF17 		.word	_INVER+MAPOFFSET
 1317 08e2 06       	_NEGAT:	.byte   6
 1318 08e3 4E454741 		.ascii "NEGATE"
 1318      5445
 1319 08e9 0000BF   		.p2align 2 	
 1320              	NEGAT:
 1321 08ec C5F10005 		RSB	R5,R5,#0
 1322 08f0 7047     		_NEXT
 1323              	
 1324              	//    ABS	 ( w -- |w| )
 1325              	// 	Absolute.
 1326              	
 1327 08f2 22FEFF17 		.word	_NEGAT+MAPOFFSET
 1328 08f6 03       	_ABSS:	.byte   3
 1329 08f7 414253   		.ascii "ABS"
 1330 08fa 00BF     		.p2align 2 	
 1331              	ABSS:
 1332 08fc 15F0004F 		TST	R5,#0x80000000
 1333 0900 18BF     		IT NE
 1334 0902 6D42     	    RSBNE   R5,R5,#0
 1335 0904 7047     		_NEXT
 1336              	
 1337              	//  0= ( w -- f )
 1338              	// TOS==0?
 1339              	
 1340 0906 36FEFF17 		.word _ABSS+MAPOFFSET
 1341 090a 02       	_ZEQUAL: .byte 2
 1342 090b 303D     		.ascii "0="
 1343 090d 0000BF   		.p2align 2
 1344              	ZEQUAL:
 1345 0910 15B9     		cbnz r5,1f
 1346 0912 4FF0FF35 		mov r5,#-1
 1347 0916 7047     		_NEXT 
 1348 0918 85EA0505 	1:  eor r5,r5,r5  
 1349 091c 7047     		_NEXT 	
ARM GAS  stm32eforth.s 			page 28


 1350              	
 1351              	//    =	 ( w w -- t )
 1352              	// 	Equal?
 1353              	
 1354 091e 4AFEFF17 		.word	_ZEQUAL+MAPOFFSET
 1355 0922 01       	_EQUAL:	.byte   1
 1356 0923 3D       		.ascii "="
 1357              		.p2align 2 	
 1358              	EQUAL:
 1359 0924 51F8044B 		LDR	R4,[R1],#4
 1360 0928 A542     		CMP	R5,R4
 1361 092a 0CBF     		ITE EQ 
 1362 092c 6FF00005 	    MVNEQ	R5,#0
 1363 0930 0025     		MOVNE	R5,#0
 1364 0932 7047     		_NEXT
 1365              	
 1366              	//    U<	 ( w w -- t )
 1367              	// 	Unsigned equal?
 1368              	
 1369 0934 62FEFF17 		.word	_EQUAL+MAPOFFSET
 1370 0938 02       	_ULESS:	.byte   2
 1371 0939 553C     		.ascii "U<"
 1372 093b 00       		.p2align 2 	
 1373              	ULESS:
 1374 093c 51F8044B 		LDR	R4,[R1],#4
 1375 0940 AC42     		CMP	R4,R5
 1376 0942 34BF     		ITE CC 
 1377 0944 6FF00005 		MVNCC	R5,#0
 1378 0948 0025     		MOVCS	R5,#0
 1379 094a 7047     		_NEXT
 1380              	
 1381              	//    <	( w w -- t )
 1382              	// 	Less?
 1383              	
 1384 094c 78FEFF17 		.word	_ULESS+MAPOFFSET
 1385 0950 01       	_LESS:	.byte   1
 1386 0951 3C       		.ascii "<"
 1387 0952 00BF     		.p2align 2 	
 1388              	LESS:
 1389 0954 51F8044B 		LDR	R4,[R1],#4
 1390 0958 AC42     		CMP	R4,R5
 1391 095a B4BF     	    ITE LT
 1392 095c 6FF00005 		MVNLT	R5,#0
 1393 0960 0025     		MOVGE	R5,#0
 1394 0962 7047     		_NEXT
 1395              	
 1396              	//    >	( w w -- t )
 1397              	// 	greater?
 1398              	
 1399 0964 90FEFF17 		.word	_LESS+MAPOFFSET
 1400 0968 01       	_GREAT:	.byte   1
 1401 0969 3E       		.ascii ">"
 1402 096a 00BF     		.p2align 2 	
 1403              	GREAT:
 1404 096c 51F8044B 		LDR	R4,[R1],#4
 1405 0970 AC42     		CMP	R4,R5
 1406 0972 CCBF     		ITE GT
ARM GAS  stm32eforth.s 			page 29


 1407 0974 6FF00005 	    MVNGT	R5,#0
 1408 0978 0025     		MOVLE	R5,#0
 1409 097a 7047     		_NEXT
 1410              	
 1411              	//    MAX	 ( w w -- max )
 1412              	// 	Leave maximum.
 1413              	
 1414 097c A8FEFF17 		.word	_GREAT+MAPOFFSET
 1415 0980 03       	_MAX:	.byte   3
 1416 0981 4D4158   		.ascii "MAX"
 1417              		.p2align 2 	
 1418              	MAX:
 1419 0984 51F8044B 		LDR	R4,[R1],#4
 1420 0988 AC42     		CMP	R4,R5
 1421 098a C8BF     		IT GT 
 1422 098c 2546     		MOVGT	R5,R4
 1423 098e 7047     		_NEXT
 1424              	
 1425              	//    MIN	 ( w w -- min )
 1426              	// 	Leave minimum.
 1427              	
 1428 0990 C0FEFF17 		.word	_MAX+MAPOFFSET
 1429 0994 03       	_MIN:	.byte   3
 1430 0995 4D494E   		.ascii "MIN"
 1431              		.p2align 2 	
 1432              	MIN:
 1433 0998 51F8044B 		LDR	R4,[R1],#4
 1434 099c AC42     		CMP	R4,R5
 1435 099e B8BF     		IT LT
 1436 09a0 2546     		MOVLT	R5,R4
 1437 09a2 7047     		_NEXT
 1438              	
 1439              	//    +!	 ( w a -- )
 1440              	// 	Add to memory.
 1441              	
 1442 09a4 D4FEFF17 		.word	_MIN+MAPOFFSET
 1443 09a8 02       	_PSTOR:	.byte   2
 1444 09a9 2B21     		.ascii "+!"
 1445 09ab 00       		.p2align 2 	
 1446              	PSTOR:
 1447 09ac 51F8044B 		LDR	R4,[R1],#4
 1448 09b0 2E68     		LDR	R6,[R5]
 1449 09b2 2644     		ADD	R6,R6,R4
 1450 09b4 2E60     		STR	R6,[R5]
 1451 09b6 51F8045B 		_POP
 1452 09ba 7047     		_NEXT
 1453              	
 1454              	//    2!	 ( d a -- )
 1455              	// 	Store double number.
 1456              	
 1457 09bc E8FEFF17 		.word	_PSTOR+MAPOFFSET
 1458 09c0 02       	_DSTOR:	.byte   2
 1459 09c1 3221     		.ascii "2!"
 1460 09c3 00       		.p2align 2 	
 1461              	DSTOR:
 1462 09c4 51F8044B 		LDR	R4,[R1],#4
 1463 09c8 51F8046B 		LDR	R6,[R1],#4
ARM GAS  stm32eforth.s 			page 30


 1464 09cc 45F8044B 		STR	R4,[R5],#4
 1465 09d0 2E60     		STR	R6,[R5]
 1466 09d2 51F8045B 		_POP
 1467 09d6 7047     		_NEXT
 1468              	
 1469              	//    2@	 ( a -- d )
 1470              	// 	Fetch double number.
 1471              	
 1472 09d8 00FFFF17 		.word	_DSTOR+MAPOFFSET
 1473 09dc 02       	_DAT:	.byte   2
 1474 09dd 3240     		.ascii "2@"
 1475 09df 00       		.p2align 2 	
 1476              	DAT:
 1477 09e0 6C68     		LDR	R4,[R5,#4]
 1478 09e2 41F8044D 		STR	R4,[R1,#-4]!
 1479 09e6 2D68     		LDR	R5,[R5]
 1480 09e8 7047     		_NEXT
 1481              	
 1482              	//    COUNT	( b -- b+1 c )
 1483              	// 	Fetch length of string.
 1484              	
 1485 09ea 1CFFFF17 		.word	_DAT+MAPOFFSET
 1486 09ee 05       	_COUNT:	.byte   5
 1487 09ef 434F554E 		.ascii "COUNT"
 1487      54
 1488              		.p2align 2 	
 1489              	COUNT:
 1490 09f4 15F8014B 		LDRB	R4,[R5],#1
 1491 09f8 41F8045D 		_PUSH
 1492 09fc 2546     		MOV	R5,R4
 1493 09fe 7047     		_NEXT
 1494              	
 1495              	//    DNEGATE	( d -- -d )
 1496              	// 	Negate double number.
 1497              	
 1498 0a00 2EFFFF17 		.word	_COUNT+MAPOFFSET
 1499 0a04 07       	_DNEGA:	.byte   7
 1500 0a05 444E4547 		.ascii "DNEGATE"
 1500      415445
 1501              		.p2align 2 	
 1502              	DNEGA:
 1503 0a0c 0C68     		LDR	R4,[R1]
 1504 0a0e A6EB0606 		SUB	R6,R6,R6
 1505 0a12 341B     		SUBS R4,R6,R4
 1506 0a14 66EB0505 		SBC	R5,R6,R5
 1507 0a18 0C60     		STR	R4,[R1]
 1508 0a1a 7047     		_NEXT
 1509              	
 1510              	// **************************************************************************
 1511              	//  System and user variables
 1512              	
 1513              	//    doVAR	( -- a )
 1514              	// 	Run time routine for VARIABLE and CREATE.
 1515              	
 1516              	// 	.word	_DNEGA+MAPOFFSET
 1517              	// _DOVAR	.byte  COMPO+5
 1518              	// 	.ascii "doVAR"
ARM GAS  stm32eforth.s 			page 31


 1519              	// 	.p2align 2 	
 1520              	DOVAR:
 1521 0a1c 41F8045D 		_PUSH
 1522 0a20 AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
 1523 0a24 52F804FB 		_UNNEST
 1524              	
 1525              	//    doCON	( -- a ) 
 1526              	// 	Run time routine for CONSTANT.
 1527              	
 1528              	// 	.word	_DOVAR+MAPOFFSET
 1529              	// _DOCON	.byte  COMPO+5
 1530              	// 	.ascii "doCON"
 1531              	// 	.p2align 2 	
 1532              	DOCON:
 1533 0a28 41F8045D 		_PUSH
 1534 0a2c 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1535 0a30 52F804FB 		_UNNEST
 1536              	
 1537              	/***********************
 1538              	  system variables 
 1539              	***********************/
 1540              	
 1541              	 // SEED ( -- a)
 1542              	 // return PRNG seed address 
 1543              	
 1544 0a34 44FFFF17 		.word _DNEGA+MAPOFFSET
 1545 0a38 04       	_SEED: .byte 4
 1546 0a39 53454544 		.ascii "SEED"
 1547 0a3d 0000BF   		.p2align 2
 1548              	SEED:
 1549 0a40 41F8045D 		_PUSH 
 1550 0a44 03F10405 		ADD R5,R3,#SEED_OFS
 1551 0a48 7047     		_NEXT 	
 1552              	
 1553              	//  MSEC ( -- a)
 1554              	// return address of milliseconds counter
 1555 0a4a 78FFFF17 	  .word _SEED+MAPOFFSET 
 1556 0a4e 04       	_MSEC: .byte 4
 1557 0a4f 4D534543 	  .ascii "MSEC"
 1558 0a53 00       	  .p2align 2 
 1559              	MSEC:
 1560 0a54 41F8045D 	  _PUSH
 1561 0a58 03F10805 	  ADD R5,R3,#TICKS_OFS
 1562 0a5c 7047     	  _NEXT 
 1563              	
 1564              	// TIMER ( -- a )
 1565              	// count down timer 
 1566 0a5e 8EFFFF17 	  .word _MSEC+MAPOFFSET
 1567 0a62 05       	_TIMER:  .byte 5
 1568 0a63 54494D45 	  .ascii "TIMER"
 1568      52
 1569              	  .p2align 2 
 1570              	TIMER:
 1571 0a68 41F8045D 	  _PUSH 
 1572 0a6c 03F10C05 	  ADD R5,R3,#TIMER_OFS
 1573 0a70 7047     	  _NEXT
 1574              	
ARM GAS  stm32eforth.s 			page 32


 1575              	// >RAM ( -- a )
 1576              	// compilation target 
 1577              	// -1 compile to RAM, 0 compile to FLASH 
 1578 0a72 A2FFFF17 		.word _TIMER+MAPOFFSET
 1579 0a76 04       	_TORAM: .byte 4 
 1580 0a77 3E52414D 		.ascii ">RAM" 
 1581 0a7b 00       		.p2align 2 
 1582              	TORAM:
 1583 0a7c 41F8045D 		_PUSH 
 1584 0a80 03F11005 		ADD R5,R3,#TORAM_OFS
 1585 0a84 7047     		_NEXT 
 1586              	
 1587              	//    'BOOT	 ( -- a )
 1588              	// 	Application.
 1589              	
 1590 0a86 B6FFFF17 		.word	_TORAM+MAPOFFSET
 1591 0a8a 05       	_TBOOT:	.byte   5
 1592 0a8b 27424F4F 		.ascii "'BOOT"
 1592      54
 1593              		.p2align 2 	
 1594              	TBOOT:
 1595 0a90 41F8045D 		_PUSH
 1596 0a94 03F11805 		ADD	R5,R3,#BOOT_OFS 
 1597 0a98 7047     		_NEXT
 1598              		
 1599              	//    BASE	( -- a )
 1600              	// 	Storage of the radix base for numeric I/O.
 1601              	
 1602 0a9a CAFFFF17 		.word	_TBOOT+MAPOFFSET
 1603 0a9e 04       	_BASE:	.byte   4
 1604 0a9f 42415345 		.ascii "BASE"
 1605 0aa3 00       		.p2align 2 	
 1606              	BASE:
 1607 0aa4 41F8045D 		_PUSH
 1608 0aa8 03F11C05 		ADD	R5,R3,#BASE_OFS
 1609 0aac 7047     		_NEXT
 1610              	
 1611              	//    tmp	 ( -- a )
 1612              	// 	A temporary storage location used in parse and find.
 1613              	
 1614              	// 	.word	_BASE+MAPOFFSET
 1615              	// _TEMP	.byte   COMPO+3
 1616              	// 	.ascii "tmp"
 1617              	// 	.p2align 2 	
 1618              	TEMP:
 1619 0aae 41F8045D 		_PUSH
 1620 0ab2 03F12005 		ADD	R5,R3,#TMP_OFS
 1621 0ab6 7047     		_NEXT
 1622              	
 1623              	//    SPAN	( -- a )
 1624              	// 	Hold character count received by EXPECT.
 1625              	
 1626 0ab8 DEFFFF17 		.word	_BASE+MAPOFFSET
 1627 0abc 04       	_SPAN:	.byte   4
 1628 0abd 5350414E 		.ascii "SPAN"
 1629 0ac1 0000BF   		.p2align 2 	
 1630              	SPAN:
ARM GAS  stm32eforth.s 			page 33


 1631 0ac4 41F8045D 		_PUSH
 1632 0ac8 03F12405 		ADD	R5,R3,#SPAN_OFS
 1633 0acc 7047     		_NEXT
 1634              	
 1635              	//    >IN	 ( -- a )
 1636              	// 	Hold the character pointer while parsing input stream.
 1637              	
 1638 0ace FCFFFF17 		.word	_SPAN+MAPOFFSET
 1639 0ad2 03       	_INN:	.byte   3
 1640 0ad3 3E494E   		.ascii ">IN"
 1641 0ad6 00BF     		.p2align 2 	
 1642              	INN:
 1643 0ad8 41F8045D 		_PUSH
 1644 0adc 03F12805 		ADD	R5,R3,#TOIN_OFS
 1645 0ae0 7047     		_NEXT
 1646              	
 1647              	//    #TIB	( -- a )
 1648              	// 	Hold the current count and address of the terminal input buffer.
 1649              	
 1650 0ae2 12000018 		.word	_INN+MAPOFFSET
 1651 0ae6 04       	_NTIB:	.byte   4
 1652 0ae7 23544942 		.ascii "#TIB"
 1653 0aeb 00       		.p2align 2 	
 1654              	NTIB:
 1655 0aec 41F8045D 		_PUSH
 1656 0af0 03F12C05 		ADD	R5,R3,#NTIB_OFS
 1657 0af4 7047     		_NEXT
 1658              	
 1659              	//    'EVAL	( -- a )
 1660              	// 	Execution vector of EVAL.
 1661              	
 1662 0af6 26000018 		.word	_NTIB+MAPOFFSET
 1663 0afa 05       	_TEVAL:	.byte   5
 1664 0afb 27455641 		.ascii "'EVAL"
 1664      4C
 1665              		.p2align 2 	
 1666              	TEVAL:
 1667 0b00 41F8045D 		_PUSH
 1668 0b04 03F13405 		ADD	R5,R3,#EVAL_OFS
 1669 0b08 7047     		_NEXT
 1670              	
 1671              	//    HLD	 ( -- a )
 1672              	// 	Hold a pointer in building a numeric output string.
 1673              	
 1674 0b0a 3A000018 		.word	_TEVAL+MAPOFFSET
 1675 0b0e 03       	_HLD:	.byte   3
 1676 0b0f 484C44   		.ascii "HLD"
 1677 0b12 00BF     		.p2align 2 	
 1678              	HLD:
 1679 0b14 41F8045D 		_PUSH
 1680 0b18 03F13805 		ADD	R5,R3,#HLD_OFS
 1681 0b1c 7047     		_NEXT
 1682              	
 1683              	//    CONTEXT	( -- a )
 1684              	// 	A area to specify vocabulary search order.
 1685              	
 1686 0b1e 4E000018 		.word	_HLD+MAPOFFSET
ARM GAS  stm32eforth.s 			page 34


 1687 0b22 07       	_CNTXT:	.byte   7
 1688 0b23 434F4E54 		.ascii "CONTEXT"
 1688      455854
 1689 0b2a 00BF     		.p2align 2 	
 1690              	CNTXT:
 1691              	CRRNT:
 1692 0b2c 41F8045D 		_PUSH
 1693 0b30 03F13C05 		ADD	R5,R3,#CTXT_OFS
 1694 0b34 7047     		_NEXT
 1695              	
 1696              	//    CP	( -- a )
 1697              	// 	Point to top name in RAM vocabulary.
 1698              	
 1699 0b36 62000018 		.word	_CNTXT+MAPOFFSET
 1700 0b3a 02       	_CP:	.byte   2
 1701 0b3b 4350     		.ascii "CP"
 1702 0b3d 0000BF   		.p2align 2 	
 1703              	CPP:
 1704 0b40 41F8045D 		_PUSH
 1705 0b44 03F14405 		ADD	R5,R3,#USER_CTOP_OFS
 1706 0b48 7047     		_NEXT
 1707              	
 1708              	//   FCP ( -- a )
 1709              	//  Point ot top of Forth system dictionary
 1710 0b4a 7A000018 		.word _CP+MAPOFFSET
 1711 0b4e 03       	_FCP: .byte 3            
 1712 0b4f 464350   		.ascii "FCP"
 1713 0b52 00BF     		.p2align 2 
 1714              	FCP: 
 1715 0b54 41F8045D 		_PUSH 
 1716 0b58 03F14005 		ADD R5,R3,#FORTH_CTOP_OFS 
 1717 0b5c 7047     		_NEXT 
 1718              	
 1719              	//    LAST	( -- a )
 1720              	// 	Point to the last name in the name dictionary.
 1721              	
 1722 0b5e 8E000018 		.word	_FCP+MAPOFFSET
 1723 0b62 04       	_LAST:	.byte   4
 1724 0b63 4C415354 		.ascii "LAST"
 1725 0b67 00       		.p2align 2 	
 1726              	LAST:
 1727 0b68 41F8045D 		_PUSH
 1728 0b6c 03F14805 		ADD	R5,R3,#LASTN_OFS
 1729 0b70 7047     		_NEXT
 1730              	
 1731              	/***********************
 1732              		system constants 
 1733              	***********************/
 1734              	
 1735              	//	USER_BEGIN ( -- a )
 1736              	//  where user area begin in RAM
 1737 0b72 A2000018 		.word _LAST+MAPOFFSET
 1738 0b76 0A       	_USER_BGN: .byte 10
 1739 0b77 55534552 		.ascii "USER_BEGIN"
 1739      5F424547 
 1739      494E
 1740 0b81 0000BF   		.p2align 2
ARM GAS  stm32eforth.s 			page 35


 1741              	USER_BEGIN:
 1742 0b84 41F8045D 		_PUSH 
 1743 0b88 004D     		ldr r5,USR_BGN_ADR 
 1744 0b8a 7047     		_NEXT 
 1745              	USR_BGN_ADR:
 1746 0b8c 48210018 	.word CTOP+MAPOFFSET 
 1747              	
 1748              	//  USER_END ( -- a )
 1749              	//  where user area end in RAM 
 1750 0b90 B6000018 		.word _USER_BGN+MAPOFFSET
 1751 0b94 08       	_USER_END: .byte 8 
 1752 0b95 55534552 		.ascii "USER_END" 
 1752      5F454E44 
 1753 0b9d 0000BF   		.p2align 2 
 1754              	USER_END:
 1755 0ba0 41F8045D 		_PUSH 
 1756 0ba4 4FF49C45 		_MOV32 R5,DEND 
 1756      C2F20005 
 1757 0bac 7047     		_NEXT 
 1758              	
 1759              	//  IMG_ADR ( -- a )
 1760              	//  where user image is saved in FLASH
 1761 0bae D4000018 		.word _USER_END+MAPOFFSET
 1762 0bb2 07       	_IMG_ADR: .byte 7
 1763 0bb3 494D475F 		.ascii "IMG_ADR"
 1763      414452
 1764 0bba 00BF     		.p2align 2 
 1765              	IMG_ADR:
 1766 0bbc 41F8045D 		_PUSH
 1767 0bc0 004D     		ldr r5,USR_IMG_ADR   
 1768 0bc2 7047     		_NEXT 
 1769              	USR_IMG_ADR:
 1770 0bc4 00300000 		.word USER_SPACE 
 1771              	
 1772              	// image signature 
 1773 0bc8 F2000018 		.word _IMG_ADR+MAPOFFSET
 1774 0bcc 08       	_IMG_SIGN: .byte 8
 1775 0bcd 494D475F 		.ascii "IMG_SIGN"
 1775      5349474E 
 1776 0bd5 0000BF   		.p2align 2	
 1777              	IMG_SIGN: 
 1778 0bd8 41F8045D 		_PUSH 
 1779 0bdc 03F11405 		ADD r5,r3,#IMG_SIGN_OFS 
 1780 0be0 7047     		_NEXT 
 1781              	
 1782              	/* *********************
 1783              	  Common functions
 1784              	***********************/
 1785              	
 1786              	//    WITHIN	( u ul uh -- t )
 1787              	// 	Return true if u is within the range of ul and uh.
 1788              	
 1789 0be2 F2000018 		.word	_IMG_ADR+MAPOFFSET
 1790 0be6 06       	_WITHI:	.byte   6
 1791 0be7 57495448 		.ascii "WITHIN"
 1791      494E
 1792 0bed 0000BF   		.p2align 2 	
ARM GAS  stm32eforth.s 			page 36


 1793              	WITHI:
 1794 0bf0 42F804ED 		_NEST
 1795 0bf4 FFF760FD 		BL	OVER
 1796 0bf8 FFF7B8FD 		BL	SUBB
 1797 0bfc FFF72EFD 		BL	TOR
 1798 0c00 FFF7B4FD 		BL	SUBB
 1799 0c04 FFF718FD 		BL	RFROM
 1800 0c08 FFF798FE 		BL	ULESS
 1801 0c0c 52F804FB 		_UNNEST
 1802              	
 1803              	//  Divide
 1804              	
 1805              	//    UM/MOD	( udl udh u -- ur uq )
 1806              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1807              	
 1808 0c10 26010018 		.word	_WITHI+MAPOFFSET
 1809 0c14 06       	_UMMOD:	.byte   6
 1810 0c15 554D2F4D 		.ascii "UM/MOD"
 1810      4F44
 1811 0c1b 00       		.p2align 2 	
 1812              	UMMOD:
 1813 0c1c 4FF00107 		MOV	R7,#1
 1814 0c20 51F8044B 		LDR	R4,[R1],#4
 1815 0c24 0E68     		LDR	R6,[R1]
 1816              	UMMOD0:
 1817 0c26 B619     		ADDS	R6,R6,R6
 1818 0c28 6441     		ADCS	R4,R4,R4
 1819 0c2a 04D3     		BCC	UMMOD1
 1820 0c2c A4EB0504 		SUB	R4,R4,R5
 1821 0c30 06F10106 		ADD	R6,R6,#1
 1822 0c34 04E0     		B UMMOD2
 1823              	UMMOD1:
 1824 0c36 641B     		SUBS	R4,R4,R5 
 1825 0c38 28BF     		IT CS 
 1826 0c3a 0136     		ADDCS	R6,R6,#1
 1827 0c3c 00D2     		BCS	UMMOD2
 1828 0c3e 2C44     		ADD	R4,R4,R5
 1829              	UMMOD2:
 1830 0c40 FF19     		ADDS	R7,R7,R7
 1831 0c42 F0D3     		BCC	UMMOD0
 1832 0c44 3546     		MOV	R5,R6
 1833 0c46 0C60     		STR	R4,[R1]
 1834 0c48 7047     		_NEXT
 1835              	
 1836              	//    M/MOD	( d n -- r q )
 1837              	// 	Signed floored divide of double by single. Return mod and quotient.
 1838              	
 1839 0c4a 54010018 		.word	_UMMOD+MAPOFFSET
 1840 0c4e 05       	_MSMOD:	.byte  5
 1841 0c4f 4D2F4D4F 		.ascii "M/MOD"
 1841      44
 1842              		.p2align 2 	
 1843              	MSMOD:	
 1844 0c54 42F804ED 		_NEST
 1845 0c58 FFF71CFD 		BL	DUPP
 1846 0c5c FFF734FD 		BL	ZLESS
 1847 0c60 FFF718FD 		BL	DUPP
ARM GAS  stm32eforth.s 			page 37


 1848 0c64 FFF7FAFC 		BL	TOR
 1849 0c68 FFF7AAFC 		BL	QBRAN
 1850 0c6c C0010018 		.word	MMOD1+MAPOFFSET
 1851 0c70 FFF73CFE 		BL	NEGAT
 1852 0c74 FFF7F2FC 		BL	TOR
 1853 0c78 FFF7C8FE 		BL	DNEGA
 1854 0c7c FFF7DCFC 		BL	RFROM
 1855              	MMOD1:
 1856 0c80 FFF7ECFC 	  BL	TOR
 1857 0c84 FFF706FD 		BL	DUPP
 1858 0c88 FFF71EFD 		BL	ZLESS
 1859 0c8c FFF798FC 		BL	QBRAN
 1860 0c90 DC010018 		.word	MMOD2+MAPOFFSET
 1861 0c94 FFF7DAFC 		BL	RAT
 1862 0c98 FFF760FD 		BL	PLUS
 1863              	MMOD2:
 1864 0c9c FFF7CCFC 	  BL	RFROM
 1865 0ca0 FFF7BCFF 		BL	UMMOD
 1866 0ca4 FFF7C8FC 		BL	RFROM
 1867 0ca8 FFF78AFC 		BL	QBRAN
 1868 0cac FC010018 		.word	MMOD3+MAPOFFSET
 1869 0cb0 FFF7F8FC 		BL	SWAP
 1870 0cb4 FFF71AFE 		BL	NEGAT
 1871 0cb8 FFF7F4FC 		BL	SWAP
 1872              	MMOD3:   
 1873 0cbc 52F804FB 		_UNNEST
 1874              	
 1875              	//    /MOD	( n n -- r q )
 1876              	// 	Signed divide. Return mod and quotient.
 1877              	
 1878 0cc0 8E010018 		.word	_MSMOD+MAPOFFSET
 1879 0cc4 04       	_SLMOD:	.byte   4
 1880 0cc5 2F4D4F44 		.ascii "/MOD"
 1881 0cc9 0000BF   		.p2align 2 	
 1882              	SLMOD:
 1883 0ccc 42F804ED 		_NEST
 1884 0cd0 FFF7F2FC 		BL	OVER
 1885 0cd4 FFF7F8FC 		BL	ZLESS
 1886 0cd8 FFF7E4FC 		BL	SWAP
 1887 0cdc FFF7BAFF 		BL	MSMOD
 1888 0ce0 52F804FB 		_UNNEST
 1889              	
 1890              	//    MOD	 ( n n -- r )
 1891              	// 	Signed divide. Return mod only.
 1892              	
 1893 0ce4 04020018 		.word	_SLMOD+MAPOFFSET
 1894 0ce8 03       	_MODD:	.byte  3
 1895 0ce9 4D4F44   		.ascii "MOD"
 1896              		.p2align 2 	
 1897              	MODD:
 1898 0cec 42F804ED 		_NEST
 1899 0cf0 FFF7ECFF 		BL	SLMOD
 1900 0cf4 FFF7C6FC 		BL	DROP
 1901 0cf8 52F804FB 		_UNNEST
 1902              	
 1903              	//    /	   ( n n -- q )
 1904              	// 	Signed divide. Return quotient only.
ARM GAS  stm32eforth.s 			page 38


 1905              	
 1906 0cfc 28020018 		.word	_MODD+MAPOFFSET
 1907 0d00 01       	_SLASH:	.byte  1
 1908 0d01 2F       		.ascii "/"
 1909 0d02 00BF     		.p2align 2 	
 1910              	SLASH:
 1911 0d04 42F804ED 		_NEST
 1912 0d08 FFF7E0FF 		BL	SLMOD
 1913 0d0c FFF7CAFC 		BL	SWAP
 1914 0d10 FFF7B8FC 		BL	DROP
 1915 0d14 52F804FB 		_UNNEST
 1916              	
 1917              	//    */MOD	( n1 n2 n3 -- r q )
 1918              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1919              	
 1920 0d18 40020018 		.word	_SLASH+MAPOFFSET
 1921 0d1c 05       	_SSMOD:	.byte  5
 1922 0d1d 2A2F4D4F 		.ascii "*/MOD"
 1922      44
 1923 0d22 00BF     		.p2align 2 	
 1924              	SSMOD:
 1925 0d24 42F804ED 		_NEST
 1926 0d28 FFF798FC 		BL	TOR
 1927 0d2c FFF73AFD 		BL	MSTAR
 1928 0d30 FFF782FC 		BL	RFROM
 1929 0d34 FFF78EFF 		BL	MSMOD
 1930 0d38 52F804FB 		_UNNEST
 1931              	
 1932              	//    */	  ( n1 n2 n3 -- q )
 1933              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1934              	
 1935 0d3c 5C020018 		.word	_SSMOD+MAPOFFSET
 1936 0d40 02       	_STASL:	.byte  2
 1937 0d41 2A2F     		.ascii "*/"
 1938 0d43 00       		.p2align 2 	
 1939              	STASL:
 1940 0d44 42F804ED 		_NEST
 1941 0d48 FFF7ECFF 		BL	SSMOD
 1942 0d4c FFF7AAFC 		BL	SWAP
 1943 0d50 FFF798FC 		BL	DROP
 1944 0d54 52F804FB 		_UNNEST
 1945              	
 1946              	// **************************************************************************
 1947              	//  Miscellaneous
 1948              	
 1949              	//    ALIGNED	( b -- a )
 1950              	// 	Align address to the cell boundary.
 1951              	
 1952 0d58 80020018 		.word	_STASL+MAPOFFSET
 1953 0d5c 07       	_ALGND:	.byte   7
 1954 0d5d 414C4947 		.ascii "ALIGNED"
 1954      4E4544
 1955              		.p2align 2 	
 1956              	ALGND:
 1957 0d64 05F10305 		ADD	R5,R5,#3
 1958 0d68 6FF00304 		MVN	R4,#3
 1959 0d6c 05EA0405 		AND	R5,R5,R4
ARM GAS  stm32eforth.s 			page 39


 1960 0d70 7047     		_NEXT
 1961              	
 1962              	//    >CHAR	( c -- c )
 1963              	// 	Filter non-printing characters.
 1964              	
 1965 0d72 9C020018 		.word	_ALGND+MAPOFFSET
 1966 0d76 05       	_TCHAR:	.byte  5
 1967 0d77 3E434841 		.ascii ">CHAR"
 1967      52
 1968              		.p2align 2 	
 1969              	TCHAR:
 1970 0d7c 42F804ED 		_NEST
 1971 0d80 FFF7FBFB 		_DOLIT
 1972 0d84 7F000000 		.word	0x7F
 1973 0d88 FFF7A8FC 		BL	ANDD
 1974 0d8c FFF782FC 		BL	DUPP	// mask msb
 1975 0d90 FFF742FD 		BL	BLANK
 1976 0d94 FFF7F1FB 		_DOLIT
 1977 0d98 7F000000 		.word	127
 1978 0d9c FFF728FF 		BL	WITHI	// check for printable
 1979 0da0 FFF79AFD 		BL	INVER
 1980 0da4 FFF70CFC 		BL	QBRAN
 1981 0da8 F8020018 		.word	TCHA1+MAPOFFSET
 1982 0dac FFF76AFC 		BL	DROP
 1983 0db0 FFF7E3FB 		_DOLIT
 1984 0db4 5F000000 		.word	'_'	// replace non-printables
 1985              	TCHA1:
 1986 0db8 52F804FB 		  _UNNEST
 1987              	
 1988              	//    DEPTH	( -- n )
 1989              	// 	Return the depth of the data stack.
 1990              	
 1991 0dbc B6020018 		.word	_TCHAR+MAPOFFSET
 1992 0dc0 05       	_DEPTH:	.byte  5
 1993 0dc1 44455054 		.ascii "DEPTH"
 1993      48
 1994 0dc6 00BF     		.p2align 2 	
 1995              	DEPTH:
 1996 0dc8 03F59D46 		ADD	R6,R3,#SPP&0xffff 
 1997 0dcc A6EB0106 		SUB	R6,R6,R1
 1998 0dd0 41F8045D 		_PUSH
 1999 0dd4 4FEAA605 		ASR	R5,R6,#2
 2000 0dd8 7047     		_NEXT
 2001              	
 2002              	//    PICK	( ... +n -- ... w )
 2003              	// 	Copy the nth stack item to tos.
 2004              	
 2005 0dda 00030018 		.word	_DEPTH+MAPOFFSET
 2006 0dde 04       	_PICK:	.byte  4
 2007 0ddf 5049434B 		.ascii "PICK"
 2008 0de3 00       		.p2align 2 	
 2009              	PICK:
 2010 0de4 42F804ED 		_NEST
 2011 0de8 FFF7E6FC 		BL	ONEP
 2012 0dec FFF71EFD 		BL	CELLS
 2013 0df0 FFF73EFC 		BL	SPAT
 2014 0df4 FFF7B2FC 		BL	PLUS
ARM GAS  stm32eforth.s 			page 40


 2015 0df8 FFF708FC 		BL	AT
 2016 0dfc 52F804FB 		_UNNEST
 2017              	
 2018              	// **************************************************************************
 2019              	//  Memory access
 2020              	
 2021              	//    HERE	( -- a )
 2022              	// 	Return the top of the code dictionary.
 2023              	
 2024 0e00 1E030018 		.word	_PICK+MAPOFFSET
 2025 0e04 04       	_HERE:	.byte  4
 2026 0e05 48455245 		.ascii "HERE"
 2027 0e09 0000BF   		.p2align 2 	
 2028              	HERE:
 2029 0e0c 42F804ED 		_NEST
 2030 0e10 FFF796FE 		BL	CPP
 2031 0e14 FFF7FAFB 		BL	AT
 2032 0e18 52F804FB 		_UNNEST
 2033              		
 2034              	//    PAD	 ( -- a )
 2035              	// 	Return the address of a temporary buffer.
 2036              	
 2037 0e1c 44030018 		.word	_HERE+MAPOFFSET
 2038 0e20 03       	_PAD:	.byte  3
 2039 0e21 504144   		.ascii "PAD"
 2040              		.p2align 2 	
 2041              	PAD:
 2042 0e24 42F804ED 		_NEST
 2043 0e28 FFF7F0FF 		BL	HERE
 2044 0e2c 05F15005 		ADD	R5,R5,#80
 2045 0e30 52F804FB 		_UNNEST
 2046              	
 2047              	//    TIB	 ( -- a )
 2048              	// 	Return the address of the terminal input buffer.
 2049              	
 2050 0e34 60030018 		.word	_PAD+MAPOFFSET
 2051 0e38 03       	_TIB:	.byte  3
 2052 0e39 544942   		.ascii "TIB"
 2053              		.p2align 2 	
 2054              	TIB:
 2055 0e3c 41F8045D 		_PUSH
 2056 0e40 1D6B     		ldr r5,[r3,#TIB_OFS]
 2057 0e42 7047     		_NEXT
 2058              	
 2059              	//    @EXECUTE	( a -- )
 2060              	// 	Execute vector stored in address a.
 2061              	
 2062 0e44 78030018 		.word	_TIB+MAPOFFSET
 2063 0e48 08       	_ATEXE:	.byte   8
 2064 0e49 40455845 		.ascii "@EXECUTE"
 2064      43555445 
 2065 0e51 0000BF   		.p2align 2 	
 2066              	ATEXE:
 2067 0e54 2C00     		MOVS	R4,R5
 2068 0e56 51F8045B 		_POP
 2069 0e5a 2468     		LDR	R4,[R4]
 2070 0e5c 44F00104 		ORR	R4,R4,#1
ARM GAS  stm32eforth.s 			page 41


 2071 0e60 18BF     	    IT NE 
 2072 0e62 2047     		BXNE	R4
 2073 0e64 7047     		_NEXT
 2074              	
 2075              	//    CMOVE	( b1 b2 u -- )
 2076              	// 	Copy u bytes from b1 to b2.
 2077              	
 2078 0e66 88030018 		.word	_ATEXE+MAPOFFSET
 2079 0e6a 05       	_CMOVE:	.byte   5
 2080 0e6b 434D4F56 		.ascii "CMOVE"
 2080      45
 2081              		.p2align 2 	
 2082              	CMOVE:
 2083 0e70 51F8046B 		LDR	R6,[R1],#4
 2084 0e74 51F8047B 		LDR	R7,[R1],#4
 2085 0e78 03E0     		B CMOV1
 2086              	CMOV0:
 2087 0e7a 17F8014B 		LDRB	R4,[R7],#1
 2088 0e7e 06F8014B 		STRB	R4,[R6],#1
 2089              	CMOV1:
 2090 0e82 2D00     		MOVS	R5,R5
 2091 0e84 02D0     		BEQ	CMOV2
 2092 0e86 A5F10105 		SUB	R5,R5,#1
 2093 0e8a F6E7     		B CMOV0
 2094              	CMOV2:
 2095 0e8c 51F8045B 		_POP
 2096 0e90 7047     		_NEXT
 2097              	
 2098              	//    MOVE	( a1 a2 u -- )
 2099              	// 	Copy u words from a1 to a2.
 2100              	
 2101 0e92 AA030018 		.word	_CMOVE+MAPOFFSET
 2102 0e96 04       	_MOVE:	.byte   4
 2103 0e97 4D4F5645 		.ascii "MOVE"
 2104 0e9b 00       		.p2align 2 	
 2105              	MOVE:
 2106 0e9c 25F00305 		AND	R5,R5,#-4
 2107 0ea0 51F8046B 		LDR	R6,[R1],#4
 2108 0ea4 51F8047B 		LDR	R7,[R1],#4
 2109 0ea8 03E0     		B MOVE1
 2110              	MOVE0:
 2111 0eaa 57F8044B 		LDR	R4,[R7],#4
 2112 0eae 46F8044B 		STR	R4,[R6],#4
 2113              	MOVE1:
 2114 0eb2 2D00     		MOVS	R5,R5
 2115 0eb4 02D0     		BEQ	MOVE2
 2116 0eb6 A5F10405 		SUB	R5,R5,#4
 2117 0eba F6E7     		B MOVE0
 2118              	MOVE2:
 2119 0ebc 51F8045B 		_POP
 2120 0ec0 7047     		_NEXT
 2121              	
 2122              	//    FILL	( b u c -- )
 2123              	// 	Fill u bytes of character c to area beginning at b.
 2124              	
 2125 0ec2 D6030018 		.word	_MOVE+MAPOFFSET
 2126 0ec6 04       	_FILL:	.byte   4
ARM GAS  stm32eforth.s 			page 42


 2127 0ec7 46494C4C 		.ascii "FILL"
 2128 0ecb 00       		.p2align 2 	
 2129              	FILL:
 2130 0ecc 51F8046B 		LDR	R6,[R1],#4
 2131 0ed0 51F8047B 		LDR	R7,[R1],#4
 2132              	FILL0:
 2133 0ed4 00E0     		B FILL1
 2134 0ed6 2D46     		MOV	R5,R5
 2135              	FILL1:
 2136 0ed8 07F8015B 		STRB	R5,[R7],#1
 2137 0edc 3600     		MOVS	R6,R6
 2138 0ede 02D0     		BEQ	FILL2
 2139 0ee0 A6F10106 		SUB	R6,R6,#1
 2140 0ee4 F6E7     		B FILL0
 2141              	FILL2:
 2142 0ee6 51F8045B 		_POP
 2143 0eea 7047     		_NEXT
 2144              	
 2145              	//    PACK$	( b u a -- a )
 2146              	// 	Build a counted word with u characters from b. Null fill.
 2147              	
 2148 0eec 06040018 		.word	_FILL+MAPOFFSET
 2149 0ef0 05       	_PACKS:	.byte  5
 2150 0ef1 5041434B 		.ascii "PACK$$"
 2150      2424
 2151 0ef7 00       		.p2align 2 	
 2152              	PACKS:
 2153 0ef8 42F804ED 		_NEST
 2154 0efc FFF732FF 		BL	ALGND
 2155 0f00 FFF7C8FB 		BL	DUPP
 2156 0f04 FFF7AAFB 		BL	TOR			// strings only on cell boundary
 2157 0f08 FFF7D6FB 		BL	OVER
 2158 0f0c FFF726FC 		BL	PLUS
 2159 0f10 FFF752FC 		BL	ONEP
 2160 0f14 FFF731FB 		_DOLIT
 2161 0f18 FCFFFFFF 		.word	0xFFFFFFFC
 2162 0f1c FFF7DEFB 		BL	ANDD			// count mod cell
 2163 0f20 FFF72BFB 		_DOLIT
 2164 0f24 00000000 		.word	0
 2165 0f28 FFF7BCFB 		BL	SWAP
 2166 0f2c FFF764FB 		BL	STORE			// null fill cell
 2167 0f30 FFF78CFB 		BL	RAT
 2168 0f34 FFF7B8FC 		BL	DDUP
 2169 0f38 FFF76EFB 		BL	CSTOR
 2170 0f3c FFF73CFC 		BL	ONEP			// save count
 2171 0f40 FFF7B0FB 		BL	SWAP
 2172 0f44 FFF794FF 		BL	CMOVE
 2173 0f48 FFF776FB 		BL	RFROM
 2174 0f4c 52F804FB 		_UNNEST   			// move string
 2175              	
 2176              	// **************************************************************************
 2177              	//  Numeric output, single precision
 2178              	
 2179              	//    DIGIT	( u -- c )
 2180              	// 	Convert digit u to a character.
 2181              	
 2182 0f50 30040018 		.word	_PACKS+MAPOFFSET
ARM GAS  stm32eforth.s 			page 43


 2183 0f54 05       	_DIGIT:	.byte  5
 2184 0f55 44494749 		.ascii "DIGIT"
 2184      54
 2185 0f5a 00BF     		.p2align 2 	
 2186              	DIGIT:
 2187 0f5c 42F804ED 		_NEST
 2188 0f60 FFF70BFB 		_DOLIT
 2189 0f64 09000000 		.word	9
 2190 0f68 FFF7A6FB 		BL	OVER
 2191 0f6c FFF7F2FC 		BL	LESS
 2192 0f70 05F00705 		AND	R5,R5,#7
 2193 0f74 FFF7F2FB 		BL	PLUS
 2194 0f78 05F13005 		ADD	R5,R5,#'0'
 2195 0f7c 52F804FB 		_UNNEST
 2196              	
 2197              	//    EXTRACT	( n base -- n c )
 2198              	// 	Extract the least significant digit from n.
 2199              	
 2200 0f80 94040018 		.word	_DIGIT+MAPOFFSET
 2201 0f84 07       	_EXTRC:	.byte  7
 2202 0f85 45585452 		.ascii "EXTRACT"
 2202      414354
 2203              		.p2align 2 	
 2204              	EXTRC:
 2205 0f8c 42F804ED 		_NEST
 2206 0f90 FFF7F3FA 		_DOLIT
 2207 0f94 00000000 		.word	0
 2208 0f98 FFF784FB 		BL	SWAP
 2209 0f9c FFF73EFE 		BL	UMMOD
 2210 0fa0 FFF780FB 		BL	SWAP
 2211 0fa4 FFF7DAFF 		BL	DIGIT
 2212 0fa8 52F804FB 		_UNNEST
 2213              	
 2214              	//    <#	  ( -- )
 2215              	// 	Initiate the numeric output process.
 2216              	
 2217 0fac C4040018 		.word	_EXTRC+MAPOFFSET
 2218 0fb0 02       	_BDIGS:	.byte  2
 2219 0fb1 3C23     		.ascii "<#"
 2220 0fb3 00       		.p2align 2 	
 2221              	BDIGS:
 2222 0fb4 42F804ED 		_NEST
 2223 0fb8 FFF734FF 		BL	PAD
 2224 0fbc FFF7AAFD 		BL	HLD
 2225 0fc0 FFF71AFB 		BL	STORE
 2226 0fc4 52F804FB 		_UNNEST
 2227              	
 2228              	//    HOLD	( c -- )
 2229              	// 	Insert a character into the numeric output string.
 2230              	
 2231 0fc8 F0040018 		.word	_BDIGS+MAPOFFSET
 2232 0fcc 04       	_HOLD:	.byte  4
 2233 0fcd 484F4C44 		.ascii "HOLD"
 2234 0fd1 0000BF   		.p2align 2 	
 2235              	HOLD:
 2236 0fd4 42F804ED 		_NEST
 2237 0fd8 FFF79CFD 		BL	HLD
ARM GAS  stm32eforth.s 			page 44


 2238 0fdc FFF716FB 		BL	AT
 2239 0fe0 FFF7F2FB 		BL	ONEM
 2240 0fe4 FFF756FB 		BL	DUPP
 2241 0fe8 FFF794FD 		BL	HLD
 2242 0fec FFF704FB 		BL	STORE
 2243 0ff0 FFF712FB 		BL	CSTOR
 2244 0ff4 52F804FB 		_UNNEST
 2245              	
 2246              	//    #	   ( u -- u )
 2247              	// 	Extract one digit from u and append the digit to output string.
 2248              	
 2249 0ff8 0C050018 		.word	_HOLD+MAPOFFSET
 2250 0ffc 01       	_DIG:	.byte  1
 2251 0ffd 23       		.ascii "#"
 2252 0ffe 00BF     		.p2align 2 	
 2253              	DIG:
 2254 1000 42F804ED 		_NEST
 2255 1004 FFF74EFD 		BL	BASE
 2256 1008 FFF700FB 		BL	AT
 2257 100c FFF7BEFF 		BL	EXTRC
 2258 1010 FFF7E0FF 		BL	HOLD
 2259 1014 52F804FB 		_UNNEST
 2260              	
 2261              	//    #S	  ( u -- 0 )
 2262              	// 	Convert u until all digits are added to the output string.
 2263              	
 2264 1018 3C050018 		.word	_DIG+MAPOFFSET
 2265 101c 02       	_DIGS:	.byte  2
 2266 101d 2353     		.ascii "#S"
 2267 101f 00       		.p2align 2 	
 2268              	DIGS:
 2269 1020 42F804ED 		_NEST
 2270              	DIGS1:
 2271 1024 FFF7ECFF 	    BL	DIG
 2272 1028 FFF734FB 		BL	DUPP
 2273 102c FFF7C8FA 		BL	QBRAN
 2274 1030 76050018 		.word	DIGS2+MAPOFFSET
 2275 1034 F6E7     		B	DIGS1
 2276              	DIGS2:
 2277 1036 52F804FB 		  _UNNEST
 2278              	
 2279              	//    SIGN	( n -- )
 2280              	// 	Add a minus sign to the numeric output string.
 2281              	
 2282 103a 5C050018 		.word	_DIGS+MAPOFFSET
 2283 103e 04       	_SIGN:	.byte  4
 2284 103f 5349474E 		.ascii "SIGN"
 2285 1043 00       		.p2align 2 	
 2286              	SIGN:
 2287 1044 42F804ED 		_NEST
 2288 1048 FFF73EFB 		BL	ZLESS
 2289 104c FFF7B8FA 		BL	QBRAN
 2290 1050 A0050018 		.word	SIGN1+MAPOFFSET
 2291 1054 FFF791FA 		_DOLIT
 2292 1058 2D000000 		.word	'-'
 2293 105c FFF7BAFF 		BL	HOLD
 2294              	SIGN1:
ARM GAS  stm32eforth.s 			page 45


 2295 1060 52F804FB 		  _UNNEST
 2296              	
 2297              	//    #>	  ( w -- b u )
 2298              	// 	Prepare the outputDCB to be TYPE'd.
 2299              	
 2300 1064 7E050018 		.word	_SIGN+MAPOFFSET
 2301 1068 02       	_EDIGS:	.byte  2
 2302 1069 233E     		.ascii "#>"
 2303 106b 00       		.p2align 2 	
 2304              	EDIGS:
 2305 106c 42F804ED 		_NEST
 2306 1070 FFF708FB 		BL	DROP
 2307 1074 FFF74EFD 		BL	HLD
 2308 1078 FFF7C8FA 		BL	AT
 2309 107c FFF7D2FE 		BL	PAD
 2310 1080 FFF71AFB 		BL	OVER
 2311 1084 FFF772FB 		BL	SUBB
 2312 1088 52F804FB 		_UNNEST
 2313              	
 2314              	//    str	 ( n -- b u )
 2315              	// 	Convert a signed integer to a numeric string.
 2316              	
 2317              	// 	.word	_EDIGS+MAPOFFSET
 2318              	// _STRR	.byte  3
 2319              	// 	.ascii "str"
 2320              	// 	.p2align 2 	
 2321              	STRR:
 2322 108c 42F804ED 		_NEST
 2323 1090 FFF700FB 		BL	DUPP
 2324 1094 FFF7E2FA 		BL	TOR
 2325 1098 FFF730FC 		BL	ABSS
 2326 109c FFF78AFF 		BL	BDIGS
 2327 10a0 FFF7BEFF 		BL	DIGS
 2328 10a4 FFF7C8FA 		BL	RFROM
 2329 10a8 FFF7CCFF 		BL	SIGN
 2330 10ac FFF7DEFF 		BL	EDIGS
 2331 10b0 52F804FB 		_UNNEST
 2332              	
 2333              	//    HEX	 ( -- )
 2334              	// 	Use radix 16 as base for numeric conversions.
 2335              	
 2336 10b4 A8050018 		.word	_EDIGS+MAPOFFSET
 2337 10b8 03       	_HEX:	.byte  3
 2338 10b9 484558   		.ascii "HEX"
 2339              		.p2align 2 	
 2340              	HEX:
 2341 10bc 42F804ED 		_NEST
 2342 10c0 FFF75BFA 		_DOLIT
 2343 10c4 10000000 		.word	16
 2344 10c8 FFF7ECFC 		BL	BASE
 2345 10cc FFF794FA 		BL	STORE
 2346 10d0 52F804FB 		_UNNEST
 2347              	
 2348              	//    DECIMAL	( -- )
 2349              	// 	Use radix 10 as base for numeric conversions.
 2350              	
 2351 10d4 F8050018 		.word	_HEX+MAPOFFSET
ARM GAS  stm32eforth.s 			page 46


 2352 10d8 07       	_DECIM:	.byte  7
 2353 10d9 44454349 		.ascii "DECIMAL"
 2353      4D414C
 2354              		.p2align 2 	
 2355              	DECIM:
 2356 10e0 42F804ED 		_NEST
 2357 10e4 FFF749FA 		_DOLIT
 2358 10e8 0A000000 		.word	10
 2359 10ec FFF7DAFC 		BL	BASE
 2360 10f0 FFF782FA 		BL	STORE
 2361 10f4 52F804FB 		_UNNEST
 2362              	
 2363              	// **************************************************************************
 2364              	//  Numeric input, single precision
 2365              	
 2366              	//    DIGIT?	( c base -- u t )
 2367              	// 	Convert a character to its numeric value. A flag indicates success.
 2368              	
 2369 10f8 18060018 		.word	_DECIM+MAPOFFSET
 2370 10fc 06       	_DIGTQ:	.byte  6
 2371 10fd 44494749 		.ascii "DIGIT?"
 2371      543F
 2372 1103 00       		.p2align 2 	
 2373              	DIGTQ:
 2374 1104 42F804ED 		_NEST
 2375 1108 FFF7A8FA 		BL	TOR
 2376 110c FFF735FA 		_DOLIT
 2377 1110 30000000 		.word	'0'
 2378 1114 FFF72AFB 		BL	SUBB
 2379 1118 FFF72FFA 		_DOLIT
 2380 111c 09000000 		.word	9
 2381 1120 FFF7CAFA 		BL	OVER
 2382 1124 FFF716FC 		BL	LESS
 2383 1128 FFF74AFA 		BL	QBRAN
 2384 112c 90060018 		.word	DGTQ1+MAPOFFSET
 2385 1130 FFF723FA 		_DOLIT
 2386 1134 07000000 		.word	7
 2387 1138 FFF718FB 		BL	SUBB
 2388 113c FFF7AAFA 		BL	DUPP
 2389 1140 FFF71BFA 		_DOLIT
 2390 1144 0A000000 		.word	10
 2391 1148 FFF704FC 		BL	LESS
 2392 114c FFF7D0FA 		BL	ORR
 2393              	DGTQ1:
 2394 1150 FFF7A0FA 	  BL	DUPP
 2395 1154 FFF770FA 		BL	RFROM
 2396 1158 FFF7F0FB 		BL	ULESS
 2397 115c 52F804FB 		_UNNEST
 2398              	
 2399              	//    NUMBER?	( a -- n T | a F )
 2400              	// 	Convert a number word to integer. Push a flag on tos.
 2401              	
 2402 1160 3C060018 		.word	_DIGTQ+MAPOFFSET
 2403 1164 07       	_NUMBQ:	.byte  7
 2404 1165 4E554D42 		.ascii "NUMBER?"
 2404      45523F
 2405              		.p2align 2 	
ARM GAS  stm32eforth.s 			page 47


 2406              	NUMBQ:
 2407 116c 42F804ED 		_NEST
 2408 1170 FFF798FC 		BL	BASE
 2409 1174 FFF74AFA 		BL	AT
 2410 1178 FFF770FA 		BL	TOR
 2411 117c FFF7FDF9 		_DOLIT
 2412 1180 00000000 		.word	0
 2413 1184 FFF798FA 		BL	OVER
 2414 1188 FFF734FC 		BL	COUNT
 2415 118c FFF794FA 		BL	OVER
 2416 1190 FFF74CFA 		BL	CAT
 2417 1194 FFF7F1F9 		_DOLIT
 2418 1198 24000000 		.word	'$'
 2419 119c FFF7C2FB 		BL	EQUAL
 2420 11a0 FFF70EFA 		BL	QBRAN
 2421 11a4 FC060018 		.word	NUMQ1+MAPOFFSET
 2422 11a8 FFF788FF 		BL	HEX
 2423 11ac FFF77AFA 		BL	SWAP
 2424 11b0 FFF702FB 		BL	ONEP
 2425 11b4 FFF776FA 		BL	SWAP
 2426 11b8 FFF706FB 		BL	ONEM
 2427              	NUMQ1:
 2428 11bc FFF77CFA 		BL	OVER
 2429 11c0 FFF734FA 		BL	CAT
 2430 11c4 FFF7D9F9 		_DOLIT
 2431 11c8 2D000000 		.word	'-'
 2432 11cc FFF7AAFB 		BL	EQUAL
 2433 11d0 FFF744FA 		BL	TOR
 2434 11d4 FFF766FA 		BL	SWAP
 2435 11d8 FFF738FA 		BL	RAT
 2436 11dc FFF7C6FA 		BL	SUBB
 2437 11e0 FFF760FA 		BL	SWAP
 2438 11e4 FFF732FA 		BL	RAT
 2439 11e8 FFF7B8FA 		BL	PLUS
 2440 11ec FFF73EFB 		BL	QDUP
 2441 11f0 FFF7E6F9 		BL	QBRAN
 2442 11f4 C0070018 		.word	NUMQ6+MAPOFFSET
 2443 11f8 FFF7E6FA 		BL	ONEM
 2444 11fc FFF72EFA 		BL	TOR
 2445              	NUMQ2:
 2446 1200 FFF748FA 		BL	DUPP
 2447 1204 FFF72AFA 		BL	TOR
 2448 1208 FFF710FA 		BL	CAT
 2449 120c FFF74AFC 		BL	BASE
 2450 1210 FFF7FCF9 		BL	AT
 2451 1214 FFF776FF 		BL	DIGTQ
 2452 1218 FFF7D2F9 		BL	QBRAN
 2453 121c A4070018 		.word	NUMQ4+MAPOFFSET
 2454 1220 FFF740FA 		BL	SWAP
 2455 1224 FFF73EFC 		BL	BASE
 2456 1228 FFF7F0F9 		BL	AT
 2457 122c FFF7A6FA 		BL	STAR
 2458 1230 FFF794FA 		BL	PLUS
 2459 1234 FFF700FA 		BL	RFROM
 2460 1238 FFF7BEFA 		BL	ONEP
 2461 123c FFF7B1F9 		BL	DONXT
 2462 1240 40070018 		.word	NUMQ2+MAPOFFSET
ARM GAS  stm32eforth.s 			page 48


 2463 1244 FFF702FA 		BL	RAT
 2464 1248 FFF72CFA 		BL	SWAP
 2465 124c FFF71AFA 		BL	DROP
 2466 1250 FFF7B6F9 		BL	QBRAN
 2467 1254 9C070018 		.word	NUMQ3+MAPOFFSET
 2468 1258 FFF748FB 		BL	NEGAT
 2469              	NUMQ3:
 2470 125c FFF722FA 		BL	SWAP
 2471 1260 00F00CB8 		B.W	NUMQ5
 2472              	NUMQ4:
 2473 1264 FFF7E8F9 		BL	RFROM
 2474 1268 FFF7E6F9 		BL	RFROM
 2475 126c FFF712FB 		BL	DDROP
 2476 1270 FFF710FB 		BL	DDROP
 2477 1274 FFF781F9 		_DOLIT
 2478 1278 00000000 		.word	0
 2479              	NUMQ5:
 2480 127c FFF70AFA 		BL	DUPP
 2481              	NUMQ6:
 2482 1280 FFF7DAF9 		BL	RFROM
 2483 1284 FFF706FB 		BL	DDROP
 2484 1288 FFF7D6F9 		BL	RFROM
 2485 128c FFF70AFC 		BL	BASE
 2486 1290 FFF7B2F9 		BL	STORE
 2487 1294 52F804FB 		_UNNEST
 2488              	
 2489              	// **************************************************************************
 2490              	//  Basic I/O
 2491              	
 2492              	//    KEY	 ( -- c )
 2493              	// 	Wait for and return an input character.
 2494              	
 2495 1298 A4060018 		.word	_NUMBQ+MAPOFFSET
 2496 129c 03       	_KEY:	.byte  3
 2497 129d 4B4559   		.ascii "KEY"
 2498              		.p2align 2 	
 2499              	KEY:
 2500 12a0 42F804ED 		_NEST
 2501              	KEY1:
 2502 12a4 FFF73CF9 		BL	QRX
 2503 12a8 FFF78AF9 		BL	QBRAN
 2504 12ac E4070018 		.word	KEY1+MAPOFFSET
 2505 12b0 52F804FB 		_UNNEST
 2506              	
 2507              	//    SPACE	( -- )
 2508              	// 	Send the blank character to the output device.
 2509              	
 2510 12b4 DC070018 		.word	_KEY+MAPOFFSET
 2511 12b8 05       	_SPACE:	.byte  5
 2512 12b9 53504143 		.ascii "SPACE"
 2512      45
 2513 12be 00BF     		.p2align 2 	
 2514              	SPACE:
 2515 12c0 42F804ED 		_NEST
 2516 12c4 FFF7A8FA 		BL	BLANK
 2517 12c8 FFF746F9 		BL	EMIT
 2518 12cc 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 49


 2519              	
 2520              	//    SPACES	( +n -- )
 2521              	// 	Send n spaces to the output device.
 2522              	
 2523 12d0 F8070018 		.word	_SPACE+MAPOFFSET
 2524 12d4 06       	_SPACS:	.byte  6
 2525 12d5 53504143 		.ascii "SPACES"
 2525      4553
 2526 12db 00       		.p2align 2 	
 2527              	SPACS:
 2528 12dc 42F804ED 		_NEST
 2529 12e0 FFF74BF9 		_DOLIT
 2530 12e4 00000000 		.word	0
 2531 12e8 FFF74CFB 		BL	MAX
 2532 12ec FFF7B6F9 		BL	TOR
 2533 12f0 00F002B8 		B.W	CHAR2
 2534              	CHAR1:
 2535 12f4 FFF7E4FF 		BL	SPACE
 2536              	CHAR2:
 2537 12f8 FFF753F9 		BL	DONXT
 2538 12fc 34080018 		.word	CHAR1+MAPOFFSET
 2539 1300 52F804FB 		_UNNEST
 2540              	
 2541              	//    TYPE	( b u -- )
 2542              	// 	Output u characters from b.
 2543              	
 2544 1304 14080018 		.word	_SPACS+MAPOFFSET
 2545 1308 04       	_TYPEE:	.byte	4
 2546 1309 54595045 		.ascii "TYPE"
 2547 130d 0000BF   		.p2align 2 	
 2548              	TYPEE:
 2549 1310 42F804ED 		_NEST
 2550 1314 FFF7A2F9 		BL  TOR   // ( a+1 -- R: u )
 2551 1318 00F006B8 		B.W	TYPE2
 2552              	TYPE1:  
 2553 131c FFF76AFB 		BL  COUNT
 2554 1320 FFF72CFD 		BL	TCHAR
 2555 1324 FFF718F9 		BL	EMIT
 2556              	TYPE2:  
 2557 1328 FFF73BF9 		BL  DONXT  
 2558 132c 5C080018 		.word	TYPE1+MAPOFFSET
 2559 1330 FFF7A8F9 		BL	DROP
 2560 1334 52F804FB 		_UNNEST
 2561              	
 2562              	//    CR	  ( -- )
 2563              	// 	Output a carriage return and a line feed.
 2564              	
 2565 1338 48080018 		.word	_TYPEE+MAPOFFSET
 2566 133c 02       	_CR:	.byte  2
 2567 133d 4352     		.ascii "CR"
 2568 133f 00       		.p2align 2 	
 2569              	CR:
 2570 1340 42F804ED 		_NEST
 2571 1344 FFF719F9 		_DOLIT
 2572 1348 0D000000 		.word	CRR
 2573 134c FFF704F9 		BL	EMIT
 2574 1350 FFF713F9 		_DOLIT
ARM GAS  stm32eforth.s 			page 50


 2575 1354 0A000000 		.word	LF
 2576 1358 FFF7FEF8 		BL	EMIT
 2577 135c 52F804FB 		_UNNEST
 2578              	
 2579              	//    do_$	( -- a )
 2580              	// 	Return the address of a compiled string.
 2581              	//  adjust return address to skip over it.
 2582              	
 2583              	// 	.word	_CR+MAPOFFSET
 2584              	// _DOSTR	.byte  COMPO+3
 2585              	// 	.ascii "do$$"
 2586              	// 	.p2align 2 	
 2587              	DOSTR:
 2588 1360 42F804ED 		_NEST     
 2589              	/* compiled string address is 2 levels deep */
 2590 1364 FFF768F9 		BL	RFROM	// { -- a1 }
 2591 1368 FFF766F9 		BL	RFROM	//  {a1 -- a1 a2 } b0 set
 2592 136c FFF72CFA 		BL	ONEM	//  clear b0
 2593 1370 FFF790F9 		BL	DUPP	// {a1 a2 -- a1 a2 a2 }
 2594 1374 FFF73EFB 		BL	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2595 1378 FFF7F0F9 		BL	PLUS	// { -- a1 a2 a2+1+c }
 2596 137c FFF7F2FC 		BL	ALGND	//  end of string
 2597 1380 FFF71AFA 		BL	ONEP	//  restore b0, this result in return address 2 level deep.
 2598 1384 FFF76AF9 		BL	TOR		//  address after string { -- a1 a2 }
 2599 1388 FFF78CF9 		BL	SWAP	//  count tugged
 2600 138c FFF766F9 		BL	TOR     //  ( -- a2) is string address
 2601 1390 52F804FB 		_UNNEST
 2602              	
 2603              	//    $"|	( -- a )
 2604              	// 	Run time routine compiled by _". Return address of a compiled string.
 2605              	
 2606              	// 	.word	_DOSTR+MAPOFFSET
 2607              	// _STRQP	.byte  COMPO+3
 2608              	// 	.ascii "$\"|"
 2609              	// 	.p2align 2 	
 2610              	STRQP:
 2611 1394 42F804ED 		_NEST
 2612 1398 FFF7E2FF 		BL	DOSTR
 2613 139c 52F804FB 		_UNNEST			// force a call to dostr
 2614              	
 2615              	//    .$	( a -- )
 2616              	// 	Run time routine of ." . Output a compiled string.
 2617              	
 2618              	// 	.word	_STRQP+MAPOFFSET
 2619              	// _DOTST	.byte  COMPO+2
 2620              	// 	.ascii ".$$"
 2621              	// 	.p2align 2 	
 2622              	DOTST:
 2623 13a0 42F804ED 		_NEST
 2624 13a4 FFF726FB 		BL	COUNT // ( -- a+1 c )
 2625 13a8 FFF7B2FF 		BL	TYPEE
 2626 13ac 52F804FB 		_UNNEST
 2627              	
 2628              	//    ."|	( -- )
 2629              	// 	Run time routine of ." . Output a compiled string.
 2630              	
 2631              	// 	.word	_DOTST+MAPOFFSET
ARM GAS  stm32eforth.s 			page 51


 2632              	// _DOTQP	.byte  COMPO+3
 2633              	// 	.ascii ".""|"
 2634              	// 	.p2align 2 	
 2635              	DOTQP:
 2636 13b0 42F804ED 		_NEST
 2637 13b4 FFF7D4FF 		BL	DOSTR
 2638 13b8 FFF7F2FF 		BL	DOTST
 2639 13bc 52F804FB 		_UNNEST
 2640              	
 2641              	//    .R	  ( n +n -- )
 2642              	// 	Display an integer in a field of n columns, right justified.
 2643              	
 2644 13c0 7C080018 		.word	_CR+MAPOFFSET
 2645 13c4 02       	_DOTR:	.byte  2
 2646 13c5 2E52     		.ascii ".R"
 2647 13c7 00       		.p2align 2 	
 2648              	DOTR:
 2649 13c8 42F804ED 		_NEST
 2650 13cc FFF746F9 		BL	TOR
 2651 13d0 FFF75CFE 		BL	STRR
 2652 13d4 FFF730F9 		BL	RFROM
 2653 13d8 FFF76EF9 		BL	OVER
 2654 13dc FFF7C6F9 		BL	SUBB
 2655 13e0 FFF77CFF 		BL	SPACS
 2656 13e4 FFF794FF 		BL	TYPEE
 2657 13e8 52F804FB 		_UNNEST
 2658              	
 2659              	//    U.R	 ( u +n -- )
 2660              	// 	Display an unsigned integer in n column, right justified.
 2661              	
 2662 13ec 04090018 		.word	_DOTR+MAPOFFSET
 2663 13f0 03       	_UDOTR:	.byte  3
 2664 13f1 552E52   		.ascii "U.R"
 2665              		.p2align 2 	
 2666              	UDOTR:
 2667 13f4 42F804ED 		_NEST
 2668 13f8 FFF730F9 		BL	TOR
 2669 13fc FFF7DAFD 		BL	BDIGS
 2670 1400 FFF70EFE 		BL	DIGS
 2671 1404 FFF732FE 		BL	EDIGS
 2672 1408 FFF716F9 		BL	RFROM
 2673 140c FFF754F9 		BL	OVER
 2674 1410 FFF7ACF9 		BL	SUBB
 2675 1414 FFF762FF 		BL	SPACS
 2676 1418 FFF77AFF 		BL	TYPEE
 2677 141c 52F804FB 		_UNNEST
 2678              	
 2679              	//    U.	  ( u -- )
 2680              	// 	Display an unsigned integer in free format.
 2681              	
 2682 1420 30090018 		.word	_UDOTR+MAPOFFSET
 2683 1424 02       	_UDOT:	.byte  2
 2684 1425 552E     		.ascii "U."
 2685 1427 00       		.p2align 2 	
 2686              	UDOT:
 2687 1428 42F804ED 		_NEST
 2688 142c FFF7C2FD 		BL	BDIGS
ARM GAS  stm32eforth.s 			page 52


 2689 1430 FFF7F6FD 		BL	DIGS
 2690 1434 FFF71AFE 		BL	EDIGS
 2691 1438 FFF742FF 		BL	SPACE
 2692 143c FFF768FF 		BL	TYPEE
 2693 1440 52F804FB 		_UNNEST
 2694              	
 2695              	//    .	   ( w -- )
 2696              	// 	Display an integer in free format, preceeded by a space.
 2697              	
 2698 1444 64090018 		.word	_UDOT+MAPOFFSET
 2699 1448 01       	_DOT:	.byte  1
 2700 1449 2E       		.ascii "."
 2701 144a 00BF     		.p2align 2 	
 2702              	DOT:
 2703 144c 42F804ED 		_NEST
 2704 1450 FFF728FB 		BL	BASE
 2705 1454 FFF7DAF8 		BL	AT
 2706 1458 FFF78FF8 		_DOLIT
 2707 145c 0A000000 		.word	10
 2708 1460 FFF750F9 		BL	XORR			// ?decimal
 2709 1464 FFF7ACF8 		BL	QBRAN
 2710 1468 B4090018 		.word	DOT1+MAPOFFSET
 2711 146c FFF7DCFF 		BL	UDOT
 2712 1470 52F804FB 		_UNNEST			// no,display unsigned
 2713              	DOT1:
 2714 1474 FFF70AFE 	    BL	STRR
 2715 1478 FFF722FF 		BL	SPACE
 2716 147c FFF748FF 		BL	TYPEE
 2717 1480 52F804FB 		_UNNEST			// yes, display signed
 2718              	
 2719              	//    ?	   ( a -- )
 2720              	// 	Display the contents in a memory cell.
 2721              	
 2722 1484 88090018 		.word	_DOT+MAPOFFSET
 2723 1488 01       	_QUEST:	.byte  1
 2724 1489 3F       		.ascii "?"
 2725 148a 00BF     		.p2align 2 	
 2726              	QUEST:
 2727 148c 42F804ED 		_NEST
 2728 1490 FFF7BCF8 		BL	AT
 2729 1494 FFF7DAFF 		BL	DOT
 2730 1498 52F804FB 		_UNNEST
 2731              	
 2732              	// **************************************************************************
 2733              	//  Parsing
 2734              	
 2735              	//    parse	( b u c -- b u delta //  string> )
 2736              	// 	Scan word delimited by c. Return found string and its offset.
 2737              	
 2738              	// 	.word	_QUEST+MAPOFFSET
 2739              	// _PARS	.byte  5
 2740              	// 	.ascii "parse"
 2741              	// 	.p2align 2 	
 2742              	PARS:
 2743 149c 42F804ED 		_NEST
 2744 14a0 FFF705FB 		BL	TEMP
 2745 14a4 FFF7A8F8 		BL	STORE
ARM GAS  stm32eforth.s 			page 53


 2746 14a8 FFF706F9 		BL	OVER
 2747 14ac FFF7D6F8 		BL	TOR
 2748 14b0 FFF7F0F8 		BL	DUPP
 2749 14b4 FFF784F8 		BL	QBRAN
 2750 14b8 EA0A0018 		.word	PARS8+MAPOFFSET
 2751 14bc FFF784F9 		BL	ONEM
 2752 14c0 FFF7F5FA 		BL	TEMP
 2753 14c4 FFF7A2F8 		BL	AT
 2754 14c8 FFF7A6F9 		BL	BLANK
 2755 14cc FFF72AFA 		BL	EQUAL
 2756 14d0 FFF776F8 		BL	QBRAN
 2757 14d4 640A0018 		.word	PARS3+MAPOFFSET
 2758 14d8 FFF7C0F8 		BL	TOR
 2759              	PARS1:
 2760 14dc FFF79CF9 		BL	BLANK
 2761 14e0 FFF7EAF8 		BL	OVER
 2762 14e4 FFF7A2F8 		BL	CAT			// skip leading blanks 
 2763 14e8 FFF740F9 		BL	SUBB
 2764 14ec FFF7ECF8 		BL	ZLESS
 2765 14f0 FFF7F2F9 		BL	INVER
 2766 14f4 FFF764F8 		BL	QBRAN
 2767 14f8 600A0018 		.word	PARS2+MAPOFFSET
 2768 14fc FFF75CF9 		BL	ONEP
 2769 1500 FFF74FF8 		BL	DONXT
 2770 1504 1C0A0018 		.word	PARS1+MAPOFFSET
 2771 1508 FFF796F8 		BL	RFROM
 2772 150c FFF7BAF8 		BL	DROP
 2773 1510 FFF733F8 		_DOLIT
 2774 1514 00000000 		.word	0
 2775 1518 FFF7BCF8 		BL	DUPP
 2776 151c 52F804FB 		_UNNEST
 2777              	PARS2:
 2778 1520 FFF78AF8 	  BL	RFROM
 2779              	PARS3:
 2780 1524 FFF7C8F8 		BL	OVER
 2781 1528 FFF7BCF8 		BL	SWAP
 2782 152c FFF796F8 		BL	TOR
 2783              	PARS4:
 2784 1530 FFF7BDFA 		BL	TEMP
 2785 1534 FFF76AF8 		BL	AT
 2786 1538 FFF7BEF8 		BL	OVER
 2787 153c FFF776F8 		BL	CAT
 2788 1540 FFF714F9 		BL	SUBB			// scan for delimiter
 2789 1544 FFF7B3FA 		BL	TEMP
 2790 1548 FFF760F8 		BL	AT
 2791 154c FFF764F9 		BL	BLANK
 2792 1550 FFF7E8F9 		BL	EQUAL
 2793 1554 FFF734F8 		BL	QBRAN
 2794 1558 A00A0018 		.word	PARS5+MAPOFFSET
 2795 155c FFF7B4F8 		BL	ZLESS
 2796              	PARS5:
 2797 1560 FFF72EF8 		BL	QBRAN
 2798 1564 BE0A0018 		.word	PARS6+MAPOFFSET
 2799 1568 FFF726F9 		BL	ONEP
 2800 156c FFF719F8 		BL	DONXT
 2801 1570 700A0018 		.word	PARS4+MAPOFFSET
 2802 1574 FFF78EF8 		BL	DUPP
ARM GAS  stm32eforth.s 			page 54


 2803 1578 FFF770F8 		BL	TOR
 2804 157c 09E0     		B	PARS7
 2805              	PARS6:
 2806 157e FFF75BF8 		BL	RFROM
 2807 1582 FFF77FF8 		BL	DROP
 2808 1586 FFF785F8 		BL	DUPP
 2809 158a FFF715F9 		BL	ONEP
 2810 158e FFF765F8 		BL	TOR
 2811              	PARS7:
 2812 1592 FFF791F8 		BL	OVER
 2813 1596 FFF7E9F8 		BL	SUBB
 2814 159a FFF74DF8 		BL	RFROM
 2815 159e FFF74BF8 		BL	RFROM
 2816 15a2 FFF7E3F8 		BL	SUBB
 2817 15a6 52F804FB 		_UNNEST
 2818              	PARS8:
 2819 15aa FFF785F8 		BL	OVER
 2820 15ae FFF743F8 		BL	RFROM
 2821 15b2 FFF7DBF8 		BL	SUBB
 2822 15b6 52F804FB 		_UNNEST
 2823              	
 2824              	//    PARSE	( c -- b u //  string> )
 2825              	// 	Scan input stream and return counted string delimited by c.
 2826              	
 2827 15ba C8090018 		.word	_QUEST+MAPOFFSET
 2828 15be 05       	_PARSE:	.byte  5
 2829 15bf 50415253 		.ascii "PARSE"
 2829      45
 2830              		.p2align 2 	
 2831              	PARSE:
 2832 15c4 42F804ED 		_NEST
 2833 15c8 FFF748F8 		BL	TOR
 2834 15cc FFF736FC 		BL	TIB
 2835 15d0 FFF782FA 		BL	INN
 2836 15d4 FFF71AF8 		BL	AT
 2837 15d8 FFF7C0F8 		BL	PLUS			// current input buffer pointer
 2838 15dc FFF786FA 		BL	NTIB
 2839 15e0 FFF714F8 		BL	AT
 2840 15e4 FFF778FA 		BL	INN
 2841 15e8 FFF710F8 		BL	AT
 2842 15ec FFF7BEF8 		BL	SUBB			// remaining count
 2843 15f0 FFF722F8 		BL	RFROM
 2844 15f4 FFF752FF 		BL	PARS
 2845 15f8 FFF76EFA 		BL	INN
 2846 15fc FFF7D6F9 		BL	PSTOR
 2847 1600 52F804FB 		_UNNEST
 2848              	
 2849              	//    .(	  ( -- )
 2850              	// 	Output following string up to next ) .
 2851              	
 2852 1604 FE0A0018 		.word	_PARSE+MAPOFFSET
 2853 1608 82       	_DOTPR:	.byte  IMEDD+2
 2854 1609 2E28     		.ascii ".("
 2855 160b 00       		.p2align 2 	
 2856              	DOTPR:
 2857 160c 42F804ED 		_NEST
 2858 1610 FEF7B3FF 		_DOLIT
ARM GAS  stm32eforth.s 			page 55


 2859 1614 29000000 		.word	')'
 2860 1618 FFF7D4FF 		BL	PARSE
 2861 161c FFF778FE 		BL	TYPEE
 2862 1620 52F804FB 		_UNNEST
 2863              	
 2864              	//    (	   ( -- )
 2865              	// 	Ignore following string up to next ) . A comment.
 2866              	
 2867 1624 480B0018 		.word	_DOTPR+MAPOFFSET
 2868 1628 81       	_PAREN:	.byte  IMEDD+1
 2869 1629 28       		.ascii "("
 2870 162a 00BF     		.p2align 2 	
 2871              	PAREN:
 2872 162c 42F804ED 		_NEST
 2873 1630 FEF7A3FF 		_DOLIT
 2874 1634 29000000 		.word	')'
 2875 1638 FFF7C4FF 		BL	PARSE
 2876 163c FFF72AF9 		BL	DDROP
 2877 1640 52F804FB 		_UNNEST
 2878              	
 2879              	//    \	   ( -- )
 2880              	// 	Ignore following text till the end of line.
 2881              	
 2882 1644 680B0018 		.word	_PAREN+MAPOFFSET
 2883 1648 81       	_BKSLA:	.byte  IMEDD+1
 2884 1649 5C       		.ascii	"\\"
 2885 164a 00BF     		.p2align 2 	
 2886              	BKSLA:
 2887 164c 42F804ED 		_NEST
 2888 1650 FFF74CFA 		BL	NTIB
 2889 1654 FEF7DAFF 		BL	AT
 2890 1658 FFF73EFA 		BL	INN
 2891 165c FEF7CCFF 		BL	STORE
 2892 1660 52F804FB 		_UNNEST
 2893              	
 2894              	//    CHAR	( -- c )
 2895              	// 	Parse next word and return its first character.
 2896              	
 2897 1664 880B0018 		.word	_BKSLA+MAPOFFSET
 2898 1668 04       	_CHAR:	.byte  4
 2899 1669 43484152 		.ascii "CHAR"
 2900 166d 0000BF   		.p2align 2 	
 2901              	CHAR:
 2902 1670 42F804ED 		_NEST
 2903 1674 FFF7D0F8 		BL	BLANK
 2904 1678 FFF7A4FF 		BL	PARSE
 2905 167c FFF702F8 		BL	DROP
 2906 1680 FEF7D4FF 		BL	CAT
 2907 1684 52F804FB 		_UNNEST
 2908              	
 2909              	//    WORD	( c -- a //  string> )
 2910              	// 	Parse a word from input stream and copy it to code dictionary.
 2911              	
 2912 1688 A80B0018 		.word	_CHAR+MAPOFFSET
 2913 168c 04       	_WORDD:	.byte  4
 2914 168d 574F5244 		.ascii "WORD"
 2915 1691 0000BF   		.p2align 2 	
ARM GAS  stm32eforth.s 			page 56


 2916              	WORDD:
 2917 1694 42F804ED 		_NEST
 2918 1698 FFF794FF 		BL	PARSE
 2919 169c FFF7B6FB 		BL	HERE
 2920 16a0 FFF7AAF8 		BL	CELLP
 2921 16a4 FFF728FC 		BL	PACKS
 2922 16a8 52F804FB 		_UNNEST
 2923              	
 2924              	//    TOKEN	( -- a //  string> )
 2925              	// 	Parse a word from input stream and copy it to name dictionary.
 2926              	
 2927 16ac CC0B0018 		.word	_WORDD+MAPOFFSET
 2928 16b0 05       	_TOKEN:	.byte  5
 2929 16b1 544F4B45 		.ascii "TOKEN"
 2929      4E
 2930 16b6 00BF     		.p2align 2 	
 2931              	TOKEN:
 2932 16b8 42F804ED 		_NEST
 2933 16bc FFF7ACF8 		BL	BLANK
 2934 16c0 FFF7E8FF 		BL	WORDD
 2935 16c4 52F804FB 		_UNNEST
 2936              	
 2937              	// **************************************************************************
 2938              	//  Dictionary search
 2939              	
 2940              	//    NAME>	( na -- ca )
 2941              	// 	Return a code address given a name address.
 2942              	
 2943 16c8 F00B0018 		.word	_TOKEN+MAPOFFSET
 2944 16cc 05       	_NAMET:	.byte  5
 2945 16cd 4E414D45 		.ascii "NAME>"
 2945      3E
 2946 16d2 00BF     		.p2align 2 	
 2947              	NAMET:
 2948 16d4 42F804ED 		_NEST
 2949 16d8 FFF78CF9 		BL	COUNT
 2950 16dc FEF74DFF 		_DOLIT
 2951 16e0 1F000000 		.word	0x1F
 2952 16e4 FEF7FAFF 		BL	ANDD
 2953 16e8 FFF738F8 		BL	PLUS
 2954 16ec FFF73AFB 		BL	ALGND
 2955 16f0 52F804FB 		_UNNEST
 2956              	
 2957              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2958              	// 	Compare u bytes in two strings. Return 0 if identical.
 2959              	//
 2960              	//  Picatout 2020-12-01, 
 2961              	//      Because of problem with .align directive that
 2962              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2963              	// 		words  to do a byte by byte comparison. 
 2964              	//
 2965 16f4 0C0C0018 		.word	_NAMET+MAPOFFSET
 2966 16f8 05       	_SAMEQ:	.byte  5
 2967 16f9 53414D45 		.ascii "SAME?"
 2967      3F
 2968 16fe 00BF     		.p2align 2	
 2969              	SAMEQ:
ARM GAS  stm32eforth.s 			page 57


 2970 1700 42F804ED 		_NEST
 2971 1704 FEF7AAFF 		BL	TOR
 2972 1708 00F01EB8 		B.W	SAME2
 2973              	SAME1:
 2974 170c FEF7D4FF 		BL	OVER  // ( a1 a2 -- a1 a2 a1 )
 2975 1710 FEF79CFF 		BL	RAT   // a1 a2 a1 u 
 2976 1714 FFF722F8 		BL	PLUS  // a1 a2 a1+u 
 2977 1718 FEF788FF 		BL	CAT	   // a1 a2 c1    		
 2978 171c FEF7CCFF 		BL	OVER  // a1 a2 c1 a2 
 2979 1720 FEF794FF 		BL	RAT    
 2980 1724 FFF71AF8 		BL	PLUS    
 2981 1728 FEF780FF 		BL	CAT	  // a1 a2 c1 c2
 2982 172c FFF71EF8 		BL	SUBB  
 2983 1730 FFF79CF8 		BL	QDUP
 2984 1734 FEF744FF 		BL	QBRAN
 2985 1738 880C0018 		.word	SAME2+MAPOFFSET
 2986 173c FEF77CFF 		BL	RFROM
 2987 1740 FEF7A0FF 		BL	DROP
 2988 1744 52F804FB 		_UNNEST	// strings not equal
 2989              	SAME2:
 2990 1748 FEF72BFF 		BL	DONXT
 2991 174c 4C0C0018 		.word	SAME1+MAPOFFSET
 2992 1750 FEF713FF 		_DOLIT
 2993 1754 00000000 		.word	0
 2994 1758 52F804FB 		_UNNEST	// strings equal
 2995              	
 2996              	//    find	( a na -- ca na | a F )
 2997              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2998              	
 2999              	//  Picatout 2020-12-01,  
 3000              	//		Modified from original. See comment for word "SAME?" 
 3001              	
 3002              	// 	.word	_SAMEQ+MAPOFFSET
 3003              	// _FIND	.byte  4
 3004              	// 	.ascii "find"
 3005              	// 	.p2align 2 	
 3006              	FIND:
 3007 175c 42F804ED 		_NEST
 3008 1760 FEF7A0FF 		BL	SWAP			// na a	
 3009 1764 FFF746F9 		BL	COUNT			// na a+1 count
 3010 1768 FEF794FF 		BL	DUPP 
 3011 176c FFF79FF9 		BL	TEMP
 3012 1770 FEF742FF 		BL	STORE			// na a+1 count 
 3013 1774 FEF772FF 		BL  TOR		// na a+1  R: count  
 3014 1778 FEF794FF 		BL	SWAP			// a+1 na
 3015              	FIND1:
 3016 177c FEF78AFF 		BL	DUPP			// a+1 na na
 3017 1780 FEF71EFF 		BL	QBRAN
 3018 1784 0C0D0018 		.word	FIND6+MAPOFFSET	// end of vocabulary
 3019 1788 FEF784FF 		BL	DUPP			// a+1 na na
 3020 178c FEF74EFF 		BL	CAT			// a+1 na name1
 3021 1790 FEF7F3FE 		_DOLIT
 3022 1794 1FFFFFFF 		.word	MASKK
 3023 1798 FEF7A0FF 		BL	ANDD
 3024 179c FEF756FF 		BL	RAT			// a+1 na name1 count 
 3025 17a0 FEF7B0FF 		BL	XORR			// a+1 na,  same length?
 3026 17a4 FEF70CFF 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 58


 3027 17a8 F80C0018 		.word	FIND2+MAPOFFSET
 3028 17ac FFF72CF8 		BL	CELLM			// a+1 la
 3029 17b0 FEF72CFF 		BL	AT			// a+1 next_na
 3030 17b4 FFF7E2BF 		B.w	FIND1			// try next word
 3031              	FIND2:   
 3032 17b8 FEF7FEFF 		BL	ONEP			// a+1 na+1
 3033 17bc FFF777F9 		BL	TEMP
 3034 17c0 FEF724FF 		BL	AT			// a+1 na+1 count
 3035 17c4 FFF79CFF 		BL	SAMEQ		// a+1 na+1 ? 
 3036              	FIND3:	
 3037 17c8 00F00CB8 		B.w	FIND4
 3038              	FIND6:	
 3039 17cc FEF734FF 		BL	RFROM			// a+1 0 name1 -- , no match
 3040 17d0 FEF758FF 		BL	DROP			// a+1 0
 3041 17d4 FEF766FF 		BL	SWAP			// 0 a+1
 3042 17d8 FEF7F6FF 		BL	ONEM			// 0 a
 3043 17dc FEF762FF 		BL	SWAP			// a 0 
 3044 17e0 52F804FB 		_UNNEST			// return without a match
 3045              	FIND4:	
 3046 17e4 FEF7ECFE 		BL	QBRAN			// a+1 na+1
 3047 17e8 3C0D0018 		.word	FIND5+MAPOFFSET	// found a match
 3048 17ec FEF7ECFF 		BL	ONEM			// a+1 na
 3049 17f0 FFF70AF8 		BL	CELLM			// a+4 la
 3050 17f4 FEF70AFF 		BL	AT			// a+1 next_na
 3051 17f8 FFF7C0BF 		B.w	FIND1			// compare next name
 3052              	FIND5:	
 3053 17fc FEF71CFF 		BL	RFROM			// a+1 na+1 count
 3054 1800 FEF740FF 		BL	DROP			// a+1 na+1
 3055 1804 FEF74EFF 		BL	SWAP			// na+1 a+1
 3056 1808 FEF73CFF 		BL	DROP			// na+1
 3057 180c FEF7DCFF 		BL	ONEM			// na
 3058 1810 FEF740FF 		BL	DUPP			// na na
 3059 1814 FFF75EFF 		BL	NAMET			// na ca
 3060 1818 FEF744FF 		BL	SWAP			// ca na
 3061 181c 52F804FB 		_UNNEST			//  return with a match
 3062              	
 3063              	//    NAME?	( a -- ca na | a F )
 3064              	// 	Search all context vocabularies for a string.
 3065              	
 3066 1820 380C0018 		.word	_SAMEQ+MAPOFFSET
 3067 1824 05       	_NAMEQ:	.byte  5
 3068 1825 4E414D45 		.ascii "NAME?"
 3068      3F
 3069 182a 00BF     		.p2align 2 	
 3070              	NAMEQ:
 3071 182c 42F804ED 		_NEST
 3072 1830 FFF77CF9 		BL	CNTXT
 3073 1834 FEF7EAFE 		BL	AT
 3074 1838 FFF790FF 		BL	FIND
 3075 183c 52F804FB 		_UNNEST
 3076              	
 3077              	// **************************************************************************
 3078              	//  Terminal input
 3079              	
 3080              	//    	  ( bot eot cur -- bot eot cur )
 3081              	// 	Backup the cursor by one character.
 3082              	
ARM GAS  stm32eforth.s 			page 59


 3083              	// 	.word	_NAMEQ+MAPOFFSET
 3084              	// _BKSP	.byte  2
 3085              	// 	.ascii "^H"
 3086              	// 	.p2align 2 	
 3087              	BKSP:
 3088 1840 42F804ED 		_NEST
 3089 1844 FEF70AFF 		BL	TOR
 3090 1848 FEF736FF 		BL	OVER
 3091 184c FEF7F4FE 		BL	RFROM
 3092 1850 FEF728FF 		BL	SWAP
 3093 1854 FEF730FF 		BL	OVER
 3094 1858 FEF754FF 		BL	XORR
 3095 185c FEF7B0FE 		BL	QBRAN
 3096 1860 C80D0018 		.word	BACK1+MAPOFFSET
 3097 1864 FEF789FE 		_DOLIT
 3098 1868 08000000 		.word	BKSPP
 3099 186c FEF774FE 		BL	TECHO
 3100              	// 	BL	ATEXE
 3101 1870 FEF7AAFF 		BL	ONEM
 3102 1874 FEF7D0FF 		BL	BLANK
 3103 1878 FEF76EFE 		BL	TECHO
 3104              	// 	BL	ATEXE
 3105 187c FEF77DFE 		_DOLIT
 3106 1880 08000000 		.word	BKSPP
 3107 1884 FEF768FE 		BL	TECHO
 3108              	// 	BL	ATEXE
 3109              	BACK1:
 3110 1888 52F804FB 		  _UNNEST
 3111              	
 3112              	//    TAP	 ( bot eot cur c -- bot eot cur )
 3113              	// 	Accept and echo the key stroke and bump the cursor.
 3114              	
 3115              	// 	.word	_BKSP+MAPOFFSET
 3116              	// _TAP	.byte  3
 3117              	// 	.ascii "TAP"
 3118              	// 	.p2align 2 	
 3119              	TAP:
 3120 188c 42F804ED 		_NEST
 3121 1890 FEF700FF 		BL	DUPP
 3122 1894 FEF760FE 		BL	TECHO
 3123              	// 	BL	ATEXE
 3124 1898 FEF70EFF 		BL	OVER
 3125 189c FEF7BCFE 		BL	CSTOR
 3126 18a0 FEF78AFF 		BL	ONEP
 3127 18a4 52F804FB 		_UNNEST
 3128              	
 3129              	//    kTAP	( bot eot cur c -- bot eot cur )
 3130              	// 	Process a key stroke, CR or backspace.
 3131              	
 3132              	// 	.word	_TAP+MAPOFFSET
 3133              	// _KTAP	.byte  4
 3134              	// 	.ascii "kTAP"
 3135              	// 	.p2align 2 	
 3136              	KTAP:
 3137              	TTAP:
 3138 18a8 42F804ED 		_NEST
 3139 18ac FEF7F2FE 		BL	DUPP
ARM GAS  stm32eforth.s 			page 60


 3140 18b0 FEF763FE 		_DOLIT
 3141 18b4 0D000000 		.word	CRR
 3142 18b8 FEF724FF 		BL	XORR
 3143 18bc FEF780FE 		BL	QBRAN
 3144 18c0 300E0018 		.word	KTAP2+MAPOFFSET
 3145 18c4 FEF759FE 		_DOLIT
 3146 18c8 08000000 		.word	BKSPP
 3147 18cc FEF71AFF 		BL	XORR
 3148 18d0 FEF776FE 		BL	QBRAN
 3149 18d4 280E0018 		.word	KTAP1+MAPOFFSET
 3150 18d8 FEF79EFF 		BL	BLANK
 3151 18dc FFF7D6FF 		BL	TAP
 3152 18e0 52F804FB 		_UNNEST
 3153 18e4 00000000 		.word	0			// patch
 3154              	KTAP1:
 3155 18e8 FFF7AAFF 	  BL	BKSP
 3156 18ec 52F804FB 		_UNNEST
 3157              	KTAP2:
 3158 18f0 FEF7C8FE 	  BL	DROP
 3159 18f4 FEF7D6FE 		BL	SWAP
 3160 18f8 FEF7C4FE 		BL	DROP
 3161 18fc FEF7CAFE 		BL	DUPP
 3162 1900 52F804FB 		_UNNEST
 3163              	
 3164              	//    ACCEPT	( b u -- b u )
 3165              	// 	Accept characters to input buffer. Return with actual count.
 3166              	
 3167 1904 640D0018 		.word	_NAMEQ+MAPOFFSET
 3168 1908 06       	_ACCEP:	.byte  6
 3169 1909 41434345 		.ascii "ACCEPT"
 3169      5054
 3170 190f 00       		.p2align 2 	
 3171              	ACCEP:
 3172 1910 42F804ED 		_NEST
 3173 1914 FEF7D0FE 		BL	OVER
 3174 1918 FEF720FF 		BL	PLUS
 3175 191c FEF7CCFE 		BL	OVER
 3176              	ACCP1:
 3177 1920 FEF7C2FF 	  BL	DDUP
 3178 1924 FEF7EEFE 		BL	XORR
 3179 1928 FEF74AFE 		BL	QBRAN
 3180 192c 9C0E0018 		.word	ACCP4+MAPOFFSET
 3181 1930 FFF7B6FC 		BL	KEY
 3182 1934 FEF7AEFE 		BL	DUPP
 3183 1938 FEF76EFF 		BL	BLANK
 3184 193c FEF71DFE 		_DOLIT
 3185 1940 7F000000 		.word	127
 3186 1944 FFF754F9 		BL	WITHI
 3187 1948 FEF73AFE 		BL	QBRAN
 3188 194c 960E0018 		.word	ACCP2+MAPOFFSET
 3189 1950 FFF79CFF 		BL	TAP
 3190 1954 01E0     		B	ACCP3
 3191              	ACCP2:
 3192 1956 FFF7A7FF 	  BL	KTAP
 3193              	// 	BL	ATEXE
 3194              	ACCP3:	  
 3195 195a E1E7     		B	ACCP1
ARM GAS  stm32eforth.s 			page 61


 3196              	ACCP4:
 3197 195c FEF792FE 	  BL	DROP
 3198 1960 FEF7AAFE 		BL	OVER
 3199 1964 FEF702FF 		BL	SUBB
 3200 1968 52F804FB 		_UNNEST
 3201              	
 3202              	//    QUERY	( -- )
 3203              	// 	Accept input stream to terminal input buffer.
 3204              	
 3205 196c 480E0018 		.word	_ACCEP+MAPOFFSET
 3206 1970 05       	_QUERY:	.byte  5
 3207 1971 51554552 		.ascii "QUERY"
 3207      59
 3208 1976 00BF     		.p2align 2 	
 3209              	QUERY:
 3210 1978 42F804ED 		_NEST
 3211 197c FFF75EFA 		BL	TIB
 3212 1980 FEF7FBFD 		_DOLIT
 3213 1984 50000000 		.word	80
 3214 1988 FFF7C2FF 		BL	ACCEP
 3215 198c FFF7AEF8 		BL	NTIB
 3216 1990 FEF732FE 		BL	STORE
 3217 1994 FEF776FE 		BL	DROP
 3218 1998 FEF7EFFD 		_DOLIT
 3219 199c 00000000 		.word	0
 3220 19a0 FFF79AF8 		BL	INN
 3221 19a4 FEF728FE 		BL	STORE
 3222 19a8 52F804FB 		_UNNEST
 3223              	
 3224              	// **************************************************************************
 3225              	//  Error handling
 3226              	
 3227              	//    ABORT	( a -- )
 3228              	// 	Reset data stack and jump to QUIT.
 3229              	
 3230 19ac B00E0018 		.word	_QUERY+MAPOFFSET
 3231 19b0 05       	_ABORT:	.byte  5
 3232 19b1 41424F52 		.ascii "ABORT"
 3232      54
 3233 19b6 00BF     		.p2align 2 	
 3234              	ABORT:
 3235 19b8 42F804ED 		_NEST
 3236 19bc FFF780FC 		BL	SPACE
 3237              	ABORT1:
 3238 19c0 FFF718F8 		BL	COUNT
 3239 19c4 FFF7A4FC 		BL	TYPEE
 3240 19c8 FEF7D7FD 		_DOLIT
 3241 19cc 3F000000 		.word	0X3F
 3242 19d0 FEF7C2FD 		BL	EMIT
 3243 19d4 FFF7B4FC 		BL	CR
 3244 19d8 00F0ACF8 		BL	PRESE
 3245 19dc 00F0BAB8 		B.W	QUIT
 3246              	
 3247              	//    _abort"	( f -- )
 3248              	// 	Run time routine of ABORT" . Abort with a message.
 3249              	
 3250              	// 	.word	_ABORT+MAPOFFSET
ARM GAS  stm32eforth.s 			page 62


 3251              	// _ABORQ	.byte  COMPO+6
 3252              	// 	.ascii "abort\""
 3253              	// 	.p2align 2 	
 3254              	ABORQ:
 3255 19e0 42F804ED 		_NEST
 3256 19e4 FFF7BCFC 		BL	DOSTR 
 3257 19e8 FEF75CFE 		BL	SWAP 
 3258 19ec FEF7E8FD 		BL	QBRAN
 3259 19f0 360F0018 		.word	1f+MAPOFFSET	// text flag
 3260 19f4 E4E7     		B	ABORT1 
 3261              	1:
 3262 19f6 FEF745FE 		BL	DROP
 3263 19fa 52F804FB 		_UNNEST			// drop error
 3264              	
 3265              	// **************************************************************************
 3266              	//  The text interpreter
 3267              	
 3268              	//    $INTERPRET  ( a -- )
 3269              	// 	Interpret a word. If failed, try to convert it to an integer.
 3270              	
 3271 19fe F00E0018 		.word	_ABORT+MAPOFFSET
 3272 1a02 0A       	_INTER:	.byte  10
 3273 1a03 2424494E 		.ascii "$$INTERPRET"
 3273      54455250 
 3273      524554
 3274 1a0e 00BF     		.p2align 2 	
 3275              	INTER:
 3276 1a10 42F804ED 		_NEST
 3277 1a14 FFF70AFF 		BL	NAMEQ
 3278 1a18 FEF728FF 		BL	QDUP	// ?defined
 3279 1a1c FEF7D0FD 		BL	QBRAN
 3280 1a20 900F0018 		.word	INTE1+MAPOFFSET
 3281 1a24 FEF7F2FD 		BL	AT
 3282 1a28 FEF7A7FD 		_DOLIT
 3283 1a2c 40000000 		.word	COMPO
 3284 1a30 FEF754FE 		BL	ANDD	// ?compile only lexicon bits
 3285 1a34 FFF7D4FF 		BL	ABORQ
 3286 1a38 0D       		.byte	13
 3287 1a39 20636F6D 		.ascii " compile only"
 3287      70696C65 
 3287      206F6E6C 
 3287      79
 3288 1a46 00BF     		.p2align 2 	
 3289 1a48 FEF7A6FD 		BL	EXECU
 3290 1a4c 52F804FB 		_UNNEST			// execute defined word
 3291              	INTE1:
 3292 1a50 FFF78CFB 	  BL	NUMBQ
 3293 1a54 FEF7B4FD 		BL	QBRAN
 3294 1a58 A00F0018 		.word	INTE2+MAPOFFSET
 3295 1a5c 52F804FB 		_UNNEST
 3296              	INTE2:
 3297 1a60 FFF7AABF 	  B.W	ABORT	// error
 3298              	
 3299              	//    [	   ( -- )
 3300              	// 	Start the text interpreter.
 3301              	
 3302 1a64 420F0018 		.word	_INTER+MAPOFFSET
ARM GAS  stm32eforth.s 			page 63


 3303 1a68 81       	_LBRAC:	.byte  IMEDD+1
 3304 1a69 5B       		.ascii "["
 3305 1a6a 00BF     		.p2align 2 	
 3306              	LBRAC:
 3307 1a6c 42F804ED 		_NEST
 3308 1a70 FEF783FD 		_DOLIT
 3309 1a74 500F0018 		.word	INTER+MAPOFFSET
 3310 1a78 FFF742F8 		BL	TEVAL
 3311 1a7c FEF7BCFD 		BL	STORE
 3312 1a80 52F804FB 		_UNNEST
 3313              	
 3314              	//    .OK	 ( -- )
 3315              	// 	Display "ok" only while interpreting.
 3316              	
 3317 1a84 A80F0018 		.word	_LBRAC+MAPOFFSET
 3318 1a88 03       	_DOTOK:	.byte  3
 3319 1a89 2E4F4B   		.ascii ".OK"
 3320              		.p2align 2 	
 3321              	DOTOK:
 3322 1a8c 42F804ED 		_NEST
 3323 1a90 FEF773FD 		_DOLIT
 3324 1a94 500F0018 		.word	INTER+MAPOFFSET
 3325 1a98 FFF732F8 		BL	TEVAL
 3326 1a9c FEF7B6FD 		BL	AT
 3327 1aa0 FEF740FF 		BL	EQUAL
 3328 1aa4 FEF78CFD 		BL	QBRAN
 3329 1aa8 F40F0018 		.word	DOTO1+MAPOFFSET
 3330 1aac FFF780FC 		BL	DOTQP
 3331 1ab0 03       		.byte	3
 3332 1ab1 206F6B   		.ascii " ok"
 3333              	DOTO1:
 3334 1ab4 FFF744FC 		BL	CR
 3335 1ab8 52F804FB 		_UNNEST
 3336              	
 3337              	//    ?STACK	( -- )
 3338              	// 	Abort if the data stack underflows.
 3339              	
 3340 1abc C80F0018 		.word	_DOTOK+MAPOFFSET
 3341 1ac0 06       	_QSTAC:	.byte  6
 3342 1ac1 3F535441 		.ascii "?STACK"
 3342      434B
 3343 1ac7 00       		.p2align 2 	
 3344              	QSTAC:
 3345 1ac8 42F804ED 		_NEST
 3346 1acc FFF77CF9 		BL	DEPTH
 3347 1ad0 FEF7FAFD 		BL	ZLESS	// check only for underflow
 3348 1ad4 FFF784FF 		BL	ABORQ
 3349 1ad8 0A       		.byte	10
 3350 1ad9 20756E64 		.ascii " underflow"
 3350      6572666C 
 3350      6F77
 3351 1ae3 00       		.p2align 2 	
 3352 1ae4 52F804FB 		_UNNEST
 3353              	
 3354              	//    EVAL	( -- )
 3355              	// 	Interpret the input stream.
 3356              	
ARM GAS  stm32eforth.s 			page 64


 3357 1ae8 00100018 		.word	_QSTAC+MAPOFFSET
 3358 1aec 04       	_EVAL:	.byte  4
 3359 1aed 4556414C 		.ascii "EVAL"
 3360 1af1 0000BF   		.p2align 2 	
 3361              	EVAL:
 3362 1af4 42F804ED 		_NEST
 3363              	EVAL1:
 3364 1af8 FFF7DEFD 	    BL	TOKEN
 3365 1afc FEF7CAFD 		BL	DUPP
 3366 1b00 FEF794FD 		BL	CAT	// ?input stream empty
 3367 1b04 FEF75CFD 		BL	QBRAN
 3368 1b08 5C100018 		.word	EVAL2+MAPOFFSET
 3369 1b0c FEF7F8FF 		BL	TEVAL
 3370 1b10 FFF7A0F9 		BL	ATEXE
 3371 1b14 FFF7D8FF 		BL	QSTAC	// evaluate input, check stack
 3372 1b18 FFF7EEBF 		B.W	EVAL1
 3373              	EVAL2:
 3374 1b1c FEF7B2FD 		BL	DROP
 3375 1b20 FFF7B4FF 		BL	DOTOK
 3376 1b24 52F804FB 		_UNNEST	// prompt
 3377              	
 3378              	//    PRESET	( -- )
 3379              	// 	Reset data stack pointer and the terminal input buffer.
 3380              	
 3381 1b28 2C100018 		.word	_EVAL+MAPOFFSET
 3382 1b2c 06       	_PRESE:	.byte  6
 3383 1b2d 50524553 		.ascii "PRESET"
 3383      4554
 3384 1b33 00       		.p2align 2 	
 3385              	PRESE:
 3386 1b34 42F804ED 		_NEST
 3387 1b38 4FF49D41 		_MOV32 R1,SPP // init SP 
 3387      C2F20001 
 3388 1b40 85EA0505 		EOR	R5,R5,R5//  init TOS=0
 3389 1b44 52F804FB 		_UNNEST 
 3390              	
 3391              	//    QUIT	( -- )
 3392              	// 	Reset return stack pointer and start text interpreter.
 3393              	
 3394 1b48 6C100018 		.word	_PRESE+MAPOFFSET
 3395 1b4c 04       	_QUIT:	.byte  4
 3396 1b4d 51554954 		.ascii "QUIT"
 3397 1b51 0000BF   		.p2align 2 	
 3398              	QUIT:
 3399 1b54 42F804ED 		_NEST
 3400 1b58 4FF49F42 		_MOV32 R2,RPP
 3400      C2F20002 
 3401              	QUIT1:
 3402 1b60 FFF784FF 		BL	LBRAC			// start interpretation
 3403              	QUIT2:
 3404 1b64 FFF708FF 		BL	QUERY			// get input
 3405 1b68 FFF7C4FF 		BL	EVAL
 3406 1b6c FEF734FD 		BL	BRAN
 3407 1b70 A4100018 		.word	QUIT2+MAPOFFSET	// continue till error
 3408              	
 3409              	/***************************
 3410              	//  Flash memory interface
ARM GAS  stm32eforth.s 			page 65


 3411              	***************************/
 3412              	// UNLOCK ( T|F -- )
 3413              	// lock or unlock FLASH write 
 3414              	
 3415 1b74 8C100018 		.word _QUIT+MAPOFFSET  
 3416 1b78 06       	_UNLOCK: .byte 6
 3417 1b79 554E4C4F 		.ascii "UNLOCK"
 3417      434B
 3418 1b7f 00       		.p2align 2  
 3419              	UNLOCK:	//  unlock flash memory	
 3420 1b80 42F804ED 		_NEST 
 3421 1b84 FEF71CFD 		BL QBRAN
 3422 1b88 EA100018 		.word LOCK+MAPOFFSET
 3423 1b8c DFF80404 		ldr	r0, flash_regs 
 3424 1b90 4FF03404 		mov r4,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 3425 1b94 C460     		str r4,[r0,#FLASH_SR]
 3426 1b96 0469     		ldr r4,[r0,#FLASH_CR]
 3427 1b98 14F0800F 		tst r4,#(1<<7)
 3428 1b9c 03D0     		beq 1f 
 3429 1b9e FE4C     		ldr	r4, flash_regs+4 // key1
 3430 1ba0 4460     		str	r4, [r0, #FLASH_KEYR]
 3431 1ba2 FE4C     		ldr	r4, flash_regs+8 // key2 
 3432 1ba4 4460     		str	r4, [r0, #FLASH_KEYR]
 3433              		/* unlock option registers */
 3434              	/*
 3435              		ldr	r4, flash_regs+4 
 3436              		str	r4, [r0, #FLASH_OPTKEYR]
 3437              		ldr	r4, flash_regs+8
 3438              		str	r4, [r0, #FLASH_OPTKEYR]
 3439              	*/ 
 3440              	1:
 3441 1ba6 52F804FB 		_UNNEST
 3442              	 // lock flash memory
 3443              	LOCK: 
 3444 1baa FA48     		ldr r0,flash_regs  
 3445              	//	ldr r4,[r0,#FLASH_CR]
 3446 1bac 4FF08004 		mov r4,#(1<<7)
 3447 1bb0 0461     		str r4,[r0,#FLASH_CR]
 3448 1bb2 52F804FB 		_UNNEST  
 3449              	
 3450              	WAIT_BSY:
 3451 1bb6 F748     		ldr	r0,flash_regs
 3452              	WAIT1:
 3453 1bb8 C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 3454 1bba 14F00104 		ands	r4, #0x1	//  BSY
 3455 1bbe FBD1     		bne	WAIT1
 3456 1bc0 7047     		_NEXT
 3457              	
 3458              	//    ERASE_PAGE	   ( adr -- )
 3459              	// 	  Erase one page of flash memory.
 3460              	//    stm32f103 page size is 1024 bytes 
 3461              	//    adr is any address inside page to erase 
 3462              	
 3463 1bc2 B8100018 		.word	_UNLOCK+MAPOFFSET
 3464 1bc6 0A       	_EPAGE:	.byte  10
 3465 1bc7 45524153 		.ascii "ERASE_PAGE"
 3465      455F5041 
ARM GAS  stm32eforth.s 			page 66


 3465      4745
 3466 1bd1 0000BF   		.p2align 2 	
 3467              	
 3468              	EPAGE: 	//  page --
 3469 1bd4 42F804ED 		_NEST
 3470 1bd8 FFF7EDFF 		bl	WAIT_BSY
 3471 1bdc FEF7CDFC 		_DOLIT 
 3472 1be0 01000000 		.word 1 
 3473 1be4 FFF7CCFF 		bl  UNLOCK 
 3474 1be8 EA48     		ldr r0,flash_regs 	 
 3475 1bea 4FF00204 		mov r4,#2 // set PER bit 
 3476 1bee 0461     		str r4,[r0,#FLASH_CR]
 3477 1bf0 4561     		str r5,[r0,#FLASH_AR] // page to erase address 
 3478 1bf2 0469     		ldr	r4,[r0, #FLASH_CR]	
 3479 1bf4 44F04004 		orr	R4,#0x40	//  set STRT bit   
 3480 1bf8 0461     		str	r4,[r0, #FLASH_CR]	//  start erasing
 3481 1bfa FFF7DCFF 	 	bl	WAIT_BSY // wait until done
 3482 1bfe FEF7BCFC 		_DOLIT 
 3483 1c02 00000000 		.word 0 
 3484 1c06 FFF7BBFF 		bl	UNLOCK  // lock flash write 
 3485 1c0a C568     		ldr r5,[r0,#FLASH_SR] // check for errors 
 3486 1c0c 05F01405 		and r5,r5,#(5<<2)
 3487 1c10 FFF7E6FE 		bl ABORQ 
 3488 1c14 0D       		.byte 13
 3489 1c15 20657261 		.ascii " erase error!"
 3489      73652065 
 3489      72726F72 
 3489      21
 3490 1c22 00BF     		.p2align 2
 3491 1c24 52F804FB 		_UNNEST
 3492              	
 3493              	// store 16 bit word
 3494              	// expect flash unlocked  
 3495              	HWORD_WRITE: // ( hword address -- )
 3496 1c28 42F804ED 		_NEST
 3497 1c2c 0469     		ldr	r4, [r0, #FLASH_CR]	//  FLASH_CR
 3498              	//	bic r4,#(1<<9)|(1<<5)|(1<<4)|(1<<2)|(1<<1) //  clear OPTWRE|OPTER|OPTPG|MER|PER
 3499 1c2e 4FF00104 		mov r4,#1 // set PG 
 3500 1c32 0461     		str r4,[r0,#FLASH_CR]
 3501 1c34 2E46     		mov r6,r5 
 3502 1c36 51F8045B 		_POP 
 3503 1c3a 3580     		strh r5,[r6] 
 3504 1c3c FFF7BBFF 		bl WAIT_BSY 
 3505 1c40 C568     		ldr r5,[r0,#FLASH_SR]
 3506 1c42 05F01405 		and r5,r5,#(5<<2) 
 3507 1c46 FEF7BBFC 		bl QBRAN
 3508 1c4a A0110018 		.word 1f+MAPOFFSET 
 3509 1c4e FFF7C7FE 		bl ABORQ
 3510 1c52 0D       		.byte 13
 3511 1c53 20777269 		.ascii " write error!"
 3511      74652065 
 3511      72726F72 
 3511      21
 3512              		.p2align 2
 3513              	1:	 
 3514 1c60 52F804FB 		_UNNEST 
 3515              	
ARM GAS  stm32eforth.s 			page 67


 3516              	
 3517              	//    I!	   ( data address -- )
 3518              	// 	   Write one word into flash memory
 3519              	//	   address must even 
 3520              	
 3521 1c64 06110018 		.word	_EPAGE+MAPOFFSET
 3522 1c68 02       	_ISTOR:	.byte  2
 3523 1c69 4921     		.ascii "I!"
 3524 1c6b 00       		.p2align 2 	
 3525              	ISTOR:	//  data address --
 3526 1c6c 42F804ED 		_NEST
 3527 1c70 FFF7A1FF 		bl	WAIT_BSY
 3528 1c74 FEF781FC 		_DOLIT 
 3529 1c78 01000000 		.word 1 
 3530 1c7c FFF780FF 		bl  UNLOCK 
 3531 1c80 FEF712FE 		BL DDUP 
 3532 1c84 FEF7EAFC 		BL TOR 
 3533 1c88 FEF7E8FC 		BL TOR 
 3534 1c8c FFF7CCFF 		BL HWORD_WRITE
 3535 1c90 FEF7D2FC 		BL RFROM 
 3536 1c94 4FEA3545 		ror r5,r5,#16
 3537 1c98 FEF7CEFC 		BL RFROM 
 3538 1c9c 05F10205 		add r5,r5,#2 
 3539 1ca0 FFF7C2FF 		BL HWORD_WRITE 
 3540 1ca4 FEF769FC 		_DOLIT 
 3541 1ca8 00000000 		.word 0
 3542 1cac FFF768FF 		bl UNLOCK 
 3543 1cb0 52F804FB 		_UNNEST
 3544              	
 3545              	// IMG_SIZE ( -- u )
 3546              	// return flash pages required to save 
 3547              	// user ram  
 3548 1cb4 A8110018 		.word _ISTOR+MAPOFFSET 
 3549 1cb8 08       	_IMG_SIZE: .byte 8
 3550 1cb9 494D475F 		.ascii "IMG_SIZE" 
 3550      53495A45 
 3551 1cc1 0000BF   		.p2align 2
 3552              	IMG_SIZE: 
 3553 1cc4 42F804ED 		_NEST
 3554 1cc8 FEF757FC 		_DOLIT 
 3555 1ccc 38000000 		.word VARS_END_OFS-IMG_SIGN_OFS 
 3556 1cd0 FEF766FF 		BL USER_END 
 3557 1cd4 FEF756FF 		BL USER_BEGIN 
 3558 1cd8 FEF748FD 		BL SUBB 
 3559 1cdc FEF73EFD 		BL PLUS 
 3560 1ce0 FEF74BFC 		_DOLIT 
 3561 1ce4 00040000 		.word 1024 
 3562 1ce8 FEF7F0FF 		BL SLMOD 
 3563 1cec FEF7DAFC 		BL SWAP 
 3564 1cf0 FEF766FC 		BL QBRAN 
 3565 1cf4 3C120018 		.word 1f+MAPOFFSET 
 3566 1cf8 FEF75EFD 		BL ONEP
 3567              	1:
 3568 1cfc 52F804FB 		_UNNEST  
 3569              	
 3570              	// IMG? (  -- T|F )
 3571              	// check if an image has been saved in FLASH 
ARM GAS  stm32eforth.s 			page 68


 3572 1d00 F8110018 		.word _IMG_SIZE+MAPOFFSET 
 3573 1d04 04       	_IMGQ: .byte 4
 3574 1d05 494D473F 		.ascii "IMG?"
 3575 1d09 0000BF   		.p2align 2
 3576              	IMGQ:
 3577 1d0c 42F804ED 		_NEST 
 3578 1d10 FEF754FF 		BL IMG_ADR 
 3579 1d14 FEF77AFC 		BL AT 
 3580 1d18 FEF75EFF 		BL IMG_SIGN  
 3581 1d1c FEF776FC 		BL AT 
 3582 1d20 FEF7F0FC 		BL XORR  
 3583 1d24 FEF7F4FD 		BL ZEQUAL
 3584 1d28 52F804FB 		_UNNEST
 3585              	
 3586              	// LOAD_IMG (  -- )
 3587              	// Load image from FLASH to RAM. 
 3588 1d2c 44120018 		.word _IMGQ+MAPOFFSET
 3589 1d30 08       	_LOAD_IMG: .byte 8 
 3590 1d31 4C4F4144 		.ascii "LOAD_IMG" 
 3590      5F494D47 
 3591 1d39 0000BF   		.p2align 2 
 3592              	LOAD_IMG:
 3593 1d3c 42F804ED 		_NEST 
 3594 1d40 FFF7E4FF 		BL IMGQ 
 3595 1d44 FEF73CFC 		BL QBRAN 
 3596 1d48 D0120018 		.word 1f+MAPOFFSET
 3597              	/* copy system variables to RAM */
 3598 1d4c FEF736FF 		BL IMG_ADR 
 3599 1d50 FEF7A0FC 		BL DUPP 
 3600 1d54 FEF782FC 		BL TOR   // save source address 
 3601 1d58 FEF73EFF 		BL IMG_SIGN 
 3602 1d5c 41F8045D 		_PUSH 
 3603 1d60 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 3604 1d64 FEF796FC 		BL DUPP 
 3605 1d68 FEF778FC 		BL TOR 
 3606 1d6c FFF796F8 		BL MOVE // ( src dest count -- ) R: src count 
 3607              	/* copy user definitions */
 3608 1d70 FEF762FC 		BL RFROM 
 3609 1d74 FEF760FC 		BL RFROM  
 3610 1d78 FEF7F0FC 		BL PLUS // source address  
 3611 1d7c FEF702FF 		BL USER_BEGIN // destination address
 3612 1d80 FFF744F8 		BL HERE  
 3613 1d84 FEF798FC 		BL OVER 
 3614 1d88 FEF7F0FC 		BL SUBB  // byte count 
 3615 1d8c FFF786F8 		BL MOVE
 3616 1d90 52F804FB 	1:	_UNNEST  
 3617              	
 3618              	// ERASE_MPG ( u1 u2 -- )
 3619              	// erase many pages 
 3620              	// u1 first page number 
 3621              	// u2 how many pages  
 3622 1d94 70120018 		.word _LOAD_IMG+MAPOFFSET
 3623 1d98 09       	_ERASE_MPG: .byte 9 
 3624 1d99 45524153 		.ascii "ERASE_MPG"	
 3624      455F4D50 
 3624      47
 3625 1da2 00BF     		.p2align 2 
ARM GAS  stm32eforth.s 			page 69


 3626              	ERASE_MPG:
 3627 1da4 42F804ED 		_NEST 
 3628 1da8 FEF758FC 		BL TOR 
 3629 1dac 00F052F8 		BL PG_TO_ADR 
 3630 1db0 FEF712FC 		BL BRAN 
 3631 1db4 0C130018 		.word 2f+MAPOFFSET 
 3632              	1:
 3633 1db8 FEF76CFC 		BL DUPP 
 3634 1dbc FEF74EFC 		BL TOR 
 3635 1dc0 FFF708FF 		BL EPAGE 
 3636 1dc4 FEF738FC 		BL RFROM
 3637 1dc8 05F58065 		add r5,#PAGE_SIZE 
 3638              	2:
 3639 1dcc FEF7E9FB 		BL DONXT
 3640 1dd0 F8120018 		.word 1b+MAPOFFSET 
 3641 1dd4 51F8045B 		_POP 
 3642 1dd8 52F804FB 		_UNNEST 
 3643              	
 3644              	// FLSH_WR ( src dest u -- dest+u )
 3645              	// write u words to flash memory 
 3646 1ddc D8120018 		.word _ERASE_MPG+MAPOFFSET
 3647 1de0 07       	_FLSH_WR: .byte 7 
 3648 1de1 464C5348 		.ascii "FLSH_WR"
 3648      5F5752
 3649              		.p2align  
 3650              	FLSH_WR: 
 3651 1de8 42F804ED 		_NEST 
 3652 1dec FEF736FC 		BL TOR
 3653 1df0 FEF7F2FB 		BL BRAN 
 3654 1df4 58130018 		.word 3f+MAPOFFSET  
 3655              	/* write system variables to FLASH */
 3656 1df8 FEF730FC 	2:  BL TOR  // destination address 
 3657 1dfc FEF74AFC 		BL DUPP 
 3658 1e00 FEF704FC 		BL AT   // get data 
 3659 1e04 FEF722FC 		BL RAT  // get destination address 
 3660 1e08 FFF730FF 		BL ISTOR
 3661 1e0c FEF7F4FC 		BL CELLP  // increment source address 
 3662 1e10 FEF712FC 		BL RFROM 
 3663 1e14 FEF7F0FC 		BL CELLP  // increment dest address 
 3664 1e18 FEF7C3FB 	3:	BL DONXT 
 3665 1e1c 38130018 		.word 2b+MAPOFFSET
 3666 1e20 FEF71CFC 		BL TOR 
 3667 1e24 FEF72EFC 		BL DROP 
 3668 1e28 FEF706FC 		BL RFROM 
 3669 1e2c 52F804FB 		_UNNEST 
 3670              	
 3671              	// ADR>PG ( a -- n )
 3672              	// convert address to page number, {0..127} 
 3673 1e30 20130018 		.word _FLSH_WR+MAPOFFSET
 3674 1e34 06       	_ADR_TO_PG: .byte 6 
 3675 1e35 4144523E 		.ascii "ADR>PG" 
 3675      5047
 3676 1e3b 00       		.p2align 2 
 3677              	ADR_TO_PG: 
 3678 1e3c 4FEA9525 		lsr r5,#10 
 3679 1e40 05F07F05 		and r5,#127 
 3680 1e44 7047     		_NEXT  
ARM GAS  stm32eforth.s 			page 70


 3681              	
 3682              	// PG>ADR ( n -- a )
 3683              	// convert page# to address 
 3684 1e46 74130018 		.word _ADR_TO_PG+MAPOFFSET
 3685 1e4a 06       	_PG_TO_ADR: .byte 6 
 3686 1e4b 50473E41 		.ascii "PG>ADR" 
 3686      4452
 3687 1e51 0000BF   		.p2align 2 
 3688              	PG_TO_ADR:
 3689 1e54 C0F20205 		movt r5,#2
 3690 1e58 4FEA8525 		lsl r5,#10 
 3691 1e5c 7047     		_NEXT 
 3692              	
 3693              	// ERASE_IMG (  -- )
 3694              	// erase image in from FLASH  
 3695 1e5e 8A130018 		.word _PG_TO_ADR+MAPOFFSET 
 3696 1e62 09       	_ERASE_IMG: .byte 9
 3697 1e63 45524153 		.ascii "ERASE_IMG"
 3697      455F494D 
 3697      47
 3698              		.p2align 2
 3699              	ERASE_IMG:
 3700 1e6c 42F804ED 		_NEST
 3701 1e70 FEF7A4FE 		BL IMG_ADR 
 3702 1e74 FFF726FF 		BL IMG_SIZE 
 3703 1e78 FEF7F0FB 		BL TOR 
 3704 1e7c FEF7ACFB 		BL BRAN 
 3705 1e80 D0130018 		.word  2f+MAPOFFSET 
 3706 1e84 FEF706FC 	1:	BL DUPP 
 3707 1e88 FFF7A4FE 		BL EPAGE
 3708 1e8c 05F58065 		ADD R5,#PAGE_SIZE 
 3709 1e90 FEF787FB 	2:	BL DONXT 
 3710 1e94 C4130018 		.word 1b+MAPOFFSET 
 3711 1e98 FEF7F4FB 		BL DROP 
 3712 1e9c 52F804FB 		_UNNEST 
 3713              	
 3714              	// SAVE_IMG ( -- )
 3715              	// save in FLASH memory system variables and user defintitions.
 3716 1ea0 A2130018 		.word _ERASE_IMG+MAPOFFSET	
 3717 1ea4 08       	_SAVE_IMG: .byte 8 
 3718 1ea5 53415645 		.ascii "SAVE_IMG"
 3718      5F494D47 
 3719 1ead 0000BF   		.p2align 2
 3720              	SAVE_IMG:
 3721 1eb0 42F804ED 		_NEST 
 3722 1eb4 FEF7AAFF 		BL HERE 
 3723 1eb8 FEF764FE 		BL USER_BEGIN
 3724 1ebc FEF732FD 		BL EQUAL 
 3725 1ec0 FEF77EFB 		BL QBRAN
 3726 1ec4 0C140018 		.word 1f+MAPOFFSET 
 3727 1ec8 52F804FB 		_UNNEST  // nothing to save 
 3728 1ecc FFF71EFF 	1:	BL IMGQ 
 3729 1ed0 FEF776FB 		BL QBRAN 
 3730 1ed4 1C140018 		.word 2f+MAPOFFSET
 3731              	/* delete saved image */
 3732 1ed8 FFF7C8FF 		BL ERASE_IMG 
 3733              	/* save system variables */
ARM GAS  stm32eforth.s 			page 71


 3734              	2:	
 3735 1edc FEF77CFE 		BL IMG_SIGN // src address 
 3736 1ee0 FEF76CFE 		BL IMG_ADR  //  ( src dest --  
 3737 1ee4 41F8045D 		_PUSH 
 3738 1ee8 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 3739 1eec FEF7A6FC 		BL CELLSL  // word count 
 3740 1ef0 FFF77AFF 		BL FLSH_WR  // ( src dest count -- dest+u )
 3741              	/* write user definitions */
 3742 1ef4 FEF746FE 		BL USER_BEGIN
 3743 1ef8 FEF7D4FB 		BL SWAP  // ( src dest+ -- )
 3744 1efc FEF786FF 		BL HERE   
 3745 1f00 FEF740FE 		BL USER_BEGIN 
 3746 1f04 FEF732FC 		BL SUBB 
 3747 1f08 FEF798FC 		BL CELLSL  // src dest+ count -- 
 3748 1f0c FFF76CFF 		BL FLSH_WR  
 3749 1f10 52F804FB 		_UNNEST 
 3750              	
 3751              	// TURNKEY ( -- "WORD") 
 3752              	// set autorun program in 'BOOT variable 
 3753              	// and save image in slot 0.
 3754 1f14 E4130018 		.word _SAVE_IMG+MAPOFFSET
 3755 1f18 07       	_TURNKEY: .byte 7
 3756 1f19 5455524E 		.ascii "TURNKEY"
 3756      4B4559
 3757              		.p2align 2 
 3758              	TURNKEY:
 3759 1f20 42F804ED 		_NEST 
 3760 1f24 00F040F8 		BL TICK 
 3761 1f28 FEF7B2FD 		BL TBOOT 
 3762 1f2c FEF764FB 		BL STORE 
 3763 1f30 FFF7BEFF 		BL SAVE_IMG 
 3764 1f34 52F804FB 		_UNNEST
 3765              	
 3766 1f38 58140018 		.word _TURNKEY+MAPOFFSET
 3767 1f3c 06       	_FORGET: .byte 6 
 3768 1f3d 464F5247 		.ascii "FORGET"
 3768      4554
 3769 1f43 00       		.p2align 2
 3770              	FORGET:
 3771 1f44 42F804ED 		_NEST 
 3772 1f48 FFF7B6FB 		BL TOKEN 
 3773 1f4c FEF7A2FB 		BL DUPP 
 3774 1f50 FEF736FB 		BL QBRAN 
 3775 1f54 FEF711FB 		_DOLIT 
 3776 1f58 D0140018 		.word 9f+MAPOFFSET 
 3777 1f5c FFF766FC 		BL NAMEQ // ( a -- ca na | a 0 )
 3778 1f60 FEF784FC 		BL QDUP 
 3779 1f64 FEF72CFB 		BL QBRAN 
 3780 1f68 CC140018 		.word 8f+MAPOFFSET
 3781 1f6c FEF74CFC 		BL CELLM // ( ca la )
 3782 1f70 FEF790FB 		BL DUPP 
 3783 1f74 FEF7E4FD 		BL CPP   
 3784 1f78 FEF73EFB 		BL STORE
 3785 1f7c FEF746FB 		BL AT 
 3786 1f80 FEF7F2FD 		BL LAST 
 3787 1f84 FEF738FB 		BL STORE
 3788 1f88 00F024FA 		BL OVERT 
ARM GAS  stm32eforth.s 			page 72


 3789 1f8c FEF77AFB 	8:  BL DROP 
 3790 1f90 52F804FB 	9:	_UNNEST 
 3791              	
 3792              	
 3793              	flash_regs:
 3794 1f94 00200240 		.word FLASH_BASE_ADR // 0 
 3795 1f98 23016745 		.word FLASH_KEY1   // 4 
 3796 1f9c AB89EFCD 		.word FLASH_KEY2   // 8
 3797              	
 3798              	// **************************************************************************
 3799              	//  The compiler
 3800              	
 3801              	//    '	   ( -- ca )
 3802              	// 	Search context vocabularies for the next word in input stream.
 3803              	
 3804 1fa0 7C140018 		.word	_FORGET+MAPOFFSET
 3805 1fa4 01       	_TICK:	.byte  1
 3806 1fa5 27       		.ascii "'"
 3807 1fa6 00BF     		.p2align 2 	
 3808              	TICK:
 3809 1fa8 42F804ED 		_NEST
 3810 1fac FFF784FB 		BL	TOKEN
 3811 1fb0 FFF73CFC 		BL	NAMEQ	// ?defined
 3812 1fb4 FEF704FB 		BL	QBRAN
 3813 1fb8 00150018 		.word	TICK1+MAPOFFSET
 3814 1fbc 52F804FB 		_UNNEST	// yes, push code address
 3815 1fc0 FFF7FABC 	TICK1:	B.W	ABORT	// no, error
 3816              	
 3817              	//    ALLOT	( n -- )
 3818              	// 	Allocate n bytes to the ram area.
 3819              	
 3820 1fc4 E4140018 		.word	_TICK+MAPOFFSET
 3821 1fc8 05       	_ALLOT:	.byte  5
 3822 1fc9 414C4C4F 		.ascii "ALLOT"
 3822      54
 3823 1fce 00BF     		.p2align 2 	
 3824              	ALLOT:
 3825 1fd0 42F804ED 		_NEST
 3826 1fd4 FEF7B4FD 		BL	CPP
 3827 1fd8 FEF7E8FC 		BL	PSTOR
 3828 1fdc 52F804FB 		_UNNEST			// adjust code pointer
 3829              	
 3830              	//    ,	   ( w -- )
 3831              	// 	Compile an integer into the code dictionary.
 3832              	
 3833 1fe0 08150018 		.word	_ALLOT+MAPOFFSET
 3834 1fe4 012C     	_COMMA:	.byte  1,','
 3835 1fe6 00BF     		.p2align 2 	
 3836              	COMMA:
 3837 1fe8 42F804ED 		_NEST
 3838 1fec FEF70EFF 		BL	HERE
 3839 1ff0 FEF750FB 		BL	DUPP
 3840 1ff4 FEF700FC 		BL	CELLP	// cell boundary
 3841 1ff8 FEF7A2FD 		BL	CPP
 3842 1ffc FEF7FCFA 		BL	STORE
 3843 2000 FEF7FAFA 		BL	STORE
 3844 2004 52F804FB 		_UNNEST	// adjust code pointer, compile
ARM GAS  stm32eforth.s 			page 73


 3845              		.p2align 2 
 3846              	//    [COMPILE]   ( -- //  string> )
 3847              	// 	Compile the next immediate word into code dictionary.
 3848              	
 3849 2008 24150018 		.word	_COMMA+MAPOFFSET
 3850 200c 89       	_BCOMP:	.byte  IMEDD+9
 3851 200d 5B434F4D 		.ascii "[COMPILE]"
 3851      50494C45 
 3851      5D
 3852 2016 00BF     		.p2align 2 	
 3853              	BCOMP:
 3854 2018 42F804ED 		_NEST
 3855 201c FFF7C4FF 		BL	TICK
 3856 2020 FFF7E2FF 		BL	COMMA
 3857 2024 52F804FB 		_UNNEST
 3858              	
 3859              	//    COMPILE	( -- )
 3860              	// 	Compile the next address in colon list to code dictionary.
 3861              	
 3862 2028 4C150018 		.word	_BCOMP+MAPOFFSET
 3863 202c 47       	_COMPI:	.byte  COMPO+7
 3864 202d 434F4D50 		.ascii "COMPILE"
 3864      494C45
 3865              		.p2align 2 	
 3866              	COMPI:
 3867 2034 42F804ED 		_NEST
 3868 2038 FEF7FEFA 		BL	RFROM
 3869 203c 25F00105 		BIC	R5,R5,#1
 3870 2040 FEF728FB 		BL	DUPP
 3871 2044 FEF7E2FA 		BL	AT
 3872 2048 00F013FA 		BL	CALLC			// compile BL instruction
 3873 204c FEF7D4FB 		BL	CELLP
 3874 2050 45F00105 		ORR	R5,R5,#1
 3875 2054 FEF702FB 		BL	TOR
 3876 2058 52F804FB 		_UNNEST			// adjust return address
 3877              	
 3878              	//    LITERAL	( w -- )
 3879              	// 	Compile tos to code dictionary as an integer literal.
 3880              	
 3881 205c 6C150018 		.word	_COMPI+MAPOFFSET
 3882 2060 87       	_LITER:	.byte  IMEDD+7
 3883 2061 4C495445 		.ascii "LITERAL"
 3883      52414C
 3884              		.p2align 2 	
 3885              	LITER:
 3886 2068 42F804ED 		_NEST
 3887 206c FFF7E2FF 		BL	COMPI
 3888 2070 BAFAFF17 		.word	DOLIT+MAPOFFSET
 3889 2074 FFF7B8FF 		BL	COMMA
 3890 2078 52F804FB 		_UNNEST
 3891              	
 3892              	//    $,"	( -- )
 3893              	// 	Compile a literal string up to next " .
 3894              	
 3895              	// 	.word	_LITER+MAPOFFSET
 3896              	// _STRCQ	.byte  3
 3897              	// 	.ascii "$$,"""
ARM GAS  stm32eforth.s 			page 74


 3898              	// 	.p2align 2 	
 3899              	STRCQ:
 3900 207c 42F804ED 		_NEST
 3901 2080 FEF77BFA 		_DOLIT
 3902 2084 FCFFFFFF 		.word	-4
 3903 2088 FEF75AFD 		BL	CPP
 3904 208c FEF78EFC 		BL	PSTOR
 3905 2090 FEF773FA 		_DOLIT
 3906 2094 22000000 		.word	'\"'
 3907 2098 FFF7FCFA 		BL	WORDD			// move word to code dictionary
 3908 209c FEF7AAFC 		BL	COUNT
 3909 20a0 FEF75CFB 		BL	PLUS
 3910 20a4 FEF75EFE 		BL	ALGND			// calculate aligned end of string
 3911 20a8 FEF74AFD 		BL	CPP
 3912 20ac FEF7A4FA 		BL	STORE
 3913 20b0 52F804FB 		_UNNEST 			// adjust the code pointer
 3914              	
 3915              	// **************************************************************************
 3916              	//  Structures
 3917              	
 3918              	//    FOR	 ( -- a )
 3919              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3920              	
 3921 20b4 A0150018 		.word	_LITER+MAPOFFSET
 3922 20b8 C3       	_FOR:	.byte  COMPO+IMEDD+3
 3923 20b9 464F52   		.ascii "FOR"
 3924              		.p2align 2 	
 3925              	FOR:
 3926 20bc 42F804ED 		_NEST
 3927 20c0 FFF7B8FF 		BL	COMPI
 3928 20c4 9CFBFF17 		.word	TOR+MAPOFFSET
 3929 20c8 FEF7A0FE 		BL	HERE
 3930 20cc 52F804FB 		_UNNEST
 3931              	
 3932              	//    BEGIN	( -- a )
 3933              	// 	Start an infinite or indefinite loop structure.
 3934              	
 3935 20d0 F8150018 		.word	_FOR+MAPOFFSET
 3936 20d4 C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 3937 20d5 42454749 		.ascii "BEGIN"
 3937      4E
 3938 20da 00BF     		.p2align 2 	
 3939              	BEGIN:
 3940 20dc 42F804ED 		_NEST
 3941 20e0 FEF794FE 		BL	HERE
 3942 20e4 52F804FB 		_UNNEST
 3943              		.p2align 2 
 3944              	//    NEXT	( a -- )
 3945              	// 	Terminate a FOR-NEXT loop structure.
 3946              	
 3947 20e8 14160018 		.word	_BEGIN+MAPOFFSET
 3948 20ec C4       	_NEXT:	.byte  COMPO+IMEDD+4
 3949 20ed 4E455854 		.ascii "NEXT"
 3950 20f1 0000BF   		.p2align 2 	
 3951              	NEXT:
 3952 20f4 42F804ED 		_NEST
 3953 20f8 FFF79CFF 		BL	COMPI
ARM GAS  stm32eforth.s 			page 75


 3954 20fc E2FAFF17 		.word	DONXT+MAPOFFSET
 3955 2100 FFF772FF 		BL	COMMA
 3956 2104 52F804FB 		_UNNEST
 3957              	
 3958              	//    UNTIL	( a -- )
 3959              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3960              	
 3961 2108 2C160018 		.word	_NEXT+MAPOFFSET
 3962 210c C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3963 210d 554E5449 		.ascii "UNTIL"
 3963      4C
 3964 2112 00BF     		.p2align 2 	
 3965              	UNTIL:
 3966 2114 42F804ED 		_NEST
 3967 2118 FFF78CFF 		BL	COMPI
 3968 211c 00FBFF17 		.word	QBRAN+MAPOFFSET
 3969 2120 FFF762FF 		BL	COMMA
 3970 2124 52F804FB 		_UNNEST
 3971              	
 3972              	//    AGAIN	( a -- )
 3973              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3974              	
 3975 2128 4C160018 		.word	_UNTIL+MAPOFFSET
 3976 212c C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3977 212d 41474149 		.ascii "AGAIN"
 3977      4E
 3978 2132 00BF     		.p2align 2 	
 3979              	AGAIN:
 3980 2134 42F804ED 		_NEST
 3981 2138 FFF77CFF 		BL	COMPI
 3982 213c 18FBFF17 		.word	BRAN+MAPOFFSET
 3983 2140 FFF752FF 		BL	COMMA
 3984 2144 52F804FB 		_UNNEST
 3985              	
 3986              	//    IF	  ( -- A )
 3987              	// 	Begin a conditional branch structure.
 3988              	
 3989 2148 6C160018 		.word	_AGAIN+MAPOFFSET
 3990 214c C2       	_IFF:	.byte  COMPO+IMEDD+2
 3991 214d 4946     		.ascii "IF"
 3992 214f 00       		.p2align 2 	
 3993              	IFF:
 3994 2150 42F804ED 		_NEST
 3995 2154 FFF76EFF 		BL	COMPI
 3996 2158 00FBFF17 		.word	QBRAN+MAPOFFSET
 3997 215c FEF756FE 		BL	HERE
 3998 2160 FEF70BFA 		_DOLIT
 3999 2164 04000000 		.word	4
 4000 2168 FEF7EAFC 		BL	CPP
 4001 216c FEF71EFC 		BL	PSTOR
 4002 2170 52F804FB 		_UNNEST
 4003              	
 4004              	//    AHEAD	( -- A )
 4005              	// 	Compile a forward branch instruction.
 4006              	
 4007 2174 8C160018 		.word	_IFF+MAPOFFSET
 4008 2178 C5       	_AHEAD:	.byte  COMPO+IMEDD+5
ARM GAS  stm32eforth.s 			page 76


 4009 2179 41484541 		.ascii "AHEAD"
 4009      44
 4010 217e 00BF     		.p2align 2 	
 4011              	AHEAD:
 4012 2180 42F804ED 		_NEST
 4013 2184 FFF756FF 		BL	COMPI
 4014 2188 18FBFF17 		.word	BRAN+MAPOFFSET
 4015 218c FEF73EFE 		BL	HERE
 4016 2190 FEF7F3F9 		_DOLIT
 4017 2194 04000000 		.word	4
 4018 2198 FEF7D2FC 		BL	CPP
 4019 219c FEF706FC 		BL	PSTOR
 4020 21a0 52F804FB 		_UNNEST
 4021              	
 4022              	//    REPEAT	( A a -- )
 4023              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 4024              	
 4025 21a4 B8160018 		.word	_AHEAD+MAPOFFSET
 4026 21a8 C6       	_REPEA:	.byte  COMPO+IMEDD+6
 4027 21a9 52455045 		.ascii "REPEAT"
 4027      4154
 4028 21af 00       		.p2align 2 	
 4029              	REPEA:
 4030 21b0 42F804ED 		_NEST
 4031 21b4 FFF7BEFF 		BL	AGAIN
 4032 21b8 FEF728FE 		BL	HERE
 4033 21bc FEF772FA 		BL	SWAP
 4034 21c0 FEF71AFA 		BL	STORE
 4035 21c4 52F804FB 		_UNNEST
 4036              	
 4037              	//    THEN	( A -- )
 4038              	// 	Terminate a conditional branch structure.
 4039              	
 4040 21c8 E8160018 		.word	_REPEA+MAPOFFSET
 4041 21cc C4       	_THENN:	.byte  COMPO+IMEDD+4
 4042 21cd 5448454E 		.ascii "THEN"
 4043 21d1 0000BF   		.p2align 2 	
 4044              	THENN:
 4045 21d4 42F804ED 		_NEST
 4046 21d8 FEF718FE 		BL	HERE
 4047 21dc FEF762FA 		BL	SWAP
 4048 21e0 FEF70AFA 		BL	STORE
 4049 21e4 52F804FB 		_UNNEST
 4050              	
 4051              	//    AFT	 ( a -- a A )
 4052              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 4053              	
 4054 21e8 0C170018 		.word	_THENN+MAPOFFSET
 4055 21ec C3       	_AFT:	.byte  COMPO+IMEDD+3
 4056 21ed 414654   		.ascii "AFT"
 4057              		.p2align 2 	
 4058              	AFT:
 4059 21f0 42F804ED 		_NEST
 4060 21f4 FEF746FA 		BL	DROP
 4061 21f8 FFF7C2FF 		BL	AHEAD
 4062 21fc FFF76EFF 		BL	BEGIN
 4063 2200 FEF750FA 		BL	SWAP
ARM GAS  stm32eforth.s 			page 77


 4064 2204 52F804FB 		_UNNEST
 4065              	
 4066              	//    ELSE	( A -- A )
 4067              	// 	Start the false clause in an IF-ELSE-THEN structure.
 4068              	
 4069 2208 2C170018 		.word	_AFT+MAPOFFSET
 4070 220c C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 4071 220d 454C5345 		.ascii "ELSE"
 4072 2211 0000BF   		.p2align 2 	
 4073              	ELSEE:
 4074 2214 42F804ED 		_NEST
 4075 2218 FFF7B2FF 		BL	AHEAD
 4076 221c FEF742FA 		BL	SWAP
 4077 2220 FFF7D8FF 		BL	THENN
 4078 2224 52F804FB 		_UNNEST
 4079              	
 4080              	//    WHILE	( a -- A a )
 4081              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 4082              	
 4083 2228 4C170018 		.word	_ELSEE+MAPOFFSET
 4084 222c C5       	_WHILE:	.byte  COMPO+IMEDD+5
 4085 222d 5748494C 		.ascii "WHILE"
 4085      45
 4086 2232 00BF     		.p2align 2 	
 4087              	WHILE:
 4088 2234 42F804ED 		_NEST
 4089 2238 FFF78AFF 		BL	IFF
 4090 223c FEF732FA 		BL	SWAP
 4091 2240 52F804FB 		_UNNEST
 4092              	
 4093              	//    ABORT"	( -- //  string> )
 4094              	// 	Conditional abort with an error message.
 4095              	
 4096 2244 6C170018 		.word	_WHILE+MAPOFFSET
 4097 2248 86       	_ABRTQ:	.byte  IMEDD+6
 4098 2249 41424F52 		.ascii "ABORT\""
 4098      5422
 4099 224f 00       		.p2align 2 	
 4100              	ABRTQ:
 4101 2250 42F804ED 		_NEST
 4102 2254 FFF7EEFE 		BL	COMPI
 4103 2258 200F0018 		.word	ABORQ+MAPOFFSET
 4104 225c FFF70EFF 		BL	STRCQ
 4105 2260 52F804FB 		_UNNEST
 4106              	
 4107              	//    $"	( -- //  string> )
 4108              	// 	Compile an inlineDCB literal.
 4109              	
 4110 2264 88170018 		.word	_ABRTQ+MAPOFFSET
 4111 2268 82       	_STRQ:	.byte  IMEDD+2
 4112 2269 2422     		.byte	'$','"'
 4113 226b 00       		.p2align 2 	
 4114              	STRQ:
 4115 226c 42F804ED 		_NEST
 4116 2270 FFF7E0FE 		BL	COMPI
 4117 2274 D4080018 		.word	STRQP+MAPOFFSET
 4118 2278 FFF700FF 		BL	STRCQ
ARM GAS  stm32eforth.s 			page 78


 4119 227c 52F804FB 		_UNNEST
 4120              	
 4121              	//    ."	( -- //  string> )
 4122              	// 	Compile an inline word  literal to be typed out at run time.
 4123              	
 4124 2280 A8170018 		.word	_STRQ+MAPOFFSET
 4125 2284 C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 4126 2285 2E22     		.ascii	".\""
 4127 2287 00       		.p2align 2 	
 4128              	DOTQ:
 4129 2288 42F804ED 		_NEST
 4130 228c FFF7D2FE 		BL	COMPI
 4131 2290 F0080018 		.word	DOTQP+MAPOFFSET
 4132 2294 FFF7F2FE 		BL	STRCQ
 4133 2298 52F804FB 		_UNNEST
 4134              	
 4135              	// **************************************************************************
 4136              	//  Name compiler
 4137              	
 4138              	//    ?UNIQUE	( a -- a )
 4139              	// 	Display a warning message if the word already exists.
 4140              	
 4141 229c C4170018 		.word	_DOTQ+MAPOFFSET
 4142 22a0 07       	_UNIQU:	.byte  7
 4143 22a1 3F554E49 		.ascii "?UNIQUE"
 4143      515545
 4144              		.p2align 2 	
 4145              	UNIQU:
 4146 22a8 42F804ED 		_NEST
 4147 22ac FEF7F2F9 		BL	DUPP
 4148 22b0 FFF7BCFA 		BL	NAMEQ			// ?name exists
 4149 22b4 FEF784F9 		BL	QBRAN
 4150 22b8 14180018 		.word	UNIQ1+MAPOFFSET	// redefinitions are OK
 4151 22bc FFF778F8 		BL	DOTQP
 4152 22c0 07       		.byte	7
 4153 22c1 20726544 		.ascii " reDef "		// but warn the user
 4153      656620
 4154              		.p2align 2 	
 4155 22c8 FEF7F6F9 		BL	OVER
 4156 22cc FEF792FB 		BL	COUNT
 4157 22d0 FFF71EF8 		BL	TYPEE			// just in case its not planned
 4158              	UNIQ1:
 4159 22d4 FEF7D6F9 		BL	DROP
 4160 22d8 52F804FB 		_UNNEST
 4161              	
 4162              	//    $,n	 ( na -- )
 4163              	// 	Build a new dictionary name using the data at na.
 4164              	
 4165              	// 	.word	_UNIQU+MAPOFFSET
 4166              	// _SNAME	.byte  3
 4167              	// 	.ascii "$,n"
 4168              	// 	.p2align 2 	
 4169              	SNAME:
 4170 22dc 42F804ED 		_NEST
 4171 22e0 FEF7D8F9 		BL	DUPP			//  na na
 4172 22e4 FEF7A2F9 		BL	CAT			//  ?null input
 4173 22e8 FEF76AF9 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 79


 4174 22ec 64180018 		.word	SNAM1+MAPOFFSET
 4175 22f0 FFF7DAFF 		BL	UNIQU			//  na
 4176 22f4 FEF738FC 		BL	LAST			//  na last
 4177 22f8 FEF788F9 		BL	AT			//  na la
 4178 22fc FFF774FE 		BL	COMMA			//  na
 4179 2300 FEF7C8F9 		BL	DUPP			//  na na
 4180 2304 FEF730FC 		BL	LAST			//  na na last
 4181 2308 FEF776F9 		BL	STORE			//  na , save na for vocabulary link
 4182 230c FEF772FB 		BL	COUNT			//  na+1 count
 4183 2310 FEF724FA 		BL	PLUS			//  na+1+count
 4184 2314 FEF726FD 		BL	ALGND			//  word boundary
 4185 2318 FEF712FC 		BL	CPP
 4186 231c FEF76CF9 		BL	STORE			//  top of dictionary now
 4187 2320 52F804FB 		_UNNEST
 4188              	SNAM1:
 4189 2324 FFF736F8 		BL	STRQP
 4190 2328 07       		.byte	7
 4191 2329 206E616D 		.ascii " name? "
 4191      653F20
 4192 2330 FFF742BB 		B.W	ABORT
 4193              	
 4194              	//    $COMPILE	( a -- )
 4195              	// 	Compile next word to code dictionary as a token or literal.
 4196              	
 4197 2334 E0170018 		.word	_UNIQU+MAPOFFSET
 4198 2338 07       	_SCOMP:	.byte  7
 4199 2339 24434F4D 		.ascii "$COMPILE"
 4199      50494C45 
 4200 2341 0000BF   		.p2align 2 	
 4201              	SCOMP:
 4202 2344 42F804ED 		_NEST
 4203 2348 FFF770FA 		BL	NAMEQ
 4204 234c FEF78EFA 		BL	QDUP	// defined?
 4205 2350 FEF736F9 		BL	QBRAN
 4206 2354 C0180018 		.word	SCOM2+MAPOFFSET
 4207 2358 FEF758F9 		BL	AT
 4208 235c FEF70DF9 		_DOLIT
 4209 2360 80000000 		.word	IMEDD
 4210 2364 FEF7BAF9 		BL	ANDD	// immediate?
 4211 2368 FEF72AF9 		BL	QBRAN
 4212 236c B8180018 		.word	SCOM1+MAPOFFSET
 4213 2370 FEF712F9 		BL	EXECU
 4214 2374 52F804FB 		_UNNEST			// it's immediate, execute
 4215              	SCOM1:
 4216 2378 00F07BF8 		BL	CALLC			// it's not immediate, compile
 4217 237c 52F804FB 		_UNNEST	
 4218              	SCOM2:
 4219 2380 FEF7F4FE 		BL	NUMBQ
 4220 2384 FEF71CF9 		BL	QBRAN
 4221 2388 D4180018 		.word	SCOM3+MAPOFFSET
 4222 238c FFF76CFE 		BL	LITER
 4223 2390 52F804FB 		_UNNEST			// compile number as integer
 4224              	SCOM3: // compilation abort 
 4225 2394 00F002F8 		BL COLON_ABORT 
 4226 2398 FFF70EBB 		B.W	ABORT			// error
 4227              	
 4228              	// before aborting a compilation 
ARM GAS  stm32eforth.s 			page 80


 4229              	// reset HERE and LAST
 4230              	// to previous values.  
 4231              	COLON_ABORT:
 4232 239c 42F804ED 		_NEST 
 4233 23a0 FEF7E2FB 		BL LAST 
 4234 23a4 FEF732F9 		BL AT 
 4235 23a8 FEF72EFA 		BL CELLM 
 4236 23ac FEF772F9 		BL DUPP 
 4237 23b0 FEF7C6FB 		BL CPP  
 4238 23b4 FEF720F9 		BL STORE 
 4239 23b8 FEF728F9 		BL AT 
 4240 23bc FEF7D4FB 		BL LAST 
 4241 23c0 FEF71AF9 		BL STORE 
 4242 23c4 52F804FB 		_UNNEST 
 4243              	
 4244              	//    OVERT	( -- )
 4245              	// 	Link a new word into the current vocabulary.
 4246              	
 4247 23c8 78180018 		.word	_SCOMP+MAPOFFSET
 4248 23cc 05       	_OVERT:	.byte  5
 4249 23cd 4F564552 		.ascii "OVERT"
 4249      54
 4250 23d2 00BF     		.p2align 2 	
 4251              	OVERT:
 4252 23d4 42F804ED 		_NEST
 4253 23d8 FEF7C6FB 		BL	LAST
 4254 23dc FEF716F9 		BL	AT
 4255 23e0 FEF7A4FB 		BL	CNTXT
 4256 23e4 FEF708F9 		BL	STORE
 4257 23e8 52F804FB 		_UNNEST
 4258              	
 4259              	//    ; 	   ( -- )
 4260              	// 	Terminate a colon definition.
 4261              	
 4262 23ec 0C190018 		.word	_OVERT+MAPOFFSET
 4263 23f0 C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 4264 23f1 3B       		.ascii ";"
 4265 23f2 00BF     		.p2align 2 	
 4266              	SEMIS:
 4267 23f4 42F804ED 		_NEST
 4268 23f8 FEF7BFF8 		_DOLIT
 4269 23fc 52F804FB 		_UNNEST
 4270 2400 FFF7F2FD 		BL	COMMA
 4271 2404 FFF732FB 		BL	LBRAC
 4272 2408 FFF7E4FF 		BL	OVERT
 4273 240c 52F804FB 		_UNNEST
 4274              	
 4275              	//    ]	   ( -- )
 4276              	// 	Start compiling the words in the input stream.
 4277              	
 4278 2410 30190018 		.word	_SEMIS+MAPOFFSET
 4279 2414 01       	_RBRAC:	.byte  1
 4280 2415 5D       		.ascii "]"
 4281 2416 00BF     		.p2align 2 	
 4282              	RBRAC:
 4283 2418 42F804ED 		_NEST
 4284 241c FEF7ADF8 		_DOLIT
ARM GAS  stm32eforth.s 			page 81


 4285 2420 84180018 		.word	SCOMP+MAPOFFSET
 4286 2424 FEF76CFB 		BL	TEVAL
 4287 2428 FEF7E6F8 		BL	STORE
 4288 242c 52F804FB 		_UNNEST
 4289              	
 4290              	
 4291              	//    COMPILE_BLW	( ca -- asm_code )
 4292              	// 	Assemble a branch-link long instruction to ca.
 4293              	// ref: ARM-v7M architecture reference, section A7.7.18 
 4294              	COMPILE_BLW:
 4295 2430 4FEA6505 		ASR R5,R5,#1 
 4296 2434 4FF45044 		_MOV32 R4,0xF000D000 
 4296      CFF20004 
 4297 243c 65F30A04 		BFI R4,R5,#0,#11
 4298 2440 4FEAD525 		LSR R5,#11
 4299 2444 65F31944 		BFI R4,R5,#16,#10
 4300 2448 4FEAA525 		ASR R5,#10
 4301 244c 65F3CB24 		BFI R4,R5,#11,#1
 4302 2450 4FEA6505 		ASR R5,#1
 4303 2454 65F34D34 		BFI R4,R5,#13,#1
 4304 2458 4FEA6505 		ASR R5,#1
 4305 245c 65F39A64 		BFI R4,R5,#26,#1
 4306 2460 14F0806F 		TST R4,#(1<<26)
 4307 2464 02D1     		BNE 1f
 4308 2466 00BF     		NOP 
 4309 2468 84F42054 		EOR R4,R4,#(5<<11)
 4310 246c 4FEA3445 	1:  ROR R5,R4,#16 
 4311 2470 7047     		_NEXT 
 4312              	
 4313              	// 	.word	_RBRAC+MAPOFFSET
 4314              	// _CALLC	.byte  5
 4315              	// 	.ascii "call,"
 4316              	// 	.p2align 2 	
 4317              	CALLC:
 4318 2472 42F804ED 		_NEST
 4319 2476 25F00105 		BIC R5,R5,#1 
 4320 247a FEF7C7FC 		BL HERE 
 4321 247e FEF775F9 		BL SUBB 
 4322 2482 A5F10405 		SUB R5,R5,#4 
 4323 2486 FFF7D3FF 		BL COMPILE_BLW 
 4324 248a FFF7ADFD 		BL	COMMA			//  assemble BL.W instruction
 4325 248e 52F804FB 		_UNNEST
 4326              	
 4327              		.p2align 
 4328              	// 	:	( -- //  string> )
 4329              	// 	Start a new colon definition using next word as its name.
 4330              	
 4331 2492 54190018 		.word	_RBRAC+MAPOFFSET
 4332 2496 01       	_COLON:	.byte  1
 4333 2497 3A       		.ascii ":"
 4334              		.p2align 2 	
 4335              	COLON:
 4336 2498 42F804ED 		_NEST
 4337 249c FFF70CF9 		BL	TOKEN
 4338 24a0 FFF71CFF 		BL	SNAME
 4339 24a4 FEF769F8 		_DOLIT
 4340 24a8 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 82


 4341 24ac FFF79CFD 		BL	COMMA
 4342 24b0 FFF7B2FF 		BL	RBRAC
 4343 24b4 52F804FB 		_UNNEST
 4344              	
 4345              	//    IMMEDIATE   ( -- )
 4346              	// 	Make the last compiled word an immediate word.
 4347              	
 4348 24b8 D6190018 		.word	_COLON+MAPOFFSET
 4349 24bc 09       	_IMMED:	.byte  9
 4350 24bd 494D4D45 		.ascii "IMMEDIATE"
 4350      44494154 
 4350      45
 4351 24c6 00BF     		.p2align 2 	
 4352              	IMMED:
 4353 24c8 42F804ED 		_NEST
 4354 24cc FEF755F8 		_DOLIT
 4355 24d0 80000000 		.word	IMEDD
 4356 24d4 FEF748FB 		BL	LAST
 4357 24d8 FEF798F8 		BL	AT
 4358 24dc FEF796F8 		BL	AT
 4359 24e0 FEF706F9 		BL	ORR
 4360 24e4 FEF740FB 		BL	LAST
 4361 24e8 FEF790F8 		BL	AT
 4362 24ec FEF784F8 		BL	STORE
 4363 24f0 52F804FB 		_UNNEST
 4364              	
 4365              	// **************************************************************************
 4366              	//  Defining words
 4367              	
 4368              	//    CONSTANT	( u -- //  string> )
 4369              	// 	Compile a new constant.
 4370              	
 4371 24f4 FC190018 		.word	_IMMED+MAPOFFSET
 4372 24f8 08       	_CONST:	.byte  8
 4373 24f9 434F4E53 		.ascii "CONSTANT"
 4373      54414E54 
 4374 2501 0000BF   		.p2align 2 	
 4375              	CONST:
 4376 2504 42F804ED 		_NEST
 4377 2508 FFF7D6F8 		BL	TOKEN
 4378 250c FFF7E6FE 		BL	SNAME
 4379 2510 FFF760FF 		BL	OVERT
 4380 2514 FEF731F8 		_DOLIT
 4381 2518 42F804ED 		_NEST
 4382 251c FFF764FD 		BL	COMMA
 4383 2520 FEF72BF8 		_DOLIT
 4384 2524 68FFFF17 		.word	DOCON+MAPOFFSET
 4385 2528 FFF7A3FF 		BL	CALLC
 4386 252c FFF75CFD 		BL	COMMA
 4387 2530 52F804FB 		_UNNEST
 4388              	
 4389              		.p2align 2 
 4390              	// doDOES> ( -- a )
 4391              	// runtime action of DOES> 
 4392              	// leave parameter field address on stack 
 4393              	DODOES:
 4394 2534 42F804ED 		_NEST 
ARM GAS  stm32eforth.s 			page 83


 4395 2538 FEF788F8 		BL RAT 
 4396 253c FEF744F9 		BL ONEM 
 4397 2540 FEF75AF9 		BL	CELLP
 4398 2544 FEF710FB 		BL LAST 
 4399 2548 FEF760F8 		BL AT
 4400 254c FFF7C2F8 		BL NAMET 
 4401 2550 FEF752F9 		BL CELLP 
 4402 2554 FEF79EF8 		BL DUPP
 4403 2558 FEF780F8 		BL TOR 
 4404 255c FEF706F9 		BL SUBB 
 4405 2560 A5F10405 		SUB R5,R5,#4
 4406 2564 FFF764FF 		BL	COMPILE_BLW
 4407 2568 FEF766F8 		BL RFROM
 4408 256c FEF744F8 		BL STORE  
 4409 2570 52F804FB 		_UNNEST 
 4410              	
 4411              		
 4412              	
 4413              		.p2align 2
 4414              	//  DOES> ( -- )
 4415              	//  compile time action 
 4416 2574 F8240000 		.word _CONST   
 4417 2578 C5       	_DOES: .byte IMEDD+COMPO+5 
 4418 2579 444F4553 		.ascii "DOES>"
 4418      3E
 4419 257e 00BF     		.p2align 2
 4420              	DOES: 
 4421 2580 42F804ED 		_NEST 
 4422 2584 FDF7F9FF 		_DOLIT 
 4423 2588 741A0018 		.word DODOES + MAPOFFSET
 4424 258c FFF771FF 		BL CALLC 
 4425 2590 FDF7F3FF 		_DOLIT	
 4426 2594 52F804FB 		_UNNEST 
 4427 2598 FFF726FD 		BL	COMMA  
 4428 259c FDF7EDFF 		_DOLIT 
 4429 25a0 42F804ED 		_NEST 
 4430 25a4 FFF720FD 		BL COMMA 
 4431 25a8 FDF7E7FF 		_DOLIT 
 4432 25ac 78FBFF17 		.word RFROM+MAPOFFSET  
 4433 25b0 FFF75FFF 		BL	CALLC
 4434 25b4 FDF7E1FF 		_DOLIT 
 4435 25b8 08FDFF17 		.word ONEM+MAPOFFSET 
 4436 25bc FFF759FF 		BL CALLC 
 4437 25c0 52F804FB 		_UNNEST 
 4438              	
 4439              	
 4440              	//    CREATE	( -- //  string> )
 4441              	// 	Compile a new array entry without allocating code space.
 4442              	
 4443 25c4 B81A0018 		.word	_DOES+MAPOFFSET
 4444 25c8 06       	_CREAT:	.byte  6
 4445 25c9 43524541 		.ascii "CREATE"
 4445      5445
 4446 25cf 00       		.p2align 2 	
 4447              	CREAT:
 4448 25d0 42F804ED 		_NEST
 4449 25d4 FFF770F8 		BL	TOKEN
ARM GAS  stm32eforth.s 			page 84


 4450 25d8 FFF780FE 		BL	SNAME
 4451 25dc FFF7FAFE 		BL	OVERT
 4452 25e0 FDF7CBFF 		_DOLIT
 4453 25e4 42F804ED 		_NEST
 4454 25e8 FFF7FEFC 		BL	COMMA
 4455 25ec FDF7C5FF 		_DOLIT
 4456 25f0 5CFFFF17 		.word	DOVAR+MAPOFFSET
 4457 25f4 FFF73DFF 		BL	CALLC
 4458 25f8 52F804FB 		_UNNEST
 4459              	
 4460              	//    VARIABLE	( -- //  string> )
 4461              	// 	Compile a new variable initialized to 0.
 4462              	
 4463 25fc 081B0018 		.word	_CREAT+MAPOFFSET
 4464 2600 08       	_VARIA:	.byte  8
 4465 2601 56415249 		.ascii "VARIABLE"
 4465      41424C45 
 4466 2609 0000BF   		.p2align 2 	
 4467              	VARIA:
 4468 260c 42F804ED 		_NEST
 4469 2610 FFF7DEFF 		BL	CREAT
 4470 2614 FDF7B1FF 		_DOLIT
 4471 2618 00000000 		.word	0
 4472 261c FFF7E4FC 		BL	COMMA
 4473 2620 52F804FB 		_UNNEST
 4474              	
 4475              	/*************
 4476              	   Tools
 4477              	*************/
 4478              	
 4479              	//    dm+	 ( a u -- a )
 4480              	// 	Dump u bytes from , leaving a+u on the stack.
 4481              	
 4482              	// 	.word	_VARIA+MAPOFFSET
 4483              	// _DMP	.byte  3
 4484              	// 	.ascii "dm+"
 4485              	// 	.p2align 2 	
 4486              	DMP:
 4487 2624 42F804ED 		_NEST
 4488 2628 FEF746F8 		BL	OVER
 4489 262c FDF7A5FF 		_DOLIT
 4490 2630 04000000 		.word	4
 4491 2634 FEF7DEFE 		BL	UDOTR			// display address
 4492 2638 FEF742FE 		BL	SPACE
 4493 263c FEF70EF8 		BL	TOR			// start count down loop
 4494 2640 00F00CB8 		B.W	PDUM2			// skip first pass
 4495              	PDUM1:
 4496 2644 FEF726F8 	  BL	DUPP
 4497 2648 FDF7F0FF 		BL	CAT
 4498 264c FDF795FF 		_DOLIT
 4499 2650 03000000 		.word	3
 4500 2654 FEF7CEFE 		BL	UDOTR			// display numeric data
 4501 2658 FEF7AEF8 		BL	ONEP			// increment address
 4502              	PDUM2:
 4503 265c FDF7A1FF 	  BL	DONXT
 4504 2660 841B0018 		.word	PDUM1+MAPOFFSET	// loop till done
 4505 2664 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 85


 4506              		.p2align 2 
 4507              	//    DUMP	( a u -- )
 4508              	// 	Dump u bytes from a, in a formatted manner.
 4509              	
 4510 2668 401B0018 		.word	_VARIA+MAPOFFSET
 4511 266c 04       	_DUMP:	.byte  4
 4512 266d 44554D50 		.ascii "DUMP"
 4513 2671 0000BF   		.p2align 2 	
 4514              	DUMP:
 4515 2674 42F804ED 		_NEST
 4516 2678 FEF714FA 		BL	BASE
 4517 267c FDF7C6FF 		BL	AT
 4518 2680 FDF7ECFF 		BL	TOR
 4519 2684 FEF71AFD 		BL	HEX			// save radix,set hex
 4520 2688 FDF777FF 		_DOLIT
 4521 268c 10000000 		.word	16
 4522 2690 FEF738FB 		BL	SLASH			// change count to lines
 4523 2694 FDF7E2FF 		BL	TOR
 4524 2698 00F014B8 		B.W	DUMP4			// start count down loop
 4525              	DUMP1:
 4526 269c FEF750FE 	  BL	CR
 4527 26a0 FDF76BFF 		_DOLIT
 4528 26a4 10000000 		.word	16
 4529 26a8 FEF7FEF8 		BL	DDUP
 4530 26ac FFF7BAFF 		BL	DMP			// display numeric
 4531 26b0 FEF7E6F8 		BL	ROT
 4532 26b4 FEF7E4F8 		BL	ROT
 4533 26b8 FEF702FE 		BL	SPACE
 4534 26bc FEF700FE 		BL	SPACE
 4535 26c0 FEF726FE 		BL	TYPEE			// display printable characters
 4536              	DUMP4:
 4537 26c4 FDF76DFF 	  BL	DONXT
 4538 26c8 DC1B0018 		.word	DUMP1+MAPOFFSET	// loop till done
 4539              	DUMP3:
 4540 26cc FDF7DAFF 	  BL	DROP
 4541 26d0 FDF7B2FF 		BL	RFROM
 4542 26d4 FEF7E6F9 		BL	BASE
 4543 26d8 FDF78EFF 		BL	STORE			// restore radix
 4544 26dc 52F804FB 		_UNNEST
 4545              	
 4546              	//    .S	  ( ... -- ... )
 4547              	// 	Display the contents of the data stack.
 4548              	
 4549 26e0 AC1B0018 		.word	_DUMP+MAPOFFSET
 4550              	_DOTS:
 4551 26e4 02       		.byte  2
 4552 26e5 2E53     		.ascii ".S"
 4553 26e7 00       		.p2align 2 	
 4554              	DOTS:
 4555 26e8 42F804ED 		_NEST
 4556 26ec FEF7E8FD 		BL	SPACE
 4557 26f0 FEF76AFB 		BL	DEPTH			// stack depth
 4558 26f4 FDF7B2FF 		BL	TOR			// start count down loop
 4559 26f8 00F006B8 		B.W	DOTS2			// skip first pass
 4560              	DOTS1:
 4561 26fc FDF7A6FF 		BL	RAT
 4562 2700 FEF770FB 		BL	PICK
ARM GAS  stm32eforth.s 			page 86


 4563 2704 FEF7A2FE 		BL	DOT			// index stack, display contents
 4564              	DOTS2:
 4565 2708 FDF74BFF 		BL	DONXT
 4566 270c 3C1C0018 		.word	DOTS1+MAPOFFSET	// loop till done
 4567 2710 FEF7D6FD 		BL	SPACE
 4568 2714 52F804FB 		_UNNEST
 4569              	
 4570              	//    >NAME	( ca -- na | F )
 4571              	// 	Convert code address to a name address.
 4572              	
 4573 2718 241C0018 		.word	_DOTS+MAPOFFSET
 4574 271c 05       	_TNAME:	.byte  5
 4575 271d 3E4E414D 		.ascii ">NAME"
 4575      45
 4576 2722 00BF     		.p2align 2 	
 4577              	TNAME:
 4578 2724 42F804ED 		_NEST
 4579 2728 FDF798FF 		BL	TOR			//  
 4580 272c FEF7FEF9 		BL	CNTXT			//  va
 4581 2730 FDF76CFF 		BL	AT			//  na
 4582              	TNAM1:
 4583 2734 FDF7AEFF 		BL	DUPP			//  na na
 4584 2738 FDF742FF 		BL	QBRAN
 4585 273c A41C0018 		.word	TNAM2+MAPOFFSET	//  vocabulary end, no match
 4586 2740 FDF7A8FF 		BL	DUPP			//  na na
 4587 2744 FEF7C6FF 		BL	NAMET			//  na ca
 4588 2748 FDF780FF 		BL	RAT			//  na ca code
 4589 274c FDF7DAFF 		BL	XORR			//  na f --
 4590 2750 FDF736FF 		BL	QBRAN
 4591 2754 A41C0018 		.word	TNAM2+MAPOFFSET
 4592 2758 FEF756F8 		BL	CELLM			//  la 
 4593 275c FDF756FF 		BL	AT			//  next_na
 4594 2760 FFF7E8BF 		B.W	TNAM1
 4595              	TNAM2:	
 4596 2764 FDF768FF 		BL	RFROM
 4597 2768 FDF78CFF 		BL	DROP			//  0|na --
 4598 276c 52F804FB 		_UNNEST			// 0
 4599              	
 4600              	//    .ID	 ( na -- )
 4601              	// 	Display the name at address.
 4602              	
 4603 2770 5C1C0018 		.word	_TNAME+MAPOFFSET
 4604 2774 03       	_DOTID:	.byte  3
 4605 2775 2E4944   		.ascii ".ID"
 4606              		.p2align 2 	
 4607              	DOTID:
 4608 2778 42F804ED 		_NEST
 4609 277c FEF776F8 		BL	QDUP			// if zero no name
 4610 2780 FDF71EFF 		BL	QBRAN
 4611 2784 E01C0018 		.word	DOTI1+MAPOFFSET
 4612 2788 FEF734F9 		BL	COUNT
 4613 278c FDF7F5FE 		_DOLIT
 4614 2790 1F000000 		.word	0x1F
 4615 2794 FDF7A2FF 		BL	ANDD			// mask lexicon bits
 4616 2798 FEF7BAFD 		BL	TYPEE
 4617 279c 52F804FB 		_UNNEST			// display name string
 4618              	DOTI1:
ARM GAS  stm32eforth.s 			page 87


 4619 27a0 FEF706FE 		BL	DOTQP
 4620 27a4 09       		.byte	9
 4621 27a5 207B6E6F 		.ascii " {noName}"
 4621      4E616D65 
 4621      7D
 4622 27ae 00BF     		.p2align 2 	
 4623 27b0 52F804FB 		_UNNEST
 4624              	
 4625              		.equ WANT_SEE, 1  // set to 1 if you want SEE 
 4626              		.if WANT_SEE 
 4627              	
 4628              	// .CA ( ca -- ca )
 4629              	// print code field address 
 4630              	DOTCA:
 4631 27b4 42F804ED 		_NEST 
 4632 27b8 FDF76CFF 		BL  DUPP
 4633 27bc FEF734FE 		BL UDOT 
 4634 27c0 FDF7DBFE 		_DOLIT 
 4635 27c4 02000000 		.word 2 
 4636 27c8 FEF788FD 		BL SPACS 
 4637 27cc 52F804FB 		_UNNEST 
 4638              	
 4639              	// CODE_ABORT ( ca -- f )
 4640              	// abort if code definition
 4641              	CODE_ABORT:
 4642 27d0 42F804ED 		_NEST 
 4643 27d4 FFF7EEFF 		BL DOTCA  
 4644 27d8 FDF75CFF 		BL DUPP 
 4645 27dc FDF716FF 		BL AT 
 4646 27e0 FDF7CBFE 		_DOLIT 
 4647 27e4 42F804ED 		.word 0xed04f842 // _NEST code 
 4648 27e8 FDF78CFF 		BL XORR 
 4649 27ec FDF7E8FE 		BL QBRAN 
 4650 27f0 481D0018 		.word 1f+MAPOFFSET 
 4651 27f4 FEF774FC 		BL DECIM
 4652 27f8 FFF7F2F8 		BL ABORQ 
 4653 27fc 09       		.byte 9 
 4654 27fd 636F6465 		.ascii "code word"
 4654      20776F72 
 4654      64
 4655 2806 00BF     		.p2align 2
 4656              	1:	 
 4657 2808 FEF7D2FD 		BL DOTQP 
 4658 280c 04       		.byte 4
 4659 280d 6E657374 		.ascii "nest"
 4660 2811 0000BF   		.p2align 2 
 4661 2814 FEF794FD 		BL CR 
 4662 2818 52F804FB 		_UNNEST 
 4663              	
 4664              	
 4665              	// UNNEST? ( ca -- ca f )
 4666              	// check if UNNEST 
 4667              	UNNESTQ:
 4668 281c 42F804ED 		_NEST 
 4669 2820 FDF738FF 		BL DUPP 
 4670 2824 FDF7F2FE 		BL AT 
 4671 2828 FDF7A7FE 		_DOLIT 
ARM GAS  stm32eforth.s 			page 88


 4672 282c 52F804FB 		.word 0xfb04f852 
 4673 2830 FEF778F8 		BL EQUAL
 4674 2834 FDF72EFF 		BL DUPP 
 4675 2838 FDF7C2FE 		BL QBRAN
 4676 283c 901D0018 		.word 1f+MAPOFFSET  
 4677 2840 FEF7B6FD 		BL DOTQP
 4678 2844 06       		.byte 6
 4679 2845 756E6E65 		.ascii "unnest" 
 4679      7374
 4680 284b 00       		.p2align 2
 4681 284c FEF778FD 		BL CR  
 4682 2850 52F804FB 	1:	_UNNEST 
 4683              	
 4684              	
 4685              	// search no name routine from code address. 
 4686              	NONAMEQ: // ( ca -- na|ca f )
 4687 2854 42F804ED 		_NEST 
 4688 2858 FDF78FFE 		_DOLIT 
 4689 285c 00000000 		.word 0 
 4690 2860 FDF720FF 		BL SWAP 
 4691 2864 FDF789FE 		_DOLIT 
 4692 2868 0C2C0000 		.word NONAME_SUB
 4693 286c FDF7F6FE 		BL TOR   
 4694 2870 FDF710FF 	0:	BL DUPP // ( 0 ca ca -- )  
 4695 2874 FDF7EAFE 		BL RAT  
 4696 2878 FDF7C8FE 		BL AT 
 4697 287c FDF7F6FF 		BL QDUP 
 4698 2880 FDF79EFE 		BL QBRAN 
 4699 2884 1C1E0018 		.word 2f+MAPOFFSET 
 4700 2888 FDF73CFF 		BL XORR 
 4701 288c FDF798FE 		BL QBRAN 
 4702 2890 E81D0018 		.word 1f+MAPOFFSET 
 4703 2894 FDF7D0FE 		BL RFROM 
 4704 2898 FDF7AEFF 		BL CELLP
 4705 289c FDF7DEFE 		BL TOR  
 4706 28a0 FDF79AFE 		BL BRAN 
 4707 28a4 B01D0018 		.word 0b+MAPOFFSET 
 4708 28a8 FDF7C6FE 	1:  BL RFROM 
 4709 28ac FDF765FE 		_DOLIT 
 4710 28b0 0C2C0000 		.word NONAME_SUB
 4711 28b4 FDF75AFF 		BL SUBB
 4712 28b8 FDF75FFE 		_DOLIT 
 4713 28bc 482C0000 		.word ANONYMOUS 
 4714 28c0 FDF74CFF 		BL	PLUS
 4715 28c4 FDF7A2FE 		BL	AT   
 4716 28c8 FDF7ECFE 		BL	SWAP 
 4717 28cc FDF7DAFE 		BL	DROP
 4718 28d0 FDF7E8FE 		BL	SWAP 
 4719 28d4 FEF700F8 		BL	INVER 
 4720 28d8 52F804FB 		_UNNEST 
 4721 28dc FDF7D2FE 	2:	BL DROP 
 4722 28e0 FDF7E0FE 		BL SWAP 
 4723 28e4 FDF7A8FE 		BL RFROM
 4724 28e8 FDF7CCFE 		BL DROP 
 4725 28ec 52F804FB 		_UNNEST 
 4726              	
 4727              		.p2align 2 
ARM GAS  stm32eforth.s 			page 89


 4728              	
 4729              	
 4730              	// print noname routine label ( n -- )
 4731              	// n is offset in ANONYMOUS array 
 4732              	DOTNONAME:
 4733 28f0 42F804ED 		_NEST 
 4734 28f4 41F8045D 		_PUSH 
 4735 28f8 FDF73FFE 		_DOLIT 
 4736 28fc 482C0000 		.word ANONYMOUS 
 4737 2900 FDF72CFF 		BL PLUS 
 4738 2904 FDF782FE 		BL AT 
 4739 2908 FEF702FD 		BL TYPEE 
 4740 290c 52F804FB 		_UNNEST 
 4741              	
 4742              	// IS_BLW ( code -- f )
 4743              	// check if it is a BL instruction 
 4744              	IS_BLW:
 4745 2910 42F804ED 		_NEST 
 4746 2914 FDF731FE 		_DOLIT 
 4747 2918 00F000D0 		.word 0xD000F000
 4748 291c FDF7BAFE 		BL DUPP 
 4749 2920 FDF79CFE 		BL TOR 
 4750 2924 FDF7DAFE 		BL ANDD
 4751 2928 FDF786FE 		BL RFROM  
 4752 292c FDF7FAFF 		BL EQUAL   
 4753 2930 52F804FB 		_UNNEST 
 4754              	
 4755              	//    SEE	 ( -- //  string> )
 4756              	// 	A simple decompiler.
 4757              	
 4758 2934 B41C0018 		.word	_DOTID+MAPOFFSET
 4759 2938 03       	_SEE:	.byte  3
 4760 2939 534545   		.ascii "SEE"
 4761              		.p2align 2 	
 4762              	SEE:
 4763 293c 42F804ED 		_NEST
 4764 2940 FEF7B0F8 		BL BASE 
 4765 2944 FDF762FE 		BL AT 
 4766 2948 FDF788FE 		BL TOR 
 4767 294c FEF7B6FB 		BL HEX 
 4768 2950 FFF72AFB 		BL	TICK	//  ca --, starting address
 4769 2954 FEF7F4FC 		BL	CR	
 4770 2958 FFF73AFF 		BL  CODE_ABORT
 4771 295c FDF70DFE 		_DOLIT 
 4772 2960 00000000 		.word 0  
 4773 2964 FDF77AFE 		BL TOR // not a BL counter limit to 10 consecutives 
 4774              	SEE1:
 4775 2968 FDF746FF 		BL	CELLP			//  a
 4776 296c FFF722FF 		BL  DOTCA 
 4777 2970 FFF754FF 		BL  UNNESTQ
 4778 2974 FDF724FE 		BL	QBRAN 
 4779 2978 E81E0018 		.word 1f+MAPOFFSET  
 4780 297c FDF78AFE 		BL	DUPP 
 4781 2980 FDF73AFF 		BL	CELLP
 4782 2984 FDF742FE 		BL	AT 
 4783 2988 FFF7C2FF 		BL	IS_BLW
 4784 298c FDF7A4FF 		BL	INVER  
ARM GAS  stm32eforth.s 			page 90


 4785 2990 FDF716FE 		BL	QBRAN 
 4786 2994 A81E0018 		.word SEE1+MAPOFFSET 
 4787 2998 FDF74EFE 		BL	RFROM 
 4788 299c FDF772FE 		BL	DROP 
 4789 29a0 FDF71AFE 		BL	BRAN 
 4790 29a4 141F0018 		.word 2f+MAPOFFSET 
 4791 29a8 FDF774FE 	1:	BL	DUPP			//  a a
 4792 29ac 00F044F8 		BL	DECOMP		//  a
 4793 29b0 FEF7C6FC 		BL	CR 
 4794 29b4 FDF74AFE 		BL	RAT 
 4795 29b8 FDF7DFFD 		_DOLIT 
 4796 29bc 0A000000 		.word 10 
 4797 29c0 FDF7D4FF 		BL 	GREAT 
 4798 29c4 FDF7FCFD 		BL	QBRAN 
 4799 29c8 A81E0018 		.word	SEE1+MAPOFFSET
 4800 29cc FDF734FE 		BL	RFROM 
 4801 29d0 FDF758FE 		BL	DROP 
 4802 29d4 FDF756FE 	2:	BL	DROP
 4803 29d8 FDF72EFE 		BL  RFROM 
 4804 29dc FEF762F8 		BL 	BASE 
 4805 29e0 FDF70AFE 		BL	STORE 
 4806 29e4 52F804FB 		_UNNEST
 4807              	
 4808              	
 4809              	// BL-ADR ( asm_code -- rel_adr )
 4810              	// get absolute address from asm_code 
 4811              	// ref: ARM-v7M architecture reference, section A7.7.18 
 4812              	BLADR: 
 4813 29e8 4FEA0504 		MOV.W R4,R5
 4814 29ec 4FEA3444 		ROR R4,#16 
 4815 29f0 64F30A05 		BFI R5,R4,#0,#11 
 4816 29f4 4FEAE424 		ASR R4,#11 
 4817 29f8 64F35555 		BFI R5,R4,#21,#1 
 4818 29fc 4FEAA404 		ASR R4,#2
 4819 2a00 64F39655 		BFI R5,R4,#22,#1
 4820 2a04 4FEAE404 		ASR R4,#3
 4821 2a08 64F3D425 		BFI R5,R4,#11,#10
 4822 2a0c 4FEAA424 		ASR R4,#10 
 4823 2a10 64F3D755 		BFI R5,R4,#23,#1
 4824 2a14 15F4000F 		TST R5,#(1<<23)
 4825 2a18 40F00280 		BNE.W 1f
 4826 2a1c 85F4C005 		EOR R5,R5,#(3<<21)
 4827 2a20 4FEA0525 	1:	LSL R5,#8
 4828 2a24 4FEAE515 		ASR R5,#7 
 4829 2a28 7047     		_NEXT 
 4830              	
 4831              	// 	DECOMPILE ( a -- )
 4832              	// 	Convert code in a.  Display name of command or as data.
 4833              	
 4834 2a2a 781E0018 		.word	_SEE+MAPOFFSET
 4835 2a2e 09       	_DECOM:	.byte  9
 4836 2a2f 4445434F 		.ascii "DECOMPILE"
 4836      4D50494C 
 4836      45
 4837              		.p2align 2 
 4838              		
 4839              	DECOMP:	
ARM GAS  stm32eforth.s 			page 91


 4840 2a38 42F804ED 		_NEST
 4841 2a3c FDF72AFE 		BL	DUPP			//  a a
 4842 2a40 FDF7E4FD 		BL	AT			//  a code
 4843 2a44 FDF726FE 		BL	DUPP			//  a code code
 4844 2a48 FFF762FF 		BL	IS_BLW
 4845 2a4c FDF7B8FD 		BL	QBRAN
 4846 2a50 EC1F0018 		.word	DECOM2+MAPOFFSET	//  not a BL instruction 
 4847              		//  a valid_code --, extract address and display name
 4848 2a54 FEF7ACFC 		BL DOTQP  
 4849 2a58 03       		.byte 3
 4850 2a59 424C20   		.ascii "BL "
 4851              		.p2align 2 
 4852 2a5c FFF7C4FF 		BL  BLADR   // extract relative address from BL code
 4853 2a60 FDF72AFE 		BL	OVER			//  a offset a
 4854 2a64 FDF77AFE 		BL	PLUS			//  a target-4
 4855 2a68 FDF7C6FE 		BL	CELLP			//  a target
 4856 2a6c FFF7A2FE 		BL  DOTCA 
 4857 2a70 FFF7F0FE 		BL	NONAMEQ 
 4858 2a74 FDF7A4FD 		BL	QBRAN 
 4859 2a78 C41F0018 		.word DECOMP1+MAPOFFSET  
 4860 2a7c FDF7ACFD 		BL	BRAN 
 4861 2a80 C81F0018 		.word DECOMP3+MAPOFFSET 
 4862              	DECOMP1:
 4863 2a84 FFF74EFE 		BL	TNAME			//  a na/0 --, is it a name?
 4864              	DECOMP3:
 4865 2a88 FFF776FE 		BL	DOTID			//  a --, display name
 4866 2a8c FDF7FAFD 		BL	DROP
 4867              	// reset not BL counter 
 4868 2a90 FDF7D2FD 		BL	RFROM 
 4869 2a94 FDF7D0FD 		BL	RFROM 
 4870 2a98 FDF7FCFD 		BL	DUPP 
 4871 2a9c FDF766FE 		BL	SUBB 
 4872 2aa0 FDF7DCFD 		BL	TOR 
 4873 2aa4 FDF7DAFD 		BL	TOR 	
 4874 2aa8 52F804FB 		_UNNEST
 4875              			
 4876              	DECOM2: // not a BL 
 4877 2aac FEF7BCFC 		BL	UDOT
 4878 2ab0 FDF7E8FD 		BL	DROP
 4879 2ab4 FDF7C0FD 		BL	RFROM // unnest address 
 4880 2ab8 FDF7BEFD 		BL	RFROM // not BL counter 
 4881 2abc FDF77CFE 		BL	ONEP  // increment counter 
 4882 2ac0 FDF7CCFD 		BL	TOR 
 4883 2ac4 FDF7CAFD 		BL	TOR 
 4884 2ac8 52F804FB 		_UNNEST
 4885              	
 4886              	//    WORDS	( -- )
 4887              	// 	Display the names in the context vocabulary.
 4888              	
 4889 2acc 6E1F0018 		.word	_DECOM+MAPOFFSET
 4890              	.else 
 4891              		.word _DOTID+MAPOFFSET 
 4892              	.endif 
 4893 2ad0 05       	_WORDS:	.byte  5
 4894 2ad1 574F5244 		.ascii "WORDS"
 4894      53
 4895 2ad6 00BF     		.p2align 2 	
ARM GAS  stm32eforth.s 			page 92


 4896              	WORDS:
 4897 2ad8 42F804ED 		_NEST
 4898 2adc FEF730FC 		BL	CR
 4899 2ae0 FEF724F8 		BL	CNTXT
 4900 2ae4 FDF792FD 		BL	AT			// only in context
 4901              	WORS1:
 4902 2ae8 FDF7C0FE 		BL	QDUP			// ?at end of list
 4903 2aec FDF768FD 		BL	QBRAN
 4904 2af0 4C200018 		.word	WORS2+MAPOFFSET
 4905 2af4 FDF7CEFD 		BL	DUPP
 4906 2af8 FEF7E2FB 		BL	SPACE
 4907 2afc FFF73CFE 		BL	DOTID			// display a name
 4908 2b00 FDF782FE 		BL	CELLM
 4909 2b04 FDF782FD 		BL	AT
 4910 2b08 FFF7EEBF 		B.W	WORS1
 4911              	WORS2:
 4912 2b0c 52F804FB 		_UNNEST
 4913              	
 4914              	// **************************************************************************
 4915              	//  cold start
 4916              	
 4917              	//    VER	 ( -- n )
 4918              	// 	Return the version number of this implementation.
 4919              	
 4920              	// 	.word	_WORDS+MAPOFFSET
 4921              	// _VERSN	.byte  3
 4922              	// 	.ascii "VER"
 4923              	// 	.p2align 2 	
 4924              	VERSN:
 4925 2b10 42F804ED 		_NEST
 4926 2b14 FDF731FD 		_DOLIT
 4927 2b18 00010000 		.word	VER*256+EXT
 4928 2b1c 52F804FB 		_UNNEST
 4929              	
 4930              	//    hi	  ( -- )
 4931              	// 	Display the sign-on message of eForth.
 4932              	
 4933 2b20 10200018 		.word	_WORDS+MAPOFFSET
 4934 2b24 02       	_HI:	.byte  2
 4935 2b25 4849     		.ascii "HI"
 4936 2b27 00       		.p2align 2 	
 4937              	HI:
 4938 2b28 42F804ED 		_NEST
 4939 2b2c FEF708FC 		BL	CR	// initialize I/O
 4940 2b30 FEF73EFC 		BL	DOTQP
 4941 2b34 17       		.byte	23
 4942 2b35 626C7565 		.ascii "blue pill stm32eForth v" 
 4942      2070696C 
 4942      6C207374 
 4942      6D333265 
 4942      466F7274 
 4943              		.p2align 2
 4944 2b4c FDF7AAFF 		BL	BASE
 4945 2b50 FDF75CFD 		BL	AT
 4946 2b54 FEF7B2FA 		BL	HEX	// save radix
 4947 2b58 FFF7DAFF 		BL	VERSN
 4948 2b5c FEF72AFA 		BL	BDIGS
ARM GAS  stm32eforth.s 			page 93


 4949 2b60 FEF74EFA 		BL	DIG
 4950 2b64 FEF74CFA 		BL	DIG
 4951 2b68 FDF707FD 		_DOLIT
 4952 2b6c 2E000000 		.word	'.'
 4953 2b70 FEF730FA 		BL	HOLD
 4954 2b74 FEF754FA 		BL	DIGS
 4955 2b78 FEF778FA 		BL	EDIGS
 4956 2b7c FEF7C8FB 		BL	TYPEE	// format version number
 4957 2b80 FDF790FF 		BL	BASE
 4958 2b84 FDF738FD 		BL	STORE
 4959 2b88 FEF7DAFB 		BL	CR
 4960 2b8c 52F804FB 		_UNNEST			// restore radix
 4961              	
 4962              	//    COLD	( -- )
 4963              	// 	The high level cold start sequence.
 4964              	
 4965 2b90 64200018 		.word	_HI+MAPOFFSET
 4966 2b94 04       	LASTN:	.byte  4
 4967 2b95 434F4C44 		.ascii "COLD"
 4968 2b99 000000   		.p2align 2,0	
 4969              	COLD:
 4970              	//  Initiate Forth registers
 4971 2b9c 4FF4A073 		_MOV32 R3,UPP // system variables area 
 4971      C2F20003 
 4972 2ba4 4FF49D41 		_MOV32 R1,SPP // Forth data stack 
 4972      C2F20001 
 4973 2bac 4FF49F42 		_MOV32 R2,RPP // Forth return stack 
 4973      C2F20002 
 4974 2bb4 85EA0505 		EOR R5,R5,R5			//  tos=0
 4975 2bb8 42F804ED 		_NEST
 4976              		
 4977              	COLD1:
 4978 2bbc FDF7DDFC 		_DOLIT 
 4979 2bc0 00000000 		.word 0 
 4980 2bc4 FDF798FC 		BL ULED // turn off user LED 
 4981 2bc8 FDF7D7FC 		_DOLIT
 4982 2bcc 00040000 		.word	UZERO
 4983 2bd0 FDF7D3FC 		_DOLIT
 4984 2bd4 40010020 		.word	UPP
 4985 2bd8 FDF7CFFC 		_DOLIT
 4986 2bdc 54000000 		.word	ULAST-UZERO
 4987 2be0 FEF75CF9 		BL	MOVE 			// initialize user area
 4988 2be4 FEF7A6FF 		BL	PRESE			// initialize stack
 4989              	
 4990              		// check if user image saved in slot 0 
 4991 2be8 FFF790F8 		BL IMGQ 
 4992 2bec FDF7E8FC 		BL	QBRAN 
 4993 2bf0 38210018 		.word 1f+MAPOFFSET
 4994 2bf4 FFF7A2F8 		BL	LOAD_IMG 
 4995 2bf8 FDF74AFF 	1:	BL	TBOOT
 4996 2bfc FEF72AF9 		BL	ATEXE			// application boot
 4997 2c00 FFF7E8FB 		BL	OVERT
 4998 2c04 FEF7A6BF 		B.W	QUIT			// start interpretation
 4999              	COLD2:
 5000              		.p2align 2 	
 5001              	CTOP:
 5002 2c08 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
ARM GAS  stm32eforth.s 			page 94


 5003              	
 5004              	/********************************
 5005              	  data that doesn't need to be 
 5006              	  copied in RAM 
 5007              	*******************************/
 5008              		.p2align 2
 5009              	NONAME_SUB: // routine not in the dictionary 
 5010 2c0c 18FBFF17 		.word BRAN+MAPOFFSET,QBRAN+MAPOFFSET, DOLIT+MAPOFFSET,DONXT+MAPOFFSET,DODOES+MAPOFFSET
 5010      00FBFF17 
 5010      BAFAFF17 
 5010      E2FAFF17 
 5010      741A0018 
 5011 2c20 5CFFFF17 		.word DOVAR+MAPOFFSET,DOCON+MAPOFFSET,IS_BLW+MAPOFFSET,DOTQP+MAPOFFSET,BLADR+MAPOFFSET  
 5011      68FFFF17 
 5011      501E0018 
 5011      F0080018 
 5011      281F0018 
 5012 2c34 F41C0018 		.word DOTCA+MAPOFFSET,NONAMEQ+MAPOFFSET,STRCQ+MAPOFFSET,VERSN+MAPOFFSET  
 5012      941D0018 
 5012      BC150018 
 5012      50200018 
 5013 2c44 00000000 		.word 0 
 5014              	
 5015              	ANONYMOUS: // anonymous routines 
 5016 2c48 802C0000 		.word BRAN_LBL,QBRAN_LBL,DOLIT_LBL,DONEXT_LBL,DODOES_LBL,DOVAR_LBL,DOCON_LBL
 5016      8C2C0000 
 5016      982C0000 
 5016      A42C0000 
 5016      B02C0000 
 5017 2c64 D42C0000 		.word IS_BLW_LBL,DOTQP_LBL,BLADR_LBL,DOTCA_LBL,NONAMEQ_LBL,STRCQ_LBL,VERSN_LBL   
 5017      E02C0000 
 5017      E42C0000 
 5017      F02C0000 
 5017      FC2C0000 
 5018              	
 5019              	BRAN_LBL:
 5020 2c80 09       		.byte 9 
 5021 2c81 207B6272 		.ascii " {branch}"
 5021      616E6368 
 5021      7D
 5022 2c8a 00BF     		.p2align 2 
 5023              	QBRAN_LBL:
 5024 2c8c 0A       		.byte 10
 5025 2c8d 207B3F62 		.ascii " {?branch}"
 5025      72616E63 
 5025      687D
 5026 2c97 00       		.p2align 2
 5027              	DOLIT_LBL:
 5028 2c98 08       		.byte 8 
 5029 2c99 207B646F 		.ascii " {doLit}"
 5029      4C69747D 
 5030 2ca1 0000BF   		.p2align 2 
 5031              	DONEXT_LBL:
 5032 2ca4 09       		.byte 9
 5033 2ca5 207B646F 		.ascii " {doNext}"
 5033      4E657874 
 5033      7D
ARM GAS  stm32eforth.s 			page 95


 5034 2cae 00BF     		.p2align 2 
 5035              	DODOES_LBL:
 5036 2cb0 09       		.byte 9
 5037 2cb1 207B646F 		.ascii " {doDoes}"
 5037      446F6573 
 5037      7D
 5038 2cba 00BF     		.p2align 2 
 5039              	DOVAR_LBL:
 5040 2cbc 08       		.byte 8
 5041 2cbd 207B646F 		.ascii " {doVar}"
 5041      5661727D 
 5042 2cc5 0000BF   		.p2align 2 
 5043              	DOCON_LBL:
 5044 2cc8 0A       		.byte 10
 5045 2cc9 207B646F 		.ascii " {doConst}"
 5045      436F6E73 
 5045      747D
 5046 2cd3 00       		.p2align 2 
 5047              	IS_BLW_LBL:
 5048 2cd4 0B       		.byte 11 
 5049 2cd5 207B424C 		.ascii " {BL code?}"
 5049      20636F64 
 5049      653F7D
 5050              		.p2align 2 
 5051              	DOTQP_LBL:
 5052 2ce0 03       		.byte 3
 5053 2ce1 202E22   		.ascii " .\""
 5054              		.p2align 
 5055              	BLADR_LBL:
 5056 2ce4 09       		.byte 9
 5057 2ce5 207B424C 		.ascii " {BL>ADR}"
 5057      3E414452 
 5057      7D
 5058 2cee 00BF     		.p2align 2 
 5059              	DOTCA_LBL:
 5060 2cf0 08       		.byte  8
 5061 2cf1 207B646F 		.ascii " {dotca}"
 5061      7463617D 
 5062 2cf9 0000BF   		.p2align 2 
 5063              	NONAMEQ_LBL:
 5064 2cfc 0A       		.byte  10
 5065 2cfd 207B6E6F 		.ascii " {noname?}"
 5065      6E616D65 
 5065      3F7D
 5066 2d07 00       		.p2align 2 
 5067              	STRCQ_LBL:
 5068 2d08 06       		.byte  6
 5069 2d09 207B242C 		.ascii " {$,\"}"
 5069      227D
 5070 2d0f 00       		.p2align 2 
 5071              	VERSN_LBL:
 5072 2d10 0A       		.byte  10
 5073 2d11 207B7665 		.ascii " {version}"
 5073      7273696F 
 5073      6E7D
 5074 2d1b 00       		.p2align 2 
 5075              	
ARM GAS  stm32eforth.s 			page 96


 5076              	
 5077 2d1c AFF30080 		.p2align 10 
 5077      AFF30080 
 5077      AFF30080 
 5077      AFF30080 
 5077      AFF30080 
 5078              	USER_SPACE: // save user image here.  
 5079 3000 FFFFFFFF 		.word 0XFFFFFFFF
 5080              	
 5081              	
 5082              	  .end 
ARM GAS  stm32eforth.s 			page 97


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  stm32eforth.s 			page 98


board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
board/blue-pill/stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
board/blue-pill/stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
board/blue-pill/stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
board/blue-pill/stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
board/blue-pill/stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
board/blue-pill/stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
board/blue-pill/stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
board/blue-pill/stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
board/blue-pill/stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
board/blue-pill/stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
board/blue-pill/stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
board/blue-pill/stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
board/blue-pill/stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
board/blue-pill/stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
board/blue-pill/stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
board/blue-pill/stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
board/blue-pill/stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
board/blue-pill/stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
board/blue-pill/stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
board/blue-pill/stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
board/blue-pill/stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
board/blue-pill/stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
board/blue-pill/stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
board/blue-pill/stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
board/blue-pill/stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
board/blue-pill/stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
board/blue-pill/stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
board/blue-pill/stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
board/blue-pill/stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
board/blue-pill/stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
board/blue-pill/stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
board/blue-pill/stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
board/blue-pill/stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32eforth.s:83     *ABS*:0000000040011000 LED_GPIO
       stm32eforth.s:84     *ABS*:000000000000000d LED_PIN
       stm32eforth.s:85     *ABS*:0000000040013800 UART
       stm32eforth.s:88     *ABS*:0000000020004e80 SPP
       stm32eforth.s:89     *ABS*:0000000020004e80 TIBB
       stm32eforth.s:90     *ABS*:0000000020004f80 RPP
       stm32eforth.s:91     *ABS*:0000000020000140 UPP
       stm32eforth.s:92     *ABS*:0000000020000240 DTOP
       stm32eforth.s:93     *ABS*:0000000020004e00 DEND
       stm32eforth.s:94     *ABS*:0000000020000140 RAMOFFSET
       stm32eforth.s:95     *ABS*:0000000020005000 RAMEND
       stm32eforth.s:96     *ABS*:0000000008000c00 FLASHOFFSET
       stm32eforth.s:99     *ABS*:0000000017fff540 MAPOFFSET
ARM GAS  stm32eforth.s 			page 99


       stm32eforth.s:104    *ABS*:0000000000000004 SEED_OFS
       stm32eforth.s:105    *ABS*:0000000000000008 TICKS_OFS
       stm32eforth.s:106    *ABS*:000000000000000c TIMER_OFS
       stm32eforth.s:107    *ABS*:0000000000000010 TORAM_OFS
       stm32eforth.s:108    *ABS*:0000000000000014 IMG_SIGN_OFS
       stm32eforth.s:109    *ABS*:0000000000000018 BOOT_OFS
       stm32eforth.s:110    *ABS*:000000000000001c BASE_OFS
       stm32eforth.s:111    *ABS*:0000000000000020 TMP_OFS
       stm32eforth.s:112    *ABS*:0000000000000024 SPAN_OFS
       stm32eforth.s:113    *ABS*:0000000000000028 TOIN_OFS
       stm32eforth.s:114    *ABS*:000000000000002c NTIB_OFS
       stm32eforth.s:115    *ABS*:0000000000000030 TIB_OFS
       stm32eforth.s:116    *ABS*:0000000000000034 EVAL_OFS
       stm32eforth.s:117    *ABS*:0000000000000038 HLD_OFS
       stm32eforth.s:118    *ABS*:000000000000003c CTXT_OFS
       stm32eforth.s:119    *ABS*:0000000000000040 FORTH_CTOP_OFS
       stm32eforth.s:120    *ABS*:0000000000000044 USER_CTOP_OFS
       stm32eforth.s:121    *ABS*:0000000000000048 LASTN_OFS
       stm32eforth.s:122    *ABS*:000000000000004c VARS_END_OFS
       stm32eforth.s:124    *ABS*:0000000000000010 RX_QUEUE_SIZE
       stm32eforth.s:125    *ABS*:0000000000000050 RX_QUEUE_OFS
       stm32eforth.s:126    *ABS*:0000000000000060 RX_HEAD_OFS
       stm32eforth.s:127    *ABS*:0000000000000064 RX_TAIL_OFS
       stm32eforth.s:175    .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:369    .text.reset_handler:0000000000000000 reset_handler
       stm32eforth.s:266    .text.default_handler:0000000000000000 default_handler
       stm32eforth.s:283    .text.default_handler:0000000000000020 systick_handler
       stm32eforth.s:302    .text.default_handler:000000000000003c uart_rx_handler
       stm32eforth.s:255    .isr_vector:0000000000000130 isr_end
       stm32eforth.s:264    .text.default_handler:0000000000000000 $t
       stm32eforth.s:271    .text.default_handler:0000000000000008 exception_msg
       stm32eforth.s:344    .text.default_handler:00000000000000a4 uart_puts
       stm32eforth.s:325    .text.default_handler:000000000000007c reset_mcu
       stm32eforth.s:272    .text.default_handler:0000000000000008 $d
       stm32eforth.s:292    .text.default_handler:000000000000003a systick_exit
       stm32eforth.s:322    .text.default_handler:0000000000000076 user_reboot
       stm32eforth.s:335    .text.default_handler:0000000000000090 user_reboot_msg
       stm32eforth.s:333    .text.default_handler:000000000000008c scb_adr
       stm32eforth.s:334    .text.default_handler:000000000000008c $d
       stm32eforth.s:339    .text.default_handler:00000000000000a2 $t
       stm32eforth.s:367    .text.reset_handler:0000000000000000 $t
       stm32eforth.s:495    .text.reset_handler:0000000000000122 remap
       stm32eforth.s:393    .text.reset_handler:0000000000000040 init_devices
       stm32eforth.s:470    .text.reset_handler:00000000000000e0 uart_init
       stm32eforth.s:384    .text.reset_handler:0000000000000020 forth_init
       stm32eforth.s:380    .text.reset_handler:000000000000001c forth_entry
       stm32eforth.s:381    .text.reset_handler:000000000000001c $d
       stm32eforth.s:4969   .text.reset_handler:0000000000002b9c COLD
       stm32eforth.s:385    .text.reset_handler:0000000000000020 $t
       stm32eforth.s:406    .text.reset_handler:000000000000005e wait_hserdy
       stm32eforth.s:426    .text.reset_handler:0000000000000078 wait_pllrdy
       stm32eforth.s:438    .text.reset_handler:0000000000000098 wait_sws
       stm32eforth.s:527    .text.reset_handler:0000000000000188 remap_dest
       stm32eforth.s:525    .text.reset_handler:0000000000000184 remap_src
       stm32eforth.s:5001   .text.reset_handler:0000000000002c08 CTOP
       stm32eforth.s:573    .text.reset_handler:0000000000000400 UZERO
       stm32eforth.s:526    .text.reset_handler:0000000000000184 $d
ARM GAS  stm32eforth.s 			page 100


       stm32eforth.s:533    *ABS*:0000000000000001 VER
       stm32eforth.s:534    *ABS*:0000000000000000 EXT
       stm32eforth.s:538    *ABS*:0000000000000040 COMPO
       stm32eforth.s:539    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:540    *ABS*:00000000ffffff1f MASKK
       stm32eforth.s:542    *ABS*:0000000000000004 CELLL
       stm32eforth.s:543    *ABS*:000000000000000a BASEE
       stm32eforth.s:544    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:546    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:547    *ABS*:000000000000000a LF
       stm32eforth.s:548    *ABS*:000000000000000d CRR
       stm32eforth.s:549    *ABS*:000000000000001b ERR
       stm32eforth.s:550    *ABS*:0000000000000027 TIC
       stm32eforth.s:571    .text.reset_handler:000000000000018c $t
       stm32eforth.s:574    .text.reset_handler:0000000000000400 $d
       stm32eforth.s:4937   .text.reset_handler:0000000000002b28 HI
       stm32eforth.s:3275   .text.reset_handler:0000000000001a10 INTER
       stm32eforth.s:4966   .text.reset_handler:0000000000002b94 LASTN
       stm32eforth.s:594    .text.reset_handler:0000000000000454 ULAST
       stm32eforth.s:608    .text.reset_handler:000000000000046c $d
       stm32eforth.s:609    .text.reset_handler:0000000000000470 _RAND
       stm32eforth.s:612    .text.reset_handler:0000000000000478 RAND
       stm32eforth.s:1548   .text.reset_handler:0000000000000a40 SEED
       stm32eforth.s:835    .text.reset_handler:000000000000060c AT
       stm32eforth.s:929    .text.reset_handler:0000000000000694 DUPP
       stm32eforth.s:822    .text.reset_handler:00000000000005f8 STORE
       stm32eforth.s:1331   .text.reset_handler:00000000000008fc ABSS
       stm32eforth.s:940    .text.reset_handler:00000000000006a4 SWAP
       stm32eforth.s:1897   .text.reset_handler:0000000000000cec MODD
       stm32eforth.s:632    .text.reset_handler:00000000000004b8 $d
       stm32eforth.s:633    .text.reset_handler:00000000000004bc _PAUSE
       stm32eforth.s:635    .text.reset_handler:00000000000004c2 $t
       stm32eforth.s:636    .text.reset_handler:00000000000004c4 PAUSE
       stm32eforth.s:1570   .text.reset_handler:0000000000000a68 TIMER
       stm32eforth.s:640    .text.reset_handler:00000000000004d0 PAUSE_LOOP
       stm32eforth.s:782    .text.reset_handler:00000000000005c0 QBRAN
       stm32eforth.s:644    .text.reset_handler:00000000000004dc $d
       stm32eforth.s:647    .text.reset_handler:00000000000004e8 PAUSE_EXIT
       stm32eforth.s:800    .text.reset_handler:00000000000005d8 BRAN
       stm32eforth.s:645    .text.reset_handler:00000000000004e0 $t
       stm32eforth.s:646    .text.reset_handler:00000000000004e4 $d
       stm32eforth.s:648    .text.reset_handler:00000000000004e8 $t
       stm32eforth.s:652    .text.reset_handler:00000000000004ec $d
       stm32eforth.s:653    .text.reset_handler:00000000000004f0 _ULED
       stm32eforth.s:657    .text.reset_handler:00000000000004f8 ULED
       stm32eforth.s:665    .text.reset_handler:0000000000000510 ULED_OFF
       stm32eforth.s:671    .text.reset_handler:0000000000000514 $d
       stm32eforth.s:672    .text.reset_handler:0000000000000518 _QRX
       stm32eforth.s:675    .text.reset_handler:0000000000000520 QKEY
       stm32eforth.s:676    .text.reset_handler:0000000000000520 QRX
       stm32eforth.s:696    .text.reset_handler:000000000000054c $d
       stm32eforth.s:697    .text.reset_handler:0000000000000550 _TXSTO
       stm32eforth.s:700    .text.reset_handler:0000000000000558 TXSTO
       stm32eforth.s:701    .text.reset_handler:0000000000000558 EMIT
       stm32eforth.s:702    .text.reset_handler:0000000000000558 TECHO
       stm32eforth.s:717    .text.reset_handler:0000000000000570 $d
       stm32eforth.s:718    .text.reset_handler:0000000000000574 _NOP
ARM GAS  stm32eforth.s 			page 101


       stm32eforth.s:720    .text.reset_handler:0000000000000578 $t
       stm32eforth.s:721    .text.reset_handler:0000000000000578 NOP
       stm32eforth.s:732    .text.reset_handler:000000000000057a DOLIT
       stm32eforth.s:742    .text.reset_handler:000000000000058c $d
       stm32eforth.s:743    .text.reset_handler:0000000000000590 _EXECU
       stm32eforth.s:745    .text.reset_handler:0000000000000598 $t
       stm32eforth.s:746    .text.reset_handler:0000000000000598 EXECU
       stm32eforth.s:760    .text.reset_handler:00000000000005a2 DONXT
       stm32eforth.s:767    .text.reset_handler:00000000000005b0 NEXT1
       stm32eforth.s:789    .text.reset_handler:00000000000005d2 QBRAN1
       stm32eforth.s:808    .text.reset_handler:00000000000005e2 $d
       stm32eforth.s:809    .text.reset_handler:00000000000005e6 _EXIT
       stm32eforth.s:812    .text.reset_handler:00000000000005ec EXIT
       stm32eforth.s:818    .text.reset_handler:00000000000005f0 $d
       stm32eforth.s:819    .text.reset_handler:00000000000005f4 _STORE
       stm32eforth.s:821    .text.reset_handler:00000000000005f6 $t
       stm32eforth.s:831    .text.reset_handler:0000000000000604 $d
       stm32eforth.s:832    .text.reset_handler:0000000000000608 _AT
       stm32eforth.s:834    .text.reset_handler:000000000000060a $t
       stm32eforth.s:842    .text.reset_handler:0000000000000610 $d
       stm32eforth.s:843    .text.reset_handler:0000000000000614 _CSTOR
       stm32eforth.s:846    .text.reset_handler:0000000000000618 CSTOR
       stm32eforth.s:855    .text.reset_handler:0000000000000624 $d
       stm32eforth.s:856    .text.reset_handler:0000000000000628 _CAT
       stm32eforth.s:859    .text.reset_handler:000000000000062c CAT
       stm32eforth.s:866    .text.reset_handler:0000000000000630 $d
       stm32eforth.s:867    .text.reset_handler:0000000000000634 _RFROM
       stm32eforth.s:870    .text.reset_handler:0000000000000638 RFROM
       stm32eforth.s:878    .text.reset_handler:0000000000000642 $d
       stm32eforth.s:879    .text.reset_handler:0000000000000646 _RAT
       stm32eforth.s:882    .text.reset_handler:000000000000064c RAT
       stm32eforth.s:890    .text.reset_handler:0000000000000654 $d
       stm32eforth.s:891    .text.reset_handler:0000000000000658 _TOR
       stm32eforth.s:894    .text.reset_handler:000000000000065c TOR
       stm32eforth.s:902    .text.reset_handler:0000000000000666 $d
       stm32eforth.s:903    .text.reset_handler:000000000000066a _SPAT
       stm32eforth.s:905    .text.reset_handler:000000000000066e $t
       stm32eforth.s:906    .text.reset_handler:0000000000000670 SPAT
       stm32eforth.s:914    .text.reset_handler:0000000000000678 $d
       stm32eforth.s:915    .text.reset_handler:000000000000067c _DROP
       stm32eforth.s:918    .text.reset_handler:0000000000000684 DROP
       stm32eforth.s:925    .text.reset_handler:000000000000068a $d
       stm32eforth.s:926    .text.reset_handler:000000000000068e _DUPP
       stm32eforth.s:928    .text.reset_handler:0000000000000692 $t
       stm32eforth.s:936    .text.reset_handler:000000000000069a $d
       stm32eforth.s:937    .text.reset_handler:000000000000069e _SWAP
       stm32eforth.s:949    .text.reset_handler:00000000000006ac $d
       stm32eforth.s:950    .text.reset_handler:00000000000006b0 _OVER
       stm32eforth.s:953    .text.reset_handler:00000000000006b8 OVER
       stm32eforth.s:961    .text.reset_handler:00000000000006c0 $d
       stm32eforth.s:962    .text.reset_handler:00000000000006c4 _ZLESS
       stm32eforth.s:965    .text.reset_handler:00000000000006c8 ZLESS
       stm32eforth.s:973    .text.reset_handler:00000000000006d2 $d
       stm32eforth.s:974    .text.reset_handler:00000000000006d6 _ANDD
       stm32eforth.s:976    .text.reset_handler:00000000000006da $t
       stm32eforth.s:977    .text.reset_handler:00000000000006dc ANDD
       stm32eforth.s:986    .text.reset_handler:00000000000006e8 $d
ARM GAS  stm32eforth.s 			page 102


       stm32eforth.s:987    .text.reset_handler:00000000000006ec _ORR
       stm32eforth.s:990    .text.reset_handler:00000000000006f0 ORR
       stm32eforth.s:999    .text.reset_handler:00000000000006fc $d
       stm32eforth.s:1000   .text.reset_handler:0000000000000700 _XORR
       stm32eforth.s:1002   .text.reset_handler:0000000000000704 $t
       stm32eforth.s:1003   .text.reset_handler:0000000000000704 XORR
       stm32eforth.s:1012   .text.reset_handler:0000000000000710 $d
       stm32eforth.s:1013   .text.reset_handler:0000000000000714 _UPLUS
       stm32eforth.s:1015   .text.reset_handler:0000000000000718 $t
       stm32eforth.s:1016   .text.reset_handler:0000000000000718 UPLUS
       stm32eforth.s:1027   .text.reset_handler:0000000000000728 $d
       stm32eforth.s:1028   .text.reset_handler:000000000000072c _RSHIFT
       stm32eforth.s:1031   .text.reset_handler:0000000000000734 RSHIFT
       stm32eforth.s:1039   .text.reset_handler:000000000000073e $d
       stm32eforth.s:1040   .text.reset_handler:0000000000000742 _LSHIFT
       stm32eforth.s:1043   .text.reset_handler:000000000000074c LSHIFT
       stm32eforth.s:1051   .text.reset_handler:0000000000000756 $d
       stm32eforth.s:1052   .text.reset_handler:000000000000075a _PLUS
       stm32eforth.s:1054   .text.reset_handler:000000000000075c $t
       stm32eforth.s:1055   .text.reset_handler:000000000000075c PLUS
       stm32eforth.s:1063   .text.reset_handler:0000000000000764 $d
       stm32eforth.s:1064   .text.reset_handler:0000000000000768 _SUBB
       stm32eforth.s:1066   .text.reset_handler:000000000000076a $t
       stm32eforth.s:1067   .text.reset_handler:000000000000076c SUBB
       stm32eforth.s:1075   .text.reset_handler:0000000000000776 $d
       stm32eforth.s:1076   .text.reset_handler:000000000000077a _STAR
       stm32eforth.s:1078   .text.reset_handler:000000000000077c $t
       stm32eforth.s:1079   .text.reset_handler:000000000000077c STAR
       stm32eforth.s:1087   .text.reset_handler:0000000000000786 $d
       stm32eforth.s:1088   .text.reset_handler:000000000000078a _UMSTA
       stm32eforth.s:1090   .text.reset_handler:000000000000078e $t
       stm32eforth.s:1091   .text.reset_handler:0000000000000790 UMSTA
       stm32eforth.s:1101   .text.reset_handler:000000000000079c $d
       stm32eforth.s:1102   .text.reset_handler:00000000000007a0 _MSTAR
       stm32eforth.s:1105   .text.reset_handler:00000000000007a4 MSTAR
       stm32eforth.s:1115   .text.reset_handler:00000000000007b0 $d
       stm32eforth.s:1116   .text.reset_handler:00000000000007b4 _ONEP
       stm32eforth.s:1119   .text.reset_handler:00000000000007b8 ONEP
       stm32eforth.s:1126   .text.reset_handler:00000000000007be $d
       stm32eforth.s:1127   .text.reset_handler:00000000000007c2 _ONEM
       stm32eforth.s:1130   .text.reset_handler:00000000000007c8 ONEM
       stm32eforth.s:1137   .text.reset_handler:00000000000007ce $d
       stm32eforth.s:1138   .text.reset_handler:00000000000007d2 _TWOP
       stm32eforth.s:1141   .text.reset_handler:00000000000007d8 TWOP
       stm32eforth.s:1148   .text.reset_handler:00000000000007de $d
       stm32eforth.s:1149   .text.reset_handler:00000000000007e2 _TWOM
       stm32eforth.s:1152   .text.reset_handler:00000000000007e8 TWOM
       stm32eforth.s:1159   .text.reset_handler:00000000000007ee $d
       stm32eforth.s:1160   .text.reset_handler:00000000000007f2 _CELLP
       stm32eforth.s:1162   .text.reset_handler:00000000000007f8 $t
       stm32eforth.s:1163   .text.reset_handler:00000000000007f8 CELLP
       stm32eforth.s:1170   .text.reset_handler:00000000000007fe $d
       stm32eforth.s:1171   .text.reset_handler:0000000000000802 _CELLM
       stm32eforth.s:1173   .text.reset_handler:0000000000000808 $t
       stm32eforth.s:1174   .text.reset_handler:0000000000000808 CELLM
       stm32eforth.s:1181   .text.reset_handler:000000000000080e $d
       stm32eforth.s:1182   .text.reset_handler:0000000000000812 _BLANK
ARM GAS  stm32eforth.s 			page 103


       stm32eforth.s:1185   .text.reset_handler:0000000000000818 BLANK
       stm32eforth.s:1193   .text.reset_handler:0000000000000822 $d
       stm32eforth.s:1194   .text.reset_handler:0000000000000826 _CELLS
       stm32eforth.s:1196   .text.reset_handler:000000000000082c $t
       stm32eforth.s:1197   .text.reset_handler:000000000000082c CELLS
       stm32eforth.s:1204   .text.reset_handler:0000000000000832 $d
       stm32eforth.s:1205   .text.reset_handler:0000000000000836 _CELLSL
       stm32eforth.s:1207   .text.reset_handler:000000000000083c $t
       stm32eforth.s:1208   .text.reset_handler:000000000000083c CELLSL
       stm32eforth.s:1215   .text.reset_handler:0000000000000842 $d
       stm32eforth.s:1216   .text.reset_handler:0000000000000846 _TWOST
       stm32eforth.s:1219   .text.reset_handler:000000000000084c TWOST
       stm32eforth.s:1226   .text.reset_handler:0000000000000852 $d
       stm32eforth.s:1227   .text.reset_handler:0000000000000856 _TWOSL
       stm32eforth.s:1230   .text.reset_handler:000000000000085c TWOSL
       stm32eforth.s:1237   .text.reset_handler:0000000000000862 $d
       stm32eforth.s:1238   .text.reset_handler:0000000000000866 _QDUP
       stm32eforth.s:1241   .text.reset_handler:000000000000086c QDUP
       stm32eforth.s:1250   .text.reset_handler:0000000000000876 $d
       stm32eforth.s:1251   .text.reset_handler:000000000000087a _ROT
       stm32eforth.s:1253   .text.reset_handler:000000000000087e $t
       stm32eforth.s:1254   .text.reset_handler:0000000000000880 ROT
       stm32eforth.s:1264   .text.reset_handler:000000000000088a $d
       stm32eforth.s:1265   .text.reset_handler:000000000000088e _DDROP
       stm32eforth.s:1267   .text.reset_handler:0000000000000894 $t
       stm32eforth.s:1268   .text.reset_handler:0000000000000894 DDROP
       stm32eforth.s:1276   .text.reset_handler:000000000000089e $d
       stm32eforth.s:1277   .text.reset_handler:00000000000008a2 _DDUP
       stm32eforth.s:1280   .text.reset_handler:00000000000008a8 DDUP
       stm32eforth.s:1289   .text.reset_handler:00000000000008b4 $d
       stm32eforth.s:1290   .text.reset_handler:00000000000008b8 _DPLUS
       stm32eforth.s:1293   .text.reset_handler:00000000000008bc DPLUS
       stm32eforth.s:1305   .text.reset_handler:00000000000008d0 $d
       stm32eforth.s:1306   .text.reset_handler:00000000000008d4 _INVER
       stm32eforth.s:1308   .text.reset_handler:00000000000008d8 $t
       stm32eforth.s:1309   .text.reset_handler:00000000000008d8 INVER
       stm32eforth.s:1316   .text.reset_handler:00000000000008de $d
       stm32eforth.s:1317   .text.reset_handler:00000000000008e2 _NEGAT
       stm32eforth.s:1320   .text.reset_handler:00000000000008ec NEGAT
       stm32eforth.s:1327   .text.reset_handler:00000000000008f2 $d
       stm32eforth.s:1328   .text.reset_handler:00000000000008f6 _ABSS
       stm32eforth.s:1330   .text.reset_handler:00000000000008fa $t
       stm32eforth.s:1340   .text.reset_handler:0000000000000906 $d
       stm32eforth.s:1341   .text.reset_handler:000000000000090a _ZEQUAL
       stm32eforth.s:1344   .text.reset_handler:0000000000000910 ZEQUAL
       stm32eforth.s:1354   .text.reset_handler:000000000000091e $d
       stm32eforth.s:1355   .text.reset_handler:0000000000000922 _EQUAL
       stm32eforth.s:1357   .text.reset_handler:0000000000000924 $t
       stm32eforth.s:1358   .text.reset_handler:0000000000000924 EQUAL
       stm32eforth.s:1369   .text.reset_handler:0000000000000934 $d
       stm32eforth.s:1370   .text.reset_handler:0000000000000938 _ULESS
       stm32eforth.s:1373   .text.reset_handler:000000000000093c ULESS
       stm32eforth.s:1384   .text.reset_handler:000000000000094c $d
       stm32eforth.s:1385   .text.reset_handler:0000000000000950 _LESS
       stm32eforth.s:1387   .text.reset_handler:0000000000000952 $t
       stm32eforth.s:1388   .text.reset_handler:0000000000000954 LESS
       stm32eforth.s:1399   .text.reset_handler:0000000000000964 $d
ARM GAS  stm32eforth.s 			page 104


       stm32eforth.s:1400   .text.reset_handler:0000000000000968 _GREAT
       stm32eforth.s:1402   .text.reset_handler:000000000000096a $t
       stm32eforth.s:1403   .text.reset_handler:000000000000096c GREAT
       stm32eforth.s:1414   .text.reset_handler:000000000000097c $d
       stm32eforth.s:1415   .text.reset_handler:0000000000000980 _MAX
       stm32eforth.s:1417   .text.reset_handler:0000000000000984 $t
       stm32eforth.s:1418   .text.reset_handler:0000000000000984 MAX
       stm32eforth.s:1428   .text.reset_handler:0000000000000990 $d
       stm32eforth.s:1429   .text.reset_handler:0000000000000994 _MIN
       stm32eforth.s:1431   .text.reset_handler:0000000000000998 $t
       stm32eforth.s:1432   .text.reset_handler:0000000000000998 MIN
       stm32eforth.s:1442   .text.reset_handler:00000000000009a4 $d
       stm32eforth.s:1443   .text.reset_handler:00000000000009a8 _PSTOR
       stm32eforth.s:1446   .text.reset_handler:00000000000009ac PSTOR
       stm32eforth.s:1457   .text.reset_handler:00000000000009bc $d
       stm32eforth.s:1458   .text.reset_handler:00000000000009c0 _DSTOR
       stm32eforth.s:1461   .text.reset_handler:00000000000009c4 DSTOR
       stm32eforth.s:1472   .text.reset_handler:00000000000009d8 $d
       stm32eforth.s:1473   .text.reset_handler:00000000000009dc _DAT
       stm32eforth.s:1476   .text.reset_handler:00000000000009e0 DAT
       stm32eforth.s:1485   .text.reset_handler:00000000000009ea $d
       stm32eforth.s:1486   .text.reset_handler:00000000000009ee _COUNT
       stm32eforth.s:1488   .text.reset_handler:00000000000009f4 $t
       stm32eforth.s:1489   .text.reset_handler:00000000000009f4 COUNT
       stm32eforth.s:1498   .text.reset_handler:0000000000000a00 $d
       stm32eforth.s:1499   .text.reset_handler:0000000000000a04 _DNEGA
       stm32eforth.s:1501   .text.reset_handler:0000000000000a0c $t
       stm32eforth.s:1502   .text.reset_handler:0000000000000a0c DNEGA
       stm32eforth.s:1520   .text.reset_handler:0000000000000a1c DOVAR
       stm32eforth.s:1532   .text.reset_handler:0000000000000a28 DOCON
       stm32eforth.s:1544   .text.reset_handler:0000000000000a34 $d
       stm32eforth.s:1545   .text.reset_handler:0000000000000a38 _SEED
       stm32eforth.s:1555   .text.reset_handler:0000000000000a4a $d
       stm32eforth.s:1556   .text.reset_handler:0000000000000a4e _MSEC
       stm32eforth.s:1559   .text.reset_handler:0000000000000a54 MSEC
       stm32eforth.s:1566   .text.reset_handler:0000000000000a5e $d
       stm32eforth.s:1567   .text.reset_handler:0000000000000a62 _TIMER
       stm32eforth.s:1569   .text.reset_handler:0000000000000a68 $t
       stm32eforth.s:1578   .text.reset_handler:0000000000000a72 $d
       stm32eforth.s:1579   .text.reset_handler:0000000000000a76 _TORAM
       stm32eforth.s:1582   .text.reset_handler:0000000000000a7c TORAM
       stm32eforth.s:1590   .text.reset_handler:0000000000000a86 $d
       stm32eforth.s:1591   .text.reset_handler:0000000000000a8a _TBOOT
       stm32eforth.s:1593   .text.reset_handler:0000000000000a90 $t
       stm32eforth.s:1594   .text.reset_handler:0000000000000a90 TBOOT
       stm32eforth.s:1602   .text.reset_handler:0000000000000a9a $d
       stm32eforth.s:1603   .text.reset_handler:0000000000000a9e _BASE
       stm32eforth.s:1606   .text.reset_handler:0000000000000aa4 BASE
       stm32eforth.s:1618   .text.reset_handler:0000000000000aae TEMP
       stm32eforth.s:1626   .text.reset_handler:0000000000000ab8 $d
       stm32eforth.s:1627   .text.reset_handler:0000000000000abc _SPAN
       stm32eforth.s:1630   .text.reset_handler:0000000000000ac4 SPAN
       stm32eforth.s:1638   .text.reset_handler:0000000000000ace $d
       stm32eforth.s:1639   .text.reset_handler:0000000000000ad2 _INN
       stm32eforth.s:1641   .text.reset_handler:0000000000000ad6 $t
       stm32eforth.s:1642   .text.reset_handler:0000000000000ad8 INN
       stm32eforth.s:1650   .text.reset_handler:0000000000000ae2 $d
ARM GAS  stm32eforth.s 			page 105


       stm32eforth.s:1651   .text.reset_handler:0000000000000ae6 _NTIB
       stm32eforth.s:1654   .text.reset_handler:0000000000000aec NTIB
       stm32eforth.s:1662   .text.reset_handler:0000000000000af6 $d
       stm32eforth.s:1663   .text.reset_handler:0000000000000afa _TEVAL
       stm32eforth.s:1665   .text.reset_handler:0000000000000b00 $t
       stm32eforth.s:1666   .text.reset_handler:0000000000000b00 TEVAL
       stm32eforth.s:1674   .text.reset_handler:0000000000000b0a $d
       stm32eforth.s:1675   .text.reset_handler:0000000000000b0e _HLD
       stm32eforth.s:1677   .text.reset_handler:0000000000000b12 $t
       stm32eforth.s:1678   .text.reset_handler:0000000000000b14 HLD
       stm32eforth.s:1686   .text.reset_handler:0000000000000b1e $d
       stm32eforth.s:1687   .text.reset_handler:0000000000000b22 _CNTXT
       stm32eforth.s:1689   .text.reset_handler:0000000000000b2a $t
       stm32eforth.s:1690   .text.reset_handler:0000000000000b2c CNTXT
       stm32eforth.s:1691   .text.reset_handler:0000000000000b2c CRRNT
       stm32eforth.s:1699   .text.reset_handler:0000000000000b36 $d
       stm32eforth.s:1700   .text.reset_handler:0000000000000b3a _CP
       stm32eforth.s:1703   .text.reset_handler:0000000000000b40 CPP
       stm32eforth.s:1710   .text.reset_handler:0000000000000b4a $d
       stm32eforth.s:1711   .text.reset_handler:0000000000000b4e _FCP
       stm32eforth.s:1713   .text.reset_handler:0000000000000b52 $t
       stm32eforth.s:1714   .text.reset_handler:0000000000000b54 FCP
       stm32eforth.s:1722   .text.reset_handler:0000000000000b5e $d
       stm32eforth.s:1723   .text.reset_handler:0000000000000b62 _LAST
       stm32eforth.s:1726   .text.reset_handler:0000000000000b68 LAST
       stm32eforth.s:1737   .text.reset_handler:0000000000000b72 $d
       stm32eforth.s:1738   .text.reset_handler:0000000000000b76 _USER_BGN
       stm32eforth.s:1741   .text.reset_handler:0000000000000b84 USER_BEGIN
       stm32eforth.s:1745   .text.reset_handler:0000000000000b8c USR_BGN_ADR
       stm32eforth.s:1746   .text.reset_handler:0000000000000b8c $d
       stm32eforth.s:1751   .text.reset_handler:0000000000000b94 _USER_END
       stm32eforth.s:1754   .text.reset_handler:0000000000000ba0 USER_END
       stm32eforth.s:1761   .text.reset_handler:0000000000000bae $d
       stm32eforth.s:1762   .text.reset_handler:0000000000000bb2 _IMG_ADR
       stm32eforth.s:1764   .text.reset_handler:0000000000000bba $t
       stm32eforth.s:1765   .text.reset_handler:0000000000000bbc IMG_ADR
       stm32eforth.s:1769   .text.reset_handler:0000000000000bc4 USR_IMG_ADR
       stm32eforth.s:1770   .text.reset_handler:0000000000000bc4 $d
       stm32eforth.s:5078   .text.reset_handler:0000000000003000 USER_SPACE
       stm32eforth.s:1774   .text.reset_handler:0000000000000bcc _IMG_SIGN
       stm32eforth.s:1777   .text.reset_handler:0000000000000bd8 IMG_SIGN
       stm32eforth.s:1789   .text.reset_handler:0000000000000be2 $d
       stm32eforth.s:1790   .text.reset_handler:0000000000000be6 _WITHI
       stm32eforth.s:1793   .text.reset_handler:0000000000000bf0 WITHI
       stm32eforth.s:1808   .text.reset_handler:0000000000000c10 $d
       stm32eforth.s:1809   .text.reset_handler:0000000000000c14 _UMMOD
       stm32eforth.s:1812   .text.reset_handler:0000000000000c1c UMMOD
       stm32eforth.s:1816   .text.reset_handler:0000000000000c26 UMMOD0
       stm32eforth.s:1823   .text.reset_handler:0000000000000c36 UMMOD1
       stm32eforth.s:1829   .text.reset_handler:0000000000000c40 UMMOD2
       stm32eforth.s:1839   .text.reset_handler:0000000000000c4a $d
       stm32eforth.s:1840   .text.reset_handler:0000000000000c4e _MSMOD
       stm32eforth.s:1842   .text.reset_handler:0000000000000c54 $t
       stm32eforth.s:1843   .text.reset_handler:0000000000000c54 MSMOD
       stm32eforth.s:1850   .text.reset_handler:0000000000000c6c $d
       stm32eforth.s:1855   .text.reset_handler:0000000000000c80 MMOD1
       stm32eforth.s:1851   .text.reset_handler:0000000000000c70 $t
ARM GAS  stm32eforth.s 			page 106


       stm32eforth.s:1860   .text.reset_handler:0000000000000c90 $d
       stm32eforth.s:1863   .text.reset_handler:0000000000000c9c MMOD2
       stm32eforth.s:1861   .text.reset_handler:0000000000000c94 $t
       stm32eforth.s:1868   .text.reset_handler:0000000000000cac $d
       stm32eforth.s:1872   .text.reset_handler:0000000000000cbc MMOD3
       stm32eforth.s:1869   .text.reset_handler:0000000000000cb0 $t
       stm32eforth.s:1878   .text.reset_handler:0000000000000cc0 $d
       stm32eforth.s:1879   .text.reset_handler:0000000000000cc4 _SLMOD
       stm32eforth.s:1882   .text.reset_handler:0000000000000ccc SLMOD
       stm32eforth.s:1893   .text.reset_handler:0000000000000ce4 $d
       stm32eforth.s:1894   .text.reset_handler:0000000000000ce8 _MODD
       stm32eforth.s:1896   .text.reset_handler:0000000000000cec $t
       stm32eforth.s:1906   .text.reset_handler:0000000000000cfc $d
       stm32eforth.s:1907   .text.reset_handler:0000000000000d00 _SLASH
       stm32eforth.s:1909   .text.reset_handler:0000000000000d02 $t
       stm32eforth.s:1910   .text.reset_handler:0000000000000d04 SLASH
       stm32eforth.s:1920   .text.reset_handler:0000000000000d18 $d
       stm32eforth.s:1921   .text.reset_handler:0000000000000d1c _SSMOD
       stm32eforth.s:1923   .text.reset_handler:0000000000000d22 $t
       stm32eforth.s:1924   .text.reset_handler:0000000000000d24 SSMOD
       stm32eforth.s:1935   .text.reset_handler:0000000000000d3c $d
       stm32eforth.s:1936   .text.reset_handler:0000000000000d40 _STASL
       stm32eforth.s:1939   .text.reset_handler:0000000000000d44 STASL
       stm32eforth.s:1952   .text.reset_handler:0000000000000d58 $d
       stm32eforth.s:1953   .text.reset_handler:0000000000000d5c _ALGND
       stm32eforth.s:1955   .text.reset_handler:0000000000000d64 $t
       stm32eforth.s:1956   .text.reset_handler:0000000000000d64 ALGND
       stm32eforth.s:1965   .text.reset_handler:0000000000000d72 $d
       stm32eforth.s:1966   .text.reset_handler:0000000000000d76 _TCHAR
       stm32eforth.s:1968   .text.reset_handler:0000000000000d7c $t
       stm32eforth.s:1969   .text.reset_handler:0000000000000d7c TCHAR
       stm32eforth.s:1972   .text.reset_handler:0000000000000d84 $d
       stm32eforth.s:1973   .text.reset_handler:0000000000000d88 $t
       stm32eforth.s:1977   .text.reset_handler:0000000000000d98 $d
       stm32eforth.s:1978   .text.reset_handler:0000000000000d9c $t
       stm32eforth.s:1981   .text.reset_handler:0000000000000da8 $d
       stm32eforth.s:1985   .text.reset_handler:0000000000000db8 TCHA1
       stm32eforth.s:1982   .text.reset_handler:0000000000000dac $t
       stm32eforth.s:1984   .text.reset_handler:0000000000000db4 $d
       stm32eforth.s:1986   .text.reset_handler:0000000000000db8 $t
       stm32eforth.s:1991   .text.reset_handler:0000000000000dbc $d
       stm32eforth.s:1992   .text.reset_handler:0000000000000dc0 _DEPTH
       stm32eforth.s:1994   .text.reset_handler:0000000000000dc6 $t
       stm32eforth.s:1995   .text.reset_handler:0000000000000dc8 DEPTH
       stm32eforth.s:2005   .text.reset_handler:0000000000000dda $d
       stm32eforth.s:2006   .text.reset_handler:0000000000000dde _PICK
       stm32eforth.s:2009   .text.reset_handler:0000000000000de4 PICK
       stm32eforth.s:2024   .text.reset_handler:0000000000000e00 $d
       stm32eforth.s:2025   .text.reset_handler:0000000000000e04 _HERE
       stm32eforth.s:2028   .text.reset_handler:0000000000000e0c HERE
       stm32eforth.s:2037   .text.reset_handler:0000000000000e1c $d
       stm32eforth.s:2038   .text.reset_handler:0000000000000e20 _PAD
       stm32eforth.s:2040   .text.reset_handler:0000000000000e24 $t
       stm32eforth.s:2041   .text.reset_handler:0000000000000e24 PAD
       stm32eforth.s:2050   .text.reset_handler:0000000000000e34 $d
       stm32eforth.s:2051   .text.reset_handler:0000000000000e38 _TIB
       stm32eforth.s:2053   .text.reset_handler:0000000000000e3c $t
ARM GAS  stm32eforth.s 			page 107


       stm32eforth.s:2054   .text.reset_handler:0000000000000e3c TIB
       stm32eforth.s:2062   .text.reset_handler:0000000000000e44 $d
       stm32eforth.s:2063   .text.reset_handler:0000000000000e48 _ATEXE
       stm32eforth.s:2066   .text.reset_handler:0000000000000e54 ATEXE
       stm32eforth.s:2078   .text.reset_handler:0000000000000e66 $d
       stm32eforth.s:2079   .text.reset_handler:0000000000000e6a _CMOVE
       stm32eforth.s:2081   .text.reset_handler:0000000000000e70 $t
       stm32eforth.s:2082   .text.reset_handler:0000000000000e70 CMOVE
       stm32eforth.s:2089   .text.reset_handler:0000000000000e82 CMOV1
       stm32eforth.s:2086   .text.reset_handler:0000000000000e7a CMOV0
       stm32eforth.s:2094   .text.reset_handler:0000000000000e8c CMOV2
       stm32eforth.s:2101   .text.reset_handler:0000000000000e92 $d
       stm32eforth.s:2102   .text.reset_handler:0000000000000e96 _MOVE
       stm32eforth.s:2105   .text.reset_handler:0000000000000e9c MOVE
       stm32eforth.s:2113   .text.reset_handler:0000000000000eb2 MOVE1
       stm32eforth.s:2110   .text.reset_handler:0000000000000eaa MOVE0
       stm32eforth.s:2118   .text.reset_handler:0000000000000ebc MOVE2
       stm32eforth.s:2125   .text.reset_handler:0000000000000ec2 $d
       stm32eforth.s:2126   .text.reset_handler:0000000000000ec6 _FILL
       stm32eforth.s:2129   .text.reset_handler:0000000000000ecc FILL
       stm32eforth.s:2132   .text.reset_handler:0000000000000ed4 FILL0
       stm32eforth.s:2135   .text.reset_handler:0000000000000ed8 FILL1
       stm32eforth.s:2141   .text.reset_handler:0000000000000ee6 FILL2
       stm32eforth.s:2148   .text.reset_handler:0000000000000eec $d
       stm32eforth.s:2149   .text.reset_handler:0000000000000ef0 _PACKS
       stm32eforth.s:2152   .text.reset_handler:0000000000000ef8 PACKS
       stm32eforth.s:2161   .text.reset_handler:0000000000000f18 $d
       stm32eforth.s:2162   .text.reset_handler:0000000000000f1c $t
       stm32eforth.s:2164   .text.reset_handler:0000000000000f24 $d
       stm32eforth.s:2165   .text.reset_handler:0000000000000f28 $t
       stm32eforth.s:2182   .text.reset_handler:0000000000000f50 $d
       stm32eforth.s:2183   .text.reset_handler:0000000000000f54 _DIGIT
       stm32eforth.s:2185   .text.reset_handler:0000000000000f5a $t
       stm32eforth.s:2186   .text.reset_handler:0000000000000f5c DIGIT
       stm32eforth.s:2189   .text.reset_handler:0000000000000f64 $d
       stm32eforth.s:2190   .text.reset_handler:0000000000000f68 $t
       stm32eforth.s:2200   .text.reset_handler:0000000000000f80 $d
       stm32eforth.s:2201   .text.reset_handler:0000000000000f84 _EXTRC
       stm32eforth.s:2203   .text.reset_handler:0000000000000f8c $t
       stm32eforth.s:2204   .text.reset_handler:0000000000000f8c EXTRC
       stm32eforth.s:2207   .text.reset_handler:0000000000000f94 $d
       stm32eforth.s:2208   .text.reset_handler:0000000000000f98 $t
       stm32eforth.s:2217   .text.reset_handler:0000000000000fac $d
       stm32eforth.s:2218   .text.reset_handler:0000000000000fb0 _BDIGS
       stm32eforth.s:2221   .text.reset_handler:0000000000000fb4 BDIGS
       stm32eforth.s:2231   .text.reset_handler:0000000000000fc8 $d
       stm32eforth.s:2232   .text.reset_handler:0000000000000fcc _HOLD
       stm32eforth.s:2235   .text.reset_handler:0000000000000fd4 HOLD
       stm32eforth.s:2249   .text.reset_handler:0000000000000ff8 $d
       stm32eforth.s:2250   .text.reset_handler:0000000000000ffc _DIG
       stm32eforth.s:2252   .text.reset_handler:0000000000000ffe $t
       stm32eforth.s:2253   .text.reset_handler:0000000000001000 DIG
       stm32eforth.s:2264   .text.reset_handler:0000000000001018 $d
       stm32eforth.s:2265   .text.reset_handler:000000000000101c _DIGS
       stm32eforth.s:2268   .text.reset_handler:0000000000001020 DIGS
       stm32eforth.s:2270   .text.reset_handler:0000000000001024 DIGS1
       stm32eforth.s:2274   .text.reset_handler:0000000000001030 $d
ARM GAS  stm32eforth.s 			page 108


       stm32eforth.s:2276   .text.reset_handler:0000000000001036 DIGS2
       stm32eforth.s:2275   .text.reset_handler:0000000000001034 $t
       stm32eforth.s:2282   .text.reset_handler:000000000000103a $d
       stm32eforth.s:2283   .text.reset_handler:000000000000103e _SIGN
       stm32eforth.s:2286   .text.reset_handler:0000000000001044 SIGN
       stm32eforth.s:2290   .text.reset_handler:0000000000001050 $d
       stm32eforth.s:2294   .text.reset_handler:0000000000001060 SIGN1
       stm32eforth.s:2291   .text.reset_handler:0000000000001054 $t
       stm32eforth.s:2292   .text.reset_handler:0000000000001058 $d
       stm32eforth.s:2293   .text.reset_handler:000000000000105c $t
       stm32eforth.s:2300   .text.reset_handler:0000000000001064 $d
       stm32eforth.s:2301   .text.reset_handler:0000000000001068 _EDIGS
       stm32eforth.s:2304   .text.reset_handler:000000000000106c EDIGS
       stm32eforth.s:2321   .text.reset_handler:000000000000108c STRR
       stm32eforth.s:2336   .text.reset_handler:00000000000010b4 $d
       stm32eforth.s:2337   .text.reset_handler:00000000000010b8 _HEX
       stm32eforth.s:2339   .text.reset_handler:00000000000010bc $t
       stm32eforth.s:2340   .text.reset_handler:00000000000010bc HEX
       stm32eforth.s:2343   .text.reset_handler:00000000000010c4 $d
       stm32eforth.s:2344   .text.reset_handler:00000000000010c8 $t
       stm32eforth.s:2351   .text.reset_handler:00000000000010d4 $d
       stm32eforth.s:2352   .text.reset_handler:00000000000010d8 _DECIM
       stm32eforth.s:2354   .text.reset_handler:00000000000010e0 $t
       stm32eforth.s:2355   .text.reset_handler:00000000000010e0 DECIM
       stm32eforth.s:2358   .text.reset_handler:00000000000010e8 $d
       stm32eforth.s:2359   .text.reset_handler:00000000000010ec $t
       stm32eforth.s:2369   .text.reset_handler:00000000000010f8 $d
       stm32eforth.s:2370   .text.reset_handler:00000000000010fc _DIGTQ
       stm32eforth.s:2373   .text.reset_handler:0000000000001104 DIGTQ
       stm32eforth.s:2377   .text.reset_handler:0000000000001110 $d
       stm32eforth.s:2378   .text.reset_handler:0000000000001114 $t
       stm32eforth.s:2380   .text.reset_handler:000000000000111c $d
       stm32eforth.s:2381   .text.reset_handler:0000000000001120 $t
       stm32eforth.s:2384   .text.reset_handler:000000000000112c $d
       stm32eforth.s:2393   .text.reset_handler:0000000000001150 DGTQ1
       stm32eforth.s:2385   .text.reset_handler:0000000000001130 $t
       stm32eforth.s:2386   .text.reset_handler:0000000000001134 $d
       stm32eforth.s:2387   .text.reset_handler:0000000000001138 $t
       stm32eforth.s:2390   .text.reset_handler:0000000000001144 $d
       stm32eforth.s:2391   .text.reset_handler:0000000000001148 $t
       stm32eforth.s:2402   .text.reset_handler:0000000000001160 $d
       stm32eforth.s:2403   .text.reset_handler:0000000000001164 _NUMBQ
       stm32eforth.s:2405   .text.reset_handler:000000000000116c $t
       stm32eforth.s:2406   .text.reset_handler:000000000000116c NUMBQ
       stm32eforth.s:2412   .text.reset_handler:0000000000001180 $d
       stm32eforth.s:2413   .text.reset_handler:0000000000001184 $t
       stm32eforth.s:2418   .text.reset_handler:0000000000001198 $d
       stm32eforth.s:2419   .text.reset_handler:000000000000119c $t
       stm32eforth.s:2421   .text.reset_handler:00000000000011a4 $d
       stm32eforth.s:2427   .text.reset_handler:00000000000011bc NUMQ1
       stm32eforth.s:2422   .text.reset_handler:00000000000011a8 $t
       stm32eforth.s:2431   .text.reset_handler:00000000000011c8 $d
       stm32eforth.s:2432   .text.reset_handler:00000000000011cc $t
       stm32eforth.s:2442   .text.reset_handler:00000000000011f4 $d
       stm32eforth.s:2481   .text.reset_handler:0000000000001280 NUMQ6
       stm32eforth.s:2443   .text.reset_handler:00000000000011f8 $t
       stm32eforth.s:2445   .text.reset_handler:0000000000001200 NUMQ2
ARM GAS  stm32eforth.s 			page 109


       stm32eforth.s:2453   .text.reset_handler:000000000000121c $d
       stm32eforth.s:2472   .text.reset_handler:0000000000001264 NUMQ4
       stm32eforth.s:2454   .text.reset_handler:0000000000001220 $t
       stm32eforth.s:2462   .text.reset_handler:0000000000001240 $d
       stm32eforth.s:2463   .text.reset_handler:0000000000001244 $t
       stm32eforth.s:2467   .text.reset_handler:0000000000001254 $d
       stm32eforth.s:2469   .text.reset_handler:000000000000125c NUMQ3
       stm32eforth.s:2468   .text.reset_handler:0000000000001258 $t
       stm32eforth.s:2479   .text.reset_handler:000000000000127c NUMQ5
       stm32eforth.s:2478   .text.reset_handler:0000000000001278 $d
       stm32eforth.s:2480   .text.reset_handler:000000000000127c $t
       stm32eforth.s:2495   .text.reset_handler:0000000000001298 $d
       stm32eforth.s:2496   .text.reset_handler:000000000000129c _KEY
       stm32eforth.s:2498   .text.reset_handler:00000000000012a0 $t
       stm32eforth.s:2499   .text.reset_handler:00000000000012a0 KEY
       stm32eforth.s:2501   .text.reset_handler:00000000000012a4 KEY1
       stm32eforth.s:2504   .text.reset_handler:00000000000012ac $d
       stm32eforth.s:2505   .text.reset_handler:00000000000012b0 $t
       stm32eforth.s:2510   .text.reset_handler:00000000000012b4 $d
       stm32eforth.s:2511   .text.reset_handler:00000000000012b8 _SPACE
       stm32eforth.s:2513   .text.reset_handler:00000000000012be $t
       stm32eforth.s:2514   .text.reset_handler:00000000000012c0 SPACE
       stm32eforth.s:2523   .text.reset_handler:00000000000012d0 $d
       stm32eforth.s:2524   .text.reset_handler:00000000000012d4 _SPACS
       stm32eforth.s:2527   .text.reset_handler:00000000000012dc SPACS
       stm32eforth.s:2530   .text.reset_handler:00000000000012e4 $d
       stm32eforth.s:2531   .text.reset_handler:00000000000012e8 $t
       stm32eforth.s:2536   .text.reset_handler:00000000000012f8 CHAR2
       stm32eforth.s:2534   .text.reset_handler:00000000000012f4 CHAR1
       stm32eforth.s:2538   .text.reset_handler:00000000000012fc $d
       stm32eforth.s:2539   .text.reset_handler:0000000000001300 $t
       stm32eforth.s:2544   .text.reset_handler:0000000000001304 $d
       stm32eforth.s:2545   .text.reset_handler:0000000000001308 _TYPEE
       stm32eforth.s:2548   .text.reset_handler:0000000000001310 TYPEE
       stm32eforth.s:2556   .text.reset_handler:0000000000001328 TYPE2
       stm32eforth.s:2552   .text.reset_handler:000000000000131c TYPE1
       stm32eforth.s:2558   .text.reset_handler:000000000000132c $d
       stm32eforth.s:2559   .text.reset_handler:0000000000001330 $t
       stm32eforth.s:2565   .text.reset_handler:0000000000001338 $d
       stm32eforth.s:2566   .text.reset_handler:000000000000133c _CR
       stm32eforth.s:2569   .text.reset_handler:0000000000001340 CR
       stm32eforth.s:2572   .text.reset_handler:0000000000001348 $d
       stm32eforth.s:2573   .text.reset_handler:000000000000134c $t
       stm32eforth.s:2575   .text.reset_handler:0000000000001354 $d
       stm32eforth.s:2576   .text.reset_handler:0000000000001358 $t
       stm32eforth.s:2587   .text.reset_handler:0000000000001360 DOSTR
       stm32eforth.s:2610   .text.reset_handler:0000000000001394 STRQP
       stm32eforth.s:2622   .text.reset_handler:00000000000013a0 DOTST
       stm32eforth.s:2635   .text.reset_handler:00000000000013b0 DOTQP
       stm32eforth.s:2644   .text.reset_handler:00000000000013c0 $d
       stm32eforth.s:2645   .text.reset_handler:00000000000013c4 _DOTR
       stm32eforth.s:2648   .text.reset_handler:00000000000013c8 DOTR
       stm32eforth.s:2662   .text.reset_handler:00000000000013ec $d
       stm32eforth.s:2663   .text.reset_handler:00000000000013f0 _UDOTR
       stm32eforth.s:2665   .text.reset_handler:00000000000013f4 $t
       stm32eforth.s:2666   .text.reset_handler:00000000000013f4 UDOTR
       stm32eforth.s:2682   .text.reset_handler:0000000000001420 $d
ARM GAS  stm32eforth.s 			page 110


       stm32eforth.s:2683   .text.reset_handler:0000000000001424 _UDOT
       stm32eforth.s:2686   .text.reset_handler:0000000000001428 UDOT
       stm32eforth.s:2698   .text.reset_handler:0000000000001444 $d
       stm32eforth.s:2699   .text.reset_handler:0000000000001448 _DOT
       stm32eforth.s:2701   .text.reset_handler:000000000000144a $t
       stm32eforth.s:2702   .text.reset_handler:000000000000144c DOT
       stm32eforth.s:2707   .text.reset_handler:000000000000145c $d
       stm32eforth.s:2708   .text.reset_handler:0000000000001460 $t
       stm32eforth.s:2710   .text.reset_handler:0000000000001468 $d
       stm32eforth.s:2713   .text.reset_handler:0000000000001474 DOT1
       stm32eforth.s:2711   .text.reset_handler:000000000000146c $t
       stm32eforth.s:2722   .text.reset_handler:0000000000001484 $d
       stm32eforth.s:2723   .text.reset_handler:0000000000001488 _QUEST
       stm32eforth.s:2725   .text.reset_handler:000000000000148a $t
       stm32eforth.s:2726   .text.reset_handler:000000000000148c QUEST
       stm32eforth.s:2742   .text.reset_handler:000000000000149c PARS
       stm32eforth.s:2750   .text.reset_handler:00000000000014b8 $d
       stm32eforth.s:2818   .text.reset_handler:00000000000015aa PARS8
       stm32eforth.s:2751   .text.reset_handler:00000000000014bc $t
       stm32eforth.s:2757   .text.reset_handler:00000000000014d4 $d
       stm32eforth.s:2779   .text.reset_handler:0000000000001524 PARS3
       stm32eforth.s:2758   .text.reset_handler:00000000000014d8 $t
       stm32eforth.s:2759   .text.reset_handler:00000000000014dc PARS1
       stm32eforth.s:2767   .text.reset_handler:00000000000014f8 $d
       stm32eforth.s:2777   .text.reset_handler:0000000000001520 PARS2
       stm32eforth.s:2768   .text.reset_handler:00000000000014fc $t
       stm32eforth.s:2770   .text.reset_handler:0000000000001504 $d
       stm32eforth.s:2771   .text.reset_handler:0000000000001508 $t
       stm32eforth.s:2774   .text.reset_handler:0000000000001514 $d
       stm32eforth.s:2775   .text.reset_handler:0000000000001518 $t
       stm32eforth.s:2783   .text.reset_handler:0000000000001530 PARS4
       stm32eforth.s:2794   .text.reset_handler:0000000000001558 $d
       stm32eforth.s:2796   .text.reset_handler:0000000000001560 PARS5
       stm32eforth.s:2795   .text.reset_handler:000000000000155c $t
       stm32eforth.s:2798   .text.reset_handler:0000000000001564 $d
       stm32eforth.s:2805   .text.reset_handler:000000000000157e PARS6
       stm32eforth.s:2799   .text.reset_handler:0000000000001568 $t
       stm32eforth.s:2801   .text.reset_handler:0000000000001570 $d
       stm32eforth.s:2802   .text.reset_handler:0000000000001574 $t
       stm32eforth.s:2811   .text.reset_handler:0000000000001592 PARS7
       stm32eforth.s:2827   .text.reset_handler:00000000000015ba $d
       stm32eforth.s:2828   .text.reset_handler:00000000000015be _PARSE
       stm32eforth.s:2830   .text.reset_handler:00000000000015c4 $t
       stm32eforth.s:2831   .text.reset_handler:00000000000015c4 PARSE
       stm32eforth.s:2852   .text.reset_handler:0000000000001604 $d
       stm32eforth.s:2853   .text.reset_handler:0000000000001608 _DOTPR
       stm32eforth.s:2856   .text.reset_handler:000000000000160c DOTPR
       stm32eforth.s:2859   .text.reset_handler:0000000000001614 $d
       stm32eforth.s:2860   .text.reset_handler:0000000000001618 $t
       stm32eforth.s:2867   .text.reset_handler:0000000000001624 $d
       stm32eforth.s:2868   .text.reset_handler:0000000000001628 _PAREN
       stm32eforth.s:2870   .text.reset_handler:000000000000162a $t
       stm32eforth.s:2871   .text.reset_handler:000000000000162c PAREN
       stm32eforth.s:2874   .text.reset_handler:0000000000001634 $d
       stm32eforth.s:2875   .text.reset_handler:0000000000001638 $t
       stm32eforth.s:2882   .text.reset_handler:0000000000001644 $d
       stm32eforth.s:2883   .text.reset_handler:0000000000001648 _BKSLA
ARM GAS  stm32eforth.s 			page 111


       stm32eforth.s:2885   .text.reset_handler:000000000000164a $t
       stm32eforth.s:2886   .text.reset_handler:000000000000164c BKSLA
       stm32eforth.s:2897   .text.reset_handler:0000000000001664 $d
       stm32eforth.s:2898   .text.reset_handler:0000000000001668 _CHAR
       stm32eforth.s:2901   .text.reset_handler:0000000000001670 CHAR
       stm32eforth.s:2912   .text.reset_handler:0000000000001688 $d
       stm32eforth.s:2913   .text.reset_handler:000000000000168c _WORDD
       stm32eforth.s:2916   .text.reset_handler:0000000000001694 WORDD
       stm32eforth.s:2927   .text.reset_handler:00000000000016ac $d
       stm32eforth.s:2928   .text.reset_handler:00000000000016b0 _TOKEN
       stm32eforth.s:2930   .text.reset_handler:00000000000016b6 $t
       stm32eforth.s:2931   .text.reset_handler:00000000000016b8 TOKEN
       stm32eforth.s:2943   .text.reset_handler:00000000000016c8 $d
       stm32eforth.s:2944   .text.reset_handler:00000000000016cc _NAMET
       stm32eforth.s:2946   .text.reset_handler:00000000000016d2 $t
       stm32eforth.s:2947   .text.reset_handler:00000000000016d4 NAMET
       stm32eforth.s:2951   .text.reset_handler:00000000000016e0 $d
       stm32eforth.s:2952   .text.reset_handler:00000000000016e4 $t
       stm32eforth.s:2965   .text.reset_handler:00000000000016f4 $d
       stm32eforth.s:2966   .text.reset_handler:00000000000016f8 _SAMEQ
       stm32eforth.s:2968   .text.reset_handler:00000000000016fe $t
       stm32eforth.s:2969   .text.reset_handler:0000000000001700 SAMEQ
       stm32eforth.s:2989   .text.reset_handler:0000000000001748 SAME2
       stm32eforth.s:2973   .text.reset_handler:000000000000170c SAME1
       stm32eforth.s:2985   .text.reset_handler:0000000000001738 $d
       stm32eforth.s:2986   .text.reset_handler:000000000000173c $t
       stm32eforth.s:2991   .text.reset_handler:000000000000174c $d
       stm32eforth.s:2992   .text.reset_handler:0000000000001750 $t
       stm32eforth.s:2993   .text.reset_handler:0000000000001754 $d
       stm32eforth.s:2994   .text.reset_handler:0000000000001758 $t
       stm32eforth.s:3006   .text.reset_handler:000000000000175c FIND
       stm32eforth.s:3015   .text.reset_handler:000000000000177c FIND1
       stm32eforth.s:3018   .text.reset_handler:0000000000001784 $d
       stm32eforth.s:3038   .text.reset_handler:00000000000017cc FIND6
       stm32eforth.s:3019   .text.reset_handler:0000000000001788 $t
       stm32eforth.s:3022   .text.reset_handler:0000000000001794 $d
       stm32eforth.s:3023   .text.reset_handler:0000000000001798 $t
       stm32eforth.s:3027   .text.reset_handler:00000000000017a8 $d
       stm32eforth.s:3031   .text.reset_handler:00000000000017b8 FIND2
       stm32eforth.s:3028   .text.reset_handler:00000000000017ac $t
       stm32eforth.s:3036   .text.reset_handler:00000000000017c8 FIND3
       stm32eforth.s:3045   .text.reset_handler:00000000000017e4 FIND4
       stm32eforth.s:3047   .text.reset_handler:00000000000017e8 $d
       stm32eforth.s:3052   .text.reset_handler:00000000000017fc FIND5
       stm32eforth.s:3048   .text.reset_handler:00000000000017ec $t
       stm32eforth.s:3066   .text.reset_handler:0000000000001820 $d
       stm32eforth.s:3067   .text.reset_handler:0000000000001824 _NAMEQ
       stm32eforth.s:3069   .text.reset_handler:000000000000182a $t
       stm32eforth.s:3070   .text.reset_handler:000000000000182c NAMEQ
       stm32eforth.s:3087   .text.reset_handler:0000000000001840 BKSP
       stm32eforth.s:3096   .text.reset_handler:0000000000001860 $d
       stm32eforth.s:3109   .text.reset_handler:0000000000001888 BACK1
       stm32eforth.s:3097   .text.reset_handler:0000000000001864 $t
       stm32eforth.s:3098   .text.reset_handler:0000000000001868 $d
       stm32eforth.s:3099   .text.reset_handler:000000000000186c $t
       stm32eforth.s:3106   .text.reset_handler:0000000000001880 $d
       stm32eforth.s:3107   .text.reset_handler:0000000000001884 $t
ARM GAS  stm32eforth.s 			page 112


       stm32eforth.s:3119   .text.reset_handler:000000000000188c TAP
       stm32eforth.s:3136   .text.reset_handler:00000000000018a8 KTAP
       stm32eforth.s:3137   .text.reset_handler:00000000000018a8 TTAP
       stm32eforth.s:3141   .text.reset_handler:00000000000018b4 $d
       stm32eforth.s:3142   .text.reset_handler:00000000000018b8 $t
       stm32eforth.s:3144   .text.reset_handler:00000000000018c0 $d
       stm32eforth.s:3157   .text.reset_handler:00000000000018f0 KTAP2
       stm32eforth.s:3145   .text.reset_handler:00000000000018c4 $t
       stm32eforth.s:3146   .text.reset_handler:00000000000018c8 $d
       stm32eforth.s:3147   .text.reset_handler:00000000000018cc $t
       stm32eforth.s:3149   .text.reset_handler:00000000000018d4 $d
       stm32eforth.s:3154   .text.reset_handler:00000000000018e8 KTAP1
       stm32eforth.s:3150   .text.reset_handler:00000000000018d8 $t
       stm32eforth.s:3153   .text.reset_handler:00000000000018e4 $d
       stm32eforth.s:3155   .text.reset_handler:00000000000018e8 $t
       stm32eforth.s:3167   .text.reset_handler:0000000000001904 $d
       stm32eforth.s:3168   .text.reset_handler:0000000000001908 _ACCEP
       stm32eforth.s:3171   .text.reset_handler:0000000000001910 ACCEP
       stm32eforth.s:3176   .text.reset_handler:0000000000001920 ACCP1
       stm32eforth.s:3180   .text.reset_handler:000000000000192c $d
       stm32eforth.s:3196   .text.reset_handler:000000000000195c ACCP4
       stm32eforth.s:3181   .text.reset_handler:0000000000001930 $t
       stm32eforth.s:3185   .text.reset_handler:0000000000001940 $d
       stm32eforth.s:3186   .text.reset_handler:0000000000001944 $t
       stm32eforth.s:3188   .text.reset_handler:000000000000194c $d
       stm32eforth.s:3191   .text.reset_handler:0000000000001956 ACCP2
       stm32eforth.s:3189   .text.reset_handler:0000000000001950 $t
       stm32eforth.s:3194   .text.reset_handler:000000000000195a ACCP3
       stm32eforth.s:3205   .text.reset_handler:000000000000196c $d
       stm32eforth.s:3206   .text.reset_handler:0000000000001970 _QUERY
       stm32eforth.s:3208   .text.reset_handler:0000000000001976 $t
       stm32eforth.s:3209   .text.reset_handler:0000000000001978 QUERY
       stm32eforth.s:3213   .text.reset_handler:0000000000001984 $d
       stm32eforth.s:3214   .text.reset_handler:0000000000001988 $t
       stm32eforth.s:3219   .text.reset_handler:000000000000199c $d
       stm32eforth.s:3220   .text.reset_handler:00000000000019a0 $t
       stm32eforth.s:3230   .text.reset_handler:00000000000019ac $d
       stm32eforth.s:3231   .text.reset_handler:00000000000019b0 _ABORT
       stm32eforth.s:3233   .text.reset_handler:00000000000019b6 $t
       stm32eforth.s:3234   .text.reset_handler:00000000000019b8 ABORT
       stm32eforth.s:3237   .text.reset_handler:00000000000019c0 ABORT1
       stm32eforth.s:3241   .text.reset_handler:00000000000019cc $d
       stm32eforth.s:3242   .text.reset_handler:00000000000019d0 $t
       stm32eforth.s:3385   .text.reset_handler:0000000000001b34 PRESE
       stm32eforth.s:3398   .text.reset_handler:0000000000001b54 QUIT
       stm32eforth.s:3254   .text.reset_handler:00000000000019e0 ABORQ
       stm32eforth.s:3259   .text.reset_handler:00000000000019f0 $d
       stm32eforth.s:3260   .text.reset_handler:00000000000019f4 $t
       stm32eforth.s:3271   .text.reset_handler:00000000000019fe $d
       stm32eforth.s:3272   .text.reset_handler:0000000000001a02 _INTER
       stm32eforth.s:3274   .text.reset_handler:0000000000001a0e $t
       stm32eforth.s:3280   .text.reset_handler:0000000000001a20 $d
       stm32eforth.s:3291   .text.reset_handler:0000000000001a50 INTE1
       stm32eforth.s:3281   .text.reset_handler:0000000000001a24 $t
       stm32eforth.s:3283   .text.reset_handler:0000000000001a2c $d
       stm32eforth.s:3284   .text.reset_handler:0000000000001a30 $t
       stm32eforth.s:3286   .text.reset_handler:0000000000001a38 $d
ARM GAS  stm32eforth.s 			page 113


       stm32eforth.s:3288   .text.reset_handler:0000000000001a46 $t
       stm32eforth.s:3294   .text.reset_handler:0000000000001a58 $d
       stm32eforth.s:3296   .text.reset_handler:0000000000001a60 INTE2
       stm32eforth.s:3295   .text.reset_handler:0000000000001a5c $t
       stm32eforth.s:3302   .text.reset_handler:0000000000001a64 $d
       stm32eforth.s:3303   .text.reset_handler:0000000000001a68 _LBRAC
       stm32eforth.s:3305   .text.reset_handler:0000000000001a6a $t
       stm32eforth.s:3306   .text.reset_handler:0000000000001a6c LBRAC
       stm32eforth.s:3309   .text.reset_handler:0000000000001a74 $d
       stm32eforth.s:3310   .text.reset_handler:0000000000001a78 $t
       stm32eforth.s:3317   .text.reset_handler:0000000000001a84 $d
       stm32eforth.s:3318   .text.reset_handler:0000000000001a88 _DOTOK
       stm32eforth.s:3320   .text.reset_handler:0000000000001a8c $t
       stm32eforth.s:3321   .text.reset_handler:0000000000001a8c DOTOK
       stm32eforth.s:3324   .text.reset_handler:0000000000001a94 $d
       stm32eforth.s:3325   .text.reset_handler:0000000000001a98 $t
       stm32eforth.s:3329   .text.reset_handler:0000000000001aa8 $d
       stm32eforth.s:3333   .text.reset_handler:0000000000001ab4 DOTO1
       stm32eforth.s:3330   .text.reset_handler:0000000000001aac $t
       stm32eforth.s:3331   .text.reset_handler:0000000000001ab0 $d
       stm32eforth.s:3334   .text.reset_handler:0000000000001ab4 $t
       stm32eforth.s:3340   .text.reset_handler:0000000000001abc $d
       stm32eforth.s:3341   .text.reset_handler:0000000000001ac0 _QSTAC
       stm32eforth.s:3344   .text.reset_handler:0000000000001ac8 QSTAC
       stm32eforth.s:3349   .text.reset_handler:0000000000001ad8 $d
       stm32eforth.s:3357   .text.reset_handler:0000000000001ae8 $d
       stm32eforth.s:3358   .text.reset_handler:0000000000001aec _EVAL
       stm32eforth.s:3361   .text.reset_handler:0000000000001af4 EVAL
       stm32eforth.s:3363   .text.reset_handler:0000000000001af8 EVAL1
       stm32eforth.s:3368   .text.reset_handler:0000000000001b08 $d
       stm32eforth.s:3373   .text.reset_handler:0000000000001b1c EVAL2
       stm32eforth.s:3369   .text.reset_handler:0000000000001b0c $t
       stm32eforth.s:3381   .text.reset_handler:0000000000001b28 $d
       stm32eforth.s:3382   .text.reset_handler:0000000000001b2c _PRESE
       stm32eforth.s:3394   .text.reset_handler:0000000000001b48 $d
       stm32eforth.s:3395   .text.reset_handler:0000000000001b4c _QUIT
       stm32eforth.s:3401   .text.reset_handler:0000000000001b60 QUIT1
       stm32eforth.s:3403   .text.reset_handler:0000000000001b64 QUIT2
       stm32eforth.s:3407   .text.reset_handler:0000000000001b70 $d
       stm32eforth.s:3416   .text.reset_handler:0000000000001b78 _UNLOCK
       stm32eforth.s:3419   .text.reset_handler:0000000000001b80 UNLOCK
       stm32eforth.s:3422   .text.reset_handler:0000000000001b88 $d
       stm32eforth.s:3443   .text.reset_handler:0000000000001baa LOCK
       stm32eforth.s:3793   .text.reset_handler:0000000000001f94 flash_regs
       stm32eforth.s:3423   .text.reset_handler:0000000000001b8c $t
       stm32eforth.s:3450   .text.reset_handler:0000000000001bb6 WAIT_BSY
       stm32eforth.s:3452   .text.reset_handler:0000000000001bb8 WAIT1
       stm32eforth.s:3463   .text.reset_handler:0000000000001bc2 $d
       stm32eforth.s:3464   .text.reset_handler:0000000000001bc6 _EPAGE
       stm32eforth.s:3468   .text.reset_handler:0000000000001bd4 EPAGE
       stm32eforth.s:3472   .text.reset_handler:0000000000001be0 $d
       stm32eforth.s:3473   .text.reset_handler:0000000000001be4 $t
       stm32eforth.s:3483   .text.reset_handler:0000000000001c02 $d
       stm32eforth.s:3484   .text.reset_handler:0000000000001c06 $t
       stm32eforth.s:3488   .text.reset_handler:0000000000001c14 $d
       stm32eforth.s:3490   .text.reset_handler:0000000000001c22 $t
       stm32eforth.s:3495   .text.reset_handler:0000000000001c28 HWORD_WRITE
ARM GAS  stm32eforth.s 			page 114


       stm32eforth.s:3508   .text.reset_handler:0000000000001c4a $d
       stm32eforth.s:3509   .text.reset_handler:0000000000001c4e $t
       stm32eforth.s:3510   .text.reset_handler:0000000000001c52 $d
       stm32eforth.s:3512   .text.reset_handler:0000000000001c60 $t
       stm32eforth.s:3521   .text.reset_handler:0000000000001c64 $d
       stm32eforth.s:3522   .text.reset_handler:0000000000001c68 _ISTOR
       stm32eforth.s:3525   .text.reset_handler:0000000000001c6c ISTOR
       stm32eforth.s:3529   .text.reset_handler:0000000000001c78 $d
       stm32eforth.s:3530   .text.reset_handler:0000000000001c7c $t
       stm32eforth.s:3541   .text.reset_handler:0000000000001ca8 $d
       stm32eforth.s:3542   .text.reset_handler:0000000000001cac $t
       stm32eforth.s:3548   .text.reset_handler:0000000000001cb4 $d
       stm32eforth.s:3549   .text.reset_handler:0000000000001cb8 _IMG_SIZE
       stm32eforth.s:3552   .text.reset_handler:0000000000001cc4 IMG_SIZE
       stm32eforth.s:3555   .text.reset_handler:0000000000001ccc $d
       stm32eforth.s:3556   .text.reset_handler:0000000000001cd0 $t
       stm32eforth.s:3561   .text.reset_handler:0000000000001ce4 $d
       stm32eforth.s:3562   .text.reset_handler:0000000000001ce8 $t
       stm32eforth.s:3565   .text.reset_handler:0000000000001cf4 $d
       stm32eforth.s:3566   .text.reset_handler:0000000000001cf8 $t
       stm32eforth.s:3572   .text.reset_handler:0000000000001d00 $d
       stm32eforth.s:3573   .text.reset_handler:0000000000001d04 _IMGQ
       stm32eforth.s:3576   .text.reset_handler:0000000000001d0c IMGQ
       stm32eforth.s:3588   .text.reset_handler:0000000000001d2c $d
       stm32eforth.s:3589   .text.reset_handler:0000000000001d30 _LOAD_IMG
       stm32eforth.s:3592   .text.reset_handler:0000000000001d3c LOAD_IMG
       stm32eforth.s:3596   .text.reset_handler:0000000000001d48 $d
       stm32eforth.s:3598   .text.reset_handler:0000000000001d4c $t
       stm32eforth.s:3622   .text.reset_handler:0000000000001d94 $d
       stm32eforth.s:3623   .text.reset_handler:0000000000001d98 _ERASE_MPG
       stm32eforth.s:3625   .text.reset_handler:0000000000001da2 $t
       stm32eforth.s:3626   .text.reset_handler:0000000000001da4 ERASE_MPG
       stm32eforth.s:3688   .text.reset_handler:0000000000001e54 PG_TO_ADR
       stm32eforth.s:3631   .text.reset_handler:0000000000001db4 $d
       stm32eforth.s:3633   .text.reset_handler:0000000000001db8 $t
       stm32eforth.s:3640   .text.reset_handler:0000000000001dd0 $d
       stm32eforth.s:3641   .text.reset_handler:0000000000001dd4 $t
       stm32eforth.s:3646   .text.reset_handler:0000000000001ddc $d
       stm32eforth.s:3647   .text.reset_handler:0000000000001de0 _FLSH_WR
       stm32eforth.s:3650   .text.reset_handler:0000000000001de8 FLSH_WR
       stm32eforth.s:3651   .text.reset_handler:0000000000001de8 $t
       stm32eforth.s:3654   .text.reset_handler:0000000000001df4 $d
       stm32eforth.s:3656   .text.reset_handler:0000000000001df8 $t
       stm32eforth.s:3665   .text.reset_handler:0000000000001e1c $d
       stm32eforth.s:3666   .text.reset_handler:0000000000001e20 $t
       stm32eforth.s:3673   .text.reset_handler:0000000000001e30 $d
       stm32eforth.s:3674   .text.reset_handler:0000000000001e34 _ADR_TO_PG
       stm32eforth.s:3677   .text.reset_handler:0000000000001e3c ADR_TO_PG
       stm32eforth.s:3684   .text.reset_handler:0000000000001e46 $d
       stm32eforth.s:3685   .text.reset_handler:0000000000001e4a _PG_TO_ADR
       stm32eforth.s:3695   .text.reset_handler:0000000000001e5e $d
       stm32eforth.s:3696   .text.reset_handler:0000000000001e62 _ERASE_IMG
       stm32eforth.s:3698   .text.reset_handler:0000000000001e6c $t
       stm32eforth.s:3699   .text.reset_handler:0000000000001e6c ERASE_IMG
       stm32eforth.s:3705   .text.reset_handler:0000000000001e80 $d
       stm32eforth.s:3706   .text.reset_handler:0000000000001e84 $t
       stm32eforth.s:3710   .text.reset_handler:0000000000001e94 $d
ARM GAS  stm32eforth.s 			page 115


       stm32eforth.s:3711   .text.reset_handler:0000000000001e98 $t
       stm32eforth.s:3716   .text.reset_handler:0000000000001ea0 $d
       stm32eforth.s:3717   .text.reset_handler:0000000000001ea4 _SAVE_IMG
       stm32eforth.s:3720   .text.reset_handler:0000000000001eb0 SAVE_IMG
       stm32eforth.s:3726   .text.reset_handler:0000000000001ec4 $d
       stm32eforth.s:3727   .text.reset_handler:0000000000001ec8 $t
       stm32eforth.s:3730   .text.reset_handler:0000000000001ed4 $d
       stm32eforth.s:3732   .text.reset_handler:0000000000001ed8 $t
       stm32eforth.s:3754   .text.reset_handler:0000000000001f14 $d
       stm32eforth.s:3755   .text.reset_handler:0000000000001f18 _TURNKEY
       stm32eforth.s:3757   .text.reset_handler:0000000000001f20 $t
       stm32eforth.s:3758   .text.reset_handler:0000000000001f20 TURNKEY
       stm32eforth.s:3808   .text.reset_handler:0000000000001fa8 TICK
       stm32eforth.s:3766   .text.reset_handler:0000000000001f38 $d
       stm32eforth.s:3767   .text.reset_handler:0000000000001f3c _FORGET
       stm32eforth.s:3770   .text.reset_handler:0000000000001f44 FORGET
       stm32eforth.s:3776   .text.reset_handler:0000000000001f58 $d
       stm32eforth.s:3777   .text.reset_handler:0000000000001f5c $t
       stm32eforth.s:3780   .text.reset_handler:0000000000001f68 $d
       stm32eforth.s:3781   .text.reset_handler:0000000000001f6c $t
       stm32eforth.s:4251   .text.reset_handler:00000000000023d4 OVERT
       stm32eforth.s:3794   .text.reset_handler:0000000000001f94 $d
       stm32eforth.s:3805   .text.reset_handler:0000000000001fa4 _TICK
       stm32eforth.s:3807   .text.reset_handler:0000000000001fa6 $t
       stm32eforth.s:3813   .text.reset_handler:0000000000001fb8 $d
       stm32eforth.s:3815   .text.reset_handler:0000000000001fc0 TICK1
       stm32eforth.s:3814   .text.reset_handler:0000000000001fbc $t
       stm32eforth.s:3820   .text.reset_handler:0000000000001fc4 $d
       stm32eforth.s:3821   .text.reset_handler:0000000000001fc8 _ALLOT
       stm32eforth.s:3823   .text.reset_handler:0000000000001fce $t
       stm32eforth.s:3824   .text.reset_handler:0000000000001fd0 ALLOT
       stm32eforth.s:3833   .text.reset_handler:0000000000001fe0 $d
       stm32eforth.s:3834   .text.reset_handler:0000000000001fe4 _COMMA
       stm32eforth.s:3835   .text.reset_handler:0000000000001fe6 $t
       stm32eforth.s:3836   .text.reset_handler:0000000000001fe8 COMMA
       stm32eforth.s:3849   .text.reset_handler:0000000000002008 $d
       stm32eforth.s:3850   .text.reset_handler:000000000000200c _BCOMP
       stm32eforth.s:3852   .text.reset_handler:0000000000002016 $t
       stm32eforth.s:3853   .text.reset_handler:0000000000002018 BCOMP
       stm32eforth.s:3862   .text.reset_handler:0000000000002028 $d
       stm32eforth.s:3863   .text.reset_handler:000000000000202c _COMPI
       stm32eforth.s:3865   .text.reset_handler:0000000000002034 $t
       stm32eforth.s:3866   .text.reset_handler:0000000000002034 COMPI
       stm32eforth.s:4317   .text.reset_handler:0000000000002472 CALLC
       stm32eforth.s:3881   .text.reset_handler:000000000000205c $d
       stm32eforth.s:3882   .text.reset_handler:0000000000002060 _LITER
       stm32eforth.s:3884   .text.reset_handler:0000000000002068 $t
       stm32eforth.s:3885   .text.reset_handler:0000000000002068 LITER
       stm32eforth.s:3888   .text.reset_handler:0000000000002070 $d
       stm32eforth.s:3889   .text.reset_handler:0000000000002074 $t
       stm32eforth.s:3899   .text.reset_handler:000000000000207c STRCQ
       stm32eforth.s:3902   .text.reset_handler:0000000000002084 $d
       stm32eforth.s:3903   .text.reset_handler:0000000000002088 $t
       stm32eforth.s:3906   .text.reset_handler:0000000000002094 $d
       stm32eforth.s:3907   .text.reset_handler:0000000000002098 $t
       stm32eforth.s:3921   .text.reset_handler:00000000000020b4 $d
       stm32eforth.s:3922   .text.reset_handler:00000000000020b8 _FOR
ARM GAS  stm32eforth.s 			page 116


       stm32eforth.s:3924   .text.reset_handler:00000000000020bc $t
       stm32eforth.s:3925   .text.reset_handler:00000000000020bc FOR
       stm32eforth.s:3928   .text.reset_handler:00000000000020c4 $d
       stm32eforth.s:3929   .text.reset_handler:00000000000020c8 $t
       stm32eforth.s:3935   .text.reset_handler:00000000000020d0 $d
       stm32eforth.s:3936   .text.reset_handler:00000000000020d4 _BEGIN
       stm32eforth.s:3938   .text.reset_handler:00000000000020da $t
       stm32eforth.s:3939   .text.reset_handler:00000000000020dc BEGIN
       stm32eforth.s:3947   .text.reset_handler:00000000000020e8 $d
       stm32eforth.s:3948   .text.reset_handler:00000000000020ec _NEXT
       stm32eforth.s:3951   .text.reset_handler:00000000000020f4 NEXT
       stm32eforth.s:3954   .text.reset_handler:00000000000020fc $d
       stm32eforth.s:3955   .text.reset_handler:0000000000002100 $t
       stm32eforth.s:3961   .text.reset_handler:0000000000002108 $d
       stm32eforth.s:3962   .text.reset_handler:000000000000210c _UNTIL
       stm32eforth.s:3964   .text.reset_handler:0000000000002112 $t
       stm32eforth.s:3965   .text.reset_handler:0000000000002114 UNTIL
       stm32eforth.s:3968   .text.reset_handler:000000000000211c $d
       stm32eforth.s:3969   .text.reset_handler:0000000000002120 $t
       stm32eforth.s:3975   .text.reset_handler:0000000000002128 $d
       stm32eforth.s:3976   .text.reset_handler:000000000000212c _AGAIN
       stm32eforth.s:3978   .text.reset_handler:0000000000002132 $t
       stm32eforth.s:3979   .text.reset_handler:0000000000002134 AGAIN
       stm32eforth.s:3982   .text.reset_handler:000000000000213c $d
       stm32eforth.s:3983   .text.reset_handler:0000000000002140 $t
       stm32eforth.s:3989   .text.reset_handler:0000000000002148 $d
       stm32eforth.s:3990   .text.reset_handler:000000000000214c _IFF
       stm32eforth.s:3993   .text.reset_handler:0000000000002150 IFF
       stm32eforth.s:3996   .text.reset_handler:0000000000002158 $d
       stm32eforth.s:3997   .text.reset_handler:000000000000215c $t
       stm32eforth.s:3999   .text.reset_handler:0000000000002164 $d
       stm32eforth.s:4000   .text.reset_handler:0000000000002168 $t
       stm32eforth.s:4007   .text.reset_handler:0000000000002174 $d
       stm32eforth.s:4008   .text.reset_handler:0000000000002178 _AHEAD
       stm32eforth.s:4010   .text.reset_handler:000000000000217e $t
       stm32eforth.s:4011   .text.reset_handler:0000000000002180 AHEAD
       stm32eforth.s:4014   .text.reset_handler:0000000000002188 $d
       stm32eforth.s:4015   .text.reset_handler:000000000000218c $t
       stm32eforth.s:4017   .text.reset_handler:0000000000002194 $d
       stm32eforth.s:4018   .text.reset_handler:0000000000002198 $t
       stm32eforth.s:4025   .text.reset_handler:00000000000021a4 $d
       stm32eforth.s:4026   .text.reset_handler:00000000000021a8 _REPEA
       stm32eforth.s:4029   .text.reset_handler:00000000000021b0 REPEA
       stm32eforth.s:4040   .text.reset_handler:00000000000021c8 $d
       stm32eforth.s:4041   .text.reset_handler:00000000000021cc _THENN
       stm32eforth.s:4044   .text.reset_handler:00000000000021d4 THENN
       stm32eforth.s:4054   .text.reset_handler:00000000000021e8 $d
       stm32eforth.s:4055   .text.reset_handler:00000000000021ec _AFT
       stm32eforth.s:4057   .text.reset_handler:00000000000021f0 $t
       stm32eforth.s:4058   .text.reset_handler:00000000000021f0 AFT
       stm32eforth.s:4069   .text.reset_handler:0000000000002208 $d
       stm32eforth.s:4070   .text.reset_handler:000000000000220c _ELSEE
       stm32eforth.s:4073   .text.reset_handler:0000000000002214 ELSEE
       stm32eforth.s:4083   .text.reset_handler:0000000000002228 $d
       stm32eforth.s:4084   .text.reset_handler:000000000000222c _WHILE
       stm32eforth.s:4086   .text.reset_handler:0000000000002232 $t
       stm32eforth.s:4087   .text.reset_handler:0000000000002234 WHILE
ARM GAS  stm32eforth.s 			page 117


       stm32eforth.s:4096   .text.reset_handler:0000000000002244 $d
       stm32eforth.s:4097   .text.reset_handler:0000000000002248 _ABRTQ
       stm32eforth.s:4100   .text.reset_handler:0000000000002250 ABRTQ
       stm32eforth.s:4103   .text.reset_handler:0000000000002258 $d
       stm32eforth.s:4104   .text.reset_handler:000000000000225c $t
       stm32eforth.s:4110   .text.reset_handler:0000000000002264 $d
       stm32eforth.s:4111   .text.reset_handler:0000000000002268 _STRQ
       stm32eforth.s:4114   .text.reset_handler:000000000000226c STRQ
       stm32eforth.s:4117   .text.reset_handler:0000000000002274 $d
       stm32eforth.s:4118   .text.reset_handler:0000000000002278 $t
       stm32eforth.s:4124   .text.reset_handler:0000000000002280 $d
       stm32eforth.s:4125   .text.reset_handler:0000000000002284 _DOTQ
       stm32eforth.s:4128   .text.reset_handler:0000000000002288 DOTQ
       stm32eforth.s:4131   .text.reset_handler:0000000000002290 $d
       stm32eforth.s:4132   .text.reset_handler:0000000000002294 $t
       stm32eforth.s:4141   .text.reset_handler:000000000000229c $d
       stm32eforth.s:4142   .text.reset_handler:00000000000022a0 _UNIQU
       stm32eforth.s:4144   .text.reset_handler:00000000000022a8 $t
       stm32eforth.s:4145   .text.reset_handler:00000000000022a8 UNIQU
       stm32eforth.s:4150   .text.reset_handler:00000000000022b8 $d
       stm32eforth.s:4158   .text.reset_handler:00000000000022d4 UNIQ1
       stm32eforth.s:4151   .text.reset_handler:00000000000022bc $t
       stm32eforth.s:4152   .text.reset_handler:00000000000022c0 $d
       stm32eforth.s:4154   .text.reset_handler:00000000000022c8 $t
       stm32eforth.s:4169   .text.reset_handler:00000000000022dc SNAME
       stm32eforth.s:4174   .text.reset_handler:00000000000022ec $d
       stm32eforth.s:4188   .text.reset_handler:0000000000002324 SNAM1
       stm32eforth.s:4175   .text.reset_handler:00000000000022f0 $t
       stm32eforth.s:4190   .text.reset_handler:0000000000002328 $d
       stm32eforth.s:4192   .text.reset_handler:0000000000002330 $t
       stm32eforth.s:4197   .text.reset_handler:0000000000002334 $d
       stm32eforth.s:4198   .text.reset_handler:0000000000002338 _SCOMP
       stm32eforth.s:4201   .text.reset_handler:0000000000002344 SCOMP
       stm32eforth.s:4206   .text.reset_handler:0000000000002354 $d
       stm32eforth.s:4218   .text.reset_handler:0000000000002380 SCOM2
       stm32eforth.s:4207   .text.reset_handler:0000000000002358 $t
       stm32eforth.s:4209   .text.reset_handler:0000000000002360 $d
       stm32eforth.s:4210   .text.reset_handler:0000000000002364 $t
       stm32eforth.s:4212   .text.reset_handler:000000000000236c $d
       stm32eforth.s:4215   .text.reset_handler:0000000000002378 SCOM1
       stm32eforth.s:4213   .text.reset_handler:0000000000002370 $t
       stm32eforth.s:4221   .text.reset_handler:0000000000002388 $d
       stm32eforth.s:4224   .text.reset_handler:0000000000002394 SCOM3
       stm32eforth.s:4222   .text.reset_handler:000000000000238c $t
       stm32eforth.s:4231   .text.reset_handler:000000000000239c COLON_ABORT
       stm32eforth.s:4247   .text.reset_handler:00000000000023c8 $d
       stm32eforth.s:4248   .text.reset_handler:00000000000023cc _OVERT
       stm32eforth.s:4250   .text.reset_handler:00000000000023d2 $t
       stm32eforth.s:4262   .text.reset_handler:00000000000023ec $d
       stm32eforth.s:4263   .text.reset_handler:00000000000023f0 _SEMIS
       stm32eforth.s:4265   .text.reset_handler:00000000000023f2 $t
       stm32eforth.s:4266   .text.reset_handler:00000000000023f4 SEMIS
       stm32eforth.s:4278   .text.reset_handler:0000000000002410 $d
       stm32eforth.s:4279   .text.reset_handler:0000000000002414 _RBRAC
       stm32eforth.s:4281   .text.reset_handler:0000000000002416 $t
       stm32eforth.s:4282   .text.reset_handler:0000000000002418 RBRAC
       stm32eforth.s:4285   .text.reset_handler:0000000000002420 $d
ARM GAS  stm32eforth.s 			page 118


       stm32eforth.s:4286   .text.reset_handler:0000000000002424 $t
       stm32eforth.s:4294   .text.reset_handler:0000000000002430 COMPILE_BLW
       stm32eforth.s:4331   .text.reset_handler:0000000000002492 $d
       stm32eforth.s:4332   .text.reset_handler:0000000000002496 _COLON
       stm32eforth.s:4334   .text.reset_handler:0000000000002498 $t
       stm32eforth.s:4335   .text.reset_handler:0000000000002498 COLON
       stm32eforth.s:4348   .text.reset_handler:00000000000024b8 $d
       stm32eforth.s:4349   .text.reset_handler:00000000000024bc _IMMED
       stm32eforth.s:4351   .text.reset_handler:00000000000024c6 $t
       stm32eforth.s:4352   .text.reset_handler:00000000000024c8 IMMED
       stm32eforth.s:4355   .text.reset_handler:00000000000024d0 $d
       stm32eforth.s:4356   .text.reset_handler:00000000000024d4 $t
       stm32eforth.s:4371   .text.reset_handler:00000000000024f4 $d
       stm32eforth.s:4372   .text.reset_handler:00000000000024f8 _CONST
       stm32eforth.s:4375   .text.reset_handler:0000000000002504 CONST
       stm32eforth.s:4384   .text.reset_handler:0000000000002524 $d
       stm32eforth.s:4385   .text.reset_handler:0000000000002528 $t
       stm32eforth.s:4393   .text.reset_handler:0000000000002534 DODOES
       stm32eforth.s:4416   .text.reset_handler:0000000000002574 $d
       stm32eforth.s:4417   .text.reset_handler:0000000000002578 _DOES
       stm32eforth.s:4419   .text.reset_handler:000000000000257e $t
       stm32eforth.s:4420   .text.reset_handler:0000000000002580 DOES
       stm32eforth.s:4423   .text.reset_handler:0000000000002588 $d
       stm32eforth.s:4424   .text.reset_handler:000000000000258c $t
       stm32eforth.s:4432   .text.reset_handler:00000000000025ac $d
       stm32eforth.s:4433   .text.reset_handler:00000000000025b0 $t
       stm32eforth.s:4435   .text.reset_handler:00000000000025b8 $d
       stm32eforth.s:4436   .text.reset_handler:00000000000025bc $t
       stm32eforth.s:4443   .text.reset_handler:00000000000025c4 $d
       stm32eforth.s:4444   .text.reset_handler:00000000000025c8 _CREAT
       stm32eforth.s:4447   .text.reset_handler:00000000000025d0 CREAT
       stm32eforth.s:4456   .text.reset_handler:00000000000025f0 $d
       stm32eforth.s:4457   .text.reset_handler:00000000000025f4 $t
       stm32eforth.s:4463   .text.reset_handler:00000000000025fc $d
       stm32eforth.s:4464   .text.reset_handler:0000000000002600 _VARIA
       stm32eforth.s:4467   .text.reset_handler:000000000000260c VARIA
       stm32eforth.s:4471   .text.reset_handler:0000000000002618 $d
       stm32eforth.s:4472   .text.reset_handler:000000000000261c $t
       stm32eforth.s:4486   .text.reset_handler:0000000000002624 DMP
       stm32eforth.s:4490   .text.reset_handler:0000000000002630 $d
       stm32eforth.s:4491   .text.reset_handler:0000000000002634 $t
       stm32eforth.s:4502   .text.reset_handler:000000000000265c PDUM2
       stm32eforth.s:4495   .text.reset_handler:0000000000002644 PDUM1
       stm32eforth.s:4499   .text.reset_handler:0000000000002650 $d
       stm32eforth.s:4500   .text.reset_handler:0000000000002654 $t
       stm32eforth.s:4504   .text.reset_handler:0000000000002660 $d
       stm32eforth.s:4505   .text.reset_handler:0000000000002664 $t
       stm32eforth.s:4510   .text.reset_handler:0000000000002668 $d
       stm32eforth.s:4511   .text.reset_handler:000000000000266c _DUMP
       stm32eforth.s:4514   .text.reset_handler:0000000000002674 DUMP
       stm32eforth.s:4521   .text.reset_handler:000000000000268c $d
       stm32eforth.s:4522   .text.reset_handler:0000000000002690 $t
       stm32eforth.s:4536   .text.reset_handler:00000000000026c4 DUMP4
       stm32eforth.s:4525   .text.reset_handler:000000000000269c DUMP1
       stm32eforth.s:4528   .text.reset_handler:00000000000026a4 $d
       stm32eforth.s:4529   .text.reset_handler:00000000000026a8 $t
       stm32eforth.s:4538   .text.reset_handler:00000000000026c8 $d
ARM GAS  stm32eforth.s 			page 119


       stm32eforth.s:4539   .text.reset_handler:00000000000026cc DUMP3
       stm32eforth.s:4540   .text.reset_handler:00000000000026cc $t
       stm32eforth.s:4549   .text.reset_handler:00000000000026e0 $d
       stm32eforth.s:4550   .text.reset_handler:00000000000026e4 _DOTS
       stm32eforth.s:4554   .text.reset_handler:00000000000026e8 DOTS
       stm32eforth.s:4564   .text.reset_handler:0000000000002708 DOTS2
       stm32eforth.s:4560   .text.reset_handler:00000000000026fc DOTS1
       stm32eforth.s:4566   .text.reset_handler:000000000000270c $d
       stm32eforth.s:4567   .text.reset_handler:0000000000002710 $t
       stm32eforth.s:4573   .text.reset_handler:0000000000002718 $d
       stm32eforth.s:4574   .text.reset_handler:000000000000271c _TNAME
       stm32eforth.s:4576   .text.reset_handler:0000000000002722 $t
       stm32eforth.s:4577   .text.reset_handler:0000000000002724 TNAME
       stm32eforth.s:4582   .text.reset_handler:0000000000002734 TNAM1
       stm32eforth.s:4585   .text.reset_handler:000000000000273c $d
       stm32eforth.s:4595   .text.reset_handler:0000000000002764 TNAM2
       stm32eforth.s:4586   .text.reset_handler:0000000000002740 $t
       stm32eforth.s:4591   .text.reset_handler:0000000000002754 $d
       stm32eforth.s:4592   .text.reset_handler:0000000000002758 $t
       stm32eforth.s:4603   .text.reset_handler:0000000000002770 $d
       stm32eforth.s:4604   .text.reset_handler:0000000000002774 _DOTID
       stm32eforth.s:4606   .text.reset_handler:0000000000002778 $t
       stm32eforth.s:4607   .text.reset_handler:0000000000002778 DOTID
       stm32eforth.s:4611   .text.reset_handler:0000000000002784 $d
       stm32eforth.s:4618   .text.reset_handler:00000000000027a0 DOTI1
       stm32eforth.s:4612   .text.reset_handler:0000000000002788 $t
       stm32eforth.s:4614   .text.reset_handler:0000000000002790 $d
       stm32eforth.s:4615   .text.reset_handler:0000000000002794 $t
       stm32eforth.s:4620   .text.reset_handler:00000000000027a4 $d
       stm32eforth.s:4622   .text.reset_handler:00000000000027ae $t
       stm32eforth.s:4625   *ABS*:0000000000000001 WANT_SEE
       stm32eforth.s:4630   .text.reset_handler:00000000000027b4 DOTCA
       stm32eforth.s:4635   .text.reset_handler:00000000000027c4 $d
       stm32eforth.s:4636   .text.reset_handler:00000000000027c8 $t
       stm32eforth.s:4641   .text.reset_handler:00000000000027d0 CODE_ABORT
       stm32eforth.s:4647   .text.reset_handler:00000000000027e4 $d
       stm32eforth.s:4648   .text.reset_handler:00000000000027e8 $t
       stm32eforth.s:4650   .text.reset_handler:00000000000027f0 $d
       stm32eforth.s:4651   .text.reset_handler:00000000000027f4 $t
       stm32eforth.s:4653   .text.reset_handler:00000000000027fc $d
       stm32eforth.s:4655   .text.reset_handler:0000000000002806 $t
       stm32eforth.s:4658   .text.reset_handler:000000000000280c $d
       stm32eforth.s:4667   .text.reset_handler:000000000000281c UNNESTQ
       stm32eforth.s:4672   .text.reset_handler:000000000000282c $d
       stm32eforth.s:4673   .text.reset_handler:0000000000002830 $t
       stm32eforth.s:4676   .text.reset_handler:000000000000283c $d
       stm32eforth.s:4677   .text.reset_handler:0000000000002840 $t
       stm32eforth.s:4678   .text.reset_handler:0000000000002844 $d
       stm32eforth.s:4686   .text.reset_handler:0000000000002854 NONAMEQ
       stm32eforth.s:4689   .text.reset_handler:000000000000285c $d
       stm32eforth.s:4690   .text.reset_handler:0000000000002860 $t
       stm32eforth.s:4692   .text.reset_handler:0000000000002868 $d
       stm32eforth.s:5009   .text.reset_handler:0000000000002c0c NONAME_SUB
       stm32eforth.s:4693   .text.reset_handler:000000000000286c $t
       stm32eforth.s:4699   .text.reset_handler:0000000000002884 $d
       stm32eforth.s:4700   .text.reset_handler:0000000000002888 $t
       stm32eforth.s:4702   .text.reset_handler:0000000000002890 $d
ARM GAS  stm32eforth.s 			page 120


       stm32eforth.s:4703   .text.reset_handler:0000000000002894 $t
       stm32eforth.s:4707   .text.reset_handler:00000000000028a4 $d
       stm32eforth.s:4708   .text.reset_handler:00000000000028a8 $t
       stm32eforth.s:4710   .text.reset_handler:00000000000028b0 $d
       stm32eforth.s:4711   .text.reset_handler:00000000000028b4 $t
       stm32eforth.s:4713   .text.reset_handler:00000000000028bc $d
       stm32eforth.s:5015   .text.reset_handler:0000000000002c48 ANONYMOUS
       stm32eforth.s:4714   .text.reset_handler:00000000000028c0 $t
       stm32eforth.s:4732   .text.reset_handler:00000000000028f0 DOTNONAME
       stm32eforth.s:4736   .text.reset_handler:00000000000028fc $d
       stm32eforth.s:4737   .text.reset_handler:0000000000002900 $t
       stm32eforth.s:4744   .text.reset_handler:0000000000002910 IS_BLW
       stm32eforth.s:4747   .text.reset_handler:0000000000002918 $d
       stm32eforth.s:4748   .text.reset_handler:000000000000291c $t
       stm32eforth.s:4758   .text.reset_handler:0000000000002934 $d
       stm32eforth.s:4759   .text.reset_handler:0000000000002938 _SEE
       stm32eforth.s:4761   .text.reset_handler:000000000000293c $t
       stm32eforth.s:4762   .text.reset_handler:000000000000293c SEE
       stm32eforth.s:4772   .text.reset_handler:0000000000002960 $d
       stm32eforth.s:4773   .text.reset_handler:0000000000002964 $t
       stm32eforth.s:4774   .text.reset_handler:0000000000002968 SEE1
       stm32eforth.s:4779   .text.reset_handler:0000000000002978 $d
       stm32eforth.s:4780   .text.reset_handler:000000000000297c $t
       stm32eforth.s:4786   .text.reset_handler:0000000000002994 $d
       stm32eforth.s:4787   .text.reset_handler:0000000000002998 $t
       stm32eforth.s:4790   .text.reset_handler:00000000000029a4 $d
       stm32eforth.s:4791   .text.reset_handler:00000000000029a8 $t
       stm32eforth.s:4839   .text.reset_handler:0000000000002a38 DECOMP
       stm32eforth.s:4796   .text.reset_handler:00000000000029bc $d
       stm32eforth.s:4797   .text.reset_handler:00000000000029c0 $t
       stm32eforth.s:4799   .text.reset_handler:00000000000029c8 $d
       stm32eforth.s:4800   .text.reset_handler:00000000000029cc $t
       stm32eforth.s:4812   .text.reset_handler:00000000000029e8 BLADR
       stm32eforth.s:4834   .text.reset_handler:0000000000002a2a $d
       stm32eforth.s:4835   .text.reset_handler:0000000000002a2e _DECOM
       stm32eforth.s:4837   .text.reset_handler:0000000000002a38 $t
       stm32eforth.s:4846   .text.reset_handler:0000000000002a50 $d
       stm32eforth.s:4876   .text.reset_handler:0000000000002aac DECOM2
       stm32eforth.s:4848   .text.reset_handler:0000000000002a54 $t
       stm32eforth.s:4849   .text.reset_handler:0000000000002a58 $d
       stm32eforth.s:4851   .text.reset_handler:0000000000002a5c $t
       stm32eforth.s:4859   .text.reset_handler:0000000000002a78 $d
       stm32eforth.s:4862   .text.reset_handler:0000000000002a84 DECOMP1
       stm32eforth.s:4860   .text.reset_handler:0000000000002a7c $t
       stm32eforth.s:4861   .text.reset_handler:0000000000002a80 $d
       stm32eforth.s:4864   .text.reset_handler:0000000000002a88 DECOMP3
       stm32eforth.s:4863   .text.reset_handler:0000000000002a84 $t
       stm32eforth.s:4889   .text.reset_handler:0000000000002acc $d
       stm32eforth.s:4893   .text.reset_handler:0000000000002ad0 _WORDS
       stm32eforth.s:4895   .text.reset_handler:0000000000002ad6 $t
       stm32eforth.s:4896   .text.reset_handler:0000000000002ad8 WORDS
       stm32eforth.s:4901   .text.reset_handler:0000000000002ae8 WORS1
       stm32eforth.s:4904   .text.reset_handler:0000000000002af0 $d
       stm32eforth.s:4911   .text.reset_handler:0000000000002b0c WORS2
       stm32eforth.s:4905   .text.reset_handler:0000000000002af4 $t
       stm32eforth.s:4924   .text.reset_handler:0000000000002b10 VERSN
       stm32eforth.s:4927   .text.reset_handler:0000000000002b18 $d
ARM GAS  stm32eforth.s 			page 121


       stm32eforth.s:4928   .text.reset_handler:0000000000002b1c $t
       stm32eforth.s:4933   .text.reset_handler:0000000000002b20 $d
       stm32eforth.s:4934   .text.reset_handler:0000000000002b24 _HI
       stm32eforth.s:4941   .text.reset_handler:0000000000002b34 $d
       stm32eforth.s:4943   .text.reset_handler:0000000000002b4c $t
       stm32eforth.s:4952   .text.reset_handler:0000000000002b6c $d
       stm32eforth.s:4953   .text.reset_handler:0000000000002b70 $t
       stm32eforth.s:4965   .text.reset_handler:0000000000002b90 $d
       stm32eforth.s:4971   .text.reset_handler:0000000000002b9c $t
       stm32eforth.s:4977   .text.reset_handler:0000000000002bbc COLD1
       stm32eforth.s:4979   .text.reset_handler:0000000000002bc0 $d
       stm32eforth.s:4980   .text.reset_handler:0000000000002bc4 $t
       stm32eforth.s:4982   .text.reset_handler:0000000000002bcc $d
       stm32eforth.s:4983   .text.reset_handler:0000000000002bd0 $t
       stm32eforth.s:4984   .text.reset_handler:0000000000002bd4 $d
       stm32eforth.s:4985   .text.reset_handler:0000000000002bd8 $t
       stm32eforth.s:4986   .text.reset_handler:0000000000002bdc $d
       stm32eforth.s:4987   .text.reset_handler:0000000000002be0 $t
       stm32eforth.s:4993   .text.reset_handler:0000000000002bf0 $d
       stm32eforth.s:4994   .text.reset_handler:0000000000002bf4 $t
       stm32eforth.s:4999   .text.reset_handler:0000000000002c08 COLD2
       stm32eforth.s:5002   .text.reset_handler:0000000000002c08 $d
       stm32eforth.s:5010   .text.reset_handler:0000000000002c0c $d
       stm32eforth.s:5019   .text.reset_handler:0000000000002c80 BRAN_LBL
       stm32eforth.s:5023   .text.reset_handler:0000000000002c8c QBRAN_LBL
       stm32eforth.s:5027   .text.reset_handler:0000000000002c98 DOLIT_LBL
       stm32eforth.s:5031   .text.reset_handler:0000000000002ca4 DONEXT_LBL
       stm32eforth.s:5035   .text.reset_handler:0000000000002cb0 DODOES_LBL
       stm32eforth.s:5039   .text.reset_handler:0000000000002cbc DOVAR_LBL
       stm32eforth.s:5043   .text.reset_handler:0000000000002cc8 DOCON_LBL
       stm32eforth.s:5047   .text.reset_handler:0000000000002cd4 IS_BLW_LBL
       stm32eforth.s:5051   .text.reset_handler:0000000000002ce0 DOTQP_LBL
       stm32eforth.s:5055   .text.reset_handler:0000000000002ce4 BLADR_LBL
       stm32eforth.s:5059   .text.reset_handler:0000000000002cf0 DOTCA_LBL
       stm32eforth.s:5063   .text.reset_handler:0000000000002cfc NONAMEQ_LBL
       stm32eforth.s:5067   .text.reset_handler:0000000000002d08 STRCQ_LBL
       stm32eforth.s:5071   .text.reset_handler:0000000000002d10 VERSN_LBL
       stm32eforth.s:5022   .text.reset_handler:0000000000002c8a $t
       stm32eforth.s:5024   .text.reset_handler:0000000000002c8c $d
       stm32eforth.s:5028   .text.reset_handler:0000000000002c98 $d
       stm32eforth.s:5032   .text.reset_handler:0000000000002ca4 $d
       stm32eforth.s:5034   .text.reset_handler:0000000000002cae $t
       stm32eforth.s:5036   .text.reset_handler:0000000000002cb0 $d
       stm32eforth.s:5038   .text.reset_handler:0000000000002cba $t
       stm32eforth.s:5040   .text.reset_handler:0000000000002cbc $d
       stm32eforth.s:5044   .text.reset_handler:0000000000002cc8 $d
       stm32eforth.s:5048   .text.reset_handler:0000000000002cd4 $d
       stm32eforth.s:5052   .text.reset_handler:0000000000002ce0 $d
       stm32eforth.s:5058   .text.reset_handler:0000000000002cee $t
       stm32eforth.s:5060   .text.reset_handler:0000000000002cf0 $d
       stm32eforth.s:5064   .text.reset_handler:0000000000002cfc $d
       stm32eforth.s:5068   .text.reset_handler:0000000000002d08 $d
       stm32eforth.s:5072   .text.reset_handler:0000000000002d10 $d
       stm32eforth.s:5079   .text.reset_handler:0000000000003000 $d
       stm32eforth.s:275    .text.default_handler:000000000000001f $d
       stm32eforth.s:275    .text.default_handler:0000000000000020 $t
       stm32eforth.s:611    .text.reset_handler:0000000000000477 $d
ARM GAS  stm32eforth.s 			page 122


       stm32eforth.s:611    .text.reset_handler:0000000000000478 $t
       stm32eforth.s:655    .text.reset_handler:00000000000004f5 $d
       stm32eforth.s:655    .text.reset_handler:00000000000004f6 $t
       stm32eforth.s:674    .text.reset_handler:000000000000051d $d
       stm32eforth.s:674    .text.reset_handler:000000000000051e $t
       stm32eforth.s:699    .text.reset_handler:0000000000000555 $d
       stm32eforth.s:699    .text.reset_handler:0000000000000556 $t
       stm32eforth.s:811    .text.reset_handler:00000000000005eb $d
       stm32eforth.s:811    .text.reset_handler:00000000000005ec $t
       stm32eforth.s:845    .text.reset_handler:0000000000000617 $d
       stm32eforth.s:845    .text.reset_handler:0000000000000618 $t
       stm32eforth.s:858    .text.reset_handler:000000000000062b $d
       stm32eforth.s:858    .text.reset_handler:000000000000062c $t
       stm32eforth.s:869    .text.reset_handler:0000000000000637 $d
       stm32eforth.s:869    .text.reset_handler:0000000000000638 $t
       stm32eforth.s:881    .text.reset_handler:0000000000000649 $d
       stm32eforth.s:881    .text.reset_handler:000000000000064a $t
       stm32eforth.s:893    .text.reset_handler:000000000000065b $d
       stm32eforth.s:893    .text.reset_handler:000000000000065c $t
       stm32eforth.s:917    .text.reset_handler:0000000000000681 $d
       stm32eforth.s:917    .text.reset_handler:0000000000000682 $t
       stm32eforth.s:939    .text.reset_handler:00000000000006a3 $d
       stm32eforth.s:939    .text.reset_handler:00000000000006a4 $t
       stm32eforth.s:952    .text.reset_handler:00000000000006b5 $d
       stm32eforth.s:952    .text.reset_handler:00000000000006b6 $t
       stm32eforth.s:964    .text.reset_handler:00000000000006c7 $d
       stm32eforth.s:964    .text.reset_handler:00000000000006c8 $t
       stm32eforth.s:989    .text.reset_handler:00000000000006ef $d
       stm32eforth.s:989    .text.reset_handler:00000000000006f0 $t
       stm32eforth.s:1030   .text.reset_handler:0000000000000733 $d
       stm32eforth.s:1030   .text.reset_handler:0000000000000734 $t
       stm32eforth.s:1042   .text.reset_handler:0000000000000749 $d
       stm32eforth.s:1042   .text.reset_handler:000000000000074a $t
       stm32eforth.s:1104   .text.reset_handler:00000000000007a3 $d
       stm32eforth.s:1104   .text.reset_handler:00000000000007a4 $t
       stm32eforth.s:1118   .text.reset_handler:00000000000007b7 $d
       stm32eforth.s:1118   .text.reset_handler:00000000000007b8 $t
       stm32eforth.s:1129   .text.reset_handler:00000000000007c5 $d
       stm32eforth.s:1129   .text.reset_handler:00000000000007c6 $t
       stm32eforth.s:1140   .text.reset_handler:00000000000007d5 $d
       stm32eforth.s:1140   .text.reset_handler:00000000000007d6 $t
       stm32eforth.s:1151   .text.reset_handler:00000000000007e5 $d
       stm32eforth.s:1151   .text.reset_handler:00000000000007e6 $t
       stm32eforth.s:1184   .text.reset_handler:0000000000000815 $d
       stm32eforth.s:1184   .text.reset_handler:0000000000000816 $t
       stm32eforth.s:1218   .text.reset_handler:0000000000000849 $d
       stm32eforth.s:1218   .text.reset_handler:000000000000084a $t
       stm32eforth.s:1229   .text.reset_handler:0000000000000859 $d
       stm32eforth.s:1229   .text.reset_handler:000000000000085a $t
       stm32eforth.s:1240   .text.reset_handler:000000000000086b $d
       stm32eforth.s:1240   .text.reset_handler:000000000000086c $t
       stm32eforth.s:1279   .text.reset_handler:00000000000008a7 $d
       stm32eforth.s:1279   .text.reset_handler:00000000000008a8 $t
       stm32eforth.s:1292   .text.reset_handler:00000000000008bb $d
       stm32eforth.s:1292   .text.reset_handler:00000000000008bc $t
       stm32eforth.s:1319   .text.reset_handler:00000000000008e9 $d
       stm32eforth.s:1319   .text.reset_handler:00000000000008ea $t
ARM GAS  stm32eforth.s 			page 123


       stm32eforth.s:1343   .text.reset_handler:000000000000090d $d
       stm32eforth.s:1343   .text.reset_handler:000000000000090e $t
       stm32eforth.s:1372   .text.reset_handler:000000000000093b $d
       stm32eforth.s:1372   .text.reset_handler:000000000000093c $t
       stm32eforth.s:1445   .text.reset_handler:00000000000009ab $d
       stm32eforth.s:1445   .text.reset_handler:00000000000009ac $t
       stm32eforth.s:1460   .text.reset_handler:00000000000009c3 $d
       stm32eforth.s:1460   .text.reset_handler:00000000000009c4 $t
       stm32eforth.s:1475   .text.reset_handler:00000000000009df $d
       stm32eforth.s:1475   .text.reset_handler:00000000000009e0 $t
       stm32eforth.s:1547   .text.reset_handler:0000000000000a3d $d
       stm32eforth.s:1547   .text.reset_handler:0000000000000a3e $t
       stm32eforth.s:1558   .text.reset_handler:0000000000000a53 $d
       stm32eforth.s:1558   .text.reset_handler:0000000000000a54 $t
       stm32eforth.s:1581   .text.reset_handler:0000000000000a7b $d
       stm32eforth.s:1581   .text.reset_handler:0000000000000a7c $t
       stm32eforth.s:1605   .text.reset_handler:0000000000000aa3 $d
       stm32eforth.s:1605   .text.reset_handler:0000000000000aa4 $t
       stm32eforth.s:1629   .text.reset_handler:0000000000000ac1 $d
       stm32eforth.s:1629   .text.reset_handler:0000000000000ac2 $t
       stm32eforth.s:1653   .text.reset_handler:0000000000000aeb $d
       stm32eforth.s:1653   .text.reset_handler:0000000000000aec $t
       stm32eforth.s:1702   .text.reset_handler:0000000000000b3d $d
       stm32eforth.s:1702   .text.reset_handler:0000000000000b3e $t
       stm32eforth.s:1725   .text.reset_handler:0000000000000b67 $d
       stm32eforth.s:1725   .text.reset_handler:0000000000000b68 $t
       stm32eforth.s:1740   .text.reset_handler:0000000000000b81 $d
       stm32eforth.s:1740   .text.reset_handler:0000000000000b82 $t
       stm32eforth.s:1753   .text.reset_handler:0000000000000b9d $d
       stm32eforth.s:1753   .text.reset_handler:0000000000000b9e $t
       stm32eforth.s:1776   .text.reset_handler:0000000000000bd5 $d
       stm32eforth.s:1776   .text.reset_handler:0000000000000bd6 $t
       stm32eforth.s:1792   .text.reset_handler:0000000000000bed $d
       stm32eforth.s:1792   .text.reset_handler:0000000000000bee $t
       stm32eforth.s:1811   .text.reset_handler:0000000000000c1b $d
       stm32eforth.s:1811   .text.reset_handler:0000000000000c1c $t
       stm32eforth.s:1881   .text.reset_handler:0000000000000cc9 $d
       stm32eforth.s:1881   .text.reset_handler:0000000000000cca $t
       stm32eforth.s:1938   .text.reset_handler:0000000000000d43 $d
       stm32eforth.s:1938   .text.reset_handler:0000000000000d44 $t
       stm32eforth.s:2008   .text.reset_handler:0000000000000de3 $d
       stm32eforth.s:2008   .text.reset_handler:0000000000000de4 $t
       stm32eforth.s:2027   .text.reset_handler:0000000000000e09 $d
       stm32eforth.s:2027   .text.reset_handler:0000000000000e0a $t
       stm32eforth.s:2065   .text.reset_handler:0000000000000e51 $d
       stm32eforth.s:2065   .text.reset_handler:0000000000000e52 $t
       stm32eforth.s:2104   .text.reset_handler:0000000000000e9b $d
       stm32eforth.s:2104   .text.reset_handler:0000000000000e9c $t
       stm32eforth.s:2128   .text.reset_handler:0000000000000ecb $d
       stm32eforth.s:2128   .text.reset_handler:0000000000000ecc $t
       stm32eforth.s:2151   .text.reset_handler:0000000000000ef7 $d
       stm32eforth.s:2151   .text.reset_handler:0000000000000ef8 $t
       stm32eforth.s:2220   .text.reset_handler:0000000000000fb3 $d
       stm32eforth.s:2220   .text.reset_handler:0000000000000fb4 $t
       stm32eforth.s:2234   .text.reset_handler:0000000000000fd1 $d
       stm32eforth.s:2234   .text.reset_handler:0000000000000fd2 $t
       stm32eforth.s:2267   .text.reset_handler:000000000000101f $d
ARM GAS  stm32eforth.s 			page 124


       stm32eforth.s:2267   .text.reset_handler:0000000000001020 $t
       stm32eforth.s:2285   .text.reset_handler:0000000000001043 $d
       stm32eforth.s:2285   .text.reset_handler:0000000000001044 $t
       stm32eforth.s:2303   .text.reset_handler:000000000000106b $d
       stm32eforth.s:2303   .text.reset_handler:000000000000106c $t
       stm32eforth.s:2372   .text.reset_handler:0000000000001103 $d
       stm32eforth.s:2372   .text.reset_handler:0000000000001104 $t
       stm32eforth.s:2526   .text.reset_handler:00000000000012db $d
       stm32eforth.s:2526   .text.reset_handler:00000000000012dc $t
       stm32eforth.s:2547   .text.reset_handler:000000000000130d $d
       stm32eforth.s:2547   .text.reset_handler:000000000000130e $t
       stm32eforth.s:2568   .text.reset_handler:000000000000133f $d
       stm32eforth.s:2568   .text.reset_handler:0000000000001340 $t
       stm32eforth.s:2647   .text.reset_handler:00000000000013c7 $d
       stm32eforth.s:2647   .text.reset_handler:00000000000013c8 $t
       stm32eforth.s:2685   .text.reset_handler:0000000000001427 $d
       stm32eforth.s:2685   .text.reset_handler:0000000000001428 $t
       stm32eforth.s:2855   .text.reset_handler:000000000000160b $d
       stm32eforth.s:2855   .text.reset_handler:000000000000160c $t
       stm32eforth.s:2900   .text.reset_handler:000000000000166d $d
       stm32eforth.s:2900   .text.reset_handler:000000000000166e $t
       stm32eforth.s:2915   .text.reset_handler:0000000000001691 $d
       stm32eforth.s:2915   .text.reset_handler:0000000000001692 $t
       stm32eforth.s:3170   .text.reset_handler:000000000000190f $d
       stm32eforth.s:3170   .text.reset_handler:0000000000001910 $t
       stm32eforth.s:3343   .text.reset_handler:0000000000001ac7 $d
       stm32eforth.s:3343   .text.reset_handler:0000000000001ac8 $t
       stm32eforth.s:3351   .text.reset_handler:0000000000001ae3 $d
       stm32eforth.s:3351   .text.reset_handler:0000000000001ae4 $t
       stm32eforth.s:3360   .text.reset_handler:0000000000001af1 $d
       stm32eforth.s:3360   .text.reset_handler:0000000000001af2 $t
       stm32eforth.s:3384   .text.reset_handler:0000000000001b33 $d
       stm32eforth.s:3384   .text.reset_handler:0000000000001b34 $t
       stm32eforth.s:3397   .text.reset_handler:0000000000001b51 $d
       stm32eforth.s:3397   .text.reset_handler:0000000000001b52 $t
       stm32eforth.s:3418   .text.reset_handler:0000000000001b7f $d
       stm32eforth.s:3418   .text.reset_handler:0000000000001b80 $t
       stm32eforth.s:3466   .text.reset_handler:0000000000001bd1 $d
       stm32eforth.s:3466   .text.reset_handler:0000000000001bd2 $t
       stm32eforth.s:3524   .text.reset_handler:0000000000001c6b $d
       stm32eforth.s:3524   .text.reset_handler:0000000000001c6c $t
       stm32eforth.s:3551   .text.reset_handler:0000000000001cc1 $d
       stm32eforth.s:3551   .text.reset_handler:0000000000001cc2 $t
       stm32eforth.s:3575   .text.reset_handler:0000000000001d09 $d
       stm32eforth.s:3575   .text.reset_handler:0000000000001d0a $t
       stm32eforth.s:3591   .text.reset_handler:0000000000001d39 $d
       stm32eforth.s:3591   .text.reset_handler:0000000000001d3a $t
       stm32eforth.s:3676   .text.reset_handler:0000000000001e3b $d
       stm32eforth.s:3676   .text.reset_handler:0000000000001e3c $t
       stm32eforth.s:3687   .text.reset_handler:0000000000001e51 $d
       stm32eforth.s:3687   .text.reset_handler:0000000000001e52 $t
       stm32eforth.s:3719   .text.reset_handler:0000000000001ead $d
       stm32eforth.s:3719   .text.reset_handler:0000000000001eae $t
       stm32eforth.s:3769   .text.reset_handler:0000000000001f43 $d
       stm32eforth.s:3769   .text.reset_handler:0000000000001f44 $t
       stm32eforth.s:3950   .text.reset_handler:00000000000020f1 $d
       stm32eforth.s:3950   .text.reset_handler:00000000000020f2 $t
ARM GAS  stm32eforth.s 			page 125


       stm32eforth.s:3992   .text.reset_handler:000000000000214f $d
       stm32eforth.s:3992   .text.reset_handler:0000000000002150 $t
       stm32eforth.s:4028   .text.reset_handler:00000000000021af $d
       stm32eforth.s:4028   .text.reset_handler:00000000000021b0 $t
       stm32eforth.s:4043   .text.reset_handler:00000000000021d1 $d
       stm32eforth.s:4043   .text.reset_handler:00000000000021d2 $t
       stm32eforth.s:4072   .text.reset_handler:0000000000002211 $d
       stm32eforth.s:4072   .text.reset_handler:0000000000002212 $t
       stm32eforth.s:4099   .text.reset_handler:000000000000224f $d
       stm32eforth.s:4099   .text.reset_handler:0000000000002250 $t
       stm32eforth.s:4113   .text.reset_handler:000000000000226b $d
       stm32eforth.s:4113   .text.reset_handler:000000000000226c $t
       stm32eforth.s:4127   .text.reset_handler:0000000000002287 $d
       stm32eforth.s:4127   .text.reset_handler:0000000000002288 $t
       stm32eforth.s:4200   .text.reset_handler:0000000000002341 $d
       stm32eforth.s:4200   .text.reset_handler:0000000000002342 $t
       stm32eforth.s:4374   .text.reset_handler:0000000000002501 $d
       stm32eforth.s:4374   .text.reset_handler:0000000000002502 $t
       stm32eforth.s:4446   .text.reset_handler:00000000000025cf $d
       stm32eforth.s:4446   .text.reset_handler:00000000000025d0 $t
       stm32eforth.s:4466   .text.reset_handler:0000000000002609 $d
       stm32eforth.s:4466   .text.reset_handler:000000000000260a $t
       stm32eforth.s:4513   .text.reset_handler:0000000000002671 $d
       stm32eforth.s:4513   .text.reset_handler:0000000000002672 $t
       stm32eforth.s:4553   .text.reset_handler:00000000000026e7 $d
       stm32eforth.s:4553   .text.reset_handler:00000000000026e8 $t
       stm32eforth.s:4660   .text.reset_handler:0000000000002811 $d
       stm32eforth.s:4660   .text.reset_handler:0000000000002812 $t
       stm32eforth.s:4680   .text.reset_handler:000000000000284b $d
       stm32eforth.s:4680   .text.reset_handler:000000000000284c $t
       stm32eforth.s:4936   .text.reset_handler:0000000000002b27 $d
       stm32eforth.s:4936   .text.reset_handler:0000000000002b28 $t
       stm32eforth.s:5026   .text.reset_handler:0000000000002c97 $d
       stm32eforth.s:5030   .text.reset_handler:0000000000002ca1 $d
       stm32eforth.s:5030   .text.reset_handler:0000000000002ca2 $t
       stm32eforth.s:5042   .text.reset_handler:0000000000002cc5 $d
       stm32eforth.s:5042   .text.reset_handler:0000000000002cc6 $t
       stm32eforth.s:5046   .text.reset_handler:0000000000002cd3 $d
       stm32eforth.s:5062   .text.reset_handler:0000000000002cf9 $d
       stm32eforth.s:5062   .text.reset_handler:0000000000002cfa $t
       stm32eforth.s:5066   .text.reset_handler:0000000000002d07 $d
       stm32eforth.s:5070   .text.reset_handler:0000000000002d0f $d
       stm32eforth.s:5074   .text.reset_handler:0000000000002d1b $d
       stm32eforth.s:5074   .text.reset_handler:0000000000002d1c $t

UNDEFINED SYMBOLS
_mstack
