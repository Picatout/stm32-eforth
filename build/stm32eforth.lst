ARM GAS  stm32eforth.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  stm32eforth.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.p2align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.p2aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m3
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
ARM GAS  stm32eforth.s 			page 3


  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
ARM GAS  stm32eforth.s 			page 4


  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  81              	
  82              	/* blue pill specific constants */ 
  83              	  .equ LED_GPIO, GPIOC_BASE_ADR
  84              	  .equ LED_PIN, 13
  85              	  .equ UART, USART1_BASE_ADR 
  86              	
ARM GAS  stm32eforth.s 			page 5


  87              	/* eForth specific constants */
  88              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  89              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  90              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  91              	.equ UPP ,	0x20000140	/*start of user area (UP0) */
  92              	.equ DTOP ,	0x20000240	/*start of usable RAM area (HERE) */
  93              	.equ DEND , 0x20004E00  /*usable RAM end */
  94              	 .equ RAMOFFSET ,	0x20000140	// remap
  95              	 .equ RAMEND, 0x20005000 // 20Ko
  96              	 .equ FLASHOFFSET ,	0x08000c00	// remap
  97              	//.equ RAMOFFSET  ,	0x00000000	/* absolute */
  98              	//.equ MAPOFFSET  ,	0x00000000	/* absolute */
  99              	  .equ MAPOFFSET , (RAMOFFSET-FLASHOFFSET)
 100              	
 101              	/*************************************
 102              	   system variables offset from UPP
 103              	*************************************/
 104              	  .equ SEED_OFS, 4    // prng seed 
 105              	  .equ TICKS_OFS, SEED_OFS+4  // millseconds counter
 106              	  .equ TIMER_OFS, TICKS_OFS+4  // count down timer
 107              	  .equ TORAM_OFS, TIMER_OFS+4  // compile to RAM 
 108              	  .equ IMG_SIGN_OFS, TORAM_OFS+4  // image signature  
 109              	  .equ BOOT_OFS, IMG_SIGN_OFS+4  // boot program address
 110              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
 111              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
 112              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
 113              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
 114              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
 115              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
 116              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
 117              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
 118              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
 119              	  .equ FORTH_CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
 120              	  .equ USER_CTOP_OFS, FORTH_CTOP_OFS+4  // ram free dictionary address
 121              	  .equ LASTN_OFS, USER_CTOP_OFS+4     // last word in dictionary link nfa 
 122              	  .equ VARS_END_OFS, LASTN_OFS+4 // end of system variables  
 123              	  
 124              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
 125              	  .equ RX_QUEUE_OFS, VARS_END_OFS+4 // rx queue 
 126              	  .equ RX_HEAD_OFS, RX_QUEUE_OFS+RX_QUEUE_SIZE // queue head indice 
 127              	  .equ RX_TAIL_OFS, RX_HEAD_OFS+4 // queue tail indice 
 128              	
 129              	
 130              	/***********************************************
 131              	* MACROS
 132              	*	Assemble inline direct threaded code ending.
 133              	***********************************************/
 134              		.macro _CALL fn /* low level routine call */ 
 135              	 	PUSH {LR}
 136              		BL \fn  
 137              		POP {LR}
 138              		.endm
 139              		
 140              		.macro _MOV32 R V 
 141              		MOV \R, #\V&0xffff
 142              		MOVT \R, #\V>>16
 143              		.endm
ARM GAS  stm32eforth.s 			page 6


 144              	
 145              		.macro	_NEXT /*end low level word */
 146              		BX	LR
 147              		.endm
 148              	
 149              	 	.macro	_NEST /*start high level word */
 150              		STMFD	R2!,{LR}
 151              		.endm
 152              	
 153              	 	.macro	_UNNEST	/*end high level word */
 154              		LDMFD	R2!,{PC}
 155              		.endm
 156              	
 157              	 	.macro	_DOLIT /*long literals */
 158              		BL	DOLIT
 159              		.endm
 160              	
 161              	 	.macro	_PUSH	/*push R5 on data stack*/
 162              		STR	R5,[R1,#-4]!
 163              		.endm
 164              	
 165              	 	.macro	_POP /*pop data stack to R5 */
 166              		LDR	R5,[R1],#4
 167              		.endm
 168              	
 169              	/*************************************
 170              	*   interrupt service vectors table 
 171              	**************************************/
 172              	   .section  .isr_vector,"a",%progbits
 173              	  .type  isr_vectors, %object
 174              	
 175              	isr_vectors:
 176 0000 00000000 	  .word   _mstack          /* main return stack address */
 177 0004 00000000 	  .word   reset_handler    /* startup address */
 178              	/* core interrupts || exceptions */
 179 0008 00000000 	  .word   default_handler  /*  NMI */
 180 000c 00000000 	  .word   default_handler  /*  HardFault */
 181 0010 00000000 	  .word   default_handler  /*  Memory Management */
 182 0014 00000000 	  .word   default_handler  /* Bus fault */
 183 0018 00000000 	  .word   default_handler  /* Usage fault */
 184 001c 00000000 	  .word   0
 185 0020 00000000 	  .word   0
 186 0024 00000000 	  .word   0
 187 0028 00000000 	  .word   0
 188 002c 00000000 	  .word   default_handler  /* SWI instruction */
 189 0030 00000000 	  .word   default_handler  /* Debug monitor */
 190 0034 00000000 	  .word   0
 191 0038 00000000 	  .word   default_handler  /* PendSV */
 192 003c 00000000 	  .word   systick_handler  /* Systick */
 193              	  
 194              	  /* External Interrupts */
 195 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 196 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 197 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 198 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 199 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 200 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
ARM GAS  stm32eforth.s 			page 7


 201 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 202 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 203 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 204 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 205 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 206 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 207 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 208 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 209 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 210 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 211 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 212 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 213 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 214 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 215 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 216 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 217 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 218 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 219 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 220 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 221 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 222 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 223 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 224 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 225 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 226 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 227 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 228 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 229 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 230 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 231 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 232 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
 233 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 234 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 235 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 236 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 237 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 238 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 239 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 240 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 241 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 242 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 243 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 244 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 245 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 246 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 247 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 248 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 249 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 250 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 251 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 252 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 253 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 254 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 255              	isr_end:
 256              	  .size  isr_vectors, .-isr_vectors
 257              	
ARM GAS  stm32eforth.s 			page 8


 258              	/*****************************************************
 259              	* default isr handler called on unexpected interrupt
 260              	*****************************************************/
 261              	    .section  .text.default_handler,"ax",%progbits
 262              	
 263              	  .type default_handler, %function
 264              	  .p2align 2 
 265              	  .global default_handler
 266              	default_handler:
 267 0000 014D     		ldr r5,exception_msg 
 268 0002 00F04FF8 		bl uart_puts 
 269 0006 39E0     		b reset_mcu    
 270              	  .size  default_handler, .-default_handler
 271              	exception_msg:
 272 0008 0C000000 		.word .+4 
 273 000c 12       		.byte 18
 274 000d 0A0D6578 		.ascii "\n\rexeption reboot!"
 274      65707469 
 274      6F6E2072 
 274      65626F6F 
 274      7421
 275 001f 00       		.p2align 2
 276              	
 277              	/*********************************
 278              		system milliseconds counter
 279              	*********************************/	
 280              	  .type systick_handler, %function
 281              	  .p2align 2 
 282              	  .global systick_handler
 283              	systick_handler:
 284 0020 4FF4A073 	  mov r3,#UPP&0xffff
 285 0024 C2F20003 	  movt r3,#UPP>>16  	
 286 0028 9868     	  ldr r0,[r3,#TICKS_OFS]  
 287 002a 00F10100 	  add r0,#1
 288 002e 9860     	  str r0,[r3,#TICKS_OFS]
 289 0030 D868     	  ldr r0,[r3,#TIMER_OFS]
 290 0032 10B1     	  cbz r0, systick_exit
 291 0034 A0F10100 	  sub r0,#1
 292 0038 D860     	  str r0,[r3,#TIMER_OFS]
 293              	systick_exit:
 294 003a 7047     	  bx lr
 295              	
 296              	
 297              	
 298              	/**************************
 299              		UART RX handler
 300              	**************************/
 301              		.p2align 2
 302              		.type uart_rx_handler, %function
 303              	uart_rx_handler:
 304 003c 2DE9D002 		push {r4,r6,r7,r9}
 305 0040 4FF46054 		_MOV32 r4,UART 
 305      C4F20104 
 306 0048 2668     		ldr r6,[r4,#USART_SR]
 307 004a D4F80490 		ldr r9,[r4,#USART_DR]
 308 004e 16F0200F 		tst r6,#(1<<5) // RXNE 
 309 0052 0DD0     		beq 2f // no char received 
ARM GAS  stm32eforth.s 			page 9


 310 0054 B9F1030F 		cmp r9,#3
 311 0058 0DD0     		beq user_reboot // received CTRL-C then reboot MCU 
 312 005a 03F15007 		add r7,r3,#RX_QUEUE_OFS
 313 005e 5C6E     		ldr r4,[r3,#RX_TAIL_OFS]
 314 0060 2744     		add r7,r7,r4 
 315 0062 87F80090 		strb r9,[r7]
 316 0066 04F10104 		add r4,#1 
 317 006a 04F00F04 		and r4,#(RX_QUEUE_SIZE-1)
 318 006e 5C66     		str r4,[r3,#RX_TAIL_OFS]
 319              	2:	
 320 0070 BDE8D002 		pop {r4,r6,r7,r9}
 321 0074 7047     		bx lr 
 322              	
 323              	user_reboot:
 324 0076 064D     		ldr r5,user_reboot_msg
 325 0078 00F014F8 		bl uart_puts 
 326              	reset_mcu: 
 327 007c 0348     		ldr r0,scb_adr 
 328 007e C168     		ldr r1,[r0,#SCB_AIRCR]
 329 0080 41F00401 		orr r1,#(1<<2)
 330 0084 C0F2FA51 		movt r1,#SCB_VECTKEY
 331 0088 C160     		str r1,[r0,#SCB_AIRCR]
 332 008a FEE7     		b . 
 333              		.p2align 2 
 334              	scb_adr:
 335 008c 00ED00E0 		.word SCB_BASE_ADR 
 336              	user_reboot_msg:
 337 0090 94000000 		.word .+4
 338 0094 0D       		.byte 13 
 339 0095 0D757365 		.ascii "\ruser reboot!"
 339      72207265 
 339      626F6F74 
 339      21
 340 00a2 00BF     		.p2align 2 
 341              	
 342              	// send counted string to uart 
 343              	// input: r5 string* 
 344              		.type uart_puts,%function 
 345              	uart_puts:
 346 00a4 4FF46050 		_MOV32 r0,UART 
 346      C4F20100 
 347 00ac 15F8011B 		ldrb r1,[r5],#1 // string length
 348 00b0 0940     		ands r1,r1
 349 00b2 0CD0     	1:	beq 9f 
 350 00b4 0268     	2:  ldr r2,[r0,#USART_SR]
 351 00b6 12F08002 		ands r2,#0x80 
 352 00ba FBD0     		beq 2b 	
 353 00bc 15F8012B 		ldrb r2,[r5],#1
 354 00c0 0271     		strb r2,[r0,#USART_DR]
 355 00c2 0139     		subs r1,r1,#1 
 356 00c4 F6D1     		bne 2b 
 357 00c6 0268     	3:	ldr r2,[r0,#USART_SR]
 358 00c8 12F04002 		ands r2,#(1<<6)
 359 00cc FBD0     		beq 3b 
 360 00ce 7047     	9:  bx lr 
 361              	
 362              	
ARM GAS  stm32eforth.s 			page 10


 363              	/**************************************
 364              	  reset_handler execute at MCU reset
 365              	***************************************/
 366              	    .section  .text.reset_handler
 367              	  .type  reset_handler, %function
 368              	  .p2align 2 
 369              	  .global reset_handler
 370              	reset_handler:
 371 0000 00F07BF8 		bl	remap 
 372 0004 00F008F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 373 0008 00F056F8 		bl  uart_init
 374              	//	bl	UNLOCK			/* unlock flash memory */
 375 000c 0148     		ldr r0,forth_entry
 376 000e 40F00100 		orr r0,#1
 377 0012 0047     		bx r0 
 378              	forth_entry:
 379 0014 D0200018 		.word COLD+MAPOFFSET 
 380              	
 381              	  .type init_devices, %function
 382              	  .p2align 2 
 383              	init_devices:
 384              	/* init clock to HSE 72 Mhz */
 385              	/* set 2 wait states in FLASH_ACR_LATENCY */
 386 0018 4FF40050 		mov r0,#FLASH_BASE_ADR&0xffff
 387 001c C4F20200 		movt r0,#FLASH_BASE_ADR>>16 
 388 0020 4FF01202 	  mov r2,#0x12
 389 0024 0260     	  str r2,[r0,#FLASH_ACR]
 390              	/* configure clock for HSE, 8 Mhz crystal */
 391              	/* enable HSE in RCC_CR */
 392 0026 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 393 002a C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 394 002e 0168     	  ldr r1,[r0,#RCC_CR]
 395 0030 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 396 0034 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 397              	/* wait HSERDY loop */
 398              	wait_hserdy:
 399 0036 0168     	  ldr r1,[r0,#RCC_CR]
 400 0038 11F4003F 	  tst r1,#(1<<17)
 401 003c FBD0     	  beq wait_hserdy
 402              	
 403              	/************************************************* 
 404              	   configure PLL mul factor and source 
 405              	   SYSCLOCK=72 Mhz
 406              	   select HSE as  PLL source clock
 407              	   multiply frequency by 9 
 408              	   APB1 clock is limited to 36 Mhz so divide by 2 
 409              	****************************************************/
 410 003e 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 411 0042 C0F21D01 	  movt r1,#(7<<2)|1
 412 0046 4160     	  str r1,[r0,#RCC_CFGR]
 413              	  /* enable PLL */
 414 0048 0168     	  ldr r1,[r0,#RCC_CR]
 415 004a 41F08071 	  orr r1, #1<<24 
 416 004e 0160     	  str r1,[r0,#RCC_CR]
 417              	/* wait for PLLRDY */
 418              	wait_pllrdy:
 419 0050 0168     	  ldr r1,[r0,#RCC_CR]
ARM GAS  stm32eforth.s 			page 11


 420 0052 11F0007F 	  tst r1,#(1<<25)
 421 0056 FBD0     	  beq wait_pllrdy 
 422              	/* select PLL as sysclock */
 423 0058 4168     	  ldr r1,[r0,#RCC_CFGR]
 424 005a 4FF6FC72 	  mov r2,#0xfffc
 425 005e CFF6FF72 	  movt r2,#0xffff
 426 0062 01EA0201 	  and r1,r1,r2 
 427 0066 4FF00202 	  mov r2,#2
 428 006a 41EA0201 	  orr r1,r1,r2
 429 006e 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 430              	/* wait for SWS==2 */
 431              	wait_sws:
 432 0070 4168     	  ldr r1,[r0,#RCC_CFGR]
 433 0072 11F0080F 	  tst r1,#(2<<2)
 434 0076 FBD0     	  beq wait_sws
 435              	/* now sysclock is 72 Mhz */
 436              	
 437              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 438 0078 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 439 007c C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 440 0080 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 441 0084 8161     	  str	r1, [r0, #RCC_APB2ENR]
 442              	
 443              	/* configure GPIOC:13 as output for user LED */
 444 0086 4FF48050 	  mov r0,#GPIOC_BASE_ADR&0xffff
 445 008a C4F20100 	  movt r0,#GPIOC_BASE_ADR>>16
 446 008e 4168     	  ldr r1,[r0,#GPIO_CRH]
 447 0090 6FF47002 	  mvn r2,#(15<<20)
 448 0094 01EA0201 	  and r1,r1,r2
 449 0098 4FF4C002 	  mov r2,#(6<<20)
 450 009c 41EA0201 	  orr r1,r1,r2
 451 00a0 4160     	  str r1,[r0,#GPIO_CRH]
 452              	
 453              	/* configure systicks for 1msec ticks */
 454 00a2 4EF21000 	  mov r0,#STK_BASE_ADR&0xFFFF
 455 00a6 CEF20000 	  movt r0,#STK_BASE_ADR>>16	
 456 00aa 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 457 00ae 4160     	  str r1,[r0,#STK_LOAD]
 458 00b0 4FF00301 	  mov r1,#3
 459 00b4 0160     	  str r1,[r0,STK_CTL]
 460 00b6 7047     	  _NEXT  
 461              	
 462              	/*******************************
 463              	  initialize UART peripheral 
 464              	********************************/
 465              		.type uart_init, %function
 466              	uart_init:
 467              	/* set GPIOA PIN 9, uart TX  */
 468 00b8 4FF40060 	  _MOV32 r0,GPIOA_BASE_ADR
 468      C4F20100 
 469 00c0 4168     	  ldr r1,[r0,#GPIO_CRH]
 470 00c2 6FF0F002 	  mvn r2,#(15<<4)
 471 00c6 01EA0201 	  and r1,r1,r2
 472 00ca 4FF0A002 	  mov r2,#(0xA<<4)
 473 00ce 41EA0201 	  orr r1,r1,r2 
 474 00d2 4160     	  str r1,[r0,#GPIO_CRH]
 475 00d4 4FF46050 	  _MOV32 r0,UART 
ARM GAS  stm32eforth.s 			page 12


 475      C4F20100 
 476              	/* BAUD rate */
 477 00dc 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 478 00e0 8160     	  str r1,[r0,#USART_BRR]
 479 00e2 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 480 00e6 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 481              	/* enable interrupt in NVIC */
 482 00e8 4FF46140 	  _MOV32 r0,NVIC_BASE_ADR
 482      CEF20000 
 483 00f0 4168     	  ldr r1,[r0,#NVIC_ISER1]
 484 00f2 41F02001 	  orr r1,#32   
 485 00f6 4160     	  str r1,[r0,#NVIC_ISER1]
 486 00f8 7047     	  bx lr 
 487              	
 488              	/* copy system to RAM */ 
 489              		.type remap, %function 
 490              	
 491              	remap:
 492              	// tranfert isr_vector to RAM at 0x20000000
 493 00fa 4FF00000 		_MOV32 r0,RAM_ADR
 493      C2F20000 
 494 0102 81EA0101 		eor r1,r1
 495 0106 4FF49872 		mov r2,#(isr_end-isr_vectors) 
 496 010a 51F8043B 	1:	ldr r3,[r1],#4
 497 010e 40F8043B 		str r3,[r0],#4
 498 0112 043A     		subs r2,#4
 499 0114 F9D1     		bne 1b
 500              	// copy system variable and code 	
 501 0116 0D48     		ldr r0,remap_dest
 502 0118 0B49     		ldr r1,remap_src 
 503 011a 42F61802 		mov r2,#CTOP-UZERO 
 504 011e 02F10302 		add r2,r2,#3
 505 0122 22F00302 		and r2,r2,#~3 
 506 0126 51F8043B 	1:	ldr r3,[r1],#4 
 507 012a 40F8043B 		str r3,[r0],#4 
 508 012e 043A     		subs R2,#4 
 509 0130 F9D1     		bne 1b
 510              	// zero end of RAM 
 511 0132 4FF4A042 		mov r2,#0x5000
 512 0136 C2F20002 		movt r2,#0x2000
 513 013a 83EA0303 		eor r3,r3,r3 
 514 013e 40F8043B 	2:  str r3,[r0],#4
 515 0142 9042     		cmp r0,r2 
 516 0144 FBDB     		blt 2b 
 517 0146 7047     		_NEXT 
 518              	remap_src:
 519 0148 00040000 		.word UZERO 
 520              	remap_dest:
 521 014c 40010020 		.word RAMOFFSET 
 522              	
 523              	/********************
 524              	* Version control
 525              	*******************/
 526              	.equ VER ,	0x01	/*major release version */
 527              	.equ EXT ,	0x00	/*minor extension */
 528              	
 529              	/* Constants */
ARM GAS  stm32eforth.s 			page 13


 530              	
 531              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 532              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 533              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 534              	
 535              	.equ CELLL ,	4	/*size of a cell */
 536              	.equ BASEE ,	10	/*default radix */
 537              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 538              	
 539              	.equ BKSPP ,	8	/*backspace */
 540              	.equ LF ,	10	  /*line feed */
 541              	.equ CRR ,	13	/*carriage return */
 542              	.equ ERR ,	27	/*error escape */
 543              	.equ TIC ,	39	/*tick */
 544              	
 545              	/********************************************************
 546              	* RAM memory mapping
 547              	* 	0x20000000	RAM base address
 548              	*	0x20000000  system variables	
 549              	* 	0x20000100	Forth dictionary
 550              	* 	0x2000????	top of dictionary, HERE
 551              	* 	0x2000????	WORD buffer, HERE+16
 552              	*   0x20004E00  end of user space
 553              	* 	0x20004E80	top of data stack  R2
 554              	* 	0x20004E80	TIB terminal input buffer
 555              	* 	0x20004F80	top of return stack  R1
 556              	* 	0x20005000	top of hardware stack for interrupts R14
 557              	********************************************************/
 558              	
 559              	
 560              	/******************************************************
 561              	*  COLD start moves the following to USER variables.
 562              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 563              	******************************************************/
 564 0150 AFF30080 		.p2align 10
 564      AFF30080 
 564      AFF30080 
 564      AFF30080 
 564      AFF30080 
 565              	
 566              	UZERO:
 567 0400 00000000 		.word 0  			/*Reserved */
 568 0404 55AA0000 		.word 0xaa55 /* SEED  */ 
 569 0408 00000000 		.word 0      /* MSEC */
 570 040c 00000000 	    .word 0     /* TIMER */
 571 0410 FFFFFFFF 		.word -1    /* >RAM */ 
 572 0414 494D4147 		.ascii "IMAG" /* signature */ 
 573 0418 5C200018 		.word HI+MAPOFFSET  /*'BOOT */
 574 041c 0A000000 		.word BASEE 	/*BASE */
 575 0420 00000000 		.word 0			/*tmp */
 576 0424 00000000 		.word 0			/*SPAN */
 577 0428 00000000 		.word 0			/*>IN */
 578 042c 00000000 		.word 0			/*#TIB */
 579 0430 804E0020 		.word TIBB	/*TIB */
 580 0434 500F0018 		.word INTER+MAPOFFSET	/*'EVAL */
 581 0438 00000000 		.word 0			/*HLD */
 582 043c C8200018 		.word LASTN+MAPOFFSET	/*CONTEXT */
ARM GAS  stm32eforth.s 			page 14


 583 0440 58210018 		.word CTOP+MAPOFFSET	/* FCP end of system dictionnary */
 584 0444 58210018 		.word CTOP+MAPOFFSET	/* CP end of RAM dictionary RAM */
 585 0448 C8200018 		.word LASTN+MAPOFFSET	/*LAST word in dictionary */
 586 044c 00000000 		.word 0,0			/*reserved */
 586      00000000 
 587              	ULAST:
 588 0454 00000000 		.space  RX_QUEUE_SIZE+8 /* space reserved for rx_queue,head and tail pointer.
 588      00000000 
 588      00000000 
 588      00000000 
 588      00000000 
 589              	
 590              	
 591              	/***********************************
 592              	//  Start of Forth dictionary
 593              	***********************************/
 594              	
 595              		.p2align 2 
 596              	
 597              	// RANDOM ( n1 -- {0..n1-1} )
 598              	// return pseudo random number 
 599              	// REF: https://en.wikipedia.org/wiki/Xorshift
 600              	
 601 046c 00000000 		.word 0
 602 0470 06       	_RAND: .byte 6
 603 0471 52414E44 		.ascii "RANDOM"
 603      4F4D
 604 0477 00       		.p2align 2 
 605              	RAND:
 606 0478 42F804ED 		_NEST 
 607 047c 00F0E0FA 		bl SEED 
 608 0480 00F0C4F8 		bl AT 
 609 0484 4FEA4534 		lsl r4,r5,#13
 610 0488 85EA0405 		eor r5,r4
 611 048c 4FEA5544 		lsr r4,r5,#17
 612 0490 85EA0405 		eor r5,r4
 613 0494 4FEA4514 		lsl r4,r5,#5
 614 0498 85EA0405 		eor r5,r4
 615 049c 00F0FAF8 		bl DUPP 
 616 04a0 00F0CEFA 		bl SEED 
 617 04a4 00F0A8F8 		bl STORE 
 618 04a8 00F028FA 		bl ABSS
 619 04ac 00F0FAF8 		bl SWAP 
 620 04b0 00F01CFC 		bl MODD 
 621 04b4 52F804FB 		_UNNEST 
 622              	
 623              	// PAUSE ( u -- ) 
 624              	// suspend execution for u milliseconds
 625 04b8 B0F9FF17 		.word _RAND+MAPOFFSET
 626 04bc 05       	_PAUSE: .byte 5
 627 04bd 50415553 		.ascii "PAUSE"
 627      45
 628 04c2 00BF     		.p2align 2
 629              	PAUSE:
 630 04c4 42F804ED 		_NEST 
 631 04c8 00F0CEFA 		BL TIMER 
 632 04cc 00F094F8 		BL STORE 
ARM GAS  stm32eforth.s 			page 15


 633              	PAUSE_LOOP:
 634 04d0 00F0CAFA 		BL TIMER 
 635 04d4 00F09AF8 		BL AT 
 636 04d8 00F072F8 		BL QBRAN 
 637 04dc E8040000 		.word PAUSE_EXIT 
 638 04e0 00F07AF8 		BL BRAN 
 639 04e4 D0040000 		.word PAUSE_LOOP 
 640              	PAUSE_EXIT: 		
 641 04e8 52F804FB 		_UNNEST 
 642              	
 643              	//  ULED ( T|F -- )
 644              	// control user LED, -1 ON, 0 OFF  
 645 04ec FCF9FF17 		.word _PAUSE + MAPOFFSET
 646 04f0 04       	_ULED: .byte 4
 647 04f1 554C4544 		.ascii "ULED"
 648 04f5 0000BF   		.p2align 2
 649              		.type ULED, %function 
 650              	ULED:
 651 04f8 4FF40056 		mov r6,#(1<<LED_PIN)
 652 04fc 4FF48054 		mov r4,#LED_GPIO&0xffff
 653 0500 C4F20104 		movt r4,#LED_GPIO>>16
 654 0504 2800     		movs r0,r5 
 655 0506 51F8045B 		_POP
 656 050a 01D0     		beq ULED_OFF 
 657 050c 6661     		str r6,[r4,#GPIO_BRR]
 658 050e 7047     		_NEXT 
 659              	ULED_OFF:
 660 0510 2661     		str r6,[r4,#GPIO_BSRR]
 661 0512 7047     		_NEXT 
 662              		
 663              	//    ?RX	 ( -- c T | F )
 664              	// 	Return input character and true, or a false if no input.
 665 0514 30FAFF17 		.word	_ULED+MAPOFFSET
 666 0518 04       	_QRX:	.byte   4
 667 0519 3F4B4559 		.ascii "?KEY"
 668 051d 0000BF   		.p2align 2 
 669              	QKEY:
 670              	QRX: 
 671 0520 41F8045D 		_PUSH
 672 0524 5F6E     		ldr r7,[r3,#RX_TAIL_OFS] 
 673 0526 1E6E     		ldr r6,[r3,#RX_HEAD_OFS]
 674 0528 96EA0705 		eors r5,r6,r7 
 675 052c 0CD0     		beq 1f
 676 052e 03F15007 		add r7,r3,#RX_QUEUE_OFS 
 677 0532 3744     		add r7,r6 
 678 0534 3D78     		ldrb r5,[r7]
 679 0536 06F10106 		add r6,#1 
 680 053a 06F00F06 		and r6,#(RX_QUEUE_SIZE-1)
 681 053e 1E66     		str r6,[R3,#RX_HEAD_OFS]
 682 0540 41F8045D 		_PUSH 
 683 0544 4FF0FF35 		mov r5,#-1
 684 0548 7047     	1:	_NEXT 
 685 054a 00BF     		.p2align 2 
 686              	
 687              	//    TX!	 ( c -- )
 688              	// 	Send character c to the output device.
 689              	
ARM GAS  stm32eforth.s 			page 16


 690 054c 58FAFF17 		.word	_QRX+MAPOFFSET
 691 0550 04       	_TXSTO:	.byte 4
 692 0551 454D4954 		.ascii "EMIT"
 693 0555 0000BF   		.p2align 2 	
 694              	TXSTO:
 695              	EMIT:
 696              	TECHO:
 697 0558 4FF46054 		_MOV32 r4,UART 
 697      C4F20104 
 698 0560 2668     	1:	ldr	r6, [r4, #USART_SR]	
 699 0562 16F08006 		ands	r6, #0x80		//  TXE bit 
 700 0566 FBD0     		beq	1b
 701 0568 2571     		strb	r5, [r4, #USART_DR]	
 702 056a 51F8045B 		_POP
 703 056e 7047     		_NEXT 
 704              		
 705              	// **************************************************************************
 706              	//  The kernel
 707              	
 708              	//    NOP	( -- )
 709              	// 	do nothing.
 710              	
 711 0570 90FAFF17 		.word	_TXSTO+MAPOFFSET
 712 0574 03       	_NOP:	.byte   3
 713 0575 4E4F50   		.ascii "NOP"
 714              		.p2align 2 	
 715              	NOP:
 716 0578 7047     		_NEXT
 717              	 
 718              	
 719              	//    doLIT	( -- w )
 720              	// 	Push an inline literal.
 721              	
 722              	// 	.word	_NOP+MAPOFFSET
 723              	// _LIT	.byte   COMPO+5
 724              	// 	.ascii "doLIT"
 725              	// 	.p2align 2 	
 726              	DOLIT:
 727 057a 41F8045D 		_PUSH				//  store R5 on data stack
 728 057e 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 729 0582 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 730 0586 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 731 058a 7047     		_NEXT
 732              	
 733              	//    EXECUTE	( ca -- )
 734              	// 	Execute the word at ca.
 735              	
 736 058c B4FAFF17 		.word	_NOP+MAPOFFSET
 737 0590 07       	_EXECU:	.byte   7
 738 0591 45584543 		.ascii "EXECUTE"
 738      555445
 739              		.p2align 2 	
 740              	EXECU:
 741 0598 45F00104 		ORR	R4,R5,#1		//  b0=1 
 742 059c 51F8045B 		_POP
 743 05a0 2047     		BX	R4
 744              	
ARM GAS  stm32eforth.s 			page 17


 745              	//    next	( -- ) counter on R:
 746              	// 	Run time code for the single index loop.
 747              	// 	: next ( -- ) \ hilevel model
 748              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 749              	
 750              	// 	.word	_EXECU+MAPOFFSET
 751              	// _DONXT	.byte   COMPO+4
 752              	// 	.ascii "next"
 753              	// 	.p2align 2 	
 754              	DONXT:
 755 05a2 1468     		LDR	R4,[R2]   // ( -- u )  
 756 05a4 24B9     		CBNZ R4,NEXT1 
 757              		/* loop done */
 758 05a6 02F10402 		ADD	R2,R2,#4 // drop counter 
 759 05aa 0EF1040E 		ADD	LR,LR,#4 // skip after loop address 
 760 05ae 7047     		_NEXT
 761              	NEXT1:
 762              		/* decrement loop counter */
 763 05b0 A4F10104 		SUB	R4,R4,#1
 764 05b4 1460     		STR	R4,[R2]
 765 05b6 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 766 05ba 4EF0010E 		ORR	LR,LR,#1 // begining of loop
 767 05be 7047     		_NEXT
 768              	
 769              	//    ?branch	( f -- )
 770              	// 	Branch if flag is zero.
 771              	
 772              	// 	.word	_DONXT+MAPOFFSET
 773              	// _QBRAN	.byte   COMPO+7
 774              	// 	.ascii "?branch"
 775              	// 	.p2align 2 	
 776              	QBRAN:
 777 05c0 2C00     		MOVS	R4,R5
 778 05c2 51F8045B 		_POP
 779 05c6 04D1     		BNE	QBRAN1
 780 05c8 5EF801EC 		LDR	LR,[LR,#-1]
 781 05cc 4EF0010E 		ORR LR,LR,#1
 782 05d0 7047     		_NEXT
 783              	QBRAN1:
 784 05d2 0EF1040E 	 	ADD	LR,LR,#4
 785 05d6 7047     		_NEXT
 786              	
 787              	//    branch	( -- )
 788              	// 	Branch to an inline address.
 789              	
 790              	// 	.word	_QBRAN+MAPOFFSET
 791              	// _BRAN	.byte   COMPO+6
 792              	// 	.ascii "branch"
 793              	// 	.p2align 2 	
 794              	BRAN:
 795 05d8 5EF801EC 		LDR	LR,[LR,#-1]
 796 05dc 4EF0010E 		ORR	LR,LR,#1
 797 05e0 7047     		_NEXT
 798              	
 799              	//    EXIT	(  -- )
 800              	// 	Exit the currently executing command.
 801              	
ARM GAS  stm32eforth.s 			page 18


 802 05e2 D0FAFF17 		.word	_EXECU+MAPOFFSET
 803 05e6 04       	_EXIT:	.byte   4
 804 05e7 45584954 		.ascii "EXIT"
 805 05eb 00       		.p2align 2 	
 806              	EXIT:
 807 05ec 52F804FB 		_UNNEST
 808              	
 809              	//    !	   ( w a -- )
 810              	// 	Pop the data stack to memory.
 811              	
 812 05f0 26FBFF17 		.word	_EXIT+MAPOFFSET
 813 05f4 01       	_STORE:	.byte   1
 814 05f5 21       		.ascii "!"
 815 05f6 00BF     		.p2align 2 	
 816              	STORE:
 817 05f8 51F8044B 		LDR	R4,[R1],#4
 818 05fc 2C60     		STR	R4,[R5]
 819 05fe 51F8045B 		_POP
 820 0602 7047     		_NEXT
 821              	
 822              	//    @	   ( a -- w )
 823              	// 	Push memory location to the data stack.
 824              	
 825 0604 34FBFF17 		.word	_STORE+MAPOFFSET
 826 0608 01       	_AT:	.byte   1
 827 0609 40       		.ascii "@"
 828 060a 00BF     		.p2align 2 	
 829              	AT:
 830 060c 2D68     		LDR	R5,[R5]
 831 060e 7047     		_NEXT
 832              	
 833              	//    C!	  ( c b -- )
 834              	// 	Pop the data stack to byte memory.
 835              	
 836 0610 48FBFF17 		.word	_AT+MAPOFFSET
 837 0614 02       	_CSTOR:	.byte   2
 838 0615 4321     		.ascii "C!"
 839 0617 00       		.p2align 2 	
 840              	CSTOR:
 841 0618 51F8044B 		LDR	R4,[R1],#4
 842 061c 2C70     		STRB	R4,[R5]
 843 061e 51F8045B 		_POP
 844 0622 7047     		_NEXT
 845              	
 846              	//    C@	  ( b -- c )
 847              	// 	Push byte memory location to the data stack.
 848              	
 849 0624 54FBFF17 		.word	_CSTOR+MAPOFFSET
 850 0628 02       	_CAT:	.byte   2
 851 0629 4340     		.ascii "C@"
 852 062b 00       		.p2align 2 	
 853              	CAT:
 854 062c 2D78     		LDRB	R5,[R5]
 855 062e 7047     		_NEXT
 856              	
 857              	//    R>	  ( -- w )
 858              	// 	Pop the return stack to the data stack.
ARM GAS  stm32eforth.s 			page 19


 859              	
 860 0630 68FBFF17 		.word	_CAT+MAPOFFSET
 861 0634 02       	_RFROM:	.byte   2
 862 0635 523E     		.ascii "R>"
 863 0637 00       		.p2align 2 	
 864              	RFROM:
 865 0638 41F8045D 		_PUSH
 866 063c 52F8045B 		LDR	R5,[R2],#4
 867 0640 7047     		_NEXT
 868              	
 869              	//    R@	  ( -- w )
 870              	// 	Copy top of return stack to the data stack.
 871              	
 872 0642 74FBFF17 		.word	_RFROM+MAPOFFSET
 873 0646 02       	_RAT:	.byte   2
 874 0647 5240     		.ascii "R@"
 875 0649 0000BF   		.p2align 2 	
 876              	RAT:
 877 064c 41F8045D 		_PUSH
 878 0650 1568     		LDR	R5,[R2]
 879 0652 7047     		_NEXT
 880              	
 881              	//    >R	  ( w -- )
 882              	// 	Push the data stack to the return stack.
 883              	
 884 0654 86FBFF17 		.word	_RAT+MAPOFFSET
 885 0658 42       	_TOR:	.byte   COMPO+2
 886 0659 3E52     		.ascii ">R"
 887 065b 00       		.p2align 2 	
 888              	TOR:
 889 065c 42F8045D 		STR	R5,[R2,#-4]!
 890 0660 51F8045B 		_POP
 891 0664 7047     		_NEXT
 892              	
 893              	//    SP@	 ( -- a )
 894              	// 	Push the current data stack pointer.
 895              	
 896 0666 98FBFF17 		.word	_TOR+MAPOFFSET
 897 066a 03       	_SPAT:	.byte   3
 898 066b 535040   		.ascii "SP@"
 899 066e 00BF     		.p2align 2 	
 900              	SPAT:
 901 0670 41F8045D 		_PUSH
 902 0674 0D46     		MOV	R5,R1
 903 0676 7047     		_NEXT
 904              	
 905              	//    DROP	( w -- )
 906              	// 	Discard top stack item.
 907              	
 908 0678 AAFBFF17 		.word	_SPAT+MAPOFFSET
 909 067c 04       	_DROP:	.byte   4
 910 067d 44524F50 		.ascii "DROP"
 911 0681 0000BF   		.p2align 2 	
 912              	DROP:
 913 0684 51F8045B 		_POP
 914 0688 7047     		_NEXT
 915              	
ARM GAS  stm32eforth.s 			page 20


 916              	//    DUP	 ( w -- w w )
 917              	// 	Duplicate the top stack item.
 918              	
 919 068a BCFBFF17 		.word	_DROP+MAPOFFSET
 920 068e 03       	_DUPP:	.byte   3
 921 068f 445550   		.ascii "DUP"
 922 0692 00BF     		.p2align 2 	
 923              	DUPP:
 924 0694 41F8045D 		_PUSH
 925 0698 7047     		_NEXT
 926              	
 927              	//    SWAP	( w1 w2 -- w2 w1 )
 928              	// 	Exchange top two stack items.
 929              	
 930 069a CEFBFF17 		.word	_DUPP+MAPOFFSET
 931 069e 04       	_SWAP:	.byte   4
 932 069f 53574150 		.ascii "SWAP"
 933 06a3 00       		.p2align 2 	
 934              	SWAP:
 935 06a4 0C68     		LDR	R4,[R1]
 936 06a6 0D60     		STR	R5,[R1]
 937 06a8 2546     		MOV	R5,R4
 938 06aa 7047     		_NEXT
 939              	
 940              	//    OVER	( w1 w2 -- w1 w2 w1 )
 941              	// 	Copy second stack item to top.
 942              	
 943 06ac DEFBFF17 		.word	_SWAP+MAPOFFSET
 944 06b0 04       	_OVER:	.byte   4
 945 06b1 4F564552 		.ascii "OVER"
 946 06b5 0000BF   		.p2align 2 	
 947              	OVER:
 948 06b8 41F8045D 		_PUSH
 949 06bc 4D68     		LDR	R5,[R1,#4]
 950 06be 7047     		_NEXT
 951              	
 952              	//    0<	  ( n -- t )
 953              	// 	Return true if n is negative.
 954              	
 955 06c0 F0FBFF17 		.word	_OVER+MAPOFFSET
 956 06c4 02       	_ZLESS:	.byte   2
 957 06c5 303C     		.ascii "0<"
 958 06c7 00       		.p2align 2 	
 959              	ZLESS:
 960 06c8 4FF00004 		MOV	R4,#0
 961 06cc 04EB2505 		ADD	R5,R4,R5,ASR #32
 962 06d0 7047     		_NEXT
 963              	
 964              	//    AND	 ( w w -- w )
 965              	// 	Bitwise AND.
 966              	
 967 06d2 04FCFF17 		.word	_ZLESS+MAPOFFSET
 968 06d6 03       	_ANDD:	.byte   3
 969 06d7 414E44   		.ascii "AND"
 970 06da 00BF     		.p2align 2 	
 971              	ANDD:
 972 06dc 51F8044B 		LDR	R4,[R1],#4
ARM GAS  stm32eforth.s 			page 21


 973 06e0 05EA0405 		AND	R5,R4
 974 06e4 7047     		_NEXT
 975 06e6 00BF     		.p2align 2
 976              	
 977              	//    OR	  ( w w -- w )
 978              	// 	Bitwise inclusive OR.
 979              	
 980 06e8 16FCFF17 		.word	_ANDD+MAPOFFSET
 981 06ec 02       	_ORR:	.byte   2
 982 06ed 4F52     		.ascii "OR"
 983 06ef 00       		.p2align 2 	
 984              	ORR:
 985 06f0 51F8044B 		LDR	R4,[R1],#4
 986 06f4 45EA0405 		ORR	R5,R4
 987 06f8 7047     		_NEXT
 988 06fa 00BF     		.p2align 2
 989              	
 990              	//    XOR	 ( w w -- w )
 991              	// 	Bitwise exclusive OR.
 992              	
 993 06fc 2CFCFF17 		.word	_ORR+MAPOFFSET
 994 0700 03       	_XORR:	.byte   3
 995 0701 584F52   		.ascii "XOR"
 996              		.p2align 2 	
 997              	XORR:
 998 0704 51F8044B 		LDR	R4,[R1],#4
 999 0708 85EA0405 		EOR	R5,R4
 1000 070c 7047     		_NEXT
 1001 070e 00BF     		.p2align 2
 1002              	
 1003              	//    UM+	 ( w w -- w cy )
 1004              	// 	Add two numbers, return the sum and carry flag.
 1005              	
 1006 0710 40FCFF17 		.word	_XORR+MAPOFFSET
 1007 0714 03       	_UPLUS:	.byte   3
 1008 0715 554D2B   		.ascii "UM+"
 1009              		.p2align 2 	
 1010              	UPLUS:
 1011 0718 0C68     		LDR	R4,[R1]
 1012 071a 6419     		ADDS	R4,R4,R5
 1013 071c 4FF00005 		MOV	R5,#0
 1014 0720 45F10005 		ADC	R5,R5,#0
 1015 0724 0C60     		STR	R4,[R1]
 1016 0726 7047     		_NEXT
 1017              	
 1018              	//    RSHIFT	 ( w # -- w )
 1019              	// 	arithmetic Right shift # bits.
 1020              	
 1021 0728 54FCFF17 		.word	_UPLUS+MAPOFFSET
 1022 072c 06       	_RSHIFT:	.byte   6
 1023 072d 52534849 		.ascii "RSHIFT"
 1023      4654
 1024 0733 00       		.p2align 2 	
 1025              	RSHIFT:
 1026 0734 51F8044B 		LDR	R4,[R1],#4
 1027 0738 44FA05F5 		MOV	R5,R4,ASR R5
 1028 073c 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 22


 1029              	
 1030              	//    LSHIFT	 ( w # -- w )
 1031              	// 	Right shift # bits.
 1032              	
 1033 073e 6CFCFF17 		.word	_RSHIFT+MAPOFFSET
 1034 0742 06       	_LSHIFT:	.byte   6
 1035 0743 4C534849 		.ascii "LSHIFT"
 1035      4654
 1036 0749 0000BF   		.p2align 2 	
 1037              	LSHIFT:
 1038 074c 51F8044B 		LDR	R4,[R1],#4
 1039 0750 04FA05F5 		MOV	R5,R4,LSL R5
 1040 0754 7047     		_NEXT
 1041              	
 1042              	//    +	 ( w w -- w )
 1043              	// 	Add.
 1044              	
 1045 0756 82FCFF17 		.word	_LSHIFT+MAPOFFSET
 1046 075a 01       	_PLUS:	.byte   1
 1047 075b 2B       		.ascii "+"
 1048              		.p2align 2 	
 1049              	PLUS:
 1050 075c 51F8044B 		LDR	R4,[R1],#4
 1051 0760 2544     		ADD	R5,R5,R4
 1052 0762 7047     		_NEXT
 1053              	
 1054              	//    -	 ( w w -- w )
 1055              	// 	Subtract.
 1056              	
 1057 0764 9AFCFF17 		.word	_PLUS+MAPOFFSET
 1058 0768 01       	_SUBB:	.byte   1
 1059 0769 2D       		.ascii "-"
 1060 076a 00BF     		.p2align 2 	
 1061              	SUBB:
 1062 076c 51F8044B 		LDR	R4,[R1],#4
 1063 0770 C5EB0405 		RSB	R5,R5,R4
 1064 0774 7047     		_NEXT
 1065              	
 1066              	//    *	 ( w w -- w )
 1067              	// 	Multiply.
 1068              	
 1069 0776 A8FCFF17 		.word	_SUBB+MAPOFFSET
 1070 077a 01       	_STAR:	.byte   1
 1071 077b 2A       		.ascii "*"
 1072              		.p2align 2 	
 1073              	STAR:
 1074 077c 51F8044B 		LDR	R4,[R1],#4
 1075 0780 04FB05F5 		MUL	R5,R4,R5
 1076 0784 7047     		_NEXT
 1077              	
 1078              	//    UM*	 ( w w -- ud )
 1079              	// 	Unsigned multiply.
 1080              	
 1081 0786 BAFCFF17 		.word	_STAR+MAPOFFSET
 1082 078a 03       	_UMSTA:	.byte   3
 1083 078b 554D2A   		.ascii "UM*"
 1084 078e 00BF     		.p2align 2 	
ARM GAS  stm32eforth.s 			page 23


 1085              	UMSTA:
 1086 0790 0C68     		LDR	R4,[R1]
 1087 0792 A5FB0467 		UMULL	R6,R7,R5,R4
 1088 0796 0E60     		STR	R6,[R1]
 1089 0798 3D46     		MOV	R5,R7
 1090 079a 7047     		_NEXT
 1091              	
 1092              	//    M*	 ( w w -- d )
 1093              	// 	signed multiply.
 1094              	
 1095 079c CAFCFF17 		.word	_UMSTA+MAPOFFSET
 1096 07a0 02       	_MSTAR:	.byte   2
 1097 07a1 4D2A     		.ascii "M*"
 1098 07a3 00       		.p2align 2 	
 1099              	MSTAR:
 1100 07a4 0C68     		LDR	R4,[R1]
 1101 07a6 85FB0467 		SMULL	R6,R7,R5,R4
 1102 07aa 0E60     		STR	R6,[R1]
 1103 07ac 3D46     		MOV	R5,R7
 1104 07ae 7047     		_NEXT
 1105              	
 1106              	//    1+	 ( w -- w+1 )
 1107              	// 	Add 1.
 1108              	
 1109 07b0 E0FCFF17 		.word	_MSTAR+MAPOFFSET
 1110 07b4 02       	_ONEP:	.byte   2
 1111 07b5 312B     		.ascii "1+"
 1112 07b7 00       		.p2align 2 	
 1113              	ONEP:
 1114 07b8 05F10105 		ADD	R5,R5,#1
 1115 07bc 7047     		_NEXT
 1116              	
 1117              	//    1-	 ( w -- w-1 )
 1118              	// 	Subtract 1.
 1119              	
 1120 07be F4FCFF17 		.word	_ONEP+MAPOFFSET
 1121 07c2 02       	_ONEM:	.byte   2
 1122 07c3 312D     		.ascii "1-"
 1123 07c5 0000BF   		.p2align 2 	
 1124              	ONEM:
 1125 07c8 A5F10105 		SUB	R5,R5,#1
 1126 07cc 7047     		_NEXT
 1127              	
 1128              	//    2+	 ( w -- w+2 )
 1129              	// 	Add 1.
 1130              	
 1131 07ce 02FDFF17 		.word	_ONEM+MAPOFFSET
 1132 07d2 02       	_TWOP:	.byte   2
 1133 07d3 322B     		.ascii "2+"
 1134 07d5 0000BF   		.p2align 2 	
 1135              	TWOP:
 1136 07d8 05F10205 		ADD	R5,R5,#2
 1137 07dc 7047     		_NEXT
 1138              	
 1139              	//    2-	 ( w -- w-2 )
 1140              	// 	Subtract 2.
 1141              	
ARM GAS  stm32eforth.s 			page 24


 1142 07de 12FDFF17 		.word	_TWOP+MAPOFFSET
 1143 07e2 02       	_TWOM:	.byte   2
 1144 07e3 322D     		.ascii "2-"
 1145 07e5 0000BF   		.p2align 2 	
 1146              	TWOM:
 1147 07e8 A5F10205 		SUB	R5,R5,#2
 1148 07ec 7047     		_NEXT
 1149              	
 1150              	//    CELL+	( w -- w+4 )
 1151              	// 	Add CELLL.
 1152              	
 1153 07ee 22FDFF17 		.word	_TWOM+MAPOFFSET
 1154 07f2 05       	_CELLP:	.byte   5
 1155 07f3 43454C4C 		.ascii "CELL+"
 1155      2B
 1156              		.p2align 2 	
 1157              	CELLP:
 1158 07f8 05F10405 		ADD	R5,R5,#CELLL
 1159 07fc 7047     		_NEXT
 1160              	
 1161              	//    CELL-	( w -- w-4 )
 1162              	// 	Subtract CELLL.
 1163              	
 1164 07fe 32FDFF17 		.word	_CELLP+MAPOFFSET
 1165 0802 05       	_CELLM:	.byte   5
 1166 0803 43454C4C 		.ascii "CELL-"
 1166      2D
 1167              		.p2align 2 	
 1168              	CELLM:
 1169 0808 A5F10405 		SUB	R5,R5,#CELLL
 1170 080c 7047     		_NEXT
 1171              	 
 1172              	//    BL	( -- 32 )
 1173              	// 	Blank (ASCII space).
 1174              	
 1175 080e 42FDFF17 		.word	_CELLM+MAPOFFSET
 1176 0812 02       	_BLANK:	.byte   2
 1177 0813 424C     		.ascii "BL"
 1178 0815 0000BF   		.p2align 2 	
 1179              	BLANK:
 1180 0818 41F8045D 		_PUSH
 1181 081c 4FF02005 		MOV	R5,#32
 1182 0820 7047     		_NEXT
 1183              	
 1184              	//    CELLS	( w -- w*4 )
 1185              	// 	Multiply 4.
 1186              	
 1187 0822 52FDFF17 		.word	_BLANK+MAPOFFSET
 1188 0826 05       	_CELLS:	.byte   5
 1189 0827 43454C4C 		.ascii "CELLS"
 1189      53
 1190              		.p2align 2 	
 1191              	CELLS:
 1192 082c 4FEA8505 		MOV	R5,R5,LSL#2
 1193 0830 7047     		_NEXT
 1194              	
 1195              	//    CELL/	( w -- w/4 )
ARM GAS  stm32eforth.s 			page 25


 1196              	// 	Divide by 4.
 1197              	
 1198 0832 66FDFF17 		.word	_CELLS+MAPOFFSET
 1199 0836 05       	_CELLSL:	.byte   5
 1200 0837 43454C4C 		.ascii "CELL/"
 1200      2F
 1201              		.p2align 2 	
 1202              	CELLSL:
 1203 083c 4FEAA505 		MOV	R5,R5,ASR#2
 1204 0840 7047     		_NEXT
 1205              	
 1206              	//    2*	( w -- w*2 )
 1207              	// 	Multiply 2.
 1208              	
 1209 0842 76FDFF17 		.word	_CELLSL+MAPOFFSET
 1210 0846 02       	_TWOST:	.byte   2
 1211 0847 322A     		.ascii "2*"
 1212 0849 0000BF   		.p2align 2 	
 1213              	TWOST:
 1214 084c 4FEA4505 		MOV	R5,R5,LSL#1
 1215 0850 7047     		_NEXT
 1216              	
 1217              	//    2/	( w -- w/2 )
 1218              	// 	Divide by 2.
 1219              	
 1220 0852 86FDFF17 		.word	_TWOST+MAPOFFSET
 1221 0856 02       	_TWOSL:	.byte   2
 1222 0857 322F     		.ascii "2/"
 1223 0859 0000BF   		.p2align 2 	
 1224              	TWOSL:
 1225 085c 4FEA6505 		MOV	R5,R5,ASR#1
 1226 0860 7047     		_NEXT
 1227              	
 1228              	//    ?DUP	( w -- w w | 0 )
 1229              	// 	Conditional duplicate.
 1230              	
 1231 0862 96FDFF17 		.word	_TWOSL+MAPOFFSET
 1232 0866 04       	_QDUP:	.byte   4
 1233 0867 3F445550 		.ascii "?DUP"
 1234 086b 00       		.p2align 2 	
 1235              	QDUP:
 1236 086c 2C00     		MOVS	R4,R5
 1237 086e 18BF     		IT NE 
 1238 0870 41F8045D 	    STRNE	R5,[R1,#-4]!
 1239 0874 7047     		_NEXT
 1240              	
 1241              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1242              	// 	Rotate top 3 items.
 1243              	
 1244 0876 A6FDFF17 		.word	_QDUP+MAPOFFSET
 1245 087a 03       	_ROT:	.byte   3
 1246 087b 524F54   		.ascii "ROT"
 1247 087e 00BF     		.p2align 2 	
 1248              	ROT:
 1249 0880 0C68     		LDR	R4,[R1]  // r4=w2 
 1250 0882 0D60     		STR	R5,[R1]  // w3 replace w2 
 1251 0884 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
ARM GAS  stm32eforth.s 			page 26


 1252 0886 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1253 0888 7047     		_NEXT
 1254              	
 1255              	//    2DROP	( w1 w2 -- )
 1256              	// 	Drop top 2 items.
 1257              	
 1258 088a BAFDFF17 		.word	_ROT+MAPOFFSET
 1259 088e 05       	_DDROP:	.byte   5
 1260 088f 3244524F 		.ascii "2DROP"
 1260      50
 1261              		.p2align 2 	
 1262              	DDROP:
 1263 0894 51F8045B 		_POP
 1264 0898 51F8045B 		_POP
 1265 089c 7047     		_NEXT
 1266              	
 1267              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1268              	// 	Duplicate top 2 items.
 1269              	
 1270 089e CEFDFF17 		.word	_DDROP+MAPOFFSET
 1271 08a2 04       	_DDUP:	.byte   4
 1272 08a3 32445550 		.ascii "2DUP"
 1273 08a7 00       		.p2align 2 	
 1274              	DDUP:
 1275 08a8 0C68     		LDR	R4,[R1] // r4=w1
 1276 08aa 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1277 08ae 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1278 08b2 7047     		_NEXT
 1279              	
 1280              	//    D+	( d1 d2 -- d3 )
 1281              	// 	Add top 2 double numbers.
 1282              	
 1283 08b4 E2FDFF17 		.word	_DDUP+MAPOFFSET
 1284 08b8 02       	_DPLUS:	.byte   2
 1285 08b9 442B     		.ascii "D+"
 1286 08bb 00       		.p2align 2 	
 1287              	DPLUS:
 1288 08bc 51F8044B 		LDR	R4,[R1],#4
 1289 08c0 51F8046B 		LDR	R6,[R1],#4
 1290 08c4 0F68     		LDR	R7,[R1]
 1291 08c6 E419     		ADDS	R4,R4,R7
 1292 08c8 0C60     		STR	R4,[R1]
 1293 08ca 45EB0605 		ADC	R5,R5,R6
 1294 08ce 7047     		_NEXT
 1295              	
 1296              	//    NOT	 ( w -- !w )
 1297              	// 	1"s complement.
 1298              	
 1299 08d0 F8FDFF17 		.word	_DPLUS+MAPOFFSET
 1300 08d4 03       	_INVER:	.byte   3
 1301 08d5 4E4F54   		.ascii "NOT"
 1302              		.p2align 2 	
 1303              	INVER:
 1304 08d8 6FEA0505 		MVN	R5,R5
 1305 08dc 7047     		_NEXT
 1306              	
 1307              	//    NEGATE	( w -- -w )
ARM GAS  stm32eforth.s 			page 27


 1308              	// 	2's complement.
 1309              	
 1310 08de 14FEFF17 		.word	_INVER+MAPOFFSET
 1311 08e2 06       	_NEGAT:	.byte   6
 1312 08e3 4E454741 		.ascii "NEGATE"
 1312      5445
 1313 08e9 0000BF   		.p2align 2 	
 1314              	NEGAT:
 1315 08ec C5F10005 		RSB	R5,R5,#0
 1316 08f0 7047     		_NEXT
 1317              	
 1318              	//    ABS	 ( w -- |w| )
 1319              	// 	Absolute.
 1320              	
 1321 08f2 22FEFF17 		.word	_NEGAT+MAPOFFSET
 1322 08f6 03       	_ABSS:	.byte   3
 1323 08f7 414253   		.ascii "ABS"
 1324 08fa 00BF     		.p2align 2 	
 1325              	ABSS:
 1326 08fc 15F0004F 		TST	R5,#0x80000000
 1327 0900 18BF     		IT NE
 1328 0902 6D42     	    RSBNE   R5,R5,#0
 1329 0904 7047     		_NEXT
 1330              	
 1331              	//  0= ( w -- f )
 1332              	// TOS==0?
 1333              	
 1334 0906 36FEFF17 		.word _ABSS+MAPOFFSET
 1335 090a 02       	_ZEQUAL: .byte 2
 1336 090b 303D     		.ascii "0="
 1337 090d 0000BF   		.p2align 2
 1338              	ZEQUAL:
 1339 0910 15B9     		cbnz r5,1f
 1340 0912 4FF0FF35 		mov r5,#-1
 1341 0916 7047     		_NEXT 
 1342 0918 85EA0505 	1:  eor r5,r5,r5  
 1343 091c 7047     		_NEXT 	
 1344              	
 1345              	//    =	 ( w w -- t )
 1346              	// 	Equal?
 1347              	
 1348 091e 4AFEFF17 		.word	_ZEQUAL+MAPOFFSET
 1349 0922 01       	_EQUAL:	.byte   1
 1350 0923 3D       		.ascii "="
 1351              		.p2align 2 	
 1352              	EQUAL:
 1353 0924 51F8044B 		LDR	R4,[R1],#4
 1354 0928 A542     		CMP	R5,R4
 1355 092a 0CBF     		ITE EQ 
 1356 092c 6FF00005 	    MVNEQ	R5,#0
 1357 0930 0025     		MOVNE	R5,#0
 1358 0932 7047     		_NEXT
 1359              	
 1360              	//    U<	 ( w w -- t )
 1361              	// 	Unsigned equal?
 1362              	
 1363 0934 62FEFF17 		.word	_EQUAL+MAPOFFSET
ARM GAS  stm32eforth.s 			page 28


 1364 0938 02       	_ULESS:	.byte   2
 1365 0939 553C     		.ascii "U<"
 1366 093b 00       		.p2align 2 	
 1367              	ULESS:
 1368 093c 51F8044B 		LDR	R4,[R1],#4
 1369 0940 AC42     		CMP	R4,R5
 1370 0942 34BF     		ITE CC 
 1371 0944 6FF00005 		MVNCC	R5,#0
 1372 0948 0025     		MOVCS	R5,#0
 1373 094a 7047     		_NEXT
 1374              	
 1375              	//    <	( w w -- t )
 1376              	// 	Less?
 1377              	
 1378 094c 78FEFF17 		.word	_ULESS+MAPOFFSET
 1379 0950 01       	_LESS:	.byte   1
 1380 0951 3C       		.ascii "<"
 1381 0952 00BF     		.p2align 2 	
 1382              	LESS:
 1383 0954 51F8044B 		LDR	R4,[R1],#4
 1384 0958 AC42     		CMP	R4,R5
 1385 095a B4BF     	    ITE LT
 1386 095c 6FF00005 		MVNLT	R5,#0
 1387 0960 0025     		MOVGE	R5,#0
 1388 0962 7047     		_NEXT
 1389              	
 1390              	//    >	( w w -- t )
 1391              	// 	greater?
 1392              	
 1393 0964 90FEFF17 		.word	_LESS+MAPOFFSET
 1394 0968 01       	_GREAT:	.byte   1
 1395 0969 3E       		.ascii ">"
 1396 096a 00BF     		.p2align 2 	
 1397              	GREAT:
 1398 096c 51F8044B 		LDR	R4,[R1],#4
 1399 0970 AC42     		CMP	R4,R5
 1400 0972 CCBF     		ITE GT
 1401 0974 6FF00005 	    MVNGT	R5,#0
 1402 0978 0025     		MOVLE	R5,#0
 1403 097a 7047     		_NEXT
 1404              	
 1405              	//    MAX	 ( w w -- max )
 1406              	// 	Leave maximum.
 1407              	
 1408 097c A8FEFF17 		.word	_GREAT+MAPOFFSET
 1409 0980 03       	_MAX:	.byte   3
 1410 0981 4D4158   		.ascii "MAX"
 1411              		.p2align 2 	
 1412              	MAX:
 1413 0984 51F8044B 		LDR	R4,[R1],#4
 1414 0988 AC42     		CMP	R4,R5
 1415 098a C8BF     		IT GT 
 1416 098c 2546     		MOVGT	R5,R4
 1417 098e 7047     		_NEXT
 1418              	
 1419              	//    MIN	 ( w w -- min )
 1420              	// 	Leave minimum.
ARM GAS  stm32eforth.s 			page 29


 1421              	
 1422 0990 C0FEFF17 		.word	_MAX+MAPOFFSET
 1423 0994 03       	_MIN:	.byte   3
 1424 0995 4D494E   		.ascii "MIN"
 1425              		.p2align 2 	
 1426              	MIN:
 1427 0998 51F8044B 		LDR	R4,[R1],#4
 1428 099c AC42     		CMP	R4,R5
 1429 099e B8BF     		IT LT
 1430 09a0 2546     		MOVLT	R5,R4
 1431 09a2 7047     		_NEXT
 1432              	
 1433              	//    +!	 ( w a -- )
 1434              	// 	Add to memory.
 1435              	
 1436 09a4 D4FEFF17 		.word	_MIN+MAPOFFSET
 1437 09a8 02       	_PSTOR:	.byte   2
 1438 09a9 2B21     		.ascii "+!"
 1439 09ab 00       		.p2align 2 	
 1440              	PSTOR:
 1441 09ac 51F8044B 		LDR	R4,[R1],#4
 1442 09b0 2E68     		LDR	R6,[R5]
 1443 09b2 2644     		ADD	R6,R6,R4
 1444 09b4 2E60     		STR	R6,[R5]
 1445 09b6 51F8045B 		_POP
 1446 09ba 7047     		_NEXT
 1447              	
 1448              	//    2!	 ( d a -- )
 1449              	// 	Store double number.
 1450              	
 1451 09bc E8FEFF17 		.word	_PSTOR+MAPOFFSET
 1452 09c0 02       	_DSTOR:	.byte   2
 1453 09c1 3221     		.ascii "2!"
 1454 09c3 00       		.p2align 2 	
 1455              	DSTOR:
 1456 09c4 51F8044B 		LDR	R4,[R1],#4
 1457 09c8 51F8046B 		LDR	R6,[R1],#4
 1458 09cc 45F8044B 		STR	R4,[R5],#4
 1459 09d0 2E60     		STR	R6,[R5]
 1460 09d2 51F8045B 		_POP
 1461 09d6 7047     		_NEXT
 1462              	
 1463              	//    2@	 ( a -- d )
 1464              	// 	Fetch double number.
 1465              	
 1466 09d8 00FFFF17 		.word	_DSTOR+MAPOFFSET
 1467 09dc 02       	_DAT:	.byte   2
 1468 09dd 3240     		.ascii "2@"
 1469 09df 00       		.p2align 2 	
 1470              	DAT:
 1471 09e0 6C68     		LDR	R4,[R5,#4]
 1472 09e2 41F8044D 		STR	R4,[R1,#-4]!
 1473 09e6 2D68     		LDR	R5,[R5]
 1474 09e8 7047     		_NEXT
 1475              	
 1476              	//    COUNT	( b -- b+1 c )
 1477              	// 	Fetch length of string.
ARM GAS  stm32eforth.s 			page 30


 1478              	
 1479 09ea 1CFFFF17 		.word	_DAT+MAPOFFSET
 1480 09ee 05       	_COUNT:	.byte   5
 1481 09ef 434F554E 		.ascii "COUNT"
 1481      54
 1482              		.p2align 2 	
 1483              	COUNT:
 1484 09f4 15F8014B 		LDRB	R4,[R5],#1
 1485 09f8 41F8045D 		_PUSH
 1486 09fc 2546     		MOV	R5,R4
 1487 09fe 7047     		_NEXT
 1488              	
 1489              	//    DNEGATE	( d -- -d )
 1490              	// 	Negate double number.
 1491              	
 1492 0a00 2EFFFF17 		.word	_COUNT+MAPOFFSET
 1493 0a04 07       	_DNEGA:	.byte   7
 1494 0a05 444E4547 		.ascii "DNEGATE"
 1494      415445
 1495              		.p2align 2 	
 1496              	DNEGA:
 1497 0a0c 0C68     		LDR	R4,[R1]
 1498 0a0e A6EB0606 		SUB	R6,R6,R6
 1499 0a12 341B     		SUBS R4,R6,R4
 1500 0a14 66EB0505 		SBC	R5,R6,R5
 1501 0a18 0C60     		STR	R4,[R1]
 1502 0a1a 7047     		_NEXT
 1503              	
 1504              	// **************************************************************************
 1505              	//  System and user variables
 1506              	
 1507              	//    doVAR	( -- a )
 1508              	// 	Run time routine for VARIABLE and CREATE.
 1509              	
 1510              	// 	.word	_DNEGA+MAPOFFSET
 1511              	// _DOVAR	.byte  COMPO+5
 1512              	// 	.ascii "doVAR"
 1513              	// 	.p2align 2 	
 1514              	DOVAR:
 1515 0a1c 41F8045D 		_PUSH
 1516 0a20 AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
 1517 0a24 52F804FB 		_UNNEST
 1518              	
 1519              	//    doCON	( -- a ) 
 1520              	// 	Run time routine for CONSTANT.
 1521              	
 1522              	// 	.word	_DOVAR+MAPOFFSET
 1523              	// _DOCON	.byte  COMPO+5
 1524              	// 	.ascii "doCON"
 1525              	// 	.p2align 2 	
 1526              	DOCON:
 1527 0a28 41F8045D 		_PUSH
 1528 0a2c 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1529 0a30 52F804FB 		_UNNEST
 1530              	
 1531              	/***********************
 1532              	  system variables 
ARM GAS  stm32eforth.s 			page 31


 1533              	***********************/
 1534              	
 1535              	 // SEED ( -- a)
 1536              	 // return PRNG seed address 
 1537              	
 1538 0a34 44FFFF17 		.word _DNEGA+MAPOFFSET
 1539 0a38 04       	_SEED: .byte 4
 1540 0a39 53454544 		.ascii "SEED"
 1541 0a3d 0000BF   		.p2align 2
 1542              	SEED:
 1543 0a40 41F8045D 		_PUSH 
 1544 0a44 03F10405 		ADD R5,R3,#SEED_OFS
 1545 0a48 7047     		_NEXT 	
 1546              	
 1547              	//  MSEC ( -- a)
 1548              	// return address of milliseconds counter
 1549 0a4a 78FFFF17 	  .word _SEED+MAPOFFSET 
 1550 0a4e 04       	_MSEC: .byte 4
 1551 0a4f 4D534543 	  .ascii "MSEC"
 1552 0a53 00       	  .p2align 2 
 1553              	MSEC:
 1554 0a54 41F8045D 	  _PUSH
 1555 0a58 03F10805 	  ADD R5,R3,#TICKS_OFS
 1556 0a5c 7047     	  _NEXT 
 1557              	
 1558              	// TIMER ( -- a )
 1559              	// count down timer 
 1560 0a5e 8EFFFF17 	  .word _MSEC+MAPOFFSET
 1561 0a62 05       	_TIMER:  .byte 5
 1562 0a63 54494D45 	  .ascii "TIMER"
 1562      52
 1563              	  .p2align 2 
 1564              	TIMER:
 1565 0a68 41F8045D 	  _PUSH 
 1566 0a6c 03F10C05 	  ADD R5,R3,#TIMER_OFS
 1567 0a70 7047     	  _NEXT
 1568              	
 1569              	// >RAM ( -- a )
 1570              	// compilation target 
 1571              	// -1 compile to RAM, 0 compile to FLASH 
 1572 0a72 A2FFFF17 		.word _TIMER+MAPOFFSET
 1573 0a76 04       	_TORAM: .byte 4 
 1574 0a77 3E52414D 		.ascii ">RAM" 
 1575 0a7b 00       		.p2align 2 
 1576              	TORAM:
 1577 0a7c 41F8045D 		_PUSH 
 1578 0a80 03F11005 		ADD R5,R3,#TORAM_OFS
 1579 0a84 7047     		_NEXT 
 1580              	
 1581              	//    'BOOT	 ( -- a )
 1582              	// 	Application.
 1583              	
 1584 0a86 B6FFFF17 		.word	_TORAM+MAPOFFSET
 1585 0a8a 05       	_TBOOT:	.byte   5
 1586 0a8b 27424F4F 		.ascii "'BOOT"
 1586      54
 1587              		.p2align 2 	
ARM GAS  stm32eforth.s 			page 32


 1588              	TBOOT:
 1589 0a90 41F8045D 		_PUSH
 1590 0a94 03F11805 		ADD	R5,R3,#BOOT_OFS 
 1591 0a98 7047     		_NEXT
 1592              		
 1593              	//    BASE	( -- a )
 1594              	// 	Storage of the radix base for numeric I/O.
 1595              	
 1596 0a9a CAFFFF17 		.word	_TBOOT+MAPOFFSET
 1597 0a9e 04       	_BASE:	.byte   4
 1598 0a9f 42415345 		.ascii "BASE"
 1599 0aa3 00       		.p2align 2 	
 1600              	BASE:
 1601 0aa4 41F8045D 		_PUSH
 1602 0aa8 03F11C05 		ADD	R5,R3,#BASE_OFS
 1603 0aac 7047     		_NEXT
 1604              	
 1605              	//    tmp	 ( -- a )
 1606              	// 	A temporary storage location used in parse and find.
 1607              	
 1608              	// 	.word	_BASE+MAPOFFSET
 1609              	// _TEMP	.byte   COMPO+3
 1610              	// 	.ascii "tmp"
 1611              	// 	.p2align 2 	
 1612              	TEMP:
 1613 0aae 41F8045D 		_PUSH
 1614 0ab2 03F12005 		ADD	R5,R3,#TMP_OFS
 1615 0ab6 7047     		_NEXT
 1616              	
 1617              	//    SPAN	( -- a )
 1618              	// 	Hold character count received by EXPECT.
 1619              	
 1620 0ab8 DEFFFF17 		.word	_BASE+MAPOFFSET
 1621 0abc 04       	_SPAN:	.byte   4
 1622 0abd 5350414E 		.ascii "SPAN"
 1623 0ac1 0000BF   		.p2align 2 	
 1624              	SPAN:
 1625 0ac4 41F8045D 		_PUSH
 1626 0ac8 03F12405 		ADD	R5,R3,#SPAN_OFS
 1627 0acc 7047     		_NEXT
 1628              	
 1629              	//    >IN	 ( -- a )
 1630              	// 	Hold the character pointer while parsing input stream.
 1631              	
 1632 0ace FCFFFF17 		.word	_SPAN+MAPOFFSET
 1633 0ad2 03       	_INN:	.byte   3
 1634 0ad3 3E494E   		.ascii ">IN"
 1635 0ad6 00BF     		.p2align 2 	
 1636              	INN:
 1637 0ad8 41F8045D 		_PUSH
 1638 0adc 03F12805 		ADD	R5,R3,#TOIN_OFS
 1639 0ae0 7047     		_NEXT
 1640              	
 1641              	//    #TIB	( -- a )
 1642              	// 	Hold the current count and address of the terminal input buffer.
 1643              	
 1644 0ae2 12000018 		.word	_INN+MAPOFFSET
ARM GAS  stm32eforth.s 			page 33


 1645 0ae6 04       	_NTIB:	.byte   4
 1646 0ae7 23544942 		.ascii "#TIB"
 1647 0aeb 00       		.p2align 2 	
 1648              	NTIB:
 1649 0aec 41F8045D 		_PUSH
 1650 0af0 03F12C05 		ADD	R5,R3,#NTIB_OFS
 1651 0af4 7047     		_NEXT
 1652              	
 1653              	//    'EVAL	( -- a )
 1654              	// 	Execution vector of EVAL.
 1655              	
 1656 0af6 26000018 		.word	_NTIB+MAPOFFSET
 1657 0afa 05       	_TEVAL:	.byte   5
 1658 0afb 27455641 		.ascii "'EVAL"
 1658      4C
 1659              		.p2align 2 	
 1660              	TEVAL:
 1661 0b00 41F8045D 		_PUSH
 1662 0b04 03F13405 		ADD	R5,R3,#EVAL_OFS
 1663 0b08 7047     		_NEXT
 1664              	
 1665              	//    HLD	 ( -- a )
 1666              	// 	Hold a pointer in building a numeric output string.
 1667              	
 1668 0b0a 3A000018 		.word	_TEVAL+MAPOFFSET
 1669 0b0e 03       	_HLD:	.byte   3
 1670 0b0f 484C44   		.ascii "HLD"
 1671 0b12 00BF     		.p2align 2 	
 1672              	HLD:
 1673 0b14 41F8045D 		_PUSH
 1674 0b18 03F13805 		ADD	R5,R3,#HLD_OFS
 1675 0b1c 7047     		_NEXT
 1676              	
 1677              	//    CONTEXT	( -- a )
 1678              	// 	A area to specify vocabulary search order.
 1679              	
 1680 0b1e 4E000018 		.word	_HLD+MAPOFFSET
 1681 0b22 07       	_CNTXT:	.byte   7
 1682 0b23 434F4E54 		.ascii "CONTEXT"
 1682      455854
 1683 0b2a 00BF     		.p2align 2 	
 1684              	CNTXT:
 1685              	CRRNT:
 1686 0b2c 41F8045D 		_PUSH
 1687 0b30 03F13C05 		ADD	R5,R3,#CTXT_OFS
 1688 0b34 7047     		_NEXT
 1689              	
 1690              	//    CP	( -- a )
 1691              	// 	Point to top name in RAM vocabulary.
 1692              	
 1693 0b36 62000018 		.word	_CNTXT+MAPOFFSET
 1694 0b3a 02       	_CP:	.byte   2
 1695 0b3b 4350     		.ascii "CP"
 1696 0b3d 0000BF   		.p2align 2 	
 1697              	CPP:
 1698 0b40 41F8045D 		_PUSH
 1699 0b44 03F14405 		ADD	R5,R3,#USER_CTOP_OFS
ARM GAS  stm32eforth.s 			page 34


 1700 0b48 7047     		_NEXT
 1701              	
 1702              	//   FCP ( -- a )
 1703              	//  Point ot top of Forth system dictionary
 1704 0b4a 7A000018 		.word _CP+MAPOFFSET
 1705 0b4e 03       	_FCP: .byte 3            
 1706 0b4f 464350   		.ascii "FCP"
 1707 0b52 00BF     		.p2align 2 
 1708              	FCP: 
 1709 0b54 41F8045D 		_PUSH 
 1710 0b58 03F14005 		ADD R5,R3,#FORTH_CTOP_OFS 
 1711 0b5c 7047     		_NEXT 
 1712              	
 1713              	//    LAST	( -- a )
 1714              	// 	Point to the last name in the name dictionary.
 1715              	
 1716 0b5e 8E000018 		.word	_FCP+MAPOFFSET
 1717 0b62 04       	_LAST:	.byte   4
 1718 0b63 4C415354 		.ascii "LAST"
 1719 0b67 00       		.p2align 2 	
 1720              	LAST:
 1721 0b68 41F8045D 		_PUSH
 1722 0b6c 03F14805 		ADD	R5,R3,#LASTN_OFS
 1723 0b70 7047     		_NEXT
 1724              	
 1725              	/***********************
 1726              		system constants 
 1727              	***********************/
 1728              	
 1729              	//	USER_BEGIN ( -- a )
 1730              	//  where user area begin in RAM
 1731 0b72 A2000018 		.word _LAST+MAPOFFSET
 1732 0b76 0A       	_USER_BGN: .byte 10
 1733 0b77 55534552 		.ascii "USER_BEGIN"
 1733      5F424547 
 1733      494E
 1734 0b81 0000BF   		.p2align 2
 1735              	USER_BEGIN:
 1736 0b84 41F8045D 		_PUSH 
 1737 0b88 004D     		ldr r5,USR_BGN_ADR 
 1738 0b8a 7047     		_NEXT 
 1739              	USR_BGN_ADR:
 1740 0b8c 58210018 	.word CTOP+MAPOFFSET 
 1741              	
 1742              	//  USER_END ( -- a )
 1743              	//  where user area end in RAM 
 1744 0b90 B6000018 		.word _USER_BGN+MAPOFFSET
 1745 0b94 08       	_USER_END: .byte 8 
 1746 0b95 55534552 		.ascii "USER_END" 
 1746      5F454E44 
 1747 0b9d 0000BF   		.p2align 2 
 1748              	USER_END:
 1749 0ba0 41F8045D 		_PUSH 
 1750 0ba4 4FF49C45 		mov r5,#DEND&0xffff
 1751 0ba8 C2F20005 		movt r5,#DEND>>16 
 1752 0bac 7047     		_NEXT 
 1753              	
ARM GAS  stm32eforth.s 			page 35


 1754              	//  IMG_ADR ( -- a )
 1755              	//  where user image is saved in FLASH
 1756 0bae D4000018 		.word _USER_END+MAPOFFSET
 1757 0bb2 07       	_IMG_ADR: .byte 7
 1758 0bb3 494D475F 		.ascii "IMG_ADR"
 1758      414452
 1759 0bba 00BF     		.p2align 2 
 1760              	IMG_ADR:
 1761 0bbc 41F8045D 		_PUSH
 1762 0bc0 004D     		ldr r5,USR_IMG_ADR   
 1763 0bc2 7047     		_NEXT 
 1764              	USR_IMG_ADR:
 1765 0bc4 00300000 		.word USER_SPACE 
 1766              	
 1767              	// image signature 
 1768 0bc8 F2000018 		.word _IMG_ADR+MAPOFFSET
 1769 0bcc 08       	_IMG_SIGN: .byte 8
 1770 0bcd 494D475F 		.ascii "IMG_SIGN"
 1770      5349474E 
 1771 0bd5 0000BF   		.p2align 2	
 1772              	IMG_SIGN: 
 1773 0bd8 41F8045D 		_PUSH 
 1774 0bdc 03F11405 		ADD r5,r3,#IMG_SIGN_OFS 
 1775 0be0 7047     		_NEXT 
 1776              	
 1777              	/* *********************
 1778              	  Common functions
 1779              	***********************/
 1780              	
 1781              	//    WITHIN	( u ul uh -- t )
 1782              	// 	Return true if u is within the range of ul and uh.
 1783              	
 1784 0be2 F2000018 		.word	_IMG_ADR+MAPOFFSET
 1785 0be6 06       	_WITHI:	.byte   6
 1786 0be7 57495448 		.ascii "WITHIN"
 1786      494E
 1787 0bed 0000BF   		.p2align 2 	
 1788              	WITHI:
 1789 0bf0 42F804ED 		_NEST
 1790 0bf4 FFF760FD 		BL	OVER
 1791 0bf8 FFF7B8FD 		BL	SUBB
 1792 0bfc FFF72EFD 		BL	TOR
 1793 0c00 FFF7B4FD 		BL	SUBB
 1794 0c04 FFF718FD 		BL	RFROM
 1795 0c08 FFF798FE 		BL	ULESS
 1796 0c0c 52F804FB 		_UNNEST
 1797              	
 1798              	//  Divide
 1799              	
 1800              	//    UM/MOD	( udl udh u -- ur uq )
 1801              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1802              	
 1803 0c10 26010018 		.word	_WITHI+MAPOFFSET
 1804 0c14 06       	_UMMOD:	.byte   6
 1805 0c15 554D2F4D 		.ascii "UM/MOD"
 1805      4F44
 1806 0c1b 00       		.p2align 2 	
ARM GAS  stm32eforth.s 			page 36


 1807              	UMMOD:
 1808 0c1c 4FF00107 		MOV	R7,#1
 1809 0c20 51F8044B 		LDR	R4,[R1],#4
 1810 0c24 0E68     		LDR	R6,[R1]
 1811              	UMMOD0:
 1812 0c26 B619     		ADDS	R6,R6,R6
 1813 0c28 6441     		ADCS	R4,R4,R4
 1814 0c2a 04D3     		BCC	UMMOD1
 1815 0c2c A4EB0504 		SUB	R4,R4,R5
 1816 0c30 06F10106 		ADD	R6,R6,#1
 1817 0c34 04E0     		B UMMOD2
 1818              	UMMOD1:
 1819 0c36 641B     		SUBS	R4,R4,R5 
 1820 0c38 28BF     		IT CS 
 1821 0c3a 0136     		ADDCS	R6,R6,#1
 1822 0c3c 00D2     		BCS	UMMOD2
 1823 0c3e 2C44     		ADD	R4,R4,R5
 1824              	UMMOD2:
 1825 0c40 FF19     		ADDS	R7,R7,R7
 1826 0c42 F0D3     		BCC	UMMOD0
 1827 0c44 3546     		MOV	R5,R6
 1828 0c46 0C60     		STR	R4,[R1]
 1829 0c48 7047     		_NEXT
 1830              	
 1831              	//    M/MOD	( d n -- r q )
 1832              	// 	Signed floored divide of double by single. Return mod and quotient.
 1833              	
 1834 0c4a 54010018 		.word	_UMMOD+MAPOFFSET
 1835 0c4e 05       	_MSMOD:	.byte  5
 1836 0c4f 4D2F4D4F 		.ascii "M/MOD"
 1836      44
 1837              		.p2align 2 	
 1838              	MSMOD:	
 1839 0c54 42F804ED 		_NEST
 1840 0c58 FFF71CFD 		BL	DUPP
 1841 0c5c FFF734FD 		BL	ZLESS
 1842 0c60 FFF718FD 		BL	DUPP
 1843 0c64 FFF7FAFC 		BL	TOR
 1844 0c68 FFF7AAFC 		BL	QBRAN
 1845 0c6c C0010018 		.word	MMOD1+MAPOFFSET
 1846 0c70 FFF73CFE 		BL	NEGAT
 1847 0c74 FFF7F2FC 		BL	TOR
 1848 0c78 FFF7C8FE 		BL	DNEGA
 1849 0c7c FFF7DCFC 		BL	RFROM
 1850              	MMOD1:
 1851 0c80 FFF7ECFC 	  BL	TOR
 1852 0c84 FFF706FD 		BL	DUPP
 1853 0c88 FFF71EFD 		BL	ZLESS
 1854 0c8c FFF798FC 		BL	QBRAN
 1855 0c90 DC010018 		.word	MMOD2+MAPOFFSET
 1856 0c94 FFF7DAFC 		BL	RAT
 1857 0c98 FFF760FD 		BL	PLUS
 1858              	MMOD2:
 1859 0c9c FFF7CCFC 	  BL	RFROM
 1860 0ca0 FFF7BCFF 		BL	UMMOD
 1861 0ca4 FFF7C8FC 		BL	RFROM
 1862 0ca8 FFF78AFC 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 37


 1863 0cac FC010018 		.word	MMOD3+MAPOFFSET
 1864 0cb0 FFF7F8FC 		BL	SWAP
 1865 0cb4 FFF71AFE 		BL	NEGAT
 1866 0cb8 FFF7F4FC 		BL	SWAP
 1867              	MMOD3:   
 1868 0cbc 52F804FB 		_UNNEST
 1869              	
 1870              	//    /MOD	( n n -- r q )
 1871              	// 	Signed divide. Return mod and quotient.
 1872              	
 1873 0cc0 8E010018 		.word	_MSMOD+MAPOFFSET
 1874 0cc4 04       	_SLMOD:	.byte   4
 1875 0cc5 2F4D4F44 		.ascii "/MOD"
 1876 0cc9 0000BF   		.p2align 2 	
 1877              	SLMOD:
 1878 0ccc 42F804ED 		_NEST
 1879 0cd0 FFF7F2FC 		BL	OVER
 1880 0cd4 FFF7F8FC 		BL	ZLESS
 1881 0cd8 FFF7E4FC 		BL	SWAP
 1882 0cdc FFF7BAFF 		BL	MSMOD
 1883 0ce0 52F804FB 		_UNNEST
 1884              	
 1885              	//    MOD	 ( n n -- r )
 1886              	// 	Signed divide. Return mod only.
 1887              	
 1888 0ce4 04020018 		.word	_SLMOD+MAPOFFSET
 1889 0ce8 03       	_MODD:	.byte  3
 1890 0ce9 4D4F44   		.ascii "MOD"
 1891              		.p2align 2 	
 1892              	MODD:
 1893 0cec 42F804ED 		_NEST
 1894 0cf0 FFF7ECFF 		BL	SLMOD
 1895 0cf4 FFF7C6FC 		BL	DROP
 1896 0cf8 52F804FB 		_UNNEST
 1897              	
 1898              	//    /	   ( n n -- q )
 1899              	// 	Signed divide. Return quotient only.
 1900              	
 1901 0cfc 28020018 		.word	_MODD+MAPOFFSET
 1902 0d00 01       	_SLASH:	.byte  1
 1903 0d01 2F       		.ascii "/"
 1904 0d02 00BF     		.p2align 2 	
 1905              	SLASH:
 1906 0d04 42F804ED 		_NEST
 1907 0d08 FFF7E0FF 		BL	SLMOD
 1908 0d0c FFF7CAFC 		BL	SWAP
 1909 0d10 FFF7B8FC 		BL	DROP
 1910 0d14 52F804FB 		_UNNEST
 1911              	
 1912              	//    */MOD	( n1 n2 n3 -- r q )
 1913              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1914              	
 1915 0d18 40020018 		.word	_SLASH+MAPOFFSET
 1916 0d1c 05       	_SSMOD:	.byte  5
 1917 0d1d 2A2F4D4F 		.ascii "*/MOD"
 1917      44
 1918 0d22 00BF     		.p2align 2 	
ARM GAS  stm32eforth.s 			page 38


 1919              	SSMOD:
 1920 0d24 42F804ED 		_NEST
 1921 0d28 FFF798FC 		BL	TOR
 1922 0d2c FFF73AFD 		BL	MSTAR
 1923 0d30 FFF782FC 		BL	RFROM
 1924 0d34 FFF78EFF 		BL	MSMOD
 1925 0d38 52F804FB 		_UNNEST
 1926              	
 1927              	//    */	  ( n1 n2 n3 -- q )
 1928              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1929              	
 1930 0d3c 5C020018 		.word	_SSMOD+MAPOFFSET
 1931 0d40 02       	_STASL:	.byte  2
 1932 0d41 2A2F     		.ascii "*/"
 1933 0d43 00       		.p2align 2 	
 1934              	STASL:
 1935 0d44 42F804ED 		_NEST
 1936 0d48 FFF7ECFF 		BL	SSMOD
 1937 0d4c FFF7AAFC 		BL	SWAP
 1938 0d50 FFF798FC 		BL	DROP
 1939 0d54 52F804FB 		_UNNEST
 1940              	
 1941              	// **************************************************************************
 1942              	//  Miscellaneous
 1943              	
 1944              	//    ALIGNED	( b -- a )
 1945              	// 	Align address to the cell boundary.
 1946              	
 1947 0d58 80020018 		.word	_STASL+MAPOFFSET
 1948 0d5c 07       	_ALGND:	.byte   7
 1949 0d5d 414C4947 		.ascii "ALIGNED"
 1949      4E4544
 1950              		.p2align 2 	
 1951              	ALGND:
 1952 0d64 05F10305 		ADD	R5,R5,#3
 1953 0d68 6FF00304 		MVN	R4,#3
 1954 0d6c 05EA0405 		AND	R5,R5,R4
 1955 0d70 7047     		_NEXT
 1956              	
 1957              	//    >CHAR	( c -- c )
 1958              	// 	Filter non-printing characters.
 1959              	
 1960 0d72 9C020018 		.word	_ALGND+MAPOFFSET
 1961 0d76 05       	_TCHAR:	.byte  5
 1962 0d77 3E434841 		.ascii ">CHAR"
 1962      52
 1963              		.p2align 2 	
 1964              	TCHAR:
 1965 0d7c 42F804ED 		_NEST
 1966 0d80 FFF7FBFB 		_DOLIT
 1967 0d84 7F000000 		.word	0x7F
 1968 0d88 FFF7A8FC 		BL	ANDD
 1969 0d8c FFF782FC 		BL	DUPP	// mask msb
 1970 0d90 FFF742FD 		BL	BLANK
 1971 0d94 FFF7F1FB 		_DOLIT
 1972 0d98 7F000000 		.word	127
 1973 0d9c FFF728FF 		BL	WITHI	// check for printable
ARM GAS  stm32eforth.s 			page 39


 1974 0da0 FFF79AFD 		BL	INVER
 1975 0da4 FFF70CFC 		BL	QBRAN
 1976 0da8 F8020018 		.word	TCHA1+MAPOFFSET
 1977 0dac FFF76AFC 		BL	DROP
 1978 0db0 FFF7E3FB 		_DOLIT
 1979 0db4 5F000000 		.word	'_'	// replace non-printables
 1980              	TCHA1:
 1981 0db8 52F804FB 		  _UNNEST
 1982              	
 1983              	//    DEPTH	( -- n )
 1984              	// 	Return the depth of the data stack.
 1985              	
 1986 0dbc B6020018 		.word	_TCHAR+MAPOFFSET
 1987 0dc0 05       	_DEPTH:	.byte  5
 1988 0dc1 44455054 		.ascii "DEPTH"
 1988      48
 1989 0dc6 00BF     		.p2align 2 	
 1990              	DEPTH:
 1991 0dc8 03F59D46 		ADD	R6,R3,#SPP&0xffff 
 1992 0dcc A6EB0106 		SUB	R6,R6,R1
 1993 0dd0 41F8045D 		_PUSH
 1994 0dd4 4FEAA605 		ASR	R5,R6,#2
 1995 0dd8 7047     		_NEXT
 1996              	
 1997              	//    PICK	( ... +n -- ... w )
 1998              	// 	Copy the nth stack item to tos.
 1999              	
 2000 0dda 00030018 		.word	_DEPTH+MAPOFFSET
 2001 0dde 04       	_PICK:	.byte  4
 2002 0ddf 5049434B 		.ascii "PICK"
 2003 0de3 00       		.p2align 2 	
 2004              	PICK:
 2005 0de4 42F804ED 		_NEST
 2006 0de8 FFF7E6FC 		BL	ONEP
 2007 0dec FFF71EFD 		BL	CELLS
 2008 0df0 FFF73EFC 		BL	SPAT
 2009 0df4 FFF7B2FC 		BL	PLUS
 2010 0df8 FFF708FC 		BL	AT
 2011 0dfc 52F804FB 		_UNNEST
 2012              	
 2013              	// **************************************************************************
 2014              	//  Memory access
 2015              	
 2016              	//    HERE	( -- a )
 2017              	// 	Return the top of the code dictionary.
 2018              	
 2019 0e00 1E030018 		.word	_PICK+MAPOFFSET
 2020 0e04 04       	_HERE:	.byte  4
 2021 0e05 48455245 		.ascii "HERE"
 2022 0e09 0000BF   		.p2align 2 	
 2023              	HERE:
 2024 0e0c 42F804ED 		_NEST
 2025 0e10 FFF796FE 		BL	CPP
 2026 0e14 FFF7FAFB 		BL	AT
 2027 0e18 52F804FB 		_UNNEST
 2028              		
 2029              	//    PAD	 ( -- a )
ARM GAS  stm32eforth.s 			page 40


 2030              	// 	Return the address of a temporary buffer.
 2031              	
 2032 0e1c 44030018 		.word	_HERE+MAPOFFSET
 2033 0e20 03       	_PAD:	.byte  3
 2034 0e21 504144   		.ascii "PAD"
 2035              		.p2align 2 	
 2036              	PAD:
 2037 0e24 42F804ED 		_NEST
 2038 0e28 FFF7F0FF 		BL	HERE
 2039 0e2c 05F15005 		ADD	R5,R5,#80
 2040 0e30 52F804FB 		_UNNEST
 2041              	
 2042              	//    TIB	 ( -- a )
 2043              	// 	Return the address of the terminal input buffer.
 2044              	
 2045 0e34 60030018 		.word	_PAD+MAPOFFSET
 2046 0e38 03       	_TIB:	.byte  3
 2047 0e39 544942   		.ascii "TIB"
 2048              		.p2align 2 	
 2049              	TIB:
 2050 0e3c 41F8045D 		_PUSH
 2051 0e40 1D6B     		ldr r5,[r3,#TIB_OFS]
 2052 0e42 7047     		_NEXT
 2053              	
 2054              	//    @EXECUTE	( a -- )
 2055              	// 	Execute vector stored in address a.
 2056              	
 2057 0e44 78030018 		.word	_TIB+MAPOFFSET
 2058 0e48 08       	_ATEXE:	.byte   8
 2059 0e49 40455845 		.ascii "@EXECUTE"
 2059      43555445 
 2060 0e51 0000BF   		.p2align 2 	
 2061              	ATEXE:
 2062 0e54 2C00     		MOVS	R4,R5
 2063 0e56 51F8045B 		_POP
 2064 0e5a 2468     		LDR	R4,[R4]
 2065 0e5c 44F00104 		ORR	R4,R4,#1
 2066 0e60 18BF     	    IT NE 
 2067 0e62 2047     		BXNE	R4
 2068 0e64 7047     		_NEXT
 2069              	
 2070              	//    CMOVE	( b1 b2 u -- )
 2071              	// 	Copy u bytes from b1 to b2.
 2072              	
 2073 0e66 88030018 		.word	_ATEXE+MAPOFFSET
 2074 0e6a 05       	_CMOVE:	.byte   5
 2075 0e6b 434D4F56 		.ascii "CMOVE"
 2075      45
 2076              		.p2align 2 	
 2077              	CMOVE:
 2078 0e70 51F8046B 		LDR	R6,[R1],#4
 2079 0e74 51F8047B 		LDR	R7,[R1],#4
 2080 0e78 03E0     		B CMOV1
 2081              	CMOV0:
 2082 0e7a 17F8014B 		LDRB	R4,[R7],#1
 2083 0e7e 06F8014B 		STRB	R4,[R6],#1
 2084              	CMOV1:
ARM GAS  stm32eforth.s 			page 41


 2085 0e82 2D00     		MOVS	R5,R5
 2086 0e84 02D0     		BEQ	CMOV2
 2087 0e86 A5F10105 		SUB	R5,R5,#1
 2088 0e8a F6E7     		B CMOV0
 2089              	CMOV2:
 2090 0e8c 51F8045B 		_POP
 2091 0e90 7047     		_NEXT
 2092              	
 2093              	//    MOVE	( a1 a2 u -- )
 2094              	// 	Copy u words from a1 to a2.
 2095              	
 2096 0e92 AA030018 		.word	_CMOVE+MAPOFFSET
 2097 0e96 04       	_MOVE:	.byte   4
 2098 0e97 4D4F5645 		.ascii "MOVE"
 2099 0e9b 00       		.p2align 2 	
 2100              	MOVE:
 2101 0e9c 25F00305 		AND	R5,R5,#-4
 2102 0ea0 51F8046B 		LDR	R6,[R1],#4
 2103 0ea4 51F8047B 		LDR	R7,[R1],#4
 2104 0ea8 03E0     		B MOVE1
 2105              	MOVE0:
 2106 0eaa 57F8044B 		LDR	R4,[R7],#4
 2107 0eae 46F8044B 		STR	R4,[R6],#4
 2108              	MOVE1:
 2109 0eb2 2D00     		MOVS	R5,R5
 2110 0eb4 02D0     		BEQ	MOVE2
 2111 0eb6 A5F10405 		SUB	R5,R5,#4
 2112 0eba F6E7     		B MOVE0
 2113              	MOVE2:
 2114 0ebc 51F8045B 		_POP
 2115 0ec0 7047     		_NEXT
 2116              	
 2117              	//    FILL	( b u c -- )
 2118              	// 	Fill u bytes of character c to area beginning at b.
 2119              	
 2120 0ec2 D6030018 		.word	_MOVE+MAPOFFSET
 2121 0ec6 04       	_FILL:	.byte   4
 2122 0ec7 46494C4C 		.ascii "FILL"
 2123 0ecb 00       		.p2align 2 	
 2124              	FILL:
 2125 0ecc 51F8046B 		LDR	R6,[R1],#4
 2126 0ed0 51F8047B 		LDR	R7,[R1],#4
 2127              	FILL0:
 2128 0ed4 00E0     		B FILL1
 2129 0ed6 2D46     		MOV	R5,R5
 2130              	FILL1:
 2131 0ed8 07F8015B 		STRB	R5,[R7],#1
 2132 0edc 3600     		MOVS	R6,R6
 2133 0ede 02D0     		BEQ	FILL2
 2134 0ee0 A6F10106 		SUB	R6,R6,#1
 2135 0ee4 F6E7     		B FILL0
 2136              	FILL2:
 2137 0ee6 51F8045B 		_POP
 2138 0eea 7047     		_NEXT
 2139              	
 2140              	//    PACK$	( b u a -- a )
 2141              	// 	Build a counted word with u characters from b. Null fill.
ARM GAS  stm32eforth.s 			page 42


 2142              	
 2143 0eec 06040018 		.word	_FILL+MAPOFFSET
 2144 0ef0 05       	_PACKS:	.byte  5
 2145 0ef1 5041434B 		.ascii "PACK$$"
 2145      2424
 2146 0ef7 00       		.p2align 2 	
 2147              	PACKS:
 2148 0ef8 42F804ED 		_NEST
 2149 0efc FFF732FF 		BL	ALGND
 2150 0f00 FFF7C8FB 		BL	DUPP
 2151 0f04 FFF7AAFB 		BL	TOR			// strings only on cell boundary
 2152 0f08 FFF7D6FB 		BL	OVER
 2153 0f0c FFF726FC 		BL	PLUS
 2154 0f10 FFF752FC 		BL	ONEP
 2155 0f14 FFF731FB 		_DOLIT
 2156 0f18 FCFFFFFF 		.word	0xFFFFFFFC
 2157 0f1c FFF7DEFB 		BL	ANDD			// count mod cell
 2158 0f20 FFF72BFB 		_DOLIT
 2159 0f24 00000000 		.word	0
 2160 0f28 FFF7BCFB 		BL	SWAP
 2161 0f2c FFF764FB 		BL	STORE			// null fill cell
 2162 0f30 FFF78CFB 		BL	RAT
 2163 0f34 FFF7B8FC 		BL	DDUP
 2164 0f38 FFF76EFB 		BL	CSTOR
 2165 0f3c FFF73CFC 		BL	ONEP			// save count
 2166 0f40 FFF7B0FB 		BL	SWAP
 2167 0f44 FFF794FF 		BL	CMOVE
 2168 0f48 FFF776FB 		BL	RFROM
 2169 0f4c 52F804FB 		_UNNEST   			// move string
 2170              	
 2171              	// **************************************************************************
 2172              	//  Numeric output, single precision
 2173              	
 2174              	//    DIGIT	( u -- c )
 2175              	// 	Convert digit u to a character.
 2176              	
 2177 0f50 30040018 		.word	_PACKS+MAPOFFSET
 2178 0f54 05       	_DIGIT:	.byte  5
 2179 0f55 44494749 		.ascii "DIGIT"
 2179      54
 2180 0f5a 00BF     		.p2align 2 	
 2181              	DIGIT:
 2182 0f5c 42F804ED 		_NEST
 2183 0f60 FFF70BFB 		_DOLIT
 2184 0f64 09000000 		.word	9
 2185 0f68 FFF7A6FB 		BL	OVER
 2186 0f6c FFF7F2FC 		BL	LESS
 2187 0f70 05F00705 		AND	R5,R5,#7
 2188 0f74 FFF7F2FB 		BL	PLUS
 2189 0f78 05F13005 		ADD	R5,R5,#'0'
 2190 0f7c 52F804FB 		_UNNEST
 2191              	
 2192              	//    EXTRACT	( n base -- n c )
 2193              	// 	Extract the least significant digit from n.
 2194              	
 2195 0f80 94040018 		.word	_DIGIT+MAPOFFSET
 2196 0f84 07       	_EXTRC:	.byte  7
ARM GAS  stm32eforth.s 			page 43


 2197 0f85 45585452 		.ascii "EXTRACT"
 2197      414354
 2198              		.p2align 2 	
 2199              	EXTRC:
 2200 0f8c 42F804ED 		_NEST
 2201 0f90 FFF7F3FA 		_DOLIT
 2202 0f94 00000000 		.word	0
 2203 0f98 FFF784FB 		BL	SWAP
 2204 0f9c FFF73EFE 		BL	UMMOD
 2205 0fa0 FFF780FB 		BL	SWAP
 2206 0fa4 FFF7DAFF 		BL	DIGIT
 2207 0fa8 52F804FB 		_UNNEST
 2208              	
 2209              	//    <#	  ( -- )
 2210              	// 	Initiate the numeric output process.
 2211              	
 2212 0fac C4040018 		.word	_EXTRC+MAPOFFSET
 2213 0fb0 02       	_BDIGS:	.byte  2
 2214 0fb1 3C23     		.ascii "<#"
 2215 0fb3 00       		.p2align 2 	
 2216              	BDIGS:
 2217 0fb4 42F804ED 		_NEST
 2218 0fb8 FFF734FF 		BL	PAD
 2219 0fbc FFF7AAFD 		BL	HLD
 2220 0fc0 FFF71AFB 		BL	STORE
 2221 0fc4 52F804FB 		_UNNEST
 2222              	
 2223              	//    HOLD	( c -- )
 2224              	// 	Insert a character into the numeric output string.
 2225              	
 2226 0fc8 F0040018 		.word	_BDIGS+MAPOFFSET
 2227 0fcc 04       	_HOLD:	.byte  4
 2228 0fcd 484F4C44 		.ascii "HOLD"
 2229 0fd1 0000BF   		.p2align 2 	
 2230              	HOLD:
 2231 0fd4 42F804ED 		_NEST
 2232 0fd8 FFF79CFD 		BL	HLD
 2233 0fdc FFF716FB 		BL	AT
 2234 0fe0 FFF7F2FB 		BL	ONEM
 2235 0fe4 FFF756FB 		BL	DUPP
 2236 0fe8 FFF794FD 		BL	HLD
 2237 0fec FFF704FB 		BL	STORE
 2238 0ff0 FFF712FB 		BL	CSTOR
 2239 0ff4 52F804FB 		_UNNEST
 2240              	
 2241              	//    #	   ( u -- u )
 2242              	// 	Extract one digit from u and append the digit to output string.
 2243              	
 2244 0ff8 0C050018 		.word	_HOLD+MAPOFFSET
 2245 0ffc 01       	_DIG:	.byte  1
 2246 0ffd 23       		.ascii "#"
 2247 0ffe 00BF     		.p2align 2 	
 2248              	DIG:
 2249 1000 42F804ED 		_NEST
 2250 1004 FFF74EFD 		BL	BASE
 2251 1008 FFF700FB 		BL	AT
 2252 100c FFF7BEFF 		BL	EXTRC
ARM GAS  stm32eforth.s 			page 44


 2253 1010 FFF7E0FF 		BL	HOLD
 2254 1014 52F804FB 		_UNNEST
 2255              	
 2256              	//    #S	  ( u -- 0 )
 2257              	// 	Convert u until all digits are added to the output string.
 2258              	
 2259 1018 3C050018 		.word	_DIG+MAPOFFSET
 2260 101c 02       	_DIGS:	.byte  2
 2261 101d 2353     		.ascii "#S"
 2262 101f 00       		.p2align 2 	
 2263              	DIGS:
 2264 1020 42F804ED 		_NEST
 2265              	DIGS1:
 2266 1024 FFF7ECFF 	    BL	DIG
 2267 1028 FFF734FB 		BL	DUPP
 2268 102c FFF7C8FA 		BL	QBRAN
 2269 1030 76050018 		.word	DIGS2+MAPOFFSET
 2270 1034 F6E7     		B	DIGS1
 2271              	DIGS2:
 2272 1036 52F804FB 		  _UNNEST
 2273              	
 2274              	//    SIGN	( n -- )
 2275              	// 	Add a minus sign to the numeric output string.
 2276              	
 2277 103a 5C050018 		.word	_DIGS+MAPOFFSET
 2278 103e 04       	_SIGN:	.byte  4
 2279 103f 5349474E 		.ascii "SIGN"
 2280 1043 00       		.p2align 2 	
 2281              	SIGN:
 2282 1044 42F804ED 		_NEST
 2283 1048 FFF73EFB 		BL	ZLESS
 2284 104c FFF7B8FA 		BL	QBRAN
 2285 1050 A0050018 		.word	SIGN1+MAPOFFSET
 2286 1054 FFF791FA 		_DOLIT
 2287 1058 2D000000 		.word	'-'
 2288 105c FFF7BAFF 		BL	HOLD
 2289              	SIGN1:
 2290 1060 52F804FB 		  _UNNEST
 2291              	
 2292              	//    #>	  ( w -- b u )
 2293              	// 	Prepare the outputDCB to be TYPE'd.
 2294              	
 2295 1064 7E050018 		.word	_SIGN+MAPOFFSET
 2296 1068 02       	_EDIGS:	.byte  2
 2297 1069 233E     		.ascii "#>"
 2298 106b 00       		.p2align 2 	
 2299              	EDIGS:
 2300 106c 42F804ED 		_NEST
 2301 1070 FFF708FB 		BL	DROP
 2302 1074 FFF74EFD 		BL	HLD
 2303 1078 FFF7C8FA 		BL	AT
 2304 107c FFF7D2FE 		BL	PAD
 2305 1080 FFF71AFB 		BL	OVER
 2306 1084 FFF772FB 		BL	SUBB
 2307 1088 52F804FB 		_UNNEST
 2308              	
 2309              	//    str	 ( n -- b u )
ARM GAS  stm32eforth.s 			page 45


 2310              	// 	Convert a signed integer to a numeric string.
 2311              	
 2312              	// 	.word	_EDIGS+MAPOFFSET
 2313              	// _STRR	.byte  3
 2314              	// 	.ascii "str"
 2315              	// 	.p2align 2 	
 2316              	STRR:
 2317 108c 42F804ED 		_NEST
 2318 1090 FFF700FB 		BL	DUPP
 2319 1094 FFF7E2FA 		BL	TOR
 2320 1098 FFF730FC 		BL	ABSS
 2321 109c FFF78AFF 		BL	BDIGS
 2322 10a0 FFF7BEFF 		BL	DIGS
 2323 10a4 FFF7C8FA 		BL	RFROM
 2324 10a8 FFF7CCFF 		BL	SIGN
 2325 10ac FFF7DEFF 		BL	EDIGS
 2326 10b0 52F804FB 		_UNNEST
 2327              	
 2328              	//    HEX	 ( -- )
 2329              	// 	Use radix 16 as base for numeric conversions.
 2330              	
 2331 10b4 A8050018 		.word	_EDIGS+MAPOFFSET
 2332 10b8 03       	_HEX:	.byte  3
 2333 10b9 484558   		.ascii "HEX"
 2334              		.p2align 2 	
 2335              	HEX:
 2336 10bc 42F804ED 		_NEST
 2337 10c0 FFF75BFA 		_DOLIT
 2338 10c4 10000000 		.word	16
 2339 10c8 FFF7ECFC 		BL	BASE
 2340 10cc FFF794FA 		BL	STORE
 2341 10d0 52F804FB 		_UNNEST
 2342              	
 2343              	//    DECIMAL	( -- )
 2344              	// 	Use radix 10 as base for numeric conversions.
 2345              	
 2346 10d4 F8050018 		.word	_HEX+MAPOFFSET
 2347 10d8 07       	_DECIM:	.byte  7
 2348 10d9 44454349 		.ascii "DECIMAL"
 2348      4D414C
 2349              		.p2align 2 	
 2350              	DECIM:
 2351 10e0 42F804ED 		_NEST
 2352 10e4 FFF749FA 		_DOLIT
 2353 10e8 0A000000 		.word	10
 2354 10ec FFF7DAFC 		BL	BASE
 2355 10f0 FFF782FA 		BL	STORE
 2356 10f4 52F804FB 		_UNNEST
 2357              	
 2358              	// **************************************************************************
 2359              	//  Numeric input, single precision
 2360              	
 2361              	//    DIGIT?	( c base -- u t )
 2362              	// 	Convert a character to its numeric value. A flag indicates success.
 2363              	
 2364 10f8 18060018 		.word	_DECIM+MAPOFFSET
 2365 10fc 06       	_DIGTQ:	.byte  6
ARM GAS  stm32eforth.s 			page 46


 2366 10fd 44494749 		.ascii "DIGIT?"
 2366      543F
 2367 1103 00       		.p2align 2 	
 2368              	DIGTQ:
 2369 1104 42F804ED 		_NEST
 2370 1108 FFF7A8FA 		BL	TOR
 2371 110c FFF735FA 		_DOLIT
 2372 1110 30000000 		.word	'0'
 2373 1114 FFF72AFB 		BL	SUBB
 2374 1118 FFF72FFA 		_DOLIT
 2375 111c 09000000 		.word	9
 2376 1120 FFF7CAFA 		BL	OVER
 2377 1124 FFF716FC 		BL	LESS
 2378 1128 FFF74AFA 		BL	QBRAN
 2379 112c 90060018 		.word	DGTQ1+MAPOFFSET
 2380 1130 FFF723FA 		_DOLIT
 2381 1134 07000000 		.word	7
 2382 1138 FFF718FB 		BL	SUBB
 2383 113c FFF7AAFA 		BL	DUPP
 2384 1140 FFF71BFA 		_DOLIT
 2385 1144 0A000000 		.word	10
 2386 1148 FFF704FC 		BL	LESS
 2387 114c FFF7D0FA 		BL	ORR
 2388              	DGTQ1:
 2389 1150 FFF7A0FA 	  BL	DUPP
 2390 1154 FFF770FA 		BL	RFROM
 2391 1158 FFF7F0FB 		BL	ULESS
 2392 115c 52F804FB 		_UNNEST
 2393              	
 2394              	//    NUMBER?	( a -- n T | a F )
 2395              	// 	Convert a number word to integer. Push a flag on tos.
 2396              	
 2397 1160 3C060018 		.word	_DIGTQ+MAPOFFSET
 2398 1164 07       	_NUMBQ:	.byte  7
 2399 1165 4E554D42 		.ascii "NUMBER?"
 2399      45523F
 2400              		.p2align 2 	
 2401              	NUMBQ:
 2402 116c 42F804ED 		_NEST
 2403 1170 FFF798FC 		BL	BASE
 2404 1174 FFF74AFA 		BL	AT
 2405 1178 FFF770FA 		BL	TOR
 2406 117c FFF7FDF9 		_DOLIT
 2407 1180 00000000 		.word	0
 2408 1184 FFF798FA 		BL	OVER
 2409 1188 FFF734FC 		BL	COUNT
 2410 118c FFF794FA 		BL	OVER
 2411 1190 FFF74CFA 		BL	CAT
 2412 1194 FFF7F1F9 		_DOLIT
 2413 1198 24000000 		.word	'$'
 2414 119c FFF7C2FB 		BL	EQUAL
 2415 11a0 FFF70EFA 		BL	QBRAN
 2416 11a4 FC060018 		.word	NUMQ1+MAPOFFSET
 2417 11a8 FFF788FF 		BL	HEX
 2418 11ac FFF77AFA 		BL	SWAP
 2419 11b0 FFF702FB 		BL	ONEP
 2420 11b4 FFF776FA 		BL	SWAP
ARM GAS  stm32eforth.s 			page 47


 2421 11b8 FFF706FB 		BL	ONEM
 2422              	NUMQ1:
 2423 11bc FFF77CFA 		BL	OVER
 2424 11c0 FFF734FA 		BL	CAT
 2425 11c4 FFF7D9F9 		_DOLIT
 2426 11c8 2D000000 		.word	'-'
 2427 11cc FFF7AAFB 		BL	EQUAL
 2428 11d0 FFF744FA 		BL	TOR
 2429 11d4 FFF766FA 		BL	SWAP
 2430 11d8 FFF738FA 		BL	RAT
 2431 11dc FFF7C6FA 		BL	SUBB
 2432 11e0 FFF760FA 		BL	SWAP
 2433 11e4 FFF732FA 		BL	RAT
 2434 11e8 FFF7B8FA 		BL	PLUS
 2435 11ec FFF73EFB 		BL	QDUP
 2436 11f0 FFF7E6F9 		BL	QBRAN
 2437 11f4 C0070018 		.word	NUMQ6+MAPOFFSET
 2438 11f8 FFF7E6FA 		BL	ONEM
 2439 11fc FFF72EFA 		BL	TOR
 2440              	NUMQ2:
 2441 1200 FFF748FA 		BL	DUPP
 2442 1204 FFF72AFA 		BL	TOR
 2443 1208 FFF710FA 		BL	CAT
 2444 120c FFF74AFC 		BL	BASE
 2445 1210 FFF7FCF9 		BL	AT
 2446 1214 FFF776FF 		BL	DIGTQ
 2447 1218 FFF7D2F9 		BL	QBRAN
 2448 121c A4070018 		.word	NUMQ4+MAPOFFSET
 2449 1220 FFF740FA 		BL	SWAP
 2450 1224 FFF73EFC 		BL	BASE
 2451 1228 FFF7F0F9 		BL	AT
 2452 122c FFF7A6FA 		BL	STAR
 2453 1230 FFF794FA 		BL	PLUS
 2454 1234 FFF700FA 		BL	RFROM
 2455 1238 FFF7BEFA 		BL	ONEP
 2456 123c FFF7B1F9 		BL	DONXT
 2457 1240 40070018 		.word	NUMQ2+MAPOFFSET
 2458 1244 FFF702FA 		BL	RAT
 2459 1248 FFF72CFA 		BL	SWAP
 2460 124c FFF71AFA 		BL	DROP
 2461 1250 FFF7B6F9 		BL	QBRAN
 2462 1254 9C070018 		.word	NUMQ3+MAPOFFSET
 2463 1258 FFF748FB 		BL	NEGAT
 2464              	NUMQ3:
 2465 125c FFF722FA 		BL	SWAP
 2466 1260 00F00CB8 		B.W	NUMQ5
 2467              	NUMQ4:
 2468 1264 FFF7E8F9 		BL	RFROM
 2469 1268 FFF7E6F9 		BL	RFROM
 2470 126c FFF712FB 		BL	DDROP
 2471 1270 FFF710FB 		BL	DDROP
 2472 1274 FFF781F9 		_DOLIT
 2473 1278 00000000 		.word	0
 2474              	NUMQ5:
 2475 127c FFF70AFA 		BL	DUPP
 2476              	NUMQ6:
 2477 1280 FFF7DAF9 		BL	RFROM
ARM GAS  stm32eforth.s 			page 48


 2478 1284 FFF706FB 		BL	DDROP
 2479 1288 FFF7D6F9 		BL	RFROM
 2480 128c FFF70AFC 		BL	BASE
 2481 1290 FFF7B2F9 		BL	STORE
 2482 1294 52F804FB 		_UNNEST
 2483              	
 2484              	// **************************************************************************
 2485              	//  Basic I/O
 2486              	
 2487              	//    KEY	 ( -- c )
 2488              	// 	Wait for and return an input character.
 2489              	
 2490 1298 A4060018 		.word	_NUMBQ+MAPOFFSET
 2491 129c 03       	_KEY:	.byte  3
 2492 129d 4B4559   		.ascii "KEY"
 2493              		.p2align 2 	
 2494              	KEY:
 2495 12a0 42F804ED 		_NEST
 2496              	KEY1:
 2497 12a4 FFF73CF9 		BL	QRX
 2498 12a8 FFF78AF9 		BL	QBRAN
 2499 12ac E4070018 		.word	KEY1+MAPOFFSET
 2500 12b0 52F804FB 		_UNNEST
 2501              	
 2502              	//    SPACE	( -- )
 2503              	// 	Send the blank character to the output device.
 2504              	
 2505 12b4 DC070018 		.word	_KEY+MAPOFFSET
 2506 12b8 05       	_SPACE:	.byte  5
 2507 12b9 53504143 		.ascii "SPACE"
 2507      45
 2508 12be 00BF     		.p2align 2 	
 2509              	SPACE:
 2510 12c0 42F804ED 		_NEST
 2511 12c4 FFF7A8FA 		BL	BLANK
 2512 12c8 FFF746F9 		BL	EMIT
 2513 12cc 52F804FB 		_UNNEST
 2514              	
 2515              	//    SPACES	( +n -- )
 2516              	// 	Send n spaces to the output device.
 2517              	
 2518 12d0 F8070018 		.word	_SPACE+MAPOFFSET
 2519 12d4 06       	_SPACS:	.byte  6
 2520 12d5 53504143 		.ascii "SPACES"
 2520      4553
 2521 12db 00       		.p2align 2 	
 2522              	SPACS:
 2523 12dc 42F804ED 		_NEST
 2524 12e0 FFF74BF9 		_DOLIT
 2525 12e4 00000000 		.word	0
 2526 12e8 FFF74CFB 		BL	MAX
 2527 12ec FFF7B6F9 		BL	TOR
 2528 12f0 00F002B8 		B.W	CHAR2
 2529              	CHAR1:
 2530 12f4 FFF7E4FF 		BL	SPACE
 2531              	CHAR2:
 2532 12f8 FFF753F9 		BL	DONXT
ARM GAS  stm32eforth.s 			page 49


 2533 12fc 34080018 		.word	CHAR1+MAPOFFSET
 2534 1300 52F804FB 		_UNNEST
 2535              	
 2536              	//    TYPE	( b u -- )
 2537              	// 	Output u characters from b.
 2538              	
 2539 1304 14080018 		.word	_SPACS+MAPOFFSET
 2540 1308 04       	_TYPEE:	.byte	4
 2541 1309 54595045 		.ascii "TYPE"
 2542 130d 0000BF   		.p2align 2 	
 2543              	TYPEE:
 2544 1310 42F804ED 		_NEST
 2545 1314 FFF7A2F9 		BL  TOR   // ( a+1 -- R: u )
 2546 1318 00F006B8 		B.W	TYPE2
 2547              	TYPE1:  
 2548 131c FFF76AFB 		BL  COUNT
 2549 1320 FFF72CFD 		BL	TCHAR
 2550 1324 FFF718F9 		BL	EMIT
 2551              	TYPE2:  
 2552 1328 FFF73BF9 		BL  DONXT  
 2553 132c 5C080018 		.word	TYPE1+MAPOFFSET
 2554 1330 FFF7A8F9 		BL	DROP
 2555 1334 52F804FB 		_UNNEST
 2556              	
 2557              	//    CR	  ( -- )
 2558              	// 	Output a carriage return and a line feed.
 2559              	
 2560 1338 48080018 		.word	_TYPEE+MAPOFFSET
 2561 133c 02       	_CR:	.byte  2
 2562 133d 4352     		.ascii "CR"
 2563 133f 00       		.p2align 2 	
 2564              	CR:
 2565 1340 42F804ED 		_NEST
 2566 1344 FFF719F9 		_DOLIT
 2567 1348 0D000000 		.word	CRR
 2568 134c FFF704F9 		BL	EMIT
 2569 1350 FFF713F9 		_DOLIT
 2570 1354 0A000000 		.word	LF
 2571 1358 FFF7FEF8 		BL	EMIT
 2572 135c 52F804FB 		_UNNEST
 2573              	
 2574              	//    do_$	( -- a )
 2575              	// 	Return the address of a compiled string.
 2576              	//  adjust return address to skip over it.
 2577              	
 2578              	// 	.word	_CR+MAPOFFSET
 2579              	// _DOSTR	.byte  COMPO+3
 2580              	// 	.ascii "do$$"
 2581              	// 	.p2align 2 	
 2582              	DOSTR:
 2583 1360 42F804ED 		_NEST     
 2584              	/* compiled string address is 2 levels deep */
 2585 1364 FFF768F9 		BL	RFROM	// { -- a1 }
 2586 1368 FFF766F9 		BL	RFROM	//  {a1 -- a1 a2 } b0 set
 2587 136c FFF72CFA 		BL	ONEM	//  clear b0
 2588 1370 FFF790F9 		BL	DUPP	// {a1 a2 -- a1 a2 a2 }
 2589 1374 FFF73EFB 		BL	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
ARM GAS  stm32eforth.s 			page 50


 2590 1378 FFF7F0F9 		BL	PLUS	// { -- a1 a2 a2+1+c }
 2591 137c FFF7F2FC 		BL	ALGND	//  end of string
 2592 1380 FFF71AFA 		BL	ONEP	//  restore b0, this result in return address 2 level deep.
 2593 1384 FFF76AF9 		BL	TOR		//  address after string { -- a1 a2 }
 2594 1388 FFF78CF9 		BL	SWAP	//  count tugged
 2595 138c FFF766F9 		BL	TOR     //  ( -- a2) is string address
 2596 1390 52F804FB 		_UNNEST
 2597              	
 2598              	//    $"|	( -- a )
 2599              	// 	Run time routine compiled by _". Return address of a compiled string.
 2600              	
 2601              	// 	.word	_DOSTR+MAPOFFSET
 2602              	// _STRQP	.byte  COMPO+3
 2603              	// 	.ascii "$\"|"
 2604              	// 	.p2align 2 	
 2605              	STRQP:
 2606 1394 42F804ED 		_NEST
 2607 1398 FFF7E2FF 		BL	DOSTR
 2608 139c 52F804FB 		_UNNEST			// force a call to dostr
 2609              	
 2610              	//    .$	( a -- )
 2611              	// 	Run time routine of ." . Output a compiled string.
 2612              	
 2613              	// 	.word	_STRQP+MAPOFFSET
 2614              	// _DOTST	.byte  COMPO+2
 2615              	// 	.ascii ".$$"
 2616              	// 	.p2align 2 	
 2617              	DOTST:
 2618 13a0 42F804ED 		_NEST
 2619 13a4 FFF726FB 		BL	COUNT // ( -- a+1 c )
 2620 13a8 FFF7B2FF 		BL	TYPEE
 2621 13ac 52F804FB 		_UNNEST
 2622              	
 2623              	//    ."|	( -- )
 2624              	// 	Run time routine of ." . Output a compiled string.
 2625              	
 2626              	// 	.word	_DOTST+MAPOFFSET
 2627              	// _DOTQP	.byte  COMPO+3
 2628              	// 	.ascii ".""|"
 2629              	// 	.p2align 2 	
 2630              	DOTQP:
 2631 13b0 42F804ED 		_NEST
 2632 13b4 FFF7D4FF 		BL	DOSTR
 2633 13b8 FFF7F2FF 		BL	DOTST
 2634 13bc 52F804FB 		_UNNEST
 2635              	
 2636              	//    .R	  ( n +n -- )
 2637              	// 	Display an integer in a field of n columns, right justified.
 2638              	
 2639 13c0 7C080018 		.word	_CR+MAPOFFSET
 2640 13c4 02       	_DOTR:	.byte  2
 2641 13c5 2E52     		.ascii ".R"
 2642 13c7 00       		.p2align 2 	
 2643              	DOTR:
 2644 13c8 42F804ED 		_NEST
 2645 13cc FFF746F9 		BL	TOR
 2646 13d0 FFF75CFE 		BL	STRR
ARM GAS  stm32eforth.s 			page 51


 2647 13d4 FFF730F9 		BL	RFROM
 2648 13d8 FFF76EF9 		BL	OVER
 2649 13dc FFF7C6F9 		BL	SUBB
 2650 13e0 FFF77CFF 		BL	SPACS
 2651 13e4 FFF794FF 		BL	TYPEE
 2652 13e8 52F804FB 		_UNNEST
 2653              	
 2654              	//    U.R	 ( u +n -- )
 2655              	// 	Display an unsigned integer in n column, right justified.
 2656              	
 2657 13ec 04090018 		.word	_DOTR+MAPOFFSET
 2658 13f0 03       	_UDOTR:	.byte  3
 2659 13f1 552E52   		.ascii "U.R"
 2660              		.p2align 2 	
 2661              	UDOTR:
 2662 13f4 42F804ED 		_NEST
 2663 13f8 FFF730F9 		BL	TOR
 2664 13fc FFF7DAFD 		BL	BDIGS
 2665 1400 FFF70EFE 		BL	DIGS
 2666 1404 FFF732FE 		BL	EDIGS
 2667 1408 FFF716F9 		BL	RFROM
 2668 140c FFF754F9 		BL	OVER
 2669 1410 FFF7ACF9 		BL	SUBB
 2670 1414 FFF762FF 		BL	SPACS
 2671 1418 FFF77AFF 		BL	TYPEE
 2672 141c 52F804FB 		_UNNEST
 2673              	
 2674              	//    U.	  ( u -- )
 2675              	// 	Display an unsigned integer in free format.
 2676              	
 2677 1420 30090018 		.word	_UDOTR+MAPOFFSET
 2678 1424 02       	_UDOT:	.byte  2
 2679 1425 552E     		.ascii "U."
 2680 1427 00       		.p2align 2 	
 2681              	UDOT:
 2682 1428 42F804ED 		_NEST
 2683 142c FFF7C2FD 		BL	BDIGS
 2684 1430 FFF7F6FD 		BL	DIGS
 2685 1434 FFF71AFE 		BL	EDIGS
 2686 1438 FFF742FF 		BL	SPACE
 2687 143c FFF768FF 		BL	TYPEE
 2688 1440 52F804FB 		_UNNEST
 2689              	
 2690              	//    .	   ( w -- )
 2691              	// 	Display an integer in free format, preceeded by a space.
 2692              	
 2693 1444 64090018 		.word	_UDOT+MAPOFFSET
 2694 1448 01       	_DOT:	.byte  1
 2695 1449 2E       		.ascii "."
 2696 144a 00BF     		.p2align 2 	
 2697              	DOT:
 2698 144c 42F804ED 		_NEST
 2699 1450 FFF728FB 		BL	BASE
 2700 1454 FFF7DAF8 		BL	AT
 2701 1458 FFF78FF8 		_DOLIT
 2702 145c 0A000000 		.word	10
 2703 1460 FFF750F9 		BL	XORR			// ?decimal
ARM GAS  stm32eforth.s 			page 52


 2704 1464 FFF7ACF8 		BL	QBRAN
 2705 1468 B4090018 		.word	DOT1+MAPOFFSET
 2706 146c FFF7DCFF 		BL	UDOT
 2707 1470 52F804FB 		_UNNEST			// no,display unsigned
 2708              	DOT1:
 2709 1474 FFF70AFE 	    BL	STRR
 2710 1478 FFF722FF 		BL	SPACE
 2711 147c FFF748FF 		BL	TYPEE
 2712 1480 52F804FB 		_UNNEST			// yes, display signed
 2713              	
 2714              	//    ?	   ( a -- )
 2715              	// 	Display the contents in a memory cell.
 2716              	
 2717 1484 88090018 		.word	_DOT+MAPOFFSET
 2718 1488 01       	_QUEST:	.byte  1
 2719 1489 3F       		.ascii "?"
 2720 148a 00BF     		.p2align 2 	
 2721              	QUEST:
 2722 148c 42F804ED 		_NEST
 2723 1490 FFF7BCF8 		BL	AT
 2724 1494 FFF7DAFF 		BL	DOT
 2725 1498 52F804FB 		_UNNEST
 2726              	
 2727              	// **************************************************************************
 2728              	//  Parsing
 2729              	
 2730              	//    parse	( b u c -- b u delta //  string> )
 2731              	// 	Scan word delimited by c. Return found string and its offset.
 2732              	
 2733              	// 	.word	_QUEST+MAPOFFSET
 2734              	// _PARS	.byte  5
 2735              	// 	.ascii "parse"
 2736              	// 	.p2align 2 	
 2737              	PARS:
 2738 149c 42F804ED 		_NEST
 2739 14a0 FFF705FB 		BL	TEMP
 2740 14a4 FFF7A8F8 		BL	STORE
 2741 14a8 FFF706F9 		BL	OVER
 2742 14ac FFF7D6F8 		BL	TOR
 2743 14b0 FFF7F0F8 		BL	DUPP
 2744 14b4 FFF784F8 		BL	QBRAN
 2745 14b8 EA0A0018 		.word	PARS8+MAPOFFSET
 2746 14bc FFF784F9 		BL	ONEM
 2747 14c0 FFF7F5FA 		BL	TEMP
 2748 14c4 FFF7A2F8 		BL	AT
 2749 14c8 FFF7A6F9 		BL	BLANK
 2750 14cc FFF72AFA 		BL	EQUAL
 2751 14d0 FFF776F8 		BL	QBRAN
 2752 14d4 640A0018 		.word	PARS3+MAPOFFSET
 2753 14d8 FFF7C0F8 		BL	TOR
 2754              	PARS1:
 2755 14dc FFF79CF9 		BL	BLANK
 2756 14e0 FFF7EAF8 		BL	OVER
 2757 14e4 FFF7A2F8 		BL	CAT			// skip leading blanks 
 2758 14e8 FFF740F9 		BL	SUBB
 2759 14ec FFF7ECF8 		BL	ZLESS
 2760 14f0 FFF7F2F9 		BL	INVER
ARM GAS  stm32eforth.s 			page 53


 2761 14f4 FFF764F8 		BL	QBRAN
 2762 14f8 600A0018 		.word	PARS2+MAPOFFSET
 2763 14fc FFF75CF9 		BL	ONEP
 2764 1500 FFF74FF8 		BL	DONXT
 2765 1504 1C0A0018 		.word	PARS1+MAPOFFSET
 2766 1508 FFF796F8 		BL	RFROM
 2767 150c FFF7BAF8 		BL	DROP
 2768 1510 FFF733F8 		_DOLIT
 2769 1514 00000000 		.word	0
 2770 1518 FFF7BCF8 		BL	DUPP
 2771 151c 52F804FB 		_UNNEST
 2772              	PARS2:
 2773 1520 FFF78AF8 	  BL	RFROM
 2774              	PARS3:
 2775 1524 FFF7C8F8 		BL	OVER
 2776 1528 FFF7BCF8 		BL	SWAP
 2777 152c FFF796F8 		BL	TOR
 2778              	PARS4:
 2779 1530 FFF7BDFA 		BL	TEMP
 2780 1534 FFF76AF8 		BL	AT
 2781 1538 FFF7BEF8 		BL	OVER
 2782 153c FFF776F8 		BL	CAT
 2783 1540 FFF714F9 		BL	SUBB			// scan for delimiter
 2784 1544 FFF7B3FA 		BL	TEMP
 2785 1548 FFF760F8 		BL	AT
 2786 154c FFF764F9 		BL	BLANK
 2787 1550 FFF7E8F9 		BL	EQUAL
 2788 1554 FFF734F8 		BL	QBRAN
 2789 1558 A00A0018 		.word	PARS5+MAPOFFSET
 2790 155c FFF7B4F8 		BL	ZLESS
 2791              	PARS5:
 2792 1560 FFF72EF8 		BL	QBRAN
 2793 1564 BE0A0018 		.word	PARS6+MAPOFFSET
 2794 1568 FFF726F9 		BL	ONEP
 2795 156c FFF719F8 		BL	DONXT
 2796 1570 700A0018 		.word	PARS4+MAPOFFSET
 2797 1574 FFF78EF8 		BL	DUPP
 2798 1578 FFF770F8 		BL	TOR
 2799 157c 09E0     		B	PARS7
 2800              	PARS6:
 2801 157e FFF75BF8 		BL	RFROM
 2802 1582 FFF77FF8 		BL	DROP
 2803 1586 FFF785F8 		BL	DUPP
 2804 158a FFF715F9 		BL	ONEP
 2805 158e FFF765F8 		BL	TOR
 2806              	PARS7:
 2807 1592 FFF791F8 		BL	OVER
 2808 1596 FFF7E9F8 		BL	SUBB
 2809 159a FFF74DF8 		BL	RFROM
 2810 159e FFF74BF8 		BL	RFROM
 2811 15a2 FFF7E3F8 		BL	SUBB
 2812 15a6 52F804FB 		_UNNEST
 2813              	PARS8:
 2814 15aa FFF785F8 		BL	OVER
 2815 15ae FFF743F8 		BL	RFROM
 2816 15b2 FFF7DBF8 		BL	SUBB
 2817 15b6 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 54


 2818              	
 2819              	//    PARSE	( c -- b u //  string> )
 2820              	// 	Scan input stream and return counted string delimited by c.
 2821              	
 2822 15ba C8090018 		.word	_QUEST+MAPOFFSET
 2823 15be 05       	_PARSE:	.byte  5
 2824 15bf 50415253 		.ascii "PARSE"
 2824      45
 2825              		.p2align 2 	
 2826              	PARSE:
 2827 15c4 42F804ED 		_NEST
 2828 15c8 FFF748F8 		BL	TOR
 2829 15cc FFF736FC 		BL	TIB
 2830 15d0 FFF782FA 		BL	INN
 2831 15d4 FFF71AF8 		BL	AT
 2832 15d8 FFF7C0F8 		BL	PLUS			// current input buffer pointer
 2833 15dc FFF786FA 		BL	NTIB
 2834 15e0 FFF714F8 		BL	AT
 2835 15e4 FFF778FA 		BL	INN
 2836 15e8 FFF710F8 		BL	AT
 2837 15ec FFF7BEF8 		BL	SUBB			// remaining count
 2838 15f0 FFF722F8 		BL	RFROM
 2839 15f4 FFF752FF 		BL	PARS
 2840 15f8 FFF76EFA 		BL	INN
 2841 15fc FFF7D6F9 		BL	PSTOR
 2842 1600 52F804FB 		_UNNEST
 2843              	
 2844              	//    .(	  ( -- )
 2845              	// 	Output following string up to next ) .
 2846              	
 2847 1604 FE0A0018 		.word	_PARSE+MAPOFFSET
 2848 1608 82       	_DOTPR:	.byte  IMEDD+2
 2849 1609 2E28     		.ascii ".("
 2850 160b 00       		.p2align 2 	
 2851              	DOTPR:
 2852 160c 42F804ED 		_NEST
 2853 1610 FEF7B3FF 		_DOLIT
 2854 1614 29000000 		.word	')'
 2855 1618 FFF7D4FF 		BL	PARSE
 2856 161c FFF778FE 		BL	TYPEE
 2857 1620 52F804FB 		_UNNEST
 2858              	
 2859              	//    (	   ( -- )
 2860              	// 	Ignore following string up to next ) . A comment.
 2861              	
 2862 1624 480B0018 		.word	_DOTPR+MAPOFFSET
 2863 1628 81       	_PAREN:	.byte  IMEDD+1
 2864 1629 28       		.ascii "("
 2865 162a 00BF     		.p2align 2 	
 2866              	PAREN:
 2867 162c 42F804ED 		_NEST
 2868 1630 FEF7A3FF 		_DOLIT
 2869 1634 29000000 		.word	')'
 2870 1638 FFF7C4FF 		BL	PARSE
 2871 163c FFF72AF9 		BL	DDROP
 2872 1640 52F804FB 		_UNNEST
 2873              	
ARM GAS  stm32eforth.s 			page 55


 2874              	//    \	   ( -- )
 2875              	// 	Ignore following text till the end of line.
 2876              	
 2877 1644 680B0018 		.word	_PAREN+MAPOFFSET
 2878 1648 81       	_BKSLA:	.byte  IMEDD+1
 2879 1649 5C       		.ascii	"\\"
 2880 164a 00BF     		.p2align 2 	
 2881              	BKSLA:
 2882 164c 42F804ED 		_NEST
 2883 1650 FFF74CFA 		BL	NTIB
 2884 1654 FEF7DAFF 		BL	AT
 2885 1658 FFF73EFA 		BL	INN
 2886 165c FEF7CCFF 		BL	STORE
 2887 1660 52F804FB 		_UNNEST
 2888              	
 2889              	//    CHAR	( -- c )
 2890              	// 	Parse next word and return its first character.
 2891              	
 2892 1664 880B0018 		.word	_BKSLA+MAPOFFSET
 2893 1668 04       	_CHAR:	.byte  4
 2894 1669 43484152 		.ascii "CHAR"
 2895 166d 0000BF   		.p2align 2 	
 2896              	CHAR:
 2897 1670 42F804ED 		_NEST
 2898 1674 FFF7D0F8 		BL	BLANK
 2899 1678 FFF7A4FF 		BL	PARSE
 2900 167c FFF702F8 		BL	DROP
 2901 1680 FEF7D4FF 		BL	CAT
 2902 1684 52F804FB 		_UNNEST
 2903              	
 2904              	//    WORD	( c -- a //  string> )
 2905              	// 	Parse a word from input stream and copy it to code dictionary.
 2906              	
 2907 1688 A80B0018 		.word	_CHAR+MAPOFFSET
 2908 168c 04       	_WORDD:	.byte  4
 2909 168d 574F5244 		.ascii "WORD"
 2910 1691 0000BF   		.p2align 2 	
 2911              	WORDD:
 2912 1694 42F804ED 		_NEST
 2913 1698 FFF794FF 		BL	PARSE
 2914 169c FFF7B6FB 		BL	HERE
 2915 16a0 FFF7AAF8 		BL	CELLP
 2916 16a4 FFF728FC 		BL	PACKS
 2917 16a8 52F804FB 		_UNNEST
 2918              	
 2919              	//    TOKEN	( -- a //  string> )
 2920              	// 	Parse a word from input stream and copy it to name dictionary.
 2921              	
 2922 16ac CC0B0018 		.word	_WORDD+MAPOFFSET
 2923 16b0 05       	_TOKEN:	.byte  5
 2924 16b1 544F4B45 		.ascii "TOKEN"
 2924      4E
 2925 16b6 00BF     		.p2align 2 	
 2926              	TOKEN:
 2927 16b8 42F804ED 		_NEST
 2928 16bc FFF7ACF8 		BL	BLANK
 2929 16c0 FFF7E8FF 		BL	WORDD
ARM GAS  stm32eforth.s 			page 56


 2930 16c4 52F804FB 		_UNNEST
 2931              	
 2932              	// **************************************************************************
 2933              	//  Dictionary search
 2934              	
 2935              	//    NAME>	( na -- ca )
 2936              	// 	Return a code address given a name address.
 2937              	
 2938 16c8 F00B0018 		.word	_TOKEN+MAPOFFSET
 2939 16cc 05       	_NAMET:	.byte  5
 2940 16cd 4E414D45 		.ascii "NAME>"
 2940      3E
 2941 16d2 00BF     		.p2align 2 	
 2942              	NAMET:
 2943 16d4 42F804ED 		_NEST
 2944 16d8 FFF78CF9 		BL	COUNT
 2945 16dc FEF74DFF 		_DOLIT
 2946 16e0 1F000000 		.word	0x1F
 2947 16e4 FEF7FAFF 		BL	ANDD
 2948 16e8 FFF738F8 		BL	PLUS
 2949 16ec FFF73AFB 		BL	ALGND
 2950 16f0 52F804FB 		_UNNEST
 2951              	
 2952              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2953              	// 	Compare u bytes in two strings. Return 0 if identical.
 2954              	//
 2955              	//  Picatout 2020-12-01, 
 2956              	//      Because of problem with .align directive that
 2957              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2958              	// 		words  to do a byte by byte comparison. 
 2959              	//
 2960 16f4 0C0C0018 		.word	_NAMET+MAPOFFSET
 2961 16f8 05       	_SAMEQ:	.byte  5
 2962 16f9 53414D45 		.ascii "SAME?"
 2962      3F
 2963 16fe 00BF     		.p2align 2	
 2964              	SAMEQ:
 2965 1700 42F804ED 		_NEST
 2966 1704 FEF7AAFF 		BL	TOR
 2967 1708 00F01EB8 		B.W	SAME2
 2968              	SAME1:
 2969 170c FEF7D4FF 		BL	OVER  // ( a1 a2 -- a1 a2 a1 )
 2970 1710 FEF79CFF 		BL	RAT   // a1 a2 a1 u 
 2971 1714 FFF722F8 		BL	PLUS  // a1 a2 a1+u 
 2972 1718 FEF788FF 		BL	CAT	   // a1 a2 c1    		
 2973 171c FEF7CCFF 		BL	OVER  // a1 a2 c1 a2 
 2974 1720 FEF794FF 		BL	RAT    
 2975 1724 FFF71AF8 		BL	PLUS    
 2976 1728 FEF780FF 		BL	CAT	  // a1 a2 c1 c2
 2977 172c FFF71EF8 		BL	SUBB  
 2978 1730 FFF79CF8 		BL	QDUP
 2979 1734 FEF744FF 		BL	QBRAN
 2980 1738 880C0018 		.word	SAME2+MAPOFFSET
 2981 173c FEF77CFF 		BL	RFROM
 2982 1740 FEF7A0FF 		BL	DROP
 2983 1744 52F804FB 		_UNNEST	// strings not equal
 2984              	SAME2:
ARM GAS  stm32eforth.s 			page 57


 2985 1748 FEF72BFF 		BL	DONXT
 2986 174c 4C0C0018 		.word	SAME1+MAPOFFSET
 2987 1750 FEF713FF 		_DOLIT
 2988 1754 00000000 		.word	0
 2989 1758 52F804FB 		_UNNEST	// strings equal
 2990              	
 2991              	//    find	( a na -- ca na | a F )
 2992              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2993              	
 2994              	//  Picatout 2020-12-01,  
 2995              	//		Modified from original. See comment for word "SAME?" 
 2996              	
 2997              	// 	.word	_SAMEQ+MAPOFFSET
 2998              	// _FIND	.byte  4
 2999              	// 	.ascii "find"
 3000              	// 	.p2align 2 	
 3001              	FIND:
 3002 175c 42F804ED 		_NEST
 3003 1760 FEF7A0FF 		BL	SWAP			// na a	
 3004 1764 FFF746F9 		BL	COUNT			// na a+1 count
 3005 1768 FEF794FF 		BL	DUPP 
 3006 176c FFF79FF9 		BL	TEMP
 3007 1770 FEF742FF 		BL	STORE			// na a+1 count 
 3008 1774 FEF772FF 		BL  TOR		// na a+1  R: count  
 3009 1778 FEF794FF 		BL	SWAP			// a+1 na
 3010              	FIND1:
 3011 177c FEF78AFF 		BL	DUPP			// a+1 na na
 3012 1780 FEF71EFF 		BL	QBRAN
 3013 1784 0C0D0018 		.word	FIND6+MAPOFFSET	// end of vocabulary
 3014 1788 FEF784FF 		BL	DUPP			// a+1 na na
 3015 178c FEF74EFF 		BL	CAT			// a+1 na name1
 3016 1790 FEF7F3FE 		_DOLIT
 3017 1794 1FFFFFFF 		.word	MASKK
 3018 1798 FEF7A0FF 		BL	ANDD
 3019 179c FEF756FF 		BL	RAT			// a+1 na name1 count 
 3020 17a0 FEF7B0FF 		BL	XORR			// a+1 na,  same length?
 3021 17a4 FEF70CFF 		BL	QBRAN
 3022 17a8 F80C0018 		.word	FIND2+MAPOFFSET
 3023 17ac FFF72CF8 		BL	CELLM			// a+1 la
 3024 17b0 FEF72CFF 		BL	AT			// a+1 next_na
 3025 17b4 FFF7E2BF 		B.w	FIND1			// try next word
 3026              	FIND2:   
 3027 17b8 FEF7FEFF 		BL	ONEP			// a+1 na+1
 3028 17bc FFF777F9 		BL	TEMP
 3029 17c0 FEF724FF 		BL	AT			// a+1 na+1 count
 3030 17c4 FFF79CFF 		BL	SAMEQ		// a+1 na+1 ? 
 3031              	FIND3:	
 3032 17c8 00F00CB8 		B.w	FIND4
 3033              	FIND6:	
 3034 17cc FEF734FF 		BL	RFROM			// a+1 0 name1 -- , no match
 3035 17d0 FEF758FF 		BL	DROP			// a+1 0
 3036 17d4 FEF766FF 		BL	SWAP			// 0 a+1
 3037 17d8 FEF7F6FF 		BL	ONEM			// 0 a
 3038 17dc FEF762FF 		BL	SWAP			// a 0 
 3039 17e0 52F804FB 		_UNNEST			// return without a match
 3040              	FIND4:	
 3041 17e4 FEF7ECFE 		BL	QBRAN			// a+1 na+1
ARM GAS  stm32eforth.s 			page 58


 3042 17e8 3C0D0018 		.word	FIND5+MAPOFFSET	// found a match
 3043 17ec FEF7ECFF 		BL	ONEM			// a+1 na
 3044 17f0 FFF70AF8 		BL	CELLM			// a+4 la
 3045 17f4 FEF70AFF 		BL	AT			// a+1 next_na
 3046 17f8 FFF7C0BF 		B.w	FIND1			// compare next name
 3047              	FIND5:	
 3048 17fc FEF71CFF 		BL	RFROM			// a+1 na+1 count
 3049 1800 FEF740FF 		BL	DROP			// a+1 na+1
 3050 1804 FEF74EFF 		BL	SWAP			// na+1 a+1
 3051 1808 FEF73CFF 		BL	DROP			// na+1
 3052 180c FEF7DCFF 		BL	ONEM			// na
 3053 1810 FEF740FF 		BL	DUPP			// na na
 3054 1814 FFF75EFF 		BL	NAMET			// na ca
 3055 1818 FEF744FF 		BL	SWAP			// ca na
 3056 181c 52F804FB 		_UNNEST			//  return with a match
 3057              	
 3058              	//    NAME?	( a -- ca na | a F )
 3059              	// 	Search all context vocabularies for a string.
 3060              	
 3061 1820 380C0018 		.word	_SAMEQ+MAPOFFSET
 3062 1824 05       	_NAMEQ:	.byte  5
 3063 1825 4E414D45 		.ascii "NAME?"
 3063      3F
 3064 182a 00BF     		.p2align 2 	
 3065              	NAMEQ:
 3066 182c 42F804ED 		_NEST
 3067 1830 FFF77CF9 		BL	CNTXT
 3068 1834 FEF7EAFE 		BL	AT
 3069 1838 FFF790FF 		BL	FIND
 3070 183c 52F804FB 		_UNNEST
 3071              	
 3072              	// **************************************************************************
 3073              	//  Terminal input
 3074              	
 3075              	//    	  ( bot eot cur -- bot eot cur )
 3076              	// 	Backup the cursor by one character.
 3077              	
 3078              	// 	.word	_NAMEQ+MAPOFFSET
 3079              	// _BKSP	.byte  2
 3080              	// 	.ascii "^H"
 3081              	// 	.p2align 2 	
 3082              	BKSP:
 3083 1840 42F804ED 		_NEST
 3084 1844 FEF70AFF 		BL	TOR
 3085 1848 FEF736FF 		BL	OVER
 3086 184c FEF7F4FE 		BL	RFROM
 3087 1850 FEF728FF 		BL	SWAP
 3088 1854 FEF730FF 		BL	OVER
 3089 1858 FEF754FF 		BL	XORR
 3090 185c FEF7B0FE 		BL	QBRAN
 3091 1860 C80D0018 		.word	BACK1+MAPOFFSET
 3092 1864 FEF789FE 		_DOLIT
 3093 1868 08000000 		.word	BKSPP
 3094 186c FEF774FE 		BL	TECHO
 3095              	// 	BL	ATEXE
 3096 1870 FEF7AAFF 		BL	ONEM
 3097 1874 FEF7D0FF 		BL	BLANK
ARM GAS  stm32eforth.s 			page 59


 3098 1878 FEF76EFE 		BL	TECHO
 3099              	// 	BL	ATEXE
 3100 187c FEF77DFE 		_DOLIT
 3101 1880 08000000 		.word	BKSPP
 3102 1884 FEF768FE 		BL	TECHO
 3103              	// 	BL	ATEXE
 3104              	BACK1:
 3105 1888 52F804FB 		  _UNNEST
 3106              	
 3107              	//    TAP	 ( bot eot cur c -- bot eot cur )
 3108              	// 	Accept and echo the key stroke and bump the cursor.
 3109              	
 3110              	// 	.word	_BKSP+MAPOFFSET
 3111              	// _TAP	.byte  3
 3112              	// 	.ascii "TAP"
 3113              	// 	.p2align 2 	
 3114              	TAP:
 3115 188c 42F804ED 		_NEST
 3116 1890 FEF700FF 		BL	DUPP
 3117 1894 FEF760FE 		BL	TECHO
 3118              	// 	BL	ATEXE
 3119 1898 FEF70EFF 		BL	OVER
 3120 189c FEF7BCFE 		BL	CSTOR
 3121 18a0 FEF78AFF 		BL	ONEP
 3122 18a4 52F804FB 		_UNNEST
 3123              	
 3124              	//    kTAP	( bot eot cur c -- bot eot cur )
 3125              	// 	Process a key stroke, CR or backspace.
 3126              	
 3127              	// 	.word	_TAP+MAPOFFSET
 3128              	// _KTAP	.byte  4
 3129              	// 	.ascii "kTAP"
 3130              	// 	.p2align 2 	
 3131              	KTAP:
 3132              	TTAP:
 3133 18a8 42F804ED 		_NEST
 3134 18ac FEF7F2FE 		BL	DUPP
 3135 18b0 FEF763FE 		_DOLIT
 3136 18b4 0D000000 		.word	CRR
 3137 18b8 FEF724FF 		BL	XORR
 3138 18bc FEF780FE 		BL	QBRAN
 3139 18c0 300E0018 		.word	KTAP2+MAPOFFSET
 3140 18c4 FEF759FE 		_DOLIT
 3141 18c8 08000000 		.word	BKSPP
 3142 18cc FEF71AFF 		BL	XORR
 3143 18d0 FEF776FE 		BL	QBRAN
 3144 18d4 280E0018 		.word	KTAP1+MAPOFFSET
 3145 18d8 FEF79EFF 		BL	BLANK
 3146 18dc FFF7D6FF 		BL	TAP
 3147 18e0 52F804FB 		_UNNEST
 3148 18e4 00000000 		.word	0			// patch
 3149              	KTAP1:
 3150 18e8 FFF7AAFF 	  BL	BKSP
 3151 18ec 52F804FB 		_UNNEST
 3152              	KTAP2:
 3153 18f0 FEF7C8FE 	  BL	DROP
 3154 18f4 FEF7D6FE 		BL	SWAP
ARM GAS  stm32eforth.s 			page 60


 3155 18f8 FEF7C4FE 		BL	DROP
 3156 18fc FEF7CAFE 		BL	DUPP
 3157 1900 52F804FB 		_UNNEST
 3158              	
 3159              	//    ACCEPT	( b u -- b u )
 3160              	// 	Accept characters to input buffer. Return with actual count.
 3161              	
 3162 1904 640D0018 		.word	_NAMEQ+MAPOFFSET
 3163 1908 06       	_ACCEP:	.byte  6
 3164 1909 41434345 		.ascii "ACCEPT"
 3164      5054
 3165 190f 00       		.p2align 2 	
 3166              	ACCEP:
 3167 1910 42F804ED 		_NEST
 3168 1914 FEF7D0FE 		BL	OVER
 3169 1918 FEF720FF 		BL	PLUS
 3170 191c FEF7CCFE 		BL	OVER
 3171              	ACCP1:
 3172 1920 FEF7C2FF 	  BL	DDUP
 3173 1924 FEF7EEFE 		BL	XORR
 3174 1928 FEF74AFE 		BL	QBRAN
 3175 192c 9C0E0018 		.word	ACCP4+MAPOFFSET
 3176 1930 FFF7B6FC 		BL	KEY
 3177 1934 FEF7AEFE 		BL	DUPP
 3178 1938 FEF76EFF 		BL	BLANK
 3179 193c FEF71DFE 		_DOLIT
 3180 1940 7F000000 		.word	127
 3181 1944 FFF754F9 		BL	WITHI
 3182 1948 FEF73AFE 		BL	QBRAN
 3183 194c 960E0018 		.word	ACCP2+MAPOFFSET
 3184 1950 FFF79CFF 		BL	TAP
 3185 1954 01E0     		B	ACCP3
 3186              	ACCP2:
 3187 1956 FFF7A7FF 	  BL	KTAP
 3188              	// 	BL	ATEXE
 3189              	ACCP3:	  
 3190 195a E1E7     		B	ACCP1
 3191              	ACCP4:
 3192 195c FEF792FE 	  BL	DROP
 3193 1960 FEF7AAFE 		BL	OVER
 3194 1964 FEF702FF 		BL	SUBB
 3195 1968 52F804FB 		_UNNEST
 3196              	
 3197              	//    QUERY	( -- )
 3198              	// 	Accept input stream to terminal input buffer.
 3199              	
 3200 196c 480E0018 		.word	_ACCEP+MAPOFFSET
 3201 1970 05       	_QUERY:	.byte  5
 3202 1971 51554552 		.ascii "QUERY"
 3202      59
 3203 1976 00BF     		.p2align 2 	
 3204              	QUERY:
 3205 1978 42F804ED 		_NEST
 3206 197c FFF75EFA 		BL	TIB
 3207 1980 FEF7FBFD 		_DOLIT
 3208 1984 50000000 		.word	80
 3209 1988 FFF7C2FF 		BL	ACCEP
ARM GAS  stm32eforth.s 			page 61


 3210 198c FFF7AEF8 		BL	NTIB
 3211 1990 FEF732FE 		BL	STORE
 3212 1994 FEF776FE 		BL	DROP
 3213 1998 FEF7EFFD 		_DOLIT
 3214 199c 00000000 		.word	0
 3215 19a0 FFF79AF8 		BL	INN
 3216 19a4 FEF728FE 		BL	STORE
 3217 19a8 52F804FB 		_UNNEST
 3218              	
 3219              	// **************************************************************************
 3220              	//  Error handling
 3221              	
 3222              	//    ABORT	( a -- )
 3223              	// 	Reset data stack and jump to QUIT.
 3224              	
 3225 19ac B00E0018 		.word	_QUERY+MAPOFFSET
 3226 19b0 05       	_ABORT:	.byte  5
 3227 19b1 41424F52 		.ascii "ABORT"
 3227      54
 3228 19b6 00BF     		.p2align 2 	
 3229              	ABORT:
 3230 19b8 42F804ED 		_NEST
 3231 19bc FFF780FC 		BL	SPACE
 3232              	ABORT1:
 3233 19c0 FFF718F8 		BL	COUNT
 3234 19c4 FFF7A4FC 		BL	TYPEE
 3235 19c8 FEF7D7FD 		_DOLIT
 3236 19cc 3F000000 		.word	0X3F
 3237 19d0 FEF7C2FD 		BL	EMIT
 3238 19d4 FFF7B4FC 		BL	CR
 3239 19d8 00F0ACF8 		BL	PRESE
 3240 19dc 00F0B4B8 		B.W	QUIT
 3241              	
 3242              	//    _abort"	( f -- )
 3243              	// 	Run time routine of ABORT" . Abort with a message.
 3244              	
 3245              	// 	.word	_ABORT+MAPOFFSET
 3246              	// _ABORQ	.byte  COMPO+6
 3247              	// 	.ascii "abort\""
 3248              	// 	.p2align 2 	
 3249              	ABORQ:
 3250 19e0 42F804ED 		_NEST
 3251 19e4 FFF7BCFC 		BL	DOSTR 
 3252 19e8 FEF75CFE 		BL	SWAP 
 3253 19ec FEF7E8FD 		BL	QBRAN
 3254 19f0 360F0018 		.word	1f+MAPOFFSET	// text flag
 3255 19f4 E4E7     		B	ABORT1 
 3256              	1:
 3257 19f6 FEF745FE 		BL	DROP
 3258 19fa 52F804FB 		_UNNEST			// drop error
 3259              	
 3260              	// **************************************************************************
 3261              	//  The text interpreter
 3262              	
 3263              	//    $INTERPRET  ( a -- )
 3264              	// 	Interpret a word. If failed, try to convert it to an integer.
 3265              	
ARM GAS  stm32eforth.s 			page 62


 3266 19fe F00E0018 		.word	_ABORT+MAPOFFSET
 3267 1a02 0A       	_INTER:	.byte  10
 3268 1a03 2424494E 		.ascii "$$INTERPRET"
 3268      54455250 
 3268      524554
 3269 1a0e 00BF     		.p2align 2 	
 3270              	INTER:
 3271 1a10 42F804ED 		_NEST
 3272 1a14 FFF70AFF 		BL	NAMEQ
 3273 1a18 FEF728FF 		BL	QDUP	// ?defined
 3274 1a1c FEF7D0FD 		BL	QBRAN
 3275 1a20 900F0018 		.word	INTE1+MAPOFFSET
 3276 1a24 FEF7F2FD 		BL	AT
 3277 1a28 FEF7A7FD 		_DOLIT
 3278 1a2c 40000000 		.word	COMPO
 3279 1a30 FEF754FE 		BL	ANDD	// ?compile only lexicon bits
 3280 1a34 FFF7D4FF 		BL	ABORQ
 3281 1a38 0D       		.byte	13
 3282 1a39 20636F6D 		.ascii " compile only"
 3282      70696C65 
 3282      206F6E6C 
 3282      79
 3283 1a46 00BF     		.p2align 2 	
 3284 1a48 FEF7A6FD 		BL	EXECU
 3285 1a4c 52F804FB 		_UNNEST			// execute defined word
 3286              	INTE1:
 3287 1a50 FFF78CFB 	  BL	NUMBQ
 3288 1a54 FEF7B4FD 		BL	QBRAN
 3289 1a58 A00F0018 		.word	INTE2+MAPOFFSET
 3290 1a5c 52F804FB 		_UNNEST
 3291              	INTE2:
 3292 1a60 FFF7AABF 	  B.W	ABORT	// error
 3293              	
 3294              	//    [	   ( -- )
 3295              	// 	Start the text interpreter.
 3296              	
 3297 1a64 420F0018 		.word	_INTER+MAPOFFSET
 3298 1a68 81       	_LBRAC:	.byte  IMEDD+1
 3299 1a69 5B       		.ascii "["
 3300 1a6a 00BF     		.p2align 2 	
 3301              	LBRAC:
 3302 1a6c 42F804ED 		_NEST
 3303 1a70 FEF783FD 		_DOLIT
 3304 1a74 500F0018 		.word	INTER+MAPOFFSET
 3305 1a78 FFF742F8 		BL	TEVAL
 3306 1a7c FEF7BCFD 		BL	STORE
 3307 1a80 52F804FB 		_UNNEST
 3308              	
 3309              	//    .OK	 ( -- )
 3310              	// 	Display "ok" only while interpreting.
 3311              	
 3312 1a84 A80F0018 		.word	_LBRAC+MAPOFFSET
 3313 1a88 03       	_DOTOK:	.byte  3
 3314 1a89 2E4F4B   		.ascii ".OK"
 3315              		.p2align 2 	
 3316              	DOTOK:
 3317 1a8c 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 63


 3318 1a90 FEF773FD 		_DOLIT
 3319 1a94 500F0018 		.word	INTER+MAPOFFSET
 3320 1a98 FFF732F8 		BL	TEVAL
 3321 1a9c FEF7B6FD 		BL	AT
 3322 1aa0 FEF740FF 		BL	EQUAL
 3323 1aa4 FEF78CFD 		BL	QBRAN
 3324 1aa8 F40F0018 		.word	DOTO1+MAPOFFSET
 3325 1aac FFF780FC 		BL	DOTQP
 3326 1ab0 03       		.byte	3
 3327 1ab1 206F6B   		.ascii " ok"
 3328              	DOTO1:
 3329 1ab4 FFF744FC 		BL	CR
 3330 1ab8 52F804FB 		_UNNEST
 3331              	
 3332              	//    ?STACK	( -- )
 3333              	// 	Abort if the data stack underflows.
 3334              	
 3335 1abc C80F0018 		.word	_DOTOK+MAPOFFSET
 3336 1ac0 06       	_QSTAC:	.byte  6
 3337 1ac1 3F535441 		.ascii "?STACK"
 3337      434B
 3338 1ac7 00       		.p2align 2 	
 3339              	QSTAC:
 3340 1ac8 42F804ED 		_NEST
 3341 1acc FFF77CF9 		BL	DEPTH
 3342 1ad0 FEF7FAFD 		BL	ZLESS	// check only for underflow
 3343 1ad4 FFF784FF 		BL	ABORQ
 3344 1ad8 0A       		.byte	10
 3345 1ad9 20756E64 		.ascii " underflow"
 3345      6572666C 
 3345      6F77
 3346 1ae3 00       		.p2align 2 	
 3347 1ae4 52F804FB 		_UNNEST
 3348              	
 3349              	//    EVAL	( -- )
 3350              	// 	Interpret the input stream.
 3351              	
 3352 1ae8 00100018 		.word	_QSTAC+MAPOFFSET
 3353 1aec 04       	_EVAL:	.byte  4
 3354 1aed 4556414C 		.ascii "EVAL"
 3355 1af1 0000BF   		.p2align 2 	
 3356              	EVAL:
 3357 1af4 42F804ED 		_NEST
 3358              	EVAL1:
 3359 1af8 FFF7DEFD 	    BL	TOKEN
 3360 1afc FEF7CAFD 		BL	DUPP
 3361 1b00 FEF794FD 		BL	CAT	// ?input stream empty
 3362 1b04 FEF75CFD 		BL	QBRAN
 3363 1b08 5C100018 		.word	EVAL2+MAPOFFSET
 3364 1b0c FEF7F8FF 		BL	TEVAL
 3365 1b10 FFF7A0F9 		BL	ATEXE
 3366 1b14 FFF7D8FF 		BL	QSTAC	// evaluate input, check stack
 3367 1b18 FFF7EEBF 		B.W	EVAL1
 3368              	EVAL2:
 3369 1b1c FEF7B2FD 		BL	DROP
 3370 1b20 FFF7B4FF 		BL	DOTOK
 3371 1b24 52F804FB 		_UNNEST	// prompt
ARM GAS  stm32eforth.s 			page 64


 3372              	
 3373              	//    PRESET	( -- )
 3374              	// 	Reset data stack pointer and the terminal input buffer.
 3375              	
 3376 1b28 2C100018 		.word	_EVAL+MAPOFFSET
 3377 1b2c 06       	_PRESE:	.byte  6
 3378 1b2d 50524553 		.ascii "PRESET"
 3378      4554
 3379 1b33 00       		.p2align 2 	
 3380              	PRESE:
 3381              	//	_NEST
 3382 1b34 03F59D41 		ADD	R1,R3,#SPP&0xffff		//  init SP
 3383 1b38 85EA0505 		EOR	R5,R5,R5			//  init TOS=0
 3384              	//	_UNNEST
 3385 1b3c 7047     		_NEXT
 3386              	
 3387              	//    QUIT	( -- )
 3388              	// 	Reset return stack pointer and start text interpreter.
 3389              	
 3390 1b3e 6C100018 		.word	_PRESE+MAPOFFSET
 3391 1b42 04       	_QUIT:	.byte  4
 3392 1b43 51554954 		.ascii "QUIT"
 3393 1b47 00       		.p2align 2 	
 3394              	QUIT:
 3395 1b48 42F804ED 		_NEST
 3396 1b4c 44F68072 		MOVW	R2,#RPP&0xffff  /* RESET RSTACK */
 3397 1b50 C2F20002 	 	MOVT	R2,#RPP>>16 
 3398              	QUIT1:
 3399 1b54 FFF78AFF 		BL	LBRAC			// start interpretation
 3400              	QUIT2:
 3401 1b58 FFF70EFF 		BL	QUERY			// get input
 3402 1b5c FFF7CAFF 		BL	EVAL
 3403 1b60 FEF73AFD 		BL	BRAN
 3404 1b64 98100018 		.word	QUIT2+MAPOFFSET	// continue till error
 3405              	
 3406              	/***************************
 3407              	//  Flash memory interface
 3408              	***************************/
 3409              	// UNLOCK ( T|F -- )
 3410              	// lock or unlock FLASH write 
 3411              	
 3412 1b68 82100018 		.word _QUIT+MAPOFFSET  
 3413 1b6c 06       	_UNLOCK: .byte 6
 3414 1b6d 554E4C4F 		.ascii "UNLOCK"
 3414      434B
 3415 1b73 00       		.p2align 2  
 3416              	UNLOCK:	//  unlock flash memory	
 3417 1b74 42F804ED 		_NEST 
 3418 1b78 FEF722FD 		BL QBRAN
 3419 1b7c DE100018 		.word LOCK+MAPOFFSET
 3420 1b80 DFF80404 		ldr	r0, flash_regs 
 3421 1b84 4FF03404 		mov r4,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 3422 1b88 C460     		str r4,[r0,#FLASH_SR]
 3423 1b8a 0469     		ldr r4,[r0,#FLASH_CR]
 3424 1b8c 14F0800F 		tst r4,#(1<<7)
 3425 1b90 03D0     		beq 1f 
 3426 1b92 FE4C     		ldr	r4, flash_regs+4 // key1
ARM GAS  stm32eforth.s 			page 65


 3427 1b94 4460     		str	r4, [r0, #FLASH_KEYR]
 3428 1b96 FE4C     		ldr	r4, flash_regs+8 // key2 
 3429 1b98 4460     		str	r4, [r0, #FLASH_KEYR]
 3430              		/* unlock option registers */
 3431              	/*
 3432              		ldr	r4, flash_regs+4 
 3433              		str	r4, [r0, #FLASH_OPTKEYR]
 3434              		ldr	r4, flash_regs+8
 3435              		str	r4, [r0, #FLASH_OPTKEYR]
 3436              	*/ 
 3437              	1:
 3438 1b9a 52F804FB 		_UNNEST
 3439              	 // lock flash memory
 3440              	LOCK: 
 3441 1b9e FA48     		ldr r0,flash_regs  
 3442              	//	ldr r4,[r0,#FLASH_CR]
 3443 1ba0 4FF08004 		mov r4,#(1<<7)
 3444 1ba4 0461     		str r4,[r0,#FLASH_CR]
 3445 1ba6 52F804FB 		_UNNEST  
 3446              	
 3447              	WAIT_BSY:
 3448 1baa F748     		ldr	r0,flash_regs
 3449              	WAIT1:
 3450 1bac C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 3451 1bae 14F00104 		ands	r4, #0x1	//  BSY
 3452 1bb2 FBD1     		bne	WAIT1
 3453 1bb4 7047     		_NEXT
 3454              	
 3455              	//    ERASE_PAGE	   ( adr -- )
 3456              	// 	  Erase one page of flash memory.
 3457              	//    stm32f103 page size is 1024 bytes 
 3458              	//    adr is any address inside page to erase 
 3459              	
 3460 1bb6 AC100018 		.word	_UNLOCK+MAPOFFSET
 3461 1bba 0A       	_EPAGE:	.byte  10
 3462 1bbb 45524153 		.ascii "ERASE_PAGE"
 3462      455F5041 
 3462      4745
 3463 1bc5 0000BF   		.p2align 2 	
 3464              	
 3465              	EPAGE: 	//  page --
 3466 1bc8 42F804ED 		_NEST
 3467 1bcc FFF7EDFF 		bl	WAIT_BSY
 3468 1bd0 FEF7D3FC 		_DOLIT 
 3469 1bd4 01000000 		.word 1 
 3470 1bd8 FFF7CCFF 		bl  UNLOCK 
 3471 1bdc EA48     		ldr r0,flash_regs 	 
 3472 1bde 4FF00204 		mov r4,#2 // set PER bit 
 3473 1be2 0461     		str r4,[r0,#FLASH_CR]
 3474 1be4 4561     		str r5,[r0,#FLASH_AR] // page to erase address 
 3475 1be6 0469     		ldr	r4,[r0, #FLASH_CR]	
 3476 1be8 44F04004 		orr	R4,#0x40	//  set STRT bit   
 3477 1bec 0461     		str	r4,[r0, #FLASH_CR]	//  start erasing
 3478 1bee FFF7DCFF 	 	bl	WAIT_BSY // wait until done
 3479 1bf2 FEF7C2FC 		_DOLIT 
 3480 1bf6 00000000 		.word 0 
 3481 1bfa FFF7BBFF 		bl	UNLOCK  // lock flash write 
ARM GAS  stm32eforth.s 			page 66


 3482 1bfe C568     		ldr r5,[r0,#FLASH_SR] // check for errors 
 3483 1c00 05F01405 		and r5,r5,#(5<<2)
 3484 1c04 FFF7ECFE 		bl ABORQ 
 3485 1c08 0D       		.byte 13
 3486 1c09 20657261 		.ascii " erase error!"
 3486      73652065 
 3486      72726F72 
 3486      21
 3487 1c16 00BF     		.p2align 2
 3488 1c18 52F804FB 		_UNNEST
 3489              	
 3490              	// store 16 bit word
 3491              	// expect flash unlocked  
 3492              	HWORD_WRITE: // ( hword address -- )
 3493 1c1c 42F804ED 		_NEST
 3494 1c20 0469     		ldr	r4, [r0, #FLASH_CR]	//  FLASH_CR
 3495              	//	bic r4,#(1<<9)|(1<<5)|(1<<4)|(1<<2)|(1<<1) //  clear OPTWRE|OPTER|OPTPG|MER|PER
 3496 1c22 4FF00104 		mov r4,#1 // set PG 
 3497 1c26 0461     		str r4,[r0,#FLASH_CR]
 3498 1c28 2E46     		mov r6,r5 
 3499 1c2a 51F8045B 		_POP 
 3500 1c2e 3580     		strh r5,[r6] 
 3501 1c30 FFF7BBFF 		bl WAIT_BSY 
 3502 1c34 C568     		ldr r5,[r0,#FLASH_SR]
 3503 1c36 05F01405 		and r5,r5,#(5<<2) 
 3504 1c3a FEF7C1FC 		bl QBRAN
 3505 1c3e 94110018 		.word 1f+MAPOFFSET 
 3506 1c42 FFF7CDFE 		bl ABORQ
 3507 1c46 0D       		.byte 13
 3508 1c47 20777269 		.ascii " write error!"
 3508      74652065 
 3508      72726F72 
 3508      21
 3509              		.p2align 2
 3510              	1:	 
 3511 1c54 52F804FB 		_UNNEST 
 3512              	
 3513              	
 3514              	//    I!	   ( data address -- )
 3515              	// 	   Write one word into flash memory
 3516              	//	   address must even 
 3517              	
 3518 1c58 FA100018 		.word	_EPAGE+MAPOFFSET
 3519 1c5c 02       	_ISTOR:	.byte  2
 3520 1c5d 4921     		.ascii "I!"
 3521 1c5f 00       		.p2align 2 	
 3522              	ISTOR:	//  data address --
 3523 1c60 42F804ED 		_NEST
 3524 1c64 FFF7A1FF 		bl	WAIT_BSY
 3525 1c68 FEF787FC 		_DOLIT 
 3526 1c6c 01000000 		.word 1 
 3527 1c70 FFF780FF 		bl  UNLOCK 
 3528 1c74 FEF718FE 		BL DDUP 
 3529 1c78 FEF7F0FC 		BL TOR 
 3530 1c7c FEF7EEFC 		BL TOR 
 3531 1c80 FFF7CCFF 		BL HWORD_WRITE
 3532 1c84 FEF7D8FC 		BL RFROM 
ARM GAS  stm32eforth.s 			page 67


 3533 1c88 4FEA3545 		ror r5,r5,#16
 3534 1c8c FEF7D4FC 		BL RFROM 
 3535 1c90 05F10205 		add r5,r5,#2 
 3536 1c94 FFF7C2FF 		BL HWORD_WRITE 
 3537 1c98 FEF76FFC 		_DOLIT 
 3538 1c9c 00000000 		.word 0
 3539 1ca0 FFF768FF 		bl UNLOCK 
 3540 1ca4 52F804FB 		_UNNEST
 3541              	
 3542              	// IMG_SIZE ( -- u )
 3543              	// return flash pages required to save 
 3544              	// user ram  
 3545 1ca8 9C110018 		.word _ISTOR+MAPOFFSET 
 3546 1cac 08       	_IMG_SIZE: .byte 8
 3547 1cad 494D475F 		.ascii "IMG_SIZE" 
 3547      53495A45 
 3548 1cb5 0000BF   		.p2align 2
 3549              	IMG_SIZE: 
 3550 1cb8 42F804ED 		_NEST
 3551 1cbc FEF75DFC 		_DOLIT 
 3552 1cc0 38000000 		.word VARS_END_OFS-IMG_SIGN_OFS 
 3553 1cc4 FEF76CFF 		BL USER_END 
 3554 1cc8 FEF75CFF 		BL USER_BEGIN 
 3555 1ccc FEF74EFD 		BL SUBB 
 3556 1cd0 FEF744FD 		BL PLUS 
 3557 1cd4 FEF751FC 		_DOLIT 
 3558 1cd8 00040000 		.word 1024 
 3559 1cdc FEF7F6FF 		BL SLMOD 
 3560 1ce0 FEF7E0FC 		BL SWAP 
 3561 1ce4 FEF76CFC 		BL QBRAN 
 3562 1ce8 30120018 		.word 1f+MAPOFFSET 
 3563 1cec FEF764FD 		BL ONEP
 3564              	1:
 3565 1cf0 52F804FB 		_UNNEST  
 3566              	
 3567              	// IMG? (  -- T|F )
 3568              	// check if an image has been saved in FLASH 
 3569 1cf4 EC110018 		.word _IMG_SIZE+MAPOFFSET 
 3570 1cf8 04       	_IMGQ: .byte 4
 3571 1cf9 494D473F 		.ascii "IMG?"
 3572 1cfd 0000BF   		.p2align 2
 3573              	IMGQ:
 3574 1d00 42F804ED 		_NEST 
 3575 1d04 FEF75AFF 		BL IMG_ADR 
 3576 1d08 FEF780FC 		BL AT 
 3577 1d0c FEF764FF 		BL IMG_SIGN  
 3578 1d10 FEF77CFC 		BL AT 
 3579 1d14 FEF7F6FC 		BL XORR  
 3580 1d18 FEF7FAFD 		BL ZEQUAL
 3581 1d1c 52F804FB 		_UNNEST
 3582              	
 3583              	// LOAD_IMG (  -- )
 3584              	// Load image from FLASH to RAM. 
 3585 1d20 38120018 		.word _IMGQ+MAPOFFSET
 3586 1d24 08       	_LOAD_IMG: .byte 8 
 3587 1d25 4C4F4144 		.ascii "LOAD_IMG" 
 3587      5F494D47 
ARM GAS  stm32eforth.s 			page 68


 3588 1d2d 0000BF   		.p2align 2 
 3589              	LOAD_IMG:
 3590 1d30 42F804ED 		_NEST 
 3591 1d34 FFF7E4FF 		BL IMGQ 
 3592 1d38 FEF742FC 		BL QBRAN 
 3593 1d3c C4120018 		.word 1f+MAPOFFSET
 3594              	/* copy system variables to RAM */
 3595 1d40 FEF73CFF 		BL IMG_ADR 
 3596 1d44 FEF7A6FC 		BL DUPP 
 3597 1d48 FEF788FC 		BL TOR   // save source address 
 3598 1d4c FEF744FF 		BL IMG_SIGN 
 3599 1d50 41F8045D 		_PUSH 
 3600 1d54 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 3601 1d58 FEF79CFC 		BL DUPP 
 3602 1d5c FEF77EFC 		BL TOR 
 3603 1d60 FFF79CF8 		BL MOVE // ( src dest count -- ) R: src count 
 3604              	/* copy user definitions */
 3605 1d64 FEF768FC 		BL RFROM 
 3606 1d68 FEF766FC 		BL RFROM  
 3607 1d6c FEF7F6FC 		BL PLUS // source address  
 3608 1d70 FEF708FF 		BL USER_BEGIN // destination address
 3609 1d74 FFF74AF8 		BL HERE  
 3610 1d78 FEF79EFC 		BL OVER 
 3611 1d7c FEF7F6FC 		BL SUBB  // byte count 
 3612 1d80 FFF78CF8 		BL MOVE
 3613 1d84 52F804FB 	1:	_UNNEST  
 3614              	
 3615              	// ERASE_MPG ( u1 u2 -- )
 3616              	// erase many pages 
 3617              	// u1 first page number 
 3618              	// u2 how many pages  
 3619 1d88 64120018 		.word _LOAD_IMG+MAPOFFSET
 3620 1d8c 09       	_ERASE_MPG: .byte 9 
 3621 1d8d 45524153 		.ascii "ERASE_MPG"	
 3621      455F4D50 
 3621      47
 3622 1d96 00BF     		.p2align 2 
 3623              	ERASE_MPG:
 3624 1d98 42F804ED 		_NEST 
 3625 1d9c FEF75EFC 		BL TOR 
 3626 1da0 00F052F8 		BL PG_TO_ADR 
 3627 1da4 FEF718FC 		BL BRAN 
 3628 1da8 00130018 		.word 2f+MAPOFFSET 
 3629              	1:
 3630 1dac FEF772FC 		BL DUPP 
 3631 1db0 FEF754FC 		BL TOR 
 3632 1db4 FFF708FF 		BL EPAGE 
 3633 1db8 FEF73EFC 		BL RFROM
 3634 1dbc 05F58065 		add r5,#PAGE_SIZE 
 3635              	2:
 3636 1dc0 FEF7EFFB 		BL DONXT
 3637 1dc4 EC120018 		.word 1b+MAPOFFSET 
 3638 1dc8 51F8045B 		_POP 
 3639 1dcc 52F804FB 		_UNNEST 
 3640              	
 3641              	// FLSH_WR ( src dest u -- dest+u )
 3642              	// write u words to flash memory 
ARM GAS  stm32eforth.s 			page 69


 3643 1dd0 CC120018 		.word _ERASE_MPG+MAPOFFSET
 3644 1dd4 07       	_FLSH_WR: .byte 7 
 3645 1dd5 464C5348 		.ascii "FLSH_WR"
 3645      5F5752
 3646              		.p2align  
 3647              	FLSH_WR: 
 3648 1ddc 42F804ED 		_NEST 
 3649 1de0 FEF73CFC 		BL TOR
 3650 1de4 FEF7F8FB 		BL BRAN 
 3651 1de8 4C130018 		.word 3f+MAPOFFSET  
 3652              	/* write system variables to FLASH */
 3653 1dec FEF736FC 	2:  BL TOR  // destination address 
 3654 1df0 FEF750FC 		BL DUPP 
 3655 1df4 FEF70AFC 		BL AT   // get data 
 3656 1df8 FEF728FC 		BL RAT  // get destination address 
 3657 1dfc FFF730FF 		BL ISTOR
 3658 1e00 FEF7FAFC 		BL CELLP  // increment source address 
 3659 1e04 FEF718FC 		BL RFROM 
 3660 1e08 FEF7F6FC 		BL CELLP  // increment dest address 
 3661 1e0c FEF7C9FB 	3:	BL DONXT 
 3662 1e10 2C130018 		.word 2b+MAPOFFSET
 3663 1e14 FEF722FC 		BL TOR 
 3664 1e18 FEF734FC 		BL DROP 
 3665 1e1c FEF70CFC 		BL RFROM 
 3666 1e20 52F804FB 		_UNNEST 
 3667              	
 3668              	// ADR>PG ( a -- n )
 3669              	// convert address to page number, {0..127} 
 3670 1e24 14130018 		.word _FLSH_WR+MAPOFFSET
 3671 1e28 06       	_ADR_TO_PG: .byte 6 
 3672 1e29 4144523E 		.ascii "ADR>PG" 
 3672      5047
 3673 1e2f 00       		.p2align 2 
 3674              	ADR_TO_PG: 
 3675 1e30 4FEA9525 		lsr r5,#10 
 3676 1e34 05F07F05 		and r5,#127 
 3677 1e38 7047     		_NEXT  
 3678              	
 3679              	// PG>ADR ( n -- a )
 3680              	// convert page# to address 
 3681 1e3a 68130018 		.word _ADR_TO_PG+MAPOFFSET
 3682 1e3e 06       	_PG_TO_ADR: .byte 6 
 3683 1e3f 50473E41 		.ascii "PG>ADR" 
 3683      4452
 3684 1e45 0000BF   		.p2align 2 
 3685              	PG_TO_ADR:
 3686 1e48 C0F20205 		movt r5,#2
 3687 1e4c 4FEA8525 		lsl r5,#10 
 3688 1e50 7047     		_NEXT 
 3689              	
 3690              	// ERASE_IMG (  -- )
 3691              	// erase image in from FLASH  
 3692 1e52 7E130018 		.word _PG_TO_ADR+MAPOFFSET 
 3693 1e56 09       	_ERASE_IMG: .byte 9
 3694 1e57 45524153 		.ascii "ERASE_IMG"
 3694      455F494D 
 3694      47
ARM GAS  stm32eforth.s 			page 70


 3695              		.p2align 2
 3696              	ERASE_IMG:
 3697 1e60 42F804ED 		_NEST
 3698 1e64 FEF7AAFE 		BL IMG_ADR 
 3699 1e68 FFF726FF 		BL IMG_SIZE 
 3700 1e6c FEF7F6FB 		BL TOR 
 3701 1e70 FEF7B2FB 		BL BRAN 
 3702 1e74 C4130018 		.word  2f+MAPOFFSET 
 3703 1e78 FEF70CFC 	1:	BL DUPP 
 3704 1e7c FFF7A4FE 		BL EPAGE
 3705 1e80 05F58065 		ADD R5,#PAGE_SIZE 
 3706 1e84 FEF78DFB 	2:	BL DONXT 
 3707 1e88 B8130018 		.word 1b+MAPOFFSET 
 3708 1e8c FEF7FAFB 		BL DROP 
 3709 1e90 52F804FB 		_UNNEST 
 3710              	
 3711              	// SAVE_IMG ( -- )
 3712              	// save in FLASH memory system variables and user defintitions.
 3713 1e94 96130018 		.word _ERASE_IMG+MAPOFFSET	
 3714 1e98 08       	_SAVE_IMG: .byte 8 
 3715 1e99 53415645 		.ascii "SAVE_IMG"
 3715      5F494D47 
 3716 1ea1 0000BF   		.p2align 2
 3717              	SAVE_IMG:
 3718 1ea4 42F804ED 		_NEST 
 3719 1ea8 FEF7B0FF 		BL HERE 
 3720 1eac FEF76AFE 		BL USER_BEGIN
 3721 1eb0 FEF738FD 		BL EQUAL 
 3722 1eb4 FEF784FB 		BL QBRAN
 3723 1eb8 00140018 		.word 1f+MAPOFFSET 
 3724 1ebc 52F804FB 		_UNNEST  // nothing to save 
 3725 1ec0 FFF71EFF 	1:	BL IMGQ 
 3726 1ec4 FEF77CFB 		BL QBRAN 
 3727 1ec8 10140018 		.word 2f+MAPOFFSET
 3728              	/* delete saved image */
 3729 1ecc FFF7C8FF 		BL ERASE_IMG 
 3730              	/* save system variables */
 3731              	2:	
 3732 1ed0 FEF782FE 		BL IMG_SIGN // src address 
 3733 1ed4 FEF772FE 		BL IMG_ADR  //  ( src dest --  
 3734 1ed8 41F8045D 		_PUSH 
 3735 1edc 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 3736 1ee0 FEF7ACFC 		BL CELLSL  // word count 
 3737 1ee4 FFF77AFF 		BL FLSH_WR  // ( src dest count -- dest+u )
 3738              	/* write user definitions */
 3739 1ee8 FEF74CFE 		BL USER_BEGIN
 3740 1eec FEF7DAFB 		BL SWAP  // ( src dest+ -- )
 3741 1ef0 FEF78CFF 		BL HERE   
 3742 1ef4 FEF746FE 		BL USER_BEGIN 
 3743 1ef8 FEF738FC 		BL SUBB 
 3744 1efc FEF79EFC 		BL CELLSL  // src dest+ count -- 
 3745 1f00 FFF76CFF 		BL FLSH_WR  
 3746 1f04 52F804FB 		_UNNEST 
 3747              	
 3748              	// TURNKEY ( -- "WORD") 
 3749              	// set autorun program in 'BOOT variable 
 3750              	// and save image in slot 0.
ARM GAS  stm32eforth.s 			page 71


 3751 1f08 D8130018 		.word _SAVE_IMG+MAPOFFSET
 3752 1f0c 07       	_TURNKEY: .byte 7
 3753 1f0d 5455524E 		.ascii "TURNKEY"
 3753      4B4559
 3754              		.p2align 2 
 3755              	TURNKEY:
 3756 1f14 42F804ED 		_NEST 
 3757 1f18 00F040F8 		BL TICK 
 3758 1f1c FEF7B8FD 		BL TBOOT 
 3759 1f20 FEF76AFB 		BL STORE 
 3760 1f24 FFF7BEFF 		BL SAVE_IMG 
 3761 1f28 52F804FB 		_UNNEST
 3762              	
 3763 1f2c 4C140018 		.word _TURNKEY+MAPOFFSET
 3764 1f30 06       	_FORGET: .byte 6 
 3765 1f31 464F5247 		.ascii "FORGET"
 3765      4554
 3766 1f37 00       		.p2align 2
 3767              	FORGET:
 3768 1f38 42F804ED 		_NEST 
 3769 1f3c FFF7BCFB 		BL TOKEN 
 3770 1f40 FEF7A8FB 		BL DUPP 
 3771 1f44 FEF73CFB 		BL QBRAN 
 3772 1f48 FEF717FB 		_DOLIT 
 3773 1f4c C4140018 		.word 9f+MAPOFFSET 
 3774 1f50 FFF76CFC 		BL NAMEQ // ( a -- ca na | a 0 )
 3775 1f54 FEF78AFC 		BL QDUP 
 3776 1f58 FEF732FB 		BL QBRAN 
 3777 1f5c C0140018 		.word 8f+MAPOFFSET
 3778 1f60 FEF752FC 		BL CELLM // ( ca la )
 3779 1f64 FEF796FB 		BL DUPP 
 3780 1f68 FEF7EAFD 		BL CPP   
 3781 1f6c FEF744FB 		BL STORE
 3782 1f70 FEF74CFB 		BL AT 
 3783 1f74 FEF7F8FD 		BL LAST 
 3784 1f78 FEF73EFB 		BL STORE
 3785 1f7c 00F024FA 		BL OVERT 
 3786 1f80 FEF780FB 	8:  BL DROP 
 3787 1f84 52F804FB 	9:	_UNNEST 
 3788              	
 3789              	
 3790              	flash_regs:
 3791 1f88 00200240 		.word FLASH_BASE_ADR // 0 
 3792 1f8c 23016745 		.word FLASH_KEY1   // 4 
 3793 1f90 AB89EFCD 		.word FLASH_KEY2   // 8
 3794              	
 3795              	// **************************************************************************
 3796              	//  The compiler
 3797              	
 3798              	//    '	   ( -- ca )
 3799              	// 	Search context vocabularies for the next word in input stream.
 3800              	
 3801 1f94 70140018 		.word	_FORGET+MAPOFFSET
 3802 1f98 01       	_TICK:	.byte  1
 3803 1f99 27       		.ascii "'"
 3804 1f9a 00BF     		.p2align 2 	
 3805              	TICK:
ARM GAS  stm32eforth.s 			page 72


 3806 1f9c 42F804ED 		_NEST
 3807 1fa0 FFF78AFB 		BL	TOKEN
 3808 1fa4 FFF742FC 		BL	NAMEQ	// ?defined
 3809 1fa8 FEF70AFB 		BL	QBRAN
 3810 1fac F4140018 		.word	TICK1+MAPOFFSET
 3811 1fb0 52F804FB 		_UNNEST	// yes, push code address
 3812 1fb4 FFF700BD 	TICK1:	B.W	ABORT	// no, error
 3813              	
 3814              	//    ALLOT	( n -- )
 3815              	// 	Allocate n bytes to the ram area.
 3816              	
 3817 1fb8 D8140018 		.word	_TICK+MAPOFFSET
 3818 1fbc 05       	_ALLOT:	.byte  5
 3819 1fbd 414C4C4F 		.ascii "ALLOT"
 3819      54
 3820 1fc2 00BF     		.p2align 2 	
 3821              	ALLOT:
 3822 1fc4 42F804ED 		_NEST
 3823 1fc8 FEF7BAFD 		BL	CPP
 3824 1fcc FEF7EEFC 		BL	PSTOR
 3825 1fd0 52F804FB 		_UNNEST			// adjust code pointer
 3826              	
 3827              	//    ,	   ( w -- )
 3828              	// 	Compile an integer into the code dictionary.
 3829              	
 3830 1fd4 FC140018 		.word	_ALLOT+MAPOFFSET
 3831 1fd8 012C     	_COMMA:	.byte  1,','
 3832 1fda 00BF     		.p2align 2 	
 3833              	COMMA:
 3834 1fdc 42F804ED 		_NEST
 3835 1fe0 FEF714FF 		BL	HERE
 3836 1fe4 FEF756FB 		BL	DUPP
 3837 1fe8 FEF706FC 		BL	CELLP	// cell boundary
 3838 1fec FEF7A8FD 		BL	CPP
 3839 1ff0 FEF702FB 		BL	STORE
 3840 1ff4 FEF700FB 		BL	STORE
 3841 1ff8 52F804FB 		_UNNEST	// adjust code pointer, compile
 3842              		.p2align 2 
 3843              	//    [COMPILE]   ( -- //  string> )
 3844              	// 	Compile the next immediate word into code dictionary.
 3845              	
 3846 1ffc 18150018 		.word	_COMMA+MAPOFFSET
 3847 2000 89       	_BCOMP:	.byte  IMEDD+9
 3848 2001 5B434F4D 		.ascii "[COMPILE]"
 3848      50494C45 
 3848      5D
 3849 200a 00BF     		.p2align 2 	
 3850              	BCOMP:
 3851 200c 42F804ED 		_NEST
 3852 2010 FFF7C4FF 		BL	TICK
 3853 2014 FFF7E2FF 		BL	COMMA
 3854 2018 52F804FB 		_UNNEST
 3855              	
 3856              	//    COMPILE	( -- )
 3857              	// 	Compile the next address in colon list to code dictionary.
 3858              	
 3859 201c 40150018 		.word	_BCOMP+MAPOFFSET
ARM GAS  stm32eforth.s 			page 73


 3860 2020 47       	_COMPI:	.byte  COMPO+7
 3861 2021 434F4D50 		.ascii "COMPILE"
 3861      494C45
 3862              		.p2align 2 	
 3863              	COMPI:
 3864 2028 42F804ED 		_NEST
 3865 202c FEF704FB 		BL	RFROM
 3866 2030 25F00105 		BIC	R5,R5,#1
 3867 2034 FEF72EFB 		BL	DUPP
 3868 2038 FEF7E8FA 		BL	AT
 3869 203c 00F013FA 		BL	CALLC			// compile BL instruction
 3870 2040 FEF7DAFB 		BL	CELLP
 3871 2044 45F00105 		ORR	R5,R5,#1
 3872 2048 FEF708FB 		BL	TOR
 3873 204c 52F804FB 		_UNNEST			// adjust return address
 3874              	
 3875              	//    LITERAL	( w -- )
 3876              	// 	Compile tos to code dictionary as an integer literal.
 3877              	
 3878 2050 60150018 		.word	_COMPI+MAPOFFSET
 3879 2054 87       	_LITER:	.byte  IMEDD+7
 3880 2055 4C495445 		.ascii "LITERAL"
 3880      52414C
 3881              		.p2align 2 	
 3882              	LITER:
 3883 205c 42F804ED 		_NEST
 3884 2060 FFF7E2FF 		BL	COMPI
 3885 2064 BAFAFF17 		.word	DOLIT+MAPOFFSET
 3886 2068 FFF7B8FF 		BL	COMMA
 3887 206c 52F804FB 		_UNNEST
 3888              	
 3889              	//    $,"	( -- )
 3890              	// 	Compile a literal string up to next " .
 3891              	
 3892              	// 	.word	_LITER+MAPOFFSET
 3893              	// _STRCQ	.byte  3
 3894              	// 	.ascii "$$,"""
 3895              	// 	.p2align 2 	
 3896              	STRCQ:
 3897 2070 42F804ED 		_NEST
 3898 2074 FEF781FA 		_DOLIT
 3899 2078 FCFFFFFF 		.word	-4
 3900 207c FEF760FD 		BL	CPP
 3901 2080 FEF794FC 		BL	PSTOR
 3902 2084 FEF779FA 		_DOLIT
 3903 2088 22000000 		.word	'\"'
 3904 208c FFF702FB 		BL	WORDD			// move word to code dictionary
 3905 2090 FEF7B0FC 		BL	COUNT
 3906 2094 FEF762FB 		BL	PLUS
 3907 2098 FEF764FE 		BL	ALGND			// calculate aligned end of string
 3908 209c FEF750FD 		BL	CPP
 3909 20a0 FEF7AAFA 		BL	STORE
 3910 20a4 52F804FB 		_UNNEST 			// adjust the code pointer
 3911              	
 3912              	// **************************************************************************
 3913              	//  Structures
 3914              	
ARM GAS  stm32eforth.s 			page 74


 3915              	//    FOR	 ( -- a )
 3916              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3917              	
 3918 20a8 94150018 		.word	_LITER+MAPOFFSET
 3919 20ac C3       	_FOR:	.byte  COMPO+IMEDD+3
 3920 20ad 464F52   		.ascii "FOR"
 3921              		.p2align 2 	
 3922              	FOR:
 3923 20b0 42F804ED 		_NEST
 3924 20b4 FFF7B8FF 		BL	COMPI
 3925 20b8 9CFBFF17 		.word	TOR+MAPOFFSET
 3926 20bc FEF7A6FE 		BL	HERE
 3927 20c0 52F804FB 		_UNNEST
 3928              	
 3929              	//    BEGIN	( -- a )
 3930              	// 	Start an infinite or indefinite loop structure.
 3931              	
 3932 20c4 EC150018 		.word	_FOR+MAPOFFSET
 3933 20c8 C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 3934 20c9 42454749 		.ascii "BEGIN"
 3934      4E
 3935 20ce 00BF     		.p2align 2 	
 3936              	BEGIN:
 3937 20d0 42F804ED 		_NEST
 3938 20d4 FEF79AFE 		BL	HERE
 3939 20d8 52F804FB 		_UNNEST
 3940              		.p2align 2 
 3941              	//    NEXT	( a -- )
 3942              	// 	Terminate a FOR-NEXT loop structure.
 3943              	
 3944 20dc 08160018 		.word	_BEGIN+MAPOFFSET
 3945 20e0 C4       	_NEXT:	.byte  COMPO+IMEDD+4
 3946 20e1 4E455854 		.ascii "NEXT"
 3947 20e5 0000BF   		.p2align 2 	
 3948              	NEXT:
 3949 20e8 42F804ED 		_NEST
 3950 20ec FFF79CFF 		BL	COMPI
 3951 20f0 E2FAFF17 		.word	DONXT+MAPOFFSET
 3952 20f4 FFF772FF 		BL	COMMA
 3953 20f8 52F804FB 		_UNNEST
 3954              	
 3955              	//    UNTIL	( a -- )
 3956              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3957              	
 3958 20fc 20160018 		.word	_NEXT+MAPOFFSET
 3959 2100 C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3960 2101 554E5449 		.ascii "UNTIL"
 3960      4C
 3961 2106 00BF     		.p2align 2 	
 3962              	UNTIL:
 3963 2108 42F804ED 		_NEST
 3964 210c FFF78CFF 		BL	COMPI
 3965 2110 00FBFF17 		.word	QBRAN+MAPOFFSET
 3966 2114 FFF762FF 		BL	COMMA
 3967 2118 52F804FB 		_UNNEST
 3968              	
 3969              	//    AGAIN	( a -- )
ARM GAS  stm32eforth.s 			page 75


 3970              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3971              	
 3972 211c 40160018 		.word	_UNTIL+MAPOFFSET
 3973 2120 C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3974 2121 41474149 		.ascii "AGAIN"
 3974      4E
 3975 2126 00BF     		.p2align 2 	
 3976              	AGAIN:
 3977 2128 42F804ED 		_NEST
 3978 212c FFF77CFF 		BL	COMPI
 3979 2130 18FBFF17 		.word	BRAN+MAPOFFSET
 3980 2134 FFF752FF 		BL	COMMA
 3981 2138 52F804FB 		_UNNEST
 3982              	
 3983              	//    IF	  ( -- A )
 3984              	// 	Begin a conditional branch structure.
 3985              	
 3986 213c 60160018 		.word	_AGAIN+MAPOFFSET
 3987 2140 C2       	_IFF:	.byte  COMPO+IMEDD+2
 3988 2141 4946     		.ascii "IF"
 3989 2143 00       		.p2align 2 	
 3990              	IFF:
 3991 2144 42F804ED 		_NEST
 3992 2148 FFF76EFF 		BL	COMPI
 3993 214c 00FBFF17 		.word	QBRAN+MAPOFFSET
 3994 2150 FEF75CFE 		BL	HERE
 3995 2154 FEF711FA 		_DOLIT
 3996 2158 04000000 		.word	4
 3997 215c FEF7F0FC 		BL	CPP
 3998 2160 FEF724FC 		BL	PSTOR
 3999 2164 52F804FB 		_UNNEST
 4000              	
 4001              	//    AHEAD	( -- A )
 4002              	// 	Compile a forward branch instruction.
 4003              	
 4004 2168 80160018 		.word	_IFF+MAPOFFSET
 4005 216c C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 4006 216d 41484541 		.ascii "AHEAD"
 4006      44
 4007 2172 00BF     		.p2align 2 	
 4008              	AHEAD:
 4009 2174 42F804ED 		_NEST
 4010 2178 FFF756FF 		BL	COMPI
 4011 217c 18FBFF17 		.word	BRAN+MAPOFFSET
 4012 2180 FEF744FE 		BL	HERE
 4013 2184 FEF7F9F9 		_DOLIT
 4014 2188 04000000 		.word	4
 4015 218c FEF7D8FC 		BL	CPP
 4016 2190 FEF70CFC 		BL	PSTOR
 4017 2194 52F804FB 		_UNNEST
 4018              	
 4019              	//    REPEAT	( A a -- )
 4020              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 4021              	
 4022 2198 AC160018 		.word	_AHEAD+MAPOFFSET
 4023 219c C6       	_REPEA:	.byte  COMPO+IMEDD+6
 4024 219d 52455045 		.ascii "REPEAT"
ARM GAS  stm32eforth.s 			page 76


 4024      4154
 4025 21a3 00       		.p2align 2 	
 4026              	REPEA:
 4027 21a4 42F804ED 		_NEST
 4028 21a8 FFF7BEFF 		BL	AGAIN
 4029 21ac FEF72EFE 		BL	HERE
 4030 21b0 FEF778FA 		BL	SWAP
 4031 21b4 FEF720FA 		BL	STORE
 4032 21b8 52F804FB 		_UNNEST
 4033              	
 4034              	//    THEN	( A -- )
 4035              	// 	Terminate a conditional branch structure.
 4036              	
 4037 21bc DC160018 		.word	_REPEA+MAPOFFSET
 4038 21c0 C4       	_THENN:	.byte  COMPO+IMEDD+4
 4039 21c1 5448454E 		.ascii "THEN"
 4040 21c5 0000BF   		.p2align 2 	
 4041              	THENN:
 4042 21c8 42F804ED 		_NEST
 4043 21cc FEF71EFE 		BL	HERE
 4044 21d0 FEF768FA 		BL	SWAP
 4045 21d4 FEF710FA 		BL	STORE
 4046 21d8 52F804FB 		_UNNEST
 4047              	
 4048              	//    AFT	 ( a -- a A )
 4049              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 4050              	
 4051 21dc 00170018 		.word	_THENN+MAPOFFSET
 4052 21e0 C3       	_AFT:	.byte  COMPO+IMEDD+3
 4053 21e1 414654   		.ascii "AFT"
 4054              		.p2align 2 	
 4055              	AFT:
 4056 21e4 42F804ED 		_NEST
 4057 21e8 FEF74CFA 		BL	DROP
 4058 21ec FFF7C2FF 		BL	AHEAD
 4059 21f0 FFF76EFF 		BL	BEGIN
 4060 21f4 FEF756FA 		BL	SWAP
 4061 21f8 52F804FB 		_UNNEST
 4062              	
 4063              	//    ELSE	( A -- A )
 4064              	// 	Start the false clause in an IF-ELSE-THEN structure.
 4065              	
 4066 21fc 20170018 		.word	_AFT+MAPOFFSET
 4067 2200 C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 4068 2201 454C5345 		.ascii "ELSE"
 4069 2205 0000BF   		.p2align 2 	
 4070              	ELSEE:
 4071 2208 42F804ED 		_NEST
 4072 220c FFF7B2FF 		BL	AHEAD
 4073 2210 FEF748FA 		BL	SWAP
 4074 2214 FFF7D8FF 		BL	THENN
 4075 2218 52F804FB 		_UNNEST
 4076              	
 4077              	//    WHILE	( a -- A a )
 4078              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 4079              	
 4080 221c 40170018 		.word	_ELSEE+MAPOFFSET
ARM GAS  stm32eforth.s 			page 77


 4081 2220 C5       	_WHILE:	.byte  COMPO+IMEDD+5
 4082 2221 5748494C 		.ascii "WHILE"
 4082      45
 4083 2226 00BF     		.p2align 2 	
 4084              	WHILE:
 4085 2228 42F804ED 		_NEST
 4086 222c FFF78AFF 		BL	IFF
 4087 2230 FEF738FA 		BL	SWAP
 4088 2234 52F804FB 		_UNNEST
 4089              	
 4090              	//    ABORT"	( -- //  string> )
 4091              	// 	Conditional abort with an error message.
 4092              	
 4093 2238 60170018 		.word	_WHILE+MAPOFFSET
 4094 223c 86       	_ABRTQ:	.byte  IMEDD+6
 4095 223d 41424F52 		.ascii "ABORT\""
 4095      5422
 4096 2243 00       		.p2align 2 	
 4097              	ABRTQ:
 4098 2244 42F804ED 		_NEST
 4099 2248 FFF7EEFE 		BL	COMPI
 4100 224c 200F0018 		.word	ABORQ+MAPOFFSET
 4101 2250 FFF70EFF 		BL	STRCQ
 4102 2254 52F804FB 		_UNNEST
 4103              	
 4104              	//    $"	( -- //  string> )
 4105              	// 	Compile an inlineDCB literal.
 4106              	
 4107 2258 7C170018 		.word	_ABRTQ+MAPOFFSET
 4108 225c 82       	_STRQ:	.byte  IMEDD+2
 4109 225d 2422     		.byte	'$','"'
 4110 225f 00       		.p2align 2 	
 4111              	STRQ:
 4112 2260 42F804ED 		_NEST
 4113 2264 FFF7E0FE 		BL	COMPI
 4114 2268 D4080018 		.word	STRQP+MAPOFFSET
 4115 226c FFF700FF 		BL	STRCQ
 4116 2270 52F804FB 		_UNNEST
 4117              	
 4118              	//    ."	( -- //  string> )
 4119              	// 	Compile an inline word  literal to be typed out at run time.
 4120              	
 4121 2274 9C170018 		.word	_STRQ+MAPOFFSET
 4122 2278 C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 4123 2279 2E22     		.ascii	".\""
 4124 227b 00       		.p2align 2 	
 4125              	DOTQ:
 4126 227c 42F804ED 		_NEST
 4127 2280 FFF7D2FE 		BL	COMPI
 4128 2284 F0080018 		.word	DOTQP+MAPOFFSET
 4129 2288 FFF7F2FE 		BL	STRCQ
 4130 228c 52F804FB 		_UNNEST
 4131              	
 4132              	// **************************************************************************
 4133              	//  Name compiler
 4134              	
 4135              	//    ?UNIQUE	( a -- a )
ARM GAS  stm32eforth.s 			page 78


 4136              	// 	Display a warning message if the word already exists.
 4137              	
 4138 2290 B8170018 		.word	_DOTQ+MAPOFFSET
 4139 2294 07       	_UNIQU:	.byte  7
 4140 2295 3F554E49 		.ascii "?UNIQUE"
 4140      515545
 4141              		.p2align 2 	
 4142              	UNIQU:
 4143 229c 42F804ED 		_NEST
 4144 22a0 FEF7F8F9 		BL	DUPP
 4145 22a4 FFF7C2FA 		BL	NAMEQ			// ?name exists
 4146 22a8 FEF78AF9 		BL	QBRAN
 4147 22ac 08180018 		.word	UNIQ1+MAPOFFSET	// redefinitions are OK
 4148 22b0 FFF77EF8 		BL	DOTQP
 4149 22b4 07       		.byte	7
 4150 22b5 20726544 		.ascii " reDef "		// but warn the user
 4150      656620
 4151              		.p2align 2 	
 4152 22bc FEF7FCF9 		BL	OVER
 4153 22c0 FEF798FB 		BL	COUNT
 4154 22c4 FFF724F8 		BL	TYPEE			// just in case its not planned
 4155              	UNIQ1:
 4156 22c8 FEF7DCF9 		BL	DROP
 4157 22cc 52F804FB 		_UNNEST
 4158              	
 4159              	//    $,n	 ( na -- )
 4160              	// 	Build a new dictionary name using the data at na.
 4161              	
 4162              	// 	.word	_UNIQU+MAPOFFSET
 4163              	// _SNAME	.byte  3
 4164              	// 	.ascii "$,n"
 4165              	// 	.p2align 2 	
 4166              	SNAME:
 4167 22d0 42F804ED 		_NEST
 4168 22d4 FEF7DEF9 		BL	DUPP			//  na na
 4169 22d8 FEF7A8F9 		BL	CAT			//  ?null input
 4170 22dc FEF770F9 		BL	QBRAN
 4171 22e0 58180018 		.word	SNAM1+MAPOFFSET
 4172 22e4 FFF7DAFF 		BL	UNIQU			//  na
 4173 22e8 FEF73EFC 		BL	LAST			//  na last
 4174 22ec FEF78EF9 		BL	AT			//  na la
 4175 22f0 FFF774FE 		BL	COMMA			//  na
 4176 22f4 FEF7CEF9 		BL	DUPP			//  na na
 4177 22f8 FEF736FC 		BL	LAST			//  na na last
 4178 22fc FEF77CF9 		BL	STORE			//  na , save na for vocabulary link
 4179 2300 FEF778FB 		BL	COUNT			//  na+1 count
 4180 2304 FEF72AFA 		BL	PLUS			//  na+1+count
 4181 2308 FEF72CFD 		BL	ALGND			//  word boundary
 4182 230c FEF718FC 		BL	CPP
 4183 2310 FEF772F9 		BL	STORE			//  top of dictionary now
 4184 2314 52F804FB 		_UNNEST
 4185              	SNAM1:
 4186 2318 FFF73CF8 		BL	STRQP
 4187 231c 07       		.byte	7
 4188 231d 206E616D 		.ascii " name? "
 4188      653F20
 4189 2324 FFF748BB 		B.W	ABORT
ARM GAS  stm32eforth.s 			page 79


 4190              	
 4191              	//    $COMPILE	( a -- )
 4192              	// 	Compile next word to code dictionary as a token or literal.
 4193              	
 4194 2328 D4170018 		.word	_UNIQU+MAPOFFSET
 4195 232c 07       	_SCOMP:	.byte  7
 4196 232d 24434F4D 		.ascii "$COMPILE"
 4196      50494C45 
 4197 2335 0000BF   		.p2align 2 	
 4198              	SCOMP:
 4199 2338 42F804ED 		_NEST
 4200 233c FFF776FA 		BL	NAMEQ
 4201 2340 FEF794FA 		BL	QDUP	// defined?
 4202 2344 FEF73CF9 		BL	QBRAN
 4203 2348 B4180018 		.word	SCOM2+MAPOFFSET
 4204 234c FEF75EF9 		BL	AT
 4205 2350 FEF713F9 		_DOLIT
 4206 2354 80000000 		.word	IMEDD
 4207 2358 FEF7C0F9 		BL	ANDD	// immediate?
 4208 235c FEF730F9 		BL	QBRAN
 4209 2360 AC180018 		.word	SCOM1+MAPOFFSET
 4210 2364 FEF718F9 		BL	EXECU
 4211 2368 52F804FB 		_UNNEST			// it's immediate, execute
 4212              	SCOM1:
 4213 236c 00F07BF8 		BL	CALLC			// it's not immediate, compile
 4214 2370 52F804FB 		_UNNEST	
 4215              	SCOM2:
 4216 2374 FEF7FAFE 		BL	NUMBQ
 4217 2378 FEF722F9 		BL	QBRAN
 4218 237c C8180018 		.word	SCOM3+MAPOFFSET
 4219 2380 FFF76CFE 		BL	LITER
 4220 2384 52F804FB 		_UNNEST			// compile number as integer
 4221              	SCOM3: // compilation abort 
 4222 2388 00F002F8 		BL COLON_ABORT 
 4223 238c FFF714BB 		B.W	ABORT			// error
 4224              	
 4225              	// before aborting a compilation 
 4226              	// reset HERE and LAST
 4227              	// to previous values.  
 4228              	COLON_ABORT:
 4229 2390 42F804ED 		_NEST 
 4230 2394 FEF7E8FB 		BL LAST 
 4231 2398 FEF738F9 		BL AT 
 4232 239c FEF734FA 		BL CELLM 
 4233 23a0 FEF778F9 		BL DUPP 
 4234 23a4 FEF7CCFB 		BL CPP  
 4235 23a8 FEF726F9 		BL STORE 
 4236 23ac FEF72EF9 		BL AT 
 4237 23b0 FEF7DAFB 		BL LAST 
 4238 23b4 FEF720F9 		BL STORE 
 4239 23b8 52F804FB 		_UNNEST 
 4240              	
 4241              	//    OVERT	( -- )
 4242              	// 	Link a new word into the current vocabulary.
 4243              	
 4244 23bc 6C180018 		.word	_SCOMP+MAPOFFSET
 4245 23c0 05       	_OVERT:	.byte  5
ARM GAS  stm32eforth.s 			page 80


 4246 23c1 4F564552 		.ascii "OVERT"
 4246      54
 4247 23c6 00BF     		.p2align 2 	
 4248              	OVERT:
 4249 23c8 42F804ED 		_NEST
 4250 23cc FEF7CCFB 		BL	LAST
 4251 23d0 FEF71CF9 		BL	AT
 4252 23d4 FEF7AAFB 		BL	CNTXT
 4253 23d8 FEF70EF9 		BL	STORE
 4254 23dc 52F804FB 		_UNNEST
 4255              	
 4256              	//    ; 	   ( -- )
 4257              	// 	Terminate a colon definition.
 4258              	
 4259 23e0 00190018 		.word	_OVERT+MAPOFFSET
 4260 23e4 C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 4261 23e5 3B       		.ascii ";"
 4262 23e6 00BF     		.p2align 2 	
 4263              	SEMIS:
 4264 23e8 42F804ED 		_NEST
 4265 23ec FEF7C5F8 		_DOLIT
 4266 23f0 52F804FB 		_UNNEST
 4267 23f4 FFF7F2FD 		BL	COMMA
 4268 23f8 FFF738FB 		BL	LBRAC
 4269 23fc FFF7E4FF 		BL	OVERT
 4270 2400 52F804FB 		_UNNEST
 4271              	
 4272              	//    ]	   ( -- )
 4273              	// 	Start compiling the words in the input stream.
 4274              	
 4275 2404 24190018 		.word	_SEMIS+MAPOFFSET
 4276 2408 01       	_RBRAC:	.byte  1
 4277 2409 5D       		.ascii "]"
 4278 240a 00BF     		.p2align 2 	
 4279              	RBRAC:
 4280 240c 42F804ED 		_NEST
 4281 2410 FEF7B3F8 		_DOLIT
 4282 2414 78180018 		.word	SCOMP+MAPOFFSET
 4283 2418 FEF772FB 		BL	TEVAL
 4284 241c FEF7ECF8 		BL	STORE
 4285 2420 52F804FB 		_UNNEST
 4286              	
 4287              	
 4288              	//    COMPILE_BLW	( ca -- asm_code )
 4289              	// 	Assemble a branch-link long instruction to ca.
 4290              	// ref: ARM-v7M architecture reference, section A7.7.18 
 4291              	COMPILE_BLW:
 4292 2424 4FEA6505 		ASR R5,R5,#1 
 4293 2428 4FF45044 		_MOV32 R4,0xF000D000 
 4293      CFF20004 
 4294 2430 65F30A04 		BFI R4,R5,#0,#11
 4295 2434 4FEAD525 		LSR R5,#11
 4296 2438 65F31944 		BFI R4,R5,#16,#10
 4297 243c 4FEAA525 		ASR R5,#10
 4298 2440 65F3CB24 		BFI R4,R5,#11,#1
 4299 2444 4FEA6505 		ASR R5,#1
 4300 2448 65F34D34 		BFI R4,R5,#13,#1
ARM GAS  stm32eforth.s 			page 81


 4301 244c 4FEA6505 		ASR R5,#1
 4302 2450 65F39A64 		BFI R4,R5,#26,#1
 4303 2454 14F0806F 		TST R4,#(1<<26)
 4304 2458 02D1     		BNE 1f
 4305 245a 00BF     		NOP 
 4306 245c 84F42054 		EOR R4,R4,#(5<<11)
 4307 2460 4FEA3445 	1:  ROR R5,R4,#16 
 4308 2464 7047     		_NEXT 
 4309              	
 4310              	// 	.word	_RBRAC+MAPOFFSET
 4311              	// _CALLC	.byte  5
 4312              	// 	.ascii "call,"
 4313              	// 	.p2align 2 	
 4314              	CALLC:
 4315 2466 42F804ED 		_NEST
 4316 246a 25F00105 		BIC R5,R5,#1 
 4317 246e FEF7CDFC 		BL HERE 
 4318 2472 FEF77BF9 		BL SUBB 
 4319 2476 A5F10405 		SUB R5,R5,#4 
 4320 247a FFF7D3FF 		BL COMPILE_BLW 
 4321 247e FFF7ADFD 		BL	COMMA			//  assemble BL.W instruction
 4322 2482 52F804FB 		_UNNEST
 4323              	
 4324              		.p2align 
 4325              	// 	:	( -- //  string> )
 4326              	// 	Start a new colon definition using next word as its name.
 4327              	
 4328 2486 48190018 		.word	_RBRAC+MAPOFFSET
 4329 248a 01       	_COLON:	.byte  1
 4330 248b 3A       		.ascii ":"
 4331              		.p2align 2 	
 4332              	COLON:
 4333 248c 42F804ED 		_NEST
 4334 2490 FFF712F9 		BL	TOKEN
 4335 2494 FFF71CFF 		BL	SNAME
 4336 2498 FEF76FF8 		_DOLIT
 4337 249c 42F804ED 		_NEST
 4338 24a0 FFF79CFD 		BL	COMMA
 4339 24a4 FFF7B2FF 		BL	RBRAC
 4340 24a8 52F804FB 		_UNNEST
 4341              	
 4342              	//    IMMEDIATE   ( -- )
 4343              	// 	Make the last compiled word an immediate word.
 4344              	
 4345 24ac CA190018 		.word	_COLON+MAPOFFSET
 4346 24b0 09       	_IMMED:	.byte  9
 4347 24b1 494D4D45 		.ascii "IMMEDIATE"
 4347      44494154 
 4347      45
 4348 24ba 00BF     		.p2align 2 	
 4349              	IMMED:
 4350 24bc 42F804ED 		_NEST
 4351 24c0 FEF75BF8 		_DOLIT
 4352 24c4 80000000 		.word	IMEDD
 4353 24c8 FEF74EFB 		BL	LAST
 4354 24cc FEF79EF8 		BL	AT
 4355 24d0 FEF79CF8 		BL	AT
ARM GAS  stm32eforth.s 			page 82


 4356 24d4 FEF70CF9 		BL	ORR
 4357 24d8 FEF746FB 		BL	LAST
 4358 24dc FEF796F8 		BL	AT
 4359 24e0 FEF78AF8 		BL	STORE
 4360 24e4 52F804FB 		_UNNEST
 4361              	
 4362              	// **************************************************************************
 4363              	//  Defining words
 4364              	
 4365              	//    CONSTANT	( u -- //  string> )
 4366              	// 	Compile a new constant.
 4367              	
 4368 24e8 F0190018 		.word	_IMMED+MAPOFFSET
 4369 24ec 08       	_CONST:	.byte  8
 4370 24ed 434F4E53 		.ascii "CONSTANT"
 4370      54414E54 
 4371 24f5 0000BF   		.p2align 2 	
 4372              	CONST:
 4373 24f8 42F804ED 		_NEST
 4374 24fc FFF7DCF8 		BL	TOKEN
 4375 2500 FFF7E6FE 		BL	SNAME
 4376 2504 FFF760FF 		BL	OVERT
 4377 2508 FEF737F8 		_DOLIT
 4378 250c 42F804ED 		_NEST
 4379 2510 FFF764FD 		BL	COMMA
 4380 2514 FEF731F8 		_DOLIT
 4381 2518 68FFFF17 		.word	DOCON+MAPOFFSET
 4382 251c FFF7A3FF 		BL	CALLC
 4383 2520 FFF75CFD 		BL	COMMA
 4384 2524 52F804FB 		_UNNEST
 4385              	
 4386              		.p2align 2 
 4387              	// doDOES> ( -- a )
 4388              	// runtime action of DOES> 
 4389              	// leave parameter field address on stack 
 4390              	DODOES:
 4391 2528 42F804ED 		_NEST 
 4392 252c FEF78EF8 		BL RAT 
 4393 2530 FEF74AF9 		BL ONEM 
 4394 2534 FEF760F9 		BL	CELLP
 4395 2538 FEF716FB 		BL LAST 
 4396 253c FEF766F8 		BL AT
 4397 2540 FFF7C8F8 		BL NAMET 
 4398 2544 FEF758F9 		BL CELLP 
 4399 2548 FEF7A4F8 		BL DUPP
 4400 254c FEF786F8 		BL TOR 
 4401 2550 FEF70CF9 		BL SUBB 
 4402 2554 A5F10405 		SUB R5,R5,#4
 4403 2558 FFF764FF 		BL	COMPILE_BLW
 4404 255c FEF76CF8 		BL RFROM
 4405 2560 FEF74AF8 		BL STORE  
 4406 2564 52F804FB 		_UNNEST 
 4407              	
 4408              		
 4409              	
 4410              		.p2align 2
 4411              	//  DOES> ( -- )
ARM GAS  stm32eforth.s 			page 83


 4412              	//  compile time action 
 4413 2568 EC240000 		.word _CONST   
 4414 256c C5       	_DOES: .byte IMEDD+COMPO+5 
 4415 256d 444F4553 		.ascii "DOES>"
 4415      3E
 4416 2572 00BF     		.p2align 2
 4417              	DOES: 
 4418 2574 42F804ED 		_NEST 
 4419 2578 FDF7FFFF 		_DOLIT 
 4420 257c 681A0018 		.word DODOES + MAPOFFSET
 4421 2580 FFF771FF 		BL CALLC 
 4422 2584 FDF7F9FF 		_DOLIT	
 4423 2588 52F804FB 		_UNNEST 
 4424 258c FFF726FD 		BL	COMMA  
 4425 2590 FDF7F3FF 		_DOLIT 
 4426 2594 42F804ED 		_NEST 
 4427 2598 FFF720FD 		BL COMMA 
 4428 259c FDF7EDFF 		_DOLIT 
 4429 25a0 78FBFF17 		.word RFROM+MAPOFFSET  
 4430 25a4 FFF75FFF 		BL	CALLC
 4431 25a8 FDF7E7FF 		_DOLIT 
 4432 25ac 08FDFF17 		.word ONEM+MAPOFFSET 
 4433 25b0 FFF759FF 		BL CALLC 
 4434 25b4 52F804FB 		_UNNEST 
 4435              	
 4436              	
 4437              	//    CREATE	( -- //  string> )
 4438              	// 	Compile a new array entry without allocating code space.
 4439              	
 4440 25b8 AC1A0018 		.word	_DOES+MAPOFFSET
 4441 25bc 06       	_CREAT:	.byte  6
 4442 25bd 43524541 		.ascii "CREATE"
 4442      5445
 4443 25c3 00       		.p2align 2 	
 4444              	CREAT:
 4445 25c4 42F804ED 		_NEST
 4446 25c8 FFF776F8 		BL	TOKEN
 4447 25cc FFF780FE 		BL	SNAME
 4448 25d0 FFF7FAFE 		BL	OVERT
 4449 25d4 FDF7D1FF 		_DOLIT
 4450 25d8 42F804ED 		_NEST
 4451 25dc FFF7FEFC 		BL	COMMA
 4452 25e0 FDF7CBFF 		_DOLIT
 4453 25e4 5CFFFF17 		.word	DOVAR+MAPOFFSET
 4454 25e8 FFF73DFF 		BL	CALLC
 4455 25ec 52F804FB 		_UNNEST
 4456              	
 4457              	//    VARIABLE	( -- //  string> )
 4458              	// 	Compile a new variable initialized to 0.
 4459              	
 4460 25f0 FC1A0018 		.word	_CREAT+MAPOFFSET
 4461 25f4 08       	_VARIA:	.byte  8
 4462 25f5 56415249 		.ascii "VARIABLE"
 4462      41424C45 
 4463 25fd 0000BF   		.p2align 2 	
 4464              	VARIA:
 4465 2600 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 84


 4466 2604 FFF7DEFF 		BL	CREAT
 4467 2608 FDF7B7FF 		_DOLIT
 4468 260c 00000000 		.word	0
 4469 2610 FFF7E4FC 		BL	COMMA
 4470 2614 52F804FB 		_UNNEST
 4471              	
 4472              	/*************
 4473              	   Tools
 4474              	*************/
 4475              	
 4476              	//    dm+	 ( a u -- a )
 4477              	// 	Dump u bytes from , leaving a+u on the stack.
 4478              	
 4479              	// 	.word	_VARIA+MAPOFFSET
 4480              	// _DMP	.byte  3
 4481              	// 	.ascii "dm+"
 4482              	// 	.p2align 2 	
 4483              	DMP:
 4484 2618 42F804ED 		_NEST
 4485 261c FEF74CF8 		BL	OVER
 4486 2620 FDF7ABFF 		_DOLIT
 4487 2624 04000000 		.word	4
 4488 2628 FEF7E4FE 		BL	UDOTR			// display address
 4489 262c FEF748FE 		BL	SPACE
 4490 2630 FEF714F8 		BL	TOR			// start count down loop
 4491 2634 00F00CB8 		B.W	PDUM2			// skip first pass
 4492              	PDUM1:
 4493 2638 FEF72CF8 	  BL	DUPP
 4494 263c FDF7F6FF 		BL	CAT
 4495 2640 FDF79BFF 		_DOLIT
 4496 2644 03000000 		.word	3
 4497 2648 FEF7D4FE 		BL	UDOTR			// display numeric data
 4498 264c FEF7B4F8 		BL	ONEP			// increment address
 4499              	PDUM2:
 4500 2650 FDF7A7FF 	  BL	DONXT
 4501 2654 781B0018 		.word	PDUM1+MAPOFFSET	// loop till done
 4502 2658 52F804FB 		_UNNEST
 4503              		.p2align 2 
 4504              	//    DUMP	( a u -- )
 4505              	// 	Dump u bytes from a, in a formatted manner.
 4506              	
 4507 265c 341B0018 		.word	_VARIA+MAPOFFSET
 4508 2660 04       	_DUMP:	.byte  4
 4509 2661 44554D50 		.ascii "DUMP"
 4510 2665 0000BF   		.p2align 2 	
 4511              	DUMP:
 4512 2668 42F804ED 		_NEST
 4513 266c FEF71AFA 		BL	BASE
 4514 2670 FDF7CCFF 		BL	AT
 4515 2674 FDF7F2FF 		BL	TOR
 4516 2678 FEF720FD 		BL	HEX			// save radix,set hex
 4517 267c FDF77DFF 		_DOLIT
 4518 2680 10000000 		.word	16
 4519 2684 FEF73EFB 		BL	SLASH			// change count to lines
 4520 2688 FDF7E8FF 		BL	TOR
 4521 268c 00F014B8 		B.W	DUMP4			// start count down loop
 4522              	DUMP1:
ARM GAS  stm32eforth.s 			page 85


 4523 2690 FEF756FE 	  BL	CR
 4524 2694 FDF771FF 		_DOLIT
 4525 2698 10000000 		.word	16
 4526 269c FEF704F9 		BL	DDUP
 4527 26a0 FFF7BAFF 		BL	DMP			// display numeric
 4528 26a4 FEF7ECF8 		BL	ROT
 4529 26a8 FEF7EAF8 		BL	ROT
 4530 26ac FEF708FE 		BL	SPACE
 4531 26b0 FEF706FE 		BL	SPACE
 4532 26b4 FEF72CFE 		BL	TYPEE			// display printable characters
 4533              	DUMP4:
 4534 26b8 FDF773FF 	  BL	DONXT
 4535 26bc D01B0018 		.word	DUMP1+MAPOFFSET	// loop till done
 4536              	DUMP3:
 4537 26c0 FDF7E0FF 	  BL	DROP
 4538 26c4 FDF7B8FF 		BL	RFROM
 4539 26c8 FEF7ECF9 		BL	BASE
 4540 26cc FDF794FF 		BL	STORE			// restore radix
 4541 26d0 52F804FB 		_UNNEST
 4542              	
 4543              	//    .S	  ( ... -- ... )
 4544              	// 	Display the contents of the data stack.
 4545              	
 4546 26d4 A01B0018 		.word	_DUMP+MAPOFFSET
 4547              	_DOTS:
 4548 26d8 02       		.byte  2
 4549 26d9 2E53     		.ascii ".S"
 4550 26db 00       		.p2align 2 	
 4551              	DOTS:
 4552 26dc 42F804ED 		_NEST
 4553 26e0 FEF7EEFD 		BL	SPACE
 4554 26e4 FEF770FB 		BL	DEPTH			// stack depth
 4555 26e8 FDF7B8FF 		BL	TOR			// start count down loop
 4556 26ec 00F006B8 		B.W	DOTS2			// skip first pass
 4557              	DOTS1:
 4558 26f0 FDF7ACFF 		BL	RAT
 4559 26f4 FEF776FB 		BL	PICK
 4560 26f8 FEF7A8FE 		BL	DOT			// index stack, display contents
 4561              	DOTS2:
 4562 26fc FDF751FF 		BL	DONXT
 4563 2700 301C0018 		.word	DOTS1+MAPOFFSET	// loop till done
 4564 2704 FEF7DCFD 		BL	SPACE
 4565 2708 52F804FB 		_UNNEST
 4566              	
 4567              	//    >NAME	( ca -- na | F )
 4568              	// 	Convert code address to a name address.
 4569              	
 4570 270c 181C0018 		.word	_DOTS+MAPOFFSET
 4571 2710 05       	_TNAME:	.byte  5
 4572 2711 3E4E414D 		.ascii ">NAME"
 4572      45
 4573 2716 00BF     		.p2align 2 	
 4574              	TNAME:
 4575 2718 42F804ED 		_NEST
 4576 271c FDF79EFF 		BL	TOR			//  
 4577 2720 FEF704FA 		BL	CNTXT			//  va
 4578 2724 FDF772FF 		BL	AT			//  na
ARM GAS  stm32eforth.s 			page 86


 4579              	TNAM1:
 4580 2728 FDF7B4FF 		BL	DUPP			//  na na
 4581 272c FDF748FF 		BL	QBRAN
 4582 2730 981C0018 		.word	TNAM2+MAPOFFSET	//  vocabulary end, no match
 4583 2734 FDF7AEFF 		BL	DUPP			//  na na
 4584 2738 FEF7CCFF 		BL	NAMET			//  na ca
 4585 273c FDF786FF 		BL	RAT			//  na ca code
 4586 2740 FDF7E0FF 		BL	XORR			//  na f --
 4587 2744 FDF73CFF 		BL	QBRAN
 4588 2748 981C0018 		.word	TNAM2+MAPOFFSET
 4589 274c FEF75CF8 		BL	CELLM			//  la 
 4590 2750 FDF75CFF 		BL	AT			//  next_na
 4591 2754 FFF7E8BF 		B.W	TNAM1
 4592              	TNAM2:	
 4593 2758 FDF76EFF 		BL	RFROM
 4594 275c FDF792FF 		BL	DROP			//  0|na --
 4595 2760 52F804FB 		_UNNEST			// 0
 4596              	
 4597              	//    .ID	 ( na -- )
 4598              	// 	Display the name at address.
 4599              	
 4600 2764 501C0018 		.word	_TNAME+MAPOFFSET
 4601 2768 03       	_DOTID:	.byte  3
 4602 2769 2E4944   		.ascii ".ID"
 4603              		.p2align 2 	
 4604              	DOTID:
 4605 276c 42F804ED 		_NEST
 4606 2770 FEF77CF8 		BL	QDUP			// if zero no name
 4607 2774 FDF724FF 		BL	QBRAN
 4608 2778 D41C0018 		.word	DOTI1+MAPOFFSET
 4609 277c FEF73AF9 		BL	COUNT
 4610 2780 FDF7FBFE 		_DOLIT
 4611 2784 1F000000 		.word	0x1F
 4612 2788 FDF7A8FF 		BL	ANDD			// mask lexicon bits
 4613 278c FEF7C0FD 		BL	TYPEE
 4614 2790 52F804FB 		_UNNEST			// display name string
 4615              	DOTI1:
 4616 2794 FEF70CFE 		BL	DOTQP
 4617 2798 09       		.byte	9
 4618 2799 207B6E6F 		.ascii " {noName}"
 4618      4E616D65 
 4618      7D
 4619 27a2 00BF     		.p2align 2 	
 4620 27a4 52F804FB 		_UNNEST
 4621              	
 4622              		.equ WANT_SEE, 1  // set to 1 if you want SEE 
 4623              		.if WANT_SEE 
 4624              	
 4625              	// .CA ( ca -- ca )
 4626              	// print code field address 
 4627              	DOTCA:
 4628 27a8 42F804ED 		_NEST 
 4629 27ac FDF772FF 		BL  DUPP
 4630 27b0 FEF73AFE 		BL UDOT 
 4631 27b4 FDF7E1FE 		_DOLIT 
 4632 27b8 02000000 		.word 2 
 4633 27bc FEF78EFD 		BL SPACS 
ARM GAS  stm32eforth.s 			page 87


 4634 27c0 52F804FB 		_UNNEST 
 4635              	
 4636              	// CODE_ABORT ( ca -- f )
 4637              	// abort if code definition
 4638              	CODE_ABORT:
 4639 27c4 42F804ED 		_NEST 
 4640 27c8 FFF7EEFF 		BL DOTCA  
 4641 27cc FDF762FF 		BL DUPP 
 4642 27d0 FDF71CFF 		BL AT 
 4643 27d4 FDF7D1FE 		_DOLIT 
 4644 27d8 42F804ED 		.word 0xed04f842 // _NEST code 
 4645 27dc FDF792FF 		BL XORR 
 4646 27e0 FDF7EEFE 		BL QBRAN 
 4647 27e4 3C1D0018 		.word 1f+MAPOFFSET 
 4648 27e8 FEF77AFC 		BL DECIM
 4649 27ec FFF7F8F8 		BL ABORQ 
 4650 27f0 09       		.byte 9 
 4651 27f1 636F6465 		.ascii "code word"
 4651      20776F72 
 4651      64
 4652 27fa 00BF     		.p2align 2
 4653              	1:	 
 4654 27fc FEF7D8FD 		BL DOTQP 
 4655 2800 04       		.byte 4
 4656 2801 6E657374 		.ascii "nest"
 4657 2805 0000BF   		.p2align 2 
 4658 2808 FEF79AFD 		BL CR 
 4659 280c 52F804FB 		_UNNEST 
 4660              	
 4661              	
 4662              	// UNNEST? ( ca -- ca f )
 4663              	// check if UNNEST 
 4664              	UNNESTQ:
 4665 2810 42F804ED 		_NEST 
 4666 2814 FDF73EFF 		BL DUPP 
 4667 2818 FDF7F8FE 		BL AT 
 4668 281c FDF7ADFE 		_DOLIT 
 4669 2820 52F804FB 		.word 0xfb04f852 
 4670 2824 FEF77EF8 		BL EQUAL
 4671 2828 FDF734FF 		BL DUPP 
 4672 282c FDF7C8FE 		BL QBRAN
 4673 2830 841D0018 		.word 1f+MAPOFFSET  
 4674 2834 FEF7BCFD 		BL DOTQP
 4675 2838 06       		.byte 6
 4676 2839 756E6E65 		.ascii "unnest" 
 4676      7374
 4677 283f 00       		.p2align 2
 4678 2840 FEF77EFD 		BL CR  
 4679 2844 52F804FB 	1:	_UNNEST 
 4680              	
 4681              	
 4682              	// search no name routine from code address. 
 4683              	NONAMEQ: // ( ca -- na|ca f )
 4684 2848 42F804ED 		_NEST 
 4685 284c FDF795FE 		_DOLIT 
 4686 2850 00000000 		.word 0 
 4687 2854 FDF726FF 		BL SWAP 
ARM GAS  stm32eforth.s 			page 88


 4688 2858 FDF78FFE 		_DOLIT 
 4689 285c 1C2C0000 		.word NONAME_SUB
 4690 2860 FDF7FCFE 		BL TOR   
 4691 2864 FDF716FF 	0:	BL DUPP // ( 0 ca ca -- )  
 4692 2868 FDF7F0FE 		BL RAT  
 4693 286c FDF7CEFE 		BL AT 
 4694 2870 FDF7FCFF 		BL QDUP 
 4695 2874 FDF7A4FE 		BL QBRAN 
 4696 2878 101E0018 		.word 2f+MAPOFFSET 
 4697 287c FDF742FF 		BL XORR 
 4698 2880 FDF79EFE 		BL QBRAN 
 4699 2884 DC1D0018 		.word 1f+MAPOFFSET 
 4700 2888 FDF7D6FE 		BL RFROM 
 4701 288c FDF7B4FF 		BL CELLP
 4702 2890 FDF7E4FE 		BL TOR  
 4703 2894 FDF7A0FE 		BL BRAN 
 4704 2898 A41D0018 		.word 0b+MAPOFFSET 
 4705 289c FDF7CCFE 	1:  BL RFROM 
 4706 28a0 FDF76BFE 		_DOLIT 
 4707 28a4 1C2C0000 		.word NONAME_SUB
 4708 28a8 FDF760FF 		BL SUBB
 4709 28ac FDF765FE 		_DOLIT 
 4710 28b0 582C0000 		.word ANONYMOUS 
 4711 28b4 FDF752FF 		BL	PLUS
 4712 28b8 FDF7A8FE 		BL	AT   
 4713 28bc FDF7F2FE 		BL	SWAP 
 4714 28c0 FDF7E0FE 		BL	DROP
 4715 28c4 FDF7EEFE 		BL	SWAP 
 4716 28c8 FEF706F8 		BL	INVER 
 4717 28cc 52F804FB 		_UNNEST 
 4718 28d0 FDF7D8FE 	2:	BL DROP 
 4719 28d4 FDF7E6FE 		BL SWAP 
 4720 28d8 FDF7AEFE 		BL RFROM
 4721 28dc FDF7D2FE 		BL DROP 
 4722 28e0 52F804FB 		_UNNEST 
 4723              	
 4724              		.p2align 2 
 4725              	
 4726              	
 4727              	// print noname routine label ( n -- )
 4728              	// n is offset in ANONYMOUS array 
 4729              	DOTNONAME:
 4730 28e4 42F804ED 		_NEST 
 4731 28e8 41F8045D 		_PUSH 
 4732 28ec FDF745FE 		_DOLIT 
 4733 28f0 582C0000 		.word ANONYMOUS 
 4734 28f4 FDF732FF 		BL PLUS 
 4735 28f8 FDF788FE 		BL AT 
 4736 28fc FEF708FD 		BL TYPEE 
 4737 2900 52F804FB 		_UNNEST 
 4738              	
 4739              	// IS_BLW ( code -- f )
 4740              	// check if it is a BL instruction 
 4741              	IS_BLW:
 4742 2904 42F804ED 		_NEST 
 4743 2908 FDF737FE 		_DOLIT 
 4744 290c 00F000D0 		.word 0xD000F000
ARM GAS  stm32eforth.s 			page 89


 4745 2910 FDF7C0FE 		BL DUPP 
 4746 2914 FDF7A2FE 		BL TOR 
 4747 2918 FDF7E0FE 		BL ANDD
 4748 291c FDF78CFE 		BL RFROM  
 4749 2920 FEF700F8 		BL EQUAL   
 4750 2924 52F804FB 		_UNNEST 
 4751              	
 4752              	//    SEE	 ( -- //  string> )
 4753              	// 	A simple decompiler.
 4754              	
 4755 2928 A81C0018 		.word	_DOTID+MAPOFFSET
 4756 292c 03       	_SEE:	.byte  3
 4757 292d 534545   		.ascii "SEE"
 4758              		.p2align 2 	
 4759              	SEE:
 4760 2930 42F804ED 		_NEST
 4761 2934 FEF7B6F8 		BL BASE 
 4762 2938 FDF768FE 		BL AT 
 4763 293c FDF78EFE 		BL TOR 
 4764 2940 FEF7BCFB 		BL HEX 
 4765 2944 FFF72AFB 		BL	TICK	//  ca --, starting address
 4766 2948 FEF7FAFC 		BL	CR	
 4767 294c FFF73AFF 		BL  CODE_ABORT
 4768 2950 FDF713FE 		_DOLIT 
 4769 2954 00000000 		.word 0  
 4770 2958 FDF780FE 		BL TOR // not a BL counter limit to 10 consecutives 
 4771              	SEE1:
 4772 295c FDF74CFF 		BL	CELLP			//  a
 4773 2960 FFF722FF 		BL  DOTCA 
 4774 2964 FFF754FF 		BL  UNNESTQ
 4775 2968 FDF72AFE 		BL	QBRAN 
 4776 296c DC1E0018 		.word 1f+MAPOFFSET  
 4777 2970 FDF790FE 		BL	DUPP 
 4778 2974 FDF740FF 		BL	CELLP
 4779 2978 FDF748FE 		BL	AT 
 4780 297c FFF7C2FF 		BL	IS_BLW
 4781 2980 FDF7AAFF 		BL	INVER  
 4782 2984 FDF71CFE 		BL	QBRAN 
 4783 2988 9C1E0018 		.word SEE1+MAPOFFSET 
 4784 298c FDF754FE 		BL	RFROM 
 4785 2990 FDF778FE 		BL	DROP 
 4786 2994 FDF720FE 		BL	BRAN 
 4787 2998 081F0018 		.word 2f+MAPOFFSET 
 4788 299c FDF77AFE 	1:	BL	DUPP			//  a a
 4789 29a0 00F044F8 		BL	DECOMP		//  a
 4790 29a4 FEF7CCFC 		BL	CR 
 4791 29a8 FDF750FE 		BL	RAT 
 4792 29ac FDF7E5FD 		_DOLIT 
 4793 29b0 0A000000 		.word 10 
 4794 29b4 FDF7DAFF 		BL 	GREAT 
 4795 29b8 FDF702FE 		BL	QBRAN 
 4796 29bc 9C1E0018 		.word	SEE1+MAPOFFSET
 4797 29c0 FDF73AFE 		BL	RFROM 
 4798 29c4 FDF75EFE 		BL	DROP 
 4799 29c8 FDF75CFE 	2:	BL	DROP
 4800 29cc FDF734FE 		BL  RFROM 
 4801 29d0 FEF768F8 		BL 	BASE 
ARM GAS  stm32eforth.s 			page 90


 4802 29d4 FDF710FE 		BL	STORE 
 4803 29d8 52F804FB 		_UNNEST
 4804              	
 4805              	
 4806              	// BL-ADR ( asm_code -- rel_adr )
 4807              	// get absolute address from asm_code 
 4808              	// ref: ARM-v7M architecture reference, section A7.7.18 
 4809              	BLADR: 
 4810 29dc 4FEA0504 		MOV.W R4,R5
 4811 29e0 4FEA3444 		ROR R4,#16 
 4812 29e4 64F30A05 		BFI R5,R4,#0,#11 
 4813 29e8 4FEAE424 		ASR R4,#11 
 4814 29ec 64F35555 		BFI R5,R4,#21,#1 
 4815 29f0 4FEAA404 		ASR R4,#2
 4816 29f4 64F39655 		BFI R5,R4,#22,#1
 4817 29f8 4FEAE404 		ASR R4,#3
 4818 29fc 64F3D425 		BFI R5,R4,#11,#10
 4819 2a00 4FEAA424 		ASR R4,#10 
 4820 2a04 64F3D755 		BFI R5,R4,#23,#1
 4821 2a08 15F4000F 		TST R5,#(1<<23)
 4822 2a0c 40F00280 		BNE.W 1f
 4823 2a10 85F4C005 		EOR R5,R5,#(3<<21)
 4824 2a14 4FEA0525 	1:	LSL R5,#8
 4825 2a18 4FEAE515 		ASR R5,#7 
 4826 2a1c 7047     		_NEXT 
 4827              	
 4828              	// 	DECOMPILE ( a -- )
 4829              	// 	Convert code in a.  Display name of command or as data.
 4830              	
 4831 2a1e 6C1E0018 		.word	_SEE+MAPOFFSET
 4832 2a22 09       	_DECOM:	.byte  9
 4833 2a23 4445434F 		.ascii "DECOMPILE"
 4833      4D50494C 
 4833      45
 4834              		.p2align 2 
 4835              		
 4836              	DECOMP:	
 4837 2a2c 42F804ED 		_NEST
 4838 2a30 FDF730FE 		BL	DUPP			//  a a
 4839 2a34 FDF7EAFD 		BL	AT			//  a code
 4840 2a38 FDF72CFE 		BL	DUPP			//  a code code
 4841 2a3c FFF762FF 		BL	IS_BLW
 4842 2a40 FDF7BEFD 		BL	QBRAN
 4843 2a44 E01F0018 		.word	DECOM2+MAPOFFSET	//  not a BL instruction 
 4844              		//  a valid_code --, extract address and display name
 4845 2a48 FEF7B2FC 		BL DOTQP  
 4846 2a4c 03       		.byte 3
 4847 2a4d 424C20   		.ascii "BL "
 4848              		.p2align 2 
 4849 2a50 FFF7C4FF 		BL  BLADR   // extract relative address from BL code
 4850 2a54 FDF730FE 		BL	OVER			//  a offset a
 4851 2a58 FDF780FE 		BL	PLUS			//  a target-4
 4852 2a5c FDF7CCFE 		BL	CELLP			//  a target
 4853 2a60 FFF7A2FE 		BL  DOTCA 
 4854 2a64 FFF7F0FE 		BL	NONAMEQ 
 4855 2a68 FDF7AAFD 		BL	QBRAN 
 4856 2a6c B81F0018 		.word DECOMP1+MAPOFFSET  
ARM GAS  stm32eforth.s 			page 91


 4857 2a70 FDF7B2FD 		BL	BRAN 
 4858 2a74 BC1F0018 		.word DECOMP3+MAPOFFSET 
 4859              	DECOMP1:
 4860 2a78 FFF74EFE 		BL	TNAME			//  a na/0 --, is it a name?
 4861              	DECOMP3:
 4862 2a7c FFF776FE 		BL	DOTID			//  a --, display name
 4863 2a80 FDF700FE 		BL	DROP
 4864              	// reset not BL counter 
 4865 2a84 FDF7D8FD 		BL	RFROM 
 4866 2a88 FDF7D6FD 		BL	RFROM 
 4867 2a8c FDF702FE 		BL	DUPP 
 4868 2a90 FDF76CFE 		BL	SUBB 
 4869 2a94 FDF7E2FD 		BL	TOR 
 4870 2a98 FDF7E0FD 		BL	TOR 	
 4871 2a9c 52F804FB 		_UNNEST
 4872              			
 4873              	DECOM2: // not a BL 
 4874 2aa0 FEF7C2FC 		BL	UDOT
 4875 2aa4 FDF7EEFD 		BL	DROP
 4876 2aa8 FDF7C6FD 		BL	RFROM // unnest address 
 4877 2aac FDF7C4FD 		BL	RFROM // not BL counter 
 4878 2ab0 FDF782FE 		BL	ONEP  // increment counter 
 4879 2ab4 FDF7D2FD 		BL	TOR 
 4880 2ab8 FDF7D0FD 		BL	TOR 
 4881 2abc 52F804FB 		_UNNEST
 4882              	
 4883              	//    WORDS	( -- )
 4884              	// 	Display the names in the context vocabulary.
 4885              	
 4886 2ac0 621F0018 		.word	_DECOM+MAPOFFSET
 4887              	.else 
 4888              		.word _DOTID+MAPOFFSET 
 4889              	.endif 
 4890 2ac4 05       	_WORDS:	.byte  5
 4891 2ac5 574F5244 		.ascii "WORDS"
 4891      53
 4892 2aca 00BF     		.p2align 2 	
 4893              	WORDS:
 4894 2acc 42F804ED 		_NEST
 4895 2ad0 FEF736FC 		BL	CR
 4896 2ad4 FEF72AF8 		BL	CNTXT
 4897 2ad8 FDF798FD 		BL	AT			// only in context
 4898              	WORS1:
 4899 2adc FDF7C6FE 		BL	QDUP			// ?at end of list
 4900 2ae0 FDF76EFD 		BL	QBRAN
 4901 2ae4 40200018 		.word	WORS2+MAPOFFSET
 4902 2ae8 FDF7D4FD 		BL	DUPP
 4903 2aec FEF7E8FB 		BL	SPACE
 4904 2af0 FFF73CFE 		BL	DOTID			// display a name
 4905 2af4 FDF788FE 		BL	CELLM
 4906 2af8 FDF788FD 		BL	AT
 4907 2afc FFF7EEBF 		B.W	WORS1
 4908              	WORS2:
 4909 2b00 52F804FB 		_UNNEST
 4910              	
 4911              	// **************************************************************************
 4912              	//  cold start
ARM GAS  stm32eforth.s 			page 92


 4913              	
 4914              	//    VER	 ( -- n )
 4915              	// 	Return the version number of this implementation.
 4916              	
 4917              	// 	.word	_WORDS+MAPOFFSET
 4918              	// _VERSN	.byte  3
 4919              	// 	.ascii "VER"
 4920              	// 	.p2align 2 	
 4921              	VERSN:
 4922 2b04 42F804ED 		_NEST
 4923 2b08 FDF737FD 		_DOLIT
 4924 2b0c 00010000 		.word	VER*256+EXT
 4925 2b10 52F804FB 		_UNNEST
 4926              	
 4927              	//    hi	  ( -- )
 4928              	// 	Display the sign-on message of eForth.
 4929              	
 4930 2b14 04200018 		.word	_WORDS+MAPOFFSET
 4931 2b18 02       	_HI:	.byte  2
 4932 2b19 4849     		.ascii "HI"
 4933 2b1b 00       		.p2align 2 	
 4934              	HI:
 4935 2b1c 42F804ED 		_NEST
 4936 2b20 FEF70EFC 		BL	CR	// initialize I/O
 4937 2b24 FEF744FC 		BL	DOTQP
 4938 2b28 17       		.byte	23
 4939 2b29 626C7565 		.ascii "blue pill stm32eForth v" 
 4939      2070696C 
 4939      6C207374 
 4939      6D333265 
 4939      466F7274 
 4940              		.p2align 2
 4941 2b40 FDF7B0FF 		BL	BASE
 4942 2b44 FDF762FD 		BL	AT
 4943 2b48 FEF7B8FA 		BL	HEX	// save radix
 4944 2b4c FFF7DAFF 		BL	VERSN
 4945 2b50 FEF730FA 		BL	BDIGS
 4946 2b54 FEF754FA 		BL	DIG
 4947 2b58 FEF752FA 		BL	DIG
 4948 2b5c FDF70DFD 		_DOLIT
 4949 2b60 2E000000 		.word	'.'
 4950 2b64 FEF736FA 		BL	HOLD
 4951 2b68 FEF75AFA 		BL	DIGS
 4952 2b6c FEF77EFA 		BL	EDIGS
 4953 2b70 FEF7CEFB 		BL	TYPEE	// format version number
 4954 2b74 FDF796FF 		BL	BASE
 4955 2b78 FDF73EFD 		BL	STORE
 4956 2b7c FEF7E0FB 		BL	CR
 4957 2b80 52F804FB 		_UNNEST			// restore radix
 4958              	
 4959              	//    COLD	( -- )
 4960              	// 	The high level cold start sequence.
 4961              	
 4962 2b84 58200018 		.word	_HI+MAPOFFSET
 4963 2b88 04       	LASTN:	.byte  4
 4964 2b89 434F4C44 		.ascii "COLD"
 4965 2b8d 000000   		.p2align 2,0	
ARM GAS  stm32eforth.s 			page 93


 4966              	COLD:
 4967 2b90 0148     	ldr r0,uart_puts_adr 
 4968 2b92 024D     	ldr r5,hello 
 4969 2b94 8047     	blx r0 
 4970 2b96 FEE7     	b .
 4971              	uart_puts_adr:
 4972 2b98 00000000 		.word uart_puts
 4973              	hello:
 4974 2b9c A02B0000 		.word .+4
 4975 2ba0 0C       		.byte 12
 4976 2ba1 68656C6C 		.ascii "hello world!"
 4976      6F20776F 
 4976      726C6421 
 4977 2bad 0000BF   		.p2align 2
 4978              	
 4979              	//  Initiate Forth registers
 4980 2bb0 4FF4A073 		MOV R3,#UPP&0xffff	//  user area 
 4981 2bb4 C2F20003 	 	MOVT R3,#UPP>>16		  
 4982 2bb8 03F59F42 		ADD R2,R3,#RPP&0xffff	// Forth return stack
 4983 2bbc 03F59D41 		ADD R1,R3,#SPP&0xffff // Forth data stack
 4984 2bc0 85EA0505 		EOR R5,R5,R5			//  tos=0
 4985 2bc4 42F804ED 		_NEST
 4986              	COLD1:
 4987 2bc8 FDF7D7FC 		_DOLIT 
 4988 2bcc 00000000 		.word 0 
 4989 2bd0 FDF792FC 		BL ULED // turn off user LED 
 4990 2bd4 FDF7D1FC 		_DOLIT
 4991 2bd8 00040000 		.word	UZERO
 4992 2bdc FDF7CDFC 		_DOLIT
 4993 2be0 40010020 		.word	UPP
 4994 2be4 FDF7C9FC 		_DOLIT
 4995 2be8 54000000 		.word	ULAST-UZERO
 4996 2bec FEF756F9 		BL	MOVE 			// initialize user area
 4997 2bf0 FEF7A0FF 		BL	PRESE			// initialize stack
 4998              		// check if user image saved in slot 0 
 4999 2bf4 FFF784F8 		BL IMGQ 
 5000 2bf8 FDF7E2FC 		BL	QBRAN 
 5001 2bfc 44210018 		.word 1f+MAPOFFSET
 5002 2c00 FFF796F8 		BL	LOAD_IMG 
 5003 2c04 FDF744FF 	1:	BL	TBOOT
 5004 2c08 FEF724F9 		BL	ATEXE			// application boot
 5005 2c0c FFF7DCFB 		BL	OVERT
 5006 2c10 FEF79ABF 		B.W	QUIT			// start interpretation
 5007              	COLD2:
 5008 2c14 AFF30080 		.p2align 3 	
 5009              	CTOP:
 5010 2c18 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 5011              	
 5012              	/********************************
 5013              	  data that doesn't need to be 
 5014              	  copied in RAM 
 5015              	*******************************/
 5016              		.p2align 2
 5017              	NONAME_SUB: // routine not in the dictionary 
 5018 2c1c 18FBFF17 		.word BRAN+MAPOFFSET,QBRAN+MAPOFFSET, DOLIT+MAPOFFSET,DONXT+MAPOFFSET,DODOES+MAPOFFSET
 5018      00FBFF17 
 5018      BAFAFF17 
ARM GAS  stm32eforth.s 			page 94


 5018      E2FAFF17 
 5018      681A0018 
 5019 2c30 5CFFFF17 		.word DOVAR+MAPOFFSET,DOCON+MAPOFFSET,IS_BLW+MAPOFFSET,DOTQP+MAPOFFSET,BLADR+MAPOFFSET  
 5019      68FFFF17 
 5019      441E0018 
 5019      F0080018 
 5019      1C1F0018 
 5020 2c44 E81C0018 		.word DOTCA+MAPOFFSET,NONAMEQ+MAPOFFSET,STRCQ+MAPOFFSET,VERSN+MAPOFFSET  
 5020      881D0018 
 5020      B0150018 
 5020      44200018 
 5021 2c54 00000000 		.word 0 
 5022              	
 5023              	ANONYMOUS: // anonymous routines 
 5024 2c58 902C0000 		.word BRAN_LBL,QBRAN_LBL,DOLIT_LBL,DONEXT_LBL,DODOES_LBL,DOVAR_LBL,DOCON_LBL
 5024      9C2C0000 
 5024      A82C0000 
 5024      B42C0000 
 5024      C02C0000 
 5025 2c74 E42C0000 		.word IS_BLW_LBL,DOTQP_LBL,BLADR_LBL,DOTCA_LBL,NONAMEQ_LBL,STRCQ_LBL,VERSN_LBL   
 5025      F02C0000 
 5025      F42C0000 
 5025      002D0000 
 5025      0C2D0000 
 5026              	
 5027              	BRAN_LBL:
 5028 2c90 09       		.byte 9 
 5029 2c91 207B6272 		.ascii " {branch}"
 5029      616E6368 
 5029      7D
 5030 2c9a 00BF     		.p2align 2 
 5031              	QBRAN_LBL:
 5032 2c9c 0A       		.byte 10
 5033 2c9d 207B3F62 		.ascii " {?branch}"
 5033      72616E63 
 5033      687D
 5034 2ca7 00       		.p2align 2
 5035              	DOLIT_LBL:
 5036 2ca8 08       		.byte 8 
 5037 2ca9 207B646F 		.ascii " {doLit}"
 5037      4C69747D 
 5038 2cb1 0000BF   		.p2align 2 
 5039              	DONEXT_LBL:
 5040 2cb4 09       		.byte 9
 5041 2cb5 207B646F 		.ascii " {doNext}"
 5041      4E657874 
 5041      7D
 5042 2cbe 00BF     		.p2align 2 
 5043              	DODOES_LBL:
 5044 2cc0 09       		.byte 9
 5045 2cc1 207B646F 		.ascii " {doDoes}"
 5045      446F6573 
 5045      7D
 5046 2cca 00BF     		.p2align 2 
 5047              	DOVAR_LBL:
 5048 2ccc 08       		.byte 8
 5049 2ccd 207B646F 		.ascii " {doVar}"
ARM GAS  stm32eforth.s 			page 95


 5049      5661727D 
 5050 2cd5 0000BF   		.p2align 2 
 5051              	DOCON_LBL:
 5052 2cd8 0A       		.byte 10
 5053 2cd9 207B646F 		.ascii " {doConst}"
 5053      436F6E73 
 5053      747D
 5054 2ce3 00       		.p2align 2 
 5055              	IS_BLW_LBL:
 5056 2ce4 0B       		.byte 11 
 5057 2ce5 207B424C 		.ascii " {BL code?}"
 5057      20636F64 
 5057      653F7D
 5058              		.p2align 2 
 5059              	DOTQP_LBL:
 5060 2cf0 03       		.byte 3
 5061 2cf1 202E22   		.ascii " .\""
 5062              		.p2align 
 5063              	BLADR_LBL:
 5064 2cf4 09       		.byte 9
 5065 2cf5 207B424C 		.ascii " {BL>ADR}"
 5065      3E414452 
 5065      7D
 5066 2cfe 00BF     		.p2align 2 
 5067              	DOTCA_LBL:
 5068 2d00 08       		.byte  8
 5069 2d01 207B646F 		.ascii " {dotca}"
 5069      7463617D 
 5070 2d09 0000BF   		.p2align 2 
 5071              	NONAMEQ_LBL:
 5072 2d0c 0A       		.byte  10
 5073 2d0d 207B6E6F 		.ascii " {noname?}"
 5073      6E616D65 
 5073      3F7D
 5074 2d17 00       		.p2align 2 
 5075              	STRCQ_LBL:
 5076 2d18 06       		.byte  6
 5077 2d19 207B242C 		.ascii " {$,\"}"
 5077      227D
 5078 2d1f 00       		.p2align 2 
 5079              	VERSN_LBL:
 5080 2d20 0A       		.byte  10
 5081 2d21 207B7665 		.ascii " {version}"
 5081      7273696F 
 5081      6E7D
 5082 2d2b 00       		.p2align 2 
 5083              	
 5084              	
 5085 2d2c AFF30080 		.p2align 10 
 5085      AFF30080 
 5085      AFF30080 
 5085      AFF30080 
 5085      AFF30080 
 5086              	USER_SPACE: // save user image here.  
 5087 3000 FFFFFFFF 		.word 0XFFFFFFFF
 5088              	
 5089              	
ARM GAS  stm32eforth.s 			page 96


 5090              	  .end 
ARM GAS  stm32eforth.s 			page 97


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  stm32eforth.s 			page 98


board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
board/blue-pill/stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
board/blue-pill/stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
board/blue-pill/stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
board/blue-pill/stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
board/blue-pill/stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
board/blue-pill/stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
board/blue-pill/stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
board/blue-pill/stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
board/blue-pill/stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
board/blue-pill/stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
board/blue-pill/stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
board/blue-pill/stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
board/blue-pill/stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
board/blue-pill/stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
board/blue-pill/stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
board/blue-pill/stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
board/blue-pill/stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
board/blue-pill/stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
board/blue-pill/stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
board/blue-pill/stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
board/blue-pill/stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
board/blue-pill/stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
board/blue-pill/stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
board/blue-pill/stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
board/blue-pill/stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
board/blue-pill/stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
board/blue-pill/stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
board/blue-pill/stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
board/blue-pill/stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
board/blue-pill/stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
board/blue-pill/stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
board/blue-pill/stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
board/blue-pill/stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32eforth.s:83     *ABS*:0000000040011000 LED_GPIO
       stm32eforth.s:84     *ABS*:000000000000000d LED_PIN
       stm32eforth.s:85     *ABS*:0000000040013800 UART
       stm32eforth.s:88     *ABS*:0000000020004e80 SPP
       stm32eforth.s:89     *ABS*:0000000020004e80 TIBB
       stm32eforth.s:90     *ABS*:0000000020004f80 RPP
       stm32eforth.s:91     *ABS*:0000000020000140 UPP
       stm32eforth.s:92     *ABS*:0000000020000240 DTOP
       stm32eforth.s:93     *ABS*:0000000020004e00 DEND
       stm32eforth.s:94     *ABS*:0000000020000140 RAMOFFSET
       stm32eforth.s:95     *ABS*:0000000020005000 RAMEND
       stm32eforth.s:96     *ABS*:0000000008000c00 FLASHOFFSET
       stm32eforth.s:99     *ABS*:0000000017fff540 MAPOFFSET
ARM GAS  stm32eforth.s 			page 99


       stm32eforth.s:104    *ABS*:0000000000000004 SEED_OFS
       stm32eforth.s:105    *ABS*:0000000000000008 TICKS_OFS
       stm32eforth.s:106    *ABS*:000000000000000c TIMER_OFS
       stm32eforth.s:107    *ABS*:0000000000000010 TORAM_OFS
       stm32eforth.s:108    *ABS*:0000000000000014 IMG_SIGN_OFS
       stm32eforth.s:109    *ABS*:0000000000000018 BOOT_OFS
       stm32eforth.s:110    *ABS*:000000000000001c BASE_OFS
       stm32eforth.s:111    *ABS*:0000000000000020 TMP_OFS
       stm32eforth.s:112    *ABS*:0000000000000024 SPAN_OFS
       stm32eforth.s:113    *ABS*:0000000000000028 TOIN_OFS
       stm32eforth.s:114    *ABS*:000000000000002c NTIB_OFS
       stm32eforth.s:115    *ABS*:0000000000000030 TIB_OFS
       stm32eforth.s:116    *ABS*:0000000000000034 EVAL_OFS
       stm32eforth.s:117    *ABS*:0000000000000038 HLD_OFS
       stm32eforth.s:118    *ABS*:000000000000003c CTXT_OFS
       stm32eforth.s:119    *ABS*:0000000000000040 FORTH_CTOP_OFS
       stm32eforth.s:120    *ABS*:0000000000000044 USER_CTOP_OFS
       stm32eforth.s:121    *ABS*:0000000000000048 LASTN_OFS
       stm32eforth.s:122    *ABS*:000000000000004c VARS_END_OFS
       stm32eforth.s:124    *ABS*:0000000000000010 RX_QUEUE_SIZE
       stm32eforth.s:125    *ABS*:0000000000000050 RX_QUEUE_OFS
       stm32eforth.s:126    *ABS*:0000000000000060 RX_HEAD_OFS
       stm32eforth.s:127    *ABS*:0000000000000064 RX_TAIL_OFS
       stm32eforth.s:175    .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:370    .text.reset_handler:0000000000000000 reset_handler
       stm32eforth.s:266    .text.default_handler:0000000000000000 default_handler
       stm32eforth.s:283    .text.default_handler:0000000000000020 systick_handler
       stm32eforth.s:303    .text.default_handler:000000000000003c uart_rx_handler
       stm32eforth.s:255    .isr_vector:0000000000000130 isr_end
       stm32eforth.s:264    .text.default_handler:0000000000000000 $t
       stm32eforth.s:271    .text.default_handler:0000000000000008 exception_msg
       stm32eforth.s:345    .text.default_handler:00000000000000a4 uart_puts
       stm32eforth.s:326    .text.default_handler:000000000000007c reset_mcu
       stm32eforth.s:272    .text.default_handler:0000000000000008 $d
       stm32eforth.s:293    .text.default_handler:000000000000003a systick_exit
       stm32eforth.s:323    .text.default_handler:0000000000000076 user_reboot
       stm32eforth.s:336    .text.default_handler:0000000000000090 user_reboot_msg
       stm32eforth.s:334    .text.default_handler:000000000000008c scb_adr
       stm32eforth.s:335    .text.default_handler:000000000000008c $d
       stm32eforth.s:340    .text.default_handler:00000000000000a2 $t
       stm32eforth.s:368    .text.reset_handler:0000000000000000 $t
       stm32eforth.s:491    .text.reset_handler:00000000000000fa remap
       stm32eforth.s:383    .text.reset_handler:0000000000000018 init_devices
       stm32eforth.s:466    .text.reset_handler:00000000000000b8 uart_init
       stm32eforth.s:378    .text.reset_handler:0000000000000014 forth_entry
       stm32eforth.s:379    .text.reset_handler:0000000000000014 $d
       stm32eforth.s:4966   .text.reset_handler:0000000000002b90 COLD
       stm32eforth.s:382    .text.reset_handler:0000000000000018 $t
       stm32eforth.s:398    .text.reset_handler:0000000000000036 wait_hserdy
       stm32eforth.s:418    .text.reset_handler:0000000000000050 wait_pllrdy
       stm32eforth.s:431    .text.reset_handler:0000000000000070 wait_sws
       stm32eforth.s:520    .text.reset_handler:000000000000014c remap_dest
       stm32eforth.s:518    .text.reset_handler:0000000000000148 remap_src
       stm32eforth.s:5009   .text.reset_handler:0000000000002c18 CTOP
       stm32eforth.s:566    .text.reset_handler:0000000000000400 UZERO
       stm32eforth.s:519    .text.reset_handler:0000000000000148 $d
       stm32eforth.s:526    *ABS*:0000000000000001 VER
ARM GAS  stm32eforth.s 			page 100


       stm32eforth.s:527    *ABS*:0000000000000000 EXT
       stm32eforth.s:531    *ABS*:0000000000000040 COMPO
       stm32eforth.s:532    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:533    *ABS*:00000000ffffff1f MASKK
       stm32eforth.s:535    *ABS*:0000000000000004 CELLL
       stm32eforth.s:536    *ABS*:000000000000000a BASEE
       stm32eforth.s:537    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:539    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:540    *ABS*:000000000000000a LF
       stm32eforth.s:541    *ABS*:000000000000000d CRR
       stm32eforth.s:542    *ABS*:000000000000001b ERR
       stm32eforth.s:543    *ABS*:0000000000000027 TIC
       stm32eforth.s:564    .text.reset_handler:0000000000000150 $t
       stm32eforth.s:567    .text.reset_handler:0000000000000400 $d
       stm32eforth.s:4934   .text.reset_handler:0000000000002b1c HI
       stm32eforth.s:3270   .text.reset_handler:0000000000001a10 INTER
       stm32eforth.s:4963   .text.reset_handler:0000000000002b88 LASTN
       stm32eforth.s:587    .text.reset_handler:0000000000000454 ULAST
       stm32eforth.s:601    .text.reset_handler:000000000000046c $d
       stm32eforth.s:602    .text.reset_handler:0000000000000470 _RAND
       stm32eforth.s:605    .text.reset_handler:0000000000000478 RAND
       stm32eforth.s:1542   .text.reset_handler:0000000000000a40 SEED
       stm32eforth.s:829    .text.reset_handler:000000000000060c AT
       stm32eforth.s:923    .text.reset_handler:0000000000000694 DUPP
       stm32eforth.s:816    .text.reset_handler:00000000000005f8 STORE
       stm32eforth.s:1325   .text.reset_handler:00000000000008fc ABSS
       stm32eforth.s:934    .text.reset_handler:00000000000006a4 SWAP
       stm32eforth.s:1892   .text.reset_handler:0000000000000cec MODD
       stm32eforth.s:625    .text.reset_handler:00000000000004b8 $d
       stm32eforth.s:626    .text.reset_handler:00000000000004bc _PAUSE
       stm32eforth.s:628    .text.reset_handler:00000000000004c2 $t
       stm32eforth.s:629    .text.reset_handler:00000000000004c4 PAUSE
       stm32eforth.s:1564   .text.reset_handler:0000000000000a68 TIMER
       stm32eforth.s:633    .text.reset_handler:00000000000004d0 PAUSE_LOOP
       stm32eforth.s:776    .text.reset_handler:00000000000005c0 QBRAN
       stm32eforth.s:637    .text.reset_handler:00000000000004dc $d
       stm32eforth.s:640    .text.reset_handler:00000000000004e8 PAUSE_EXIT
       stm32eforth.s:794    .text.reset_handler:00000000000005d8 BRAN
       stm32eforth.s:638    .text.reset_handler:00000000000004e0 $t
       stm32eforth.s:639    .text.reset_handler:00000000000004e4 $d
       stm32eforth.s:641    .text.reset_handler:00000000000004e8 $t
       stm32eforth.s:645    .text.reset_handler:00000000000004ec $d
       stm32eforth.s:646    .text.reset_handler:00000000000004f0 _ULED
       stm32eforth.s:650    .text.reset_handler:00000000000004f8 ULED
       stm32eforth.s:659    .text.reset_handler:0000000000000510 ULED_OFF
       stm32eforth.s:665    .text.reset_handler:0000000000000514 $d
       stm32eforth.s:666    .text.reset_handler:0000000000000518 _QRX
       stm32eforth.s:669    .text.reset_handler:0000000000000520 QKEY
       stm32eforth.s:670    .text.reset_handler:0000000000000520 QRX
       stm32eforth.s:690    .text.reset_handler:000000000000054c $d
       stm32eforth.s:691    .text.reset_handler:0000000000000550 _TXSTO
       stm32eforth.s:694    .text.reset_handler:0000000000000558 TXSTO
       stm32eforth.s:695    .text.reset_handler:0000000000000558 EMIT
       stm32eforth.s:696    .text.reset_handler:0000000000000558 TECHO
       stm32eforth.s:711    .text.reset_handler:0000000000000570 $d
       stm32eforth.s:712    .text.reset_handler:0000000000000574 _NOP
       stm32eforth.s:714    .text.reset_handler:0000000000000578 $t
ARM GAS  stm32eforth.s 			page 101


       stm32eforth.s:715    .text.reset_handler:0000000000000578 NOP
       stm32eforth.s:726    .text.reset_handler:000000000000057a DOLIT
       stm32eforth.s:736    .text.reset_handler:000000000000058c $d
       stm32eforth.s:737    .text.reset_handler:0000000000000590 _EXECU
       stm32eforth.s:739    .text.reset_handler:0000000000000598 $t
       stm32eforth.s:740    .text.reset_handler:0000000000000598 EXECU
       stm32eforth.s:754    .text.reset_handler:00000000000005a2 DONXT
       stm32eforth.s:761    .text.reset_handler:00000000000005b0 NEXT1
       stm32eforth.s:783    .text.reset_handler:00000000000005d2 QBRAN1
       stm32eforth.s:802    .text.reset_handler:00000000000005e2 $d
       stm32eforth.s:803    .text.reset_handler:00000000000005e6 _EXIT
       stm32eforth.s:806    .text.reset_handler:00000000000005ec EXIT
       stm32eforth.s:812    .text.reset_handler:00000000000005f0 $d
       stm32eforth.s:813    .text.reset_handler:00000000000005f4 _STORE
       stm32eforth.s:815    .text.reset_handler:00000000000005f6 $t
       stm32eforth.s:825    .text.reset_handler:0000000000000604 $d
       stm32eforth.s:826    .text.reset_handler:0000000000000608 _AT
       stm32eforth.s:828    .text.reset_handler:000000000000060a $t
       stm32eforth.s:836    .text.reset_handler:0000000000000610 $d
       stm32eforth.s:837    .text.reset_handler:0000000000000614 _CSTOR
       stm32eforth.s:840    .text.reset_handler:0000000000000618 CSTOR
       stm32eforth.s:849    .text.reset_handler:0000000000000624 $d
       stm32eforth.s:850    .text.reset_handler:0000000000000628 _CAT
       stm32eforth.s:853    .text.reset_handler:000000000000062c CAT
       stm32eforth.s:860    .text.reset_handler:0000000000000630 $d
       stm32eforth.s:861    .text.reset_handler:0000000000000634 _RFROM
       stm32eforth.s:864    .text.reset_handler:0000000000000638 RFROM
       stm32eforth.s:872    .text.reset_handler:0000000000000642 $d
       stm32eforth.s:873    .text.reset_handler:0000000000000646 _RAT
       stm32eforth.s:876    .text.reset_handler:000000000000064c RAT
       stm32eforth.s:884    .text.reset_handler:0000000000000654 $d
       stm32eforth.s:885    .text.reset_handler:0000000000000658 _TOR
       stm32eforth.s:888    .text.reset_handler:000000000000065c TOR
       stm32eforth.s:896    .text.reset_handler:0000000000000666 $d
       stm32eforth.s:897    .text.reset_handler:000000000000066a _SPAT
       stm32eforth.s:899    .text.reset_handler:000000000000066e $t
       stm32eforth.s:900    .text.reset_handler:0000000000000670 SPAT
       stm32eforth.s:908    .text.reset_handler:0000000000000678 $d
       stm32eforth.s:909    .text.reset_handler:000000000000067c _DROP
       stm32eforth.s:912    .text.reset_handler:0000000000000684 DROP
       stm32eforth.s:919    .text.reset_handler:000000000000068a $d
       stm32eforth.s:920    .text.reset_handler:000000000000068e _DUPP
       stm32eforth.s:922    .text.reset_handler:0000000000000692 $t
       stm32eforth.s:930    .text.reset_handler:000000000000069a $d
       stm32eforth.s:931    .text.reset_handler:000000000000069e _SWAP
       stm32eforth.s:943    .text.reset_handler:00000000000006ac $d
       stm32eforth.s:944    .text.reset_handler:00000000000006b0 _OVER
       stm32eforth.s:947    .text.reset_handler:00000000000006b8 OVER
       stm32eforth.s:955    .text.reset_handler:00000000000006c0 $d
       stm32eforth.s:956    .text.reset_handler:00000000000006c4 _ZLESS
       stm32eforth.s:959    .text.reset_handler:00000000000006c8 ZLESS
       stm32eforth.s:967    .text.reset_handler:00000000000006d2 $d
       stm32eforth.s:968    .text.reset_handler:00000000000006d6 _ANDD
       stm32eforth.s:970    .text.reset_handler:00000000000006da $t
       stm32eforth.s:971    .text.reset_handler:00000000000006dc ANDD
       stm32eforth.s:980    .text.reset_handler:00000000000006e8 $d
       stm32eforth.s:981    .text.reset_handler:00000000000006ec _ORR
ARM GAS  stm32eforth.s 			page 102


       stm32eforth.s:984    .text.reset_handler:00000000000006f0 ORR
       stm32eforth.s:993    .text.reset_handler:00000000000006fc $d
       stm32eforth.s:994    .text.reset_handler:0000000000000700 _XORR
       stm32eforth.s:996    .text.reset_handler:0000000000000704 $t
       stm32eforth.s:997    .text.reset_handler:0000000000000704 XORR
       stm32eforth.s:1006   .text.reset_handler:0000000000000710 $d
       stm32eforth.s:1007   .text.reset_handler:0000000000000714 _UPLUS
       stm32eforth.s:1009   .text.reset_handler:0000000000000718 $t
       stm32eforth.s:1010   .text.reset_handler:0000000000000718 UPLUS
       stm32eforth.s:1021   .text.reset_handler:0000000000000728 $d
       stm32eforth.s:1022   .text.reset_handler:000000000000072c _RSHIFT
       stm32eforth.s:1025   .text.reset_handler:0000000000000734 RSHIFT
       stm32eforth.s:1033   .text.reset_handler:000000000000073e $d
       stm32eforth.s:1034   .text.reset_handler:0000000000000742 _LSHIFT
       stm32eforth.s:1037   .text.reset_handler:000000000000074c LSHIFT
       stm32eforth.s:1045   .text.reset_handler:0000000000000756 $d
       stm32eforth.s:1046   .text.reset_handler:000000000000075a _PLUS
       stm32eforth.s:1048   .text.reset_handler:000000000000075c $t
       stm32eforth.s:1049   .text.reset_handler:000000000000075c PLUS
       stm32eforth.s:1057   .text.reset_handler:0000000000000764 $d
       stm32eforth.s:1058   .text.reset_handler:0000000000000768 _SUBB
       stm32eforth.s:1060   .text.reset_handler:000000000000076a $t
       stm32eforth.s:1061   .text.reset_handler:000000000000076c SUBB
       stm32eforth.s:1069   .text.reset_handler:0000000000000776 $d
       stm32eforth.s:1070   .text.reset_handler:000000000000077a _STAR
       stm32eforth.s:1072   .text.reset_handler:000000000000077c $t
       stm32eforth.s:1073   .text.reset_handler:000000000000077c STAR
       stm32eforth.s:1081   .text.reset_handler:0000000000000786 $d
       stm32eforth.s:1082   .text.reset_handler:000000000000078a _UMSTA
       stm32eforth.s:1084   .text.reset_handler:000000000000078e $t
       stm32eforth.s:1085   .text.reset_handler:0000000000000790 UMSTA
       stm32eforth.s:1095   .text.reset_handler:000000000000079c $d
       stm32eforth.s:1096   .text.reset_handler:00000000000007a0 _MSTAR
       stm32eforth.s:1099   .text.reset_handler:00000000000007a4 MSTAR
       stm32eforth.s:1109   .text.reset_handler:00000000000007b0 $d
       stm32eforth.s:1110   .text.reset_handler:00000000000007b4 _ONEP
       stm32eforth.s:1113   .text.reset_handler:00000000000007b8 ONEP
       stm32eforth.s:1120   .text.reset_handler:00000000000007be $d
       stm32eforth.s:1121   .text.reset_handler:00000000000007c2 _ONEM
       stm32eforth.s:1124   .text.reset_handler:00000000000007c8 ONEM
       stm32eforth.s:1131   .text.reset_handler:00000000000007ce $d
       stm32eforth.s:1132   .text.reset_handler:00000000000007d2 _TWOP
       stm32eforth.s:1135   .text.reset_handler:00000000000007d8 TWOP
       stm32eforth.s:1142   .text.reset_handler:00000000000007de $d
       stm32eforth.s:1143   .text.reset_handler:00000000000007e2 _TWOM
       stm32eforth.s:1146   .text.reset_handler:00000000000007e8 TWOM
       stm32eforth.s:1153   .text.reset_handler:00000000000007ee $d
       stm32eforth.s:1154   .text.reset_handler:00000000000007f2 _CELLP
       stm32eforth.s:1156   .text.reset_handler:00000000000007f8 $t
       stm32eforth.s:1157   .text.reset_handler:00000000000007f8 CELLP
       stm32eforth.s:1164   .text.reset_handler:00000000000007fe $d
       stm32eforth.s:1165   .text.reset_handler:0000000000000802 _CELLM
       stm32eforth.s:1167   .text.reset_handler:0000000000000808 $t
       stm32eforth.s:1168   .text.reset_handler:0000000000000808 CELLM
       stm32eforth.s:1175   .text.reset_handler:000000000000080e $d
       stm32eforth.s:1176   .text.reset_handler:0000000000000812 _BLANK
       stm32eforth.s:1179   .text.reset_handler:0000000000000818 BLANK
ARM GAS  stm32eforth.s 			page 103


       stm32eforth.s:1187   .text.reset_handler:0000000000000822 $d
       stm32eforth.s:1188   .text.reset_handler:0000000000000826 _CELLS
       stm32eforth.s:1190   .text.reset_handler:000000000000082c $t
       stm32eforth.s:1191   .text.reset_handler:000000000000082c CELLS
       stm32eforth.s:1198   .text.reset_handler:0000000000000832 $d
       stm32eforth.s:1199   .text.reset_handler:0000000000000836 _CELLSL
       stm32eforth.s:1201   .text.reset_handler:000000000000083c $t
       stm32eforth.s:1202   .text.reset_handler:000000000000083c CELLSL
       stm32eforth.s:1209   .text.reset_handler:0000000000000842 $d
       stm32eforth.s:1210   .text.reset_handler:0000000000000846 _TWOST
       stm32eforth.s:1213   .text.reset_handler:000000000000084c TWOST
       stm32eforth.s:1220   .text.reset_handler:0000000000000852 $d
       stm32eforth.s:1221   .text.reset_handler:0000000000000856 _TWOSL
       stm32eforth.s:1224   .text.reset_handler:000000000000085c TWOSL
       stm32eforth.s:1231   .text.reset_handler:0000000000000862 $d
       stm32eforth.s:1232   .text.reset_handler:0000000000000866 _QDUP
       stm32eforth.s:1235   .text.reset_handler:000000000000086c QDUP
       stm32eforth.s:1244   .text.reset_handler:0000000000000876 $d
       stm32eforth.s:1245   .text.reset_handler:000000000000087a _ROT
       stm32eforth.s:1247   .text.reset_handler:000000000000087e $t
       stm32eforth.s:1248   .text.reset_handler:0000000000000880 ROT
       stm32eforth.s:1258   .text.reset_handler:000000000000088a $d
       stm32eforth.s:1259   .text.reset_handler:000000000000088e _DDROP
       stm32eforth.s:1261   .text.reset_handler:0000000000000894 $t
       stm32eforth.s:1262   .text.reset_handler:0000000000000894 DDROP
       stm32eforth.s:1270   .text.reset_handler:000000000000089e $d
       stm32eforth.s:1271   .text.reset_handler:00000000000008a2 _DDUP
       stm32eforth.s:1274   .text.reset_handler:00000000000008a8 DDUP
       stm32eforth.s:1283   .text.reset_handler:00000000000008b4 $d
       stm32eforth.s:1284   .text.reset_handler:00000000000008b8 _DPLUS
       stm32eforth.s:1287   .text.reset_handler:00000000000008bc DPLUS
       stm32eforth.s:1299   .text.reset_handler:00000000000008d0 $d
       stm32eforth.s:1300   .text.reset_handler:00000000000008d4 _INVER
       stm32eforth.s:1302   .text.reset_handler:00000000000008d8 $t
       stm32eforth.s:1303   .text.reset_handler:00000000000008d8 INVER
       stm32eforth.s:1310   .text.reset_handler:00000000000008de $d
       stm32eforth.s:1311   .text.reset_handler:00000000000008e2 _NEGAT
       stm32eforth.s:1314   .text.reset_handler:00000000000008ec NEGAT
       stm32eforth.s:1321   .text.reset_handler:00000000000008f2 $d
       stm32eforth.s:1322   .text.reset_handler:00000000000008f6 _ABSS
       stm32eforth.s:1324   .text.reset_handler:00000000000008fa $t
       stm32eforth.s:1334   .text.reset_handler:0000000000000906 $d
       stm32eforth.s:1335   .text.reset_handler:000000000000090a _ZEQUAL
       stm32eforth.s:1338   .text.reset_handler:0000000000000910 ZEQUAL
       stm32eforth.s:1348   .text.reset_handler:000000000000091e $d
       stm32eforth.s:1349   .text.reset_handler:0000000000000922 _EQUAL
       stm32eforth.s:1351   .text.reset_handler:0000000000000924 $t
       stm32eforth.s:1352   .text.reset_handler:0000000000000924 EQUAL
       stm32eforth.s:1363   .text.reset_handler:0000000000000934 $d
       stm32eforth.s:1364   .text.reset_handler:0000000000000938 _ULESS
       stm32eforth.s:1367   .text.reset_handler:000000000000093c ULESS
       stm32eforth.s:1378   .text.reset_handler:000000000000094c $d
       stm32eforth.s:1379   .text.reset_handler:0000000000000950 _LESS
       stm32eforth.s:1381   .text.reset_handler:0000000000000952 $t
       stm32eforth.s:1382   .text.reset_handler:0000000000000954 LESS
       stm32eforth.s:1393   .text.reset_handler:0000000000000964 $d
       stm32eforth.s:1394   .text.reset_handler:0000000000000968 _GREAT
ARM GAS  stm32eforth.s 			page 104


       stm32eforth.s:1396   .text.reset_handler:000000000000096a $t
       stm32eforth.s:1397   .text.reset_handler:000000000000096c GREAT
       stm32eforth.s:1408   .text.reset_handler:000000000000097c $d
       stm32eforth.s:1409   .text.reset_handler:0000000000000980 _MAX
       stm32eforth.s:1411   .text.reset_handler:0000000000000984 $t
       stm32eforth.s:1412   .text.reset_handler:0000000000000984 MAX
       stm32eforth.s:1422   .text.reset_handler:0000000000000990 $d
       stm32eforth.s:1423   .text.reset_handler:0000000000000994 _MIN
       stm32eforth.s:1425   .text.reset_handler:0000000000000998 $t
       stm32eforth.s:1426   .text.reset_handler:0000000000000998 MIN
       stm32eforth.s:1436   .text.reset_handler:00000000000009a4 $d
       stm32eforth.s:1437   .text.reset_handler:00000000000009a8 _PSTOR
       stm32eforth.s:1440   .text.reset_handler:00000000000009ac PSTOR
       stm32eforth.s:1451   .text.reset_handler:00000000000009bc $d
       stm32eforth.s:1452   .text.reset_handler:00000000000009c0 _DSTOR
       stm32eforth.s:1455   .text.reset_handler:00000000000009c4 DSTOR
       stm32eforth.s:1466   .text.reset_handler:00000000000009d8 $d
       stm32eforth.s:1467   .text.reset_handler:00000000000009dc _DAT
       stm32eforth.s:1470   .text.reset_handler:00000000000009e0 DAT
       stm32eforth.s:1479   .text.reset_handler:00000000000009ea $d
       stm32eforth.s:1480   .text.reset_handler:00000000000009ee _COUNT
       stm32eforth.s:1482   .text.reset_handler:00000000000009f4 $t
       stm32eforth.s:1483   .text.reset_handler:00000000000009f4 COUNT
       stm32eforth.s:1492   .text.reset_handler:0000000000000a00 $d
       stm32eforth.s:1493   .text.reset_handler:0000000000000a04 _DNEGA
       stm32eforth.s:1495   .text.reset_handler:0000000000000a0c $t
       stm32eforth.s:1496   .text.reset_handler:0000000000000a0c DNEGA
       stm32eforth.s:1514   .text.reset_handler:0000000000000a1c DOVAR
       stm32eforth.s:1526   .text.reset_handler:0000000000000a28 DOCON
       stm32eforth.s:1538   .text.reset_handler:0000000000000a34 $d
       stm32eforth.s:1539   .text.reset_handler:0000000000000a38 _SEED
       stm32eforth.s:1549   .text.reset_handler:0000000000000a4a $d
       stm32eforth.s:1550   .text.reset_handler:0000000000000a4e _MSEC
       stm32eforth.s:1553   .text.reset_handler:0000000000000a54 MSEC
       stm32eforth.s:1560   .text.reset_handler:0000000000000a5e $d
       stm32eforth.s:1561   .text.reset_handler:0000000000000a62 _TIMER
       stm32eforth.s:1563   .text.reset_handler:0000000000000a68 $t
       stm32eforth.s:1572   .text.reset_handler:0000000000000a72 $d
       stm32eforth.s:1573   .text.reset_handler:0000000000000a76 _TORAM
       stm32eforth.s:1576   .text.reset_handler:0000000000000a7c TORAM
       stm32eforth.s:1584   .text.reset_handler:0000000000000a86 $d
       stm32eforth.s:1585   .text.reset_handler:0000000000000a8a _TBOOT
       stm32eforth.s:1587   .text.reset_handler:0000000000000a90 $t
       stm32eforth.s:1588   .text.reset_handler:0000000000000a90 TBOOT
       stm32eforth.s:1596   .text.reset_handler:0000000000000a9a $d
       stm32eforth.s:1597   .text.reset_handler:0000000000000a9e _BASE
       stm32eforth.s:1600   .text.reset_handler:0000000000000aa4 BASE
       stm32eforth.s:1612   .text.reset_handler:0000000000000aae TEMP
       stm32eforth.s:1620   .text.reset_handler:0000000000000ab8 $d
       stm32eforth.s:1621   .text.reset_handler:0000000000000abc _SPAN
       stm32eforth.s:1624   .text.reset_handler:0000000000000ac4 SPAN
       stm32eforth.s:1632   .text.reset_handler:0000000000000ace $d
       stm32eforth.s:1633   .text.reset_handler:0000000000000ad2 _INN
       stm32eforth.s:1635   .text.reset_handler:0000000000000ad6 $t
       stm32eforth.s:1636   .text.reset_handler:0000000000000ad8 INN
       stm32eforth.s:1644   .text.reset_handler:0000000000000ae2 $d
       stm32eforth.s:1645   .text.reset_handler:0000000000000ae6 _NTIB
ARM GAS  stm32eforth.s 			page 105


       stm32eforth.s:1648   .text.reset_handler:0000000000000aec NTIB
       stm32eforth.s:1656   .text.reset_handler:0000000000000af6 $d
       stm32eforth.s:1657   .text.reset_handler:0000000000000afa _TEVAL
       stm32eforth.s:1659   .text.reset_handler:0000000000000b00 $t
       stm32eforth.s:1660   .text.reset_handler:0000000000000b00 TEVAL
       stm32eforth.s:1668   .text.reset_handler:0000000000000b0a $d
       stm32eforth.s:1669   .text.reset_handler:0000000000000b0e _HLD
       stm32eforth.s:1671   .text.reset_handler:0000000000000b12 $t
       stm32eforth.s:1672   .text.reset_handler:0000000000000b14 HLD
       stm32eforth.s:1680   .text.reset_handler:0000000000000b1e $d
       stm32eforth.s:1681   .text.reset_handler:0000000000000b22 _CNTXT
       stm32eforth.s:1683   .text.reset_handler:0000000000000b2a $t
       stm32eforth.s:1684   .text.reset_handler:0000000000000b2c CNTXT
       stm32eforth.s:1685   .text.reset_handler:0000000000000b2c CRRNT
       stm32eforth.s:1693   .text.reset_handler:0000000000000b36 $d
       stm32eforth.s:1694   .text.reset_handler:0000000000000b3a _CP
       stm32eforth.s:1697   .text.reset_handler:0000000000000b40 CPP
       stm32eforth.s:1704   .text.reset_handler:0000000000000b4a $d
       stm32eforth.s:1705   .text.reset_handler:0000000000000b4e _FCP
       stm32eforth.s:1707   .text.reset_handler:0000000000000b52 $t
       stm32eforth.s:1708   .text.reset_handler:0000000000000b54 FCP
       stm32eforth.s:1716   .text.reset_handler:0000000000000b5e $d
       stm32eforth.s:1717   .text.reset_handler:0000000000000b62 _LAST
       stm32eforth.s:1720   .text.reset_handler:0000000000000b68 LAST
       stm32eforth.s:1731   .text.reset_handler:0000000000000b72 $d
       stm32eforth.s:1732   .text.reset_handler:0000000000000b76 _USER_BGN
       stm32eforth.s:1735   .text.reset_handler:0000000000000b84 USER_BEGIN
       stm32eforth.s:1739   .text.reset_handler:0000000000000b8c USR_BGN_ADR
       stm32eforth.s:1740   .text.reset_handler:0000000000000b8c $d
       stm32eforth.s:1745   .text.reset_handler:0000000000000b94 _USER_END
       stm32eforth.s:1748   .text.reset_handler:0000000000000ba0 USER_END
       stm32eforth.s:1756   .text.reset_handler:0000000000000bae $d
       stm32eforth.s:1757   .text.reset_handler:0000000000000bb2 _IMG_ADR
       stm32eforth.s:1759   .text.reset_handler:0000000000000bba $t
       stm32eforth.s:1760   .text.reset_handler:0000000000000bbc IMG_ADR
       stm32eforth.s:1764   .text.reset_handler:0000000000000bc4 USR_IMG_ADR
       stm32eforth.s:1765   .text.reset_handler:0000000000000bc4 $d
       stm32eforth.s:5086   .text.reset_handler:0000000000003000 USER_SPACE
       stm32eforth.s:1769   .text.reset_handler:0000000000000bcc _IMG_SIGN
       stm32eforth.s:1772   .text.reset_handler:0000000000000bd8 IMG_SIGN
       stm32eforth.s:1784   .text.reset_handler:0000000000000be2 $d
       stm32eforth.s:1785   .text.reset_handler:0000000000000be6 _WITHI
       stm32eforth.s:1788   .text.reset_handler:0000000000000bf0 WITHI
       stm32eforth.s:1803   .text.reset_handler:0000000000000c10 $d
       stm32eforth.s:1804   .text.reset_handler:0000000000000c14 _UMMOD
       stm32eforth.s:1807   .text.reset_handler:0000000000000c1c UMMOD
       stm32eforth.s:1811   .text.reset_handler:0000000000000c26 UMMOD0
       stm32eforth.s:1818   .text.reset_handler:0000000000000c36 UMMOD1
       stm32eforth.s:1824   .text.reset_handler:0000000000000c40 UMMOD2
       stm32eforth.s:1834   .text.reset_handler:0000000000000c4a $d
       stm32eforth.s:1835   .text.reset_handler:0000000000000c4e _MSMOD
       stm32eforth.s:1837   .text.reset_handler:0000000000000c54 $t
       stm32eforth.s:1838   .text.reset_handler:0000000000000c54 MSMOD
       stm32eforth.s:1845   .text.reset_handler:0000000000000c6c $d
       stm32eforth.s:1850   .text.reset_handler:0000000000000c80 MMOD1
       stm32eforth.s:1846   .text.reset_handler:0000000000000c70 $t
       stm32eforth.s:1855   .text.reset_handler:0000000000000c90 $d
ARM GAS  stm32eforth.s 			page 106


       stm32eforth.s:1858   .text.reset_handler:0000000000000c9c MMOD2
       stm32eforth.s:1856   .text.reset_handler:0000000000000c94 $t
       stm32eforth.s:1863   .text.reset_handler:0000000000000cac $d
       stm32eforth.s:1867   .text.reset_handler:0000000000000cbc MMOD3
       stm32eforth.s:1864   .text.reset_handler:0000000000000cb0 $t
       stm32eforth.s:1873   .text.reset_handler:0000000000000cc0 $d
       stm32eforth.s:1874   .text.reset_handler:0000000000000cc4 _SLMOD
       stm32eforth.s:1877   .text.reset_handler:0000000000000ccc SLMOD
       stm32eforth.s:1888   .text.reset_handler:0000000000000ce4 $d
       stm32eforth.s:1889   .text.reset_handler:0000000000000ce8 _MODD
       stm32eforth.s:1891   .text.reset_handler:0000000000000cec $t
       stm32eforth.s:1901   .text.reset_handler:0000000000000cfc $d
       stm32eforth.s:1902   .text.reset_handler:0000000000000d00 _SLASH
       stm32eforth.s:1904   .text.reset_handler:0000000000000d02 $t
       stm32eforth.s:1905   .text.reset_handler:0000000000000d04 SLASH
       stm32eforth.s:1915   .text.reset_handler:0000000000000d18 $d
       stm32eforth.s:1916   .text.reset_handler:0000000000000d1c _SSMOD
       stm32eforth.s:1918   .text.reset_handler:0000000000000d22 $t
       stm32eforth.s:1919   .text.reset_handler:0000000000000d24 SSMOD
       stm32eforth.s:1930   .text.reset_handler:0000000000000d3c $d
       stm32eforth.s:1931   .text.reset_handler:0000000000000d40 _STASL
       stm32eforth.s:1934   .text.reset_handler:0000000000000d44 STASL
       stm32eforth.s:1947   .text.reset_handler:0000000000000d58 $d
       stm32eforth.s:1948   .text.reset_handler:0000000000000d5c _ALGND
       stm32eforth.s:1950   .text.reset_handler:0000000000000d64 $t
       stm32eforth.s:1951   .text.reset_handler:0000000000000d64 ALGND
       stm32eforth.s:1960   .text.reset_handler:0000000000000d72 $d
       stm32eforth.s:1961   .text.reset_handler:0000000000000d76 _TCHAR
       stm32eforth.s:1963   .text.reset_handler:0000000000000d7c $t
       stm32eforth.s:1964   .text.reset_handler:0000000000000d7c TCHAR
       stm32eforth.s:1967   .text.reset_handler:0000000000000d84 $d
       stm32eforth.s:1968   .text.reset_handler:0000000000000d88 $t
       stm32eforth.s:1972   .text.reset_handler:0000000000000d98 $d
       stm32eforth.s:1973   .text.reset_handler:0000000000000d9c $t
       stm32eforth.s:1976   .text.reset_handler:0000000000000da8 $d
       stm32eforth.s:1980   .text.reset_handler:0000000000000db8 TCHA1
       stm32eforth.s:1977   .text.reset_handler:0000000000000dac $t
       stm32eforth.s:1979   .text.reset_handler:0000000000000db4 $d
       stm32eforth.s:1981   .text.reset_handler:0000000000000db8 $t
       stm32eforth.s:1986   .text.reset_handler:0000000000000dbc $d
       stm32eforth.s:1987   .text.reset_handler:0000000000000dc0 _DEPTH
       stm32eforth.s:1989   .text.reset_handler:0000000000000dc6 $t
       stm32eforth.s:1990   .text.reset_handler:0000000000000dc8 DEPTH
       stm32eforth.s:2000   .text.reset_handler:0000000000000dda $d
       stm32eforth.s:2001   .text.reset_handler:0000000000000dde _PICK
       stm32eforth.s:2004   .text.reset_handler:0000000000000de4 PICK
       stm32eforth.s:2019   .text.reset_handler:0000000000000e00 $d
       stm32eforth.s:2020   .text.reset_handler:0000000000000e04 _HERE
       stm32eforth.s:2023   .text.reset_handler:0000000000000e0c HERE
       stm32eforth.s:2032   .text.reset_handler:0000000000000e1c $d
       stm32eforth.s:2033   .text.reset_handler:0000000000000e20 _PAD
       stm32eforth.s:2035   .text.reset_handler:0000000000000e24 $t
       stm32eforth.s:2036   .text.reset_handler:0000000000000e24 PAD
       stm32eforth.s:2045   .text.reset_handler:0000000000000e34 $d
       stm32eforth.s:2046   .text.reset_handler:0000000000000e38 _TIB
       stm32eforth.s:2048   .text.reset_handler:0000000000000e3c $t
       stm32eforth.s:2049   .text.reset_handler:0000000000000e3c TIB
ARM GAS  stm32eforth.s 			page 107


       stm32eforth.s:2057   .text.reset_handler:0000000000000e44 $d
       stm32eforth.s:2058   .text.reset_handler:0000000000000e48 _ATEXE
       stm32eforth.s:2061   .text.reset_handler:0000000000000e54 ATEXE
       stm32eforth.s:2073   .text.reset_handler:0000000000000e66 $d
       stm32eforth.s:2074   .text.reset_handler:0000000000000e6a _CMOVE
       stm32eforth.s:2076   .text.reset_handler:0000000000000e70 $t
       stm32eforth.s:2077   .text.reset_handler:0000000000000e70 CMOVE
       stm32eforth.s:2084   .text.reset_handler:0000000000000e82 CMOV1
       stm32eforth.s:2081   .text.reset_handler:0000000000000e7a CMOV0
       stm32eforth.s:2089   .text.reset_handler:0000000000000e8c CMOV2
       stm32eforth.s:2096   .text.reset_handler:0000000000000e92 $d
       stm32eforth.s:2097   .text.reset_handler:0000000000000e96 _MOVE
       stm32eforth.s:2100   .text.reset_handler:0000000000000e9c MOVE
       stm32eforth.s:2108   .text.reset_handler:0000000000000eb2 MOVE1
       stm32eforth.s:2105   .text.reset_handler:0000000000000eaa MOVE0
       stm32eforth.s:2113   .text.reset_handler:0000000000000ebc MOVE2
       stm32eforth.s:2120   .text.reset_handler:0000000000000ec2 $d
       stm32eforth.s:2121   .text.reset_handler:0000000000000ec6 _FILL
       stm32eforth.s:2124   .text.reset_handler:0000000000000ecc FILL
       stm32eforth.s:2127   .text.reset_handler:0000000000000ed4 FILL0
       stm32eforth.s:2130   .text.reset_handler:0000000000000ed8 FILL1
       stm32eforth.s:2136   .text.reset_handler:0000000000000ee6 FILL2
       stm32eforth.s:2143   .text.reset_handler:0000000000000eec $d
       stm32eforth.s:2144   .text.reset_handler:0000000000000ef0 _PACKS
       stm32eforth.s:2147   .text.reset_handler:0000000000000ef8 PACKS
       stm32eforth.s:2156   .text.reset_handler:0000000000000f18 $d
       stm32eforth.s:2157   .text.reset_handler:0000000000000f1c $t
       stm32eforth.s:2159   .text.reset_handler:0000000000000f24 $d
       stm32eforth.s:2160   .text.reset_handler:0000000000000f28 $t
       stm32eforth.s:2177   .text.reset_handler:0000000000000f50 $d
       stm32eforth.s:2178   .text.reset_handler:0000000000000f54 _DIGIT
       stm32eforth.s:2180   .text.reset_handler:0000000000000f5a $t
       stm32eforth.s:2181   .text.reset_handler:0000000000000f5c DIGIT
       stm32eforth.s:2184   .text.reset_handler:0000000000000f64 $d
       stm32eforth.s:2185   .text.reset_handler:0000000000000f68 $t
       stm32eforth.s:2195   .text.reset_handler:0000000000000f80 $d
       stm32eforth.s:2196   .text.reset_handler:0000000000000f84 _EXTRC
       stm32eforth.s:2198   .text.reset_handler:0000000000000f8c $t
       stm32eforth.s:2199   .text.reset_handler:0000000000000f8c EXTRC
       stm32eforth.s:2202   .text.reset_handler:0000000000000f94 $d
       stm32eforth.s:2203   .text.reset_handler:0000000000000f98 $t
       stm32eforth.s:2212   .text.reset_handler:0000000000000fac $d
       stm32eforth.s:2213   .text.reset_handler:0000000000000fb0 _BDIGS
       stm32eforth.s:2216   .text.reset_handler:0000000000000fb4 BDIGS
       stm32eforth.s:2226   .text.reset_handler:0000000000000fc8 $d
       stm32eforth.s:2227   .text.reset_handler:0000000000000fcc _HOLD
       stm32eforth.s:2230   .text.reset_handler:0000000000000fd4 HOLD
       stm32eforth.s:2244   .text.reset_handler:0000000000000ff8 $d
       stm32eforth.s:2245   .text.reset_handler:0000000000000ffc _DIG
       stm32eforth.s:2247   .text.reset_handler:0000000000000ffe $t
       stm32eforth.s:2248   .text.reset_handler:0000000000001000 DIG
       stm32eforth.s:2259   .text.reset_handler:0000000000001018 $d
       stm32eforth.s:2260   .text.reset_handler:000000000000101c _DIGS
       stm32eforth.s:2263   .text.reset_handler:0000000000001020 DIGS
       stm32eforth.s:2265   .text.reset_handler:0000000000001024 DIGS1
       stm32eforth.s:2269   .text.reset_handler:0000000000001030 $d
       stm32eforth.s:2271   .text.reset_handler:0000000000001036 DIGS2
ARM GAS  stm32eforth.s 			page 108


       stm32eforth.s:2270   .text.reset_handler:0000000000001034 $t
       stm32eforth.s:2277   .text.reset_handler:000000000000103a $d
       stm32eforth.s:2278   .text.reset_handler:000000000000103e _SIGN
       stm32eforth.s:2281   .text.reset_handler:0000000000001044 SIGN
       stm32eforth.s:2285   .text.reset_handler:0000000000001050 $d
       stm32eforth.s:2289   .text.reset_handler:0000000000001060 SIGN1
       stm32eforth.s:2286   .text.reset_handler:0000000000001054 $t
       stm32eforth.s:2287   .text.reset_handler:0000000000001058 $d
       stm32eforth.s:2288   .text.reset_handler:000000000000105c $t
       stm32eforth.s:2295   .text.reset_handler:0000000000001064 $d
       stm32eforth.s:2296   .text.reset_handler:0000000000001068 _EDIGS
       stm32eforth.s:2299   .text.reset_handler:000000000000106c EDIGS
       stm32eforth.s:2316   .text.reset_handler:000000000000108c STRR
       stm32eforth.s:2331   .text.reset_handler:00000000000010b4 $d
       stm32eforth.s:2332   .text.reset_handler:00000000000010b8 _HEX
       stm32eforth.s:2334   .text.reset_handler:00000000000010bc $t
       stm32eforth.s:2335   .text.reset_handler:00000000000010bc HEX
       stm32eforth.s:2338   .text.reset_handler:00000000000010c4 $d
       stm32eforth.s:2339   .text.reset_handler:00000000000010c8 $t
       stm32eforth.s:2346   .text.reset_handler:00000000000010d4 $d
       stm32eforth.s:2347   .text.reset_handler:00000000000010d8 _DECIM
       stm32eforth.s:2349   .text.reset_handler:00000000000010e0 $t
       stm32eforth.s:2350   .text.reset_handler:00000000000010e0 DECIM
       stm32eforth.s:2353   .text.reset_handler:00000000000010e8 $d
       stm32eforth.s:2354   .text.reset_handler:00000000000010ec $t
       stm32eforth.s:2364   .text.reset_handler:00000000000010f8 $d
       stm32eforth.s:2365   .text.reset_handler:00000000000010fc _DIGTQ
       stm32eforth.s:2368   .text.reset_handler:0000000000001104 DIGTQ
       stm32eforth.s:2372   .text.reset_handler:0000000000001110 $d
       stm32eforth.s:2373   .text.reset_handler:0000000000001114 $t
       stm32eforth.s:2375   .text.reset_handler:000000000000111c $d
       stm32eforth.s:2376   .text.reset_handler:0000000000001120 $t
       stm32eforth.s:2379   .text.reset_handler:000000000000112c $d
       stm32eforth.s:2388   .text.reset_handler:0000000000001150 DGTQ1
       stm32eforth.s:2380   .text.reset_handler:0000000000001130 $t
       stm32eforth.s:2381   .text.reset_handler:0000000000001134 $d
       stm32eforth.s:2382   .text.reset_handler:0000000000001138 $t
       stm32eforth.s:2385   .text.reset_handler:0000000000001144 $d
       stm32eforth.s:2386   .text.reset_handler:0000000000001148 $t
       stm32eforth.s:2397   .text.reset_handler:0000000000001160 $d
       stm32eforth.s:2398   .text.reset_handler:0000000000001164 _NUMBQ
       stm32eforth.s:2400   .text.reset_handler:000000000000116c $t
       stm32eforth.s:2401   .text.reset_handler:000000000000116c NUMBQ
       stm32eforth.s:2407   .text.reset_handler:0000000000001180 $d
       stm32eforth.s:2408   .text.reset_handler:0000000000001184 $t
       stm32eforth.s:2413   .text.reset_handler:0000000000001198 $d
       stm32eforth.s:2414   .text.reset_handler:000000000000119c $t
       stm32eforth.s:2416   .text.reset_handler:00000000000011a4 $d
       stm32eforth.s:2422   .text.reset_handler:00000000000011bc NUMQ1
       stm32eforth.s:2417   .text.reset_handler:00000000000011a8 $t
       stm32eforth.s:2426   .text.reset_handler:00000000000011c8 $d
       stm32eforth.s:2427   .text.reset_handler:00000000000011cc $t
       stm32eforth.s:2437   .text.reset_handler:00000000000011f4 $d
       stm32eforth.s:2476   .text.reset_handler:0000000000001280 NUMQ6
       stm32eforth.s:2438   .text.reset_handler:00000000000011f8 $t
       stm32eforth.s:2440   .text.reset_handler:0000000000001200 NUMQ2
       stm32eforth.s:2448   .text.reset_handler:000000000000121c $d
ARM GAS  stm32eforth.s 			page 109


       stm32eforth.s:2467   .text.reset_handler:0000000000001264 NUMQ4
       stm32eforth.s:2449   .text.reset_handler:0000000000001220 $t
       stm32eforth.s:2457   .text.reset_handler:0000000000001240 $d
       stm32eforth.s:2458   .text.reset_handler:0000000000001244 $t
       stm32eforth.s:2462   .text.reset_handler:0000000000001254 $d
       stm32eforth.s:2464   .text.reset_handler:000000000000125c NUMQ3
       stm32eforth.s:2463   .text.reset_handler:0000000000001258 $t
       stm32eforth.s:2474   .text.reset_handler:000000000000127c NUMQ5
       stm32eforth.s:2473   .text.reset_handler:0000000000001278 $d
       stm32eforth.s:2475   .text.reset_handler:000000000000127c $t
       stm32eforth.s:2490   .text.reset_handler:0000000000001298 $d
       stm32eforth.s:2491   .text.reset_handler:000000000000129c _KEY
       stm32eforth.s:2493   .text.reset_handler:00000000000012a0 $t
       stm32eforth.s:2494   .text.reset_handler:00000000000012a0 KEY
       stm32eforth.s:2496   .text.reset_handler:00000000000012a4 KEY1
       stm32eforth.s:2499   .text.reset_handler:00000000000012ac $d
       stm32eforth.s:2500   .text.reset_handler:00000000000012b0 $t
       stm32eforth.s:2505   .text.reset_handler:00000000000012b4 $d
       stm32eforth.s:2506   .text.reset_handler:00000000000012b8 _SPACE
       stm32eforth.s:2508   .text.reset_handler:00000000000012be $t
       stm32eforth.s:2509   .text.reset_handler:00000000000012c0 SPACE
       stm32eforth.s:2518   .text.reset_handler:00000000000012d0 $d
       stm32eforth.s:2519   .text.reset_handler:00000000000012d4 _SPACS
       stm32eforth.s:2522   .text.reset_handler:00000000000012dc SPACS
       stm32eforth.s:2525   .text.reset_handler:00000000000012e4 $d
       stm32eforth.s:2526   .text.reset_handler:00000000000012e8 $t
       stm32eforth.s:2531   .text.reset_handler:00000000000012f8 CHAR2
       stm32eforth.s:2529   .text.reset_handler:00000000000012f4 CHAR1
       stm32eforth.s:2533   .text.reset_handler:00000000000012fc $d
       stm32eforth.s:2534   .text.reset_handler:0000000000001300 $t
       stm32eforth.s:2539   .text.reset_handler:0000000000001304 $d
       stm32eforth.s:2540   .text.reset_handler:0000000000001308 _TYPEE
       stm32eforth.s:2543   .text.reset_handler:0000000000001310 TYPEE
       stm32eforth.s:2551   .text.reset_handler:0000000000001328 TYPE2
       stm32eforth.s:2547   .text.reset_handler:000000000000131c TYPE1
       stm32eforth.s:2553   .text.reset_handler:000000000000132c $d
       stm32eforth.s:2554   .text.reset_handler:0000000000001330 $t
       stm32eforth.s:2560   .text.reset_handler:0000000000001338 $d
       stm32eforth.s:2561   .text.reset_handler:000000000000133c _CR
       stm32eforth.s:2564   .text.reset_handler:0000000000001340 CR
       stm32eforth.s:2567   .text.reset_handler:0000000000001348 $d
       stm32eforth.s:2568   .text.reset_handler:000000000000134c $t
       stm32eforth.s:2570   .text.reset_handler:0000000000001354 $d
       stm32eforth.s:2571   .text.reset_handler:0000000000001358 $t
       stm32eforth.s:2582   .text.reset_handler:0000000000001360 DOSTR
       stm32eforth.s:2605   .text.reset_handler:0000000000001394 STRQP
       stm32eforth.s:2617   .text.reset_handler:00000000000013a0 DOTST
       stm32eforth.s:2630   .text.reset_handler:00000000000013b0 DOTQP
       stm32eforth.s:2639   .text.reset_handler:00000000000013c0 $d
       stm32eforth.s:2640   .text.reset_handler:00000000000013c4 _DOTR
       stm32eforth.s:2643   .text.reset_handler:00000000000013c8 DOTR
       stm32eforth.s:2657   .text.reset_handler:00000000000013ec $d
       stm32eforth.s:2658   .text.reset_handler:00000000000013f0 _UDOTR
       stm32eforth.s:2660   .text.reset_handler:00000000000013f4 $t
       stm32eforth.s:2661   .text.reset_handler:00000000000013f4 UDOTR
       stm32eforth.s:2677   .text.reset_handler:0000000000001420 $d
       stm32eforth.s:2678   .text.reset_handler:0000000000001424 _UDOT
ARM GAS  stm32eforth.s 			page 110


       stm32eforth.s:2681   .text.reset_handler:0000000000001428 UDOT
       stm32eforth.s:2693   .text.reset_handler:0000000000001444 $d
       stm32eforth.s:2694   .text.reset_handler:0000000000001448 _DOT
       stm32eforth.s:2696   .text.reset_handler:000000000000144a $t
       stm32eforth.s:2697   .text.reset_handler:000000000000144c DOT
       stm32eforth.s:2702   .text.reset_handler:000000000000145c $d
       stm32eforth.s:2703   .text.reset_handler:0000000000001460 $t
       stm32eforth.s:2705   .text.reset_handler:0000000000001468 $d
       stm32eforth.s:2708   .text.reset_handler:0000000000001474 DOT1
       stm32eforth.s:2706   .text.reset_handler:000000000000146c $t
       stm32eforth.s:2717   .text.reset_handler:0000000000001484 $d
       stm32eforth.s:2718   .text.reset_handler:0000000000001488 _QUEST
       stm32eforth.s:2720   .text.reset_handler:000000000000148a $t
       stm32eforth.s:2721   .text.reset_handler:000000000000148c QUEST
       stm32eforth.s:2737   .text.reset_handler:000000000000149c PARS
       stm32eforth.s:2745   .text.reset_handler:00000000000014b8 $d
       stm32eforth.s:2813   .text.reset_handler:00000000000015aa PARS8
       stm32eforth.s:2746   .text.reset_handler:00000000000014bc $t
       stm32eforth.s:2752   .text.reset_handler:00000000000014d4 $d
       stm32eforth.s:2774   .text.reset_handler:0000000000001524 PARS3
       stm32eforth.s:2753   .text.reset_handler:00000000000014d8 $t
       stm32eforth.s:2754   .text.reset_handler:00000000000014dc PARS1
       stm32eforth.s:2762   .text.reset_handler:00000000000014f8 $d
       stm32eforth.s:2772   .text.reset_handler:0000000000001520 PARS2
       stm32eforth.s:2763   .text.reset_handler:00000000000014fc $t
       stm32eforth.s:2765   .text.reset_handler:0000000000001504 $d
       stm32eforth.s:2766   .text.reset_handler:0000000000001508 $t
       stm32eforth.s:2769   .text.reset_handler:0000000000001514 $d
       stm32eforth.s:2770   .text.reset_handler:0000000000001518 $t
       stm32eforth.s:2778   .text.reset_handler:0000000000001530 PARS4
       stm32eforth.s:2789   .text.reset_handler:0000000000001558 $d
       stm32eforth.s:2791   .text.reset_handler:0000000000001560 PARS5
       stm32eforth.s:2790   .text.reset_handler:000000000000155c $t
       stm32eforth.s:2793   .text.reset_handler:0000000000001564 $d
       stm32eforth.s:2800   .text.reset_handler:000000000000157e PARS6
       stm32eforth.s:2794   .text.reset_handler:0000000000001568 $t
       stm32eforth.s:2796   .text.reset_handler:0000000000001570 $d
       stm32eforth.s:2797   .text.reset_handler:0000000000001574 $t
       stm32eforth.s:2806   .text.reset_handler:0000000000001592 PARS7
       stm32eforth.s:2822   .text.reset_handler:00000000000015ba $d
       stm32eforth.s:2823   .text.reset_handler:00000000000015be _PARSE
       stm32eforth.s:2825   .text.reset_handler:00000000000015c4 $t
       stm32eforth.s:2826   .text.reset_handler:00000000000015c4 PARSE
       stm32eforth.s:2847   .text.reset_handler:0000000000001604 $d
       stm32eforth.s:2848   .text.reset_handler:0000000000001608 _DOTPR
       stm32eforth.s:2851   .text.reset_handler:000000000000160c DOTPR
       stm32eforth.s:2854   .text.reset_handler:0000000000001614 $d
       stm32eforth.s:2855   .text.reset_handler:0000000000001618 $t
       stm32eforth.s:2862   .text.reset_handler:0000000000001624 $d
       stm32eforth.s:2863   .text.reset_handler:0000000000001628 _PAREN
       stm32eforth.s:2865   .text.reset_handler:000000000000162a $t
       stm32eforth.s:2866   .text.reset_handler:000000000000162c PAREN
       stm32eforth.s:2869   .text.reset_handler:0000000000001634 $d
       stm32eforth.s:2870   .text.reset_handler:0000000000001638 $t
       stm32eforth.s:2877   .text.reset_handler:0000000000001644 $d
       stm32eforth.s:2878   .text.reset_handler:0000000000001648 _BKSLA
       stm32eforth.s:2880   .text.reset_handler:000000000000164a $t
ARM GAS  stm32eforth.s 			page 111


       stm32eforth.s:2881   .text.reset_handler:000000000000164c BKSLA
       stm32eforth.s:2892   .text.reset_handler:0000000000001664 $d
       stm32eforth.s:2893   .text.reset_handler:0000000000001668 _CHAR
       stm32eforth.s:2896   .text.reset_handler:0000000000001670 CHAR
       stm32eforth.s:2907   .text.reset_handler:0000000000001688 $d
       stm32eforth.s:2908   .text.reset_handler:000000000000168c _WORDD
       stm32eforth.s:2911   .text.reset_handler:0000000000001694 WORDD
       stm32eforth.s:2922   .text.reset_handler:00000000000016ac $d
       stm32eforth.s:2923   .text.reset_handler:00000000000016b0 _TOKEN
       stm32eforth.s:2925   .text.reset_handler:00000000000016b6 $t
       stm32eforth.s:2926   .text.reset_handler:00000000000016b8 TOKEN
       stm32eforth.s:2938   .text.reset_handler:00000000000016c8 $d
       stm32eforth.s:2939   .text.reset_handler:00000000000016cc _NAMET
       stm32eforth.s:2941   .text.reset_handler:00000000000016d2 $t
       stm32eforth.s:2942   .text.reset_handler:00000000000016d4 NAMET
       stm32eforth.s:2946   .text.reset_handler:00000000000016e0 $d
       stm32eforth.s:2947   .text.reset_handler:00000000000016e4 $t
       stm32eforth.s:2960   .text.reset_handler:00000000000016f4 $d
       stm32eforth.s:2961   .text.reset_handler:00000000000016f8 _SAMEQ
       stm32eforth.s:2963   .text.reset_handler:00000000000016fe $t
       stm32eforth.s:2964   .text.reset_handler:0000000000001700 SAMEQ
       stm32eforth.s:2984   .text.reset_handler:0000000000001748 SAME2
       stm32eforth.s:2968   .text.reset_handler:000000000000170c SAME1
       stm32eforth.s:2980   .text.reset_handler:0000000000001738 $d
       stm32eforth.s:2981   .text.reset_handler:000000000000173c $t
       stm32eforth.s:2986   .text.reset_handler:000000000000174c $d
       stm32eforth.s:2987   .text.reset_handler:0000000000001750 $t
       stm32eforth.s:2988   .text.reset_handler:0000000000001754 $d
       stm32eforth.s:2989   .text.reset_handler:0000000000001758 $t
       stm32eforth.s:3001   .text.reset_handler:000000000000175c FIND
       stm32eforth.s:3010   .text.reset_handler:000000000000177c FIND1
       stm32eforth.s:3013   .text.reset_handler:0000000000001784 $d
       stm32eforth.s:3033   .text.reset_handler:00000000000017cc FIND6
       stm32eforth.s:3014   .text.reset_handler:0000000000001788 $t
       stm32eforth.s:3017   .text.reset_handler:0000000000001794 $d
       stm32eforth.s:3018   .text.reset_handler:0000000000001798 $t
       stm32eforth.s:3022   .text.reset_handler:00000000000017a8 $d
       stm32eforth.s:3026   .text.reset_handler:00000000000017b8 FIND2
       stm32eforth.s:3023   .text.reset_handler:00000000000017ac $t
       stm32eforth.s:3031   .text.reset_handler:00000000000017c8 FIND3
       stm32eforth.s:3040   .text.reset_handler:00000000000017e4 FIND4
       stm32eforth.s:3042   .text.reset_handler:00000000000017e8 $d
       stm32eforth.s:3047   .text.reset_handler:00000000000017fc FIND5
       stm32eforth.s:3043   .text.reset_handler:00000000000017ec $t
       stm32eforth.s:3061   .text.reset_handler:0000000000001820 $d
       stm32eforth.s:3062   .text.reset_handler:0000000000001824 _NAMEQ
       stm32eforth.s:3064   .text.reset_handler:000000000000182a $t
       stm32eforth.s:3065   .text.reset_handler:000000000000182c NAMEQ
       stm32eforth.s:3082   .text.reset_handler:0000000000001840 BKSP
       stm32eforth.s:3091   .text.reset_handler:0000000000001860 $d
       stm32eforth.s:3104   .text.reset_handler:0000000000001888 BACK1
       stm32eforth.s:3092   .text.reset_handler:0000000000001864 $t
       stm32eforth.s:3093   .text.reset_handler:0000000000001868 $d
       stm32eforth.s:3094   .text.reset_handler:000000000000186c $t
       stm32eforth.s:3101   .text.reset_handler:0000000000001880 $d
       stm32eforth.s:3102   .text.reset_handler:0000000000001884 $t
       stm32eforth.s:3114   .text.reset_handler:000000000000188c TAP
ARM GAS  stm32eforth.s 			page 112


       stm32eforth.s:3131   .text.reset_handler:00000000000018a8 KTAP
       stm32eforth.s:3132   .text.reset_handler:00000000000018a8 TTAP
       stm32eforth.s:3136   .text.reset_handler:00000000000018b4 $d
       stm32eforth.s:3137   .text.reset_handler:00000000000018b8 $t
       stm32eforth.s:3139   .text.reset_handler:00000000000018c0 $d
       stm32eforth.s:3152   .text.reset_handler:00000000000018f0 KTAP2
       stm32eforth.s:3140   .text.reset_handler:00000000000018c4 $t
       stm32eforth.s:3141   .text.reset_handler:00000000000018c8 $d
       stm32eforth.s:3142   .text.reset_handler:00000000000018cc $t
       stm32eforth.s:3144   .text.reset_handler:00000000000018d4 $d
       stm32eforth.s:3149   .text.reset_handler:00000000000018e8 KTAP1
       stm32eforth.s:3145   .text.reset_handler:00000000000018d8 $t
       stm32eforth.s:3148   .text.reset_handler:00000000000018e4 $d
       stm32eforth.s:3150   .text.reset_handler:00000000000018e8 $t
       stm32eforth.s:3162   .text.reset_handler:0000000000001904 $d
       stm32eforth.s:3163   .text.reset_handler:0000000000001908 _ACCEP
       stm32eforth.s:3166   .text.reset_handler:0000000000001910 ACCEP
       stm32eforth.s:3171   .text.reset_handler:0000000000001920 ACCP1
       stm32eforth.s:3175   .text.reset_handler:000000000000192c $d
       stm32eforth.s:3191   .text.reset_handler:000000000000195c ACCP4
       stm32eforth.s:3176   .text.reset_handler:0000000000001930 $t
       stm32eforth.s:3180   .text.reset_handler:0000000000001940 $d
       stm32eforth.s:3181   .text.reset_handler:0000000000001944 $t
       stm32eforth.s:3183   .text.reset_handler:000000000000194c $d
       stm32eforth.s:3186   .text.reset_handler:0000000000001956 ACCP2
       stm32eforth.s:3184   .text.reset_handler:0000000000001950 $t
       stm32eforth.s:3189   .text.reset_handler:000000000000195a ACCP3
       stm32eforth.s:3200   .text.reset_handler:000000000000196c $d
       stm32eforth.s:3201   .text.reset_handler:0000000000001970 _QUERY
       stm32eforth.s:3203   .text.reset_handler:0000000000001976 $t
       stm32eforth.s:3204   .text.reset_handler:0000000000001978 QUERY
       stm32eforth.s:3208   .text.reset_handler:0000000000001984 $d
       stm32eforth.s:3209   .text.reset_handler:0000000000001988 $t
       stm32eforth.s:3214   .text.reset_handler:000000000000199c $d
       stm32eforth.s:3215   .text.reset_handler:00000000000019a0 $t
       stm32eforth.s:3225   .text.reset_handler:00000000000019ac $d
       stm32eforth.s:3226   .text.reset_handler:00000000000019b0 _ABORT
       stm32eforth.s:3228   .text.reset_handler:00000000000019b6 $t
       stm32eforth.s:3229   .text.reset_handler:00000000000019b8 ABORT
       stm32eforth.s:3232   .text.reset_handler:00000000000019c0 ABORT1
       stm32eforth.s:3236   .text.reset_handler:00000000000019cc $d
       stm32eforth.s:3237   .text.reset_handler:00000000000019d0 $t
       stm32eforth.s:3380   .text.reset_handler:0000000000001b34 PRESE
       stm32eforth.s:3394   .text.reset_handler:0000000000001b48 QUIT
       stm32eforth.s:3249   .text.reset_handler:00000000000019e0 ABORQ
       stm32eforth.s:3254   .text.reset_handler:00000000000019f0 $d
       stm32eforth.s:3255   .text.reset_handler:00000000000019f4 $t
       stm32eforth.s:3266   .text.reset_handler:00000000000019fe $d
       stm32eforth.s:3267   .text.reset_handler:0000000000001a02 _INTER
       stm32eforth.s:3269   .text.reset_handler:0000000000001a0e $t
       stm32eforth.s:3275   .text.reset_handler:0000000000001a20 $d
       stm32eforth.s:3286   .text.reset_handler:0000000000001a50 INTE1
       stm32eforth.s:3276   .text.reset_handler:0000000000001a24 $t
       stm32eforth.s:3278   .text.reset_handler:0000000000001a2c $d
       stm32eforth.s:3279   .text.reset_handler:0000000000001a30 $t
       stm32eforth.s:3281   .text.reset_handler:0000000000001a38 $d
       stm32eforth.s:3283   .text.reset_handler:0000000000001a46 $t
ARM GAS  stm32eforth.s 			page 113


       stm32eforth.s:3289   .text.reset_handler:0000000000001a58 $d
       stm32eforth.s:3291   .text.reset_handler:0000000000001a60 INTE2
       stm32eforth.s:3290   .text.reset_handler:0000000000001a5c $t
       stm32eforth.s:3297   .text.reset_handler:0000000000001a64 $d
       stm32eforth.s:3298   .text.reset_handler:0000000000001a68 _LBRAC
       stm32eforth.s:3300   .text.reset_handler:0000000000001a6a $t
       stm32eforth.s:3301   .text.reset_handler:0000000000001a6c LBRAC
       stm32eforth.s:3304   .text.reset_handler:0000000000001a74 $d
       stm32eforth.s:3305   .text.reset_handler:0000000000001a78 $t
       stm32eforth.s:3312   .text.reset_handler:0000000000001a84 $d
       stm32eforth.s:3313   .text.reset_handler:0000000000001a88 _DOTOK
       stm32eforth.s:3315   .text.reset_handler:0000000000001a8c $t
       stm32eforth.s:3316   .text.reset_handler:0000000000001a8c DOTOK
       stm32eforth.s:3319   .text.reset_handler:0000000000001a94 $d
       stm32eforth.s:3320   .text.reset_handler:0000000000001a98 $t
       stm32eforth.s:3324   .text.reset_handler:0000000000001aa8 $d
       stm32eforth.s:3328   .text.reset_handler:0000000000001ab4 DOTO1
       stm32eforth.s:3325   .text.reset_handler:0000000000001aac $t
       stm32eforth.s:3326   .text.reset_handler:0000000000001ab0 $d
       stm32eforth.s:3329   .text.reset_handler:0000000000001ab4 $t
       stm32eforth.s:3335   .text.reset_handler:0000000000001abc $d
       stm32eforth.s:3336   .text.reset_handler:0000000000001ac0 _QSTAC
       stm32eforth.s:3339   .text.reset_handler:0000000000001ac8 QSTAC
       stm32eforth.s:3344   .text.reset_handler:0000000000001ad8 $d
       stm32eforth.s:3352   .text.reset_handler:0000000000001ae8 $d
       stm32eforth.s:3353   .text.reset_handler:0000000000001aec _EVAL
       stm32eforth.s:3356   .text.reset_handler:0000000000001af4 EVAL
       stm32eforth.s:3358   .text.reset_handler:0000000000001af8 EVAL1
       stm32eforth.s:3363   .text.reset_handler:0000000000001b08 $d
       stm32eforth.s:3368   .text.reset_handler:0000000000001b1c EVAL2
       stm32eforth.s:3364   .text.reset_handler:0000000000001b0c $t
       stm32eforth.s:3376   .text.reset_handler:0000000000001b28 $d
       stm32eforth.s:3377   .text.reset_handler:0000000000001b2c _PRESE
       stm32eforth.s:3390   .text.reset_handler:0000000000001b3e $d
       stm32eforth.s:3391   .text.reset_handler:0000000000001b42 _QUIT
       stm32eforth.s:3398   .text.reset_handler:0000000000001b54 QUIT1
       stm32eforth.s:3400   .text.reset_handler:0000000000001b58 QUIT2
       stm32eforth.s:3404   .text.reset_handler:0000000000001b64 $d
       stm32eforth.s:3413   .text.reset_handler:0000000000001b6c _UNLOCK
       stm32eforth.s:3416   .text.reset_handler:0000000000001b74 UNLOCK
       stm32eforth.s:3419   .text.reset_handler:0000000000001b7c $d
       stm32eforth.s:3440   .text.reset_handler:0000000000001b9e LOCK
       stm32eforth.s:3790   .text.reset_handler:0000000000001f88 flash_regs
       stm32eforth.s:3420   .text.reset_handler:0000000000001b80 $t
       stm32eforth.s:3447   .text.reset_handler:0000000000001baa WAIT_BSY
       stm32eforth.s:3449   .text.reset_handler:0000000000001bac WAIT1
       stm32eforth.s:3460   .text.reset_handler:0000000000001bb6 $d
       stm32eforth.s:3461   .text.reset_handler:0000000000001bba _EPAGE
       stm32eforth.s:3465   .text.reset_handler:0000000000001bc8 EPAGE
       stm32eforth.s:3469   .text.reset_handler:0000000000001bd4 $d
       stm32eforth.s:3470   .text.reset_handler:0000000000001bd8 $t
       stm32eforth.s:3480   .text.reset_handler:0000000000001bf6 $d
       stm32eforth.s:3481   .text.reset_handler:0000000000001bfa $t
       stm32eforth.s:3485   .text.reset_handler:0000000000001c08 $d
       stm32eforth.s:3487   .text.reset_handler:0000000000001c16 $t
       stm32eforth.s:3492   .text.reset_handler:0000000000001c1c HWORD_WRITE
       stm32eforth.s:3505   .text.reset_handler:0000000000001c3e $d
ARM GAS  stm32eforth.s 			page 114


       stm32eforth.s:3506   .text.reset_handler:0000000000001c42 $t
       stm32eforth.s:3507   .text.reset_handler:0000000000001c46 $d
       stm32eforth.s:3509   .text.reset_handler:0000000000001c54 $t
       stm32eforth.s:3518   .text.reset_handler:0000000000001c58 $d
       stm32eforth.s:3519   .text.reset_handler:0000000000001c5c _ISTOR
       stm32eforth.s:3522   .text.reset_handler:0000000000001c60 ISTOR
       stm32eforth.s:3526   .text.reset_handler:0000000000001c6c $d
       stm32eforth.s:3527   .text.reset_handler:0000000000001c70 $t
       stm32eforth.s:3538   .text.reset_handler:0000000000001c9c $d
       stm32eforth.s:3539   .text.reset_handler:0000000000001ca0 $t
       stm32eforth.s:3545   .text.reset_handler:0000000000001ca8 $d
       stm32eforth.s:3546   .text.reset_handler:0000000000001cac _IMG_SIZE
       stm32eforth.s:3549   .text.reset_handler:0000000000001cb8 IMG_SIZE
       stm32eforth.s:3552   .text.reset_handler:0000000000001cc0 $d
       stm32eforth.s:3553   .text.reset_handler:0000000000001cc4 $t
       stm32eforth.s:3558   .text.reset_handler:0000000000001cd8 $d
       stm32eforth.s:3559   .text.reset_handler:0000000000001cdc $t
       stm32eforth.s:3562   .text.reset_handler:0000000000001ce8 $d
       stm32eforth.s:3563   .text.reset_handler:0000000000001cec $t
       stm32eforth.s:3569   .text.reset_handler:0000000000001cf4 $d
       stm32eforth.s:3570   .text.reset_handler:0000000000001cf8 _IMGQ
       stm32eforth.s:3573   .text.reset_handler:0000000000001d00 IMGQ
       stm32eforth.s:3585   .text.reset_handler:0000000000001d20 $d
       stm32eforth.s:3586   .text.reset_handler:0000000000001d24 _LOAD_IMG
       stm32eforth.s:3589   .text.reset_handler:0000000000001d30 LOAD_IMG
       stm32eforth.s:3593   .text.reset_handler:0000000000001d3c $d
       stm32eforth.s:3595   .text.reset_handler:0000000000001d40 $t
       stm32eforth.s:3619   .text.reset_handler:0000000000001d88 $d
       stm32eforth.s:3620   .text.reset_handler:0000000000001d8c _ERASE_MPG
       stm32eforth.s:3622   .text.reset_handler:0000000000001d96 $t
       stm32eforth.s:3623   .text.reset_handler:0000000000001d98 ERASE_MPG
       stm32eforth.s:3685   .text.reset_handler:0000000000001e48 PG_TO_ADR
       stm32eforth.s:3628   .text.reset_handler:0000000000001da8 $d
       stm32eforth.s:3630   .text.reset_handler:0000000000001dac $t
       stm32eforth.s:3637   .text.reset_handler:0000000000001dc4 $d
       stm32eforth.s:3638   .text.reset_handler:0000000000001dc8 $t
       stm32eforth.s:3643   .text.reset_handler:0000000000001dd0 $d
       stm32eforth.s:3644   .text.reset_handler:0000000000001dd4 _FLSH_WR
       stm32eforth.s:3647   .text.reset_handler:0000000000001ddc FLSH_WR
       stm32eforth.s:3648   .text.reset_handler:0000000000001ddc $t
       stm32eforth.s:3651   .text.reset_handler:0000000000001de8 $d
       stm32eforth.s:3653   .text.reset_handler:0000000000001dec $t
       stm32eforth.s:3662   .text.reset_handler:0000000000001e10 $d
       stm32eforth.s:3663   .text.reset_handler:0000000000001e14 $t
       stm32eforth.s:3670   .text.reset_handler:0000000000001e24 $d
       stm32eforth.s:3671   .text.reset_handler:0000000000001e28 _ADR_TO_PG
       stm32eforth.s:3674   .text.reset_handler:0000000000001e30 ADR_TO_PG
       stm32eforth.s:3681   .text.reset_handler:0000000000001e3a $d
       stm32eforth.s:3682   .text.reset_handler:0000000000001e3e _PG_TO_ADR
       stm32eforth.s:3692   .text.reset_handler:0000000000001e52 $d
       stm32eforth.s:3693   .text.reset_handler:0000000000001e56 _ERASE_IMG
       stm32eforth.s:3695   .text.reset_handler:0000000000001e60 $t
       stm32eforth.s:3696   .text.reset_handler:0000000000001e60 ERASE_IMG
       stm32eforth.s:3702   .text.reset_handler:0000000000001e74 $d
       stm32eforth.s:3703   .text.reset_handler:0000000000001e78 $t
       stm32eforth.s:3707   .text.reset_handler:0000000000001e88 $d
       stm32eforth.s:3708   .text.reset_handler:0000000000001e8c $t
ARM GAS  stm32eforth.s 			page 115


       stm32eforth.s:3713   .text.reset_handler:0000000000001e94 $d
       stm32eforth.s:3714   .text.reset_handler:0000000000001e98 _SAVE_IMG
       stm32eforth.s:3717   .text.reset_handler:0000000000001ea4 SAVE_IMG
       stm32eforth.s:3723   .text.reset_handler:0000000000001eb8 $d
       stm32eforth.s:3724   .text.reset_handler:0000000000001ebc $t
       stm32eforth.s:3727   .text.reset_handler:0000000000001ec8 $d
       stm32eforth.s:3729   .text.reset_handler:0000000000001ecc $t
       stm32eforth.s:3751   .text.reset_handler:0000000000001f08 $d
       stm32eforth.s:3752   .text.reset_handler:0000000000001f0c _TURNKEY
       stm32eforth.s:3754   .text.reset_handler:0000000000001f14 $t
       stm32eforth.s:3755   .text.reset_handler:0000000000001f14 TURNKEY
       stm32eforth.s:3805   .text.reset_handler:0000000000001f9c TICK
       stm32eforth.s:3763   .text.reset_handler:0000000000001f2c $d
       stm32eforth.s:3764   .text.reset_handler:0000000000001f30 _FORGET
       stm32eforth.s:3767   .text.reset_handler:0000000000001f38 FORGET
       stm32eforth.s:3773   .text.reset_handler:0000000000001f4c $d
       stm32eforth.s:3774   .text.reset_handler:0000000000001f50 $t
       stm32eforth.s:3777   .text.reset_handler:0000000000001f5c $d
       stm32eforth.s:3778   .text.reset_handler:0000000000001f60 $t
       stm32eforth.s:4248   .text.reset_handler:00000000000023c8 OVERT
       stm32eforth.s:3791   .text.reset_handler:0000000000001f88 $d
       stm32eforth.s:3802   .text.reset_handler:0000000000001f98 _TICK
       stm32eforth.s:3804   .text.reset_handler:0000000000001f9a $t
       stm32eforth.s:3810   .text.reset_handler:0000000000001fac $d
       stm32eforth.s:3812   .text.reset_handler:0000000000001fb4 TICK1
       stm32eforth.s:3811   .text.reset_handler:0000000000001fb0 $t
       stm32eforth.s:3817   .text.reset_handler:0000000000001fb8 $d
       stm32eforth.s:3818   .text.reset_handler:0000000000001fbc _ALLOT
       stm32eforth.s:3820   .text.reset_handler:0000000000001fc2 $t
       stm32eforth.s:3821   .text.reset_handler:0000000000001fc4 ALLOT
       stm32eforth.s:3830   .text.reset_handler:0000000000001fd4 $d
       stm32eforth.s:3831   .text.reset_handler:0000000000001fd8 _COMMA
       stm32eforth.s:3832   .text.reset_handler:0000000000001fda $t
       stm32eforth.s:3833   .text.reset_handler:0000000000001fdc COMMA
       stm32eforth.s:3846   .text.reset_handler:0000000000001ffc $d
       stm32eforth.s:3847   .text.reset_handler:0000000000002000 _BCOMP
       stm32eforth.s:3849   .text.reset_handler:000000000000200a $t
       stm32eforth.s:3850   .text.reset_handler:000000000000200c BCOMP
       stm32eforth.s:3859   .text.reset_handler:000000000000201c $d
       stm32eforth.s:3860   .text.reset_handler:0000000000002020 _COMPI
       stm32eforth.s:3862   .text.reset_handler:0000000000002028 $t
       stm32eforth.s:3863   .text.reset_handler:0000000000002028 COMPI
       stm32eforth.s:4314   .text.reset_handler:0000000000002466 CALLC
       stm32eforth.s:3878   .text.reset_handler:0000000000002050 $d
       stm32eforth.s:3879   .text.reset_handler:0000000000002054 _LITER
       stm32eforth.s:3881   .text.reset_handler:000000000000205c $t
       stm32eforth.s:3882   .text.reset_handler:000000000000205c LITER
       stm32eforth.s:3885   .text.reset_handler:0000000000002064 $d
       stm32eforth.s:3886   .text.reset_handler:0000000000002068 $t
       stm32eforth.s:3896   .text.reset_handler:0000000000002070 STRCQ
       stm32eforth.s:3899   .text.reset_handler:0000000000002078 $d
       stm32eforth.s:3900   .text.reset_handler:000000000000207c $t
       stm32eforth.s:3903   .text.reset_handler:0000000000002088 $d
       stm32eforth.s:3904   .text.reset_handler:000000000000208c $t
       stm32eforth.s:3918   .text.reset_handler:00000000000020a8 $d
       stm32eforth.s:3919   .text.reset_handler:00000000000020ac _FOR
       stm32eforth.s:3921   .text.reset_handler:00000000000020b0 $t
ARM GAS  stm32eforth.s 			page 116


       stm32eforth.s:3922   .text.reset_handler:00000000000020b0 FOR
       stm32eforth.s:3925   .text.reset_handler:00000000000020b8 $d
       stm32eforth.s:3926   .text.reset_handler:00000000000020bc $t
       stm32eforth.s:3932   .text.reset_handler:00000000000020c4 $d
       stm32eforth.s:3933   .text.reset_handler:00000000000020c8 _BEGIN
       stm32eforth.s:3935   .text.reset_handler:00000000000020ce $t
       stm32eforth.s:3936   .text.reset_handler:00000000000020d0 BEGIN
       stm32eforth.s:3944   .text.reset_handler:00000000000020dc $d
       stm32eforth.s:3945   .text.reset_handler:00000000000020e0 _NEXT
       stm32eforth.s:3948   .text.reset_handler:00000000000020e8 NEXT
       stm32eforth.s:3951   .text.reset_handler:00000000000020f0 $d
       stm32eforth.s:3952   .text.reset_handler:00000000000020f4 $t
       stm32eforth.s:3958   .text.reset_handler:00000000000020fc $d
       stm32eforth.s:3959   .text.reset_handler:0000000000002100 _UNTIL
       stm32eforth.s:3961   .text.reset_handler:0000000000002106 $t
       stm32eforth.s:3962   .text.reset_handler:0000000000002108 UNTIL
       stm32eforth.s:3965   .text.reset_handler:0000000000002110 $d
       stm32eforth.s:3966   .text.reset_handler:0000000000002114 $t
       stm32eforth.s:3972   .text.reset_handler:000000000000211c $d
       stm32eforth.s:3973   .text.reset_handler:0000000000002120 _AGAIN
       stm32eforth.s:3975   .text.reset_handler:0000000000002126 $t
       stm32eforth.s:3976   .text.reset_handler:0000000000002128 AGAIN
       stm32eforth.s:3979   .text.reset_handler:0000000000002130 $d
       stm32eforth.s:3980   .text.reset_handler:0000000000002134 $t
       stm32eforth.s:3986   .text.reset_handler:000000000000213c $d
       stm32eforth.s:3987   .text.reset_handler:0000000000002140 _IFF
       stm32eforth.s:3990   .text.reset_handler:0000000000002144 IFF
       stm32eforth.s:3993   .text.reset_handler:000000000000214c $d
       stm32eforth.s:3994   .text.reset_handler:0000000000002150 $t
       stm32eforth.s:3996   .text.reset_handler:0000000000002158 $d
       stm32eforth.s:3997   .text.reset_handler:000000000000215c $t
       stm32eforth.s:4004   .text.reset_handler:0000000000002168 $d
       stm32eforth.s:4005   .text.reset_handler:000000000000216c _AHEAD
       stm32eforth.s:4007   .text.reset_handler:0000000000002172 $t
       stm32eforth.s:4008   .text.reset_handler:0000000000002174 AHEAD
       stm32eforth.s:4011   .text.reset_handler:000000000000217c $d
       stm32eforth.s:4012   .text.reset_handler:0000000000002180 $t
       stm32eforth.s:4014   .text.reset_handler:0000000000002188 $d
       stm32eforth.s:4015   .text.reset_handler:000000000000218c $t
       stm32eforth.s:4022   .text.reset_handler:0000000000002198 $d
       stm32eforth.s:4023   .text.reset_handler:000000000000219c _REPEA
       stm32eforth.s:4026   .text.reset_handler:00000000000021a4 REPEA
       stm32eforth.s:4037   .text.reset_handler:00000000000021bc $d
       stm32eforth.s:4038   .text.reset_handler:00000000000021c0 _THENN
       stm32eforth.s:4041   .text.reset_handler:00000000000021c8 THENN
       stm32eforth.s:4051   .text.reset_handler:00000000000021dc $d
       stm32eforth.s:4052   .text.reset_handler:00000000000021e0 _AFT
       stm32eforth.s:4054   .text.reset_handler:00000000000021e4 $t
       stm32eforth.s:4055   .text.reset_handler:00000000000021e4 AFT
       stm32eforth.s:4066   .text.reset_handler:00000000000021fc $d
       stm32eforth.s:4067   .text.reset_handler:0000000000002200 _ELSEE
       stm32eforth.s:4070   .text.reset_handler:0000000000002208 ELSEE
       stm32eforth.s:4080   .text.reset_handler:000000000000221c $d
       stm32eforth.s:4081   .text.reset_handler:0000000000002220 _WHILE
       stm32eforth.s:4083   .text.reset_handler:0000000000002226 $t
       stm32eforth.s:4084   .text.reset_handler:0000000000002228 WHILE
       stm32eforth.s:4093   .text.reset_handler:0000000000002238 $d
ARM GAS  stm32eforth.s 			page 117


       stm32eforth.s:4094   .text.reset_handler:000000000000223c _ABRTQ
       stm32eforth.s:4097   .text.reset_handler:0000000000002244 ABRTQ
       stm32eforth.s:4100   .text.reset_handler:000000000000224c $d
       stm32eforth.s:4101   .text.reset_handler:0000000000002250 $t
       stm32eforth.s:4107   .text.reset_handler:0000000000002258 $d
       stm32eforth.s:4108   .text.reset_handler:000000000000225c _STRQ
       stm32eforth.s:4111   .text.reset_handler:0000000000002260 STRQ
       stm32eforth.s:4114   .text.reset_handler:0000000000002268 $d
       stm32eforth.s:4115   .text.reset_handler:000000000000226c $t
       stm32eforth.s:4121   .text.reset_handler:0000000000002274 $d
       stm32eforth.s:4122   .text.reset_handler:0000000000002278 _DOTQ
       stm32eforth.s:4125   .text.reset_handler:000000000000227c DOTQ
       stm32eforth.s:4128   .text.reset_handler:0000000000002284 $d
       stm32eforth.s:4129   .text.reset_handler:0000000000002288 $t
       stm32eforth.s:4138   .text.reset_handler:0000000000002290 $d
       stm32eforth.s:4139   .text.reset_handler:0000000000002294 _UNIQU
       stm32eforth.s:4141   .text.reset_handler:000000000000229c $t
       stm32eforth.s:4142   .text.reset_handler:000000000000229c UNIQU
       stm32eforth.s:4147   .text.reset_handler:00000000000022ac $d
       stm32eforth.s:4155   .text.reset_handler:00000000000022c8 UNIQ1
       stm32eforth.s:4148   .text.reset_handler:00000000000022b0 $t
       stm32eforth.s:4149   .text.reset_handler:00000000000022b4 $d
       stm32eforth.s:4151   .text.reset_handler:00000000000022bc $t
       stm32eforth.s:4166   .text.reset_handler:00000000000022d0 SNAME
       stm32eforth.s:4171   .text.reset_handler:00000000000022e0 $d
       stm32eforth.s:4185   .text.reset_handler:0000000000002318 SNAM1
       stm32eforth.s:4172   .text.reset_handler:00000000000022e4 $t
       stm32eforth.s:4187   .text.reset_handler:000000000000231c $d
       stm32eforth.s:4189   .text.reset_handler:0000000000002324 $t
       stm32eforth.s:4194   .text.reset_handler:0000000000002328 $d
       stm32eforth.s:4195   .text.reset_handler:000000000000232c _SCOMP
       stm32eforth.s:4198   .text.reset_handler:0000000000002338 SCOMP
       stm32eforth.s:4203   .text.reset_handler:0000000000002348 $d
       stm32eforth.s:4215   .text.reset_handler:0000000000002374 SCOM2
       stm32eforth.s:4204   .text.reset_handler:000000000000234c $t
       stm32eforth.s:4206   .text.reset_handler:0000000000002354 $d
       stm32eforth.s:4207   .text.reset_handler:0000000000002358 $t
       stm32eforth.s:4209   .text.reset_handler:0000000000002360 $d
       stm32eforth.s:4212   .text.reset_handler:000000000000236c SCOM1
       stm32eforth.s:4210   .text.reset_handler:0000000000002364 $t
       stm32eforth.s:4218   .text.reset_handler:000000000000237c $d
       stm32eforth.s:4221   .text.reset_handler:0000000000002388 SCOM3
       stm32eforth.s:4219   .text.reset_handler:0000000000002380 $t
       stm32eforth.s:4228   .text.reset_handler:0000000000002390 COLON_ABORT
       stm32eforth.s:4244   .text.reset_handler:00000000000023bc $d
       stm32eforth.s:4245   .text.reset_handler:00000000000023c0 _OVERT
       stm32eforth.s:4247   .text.reset_handler:00000000000023c6 $t
       stm32eforth.s:4259   .text.reset_handler:00000000000023e0 $d
       stm32eforth.s:4260   .text.reset_handler:00000000000023e4 _SEMIS
       stm32eforth.s:4262   .text.reset_handler:00000000000023e6 $t
       stm32eforth.s:4263   .text.reset_handler:00000000000023e8 SEMIS
       stm32eforth.s:4275   .text.reset_handler:0000000000002404 $d
       stm32eforth.s:4276   .text.reset_handler:0000000000002408 _RBRAC
       stm32eforth.s:4278   .text.reset_handler:000000000000240a $t
       stm32eforth.s:4279   .text.reset_handler:000000000000240c RBRAC
       stm32eforth.s:4282   .text.reset_handler:0000000000002414 $d
       stm32eforth.s:4283   .text.reset_handler:0000000000002418 $t
ARM GAS  stm32eforth.s 			page 118


       stm32eforth.s:4291   .text.reset_handler:0000000000002424 COMPILE_BLW
       stm32eforth.s:4328   .text.reset_handler:0000000000002486 $d
       stm32eforth.s:4329   .text.reset_handler:000000000000248a _COLON
       stm32eforth.s:4331   .text.reset_handler:000000000000248c $t
       stm32eforth.s:4332   .text.reset_handler:000000000000248c COLON
       stm32eforth.s:4345   .text.reset_handler:00000000000024ac $d
       stm32eforth.s:4346   .text.reset_handler:00000000000024b0 _IMMED
       stm32eforth.s:4348   .text.reset_handler:00000000000024ba $t
       stm32eforth.s:4349   .text.reset_handler:00000000000024bc IMMED
       stm32eforth.s:4352   .text.reset_handler:00000000000024c4 $d
       stm32eforth.s:4353   .text.reset_handler:00000000000024c8 $t
       stm32eforth.s:4368   .text.reset_handler:00000000000024e8 $d
       stm32eforth.s:4369   .text.reset_handler:00000000000024ec _CONST
       stm32eforth.s:4372   .text.reset_handler:00000000000024f8 CONST
       stm32eforth.s:4381   .text.reset_handler:0000000000002518 $d
       stm32eforth.s:4382   .text.reset_handler:000000000000251c $t
       stm32eforth.s:4390   .text.reset_handler:0000000000002528 DODOES
       stm32eforth.s:4413   .text.reset_handler:0000000000002568 $d
       stm32eforth.s:4414   .text.reset_handler:000000000000256c _DOES
       stm32eforth.s:4416   .text.reset_handler:0000000000002572 $t
       stm32eforth.s:4417   .text.reset_handler:0000000000002574 DOES
       stm32eforth.s:4420   .text.reset_handler:000000000000257c $d
       stm32eforth.s:4421   .text.reset_handler:0000000000002580 $t
       stm32eforth.s:4429   .text.reset_handler:00000000000025a0 $d
       stm32eforth.s:4430   .text.reset_handler:00000000000025a4 $t
       stm32eforth.s:4432   .text.reset_handler:00000000000025ac $d
       stm32eforth.s:4433   .text.reset_handler:00000000000025b0 $t
       stm32eforth.s:4440   .text.reset_handler:00000000000025b8 $d
       stm32eforth.s:4441   .text.reset_handler:00000000000025bc _CREAT
       stm32eforth.s:4444   .text.reset_handler:00000000000025c4 CREAT
       stm32eforth.s:4453   .text.reset_handler:00000000000025e4 $d
       stm32eforth.s:4454   .text.reset_handler:00000000000025e8 $t
       stm32eforth.s:4460   .text.reset_handler:00000000000025f0 $d
       stm32eforth.s:4461   .text.reset_handler:00000000000025f4 _VARIA
       stm32eforth.s:4464   .text.reset_handler:0000000000002600 VARIA
       stm32eforth.s:4468   .text.reset_handler:000000000000260c $d
       stm32eforth.s:4469   .text.reset_handler:0000000000002610 $t
       stm32eforth.s:4483   .text.reset_handler:0000000000002618 DMP
       stm32eforth.s:4487   .text.reset_handler:0000000000002624 $d
       stm32eforth.s:4488   .text.reset_handler:0000000000002628 $t
       stm32eforth.s:4499   .text.reset_handler:0000000000002650 PDUM2
       stm32eforth.s:4492   .text.reset_handler:0000000000002638 PDUM1
       stm32eforth.s:4496   .text.reset_handler:0000000000002644 $d
       stm32eforth.s:4497   .text.reset_handler:0000000000002648 $t
       stm32eforth.s:4501   .text.reset_handler:0000000000002654 $d
       stm32eforth.s:4502   .text.reset_handler:0000000000002658 $t
       stm32eforth.s:4507   .text.reset_handler:000000000000265c $d
       stm32eforth.s:4508   .text.reset_handler:0000000000002660 _DUMP
       stm32eforth.s:4511   .text.reset_handler:0000000000002668 DUMP
       stm32eforth.s:4518   .text.reset_handler:0000000000002680 $d
       stm32eforth.s:4519   .text.reset_handler:0000000000002684 $t
       stm32eforth.s:4533   .text.reset_handler:00000000000026b8 DUMP4
       stm32eforth.s:4522   .text.reset_handler:0000000000002690 DUMP1
       stm32eforth.s:4525   .text.reset_handler:0000000000002698 $d
       stm32eforth.s:4526   .text.reset_handler:000000000000269c $t
       stm32eforth.s:4535   .text.reset_handler:00000000000026bc $d
       stm32eforth.s:4536   .text.reset_handler:00000000000026c0 DUMP3
ARM GAS  stm32eforth.s 			page 119


       stm32eforth.s:4537   .text.reset_handler:00000000000026c0 $t
       stm32eforth.s:4546   .text.reset_handler:00000000000026d4 $d
       stm32eforth.s:4547   .text.reset_handler:00000000000026d8 _DOTS
       stm32eforth.s:4551   .text.reset_handler:00000000000026dc DOTS
       stm32eforth.s:4561   .text.reset_handler:00000000000026fc DOTS2
       stm32eforth.s:4557   .text.reset_handler:00000000000026f0 DOTS1
       stm32eforth.s:4563   .text.reset_handler:0000000000002700 $d
       stm32eforth.s:4564   .text.reset_handler:0000000000002704 $t
       stm32eforth.s:4570   .text.reset_handler:000000000000270c $d
       stm32eforth.s:4571   .text.reset_handler:0000000000002710 _TNAME
       stm32eforth.s:4573   .text.reset_handler:0000000000002716 $t
       stm32eforth.s:4574   .text.reset_handler:0000000000002718 TNAME
       stm32eforth.s:4579   .text.reset_handler:0000000000002728 TNAM1
       stm32eforth.s:4582   .text.reset_handler:0000000000002730 $d
       stm32eforth.s:4592   .text.reset_handler:0000000000002758 TNAM2
       stm32eforth.s:4583   .text.reset_handler:0000000000002734 $t
       stm32eforth.s:4588   .text.reset_handler:0000000000002748 $d
       stm32eforth.s:4589   .text.reset_handler:000000000000274c $t
       stm32eforth.s:4600   .text.reset_handler:0000000000002764 $d
       stm32eforth.s:4601   .text.reset_handler:0000000000002768 _DOTID
       stm32eforth.s:4603   .text.reset_handler:000000000000276c $t
       stm32eforth.s:4604   .text.reset_handler:000000000000276c DOTID
       stm32eforth.s:4608   .text.reset_handler:0000000000002778 $d
       stm32eforth.s:4615   .text.reset_handler:0000000000002794 DOTI1
       stm32eforth.s:4609   .text.reset_handler:000000000000277c $t
       stm32eforth.s:4611   .text.reset_handler:0000000000002784 $d
       stm32eforth.s:4612   .text.reset_handler:0000000000002788 $t
       stm32eforth.s:4617   .text.reset_handler:0000000000002798 $d
       stm32eforth.s:4619   .text.reset_handler:00000000000027a2 $t
       stm32eforth.s:4622   *ABS*:0000000000000001 WANT_SEE
       stm32eforth.s:4627   .text.reset_handler:00000000000027a8 DOTCA
       stm32eforth.s:4632   .text.reset_handler:00000000000027b8 $d
       stm32eforth.s:4633   .text.reset_handler:00000000000027bc $t
       stm32eforth.s:4638   .text.reset_handler:00000000000027c4 CODE_ABORT
       stm32eforth.s:4644   .text.reset_handler:00000000000027d8 $d
       stm32eforth.s:4645   .text.reset_handler:00000000000027dc $t
       stm32eforth.s:4647   .text.reset_handler:00000000000027e4 $d
       stm32eforth.s:4648   .text.reset_handler:00000000000027e8 $t
       stm32eforth.s:4650   .text.reset_handler:00000000000027f0 $d
       stm32eforth.s:4652   .text.reset_handler:00000000000027fa $t
       stm32eforth.s:4655   .text.reset_handler:0000000000002800 $d
       stm32eforth.s:4664   .text.reset_handler:0000000000002810 UNNESTQ
       stm32eforth.s:4669   .text.reset_handler:0000000000002820 $d
       stm32eforth.s:4670   .text.reset_handler:0000000000002824 $t
       stm32eforth.s:4673   .text.reset_handler:0000000000002830 $d
       stm32eforth.s:4674   .text.reset_handler:0000000000002834 $t
       stm32eforth.s:4675   .text.reset_handler:0000000000002838 $d
       stm32eforth.s:4683   .text.reset_handler:0000000000002848 NONAMEQ
       stm32eforth.s:4686   .text.reset_handler:0000000000002850 $d
       stm32eforth.s:4687   .text.reset_handler:0000000000002854 $t
       stm32eforth.s:4689   .text.reset_handler:000000000000285c $d
       stm32eforth.s:5017   .text.reset_handler:0000000000002c1c NONAME_SUB
       stm32eforth.s:4690   .text.reset_handler:0000000000002860 $t
       stm32eforth.s:4696   .text.reset_handler:0000000000002878 $d
       stm32eforth.s:4697   .text.reset_handler:000000000000287c $t
       stm32eforth.s:4699   .text.reset_handler:0000000000002884 $d
       stm32eforth.s:4700   .text.reset_handler:0000000000002888 $t
ARM GAS  stm32eforth.s 			page 120


       stm32eforth.s:4704   .text.reset_handler:0000000000002898 $d
       stm32eforth.s:4705   .text.reset_handler:000000000000289c $t
       stm32eforth.s:4707   .text.reset_handler:00000000000028a4 $d
       stm32eforth.s:4708   .text.reset_handler:00000000000028a8 $t
       stm32eforth.s:4710   .text.reset_handler:00000000000028b0 $d
       stm32eforth.s:5023   .text.reset_handler:0000000000002c58 ANONYMOUS
       stm32eforth.s:4711   .text.reset_handler:00000000000028b4 $t
       stm32eforth.s:4729   .text.reset_handler:00000000000028e4 DOTNONAME
       stm32eforth.s:4733   .text.reset_handler:00000000000028f0 $d
       stm32eforth.s:4734   .text.reset_handler:00000000000028f4 $t
       stm32eforth.s:4741   .text.reset_handler:0000000000002904 IS_BLW
       stm32eforth.s:4744   .text.reset_handler:000000000000290c $d
       stm32eforth.s:4745   .text.reset_handler:0000000000002910 $t
       stm32eforth.s:4755   .text.reset_handler:0000000000002928 $d
       stm32eforth.s:4756   .text.reset_handler:000000000000292c _SEE
       stm32eforth.s:4758   .text.reset_handler:0000000000002930 $t
       stm32eforth.s:4759   .text.reset_handler:0000000000002930 SEE
       stm32eforth.s:4769   .text.reset_handler:0000000000002954 $d
       stm32eforth.s:4770   .text.reset_handler:0000000000002958 $t
       stm32eforth.s:4771   .text.reset_handler:000000000000295c SEE1
       stm32eforth.s:4776   .text.reset_handler:000000000000296c $d
       stm32eforth.s:4777   .text.reset_handler:0000000000002970 $t
       stm32eforth.s:4783   .text.reset_handler:0000000000002988 $d
       stm32eforth.s:4784   .text.reset_handler:000000000000298c $t
       stm32eforth.s:4787   .text.reset_handler:0000000000002998 $d
       stm32eforth.s:4788   .text.reset_handler:000000000000299c $t
       stm32eforth.s:4836   .text.reset_handler:0000000000002a2c DECOMP
       stm32eforth.s:4793   .text.reset_handler:00000000000029b0 $d
       stm32eforth.s:4794   .text.reset_handler:00000000000029b4 $t
       stm32eforth.s:4796   .text.reset_handler:00000000000029bc $d
       stm32eforth.s:4797   .text.reset_handler:00000000000029c0 $t
       stm32eforth.s:4809   .text.reset_handler:00000000000029dc BLADR
       stm32eforth.s:4831   .text.reset_handler:0000000000002a1e $d
       stm32eforth.s:4832   .text.reset_handler:0000000000002a22 _DECOM
       stm32eforth.s:4834   .text.reset_handler:0000000000002a2c $t
       stm32eforth.s:4843   .text.reset_handler:0000000000002a44 $d
       stm32eforth.s:4873   .text.reset_handler:0000000000002aa0 DECOM2
       stm32eforth.s:4845   .text.reset_handler:0000000000002a48 $t
       stm32eforth.s:4846   .text.reset_handler:0000000000002a4c $d
       stm32eforth.s:4848   .text.reset_handler:0000000000002a50 $t
       stm32eforth.s:4856   .text.reset_handler:0000000000002a6c $d
       stm32eforth.s:4859   .text.reset_handler:0000000000002a78 DECOMP1
       stm32eforth.s:4857   .text.reset_handler:0000000000002a70 $t
       stm32eforth.s:4858   .text.reset_handler:0000000000002a74 $d
       stm32eforth.s:4861   .text.reset_handler:0000000000002a7c DECOMP3
       stm32eforth.s:4860   .text.reset_handler:0000000000002a78 $t
       stm32eforth.s:4886   .text.reset_handler:0000000000002ac0 $d
       stm32eforth.s:4890   .text.reset_handler:0000000000002ac4 _WORDS
       stm32eforth.s:4892   .text.reset_handler:0000000000002aca $t
       stm32eforth.s:4893   .text.reset_handler:0000000000002acc WORDS
       stm32eforth.s:4898   .text.reset_handler:0000000000002adc WORS1
       stm32eforth.s:4901   .text.reset_handler:0000000000002ae4 $d
       stm32eforth.s:4908   .text.reset_handler:0000000000002b00 WORS2
       stm32eforth.s:4902   .text.reset_handler:0000000000002ae8 $t
       stm32eforth.s:4921   .text.reset_handler:0000000000002b04 VERSN
       stm32eforth.s:4924   .text.reset_handler:0000000000002b0c $d
       stm32eforth.s:4925   .text.reset_handler:0000000000002b10 $t
ARM GAS  stm32eforth.s 			page 121


       stm32eforth.s:4930   .text.reset_handler:0000000000002b14 $d
       stm32eforth.s:4931   .text.reset_handler:0000000000002b18 _HI
       stm32eforth.s:4938   .text.reset_handler:0000000000002b28 $d
       stm32eforth.s:4940   .text.reset_handler:0000000000002b40 $t
       stm32eforth.s:4949   .text.reset_handler:0000000000002b60 $d
       stm32eforth.s:4950   .text.reset_handler:0000000000002b64 $t
       stm32eforth.s:4962   .text.reset_handler:0000000000002b84 $d
       stm32eforth.s:4971   .text.reset_handler:0000000000002b98 uart_puts_adr
       stm32eforth.s:4967   .text.reset_handler:0000000000002b90 $t
       stm32eforth.s:4973   .text.reset_handler:0000000000002b9c hello
       stm32eforth.s:4972   .text.reset_handler:0000000000002b98 $d
       stm32eforth.s:4986   .text.reset_handler:0000000000002bc8 COLD1
       stm32eforth.s:4988   .text.reset_handler:0000000000002bcc $d
       stm32eforth.s:4989   .text.reset_handler:0000000000002bd0 $t
       stm32eforth.s:4991   .text.reset_handler:0000000000002bd8 $d
       stm32eforth.s:4992   .text.reset_handler:0000000000002bdc $t
       stm32eforth.s:4993   .text.reset_handler:0000000000002be0 $d
       stm32eforth.s:4994   .text.reset_handler:0000000000002be4 $t
       stm32eforth.s:4995   .text.reset_handler:0000000000002be8 $d
       stm32eforth.s:4996   .text.reset_handler:0000000000002bec $t
       stm32eforth.s:5001   .text.reset_handler:0000000000002bfc $d
       stm32eforth.s:5002   .text.reset_handler:0000000000002c00 $t
       stm32eforth.s:5007   .text.reset_handler:0000000000002c14 COLD2
       stm32eforth.s:5010   .text.reset_handler:0000000000002c18 $d
       stm32eforth.s:5018   .text.reset_handler:0000000000002c1c $d
       stm32eforth.s:5027   .text.reset_handler:0000000000002c90 BRAN_LBL
       stm32eforth.s:5031   .text.reset_handler:0000000000002c9c QBRAN_LBL
       stm32eforth.s:5035   .text.reset_handler:0000000000002ca8 DOLIT_LBL
       stm32eforth.s:5039   .text.reset_handler:0000000000002cb4 DONEXT_LBL
       stm32eforth.s:5043   .text.reset_handler:0000000000002cc0 DODOES_LBL
       stm32eforth.s:5047   .text.reset_handler:0000000000002ccc DOVAR_LBL
       stm32eforth.s:5051   .text.reset_handler:0000000000002cd8 DOCON_LBL
       stm32eforth.s:5055   .text.reset_handler:0000000000002ce4 IS_BLW_LBL
       stm32eforth.s:5059   .text.reset_handler:0000000000002cf0 DOTQP_LBL
       stm32eforth.s:5063   .text.reset_handler:0000000000002cf4 BLADR_LBL
       stm32eforth.s:5067   .text.reset_handler:0000000000002d00 DOTCA_LBL
       stm32eforth.s:5071   .text.reset_handler:0000000000002d0c NONAMEQ_LBL
       stm32eforth.s:5075   .text.reset_handler:0000000000002d18 STRCQ_LBL
       stm32eforth.s:5079   .text.reset_handler:0000000000002d20 VERSN_LBL
       stm32eforth.s:5030   .text.reset_handler:0000000000002c9a $t
       stm32eforth.s:5032   .text.reset_handler:0000000000002c9c $d
       stm32eforth.s:5036   .text.reset_handler:0000000000002ca8 $d
       stm32eforth.s:5040   .text.reset_handler:0000000000002cb4 $d
       stm32eforth.s:5042   .text.reset_handler:0000000000002cbe $t
       stm32eforth.s:5044   .text.reset_handler:0000000000002cc0 $d
       stm32eforth.s:5046   .text.reset_handler:0000000000002cca $t
       stm32eforth.s:5048   .text.reset_handler:0000000000002ccc $d
       stm32eforth.s:5052   .text.reset_handler:0000000000002cd8 $d
       stm32eforth.s:5056   .text.reset_handler:0000000000002ce4 $d
       stm32eforth.s:5060   .text.reset_handler:0000000000002cf0 $d
       stm32eforth.s:5066   .text.reset_handler:0000000000002cfe $t
       stm32eforth.s:5068   .text.reset_handler:0000000000002d00 $d
       stm32eforth.s:5072   .text.reset_handler:0000000000002d0c $d
       stm32eforth.s:5076   .text.reset_handler:0000000000002d18 $d
       stm32eforth.s:5080   .text.reset_handler:0000000000002d20 $d
       stm32eforth.s:5087   .text.reset_handler:0000000000003000 $d
       stm32eforth.s:275    .text.default_handler:000000000000001f $d
ARM GAS  stm32eforth.s 			page 122


       stm32eforth.s:275    .text.default_handler:0000000000000020 $t
       stm32eforth.s:604    .text.reset_handler:0000000000000477 $d
       stm32eforth.s:604    .text.reset_handler:0000000000000478 $t
       stm32eforth.s:648    .text.reset_handler:00000000000004f5 $d
       stm32eforth.s:648    .text.reset_handler:00000000000004f6 $t
       stm32eforth.s:668    .text.reset_handler:000000000000051d $d
       stm32eforth.s:668    .text.reset_handler:000000000000051e $t
       stm32eforth.s:693    .text.reset_handler:0000000000000555 $d
       stm32eforth.s:693    .text.reset_handler:0000000000000556 $t
       stm32eforth.s:805    .text.reset_handler:00000000000005eb $d
       stm32eforth.s:805    .text.reset_handler:00000000000005ec $t
       stm32eforth.s:839    .text.reset_handler:0000000000000617 $d
       stm32eforth.s:839    .text.reset_handler:0000000000000618 $t
       stm32eforth.s:852    .text.reset_handler:000000000000062b $d
       stm32eforth.s:852    .text.reset_handler:000000000000062c $t
       stm32eforth.s:863    .text.reset_handler:0000000000000637 $d
       stm32eforth.s:863    .text.reset_handler:0000000000000638 $t
       stm32eforth.s:875    .text.reset_handler:0000000000000649 $d
       stm32eforth.s:875    .text.reset_handler:000000000000064a $t
       stm32eforth.s:887    .text.reset_handler:000000000000065b $d
       stm32eforth.s:887    .text.reset_handler:000000000000065c $t
       stm32eforth.s:911    .text.reset_handler:0000000000000681 $d
       stm32eforth.s:911    .text.reset_handler:0000000000000682 $t
       stm32eforth.s:933    .text.reset_handler:00000000000006a3 $d
       stm32eforth.s:933    .text.reset_handler:00000000000006a4 $t
       stm32eforth.s:946    .text.reset_handler:00000000000006b5 $d
       stm32eforth.s:946    .text.reset_handler:00000000000006b6 $t
       stm32eforth.s:958    .text.reset_handler:00000000000006c7 $d
       stm32eforth.s:958    .text.reset_handler:00000000000006c8 $t
       stm32eforth.s:983    .text.reset_handler:00000000000006ef $d
       stm32eforth.s:983    .text.reset_handler:00000000000006f0 $t
       stm32eforth.s:1024   .text.reset_handler:0000000000000733 $d
       stm32eforth.s:1024   .text.reset_handler:0000000000000734 $t
       stm32eforth.s:1036   .text.reset_handler:0000000000000749 $d
       stm32eforth.s:1036   .text.reset_handler:000000000000074a $t
       stm32eforth.s:1098   .text.reset_handler:00000000000007a3 $d
       stm32eforth.s:1098   .text.reset_handler:00000000000007a4 $t
       stm32eforth.s:1112   .text.reset_handler:00000000000007b7 $d
       stm32eforth.s:1112   .text.reset_handler:00000000000007b8 $t
       stm32eforth.s:1123   .text.reset_handler:00000000000007c5 $d
       stm32eforth.s:1123   .text.reset_handler:00000000000007c6 $t
       stm32eforth.s:1134   .text.reset_handler:00000000000007d5 $d
       stm32eforth.s:1134   .text.reset_handler:00000000000007d6 $t
       stm32eforth.s:1145   .text.reset_handler:00000000000007e5 $d
       stm32eforth.s:1145   .text.reset_handler:00000000000007e6 $t
       stm32eforth.s:1178   .text.reset_handler:0000000000000815 $d
       stm32eforth.s:1178   .text.reset_handler:0000000000000816 $t
       stm32eforth.s:1212   .text.reset_handler:0000000000000849 $d
       stm32eforth.s:1212   .text.reset_handler:000000000000084a $t
       stm32eforth.s:1223   .text.reset_handler:0000000000000859 $d
       stm32eforth.s:1223   .text.reset_handler:000000000000085a $t
       stm32eforth.s:1234   .text.reset_handler:000000000000086b $d
       stm32eforth.s:1234   .text.reset_handler:000000000000086c $t
       stm32eforth.s:1273   .text.reset_handler:00000000000008a7 $d
       stm32eforth.s:1273   .text.reset_handler:00000000000008a8 $t
       stm32eforth.s:1286   .text.reset_handler:00000000000008bb $d
       stm32eforth.s:1286   .text.reset_handler:00000000000008bc $t
ARM GAS  stm32eforth.s 			page 123


       stm32eforth.s:1313   .text.reset_handler:00000000000008e9 $d
       stm32eforth.s:1313   .text.reset_handler:00000000000008ea $t
       stm32eforth.s:1337   .text.reset_handler:000000000000090d $d
       stm32eforth.s:1337   .text.reset_handler:000000000000090e $t
       stm32eforth.s:1366   .text.reset_handler:000000000000093b $d
       stm32eforth.s:1366   .text.reset_handler:000000000000093c $t
       stm32eforth.s:1439   .text.reset_handler:00000000000009ab $d
       stm32eforth.s:1439   .text.reset_handler:00000000000009ac $t
       stm32eforth.s:1454   .text.reset_handler:00000000000009c3 $d
       stm32eforth.s:1454   .text.reset_handler:00000000000009c4 $t
       stm32eforth.s:1469   .text.reset_handler:00000000000009df $d
       stm32eforth.s:1469   .text.reset_handler:00000000000009e0 $t
       stm32eforth.s:1541   .text.reset_handler:0000000000000a3d $d
       stm32eforth.s:1541   .text.reset_handler:0000000000000a3e $t
       stm32eforth.s:1552   .text.reset_handler:0000000000000a53 $d
       stm32eforth.s:1552   .text.reset_handler:0000000000000a54 $t
       stm32eforth.s:1575   .text.reset_handler:0000000000000a7b $d
       stm32eforth.s:1575   .text.reset_handler:0000000000000a7c $t
       stm32eforth.s:1599   .text.reset_handler:0000000000000aa3 $d
       stm32eforth.s:1599   .text.reset_handler:0000000000000aa4 $t
       stm32eforth.s:1623   .text.reset_handler:0000000000000ac1 $d
       stm32eforth.s:1623   .text.reset_handler:0000000000000ac2 $t
       stm32eforth.s:1647   .text.reset_handler:0000000000000aeb $d
       stm32eforth.s:1647   .text.reset_handler:0000000000000aec $t
       stm32eforth.s:1696   .text.reset_handler:0000000000000b3d $d
       stm32eforth.s:1696   .text.reset_handler:0000000000000b3e $t
       stm32eforth.s:1719   .text.reset_handler:0000000000000b67 $d
       stm32eforth.s:1719   .text.reset_handler:0000000000000b68 $t
       stm32eforth.s:1734   .text.reset_handler:0000000000000b81 $d
       stm32eforth.s:1734   .text.reset_handler:0000000000000b82 $t
       stm32eforth.s:1747   .text.reset_handler:0000000000000b9d $d
       stm32eforth.s:1747   .text.reset_handler:0000000000000b9e $t
       stm32eforth.s:1771   .text.reset_handler:0000000000000bd5 $d
       stm32eforth.s:1771   .text.reset_handler:0000000000000bd6 $t
       stm32eforth.s:1787   .text.reset_handler:0000000000000bed $d
       stm32eforth.s:1787   .text.reset_handler:0000000000000bee $t
       stm32eforth.s:1806   .text.reset_handler:0000000000000c1b $d
       stm32eforth.s:1806   .text.reset_handler:0000000000000c1c $t
       stm32eforth.s:1876   .text.reset_handler:0000000000000cc9 $d
       stm32eforth.s:1876   .text.reset_handler:0000000000000cca $t
       stm32eforth.s:1933   .text.reset_handler:0000000000000d43 $d
       stm32eforth.s:1933   .text.reset_handler:0000000000000d44 $t
       stm32eforth.s:2003   .text.reset_handler:0000000000000de3 $d
       stm32eforth.s:2003   .text.reset_handler:0000000000000de4 $t
       stm32eforth.s:2022   .text.reset_handler:0000000000000e09 $d
       stm32eforth.s:2022   .text.reset_handler:0000000000000e0a $t
       stm32eforth.s:2060   .text.reset_handler:0000000000000e51 $d
       stm32eforth.s:2060   .text.reset_handler:0000000000000e52 $t
       stm32eforth.s:2099   .text.reset_handler:0000000000000e9b $d
       stm32eforth.s:2099   .text.reset_handler:0000000000000e9c $t
       stm32eforth.s:2123   .text.reset_handler:0000000000000ecb $d
       stm32eforth.s:2123   .text.reset_handler:0000000000000ecc $t
       stm32eforth.s:2146   .text.reset_handler:0000000000000ef7 $d
       stm32eforth.s:2146   .text.reset_handler:0000000000000ef8 $t
       stm32eforth.s:2215   .text.reset_handler:0000000000000fb3 $d
       stm32eforth.s:2215   .text.reset_handler:0000000000000fb4 $t
       stm32eforth.s:2229   .text.reset_handler:0000000000000fd1 $d
ARM GAS  stm32eforth.s 			page 124


       stm32eforth.s:2229   .text.reset_handler:0000000000000fd2 $t
       stm32eforth.s:2262   .text.reset_handler:000000000000101f $d
       stm32eforth.s:2262   .text.reset_handler:0000000000001020 $t
       stm32eforth.s:2280   .text.reset_handler:0000000000001043 $d
       stm32eforth.s:2280   .text.reset_handler:0000000000001044 $t
       stm32eforth.s:2298   .text.reset_handler:000000000000106b $d
       stm32eforth.s:2298   .text.reset_handler:000000000000106c $t
       stm32eforth.s:2367   .text.reset_handler:0000000000001103 $d
       stm32eforth.s:2367   .text.reset_handler:0000000000001104 $t
       stm32eforth.s:2521   .text.reset_handler:00000000000012db $d
       stm32eforth.s:2521   .text.reset_handler:00000000000012dc $t
       stm32eforth.s:2542   .text.reset_handler:000000000000130d $d
       stm32eforth.s:2542   .text.reset_handler:000000000000130e $t
       stm32eforth.s:2563   .text.reset_handler:000000000000133f $d
       stm32eforth.s:2563   .text.reset_handler:0000000000001340 $t
       stm32eforth.s:2642   .text.reset_handler:00000000000013c7 $d
       stm32eforth.s:2642   .text.reset_handler:00000000000013c8 $t
       stm32eforth.s:2680   .text.reset_handler:0000000000001427 $d
       stm32eforth.s:2680   .text.reset_handler:0000000000001428 $t
       stm32eforth.s:2850   .text.reset_handler:000000000000160b $d
       stm32eforth.s:2850   .text.reset_handler:000000000000160c $t
       stm32eforth.s:2895   .text.reset_handler:000000000000166d $d
       stm32eforth.s:2895   .text.reset_handler:000000000000166e $t
       stm32eforth.s:2910   .text.reset_handler:0000000000001691 $d
       stm32eforth.s:2910   .text.reset_handler:0000000000001692 $t
       stm32eforth.s:3165   .text.reset_handler:000000000000190f $d
       stm32eforth.s:3165   .text.reset_handler:0000000000001910 $t
       stm32eforth.s:3338   .text.reset_handler:0000000000001ac7 $d
       stm32eforth.s:3338   .text.reset_handler:0000000000001ac8 $t
       stm32eforth.s:3346   .text.reset_handler:0000000000001ae3 $d
       stm32eforth.s:3346   .text.reset_handler:0000000000001ae4 $t
       stm32eforth.s:3355   .text.reset_handler:0000000000001af1 $d
       stm32eforth.s:3355   .text.reset_handler:0000000000001af2 $t
       stm32eforth.s:3379   .text.reset_handler:0000000000001b33 $d
       stm32eforth.s:3379   .text.reset_handler:0000000000001b34 $t
       stm32eforth.s:3393   .text.reset_handler:0000000000001b47 $d
       stm32eforth.s:3393   .text.reset_handler:0000000000001b48 $t
       stm32eforth.s:3415   .text.reset_handler:0000000000001b73 $d
       stm32eforth.s:3415   .text.reset_handler:0000000000001b74 $t
       stm32eforth.s:3463   .text.reset_handler:0000000000001bc5 $d
       stm32eforth.s:3463   .text.reset_handler:0000000000001bc6 $t
       stm32eforth.s:3521   .text.reset_handler:0000000000001c5f $d
       stm32eforth.s:3521   .text.reset_handler:0000000000001c60 $t
       stm32eforth.s:3548   .text.reset_handler:0000000000001cb5 $d
       stm32eforth.s:3548   .text.reset_handler:0000000000001cb6 $t
       stm32eforth.s:3572   .text.reset_handler:0000000000001cfd $d
       stm32eforth.s:3572   .text.reset_handler:0000000000001cfe $t
       stm32eforth.s:3588   .text.reset_handler:0000000000001d2d $d
       stm32eforth.s:3588   .text.reset_handler:0000000000001d2e $t
       stm32eforth.s:3673   .text.reset_handler:0000000000001e2f $d
       stm32eforth.s:3673   .text.reset_handler:0000000000001e30 $t
       stm32eforth.s:3684   .text.reset_handler:0000000000001e45 $d
       stm32eforth.s:3684   .text.reset_handler:0000000000001e46 $t
       stm32eforth.s:3716   .text.reset_handler:0000000000001ea1 $d
       stm32eforth.s:3716   .text.reset_handler:0000000000001ea2 $t
       stm32eforth.s:3766   .text.reset_handler:0000000000001f37 $d
       stm32eforth.s:3766   .text.reset_handler:0000000000001f38 $t
ARM GAS  stm32eforth.s 			page 125


       stm32eforth.s:3947   .text.reset_handler:00000000000020e5 $d
       stm32eforth.s:3947   .text.reset_handler:00000000000020e6 $t
       stm32eforth.s:3989   .text.reset_handler:0000000000002143 $d
       stm32eforth.s:3989   .text.reset_handler:0000000000002144 $t
       stm32eforth.s:4025   .text.reset_handler:00000000000021a3 $d
       stm32eforth.s:4025   .text.reset_handler:00000000000021a4 $t
       stm32eforth.s:4040   .text.reset_handler:00000000000021c5 $d
       stm32eforth.s:4040   .text.reset_handler:00000000000021c6 $t
       stm32eforth.s:4069   .text.reset_handler:0000000000002205 $d
       stm32eforth.s:4069   .text.reset_handler:0000000000002206 $t
       stm32eforth.s:4096   .text.reset_handler:0000000000002243 $d
       stm32eforth.s:4096   .text.reset_handler:0000000000002244 $t
       stm32eforth.s:4110   .text.reset_handler:000000000000225f $d
       stm32eforth.s:4110   .text.reset_handler:0000000000002260 $t
       stm32eforth.s:4124   .text.reset_handler:000000000000227b $d
       stm32eforth.s:4124   .text.reset_handler:000000000000227c $t
       stm32eforth.s:4197   .text.reset_handler:0000000000002335 $d
       stm32eforth.s:4197   .text.reset_handler:0000000000002336 $t
       stm32eforth.s:4371   .text.reset_handler:00000000000024f5 $d
       stm32eforth.s:4371   .text.reset_handler:00000000000024f6 $t
       stm32eforth.s:4443   .text.reset_handler:00000000000025c3 $d
       stm32eforth.s:4443   .text.reset_handler:00000000000025c4 $t
       stm32eforth.s:4463   .text.reset_handler:00000000000025fd $d
       stm32eforth.s:4463   .text.reset_handler:00000000000025fe $t
       stm32eforth.s:4510   .text.reset_handler:0000000000002665 $d
       stm32eforth.s:4510   .text.reset_handler:0000000000002666 $t
       stm32eforth.s:4550   .text.reset_handler:00000000000026db $d
       stm32eforth.s:4550   .text.reset_handler:00000000000026dc $t
       stm32eforth.s:4657   .text.reset_handler:0000000000002805 $d
       stm32eforth.s:4657   .text.reset_handler:0000000000002806 $t
       stm32eforth.s:4677   .text.reset_handler:000000000000283f $d
       stm32eforth.s:4677   .text.reset_handler:0000000000002840 $t
       stm32eforth.s:4933   .text.reset_handler:0000000000002b1b $d
       stm32eforth.s:4933   .text.reset_handler:0000000000002b1c $t
       stm32eforth.s:4977   .text.reset_handler:0000000000002bad $d
       stm32eforth.s:4977   .text.reset_handler:0000000000002bae $t
       stm32eforth.s:5034   .text.reset_handler:0000000000002ca7 $d
       stm32eforth.s:5038   .text.reset_handler:0000000000002cb1 $d
       stm32eforth.s:5038   .text.reset_handler:0000000000002cb2 $t
       stm32eforth.s:5050   .text.reset_handler:0000000000002cd5 $d
       stm32eforth.s:5050   .text.reset_handler:0000000000002cd6 $t
       stm32eforth.s:5054   .text.reset_handler:0000000000002ce3 $d
       stm32eforth.s:5070   .text.reset_handler:0000000000002d09 $d
       stm32eforth.s:5070   .text.reset_handler:0000000000002d0a $t
       stm32eforth.s:5074   .text.reset_handler:0000000000002d17 $d
       stm32eforth.s:5078   .text.reset_handler:0000000000002d1f $d
       stm32eforth.s:5082   .text.reset_handler:0000000000002d2b $d
       stm32eforth.s:5082   .text.reset_handler:0000000000002d2c $t

UNDEFINED SYMBOLS
_mstack
