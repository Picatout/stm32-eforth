ARM GAS  stm32eforth.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  stm32eforth.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.p2align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.p2aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m3
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
ARM GAS  stm32eforth.s 			page 3


  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
ARM GAS  stm32eforth.s 			page 4


  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
  81              	
  82              	/* blue pill specific constants */ 
  83              	  .equ LED_GPIO, GPIOC_BASE_ADR
  84              	  .equ LED_PIN, 13
  85              	  .equ UART, USART1_BASE_ADR 
  86              	
  87              	/* eForth specific constants */
  88              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  89              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  90              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  91              	.equ UPP ,	0x20000000	/*start of user area (UP0) */
  92              	.equ DTOP ,	0x20000100	/*start of usable RAM area (HERE) */
  93              	.equ DEND , 0x20004E00  /*usable RAM end */
  94              	 .equ RAMOFFSET ,	0x20000000	// remap
  95              	 .equ RAMEND, 0x20005000 // 20Ko
  96              	 .equ FLASHOFFSET ,	0x08000c00	// remap
  97              	//.equ RAMOFFSET  ,	0x00000000	/* absolute */
  98              	//.equ MAPOFFSET  ,	0x00000000	/* absolute */
  99              	  .equ MAPOFFSET , (RAMOFFSET-FLASHOFFSET)
 100              	
 101              	/*************************************
 102              	   system variables offset from UPP
 103              	*************************************/
 104              	  .equ SEED_OFS, 4    // prng seed 
 105              	  .equ TICKS_OFS, SEED_OFS+4  // millseconds counter
ARM GAS  stm32eforth.s 			page 5


 106              	  .equ TIMER_OFS, TICKS_OFS+4  // count down timer
 107              	  .equ BOOT_OFS, TIMER_OFS+4  // boot program address
 108              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
 109              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
 110              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
 111              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
 112              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
 113              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
 114              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
 115              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
 116              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
 117              	  .equ FLSH_CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
 118              	  .equ RAM_CTOP_OFS, FLSH_CTOP_OFS+4  // ram free dictionary address
 119              	  .equ LASTN_OFS, RAM_CTOP_OFS+4     // last word in dictionary link nfa 
 120              	  .equ USER_BEGIN_OFS, LASTN_OFS+4 // start of user area in RAM 
 121              	  .equ USER_END_OFS, USER_BEGIN_OFS+4  // end of user area in RAM 
 122              	  .equ USER_IMG_OFS,USER_END_OFS+4  // user image save area address  
 123              	
 124              	/***********************************************
 125              	* MACROS
 126              	*	Assemble inline direct threaded code ending.
 127              	***********************************************/
 128              	 	.macro	_NEXT /*end low level word */
 129              		BX	LR
 130              		.endm
 131              	
 132              	 	.macro	_NEST /*start high level word */
 133              		STMFD	R2!,{LR}
 134              		.endm
 135              	
 136              	 	.macro	_UNNEST	/*end high level word */
 137              		LDMFD	R2!,{PC}
 138              		.endm
 139              	
 140              	 	.macro	_DOLIT /*long literals */
 141              		BL	DOLIT
 142              		.endm
 143              	
 144              	 	.macro	_PUSH	/*push R5 on data stack*/
 145              		STR	R5,[R1,#-4]!
 146              		.endm
 147              	
 148              	 	.macro	_POP /*pop data stack to R5 */
 149              		LDR	R5,[R1],#4
 150              		.endm
 151              	
 152              	/*************************************
 153              	*   interrupt service vectors table 
 154              	**************************************/
 155              	   .section  .isr_vector,"a",%progbits
 156              	  .type  isr_vectors, %object
 157              	
 158              	isr_vectors:
 159 0000 00000000 	  .word   _mstack          /* main return stack address */
 160 0004 00000000 	  .word   reset_handler    /* startup address */
 161              	/* core interrupts || exceptions */
 162 0008 00000000 	  .word   default_handler  /*  NMI */
ARM GAS  stm32eforth.s 			page 6


 163 000c 00000000 	  .word   default_handler  /*  HardFault */
 164 0010 00000000 	  .word   default_handler  /*  Memory Management */
 165 0014 00000000 	  .word   default_handler  /* Bus fault */
 166 0018 00000000 	  .word   default_handler  /* Usage fault */
 167 001c 00000000 	  .word   0
 168 0020 00000000 	  .word   0
 169 0024 00000000 	  .word   0
 170 0028 00000000 	  .word   0
 171 002c 00000000 	  .word   default_handler  /* SWI instruction */
 172 0030 00000000 	  .word   default_handler  /* Debug monitor */
 173 0034 00000000 	  .word   0
 174 0038 00000000 	  .word   default_handler  /* PendSV */
 175 003c 00000000 	  .word   systick_handler  /* Systick */
 176              	  
 177              	  /* External Interrupts */
 178 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 179 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 180 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 181 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 182 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 183 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 184 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 185 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 186 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 187 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 188 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 189 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 190 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 191 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 192 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 193 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 194 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 195 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 196 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 197 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 198 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 199 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 200 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 201 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 202 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 203 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 204 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 205 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 206 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 207 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 208 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 209 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 210 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 211 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 212 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 213 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 214 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 215 00d4 00000000 	  .word      default_handler /* IRQ37, USART1 */                   
 216 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 217 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 218 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 219 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
ARM GAS  stm32eforth.s 			page 7


 220 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 221 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 222 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 223 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 224 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 225 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 226 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 227 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 228 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 229 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 230 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 231 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 232 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 233 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 234 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 235 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 236 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 237 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 238              	
 239              	  .size  isr_vectors, .-isr_vectors
 240              	
 241              	/*****************************************************
 242              	* default isr handler called on unexpected interrupt
 243              	*****************************************************/
 244              	    .section  .text.default_handler,"ax",%progbits
 245              	
 246              	  .type default_handler, %function
 247              	  .p2align 2 
 248              	  .global default_handler
 249              	default_handler:
 250 0000 DFF81870 		ldr r7,exception_msg 
 251 0004 17F8010B 		ldrb r0,[r7],#1 
 252 0008 41F8045D 	1:	_PUSH 
 253 000c 17F8015B 		ldrb r5,[r7],#1
 254 0010 00F0AEFA 		bl EMIT 
 255 0014 0138     		subs r0,r0,#1 
 256 0016 F7D1     		bne 1b 	
 257 0018 FFF7FEBF 		b reset_handler   
 258              	  .size  default_handler, .-default_handler
 259              	exception_msg:
 260 001c 20000000 		.word .+4 
 261 0020 12       		.byte 18
 262 0021 0A0D6578 		.ascii "\n\rexeption reboot!"
 262      65707469 
 262      6F6E2072 
 262      65626F6F 
 262      7421
 263 0033 00       		.p2align 2
 264              	
 265              	/*********************************
 266              		system milliseconds counter
 267              	*********************************/	
 268              	  .type systick_handler, %function
 269              	  .p2align 2 
 270              	  .global systick_handler
 271              	systick_handler:
 272 0034 4FF00003 	  mov r3,#UPP&0xffff
ARM GAS  stm32eforth.s 			page 8


 273 0038 C2F20003 	  movt r3,#UPP>>16  	
 274 003c 9868     	  ldr r0,[r3,#TICKS_OFS]  
 275 003e 00F10100 	  add r0,#1
 276 0042 9860     	  str r0,[r3,#TICKS_OFS]
 277 0044 D868     	  ldr r0,[r3,#TIMER_OFS]
 278 0046 10B1     	  cbz r0, systick_exit
 279 0048 A0F10100 	  sub r0,#1
 280 004c D860     	  str r0,[r3,#TIMER_OFS]
 281              	systick_exit:
 282 004e 7047     	  bx lr
 283              	
 284              	
 285              	/**************************************
 286              	  reset_handler execute at MCU reset
 287              	***************************************/
 288              	    .section  .text.reset_handler
 289              	  .type  reset_handler, %function
 290              	  .p2align 2 
 291              	  .global reset_handler
 292              	reset_handler:
 293 0000 00F070F8 		bl	remap 
 294 0004 00F006F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 295              	//	bl	UNLOCK			/* unlock flash memory */
 296 0008 0148     		ldr r0,forth_entry
 297 000a 40F00100 		orr r0,#1
 298 000e 0047     		bx r0 
 299              	forth_entry:
 300 0010 2C190018 		.word COLD+MAPOFFSET 
 301              	
 302              	  .type init_devices, %function
 303              	  .p2align 2 
 304              	init_devices:
 305              	/* init clock to HSE 72 Mhz */
 306              	/* set 2 wait states in FLASH_ACR_LATENCY */
 307 0014 4FF40050 		mov r0,#FLASH_BASE_ADR&0xffff
 308 0018 C4F20200 		movt r0,#FLASH_BASE_ADR>>16 
 309 001c 4FF01202 	  mov r2,#0x12
 310 0020 0260     	  str r2,[r0,#FLASH_ACR]
 311              	/* configure clock for HSE, 8 Mhz crystal */
 312              	/* enable HSE in RCC_CR */
 313 0022 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 314 0026 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 315 002a 0168     	  ldr r1,[r0,#RCC_CR]
 316 002c 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 317 0030 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 318              	/* wait HSERDY loop */
 319              	wait_hserdy:
 320 0032 0168     	  ldr r1,[r0,#RCC_CR]
 321 0034 11F4003F 	  tst r1,#(1<<17)
 322 0038 FBD0     	  beq wait_hserdy
 323              	
 324              	/************************************************* 
 325              	   configure PLL mul factor and source 
 326              	   SYSCLOCK=72 Mhz
 327              	   select HSE as  PLL source clock
 328              	   multiply frequency by 9 
 329              	   APB1 clock is limited to 36 Mhz so divide by 2 
ARM GAS  stm32eforth.s 			page 9


 330              	****************************************************/
 331 003a 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 332 003e C0F21D01 	  movt r1,#(7<<2)|1
 333 0042 4160     	  str r1,[r0,#RCC_CFGR]
 334              	  /* enable PLL */
 335 0044 0168     	  ldr r1,[r0,#RCC_CR]
 336 0046 41F08071 	  orr r1, #1<<24 
 337 004a 0160     	  str r1,[r0,#RCC_CR]
 338              	/* wait for PLLRDY */
 339              	wait_pllrdy:
 340 004c 0168     	  ldr r1,[r0,#RCC_CR]
 341 004e 11F0007F 	  tst r1,#(1<<25)
 342 0052 FBD0     	  beq wait_pllrdy 
 343              	/* select PLL as sysclock */
 344 0054 4168     	  ldr r1,[r0,#RCC_CFGR]
 345 0056 4FF6FC72 	  mov r2,#0xfffc
 346 005a CFF6FF72 	  movt r2,#0xffff
 347 005e 01EA0201 	  and r1,r1,r2 
 348 0062 4FF00202 	  mov r2,#2
 349 0066 41EA0201 	  orr r1,r1,r2
 350 006a 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 351              	/* wait for SWS==2 */
 352              	wait_sws:
 353 006c 4168     	  ldr r1,[r0,#RCC_CFGR]
 354 006e 11F0080F 	  tst r1,#(2<<2)
 355 0072 FBD0     	  beq wait_sws
 356              	/* now sysclock is 72 Mhz */
 357              	
 358              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 359 0074 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 360 0078 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 361 007c 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 362 0080 8161     	  str	r1, [r0, #RCC_APB2ENR]
 363              	
 364              	/* configure GPIOC:13 as output for user LED */
 365 0082 4FF48050 	  mov r0,#GPIOC_BASE_ADR&0xffff
 366 0086 C4F20100 	  movt r0,#GPIOC_BASE_ADR>>16
 367 008a 4168     	  ldr r1,[r0,#GPIO_CRH]
 368 008c 6FF47002 	  mvn r2,#(15<<20)
 369 0090 01EA0201 	  and r1,r1,r2
 370 0094 4FF4C002 	  mov r2,#(6<<20)
 371 0098 41EA0201 	  orr r1,r1,r2
 372 009c 4160     	  str r1,[r0,#GPIO_CRH]
 373              	
 374              	/* configure USART1 */
 375              	/* set GPIOA PIN 9, uart TX  */
 376 009e 4FF40060 	  mov r0,#GPIOA_BASE_ADR&0XFFFF
 377 00a2 C4F20100 	  movt r0,#GPIOA_BASE_ADR>>16	
 378 00a6 4168     	  ldr r1,[r0,#GPIO_CRH]
 379 00a8 6FF0F002 	  mvn r2,#(15<<4)
 380 00ac 01EA0201 	  and r1,r1,r2
 381 00b0 4FF0A002 	  mov r2,#(0xA<<4)
 382 00b4 41EA0201 	  orr r1,r1,r2 
 383 00b8 4160     	  str r1,[r0,#GPIO_CRH]
 384              	
 385 00ba 4FF46050 	  mov r0,#UART&0xFFFF
 386 00be C4F20100 	  movt r0,#UART>>16	
ARM GAS  stm32eforth.s 			page 10


 387              	/* BAUD rate */
 388 00c2 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 389 00c6 8160     	  str r1,[r0,#USART_BRR]
 390 00c8 42F20C01 	  mov r1,#(3<<2)+(1<<13)
 391 00cc C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 392              	/* configure systicks for 1msec ticks */
 393 00ce 4EF21000 	  mov r0,#STK_BASE_ADR&0xFFFF
 394 00d2 CEF20000 	  movt r0,#STK_BASE_ADR>>16	
 395 00d6 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 396 00da 4160     	  str r1,[r0,#STK_LOAD]
 397 00dc 4FF00301 	  mov r1,#3
 398 00e0 0160     	  str r1,[r0,STK_CTL]
 399 00e2 7047     	  _NEXT  
 400              	
 401              	/* copy system to RAM */ 
 402              		.type remap, %function 
 403              	
 404              	remap:
 405 00e4 DFF83400 		ldr r0,remap_dest  
 406 00e8 0B49     		ldr r1,remap_src 
 407 00ea 42F29612 		mov r2,#CTOP-UZERO 
 408 00ee 02F10302 		add r2,r2,#3
 409 00f2 22F00302 		and r2,r2,#~3 
 410 00f6 51F8043B 	1:	ldr r3,[r1],#4 
 411 00fa 40F8043B 		str r3,[r0],#4 
 412 00fe 043A     		subs R2,#4 
 413 0100 F9D1     		bne 1b
 414              	// zero end of RAM 
 415 0102 4FF4A042 		mov r2,#0x5000
 416 0106 C2F20002 		movt r2,#0x2000
 417 010a 83EA0303 		eor r3,r3,r3 
 418 010e 40F8043B 	2:  str r3,[r0],#4
 419 0112 9042     		cmp r0,r2 
 420 0114 FBDB     		blt 2b 
 421 0116 7047     		_NEXT 
 422              	remap_src:
 423 0118 00040000 		.word UZERO 
 424              	remap_dest:
 425 011c 00000020 		.word RAMOFFSET 
 426              	
 427              	/********************
 428              	* Version control
 429              	*******************/
 430              	.equ VER ,	0x01	/*major release version */
 431              	.equ EXT ,	0x00	/*minor extension */
 432              	
 433              	/* Constants */
 434              	
 435              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 436              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 437              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 438              	
 439              	.equ CELLL ,	4	/*size of a cell */
 440              	.equ BASEE ,	10	/*default radix */
 441              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 442              	
 443              	.equ BKSPP ,	8	/*backspace */
ARM GAS  stm32eforth.s 			page 11


 444              	.equ LF ,	10	  /*line feed */
 445              	.equ CRR ,	13	/*carriage return */
 446              	.equ ERR ,	27	/*error escape */
 447              	.equ TIC ,	39	/*tick */
 448              	
 449              	/********************************************************
 450              	* RAM memory mapping
 451              	* 	0x20000000	RAM base address
 452              	*	0x20000000  system variables	
 453              	* 	0x20000100	Forth dictionary
 454              	* 	0x2000????	top of dictionary, HERE
 455              	* 	0x2000????	WORD buffer, HERE+16
 456              	*   0x20004E00  end of user space
 457              	* 	0x20004E80	top of data stack  R2
 458              	* 	0x20004E80	TIB terminal input buffer
 459              	* 	0x20004F80	top of return stack  R1
 460              	* 	0x20005000	top of hardware stack for interrupts R14
 461              	********************************************************/
 462              	
 463              	
 464              	/******************************************************
 465              	*  COLD start moves the following to USER variables.
 466              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 467              	******************************************************/
 468 0120 AFF30080 		.p2align 10
 468      AFF30080 
 468      AFF30080 
 468      AFF30080 
 468      AFF30080 
 469              	
 470              	UZERO:
 471 0400 00000000 		.word 0  			/*Reserved */
 472 0404 55AA0000 		.word 0xaa55 /* PRNG seed */ 
 473 0408 00000000 		.word 0      /* system Ticks */
 474 040c 00000000 	    .word 0     /* delay timer */
 475 0410 B8180018 		.word HI+MAPOFFSET  	/*'BOOT */
 476 0414 0A000000 		.word BASEE 	/*BASE */
 477 0418 00000000 		.word 0			/*tmp */
 478 041c 00000000 		.word 0			/*SPAN */
 479 0420 00000000 		.word 0			/*>IN */
 480 0424 00000000 		.word 0			/*#TIB */
 481 0428 804E0020 		.word TIBB	/*TIB */
 482 042c 100E0018 		.word INTER+MAPOFFSET	/*'EVAL */
 483 0430 00000000 		.word 0			/*HLD */
 484 0434 24190018 		.word LASTN+MAPOFFSET	/*CONTEXT */
 485 0438 96190018 		.word CTOP+MAPOFFSET	/*end of dictionnary */
 486 043c 96190018 		.word CTOP+MAPOFFSET	/* end of RAM dictionary RAM */
 487 0440 24190018 		.word LASTN+MAPOFFSET	/*LAST word in dictionary */
 488 0444 96190018 		.word CTOP+MAPOFFSET    /* beginning of USER dictionary space */
 489 0448 004E0020 		.word DEND              /* end of USER dictionary space */
 490 044c 00280000 		.word USER				 /*user image save area address */ 
 491 0450 00000000 		.word 0,0			/*reserved */
 491      00000000 
 492              	ULAST:
 493              	 
 494              	
 495              	/***********************************
ARM GAS  stm32eforth.s 			page 12


 496              	//  Start of Forth dictionary
 497              	***********************************/
 498              	
 499              		.p2align 2 
 500              	
 501              	// RANDOM ( n1 -- {0..n1-1} )
 502              	// return pseudo random number 
 503              	// REF: https://en.wikipedia.org/wiki/Xorshift
 504              	
 505 0458 00000000 		.word 0
 506 045c 06       	_RAND: .byte 6
 507 045d 52414E44 		.ascii "RANDOM"
 507      4F4D
 508 0463 00       		.p2align 2 
 509              	RAND:
 510 0464 42F804ED 		_NEST 
 511 0468 00F0EEFA 		bl SEED 
 512 046c 00F0D2F8 		bl AT 
 513 0470 4FEA4534 		lsl r4,r5,#13
 514 0474 85EA0405 		eor r5,r4
 515 0478 4FEA5544 		lsr r4,r5,#17
 516 047c 85EA0405 		eor r5,r4
 517 0480 4FEA4514 		lsl r4,r5,#5
 518 0484 85EA0405 		eor r5,r4
 519 0488 00F008F9 		bl DUPP 
 520 048c 00F0DCFA 		bl SEED 
 521 0490 00F0B6F8 		bl STORE 
 522 0494 00F036FA 		bl ABSS
 523 0498 00F008F9 		bl SWAP 
 524 049c 00F00EFC 		bl MODD 
 525 04a0 52F804FB 		_UNNEST 
 526              	
 527              	// REBOOT ( -- )
 528              	// hardware reset 
 529 04a4 5CF8FF17 		.word _RAND+MAPOFFSET
 530 04a8 06       	_REBOOT: .byte 6
 531 04a9 5245424F 		.ascii "REBOOT"
 531      4F54
 532 04af 00       		.p2align 2 
 533              	REBOOT:
 534 04b0 0348     		ldr r0,scb_adr 
 535 04b2 C168     		ldr r1,[r0,#SCB_AIRCR]
 536 04b4 41F00401 		orr r1,#(1<<2)
 537 04b8 C0F2FA51 		movt r1,#SCB_VECTKEY
 538 04bc C160     		str r1,[r0,#SCB_AIRCR]
 539 04be FEE7     		b . 
 540              	scb_adr:
 541 04c0 00ED00E0 		.word SCB_BASE_ADR 
 542              	// PAUSE ( u -- ) 
 543              	// suspend execution for u milliseconds
 544 04c4 A8F8FF17 		.word _REBOOT+MAPOFFSET
 545 04c8 05       	_PAUSE: .byte 5
 546 04c9 50415553 		.ascii "PAUSE"
 546      45
 547 04ce 00BF     		.p2align 2
 548              	PAUSE:
 549 04d0 42F804ED 		_NEST 
ARM GAS  stm32eforth.s 			page 13


 550 04d4 00F0CCFA 		BL TIMER 
 551 04d8 00F092F8 		BL STORE 
 552              	PAUSE_LOOP:
 553 04dc 00F0C8FA 		BL TIMER 
 554 04e0 00F098F8 		BL AT 
 555 04e4 00F070F8 		BL QBRAN 
 556 04e8 F4040000 		.word PAUSE_EXIT 
 557 04ec 00F078F8 		BL BRAN 
 558 04f0 DC040000 		.word PAUSE_LOOP 
 559              	PAUSE_EXIT: 		
 560 04f4 52F804FB 		_UNNEST 
 561              	
 562              	//  ULED ( T|F -- )
 563              	// control user LED, -1 ON, 0 OFF  
 564 04f8 C8F8FF17 		.word _PAUSE + MAPOFFSET
 565 04fc 04       	_ULED: .byte 4
 566 04fd 554C4544 		.ascii "ULED"
 567 0501 0000BF   		.p2align 2
 568              		.type ULED, %function 
 569              	ULED:
 570 0504 4FF40056 		mov r6,#(1<<LED_PIN)
 571 0508 4FF48054 		mov r4,#LED_GPIO&0xffff
 572 050c C4F20104 		movt r4,#LED_GPIO>>16
 573 0510 2800     		movs r0,r5 
 574 0512 51F8045B 		_POP
 575 0516 01D0     		beq ULED_OFF 
 576 0518 6661     		str r6,[r4,#GPIO_BRR]
 577 051a 7047     		_NEXT 
 578              	ULED_OFF:
 579 051c 2661     		str r6,[r4,#GPIO_BSRR]
 580 051e 7047     		_NEXT 
 581              		
 582              	//    ?RX	 ( -- c T | F )
 583              	// 	Return input character and true, or a false if no input.
 584 0520 FCF8FF17 		.word	_ULED+MAPOFFSET
 585 0524 04       	_QRX:	.byte   4
 586 0525 3F4B4559 		.ascii "?KEY"
 587 0529 0000BF   		.p2align 2 
 588              	QKEY:
 589              	QRX: 
 590 052c 41F8045D 		_PUSH
 591 0530 4FF46054 		mov r4,#UART&0xFFFF
 592 0534 C4F20104 		movt r4,#UART>>16
 593 0538 2688     		ldrh	r6, [r4, #USART_SR]
 594 053a 16F02006 		ands	r6, #0x20		//  RXE
 595 053e 05D0     		BEQ	QRX1
 596 0540 6568     	 	LDR	R5, [R4, #USART_DR]
 597 0542 41F8045D 		_PUSH
 598 0546 18BF     	    IT NE 
 599 0548 6FF00005 		MVNNE	R5,#0
 600              	QRX1:
 601 054c 08BF     		IT EQ 
 602 054e 0025     	    MOVEQ	R5,#0
 603 0550 7047     		_NEXT
 604 0552 00BF     		.p2align 2 
 605              	
 606              	//    TX!	 ( c -- )
ARM GAS  stm32eforth.s 			page 14


 607              	// 	Send character c to the output device.
 608              	
 609 0554 24F9FF17 		.word	_QRX+MAPOFFSET
 610 0558 04       	_TXSTO:	.byte 4
 611 0559 454D4954 		.ascii "EMIT"
 612 055d 0000BF   		.p2align 2 	
 613              	TXSTO:
 614              	EMIT:
 615              	TECHO:
 616 0560 4FF46054 		mov r4,#UART&0xFFFF
 617 0564 C4F20104 		movt r4,#UART>>16
 618              	TX1:
 619 0568 2688     		ldrh	r6, [r4, #USART_SR]	
 620 056a 16F08006 		ands	r6, #0x80		//  TXE bit 
 621 056e FBD0     		beq	TX1
 622 0570 A580     		strh	r5, [r4, #USART_DR]	
 623 0572 51F8045B 		_POP
 624 0576 7047     		_NEXT
 625              	
 626              	
 627              		
 628              	// **************************************************************************
 629              	//  The kernel
 630              	
 631              	//    NOP	( -- )
 632              	// 	do nothing.
 633              	
 634 0578 58F9FF17 		.word	_TXSTO+MAPOFFSET
 635 057c 03       	_NOP:	.byte   3
 636 057d 4E4F50   		.ascii "NOP"
 637              		.p2align 2 	
 638              	NOP:
 639 0580 7047     		_NEXT
 640              	 
 641              	
 642              	//    doLIT	( -- w )
 643              	// 	Push an inline literal.
 644              	
 645              	// 	.word	_NOP+MAPOFFSET
 646              	// _LIT	.byte   COMPO+5
 647              	// 	.ascii "doLIT"
 648              	// 	.p2align 2 	
 649              	DOLIT:
 650 0582 41F8045D 		_PUSH				//  store R5 on data stack
 651 0586 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 652 058a 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 653 058e 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 654 0592 7047     		_NEXT
 655              	
 656              	//    EXECUTE	( ca -- )
 657              	// 	Execute the word at ca.
 658              	
 659 0594 7CF9FF17 		.word	_NOP+MAPOFFSET
 660 0598 07       	_EXECU:	.byte   7
 661 0599 45584543 		.ascii "EXECUTE"
 661      555445
 662              		.p2align 2 	
ARM GAS  stm32eforth.s 			page 15


 663              	EXECU:
 664 05a0 45F00104 		ORR	R4,R5,#1		//  b0=1 
 665 05a4 51F8045B 		_POP
 666 05a8 2047     		BX	R4
 667              	
 668              	//    next	( -- ) counter on R:
 669              	// 	Run time code for the single index loop.
 670              	// 	: next ( -- ) \ hilevel model
 671              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 672              	
 673              	// 	.word	_EXECU+MAPOFFSET
 674              	// _DONXT	.byte   COMPO+4
 675              	// 	.ascii "next"
 676              	// 	.p2align 2 	
 677              	DONXT:
 678 05aa 1468     		LDR	R4,[R2]   // ( -- u )  
 679 05ac 24B9     		CBNZ R4,NEXT1 
 680              		/* loop done */
 681 05ae 02F10402 		ADD	R2,R2,#4 // drop counter 
 682 05b2 0EF1040E 		ADD	LR,LR,#4 // skip after loop address 
 683 05b6 7047     		_NEXT
 684              	NEXT1:
 685              		/* decrement loop counter */
 686 05b8 A4F10104 		SUB	R4,R4,#1
 687 05bc 1460     		STR	R4,[R2]
 688 05be 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 689 05c2 4EF0010E 		ORR	LR,LR,#1 // begining of loop
 690 05c6 7047     		_NEXT
 691              	
 692              	//    ?branch	( f -- )
 693              	// 	Branch if flag is zero.
 694              	
 695              	// 	.word	_DONXT+MAPOFFSET
 696              	// _QBRAN	.byte   COMPO+7
 697              	// 	.ascii "?branch"
 698              	// 	.p2align 2 	
 699              	QBRAN:
 700 05c8 2C00     		MOVS	R4,R5
 701 05ca 51F8045B 		_POP
 702 05ce 04D1     		BNE	QBRAN1
 703 05d0 5EF801EC 		LDR	LR,[LR,#-1]
 704 05d4 4EF0010E 		ORR LR,LR,#1
 705 05d8 7047     		_NEXT
 706              	QBRAN1:
 707 05da 0EF1040E 	 	ADD	LR,LR,#4
 708 05de 7047     		_NEXT
 709              	
 710              	//    branch	( -- )
 711              	// 	Branch to an inline address.
 712              	
 713              	// 	.word	_QBRAN+MAPOFFSET
 714              	// _BRAN	.byte   COMPO+6
 715              	// 	.ascii "branch"
 716              	// 	.p2align 2 	
 717              	BRAN:
 718 05e0 5EF801EC 		LDR	LR,[LR,#-1]
 719 05e4 4EF0010E 		ORR	LR,LR,#1
ARM GAS  stm32eforth.s 			page 16


 720 05e8 7047     		_NEXT
 721              	
 722              	//    EXIT	(  -- )
 723              	// 	Exit the currently executing command.
 724              	
 725 05ea 98F9FF17 		.word	_EXECU+MAPOFFSET
 726 05ee 04       	_EXIT:	.byte   4
 727 05ef 45584954 		.ascii "EXIT"
 728 05f3 00       		.p2align 2 	
 729              	EXIT:
 730 05f4 52F804FB 		_UNNEST
 731              	
 732              	//    !	   ( w a -- )
 733              	// 	Pop the data stack to memory.
 734              	
 735 05f8 EEF9FF17 		.word	_EXIT+MAPOFFSET
 736 05fc 01       	_STORE:	.byte   1
 737 05fd 21       		.ascii "!"
 738 05fe 00BF     		.p2align 2 	
 739              	STORE:
 740 0600 51F8044B 		LDR	R4,[R1],#4
 741 0604 2C60     		STR	R4,[R5]
 742 0606 51F8045B 		_POP
 743 060a 7047     		_NEXT
 744              	
 745              	//    @	   ( a -- w )
 746              	// 	Push memory location to the data stack.
 747              	
 748 060c FCF9FF17 		.word	_STORE+MAPOFFSET
 749 0610 01       	_AT:	.byte   1
 750 0611 40       		.ascii "@"
 751 0612 00BF     		.p2align 2 	
 752              	AT:
 753 0614 2D68     		LDR	R5,[R5]
 754 0616 7047     		_NEXT
 755              	
 756              	//    C!	  ( c b -- )
 757              	// 	Pop the data stack to byte memory.
 758              	
 759 0618 10FAFF17 		.word	_AT+MAPOFFSET
 760 061c 02       	_CSTOR:	.byte   2
 761 061d 4321     		.ascii "C!"
 762 061f 00       		.p2align 2 	
 763              	CSTOR:
 764 0620 51F8044B 		LDR	R4,[R1],#4
 765 0624 2C70     		STRB	R4,[R5]
 766 0626 51F8045B 		_POP
 767 062a 7047     		_NEXT
 768              	
 769              	//    C@	  ( b -- c )
 770              	// 	Push byte memory location to the data stack.
 771              	
 772 062c 1CFAFF17 		.word	_CSTOR+MAPOFFSET
 773 0630 02       	_CAT:	.byte   2
 774 0631 4340     		.ascii "C@"
 775 0633 00       		.p2align 2 	
 776              	CAT:
ARM GAS  stm32eforth.s 			page 17


 777 0634 2D78     		LDRB	R5,[R5]
 778 0636 7047     		_NEXT
 779              	
 780              	//    R>	  ( -- w )
 781              	// 	Pop the return stack to the data stack.
 782              	
 783 0638 30FAFF17 		.word	_CAT+MAPOFFSET
 784 063c 02       	_RFROM:	.byte   2
 785 063d 523E     		.ascii "R>"
 786 063f 00       		.p2align 2 	
 787              	RFROM:
 788 0640 41F8045D 		_PUSH
 789 0644 52F8045B 		LDR	R5,[R2],#4
 790 0648 7047     		_NEXT
 791              	
 792              	//    R@	  ( -- w )
 793              	// 	Copy top of return stack to the data stack.
 794              	
 795 064a 3CFAFF17 		.word	_RFROM+MAPOFFSET
 796 064e 02       	_RAT:	.byte   2
 797 064f 5240     		.ascii "R@"
 798 0651 0000BF   		.p2align 2 	
 799              	RAT:
 800 0654 41F8045D 		_PUSH
 801 0658 1568     		LDR	R5,[R2]
 802 065a 7047     		_NEXT
 803              	
 804              	//    >R	  ( w -- )
 805              	// 	Push the data stack to the return stack.
 806              	
 807 065c 4EFAFF17 		.word	_RAT+MAPOFFSET
 808 0660 42       	_TOR:	.byte   COMPO+2
 809 0661 3E52     		.ascii ">R"
 810 0663 00       		.p2align 2 	
 811              	TOR:
 812 0664 42F8045D 		STR	R5,[R2,#-4]!
 813 0668 51F8045B 		_POP
 814 066c 7047     		_NEXT
 815              	
 816              	//    SP@	 ( -- a )
 817              	// 	Push the current data stack pointer.
 818              	
 819 066e 60FAFF17 		.word	_TOR+MAPOFFSET
 820 0672 03       	_SPAT:	.byte   3
 821 0673 535040   		.ascii "SP@"
 822 0676 00BF     		.p2align 2 	
 823              	SPAT:
 824 0678 41F8045D 		_PUSH
 825 067c 0D46     		MOV	R5,R1
 826 067e 7047     		_NEXT
 827              	
 828              	//    DROP	( w -- )
 829              	// 	Discard top stack item.
 830              	
 831 0680 72FAFF17 		.word	_SPAT+MAPOFFSET
 832 0684 04       	_DROP:	.byte   4
 833 0685 44524F50 		.ascii "DROP"
ARM GAS  stm32eforth.s 			page 18


 834 0689 0000BF   		.p2align 2 	
 835              	DROP:
 836 068c 51F8045B 		_POP
 837 0690 7047     		_NEXT
 838              	
 839              	//    DUP	 ( w -- w w )
 840              	// 	Duplicate the top stack item.
 841              	
 842 0692 84FAFF17 		.word	_DROP+MAPOFFSET
 843 0696 03       	_DUPP:	.byte   3
 844 0697 445550   		.ascii "DUP"
 845 069a 00BF     		.p2align 2 	
 846              	DUPP:
 847 069c 41F8045D 		_PUSH
 848 06a0 7047     		_NEXT
 849              	
 850              	//    SWAP	( w1 w2 -- w2 w1 )
 851              	// 	Exchange top two stack items.
 852              	
 853 06a2 96FAFF17 		.word	_DUPP+MAPOFFSET
 854 06a6 04       	_SWAP:	.byte   4
 855 06a7 53574150 		.ascii "SWAP"
 856 06ab 00       		.p2align 2 	
 857              	SWAP:
 858 06ac 0C68     		LDR	R4,[R1]
 859 06ae 0D60     		STR	R5,[R1]
 860 06b0 2546     		MOV	R5,R4
 861 06b2 7047     		_NEXT
 862              	
 863              	//    OVER	( w1 w2 -- w1 w2 w1 )
 864              	// 	Copy second stack item to top.
 865              	
 866 06b4 A6FAFF17 		.word	_SWAP+MAPOFFSET
 867 06b8 04       	_OVER:	.byte   4
 868 06b9 4F564552 		.ascii "OVER"
 869 06bd 0000BF   		.p2align 2 	
 870              	OVER:
 871 06c0 41F8045D 		_PUSH
 872 06c4 4D68     		LDR	R5,[R1,#4]
 873 06c6 7047     		_NEXT
 874              	
 875              	//    0<	  ( n -- t )
 876              	// 	Return true if n is negative.
 877              	
 878 06c8 B8FAFF17 		.word	_OVER+MAPOFFSET
 879 06cc 02       	_ZLESS:	.byte   2
 880 06cd 303C     		.ascii "0<"
 881 06cf 00       		.p2align 2 	
 882              	ZLESS:
 883 06d0 4FF00004 		MOV	R4,#0
 884 06d4 04EB2505 		ADD	R5,R4,R5,ASR #32
 885 06d8 7047     		_NEXT
 886              	
 887              	//    AND	 ( w w -- w )
 888              	// 	Bitwise AND.
 889              	
 890 06da CCFAFF17 		.word	_ZLESS+MAPOFFSET
ARM GAS  stm32eforth.s 			page 19


 891 06de 03       	_ANDD:	.byte   3
 892 06df 414E44   		.ascii "AND"
 893 06e2 00BF     		.p2align 2 	
 894              	ANDD:
 895 06e4 51F8044B 		LDR	R4,[R1],#4
 896 06e8 05EA0405 		AND	R5,R5,R4
 897 06ec 7047     		_NEXT
 898              	
 899              	//    OR	  ( w w -- w )
 900              	// 	Bitwise inclusive OR.
 901              	
 902 06ee DEFAFF17 		.word	_ANDD+MAPOFFSET
 903 06f2 02       	_ORR:	.byte   2
 904 06f3 4F52     		.ascii "OR"
 905 06f5 0000BF   		.p2align 2 	
 906              	ORR:
 907 06f8 51F8044B 		LDR	R4,[R1],#4
 908 06fc 45EA0405 		ORR	R5,R5,R4
 909 0700 7047     		_NEXT
 910              	
 911              	//    XOR	 ( w w -- w )
 912              	// 	Bitwise exclusive OR.
 913              	
 914 0702 F2FAFF17 		.word	_ORR+MAPOFFSET
 915 0706 03       	_XORR:	.byte   3
 916 0707 584F52   		.ascii "XOR"
 917 070a 00BF     		.p2align 2 	
 918              	XORR:
 919 070c 51F8044B 		LDR	R4,[R1],#4
 920 0710 85EA0405 		EOR	R5,R5,R4
 921 0714 7047     		_NEXT
 922              	
 923              	//    UM+	 ( w w -- w cy )
 924              	// 	Add two numbers, return the sum and carry flag.
 925              	
 926 0716 06FBFF17 		.word	_XORR+MAPOFFSET
 927 071a 03       	_UPLUS:	.byte   3
 928 071b 554D2B   		.ascii "UM+"
 929 071e 00BF     		.p2align 2 	
 930              	UPLUS:
 931 0720 0C68     		LDR	R4,[R1]
 932 0722 6419     		ADDS	R4,R4,R5
 933 0724 4FF00005 		MOV	R5,#0
 934 0728 45F10005 		ADC	R5,R5,#0
 935 072c 0C60     		STR	R4,[R1]
 936 072e 7047     		_NEXT
 937              	
 938              	//    RSHIFT	 ( w # -- w )
 939              	// 	arithmetic Right shift # bits.
 940              	
 941 0730 1AFBFF17 		.word	_UPLUS+MAPOFFSET
 942 0734 06       	_RSHIFT:	.byte   6
 943 0735 52534849 		.ascii "RSHIFT"
 943      4654
 944 073b 00       		.p2align 2 	
 945              	RSHIFT:
 946 073c 51F8044B 		LDR	R4,[R1],#4
ARM GAS  stm32eforth.s 			page 20


 947 0740 44FA05F5 		MOV	R5,R4,ASR R5
 948 0744 7047     		_NEXT
 949              	
 950              	//    LSHIFT	 ( w # -- w )
 951              	// 	Right shift # bits.
 952              	
 953 0746 34FBFF17 		.word	_RSHIFT+MAPOFFSET
 954 074a 06       	_LSHIFT:	.byte   6
 955 074b 4C534849 		.ascii "LSHIFT"
 955      4654
 956 0751 0000BF   		.p2align 2 	
 957              	LSHIFT:
 958 0754 51F8044B 		LDR	R4,[R1],#4
 959 0758 04FA05F5 		MOV	R5,R4,LSL R5
 960 075c 7047     		_NEXT
 961              	
 962              	//    +	 ( w w -- w )
 963              	// 	Add.
 964              	
 965 075e 4AFBFF17 		.word	_LSHIFT+MAPOFFSET
 966 0762 01       	_PLUS:	.byte   1
 967 0763 2B       		.ascii "+"
 968              		.p2align 2 	
 969              	PLUS:
 970 0764 51F8044B 		LDR	R4,[R1],#4
 971 0768 2544     		ADD	R5,R5,R4
 972 076a 7047     		_NEXT
 973              	
 974              	//    -	 ( w w -- w )
 975              	// 	Subtract.
 976              	
 977 076c 62FBFF17 		.word	_PLUS+MAPOFFSET
 978 0770 01       	_SUBB:	.byte   1
 979 0771 2D       		.ascii "-"
 980 0772 00BF     		.p2align 2 	
 981              	SUBB:
 982 0774 51F8044B 		LDR	R4,[R1],#4
 983 0778 C5EB0405 		RSB	R5,R5,R4
 984 077c 7047     		_NEXT
 985              	
 986              	//    *	 ( w w -- w )
 987              	// 	Multiply.
 988              	
 989 077e 70FBFF17 		.word	_SUBB+MAPOFFSET
 990 0782 01       	_STAR:	.byte   1
 991 0783 2A       		.ascii "*"
 992              		.p2align 2 	
 993              	STAR:
 994 0784 51F8044B 		LDR	R4,[R1],#4
 995 0788 04FB05F5 		MUL	R5,R4,R5
 996 078c 7047     		_NEXT
 997              	
 998              	//    UM*	 ( w w -- ud )
 999              	// 	Unsigned multiply.
 1000              	
 1001 078e 82FBFF17 		.word	_STAR+MAPOFFSET
 1002 0792 03       	_UMSTA:	.byte   3
ARM GAS  stm32eforth.s 			page 21


 1003 0793 554D2A   		.ascii "UM*"
 1004 0796 00BF     		.p2align 2 	
 1005              	UMSTA:
 1006 0798 0C68     		LDR	R4,[R1]
 1007 079a A5FB0467 		UMULL	R6,R7,R5,R4
 1008 079e 0E60     		STR	R6,[R1]
 1009 07a0 3D46     		MOV	R5,R7
 1010 07a2 7047     		_NEXT
 1011              	
 1012              	//    M*	 ( w w -- d )
 1013              	// 	signed multiply.
 1014              	
 1015 07a4 92FBFF17 		.word	_UMSTA+MAPOFFSET
 1016 07a8 02       	_MSTAR:	.byte   2
 1017 07a9 4D2A     		.ascii "M*"
 1018 07ab 00       		.p2align 2 	
 1019              	MSTAR:
 1020 07ac 0C68     		LDR	R4,[R1]
 1021 07ae 85FB0467 		SMULL	R6,R7,R5,R4
 1022 07b2 0E60     		STR	R6,[R1]
 1023 07b4 3D46     		MOV	R5,R7
 1024 07b6 7047     		_NEXT
 1025              	
 1026              	//    1+	 ( w -- w+1 )
 1027              	// 	Add 1.
 1028              	
 1029 07b8 A8FBFF17 		.word	_MSTAR+MAPOFFSET
 1030 07bc 02       	_ONEP:	.byte   2
 1031 07bd 312B     		.ascii "1+"
 1032 07bf 00       		.p2align 2 	
 1033              	ONEP:
 1034 07c0 05F10105 		ADD	R5,R5,#1
 1035 07c4 7047     		_NEXT
 1036              	
 1037              	//    1-	 ( w -- w-1 )
 1038              	// 	Subtract 1.
 1039              	
 1040 07c6 BCFBFF17 		.word	_ONEP+MAPOFFSET
 1041 07ca 02       	_ONEM:	.byte   2
 1042 07cb 312D     		.ascii "1-"
 1043 07cd 0000BF   		.p2align 2 	
 1044              	ONEM:
 1045 07d0 A5F10105 		SUB	R5,R5,#1
 1046 07d4 7047     		_NEXT
 1047              	
 1048              	//    2+	 ( w -- w+2 )
 1049              	// 	Add 1.
 1050              	
 1051 07d6 CAFBFF17 		.word	_ONEM+MAPOFFSET
 1052 07da 02       	_TWOP:	.byte   2
 1053 07db 322B     		.ascii "2+"
 1054 07dd 0000BF   		.p2align 2 	
 1055              	TWOP:
 1056 07e0 05F10205 		ADD	R5,R5,#2
 1057 07e4 7047     		_NEXT
 1058              	
 1059              	//    2-	 ( w -- w-2 )
ARM GAS  stm32eforth.s 			page 22


 1060              	// 	Subtract 2.
 1061              	
 1062 07e6 DAFBFF17 		.word	_TWOP+MAPOFFSET
 1063 07ea 02       	_TWOM:	.byte   2
 1064 07eb 322D     		.ascii "2-"
 1065 07ed 0000BF   		.p2align 2 	
 1066              	TWOM:
 1067 07f0 A5F10205 		SUB	R5,R5,#2
 1068 07f4 7047     		_NEXT
 1069              	
 1070              	//    CELL+	( w -- w+4 )
 1071              	// 	Add CELLL.
 1072              	
 1073 07f6 EAFBFF17 		.word	_TWOM+MAPOFFSET
 1074 07fa 05       	_CELLP:	.byte   5
 1075 07fb 43454C4C 		.ascii "CELL+"
 1075      2B
 1076              		.p2align 2 	
 1077              	CELLP:
 1078 0800 05F10405 		ADD	R5,R5,#CELLL
 1079 0804 7047     		_NEXT
 1080              	
 1081              	//    CELL-	( w -- w-4 )
 1082              	// 	Subtract CELLL.
 1083              	
 1084 0806 FAFBFF17 		.word	_CELLP+MAPOFFSET
 1085 080a 05       	_CELLM:	.byte   5
 1086 080b 43454C4C 		.ascii "CELL-"
 1086      2D
 1087              		.p2align 2 	
 1088              	CELLM:
 1089 0810 A5F10405 		SUB	R5,R5,#CELLL
 1090 0814 7047     		_NEXT
 1091              	 
 1092              	//    BL	( -- 32 )
 1093              	// 	Blank (ASCII space).
 1094              	
 1095 0816 0AFCFF17 		.word	_CELLM+MAPOFFSET
 1096 081a 02       	_BLANK:	.byte   2
 1097 081b 424C     		.ascii "BL"
 1098 081d 0000BF   		.p2align 2 	
 1099              	BLANK:
 1100 0820 41F8045D 		_PUSH
 1101 0824 4FF02005 		MOV	R5,#32
 1102 0828 7047     		_NEXT
 1103              	
 1104              	//    CELLS	( w -- w*4 )
 1105              	// 	Multiply 4.
 1106              	
 1107 082a 1AFCFF17 		.word	_BLANK+MAPOFFSET
 1108 082e 05       	_CELLS:	.byte   5
 1109 082f 43454C4C 		.ascii "CELLS"
 1109      53
 1110              		.p2align 2 	
 1111              	CELLS:
 1112 0834 4FEA8505 		MOV	R5,R5,LSL#2
 1113 0838 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 23


 1114              	
 1115              	//    CELL/	( w -- w/4 )
 1116              	// 	Divide by 4.
 1117              	
 1118 083a 2EFCFF17 		.word	_CELLS+MAPOFFSET
 1119 083e 05       	_CELLSL:	.byte   5
 1120 083f 43454C4C 		.ascii "CELL/"
 1120      2F
 1121              		.p2align 2 	
 1122              	CELLSL:
 1123 0844 4FEAA505 		MOV	R5,R5,ASR#2
 1124 0848 7047     		_NEXT
 1125              	
 1126              	//    2*	( w -- w*2 )
 1127              	// 	Multiply 2.
 1128              	
 1129 084a 3EFCFF17 		.word	_CELLSL+MAPOFFSET
 1130 084e 02       	_TWOST:	.byte   2
 1131 084f 322A     		.ascii "2*"
 1132 0851 0000BF   		.p2align 2 	
 1133              	TWOST:
 1134 0854 4FEA4505 		MOV	R5,R5,LSL#1
 1135 0858 7047     		_NEXT
 1136              	
 1137              	//    2/	( w -- w/2 )
 1138              	// 	Divide by 2.
 1139              	
 1140 085a 4EFCFF17 		.word	_TWOST+MAPOFFSET
 1141 085e 02       	_TWOSL:	.byte   2
 1142 085f 322F     		.ascii "2/"
 1143 0861 0000BF   		.p2align 2 	
 1144              	TWOSL:
 1145 0864 4FEA6505 		MOV	R5,R5,ASR#1
 1146 0868 7047     		_NEXT
 1147              	
 1148              	//    ?DUP	( w -- w w | 0 )
 1149              	// 	Conditional duplicate.
 1150              	
 1151 086a 5EFCFF17 		.word	_TWOSL+MAPOFFSET
 1152 086e 04       	_QDUP:	.byte   4
 1153 086f 3F445550 		.ascii "?DUP"
 1154 0873 00       		.p2align 2 	
 1155              	QDUP:
 1156 0874 2C00     		MOVS	R4,R5
 1157 0876 18BF     		IT NE 
 1158 0878 41F8045D 	    STRNE	R5,[R1,#-4]!
 1159 087c 7047     		_NEXT
 1160              	
 1161              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1162              	// 	Rotate top 3 items.
 1163              	
 1164 087e 6EFCFF17 		.word	_QDUP+MAPOFFSET
 1165 0882 03       	_ROT:	.byte   3
 1166 0883 524F54   		.ascii "ROT"
 1167 0886 00BF     		.p2align 2 	
 1168              	ROT:
 1169 0888 0C68     		LDR	R4,[R1]  // r4=w2 
ARM GAS  stm32eforth.s 			page 24


 1170 088a 0D60     		STR	R5,[R1]  // w3 replace w2 
 1171 088c 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1172 088e 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1173 0890 7047     		_NEXT
 1174              	
 1175              	//    2DROP	( w1 w2 -- )
 1176              	// 	Drop top 2 items.
 1177              	
 1178 0892 82FCFF17 		.word	_ROT+MAPOFFSET
 1179 0896 05       	_DDROP:	.byte   5
 1180 0897 3244524F 		.ascii "2DROP"
 1180      50
 1181              		.p2align 2 	
 1182              	DDROP:
 1183 089c 51F8045B 		_POP
 1184 08a0 51F8045B 		_POP
 1185 08a4 7047     		_NEXT
 1186              	
 1187              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1188              	// 	Duplicate top 2 items.
 1189              	
 1190 08a6 96FCFF17 		.word	_DDROP+MAPOFFSET
 1191 08aa 04       	_DDUP:	.byte   4
 1192 08ab 32445550 		.ascii "2DUP"
 1193 08af 00       		.p2align 2 	
 1194              	DDUP:
 1195 08b0 0C68     		LDR	R4,[R1] // r4=w1
 1196 08b2 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1197 08b6 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1198 08ba 7047     		_NEXT
 1199              	
 1200              	//    D+	( d1 d2 -- d3 )
 1201              	// 	Add top 2 double numbers.
 1202              	
 1203 08bc AAFCFF17 		.word	_DDUP+MAPOFFSET
 1204 08c0 02       	_DPLUS:	.byte   2
 1205 08c1 442B     		.ascii "D+"
 1206 08c3 00       		.p2align 2 	
 1207              	DPLUS:
 1208 08c4 51F8044B 		LDR	R4,[R1],#4
 1209 08c8 51F8046B 		LDR	R6,[R1],#4
 1210 08cc 0F68     		LDR	R7,[R1]
 1211 08ce E419     		ADDS	R4,R4,R7
 1212 08d0 0C60     		STR	R4,[R1]
 1213 08d2 45EB0605 		ADC	R5,R5,R6
 1214 08d6 7047     		_NEXT
 1215              	
 1216              	//    NOT	 ( w -- !w )
 1217              	// 	1"s complement.
 1218              	
 1219 08d8 C0FCFF17 		.word	_DPLUS+MAPOFFSET
 1220 08dc 03       	_INVER:	.byte   3
 1221 08dd 4E4F54   		.ascii "NOT"
 1222              		.p2align 2 	
 1223              	INVER:
 1224 08e0 6FEA0505 		MVN	R5,R5
 1225 08e4 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 25


 1226              	
 1227              	//    NEGATE	( w -- -w )
 1228              	// 	2's complement.
 1229              	
 1230 08e6 DCFCFF17 		.word	_INVER+MAPOFFSET
 1231 08ea 06       	_NEGAT:	.byte   6
 1232 08eb 4E454741 		.ascii "NEGATE"
 1232      5445
 1233 08f1 0000BF   		.p2align 2 	
 1234              	NEGAT:
 1235 08f4 C5F10005 		RSB	R5,R5,#0
 1236 08f8 7047     		_NEXT
 1237              	
 1238              	//    ABS	 ( w -- |w| )
 1239              	// 	Absolute.
 1240              	
 1241 08fa EAFCFF17 		.word	_NEGAT+MAPOFFSET
 1242 08fe 03       	_ABSS:	.byte   3
 1243 08ff 414253   		.ascii "ABS"
 1244 0902 00BF     		.p2align 2 	
 1245              	ABSS:
 1246 0904 15F0004F 		TST	R5,#0x80000000
 1247 0908 18BF     		IT NE
 1248 090a 6D42     	    RSBNE   R5,R5,#0
 1249 090c 7047     		_NEXT
 1250              	
 1251              	//  0= ( w -- f )
 1252              	// TOS==0?
 1253              	
 1254 090e FEFCFF17 		.word _ABSS+MAPOFFSET
 1255 0912 02       	_ZEQUAL: .byte 2
 1256 0913 303D     		.ascii "0="
 1257 0915 0000BF   		.p2align 2
 1258              	ZEQUAL:
 1259 0918 15B9     		cbnz r5,1f
 1260 091a 4FF0FF35 		mov r5,#-1
 1261 091e 7047     		_NEXT 
 1262 0920 85EA0505 	1:  eor r5,r5,r5  
 1263 0924 7047     		_NEXT 	
 1264              	
 1265              	//    =	 ( w w -- t )
 1266              	// 	Equal?
 1267              	
 1268 0926 12FDFF17 		.word	_ZEQUAL+MAPOFFSET
 1269 092a 01       	_EQUAL:	.byte   1
 1270 092b 3D       		.ascii "="
 1271              		.p2align 2 	
 1272              	EQUAL:
 1273 092c 51F8044B 		LDR	R4,[R1],#4
 1274 0930 A542     		CMP	R5,R4
 1275 0932 0CBF     		ITE EQ 
 1276 0934 6FF00005 	    MVNEQ	R5,#0
 1277 0938 0025     		MOVNE	R5,#0
 1278 093a 7047     		_NEXT
 1279              	
 1280              	//    U<	 ( w w -- t )
 1281              	// 	Unsigned equal?
ARM GAS  stm32eforth.s 			page 26


 1282              	
 1283 093c 2AFDFF17 		.word	_EQUAL+MAPOFFSET
 1284 0940 02       	_ULESS:	.byte   2
 1285 0941 553C     		.ascii "U<"
 1286 0943 00       		.p2align 2 	
 1287              	ULESS:
 1288 0944 51F8044B 		LDR	R4,[R1],#4
 1289 0948 AC42     		CMP	R4,R5
 1290 094a 34BF     		ITE CC 
 1291 094c 6FF00005 		MVNCC	R5,#0
 1292 0950 0025     		MOVCS	R5,#0
 1293 0952 7047     		_NEXT
 1294              	
 1295              	//    <	( w w -- t )
 1296              	// 	Less?
 1297              	
 1298 0954 40FDFF17 		.word	_ULESS+MAPOFFSET
 1299 0958 01       	_LESS:	.byte   1
 1300 0959 3C       		.ascii "<"
 1301 095a 00BF     		.p2align 2 	
 1302              	LESS:
 1303 095c 51F8044B 		LDR	R4,[R1],#4
 1304 0960 AC42     		CMP	R4,R5
 1305 0962 B4BF     	    ITE LT
 1306 0964 6FF00005 		MVNLT	R5,#0
 1307 0968 0025     		MOVGE	R5,#0
 1308 096a 7047     		_NEXT
 1309              	
 1310              	//    >	( w w -- t )
 1311              	// 	greater?
 1312              	
 1313 096c 58FDFF17 		.word	_LESS+MAPOFFSET
 1314 0970 01       	_GREAT:	.byte   1
 1315 0971 3E       		.ascii ">"
 1316 0972 00BF     		.p2align 2 	
 1317              	GREAT:
 1318 0974 51F8044B 		LDR	R4,[R1],#4
 1319 0978 AC42     		CMP	R4,R5
 1320 097a CCBF     		ITE GT
 1321 097c 6FF00005 	    MVNGT	R5,#0
 1322 0980 0025     		MOVLE	R5,#0
 1323 0982 7047     		_NEXT
 1324              	
 1325              	//    MAX	 ( w w -- max )
 1326              	// 	Leave maximum.
 1327              	
 1328 0984 70FDFF17 		.word	_GREAT+MAPOFFSET
 1329 0988 03       	_MAX:	.byte   3
 1330 0989 4D4158   		.ascii "MAX"
 1331              		.p2align 2 	
 1332              	MAX:
 1333 098c 51F8044B 		LDR	R4,[R1],#4
 1334 0990 AC42     		CMP	R4,R5
 1335 0992 C8BF     		IT GT 
 1336 0994 2546     		MOVGT	R5,R4
 1337 0996 7047     		_NEXT
 1338              	
ARM GAS  stm32eforth.s 			page 27


 1339              	//    MIN	 ( w w -- min )
 1340              	// 	Leave minimum.
 1341              	
 1342 0998 88FDFF17 		.word	_MAX+MAPOFFSET
 1343 099c 03       	_MIN:	.byte   3
 1344 099d 4D494E   		.ascii "MIN"
 1345              		.p2align 2 	
 1346              	MIN:
 1347 09a0 51F8044B 		LDR	R4,[R1],#4
 1348 09a4 AC42     		CMP	R4,R5
 1349 09a6 B8BF     		IT LT
 1350 09a8 2546     		MOVLT	R5,R4
 1351 09aa 7047     		_NEXT
 1352              	
 1353              	//    +!	 ( w a -- )
 1354              	// 	Add to memory.
 1355              	
 1356 09ac 9CFDFF17 		.word	_MIN+MAPOFFSET
 1357 09b0 02       	_PSTOR:	.byte   2
 1358 09b1 2B21     		.ascii "+!"
 1359 09b3 00       		.p2align 2 	
 1360              	PSTOR:
 1361 09b4 51F8044B 		LDR	R4,[R1],#4
 1362 09b8 2E68     		LDR	R6,[R5]
 1363 09ba 2644     		ADD	R6,R6,R4
 1364 09bc 2E60     		STR	R6,[R5]
 1365 09be 51F8045B 		_POP
 1366 09c2 7047     		_NEXT
 1367              	
 1368              	//    2!	 ( d a -- )
 1369              	// 	Store double number.
 1370              	
 1371 09c4 B0FDFF17 		.word	_PSTOR+MAPOFFSET
 1372 09c8 02       	_DSTOR:	.byte   2
 1373 09c9 3221     		.ascii "2!"
 1374 09cb 00       		.p2align 2 	
 1375              	DSTOR:
 1376 09cc 51F8044B 		LDR	R4,[R1],#4
 1377 09d0 51F8046B 		LDR	R6,[R1],#4
 1378 09d4 45F8044B 		STR	R4,[R5],#4
 1379 09d8 2E60     		STR	R6,[R5]
 1380 09da 51F8045B 		_POP
 1381 09de 7047     		_NEXT
 1382              	
 1383              	//    2@	 ( a -- d )
 1384              	// 	Fetch double number.
 1385              	
 1386 09e0 C8FDFF17 		.word	_DSTOR+MAPOFFSET
 1387 09e4 02       	_DAT:	.byte   2
 1388 09e5 3240     		.ascii "2@"
 1389 09e7 00       		.p2align 2 	
 1390              	DAT:
 1391 09e8 6C68     		LDR	R4,[R5,#4]
 1392 09ea 41F8044D 		STR	R4,[R1,#-4]!
 1393 09ee 2D68     		LDR	R5,[R5]
 1394 09f0 7047     		_NEXT
 1395              	
ARM GAS  stm32eforth.s 			page 28


 1396              	//    COUNT	( b -- b+1 c )
 1397              	// 	Fetch length of string.
 1398              	
 1399 09f2 E4FDFF17 		.word	_DAT+MAPOFFSET
 1400 09f6 05       	_COUNT:	.byte   5
 1401 09f7 434F554E 		.ascii "COUNT"
 1401      54
 1402              		.p2align 2 	
 1403              	COUNT:
 1404 09fc 15F8014B 		LDRB	R4,[R5],#1
 1405 0a00 41F8045D 		_PUSH
 1406 0a04 2546     		MOV	R5,R4
 1407 0a06 7047     		_NEXT
 1408              	
 1409              	//    DNEGATE	( d -- -d )
 1410              	// 	Negate double number.
 1411              	
 1412 0a08 F6FDFF17 		.word	_COUNT+MAPOFFSET
 1413 0a0c 07       	_DNEGA:	.byte   7
 1414 0a0d 444E4547 		.ascii "DNEGATE"
 1414      415445
 1415              		.p2align 2 	
 1416              	DNEGA:
 1417 0a14 0C68     		LDR	R4,[R1]
 1418 0a16 A6EB0606 		SUB	R6,R6,R6
 1419 0a1a 341B     		SUBS R4,R6,R4
 1420 0a1c 66EB0505 		SBC	R5,R6,R5
 1421 0a20 0C60     		STR	R4,[R1]
 1422 0a22 7047     		_NEXT
 1423              	
 1424              	// **************************************************************************
 1425              	//  System and user variables
 1426              	
 1427              	//    doVAR	( -- a )
 1428              	// 	Run time routine for VARIABLE and CREATE.
 1429              	
 1430              	// 	.word	_DNEGA+MAPOFFSET
 1431              	// _DOVAR	.byte  COMPO+5
 1432              	// 	.ascii "doVAR"
 1433              	// 	.p2align 2 	
 1434              	DOVAR:
 1435 0a24 41F8045D 		_PUSH
 1436 0a28 AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
 1437 0a2c 52F804FB 		_UNNEST
 1438              	
 1439              	//    doCON	( -- a ) 
 1440              	// 	Run time routine for CONSTANT.
 1441              	
 1442              	// 	.word	_DOVAR+MAPOFFSET
 1443              	// _DOCON	.byte  COMPO+5
 1444              	// 	.ascii "doCON"
 1445              	// 	.p2align 2 	
 1446              	DOCON:
 1447 0a30 41F8045D 		_PUSH
 1448 0a34 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1449 0a38 52F804FB 		_UNNEST
 1450              	
ARM GAS  stm32eforth.s 			page 29


 1451              	/***********************
 1452              	  system variables 
 1453              	***********************/
 1454              	
 1455              	 // SEED ( -- a)
 1456              	 // return PRNG seed address 
 1457              	
 1458 0a3c 0CFEFF17 		.word _DNEGA+MAPOFFSET
 1459 0a40 04       	_SEED: .byte 4
 1460 0a41 53454544 		.ascii "SEED"
 1461 0a45 0000BF   		.p2align 2
 1462              	SEED:
 1463 0a48 41F8045D 		_PUSH 
 1464 0a4c 03F10405 		ADD R5,R3,#SEED_OFS
 1465 0a50 7047     		_NEXT 	
 1466              	
 1467              	//  MSEC ( -- a)
 1468              	// return address of milliseconds counter
 1469 0a52 40FEFF17 	  .word _SEED+MAPOFFSET 
 1470 0a56 04       	_MSEC: .byte 4
 1471 0a57 4D534543 	  .ascii "MSEC"
 1472 0a5b 00       	  .p2align 2 
 1473              	MSEC:
 1474 0a5c 41F8045D 	  _PUSH
 1475 0a60 03F10805 	  ADD R5,R3,#TICKS_OFS
 1476 0a64 7047     	  _NEXT 
 1477              	
 1478              	// TIMER ( -- a )
 1479 0a66 56FEFF17 	  .word _MSEC+MAPOFFSET
 1480 0a6a 05       	_TIMER:  .byte 5
 1481 0a6b 54494D45 	  .ascii "TIMER"
 1481      52
 1482              	  .p2align 2 
 1483              	TIMER:
 1484 0a70 41F8045D 	  _PUSH 
 1485 0a74 03F10C05 	  ADD R5,R3,#TIMER_OFS
 1486 0a78 7047     	  _NEXT
 1487              	
 1488              	//    'BOOT	 ( -- a )
 1489              	// 	Application.
 1490              	
 1491 0a7a 6AFEFF17 		.word	_TIMER+MAPOFFSET
 1492 0a7e 05       	_TBOOT:	.byte   5
 1493 0a7f 27424F4F 		.ascii "'BOOT"
 1493      54
 1494              		.p2align 2 	
 1495              	TBOOT:
 1496 0a84 41F8045D 		_PUSH
 1497 0a88 03F11005 		ADD	R5,R3,#BOOT_OFS 
 1498 0a8c 7047     		_NEXT
 1499              		
 1500              	//    BASE	( -- a )
 1501              	// 	Storage of the radix base for numeric I/O.
 1502              	
 1503 0a8e 7EFEFF17 		.word	_TBOOT+MAPOFFSET
 1504 0a92 04       	_BASE:	.byte   4
 1505 0a93 42415345 		.ascii "BASE"
ARM GAS  stm32eforth.s 			page 30


 1506 0a97 00       		.p2align 2 	
 1507              	BASE:
 1508 0a98 41F8045D 		_PUSH
 1509 0a9c 03F11405 		ADD	R5,R3,#BASE_OFS
 1510 0aa0 7047     		_NEXT
 1511              	
 1512              	//    tmp	 ( -- a )
 1513              	// 	A temporary storage location used in parse and find.
 1514              	
 1515              	// 	.word	_BASE+MAPOFFSET
 1516              	// _TEMP	.byte   COMPO+3
 1517              	// 	.ascii "tmp"
 1518              	// 	.p2align 2 	
 1519              	TEMP:
 1520 0aa2 41F8045D 		_PUSH
 1521 0aa6 03F11805 		ADD	R5,R3,#TMP_OFS
 1522 0aaa 7047     		_NEXT
 1523              	
 1524              	//    SPAN	( -- a )
 1525              	// 	Hold character count received by EXPECT.
 1526              	
 1527 0aac 92FEFF17 		.word	_BASE+MAPOFFSET
 1528 0ab0 04       	_SPAN:	.byte   4
 1529 0ab1 5350414E 		.ascii "SPAN"
 1530 0ab5 0000BF   		.p2align 2 	
 1531              	SPAN:
 1532 0ab8 41F8045D 		_PUSH
 1533 0abc 03F11C05 		ADD	R5,R3,#SPAN_OFS
 1534 0ac0 7047     		_NEXT
 1535              	
 1536              	//    >IN	 ( -- a )
 1537              	// 	Hold the character pointer while parsing input stream.
 1538              	
 1539 0ac2 B0FEFF17 		.word	_SPAN+MAPOFFSET
 1540 0ac6 03       	_INN:	.byte   3
 1541 0ac7 3E494E   		.ascii ">IN"
 1542 0aca 00BF     		.p2align 2 	
 1543              	INN:
 1544 0acc 41F8045D 		_PUSH
 1545 0ad0 03F12005 		ADD	R5,R3,#TOIN_OFS
 1546 0ad4 7047     		_NEXT
 1547              	
 1548              	//    #TIB	( -- a )
 1549              	// 	Hold the current count and address of the terminal input buffer.
 1550              	
 1551 0ad6 C6FEFF17 		.word	_INN+MAPOFFSET
 1552 0ada 04       	_NTIB:	.byte   4
 1553 0adb 23544942 		.ascii "#TIB"
 1554 0adf 00       		.p2align 2 	
 1555              	NTIB:
 1556 0ae0 41F8045D 		_PUSH
 1557 0ae4 03F12405 		ADD	R5,R3,#NTIB_OFS
 1558 0ae8 7047     		_NEXT
 1559              	
 1560              	//    'EVAL	( -- a )
 1561              	// 	Execution vector of EVAL.
 1562              	
ARM GAS  stm32eforth.s 			page 31


 1563 0aea DAFEFF17 		.word	_NTIB+MAPOFFSET
 1564 0aee 05       	_TEVAL:	.byte   5
 1565 0aef 27455641 		.ascii "'EVAL"
 1565      4C
 1566              		.p2align 2 	
 1567              	TEVAL:
 1568 0af4 41F8045D 		_PUSH
 1569 0af8 03F12C05 		ADD	R5,R3,#EVAL_OFS
 1570 0afc 7047     		_NEXT
 1571              	
 1572              	//    HLD	 ( -- a )
 1573              	// 	Hold a pointer in building a numeric output string.
 1574              	
 1575 0afe EEFEFF17 		.word	_TEVAL+MAPOFFSET
 1576 0b02 03       	_HLD:	.byte   3
 1577 0b03 484C44   		.ascii "HLD"
 1578 0b06 00BF     		.p2align 2 	
 1579              	HLD:
 1580 0b08 41F8045D 		_PUSH
 1581 0b0c 03F13005 		ADD	R5,R3,#HLD_OFS
 1582 0b10 7047     		_NEXT
 1583              	
 1584              	//    CONTEXT	( -- a )
 1585              	// 	A area to specify vocabulary search order.
 1586              	
 1587 0b12 02FFFF17 		.word	_HLD+MAPOFFSET
 1588 0b16 07       	_CNTXT:	.byte   7
 1589 0b17 434F4E54 		.ascii "CONTEXT"
 1589      455854
 1590 0b1e 00BF     		.p2align 2 	
 1591              	CNTXT:
 1592              	CRRNT:
 1593 0b20 41F8045D 		_PUSH
 1594 0b24 03F13405 		ADD	R5,R3,#CTXT_OFS
 1595 0b28 7047     		_NEXT
 1596              	
 1597              	//    CP	( -- a )
 1598              	// 	Point to top name in RAM vocabulary.
 1599              	
 1600 0b2a 16FFFF17 		.word	_CNTXT+MAPOFFSET
 1601 0b2e 02       	_CP:	.byte   2
 1602 0b2f 4350     		.ascii "CP"
 1603 0b31 0000BF   		.p2align 2 	
 1604              	CPP:
 1605 0b34 41F8045D 		_PUSH
 1606 0b38 03F13C05 		ADD	R5,R3,#RAM_CTOP_OFS
 1607 0b3c 7047     		_NEXT
 1608              	
 1609              	//   FCP ( -- a )
 1610              	//  Point ot top of Flash dictionary
 1611 0b3e 2EFFFF17 		.word _CP+MAPOFFSET
 1612 0b42 04       	_FCPP: .byte 4 
 1613 0b43 46435050 		.ascii "FCPP"
 1614 0b47 00       		.p2align 2 
 1615              	FCPP: 
 1616 0b48 41F8045D 		_PUSH 
 1617 0b4c 03F13805 		ADD R5,R3,#FLSH_CTOP_OFS 
ARM GAS  stm32eforth.s 			page 32


 1618 0b50 7047     		_NEXT 
 1619              	
 1620              	//    LAST	( -- a )
 1621              	// 	Point to the last name in the name dictionary.
 1622              	
 1623 0b52 42FFFF17 		.word	_FCPP+MAPOFFSET
 1624 0b56 04       	_LAST:	.byte   4
 1625 0b57 4C415354 		.ascii "LAST"
 1626 0b5b 00       		.p2align 2 	
 1627              	LAST:
 1628 0b5c 41F8045D 		_PUSH
 1629 0b60 03F14005 		ADD	R5,R3,#LASTN_OFS
 1630 0b64 7047     		_NEXT
 1631              	
 1632              	//	USER_BEGIN ( -- a )
 1633              	//  where user area begin in RAM
 1634 0b66 56FFFF17 		.word _LAST+MAPOFFSET
 1635 0b6a 0A       	_USER_BGN: .byte 10
 1636 0b6b 55534552 		.ascii "USER_BEGIN"
 1636      5F424547 
 1636      494E
 1637 0b75 0000BF   		.p2align 2
 1638              	USER_BEGIN:
 1639 0b78 41F8045D 		_PUSH 
 1640 0b7c 03F14405 		ADD R5,R3,#USER_BEGIN_OFS
 1641 0b80 7047     		_NEXT 
 1642              	
 1643              	//  USER_END ( -- a )
 1644              	//  where user area end in RAM 
 1645 0b82 6AFFFF17 		.word _USER_BGN+MAPOFFSET
 1646 0b86 08       	_USER_END: .byte 8 
 1647 0b87 55534552 		.ascii "USER_END" 
 1647      5F454E44 
 1648 0b8f 00       		.p2align 2 
 1649              	USER_END:
 1650 0b90 41F8045D 		_PUSH 
 1651 0b94 03F14805 		ADD R5,R3,#USER_END_OFS
 1652 0b98 7047     		_NEXT 
 1653              	
 1654              	//  USER_IMG ( -- a )
 1655              	//  where user image is saved in FLASH
 1656 0b9a 86FFFF17 		.word _USER_END+MAPOFFSET
 1657 0b9e 08       	_USER_IMG: .byte 8
 1658 0b9f 55534552 		.ascii "USER_IMG"
 1658      5F494D47 
 1659 0ba7 00       		.p2align 2 
 1660              	USER_IMG:
 1661 0ba8 41F8045D 		_PUSH 
 1662 0bac 03F14C05 		ADD R5,R3,#USER_IMG_OFS 
 1663 0bb0 7047     		_NEXT 
 1664              	
 1665              	// **************************************************************************
 1666              	//  Common functions
 1667              	
 1668              	//    WITHIN	( u ul uh -- t )
 1669              	// 	Return true if u is within the range of ul and uh.
 1670              	
ARM GAS  stm32eforth.s 			page 33


 1671 0bb2 9EFFFF17 		.word	_USER_IMG+MAPOFFSET
 1672 0bb6 06       	_WITHI:	.byte   6
 1673 0bb7 57495448 		.ascii "WITHIN"
 1673      494E
 1674 0bbd 0000BF   		.p2align 2 	
 1675              	WITHI:
 1676 0bc0 42F804ED 		_NEST
 1677 0bc4 FFF77CFD 		BL	OVER
 1678 0bc8 FFF7D4FD 		BL	SUBB
 1679 0bcc FFF74AFD 		BL	TOR
 1680 0bd0 FFF7D0FD 		BL	SUBB
 1681 0bd4 FFF734FD 		BL	RFROM
 1682 0bd8 FFF7B4FE 		BL	ULESS
 1683 0bdc 52F804FB 		_UNNEST
 1684              	
 1685              	//  Divide
 1686              	
 1687              	//    UM/MOD	( udl udh u -- ur uq )
 1688              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1689              	
 1690 0be0 B6FFFF17 		.word	_WITHI+MAPOFFSET
 1691 0be4 06       	_UMMOD:	.byte   6
 1692 0be5 554D2F4D 		.ascii "UM/MOD"
 1692      4F44
 1693 0beb 00       		.p2align 2 	
 1694              	UMMOD:
 1695 0bec 4FF00107 		MOV	R7,#1
 1696 0bf0 51F8044B 		LDR	R4,[R1],#4
 1697 0bf4 0E68     		LDR	R6,[R1]
 1698              	UMMOD0:
 1699 0bf6 B619     		ADDS	R6,R6,R6
 1700 0bf8 6441     		ADCS	R4,R4,R4
 1701 0bfa 04D3     		BCC	UMMOD1
 1702 0bfc A4EB0504 		SUB	R4,R4,R5
 1703 0c00 06F10106 		ADD	R6,R6,#1
 1704 0c04 04E0     		B UMMOD2
 1705              	UMMOD1:
 1706 0c06 641B     		SUBS	R4,R4,R5 
 1707 0c08 28BF     		IT CS 
 1708 0c0a 0136     		ADDCS	R6,R6,#1
 1709 0c0c 00D2     		BCS	UMMOD2
 1710 0c0e 2C44     		ADD	R4,R4,R5
 1711              	UMMOD2:
 1712 0c10 FF19     		ADDS	R7,R7,R7
 1713 0c12 F0D3     		BCC	UMMOD0
 1714 0c14 3546     		MOV	R5,R6
 1715 0c16 0C60     		STR	R4,[R1]
 1716 0c18 7047     		_NEXT
 1717              	
 1718              	//    M/MOD	( d n -- r q )
 1719              	// 	Signed floored divide of double by single. Return mod and quotient.
 1720              	
 1721 0c1a E4FFFF17 		.word	_UMMOD+MAPOFFSET
 1722 0c1e 05       	_MSMOD:	.byte  5
 1723 0c1f 4D2F4D4F 		.ascii "M/MOD"
 1723      44
 1724              		.p2align 2 	
ARM GAS  stm32eforth.s 			page 34


 1725              	MSMOD:	
 1726 0c24 42F804ED 		_NEST
 1727 0c28 FFF738FD 		BL	DUPP
 1728 0c2c FFF750FD 		BL	ZLESS
 1729 0c30 FFF734FD 		BL	DUPP
 1730 0c34 FFF716FD 		BL	TOR
 1731 0c38 FFF7C6FC 		BL	QBRAN
 1732 0c3c 50000018 		.word	MMOD1+MAPOFFSET
 1733 0c40 FFF758FE 		BL	NEGAT
 1734 0c44 FFF70EFD 		BL	TOR
 1735 0c48 FFF7E4FE 		BL	DNEGA
 1736 0c4c FFF7F8FC 		BL	RFROM
 1737              	MMOD1:
 1738 0c50 FFF708FD 	  BL	TOR
 1739 0c54 FFF722FD 		BL	DUPP
 1740 0c58 FFF73AFD 		BL	ZLESS
 1741 0c5c FFF7B4FC 		BL	QBRAN
 1742 0c60 6C000018 		.word	MMOD2+MAPOFFSET
 1743 0c64 FFF7F6FC 		BL	RAT
 1744 0c68 FFF77CFD 		BL	PLUS
 1745              	MMOD2:
 1746 0c6c FFF7E8FC 	  BL	RFROM
 1747 0c70 FFF7BCFF 		BL	UMMOD
 1748 0c74 FFF7E4FC 		BL	RFROM
 1749 0c78 FFF7A6FC 		BL	QBRAN
 1750 0c7c 8C000018 		.word	MMOD3+MAPOFFSET
 1751 0c80 FFF714FD 		BL	SWAP
 1752 0c84 FFF736FE 		BL	NEGAT
 1753 0c88 FFF710FD 		BL	SWAP
 1754              	MMOD3:   
 1755 0c8c 52F804FB 		_UNNEST
 1756              	
 1757              	//    /MOD	( n n -- r q )
 1758              	// 	Signed divide. Return mod and quotient.
 1759              	
 1760 0c90 1E000018 		.word	_MSMOD+MAPOFFSET
 1761 0c94 04       	_SLMOD:	.byte   4
 1762 0c95 2F4D4F44 		.ascii "/MOD"
 1763 0c99 0000BF   		.p2align 2 	
 1764              	SLMOD:
 1765 0c9c 42F804ED 		_NEST
 1766 0ca0 FFF70EFD 		BL	OVER
 1767 0ca4 FFF714FD 		BL	ZLESS
 1768 0ca8 FFF700FD 		BL	SWAP
 1769 0cac FFF7BAFF 		BL	MSMOD
 1770 0cb0 52F804FB 		_UNNEST
 1771              	
 1772              	//    MOD	 ( n n -- r )
 1773              	// 	Signed divide. Return mod only.
 1774              	
 1775 0cb4 94000018 		.word	_SLMOD+MAPOFFSET
 1776 0cb8 03       	_MODD:	.byte  3
 1777 0cb9 4D4F44   		.ascii "MOD"
 1778              		.p2align 2 	
 1779              	MODD:
 1780 0cbc 42F804ED 		_NEST
 1781 0cc0 FFF7ECFF 		BL	SLMOD
ARM GAS  stm32eforth.s 			page 35


 1782 0cc4 FFF7E2FC 		BL	DROP
 1783 0cc8 52F804FB 		_UNNEST
 1784              	
 1785              	//    /	   ( n n -- q )
 1786              	// 	Signed divide. Return quotient only.
 1787              	
 1788 0ccc B8000018 		.word	_MODD+MAPOFFSET
 1789 0cd0 01       	_SLASH:	.byte  1
 1790 0cd1 2F       		.ascii "/"
 1791 0cd2 00BF     		.p2align 2 	
 1792              	SLASH:
 1793 0cd4 42F804ED 		_NEST
 1794 0cd8 FFF7E0FF 		BL	SLMOD
 1795 0cdc FFF7E6FC 		BL	SWAP
 1796 0ce0 FFF7D4FC 		BL	DROP
 1797 0ce4 52F804FB 		_UNNEST
 1798              	
 1799              	//    */MOD	( n1 n2 n3 -- r q )
 1800              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1801              	
 1802 0ce8 D0000018 		.word	_SLASH+MAPOFFSET
 1803 0cec 05       	_SSMOD:	.byte  5
 1804 0ced 2A2F4D4F 		.ascii "*/MOD"
 1804      44
 1805 0cf2 00BF     		.p2align 2 	
 1806              	SSMOD:
 1807 0cf4 42F804ED 		_NEST
 1808 0cf8 FFF7B4FC 		BL	TOR
 1809 0cfc FFF756FD 		BL	MSTAR
 1810 0d00 FFF79EFC 		BL	RFROM
 1811 0d04 FFF78EFF 		BL	MSMOD
 1812 0d08 52F804FB 		_UNNEST
 1813              	
 1814              	//    */	  ( n1 n2 n3 -- q )
 1815              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1816              	
 1817 0d0c EC000018 		.word	_SSMOD+MAPOFFSET
 1818 0d10 02       	_STASL:	.byte  2
 1819 0d11 2A2F     		.ascii "*/"
 1820 0d13 00       		.p2align 2 	
 1821              	STASL:
 1822 0d14 42F804ED 		_NEST
 1823 0d18 FFF7ECFF 		BL	SSMOD
 1824 0d1c FFF7C6FC 		BL	SWAP
 1825 0d20 FFF7B4FC 		BL	DROP
 1826 0d24 52F804FB 		_UNNEST
 1827              	
 1828              	// **************************************************************************
 1829              	//  Miscellaneous
 1830              	
 1831              	//    ALIGNED	( b -- a )
 1832              	// 	Align address to the cell boundary.
 1833              	
 1834 0d28 10010018 		.word	_STASL+MAPOFFSET
 1835 0d2c 07       	_ALGND:	.byte   7
 1836 0d2d 414C4947 		.ascii "ALIGNED"
 1836      4E4544
ARM GAS  stm32eforth.s 			page 36


 1837              		.p2align 2 	
 1838              	ALGND:
 1839 0d34 05F10305 		ADD	R5,R5,#3
 1840 0d38 6FF00304 		MVN	R4,#3
 1841 0d3c 05EA0405 		AND	R5,R5,R4
 1842 0d40 7047     		_NEXT
 1843              	
 1844              	//    >CHAR	( c -- c )
 1845              	// 	Filter non-printing characters.
 1846              	
 1847 0d42 2C010018 		.word	_ALGND+MAPOFFSET
 1848 0d46 05       	_TCHAR:	.byte  5
 1849 0d47 3E434841 		.ascii ">CHAR"
 1849      52
 1850              		.p2align 2 	
 1851              	TCHAR:
 1852 0d4c 42F804ED 		_NEST
 1853 0d50 FFF717FC 		_DOLIT
 1854 0d54 7F000000 		.word	0x7F
 1855 0d58 FFF7C4FC 		BL	ANDD
 1856 0d5c FFF79EFC 		BL	DUPP	// mask msb
 1857 0d60 FFF75EFD 		BL	BLANK
 1858 0d64 FFF70DFC 		_DOLIT
 1859 0d68 7F000000 		.word	127
 1860 0d6c FFF728FF 		BL	WITHI	// check for printable
 1861 0d70 FFF7B6FD 		BL	INVER
 1862 0d74 FFF728FC 		BL	QBRAN
 1863 0d78 88010018 		.word	TCHA1+MAPOFFSET
 1864 0d7c FFF786FC 		BL	DROP
 1865 0d80 FFF7FFFB 		_DOLIT
 1866 0d84 5F000000 		.word	'_'	// replace non-printables
 1867              	TCHA1:
 1868 0d88 52F804FB 		  _UNNEST
 1869              	
 1870              	//    DEPTH	( -- n )
 1871              	// 	Return the depth of the data stack.
 1872              	
 1873 0d8c 46010018 		.word	_TCHAR+MAPOFFSET
 1874 0d90 05       	_DEPTH:	.byte  5
 1875 0d91 44455054 		.ascii "DEPTH"
 1875      48
 1876 0d96 00BF     		.p2align 2 	
 1877              	DEPTH:
 1878 0d98 41F8045D 		_PUSH
 1879 0d9c 44F68465 		MOVW	R5,#SPP&0xffff+4 
 1880 0da0 C2F20005 	 	MOVT	R5,#SPP>>16 
 1881 0da4 A5EB0105 		SUB	R5,R5,R1
 1882 0da8 4FEAA505 		ASR	R5,R5,#2
 1883 0dac A5F10105 		SUB	R5,R5,#1
 1884 0db0 7047     		_NEXT
 1885              	
 1886              	//    PICK	( ... +n -- ... w )
 1887              	// 	Copy the nth stack item to tos.
 1888              	
 1889 0db2 90010018 		.word	_DEPTH+MAPOFFSET
 1890 0db6 04       	_PICK:	.byte  4
 1891 0db7 5049434B 		.ascii "PICK"
ARM GAS  stm32eforth.s 			page 37


 1892 0dbb 00       		.p2align 2 	
 1893              	PICK:
 1894 0dbc 42F804ED 		_NEST
 1895 0dc0 FFF7FEFC 		BL	ONEP
 1896 0dc4 FFF736FD 		BL	CELLS
 1897 0dc8 FFF756FC 		BL	SPAT
 1898 0dcc FFF7CAFC 		BL	PLUS
 1899 0dd0 FFF720FC 		BL	AT
 1900 0dd4 52F804FB 		_UNNEST
 1901              	
 1902              	// **************************************************************************
 1903              	//  Memory access
 1904              	
 1905              	//    HERE	( -- a )
 1906              	// 	Return the top of the code dictionary.
 1907              	
 1908 0dd8 B6010018 		.word	_PICK+MAPOFFSET
 1909 0ddc 04       	_HERE:	.byte  4
 1910 0ddd 48455245 		.ascii "HERE"
 1911 0de1 0000BF   		.p2align 2 	
 1912              	HERE:
 1913 0de4 42F804ED 		_NEST
 1914 0de8 FFF7A4FE 		BL	CPP
 1915 0dec FFF712FC 		BL	AT
 1916 0df0 52F804FB 		_UNNEST
 1917              		
 1918              	//    PAD	 ( -- a )
 1919              	// 	Return the address of a temporary buffer.
 1920              	
 1921 0df4 DC010018 		.word	_HERE+MAPOFFSET
 1922 0df8 03       	_PAD:	.byte  3
 1923 0df9 504144   		.ascii "PAD"
 1924              		.p2align 2 	
 1925              	PAD:
 1926 0dfc 42F804ED 		_NEST
 1927 0e00 FFF7F0FF 		BL	HERE
 1928 0e04 05F15005 		ADD	R5,R5,#80
 1929 0e08 52F804FB 		_UNNEST
 1930              	
 1931              	//    TIB	 ( -- a )
 1932              	// 	Return the address of the terminal input buffer.
 1933              	
 1934 0e0c F8010018 		.word	_PAD+MAPOFFSET
 1935 0e10 03       	_TIB:	.byte  3
 1936 0e11 544942   		.ascii "TIB"
 1937              		.p2align 2 	
 1938              	TIB:
 1939 0e14 41F8045D 		_PUSH
 1940 0e18 9D6A     		ldr r5,[r3,#TIB_OFS]
 1941 0e1a 7047     		_NEXT
 1942              	
 1943              	//    @EXECUTE	( a -- )
 1944              	// 	Execute vector stored in address a.
 1945              	
 1946 0e1c 10020018 		.word	_TIB+MAPOFFSET
 1947 0e20 08       	_ATEXE:	.byte   8
 1948 0e21 40455845 		.ascii "@EXECUTE"
ARM GAS  stm32eforth.s 			page 38


 1948      43555445 
 1949 0e29 0000BF   		.p2align 2 	
 1950              	ATEXE:
 1951 0e2c 2C00     		MOVS	R4,R5
 1952 0e2e 51F8045B 		_POP
 1953 0e32 2468     		LDR	R4,[R4]
 1954 0e34 44F00104 		ORR	R4,R4,#1
 1955 0e38 18BF     	    IT NE 
 1956 0e3a 2047     		BXNE	R4
 1957 0e3c 7047     		_NEXT
 1958              	
 1959              	//    CMOVE	( b1 b2 u -- )
 1960              	// 	Copy u bytes from b1 to b2.
 1961              	
 1962 0e3e 20020018 		.word	_ATEXE+MAPOFFSET
 1963 0e42 05       	_CMOVE:	.byte   5
 1964 0e43 434D4F56 		.ascii "CMOVE"
 1964      45
 1965              		.p2align 2 	
 1966              	CMOVE:
 1967 0e48 51F8046B 		LDR	R6,[R1],#4
 1968 0e4c 51F8047B 		LDR	R7,[R1],#4
 1969 0e50 03E0     		B CMOV1
 1970              	CMOV0:
 1971 0e52 17F8014B 		LDRB	R4,[R7],#1
 1972 0e56 06F8014B 		STRB	R4,[R6],#1
 1973              	CMOV1:
 1974 0e5a 2D00     		MOVS	R5,R5
 1975 0e5c 02D0     		BEQ	CMOV2
 1976 0e5e A5F10105 		SUB	R5,R5,#1
 1977 0e62 F6E7     		B CMOV0
 1978              	CMOV2:
 1979 0e64 51F8045B 		_POP
 1980 0e68 7047     		_NEXT
 1981              	
 1982              	//    MOVE	( a1 a2 u -- )
 1983              	// 	Copy u words from a1 to a2.
 1984              	
 1985 0e6a 42020018 		.word	_CMOVE+MAPOFFSET
 1986 0e6e 04       	_MOVE:	.byte   4
 1987 0e6f 4D4F5645 		.ascii "MOVE"
 1988 0e73 00       		.p2align 2 	
 1989              	MOVE:
 1990 0e74 25F00305 		AND	R5,R5,#-4
 1991 0e78 51F8046B 		LDR	R6,[R1],#4
 1992 0e7c 51F8047B 		LDR	R7,[R1],#4
 1993 0e80 03E0     		B MOVE1
 1994              	MOVE0:
 1995 0e82 57F8044B 		LDR	R4,[R7],#4
 1996 0e86 46F8044B 		STR	R4,[R6],#4
 1997              	MOVE1:
 1998 0e8a 2D00     		MOVS	R5,R5
 1999 0e8c 02D0     		BEQ	MOVE2
 2000 0e8e A5F10405 		SUB	R5,R5,#4
 2001 0e92 F6E7     		B MOVE0
 2002              	MOVE2:
 2003 0e94 51F8045B 		_POP
ARM GAS  stm32eforth.s 			page 39


 2004 0e98 7047     		_NEXT
 2005              	
 2006              	//    FILL	( b u c -- )
 2007              	// 	Fill u bytes of character c to area beginning at b.
 2008              	
 2009 0e9a 6E020018 		.word	_MOVE+MAPOFFSET
 2010 0e9e 04       	_FILL:	.byte   4
 2011 0e9f 46494C4C 		.ascii "FILL"
 2012 0ea3 00       		.p2align 2 	
 2013              	FILL:
 2014 0ea4 51F8046B 		LDR	R6,[R1],#4
 2015 0ea8 51F8047B 		LDR	R7,[R1],#4
 2016              	FILL0:
 2017 0eac 00E0     		B FILL1
 2018 0eae 2D46     		MOV	R5,R5
 2019              	FILL1:
 2020 0eb0 07F8015B 		STRB	R5,[R7],#1
 2021 0eb4 3600     		MOVS	R6,R6
 2022 0eb6 02D0     		BEQ	FILL2
 2023 0eb8 A6F10106 		SUB	R6,R6,#1
 2024 0ebc F6E7     		B FILL0
 2025              	FILL2:
 2026 0ebe 51F8045B 		_POP
 2027 0ec2 7047     		_NEXT
 2028              	
 2029              	//    PACK$	( b u a -- a )
 2030              	// 	Build a counted word with u characters from b. Null fill.
 2031              	
 2032 0ec4 9E020018 		.word	_FILL+MAPOFFSET
 2033 0ec8 05       	_PACKS:	.byte  5
 2034 0ec9 5041434B 		.ascii "PACK$$"
 2034      2424
 2035 0ecf 00       		.p2align 2 	
 2036              	PACKS:
 2037 0ed0 42F804ED 		_NEST
 2038 0ed4 FFF72EFF 		BL	ALGND
 2039 0ed8 FFF7E0FB 		BL	DUPP
 2040 0edc FFF7C2FB 		BL	TOR			// strings only on cell boundary
 2041 0ee0 FFF7EEFB 		BL	OVER
 2042 0ee4 FFF73EFC 		BL	PLUS
 2043 0ee8 FFF76AFC 		BL	ONEP
 2044 0eec FFF749FB 		_DOLIT
 2045 0ef0 FCFFFFFF 		.word	0xFFFFFFFC
 2046 0ef4 FFF7F6FB 		BL	ANDD			// count mod cell
 2047 0ef8 FFF743FB 		_DOLIT
 2048 0efc 00000000 		.word	0
 2049 0f00 FFF7D4FB 		BL	SWAP
 2050 0f04 FFF77CFB 		BL	STORE			// null fill cell
 2051 0f08 FFF7A4FB 		BL	RAT
 2052 0f0c FFF7D0FC 		BL	DDUP
 2053 0f10 FFF786FB 		BL	CSTOR
 2054 0f14 FFF754FC 		BL	ONEP			// save count
 2055 0f18 FFF7C8FB 		BL	SWAP
 2056 0f1c FFF794FF 		BL	CMOVE
 2057 0f20 FFF78EFB 		BL	RFROM
 2058 0f24 52F804FB 		_UNNEST   			// move string
 2059              	
ARM GAS  stm32eforth.s 			page 40


 2060              	// **************************************************************************
 2061              	//  Numeric output, single precision
 2062              	
 2063              	//    DIGIT	( u -- c )
 2064              	// 	Convert digit u to a character.
 2065              	
 2066 0f28 C8020018 		.word	_PACKS+MAPOFFSET
 2067 0f2c 05       	_DIGIT:	.byte  5
 2068 0f2d 44494749 		.ascii "DIGIT"
 2068      54
 2069 0f32 00BF     		.p2align 2 	
 2070              	DIGIT:
 2071 0f34 42F804ED 		_NEST
 2072 0f38 FFF723FB 		_DOLIT
 2073 0f3c 09000000 		.word	9
 2074 0f40 FFF7BEFB 		BL	OVER
 2075 0f44 FFF70AFD 		BL	LESS
 2076 0f48 05F00705 		AND	R5,R5,#7
 2077 0f4c FFF70AFC 		BL	PLUS
 2078 0f50 05F13005 		ADD	R5,R5,#'0'
 2079 0f54 52F804FB 		_UNNEST
 2080              	
 2081              	//    EXTRACT	( n base -- n c )
 2082              	// 	Extract the least significant digit from n.
 2083              	
 2084 0f58 2C030018 		.word	_DIGIT+MAPOFFSET
 2085 0f5c 07       	_EXTRC:	.byte  7
 2086 0f5d 45585452 		.ascii "EXTRACT"
 2086      414354
 2087              		.p2align 2 	
 2088              	EXTRC:
 2089 0f64 42F804ED 		_NEST
 2090 0f68 FFF70BFB 		_DOLIT
 2091 0f6c 00000000 		.word	0
 2092 0f70 FFF79CFB 		BL	SWAP
 2093 0f74 FFF73AFE 		BL	UMMOD
 2094 0f78 FFF798FB 		BL	SWAP
 2095 0f7c FFF7DAFF 		BL	DIGIT
 2096 0f80 52F804FB 		_UNNEST
 2097              	
 2098              	//    <#	  ( -- )
 2099              	// 	Initiate the numeric output process.
 2100              	
 2101 0f84 5C030018 		.word	_EXTRC+MAPOFFSET
 2102 0f88 02       	_BDIGS:	.byte  2
 2103 0f89 3C23     		.ascii "<#"
 2104 0f8b 00       		.p2align 2 	
 2105              	BDIGS:
 2106 0f8c 42F804ED 		_NEST
 2107 0f90 FFF734FF 		BL	PAD
 2108 0f94 FFF7B8FD 		BL	HLD
 2109 0f98 FFF732FB 		BL	STORE
 2110 0f9c 52F804FB 		_UNNEST
 2111              	
 2112              	//    HOLD	( c -- )
 2113              	// 	Insert a character into the numeric output string.
 2114              	
ARM GAS  stm32eforth.s 			page 41


 2115 0fa0 88030018 		.word	_BDIGS+MAPOFFSET
 2116 0fa4 04       	_HOLD:	.byte  4
 2117 0fa5 484F4C44 		.ascii "HOLD"
 2118 0fa9 0000BF   		.p2align 2 	
 2119              	HOLD:
 2120 0fac 42F804ED 		_NEST
 2121 0fb0 FFF7AAFD 		BL	HLD
 2122 0fb4 FFF72EFB 		BL	AT
 2123 0fb8 FFF70AFC 		BL	ONEM
 2124 0fbc FFF76EFB 		BL	DUPP
 2125 0fc0 FFF7A2FD 		BL	HLD
 2126 0fc4 FFF71CFB 		BL	STORE
 2127 0fc8 FFF72AFB 		BL	CSTOR
 2128 0fcc 52F804FB 		_UNNEST
 2129              	
 2130              	//    #	   ( u -- u )
 2131              	// 	Extract one digit from u and append the digit to output string.
 2132              	
 2133 0fd0 A4030018 		.word	_HOLD+MAPOFFSET
 2134 0fd4 01       	_DIG:	.byte  1
 2135 0fd5 23       		.ascii "#"
 2136 0fd6 00BF     		.p2align 2 	
 2137              	DIG:
 2138 0fd8 42F804ED 		_NEST
 2139 0fdc FFF75CFD 		BL	BASE
 2140 0fe0 FFF718FB 		BL	AT
 2141 0fe4 FFF7BEFF 		BL	EXTRC
 2142 0fe8 FFF7E0FF 		BL	HOLD
 2143 0fec 52F804FB 		_UNNEST
 2144              	
 2145              	//    #S	  ( u -- 0 )
 2146              	// 	Convert u until all digits are added to the output string.
 2147              	
 2148 0ff0 D4030018 		.word	_DIG+MAPOFFSET
 2149 0ff4 02       	_DIGS:	.byte  2
 2150 0ff5 2353     		.ascii "#S"
 2151 0ff7 00       		.p2align 2 	
 2152              	DIGS:
 2153 0ff8 42F804ED 		_NEST
 2154              	DIGS1:
 2155 0ffc FFF7ECFF 	    BL	DIG
 2156 1000 FFF74CFB 		BL	DUPP
 2157 1004 FFF7E0FA 		BL	QBRAN
 2158 1008 0E040018 		.word	DIGS2+MAPOFFSET
 2159 100c F6E7     		B	DIGS1
 2160              	DIGS2:
 2161 100e 52F804FB 		  _UNNEST
 2162              	
 2163              	//    SIGN	( n -- )
 2164              	// 	Add a minus sign to the numeric output string.
 2165              	
 2166 1012 F4030018 		.word	_DIGS+MAPOFFSET
 2167 1016 04       	_SIGN:	.byte  4
 2168 1017 5349474E 		.ascii "SIGN"
 2169 101b 00       		.p2align 2 	
 2170              	SIGN:
 2171 101c 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 42


 2172 1020 FFF756FB 		BL	ZLESS
 2173 1024 FFF7D0FA 		BL	QBRAN
 2174 1028 38040018 		.word	SIGN1+MAPOFFSET
 2175 102c FFF7A9FA 		_DOLIT
 2176 1030 2D000000 		.word	'-'
 2177 1034 FFF7BAFF 		BL	HOLD
 2178              	SIGN1:
 2179 1038 52F804FB 		  _UNNEST
 2180              	
 2181              	//    #>	  ( w -- b u )
 2182              	// 	Prepare the outputDCB to be TYPE'd.
 2183              	
 2184 103c 16040018 		.word	_SIGN+MAPOFFSET
 2185 1040 02       	_EDIGS:	.byte  2
 2186 1041 233E     		.ascii "#>"
 2187 1043 00       		.p2align 2 	
 2188              	EDIGS:
 2189 1044 42F804ED 		_NEST
 2190 1048 FFF720FB 		BL	DROP
 2191 104c FFF75CFD 		BL	HLD
 2192 1050 FFF7E0FA 		BL	AT
 2193 1054 FFF7D2FE 		BL	PAD
 2194 1058 FFF732FB 		BL	OVER
 2195 105c FFF78AFB 		BL	SUBB
 2196 1060 52F804FB 		_UNNEST
 2197              	
 2198              	//    str	 ( n -- b u )
 2199              	// 	Convert a signed integer to a numeric string.
 2200              	
 2201              	// 	.word	_EDIGS+MAPOFFSET
 2202              	// _STRR	.byte  3
 2203              	// 	.ascii "str"
 2204              	// 	.p2align 2 	
 2205              	STRR:
 2206 1064 42F804ED 		_NEST
 2207 1068 FFF718FB 		BL	DUPP
 2208 106c FFF7FAFA 		BL	TOR
 2209 1070 FFF748FC 		BL	ABSS
 2210 1074 FFF78AFF 		BL	BDIGS
 2211 1078 FFF7BEFF 		BL	DIGS
 2212 107c FFF7E0FA 		BL	RFROM
 2213 1080 FFF7CCFF 		BL	SIGN
 2214 1084 FFF7DEFF 		BL	EDIGS
 2215 1088 52F804FB 		_UNNEST
 2216              	
 2217              	//    HEX	 ( -- )
 2218              	// 	Use radix 16 as base for numeric conversions.
 2219              	
 2220 108c 40040018 		.word	_EDIGS+MAPOFFSET
 2221 1090 03       	_HEX:	.byte  3
 2222 1091 484558   		.ascii "HEX"
 2223              		.p2align 2 	
 2224              	HEX:
 2225 1094 42F804ED 		_NEST
 2226 1098 FFF773FA 		_DOLIT
 2227 109c 10000000 		.word	16
 2228 10a0 FFF7FAFC 		BL	BASE
ARM GAS  stm32eforth.s 			page 43


 2229 10a4 FFF7ACFA 		BL	STORE
 2230 10a8 52F804FB 		_UNNEST
 2231              	
 2232              	//    DECIMAL	( -- )
 2233              	// 	Use radix 10 as base for numeric conversions.
 2234              	
 2235 10ac 90040018 		.word	_HEX+MAPOFFSET
 2236 10b0 07       	_DECIM:	.byte  7
 2237 10b1 44454349 		.ascii "DECIMAL"
 2237      4D414C
 2238              		.p2align 2 	
 2239              	DECIM:
 2240 10b8 42F804ED 		_NEST
 2241 10bc FFF761FA 		_DOLIT
 2242 10c0 0A000000 		.word	10
 2243 10c4 FFF7E8FC 		BL	BASE
 2244 10c8 FFF79AFA 		BL	STORE
 2245 10cc 52F804FB 		_UNNEST
 2246              	
 2247              	// **************************************************************************
 2248              	//  Numeric input, single precision
 2249              	
 2250              	//    DIGIT?	( c base -- u t )
 2251              	// 	Convert a character to its numeric value. A flag indicates success.
 2252              	
 2253 10d0 B0040018 		.word	_DECIM+MAPOFFSET
 2254 10d4 06       	_DIGTQ:	.byte  6
 2255 10d5 44494749 		.ascii "DIGIT?"
 2255      543F
 2256 10db 00       		.p2align 2 	
 2257              	DIGTQ:
 2258 10dc 42F804ED 		_NEST
 2259 10e0 FFF7C0FA 		BL	TOR
 2260 10e4 FFF74DFA 		_DOLIT
 2261 10e8 30000000 		.word	'0'
 2262 10ec FFF742FB 		BL	SUBB
 2263 10f0 FFF747FA 		_DOLIT
 2264 10f4 09000000 		.word	9
 2265 10f8 FFF7E2FA 		BL	OVER
 2266 10fc FFF72EFC 		BL	LESS
 2267 1100 FFF762FA 		BL	QBRAN
 2268 1104 28050018 		.word	DGTQ1+MAPOFFSET
 2269 1108 FFF73BFA 		_DOLIT
 2270 110c 07000000 		.word	7
 2271 1110 FFF730FB 		BL	SUBB
 2272 1114 FFF7C2FA 		BL	DUPP
 2273 1118 FFF733FA 		_DOLIT
 2274 111c 0A000000 		.word	10
 2275 1120 FFF71CFC 		BL	LESS
 2276 1124 FFF7E8FA 		BL	ORR
 2277              	DGTQ1:
 2278 1128 FFF7B8FA 	  BL	DUPP
 2279 112c FFF788FA 		BL	RFROM
 2280 1130 FFF708FC 		BL	ULESS
 2281 1134 52F804FB 		_UNNEST
 2282              	
 2283              	//    NUMBER?	( a -- n T | a F )
ARM GAS  stm32eforth.s 			page 44


 2284              	// 	Convert a number word to integer. Push a flag on tos.
 2285              	
 2286 1138 D4040018 		.word	_DIGTQ+MAPOFFSET
 2287 113c 07       	_NUMBQ:	.byte  7
 2288 113d 4E554D42 		.ascii "NUMBER?"
 2288      45523F
 2289              		.p2align 2 	
 2290              	NUMBQ:
 2291 1144 42F804ED 		_NEST
 2292 1148 FFF7A6FC 		BL	BASE
 2293 114c FFF762FA 		BL	AT
 2294 1150 FFF788FA 		BL	TOR
 2295 1154 FFF715FA 		_DOLIT
 2296 1158 00000000 		.word	0
 2297 115c FFF7B0FA 		BL	OVER
 2298 1160 FFF74CFC 		BL	COUNT
 2299 1164 FFF7ACFA 		BL	OVER
 2300 1168 FFF764FA 		BL	CAT
 2301 116c FFF709FA 		_DOLIT
 2302 1170 24000000 		.word	'$'
 2303 1174 FFF7DAFB 		BL	EQUAL
 2304 1178 FFF726FA 		BL	QBRAN
 2305 117c 94050018 		.word	NUMQ1+MAPOFFSET
 2306 1180 FFF788FF 		BL	HEX
 2307 1184 FFF792FA 		BL	SWAP
 2308 1188 FFF71AFB 		BL	ONEP
 2309 118c FFF78EFA 		BL	SWAP
 2310 1190 FFF71EFB 		BL	ONEM
 2311              	NUMQ1:
 2312 1194 FFF794FA 		BL	OVER
 2313 1198 FFF74CFA 		BL	CAT
 2314 119c FFF7F1F9 		_DOLIT
 2315 11a0 2D000000 		.word	'-'
 2316 11a4 FFF7C2FB 		BL	EQUAL
 2317 11a8 FFF75CFA 		BL	TOR
 2318 11ac FFF77EFA 		BL	SWAP
 2319 11b0 FFF750FA 		BL	RAT
 2320 11b4 FFF7DEFA 		BL	SUBB
 2321 11b8 FFF778FA 		BL	SWAP
 2322 11bc FFF74AFA 		BL	RAT
 2323 11c0 FFF7D0FA 		BL	PLUS
 2324 11c4 FFF756FB 		BL	QDUP
 2325 11c8 FFF7FEF9 		BL	QBRAN
 2326 11cc 58060018 		.word	NUMQ6+MAPOFFSET
 2327 11d0 FFF7FEFA 		BL	ONEM
 2328 11d4 FFF746FA 		BL	TOR
 2329              	NUMQ2:
 2330 11d8 FFF760FA 		BL	DUPP
 2331 11dc FFF742FA 		BL	TOR
 2332 11e0 FFF728FA 		BL	CAT
 2333 11e4 FFF758FC 		BL	BASE
 2334 11e8 FFF714FA 		BL	AT
 2335 11ec FFF776FF 		BL	DIGTQ
 2336 11f0 FFF7EAF9 		BL	QBRAN
 2337 11f4 3C060018 		.word	NUMQ4+MAPOFFSET
 2338 11f8 FFF758FA 		BL	SWAP
 2339 11fc FFF74CFC 		BL	BASE
ARM GAS  stm32eforth.s 			page 45


 2340 1200 FFF708FA 		BL	AT
 2341 1204 FFF7BEFA 		BL	STAR
 2342 1208 FFF7ACFA 		BL	PLUS
 2343 120c FFF718FA 		BL	RFROM
 2344 1210 FFF7D6FA 		BL	ONEP
 2345 1214 FFF7C9F9 		BL	DONXT
 2346 1218 D8050018 		.word	NUMQ2+MAPOFFSET
 2347 121c FFF71AFA 		BL	RAT
 2348 1220 FFF744FA 		BL	SWAP
 2349 1224 FFF732FA 		BL	DROP
 2350 1228 FFF7CEF9 		BL	QBRAN
 2351 122c 34060018 		.word	NUMQ3+MAPOFFSET
 2352 1230 FFF760FB 		BL	NEGAT
 2353              	NUMQ3:
 2354 1234 FFF73AFA 		BL	SWAP
 2355 1238 00F00CB8 		B.W	NUMQ5
 2356              	NUMQ4:
 2357 123c FFF700FA 		BL	RFROM
 2358 1240 FFF7FEF9 		BL	RFROM
 2359 1244 FFF72AFB 		BL	DDROP
 2360 1248 FFF728FB 		BL	DDROP
 2361 124c FFF799F9 		_DOLIT
 2362 1250 00000000 		.word	0
 2363              	NUMQ5:
 2364 1254 FFF722FA 		BL	DUPP
 2365              	NUMQ6:
 2366 1258 FFF7F2F9 		BL	RFROM
 2367 125c FFF71EFB 		BL	DDROP
 2368 1260 FFF7EEF9 		BL	RFROM
 2369 1264 FFF718FC 		BL	BASE
 2370 1268 FFF7CAF9 		BL	STORE
 2371 126c 52F804FB 		_UNNEST
 2372              	
 2373              	// **************************************************************************
 2374              	//  Basic I/O
 2375              	
 2376              	//    KEY	 ( -- c )
 2377              	// 	Wait for and return an input character.
 2378              	
 2379 1270 3C050018 		.word	_NUMBQ+MAPOFFSET
 2380 1274 03       	_KEY:	.byte  3
 2381 1275 4B4559   		.ascii "KEY"
 2382              		.p2align 2 	
 2383              	KEY:
 2384 1278 42F804ED 		_NEST
 2385              	KEY1:
 2386 127c FFF756F9 		BL	QRX
 2387 1280 FFF7A2F9 		BL	QBRAN
 2388 1284 7C060018 		.word	KEY1+MAPOFFSET
 2389              	// CTRL-C reboot
 2390 1288 FFF708FA 		BL DUPP 
 2391 128c FFF779F9 		BL DOLIT 
 2392 1290 03000000 		.word 3 
 2393 1294 FFF74AFB 		BL EQUAL 
 2394 1298 FFF722FB 		BL INVER
 2395 129c FFF794F9 		BL QBRAN
 2396 12a0 B0F8FF17 		.word REBOOT+MAPOFFSET 
ARM GAS  stm32eforth.s 			page 46


 2397 12a4 52F804FB 		_UNNEST
 2398              	
 2399              	//    SPACE	( -- )
 2400              	// 	Send the blank character to the output device.
 2401              	
 2402 12a8 74060018 		.word	_KEY+MAPOFFSET
 2403 12ac 05       	_SPACE:	.byte  5
 2404 12ad 53504143 		.ascii "SPACE"
 2404      45
 2405 12b2 00BF     		.p2align 2 	
 2406              	SPACE:
 2407 12b4 42F804ED 		_NEST
 2408 12b8 FFF7B2FA 		BL	BLANK
 2409 12bc FFF750F9 		BL	EMIT
 2410 12c0 52F804FB 		_UNNEST
 2411              	
 2412              	//    SPACES	( +n -- )
 2413              	// 	Send n spaces to the output device.
 2414              	
 2415 12c4 AC060018 		.word	_SPACE+MAPOFFSET
 2416 12c8 06       	_SPACS:	.byte  6
 2417 12c9 53504143 		.ascii "SPACES"
 2417      4553
 2418 12cf 00       		.p2align 2 	
 2419              	SPACS:
 2420 12d0 42F804ED 		_NEST
 2421 12d4 FFF755F9 		_DOLIT
 2422 12d8 00000000 		.word	0
 2423 12dc FFF756FB 		BL	MAX
 2424 12e0 FFF7C0F9 		BL	TOR
 2425 12e4 00F002B8 		B.W	CHAR2
 2426              	CHAR1:
 2427 12e8 FFF7E4FF 		BL	SPACE
 2428              	CHAR2:
 2429 12ec FFF75DF9 		BL	DONXT
 2430 12f0 E8060018 		.word	CHAR1+MAPOFFSET
 2431 12f4 52F804FB 		_UNNEST
 2432              	
 2433              	//    TYPE	( b u -- )
 2434              	// 	Output u characters from b.
 2435              	
 2436 12f8 C8060018 		.word	_SPACS+MAPOFFSET
 2437 12fc 04       	_TYPEE:	.byte	4
 2438 12fd 54595045 		.ascii "TYPE"
 2439 1301 0000BF   		.p2align 2 	
 2440              	TYPEE:
 2441 1304 42F804ED 		_NEST
 2442 1308 FFF7ACF9 		BL  TOR   // ( a+1 -- R: u )
 2443 130c 05E0     		B	TYPE2
 2444              	TYPE1:  
 2445 130e FFF775FB 		BL  COUNT
 2446 1312 FFF71BFD 		BL	TCHAR
 2447 1316 FFF723F9 		BL	EMIT
 2448              	TYPE2:  
 2449 131a FFF746F9 		BL  DONXT  
 2450 131e 0E070018 		.word	TYPE1+MAPOFFSET
 2451 1322 FFF7B3F9 		BL	DROP
ARM GAS  stm32eforth.s 			page 47


 2452 1326 52F804FB 		_UNNEST
 2453              	
 2454              	//    CR	  ( -- )
 2455              	// 	Output a carriage return and a line feed.
 2456              	
 2457 132a FC060018 		.word	_TYPEE+MAPOFFSET
 2458 132e 02       	_CR:	.byte  2
 2459 132f 4352     		.ascii "CR"
 2460 1331 0000BF   		.p2align 2 	
 2461              	CR:
 2462 1334 42F804ED 		_NEST
 2463 1338 FFF723F9 		_DOLIT
 2464 133c 0D000000 		.word	CRR
 2465 1340 FFF70EF9 		BL	EMIT
 2466 1344 FFF71DF9 		_DOLIT
 2467 1348 0A000000 		.word	LF
 2468 134c FFF708F9 		BL	EMIT
 2469 1350 52F804FB 		_UNNEST
 2470              	
 2471              	//    do_$	( -- a )
 2472              	// 	Return the address of a compiled string.
 2473              	//  adjust return address to skip over it.
 2474              	
 2475              	// 	.word	_CR+MAPOFFSET
 2476              	// _DOSTR	.byte  COMPO+3
 2477              	// 	.ascii "do$$"
 2478              	// 	.p2align 2 	
 2479              	DOSTR:
 2480 1354 42F804ED 		_NEST     
 2481              	/* compiled string address is 2 levels deep */
 2482 1358 FFF772F9 		BL	RFROM	// { -- a1 }
 2483 135c FFF770F9 		BL	RFROM	//  {a1 -- a1 a2 } b0 set
 2484 1360 FFF736FA 		BL	ONEM	//  clear b0
 2485 1364 FFF79AF9 		BL	DUPP	// {a1 a2 -- a1 a2 a2 }
 2486 1368 FFF748FB 		BL	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2487 136c FFF7FAF9 		BL	PLUS	// { -- a1 a2 a2+1+c }
 2488 1370 FFF7E0FC 		BL	ALGND	//  end of string
 2489 1374 FFF724FA 		BL	ONEP	//  restore b0, this result in return address 2 level deep.
 2490 1378 FFF774F9 		BL	TOR		//  address after string { -- a1 a2 }
 2491 137c FFF796F9 		BL	SWAP	//  count tugged
 2492 1380 FFF770F9 		BL	TOR     //  ( -- a2) is string address
 2493 1384 52F804FB 		_UNNEST
 2494              	
 2495              	//    $"|	( -- a )
 2496              	// 	Run time routine compiled by _". Return address of a compiled string.
 2497              	
 2498              	// 	.word	_DOSTR+MAPOFFSET
 2499              	// _STRQP	.byte  COMPO+3
 2500              	// 	.ascii "$\"|"
 2501              	// 	.p2align 2 	
 2502              	STRQP:
 2503 1388 42F804ED 		_NEST
 2504 138c FFF7E2FF 		BL	DOSTR
 2505 1390 52F804FB 		_UNNEST			// force a call to dostr
 2506              	
 2507              	//    .$	( a -- )
 2508              	// 	Run time routine of ." . Output a compiled string.
ARM GAS  stm32eforth.s 			page 48


 2509              	
 2510              	// 	.word	_STRQP+MAPOFFSET
 2511              	// _DOTST	.byte  COMPO+2
 2512              	// 	.ascii ".$$"
 2513              	// 	.p2align 2 	
 2514              	DOTST:
 2515 1394 42F804ED 		_NEST
 2516 1398 FFF730FB 		BL	COUNT // ( -- a+1 c )
 2517 139c FFF7B2FF 		BL	TYPEE
 2518 13a0 52F804FB 		_UNNEST
 2519              	
 2520              	//    ."|	( -- )
 2521              	// 	Run time routine of ." . Output a compiled string.
 2522              	
 2523              	// 	.word	_DOTST+MAPOFFSET
 2524              	// _DOTQP	.byte  COMPO+3
 2525              	// 	.ascii ".""|"
 2526              	// 	.p2align 2 	
 2527              	DOTQP:
 2528 13a4 42F804ED 		_NEST
 2529 13a8 FFF7D4FF 		BL	DOSTR
 2530 13ac FFF7F2FF 		BL	DOTST
 2531 13b0 52F804FB 		_UNNEST
 2532              	
 2533              	//    .R	  ( n +n -- )
 2534              	// 	Display an integer in a field of n columns, right justified.
 2535              	
 2536 13b4 2E070018 		.word	_CR+MAPOFFSET
 2537 13b8 02       	_DOTR:	.byte  2
 2538 13b9 2E52     		.ascii ".R"
 2539 13bb 00       		.p2align 2 	
 2540              	DOTR:
 2541 13bc 42F804ED 		_NEST
 2542 13c0 FFF750F9 		BL	TOR
 2543 13c4 FFF74EFE 		BL	STRR
 2544 13c8 FFF73AF9 		BL	RFROM
 2545 13cc FFF778F9 		BL	OVER
 2546 13d0 FFF7D0F9 		BL	SUBB
 2547 13d4 FFF77CFF 		BL	SPACS
 2548 13d8 FFF794FF 		BL	TYPEE
 2549 13dc 52F804FB 		_UNNEST
 2550              	
 2551              	//    U.R	 ( u +n -- )
 2552              	// 	Display an unsigned integer in n column, right justified.
 2553              	
 2554 13e0 B8070018 		.word	_DOTR+MAPOFFSET
 2555 13e4 03       	_UDOTR:	.byte  3
 2556 13e5 552E52   		.ascii "U.R"
 2557              		.p2align 2 	
 2558              	UDOTR:
 2559 13e8 42F804ED 		_NEST
 2560 13ec FFF73AF9 		BL	TOR
 2561 13f0 FFF7CCFD 		BL	BDIGS
 2562 13f4 FFF700FE 		BL	DIGS
 2563 13f8 FFF724FE 		BL	EDIGS
 2564 13fc FFF720F9 		BL	RFROM
 2565 1400 FFF75EF9 		BL	OVER
ARM GAS  stm32eforth.s 			page 49


 2566 1404 FFF7B6F9 		BL	SUBB
 2567 1408 FFF762FF 		BL	SPACS
 2568 140c FFF77AFF 		BL	TYPEE
 2569 1410 52F804FB 		_UNNEST
 2570              	
 2571              	//    U.	  ( u -- )
 2572              	// 	Display an unsigned integer in free format.
 2573              	
 2574 1414 E4070018 		.word	_UDOTR+MAPOFFSET
 2575 1418 02       	_UDOT:	.byte  2
 2576 1419 552E     		.ascii "U."
 2577 141b 00       		.p2align 2 	
 2578              	UDOT:
 2579 141c 42F804ED 		_NEST
 2580 1420 FFF7B4FD 		BL	BDIGS
 2581 1424 FFF7E8FD 		BL	DIGS
 2582 1428 FFF70CFE 		BL	EDIGS
 2583 142c FFF742FF 		BL	SPACE
 2584 1430 FFF768FF 		BL	TYPEE
 2585 1434 52F804FB 		_UNNEST
 2586              	
 2587              	//    .	   ( w -- )
 2588              	// 	Display an integer in free format, preceeded by a space.
 2589              	
 2590 1438 18080018 		.word	_UDOT+MAPOFFSET
 2591 143c 01       	_DOT:	.byte  1
 2592 143d 2E       		.ascii "."
 2593 143e 00BF     		.p2align 2 	
 2594              	DOT:
 2595 1440 42F804ED 		_NEST
 2596 1444 FFF728FB 		BL	BASE
 2597 1448 FFF7E4F8 		BL	AT
 2598 144c FFF799F8 		_DOLIT
 2599 1450 0A000000 		.word	10
 2600 1454 FFF75AF9 		BL	XORR			// ?decimal
 2601 1458 FFF7B6F8 		BL	QBRAN
 2602 145c 68080018 		.word	DOT1+MAPOFFSET
 2603 1460 FFF7DCFF 		BL	UDOT
 2604 1464 52F804FB 		_UNNEST			// no,display unsigned
 2605              	DOT1:
 2606 1468 FFF7FCFD 	    BL	STRR
 2607 146c FFF722FF 		BL	SPACE
 2608 1470 FFF748FF 		BL	TYPEE
 2609 1474 52F804FB 		_UNNEST			// yes, display signed
 2610              	
 2611              	//    ?	   ( a -- )
 2612              	// 	Display the contents in a memory cell.
 2613              	
 2614 1478 3C080018 		.word	_DOT+MAPOFFSET
 2615 147c 01       	_QUEST:	.byte  1
 2616 147d 3F       		.ascii "?"
 2617 147e 00BF     		.p2align 2 	
 2618              	QUEST:
 2619 1480 42F804ED 		_NEST
 2620 1484 FFF7C6F8 		BL	AT
 2621 1488 FFF7DAFF 		BL	DOT
 2622 148c 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 50


 2623              	
 2624              	// **************************************************************************
 2625              	//  Parsing
 2626              	
 2627              	//    parse	( b u c -- b u delta //  string> )
 2628              	// 	Scan word delimited by c. Return found string and its offset.
 2629              	
 2630              	// 	.word	_QUEST+MAPOFFSET
 2631              	// _PARS	.byte  5
 2632              	// 	.ascii "parse"
 2633              	// 	.p2align 2 	
 2634              	PARS:
 2635 1490 42F804ED 		_NEST
 2636 1494 FFF705FB 		BL	TEMP
 2637 1498 FFF7B2F8 		BL	STORE
 2638 149c FFF710F9 		BL	OVER
 2639 14a0 FFF7E0F8 		BL	TOR
 2640 14a4 FFF7FAF8 		BL	DUPP
 2641 14a8 FFF78EF8 		BL	QBRAN
 2642 14ac 9E090018 		.word	PARS8+MAPOFFSET
 2643 14b0 FFF78EF9 		BL	ONEM
 2644 14b4 FFF7F5FA 		BL	TEMP
 2645 14b8 FFF7ACF8 		BL	AT
 2646 14bc FFF7B0F9 		BL	BLANK
 2647 14c0 FFF734FA 		BL	EQUAL
 2648 14c4 FFF780F8 		BL	QBRAN
 2649 14c8 18090018 		.word	PARS3+MAPOFFSET
 2650 14cc FFF7CAF8 		BL	TOR
 2651              	PARS1:
 2652 14d0 FFF7A6F9 		BL	BLANK
 2653 14d4 FFF7F4F8 		BL	OVER
 2654 14d8 FFF7ACF8 		BL	CAT			// skip leading blanks 
 2655 14dc FFF74AF9 		BL	SUBB
 2656 14e0 FFF7F6F8 		BL	ZLESS
 2657 14e4 FFF7FCF9 		BL	INVER
 2658 14e8 FFF76EF8 		BL	QBRAN
 2659 14ec 14090018 		.word	PARS2+MAPOFFSET
 2660 14f0 FFF766F9 		BL	ONEP
 2661 14f4 FFF759F8 		BL	DONXT
 2662 14f8 D0080018 		.word	PARS1+MAPOFFSET
 2663 14fc FFF7A0F8 		BL	RFROM
 2664 1500 FFF7C4F8 		BL	DROP
 2665 1504 FFF73DF8 		_DOLIT
 2666 1508 00000000 		.word	0
 2667 150c FFF7C6F8 		BL	DUPP
 2668 1510 52F804FB 		_UNNEST
 2669              	PARS2:
 2670 1514 FFF794F8 	  BL	RFROM
 2671              	PARS3:
 2672 1518 FFF7D2F8 		BL	OVER
 2673 151c FFF7C6F8 		BL	SWAP
 2674 1520 FFF7A0F8 		BL	TOR
 2675              	PARS4:
 2676 1524 FFF7BDFA 		BL	TEMP
 2677 1528 FFF774F8 		BL	AT
 2678 152c FFF7C8F8 		BL	OVER
 2679 1530 FFF780F8 		BL	CAT
ARM GAS  stm32eforth.s 			page 51


 2680 1534 FFF71EF9 		BL	SUBB			// scan for delimiter
 2681 1538 FFF7B3FA 		BL	TEMP
 2682 153c FFF76AF8 		BL	AT
 2683 1540 FFF76EF9 		BL	BLANK
 2684 1544 FFF7F2F9 		BL	EQUAL
 2685 1548 FFF73EF8 		BL	QBRAN
 2686 154c 54090018 		.word	PARS5+MAPOFFSET
 2687 1550 FFF7BEF8 		BL	ZLESS
 2688              	PARS5:
 2689 1554 FFF738F8 		BL	QBRAN
 2690 1558 72090018 		.word	PARS6+MAPOFFSET
 2691 155c FFF730F9 		BL	ONEP
 2692 1560 FFF723F8 		BL	DONXT
 2693 1564 24090018 		.word	PARS4+MAPOFFSET
 2694 1568 FFF798F8 		BL	DUPP
 2695 156c FFF77AF8 		BL	TOR
 2696 1570 09E0     		B	PARS7
 2697              	PARS6:
 2698 1572 FFF765F8 		BL	RFROM
 2699 1576 FFF789F8 		BL	DROP
 2700 157a FFF78FF8 		BL	DUPP
 2701 157e FFF71FF9 		BL	ONEP
 2702 1582 FFF76FF8 		BL	TOR
 2703              	PARS7:
 2704 1586 FFF79BF8 		BL	OVER
 2705 158a FFF7F3F8 		BL	SUBB
 2706 158e FFF757F8 		BL	RFROM
 2707 1592 FFF755F8 		BL	RFROM
 2708 1596 FFF7EDF8 		BL	SUBB
 2709 159a 52F804FB 		_UNNEST
 2710              	PARS8:
 2711 159e FFF78FF8 		BL	OVER
 2712 15a2 FFF74DF8 		BL	RFROM
 2713 15a6 FFF7E5F8 		BL	SUBB
 2714 15aa 52F804FB 		_UNNEST
 2715              	
 2716              	//    PARSE	( c -- b u //  string> )
 2717              	// 	Scan input stream and return counted string delimited by c.
 2718              	
 2719 15ae 7C080018 		.word	_QUEST+MAPOFFSET
 2720 15b2 05       	_PARSE:	.byte  5
 2721 15b3 50415253 		.ascii "PARSE"
 2721      45
 2722              		.p2align 2 	
 2723              	PARSE:
 2724 15b8 42F804ED 		_NEST
 2725 15bc FFF752F8 		BL	TOR
 2726 15c0 FFF728FC 		BL	TIB
 2727 15c4 FFF782FA 		BL	INN
 2728 15c8 FFF724F8 		BL	AT
 2729 15cc FFF7CAF8 		BL	PLUS			// current input buffer pointer
 2730 15d0 FFF786FA 		BL	NTIB
 2731 15d4 FFF71EF8 		BL	AT
 2732 15d8 FFF778FA 		BL	INN
 2733 15dc FFF71AF8 		BL	AT
 2734 15e0 FFF7C8F8 		BL	SUBB			// remaining count
 2735 15e4 FFF72CF8 		BL	RFROM
ARM GAS  stm32eforth.s 			page 52


 2736 15e8 FFF752FF 		BL	PARS
 2737 15ec FFF76EFA 		BL	INN
 2738 15f0 FFF7E0F9 		BL	PSTOR
 2739 15f4 52F804FB 		_UNNEST
 2740              	
 2741              	//    .(	  ( -- )
 2742              	// 	Output following string up to next ) .
 2743              	
 2744 15f8 B2090018 		.word	_PARSE+MAPOFFSET
 2745 15fc 82       	_DOTPR:	.byte  IMEDD+2
 2746 15fd 2E28     		.ascii ".("
 2747 15ff 00       		.p2align 2 	
 2748              	DOTPR:
 2749 1600 42F804ED 		_NEST
 2750 1604 FEF7BDFF 		_DOLIT
 2751 1608 29000000 		.word	')'
 2752 160c FFF7D4FF 		BL	PARSE
 2753 1610 FFF778FE 		BL	TYPEE
 2754 1614 52F804FB 		_UNNEST
 2755              	
 2756              	//    (	   ( -- )
 2757              	// 	Ignore following string up to next ) . A comment.
 2758              	
 2759 1618 FC090018 		.word	_DOTPR+MAPOFFSET
 2760 161c 81       	_PAREN:	.byte  IMEDD+1
 2761 161d 28       		.ascii "("
 2762 161e 00BF     		.p2align 2 	
 2763              	PAREN:
 2764 1620 42F804ED 		_NEST
 2765 1624 FEF7ADFF 		_DOLIT
 2766 1628 29000000 		.word	')'
 2767 162c FFF7C4FF 		BL	PARSE
 2768 1630 FFF734F9 		BL	DDROP
 2769 1634 52F804FB 		_UNNEST
 2770              	
 2771              	//    \	   ( -- )
 2772              	// 	Ignore following text till the end of line.
 2773              	
 2774 1638 1C0A0018 		.word	_PAREN+MAPOFFSET
 2775 163c 81       	_BKSLA:	.byte  IMEDD+1
 2776 163d 27       		.byte	'\'
 2777 163e 00BF     		.p2align 2 	
 2778              	BKSLA:
 2779 1640 42F804ED 		_NEST
 2780 1644 FFF74CFA 		BL	NTIB
 2781 1648 FEF7E4FF 		BL	AT
 2782 164c FFF73EFA 		BL	INN
 2783 1650 FEF7D6FF 		BL	STORE
 2784 1654 52F804FB 		_UNNEST
 2785              	
 2786              	//    CHAR	( -- c )
 2787              	// 	Parse next word and return its first character.
 2788              	
 2789 1658 3C0A0018 		.word	_BKSLA+MAPOFFSET
 2790 165c 04       	_CHAR:	.byte  4
 2791 165d 43484152 		.ascii "CHAR"
 2792 1661 0000BF   		.p2align 2 	
ARM GAS  stm32eforth.s 			page 53


 2793              	CHAR:
 2794 1664 42F804ED 		_NEST
 2795 1668 FFF7DAF8 		BL	BLANK
 2796 166c FFF7A4FF 		BL	PARSE
 2797 1670 FFF70CF8 		BL	DROP
 2798 1674 FEF7DEFF 		BL	CAT
 2799 1678 52F804FB 		_UNNEST
 2800              	
 2801              	//    WORD	( c -- a //  string> )
 2802              	// 	Parse a word from input stream and copy it to code dictionary.
 2803              	
 2804 167c 5C0A0018 		.word	_CHAR+MAPOFFSET
 2805 1680 04       	_WORDD:	.byte  4
 2806 1681 574F5244 		.ascii "WORD"
 2807 1685 0000BF   		.p2align 2 	
 2808              	WORDD:
 2809 1688 42F804ED 		_NEST
 2810 168c FFF794FF 		BL	PARSE
 2811 1690 FFF7A8FB 		BL	HERE
 2812 1694 FFF7B4F8 		BL	CELLP
 2813 1698 FFF71AFC 		BL	PACKS
 2814 169c 52F804FB 		_UNNEST
 2815              	
 2816              	//    TOKEN	( -- a //  string> )
 2817              	// 	Parse a word from input stream and copy it to name dictionary.
 2818              	
 2819 16a0 800A0018 		.word	_WORDD+MAPOFFSET
 2820 16a4 05       	_TOKEN:	.byte  5
 2821 16a5 544F4B45 		.ascii "TOKEN"
 2821      4E
 2822 16aa 00BF     		.p2align 2 	
 2823              	TOKEN:
 2824 16ac 42F804ED 		_NEST
 2825 16b0 FFF7B6F8 		BL	BLANK
 2826 16b4 FFF7E8FF 		BL	WORDD
 2827 16b8 52F804FB 		_UNNEST
 2828              	
 2829              	// **************************************************************************
 2830              	//  Dictionary search
 2831              	
 2832              	//    NAME>	( na -- ca )
 2833              	// 	Return a code address given a name address.
 2834              	
 2835 16bc A40A0018 		.word	_TOKEN+MAPOFFSET
 2836 16c0 05       	_NAMET:	.byte  5
 2837 16c1 4E414D45 		.ascii "NAME>"
 2837      3E
 2838 16c6 00BF     		.p2align 2 	
 2839              	NAMET:
 2840 16c8 42F804ED 		_NEST
 2841 16cc FFF796F9 		BL	COUNT
 2842 16d0 FEF757FF 		_DOLIT
 2843 16d4 1F000000 		.word	0x1F
 2844 16d8 FFF704F8 		BL	ANDD
 2845 16dc FFF742F8 		BL	PLUS
 2846 16e0 FFF728FB 		BL	ALGND
 2847 16e4 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 54


 2848              	
 2849              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2850              	// 	Compare u bytes in two strings. Return 0 if identical.
 2851              	//
 2852              	//  Picatout 2020-12-01, 
 2853              	//      Because of problem with .align directive that
 2854              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2855              	// 		words  to do a byte by byte comparison. 
 2856              	//
 2857 16e8 C00A0018 		.word	_NAMET+MAPOFFSET
 2858 16ec 05       	_SAMEQ:	.byte  5
 2859 16ed 53414D45 		.ascii "SAME?"
 2859      3F
 2860 16f2 00BF     		.p2align 2	
 2861              	SAMEQ:
 2862 16f4 42F804ED 		_NEST
 2863 16f8 FEF7B4FF 		BL	TOR
 2864 16fc 00F01EB8 		B.W	SAME2
 2865              	SAME1:
 2866 1700 FEF7DEFF 		BL	OVER  // ( a1 a2 -- a1 a2 a1 )
 2867 1704 FEF7A6FF 		BL	RAT   // a1 a2 a1 u 
 2868 1708 FFF72CF8 		BL	PLUS  // a1 a2 a1+u 
 2869 170c FEF792FF 		BL	CAT	   // a1 a2 c1    		
 2870 1710 FEF7D6FF 		BL	OVER  // a1 a2 c1 a2 
 2871 1714 FEF79EFF 		BL	RAT    
 2872 1718 FFF724F8 		BL	PLUS    
 2873 171c FEF78AFF 		BL	CAT	  // a1 a2 c1 c2
 2874 1720 FFF728F8 		BL	SUBB  
 2875 1724 FFF7A6F8 		BL	QDUP
 2876 1728 FEF74EFF 		BL	QBRAN
 2877 172c 3C0B0018 		.word	SAME2+MAPOFFSET
 2878 1730 FEF786FF 		BL	RFROM
 2879 1734 FEF7AAFF 		BL	DROP
 2880 1738 52F804FB 		_UNNEST	// strings not equal
 2881              	SAME2:
 2882 173c FEF735FF 		BL	DONXT
 2883 1740 000B0018 		.word	SAME1+MAPOFFSET
 2884 1744 FEF71DFF 		_DOLIT
 2885 1748 00000000 		.word	0
 2886 174c 52F804FB 		_UNNEST	// strings equal
 2887              	
 2888              	//    find	( a na -- ca na | a F )
 2889              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2890              	
 2891              	//  Picatout 2020-12-01,  
 2892              	//		Modified from original. See comment for word "SAME?" 
 2893              	
 2894              	// 	.word	_SAMEQ+MAPOFFSET
 2895              	// _FIND	.byte  4
 2896              	// 	.ascii "find"
 2897              	// 	.p2align 2 	
 2898              	FIND:
 2899 1750 42F804ED 		_NEST
 2900 1754 FEF7AAFF 		BL	SWAP			// na a	
 2901 1758 FFF750F9 		BL	COUNT			// na a+1 count
 2902 175c FEF79EFF 		BL	DUPP 
 2903 1760 FFF79FF9 		BL	TEMP
ARM GAS  stm32eforth.s 			page 55


 2904 1764 FEF74CFF 		BL	STORE			// na a+1 count 
 2905 1768 FEF77CFF 		BL  TOR		// na a+1  R: count  
 2906 176c FEF79EFF 		BL	SWAP			// a+1 na
 2907              	FIND1:
 2908 1770 FEF794FF 		BL	DUPP			// a+1 na na
 2909 1774 FEF728FF 		BL	QBRAN
 2910 1778 C00B0018 		.word	FIND6+MAPOFFSET	// end of vocabulary
 2911 177c FEF78EFF 		BL	DUPP			// a+1 na na
 2912 1780 FEF758FF 		BL	CAT			// a+1 na name1
 2913 1784 FEF7FDFE 		_DOLIT
 2914 1788 1FFFFFFF 		.word	MASKK
 2915 178c FEF7AAFF 		BL	ANDD
 2916 1790 FEF760FF 		BL	RAT			// a+1 na name1 count 
 2917 1794 FEF7BAFF 		BL	XORR			// a+1 na,  same length?
 2918 1798 FEF716FF 		BL	QBRAN
 2919 179c AC0B0018 		.word	FIND2+MAPOFFSET
 2920 17a0 FFF736F8 		BL	CELLM			// a+1 la
 2921 17a4 FEF736FF 		BL	AT			// a+1 next_na
 2922 17a8 FFF7E2BF 		B.w	FIND1			// try next word
 2923              	FIND2:   
 2924 17ac FFF708F8 		BL	ONEP			// a+1 na+1
 2925 17b0 FFF777F9 		BL	TEMP
 2926 17b4 FEF72EFF 		BL	AT			// a+1 na+1 count
 2927 17b8 FFF79CFF 		BL	SAMEQ		// a+1 na+1 ? 
 2928              	FIND3:	
 2929 17bc 00F00CB8 		B.w	FIND4
 2930              	FIND6:	
 2931 17c0 FEF73EFF 		BL	RFROM			// a+1 0 name1 -- , no match
 2932 17c4 FEF762FF 		BL	DROP			// a+1 0
 2933 17c8 FEF770FF 		BL	SWAP			// 0 a+1
 2934 17cc FFF700F8 		BL	ONEM			// 0 a
 2935 17d0 FEF76CFF 		BL	SWAP			// a 0 
 2936 17d4 52F804FB 		_UNNEST			// return without a match
 2937              	FIND4:	
 2938 17d8 FEF7F6FE 		BL	QBRAN			// a+1 na+1
 2939 17dc F00B0018 		.word	FIND5+MAPOFFSET	// found a match
 2940 17e0 FEF7F6FF 		BL	ONEM			// a+1 na
 2941 17e4 FFF714F8 		BL	CELLM			// a+4 la
 2942 17e8 FEF714FF 		BL	AT			// a+1 next_na
 2943 17ec FFF7C0BF 		B.w	FIND1			// compare next name
 2944              	FIND5:	
 2945 17f0 FEF726FF 		BL	RFROM			// a+1 na+1 count
 2946 17f4 FEF74AFF 		BL	DROP			// a+1 na+1
 2947 17f8 FEF758FF 		BL	SWAP			// na+1 a+1
 2948 17fc FEF746FF 		BL	DROP			// na+1
 2949 1800 FEF7E6FF 		BL	ONEM			// na
 2950 1804 FEF74AFF 		BL	DUPP			// na na
 2951 1808 FFF75EFF 		BL	NAMET			// na ca
 2952 180c FEF74EFF 		BL	SWAP			// ca na
 2953 1810 52F804FB 		_UNNEST			//  return with a match
 2954              	
 2955              	//    NAME?	( a -- ca na | a F )
 2956              	// 	Search all context vocabularies for a string.
 2957              	
 2958 1814 EC0A0018 		.word	_SAMEQ+MAPOFFSET
 2959 1818 05       	_NAMEQ:	.byte  5
 2960 1819 4E414D45 		.ascii "NAME?"
ARM GAS  stm32eforth.s 			page 56


 2960      3F
 2961 181e 00BF     		.p2align 2 	
 2962              	NAMEQ:
 2963 1820 42F804ED 		_NEST
 2964 1824 FFF77CF9 		BL	CNTXT
 2965 1828 FEF7F4FE 		BL	AT
 2966 182c FFF790FF 		BL	FIND
 2967 1830 52F804FB 		_UNNEST
 2968              	
 2969              	// **************************************************************************
 2970              	//  Terminal input
 2971              	
 2972              	//    	  ( bot eot cur -- bot eot cur )
 2973              	// 	Backup the cursor by one character.
 2974              	
 2975              	// 	.word	_NAMEQ+MAPOFFSET
 2976              	// _BKSP	.byte  2
 2977              	// 	.ascii "^H"
 2978              	// 	.p2align 2 	
 2979              	BKSP:
 2980 1834 42F804ED 		_NEST
 2981 1838 FEF714FF 		BL	TOR
 2982 183c FEF740FF 		BL	OVER
 2983 1840 FEF7FEFE 		BL	RFROM
 2984 1844 FEF732FF 		BL	SWAP
 2985 1848 FEF73AFF 		BL	OVER
 2986 184c FEF75EFF 		BL	XORR
 2987 1850 FEF7BAFE 		BL	QBRAN
 2988 1854 7C0C0018 		.word	BACK1+MAPOFFSET
 2989 1858 FEF793FE 		_DOLIT
 2990 185c 08000000 		.word	BKSPP
 2991 1860 FEF77EFE 		BL	TECHO
 2992              	// 	BL	ATEXE
 2993 1864 FEF7B4FF 		BL	ONEM
 2994 1868 FEF7DAFF 		BL	BLANK
 2995 186c FEF778FE 		BL	TECHO
 2996              	// 	BL	ATEXE
 2997 1870 FEF787FE 		_DOLIT
 2998 1874 08000000 		.word	BKSPP
 2999 1878 FEF772FE 		BL	TECHO
 3000              	// 	BL	ATEXE
 3001              	BACK1:
 3002 187c 52F804FB 		  _UNNEST
 3003              	
 3004              	//    TAP	 ( bot eot cur c -- bot eot cur )
 3005              	// 	Accept and echo the key stroke and bump the cursor.
 3006              	
 3007              	// 	.word	_BKSP+MAPOFFSET
 3008              	// _TAP	.byte  3
 3009              	// 	.ascii "TAP"
 3010              	// 	.p2align 2 	
 3011              	TAP:
 3012 1880 42F804ED 		_NEST
 3013 1884 FEF70AFF 		BL	DUPP
 3014 1888 FEF76AFE 		BL	TECHO
 3015              	// 	BL	ATEXE
 3016 188c FEF718FF 		BL	OVER
ARM GAS  stm32eforth.s 			page 57


 3017 1890 FEF7C6FE 		BL	CSTOR
 3018 1894 FEF794FF 		BL	ONEP
 3019 1898 52F804FB 		_UNNEST
 3020              	
 3021              	//    kTAP	( bot eot cur c -- bot eot cur )
 3022              	// 	Process a key stroke, CR or backspace.
 3023              	
 3024              	// 	.word	_TAP+MAPOFFSET
 3025              	// _KTAP	.byte  4
 3026              	// 	.ascii "kTAP"
 3027              	// 	.p2align 2 	
 3028              	KTAP:
 3029              	TTAP:
 3030 189c 42F804ED 		_NEST
 3031 18a0 FEF7FCFE 		BL	DUPP
 3032 18a4 FEF76DFE 		_DOLIT
 3033 18a8 0D000000 		.word	CRR
 3034 18ac FEF72EFF 		BL	XORR
 3035 18b0 FEF78AFE 		BL	QBRAN
 3036 18b4 E40C0018 		.word	KTAP2+MAPOFFSET
 3037 18b8 FEF763FE 		_DOLIT
 3038 18bc 08000000 		.word	BKSPP
 3039 18c0 FEF724FF 		BL	XORR
 3040 18c4 FEF780FE 		BL	QBRAN
 3041 18c8 DC0C0018 		.word	KTAP1+MAPOFFSET
 3042 18cc FEF7A8FF 		BL	BLANK
 3043 18d0 FFF7D6FF 		BL	TAP
 3044 18d4 52F804FB 		_UNNEST
 3045 18d8 00000000 		.word	0			// patch
 3046              	KTAP1:
 3047 18dc FFF7AAFF 	  BL	BKSP
 3048 18e0 52F804FB 		_UNNEST
 3049              	KTAP2:
 3050 18e4 FEF7D2FE 	  BL	DROP
 3051 18e8 FEF7E0FE 		BL	SWAP
 3052 18ec FEF7CEFE 		BL	DROP
 3053 18f0 FEF7D4FE 		BL	DUPP
 3054 18f4 52F804FB 		_UNNEST
 3055              	
 3056              	//    ACCEPT	( b u -- b u )
 3057              	// 	Accept characters to input buffer. Return with actual count.
 3058              	
 3059 18f8 180C0018 		.word	_NAMEQ+MAPOFFSET
 3060 18fc 06       	_ACCEP:	.byte  6
 3061 18fd 41434345 		.ascii "ACCEPT"
 3061      5054
 3062 1903 00       		.p2align 2 	
 3063              	ACCEP:
 3064 1904 42F804ED 		_NEST
 3065 1908 FEF7DAFE 		BL	OVER
 3066 190c FEF72AFF 		BL	PLUS
 3067 1910 FEF7D6FE 		BL	OVER
 3068              	ACCP1:
 3069 1914 FEF7CCFF 	  BL	DDUP
 3070 1918 FEF7F8FE 		BL	XORR
 3071 191c FEF754FE 		BL	QBRAN
 3072 1920 500D0018 		.word	ACCP4+MAPOFFSET
ARM GAS  stm32eforth.s 			page 58


 3073 1924 FFF7A8FC 		BL	KEY
 3074 1928 FEF7B8FE 		BL	DUPP
 3075 192c FEF778FF 		BL	BLANK
 3076 1930 FEF727FE 		_DOLIT
 3077 1934 7F000000 		.word	127
 3078 1938 FFF742F9 		BL	WITHI
 3079 193c FEF744FE 		BL	QBRAN
 3080 1940 4A0D0018 		.word	ACCP2+MAPOFFSET
 3081 1944 FFF79CFF 		BL	TAP
 3082 1948 01E0     		B	ACCP3
 3083              	ACCP2:
 3084 194a FFF7A7FF 	  BL	KTAP
 3085              	// 	BL	ATEXE
 3086              	ACCP3:	  
 3087 194e E1E7     		B	ACCP1
 3088              	ACCP4:
 3089 1950 FEF79CFE 	  BL	DROP
 3090 1954 FEF7B4FE 		BL	OVER
 3091 1958 FEF70CFF 		BL	SUBB
 3092 195c 52F804FB 		_UNNEST
 3093              	
 3094              	//    QUERY	( -- )
 3095              	// 	Accept input stream to terminal input buffer.
 3096              	
 3097 1960 FC0C0018 		.word	_ACCEP+MAPOFFSET
 3098 1964 05       	_QUERY:	.byte  5
 3099 1965 51554552 		.ascii "QUERY"
 3099      59
 3100 196a 00BF     		.p2align 2 	
 3101              	QUERY:
 3102 196c 42F804ED 		_NEST
 3103 1970 FFF750FA 		BL	TIB
 3104 1974 FEF705FE 		_DOLIT
 3105 1978 50000000 		.word	80
 3106 197c FFF7C2FF 		BL	ACCEP
 3107 1980 FFF7AEF8 		BL	NTIB
 3108 1984 FEF73CFE 		BL	STORE
 3109 1988 FEF780FE 		BL	DROP
 3110 198c FEF7F9FD 		_DOLIT
 3111 1990 00000000 		.word	0
 3112 1994 FFF79AF8 		BL	INN
 3113 1998 FEF732FE 		BL	STORE
 3114 199c 52F804FB 		_UNNEST
 3115              	
 3116              	// **************************************************************************
 3117              	//  Error handling
 3118              	
 3119              	//    ABORT	( a -- )
 3120              	// 	Reset data stack and jump to QUIT.
 3121              	
 3122 19a0 640D0018 		.word	_QUERY+MAPOFFSET
 3123 19a4 05       	_ABORT:	.byte  5
 3124 19a5 41424F52 		.ascii "ABORT"
 3124      54
 3125 19aa 00BF     		.p2align 2 	
 3126              	ABORT:
 3127 19ac 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 59


 3128 19b0 FFF780FC 		BL	SPACE
 3129 19b4 FFF722F8 		BL	COUNT
 3130 19b8 FFF7A4FC 		BL	TYPEE
 3131 19bc FEF7E1FD 		_DOLIT
 3132 19c0 3F000000 		.word	0X3F
 3133 19c4 FEF7CCFD 		BL	EMIT
 3134 19c8 FFF7B4FC 		BL	CR
 3135 19cc 00F0B2F8 		BL	PRESE
 3136 19d0 00F0BCB8 		B.W	QUIT
 3137              	
 3138              	//    _abort"	( f -- )
 3139              	// 	Run time routine of ABORT" . Abort with a message.
 3140              	
 3141              	// 	.word	_ABORT+MAPOFFSET
 3142              	// _ABORQ	.byte  COMPO+6
 3143              	// 	.ascii "abort\""
 3144              	// 	.p2align 2 	
 3145              	ABORQ:
 3146 19d4 42F804ED 		_NEST
 3147 19d8 FEF7F6FD 		BL	QBRAN
 3148 19dc F40D0018 		.word	ABOR1+MAPOFFSET	// text flag
 3149 19e0 FFF7B8FC 		BL	DOSTR
 3150 19e4 FFF70AF8 		BL	COUNT
 3151 19e8 FFF78CFC 		BL	TYPEE
 3152 19ec FFF7A2FC 		BL	CR
 3153 19f0 00F0ACB8 		B.W	QUIT
 3154              	ABOR1:
 3155 19f4 FFF7AEFC 		BL	DOSTR
 3156 19f8 FEF748FE 		BL	DROP
 3157 19fc 52F804FB 		_UNNEST			// drop error
 3158              	
 3159              	// **************************************************************************
 3160              	//  The text interpreter
 3161              	
 3162              	//    $INTERPRET  ( a -- )
 3163              	// 	Interpret a word. If failed, try to convert it to an integer.
 3164              	
 3165 1a00 A40D0018 		.word	_ABORT+MAPOFFSET
 3166 1a04 0A       	_INTER:	.byte  10
 3167 1a05 2424494E 		.ascii "$$INTERPRET"
 3167      54455250 
 3167      524554
 3168              		.p2align 2 	
 3169              	INTER:
 3170 1a10 42F804ED 		_NEST
 3171 1a14 FFF704FF 		BL	NAMEQ
 3172 1a18 FEF72CFF 		BL	QDUP	// ?defined
 3173 1a1c FEF7D4FD 		BL	QBRAN
 3174 1a20 500E0018 		.word	INTE1+MAPOFFSET
 3175 1a24 FEF7F6FD 		BL	AT
 3176 1a28 FEF7ABFD 		_DOLIT
 3177 1a2c 40000000 		.word	COMPO
 3178 1a30 FEF758FE 		BL	ANDD	// ?compile only lexicon bits
 3179 1a34 FFF7CEFF 		BL	ABORQ
 3180 1a38 0D       		.byte	13
 3181 1a39 20636F6D 		.ascii " compile only"
 3181      70696C65 
ARM GAS  stm32eforth.s 			page 60


 3181      206F6E6C 
 3181      79
 3182 1a46 00BF     		.p2align 2 	
 3183 1a48 FEF7AAFD 		BL	EXECU
 3184 1a4c 52F804FB 		_UNNEST			// execute defined word
 3185              	INTE1:
 3186 1a50 FFF778FB 	  BL	NUMBQ
 3187 1a54 FEF7B8FD 		BL	QBRAN
 3188 1a58 600E0018 		.word	INTE2+MAPOFFSET
 3189 1a5c 52F804FB 		_UNNEST
 3190              	INTE2:
 3191 1a60 FFF7A4BF 	  B.W	ABORT	// error
 3192              	
 3193              	//    [	   ( -- )
 3194              	// 	Start the text interpreter.
 3195              	
 3196 1a64 040E0018 		.word	_INTER+MAPOFFSET
 3197 1a68 81       	_LBRAC:	.byte  IMEDD+1
 3198 1a69 5B       		.ascii "["
 3199 1a6a 00BF     		.p2align 2 	
 3200              	LBRAC:
 3201 1a6c 42F804ED 		_NEST
 3202 1a70 FEF787FD 		_DOLIT
 3203 1a74 100E0018 		.word	INTER+MAPOFFSET
 3204 1a78 FFF73CF8 		BL	TEVAL
 3205 1a7c FEF7C0FD 		BL	STORE
 3206 1a80 52F804FB 		_UNNEST
 3207              	
 3208              	//    .OK	 ( -- )
 3209              	// 	Display "ok" only while interpreting.
 3210              	
 3211 1a84 680E0018 		.word	_LBRAC+MAPOFFSET
 3212 1a88 03       	_DOTOK:	.byte  3
 3213 1a89 2E4F4B   		.ascii ".OK"
 3214              		.p2align 2 	
 3215              	DOTOK:
 3216 1a8c 42F804ED 		_NEST
 3217 1a90 FEF777FD 		_DOLIT
 3218 1a94 100E0018 		.word	INTER+MAPOFFSET
 3219 1a98 FFF72CF8 		BL	TEVAL
 3220 1a9c FEF7BAFD 		BL	AT
 3221 1aa0 FEF744FF 		BL	EQUAL
 3222 1aa4 FEF790FD 		BL	QBRAN
 3223 1aa8 B40E0018 		.word	DOTO1+MAPOFFSET
 3224 1aac FFF77AFC 		BL	DOTQP
 3225 1ab0 03       		.byte	3
 3226 1ab1 206F6B   		.ascii " ok"
 3227              	DOTO1:
 3228 1ab4 FFF73EFC 		BL	CR
 3229 1ab8 52F804FB 		_UNNEST
 3230              	
 3231              	//    ?STACK	( -- )
 3232              	// 	Abort if the data stack underflows.
 3233              	
 3234 1abc 880E0018 		.word	_DOTOK+MAPOFFSET
 3235 1ac0 06       	_QSTAC:	.byte  6
 3236 1ac1 3F535441 		.ascii "?STACK"
ARM GAS  stm32eforth.s 			page 61


 3236      434B
 3237 1ac7 00       		.p2align 2 	
 3238              	QSTAC:
 3239 1ac8 42F804ED 		_NEST
 3240 1acc FFF764F9 		BL	DEPTH
 3241 1ad0 FEF7FEFD 		BL	ZLESS	// check only for underflow
 3242 1ad4 FFF77EFF 		BL	ABORQ
 3243 1ad8 0A       		.byte	10
 3244 1ad9 20756E64 		.ascii " underflow"
 3244      6572666C 
 3244      6F77
 3245 1ae3 00       		.p2align 2 	
 3246 1ae4 52F804FB 		_UNNEST
 3247              	
 3248              	//    EVAL	( -- )
 3249              	// 	Interpret the input stream.
 3250              	
 3251 1ae8 C00E0018 		.word	_QSTAC+MAPOFFSET
 3252 1aec 04       	_EVAL:	.byte  4
 3253 1aed 4556414C 		.ascii "EVAL"
 3254 1af1 0000BF   		.p2align 2 	
 3255              	EVAL:
 3256 1af4 42F804ED 		_NEST
 3257              	EVAL1:
 3258 1af8 FFF7D8FD 	    BL	TOKEN
 3259 1afc FEF7CEFD 		BL	DUPP
 3260 1b00 FEF798FD 		BL	CAT	// ?input stream empty
 3261 1b04 FEF760FD 		BL	QBRAN
 3262 1b08 1C0F0018 		.word	EVAL2+MAPOFFSET
 3263 1b0c FEF7F2FF 		BL	TEVAL
 3264 1b10 FFF78CF9 		BL	ATEXE
 3265 1b14 FFF7D8FF 		BL	QSTAC	// evaluate input, check stack
 3266 1b18 FFF7EEBF 		B.W	EVAL1
 3267              	EVAL2:
 3268 1b1c FEF7B6FD 		BL	DROP
 3269 1b20 FFF7B4FF 		BL	DOTOK
 3270 1b24 52F804FB 		_UNNEST	// prompt
 3271              	
 3272              	//    PRESET	( -- )
 3273              	// 	Reset data stack pointer and the terminal input buffer.
 3274              	
 3275 1b28 EC0E0018 		.word	_EVAL+MAPOFFSET
 3276 1b2c 06       	_PRESE:	.byte  6
 3277 1b2d 50524553 		.ascii "PRESET"
 3277      4554
 3278 1b33 00       		.p2align 2 	
 3279              	PRESE:
 3280              	//	_NEST
 3281 1b34 44F68061 		MOVW	R1,#SPP&0xffff		//  init SP
 3282 1b38 C2F20001 	 	MOVT	R1,#SPP>>16
 3283 1b3c 85EA0505 		EOR	R5,R5,R5			//  init TOS=0
 3284              	//	_UNNEST
 3285 1b40 7047     		_NEXT
 3286              	
 3287              	//    QUIT	( -- )
 3288              	// 	Reset return stack pointer and start text interpreter.
 3289              	
ARM GAS  stm32eforth.s 			page 62


 3290 1b42 2C0F0018 		.word	_PRESE+MAPOFFSET
 3291 1b46 04       	_QUIT:	.byte  4
 3292 1b47 51554954 		.ascii "QUIT"
 3293 1b4b 00       		.p2align 2 	
 3294              	QUIT:
 3295 1b4c 42F804ED 		_NEST
 3296 1b50 44F68072 		MOVW	R2,#RPP&0xffff  /* RESET RSTACK */
 3297 1b54 C2F20002 	 	MOVT	R2,#RPP>>16 
 3298              	QUIT1:
 3299 1b58 FFF788FF 		BL	LBRAC			// start interpretation
 3300              	QUIT2:
 3301 1b5c FFF706FF 		BL	QUERY			// get input
 3302 1b60 FFF7C8FF 		BL	EVAL
 3303 1b64 FEF73CFD 		BL	BRAN
 3304 1b68 5C0F0018 		.word	QUIT2+MAPOFFSET	// continue till error
 3305              	
 3306              	/***************************
 3307              	//  Flash memory interface
 3308              	***************************/
 3309              	// UNLOCK ( T|F -- )
 3310              	// lock or unlock FLASH write 
 3311              	
 3312 1b6c 460F0018 		.word _QUIT+MAPOFFSET  
 3313 1b70 06       	_UNLOCK: .byte 6
 3314 1b71 554E4C4F 		.ascii "UNLOCK"
 3314      434B
 3315 1b77 00       		.p2align 2  
 3316              	UNLOCK:	//  unlock flash memory	
 3317 1b78 42F804ED 		_NEST 
 3318 1b7c FEF724FD 		BL QBRAN
 3319 1b80 A00F0018 		.word LOCK+MAPOFFSET
 3320 1b84 6748     		ldr	r0, flash_regs 
 3321 1b86 4FF03404 		mov r4,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 3322 1b8a C460     		str r4,[r0,#FLASH_SR]
 3323 1b8c 0469     		ldr r4,[r0,#FLASH_CR]
 3324 1b8e 14F0800F 		tst r4,#(1<<7)
 3325 1b92 03D0     		beq 1f 
 3326 1b94 644C     		ldr	r4, flash_regs+4 // key1
 3327 1b96 4460     		str	r4, [r0, #FLASH_KEYR]
 3328 1b98 644C     		ldr	r4, flash_regs+8 // key2 
 3329 1b9a 4460     		str	r4, [r0, #FLASH_KEYR]
 3330              		/* unlock option registers */
 3331              	/*
 3332              		ldr	r4, flash_regs+4 
 3333              		str	r4, [r0, #FLASH_OPTKEYR]
 3334              		ldr	r4, flash_regs+8
 3335              		str	r4, [r0, #FLASH_OPTKEYR]
 3336              	*/ 
 3337              	1:
 3338 1b9c 52F804FB 		_UNNEST
 3339              	 // lock flash memory
 3340              	LOCK: 
 3341 1ba0 6048     		ldr r0,flash_regs  
 3342              	//	ldr r4,[r0,#FLASH_CR]
 3343 1ba2 4FF08004 		mov r4,#(1<<7)
 3344 1ba6 0461     		str r4,[r0,#FLASH_CR]
 3345 1ba8 52F804FB 		_UNNEST  
ARM GAS  stm32eforth.s 			page 63


 3346              	
 3347              	WAIT_BSY:
 3348 1bac 5D48     		ldr	r0,flash_regs
 3349              	WAIT1:
 3350 1bae C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 3351 1bb0 14F00104 		ands	r4, #0x1	//  BSY
 3352 1bb4 FBD1     		bne	WAIT1
 3353 1bb6 7047     		_NEXT
 3354              	
 3355              	//    ERASE_PAGE	   ( adr -- )
 3356              	// 	  Erase one page of flash memory.
 3357              	//    stm32f103 page size is 1024 bytes 
 3358              	//    adr is any address inside page to erase 
 3359              	
 3360 1bb8 700F0018 		.word	_UNLOCK+MAPOFFSET
 3361 1bbc 0A       	_EPAGE:	.byte  10
 3362 1bbd 45524153 		.ascii "ERASE_PAGE"
 3362      455F5041 
 3362      4745
 3363 1bc7 00       		.p2align 2 	
 3364              	
 3365              	EPAGE: 	//  page --
 3366 1bc8 42F804ED 		_NEST
 3367 1bcc FFF7EEFF 		bl	WAIT_BSY
 3368 1bd0 FEF7D7FC 		_DOLIT 
 3369 1bd4 01000000 		.word 1 
 3370 1bd8 FFF7CEFF 		bl  UNLOCK 
 3371 1bdc 5148     		ldr r0,flash_regs 	 
 3372 1bde 4FF00204 		mov r4,#2 // set PER bit 
 3373 1be2 0461     		str r4,[r0,#FLASH_CR]
 3374 1be4 4561     		str r5,[r0,#FLASH_AR] // page to erase address 
 3375 1be6 0469     		ldr	r4,[r0, #FLASH_CR]	
 3376 1be8 44F04004 		orr	R4,#0x40	//  set STRT bit   
 3377 1bec 0461     		str	r4,[r0, #FLASH_CR]	//  start erasing
 3378 1bee FFF7DDFF 	 	bl	WAIT_BSY // wait until done
 3379 1bf2 FEF7C6FC 		_DOLIT 
 3380 1bf6 00000000 		.word 0 
 3381 1bfa FFF7BDFF 		bl	UNLOCK  // lock flash write 
 3382 1bfe C568     		ldr r5,[r0,#FLASH_SR] // check for errors 
 3383 1c00 05F01405 		and r5,r5,#(5<<2)
 3384 1c04 FFF7E6FE 		bl ABORQ 
 3385 1c08 0D       		.byte 13
 3386 1c09 20657261 		.ascii " erase error!"
 3386      73652065 
 3386      72726F72 
 3386      21
 3387 1c16 00BF     		.p2align 2
 3388 1c18 52F804FB 		_UNNEST
 3389              	
 3390              	// store 16 bit word
 3391              	// expect flash unlocked  
 3392              	HWORD_WRITE: // ( hword address -- )
 3393 1c1c 42F804ED 		_NEST
 3394 1c20 0469     		ldr	r4, [r0, #FLASH_CR]	//  FLASH_CR
 3395              	//	bic r4,#(1<<9)|(1<<5)|(1<<4)|(1<<2)|(1<<1) //  clear OPTWRE|OPTER|OPTPG|MER|PER
 3396 1c22 4FF00104 		mov r4,#1 // set PG 
 3397 1c26 0461     		str r4,[r0,#FLASH_CR]
ARM GAS  stm32eforth.s 			page 64


 3398 1c28 2E46     		mov r6,r5 
 3399 1c2a 51F8045B 		_POP 
 3400 1c2e 3580     		strh r5,[r6] 
 3401 1c30 FFF7BCFF 		bl WAIT_BSY 
 3402 1c34 C568     		ldr r5,[r0,#FLASH_SR]
 3403 1c36 05F01405 		and r5,r5,#(5<<2) 
 3404 1c3a FEF7C5FC 		bl QBRAN
 3405 1c3e 54100018 		.word 1f+MAPOFFSET 
 3406 1c42 FFF7C7FE 		bl ABORQ
 3407 1c46 0D       		.byte 13
 3408 1c47 20777269 		.ascii " write error!"
 3408      74652065 
 3408      72726F72 
 3408      21
 3409              		.p2align 2
 3410              	1:	 
 3411 1c54 52F804FB 		_UNNEST 
 3412              	
 3413              	
 3414              	//    I!	   ( data address -- )
 3415              	// 	   Write one word into flash memory
 3416              	//	   address must even 
 3417              	
 3418 1c58 BC0F0018 		.word	_EPAGE+MAPOFFSET
 3419 1c5c 02       	_ISTOR:	.byte  2
 3420 1c5d 4921     		.ascii "I!"
 3421 1c5f 00       		.p2align 2 	
 3422              	
 3423              	ISTOR:	//  data address --
 3424 1c60 42F804ED 		_NEST
 3425 1c64 FFF7A2FF 		bl	WAIT_BSY
 3426 1c68 FEF78BFC 		_DOLIT 
 3427 1c6c 01000000 		.word 1 
 3428 1c70 FFF782FF 		bl  UNLOCK 
 3429 1c74 FEF71CFE 		BL DDUP 
 3430 1c78 FEF7F4FC 		BL TOR 
 3431 1c7c FEF7F2FC 		BL TOR 
 3432 1c80 FFF7CCFF 		BL HWORD_WRITE
 3433 1c84 FEF7DCFC 		BL RFROM 
 3434 1c88 4FEA3545 		ror r5,r5,#16
 3435 1c8c FEF7D8FC 		BL RFROM 
 3436 1c90 05F10205 		add r5,r5,#2 
 3437 1c94 FFF7C2FF 		BL HWORD_WRITE 
 3438 1c98 FEF773FC 		_DOLIT 
 3439 1c9c 00000000 		.word 0
 3440 1ca0 FFF76AFF 		bl UNLOCK 
 3441 1ca4 52F804FB 		_UNNEST
 3442              	
 3443              	//    TURNKEY	( -- )
 3444              	// 	Copy dictionary from RAM to flash.
 3445              	
 3446 1ca8 5C100018 		.word	_ISTOR+MAPOFFSET
 3447 1cac 07       	_TURN:	.byte   7
 3448 1cad 5455524E 		.ascii "TURNKEY"
 3448      4B4559
 3449              		.p2align 2 
 3450 1cb4 42F804ED 	TURN:	_NEST
ARM GAS  stm32eforth.s 			page 65


 3451 1cb8 FEF763FC 		_DOLIT			//  save user area
 3452 1cbc 00000020 		.word	RAMOFFSET
 3453 1cc0 FEF75FFC 		_DOLIT
 3454 1cc4 C0000000 		.word	0xC0			//  to boot array
 3455 1cc8 FEF75BFC 		_DOLIT
 3456 1ccc 40000000 		.word	0x40
 3457 1cd0 FFF7D0F8 		BL	MOVE
 3458 1cd4 FEF755FC 		_DOLIT
 3459 1cd8 00000000 		.word	0
 3460 1cdc FEF751FC 		_DOLIT
 3461 1ce0 000C0008 		.word	FLASHOFFSET
 3462 1ce4 FEF726FF 		BL	CPP
 3463 1ce8 FEF794FC 		BL	AT
 3464 1cec FEF7AAFD 		BL	CELLSL
 3465 1cf0 FEF7B8FC 		BL	TOR
 3466              	TURN1:
 3467 1cf4 FEF7E4FC 		BL	OVER
 3468 1cf8 FEF78CFC 		BL	AT
 3469 1cfc FEF7E0FC 		BL	OVER
 3470 1d00 FFF7AEFF 		BL	ISTOR
 3471 1d04 FEF7D2FC 		BL	SWAP
 3472 1d08 FEF77AFD 		BL	CELLP
 3473 1d0c FEF7CEFC 		BL	SWAP
 3474 1d10 FEF776FD 		BL	CELLP
 3475 1d14 FEF749FC 		BL	DONXT
 3476 1d18 F4100018 		.word	TURN1+MAPOFFSET
 3477 1d1c FEF7BEFD 		BL	DDROP
 3478 1d20 52F804FB 		_UNNEST
 3479              	
 3480              	flash_regs:
 3481 1d24 00200240 		.word FLASH_BASE_ADR // 0 
 3482 1d28 23016745 		.word FLASH_KEY1   // 4 
 3483 1d2c AB89EFCD 		.word FLASH_KEY2   // 8
 3484              	
 3485              	// **************************************************************************
 3486              	//  The compiler
 3487              	
 3488              	//    '	   ( -- ca )
 3489              	// 	Search context vocabularies for the next word in input stream.
 3490              	
 3491 1d30 AC100018 		.word	_TURN+MAPOFFSET
 3492 1d34 01       	_TICK:	.byte  1
 3493 1d35 27       		.ascii "'"
 3494 1d36 00BF     		.p2align 2 	
 3495              	TICK:
 3496 1d38 42F804ED 		_NEST
 3497 1d3c FFF7B6FC 		BL	TOKEN
 3498 1d40 FFF76EFD 		BL	NAMEQ	// ?defined
 3499 1d44 FEF740FC 		BL	QBRAN
 3500 1d48 50110018 		.word	TICK1+MAPOFFSET
 3501 1d4c 52F804FB 		_UNNEST	// yes, push code address
 3502 1d50 FFF72CBE 	TICK1:	B.W	ABORT	// no, error
 3503              	
 3504              	//    ALLOT	( n -- )
 3505              	// 	Allocate n bytes to the ram area.
 3506              	
 3507 1d54 34110018 		.word	_TICK+MAPOFFSET
ARM GAS  stm32eforth.s 			page 66


 3508 1d58 05       	_ALLOT:	.byte  5
 3509 1d59 414C4C4F 		.ascii "ALLOT"
 3509      54
 3510 1d5e 00BF     		.p2align 2 	
 3511              	ALLOT:
 3512 1d60 42F804ED 		_NEST
 3513 1d64 FEF7E6FE 		BL	CPP
 3514 1d68 FEF724FE 		BL	PSTOR
 3515 1d6c 52F804FB 		_UNNEST			// adjust code pointer
 3516              	
 3517              	//    ,	   ( w -- )
 3518              	// 	Compile an integer into the code dictionary.
 3519              	
 3520 1d70 58110018 		.word	_ALLOT+MAPOFFSET
 3521 1d74 012C     	_COMMA:	.byte  1,','
 3522 1d76 00BF     		.p2align 2 	
 3523              	COMMA:
 3524 1d78 42F804ED 		_NEST
 3525 1d7c FFF732F8 		BL	HERE
 3526 1d80 FEF78CFC 		BL	DUPP
 3527 1d84 FEF73CFD 		BL	CELLP	// cell boundary
 3528 1d88 FEF7D4FE 		BL	CPP
 3529 1d8c FEF738FC 		BL	STORE
 3530 1d90 FEF736FC 		BL	STORE
 3531 1d94 52F804FB 		_UNNEST	// adjust code pointer, compile
 3532              		.p2align 2 
 3533              	//    [COMPILE]   ( -- //  string> )
 3534              	// 	Compile the next immediate word into code dictionary.
 3535              	
 3536 1d98 74110018 		.word	_COMMA+MAPOFFSET
 3537 1d9c 89       	_BCOMP:	.byte  IMEDD+9
 3538 1d9d 5B434F4D 		.ascii "[COMPILE]"
 3538      50494C45 
 3538      5D
 3539 1da6 00BF     		.p2align 2 	
 3540              	BCOMP:
 3541 1da8 42F804ED 		_NEST
 3542 1dac FFF7C4FF 		BL	TICK
 3543 1db0 FFF7E2FF 		BL	COMMA
 3544 1db4 52F804FB 		_UNNEST
 3545              	
 3546              	//    COMPILE	( -- )
 3547              	// 	Compile the next address in colon list to code dictionary.
 3548              	
 3549 1db8 9C110018 		.word	_BCOMP+MAPOFFSET
 3550 1dbc 47       	_COMPI:	.byte  COMPO+7
 3551 1dbd 434F4D50 		.ascii "COMPILE"
 3551      494C45
 3552              		.p2align 2 	
 3553              	COMPI:
 3554 1dc4 42F804ED 		_NEST
 3555 1dc8 FEF73AFC 		BL	RFROM
 3556 1dcc 25F00105 		BIC	R5,R5,#1
 3557 1dd0 FEF764FC 		BL	DUPP
 3558 1dd4 FEF71EFC 		BL	AT
 3559 1dd8 00F0DAF9 		BL	CALLC			// compile BL instruction
 3560 1ddc FEF710FD 		BL	CELLP
ARM GAS  stm32eforth.s 			page 67


 3561 1de0 45F00105 		ORR	R5,R5,#1
 3562 1de4 FEF73EFC 		BL	TOR
 3563 1de8 52F804FB 		_UNNEST			// adjust return address
 3564              	
 3565              	//    LITERAL	( w -- )
 3566              	// 	Compile tos to code dictionary as an integer literal.
 3567              	
 3568 1dec BC110018 		.word	_COMPI+MAPOFFSET
 3569 1df0 87       	_LITER:	.byte  IMEDD+7
 3570 1df1 4C495445 		.ascii "LITERAL"
 3570      52414C
 3571              		.p2align 2 	
 3572              	LITER:
 3573 1df8 42F804ED 		_NEST
 3574 1dfc FFF7E2FF 		BL	COMPI
 3575 1e00 82F9FF17 		.word	DOLIT+MAPOFFSET
 3576 1e04 FFF7B8FF 		BL	COMMA
 3577 1e08 52F804FB 		_UNNEST
 3578              	
 3579              	//    $,"	( -- )
 3580              	// 	Compile a literal string up to next " .
 3581              	
 3582              	// 	.word	_LITER+MAPOFFSET
 3583              	// _STRCQ	.byte  3
 3584              	// 	.ascii "$$,"""
 3585              	// 	.p2align 2 	
 3586              	STRCQ:
 3587 1e0c 42F804ED 		_NEST
 3588 1e10 FEF7B7FB 		_DOLIT
 3589 1e14 FCFFFFFF 		.word	-4
 3590 1e18 FEF78CFE 		BL	CPP
 3591 1e1c FEF7CAFD 		BL	PSTOR
 3592 1e20 FEF7AFFB 		_DOLIT
 3593 1e24 22000000 		.word	'\"'
 3594 1e28 FFF72EFC 		BL	WORDD			// move word to code dictionary
 3595 1e2c FEF7E6FD 		BL	COUNT
 3596 1e30 FEF798FC 		BL	PLUS
 3597 1e34 FEF77EFF 		BL	ALGND			// calculate aligned end of string
 3598 1e38 FEF77CFE 		BL	CPP
 3599 1e3c FEF7E0FB 		BL	STORE
 3600 1e40 52F804FB 		_UNNEST 			// adjust the code pointer
 3601              	
 3602              	// **************************************************************************
 3603              	//  Structures
 3604              	
 3605              	//    FOR	 ( -- a )
 3606              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3607              	
 3608 1e44 F0110018 		.word	_LITER+MAPOFFSET
 3609 1e48 C3       	_FOR:	.byte  COMPO+IMEDD+3
 3610 1e49 464F52   		.ascii "FOR"
 3611              		.p2align 2 	
 3612              	FOR:
 3613 1e4c 42F804ED 		_NEST
 3614 1e50 FFF7B8FF 		BL	COMPI
 3615 1e54 64FAFF17 		.word	TOR+MAPOFFSET
 3616 1e58 FEF7C4FF 		BL	HERE
ARM GAS  stm32eforth.s 			page 68


 3617 1e5c 52F804FB 		_UNNEST
 3618              	
 3619              	//    BEGIN	( -- a )
 3620              	// 	Start an infinite or indefinite loop structure.
 3621              	
 3622 1e60 48120018 		.word	_FOR+MAPOFFSET
 3623 1e64 C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 3624 1e65 42454749 		.ascii "BEGIN"
 3624      4E
 3625 1e6a 00BF     		.p2align 2 	
 3626              	BEGIN:
 3627 1e6c 42F804ED 		_NEST
 3628 1e70 FEF7B8FF 		BL	HERE
 3629 1e74 52F804FB 		_UNNEST
 3630              		.p2align 2 
 3631              	//    NEXT	( a -- )
 3632              	// 	Terminate a FOR-NEXT loop structure.
 3633              	
 3634 1e78 64120018 		.word	_BEGIN+MAPOFFSET
 3635 1e7c C4       	_NEXT:	.byte  COMPO+IMEDD+4
 3636 1e7d 4E455854 		.ascii "NEXT"
 3637 1e81 0000BF   		.p2align 2 	
 3638              	NEXT:
 3639 1e84 42F804ED 		_NEST
 3640 1e88 FFF79CFF 		BL	COMPI
 3641 1e8c AAF9FF17 		.word	DONXT+MAPOFFSET
 3642 1e90 FFF772FF 		BL	COMMA
 3643 1e94 52F804FB 		_UNNEST
 3644              	
 3645              	//    UNTIL	( a -- )
 3646              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3647              	
 3648 1e98 7C120018 		.word	_NEXT+MAPOFFSET
 3649 1e9c C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3650 1e9d 554E5449 		.ascii "UNTIL"
 3650      4C
 3651 1ea2 00BF     		.p2align 2 	
 3652              	UNTIL:
 3653 1ea4 42F804ED 		_NEST
 3654 1ea8 FFF78CFF 		BL	COMPI
 3655 1eac C8F9FF17 		.word	QBRAN+MAPOFFSET
 3656 1eb0 FFF762FF 		BL	COMMA
 3657 1eb4 52F804FB 		_UNNEST
 3658              	
 3659              	//    AGAIN	( a -- )
 3660              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3661              	
 3662 1eb8 9C120018 		.word	_UNTIL+MAPOFFSET
 3663 1ebc C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3664 1ebd 41474149 		.ascii "AGAIN"
 3664      4E
 3665 1ec2 00BF     		.p2align 2 	
 3666              	AGAIN:
 3667 1ec4 42F804ED 		_NEST
 3668 1ec8 FFF77CFF 		BL	COMPI
 3669 1ecc E0F9FF17 		.word	BRAN+MAPOFFSET
 3670 1ed0 FFF752FF 		BL	COMMA
ARM GAS  stm32eforth.s 			page 69


 3671 1ed4 52F804FB 		_UNNEST
 3672              	
 3673              	//    IF	  ( -- A )
 3674              	// 	Begin a conditional branch structure.
 3675              	
 3676 1ed8 BC120018 		.word	_AGAIN+MAPOFFSET
 3677 1edc C2       	_IFF:	.byte  COMPO+IMEDD+2
 3678 1edd 4946     		.ascii "IF"
 3679 1edf 00       		.p2align 2 	
 3680              	IFF:
 3681 1ee0 42F804ED 		_NEST
 3682 1ee4 FFF76EFF 		BL	COMPI
 3683 1ee8 C8F9FF17 		.word	QBRAN+MAPOFFSET
 3684 1eec FEF77AFF 		BL	HERE
 3685 1ef0 FEF747FB 		_DOLIT
 3686 1ef4 04000000 		.word	4
 3687 1ef8 FEF71CFE 		BL	CPP
 3688 1efc FEF75AFD 		BL	PSTOR
 3689 1f00 52F804FB 		_UNNEST
 3690              	
 3691              	//    AHEAD	( -- A )
 3692              	// 	Compile a forward branch instruction.
 3693              	
 3694 1f04 DC120018 		.word	_IFF+MAPOFFSET
 3695 1f08 C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 3696 1f09 41484541 		.ascii "AHEAD"
 3696      44
 3697 1f0e 00BF     		.p2align 2 	
 3698              	AHEAD:
 3699 1f10 42F804ED 		_NEST
 3700 1f14 FFF756FF 		BL	COMPI
 3701 1f18 E0F9FF17 		.word	BRAN+MAPOFFSET
 3702 1f1c FEF762FF 		BL	HERE
 3703 1f20 FEF72FFB 		_DOLIT
 3704 1f24 04000000 		.word	4
 3705 1f28 FEF704FE 		BL	CPP
 3706 1f2c FEF742FD 		BL	PSTOR
 3707 1f30 52F804FB 		_UNNEST
 3708              	
 3709              	//    REPEAT	( A a -- )
 3710              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3711              	
 3712 1f34 08130018 		.word	_AHEAD+MAPOFFSET
 3713 1f38 C6       	_REPEA:	.byte  COMPO+IMEDD+6
 3714 1f39 52455045 		.ascii "REPEAT"
 3714      4154
 3715 1f3f 00       		.p2align 2 	
 3716              	REPEA:
 3717 1f40 42F804ED 		_NEST
 3718 1f44 FFF7BEFF 		BL	AGAIN
 3719 1f48 FEF74CFF 		BL	HERE
 3720 1f4c FEF7AEFB 		BL	SWAP
 3721 1f50 FEF756FB 		BL	STORE
 3722 1f54 52F804FB 		_UNNEST
 3723              	
 3724              	//    THEN	( A -- )
 3725              	// 	Terminate a conditional branch structure.
ARM GAS  stm32eforth.s 			page 70


 3726              	
 3727 1f58 38130018 		.word	_REPEA+MAPOFFSET
 3728 1f5c C4       	_THENN:	.byte  COMPO+IMEDD+4
 3729 1f5d 5448454E 		.ascii "THEN"
 3730 1f61 0000BF   		.p2align 2 	
 3731              	THENN:
 3732 1f64 42F804ED 		_NEST
 3733 1f68 FEF73CFF 		BL	HERE
 3734 1f6c FEF79EFB 		BL	SWAP
 3735 1f70 FEF746FB 		BL	STORE
 3736 1f74 52F804FB 		_UNNEST
 3737              	
 3738              	//    AFT	 ( a -- a A )
 3739              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3740              	
 3741 1f78 5C130018 		.word	_THENN+MAPOFFSET
 3742 1f7c C3       	_AFT:	.byte  COMPO+IMEDD+3
 3743 1f7d 414654   		.ascii "AFT"
 3744              		.p2align 2 	
 3745              	AFT:
 3746 1f80 42F804ED 		_NEST
 3747 1f84 FEF782FB 		BL	DROP
 3748 1f88 FFF7C2FF 		BL	AHEAD
 3749 1f8c FFF76EFF 		BL	BEGIN
 3750 1f90 FEF78CFB 		BL	SWAP
 3751 1f94 52F804FB 		_UNNEST
 3752              	
 3753              	//    ELSE	( A -- A )
 3754              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3755              	
 3756 1f98 7C130018 		.word	_AFT+MAPOFFSET
 3757 1f9c C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 3758 1f9d 454C5345 		.ascii "ELSE"
 3759 1fa1 0000BF   		.p2align 2 	
 3760              	ELSEE:
 3761 1fa4 42F804ED 		_NEST
 3762 1fa8 FFF7B2FF 		BL	AHEAD
 3763 1fac FEF77EFB 		BL	SWAP
 3764 1fb0 FFF7D8FF 		BL	THENN
 3765 1fb4 52F804FB 		_UNNEST
 3766              	
 3767              	//    WHILE	( a -- A a )
 3768              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3769              	
 3770 1fb8 9C130018 		.word	_ELSEE+MAPOFFSET
 3771 1fbc C5       	_WHILE:	.byte  COMPO+IMEDD+5
 3772 1fbd 5748494C 		.ascii "WHILE"
 3772      45
 3773 1fc2 00BF     		.p2align 2 	
 3774              	WHILE:
 3775 1fc4 42F804ED 		_NEST
 3776 1fc8 FFF78AFF 		BL	IFF
 3777 1fcc FEF76EFB 		BL	SWAP
 3778 1fd0 52F804FB 		_UNNEST
 3779              	
 3780              	//    ABORT"	( -- //  string> )
 3781              	// 	Conditional abort with an error message.
ARM GAS  stm32eforth.s 			page 71


 3782              	
 3783 1fd4 BC130018 		.word	_WHILE+MAPOFFSET
 3784 1fd8 86       	_ABRTQ:	.byte  IMEDD+6
 3785 1fd9 41424F52 		.ascii "ABORT\""
 3785      5422
 3786 1fdf 00       		.p2align 2 	
 3787              	ABRTQ:
 3788 1fe0 42F804ED 		_NEST
 3789 1fe4 FFF7EEFE 		BL	COMPI
 3790 1fe8 D40D0018 		.word	ABORQ+MAPOFFSET
 3791 1fec FFF70EFF 		BL	STRCQ
 3792 1ff0 52F804FB 		_UNNEST
 3793              	
 3794              	//    $"	( -- //  string> )
 3795              	// 	Compile an inlineDCB literal.
 3796              	
 3797 1ff4 D8130018 		.word	_ABRTQ+MAPOFFSET
 3798 1ff8 82       	_STRQ:	.byte  IMEDD+2
 3799 1ff9 2422     		.byte	'$','"'
 3800 1ffb 00       		.p2align 2 	
 3801              	STRQ:
 3802 1ffc 42F804ED 		_NEST
 3803 2000 FFF7E0FE 		BL	COMPI
 3804 2004 88070018 		.word	STRQP+MAPOFFSET
 3805 2008 FFF700FF 		BL	STRCQ
 3806 200c 52F804FB 		_UNNEST
 3807              	
 3808              	//    ."	( -- //  string> )
 3809              	// 	Compile an inline word  literal to be typed out at run time.
 3810              	
 3811 2010 F8130018 		.word	_STRQ+MAPOFFSET
 3812 2014 C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 3813 2015 2E22     		.byte	'.','"'
 3814 2017 00       		.p2align 2 	
 3815              	DOTQ:
 3816 2018 42F804ED 		_NEST
 3817 201c FFF7D2FE 		BL	COMPI
 3818 2020 A4070018 		.word	DOTQP+MAPOFFSET
 3819 2024 FFF7F2FE 		BL	STRCQ
 3820 2028 52F804FB 		_UNNEST
 3821              	
 3822              	// **************************************************************************
 3823              	//  Name compiler
 3824              	
 3825              	//    ?UNIQUE	( a -- a )
 3826              	// 	Display a warning message if the word already exists.
 3827              	
 3828 202c 14140018 		.word	_DOTQ+MAPOFFSET
 3829 2030 07       	_UNIQU:	.byte  7
 3830 2031 3F554E49 		.ascii "?UNIQUE"
 3830      515545
 3831              		.p2align 2 	
 3832              	UNIQU:
 3833 2038 42F804ED 		_NEST
 3834 203c FEF72EFB 		BL	DUPP
 3835 2040 FFF7EEFB 		BL	NAMEQ			// ?name exists
 3836 2044 FEF7C0FA 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 72


 3837 2048 64140018 		.word	UNIQ1+MAPOFFSET	// redefinitions are OK
 3838 204c FFF7AAF9 		BL	DOTQP
 3839 2050 07       		.byte	7
 3840 2051 20726544 		.ascii " reDef "		// but warn the user
 3840      656620
 3841              		.p2align 2 	
 3842 2058 FEF732FB 		BL	OVER
 3843 205c FEF7CEFC 		BL	COUNT
 3844 2060 FFF750F9 		BL	TYPEE			// just in case its not planned
 3845              	UNIQ1:
 3846 2064 FEF712FB 		BL	DROP
 3847 2068 52F804FB 		_UNNEST
 3848              	
 3849              	//    $,n	 ( na -- )
 3850              	// 	Build a new dictionary name using the data at na.
 3851              	
 3852              	// 	.word	_UNIQU+MAPOFFSET
 3853              	// _SNAME	.byte  3
 3854              	// 	.ascii "$$,n"
 3855              	// 	.p2align 2 	
 3856              	SNAME:
 3857 206c 42F804ED 		_NEST
 3858 2070 FEF714FB 		BL	DUPP			//  na na
 3859 2074 FEF7DEFA 		BL	CAT			//  ?null input
 3860 2078 FEF7A6FA 		BL	QBRAN
 3861 207c B4140018 		.word	SNAM1+MAPOFFSET
 3862 2080 FFF7DAFF 		BL	UNIQU			//  na
 3863 2084 FEF76AFD 		BL	LAST			//  na last
 3864 2088 FEF7C4FA 		BL	AT			//  na la
 3865 208c FFF774FE 		BL	COMMA			//  na
 3866 2090 FEF704FB 		BL	DUPP			//  na na
 3867 2094 FEF762FD 		BL	LAST			//  na na last
 3868 2098 FEF7B2FA 		BL	STORE			//  na , save na for vocabulary link
 3869 209c FEF7AEFC 		BL	COUNT			//  na+1 count
 3870 20a0 FEF760FB 		BL	PLUS			//  na+1+count
 3871 20a4 FEF746FE 		BL	ALGND			//  word boundary
 3872 20a8 FEF744FD 		BL	CPP
 3873 20ac FEF7A8FA 		BL	STORE			//  top of dictionary now
 3874 20b0 52F804FB 		_UNNEST
 3875              	SNAM1:
 3876 20b4 FFF768F9 		BL	STRQP
 3877 20b8 07       		.byte	7
 3878 20b9 206E616D 		.ascii " name? "
 3878      653F20
 3879 20c0 FFF774BC 		B.W	ABORT
 3880              	
 3881              	//    $COMPILE	( a -- )
 3882              	// 	Compile next word to code dictionary as a token or literal.
 3883              	
 3884 20c4 30140018 		.word	_UNIQU+MAPOFFSET
 3885 20c8 08       	_SCOMP:	.byte  8
 3886 20c9 2424434F 		.ascii "$$COMPILE"
 3886      4D50494C 
 3886      45
 3887 20d2 00BF     		.p2align 2 	
 3888              	SCOMP:
 3889 20d4 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 73


 3890 20d8 FFF7A2FB 		BL	NAMEQ
 3891 20dc FEF7CAFB 		BL	QDUP	// defined?
 3892 20e0 FEF772FA 		BL	QBRAN
 3893 20e4 10150018 		.word	SCOM2+MAPOFFSET
 3894 20e8 FEF794FA 		BL	AT
 3895 20ec FEF749FA 		_DOLIT
 3896 20f0 80000000 		.word	IMEDD
 3897 20f4 FEF7F6FA 		BL	ANDD	// immediate?
 3898 20f8 FEF766FA 		BL	QBRAN
 3899 20fc 08150018 		.word	SCOM1+MAPOFFSET
 3900 2100 FEF74EFA 		BL	EXECU
 3901 2104 52F804FB 		_UNNEST			// it's immediate, execute
 3902              	SCOM1:
 3903 2108 00F042F8 		BL	CALLC			// it's not immediate, compile
 3904 210c 52F804FB 		_UNNEST	
 3905              	SCOM2:
 3906 2110 FFF718F8 		BL	NUMBQ
 3907 2114 FEF758FA 		BL	QBRAN
 3908 2118 24150018 		.word	SCOM3+MAPOFFSET
 3909 211c FFF76CFE 		BL	LITER
 3910 2120 52F804FB 		_UNNEST			// compile number as integer
 3911              	SCOM3:
 3912 2124 FFF742BC 		B.W	ABORT			// error
 3913              	
 3914              	//    OVERT	( -- )
 3915              	// 	Link a new word into the current vocabulary.
 3916              	
 3917 2128 C8140018 		.word	_SCOMP+MAPOFFSET
 3918 212c 05       	_OVERT:	.byte  5
 3919 212d 4F564552 		.ascii "OVERT"
 3919      54
 3920 2132 00BF     		.p2align 2 	
 3921              	OVERT:
 3922 2134 42F804ED 		_NEST
 3923 2138 FEF710FD 		BL	LAST
 3924 213c FEF76AFA 		BL	AT
 3925 2140 FEF7EEFC 		BL	CNTXT
 3926 2144 FEF75CFA 		BL	STORE
 3927 2148 52F804FB 		_UNNEST
 3928              	
 3929              	//    ; 	   ( -- )
 3930              	// 	Terminate a colon definition.
 3931              	
 3932 214c 2C150018 		.word	_OVERT+MAPOFFSET
 3933 2150 C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 3934 2151 3B       		.ascii ";"
 3935 2152 00BF     		.p2align 2 	
 3936              	SEMIS:
 3937 2154 42F804ED 		_NEST
 3938 2158 FEF713FA 		_DOLIT
 3939 215c 52F804FB 		_UNNEST
 3940 2160 FFF70AFE 		BL	COMMA
 3941 2164 FFF782FC 		BL	LBRAC
 3942 2168 FFF7E4FF 		BL	OVERT
 3943 216c 52F804FB 		_UNNEST
 3944              	
 3945              	//    ]	   ( -- )
ARM GAS  stm32eforth.s 			page 74


 3946              	// 	Start compiling the words in the input stream.
 3947              	
 3948 2170 50150018 		.word	_SEMIS+MAPOFFSET
 3949 2174 01       	_RBRAC:	.byte  1
 3950 2175 5D       		.ascii "]"
 3951 2176 00BF     		.p2align 2 	
 3952              	RBRAC:
 3953 2178 42F804ED 		_NEST
 3954 217c FEF701FA 		_DOLIT
 3955 2180 D4140018 		.word	SCOMP+MAPOFFSET
 3956 2184 FEF7B6FC 		BL	TEVAL
 3957 2188 FEF73AFA 		BL	STORE
 3958 218c 52F804FB 		_UNNEST
 3959              	
 3960              	//    BL.W	( ca -- )
 3961              	// 	Assemble a branch-link long instruction to ca.
 3962              	// 	BL.W is split into 2 16 bit instructions with 11 bit address fields.
 3963              	
 3964              	// 	.word	_RBRAC+MAPOFFSET
 3965              	// _CALLC	.byte  5
 3966              	// 	.ascii "call,"
 3967              	// 	.p2align 2 	
 3968              	CALLC:
 3969 2190 42F804ED 		_NEST
 3970 2194 25F00105 		BIC	R5,R5,#1		//  clear b0 of address from R>
 3971 2198 FEF724FE 		BL	HERE
 3972 219c FEF7EAFA 		BL	SUBB
 3973 21a0 A5F10405 		SUB	R5,R5,#4		//  pc offset
 3974 21a4 40F2FF70 		MOVW	R0,#0x7FF		//  11 bit mask
 3975 21a8 2C46     		MOV	R4,R5
 3976 21aa 4FEA1535 		LSR	R5,R5,#12		//  get bits 22-12
 3977 21ae 05EA0005 		AND	R5,R5,R0
 3978 21b2 4FEAC434 		LSL	R4,R4,#15		//  get bits 11-1
 3979 21b6 45EA0405 		ORR	R5,R5,R4
 3980 21ba 45F07845 		ORR	R5,R5,#0xF8000000
 3981 21be 45F47045 		ORR	R5,R5,#0xF000
 3982 21c2 FFF7D9FD 		BL	COMMA			//  assemble BL.W instruction
 3983 21c6 52F804FB 		_UNNEST
 3984              	
 3985              	
 3986              	// 	:	( -- //  string> )
 3987              	// 	Start a new colon definition using next word as its name.
 3988              	
 3989 21ca 74150018 		.word	_RBRAC+MAPOFFSET
 3990 21ce 01       	_COLON:	.byte  1
 3991 21cf 3A       		.ascii ":"
 3992              		.p2align 2 	
 3993              	COLON:
 3994 21d0 42F804ED 		_NEST
 3995 21d4 FFF76AFA 		BL	TOKEN
 3996 21d8 FFF748FF 		BL	SNAME
 3997 21dc FEF7D1F9 		_DOLIT
 3998 21e0 42F804ED 		_NEST
 3999 21e4 FFF7C8FD 		BL	COMMA
 4000 21e8 FFF7C6FF 		BL	RBRAC
 4001 21ec 52F804FB 		_UNNEST
 4002              	
ARM GAS  stm32eforth.s 			page 75


 4003              	//    IMMEDIATE   ( -- )
 4004              	// 	Make the last compiled word an immediate word.
 4005              	
 4006 21f0 CE150018 		.word	_COLON+MAPOFFSET
 4007 21f4 09       	_IMMED:	.byte  9
 4008 21f5 494D4D45 		.ascii "IMMEDIATE"
 4008      44494154 
 4008      45
 4009 21fe 00BF     		.p2align 2 	
 4010              	IMMED:
 4011 2200 42F804ED 		_NEST
 4012 2204 FEF7BDF9 		_DOLIT
 4013 2208 80000000 		.word	IMEDD
 4014 220c FEF7A6FC 		BL	LAST
 4015 2210 FEF700FA 		BL	AT
 4016 2214 FEF7FEF9 		BL	AT
 4017 2218 FEF76EFA 		BL	ORR
 4018 221c FEF79EFC 		BL	LAST
 4019 2220 FEF7F8F9 		BL	AT
 4020 2224 FEF7ECF9 		BL	STORE
 4021 2228 52F804FB 		_UNNEST
 4022              	
 4023              	// **************************************************************************
 4024              	//  Defining words
 4025              	
 4026              	//    CONSTANT	( u -- //  string> )
 4027              	// 	Compile a new constant.
 4028              	
 4029 222c F4150018 		.word	_IMMED+MAPOFFSET
 4030 2230 08       	_CONST:	.byte  8
 4031 2231 434F4E53 		.ascii "CONSTANT"
 4031      54414E54 
 4032 2239 0000BF   		.p2align 2 	
 4033              	CONST:
 4034 223c 42F804ED 		_NEST
 4035 2240 FFF734FA 		BL	TOKEN
 4036 2244 FFF712FF 		BL	SNAME
 4037 2248 FFF774FF 		BL	OVERT
 4038 224c FEF799F9 		_DOLIT
 4039 2250 42F804ED 		_NEST
 4040 2254 FFF790FD 		BL	COMMA
 4041 2258 FEF793F9 		_DOLIT
 4042 225c 30FEFF17 		.word	DOCON+MAPOFFSET
 4043 2260 FFF796FF 		BL	CALLC
 4044 2264 FFF788FD 		BL	COMMA
 4045 2268 52F804FB 		_UNNEST
 4046              	
 4047              	//    CREATE	( -- //  string> )
 4048              	// 	Compile a new array entry without allocating code space.
 4049              	
 4050 226c 30160018 		.word	_CONST+MAPOFFSET
 4051 2270 06       	_CREAT:	.byte  6
 4052 2271 43524541 		.ascii "CREATE"
 4052      5445
 4053 2277 00       		.p2align 2 	
 4054              	CREAT:
 4055 2278 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 76


 4056 227c FFF716FA 		BL	TOKEN
 4057 2280 FFF7F4FE 		BL	SNAME
 4058 2284 FFF756FF 		BL	OVERT
 4059 2288 FEF77BF9 		_DOLIT
 4060 228c 42F804ED 		_NEST
 4061 2290 FFF772FD 		BL	COMMA
 4062 2294 FEF775F9 		_DOLIT
 4063 2298 24FEFF17 		.word	DOVAR+MAPOFFSET
 4064 229c FFF778FF 		BL	CALLC
 4065 22a0 52F804FB 		_UNNEST
 4066              	
 4067              	//    VARIABLE	( -- //  string> )
 4068              	// 	Compile a new variable initialized to 0.
 4069              	
 4070 22a4 70160018 		.word	_CREAT+MAPOFFSET
 4071 22a8 08       	_VARIA:	.byte  8
 4072 22a9 56415249 		.ascii "VARIABLE"
 4072      41424C45 
 4073 22b1 0000BF   		.p2align 2 	
 4074              	VARIA:
 4075 22b4 42F804ED 		_NEST
 4076 22b8 FFF7DEFF 		BL	CREAT
 4077 22bc FEF761F9 		_DOLIT
 4078 22c0 00000000 		.word	0
 4079 22c4 FFF758FD 		BL	COMMA
 4080 22c8 52F804FB 		_UNNEST
 4081              	
 4082              	// **************************************************************************
 4083              	//  Tools
 4084              	
 4085              	//    dm+	 ( a u -- a )
 4086              	// 	Dump u bytes from , leaving a+u on the stack.
 4087              	
 4088              	// 	.word	_VARIA+MAPOFFSET
 4089              	// _DMP	.byte  3
 4090              	// 	.ascii "dm+"
 4091              	// 	.p2align 2 	
 4092              	DMP:
 4093 22cc 42F804ED 		_NEST
 4094 22d0 FEF7F6F9 		BL	OVER
 4095 22d4 FEF755F9 		_DOLIT
 4096 22d8 04000000 		.word	4
 4097 22dc FFF784F8 		BL	UDOTR			// display address
 4098 22e0 FEF7E8FF 		BL	SPACE
 4099 22e4 FEF7BEF9 		BL	TOR			// start count down loop
 4100 22e8 00F00CB8 		B.W	PDUM2			// skip first pass
 4101              	PDUM1:
 4102 22ec FEF7D6F9 	  BL	DUPP
 4103 22f0 FEF7A0F9 		BL	CAT
 4104 22f4 FEF745F9 		_DOLIT
 4105 22f8 03000000 		.word	3
 4106 22fc FFF774F8 		BL	UDOTR			// display numeric data
 4107 2300 FEF75EFA 		BL	ONEP			// increment address
 4108              	PDUM2:
 4109 2304 FEF751F9 	  BL	DONXT
 4110 2308 EC160018 		.word	PDUM1+MAPOFFSET	// loop till done
 4111 230c 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 77


 4112              		.p2align 2 
 4113              	//    DUMP	( a u -- )
 4114              	// 	Dump u bytes from a, in a formatted manner.
 4115              	
 4116 2310 A8160018 		.word	_VARIA+MAPOFFSET
 4117 2314 04       	_DUMP:	.byte  4
 4118 2315 44554D50 		.ascii "DUMP"
 4119 2319 0000BF   		.p2align 2 	
 4120              	DUMP:
 4121 231c 42F804ED 		_NEST
 4122 2320 FEF7BAFB 		BL	BASE
 4123 2324 FEF776F9 		BL	AT
 4124 2328 FEF79CF9 		BL	TOR
 4125 232c FEF7B2FE 		BL	HEX			// save radix,set hex
 4126 2330 FEF727F9 		_DOLIT
 4127 2334 10000000 		.word	16
 4128 2338 FEF7CCFC 		BL	SLASH			// change count to lines
 4129 233c FEF792F9 		BL	TOR
 4130 2340 00F014B8 		B.W	DUMP4			// start count down loop
 4131              	DUMP1:
 4132 2344 FEF7F6FF 	  BL	CR
 4133 2348 FEF71BF9 		_DOLIT
 4134 234c 10000000 		.word	16
 4135 2350 FEF7AEFA 		BL	DDUP
 4136 2354 FFF7BAFF 		BL	DMP			// display numeric
 4137 2358 FEF796FA 		BL	ROT
 4138 235c FEF794FA 		BL	ROT
 4139 2360 FEF7A8FF 		BL	SPACE
 4140 2364 FEF7A6FF 		BL	SPACE
 4141 2368 FEF7CCFF 		BL	TYPEE			// display printable characters
 4142              	DUMP4:
 4143 236c FEF71DF9 	  BL	DONXT
 4144 2370 44170018 		.word	DUMP1+MAPOFFSET	// loop till done
 4145              	DUMP3:
 4146 2374 FEF78AF9 	  BL	DROP
 4147 2378 FEF762F9 		BL	RFROM
 4148 237c FEF78CFB 		BL	BASE
 4149 2380 FEF73EF9 		BL	STORE			// restore radix
 4150 2384 52F804FB 		_UNNEST
 4151              	
 4152              	//    .S	  ( ... -- ... )
 4153              	// 	Display the contents of the data stack.
 4154              	
 4155 2388 14170018 		.word	_DUMP+MAPOFFSET
 4156              	_DOTS:
 4157 238c 02       		.byte  2
 4158 238d 2E53     		.ascii ".S"
 4159 238f 00       		.p2align 2 	
 4160              	DOTS:
 4161 2390 42F804ED 		_NEST
 4162 2394 FEF78EFF 		BL	SPACE
 4163 2398 FEF7FEFC 		BL	DEPTH			// stack depth
 4164 239c FEF762F9 		BL	TOR			// start count down loop
 4165 23a0 00F006B8 		B.W	DOTS2			// skip first pass
 4166              	DOTS1:
 4167 23a4 FEF756F9 		BL	RAT
 4168 23a8 FEF708FD 		BL	PICK
ARM GAS  stm32eforth.s 			page 78


 4169 23ac FFF748F8 		BL	DOT			// index stack, display contents
 4170              	DOTS2:
 4171 23b0 FEF7FBF8 		BL	DONXT
 4172 23b4 A4170018 		.word	DOTS1+MAPOFFSET	// loop till done
 4173 23b8 FEF77CFF 		BL	SPACE
 4174 23bc 52F804FB 		_UNNEST
 4175              	
 4176              	//    >NAME	( ca -- na | F )
 4177              	// 	Convert code address to a name address.
 4178              	
 4179 23c0 8C170018 		.word	_DOTS+MAPOFFSET
 4180 23c4 05       	_TNAME:	.byte  5
 4181 23c5 3E4E414D 		.ascii ">NAME"
 4181      45
 4182 23ca 00BF     		.p2align 2 	
 4183              	TNAME:
 4184 23cc 42F804ED 		_NEST
 4185 23d0 FEF748F9 		BL	TOR			//  
 4186 23d4 FEF7A4FB 		BL	CNTXT			//  va
 4187 23d8 FEF71CF9 		BL	AT			//  na
 4188              	TNAM1:
 4189 23dc FEF75EF9 		BL	DUPP			//  na na
 4190 23e0 FEF7F2F8 		BL	QBRAN
 4191 23e4 0C180018 		.word	TNAM2+MAPOFFSET	//  vocabulary end, no match
 4192 23e8 FEF758F9 		BL	DUPP			//  na na
 4193 23ec FFF76CF9 		BL	NAMET			//  na ca
 4194 23f0 FEF730F9 		BL	RAT			//  na ca code
 4195 23f4 FEF78AF9 		BL	XORR			//  na f --
 4196 23f8 FEF7E6F8 		BL	QBRAN
 4197 23fc 0C180018 		.word	TNAM2+MAPOFFSET
 4198 2400 FEF706FA 		BL	CELLM			//  la 
 4199 2404 FEF706F9 		BL	AT			//  next_na
 4200 2408 FFF7E8BF 		B.W	TNAM1
 4201              	TNAM2:	
 4202 240c FEF718F9 		BL	RFROM
 4203 2410 FEF73CF9 		BL	DROP			//  0|na --
 4204 2414 52F804FB 		_UNNEST			// 0
 4205              	
 4206              	//    .ID	 ( na -- )
 4207              	// 	Display the name at address.
 4208              	
 4209 2418 C4170018 		.word	_TNAME+MAPOFFSET
 4210 241c 03       	_DOTID:	.byte  3
 4211 241d 2E4944   		.ascii ".ID"
 4212              		.p2align 2 	
 4213              	DOTID:
 4214 2420 42F804ED 		_NEST
 4215 2424 FEF726FA 		BL	QDUP			// if zero no name
 4216 2428 FEF7CEF8 		BL	QBRAN
 4217 242c 48180018 		.word	DOTI1+MAPOFFSET
 4218 2430 FEF7E4FA 		BL	COUNT
 4219 2434 FEF7A5F8 		_DOLIT
 4220 2438 1F000000 		.word	0x1F
 4221 243c FEF752F9 		BL	ANDD			// mask lexicon bits
 4222 2440 FEF760FF 		BL	TYPEE
 4223 2444 52F804FB 		_UNNEST			// display name string
 4224              	DOTI1:
ARM GAS  stm32eforth.s 			page 79


 4225 2448 FEF7ACFF 		BL	DOTQP
 4226 244c 09       		.byte	9
 4227 244d 207B6E6F 		.ascii " {noName}"
 4227      4E616D65 
 4227      7D
 4228 2456 00BF     		.p2align 2 	
 4229 2458 52F804FB 		_UNNEST
 4230              	
 4231              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 4232              	.if WANT_SEE 
 4233              	//    SEE	 ( -- //  string> )
 4234              	// 	A simple decompiler.
 4235              	
 4236              		.word	_DOTID+MAPOFFSET
 4237              	_SEE:	.byte  3
 4238              		.ascii "SEE"
 4239              		.p2align 2 	
 4240              	SEE:
 4241              		_NEST
 4242              		BL	TICK	//  ca --, starting address
 4243              		BL	CR	
 4244              		_DOLIT
 4245              		.word	20
 4246              		BL	TOR
 4247              	SEE1:
 4248              		BL	CELLP			//  a
 4249              		BL	DUPP			//  a a
 4250              		BL	DECOMP		//  a
 4251              		BL	DONXT
 4252              		.word	SEE1+MAPOFFSET
 4253              		BL	DROP
 4254              		_UNNEST
 4255              	
 4256              	// 	DECOMPILE ( a -- )
 4257              	// 	Convert code in a.  Display name of command or as data.
 4258              	
 4259              		.word	_SEE+MAPOFFSET
 4260              	_DECOM:	.byte  9
 4261              		.ascii "DECOMPILE"
 4262              		.p2align 2 
 4263              		
 4264              	DECOMP:	
 4265              		_NEST
 4266              		BL	DUPP			//  a a
 4267              	// 	BL	TOR			//  a
 4268              		BL	AT			//  a code
 4269              		BL	DUPP			//  a code code
 4270              		_DOLIT
 4271              		.word	0xF800D000 //0xF800F800
 4272              		BL	ANDD
 4273              		_DOLIT
 4274              		.word	0xF000D000 //0xF800F000
 4275              		BL	EQUAL			//  a code ?
 4276              		BL	INVER 
 4277              		BL	QBRAN
 4278              		.word	DECOM2+MAPOFFSET	//  not a command
 4279              		//  a valid_code --, extract address and display name
ARM GAS  stm32eforth.s 			page 80


 4280              		MOVW	R0,#0xFFE
 4281              		MOV	R4,R5
 4282              		LSL	R5,R5,#21		//  get bits 22-12
 4283              		ASR	R5,R5,#9		//  with sign extension
 4284              		LSR	R4,R4,#15		//  get bits 11-1
 4285              		AND	R4,R4,R0		//  retain only bits 11-1
 4286              		ORR	R5,R5,R4		//  get bits 22-1
 4287              		NOP
 4288              		BL	OVER			//  a offset a
 4289              		BL	PLUS			//  a target-4
 4290              		BL	CELLP			//  a target
 4291              		BL	TNAME			//  a na/0 --, is it a name?
 4292              		BL	QDUP			//  name address or zero
 4293              		BL	QBRAN
 4294              		.word	DECOM1+MAPOFFSET
 4295              		BL	SPACE			//  a na
 4296              		BL	DOTID			//  a --, display name
 4297              	// 	BL	RFROM			//  a
 4298              		BL	DROP
 4299              		_UNNEST
 4300              	DECOM1:	// BL	RFROM		//  a
 4301              		BL	AT			//  data
 4302              		BL	UDOT			//  display data
 4303              		_UNNEST
 4304              	DECOM2:
 4305              		BL	UDOT
 4306              	// 	BL	RFROM
 4307              		BL	DROP
 4308              		_UNNEST
 4309              	
 4310              	//    WORDS	( -- )
 4311              	// 	Display the names in the context vocabulary.
 4312              	
 4313              		.word	_DECOM+MAPOFFSET
 4314              	.else 
 4315 245c 1C180018 		.word _DOTID+MAPOFFSET 
 4316              	.endif 
 4317 2460 05       	_WORDS:	.byte  5
 4318 2461 574F5244 		.ascii "WORDS"
 4318      53
 4319 2466 00BF     		.p2align 2 	
 4320              	WORDS:
 4321 2468 42F804ED 		_NEST
 4322 246c FEF762FF 		BL	CR
 4323 2470 FEF756FB 		BL	CNTXT
 4324 2474 FEF7CEF8 		BL	AT			// only in context
 4325              	WORS1:
 4326 2478 FEF7FCF9 		BL	QDUP			// ?at end of list
 4327 247c FEF7A4F8 		BL	QBRAN
 4328 2480 9C180018 		.word	WORS2+MAPOFFSET
 4329 2484 FEF70AF9 		BL	DUPP
 4330 2488 FEF714FF 		BL	SPACE
 4331 248c FFF7C8FF 		BL	DOTID			// display a name
 4332 2490 FEF7BEF9 		BL	CELLM
 4333 2494 FEF7BEF8 		BL	AT
 4334 2498 FFF7EEBF 		B.W	WORS1
 4335              	WORS2:
ARM GAS  stm32eforth.s 			page 81


 4336 249c 52F804FB 		_UNNEST
 4337              	
 4338              	// **************************************************************************
 4339              	//  cold start
 4340              	
 4341              	//    VER	 ( -- n )
 4342              	// 	Return the version number of this implementation.
 4343              	
 4344              	// 	.word	_WORDS+MAPOFFSET
 4345              	// _VERSN	.byte  3
 4346              	// 	.ascii "VER"
 4347              	// 	.p2align 2 	
 4348              	VERSN:
 4349 24a0 42F804ED 		_NEST
 4350 24a4 FEF76DF8 		_DOLIT
 4351 24a8 00010000 		.word	VER*256+EXT
 4352 24ac 52F804FB 		_UNNEST
 4353              	
 4354              	//    hi	  ( -- )
 4355              	// 	Display the sign-on message of eForth.
 4356              	
 4357 24b0 60180018 		.word	_WORDS+MAPOFFSET
 4358 24b4 02       	_HI:	.byte  2
 4359 24b5 4849     		.ascii "HI"
 4360 24b7 00       		.p2align 2 	
 4361              	HI:
 4362 24b8 42F804ED 		_NEST
 4363 24bc FEF73AFF 		BL	CR	// initialize I/O
 4364 24c0 FEF770FF 		BL	DOTQP
 4365 24c4 17       		.byte	23
 4366 24c5 626C7565 		.ascii "blue pill stm32eForth v" 
 4366      2070696C 
 4366      6C207374 
 4366      6D333265 
 4366      466F7274 
 4367              		.p2align 2
 4368 24dc FEF7DCFA 		BL	BASE
 4369 24e0 FEF798F8 		BL	AT
 4370 24e4 FEF7D6FD 		BL	HEX	// save radix
 4371 24e8 FFF7DAFF 		BL	VERSN
 4372 24ec FEF74EFD 		BL	BDIGS
 4373 24f0 FEF772FD 		BL	DIG
 4374 24f4 FEF770FD 		BL	DIG
 4375 24f8 FEF743F8 		_DOLIT
 4376 24fc 2E000000 		.word	'.'
 4377 2500 FEF754FD 		BL	HOLD
 4378 2504 FEF778FD 		BL	DIGS
 4379 2508 FEF79CFD 		BL	EDIGS
 4380 250c FEF7FAFE 		BL	TYPEE	// format version number
 4381 2510 FEF7C2FA 		BL	BASE
 4382 2514 FEF774F8 		BL	STORE
 4383 2518 FEF70CFF 		BL	CR
 4384 251c 52F804FB 		_UNNEST			// restore radix
 4385              	
 4386              	//    COLD	( -- )
 4387              	// 	The high level cold start sequence.
 4388              	
ARM GAS  stm32eforth.s 			page 82


 4389 2520 B4180018 		.word	_HI+MAPOFFSET
 4390 2524 04       	LASTN:	.byte  4
 4391 2525 434F4C44 		.ascii "COLD"
 4392 2529 000000   		.p2align 2,0	
 4393              	COLD:
 4394              	//  Initiate Forth registers
 4395 252c 4FF00003 		MOV R3,#UPP&0xffff	//  user area 
 4396 2530 C2F20003 	 	MOVT R3,#UPP>>16		  
 4397 2534 03F59F42 		ADD R2,R3,#RPP&0xffff	// Forth return stack
 4398 2538 03F59D41 		ADD R1,R3,#SPP&0xffff // Forth data stack
 4399 253c 85EA0505 		EOR R5,R5,R5			//  tos=0
 4400 2540 00BF     		NOP
 4401 2542 42F804ED 		_NEST
 4402              	COLD1:
 4403 2546 FEF71CF8 		_DOLIT 
 4404 254a 00000000 		.word 0 
 4405 254e FDF7D9FF 		BL ULED // turn off user LED 
 4406 2552 FEF716F8 		_DOLIT
 4407 2556 00040000 		.word	UZERO
 4408 255a FEF712F8 		_DOLIT
 4409 255e 00000020 		.word	UPP
 4410 2562 FEF70EF8 		_DOLIT
 4411 2566 58000000 		.word	ULAST-UZERO
 4412 256a FEF783FC 		BL	MOVE 			// initialize user area
 4413 256e FFF7E1FA 		BL	PRESE			// initialize stack and TIB
 4414 2572 FEF787FA 		BL	TBOOT
 4415 2576 FEF759FC 		BL	ATEXE			// application boot
 4416 257a FEF7DBFA 		BL	CPP 
 4417 257e FEF749F8 		BL	AT 
 4418 2582 FEF7D7FB 		BL  ALGND 
 4419 2586 FEF7D5FA 		BL	CPP 
 4420 258a FEF739F8 		BL	STORE 
 4421 258e FFF7D1FD 		BL	OVERT
 4422 2592 FFF7DBBA 		B.W	QUIT			// start interpretation
 4423              	COLD2:	
 4424              	CTOP:
 4425 2596 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4426 259a 00BFAFF3 		.p2align 10 
 4426      0080AFF3 
 4426      0080AFF3 
 4426      0080AFF3 
 4426      0080AFF3 
 4427              	USER: // user image save 
 4428 2800 FFFFFFFF 		.word 0XFFFFFFFF
 4429              	
 4430              	  .end 
ARM GAS  stm32eforth.s 			page 83


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
ARM GAS  stm32eforth.s 			page 84


board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
board/blue-pill/stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
board/blue-pill/stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
board/blue-pill/stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
board/blue-pill/stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
board/blue-pill/stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
board/blue-pill/stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
board/blue-pill/stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
board/blue-pill/stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
board/blue-pill/stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
board/blue-pill/stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
board/blue-pill/stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
board/blue-pill/stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
board/blue-pill/stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
board/blue-pill/stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
board/blue-pill/stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
board/blue-pill/stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32eforth.s:83     *ABS*:0000000040011000 LED_GPIO
       stm32eforth.s:84     *ABS*:000000000000000d LED_PIN
       stm32eforth.s:85     *ABS*:0000000040013800 UART
       stm32eforth.s:88     *ABS*:0000000020004e80 SPP
       stm32eforth.s:89     *ABS*:0000000020004e80 TIBB
       stm32eforth.s:90     *ABS*:0000000020004f80 RPP
       stm32eforth.s:91     *ABS*:0000000020000000 UPP
       stm32eforth.s:92     *ABS*:0000000020000100 DTOP
       stm32eforth.s:93     *ABS*:0000000020004e00 DEND
       stm32eforth.s:94     *ABS*:0000000020000000 RAMOFFSET
       stm32eforth.s:95     *ABS*:0000000020005000 RAMEND
       stm32eforth.s:96     *ABS*:0000000008000c00 FLASHOFFSET
       stm32eforth.s:99     *ABS*:0000000017fff400 MAPOFFSET
       stm32eforth.s:104    *ABS*:0000000000000004 SEED_OFS
       stm32eforth.s:105    *ABS*:0000000000000008 TICKS_OFS
       stm32eforth.s:106    *ABS*:000000000000000c TIMER_OFS
       stm32eforth.s:107    *ABS*:0000000000000010 BOOT_OFS
       stm32eforth.s:108    *ABS*:0000000000000014 BASE_OFS
       stm32eforth.s:109    *ABS*:0000000000000018 TMP_OFS
       stm32eforth.s:110    *ABS*:000000000000001c SPAN_OFS
       stm32eforth.s:111    *ABS*:0000000000000020 TOIN_OFS
       stm32eforth.s:112    *ABS*:0000000000000024 NTIB_OFS
       stm32eforth.s:113    *ABS*:0000000000000028 TIB_OFS
       stm32eforth.s:114    *ABS*:000000000000002c EVAL_OFS
       stm32eforth.s:115    *ABS*:0000000000000030 HLD_OFS
       stm32eforth.s:116    *ABS*:0000000000000034 CTXT_OFS
       stm32eforth.s:117    *ABS*:0000000000000038 FLSH_CTOP_OFS
       stm32eforth.s:118    *ABS*:000000000000003c RAM_CTOP_OFS
       stm32eforth.s:119    *ABS*:0000000000000040 LASTN_OFS
       stm32eforth.s:120    *ABS*:0000000000000044 USER_BEGIN_OFS
       stm32eforth.s:121    *ABS*:0000000000000048 USER_END_OFS
ARM GAS  stm32eforth.s 			page 85


       stm32eforth.s:122    *ABS*:000000000000004c USER_IMG_OFS
       stm32eforth.s:158    .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:292    .text.reset_handler:0000000000000000 reset_handler
       stm32eforth.s:249    .text.default_handler:0000000000000000 default_handler
       stm32eforth.s:271    .text.default_handler:0000000000000034 systick_handler
       stm32eforth.s:247    .text.default_handler:0000000000000000 $t
       stm32eforth.s:259    .text.default_handler:000000000000001c exception_msg
       stm32eforth.s:614    .text.reset_handler:0000000000000560 EMIT
       stm32eforth.s:260    .text.default_handler:000000000000001c $d
       stm32eforth.s:281    .text.default_handler:000000000000004e systick_exit
       stm32eforth.s:290    .text.reset_handler:0000000000000000 $t
       stm32eforth.s:404    .text.reset_handler:00000000000000e4 remap
       stm32eforth.s:304    .text.reset_handler:0000000000000014 init_devices
       stm32eforth.s:299    .text.reset_handler:0000000000000010 forth_entry
       stm32eforth.s:300    .text.reset_handler:0000000000000010 $d
       stm32eforth.s:4393   .text.reset_handler:000000000000252c COLD
       stm32eforth.s:303    .text.reset_handler:0000000000000014 $t
       stm32eforth.s:319    .text.reset_handler:0000000000000032 wait_hserdy
       stm32eforth.s:339    .text.reset_handler:000000000000004c wait_pllrdy
       stm32eforth.s:352    .text.reset_handler:000000000000006c wait_sws
       stm32eforth.s:424    .text.reset_handler:000000000000011c remap_dest
       stm32eforth.s:422    .text.reset_handler:0000000000000118 remap_src
       stm32eforth.s:4424   .text.reset_handler:0000000000002596 CTOP
       stm32eforth.s:470    .text.reset_handler:0000000000000400 UZERO
       stm32eforth.s:423    .text.reset_handler:0000000000000118 $d
       stm32eforth.s:430    *ABS*:0000000000000001 VER
       stm32eforth.s:431    *ABS*:0000000000000000 EXT
       stm32eforth.s:435    *ABS*:0000000000000040 COMPO
       stm32eforth.s:436    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:437    *ABS*:00000000ffffff1f MASKK
       stm32eforth.s:439    *ABS*:0000000000000004 CELLL
       stm32eforth.s:440    *ABS*:000000000000000a BASEE
       stm32eforth.s:441    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:443    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:444    *ABS*:000000000000000a LF
       stm32eforth.s:445    *ABS*:000000000000000d CRR
       stm32eforth.s:446    *ABS*:000000000000001b ERR
       stm32eforth.s:447    *ABS*:0000000000000027 TIC
       stm32eforth.s:468    .text.reset_handler:0000000000000120 $t
       stm32eforth.s:471    .text.reset_handler:0000000000000400 $d
       stm32eforth.s:4361   .text.reset_handler:00000000000024b8 HI
       stm32eforth.s:3169   .text.reset_handler:0000000000001a10 INTER
       stm32eforth.s:4390   .text.reset_handler:0000000000002524 LASTN
       stm32eforth.s:4427   .text.reset_handler:0000000000002800 USER
       stm32eforth.s:492    .text.reset_handler:0000000000000458 ULAST
       stm32eforth.s:505    .text.reset_handler:0000000000000458 $d
       stm32eforth.s:506    .text.reset_handler:000000000000045c _RAND
       stm32eforth.s:509    .text.reset_handler:0000000000000464 RAND
       stm32eforth.s:1462   .text.reset_handler:0000000000000a48 SEED
       stm32eforth.s:752    .text.reset_handler:0000000000000614 AT
       stm32eforth.s:846    .text.reset_handler:000000000000069c DUPP
       stm32eforth.s:739    .text.reset_handler:0000000000000600 STORE
       stm32eforth.s:1245   .text.reset_handler:0000000000000904 ABSS
       stm32eforth.s:857    .text.reset_handler:00000000000006ac SWAP
       stm32eforth.s:1779   .text.reset_handler:0000000000000cbc MODD
       stm32eforth.s:529    .text.reset_handler:00000000000004a4 $d
       stm32eforth.s:530    .text.reset_handler:00000000000004a8 _REBOOT
ARM GAS  stm32eforth.s 			page 86


       stm32eforth.s:533    .text.reset_handler:00000000000004b0 REBOOT
       stm32eforth.s:540    .text.reset_handler:00000000000004c0 scb_adr
       stm32eforth.s:541    .text.reset_handler:00000000000004c0 $d
       stm32eforth.s:545    .text.reset_handler:00000000000004c8 _PAUSE
       stm32eforth.s:547    .text.reset_handler:00000000000004ce $t
       stm32eforth.s:548    .text.reset_handler:00000000000004d0 PAUSE
       stm32eforth.s:1483   .text.reset_handler:0000000000000a70 TIMER
       stm32eforth.s:552    .text.reset_handler:00000000000004dc PAUSE_LOOP
       stm32eforth.s:699    .text.reset_handler:00000000000005c8 QBRAN
       stm32eforth.s:556    .text.reset_handler:00000000000004e8 $d
       stm32eforth.s:559    .text.reset_handler:00000000000004f4 PAUSE_EXIT
       stm32eforth.s:717    .text.reset_handler:00000000000005e0 BRAN
       stm32eforth.s:557    .text.reset_handler:00000000000004ec $t
       stm32eforth.s:558    .text.reset_handler:00000000000004f0 $d
       stm32eforth.s:560    .text.reset_handler:00000000000004f4 $t
       stm32eforth.s:564    .text.reset_handler:00000000000004f8 $d
       stm32eforth.s:565    .text.reset_handler:00000000000004fc _ULED
       stm32eforth.s:569    .text.reset_handler:0000000000000504 ULED
       stm32eforth.s:578    .text.reset_handler:000000000000051c ULED_OFF
       stm32eforth.s:584    .text.reset_handler:0000000000000520 $d
       stm32eforth.s:585    .text.reset_handler:0000000000000524 _QRX
       stm32eforth.s:588    .text.reset_handler:000000000000052c QKEY
       stm32eforth.s:589    .text.reset_handler:000000000000052c QRX
       stm32eforth.s:600    .text.reset_handler:000000000000054c QRX1
       stm32eforth.s:609    .text.reset_handler:0000000000000554 $d
       stm32eforth.s:610    .text.reset_handler:0000000000000558 _TXSTO
       stm32eforth.s:613    .text.reset_handler:0000000000000560 TXSTO
       stm32eforth.s:615    .text.reset_handler:0000000000000560 TECHO
       stm32eforth.s:618    .text.reset_handler:0000000000000568 TX1
       stm32eforth.s:634    .text.reset_handler:0000000000000578 $d
       stm32eforth.s:635    .text.reset_handler:000000000000057c _NOP
       stm32eforth.s:637    .text.reset_handler:0000000000000580 $t
       stm32eforth.s:638    .text.reset_handler:0000000000000580 NOP
       stm32eforth.s:649    .text.reset_handler:0000000000000582 DOLIT
       stm32eforth.s:659    .text.reset_handler:0000000000000594 $d
       stm32eforth.s:660    .text.reset_handler:0000000000000598 _EXECU
       stm32eforth.s:662    .text.reset_handler:00000000000005a0 $t
       stm32eforth.s:663    .text.reset_handler:00000000000005a0 EXECU
       stm32eforth.s:677    .text.reset_handler:00000000000005aa DONXT
       stm32eforth.s:684    .text.reset_handler:00000000000005b8 NEXT1
       stm32eforth.s:706    .text.reset_handler:00000000000005da QBRAN1
       stm32eforth.s:725    .text.reset_handler:00000000000005ea $d
       stm32eforth.s:726    .text.reset_handler:00000000000005ee _EXIT
       stm32eforth.s:729    .text.reset_handler:00000000000005f4 EXIT
       stm32eforth.s:735    .text.reset_handler:00000000000005f8 $d
       stm32eforth.s:736    .text.reset_handler:00000000000005fc _STORE
       stm32eforth.s:738    .text.reset_handler:00000000000005fe $t
       stm32eforth.s:748    .text.reset_handler:000000000000060c $d
       stm32eforth.s:749    .text.reset_handler:0000000000000610 _AT
       stm32eforth.s:751    .text.reset_handler:0000000000000612 $t
       stm32eforth.s:759    .text.reset_handler:0000000000000618 $d
       stm32eforth.s:760    .text.reset_handler:000000000000061c _CSTOR
       stm32eforth.s:763    .text.reset_handler:0000000000000620 CSTOR
       stm32eforth.s:772    .text.reset_handler:000000000000062c $d
       stm32eforth.s:773    .text.reset_handler:0000000000000630 _CAT
       stm32eforth.s:776    .text.reset_handler:0000000000000634 CAT
       stm32eforth.s:783    .text.reset_handler:0000000000000638 $d
ARM GAS  stm32eforth.s 			page 87


       stm32eforth.s:784    .text.reset_handler:000000000000063c _RFROM
       stm32eforth.s:787    .text.reset_handler:0000000000000640 RFROM
       stm32eforth.s:795    .text.reset_handler:000000000000064a $d
       stm32eforth.s:796    .text.reset_handler:000000000000064e _RAT
       stm32eforth.s:799    .text.reset_handler:0000000000000654 RAT
       stm32eforth.s:807    .text.reset_handler:000000000000065c $d
       stm32eforth.s:808    .text.reset_handler:0000000000000660 _TOR
       stm32eforth.s:811    .text.reset_handler:0000000000000664 TOR
       stm32eforth.s:819    .text.reset_handler:000000000000066e $d
       stm32eforth.s:820    .text.reset_handler:0000000000000672 _SPAT
       stm32eforth.s:822    .text.reset_handler:0000000000000676 $t
       stm32eforth.s:823    .text.reset_handler:0000000000000678 SPAT
       stm32eforth.s:831    .text.reset_handler:0000000000000680 $d
       stm32eforth.s:832    .text.reset_handler:0000000000000684 _DROP
       stm32eforth.s:835    .text.reset_handler:000000000000068c DROP
       stm32eforth.s:842    .text.reset_handler:0000000000000692 $d
       stm32eforth.s:843    .text.reset_handler:0000000000000696 _DUPP
       stm32eforth.s:845    .text.reset_handler:000000000000069a $t
       stm32eforth.s:853    .text.reset_handler:00000000000006a2 $d
       stm32eforth.s:854    .text.reset_handler:00000000000006a6 _SWAP
       stm32eforth.s:866    .text.reset_handler:00000000000006b4 $d
       stm32eforth.s:867    .text.reset_handler:00000000000006b8 _OVER
       stm32eforth.s:870    .text.reset_handler:00000000000006c0 OVER
       stm32eforth.s:878    .text.reset_handler:00000000000006c8 $d
       stm32eforth.s:879    .text.reset_handler:00000000000006cc _ZLESS
       stm32eforth.s:882    .text.reset_handler:00000000000006d0 ZLESS
       stm32eforth.s:890    .text.reset_handler:00000000000006da $d
       stm32eforth.s:891    .text.reset_handler:00000000000006de _ANDD
       stm32eforth.s:893    .text.reset_handler:00000000000006e2 $t
       stm32eforth.s:894    .text.reset_handler:00000000000006e4 ANDD
       stm32eforth.s:902    .text.reset_handler:00000000000006ee $d
       stm32eforth.s:903    .text.reset_handler:00000000000006f2 _ORR
       stm32eforth.s:906    .text.reset_handler:00000000000006f8 ORR
       stm32eforth.s:914    .text.reset_handler:0000000000000702 $d
       stm32eforth.s:915    .text.reset_handler:0000000000000706 _XORR
       stm32eforth.s:917    .text.reset_handler:000000000000070a $t
       stm32eforth.s:918    .text.reset_handler:000000000000070c XORR
       stm32eforth.s:926    .text.reset_handler:0000000000000716 $d
       stm32eforth.s:927    .text.reset_handler:000000000000071a _UPLUS
       stm32eforth.s:929    .text.reset_handler:000000000000071e $t
       stm32eforth.s:930    .text.reset_handler:0000000000000720 UPLUS
       stm32eforth.s:941    .text.reset_handler:0000000000000730 $d
       stm32eforth.s:942    .text.reset_handler:0000000000000734 _RSHIFT
       stm32eforth.s:945    .text.reset_handler:000000000000073c RSHIFT
       stm32eforth.s:953    .text.reset_handler:0000000000000746 $d
       stm32eforth.s:954    .text.reset_handler:000000000000074a _LSHIFT
       stm32eforth.s:957    .text.reset_handler:0000000000000754 LSHIFT
       stm32eforth.s:965    .text.reset_handler:000000000000075e $d
       stm32eforth.s:966    .text.reset_handler:0000000000000762 _PLUS
       stm32eforth.s:968    .text.reset_handler:0000000000000764 $t
       stm32eforth.s:969    .text.reset_handler:0000000000000764 PLUS
       stm32eforth.s:977    .text.reset_handler:000000000000076c $d
       stm32eforth.s:978    .text.reset_handler:0000000000000770 _SUBB
       stm32eforth.s:980    .text.reset_handler:0000000000000772 $t
       stm32eforth.s:981    .text.reset_handler:0000000000000774 SUBB
       stm32eforth.s:989    .text.reset_handler:000000000000077e $d
       stm32eforth.s:990    .text.reset_handler:0000000000000782 _STAR
ARM GAS  stm32eforth.s 			page 88


       stm32eforth.s:992    .text.reset_handler:0000000000000784 $t
       stm32eforth.s:993    .text.reset_handler:0000000000000784 STAR
       stm32eforth.s:1001   .text.reset_handler:000000000000078e $d
       stm32eforth.s:1002   .text.reset_handler:0000000000000792 _UMSTA
       stm32eforth.s:1004   .text.reset_handler:0000000000000796 $t
       stm32eforth.s:1005   .text.reset_handler:0000000000000798 UMSTA
       stm32eforth.s:1015   .text.reset_handler:00000000000007a4 $d
       stm32eforth.s:1016   .text.reset_handler:00000000000007a8 _MSTAR
       stm32eforth.s:1019   .text.reset_handler:00000000000007ac MSTAR
       stm32eforth.s:1029   .text.reset_handler:00000000000007b8 $d
       stm32eforth.s:1030   .text.reset_handler:00000000000007bc _ONEP
       stm32eforth.s:1033   .text.reset_handler:00000000000007c0 ONEP
       stm32eforth.s:1040   .text.reset_handler:00000000000007c6 $d
       stm32eforth.s:1041   .text.reset_handler:00000000000007ca _ONEM
       stm32eforth.s:1044   .text.reset_handler:00000000000007d0 ONEM
       stm32eforth.s:1051   .text.reset_handler:00000000000007d6 $d
       stm32eforth.s:1052   .text.reset_handler:00000000000007da _TWOP
       stm32eforth.s:1055   .text.reset_handler:00000000000007e0 TWOP
       stm32eforth.s:1062   .text.reset_handler:00000000000007e6 $d
       stm32eforth.s:1063   .text.reset_handler:00000000000007ea _TWOM
       stm32eforth.s:1066   .text.reset_handler:00000000000007f0 TWOM
       stm32eforth.s:1073   .text.reset_handler:00000000000007f6 $d
       stm32eforth.s:1074   .text.reset_handler:00000000000007fa _CELLP
       stm32eforth.s:1076   .text.reset_handler:0000000000000800 $t
       stm32eforth.s:1077   .text.reset_handler:0000000000000800 CELLP
       stm32eforth.s:1084   .text.reset_handler:0000000000000806 $d
       stm32eforth.s:1085   .text.reset_handler:000000000000080a _CELLM
       stm32eforth.s:1087   .text.reset_handler:0000000000000810 $t
       stm32eforth.s:1088   .text.reset_handler:0000000000000810 CELLM
       stm32eforth.s:1095   .text.reset_handler:0000000000000816 $d
       stm32eforth.s:1096   .text.reset_handler:000000000000081a _BLANK
       stm32eforth.s:1099   .text.reset_handler:0000000000000820 BLANK
       stm32eforth.s:1107   .text.reset_handler:000000000000082a $d
       stm32eforth.s:1108   .text.reset_handler:000000000000082e _CELLS
       stm32eforth.s:1110   .text.reset_handler:0000000000000834 $t
       stm32eforth.s:1111   .text.reset_handler:0000000000000834 CELLS
       stm32eforth.s:1118   .text.reset_handler:000000000000083a $d
       stm32eforth.s:1119   .text.reset_handler:000000000000083e _CELLSL
       stm32eforth.s:1121   .text.reset_handler:0000000000000844 $t
       stm32eforth.s:1122   .text.reset_handler:0000000000000844 CELLSL
       stm32eforth.s:1129   .text.reset_handler:000000000000084a $d
       stm32eforth.s:1130   .text.reset_handler:000000000000084e _TWOST
       stm32eforth.s:1133   .text.reset_handler:0000000000000854 TWOST
       stm32eforth.s:1140   .text.reset_handler:000000000000085a $d
       stm32eforth.s:1141   .text.reset_handler:000000000000085e _TWOSL
       stm32eforth.s:1144   .text.reset_handler:0000000000000864 TWOSL
       stm32eforth.s:1151   .text.reset_handler:000000000000086a $d
       stm32eforth.s:1152   .text.reset_handler:000000000000086e _QDUP
       stm32eforth.s:1155   .text.reset_handler:0000000000000874 QDUP
       stm32eforth.s:1164   .text.reset_handler:000000000000087e $d
       stm32eforth.s:1165   .text.reset_handler:0000000000000882 _ROT
       stm32eforth.s:1167   .text.reset_handler:0000000000000886 $t
       stm32eforth.s:1168   .text.reset_handler:0000000000000888 ROT
       stm32eforth.s:1178   .text.reset_handler:0000000000000892 $d
       stm32eforth.s:1179   .text.reset_handler:0000000000000896 _DDROP
       stm32eforth.s:1181   .text.reset_handler:000000000000089c $t
       stm32eforth.s:1182   .text.reset_handler:000000000000089c DDROP
ARM GAS  stm32eforth.s 			page 89


       stm32eforth.s:1190   .text.reset_handler:00000000000008a6 $d
       stm32eforth.s:1191   .text.reset_handler:00000000000008aa _DDUP
       stm32eforth.s:1194   .text.reset_handler:00000000000008b0 DDUP
       stm32eforth.s:1203   .text.reset_handler:00000000000008bc $d
       stm32eforth.s:1204   .text.reset_handler:00000000000008c0 _DPLUS
       stm32eforth.s:1207   .text.reset_handler:00000000000008c4 DPLUS
       stm32eforth.s:1219   .text.reset_handler:00000000000008d8 $d
       stm32eforth.s:1220   .text.reset_handler:00000000000008dc _INVER
       stm32eforth.s:1222   .text.reset_handler:00000000000008e0 $t
       stm32eforth.s:1223   .text.reset_handler:00000000000008e0 INVER
       stm32eforth.s:1230   .text.reset_handler:00000000000008e6 $d
       stm32eforth.s:1231   .text.reset_handler:00000000000008ea _NEGAT
       stm32eforth.s:1234   .text.reset_handler:00000000000008f4 NEGAT
       stm32eforth.s:1241   .text.reset_handler:00000000000008fa $d
       stm32eforth.s:1242   .text.reset_handler:00000000000008fe _ABSS
       stm32eforth.s:1244   .text.reset_handler:0000000000000902 $t
       stm32eforth.s:1254   .text.reset_handler:000000000000090e $d
       stm32eforth.s:1255   .text.reset_handler:0000000000000912 _ZEQUAL
       stm32eforth.s:1258   .text.reset_handler:0000000000000918 ZEQUAL
       stm32eforth.s:1268   .text.reset_handler:0000000000000926 $d
       stm32eforth.s:1269   .text.reset_handler:000000000000092a _EQUAL
       stm32eforth.s:1271   .text.reset_handler:000000000000092c $t
       stm32eforth.s:1272   .text.reset_handler:000000000000092c EQUAL
       stm32eforth.s:1283   .text.reset_handler:000000000000093c $d
       stm32eforth.s:1284   .text.reset_handler:0000000000000940 _ULESS
       stm32eforth.s:1287   .text.reset_handler:0000000000000944 ULESS
       stm32eforth.s:1298   .text.reset_handler:0000000000000954 $d
       stm32eforth.s:1299   .text.reset_handler:0000000000000958 _LESS
       stm32eforth.s:1301   .text.reset_handler:000000000000095a $t
       stm32eforth.s:1302   .text.reset_handler:000000000000095c LESS
       stm32eforth.s:1313   .text.reset_handler:000000000000096c $d
       stm32eforth.s:1314   .text.reset_handler:0000000000000970 _GREAT
       stm32eforth.s:1316   .text.reset_handler:0000000000000972 $t
       stm32eforth.s:1317   .text.reset_handler:0000000000000974 GREAT
       stm32eforth.s:1328   .text.reset_handler:0000000000000984 $d
       stm32eforth.s:1329   .text.reset_handler:0000000000000988 _MAX
       stm32eforth.s:1331   .text.reset_handler:000000000000098c $t
       stm32eforth.s:1332   .text.reset_handler:000000000000098c MAX
       stm32eforth.s:1342   .text.reset_handler:0000000000000998 $d
       stm32eforth.s:1343   .text.reset_handler:000000000000099c _MIN
       stm32eforth.s:1345   .text.reset_handler:00000000000009a0 $t
       stm32eforth.s:1346   .text.reset_handler:00000000000009a0 MIN
       stm32eforth.s:1356   .text.reset_handler:00000000000009ac $d
       stm32eforth.s:1357   .text.reset_handler:00000000000009b0 _PSTOR
       stm32eforth.s:1360   .text.reset_handler:00000000000009b4 PSTOR
       stm32eforth.s:1371   .text.reset_handler:00000000000009c4 $d
       stm32eforth.s:1372   .text.reset_handler:00000000000009c8 _DSTOR
       stm32eforth.s:1375   .text.reset_handler:00000000000009cc DSTOR
       stm32eforth.s:1386   .text.reset_handler:00000000000009e0 $d
       stm32eforth.s:1387   .text.reset_handler:00000000000009e4 _DAT
       stm32eforth.s:1390   .text.reset_handler:00000000000009e8 DAT
       stm32eforth.s:1399   .text.reset_handler:00000000000009f2 $d
       stm32eforth.s:1400   .text.reset_handler:00000000000009f6 _COUNT
       stm32eforth.s:1402   .text.reset_handler:00000000000009fc $t
       stm32eforth.s:1403   .text.reset_handler:00000000000009fc COUNT
       stm32eforth.s:1412   .text.reset_handler:0000000000000a08 $d
       stm32eforth.s:1413   .text.reset_handler:0000000000000a0c _DNEGA
ARM GAS  stm32eforth.s 			page 90


       stm32eforth.s:1415   .text.reset_handler:0000000000000a14 $t
       stm32eforth.s:1416   .text.reset_handler:0000000000000a14 DNEGA
       stm32eforth.s:1434   .text.reset_handler:0000000000000a24 DOVAR
       stm32eforth.s:1446   .text.reset_handler:0000000000000a30 DOCON
       stm32eforth.s:1458   .text.reset_handler:0000000000000a3c $d
       stm32eforth.s:1459   .text.reset_handler:0000000000000a40 _SEED
       stm32eforth.s:1469   .text.reset_handler:0000000000000a52 $d
       stm32eforth.s:1470   .text.reset_handler:0000000000000a56 _MSEC
       stm32eforth.s:1473   .text.reset_handler:0000000000000a5c MSEC
       stm32eforth.s:1479   .text.reset_handler:0000000000000a66 $d
       stm32eforth.s:1480   .text.reset_handler:0000000000000a6a _TIMER
       stm32eforth.s:1482   .text.reset_handler:0000000000000a70 $t
       stm32eforth.s:1491   .text.reset_handler:0000000000000a7a $d
       stm32eforth.s:1492   .text.reset_handler:0000000000000a7e _TBOOT
       stm32eforth.s:1494   .text.reset_handler:0000000000000a84 $t
       stm32eforth.s:1495   .text.reset_handler:0000000000000a84 TBOOT
       stm32eforth.s:1503   .text.reset_handler:0000000000000a8e $d
       stm32eforth.s:1504   .text.reset_handler:0000000000000a92 _BASE
       stm32eforth.s:1507   .text.reset_handler:0000000000000a98 BASE
       stm32eforth.s:1519   .text.reset_handler:0000000000000aa2 TEMP
       stm32eforth.s:1527   .text.reset_handler:0000000000000aac $d
       stm32eforth.s:1528   .text.reset_handler:0000000000000ab0 _SPAN
       stm32eforth.s:1531   .text.reset_handler:0000000000000ab8 SPAN
       stm32eforth.s:1539   .text.reset_handler:0000000000000ac2 $d
       stm32eforth.s:1540   .text.reset_handler:0000000000000ac6 _INN
       stm32eforth.s:1542   .text.reset_handler:0000000000000aca $t
       stm32eforth.s:1543   .text.reset_handler:0000000000000acc INN
       stm32eforth.s:1551   .text.reset_handler:0000000000000ad6 $d
       stm32eforth.s:1552   .text.reset_handler:0000000000000ada _NTIB
       stm32eforth.s:1555   .text.reset_handler:0000000000000ae0 NTIB
       stm32eforth.s:1563   .text.reset_handler:0000000000000aea $d
       stm32eforth.s:1564   .text.reset_handler:0000000000000aee _TEVAL
       stm32eforth.s:1566   .text.reset_handler:0000000000000af4 $t
       stm32eforth.s:1567   .text.reset_handler:0000000000000af4 TEVAL
       stm32eforth.s:1575   .text.reset_handler:0000000000000afe $d
       stm32eforth.s:1576   .text.reset_handler:0000000000000b02 _HLD
       stm32eforth.s:1578   .text.reset_handler:0000000000000b06 $t
       stm32eforth.s:1579   .text.reset_handler:0000000000000b08 HLD
       stm32eforth.s:1587   .text.reset_handler:0000000000000b12 $d
       stm32eforth.s:1588   .text.reset_handler:0000000000000b16 _CNTXT
       stm32eforth.s:1590   .text.reset_handler:0000000000000b1e $t
       stm32eforth.s:1591   .text.reset_handler:0000000000000b20 CNTXT
       stm32eforth.s:1592   .text.reset_handler:0000000000000b20 CRRNT
       stm32eforth.s:1600   .text.reset_handler:0000000000000b2a $d
       stm32eforth.s:1601   .text.reset_handler:0000000000000b2e _CP
       stm32eforth.s:1604   .text.reset_handler:0000000000000b34 CPP
       stm32eforth.s:1611   .text.reset_handler:0000000000000b3e $d
       stm32eforth.s:1612   .text.reset_handler:0000000000000b42 _FCPP
       stm32eforth.s:1615   .text.reset_handler:0000000000000b48 FCPP
       stm32eforth.s:1623   .text.reset_handler:0000000000000b52 $d
       stm32eforth.s:1624   .text.reset_handler:0000000000000b56 _LAST
       stm32eforth.s:1627   .text.reset_handler:0000000000000b5c LAST
       stm32eforth.s:1634   .text.reset_handler:0000000000000b66 $d
       stm32eforth.s:1635   .text.reset_handler:0000000000000b6a _USER_BGN
       stm32eforth.s:1638   .text.reset_handler:0000000000000b78 USER_BEGIN
       stm32eforth.s:1645   .text.reset_handler:0000000000000b82 $d
       stm32eforth.s:1646   .text.reset_handler:0000000000000b86 _USER_END
ARM GAS  stm32eforth.s 			page 91


       stm32eforth.s:1649   .text.reset_handler:0000000000000b90 USER_END
       stm32eforth.s:1656   .text.reset_handler:0000000000000b9a $d
       stm32eforth.s:1657   .text.reset_handler:0000000000000b9e _USER_IMG
       stm32eforth.s:1660   .text.reset_handler:0000000000000ba8 USER_IMG
       stm32eforth.s:1671   .text.reset_handler:0000000000000bb2 $d
       stm32eforth.s:1672   .text.reset_handler:0000000000000bb6 _WITHI
       stm32eforth.s:1675   .text.reset_handler:0000000000000bc0 WITHI
       stm32eforth.s:1690   .text.reset_handler:0000000000000be0 $d
       stm32eforth.s:1691   .text.reset_handler:0000000000000be4 _UMMOD
       stm32eforth.s:1694   .text.reset_handler:0000000000000bec UMMOD
       stm32eforth.s:1698   .text.reset_handler:0000000000000bf6 UMMOD0
       stm32eforth.s:1705   .text.reset_handler:0000000000000c06 UMMOD1
       stm32eforth.s:1711   .text.reset_handler:0000000000000c10 UMMOD2
       stm32eforth.s:1721   .text.reset_handler:0000000000000c1a $d
       stm32eforth.s:1722   .text.reset_handler:0000000000000c1e _MSMOD
       stm32eforth.s:1724   .text.reset_handler:0000000000000c24 $t
       stm32eforth.s:1725   .text.reset_handler:0000000000000c24 MSMOD
       stm32eforth.s:1732   .text.reset_handler:0000000000000c3c $d
       stm32eforth.s:1737   .text.reset_handler:0000000000000c50 MMOD1
       stm32eforth.s:1733   .text.reset_handler:0000000000000c40 $t
       stm32eforth.s:1742   .text.reset_handler:0000000000000c60 $d
       stm32eforth.s:1745   .text.reset_handler:0000000000000c6c MMOD2
       stm32eforth.s:1743   .text.reset_handler:0000000000000c64 $t
       stm32eforth.s:1750   .text.reset_handler:0000000000000c7c $d
       stm32eforth.s:1754   .text.reset_handler:0000000000000c8c MMOD3
       stm32eforth.s:1751   .text.reset_handler:0000000000000c80 $t
       stm32eforth.s:1760   .text.reset_handler:0000000000000c90 $d
       stm32eforth.s:1761   .text.reset_handler:0000000000000c94 _SLMOD
       stm32eforth.s:1764   .text.reset_handler:0000000000000c9c SLMOD
       stm32eforth.s:1775   .text.reset_handler:0000000000000cb4 $d
       stm32eforth.s:1776   .text.reset_handler:0000000000000cb8 _MODD
       stm32eforth.s:1778   .text.reset_handler:0000000000000cbc $t
       stm32eforth.s:1788   .text.reset_handler:0000000000000ccc $d
       stm32eforth.s:1789   .text.reset_handler:0000000000000cd0 _SLASH
       stm32eforth.s:1791   .text.reset_handler:0000000000000cd2 $t
       stm32eforth.s:1792   .text.reset_handler:0000000000000cd4 SLASH
       stm32eforth.s:1802   .text.reset_handler:0000000000000ce8 $d
       stm32eforth.s:1803   .text.reset_handler:0000000000000cec _SSMOD
       stm32eforth.s:1805   .text.reset_handler:0000000000000cf2 $t
       stm32eforth.s:1806   .text.reset_handler:0000000000000cf4 SSMOD
       stm32eforth.s:1817   .text.reset_handler:0000000000000d0c $d
       stm32eforth.s:1818   .text.reset_handler:0000000000000d10 _STASL
       stm32eforth.s:1821   .text.reset_handler:0000000000000d14 STASL
       stm32eforth.s:1834   .text.reset_handler:0000000000000d28 $d
       stm32eforth.s:1835   .text.reset_handler:0000000000000d2c _ALGND
       stm32eforth.s:1837   .text.reset_handler:0000000000000d34 $t
       stm32eforth.s:1838   .text.reset_handler:0000000000000d34 ALGND
       stm32eforth.s:1847   .text.reset_handler:0000000000000d42 $d
       stm32eforth.s:1848   .text.reset_handler:0000000000000d46 _TCHAR
       stm32eforth.s:1850   .text.reset_handler:0000000000000d4c $t
       stm32eforth.s:1851   .text.reset_handler:0000000000000d4c TCHAR
       stm32eforth.s:1854   .text.reset_handler:0000000000000d54 $d
       stm32eforth.s:1855   .text.reset_handler:0000000000000d58 $t
       stm32eforth.s:1859   .text.reset_handler:0000000000000d68 $d
       stm32eforth.s:1860   .text.reset_handler:0000000000000d6c $t
       stm32eforth.s:1863   .text.reset_handler:0000000000000d78 $d
       stm32eforth.s:1867   .text.reset_handler:0000000000000d88 TCHA1
ARM GAS  stm32eforth.s 			page 92


       stm32eforth.s:1864   .text.reset_handler:0000000000000d7c $t
       stm32eforth.s:1866   .text.reset_handler:0000000000000d84 $d
       stm32eforth.s:1868   .text.reset_handler:0000000000000d88 $t
       stm32eforth.s:1873   .text.reset_handler:0000000000000d8c $d
       stm32eforth.s:1874   .text.reset_handler:0000000000000d90 _DEPTH
       stm32eforth.s:1876   .text.reset_handler:0000000000000d96 $t
       stm32eforth.s:1877   .text.reset_handler:0000000000000d98 DEPTH
       stm32eforth.s:1889   .text.reset_handler:0000000000000db2 $d
       stm32eforth.s:1890   .text.reset_handler:0000000000000db6 _PICK
       stm32eforth.s:1893   .text.reset_handler:0000000000000dbc PICK
       stm32eforth.s:1908   .text.reset_handler:0000000000000dd8 $d
       stm32eforth.s:1909   .text.reset_handler:0000000000000ddc _HERE
       stm32eforth.s:1912   .text.reset_handler:0000000000000de4 HERE
       stm32eforth.s:1921   .text.reset_handler:0000000000000df4 $d
       stm32eforth.s:1922   .text.reset_handler:0000000000000df8 _PAD
       stm32eforth.s:1924   .text.reset_handler:0000000000000dfc $t
       stm32eforth.s:1925   .text.reset_handler:0000000000000dfc PAD
       stm32eforth.s:1934   .text.reset_handler:0000000000000e0c $d
       stm32eforth.s:1935   .text.reset_handler:0000000000000e10 _TIB
       stm32eforth.s:1937   .text.reset_handler:0000000000000e14 $t
       stm32eforth.s:1938   .text.reset_handler:0000000000000e14 TIB
       stm32eforth.s:1946   .text.reset_handler:0000000000000e1c $d
       stm32eforth.s:1947   .text.reset_handler:0000000000000e20 _ATEXE
       stm32eforth.s:1950   .text.reset_handler:0000000000000e2c ATEXE
       stm32eforth.s:1962   .text.reset_handler:0000000000000e3e $d
       stm32eforth.s:1963   .text.reset_handler:0000000000000e42 _CMOVE
       stm32eforth.s:1965   .text.reset_handler:0000000000000e48 $t
       stm32eforth.s:1966   .text.reset_handler:0000000000000e48 CMOVE
       stm32eforth.s:1973   .text.reset_handler:0000000000000e5a CMOV1
       stm32eforth.s:1970   .text.reset_handler:0000000000000e52 CMOV0
       stm32eforth.s:1978   .text.reset_handler:0000000000000e64 CMOV2
       stm32eforth.s:1985   .text.reset_handler:0000000000000e6a $d
       stm32eforth.s:1986   .text.reset_handler:0000000000000e6e _MOVE
       stm32eforth.s:1989   .text.reset_handler:0000000000000e74 MOVE
       stm32eforth.s:1997   .text.reset_handler:0000000000000e8a MOVE1
       stm32eforth.s:1994   .text.reset_handler:0000000000000e82 MOVE0
       stm32eforth.s:2002   .text.reset_handler:0000000000000e94 MOVE2
       stm32eforth.s:2009   .text.reset_handler:0000000000000e9a $d
       stm32eforth.s:2010   .text.reset_handler:0000000000000e9e _FILL
       stm32eforth.s:2013   .text.reset_handler:0000000000000ea4 FILL
       stm32eforth.s:2016   .text.reset_handler:0000000000000eac FILL0
       stm32eforth.s:2019   .text.reset_handler:0000000000000eb0 FILL1
       stm32eforth.s:2025   .text.reset_handler:0000000000000ebe FILL2
       stm32eforth.s:2032   .text.reset_handler:0000000000000ec4 $d
       stm32eforth.s:2033   .text.reset_handler:0000000000000ec8 _PACKS
       stm32eforth.s:2036   .text.reset_handler:0000000000000ed0 PACKS
       stm32eforth.s:2045   .text.reset_handler:0000000000000ef0 $d
       stm32eforth.s:2046   .text.reset_handler:0000000000000ef4 $t
       stm32eforth.s:2048   .text.reset_handler:0000000000000efc $d
       stm32eforth.s:2049   .text.reset_handler:0000000000000f00 $t
       stm32eforth.s:2066   .text.reset_handler:0000000000000f28 $d
       stm32eforth.s:2067   .text.reset_handler:0000000000000f2c _DIGIT
       stm32eforth.s:2069   .text.reset_handler:0000000000000f32 $t
       stm32eforth.s:2070   .text.reset_handler:0000000000000f34 DIGIT
       stm32eforth.s:2073   .text.reset_handler:0000000000000f3c $d
       stm32eforth.s:2074   .text.reset_handler:0000000000000f40 $t
       stm32eforth.s:2084   .text.reset_handler:0000000000000f58 $d
ARM GAS  stm32eforth.s 			page 93


       stm32eforth.s:2085   .text.reset_handler:0000000000000f5c _EXTRC
       stm32eforth.s:2087   .text.reset_handler:0000000000000f64 $t
       stm32eforth.s:2088   .text.reset_handler:0000000000000f64 EXTRC
       stm32eforth.s:2091   .text.reset_handler:0000000000000f6c $d
       stm32eforth.s:2092   .text.reset_handler:0000000000000f70 $t
       stm32eforth.s:2101   .text.reset_handler:0000000000000f84 $d
       stm32eforth.s:2102   .text.reset_handler:0000000000000f88 _BDIGS
       stm32eforth.s:2105   .text.reset_handler:0000000000000f8c BDIGS
       stm32eforth.s:2115   .text.reset_handler:0000000000000fa0 $d
       stm32eforth.s:2116   .text.reset_handler:0000000000000fa4 _HOLD
       stm32eforth.s:2119   .text.reset_handler:0000000000000fac HOLD
       stm32eforth.s:2133   .text.reset_handler:0000000000000fd0 $d
       stm32eforth.s:2134   .text.reset_handler:0000000000000fd4 _DIG
       stm32eforth.s:2136   .text.reset_handler:0000000000000fd6 $t
       stm32eforth.s:2137   .text.reset_handler:0000000000000fd8 DIG
       stm32eforth.s:2148   .text.reset_handler:0000000000000ff0 $d
       stm32eforth.s:2149   .text.reset_handler:0000000000000ff4 _DIGS
       stm32eforth.s:2152   .text.reset_handler:0000000000000ff8 DIGS
       stm32eforth.s:2154   .text.reset_handler:0000000000000ffc DIGS1
       stm32eforth.s:2158   .text.reset_handler:0000000000001008 $d
       stm32eforth.s:2160   .text.reset_handler:000000000000100e DIGS2
       stm32eforth.s:2159   .text.reset_handler:000000000000100c $t
       stm32eforth.s:2166   .text.reset_handler:0000000000001012 $d
       stm32eforth.s:2167   .text.reset_handler:0000000000001016 _SIGN
       stm32eforth.s:2170   .text.reset_handler:000000000000101c SIGN
       stm32eforth.s:2174   .text.reset_handler:0000000000001028 $d
       stm32eforth.s:2178   .text.reset_handler:0000000000001038 SIGN1
       stm32eforth.s:2175   .text.reset_handler:000000000000102c $t
       stm32eforth.s:2176   .text.reset_handler:0000000000001030 $d
       stm32eforth.s:2177   .text.reset_handler:0000000000001034 $t
       stm32eforth.s:2184   .text.reset_handler:000000000000103c $d
       stm32eforth.s:2185   .text.reset_handler:0000000000001040 _EDIGS
       stm32eforth.s:2188   .text.reset_handler:0000000000001044 EDIGS
       stm32eforth.s:2205   .text.reset_handler:0000000000001064 STRR
       stm32eforth.s:2220   .text.reset_handler:000000000000108c $d
       stm32eforth.s:2221   .text.reset_handler:0000000000001090 _HEX
       stm32eforth.s:2223   .text.reset_handler:0000000000001094 $t
       stm32eforth.s:2224   .text.reset_handler:0000000000001094 HEX
       stm32eforth.s:2227   .text.reset_handler:000000000000109c $d
       stm32eforth.s:2228   .text.reset_handler:00000000000010a0 $t
       stm32eforth.s:2235   .text.reset_handler:00000000000010ac $d
       stm32eforth.s:2236   .text.reset_handler:00000000000010b0 _DECIM
       stm32eforth.s:2238   .text.reset_handler:00000000000010b8 $t
       stm32eforth.s:2239   .text.reset_handler:00000000000010b8 DECIM
       stm32eforth.s:2242   .text.reset_handler:00000000000010c0 $d
       stm32eforth.s:2243   .text.reset_handler:00000000000010c4 $t
       stm32eforth.s:2253   .text.reset_handler:00000000000010d0 $d
       stm32eforth.s:2254   .text.reset_handler:00000000000010d4 _DIGTQ
       stm32eforth.s:2257   .text.reset_handler:00000000000010dc DIGTQ
       stm32eforth.s:2261   .text.reset_handler:00000000000010e8 $d
       stm32eforth.s:2262   .text.reset_handler:00000000000010ec $t
       stm32eforth.s:2264   .text.reset_handler:00000000000010f4 $d
       stm32eforth.s:2265   .text.reset_handler:00000000000010f8 $t
       stm32eforth.s:2268   .text.reset_handler:0000000000001104 $d
       stm32eforth.s:2277   .text.reset_handler:0000000000001128 DGTQ1
       stm32eforth.s:2269   .text.reset_handler:0000000000001108 $t
       stm32eforth.s:2270   .text.reset_handler:000000000000110c $d
ARM GAS  stm32eforth.s 			page 94


       stm32eforth.s:2271   .text.reset_handler:0000000000001110 $t
       stm32eforth.s:2274   .text.reset_handler:000000000000111c $d
       stm32eforth.s:2275   .text.reset_handler:0000000000001120 $t
       stm32eforth.s:2286   .text.reset_handler:0000000000001138 $d
       stm32eforth.s:2287   .text.reset_handler:000000000000113c _NUMBQ
       stm32eforth.s:2289   .text.reset_handler:0000000000001144 $t
       stm32eforth.s:2290   .text.reset_handler:0000000000001144 NUMBQ
       stm32eforth.s:2296   .text.reset_handler:0000000000001158 $d
       stm32eforth.s:2297   .text.reset_handler:000000000000115c $t
       stm32eforth.s:2302   .text.reset_handler:0000000000001170 $d
       stm32eforth.s:2303   .text.reset_handler:0000000000001174 $t
       stm32eforth.s:2305   .text.reset_handler:000000000000117c $d
       stm32eforth.s:2311   .text.reset_handler:0000000000001194 NUMQ1
       stm32eforth.s:2306   .text.reset_handler:0000000000001180 $t
       stm32eforth.s:2315   .text.reset_handler:00000000000011a0 $d
       stm32eforth.s:2316   .text.reset_handler:00000000000011a4 $t
       stm32eforth.s:2326   .text.reset_handler:00000000000011cc $d
       stm32eforth.s:2365   .text.reset_handler:0000000000001258 NUMQ6
       stm32eforth.s:2327   .text.reset_handler:00000000000011d0 $t
       stm32eforth.s:2329   .text.reset_handler:00000000000011d8 NUMQ2
       stm32eforth.s:2337   .text.reset_handler:00000000000011f4 $d
       stm32eforth.s:2356   .text.reset_handler:000000000000123c NUMQ4
       stm32eforth.s:2338   .text.reset_handler:00000000000011f8 $t
       stm32eforth.s:2346   .text.reset_handler:0000000000001218 $d
       stm32eforth.s:2347   .text.reset_handler:000000000000121c $t
       stm32eforth.s:2351   .text.reset_handler:000000000000122c $d
       stm32eforth.s:2353   .text.reset_handler:0000000000001234 NUMQ3
       stm32eforth.s:2352   .text.reset_handler:0000000000001230 $t
       stm32eforth.s:2363   .text.reset_handler:0000000000001254 NUMQ5
       stm32eforth.s:2362   .text.reset_handler:0000000000001250 $d
       stm32eforth.s:2364   .text.reset_handler:0000000000001254 $t
       stm32eforth.s:2379   .text.reset_handler:0000000000001270 $d
       stm32eforth.s:2380   .text.reset_handler:0000000000001274 _KEY
       stm32eforth.s:2382   .text.reset_handler:0000000000001278 $t
       stm32eforth.s:2383   .text.reset_handler:0000000000001278 KEY
       stm32eforth.s:2385   .text.reset_handler:000000000000127c KEY1
       stm32eforth.s:2388   .text.reset_handler:0000000000001284 $d
       stm32eforth.s:2390   .text.reset_handler:0000000000001288 $t
       stm32eforth.s:2392   .text.reset_handler:0000000000001290 $d
       stm32eforth.s:2393   .text.reset_handler:0000000000001294 $t
       stm32eforth.s:2396   .text.reset_handler:00000000000012a0 $d
       stm32eforth.s:2397   .text.reset_handler:00000000000012a4 $t
       stm32eforth.s:2402   .text.reset_handler:00000000000012a8 $d
       stm32eforth.s:2403   .text.reset_handler:00000000000012ac _SPACE
       stm32eforth.s:2405   .text.reset_handler:00000000000012b2 $t
       stm32eforth.s:2406   .text.reset_handler:00000000000012b4 SPACE
       stm32eforth.s:2415   .text.reset_handler:00000000000012c4 $d
       stm32eforth.s:2416   .text.reset_handler:00000000000012c8 _SPACS
       stm32eforth.s:2419   .text.reset_handler:00000000000012d0 SPACS
       stm32eforth.s:2422   .text.reset_handler:00000000000012d8 $d
       stm32eforth.s:2423   .text.reset_handler:00000000000012dc $t
       stm32eforth.s:2428   .text.reset_handler:00000000000012ec CHAR2
       stm32eforth.s:2426   .text.reset_handler:00000000000012e8 CHAR1
       stm32eforth.s:2430   .text.reset_handler:00000000000012f0 $d
       stm32eforth.s:2431   .text.reset_handler:00000000000012f4 $t
       stm32eforth.s:2436   .text.reset_handler:00000000000012f8 $d
       stm32eforth.s:2437   .text.reset_handler:00000000000012fc _TYPEE
ARM GAS  stm32eforth.s 			page 95


       stm32eforth.s:2440   .text.reset_handler:0000000000001304 TYPEE
       stm32eforth.s:2448   .text.reset_handler:000000000000131a TYPE2
       stm32eforth.s:2444   .text.reset_handler:000000000000130e TYPE1
       stm32eforth.s:2450   .text.reset_handler:000000000000131e $d
       stm32eforth.s:2451   .text.reset_handler:0000000000001322 $t
       stm32eforth.s:2457   .text.reset_handler:000000000000132a $d
       stm32eforth.s:2458   .text.reset_handler:000000000000132e _CR
       stm32eforth.s:2461   .text.reset_handler:0000000000001334 CR
       stm32eforth.s:2464   .text.reset_handler:000000000000133c $d
       stm32eforth.s:2465   .text.reset_handler:0000000000001340 $t
       stm32eforth.s:2467   .text.reset_handler:0000000000001348 $d
       stm32eforth.s:2468   .text.reset_handler:000000000000134c $t
       stm32eforth.s:2479   .text.reset_handler:0000000000001354 DOSTR
       stm32eforth.s:2502   .text.reset_handler:0000000000001388 STRQP
       stm32eforth.s:2514   .text.reset_handler:0000000000001394 DOTST
       stm32eforth.s:2527   .text.reset_handler:00000000000013a4 DOTQP
       stm32eforth.s:2536   .text.reset_handler:00000000000013b4 $d
       stm32eforth.s:2537   .text.reset_handler:00000000000013b8 _DOTR
       stm32eforth.s:2540   .text.reset_handler:00000000000013bc DOTR
       stm32eforth.s:2554   .text.reset_handler:00000000000013e0 $d
       stm32eforth.s:2555   .text.reset_handler:00000000000013e4 _UDOTR
       stm32eforth.s:2557   .text.reset_handler:00000000000013e8 $t
       stm32eforth.s:2558   .text.reset_handler:00000000000013e8 UDOTR
       stm32eforth.s:2574   .text.reset_handler:0000000000001414 $d
       stm32eforth.s:2575   .text.reset_handler:0000000000001418 _UDOT
       stm32eforth.s:2578   .text.reset_handler:000000000000141c UDOT
       stm32eforth.s:2590   .text.reset_handler:0000000000001438 $d
       stm32eforth.s:2591   .text.reset_handler:000000000000143c _DOT
       stm32eforth.s:2593   .text.reset_handler:000000000000143e $t
       stm32eforth.s:2594   .text.reset_handler:0000000000001440 DOT
       stm32eforth.s:2599   .text.reset_handler:0000000000001450 $d
       stm32eforth.s:2600   .text.reset_handler:0000000000001454 $t
       stm32eforth.s:2602   .text.reset_handler:000000000000145c $d
       stm32eforth.s:2605   .text.reset_handler:0000000000001468 DOT1
       stm32eforth.s:2603   .text.reset_handler:0000000000001460 $t
       stm32eforth.s:2614   .text.reset_handler:0000000000001478 $d
       stm32eforth.s:2615   .text.reset_handler:000000000000147c _QUEST
       stm32eforth.s:2617   .text.reset_handler:000000000000147e $t
       stm32eforth.s:2618   .text.reset_handler:0000000000001480 QUEST
       stm32eforth.s:2634   .text.reset_handler:0000000000001490 PARS
       stm32eforth.s:2642   .text.reset_handler:00000000000014ac $d
       stm32eforth.s:2710   .text.reset_handler:000000000000159e PARS8
       stm32eforth.s:2643   .text.reset_handler:00000000000014b0 $t
       stm32eforth.s:2649   .text.reset_handler:00000000000014c8 $d
       stm32eforth.s:2671   .text.reset_handler:0000000000001518 PARS3
       stm32eforth.s:2650   .text.reset_handler:00000000000014cc $t
       stm32eforth.s:2651   .text.reset_handler:00000000000014d0 PARS1
       stm32eforth.s:2659   .text.reset_handler:00000000000014ec $d
       stm32eforth.s:2669   .text.reset_handler:0000000000001514 PARS2
       stm32eforth.s:2660   .text.reset_handler:00000000000014f0 $t
       stm32eforth.s:2662   .text.reset_handler:00000000000014f8 $d
       stm32eforth.s:2663   .text.reset_handler:00000000000014fc $t
       stm32eforth.s:2666   .text.reset_handler:0000000000001508 $d
       stm32eforth.s:2667   .text.reset_handler:000000000000150c $t
       stm32eforth.s:2675   .text.reset_handler:0000000000001524 PARS4
       stm32eforth.s:2686   .text.reset_handler:000000000000154c $d
       stm32eforth.s:2688   .text.reset_handler:0000000000001554 PARS5
ARM GAS  stm32eforth.s 			page 96


       stm32eforth.s:2687   .text.reset_handler:0000000000001550 $t
       stm32eforth.s:2690   .text.reset_handler:0000000000001558 $d
       stm32eforth.s:2697   .text.reset_handler:0000000000001572 PARS6
       stm32eforth.s:2691   .text.reset_handler:000000000000155c $t
       stm32eforth.s:2693   .text.reset_handler:0000000000001564 $d
       stm32eforth.s:2694   .text.reset_handler:0000000000001568 $t
       stm32eforth.s:2703   .text.reset_handler:0000000000001586 PARS7
       stm32eforth.s:2719   .text.reset_handler:00000000000015ae $d
       stm32eforth.s:2720   .text.reset_handler:00000000000015b2 _PARSE
       stm32eforth.s:2722   .text.reset_handler:00000000000015b8 $t
       stm32eforth.s:2723   .text.reset_handler:00000000000015b8 PARSE
       stm32eforth.s:2744   .text.reset_handler:00000000000015f8 $d
       stm32eforth.s:2745   .text.reset_handler:00000000000015fc _DOTPR
       stm32eforth.s:2748   .text.reset_handler:0000000000001600 DOTPR
       stm32eforth.s:2751   .text.reset_handler:0000000000001608 $d
       stm32eforth.s:2752   .text.reset_handler:000000000000160c $t
       stm32eforth.s:2759   .text.reset_handler:0000000000001618 $d
       stm32eforth.s:2760   .text.reset_handler:000000000000161c _PAREN
       stm32eforth.s:2762   .text.reset_handler:000000000000161e $t
       stm32eforth.s:2763   .text.reset_handler:0000000000001620 PAREN
       stm32eforth.s:2766   .text.reset_handler:0000000000001628 $d
       stm32eforth.s:2767   .text.reset_handler:000000000000162c $t
       stm32eforth.s:2774   .text.reset_handler:0000000000001638 $d
       stm32eforth.s:2775   .text.reset_handler:000000000000163c _BKSLA
       stm32eforth.s:2777   .text.reset_handler:000000000000163e $t
       stm32eforth.s:2778   .text.reset_handler:0000000000001640 BKSLA
       stm32eforth.s:2789   .text.reset_handler:0000000000001658 $d
       stm32eforth.s:2790   .text.reset_handler:000000000000165c _CHAR
       stm32eforth.s:2793   .text.reset_handler:0000000000001664 CHAR
       stm32eforth.s:2804   .text.reset_handler:000000000000167c $d
       stm32eforth.s:2805   .text.reset_handler:0000000000001680 _WORDD
       stm32eforth.s:2808   .text.reset_handler:0000000000001688 WORDD
       stm32eforth.s:2819   .text.reset_handler:00000000000016a0 $d
       stm32eforth.s:2820   .text.reset_handler:00000000000016a4 _TOKEN
       stm32eforth.s:2822   .text.reset_handler:00000000000016aa $t
       stm32eforth.s:2823   .text.reset_handler:00000000000016ac TOKEN
       stm32eforth.s:2835   .text.reset_handler:00000000000016bc $d
       stm32eforth.s:2836   .text.reset_handler:00000000000016c0 _NAMET
       stm32eforth.s:2838   .text.reset_handler:00000000000016c6 $t
       stm32eforth.s:2839   .text.reset_handler:00000000000016c8 NAMET
       stm32eforth.s:2843   .text.reset_handler:00000000000016d4 $d
       stm32eforth.s:2844   .text.reset_handler:00000000000016d8 $t
       stm32eforth.s:2857   .text.reset_handler:00000000000016e8 $d
       stm32eforth.s:2858   .text.reset_handler:00000000000016ec _SAMEQ
       stm32eforth.s:2860   .text.reset_handler:00000000000016f2 $t
       stm32eforth.s:2861   .text.reset_handler:00000000000016f4 SAMEQ
       stm32eforth.s:2881   .text.reset_handler:000000000000173c SAME2
       stm32eforth.s:2865   .text.reset_handler:0000000000001700 SAME1
       stm32eforth.s:2877   .text.reset_handler:000000000000172c $d
       stm32eforth.s:2878   .text.reset_handler:0000000000001730 $t
       stm32eforth.s:2883   .text.reset_handler:0000000000001740 $d
       stm32eforth.s:2884   .text.reset_handler:0000000000001744 $t
       stm32eforth.s:2885   .text.reset_handler:0000000000001748 $d
       stm32eforth.s:2886   .text.reset_handler:000000000000174c $t
       stm32eforth.s:2898   .text.reset_handler:0000000000001750 FIND
       stm32eforth.s:2907   .text.reset_handler:0000000000001770 FIND1
       stm32eforth.s:2910   .text.reset_handler:0000000000001778 $d
ARM GAS  stm32eforth.s 			page 97


       stm32eforth.s:2930   .text.reset_handler:00000000000017c0 FIND6
       stm32eforth.s:2911   .text.reset_handler:000000000000177c $t
       stm32eforth.s:2914   .text.reset_handler:0000000000001788 $d
       stm32eforth.s:2915   .text.reset_handler:000000000000178c $t
       stm32eforth.s:2919   .text.reset_handler:000000000000179c $d
       stm32eforth.s:2923   .text.reset_handler:00000000000017ac FIND2
       stm32eforth.s:2920   .text.reset_handler:00000000000017a0 $t
       stm32eforth.s:2928   .text.reset_handler:00000000000017bc FIND3
       stm32eforth.s:2937   .text.reset_handler:00000000000017d8 FIND4
       stm32eforth.s:2939   .text.reset_handler:00000000000017dc $d
       stm32eforth.s:2944   .text.reset_handler:00000000000017f0 FIND5
       stm32eforth.s:2940   .text.reset_handler:00000000000017e0 $t
       stm32eforth.s:2958   .text.reset_handler:0000000000001814 $d
       stm32eforth.s:2959   .text.reset_handler:0000000000001818 _NAMEQ
       stm32eforth.s:2961   .text.reset_handler:000000000000181e $t
       stm32eforth.s:2962   .text.reset_handler:0000000000001820 NAMEQ
       stm32eforth.s:2979   .text.reset_handler:0000000000001834 BKSP
       stm32eforth.s:2988   .text.reset_handler:0000000000001854 $d
       stm32eforth.s:3001   .text.reset_handler:000000000000187c BACK1
       stm32eforth.s:2989   .text.reset_handler:0000000000001858 $t
       stm32eforth.s:2990   .text.reset_handler:000000000000185c $d
       stm32eforth.s:2991   .text.reset_handler:0000000000001860 $t
       stm32eforth.s:2998   .text.reset_handler:0000000000001874 $d
       stm32eforth.s:2999   .text.reset_handler:0000000000001878 $t
       stm32eforth.s:3011   .text.reset_handler:0000000000001880 TAP
       stm32eforth.s:3028   .text.reset_handler:000000000000189c KTAP
       stm32eforth.s:3029   .text.reset_handler:000000000000189c TTAP
       stm32eforth.s:3033   .text.reset_handler:00000000000018a8 $d
       stm32eforth.s:3034   .text.reset_handler:00000000000018ac $t
       stm32eforth.s:3036   .text.reset_handler:00000000000018b4 $d
       stm32eforth.s:3049   .text.reset_handler:00000000000018e4 KTAP2
       stm32eforth.s:3037   .text.reset_handler:00000000000018b8 $t
       stm32eforth.s:3038   .text.reset_handler:00000000000018bc $d
       stm32eforth.s:3039   .text.reset_handler:00000000000018c0 $t
       stm32eforth.s:3041   .text.reset_handler:00000000000018c8 $d
       stm32eforth.s:3046   .text.reset_handler:00000000000018dc KTAP1
       stm32eforth.s:3042   .text.reset_handler:00000000000018cc $t
       stm32eforth.s:3045   .text.reset_handler:00000000000018d8 $d
       stm32eforth.s:3047   .text.reset_handler:00000000000018dc $t
       stm32eforth.s:3059   .text.reset_handler:00000000000018f8 $d
       stm32eforth.s:3060   .text.reset_handler:00000000000018fc _ACCEP
       stm32eforth.s:3063   .text.reset_handler:0000000000001904 ACCEP
       stm32eforth.s:3068   .text.reset_handler:0000000000001914 ACCP1
       stm32eforth.s:3072   .text.reset_handler:0000000000001920 $d
       stm32eforth.s:3088   .text.reset_handler:0000000000001950 ACCP4
       stm32eforth.s:3073   .text.reset_handler:0000000000001924 $t
       stm32eforth.s:3077   .text.reset_handler:0000000000001934 $d
       stm32eforth.s:3078   .text.reset_handler:0000000000001938 $t
       stm32eforth.s:3080   .text.reset_handler:0000000000001940 $d
       stm32eforth.s:3083   .text.reset_handler:000000000000194a ACCP2
       stm32eforth.s:3081   .text.reset_handler:0000000000001944 $t
       stm32eforth.s:3086   .text.reset_handler:000000000000194e ACCP3
       stm32eforth.s:3097   .text.reset_handler:0000000000001960 $d
       stm32eforth.s:3098   .text.reset_handler:0000000000001964 _QUERY
       stm32eforth.s:3100   .text.reset_handler:000000000000196a $t
       stm32eforth.s:3101   .text.reset_handler:000000000000196c QUERY
       stm32eforth.s:3105   .text.reset_handler:0000000000001978 $d
ARM GAS  stm32eforth.s 			page 98


       stm32eforth.s:3106   .text.reset_handler:000000000000197c $t
       stm32eforth.s:3111   .text.reset_handler:0000000000001990 $d
       stm32eforth.s:3112   .text.reset_handler:0000000000001994 $t
       stm32eforth.s:3122   .text.reset_handler:00000000000019a0 $d
       stm32eforth.s:3123   .text.reset_handler:00000000000019a4 _ABORT
       stm32eforth.s:3125   .text.reset_handler:00000000000019aa $t
       stm32eforth.s:3126   .text.reset_handler:00000000000019ac ABORT
       stm32eforth.s:3132   .text.reset_handler:00000000000019c0 $d
       stm32eforth.s:3133   .text.reset_handler:00000000000019c4 $t
       stm32eforth.s:3279   .text.reset_handler:0000000000001b34 PRESE
       stm32eforth.s:3294   .text.reset_handler:0000000000001b4c QUIT
       stm32eforth.s:3145   .text.reset_handler:00000000000019d4 ABORQ
       stm32eforth.s:3148   .text.reset_handler:00000000000019dc $d
       stm32eforth.s:3154   .text.reset_handler:00000000000019f4 ABOR1
       stm32eforth.s:3149   .text.reset_handler:00000000000019e0 $t
       stm32eforth.s:3165   .text.reset_handler:0000000000001a00 $d
       stm32eforth.s:3166   .text.reset_handler:0000000000001a04 _INTER
       stm32eforth.s:3168   .text.reset_handler:0000000000001a10 $t
       stm32eforth.s:3174   .text.reset_handler:0000000000001a20 $d
       stm32eforth.s:3185   .text.reset_handler:0000000000001a50 INTE1
       stm32eforth.s:3175   .text.reset_handler:0000000000001a24 $t
       stm32eforth.s:3177   .text.reset_handler:0000000000001a2c $d
       stm32eforth.s:3178   .text.reset_handler:0000000000001a30 $t
       stm32eforth.s:3180   .text.reset_handler:0000000000001a38 $d
       stm32eforth.s:3182   .text.reset_handler:0000000000001a46 $t
       stm32eforth.s:3188   .text.reset_handler:0000000000001a58 $d
       stm32eforth.s:3190   .text.reset_handler:0000000000001a60 INTE2
       stm32eforth.s:3189   .text.reset_handler:0000000000001a5c $t
       stm32eforth.s:3196   .text.reset_handler:0000000000001a64 $d
       stm32eforth.s:3197   .text.reset_handler:0000000000001a68 _LBRAC
       stm32eforth.s:3199   .text.reset_handler:0000000000001a6a $t
       stm32eforth.s:3200   .text.reset_handler:0000000000001a6c LBRAC
       stm32eforth.s:3203   .text.reset_handler:0000000000001a74 $d
       stm32eforth.s:3204   .text.reset_handler:0000000000001a78 $t
       stm32eforth.s:3211   .text.reset_handler:0000000000001a84 $d
       stm32eforth.s:3212   .text.reset_handler:0000000000001a88 _DOTOK
       stm32eforth.s:3214   .text.reset_handler:0000000000001a8c $t
       stm32eforth.s:3215   .text.reset_handler:0000000000001a8c DOTOK
       stm32eforth.s:3218   .text.reset_handler:0000000000001a94 $d
       stm32eforth.s:3219   .text.reset_handler:0000000000001a98 $t
       stm32eforth.s:3223   .text.reset_handler:0000000000001aa8 $d
       stm32eforth.s:3227   .text.reset_handler:0000000000001ab4 DOTO1
       stm32eforth.s:3224   .text.reset_handler:0000000000001aac $t
       stm32eforth.s:3225   .text.reset_handler:0000000000001ab0 $d
       stm32eforth.s:3228   .text.reset_handler:0000000000001ab4 $t
       stm32eforth.s:3234   .text.reset_handler:0000000000001abc $d
       stm32eforth.s:3235   .text.reset_handler:0000000000001ac0 _QSTAC
       stm32eforth.s:3238   .text.reset_handler:0000000000001ac8 QSTAC
       stm32eforth.s:3243   .text.reset_handler:0000000000001ad8 $d
       stm32eforth.s:3251   .text.reset_handler:0000000000001ae8 $d
       stm32eforth.s:3252   .text.reset_handler:0000000000001aec _EVAL
       stm32eforth.s:3255   .text.reset_handler:0000000000001af4 EVAL
       stm32eforth.s:3257   .text.reset_handler:0000000000001af8 EVAL1
       stm32eforth.s:3262   .text.reset_handler:0000000000001b08 $d
       stm32eforth.s:3267   .text.reset_handler:0000000000001b1c EVAL2
       stm32eforth.s:3263   .text.reset_handler:0000000000001b0c $t
       stm32eforth.s:3275   .text.reset_handler:0000000000001b28 $d
ARM GAS  stm32eforth.s 			page 99


       stm32eforth.s:3276   .text.reset_handler:0000000000001b2c _PRESE
       stm32eforth.s:3290   .text.reset_handler:0000000000001b42 $d
       stm32eforth.s:3291   .text.reset_handler:0000000000001b46 _QUIT
       stm32eforth.s:3298   .text.reset_handler:0000000000001b58 QUIT1
       stm32eforth.s:3300   .text.reset_handler:0000000000001b5c QUIT2
       stm32eforth.s:3304   .text.reset_handler:0000000000001b68 $d
       stm32eforth.s:3313   .text.reset_handler:0000000000001b70 _UNLOCK
       stm32eforth.s:3316   .text.reset_handler:0000000000001b78 UNLOCK
       stm32eforth.s:3319   .text.reset_handler:0000000000001b80 $d
       stm32eforth.s:3340   .text.reset_handler:0000000000001ba0 LOCK
       stm32eforth.s:3480   .text.reset_handler:0000000000001d24 flash_regs
       stm32eforth.s:3320   .text.reset_handler:0000000000001b84 $t
       stm32eforth.s:3347   .text.reset_handler:0000000000001bac WAIT_BSY
       stm32eforth.s:3349   .text.reset_handler:0000000000001bae WAIT1
       stm32eforth.s:3360   .text.reset_handler:0000000000001bb8 $d
       stm32eforth.s:3361   .text.reset_handler:0000000000001bbc _EPAGE
       stm32eforth.s:3365   .text.reset_handler:0000000000001bc8 EPAGE
       stm32eforth.s:3369   .text.reset_handler:0000000000001bd4 $d
       stm32eforth.s:3370   .text.reset_handler:0000000000001bd8 $t
       stm32eforth.s:3380   .text.reset_handler:0000000000001bf6 $d
       stm32eforth.s:3381   .text.reset_handler:0000000000001bfa $t
       stm32eforth.s:3385   .text.reset_handler:0000000000001c08 $d
       stm32eforth.s:3387   .text.reset_handler:0000000000001c16 $t
       stm32eforth.s:3392   .text.reset_handler:0000000000001c1c HWORD_WRITE
       stm32eforth.s:3405   .text.reset_handler:0000000000001c3e $d
       stm32eforth.s:3406   .text.reset_handler:0000000000001c42 $t
       stm32eforth.s:3407   .text.reset_handler:0000000000001c46 $d
       stm32eforth.s:3409   .text.reset_handler:0000000000001c54 $t
       stm32eforth.s:3418   .text.reset_handler:0000000000001c58 $d
       stm32eforth.s:3419   .text.reset_handler:0000000000001c5c _ISTOR
       stm32eforth.s:3423   .text.reset_handler:0000000000001c60 ISTOR
       stm32eforth.s:3427   .text.reset_handler:0000000000001c6c $d
       stm32eforth.s:3428   .text.reset_handler:0000000000001c70 $t
       stm32eforth.s:3439   .text.reset_handler:0000000000001c9c $d
       stm32eforth.s:3440   .text.reset_handler:0000000000001ca0 $t
       stm32eforth.s:3446   .text.reset_handler:0000000000001ca8 $d
       stm32eforth.s:3447   .text.reset_handler:0000000000001cac _TURN
       stm32eforth.s:3449   .text.reset_handler:0000000000001cb4 $t
       stm32eforth.s:3450   .text.reset_handler:0000000000001cb4 TURN
       stm32eforth.s:3452   .text.reset_handler:0000000000001cbc $d
       stm32eforth.s:3453   .text.reset_handler:0000000000001cc0 $t
       stm32eforth.s:3454   .text.reset_handler:0000000000001cc4 $d
       stm32eforth.s:3455   .text.reset_handler:0000000000001cc8 $t
       stm32eforth.s:3456   .text.reset_handler:0000000000001ccc $d
       stm32eforth.s:3457   .text.reset_handler:0000000000001cd0 $t
       stm32eforth.s:3459   .text.reset_handler:0000000000001cd8 $d
       stm32eforth.s:3460   .text.reset_handler:0000000000001cdc $t
       stm32eforth.s:3461   .text.reset_handler:0000000000001ce0 $d
       stm32eforth.s:3462   .text.reset_handler:0000000000001ce4 $t
       stm32eforth.s:3466   .text.reset_handler:0000000000001cf4 TURN1
       stm32eforth.s:3476   .text.reset_handler:0000000000001d18 $d
       stm32eforth.s:3477   .text.reset_handler:0000000000001d1c $t
       stm32eforth.s:3481   .text.reset_handler:0000000000001d24 $d
       stm32eforth.s:3492   .text.reset_handler:0000000000001d34 _TICK
       stm32eforth.s:3494   .text.reset_handler:0000000000001d36 $t
       stm32eforth.s:3495   .text.reset_handler:0000000000001d38 TICK
       stm32eforth.s:3500   .text.reset_handler:0000000000001d48 $d
ARM GAS  stm32eforth.s 			page 100


       stm32eforth.s:3502   .text.reset_handler:0000000000001d50 TICK1
       stm32eforth.s:3501   .text.reset_handler:0000000000001d4c $t
       stm32eforth.s:3507   .text.reset_handler:0000000000001d54 $d
       stm32eforth.s:3508   .text.reset_handler:0000000000001d58 _ALLOT
       stm32eforth.s:3510   .text.reset_handler:0000000000001d5e $t
       stm32eforth.s:3511   .text.reset_handler:0000000000001d60 ALLOT
       stm32eforth.s:3520   .text.reset_handler:0000000000001d70 $d
       stm32eforth.s:3521   .text.reset_handler:0000000000001d74 _COMMA
       stm32eforth.s:3522   .text.reset_handler:0000000000001d76 $t
       stm32eforth.s:3523   .text.reset_handler:0000000000001d78 COMMA
       stm32eforth.s:3536   .text.reset_handler:0000000000001d98 $d
       stm32eforth.s:3537   .text.reset_handler:0000000000001d9c _BCOMP
       stm32eforth.s:3539   .text.reset_handler:0000000000001da6 $t
       stm32eforth.s:3540   .text.reset_handler:0000000000001da8 BCOMP
       stm32eforth.s:3549   .text.reset_handler:0000000000001db8 $d
       stm32eforth.s:3550   .text.reset_handler:0000000000001dbc _COMPI
       stm32eforth.s:3552   .text.reset_handler:0000000000001dc4 $t
       stm32eforth.s:3553   .text.reset_handler:0000000000001dc4 COMPI
       stm32eforth.s:3968   .text.reset_handler:0000000000002190 CALLC
       stm32eforth.s:3568   .text.reset_handler:0000000000001dec $d
       stm32eforth.s:3569   .text.reset_handler:0000000000001df0 _LITER
       stm32eforth.s:3571   .text.reset_handler:0000000000001df8 $t
       stm32eforth.s:3572   .text.reset_handler:0000000000001df8 LITER
       stm32eforth.s:3575   .text.reset_handler:0000000000001e00 $d
       stm32eforth.s:3576   .text.reset_handler:0000000000001e04 $t
       stm32eforth.s:3586   .text.reset_handler:0000000000001e0c STRCQ
       stm32eforth.s:3589   .text.reset_handler:0000000000001e14 $d
       stm32eforth.s:3590   .text.reset_handler:0000000000001e18 $t
       stm32eforth.s:3593   .text.reset_handler:0000000000001e24 $d
       stm32eforth.s:3594   .text.reset_handler:0000000000001e28 $t
       stm32eforth.s:3608   .text.reset_handler:0000000000001e44 $d
       stm32eforth.s:3609   .text.reset_handler:0000000000001e48 _FOR
       stm32eforth.s:3611   .text.reset_handler:0000000000001e4c $t
       stm32eforth.s:3612   .text.reset_handler:0000000000001e4c FOR
       stm32eforth.s:3615   .text.reset_handler:0000000000001e54 $d
       stm32eforth.s:3616   .text.reset_handler:0000000000001e58 $t
       stm32eforth.s:3622   .text.reset_handler:0000000000001e60 $d
       stm32eforth.s:3623   .text.reset_handler:0000000000001e64 _BEGIN
       stm32eforth.s:3625   .text.reset_handler:0000000000001e6a $t
       stm32eforth.s:3626   .text.reset_handler:0000000000001e6c BEGIN
       stm32eforth.s:3634   .text.reset_handler:0000000000001e78 $d
       stm32eforth.s:3635   .text.reset_handler:0000000000001e7c _NEXT
       stm32eforth.s:3638   .text.reset_handler:0000000000001e84 NEXT
       stm32eforth.s:3641   .text.reset_handler:0000000000001e8c $d
       stm32eforth.s:3642   .text.reset_handler:0000000000001e90 $t
       stm32eforth.s:3648   .text.reset_handler:0000000000001e98 $d
       stm32eforth.s:3649   .text.reset_handler:0000000000001e9c _UNTIL
       stm32eforth.s:3651   .text.reset_handler:0000000000001ea2 $t
       stm32eforth.s:3652   .text.reset_handler:0000000000001ea4 UNTIL
       stm32eforth.s:3655   .text.reset_handler:0000000000001eac $d
       stm32eforth.s:3656   .text.reset_handler:0000000000001eb0 $t
       stm32eforth.s:3662   .text.reset_handler:0000000000001eb8 $d
       stm32eforth.s:3663   .text.reset_handler:0000000000001ebc _AGAIN
       stm32eforth.s:3665   .text.reset_handler:0000000000001ec2 $t
       stm32eforth.s:3666   .text.reset_handler:0000000000001ec4 AGAIN
       stm32eforth.s:3669   .text.reset_handler:0000000000001ecc $d
       stm32eforth.s:3670   .text.reset_handler:0000000000001ed0 $t
ARM GAS  stm32eforth.s 			page 101


       stm32eforth.s:3676   .text.reset_handler:0000000000001ed8 $d
       stm32eforth.s:3677   .text.reset_handler:0000000000001edc _IFF
       stm32eforth.s:3680   .text.reset_handler:0000000000001ee0 IFF
       stm32eforth.s:3683   .text.reset_handler:0000000000001ee8 $d
       stm32eforth.s:3684   .text.reset_handler:0000000000001eec $t
       stm32eforth.s:3686   .text.reset_handler:0000000000001ef4 $d
       stm32eforth.s:3687   .text.reset_handler:0000000000001ef8 $t
       stm32eforth.s:3694   .text.reset_handler:0000000000001f04 $d
       stm32eforth.s:3695   .text.reset_handler:0000000000001f08 _AHEAD
       stm32eforth.s:3697   .text.reset_handler:0000000000001f0e $t
       stm32eforth.s:3698   .text.reset_handler:0000000000001f10 AHEAD
       stm32eforth.s:3701   .text.reset_handler:0000000000001f18 $d
       stm32eforth.s:3702   .text.reset_handler:0000000000001f1c $t
       stm32eforth.s:3704   .text.reset_handler:0000000000001f24 $d
       stm32eforth.s:3705   .text.reset_handler:0000000000001f28 $t
       stm32eforth.s:3712   .text.reset_handler:0000000000001f34 $d
       stm32eforth.s:3713   .text.reset_handler:0000000000001f38 _REPEA
       stm32eforth.s:3716   .text.reset_handler:0000000000001f40 REPEA
       stm32eforth.s:3727   .text.reset_handler:0000000000001f58 $d
       stm32eforth.s:3728   .text.reset_handler:0000000000001f5c _THENN
       stm32eforth.s:3731   .text.reset_handler:0000000000001f64 THENN
       stm32eforth.s:3741   .text.reset_handler:0000000000001f78 $d
       stm32eforth.s:3742   .text.reset_handler:0000000000001f7c _AFT
       stm32eforth.s:3744   .text.reset_handler:0000000000001f80 $t
       stm32eforth.s:3745   .text.reset_handler:0000000000001f80 AFT
       stm32eforth.s:3756   .text.reset_handler:0000000000001f98 $d
       stm32eforth.s:3757   .text.reset_handler:0000000000001f9c _ELSEE
       stm32eforth.s:3760   .text.reset_handler:0000000000001fa4 ELSEE
       stm32eforth.s:3770   .text.reset_handler:0000000000001fb8 $d
       stm32eforth.s:3771   .text.reset_handler:0000000000001fbc _WHILE
       stm32eforth.s:3773   .text.reset_handler:0000000000001fc2 $t
       stm32eforth.s:3774   .text.reset_handler:0000000000001fc4 WHILE
       stm32eforth.s:3783   .text.reset_handler:0000000000001fd4 $d
       stm32eforth.s:3784   .text.reset_handler:0000000000001fd8 _ABRTQ
       stm32eforth.s:3787   .text.reset_handler:0000000000001fe0 ABRTQ
       stm32eforth.s:3790   .text.reset_handler:0000000000001fe8 $d
       stm32eforth.s:3791   .text.reset_handler:0000000000001fec $t
       stm32eforth.s:3797   .text.reset_handler:0000000000001ff4 $d
       stm32eforth.s:3798   .text.reset_handler:0000000000001ff8 _STRQ
       stm32eforth.s:3801   .text.reset_handler:0000000000001ffc STRQ
       stm32eforth.s:3804   .text.reset_handler:0000000000002004 $d
       stm32eforth.s:3805   .text.reset_handler:0000000000002008 $t
       stm32eforth.s:3811   .text.reset_handler:0000000000002010 $d
       stm32eforth.s:3812   .text.reset_handler:0000000000002014 _DOTQ
       stm32eforth.s:3815   .text.reset_handler:0000000000002018 DOTQ
       stm32eforth.s:3818   .text.reset_handler:0000000000002020 $d
       stm32eforth.s:3819   .text.reset_handler:0000000000002024 $t
       stm32eforth.s:3828   .text.reset_handler:000000000000202c $d
       stm32eforth.s:3829   .text.reset_handler:0000000000002030 _UNIQU
       stm32eforth.s:3831   .text.reset_handler:0000000000002038 $t
       stm32eforth.s:3832   .text.reset_handler:0000000000002038 UNIQU
       stm32eforth.s:3837   .text.reset_handler:0000000000002048 $d
       stm32eforth.s:3845   .text.reset_handler:0000000000002064 UNIQ1
       stm32eforth.s:3838   .text.reset_handler:000000000000204c $t
       stm32eforth.s:3839   .text.reset_handler:0000000000002050 $d
       stm32eforth.s:3841   .text.reset_handler:0000000000002058 $t
       stm32eforth.s:3856   .text.reset_handler:000000000000206c SNAME
ARM GAS  stm32eforth.s 			page 102


       stm32eforth.s:3861   .text.reset_handler:000000000000207c $d
       stm32eforth.s:3875   .text.reset_handler:00000000000020b4 SNAM1
       stm32eforth.s:3862   .text.reset_handler:0000000000002080 $t
       stm32eforth.s:3877   .text.reset_handler:00000000000020b8 $d
       stm32eforth.s:3879   .text.reset_handler:00000000000020c0 $t
       stm32eforth.s:3884   .text.reset_handler:00000000000020c4 $d
       stm32eforth.s:3885   .text.reset_handler:00000000000020c8 _SCOMP
       stm32eforth.s:3887   .text.reset_handler:00000000000020d2 $t
       stm32eforth.s:3888   .text.reset_handler:00000000000020d4 SCOMP
       stm32eforth.s:3893   .text.reset_handler:00000000000020e4 $d
       stm32eforth.s:3905   .text.reset_handler:0000000000002110 SCOM2
       stm32eforth.s:3894   .text.reset_handler:00000000000020e8 $t
       stm32eforth.s:3896   .text.reset_handler:00000000000020f0 $d
       stm32eforth.s:3897   .text.reset_handler:00000000000020f4 $t
       stm32eforth.s:3899   .text.reset_handler:00000000000020fc $d
       stm32eforth.s:3902   .text.reset_handler:0000000000002108 SCOM1
       stm32eforth.s:3900   .text.reset_handler:0000000000002100 $t
       stm32eforth.s:3908   .text.reset_handler:0000000000002118 $d
       stm32eforth.s:3911   .text.reset_handler:0000000000002124 SCOM3
       stm32eforth.s:3909   .text.reset_handler:000000000000211c $t
       stm32eforth.s:3917   .text.reset_handler:0000000000002128 $d
       stm32eforth.s:3918   .text.reset_handler:000000000000212c _OVERT
       stm32eforth.s:3920   .text.reset_handler:0000000000002132 $t
       stm32eforth.s:3921   .text.reset_handler:0000000000002134 OVERT
       stm32eforth.s:3932   .text.reset_handler:000000000000214c $d
       stm32eforth.s:3933   .text.reset_handler:0000000000002150 _SEMIS
       stm32eforth.s:3935   .text.reset_handler:0000000000002152 $t
       stm32eforth.s:3936   .text.reset_handler:0000000000002154 SEMIS
       stm32eforth.s:3948   .text.reset_handler:0000000000002170 $d
       stm32eforth.s:3949   .text.reset_handler:0000000000002174 _RBRAC
       stm32eforth.s:3951   .text.reset_handler:0000000000002176 $t
       stm32eforth.s:3952   .text.reset_handler:0000000000002178 RBRAC
       stm32eforth.s:3955   .text.reset_handler:0000000000002180 $d
       stm32eforth.s:3956   .text.reset_handler:0000000000002184 $t
       stm32eforth.s:3989   .text.reset_handler:00000000000021ca $d
       stm32eforth.s:3990   .text.reset_handler:00000000000021ce _COLON
       stm32eforth.s:3992   .text.reset_handler:00000000000021d0 $t
       stm32eforth.s:3993   .text.reset_handler:00000000000021d0 COLON
       stm32eforth.s:4006   .text.reset_handler:00000000000021f0 $d
       stm32eforth.s:4007   .text.reset_handler:00000000000021f4 _IMMED
       stm32eforth.s:4009   .text.reset_handler:00000000000021fe $t
       stm32eforth.s:4010   .text.reset_handler:0000000000002200 IMMED
       stm32eforth.s:4013   .text.reset_handler:0000000000002208 $d
       stm32eforth.s:4014   .text.reset_handler:000000000000220c $t
       stm32eforth.s:4029   .text.reset_handler:000000000000222c $d
       stm32eforth.s:4030   .text.reset_handler:0000000000002230 _CONST
       stm32eforth.s:4033   .text.reset_handler:000000000000223c CONST
       stm32eforth.s:4042   .text.reset_handler:000000000000225c $d
       stm32eforth.s:4043   .text.reset_handler:0000000000002260 $t
       stm32eforth.s:4050   .text.reset_handler:000000000000226c $d
       stm32eforth.s:4051   .text.reset_handler:0000000000002270 _CREAT
       stm32eforth.s:4054   .text.reset_handler:0000000000002278 CREAT
       stm32eforth.s:4063   .text.reset_handler:0000000000002298 $d
       stm32eforth.s:4064   .text.reset_handler:000000000000229c $t
       stm32eforth.s:4070   .text.reset_handler:00000000000022a4 $d
       stm32eforth.s:4071   .text.reset_handler:00000000000022a8 _VARIA
       stm32eforth.s:4074   .text.reset_handler:00000000000022b4 VARIA
ARM GAS  stm32eforth.s 			page 103


       stm32eforth.s:4078   .text.reset_handler:00000000000022c0 $d
       stm32eforth.s:4079   .text.reset_handler:00000000000022c4 $t
       stm32eforth.s:4092   .text.reset_handler:00000000000022cc DMP
       stm32eforth.s:4096   .text.reset_handler:00000000000022d8 $d
       stm32eforth.s:4097   .text.reset_handler:00000000000022dc $t
       stm32eforth.s:4108   .text.reset_handler:0000000000002304 PDUM2
       stm32eforth.s:4101   .text.reset_handler:00000000000022ec PDUM1
       stm32eforth.s:4105   .text.reset_handler:00000000000022f8 $d
       stm32eforth.s:4106   .text.reset_handler:00000000000022fc $t
       stm32eforth.s:4110   .text.reset_handler:0000000000002308 $d
       stm32eforth.s:4111   .text.reset_handler:000000000000230c $t
       stm32eforth.s:4116   .text.reset_handler:0000000000002310 $d
       stm32eforth.s:4117   .text.reset_handler:0000000000002314 _DUMP
       stm32eforth.s:4120   .text.reset_handler:000000000000231c DUMP
       stm32eforth.s:4127   .text.reset_handler:0000000000002334 $d
       stm32eforth.s:4128   .text.reset_handler:0000000000002338 $t
       stm32eforth.s:4142   .text.reset_handler:000000000000236c DUMP4
       stm32eforth.s:4131   .text.reset_handler:0000000000002344 DUMP1
       stm32eforth.s:4134   .text.reset_handler:000000000000234c $d
       stm32eforth.s:4135   .text.reset_handler:0000000000002350 $t
       stm32eforth.s:4144   .text.reset_handler:0000000000002370 $d
       stm32eforth.s:4145   .text.reset_handler:0000000000002374 DUMP3
       stm32eforth.s:4146   .text.reset_handler:0000000000002374 $t
       stm32eforth.s:4155   .text.reset_handler:0000000000002388 $d
       stm32eforth.s:4156   .text.reset_handler:000000000000238c _DOTS
       stm32eforth.s:4160   .text.reset_handler:0000000000002390 DOTS
       stm32eforth.s:4170   .text.reset_handler:00000000000023b0 DOTS2
       stm32eforth.s:4166   .text.reset_handler:00000000000023a4 DOTS1
       stm32eforth.s:4172   .text.reset_handler:00000000000023b4 $d
       stm32eforth.s:4173   .text.reset_handler:00000000000023b8 $t
       stm32eforth.s:4179   .text.reset_handler:00000000000023c0 $d
       stm32eforth.s:4180   .text.reset_handler:00000000000023c4 _TNAME
       stm32eforth.s:4182   .text.reset_handler:00000000000023ca $t
       stm32eforth.s:4183   .text.reset_handler:00000000000023cc TNAME
       stm32eforth.s:4188   .text.reset_handler:00000000000023dc TNAM1
       stm32eforth.s:4191   .text.reset_handler:00000000000023e4 $d
       stm32eforth.s:4201   .text.reset_handler:000000000000240c TNAM2
       stm32eforth.s:4192   .text.reset_handler:00000000000023e8 $t
       stm32eforth.s:4197   .text.reset_handler:00000000000023fc $d
       stm32eforth.s:4198   .text.reset_handler:0000000000002400 $t
       stm32eforth.s:4209   .text.reset_handler:0000000000002418 $d
       stm32eforth.s:4210   .text.reset_handler:000000000000241c _DOTID
       stm32eforth.s:4212   .text.reset_handler:0000000000002420 $t
       stm32eforth.s:4213   .text.reset_handler:0000000000002420 DOTID
       stm32eforth.s:4217   .text.reset_handler:000000000000242c $d
       stm32eforth.s:4224   .text.reset_handler:0000000000002448 DOTI1
       stm32eforth.s:4218   .text.reset_handler:0000000000002430 $t
       stm32eforth.s:4220   .text.reset_handler:0000000000002438 $d
       stm32eforth.s:4221   .text.reset_handler:000000000000243c $t
       stm32eforth.s:4226   .text.reset_handler:000000000000244c $d
       stm32eforth.s:4228   .text.reset_handler:0000000000002456 $t
       stm32eforth.s:4231   *ABS*:0000000000000000 WANT_SEE
       stm32eforth.s:4315   .text.reset_handler:000000000000245c $d
       stm32eforth.s:4317   .text.reset_handler:0000000000002460 _WORDS
       stm32eforth.s:4319   .text.reset_handler:0000000000002466 $t
       stm32eforth.s:4320   .text.reset_handler:0000000000002468 WORDS
       stm32eforth.s:4325   .text.reset_handler:0000000000002478 WORS1
ARM GAS  stm32eforth.s 			page 104


       stm32eforth.s:4328   .text.reset_handler:0000000000002480 $d
       stm32eforth.s:4335   .text.reset_handler:000000000000249c WORS2
       stm32eforth.s:4329   .text.reset_handler:0000000000002484 $t
       stm32eforth.s:4348   .text.reset_handler:00000000000024a0 VERSN
       stm32eforth.s:4351   .text.reset_handler:00000000000024a8 $d
       stm32eforth.s:4352   .text.reset_handler:00000000000024ac $t
       stm32eforth.s:4357   .text.reset_handler:00000000000024b0 $d
       stm32eforth.s:4358   .text.reset_handler:00000000000024b4 _HI
       stm32eforth.s:4365   .text.reset_handler:00000000000024c4 $d
       stm32eforth.s:4367   .text.reset_handler:00000000000024dc $t
       stm32eforth.s:4376   .text.reset_handler:00000000000024fc $d
       stm32eforth.s:4377   .text.reset_handler:0000000000002500 $t
       stm32eforth.s:4389   .text.reset_handler:0000000000002520 $d
       stm32eforth.s:4395   .text.reset_handler:000000000000252c $t
       stm32eforth.s:4402   .text.reset_handler:0000000000002546 COLD1
       stm32eforth.s:4404   .text.reset_handler:000000000000254a $d
       stm32eforth.s:4405   .text.reset_handler:000000000000254e $t
       stm32eforth.s:4407   .text.reset_handler:0000000000002556 $d
       stm32eforth.s:4408   .text.reset_handler:000000000000255a $t
       stm32eforth.s:4409   .text.reset_handler:000000000000255e $d
       stm32eforth.s:4410   .text.reset_handler:0000000000002562 $t
       stm32eforth.s:4411   .text.reset_handler:0000000000002566 $d
       stm32eforth.s:4412   .text.reset_handler:000000000000256a $t
       stm32eforth.s:4423   .text.reset_handler:0000000000002596 COLD2
       stm32eforth.s:4425   .text.reset_handler:0000000000002596 $d
       stm32eforth.s:4426   .text.reset_handler:000000000000259a $t
       stm32eforth.s:4428   .text.reset_handler:0000000000002800 $d
       stm32eforth.s:263    .text.default_handler:0000000000000033 $d
       stm32eforth.s:263    .text.default_handler:0000000000000034 $t
       stm32eforth.s:508    .text.reset_handler:0000000000000463 $d
       stm32eforth.s:508    .text.reset_handler:0000000000000464 $t
       stm32eforth.s:532    .text.reset_handler:00000000000004af $d
       stm32eforth.s:532    .text.reset_handler:00000000000004b0 $t
       stm32eforth.s:567    .text.reset_handler:0000000000000501 $d
       stm32eforth.s:567    .text.reset_handler:0000000000000502 $t
       stm32eforth.s:587    .text.reset_handler:0000000000000529 $d
       stm32eforth.s:587    .text.reset_handler:000000000000052a $t
       stm32eforth.s:612    .text.reset_handler:000000000000055d $d
       stm32eforth.s:612    .text.reset_handler:000000000000055e $t
       stm32eforth.s:728    .text.reset_handler:00000000000005f3 $d
       stm32eforth.s:728    .text.reset_handler:00000000000005f4 $t
       stm32eforth.s:762    .text.reset_handler:000000000000061f $d
       stm32eforth.s:762    .text.reset_handler:0000000000000620 $t
       stm32eforth.s:775    .text.reset_handler:0000000000000633 $d
       stm32eforth.s:775    .text.reset_handler:0000000000000634 $t
       stm32eforth.s:786    .text.reset_handler:000000000000063f $d
       stm32eforth.s:786    .text.reset_handler:0000000000000640 $t
       stm32eforth.s:798    .text.reset_handler:0000000000000651 $d
       stm32eforth.s:798    .text.reset_handler:0000000000000652 $t
       stm32eforth.s:810    .text.reset_handler:0000000000000663 $d
       stm32eforth.s:810    .text.reset_handler:0000000000000664 $t
       stm32eforth.s:834    .text.reset_handler:0000000000000689 $d
       stm32eforth.s:834    .text.reset_handler:000000000000068a $t
       stm32eforth.s:856    .text.reset_handler:00000000000006ab $d
       stm32eforth.s:856    .text.reset_handler:00000000000006ac $t
       stm32eforth.s:869    .text.reset_handler:00000000000006bd $d
       stm32eforth.s:869    .text.reset_handler:00000000000006be $t
ARM GAS  stm32eforth.s 			page 105


       stm32eforth.s:881    .text.reset_handler:00000000000006cf $d
       stm32eforth.s:881    .text.reset_handler:00000000000006d0 $t
       stm32eforth.s:905    .text.reset_handler:00000000000006f5 $d
       stm32eforth.s:905    .text.reset_handler:00000000000006f6 $t
       stm32eforth.s:944    .text.reset_handler:000000000000073b $d
       stm32eforth.s:944    .text.reset_handler:000000000000073c $t
       stm32eforth.s:956    .text.reset_handler:0000000000000751 $d
       stm32eforth.s:956    .text.reset_handler:0000000000000752 $t
       stm32eforth.s:1018   .text.reset_handler:00000000000007ab $d
       stm32eforth.s:1018   .text.reset_handler:00000000000007ac $t
       stm32eforth.s:1032   .text.reset_handler:00000000000007bf $d
       stm32eforth.s:1032   .text.reset_handler:00000000000007c0 $t
       stm32eforth.s:1043   .text.reset_handler:00000000000007cd $d
       stm32eforth.s:1043   .text.reset_handler:00000000000007ce $t
       stm32eforth.s:1054   .text.reset_handler:00000000000007dd $d
       stm32eforth.s:1054   .text.reset_handler:00000000000007de $t
       stm32eforth.s:1065   .text.reset_handler:00000000000007ed $d
       stm32eforth.s:1065   .text.reset_handler:00000000000007ee $t
       stm32eforth.s:1098   .text.reset_handler:000000000000081d $d
       stm32eforth.s:1098   .text.reset_handler:000000000000081e $t
       stm32eforth.s:1132   .text.reset_handler:0000000000000851 $d
       stm32eforth.s:1132   .text.reset_handler:0000000000000852 $t
       stm32eforth.s:1143   .text.reset_handler:0000000000000861 $d
       stm32eforth.s:1143   .text.reset_handler:0000000000000862 $t
       stm32eforth.s:1154   .text.reset_handler:0000000000000873 $d
       stm32eforth.s:1154   .text.reset_handler:0000000000000874 $t
       stm32eforth.s:1193   .text.reset_handler:00000000000008af $d
       stm32eforth.s:1193   .text.reset_handler:00000000000008b0 $t
       stm32eforth.s:1206   .text.reset_handler:00000000000008c3 $d
       stm32eforth.s:1206   .text.reset_handler:00000000000008c4 $t
       stm32eforth.s:1233   .text.reset_handler:00000000000008f1 $d
       stm32eforth.s:1233   .text.reset_handler:00000000000008f2 $t
       stm32eforth.s:1257   .text.reset_handler:0000000000000915 $d
       stm32eforth.s:1257   .text.reset_handler:0000000000000916 $t
       stm32eforth.s:1286   .text.reset_handler:0000000000000943 $d
       stm32eforth.s:1286   .text.reset_handler:0000000000000944 $t
       stm32eforth.s:1359   .text.reset_handler:00000000000009b3 $d
       stm32eforth.s:1359   .text.reset_handler:00000000000009b4 $t
       stm32eforth.s:1374   .text.reset_handler:00000000000009cb $d
       stm32eforth.s:1374   .text.reset_handler:00000000000009cc $t
       stm32eforth.s:1389   .text.reset_handler:00000000000009e7 $d
       stm32eforth.s:1389   .text.reset_handler:00000000000009e8 $t
       stm32eforth.s:1461   .text.reset_handler:0000000000000a45 $d
       stm32eforth.s:1461   .text.reset_handler:0000000000000a46 $t
       stm32eforth.s:1472   .text.reset_handler:0000000000000a5b $d
       stm32eforth.s:1472   .text.reset_handler:0000000000000a5c $t
       stm32eforth.s:1506   .text.reset_handler:0000000000000a97 $d
       stm32eforth.s:1506   .text.reset_handler:0000000000000a98 $t
       stm32eforth.s:1530   .text.reset_handler:0000000000000ab5 $d
       stm32eforth.s:1530   .text.reset_handler:0000000000000ab6 $t
       stm32eforth.s:1554   .text.reset_handler:0000000000000adf $d
       stm32eforth.s:1554   .text.reset_handler:0000000000000ae0 $t
       stm32eforth.s:1603   .text.reset_handler:0000000000000b31 $d
       stm32eforth.s:1603   .text.reset_handler:0000000000000b32 $t
       stm32eforth.s:1614   .text.reset_handler:0000000000000b47 $d
       stm32eforth.s:1614   .text.reset_handler:0000000000000b48 $t
       stm32eforth.s:1626   .text.reset_handler:0000000000000b5b $d
ARM GAS  stm32eforth.s 			page 106


       stm32eforth.s:1626   .text.reset_handler:0000000000000b5c $t
       stm32eforth.s:1637   .text.reset_handler:0000000000000b75 $d
       stm32eforth.s:1637   .text.reset_handler:0000000000000b76 $t
       stm32eforth.s:1648   .text.reset_handler:0000000000000b8f $d
       stm32eforth.s:1648   .text.reset_handler:0000000000000b90 $t
       stm32eforth.s:1659   .text.reset_handler:0000000000000ba7 $d
       stm32eforth.s:1659   .text.reset_handler:0000000000000ba8 $t
       stm32eforth.s:1674   .text.reset_handler:0000000000000bbd $d
       stm32eforth.s:1674   .text.reset_handler:0000000000000bbe $t
       stm32eforth.s:1693   .text.reset_handler:0000000000000beb $d
       stm32eforth.s:1693   .text.reset_handler:0000000000000bec $t
       stm32eforth.s:1763   .text.reset_handler:0000000000000c99 $d
       stm32eforth.s:1763   .text.reset_handler:0000000000000c9a $t
       stm32eforth.s:1820   .text.reset_handler:0000000000000d13 $d
       stm32eforth.s:1820   .text.reset_handler:0000000000000d14 $t
       stm32eforth.s:1892   .text.reset_handler:0000000000000dbb $d
       stm32eforth.s:1892   .text.reset_handler:0000000000000dbc $t
       stm32eforth.s:1911   .text.reset_handler:0000000000000de1 $d
       stm32eforth.s:1911   .text.reset_handler:0000000000000de2 $t
       stm32eforth.s:1949   .text.reset_handler:0000000000000e29 $d
       stm32eforth.s:1949   .text.reset_handler:0000000000000e2a $t
       stm32eforth.s:1988   .text.reset_handler:0000000000000e73 $d
       stm32eforth.s:1988   .text.reset_handler:0000000000000e74 $t
       stm32eforth.s:2012   .text.reset_handler:0000000000000ea3 $d
       stm32eforth.s:2012   .text.reset_handler:0000000000000ea4 $t
       stm32eforth.s:2035   .text.reset_handler:0000000000000ecf $d
       stm32eforth.s:2035   .text.reset_handler:0000000000000ed0 $t
       stm32eforth.s:2104   .text.reset_handler:0000000000000f8b $d
       stm32eforth.s:2104   .text.reset_handler:0000000000000f8c $t
       stm32eforth.s:2118   .text.reset_handler:0000000000000fa9 $d
       stm32eforth.s:2118   .text.reset_handler:0000000000000faa $t
       stm32eforth.s:2151   .text.reset_handler:0000000000000ff7 $d
       stm32eforth.s:2151   .text.reset_handler:0000000000000ff8 $t
       stm32eforth.s:2169   .text.reset_handler:000000000000101b $d
       stm32eforth.s:2169   .text.reset_handler:000000000000101c $t
       stm32eforth.s:2187   .text.reset_handler:0000000000001043 $d
       stm32eforth.s:2187   .text.reset_handler:0000000000001044 $t
       stm32eforth.s:2256   .text.reset_handler:00000000000010db $d
       stm32eforth.s:2256   .text.reset_handler:00000000000010dc $t
       stm32eforth.s:2418   .text.reset_handler:00000000000012cf $d
       stm32eforth.s:2418   .text.reset_handler:00000000000012d0 $t
       stm32eforth.s:2439   .text.reset_handler:0000000000001301 $d
       stm32eforth.s:2439   .text.reset_handler:0000000000001302 $t
       stm32eforth.s:2460   .text.reset_handler:0000000000001331 $d
       stm32eforth.s:2460   .text.reset_handler:0000000000001332 $t
       stm32eforth.s:2539   .text.reset_handler:00000000000013bb $d
       stm32eforth.s:2539   .text.reset_handler:00000000000013bc $t
       stm32eforth.s:2577   .text.reset_handler:000000000000141b $d
       stm32eforth.s:2577   .text.reset_handler:000000000000141c $t
       stm32eforth.s:2747   .text.reset_handler:00000000000015ff $d
       stm32eforth.s:2747   .text.reset_handler:0000000000001600 $t
       stm32eforth.s:2792   .text.reset_handler:0000000000001661 $d
       stm32eforth.s:2792   .text.reset_handler:0000000000001662 $t
       stm32eforth.s:2807   .text.reset_handler:0000000000001685 $d
       stm32eforth.s:2807   .text.reset_handler:0000000000001686 $t
       stm32eforth.s:3062   .text.reset_handler:0000000000001903 $d
       stm32eforth.s:3062   .text.reset_handler:0000000000001904 $t
ARM GAS  stm32eforth.s 			page 107


       stm32eforth.s:3237   .text.reset_handler:0000000000001ac7 $d
       stm32eforth.s:3237   .text.reset_handler:0000000000001ac8 $t
       stm32eforth.s:3245   .text.reset_handler:0000000000001ae3 $d
       stm32eforth.s:3245   .text.reset_handler:0000000000001ae4 $t
       stm32eforth.s:3254   .text.reset_handler:0000000000001af1 $d
       stm32eforth.s:3254   .text.reset_handler:0000000000001af2 $t
       stm32eforth.s:3278   .text.reset_handler:0000000000001b33 $d
       stm32eforth.s:3278   .text.reset_handler:0000000000001b34 $t
       stm32eforth.s:3293   .text.reset_handler:0000000000001b4b $d
       stm32eforth.s:3293   .text.reset_handler:0000000000001b4c $t
       stm32eforth.s:3315   .text.reset_handler:0000000000001b77 $d
       stm32eforth.s:3315   .text.reset_handler:0000000000001b78 $t
       stm32eforth.s:3363   .text.reset_handler:0000000000001bc7 $d
       stm32eforth.s:3363   .text.reset_handler:0000000000001bc8 $t
       stm32eforth.s:3421   .text.reset_handler:0000000000001c5f $d
       stm32eforth.s:3421   .text.reset_handler:0000000000001c60 $t
       stm32eforth.s:3637   .text.reset_handler:0000000000001e81 $d
       stm32eforth.s:3637   .text.reset_handler:0000000000001e82 $t
       stm32eforth.s:3679   .text.reset_handler:0000000000001edf $d
       stm32eforth.s:3679   .text.reset_handler:0000000000001ee0 $t
       stm32eforth.s:3715   .text.reset_handler:0000000000001f3f $d
       stm32eforth.s:3715   .text.reset_handler:0000000000001f40 $t
       stm32eforth.s:3730   .text.reset_handler:0000000000001f61 $d
       stm32eforth.s:3730   .text.reset_handler:0000000000001f62 $t
       stm32eforth.s:3759   .text.reset_handler:0000000000001fa1 $d
       stm32eforth.s:3759   .text.reset_handler:0000000000001fa2 $t
       stm32eforth.s:3786   .text.reset_handler:0000000000001fdf $d
       stm32eforth.s:3786   .text.reset_handler:0000000000001fe0 $t
       stm32eforth.s:3800   .text.reset_handler:0000000000001ffb $d
       stm32eforth.s:3800   .text.reset_handler:0000000000001ffc $t
       stm32eforth.s:3814   .text.reset_handler:0000000000002017 $d
       stm32eforth.s:3814   .text.reset_handler:0000000000002018 $t
       stm32eforth.s:4032   .text.reset_handler:0000000000002239 $d
       stm32eforth.s:4032   .text.reset_handler:000000000000223a $t
       stm32eforth.s:4053   .text.reset_handler:0000000000002277 $d
       stm32eforth.s:4053   .text.reset_handler:0000000000002278 $t
       stm32eforth.s:4073   .text.reset_handler:00000000000022b1 $d
       stm32eforth.s:4073   .text.reset_handler:00000000000022b2 $t
       stm32eforth.s:4119   .text.reset_handler:0000000000002319 $d
       stm32eforth.s:4119   .text.reset_handler:000000000000231a $t
       stm32eforth.s:4159   .text.reset_handler:000000000000238f $d
       stm32eforth.s:4159   .text.reset_handler:0000000000002390 $t
       stm32eforth.s:4360   .text.reset_handler:00000000000024b7 $d
       stm32eforth.s:4360   .text.reset_handler:00000000000024b8 $t

UNDEFINED SYMBOLS
_mstack
