ARM GAS  stm32eforth.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  stm32eforth.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.p2align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.p2aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m3
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
ARM GAS  stm32eforth.s 			page 3


  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
ARM GAS  stm32eforth.s 			page 4


  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  81              	
  82              	/* blue pill specific constants */ 
  83              	  .equ LED_GPIO, GPIOC_BASE_ADR
  84              	  .equ LED_PIN, 13
  85              	  .equ UART, USART1_BASE_ADR 
  86              	
ARM GAS  stm32eforth.s 			page 5


  87              	/* eForth specific constants */
  88              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  89              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  90              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  91              	.equ UPP ,	0x20000130	/*start of user area (UP0) */
  92              	// .equ DTOP ,	0x20000240	/*start of usable RAM area (HERE) */
  93              	.equ DEND , 0x20004E00  /*usable RAM end */
  94              	 .equ RAMOFFSET ,	UPP 	// remap
  95              	 .equ RAMEND, 0x20005000 // 20Ko
  96              	 .equ FLASHOFFSET ,	0x08000130	// remap
  97              	//.equ RAMOFFSET  ,	0x00000000	/* absolute */
  98              	//.equ MAPOFFSET  ,	0x00000000	/* absolute */
  99              	  .equ MAPOFFSET , (RAMOFFSET-FLASHOFFSET)
 100              	
 101              	/*************************************
 102              	   system variables offset from UPP
 103              	*************************************/
 104              	  .equ SEED_OFS, 4    // prng seed 
 105              	  .equ TICKS_OFS, SEED_OFS+4  // millseconds counter
 106              	  .equ TIMER_OFS, TICKS_OFS+4  // count down timer
 107              	  .equ TORAM_OFS, TIMER_OFS+4  // compile to RAM 
 108              	  .equ IMG_SIGN_OFS, TORAM_OFS+4  // image signature  
 109              	  .equ BOOT_OFS, IMG_SIGN_OFS+4  // boot program address
 110              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
 111              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
 112              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
 113              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
 114              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
 115              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
 116              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
 117              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
 118              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
 119              	  .equ FORTH_CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
 120              	  .equ USER_CTOP_OFS, FORTH_CTOP_OFS+4  // ram free dictionary address
 121              	  .equ LASTN_OFS, USER_CTOP_OFS+4     // last word in dictionary link nfa 
 122              	  .equ VARS_END_OFS, LASTN_OFS+4 // end of system variables  
 123              	  
 124              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
 125              	  .equ RX_QUEUE_OFS, VARS_END_OFS+4 // rx queue 
 126              	  .equ RX_HEAD_OFS, RX_QUEUE_OFS+RX_QUEUE_SIZE // queue head indice 
 127              	  .equ RX_TAIL_OFS, RX_HEAD_OFS+4 // queue tail indice 
 128              	
 129              	
 130              	/***********************************************
 131              	* MACROS
 132              	*	Assemble inline direct threaded code ending.
 133              	***********************************************/
 134              		.macro _CALL fn /* low level routine call */ 
 135              	 	PUSH {LR}
 136              		BL \fn  
 137              		POP {LR}
 138              		.endm
 139              		
 140              		.macro _MOV32 R V 
 141              		MOV \R, #\V&0xffff
 142              		MOVT \R, #\V>>16
 143              		.endm
ARM GAS  stm32eforth.s 			page 6


 144              	
 145              		.macro	_NEXT /*end low level word */
 146              		BX	LR
 147              		.endm
 148              	
 149              	 	.macro	_NEST /*start high level word */
 150              		STMFD	R2!,{LR}
 151              		.endm
 152              	
 153              	 	.macro	_UNNEST	/*end high level word */
 154              		LDMFD	R2!,{PC}
 155              		.endm
 156              	
 157              	 	.macro	_DOLIT /*long literals */
 158              		BL	DOLIT
 159              		.endm
 160              	
 161              	 	.macro	_PUSH	/*push R5 on data stack*/
 162              		STR	R5,[R1,#-4]!
 163              		.endm
 164              	
 165              	 	.macro	_POP /*pop data stack to R5 */
 166              		LDR	R5,[R1],#4
 167              		.endm
 168              	
 169              		.macro _HEADER  label, nlen, name
 170              			.section .inflash.dictinary 
 171              		LF_\label:   // link field
 172              			.word link 
 173              			.equ link , . 
 174              		_\label: .byte \nlen    // name field
 175              			.ascii "\name"
 176              			.p2align 2 
 177              		CA_\label:   // code field address 
 178              			.word \label + MAPOFFSET 
 179              			.section .text, "ax", %progbits 
 180              		\label:  // code address in .section .text 
 181              		.endm 
 182              	
 183              		.equ link, 0
 184              	
 185              	
 186              	/*************************************
 187              	*   interrupt service vectors table 
 188              	**************************************/
 189              	   .section  .isr_vector,"a",%progbits
 190              	  .type  isr_vectors, %object
 191              	
 192              	isr_vectors:
 193 0000 00000000 	  .word   _mstack          /* main return stack address */
 194 0004 00000000 	  .word   reset_handler    /* startup address */
 195              	/* core interrupts || exceptions */
 196 0008 00000000 	  .word   default_handler  /*  NMI */
 197 000c 00000000 	  .word   default_handler  /*  HardFault */
 198 0010 00000000 	  .word   default_handler  /*  Memory Management */
 199 0014 00000000 	  .word   default_handler  /* Bus fault */
 200 0018 00000000 	  .word   default_handler  /* Usage fault */
ARM GAS  stm32eforth.s 			page 7


 201 001c 00000000 	  .word   0
 202 0020 00000000 	  .word   0
 203 0024 00000000 	  .word   0
 204 0028 00000000 	  .word   0
 205 002c 00000000 	  .word   default_handler  /* SWI instruction */
 206 0030 00000000 	  .word   default_handler  /* Debug monitor */
 207 0034 00000000 	  .word   0
 208 0038 00000000 	  .word   default_handler  /* PendSV */
 209 003c 00000000 	  .word   systick_handler  /* Systick */
 210              	  
 211              	  /* External Interrupts */
 212 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 213 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 214 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 215 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 216 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 217 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 218 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 219 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 220 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 221 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 222 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 223 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 224 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 225 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 226 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 227 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 228 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 229 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 230 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 231 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 232 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 233 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 234 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 235 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 236 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 237 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 238 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 239 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 240 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 241 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 242 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 243 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 244 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 245 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 246 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 247 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 248 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 249 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
 250 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 251 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 252 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 253 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 254 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 255 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 256 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 257 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
ARM GAS  stm32eforth.s 			page 8


 258 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 259 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 260 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 261 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 262 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 263 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 264 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 265 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 266 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 267 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 268 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 269 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 270 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 271 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 272              	isr_end:
 273              	  .size  isr_vectors, .-isr_vectors
 274              	
 275              	/*****************************************************
 276              	* default isr handler called on unexpected interrupt
 277              	*****************************************************/
 278              	   .section  .inflash, "ax", %progbits 
 279              	   
 280              	  .type default_handler, %function
 281              	  .p2align 2 
 282              	  .global default_handler
 283              	default_handler:
 284 0000 014D     		ldr r5,exception_msg 
 285 0002 00F04FF8 		bl uart_puts 
 286 0006 39E0     		b reset_mcu    
 287              	  .size  default_handler, .-default_handler
 288              	exception_msg:
 289 0008 0C000000 		.word .+4 
 290 000c 12       		.byte 18
 291 000d 0A0D6578 		.ascii "\n\rexeption reboot!"
 291      65707469 
 291      6F6E2072 
 291      65626F6F 
 291      7421
 292 001f 00       		.p2align 2
 293              	
 294              	/*********************************
 295              		system milliseconds counter
 296              	*********************************/	
 297              	  .type systick_handler, %function
 298              	  .p2align 2 
 299              	  .global systick_handler
 300              	systick_handler:
 301 0020 4FF49873 	  _MOV32 r3,UPP
 301      C2F20003 
 302 0028 9868     	  ldr r0,[r3,#TICKS_OFS]  
 303 002a 00F10100 	  add r0,#1
 304 002e 9860     	  str r0,[r3,#TICKS_OFS]
 305 0030 D868     	  ldr r0,[r3,#TIMER_OFS]
 306 0032 10B1     	  cbz r0, systick_exit
 307 0034 A0F10100 	  sub r0,#1
 308 0038 D860     	  str r0,[r3,#TIMER_OFS]
 309              	systick_exit:
ARM GAS  stm32eforth.s 			page 9


 310 003a 7047     	  bx lr
 311              	
 312              	
 313              	
 314              	/**************************
 315              		UART RX handler
 316              	**************************/
 317              		.p2align 2
 318              		.type uart_rx_handler, %function
 319              	uart_rx_handler:
 320 003c 2DE9D002 		push {r4,r6,r7,r9}
 321 0040 4FF46054 		_MOV32 r4,UART 
 321      C4F20104 
 322 0048 2668     		ldr r6,[r4,#USART_SR]
 323 004a D4F80490 		ldr r9,[r4,#USART_DR]
 324 004e 16F0200F 		tst r6,#(1<<5) // RXNE 
 325 0052 0DD0     		beq 2f // no char received 
 326 0054 B9F1030F 		cmp r9,#3
 327 0058 0DD0     		beq user_reboot // received CTRL-C then reboot MCU 
 328 005a 03F15007 		add r7,r3,#RX_QUEUE_OFS
 329 005e 5C6E     		ldr r4,[r3,#RX_TAIL_OFS]
 330 0060 2744     		add r7,r7,r4 
 331 0062 87F80090 		strb r9,[r7]
 332 0066 04F10104 		add r4,#1 
 333 006a 04F00F04 		and r4,#(RX_QUEUE_SIZE-1)
 334 006e 5C66     		str r4,[r3,#RX_TAIL_OFS]
 335              	2:	
 336 0070 BDE8D002 		pop {r4,r6,r7,r9}
 337 0074 7047     		bx lr 
 338              	
 339              	user_reboot:
 340 0076 064D     		ldr r5,user_reboot_msg
 341 0078 00F014F8 		bl uart_puts 
 342              	reset_mcu: 
 343 007c 0348     		ldr r0,scb_adr 
 344 007e C168     		ldr r1,[r0,#SCB_AIRCR]
 345 0080 41F00401 		orr r1,#(1<<2)
 346 0084 C0F2FA51 		movt r1,#SCB_VECTKEY
 347 0088 C160     		str r1,[r0,#SCB_AIRCR]
 348 008a FEE7     		b . 
 349              		.p2align 2 
 350              	scb_adr:
 351 008c 00ED00E0 		.word SCB_BASE_ADR 
 352              	user_reboot_msg:
 353 0090 94000000 		.word .+4
 354 0094 0D       		.byte 13 
 355 0095 0D757365 		.ascii "\ruser reboot!"
 355      72207265 
 355      626F6F74 
 355      21
 356 00a2 00BF     		.p2align 2 
 357              	
 358              	// send counted string to uart 
 359              	// input: r5 string* 
 360              		.type uart_puts,%function 
 361              	uart_puts:
 362 00a4 4FF46050 		_MOV32 r0,UART 
ARM GAS  stm32eforth.s 			page 10


 362      C4F20100 
 363 00ac 15F8011B 		ldrb r1,[r5],#1 // string length
 364 00b0 0940     		ands r1,r1
 365 00b2 0CD0     	1:	beq 9f 
 366 00b4 0268     	2:  ldr r2,[r0,#USART_SR]
 367 00b6 12F08002 		ands r2,#0x80 
 368 00ba FBD0     		beq 2b 	
 369 00bc 15F8012B 		ldrb r2,[r5],#1
 370 00c0 0271     		strb r2,[r0,#USART_DR]
 371 00c2 0139     		subs r1,r1,#1 
 372 00c4 F6D1     		bne 2b 
 373 00c6 0268     	3:	ldr r2,[r0,#USART_SR]
 374 00c8 12F04002 		ands r2,#(1<<6)
 375 00cc FBD0     		beq 3b 
 376 00ce 7047     	9:  bx lr 
 377              	
 378              	
 379              	/**************************************
 380              	  reset_handler execute at MCU reset
 381              	***************************************/
 382              	  .type  reset_handler, %function
 383              	  .p2align 2 
 384              	  .global reset_handler
 385              	reset_handler:
 386 00d0 00F08FF8 		bl	remap 
 387 00d4 00F01CF8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 388 00d8 00F06AF8 		bl  uart_init
 389              	//	bl	UNLOCK			/* unlock flash memory */
 390 00dc 00F008F8 		bl forth_init 
 391 00e0 0248     		ldr r0,forth_entry
 392 00e2 40F00100 		orr r0,#1
 393 00e6 8047     		blx r0
 394 00e8 FFF7FEBF 		b.w .  
 395              		.p2align 2 
 396              	forth_entry:
 397 00ec 601F0018 		.word COLD+MAPOFFSET 
 398              	
 399              		.type forth_init, %function 
 400              	forth_init:
 401 00f0 4FF49873 		_MOV32 r3,UPP 
 401      C2F20003 
 402 00f8 4FF49D41 		_MOV32 R1,SPP
 402      C2F20001 
 403 0100 4FF49F42 		_MOV32 R2,RPP
 403      C2F20002 
 404 0108 85EA0505 		EOR R5,R5  
 405 010c 7047     		BX LR 
 406              	
 407              	  .type init_devices, %function
 408 010e 00BF     	  .p2align 2 
 409              	init_devices:
 410              	/* init clock to HSE 72 Mhz */
 411              	/* set 2 wait states in FLASH_ACR_LATENCY */
 412 0110 4FF40050 	  _MOV32 R0,FLASH_BASE_ADR 
 412      C4F20200 
 413 0118 4FF01202 	  mov r2,#0x12
 414 011c 0260     	  str r2,[r0,#FLASH_ACR]
ARM GAS  stm32eforth.s 			page 11


 415              	/* configure clock for HSE, 8 Mhz crystal */
 416              	/* enable HSE in RCC_CR */
 417 011e 4FF48050 	  _MOV32 R0,RCC_BASE_ADR 
 417      C4F20200 
 418 0126 0168     	  ldr r1,[r0,#RCC_CR]
 419 0128 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 420 012c 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 421              	/* wait HSERDY loop */
 422              	wait_hserdy:
 423 012e 0168     	  ldr r1,[r0,#RCC_CR]
 424 0130 11F4003F 	  tst r1,#(1<<17)
 425 0134 FBD0     	  beq wait_hserdy
 426              	
 427              	/************************************************* 
 428              	   configure PLL mul factor and source 
 429              	   SYSCLOCK=72 Mhz
 430              	   select HSE as  PLL source clock
 431              	   multiply frequency by 9 
 432              	   APB1 clock is limited to 36 Mhz so divide by 2 
 433              	****************************************************/
 434 0136 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 435 013a C0F21D01 	  movt r1,#(7<<2)|1
 436 013e 4160     	  str r1,[r0,#RCC_CFGR]
 437              	  /* enable PLL */
 438 0140 0168     	  ldr r1,[r0,#RCC_CR]
 439 0142 41F08071 	  orr r1, #1<<24 
 440 0146 0160     	  str r1,[r0,#RCC_CR]
 441              	/* wait for PLLRDY */
 442              	wait_pllrdy:
 443 0148 0168     	  ldr r1,[r0,#RCC_CR]
 444 014a 11F0007F 	  tst r1,#(1<<25)
 445 014e FBD0     	  beq wait_pllrdy 
 446              	/* select PLL as sysclock */
 447 0150 4168     	  ldr r1,[r0,#RCC_CFGR]
 448 0152 4FF6FC72 	  _MOV32 r2,0xfffffffc
 448      CFF6FF72 
 449 015a 01EA0201 	  and r1,r1,r2 
 450 015e 4FF00202 	  mov r2,#2
 451 0162 41EA0201 	  orr r1,r1,r2
 452 0166 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 453              	/* wait for SWS==2 */
 454              	wait_sws:
 455 0168 4168     	  ldr r1,[r0,#RCC_CFGR]
 456 016a 11F0080F 	  tst r1,#(2<<2)
 457 016e FBD0     	  beq wait_sws
 458              	/* now sysclock is 72 Mhz */
 459              	
 460              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 461 0170 4FF48050 	  _MOV32 r0,RCC_BASE_ADR
 461      C4F20200 
 462 0178 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 463 017c 8161     	  str	r1, [r0, #RCC_APB2ENR]
 464              	
 465              	/* configure GPIOC:13 as output for user LED */
 466 017e 4FF48050 	  _MOV32 r0,GPIOC_BASE_ADR 
 466      C4F20100 
 467 0186 4168     	  ldr r1,[r0,#GPIO_CRH]
ARM GAS  stm32eforth.s 			page 12


 468 0188 6FF47002 	  mvn r2,#(15<<20)
 469 018c 01EA0201 	  and r1,r1,r2
 470 0190 4FF4C002 	  mov r2,#(6<<20)
 471 0194 41EA0201 	  orr r1,r1,r2
 472 0198 4160     	  str r1,[r0,#GPIO_CRH]
 473              	
 474              	/* configure systicks for 1msec ticks */
 475 019a 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 475      CEF20000 
 476 01a2 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 477 01a6 4160     	  str r1,[r0,#STK_LOAD]
 478 01a8 4FF00301 	  mov r1,#3
 479 01ac 0160     	  str r1,[r0,STK_CTL]
 480 01ae 7047     	  _NEXT  
 481              	
 482              	/*******************************
 483              	  initialize UART peripheral 
 484              	********************************/
 485              		.type uart_init, %function
 486              	uart_init:
 487              	/* set GPIOA PIN 9, uart TX  */
 488 01b0 4FF40060 	  _MOV32 r0,GPIOA_BASE_ADR
 488      C4F20100 
 489 01b8 4168     	  ldr r1,[r0,#GPIO_CRH]
 490 01ba 6FF0F002 	  mvn r2,#(15<<4)
 491 01be 01EA0201 	  and r1,r1,r2
 492 01c2 4FF0A002 	  mov r2,#(0xA<<4)
 493 01c6 41EA0201 	  orr r1,r1,r2 
 494 01ca 4160     	  str r1,[r0,#GPIO_CRH]
 495 01cc 4FF46050 	  _MOV32 r0,UART 
 495      C4F20100 
 496              	/* BAUD rate */
 497 01d4 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 498 01d8 8160     	  str r1,[r0,#USART_BRR]
 499 01da 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 500 01de C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 501              	/* enable interrupt in NVIC */
 502 01e0 4FF46140 	  _MOV32 r0,NVIC_BASE_ADR
 502      CEF20000 
 503 01e8 4168     	  ldr r1,[r0,#NVIC_ISER1]
 504 01ea 41F02001 	  orr r1,#32   
 505 01ee 4160     	  str r1,[r0,#NVIC_ISER1]
 506 01f0 7047     	  bx lr 
 507              	
 508              	/* copy system to RAM */ 
 509              		.type remap, %function 
 510              	
 511              	remap:
 512              	// tranfert isr_vector to RAM at 0x20000000
 513 01f2 4FF00000 		_MOV32 r0,RAM_ADR
 513      C2F20000 
 514 01fa 81EA0101 		eor r1,r1
 515 01fe 4FF49872 		mov r2,#(isr_end-isr_vectors) 
 516 0202 51F8043B 	1:	ldr r3,[r1],#4
 517 0206 40F8043B 		str r3,[r0],#4
 518 020a 043A     		subs r2,#4
 519 020c F9D1     		bne 1b
ARM GAS  stm32eforth.s 			page 13


 520              	// set new vector table address
 521 020e 4FF46D40 		_MOV32 r0,SCB_BASE_ADR
 521      CEF20000 
 522 0216 4FF00001 		_MOV32 r1,RAM_ADR 
 522      C2F20001 
 523 021e 8160     		str r1,[r0,#SCB_VTOR]
 524              	// copy system variable and code 	
 525 0220 DFF83400 		ldr r0,remap_dest
 526 0224 0B49     		ldr r1,remap_src 
 527 0226 41F6CC72 		mov r2,#CTOP-UZERO 
 528 022a 02F10302 		add r2,r2,#3
 529 022e 22F00302 		and r2,r2,#~3 
 530 0232 51F8043B 	1:	ldr r3,[r1],#4 
 531 0236 40F8043B 		str r3,[r0],#4 
 532 023a 043A     		subs R2,#4 
 533 023c F9D1     		bne 1b
 534              	// zero end of RAM 
 535 023e 4FF4A042 		_MOV32 r2,RAM_END 
 535      C2F20002 
 536 0246 83EA0303 		eor r3,r3,r3 
 537 024a 40F8043B 	2:  str r3,[r0],#4
 538 024e 9042     		cmp r0,r2 
 539 0250 FBDB     		blt 2b 
 540 0252 7047     		_NEXT 
 541              	remap_src:
 542 0254 00000000 		.word UZERO 
 543              	remap_dest:
 544 0258 30010020 		.word RAMOFFSET 
 545              	
 546              	/********************
 547              	* Version control
 548              	*******************/
 549              	.equ VER ,	0x01	/*major release version */
 550              	.equ EXT ,	0x00	/*minor extension */
 551              	
 552              	/* Constants */
 553              	
 554              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 555              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 556              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 557              	
 558              	.equ CELLL ,	4	/*size of a cell */
 559              	.equ BASEE ,	10	/*default radix */
 560              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 561              	
 562              	.equ BKSPP ,	8	/*backspace */
 563              	.equ LF ,	10	  /*line feed */
 564              	.equ CRR ,	13	/*carriage return */
 565              	.equ ERR ,	27	/*error escape */
 566              	.equ TIC ,	39	/*tick */
 567              	
 568              	/********************************************************
 569              	* RAM memory mapping
 570              	* 	0x20000000	RAM base address
 571              	*	0x20000000  system variables	
 572              	* 	0x20000100	Forth dictionary
 573              	* 	0x2000????	top of dictionary, HERE
ARM GAS  stm32eforth.s 			page 14


 574              	* 	0x2000????	WORD buffer, HERE+16
 575              	*   0x20004E00  end of user space
 576              	* 	0x20004E80	top of data stack  R2
 577              	* 	0x20004E80	TIB terminal input buffer
 578              	* 	0x20004F80	top of return stack  R1
 579              	* 	0x20005000	top of hardware stack for interrupts R14
 580              	********************************************************/
 581              	
 582              	
 583              	/******************************************************
 584              	*  COLD start moves the following to USER variables.
 585              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 586              	******************************************************/
 587              		.section  .text, "ax" ,%progbits 
 588              		.p2align 2
 589              	
 590              	UZERO:
 591 0000 00000000 		.word 0  			/*Reserved */
 592 0004 55AA0000 		.word 0xaa55 /* SEED  */ 
 593 0008 00000000 		.word 0      /* MSEC */
 594 000c 00000000 	    .word 0     /* TIMER */
 595 0010 FFFFFFFF 		.word -1    /* >RAM */ 
 596 0014 494D4147 		.ascii "IMAG" /* signature */ 
 597 0018 041F0018 		.word HI+MAPOFFSET  /*'BOOT */
 598 001c 0A000000 		.word BASEE 	/*BASE */
 599 0020 00000000 		.word 0			/*tmp */
 600 0024 00000000 		.word 0			/*SPAN */
 601 0028 00000000 		.word 0			/*>IN */
 602 002c 00000000 		.word 0			/*#TIB */
 603 0030 804E0020 		.word TIBB	/*TIB */
 604 0034 9C100018 		.word INTER+MAPOFFSET	/*'EVAL */
 605 0038 00000000 		.word 0			/*HLD */
 606 003c 640B0000 		.word _LASTN	/*CONTEXT */
 607 0040 CC1F0000 		.word CTOP  	/* FCP end of system dictionnary */
 608 0044 CC1F0018 		.word CTOP+MAPOFFSET	/* CP end of RAM dictionary RAM */
 609 0048 640B0000 		.word _LASTN	/*LAST word in dictionary */
 610 004c 00000000 		.word 0,0			/*reserved */
 610      00000000 
 611              	ULAST:
 612 0054 00000000 		.space  RX_QUEUE_SIZE+8 /* space reserved for rx_queue,head and tail pointer.
 612      00000000 
 612      00000000 
 612      00000000 
 612      00000000 
 613              	
 614              	
 615              	/***********************************
 616              	//  Start of Forth dictionary
 617              	***********************************/
 618              	
 619 006c AFF30080 		.p2align 4
 620              	
 621              	// RANDOM ( n1 -- {0..n1-1} )
 622              	// return pseudo random number 
 623              	// REF: https://en.wikipedia.org/wiki/Xorshift
 624              	
 625              		_HEADER RAND,6,RANDOM 
ARM GAS  stm32eforth.s 			page 15


 626 0070 42F804ED 		_NEST 
 627 0074 00F0B2F9 		bl SEED 
 628 0078 00F095F8 		bl AT 
 629 007c 4FEA4534 		lsl r4,r5,#13
 630 0080 85EA0405 		eor r5,r4
 631 0084 4FEA5544 		lsr r4,r5,#17
 632 0088 85EA0405 		eor r5,r4
 633 008c 4FEA4514 		lsl r4,r5,#5
 634 0090 85EA0405 		eor r5,r4
 635 0094 00F0A6F8 		bl DUPP 
 636 0098 00F0A0F9 		bl SEED 
 637 009c 00F07DF8 		bl STORE 
 638 00a0 00F033F9 		bl ABSS
 639 00a4 00F0A1F8 		bl SWAP 
 640 00a8 00F066FA 		bl MODD 
 641 00ac 52F804FB 		_UNNEST 
 642              	
 643              	// PAUSE ( u -- ) 
 644              	// suspend execution for u milliseconds
 645              		_HEADER PAUSE,5,PAUSE 
 646 00b0 42F804ED 		_NEST 
 647 00b4 00F09CF9 		BL TIMER 
 648 00b8 00F06FF8 		BL STORE 
 649              	PAUSE_LOOP:
 650 00bc 00F098F9 		BL TIMER 
 651 00c0 00F071F8 		BL AT 
 652 00c4 00F056F8 		BL QBRAN 
 653 00c8 D4000000 		.word PAUSE_EXIT 
 654 00cc 00F05EF8 		BL BRAN 
 655 00d0 BC000000 		.word PAUSE_LOOP 
 656              	PAUSE_EXIT: 		
 657 00d4 52F804FB 		_UNNEST 
 658              	
 659              	//  ULED ( T|F -- )
 660              	// control user LED, -1 ON, 0 OFF  
 661              		_HEADER ULED,4,ULED
 662 00d8 4FF40056 		mov r6,#(1<<LED_PIN)
 663 00dc 4FF48054 		_MOV32 r4,LED_GPIO 
 663      C4F20104 
 664 00e4 2800     		movs r0,r5 
 665 00e6 51F8045B 		_POP
 666 00ea 01D0     		beq ULED_OFF 
 667 00ec 6661     		str r6,[r4,#GPIO_BRR]
 668 00ee 7047     		_NEXT 
 669              	ULED_OFF:
 670 00f0 2661     		str r6,[r4,#GPIO_BSRR]
 671 00f2 7047     		_NEXT 
 672              		
 673              	//    ?RX	 ( -- c T | F )
 674              	// 	Return input character and true, or a false if no input.
 675              		_HEADER QRX,4,"?KEY"
 676              	QKEY: 
 677 00f4 41F8045D 		_PUSH
 678 00f8 5F6E     		ldr r7,[r3,#RX_TAIL_OFS] 
 679 00fa 1E6E     		ldr r6,[r3,#RX_HEAD_OFS]
 680 00fc 96EA0705 		eors r5,r6,r7 
 681 0100 0CD0     		beq 1f
ARM GAS  stm32eforth.s 			page 16


 682 0102 03F15007 		add r7,r3,#RX_QUEUE_OFS 
 683 0106 3744     		add r7,r6 
 684 0108 3D78     		ldrb r5,[r7]
 685 010a 06F10106 		add r6,#1 
 686 010e 06F00F06 		and r6,#(RX_QUEUE_SIZE-1)
 687 0112 1E66     		str r6,[R3,#RX_HEAD_OFS]
 688 0114 41F8045D 		_PUSH 
 689 0118 4FF0FF35 		mov r5,#-1
 690 011c 7047     	1:	_NEXT 
 691 011e 00BF     		.p2align 2 
 692              	
 693              	//    TX!	 ( c -- )
 694              	// 	Send character c to the output device.
 695              		_HEADER EMIT,4,EMIT
 696              	TECHO:
 697 0120 4FF46054 		_MOV32 r4,UART 
 697      C4F20104 
 698 0128 2668     	1:	ldr	r6, [r4, #USART_SR]	
 699 012a 16F08006 		ands	r6, #0x80		//  TXE bit 
 700 012e FBD0     		beq	1b
 701 0130 2571     		strb	r5, [r4, #USART_DR]	
 702 0132 51F8045B 		_POP
 703 0136 7047     		_NEXT 
 704              		
 705              	// **************************************************************************
 706              	//  The kernel
 707              	
 708              	//    NOP	( -- )
 709              	// 	do nothing.
 710              		_HEADER NOP,3,NOP 
 711 0138 7047     		_NEXT
 712              	 
 713              	
 714              	//    doLIT	( -- w )
 715              	// 	Push an inline literal.
 716              	
 717              	// 	.word	_NOP+MAPOFFSET
 718              	// _LIT	.byte   COMPO+5
 719              	// 	.ascii "doLIT"
 720              	// 	.p2align 2 	
 721              	DOLIT:
 722 013a 41F8045D 		_PUSH				//  store R5 on data stack
 723 013e 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 724 0142 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 725 0146 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 726 014a 7047     		_NEXT
 727              	
 728              	//    EXECUTE	( ca -- )
 729              	// 	Execute the word at ca.
 730              		_HEADER EXECU,7,EXECUTE 
 731 014c 45F00104 		ORR	R4,R5,#1		//  b0=1 
 732 0150 51F8045B 		_POP
 733 0154 2047     		BX	R4
 734              	
 735              	//    next	( -- ) counter on R:
 736              	// 	Run time code for the single index loop.
 737              	// 	: next ( -- ) \ hilevel model
ARM GAS  stm32eforth.s 			page 17


 738              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 739              	
 740              	// 	.word	_EXECU+MAPOFFSET
 741              	// _DONXT	.byte   COMPO+4
 742              	// 	.ascii "next"
 743              	// 	.p2align 2 	
 744              	DONXT:
 745 0156 1468     		LDR	R4,[R2]   // ( -- u )  
 746 0158 24B9     		CBNZ R4,NEXT1 
 747              		/* loop done */
 748 015a 02F10402 		ADD	R2,R2,#4 // drop counter 
 749 015e 0EF1040E 		ADD	LR,LR,#4 // skip after loop address 
 750 0162 7047     		_NEXT
 751              	NEXT1:
 752              		/* decrement loop counter */
 753 0164 A4F10104 		SUB	R4,R4,#1
 754 0168 1460     		STR	R4,[R2]
 755 016a 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 756 016e 4EF0010E 		ORR	LR,LR,#1 // begining of loop
 757 0172 7047     		_NEXT
 758              	
 759              	//    ?branch	( f -- )
 760              	// 	Branch if flag is zero.
 761              	
 762              	// 	.word	_DONXT+MAPOFFSET
 763              	// _QBRAN	.byte   COMPO+7
 764              	// 	.ascii "?branch"
 765              	// 	.p2align 2 	
 766              	QBRAN:
 767 0174 2C00     		MOVS	R4,R5
 768 0176 51F8045B 		_POP
 769 017a 04D1     		BNE	QBRAN1
 770 017c 5EF801EC 		LDR	LR,[LR,#-1]
 771 0180 4EF0010E 		ORR LR,LR,#1
 772 0184 7047     		_NEXT
 773              	QBRAN1:
 774 0186 0EF1040E 	 	ADD	LR,LR,#4
 775 018a 7047     		_NEXT
 776              	
 777              	//    branch	( -- )
 778              	// 	Branch to an inline address.
 779              	
 780              	// 	.word	_QBRAN+MAPOFFSET
 781              	// _BRAN	.byte   COMPO+6
 782              	// 	.ascii "branch"
 783              	// 	.p2align 2 	
 784              	BRAN:
 785 018c 5EF801EC 		LDR	LR,[LR,#-1]
 786 0190 4EF0010E 		ORR	LR,LR,#1
 787 0194 7047     		_NEXT
 788              	
 789              	//    EXIT	(  -- )
 790              	// 	Exit the currently executing command.
 791              		_HEADER EXIT,4,EXIT 
 792 0196 52F804FB 		_UNNEST 
 793              	
 794              	//    !	   ( w a -- )
ARM GAS  stm32eforth.s 			page 18


 795              	// 	Pop the data stack to memory.
 796              		_HEADER STORE,1,"!"
 797 019a 51F8044B 		LDR	R4,[R1],#4
 798 019e 2C60     		STR	R4,[R5]
 799 01a0 51F8045B 		_POP
 800 01a4 7047     		_NEXT
 801              	
 802              	//    @	   ( a -- w )
 803              	// 	Push memory location to the data stack.
 804              		_HEADER AT,1,"@"
 805 01a6 2D68     		LDR	R5,[R5]
 806 01a8 7047     		_NEXT
 807              	
 808              	//    C!	  ( c b -- )
 809              	// 	Pop the data stack to byte memory.
 810              		_HEADER CSTOR,2,"C!"
 811 01aa 51F8044B 		LDR	R4,[R1],#4
 812 01ae 2C70     		STRB	R4,[R5]
 813 01b0 51F8045B 		_POP
 814 01b4 7047     		_NEXT
 815              	
 816              	//    C@	  ( b -- c )
 817              	// 	Push byte memory location to the data stack.
 818              		_HEADER CAT,2,"C@"
 819 01b6 2D78     		LDRB	R5,[R5]
 820 01b8 7047     		_NEXT
 821              	
 822              	//    R>	  ( -- w )
 823              	// 	Pop the return stack to the data stack.
 824              		_HEADER RFROM,2,"R>"
 825 01ba 41F8045D 		_PUSH
 826 01be 52F8045B 		LDR	R5,[R2],#4
 827 01c2 7047     		_NEXT
 828              	
 829              	//    R@	  ( -- w )
 830              	// 	Copy top of return stack to the data stack.
 831              		_HEADER RAT,2,"R@"
 832 01c4 41F8045D 		_PUSH
 833 01c8 1568     		LDR	R5,[R2]
 834 01ca 7047     		_NEXT
 835              	
 836              	//    >R	  ( w -- )
 837              	// 	Push the data stack to the return stack.
 838              		_HEADER TOR,2+COMPO,">R"
 839 01cc 42F8045D 		STR	R5,[R2,#-4]!
 840 01d0 51F8045B 		_POP
 841 01d4 7047     		_NEXT  
 842              	
 843              	//    SP@	 ( -- a )
 844              	// 	Push the current data stack pointer.
 845              		_HEADER SPAT,3,"SP@"
 846 01d6 41F8045D 		_PUSH
 847 01da 0D46     		MOV	R5,R1
 848 01dc 7047     		_NEXT
 849              	
 850              	//    DROP	( w -- )
 851              	// 	Discard top stack item.
ARM GAS  stm32eforth.s 			page 19


 852              		_HEADER DROP,4,DROP
 853 01de 51F8045B 		_POP
 854 01e2 7047     		_NEXT
 855              	
 856              	//    DUP	 ( w -- w w )
 857              	// 	Duplicate the top stack item.
 858              		_HEADER DUPP,3,"DUP"
 859 01e4 41F8045D 		_PUSH
 860 01e8 7047     		_NEXT
 861              	
 862              	//    SWAP	( w1 w2 -- w2 w1 )
 863              	// 	Exchange top two stack items.
 864              		_HEADER SWAP,4,"SWAP"
 865 01ea 0C68     		LDR	R4,[R1]
 866 01ec 0D60     		STR	R5,[R1]
 867 01ee 2546     		MOV	R5,R4
 868 01f0 7047     		_NEXT
 869              	
 870              	//    OVER	( w1 w2 -- w1 w2 w1 )
 871              	// 	Copy second stack item to top.
 872              		_HEADER OVER,4,"OVER"
 873 01f2 41F8045D 		_PUSH
 874 01f6 4D68     		LDR	R5,[R1,#4]
 875 01f8 7047     		_NEXT
 876              	
 877              	//    0<	  ( n -- t )
 878              	// 	Return true if n is negative.
 879              		_HEADER ZLESS,2,"0<"
 880 01fa 4FF00004 		MOV	R4,#0
 881 01fe 04EB2505 		ADD	R5,R4,R5,ASR #32
 882 0202 7047     		_NEXT
 883              	
 884              	//    AND	 ( w w -- w )
 885              	// 	Bitwise AND.
 886              		_HEADER ANDD,3,"AND"
 887 0204 51F8044B 		LDR	R4,[R1],#4
 888 0208 05EA0405 		AND	R5,R4
 889 020c 7047     		_NEXT
 890              	
 891              	//    OR	  ( w w -- w )
 892              	// 	Bitwise inclusive OR.
 893              		_HEADER ORR,2,"OR"
 894 020e 51F8044B 		LDR	R4,[R1],#4
 895 0212 45EA0405 		ORR	R5,R4
 896 0216 7047     		_NEXT
 897              	
 898              	//    XOR	 ( w w -- w )
 899              	// 	Bitwise exclusive OR.
 900              		_HEADER XORR,3,"XOR"
 901 0218 51F8044B 		LDR	R4,[R1],#4
 902 021c 85EA0405 		EOR	R5,R4
 903 0220 7047     		_NEXT
 904              	
 905              	//    UM+	 ( w w -- w cy )
 906              	// 	Add two numbers, return the sum and carry flag.
 907              		_HEADER UPLUS,3,"UM+"
 908 0222 0C68     		LDR	R4,[R1]
ARM GAS  stm32eforth.s 			page 20


 909 0224 6419     		ADDS	R4,R4,R5
 910 0226 4FF00005 		MOV	R5,#0
 911 022a 45F10005 		ADC	R5,R5,#0
 912 022e 0C60     		STR	R4,[R1]
 913 0230 7047     		_NEXT
 914              	
 915              	//    RSHIFT	 ( w # -- w )
 916              	// 	arithmetic Right shift # bits.
 917              		_HEADER RSHIFT,6,"RSHIFT"
 918 0232 51F8044B 		LDR	R4,[R1],#4
 919 0236 44FA05F5 		MOV	R5,R4,ASR R5
 920 023a 7047     		_NEXT
 921              	
 922              	//    LSHIFT	 ( w # -- w )
 923              	// 	Right shift # bits.
 924              		_HEADER LSHIFT,6,"LSHIFT"
 925 023c 51F8044B 		LDR	R4,[R1],#4
 926 0240 04FA05F5 		MOV	R5,R4,LSL R5
 927 0244 7047     		_NEXT
 928              	
 929              	//    +	 ( w w -- w )
 930              	// 	Add.
 931              		_HEADER PLUS,1,"+"
 932 0246 51F8044B 		LDR	R4,[R1],#4
 933 024a 2544     		ADD	R5,R5,R4
 934 024c 7047     		_NEXT
 935              	
 936              	//    -	 ( w w -- w )
 937              	// 	Subtract.
 938              		_HEADER SUBB,1,"-"
 939 024e 51F8044B 		LDR	R4,[R1],#4
 940 0252 C5EB0405 		RSB	R5,R5,R4
 941 0256 7047     		_NEXT
 942              	
 943              	//    *	 ( w w -- w )
 944              	// 	Multiply.
 945              		_HEADER STAR,1,"*"
 946 0258 51F8044B 		LDR	R4,[R1],#4
 947 025c 04FB05F5 		MUL	R5,R4,R5
 948 0260 7047     		_NEXT
 949              	
 950              	//    UM*	 ( w w -- ud )
 951              	// 	Unsigned multiply.
 952              		_HEADER UMSTA,3,"UM*"
 953 0262 0C68     		LDR	R4,[R1]
 954 0264 A5FB0467 		UMULL	R6,R7,R5,R4
 955 0268 0E60     		STR	R6,[R1]
 956 026a 3D46     		MOV	R5,R7
 957 026c 7047     		_NEXT
 958              	
 959              	//    M*	 ( w w -- d )
 960              	// 	signed multiply.
 961              		_HEADER MSTAR,2,"M*"
 962 026e 0C68     		LDR	R4,[R1]
 963 0270 85FB0467 		SMULL	R6,R7,R5,R4
 964 0274 0E60     		STR	R6,[R1]
 965 0276 3D46     		MOV	R5,R7
ARM GAS  stm32eforth.s 			page 21


 966 0278 7047     		_NEXT
 967              	
 968              	//    1+	 ( w -- w+1 )
 969              	// 	Add 1.
 970              		_HEADER ONEP,2,"1+"
 971 027a 05F10105 		ADD	R5,R5,#1
 972 027e 7047     		_NEXT
 973              	
 974              	//    1-	 ( w -- w-1 )
 975              	// 	Subtract 1.
 976              		_HEADER ONEM,2,"1-"
 977 0280 A5F10105 		SUB	R5,R5,#1
 978 0284 7047     		_NEXT
 979              	
 980              	//    2+	 ( w -- w+2 )
 981              	// 	Add 1.
 982              		_HEADER TWOP,2,"2+"
 983 0286 05F10205 		ADD	R5,R5,#2
 984 028a 7047     		_NEXT
 985              	
 986              	//    2-	 ( w -- w-2 )
 987              	// 	Subtract 2.
 988              		_HEADER TWOM,2,"2-"
 989 028c A5F10205 		SUB	R5,R5,#2
 990 0290 7047     		_NEXT
 991              	
 992              	//    CELL+	( w -- w+4 )
 993              	// 	Add CELLL.
 994              		_HEADER CELLP,5,"CELL+"
 995 0292 05F10405 		ADD	R5,R5,#CELLL
 996 0296 7047     		_NEXT
 997              	
 998              	//    CELL-	( w -- w-4 )
 999              	// 	Subtract CELLL.
 1000              		_HEADER CELLM,5,"CELL-"
 1001 0298 A5F10405 		SUB	R5,R5,#CELLL
 1002 029c 7047     		_NEXT
 1003              	 
 1004              	//    BL	( -- 32 )
 1005              	// 	Blank (ASCII space).
 1006              		_HEADER BLANK,2,"BL"
 1007 029e 41F8045D 		_PUSH
 1008 02a2 4FF02005 		MOV	R5,#32
 1009 02a6 7047     		_NEXT
 1010              	
 1011              	//    CELLS	( w -- w*4 )
 1012              	// 	Multiply 4.
 1013              		_HEADER CELLS,5,"CELLS"
 1014 02a8 4FEA8505 		MOV	R5,R5,LSL#2
 1015 02ac 7047     		_NEXT
 1016              	
 1017              	//    CELL/	( w -- w/4 )
 1018              	// 	Divide by 4.
 1019              		_HEADER CELLSL,5,"CELL/"
 1020 02ae 4FEAA505 		MOV	R5,R5,ASR#2
 1021 02b2 7047     		_NEXT
 1022              	
ARM GAS  stm32eforth.s 			page 22


 1023              	//    2*	( w -- w*2 )
 1024              	// 	Multiply 2.
 1025              		_HEADER TWOST,2,"2*"
 1026 02b4 4FEA4505 		MOV	R5,R5,LSL#1
 1027 02b8 7047     		_NEXT
 1028              	
 1029              	//    2/	( w -- w/2 )
 1030              	// 	Divide by 2.
 1031              		_HEADER TWOSL,2,"2/"
 1032 02ba 4FEA6505 		MOV	R5,R5,ASR#1
 1033 02be 7047     		_NEXT
 1034              	
 1035              	//    ?DUP	( w -- w w | 0 )
 1036              	// 	Conditional duplicate.
 1037              		_HEADER QDUP,4,"?DUP"
 1038 02c0 2C00     		MOVS	R4,R5
 1039 02c2 18BF     		IT NE 
 1040 02c4 41F8045D 	    STRNE	R5,[R1,#-4]!
 1041 02c8 7047     		_NEXT
 1042              	
 1043              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1044              	// 	Rotate top 3 items.
 1045              		_HEADER ROT,3,"ROT"
 1046 02ca 0C68     		LDR	R4,[R1]  // r4=w2 
 1047 02cc 0D60     		STR	R5,[R1]  // w3 replace w2 
 1048 02ce 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1049 02d0 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1050 02d2 7047     		_NEXT
 1051              	
 1052              	//    2DROP	( w1 w2 -- )
 1053              	// 	Drop top 2 items.
 1054              		_HEADER DDROP,5,"2DROP"
 1055 02d4 51F8045B 		_POP
 1056 02d8 51F8045B 		_POP
 1057 02dc 7047     		_NEXT
 1058              	
 1059              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1060              	// 	Duplicate top 2 items.
 1061              		_HEADER DDUP,4,"2DUP"
 1062 02de 0C68     		LDR	R4,[R1] // r4=w1
 1063 02e0 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1064 02e4 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1065 02e8 7047     		_NEXT
 1066              	
 1067              	//    D+	( d1 d2 -- d3 )
 1068              	// 	Add top 2 double numbers.
 1069              		_HEADER DPLUS,2,"D+"
 1070 02ea 51F8044B 		LDR	R4,[R1],#4
 1071 02ee 51F8046B 		LDR	R6,[R1],#4
 1072 02f2 0F68     		LDR	R7,[R1]
 1073 02f4 E419     		ADDS	R4,R4,R7
 1074 02f6 0C60     		STR	R4,[R1]
 1075 02f8 45EB0605 		ADC	R5,R5,R6
 1076 02fc 7047     		_NEXT
 1077              	
 1078              	//    NOT	 ( w -- !w )
 1079              	// 	1"s complement.
ARM GAS  stm32eforth.s 			page 23


 1080              		_HEADER INVER,3,"NOT"
 1081 02fe 6FEA0505 		MVN	R5,R5
 1082 0302 7047     		_NEXT
 1083              	
 1084              	//    NEGATE	( w -- -w )
 1085              	// 	2's complement.
 1086              		_HEADER NEGAT,6,"NEGATE"
 1087 0304 C5F10005 		RSB	R5,R5,#0
 1088 0308 7047     		_NEXT
 1089              	
 1090              	//    ABS	 ( w -- |w| )
 1091              	// 	Absolute.
 1092              		_HEADER ABSS,3,"ABS"
 1093 030a 15F0004F 		TST	R5,#0x80000000
 1094 030e 18BF     		IT NE
 1095 0310 6D42     	    RSBNE   R5,R5,#0
 1096 0312 7047     		_NEXT
 1097              	
 1098              	//  0= ( w -- f )
 1099              	// TOS==0?
 1100              		_HEADER ZEQUAL,2,"0="
 1101 0314 15B9     		cbnz r5,1f
 1102 0316 4FF0FF35 		mov r5,#-1
 1103 031a 7047     		_NEXT 
 1104 031c 85EA0505 	1:  eor r5,r5,r5  
 1105 0320 7047     		_NEXT 	
 1106              	
 1107              	//    =	 ( w w -- t )
 1108              	// 	Equal?
 1109              		_HEADER EQUAL,1,"="
 1110 0322 51F8044B 		LDR	R4,[R1],#4
 1111 0326 A542     		CMP	R5,R4
 1112 0328 0CBF     		ITE EQ 
 1113 032a 6FF00005 	    MVNEQ	R5,#0
 1114 032e 0025     		MOVNE	R5,#0
 1115 0330 7047     		_NEXT
 1116              	
 1117              	//    U<	 ( w w -- t )
 1118              	// 	Unsigned equal?
 1119              		_HEADER ULESS,2,"U<"
 1120 0332 51F8044B 		LDR	R4,[R1],#4
 1121 0336 AC42     		CMP	R4,R5
 1122 0338 34BF     		ITE CC 
 1123 033a 6FF00005 		MVNCC	R5,#0
 1124 033e 0025     		MOVCS	R5,#0
 1125 0340 7047     		_NEXT
 1126              	
 1127              	//    <	( w w -- t )
 1128              	// 	Less?
 1129              		_HEADER LESS,1,"<"
 1130 0342 51F8044B 		LDR	R4,[R1],#4
 1131 0346 AC42     		CMP	R4,R5
 1132 0348 B4BF     	    ITE LT
 1133 034a 6FF00005 		MVNLT	R5,#0
 1134 034e 0025     		MOVGE	R5,#0
 1135 0350 7047     		_NEXT
 1136              	
ARM GAS  stm32eforth.s 			page 24


 1137              	//    >	( w w -- t )
 1138              	// 	greater?
 1139              		_HEADER GREAT,1,">"
 1140 0352 51F8044B 		LDR	R4,[R1],#4
 1141 0356 AC42     		CMP	R4,R5
 1142 0358 CCBF     		ITE GT
 1143 035a 6FF00005 	    MVNGT	R5,#0
 1144 035e 0025     		MOVLE	R5,#0
 1145 0360 7047     		_NEXT
 1146              	
 1147              	//    MAX	 ( w w -- max )
 1148              	// 	Leave maximum.
 1149              		_HEADER MAX,3,"MAX"
 1150 0362 51F8044B 		LDR	R4,[R1],#4
 1151 0366 AC42     		CMP	R4,R5
 1152 0368 C8BF     		IT GT 
 1153 036a 2546     		MOVGT	R5,R4
 1154 036c 7047     		_NEXT
 1155              	
 1156              	//    MIN	 ( w w -- min )
 1157              	// 	Leave minimum.
 1158              		_HEADER MIN,3,"MIN"
 1159 036e 51F8044B 		LDR	R4,[R1],#4
 1160 0372 AC42     		CMP	R4,R5
 1161 0374 B8BF     		IT LT
 1162 0376 2546     		MOVLT	R5,R4
 1163 0378 7047     		_NEXT
 1164              	
 1165              	//    +!	 ( w a -- )
 1166              	// 	Add to memory.
 1167              		_HEADER PSTOR,2,"+!"
 1168 037a 51F8044B 		LDR	R4,[R1],#4
 1169 037e 2E68     		LDR	R6,[R5]
 1170 0380 2644     		ADD	R6,R6,R4
 1171 0382 2E60     		STR	R6,[R5]
 1172 0384 51F8045B 		_POP
 1173 0388 7047     		_NEXT
 1174              	
 1175              	//    2!	 ( d a -- )
 1176              	// 	Store double number.
 1177              		_HEADER DSTOR,2,"2!"
 1178 038a 51F8044B 		LDR	R4,[R1],#4
 1179 038e 51F8046B 		LDR	R6,[R1],#4
 1180 0392 45F8044B 		STR	R4,[R5],#4
 1181 0396 2E60     		STR	R6,[R5]
 1182 0398 51F8045B 		_POP
 1183 039c 7047     		_NEXT
 1184              	
 1185              	//    2@	 ( a -- d )
 1186              	// 	Fetch double number.
 1187              		_HEADER DAT,2,"2@"
 1188 039e 6C68     		LDR	R4,[R5,#4]
 1189 03a0 41F8044D 		STR	R4,[R1,#-4]!
 1190 03a4 2D68     		LDR	R5,[R5]
 1191 03a6 7047     		_NEXT
 1192              	
 1193              	//    COUNT	( b -- b+1 c )
ARM GAS  stm32eforth.s 			page 25


 1194              	// 	Fetch length of string.
 1195              		_HEADER COUNT,5,"COUNT"
 1196 03a8 15F8014B 		LDRB	R4,[R5],#1
 1197 03ac 41F8045D 		_PUSH
 1198 03b0 2546     		MOV	R5,R4
 1199 03b2 7047     		_NEXT
 1200              	
 1201              	//    DNEGATE	( d -- -d )
 1202              	// 	Negate double number.
 1203              		_HEADER DNEGA,7,"DNEGATE"
 1204 03b4 0C68     		LDR	R4,[R1]
 1205 03b6 A6EB0606 		SUB	R6,R6,R6
 1206 03ba 341B     		SUBS R4,R6,R4
 1207 03bc 66EB0505 		SBC	R5,R6,R5
 1208 03c0 0C60     		STR	R4,[R1]
 1209 03c2 7047     		_NEXT
 1210              	
 1211              	// **************************************************************************
 1212              	//  System and user variables
 1213              	
 1214              	//    doVAR	( -- a )
 1215              	// 	Run time routine for VARIABLE and CREATE.
 1216              	
 1217              	// 	.word	_DNEGA+MAPOFFSET
 1218              	// _DOVAR	.byte  COMPO+5
 1219              	// 	.ascii "doVAR"
 1220              	// 	.p2align 2 	
 1221              	DOVAR:
 1222 03c4 41F8045D 		_PUSH
 1223 03c8 AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
 1224 03cc 52F804FB 		_UNNEST
 1225              	
 1226              	//    doCON	( -- a ) 
 1227              	// 	Run time routine for CONSTANT.
 1228              	
 1229              	// 	.word	_DOVAR+MAPOFFSET
 1230              	// _DOCON	.byte  COMPO+5
 1231              	// 	.ascii "doCON"
 1232              	// 	.p2align 2 	
 1233              	DOCON:
 1234 03d0 41F8045D 		_PUSH
 1235 03d4 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1236 03d8 52F804FB 		_UNNEST
 1237              	
 1238              	/***********************
 1239              	  system variables 
 1240              	***********************/
 1241              	
 1242              	 // SEED ( -- a)
 1243              	 // return PRNG seed address 
 1244              		_HEADER SEED,4,"SEED"
 1245 03dc 41F8045D 		_PUSH 
 1246 03e0 03F10405 		ADD R5,R3,#SEED_OFS
 1247 03e4 7047     		_NEXT 	
 1248              	
 1249              	//  MSEC ( -- a)
 1250              	// return address of milliseconds counter
ARM GAS  stm32eforth.s 			page 26


 1251              		_HEADER MSEC,4,"MSEC"
 1252 03e6 41F8045D 	  _PUSH
 1253 03ea 03F10805 	  ADD R5,R3,#TICKS_OFS
 1254 03ee 7047     	  _NEXT 
 1255              	
 1256              	// TIMER ( -- a )
 1257              	// count down timer 
 1258              		_HEADER TIMER,5,"TIMER"
 1259 03f0 41F8045D 	  _PUSH 
 1260 03f4 03F10C05 	  ADD R5,R3,#TIMER_OFS
 1261 03f8 7047     	  _NEXT
 1262              	
 1263              	//    'BOOT	 ( -- a )
 1264              	// 	Application.
 1265              		_HEADER TBOOT,5,"'BOOT"
 1266 03fa 41F8045D 		_PUSH
 1267 03fe 03F11805 		ADD	R5,R3,#BOOT_OFS 
 1268 0402 7047     		_NEXT
 1269              	
 1270              	//    BASE	( -- a )
 1271              	// 	Storage of the radix base for numeric I/O.
 1272              		_HEADER BASE,4,"BASE"
 1273 0404 41F8045D 		_PUSH
 1274 0408 03F11C05 		ADD	R5,R3,#BASE_OFS
 1275 040c 7047     		_NEXT
 1276              	
 1277              	//    tmp	 ( -- a )
 1278              	// 	A temporary storage location used in parse and find.
 1279              	
 1280              	// 	.word	_BASE+MAPOFFSET
 1281              	// _TEMP	.byte   COMPO+3
 1282              	// 	.ascii "tmp"
 1283              	// 	.p2align 2 	
 1284              	TEMP:
 1285 040e 41F8045D 		_PUSH
 1286 0412 03F12005 		ADD	R5,R3,#TMP_OFS
 1287 0416 7047     		_NEXT
 1288              	
 1289              	//    SPAN	( -- a )
 1290              	// 	Hold character count received by EXPECT.
 1291              		_HEADER SPAN,4,"SPAN"
 1292 0418 41F8045D 		_PUSH
 1293 041c 03F12405 		ADD	R5,R3,#SPAN_OFS
 1294 0420 7047     		_NEXT
 1295              	
 1296              	//    >IN	 ( -- a )
 1297              	// 	Hold the character pointer while parsing input stream.
 1298              		_HEADER INN,3,">IN"
 1299 0422 41F8045D 		_PUSH
 1300 0426 03F12805 		ADD	R5,R3,#TOIN_OFS
 1301 042a 7047     		_NEXT
 1302              	
 1303              	//    #TIB	( -- a )
 1304              	// 	Hold the current count and address of the terminal input buffer.
 1305              		_HEADER NTIB,4,"#TIB"
 1306 042c 41F8045D 		_PUSH
 1307 0430 03F12C05 		ADD	R5,R3,#NTIB_OFS
ARM GAS  stm32eforth.s 			page 27


 1308 0434 7047     		_NEXT
 1309              	
 1310              	//    'EVAL	( -- a )
 1311              	// 	Execution vector of EVAL.
 1312              		_HEADER TEVAL,5,"'EVAL"
 1313 0436 41F8045D 		_PUSH
 1314 043a 03F13405 		ADD	R5,R3,#EVAL_OFS
 1315 043e 7047     		_NEXT
 1316              	
 1317              	//    HLD	 ( -- a )
 1318              	// 	Hold a pointer in building a numeric output string.
 1319              		_HEADER HLD,3,"HLD"
 1320 0440 41F8045D 		_PUSH
 1321 0444 03F13805 		ADD	R5,R3,#HLD_OFS
 1322 0448 7047     		_NEXT
 1323              	
 1324              	//    CONTEXT	( -- a )
 1325              	// 	A area to specify vocabulary search order.
 1326              		_HEADER CNTXT,7,"CONTEXT"
 1327              	CRRNT:
 1328 044a 41F8045D 		_PUSH
 1329 044e 03F13C05 		ADD	R5,R3,#CTXT_OFS
 1330 0452 7047     		_NEXT
 1331              	
 1332              	//    CP	( -- a )
 1333              	// 	Point to top name in RAM vocabulary.
 1334              		_HEADER CPP,2,"CP"
 1335 0454 41F8045D 		_PUSH
 1336 0458 03F14405 		ADD	R5,R3,#USER_CTOP_OFS
 1337 045c 7047     		_NEXT
 1338              	
 1339              	//   FCP ( -- a )
 1340              	//  Point ot top of Forth system dictionary
 1341              		_HEADER FCP,3,"FCP"
 1342 045e 41F8045D 		_PUSH 
 1343 0462 03F14005 		ADD R5,R3,#FORTH_CTOP_OFS 
 1344 0466 7047     		_NEXT 
 1345              	
 1346              	//    LAST	( -- a )
 1347              	// 	Point to the last name in the name dictionary.
 1348              		_HEADER LAST,4,"LAST"
 1349 0468 41F8045D 		_PUSH
 1350 046c 03F14805 		ADD	R5,R3,#LASTN_OFS
 1351 0470 7047     		_NEXT
 1352              	
 1353              	/***********************
 1354              		system constants 
 1355              	***********************/
 1356              	
 1357              	//	USER_BEGIN ( -- a )
 1358              	//  where user area begin in RAM
 1359              		_HEADER USER_BEGIN,10,"USER_BEGIN"
 1360 0472 41F8045D 		_PUSH 
 1361 0476 DFF80450 		ldr r5,USR_BGN_ADR 
 1362 047a 7047     		_NEXT 
 1363              	USR_BGN_ADR:
 1364 047c CC1F0018 	.word CTOP+MAPOFFSET 
ARM GAS  stm32eforth.s 			page 28


 1365              	
 1366              	//  USER_END ( -- a )
 1367              	//  where user area end in RAM 
 1368              		_HEADER USER_END,8,"USER_END"
 1369 0480 41F8045D 		_PUSH 
 1370 0484 4FF49C45 		_MOV32 R5,DEND 
 1370      C2F20005 
 1371 048c 7047     		_NEXT 
 1372              	
 1373              	//  IMG_ADR ( -- a )
 1374              	//  where user image is saved in FLASH
 1375              		_HEADER IMG_ADR,7,"IMG_ADR"
 1376 048e 41F8045D 		_PUSH
 1377 0492 DFF80450 		ldr r5,USR_IMG_ADR   
 1378 0496 7047     		_NEXT 
 1379              	USR_IMG_ADR:
 1380 0498 00000000 		.word USER_SPACE 
 1381              	
 1382              	//  IMG_SIGN ( -- a )
 1383              	// image signature 
 1384              		_HEADER IMG_SIGN,8,"IMG_SIGN"
 1385 049c 41F8045D 		_PUSH 
 1386 04a0 03F11405 		ADD r5,r3,#IMG_SIGN_OFS 
 1387 04a4 7047     		_NEXT 
 1388              	
 1389              	/* *********************
 1390              	  Common functions
 1391              	***********************/
 1392              	
 1393              	//    WITHIN	( u ul uh -- t )
 1394              	// 	Return true if u is within the range of ul and uh.
 1395              		_HEADER WITHI,6,"WITHIN"
 1396 04a6 42F804ED 		_NEST
 1397 04aa FFF7A2FE 		BL	OVER
 1398 04ae FFF7CEFE 		BL	SUBB
 1399 04b2 FFF78BFE 		BL	TOR
 1400 04b6 FFF7CAFE 		BL	SUBB
 1401 04ba FFF77EFE 		BL	RFROM
 1402 04be FFF738FF 		BL	ULESS
 1403 04c2 52F804FB 		_UNNEST
 1404              	
 1405              	//  Divide
 1406              	
 1407              	//    UM/MOD	( udl udh u -- ur uq )
 1408              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1409              		_HEADER UMMOD,6,"UM/MOD"
 1410 04c6 4FF00107 		MOV	R7,#1
 1411 04ca 51F8044B 		LDR	R4,[R1],#4
 1412 04ce 0E68     		LDR	R6,[R1]
 1413              	UMMOD0:
 1414 04d0 B619     		ADDS	R6,R6,R6
 1415 04d2 6441     		ADCS	R4,R4,R4
 1416 04d4 04D3     		BCC	UMMOD1
 1417 04d6 A4EB0504 		SUB	R4,R4,R5
 1418 04da 06F10106 		ADD	R6,R6,#1
 1419 04de 04E0     		B UMMOD2
 1420              	UMMOD1:
ARM GAS  stm32eforth.s 			page 29


 1421 04e0 641B     		SUBS	R4,R4,R5 
 1422 04e2 28BF     		IT CS 
 1423 04e4 0136     		ADDCS	R6,R6,#1
 1424 04e6 00D2     		BCS	UMMOD2
 1425 04e8 2C44     		ADD	R4,R4,R5
 1426              	UMMOD2:
 1427 04ea FF19     		ADDS	R7,R7,R7
 1428 04ec F0D3     		BCC	UMMOD0
 1429 04ee 3546     		MOV	R5,R6
 1430 04f0 0C60     		STR	R4,[R1]
 1431 04f2 7047     		_NEXT
 1432              	
 1433              	//    M/MOD	( d n -- r q )
 1434              	// 	Signed floored divide of double by single. Return mod and quotient.
 1435              		_HEADER MSMOD,5,"M/MOD"
 1436 04f4 42F804ED 		_NEST
 1437 04f8 FFF774FE 		BL	DUPP
 1438 04fc FFF77DFE 		BL	ZLESS
 1439 0500 FFF770FE 		BL	DUPP
 1440 0504 FFF762FE 		BL	TOR
 1441 0508 FFF734FE 		BL	QBRAN
 1442 050c 20050018 		.word	MMOD1+MAPOFFSET
 1443 0510 FFF7F8FE 		BL	NEGAT
 1444 0514 FFF75AFE 		BL	TOR
 1445 0518 FFF74CFF 		BL	DNEGA
 1446 051c FFF74DFE 		BL	RFROM
 1447              	MMOD1:
 1448 0520 FFF754FE 	  BL	TOR
 1449 0524 FFF75EFE 		BL	DUPP
 1450 0528 FFF767FE 		BL	ZLESS
 1451 052c FFF722FE 		BL	QBRAN
 1452 0530 3C050018 		.word	MMOD2+MAPOFFSET
 1453 0534 FFF746FE 		BL	RAT
 1454 0538 FFF785FE 		BL	PLUS
 1455              	MMOD2:
 1456 053c FFF73DFE 	  BL	RFROM
 1457 0540 FFF7C1FF 		BL	UMMOD
 1458 0544 FFF739FE 		BL	RFROM
 1459 0548 FFF714FE 		BL	QBRAN
 1460 054c 5C050018 		.word	MMOD3+MAPOFFSET
 1461 0550 FFF74BFE 		BL	SWAP
 1462 0554 FFF7D6FE 		BL	NEGAT
 1463 0558 FFF747FE 		BL	SWAP
 1464              	MMOD3:   
 1465 055c 52F804FB 		_UNNEST
 1466              	
 1467              	//    /MOD	( n n -- r q )
 1468              	// 	Signed divide. Return mod and quotient.
 1469              		_HEADER SLMOD,4,"/MOD"
 1470 0560 42F804ED 		_NEST
 1471 0564 FFF745FE 		BL	OVER
 1472 0568 FFF747FE 		BL	ZLESS
 1473 056c FFF73DFE 		BL	SWAP
 1474 0570 FFF7C0FF 		BL	MSMOD
 1475 0574 52F804FB 		_UNNEST
 1476              	
 1477              	//    MOD	 ( n n -- r )
ARM GAS  stm32eforth.s 			page 30


 1478              	// 	Signed divide. Return mod only.
 1479              		_HEADER MODD,3,"MODD"
 1480 0578 42F804ED 		_NEST
 1481 057c FFF7F0FF 		BL	SLMOD
 1482 0580 FFF72DFE 		BL	DROP
 1483 0584 52F804FB 		_UNNEST
 1484              	
 1485              	//    /	   ( n n -- q )
 1486              	// 	Signed divide. Return quotient only.
 1487              		_HEADER SLASH,1,"/"
 1488 0588 42F804ED 		_NEST
 1489 058c FFF7E8FF 		BL	SLMOD
 1490 0590 FFF72BFE 		BL	SWAP
 1491 0594 FFF723FE 		BL	DROP
 1492 0598 52F804FB 		_UNNEST
 1493              	
 1494              	//    */MOD	( n1 n2 n3 -- r q )
 1495              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1496              		_HEADER SSMOD,5,"*/MOD"
 1497 059c 42F804ED 		_NEST
 1498 05a0 FFF714FE 		BL	TOR
 1499 05a4 FFF763FE 		BL	MSTAR
 1500 05a8 FFF707FE 		BL	RFROM
 1501 05ac FFF7A2FF 		BL	MSMOD
 1502 05b0 52F804FB 		_UNNEST
 1503              	
 1504              	//    */	  ( n1 n2 n3 -- q )
 1505              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1506              		_HEADER STASL,2,"*/"
 1507 05b4 42F804ED 		_NEST
 1508 05b8 FFF7F0FF 		BL	SSMOD
 1509 05bc FFF715FE 		BL	SWAP
 1510 05c0 FFF70DFE 		BL	DROP
 1511 05c4 52F804FB 		_UNNEST
 1512              	
 1513              	// **************************************************************************
 1514              	//  Miscellaneous
 1515              	
 1516              	//    ALIGNED	( b -- a )
 1517              	// 	Align address to the cell boundary.
 1518              		_HEADER ALGND,7,"ALIGNED"
 1519 05c8 05F10305 		ADD	R5,R5,#3
 1520 05cc 6FF00304 		MVN	R4,#3
 1521 05d0 05EA0405 		AND	R5,R5,R4
 1522 05d4 7047     		_NEXT
 1523              	
 1524              	//    >CHAR	( c -- c )
 1525              	// 	Filter non-printing characters.
 1526              		_HEADER TCHAR,5,">CHAR"
 1527 05d6 42F804ED 		_NEST
 1528 05da FFF7AEFD 		_DOLIT
 1529 05de 7F000000 		.word	0x7F
 1530 05e2 FFF70FFE 		BL	ANDD
 1531 05e6 FFF7FDFD 		BL	DUPP	// mask msb
 1532 05ea FFF758FE 		BL	BLANK
 1533 05ee FFF7A4FD 		_DOLIT
 1534 05f2 7F000000 		.word	127
ARM GAS  stm32eforth.s 			page 31


 1535 05f6 FFF756FF 		BL	WITHI	// check for printable
 1536 05fa FFF780FE 		BL	INVER
 1537 05fe FFF7B9FD 		BL	QBRAN
 1538 0602 12060018 		.word	TCHA1+MAPOFFSET
 1539 0606 FFF7EAFD 		BL	DROP
 1540 060a FFF796FD 		_DOLIT
 1541 060e 5F000000 		.word	'_'	// replace non-printables
 1542              	TCHA1:
 1543 0612 52F804FB 		  _UNNEST
 1544              	
 1545              	//    DEPTH	( -- n )
 1546              	// 	Return the depth of the data stack.
 1547              		_HEADER DEPTH,5,"DEPTH"
 1548 0616 4FF49D46 		_MOV32 R6,SPP 
 1548      C2F20006 
 1549 061e A6EB0106 		SUB	R6,R6,R1
 1550 0622 41F8045D 		_PUSH
 1551 0626 4FEAA605 		ASR	R5,R6,#2
 1552 062a 7047     		_NEXT  
 1553              	
 1554              	//    PICK	( ... +n -- ... w )
 1555              	// 	Copy the nth stack item to tos.
 1556              		_HEADER PICK,4,"PICK"
 1557 062c 42F804ED 		_NEST
 1558 0630 FFF723FE 		BL	ONEP
 1559 0634 FFF738FE 		BL	CELLS
 1560 0638 FFF7CDFD 		BL	SPAT
 1561 063c FFF703FE 		BL	PLUS
 1562 0640 FFF7B1FD 		BL	AT
 1563 0644 52F804FB 		_UNNEST
 1564              	
 1565              	// **************************************************************************
 1566              	//  Memory access
 1567              	
 1568              	//    HERE	( -- a )
 1569              	// 	Return the top of the code dictionary.
 1570              		_HEADER HERE,4,"HERE"
 1571 0648 42F804ED 		_NEST
 1572 064c FFF702FF 		BL	CPP
 1573 0650 FFF7A9FD 		BL	AT
 1574 0654 52F804FB 		_UNNEST
 1575              		
 1576              	//    PAD	 ( -- a )
 1577              	// 	Return the address of a temporary buffer.
 1578              		_HEADER PAD,4,"PAD"
 1579 0658 42F804ED 		_NEST
 1580 065c FFF7F4FF 		BL	HERE
 1581 0660 05F15005 		ADD	R5,R5,#80
 1582 0664 52F804FB 		_UNNEST
 1583              	
 1584              	//    TIB	 ( -- a )
 1585              	// 	Return the address of the terminal input buffer.
 1586              		_HEADER TIB,3,"TIB"
 1587 0668 41F8045D 		_PUSH
 1588 066c 1D6B     		ldr r5,[r3,#TIB_OFS]
 1589 066e 7047     		_NEXT
 1590              	
ARM GAS  stm32eforth.s 			page 32


 1591              	//    @EXECUTE	( a -- )
 1592              	// 	Execute vector stored in address a.
 1593              		_HEADER ATEXE,8,"@EXECUTE"
 1594 0670 2C00     		MOVS	R4,R5
 1595 0672 51F8045B 		_POP
 1596 0676 2468     		LDR	R4,[R4]
 1597 0678 44F00104 		ORR	R4,R4,#1
 1598 067c 18BF     	    IT NE 
 1599 067e 2047     		BXNE	R4
 1600 0680 7047     		_NEXT
 1601              	
 1602              	//    CMOVE	( b1 b2 u -- )
 1603              	// 	Copy u bytes from b1 to b2.
 1604              		_HEADER CMOVE,5,"CMOVE"
 1605 0682 51F8046B 		LDR	R6,[R1],#4
 1606 0686 51F8047B 		LDR	R7,[R1],#4
 1607 068a 03E0     		B CMOV1
 1608              	CMOV0:
 1609 068c 17F8014B 		LDRB	R4,[R7],#1
 1610 0690 06F8014B 		STRB	R4,[R6],#1
 1611              	CMOV1:
 1612 0694 2D00     		MOVS	R5,R5
 1613 0696 02D0     		BEQ	CMOV2
 1614 0698 A5F10105 		SUB	R5,R5,#1
 1615 069c F6E7     		B CMOV0
 1616              	CMOV2:
 1617 069e 51F8045B 		_POP
 1618 06a2 7047     		_NEXT
 1619              	
 1620              	//    MOVE	( a1 a2 u -- )
 1621              	// 	Copy u words from a1 to a2.
 1622              		_HEADER MOVE,4,"MOVE"
 1623 06a4 25F00305 		AND	R5,R5,#-4
 1624 06a8 51F8046B 		LDR	R6,[R1],#4
 1625 06ac 51F8047B 		LDR	R7,[R1],#4
 1626 06b0 03E0     		B MOVE1
 1627              	MOVE0:
 1628 06b2 57F8044B 		LDR	R4,[R7],#4
 1629 06b6 46F8044B 		STR	R4,[R6],#4
 1630              	MOVE1:
 1631 06ba 2D00     		MOVS	R5,R5
 1632 06bc 02D0     		BEQ	MOVE2
 1633 06be A5F10405 		SUB	R5,R5,#4
 1634 06c2 F6E7     		B MOVE0
 1635              	MOVE2:
 1636 06c4 51F8045B 		_POP
 1637 06c8 7047     		_NEXT
 1638              	
 1639              	//    FILL	( b u c -- )
 1640              	// 	Fill u bytes of character c to area beginning at b.
 1641              		_HEADER FILL,4,"FILL"
 1642 06ca 51F8046B 		LDR	R6,[R1],#4
 1643 06ce 51F8047B 		LDR	R7,[R1],#4
 1644              	FILL0:
 1645 06d2 00E0     		B FILL1
 1646 06d4 2D46     		MOV	R5,R5
 1647              	FILL1:
ARM GAS  stm32eforth.s 			page 33


 1648 06d6 07F8015B 		STRB	R5,[R7],#1
 1649 06da 3600     		MOVS	R6,R6
 1650 06dc 02D0     		BEQ	FILL2
 1651 06de A6F10106 		SUB	R6,R6,#1
 1652 06e2 F6E7     		B FILL0
 1653              	FILL2:
 1654 06e4 51F8045B 		_POP
 1655 06e8 7047     		_NEXT
 1656              	
 1657              	//    PACK$	( b u a -- a )
 1658              	// 	Build a counted word with u characters from b. Null fill.
 1659              		_HEADER PACKS,5,"PACK$"
 1660 06ea 42F804ED 		_NEST
 1661 06ee FFF76BFF 		BL	ALGND
 1662 06f2 FFF777FD 		BL	DUPP
 1663 06f6 FFF769FD 		BL	TOR			// strings only on cell boundary
 1664 06fa FFF77AFD 		BL	OVER
 1665 06fe FFF7A2FD 		BL	PLUS
 1666 0702 FFF7BAFD 		BL	ONEP
 1667 0706 FFF718FD 		_DOLIT
 1668 070a FCFFFFFF 		.word	0xFFFFFFFC
 1669 070e FFF779FD 		BL	ANDD			// count mod cell
 1670 0712 FFF712FD 		_DOLIT
 1671 0716 00000000 		.word	0
 1672 071a FFF766FD 		BL	SWAP
 1673 071e FFF73CFD 		BL	STORE			// null fill cell
 1674 0722 FFF74FFD 		BL	RAT
 1675 0726 FFF7DAFD 		BL	DDUP
 1676 072a FFF73EFD 		BL	CSTOR
 1677 072e FFF7A4FD 		BL	ONEP			// save count
 1678 0732 FFF75AFD 		BL	SWAP
 1679 0736 FFF7A4FF 		BL	CMOVE
 1680 073a FFF73EFD 		BL	RFROM
 1681 073e 52F804FB 		_UNNEST   			// move string
 1682              	
 1683              	// **************************************************************************
 1684              	//  Numeric output, single precision
 1685              	
 1686              	//    DIGIT	( u -- c )
 1687              	// 	Convert digit u to a character.
 1688              		_HEADER DIGIT,5,"DIGIT"
 1689 0742 42F804ED 		_NEST
 1690 0746 FFF7F8FC 		_DOLIT
 1691 074a 09000000 		.word	9
 1692 074e FFF750FD 		BL	OVER
 1693 0752 FFF7F6FD 		BL	LESS
 1694 0756 05F00705 		AND	R5,R5,#7
 1695 075a FFF774FD 		BL	PLUS
 1696 075e 05F13005 		ADD	R5,R5,#'0'
 1697 0762 52F804FB 		_UNNEST
 1698              	
 1699              	//    EXTRACT	( n base -- n c )
 1700              	// 	Extract the least significant digit from n.
 1701              		_HEADER EXTRC,7,"EXTRACT"
 1702 0766 42F804ED 		_NEST
 1703 076a FFF7E6FC 		_DOLIT
 1704 076e 00000000 		.word	0
ARM GAS  stm32eforth.s 			page 34


 1705 0772 FFF73AFD 		BL	SWAP
 1706 0776 FFF7A6FE 		BL	UMMOD
 1707 077a FFF736FD 		BL	SWAP
 1708 077e FFF7E0FF 		BL	DIGIT
 1709 0782 52F804FB 		_UNNEST
 1710              	
 1711              	//    <#	  ( -- )
 1712              	// 	Initiate the numeric output process.
 1713              		_HEADER BDIGS,2,"<#"
 1714 0786 42F804ED 		_NEST
 1715 078a FFF765FF 		BL	PAD
 1716 078e FFF757FE 		BL	HLD
 1717 0792 FFF702FD 		BL	STORE
 1718 0796 52F804FB 		_UNNEST
 1719              	
 1720              	//    HOLD	( c -- )
 1721              	// 	Insert a character into the numeric output string.
 1722              		_HEADER HOLD,4,"HOLD"
 1723 079a 42F804ED 		_NEST
 1724 079e FFF74FFE 		BL	HLD
 1725 07a2 FFF700FD 		BL	AT
 1726 07a6 FFF76BFD 		BL	ONEM
 1727 07aa FFF71BFD 		BL	DUPP
 1728 07ae FFF747FE 		BL	HLD
 1729 07b2 FFF7F2FC 		BL	STORE
 1730 07b6 FFF7F8FC 		BL	CSTOR
 1731 07ba 52F804FB 		_UNNEST
 1732              	
 1733              	//    #	   ( u -- u )
 1734              	// 	Extract one digit from u and append the digit to output string.
 1735              		_HEADER DIG,1,"#"
 1736 07be 42F804ED 		_NEST
 1737 07c2 FFF71FFE 		BL	BASE
 1738 07c6 FFF7EEFC 		BL	AT
 1739 07ca FFF7CCFF 		BL	EXTRC
 1740 07ce FFF7E4FF 		BL	HOLD
 1741 07d2 52F804FB 		_UNNEST
 1742              	
 1743              	//    #S	  ( u -- 0 )
 1744              	// 	Convert u until all digits are added to the output string.
 1745              		_HEADER DIGS,2,"#S"
 1746 07d6 42F804ED 		_NEST
 1747              	DIGS1:
 1748 07da FFF7F0FF 	    BL	DIG
 1749 07de FFF701FD 		BL	DUPP
 1750 07e2 FFF7C7FC 		BL	QBRAN
 1751 07e6 EC070018 		.word	DIGS2+MAPOFFSET
 1752 07ea F6E7     		B	DIGS1
 1753              	DIGS2:
 1754 07ec 52F804FB 		  _UNNEST
 1755              	
 1756              	//    SIGN	( n -- )
 1757              	// 	Add a minus sign to the numeric output string.
 1758              		_HEADER SIGN, 4,"SIGN"
 1759 07f0 42F804ED 		_NEST
 1760 07f4 FFF701FD 		BL	ZLESS
 1761 07f8 FFF7BCFC 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 35


 1762 07fc 0C080018 		.word	SIGN1+MAPOFFSET
 1763 0800 FFF79BFC 		_DOLIT
 1764 0804 2D000000 		.word	'-'
 1765 0808 FFF7C7FF 		BL	HOLD
 1766              	SIGN1:
 1767 080c 52F804FB 		  _UNNEST
 1768              	
 1769              	//    #>	  ( w -- b u )
 1770              	// 	Prepare the outputDCB to be TYPE'd.
 1771              		_HEADER EDIGS,2,"#>"
 1772 0810 42F804ED 		_NEST
 1773 0814 FFF7E3FC 		BL	DROP
 1774 0818 FFF712FE 		BL	HLD
 1775 081c FFF7C3FC 		BL	AT
 1776 0820 FFF71AFF 		BL	PAD
 1777 0824 FFF7E5FC 		BL	OVER
 1778 0828 FFF711FD 		BL	SUBB
 1779 082c 52F804FB 		_UNNEST
 1780              	
 1781              	//    str	 ( n -- b u )
 1782              	// 	Convert a signed integer to a numeric string.
 1783              	
 1784              	// 	.word	_EDIGS+MAPOFFSET
 1785              	// _STRR	.byte  3
 1786              	// 	.ascii "str"
 1787              	// 	.p2align 2 	
 1788              	STRR:
 1789 0830 42F804ED 		_NEST
 1790 0834 FFF7D6FC 		BL	DUPP
 1791 0838 FFF7C8FC 		BL	TOR
 1792 083c FFF765FD 		BL	ABSS
 1793 0840 FFF7A1FF 		BL	BDIGS
 1794 0844 FFF7C7FF 		BL	DIGS
 1795 0848 FFF7B7FC 		BL	RFROM
 1796 084c FFF7D0FF 		BL	SIGN
 1797 0850 FFF7DEFF 		BL	EDIGS
 1798 0854 52F804FB 		_UNNEST
 1799              	
 1800              	//    HEX	 ( -- )
 1801              	// 	Use radix 16 as base for numeric conversions.
 1802              		_HEADER HEX,3,"HEX"
 1803 0858 42F804ED 		_NEST
 1804 085c FFF76DFC 		_DOLIT
 1805 0860 10000000 		.word	16
 1806 0864 FFF7CEFD 		BL	BASE
 1807 0868 FFF797FC 		BL	STORE
 1808 086c 52F804FB 		_UNNEST
 1809              	
 1810              	//    DECIMAL	( -- )
 1811              	// 	Use radix 10 as base for numeric conversions.
 1812              		_HEADER DECIM,7,"DECIMAL"
 1813 0870 42F804ED 		_NEST
 1814 0874 FFF761FC 		_DOLIT
 1815 0878 0A000000 		.word	10
 1816 087c FFF7C2FD 		BL	BASE
 1817 0880 FFF78BFC 		BL	STORE
 1818 0884 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 36


 1819              	
 1820              	// **************************************************************************
 1821              	//  Numeric input, single precision
 1822              	
 1823              	//    DIGIT?	( c base -- u t )
 1824              	// 	Convert a character to its numeric value. A flag indicates success.
 1825              		_HEADER DIGTQ,6,"DIGIT?"
 1826 0888 42F804ED 		_NEST
 1827 088c FFF79EFC 		BL	TOR
 1828 0890 FFF753FC 		_DOLIT
 1829 0894 30000000 		.word	'0'
 1830 0898 FFF7D9FC 		BL	SUBB
 1831 089c FFF74DFC 		_DOLIT
 1832 08a0 09000000 		.word	9
 1833 08a4 FFF7A5FC 		BL	OVER
 1834 08a8 FFF74BFD 		BL	LESS
 1835 08ac FFF762FC 		BL	QBRAN
 1836 08b0 D4080018 		.word	DGTQ1+MAPOFFSET
 1837 08b4 FFF741FC 		_DOLIT
 1838 08b8 07000000 		.word	7
 1839 08bc FFF7C7FC 		BL	SUBB
 1840 08c0 FFF790FC 		BL	DUPP
 1841 08c4 FFF739FC 		_DOLIT
 1842 08c8 0A000000 		.word	10
 1843 08cc FFF739FD 		BL	LESS
 1844 08d0 FFF79DFC 		BL	ORR
 1845              	DGTQ1:
 1846 08d4 FFF786FC 	  BL	DUPP
 1847 08d8 FFF76FFC 		BL	RFROM
 1848 08dc FFF729FD 		BL	ULESS
 1849 08e0 52F804FB 		_UNNEST
 1850              	
 1851              	//    NUMBER?	( a -- n T | a F )
 1852              	// 	Convert a number word to integer. Push a flag on tos.
 1853              		_HEADER NUMBQ,7,"NUMBER?"
 1854 08e4 42F804ED 		_NEST
 1855 08e8 FFF78CFD 		BL	BASE
 1856 08ec FFF75BFC 		BL	AT
 1857 08f0 FFF76CFC 		BL	TOR
 1858 08f4 FFF721FC 		_DOLIT
 1859 08f8 00000000 		.word	0
 1860 08fc FFF779FC 		BL	OVER
 1861 0900 FFF752FD 		BL	COUNT
 1862 0904 FFF775FC 		BL	OVER
 1863 0908 FFF755FC 		BL	CAT
 1864 090c FFF715FC 		_DOLIT
 1865 0910 24000000 		.word	'$'
 1866 0914 FFF705FD 		BL	EQUAL
 1867 0918 FFF72CFC 		BL	QBRAN
 1868 091c 34090018 		.word	NUMQ1+MAPOFFSET
 1869 0920 FFF79AFF 		BL	HEX
 1870 0924 FFF761FC 		BL	SWAP
 1871 0928 FFF7A7FC 		BL	ONEP
 1872 092c FFF75DFC 		BL	SWAP
 1873 0930 FFF7A6FC 		BL	ONEM
 1874              	NUMQ1:
 1875 0934 FFF75DFC 		BL	OVER
ARM GAS  stm32eforth.s 			page 37


 1876 0938 FFF73DFC 		BL	CAT
 1877 093c FFF7FDFB 		_DOLIT
 1878 0940 2D000000 		.word	'-'
 1879 0944 FFF7EDFC 		BL	EQUAL
 1880 0948 FFF740FC 		BL	TOR
 1881 094c FFF74DFC 		BL	SWAP
 1882 0950 FFF738FC 		BL	RAT
 1883 0954 FFF77BFC 		BL	SUBB
 1884 0958 FFF747FC 		BL	SWAP
 1885 095c FFF732FC 		BL	RAT
 1886 0960 FFF771FC 		BL	PLUS
 1887 0964 FFF7ACFC 		BL	QDUP
 1888 0968 FFF704FC 		BL	QBRAN
 1889 096c F8090018 		.word	NUMQ6+MAPOFFSET
 1890 0970 FFF786FC 		BL	ONEM
 1891 0974 FFF72AFC 		BL	TOR
 1892              	NUMQ2:
 1893 0978 FFF734FC 		BL	DUPP
 1894 097c FFF726FC 		BL	TOR
 1895 0980 FFF719FC 		BL	CAT
 1896 0984 FFF73EFD 		BL	BASE
 1897 0988 FFF70DFC 		BL	AT
 1898 098c FFF77CFF 		BL	DIGTQ
 1899 0990 FFF7F0FB 		BL	QBRAN
 1900 0994 DC090018 		.word	NUMQ4+MAPOFFSET
 1901 0998 FFF727FC 		BL	SWAP
 1902 099c FFF732FD 		BL	BASE
 1903 09a0 FFF701FC 		BL	AT
 1904 09a4 FFF758FC 		BL	STAR
 1905 09a8 FFF74DFC 		BL	PLUS
 1906 09ac FFF705FC 		BL	RFROM
 1907 09b0 FFF763FC 		BL	ONEP
 1908 09b4 FFF7CFFB 		BL	DONXT
 1909 09b8 78090018 		.word	NUMQ2+MAPOFFSET
 1910 09bc FFF702FC 		BL	RAT
 1911 09c0 FFF713FC 		BL	SWAP
 1912 09c4 FFF70BFC 		BL	DROP
 1913 09c8 FFF7D4FB 		BL	QBRAN
 1914 09cc D4090018 		.word	NUMQ3+MAPOFFSET
 1915 09d0 FFF798FC 		BL	NEGAT
 1916              	NUMQ3:
 1917 09d4 FFF709FC 		BL	SWAP
 1918 09d8 00F00CB8 		B.W	NUMQ5
 1919              	NUMQ4:
 1920 09dc FFF7EDFB 		BL	RFROM
 1921 09e0 FFF7EBFB 		BL	RFROM
 1922 09e4 FFF776FC 		BL	DDROP
 1923 09e8 FFF774FC 		BL	DDROP
 1924 09ec FFF7A5FB 		_DOLIT
 1925 09f0 00000000 		.word	0
 1926              	NUMQ5:
 1927 09f4 FFF7F6FB 		BL	DUPP
 1928              	NUMQ6:
 1929 09f8 FFF7DFFB 		BL	RFROM
 1930 09fc FFF76AFC 		BL	DDROP
 1931 0a00 FFF7DBFB 		BL	RFROM
 1932 0a04 FFF7FEFC 		BL	BASE
ARM GAS  stm32eforth.s 			page 38


 1933 0a08 FFF7C7FB 		BL	STORE
 1934 0a0c 52F804FB 		_UNNEST
 1935              	
 1936              	// **************************************************************************
 1937              	//  Basic I/O
 1938              	
 1939              	//    KEY	 ( -- c )
 1940              	// 	Wait for and return an input character.
 1941              		_HEADER KEY,3,"KEY"
 1942 0a10 42F804ED 		_NEST
 1943              	KEY1:
 1944 0a14 FFF76EFB 		BL	QRX
 1945 0a18 FFF7ACFB 		BL	QBRAN
 1946 0a1c 140A0018 		.word	KEY1+MAPOFFSET
 1947 0a20 52F804FB 		_UNNEST
 1948              	
 1949              	//    SPACE	( -- )
 1950              	// 	Send the blank character to the output device.
 1951              		_HEADER SPACE,5,"SPACE"
 1952 0a24 42F804ED 		_NEST
 1953 0a28 FFF739FC 		BL	BLANK
 1954 0a2c FFF778FB 		BL	EMIT
 1955 0a30 52F804FB 		_UNNEST
 1956              	
 1957              	//    SPACES	( +n -- )
 1958              	// 	Send n spaces to the output device.
 1959              		_HEADER SPACS,6,"SPACES"
 1960 0a34 42F804ED 		_NEST
 1961 0a38 FFF77FFB 		_DOLIT
 1962 0a3c 00000000 		.word	0
 1963 0a40 FFF78FFC 		BL	MAX
 1964 0a44 FFF7C2FB 		BL	TOR
 1965 0a48 00F002B8 		B.W	CHAR2
 1966              	CHAR1:
 1967 0a4c FFF7EAFF 		BL	SPACE
 1968              	CHAR2:
 1969 0a50 FFF781FB 		BL	DONXT
 1970 0a54 4C0A0018 		.word	CHAR1+MAPOFFSET
 1971 0a58 52F804FB 		_UNNEST
 1972              	
 1973              	//    TYPE	( b u -- )
 1974              	// 	Output u characters from b.
 1975              		_HEADER TYPEE,4,"TYPE"
 1976 0a5c 42F804ED 		_NEST
 1977 0a60 FFF7B4FB 		BL  TOR   // ( a+1 -- R: u )
 1978 0a64 00F006B8 		B.W	TYPE2
 1979              	TYPE1:  
 1980 0a68 FFF79EFC 		BL  COUNT
 1981 0a6c FFF7B3FD 		BL	TCHAR
 1982 0a70 FFF756FB 		BL	EMIT
 1983              	TYPE2:  
 1984 0a74 FFF76FFB 		BL  DONXT  
 1985 0a78 680A0018 		.word	TYPE1+MAPOFFSET
 1986 0a7c FFF7AFFB 		BL	DROP
 1987 0a80 52F804FB 		_UNNEST
 1988              	
 1989              	//    CR	  ( -- )
ARM GAS  stm32eforth.s 			page 39


 1990              	// 	Output a carriage return and a line feed.
 1991              		_HEADER CR,2,"CR"
 1992 0a84 42F804ED 		_NEST
 1993 0a88 FFF757FB 		_DOLIT
 1994 0a8c 0D000000 		.word	CRR
 1995 0a90 FFF746FB 		BL	EMIT
 1996 0a94 FFF751FB 		_DOLIT
 1997 0a98 0A000000 		.word	LF
 1998 0a9c FFF740FB 		BL	EMIT
 1999 0aa0 52F804FB 		_UNNEST
 2000              	
 2001              	//    do_$	( -- a )
 2002              	// 	Return the address of a compiled string.
 2003              	//  adjust return address to skip over it.
 2004              	
 2005              	// 	.word	_CR+MAPOFFSET
 2006              	// _DOSTR	.byte  COMPO+3
 2007              	// 	.ascii "do$$"
 2008              	// 	.p2align 2 	
 2009              	DOSTR:
 2010 0aa4 42F804ED 		_NEST     
 2011              	/* compiled string address is 2 levels deep */
 2012 0aa8 FFF787FB 		BL	RFROM	// { -- a1 }
 2013 0aac FFF785FB 		BL	RFROM	//  {a1 -- a1 a2 } b0 set
 2014 0ab0 FFF7E6FB 		BL	ONEM	//  clear b0
 2015 0ab4 FFF796FB 		BL	DUPP	// {a1 a2 -- a1 a2 a2 }
 2016 0ab8 FFF776FC 		BL	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2017 0abc FFF7C3FB 		BL	PLUS	// { -- a1 a2 a2+1+c }
 2018 0ac0 FFF782FD 		BL	ALGND	//  end of string
 2019 0ac4 FFF7D9FB 		BL	ONEP	//  restore b0, this result in return address 2 level deep.
 2020 0ac8 FFF780FB 		BL	TOR		//  address after string { -- a1 a2 }
 2021 0acc FFF78DFB 		BL	SWAP	//  count tugged
 2022 0ad0 FFF77CFB 		BL	TOR     //  ( -- a2) is string address
 2023 0ad4 52F804FB 		_UNNEST
 2024              	
 2025              	//    $"|	( -- a )
 2026              	// 	Run time routine compiled by _". Return address of a compiled string.
 2027              	
 2028              	// 	.word	_DOSTR+MAPOFFSET
 2029              	// _STRQP	.byte  COMPO+3
 2030              	// 	.ascii "$\"|"
 2031              	// 	.p2align 2 	
 2032              	STRQP:
 2033 0ad8 42F804ED 		_NEST
 2034 0adc FFF7E2FF 		BL	DOSTR
 2035 0ae0 52F804FB 		_UNNEST			// force a call to dostr
 2036              	
 2037              	//    .$	( a -- )
 2038              	// 	Run time routine of ." . Output a compiled string.
 2039              	
 2040              	// 	.word	_STRQP+MAPOFFSET
 2041              	// _DOTST	.byte  COMPO+2
 2042              	// 	.ascii ".$$"
 2043              	// 	.p2align 2 	
 2044              	DOTST:
 2045 0ae4 42F804ED 		_NEST
 2046 0ae8 FFF75EFC 		BL	COUNT // ( -- a+1 c )
ARM GAS  stm32eforth.s 			page 40


 2047 0aec FFF7B6FF 		BL	TYPEE
 2048 0af0 52F804FB 		_UNNEST
 2049              	
 2050              	//    ."|	( -- )
 2051              	// 	Run time routine of ." . Output a compiled string.
 2052              	
 2053              	// 	.word	_DOTST+MAPOFFSET
 2054              	// _DOTQP	.byte  COMPO+3
 2055              	// 	.ascii ".""|"
 2056              	// 	.p2align 2 	
 2057              	DOTQP:
 2058 0af4 42F804ED 		_NEST
 2059 0af8 FFF7D4FF 		BL	DOSTR
 2060 0afc FFF7F2FF 		BL	DOTST
 2061 0b00 52F804FB 		_UNNEST
 2062              	
 2063              	//    .R	  ( n +n -- )
 2064              	// 	Display an integer in a field of n columns, right justified.
 2065              		_HEADER DOTR,2,".R"
 2066 0b04 42F804ED 		_NEST
 2067 0b08 FFF760FB 		BL	TOR
 2068 0b0c FFF790FE 		BL	STRR
 2069 0b10 FFF753FB 		BL	RFROM
 2070 0b14 FFF76DFB 		BL	OVER
 2071 0b18 FFF799FB 		BL	SUBB
 2072 0b1c FFF78AFF 		BL	SPACS
 2073 0b20 FFF79CFF 		BL	TYPEE
 2074 0b24 52F804FB 		_UNNEST
 2075              	
 2076              	//    U.R	 ( u +n -- )
 2077              	// 	Display an unsigned integer in n column, right justified.
 2078              		_HEADER UDOTR,3,"U.R"
 2079 0b28 42F804ED 		_NEST
 2080 0b2c FFF74EFB 		BL	TOR
 2081 0b30 FFF729FE 		BL	BDIGS
 2082 0b34 FFF74FFE 		BL	DIGS
 2083 0b38 FFF76AFE 		BL	EDIGS
 2084 0b3c FFF73DFB 		BL	RFROM
 2085 0b40 FFF757FB 		BL	OVER
 2086 0b44 FFF783FB 		BL	SUBB
 2087 0b48 FFF774FF 		BL	SPACS
 2088 0b4c FFF786FF 		BL	TYPEE
 2089 0b50 52F804FB 		_UNNEST
 2090              	
 2091              	//    U.	  ( u -- )
 2092              	// 	Display an unsigned integer in free format.
 2093              		_HEADER UDOT,2,"U."
 2094 0b54 42F804ED 		_NEST
 2095 0b58 FFF715FE 		BL	BDIGS
 2096 0b5c FFF73BFE 		BL	DIGS
 2097 0b60 FFF756FE 		BL	EDIGS
 2098 0b64 FFF75EFF 		BL	SPACE
 2099 0b68 FFF778FF 		BL	TYPEE
 2100 0b6c 52F804FB 		_UNNEST
 2101              	
 2102              	//    .	   ( w -- )
 2103              	// 	Display an integer in free format, preceeded by a space.
ARM GAS  stm32eforth.s 			page 41


 2104              		_HEADER DOT,1,"."
 2105 0b70 42F804ED 		_NEST
 2106 0b74 FFF746FC 		BL	BASE
 2107 0b78 FFF715FB 		BL	AT
 2108 0b7c FFF7DDFA 		_DOLIT
 2109 0b80 0A000000 		.word	10
 2110 0b84 FFF748FB 		BL	XORR			// ?decimal
 2111 0b88 FFF7F4FA 		BL	QBRAN
 2112 0b8c 980B0018 		.word	DOT1+MAPOFFSET
 2113 0b90 FFF7E0FF 		BL	UDOT
 2114 0b94 52F804FB 		_UNNEST			// no,display unsigned
 2115              	DOT1:
 2116 0b98 FFF74AFE 	    BL	STRR
 2117 0b9c FFF742FF 		BL	SPACE
 2118 0ba0 FFF75CFF 		BL	TYPEE
 2119 0ba4 52F804FB 		_UNNEST			// yes, display signed
 2120              	
 2121              	//    ?	   ( a -- )
 2122              	// 	Display the contents in a memory cell.
 2123              		_HEADER QUEST,1,"?"
 2124 0ba8 42F804ED 		_NEST
 2125 0bac FFF7FBFA 		BL	AT
 2126 0bb0 FFF7DEFF 		BL	DOT
 2127 0bb4 52F804FB 		_UNNEST
 2128              	
 2129              	// **************************************************************************
 2130              	//  Parsing
 2131              	
 2132              	//    parse	( b u c -- b u delta //  string> )
 2133              	// 	Scan word delimited by c. Return found string and its offset.
 2134              	
 2135              	// 	.word	_QUEST+MAPOFFSET
 2136              	// _PARS	.byte  5
 2137              	// 	.ascii "parse"
 2138              	// 	.p2align 2 	
 2139              	PARS:
 2140 0bb8 42F804ED 		_NEST
 2141 0bbc FFF727FC 		BL	TEMP
 2142 0bc0 FFF7EBFA 		BL	STORE
 2143 0bc4 FFF715FB 		BL	OVER
 2144 0bc8 FFF700FB 		BL	TOR
 2145 0bcc FFF70AFB 		BL	DUPP
 2146 0bd0 FFF7D0FA 		BL	QBRAN
 2147 0bd4 C60C0018 		.word	PARS8+MAPOFFSET
 2148 0bd8 FFF752FB 		BL	ONEM
 2149 0bdc FFF717FC 		BL	TEMP
 2150 0be0 FFF7E1FA 		BL	AT
 2151 0be4 FFF75BFB 		BL	BLANK
 2152 0be8 FFF79BFB 		BL	EQUAL
 2153 0bec FFF7C2FA 		BL	QBRAN
 2154 0bf0 400C0018 		.word	PARS3+MAPOFFSET
 2155 0bf4 FFF7EAFA 		BL	TOR
 2156              	PARS1:
 2157 0bf8 FFF751FB 		BL	BLANK
 2158 0bfc FFF7F9FA 		BL	OVER
 2159 0c00 FFF7D9FA 		BL	CAT			// skip leading blanks 
 2160 0c04 FFF723FB 		BL	SUBB
ARM GAS  stm32eforth.s 			page 42


 2161 0c08 FFF7F7FA 		BL	ZLESS
 2162 0c0c FFF777FB 		BL	INVER
 2163 0c10 FFF7B0FA 		BL	QBRAN
 2164 0c14 3C0C0018 		.word	PARS2+MAPOFFSET
 2165 0c18 FFF72FFB 		BL	ONEP
 2166 0c1c FFF79BFA 		BL	DONXT
 2167 0c20 F80B0018 		.word	PARS1+MAPOFFSET
 2168 0c24 FFF7C9FA 		BL	RFROM
 2169 0c28 FFF7D9FA 		BL	DROP
 2170 0c2c FFF785FA 		_DOLIT
 2171 0c30 00000000 		.word	0
 2172 0c34 FFF7D6FA 		BL	DUPP
 2173 0c38 52F804FB 		_UNNEST
 2174              	PARS2:
 2175 0c3c FFF7BDFA 	  BL	RFROM
 2176              	PARS3:
 2177 0c40 FFF7D7FA 		BL	OVER
 2178 0c44 FFF7D1FA 		BL	SWAP
 2179 0c48 FFF7C0FA 		BL	TOR
 2180              	PARS4:
 2181 0c4c FFF7DFFB 		BL	TEMP
 2182 0c50 FFF7A9FA 		BL	AT
 2183 0c54 FFF7CDFA 		BL	OVER
 2184 0c58 FFF7ADFA 		BL	CAT
 2185 0c5c FFF7F7FA 		BL	SUBB			// scan for delimiter
 2186 0c60 FFF7D5FB 		BL	TEMP
 2187 0c64 FFF79FFA 		BL	AT
 2188 0c68 FFF719FB 		BL	BLANK
 2189 0c6c FFF759FB 		BL	EQUAL
 2190 0c70 FFF780FA 		BL	QBRAN
 2191 0c74 7C0C0018 		.word	PARS5+MAPOFFSET
 2192 0c78 FFF7BFFA 		BL	ZLESS
 2193              	PARS5:
 2194 0c7c FFF77AFA 		BL	QBRAN
 2195 0c80 9A0C0018 		.word	PARS6+MAPOFFSET
 2196 0c84 FFF7F9FA 		BL	ONEP
 2197 0c88 FFF765FA 		BL	DONXT
 2198 0c8c 4C0C0018 		.word	PARS4+MAPOFFSET
 2199 0c90 FFF7A8FA 		BL	DUPP
 2200 0c94 FFF79AFA 		BL	TOR
 2201 0c98 09E0     		B	PARS7
 2202              	PARS6:
 2203 0c9a FFF78EFA 		BL	RFROM
 2204 0c9e FFF79EFA 		BL	DROP
 2205 0ca2 FFF79FFA 		BL	DUPP
 2206 0ca6 FFF7E8FA 		BL	ONEP
 2207 0caa FFF78FFA 		BL	TOR
 2208              	PARS7:
 2209 0cae FFF7A0FA 		BL	OVER
 2210 0cb2 FFF7CCFA 		BL	SUBB
 2211 0cb6 FFF780FA 		BL	RFROM
 2212 0cba FFF77EFA 		BL	RFROM
 2213 0cbe FFF7C6FA 		BL	SUBB
 2214 0cc2 52F804FB 		_UNNEST
 2215              	PARS8:
 2216 0cc6 FFF794FA 		BL	OVER
 2217 0cca FFF776FA 		BL	RFROM
ARM GAS  stm32eforth.s 			page 43


 2218 0cce FFF7BEFA 		BL	SUBB
 2219 0cd2 52F804FB 		_UNNEST
 2220              	
 2221              	//    PARSE	( c -- b u //  string> )
 2222              	// 	Scan input stream and return counted string delimited by c.
 2223              		_HEADER PARSE,5,"PARSE"
 2224 0cd6 42F804ED 		_NEST
 2225 0cda FFF777FA 		BL	TOR
 2226 0cde FFF7C3FC 		BL	TIB
 2227 0ce2 FFF79EFB 		BL	INN
 2228 0ce6 FFF75EFA 		BL	AT
 2229 0cea FFF7ACFA 		BL	PLUS			// current input buffer pointer
 2230 0cee FFF79DFB 		BL	NTIB
 2231 0cf2 FFF758FA 		BL	AT
 2232 0cf6 FFF794FB 		BL	INN
 2233 0cfa FFF754FA 		BL	AT
 2234 0cfe FFF7A6FA 		BL	SUBB			// remaining count
 2235 0d02 FFF75AFA 		BL	RFROM
 2236 0d06 FFF757FF 		BL	PARS
 2237 0d0a FFF78AFB 		BL	INN
 2238 0d0e FFF734FB 		BL	PSTOR
 2239 0d12 52F804FB 		_UNNEST
 2240              	
 2241              	//    .(	  ( -- )
 2242              	// 	Output following string up to next ) .
 2243              		_HEADER DOTPR,IMEDD+2,".("
 2244 0d16 42F804ED 		_NEST
 2245 0d1a FFF70EFA 		_DOLIT
 2246 0d1e 29000000 		.word	')'
 2247 0d22 FFF7D8FF 		BL	PARSE
 2248 0d26 FFF799FE 		BL	TYPEE
 2249 0d2a 52F804FB 		_UNNEST
 2250              	
 2251              	//    (	   ( -- )
 2252              	// 	Ignore following string up to next ) . A comment.
 2253              		_HEADER PAREN,IMEDD+1,"("
 2254 0d2e 42F804ED 		_NEST
 2255 0d32 FFF702FA 		_DOLIT
 2256 0d36 29000000 		.word	')'
 2257 0d3a FFF7CCFF 		BL	PARSE
 2258 0d3e FFF7C9FA 		BL	DDROP
 2259 0d42 52F804FB 		_UNNEST
 2260              	
 2261              	//    \	   ( -- )
 2262              	// 	Ignore following text till the end of line.
 2263              		_HEADER BKSLA,1,"\\"
 2264 0d46 42F804ED 		_NEST
 2265 0d4a FFF76FFB 		BL	NTIB
 2266 0d4e FFF72AFA 		BL	AT
 2267 0d52 FFF766FB 		BL	INN
 2268 0d56 FFF720FA 		BL	STORE
 2269 0d5a 52F804FB 		_UNNEST
 2270              	
 2271              	//    CHAR	( -- c )
 2272              	// 	Parse next word and return its first character.
 2273              		_HEADER CAHR,4,"CHAR"
 2274 0d5e 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 44


 2275 0d62 FFF79CFA 		BL	BLANK
 2276 0d66 FFF7B6FF 		BL	PARSE
 2277 0d6a FFF738FA 		BL	DROP
 2278 0d6e FFF722FA 		BL	CAT
 2279 0d72 52F804FB 		_UNNEST
 2280              	
 2281              	//    WORD	( c -- a //  string> )
 2282              	// 	Parse a word from input stream and copy it to code dictionary.
 2283              		_HEADER WORDD,4,"WORD"
 2284 0d76 42F804ED 		_NEST
 2285 0d7a FFF7ACFF 		BL	PARSE
 2286 0d7e FFF763FC 		BL	HERE
 2287 0d82 FFF786FA 		BL	CELLP
 2288 0d86 FFF7B0FC 		BL	PACKS
 2289 0d8a 52F804FB 		_UNNEST
 2290              	
 2291              	//    TOKEN	( -- a //  string> )
 2292              	// 	Parse a word from input stream and copy it to name dictionary.
 2293              		_HEADER TOKEN,5,"TOKEN"
 2294 0d8e 42F804ED 		_NEST
 2295 0d92 FFF784FA 		BL	BLANK
 2296 0d96 FFF7EEFF 		BL	WORDD
 2297 0d9a 52F804FB 		_UNNEST
 2298              	
 2299              	// **************************************************************************
 2300              	//  Dictionary search
 2301              	
 2302              	//    >CFA	( na -- cfa )
 2303              	// 	Return a code field address given a name address.
 2304              		_HEADER TOCFA,4,">CFA"
 2305 0d9e 42F804ED 		_NEST
 2306 0da2 FFF701FB 		BL	COUNT
 2307 0da6 FFF7C8F9 		_DOLIT
 2308 0daa 1F000000 		.word	0x1F
 2309 0dae FFF729FA 		BL	ANDD
 2310 0db2 FFF748FA 		BL	PLUS
 2311 0db6 FFF707FC 		BL	ALGND
 2312 0dba 52F804FB 		_UNNEST
 2313              	
 2314              	//	NAME> ( na -- ca ) 
 2315              	// Return code address 
 2316              		_HEADER NAMET,5,"NAME>"
 2317 0dbe 42F804ED 		_NEST 
 2318 0dc2 FFF7ECFF 		BL	TOCFA
 2319 0dc6 FFF7EEF9 		BL	AT  
 2320 0dca 52F804FB 		_UNNEST 
 2321              	
 2322              	
 2323              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2324              	// 	Compare u bytes in two strings. Return 0 if identical.
 2325              	//
 2326              	//  Picatout 2020-12-01, 
 2327              	//      Because of problem with .align directive that
 2328              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2329              	// 		words  to do a byte by byte comparison. 
 2330              	//
 2331              		_HEADER SAMEQ,5,"SAME?"
ARM GAS  stm32eforth.s 			page 45


 2332 0dce 42F804ED 		_NEST
 2333 0dd2 FFF7FBF9 		BL	TOR
 2334 0dd6 00F01EB8 		B.W	SAME2
 2335              	SAME1:
 2336 0dda FFF70AFA 		BL	OVER  // ( a1 a2 -- a1 a2 a1 )
 2337 0dde FFF7F1F9 		BL	RAT   // a1 a2 a1 u 
 2338 0de2 FFF730FA 		BL	PLUS  // a1 a2 a1+u 
 2339 0de6 FFF7E6F9 		BL	CAT	   // a1 a2 c1    		
 2340 0dea FFF702FA 		BL	OVER  // a1 a2 c1 a2 
 2341 0dee FFF7E9F9 		BL	RAT    
 2342 0df2 FFF728FA 		BL	PLUS    
 2343 0df6 FFF7DEF9 		BL	CAT	  // a1 a2 c1 c2
 2344 0dfa FFF728FA 		BL	SUBB  
 2345 0dfe FFF75FFA 		BL	QDUP
 2346 0e02 FFF7B7F9 		BL	QBRAN
 2347 0e06 160E0018 		.word	SAME2+MAPOFFSET
 2348 0e0a FFF7D6F9 		BL	RFROM
 2349 0e0e FFF7E6F9 		BL	DROP
 2350 0e12 52F804FB 		_UNNEST	// strings not equal
 2351              	SAME2:
 2352 0e16 FFF79EF9 		BL	DONXT
 2353 0e1a DA0D0018 		.word	SAME1+MAPOFFSET
 2354 0e1e FFF78CF9 		_DOLIT
 2355 0e22 00000000 		.word	0
 2356 0e26 52F804FB 		_UNNEST	// strings equal
 2357              	
 2358              	//    find	( a na -- ca na | a F )
 2359              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2360              	
 2361              	//  Picatout 2020-12-01,  
 2362              	//		Modified from original. See comment for word "SAME?" 
 2363              	
 2364              	// 	.word	_SAMEQ+MAPOFFSET
 2365              	// _FIND	.byte  4
 2366              	// 	.ascii "find"
 2367              	// 	.p2align 2 	
 2368              	FIND:
 2369 0e2a 42F804ED 		_NEST
 2370 0e2e FFF7DCF9 		BL	SWAP			// na a	
 2371 0e32 FFF7B9FA 		BL	COUNT			// na a+1 count
 2372 0e36 FFF7D5F9 		BL	DUPP 
 2373 0e3a FFF7E8FA 		BL	TEMP
 2374 0e3e FFF7ACF9 		BL	STORE			// na a+1 count 
 2375 0e42 FFF7C3F9 		BL  TOR		// na a+1  R: count  
 2376 0e46 FFF7D0F9 		BL	SWAP			// a+1 na
 2377              	FIND1:
 2378 0e4a FFF7CBF9 		BL	DUPP			// a+1 na na
 2379 0e4e FFF791F9 		BL	QBRAN
 2380 0e52 9A0E0018 		.word	FIND6+MAPOFFSET	// end of vocabulary
 2381 0e56 FFF7C5F9 		BL	DUPP			// a+1 na na
 2382 0e5a FFF7ACF9 		BL	CAT			// a+1 na name1
 2383 0e5e FFF76CF9 		_DOLIT
 2384 0e62 1FFFFFFF 		.word	MASKK
 2385 0e66 FFF7CDF9 		BL	ANDD
 2386 0e6a FFF7ABF9 		BL	RAT			// a+1 na name1 count 
 2387 0e6e FFF7D3F9 		BL	XORR			// a+1 na,  same length?
 2388 0e72 FFF77FF9 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 46


 2389 0e76 860E0018 		.word	FIND2+MAPOFFSET
 2390 0e7a FFF70DFA 		BL	CELLM			// a+1 la
 2391 0e7e FFF792F9 		BL	AT			// a+1 next_na
 2392 0e82 FFF7E2BF 		B.w	FIND1			// try next word
 2393              	FIND2:   
 2394 0e86 FFF7F8F9 		BL	ONEP			// a+1 na+1
 2395 0e8a FFF7C0FA 		BL	TEMP
 2396 0e8e FFF78AF9 		BL	AT			// a+1 na+1 count
 2397 0e92 FFF79CFF 		BL	SAMEQ		// a+1 na+1 ? 
 2398              	FIND3:	
 2399 0e96 00F00CB8 		B.w	FIND4
 2400              	FIND6:	
 2401 0e9a FFF78EF9 		BL	RFROM			// a+1 0 name1 -- , no match
 2402 0e9e FFF79EF9 		BL	DROP			// a+1 0
 2403 0ea2 FFF7A2F9 		BL	SWAP			// 0 a+1
 2404 0ea6 FFF7EBF9 		BL	ONEM			// 0 a
 2405 0eaa FFF79EF9 		BL	SWAP			// a 0 
 2406 0eae 52F804FB 		_UNNEST			// return without a match
 2407              	FIND4:	
 2408 0eb2 FFF75FF9 		BL	QBRAN			// a+1 na+1
 2409 0eb6 CA0E0018 		.word	FIND5+MAPOFFSET	// found a match
 2410 0eba FFF7E1F9 		BL	ONEM			// a+1 na
 2411 0ebe FFF7EBF9 		BL	CELLM			// a+4 la
 2412 0ec2 FFF770F9 		BL	AT			// a+1 next_na
 2413 0ec6 FFF7C0BF 		B.w	FIND1			// compare next name
 2414              	FIND5:	
 2415 0eca FFF776F9 		BL	RFROM			// a+1 na+1 count
 2416 0ece FFF786F9 		BL	DROP			// a+1 na+1
 2417 0ed2 FFF78AF9 		BL	SWAP			// na+1 a+1
 2418 0ed6 FFF782F9 		BL	DROP			// na+1
 2419 0eda FFF7D1F9 		BL	ONEM			// na
 2420 0ede FFF781F9 		BL	DUPP			// na na
 2421 0ee2 FFF76CFF 		BL	NAMET			// na ca
 2422 0ee6 FFF780F9 		BL	SWAP			// ca na
 2423 0eea 52F804FB 		_UNNEST			//  return with a match
 2424              	
 2425              	//    NAME?	( a -- ca na | a F )
 2426              	// 	Search all context vocabularies for a string.
 2427              		_HEADER NAMEQ,5,"NAME?"
 2428 0eee 42F804ED 		_NEST
 2429 0ef2 FFF7AAFA 		BL	CNTXT
 2430 0ef6 FFF756F9 		BL	AT
 2431 0efa FFF796FF 		BL	FIND
 2432 0efe 52F804FB 		_UNNEST
 2433              	
 2434              	// **************************************************************************
 2435              	//  Terminal input
 2436              	
 2437              	//    	  ( bot eot cur -- bot eot cur )
 2438              	// 	Backup the cursor by one character.
 2439              	
 2440              	// 	.word	_NAMEQ+MAPOFFSET
 2441              	// _BKSP	.byte  2
 2442              	// 	.ascii "^H"
 2443              	// 	.p2align 2 	
 2444              	BKSP:
 2445 0f02 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 47


 2446 0f06 FFF761F9 		BL	TOR
 2447 0f0a FFF772F9 		BL	OVER
 2448 0f0e FFF754F9 		BL	RFROM
 2449 0f12 FFF76AF9 		BL	SWAP
 2450 0f16 FFF76CF9 		BL	OVER
 2451 0f1a FFF77DF9 		BL	XORR
 2452 0f1e FFF729F9 		BL	QBRAN
 2453 0f22 4A0F0018 		.word	BACK1+MAPOFFSET
 2454 0f26 FFF708F9 		_DOLIT
 2455 0f2a 08000000 		.word	BKSPP
 2456 0f2e FFF7F7F8 		BL	TECHO
 2457              	// 	BL	ATEXE
 2458 0f32 FFF7A5F9 		BL	ONEM
 2459 0f36 FFF7B2F9 		BL	BLANK
 2460 0f3a FFF7F1F8 		BL	TECHO
 2461              	// 	BL	ATEXE
 2462 0f3e FFF7FCF8 		_DOLIT
 2463 0f42 08000000 		.word	BKSPP
 2464 0f46 FFF7EBF8 		BL	TECHO
 2465              	// 	BL	ATEXE
 2466              	BACK1:
 2467 0f4a 52F804FB 		  _UNNEST
 2468              	
 2469              	//    TAP	 ( bot eot cur c -- bot eot cur )
 2470              	// 	Accept and echo the key stroke and bump the cursor.
 2471              	
 2472              	// 	.word	_BKSP+MAPOFFSET
 2473              	// _TAP	.byte  3
 2474              	// 	.ascii "TAP"
 2475              	// 	.p2align 2 	
 2476              	TAP:
 2477 0f4e 42F804ED 		_NEST
 2478 0f52 FFF747F9 		BL	DUPP
 2479 0f56 FFF7E3F8 		BL	TECHO
 2480              	// 	BL	ATEXE
 2481 0f5a FFF74AF9 		BL	OVER
 2482 0f5e FFF724F9 		BL	CSTOR
 2483 0f62 FFF78AF9 		BL	ONEP
 2484 0f66 52F804FB 		_UNNEST
 2485              	
 2486              	//    kTAP	( bot eot cur c -- bot eot cur )
 2487              	// 	Process a key stroke, CR or backspace.
 2488              	
 2489              	// 	.word	_TAP+MAPOFFSET
 2490              	// _KTAP	.byte  4
 2491              	// 	.ascii "kTAP"
 2492              	// 	.p2align 2 	
 2493              	KTAP:
 2494              	TTAP:
 2495 0f6a 42F804ED 		_NEST
 2496 0f6e FFF739F9 		BL	DUPP
 2497 0f72 FFF7E2F8 		_DOLIT
 2498 0f76 0D000000 		.word	CRR
 2499 0f7a FFF74DF9 		BL	XORR
 2500 0f7e FFF7F9F8 		BL	QBRAN
 2501 0f82 B20F0018 		.word	KTAP2+MAPOFFSET
 2502 0f86 FFF7D8F8 		_DOLIT
ARM GAS  stm32eforth.s 			page 48


 2503 0f8a 08000000 		.word	BKSPP
 2504 0f8e FFF743F9 		BL	XORR
 2505 0f92 FFF7EFF8 		BL	QBRAN
 2506 0f96 AA0F0018 		.word	KTAP1+MAPOFFSET
 2507 0f9a FFF780F9 		BL	BLANK
 2508 0f9e FFF7D6FF 		BL	TAP
 2509 0fa2 52F804FB 		_UNNEST
 2510 0fa6 00000000 		.word	0			// patch
 2511              	KTAP1:
 2512 0faa FFF7AAFF 	  BL	BKSP
 2513 0fae 52F804FB 		_UNNEST
 2514              	KTAP2:
 2515 0fb2 FFF714F9 	  BL	DROP
 2516 0fb6 FFF718F9 		BL	SWAP
 2517 0fba FFF710F9 		BL	DROP
 2518 0fbe FFF711F9 		BL	DUPP
 2519 0fc2 52F804FB 		_UNNEST
 2520              	
 2521              	//    ACCEPT	( b u -- b u )
 2522              	// 	Accept characters to input buffer. Return with actual count.
 2523              		_HEADER ACCEP,6,"ACCEPT"
 2524 0fc6 42F804ED 		_NEST
 2525 0fca FFF712F9 		BL	OVER
 2526 0fce FFF73AF9 		BL	PLUS
 2527 0fd2 FFF70EF9 		BL	OVER
 2528              	ACCP1:
 2529 0fd6 FFF782F9 	  BL	DDUP
 2530 0fda FFF71DF9 		BL	XORR
 2531 0fde FFF7C9F8 		BL	QBRAN
 2532 0fe2 12100018 		.word	ACCP4+MAPOFFSET
 2533 0fe6 FFF713FD 		BL	KEY
 2534 0fea FFF7FBF8 		BL	DUPP
 2535 0fee FFF756F9 		BL	BLANK
 2536 0ff2 FFF7A2F8 		_DOLIT
 2537 0ff6 7F000000 		.word	127
 2538 0ffa FFF754FA 		BL	WITHI
 2539 0ffe FFF7B9F8 		BL	QBRAN
 2540 1002 0C100018 		.word	ACCP2+MAPOFFSET
 2541 1006 FFF7A2FF 		BL	TAP
 2542 100a 01E0     		B	ACCP3
 2543              	ACCP2:
 2544 100c FFF7ADFF 	  BL	KTAP
 2545              	// 	BL	ATEXE
 2546              	ACCP3:	  
 2547 1010 E1E7     		B	ACCP1
 2548              	ACCP4:
 2549 1012 FFF7E4F8 	  BL	DROP
 2550 1016 FFF7ECF8 		BL	OVER
 2551 101a FFF718F9 		BL	SUBB
 2552 101e 52F804FB 		_UNNEST
 2553              	
 2554              	//    QUERY	( -- )
 2555              	// 	Accept input stream to terminal input buffer.
 2556              		_HEADER QUERY,5,"QUERY"
 2557 1022 42F804ED 		_NEST
 2558 1026 FFF71FFB 		BL	TIB
 2559 102a FFF786F8 		_DOLIT
ARM GAS  stm32eforth.s 			page 49


 2560 102e 50000000 		.word	80
 2561 1032 FFF7C8FF 		BL	ACCEP
 2562 1036 FFF7F9F9 		BL	NTIB
 2563 103a FFF7AEF8 		BL	STORE
 2564 103e FFF7CEF8 		BL	DROP
 2565 1042 FFF77AF8 		_DOLIT
 2566 1046 00000000 		.word	0
 2567 104a FFF7EAF9 		BL	INN
 2568 104e FFF7A4F8 		BL	STORE
 2569 1052 52F804FB 		_UNNEST
 2570              	
 2571              	// **************************************************************************
 2572              	//  Error handling
 2573              	
 2574              	//    ABORT	( a -- )
 2575              	// 	Reset data stack and jump to QUIT.
 2576              		_HEADER ABORT,5,"ABORT"
 2577 1056 42F804ED 		_NEST
 2578 105a FFF7E3FC 		BL	SPACE
 2579              	ABORT1:
 2580 105e FFF7A3F9 		BL	COUNT
 2581 1062 FFF7FBFC 		BL	TYPEE
 2582 1066 FFF768F8 		_DOLIT
 2583 106a 3F000000 		.word	0X3F
 2584 106e FFF757F8 		BL	EMIT
 2585 1072 FFF707FD 		BL	CR
 2586 1076 00F089F8 		BL	PRESE
 2587 107a 00F091B8 		B.W	QUIT
 2588              	
 2589              	//    _abort"	( f -- )
 2590              	// 	Run time routine of ABORT" . Abort with a message.
 2591              	
 2592              	// 	.word	_ABORT+MAPOFFSET
 2593              	// _ABORQ	.byte  COMPO+6
 2594              	// 	.ascii "abort\""
 2595              	// 	.p2align 2 	
 2596              	ABORQ:
 2597 107e 42F804ED 		_NEST
 2598 1082 FFF70FFD 		BL	DOSTR 
 2599 1086 FFF7B0F8 		BL	SWAP 
 2600 108a FFF773F8 		BL	QBRAN
 2601 108e 94100018 		.word	1f+MAPOFFSET	// text flag
 2602 1092 E4E7     		B	ABORT1 
 2603              	1:
 2604 1094 FFF7A3F8 		BL	DROP
 2605 1098 52F804FB 		_UNNEST			// drop error
 2606              	
 2607              	// **************************************************************************
 2608              	//  The text interpreter
 2609              	
 2610              	//    $INTERPRET  ( a -- )
 2611              	// 	Interpret a word. If failed, try to convert it to an integer.
 2612              		_HEADER INTER,10,"$INTERPRET"
 2613 109c 42F804ED 		_NEST
 2614 10a0 FFF725FF 		BL	NAMEQ
 2615 10a4 FFF70CF9 		BL	QDUP	// ?defined
 2616 10a8 FFF764F8 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 50


 2617 10ac DC100018 		.word	INTE1+MAPOFFSET
 2618 10b0 FFF779F8 		BL	AT
 2619 10b4 FFF741F8 		_DOLIT
 2620 10b8 40000000 		.word	COMPO
 2621 10bc FFF7A2F8 		BL	ANDD	// ?compile only lexicon bits
 2622 10c0 FFF7DDFF 		BL	ABORQ
 2623 10c4 0D       		.byte	13
 2624 10c5 20636F6D 		.ascii " compile only"
 2624      70696C65 
 2624      206F6E6C 
 2624      79
 2625 10d2 00BF     		.p2align 2 	
 2626 10d4 FFF73AF8 		BL	EXECU
 2627 10d8 52F804FB 		_UNNEST			// execute defined word
 2628              	INTE1:
 2629 10dc FFF702FC 	  BL	NUMBQ
 2630 10e0 FFF748F8 		BL	QBRAN
 2631 10e4 EC100018 		.word	INTE2+MAPOFFSET
 2632 10e8 52F804FB 		_UNNEST
 2633              	INTE2:
 2634 10ec FFF7B3BF 	  B.W	ABORT	// error
 2635              	
 2636              	//    [	   ( -- )
 2637              	// 	Start the text interpreter.
 2638              		_HEADER LBRAC,IMEDD+1,"["
 2639 10f0 42F804ED 		_NEST
 2640 10f4 FFF721F8 		_DOLIT
 2641 10f8 9C100018 		.word	INTER+MAPOFFSET
 2642 10fc FFF79BF9 		BL	TEVAL
 2643 1100 FFF74BF8 		BL	STORE
 2644 1104 52F804FB 		_UNNEST
 2645              	
 2646              	//    .OK	 ( -- )
 2647              	// 	Display "ok" only while interpreting.
 2648              		_HEADER DOTOK,3,".OK"
 2649 1108 42F804ED 		_NEST
 2650 110c FFF715F8 		_DOLIT
 2651 1110 9C100018 		.word	INTER+MAPOFFSET
 2652 1114 FFF78FF9 		BL	TEVAL
 2653 1118 FFF745F8 		BL	AT
 2654 111c FFF701F9 		BL	EQUAL
 2655 1120 FFF728F8 		BL	QBRAN
 2656 1124 30110018 		.word	DOTO1+MAPOFFSET
 2657 1128 FFF7E4FC 		BL	DOTQP
 2658 112c 03       		.byte	3
 2659 112d 206F6B   		.ascii " ok"
 2660              	DOTO1:
 2661 1130 FFF7A8FC 		BL	CR
 2662 1134 52F804FB 		_UNNEST
 2663              	
 2664              	//    ?STACK	( -- )
 2665              	// 	Abort if the data stack underflows.
 2666              		_HEADER QSTAC,6,"?STACK"
 2667 1138 42F804ED 		_NEST
 2668 113c FFF76BFA 		BL	DEPTH
 2669 1140 FFF75BF8 		BL	ZLESS	// check only for underflow
 2670 1144 FFF79BFF 		BL	ABORQ
ARM GAS  stm32eforth.s 			page 51


 2671 1148 0A       		.byte	10
 2672 1149 20756E64 		.ascii " underflow"
 2672      6572666C 
 2672      6F77
 2673 1153 00       		.p2align 2 	
 2674 1154 52F804FB 		_UNNEST
 2675              	
 2676              	//    EVAL	( -- )
 2677              	// 	Interpret the input stream.
 2678              		_HEADER EVAL,4,"EVAL"
 2679 1158 42F804ED 		_NEST
 2680              	EVAL1:
 2681 115c FFF717FE 	    BL	TOKEN
 2682 1160 FFF740F8 		BL	DUPP
 2683 1164 FFF727F8 		BL	CAT	// ?input stream empty
 2684 1168 FFF704F8 		BL	QBRAN
 2685 116c 80110018 		.word	EVAL2+MAPOFFSET
 2686 1170 FFF761F9 		BL	TEVAL
 2687 1174 FFF77CFA 		BL	ATEXE
 2688 1178 FFF7DEFF 		BL	QSTAC	// evaluate input, check stack
 2689 117c FFF7EEBF 		B.W	EVAL1
 2690              	EVAL2:
 2691 1180 FFF72DF8 		BL	DROP
 2692 1184 FFF7C0FF 		BL	DOTOK
 2693 1188 52F804FB 		_UNNEST	// prompt
 2694              	
 2695              	//    PRESET	( -- )
 2696              	// 	Reset data stack pointer and the terminal input buffer.
 2697              		_HEADER PRESE,6,"PRESET"
 2698 118c 42F804ED 		_NEST
 2699 1190 4FF49D41 		_MOV32 R1,SPP // init SP 
 2699      C2F20001 
 2700 1198 85EA0505 		EOR	R5,R5,R5//  init TOS=0
 2701 119c 52F804FB 		_UNNEST 
 2702              	
 2703              	//    QUIT	( -- )
 2704              	// 	Reset return stack pointer and start text interpreter.
 2705              		_HEADER QUIT,4,"QUIT"
 2706 11a0 42F804ED 		_NEST
 2707 11a4 4FF49F42 		_MOV32 R2,RPP
 2707      C2F20002 
 2708              	QUIT1:
 2709 11ac FFF7A0FF 		BL	LBRAC			// start interpretation
 2710              	QUIT2:
 2711 11b0 FFF737FF 		BL	QUERY			// get input
 2712 11b4 FFF7D0FF 		BL	EVAL
 2713 11b8 FEF7E8FF 		BL	BRAN
 2714 11bc B0110018 		.word	QUIT2+MAPOFFSET	// continue till error
 2715              	
 2716              	/***************************
 2717              	//  Flash memory interface
 2718              	***************************/
 2719              	// UNLOCK ( T|F -- )
 2720              	// lock or unlock FLASH write 
 2721              		_HEADER UNLOCK,6,"UNLOCK"
 2722 11c0 42F804ED 		_NEST 
 2723 11c4 FEF7D6FF 		BL QBRAN
ARM GAS  stm32eforth.s 			page 52


 2724 11c8 E8110018 		.word LOCK+MAPOFFSET
 2725 11cc D448     		ldr	r0, flash_regs 
 2726 11ce 4FF03404 		mov r4,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 2727 11d2 C460     		str r4,[r0,#FLASH_SR]
 2728 11d4 0469     		ldr r4,[r0,#FLASH_CR]
 2729 11d6 14F0800F 		tst r4,#(1<<7)
 2730 11da 03D0     		beq 1f 
 2731 11dc D14C     		ldr	r4, flash_regs+4 // key1
 2732 11de 4460     		str	r4, [r0, #FLASH_KEYR]
 2733 11e0 D14C     		ldr	r4, flash_regs+8 // key2 
 2734 11e2 4460     		str	r4, [r0, #FLASH_KEYR]
 2735              		/* unlock option registers */
 2736              	/*
 2737              		ldr	r4, flash_regs+4 
 2738              		str	r4, [r0, #FLASH_OPTKEYR]
 2739              		ldr	r4, flash_regs+8
 2740              		str	r4, [r0, #FLASH_OPTKEYR]
 2741              	*/ 
 2742              	1:
 2743 11e4 52F804FB 		_UNNEST
 2744              	 // lock flash memory
 2745              	LOCK: 
 2746 11e8 CD48     		ldr r0,flash_regs  
 2747              	//	ldr r4,[r0,#FLASH_CR]
 2748 11ea 4FF08004 		mov r4,#(1<<7)
 2749 11ee 0461     		str r4,[r0,#FLASH_CR]
 2750 11f0 52F804FB 		_UNNEST  
 2751              	
 2752              	WAIT_BSY:
 2753 11f4 CA48     		ldr	r0,flash_regs
 2754              	WAIT1:
 2755 11f6 C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 2756 11f8 14F00104 		ands	r4, #0x1	//  BSY
 2757 11fc FBD1     		bne	WAIT1
 2758 11fe 7047     		_NEXT
 2759              	
 2760              	//    ERASE_PAGE	   ( adr -- )
 2761              	// 	  Erase one page of flash memory.
 2762              	//    stm32f103 page size is 1024 bytes 
 2763              	//    adr is any address inside page to erase 
 2764              		_HEADER EPAGE,10,"ERASE_PAGE"
 2765 1200 42F804ED 		_NEST
 2766 1204 FFF7F6FF 		bl	WAIT_BSY
 2767 1208 FEF797FF 		_DOLIT 
 2768 120c 01000000 		.word 1 
 2769 1210 FFF7D6FF 		bl  UNLOCK 
 2770 1214 C248     		ldr r0,flash_regs 	 
 2771 1216 4FF00204 		mov r4,#2 // set PER bit 
 2772 121a 0461     		str r4,[r0,#FLASH_CR]
 2773 121c 4561     		str r5,[r0,#FLASH_AR] // page to erase address 
 2774 121e 0469     		ldr	r4,[r0, #FLASH_CR]	
 2775 1220 44F04004 		orr	R4,#0x40	//  set STRT bit   
 2776 1224 0461     		str	r4,[r0, #FLASH_CR]	//  start erasing
 2777 1226 FFF7E5FF 	 	bl	WAIT_BSY // wait until done
 2778 122a FEF786FF 		_DOLIT 
 2779 122e 00000000 		.word 0 
 2780 1232 FFF7C5FF 		bl	UNLOCK  // lock flash write 
ARM GAS  stm32eforth.s 			page 53


 2781 1236 C568     		ldr r5,[r0,#FLASH_SR] // check for errors 
 2782 1238 05F01405 		and r5,r5,#(5<<2)
 2783 123c FFF71FFF 		bl ABORQ 
 2784 1240 0D       		.byte 13
 2785 1241 20657261 		.ascii " erase error!"
 2785      73652065 
 2785      72726F72 
 2785      21
 2786 124e 00BF     		.p2align 2
 2787 1250 52F804FB 		_UNNEST
 2788              	
 2789              	// store 16 bit word
 2790              	// expect flash unlocked  
 2791              	HWORD_WRITE: // ( hword address -- )
 2792 1254 42F804ED 		_NEST
 2793 1258 0469     		ldr	r4, [r0, #FLASH_CR]	//  FLASH_CR
 2794              	//	bic r4,#(1<<9)|(1<<5)|(1<<4)|(1<<2)|(1<<1) //  clear OPTWRE|OPTER|OPTPG|MER|PER
 2795 125a 4FF00104 		mov r4,#1 // set PG 
 2796 125e 0461     		str r4,[r0,#FLASH_CR]
 2797 1260 2E46     		mov r6,r5 
 2798 1262 51F8045B 		_POP 
 2799 1266 3580     		strh r5,[r6] 
 2800 1268 FFF7C4FF 		bl WAIT_BSY 
 2801 126c C568     		ldr r5,[r0,#FLASH_SR]
 2802 126e 05F01405 		and r5,r5,#(5<<2) 
 2803 1272 FEF77FFF 		bl QBRAN
 2804 1276 8C120018 		.word 1f+MAPOFFSET 
 2805 127a FFF700FF 		bl ABORQ
 2806 127e 0D       		.byte 13
 2807 127f 20777269 		.ascii " write error!"
 2807      74652065 
 2807      72726F72 
 2807      21
 2808              		.p2align 2
 2809              	1:	 
 2810 128c 52F804FB 		_UNNEST 
 2811              	
 2812              	
 2813              	//    I!	   ( data address -- )
 2814              	// 	   Write one word into flash memory
 2815              	//	   address must even 
 2816              		_HEADER ISTOR,2,"I!"
 2817 1290 42F804ED 		_NEST
 2818 1294 FFF7AEFF 		bl	WAIT_BSY
 2819 1298 FEF74FFF 		_DOLIT 
 2820 129c 01000000 		.word 1 
 2821 12a0 FFF78EFF 		bl  UNLOCK 
 2822 12a4 FFF71BF8 		BL DDUP 
 2823 12a8 FEF790FF 		BL TOR 
 2824 12ac FEF78EFF 		BL TOR 
 2825 12b0 FFF7D0FF 		BL HWORD_WRITE
 2826 12b4 FEF781FF 		BL RFROM 
 2827 12b8 4FEA3545 		ror r5,r5,#16
 2828 12bc FEF77DFF 		BL RFROM 
 2829 12c0 05F10205 		add r5,r5,#2 
 2830 12c4 FFF7C6FF 		BL HWORD_WRITE 
 2831 12c8 FEF737FF 		_DOLIT 
ARM GAS  stm32eforth.s 			page 54


 2832 12cc 00000000 		.word 0
 2833 12d0 FFF776FF 		bl UNLOCK 
 2834 12d4 52F804FB 		_UNNEST
 2835              	
 2836              	// IMG_SIZE ( -- u )
 2837              	// return flash pages required to save 
 2838              	// user ram  
 2839              		_HEADER IMG_SIZE,8,"IMG_SIZE"
 2840 12d8 42F804ED 		_NEST
 2841 12dc FEF72DFF 		_DOLIT 
 2842 12e0 38000000 		.word VARS_END_OFS-IMG_SIGN_OFS 
 2843 12e4 FFF7CCF8 		BL USER_END 
 2844 12e8 FFF7C3F8 		BL USER_BEGIN 
 2845 12ec FEF7AFFF 		BL SUBB 
 2846 12f0 FEF7A9FF 		BL PLUS 
 2847 12f4 FEF721FF 		_DOLIT 
 2848 12f8 00040000 		.word 1024 
 2849 12fc FFF730F9 		BL SLMOD 
 2850 1300 FEF773FF 		BL SWAP 
 2851 1304 FEF736FF 		BL QBRAN 
 2852 1308 10130018 		.word 1f+MAPOFFSET 
 2853 130c FEF7B5FF 		BL ONEP
 2854              	1:
 2855 1310 52F804FB 		_UNNEST  
 2856              	
 2857              	// IMG? (  -- T|F )
 2858              	// check if an image has been saved in FLASH 
 2859              		_HEADER IMGQ,4,"IMG?"
 2860 1314 42F804ED 		_NEST 
 2861 1318 FFF7B9F8 		BL IMG_ADR 
 2862 131c FEF743FF 		BL AT 
 2863 1320 FFF7BCF8 		BL IMG_SIGN  
 2864 1324 FEF73FFF 		BL AT 
 2865 1328 FEF776FF 		BL XORR  
 2866 132c FEF7F2FF 		BL ZEQUAL
 2867 1330 52F804FB 		_UNNEST
 2868              	
 2869              	// LOAD_IMG (  -- )
 2870              	// Load image from FLASH to RAM. 
 2871              		_HEADER LOAD_IMG,8,"LOAD_IMG"
 2872 1334 42F804ED 		_NEST 
 2873 1338 FFF7ECFF 		BL IMGQ 
 2874 133c FEF71AFF 		BL QBRAN 
 2875 1340 88130018 		.word 1f+MAPOFFSET
 2876              	/* copy system variables to RAM */
 2877 1344 FFF7A3F8 		BL IMG_ADR 
 2878 1348 FEF74CFF 		BL DUPP 
 2879 134c FEF73EFF 		BL TOR   // save source address 
 2880 1350 FFF7A4F8 		BL IMG_SIGN 
 2881 1354 41F8045D 		_PUSH 
 2882 1358 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 2883 135c FEF742FF 		BL DUPP 
 2884 1360 FEF734FF 		BL TOR 
 2885 1364 FFF79EF9 		BL MOVE // ( src dest count -- ) R: src count 
 2886              	/* copy user definitions */
 2887 1368 FEF727FF 		BL RFROM 
 2888 136c FEF725FF 		BL RFROM  
ARM GAS  stm32eforth.s 			page 55


 2889 1370 FEF769FF 		BL PLUS // source address  
 2890 1374 FFF77DF8 		BL USER_BEGIN // destination address
 2891 1378 FFF766F9 		BL HERE  
 2892 137c FEF739FF 		BL OVER 
 2893 1380 FEF765FF 		BL SUBB  // byte count 
 2894 1384 FFF78EF9 		BL MOVE
 2895 1388 52F804FB 	1:	_UNNEST  
 2896              	
 2897              	// ERASE_MPG ( u1 u2 -- )
 2898              	// erase many pages 
 2899              	// u1 first page number 
 2900              	// u2 how many pages  
 2901              		_HEADER ERASE_MPG,9,"ERASE_MPG"
 2902 138c 42F804ED 		_NEST 
 2903 1390 FEF71CFF 		BL TOR 
 2904 1394 00F03FF8 		BL PG_TO_ADR 
 2905 1398 FEF7F8FE 		BL BRAN 
 2906 139c B4130018 		.word 2f+MAPOFFSET 
 2907              	1:
 2908 13a0 FEF720FF 		BL DUPP 
 2909 13a4 FEF712FF 		BL TOR 
 2910 13a8 FFF72AFF 		BL EPAGE 
 2911 13ac FEF705FF 		BL RFROM
 2912 13b0 05F58065 		add r5,#PAGE_SIZE 
 2913              	2:
 2914 13b4 FEF7CFFE 		BL DONXT
 2915 13b8 A0130018 		.word 1b+MAPOFFSET 
 2916 13bc 51F8045B 		_POP 
 2917 13c0 52F804FB 		_UNNEST 
 2918              	
 2919              	// FLSH_WR ( src dest u -- dest+u )
 2920              	// write u words to flash memory 
 2921              		_HEADER FLSH_WR,7,"FLSH_WR"
 2922 13c4 42F804ED 		_NEST 
 2923 13c8 FEF700FF 		BL TOR
 2924 13cc FEF7DEFE 		BL BRAN 
 2925 13d0 F4130018 		.word 3f+MAPOFFSET  
 2926              	/* write system variables to FLASH */
 2927 13d4 FEF7FAFE 	2:  BL TOR  // destination address 
 2928 13d8 FEF704FF 		BL DUPP 
 2929 13dc FEF7E3FE 		BL AT   // get data 
 2930 13e0 FEF7F0FE 		BL RAT  // get destination address 
 2931 13e4 FFF754FF 		BL ISTOR
 2932 13e8 FEF753FF 		BL CELLP  // increment source address 
 2933 13ec FEF7E5FE 		BL RFROM 
 2934 13f0 FEF74FFF 		BL CELLP  // increment dest address 
 2935 13f4 FEF7AFFE 	3:	BL DONXT 
 2936 13f8 D4130018 		.word 2b+MAPOFFSET
 2937 13fc FEF7E6FE 		BL TOR 
 2938 1400 FEF7EDFE 		BL DROP 
 2939 1404 FEF7D9FE 		BL RFROM 
 2940 1408 52F804FB 		_UNNEST 
 2941              	
 2942              	// ADR>PG ( a -- n )
 2943              	// convert address to page number, {0..127} 
 2944              		_HEADER ADR_TO_PG,6,"ADR>PG"
 2945 140c 4FEA9525 		lsr r5,#10 
ARM GAS  stm32eforth.s 			page 56


 2946 1410 05F07F05 		and r5,#127 
 2947 1414 7047     		_NEXT  
 2948              	
 2949              	// PG>ADR ( n -- a )
 2950              	// convert page# to address 
 2951              		_HEADER PG_TO_ADR,6,"PG>ADR"
 2952 1416 C0F20205 		movt r5,#2
 2953 141a 4FEA8525 		lsl r5,#10 
 2954 141e 7047     		_NEXT 
 2955              	
 2956              	// ERASE_IMG (  -- )
 2957              	// erase image in from FLASH  
 2958              		_HEADER ERASE_IMG,9,"ERASE_IMG"
 2959 1420 42F804ED 		_NEST
 2960 1424 FFF733F8 		BL IMG_ADR 
 2961 1428 FFF756FF 		BL IMG_SIZE 
 2962 142c FEF7CEFE 		BL TOR 
 2963 1430 FEF7ACFE 		BL BRAN 
 2964 1434 44140018 		.word  2f+MAPOFFSET 
 2965 1438 FEF7D4FE 	1:	BL DUPP 
 2966 143c FFF7E0FE 		BL EPAGE
 2967 1440 05F58065 		ADD R5,#PAGE_SIZE 
 2968 1444 FEF787FE 	2:	BL DONXT 
 2969 1448 38140018 		.word 1b+MAPOFFSET 
 2970 144c FEF7C7FE 		BL DROP 
 2971 1450 52F804FB 		_UNNEST 
 2972              	
 2973              	// SAVE_IMG ( -- )
 2974              	// save in FLASH memory system variables and user defintitions.
 2975              		_HEADER SAVE_IMG,8,"SAVE_IMG"
 2976 1454 42F804ED 		_NEST 
 2977 1458 FFF7F6F8 		BL HERE 
 2978 145c FFF709F8 		BL USER_BEGIN
 2979 1460 FEF75FFF 		BL EQUAL 
 2980 1464 FEF786FE 		BL QBRAN
 2981 1468 70140018 		.word 1f+MAPOFFSET 
 2982 146c 52F804FB 		_UNNEST  // nothing to save 
 2983 1470 FFF750FF 	1:	BL IMGQ 
 2984 1474 FEF77EFE 		BL QBRAN 
 2985 1478 80140018 		.word 2f+MAPOFFSET
 2986              	/* delete saved image */
 2987 147c FFF7D0FF 		BL ERASE_IMG 
 2988              	/* save system variables */
 2989              	2:	
 2990 1480 FFF70CF8 		BL IMG_SIGN // src address 
 2991 1484 FFF703F8 		BL IMG_ADR  //  ( src dest --  
 2992 1488 41F8045D 		_PUSH 
 2993 148c 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 2994 1490 FEF70DFF 		BL CELLSL  // word count 
 2995 1494 FFF796FF 		BL FLSH_WR  // ( src dest count -- dest+u )
 2996              	/* write user definitions */
 2997 1498 FEF7EBFF 		BL USER_BEGIN
 2998 149c FEF7A5FE 		BL SWAP  // ( src dest+ -- )
 2999 14a0 FFF7D2F8 		BL HERE   
 3000 14a4 FEF7E5FF 		BL USER_BEGIN 
 3001 14a8 FEF7D1FE 		BL SUBB 
 3002 14ac FEF7FFFE 		BL CELLSL  // src dest+ count -- 
ARM GAS  stm32eforth.s 			page 57


 3003 14b0 FFF788FF 		BL FLSH_WR  
 3004 14b4 52F804FB 		_UNNEST 
 3005              	
 3006              	// TURNKEY ( -- "WORD") 
 3007              	// set autorun program in 'BOOT variable 
 3008              	// and save image in slot 0.
 3009              		_HEADER TURNKEY,7,"TURNKEY"
 3010 14b8 42F804ED 		_NEST 
 3011 14bc 00F036F8 		BL TICK 
 3012 14c0 FEF79BFF 		BL TBOOT 
 3013 14c4 FEF769FE 		BL STORE 
 3014 14c8 FFF7C4FF 		BL SAVE_IMG 
 3015 14cc 52F804FB 		_UNNEST
 3016              	
 3017              	// FORGET ( -- ) "word"
 3018              	// forget all words defined from "word"	
 3019              		_HEADER FORGET,6,"FORGET"
 3020 14d0 42F804ED 		_NEST 
 3021 14d4 FFF75BFC 		BL TOKEN 
 3022 14d8 FEF784FE 		BL DUPP 
 3023 14dc FEF74AFE 		BL QBRAN 
 3024 14e0 FEF72BFE 		_DOLIT 
 3025 14e4 1C150018 		.word 9f+MAPOFFSET 
 3026 14e8 FFF701FD 		BL NAMEQ // ( a -- ca na | a 0 )
 3027 14ec FEF7E8FE 		BL QDUP 
 3028 14f0 FEF740FE 		BL QBRAN 
 3029 14f4 18150018 		.word 8f+MAPOFFSET
 3030 14f8 FEF7CEFE 		BL CELLM // ( ca la )
 3031 14fc FEF772FE 		BL DUPP 
 3032 1500 FEF7A8FF 		BL CPP   
 3033 1504 FEF749FE 		BL STORE
 3034 1508 FEF74DFE 		BL AT 
 3035 150c FEF7ACFF 		BL LAST 
 3036 1510 FEF743FE 		BL STORE
 3037 1514 00F0A0F9 		BL OVERT 
 3038 1518 FEF761FE 	8:  BL DROP 
 3039 151c 52F804FB 	9:	_UNNEST 
 3040              	
 3041              	flash_regs:
 3042 1520 00200240 		.word FLASH_BASE_ADR // 0 
 3043 1524 23016745 		.word FLASH_KEY1   // 4 
 3044 1528 AB89EFCD 		.word FLASH_KEY2   // 8
 3045              	
 3046              	// **************************************************************************
 3047              	//  The compiler
 3048              	
 3049              	//    '	   ( -- ca )
 3050              	// 	Search context vocabularies for the next word in input stream.
 3051              		_HEADER TICK,1,"'"
 3052 152c 42F804ED 		_NEST
 3053 1530 FFF72DFC 		BL	TOKEN
 3054 1534 FFF7DBFC 		BL	NAMEQ	// ?defined
 3055 1538 FEF71CFE 		BL	QBRAN
 3056 153c 44150018 		.word	TICK1+MAPOFFSET
 3057 1540 52F804FB 		_UNNEST	// yes, push code address
 3058 1544 FFF787BD 	TICK1:	B.W	ABORT	// no, error
 3059              	
ARM GAS  stm32eforth.s 			page 58


 3060              	//    ALLOT	( n -- )
 3061              	// 	Allocate n bytes to the ram area.
 3062              		_HEADER ALLOT,5,"ALLOT"
 3063 1548 42F804ED 		_NEST
 3064 154c FEF782FF 		BL	CPP
 3065 1550 FEF713FF 		BL	PSTOR
 3066 1554 52F804FB 		_UNNEST			// adjust code pointer
 3067              	
 3068              	//    ,	   ( w -- )
 3069              	// 	Compile an integer into the code dictionary.
 3070              		_HEADER COMMA,1,","
 3071 1558 42F804ED 		_NEST
 3072 155c FFF774F8 		BL	HERE
 3073 1560 FEF740FE 		BL	DUPP
 3074 1564 FEF795FE 		BL	CELLP	// cell boundary
 3075 1568 FEF774FF 		BL	CPP
 3076 156c FEF715FE 		BL	STORE
 3077 1570 FEF713FE 		BL	STORE
 3078 1574 52F804FB 		_UNNEST	// adjust code pointer, compile
 3079              		.p2align 2 
 3080              	//    [COMPILE]   ( -- //  string> )
 3081              	// 	Compile the next immediate word into code dictionary.
 3082              		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3083 1578 42F804ED 		_NEST
 3084 157c FFF7D6FF 		BL	TICK
 3085 1580 FFF7EAFF 		BL	COMMA
 3086 1584 52F804FB 		_UNNEST
 3087              	
 3088              	//    COMPILE	( -- )
 3089              	// 	Compile the next address in colon list to code dictionary.
 3090              		_HEADER COMPI,COMPO+7,"COMPILE"
 3091 1588 42F804ED 		_NEST
 3092 158c FEF715FE 		BL	RFROM
 3093 1590 25F00105 		BIC	R5,R5,#1
 3094 1594 FEF726FE 		BL	DUPP
 3095 1598 FEF705FE 		BL	AT
 3096 159c 00F0A3F9 		BL	CALLC			// compile BL instruction
 3097 15a0 FEF777FE 		BL	CELLP
 3098 15a4 45F00105 		ORR	R5,R5,#1
 3099 15a8 FEF710FE 		BL	TOR
 3100 15ac 52F804FB 		_UNNEST			// adjust return address
 3101              	
 3102              	//    LITERAL	( w -- )
 3103              	// 	Compile tos to code dictionary as an integer literal.
 3104              		_HEADER LITER,IMEDD+7,"LITERAL"
 3105 15b0 40090018 		.word	_COMPI+MAPOFFSET
 3106 15b4 42F804ED 		_NEST
 3107 15b8 FFF7E6FF 		BL	COMPI
 3108 15bc 3A010018 		.word	DOLIT+MAPOFFSET
 3109 15c0 FFF7CAFF 		BL	COMMA
 3110 15c4 52F804FB 		_UNNEST
 3111              	
 3112              	//    $,"	( -- )
 3113              	// 	Compile a literal string up to next " .
 3114              	
 3115              	// 	.word	_LITER+MAPOFFSET
 3116              	// _STRCQ	.byte  3
ARM GAS  stm32eforth.s 			page 59


 3117              	// 	.ascii "$$,"""
 3118              	// 	.p2align 2 	
 3119              	STRCQ:
 3120 15c8 42F804ED 		_NEST
 3121 15cc FEF7B5FD 		_DOLIT
 3122 15d0 FCFFFFFF 		.word	-4
 3123 15d4 FEF73EFF 		BL	CPP
 3124 15d8 FEF7CFFE 		BL	PSTOR
 3125 15dc FEF7ADFD 		_DOLIT
 3126 15e0 22000000 		.word	'\"'
 3127 15e4 FFF7C7FB 		BL	WORDD			// move word to code dictionary
 3128 15e8 FEF7DEFE 		BL	COUNT
 3129 15ec FEF72BFE 		BL	PLUS
 3130 15f0 FEF7EAFF 		BL	ALGND			// calculate aligned end of string
 3131 15f4 FEF72EFF 		BL	CPP
 3132 15f8 FEF7CFFD 		BL	STORE
 3133 15fc 52F804FB 		_UNNEST 			// adjust the code pointer
 3134              	
 3135              	// **************************************************************************
 3136              	//  Structures
 3137              	
 3138              	//    FOR	 ( -- a )
 3139              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3140              		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3141 1600 42F804ED 		_NEST
 3142 1604 FFF7C0FF 		BL	COMPI
 3143 1608 CC010018 		.word	TOR+MAPOFFSET
 3144 160c FFF71CF8 		BL	HERE
 3145 1610 52F804FB 		_UNNEST
 3146              	
 3147              	//    BEGIN	( -- a )
 3148              	// 	Start an infinite or indefinite loop structure.
 3149              		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3150 1614 42F804ED 		_NEST
 3151 1618 FFF716F8 		BL	HERE
 3152 161c 52F804FB 		_UNNEST
 3153              		.p2align 2 
 3154              	//    NEXT	( a -- )
 3155              	// 	Terminate a FOR-NEXT loop structure.
 3156              		_HEADER NEXT,COMPO+IMEDD+4,"NEXT"
 3157 1620 42F804ED 		_NEST
 3158 1624 FFF7B0FF 		BL	COMPI
 3159 1628 56010018 		.word	DONXT+MAPOFFSET
 3160 162c FFF794FF 		BL	COMMA
 3161 1630 52F804FB 		_UNNEST
 3162              	
 3163              	//    UNTIL	( a -- )
 3164              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3165              		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3166 1634 42F804ED 		_NEST
 3167 1638 FFF7A6FF 		BL	COMPI
 3168 163c 74010018 		.word	QBRAN+MAPOFFSET
 3169 1640 FFF78AFF 		BL	COMMA
 3170 1644 52F804FB 		_UNNEST
 3171              	
 3172              	//    AGAIN	( a -- )
 3173              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
ARM GAS  stm32eforth.s 			page 60


 3174              		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3175 1648 42F804ED 		_NEST
 3176 164c FFF79CFF 		BL	COMPI
 3177 1650 8C010018 		.word	BRAN+MAPOFFSET
 3178 1654 FFF780FF 		BL	COMMA
 3179 1658 52F804FB 		_UNNEST
 3180              	
 3181              	//    IF	  ( -- A )
 3182              	// 	Begin a conditional branch structure.
 3183              		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3184 165c 42F804ED 		_NEST
 3185 1660 FFF792FF 		BL	COMPI
 3186 1664 74010018 		.word	QBRAN+MAPOFFSET
 3187 1668 FEF7EEFF 		BL	HERE
 3188 166c FEF765FD 		_DOLIT
 3189 1670 04000000 		.word	4
 3190 1674 FEF7EEFE 		BL	CPP
 3191 1678 FEF77FFE 		BL	PSTOR
 3192 167c 52F804FB 		_UNNEST
 3193              	
 3194              	//    AHEAD	( -- A )
 3195              	// 	Compile a forward branch instruction.
 3196              		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3197 1680 42F804ED 		_NEST
 3198 1684 FFF780FF 		BL	COMPI
 3199 1688 8C010018 		.word	BRAN+MAPOFFSET
 3200 168c FEF7DCFF 		BL	HERE
 3201 1690 FEF753FD 		_DOLIT
 3202 1694 04000000 		.word	4
 3203 1698 FEF7DCFE 		BL	CPP
 3204 169c FEF76DFE 		BL	PSTOR
 3205 16a0 52F804FB 		_UNNEST
 3206              	
 3207              	//    REPEAT	( A a -- )
 3208              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3209              		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3210 16a4 42F804ED 		_NEST
 3211 16a8 FFF7CEFF 		BL	AGAIN
 3212 16ac FEF7CCFF 		BL	HERE
 3213 16b0 FEF79BFD 		BL	SWAP
 3214 16b4 FEF771FD 		BL	STORE
 3215 16b8 52F804FB 		_UNNEST
 3216              	
 3217              	//    THEN	( A -- )
 3218              	// 	Terminate a conditional branch structure.
 3219              		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3220 16bc 42F804ED 		_NEST
 3221 16c0 FEF7C2FF 		BL	HERE
 3222 16c4 FEF791FD 		BL	SWAP
 3223 16c8 FEF767FD 		BL	STORE
 3224 16cc 52F804FB 		_UNNEST
 3225              	
 3226              	//    AFT	 ( a -- a A )
 3227              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3228              		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3229 16d0 42F804ED 		_NEST
 3230 16d4 FEF783FD 		BL	DROP
ARM GAS  stm32eforth.s 			page 61


 3231 16d8 FFF7D2FF 		BL	AHEAD
 3232 16dc FFF79AFF 		BL	BEGIN
 3233 16e0 FEF783FD 		BL	SWAP
 3234 16e4 52F804FB 		_UNNEST
 3235              	
 3236              	//    ELSE	( A -- A )
 3237              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3238              		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3239 16e8 42F804ED 		_NEST
 3240 16ec FFF7C8FF 		BL	AHEAD
 3241 16f0 FEF77BFD 		BL	SWAP
 3242 16f4 FFF7E2FF 		BL	THENN
 3243 16f8 52F804FB 		_UNNEST
 3244              	
 3245              	//    WHILE	( a -- A a )
 3246              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3247              		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3248 16fc 42F804ED 		_NEST
 3249 1700 FFF7ACFF 		BL	IFF
 3250 1704 FEF771FD 		BL	SWAP
 3251 1708 52F804FB 		_UNNEST
 3252              	
 3253              	//    ABORT"	( -- //  string> )
 3254              	// 	Conditional abort with an error message.
 3255              		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3256 170c 42F804ED 		_NEST
 3257 1710 FFF73AFF 		BL	COMPI
 3258 1714 7E100018 		.word	ABORQ+MAPOFFSET
 3259 1718 FFF756FF 		BL	STRCQ
 3260 171c 52F804FB 		_UNNEST
 3261              	
 3262              	//    $"	( -- //  string> )
 3263              	// 	Compile an inline string literal.
 3264              		_HEADER STRQ,IMEDD+2,"$\""
 3265 1720 42F804ED 		_NEST
 3266 1724 FFF730FF 		BL	COMPI
 3267 1728 D80A0018 		.word	STRQP+MAPOFFSET
 3268 172c FFF74CFF 		BL	STRCQ
 3269 1730 52F804FB 		_UNNEST
 3270              	
 3271              	//    ."	( -- //  string> )
 3272              	// 	Compile an inline word  literal to be typed out at run time.
 3273              		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3274 1734 42F804ED 		_NEST
 3275 1738 FFF726FF 		BL	COMPI
 3276 173c F40A0018 		.word	DOTQP+MAPOFFSET
 3277 1740 FFF742FF 		BL	STRCQ
 3278 1744 52F804FB 		_UNNEST
 3279              	
 3280              	/*******************
 3281              	  Name compiler
 3282              	*******************/
 3283              	
 3284              	//    ?UNIQUE	( a -- a )
 3285              	// 	Display a warning message if the word already exists.
 3286              		_HEADER UNIQU,7,"?UNIQUE"
 3287 1748 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 62


 3288 174c FEF74AFD 		BL	DUPP
 3289 1750 FFF7CDFB 		BL	NAMEQ			// ?name exists
 3290 1754 FEF70EFD 		BL	QBRAN
 3291 1758 74170018 		.word	UNIQ1+MAPOFFSET	// redefinitions are OK
 3292 175c FFF7CAF9 		BL	DOTQP
 3293 1760 07       		.byte	7
 3294 1761 20726544 		.ascii " reDef "		// but warn the user
 3294      656620
 3295              		.p2align 2 	
 3296 1768 FEF743FD 		BL	OVER
 3297 176c FEF71CFE 		BL	COUNT
 3298 1770 FFF774F9 		BL	TYPEE			// just in case its not planned
 3299              	UNIQ1:
 3300 1774 FEF733FD 		BL	DROP
 3301 1778 52F804FB 		_UNNEST
 3302              	
 3303              	//    $,n	 ( na -- )
 3304              	// 	Build a new dictionary name using the data at na.
 3305              	
 3306              	// 	.word	_UNIQU+MAPOFFSET
 3307              	// _SNAME	.byte  3
 3308              	// 	.ascii "$,n"
 3309              	// 	.p2align 2 	
 3310              	SNAME:
 3311 177c 42F804ED 		_NEST
 3312 1780 FEF730FD 		BL	DUPP			//  na na
 3313 1784 FEF717FD 		BL	CAT			//  ?null input
 3314 1788 FEF7F4FC 		BL	QBRAN
 3315 178c C4170018 		.word	SNAM1+MAPOFFSET
 3316 1790 FFF7DAFF 		BL	UNIQU			//  na
 3317 1794 FEF768FE 		BL	LAST			//  na last
 3318 1798 FEF705FD 		BL	AT			//  na la
 3319 179c FFF7DCFE 		BL	COMMA			//  na
 3320 17a0 FEF720FD 		BL	DUPP			//  na na
 3321 17a4 FEF760FE 		BL	LAST			//  na na last
 3322 17a8 FEF7F7FC 		BL	STORE			//  na , save na for vocabulary link
 3323 17ac FEF7FCFD 		BL	COUNT			//  na+1 count
 3324 17b0 FEF749FD 		BL	PLUS			//  na+1+count
 3325 17b4 FEF708FF 		BL	ALGND			//  word boundary
 3326 17b8 FEF74CFE 		BL	CPP
 3327 17bc FEF7EDFC 		BL	STORE			//  top of dictionary now
 3328 17c0 52F804FB 		_UNNEST
 3329              	SNAM1:
 3330 17c4 FFF788F9 		BL	STRQP
 3331 17c8 07       		.byte	7
 3332 17c9 206E616D 		.ascii " name? "
 3332      653F20
 3333 17d0 FFF741BC 		B.W	ABORT
 3334              	
 3335              	//    $COMPILE	( a -- )
 3336              	// 	Compile next word to code dictionary as a token or literal.
 3337              		_HEADER SCOMP,7,"$COMPILE"
 3338 17d4 42F804ED 		_NEST
 3339 17d8 FFF789FB 		BL	NAMEQ
 3340 17dc FEF770FD 		BL	QDUP	// defined?
 3341 17e0 FEF7C8FC 		BL	QBRAN
 3342 17e4 10180018 		.word	SCOM2+MAPOFFSET
ARM GAS  stm32eforth.s 			page 63


 3343 17e8 FEF7DDFC 		BL	AT
 3344 17ec FEF7A5FC 		_DOLIT
 3345 17f0 80000000 		.word	IMEDD
 3346 17f4 FEF706FD 		BL	ANDD	// immediate?
 3347 17f8 FEF7BCFC 		BL	QBRAN
 3348 17fc 08180018 		.word	SCOM1+MAPOFFSET
 3349 1800 FEF7A4FC 		BL	EXECU
 3350 1804 52F804FB 		_UNNEST			// it's immediate, execute
 3351              	SCOM1:
 3352 1808 00F06DF8 		BL	CALLC			// it's not immediate, compile
 3353 180c 52F804FB 		_UNNEST	
 3354              	SCOM2:
 3355 1810 FFF768F8 		BL	NUMBQ
 3356 1814 FEF7AEFC 		BL	QBRAN
 3357 1818 24180018 		.word	SCOM3+MAPOFFSET
 3358 181c FFF7C8FE 		BL	LITER
 3359 1820 52F804FB 		_UNNEST			// compile number as integer
 3360              	SCOM3: // compilation abort 
 3361 1824 00F002F8 		BL COLON_ABORT 
 3362 1828 FFF715BC 		B.W	ABORT			// error
 3363              	
 3364              	// before aborting a compilation 
 3365              	// reset HERE and LAST
 3366              	// to previous values.  
 3367              	COLON_ABORT:
 3368 182c 42F804ED 		_NEST 
 3369 1830 FEF71AFE 		BL LAST 
 3370 1834 FEF7B7FC 		BL AT 
 3371 1838 FEF72EFD 		BL CELLM 
 3372 183c FEF7D2FC 		BL DUPP 
 3373 1840 FEF708FE 		BL CPP  
 3374 1844 FEF7A9FC 		BL STORE 
 3375 1848 FEF7ADFC 		BL AT 
 3376 184c FEF70CFE 		BL LAST 
 3377 1850 FEF7A3FC 		BL STORE 
 3378 1854 52F804FB 		_UNNEST 
 3379              	
 3380              	//    OVERT	( -- )
 3381              	// 	Link a new word into the current vocabulary.
 3382              		_HEADER OVERT,5,"OVERT"
 3383 1858 42F804ED 		_NEST
 3384 185c FEF704FE 		BL	LAST
 3385 1860 FEF7A1FC 		BL	AT
 3386 1864 FEF7F1FD 		BL	CNTXT
 3387 1868 FEF797FC 		BL	STORE
 3388 186c 52F804FB 		_UNNEST
 3389              	
 3390              	//    ; 	   ( -- )
 3391              	// 	Terminate a colon definition.
 3392              		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3393 1870 42F804ED 		_NEST
 3394 1874 FEF761FC 		_DOLIT
 3395 1878 52F804FB 		_UNNEST
 3396 187c FFF76CFE 		BL	COMMA
 3397 1880 FFF736FC 		BL	LBRAC
 3398 1884 FFF7E8FF 		BL	OVERT
 3399 1888 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 64


 3400              	
 3401              	//    ]	   ( -- )
 3402              	// 	Start compiling the words in the input stream.
 3403              		_HEADER RBRAC,1,"]"
 3404 188c 42F804ED 		_NEST
 3405 1890 FEF753FC 		_DOLIT
 3406 1894 D4170018 		.word	SCOMP+MAPOFFSET
 3407 1898 FEF7CDFD 		BL	TEVAL
 3408 189c FEF77DFC 		BL	STORE
 3409 18a0 52F804FB 		_UNNEST
 3410              	
 3411              	
 3412              	//    COMPILE_BLW	( ca -- asm_code )
 3413              	// 	Assemble a branch-link long instruction to ca.
 3414              	// ref: ARM-v7M architecture reference, section A7.7.18 
 3415              	COMPILE_BLW:
 3416 18a4 4FEA6505 		ASR R5,R5,#1 
 3417 18a8 4FF45044 		_MOV32 R4,0xF000D000 
 3417      CFF20004 
 3418 18b0 65F30A04 		BFI R4,R5,#0,#11
 3419 18b4 4FEAD525 		LSR R5,#11
 3420 18b8 65F31944 		BFI R4,R5,#16,#10
 3421 18bc 4FEAA525 		ASR R5,#10
 3422 18c0 65F3CB24 		BFI R4,R5,#11,#1
 3423 18c4 4FEA6505 		ASR R5,#1
 3424 18c8 65F34D34 		BFI R4,R5,#13,#1
 3425 18cc 4FEA6505 		ASR R5,#1
 3426 18d0 65F39A64 		BFI R4,R5,#26,#1
 3427 18d4 14F0806F 		TST R4,#(1<<26)
 3428 18d8 02D1     		BNE 1f
 3429 18da 00BF     		NOP 
 3430 18dc 84F42054 		EOR R4,R4,#(5<<11)
 3431 18e0 4FEA3445 	1:  ROR R5,R4,#16 
 3432 18e4 7047     		_NEXT 
 3433              	
 3434              	// 	.word	_RBRAC+MAPOFFSET
 3435              	// _CALLC	.byte  5
 3436              	// 	.ascii "call,"
 3437              	// 	.p2align 2 	
 3438              	CALLC:
 3439 18e6 42F804ED 		_NEST
 3440 18ea 25F00105 		BIC R5,R5,#1 
 3441 18ee FEF7ABFE 		BL HERE 
 3442 18f2 FEF7ACFC 		BL SUBB 
 3443 18f6 A5F10405 		SUB R5,R5,#4 
 3444 18fa FFF7D3FF 		BL COMPILE_BLW 
 3445 18fe FFF72BFE 		BL	COMMA			//  assemble BL.W instruction
 3446 1902 52F804FB 		_UNNEST
 3447              	
 3448              		.p2align 
 3449              	// 	:	( -- //  string> )
 3450              	// 	Start a new colon definition using next word as its name.
 3451              		_HEADER COLON,1,":"
 3452 1906 42F804ED 		_NEST
 3453 190a FFF740FA 		BL	TOKEN
 3454 190e FFF735FF 		BL	SNAME
 3455 1912 FEF799FE 		BL	HERE 
ARM GAS  stm32eforth.s 			page 65


 3456 1916 FEF7BCFC 		BL	CELLP  
 3457 191a FFF71DFE 		BL	COMMA 
 3458 191e FEF70CFC 		_DOLIT
 3459 1922 42F804ED 		_NEST
 3460 1926 FFF717FE 		BL	COMMA
 3461 192a FFF7AFFF 		BL	RBRAC
 3462 192e 52F804FB 		_UNNEST
 3463              	
 3464              	//    IMMEDIATE   ( -- )
 3465              	// 	Make the last compiled word an immediate word.
 3466              		_HEADER IMMED,9,"IMMEDIATE"
 3467 1932 42F804ED 		_NEST
 3468 1936 FEF700FC 		_DOLIT
 3469 193a 80000000 		.word	IMEDD
 3470 193e FEF793FD 		BL	LAST
 3471 1942 FEF730FC 		BL	AT
 3472 1946 FEF72EFC 		BL	AT
 3473 194a FEF760FC 		BL	ORR
 3474 194e FEF78BFD 		BL	LAST
 3475 1952 FEF728FC 		BL	AT
 3476 1956 FEF720FC 		BL	STORE
 3477 195a 52F804FB 		_UNNEST
 3478              	
 3479              	/*********************
 3480              	   Defining words
 3481              	*********************/
 3482              	//    CONSTANT	( u -- //  string> )
 3483              	// 	Compile a new constant.
 3484              		_HEADER CONST,8,"CONSTANT" 
 3485 195e 42F804ED 		_NEST
 3486 1962 FFF714FA 		BL	TOKEN
 3487 1966 FFF709FF 		BL	SNAME
 3488 196a FEF76DFE 		BL	HERE 
 3489 196e FEF790FC 		BL	CELLP
 3490 1972 FFF7F1FD 		BL	COMMA 
 3491 1976 FFF76FFF 		BL	OVERT
 3492 197a FEF7DEFB 		_DOLIT
 3493 197e 42F804ED 		_NEST
 3494 1982 FFF7E9FD 		BL	COMMA
 3495 1986 FEF7D8FB 		_DOLIT
 3496 198a D0030018 		.word	DOCON+MAPOFFSET
 3497 198e FFF7AAFF 		BL	CALLC
 3498 1992 FFF7E1FD 		BL	COMMA
 3499 1996 52F804FB 		_UNNEST
 3500              	
 3501 199a 00BF     		.p2align 2 
 3502              	// doDOES> ( -- )
 3503              	// set code addresse in code field of new word 
 3504              	DODOES:
 3505 199c 42F804ED 		_NEST 
 3506 19a0 FEF710FC 		BL RAT 
 3507 19a4 FEF76CFC 		BL ONEM 
 3508 19a8 FEF773FC 		BL	CELLP
 3509 19ac FEF75CFD 		BL LAST 
 3510 19b0 FEF7F9FB 		BL AT
 3511 19b4 FFF703FA 		BL NAMET
 3512 19b8 FEF717FC 		BL	SWAP 
ARM GAS  stm32eforth.s 			page 66


 3513 19bc FEF7EDFB 		BL	STORE 
 3514              	/*	 
 3515              		BL CELLP 
 3516              		BL DUPP
 3517              		BL TOR 
 3518              		BL SUBB 
 3519              		SUB R5,R5,#4
 3520              		BL	COMPILE_BLW
 3521              		BL RFROM
 3522              		BL STORE  
 3523              	*/
 3524 19c0 52F804FB 		_UNNEST 
 3525              	
 3526              		
 3527              	
 3528              		.p2align 2
 3529              	//  DOES> ( -- )
 3530              	//  compile time action 
 3531              		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3532 19c4 42F804ED 		_NEST 
 3533 19c8 FEF7B7FB 		_DOLIT 
 3534 19cc 9C190018 		.word DODOES + MAPOFFSET
 3535 19d0 FFF789FF 		BL CALLC 
 3536 19d4 FEF7B1FB 		_DOLIT	
 3537 19d8 52F804FB 		_UNNEST 
 3538 19dc FFF7BCFD 		BL	COMMA  
 3539 19e0 FEF7ABFB 		_DOLIT 
 3540 19e4 42F804ED 		_NEST 
 3541 19e8 FFF7B6FD 		BL COMMA 
 3542 19ec FEF73CFD 		BL	LAST 
 3543 19f0 FFF7E5F9 		BL	NAMET
 3544 19f4 FEF74DFC 		BL	CELLP // parameter field
 3545 19f8 FFF7DAFD 		BL	LITER 
 3546 19fc 52F804FB 		_UNNEST 
 3547              	
 3548              	
 3549              	//    CREATE	( -- //  string> )
 3550              	// 	Compile a new array entry without allocating code space.
 3551              		_HEADER CREAT,6,"CREATE"
 3552 1a00 42F804ED 		_NEST
 3553 1a04 FFF7C3F9 		BL	TOKEN
 3554 1a08 FFF7B8FE 		BL	SNAME
 3555 1a0c FEF71CFE 		BL	HERE 
 3556 1a10 FEF73FFC 		BL	CELLP
 3557 1a14 FFF7A0FD 		BL	COMMA
 3558 1a18 FFF71EFF 		BL	OVERT
 3559 1a1c FEF78DFB 		_DOLIT
 3560 1a20 42F804ED 		_NEST
 3561 1a24 FFF798FD 		BL	COMMA
 3562 1a28 FEF787FB 		_DOLIT
 3563 1a2c C4030018 		.word	DOVAR+MAPOFFSET
 3564 1a30 FFF759FF 		BL	CALLC
 3565 1a34 52F804FB 		_UNNEST
 3566              	
 3567              	//    VARIABLE	( -- //  string> )
 3568              	// 	Compile a new variable initialized to 0.
 3569              		_HEADER VARIA,8,"VARIABLE"
ARM GAS  stm32eforth.s 			page 67


 3570 1a38 42F804ED 		_NEST
 3571 1a3c FFF7E0FF 		BL	CREAT
 3572 1a40 FEF77BFB 		_DOLIT
 3573 1a44 00000000 		.word	0
 3574 1a48 FFF786FD 		BL	COMMA
 3575 1a4c 52F804FB 		_UNNEST
 3576              	
 3577              	/*************
 3578              	   Tools
 3579              	*************/
 3580              	
 3581              	//    dm+	 ( a u -- a )
 3582              	// 	Dump u bytes from , leaving a+u on the stack.
 3583              	
 3584              	// 	.word	_VARIA+MAPOFFSET
 3585              	// _DMP	.byte  3
 3586              	// 	.ascii "dm+"
 3587              	// 	.p2align 2 	
 3588              	DMP:
 3589 1a50 42F804ED 		_NEST
 3590 1a54 FEF7CDFB 		BL	OVER
 3591 1a58 FEF76FFB 		_DOLIT
 3592 1a5c 04000000 		.word	4
 3593 1a60 FFF762F8 		BL	UDOTR			// display address
 3594 1a64 FEF7DEFF 		BL	SPACE
 3595 1a68 FEF7B0FB 		BL	TOR			// start count down loop
 3596 1a6c 00F00CB8 		B.W	PDUM2			// skip first pass
 3597              	PDUM1:
 3598 1a70 FEF7B8FB 	  BL	DUPP
 3599 1a74 FEF79FFB 		BL	CAT
 3600 1a78 FEF75FFB 		_DOLIT
 3601 1a7c 03000000 		.word	3
 3602 1a80 FFF752F8 		BL	UDOTR			// display numeric data
 3603 1a84 FEF7F9FB 		BL	ONEP			// increment address
 3604              	PDUM2:
 3605 1a88 FEF765FB 	  BL	DONXT
 3606 1a8c 701A0018 		.word	PDUM1+MAPOFFSET	// loop till done
 3607 1a90 52F804FB 		_UNNEST
 3608              		.p2align 2 
 3609              	//    DUMP	( a u -- )
 3610              	// 	Dump u bytes from a, in a formatted manner.
 3611              		_HEADER DUMP,4,"DUMP"
 3612 1a94 42F804ED 		_NEST
 3613 1a98 FEF7B4FC 		BL	BASE
 3614 1a9c FEF783FB 		BL	AT
 3615 1aa0 FEF794FB 		BL	TOR
 3616 1aa4 FEF7D8FE 		BL	HEX			// save radix,set hex
 3617 1aa8 FEF747FB 		_DOLIT
 3618 1aac 10000000 		.word	16
 3619 1ab0 FEF76AFD 		BL	SLASH			// change count to lines
 3620 1ab4 FEF78AFB 		BL	TOR
 3621 1ab8 00F014B8 		B.W	DUMP4			// start count down loop
 3622              	DUMP1:
 3623 1abc FEF7E2FF 	  BL	CR
 3624 1ac0 FEF73BFB 		_DOLIT
 3625 1ac4 10000000 		.word	16
 3626 1ac8 FEF709FC 		BL	DDUP
ARM GAS  stm32eforth.s 			page 68


 3627 1acc FFF7C0FF 		BL	DMP			// display numeric
 3628 1ad0 FEF7FBFB 		BL	ROT
 3629 1ad4 FEF7F9FB 		BL	ROT
 3630 1ad8 FEF7A4FF 		BL	SPACE
 3631 1adc FEF7A2FF 		BL	SPACE
 3632 1ae0 FEF7BCFF 		BL	TYPEE			// display printable characters
 3633              	DUMP4:
 3634 1ae4 FEF737FB 	  BL	DONXT
 3635 1ae8 BC1A0018 		.word	DUMP1+MAPOFFSET	// loop till done
 3636              	DUMP3:
 3637 1aec FEF777FB 	  BL	DROP
 3638 1af0 FEF763FB 		BL	RFROM
 3639 1af4 FEF786FC 		BL	BASE
 3640 1af8 FEF74FFB 		BL	STORE			// restore radix
 3641 1afc 52F804FB 		_UNNEST
 3642              	
 3643              	//    .S	  ( ... -- ... )
 3644              	// 	Display the contents of the data stack.
 3645              		_HEADER DOTS,2,".S"
 3646 1b00 42F804ED 		_NEST
 3647 1b04 FEF78EFF 		BL	SPACE
 3648 1b08 FEF785FD 		BL	DEPTH			// stack depth
 3649 1b0c FEF75EFB 		BL	TOR			// start count down loop
 3650 1b10 00F006B8 		B.W	DOTS2			// skip first pass
 3651              	DOTS1:
 3652 1b14 FEF756FB 		BL	RAT
 3653 1b18 FEF788FD 		BL	PICK
 3654 1b1c FFF728F8 		BL	DOT			// index stack, display contents
 3655              	DOTS2:
 3656 1b20 FEF719FB 		BL	DONXT
 3657 1b24 141B0018 		.word	DOTS1+MAPOFFSET	// loop till done
 3658 1b28 FEF77CFF 		BL	SPACE
 3659 1b2c 52F804FB 		_UNNEST
 3660              	
 3661              	//    >NAME	( ca -- na | F )
 3662              	// 	Convert code address to a name address.
 3663              		_HEADER TNAME,5,">NAME"
 3664 1b30 42F804ED 		_NEST
 3665 1b34 FEF74AFB 		BL	TOR			//  
 3666 1b38 FEF787FC 		BL	CNTXT			//  va
 3667 1b3c FEF733FB 		BL	AT			//  na
 3668              	TNAM1:
 3669 1b40 FEF750FB 		BL	DUPP			//  na na
 3670 1b44 FEF716FB 		BL	QBRAN
 3671 1b48 701B0018 		.word	TNAM2+MAPOFFSET	//  vocabulary end, no match
 3672 1b4c FEF74AFB 		BL	DUPP			//  na na
 3673 1b50 FFF735F9 		BL	NAMET			//  na ca
 3674 1b54 FEF736FB 		BL	RAT			//  na ca code
 3675 1b58 FEF75EFB 		BL	XORR			//  na f --
 3676 1b5c FEF70AFB 		BL	QBRAN
 3677 1b60 701B0018 		.word	TNAM2+MAPOFFSET
 3678 1b64 FEF798FB 		BL	CELLM			//  la 
 3679 1b68 FEF71DFB 		BL	AT			//  next_na
 3680 1b6c FFF7E8BF 		B.W	TNAM1
 3681              	TNAM2:	
 3682 1b70 FEF723FB 		BL	RFROM
 3683 1b74 FEF733FB 		BL	DROP			//  0|na --
ARM GAS  stm32eforth.s 			page 69


 3684 1b78 52F804FB 		_UNNEST			// 0
 3685              	
 3686              	//    .ID	 ( na -- )
 3687              	// 	Display the name at address.
 3688              		_HEADER DOTID,3,".ID"
 3689 1b7c 42F804ED 		_NEST
 3690 1b80 FEF79EFB 		BL	QDUP			// if zero no name
 3691 1b84 FEF7F6FA 		BL	QBRAN
 3692 1b88 A41B0018 		.word	DOTI1+MAPOFFSET
 3693 1b8c FEF70CFC 		BL	COUNT
 3694 1b90 FEF7D3FA 		_DOLIT
 3695 1b94 1F000000 		.word	0x1F
 3696 1b98 FEF734FB 		BL	ANDD			// mask lexicon bits
 3697 1b9c FEF75EFF 		BL	TYPEE
 3698 1ba0 52F804FB 		_UNNEST			// display name string
 3699              	DOTI1:
 3700 1ba4 FEF7A6FF 		BL	DOTQP
 3701 1ba8 09       		.byte	9
 3702 1ba9 207B6E6F 		.ascii " {noName}"
 3702      4E616D65 
 3702      7D
 3703 1bb2 00BF     		.p2align 2 	
 3704 1bb4 52F804FB 		_UNNEST
 3705              	
 3706              		.equ WANT_SEE, 1  // set to 1 if you want SEE 
 3707              		.if WANT_SEE 
 3708              	
 3709              	// .CA ( ca -- ca )
 3710              	// print code field address 
 3711              	DOTCA:
 3712 1bb8 42F804ED 		_NEST 
 3713 1bbc FEF712FB 		BL  DUPP
 3714 1bc0 FEF7C8FF 		BL UDOT 
 3715 1bc4 FEF7B9FA 		_DOLIT 
 3716 1bc8 02000000 		.word 2 
 3717 1bcc FEF732FF 		BL SPACS 
 3718 1bd0 52F804FB 		_UNNEST 
 3719              	
 3720              	// CODE_ABORT ( ca -- f )
 3721              	// abort if code definition
 3722              	CODE_ABORT:
 3723 1bd4 42F804ED 		_NEST 
 3724 1bd8 FFF7EEFF 		BL DOTCA  
 3725 1bdc FEF702FB 		BL DUPP 
 3726 1be0 FEF7E1FA 		BL AT 
 3727 1be4 FEF7A9FA 		_DOLIT 
 3728 1be8 42F804ED 		.word 0xed04f842 // _NEST code 
 3729 1bec FEF714FB 		BL XORR 
 3730 1bf0 FEF7C0FA 		BL QBRAN 
 3731 1bf4 0C1C0018 		.word 1f+MAPOFFSET 
 3732 1bf8 FEF73AFE 		BL DECIM
 3733 1bfc FFF73FFA 		BL ABORQ 
 3734 1c00 09       		.byte 9 
 3735 1c01 636F6465 		.ascii "code word"
 3735      20776F72 
 3735      64
 3736 1c0a 00BF     		.p2align 2
ARM GAS  stm32eforth.s 			page 70


 3737              	1:	 
 3738 1c0c FEF772FF 		BL DOTQP 
 3739 1c10 04       		.byte 4
 3740 1c11 6E657374 		.ascii "nest"
 3741 1c15 0000BF   		.p2align 2 
 3742 1c18 FEF734FF 		BL CR 
 3743 1c1c 52F804FB 		_UNNEST 
 3744              	
 3745              	
 3746              	// UNNEST? ( ca -- ca f )
 3747              	// check if UNNEST 
 3748              	UNNESTQ:
 3749 1c20 42F804ED 		_NEST 
 3750 1c24 FEF7DEFA 		BL DUPP 
 3751 1c28 FEF7BDFA 		BL AT 
 3752 1c2c FEF785FA 		_DOLIT 
 3753 1c30 52F804FB 		.word 0xfb04f852 
 3754 1c34 FEF775FB 		BL EQUAL
 3755 1c38 FEF7D4FA 		BL DUPP 
 3756 1c3c FEF79AFA 		BL QBRAN
 3757 1c40 541C0018 		.word 1f+MAPOFFSET  
 3758 1c44 FEF756FF 		BL DOTQP
 3759 1c48 06       		.byte 6
 3760 1c49 756E6E65 		.ascii "unnest" 
 3760      7374
 3761 1c4f 00       		.p2align 2
 3762 1c50 FEF718FF 		BL CR  
 3763 1c54 52F804FB 	1:	_UNNEST 
 3764              	
 3765              	
 3766              	// search no name routine from code address. 
 3767              	NONAMEQ: // ( ca -- na|ca f )
 3768 1c58 42F804ED 		_NEST 
 3769 1c5c FEF76DFA 		_DOLIT 
 3770 1c60 00000000 		.word 0 
 3771 1c64 FEF7C1FA 		BL SWAP 
 3772 1c68 FEF767FA 		_DOLIT 
 3773 1c6c 18000000 		.word NONAME_SUB
 3774 1c70 FEF7ACFA 		BL TOR   
 3775 1c74 FEF7B6FA 	0:	BL DUPP // ( 0 ca ca -- )  
 3776 1c78 FEF7A4FA 		BL RAT  
 3777 1c7c FEF793FA 		BL AT 
 3778 1c80 FEF71EFB 		BL QDUP 
 3779 1c84 FEF776FA 		BL QBRAN 
 3780 1c88 E01C0018 		.word 2f+MAPOFFSET 
 3781 1c8c FEF7C4FA 		BL XORR 
 3782 1c90 FEF770FA 		BL QBRAN 
 3783 1c94 AC1C0018 		.word 1f+MAPOFFSET 
 3784 1c98 FEF78FFA 		BL RFROM 
 3785 1c9c FEF7F9FA 		BL CELLP
 3786 1ca0 FEF794FA 		BL TOR  
 3787 1ca4 FEF772FA 		BL BRAN 
 3788 1ca8 741C0018 		.word 0b+MAPOFFSET 
 3789 1cac FEF785FA 	1:  BL RFROM 
 3790 1cb0 FEF743FA 		_DOLIT 
 3791 1cb4 18000000 		.word NONAME_SUB
 3792 1cb8 FEF7C9FA 		BL SUBB
ARM GAS  stm32eforth.s 			page 71


 3793 1cbc FEF73DFA 		_DOLIT 
 3794 1cc0 54000000 		.word ANONYMOUS 
 3795 1cc4 FEF7BFFA 		BL	PLUS
 3796 1cc8 FEF76DFA 		BL	AT   
 3797 1ccc FEF78DFA 		BL	SWAP 
 3798 1cd0 FEF785FA 		BL	DROP
 3799 1cd4 FEF789FA 		BL	SWAP 
 3800 1cd8 FEF711FB 		BL	INVER 
 3801 1cdc 52F804FB 		_UNNEST 
 3802 1ce0 FEF77DFA 	2:	BL DROP 
 3803 1ce4 FEF781FA 		BL SWAP 
 3804 1ce8 FEF767FA 		BL RFROM
 3805 1cec FEF777FA 		BL DROP 
 3806 1cf0 52F804FB 		_UNNEST 
 3807              	
 3808              		.p2align 2 
 3809              	
 3810              	
 3811              	// print noname routine label ( n -- )
 3812              	// n is offset in ANONYMOUS array 
 3813              	DOTNONAME:
 3814 1cf4 42F804ED 		_NEST 
 3815 1cf8 41F8045D 		_PUSH 
 3816 1cfc FEF71DFA 		_DOLIT 
 3817 1d00 54000000 		.word ANONYMOUS 
 3818 1d04 FEF79FFA 		BL PLUS 
 3819 1d08 FEF74DFA 		BL AT 
 3820 1d0c FEF7A6FE 		BL TYPEE 
 3821 1d10 52F804FB 		_UNNEST 
 3822              	
 3823              	// IS_BLW ( code -- f )
 3824              	// check if it is a BL instruction 
 3825              	IS_BLW:
 3826 1d14 42F804ED 		_NEST 
 3827 1d18 FEF70FFA 		_DOLIT 
 3828 1d1c 00F000D0 		.word 0xD000F000
 3829 1d20 FEF760FA 		BL DUPP 
 3830 1d24 FEF752FA 		BL TOR 
 3831 1d28 FEF76CFA 		BL ANDD
 3832 1d2c FEF745FA 		BL RFROM  
 3833 1d30 FEF7F7FA 		BL EQUAL   
 3834 1d34 52F804FB 		_UNNEST 
 3835              	
 3836              	//    SEE	 ( -- //  string> )
 3837              	// 	A simple decompiler.
 3838              		_HEADER SEE,3,"SEE"
 3839 1d38 42F804ED 		_NEST
 3840 1d3c FEF762FB 		BL BASE 
 3841 1d40 FEF731FA 		BL AT 
 3842 1d44 FEF742FA 		BL TOR 
 3843 1d48 FEF786FD 		BL HEX 
 3844 1d4c FFF7EEFB 		BL	TICK	//  ca --, starting address
 3845 1d50 FEF798FE 		BL	CR	
 3846 1d54 FFF73EFF 		BL  CODE_ABORT
 3847 1d58 FEF7EFF9 		_DOLIT 
 3848 1d5c 00000000 		.word 0  
 3849 1d60 FEF734FA 		BL TOR // not a BL counter limit to 10 consecutives 
ARM GAS  stm32eforth.s 			page 72


 3850              	SEE1:
 3851 1d64 FEF795FA 		BL	CELLP			//  a
 3852 1d68 FFF726FF 		BL  DOTCA 
 3853 1d6c FFF758FF 		BL  UNNESTQ
 3854 1d70 FEF700FA 		BL	QBRAN 
 3855 1d74 A41D0018 		.word 1f+MAPOFFSET  
 3856 1d78 FEF734FA 		BL	DUPP 
 3857 1d7c FEF789FA 		BL	CELLP
 3858 1d80 FEF711FA 		BL	AT 
 3859 1d84 FFF7C6FF 		BL	IS_BLW
 3860 1d88 FEF7B9FA 		BL	INVER  
 3861 1d8c FEF7F2F9 		BL	QBRAN 
 3862 1d90 641D0018 		.word SEE1+MAPOFFSET 
 3863 1d94 FEF711FA 		BL	RFROM 
 3864 1d98 FEF721FA 		BL	DROP 
 3865 1d9c FEF7F6F9 		BL	BRAN 
 3866 1da0 D01D0018 		.word 2f+MAPOFFSET 
 3867 1da4 FEF71EFA 	1:	BL	DUPP			//  a a
 3868 1da8 00F03DF8 		BL	DECOMP		//  a
 3869 1dac FEF76AFE 		BL	CR 
 3870 1db0 FEF708FA 		BL	RAT 
 3871 1db4 FEF7C1F9 		_DOLIT 
 3872 1db8 0A000000 		.word 10 
 3873 1dbc FEF7C9FA 		BL 	GREAT 
 3874 1dc0 FEF7D8F9 		BL	QBRAN 
 3875 1dc4 641D0018 		.word	SEE1+MAPOFFSET
 3876 1dc8 FEF7F7F9 		BL	RFROM 
 3877 1dcc FEF707FA 		BL	DROP 
 3878 1dd0 FEF705FA 	2:	BL	DROP
 3879 1dd4 FEF7F1F9 		BL  RFROM 
 3880 1dd8 FEF714FB 		BL 	BASE 
 3881 1ddc FEF7DDF9 		BL	STORE 
 3882 1de0 52F804FB 		_UNNEST
 3883              	
 3884              	
 3885              	// BL-ADR ( asm_code -- rel_adr )
 3886              	// get absolute address from asm_code 
 3887              	// ref: ARM-v7M architecture reference, section A7.7.18 
 3888              	BLADR: 
 3889 1de4 4FEA0504 		MOV.W R4,R5
 3890 1de8 4FEA3444 		ROR R4,#16 
 3891 1dec 64F30A05 		BFI R5,R4,#0,#11 
 3892 1df0 4FEAE424 		ASR R4,#11 
 3893 1df4 64F35555 		BFI R5,R4,#21,#1 
 3894 1df8 4FEAA404 		ASR R4,#2
 3895 1dfc 64F39655 		BFI R5,R4,#22,#1
 3896 1e00 4FEAE404 		ASR R4,#3
 3897 1e04 64F3D425 		BFI R5,R4,#11,#10
 3898 1e08 4FEAA424 		ASR R4,#10 
 3899 1e0c 64F3D755 		BFI R5,R4,#23,#1
 3900 1e10 15F4000F 		TST R5,#(1<<23)
 3901 1e14 40F00280 		BNE.W 1f
 3902 1e18 85F4C005 		EOR R5,R5,#(3<<21)
 3903 1e1c 4FEA0525 	1:	LSL R5,#8
 3904 1e20 4FEAE515 		ASR R5,#7 
 3905 1e24 7047     		_NEXT 
 3906              	
ARM GAS  stm32eforth.s 			page 73


 3907              	// 	DECOMPILE ( a -- )
 3908              	// 	Convert code in a.  Display name of command or as data.
 3909              		_HEADER DECOMP,9,"DECOMPILE"
 3910 1e26 42F804ED 		_NEST
 3911 1e2a FEF7DBF9 		BL	DUPP			//  a a
 3912 1e2e FEF7BAF9 		BL	AT			//  a code
 3913 1e32 FEF7D7F9 		BL	DUPP			//  a code code
 3914 1e36 FFF76DFF 		BL	IS_BLW
 3915 1e3a FEF79BF9 		BL	QBRAN
 3916 1e3e 9C1E0018 		.word	DECOM2+MAPOFFSET	//  not a BL instruction 
 3917              		//  a valid_code --, extract address and display name
 3918 1e42 FEF757FE 		BL DOTQP  
 3919 1e46 03       		.byte 3
 3920 1e47 424C20   		.ascii "BL "
 3921 1e4a 00BF     		.p2align 2 
 3922 1e4c FFF7CAFF 		BL  BLADR   // extract relative address from BL code
 3923 1e50 FEF7CFF9 		BL	OVER			//  a offset a
 3924 1e54 FEF7F7F9 		BL	PLUS			//  a target-4
 3925 1e58 FEF71BFA 		BL	CELLP			//  a target
 3926 1e5c FFF7ACFE 		BL  DOTCA 
 3927 1e60 FFF7FAFE 		BL	NONAMEQ 
 3928 1e64 FEF786F9 		BL	QBRAN 
 3929 1e68 741E0018 		.word DECOMP1+MAPOFFSET  
 3930 1e6c FEF78EF9 		BL	BRAN 
 3931 1e70 781E0018 		.word DECOMP3+MAPOFFSET 
 3932              	DECOMP1:
 3933 1e74 FFF75CFE 		BL	TNAME			//  a na/0 --, is it a name?
 3934              	DECOMP3:
 3935 1e78 FFF780FE 		BL	DOTID			//  a --, display name
 3936 1e7c FEF7AFF9 		BL	DROP
 3937              	// reset not BL counter 
 3938 1e80 FEF79BF9 		BL	RFROM 
 3939 1e84 FEF799F9 		BL	RFROM 
 3940 1e88 FEF7ACF9 		BL	DUPP 
 3941 1e8c FEF7DFF9 		BL	SUBB 
 3942 1e90 FEF79CF9 		BL	TOR 
 3943 1e94 FEF79AF9 		BL	TOR 	
 3944 1e98 52F804FB 		_UNNEST
 3945              			
 3946              	DECOM2: // not a BL 
 3947 1e9c FEF75AFE 		BL	UDOT
 3948 1ea0 FEF79DF9 		BL	DROP
 3949 1ea4 FEF789F9 		BL	RFROM // unnest address 
 3950 1ea8 FEF787F9 		BL	RFROM // not BL counter 
 3951 1eac FEF7E5F9 		BL	ONEP  // increment counter 
 3952 1eb0 FEF78CF9 		BL	TOR 
 3953 1eb4 FEF78AF9 		BL	TOR 
 3954 1eb8 52F804FB 		_UNNEST
 3955              	.endif 
 3956              	
 3957              	//    WORDS	( -- )
 3958              	// 	Display the names in the context vocabulary.
 3959              		_HEADER WORDS,5,"WORDS"
 3960 1ebc 42F804ED 		_NEST
 3961 1ec0 FEF7E0FD 		BL	CR
 3962 1ec4 FEF7C1FA 		BL	CNTXT
 3963 1ec8 FEF76DF9 		BL	AT			// only in context
ARM GAS  stm32eforth.s 			page 74


 3964              	WORS1:
 3965 1ecc FEF7F8F9 		BL	QDUP			// ?at end of list
 3966 1ed0 FEF750F9 		BL	QBRAN
 3967 1ed4 F01E0018 		.word	WORS2+MAPOFFSET
 3968 1ed8 FEF784F9 		BL	DUPP
 3969 1edc FEF7A2FD 		BL	SPACE
 3970 1ee0 FFF74CFE 		BL	DOTID			// display a name
 3971 1ee4 FEF7D8F9 		BL	CELLM
 3972 1ee8 FEF75DF9 		BL	AT
 3973 1eec FFF7EEBF 		B.W	WORS1
 3974              	WORS2:
 3975 1ef0 52F804FB 		_UNNEST
 3976              	
 3977              	// **************************************************************************
 3978              	//  cold start
 3979              	
 3980              	//    VER	 ( -- n )
 3981              	// 	Return the version number of this implementation.
 3982              	
 3983              	// 	.word	_WORDS+MAPOFFSET
 3984              	// _VERSN	.byte  3
 3985              	// 	.ascii "VER"
 3986              	// 	.p2align 2 	
 3987              	VERSN:
 3988 1ef4 42F804ED 		_NEST
 3989 1ef8 FEF71FF9 		_DOLIT
 3990 1efc 00010000 		.word	VER*256+EXT
 3991 1f00 52F804FB 		_UNNEST
 3992              	
 3993              	//    hi	  ( -- )
 3994              	// 	Display the sign-on message of eForth.
 3995              		_HEADER HI,2,"HI"
 3996 1f04 42F804ED 		_NEST
 3997 1f08 FEF7BCFD 		BL	CR	// initialize I/O
 3998 1f0c FEF715F9 		_DOLIT 
 3999 1f10 00000000 		.word hi_msg 
 4000 1f14 FEF748FA 		BL	COUNT 
 4001 1f18 FEF7A0FD 		BL	TYPEE 
 4002 1f1c FEF772FA 		BL	BASE
 4003 1f20 FEF741F9 		BL	AT
 4004 1f24 FEF798FC 		BL	HEX	// save radix
 4005 1f28 FFF7E4FF 		BL	VERSN
 4006 1f2c FEF72BFC 		BL	BDIGS
 4007 1f30 FEF745FC 		BL	DIG
 4008 1f34 FEF743FC 		BL	DIG
 4009 1f38 FEF7FFF8 		_DOLIT
 4010 1f3c 2E000000 		.word	'.'
 4011 1f40 FEF72BFC 		BL	HOLD
 4012 1f44 FEF747FC 		BL	DIGS
 4013 1f48 FEF762FC 		BL	EDIGS
 4014 1f4c FEF786FD 		BL	TYPEE	// format version number
 4015 1f50 FEF758FA 		BL	BASE
 4016 1f54 FEF721F9 		BL	STORE
 4017 1f58 FEF794FD 		BL	CR
 4018 1f5c 52F804FB 		_UNNEST			// restore radix
 4019              	
 4020              		.section .rodata
ARM GAS  stm32eforth.s 			page 75


 4021              		.p2align 2 
 4022              	hi_msg:
 4023 0000 17       		.byte	23
 4024 0001 626C7565 		.ascii "blue pill stm32eForth v" 
 4024      2070696C 
 4024      6C207374 
 4024      6D333265 
 4024      466F7274 
 4025              		.p2align 2 
 4026              	
 4027              		.section  .text, "ax" ,%progbits 
 4028              	
 4029              	//    COLD	( -- )
 4030              	// 	The high level cold start sequence.
 4031              		_HEADER LASTN,4,"COLD"
 4032              	COLD:
 4033              	//  Initiate Forth registers
 4034 1f60 4FF49873 		_MOV32 R3,UPP // system variables area 
 4034      C2F20003 
 4035 1f68 4FF49D41 		_MOV32 R1,SPP // Forth data stack 
 4035      C2F20001 
 4036 1f70 4FF49F42 		_MOV32 R2,RPP // Forth return stack 
 4036      C2F20002 
 4037 1f78 85EA0505 		EOR R5,R5,R5			//  tos=0
 4038 1f7c 42F804ED 		_NEST
 4039              	COLD1:
 4040 1f80 FEF7DBF8 		_DOLIT 
 4041 1f84 00000000 		.word 0 
 4042 1f88 FEF7A6F8 		BL ULED // turn off user LED 
 4043 1f8c FEF7D5F8 		_DOLIT
 4044 1f90 00000000 		.word	UZERO
 4045 1f94 FEF7D1F8 		_DOLIT
 4046 1f98 30010020 		.word	UPP
 4047 1f9c FEF7CDF8 		_DOLIT
 4048 1fa0 54000000 		.word	ULAST-UZERO
 4049 1fa4 FEF77EFB 		BL	MOVE 			// initialize user area
 4050 1fa8 FFF7F0F8 		BL	PRESE			// initialize stack
 4051              		// check if user image saved in slot 0 
 4052 1fac FFF7B2F9 		BL IMGQ 
 4053 1fb0 FEF7E0F8 		BL	QBRAN 
 4054 1fb4 BC1F0018 		.word 1f+MAPOFFSET
 4055 1fb8 FFF7BCF9 		BL	LOAD_IMG 
 4056 1fbc FEF71DFA 	1:	BL	TBOOT
 4057 1fc0 FEF756FB 		BL	ATEXE			// application boot
 4058 1fc4 FFF748FC 		BL	OVERT
 4059 1fc8 FFF7EAB8 		B.W	QUIT			// start interpretation
 4060              		.p2align 2
 4061              	CTOP: 
 4062              	COLD2:
 4063 1fcc FFFFFFFF 		.word	0XFFFFFFFF
 4064              		
 4065              	/********************************
 4066              	  data that doesn't need to be 
 4067              	  copied in RAM 
 4068              	*******************************/
 4069              		.section .rodata 
 4070              		.p2align 2
ARM GAS  stm32eforth.s 			page 76


 4071              	NONAME_SUB: // routine not in the dictionary 
 4072 0018 8C010018 		.word BRAN+MAPOFFSET,QBRAN+MAPOFFSET, DOLIT+MAPOFFSET,DONXT+MAPOFFSET,DODOES+MAPOFFSET
 4072      74010018 
 4072      3A010018 
 4072      56010018 
 4072      9C190018 
 4073 002c C4030018 		.word DOVAR+MAPOFFSET,DOCON+MAPOFFSET,IS_BLW+MAPOFFSET,DOTQP+MAPOFFSET,BLADR+MAPOFFSET  
 4073      D0030018 
 4073      141D0018 
 4073      F40A0018 
 4073      E41D0018 
 4074 0040 B81B0018 		.word DOTCA+MAPOFFSET,NONAMEQ+MAPOFFSET,STRCQ+MAPOFFSET,VERSN+MAPOFFSET  
 4074      581C0018 
 4074      C8150018 
 4074      F41E0018 
 4075 0050 00000000 		.word 0 
 4076              	
 4077              	ANONYMOUS: // anonymous routines 
 4078 0054 8C000000 		.word BRAN_LBL,QBRAN_LBL,DOLIT_LBL,DONEXT_LBL,DODOES_LBL,DOVAR_LBL,DOCON_LBL
 4078      98000000 
 4078      A4000000 
 4078      B0000000 
 4078      BC000000 
 4079 0070 E0000000 		.word IS_BLW_LBL,DOTQP_LBL,BLADR_LBL,DOTCA_LBL,NONAMEQ_LBL,STRCQ_LBL,VERSN_LBL   
 4079      EC000000 
 4079      F0000000 
 4079      FC000000 
 4079      08010000 
 4080              	
 4081              	BRAN_LBL:
 4082 008c 09       		.byte 9 
 4083 008d 207B6272 		.ascii " {branch}"
 4083      616E6368 
 4083      7D
 4084 0096 0000     		.p2align 2 
 4085              	QBRAN_LBL:
 4086 0098 0A       		.byte 10
 4087 0099 207B3F62 		.ascii " {?branch}"
 4087      72616E63 
 4087      687D
 4088 00a3 00       		.p2align 2
 4089              	DOLIT_LBL:
 4090 00a4 08       		.byte 8 
 4091 00a5 207B646F 		.ascii " {doLit}"
 4091      4C69747D 
 4092 00ad 000000   		.p2align 2 
 4093              	DONEXT_LBL:
 4094 00b0 09       		.byte 9
 4095 00b1 207B646F 		.ascii " {doNext}"
 4095      4E657874 
 4095      7D
 4096 00ba 0000     		.p2align 2 
 4097              	DODOES_LBL:
 4098 00bc 09       		.byte 9
 4099 00bd 207B646F 		.ascii " {doDoes}"
 4099      446F6573 
 4099      7D
ARM GAS  stm32eforth.s 			page 77


 4100 00c6 0000     		.p2align 2 
 4101              	DOVAR_LBL:
 4102 00c8 08       		.byte 8
 4103 00c9 207B646F 		.ascii " {doVar}"
 4103      5661727D 
 4104 00d1 000000   		.p2align 2 
 4105              	DOCON_LBL:
 4106 00d4 0A       		.byte 10
 4107 00d5 207B646F 		.ascii " {doConst}"
 4107      436F6E73 
 4107      747D
 4108 00df 00       		.p2align 2 
 4109              	IS_BLW_LBL:
 4110 00e0 0B       		.byte 11 
 4111 00e1 207B424C 		.ascii " {BL code?}"
 4111      20636F64 
 4111      653F7D
 4112              		.p2align 2 
 4113              	DOTQP_LBL:
 4114 00ec 03       		.byte 3
 4115 00ed 202E22   		.ascii " .\""
 4116              		.p2align 
 4117              	BLADR_LBL:
 4118 00f0 09       		.byte 9
 4119 00f1 207B424C 		.ascii " {BL>ADR}"
 4119      3E414452 
 4119      7D
 4120 00fa 0000     		.p2align 2 
 4121              	DOTCA_LBL:
 4122 00fc 08       		.byte  8
 4123 00fd 207B646F 		.ascii " {dotca}"
 4123      7463617D 
 4124 0105 000000   		.p2align 2 
 4125              	NONAMEQ_LBL:
 4126 0108 0A       		.byte  10
 4127 0109 207B6E6F 		.ascii " {noname?}"
 4127      6E616D65 
 4127      3F7D
 4128 0113 00       		.p2align 2 
 4129              	STRCQ_LBL:
 4130 0114 06       		.byte  6
 4131 0115 207B242C 		.ascii " {$,\"}"
 4131      227D
 4132 011b 00       		.p2align 2 
 4133              	VERSN_LBL:
 4134 011c 0A       		.byte  10
 4135 011d 207B7665 		.ascii " {version}"
 4135      7273696F 
 4135      6E7D
 4136 0127 00       		.p2align 2 
 4137              	
 4138              		.section .user 
 4139              		.p2align 10 
 4140              	USER_SPACE: // save user image here.  
 4141 0000 FFFFFFFF 		.word 0XFFFFFFFF
 4142              	
 4143              	
ARM GAS  stm32eforth.s 			page 78


 4144              	  .end 
ARM GAS  stm32eforth.s 			page 79


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  stm32eforth.s 			page 80


board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
board/blue-pill/stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
board/blue-pill/stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
board/blue-pill/stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
board/blue-pill/stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
board/blue-pill/stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
board/blue-pill/stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
board/blue-pill/stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
board/blue-pill/stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
board/blue-pill/stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
board/blue-pill/stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
board/blue-pill/stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
board/blue-pill/stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
board/blue-pill/stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
board/blue-pill/stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
board/blue-pill/stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
board/blue-pill/stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
board/blue-pill/stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
board/blue-pill/stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
board/blue-pill/stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
board/blue-pill/stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
board/blue-pill/stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
board/blue-pill/stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
board/blue-pill/stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
board/blue-pill/stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
board/blue-pill/stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
board/blue-pill/stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
board/blue-pill/stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
board/blue-pill/stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
board/blue-pill/stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
board/blue-pill/stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
board/blue-pill/stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
board/blue-pill/stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
board/blue-pill/stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32eforth.s:83     *ABS*:0000000040011000 LED_GPIO
       stm32eforth.s:84     *ABS*:000000000000000d LED_PIN
       stm32eforth.s:85     *ABS*:0000000040013800 UART
       stm32eforth.s:88     *ABS*:0000000020004e80 SPP
       stm32eforth.s:89     *ABS*:0000000020004e80 TIBB
       stm32eforth.s:90     *ABS*:0000000020004f80 RPP
       stm32eforth.s:91     *ABS*:0000000020000130 UPP
       stm32eforth.s:93     *ABS*:0000000020004e00 DEND
       stm32eforth.s:94     *ABS*:0000000020000130 RAMOFFSET
       stm32eforth.s:95     *ABS*:0000000020005000 RAMEND
       stm32eforth.s:96     *ABS*:0000000008000130 FLASHOFFSET
       stm32eforth.s:99     *ABS*:0000000018000000 MAPOFFSET
       stm32eforth.s:104    *ABS*:0000000000000004 SEED_OFS
ARM GAS  stm32eforth.s 			page 81


       stm32eforth.s:105    *ABS*:0000000000000008 TICKS_OFS
       stm32eforth.s:106    *ABS*:000000000000000c TIMER_OFS
       stm32eforth.s:107    *ABS*:0000000000000010 TORAM_OFS
       stm32eforth.s:108    *ABS*:0000000000000014 IMG_SIGN_OFS
       stm32eforth.s:109    *ABS*:0000000000000018 BOOT_OFS
       stm32eforth.s:110    *ABS*:000000000000001c BASE_OFS
       stm32eforth.s:111    *ABS*:0000000000000020 TMP_OFS
       stm32eforth.s:112    *ABS*:0000000000000024 SPAN_OFS
       stm32eforth.s:113    *ABS*:0000000000000028 TOIN_OFS
       stm32eforth.s:114    *ABS*:000000000000002c NTIB_OFS
       stm32eforth.s:115    *ABS*:0000000000000030 TIB_OFS
       stm32eforth.s:116    *ABS*:0000000000000034 EVAL_OFS
       stm32eforth.s:117    *ABS*:0000000000000038 HLD_OFS
       stm32eforth.s:118    *ABS*:000000000000003c CTXT_OFS
       stm32eforth.s:119    *ABS*:0000000000000040 FORTH_CTOP_OFS
       stm32eforth.s:120    *ABS*:0000000000000044 USER_CTOP_OFS
       stm32eforth.s:121    *ABS*:0000000000000048 LASTN_OFS
       stm32eforth.s:122    *ABS*:000000000000004c VARS_END_OFS
       stm32eforth.s:124    *ABS*:0000000000000010 RX_QUEUE_SIZE
       stm32eforth.s:125    *ABS*:0000000000000050 RX_QUEUE_OFS
       stm32eforth.s:126    *ABS*:0000000000000060 RX_HEAD_OFS
       stm32eforth.s:127    *ABS*:0000000000000064 RX_TAIL_OFS
       stm32eforth.s:3995   .inflash.dictinary:0000000000000b64 link
       stm32eforth.s:192    .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:385    .inflash:00000000000000d0 reset_handler
       stm32eforth.s:283    .inflash:0000000000000000 default_handler
       stm32eforth.s:300    .inflash:0000000000000020 systick_handler
       stm32eforth.s:319    .inflash:000000000000003c uart_rx_handler
       stm32eforth.s:272    .isr_vector:0000000000000130 isr_end
       stm32eforth.s:281    .inflash:0000000000000000 $t
       stm32eforth.s:288    .inflash:0000000000000008 exception_msg
       stm32eforth.s:361    .inflash:00000000000000a4 uart_puts
       stm32eforth.s:342    .inflash:000000000000007c reset_mcu
       stm32eforth.s:289    .inflash:0000000000000008 $d
       stm32eforth.s:309    .inflash:000000000000003a systick_exit
       stm32eforth.s:339    .inflash:0000000000000076 user_reboot
       stm32eforth.s:352    .inflash:0000000000000090 user_reboot_msg
       stm32eforth.s:350    .inflash:000000000000008c scb_adr
       stm32eforth.s:351    .inflash:000000000000008c $d
       stm32eforth.s:356    .inflash:00000000000000a2 $t
       stm32eforth.s:511    .inflash:00000000000001f2 remap
       stm32eforth.s:409    .inflash:0000000000000110 init_devices
       stm32eforth.s:486    .inflash:00000000000001b0 uart_init
       stm32eforth.s:400    .inflash:00000000000000f0 forth_init
       stm32eforth.s:396    .inflash:00000000000000ec forth_entry
       stm32eforth.s:397    .inflash:00000000000000ec $d
       stm32eforth.s:4032   .text:0000000000001f60 COLD
       stm32eforth.s:401    .inflash:00000000000000f0 $t
       stm32eforth.s:422    .inflash:000000000000012e wait_hserdy
       stm32eforth.s:442    .inflash:0000000000000148 wait_pllrdy
       stm32eforth.s:454    .inflash:0000000000000168 wait_sws
       stm32eforth.s:543    .inflash:0000000000000258 remap_dest
       stm32eforth.s:541    .inflash:0000000000000254 remap_src
       stm32eforth.s:4061   .text:0000000000001fcc CTOP
       stm32eforth.s:590    .text:0000000000000000 UZERO
       stm32eforth.s:542    .inflash:0000000000000254 $d
       stm32eforth.s:549    *ABS*:0000000000000001 VER
ARM GAS  stm32eforth.s 			page 82


       stm32eforth.s:550    *ABS*:0000000000000000 EXT
       stm32eforth.s:554    *ABS*:0000000000000040 COMPO
       stm32eforth.s:555    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:556    *ABS*:00000000ffffff1f MASKK
       stm32eforth.s:558    *ABS*:0000000000000004 CELLL
       stm32eforth.s:559    *ABS*:000000000000000a BASEE
       stm32eforth.s:560    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:562    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:563    *ABS*:000000000000000a LF
       stm32eforth.s:564    *ABS*:000000000000000d CRR
       stm32eforth.s:565    *ABS*:000000000000001b ERR
       stm32eforth.s:566    *ABS*:0000000000000027 TIC
       stm32eforth.s:591    .text:0000000000000000 $d
       stm32eforth.s:3995   .text:0000000000001f04 HI
       stm32eforth.s:2612   .text:000000000000109c INTER
       stm32eforth.s:3995   .inflash.dictinary:0000000000000b64 _LASTN
       stm32eforth.s:611    .text:0000000000000054 ULAST
       stm32eforth.s:619    .text:000000000000006c $t
               .inflash.dictinary:0000000000000000 LF_RAND
               .inflash.dictinary:0000000000000004 _RAND
               .inflash.dictinary:000000000000000b $d
       stm32eforth.s:625    .inflash.dictinary:000000000000000c CA_RAND
       stm32eforth.s:625    .text:0000000000000070 RAND
       stm32eforth.s:1244   .text:00000000000003dc SEED
       stm32eforth.s:804    .text:00000000000001a6 AT
       stm32eforth.s:858    .text:00000000000001e4 DUPP
       stm32eforth.s:796    .text:000000000000019a STORE
       stm32eforth.s:1092   .text:000000000000030a ABSS
       stm32eforth.s:864    .text:00000000000001ea SWAP
       stm32eforth.s:1479   .text:0000000000000578 MODD
       stm32eforth.s:625    .inflash.dictinary:0000000000000010 LF_PAUSE
       stm32eforth.s:625    .inflash.dictinary:0000000000000014 _PAUSE
       stm32eforth.s:645    .inflash.dictinary:000000000000001c CA_PAUSE
       stm32eforth.s:645    .text:00000000000000b0 PAUSE
       stm32eforth.s:1258   .text:00000000000003f0 TIMER
       stm32eforth.s:649    .text:00000000000000bc PAUSE_LOOP
       stm32eforth.s:766    .text:0000000000000174 QBRAN
       stm32eforth.s:653    .text:00000000000000c8 $d
       stm32eforth.s:656    .text:00000000000000d4 PAUSE_EXIT
       stm32eforth.s:784    .text:000000000000018c BRAN
       stm32eforth.s:654    .text:00000000000000cc $t
       stm32eforth.s:655    .text:00000000000000d0 $d
       stm32eforth.s:657    .text:00000000000000d4 $t
       stm32eforth.s:645    .inflash.dictinary:0000000000000020 LF_ULED
       stm32eforth.s:645    .inflash.dictinary:0000000000000024 _ULED
       stm32eforth.s:661    .inflash.dictinary:000000000000002c CA_ULED
       stm32eforth.s:661    .text:00000000000000d8 ULED
       stm32eforth.s:669    .text:00000000000000f0 ULED_OFF
       stm32eforth.s:661    .inflash.dictinary:0000000000000030 LF_QRX
       stm32eforth.s:661    .inflash.dictinary:0000000000000034 _QRX
       stm32eforth.s:675    .inflash.dictinary:000000000000003c CA_QRX
       stm32eforth.s:675    .text:00000000000000f4 QRX
       stm32eforth.s:676    .text:00000000000000f4 QKEY
       stm32eforth.s:675    .inflash.dictinary:0000000000000040 LF_EMIT
       stm32eforth.s:675    .inflash.dictinary:0000000000000044 _EMIT
       stm32eforth.s:695    .inflash.dictinary:000000000000004c CA_EMIT
       stm32eforth.s:695    .text:0000000000000120 EMIT
ARM GAS  stm32eforth.s 			page 83


       stm32eforth.s:696    .text:0000000000000120 TECHO
       stm32eforth.s:695    .inflash.dictinary:0000000000000050 LF_NOP
       stm32eforth.s:695    .inflash.dictinary:0000000000000054 _NOP
       stm32eforth.s:710    .inflash.dictinary:0000000000000058 CA_NOP
       stm32eforth.s:710    .text:0000000000000138 NOP
       stm32eforth.s:721    .text:000000000000013a DOLIT
       stm32eforth.s:710    .inflash.dictinary:000000000000005c LF_EXECU
       stm32eforth.s:710    .inflash.dictinary:0000000000000060 _EXECU
       stm32eforth.s:730    .inflash.dictinary:0000000000000068 CA_EXECU
       stm32eforth.s:730    .text:000000000000014c EXECU
       stm32eforth.s:744    .text:0000000000000156 DONXT
       stm32eforth.s:751    .text:0000000000000164 NEXT1
       stm32eforth.s:773    .text:0000000000000186 QBRAN1
       stm32eforth.s:730    .inflash.dictinary:000000000000006c LF_EXIT
       stm32eforth.s:730    .inflash.dictinary:0000000000000070 _EXIT
       stm32eforth.s:791    .inflash.dictinary:0000000000000078 CA_EXIT
       stm32eforth.s:791    .text:0000000000000196 EXIT
       stm32eforth.s:791    .inflash.dictinary:000000000000007c LF_STORE
       stm32eforth.s:791    .inflash.dictinary:0000000000000080 _STORE
       stm32eforth.s:796    .inflash.dictinary:0000000000000084 CA_STORE
       stm32eforth.s:796    .inflash.dictinary:0000000000000088 LF_AT
       stm32eforth.s:796    .inflash.dictinary:000000000000008c _AT
       stm32eforth.s:804    .inflash.dictinary:0000000000000090 CA_AT
       stm32eforth.s:804    .inflash.dictinary:0000000000000094 LF_CSTOR
       stm32eforth.s:804    .inflash.dictinary:0000000000000098 _CSTOR
       stm32eforth.s:810    .inflash.dictinary:000000000000009c CA_CSTOR
       stm32eforth.s:810    .text:00000000000001aa CSTOR
       stm32eforth.s:810    .inflash.dictinary:00000000000000a0 LF_CAT
       stm32eforth.s:810    .inflash.dictinary:00000000000000a4 _CAT
       stm32eforth.s:818    .inflash.dictinary:00000000000000a8 CA_CAT
       stm32eforth.s:818    .text:00000000000001b6 CAT
       stm32eforth.s:818    .inflash.dictinary:00000000000000ac LF_RFROM
       stm32eforth.s:818    .inflash.dictinary:00000000000000b0 _RFROM
       stm32eforth.s:824    .inflash.dictinary:00000000000000b4 CA_RFROM
       stm32eforth.s:824    .text:00000000000001ba RFROM
       stm32eforth.s:824    .inflash.dictinary:00000000000000b8 LF_RAT
       stm32eforth.s:824    .inflash.dictinary:00000000000000bc _RAT
       stm32eforth.s:831    .inflash.dictinary:00000000000000c0 CA_RAT
       stm32eforth.s:831    .text:00000000000001c4 RAT
       stm32eforth.s:831    .inflash.dictinary:00000000000000c4 LF_TOR
       stm32eforth.s:831    .inflash.dictinary:00000000000000c8 _TOR
       stm32eforth.s:838    .inflash.dictinary:00000000000000cc CA_TOR
       stm32eforth.s:838    .text:00000000000001cc TOR
       stm32eforth.s:838    .inflash.dictinary:00000000000000d0 LF_SPAT
       stm32eforth.s:838    .inflash.dictinary:00000000000000d4 _SPAT
       stm32eforth.s:845    .inflash.dictinary:00000000000000d8 CA_SPAT
       stm32eforth.s:845    .text:00000000000001d6 SPAT
       stm32eforth.s:845    .inflash.dictinary:00000000000000dc LF_DROP
       stm32eforth.s:845    .inflash.dictinary:00000000000000e0 _DROP
       stm32eforth.s:852    .inflash.dictinary:00000000000000e8 CA_DROP
       stm32eforth.s:852    .text:00000000000001de DROP
       stm32eforth.s:852    .inflash.dictinary:00000000000000ec LF_DUPP
       stm32eforth.s:852    .inflash.dictinary:00000000000000f0 _DUPP
       stm32eforth.s:858    .inflash.dictinary:00000000000000f4 CA_DUPP
       stm32eforth.s:858    .inflash.dictinary:00000000000000f8 LF_SWAP
       stm32eforth.s:858    .inflash.dictinary:00000000000000fc _SWAP
       stm32eforth.s:864    .inflash.dictinary:0000000000000104 CA_SWAP
ARM GAS  stm32eforth.s 			page 84


       stm32eforth.s:864    .inflash.dictinary:0000000000000108 LF_OVER
       stm32eforth.s:864    .inflash.dictinary:000000000000010c _OVER
       stm32eforth.s:872    .inflash.dictinary:0000000000000114 CA_OVER
       stm32eforth.s:872    .text:00000000000001f2 OVER
       stm32eforth.s:872    .inflash.dictinary:0000000000000118 LF_ZLESS
       stm32eforth.s:872    .inflash.dictinary:000000000000011c _ZLESS
       stm32eforth.s:879    .inflash.dictinary:0000000000000120 CA_ZLESS
       stm32eforth.s:879    .text:00000000000001fa ZLESS
       stm32eforth.s:879    .inflash.dictinary:0000000000000124 LF_ANDD
       stm32eforth.s:879    .inflash.dictinary:0000000000000128 _ANDD
       stm32eforth.s:886    .inflash.dictinary:000000000000012c CA_ANDD
       stm32eforth.s:886    .text:0000000000000204 ANDD
       stm32eforth.s:886    .inflash.dictinary:0000000000000130 LF_ORR
       stm32eforth.s:886    .inflash.dictinary:0000000000000134 _ORR
       stm32eforth.s:893    .inflash.dictinary:0000000000000138 CA_ORR
       stm32eforth.s:893    .text:000000000000020e ORR
       stm32eforth.s:893    .inflash.dictinary:000000000000013c LF_XORR
       stm32eforth.s:893    .inflash.dictinary:0000000000000140 _XORR
       stm32eforth.s:900    .inflash.dictinary:0000000000000144 CA_XORR
       stm32eforth.s:900    .text:0000000000000218 XORR
       stm32eforth.s:900    .inflash.dictinary:0000000000000148 LF_UPLUS
       stm32eforth.s:900    .inflash.dictinary:000000000000014c _UPLUS
       stm32eforth.s:907    .inflash.dictinary:0000000000000150 CA_UPLUS
       stm32eforth.s:907    .text:0000000000000222 UPLUS
       stm32eforth.s:907    .inflash.dictinary:0000000000000154 LF_RSHIFT
       stm32eforth.s:907    .inflash.dictinary:0000000000000158 _RSHIFT
       stm32eforth.s:917    .inflash.dictinary:0000000000000160 CA_RSHIFT
       stm32eforth.s:917    .text:0000000000000232 RSHIFT
       stm32eforth.s:917    .inflash.dictinary:0000000000000164 LF_LSHIFT
       stm32eforth.s:917    .inflash.dictinary:0000000000000168 _LSHIFT
       stm32eforth.s:924    .inflash.dictinary:0000000000000170 CA_LSHIFT
       stm32eforth.s:924    .text:000000000000023c LSHIFT
       stm32eforth.s:924    .inflash.dictinary:0000000000000174 LF_PLUS
       stm32eforth.s:924    .inflash.dictinary:0000000000000178 _PLUS
       stm32eforth.s:931    .inflash.dictinary:000000000000017c CA_PLUS
       stm32eforth.s:931    .text:0000000000000246 PLUS
       stm32eforth.s:931    .inflash.dictinary:0000000000000180 LF_SUBB
       stm32eforth.s:931    .inflash.dictinary:0000000000000184 _SUBB
       stm32eforth.s:938    .inflash.dictinary:0000000000000188 CA_SUBB
       stm32eforth.s:938    .text:000000000000024e SUBB
       stm32eforth.s:938    .inflash.dictinary:000000000000018c LF_STAR
       stm32eforth.s:938    .inflash.dictinary:0000000000000190 _STAR
       stm32eforth.s:945    .inflash.dictinary:0000000000000194 CA_STAR
       stm32eforth.s:945    .text:0000000000000258 STAR
       stm32eforth.s:945    .inflash.dictinary:0000000000000198 LF_UMSTA
       stm32eforth.s:945    .inflash.dictinary:000000000000019c _UMSTA
       stm32eforth.s:952    .inflash.dictinary:00000000000001a0 CA_UMSTA
       stm32eforth.s:952    .text:0000000000000262 UMSTA
       stm32eforth.s:952    .inflash.dictinary:00000000000001a4 LF_MSTAR
       stm32eforth.s:952    .inflash.dictinary:00000000000001a8 _MSTAR
       stm32eforth.s:961    .inflash.dictinary:00000000000001ac CA_MSTAR
       stm32eforth.s:961    .text:000000000000026e MSTAR
       stm32eforth.s:961    .inflash.dictinary:00000000000001b0 LF_ONEP
       stm32eforth.s:961    .inflash.dictinary:00000000000001b4 _ONEP
       stm32eforth.s:970    .inflash.dictinary:00000000000001b8 CA_ONEP
       stm32eforth.s:970    .text:000000000000027a ONEP
       stm32eforth.s:970    .inflash.dictinary:00000000000001bc LF_ONEM
ARM GAS  stm32eforth.s 			page 85


       stm32eforth.s:970    .inflash.dictinary:00000000000001c0 _ONEM
       stm32eforth.s:976    .inflash.dictinary:00000000000001c4 CA_ONEM
       stm32eforth.s:976    .text:0000000000000280 ONEM
       stm32eforth.s:976    .inflash.dictinary:00000000000001c8 LF_TWOP
       stm32eforth.s:976    .inflash.dictinary:00000000000001cc _TWOP
       stm32eforth.s:982    .inflash.dictinary:00000000000001d0 CA_TWOP
       stm32eforth.s:982    .text:0000000000000286 TWOP
       stm32eforth.s:982    .inflash.dictinary:00000000000001d4 LF_TWOM
       stm32eforth.s:982    .inflash.dictinary:00000000000001d8 _TWOM
       stm32eforth.s:988    .inflash.dictinary:00000000000001dc CA_TWOM
       stm32eforth.s:988    .text:000000000000028c TWOM
       stm32eforth.s:988    .inflash.dictinary:00000000000001e0 LF_CELLP
       stm32eforth.s:988    .inflash.dictinary:00000000000001e4 _CELLP
       stm32eforth.s:994    .inflash.dictinary:00000000000001ec CA_CELLP
       stm32eforth.s:994    .text:0000000000000292 CELLP
       stm32eforth.s:994    .inflash.dictinary:00000000000001f0 LF_CELLM
       stm32eforth.s:994    .inflash.dictinary:00000000000001f4 _CELLM
       stm32eforth.s:1000   .inflash.dictinary:00000000000001fc CA_CELLM
       stm32eforth.s:1000   .text:0000000000000298 CELLM
       stm32eforth.s:1000   .inflash.dictinary:0000000000000200 LF_BLANK
       stm32eforth.s:1000   .inflash.dictinary:0000000000000204 _BLANK
       stm32eforth.s:1006   .inflash.dictinary:0000000000000208 CA_BLANK
       stm32eforth.s:1006   .text:000000000000029e BLANK
       stm32eforth.s:1006   .inflash.dictinary:000000000000020c LF_CELLS
       stm32eforth.s:1006   .inflash.dictinary:0000000000000210 _CELLS
       stm32eforth.s:1013   .inflash.dictinary:0000000000000218 CA_CELLS
       stm32eforth.s:1013   .text:00000000000002a8 CELLS
       stm32eforth.s:1013   .inflash.dictinary:000000000000021c LF_CELLSL
       stm32eforth.s:1013   .inflash.dictinary:0000000000000220 _CELLSL
       stm32eforth.s:1019   .inflash.dictinary:0000000000000228 CA_CELLSL
       stm32eforth.s:1019   .text:00000000000002ae CELLSL
       stm32eforth.s:1019   .inflash.dictinary:000000000000022c LF_TWOST
       stm32eforth.s:1019   .inflash.dictinary:0000000000000230 _TWOST
       stm32eforth.s:1025   .inflash.dictinary:0000000000000234 CA_TWOST
       stm32eforth.s:1025   .text:00000000000002b4 TWOST
       stm32eforth.s:1025   .inflash.dictinary:0000000000000238 LF_TWOSL
       stm32eforth.s:1025   .inflash.dictinary:000000000000023c _TWOSL
       stm32eforth.s:1031   .inflash.dictinary:0000000000000240 CA_TWOSL
       stm32eforth.s:1031   .text:00000000000002ba TWOSL
       stm32eforth.s:1031   .inflash.dictinary:0000000000000244 LF_QDUP
       stm32eforth.s:1031   .inflash.dictinary:0000000000000248 _QDUP
       stm32eforth.s:1037   .inflash.dictinary:0000000000000250 CA_QDUP
       stm32eforth.s:1037   .text:00000000000002c0 QDUP
       stm32eforth.s:1037   .inflash.dictinary:0000000000000254 LF_ROT
       stm32eforth.s:1037   .inflash.dictinary:0000000000000258 _ROT
       stm32eforth.s:1045   .inflash.dictinary:000000000000025c CA_ROT
       stm32eforth.s:1045   .text:00000000000002ca ROT
       stm32eforth.s:1045   .inflash.dictinary:0000000000000260 LF_DDROP
       stm32eforth.s:1045   .inflash.dictinary:0000000000000264 _DDROP
       stm32eforth.s:1054   .inflash.dictinary:000000000000026c CA_DDROP
       stm32eforth.s:1054   .text:00000000000002d4 DDROP
       stm32eforth.s:1054   .inflash.dictinary:0000000000000270 LF_DDUP
       stm32eforth.s:1054   .inflash.dictinary:0000000000000274 _DDUP
       stm32eforth.s:1061   .inflash.dictinary:000000000000027c CA_DDUP
       stm32eforth.s:1061   .text:00000000000002de DDUP
       stm32eforth.s:1061   .inflash.dictinary:0000000000000280 LF_DPLUS
       stm32eforth.s:1061   .inflash.dictinary:0000000000000284 _DPLUS
ARM GAS  stm32eforth.s 			page 86


       stm32eforth.s:1069   .inflash.dictinary:0000000000000288 CA_DPLUS
       stm32eforth.s:1069   .text:00000000000002ea DPLUS
       stm32eforth.s:1069   .inflash.dictinary:000000000000028c LF_INVER
       stm32eforth.s:1069   .inflash.dictinary:0000000000000290 _INVER
       stm32eforth.s:1080   .inflash.dictinary:0000000000000294 CA_INVER
       stm32eforth.s:1080   .text:00000000000002fe INVER
       stm32eforth.s:1080   .inflash.dictinary:0000000000000298 LF_NEGAT
       stm32eforth.s:1080   .inflash.dictinary:000000000000029c _NEGAT
       stm32eforth.s:1086   .inflash.dictinary:00000000000002a4 CA_NEGAT
       stm32eforth.s:1086   .text:0000000000000304 NEGAT
       stm32eforth.s:1086   .inflash.dictinary:00000000000002a8 LF_ABSS
       stm32eforth.s:1086   .inflash.dictinary:00000000000002ac _ABSS
       stm32eforth.s:1092   .inflash.dictinary:00000000000002b0 CA_ABSS
       stm32eforth.s:1092   .inflash.dictinary:00000000000002b4 LF_ZEQUAL
       stm32eforth.s:1092   .inflash.dictinary:00000000000002b8 _ZEQUAL
       stm32eforth.s:1100   .inflash.dictinary:00000000000002bc CA_ZEQUAL
       stm32eforth.s:1100   .text:0000000000000314 ZEQUAL
       stm32eforth.s:1100   .inflash.dictinary:00000000000002c0 LF_EQUAL
       stm32eforth.s:1100   .inflash.dictinary:00000000000002c4 _EQUAL
       stm32eforth.s:1109   .inflash.dictinary:00000000000002c8 CA_EQUAL
       stm32eforth.s:1109   .text:0000000000000322 EQUAL
       stm32eforth.s:1109   .inflash.dictinary:00000000000002cc LF_ULESS
       stm32eforth.s:1109   .inflash.dictinary:00000000000002d0 _ULESS
       stm32eforth.s:1119   .inflash.dictinary:00000000000002d4 CA_ULESS
       stm32eforth.s:1119   .text:0000000000000332 ULESS
       stm32eforth.s:1119   .inflash.dictinary:00000000000002d8 LF_LESS
       stm32eforth.s:1119   .inflash.dictinary:00000000000002dc _LESS
       stm32eforth.s:1129   .inflash.dictinary:00000000000002e0 CA_LESS
       stm32eforth.s:1129   .text:0000000000000342 LESS
       stm32eforth.s:1129   .inflash.dictinary:00000000000002e4 LF_GREAT
       stm32eforth.s:1129   .inflash.dictinary:00000000000002e8 _GREAT
       stm32eforth.s:1139   .inflash.dictinary:00000000000002ec CA_GREAT
       stm32eforth.s:1139   .text:0000000000000352 GREAT
       stm32eforth.s:1139   .inflash.dictinary:00000000000002f0 LF_MAX
       stm32eforth.s:1139   .inflash.dictinary:00000000000002f4 _MAX
       stm32eforth.s:1149   .inflash.dictinary:00000000000002f8 CA_MAX
       stm32eforth.s:1149   .text:0000000000000362 MAX
       stm32eforth.s:1149   .inflash.dictinary:00000000000002fc LF_MIN
       stm32eforth.s:1149   .inflash.dictinary:0000000000000300 _MIN
       stm32eforth.s:1158   .inflash.dictinary:0000000000000304 CA_MIN
       stm32eforth.s:1158   .text:000000000000036e MIN
       stm32eforth.s:1158   .inflash.dictinary:0000000000000308 LF_PSTOR
       stm32eforth.s:1158   .inflash.dictinary:000000000000030c _PSTOR
       stm32eforth.s:1167   .inflash.dictinary:0000000000000310 CA_PSTOR
       stm32eforth.s:1167   .text:000000000000037a PSTOR
       stm32eforth.s:1167   .inflash.dictinary:0000000000000314 LF_DSTOR
       stm32eforth.s:1167   .inflash.dictinary:0000000000000318 _DSTOR
       stm32eforth.s:1177   .inflash.dictinary:000000000000031c CA_DSTOR
       stm32eforth.s:1177   .text:000000000000038a DSTOR
       stm32eforth.s:1177   .inflash.dictinary:0000000000000320 LF_DAT
       stm32eforth.s:1177   .inflash.dictinary:0000000000000324 _DAT
       stm32eforth.s:1187   .inflash.dictinary:0000000000000328 CA_DAT
       stm32eforth.s:1187   .text:000000000000039e DAT
       stm32eforth.s:1187   .inflash.dictinary:000000000000032c LF_COUNT
       stm32eforth.s:1187   .inflash.dictinary:0000000000000330 _COUNT
       stm32eforth.s:1195   .inflash.dictinary:0000000000000338 CA_COUNT
       stm32eforth.s:1195   .text:00000000000003a8 COUNT
ARM GAS  stm32eforth.s 			page 87


       stm32eforth.s:1195   .inflash.dictinary:000000000000033c LF_DNEGA
       stm32eforth.s:1195   .inflash.dictinary:0000000000000340 _DNEGA
       stm32eforth.s:1203   .inflash.dictinary:0000000000000348 CA_DNEGA
       stm32eforth.s:1203   .text:00000000000003b4 DNEGA
       stm32eforth.s:1221   .text:00000000000003c4 DOVAR
       stm32eforth.s:1233   .text:00000000000003d0 DOCON
       stm32eforth.s:1203   .inflash.dictinary:000000000000034c LF_SEED
       stm32eforth.s:1203   .inflash.dictinary:0000000000000350 _SEED
       stm32eforth.s:1244   .inflash.dictinary:0000000000000358 CA_SEED
       stm32eforth.s:1244   .inflash.dictinary:000000000000035c LF_MSEC
       stm32eforth.s:1244   .inflash.dictinary:0000000000000360 _MSEC
       stm32eforth.s:1251   .inflash.dictinary:0000000000000368 CA_MSEC
       stm32eforth.s:1251   .text:00000000000003e6 MSEC
       stm32eforth.s:1251   .inflash.dictinary:000000000000036c LF_TIMER
       stm32eforth.s:1251   .inflash.dictinary:0000000000000370 _TIMER
       stm32eforth.s:1258   .inflash.dictinary:0000000000000378 CA_TIMER
       stm32eforth.s:1258   .inflash.dictinary:000000000000037c LF_TBOOT
       stm32eforth.s:1258   .inflash.dictinary:0000000000000380 _TBOOT
       stm32eforth.s:1265   .inflash.dictinary:0000000000000388 CA_TBOOT
       stm32eforth.s:1265   .text:00000000000003fa TBOOT
       stm32eforth.s:1265   .inflash.dictinary:000000000000038c LF_BASE
       stm32eforth.s:1265   .inflash.dictinary:0000000000000390 _BASE
       stm32eforth.s:1272   .inflash.dictinary:0000000000000398 CA_BASE
       stm32eforth.s:1272   .text:0000000000000404 BASE
       stm32eforth.s:1284   .text:000000000000040e TEMP
       stm32eforth.s:1272   .inflash.dictinary:000000000000039c LF_SPAN
       stm32eforth.s:1272   .inflash.dictinary:00000000000003a0 _SPAN
       stm32eforth.s:1291   .inflash.dictinary:00000000000003a8 CA_SPAN
       stm32eforth.s:1291   .text:0000000000000418 SPAN
       stm32eforth.s:1291   .inflash.dictinary:00000000000003ac LF_INN
       stm32eforth.s:1291   .inflash.dictinary:00000000000003b0 _INN
       stm32eforth.s:1298   .inflash.dictinary:00000000000003b4 CA_INN
       stm32eforth.s:1298   .text:0000000000000422 INN
       stm32eforth.s:1298   .inflash.dictinary:00000000000003b8 LF_NTIB
       stm32eforth.s:1298   .inflash.dictinary:00000000000003bc _NTIB
       stm32eforth.s:1305   .inflash.dictinary:00000000000003c4 CA_NTIB
       stm32eforth.s:1305   .text:000000000000042c NTIB
       stm32eforth.s:1305   .inflash.dictinary:00000000000003c8 LF_TEVAL
       stm32eforth.s:1305   .inflash.dictinary:00000000000003cc _TEVAL
       stm32eforth.s:1312   .inflash.dictinary:00000000000003d4 CA_TEVAL
       stm32eforth.s:1312   .text:0000000000000436 TEVAL
       stm32eforth.s:1312   .inflash.dictinary:00000000000003d8 LF_HLD
       stm32eforth.s:1312   .inflash.dictinary:00000000000003dc _HLD
       stm32eforth.s:1319   .inflash.dictinary:00000000000003e0 CA_HLD
       stm32eforth.s:1319   .text:0000000000000440 HLD
       stm32eforth.s:1319   .inflash.dictinary:00000000000003e4 LF_CNTXT
       stm32eforth.s:1319   .inflash.dictinary:00000000000003e8 _CNTXT
       stm32eforth.s:1326   .inflash.dictinary:00000000000003f0 CA_CNTXT
       stm32eforth.s:1326   .text:000000000000044a CNTXT
       stm32eforth.s:1327   .text:000000000000044a CRRNT
       stm32eforth.s:1326   .inflash.dictinary:00000000000003f4 LF_CPP
       stm32eforth.s:1326   .inflash.dictinary:00000000000003f8 _CPP
       stm32eforth.s:1334   .inflash.dictinary:00000000000003fc CA_CPP
       stm32eforth.s:1334   .text:0000000000000454 CPP
       stm32eforth.s:1334   .inflash.dictinary:0000000000000400 LF_FCP
       stm32eforth.s:1334   .inflash.dictinary:0000000000000404 _FCP
       stm32eforth.s:1341   .inflash.dictinary:0000000000000408 CA_FCP
ARM GAS  stm32eforth.s 			page 88


       stm32eforth.s:1341   .text:000000000000045e FCP
       stm32eforth.s:1341   .inflash.dictinary:000000000000040c LF_LAST
       stm32eforth.s:1341   .inflash.dictinary:0000000000000410 _LAST
       stm32eforth.s:1348   .inflash.dictinary:0000000000000418 CA_LAST
       stm32eforth.s:1348   .text:0000000000000468 LAST
       stm32eforth.s:1348   .inflash.dictinary:000000000000041c LF_USER_BEGIN
       stm32eforth.s:1348   .inflash.dictinary:0000000000000420 _USER_BEGIN
       stm32eforth.s:1359   .inflash.dictinary:000000000000042c CA_USER_BEGIN
       stm32eforth.s:1359   .text:0000000000000472 USER_BEGIN
       stm32eforth.s:1363   .text:000000000000047c USR_BGN_ADR
       stm32eforth.s:1364   .text:000000000000047c $d
       stm32eforth.s:1359   .inflash.dictinary:0000000000000430 LF_USER_END
       stm32eforth.s:1359   .inflash.dictinary:0000000000000434 _USER_END
       stm32eforth.s:1368   .inflash.dictinary:0000000000000440 CA_USER_END
       stm32eforth.s:1368   .text:0000000000000480 USER_END
       stm32eforth.s:1369   .text:0000000000000480 $t
       stm32eforth.s:1368   .inflash.dictinary:0000000000000444 LF_IMG_ADR
       stm32eforth.s:1368   .inflash.dictinary:0000000000000448 _IMG_ADR
       stm32eforth.s:1375   .inflash.dictinary:0000000000000450 CA_IMG_ADR
       stm32eforth.s:1375   .text:000000000000048e IMG_ADR
       stm32eforth.s:1379   .text:0000000000000498 USR_IMG_ADR
       stm32eforth.s:1380   .text:0000000000000498 $d
       stm32eforth.s:4140   .user:0000000000000000 USER_SPACE
       stm32eforth.s:1375   .inflash.dictinary:0000000000000454 LF_IMG_SIGN
       stm32eforth.s:1375   .inflash.dictinary:0000000000000458 _IMG_SIGN
       stm32eforth.s:1384   .inflash.dictinary:0000000000000464 CA_IMG_SIGN
       stm32eforth.s:1384   .text:000000000000049c IMG_SIGN
       stm32eforth.s:1385   .text:000000000000049c $t
       stm32eforth.s:1384   .inflash.dictinary:0000000000000468 LF_WITHI
       stm32eforth.s:1384   .inflash.dictinary:000000000000046c _WITHI
       stm32eforth.s:1395   .inflash.dictinary:0000000000000474 CA_WITHI
       stm32eforth.s:1395   .text:00000000000004a6 WITHI
       stm32eforth.s:1395   .inflash.dictinary:0000000000000478 LF_UMMOD
       stm32eforth.s:1395   .inflash.dictinary:000000000000047c _UMMOD
       stm32eforth.s:1409   .inflash.dictinary:0000000000000484 CA_UMMOD
       stm32eforth.s:1409   .text:00000000000004c6 UMMOD
       stm32eforth.s:1413   .text:00000000000004d0 UMMOD0
       stm32eforth.s:1420   .text:00000000000004e0 UMMOD1
       stm32eforth.s:1426   .text:00000000000004ea UMMOD2
       stm32eforth.s:1409   .inflash.dictinary:0000000000000488 LF_MSMOD
       stm32eforth.s:1409   .inflash.dictinary:000000000000048c _MSMOD
       stm32eforth.s:1435   .inflash.dictinary:0000000000000494 CA_MSMOD
       stm32eforth.s:1435   .text:00000000000004f4 MSMOD
       stm32eforth.s:1442   .text:000000000000050c $d
       stm32eforth.s:1447   .text:0000000000000520 MMOD1
       stm32eforth.s:1443   .text:0000000000000510 $t
       stm32eforth.s:1452   .text:0000000000000530 $d
       stm32eforth.s:1455   .text:000000000000053c MMOD2
       stm32eforth.s:1453   .text:0000000000000534 $t
       stm32eforth.s:1460   .text:000000000000054c $d
       stm32eforth.s:1464   .text:000000000000055c MMOD3
       stm32eforth.s:1461   .text:0000000000000550 $t
       stm32eforth.s:1435   .inflash.dictinary:0000000000000498 LF_SLMOD
       stm32eforth.s:1435   .inflash.dictinary:000000000000049c _SLMOD
       stm32eforth.s:1469   .inflash.dictinary:00000000000004a4 CA_SLMOD
       stm32eforth.s:1469   .text:0000000000000560 SLMOD
       stm32eforth.s:1469   .inflash.dictinary:00000000000004a8 LF_MODD
ARM GAS  stm32eforth.s 			page 89


       stm32eforth.s:1469   .inflash.dictinary:00000000000004ac _MODD
       stm32eforth.s:1479   .inflash.dictinary:00000000000004b4 CA_MODD
       stm32eforth.s:1479   .inflash.dictinary:00000000000004b8 LF_SLASH
       stm32eforth.s:1479   .inflash.dictinary:00000000000004bc _SLASH
       stm32eforth.s:1487   .inflash.dictinary:00000000000004c0 CA_SLASH
       stm32eforth.s:1487   .text:0000000000000588 SLASH
       stm32eforth.s:1487   .inflash.dictinary:00000000000004c4 LF_SSMOD
       stm32eforth.s:1487   .inflash.dictinary:00000000000004c8 _SSMOD
       stm32eforth.s:1496   .inflash.dictinary:00000000000004d0 CA_SSMOD
       stm32eforth.s:1496   .text:000000000000059c SSMOD
       stm32eforth.s:1496   .inflash.dictinary:00000000000004d4 LF_STASL
       stm32eforth.s:1496   .inflash.dictinary:00000000000004d8 _STASL
       stm32eforth.s:1506   .inflash.dictinary:00000000000004dc CA_STASL
       stm32eforth.s:1506   .text:00000000000005b4 STASL
       stm32eforth.s:1506   .inflash.dictinary:00000000000004e0 LF_ALGND
       stm32eforth.s:1506   .inflash.dictinary:00000000000004e4 _ALGND
       stm32eforth.s:1518   .inflash.dictinary:00000000000004ec CA_ALGND
       stm32eforth.s:1518   .text:00000000000005c8 ALGND
       stm32eforth.s:1518   .inflash.dictinary:00000000000004f0 LF_TCHAR
       stm32eforth.s:1518   .inflash.dictinary:00000000000004f4 _TCHAR
       stm32eforth.s:1526   .inflash.dictinary:00000000000004fc CA_TCHAR
       stm32eforth.s:1526   .text:00000000000005d6 TCHAR
       stm32eforth.s:1529   .text:00000000000005de $d
       stm32eforth.s:1530   .text:00000000000005e2 $t
       stm32eforth.s:1534   .text:00000000000005f2 $d
       stm32eforth.s:1535   .text:00000000000005f6 $t
       stm32eforth.s:1538   .text:0000000000000602 $d
       stm32eforth.s:1542   .text:0000000000000612 TCHA1
       stm32eforth.s:1539   .text:0000000000000606 $t
       stm32eforth.s:1541   .text:000000000000060e $d
       stm32eforth.s:1543   .text:0000000000000612 $t
       stm32eforth.s:1526   .inflash.dictinary:0000000000000500 LF_DEPTH
       stm32eforth.s:1526   .inflash.dictinary:0000000000000504 _DEPTH
       stm32eforth.s:1547   .inflash.dictinary:000000000000050c CA_DEPTH
       stm32eforth.s:1547   .text:0000000000000616 DEPTH
       stm32eforth.s:1547   .inflash.dictinary:0000000000000510 LF_PICK
       stm32eforth.s:1547   .inflash.dictinary:0000000000000514 _PICK
       stm32eforth.s:1556   .inflash.dictinary:000000000000051c CA_PICK
       stm32eforth.s:1556   .text:000000000000062c PICK
       stm32eforth.s:1556   .inflash.dictinary:0000000000000520 LF_HERE
       stm32eforth.s:1556   .inflash.dictinary:0000000000000524 _HERE
       stm32eforth.s:1570   .inflash.dictinary:000000000000052c CA_HERE
       stm32eforth.s:1570   .text:0000000000000648 HERE
       stm32eforth.s:1570   .inflash.dictinary:0000000000000530 LF_PAD
       stm32eforth.s:1570   .inflash.dictinary:0000000000000534 _PAD
       stm32eforth.s:1578   .inflash.dictinary:0000000000000538 CA_PAD
       stm32eforth.s:1578   .text:0000000000000658 PAD
       stm32eforth.s:1578   .inflash.dictinary:000000000000053c LF_TIB
       stm32eforth.s:1578   .inflash.dictinary:0000000000000540 _TIB
       stm32eforth.s:1586   .inflash.dictinary:0000000000000544 CA_TIB
       stm32eforth.s:1586   .text:0000000000000668 TIB
       stm32eforth.s:1586   .inflash.dictinary:0000000000000548 LF_ATEXE
       stm32eforth.s:1586   .inflash.dictinary:000000000000054c _ATEXE
       stm32eforth.s:1593   .inflash.dictinary:0000000000000558 CA_ATEXE
       stm32eforth.s:1593   .text:0000000000000670 ATEXE
       stm32eforth.s:1593   .inflash.dictinary:000000000000055c LF_CMOVE
       stm32eforth.s:1593   .inflash.dictinary:0000000000000560 _CMOVE
ARM GAS  stm32eforth.s 			page 90


       stm32eforth.s:1604   .inflash.dictinary:0000000000000568 CA_CMOVE
       stm32eforth.s:1604   .text:0000000000000682 CMOVE
       stm32eforth.s:1611   .text:0000000000000694 CMOV1
       stm32eforth.s:1608   .text:000000000000068c CMOV0
       stm32eforth.s:1616   .text:000000000000069e CMOV2
       stm32eforth.s:1604   .inflash.dictinary:000000000000056c LF_MOVE
       stm32eforth.s:1604   .inflash.dictinary:0000000000000570 _MOVE
       stm32eforth.s:1622   .inflash.dictinary:0000000000000578 CA_MOVE
       stm32eforth.s:1622   .text:00000000000006a4 MOVE
       stm32eforth.s:1630   .text:00000000000006ba MOVE1
       stm32eforth.s:1627   .text:00000000000006b2 MOVE0
       stm32eforth.s:1635   .text:00000000000006c4 MOVE2
       stm32eforth.s:1622   .inflash.dictinary:000000000000057c LF_FILL
       stm32eforth.s:1622   .inflash.dictinary:0000000000000580 _FILL
       stm32eforth.s:1641   .inflash.dictinary:0000000000000588 CA_FILL
       stm32eforth.s:1641   .text:00000000000006ca FILL
       stm32eforth.s:1644   .text:00000000000006d2 FILL0
       stm32eforth.s:1647   .text:00000000000006d6 FILL1
       stm32eforth.s:1653   .text:00000000000006e4 FILL2
       stm32eforth.s:1641   .inflash.dictinary:000000000000058c LF_PACKS
       stm32eforth.s:1641   .inflash.dictinary:0000000000000590 _PACKS
       stm32eforth.s:1659   .inflash.dictinary:0000000000000598 CA_PACKS
       stm32eforth.s:1659   .text:00000000000006ea PACKS
       stm32eforth.s:1668   .text:000000000000070a $d
       stm32eforth.s:1669   .text:000000000000070e $t
       stm32eforth.s:1671   .text:0000000000000716 $d
       stm32eforth.s:1672   .text:000000000000071a $t
       stm32eforth.s:1659   .inflash.dictinary:000000000000059c LF_DIGIT
       stm32eforth.s:1659   .inflash.dictinary:00000000000005a0 _DIGIT
       stm32eforth.s:1688   .inflash.dictinary:00000000000005a8 CA_DIGIT
       stm32eforth.s:1688   .text:0000000000000742 DIGIT
       stm32eforth.s:1691   .text:000000000000074a $d
       stm32eforth.s:1692   .text:000000000000074e $t
       stm32eforth.s:1688   .inflash.dictinary:00000000000005ac LF_EXTRC
       stm32eforth.s:1688   .inflash.dictinary:00000000000005b0 _EXTRC
       stm32eforth.s:1701   .inflash.dictinary:00000000000005b8 CA_EXTRC
       stm32eforth.s:1701   .text:0000000000000766 EXTRC
       stm32eforth.s:1704   .text:000000000000076e $d
       stm32eforth.s:1705   .text:0000000000000772 $t
       stm32eforth.s:1701   .inflash.dictinary:00000000000005bc LF_BDIGS
       stm32eforth.s:1701   .inflash.dictinary:00000000000005c0 _BDIGS
       stm32eforth.s:1713   .inflash.dictinary:00000000000005c4 CA_BDIGS
       stm32eforth.s:1713   .text:0000000000000786 BDIGS
       stm32eforth.s:1713   .inflash.dictinary:00000000000005c8 LF_HOLD
       stm32eforth.s:1713   .inflash.dictinary:00000000000005cc _HOLD
       stm32eforth.s:1722   .inflash.dictinary:00000000000005d4 CA_HOLD
       stm32eforth.s:1722   .text:000000000000079a HOLD
       stm32eforth.s:1722   .inflash.dictinary:00000000000005d8 LF_DIG
       stm32eforth.s:1722   .inflash.dictinary:00000000000005dc _DIG
       stm32eforth.s:1735   .inflash.dictinary:00000000000005e0 CA_DIG
       stm32eforth.s:1735   .text:00000000000007be DIG
       stm32eforth.s:1735   .inflash.dictinary:00000000000005e4 LF_DIGS
       stm32eforth.s:1735   .inflash.dictinary:00000000000005e8 _DIGS
       stm32eforth.s:1745   .inflash.dictinary:00000000000005ec CA_DIGS
       stm32eforth.s:1745   .text:00000000000007d6 DIGS
       stm32eforth.s:1747   .text:00000000000007da DIGS1
       stm32eforth.s:1751   .text:00000000000007e6 $d
ARM GAS  stm32eforth.s 			page 91


       stm32eforth.s:1753   .text:00000000000007ec DIGS2
       stm32eforth.s:1752   .text:00000000000007ea $t
       stm32eforth.s:1745   .inflash.dictinary:00000000000005f0 LF_SIGN
       stm32eforth.s:1745   .inflash.dictinary:00000000000005f4 _SIGN
       stm32eforth.s:1758   .inflash.dictinary:00000000000005fc CA_SIGN
       stm32eforth.s:1758   .text:00000000000007f0 SIGN
       stm32eforth.s:1762   .text:00000000000007fc $d
       stm32eforth.s:1766   .text:000000000000080c SIGN1
       stm32eforth.s:1763   .text:0000000000000800 $t
       stm32eforth.s:1764   .text:0000000000000804 $d
       stm32eforth.s:1765   .text:0000000000000808 $t
       stm32eforth.s:1758   .inflash.dictinary:0000000000000600 LF_EDIGS
       stm32eforth.s:1758   .inflash.dictinary:0000000000000604 _EDIGS
       stm32eforth.s:1771   .inflash.dictinary:0000000000000608 CA_EDIGS
       stm32eforth.s:1771   .text:0000000000000810 EDIGS
       stm32eforth.s:1788   .text:0000000000000830 STRR
       stm32eforth.s:1771   .inflash.dictinary:000000000000060c LF_HEX
       stm32eforth.s:1771   .inflash.dictinary:0000000000000610 _HEX
       stm32eforth.s:1802   .inflash.dictinary:0000000000000614 CA_HEX
       stm32eforth.s:1802   .text:0000000000000858 HEX
       stm32eforth.s:1805   .text:0000000000000860 $d
       stm32eforth.s:1806   .text:0000000000000864 $t
       stm32eforth.s:1802   .inflash.dictinary:0000000000000618 LF_DECIM
       stm32eforth.s:1802   .inflash.dictinary:000000000000061c _DECIM
       stm32eforth.s:1812   .inflash.dictinary:0000000000000624 CA_DECIM
       stm32eforth.s:1812   .text:0000000000000870 DECIM
       stm32eforth.s:1815   .text:0000000000000878 $d
       stm32eforth.s:1816   .text:000000000000087c $t
       stm32eforth.s:1812   .inflash.dictinary:0000000000000628 LF_DIGTQ
       stm32eforth.s:1812   .inflash.dictinary:000000000000062c _DIGTQ
       stm32eforth.s:1825   .inflash.dictinary:0000000000000634 CA_DIGTQ
       stm32eforth.s:1825   .text:0000000000000888 DIGTQ
       stm32eforth.s:1829   .text:0000000000000894 $d
       stm32eforth.s:1830   .text:0000000000000898 $t
       stm32eforth.s:1832   .text:00000000000008a0 $d
       stm32eforth.s:1833   .text:00000000000008a4 $t
       stm32eforth.s:1836   .text:00000000000008b0 $d
       stm32eforth.s:1845   .text:00000000000008d4 DGTQ1
       stm32eforth.s:1837   .text:00000000000008b4 $t
       stm32eforth.s:1838   .text:00000000000008b8 $d
       stm32eforth.s:1839   .text:00000000000008bc $t
       stm32eforth.s:1842   .text:00000000000008c8 $d
       stm32eforth.s:1843   .text:00000000000008cc $t
       stm32eforth.s:1825   .inflash.dictinary:0000000000000638 LF_NUMBQ
       stm32eforth.s:1825   .inflash.dictinary:000000000000063c _NUMBQ
       stm32eforth.s:1853   .inflash.dictinary:0000000000000644 CA_NUMBQ
       stm32eforth.s:1853   .text:00000000000008e4 NUMBQ
       stm32eforth.s:1859   .text:00000000000008f8 $d
       stm32eforth.s:1860   .text:00000000000008fc $t
       stm32eforth.s:1865   .text:0000000000000910 $d
       stm32eforth.s:1866   .text:0000000000000914 $t
       stm32eforth.s:1868   .text:000000000000091c $d
       stm32eforth.s:1874   .text:0000000000000934 NUMQ1
       stm32eforth.s:1869   .text:0000000000000920 $t
       stm32eforth.s:1878   .text:0000000000000940 $d
       stm32eforth.s:1879   .text:0000000000000944 $t
       stm32eforth.s:1889   .text:000000000000096c $d
ARM GAS  stm32eforth.s 			page 92


       stm32eforth.s:1928   .text:00000000000009f8 NUMQ6
       stm32eforth.s:1890   .text:0000000000000970 $t
       stm32eforth.s:1892   .text:0000000000000978 NUMQ2
       stm32eforth.s:1900   .text:0000000000000994 $d
       stm32eforth.s:1919   .text:00000000000009dc NUMQ4
       stm32eforth.s:1901   .text:0000000000000998 $t
       stm32eforth.s:1909   .text:00000000000009b8 $d
       stm32eforth.s:1910   .text:00000000000009bc $t
       stm32eforth.s:1914   .text:00000000000009cc $d
       stm32eforth.s:1916   .text:00000000000009d4 NUMQ3
       stm32eforth.s:1915   .text:00000000000009d0 $t
       stm32eforth.s:1926   .text:00000000000009f4 NUMQ5
       stm32eforth.s:1925   .text:00000000000009f0 $d
       stm32eforth.s:1927   .text:00000000000009f4 $t
       stm32eforth.s:1853   .inflash.dictinary:0000000000000648 LF_KEY
       stm32eforth.s:1853   .inflash.dictinary:000000000000064c _KEY
       stm32eforth.s:1941   .inflash.dictinary:0000000000000650 CA_KEY
       stm32eforth.s:1941   .text:0000000000000a10 KEY
       stm32eforth.s:1943   .text:0000000000000a14 KEY1
       stm32eforth.s:1946   .text:0000000000000a1c $d
       stm32eforth.s:1947   .text:0000000000000a20 $t
       stm32eforth.s:1941   .inflash.dictinary:0000000000000654 LF_SPACE
       stm32eforth.s:1941   .inflash.dictinary:0000000000000658 _SPACE
       stm32eforth.s:1951   .inflash.dictinary:0000000000000660 CA_SPACE
       stm32eforth.s:1951   .text:0000000000000a24 SPACE
       stm32eforth.s:1951   .inflash.dictinary:0000000000000664 LF_SPACS
       stm32eforth.s:1951   .inflash.dictinary:0000000000000668 _SPACS
       stm32eforth.s:1959   .inflash.dictinary:0000000000000670 CA_SPACS
       stm32eforth.s:1959   .text:0000000000000a34 SPACS
       stm32eforth.s:1962   .text:0000000000000a3c $d
       stm32eforth.s:1963   .text:0000000000000a40 $t
       stm32eforth.s:1968   .text:0000000000000a50 CHAR2
       stm32eforth.s:1966   .text:0000000000000a4c CHAR1
       stm32eforth.s:1970   .text:0000000000000a54 $d
       stm32eforth.s:1971   .text:0000000000000a58 $t
       stm32eforth.s:1959   .inflash.dictinary:0000000000000674 LF_TYPEE
       stm32eforth.s:1959   .inflash.dictinary:0000000000000678 _TYPEE
       stm32eforth.s:1975   .inflash.dictinary:0000000000000680 CA_TYPEE
       stm32eforth.s:1975   .text:0000000000000a5c TYPEE
       stm32eforth.s:1983   .text:0000000000000a74 TYPE2
       stm32eforth.s:1979   .text:0000000000000a68 TYPE1
       stm32eforth.s:1985   .text:0000000000000a78 $d
       stm32eforth.s:1986   .text:0000000000000a7c $t
       stm32eforth.s:1975   .inflash.dictinary:0000000000000684 LF_CR
       stm32eforth.s:1975   .inflash.dictinary:0000000000000688 _CR
       stm32eforth.s:1991   .inflash.dictinary:000000000000068c CA_CR
       stm32eforth.s:1991   .text:0000000000000a84 CR
       stm32eforth.s:1994   .text:0000000000000a8c $d
       stm32eforth.s:1995   .text:0000000000000a90 $t
       stm32eforth.s:1997   .text:0000000000000a98 $d
       stm32eforth.s:1998   .text:0000000000000a9c $t
       stm32eforth.s:2009   .text:0000000000000aa4 DOSTR
       stm32eforth.s:2032   .text:0000000000000ad8 STRQP
       stm32eforth.s:2044   .text:0000000000000ae4 DOTST
       stm32eforth.s:2057   .text:0000000000000af4 DOTQP
       stm32eforth.s:1991   .inflash.dictinary:0000000000000690 LF_DOTR
       stm32eforth.s:1991   .inflash.dictinary:0000000000000694 _DOTR
ARM GAS  stm32eforth.s 			page 93


       stm32eforth.s:2065   .inflash.dictinary:0000000000000698 CA_DOTR
       stm32eforth.s:2065   .text:0000000000000b04 DOTR
       stm32eforth.s:2065   .inflash.dictinary:000000000000069c LF_UDOTR
       stm32eforth.s:2065   .inflash.dictinary:00000000000006a0 _UDOTR
       stm32eforth.s:2078   .inflash.dictinary:00000000000006a4 CA_UDOTR
       stm32eforth.s:2078   .text:0000000000000b28 UDOTR
       stm32eforth.s:2078   .inflash.dictinary:00000000000006a8 LF_UDOT
       stm32eforth.s:2078   .inflash.dictinary:00000000000006ac _UDOT
       stm32eforth.s:2093   .inflash.dictinary:00000000000006b0 CA_UDOT
       stm32eforth.s:2093   .text:0000000000000b54 UDOT
       stm32eforth.s:2093   .inflash.dictinary:00000000000006b4 LF_DOT
       stm32eforth.s:2093   .inflash.dictinary:00000000000006b8 _DOT
       stm32eforth.s:2104   .inflash.dictinary:00000000000006bc CA_DOT
       stm32eforth.s:2104   .text:0000000000000b70 DOT
       stm32eforth.s:2109   .text:0000000000000b80 $d
       stm32eforth.s:2110   .text:0000000000000b84 $t
       stm32eforth.s:2112   .text:0000000000000b8c $d
       stm32eforth.s:2115   .text:0000000000000b98 DOT1
       stm32eforth.s:2113   .text:0000000000000b90 $t
       stm32eforth.s:2104   .inflash.dictinary:00000000000006c0 LF_QUEST
       stm32eforth.s:2104   .inflash.dictinary:00000000000006c4 _QUEST
       stm32eforth.s:2123   .inflash.dictinary:00000000000006c8 CA_QUEST
       stm32eforth.s:2123   .text:0000000000000ba8 QUEST
       stm32eforth.s:2139   .text:0000000000000bb8 PARS
       stm32eforth.s:2147   .text:0000000000000bd4 $d
       stm32eforth.s:2215   .text:0000000000000cc6 PARS8
       stm32eforth.s:2148   .text:0000000000000bd8 $t
       stm32eforth.s:2154   .text:0000000000000bf0 $d
       stm32eforth.s:2176   .text:0000000000000c40 PARS3
       stm32eforth.s:2155   .text:0000000000000bf4 $t
       stm32eforth.s:2156   .text:0000000000000bf8 PARS1
       stm32eforth.s:2164   .text:0000000000000c14 $d
       stm32eforth.s:2174   .text:0000000000000c3c PARS2
       stm32eforth.s:2165   .text:0000000000000c18 $t
       stm32eforth.s:2167   .text:0000000000000c20 $d
       stm32eforth.s:2168   .text:0000000000000c24 $t
       stm32eforth.s:2171   .text:0000000000000c30 $d
       stm32eforth.s:2172   .text:0000000000000c34 $t
       stm32eforth.s:2180   .text:0000000000000c4c PARS4
       stm32eforth.s:2191   .text:0000000000000c74 $d
       stm32eforth.s:2193   .text:0000000000000c7c PARS5
       stm32eforth.s:2192   .text:0000000000000c78 $t
       stm32eforth.s:2195   .text:0000000000000c80 $d
       stm32eforth.s:2202   .text:0000000000000c9a PARS6
       stm32eforth.s:2196   .text:0000000000000c84 $t
       stm32eforth.s:2198   .text:0000000000000c8c $d
       stm32eforth.s:2199   .text:0000000000000c90 $t
       stm32eforth.s:2208   .text:0000000000000cae PARS7
       stm32eforth.s:2123   .inflash.dictinary:00000000000006cc LF_PARSE
       stm32eforth.s:2123   .inflash.dictinary:00000000000006d0 _PARSE
       stm32eforth.s:2223   .inflash.dictinary:00000000000006d8 CA_PARSE
       stm32eforth.s:2223   .text:0000000000000cd6 PARSE
       stm32eforth.s:2223   .inflash.dictinary:00000000000006dc LF_DOTPR
       stm32eforth.s:2223   .inflash.dictinary:00000000000006e0 _DOTPR
       stm32eforth.s:2243   .inflash.dictinary:00000000000006e4 CA_DOTPR
       stm32eforth.s:2243   .text:0000000000000d16 DOTPR
       stm32eforth.s:2246   .text:0000000000000d1e $d
ARM GAS  stm32eforth.s 			page 94


       stm32eforth.s:2247   .text:0000000000000d22 $t
       stm32eforth.s:2243   .inflash.dictinary:00000000000006e8 LF_PAREN
       stm32eforth.s:2243   .inflash.dictinary:00000000000006ec _PAREN
       stm32eforth.s:2253   .inflash.dictinary:00000000000006f0 CA_PAREN
       stm32eforth.s:2253   .text:0000000000000d2e PAREN
       stm32eforth.s:2256   .text:0000000000000d36 $d
       stm32eforth.s:2257   .text:0000000000000d3a $t
       stm32eforth.s:2253   .inflash.dictinary:00000000000006f4 LF_BKSLA
       stm32eforth.s:2253   .inflash.dictinary:00000000000006f8 _BKSLA
       stm32eforth.s:2263   .inflash.dictinary:00000000000006fc CA_BKSLA
       stm32eforth.s:2263   .text:0000000000000d46 BKSLA
       stm32eforth.s:2263   .inflash.dictinary:0000000000000700 LF_CAHR
       stm32eforth.s:2263   .inflash.dictinary:0000000000000704 _CAHR
       stm32eforth.s:2273   .inflash.dictinary:000000000000070c CA_CAHR
       stm32eforth.s:2273   .text:0000000000000d5e CAHR
       stm32eforth.s:2273   .inflash.dictinary:0000000000000710 LF_WORDD
       stm32eforth.s:2273   .inflash.dictinary:0000000000000714 _WORDD
       stm32eforth.s:2283   .inflash.dictinary:000000000000071c CA_WORDD
       stm32eforth.s:2283   .text:0000000000000d76 WORDD
       stm32eforth.s:2283   .inflash.dictinary:0000000000000720 LF_TOKEN
       stm32eforth.s:2283   .inflash.dictinary:0000000000000724 _TOKEN
       stm32eforth.s:2293   .inflash.dictinary:000000000000072c CA_TOKEN
       stm32eforth.s:2293   .text:0000000000000d8e TOKEN
       stm32eforth.s:2293   .inflash.dictinary:0000000000000730 LF_TOCFA
       stm32eforth.s:2293   .inflash.dictinary:0000000000000734 _TOCFA
       stm32eforth.s:2304   .inflash.dictinary:000000000000073c CA_TOCFA
       stm32eforth.s:2304   .text:0000000000000d9e TOCFA
       stm32eforth.s:2308   .text:0000000000000daa $d
       stm32eforth.s:2309   .text:0000000000000dae $t
       stm32eforth.s:2304   .inflash.dictinary:0000000000000740 LF_NAMET
       stm32eforth.s:2304   .inflash.dictinary:0000000000000744 _NAMET
       stm32eforth.s:2316   .inflash.dictinary:000000000000074c CA_NAMET
       stm32eforth.s:2316   .text:0000000000000dbe NAMET
       stm32eforth.s:2316   .inflash.dictinary:0000000000000750 LF_SAMEQ
       stm32eforth.s:2316   .inflash.dictinary:0000000000000754 _SAMEQ
       stm32eforth.s:2331   .inflash.dictinary:000000000000075c CA_SAMEQ
       stm32eforth.s:2331   .text:0000000000000dce SAMEQ
       stm32eforth.s:2351   .text:0000000000000e16 SAME2
       stm32eforth.s:2335   .text:0000000000000dda SAME1
       stm32eforth.s:2347   .text:0000000000000e06 $d
       stm32eforth.s:2348   .text:0000000000000e0a $t
       stm32eforth.s:2353   .text:0000000000000e1a $d
       stm32eforth.s:2354   .text:0000000000000e1e $t
       stm32eforth.s:2355   .text:0000000000000e22 $d
       stm32eforth.s:2356   .text:0000000000000e26 $t
       stm32eforth.s:2368   .text:0000000000000e2a FIND
       stm32eforth.s:2377   .text:0000000000000e4a FIND1
       stm32eforth.s:2380   .text:0000000000000e52 $d
       stm32eforth.s:2400   .text:0000000000000e9a FIND6
       stm32eforth.s:2381   .text:0000000000000e56 $t
       stm32eforth.s:2384   .text:0000000000000e62 $d
       stm32eforth.s:2385   .text:0000000000000e66 $t
       stm32eforth.s:2389   .text:0000000000000e76 $d
       stm32eforth.s:2393   .text:0000000000000e86 FIND2
       stm32eforth.s:2390   .text:0000000000000e7a $t
       stm32eforth.s:2398   .text:0000000000000e96 FIND3
       stm32eforth.s:2407   .text:0000000000000eb2 FIND4
ARM GAS  stm32eforth.s 			page 95


       stm32eforth.s:2409   .text:0000000000000eb6 $d
       stm32eforth.s:2414   .text:0000000000000eca FIND5
       stm32eforth.s:2410   .text:0000000000000eba $t
       stm32eforth.s:2331   .inflash.dictinary:0000000000000760 LF_NAMEQ
       stm32eforth.s:2331   .inflash.dictinary:0000000000000764 _NAMEQ
       stm32eforth.s:2427   .inflash.dictinary:000000000000076c CA_NAMEQ
       stm32eforth.s:2427   .text:0000000000000eee NAMEQ
       stm32eforth.s:2444   .text:0000000000000f02 BKSP
       stm32eforth.s:2453   .text:0000000000000f22 $d
       stm32eforth.s:2466   .text:0000000000000f4a BACK1
       stm32eforth.s:2454   .text:0000000000000f26 $t
       stm32eforth.s:2455   .text:0000000000000f2a $d
       stm32eforth.s:2456   .text:0000000000000f2e $t
       stm32eforth.s:2463   .text:0000000000000f42 $d
       stm32eforth.s:2464   .text:0000000000000f46 $t
       stm32eforth.s:2476   .text:0000000000000f4e TAP
       stm32eforth.s:2493   .text:0000000000000f6a KTAP
       stm32eforth.s:2494   .text:0000000000000f6a TTAP
       stm32eforth.s:2498   .text:0000000000000f76 $d
       stm32eforth.s:2499   .text:0000000000000f7a $t
       stm32eforth.s:2501   .text:0000000000000f82 $d
       stm32eforth.s:2514   .text:0000000000000fb2 KTAP2
       stm32eforth.s:2502   .text:0000000000000f86 $t
       stm32eforth.s:2503   .text:0000000000000f8a $d
       stm32eforth.s:2504   .text:0000000000000f8e $t
       stm32eforth.s:2506   .text:0000000000000f96 $d
       stm32eforth.s:2511   .text:0000000000000faa KTAP1
       stm32eforth.s:2507   .text:0000000000000f9a $t
       stm32eforth.s:2510   .text:0000000000000fa6 $d
       stm32eforth.s:2512   .text:0000000000000faa $t
       stm32eforth.s:2427   .inflash.dictinary:0000000000000770 LF_ACCEP
       stm32eforth.s:2427   .inflash.dictinary:0000000000000774 _ACCEP
       stm32eforth.s:2523   .inflash.dictinary:000000000000077c CA_ACCEP
       stm32eforth.s:2523   .text:0000000000000fc6 ACCEP
       stm32eforth.s:2528   .text:0000000000000fd6 ACCP1
       stm32eforth.s:2532   .text:0000000000000fe2 $d
       stm32eforth.s:2548   .text:0000000000001012 ACCP4
       stm32eforth.s:2533   .text:0000000000000fe6 $t
       stm32eforth.s:2537   .text:0000000000000ff6 $d
       stm32eforth.s:2538   .text:0000000000000ffa $t
       stm32eforth.s:2540   .text:0000000000001002 $d
       stm32eforth.s:2543   .text:000000000000100c ACCP2
       stm32eforth.s:2541   .text:0000000000001006 $t
       stm32eforth.s:2546   .text:0000000000001010 ACCP3
       stm32eforth.s:2523   .inflash.dictinary:0000000000000780 LF_QUERY
       stm32eforth.s:2523   .inflash.dictinary:0000000000000784 _QUERY
       stm32eforth.s:2556   .inflash.dictinary:000000000000078c CA_QUERY
       stm32eforth.s:2556   .text:0000000000001022 QUERY
       stm32eforth.s:2560   .text:000000000000102e $d
       stm32eforth.s:2561   .text:0000000000001032 $t
       stm32eforth.s:2566   .text:0000000000001046 $d
       stm32eforth.s:2567   .text:000000000000104a $t
       stm32eforth.s:2556   .inflash.dictinary:0000000000000790 LF_ABORT
       stm32eforth.s:2556   .inflash.dictinary:0000000000000794 _ABORT
       stm32eforth.s:2576   .inflash.dictinary:000000000000079c CA_ABORT
       stm32eforth.s:2576   .text:0000000000001056 ABORT
       stm32eforth.s:2579   .text:000000000000105e ABORT1
ARM GAS  stm32eforth.s 			page 96


       stm32eforth.s:2583   .text:000000000000106a $d
       stm32eforth.s:2584   .text:000000000000106e $t
       stm32eforth.s:2697   .text:000000000000118c PRESE
       stm32eforth.s:2705   .text:00000000000011a0 QUIT
       stm32eforth.s:2596   .text:000000000000107e ABORQ
       stm32eforth.s:2601   .text:000000000000108e $d
       stm32eforth.s:2602   .text:0000000000001092 $t
       stm32eforth.s:2576   .inflash.dictinary:00000000000007a0 LF_INTER
       stm32eforth.s:2576   .inflash.dictinary:00000000000007a4 _INTER
       stm32eforth.s:2612   .inflash.dictinary:00000000000007b0 CA_INTER
       stm32eforth.s:2617   .text:00000000000010ac $d
       stm32eforth.s:2628   .text:00000000000010dc INTE1
       stm32eforth.s:2618   .text:00000000000010b0 $t
       stm32eforth.s:2620   .text:00000000000010b8 $d
       stm32eforth.s:2621   .text:00000000000010bc $t
       stm32eforth.s:2623   .text:00000000000010c4 $d
       stm32eforth.s:2625   .text:00000000000010d2 $t
       stm32eforth.s:2631   .text:00000000000010e4 $d
       stm32eforth.s:2633   .text:00000000000010ec INTE2
       stm32eforth.s:2632   .text:00000000000010e8 $t
       stm32eforth.s:2612   .inflash.dictinary:00000000000007b4 LF_LBRAC
       stm32eforth.s:2612   .inflash.dictinary:00000000000007b8 _LBRAC
       stm32eforth.s:2638   .inflash.dictinary:00000000000007bc CA_LBRAC
       stm32eforth.s:2638   .text:00000000000010f0 LBRAC
       stm32eforth.s:2641   .text:00000000000010f8 $d
       stm32eforth.s:2642   .text:00000000000010fc $t
       stm32eforth.s:2638   .inflash.dictinary:00000000000007c0 LF_DOTOK
       stm32eforth.s:2638   .inflash.dictinary:00000000000007c4 _DOTOK
       stm32eforth.s:2648   .inflash.dictinary:00000000000007c8 CA_DOTOK
       stm32eforth.s:2648   .text:0000000000001108 DOTOK
       stm32eforth.s:2651   .text:0000000000001110 $d
       stm32eforth.s:2652   .text:0000000000001114 $t
       stm32eforth.s:2656   .text:0000000000001124 $d
       stm32eforth.s:2660   .text:0000000000001130 DOTO1
       stm32eforth.s:2657   .text:0000000000001128 $t
       stm32eforth.s:2658   .text:000000000000112c $d
       stm32eforth.s:2661   .text:0000000000001130 $t
       stm32eforth.s:2648   .inflash.dictinary:00000000000007cc LF_QSTAC
       stm32eforth.s:2648   .inflash.dictinary:00000000000007d0 _QSTAC
       stm32eforth.s:2666   .inflash.dictinary:00000000000007d8 CA_QSTAC
       stm32eforth.s:2666   .text:0000000000001138 QSTAC
       stm32eforth.s:2671   .text:0000000000001148 $d
       stm32eforth.s:2666   .inflash.dictinary:00000000000007dc LF_EVAL
       stm32eforth.s:2666   .inflash.dictinary:00000000000007e0 _EVAL
       stm32eforth.s:2678   .inflash.dictinary:00000000000007e8 CA_EVAL
       stm32eforth.s:2678   .text:0000000000001158 EVAL
       stm32eforth.s:2680   .text:000000000000115c EVAL1
       stm32eforth.s:2685   .text:000000000000116c $d
       stm32eforth.s:2690   .text:0000000000001180 EVAL2
       stm32eforth.s:2686   .text:0000000000001170 $t
       stm32eforth.s:2678   .inflash.dictinary:00000000000007ec LF_PRESE
       stm32eforth.s:2678   .inflash.dictinary:00000000000007f0 _PRESE
       stm32eforth.s:2697   .inflash.dictinary:00000000000007f8 CA_PRESE
       stm32eforth.s:2697   .inflash.dictinary:00000000000007fc LF_QUIT
       stm32eforth.s:2697   .inflash.dictinary:0000000000000800 _QUIT
       stm32eforth.s:2705   .inflash.dictinary:0000000000000808 CA_QUIT
       stm32eforth.s:2708   .text:00000000000011ac QUIT1
ARM GAS  stm32eforth.s 			page 97


       stm32eforth.s:2710   .text:00000000000011b0 QUIT2
       stm32eforth.s:2714   .text:00000000000011bc $d
       stm32eforth.s:2705   .inflash.dictinary:000000000000080c LF_UNLOCK
       stm32eforth.s:2705   .inflash.dictinary:0000000000000810 _UNLOCK
       stm32eforth.s:2721   .inflash.dictinary:0000000000000818 CA_UNLOCK
       stm32eforth.s:2721   .text:00000000000011c0 UNLOCK
       stm32eforth.s:2722   .text:00000000000011c0 $t
       stm32eforth.s:2724   .text:00000000000011c8 $d
       stm32eforth.s:2745   .text:00000000000011e8 LOCK
       stm32eforth.s:3041   .text:0000000000001520 flash_regs
       stm32eforth.s:2725   .text:00000000000011cc $t
       stm32eforth.s:2752   .text:00000000000011f4 WAIT_BSY
       stm32eforth.s:2754   .text:00000000000011f6 WAIT1
       stm32eforth.s:2721   .inflash.dictinary:000000000000081c LF_EPAGE
       stm32eforth.s:2721   .inflash.dictinary:0000000000000820 _EPAGE
       stm32eforth.s:2764   .inflash.dictinary:000000000000082c CA_EPAGE
       stm32eforth.s:2764   .text:0000000000001200 EPAGE
       stm32eforth.s:2768   .text:000000000000120c $d
       stm32eforth.s:2769   .text:0000000000001210 $t
       stm32eforth.s:2779   .text:000000000000122e $d
       stm32eforth.s:2780   .text:0000000000001232 $t
       stm32eforth.s:2784   .text:0000000000001240 $d
       stm32eforth.s:2786   .text:000000000000124e $t
       stm32eforth.s:2791   .text:0000000000001254 HWORD_WRITE
       stm32eforth.s:2804   .text:0000000000001276 $d
       stm32eforth.s:2805   .text:000000000000127a $t
       stm32eforth.s:2806   .text:000000000000127e $d
       stm32eforth.s:2808   .text:000000000000128c $t
       stm32eforth.s:2764   .inflash.dictinary:0000000000000830 LF_ISTOR
       stm32eforth.s:2764   .inflash.dictinary:0000000000000834 _ISTOR
       stm32eforth.s:2816   .inflash.dictinary:0000000000000838 CA_ISTOR
       stm32eforth.s:2816   .text:0000000000001290 ISTOR
       stm32eforth.s:2820   .text:000000000000129c $d
       stm32eforth.s:2821   .text:00000000000012a0 $t
       stm32eforth.s:2832   .text:00000000000012cc $d
       stm32eforth.s:2833   .text:00000000000012d0 $t
       stm32eforth.s:2816   .inflash.dictinary:000000000000083c LF_IMG_SIZE
       stm32eforth.s:2816   .inflash.dictinary:0000000000000840 _IMG_SIZE
       stm32eforth.s:2839   .inflash.dictinary:000000000000084c CA_IMG_SIZE
       stm32eforth.s:2839   .text:00000000000012d8 IMG_SIZE
       stm32eforth.s:2842   .text:00000000000012e0 $d
       stm32eforth.s:2843   .text:00000000000012e4 $t
       stm32eforth.s:2848   .text:00000000000012f8 $d
       stm32eforth.s:2849   .text:00000000000012fc $t
       stm32eforth.s:2852   .text:0000000000001308 $d
       stm32eforth.s:2853   .text:000000000000130c $t
       stm32eforth.s:2839   .inflash.dictinary:0000000000000850 LF_IMGQ
       stm32eforth.s:2839   .inflash.dictinary:0000000000000854 _IMGQ
       stm32eforth.s:2859   .inflash.dictinary:000000000000085c CA_IMGQ
       stm32eforth.s:2859   .text:0000000000001314 IMGQ
       stm32eforth.s:2859   .inflash.dictinary:0000000000000860 LF_LOAD_IMG
       stm32eforth.s:2859   .inflash.dictinary:0000000000000864 _LOAD_IMG
       stm32eforth.s:2871   .inflash.dictinary:0000000000000870 CA_LOAD_IMG
       stm32eforth.s:2871   .text:0000000000001334 LOAD_IMG
       stm32eforth.s:2875   .text:0000000000001340 $d
       stm32eforth.s:2877   .text:0000000000001344 $t
       stm32eforth.s:2871   .inflash.dictinary:0000000000000874 LF_ERASE_MPG
ARM GAS  stm32eforth.s 			page 98


       stm32eforth.s:2871   .inflash.dictinary:0000000000000878 _ERASE_MPG
       stm32eforth.s:2901   .inflash.dictinary:0000000000000884 CA_ERASE_MPG
       stm32eforth.s:2901   .text:000000000000138c ERASE_MPG
       stm32eforth.s:2951   .text:0000000000001416 PG_TO_ADR
       stm32eforth.s:2906   .text:000000000000139c $d
       stm32eforth.s:2908   .text:00000000000013a0 $t
       stm32eforth.s:2915   .text:00000000000013b8 $d
       stm32eforth.s:2916   .text:00000000000013bc $t
       stm32eforth.s:2901   .inflash.dictinary:0000000000000888 LF_FLSH_WR
       stm32eforth.s:2901   .inflash.dictinary:000000000000088c _FLSH_WR
       stm32eforth.s:2921   .inflash.dictinary:0000000000000894 CA_FLSH_WR
       stm32eforth.s:2921   .text:00000000000013c4 FLSH_WR
       stm32eforth.s:2925   .text:00000000000013d0 $d
       stm32eforth.s:2927   .text:00000000000013d4 $t
       stm32eforth.s:2936   .text:00000000000013f8 $d
       stm32eforth.s:2937   .text:00000000000013fc $t
       stm32eforth.s:2921   .inflash.dictinary:0000000000000898 LF_ADR_TO_PG
       stm32eforth.s:2921   .inflash.dictinary:000000000000089c _ADR_TO_PG
       stm32eforth.s:2944   .inflash.dictinary:00000000000008a4 CA_ADR_TO_PG
       stm32eforth.s:2944   .text:000000000000140c ADR_TO_PG
       stm32eforth.s:2944   .inflash.dictinary:00000000000008a8 LF_PG_TO_ADR
       stm32eforth.s:2944   .inflash.dictinary:00000000000008ac _PG_TO_ADR
       stm32eforth.s:2951   .inflash.dictinary:00000000000008b4 CA_PG_TO_ADR
       stm32eforth.s:2951   .inflash.dictinary:00000000000008b8 LF_ERASE_IMG
       stm32eforth.s:2951   .inflash.dictinary:00000000000008bc _ERASE_IMG
       stm32eforth.s:2958   .inflash.dictinary:00000000000008c8 CA_ERASE_IMG
       stm32eforth.s:2958   .text:0000000000001420 ERASE_IMG
       stm32eforth.s:2964   .text:0000000000001434 $d
       stm32eforth.s:2965   .text:0000000000001438 $t
       stm32eforth.s:2969   .text:0000000000001448 $d
       stm32eforth.s:2970   .text:000000000000144c $t
       stm32eforth.s:2958   .inflash.dictinary:00000000000008cc LF_SAVE_IMG
       stm32eforth.s:2958   .inflash.dictinary:00000000000008d0 _SAVE_IMG
       stm32eforth.s:2975   .inflash.dictinary:00000000000008dc CA_SAVE_IMG
       stm32eforth.s:2975   .text:0000000000001454 SAVE_IMG
       stm32eforth.s:2981   .text:0000000000001468 $d
       stm32eforth.s:2982   .text:000000000000146c $t
       stm32eforth.s:2985   .text:0000000000001478 $d
       stm32eforth.s:2987   .text:000000000000147c $t
       stm32eforth.s:2975   .inflash.dictinary:00000000000008e0 LF_TURNKEY
       stm32eforth.s:2975   .inflash.dictinary:00000000000008e4 _TURNKEY
       stm32eforth.s:3009   .inflash.dictinary:00000000000008ec CA_TURNKEY
       stm32eforth.s:3009   .text:00000000000014b8 TURNKEY
       stm32eforth.s:3051   .text:000000000000152c TICK
       stm32eforth.s:3009   .inflash.dictinary:00000000000008f0 LF_FORGET
       stm32eforth.s:3009   .inflash.dictinary:00000000000008f4 _FORGET
       stm32eforth.s:3019   .inflash.dictinary:00000000000008fc CA_FORGET
       stm32eforth.s:3019   .text:00000000000014d0 FORGET
       stm32eforth.s:3025   .text:00000000000014e4 $d
       stm32eforth.s:3026   .text:00000000000014e8 $t
       stm32eforth.s:3029   .text:00000000000014f4 $d
       stm32eforth.s:3030   .text:00000000000014f8 $t
       stm32eforth.s:3382   .text:0000000000001858 OVERT
       stm32eforth.s:3042   .text:0000000000001520 $d
       stm32eforth.s:3019   .inflash.dictinary:0000000000000900 LF_TICK
       stm32eforth.s:3019   .inflash.dictinary:0000000000000904 _TICK
       stm32eforth.s:3051   .inflash.dictinary:0000000000000908 CA_TICK
ARM GAS  stm32eforth.s 			page 99


       stm32eforth.s:3052   .text:000000000000152c $t
       stm32eforth.s:3056   .text:000000000000153c $d
       stm32eforth.s:3058   .text:0000000000001544 TICK1
       stm32eforth.s:3057   .text:0000000000001540 $t
       stm32eforth.s:3051   .inflash.dictinary:000000000000090c LF_ALLOT
       stm32eforth.s:3051   .inflash.dictinary:0000000000000910 _ALLOT
       stm32eforth.s:3062   .inflash.dictinary:0000000000000918 CA_ALLOT
       stm32eforth.s:3062   .text:0000000000001548 ALLOT
       stm32eforth.s:3062   .inflash.dictinary:000000000000091c LF_COMMA
       stm32eforth.s:3062   .inflash.dictinary:0000000000000920 _COMMA
       stm32eforth.s:3070   .inflash.dictinary:0000000000000924 CA_COMMA
       stm32eforth.s:3070   .text:0000000000001558 COMMA
       stm32eforth.s:3070   .inflash.dictinary:0000000000000928 LF_BCOMP
       stm32eforth.s:3070   .inflash.dictinary:000000000000092c _BCOMP
       stm32eforth.s:3082   .inflash.dictinary:0000000000000938 CA_BCOMP
       stm32eforth.s:3082   .text:0000000000001578 BCOMP
       stm32eforth.s:3082   .inflash.dictinary:000000000000093c LF_COMPI
       stm32eforth.s:3082   .inflash.dictinary:0000000000000940 _COMPI
       stm32eforth.s:3090   .inflash.dictinary:0000000000000948 CA_COMPI
       stm32eforth.s:3090   .text:0000000000001588 COMPI
       stm32eforth.s:3438   .text:00000000000018e6 CALLC
       stm32eforth.s:3090   .inflash.dictinary:000000000000094c LF_LITER
       stm32eforth.s:3090   .inflash.dictinary:0000000000000950 _LITER
       stm32eforth.s:3104   .inflash.dictinary:0000000000000958 CA_LITER
       stm32eforth.s:3104   .text:00000000000015b0 LITER
       stm32eforth.s:3105   .text:00000000000015b0 $d
       stm32eforth.s:3106   .text:00000000000015b4 $t
       stm32eforth.s:3108   .text:00000000000015bc $d
       stm32eforth.s:3109   .text:00000000000015c0 $t
       stm32eforth.s:3119   .text:00000000000015c8 STRCQ
       stm32eforth.s:3122   .text:00000000000015d0 $d
       stm32eforth.s:3123   .text:00000000000015d4 $t
       stm32eforth.s:3126   .text:00000000000015e0 $d
       stm32eforth.s:3127   .text:00000000000015e4 $t
       stm32eforth.s:3104   .inflash.dictinary:000000000000095c LF_FOR
       stm32eforth.s:3104   .inflash.dictinary:0000000000000960 _FOR
       stm32eforth.s:3140   .inflash.dictinary:0000000000000964 CA_FOR
       stm32eforth.s:3140   .text:0000000000001600 FOR
       stm32eforth.s:3143   .text:0000000000001608 $d
       stm32eforth.s:3144   .text:000000000000160c $t
       stm32eforth.s:3140   .inflash.dictinary:0000000000000968 LF_BEGIN
       stm32eforth.s:3140   .inflash.dictinary:000000000000096c _BEGIN
       stm32eforth.s:3149   .inflash.dictinary:0000000000000974 CA_BEGIN
       stm32eforth.s:3149   .text:0000000000001614 BEGIN
       stm32eforth.s:3149   .inflash.dictinary:0000000000000978 LF_NEXT
       stm32eforth.s:3149   .inflash.dictinary:000000000000097c _NEXT
       stm32eforth.s:3156   .inflash.dictinary:0000000000000984 CA_NEXT
       stm32eforth.s:3156   .text:0000000000001620 NEXT
       stm32eforth.s:3159   .text:0000000000001628 $d
       stm32eforth.s:3160   .text:000000000000162c $t
       stm32eforth.s:3156   .inflash.dictinary:0000000000000988 LF_UNTIL
       stm32eforth.s:3156   .inflash.dictinary:000000000000098c _UNTIL
       stm32eforth.s:3165   .inflash.dictinary:0000000000000994 CA_UNTIL
       stm32eforth.s:3165   .text:0000000000001634 UNTIL
       stm32eforth.s:3168   .text:000000000000163c $d
       stm32eforth.s:3169   .text:0000000000001640 $t
       stm32eforth.s:3165   .inflash.dictinary:0000000000000998 LF_AGAIN
ARM GAS  stm32eforth.s 			page 100


       stm32eforth.s:3165   .inflash.dictinary:000000000000099c _AGAIN
       stm32eforth.s:3174   .inflash.dictinary:00000000000009a4 CA_AGAIN
       stm32eforth.s:3174   .text:0000000000001648 AGAIN
       stm32eforth.s:3177   .text:0000000000001650 $d
       stm32eforth.s:3178   .text:0000000000001654 $t
       stm32eforth.s:3174   .inflash.dictinary:00000000000009a8 LF_IFF
       stm32eforth.s:3174   .inflash.dictinary:00000000000009ac _IFF
       stm32eforth.s:3183   .inflash.dictinary:00000000000009b0 CA_IFF
       stm32eforth.s:3183   .text:000000000000165c IFF
       stm32eforth.s:3186   .text:0000000000001664 $d
       stm32eforth.s:3187   .text:0000000000001668 $t
       stm32eforth.s:3189   .text:0000000000001670 $d
       stm32eforth.s:3190   .text:0000000000001674 $t
       stm32eforth.s:3183   .inflash.dictinary:00000000000009b4 LF_AHEAD
       stm32eforth.s:3183   .inflash.dictinary:00000000000009b8 _AHEAD
       stm32eforth.s:3196   .inflash.dictinary:00000000000009c0 CA_AHEAD
       stm32eforth.s:3196   .text:0000000000001680 AHEAD
       stm32eforth.s:3199   .text:0000000000001688 $d
       stm32eforth.s:3200   .text:000000000000168c $t
       stm32eforth.s:3202   .text:0000000000001694 $d
       stm32eforth.s:3203   .text:0000000000001698 $t
       stm32eforth.s:3196   .inflash.dictinary:00000000000009c4 LF_REPEA
       stm32eforth.s:3196   .inflash.dictinary:00000000000009c8 _REPEA
       stm32eforth.s:3209   .inflash.dictinary:00000000000009d0 CA_REPEA
       stm32eforth.s:3209   .text:00000000000016a4 REPEA
       stm32eforth.s:3209   .inflash.dictinary:00000000000009d4 LF_THENN
       stm32eforth.s:3209   .inflash.dictinary:00000000000009d8 _THENN
       stm32eforth.s:3219   .inflash.dictinary:00000000000009e0 CA_THENN
       stm32eforth.s:3219   .text:00000000000016bc THENN
       stm32eforth.s:3219   .inflash.dictinary:00000000000009e4 LF_AFT
       stm32eforth.s:3219   .inflash.dictinary:00000000000009e8 _AFT
       stm32eforth.s:3228   .inflash.dictinary:00000000000009ec CA_AFT
       stm32eforth.s:3228   .text:00000000000016d0 AFT
       stm32eforth.s:3228   .inflash.dictinary:00000000000009f0 LF_ELSEE
       stm32eforth.s:3228   .inflash.dictinary:00000000000009f4 _ELSEE
       stm32eforth.s:3238   .inflash.dictinary:00000000000009fc CA_ELSEE
       stm32eforth.s:3238   .text:00000000000016e8 ELSEE
       stm32eforth.s:3238   .inflash.dictinary:0000000000000a00 LF_WHILE
       stm32eforth.s:3238   .inflash.dictinary:0000000000000a04 _WHILE
       stm32eforth.s:3247   .inflash.dictinary:0000000000000a0c CA_WHILE
       stm32eforth.s:3247   .text:00000000000016fc WHILE
       stm32eforth.s:3247   .inflash.dictinary:0000000000000a10 LF_ABRTQ
       stm32eforth.s:3247   .inflash.dictinary:0000000000000a14 _ABRTQ
       stm32eforth.s:3255   .inflash.dictinary:0000000000000a1c CA_ABRTQ
       stm32eforth.s:3255   .text:000000000000170c ABRTQ
       stm32eforth.s:3258   .text:0000000000001714 $d
       stm32eforth.s:3259   .text:0000000000001718 $t
       stm32eforth.s:3255   .inflash.dictinary:0000000000000a20 LF_STRQ
       stm32eforth.s:3255   .inflash.dictinary:0000000000000a24 _STRQ
       stm32eforth.s:3264   .inflash.dictinary:0000000000000a28 CA_STRQ
       stm32eforth.s:3264   .text:0000000000001720 STRQ
       stm32eforth.s:3267   .text:0000000000001728 $d
       stm32eforth.s:3268   .text:000000000000172c $t
       stm32eforth.s:3264   .inflash.dictinary:0000000000000a2c LF_DOTQ
       stm32eforth.s:3264   .inflash.dictinary:0000000000000a30 _DOTQ
       stm32eforth.s:3273   .inflash.dictinary:0000000000000a34 CA_DOTQ
       stm32eforth.s:3273   .text:0000000000001734 DOTQ
ARM GAS  stm32eforth.s 			page 101


       stm32eforth.s:3276   .text:000000000000173c $d
       stm32eforth.s:3277   .text:0000000000001740 $t
       stm32eforth.s:3273   .inflash.dictinary:0000000000000a38 LF_UNIQU
       stm32eforth.s:3273   .inflash.dictinary:0000000000000a3c _UNIQU
       stm32eforth.s:3286   .inflash.dictinary:0000000000000a44 CA_UNIQU
       stm32eforth.s:3286   .text:0000000000001748 UNIQU
       stm32eforth.s:3291   .text:0000000000001758 $d
       stm32eforth.s:3299   .text:0000000000001774 UNIQ1
       stm32eforth.s:3292   .text:000000000000175c $t
       stm32eforth.s:3293   .text:0000000000001760 $d
       stm32eforth.s:3295   .text:0000000000001768 $t
       stm32eforth.s:3310   .text:000000000000177c SNAME
       stm32eforth.s:3315   .text:000000000000178c $d
       stm32eforth.s:3329   .text:00000000000017c4 SNAM1
       stm32eforth.s:3316   .text:0000000000001790 $t
       stm32eforth.s:3331   .text:00000000000017c8 $d
       stm32eforth.s:3333   .text:00000000000017d0 $t
       stm32eforth.s:3286   .inflash.dictinary:0000000000000a48 LF_SCOMP
       stm32eforth.s:3286   .inflash.dictinary:0000000000000a4c _SCOMP
       stm32eforth.s:3337   .inflash.dictinary:0000000000000a58 CA_SCOMP
       stm32eforth.s:3337   .text:00000000000017d4 SCOMP
       stm32eforth.s:3342   .text:00000000000017e4 $d
       stm32eforth.s:3354   .text:0000000000001810 SCOM2
       stm32eforth.s:3343   .text:00000000000017e8 $t
       stm32eforth.s:3345   .text:00000000000017f0 $d
       stm32eforth.s:3346   .text:00000000000017f4 $t
       stm32eforth.s:3348   .text:00000000000017fc $d
       stm32eforth.s:3351   .text:0000000000001808 SCOM1
       stm32eforth.s:3349   .text:0000000000001800 $t
       stm32eforth.s:3357   .text:0000000000001818 $d
       stm32eforth.s:3360   .text:0000000000001824 SCOM3
       stm32eforth.s:3358   .text:000000000000181c $t
       stm32eforth.s:3367   .text:000000000000182c COLON_ABORT
       stm32eforth.s:3337   .inflash.dictinary:0000000000000a5c LF_OVERT
       stm32eforth.s:3337   .inflash.dictinary:0000000000000a60 _OVERT
       stm32eforth.s:3382   .inflash.dictinary:0000000000000a68 CA_OVERT
       stm32eforth.s:3382   .inflash.dictinary:0000000000000a6c LF_SEMIS
       stm32eforth.s:3382   .inflash.dictinary:0000000000000a70 _SEMIS
       stm32eforth.s:3392   .inflash.dictinary:0000000000000a74 CA_SEMIS
       stm32eforth.s:3392   .text:0000000000001870 SEMIS
       stm32eforth.s:3392   .inflash.dictinary:0000000000000a78 LF_RBRAC
       stm32eforth.s:3392   .inflash.dictinary:0000000000000a7c _RBRAC
       stm32eforth.s:3403   .inflash.dictinary:0000000000000a80 CA_RBRAC
       stm32eforth.s:3403   .text:000000000000188c RBRAC
       stm32eforth.s:3406   .text:0000000000001894 $d
       stm32eforth.s:3407   .text:0000000000001898 $t
       stm32eforth.s:3415   .text:00000000000018a4 COMPILE_BLW
       stm32eforth.s:3403   .inflash.dictinary:0000000000000a84 LF_COLON
       stm32eforth.s:3403   .inflash.dictinary:0000000000000a88 _COLON
       stm32eforth.s:3451   .inflash.dictinary:0000000000000a8c CA_COLON
       stm32eforth.s:3451   .text:0000000000001906 COLON
       stm32eforth.s:3451   .inflash.dictinary:0000000000000a90 LF_IMMED
       stm32eforth.s:3451   .inflash.dictinary:0000000000000a94 _IMMED
       stm32eforth.s:3466   .inflash.dictinary:0000000000000aa0 CA_IMMED
       stm32eforth.s:3466   .text:0000000000001932 IMMED
       stm32eforth.s:3469   .text:000000000000193a $d
       stm32eforth.s:3470   .text:000000000000193e $t
ARM GAS  stm32eforth.s 			page 102


       stm32eforth.s:3466   .inflash.dictinary:0000000000000aa4 LF_CONST
       stm32eforth.s:3466   .inflash.dictinary:0000000000000aa8 _CONST
       stm32eforth.s:3484   .inflash.dictinary:0000000000000ab4 CA_CONST
       stm32eforth.s:3484   .text:000000000000195e CONST
       stm32eforth.s:3496   .text:000000000000198a $d
       stm32eforth.s:3497   .text:000000000000198e $t
       stm32eforth.s:3504   .text:000000000000199c DODOES
       stm32eforth.s:3484   .inflash.dictinary:0000000000000ab8 LF_DOES
       stm32eforth.s:3484   .inflash.dictinary:0000000000000abc _DOES
       stm32eforth.s:3531   .inflash.dictinary:0000000000000ac4 CA_DOES
       stm32eforth.s:3531   .text:00000000000019c4 DOES
       stm32eforth.s:3534   .text:00000000000019cc $d
       stm32eforth.s:3535   .text:00000000000019d0 $t
       stm32eforth.s:3531   .inflash.dictinary:0000000000000ac8 LF_CREAT
       stm32eforth.s:3531   .inflash.dictinary:0000000000000acc _CREAT
       stm32eforth.s:3551   .inflash.dictinary:0000000000000ad4 CA_CREAT
       stm32eforth.s:3551   .text:0000000000001a00 CREAT
       stm32eforth.s:3563   .text:0000000000001a2c $d
       stm32eforth.s:3564   .text:0000000000001a30 $t
       stm32eforth.s:3551   .inflash.dictinary:0000000000000ad8 LF_VARIA
       stm32eforth.s:3551   .inflash.dictinary:0000000000000adc _VARIA
       stm32eforth.s:3569   .inflash.dictinary:0000000000000ae8 CA_VARIA
       stm32eforth.s:3569   .text:0000000000001a38 VARIA
       stm32eforth.s:3573   .text:0000000000001a44 $d
       stm32eforth.s:3574   .text:0000000000001a48 $t
       stm32eforth.s:3588   .text:0000000000001a50 DMP
       stm32eforth.s:3592   .text:0000000000001a5c $d
       stm32eforth.s:3593   .text:0000000000001a60 $t
       stm32eforth.s:3604   .text:0000000000001a88 PDUM2
       stm32eforth.s:3597   .text:0000000000001a70 PDUM1
       stm32eforth.s:3601   .text:0000000000001a7c $d
       stm32eforth.s:3602   .text:0000000000001a80 $t
       stm32eforth.s:3606   .text:0000000000001a8c $d
       stm32eforth.s:3607   .text:0000000000001a90 $t
       stm32eforth.s:3569   .inflash.dictinary:0000000000000aec LF_DUMP
       stm32eforth.s:3569   .inflash.dictinary:0000000000000af0 _DUMP
       stm32eforth.s:3611   .inflash.dictinary:0000000000000af8 CA_DUMP
       stm32eforth.s:3611   .text:0000000000001a94 DUMP
       stm32eforth.s:3618   .text:0000000000001aac $d
       stm32eforth.s:3619   .text:0000000000001ab0 $t
       stm32eforth.s:3633   .text:0000000000001ae4 DUMP4
       stm32eforth.s:3622   .text:0000000000001abc DUMP1
       stm32eforth.s:3625   .text:0000000000001ac4 $d
       stm32eforth.s:3626   .text:0000000000001ac8 $t
       stm32eforth.s:3635   .text:0000000000001ae8 $d
       stm32eforth.s:3636   .text:0000000000001aec DUMP3
       stm32eforth.s:3637   .text:0000000000001aec $t
       stm32eforth.s:3611   .inflash.dictinary:0000000000000afc LF_DOTS
       stm32eforth.s:3611   .inflash.dictinary:0000000000000b00 _DOTS
       stm32eforth.s:3645   .inflash.dictinary:0000000000000b04 CA_DOTS
       stm32eforth.s:3645   .text:0000000000001b00 DOTS
       stm32eforth.s:3655   .text:0000000000001b20 DOTS2
       stm32eforth.s:3651   .text:0000000000001b14 DOTS1
       stm32eforth.s:3657   .text:0000000000001b24 $d
       stm32eforth.s:3658   .text:0000000000001b28 $t
       stm32eforth.s:3645   .inflash.dictinary:0000000000000b08 LF_TNAME
       stm32eforth.s:3645   .inflash.dictinary:0000000000000b0c _TNAME
ARM GAS  stm32eforth.s 			page 103


       stm32eforth.s:3663   .inflash.dictinary:0000000000000b14 CA_TNAME
       stm32eforth.s:3663   .text:0000000000001b30 TNAME
       stm32eforth.s:3668   .text:0000000000001b40 TNAM1
       stm32eforth.s:3671   .text:0000000000001b48 $d
       stm32eforth.s:3681   .text:0000000000001b70 TNAM2
       stm32eforth.s:3672   .text:0000000000001b4c $t
       stm32eforth.s:3677   .text:0000000000001b60 $d
       stm32eforth.s:3678   .text:0000000000001b64 $t
       stm32eforth.s:3663   .inflash.dictinary:0000000000000b18 LF_DOTID
       stm32eforth.s:3663   .inflash.dictinary:0000000000000b1c _DOTID
       stm32eforth.s:3688   .inflash.dictinary:0000000000000b20 CA_DOTID
       stm32eforth.s:3688   .text:0000000000001b7c DOTID
       stm32eforth.s:3692   .text:0000000000001b88 $d
       stm32eforth.s:3699   .text:0000000000001ba4 DOTI1
       stm32eforth.s:3693   .text:0000000000001b8c $t
       stm32eforth.s:3695   .text:0000000000001b94 $d
       stm32eforth.s:3696   .text:0000000000001b98 $t
       stm32eforth.s:3701   .text:0000000000001ba8 $d
       stm32eforth.s:3703   .text:0000000000001bb2 $t
       stm32eforth.s:3706   *ABS*:0000000000000001 WANT_SEE
       stm32eforth.s:3711   .text:0000000000001bb8 DOTCA
       stm32eforth.s:3716   .text:0000000000001bc8 $d
       stm32eforth.s:3717   .text:0000000000001bcc $t
       stm32eforth.s:3722   .text:0000000000001bd4 CODE_ABORT
       stm32eforth.s:3728   .text:0000000000001be8 $d
       stm32eforth.s:3729   .text:0000000000001bec $t
       stm32eforth.s:3731   .text:0000000000001bf4 $d
       stm32eforth.s:3732   .text:0000000000001bf8 $t
       stm32eforth.s:3734   .text:0000000000001c00 $d
       stm32eforth.s:3736   .text:0000000000001c0a $t
       stm32eforth.s:3739   .text:0000000000001c10 $d
       stm32eforth.s:3748   .text:0000000000001c20 UNNESTQ
       stm32eforth.s:3753   .text:0000000000001c30 $d
       stm32eforth.s:3754   .text:0000000000001c34 $t
       stm32eforth.s:3757   .text:0000000000001c40 $d
       stm32eforth.s:3758   .text:0000000000001c44 $t
       stm32eforth.s:3759   .text:0000000000001c48 $d
       stm32eforth.s:3767   .text:0000000000001c58 NONAMEQ
       stm32eforth.s:3770   .text:0000000000001c60 $d
       stm32eforth.s:3771   .text:0000000000001c64 $t
       stm32eforth.s:3773   .text:0000000000001c6c $d
       stm32eforth.s:4071   .rodata:0000000000000018 NONAME_SUB
       stm32eforth.s:3774   .text:0000000000001c70 $t
       stm32eforth.s:3780   .text:0000000000001c88 $d
       stm32eforth.s:3781   .text:0000000000001c8c $t
       stm32eforth.s:3783   .text:0000000000001c94 $d
       stm32eforth.s:3784   .text:0000000000001c98 $t
       stm32eforth.s:3788   .text:0000000000001ca8 $d
       stm32eforth.s:3789   .text:0000000000001cac $t
       stm32eforth.s:3791   .text:0000000000001cb4 $d
       stm32eforth.s:3792   .text:0000000000001cb8 $t
       stm32eforth.s:3794   .text:0000000000001cc0 $d
       stm32eforth.s:4077   .rodata:0000000000000054 ANONYMOUS
       stm32eforth.s:3795   .text:0000000000001cc4 $t
       stm32eforth.s:3813   .text:0000000000001cf4 DOTNONAME
       stm32eforth.s:3817   .text:0000000000001d00 $d
       stm32eforth.s:3818   .text:0000000000001d04 $t
ARM GAS  stm32eforth.s 			page 104


       stm32eforth.s:3825   .text:0000000000001d14 IS_BLW
       stm32eforth.s:3828   .text:0000000000001d1c $d
       stm32eforth.s:3829   .text:0000000000001d20 $t
       stm32eforth.s:3688   .inflash.dictinary:0000000000000b24 LF_SEE
       stm32eforth.s:3688   .inflash.dictinary:0000000000000b28 _SEE
       stm32eforth.s:3838   .inflash.dictinary:0000000000000b2c CA_SEE
       stm32eforth.s:3838   .text:0000000000001d38 SEE
       stm32eforth.s:3848   .text:0000000000001d5c $d
       stm32eforth.s:3849   .text:0000000000001d60 $t
       stm32eforth.s:3850   .text:0000000000001d64 SEE1
       stm32eforth.s:3855   .text:0000000000001d74 $d
       stm32eforth.s:3856   .text:0000000000001d78 $t
       stm32eforth.s:3862   .text:0000000000001d90 $d
       stm32eforth.s:3863   .text:0000000000001d94 $t
       stm32eforth.s:3866   .text:0000000000001da0 $d
       stm32eforth.s:3867   .text:0000000000001da4 $t
       stm32eforth.s:3909   .text:0000000000001e26 DECOMP
       stm32eforth.s:3872   .text:0000000000001db8 $d
       stm32eforth.s:3873   .text:0000000000001dbc $t
       stm32eforth.s:3875   .text:0000000000001dc4 $d
       stm32eforth.s:3876   .text:0000000000001dc8 $t
       stm32eforth.s:3888   .text:0000000000001de4 BLADR
       stm32eforth.s:3838   .inflash.dictinary:0000000000000b30 LF_DECOMP
       stm32eforth.s:3838   .inflash.dictinary:0000000000000b34 _DECOMP
       stm32eforth.s:3909   .inflash.dictinary:0000000000000b40 CA_DECOMP
       stm32eforth.s:3916   .text:0000000000001e3e $d
       stm32eforth.s:3946   .text:0000000000001e9c DECOM2
       stm32eforth.s:3918   .text:0000000000001e42 $t
       stm32eforth.s:3919   .text:0000000000001e46 $d
       stm32eforth.s:3921   .text:0000000000001e4a $t
       stm32eforth.s:3929   .text:0000000000001e68 $d
       stm32eforth.s:3932   .text:0000000000001e74 DECOMP1
       stm32eforth.s:3930   .text:0000000000001e6c $t
       stm32eforth.s:3931   .text:0000000000001e70 $d
       stm32eforth.s:3934   .text:0000000000001e78 DECOMP3
       stm32eforth.s:3933   .text:0000000000001e74 $t
       stm32eforth.s:3909   .inflash.dictinary:0000000000000b44 LF_WORDS
       stm32eforth.s:3909   .inflash.dictinary:0000000000000b48 _WORDS
       stm32eforth.s:3959   .inflash.dictinary:0000000000000b50 CA_WORDS
       stm32eforth.s:3959   .text:0000000000001ebc WORDS
       stm32eforth.s:3964   .text:0000000000001ecc WORS1
       stm32eforth.s:3967   .text:0000000000001ed4 $d
       stm32eforth.s:3974   .text:0000000000001ef0 WORS2
       stm32eforth.s:3968   .text:0000000000001ed8 $t
       stm32eforth.s:3987   .text:0000000000001ef4 VERSN
       stm32eforth.s:3990   .text:0000000000001efc $d
       stm32eforth.s:3991   .text:0000000000001f00 $t
       stm32eforth.s:3959   .inflash.dictinary:0000000000000b54 LF_HI
       stm32eforth.s:3959   .inflash.dictinary:0000000000000b58 _HI
       stm32eforth.s:3995   .inflash.dictinary:0000000000000b5c CA_HI
       stm32eforth.s:3999   .text:0000000000001f10 $d
       stm32eforth.s:4022   .rodata:0000000000000000 hi_msg
       stm32eforth.s:4000   .text:0000000000001f14 $t
       stm32eforth.s:4010   .text:0000000000001f3c $d
       stm32eforth.s:4011   .text:0000000000001f40 $t
       stm32eforth.s:4021   .rodata:0000000000000000 $d
       stm32eforth.s:3995   .inflash.dictinary:0000000000000b60 LF_LASTN
ARM GAS  stm32eforth.s 			page 105


       stm32eforth.s:4031   .inflash.dictinary:0000000000000b6c CA_LASTN
       stm32eforth.s:4031   .text:0000000000001f60 LASTN
       stm32eforth.s:4039   .text:0000000000001f80 COLD1
       stm32eforth.s:4041   .text:0000000000001f84 $d
       stm32eforth.s:4042   .text:0000000000001f88 $t
       stm32eforth.s:4044   .text:0000000000001f90 $d
       stm32eforth.s:4045   .text:0000000000001f94 $t
       stm32eforth.s:4046   .text:0000000000001f98 $d
       stm32eforth.s:4047   .text:0000000000001f9c $t
       stm32eforth.s:4048   .text:0000000000001fa0 $d
       stm32eforth.s:4049   .text:0000000000001fa4 $t
       stm32eforth.s:4054   .text:0000000000001fb4 $d
       stm32eforth.s:4055   .text:0000000000001fb8 $t
       stm32eforth.s:4062   .text:0000000000001fcc COLD2
       stm32eforth.s:4063   .text:0000000000001fcc $d
       stm32eforth.s:4081   .rodata:000000000000008c BRAN_LBL
       stm32eforth.s:4085   .rodata:0000000000000098 QBRAN_LBL
       stm32eforth.s:4089   .rodata:00000000000000a4 DOLIT_LBL
       stm32eforth.s:4093   .rodata:00000000000000b0 DONEXT_LBL
       stm32eforth.s:4097   .rodata:00000000000000bc DODOES_LBL
       stm32eforth.s:4101   .rodata:00000000000000c8 DOVAR_LBL
       stm32eforth.s:4105   .rodata:00000000000000d4 DOCON_LBL
       stm32eforth.s:4109   .rodata:00000000000000e0 IS_BLW_LBL
       stm32eforth.s:4113   .rodata:00000000000000ec DOTQP_LBL
       stm32eforth.s:4117   .rodata:00000000000000f0 BLADR_LBL
       stm32eforth.s:4121   .rodata:00000000000000fc DOTCA_LBL
       stm32eforth.s:4125   .rodata:0000000000000108 NONAMEQ_LBL
       stm32eforth.s:4129   .rodata:0000000000000114 STRCQ_LBL
       stm32eforth.s:4133   .rodata:000000000000011c VERSN_LBL
       stm32eforth.s:4139   .user:0000000000000000 $d
       stm32eforth.s:2673   .text:0000000000001153 $d
       stm32eforth.s:2673   .text:0000000000001154 $t
       stm32eforth.s:3741   .text:0000000000001c15 $d
       stm32eforth.s:3741   .text:0000000000001c16 $t
       stm32eforth.s:3761   .text:0000000000001c4f $d
       stm32eforth.s:3761   .text:0000000000001c50 $t
       stm32eforth.s:292    .inflash:000000000000001f $d
       stm32eforth.s:292    .inflash:0000000000000020 $t

UNDEFINED SYMBOLS
_mstack
