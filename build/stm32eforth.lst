ARM GAS  stm32eforth.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  stm32eforth.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m3
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
ARM GAS  stm32eforth.s 			page 3


  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
ARM GAS  stm32eforth.s 			page 4


  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
  81              	
  82              	/* blue pill specific constants */ 
  83              	  .equ LED_GPIO, GPIOC_BASE_ADR
  84              	  .equ LED_PIN, 13
  85              	  .equ UART, USART1_BASE_ADR 
  86              	
  87              	/* stm32f103c8t6 specific constants */
  88              	.equ SPP 	,	0x20004E80	/*top of data stack (SP0) */
  89              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  90              	.equ RPP 	,	0x20004F80	/*top of return stack (RP0) */
  91              	.equ UPP 	,	0x20000000	/*start of user area (UP0) */
  92              	.equ DTOP ,	0x20000100	/*start of usable RAM area (HERE) */
  93              	.equ DEND , 0x20004E00  /*usable RAM end */
  94              	
  95              	/*************************************
  96              	   system variables offset from UPP
  97              	*************************************/
  98              	  .equ TICKS_OFS, 4  // millseconds counter
  99              	  .equ TIMER_OFS, 8  // count down timer
 100              	  .equ BOOT_OFS, 12  // boot program address
 101              	  .equ BASE_OFS, 16  // numeric conversion base 
 102              	  .equ TMP_OFS, 20   // temporary variable
 103              	  .equ SPAN_OFS, 24  // character count received by expect  
 104              	  .equ TOIN_OFS, 28  // >IN  parse pointer in TIB
 105              	  .equ NTIB_OFS, 32  // #TIB  characters in TIB 
 106              	  .equ TIB_OFS, 36   // TIB buffer address 
 107              	  .equ EVAL_OFS, 40  // eval|compile vector 
 108              	  .equ HLD_OFS, 44   // hold pointer 
 109              	  .equ CTXT_OFS, 48  // context pointer 
 110              	  .equ FLSH_CTOP_OFS, 52  // flash free dictionary address 
 111              	  .equ RAM_CTOP_OFS, 56  // ram free dictionary address
 112              	  .equ LASTN_OFS, 60     // last word in dictionary link nfa 
 113              	
 114              	/*************************************
 115              	    reserve space for system variables 
 116              	*************************************/
 117              	  .section .bss 
 118 0000 00000000 	system_vars: .space 0x100
 118      00000000 
 118      00000000 
 118      00000000 
 118      00000000 
 119              	
 120              	
 121              	
ARM GAS  stm32eforth.s 			page 5


 122              	/***********************************************
 123              	* MACROS
 124              	*	Assemble inline direct threaded code ending.
 125              	***********************************************/
 126              	 	.macro	_NEXT /*end low level word */
 127              		BX	LR
 128              		.endm
 129              	
 130              	 	.macro	_NEST /*start high level word */
 131              		STMFD	R2!,{LR}
 132              		.endm
 133              	
 134              	 	.macro	_UNNEST	/*end high level word */
 135              		LDMFD	R2!,{PC}
 136              		.endm
 137              	
 138              	 	.macro	_DOLIT /*long literals */
 139              		BL	DOLIT
 140              		.endm
 141              	
 142              	 	.macro	_PUSH	/*push R5 on data stack*/
 143              		STR	R5,[R1,#-4]!
 144              		.endm
 145              	
 146              	 	.macro	_POP /*pop data stack to R5 */
 147              		LDR	R5,[R1],#4
 148              		.endm
 149              	
 150              	/*************************************
 151              	*   interrupt service vectors table 
 152              	**************************************/
 153              	   .section  .isr_vector,"a",%progbits
 154              	  .type  isr_vectors, %object
 155              	
 156              	isr_vectors:
 157 0000 00000000 	  .word   _rstack          /* return stack address */
 158 0004 00000000 	  .word   reset_handler    /* startup address */
 159              	/* core interrupts || exceptions */
 160 0008 00000000 	  .word   default_handler  /*  NMI */
 161 000c 00000000 	  .word   default_handler  /*  HardFault */
 162 0010 00000000 	  .word   default_handler  /*  Memory Management */
 163 0014 00000000 	  .word   default_handler  /* Bus fault */
 164 0018 00000000 	  .word   default_handler  /* Usage fault */
 165 001c 00000000 	  .word   0
 166 0020 00000000 	  .word   0
 167 0024 00000000 	  .word   0
 168 0028 00000000 	  .word   0
 169 002c 00000000 	  .word   default_handler  /* SWI instruction */
 170 0030 00000000 	  .word   default_handler  /* Debug monitor */
 171 0034 00000000 	  .word   0
 172 0038 00000000 	  .word   default_handler  /* PendSV */
 173 003c 00000000 	  .word   systick_handler  /* Systick */
 174              	  
 175              	  /* External Interrupts */
 176 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 177 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 178 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
ARM GAS  stm32eforth.s 			page 6


 179 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 180 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 181 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 182 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 183 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 184 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 185 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 186 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 187 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 188 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 189 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 190 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 191 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 192 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 193 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 194 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 195 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 196 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 197 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 198 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 199 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 200 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 201 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 202 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 203 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 204 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 205 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 206 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 207 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 208 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 209 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 210 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 211 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 212 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 213 00d4 00000000 	  .word      default_handler /* IRQ37, USART1 */                   
 214 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 215 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 216 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 217 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 218 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 219 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 220 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 221 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 222 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 223 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 224 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 225 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 226 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 227 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 228 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 229 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 230 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 231 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 232 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 233 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 234 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 235 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
ARM GAS  stm32eforth.s 			page 7


 236              	
 237              	  .size  isr_vectors, .-isr_vectors
 238              	
 239              	/*****************************************************
 240              	* default isr handler called on unexpected interrupt
 241              	*****************************************************/
 242              	    .section  .text.default_handler,"ax",%progbits
 243              	
 244              	  .type default_handler, %function
 245              	  .align 2 
 246              	  .global default_handler
 247              	default_handler:
 248 0000 00F0FBF8 		_DOLIT 
 249 0004 FFFFFFFF 		.word -1
 250 0008 FFF7FEFF 		BL ULED 
 251 000c 00F08CFF 		BL	CR	// new line
 252 0010 00F0C4FF 		BL	DOTQP
 253 0014 10       		.byte	16
 254 0015 20657863 		.ascii " exception hatl!"	
 254      65707469 
 254      6F6E2068 
 254      61746C21 
 255 0025 0000BF   		.align 2 
 256              	Infinite_Loop:
 257 0028 FEE7     	  b  Infinite_Loop
 258              	  .size  default_handler, .-default_handler
 259              	
 260              	
 261              	
 262              	/*********************************
 263              		system milliseconds counter
 264              	*********************************/	
 265              	  .type systick_handler, %function
 266 002a 00BF     	  .align 2 
 267              	  .global systick_handler
 268              	systick_handler:
 269 002c 5868     	  ldr r0,[r3,#TICKS_OFS]  
 270 002e 00F10100 	  add r0,#1
 271 0032 5860     	  str r0,[r3,#TICKS_OFS]
 272 0034 9868     	  ldr r0,[r3,#TIMER_OFS]
 273 0036 10B1     	  cbz r0, systick_exit
 274 0038 A0F10100 	  sub r0,#1
 275 003c 9860     	  str r0,[r3,#TIMER_OFS]
 276              	systick_exit:
 277 003e 7047     	  bx lr
 278              	
 279              	
 280              	/**************************************
 281              	  reset_handler execute at MCU reset
 282              	***************************************/
 283              	    .section  .text.reset_handler
 284              	  .type  reset_handler, %function
 285              	  .align 2 
 286              	  .global reset_handler
 287              	reset_handler:
 288              	/* zero RAM */
 289 0000 4FF00000 		mov r0,#0
ARM GAS  stm32eforth.s 			page 8


 290 0004 C2F20000 		movt r0,#0x2000
 291 0008 4FF00001 		mov r1,#0
 292 000c 4FF4A042 		mov r2,#0x5000 // RAM size 
 293              	zero_loop:
 294 0010 40F8041B 		str r1,[r0],#4
 295 0014 043A     		subs r2,#4
 296 0016 FBD1     		bne zero_loop		
 297 0018 00F004F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 298 001c 01F0AAFB 		bl	UNLOCK			/* unlock flash memory */
 299 0020 02F09EB8 		b COLD 
 300              	
 301              	  .type init_devices, %function
 302              	  .align 2 
 303              	init_devices:
 304              	/* init clock to HSE 72 Mhz */
 305              	/* set 2 wait states in FLASH_ACR_LATENCY */
 306 0024 4FF40050 		mov r0,#FLASH_BASE_ADR&0xffff
 307 0028 C4F20200 		movt r0,#FLASH_BASE_ADR>>16 
 308 002c 4FF01202 	  mov r2,#0x12
 309 0030 0260     	  str r2,[r0,#FLASH_ACR]
 310              	/* configure clock for HSE, 8 Mhz crystal */
 311              	/* enable HSE in RCC_CR */
 312 0032 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 313 0036 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 314 003a 0168     	  ldr r1,[r0,#RCC_CR]
 315 003c 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 316 0040 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 317              	/* wait HSERDY loop */
 318              	wait_hserdy:
 319 0042 0168     	  ldr r1,[r0,#RCC_CR]
 320 0044 11F4003F 	  tst r1,#(1<<17)
 321 0048 FBD0     	  beq wait_hserdy
 322              	
 323              	/************************************************* 
 324              	   configure PLL mul factor and source 
 325              	   SYSCLOCK=72 Mhz
 326              	   select HSE as  PLL source clock
 327              	   multiply frequency by 9 
 328              	   APB1 clock is limited to 36 Mhz so divide by 2 
 329              	****************************************************/
 330 004a 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 331 004e C0F21D01 	  movt r1,#(7<<2)|1
 332 0052 4160     	  str r1,[r0,#RCC_CFGR]
 333              	  /* enable PLL */
 334 0054 0168     	  ldr r1,[r0,#RCC_CR]
 335 0056 41F08071 	  orr r1, #1<<24 
 336 005a 0160     	  str r1,[r0,#RCC_CR]
 337              	/* wait for PLLRDY */
 338              	wait_pllrdy:
 339 005c 0168     	  ldr r1,[r0,#RCC_CR]
 340 005e 11F0007F 	  tst r1,#(1<<25)
 341 0062 FBD0     	  beq wait_pllrdy 
 342              	/* select PLL as sysclock */
 343 0064 4168     	  ldr r1,[r0,#RCC_CFGR]
 344 0066 4FF6FC72 	  mov r2,#0xfffc
 345 006a CFF6FF72 	  movt r2,#0xffff
 346 006e 01EA0201 	  and r1,r1,r2 
ARM GAS  stm32eforth.s 			page 9


 347 0072 4FF00202 	  mov r2,#2
 348 0076 41EA0201 	  orr r1,r1,r2
 349 007a 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 350              	/* wait for SWS==2 */
 351              	wait_sws:
 352 007c 4168     	  ldr r1,[r0,#RCC_CFGR]
 353 007e 11F0080F 	  tst r1,#(2<<2)
 354 0082 FBD0     	  beq wait_sws
 355              	/* now sysclock is 72 Mhz */
 356              	
 357              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 358 0084 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 359 0088 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 360 008c 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 361 0090 8161     	  str	r1, [r0, #RCC_APB2ENR]
 362              	
 363              	/* configure GPIOC:13 as output for user LED */
 364 0092 4FF48050 	  mov r0,#GPIOC_BASE_ADR&0xffff
 365 0096 C4F20100 	  movt r0,#GPIOC_BASE_ADR>>16
 366 009a 4168     	  ldr r1,[r0,#GPIO_CRH]
 367 009c 6FF47002 	  mvn r2,#(15<<20)
 368 00a0 01EA0201 	  and r1,r1,r2
 369 00a4 4FF4C002 	  mov r2,#(6<<20)
 370 00a8 41EA0201 	  orr r1,r1,r2
 371 00ac 4160     	  str r1,[r0,#GPIO_CRH]
 372              	
 373              	/* configure USART1 */
 374              	/* set GPIOA PIN 9, uart TX  */
 375 00ae 4FF40060 	  mov r0,#GPIOA_BASE_ADR&0XFFFF
 376 00b2 C4F20100 	  movt r0,#GPIOA_BASE_ADR>>16	
 377 00b6 4168     	  ldr r1,[r0,#GPIO_CRH]
 378 00b8 6FF0F002 	  mvn r2,#(15<<4)
 379 00bc 01EA0201 	  and r1,r1,r2
 380 00c0 4FF0A002 	  mov r2,#(0xA<<4)
 381 00c4 41EA0201 	  orr r1,r1,r2 
 382 00c8 4160     	  str r1,[r0,#GPIO_CRH]
 383              	
 384 00ca 4FF46050 	  mov r0,#UART&0xFFFF
 385 00ce C4F20100 	  movt r0,#UART>>16	
 386              	/* BAUD rate */
 387 00d2 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 388 00d6 8160     	  str r1,[r0,#USART_BRR]
 389 00d8 42F20C01 	  mov r1,#(3<<2)+(1<<13)
 390 00dc C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 391              	/* configure systicks for 1msec ticks */
 392 00de 4EF21000 	  mov r0,#STK_BASE_ADR&0xFFFF
 393 00e2 CEF20000 	  movt r0,#STK_BASE_ADR>>16	
 394 00e6 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 395 00ea 4160     	  str r1,[r0,#STK_LOAD]
 396 00ec 4FF00301 	  mov r1,#3
 397 00f0 0160     	  str r1,[r0,STK_CTL]
 398 00f2 7047     	  bx lr 
 399              	
 400              	
 401              	/********************
 402              	* Version control
 403              	*******************/
ARM GAS  stm32eforth.s 			page 10


 404              	.equ VER ,	0x01	/*major release version */
 405              	.equ EXT ,	0x01	/*minor extension */
 406              	
 407              	/* Constants */
 408              	
 409              	// .equ RAMOFFSET ,	0x20000000	;remap
 410              	// .equ MAPOFFSET ,	0x08000000	;remap
 411              	.equ RAMOFFSET  ,	0x00000000	/* absolute */
 412              	.equ MAPOFFSET  ,	0x00000000	/* absolute */
 413              	
 414              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 415              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 416              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 417              	
 418              	.equ CELLL ,	4	/*size of a cell */
 419              	.equ BASEE ,	16	/*default radix */
 420              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 421              	
 422              	.equ BKSPP ,	8	/*backspace */
 423              	.equ LF ,	10	  /*line feed */
 424              	.equ CRR ,	13	/*carriage return */
 425              	.equ ERR ,	27	/*error escape */
 426              	.equ TIC ,	39	/*tick */
 427              	
 428              	/********************************************************
 429              	* RAM memory mapping
 430              	* 	0x20000000	RAM base address
 431              	*	0x20000000  system variables	
 432              	* 	0x20000100	Forth dictionary
 433              	* 	0x2000????	top of dictionary, HERE
 434              	* 	0x2000????	WORD buffer, HERE+16
 435              	*   0x20004E00  end of user space
 436              	* 	0x20004E80	top of data stack  R2
 437              	* 	0x20004E80	TIB terminal input buffer
 438              	* 	0x20004F80	top of return stack  R1
 439              	* 	0x20005000	top of hardware stack for interrupts R14
 440              	********************************************************/
 441              	
 442              	
 443              	/******************************************************
 444              	*  COLD start moves the following to USER variables.
 445              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 446              	******************************************************/
 447              		.align 2   	
 448              	  
 449              	
 450              	UZERO:
 451 00f4 00000000 		.word 0  			/*Reserved */
 452 00f8 00000000 		.word 0      /* system Ticks */
 453 00fc 00000000 	    .word 0     /* delay timer */
 454 0100 EC200000 		.word HI  	/*'BOOT */
 455 0104 10000000 		.word BASEE 	/*BASE */
 456 0108 00000000 		.word 0			/*tmp */
 457 010c 00000000 		.word 0			/*SPAN */
 458 0110 00000000 		.word 0			/*>IN */
 459 0114 00000000 		.word 0			/*#TIB */
 460 0118 804E0020 		.word TIBB	/*TIB */
ARM GAS  stm32eforth.s 			page 11


 461 011c 10160000 		.word INTER	/*'EVAL */
 462 0120 00000000 		.word 0			/*HLD */
 463 0124 58210000 		.word LASTN	/*CONTEXT */
 464 0128 B6210000 		.word CTOP	/*FLASH */
 465 012c 00010020 		.word DTOP	/* start adress of RAM dictionary RAM */
 466 0130 58210000 		.word LASTN	/*LAST */
 467 0134 00000000 	  .word 0,0			/*reserved */
 467      00000000 
 468              	ULAST:
 469              	
 470              	 
 471              	
 472              	/***********************************
 473              	//  Start of Forth dictionary
 474              	***********************************/
 475              	
 476              		.align 2 
 477              	
 478              	// PAUSE ( u -- ) 
 479              	// suspend execution for u milliseconds
 480 013c 00000000 		.word 0
 481 0140 05       	_PAUSE: .byte 5
 482 0141 50415553 		.ascii "PAUSE"
 482      45
 483 0146 00BF     		.align 2
 484              	PAUSE:
 485 0148 42F804ED 		_NEST 
 486 014c 00F0B8FA 		BL TIMER 
 487 0150 00F094F8 		BL STORE 
 488              	PAUSE_LOOP:
 489 0154 00F0B4FA 		BL TIMER 
 490 0158 00F09AF8 		BL AT 
 491 015c 00F071F8 		BL QBRAN 
 492 0160 6C010000 		.word PAUSE_EXIT 
 493 0164 00F079F8 		BL BRAN 
 494 0168 54010000 		.word PAUSE_LOOP 
 495              	PAUSE_EXIT: 		
 496 016c 52F804FB 		_UNNEST 
 497              	
 498              	//  ULED ( T|F -- )
 499              	// control user LED, -1 ON, 0 OFF  
 500 0170 40010000 		.word _PAUSE 
 501 0174 04       	_ULED: .byte 4
 502 0175 554C4544 		.ascii "ULED"
 503 0179 0000BF   		.align 2
 504              		.type ULED, %function 
 505              	ULED:
 506 017c 4FF40056 		mov r6,#(1<<LED_PIN)
 507 0180 4FF48054 		mov r4,#LED_GPIO&0xffff
 508 0184 C4F20104 		movt r4,#LED_GPIO>>16
 509 0188 2800     		movs r0,r5 
 510 018a 51F8045B 		_POP
 511 018e 01D0     		beq ULED_OFF 
 512 0190 6661     		str r6,[r4,#GPIO_BRR]
 513 0192 7047     		_NEXT 
 514              	ULED_OFF:
 515 0194 2661     		str r6,[r4,#GPIO_BSRR]
ARM GAS  stm32eforth.s 			page 12


 516 0196 7047     		_NEXT 
 517              		
 518              	//    ?RX	 ( -- c T | F )
 519              	// 	Return input character and true, or a false if no input.
 520 0198 74010000 		.word	_ULED-MAPOFFSET
 521 019c 04       	_QRX:	.byte   4
 522 019d 3F4B4559 		.ascii "?KEY"
 523 01a1 0000BF   		.align 2 
 524              	QKEY:
 525              	QRX: 
 526 01a4 41F8045D 		_PUSH
 527 01a8 4FF46054 		mov r4,#UART&0xFFFF
 528 01ac C4F20104 		movt r4,#UART>>16
 529 01b0 2688     		ldrh	r6, [r4, #USART_SR]
 530 01b2 16F02006 		ands	r6, #0x20		//  RXE
 531 01b6 05D0     		BEQ	QRX1
 532 01b8 6568     	 	LDR	R5, [R4, #USART_DR]
 533 01ba 41F8045D 		_PUSH
 534 01be 18BF     	    IT NE 
 535 01c0 6FF00005 		MVNNE	R5,#0
 536              	QRX1:
 537 01c4 08BF     		IT EQ 
 538 01c6 0025     	    MOVEQ	R5,#0
 539 01c8 7047     		_NEXT
 540 01ca 00BF     		.align 2 
 541              	
 542              	//    TX!	 ( c -- )
 543              	// 	Send character c to the output device.
 544              	
 545 01cc 9C010000 		.word	_QRX-MAPOFFSET
 546 01d0 04       	_TXSTO:	.byte 4
 547 01d1 454D4954 		.ascii "EMIT"
 548 01d5 0000BF   		.align 2 	
 549              	TXSTO:
 550              	EMIT:
 551              	TECHO:
 552 01d8 4FF46054 		mov r4,#UART&0xFFFF
 553 01dc C4F20104 		movt r4,#UART>>16
 554              	TX1:
 555 01e0 2688     		ldrh	r6, [r4, #USART_SR]	
 556 01e2 16F08006 		ands	r6, #0x80		//  TXE bit 
 557 01e6 FBD0     		beq	TX1
 558 01e8 A580     		strh	r5, [r4, #USART_DR]	
 559 01ea 51F8045B 		_POP
 560 01ee 7047     		_NEXT
 561              	
 562              	
 563              		
 564              	// **************************************************************************
 565              	//  The kernel
 566              	
 567              	//    NOP	( -- )
 568              	// 	do nothing.
 569              	
 570 01f0 D0010000 		.word	_TXSTO-MAPOFFSET
 571 01f4 03       	_NOP:	.byte   3
 572 01f5 4E4F50   		.ascii "NOP"
ARM GAS  stm32eforth.s 			page 13


 573              		.align 2 	
 574              	NOP:
 575 01f8 7047     		_NEXT
 576              	 
 577              	
 578              	//    doLIT	( -- w )
 579              	// 	Push an inline literal.
 580              	
 581              	// 	.word	_NOP-MAPOFFSET
 582              	// _LIT	.byte   COMPO+5
 583              	// 	.ascii "doLIT"
 584              	// 	.align 2 	
 585              	DOLIT:
 586 01fa 41F8045D 		_PUSH				//  store R5 on data stack
 587 01fe 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 588 0202 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 589 0206 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 590 020a 7047     		_NEXT
 591              	
 592              	//    EXECUTE	( ca -- )
 593              	// 	Execute the word at ca.
 594              	
 595 020c F4010000 		.word	_NOP-MAPOFFSET
 596 0210 07       	_EXECU:	.byte   7
 597 0211 45584543 		.ascii "EXECUTE"
 597      555445
 598              		.align 2 	
 599              	EXECU:
 600 0218 45F00104 		ORR	R4,R5,#1		//  b0=1 
 601 021c 51F8045B 		_POP
 602 0220 2047     		BX	R4
 603              	
 604              	//    next	( -- ) counter on R:
 605              	// 	Run time code for the single index loop.
 606              	// 	: next ( -- ) \ hilevel model
 607              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 608              	
 609              	// 	.word	_EXECU-MAPOFFSET
 610              	// _DONXT	.byte   COMPO+4
 611              	// 	.ascii "next"
 612              	// 	.align 2 	
 613              	DONXT:
 614 0222 1468     		LDR	R4,[R2]
 615 0224 2400     		MOVS	R4,R4
 616 0226 04D1     		BNE	NEXT1
 617              		/* loop done */
 618 0228 02F10402 		ADD	R2,R2,#4 // drop counter 
 619 022c 0EF1040E 		ADD	LR,LR,#4 // skip after loop 
 620 0230 7047     		_NEXT
 621              	NEXT1:
 622              		/* decrement loop counter */
 623 0232 A4F10104 		SUB	R4,R4,#1
 624 0236 1460     		STR	R4,[R2]
 625 0238 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 626 023c 4EF0010E 		ORR	LR,LR,#1 // begining of loop
 627 0240 7047     		_NEXT
 628              	
ARM GAS  stm32eforth.s 			page 14


 629              	//    ?branch	( f -- )
 630              	// 	Branch if flag is zero.
 631              	
 632              	// 	.word	_DONXT-MAPOFFSET
 633              	// _QBRAN	.byte   COMPO+7
 634              	// 	.ascii "?branch"
 635              	// 	.align 2 	
 636              	QBRAN:
 637 0242 2C00     		MOVS	R4,R5
 638 0244 51F8045B 		_POP
 639 0248 04D1     		BNE	QBRAN1
 640 024a 5EF801EC 		LDR	LR,[LR,#-1]
 641 024e 4EF0010E 		ORR LR,LR,#1
 642 0252 7047     		_NEXT
 643              	QBRAN1:
 644 0254 0EF1040E 	 	ADD	LR,LR,#4
 645 0258 7047     		_NEXT
 646              	
 647              	//    branch	( -- )
 648              	// 	Branch to an inline address.
 649              	
 650              	// 	.word	_QBRAN-MAPOFFSET
 651              	// _BRAN	.byte   COMPO+6
 652              	// 	.ascii "branch"
 653              	// 	.align 2 	
 654              	BRAN:
 655 025a 5EF801EC 		LDR	LR,[LR,#-1]
 656 025e 4EF0010E 		ORR	LR,LR,#1
 657 0262 7047     		_NEXT
 658              	
 659              	//    EXIT	(  -- )
 660              	// 	Exit the currently executing command.
 661              	
 662 0264 10020000 		.word	_EXECU-MAPOFFSET
 663 0268 04       	_EXIT:	.byte   4
 664 0269 45584954 		.ascii "EXIT"
 665 026d 0000BF   		.align 2 	
 666              	EXIT:
 667 0270 52F804FB 		_UNNEST
 668              	
 669              	//    !	   ( w a -- )
 670              	// 	Pop the data stack to memory.
 671              	
 672 0274 68020000 		.word	_EXIT-MAPOFFSET
 673 0278 01       	_STORE:	.byte   1
 674 0279 21       		.ascii "!"
 675 027a 00BF     		.align 2 	
 676              	STORE:
 677 027c 51F8044B 		LDR	R4,[R1],#4
 678 0280 2C60     		STR	R4,[R5]
 679 0282 51F8045B 		_POP
 680 0286 7047     		_NEXT
 681              	
 682              	//    @	   ( a -- w )
 683              	// 	Push memory location to the data stack.
 684              	
 685 0288 78020000 		.word	_STORE-MAPOFFSET
ARM GAS  stm32eforth.s 			page 15


 686 028c 01       	_AT:	.byte   1
 687 028d 40       		.ascii "@"
 688 028e 00BF     		.align 2 	
 689              	AT:
 690 0290 2D68     		LDR	R5,[R5]
 691 0292 7047     		_NEXT
 692              	
 693              	//    C!	  ( c b -- )
 694              	// 	Pop the data stack to byte memory.
 695              	
 696 0294 8C020000 		.word	_AT-MAPOFFSET
 697 0298 02       	_CSTOR:	.byte   2
 698 0299 4321     		.ascii "C!"
 699 029b 00       		.align 2 	
 700              	CSTOR:
 701 029c 51F8044B 		LDR	R4,[R1],#4
 702 02a0 2C70     		STRB	R4,[R5]
 703 02a2 51F8045B 		_POP
 704 02a6 7047     		_NEXT
 705              	
 706              	//    C@	  ( b -- c )
 707              	// 	Push byte memory location to the data stack.
 708              	
 709 02a8 98020000 		.word	_CSTOR-MAPOFFSET
 710 02ac 02       	_CAT:	.byte   2
 711 02ad 4340     		.ascii "C@"
 712 02af 00       		.align 2 	
 713              	CAT:
 714 02b0 2D78     		LDRB	R5,[R5]
 715 02b2 7047     		_NEXT
 716              	
 717              	//    R>	  ( -- w )
 718              	// 	Pop the return stack to the data stack.
 719              	
 720 02b4 AC020000 		.word	_CAT-MAPOFFSET
 721 02b8 02       	_RFROM:	.byte   2
 722 02b9 523E     		.ascii "R>"
 723 02bb 00       		.align 2 	
 724              	RFROM:
 725 02bc 41F8045D 		_PUSH
 726 02c0 52F8045B 		LDR	R5,[R2],#4
 727 02c4 7047     		_NEXT
 728              	
 729              	//    R@	  ( -- w )
 730              	// 	Copy top of return stack to the data stack.
 731              	
 732 02c6 B8020000 		.word	_RFROM-MAPOFFSET
 733 02ca 02       	_RAT:	.byte   2
 734 02cb 5240     		.ascii "R@"
 735 02cd 0000BF   		.align 2 	
 736              	RAT:
 737 02d0 41F8045D 		_PUSH
 738 02d4 1568     		LDR	R5,[R2]
 739 02d6 7047     		_NEXT
 740              	
 741              	//    >R	  ( w -- )
 742              	// 	Push the data stack to the return stack.
ARM GAS  stm32eforth.s 			page 16


 743              	
 744 02d8 CA020000 		.word	_RAT-MAPOFFSET
 745 02dc 42       	_TOR:	.byte   COMPO+2
 746 02dd 3E52     		.ascii ">R"
 747 02df 00       		.align 2 	
 748              	TOR:
 749 02e0 42F8045D 		STR	R5,[R2,#-4]!
 750 02e4 51F8045B 		_POP
 751 02e8 7047     		_NEXT
 752              	
 753              	//    SP@	 ( -- a )
 754              	// 	Push the current data stack pointer.
 755              	
 756 02ea DC020000 		.word	_TOR-MAPOFFSET
 757 02ee 03       	_SPAT:	.byte   3
 758 02ef 535040   		.ascii "SP@"
 759 02f2 00BF     		.align 2 	
 760              	SPAT:
 761 02f4 41F8045D 		_PUSH
 762 02f8 0D46     		MOV	R5,R1
 763 02fa 7047     		_NEXT
 764              	
 765              	//    DROP	( w -- )
 766              	// 	Discard top stack item.
 767              	
 768 02fc EE020000 		.word	_SPAT-MAPOFFSET
 769 0300 04       	_DROP:	.byte   4
 770 0301 44524F50 		.ascii "DROP"
 771 0305 0000BF   		.align 2 	
 772              	DROP:
 773 0308 51F8045B 		_POP
 774 030c 7047     		_NEXT
 775              	
 776              	//    DUP	 ( w -- w w )
 777              	// 	Duplicate the top stack item.
 778              	
 779 030e 00030000 		.word	_DROP-MAPOFFSET
 780 0312 03       	_DUPP:	.byte   3
 781 0313 445550   		.ascii "DUP"
 782 0316 00BF     		.align 2 	
 783              	DUPP:
 784 0318 41F8045D 		_PUSH
 785 031c 7047     		_NEXT
 786              	
 787              	//    SWAP	( w1 w2 -- w2 w1 )
 788              	// 	Exchange top two stack items.
 789              	
 790 031e 12030000 		.word	_DUPP-MAPOFFSET
 791 0322 04       	_SWAP:	.byte   4
 792 0323 53574150 		.ascii "SWAP"
 793 0327 00       		.align 2 	
 794              	SWAP:
 795 0328 0C68     		LDR	R4,[R1]
 796 032a 0D60     		STR	R5,[R1]
 797 032c 2546     		MOV	R5,R4
 798 032e 7047     		_NEXT
 799              	
ARM GAS  stm32eforth.s 			page 17


 800              	//    OVER	( w1 w2 -- w1 w2 w1 )
 801              	// 	Copy second stack item to top.
 802              	
 803 0330 22030000 		.word	_SWAP-MAPOFFSET
 804 0334 04       	_OVER:	.byte   4
 805 0335 4F564552 		.ascii "OVER"
 806 0339 0000BF   		.align 2 	
 807              	OVER:
 808 033c 41F8045D 		_PUSH
 809 0340 4D68     		LDR	R5,[R1,#4]
 810 0342 7047     		_NEXT
 811              	
 812              	//    0<	  ( n -- t )
 813              	// 	Return true if n is negative.
 814              	
 815 0344 34030000 		.word	_OVER-MAPOFFSET
 816 0348 02       	_ZLESS:	.byte   2
 817 0349 303C     		.ascii "0<"
 818 034b 00       		.align 2 	
 819              	ZLESS:
 820 034c 4FF00004 		MOV	R4,#0
 821 0350 04EB2505 		ADD	R5,R4,R5,ASR #32
 822 0354 7047     		_NEXT
 823              	
 824              	//    AND	 ( w w -- w )
 825              	// 	Bitwise AND.
 826              	
 827 0356 48030000 		.word	_ZLESS-MAPOFFSET
 828 035a 03       	_ANDD:	.byte   3
 829 035b 414E44   		.ascii "AND"
 830 035e 00BF     		.align 2 	
 831              	ANDD:
 832 0360 51F8044B 		LDR	R4,[R1],#4
 833 0364 05EA0405 		AND	R5,R5,R4
 834 0368 7047     		_NEXT
 835              	
 836              	//    OR	  ( w w -- w )
 837              	// 	Bitwise inclusive OR.
 838              	
 839 036a 5A030000 		.word	_ANDD-MAPOFFSET
 840 036e 02       	_ORR:	.byte   2
 841 036f 4F52     		.ascii "OR"
 842 0371 0000BF   		.align 2 	
 843              	ORR:
 844 0374 51F8044B 		LDR	R4,[R1],#4
 845 0378 45EA0405 		ORR	R5,R5,R4
 846 037c 7047     		_NEXT
 847              	
 848              	//    XOR	 ( w w -- w )
 849              	// 	Bitwise exclusive OR.
 850              	
 851 037e 6E030000 		.word	_ORR-MAPOFFSET
 852 0382 03       	_XORR:	.byte   3
 853 0383 584F52   		.ascii "XOR"
 854 0386 00BF     		.align 2 	
 855              	XORR:
 856 0388 51F8044B 		LDR	R4,[R1],#4
ARM GAS  stm32eforth.s 			page 18


 857 038c 85EA0405 		EOR	R5,R5,R4
 858 0390 7047     		_NEXT
 859              	
 860              	//    UM+	 ( w w -- w cy )
 861              	// 	Add two numbers, return the sum and carry flag.
 862              	
 863 0392 82030000 		.word	_XORR-MAPOFFSET
 864 0396 03       	_UPLUS:	.byte   3
 865 0397 554D2B   		.ascii "UM+"
 866 039a 00BF     		.align 2 	
 867              	UPLUS:
 868 039c 0C68     		LDR	R4,[R1]
 869 039e 6419     		ADDS	R4,R4,R5
 870 03a0 4FF00005 		MOV	R5,#0
 871 03a4 45F10005 		ADC	R5,R5,#0
 872 03a8 0C60     		STR	R4,[R1]
 873 03aa 7047     		_NEXT
 874              	
 875              	//    RSHIFT	 ( w # -- w )
 876              	// 	arithmetic Right shift # bits.
 877              	
 878 03ac 96030000 		.word	_UPLUS-MAPOFFSET
 879 03b0 06       	_RSHIFT:	.byte   6
 880 03b1 52534849 		.ascii "RSHIFT"
 880      4654
 881 03b7 00       		.align 2 	
 882              	RSHIFT:
 883 03b8 51F8044B 		LDR	R4,[R1],#4
 884 03bc 44FA05F5 		MOV	R5,R4,ASR R5
 885 03c0 7047     		_NEXT
 886              	
 887              	//    LSHIFT	 ( w # -- w )
 888              	// 	Right shift # bits.
 889              	
 890 03c2 B0030000 		.word	_RSHIFT-MAPOFFSET
 891 03c6 06       	_LSHIFT:	.byte   6
 892 03c7 4C534849 		.ascii "LSHIFT"
 892      4654
 893 03cd 0000BF   		.align 2 	
 894              	LSHIFT:
 895 03d0 51F8044B 		LDR	R4,[R1],#4
 896 03d4 04FA05F5 		MOV	R5,R4,LSL R5
 897 03d8 7047     		_NEXT
 898              	
 899              	//    +	 ( w w -- w )
 900              	// 	Add.
 901              	
 902 03da C6030000 		.word	_LSHIFT-MAPOFFSET
 903 03de 01       	_PLUS:	.byte   1
 904 03df 2B       		.ascii "+"
 905              		.align 2 	
 906              	PLUS:
 907 03e0 51F8044B 		LDR	R4,[R1],#4
 908 03e4 2544     		ADD	R5,R5,R4
 909 03e6 7047     		_NEXT
 910              	
 911              	//    -	 ( w w -- w )
ARM GAS  stm32eforth.s 			page 19


 912              	// 	Subtract.
 913              	
 914 03e8 DE030000 		.word	_PLUS-MAPOFFSET
 915 03ec 01       	_SUBB:	.byte   1
 916 03ed 2D       		.ascii "-"
 917 03ee 00BF     		.align 2 	
 918              	SUBB:
 919 03f0 51F8044B 		LDR	R4,[R1],#4
 920 03f4 C5EB0405 		RSB	R5,R5,R4
 921 03f8 7047     		_NEXT
 922              	
 923              	//    *	 ( w w -- w )
 924              	// 	Multiply.
 925              	
 926 03fa EC030000 		.word	_SUBB-MAPOFFSET
 927 03fe 01       	_STAR:	.byte   1
 928 03ff 2A       		.ascii "*"
 929              		.align 2 	
 930              	STAR:
 931 0400 51F8044B 		LDR	R4,[R1],#4
 932 0404 04FB05F5 		MUL	R5,R4,R5
 933 0408 7047     		_NEXT
 934              	
 935              	//    UM*	 ( w w -- ud )
 936              	// 	Unsigned multiply.
 937              	
 938 040a FE030000 		.word	_STAR-MAPOFFSET
 939 040e 03       	_UMSTA:	.byte   3
 940 040f 554D2A   		.ascii "UM*"
 941 0412 00BF     		.align 2 	
 942              	UMSTA:
 943 0414 0C68     		LDR	R4,[R1]
 944 0416 A5FB0467 		UMULL	R6,R7,R5,R4
 945 041a 0E60     		STR	R6,[R1]
 946 041c 3D46     		MOV	R5,R7
 947 041e 7047     		_NEXT
 948              	
 949              	//    M*	 ( w w -- d )
 950              	// 	signed multiply.
 951              	
 952 0420 0E040000 		.word	_UMSTA-MAPOFFSET
 953 0424 02       	_MSTAR:	.byte   2
 954 0425 4D2A     		.ascii "M*"
 955 0427 00       		.align 2 	
 956              	MSTAR:
 957 0428 0C68     		LDR	R4,[R1]
 958 042a 85FB0467 		SMULL	R6,R7,R5,R4
 959 042e 0E60     		STR	R6,[R1]
 960 0430 3D46     		MOV	R5,R7
 961 0432 7047     		_NEXT
 962              	
 963              	//    1+	 ( w -- w+1 )
 964              	// 	Add 1.
 965              	
 966 0434 24040000 		.word	_MSTAR-MAPOFFSET
 967 0438 02       	_ONEP:	.byte   2
 968 0439 312B     		.ascii "1+"
ARM GAS  stm32eforth.s 			page 20


 969 043b 00       		.align 2 	
 970              	ONEP:
 971 043c 05F10105 		ADD	R5,R5,#1
 972 0440 7047     		_NEXT
 973              	
 974              	//    1-	 ( w -- w-1 )
 975              	// 	Subtract 1.
 976              	
 977 0442 38040000 		.word	_ONEP-MAPOFFSET
 978 0446 02       	_ONEM:	.byte   2
 979 0447 312D     		.ascii "1-"
 980 0449 0000BF   		.align 2 	
 981              	ONEM:
 982 044c A5F10105 		SUB	R5,R5,#1
 983 0450 7047     		_NEXT
 984              	
 985              	//    2+	 ( w -- w+2 )
 986              	// 	Add 1.
 987              	
 988 0452 46040000 		.word	_ONEM-MAPOFFSET
 989 0456 02       	_TWOP:	.byte   2
 990 0457 322B     		.ascii "2+"
 991 0459 0000BF   		.align 2 	
 992              	TWOP:
 993 045c 05F10205 		ADD	R5,R5,#2
 994 0460 7047     		_NEXT
 995              	
 996              	//    2-	 ( w -- w-2 )
 997              	// 	Subtract 2.
 998              	
 999 0462 56040000 		.word	_TWOP-MAPOFFSET
 1000 0466 02       	_TWOM:	.byte   2
 1001 0467 322D     		.ascii "2-"
 1002 0469 0000BF   		.align 2 	
 1003              	TWOM:
 1004 046c A5F10205 		SUB	R5,R5,#2
 1005 0470 7047     		_NEXT
 1006              	
 1007              	//    CELL+	( w -- w+4 )
 1008              	// 	Add CELLL.
 1009              	
 1010 0472 66040000 		.word	_TWOM-MAPOFFSET
 1011 0476 05       	_CELLP:	.byte   5
 1012 0477 43454C4C 		.ascii "CELL+"
 1012      2B
 1013              		.align 2 	
 1014              	CELLP:
 1015 047c 05F10405 		ADD	R5,R5,#CELLL
 1016 0480 7047     		_NEXT
 1017              	
 1018              	//    CELL-	( w -- w-4 )
 1019              	// 	Subtract CELLL.
 1020              	
 1021 0482 76040000 		.word	_CELLP-MAPOFFSET
 1022 0486 05       	_CELLM:	.byte   5
 1023 0487 43454C4C 		.ascii "CELL-"
 1023      2D
ARM GAS  stm32eforth.s 			page 21


 1024              		.align 2 	
 1025              	CELLM:
 1026 048c A5F10405 		SUB	R5,R5,#CELLL
 1027 0490 7047     		_NEXT
 1028              	 
 1029              	//    BL	( -- 32 )
 1030              	// 	Blank (ASCII space).
 1031              	
 1032 0492 86040000 		.word	_CELLM-MAPOFFSET
 1033 0496 02       	_BLANK:	.byte   2
 1034 0497 424C     		.ascii "BL"
 1035 0499 0000BF   		.align 2 	
 1036              	BLANK:
 1037 049c 41F8045D 		_PUSH
 1038 04a0 4FF02005 		MOV	R5,#32
 1039 04a4 7047     		_NEXT
 1040              	
 1041              	//    CELLS	( w -- w*4 )
 1042              	// 	Multiply 4.
 1043              	
 1044 04a6 96040000 		.word	_BLANK-MAPOFFSET
 1045 04aa 05       	_CELLS:	.byte   5
 1046 04ab 43454C4C 		.ascii "CELLS"
 1046      53
 1047              		.align 2 	
 1048              	CELLS:
 1049 04b0 4FEA8505 		MOV	R5,R5,LSL#2
 1050 04b4 7047     		_NEXT
 1051              	
 1052              	//    CELL/	( w -- w/4 )
 1053              	// 	Divide by 4.
 1054              	
 1055 04b6 AA040000 		.word	_CELLS-MAPOFFSET
 1056 04ba 05       	_CELLSL:	.byte   5
 1057 04bb 43454C4C 		.ascii "CELL/"
 1057      2F
 1058              		.align 2 	
 1059              	CELLSL:
 1060 04c0 4FEAA505 		MOV	R5,R5,ASR#2
 1061 04c4 7047     		_NEXT
 1062              	
 1063              	//    2*	( w -- w*2 )
 1064              	// 	Multiply 2.
 1065              	
 1066 04c6 BA040000 		.word	_CELLSL-MAPOFFSET
 1067 04ca 02       	_TWOST:	.byte   2
 1068 04cb 322A     		.ascii "2*"
 1069 04cd 0000BF   		.align 2 	
 1070              	TWOST:
 1071 04d0 4FEA4505 		MOV	R5,R5,LSL#1
 1072 04d4 7047     		_NEXT
 1073              	
 1074              	//    2/	( w -- w/2 )
 1075              	// 	Divide by 2.
 1076              	
 1077 04d6 CA040000 		.word	_TWOST-MAPOFFSET
 1078 04da 02       	_TWOSL:	.byte   2
ARM GAS  stm32eforth.s 			page 22


 1079 04db 322F     		.ascii "2/"
 1080 04dd 0000BF   		.align 2 	
 1081              	TWOSL:
 1082 04e0 4FEA6505 		MOV	R5,R5,ASR#1
 1083 04e4 7047     		_NEXT
 1084              	
 1085              	//    ?DUP	( w -- w w | 0 )
 1086              	// 	Conditional duplicate.
 1087              	
 1088 04e6 DA040000 		.word	_TWOSL-MAPOFFSET
 1089 04ea 04       	_QDUP:	.byte   4
 1090 04eb 3F445550 		.ascii "?DUP"
 1091 04ef 00       		.align 2 	
 1092              	QDUP:
 1093 04f0 2C00     		MOVS	R4,R5
 1094 04f2 18BF     		IT NE 
 1095 04f4 41F8045D 	    STRNE	R5,[R1,#-4]!
 1096 04f8 7047     		_NEXT
 1097              	
 1098              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1099              	// 	Rotate top 3 items.
 1100              	
 1101 04fa EA040000 		.word	_QDUP-MAPOFFSET
 1102 04fe 03       	_ROT:	.byte   3
 1103 04ff 524F54   		.ascii "ROT"
 1104 0502 00BF     		.align 2 	
 1105              	ROT:
 1106 0504 0C68     		LDR	R4,[R1]  // r4=w2 
 1107 0506 0D60     		STR	R5,[R1]  // w3 replace w2 
 1108 0508 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1109 050a 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1110 050c 7047     		_NEXT
 1111              	
 1112              	//    2DROP	( w1 w2 -- )
 1113              	// 	Drop top 2 items.
 1114              	
 1115 050e FE040000 		.word	_ROT-MAPOFFSET
 1116 0512 05       	_DDROP:	.byte   5
 1117 0513 3244524F 		.ascii "2DROP"
 1117      50
 1118              		.align 2 	
 1119              	DDROP:
 1120 0518 51F8045B 		_POP
 1121 051c 51F8045B 		_POP
 1122 0520 7047     		_NEXT
 1123              	
 1124              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1125              	// 	Duplicate top 2 items.
 1126              	
 1127 0522 12050000 		.word	_DDROP-MAPOFFSET
 1128 0526 04       	_DDUP:	.byte   4
 1129 0527 32445550 		.ascii "2DUP"
 1130 052b 00       		.align 2 	
 1131              	DDUP:
 1132 052c 0C68     		LDR	R4,[R1] // r4=w1
 1133 052e 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1134 0532 41F8044D 		STR	R4,[R1,#-4]! // push w1 
ARM GAS  stm32eforth.s 			page 23


 1135 0536 7047     		_NEXT
 1136              	
 1137              	//    D+	( d1 d2 -- d3 )
 1138              	// 	Add top 2 double numbers.
 1139              	
 1140 0538 26050000 		.word	_DDUP-MAPOFFSET
 1141 053c 02       	_DPLUS:	.byte   2
 1142 053d 442B     		.ascii "D+"
 1143 053f 00       		.align 2 	
 1144              	DPLUS:
 1145 0540 51F8044B 		LDR	R4,[R1],#4
 1146 0544 51F8046B 		LDR	R6,[R1],#4
 1147 0548 0F68     		LDR	R7,[R1]
 1148 054a E419     		ADDS	R4,R4,R7
 1149 054c 0C60     		STR	R4,[R1]
 1150 054e 45EB0605 		ADC	R5,R5,R6
 1151 0552 7047     		_NEXT
 1152              	
 1153              	//    NOT	 ( w -- !w )
 1154              	// 	1"s complement.
 1155              	
 1156 0554 3C050000 		.word	_DPLUS-MAPOFFSET
 1157 0558 03       	_INVER:	.byte   3
 1158 0559 4E4F54   		.ascii "NOT"
 1159              		.align 2 	
 1160              	INVER:
 1161 055c 6FEA0505 		MVN	R5,R5
 1162 0560 7047     		_NEXT
 1163              	
 1164              	//    NEGATE	( w -- -w )
 1165              	// 	2's complement.
 1166              	
 1167 0562 58050000 		.word	_INVER-MAPOFFSET
 1168 0566 06       	_NEGAT:	.byte   6
 1169 0567 4E454741 		.ascii "NEGATE"
 1169      5445
 1170 056d 0000BF   		.align 2 	
 1171              	NEGAT:
 1172 0570 C5F10005 		RSB	R5,R5,#0
 1173 0574 7047     		_NEXT
 1174              	
 1175              	//    ABS	 ( w -- |w| )
 1176              	// 	Absolute.
 1177              	
 1178 0576 66050000 		.word	_NEGAT-MAPOFFSET
 1179 057a 03       	_ABSS:	.byte   3
 1180 057b 414253   		.ascii "ABS"
 1181 057e 00BF     		.align 2 	
 1182              	ABSS:
 1183 0580 15F0004F 		TST	R5,#0x80000000
 1184 0584 18BF     		IT NE
 1185 0586 6D42     	    RSBNE   R5,R5,#0
 1186 0588 7047     		_NEXT
 1187              	
 1188              	//    =	 ( w w -- t )
 1189              	// 	Equal?
 1190              	
ARM GAS  stm32eforth.s 			page 24


 1191 058a 7A050000 		.word	_ABSS-MAPOFFSET
 1192 058e 01       	_EQUAL:	.byte   1
 1193 058f 3D       		.ascii "="
 1194              		.align 2 	
 1195              	EQUAL:
 1196 0590 51F8044B 		LDR	R4,[R1],#4
 1197 0594 A542     		CMP	R5,R4
 1198 0596 0CBF     		ITE EQ 
 1199 0598 6FF00005 	    MVNEQ	R5,#0
 1200 059c 0025     		MOVNE	R5,#0
 1201 059e 7047     		_NEXT
 1202              	
 1203              	//    U<	 ( w w -- t )
 1204              	// 	Unsigned equal?
 1205              	
 1206 05a0 8E050000 		.word	_EQUAL-MAPOFFSET
 1207 05a4 02       	_ULESS:	.byte   2
 1208 05a5 553C     		.ascii "U<"
 1209 05a7 00       		.align 2 	
 1210              	ULESS:
 1211 05a8 51F8044B 		LDR	R4,[R1],#4
 1212 05ac AC42     		CMP	R4,R5
 1213 05ae 34BF     		ITE CC 
 1214 05b0 6FF00005 		MVNCC	R5,#0
 1215 05b4 0025     		MOVCS	R5,#0
 1216 05b6 7047     		_NEXT
 1217              	
 1218              	//    <	( w w -- t )
 1219              	// 	Less?
 1220              	
 1221 05b8 A4050000 		.word	_ULESS-MAPOFFSET
 1222 05bc 01       	_LESS:	.byte   1
 1223 05bd 3C       		.ascii "<"
 1224 05be 00BF     		.align 2 	
 1225              	LESS:
 1226 05c0 51F8044B 		LDR	R4,[R1],#4
 1227 05c4 AC42     		CMP	R4,R5
 1228 05c6 B4BF     	    ITE LT
 1229 05c8 6FF00005 		MVNLT	R5,#0
 1230 05cc 0025     		MOVGE	R5,#0
 1231 05ce 7047     		_NEXT
 1232              	
 1233              	//    >	( w w -- t )
 1234              	// 	greater?
 1235              	
 1236 05d0 BC050000 		.word	_LESS-MAPOFFSET
 1237 05d4 01       	_GREAT:	.byte   1
 1238 05d5 3E       		.ascii ">"
 1239 05d6 00BF     		.align 2 	
 1240              	GREAT:
 1241 05d8 51F8044B 		LDR	R4,[R1],#4
 1242 05dc AC42     		CMP	R4,R5
 1243 05de CCBF     		ITE GT
 1244 05e0 6FF00005 	    MVNGT	R5,#0
 1245 05e4 0025     		MOVLE	R5,#0
 1246 05e6 7047     		_NEXT
 1247              	
ARM GAS  stm32eforth.s 			page 25


 1248              	//    MAX	 ( w w -- max )
 1249              	// 	Leave maximum.
 1250              	
 1251 05e8 D4050000 		.word	_GREAT-MAPOFFSET
 1252 05ec 03       	_MAX:	.byte   3
 1253 05ed 4D4158   		.ascii "MAX"
 1254              		.align 2 	
 1255              	MAX:
 1256 05f0 51F8044B 		LDR	R4,[R1],#4
 1257 05f4 AC42     		CMP	R4,R5
 1258 05f6 C8BF     		IT GT 
 1259 05f8 2546     		MOVGT	R5,R4
 1260 05fa 7047     		_NEXT
 1261              	
 1262              	//    MIN	 ( w w -- min )
 1263              	// 	Leave minimum.
 1264              	
 1265 05fc EC050000 		.word	_MAX-MAPOFFSET
 1266 0600 03       	_MIN:	.byte   3
 1267 0601 4D494E   		.ascii "MIN"
 1268              		.align 2 	
 1269              	MIN:
 1270 0604 51F8044B 		LDR	R4,[R1],#4
 1271 0608 AC42     		CMP	R4,R5
 1272 060a B8BF     		IT LT
 1273 060c 2546     		MOVLT	R5,R4
 1274 060e 7047     		_NEXT
 1275              	
 1276              	//    +!	 ( w a -- )
 1277              	// 	Add to memory.
 1278              	
 1279 0610 00060000 		.word	_MIN-MAPOFFSET
 1280 0614 02       	_PSTOR:	.byte   2
 1281 0615 2B21     		.ascii "+!"
 1282 0617 00       		.align 2 	
 1283              	PSTOR:
 1284 0618 51F8044B 		LDR	R4,[R1],#4
 1285 061c 2E68     		LDR	R6,[R5]
 1286 061e 2644     		ADD	R6,R6,R4
 1287 0620 2E60     		STR	R6,[R5]
 1288 0622 51F8045B 		_POP
 1289 0626 7047     		_NEXT
 1290              	
 1291              	//    2!	 ( d a -- )
 1292              	// 	Store double number.
 1293              	
 1294 0628 14060000 		.word	_PSTOR-MAPOFFSET
 1295 062c 02       	_DSTOR:	.byte   2
 1296 062d 3221     		.ascii "2!"
 1297 062f 00       		.align 2 	
 1298              	DSTOR:
 1299 0630 51F8044B 		LDR	R4,[R1],#4
 1300 0634 51F8046B 		LDR	R6,[R1],#4
 1301 0638 45F8044B 		STR	R4,[R5],#4
 1302 063c 2E60     		STR	R6,[R5]
 1303 063e 51F8045B 		_POP
 1304 0642 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 26


 1305              	
 1306              	//    2@	 ( a -- d )
 1307              	// 	Fetch double number.
 1308              	
 1309 0644 2C060000 		.word	_DSTOR-MAPOFFSET
 1310 0648 02       	_DAT:	.byte   2
 1311 0649 3240     		.ascii "2@"
 1312 064b 00       		.align 2 	
 1313              	DAT:
 1314 064c 6C68     		LDR	R4,[R5,#4]
 1315 064e 41F8044D 		STR	R4,[R1,#-4]!
 1316 0652 2D68     		LDR	R5,[R5]
 1317 0654 7047     		_NEXT
 1318              	
 1319              	//    COUNT	( b -- b+1 c )
 1320              	// 	Fetch length of string.
 1321              	
 1322 0656 48060000 		.word	_DAT-MAPOFFSET
 1323 065a 05       	_COUNT:	.byte   5
 1324 065b 434F554E 		.ascii "COUNT"
 1324      54
 1325              		.align 2 	
 1326              	COUNT:
 1327 0660 15F8014B 		LDRB	R4,[R5],#1
 1328 0664 41F8045D 		_PUSH
 1329 0668 2546     		MOV	R5,R4
 1330 066a 7047     		_NEXT
 1331              	
 1332              	//    DNEGATE	( d -- -d )
 1333              	// 	Negate double number.
 1334              	
 1335 066c 5A060000 		.word	_COUNT-MAPOFFSET
 1336 0670 07       	_DNEGA:	.byte   7
 1337 0671 444E4547 		.ascii "DNEGATE"
 1337      415445
 1338              		.align 2 	
 1339              	DNEGA:
 1340 0678 0C68     		LDR	R4,[R1]
 1341 067a A6EB0606 		SUB	R6,R6,R6
 1342 067e 341B     		SUBS R4,R6,R4
 1343 0680 66EB0505 		SBC	R5,R6,R5
 1344 0684 0C60     		STR	R4,[R1]
 1345 0686 7047     		_NEXT
 1346              	
 1347              	// **************************************************************************
 1348              	//  System and user variables
 1349              	
 1350              	//    doVAR	( -- a )
 1351              	// 	Run time routine for VARIABLE and CREATE.
 1352              	
 1353              	// 	.word	_DNEGA-MAPOFFSET
 1354              	// _DOVAR	.byte  COMPO+5
 1355              	// 	.ascii "doVAR"
 1356              	// 	.align 2 	
 1357              	DOVAR:
 1358 0688 41F8045D 		_PUSH
 1359 068c AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
ARM GAS  stm32eforth.s 			page 27


 1360 0690 52F804FB 		_UNNEST
 1361              	
 1362              	//    doCON	( -- a ) 
 1363              	// 	Run time routine for CONSTANT.
 1364              	
 1365              	// 	.word	_DOVAR-MAPOFFSET
 1366              	// _DOCON	.byte  COMPO+5
 1367              	// 	.ascii "doCON"
 1368              	// 	.align 2 	
 1369              	DOCON:
 1370 0694 41F8045D 		_PUSH
 1371 0698 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1372 069c 52F804FB 		_UNNEST
 1373              	
 1374              	/***********************
 1375              	  system variables 
 1376              	***********************/
 1377              	  
 1378              	//  MSEC ( -- a)
 1379              	// return address of milliseconds counter
 1380 06a0 70060000 	  .word _DNEGA-MAPOFFSET 
 1381 06a4 04       	_MSEC: .byte 4
 1382 06a5 4D534543 	  .ascii "MSEC"
 1383 06a9 0000BF   	  .align 2 
 1384              	MSEC:
 1385 06ac 41F8045D 	  _PUSH
 1386 06b0 03F10405 	  ADD R5,R3,#TICKS_OFS
 1387 06b4 7047     	  _NEXT 
 1388              	
 1389              	// TIMER ( -- a )
 1390 06b6 A4060000 	  .word _MSEC-MAPOFFSET
 1391 06ba 05       	_TIMER:  .byte 5
 1392 06bb 54494D45 	  .ascii "TIMER"
 1392      52
 1393              	  .align 2 
 1394              	TIMER:
 1395 06c0 41F8045D 	  _PUSH 
 1396 06c4 05F13505 	  ADD R5,53,#TIMER_OFS
 1397 06c8 7047     	  _NEXT
 1398              	
 1399              	//    'BOOT	 ( -- a )
 1400              	// 	Application.
 1401              	
 1402 06ca BA060000 		.word	_TIMER-MAPOFFSET
 1403 06ce 05       	_TBOOT:	.byte   5
 1404 06cf 27424F4F 		.ascii "'BOOT"
 1404      54
 1405              		.align 2 	
 1406              	TBOOT:
 1407 06d4 41F8045D 		_PUSH
 1408 06d8 03F10C05 		ADD	R5,R3,#BOOT_OFS 
 1409 06dc 7047     		_NEXT
 1410              		
 1411              	//    BASE	( -- a )
 1412              	// 	Storage of the radix base for numeric I/O.
 1413              	
 1414 06de CE060000 		.word	_TBOOT-MAPOFFSET
ARM GAS  stm32eforth.s 			page 28


 1415 06e2 04       	_BASE:	.byte   4
 1416 06e3 42415345 		.ascii "BASE"
 1417 06e7 00       		.align 2 	
 1418              	BASE:
 1419 06e8 41F8045D 		_PUSH
 1420 06ec 03F11005 		ADD	R5,R3,#BASE_OFS
 1421 06f0 7047     		_NEXT
 1422              	
 1423              	//    tmp	 ( -- a )
 1424              	// 	A temporary storage location used in parse and find.
 1425              	
 1426              	// 	.word	_BASE-MAPOFFSET
 1427              	// _TEMP	.byte   COMPO+3
 1428              	// 	.ascii "tmp"
 1429              	// 	.align 2 	
 1430              	TEMP:
 1431 06f2 41F8045D 		_PUSH
 1432 06f6 03F11405 		ADD	R5,R3,#TMP_OFS
 1433 06fa 7047     		_NEXT
 1434              	
 1435              	//    SPAN	( -- a )
 1436              	// 	Hold character count received by EXPECT.
 1437              	
 1438 06fc E2060000 		.word	_BASE-MAPOFFSET
 1439 0700 04       	_SPAN:	.byte   4
 1440 0701 5350414E 		.ascii "SPAN"
 1441 0705 0000BF   		.align 2 	
 1442              	SPAN:
 1443 0708 41F8045D 		_PUSH
 1444 070c 03F11805 		ADD	R5,R3,#SPAN_OFS
 1445 0710 7047     		_NEXT
 1446              	
 1447              	//    >IN	 ( -- a )
 1448              	// 	Hold the character pointer while parsing input stream.
 1449              	
 1450 0712 00070000 		.word	_SPAN-MAPOFFSET
 1451 0716 03       	_INN:	.byte   3
 1452 0717 3E494E   		.ascii ">IN"
 1453 071a 00BF     		.align 2 	
 1454              	INN:
 1455 071c 41F8045D 		_PUSH
 1456 0720 03F11C05 		ADD	R5,R3,#TOIN_OFS
 1457 0724 7047     		_NEXT
 1458              	
 1459              	//    #TIB	( -- a )
 1460              	// 	Hold the current count and address of the terminal input buffer.
 1461              	
 1462 0726 16070000 		.word	_INN-MAPOFFSET
 1463 072a 04       	_NTIB:	.byte   4
 1464 072b 23544942 		.ascii "#TIB"
 1465 072f 00       		.align 2 	
 1466              	NTIB:
 1467 0730 41F8045D 		_PUSH
 1468 0734 03F12005 		ADD	R5,R3,#NTIB_OFS
 1469 0738 7047     		_NEXT
 1470              	
 1471              	//    'EVAL	( -- a )
ARM GAS  stm32eforth.s 			page 29


 1472              	// 	Execution vector of EVAL.
 1473              	
 1474 073a 2A070000 		.word	_NTIB-MAPOFFSET
 1475 073e 05       	_TEVAL:	.byte   5
 1476 073f 27455641 		.ascii "'EVAL"
 1476      4C
 1477              		.align 2 	
 1478              	TEVAL:
 1479 0744 41F8045D 		_PUSH
 1480 0748 03F12805 		ADD	R5,R3,#EVAL_OFS
 1481 074c 7047     		_NEXT
 1482              	
 1483              	//    HLD	 ( -- a )
 1484              	// 	Hold a pointer in building a numeric output string.
 1485              	
 1486 074e 3E070000 		.word	_TEVAL-MAPOFFSET
 1487 0752 03       	_HLD:	.byte   3
 1488 0753 484C44   		.ascii "HLD"
 1489 0756 00BF     		.align 2 	
 1490              	HLD:
 1491 0758 41F8045D 		_PUSH
 1492 075c 03F12C05 		ADD	R5,R3,#HLD_OFS
 1493 0760 7047     		_NEXT
 1494              	
 1495              	//    CONTEXT	( -- a )
 1496              	// 	A area to specify vocabulary search order.
 1497              	
 1498 0762 52070000 		.word	_HLD-MAPOFFSET
 1499 0766 07       	_CNTXT:	.byte   7
 1500 0767 434F4E54 		.ascii "CONTEXT"
 1500      455854
 1501 076e 00BF     		.align 2 	
 1502              	CNTXT:
 1503              	CRRNT:
 1504 0770 41F8045D 		_PUSH
 1505 0774 03F13005 		ADD	R5,R3,#CTXT_OFS
 1506 0778 7047     		_NEXT
 1507              	
 1508              	//    CP	( -- a )
 1509              	// 	Point to top name in RAM vocabulary.
 1510              	
 1511 077a 66070000 		.word	_CNTXT-MAPOFFSET
 1512 077e 02       	_CP:	.byte   2
 1513 077f 4350     		.ascii "CP"
 1514 0781 0000BF   		.align 2 	
 1515              	CPP:
 1516 0784 41F8045D 		_PUSH
 1517 0788 03F13805 		ADD	R5,R3,#RAM_CTOP_OFS
 1518 078c 7047     		_NEXT
 1519              	
 1520              	//   FCP ( -- a )
 1521              	//  Point ot top of Flash dictionary
 1522 078e 7E070000 		.word _CP-MAPOFFSET
 1523 0792 04       	_FCPP: .byte 4 
 1524 0793 46435050 		.ascii "FCPP"
 1525 0797 00       		.align 2 
 1526              	FCPP: 
ARM GAS  stm32eforth.s 			page 30


 1527 0798 41F8045D 		_PUSH 
 1528 079c 03F13405 		ADD R5,R3,#FLSH_CTOP_OFS 
 1529 07a0 7047     		_NEXT 
 1530              	
 1531              	//    LAST	( -- a )
 1532              	// 	Point to the last name in the name dictionary.
 1533              	
 1534 07a2 92070000 		.word	_FCPP-MAPOFFSET
 1535 07a6 04       	_LAST:	.byte   4
 1536 07a7 4C415354 		.ascii "LAST"
 1537 07ab 00       		.align 2 	
 1538              	LAST:
 1539 07ac 41F8045D 		_PUSH
 1540 07b0 03F13C05 		ADD	R5,R3,#LASTN_OFS
 1541 07b4 7047     		_NEXT
 1542              	
 1543              	// **************************************************************************
 1544              	//  Common functions
 1545              	
 1546              	//    WITHIN	( u ul uh -- t )
 1547              	// 	Return true if u is within the range of ul and uh.
 1548              	
 1549 07b6 A6070000 		.word	_LAST-MAPOFFSET
 1550 07ba 06       	_WITHI:	.byte   6
 1551 07bb 57495448 		.ascii "WITHIN"
 1551      494E
 1552 07c1 0000BF   		.align 2 	
 1553              	WITHI:
 1554 07c4 42F804ED 		_NEST
 1555 07c8 FFF7B8FD 		BL	OVER
 1556 07cc FFF710FE 		BL	SUBB
 1557 07d0 FFF786FD 		BL	TOR
 1558 07d4 FFF70CFE 		BL	SUBB
 1559 07d8 FFF770FD 		BL	RFROM
 1560 07dc FFF7E4FE 		BL	ULESS
 1561 07e0 52F804FB 		_UNNEST
 1562              	
 1563              	//  Divide
 1564              	
 1565              	//    UM/MOD	( udl udh u -- ur uq )
 1566              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1567              	
 1568 07e4 BA070000 		.word	_WITHI-MAPOFFSET
 1569 07e8 06       	_UMMOD:	.byte   6
 1570 07e9 554D2F4D 		.ascii "UM/MOD"
 1570      4F44
 1571 07ef 00       		.align 2 	
 1572              	UMMOD:
 1573 07f0 4FF00107 		MOV	R7,#1
 1574 07f4 51F8044B 		LDR	R4,[R1],#4
 1575 07f8 0E68     		LDR	R6,[R1]
 1576              	UMMOD0:
 1577 07fa B619     		ADDS	R6,R6,R6
 1578 07fc 6441     		ADCS	R4,R4,R4
 1579 07fe 04D3     		BCC	UMMOD1
 1580 0800 A4EB0504 		SUB	R4,R4,R5
 1581 0804 06F10106 		ADD	R6,R6,#1
ARM GAS  stm32eforth.s 			page 31


 1582 0808 04E0     		B UMMOD2
 1583              	UMMOD1:
 1584 080a 641B     		SUBS	R4,R4,R5 
 1585 080c 56F10106 		ADCS	R6,R6,#1
 1586 0810 00D2     		BCS	UMMOD2
 1587 0812 2C44     		ADD	R4,R4,R5
 1588              	UMMOD2:
 1589 0814 FF19     		ADDS	R7,R7,R7
 1590 0816 F0D3     		BCC	UMMOD0
 1591 0818 3546     		MOV	R5,R6
 1592 081a 0C60     		STR	R4,[R1]
 1593 081c 7047     		_NEXT
 1594              	
 1595              	//    M/MOD	( d n -- r q )
 1596              	// 	Signed floored divide of double by single. Return mod and quotient.
 1597              	
 1598 081e E8070000 		.word	_UMMOD-MAPOFFSET
 1599 0822 05       	_MSMOD:	.byte  5
 1600 0823 4D2F4D4F 		.ascii "M/MOD"
 1600      44
 1601              		.align 2 	
 1602              	MSMOD:	
 1603 0828 42F804ED 		_NEST
 1604 082c FFF774FD 		BL	DUPP
 1605 0830 FFF78CFD 		BL	ZLESS
 1606 0834 FFF770FD 		BL	DUPP
 1607 0838 FFF752FD 		BL	TOR
 1608 083c FFF701FD 		BL	QBRAN
 1609 0840 54080000 		.word	MMOD1-MAPOFFSET
 1610 0844 FFF794FE 		BL	NEGAT
 1611 0848 FFF74AFD 		BL	TOR
 1612 084c FFF714FF 		BL	DNEGA
 1613 0850 FFF734FD 		BL	RFROM
 1614              	MMOD1:
 1615 0854 FFF744FD 	  BL	TOR
 1616 0858 FFF75EFD 		BL	DUPP
 1617 085c FFF776FD 		BL	ZLESS
 1618 0860 FFF7EFFC 		BL	QBRAN
 1619 0864 70080000 		.word	MMOD2-MAPOFFSET
 1620 0868 FFF732FD 		BL	RAT
 1621 086c FFF7B8FD 		BL	PLUS
 1622              	MMOD2:
 1623 0870 FFF724FD 	  BL	RFROM
 1624 0874 FFF7BCFF 		BL	UMMOD
 1625 0878 FFF720FD 		BL	RFROM
 1626 087c FFF7E1FC 		BL	QBRAN
 1627 0880 90080000 		.word	MMOD3-MAPOFFSET
 1628 0884 FFF750FD 		BL	SWAP
 1629 0888 FFF772FE 		BL	NEGAT
 1630 088c FFF74CFD 		BL	SWAP
 1631              	MMOD3:   
 1632 0890 52F804FB 		_UNNEST
 1633              	
 1634              	//    /MOD	( n n -- r q )
 1635              	// 	Signed divide. Return mod and quotient.
 1636              	
 1637 0894 22080000 		.word	_MSMOD-MAPOFFSET
ARM GAS  stm32eforth.s 			page 32


 1638 0898 04       	_SLMOD:	.byte   4
 1639 0899 2F4D4F44 		.ascii "/MOD"
 1640 089d 0000BF   		.align 2 	
 1641              	SLMOD:
 1642 08a0 42F804ED 		_NEST
 1643 08a4 FFF74AFD 		BL	OVER
 1644 08a8 FFF750FD 		BL	ZLESS
 1645 08ac FFF73CFD 		BL	SWAP
 1646 08b0 FFF7BAFF 		BL	MSMOD
 1647 08b4 52F804FB 		_UNNEST
 1648              	
 1649              	//    MOD	 ( n n -- r )
 1650              	// 	Signed divide. Return mod only.
 1651              	
 1652 08b8 98080000 		.word	_SLMOD-MAPOFFSET
 1653 08bc 03       	_MODD:	.byte  3
 1654 08bd 4D4F44   		.ascii "MOD"
 1655              		.align 2 	
 1656              	MODD:
 1657 08c0 42F804ED 		_NEST
 1658 08c4 FFF7ECFF 		BL	SLMOD
 1659 08c8 FFF71EFD 		BL	DROP
 1660 08cc 52F804FB 		_UNNEST
 1661              	
 1662              	//    /	   ( n n -- q )
 1663              	// 	Signed divide. Return quotient only.
 1664              	
 1665 08d0 BC080000 		.word	_MODD-MAPOFFSET
 1666 08d4 01       	_SLASH:	.byte  1
 1667 08d5 2F       		.ascii "/"
 1668 08d6 00BF     		.align 2 	
 1669              	SLASH:
 1670 08d8 42F804ED 		_NEST
 1671 08dc FFF7E0FF 		BL	SLMOD
 1672 08e0 FFF722FD 		BL	SWAP
 1673 08e4 FFF710FD 		BL	DROP
 1674 08e8 52F804FB 		_UNNEST
 1675              	
 1676              	//    */MOD	( n1 n2 n3 -- r q )
 1677              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1678              	
 1679 08ec D4080000 		.word	_SLASH-MAPOFFSET
 1680 08f0 05       	_SSMOD:	.byte  5
 1681 08f1 2A2F4D4F 		.ascii "*/MOD"
 1681      44
 1682 08f6 00BF     		.align 2 	
 1683              	SSMOD:
 1684 08f8 42F804ED 		_NEST
 1685 08fc FFF7F0FC 		BL	TOR
 1686 0900 FFF792FD 		BL	MSTAR
 1687 0904 FFF7DAFC 		BL	RFROM
 1688 0908 FFF78EFF 		BL	MSMOD
 1689 090c 52F804FB 		_UNNEST
 1690              	
 1691              	//    */	  ( n1 n2 n3 -- q )
 1692              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1693              	
ARM GAS  stm32eforth.s 			page 33


 1694 0910 F0080000 		.word	_SSMOD-MAPOFFSET
 1695 0914 02       	_STASL:	.byte  2
 1696 0915 2A2F     		.ascii "*/"
 1697 0917 00       		.align 2 	
 1698              	STASL:
 1699 0918 42F804ED 		_NEST
 1700 091c FFF7ECFF 		BL	SSMOD
 1701 0920 FFF702FD 		BL	SWAP
 1702 0924 FFF7F0FC 		BL	DROP
 1703 0928 52F804FB 		_UNNEST
 1704              	
 1705              	// **************************************************************************
 1706              	//  Miscellaneous
 1707              	
 1708              	//    ALIGNED	( b -- a )
 1709              	// 	Align address to the cell boundary.
 1710              	
 1711 092c 14090000 		.word	_STASL-MAPOFFSET
 1712 0930 07       	_ALGND:	.byte   7
 1713 0931 414C4947 		.ascii "ALIGNED"
 1713      4E4544
 1714              		.align 2 	
 1715              	ALGND:
 1716 0938 05F10305 		ADD	R5,R5,#3
 1717 093c 6FF00304 		MVN	R4,#3
 1718 0940 05EA0405 		AND	R5,R5,R4
 1719 0944 7047     		_NEXT
 1720              	
 1721              	//    >CHAR	( c -- c )
 1722              	// 	Filter non-printing characters.
 1723              	
 1724 0946 30090000 		.word	_ALGND-MAPOFFSET
 1725 094a 05       	_TCHAR:	.byte  5
 1726 094b 3E434841 		.ascii ">CHAR"
 1726      52
 1727              		.align 2 	
 1728              	TCHAR:
 1729 0950 42F804ED 		_NEST
 1730 0954 FFF751FC 		_DOLIT
 1731 0958 7F000000 		.word	0x7F
 1732 095c FFF700FD 		BL	ANDD
 1733 0960 FFF7DAFC 		BL	DUPP	// mask msb
 1734 0964 FFF79AFD 		BL	BLANK
 1735 0968 FFF747FC 		_DOLIT
 1736 096c 7F000000 		.word	127
 1737 0970 FFF728FF 		BL	WITHI	// check for printable
 1738 0974 FFF7F2FD 		BL	INVER
 1739 0978 FFF763FC 		BL	QBRAN
 1740 097c 8C090000 		.word	TCHA1-MAPOFFSET
 1741 0980 FFF7C2FC 		BL	DROP
 1742 0984 FFF739FC 		_DOLIT
 1743 0988 5F000000 		.word	'_'	// replace non-printables
 1744              	TCHA1:
 1745 098c 52F804FB 		  _UNNEST
 1746              	
 1747              	//    DEPTH	( -- n )
 1748              	// 	Return the depth of the data stack.
ARM GAS  stm32eforth.s 			page 34


 1749              	
 1750 0990 4A090000 		.word	_TCHAR-MAPOFFSET
 1751 0994 05       	_DEPTH:	.byte  5
 1752 0995 44455054 		.ascii "DEPTH"
 1752      48
 1753 099a 00BF     		.align 2 	
 1754              	DEPTH:
 1755 099c 41F8045D 		_PUSH
 1756 09a0 44F60475 		MOVW	R5,#0X4f04
 1757 09a4 C2F20005 	 	MOVT	R5,#0X2000
 1758 09a8 A5EB0105 		SUB	R5,R5,R1
 1759 09ac 4FEAA505 		ASR	R5,R5,#2
 1760 09b0 A5F10105 		SUB	R5,R5,#1
 1761 09b4 7047     		_NEXT
 1762              	
 1763              	//    PICK	( ... +n -- ... w )
 1764              	// 	Copy the nth stack item to tos.
 1765              	
 1766 09b6 94090000 		.word	_DEPTH-MAPOFFSET
 1767 09ba 04       	_PICK:	.byte  4
 1768 09bb 5049434B 		.ascii "PICK"
 1769 09bf 00       		.align 2 	
 1770              	PICK:
 1771 09c0 42F804ED 		_NEST
 1772 09c4 FFF73AFD 		BL	ONEP
 1773 09c8 FFF772FD 		BL	CELLS
 1774 09cc FFF792FC 		BL	SPAT
 1775 09d0 FFF706FD 		BL	PLUS
 1776 09d4 FFF75CFC 		BL	AT
 1777 09d8 52F804FB 		_UNNEST
 1778              	
 1779              	// **************************************************************************
 1780              	//  Memory access
 1781              	
 1782              	//    HERE	( -- a )
 1783              	// 	Return the top of the code dictionary.
 1784              	
 1785 09dc BA090000 		.word	_PICK-MAPOFFSET
 1786 09e0 04       	_HERE:	.byte  4
 1787 09e1 48455245 		.ascii "HERE"
 1788 09e5 0000BF   		.align 2 	
 1789              	HERE:
 1790 09e8 42F804ED 		_NEST
 1791 09ec FFF7CAFE 		BL	CPP
 1792 09f0 FFF74EFC 		BL	AT
 1793 09f4 52F804FB 		_UNNEST
 1794              		
 1795              	//    PAD	 ( -- a )
 1796              	// 	Return the address of a temporary buffer.
 1797              	
 1798 09f8 E0090000 		.word	_HERE-MAPOFFSET
 1799 09fc 03       	_PAD:	.byte  3
 1800 09fd 504144   		.ascii "PAD"
 1801              		.align 2 	
 1802              	PAD:
 1803 0a00 42F804ED 		_NEST
 1804 0a04 FFF7F0FF 		BL	HERE
ARM GAS  stm32eforth.s 			page 35


 1805 0a08 05F15005 		ADD	R5,R5,#80
 1806 0a0c 52F804FB 		_UNNEST
 1807              	
 1808              	//    TIB	 ( -- a )
 1809              	// 	Return the address of the terminal input buffer.
 1810              	
 1811 0a10 FC090000 		.word	_PAD-MAPOFFSET
 1812 0a14 03       	_TIB:	.byte  3
 1813 0a15 544942   		.ascii "TIB"
 1814              		.align 2 	
 1815              	TIB:
 1816 0a18 41F8045D 		_PUSH
 1817 0a1c 5D6A     		ldr r5,[r3,#TIB_OFS]
 1818 0a1e 7047     		_NEXT
 1819              	
 1820              	//    @EXECUTE	( a -- )
 1821              	// 	Execute vector stored in address a.
 1822              	
 1823 0a20 140A0000 		.word	_TIB-MAPOFFSET
 1824 0a24 08       	_ATEXE:	.byte   8
 1825 0a25 40455845 		.ascii "@EXECUTE"
 1825      43555445 
 1826 0a2d 0000BF   		.align 2 	
 1827              	ATEXE:
 1828 0a30 2C00     		MOVS	R4,R5
 1829 0a32 51F8045B 		_POP
 1830 0a36 2468     		LDR	R4,[R4]
 1831 0a38 44F00104 		ORR	R4,R4,#1
 1832 0a3c 18BF     	    IT NE 
 1833 0a3e 2047     		BXNE	R4
 1834 0a40 7047     		_NEXT
 1835              	
 1836              	//    CMOVE	( b1 b2 u -- )
 1837              	// 	Copy u bytes from b1 to b2.
 1838              	
 1839 0a42 240A0000 		.word	_ATEXE-MAPOFFSET
 1840 0a46 05       	_CMOVE:	.byte   5
 1841 0a47 434D4F56 		.ascii "CMOVE"
 1841      45
 1842              		.align 2 	
 1843              	CMOVE:
 1844 0a4c 51F8046B 		LDR	R6,[R1],#4
 1845 0a50 51F8047B 		LDR	R7,[R1],#4
 1846 0a54 03E0     		B CMOV1
 1847              	CMOV0:
 1848 0a56 17F8014B 		LDRB	R4,[R7],#1
 1849 0a5a 06F8014B 		STRB	R4,[R6],#1
 1850              	CMOV1:
 1851 0a5e 2D00     		MOVS	R5,R5
 1852 0a60 02D0     		BEQ	CMOV2
 1853 0a62 A5F10105 		SUB	R5,R5,#1
 1854 0a66 F6E7     		B CMOV0
 1855              	CMOV2:
 1856 0a68 51F8045B 		_POP
 1857 0a6c 7047     		_NEXT
 1858              	
 1859              	//    MOVE	( a1 a2 u -- )
ARM GAS  stm32eforth.s 			page 36


 1860              	// 	Copy u words from a1 to a2.
 1861              	
 1862 0a6e 460A0000 		.word	_CMOVE-MAPOFFSET
 1863 0a72 04       	_MOVE:	.byte   4
 1864 0a73 4D4F5645 		.ascii "MOVE"
 1865 0a77 00       		.align 2 	
 1866              	MOVE:
 1867 0a78 25F00305 		AND	R5,R5,#-4
 1868 0a7c 51F8046B 		LDR	R6,[R1],#4
 1869 0a80 51F8047B 		LDR	R7,[R1],#4
 1870 0a84 03E0     		B MOVE1
 1871              	MOVE0:
 1872 0a86 57F8044B 		LDR	R4,[R7],#4
 1873 0a8a 46F8044B 		STR	R4,[R6],#4
 1874              	MOVE1:
 1875 0a8e 2D00     		MOVS	R5,R5
 1876 0a90 02D0     		BEQ	MOVE2
 1877 0a92 A5F10405 		SUB	R5,R5,#4
 1878 0a96 F6E7     		B MOVE0
 1879              	MOVE2:
 1880 0a98 51F8045B 		_POP
 1881 0a9c 7047     		_NEXT
 1882              	
 1883              	//    FILL	( b u c -- )
 1884              	// 	Fill u bytes of character c to area beginning at b.
 1885              	
 1886 0a9e 720A0000 		.word	_MOVE-MAPOFFSET
 1887 0aa2 04       	_FILL:	.byte   4
 1888 0aa3 46494C4C 		.ascii "FILL"
 1889 0aa7 00       		.align 2 	
 1890              	FILL:
 1891 0aa8 51F8046B 		LDR	R6,[R1],#4
 1892 0aac 51F8047B 		LDR	R7,[R1],#4
 1893              	FILL0:
 1894 0ab0 00E0     		B FILL1
 1895 0ab2 2D46     		MOV	R5,R5
 1896              	FILL1:
 1897 0ab4 07F8015B 		STRB	R5,[R7],#1
 1898 0ab8 3600     		MOVS	R6,R6
 1899 0aba 02D0     		BEQ	FILL2
 1900 0abc A6F10106 		SUB	R6,R6,#1
 1901 0ac0 F6E7     		B FILL0
 1902              	FILL2:
 1903 0ac2 51F8045B 		_POP
 1904 0ac6 7047     		_NEXT
 1905              	
 1906              	//    PACK$	( b u a -- a )
 1907              	// 	Build a counted word with u characters from b. Null fill.
 1908              	
 1909 0ac8 A20A0000 		.word	_FILL-MAPOFFSET
 1910 0acc 05       	_PACKS:	.byte  5
 1911 0acd 5041434B 		.ascii "PACK$$"
 1911      2424
 1912 0ad3 00       		.align 2 	
 1913              	PACKS:
 1914 0ad4 42F804ED 		_NEST
 1915 0ad8 FFF72EFF 		BL	ALGND
ARM GAS  stm32eforth.s 			page 37


 1916 0adc FFF71CFC 		BL	DUPP
 1917 0ae0 FFF7FEFB 		BL	TOR			// strings only on cell boundary
 1918 0ae4 FFF72AFC 		BL	OVER
 1919 0ae8 FFF77AFC 		BL	PLUS
 1920 0aec FFF7A6FC 		BL	ONEP
 1921 0af0 FFF783FB 		_DOLIT
 1922 0af4 FCFFFFFF 		.word	0xFFFFFFFC
 1923 0af8 FFF732FC 		BL	ANDD			// count mod cell
 1924 0afc FFF77DFB 		_DOLIT
 1925 0b00 00000000 		.word	0
 1926 0b04 FFF710FC 		BL	SWAP
 1927 0b08 FFF7B8FB 		BL	STORE			// null fill cell
 1928 0b0c FFF7E0FB 		BL	RAT
 1929 0b10 FFF70CFD 		BL	DDUP
 1930 0b14 FFF7C2FB 		BL	CSTOR
 1931 0b18 FFF790FC 		BL	ONEP			// save count
 1932 0b1c FFF704FC 		BL	SWAP
 1933 0b20 FFF794FF 		BL	CMOVE
 1934 0b24 FFF7CAFB 		BL	RFROM
 1935 0b28 52F804FB 		_UNNEST   			// move string
 1936              	
 1937              	// **************************************************************************
 1938              	//  Numeric output, single precision
 1939              	
 1940              	//    DIGIT	( u -- c )
 1941              	// 	Convert digit u to a character.
 1942              	
 1943 0b2c CC0A0000 		.word	_PACKS-MAPOFFSET
 1944 0b30 05       	_DIGIT:	.byte  5
 1945 0b31 44494749 		.ascii "DIGIT"
 1945      54
 1946 0b36 00BF     		.align 2 	
 1947              	DIGIT:
 1948 0b38 42F804ED 		_NEST
 1949 0b3c FFF75DFB 		_DOLIT
 1950 0b40 09000000 		.word	9
 1951 0b44 FFF7FAFB 		BL	OVER
 1952 0b48 FFF73AFD 		BL	LESS
 1953 0b4c 05F00705 		AND	R5,R5,#7
 1954 0b50 FFF746FC 		BL	PLUS
 1955 0b54 05F13005 		ADD	R5,R5,#'0'
 1956 0b58 52F804FB 		_UNNEST
 1957              	
 1958              	//    EXTRACT	( n base -- n c )
 1959              	// 	Extract the least significant digit from n.
 1960              	
 1961 0b5c 300B0000 		.word	_DIGIT-MAPOFFSET
 1962 0b60 07       	_EXTRC:	.byte  7
 1963 0b61 45585452 		.ascii "EXTRACT"
 1963      414354
 1964              		.align 2 	
 1965              	EXTRC:
 1966 0b68 42F804ED 		_NEST
 1967 0b6c FFF745FB 		_DOLIT
 1968 0b70 00000000 		.word	0
 1969 0b74 FFF7D8FB 		BL	SWAP
 1970 0b78 FFF73AFE 		BL	UMMOD
ARM GAS  stm32eforth.s 			page 38


 1971 0b7c FFF7D4FB 		BL	SWAP
 1972 0b80 FFF7DAFF 		BL	DIGIT
 1973 0b84 52F804FB 		_UNNEST
 1974              	
 1975              	//    <#	  ( -- )
 1976              	// 	Initiate the numeric output process.
 1977              	
 1978 0b88 600B0000 		.word	_EXTRC-MAPOFFSET
 1979 0b8c 02       	_BDIGS:	.byte  2
 1980 0b8d 3C23     		.ascii "<#"
 1981 0b8f 00       		.align 2 	
 1982              	BDIGS:
 1983 0b90 42F804ED 		_NEST
 1984 0b94 FFF734FF 		BL	PAD
 1985 0b98 FFF7DEFD 		BL	HLD
 1986 0b9c FFF76EFB 		BL	STORE
 1987 0ba0 52F804FB 		_UNNEST
 1988              	
 1989              	//    HOLD	( c -- )
 1990              	// 	Insert a character into the numeric output string.
 1991              	
 1992 0ba4 8C0B0000 		.word	_BDIGS-MAPOFFSET
 1993 0ba8 04       	_HOLD:	.byte  4
 1994 0ba9 484F4C44 		.ascii "HOLD"
 1995 0bad 0000BF   		.align 2 	
 1996              	HOLD:
 1997 0bb0 42F804ED 		_NEST
 1998 0bb4 FFF7D0FD 		BL	HLD
 1999 0bb8 FFF76AFB 		BL	AT
 2000 0bbc FFF746FC 		BL	ONEM
 2001 0bc0 FFF7AAFB 		BL	DUPP
 2002 0bc4 FFF7C8FD 		BL	HLD
 2003 0bc8 FFF758FB 		BL	STORE
 2004 0bcc FFF766FB 		BL	CSTOR
 2005 0bd0 52F804FB 		_UNNEST
 2006              	
 2007              	//    #	   ( u -- u )
 2008              	// 	Extract one digit from u and append the digit to output string.
 2009              	
 2010 0bd4 A80B0000 		.word	_HOLD-MAPOFFSET
 2011 0bd8 01       	_DIG:	.byte  1
 2012 0bd9 23       		.ascii "#"
 2013 0bda 00BF     		.align 2 	
 2014              	DIG:
 2015 0bdc 42F804ED 		_NEST
 2016 0be0 FFF782FD 		BL	BASE
 2017 0be4 FFF754FB 		BL	AT
 2018 0be8 FFF7BEFF 		BL	EXTRC
 2019 0bec FFF7E0FF 		BL	HOLD
 2020 0bf0 52F804FB 		_UNNEST
 2021              	
 2022              	//    #S	  ( u -- 0 )
 2023              	// 	Convert u until all digits are added to the output string.
 2024              	
 2025 0bf4 D80B0000 		.word	_DIG-MAPOFFSET
 2026 0bf8 02       	_DIGS:	.byte  2
 2027 0bf9 2353     		.ascii "#S"
ARM GAS  stm32eforth.s 			page 39


 2028 0bfb 00       		.align 2 	
 2029              	DIGS:
 2030 0bfc 42F804ED 		_NEST
 2031              	DIGS1:
 2032 0c00 FFF7ECFF 	    BL	DIG
 2033 0c04 FFF788FB 		BL	DUPP
 2034 0c08 FFF71BFB 		BL	QBRAN
 2035 0c0c 120C0000 		.word	DIGS2-MAPOFFSET
 2036 0c10 F6E7     		B	DIGS1
 2037              	DIGS2:
 2038 0c12 52F804FB 		  _UNNEST
 2039              	
 2040              	//    SIGN	( n -- )
 2041              	// 	Add a minus sign to the numeric output string.
 2042              	
 2043 0c16 F80B0000 		.word	_DIGS-MAPOFFSET
 2044 0c1a 04       	_SIGN:	.byte  4
 2045 0c1b 5349474E 		.ascii "SIGN"
 2046 0c1f 00       		.align 2 	
 2047              	SIGN:
 2048 0c20 42F804ED 		_NEST
 2049 0c24 FFF792FB 		BL	ZLESS
 2050 0c28 FFF70BFB 		BL	QBRAN
 2051 0c2c 3C0C0000 		.word	SIGN1-MAPOFFSET
 2052 0c30 FFF7E3FA 		_DOLIT
 2053 0c34 2D000000 		.word	'-'
 2054 0c38 FFF7BAFF 		BL	HOLD
 2055              	SIGN1:
 2056 0c3c 52F804FB 		  _UNNEST
 2057              	
 2058              	//    #>	  ( w -- b u )
 2059              	// 	Prepare the outputDCB to be TYPE'd.
 2060              	
 2061 0c40 1A0C0000 		.word	_SIGN-MAPOFFSET
 2062 0c44 02       	_EDIGS:	.byte  2
 2063 0c45 233E     		.ascii "#>"
 2064 0c47 00       		.align 2 	
 2065              	EDIGS:
 2066 0c48 42F804ED 		_NEST
 2067 0c4c FFF75CFB 		BL	DROP
 2068 0c50 FFF782FD 		BL	HLD
 2069 0c54 FFF71CFB 		BL	AT
 2070 0c58 FFF7D2FE 		BL	PAD
 2071 0c5c FFF76EFB 		BL	OVER
 2072 0c60 FFF7C6FB 		BL	SUBB
 2073 0c64 52F804FB 		_UNNEST
 2074              	
 2075              	//    str	 ( n -- b u )
 2076              	// 	Convert a signed integer to a numeric string.
 2077              	
 2078              	// 	.word	_EDIGS-MAPOFFSET
 2079              	// _STRR	.byte  3
 2080              	// 	.ascii "str"
 2081              	// 	.align 2 	
 2082              	STRR:
 2083 0c68 42F804ED 		_NEST
 2084 0c6c FFF754FB 		BL	DUPP
ARM GAS  stm32eforth.s 			page 40


 2085 0c70 FFF736FB 		BL	TOR
 2086 0c74 FFF784FC 		BL	ABSS
 2087 0c78 FFF78AFF 		BL	BDIGS
 2088 0c7c FFF7BEFF 		BL	DIGS
 2089 0c80 FFF71CFB 		BL	RFROM
 2090 0c84 FFF7CCFF 		BL	SIGN
 2091 0c88 FFF7DEFF 		BL	EDIGS
 2092 0c8c 52F804FB 		_UNNEST
 2093              	
 2094              	//    HEX	 ( -- )
 2095              	// 	Use radix 16 as base for numeric conversions.
 2096              	
 2097 0c90 440C0000 		.word	_EDIGS-MAPOFFSET
 2098 0c94 03       	_HEX:	.byte  3
 2099 0c95 484558   		.ascii "HEX"
 2100              		.align 2 	
 2101              	HEX:
 2102 0c98 42F804ED 		_NEST
 2103 0c9c FFF7ADFA 		_DOLIT
 2104 0ca0 10000000 		.word	16
 2105 0ca4 FFF720FD 		BL	BASE
 2106 0ca8 FFF7E8FA 		BL	STORE
 2107 0cac 52F804FB 		_UNNEST
 2108              	
 2109              	//    DECIMAL	( -- )
 2110              	// 	Use radix 10 as base for numeric conversions.
 2111              	
 2112 0cb0 940C0000 		.word	_HEX-MAPOFFSET
 2113 0cb4 07       	_DECIM:	.byte  7
 2114 0cb5 44454349 		.ascii "DECIMAL"
 2114      4D414C
 2115              		.align 2 	
 2116              	DECIM:
 2117 0cbc 42F804ED 		_NEST
 2118 0cc0 FFF79BFA 		_DOLIT
 2119 0cc4 0A000000 		.word	10
 2120 0cc8 FFF70EFD 		BL	BASE
 2121 0ccc FFF7D6FA 		BL	STORE
 2122 0cd0 52F804FB 		_UNNEST
 2123              	
 2124              	// **************************************************************************
 2125              	//  Numeric input, single precision
 2126              	
 2127              	//    DIGIT?	( c base -- u t )
 2128              	// 	Convert a character to its numeric value. A flag indicates success.
 2129              	
 2130 0cd4 B40C0000 		.word	_DECIM-MAPOFFSET
 2131 0cd8 06       	_DIGTQ:	.byte  6
 2132 0cd9 44494749 		.ascii "DIGIT?"
 2132      543F
 2133 0cdf 00       		.align 2 	
 2134              	DIGTQ:
 2135 0ce0 42F804ED 		_NEST
 2136 0ce4 FFF7FCFA 		BL	TOR
 2137 0ce8 FFF787FA 		_DOLIT
 2138 0cec 30000000 		.word	'0'
 2139 0cf0 FFF77EFB 		BL	SUBB
ARM GAS  stm32eforth.s 			page 41


 2140 0cf4 FFF781FA 		_DOLIT
 2141 0cf8 09000000 		.word	9
 2142 0cfc FFF71EFB 		BL	OVER
 2143 0d00 FFF75EFC 		BL	LESS
 2144 0d04 FFF79DFA 		BL	QBRAN
 2145 0d08 2C0D0000 		.word	DGTQ1-MAPOFFSET
 2146 0d0c FFF775FA 		_DOLIT
 2147 0d10 07000000 		.word	7
 2148 0d14 FFF76CFB 		BL	SUBB
 2149 0d18 FFF7FEFA 		BL	DUPP
 2150 0d1c FFF76DFA 		_DOLIT
 2151 0d20 0A000000 		.word	10
 2152 0d24 FFF74CFC 		BL	LESS
 2153 0d28 FFF724FB 		BL	ORR
 2154              	DGTQ1:
 2155 0d2c FFF7F4FA 	  BL	DUPP
 2156 0d30 FFF7C4FA 		BL	RFROM
 2157 0d34 FFF738FC 		BL	ULESS
 2158 0d38 52F804FB 		_UNNEST
 2159              	
 2160              	//    NUMBER?	( a -- n T | a F )
 2161              	// 	Convert a numberDCB to integer. Push a flag on tos.
 2162              	
 2163 0d3c D80C0000 		.word	_DIGTQ-MAPOFFSET
 2164 0d40 07       	_NUMBQ:	.byte  7
 2165 0d41 4E554D42 		.ascii "NUMBER?"
 2165      45523F
 2166              		.align 2 	
 2167              	NUMBQ:
 2168 0d48 42F804ED 		_NEST
 2169 0d4c FFF7CCFC 		BL	BASE
 2170 0d50 FFF79EFA 		BL	AT
 2171 0d54 FFF7C4FA 		BL	TOR
 2172 0d58 FFF74FFA 		_DOLIT
 2173 0d5c 00000000 		.word	0
 2174 0d60 FFF7ECFA 		BL	OVER
 2175 0d64 FFF77CFC 		BL	COUNT
 2176 0d68 FFF7E8FA 		BL	OVER
 2177 0d6c FFF7A0FA 		BL	CAT
 2178 0d70 FFF743FA 		_DOLIT
 2179 0d74 5F000000 		.word	'_'
 2180 0d78 FFF70AFC 		BL	EQUAL
 2181 0d7c FFF761FA 		BL	QBRAN
 2182 0d80 980D0000 		.word	NUMQ1-MAPOFFSET
 2183 0d84 FFF788FF 		BL	HEX
 2184 0d88 FFF7CEFA 		BL	SWAP
 2185 0d8c FFF756FB 		BL	ONEP
 2186 0d90 FFF7CAFA 		BL	SWAP
 2187 0d94 FFF75AFB 		BL	ONEM
 2188              	NUMQ1:
 2189 0d98 FFF7D0FA 	  BL	OVER
 2190 0d9c FFF788FA 		BL	CAT
 2191 0da0 FFF72BFA 		_DOLIT
 2192 0da4 2D000000 		.word	'-'
 2193 0da8 FFF7F2FB 		BL	EQUAL
 2194 0dac FFF798FA 		BL	TOR
 2195 0db0 FFF7BAFA 		BL	SWAP
ARM GAS  stm32eforth.s 			page 42


 2196 0db4 FFF78CFA 		BL	RAT
 2197 0db8 FFF71AFB 		BL	SUBB
 2198 0dbc FFF7B4FA 		BL	SWAP
 2199 0dc0 FFF786FA 		BL	RAT
 2200 0dc4 FFF70CFB 		BL	PLUS
 2201 0dc8 FFF792FB 		BL	QDUP
 2202 0dcc FFF739FA 		BL	QBRAN
 2203 0dd0 5C0E0000 		.word	NUMQ6-MAPOFFSET
 2204 0dd4 FFF73AFB 		BL	ONEM
 2205 0dd8 FFF782FA 		BL	TOR
 2206              	NUMQ2:
 2207 0ddc FFF79CFA 	  BL	DUPP
 2208 0de0 FFF77EFA 		BL	TOR
 2209 0de4 FFF764FA 		BL	CAT
 2210 0de8 FFF77EFC 		BL	BASE
 2211 0dec FFF750FA 		BL	AT
 2212 0df0 FFF776FF 		BL	DIGTQ
 2213 0df4 FFF725FA 		BL	QBRAN
 2214 0df8 400E0000 		.word	NUMQ4-MAPOFFSET
 2215 0dfc FFF794FA 		BL	SWAP
 2216 0e00 FFF772FC 		BL	BASE
 2217 0e04 FFF744FA 		BL	AT
 2218 0e08 FFF7FAFA 		BL	STAR
 2219 0e0c FFF7E8FA 		BL	PLUS
 2220 0e10 FFF754FA 		BL	RFROM
 2221 0e14 FFF712FB 		BL	ONEP
 2222 0e18 FFF703FA 		BL	DONXT
 2223 0e1c DC0D0000 		.word	NUMQ2-MAPOFFSET
 2224 0e20 FFF756FA 		BL	RAT
 2225 0e24 FFF780FA 		BL	SWAP
 2226 0e28 FFF76EFA 		BL	DROP
 2227 0e2c FFF709FA 		BL	QBRAN
 2228 0e30 380E0000 		.word	NUMQ3-MAPOFFSET
 2229 0e34 FFF79CFB 		BL	NEGAT
 2230              	NUMQ3:
 2231 0e38 FFF776FA 	  BL	SWAP
 2232 0e3c 00F00CB8 		B.W	NUMQ5
 2233              	NUMQ4:
 2234 0e40 FFF73CFA 	  BL	RFROM
 2235 0e44 FFF73AFA 		BL	RFROM
 2236 0e48 FFF766FB 		BL	DDROP
 2237 0e4c FFF764FB 		BL	DDROP
 2238 0e50 FFF7D3F9 		_DOLIT
 2239 0e54 00000000 		.word	0
 2240              	NUMQ5:
 2241 0e58 FFF75EFA 	  BL	DUPP
 2242              	NUMQ6:
 2243 0e5c FFF72EFA 	  BL	RFROM
 2244 0e60 FFF75AFB 		BL	DDROP
 2245 0e64 FFF72AFA 		BL	RFROM
 2246 0e68 FFF73EFC 		BL	BASE
 2247 0e6c FFF706FA 		BL	STORE
 2248 0e70 52F804FB 		_UNNEST
 2249              	
 2250              	// **************************************************************************
 2251              	//  Basic I/O
 2252              	
ARM GAS  stm32eforth.s 			page 43


 2253              	//    KEY	 ( -- c )
 2254              	// 	Wait for and return an input character.
 2255              	
 2256 0e74 400D0000 		.word	_NUMBQ-MAPOFFSET
 2257 0e78 03       	_KEY:	.byte  3
 2258 0e79 4B4559   		.ascii "KEY"
 2259              		.align 2 	
 2260              	KEY:
 2261 0e7c 42F804ED 		_NEST
 2262              	KEY1:
 2263 0e80 FFF790F9 		BL	QRX
 2264 0e84 FFF7DDF9 		BL	QBRAN
 2265 0e88 800E0000 		.word	KEY1-MAPOFFSET
 2266 0e8c 52F804FB 		_UNNEST
 2267              	
 2268              	//    SPACE	( -- )
 2269              	// 	Send the blank character to the output device.
 2270              	
 2271 0e90 780E0000 		.word	_KEY-MAPOFFSET
 2272 0e94 05       	_SPACE:	.byte  5
 2273 0e95 53504143 		.ascii "SPACE"
 2273      45
 2274 0e9a 00BF     		.align 2 	
 2275              	SPACE:
 2276 0e9c 42F804ED 		_NEST
 2277 0ea0 FFF7FCFA 		BL	BLANK
 2278 0ea4 FFF798F9 		BL	EMIT
 2279 0ea8 52F804FB 		_UNNEST
 2280              	
 2281              	//    SPACES	( +n -- )
 2282              	// 	Send n spaces to the output device.
 2283              	
 2284 0eac 940E0000 		.word	_SPACE-MAPOFFSET
 2285 0eb0 06       	_SPACS:	.byte  6
 2286 0eb1 53504143 		.ascii "SPACES"
 2286      4553
 2287 0eb7 00       		.align 2 	
 2288              	SPACS:
 2289 0eb8 42F804ED 		_NEST
 2290 0ebc FFF79DF9 		_DOLIT
 2291 0ec0 00000000 		.word	0
 2292 0ec4 FFF794FB 		BL	MAX
 2293 0ec8 FFF70AFA 		BL	TOR
 2294 0ecc 00F002B8 		B.W	CHAR2
 2295              	CHAR1:
 2296 0ed0 FFF7E4FF 		BL	SPACE
 2297              	CHAR2:
 2298 0ed4 FFF7A5F9 		BL	DONXT
 2299 0ed8 D00E0000 		.word	CHAR1-MAPOFFSET
 2300 0edc 52F804FB 		_UNNEST
 2301              	
 2302              	//    TYPE	( b u -- )
 2303              	// 	Output u characters from b.
 2304              	
 2305 0ee0 B00E0000 		.word	_SPACS-MAPOFFSET
 2306 0ee4 04       	_TYPEE:	.byte	4
 2307 0ee5 54595045 		.ascii "TYPE"
ARM GAS  stm32eforth.s 			page 44


 2308 0ee9 0000BF   		.align 2 	
 2309              	TYPEE:
 2310 0eec 42F804ED 		_NEST
 2311 0ef0 FFF7F6F9 		BL  TOR
 2312 0ef4 00F006B8 		B.W	TYPE2
 2313              	TYPE1:  
 2314 0ef8 FFF7B2FB 		BL  COUNT
 2315 0efc FFF728FD 		BL	TCHAR
 2316 0f00 FFF76AF9 		BL	EMIT
 2317              	TYPE2:  
 2318 0f04 FFF78DF9 		BL  DONXT
 2319 0f08 F80E0000 		.word	TYPE1-MAPOFFSET
 2320 0f0c FFF7FCF9 		BL	DROP
 2321 0f10 52F804FB 		_UNNEST
 2322              	
 2323              	//    CR	  ( -- )
 2324              	// 	Output a carriage return and a line feed.
 2325              	
 2326 0f14 E40E0000 		.word	_TYPEE-MAPOFFSET
 2327 0f18 02       	_CR:	.byte  2
 2328 0f19 4352     		.ascii "CR"
 2329 0f1b 00       		.align 2 	
 2330              	CR:
 2331 0f1c 42F804ED 		_NEST
 2332 0f20 FFF76BF9 		_DOLIT
 2333 0f24 0D000000 		.word	CRR
 2334 0f28 FFF756F9 		BL	EMIT
 2335 0f2c FFF765F9 		_DOLIT
 2336 0f30 0A000000 		.word	LF
 2337 0f34 FFF750F9 		BL	EMIT
 2338 0f38 52F804FB 		_UNNEST
 2339              	
 2340              	//    do_$	( -- a )
 2341              	// 	Return the address of a compiled string.
 2342              	//  adjust return address to skip over it.
 2343              	
 2344              	// 	.word	_CR-MAPOFFSET
 2345              	// _DOSTR	.byte  COMPO+3
 2346              	// 	.ascii "do$$"
 2347              	// 	.align 2 	
 2348              	DOSTR:
 2349 0f3c 42F804ED 		_NEST
 2350 0f40 FFF7BCF9 		BL	RFROM
 2351 0f44 FFF7BAF9 		BL	RFROM			//  b0 set
 2352 0f48 FFF780FA 		BL	ONEM			//  clear b0
 2353 0f4c FFF7E4F9 		BL	DUPP
 2354 0f50 FFF786FB 		BL	COUNT			//  get addr+1 count
 2355 0f54 FFF744FA 		BL	PLUS
 2356 0f58 FFF7EEFC 		BL	ALGND			//  end of string
 2357 0f5c FFF76EFA 		BL	ONEP			//  restore b0
 2358 0f60 FFF7BEF9 		BL	TOR				//  address after string
 2359 0f64 FFF7E0F9 		BL	SWAP			//  count tugged
 2360 0f68 FFF7BAF9 		BL	TOR
 2361 0f6c 52F804FB 		_UNNEST
 2362              	
 2363              	//    $"|	( -- a )
 2364              	// 	Run time routine compiled by _". Return address of a compiled string.
ARM GAS  stm32eforth.s 			page 45


 2365              	
 2366              	// 	.word	_DOSTR-MAPOFFSET
 2367              	// _STRQP	.byte  COMPO+3
 2368              	// 	.ascii "$$""|"
 2369              	// 	.align 2 	
 2370              	STRQP:
 2371 0f70 42F804ED 		_NEST
 2372 0f74 FFF7E2FF 		BL	DOSTR
 2373 0f78 52F804FB 		_UNNEST			// force a call to dostr
 2374              	
 2375              	//    .$	( a -- )
 2376              	// 	Run time routine of ." . Output a compiled string.
 2377              	
 2378              	// 	.word	_STRQP-MAPOFFSET
 2379              	// _DOTST	.byte  COMPO+2
 2380              	// 	.ascii ".$$"
 2381              	// 	.align 2 	
 2382              	DOTST:
 2383 0f7c 42F804ED 		_NEST
 2384 0f80 FFF76EFB 		BL	COUNT
 2385 0f84 FFF7B2FF 		BL	TYPEE
 2386 0f88 52F804FB 		_UNNEST
 2387              	
 2388              	//    ."|	( -- )
 2389              	// 	Run time routine of ." . Output a compiled string.
 2390              	
 2391              	// 	.word	_DOTST-MAPOFFSET
 2392              	// _DOTQP	.byte  COMPO+3
 2393              	// 	.ascii ".""|"
 2394              	// 	.align 2 	
 2395              	DOTQP:
 2396 0f8c 42F804ED 		_NEST
 2397 0f90 FFF7D4FF 		BL	DOSTR
 2398 0f94 FFF7F2FF 		BL	DOTST
 2399 0f98 52F804FB 		_UNNEST
 2400              	
 2401              	//    .R	  ( n +n -- )
 2402              	// 	Display an integer in a field of n columns, right justified.
 2403              	
 2404 0f9c 180F0000 		.word	_CR-MAPOFFSET
 2405 0fa0 02       	_DOTR:	.byte  2
 2406 0fa1 2E52     		.ascii ".R"
 2407 0fa3 00       		.align 2 	
 2408              	DOTR:
 2409 0fa4 42F804ED 		_NEST
 2410 0fa8 FFF79AF9 		BL	TOR
 2411 0fac FFF75CFE 		BL	STRR
 2412 0fb0 FFF784F9 		BL	RFROM
 2413 0fb4 FFF7C2F9 		BL	OVER
 2414 0fb8 FFF71AFA 		BL	SUBB
 2415 0fbc FFF77CFF 		BL	SPACS
 2416 0fc0 FFF794FF 		BL	TYPEE
 2417 0fc4 52F804FB 		_UNNEST
 2418              	
 2419              	//    U.R	 ( u +n -- )
 2420              	// 	Display an unsigned integer in n column, right justified.
 2421              	
ARM GAS  stm32eforth.s 			page 46


 2422 0fc8 A00F0000 		.word	_DOTR-MAPOFFSET
 2423 0fcc 03       	_UDOTR:	.byte  3
 2424 0fcd 552E52   		.ascii "U.R"
 2425              		.align 2 	
 2426              	UDOTR:
 2427 0fd0 42F804ED 		_NEST
 2428 0fd4 FFF784F9 		BL	TOR
 2429 0fd8 FFF7DAFD 		BL	BDIGS
 2430 0fdc FFF70EFE 		BL	DIGS
 2431 0fe0 FFF732FE 		BL	EDIGS
 2432 0fe4 FFF76AF9 		BL	RFROM
 2433 0fe8 FFF7A8F9 		BL	OVER
 2434 0fec FFF700FA 		BL	SUBB
 2435 0ff0 FFF762FF 		BL	SPACS
 2436 0ff4 FFF77AFF 		BL	TYPEE
 2437 0ff8 52F804FB 		_UNNEST
 2438              	
 2439              	//    U.	  ( u -- )
 2440              	// 	Display an unsigned integer in free format.
 2441              	
 2442 0ffc CC0F0000 		.word	_UDOTR-MAPOFFSET
 2443 1000 02       	_UDOT:	.byte  2
 2444 1001 552E     		.ascii "U."
 2445 1003 00       		.align 2 	
 2446              	UDOT:
 2447 1004 42F804ED 		_NEST
 2448 1008 FFF7C2FD 		BL	BDIGS
 2449 100c FFF7F6FD 		BL	DIGS
 2450 1010 FFF71AFE 		BL	EDIGS
 2451 1014 FFF742FF 		BL	SPACE
 2452 1018 FFF768FF 		BL	TYPEE
 2453 101c 52F804FB 		_UNNEST
 2454              	
 2455              	//    .	   ( w -- )
 2456              	// 	Display an integer in free format, preceeded by a space.
 2457              	
 2458 1020 00100000 		.word	_UDOT-MAPOFFSET
 2459 1024 01       	_DOT:	.byte  1
 2460 1025 2E       		.ascii "."
 2461 1026 00BF     		.align 2 	
 2462              	DOT:
 2463 1028 42F804ED 		_NEST
 2464 102c FFF75CFB 		BL	BASE
 2465 1030 FFF72EF9 		BL	AT
 2466 1034 FFF7E1F8 		_DOLIT
 2467 1038 0A000000 		.word	10
 2468 103c FFF7A4F9 		BL	XORR			// ?decimal
 2469 1040 FFF7FFF8 		BL	QBRAN
 2470 1044 50100000 		.word	DOT1-MAPOFFSET
 2471 1048 FFF7DCFF 		BL	UDOT
 2472 104c 52F804FB 		_UNNEST			// no,display unsigned
 2473              	DOT1:
 2474 1050 FFF70AFE 	    BL	STRR
 2475 1054 FFF722FF 		BL	SPACE
 2476 1058 FFF748FF 		BL	TYPEE
 2477 105c 52F804FB 		_UNNEST			// yes, display signed
 2478              	
ARM GAS  stm32eforth.s 			page 47


 2479              	//    ?	   ( a -- )
 2480              	// 	Display the contents in a memory cell.
 2481              	
 2482 1060 24100000 		.word	_DOT-MAPOFFSET
 2483 1064 01       	_QUEST:	.byte  1
 2484 1065 3F       		.ascii "?"
 2485 1066 00BF     		.align 2 	
 2486              	QUEST:
 2487 1068 42F804ED 		_NEST
 2488 106c FFF710F9 		BL	AT
 2489 1070 FFF7DAFF 		BL	DOT
 2490 1074 52F804FB 		_UNNEST
 2491              	
 2492              	// **************************************************************************
 2493              	//  Parsing
 2494              	
 2495              	//    parse	( b u c -- b u delta //  string> )
 2496              	// 	ScanDCB delimited by c. Return found string and its offset.
 2497              	
 2498              	// 	.word	_QUEST-MAPOFFSET
 2499              	// _PARS	.byte  5
 2500              	// 	.ascii "parse"
 2501              	// 	.align 2 	
 2502              	PARS:
 2503 1078 42F804ED 		_NEST
 2504 107c FFF739FB 		BL	TEMP
 2505 1080 FFF7FCF8 		BL	STORE
 2506 1084 FFF75AF9 		BL	OVER
 2507 1088 FFF72AF9 		BL	TOR
 2508 108c FFF744F9 		BL	DUPP
 2509 1090 FFF7D7F8 		BL	QBRAN
 2510 1094 86110000 		.word	PARS8-MAPOFFSET
 2511 1098 FFF7D8F9 		BL	ONEM
 2512 109c FFF729FB 		BL	TEMP
 2513 10a0 FFF7F6F8 		BL	AT
 2514 10a4 FFF7FAF9 		BL	BLANK
 2515 10a8 FFF772FA 		BL	EQUAL
 2516 10ac FFF7C9F8 		BL	QBRAN
 2517 10b0 00110000 		.word	PARS3-MAPOFFSET
 2518 10b4 FFF714F9 		BL	TOR
 2519              	PARS1:
 2520 10b8 FFF7F0F9 	  BL	BLANK
 2521 10bc FFF73EF9 		BL	OVER
 2522 10c0 FFF7F6F8 		BL	CAT			// skip leading blanks 
 2523 10c4 FFF794F9 		BL	SUBB
 2524 10c8 FFF740F9 		BL	ZLESS
 2525 10cc FFF746FA 		BL	INVER
 2526 10d0 FFF7B7F8 		BL	QBRAN
 2527 10d4 FC100000 		.word	PARS2-MAPOFFSET
 2528 10d8 FFF7B0F9 		BL	ONEP
 2529 10dc FFF7A1F8 		BL	DONXT
 2530 10e0 B8100000 		.word	PARS1-MAPOFFSET
 2531 10e4 FFF7EAF8 		BL	RFROM
 2532 10e8 FFF70EF9 		BL	DROP
 2533 10ec FFF785F8 		_DOLIT
 2534 10f0 00000000 		.word	0
 2535 10f4 FFF710F9 		BL	DUPP
ARM GAS  stm32eforth.s 			page 48


 2536 10f8 52F804FB 		_UNNEST
 2537              	PARS2:
 2538 10fc FFF7DEF8 	  BL	RFROM
 2539              	PARS3:
 2540 1100 FFF71CF9 	  BL	OVER
 2541 1104 FFF710F9 		BL	SWAP
 2542 1108 FFF7EAF8 		BL	TOR
 2543              	PARS4:
 2544 110c FFF7F1FA 	  BL	TEMP
 2545 1110 FFF7BEF8 		BL	AT
 2546 1114 FFF712F9 		BL	OVER
 2547 1118 FFF7CAF8 		BL	CAT
 2548 111c FFF768F9 		BL	SUBB			// scan for delimiter
 2549 1120 FFF7E7FA 		BL	TEMP
 2550 1124 FFF7B4F8 		BL	AT
 2551 1128 FFF7B8F9 		BL	BLANK
 2552 112c FFF730FA 		BL	EQUAL
 2553 1130 FFF787F8 		BL	QBRAN
 2554 1134 3C110000 		.word	PARS5-MAPOFFSET
 2555 1138 FFF708F9 		BL	ZLESS
 2556              	PARS5:
 2557 113c FFF781F8 	  BL	QBRAN
 2558 1140 5A110000 		.word	PARS6-MAPOFFSET
 2559 1144 FFF77AF9 		BL	ONEP
 2560 1148 FFF76BF8 		BL	DONXT
 2561 114c 0C110000 		.word	PARS4-MAPOFFSET
 2562 1150 FFF7E2F8 		BL	DUPP
 2563 1154 FFF7C4F8 		BL	TOR
 2564 1158 09E0     		B	PARS7
 2565              	PARS6:
 2566 115a FFF7AFF8 	  BL	RFROM
 2567 115e FFF7D3F8 		BL	DROP
 2568 1162 FFF7D9F8 		BL	DUPP
 2569 1166 FFF769F9 		BL	ONEP
 2570 116a FFF7B9F8 		BL	TOR
 2571              	PARS7:
 2572 116e FFF7E5F8 	  BL	OVER
 2573 1172 FFF73DF9 		BL	SUBB
 2574 1176 FFF7A1F8 		BL	RFROM
 2575 117a FFF79FF8 		BL	RFROM
 2576 117e FFF737F9 		BL	SUBB
 2577 1182 52F804FB 		_UNNEST
 2578              	PARS8:
 2579 1186 FFF7D9F8 	  BL	OVER
 2580 118a FFF797F8 		BL	RFROM
 2581 118e FFF72FF9 		BL	SUBB
 2582 1192 52F804FB 		_UNNEST
 2583              	
 2584              	//    PARSE	( c -- b u //  string> )
 2585              	// 	Scan input stream and return counted string delimited by c.
 2586              	
 2587 1196 64100000 		.word	_QUEST-MAPOFFSET
 2588 119a 05       	_PARSE:	.byte  5
 2589 119b 50415253 		.ascii "PARSE"
 2589      45
 2590              		.align 2 	
 2591              	PARSE:
ARM GAS  stm32eforth.s 			page 49


 2592 11a0 42F804ED 		_NEST
 2593 11a4 FFF79CF8 		BL	TOR
 2594 11a8 FFF736FC 		BL	TIB
 2595 11ac FFF7B6FA 		BL	INN
 2596 11b0 FFF76EF8 		BL	AT
 2597 11b4 FFF714F9 		BL	PLUS			// current input buffer pointer
 2598 11b8 FFF7BAFA 		BL	NTIB
 2599 11bc FFF768F8 		BL	AT
 2600 11c0 FFF7ACFA 		BL	INN
 2601 11c4 FFF764F8 		BL	AT
 2602 11c8 FFF712F9 		BL	SUBB			// remaining count
 2603 11cc FFF776F8 		BL	RFROM
 2604 11d0 FFF752FF 		BL	PARS
 2605 11d4 FFF7A2FA 		BL	INN
 2606 11d8 FFF71EFA 		BL	PSTOR
 2607 11dc 52F804FB 		_UNNEST
 2608              	
 2609              	//    .(	  ( -- )
 2610              	// 	Output following string up to next ) .
 2611              	
 2612 11e0 9A110000 		.word	_PARSE-MAPOFFSET
 2613 11e4 82       	_DOTPR:	.byte  IMEDD+2
 2614 11e5 2E28     		.ascii ".("
 2615 11e7 00       		.align 2 	
 2616              	DOTPR:
 2617 11e8 42F804ED 		_NEST
 2618 11ec FFF705F8 		_DOLIT
 2619 11f0 29000000 		.word	')'
 2620 11f4 FFF7D4FF 		BL	PARSE
 2621 11f8 FFF778FE 		BL	TYPEE
 2622 11fc 52F804FB 		_UNNEST
 2623              	
 2624              	//    (	   ( -- )
 2625              	// 	Ignore following string up to next ) . A comment.
 2626              	
 2627 1200 E4110000 		.word	_DOTPR-MAPOFFSET
 2628 1204 81       	_PAREN:	.byte  IMEDD+1
 2629 1205 28       		.ascii "("
 2630 1206 00BF     		.align 2 	
 2631              	PAREN:
 2632 1208 42F804ED 		_NEST
 2633 120c FEF7F5FF 		_DOLIT
 2634 1210 29000000 		.word	')'
 2635 1214 FFF7C4FF 		BL	PARSE
 2636 1218 FFF77EF9 		BL	DDROP
 2637 121c 52F804FB 		_UNNEST
 2638              	
 2639              	//    \	   ( -- )
 2640              	// 	Ignore following text till the end of line.
 2641              	
 2642 1220 04120000 		.word	_PAREN-MAPOFFSET
 2643 1224 81       	_BKSLA:	.byte  IMEDD+1
 2644 1225 27       		.byte	'\'
 2645 1226 00BF     		.align 2 	
 2646              	BKSLA:
 2647 1228 42F804ED 		_NEST
 2648 122c FFF780FA 		BL	NTIB
ARM GAS  stm32eforth.s 			page 50


 2649 1230 FFF72EF8 		BL	AT
 2650 1234 FFF772FA 		BL	INN
 2651 1238 FFF720F8 		BL	STORE
 2652 123c 52F804FB 		_UNNEST
 2653              	
 2654              	//    CHAR	( -- c )
 2655              	// 	Parse next word and return its first character.
 2656              	
 2657 1240 24120000 		.word	_BKSLA-MAPOFFSET
 2658 1244 04       	_CHAR:	.byte  4
 2659 1245 43484152 		.ascii "CHAR"
 2660 1249 0000BF   		.align 2 	
 2661              	CHAR:
 2662 124c 42F804ED 		_NEST
 2663 1250 FFF724F9 		BL	BLANK
 2664 1254 FFF7A4FF 		BL	PARSE
 2665 1258 FFF756F8 		BL	DROP
 2666 125c FFF728F8 		BL	CAT
 2667 1260 52F804FB 		_UNNEST
 2668              	
 2669              	//    WORD	( c -- a //  string> )
 2670              	// 	Parse a word from input stream and copy it to code dictionary.
 2671              	
 2672 1264 44120000 		.word	_CHAR-MAPOFFSET
 2673 1268 04       	_WORDD:	.byte  4
 2674 1269 574F5244 		.ascii "WORD"
 2675 126d 0000BF   		.align 2 	
 2676              	WORDD:
 2677 1270 42F804ED 		_NEST
 2678 1274 FFF794FF 		BL	PARSE
 2679 1278 FFF7B6FB 		BL	HERE
 2680 127c FFF7FEF8 		BL	CELLP
 2681 1280 FFF728FC 		BL	PACKS
 2682 1284 52F804FB 		_UNNEST
 2683              	
 2684              	//    TOKEN	( -- a //  string> )
 2685              	// 	Parse a word from input stream and copy it to name dictionary.
 2686              	
 2687 1288 68120000 		.word	_WORDD-MAPOFFSET
 2688 128c 05       	_TOKEN:	.byte  5
 2689 128d 544F4B45 		.ascii "TOKEN"
 2689      4E
 2690 1292 00BF     		.align 2 	
 2691              	TOKEN:
 2692 1294 42F804ED 		_NEST
 2693 1298 FFF700F9 		BL	BLANK
 2694 129c FFF7E8FF 		BL	WORDD
 2695 12a0 52F804FB 		_UNNEST
 2696              	
 2697              	// **************************************************************************
 2698              	//  Dictionary search
 2699              	
 2700              	//    NAME>	( na -- ca )
 2701              	// 	Return a code address given a name address.
 2702              	
 2703 12a4 8C120000 		.word	_TOKEN-MAPOFFSET
 2704 12a8 05       	_NAMET:	.byte  5
ARM GAS  stm32eforth.s 			page 51


 2705 12a9 4E414D45 		.ascii "NAME>"
 2705      3E
 2706 12ae 00BF     		.align 2 	
 2707              	NAMET:
 2708 12b0 42F804ED 		_NEST
 2709 12b4 FFF7D4F9 		BL	COUNT
 2710 12b8 FEF79FFF 		_DOLIT
 2711 12bc 1F000000 		.word	0x1F
 2712 12c0 FFF74EF8 		BL	ANDD
 2713 12c4 FFF78CF8 		BL	PLUS
 2714 12c8 FFF736FB 		BL	ALGND
 2715 12cc 52F804FB 		_UNNEST
 2716              	
 2717              	//    SAME?	( a a u -- a a f \ -0+ )
 2718              	// 	Compare u cells in two strings. Return 0 if identical.
 2719              	
 2720 12d0 A8120000 		.word	_NAMET-MAPOFFSET
 2721 12d4 05       	_SAMEQ:	.byte  5
 2722 12d5 53414D45 		.ascii "SAME?"
 2722      3F
 2723 12da 00BF     		.align 2 	
 2724              	SAMEQ:
 2725 12dc 42F804ED 		_NEST
 2726 12e0 FEF7FEFF 		BL	TOR
 2727 12e4 00F022B8 		B.W	SAME2
 2728              	SAME1:
 2729 12e8 FFF728F8 	  BL	OVER
 2730 12ec FEF7F0FF 		BL	RAT
 2731 12f0 FFF7DEF8 		BL	CELLS
 2732 12f4 FFF774F8 		BL	PLUS
 2733 12f8 FEF7CAFF 		BL	AT			// 32/16 mix-up
 2734 12fc FFF71EF8 		BL	OVER
 2735 1300 FEF7E6FF 		BL	RAT
 2736 1304 FFF7D4F8 		BL	CELLS
 2737 1308 FFF76AF8 		BL	PLUS
 2738 130c FEF7C0FF 		BL	AT			// 32/16 mix-up
 2739 1310 FFF76EF8 		BL	SUBB
 2740 1314 FFF7ECF8 		BL	QDUP
 2741 1318 FEF793FF 		BL	QBRAN
 2742 131c 2C130000 		.word	SAME2-MAPOFFSET
 2743 1320 FEF7CCFF 		BL	RFROM
 2744 1324 FEF7F0FF 		BL	DROP
 2745 1328 52F804FB 		_UNNEST			// strings not equal
 2746              	SAME2:
 2747 132c FEF779FF 	  BL	DONXT
 2748 1330 E8120000 		.word	SAME1-MAPOFFSET
 2749 1334 FEF761FF 		_DOLIT
 2750 1338 00000000 		.word	0
 2751 133c 52F804FB 		_UNNEST			// strings equal
 2752              	
 2753              	//    find	( a na -- ca na | a F )
 2754              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2755              	
 2756              	// 	.word	_SAMEQ-MAPOFFSET
 2757              	// _FIND	.byte  4
 2758              	// 	.ascii "find"
 2759              	// 	.align 2 	
ARM GAS  stm32eforth.s 			page 52


 2760              	FIND:
 2761 1340 42F804ED 		_NEST
 2762 1344 FEF7F0FF 		BL	SWAP			//  na a	
 2763 1348 FEF7E6FF 		BL	DUPP			//  na a a
 2764 134c FEF7B0FF 		BL	CAT			//  na a count
 2765 1350 FFF7B6F8 		BL	CELLSL		//  na a count/4
 2766 1354 FFF7CDF9 		BL	TEMP
 2767 1358 FEF790FF 		BL	STORE			//  na a
 2768 135c FEF7DCFF 		BL	DUPP			//  na a a
 2769 1360 FEF796FF 		BL	AT			//  na a word1
 2770 1364 FEF7BCFF 		BL	TOR			//  na a
 2771 1368 FFF788F8 		BL	CELLP			//  na a+4
 2772 136c FEF7DCFF 		BL	SWAP			//  a+4 na
 2773              	FIND1:
 2774 1370 FEF7D2FF 		BL	DUPP			//  a+4 na na
 2775 1374 FEF765FF 		BL	QBRAN
 2776 1378 C0130000 		.word	FIND6-MAPOFFSET	//  end of vocabulary
 2777 137c FEF7CCFF 		BL	DUPP			//  a+4 na na
 2778 1380 FEF786FF 		BL	AT			//  a+4 na name1
 2779 1384 FEF739FF 		_DOLIT
 2780 1388 1FFFFFFF 		.word	MASKK
 2781 138c FEF7E8FF 		BL	ANDD
 2782 1390 FEF79EFF 		BL	RAT			//  a+4 na name1 word1
 2783 1394 FEF7F8FF 		BL	XORR			//  a+4 na ?
 2784 1398 FEF753FF 		BL	QBRAN
 2785 139c AC130000 		.word	FIND2-MAPOFFSET
 2786 13a0 FFF774F8 		BL	CELLM			//  a+4 la
 2787 13a4 FEF774FF 		BL	AT			//  a+4 next_na
 2788 13a8 FFF7E2BF 		B.w	FIND1			//  try next word
 2789              	FIND2:   
 2790 13ac FFF766F8 		BL	CELLP			//  a+4 na+4
 2791 13b0 FFF79FF9 		BL	TEMP
 2792 13b4 FEF76CFF 		BL	AT			//  a+4 na+4 count/4
 2793 13b8 FFF790FF 		BL	SAMEQ			//  a+4 na+4 ? 
 2794              	FIND3:	
 2795 13bc 00F00CB8 		B.w	FIND4
 2796              	FIND6:	
 2797 13c0 FEF77CFF 		BL	RFROM			//  a+4 0 name1 -- , no match
 2798 13c4 FEF7A0FF 		BL	DROP			//  a+4 0
 2799 13c8 FEF7AEFF 		BL	SWAP			//  0 a+4
 2800 13cc FFF75EF8 		BL	CELLM			//  0 a
 2801 13d0 FEF7AAFF 		BL	SWAP			//  a 0 
 2802 13d4 52F804FB 		_UNNEST			//  return without a match
 2803              	FIND4:	
 2804 13d8 FEF733FF 		BL	QBRAN			//  a+4 na+4
 2805 13dc F0130000 		.word	FIND5-MAPOFFSET	//  found a match
 2806 13e0 FFF754F8 		BL	CELLM			//  a+4 na
 2807 13e4 FFF752F8 		BL	CELLM			//  a+4 la
 2808 13e8 FEF752FF 		BL	AT			//  a+4 next_na
 2809 13ec FFF7C0BF 		B.w	FIND1			//  compare next name
 2810              	FIND5:	
 2811 13f0 FEF764FF 		BL	RFROM			//  a+4 na+4 count/4
 2812 13f4 FEF788FF 		BL	DROP			//  a+4 na+4
 2813 13f8 FEF796FF 		BL	SWAP			//  na+4 a+4
 2814 13fc FEF784FF 		BL	DROP			//  na+4
 2815 1400 FFF744F8 		BL	CELLM			//  na
 2816 1404 FEF788FF 		BL	DUPP			//  na na
ARM GAS  stm32eforth.s 			page 53


 2817 1408 FFF752FF 		BL	NAMET			//  na ca
 2818 140c FEF78CFF 		BL	SWAP			//  ca na
 2819 1410 52F804FB 		_UNNEST			//  return with a match
 2820              	
 2821              	//    NAME?	( a -- ca na | a F )
 2822              	// 	Search all context vocabularies for a string.
 2823              	
 2824 1414 D4120000 		.word	_SAMEQ-MAPOFFSET
 2825 1418 05       	_NAMEQ:	.byte  5
 2826 1419 4E414D45 		.ascii "NAME?"
 2826      3F
 2827 141e 00BF     		.align 2 	
 2828              	NAMEQ:
 2829 1420 42F804ED 		_NEST
 2830 1424 FFF7A4F9 		BL	CNTXT
 2831 1428 FEF732FF 		BL	AT
 2832 142c FFF788FF 		BL	FIND
 2833 1430 52F804FB 		_UNNEST
 2834              	
 2835              	// **************************************************************************
 2836              	//  Terminal input
 2837              	
 2838              	//    	  ( bot eot cur -- bot eot cur )
 2839              	// 	Backup the cursor by one character.
 2840              	
 2841              	// 	.word	_NAMEQ-MAPOFFSET
 2842              	// _BKSP	.byte  2
 2843              	// 	.ascii "^H"
 2844              	// 	.align 2 	
 2845              	BKSP:
 2846 1434 42F804ED 		_NEST
 2847 1438 FEF752FF 		BL	TOR
 2848 143c FEF77EFF 		BL	OVER
 2849 1440 FEF73CFF 		BL	RFROM
 2850 1444 FEF770FF 		BL	SWAP
 2851 1448 FEF778FF 		BL	OVER
 2852 144c FEF79CFF 		BL	XORR
 2853 1450 FEF7F7FE 		BL	QBRAN
 2854 1454 7C140000 		.word	BACK1-MAPOFFSET
 2855 1458 FEF7CFFE 		_DOLIT
 2856 145c 08000000 		.word	BKSPP
 2857 1460 FEF7BAFE 		BL	TECHO
 2858              	// 	BL	ATEXE
 2859 1464 FEF7F2FF 		BL	ONEM
 2860 1468 FFF718F8 		BL	BLANK
 2861 146c FEF7B4FE 		BL	TECHO
 2862              	// 	BL	ATEXE
 2863 1470 FEF7C3FE 		_DOLIT
 2864 1474 08000000 		.word	BKSPP
 2865 1478 FEF7AEFE 		BL	TECHO
 2866              	// 	BL	ATEXE
 2867              	BACK1:
 2868 147c 52F804FB 		  _UNNEST
 2869              	
 2870              	//    TAP	 ( bot eot cur c -- bot eot cur )
 2871              	// 	Accept and echo the key stroke and bump the cursor.
 2872              	
ARM GAS  stm32eforth.s 			page 54


 2873              	// 	.word	_BKSP-MAPOFFSET
 2874              	// _TAP	.byte  3
 2875              	// 	.ascii "TAP"
 2876              	// 	.align 2 	
 2877              	TAP:
 2878 1480 42F804ED 		_NEST
 2879 1484 FEF748FF 		BL	DUPP
 2880 1488 FEF7A6FE 		BL	TECHO
 2881              	// 	BL	ATEXE
 2882 148c FEF756FF 		BL	OVER
 2883 1490 FEF704FF 		BL	CSTOR
 2884 1494 FEF7D2FF 		BL	ONEP
 2885 1498 52F804FB 		_UNNEST
 2886              	
 2887              	//    kTAP	( bot eot cur c -- bot eot cur )
 2888              	// 	Process a key stroke, CR or backspace.
 2889              	
 2890              	// 	.word	_TAP-MAPOFFSET
 2891              	// _KTAP	.byte  4
 2892              	// 	.ascii "kTAP"
 2893              	// 	.align 2 	
 2894              	KTAP:
 2895              	TTAP:
 2896 149c 42F804ED 		_NEST
 2897 14a0 FEF73AFF 		BL	DUPP
 2898 14a4 FEF7A9FE 		_DOLIT
 2899 14a8 0D000000 		.word	CRR
 2900 14ac FEF76CFF 		BL	XORR
 2901 14b0 FEF7C7FE 		BL	QBRAN
 2902 14b4 E4140000 		.word	KTAP2-MAPOFFSET
 2903 14b8 FEF79FFE 		_DOLIT
 2904 14bc 08000000 		.word	BKSPP
 2905 14c0 FEF762FF 		BL	XORR
 2906 14c4 FEF7BDFE 		BL	QBRAN
 2907 14c8 DC140000 		.word	KTAP1-MAPOFFSET
 2908 14cc FEF7E6FF 		BL	BLANK
 2909 14d0 FFF7D6FF 		BL	TAP
 2910 14d4 52F804FB 		_UNNEST
 2911 14d8 00000000 		.word	0			// patch
 2912              	KTAP1:
 2913 14dc FFF7AAFF 	  BL	BKSP
 2914 14e0 52F804FB 		_UNNEST
 2915              	KTAP2:
 2916 14e4 FEF710FF 	  BL	DROP
 2917 14e8 FEF71EFF 		BL	SWAP
 2918 14ec FEF70CFF 		BL	DROP
 2919 14f0 FEF712FF 		BL	DUPP
 2920 14f4 52F804FB 		_UNNEST
 2921              	
 2922              	//    ACCEPT	( b u -- b u )
 2923              	// 	Accept characters to input buffer. Return with actual count.
 2924              	
 2925 14f8 18140000 		.word	_NAMEQ-MAPOFFSET
 2926 14fc 06       	_ACCEP:	.byte  6
 2927 14fd 41434345 		.ascii "ACCEPT"
 2927      5054
 2928 1503 00       		.align 2 	
ARM GAS  stm32eforth.s 			page 55


 2929              	ACCEP:
 2930 1504 42F804ED 		_NEST
 2931 1508 FEF718FF 		BL	OVER
 2932 150c FEF768FF 		BL	PLUS
 2933 1510 FEF714FF 		BL	OVER
 2934              	ACCP1:
 2935 1514 FFF70AF8 	  BL	DDUP
 2936 1518 FEF736FF 		BL	XORR
 2937 151c FEF791FE 		BL	QBRAN
 2938 1520 50150000 		.word	ACCP4-MAPOFFSET
 2939 1524 FFF7AAFC 		BL	KEY
 2940 1528 FEF7F6FE 		BL	DUPP
 2941 152c FEF7B6FF 		BL	BLANK
 2942 1530 FEF763FE 		_DOLIT
 2943 1534 7F000000 		.word	127
 2944 1538 FFF744F9 		BL	WITHI
 2945 153c FEF781FE 		BL	QBRAN
 2946 1540 4A150000 		.word	ACCP2-MAPOFFSET
 2947 1544 FFF79CFF 		BL	TAP
 2948 1548 01E0     		B	ACCP3
 2949              	ACCP2:
 2950 154a FFF7A7FF 	  BL	KTAP
 2951              	// 	BL	ATEXE
 2952              	ACCP3:	  
 2953 154e E1E7     		B	ACCP1
 2954              	ACCP4:
 2955 1550 FEF7DAFE 	  BL	DROP
 2956 1554 FEF7F2FE 		BL	OVER
 2957 1558 FEF74AFF 		BL	SUBB
 2958 155c 52F804FB 		_UNNEST
 2959              	
 2960              	//    QUERY	( -- )
 2961              	// 	Accept input stream to terminal input buffer.
 2962              	
 2963 1560 FC140000 		.word	_ACCEP-MAPOFFSET
 2964 1564 05       	_QUERY:	.byte  5
 2965 1565 51554552 		.ascii "QUERY"
 2965      59
 2966 156a 00BF     		.align 2 	
 2967              	QUERY:
 2968 156c 42F804ED 		_NEST
 2969 1570 FFF752FA 		BL	TIB
 2970 1574 FEF741FE 		_DOLIT
 2971 1578 50000000 		.word	80
 2972 157c FFF7C2FF 		BL	ACCEP
 2973 1580 FFF7D6F8 		BL	NTIB
 2974 1584 FEF77AFE 		BL	STORE
 2975 1588 FEF7BEFE 		BL	DROP
 2976 158c FEF735FE 		_DOLIT
 2977 1590 00000000 		.word	0
 2978 1594 FFF7C2F8 		BL	INN
 2979 1598 FEF770FE 		BL	STORE
 2980 159c 52F804FB 		_UNNEST
 2981              	
 2982              	// **************************************************************************
 2983              	//  Error handling
 2984              	
ARM GAS  stm32eforth.s 			page 56


 2985              	//    ABORT	( a -- )
 2986              	// 	Reset data stack and jump to QUIT.
 2987              	
 2988 15a0 64150000 		.word	_QUERY-MAPOFFSET
 2989 15a4 05       	_ABORT:	.byte  5
 2990 15a5 41424F52 		.ascii "ABORT"
 2990      54
 2991 15aa 00BF     		.align 2 	
 2992              	ABORT:
 2993 15ac 42F804ED 		_NEST
 2994 15b0 FFF774FC 		BL	SPACE
 2995 15b4 FFF754F8 		BL	COUNT
 2996 15b8 FFF798FC 		BL	TYPEE
 2997 15bc FEF71DFE 		_DOLIT
 2998 15c0 3F000000 		.word	0X3F
 2999 15c4 FEF708FE 		BL	EMIT
 3000 15c8 FFF7A8FC 		BL	CR
 3001 15cc 00F0B2F8 		BL	PRESE
 3002 15d0 00F0C0B8 		B.W	QUIT
 3003              	
 3004              	//    _abort"	( f -- )
 3005              	// 	Run time routine of ABORT" . Abort with a message.
 3006              	
 3007              	// 	.word	_ABORT-MAPOFFSET
 3008              	// _ABORQ	.byte  COMPO+6
 3009              	// 	.ascii "abort\""
 3010              	// 	.align 2 	
 3011              	ABORQ:
 3012 15d4 42F804ED 		_NEST
 3013 15d8 FEF733FE 		BL	QBRAN
 3014 15dc F4150000 		.word	ABOR1-MAPOFFSET	// text flag
 3015 15e0 FFF7ACFC 		BL	DOSTR
 3016 15e4 FFF73CF8 		BL	COUNT
 3017 15e8 FFF780FC 		BL	TYPEE
 3018 15ec FFF796FC 		BL	CR
 3019 15f0 00F0B0B8 		B.W	QUIT
 3020              	ABOR1:
 3021 15f4 FFF7A2FC 	  BL	DOSTR
 3022 15f8 FEF786FE 		BL	DROP
 3023 15fc 52F804FB 		_UNNEST			// drop error
 3024              	
 3025              	// **************************************************************************
 3026              	//  The text interpreter
 3027              	
 3028              	//    $INTERPRET  ( a -- )
 3029              	// 	Interpret a word. If failed, try to convert it to an integer.
 3030              	
 3031 1600 A4150000 		.word	_ABORT-MAPOFFSET
 3032 1604 0A       	_INTER:	.byte  10
 3033 1605 2424494E 		.ascii "$$INTERPRET"
 3033      54455250 
 3033      524554
 3034              		.align 2 	
 3035              	INTER:
 3036 1610 42F804ED 		_NEST
 3037 1614 FFF704FF 		BL	NAMEQ
 3038 1618 FEF76AFF 		BL	QDUP	// ?defined
ARM GAS  stm32eforth.s 			page 57


 3039 161c FEF711FE 		BL	QBRAN
 3040 1620 50160000 		.word	INTE1-MAPOFFSET
 3041 1624 FEF734FE 		BL	AT
 3042 1628 FEF7E7FD 		_DOLIT
 3043 162c 40000000 		.word	COMPO
 3044 1630 FEF796FE 		BL	ANDD	// ?compile only lexicon bits
 3045 1634 FFF7CEFF 		BL	ABORQ
 3046 1638 0D       		.byte	13
 3047 1639 20636F6D 		.ascii " compile only"
 3047      70696C65 
 3047      206F6E6C 
 3047      79
 3048 1646 00BF     		.align 2 	
 3049 1648 FEF7E6FD 		BL	EXECU
 3050 164c 52F804FB 		_UNNEST			// execute defined word
 3051              	INTE1:
 3052 1650 FFF77AFB 	  BL	NUMBQ
 3053 1654 FEF7F5FD 		BL	QBRAN
 3054 1658 60160000 		.word	INTE2-MAPOFFSET
 3055 165c 52F804FB 		_UNNEST
 3056              	INTE2:
 3057 1660 FFF7A4BF 	  B.W	ABORT	// error
 3058              	
 3059              	//    [	   ( -- )
 3060              	// 	Start the text interpreter.
 3061              	
 3062 1664 04160000 		.word	_INTER-MAPOFFSET
 3063 1668 81       	_LBRAC:	.byte  IMEDD+1
 3064 1669 5B       		.ascii "["
 3065 166a 00BF     		.align 2 	
 3066              	LBRAC:
 3067 166c 42F804ED 		_NEST
 3068 1670 FEF7C3FD 		_DOLIT
 3069 1674 10160000 		.word	INTER-MAPOFFSET
 3070 1678 FFF764F8 		BL	TEVAL
 3071 167c FEF7FEFD 		BL	STORE
 3072 1680 52F804FB 		_UNNEST
 3073              	
 3074              	//    .OK	 ( -- )
 3075              	// 	Display "ok" only while interpreting.
 3076              	
 3077 1684 68160000 		.word	_LBRAC-MAPOFFSET
 3078 1688 03       	_DOTOK:	.byte  3
 3079 1689 2E4F4B   		.ascii ".OK"
 3080              		.align 2 	
 3081              	DOTOK:
 3082 168c 42F804ED 		_NEST
 3083 1690 FEF7B3FD 		_DOLIT
 3084 1694 10160000 		.word	INTER-MAPOFFSET
 3085 1698 FFF754F8 		BL	TEVAL
 3086 169c FEF7F8FD 		BL	AT
 3087 16a0 FEF776FF 		BL	EQUAL
 3088 16a4 FEF7CDFD 		BL	QBRAN
 3089 16a8 B4160000 		.word	DOTO1-MAPOFFSET
 3090 16ac FFF76EFC 		BL	DOTQP
 3091 16b0 03       		.byte	3
 3092 16b1 206F6B   		.ascii " ok"
ARM GAS  stm32eforth.s 			page 58


 3093              	DOTO1:
 3094 16b4 FFF732FC 		BL	CR
 3095 16b8 52F804FB 		_UNNEST
 3096              	
 3097              	//    ?STACK	( -- )
 3098              	// 	Abort if the data stack underflows.
 3099              	
 3100 16bc 88160000 		.word	_DOTOK-MAPOFFSET
 3101 16c0 06       	_QSTAC:	.byte  6
 3102 16c1 3F535441 		.ascii "?STACK"
 3102      434B
 3103 16c7 00       		.align 2 	
 3104              	QSTAC:
 3105 16c8 42F804ED 		_NEST
 3106 16cc FFF766F9 		BL	DEPTH
 3107 16d0 FEF73CFE 		BL	ZLESS	// check only for underflow
 3108 16d4 FFF77EFF 		BL	ABORQ
 3109 16d8 0A       		.byte	10
 3110 16d9 20756E64 		.ascii " underflow"
 3110      6572666C 
 3110      6F77
 3111 16e3 00       		.align 2 	
 3112 16e4 52F804FB 		_UNNEST
 3113              	
 3114              	//    EVAL	( -- )
 3115              	// 	Interpret the input stream.
 3116              	
 3117 16e8 C0160000 		.word	_QSTAC-MAPOFFSET
 3118 16ec 04       	_EVAL:	.byte  4
 3119 16ed 4556414C 		.ascii "EVAL"
 3120 16f1 0000BF   		.align 2 	
 3121              	EVAL:
 3122 16f4 42F804ED 		_NEST
 3123              	EVAL1:
 3124 16f8 FFF7CCFD 	    BL	TOKEN
 3125 16fc FEF70CFE 		BL	DUPP
 3126 1700 FEF7D6FD 		BL	CAT	// ?input stream empty
 3127 1704 FEF79DFD 		BL	QBRAN
 3128 1708 1C170000 		.word	EVAL2-MAPOFFSET
 3129 170c FFF71AF8 		BL	TEVAL
 3130 1710 FFF78EF9 		BL	ATEXE
 3131 1714 FFF7D8FF 		BL	QSTAC	// evaluate input, check stack
 3132 1718 FFF7EEBF 		B.W	EVAL1
 3133              	EVAL2:
 3134 171c FEF7F4FD 	  BL	DROP
 3135 1720 FFF7B4FF 		BL	DOTOK
 3136 1724 52F804FB 		_UNNEST	// prompt
 3137              	
 3138              	//    PRESET	( -- )
 3139              	// 	Reset data stack pointer and the terminal input buffer.
 3140              	
 3141 1728 EC160000 		.word	_EVAL-MAPOFFSET
 3142 172c 06       	_PRESE:	.byte  6
 3143 172d 50524553 		.ascii "PRESET"
 3143      4554
 3144 1733 00       		.align 2 	
 3145              	PRESE:
ARM GAS  stm32eforth.s 			page 59


 3146 1734 42F804ED 		_NEST
 3147 1738 44F60071 		MOVW	R1,#0x4F00		//  init SP
 3148 173c C2F20001 	 	MOVT	R1,#0X2000
 3149 1740 40F20000 		MOVW	R0,#0			//  init TOS ???
 3150 1744 52F804FB 		_UNNEST
 3151              	
 3152              	//    QUIT	( -- )
 3153              	// 	Reset return stack pointer and start text interpreter.
 3154              	
 3155 1748 2C170000 		.word	_PRESE-MAPOFFSET
 3156 174c 04       	_QUIT:	.byte  4
 3157 174d 51554954 		.ascii "QUIT"
 3158 1751 0000BF   		.align 2 	
 3159              	QUIT:
 3160 1754 42F804ED 		_NEST
 3161 1758 44F68072 		MOVW	R2,#0x4F80  /* RESET RSTACK */
 3162 175c C2F20002 	 	MOVT	R2,#0x2000
 3163              	QUIT1:
 3164 1760 FFF784FF 	  BL	LBRAC			// start interpretation
 3165              	QUIT2:
 3166 1764 FFF702FF 	  BL	QUERY			// get input
 3167 1768 FFF7C4FF 		BL	EVAL
 3168 176c FEF775FD 		BL	BRAN
 3169 1770 64170000 		.word	QUIT2-MAPOFFSET	// continue till error
 3170              	
 3171              	/***************************
 3172              	//  Flash memory interface
 3173              	***************************/
 3174              	UNLOCK:	//  unlock flash memory	
 3175 1774 DFF8440A 		ldr	r0, =FLASH_BASE_ADR
 3176 1778 DFF8444A 		ldr	r4, =FLASH_KEY1
 3177 177c 4460     		str	r4, [r0, #FLASH_KEYR]
 3178 177e DFF8444A 		ldr	r4, =FLASH_KEY2
 3179 1782 4460     		str	r4, [r0, #FLASH_KEYR]
 3180              		/* unlock option registers */
 3181 1784 DFF8384A 		ldr	r4, =FLASH_KEY1
 3182 1788 8460     		str	r4, [r0, #FLASH_OPTKEYR]
 3183 178a DFF8384A 		ldr	r4, =FLASH_KEY2
 3184 178e 8460     		str	r4, [r0, #FLASH_OPTKEYR]
 3185 1790 7047     		_NEXT
 3186              	WAIT_BSY:
 3187 1792 DFF8280A 		ldr	r0,=FLASH_BASE_ADR
 3188              	WAIT1:
 3189 1796 C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 3190 1798 14F00104 		ands	r4, #0x1	//  BSY
 3191 179c FBD1     		bne	WAIT1
 3192 179e 7047     		_NEXT
 3193              	
 3194              	//    ERASE_SECTOR	   ( sector -- )
 3195              	// 	  Erase one sector of flash memory.  Sector=0 to 11
 3196              	
 3197 17a0 4C170000 		.word	_QUIT-MAPOFFSET
 3198 17a4 0C       	_ESECT:	.byte  12
 3199 17a5 45524153 		.ascii "ERASE_SECTOR"
 3199      455F5345 
 3199      43544F52 
 3200 17b1 0000BF   		.align 2 	
ARM GAS  stm32eforth.s 			page 60


 3201              	
 3202              	ESECT: 	//  sector --
 3203 17b4 42F804ED 		_NEST
 3204 17b8 FFF7EBFF 		bl	WAIT_BSY
 3205 17bc 0469     		ldr	r4,[r0, #FLASH_CR]	
 3206 17be 24F07804 		bic	r4,r4,#0x78	//  clear SNB
 3207 17c2 4FEAC505 		lsl	R5,R5,#3		//  align sector #
 3208 17c6 44EA0504 		orr	r4,r4,r5		//  put in sector #
 3209 17ca 44F48034 		orr	R4,R4,#0x10000	//  set STRT bit
 3210 17ce 44F40074 		orr	R4,R4,#0x200	//  PSIZE=32
 3211 17d2 44F00204 		orr	R4,R4,#2		//  set SER bit, enable erase
 3212 17d6 0461     		str	r4,[r0, #0x10]	//  start erasing
 3213              	// 	bl	WAIT_BSY
 3214 17d8 51F8045B 		_POP
 3215 17dc 52F804FB 		_UNNEST
 3216              	
 3217              	//    I!	   ( data address -- )
 3218              	// 	   Write one word into flash memory
 3219              	
 3220 17e0 A4170000 		.word	_ESECT-MAPOFFSET
 3221 17e4 02       	_ISTOR:	.byte  2
 3222 17e5 4921     		.ascii "I!"
 3223 17e7 00       		.align 2 	
 3224              	
 3225              	ISTOR:	//  data address --
 3226 17e8 42F804ED 		_NEST
 3227 17ec FFF7D1FF 		bl	WAIT_BSY
 3228 17f0 0469     		ldr	r4, [r0, #0x10]	//  FLASH_CR
 3229 17f2 44F00104 		orr	r4,R4,#0x1		//  PG
 3230 17f6 0461     		str	r4, [r0, #0x10]	//  enable programming
 3231 17f8 FEF740FD 		bl	STORE
 3232 17fc FFF7C9FF 		bl	WAIT_BSY
 3233 1800 0469     		ldr	r4, [r0, #0x10]	//  FLASH_CR
 3234 1802 24F00104 		bic	r4,R4,#0x1		//  PG
 3235 1806 0461     		str	r4, [r0, #0x10]	//  disable programming
 3236 1808 52F804FB 		_UNNEST
 3237              	
 3238              	//    TURNKEY	( -- )
 3239              	// 	Copy dictionary from RAM to flash.
 3240              	
 3241 180c E4170000 		.word	_ISTOR-MAPOFFSET
 3242 1810 07       	_TURN:	.byte   7
 3243 1811 5455524E 		.ascii "TURNKEY"
 3243      4B4559
 3244              		.align 2 
 3245 1818 42F804ED 	TURN:	_NEST
 3246 181c FEF7EDFC 		_DOLIT			//  save user area
 3247 1820 00FF0000 		.word	0XFF00
 3248 1824 FEF7E9FC 		_DOLIT
 3249 1828 C0000000 		.word	0xC0			//  to boot array
 3250 182c FEF7E5FC 		_DOLIT
 3251 1830 40000000 		.word	0x40
 3252 1834 FFF720F9 		BL	MOVE
 3253 1838 FEF7DFFC 		_DOLIT
 3254 183c 00000000 		.word	0
 3255 1840 FEF7DBFC 		_DOLIT
 3256 1844 00000008 		.word	0x8000000
ARM GAS  stm32eforth.s 			page 61


 3257 1848 FEF79CFF 		BL	CPP
 3258 184c FEF720FD 		BL	AT
 3259 1850 FEF736FE 		BL	CELLSL
 3260 1854 FEF744FD 		BL	TOR
 3261              	TURN1:
 3262 1858 FEF770FD 		BL	OVER
 3263 185c FEF718FD 		BL	AT
 3264 1860 FEF76CFD 		BL	OVER
 3265 1864 FFF7C0FF 		BL	ISTOR
 3266 1868 FEF75EFD 		BL	SWAP
 3267 186c FEF706FE 		BL	CELLP
 3268 1870 FEF75AFD 		BL	SWAP
 3269 1874 FEF702FE 		BL	CELLP
 3270 1878 FEF7D3FC 		BL	DONXT
 3271 187c 58180000 		.word	TURN1-MAPOFFSET
 3272 1880 FEF74AFE 		BL	DDROP
 3273 1884 52F804FB 		_UNNEST
 3274              	
 3275              	// **************************************************************************
 3276              	//  The compiler
 3277              	
 3278              	//    '	   ( -- ca )
 3279              	// 	Search context vocabularies for the next word in input stream.
 3280              	
 3281 1888 10180000 		.word	_TURN-MAPOFFSET
 3282 188c 01       	_TICK:	.byte  1
 3283 188d 27       		.ascii "'"
 3284 188e 00BF     		.align 2 	
 3285              	TICK:
 3286 1890 42F804ED 		_NEST
 3287 1894 FFF7FEFC 		BL	TOKEN
 3288 1898 FFF7C2FD 		BL	NAMEQ	// ?defined
 3289 189c FEF7D1FC 		BL	QBRAN
 3290 18a0 A8180000 		.word	TICK1-MAPOFFSET
 3291 18a4 52F804FB 		_UNNEST	// yes, push code address
 3292 18a8 FFF780BE 	TICK1:	B.W	ABORT	// no, error
 3293              	
 3294              	//    ALLOT	( n -- )
 3295              	// 	Allocate n bytes to the ram area.
 3296              	
 3297 18ac 8C180000 		.word	_TICK-MAPOFFSET
 3298 18b0 05       	_ALLOT:	.byte  5
 3299 18b1 414C4C4F 		.ascii "ALLOT"
 3299      54
 3300 18b6 00BF     		.align 2 	
 3301              	ALLOT:
 3302 18b8 42F804ED 		_NEST
 3303 18bc FEF762FF 		BL	CPP
 3304 18c0 FEF7AAFE 		BL	PSTOR
 3305 18c4 52F804FB 		_UNNEST			// adjust code pointer
 3306              	
 3307              	//    ,	   ( w -- )
 3308              	// 	Compile an integer into the code dictionary.
 3309              	
 3310 18c8 B0180000 		.word	_ALLOT-MAPOFFSET
 3311 18cc 012C     	_COMMA:	.byte  1,','
 3312 18ce 00BF     		.align 2 	
ARM GAS  stm32eforth.s 			page 62


 3313              	COMMA:
 3314 18d0 42F804ED 		_NEST
 3315 18d4 FFF788F8 		BL	HERE
 3316 18d8 FEF71EFD 		BL	DUPP
 3317 18dc FEF7CEFD 		BL	CELLP	// cell boundary
 3318 18e0 FEF750FF 		BL	CPP
 3319 18e4 FEF7CAFC 		BL	STORE
 3320 18e8 FEF7C8FC 		BL	STORE
 3321 18ec 52F804FB 		_UNNEST	// adjust code pointer, compile
 3322              		.align 2 
 3323              	//    [COMPILE]   ( -- //  string> )
 3324              	// 	Compile the next immediate word into code dictionary.
 3325              	
 3326 18f0 CC180000 		.word	_COMMA-MAPOFFSET
 3327 18f4 89       	_BCOMP:	.byte  IMEDD+9
 3328 18f5 5B434F4D 		.ascii "[COMPILE]"
 3328      50494C45 
 3328      5D
 3329 18fe 00BF     		.align 2 	
 3330              	BCOMP:
 3331 1900 42F804ED 		_NEST
 3332 1904 FFF7C4FF 		BL	TICK
 3333 1908 FFF7E2FF 		BL	COMMA
 3334 190c 52F804FB 		_UNNEST
 3335              	
 3336              	//    COMPILE	( -- )
 3337              	// 	Compile the next address in colon list to code dictionary.
 3338              	
 3339 1910 F4180000 		.word	_BCOMP-MAPOFFSET
 3340 1914 47       	_COMPI:	.byte  COMPO+7
 3341 1915 434F4D50 		.ascii "COMPILE"
 3341      494C45
 3342              		.align 2 	
 3343              	COMPI:
 3344 191c 42F804ED 		_NEST
 3345 1920 FEF7CCFC 		BL	RFROM
 3346 1924 25F00105 		BIC	R5,R5,#1
 3347 1928 FEF7F6FC 		BL	DUPP
 3348 192c FEF7B0FC 		BL	AT
 3349 1930 00F0DAF9 		BL	CALLC			// compile BL instruction
 3350 1934 FEF7A2FD 		BL	CELLP
 3351 1938 45F00105 		ORR	R5,R5,#1
 3352 193c FEF7D0FC 		BL	TOR
 3353 1940 52F804FB 		_UNNEST			// adjust return address
 3354              	
 3355              	//    LITERAL	( w -- )
 3356              	// 	Compile tos to code dictionary as an integer literal.
 3357              	
 3358 1944 14190000 		.word	_COMPI-MAPOFFSET
 3359 1948 87       	_LITER:	.byte  IMEDD+7
 3360 1949 4C495445 		.ascii "LITERAL"
 3360      52414C
 3361              		.align 2 	
 3362              	LITER:
 3363 1950 42F804ED 		_NEST
 3364 1954 FFF7E2FF 		BL	COMPI
 3365 1958 FA010000 		.word	DOLIT-MAPOFFSET
ARM GAS  stm32eforth.s 			page 63


 3366 195c FFF7B8FF 		BL	COMMA
 3367 1960 52F804FB 		_UNNEST
 3368              	
 3369              	//    $,"	( -- )
 3370              	// 	Compile a literal string up to next " .
 3371              	
 3372              	// 	.word	_LITER-MAPOFFSET
 3373              	// _STRCQ	.byte  3
 3374              	// 	.ascii "$$,"""
 3375              	// 	.align 2 	
 3376              	STRCQ:
 3377 1964 42F804ED 		_NEST
 3378 1968 FEF747FC 		_DOLIT
 3379 196c FCFFFFFF 		.word	-4
 3380 1970 FEF708FF 		BL	CPP
 3381 1974 FEF750FE 		BL	PSTOR
 3382 1978 FEF73FFC 		_DOLIT
 3383 197c 22000000 		.word	'\"'
 3384 1980 FFF776FC 		BL	WORDD			// moveDCB to code dictionary
 3385 1984 FEF76CFE 		BL	COUNT
 3386 1988 FEF72AFD 		BL	PLUS
 3387 198c FEF7D4FF 		BL	ALGND			// calculate aligned end of string
 3388 1990 FEF7F8FE 		BL	CPP
 3389 1994 FEF772FC 		BL	STORE
 3390 1998 52F804FB 		_UNNEST 			// adjust the code pointer
 3391              	
 3392              	// **************************************************************************
 3393              	//  Structures
 3394              	
 3395              	//    FOR	 ( -- a )
 3396              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3397              	
 3398 199c 48190000 		.word	_LITER-MAPOFFSET
 3399 19a0 83       	_FOR:	.byte  IMEDD+3
 3400 19a1 464F52   		.ascii "FOR"
 3401              		.align 2 	
 3402              	FOR:
 3403 19a4 42F804ED 		_NEST
 3404 19a8 FFF7B8FF 		BL	COMPI
 3405 19ac E0020000 		.word	TOR-MAPOFFSET
 3406 19b0 FFF71AF8 		BL	HERE
 3407 19b4 52F804FB 		_UNNEST
 3408              	
 3409              	//    BEGIN	( -- a )
 3410              	// 	Start an infinite or indefinite loop structure.
 3411              	
 3412 19b8 A0190000 		.word	_FOR-MAPOFFSET
 3413 19bc 85       	_BEGIN:	.byte  IMEDD+5
 3414 19bd 42454749 		.ascii "BEGIN"
 3414      4E
 3415 19c2 00BF     		.align 2 	
 3416              	BEGIN:
 3417 19c4 42F804ED 		_NEST
 3418 19c8 FFF70EF8 		BL	HERE
 3419 19cc 52F804FB 		_UNNEST
 3420              		.align 2 
 3421              	//    NEXT	( a -- )
ARM GAS  stm32eforth.s 			page 64


 3422              	// 	Terminate a FOR-NEXT loop structure.
 3423              	
 3424 19d0 BC190000 		.word	_BEGIN-MAPOFFSET
 3425 19d4 84       	_NEXT:	.byte  IMEDD+4
 3426 19d5 4E455854 		.ascii "NEXT"
 3427 19d9 0000BF   		.align 2 	
 3428              	NEXT:
 3429 19dc 42F804ED 		_NEST
 3430 19e0 FFF79CFF 		BL	COMPI
 3431 19e4 22020000 		.word	DONXT-MAPOFFSET
 3432 19e8 FFF772FF 		BL	COMMA
 3433 19ec 52F804FB 		_UNNEST
 3434              	
 3435              	//    UNTIL	( a -- )
 3436              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3437              	
 3438 19f0 D4190000 		.word	_NEXT-MAPOFFSET
 3439 19f4 85       	_UNTIL:	.byte  IMEDD+5
 3440 19f5 554E5449 		.ascii "UNTIL"
 3440      4C
 3441 19fa 00BF     		.align 2 	
 3442              	UNTIL:
 3443 19fc 42F804ED 		_NEST
 3444 1a00 FFF78CFF 		BL	COMPI
 3445 1a04 42020000 		.word	QBRAN-MAPOFFSET
 3446 1a08 FFF762FF 		BL	COMMA
 3447 1a0c 52F804FB 		_UNNEST
 3448              	
 3449              	//    AGAIN	( a -- )
 3450              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3451              	
 3452 1a10 F4190000 		.word	_UNTIL-MAPOFFSET
 3453 1a14 85       	_AGAIN:	.byte  IMEDD+5
 3454 1a15 41474149 		.ascii "AGAIN"
 3454      4E
 3455 1a1a 00BF     		.align 2 	
 3456              	AGAIN:
 3457 1a1c 42F804ED 		_NEST
 3458 1a20 FFF77CFF 		BL	COMPI
 3459 1a24 5A020000 		.word	BRAN-MAPOFFSET
 3460 1a28 FFF752FF 		BL	COMMA
 3461 1a2c 52F804FB 		_UNNEST
 3462              	
 3463              	//    IF	  ( -- A )
 3464              	// 	Begin a conditional branch structure.
 3465              	
 3466 1a30 141A0000 		.word	_AGAIN-MAPOFFSET
 3467 1a34 82       	_IFF:	.byte  IMEDD+2
 3468 1a35 4946     		.ascii "IF"
 3469 1a37 00       		.align 2 	
 3470              	IFF:
 3471 1a38 42F804ED 		_NEST
 3472 1a3c FFF76EFF 		BL	COMPI
 3473 1a40 42020000 		.word	QBRAN-MAPOFFSET
 3474 1a44 FEF7D0FF 		BL	HERE
 3475 1a48 FEF7D7FB 		_DOLIT
 3476 1a4c 04000000 		.word	4
ARM GAS  stm32eforth.s 			page 65


 3477 1a50 FEF798FE 		BL	CPP
 3478 1a54 FEF7E0FD 		BL	PSTOR
 3479 1a58 52F804FB 		_UNNEST
 3480              	
 3481              	//    AHEAD	( -- A )
 3482              	// 	Compile a forward branch instruction.
 3483              	
 3484 1a5c 341A0000 		.word	_IFF-MAPOFFSET
 3485 1a60 85       	_AHEAD:	.byte  IMEDD+5
 3486 1a61 41484541 		.ascii "AHEAD"
 3486      44
 3487 1a66 00BF     		.align 2 	
 3488              	AHEAD:
 3489 1a68 42F804ED 		_NEST
 3490 1a6c FFF756FF 		BL	COMPI
 3491 1a70 5A020000 		.word	BRAN-MAPOFFSET
 3492 1a74 FEF7B8FF 		BL	HERE
 3493 1a78 FEF7BFFB 		_DOLIT
 3494 1a7c 04000000 		.word	4
 3495 1a80 FEF780FE 		BL	CPP
 3496 1a84 FEF7C8FD 		BL	PSTOR
 3497 1a88 52F804FB 		_UNNEST
 3498              	
 3499              	//    REPEAT	( A a -- )
 3500              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3501              	
 3502 1a8c 601A0000 		.word	_AHEAD-MAPOFFSET
 3503 1a90 86       	_REPEA:	.byte  IMEDD+6
 3504 1a91 52455045 		.ascii "REPEAT"
 3504      4154
 3505 1a97 00       		.align 2 	
 3506              	REPEA:
 3507 1a98 42F804ED 		_NEST
 3508 1a9c FFF7BEFF 		BL	AGAIN
 3509 1aa0 FEF7A2FF 		BL	HERE
 3510 1aa4 FEF740FC 		BL	SWAP
 3511 1aa8 FEF7E8FB 		BL	STORE
 3512 1aac 52F804FB 		_UNNEST
 3513              	
 3514              	//    THEN	( A -- )
 3515              	// 	Terminate a conditional branch structure.
 3516              	
 3517 1ab0 901A0000 		.word	_REPEA-MAPOFFSET
 3518 1ab4 84       	_THENN:	.byte  IMEDD+4
 3519 1ab5 5448454E 		.ascii "THEN"
 3520 1ab9 0000BF   		.align 2 	
 3521              	THENN:
 3522 1abc 42F804ED 		_NEST
 3523 1ac0 FEF792FF 		BL	HERE
 3524 1ac4 FEF730FC 		BL	SWAP
 3525 1ac8 FEF7D8FB 		BL	STORE
 3526 1acc 52F804FB 		_UNNEST
 3527              	
 3528              	//    AFT	 ( a -- a A )
 3529              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3530              	
 3531 1ad0 B41A0000 		.word	_THENN-MAPOFFSET
ARM GAS  stm32eforth.s 			page 66


 3532 1ad4 83       	_AFT:	.byte  IMEDD+3
 3533 1ad5 414654   		.ascii "AFT"
 3534              		.align 2 	
 3535              	AFT:
 3536 1ad8 42F804ED 		_NEST
 3537 1adc FEF714FC 		BL	DROP
 3538 1ae0 FFF7C2FF 		BL	AHEAD
 3539 1ae4 FFF76EFF 		BL	BEGIN
 3540 1ae8 FEF71EFC 		BL	SWAP
 3541 1aec 52F804FB 		_UNNEST
 3542              	
 3543              	//    ELSE	( A -- A )
 3544              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3545              	
 3546 1af0 D41A0000 		.word	_AFT-MAPOFFSET
 3547 1af4 84       	_ELSEE:	.byte  IMEDD+4
 3548 1af5 454C5345 		.ascii "ELSE"
 3549 1af9 0000BF   		.align 2 	
 3550              	ELSEE:
 3551 1afc 42F804ED 		_NEST
 3552 1b00 FFF7B2FF 		BL	AHEAD
 3553 1b04 FEF710FC 		BL	SWAP
 3554 1b08 FFF7D8FF 		BL	THENN
 3555 1b0c 52F804FB 		_UNNEST
 3556              	
 3557              	//    WHILE	( a -- A a )
 3558              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3559              	
 3560 1b10 F41A0000 		.word	_ELSEE-MAPOFFSET
 3561 1b14 85       	_WHILE:	.byte  IMEDD+5
 3562 1b15 5748494C 		.ascii "WHILE"
 3562      45
 3563 1b1a 00BF     		.align 2 	
 3564              	WHILE:
 3565 1b1c 42F804ED 		_NEST
 3566 1b20 FFF78AFF 		BL	IFF
 3567 1b24 FEF700FC 		BL	SWAP
 3568 1b28 52F804FB 		_UNNEST
 3569              	
 3570              	//    ABORT"	( -- //  string> )
 3571              	// 	Conditional abort with an error message.
 3572              	
 3573 1b2c 141B0000 		.word	_WHILE-MAPOFFSET
 3574 1b30 86       	_ABRTQ:	.byte  IMEDD+6
 3575 1b31 41424F52 		.ascii "ABORT\""
 3575      5422
 3576 1b37 00       		.align 2 	
 3577              	ABRTQ:
 3578 1b38 42F804ED 		_NEST
 3579 1b3c FFF7EEFE 		BL	COMPI
 3580 1b40 D4150000 		.word	ABORQ-MAPOFFSET
 3581 1b44 FFF70EFF 		BL	STRCQ
 3582 1b48 52F804FB 		_UNNEST
 3583              	
 3584              	//    $"	( -- //  string> )
 3585              	// 	Compile an inlineDCB literal.
 3586              	
ARM GAS  stm32eforth.s 			page 67


 3587 1b4c 301B0000 		.word	_ABRTQ-MAPOFFSET
 3588 1b50 82       	_STRQ:	.byte  IMEDD+2
 3589 1b51 2422     		.byte	'$','"'
 3590 1b53 00       		.align 2 	
 3591              	STRQ:
 3592 1b54 42F804ED 		_NEST
 3593 1b58 FFF7E0FE 		BL	COMPI
 3594 1b5c 700F0000 		.word	STRQP-MAPOFFSET
 3595 1b60 FFF700FF 		BL	STRCQ
 3596 1b64 52F804FB 		_UNNEST
 3597              	
 3598              	//    ."	( -- //  string> )
 3599              	// 	Compile an inlineDCB literal to be typed out at run time.
 3600              	
 3601 1b68 501B0000 		.word	_STRQ-MAPOFFSET
 3602 1b6c 82       	_DOTQ:	.byte  IMEDD+2
 3603 1b6d 2E22     		.byte	'.','"'
 3604 1b6f 00       		.align 2 	
 3605              	DOTQ:
 3606 1b70 42F804ED 		_NEST
 3607 1b74 FFF7D2FE 		BL	COMPI
 3608 1b78 8C0F0000 		.word	DOTQP-MAPOFFSET
 3609 1b7c FFF7F2FE 		BL	STRCQ
 3610 1b80 52F804FB 		_UNNEST
 3611              	
 3612              	// **************************************************************************
 3613              	//  Name compiler
 3614              	
 3615              	//    ?UNIQUE	( a -- a )
 3616              	// 	Display a warning message if the word already exists.
 3617              	
 3618 1b84 6C1B0000 		.word	_DOTQ-MAPOFFSET
 3619 1b88 07       	_UNIQU:	.byte  7
 3620 1b89 3F554E49 		.ascii "?UNIQUE"
 3620      515545
 3621              		.align 2 	
 3622              	UNIQU:
 3623 1b90 42F804ED 		_NEST
 3624 1b94 FEF7C0FB 		BL	DUPP
 3625 1b98 FFF742FC 		BL	NAMEQ			// ?name exists
 3626 1b9c FEF751FB 		BL	QBRAN
 3627 1ba0 BC1B0000 		.word	UNIQ1-MAPOFFSET	// redefinitions are OK
 3628 1ba4 FFF7F2F9 		BL	DOTQP
 3629 1ba8 07       		.byte	7
 3630 1ba9 20726544 		.ascii " reDef "		// but warn the user
 3630      656620
 3631              		.align 2 	
 3632 1bb0 FEF7C4FB 		BL	OVER
 3633 1bb4 FEF754FD 		BL	COUNT
 3634 1bb8 FFF798F9 		BL	TYPEE			// just in case its not planned
 3635              	UNIQ1:
 3636 1bbc FEF7A4FB 		BL	DROP
 3637 1bc0 52F804FB 		_UNNEST
 3638              	
 3639              	//    $,n	 ( na -- )
 3640              	// 	Build a new dictionary name using the data at na.
 3641              	
ARM GAS  stm32eforth.s 			page 68


 3642              	// 	.word	_UNIQU-MAPOFFSET
 3643              	// _SNAME	.byte  3
 3644              	// 	.ascii "$$,n"
 3645              	// 	.align 2 	
 3646              	SNAME:
 3647 1bc4 42F804ED 		_NEST
 3648 1bc8 FEF7A6FB 		BL	DUPP			//  na na
 3649 1bcc FEF770FB 		BL	CAT			//  ?null input
 3650 1bd0 FEF737FB 		BL	QBRAN
 3651 1bd4 0C1C0000 		.word	SNAM1-MAPOFFSET
 3652 1bd8 FFF7DAFF 		BL	UNIQU			//  na
 3653 1bdc FEF7E6FD 		BL	LAST			//  na last
 3654 1be0 FEF756FB 		BL	AT			//  na la
 3655 1be4 FFF774FE 		BL	COMMA			//  na
 3656 1be8 FEF796FB 		BL	DUPP			//  na na
 3657 1bec FEF7DEFD 		BL	LAST			//  na na last
 3658 1bf0 FEF744FB 		BL	STORE			//  na , save na for vocabulary link
 3659 1bf4 FEF734FD 		BL	COUNT			//  na+1 count
 3660 1bf8 FEF7F2FB 		BL	PLUS			//  na+1+count
 3661 1bfc FEF79CFE 		BL	ALGND			//  word boundary
 3662 1c00 FEF7C0FD 		BL	CPP
 3663 1c04 FEF73AFB 		BL	STORE			//  top of dictionary now
 3664 1c08 52F804FB 		_UNNEST
 3665              	SNAM1:
 3666 1c0c FFF7B0F9 		BL	STRQP
 3667 1c10 07       		.byte	7
 3668 1c11 206E616D 		.ascii " name? "
 3668      653F20
 3669 1c18 FFF7C8BC 		B.W	ABORT
 3670              	
 3671              	//    $COMPILE	( a -- )
 3672              	// 	Compile next word to code dictionary as a token or literal.
 3673              	
 3674 1c1c 881B0000 		.word	_UNIQU-MAPOFFSET
 3675 1c20 08       	_SCOMP:	.byte  8
 3676 1c21 2424434F 		.ascii "$$COMPILE"
 3676      4D50494C 
 3676      45
 3677 1c2a 00BF     		.align 2 	
 3678              	SCOMP:
 3679 1c2c 42F804ED 		_NEST
 3680 1c30 FFF7F6FB 		BL	NAMEQ
 3681 1c34 FEF75CFC 		BL	QDUP	// defined?
 3682 1c38 FEF703FB 		BL	QBRAN
 3683 1c3c 681C0000 		.word	SCOM2-MAPOFFSET
 3684 1c40 FEF726FB 		BL	AT
 3685 1c44 FEF7D9FA 		_DOLIT
 3686 1c48 80000000 		.word	IMEDD
 3687 1c4c FEF788FB 		BL	ANDD	// immediate?
 3688 1c50 FEF7F7FA 		BL	QBRAN
 3689 1c54 601C0000 		.word	SCOM1-MAPOFFSET
 3690 1c58 FEF7DEFA 		BL	EXECU
 3691 1c5c 52F804FB 		_UNNEST			// it's immediate, execute
 3692              	SCOM1:
 3693 1c60 00F042F8 		BL	CALLC			// it's not immediate, compile
 3694 1c64 52F804FB 		_UNNEST	
 3695              	SCOM2:
ARM GAS  stm32eforth.s 			page 69


 3696 1c68 FFF76EF8 		BL	NUMBQ
 3697 1c6c FEF7E9FA 		BL	QBRAN
 3698 1c70 7C1C0000 		.word	SCOM3-MAPOFFSET
 3699 1c74 FFF76CFE 		BL	LITER
 3700 1c78 52F804FB 		_UNNEST			// compile number as integer
 3701              	SCOM3:
 3702 1c7c FFF796BC 		B.W	ABORT			// error
 3703              	
 3704              	//    OVERT	( -- )
 3705              	// 	Link a new word into the current vocabulary.
 3706              	
 3707 1c80 201C0000 		.word	_SCOMP-MAPOFFSET
 3708 1c84 05       	_OVERT:	.byte  5
 3709 1c85 4F564552 		.ascii "OVERT"
 3709      54
 3710 1c8a 00BF     		.align 2 	
 3711              	OVERT:
 3712 1c8c 42F804ED 		_NEST
 3713 1c90 FEF78CFD 		BL	LAST
 3714 1c94 FEF7FCFA 		BL	AT
 3715 1c98 FEF76AFD 		BL	CNTXT
 3716 1c9c FEF7EEFA 		BL	STORE
 3717 1ca0 52F804FB 		_UNNEST
 3718              	
 3719              	//    ; 	   ( -- )
 3720              	// 	Terminate a colon definition.
 3721              	
 3722 1ca4 841C0000 		.word	_OVERT-MAPOFFSET
 3723 1ca8 C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 3724 1ca9 2F2F20   		.ascii "// "
 3725              		.align 2 	
 3726              	SEMIS:
 3727 1cac 42F804ED 		_NEST
 3728 1cb0 FEF7A3FA 		_DOLIT
 3729 1cb4 52F804FB 		_UNNEST
 3730 1cb8 FFF70AFE 		BL	COMMA
 3731 1cbc FFF7D6FC 		BL	LBRAC
 3732 1cc0 FFF7E4FF 		BL	OVERT
 3733 1cc4 52F804FB 		_UNNEST
 3734              	
 3735              	//    ]	   ( -- )
 3736              	// 	Start compiling the words in the input stream.
 3737              	
 3738 1cc8 A81C0000 		.word	_SEMIS-MAPOFFSET
 3739 1ccc 01       	_RBRAC:	.byte  1
 3740 1ccd 5D       		.ascii "]"
 3741 1cce 00BF     		.align 2 	
 3742              	RBRAC:
 3743 1cd0 42F804ED 		_NEST
 3744 1cd4 FEF791FA 		_DOLIT
 3745 1cd8 2C1C0000 		.word	SCOMP-MAPOFFSET
 3746 1cdc FEF732FD 		BL	TEVAL
 3747 1ce0 FEF7CCFA 		BL	STORE
 3748 1ce4 52F804FB 		_UNNEST
 3749              	
 3750              	//    BL.W	( ca -- )
 3751              	// 	Assemble a branch-link long instruction to ca.
ARM GAS  stm32eforth.s 			page 70


 3752              	// 	BL.W is split into 2 16 bit instructions with 11 bit address fields.
 3753              	
 3754              	// 	.word	_RBRAC-MAPOFFSET
 3755              	// _CALLC	.byte  5
 3756              	// 	.ascii "call,"
 3757              	// 	.align 2 	
 3758              	CALLC:
 3759 1ce8 42F804ED 		_NEST
 3760 1cec 25F00105 		BIC	R5,R5,#1		//  clear b0 of address from R>
 3761 1cf0 FEF77AFE 		BL	HERE
 3762 1cf4 FEF77CFB 		BL	SUBB
 3763 1cf8 A5F10405 		SUB	R5,R5,#4		//  pc offset
 3764 1cfc 40F2FF70 		MOVW	R0,#0x7FF		//  11 bit mask
 3765 1d00 2C46     		MOV	R4,R5
 3766 1d02 4FEA1535 		LSR	R5,R5,#12		//  get bits 22-12
 3767 1d06 05EA0005 		AND	R5,R5,R0
 3768 1d0a 4FEAC434 		LSL	R4,R4,#15		//  get bits 11-1
 3769 1d0e 45EA0405 		ORR	R5,R5,R4
 3770 1d12 45F07845 		ORR	R5,R5,#0xF8000000
 3771 1d16 45F47045 		ORR	R5,R5,#0xF000
 3772 1d1a FFF7D9FD 		BL	COMMA			//  assemble BL.W instruction
 3773 1d1e 52F804FB 		_UNNEST
 3774              	
 3775              	
 3776              	// 	:	( -- //  string> )
 3777              	// 	Start a new colon definition using next word as its name.
 3778              	
 3779 1d22 CC1C0000 		.word	_RBRAC-MAPOFFSET
 3780 1d26 01       	_COLON:	.byte  1
 3781 1d27 3A       		.ascii ":"
 3782              		.align 2 	
 3783              	COLON:
 3784 1d28 42F804ED 		_NEST
 3785 1d2c FFF7B2FA 		BL	TOKEN
 3786 1d30 FFF748FF 		BL	SNAME
 3787 1d34 FEF761FA 		_DOLIT
 3788 1d38 42F804ED 		_NEST
 3789 1d3c FFF7C8FD 		BL	COMMA
 3790 1d40 FFF7C6FF 		BL	RBRAC
 3791 1d44 52F804FB 		_UNNEST
 3792              	
 3793              	//    IMMEDIATE   ( -- )
 3794              	// 	Make the last compiled word an immediate word.
 3795              	
 3796 1d48 261D0000 		.word	_COLON-MAPOFFSET
 3797 1d4c 09       	_IMMED:	.byte  9
 3798 1d4d 494D4D45 		.ascii "IMMEDIATE"
 3798      44494154 
 3798      45
 3799 1d56 00BF     		.align 2 	
 3800              	IMMED:
 3801 1d58 42F804ED 		_NEST
 3802 1d5c FEF74DFA 		_DOLIT
 3803 1d60 80000000 		.word	IMEDD
 3804 1d64 FEF722FD 		BL	LAST
 3805 1d68 FEF792FA 		BL	AT
 3806 1d6c FEF790FA 		BL	AT
ARM GAS  stm32eforth.s 			page 71


 3807 1d70 FEF700FB 		BL	ORR
 3808 1d74 FEF71AFD 		BL	LAST
 3809 1d78 FEF78AFA 		BL	AT
 3810 1d7c FEF77EFA 		BL	STORE
 3811 1d80 52F804FB 		_UNNEST
 3812              	
 3813              	// **************************************************************************
 3814              	//  Defining words
 3815              	
 3816              	//    CONSTANT	( u -- //  string> )
 3817              	// 	Compile a new constant.
 3818              	
 3819 1d84 4C1D0000 		.word	_IMMED-MAPOFFSET
 3820 1d88 08       	_CONST:	.byte  8
 3821 1d89 434F4E53 		.ascii "CONSTANT"
 3821      54414E54 
 3822 1d91 0000BF   		.align 2 	
 3823              	CONST:
 3824 1d94 42F804ED 		_NEST
 3825 1d98 FFF77CFA 		BL	TOKEN
 3826 1d9c FFF712FF 		BL	SNAME
 3827 1da0 FFF774FF 		BL	OVERT
 3828 1da4 FEF729FA 		_DOLIT
 3829 1da8 42F804ED 		_NEST
 3830 1dac FFF790FD 		BL	COMMA
 3831 1db0 FEF723FA 		_DOLIT
 3832 1db4 94060000 		.word	DOCON-MAPOFFSET
 3833 1db8 FFF796FF 		BL	CALLC
 3834 1dbc FFF788FD 		BL	COMMA
 3835 1dc0 52F804FB 		_UNNEST
 3836              	
 3837              	//    CREATE	( -- //  string> )
 3838              	// 	Compile a new array entry without allocating code space.
 3839              	
 3840 1dc4 881D0000 		.word	_CONST-MAPOFFSET
 3841 1dc8 06       	_CREAT:	.byte  6
 3842 1dc9 43524541 		.ascii "CREATE"
 3842      5445
 3843 1dcf 00       		.align 2 	
 3844              	CREAT:
 3845 1dd0 42F804ED 		_NEST
 3846 1dd4 FFF75EFA 		BL	TOKEN
 3847 1dd8 FFF7F4FE 		BL	SNAME
 3848 1ddc FFF756FF 		BL	OVERT
 3849 1de0 FEF70BFA 		_DOLIT
 3850 1de4 42F804ED 		_NEST
 3851 1de8 FFF772FD 		BL	COMMA
 3852 1dec FEF705FA 		_DOLIT
 3853 1df0 88060000 		.word	DOVAR-MAPOFFSET
 3854 1df4 FFF778FF 		BL	CALLC
 3855 1df8 52F804FB 		_UNNEST
 3856              	
 3857              	//    VARIABLE	( -- //  string> )
 3858              	// 	Compile a new variable initialized to 0.
 3859              	
 3860 1dfc C81D0000 		.word	_CREAT-MAPOFFSET
 3861 1e00 08       	_VARIA:	.byte  8
ARM GAS  stm32eforth.s 			page 72


 3862 1e01 56415249 		.ascii "VARIABLE"
 3862      41424C45 
 3863 1e09 0000BF   		.align 2 	
 3864              	VARIA:
 3865 1e0c 42F804ED 		_NEST
 3866 1e10 FFF7DEFF 		BL	CREAT
 3867 1e14 FEF7F1F9 		_DOLIT
 3868 1e18 00000000 		.word	0
 3869 1e1c FFF758FD 		BL	COMMA
 3870 1e20 52F804FB 		_UNNEST
 3871              	
 3872              	// **************************************************************************
 3873              	//  Tools
 3874              	
 3875              	//    dm+	 ( a u -- a )
 3876              	// 	Dump u bytes from , leaving a+u on the stack.
 3877              	
 3878              	// 	.word	_VARIA-MAPOFFSET
 3879              	// _DMP	.byte  3
 3880              	// 	.ascii "dm+"
 3881              	// 	.align 2 	
 3882              	DMP:
 3883 1e24 42F804ED 		_NEST
 3884 1e28 FEF788FA 		BL	OVER
 3885 1e2c FEF7E5F9 		_DOLIT
 3886 1e30 04000000 		.word	4
 3887 1e34 FFF7CCF8 		BL	UDOTR			// display address
 3888 1e38 FFF730F8 		BL	SPACE
 3889 1e3c FEF750FA 		BL	TOR			// start count down loop
 3890 1e40 00F00CB8 		B.W	PDUM2			// skip first pass
 3891              	PDUM1:
 3892 1e44 FEF768FA 	  BL	DUPP
 3893 1e48 FEF732FA 		BL	CAT
 3894 1e4c FEF7D5F9 		_DOLIT
 3895 1e50 03000000 		.word	3
 3896 1e54 FFF7BCF8 		BL	UDOTR			// display numeric data
 3897 1e58 FEF7F0FA 		BL	ONEP			// increment address
 3898              	PDUM2:
 3899 1e5c FEF7E1F9 	  BL	DONXT
 3900 1e60 441E0000 		.word	PDUM1-MAPOFFSET	// loop till done
 3901 1e64 52F804FB 		_UNNEST
 3902              		.align 2 
 3903              	//    DUMP	( a u -- )
 3904              	// 	Dump u bytes from a, in a formatted manner.
 3905              	
 3906 1e68 001E0000 		.word	_VARIA-MAPOFFSET
 3907 1e6c 04       	_DUMP:	.byte  4
 3908 1e6d 44554D50 		.ascii "DUMP"
 3909 1e71 0000BF   		.align 2 	
 3910              	DUMP:
 3911 1e74 42F804ED 		_NEST
 3912 1e78 FEF736FC 		BL	BASE
 3913 1e7c FEF708FA 		BL	AT
 3914 1e80 FEF72EFA 		BL	TOR
 3915 1e84 FEF708FF 		BL	HEX			// save radix,set hex
 3916 1e88 FEF7B7F9 		_DOLIT
 3917 1e8c 10000000 		.word	16
ARM GAS  stm32eforth.s 			page 73


 3918 1e90 FEF722FD 		BL	SLASH			// change count to lines
 3919 1e94 FEF724FA 		BL	TOR
 3920 1e98 00F014B8 		B.W	DUMP4			// start count down loop
 3921              	DUMP1:
 3922 1e9c FFF73EF8 	  BL	CR
 3923 1ea0 FEF7ABF9 		_DOLIT
 3924 1ea4 10000000 		.word	16
 3925 1ea8 FEF740FB 		BL	DDUP
 3926 1eac FFF7BAFF 		BL	DMP			// display numeric
 3927 1eb0 FEF728FB 		BL	ROT
 3928 1eb4 FEF726FB 		BL	ROT
 3929 1eb8 FEF7F0FF 		BL	SPACE
 3930 1ebc FEF7EEFF 		BL	SPACE
 3931 1ec0 FFF714F8 		BL	TYPEE			// display printable characters
 3932              	DUMP4:
 3933 1ec4 FEF7ADF9 	  BL	DONXT
 3934 1ec8 9C1E0000 		.word	DUMP1-MAPOFFSET	// loop till done
 3935              	DUMP3:
 3936 1ecc FEF71CFA 	  BL	DROP
 3937 1ed0 FEF7F4F9 		BL	RFROM
 3938 1ed4 FEF708FC 		BL	BASE
 3939 1ed8 FEF7D0F9 		BL	STORE			// restore radix
 3940 1edc 52F804FB 		_UNNEST
 3941              	
 3942              	//    .S	  ( ... -- ... )
 3943              	// 	Display the contents of the data stack.
 3944              	
 3945 1ee0 6C1E0000 		.word	_DUMP-MAPOFFSET
 3946              	_DOTS:
 3947 1ee4 02       		.byte  2
 3948 1ee5 2E53     		.ascii ".S"
 3949 1ee7 00       		.align 2 	
 3950              	DOTS:
 3951 1ee8 42F804ED 		_NEST
 3952 1eec FEF7D6FF 		BL	SPACE
 3953 1ef0 FEF754FD 		BL	DEPTH			// stack depth
 3954 1ef4 FEF7F4F9 		BL	TOR			// start count down loop
 3955 1ef8 00F006B8 		B.W	DOTS2			// skip first pass
 3956              	DOTS1:
 3957 1efc FEF7E8F9 	  BL	RAT
 3958 1f00 FEF75EFD 		BL	PICK
 3959 1f04 FFF790F8 		BL	DOT			// index stack, display contents
 3960              	DOTS2:
 3961 1f08 FEF78BF9 	  BL	DONXT
 3962 1f0c FC1E0000 		.word	DOTS1-MAPOFFSET	// loop till done
 3963 1f10 FEF7C4FF 		BL	SPACE
 3964 1f14 52F804FB 		_UNNEST
 3965              	
 3966              	//    >NAME	( ca -- na | F )
 3967              	// 	Convert code address to a name address.
 3968              	
 3969 1f18 E41E0000 		.word	_DOTS-MAPOFFSET
 3970 1f1c 05       	_TNAME:	.byte  5
 3971 1f1d 3E4E414D 		.ascii ">NAME"
 3971      45
 3972 1f22 00BF     		.align 2 	
 3973              	TNAME:
ARM GAS  stm32eforth.s 			page 74


 3974 1f24 42F804ED 		_NEST
 3975 1f28 FEF7DAF9 		BL	TOR			//  
 3976 1f2c FEF720FC 		BL	CNTXT			//  va
 3977 1f30 FEF7AEF9 		BL	AT			//  na
 3978              	TNAM1:
 3979 1f34 FEF7F0F9 		BL	DUPP			//  na na
 3980 1f38 FEF783F9 		BL	QBRAN
 3981 1f3c 641F0000 		.word	TNAM2-MAPOFFSET	//  vocabulary end, no match
 3982 1f40 FEF7EAF9 		BL	DUPP			//  na na
 3983 1f44 FFF7B4F9 		BL	NAMET			//  na ca
 3984 1f48 FEF7C2F9 		BL	RAT			//  na ca code
 3985 1f4c FEF71CFA 		BL	XORR			//  na f --
 3986 1f50 FEF777F9 		BL	QBRAN
 3987 1f54 641F0000 		.word	TNAM2-MAPOFFSET
 3988 1f58 FEF798FA 		BL	CELLM			//  la 
 3989 1f5c FEF798F9 		BL	AT			//  next_na
 3990 1f60 FFF7E8BF 		B.W	TNAM1
 3991              	TNAM2:	
 3992 1f64 FEF7AAF9 		BL	RFROM
 3993 1f68 FEF7CEF9 		BL	DROP			//  0|na --
 3994 1f6c 52F804FB 		_UNNEST			// 0
 3995              	
 3996              	//    .ID	 ( na -- )
 3997              	// 	Display the name at address.
 3998              	
 3999 1f70 1C1F0000 		.word	_TNAME-MAPOFFSET
 4000 1f74 03       	_DOTID:	.byte  3
 4001 1f75 2E4944   		.ascii ".ID"
 4002              		.align 2 	
 4003              	DOTID:
 4004 1f78 42F804ED 		_NEST
 4005 1f7c FEF7B8FA 		BL	QDUP			// if zero no name
 4006 1f80 FEF75FF9 		BL	QBRAN
 4007 1f84 A01F0000 		.word	DOTI1-MAPOFFSET
 4008 1f88 FEF76AFB 		BL	COUNT
 4009 1f8c FEF735F9 		_DOLIT
 4010 1f90 1F000000 		.word	0x1F
 4011 1f94 FEF7E4F9 		BL	ANDD			// mask lexicon bits
 4012 1f98 FEF7A8FF 		BL	TYPEE
 4013 1f9c 52F804FB 		_UNNEST			// display name string
 4014              	DOTI1:
 4015 1fa0 FEF7F4FF 	  BL	DOTQP
 4016 1fa4 09       		.byte	9
 4017 1fa5 207B6E6F 		.ascii " {noName}"
 4017      4E616D65 
 4017      7D
 4018 1fae 00BF     		.align 2 	
 4019 1fb0 52F804FB 		_UNNEST
 4020              	
 4021              	//    SEE	 ( -- //  string> )
 4022              	// 	A simple decompiler.
 4023              	
 4024 1fb4 741F0000 		.word	_DOTID-MAPOFFSET
 4025 1fb8 03       	_SEE:	.byte  3
 4026 1fb9 534545   		.ascii "SEE"
 4027              		.align 2 	
 4028              	SEE:
ARM GAS  stm32eforth.s 			page 75


 4029 1fbc 42F804ED 		_NEST
 4030 1fc0 FFF766FC 		BL	TICK	//  ca --, starting address
 4031 1fc4 FEF7AAFF 		BL	CR	
 4032 1fc8 FEF717F9 		_DOLIT
 4033 1fcc 14000000 		.word	20
 4034 1fd0 FEF786F9 		BL	TOR
 4035              	SEE1:
 4036 1fd4 FEF752FA 		BL	CELLP			//  a
 4037 1fd8 FEF79EF9 		BL	DUPP			//  a a
 4038 1fdc 00F010F8 		BL	DECOMP		//  a
 4039 1fe0 FEF71FF9 		BL	DONXT
 4040 1fe4 D41F0000 		.word	SEE1-MAPOFFSET
 4041 1fe8 FEF78EF9 		BL	DROP
 4042 1fec 52F804FB 		_UNNEST
 4043              	
 4044              	// 	DECOMPILE ( a -- )
 4045              	// 	Convert code in a.  Display name of command or as data.
 4046              	
 4047 1ff0 B81F0000 		.word	_SEE-MAPOFFSET
 4048 1ff4 09       	_DECOM:	.byte  9
 4049 1ff5 4445434F 		.ascii "DECOMPILE"
 4049      4D50494C 
 4049      45
 4050 1ffe 00BF     		.align 2 
 4051              		
 4052              	DECOMP:	
 4053 2000 42F804ED 		_NEST
 4054 2004 FEF788F9 		BL	DUPP			//  a a
 4055              	// 	BL	TOR			//  a
 4056 2008 FEF742F9 		BL	AT			//  a code
 4057 200c FEF784F9 		BL	DUPP			//  a code code
 4058 2010 FEF7F3F8 		_DOLIT
 4059 2014 00F800F8 		.word	0xF800F800
 4060 2018 FEF7A2F9 		BL	ANDD
 4061 201c FEF7EDF8 		_DOLIT
 4062 2020 00F000F8 		.word	0xF800F000
 4063 2024 FEF7B4FA 		BL	EQUAL			//  a code ?
 4064 2028 FEF70BF9 		BL	QBRAN
 4065 202c 84200000 		.word	DECOM2-MAPOFFSET	//  not a command
 4066              		//  a valid_code --, extract address and display name
 4067 2030 40F6FE70 		MOVW	R0,#0xFFE
 4068 2034 2C46     		MOV	R4,R5
 4069 2036 4FEA4555 		LSL	R5,R5,#21		//  get bits 22-12
 4070 203a 4FEA6525 		ASR	R5,R5,#9		//  with sign extension
 4071 203e 4FEAD434 		LSR	R4,R4,#15		//  get bits 11-1
 4072 2042 04EA0004 		AND	R4,R4,R0		//  retain only bits 11-1
 4073 2046 45EA0405 		ORR	R5,R5,R4		//  get bits 22-1
 4074 204a 00BF     		NOP
 4075 204c FEF776F9 		BL	OVER			//  a offset a
 4076 2050 FEF7C6F9 		BL	PLUS			//  a target-4
 4077 2054 FEF712FA 		BL	CELLP			//  a target
 4078 2058 FFF764FF 		BL	TNAME			//  a na/0 --, is it a name?
 4079 205c FEF748FA 		BL	QDUP			//  name address or zero
 4080 2060 FEF7EFF8 		BL	QBRAN
 4081 2064 78200000 		.word	DECOM1-MAPOFFSET
 4082 2068 FEF718FF 		BL	SPACE			//  a na
 4083 206c FFF784FF 		BL	DOTID			//  a --, display name
ARM GAS  stm32eforth.s 			page 76


 4084              	// 	BL	RFROM			//  a
 4085 2070 FEF74AF9 		BL	DROP
 4086 2074 52F804FB 		_UNNEST
 4087              	DECOM1:	// BL	RFROM		//  a
 4088 2078 FEF70AF9 		BL	AT			//  data
 4089 207c FEF7C2FF 		BL	UDOT			//  display data
 4090 2080 52F804FB 		_UNNEST
 4091              	DECOM2:
 4092 2084 FEF7BEFF 		BL	UDOT
 4093              	// 	BL	RFROM
 4094 2088 FEF73EF9 		BL	DROP
 4095 208c 52F804FB 		_UNNEST
 4096              	
 4097              	//    WORDS	( -- )
 4098              	// 	Display the names in the context vocabulary.
 4099              	
 4100 2090 F41F0000 		.word	_DECOM-MAPOFFSET
 4101 2094 05       	_WORDS:	.byte  5
 4102 2095 574F5244 		.ascii "WORDS"
 4102      53
 4103 209a 00BF     		.align 2 	
 4104              	WORDS:
 4105 209c 42F804ED 		_NEST
 4106 20a0 FEF73CFF 		BL	CR
 4107 20a4 FEF764FB 		BL	CNTXT
 4108 20a8 FEF7F2F8 		BL	AT			// only in context
 4109              	WORS1:
 4110 20ac FEF720FA 		BL	QDUP			// ?at end of list
 4111 20b0 FEF7C7F8 		BL	QBRAN
 4112 20b4 D0200000 		.word	WORS2-MAPOFFSET
 4113 20b8 FEF72EF9 		BL	DUPP
 4114 20bc FEF7EEFE 		BL	SPACE
 4115 20c0 FFF75AFF 		BL	DOTID			// display a name
 4116 20c4 FEF7E2F9 		BL	CELLM
 4117 20c8 FEF7E2F8 		BL	AT
 4118 20cc FFF7EEBF 		B.W	WORS1
 4119              	WORS2:
 4120 20d0 52F804FB 		_UNNEST
 4121              	
 4122              	// **************************************************************************
 4123              	//  cold start
 4124              	
 4125              	//    VER	 ( -- n )
 4126              	// 	Return the version number of this implementation.
 4127              	
 4128              	// 	.word	_WORDS-MAPOFFSET
 4129              	// _VERSN	.byte  3
 4130              	// 	.ascii "VER"
 4131              	// 	.align 2 	
 4132              	VERSN:
 4133 20d4 42F804ED 		_NEST
 4134 20d8 FEF78FF8 		_DOLIT
 4135 20dc 01010000 		.word	VER*256+EXT
 4136 20e0 52F804FB 		_UNNEST
 4137              	
 4138              	//    hi	  ( -- )
 4139              	// 	Display the sign-on message of eForth.
ARM GAS  stm32eforth.s 			page 77


 4140              	
 4141 20e4 94200000 		.word	_WORDS-MAPOFFSET
 4142 20e8 02       	_HI:	.byte  2
 4143 20e9 4849     		.ascii "HI"
 4144 20eb 00       		.align 2 	
 4145              	HI:
 4146 20ec 42F804ED 		_NEST
 4147 20f0 FEF714FF 		BL	CR	// initialize I/O
 4148 20f4 FEF74AFF 		BL	DOTQP
 4149 20f8 17       		.byte	23
 4150 20f9 626C7565 		.ascii "blue pill stm32eForth v"	// model
 4150      2070696C 
 4150      6C207374 
 4150      6D333265 
 4150      466F7274 
 4151              		.align 2
 4152 2110 FEF7EAFA 		BL	BASE
 4153 2114 FEF7BCF8 		BL	AT
 4154 2118 FEF7BEFD 		BL	HEX	// save radix
 4155 211c FFF7DAFF 		BL	VERSN
 4156 2120 FEF736FD 		BL	BDIGS
 4157 2124 FEF75AFD 		BL	DIG
 4158 2128 FEF758FD 		BL	DIG
 4159 212c FEF765F8 		_DOLIT
 4160 2130 2E000000 		.word	'.'
 4161 2134 FEF73CFD 		BL	HOLD
 4162 2138 FEF760FD 		BL	DIGS
 4163 213c FEF784FD 		BL	EDIGS
 4164 2140 FEF7D4FE 		BL	TYPEE	// format version number
 4165 2144 FEF7D0FA 		BL	BASE
 4166 2148 FEF798F8 		BL	STORE
 4167 214c FEF7E6FE 		BL	CR
 4168 2150 52F804FB 		_UNNEST			// restore radix
 4169              	
 4170              	//    COLD	( -- )
 4171              	// 	The high level cold start sequence.
 4172              	
 4173 2154 E8200000 		.word	_HI-MAPOFFSET
 4174 2158 04       	LASTN:	.byte  4
 4175 2159 434F4C44 		.ascii "COLD"
 4176 215d 0000BF   		.align 2 	
 4177              		.type COLD,%function 
 4178              	COLD:
 4179              	//  Initiate Forth registers
 4180 2160 4FF00003 		MOV R3,#UPP&0xffff	//  user area 
 4181 2164 C2F20003 	 	MOVT R3,#UPP>>16		  
 4182 2168 03F59F42 		ADD R2,R3,#0x4f80	// Forth return stack
 4183 216c 03F59D41 		ADD R1,R3,#0x4E80 // Forth data stack
 4184 2170 4FF00005 		MOV R5,#0			//  tos
 4185 2174 00BF     		NOP
 4186 2176 42F804ED 		_NEST
 4187              	COLD1:
 4188 217a FEF73EF8 		_DOLIT 
 4189 217e 00000000 		.word 0 
 4190 2182 FDF7FBFF 		BL ULED // turn off user LED 
 4191 2186 FEF738F8 		_DOLIT
 4192 218a F4000000 		.word	UZERO-MAPOFFSET
ARM GAS  stm32eforth.s 			page 78


 4193 218e FEF734F8 		_DOLIT
 4194 2192 00000020 		.word	UPP
 4195 2196 FEF730F8 		_DOLIT
 4196 219a 48000000 		.word	ULAST-UZERO
 4197 219e FEF76BFC 		BL	MOVE 			// initialize user area
 4198 21a2 FFF7C7FA 		BL	PRESE			// initialize stack and TIB
 4199 21a6 FEF795FA 		BL	TBOOT
 4200 21aa FEF741FC 		BL	ATEXE			// application boot
 4201 21ae FFF76DFD 		BL	OVERT
 4202 21b2 FFF7CFBA 		B.W	QUIT			// start interpretation
 4203              	COLD2:	
 4204              	CTOP:
 4205 21b6 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4206              	
 4207              	
 4208 21ba 00000020 	  .end 
 4208      02402301 
 4208      6745AB89 
 4208      EFCD
ARM GAS  stm32eforth.s 			page 79


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
ARM GAS  stm32eforth.s 			page 80


board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32eforth.s:83     *ABS*:0000000040011000 LED_GPIO
       stm32eforth.s:84     *ABS*:000000000000000d LED_PIN
       stm32eforth.s:85     *ABS*:0000000040013800 UART
       stm32eforth.s:88     *ABS*:0000000020004e80 SPP
       stm32eforth.s:89     *ABS*:0000000020004e80 TIBB
       stm32eforth.s:90     *ABS*:0000000020004f80 RPP
       stm32eforth.s:91     *ABS*:0000000020000000 UPP
       stm32eforth.s:92     *ABS*:0000000020000100 DTOP
       stm32eforth.s:93     *ABS*:0000000020004e00 DEND
       stm32eforth.s:98     *ABS*:0000000000000004 TICKS_OFS
       stm32eforth.s:99     *ABS*:0000000000000008 TIMER_OFS
       stm32eforth.s:100    *ABS*:000000000000000c BOOT_OFS
       stm32eforth.s:101    *ABS*:0000000000000010 BASE_OFS
       stm32eforth.s:102    *ABS*:0000000000000014 TMP_OFS
       stm32eforth.s:103    *ABS*:0000000000000018 SPAN_OFS
       stm32eforth.s:104    *ABS*:000000000000001c TOIN_OFS
       stm32eforth.s:105    *ABS*:0000000000000020 NTIB_OFS
       stm32eforth.s:106    *ABS*:0000000000000024 TIB_OFS
       stm32eforth.s:107    *ABS*:0000000000000028 EVAL_OFS
       stm32eforth.s:108    *ABS*:000000000000002c HLD_OFS
       stm32eforth.s:109    *ABS*:0000000000000030 CTXT_OFS
       stm32eforth.s:110    *ABS*:0000000000000034 FLSH_CTOP_OFS
       stm32eforth.s:111    *ABS*:0000000000000038 RAM_CTOP_OFS
       stm32eforth.s:112    *ABS*:000000000000003c LASTN_OFS
       stm32eforth.s:118    .bss:0000000000000000 system_vars
       stm32eforth.s:118    .bss:0000000000000000 $d
       stm32eforth.s:156    .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:287    .text.reset_handler:0000000000000000 reset_handler
       stm32eforth.s:247    .text.default_handler:0000000000000000 default_handler
       stm32eforth.s:268    .text.default_handler:000000000000002c systick_handler
       stm32eforth.s:245    .text.default_handler:0000000000000000 $t
       stm32eforth.s:585    .text.reset_handler:00000000000001fa DOLIT
       stm32eforth.s:249    .text.default_handler:0000000000000004 $d
       stm32eforth.s:505    .text.reset_handler:000000000000017c ULED
       stm32eforth.s:250    .text.default_handler:0000000000000008 $t
       stm32eforth.s:2330   .text.reset_handler:0000000000000f1c CR
       stm32eforth.s:2395   .text.reset_handler:0000000000000f8c DOTQP
       stm32eforth.s:253    .text.default_handler:0000000000000014 $d
       stm32eforth.s:256    .text.default_handler:0000000000000028 Infinite_Loop
       stm32eforth.s:276    .text.default_handler:000000000000003e systick_exit
       stm32eforth.s:285    .text.reset_handler:0000000000000000 $t
       stm32eforth.s:293    .text.reset_handler:0000000000000010 zero_loop
       stm32eforth.s:303    .text.reset_handler:0000000000000024 init_devices
       stm32eforth.s:3174   .text.reset_handler:0000000000001774 UNLOCK
       stm32eforth.s:4178   .text.reset_handler:0000000000002160 COLD
       stm32eforth.s:318    .text.reset_handler:0000000000000042 wait_hserdy
       stm32eforth.s:338    .text.reset_handler:000000000000005c wait_pllrdy
ARM GAS  stm32eforth.s 			page 81


       stm32eforth.s:351    .text.reset_handler:000000000000007c wait_sws
       stm32eforth.s:404    *ABS*:0000000000000001 VER
       stm32eforth.s:405    *ABS*:0000000000000001 EXT
       stm32eforth.s:411    *ABS*:0000000000000000 RAMOFFSET
       stm32eforth.s:412    *ABS*:0000000000000000 MAPOFFSET
       stm32eforth.s:414    *ABS*:0000000000000040 COMPO
       stm32eforth.s:415    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:416    *ABS*:00000000ffffff1f MASKK
       stm32eforth.s:418    *ABS*:0000000000000004 CELLL
       stm32eforth.s:419    *ABS*:0000000000000010 BASEE
       stm32eforth.s:420    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:422    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:423    *ABS*:000000000000000a LF
       stm32eforth.s:424    *ABS*:000000000000000d CRR
       stm32eforth.s:425    *ABS*:000000000000001b ERR
       stm32eforth.s:426    *ABS*:0000000000000027 TIC
       stm32eforth.s:450    .text.reset_handler:00000000000000f4 UZERO
       stm32eforth.s:451    .text.reset_handler:00000000000000f4 $d
       stm32eforth.s:4145   .text.reset_handler:00000000000020ec HI
       stm32eforth.s:3035   .text.reset_handler:0000000000001610 INTER
       stm32eforth.s:4174   .text.reset_handler:0000000000002158 LASTN
       stm32eforth.s:4204   .text.reset_handler:00000000000021b6 CTOP
       stm32eforth.s:468    .text.reset_handler:000000000000013c ULAST
       stm32eforth.s:480    .text.reset_handler:000000000000013c $d
       stm32eforth.s:481    .text.reset_handler:0000000000000140 _PAUSE
       stm32eforth.s:483    .text.reset_handler:0000000000000146 $t
       stm32eforth.s:484    .text.reset_handler:0000000000000148 PAUSE
       stm32eforth.s:1394   .text.reset_handler:00000000000006c0 TIMER
       stm32eforth.s:676    .text.reset_handler:000000000000027c STORE
       stm32eforth.s:488    .text.reset_handler:0000000000000154 PAUSE_LOOP
       stm32eforth.s:689    .text.reset_handler:0000000000000290 AT
       stm32eforth.s:636    .text.reset_handler:0000000000000242 QBRAN
       stm32eforth.s:492    .text.reset_handler:0000000000000160 $d
       stm32eforth.s:495    .text.reset_handler:000000000000016c PAUSE_EXIT
       stm32eforth.s:654    .text.reset_handler:000000000000025a BRAN
       stm32eforth.s:493    .text.reset_handler:0000000000000164 $t
       stm32eforth.s:494    .text.reset_handler:0000000000000168 $d
       stm32eforth.s:496    .text.reset_handler:000000000000016c $t
       stm32eforth.s:500    .text.reset_handler:0000000000000170 $d
       stm32eforth.s:501    .text.reset_handler:0000000000000174 _ULED
       stm32eforth.s:514    .text.reset_handler:0000000000000194 ULED_OFF
       stm32eforth.s:520    .text.reset_handler:0000000000000198 $d
       stm32eforth.s:521    .text.reset_handler:000000000000019c _QRX
       stm32eforth.s:524    .text.reset_handler:00000000000001a4 QKEY
       stm32eforth.s:525    .text.reset_handler:00000000000001a4 QRX
       stm32eforth.s:536    .text.reset_handler:00000000000001c4 QRX1
       stm32eforth.s:545    .text.reset_handler:00000000000001cc $d
       stm32eforth.s:546    .text.reset_handler:00000000000001d0 _TXSTO
       stm32eforth.s:549    .text.reset_handler:00000000000001d8 TXSTO
       stm32eforth.s:550    .text.reset_handler:00000000000001d8 EMIT
       stm32eforth.s:551    .text.reset_handler:00000000000001d8 TECHO
       stm32eforth.s:554    .text.reset_handler:00000000000001e0 TX1
       stm32eforth.s:570    .text.reset_handler:00000000000001f0 $d
       stm32eforth.s:571    .text.reset_handler:00000000000001f4 _NOP
       stm32eforth.s:573    .text.reset_handler:00000000000001f8 $t
       stm32eforth.s:574    .text.reset_handler:00000000000001f8 NOP
       stm32eforth.s:595    .text.reset_handler:000000000000020c $d
ARM GAS  stm32eforth.s 			page 82


       stm32eforth.s:596    .text.reset_handler:0000000000000210 _EXECU
       stm32eforth.s:598    .text.reset_handler:0000000000000218 $t
       stm32eforth.s:599    .text.reset_handler:0000000000000218 EXECU
       stm32eforth.s:613    .text.reset_handler:0000000000000222 DONXT
       stm32eforth.s:621    .text.reset_handler:0000000000000232 NEXT1
       stm32eforth.s:643    .text.reset_handler:0000000000000254 QBRAN1
       stm32eforth.s:662    .text.reset_handler:0000000000000264 $d
       stm32eforth.s:663    .text.reset_handler:0000000000000268 _EXIT
       stm32eforth.s:666    .text.reset_handler:0000000000000270 EXIT
       stm32eforth.s:672    .text.reset_handler:0000000000000274 $d
       stm32eforth.s:673    .text.reset_handler:0000000000000278 _STORE
       stm32eforth.s:675    .text.reset_handler:000000000000027a $t
       stm32eforth.s:685    .text.reset_handler:0000000000000288 $d
       stm32eforth.s:686    .text.reset_handler:000000000000028c _AT
       stm32eforth.s:688    .text.reset_handler:000000000000028e $t
       stm32eforth.s:696    .text.reset_handler:0000000000000294 $d
       stm32eforth.s:697    .text.reset_handler:0000000000000298 _CSTOR
       stm32eforth.s:700    .text.reset_handler:000000000000029c CSTOR
       stm32eforth.s:709    .text.reset_handler:00000000000002a8 $d
       stm32eforth.s:710    .text.reset_handler:00000000000002ac _CAT
       stm32eforth.s:713    .text.reset_handler:00000000000002b0 CAT
       stm32eforth.s:720    .text.reset_handler:00000000000002b4 $d
       stm32eforth.s:721    .text.reset_handler:00000000000002b8 _RFROM
       stm32eforth.s:724    .text.reset_handler:00000000000002bc RFROM
       stm32eforth.s:732    .text.reset_handler:00000000000002c6 $d
       stm32eforth.s:733    .text.reset_handler:00000000000002ca _RAT
       stm32eforth.s:736    .text.reset_handler:00000000000002d0 RAT
       stm32eforth.s:744    .text.reset_handler:00000000000002d8 $d
       stm32eforth.s:745    .text.reset_handler:00000000000002dc _TOR
       stm32eforth.s:748    .text.reset_handler:00000000000002e0 TOR
       stm32eforth.s:756    .text.reset_handler:00000000000002ea $d
       stm32eforth.s:757    .text.reset_handler:00000000000002ee _SPAT
       stm32eforth.s:759    .text.reset_handler:00000000000002f2 $t
       stm32eforth.s:760    .text.reset_handler:00000000000002f4 SPAT
       stm32eforth.s:768    .text.reset_handler:00000000000002fc $d
       stm32eforth.s:769    .text.reset_handler:0000000000000300 _DROP
       stm32eforth.s:772    .text.reset_handler:0000000000000308 DROP
       stm32eforth.s:779    .text.reset_handler:000000000000030e $d
       stm32eforth.s:780    .text.reset_handler:0000000000000312 _DUPP
       stm32eforth.s:782    .text.reset_handler:0000000000000316 $t
       stm32eforth.s:783    .text.reset_handler:0000000000000318 DUPP
       stm32eforth.s:790    .text.reset_handler:000000000000031e $d
       stm32eforth.s:791    .text.reset_handler:0000000000000322 _SWAP
       stm32eforth.s:794    .text.reset_handler:0000000000000328 SWAP
       stm32eforth.s:803    .text.reset_handler:0000000000000330 $d
       stm32eforth.s:804    .text.reset_handler:0000000000000334 _OVER
       stm32eforth.s:807    .text.reset_handler:000000000000033c OVER
       stm32eforth.s:815    .text.reset_handler:0000000000000344 $d
       stm32eforth.s:816    .text.reset_handler:0000000000000348 _ZLESS
       stm32eforth.s:819    .text.reset_handler:000000000000034c ZLESS
       stm32eforth.s:827    .text.reset_handler:0000000000000356 $d
       stm32eforth.s:828    .text.reset_handler:000000000000035a _ANDD
       stm32eforth.s:830    .text.reset_handler:000000000000035e $t
       stm32eforth.s:831    .text.reset_handler:0000000000000360 ANDD
       stm32eforth.s:839    .text.reset_handler:000000000000036a $d
       stm32eforth.s:840    .text.reset_handler:000000000000036e _ORR
       stm32eforth.s:843    .text.reset_handler:0000000000000374 ORR
ARM GAS  stm32eforth.s 			page 83


       stm32eforth.s:851    .text.reset_handler:000000000000037e $d
       stm32eforth.s:852    .text.reset_handler:0000000000000382 _XORR
       stm32eforth.s:854    .text.reset_handler:0000000000000386 $t
       stm32eforth.s:855    .text.reset_handler:0000000000000388 XORR
       stm32eforth.s:863    .text.reset_handler:0000000000000392 $d
       stm32eforth.s:864    .text.reset_handler:0000000000000396 _UPLUS
       stm32eforth.s:866    .text.reset_handler:000000000000039a $t
       stm32eforth.s:867    .text.reset_handler:000000000000039c UPLUS
       stm32eforth.s:878    .text.reset_handler:00000000000003ac $d
       stm32eforth.s:879    .text.reset_handler:00000000000003b0 _RSHIFT
       stm32eforth.s:882    .text.reset_handler:00000000000003b8 RSHIFT
       stm32eforth.s:890    .text.reset_handler:00000000000003c2 $d
       stm32eforth.s:891    .text.reset_handler:00000000000003c6 _LSHIFT
       stm32eforth.s:894    .text.reset_handler:00000000000003d0 LSHIFT
       stm32eforth.s:902    .text.reset_handler:00000000000003da $d
       stm32eforth.s:903    .text.reset_handler:00000000000003de _PLUS
       stm32eforth.s:905    .text.reset_handler:00000000000003e0 $t
       stm32eforth.s:906    .text.reset_handler:00000000000003e0 PLUS
       stm32eforth.s:914    .text.reset_handler:00000000000003e8 $d
       stm32eforth.s:915    .text.reset_handler:00000000000003ec _SUBB
       stm32eforth.s:917    .text.reset_handler:00000000000003ee $t
       stm32eforth.s:918    .text.reset_handler:00000000000003f0 SUBB
       stm32eforth.s:926    .text.reset_handler:00000000000003fa $d
       stm32eforth.s:927    .text.reset_handler:00000000000003fe _STAR
       stm32eforth.s:929    .text.reset_handler:0000000000000400 $t
       stm32eforth.s:930    .text.reset_handler:0000000000000400 STAR
       stm32eforth.s:938    .text.reset_handler:000000000000040a $d
       stm32eforth.s:939    .text.reset_handler:000000000000040e _UMSTA
       stm32eforth.s:941    .text.reset_handler:0000000000000412 $t
       stm32eforth.s:942    .text.reset_handler:0000000000000414 UMSTA
       stm32eforth.s:952    .text.reset_handler:0000000000000420 $d
       stm32eforth.s:953    .text.reset_handler:0000000000000424 _MSTAR
       stm32eforth.s:956    .text.reset_handler:0000000000000428 MSTAR
       stm32eforth.s:966    .text.reset_handler:0000000000000434 $d
       stm32eforth.s:967    .text.reset_handler:0000000000000438 _ONEP
       stm32eforth.s:970    .text.reset_handler:000000000000043c ONEP
       stm32eforth.s:977    .text.reset_handler:0000000000000442 $d
       stm32eforth.s:978    .text.reset_handler:0000000000000446 _ONEM
       stm32eforth.s:981    .text.reset_handler:000000000000044c ONEM
       stm32eforth.s:988    .text.reset_handler:0000000000000452 $d
       stm32eforth.s:989    .text.reset_handler:0000000000000456 _TWOP
       stm32eforth.s:992    .text.reset_handler:000000000000045c TWOP
       stm32eforth.s:999    .text.reset_handler:0000000000000462 $d
       stm32eforth.s:1000   .text.reset_handler:0000000000000466 _TWOM
       stm32eforth.s:1003   .text.reset_handler:000000000000046c TWOM
       stm32eforth.s:1010   .text.reset_handler:0000000000000472 $d
       stm32eforth.s:1011   .text.reset_handler:0000000000000476 _CELLP
       stm32eforth.s:1013   .text.reset_handler:000000000000047c $t
       stm32eforth.s:1014   .text.reset_handler:000000000000047c CELLP
       stm32eforth.s:1021   .text.reset_handler:0000000000000482 $d
       stm32eforth.s:1022   .text.reset_handler:0000000000000486 _CELLM
       stm32eforth.s:1024   .text.reset_handler:000000000000048c $t
       stm32eforth.s:1025   .text.reset_handler:000000000000048c CELLM
       stm32eforth.s:1032   .text.reset_handler:0000000000000492 $d
       stm32eforth.s:1033   .text.reset_handler:0000000000000496 _BLANK
       stm32eforth.s:1036   .text.reset_handler:000000000000049c BLANK
       stm32eforth.s:1044   .text.reset_handler:00000000000004a6 $d
ARM GAS  stm32eforth.s 			page 84


       stm32eforth.s:1045   .text.reset_handler:00000000000004aa _CELLS
       stm32eforth.s:1047   .text.reset_handler:00000000000004b0 $t
       stm32eforth.s:1048   .text.reset_handler:00000000000004b0 CELLS
       stm32eforth.s:1055   .text.reset_handler:00000000000004b6 $d
       stm32eforth.s:1056   .text.reset_handler:00000000000004ba _CELLSL
       stm32eforth.s:1058   .text.reset_handler:00000000000004c0 $t
       stm32eforth.s:1059   .text.reset_handler:00000000000004c0 CELLSL
       stm32eforth.s:1066   .text.reset_handler:00000000000004c6 $d
       stm32eforth.s:1067   .text.reset_handler:00000000000004ca _TWOST
       stm32eforth.s:1070   .text.reset_handler:00000000000004d0 TWOST
       stm32eforth.s:1077   .text.reset_handler:00000000000004d6 $d
       stm32eforth.s:1078   .text.reset_handler:00000000000004da _TWOSL
       stm32eforth.s:1081   .text.reset_handler:00000000000004e0 TWOSL
       stm32eforth.s:1088   .text.reset_handler:00000000000004e6 $d
       stm32eforth.s:1089   .text.reset_handler:00000000000004ea _QDUP
       stm32eforth.s:1092   .text.reset_handler:00000000000004f0 QDUP
       stm32eforth.s:1101   .text.reset_handler:00000000000004fa $d
       stm32eforth.s:1102   .text.reset_handler:00000000000004fe _ROT
       stm32eforth.s:1104   .text.reset_handler:0000000000000502 $t
       stm32eforth.s:1105   .text.reset_handler:0000000000000504 ROT
       stm32eforth.s:1115   .text.reset_handler:000000000000050e $d
       stm32eforth.s:1116   .text.reset_handler:0000000000000512 _DDROP
       stm32eforth.s:1118   .text.reset_handler:0000000000000518 $t
       stm32eforth.s:1119   .text.reset_handler:0000000000000518 DDROP
       stm32eforth.s:1127   .text.reset_handler:0000000000000522 $d
       stm32eforth.s:1128   .text.reset_handler:0000000000000526 _DDUP
       stm32eforth.s:1131   .text.reset_handler:000000000000052c DDUP
       stm32eforth.s:1140   .text.reset_handler:0000000000000538 $d
       stm32eforth.s:1141   .text.reset_handler:000000000000053c _DPLUS
       stm32eforth.s:1144   .text.reset_handler:0000000000000540 DPLUS
       stm32eforth.s:1156   .text.reset_handler:0000000000000554 $d
       stm32eforth.s:1157   .text.reset_handler:0000000000000558 _INVER
       stm32eforth.s:1159   .text.reset_handler:000000000000055c $t
       stm32eforth.s:1160   .text.reset_handler:000000000000055c INVER
       stm32eforth.s:1167   .text.reset_handler:0000000000000562 $d
       stm32eforth.s:1168   .text.reset_handler:0000000000000566 _NEGAT
       stm32eforth.s:1171   .text.reset_handler:0000000000000570 NEGAT
       stm32eforth.s:1178   .text.reset_handler:0000000000000576 $d
       stm32eforth.s:1179   .text.reset_handler:000000000000057a _ABSS
       stm32eforth.s:1181   .text.reset_handler:000000000000057e $t
       stm32eforth.s:1182   .text.reset_handler:0000000000000580 ABSS
       stm32eforth.s:1191   .text.reset_handler:000000000000058a $d
       stm32eforth.s:1192   .text.reset_handler:000000000000058e _EQUAL
       stm32eforth.s:1194   .text.reset_handler:0000000000000590 $t
       stm32eforth.s:1195   .text.reset_handler:0000000000000590 EQUAL
       stm32eforth.s:1206   .text.reset_handler:00000000000005a0 $d
       stm32eforth.s:1207   .text.reset_handler:00000000000005a4 _ULESS
       stm32eforth.s:1210   .text.reset_handler:00000000000005a8 ULESS
       stm32eforth.s:1221   .text.reset_handler:00000000000005b8 $d
       stm32eforth.s:1222   .text.reset_handler:00000000000005bc _LESS
       stm32eforth.s:1224   .text.reset_handler:00000000000005be $t
       stm32eforth.s:1225   .text.reset_handler:00000000000005c0 LESS
       stm32eforth.s:1236   .text.reset_handler:00000000000005d0 $d
       stm32eforth.s:1237   .text.reset_handler:00000000000005d4 _GREAT
       stm32eforth.s:1239   .text.reset_handler:00000000000005d6 $t
       stm32eforth.s:1240   .text.reset_handler:00000000000005d8 GREAT
       stm32eforth.s:1251   .text.reset_handler:00000000000005e8 $d
ARM GAS  stm32eforth.s 			page 85


       stm32eforth.s:1252   .text.reset_handler:00000000000005ec _MAX
       stm32eforth.s:1254   .text.reset_handler:00000000000005f0 $t
       stm32eforth.s:1255   .text.reset_handler:00000000000005f0 MAX
       stm32eforth.s:1265   .text.reset_handler:00000000000005fc $d
       stm32eforth.s:1266   .text.reset_handler:0000000000000600 _MIN
       stm32eforth.s:1268   .text.reset_handler:0000000000000604 $t
       stm32eforth.s:1269   .text.reset_handler:0000000000000604 MIN
       stm32eforth.s:1279   .text.reset_handler:0000000000000610 $d
       stm32eforth.s:1280   .text.reset_handler:0000000000000614 _PSTOR
       stm32eforth.s:1283   .text.reset_handler:0000000000000618 PSTOR
       stm32eforth.s:1294   .text.reset_handler:0000000000000628 $d
       stm32eforth.s:1295   .text.reset_handler:000000000000062c _DSTOR
       stm32eforth.s:1298   .text.reset_handler:0000000000000630 DSTOR
       stm32eforth.s:1309   .text.reset_handler:0000000000000644 $d
       stm32eforth.s:1310   .text.reset_handler:0000000000000648 _DAT
       stm32eforth.s:1313   .text.reset_handler:000000000000064c DAT
       stm32eforth.s:1322   .text.reset_handler:0000000000000656 $d
       stm32eforth.s:1323   .text.reset_handler:000000000000065a _COUNT
       stm32eforth.s:1325   .text.reset_handler:0000000000000660 $t
       stm32eforth.s:1326   .text.reset_handler:0000000000000660 COUNT
       stm32eforth.s:1335   .text.reset_handler:000000000000066c $d
       stm32eforth.s:1336   .text.reset_handler:0000000000000670 _DNEGA
       stm32eforth.s:1338   .text.reset_handler:0000000000000678 $t
       stm32eforth.s:1339   .text.reset_handler:0000000000000678 DNEGA
       stm32eforth.s:1357   .text.reset_handler:0000000000000688 DOVAR
       stm32eforth.s:1369   .text.reset_handler:0000000000000694 DOCON
       stm32eforth.s:1380   .text.reset_handler:00000000000006a0 $d
       stm32eforth.s:1381   .text.reset_handler:00000000000006a4 _MSEC
       stm32eforth.s:1384   .text.reset_handler:00000000000006ac MSEC
       stm32eforth.s:1390   .text.reset_handler:00000000000006b6 $d
       stm32eforth.s:1391   .text.reset_handler:00000000000006ba _TIMER
       stm32eforth.s:1393   .text.reset_handler:00000000000006c0 $t
       stm32eforth.s:1402   .text.reset_handler:00000000000006ca $d
       stm32eforth.s:1403   .text.reset_handler:00000000000006ce _TBOOT
       stm32eforth.s:1405   .text.reset_handler:00000000000006d4 $t
       stm32eforth.s:1406   .text.reset_handler:00000000000006d4 TBOOT
       stm32eforth.s:1414   .text.reset_handler:00000000000006de $d
       stm32eforth.s:1415   .text.reset_handler:00000000000006e2 _BASE
       stm32eforth.s:1418   .text.reset_handler:00000000000006e8 BASE
       stm32eforth.s:1430   .text.reset_handler:00000000000006f2 TEMP
       stm32eforth.s:1438   .text.reset_handler:00000000000006fc $d
       stm32eforth.s:1439   .text.reset_handler:0000000000000700 _SPAN
       stm32eforth.s:1442   .text.reset_handler:0000000000000708 SPAN
       stm32eforth.s:1450   .text.reset_handler:0000000000000712 $d
       stm32eforth.s:1451   .text.reset_handler:0000000000000716 _INN
       stm32eforth.s:1453   .text.reset_handler:000000000000071a $t
       stm32eforth.s:1454   .text.reset_handler:000000000000071c INN
       stm32eforth.s:1462   .text.reset_handler:0000000000000726 $d
       stm32eforth.s:1463   .text.reset_handler:000000000000072a _NTIB
       stm32eforth.s:1466   .text.reset_handler:0000000000000730 NTIB
       stm32eforth.s:1474   .text.reset_handler:000000000000073a $d
       stm32eforth.s:1475   .text.reset_handler:000000000000073e _TEVAL
       stm32eforth.s:1477   .text.reset_handler:0000000000000744 $t
       stm32eforth.s:1478   .text.reset_handler:0000000000000744 TEVAL
       stm32eforth.s:1486   .text.reset_handler:000000000000074e $d
       stm32eforth.s:1487   .text.reset_handler:0000000000000752 _HLD
       stm32eforth.s:1489   .text.reset_handler:0000000000000756 $t
ARM GAS  stm32eforth.s 			page 86


       stm32eforth.s:1490   .text.reset_handler:0000000000000758 HLD
       stm32eforth.s:1498   .text.reset_handler:0000000000000762 $d
       stm32eforth.s:1499   .text.reset_handler:0000000000000766 _CNTXT
       stm32eforth.s:1501   .text.reset_handler:000000000000076e $t
       stm32eforth.s:1502   .text.reset_handler:0000000000000770 CNTXT
       stm32eforth.s:1503   .text.reset_handler:0000000000000770 CRRNT
       stm32eforth.s:1511   .text.reset_handler:000000000000077a $d
       stm32eforth.s:1512   .text.reset_handler:000000000000077e _CP
       stm32eforth.s:1515   .text.reset_handler:0000000000000784 CPP
       stm32eforth.s:1522   .text.reset_handler:000000000000078e $d
       stm32eforth.s:1523   .text.reset_handler:0000000000000792 _FCPP
       stm32eforth.s:1526   .text.reset_handler:0000000000000798 FCPP
       stm32eforth.s:1534   .text.reset_handler:00000000000007a2 $d
       stm32eforth.s:1535   .text.reset_handler:00000000000007a6 _LAST
       stm32eforth.s:1538   .text.reset_handler:00000000000007ac LAST
       stm32eforth.s:1549   .text.reset_handler:00000000000007b6 $d
       stm32eforth.s:1550   .text.reset_handler:00000000000007ba _WITHI
       stm32eforth.s:1553   .text.reset_handler:00000000000007c4 WITHI
       stm32eforth.s:1568   .text.reset_handler:00000000000007e4 $d
       stm32eforth.s:1569   .text.reset_handler:00000000000007e8 _UMMOD
       stm32eforth.s:1572   .text.reset_handler:00000000000007f0 UMMOD
       stm32eforth.s:1576   .text.reset_handler:00000000000007fa UMMOD0
       stm32eforth.s:1583   .text.reset_handler:000000000000080a UMMOD1
       stm32eforth.s:1588   .text.reset_handler:0000000000000814 UMMOD2
       stm32eforth.s:1598   .text.reset_handler:000000000000081e $d
       stm32eforth.s:1599   .text.reset_handler:0000000000000822 _MSMOD
       stm32eforth.s:1601   .text.reset_handler:0000000000000828 $t
       stm32eforth.s:1602   .text.reset_handler:0000000000000828 MSMOD
       stm32eforth.s:1609   .text.reset_handler:0000000000000840 $d
       stm32eforth.s:1614   .text.reset_handler:0000000000000854 MMOD1
       stm32eforth.s:1610   .text.reset_handler:0000000000000844 $t
       stm32eforth.s:1619   .text.reset_handler:0000000000000864 $d
       stm32eforth.s:1622   .text.reset_handler:0000000000000870 MMOD2
       stm32eforth.s:1620   .text.reset_handler:0000000000000868 $t
       stm32eforth.s:1627   .text.reset_handler:0000000000000880 $d
       stm32eforth.s:1631   .text.reset_handler:0000000000000890 MMOD3
       stm32eforth.s:1628   .text.reset_handler:0000000000000884 $t
       stm32eforth.s:1637   .text.reset_handler:0000000000000894 $d
       stm32eforth.s:1638   .text.reset_handler:0000000000000898 _SLMOD
       stm32eforth.s:1641   .text.reset_handler:00000000000008a0 SLMOD
       stm32eforth.s:1652   .text.reset_handler:00000000000008b8 $d
       stm32eforth.s:1653   .text.reset_handler:00000000000008bc _MODD
       stm32eforth.s:1655   .text.reset_handler:00000000000008c0 $t
       stm32eforth.s:1656   .text.reset_handler:00000000000008c0 MODD
       stm32eforth.s:1665   .text.reset_handler:00000000000008d0 $d
       stm32eforth.s:1666   .text.reset_handler:00000000000008d4 _SLASH
       stm32eforth.s:1668   .text.reset_handler:00000000000008d6 $t
       stm32eforth.s:1669   .text.reset_handler:00000000000008d8 SLASH
       stm32eforth.s:1679   .text.reset_handler:00000000000008ec $d
       stm32eforth.s:1680   .text.reset_handler:00000000000008f0 _SSMOD
       stm32eforth.s:1682   .text.reset_handler:00000000000008f6 $t
       stm32eforth.s:1683   .text.reset_handler:00000000000008f8 SSMOD
       stm32eforth.s:1694   .text.reset_handler:0000000000000910 $d
       stm32eforth.s:1695   .text.reset_handler:0000000000000914 _STASL
       stm32eforth.s:1698   .text.reset_handler:0000000000000918 STASL
       stm32eforth.s:1711   .text.reset_handler:000000000000092c $d
       stm32eforth.s:1712   .text.reset_handler:0000000000000930 _ALGND
ARM GAS  stm32eforth.s 			page 87


       stm32eforth.s:1714   .text.reset_handler:0000000000000938 $t
       stm32eforth.s:1715   .text.reset_handler:0000000000000938 ALGND
       stm32eforth.s:1724   .text.reset_handler:0000000000000946 $d
       stm32eforth.s:1725   .text.reset_handler:000000000000094a _TCHAR
       stm32eforth.s:1727   .text.reset_handler:0000000000000950 $t
       stm32eforth.s:1728   .text.reset_handler:0000000000000950 TCHAR
       stm32eforth.s:1731   .text.reset_handler:0000000000000958 $d
       stm32eforth.s:1732   .text.reset_handler:000000000000095c $t
       stm32eforth.s:1736   .text.reset_handler:000000000000096c $d
       stm32eforth.s:1737   .text.reset_handler:0000000000000970 $t
       stm32eforth.s:1740   .text.reset_handler:000000000000097c $d
       stm32eforth.s:1744   .text.reset_handler:000000000000098c TCHA1
       stm32eforth.s:1741   .text.reset_handler:0000000000000980 $t
       stm32eforth.s:1743   .text.reset_handler:0000000000000988 $d
       stm32eforth.s:1745   .text.reset_handler:000000000000098c $t
       stm32eforth.s:1750   .text.reset_handler:0000000000000990 $d
       stm32eforth.s:1751   .text.reset_handler:0000000000000994 _DEPTH
       stm32eforth.s:1753   .text.reset_handler:000000000000099a $t
       stm32eforth.s:1754   .text.reset_handler:000000000000099c DEPTH
       stm32eforth.s:1766   .text.reset_handler:00000000000009b6 $d
       stm32eforth.s:1767   .text.reset_handler:00000000000009ba _PICK
       stm32eforth.s:1770   .text.reset_handler:00000000000009c0 PICK
       stm32eforth.s:1785   .text.reset_handler:00000000000009dc $d
       stm32eforth.s:1786   .text.reset_handler:00000000000009e0 _HERE
       stm32eforth.s:1789   .text.reset_handler:00000000000009e8 HERE
       stm32eforth.s:1798   .text.reset_handler:00000000000009f8 $d
       stm32eforth.s:1799   .text.reset_handler:00000000000009fc _PAD
       stm32eforth.s:1801   .text.reset_handler:0000000000000a00 $t
       stm32eforth.s:1802   .text.reset_handler:0000000000000a00 PAD
       stm32eforth.s:1811   .text.reset_handler:0000000000000a10 $d
       stm32eforth.s:1812   .text.reset_handler:0000000000000a14 _TIB
       stm32eforth.s:1814   .text.reset_handler:0000000000000a18 $t
       stm32eforth.s:1815   .text.reset_handler:0000000000000a18 TIB
       stm32eforth.s:1823   .text.reset_handler:0000000000000a20 $d
       stm32eforth.s:1824   .text.reset_handler:0000000000000a24 _ATEXE
       stm32eforth.s:1827   .text.reset_handler:0000000000000a30 ATEXE
       stm32eforth.s:1839   .text.reset_handler:0000000000000a42 $d
       stm32eforth.s:1840   .text.reset_handler:0000000000000a46 _CMOVE
       stm32eforth.s:1842   .text.reset_handler:0000000000000a4c $t
       stm32eforth.s:1843   .text.reset_handler:0000000000000a4c CMOVE
       stm32eforth.s:1850   .text.reset_handler:0000000000000a5e CMOV1
       stm32eforth.s:1847   .text.reset_handler:0000000000000a56 CMOV0
       stm32eforth.s:1855   .text.reset_handler:0000000000000a68 CMOV2
       stm32eforth.s:1862   .text.reset_handler:0000000000000a6e $d
       stm32eforth.s:1863   .text.reset_handler:0000000000000a72 _MOVE
       stm32eforth.s:1866   .text.reset_handler:0000000000000a78 MOVE
       stm32eforth.s:1874   .text.reset_handler:0000000000000a8e MOVE1
       stm32eforth.s:1871   .text.reset_handler:0000000000000a86 MOVE0
       stm32eforth.s:1879   .text.reset_handler:0000000000000a98 MOVE2
       stm32eforth.s:1886   .text.reset_handler:0000000000000a9e $d
       stm32eforth.s:1887   .text.reset_handler:0000000000000aa2 _FILL
       stm32eforth.s:1890   .text.reset_handler:0000000000000aa8 FILL
       stm32eforth.s:1893   .text.reset_handler:0000000000000ab0 FILL0
       stm32eforth.s:1896   .text.reset_handler:0000000000000ab4 FILL1
       stm32eforth.s:1902   .text.reset_handler:0000000000000ac2 FILL2
       stm32eforth.s:1909   .text.reset_handler:0000000000000ac8 $d
       stm32eforth.s:1910   .text.reset_handler:0000000000000acc _PACKS
ARM GAS  stm32eforth.s 			page 88


       stm32eforth.s:1913   .text.reset_handler:0000000000000ad4 PACKS
       stm32eforth.s:1922   .text.reset_handler:0000000000000af4 $d
       stm32eforth.s:1923   .text.reset_handler:0000000000000af8 $t
       stm32eforth.s:1925   .text.reset_handler:0000000000000b00 $d
       stm32eforth.s:1926   .text.reset_handler:0000000000000b04 $t
       stm32eforth.s:1943   .text.reset_handler:0000000000000b2c $d
       stm32eforth.s:1944   .text.reset_handler:0000000000000b30 _DIGIT
       stm32eforth.s:1946   .text.reset_handler:0000000000000b36 $t
       stm32eforth.s:1947   .text.reset_handler:0000000000000b38 DIGIT
       stm32eforth.s:1950   .text.reset_handler:0000000000000b40 $d
       stm32eforth.s:1951   .text.reset_handler:0000000000000b44 $t
       stm32eforth.s:1961   .text.reset_handler:0000000000000b5c $d
       stm32eforth.s:1962   .text.reset_handler:0000000000000b60 _EXTRC
       stm32eforth.s:1964   .text.reset_handler:0000000000000b68 $t
       stm32eforth.s:1965   .text.reset_handler:0000000000000b68 EXTRC
       stm32eforth.s:1968   .text.reset_handler:0000000000000b70 $d
       stm32eforth.s:1969   .text.reset_handler:0000000000000b74 $t
       stm32eforth.s:1978   .text.reset_handler:0000000000000b88 $d
       stm32eforth.s:1979   .text.reset_handler:0000000000000b8c _BDIGS
       stm32eforth.s:1982   .text.reset_handler:0000000000000b90 BDIGS
       stm32eforth.s:1992   .text.reset_handler:0000000000000ba4 $d
       stm32eforth.s:1993   .text.reset_handler:0000000000000ba8 _HOLD
       stm32eforth.s:1996   .text.reset_handler:0000000000000bb0 HOLD
       stm32eforth.s:2010   .text.reset_handler:0000000000000bd4 $d
       stm32eforth.s:2011   .text.reset_handler:0000000000000bd8 _DIG
       stm32eforth.s:2013   .text.reset_handler:0000000000000bda $t
       stm32eforth.s:2014   .text.reset_handler:0000000000000bdc DIG
       stm32eforth.s:2025   .text.reset_handler:0000000000000bf4 $d
       stm32eforth.s:2026   .text.reset_handler:0000000000000bf8 _DIGS
       stm32eforth.s:2029   .text.reset_handler:0000000000000bfc DIGS
       stm32eforth.s:2031   .text.reset_handler:0000000000000c00 DIGS1
       stm32eforth.s:2035   .text.reset_handler:0000000000000c0c $d
       stm32eforth.s:2037   .text.reset_handler:0000000000000c12 DIGS2
       stm32eforth.s:2036   .text.reset_handler:0000000000000c10 $t
       stm32eforth.s:2043   .text.reset_handler:0000000000000c16 $d
       stm32eforth.s:2044   .text.reset_handler:0000000000000c1a _SIGN
       stm32eforth.s:2047   .text.reset_handler:0000000000000c20 SIGN
       stm32eforth.s:2051   .text.reset_handler:0000000000000c2c $d
       stm32eforth.s:2055   .text.reset_handler:0000000000000c3c SIGN1
       stm32eforth.s:2052   .text.reset_handler:0000000000000c30 $t
       stm32eforth.s:2053   .text.reset_handler:0000000000000c34 $d
       stm32eforth.s:2054   .text.reset_handler:0000000000000c38 $t
       stm32eforth.s:2061   .text.reset_handler:0000000000000c40 $d
       stm32eforth.s:2062   .text.reset_handler:0000000000000c44 _EDIGS
       stm32eforth.s:2065   .text.reset_handler:0000000000000c48 EDIGS
       stm32eforth.s:2082   .text.reset_handler:0000000000000c68 STRR
       stm32eforth.s:2097   .text.reset_handler:0000000000000c90 $d
       stm32eforth.s:2098   .text.reset_handler:0000000000000c94 _HEX
       stm32eforth.s:2100   .text.reset_handler:0000000000000c98 $t
       stm32eforth.s:2101   .text.reset_handler:0000000000000c98 HEX
       stm32eforth.s:2104   .text.reset_handler:0000000000000ca0 $d
       stm32eforth.s:2105   .text.reset_handler:0000000000000ca4 $t
       stm32eforth.s:2112   .text.reset_handler:0000000000000cb0 $d
       stm32eforth.s:2113   .text.reset_handler:0000000000000cb4 _DECIM
       stm32eforth.s:2115   .text.reset_handler:0000000000000cbc $t
       stm32eforth.s:2116   .text.reset_handler:0000000000000cbc DECIM
       stm32eforth.s:2119   .text.reset_handler:0000000000000cc4 $d
ARM GAS  stm32eforth.s 			page 89


       stm32eforth.s:2120   .text.reset_handler:0000000000000cc8 $t
       stm32eforth.s:2130   .text.reset_handler:0000000000000cd4 $d
       stm32eforth.s:2131   .text.reset_handler:0000000000000cd8 _DIGTQ
       stm32eforth.s:2134   .text.reset_handler:0000000000000ce0 DIGTQ
       stm32eforth.s:2138   .text.reset_handler:0000000000000cec $d
       stm32eforth.s:2139   .text.reset_handler:0000000000000cf0 $t
       stm32eforth.s:2141   .text.reset_handler:0000000000000cf8 $d
       stm32eforth.s:2142   .text.reset_handler:0000000000000cfc $t
       stm32eforth.s:2145   .text.reset_handler:0000000000000d08 $d
       stm32eforth.s:2154   .text.reset_handler:0000000000000d2c DGTQ1
       stm32eforth.s:2146   .text.reset_handler:0000000000000d0c $t
       stm32eforth.s:2147   .text.reset_handler:0000000000000d10 $d
       stm32eforth.s:2148   .text.reset_handler:0000000000000d14 $t
       stm32eforth.s:2151   .text.reset_handler:0000000000000d20 $d
       stm32eforth.s:2152   .text.reset_handler:0000000000000d24 $t
       stm32eforth.s:2163   .text.reset_handler:0000000000000d3c $d
       stm32eforth.s:2164   .text.reset_handler:0000000000000d40 _NUMBQ
       stm32eforth.s:2166   .text.reset_handler:0000000000000d48 $t
       stm32eforth.s:2167   .text.reset_handler:0000000000000d48 NUMBQ
       stm32eforth.s:2173   .text.reset_handler:0000000000000d5c $d
       stm32eforth.s:2174   .text.reset_handler:0000000000000d60 $t
       stm32eforth.s:2179   .text.reset_handler:0000000000000d74 $d
       stm32eforth.s:2180   .text.reset_handler:0000000000000d78 $t
       stm32eforth.s:2182   .text.reset_handler:0000000000000d80 $d
       stm32eforth.s:2188   .text.reset_handler:0000000000000d98 NUMQ1
       stm32eforth.s:2183   .text.reset_handler:0000000000000d84 $t
       stm32eforth.s:2192   .text.reset_handler:0000000000000da4 $d
       stm32eforth.s:2193   .text.reset_handler:0000000000000da8 $t
       stm32eforth.s:2203   .text.reset_handler:0000000000000dd0 $d
       stm32eforth.s:2242   .text.reset_handler:0000000000000e5c NUMQ6
       stm32eforth.s:2204   .text.reset_handler:0000000000000dd4 $t
       stm32eforth.s:2206   .text.reset_handler:0000000000000ddc NUMQ2
       stm32eforth.s:2214   .text.reset_handler:0000000000000df8 $d
       stm32eforth.s:2233   .text.reset_handler:0000000000000e40 NUMQ4
       stm32eforth.s:2215   .text.reset_handler:0000000000000dfc $t
       stm32eforth.s:2223   .text.reset_handler:0000000000000e1c $d
       stm32eforth.s:2224   .text.reset_handler:0000000000000e20 $t
       stm32eforth.s:2228   .text.reset_handler:0000000000000e30 $d
       stm32eforth.s:2230   .text.reset_handler:0000000000000e38 NUMQ3
       stm32eforth.s:2229   .text.reset_handler:0000000000000e34 $t
       stm32eforth.s:2240   .text.reset_handler:0000000000000e58 NUMQ5
       stm32eforth.s:2239   .text.reset_handler:0000000000000e54 $d
       stm32eforth.s:2241   .text.reset_handler:0000000000000e58 $t
       stm32eforth.s:2256   .text.reset_handler:0000000000000e74 $d
       stm32eforth.s:2257   .text.reset_handler:0000000000000e78 _KEY
       stm32eforth.s:2259   .text.reset_handler:0000000000000e7c $t
       stm32eforth.s:2260   .text.reset_handler:0000000000000e7c KEY
       stm32eforth.s:2262   .text.reset_handler:0000000000000e80 KEY1
       stm32eforth.s:2265   .text.reset_handler:0000000000000e88 $d
       stm32eforth.s:2266   .text.reset_handler:0000000000000e8c $t
       stm32eforth.s:2271   .text.reset_handler:0000000000000e90 $d
       stm32eforth.s:2272   .text.reset_handler:0000000000000e94 _SPACE
       stm32eforth.s:2274   .text.reset_handler:0000000000000e9a $t
       stm32eforth.s:2275   .text.reset_handler:0000000000000e9c SPACE
       stm32eforth.s:2284   .text.reset_handler:0000000000000eac $d
       stm32eforth.s:2285   .text.reset_handler:0000000000000eb0 _SPACS
       stm32eforth.s:2288   .text.reset_handler:0000000000000eb8 SPACS
ARM GAS  stm32eforth.s 			page 90


       stm32eforth.s:2291   .text.reset_handler:0000000000000ec0 $d
       stm32eforth.s:2292   .text.reset_handler:0000000000000ec4 $t
       stm32eforth.s:2297   .text.reset_handler:0000000000000ed4 CHAR2
       stm32eforth.s:2295   .text.reset_handler:0000000000000ed0 CHAR1
       stm32eforth.s:2299   .text.reset_handler:0000000000000ed8 $d
       stm32eforth.s:2300   .text.reset_handler:0000000000000edc $t
       stm32eforth.s:2305   .text.reset_handler:0000000000000ee0 $d
       stm32eforth.s:2306   .text.reset_handler:0000000000000ee4 _TYPEE
       stm32eforth.s:2309   .text.reset_handler:0000000000000eec TYPEE
       stm32eforth.s:2317   .text.reset_handler:0000000000000f04 TYPE2
       stm32eforth.s:2313   .text.reset_handler:0000000000000ef8 TYPE1
       stm32eforth.s:2319   .text.reset_handler:0000000000000f08 $d
       stm32eforth.s:2320   .text.reset_handler:0000000000000f0c $t
       stm32eforth.s:2326   .text.reset_handler:0000000000000f14 $d
       stm32eforth.s:2327   .text.reset_handler:0000000000000f18 _CR
       stm32eforth.s:2333   .text.reset_handler:0000000000000f24 $d
       stm32eforth.s:2334   .text.reset_handler:0000000000000f28 $t
       stm32eforth.s:2336   .text.reset_handler:0000000000000f30 $d
       stm32eforth.s:2337   .text.reset_handler:0000000000000f34 $t
       stm32eforth.s:2348   .text.reset_handler:0000000000000f3c DOSTR
       stm32eforth.s:2370   .text.reset_handler:0000000000000f70 STRQP
       stm32eforth.s:2382   .text.reset_handler:0000000000000f7c DOTST
       stm32eforth.s:2404   .text.reset_handler:0000000000000f9c $d
       stm32eforth.s:2405   .text.reset_handler:0000000000000fa0 _DOTR
       stm32eforth.s:2408   .text.reset_handler:0000000000000fa4 DOTR
       stm32eforth.s:2422   .text.reset_handler:0000000000000fc8 $d
       stm32eforth.s:2423   .text.reset_handler:0000000000000fcc _UDOTR
       stm32eforth.s:2425   .text.reset_handler:0000000000000fd0 $t
       stm32eforth.s:2426   .text.reset_handler:0000000000000fd0 UDOTR
       stm32eforth.s:2442   .text.reset_handler:0000000000000ffc $d
       stm32eforth.s:2443   .text.reset_handler:0000000000001000 _UDOT
       stm32eforth.s:2446   .text.reset_handler:0000000000001004 UDOT
       stm32eforth.s:2458   .text.reset_handler:0000000000001020 $d
       stm32eforth.s:2459   .text.reset_handler:0000000000001024 _DOT
       stm32eforth.s:2461   .text.reset_handler:0000000000001026 $t
       stm32eforth.s:2462   .text.reset_handler:0000000000001028 DOT
       stm32eforth.s:2467   .text.reset_handler:0000000000001038 $d
       stm32eforth.s:2468   .text.reset_handler:000000000000103c $t
       stm32eforth.s:2470   .text.reset_handler:0000000000001044 $d
       stm32eforth.s:2473   .text.reset_handler:0000000000001050 DOT1
       stm32eforth.s:2471   .text.reset_handler:0000000000001048 $t
       stm32eforth.s:2482   .text.reset_handler:0000000000001060 $d
       stm32eforth.s:2483   .text.reset_handler:0000000000001064 _QUEST
       stm32eforth.s:2485   .text.reset_handler:0000000000001066 $t
       stm32eforth.s:2486   .text.reset_handler:0000000000001068 QUEST
       stm32eforth.s:2502   .text.reset_handler:0000000000001078 PARS
       stm32eforth.s:2510   .text.reset_handler:0000000000001094 $d
       stm32eforth.s:2578   .text.reset_handler:0000000000001186 PARS8
       stm32eforth.s:2511   .text.reset_handler:0000000000001098 $t
       stm32eforth.s:2517   .text.reset_handler:00000000000010b0 $d
       stm32eforth.s:2539   .text.reset_handler:0000000000001100 PARS3
       stm32eforth.s:2518   .text.reset_handler:00000000000010b4 $t
       stm32eforth.s:2519   .text.reset_handler:00000000000010b8 PARS1
       stm32eforth.s:2527   .text.reset_handler:00000000000010d4 $d
       stm32eforth.s:2537   .text.reset_handler:00000000000010fc PARS2
       stm32eforth.s:2528   .text.reset_handler:00000000000010d8 $t
       stm32eforth.s:2530   .text.reset_handler:00000000000010e0 $d
ARM GAS  stm32eforth.s 			page 91


       stm32eforth.s:2531   .text.reset_handler:00000000000010e4 $t
       stm32eforth.s:2534   .text.reset_handler:00000000000010f0 $d
       stm32eforth.s:2535   .text.reset_handler:00000000000010f4 $t
       stm32eforth.s:2543   .text.reset_handler:000000000000110c PARS4
       stm32eforth.s:2554   .text.reset_handler:0000000000001134 $d
       stm32eforth.s:2556   .text.reset_handler:000000000000113c PARS5
       stm32eforth.s:2555   .text.reset_handler:0000000000001138 $t
       stm32eforth.s:2558   .text.reset_handler:0000000000001140 $d
       stm32eforth.s:2565   .text.reset_handler:000000000000115a PARS6
       stm32eforth.s:2559   .text.reset_handler:0000000000001144 $t
       stm32eforth.s:2561   .text.reset_handler:000000000000114c $d
       stm32eforth.s:2562   .text.reset_handler:0000000000001150 $t
       stm32eforth.s:2571   .text.reset_handler:000000000000116e PARS7
       stm32eforth.s:2587   .text.reset_handler:0000000000001196 $d
       stm32eforth.s:2588   .text.reset_handler:000000000000119a _PARSE
       stm32eforth.s:2590   .text.reset_handler:00000000000011a0 $t
       stm32eforth.s:2591   .text.reset_handler:00000000000011a0 PARSE
       stm32eforth.s:2612   .text.reset_handler:00000000000011e0 $d
       stm32eforth.s:2613   .text.reset_handler:00000000000011e4 _DOTPR
       stm32eforth.s:2616   .text.reset_handler:00000000000011e8 DOTPR
       stm32eforth.s:2619   .text.reset_handler:00000000000011f0 $d
       stm32eforth.s:2620   .text.reset_handler:00000000000011f4 $t
       stm32eforth.s:2627   .text.reset_handler:0000000000001200 $d
       stm32eforth.s:2628   .text.reset_handler:0000000000001204 _PAREN
       stm32eforth.s:2630   .text.reset_handler:0000000000001206 $t
       stm32eforth.s:2631   .text.reset_handler:0000000000001208 PAREN
       stm32eforth.s:2634   .text.reset_handler:0000000000001210 $d
       stm32eforth.s:2635   .text.reset_handler:0000000000001214 $t
       stm32eforth.s:2642   .text.reset_handler:0000000000001220 $d
       stm32eforth.s:2643   .text.reset_handler:0000000000001224 _BKSLA
       stm32eforth.s:2645   .text.reset_handler:0000000000001226 $t
       stm32eforth.s:2646   .text.reset_handler:0000000000001228 BKSLA
       stm32eforth.s:2657   .text.reset_handler:0000000000001240 $d
       stm32eforth.s:2658   .text.reset_handler:0000000000001244 _CHAR
       stm32eforth.s:2661   .text.reset_handler:000000000000124c CHAR
       stm32eforth.s:2672   .text.reset_handler:0000000000001264 $d
       stm32eforth.s:2673   .text.reset_handler:0000000000001268 _WORDD
       stm32eforth.s:2676   .text.reset_handler:0000000000001270 WORDD
       stm32eforth.s:2687   .text.reset_handler:0000000000001288 $d
       stm32eforth.s:2688   .text.reset_handler:000000000000128c _TOKEN
       stm32eforth.s:2690   .text.reset_handler:0000000000001292 $t
       stm32eforth.s:2691   .text.reset_handler:0000000000001294 TOKEN
       stm32eforth.s:2703   .text.reset_handler:00000000000012a4 $d
       stm32eforth.s:2704   .text.reset_handler:00000000000012a8 _NAMET
       stm32eforth.s:2706   .text.reset_handler:00000000000012ae $t
       stm32eforth.s:2707   .text.reset_handler:00000000000012b0 NAMET
       stm32eforth.s:2711   .text.reset_handler:00000000000012bc $d
       stm32eforth.s:2712   .text.reset_handler:00000000000012c0 $t
       stm32eforth.s:2720   .text.reset_handler:00000000000012d0 $d
       stm32eforth.s:2721   .text.reset_handler:00000000000012d4 _SAMEQ
       stm32eforth.s:2723   .text.reset_handler:00000000000012da $t
       stm32eforth.s:2724   .text.reset_handler:00000000000012dc SAMEQ
       stm32eforth.s:2746   .text.reset_handler:000000000000132c SAME2
       stm32eforth.s:2728   .text.reset_handler:00000000000012e8 SAME1
       stm32eforth.s:2742   .text.reset_handler:000000000000131c $d
       stm32eforth.s:2743   .text.reset_handler:0000000000001320 $t
       stm32eforth.s:2748   .text.reset_handler:0000000000001330 $d
ARM GAS  stm32eforth.s 			page 92


       stm32eforth.s:2749   .text.reset_handler:0000000000001334 $t
       stm32eforth.s:2750   .text.reset_handler:0000000000001338 $d
       stm32eforth.s:2751   .text.reset_handler:000000000000133c $t
       stm32eforth.s:2760   .text.reset_handler:0000000000001340 FIND
       stm32eforth.s:2773   .text.reset_handler:0000000000001370 FIND1
       stm32eforth.s:2776   .text.reset_handler:0000000000001378 $d
       stm32eforth.s:2796   .text.reset_handler:00000000000013c0 FIND6
       stm32eforth.s:2777   .text.reset_handler:000000000000137c $t
       stm32eforth.s:2780   .text.reset_handler:0000000000001388 $d
       stm32eforth.s:2781   .text.reset_handler:000000000000138c $t
       stm32eforth.s:2785   .text.reset_handler:000000000000139c $d
       stm32eforth.s:2789   .text.reset_handler:00000000000013ac FIND2
       stm32eforth.s:2786   .text.reset_handler:00000000000013a0 $t
       stm32eforth.s:2794   .text.reset_handler:00000000000013bc FIND3
       stm32eforth.s:2803   .text.reset_handler:00000000000013d8 FIND4
       stm32eforth.s:2805   .text.reset_handler:00000000000013dc $d
       stm32eforth.s:2810   .text.reset_handler:00000000000013f0 FIND5
       stm32eforth.s:2806   .text.reset_handler:00000000000013e0 $t
       stm32eforth.s:2824   .text.reset_handler:0000000000001414 $d
       stm32eforth.s:2825   .text.reset_handler:0000000000001418 _NAMEQ
       stm32eforth.s:2827   .text.reset_handler:000000000000141e $t
       stm32eforth.s:2828   .text.reset_handler:0000000000001420 NAMEQ
       stm32eforth.s:2845   .text.reset_handler:0000000000001434 BKSP
       stm32eforth.s:2854   .text.reset_handler:0000000000001454 $d
       stm32eforth.s:2867   .text.reset_handler:000000000000147c BACK1
       stm32eforth.s:2855   .text.reset_handler:0000000000001458 $t
       stm32eforth.s:2856   .text.reset_handler:000000000000145c $d
       stm32eforth.s:2857   .text.reset_handler:0000000000001460 $t
       stm32eforth.s:2864   .text.reset_handler:0000000000001474 $d
       stm32eforth.s:2865   .text.reset_handler:0000000000001478 $t
       stm32eforth.s:2877   .text.reset_handler:0000000000001480 TAP
       stm32eforth.s:2894   .text.reset_handler:000000000000149c KTAP
       stm32eforth.s:2895   .text.reset_handler:000000000000149c TTAP
       stm32eforth.s:2899   .text.reset_handler:00000000000014a8 $d
       stm32eforth.s:2900   .text.reset_handler:00000000000014ac $t
       stm32eforth.s:2902   .text.reset_handler:00000000000014b4 $d
       stm32eforth.s:2915   .text.reset_handler:00000000000014e4 KTAP2
       stm32eforth.s:2903   .text.reset_handler:00000000000014b8 $t
       stm32eforth.s:2904   .text.reset_handler:00000000000014bc $d
       stm32eforth.s:2905   .text.reset_handler:00000000000014c0 $t
       stm32eforth.s:2907   .text.reset_handler:00000000000014c8 $d
       stm32eforth.s:2912   .text.reset_handler:00000000000014dc KTAP1
       stm32eforth.s:2908   .text.reset_handler:00000000000014cc $t
       stm32eforth.s:2911   .text.reset_handler:00000000000014d8 $d
       stm32eforth.s:2913   .text.reset_handler:00000000000014dc $t
       stm32eforth.s:2925   .text.reset_handler:00000000000014f8 $d
       stm32eforth.s:2926   .text.reset_handler:00000000000014fc _ACCEP
       stm32eforth.s:2929   .text.reset_handler:0000000000001504 ACCEP
       stm32eforth.s:2934   .text.reset_handler:0000000000001514 ACCP1
       stm32eforth.s:2938   .text.reset_handler:0000000000001520 $d
       stm32eforth.s:2954   .text.reset_handler:0000000000001550 ACCP4
       stm32eforth.s:2939   .text.reset_handler:0000000000001524 $t
       stm32eforth.s:2943   .text.reset_handler:0000000000001534 $d
       stm32eforth.s:2944   .text.reset_handler:0000000000001538 $t
       stm32eforth.s:2946   .text.reset_handler:0000000000001540 $d
       stm32eforth.s:2949   .text.reset_handler:000000000000154a ACCP2
       stm32eforth.s:2947   .text.reset_handler:0000000000001544 $t
ARM GAS  stm32eforth.s 			page 93


       stm32eforth.s:2952   .text.reset_handler:000000000000154e ACCP3
       stm32eforth.s:2963   .text.reset_handler:0000000000001560 $d
       stm32eforth.s:2964   .text.reset_handler:0000000000001564 _QUERY
       stm32eforth.s:2966   .text.reset_handler:000000000000156a $t
       stm32eforth.s:2967   .text.reset_handler:000000000000156c QUERY
       stm32eforth.s:2971   .text.reset_handler:0000000000001578 $d
       stm32eforth.s:2972   .text.reset_handler:000000000000157c $t
       stm32eforth.s:2977   .text.reset_handler:0000000000001590 $d
       stm32eforth.s:2978   .text.reset_handler:0000000000001594 $t
       stm32eforth.s:2988   .text.reset_handler:00000000000015a0 $d
       stm32eforth.s:2989   .text.reset_handler:00000000000015a4 _ABORT
       stm32eforth.s:2991   .text.reset_handler:00000000000015aa $t
       stm32eforth.s:2992   .text.reset_handler:00000000000015ac ABORT
       stm32eforth.s:2998   .text.reset_handler:00000000000015c0 $d
       stm32eforth.s:2999   .text.reset_handler:00000000000015c4 $t
       stm32eforth.s:3145   .text.reset_handler:0000000000001734 PRESE
       stm32eforth.s:3159   .text.reset_handler:0000000000001754 QUIT
       stm32eforth.s:3011   .text.reset_handler:00000000000015d4 ABORQ
       stm32eforth.s:3014   .text.reset_handler:00000000000015dc $d
       stm32eforth.s:3020   .text.reset_handler:00000000000015f4 ABOR1
       stm32eforth.s:3015   .text.reset_handler:00000000000015e0 $t
       stm32eforth.s:3031   .text.reset_handler:0000000000001600 $d
       stm32eforth.s:3032   .text.reset_handler:0000000000001604 _INTER
       stm32eforth.s:3034   .text.reset_handler:0000000000001610 $t
       stm32eforth.s:3040   .text.reset_handler:0000000000001620 $d
       stm32eforth.s:3051   .text.reset_handler:0000000000001650 INTE1
       stm32eforth.s:3041   .text.reset_handler:0000000000001624 $t
       stm32eforth.s:3043   .text.reset_handler:000000000000162c $d
       stm32eforth.s:3044   .text.reset_handler:0000000000001630 $t
       stm32eforth.s:3046   .text.reset_handler:0000000000001638 $d
       stm32eforth.s:3048   .text.reset_handler:0000000000001646 $t
       stm32eforth.s:3054   .text.reset_handler:0000000000001658 $d
       stm32eforth.s:3056   .text.reset_handler:0000000000001660 INTE2
       stm32eforth.s:3055   .text.reset_handler:000000000000165c $t
       stm32eforth.s:3062   .text.reset_handler:0000000000001664 $d
       stm32eforth.s:3063   .text.reset_handler:0000000000001668 _LBRAC
       stm32eforth.s:3065   .text.reset_handler:000000000000166a $t
       stm32eforth.s:3066   .text.reset_handler:000000000000166c LBRAC
       stm32eforth.s:3069   .text.reset_handler:0000000000001674 $d
       stm32eforth.s:3070   .text.reset_handler:0000000000001678 $t
       stm32eforth.s:3077   .text.reset_handler:0000000000001684 $d
       stm32eforth.s:3078   .text.reset_handler:0000000000001688 _DOTOK
       stm32eforth.s:3080   .text.reset_handler:000000000000168c $t
       stm32eforth.s:3081   .text.reset_handler:000000000000168c DOTOK
       stm32eforth.s:3084   .text.reset_handler:0000000000001694 $d
       stm32eforth.s:3085   .text.reset_handler:0000000000001698 $t
       stm32eforth.s:3089   .text.reset_handler:00000000000016a8 $d
       stm32eforth.s:3093   .text.reset_handler:00000000000016b4 DOTO1
       stm32eforth.s:3090   .text.reset_handler:00000000000016ac $t
       stm32eforth.s:3091   .text.reset_handler:00000000000016b0 $d
       stm32eforth.s:3094   .text.reset_handler:00000000000016b4 $t
       stm32eforth.s:3100   .text.reset_handler:00000000000016bc $d
       stm32eforth.s:3101   .text.reset_handler:00000000000016c0 _QSTAC
       stm32eforth.s:3104   .text.reset_handler:00000000000016c8 QSTAC
       stm32eforth.s:3109   .text.reset_handler:00000000000016d8 $d
       stm32eforth.s:3117   .text.reset_handler:00000000000016e8 $d
       stm32eforth.s:3118   .text.reset_handler:00000000000016ec _EVAL
ARM GAS  stm32eforth.s 			page 94


       stm32eforth.s:3121   .text.reset_handler:00000000000016f4 EVAL
       stm32eforth.s:3123   .text.reset_handler:00000000000016f8 EVAL1
       stm32eforth.s:3128   .text.reset_handler:0000000000001708 $d
       stm32eforth.s:3133   .text.reset_handler:000000000000171c EVAL2
       stm32eforth.s:3129   .text.reset_handler:000000000000170c $t
       stm32eforth.s:3141   .text.reset_handler:0000000000001728 $d
       stm32eforth.s:3142   .text.reset_handler:000000000000172c _PRESE
       stm32eforth.s:3155   .text.reset_handler:0000000000001748 $d
       stm32eforth.s:3156   .text.reset_handler:000000000000174c _QUIT
       stm32eforth.s:3163   .text.reset_handler:0000000000001760 QUIT1
       stm32eforth.s:3165   .text.reset_handler:0000000000001764 QUIT2
       stm32eforth.s:3169   .text.reset_handler:0000000000001770 $d
       stm32eforth.s:3175   .text.reset_handler:0000000000001774 $t
       stm32eforth.s:3186   .text.reset_handler:0000000000001792 WAIT_BSY
       stm32eforth.s:3188   .text.reset_handler:0000000000001796 WAIT1
       stm32eforth.s:3197   .text.reset_handler:00000000000017a0 $d
       stm32eforth.s:3198   .text.reset_handler:00000000000017a4 _ESECT
       stm32eforth.s:3202   .text.reset_handler:00000000000017b4 ESECT
       stm32eforth.s:3220   .text.reset_handler:00000000000017e0 $d
       stm32eforth.s:3221   .text.reset_handler:00000000000017e4 _ISTOR
       stm32eforth.s:3225   .text.reset_handler:00000000000017e8 ISTOR
       stm32eforth.s:3241   .text.reset_handler:000000000000180c $d
       stm32eforth.s:3242   .text.reset_handler:0000000000001810 _TURN
       stm32eforth.s:3244   .text.reset_handler:0000000000001818 $t
       stm32eforth.s:3245   .text.reset_handler:0000000000001818 TURN
       stm32eforth.s:3247   .text.reset_handler:0000000000001820 $d
       stm32eforth.s:3248   .text.reset_handler:0000000000001824 $t
       stm32eforth.s:3249   .text.reset_handler:0000000000001828 $d
       stm32eforth.s:3250   .text.reset_handler:000000000000182c $t
       stm32eforth.s:3251   .text.reset_handler:0000000000001830 $d
       stm32eforth.s:3252   .text.reset_handler:0000000000001834 $t
       stm32eforth.s:3254   .text.reset_handler:000000000000183c $d
       stm32eforth.s:3255   .text.reset_handler:0000000000001840 $t
       stm32eforth.s:3256   .text.reset_handler:0000000000001844 $d
       stm32eforth.s:3257   .text.reset_handler:0000000000001848 $t
       stm32eforth.s:3261   .text.reset_handler:0000000000001858 TURN1
       stm32eforth.s:3271   .text.reset_handler:000000000000187c $d
       stm32eforth.s:3272   .text.reset_handler:0000000000001880 $t
       stm32eforth.s:3281   .text.reset_handler:0000000000001888 $d
       stm32eforth.s:3282   .text.reset_handler:000000000000188c _TICK
       stm32eforth.s:3284   .text.reset_handler:000000000000188e $t
       stm32eforth.s:3285   .text.reset_handler:0000000000001890 TICK
       stm32eforth.s:3290   .text.reset_handler:00000000000018a0 $d
       stm32eforth.s:3292   .text.reset_handler:00000000000018a8 TICK1
       stm32eforth.s:3291   .text.reset_handler:00000000000018a4 $t
       stm32eforth.s:3297   .text.reset_handler:00000000000018ac $d
       stm32eforth.s:3298   .text.reset_handler:00000000000018b0 _ALLOT
       stm32eforth.s:3300   .text.reset_handler:00000000000018b6 $t
       stm32eforth.s:3301   .text.reset_handler:00000000000018b8 ALLOT
       stm32eforth.s:3310   .text.reset_handler:00000000000018c8 $d
       stm32eforth.s:3311   .text.reset_handler:00000000000018cc _COMMA
       stm32eforth.s:3312   .text.reset_handler:00000000000018ce $t
       stm32eforth.s:3313   .text.reset_handler:00000000000018d0 COMMA
       stm32eforth.s:3326   .text.reset_handler:00000000000018f0 $d
       stm32eforth.s:3327   .text.reset_handler:00000000000018f4 _BCOMP
       stm32eforth.s:3329   .text.reset_handler:00000000000018fe $t
       stm32eforth.s:3330   .text.reset_handler:0000000000001900 BCOMP
ARM GAS  stm32eforth.s 			page 95


       stm32eforth.s:3339   .text.reset_handler:0000000000001910 $d
       stm32eforth.s:3340   .text.reset_handler:0000000000001914 _COMPI
       stm32eforth.s:3342   .text.reset_handler:000000000000191c $t
       stm32eforth.s:3343   .text.reset_handler:000000000000191c COMPI
       stm32eforth.s:3758   .text.reset_handler:0000000000001ce8 CALLC
       stm32eforth.s:3358   .text.reset_handler:0000000000001944 $d
       stm32eforth.s:3359   .text.reset_handler:0000000000001948 _LITER
       stm32eforth.s:3361   .text.reset_handler:0000000000001950 $t
       stm32eforth.s:3362   .text.reset_handler:0000000000001950 LITER
       stm32eforth.s:3365   .text.reset_handler:0000000000001958 $d
       stm32eforth.s:3366   .text.reset_handler:000000000000195c $t
       stm32eforth.s:3376   .text.reset_handler:0000000000001964 STRCQ
       stm32eforth.s:3379   .text.reset_handler:000000000000196c $d
       stm32eforth.s:3380   .text.reset_handler:0000000000001970 $t
       stm32eforth.s:3383   .text.reset_handler:000000000000197c $d
       stm32eforth.s:3384   .text.reset_handler:0000000000001980 $t
       stm32eforth.s:3398   .text.reset_handler:000000000000199c $d
       stm32eforth.s:3399   .text.reset_handler:00000000000019a0 _FOR
       stm32eforth.s:3401   .text.reset_handler:00000000000019a4 $t
       stm32eforth.s:3402   .text.reset_handler:00000000000019a4 FOR
       stm32eforth.s:3405   .text.reset_handler:00000000000019ac $d
       stm32eforth.s:3406   .text.reset_handler:00000000000019b0 $t
       stm32eforth.s:3412   .text.reset_handler:00000000000019b8 $d
       stm32eforth.s:3413   .text.reset_handler:00000000000019bc _BEGIN
       stm32eforth.s:3415   .text.reset_handler:00000000000019c2 $t
       stm32eforth.s:3416   .text.reset_handler:00000000000019c4 BEGIN
       stm32eforth.s:3424   .text.reset_handler:00000000000019d0 $d
       stm32eforth.s:3425   .text.reset_handler:00000000000019d4 _NEXT
       stm32eforth.s:3428   .text.reset_handler:00000000000019dc NEXT
       stm32eforth.s:3431   .text.reset_handler:00000000000019e4 $d
       stm32eforth.s:3432   .text.reset_handler:00000000000019e8 $t
       stm32eforth.s:3438   .text.reset_handler:00000000000019f0 $d
       stm32eforth.s:3439   .text.reset_handler:00000000000019f4 _UNTIL
       stm32eforth.s:3441   .text.reset_handler:00000000000019fa $t
       stm32eforth.s:3442   .text.reset_handler:00000000000019fc UNTIL
       stm32eforth.s:3445   .text.reset_handler:0000000000001a04 $d
       stm32eforth.s:3446   .text.reset_handler:0000000000001a08 $t
       stm32eforth.s:3452   .text.reset_handler:0000000000001a10 $d
       stm32eforth.s:3453   .text.reset_handler:0000000000001a14 _AGAIN
       stm32eforth.s:3455   .text.reset_handler:0000000000001a1a $t
       stm32eforth.s:3456   .text.reset_handler:0000000000001a1c AGAIN
       stm32eforth.s:3459   .text.reset_handler:0000000000001a24 $d
       stm32eforth.s:3460   .text.reset_handler:0000000000001a28 $t
       stm32eforth.s:3466   .text.reset_handler:0000000000001a30 $d
       stm32eforth.s:3467   .text.reset_handler:0000000000001a34 _IFF
       stm32eforth.s:3470   .text.reset_handler:0000000000001a38 IFF
       stm32eforth.s:3473   .text.reset_handler:0000000000001a40 $d
       stm32eforth.s:3474   .text.reset_handler:0000000000001a44 $t
       stm32eforth.s:3476   .text.reset_handler:0000000000001a4c $d
       stm32eforth.s:3477   .text.reset_handler:0000000000001a50 $t
       stm32eforth.s:3484   .text.reset_handler:0000000000001a5c $d
       stm32eforth.s:3485   .text.reset_handler:0000000000001a60 _AHEAD
       stm32eforth.s:3487   .text.reset_handler:0000000000001a66 $t
       stm32eforth.s:3488   .text.reset_handler:0000000000001a68 AHEAD
       stm32eforth.s:3491   .text.reset_handler:0000000000001a70 $d
       stm32eforth.s:3492   .text.reset_handler:0000000000001a74 $t
       stm32eforth.s:3494   .text.reset_handler:0000000000001a7c $d
ARM GAS  stm32eforth.s 			page 96


       stm32eforth.s:3495   .text.reset_handler:0000000000001a80 $t
       stm32eforth.s:3502   .text.reset_handler:0000000000001a8c $d
       stm32eforth.s:3503   .text.reset_handler:0000000000001a90 _REPEA
       stm32eforth.s:3506   .text.reset_handler:0000000000001a98 REPEA
       stm32eforth.s:3517   .text.reset_handler:0000000000001ab0 $d
       stm32eforth.s:3518   .text.reset_handler:0000000000001ab4 _THENN
       stm32eforth.s:3521   .text.reset_handler:0000000000001abc THENN
       stm32eforth.s:3531   .text.reset_handler:0000000000001ad0 $d
       stm32eforth.s:3532   .text.reset_handler:0000000000001ad4 _AFT
       stm32eforth.s:3534   .text.reset_handler:0000000000001ad8 $t
       stm32eforth.s:3535   .text.reset_handler:0000000000001ad8 AFT
       stm32eforth.s:3546   .text.reset_handler:0000000000001af0 $d
       stm32eforth.s:3547   .text.reset_handler:0000000000001af4 _ELSEE
       stm32eforth.s:3550   .text.reset_handler:0000000000001afc ELSEE
       stm32eforth.s:3560   .text.reset_handler:0000000000001b10 $d
       stm32eforth.s:3561   .text.reset_handler:0000000000001b14 _WHILE
       stm32eforth.s:3563   .text.reset_handler:0000000000001b1a $t
       stm32eforth.s:3564   .text.reset_handler:0000000000001b1c WHILE
       stm32eforth.s:3573   .text.reset_handler:0000000000001b2c $d
       stm32eforth.s:3574   .text.reset_handler:0000000000001b30 _ABRTQ
       stm32eforth.s:3577   .text.reset_handler:0000000000001b38 ABRTQ
       stm32eforth.s:3580   .text.reset_handler:0000000000001b40 $d
       stm32eforth.s:3581   .text.reset_handler:0000000000001b44 $t
       stm32eforth.s:3587   .text.reset_handler:0000000000001b4c $d
       stm32eforth.s:3588   .text.reset_handler:0000000000001b50 _STRQ
       stm32eforth.s:3591   .text.reset_handler:0000000000001b54 STRQ
       stm32eforth.s:3594   .text.reset_handler:0000000000001b5c $d
       stm32eforth.s:3595   .text.reset_handler:0000000000001b60 $t
       stm32eforth.s:3601   .text.reset_handler:0000000000001b68 $d
       stm32eforth.s:3602   .text.reset_handler:0000000000001b6c _DOTQ
       stm32eforth.s:3605   .text.reset_handler:0000000000001b70 DOTQ
       stm32eforth.s:3608   .text.reset_handler:0000000000001b78 $d
       stm32eforth.s:3609   .text.reset_handler:0000000000001b7c $t
       stm32eforth.s:3618   .text.reset_handler:0000000000001b84 $d
       stm32eforth.s:3619   .text.reset_handler:0000000000001b88 _UNIQU
       stm32eforth.s:3621   .text.reset_handler:0000000000001b90 $t
       stm32eforth.s:3622   .text.reset_handler:0000000000001b90 UNIQU
       stm32eforth.s:3627   .text.reset_handler:0000000000001ba0 $d
       stm32eforth.s:3635   .text.reset_handler:0000000000001bbc UNIQ1
       stm32eforth.s:3628   .text.reset_handler:0000000000001ba4 $t
       stm32eforth.s:3629   .text.reset_handler:0000000000001ba8 $d
       stm32eforth.s:3631   .text.reset_handler:0000000000001bb0 $t
       stm32eforth.s:3646   .text.reset_handler:0000000000001bc4 SNAME
       stm32eforth.s:3651   .text.reset_handler:0000000000001bd4 $d
       stm32eforth.s:3665   .text.reset_handler:0000000000001c0c SNAM1
       stm32eforth.s:3652   .text.reset_handler:0000000000001bd8 $t
       stm32eforth.s:3667   .text.reset_handler:0000000000001c10 $d
       stm32eforth.s:3669   .text.reset_handler:0000000000001c18 $t
       stm32eforth.s:3674   .text.reset_handler:0000000000001c1c $d
       stm32eforth.s:3675   .text.reset_handler:0000000000001c20 _SCOMP
       stm32eforth.s:3677   .text.reset_handler:0000000000001c2a $t
       stm32eforth.s:3678   .text.reset_handler:0000000000001c2c SCOMP
       stm32eforth.s:3683   .text.reset_handler:0000000000001c3c $d
       stm32eforth.s:3695   .text.reset_handler:0000000000001c68 SCOM2
       stm32eforth.s:3684   .text.reset_handler:0000000000001c40 $t
       stm32eforth.s:3686   .text.reset_handler:0000000000001c48 $d
       stm32eforth.s:3687   .text.reset_handler:0000000000001c4c $t
ARM GAS  stm32eforth.s 			page 97


       stm32eforth.s:3689   .text.reset_handler:0000000000001c54 $d
       stm32eforth.s:3692   .text.reset_handler:0000000000001c60 SCOM1
       stm32eforth.s:3690   .text.reset_handler:0000000000001c58 $t
       stm32eforth.s:3698   .text.reset_handler:0000000000001c70 $d
       stm32eforth.s:3701   .text.reset_handler:0000000000001c7c SCOM3
       stm32eforth.s:3699   .text.reset_handler:0000000000001c74 $t
       stm32eforth.s:3707   .text.reset_handler:0000000000001c80 $d
       stm32eforth.s:3708   .text.reset_handler:0000000000001c84 _OVERT
       stm32eforth.s:3710   .text.reset_handler:0000000000001c8a $t
       stm32eforth.s:3711   .text.reset_handler:0000000000001c8c OVERT
       stm32eforth.s:3722   .text.reset_handler:0000000000001ca4 $d
       stm32eforth.s:3723   .text.reset_handler:0000000000001ca8 _SEMIS
       stm32eforth.s:3725   .text.reset_handler:0000000000001cac $t
       stm32eforth.s:3726   .text.reset_handler:0000000000001cac SEMIS
       stm32eforth.s:3738   .text.reset_handler:0000000000001cc8 $d
       stm32eforth.s:3739   .text.reset_handler:0000000000001ccc _RBRAC
       stm32eforth.s:3741   .text.reset_handler:0000000000001cce $t
       stm32eforth.s:3742   .text.reset_handler:0000000000001cd0 RBRAC
       stm32eforth.s:3745   .text.reset_handler:0000000000001cd8 $d
       stm32eforth.s:3746   .text.reset_handler:0000000000001cdc $t
       stm32eforth.s:3779   .text.reset_handler:0000000000001d22 $d
       stm32eforth.s:3780   .text.reset_handler:0000000000001d26 _COLON
       stm32eforth.s:3782   .text.reset_handler:0000000000001d28 $t
       stm32eforth.s:3783   .text.reset_handler:0000000000001d28 COLON
       stm32eforth.s:3796   .text.reset_handler:0000000000001d48 $d
       stm32eforth.s:3797   .text.reset_handler:0000000000001d4c _IMMED
       stm32eforth.s:3799   .text.reset_handler:0000000000001d56 $t
       stm32eforth.s:3800   .text.reset_handler:0000000000001d58 IMMED
       stm32eforth.s:3803   .text.reset_handler:0000000000001d60 $d
       stm32eforth.s:3804   .text.reset_handler:0000000000001d64 $t
       stm32eforth.s:3819   .text.reset_handler:0000000000001d84 $d
       stm32eforth.s:3820   .text.reset_handler:0000000000001d88 _CONST
       stm32eforth.s:3823   .text.reset_handler:0000000000001d94 CONST
       stm32eforth.s:3832   .text.reset_handler:0000000000001db4 $d
       stm32eforth.s:3833   .text.reset_handler:0000000000001db8 $t
       stm32eforth.s:3840   .text.reset_handler:0000000000001dc4 $d
       stm32eforth.s:3841   .text.reset_handler:0000000000001dc8 _CREAT
       stm32eforth.s:3844   .text.reset_handler:0000000000001dd0 CREAT
       stm32eforth.s:3853   .text.reset_handler:0000000000001df0 $d
       stm32eforth.s:3854   .text.reset_handler:0000000000001df4 $t
       stm32eforth.s:3860   .text.reset_handler:0000000000001dfc $d
       stm32eforth.s:3861   .text.reset_handler:0000000000001e00 _VARIA
       stm32eforth.s:3864   .text.reset_handler:0000000000001e0c VARIA
       stm32eforth.s:3868   .text.reset_handler:0000000000001e18 $d
       stm32eforth.s:3869   .text.reset_handler:0000000000001e1c $t
       stm32eforth.s:3882   .text.reset_handler:0000000000001e24 DMP
       stm32eforth.s:3886   .text.reset_handler:0000000000001e30 $d
       stm32eforth.s:3887   .text.reset_handler:0000000000001e34 $t
       stm32eforth.s:3898   .text.reset_handler:0000000000001e5c PDUM2
       stm32eforth.s:3891   .text.reset_handler:0000000000001e44 PDUM1
       stm32eforth.s:3895   .text.reset_handler:0000000000001e50 $d
       stm32eforth.s:3896   .text.reset_handler:0000000000001e54 $t
       stm32eforth.s:3900   .text.reset_handler:0000000000001e60 $d
       stm32eforth.s:3901   .text.reset_handler:0000000000001e64 $t
       stm32eforth.s:3906   .text.reset_handler:0000000000001e68 $d
       stm32eforth.s:3907   .text.reset_handler:0000000000001e6c _DUMP
       stm32eforth.s:3910   .text.reset_handler:0000000000001e74 DUMP
ARM GAS  stm32eforth.s 			page 98


       stm32eforth.s:3917   .text.reset_handler:0000000000001e8c $d
       stm32eforth.s:3918   .text.reset_handler:0000000000001e90 $t
       stm32eforth.s:3932   .text.reset_handler:0000000000001ec4 DUMP4
       stm32eforth.s:3921   .text.reset_handler:0000000000001e9c DUMP1
       stm32eforth.s:3924   .text.reset_handler:0000000000001ea4 $d
       stm32eforth.s:3925   .text.reset_handler:0000000000001ea8 $t
       stm32eforth.s:3934   .text.reset_handler:0000000000001ec8 $d
       stm32eforth.s:3935   .text.reset_handler:0000000000001ecc DUMP3
       stm32eforth.s:3936   .text.reset_handler:0000000000001ecc $t
       stm32eforth.s:3945   .text.reset_handler:0000000000001ee0 $d
       stm32eforth.s:3946   .text.reset_handler:0000000000001ee4 _DOTS
       stm32eforth.s:3950   .text.reset_handler:0000000000001ee8 DOTS
       stm32eforth.s:3960   .text.reset_handler:0000000000001f08 DOTS2
       stm32eforth.s:3956   .text.reset_handler:0000000000001efc DOTS1
       stm32eforth.s:3962   .text.reset_handler:0000000000001f0c $d
       stm32eforth.s:3963   .text.reset_handler:0000000000001f10 $t
       stm32eforth.s:3969   .text.reset_handler:0000000000001f18 $d
       stm32eforth.s:3970   .text.reset_handler:0000000000001f1c _TNAME
       stm32eforth.s:3972   .text.reset_handler:0000000000001f22 $t
       stm32eforth.s:3973   .text.reset_handler:0000000000001f24 TNAME
       stm32eforth.s:3978   .text.reset_handler:0000000000001f34 TNAM1
       stm32eforth.s:3981   .text.reset_handler:0000000000001f3c $d
       stm32eforth.s:3991   .text.reset_handler:0000000000001f64 TNAM2
       stm32eforth.s:3982   .text.reset_handler:0000000000001f40 $t
       stm32eforth.s:3987   .text.reset_handler:0000000000001f54 $d
       stm32eforth.s:3988   .text.reset_handler:0000000000001f58 $t
       stm32eforth.s:3999   .text.reset_handler:0000000000001f70 $d
       stm32eforth.s:4000   .text.reset_handler:0000000000001f74 _DOTID
       stm32eforth.s:4002   .text.reset_handler:0000000000001f78 $t
       stm32eforth.s:4003   .text.reset_handler:0000000000001f78 DOTID
       stm32eforth.s:4007   .text.reset_handler:0000000000001f84 $d
       stm32eforth.s:4014   .text.reset_handler:0000000000001fa0 DOTI1
       stm32eforth.s:4008   .text.reset_handler:0000000000001f88 $t
       stm32eforth.s:4010   .text.reset_handler:0000000000001f90 $d
       stm32eforth.s:4011   .text.reset_handler:0000000000001f94 $t
       stm32eforth.s:4016   .text.reset_handler:0000000000001fa4 $d
       stm32eforth.s:4018   .text.reset_handler:0000000000001fae $t
       stm32eforth.s:4024   .text.reset_handler:0000000000001fb4 $d
       stm32eforth.s:4025   .text.reset_handler:0000000000001fb8 _SEE
       stm32eforth.s:4027   .text.reset_handler:0000000000001fbc $t
       stm32eforth.s:4028   .text.reset_handler:0000000000001fbc SEE
       stm32eforth.s:4033   .text.reset_handler:0000000000001fcc $d
       stm32eforth.s:4034   .text.reset_handler:0000000000001fd0 $t
       stm32eforth.s:4035   .text.reset_handler:0000000000001fd4 SEE1
       stm32eforth.s:4052   .text.reset_handler:0000000000002000 DECOMP
       stm32eforth.s:4040   .text.reset_handler:0000000000001fe4 $d
       stm32eforth.s:4041   .text.reset_handler:0000000000001fe8 $t
       stm32eforth.s:4047   .text.reset_handler:0000000000001ff0 $d
       stm32eforth.s:4048   .text.reset_handler:0000000000001ff4 _DECOM
       stm32eforth.s:4050   .text.reset_handler:0000000000001ffe $t
       stm32eforth.s:4059   .text.reset_handler:0000000000002014 $d
       stm32eforth.s:4060   .text.reset_handler:0000000000002018 $t
       stm32eforth.s:4062   .text.reset_handler:0000000000002020 $d
       stm32eforth.s:4063   .text.reset_handler:0000000000002024 $t
       stm32eforth.s:4065   .text.reset_handler:000000000000202c $d
       stm32eforth.s:4091   .text.reset_handler:0000000000002084 DECOM2
       stm32eforth.s:4067   .text.reset_handler:0000000000002030 $t
ARM GAS  stm32eforth.s 			page 99


       stm32eforth.s:4081   .text.reset_handler:0000000000002064 $d
       stm32eforth.s:4087   .text.reset_handler:0000000000002078 DECOM1
       stm32eforth.s:4082   .text.reset_handler:0000000000002068 $t
       stm32eforth.s:4100   .text.reset_handler:0000000000002090 $d
       stm32eforth.s:4101   .text.reset_handler:0000000000002094 _WORDS
       stm32eforth.s:4103   .text.reset_handler:000000000000209a $t
       stm32eforth.s:4104   .text.reset_handler:000000000000209c WORDS
       stm32eforth.s:4109   .text.reset_handler:00000000000020ac WORS1
       stm32eforth.s:4112   .text.reset_handler:00000000000020b4 $d
       stm32eforth.s:4119   .text.reset_handler:00000000000020d0 WORS2
       stm32eforth.s:4113   .text.reset_handler:00000000000020b8 $t
       stm32eforth.s:4132   .text.reset_handler:00000000000020d4 VERSN
       stm32eforth.s:4135   .text.reset_handler:00000000000020dc $d
       stm32eforth.s:4136   .text.reset_handler:00000000000020e0 $t
       stm32eforth.s:4141   .text.reset_handler:00000000000020e4 $d
       stm32eforth.s:4142   .text.reset_handler:00000000000020e8 _HI
       stm32eforth.s:4149   .text.reset_handler:00000000000020f8 $d
       stm32eforth.s:4151   .text.reset_handler:0000000000002110 $t
       stm32eforth.s:4160   .text.reset_handler:0000000000002130 $d
       stm32eforth.s:4161   .text.reset_handler:0000000000002134 $t
       stm32eforth.s:4173   .text.reset_handler:0000000000002154 $d
       stm32eforth.s:4187   .text.reset_handler:000000000000217a COLD1
       stm32eforth.s:4189   .text.reset_handler:000000000000217e $d
       stm32eforth.s:4190   .text.reset_handler:0000000000002182 $t
       stm32eforth.s:4192   .text.reset_handler:000000000000218a $d
       stm32eforth.s:4193   .text.reset_handler:000000000000218e $t
       stm32eforth.s:4194   .text.reset_handler:0000000000002192 $d
       stm32eforth.s:4195   .text.reset_handler:0000000000002196 $t
       stm32eforth.s:4196   .text.reset_handler:000000000000219a $d
       stm32eforth.s:4197   .text.reset_handler:000000000000219e $t
       stm32eforth.s:4203   .text.reset_handler:00000000000021b6 COLD2
       stm32eforth.s:4205   .text.reset_handler:00000000000021b6 $d
       stm32eforth.s:4208   .text.reset_handler:00000000000021bc $d
       stm32eforth.s:255    .text.default_handler:0000000000000025 $d
       stm32eforth.s:255    .text.default_handler:0000000000000026 $t
       stm32eforth.s:503    .text.reset_handler:0000000000000179 $d
       stm32eforth.s:503    .text.reset_handler:000000000000017a $t
       stm32eforth.s:523    .text.reset_handler:00000000000001a1 $d
       stm32eforth.s:523    .text.reset_handler:00000000000001a2 $t
       stm32eforth.s:548    .text.reset_handler:00000000000001d5 $d
       stm32eforth.s:548    .text.reset_handler:00000000000001d6 $t
       stm32eforth.s:665    .text.reset_handler:000000000000026d $d
       stm32eforth.s:665    .text.reset_handler:000000000000026e $t
       stm32eforth.s:699    .text.reset_handler:000000000000029b $d
       stm32eforth.s:699    .text.reset_handler:000000000000029c $t
       stm32eforth.s:712    .text.reset_handler:00000000000002af $d
       stm32eforth.s:712    .text.reset_handler:00000000000002b0 $t
       stm32eforth.s:723    .text.reset_handler:00000000000002bb $d
       stm32eforth.s:723    .text.reset_handler:00000000000002bc $t
       stm32eforth.s:735    .text.reset_handler:00000000000002cd $d
       stm32eforth.s:735    .text.reset_handler:00000000000002ce $t
       stm32eforth.s:747    .text.reset_handler:00000000000002df $d
       stm32eforth.s:747    .text.reset_handler:00000000000002e0 $t
       stm32eforth.s:771    .text.reset_handler:0000000000000305 $d
       stm32eforth.s:771    .text.reset_handler:0000000000000306 $t
       stm32eforth.s:793    .text.reset_handler:0000000000000327 $d
       stm32eforth.s:793    .text.reset_handler:0000000000000328 $t
ARM GAS  stm32eforth.s 			page 100


       stm32eforth.s:806    .text.reset_handler:0000000000000339 $d
       stm32eforth.s:806    .text.reset_handler:000000000000033a $t
       stm32eforth.s:818    .text.reset_handler:000000000000034b $d
       stm32eforth.s:818    .text.reset_handler:000000000000034c $t
       stm32eforth.s:842    .text.reset_handler:0000000000000371 $d
       stm32eforth.s:842    .text.reset_handler:0000000000000372 $t
       stm32eforth.s:881    .text.reset_handler:00000000000003b7 $d
       stm32eforth.s:881    .text.reset_handler:00000000000003b8 $t
       stm32eforth.s:893    .text.reset_handler:00000000000003cd $d
       stm32eforth.s:893    .text.reset_handler:00000000000003ce $t
       stm32eforth.s:955    .text.reset_handler:0000000000000427 $d
       stm32eforth.s:955    .text.reset_handler:0000000000000428 $t
       stm32eforth.s:969    .text.reset_handler:000000000000043b $d
       stm32eforth.s:969    .text.reset_handler:000000000000043c $t
       stm32eforth.s:980    .text.reset_handler:0000000000000449 $d
       stm32eforth.s:980    .text.reset_handler:000000000000044a $t
       stm32eforth.s:991    .text.reset_handler:0000000000000459 $d
       stm32eforth.s:991    .text.reset_handler:000000000000045a $t
       stm32eforth.s:1002   .text.reset_handler:0000000000000469 $d
       stm32eforth.s:1002   .text.reset_handler:000000000000046a $t
       stm32eforth.s:1035   .text.reset_handler:0000000000000499 $d
       stm32eforth.s:1035   .text.reset_handler:000000000000049a $t
       stm32eforth.s:1069   .text.reset_handler:00000000000004cd $d
       stm32eforth.s:1069   .text.reset_handler:00000000000004ce $t
       stm32eforth.s:1080   .text.reset_handler:00000000000004dd $d
       stm32eforth.s:1080   .text.reset_handler:00000000000004de $t
       stm32eforth.s:1091   .text.reset_handler:00000000000004ef $d
       stm32eforth.s:1091   .text.reset_handler:00000000000004f0 $t
       stm32eforth.s:1130   .text.reset_handler:000000000000052b $d
       stm32eforth.s:1130   .text.reset_handler:000000000000052c $t
       stm32eforth.s:1143   .text.reset_handler:000000000000053f $d
       stm32eforth.s:1143   .text.reset_handler:0000000000000540 $t
       stm32eforth.s:1170   .text.reset_handler:000000000000056d $d
       stm32eforth.s:1170   .text.reset_handler:000000000000056e $t
       stm32eforth.s:1209   .text.reset_handler:00000000000005a7 $d
       stm32eforth.s:1209   .text.reset_handler:00000000000005a8 $t
       stm32eforth.s:1282   .text.reset_handler:0000000000000617 $d
       stm32eforth.s:1282   .text.reset_handler:0000000000000618 $t
       stm32eforth.s:1297   .text.reset_handler:000000000000062f $d
       stm32eforth.s:1297   .text.reset_handler:0000000000000630 $t
       stm32eforth.s:1312   .text.reset_handler:000000000000064b $d
       stm32eforth.s:1312   .text.reset_handler:000000000000064c $t
       stm32eforth.s:1383   .text.reset_handler:00000000000006a9 $d
       stm32eforth.s:1383   .text.reset_handler:00000000000006aa $t
       stm32eforth.s:1417   .text.reset_handler:00000000000006e7 $d
       stm32eforth.s:1417   .text.reset_handler:00000000000006e8 $t
       stm32eforth.s:1441   .text.reset_handler:0000000000000705 $d
       stm32eforth.s:1441   .text.reset_handler:0000000000000706 $t
       stm32eforth.s:1465   .text.reset_handler:000000000000072f $d
       stm32eforth.s:1465   .text.reset_handler:0000000000000730 $t
       stm32eforth.s:1514   .text.reset_handler:0000000000000781 $d
       stm32eforth.s:1514   .text.reset_handler:0000000000000782 $t
       stm32eforth.s:1525   .text.reset_handler:0000000000000797 $d
       stm32eforth.s:1525   .text.reset_handler:0000000000000798 $t
       stm32eforth.s:1537   .text.reset_handler:00000000000007ab $d
       stm32eforth.s:1537   .text.reset_handler:00000000000007ac $t
       stm32eforth.s:1552   .text.reset_handler:00000000000007c1 $d
ARM GAS  stm32eforth.s 			page 101


       stm32eforth.s:1552   .text.reset_handler:00000000000007c2 $t
       stm32eforth.s:1571   .text.reset_handler:00000000000007ef $d
       stm32eforth.s:1571   .text.reset_handler:00000000000007f0 $t
       stm32eforth.s:1640   .text.reset_handler:000000000000089d $d
       stm32eforth.s:1640   .text.reset_handler:000000000000089e $t
       stm32eforth.s:1697   .text.reset_handler:0000000000000917 $d
       stm32eforth.s:1697   .text.reset_handler:0000000000000918 $t
       stm32eforth.s:1769   .text.reset_handler:00000000000009bf $d
       stm32eforth.s:1769   .text.reset_handler:00000000000009c0 $t
       stm32eforth.s:1788   .text.reset_handler:00000000000009e5 $d
       stm32eforth.s:1788   .text.reset_handler:00000000000009e6 $t
       stm32eforth.s:1826   .text.reset_handler:0000000000000a2d $d
       stm32eforth.s:1826   .text.reset_handler:0000000000000a2e $t
       stm32eforth.s:1865   .text.reset_handler:0000000000000a77 $d
       stm32eforth.s:1865   .text.reset_handler:0000000000000a78 $t
       stm32eforth.s:1889   .text.reset_handler:0000000000000aa7 $d
       stm32eforth.s:1889   .text.reset_handler:0000000000000aa8 $t
       stm32eforth.s:1912   .text.reset_handler:0000000000000ad3 $d
       stm32eforth.s:1912   .text.reset_handler:0000000000000ad4 $t
       stm32eforth.s:1981   .text.reset_handler:0000000000000b8f $d
       stm32eforth.s:1981   .text.reset_handler:0000000000000b90 $t
       stm32eforth.s:1995   .text.reset_handler:0000000000000bad $d
       stm32eforth.s:1995   .text.reset_handler:0000000000000bae $t
       stm32eforth.s:2028   .text.reset_handler:0000000000000bfb $d
       stm32eforth.s:2028   .text.reset_handler:0000000000000bfc $t
       stm32eforth.s:2046   .text.reset_handler:0000000000000c1f $d
       stm32eforth.s:2046   .text.reset_handler:0000000000000c20 $t
       stm32eforth.s:2064   .text.reset_handler:0000000000000c47 $d
       stm32eforth.s:2064   .text.reset_handler:0000000000000c48 $t
       stm32eforth.s:2133   .text.reset_handler:0000000000000cdf $d
       stm32eforth.s:2133   .text.reset_handler:0000000000000ce0 $t
       stm32eforth.s:2287   .text.reset_handler:0000000000000eb7 $d
       stm32eforth.s:2287   .text.reset_handler:0000000000000eb8 $t
       stm32eforth.s:2308   .text.reset_handler:0000000000000ee9 $d
       stm32eforth.s:2308   .text.reset_handler:0000000000000eea $t
       stm32eforth.s:2329   .text.reset_handler:0000000000000f1b $d
       stm32eforth.s:2329   .text.reset_handler:0000000000000f1c $t
       stm32eforth.s:2407   .text.reset_handler:0000000000000fa3 $d
       stm32eforth.s:2407   .text.reset_handler:0000000000000fa4 $t
       stm32eforth.s:2445   .text.reset_handler:0000000000001003 $d
       stm32eforth.s:2445   .text.reset_handler:0000000000001004 $t
       stm32eforth.s:2615   .text.reset_handler:00000000000011e7 $d
       stm32eforth.s:2615   .text.reset_handler:00000000000011e8 $t
       stm32eforth.s:2660   .text.reset_handler:0000000000001249 $d
       stm32eforth.s:2660   .text.reset_handler:000000000000124a $t
       stm32eforth.s:2675   .text.reset_handler:000000000000126d $d
       stm32eforth.s:2675   .text.reset_handler:000000000000126e $t
       stm32eforth.s:2928   .text.reset_handler:0000000000001503 $d
       stm32eforth.s:2928   .text.reset_handler:0000000000001504 $t
       stm32eforth.s:3103   .text.reset_handler:00000000000016c7 $d
       stm32eforth.s:3103   .text.reset_handler:00000000000016c8 $t
       stm32eforth.s:3111   .text.reset_handler:00000000000016e3 $d
       stm32eforth.s:3111   .text.reset_handler:00000000000016e4 $t
       stm32eforth.s:3120   .text.reset_handler:00000000000016f1 $d
       stm32eforth.s:3120   .text.reset_handler:00000000000016f2 $t
       stm32eforth.s:3144   .text.reset_handler:0000000000001733 $d
       stm32eforth.s:3144   .text.reset_handler:0000000000001734 $t
ARM GAS  stm32eforth.s 			page 102


       stm32eforth.s:3158   .text.reset_handler:0000000000001751 $d
       stm32eforth.s:3158   .text.reset_handler:0000000000001752 $t
       stm32eforth.s:3200   .text.reset_handler:00000000000017b1 $d
       stm32eforth.s:3200   .text.reset_handler:00000000000017b2 $t
       stm32eforth.s:3223   .text.reset_handler:00000000000017e7 $d
       stm32eforth.s:3223   .text.reset_handler:00000000000017e8 $t
       stm32eforth.s:3427   .text.reset_handler:00000000000019d9 $d
       stm32eforth.s:3427   .text.reset_handler:00000000000019da $t
       stm32eforth.s:3469   .text.reset_handler:0000000000001a37 $d
       stm32eforth.s:3469   .text.reset_handler:0000000000001a38 $t
       stm32eforth.s:3505   .text.reset_handler:0000000000001a97 $d
       stm32eforth.s:3505   .text.reset_handler:0000000000001a98 $t
       stm32eforth.s:3520   .text.reset_handler:0000000000001ab9 $d
       stm32eforth.s:3520   .text.reset_handler:0000000000001aba $t
       stm32eforth.s:3549   .text.reset_handler:0000000000001af9 $d
       stm32eforth.s:3549   .text.reset_handler:0000000000001afa $t
       stm32eforth.s:3576   .text.reset_handler:0000000000001b37 $d
       stm32eforth.s:3576   .text.reset_handler:0000000000001b38 $t
       stm32eforth.s:3590   .text.reset_handler:0000000000001b53 $d
       stm32eforth.s:3590   .text.reset_handler:0000000000001b54 $t
       stm32eforth.s:3604   .text.reset_handler:0000000000001b6f $d
       stm32eforth.s:3604   .text.reset_handler:0000000000001b70 $t
       stm32eforth.s:3822   .text.reset_handler:0000000000001d91 $d
       stm32eforth.s:3822   .text.reset_handler:0000000000001d92 $t
       stm32eforth.s:3843   .text.reset_handler:0000000000001dcf $d
       stm32eforth.s:3843   .text.reset_handler:0000000000001dd0 $t
       stm32eforth.s:3863   .text.reset_handler:0000000000001e09 $d
       stm32eforth.s:3863   .text.reset_handler:0000000000001e0a $t
       stm32eforth.s:3909   .text.reset_handler:0000000000001e71 $d
       stm32eforth.s:3909   .text.reset_handler:0000000000001e72 $t
       stm32eforth.s:3949   .text.reset_handler:0000000000001ee7 $d
       stm32eforth.s:3949   .text.reset_handler:0000000000001ee8 $t
       stm32eforth.s:4144   .text.reset_handler:00000000000020eb $d
       stm32eforth.s:4144   .text.reset_handler:00000000000020ec $t
       stm32eforth.s:4176   .text.reset_handler:000000000000215d $d
       stm32eforth.s:4176   .text.reset_handler:000000000000215e $t

UNDEFINED SYMBOLS
_rstack
