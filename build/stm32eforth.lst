ARM GAS  stm32eforth.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  stm32eforth.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.p2align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.p2aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m3
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
ARM GAS  stm32eforth.s 			page 3


  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
ARM GAS  stm32eforth.s 			page 4


  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  81              	
  82              	/* blue pill specific constants */ 
  83              	  .equ LED_GPIO, GPIOC_BASE_ADR
  84              	  .equ LED_PIN, 13
  85              	  .equ UART, USART1_BASE_ADR 
  86              	
ARM GAS  stm32eforth.s 			page 5


  87              	/* eForth specific constants */
  88              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  89              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  90              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  91              	.equ UPP ,	0x20000130	/*start of user area (UP0) */
  92              	// .equ DTOP ,	0x20000240	/*start of usable RAM area (HERE) */
  93              	.equ DEND , 0x20004E00  /*usable RAM end */
  94              	 .equ RAMOFFSET ,	UPP 	// remap
  95              	 .equ RAMEND, 0x20005000 // 20Ko
  96              	 .equ FLASHOFFSET ,	0x08000130	// remap
  97              	//.equ RAMOFFSET  ,	0x00000000	/* absolute */
  98              	//.equ MAPOFFSET  ,	0x00000000	/* absolute */
  99              	  .equ MAPOFFSET , (RAMOFFSET-FLASHOFFSET)
 100              	
 101              	/*************************************
 102              	   system variables offset from UPP
 103              	*************************************/
 104              	  .equ SEED_OFS, 4    // prng seed 
 105              	  .equ TICKS_OFS, SEED_OFS+4  // millseconds counter
 106              	  .equ TIMER_OFS, TICKS_OFS+4  // count down timer
 107              	  .equ TORAM_OFS, TIMER_OFS+4  // compile to RAM 
 108              	  .equ IMG_SIGN_OFS, TORAM_OFS+4  // image signature  
 109              	  .equ BOOT_OFS, IMG_SIGN_OFS+4  // boot program address
 110              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
 111              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
 112              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
 113              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
 114              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
 115              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
 116              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
 117              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
 118              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
 119              	  .equ FORTH_CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
 120              	  .equ USER_CTOP_OFS, FORTH_CTOP_OFS+4  // ram free dictionary address
 121              	  .equ LASTN_OFS, USER_CTOP_OFS+4     // last word in dictionary link nfa 
 122              	  .equ VARS_END_OFS, LASTN_OFS+4 // end of system variables  
 123              	  
 124              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
 125              	  .equ RX_QUEUE_OFS, VARS_END_OFS+4 // rx queue 
 126              	  .equ RX_HEAD_OFS, RX_QUEUE_OFS+RX_QUEUE_SIZE // queue head indice 
 127              	  .equ RX_TAIL_OFS, RX_HEAD_OFS+4 // queue tail indice 
 128              	
 129              	
 130              	/***********************************************
 131              	* MACROS
 132              	*	Assemble inline direct threaded code ending.
 133              	***********************************************/
 134              		.macro _CALL fn /* low level routine call */ 
 135              	 	PUSH {LR}
 136              		BL \fn  
 137              		POP {LR}
 138              		.endm
 139              		
 140              		.macro _MOV32 R V 
 141              		MOV \R, #\V&0xffff
 142              		MOVT \R, #\V>>16
 143              		.endm
ARM GAS  stm32eforth.s 			page 6


 144              	
 145              		.macro	_NEXT /*end low level word */
 146              		BX	LR
 147              		.endm
 148              	
 149              	 	.macro	_NEST /*start high level word */
 150              		STMFD	R2!,{LR}
 151              		.endm
 152              	
 153              	 	.macro	_UNNEST	/*end high level word */
 154              		LDMFD	R2!,{PC}
 155              		.endm
 156              	
 157              	 	.macro	_DOLIT /*long literals */
 158              		BL	DOLIT
 159              		.endm
 160              	
 161              	 	.macro	_PUSH	/*push R5 on data stack*/
 162              		STR	R5,[R1,#-4]!
 163              		.endm
 164              	
 165              	 	.macro	_POP /*pop data stack to R5 */
 166              		LDR	R5,[R1],#4
 167              		.endm
 168              	
 169              	/*************************************
 170              	*   interrupt service vectors table 
 171              	**************************************/
 172              	   .section  .isr_vector,"a",%progbits
 173              	  .type  isr_vectors, %object
 174              	
 175              	isr_vectors:
 176 0000 00000000 	  .word   _mstack          /* main return stack address */
 177 0004 00000000 	  .word   reset_handler    /* startup address */
 178              	/* core interrupts || exceptions */
 179 0008 00000000 	  .word   default_handler  /*  NMI */
 180 000c 00000000 	  .word   default_handler  /*  HardFault */
 181 0010 00000000 	  .word   default_handler  /*  Memory Management */
 182 0014 00000000 	  .word   default_handler  /* Bus fault */
 183 0018 00000000 	  .word   default_handler  /* Usage fault */
 184 001c 00000000 	  .word   0
 185 0020 00000000 	  .word   0
 186 0024 00000000 	  .word   0
 187 0028 00000000 	  .word   0
 188 002c 00000000 	  .word   default_handler  /* SWI instruction */
 189 0030 00000000 	  .word   default_handler  /* Debug monitor */
 190 0034 00000000 	  .word   0
 191 0038 00000000 	  .word   default_handler  /* PendSV */
 192 003c 00000000 	  .word   systick_handler  /* Systick */
 193              	  
 194              	  /* External Interrupts */
 195 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 196 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 197 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 198 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 199 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 200 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
ARM GAS  stm32eforth.s 			page 7


 201 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 202 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 203 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 204 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 205 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 206 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 207 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 208 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 209 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 210 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 211 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 212 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 213 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 214 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 215 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 216 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 217 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 218 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 219 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 220 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 221 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 222 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 223 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 224 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 225 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 226 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 227 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 228 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 229 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 230 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 231 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 232 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
 233 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 234 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 235 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 236 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 237 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 238 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 239 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 240 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 241 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 242 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 243 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 244 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 245 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 246 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 247 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 248 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 249 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 250 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 251 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 252 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 253 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 254 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 255              	isr_end:
 256              	  .size  isr_vectors, .-isr_vectors
 257              	
ARM GAS  stm32eforth.s 			page 8


 258              	/*****************************************************
 259              	* default isr handler called on unexpected interrupt
 260              	*****************************************************/
 261              	   .section  .inflash, "ax", %progbits 
 262              	   
 263              	  .type default_handler, %function
 264              	  .p2align 2 
 265              	  .global default_handler
 266              	default_handler:
 267 0000 014D     		ldr r5,exception_msg 
 268 0002 00F04FF8 		bl uart_puts 
 269 0006 39E0     		b reset_mcu    
 270              	  .size  default_handler, .-default_handler
 271              	exception_msg:
 272 0008 0C000000 		.word .+4 
 273 000c 12       		.byte 18
 274 000d 0A0D6578 		.ascii "\n\rexeption reboot!"
 274      65707469 
 274      6F6E2072 
 274      65626F6F 
 274      7421
 275 001f 00       		.p2align 2
 276              	
 277              	/*********************************
 278              		system milliseconds counter
 279              	*********************************/	
 280              	  .type systick_handler, %function
 281              	  .p2align 2 
 282              	  .global systick_handler
 283              	systick_handler:
 284 0020 4FF49873 	  _MOV32 r3,UPP
 284      C2F20003 
 285 0028 9868     	  ldr r0,[r3,#TICKS_OFS]  
 286 002a 00F10100 	  add r0,#1
 287 002e 9860     	  str r0,[r3,#TICKS_OFS]
 288 0030 D868     	  ldr r0,[r3,#TIMER_OFS]
 289 0032 10B1     	  cbz r0, systick_exit
 290 0034 A0F10100 	  sub r0,#1
 291 0038 D860     	  str r0,[r3,#TIMER_OFS]
 292              	systick_exit:
 293 003a 7047     	  bx lr
 294              	
 295              	
 296              	
 297              	/**************************
 298              		UART RX handler
 299              	**************************/
 300              		.p2align 2
 301              		.type uart_rx_handler, %function
 302              	uart_rx_handler:
 303 003c 2DE9D002 		push {r4,r6,r7,r9}
 304 0040 4FF46054 		_MOV32 r4,UART 
 304      C4F20104 
 305 0048 2668     		ldr r6,[r4,#USART_SR]
 306 004a D4F80490 		ldr r9,[r4,#USART_DR]
 307 004e 16F0200F 		tst r6,#(1<<5) // RXNE 
 308 0052 0DD0     		beq 2f // no char received 
ARM GAS  stm32eforth.s 			page 9


 309 0054 B9F1030F 		cmp r9,#3
 310 0058 0DD0     		beq user_reboot // received CTRL-C then reboot MCU 
 311 005a 03F15007 		add r7,r3,#RX_QUEUE_OFS
 312 005e 5C6E     		ldr r4,[r3,#RX_TAIL_OFS]
 313 0060 2744     		add r7,r7,r4 
 314 0062 87F80090 		strb r9,[r7]
 315 0066 04F10104 		add r4,#1 
 316 006a 04F00F04 		and r4,#(RX_QUEUE_SIZE-1)
 317 006e 5C66     		str r4,[r3,#RX_TAIL_OFS]
 318              	2:	
 319 0070 BDE8D002 		pop {r4,r6,r7,r9}
 320 0074 7047     		bx lr 
 321              	
 322              	user_reboot:
 323 0076 064D     		ldr r5,user_reboot_msg
 324 0078 00F014F8 		bl uart_puts 
 325              	reset_mcu: 
 326 007c 0348     		ldr r0,scb_adr 
 327 007e C168     		ldr r1,[r0,#SCB_AIRCR]
 328 0080 41F00401 		orr r1,#(1<<2)
 329 0084 C0F2FA51 		movt r1,#SCB_VECTKEY
 330 0088 C160     		str r1,[r0,#SCB_AIRCR]
 331 008a FEE7     		b . 
 332              		.p2align 2 
 333              	scb_adr:
 334 008c 00ED00E0 		.word SCB_BASE_ADR 
 335              	user_reboot_msg:
 336 0090 94000000 		.word .+4
 337 0094 0D       		.byte 13 
 338 0095 0D757365 		.ascii "\ruser reboot!"
 338      72207265 
 338      626F6F74 
 338      21
 339 00a2 00BF     		.p2align 2 
 340              	
 341              	// send counted string to uart 
 342              	// input: r5 string* 
 343              		.type uart_puts,%function 
 344              	uart_puts:
 345 00a4 4FF46050 		_MOV32 r0,UART 
 345      C4F20100 
 346 00ac 15F8011B 		ldrb r1,[r5],#1 // string length
 347 00b0 0940     		ands r1,r1
 348 00b2 0CD0     	1:	beq 9f 
 349 00b4 0268     	2:  ldr r2,[r0,#USART_SR]
 350 00b6 12F08002 		ands r2,#0x80 
 351 00ba FBD0     		beq 2b 	
 352 00bc 15F8012B 		ldrb r2,[r5],#1
 353 00c0 0271     		strb r2,[r0,#USART_DR]
 354 00c2 0139     		subs r1,r1,#1 
 355 00c4 F6D1     		bne 2b 
 356 00c6 0268     	3:	ldr r2,[r0,#USART_SR]
 357 00c8 12F04002 		ands r2,#(1<<6)
 358 00cc FBD0     		beq 3b 
 359 00ce 7047     	9:  bx lr 
 360              	
 361              	
ARM GAS  stm32eforth.s 			page 10


 362              	/**************************************
 363              	  reset_handler execute at MCU reset
 364              	***************************************/
 365              	  .type  reset_handler, %function
 366              	  .p2align 2 
 367              	  .global reset_handler
 368              	reset_handler:
 369 00d0 00F08FF8 		bl	remap 
 370 00d4 00F01CF8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 371 00d8 00F06AF8 		bl  uart_init
 372              	//	bl	UNLOCK			/* unlock flash memory */
 373 00dc 00F008F8 		bl forth_init 
 374 00e0 0248     		ldr r0,forth_entry
 375 00e2 40F00100 		orr r0,#1
 376 00e6 8047     		blx r0
 377 00e8 FFF7FEBF 		b.w .  
 378              		.p2align 2 
 379              	forth_entry:
 380 00ec A0270018 		.word COLD+MAPOFFSET 
 381              	
 382              		.type forth_init, %function 
 383              	forth_init:
 384 00f0 4FF49873 		_MOV32 r3,UPP 
 384      C2F20003 
 385 00f8 4FF49D41 		_MOV32 R1,SPP
 385      C2F20001 
 386 0100 4FF49F42 		_MOV32 R2,RPP
 386      C2F20002 
 387 0108 85EA0505 		EOR R5,R5  
 388 010c 7047     		BX LR 
 389              	
 390              	  .type init_devices, %function
 391 010e 00BF     	  .p2align 2 
 392              	init_devices:
 393              	/* init clock to HSE 72 Mhz */
 394              	/* set 2 wait states in FLASH_ACR_LATENCY */
 395 0110 4FF40050 	  _MOV32 R0,FLASH_BASE_ADR 
 395      C4F20200 
 396 0118 4FF01202 	  mov r2,#0x12
 397 011c 0260     	  str r2,[r0,#FLASH_ACR]
 398              	/* configure clock for HSE, 8 Mhz crystal */
 399              	/* enable HSE in RCC_CR */
 400 011e 4FF48050 	  _MOV32 R0,RCC_BASE_ADR 
 400      C4F20200 
 401 0126 0168     	  ldr r1,[r0,#RCC_CR]
 402 0128 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 403 012c 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 404              	/* wait HSERDY loop */
 405              	wait_hserdy:
 406 012e 0168     	  ldr r1,[r0,#RCC_CR]
 407 0130 11F4003F 	  tst r1,#(1<<17)
 408 0134 FBD0     	  beq wait_hserdy
 409              	
 410              	/************************************************* 
 411              	   configure PLL mul factor and source 
 412              	   SYSCLOCK=72 Mhz
 413              	   select HSE as  PLL source clock
ARM GAS  stm32eforth.s 			page 11


 414              	   multiply frequency by 9 
 415              	   APB1 clock is limited to 36 Mhz so divide by 2 
 416              	****************************************************/
 417 0136 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 418 013a C0F21D01 	  movt r1,#(7<<2)|1
 419 013e 4160     	  str r1,[r0,#RCC_CFGR]
 420              	  /* enable PLL */
 421 0140 0168     	  ldr r1,[r0,#RCC_CR]
 422 0142 41F08071 	  orr r1, #1<<24 
 423 0146 0160     	  str r1,[r0,#RCC_CR]
 424              	/* wait for PLLRDY */
 425              	wait_pllrdy:
 426 0148 0168     	  ldr r1,[r0,#RCC_CR]
 427 014a 11F0007F 	  tst r1,#(1<<25)
 428 014e FBD0     	  beq wait_pllrdy 
 429              	/* select PLL as sysclock */
 430 0150 4168     	  ldr r1,[r0,#RCC_CFGR]
 431 0152 4FF6FC72 	  _MOV32 r2,0xfffffffc
 431      CFF6FF72 
 432 015a 01EA0201 	  and r1,r1,r2 
 433 015e 4FF00202 	  mov r2,#2
 434 0162 41EA0201 	  orr r1,r1,r2
 435 0166 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 436              	/* wait for SWS==2 */
 437              	wait_sws:
 438 0168 4168     	  ldr r1,[r0,#RCC_CFGR]
 439 016a 11F0080F 	  tst r1,#(2<<2)
 440 016e FBD0     	  beq wait_sws
 441              	/* now sysclock is 72 Mhz */
 442              	
 443              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 444 0170 4FF48050 	  _MOV32 r0,RCC_BASE_ADR
 444      C4F20200 
 445 0178 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 446 017c 8161     	  str	r1, [r0, #RCC_APB2ENR]
 447              	
 448              	/* configure GPIOC:13 as output for user LED */
 449 017e 4FF48050 	  _MOV32 r0,GPIOC_BASE_ADR 
 449      C4F20100 
 450 0186 4168     	  ldr r1,[r0,#GPIO_CRH]
 451 0188 6FF47002 	  mvn r2,#(15<<20)
 452 018c 01EA0201 	  and r1,r1,r2
 453 0190 4FF4C002 	  mov r2,#(6<<20)
 454 0194 41EA0201 	  orr r1,r1,r2
 455 0198 4160     	  str r1,[r0,#GPIO_CRH]
 456              	
 457              	/* configure systicks for 1msec ticks */
 458 019a 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 458      CEF20000 
 459 01a2 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 460 01a6 4160     	  str r1,[r0,#STK_LOAD]
 461 01a8 4FF00301 	  mov r1,#3
 462 01ac 0160     	  str r1,[r0,STK_CTL]
 463 01ae 7047     	  _NEXT  
 464              	
 465              	/*******************************
 466              	  initialize UART peripheral 
ARM GAS  stm32eforth.s 			page 12


 467              	********************************/
 468              		.type uart_init, %function
 469              	uart_init:
 470              	/* set GPIOA PIN 9, uart TX  */
 471 01b0 4FF40060 	  _MOV32 r0,GPIOA_BASE_ADR
 471      C4F20100 
 472 01b8 4168     	  ldr r1,[r0,#GPIO_CRH]
 473 01ba 6FF0F002 	  mvn r2,#(15<<4)
 474 01be 01EA0201 	  and r1,r1,r2
 475 01c2 4FF0A002 	  mov r2,#(0xA<<4)
 476 01c6 41EA0201 	  orr r1,r1,r2 
 477 01ca 4160     	  str r1,[r0,#GPIO_CRH]
 478 01cc 4FF46050 	  _MOV32 r0,UART 
 478      C4F20100 
 479              	/* BAUD rate */
 480 01d4 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 481 01d8 8160     	  str r1,[r0,#USART_BRR]
 482 01da 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 483 01de C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 484              	/* enable interrupt in NVIC */
 485 01e0 4FF46140 	  _MOV32 r0,NVIC_BASE_ADR
 485      CEF20000 
 486 01e8 4168     	  ldr r1,[r0,#NVIC_ISER1]
 487 01ea 41F02001 	  orr r1,#32   
 488 01ee 4160     	  str r1,[r0,#NVIC_ISER1]
 489 01f0 7047     	  bx lr 
 490              	
 491              	/* copy system to RAM */ 
 492              		.type remap, %function 
 493              	
 494              	remap:
 495              	// tranfert isr_vector to RAM at 0x20000000
 496 01f2 4FF00000 		_MOV32 r0,RAM_ADR
 496      C2F20000 
 497 01fa 81EA0101 		eor r1,r1
 498 01fe 4FF49872 		mov r2,#(isr_end-isr_vectors) 
 499 0202 51F8043B 	1:	ldr r3,[r1],#4
 500 0206 40F8043B 		str r3,[r0],#4
 501 020a 043A     		subs r2,#4
 502 020c F9D1     		bne 1b
 503              	// set new vector table address
 504 020e 4FF46D40 		_MOV32 r0,SCB_BASE_ADR
 504      CEF20000 
 505 0216 4FF00001 		_MOV32 r1,RAM_ADR 
 505      C2F20001 
 506 021e 8160     		str r1,[r0,#SCB_VTOR]
 507              	// copy system variable and code 	
 508 0220 DFF83400 		ldr r0,remap_dest
 509 0224 0B49     		ldr r1,remap_src 
 510 0226 42F60C02 		mov r2,#CTOP-UZERO 
 511 022a 02F10302 		add r2,r2,#3
 512 022e 22F00302 		and r2,r2,#~3 
 513 0232 51F8043B 	1:	ldr r3,[r1],#4 
 514 0236 40F8043B 		str r3,[r0],#4 
 515 023a 043A     		subs R2,#4 
 516 023c F9D1     		bne 1b
 517              	// zero end of RAM 
ARM GAS  stm32eforth.s 			page 13


 518 023e 4FF4A042 		_MOV32 r2,RAM_END 
 518      C2F20002 
 519 0246 83EA0303 		eor r3,r3,r3 
 520 024a 40F8043B 	2:  str r3,[r0],#4
 521 024e 9042     		cmp r0,r2 
 522 0250 FBDB     		blt 2b 
 523 0252 7047     		_NEXT 
 524              	remap_src:
 525 0254 00000000 		.word UZERO 
 526              	remap_dest:
 527 0258 30010020 		.word RAMOFFSET 
 528              	
 529              	/********************
 530              	* Version control
 531              	*******************/
 532              	.equ VER ,	0x01	/*major release version */
 533              	.equ EXT ,	0x00	/*minor extension */
 534              	
 535              	/* Constants */
 536              	
 537              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 538              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 539              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 540              	
 541              	.equ CELLL ,	4	/*size of a cell */
 542              	.equ BASEE ,	10	/*default radix */
 543              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 544              	
 545              	.equ BKSPP ,	8	/*backspace */
 546              	.equ LF ,	10	  /*line feed */
 547              	.equ CRR ,	13	/*carriage return */
 548              	.equ ERR ,	27	/*error escape */
 549              	.equ TIC ,	39	/*tick */
 550              	
 551              	/********************************************************
 552              	* RAM memory mapping
 553              	* 	0x20000000	RAM base address
 554              	*	0x20000000  system variables	
 555              	* 	0x20000100	Forth dictionary
 556              	* 	0x2000????	top of dictionary, HERE
 557              	* 	0x2000????	WORD buffer, HERE+16
 558              	*   0x20004E00  end of user space
 559              	* 	0x20004E80	top of data stack  R2
 560              	* 	0x20004E80	TIB terminal input buffer
 561              	* 	0x20004F80	top of return stack  R1
 562              	* 	0x20005000	top of hardware stack for interrupts R14
 563              	********************************************************/
 564              	
 565              	
 566              	/******************************************************
 567              	*  COLD start moves the following to USER variables.
 568              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 569              	******************************************************/
 570              		.section  .text, "ax" ,%progbits 
 571              		.p2align 2
 572              	
 573              	UZERO:
ARM GAS  stm32eforth.s 			page 14


 574 0000 00000000 		.word 0  			/*Reserved */
 575 0004 55AA0000 		.word 0xaa55 /* SEED  */ 
 576 0008 00000000 		.word 0      /* MSEC */
 577 000c 00000000 	    .word 0     /* TIMER */
 578 0010 FFFFFFFF 		.word -1    /* >RAM */ 
 579 0014 494D4147 		.ascii "IMAG" /* signature */ 
 580 0018 2C270018 		.word HI+MAPOFFSET  /*'BOOT */
 581 001c 0A000000 		.word BASEE 	/*BASE */
 582 0020 00000000 		.word 0			/*tmp */
 583 0024 00000000 		.word 0			/*SPAN */
 584 0028 00000000 		.word 0			/*>IN */
 585 002c 00000000 		.word 0			/*#TIB */
 586 0030 804E0020 		.word TIBB	/*TIB */
 587 0034 14160018 		.word INTER+MAPOFFSET	/*'EVAL */
 588 0038 00000000 		.word 0			/*HLD */
 589 003c 98270018 		.word LASTN+MAPOFFSET	/*CONTEXT */
 590 0040 0C280018 		.word CTOP+MAPOFFSET	/* FCP end of system dictionnary */
 591 0044 0C280018 		.word CTOP+MAPOFFSET	/* CP end of RAM dictionary RAM */
 592 0048 98270018 		.word LASTN+MAPOFFSET	/*LAST word in dictionary */
 593 004c 00000000 		.word 0,0			/*reserved */
 593      00000000 
 594              	ULAST:
 595 0054 00000000 		.space  RX_QUEUE_SIZE+8 /* space reserved for rx_queue,head and tail pointer.
 595      00000000 
 595      00000000 
 595      00000000 
 595      00000000 
 596              	
 597              	
 598              	/***********************************
 599              	//  Start of Forth dictionary
 600              	***********************************/
 601              	
 602 006c AFF30080 		.p2align 4
 603              	
 604              	// RANDOM ( n1 -- {0..n1-1} )
 605              	// return pseudo random number 
 606              	// REF: https://en.wikipedia.org/wiki/Xorshift
 607              	
 608 0070 00000000 		.word 0
 609 0074 06       	_RAND: .byte 6
 610 0075 52414E44 		.ascii "RANDOM"
 610      4F4D
 611 007b 00       		.p2align 2 
 612              	RAND:
 613 007c 42F804ED 		_NEST 
 614 0080 00F0E0FA 		bl SEED 
 615 0084 00F0C4F8 		bl AT 
 616 0088 4FEA4534 		lsl r4,r5,#13
 617 008c 85EA0405 		eor r5,r4
 618 0090 4FEA5544 		lsr r4,r5,#17
 619 0094 85EA0405 		eor r5,r4
 620 0098 4FEA4514 		lsl r4,r5,#5
 621 009c 85EA0405 		eor r5,r4
 622 00a0 00F0FAF8 		bl DUPP 
 623 00a4 00F0CEFA 		bl SEED 
 624 00a8 00F0A8F8 		bl STORE 
ARM GAS  stm32eforth.s 			page 15


 625 00ac 00F028FA 		bl ABSS
 626 00b0 00F0FAF8 		bl SWAP 
 627 00b4 00F01CFC 		bl MODD 
 628 00b8 52F804FB 		_UNNEST 
 629              	
 630              	// PAUSE ( u -- ) 
 631              	// suspend execution for u milliseconds
 632 00bc 74000018 		.word _RAND+MAPOFFSET
 633 00c0 05       	_PAUSE: .byte 5
 634 00c1 50415553 		.ascii "PAUSE"
 634      45
 635 00c6 00BF     		.p2align 2
 636              	PAUSE:
 637 00c8 42F804ED 		_NEST 
 638 00cc 00F0CEFA 		BL TIMER 
 639 00d0 00F094F8 		BL STORE 
 640              	PAUSE_LOOP:
 641 00d4 00F0CAFA 		BL TIMER 
 642 00d8 00F09AF8 		BL AT 
 643 00dc 00F072F8 		BL QBRAN 
 644 00e0 EC000000 		.word PAUSE_EXIT 
 645 00e4 00F07AF8 		BL BRAN 
 646 00e8 D4000000 		.word PAUSE_LOOP 
 647              	PAUSE_EXIT: 		
 648 00ec 52F804FB 		_UNNEST 
 649              	
 650              	//  ULED ( T|F -- )
 651              	// control user LED, -1 ON, 0 OFF  
 652 00f0 C0000018 		.word _PAUSE + MAPOFFSET
 653 00f4 04       	_ULED: .byte 4
 654 00f5 554C4544 		.ascii "ULED"
 655 00f9 0000BF   		.p2align 2
 656              		.type ULED, %function 
 657              	ULED:
 658 00fc 4FF40056 		mov r6,#(1<<LED_PIN)
 659 0100 4FF48054 		_MOV32 r4,LED_GPIO 
 659      C4F20104 
 660 0108 2800     		movs r0,r5 
 661 010a 51F8045B 		_POP
 662 010e 01D0     		beq ULED_OFF 
 663 0110 6661     		str r6,[r4,#GPIO_BRR]
 664 0112 7047     		_NEXT 
 665              	ULED_OFF:
 666 0114 2661     		str r6,[r4,#GPIO_BSRR]
 667 0116 7047     		_NEXT 
 668              		
 669              	//    ?RX	 ( -- c T | F )
 670              	// 	Return input character and true, or a false if no input.
 671 0118 F4000018 		.word	_ULED+MAPOFFSET
 672 011c 04       	_QRX:	.byte   4
 673 011d 3F4B4559 		.ascii "?KEY"
 674 0121 0000BF   		.p2align 2 
 675              	QKEY:
 676              	QRX: 
 677 0124 41F8045D 		_PUSH
 678 0128 5F6E     		ldr r7,[r3,#RX_TAIL_OFS] 
 679 012a 1E6E     		ldr r6,[r3,#RX_HEAD_OFS]
ARM GAS  stm32eforth.s 			page 16


 680 012c 96EA0705 		eors r5,r6,r7 
 681 0130 0CD0     		beq 1f
 682 0132 03F15007 		add r7,r3,#RX_QUEUE_OFS 
 683 0136 3744     		add r7,r6 
 684 0138 3D78     		ldrb r5,[r7]
 685 013a 06F10106 		add r6,#1 
 686 013e 06F00F06 		and r6,#(RX_QUEUE_SIZE-1)
 687 0142 1E66     		str r6,[R3,#RX_HEAD_OFS]
 688 0144 41F8045D 		_PUSH 
 689 0148 4FF0FF35 		mov r5,#-1
 690 014c 7047     	1:	_NEXT 
 691 014e 00BF     		.p2align 2 
 692              	
 693              	//    TX!	 ( c -- )
 694              	// 	Send character c to the output device.
 695              	
 696 0150 1C010018 		.word	_QRX+MAPOFFSET
 697 0154 04       	_TXSTO:	.byte 4
 698 0155 454D4954 		.ascii "EMIT"
 699 0159 0000BF   		.p2align 2 	
 700              	TXSTO:
 701              	EMIT:
 702              	TECHO:
 703 015c 4FF46054 		_MOV32 r4,UART 
 703      C4F20104 
 704 0164 2668     	1:	ldr	r6, [r4, #USART_SR]	
 705 0166 16F08006 		ands	r6, #0x80		//  TXE bit 
 706 016a FBD0     		beq	1b
 707 016c 2571     		strb	r5, [r4, #USART_DR]	
 708 016e 51F8045B 		_POP
 709 0172 7047     		_NEXT 
 710              		
 711              	// **************************************************************************
 712              	//  The kernel
 713              	
 714              	//    NOP	( -- )
 715              	// 	do nothing.
 716              	
 717 0174 54010018 		.word	_TXSTO+MAPOFFSET
 718 0178 03       	_NOP:	.byte   3
 719 0179 4E4F50   		.ascii "NOP"
 720              		.p2align 2 	
 721              	NOP:
 722 017c 7047     		_NEXT
 723              	 
 724              	
 725              	//    doLIT	( -- w )
 726              	// 	Push an inline literal.
 727              	
 728              	// 	.word	_NOP+MAPOFFSET
 729              	// _LIT	.byte   COMPO+5
 730              	// 	.ascii "doLIT"
 731              	// 	.p2align 2 	
 732              	DOLIT:
 733 017e 41F8045D 		_PUSH				//  store R5 on data stack
 734 0182 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 735 0186 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
ARM GAS  stm32eforth.s 			page 17


 736 018a 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 737 018e 7047     		_NEXT
 738              	
 739              	//    EXECUTE	( ca -- )
 740              	// 	Execute the word at ca.
 741              	
 742 0190 78010018 		.word	_NOP+MAPOFFSET
 743 0194 07       	_EXECU:	.byte   7
 744 0195 45584543 		.ascii "EXECUTE"
 744      555445
 745              		.p2align 2 	
 746              	EXECU:
 747 019c 45F00104 		ORR	R4,R5,#1		//  b0=1 
 748 01a0 51F8045B 		_POP
 749 01a4 2047     		BX	R4
 750              	
 751              	//    next	( -- ) counter on R:
 752              	// 	Run time code for the single index loop.
 753              	// 	: next ( -- ) \ hilevel model
 754              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 755              	
 756              	// 	.word	_EXECU+MAPOFFSET
 757              	// _DONXT	.byte   COMPO+4
 758              	// 	.ascii "next"
 759              	// 	.p2align 2 	
 760              	DONXT:
 761 01a6 1468     		LDR	R4,[R2]   // ( -- u )  
 762 01a8 24B9     		CBNZ R4,NEXT1 
 763              		/* loop done */
 764 01aa 02F10402 		ADD	R2,R2,#4 // drop counter 
 765 01ae 0EF1040E 		ADD	LR,LR,#4 // skip after loop address 
 766 01b2 7047     		_NEXT
 767              	NEXT1:
 768              		/* decrement loop counter */
 769 01b4 A4F10104 		SUB	R4,R4,#1
 770 01b8 1460     		STR	R4,[R2]
 771 01ba 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 772 01be 4EF0010E 		ORR	LR,LR,#1 // begining of loop
 773 01c2 7047     		_NEXT
 774              	
 775              	//    ?branch	( f -- )
 776              	// 	Branch if flag is zero.
 777              	
 778              	// 	.word	_DONXT+MAPOFFSET
 779              	// _QBRAN	.byte   COMPO+7
 780              	// 	.ascii "?branch"
 781              	// 	.p2align 2 	
 782              	QBRAN:
 783 01c4 2C00     		MOVS	R4,R5
 784 01c6 51F8045B 		_POP
 785 01ca 04D1     		BNE	QBRAN1
 786 01cc 5EF801EC 		LDR	LR,[LR,#-1]
 787 01d0 4EF0010E 		ORR LR,LR,#1
 788 01d4 7047     		_NEXT
 789              	QBRAN1:
 790 01d6 0EF1040E 	 	ADD	LR,LR,#4
 791 01da 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 18


 792              	
 793              	//    branch	( -- )
 794              	// 	Branch to an inline address.
 795              	
 796              	// 	.word	_QBRAN+MAPOFFSET
 797              	// _BRAN	.byte   COMPO+6
 798              	// 	.ascii "branch"
 799              	// 	.p2align 2 	
 800              	BRAN:
 801 01dc 5EF801EC 		LDR	LR,[LR,#-1]
 802 01e0 4EF0010E 		ORR	LR,LR,#1
 803 01e4 7047     		_NEXT
 804              	
 805              	//    EXIT	(  -- )
 806              	// 	Exit the currently executing command.
 807              	
 808 01e6 94010018 		.word	_EXECU+MAPOFFSET
 809 01ea 04       	_EXIT:	.byte   4
 810 01eb 45584954 		.ascii "EXIT"
 811 01ef 00       		.p2align 2 	
 812              	EXIT:
 813 01f0 52F804FB 		_UNNEST
 814              	
 815              	//    !	   ( w a -- )
 816              	// 	Pop the data stack to memory.
 817              	
 818 01f4 EA010018 		.word	_EXIT+MAPOFFSET
 819 01f8 01       	_STORE:	.byte   1
 820 01f9 21       		.ascii "!"
 821 01fa 00BF     		.p2align 2 	
 822              	STORE:
 823 01fc 51F8044B 		LDR	R4,[R1],#4
 824 0200 2C60     		STR	R4,[R5]
 825 0202 51F8045B 		_POP
 826 0206 7047     		_NEXT
 827              	
 828              	//    @	   ( a -- w )
 829              	// 	Push memory location to the data stack.
 830              	
 831 0208 F8010018 		.word	_STORE+MAPOFFSET
 832 020c 01       	_AT:	.byte   1
 833 020d 40       		.ascii "@"
 834 020e 00BF     		.p2align 2 	
 835              	AT:
 836 0210 2D68     		LDR	R5,[R5]
 837 0212 7047     		_NEXT
 838              	
 839              	//    C!	  ( c b -- )
 840              	// 	Pop the data stack to byte memory.
 841              	
 842 0214 0C020018 		.word	_AT+MAPOFFSET
 843 0218 02       	_CSTOR:	.byte   2
 844 0219 4321     		.ascii "C!"
 845 021b 00       		.p2align 2 	
 846              	CSTOR:
 847 021c 51F8044B 		LDR	R4,[R1],#4
 848 0220 2C70     		STRB	R4,[R5]
ARM GAS  stm32eforth.s 			page 19


 849 0222 51F8045B 		_POP
 850 0226 7047     		_NEXT
 851              	
 852              	//    C@	  ( b -- c )
 853              	// 	Push byte memory location to the data stack.
 854              	
 855 0228 18020018 		.word	_CSTOR+MAPOFFSET
 856 022c 02       	_CAT:	.byte   2
 857 022d 4340     		.ascii "C@"
 858 022f 00       		.p2align 2 	
 859              	CAT:
 860 0230 2D78     		LDRB	R5,[R5]
 861 0232 7047     		_NEXT
 862              	
 863              	//    R>	  ( -- w )
 864              	// 	Pop the return stack to the data stack.
 865              	
 866 0234 2C020018 		.word	_CAT+MAPOFFSET
 867 0238 02       	_RFROM:	.byte   2
 868 0239 523E     		.ascii "R>"
 869 023b 00       		.p2align 2 	
 870              	RFROM:
 871 023c 41F8045D 		_PUSH
 872 0240 52F8045B 		LDR	R5,[R2],#4
 873 0244 7047     		_NEXT
 874              	
 875              	//    R@	  ( -- w )
 876              	// 	Copy top of return stack to the data stack.
 877              	
 878 0246 38020018 		.word	_RFROM+MAPOFFSET
 879 024a 02       	_RAT:	.byte   2
 880 024b 5240     		.ascii "R@"
 881 024d 0000BF   		.p2align 2 	
 882              	RAT:
 883 0250 41F8045D 		_PUSH
 884 0254 1568     		LDR	R5,[R2]
 885 0256 7047     		_NEXT
 886              	
 887              	//    >R	  ( w -- )
 888              	// 	Push the data stack to the return stack.
 889              	
 890 0258 4A020018 		.word	_RAT+MAPOFFSET
 891 025c 42       	_TOR:	.byte   COMPO+2
 892 025d 3E52     		.ascii ">R"
 893 025f 00       		.p2align 2 	
 894              	TOR:
 895 0260 42F8045D 		STR	R5,[R2,#-4]!
 896 0264 51F8045B 		_POP
 897 0268 7047     		_NEXT
 898              	
 899              	//    SP@	 ( -- a )
 900              	// 	Push the current data stack pointer.
 901              	
 902 026a 5C020018 		.word	_TOR+MAPOFFSET
 903 026e 03       	_SPAT:	.byte   3
 904 026f 535040   		.ascii "SP@"
 905 0272 00BF     		.p2align 2 	
ARM GAS  stm32eforth.s 			page 20


 906              	SPAT:
 907 0274 41F8045D 		_PUSH
 908 0278 0D46     		MOV	R5,R1
 909 027a 7047     		_NEXT
 910              	
 911              	//    DROP	( w -- )
 912              	// 	Discard top stack item.
 913              	
 914 027c 6E020018 		.word	_SPAT+MAPOFFSET
 915 0280 04       	_DROP:	.byte   4
 916 0281 44524F50 		.ascii "DROP"
 917 0285 0000BF   		.p2align 2 	
 918              	DROP:
 919 0288 51F8045B 		_POP
 920 028c 7047     		_NEXT
 921              	
 922              	//    DUP	 ( w -- w w )
 923              	// 	Duplicate the top stack item.
 924              	
 925 028e 80020018 		.word	_DROP+MAPOFFSET
 926 0292 03       	_DUPP:	.byte   3
 927 0293 445550   		.ascii "DUP"
 928 0296 00BF     		.p2align 2 	
 929              	DUPP:
 930 0298 41F8045D 		_PUSH
 931 029c 7047     		_NEXT
 932              	
 933              	//    SWAP	( w1 w2 -- w2 w1 )
 934              	// 	Exchange top two stack items.
 935              	
 936 029e 92020018 		.word	_DUPP+MAPOFFSET
 937 02a2 04       	_SWAP:	.byte   4
 938 02a3 53574150 		.ascii "SWAP"
 939 02a7 00       		.p2align 2 	
 940              	SWAP:
 941 02a8 0C68     		LDR	R4,[R1]
 942 02aa 0D60     		STR	R5,[R1]
 943 02ac 2546     		MOV	R5,R4
 944 02ae 7047     		_NEXT
 945              	
 946              	//    OVER	( w1 w2 -- w1 w2 w1 )
 947              	// 	Copy second stack item to top.
 948              	
 949 02b0 A2020018 		.word	_SWAP+MAPOFFSET
 950 02b4 04       	_OVER:	.byte   4
 951 02b5 4F564552 		.ascii "OVER"
 952 02b9 0000BF   		.p2align 2 	
 953              	OVER:
 954 02bc 41F8045D 		_PUSH
 955 02c0 4D68     		LDR	R5,[R1,#4]
 956 02c2 7047     		_NEXT
 957              	
 958              	//    0<	  ( n -- t )
 959              	// 	Return true if n is negative.
 960              	
 961 02c4 B4020018 		.word	_OVER+MAPOFFSET
 962 02c8 02       	_ZLESS:	.byte   2
ARM GAS  stm32eforth.s 			page 21


 963 02c9 303C     		.ascii "0<"
 964 02cb 00       		.p2align 2 	
 965              	ZLESS:
 966 02cc 4FF00004 		MOV	R4,#0
 967 02d0 04EB2505 		ADD	R5,R4,R5,ASR #32
 968 02d4 7047     		_NEXT
 969              	
 970              	//    AND	 ( w w -- w )
 971              	// 	Bitwise AND.
 972              	
 973 02d6 C8020018 		.word	_ZLESS+MAPOFFSET
 974 02da 03       	_ANDD:	.byte   3
 975 02db 414E44   		.ascii "AND"
 976 02de 00BF     		.p2align 2 	
 977              	ANDD:
 978 02e0 51F8044B 		LDR	R4,[R1],#4
 979 02e4 05EA0405 		AND	R5,R4
 980 02e8 7047     		_NEXT
 981 02ea 00BF     		.p2align 2
 982              	
 983              	//    OR	  ( w w -- w )
 984              	// 	Bitwise inclusive OR.
 985              	
 986 02ec DA020018 		.word	_ANDD+MAPOFFSET
 987 02f0 02       	_ORR:	.byte   2
 988 02f1 4F52     		.ascii "OR"
 989 02f3 00       		.p2align 2 	
 990              	ORR:
 991 02f4 51F8044B 		LDR	R4,[R1],#4
 992 02f8 45EA0405 		ORR	R5,R4
 993 02fc 7047     		_NEXT
 994 02fe 00BF     		.p2align 2
 995              	
 996              	//    XOR	 ( w w -- w )
 997              	// 	Bitwise exclusive OR.
 998              	
 999 0300 F0020018 		.word	_ORR+MAPOFFSET
 1000 0304 03       	_XORR:	.byte   3
 1001 0305 584F52   		.ascii "XOR"
 1002              		.p2align 2 	
 1003              	XORR:
 1004 0308 51F8044B 		LDR	R4,[R1],#4
 1005 030c 85EA0405 		EOR	R5,R4
 1006 0310 7047     		_NEXT
 1007 0312 00BF     		.p2align 2
 1008              	
 1009              	//    UM+	 ( w w -- w cy )
 1010              	// 	Add two numbers, return the sum and carry flag.
 1011              	
 1012 0314 04030018 		.word	_XORR+MAPOFFSET
 1013 0318 03       	_UPLUS:	.byte   3
 1014 0319 554D2B   		.ascii "UM+"
 1015              		.p2align 2 	
 1016              	UPLUS:
 1017 031c 0C68     		LDR	R4,[R1]
 1018 031e 6419     		ADDS	R4,R4,R5
 1019 0320 4FF00005 		MOV	R5,#0
ARM GAS  stm32eforth.s 			page 22


 1020 0324 45F10005 		ADC	R5,R5,#0
 1021 0328 0C60     		STR	R4,[R1]
 1022 032a 7047     		_NEXT
 1023              	
 1024              	//    RSHIFT	 ( w # -- w )
 1025              	// 	arithmetic Right shift # bits.
 1026              	
 1027 032c 18030018 		.word	_UPLUS+MAPOFFSET
 1028 0330 06       	_RSHIFT:	.byte   6
 1029 0331 52534849 		.ascii "RSHIFT"
 1029      4654
 1030 0337 00       		.p2align 2 	
 1031              	RSHIFT:
 1032 0338 51F8044B 		LDR	R4,[R1],#4
 1033 033c 44FA05F5 		MOV	R5,R4,ASR R5
 1034 0340 7047     		_NEXT
 1035              	
 1036              	//    LSHIFT	 ( w # -- w )
 1037              	// 	Right shift # bits.
 1038              	
 1039 0342 30030018 		.word	_RSHIFT+MAPOFFSET
 1040 0346 06       	_LSHIFT:	.byte   6
 1041 0347 4C534849 		.ascii "LSHIFT"
 1041      4654
 1042 034d 0000BF   		.p2align 2 	
 1043              	LSHIFT:
 1044 0350 51F8044B 		LDR	R4,[R1],#4
 1045 0354 04FA05F5 		MOV	R5,R4,LSL R5
 1046 0358 7047     		_NEXT
 1047              	
 1048              	//    +	 ( w w -- w )
 1049              	// 	Add.
 1050              	
 1051 035a 46030018 		.word	_LSHIFT+MAPOFFSET
 1052 035e 01       	_PLUS:	.byte   1
 1053 035f 2B       		.ascii "+"
 1054              		.p2align 2 	
 1055              	PLUS:
 1056 0360 51F8044B 		LDR	R4,[R1],#4
 1057 0364 2544     		ADD	R5,R5,R4
 1058 0366 7047     		_NEXT
 1059              	
 1060              	//    -	 ( w w -- w )
 1061              	// 	Subtract.
 1062              	
 1063 0368 5E030018 		.word	_PLUS+MAPOFFSET
 1064 036c 01       	_SUBB:	.byte   1
 1065 036d 2D       		.ascii "-"
 1066 036e 00BF     		.p2align 2 	
 1067              	SUBB:
 1068 0370 51F8044B 		LDR	R4,[R1],#4
 1069 0374 C5EB0405 		RSB	R5,R5,R4
 1070 0378 7047     		_NEXT
 1071              	
 1072              	//    *	 ( w w -- w )
 1073              	// 	Multiply.
 1074              	
ARM GAS  stm32eforth.s 			page 23


 1075 037a 6C030018 		.word	_SUBB+MAPOFFSET
 1076 037e 01       	_STAR:	.byte   1
 1077 037f 2A       		.ascii "*"
 1078              		.p2align 2 	
 1079              	STAR:
 1080 0380 51F8044B 		LDR	R4,[R1],#4
 1081 0384 04FB05F5 		MUL	R5,R4,R5
 1082 0388 7047     		_NEXT
 1083              	
 1084              	//    UM*	 ( w w -- ud )
 1085              	// 	Unsigned multiply.
 1086              	
 1087 038a 7E030018 		.word	_STAR+MAPOFFSET
 1088 038e 03       	_UMSTA:	.byte   3
 1089 038f 554D2A   		.ascii "UM*"
 1090 0392 00BF     		.p2align 2 	
 1091              	UMSTA:
 1092 0394 0C68     		LDR	R4,[R1]
 1093 0396 A5FB0467 		UMULL	R6,R7,R5,R4
 1094 039a 0E60     		STR	R6,[R1]
 1095 039c 3D46     		MOV	R5,R7
 1096 039e 7047     		_NEXT
 1097              	
 1098              	//    M*	 ( w w -- d )
 1099              	// 	signed multiply.
 1100              	
 1101 03a0 8E030018 		.word	_UMSTA+MAPOFFSET
 1102 03a4 02       	_MSTAR:	.byte   2
 1103 03a5 4D2A     		.ascii "M*"
 1104 03a7 00       		.p2align 2 	
 1105              	MSTAR:
 1106 03a8 0C68     		LDR	R4,[R1]
 1107 03aa 85FB0467 		SMULL	R6,R7,R5,R4
 1108 03ae 0E60     		STR	R6,[R1]
 1109 03b0 3D46     		MOV	R5,R7
 1110 03b2 7047     		_NEXT
 1111              	
 1112              	//    1+	 ( w -- w+1 )
 1113              	// 	Add 1.
 1114              	
 1115 03b4 A4030018 		.word	_MSTAR+MAPOFFSET
 1116 03b8 02       	_ONEP:	.byte   2
 1117 03b9 312B     		.ascii "1+"
 1118 03bb 00       		.p2align 2 	
 1119              	ONEP:
 1120 03bc 05F10105 		ADD	R5,R5,#1
 1121 03c0 7047     		_NEXT
 1122              	
 1123              	//    1-	 ( w -- w-1 )
 1124              	// 	Subtract 1.
 1125              	
 1126 03c2 B8030018 		.word	_ONEP+MAPOFFSET
 1127 03c6 02       	_ONEM:	.byte   2
 1128 03c7 312D     		.ascii "1-"
 1129 03c9 0000BF   		.p2align 2 	
 1130              	ONEM:
 1131 03cc A5F10105 		SUB	R5,R5,#1
ARM GAS  stm32eforth.s 			page 24


 1132 03d0 7047     		_NEXT
 1133              	
 1134              	//    2+	 ( w -- w+2 )
 1135              	// 	Add 1.
 1136              	
 1137 03d2 C6030018 		.word	_ONEM+MAPOFFSET
 1138 03d6 02       	_TWOP:	.byte   2
 1139 03d7 322B     		.ascii "2+"
 1140 03d9 0000BF   		.p2align 2 	
 1141              	TWOP:
 1142 03dc 05F10205 		ADD	R5,R5,#2
 1143 03e0 7047     		_NEXT
 1144              	
 1145              	//    2-	 ( w -- w-2 )
 1146              	// 	Subtract 2.
 1147              	
 1148 03e2 D6030018 		.word	_TWOP+MAPOFFSET
 1149 03e6 02       	_TWOM:	.byte   2
 1150 03e7 322D     		.ascii "2-"
 1151 03e9 0000BF   		.p2align 2 	
 1152              	TWOM:
 1153 03ec A5F10205 		SUB	R5,R5,#2
 1154 03f0 7047     		_NEXT
 1155              	
 1156              	//    CELL+	( w -- w+4 )
 1157              	// 	Add CELLL.
 1158              	
 1159 03f2 E6030018 		.word	_TWOM+MAPOFFSET
 1160 03f6 05       	_CELLP:	.byte   5
 1161 03f7 43454C4C 		.ascii "CELL+"
 1161      2B
 1162              		.p2align 2 	
 1163              	CELLP:
 1164 03fc 05F10405 		ADD	R5,R5,#CELLL
 1165 0400 7047     		_NEXT
 1166              	
 1167              	//    CELL-	( w -- w-4 )
 1168              	// 	Subtract CELLL.
 1169              	
 1170 0402 F6030018 		.word	_CELLP+MAPOFFSET
 1171 0406 05       	_CELLM:	.byte   5
 1172 0407 43454C4C 		.ascii "CELL-"
 1172      2D
 1173              		.p2align 2 	
 1174              	CELLM:
 1175 040c A5F10405 		SUB	R5,R5,#CELLL
 1176 0410 7047     		_NEXT
 1177              	 
 1178              	//    BL	( -- 32 )
 1179              	// 	Blank (ASCII space).
 1180              	
 1181 0412 06040018 		.word	_CELLM+MAPOFFSET
 1182 0416 02       	_BLANK:	.byte   2
 1183 0417 424C     		.ascii "BL"
 1184 0419 0000BF   		.p2align 2 	
 1185              	BLANK:
 1186 041c 41F8045D 		_PUSH
ARM GAS  stm32eforth.s 			page 25


 1187 0420 4FF02005 		MOV	R5,#32
 1188 0424 7047     		_NEXT
 1189              	
 1190              	//    CELLS	( w -- w*4 )
 1191              	// 	Multiply 4.
 1192              	
 1193 0426 16040018 		.word	_BLANK+MAPOFFSET
 1194 042a 05       	_CELLS:	.byte   5
 1195 042b 43454C4C 		.ascii "CELLS"
 1195      53
 1196              		.p2align 2 	
 1197              	CELLS:
 1198 0430 4FEA8505 		MOV	R5,R5,LSL#2
 1199 0434 7047     		_NEXT
 1200              	
 1201              	//    CELL/	( w -- w/4 )
 1202              	// 	Divide by 4.
 1203              	
 1204 0436 2A040018 		.word	_CELLS+MAPOFFSET
 1205 043a 05       	_CELLSL:	.byte   5
 1206 043b 43454C4C 		.ascii "CELL/"
 1206      2F
 1207              		.p2align 2 	
 1208              	CELLSL:
 1209 0440 4FEAA505 		MOV	R5,R5,ASR#2
 1210 0444 7047     		_NEXT
 1211              	
 1212              	//    2*	( w -- w*2 )
 1213              	// 	Multiply 2.
 1214              	
 1215 0446 3A040018 		.word	_CELLSL+MAPOFFSET
 1216 044a 02       	_TWOST:	.byte   2
 1217 044b 322A     		.ascii "2*"
 1218 044d 0000BF   		.p2align 2 	
 1219              	TWOST:
 1220 0450 4FEA4505 		MOV	R5,R5,LSL#1
 1221 0454 7047     		_NEXT
 1222              	
 1223              	//    2/	( w -- w/2 )
 1224              	// 	Divide by 2.
 1225              	
 1226 0456 4A040018 		.word	_TWOST+MAPOFFSET
 1227 045a 02       	_TWOSL:	.byte   2
 1228 045b 322F     		.ascii "2/"
 1229 045d 0000BF   		.p2align 2 	
 1230              	TWOSL:
 1231 0460 4FEA6505 		MOV	R5,R5,ASR#1
 1232 0464 7047     		_NEXT
 1233              	
 1234              	//    ?DUP	( w -- w w | 0 )
 1235              	// 	Conditional duplicate.
 1236              	
 1237 0466 5A040018 		.word	_TWOSL+MAPOFFSET
 1238 046a 04       	_QDUP:	.byte   4
 1239 046b 3F445550 		.ascii "?DUP"
 1240 046f 00       		.p2align 2 	
 1241              	QDUP:
ARM GAS  stm32eforth.s 			page 26


 1242 0470 2C00     		MOVS	R4,R5
 1243 0472 18BF     		IT NE 
 1244 0474 41F8045D 	    STRNE	R5,[R1,#-4]!
 1245 0478 7047     		_NEXT
 1246              	
 1247              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1248              	// 	Rotate top 3 items.
 1249              	
 1250 047a 6A040018 		.word	_QDUP+MAPOFFSET
 1251 047e 03       	_ROT:	.byte   3
 1252 047f 524F54   		.ascii "ROT"
 1253 0482 00BF     		.p2align 2 	
 1254              	ROT:
 1255 0484 0C68     		LDR	R4,[R1]  // r4=w2 
 1256 0486 0D60     		STR	R5,[R1]  // w3 replace w2 
 1257 0488 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1258 048a 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1259 048c 7047     		_NEXT
 1260              	
 1261              	//    2DROP	( w1 w2 -- )
 1262              	// 	Drop top 2 items.
 1263              	
 1264 048e 7E040018 		.word	_ROT+MAPOFFSET
 1265 0492 05       	_DDROP:	.byte   5
 1266 0493 3244524F 		.ascii "2DROP"
 1266      50
 1267              		.p2align 2 	
 1268              	DDROP:
 1269 0498 51F8045B 		_POP
 1270 049c 51F8045B 		_POP
 1271 04a0 7047     		_NEXT
 1272              	
 1273              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1274              	// 	Duplicate top 2 items.
 1275              	
 1276 04a2 92040018 		.word	_DDROP+MAPOFFSET
 1277 04a6 04       	_DDUP:	.byte   4
 1278 04a7 32445550 		.ascii "2DUP"
 1279 04ab 00       		.p2align 2 	
 1280              	DDUP:
 1281 04ac 0C68     		LDR	R4,[R1] // r4=w1
 1282 04ae 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1283 04b2 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1284 04b6 7047     		_NEXT
 1285              	
 1286              	//    D+	( d1 d2 -- d3 )
 1287              	// 	Add top 2 double numbers.
 1288              	
 1289 04b8 A6040018 		.word	_DDUP+MAPOFFSET
 1290 04bc 02       	_DPLUS:	.byte   2
 1291 04bd 442B     		.ascii "D+"
 1292 04bf 00       		.p2align 2 	
 1293              	DPLUS:
 1294 04c0 51F8044B 		LDR	R4,[R1],#4
 1295 04c4 51F8046B 		LDR	R6,[R1],#4
 1296 04c8 0F68     		LDR	R7,[R1]
 1297 04ca E419     		ADDS	R4,R4,R7
ARM GAS  stm32eforth.s 			page 27


 1298 04cc 0C60     		STR	R4,[R1]
 1299 04ce 45EB0605 		ADC	R5,R5,R6
 1300 04d2 7047     		_NEXT
 1301              	
 1302              	//    NOT	 ( w -- !w )
 1303              	// 	1"s complement.
 1304              	
 1305 04d4 BC040018 		.word	_DPLUS+MAPOFFSET
 1306 04d8 03       	_INVER:	.byte   3
 1307 04d9 4E4F54   		.ascii "NOT"
 1308              		.p2align 2 	
 1309              	INVER:
 1310 04dc 6FEA0505 		MVN	R5,R5
 1311 04e0 7047     		_NEXT
 1312              	
 1313              	//    NEGATE	( w -- -w )
 1314              	// 	2's complement.
 1315              	
 1316 04e2 D8040018 		.word	_INVER+MAPOFFSET
 1317 04e6 06       	_NEGAT:	.byte   6
 1318 04e7 4E454741 		.ascii "NEGATE"
 1318      5445
 1319 04ed 0000BF   		.p2align 2 	
 1320              	NEGAT:
 1321 04f0 C5F10005 		RSB	R5,R5,#0
 1322 04f4 7047     		_NEXT
 1323              	
 1324              	//    ABS	 ( w -- |w| )
 1325              	// 	Absolute.
 1326              	
 1327 04f6 E6040018 		.word	_NEGAT+MAPOFFSET
 1328 04fa 03       	_ABSS:	.byte   3
 1329 04fb 414253   		.ascii "ABS"
 1330 04fe 00BF     		.p2align 2 	
 1331              	ABSS:
 1332 0500 15F0004F 		TST	R5,#0x80000000
 1333 0504 18BF     		IT NE
 1334 0506 6D42     	    RSBNE   R5,R5,#0
 1335 0508 7047     		_NEXT
 1336              	
 1337              	//  0= ( w -- f )
 1338              	// TOS==0?
 1339              	
 1340 050a FA040018 		.word _ABSS+MAPOFFSET
 1341 050e 02       	_ZEQUAL: .byte 2
 1342 050f 303D     		.ascii "0="
 1343 0511 0000BF   		.p2align 2
 1344              	ZEQUAL:
 1345 0514 15B9     		cbnz r5,1f
 1346 0516 4FF0FF35 		mov r5,#-1
 1347 051a 7047     		_NEXT 
 1348 051c 85EA0505 	1:  eor r5,r5,r5  
 1349 0520 7047     		_NEXT 	
 1350              	
 1351              	//    =	 ( w w -- t )
 1352              	// 	Equal?
 1353              	
ARM GAS  stm32eforth.s 			page 28


 1354 0522 0E050018 		.word	_ZEQUAL+MAPOFFSET
 1355 0526 01       	_EQUAL:	.byte   1
 1356 0527 3D       		.ascii "="
 1357              		.p2align 2 	
 1358              	EQUAL:
 1359 0528 51F8044B 		LDR	R4,[R1],#4
 1360 052c A542     		CMP	R5,R4
 1361 052e 0CBF     		ITE EQ 
 1362 0530 6FF00005 	    MVNEQ	R5,#0
 1363 0534 0025     		MOVNE	R5,#0
 1364 0536 7047     		_NEXT
 1365              	
 1366              	//    U<	 ( w w -- t )
 1367              	// 	Unsigned equal?
 1368              	
 1369 0538 26050018 		.word	_EQUAL+MAPOFFSET
 1370 053c 02       	_ULESS:	.byte   2
 1371 053d 553C     		.ascii "U<"
 1372 053f 00       		.p2align 2 	
 1373              	ULESS:
 1374 0540 51F8044B 		LDR	R4,[R1],#4
 1375 0544 AC42     		CMP	R4,R5
 1376 0546 34BF     		ITE CC 
 1377 0548 6FF00005 		MVNCC	R5,#0
 1378 054c 0025     		MOVCS	R5,#0
 1379 054e 7047     		_NEXT
 1380              	
 1381              	//    <	( w w -- t )
 1382              	// 	Less?
 1383              	
 1384 0550 3C050018 		.word	_ULESS+MAPOFFSET
 1385 0554 01       	_LESS:	.byte   1
 1386 0555 3C       		.ascii "<"
 1387 0556 00BF     		.p2align 2 	
 1388              	LESS:
 1389 0558 51F8044B 		LDR	R4,[R1],#4
 1390 055c AC42     		CMP	R4,R5
 1391 055e B4BF     	    ITE LT
 1392 0560 6FF00005 		MVNLT	R5,#0
 1393 0564 0025     		MOVGE	R5,#0
 1394 0566 7047     		_NEXT
 1395              	
 1396              	//    >	( w w -- t )
 1397              	// 	greater?
 1398              	
 1399 0568 54050018 		.word	_LESS+MAPOFFSET
 1400 056c 01       	_GREAT:	.byte   1
 1401 056d 3E       		.ascii ">"
 1402 056e 00BF     		.p2align 2 	
 1403              	GREAT:
 1404 0570 51F8044B 		LDR	R4,[R1],#4
 1405 0574 AC42     		CMP	R4,R5
 1406 0576 CCBF     		ITE GT
 1407 0578 6FF00005 	    MVNGT	R5,#0
 1408 057c 0025     		MOVLE	R5,#0
 1409 057e 7047     		_NEXT
 1410              	
ARM GAS  stm32eforth.s 			page 29


 1411              	//    MAX	 ( w w -- max )
 1412              	// 	Leave maximum.
 1413              	
 1414 0580 6C050018 		.word	_GREAT+MAPOFFSET
 1415 0584 03       	_MAX:	.byte   3
 1416 0585 4D4158   		.ascii "MAX"
 1417              		.p2align 2 	
 1418              	MAX:
 1419 0588 51F8044B 		LDR	R4,[R1],#4
 1420 058c AC42     		CMP	R4,R5
 1421 058e C8BF     		IT GT 
 1422 0590 2546     		MOVGT	R5,R4
 1423 0592 7047     		_NEXT
 1424              	
 1425              	//    MIN	 ( w w -- min )
 1426              	// 	Leave minimum.
 1427              	
 1428 0594 84050018 		.word	_MAX+MAPOFFSET
 1429 0598 03       	_MIN:	.byte   3
 1430 0599 4D494E   		.ascii "MIN"
 1431              		.p2align 2 	
 1432              	MIN:
 1433 059c 51F8044B 		LDR	R4,[R1],#4
 1434 05a0 AC42     		CMP	R4,R5
 1435 05a2 B8BF     		IT LT
 1436 05a4 2546     		MOVLT	R5,R4
 1437 05a6 7047     		_NEXT
 1438              	
 1439              	//    +!	 ( w a -- )
 1440              	// 	Add to memory.
 1441              	
 1442 05a8 98050018 		.word	_MIN+MAPOFFSET
 1443 05ac 02       	_PSTOR:	.byte   2
 1444 05ad 2B21     		.ascii "+!"
 1445 05af 00       		.p2align 2 	
 1446              	PSTOR:
 1447 05b0 51F8044B 		LDR	R4,[R1],#4
 1448 05b4 2E68     		LDR	R6,[R5]
 1449 05b6 2644     		ADD	R6,R6,R4
 1450 05b8 2E60     		STR	R6,[R5]
 1451 05ba 51F8045B 		_POP
 1452 05be 7047     		_NEXT
 1453              	
 1454              	//    2!	 ( d a -- )
 1455              	// 	Store double number.
 1456              	
 1457 05c0 AC050018 		.word	_PSTOR+MAPOFFSET
 1458 05c4 02       	_DSTOR:	.byte   2
 1459 05c5 3221     		.ascii "2!"
 1460 05c7 00       		.p2align 2 	
 1461              	DSTOR:
 1462 05c8 51F8044B 		LDR	R4,[R1],#4
 1463 05cc 51F8046B 		LDR	R6,[R1],#4
 1464 05d0 45F8044B 		STR	R4,[R5],#4
 1465 05d4 2E60     		STR	R6,[R5]
 1466 05d6 51F8045B 		_POP
 1467 05da 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 30


 1468              	
 1469              	//    2@	 ( a -- d )
 1470              	// 	Fetch double number.
 1471              	
 1472 05dc C4050018 		.word	_DSTOR+MAPOFFSET
 1473 05e0 02       	_DAT:	.byte   2
 1474 05e1 3240     		.ascii "2@"
 1475 05e3 00       		.p2align 2 	
 1476              	DAT:
 1477 05e4 6C68     		LDR	R4,[R5,#4]
 1478 05e6 41F8044D 		STR	R4,[R1,#-4]!
 1479 05ea 2D68     		LDR	R5,[R5]
 1480 05ec 7047     		_NEXT
 1481              	
 1482              	//    COUNT	( b -- b+1 c )
 1483              	// 	Fetch length of string.
 1484              	
 1485 05ee E0050018 		.word	_DAT+MAPOFFSET
 1486 05f2 05       	_COUNT:	.byte   5
 1487 05f3 434F554E 		.ascii "COUNT"
 1487      54
 1488              		.p2align 2 	
 1489              	COUNT:
 1490 05f8 15F8014B 		LDRB	R4,[R5],#1
 1491 05fc 41F8045D 		_PUSH
 1492 0600 2546     		MOV	R5,R4
 1493 0602 7047     		_NEXT
 1494              	
 1495              	//    DNEGATE	( d -- -d )
 1496              	// 	Negate double number.
 1497              	
 1498 0604 F2050018 		.word	_COUNT+MAPOFFSET
 1499 0608 07       	_DNEGA:	.byte   7
 1500 0609 444E4547 		.ascii "DNEGATE"
 1500      415445
 1501              		.p2align 2 	
 1502              	DNEGA:
 1503 0610 0C68     		LDR	R4,[R1]
 1504 0612 A6EB0606 		SUB	R6,R6,R6
 1505 0616 341B     		SUBS R4,R6,R4
 1506 0618 66EB0505 		SBC	R5,R6,R5
 1507 061c 0C60     		STR	R4,[R1]
 1508 061e 7047     		_NEXT
 1509              	
 1510              	// **************************************************************************
 1511              	//  System and user variables
 1512              	
 1513              	//    doVAR	( -- a )
 1514              	// 	Run time routine for VARIABLE and CREATE.
 1515              	
 1516              	// 	.word	_DNEGA+MAPOFFSET
 1517              	// _DOVAR	.byte  COMPO+5
 1518              	// 	.ascii "doVAR"
 1519              	// 	.p2align 2 	
 1520              	DOVAR:
 1521 0620 41F8045D 		_PUSH
 1522 0624 AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
ARM GAS  stm32eforth.s 			page 31


 1523 0628 52F804FB 		_UNNEST
 1524              	
 1525              	//    doCON	( -- a ) 
 1526              	// 	Run time routine for CONSTANT.
 1527              	
 1528              	// 	.word	_DOVAR+MAPOFFSET
 1529              	// _DOCON	.byte  COMPO+5
 1530              	// 	.ascii "doCON"
 1531              	// 	.p2align 2 	
 1532              	DOCON:
 1533 062c 41F8045D 		_PUSH
 1534 0630 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1535 0634 52F804FB 		_UNNEST
 1536              	
 1537              	/***********************
 1538              	  system variables 
 1539              	***********************/
 1540              	
 1541              	 // SEED ( -- a)
 1542              	 // return PRNG seed address 
 1543              	
 1544 0638 08060018 		.word _DNEGA+MAPOFFSET
 1545 063c 04       	_SEED: .byte 4
 1546 063d 53454544 		.ascii "SEED"
 1547 0641 0000BF   		.p2align 2
 1548              	SEED:
 1549 0644 41F8045D 		_PUSH 
 1550 0648 03F10405 		ADD R5,R3,#SEED_OFS
 1551 064c 7047     		_NEXT 	
 1552              	
 1553              	//  MSEC ( -- a)
 1554              	// return address of milliseconds counter
 1555 064e 3C060018 	  .word _SEED+MAPOFFSET 
 1556 0652 04       	_MSEC: .byte 4
 1557 0653 4D534543 	  .ascii "MSEC"
 1558 0657 00       	  .p2align 2 
 1559              	MSEC:
 1560 0658 41F8045D 	  _PUSH
 1561 065c 03F10805 	  ADD R5,R3,#TICKS_OFS
 1562 0660 7047     	  _NEXT 
 1563              	
 1564              	// TIMER ( -- a )
 1565              	// count down timer 
 1566 0662 52060018 	  .word _MSEC+MAPOFFSET
 1567 0666 05       	_TIMER:  .byte 5
 1568 0667 54494D45 	  .ascii "TIMER"
 1568      52
 1569              	  .p2align 2 
 1570              	TIMER:
 1571 066c 41F8045D 	  _PUSH 
 1572 0670 03F10C05 	  ADD R5,R3,#TIMER_OFS
 1573 0674 7047     	  _NEXT
 1574              	
 1575              	// >RAM ( -- a )
 1576              	// compilation target 
 1577              	// -1 compile to RAM, 0 compile to FLASH 
 1578 0676 66060018 		.word _TIMER+MAPOFFSET
ARM GAS  stm32eforth.s 			page 32


 1579 067a 04       	_TORAM: .byte 4 
 1580 067b 3E52414D 		.ascii ">RAM" 
 1581 067f 00       		.p2align 2 
 1582              	TORAM:
 1583 0680 41F8045D 		_PUSH 
 1584 0684 03F11005 		ADD R5,R3,#TORAM_OFS
 1585 0688 7047     		_NEXT 
 1586              	
 1587              	//    'BOOT	 ( -- a )
 1588              	// 	Application.
 1589              	
 1590 068a 7A060018 		.word	_TORAM+MAPOFFSET
 1591 068e 05       	_TBOOT:	.byte   5
 1592 068f 27424F4F 		.ascii "'BOOT"
 1592      54
 1593              		.p2align 2 	
 1594              	TBOOT:
 1595 0694 41F8045D 		_PUSH
 1596 0698 03F11805 		ADD	R5,R3,#BOOT_OFS 
 1597 069c 7047     		_NEXT
 1598              		
 1599              	//    BASE	( -- a )
 1600              	// 	Storage of the radix base for numeric I/O.
 1601              	
 1602 069e 8E060018 		.word	_TBOOT+MAPOFFSET
 1603 06a2 04       	_BASE:	.byte   4
 1604 06a3 42415345 		.ascii "BASE"
 1605 06a7 00       		.p2align 2 	
 1606              	BASE:
 1607 06a8 41F8045D 		_PUSH
 1608 06ac 03F11C05 		ADD	R5,R3,#BASE_OFS
 1609 06b0 7047     		_NEXT
 1610              	
 1611              	//    tmp	 ( -- a )
 1612              	// 	A temporary storage location used in parse and find.
 1613              	
 1614              	// 	.word	_BASE+MAPOFFSET
 1615              	// _TEMP	.byte   COMPO+3
 1616              	// 	.ascii "tmp"
 1617              	// 	.p2align 2 	
 1618              	TEMP:
 1619 06b2 41F8045D 		_PUSH
 1620 06b6 03F12005 		ADD	R5,R3,#TMP_OFS
 1621 06ba 7047     		_NEXT
 1622              	
 1623              	//    SPAN	( -- a )
 1624              	// 	Hold character count received by EXPECT.
 1625              	
 1626 06bc A2060018 		.word	_BASE+MAPOFFSET
 1627 06c0 04       	_SPAN:	.byte   4
 1628 06c1 5350414E 		.ascii "SPAN"
 1629 06c5 0000BF   		.p2align 2 	
 1630              	SPAN:
 1631 06c8 41F8045D 		_PUSH
 1632 06cc 03F12405 		ADD	R5,R3,#SPAN_OFS
 1633 06d0 7047     		_NEXT
 1634              	
ARM GAS  stm32eforth.s 			page 33


 1635              	//    >IN	 ( -- a )
 1636              	// 	Hold the character pointer while parsing input stream.
 1637              	
 1638 06d2 C0060018 		.word	_SPAN+MAPOFFSET
 1639 06d6 03       	_INN:	.byte   3
 1640 06d7 3E494E   		.ascii ">IN"
 1641 06da 00BF     		.p2align 2 	
 1642              	INN:
 1643 06dc 41F8045D 		_PUSH
 1644 06e0 03F12805 		ADD	R5,R3,#TOIN_OFS
 1645 06e4 7047     		_NEXT
 1646              	
 1647              	//    #TIB	( -- a )
 1648              	// 	Hold the current count and address of the terminal input buffer.
 1649              	
 1650 06e6 D6060018 		.word	_INN+MAPOFFSET
 1651 06ea 04       	_NTIB:	.byte   4
 1652 06eb 23544942 		.ascii "#TIB"
 1653 06ef 00       		.p2align 2 	
 1654              	NTIB:
 1655 06f0 41F8045D 		_PUSH
 1656 06f4 03F12C05 		ADD	R5,R3,#NTIB_OFS
 1657 06f8 7047     		_NEXT
 1658              	
 1659              	//    'EVAL	( -- a )
 1660              	// 	Execution vector of EVAL.
 1661              	
 1662 06fa EA060018 		.word	_NTIB+MAPOFFSET
 1663 06fe 05       	_TEVAL:	.byte   5
 1664 06ff 27455641 		.ascii "'EVAL"
 1664      4C
 1665              		.p2align 2 	
 1666              	TEVAL:
 1667 0704 41F8045D 		_PUSH
 1668 0708 03F13405 		ADD	R5,R3,#EVAL_OFS
 1669 070c 7047     		_NEXT
 1670              	
 1671              	//    HLD	 ( -- a )
 1672              	// 	Hold a pointer in building a numeric output string.
 1673              	
 1674 070e FE060018 		.word	_TEVAL+MAPOFFSET
 1675 0712 03       	_HLD:	.byte   3
 1676 0713 484C44   		.ascii "HLD"
 1677 0716 00BF     		.p2align 2 	
 1678              	HLD:
 1679 0718 41F8045D 		_PUSH
 1680 071c 03F13805 		ADD	R5,R3,#HLD_OFS
 1681 0720 7047     		_NEXT
 1682              	
 1683              	//    CONTEXT	( -- a )
 1684              	// 	A area to specify vocabulary search order.
 1685              	
 1686 0722 12070018 		.word	_HLD+MAPOFFSET
 1687 0726 07       	_CNTXT:	.byte   7
 1688 0727 434F4E54 		.ascii "CONTEXT"
 1688      455854
 1689 072e 00BF     		.p2align 2 	
ARM GAS  stm32eforth.s 			page 34


 1690              	CNTXT:
 1691              	CRRNT:
 1692 0730 41F8045D 		_PUSH
 1693 0734 03F13C05 		ADD	R5,R3,#CTXT_OFS
 1694 0738 7047     		_NEXT
 1695              	
 1696              	//    CP	( -- a )
 1697              	// 	Point to top name in RAM vocabulary.
 1698              	
 1699 073a 26070018 		.word	_CNTXT+MAPOFFSET
 1700 073e 02       	_CP:	.byte   2
 1701 073f 4350     		.ascii "CP"
 1702 0741 0000BF   		.p2align 2 	
 1703              	CPP:
 1704 0744 41F8045D 		_PUSH
 1705 0748 03F14405 		ADD	R5,R3,#USER_CTOP_OFS
 1706 074c 7047     		_NEXT
 1707              	
 1708              	//   FCP ( -- a )
 1709              	//  Point ot top of Forth system dictionary
 1710 074e 3E070018 		.word _CP+MAPOFFSET
 1711 0752 03       	_FCP: .byte 3            
 1712 0753 464350   		.ascii "FCP"
 1713 0756 00BF     		.p2align 2 
 1714              	FCP: 
 1715 0758 41F8045D 		_PUSH 
 1716 075c 03F14005 		ADD R5,R3,#FORTH_CTOP_OFS 
 1717 0760 7047     		_NEXT 
 1718              	
 1719              	//    LAST	( -- a )
 1720              	// 	Point to the last name in the name dictionary.
 1721              	
 1722 0762 52070018 		.word	_FCP+MAPOFFSET
 1723 0766 04       	_LAST:	.byte   4
 1724 0767 4C415354 		.ascii "LAST"
 1725 076b 00       		.p2align 2 	
 1726              	LAST:
 1727 076c 41F8045D 		_PUSH
 1728 0770 03F14805 		ADD	R5,R3,#LASTN_OFS
 1729 0774 7047     		_NEXT
 1730              	
 1731              	/***********************
 1732              		system constants 
 1733              	***********************/
 1734              	
 1735              	//	USER_BEGIN ( -- a )
 1736              	//  where user area begin in RAM
 1737 0776 66070018 		.word _LAST+MAPOFFSET
 1738 077a 0A       	_USER_BGN: .byte 10
 1739 077b 55534552 		.ascii "USER_BEGIN"
 1739      5F424547 
 1739      494E
 1740 0785 0000BF   		.p2align 2
 1741              	USER_BEGIN:
 1742 0788 41F8045D 		_PUSH 
 1743 078c 004D     		ldr r5,USR_BGN_ADR 
 1744 078e 7047     		_NEXT 
ARM GAS  stm32eforth.s 			page 35


 1745              	USR_BGN_ADR:
 1746 0790 0C280018 	.word CTOP+MAPOFFSET 
 1747              	
 1748              	//  USER_END ( -- a )
 1749              	//  where user area end in RAM 
 1750 0794 7A070018 		.word _USER_BGN+MAPOFFSET
 1751 0798 08       	_USER_END: .byte 8 
 1752 0799 55534552 		.ascii "USER_END" 
 1752      5F454E44 
 1753 07a1 0000BF   		.p2align 2 
 1754              	USER_END:
 1755 07a4 41F8045D 		_PUSH 
 1756 07a8 4FF49C45 		_MOV32 R5,DEND 
 1756      C2F20005 
 1757 07b0 7047     		_NEXT 
 1758              	
 1759              	//  IMG_ADR ( -- a )
 1760              	//  where user image is saved in FLASH
 1761 07b2 98070018 		.word _USER_END+MAPOFFSET
 1762 07b6 07       	_IMG_ADR: .byte 7
 1763 07b7 494D475F 		.ascii "IMG_ADR"
 1763      414452
 1764 07be 00BF     		.p2align 2 
 1765              	IMG_ADR:
 1766 07c0 41F8045D 		_PUSH
 1767 07c4 004D     		ldr r5,USR_IMG_ADR   
 1768 07c6 7047     		_NEXT 
 1769              	USR_IMG_ADR:
 1770 07c8 00000000 		.word USER_SPACE 
 1771              	
 1772              	// image signature 
 1773 07cc B6070018 		.word _IMG_ADR+MAPOFFSET
 1774 07d0 08       	_IMG_SIGN: .byte 8
 1775 07d1 494D475F 		.ascii "IMG_SIGN"
 1775      5349474E 
 1776 07d9 0000BF   		.p2align 2	
 1777              	IMG_SIGN: 
 1778 07dc 41F8045D 		_PUSH 
 1779 07e0 03F11405 		ADD r5,r3,#IMG_SIGN_OFS 
 1780 07e4 7047     		_NEXT 
 1781              	
 1782              	/* *********************
 1783              	  Common functions
 1784              	***********************/
 1785              	
 1786              	//    WITHIN	( u ul uh -- t )
 1787              	// 	Return true if u is within the range of ul and uh.
 1788              	
 1789 07e6 B6070018 		.word	_IMG_ADR+MAPOFFSET
 1790 07ea 06       	_WITHI:	.byte   6
 1791 07eb 57495448 		.ascii "WITHIN"
 1791      494E
 1792 07f1 0000BF   		.p2align 2 	
 1793              	WITHI:
 1794 07f4 42F804ED 		_NEST
 1795 07f8 FFF760FD 		BL	OVER
 1796 07fc FFF7B8FD 		BL	SUBB
ARM GAS  stm32eforth.s 			page 36


 1797 0800 FFF72EFD 		BL	TOR
 1798 0804 FFF7B4FD 		BL	SUBB
 1799 0808 FFF718FD 		BL	RFROM
 1800 080c FFF798FE 		BL	ULESS
 1801 0810 52F804FB 		_UNNEST
 1802              	
 1803              	//  Divide
 1804              	
 1805              	//    UM/MOD	( udl udh u -- ur uq )
 1806              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1807              	
 1808 0814 EA070018 		.word	_WITHI+MAPOFFSET
 1809 0818 06       	_UMMOD:	.byte   6
 1810 0819 554D2F4D 		.ascii "UM/MOD"
 1810      4F44
 1811 081f 00       		.p2align 2 	
 1812              	UMMOD:
 1813 0820 4FF00107 		MOV	R7,#1
 1814 0824 51F8044B 		LDR	R4,[R1],#4
 1815 0828 0E68     		LDR	R6,[R1]
 1816              	UMMOD0:
 1817 082a B619     		ADDS	R6,R6,R6
 1818 082c 6441     		ADCS	R4,R4,R4
 1819 082e 04D3     		BCC	UMMOD1
 1820 0830 A4EB0504 		SUB	R4,R4,R5
 1821 0834 06F10106 		ADD	R6,R6,#1
 1822 0838 04E0     		B UMMOD2
 1823              	UMMOD1:
 1824 083a 641B     		SUBS	R4,R4,R5 
 1825 083c 28BF     		IT CS 
 1826 083e 0136     		ADDCS	R6,R6,#1
 1827 0840 00D2     		BCS	UMMOD2
 1828 0842 2C44     		ADD	R4,R4,R5
 1829              	UMMOD2:
 1830 0844 FF19     		ADDS	R7,R7,R7
 1831 0846 F0D3     		BCC	UMMOD0
 1832 0848 3546     		MOV	R5,R6
 1833 084a 0C60     		STR	R4,[R1]
 1834 084c 7047     		_NEXT
 1835              	
 1836              	//    M/MOD	( d n -- r q )
 1837              	// 	Signed floored divide of double by single. Return mod and quotient.
 1838              	
 1839 084e 18080018 		.word	_UMMOD+MAPOFFSET
 1840 0852 05       	_MSMOD:	.byte  5
 1841 0853 4D2F4D4F 		.ascii "M/MOD"
 1841      44
 1842              		.p2align 2 	
 1843              	MSMOD:	
 1844 0858 42F804ED 		_NEST
 1845 085c FFF71CFD 		BL	DUPP
 1846 0860 FFF734FD 		BL	ZLESS
 1847 0864 FFF718FD 		BL	DUPP
 1848 0868 FFF7FAFC 		BL	TOR
 1849 086c FFF7AAFC 		BL	QBRAN
 1850 0870 84080018 		.word	MMOD1+MAPOFFSET
 1851 0874 FFF73CFE 		BL	NEGAT
ARM GAS  stm32eforth.s 			page 37


 1852 0878 FFF7F2FC 		BL	TOR
 1853 087c FFF7C8FE 		BL	DNEGA
 1854 0880 FFF7DCFC 		BL	RFROM
 1855              	MMOD1:
 1856 0884 FFF7ECFC 	  BL	TOR
 1857 0888 FFF706FD 		BL	DUPP
 1858 088c FFF71EFD 		BL	ZLESS
 1859 0890 FFF798FC 		BL	QBRAN
 1860 0894 A0080018 		.word	MMOD2+MAPOFFSET
 1861 0898 FFF7DAFC 		BL	RAT
 1862 089c FFF760FD 		BL	PLUS
 1863              	MMOD2:
 1864 08a0 FFF7CCFC 	  BL	RFROM
 1865 08a4 FFF7BCFF 		BL	UMMOD
 1866 08a8 FFF7C8FC 		BL	RFROM
 1867 08ac FFF78AFC 		BL	QBRAN
 1868 08b0 C0080018 		.word	MMOD3+MAPOFFSET
 1869 08b4 FFF7F8FC 		BL	SWAP
 1870 08b8 FFF71AFE 		BL	NEGAT
 1871 08bc FFF7F4FC 		BL	SWAP
 1872              	MMOD3:   
 1873 08c0 52F804FB 		_UNNEST
 1874              	
 1875              	//    /MOD	( n n -- r q )
 1876              	// 	Signed divide. Return mod and quotient.
 1877              	
 1878 08c4 52080018 		.word	_MSMOD+MAPOFFSET
 1879 08c8 04       	_SLMOD:	.byte   4
 1880 08c9 2F4D4F44 		.ascii "/MOD"
 1881 08cd 0000BF   		.p2align 2 	
 1882              	SLMOD:
 1883 08d0 42F804ED 		_NEST
 1884 08d4 FFF7F2FC 		BL	OVER
 1885 08d8 FFF7F8FC 		BL	ZLESS
 1886 08dc FFF7E4FC 		BL	SWAP
 1887 08e0 FFF7BAFF 		BL	MSMOD
 1888 08e4 52F804FB 		_UNNEST
 1889              	
 1890              	//    MOD	 ( n n -- r )
 1891              	// 	Signed divide. Return mod only.
 1892              	
 1893 08e8 C8080018 		.word	_SLMOD+MAPOFFSET
 1894 08ec 03       	_MODD:	.byte  3
 1895 08ed 4D4F44   		.ascii "MOD"
 1896              		.p2align 2 	
 1897              	MODD:
 1898 08f0 42F804ED 		_NEST
 1899 08f4 FFF7ECFF 		BL	SLMOD
 1900 08f8 FFF7C6FC 		BL	DROP
 1901 08fc 52F804FB 		_UNNEST
 1902              	
 1903              	//    /	   ( n n -- q )
 1904              	// 	Signed divide. Return quotient only.
 1905              	
 1906 0900 EC080018 		.word	_MODD+MAPOFFSET
 1907 0904 01       	_SLASH:	.byte  1
 1908 0905 2F       		.ascii "/"
ARM GAS  stm32eforth.s 			page 38


 1909 0906 00BF     		.p2align 2 	
 1910              	SLASH:
 1911 0908 42F804ED 		_NEST
 1912 090c FFF7E0FF 		BL	SLMOD
 1913 0910 FFF7CAFC 		BL	SWAP
 1914 0914 FFF7B8FC 		BL	DROP
 1915 0918 52F804FB 		_UNNEST
 1916              	
 1917              	//    */MOD	( n1 n2 n3 -- r q )
 1918              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1919              	
 1920 091c 04090018 		.word	_SLASH+MAPOFFSET
 1921 0920 05       	_SSMOD:	.byte  5
 1922 0921 2A2F4D4F 		.ascii "*/MOD"
 1922      44
 1923 0926 00BF     		.p2align 2 	
 1924              	SSMOD:
 1925 0928 42F804ED 		_NEST
 1926 092c FFF798FC 		BL	TOR
 1927 0930 FFF73AFD 		BL	MSTAR
 1928 0934 FFF782FC 		BL	RFROM
 1929 0938 FFF78EFF 		BL	MSMOD
 1930 093c 52F804FB 		_UNNEST
 1931              	
 1932              	//    */	  ( n1 n2 n3 -- q )
 1933              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1934              	
 1935 0940 20090018 		.word	_SSMOD+MAPOFFSET
 1936 0944 02       	_STASL:	.byte  2
 1937 0945 2A2F     		.ascii "*/"
 1938 0947 00       		.p2align 2 	
 1939              	STASL:
 1940 0948 42F804ED 		_NEST
 1941 094c FFF7ECFF 		BL	SSMOD
 1942 0950 FFF7AAFC 		BL	SWAP
 1943 0954 FFF798FC 		BL	DROP
 1944 0958 52F804FB 		_UNNEST
 1945              	
 1946              	// **************************************************************************
 1947              	//  Miscellaneous
 1948              	
 1949              	//    ALIGNED	( b -- a )
 1950              	// 	Align address to the cell boundary.
 1951              	
 1952 095c 44090018 		.word	_STASL+MAPOFFSET
 1953 0960 07       	_ALGND:	.byte   7
 1954 0961 414C4947 		.ascii "ALIGNED"
 1954      4E4544
 1955              		.p2align 2 	
 1956              	ALGND:
 1957 0968 05F10305 		ADD	R5,R5,#3
 1958 096c 6FF00304 		MVN	R4,#3
 1959 0970 05EA0405 		AND	R5,R5,R4
 1960 0974 7047     		_NEXT
 1961              	
 1962              	//    >CHAR	( c -- c )
 1963              	// 	Filter non-printing characters.
ARM GAS  stm32eforth.s 			page 39


 1964              	
 1965 0976 60090018 		.word	_ALGND+MAPOFFSET
 1966 097a 05       	_TCHAR:	.byte  5
 1967 097b 3E434841 		.ascii ">CHAR"
 1967      52
 1968              		.p2align 2 	
 1969              	TCHAR:
 1970 0980 42F804ED 		_NEST
 1971 0984 FFF7FBFB 		_DOLIT
 1972 0988 7F000000 		.word	0x7F
 1973 098c FFF7A8FC 		BL	ANDD
 1974 0990 FFF782FC 		BL	DUPP	// mask msb
 1975 0994 FFF742FD 		BL	BLANK
 1976 0998 FFF7F1FB 		_DOLIT
 1977 099c 7F000000 		.word	127
 1978 09a0 FFF728FF 		BL	WITHI	// check for printable
 1979 09a4 FFF79AFD 		BL	INVER
 1980 09a8 FFF70CFC 		BL	QBRAN
 1981 09ac BC090018 		.word	TCHA1+MAPOFFSET
 1982 09b0 FFF76AFC 		BL	DROP
 1983 09b4 FFF7E3FB 		_DOLIT
 1984 09b8 5F000000 		.word	'_'	// replace non-printables
 1985              	TCHA1:
 1986 09bc 52F804FB 		  _UNNEST
 1987              	
 1988              	//    DEPTH	( -- n )
 1989              	// 	Return the depth of the data stack.
 1990              	
 1991 09c0 7A090018 		.word	_TCHAR+MAPOFFSET
 1992 09c4 05       	_DEPTH:	.byte  5
 1993 09c5 44455054 		.ascii "DEPTH"
 1993      48
 1994 09ca 00BF     		.p2align 2 	
 1995              	DEPTH:
 1996 09cc 03F59D46 		ADD	R6,R3,#SPP&0xffff 
 1997 09d0 A6EB0106 		SUB	R6,R6,R1
 1998 09d4 41F8045D 		_PUSH
 1999 09d8 4FEAA605 		ASR	R5,R6,#2
 2000 09dc 7047     		_NEXT
 2001              	
 2002              	//    PICK	( ... +n -- ... w )
 2003              	// 	Copy the nth stack item to tos.
 2004              	
 2005 09de C4090018 		.word	_DEPTH+MAPOFFSET
 2006 09e2 04       	_PICK:	.byte  4
 2007 09e3 5049434B 		.ascii "PICK"
 2008 09e7 00       		.p2align 2 	
 2009              	PICK:
 2010 09e8 42F804ED 		_NEST
 2011 09ec FFF7E6FC 		BL	ONEP
 2012 09f0 FFF71EFD 		BL	CELLS
 2013 09f4 FFF73EFC 		BL	SPAT
 2014 09f8 FFF7B2FC 		BL	PLUS
 2015 09fc FFF708FC 		BL	AT
 2016 0a00 52F804FB 		_UNNEST
 2017              	
 2018              	// **************************************************************************
ARM GAS  stm32eforth.s 			page 40


 2019              	//  Memory access
 2020              	
 2021              	//    HERE	( -- a )
 2022              	// 	Return the top of the code dictionary.
 2023              	
 2024 0a04 E2090018 		.word	_PICK+MAPOFFSET
 2025 0a08 04       	_HERE:	.byte  4
 2026 0a09 48455245 		.ascii "HERE"
 2027 0a0d 0000BF   		.p2align 2 	
 2028              	HERE:
 2029 0a10 42F804ED 		_NEST
 2030 0a14 FFF796FE 		BL	CPP
 2031 0a18 FFF7FAFB 		BL	AT
 2032 0a1c 52F804FB 		_UNNEST
 2033              		
 2034              	//    PAD	 ( -- a )
 2035              	// 	Return the address of a temporary buffer.
 2036              	
 2037 0a20 080A0018 		.word	_HERE+MAPOFFSET
 2038 0a24 03       	_PAD:	.byte  3
 2039 0a25 504144   		.ascii "PAD"
 2040              		.p2align 2 	
 2041              	PAD:
 2042 0a28 42F804ED 		_NEST
 2043 0a2c FFF7F0FF 		BL	HERE
 2044 0a30 05F15005 		ADD	R5,R5,#80
 2045 0a34 52F804FB 		_UNNEST
 2046              	
 2047              	//    TIB	 ( -- a )
 2048              	// 	Return the address of the terminal input buffer.
 2049              	
 2050 0a38 240A0018 		.word	_PAD+MAPOFFSET
 2051 0a3c 03       	_TIB:	.byte  3
 2052 0a3d 544942   		.ascii "TIB"
 2053              		.p2align 2 	
 2054              	TIB:
 2055 0a40 41F8045D 		_PUSH
 2056 0a44 1D6B     		ldr r5,[r3,#TIB_OFS]
 2057 0a46 7047     		_NEXT
 2058              	
 2059              	//    @EXECUTE	( a -- )
 2060              	// 	Execute vector stored in address a.
 2061              	
 2062 0a48 3C0A0018 		.word	_TIB+MAPOFFSET
 2063 0a4c 08       	_ATEXE:	.byte   8
 2064 0a4d 40455845 		.ascii "@EXECUTE"
 2064      43555445 
 2065 0a55 0000BF   		.p2align 2 	
 2066              	ATEXE:
 2067 0a58 2C00     		MOVS	R4,R5
 2068 0a5a 51F8045B 		_POP
 2069 0a5e 2468     		LDR	R4,[R4]
 2070 0a60 44F00104 		ORR	R4,R4,#1
 2071 0a64 18BF     	    IT NE 
 2072 0a66 2047     		BXNE	R4
 2073 0a68 7047     		_NEXT
 2074              	
ARM GAS  stm32eforth.s 			page 41


 2075              	//    CMOVE	( b1 b2 u -- )
 2076              	// 	Copy u bytes from b1 to b2.
 2077              	
 2078 0a6a 4C0A0018 		.word	_ATEXE+MAPOFFSET
 2079 0a6e 05       	_CMOVE:	.byte   5
 2080 0a6f 434D4F56 		.ascii "CMOVE"
 2080      45
 2081              		.p2align 2 	
 2082              	CMOVE:
 2083 0a74 51F8046B 		LDR	R6,[R1],#4
 2084 0a78 51F8047B 		LDR	R7,[R1],#4
 2085 0a7c 03E0     		B CMOV1
 2086              	CMOV0:
 2087 0a7e 17F8014B 		LDRB	R4,[R7],#1
 2088 0a82 06F8014B 		STRB	R4,[R6],#1
 2089              	CMOV1:
 2090 0a86 2D00     		MOVS	R5,R5
 2091 0a88 02D0     		BEQ	CMOV2
 2092 0a8a A5F10105 		SUB	R5,R5,#1
 2093 0a8e F6E7     		B CMOV0
 2094              	CMOV2:
 2095 0a90 51F8045B 		_POP
 2096 0a94 7047     		_NEXT
 2097              	
 2098              	//    MOVE	( a1 a2 u -- )
 2099              	// 	Copy u words from a1 to a2.
 2100              	
 2101 0a96 6E0A0018 		.word	_CMOVE+MAPOFFSET
 2102 0a9a 04       	_MOVE:	.byte   4
 2103 0a9b 4D4F5645 		.ascii "MOVE"
 2104 0a9f 00       		.p2align 2 	
 2105              	MOVE:
 2106 0aa0 25F00305 		AND	R5,R5,#-4
 2107 0aa4 51F8046B 		LDR	R6,[R1],#4
 2108 0aa8 51F8047B 		LDR	R7,[R1],#4
 2109 0aac 03E0     		B MOVE1
 2110              	MOVE0:
 2111 0aae 57F8044B 		LDR	R4,[R7],#4
 2112 0ab2 46F8044B 		STR	R4,[R6],#4
 2113              	MOVE1:
 2114 0ab6 2D00     		MOVS	R5,R5
 2115 0ab8 02D0     		BEQ	MOVE2
 2116 0aba A5F10405 		SUB	R5,R5,#4
 2117 0abe F6E7     		B MOVE0
 2118              	MOVE2:
 2119 0ac0 51F8045B 		_POP
 2120 0ac4 7047     		_NEXT
 2121              	
 2122              	//    FILL	( b u c -- )
 2123              	// 	Fill u bytes of character c to area beginning at b.
 2124              	
 2125 0ac6 9A0A0018 		.word	_MOVE+MAPOFFSET
 2126 0aca 04       	_FILL:	.byte   4
 2127 0acb 46494C4C 		.ascii "FILL"
 2128 0acf 00       		.p2align 2 	
 2129              	FILL:
 2130 0ad0 51F8046B 		LDR	R6,[R1],#4
ARM GAS  stm32eforth.s 			page 42


 2131 0ad4 51F8047B 		LDR	R7,[R1],#4
 2132              	FILL0:
 2133 0ad8 00E0     		B FILL1
 2134 0ada 2D46     		MOV	R5,R5
 2135              	FILL1:
 2136 0adc 07F8015B 		STRB	R5,[R7],#1
 2137 0ae0 3600     		MOVS	R6,R6
 2138 0ae2 02D0     		BEQ	FILL2
 2139 0ae4 A6F10106 		SUB	R6,R6,#1
 2140 0ae8 F6E7     		B FILL0
 2141              	FILL2:
 2142 0aea 51F8045B 		_POP
 2143 0aee 7047     		_NEXT
 2144              	
 2145              	//    PACK$	( b u a -- a )
 2146              	// 	Build a counted word with u characters from b. Null fill.
 2147              	
 2148 0af0 CA0A0018 		.word	_FILL+MAPOFFSET
 2149 0af4 05       	_PACKS:	.byte  5
 2150 0af5 5041434B 		.ascii "PACK$$"
 2150      2424
 2151 0afb 00       		.p2align 2 	
 2152              	PACKS:
 2153 0afc 42F804ED 		_NEST
 2154 0b00 FFF732FF 		BL	ALGND
 2155 0b04 FFF7C8FB 		BL	DUPP
 2156 0b08 FFF7AAFB 		BL	TOR			// strings only on cell boundary
 2157 0b0c FFF7D6FB 		BL	OVER
 2158 0b10 FFF726FC 		BL	PLUS
 2159 0b14 FFF752FC 		BL	ONEP
 2160 0b18 FFF731FB 		_DOLIT
 2161 0b1c FCFFFFFF 		.word	0xFFFFFFFC
 2162 0b20 FFF7DEFB 		BL	ANDD			// count mod cell
 2163 0b24 FFF72BFB 		_DOLIT
 2164 0b28 00000000 		.word	0
 2165 0b2c FFF7BCFB 		BL	SWAP
 2166 0b30 FFF764FB 		BL	STORE			// null fill cell
 2167 0b34 FFF78CFB 		BL	RAT
 2168 0b38 FFF7B8FC 		BL	DDUP
 2169 0b3c FFF76EFB 		BL	CSTOR
 2170 0b40 FFF73CFC 		BL	ONEP			// save count
 2171 0b44 FFF7B0FB 		BL	SWAP
 2172 0b48 FFF794FF 		BL	CMOVE
 2173 0b4c FFF776FB 		BL	RFROM
 2174 0b50 52F804FB 		_UNNEST   			// move string
 2175              	
 2176              	// **************************************************************************
 2177              	//  Numeric output, single precision
 2178              	
 2179              	//    DIGIT	( u -- c )
 2180              	// 	Convert digit u to a character.
 2181              	
 2182 0b54 F40A0018 		.word	_PACKS+MAPOFFSET
 2183 0b58 05       	_DIGIT:	.byte  5
 2184 0b59 44494749 		.ascii "DIGIT"
 2184      54
 2185 0b5e 00BF     		.p2align 2 	
ARM GAS  stm32eforth.s 			page 43


 2186              	DIGIT:
 2187 0b60 42F804ED 		_NEST
 2188 0b64 FFF70BFB 		_DOLIT
 2189 0b68 09000000 		.word	9
 2190 0b6c FFF7A6FB 		BL	OVER
 2191 0b70 FFF7F2FC 		BL	LESS
 2192 0b74 05F00705 		AND	R5,R5,#7
 2193 0b78 FFF7F2FB 		BL	PLUS
 2194 0b7c 05F13005 		ADD	R5,R5,#'0'
 2195 0b80 52F804FB 		_UNNEST
 2196              	
 2197              	//    EXTRACT	( n base -- n c )
 2198              	// 	Extract the least significant digit from n.
 2199              	
 2200 0b84 580B0018 		.word	_DIGIT+MAPOFFSET
 2201 0b88 07       	_EXTRC:	.byte  7
 2202 0b89 45585452 		.ascii "EXTRACT"
 2202      414354
 2203              		.p2align 2 	
 2204              	EXTRC:
 2205 0b90 42F804ED 		_NEST
 2206 0b94 FFF7F3FA 		_DOLIT
 2207 0b98 00000000 		.word	0
 2208 0b9c FFF784FB 		BL	SWAP
 2209 0ba0 FFF73EFE 		BL	UMMOD
 2210 0ba4 FFF780FB 		BL	SWAP
 2211 0ba8 FFF7DAFF 		BL	DIGIT
 2212 0bac 52F804FB 		_UNNEST
 2213              	
 2214              	//    <#	  ( -- )
 2215              	// 	Initiate the numeric output process.
 2216              	
 2217 0bb0 880B0018 		.word	_EXTRC+MAPOFFSET
 2218 0bb4 02       	_BDIGS:	.byte  2
 2219 0bb5 3C23     		.ascii "<#"
 2220 0bb7 00       		.p2align 2 	
 2221              	BDIGS:
 2222 0bb8 42F804ED 		_NEST
 2223 0bbc FFF734FF 		BL	PAD
 2224 0bc0 FFF7AAFD 		BL	HLD
 2225 0bc4 FFF71AFB 		BL	STORE
 2226 0bc8 52F804FB 		_UNNEST
 2227              	
 2228              	//    HOLD	( c -- )
 2229              	// 	Insert a character into the numeric output string.
 2230              	
 2231 0bcc B40B0018 		.word	_BDIGS+MAPOFFSET
 2232 0bd0 04       	_HOLD:	.byte  4
 2233 0bd1 484F4C44 		.ascii "HOLD"
 2234 0bd5 0000BF   		.p2align 2 	
 2235              	HOLD:
 2236 0bd8 42F804ED 		_NEST
 2237 0bdc FFF79CFD 		BL	HLD
 2238 0be0 FFF716FB 		BL	AT
 2239 0be4 FFF7F2FB 		BL	ONEM
 2240 0be8 FFF756FB 		BL	DUPP
 2241 0bec FFF794FD 		BL	HLD
ARM GAS  stm32eforth.s 			page 44


 2242 0bf0 FFF704FB 		BL	STORE
 2243 0bf4 FFF712FB 		BL	CSTOR
 2244 0bf8 52F804FB 		_UNNEST
 2245              	
 2246              	//    #	   ( u -- u )
 2247              	// 	Extract one digit from u and append the digit to output string.
 2248              	
 2249 0bfc D00B0018 		.word	_HOLD+MAPOFFSET
 2250 0c00 01       	_DIG:	.byte  1
 2251 0c01 23       		.ascii "#"
 2252 0c02 00BF     		.p2align 2 	
 2253              	DIG:
 2254 0c04 42F804ED 		_NEST
 2255 0c08 FFF74EFD 		BL	BASE
 2256 0c0c FFF700FB 		BL	AT
 2257 0c10 FFF7BEFF 		BL	EXTRC
 2258 0c14 FFF7E0FF 		BL	HOLD
 2259 0c18 52F804FB 		_UNNEST
 2260              	
 2261              	//    #S	  ( u -- 0 )
 2262              	// 	Convert u until all digits are added to the output string.
 2263              	
 2264 0c1c 000C0018 		.word	_DIG+MAPOFFSET
 2265 0c20 02       	_DIGS:	.byte  2
 2266 0c21 2353     		.ascii "#S"
 2267 0c23 00       		.p2align 2 	
 2268              	DIGS:
 2269 0c24 42F804ED 		_NEST
 2270              	DIGS1:
 2271 0c28 FFF7ECFF 	    BL	DIG
 2272 0c2c FFF734FB 		BL	DUPP
 2273 0c30 FFF7C8FA 		BL	QBRAN
 2274 0c34 3A0C0018 		.word	DIGS2+MAPOFFSET
 2275 0c38 F6E7     		B	DIGS1
 2276              	DIGS2:
 2277 0c3a 52F804FB 		  _UNNEST
 2278              	
 2279              	//    SIGN	( n -- )
 2280              	// 	Add a minus sign to the numeric output string.
 2281              	
 2282 0c3e 200C0018 		.word	_DIGS+MAPOFFSET
 2283 0c42 04       	_SIGN:	.byte  4
 2284 0c43 5349474E 		.ascii "SIGN"
 2285 0c47 00       		.p2align 2 	
 2286              	SIGN:
 2287 0c48 42F804ED 		_NEST
 2288 0c4c FFF73EFB 		BL	ZLESS
 2289 0c50 FFF7B8FA 		BL	QBRAN
 2290 0c54 640C0018 		.word	SIGN1+MAPOFFSET
 2291 0c58 FFF791FA 		_DOLIT
 2292 0c5c 2D000000 		.word	'-'
 2293 0c60 FFF7BAFF 		BL	HOLD
 2294              	SIGN1:
 2295 0c64 52F804FB 		  _UNNEST
 2296              	
 2297              	//    #>	  ( w -- b u )
 2298              	// 	Prepare the outputDCB to be TYPE'd.
ARM GAS  stm32eforth.s 			page 45


 2299              	
 2300 0c68 420C0018 		.word	_SIGN+MAPOFFSET
 2301 0c6c 02       	_EDIGS:	.byte  2
 2302 0c6d 233E     		.ascii "#>"
 2303 0c6f 00       		.p2align 2 	
 2304              	EDIGS:
 2305 0c70 42F804ED 		_NEST
 2306 0c74 FFF708FB 		BL	DROP
 2307 0c78 FFF74EFD 		BL	HLD
 2308 0c7c FFF7C8FA 		BL	AT
 2309 0c80 FFF7D2FE 		BL	PAD
 2310 0c84 FFF71AFB 		BL	OVER
 2311 0c88 FFF772FB 		BL	SUBB
 2312 0c8c 52F804FB 		_UNNEST
 2313              	
 2314              	//    str	 ( n -- b u )
 2315              	// 	Convert a signed integer to a numeric string.
 2316              	
 2317              	// 	.word	_EDIGS+MAPOFFSET
 2318              	// _STRR	.byte  3
 2319              	// 	.ascii "str"
 2320              	// 	.p2align 2 	
 2321              	STRR:
 2322 0c90 42F804ED 		_NEST
 2323 0c94 FFF700FB 		BL	DUPP
 2324 0c98 FFF7E2FA 		BL	TOR
 2325 0c9c FFF730FC 		BL	ABSS
 2326 0ca0 FFF78AFF 		BL	BDIGS
 2327 0ca4 FFF7BEFF 		BL	DIGS
 2328 0ca8 FFF7C8FA 		BL	RFROM
 2329 0cac FFF7CCFF 		BL	SIGN
 2330 0cb0 FFF7DEFF 		BL	EDIGS
 2331 0cb4 52F804FB 		_UNNEST
 2332              	
 2333              	//    HEX	 ( -- )
 2334              	// 	Use radix 16 as base for numeric conversions.
 2335              	
 2336 0cb8 6C0C0018 		.word	_EDIGS+MAPOFFSET
 2337 0cbc 03       	_HEX:	.byte  3
 2338 0cbd 484558   		.ascii "HEX"
 2339              		.p2align 2 	
 2340              	HEX:
 2341 0cc0 42F804ED 		_NEST
 2342 0cc4 FFF75BFA 		_DOLIT
 2343 0cc8 10000000 		.word	16
 2344 0ccc FFF7ECFC 		BL	BASE
 2345 0cd0 FFF794FA 		BL	STORE
 2346 0cd4 52F804FB 		_UNNEST
 2347              	
 2348              	//    DECIMAL	( -- )
 2349              	// 	Use radix 10 as base for numeric conversions.
 2350              	
 2351 0cd8 BC0C0018 		.word	_HEX+MAPOFFSET
 2352 0cdc 07       	_DECIM:	.byte  7
 2353 0cdd 44454349 		.ascii "DECIMAL"
 2353      4D414C
 2354              		.p2align 2 	
ARM GAS  stm32eforth.s 			page 46


 2355              	DECIM:
 2356 0ce4 42F804ED 		_NEST
 2357 0ce8 FFF749FA 		_DOLIT
 2358 0cec 0A000000 		.word	10
 2359 0cf0 FFF7DAFC 		BL	BASE
 2360 0cf4 FFF782FA 		BL	STORE
 2361 0cf8 52F804FB 		_UNNEST
 2362              	
 2363              	// **************************************************************************
 2364              	//  Numeric input, single precision
 2365              	
 2366              	//    DIGIT?	( c base -- u t )
 2367              	// 	Convert a character to its numeric value. A flag indicates success.
 2368              	
 2369 0cfc DC0C0018 		.word	_DECIM+MAPOFFSET
 2370 0d00 06       	_DIGTQ:	.byte  6
 2371 0d01 44494749 		.ascii "DIGIT?"
 2371      543F
 2372 0d07 00       		.p2align 2 	
 2373              	DIGTQ:
 2374 0d08 42F804ED 		_NEST
 2375 0d0c FFF7A8FA 		BL	TOR
 2376 0d10 FFF735FA 		_DOLIT
 2377 0d14 30000000 		.word	'0'
 2378 0d18 FFF72AFB 		BL	SUBB
 2379 0d1c FFF72FFA 		_DOLIT
 2380 0d20 09000000 		.word	9
 2381 0d24 FFF7CAFA 		BL	OVER
 2382 0d28 FFF716FC 		BL	LESS
 2383 0d2c FFF74AFA 		BL	QBRAN
 2384 0d30 540D0018 		.word	DGTQ1+MAPOFFSET
 2385 0d34 FFF723FA 		_DOLIT
 2386 0d38 07000000 		.word	7
 2387 0d3c FFF718FB 		BL	SUBB
 2388 0d40 FFF7AAFA 		BL	DUPP
 2389 0d44 FFF71BFA 		_DOLIT
 2390 0d48 0A000000 		.word	10
 2391 0d4c FFF704FC 		BL	LESS
 2392 0d50 FFF7D0FA 		BL	ORR
 2393              	DGTQ1:
 2394 0d54 FFF7A0FA 	  BL	DUPP
 2395 0d58 FFF770FA 		BL	RFROM
 2396 0d5c FFF7F0FB 		BL	ULESS
 2397 0d60 52F804FB 		_UNNEST
 2398              	
 2399              	//    NUMBER?	( a -- n T | a F )
 2400              	// 	Convert a number word to integer. Push a flag on tos.
 2401              	
 2402 0d64 000D0018 		.word	_DIGTQ+MAPOFFSET
 2403 0d68 07       	_NUMBQ:	.byte  7
 2404 0d69 4E554D42 		.ascii "NUMBER?"
 2404      45523F
 2405              		.p2align 2 	
 2406              	NUMBQ:
 2407 0d70 42F804ED 		_NEST
 2408 0d74 FFF798FC 		BL	BASE
 2409 0d78 FFF74AFA 		BL	AT
ARM GAS  stm32eforth.s 			page 47


 2410 0d7c FFF770FA 		BL	TOR
 2411 0d80 FFF7FDF9 		_DOLIT
 2412 0d84 00000000 		.word	0
 2413 0d88 FFF798FA 		BL	OVER
 2414 0d8c FFF734FC 		BL	COUNT
 2415 0d90 FFF794FA 		BL	OVER
 2416 0d94 FFF74CFA 		BL	CAT
 2417 0d98 FFF7F1F9 		_DOLIT
 2418 0d9c 24000000 		.word	'$'
 2419 0da0 FFF7C2FB 		BL	EQUAL
 2420 0da4 FFF70EFA 		BL	QBRAN
 2421 0da8 C00D0018 		.word	NUMQ1+MAPOFFSET
 2422 0dac FFF788FF 		BL	HEX
 2423 0db0 FFF77AFA 		BL	SWAP
 2424 0db4 FFF702FB 		BL	ONEP
 2425 0db8 FFF776FA 		BL	SWAP
 2426 0dbc FFF706FB 		BL	ONEM
 2427              	NUMQ1:
 2428 0dc0 FFF77CFA 		BL	OVER
 2429 0dc4 FFF734FA 		BL	CAT
 2430 0dc8 FFF7D9F9 		_DOLIT
 2431 0dcc 2D000000 		.word	'-'
 2432 0dd0 FFF7AAFB 		BL	EQUAL
 2433 0dd4 FFF744FA 		BL	TOR
 2434 0dd8 FFF766FA 		BL	SWAP
 2435 0ddc FFF738FA 		BL	RAT
 2436 0de0 FFF7C6FA 		BL	SUBB
 2437 0de4 FFF760FA 		BL	SWAP
 2438 0de8 FFF732FA 		BL	RAT
 2439 0dec FFF7B8FA 		BL	PLUS
 2440 0df0 FFF73EFB 		BL	QDUP
 2441 0df4 FFF7E6F9 		BL	QBRAN
 2442 0df8 840E0018 		.word	NUMQ6+MAPOFFSET
 2443 0dfc FFF7E6FA 		BL	ONEM
 2444 0e00 FFF72EFA 		BL	TOR
 2445              	NUMQ2:
 2446 0e04 FFF748FA 		BL	DUPP
 2447 0e08 FFF72AFA 		BL	TOR
 2448 0e0c FFF710FA 		BL	CAT
 2449 0e10 FFF74AFC 		BL	BASE
 2450 0e14 FFF7FCF9 		BL	AT
 2451 0e18 FFF776FF 		BL	DIGTQ
 2452 0e1c FFF7D2F9 		BL	QBRAN
 2453 0e20 680E0018 		.word	NUMQ4+MAPOFFSET
 2454 0e24 FFF740FA 		BL	SWAP
 2455 0e28 FFF73EFC 		BL	BASE
 2456 0e2c FFF7F0F9 		BL	AT
 2457 0e30 FFF7A6FA 		BL	STAR
 2458 0e34 FFF794FA 		BL	PLUS
 2459 0e38 FFF700FA 		BL	RFROM
 2460 0e3c FFF7BEFA 		BL	ONEP
 2461 0e40 FFF7B1F9 		BL	DONXT
 2462 0e44 040E0018 		.word	NUMQ2+MAPOFFSET
 2463 0e48 FFF702FA 		BL	RAT
 2464 0e4c FFF72CFA 		BL	SWAP
 2465 0e50 FFF71AFA 		BL	DROP
 2466 0e54 FFF7B6F9 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 48


 2467 0e58 600E0018 		.word	NUMQ3+MAPOFFSET
 2468 0e5c FFF748FB 		BL	NEGAT
 2469              	NUMQ3:
 2470 0e60 FFF722FA 		BL	SWAP
 2471 0e64 00F00CB8 		B.W	NUMQ5
 2472              	NUMQ4:
 2473 0e68 FFF7E8F9 		BL	RFROM
 2474 0e6c FFF7E6F9 		BL	RFROM
 2475 0e70 FFF712FB 		BL	DDROP
 2476 0e74 FFF710FB 		BL	DDROP
 2477 0e78 FFF781F9 		_DOLIT
 2478 0e7c 00000000 		.word	0
 2479              	NUMQ5:
 2480 0e80 FFF70AFA 		BL	DUPP
 2481              	NUMQ6:
 2482 0e84 FFF7DAF9 		BL	RFROM
 2483 0e88 FFF706FB 		BL	DDROP
 2484 0e8c FFF7D6F9 		BL	RFROM
 2485 0e90 FFF70AFC 		BL	BASE
 2486 0e94 FFF7B2F9 		BL	STORE
 2487 0e98 52F804FB 		_UNNEST
 2488              	
 2489              	// **************************************************************************
 2490              	//  Basic I/O
 2491              	
 2492              	//    KEY	 ( -- c )
 2493              	// 	Wait for and return an input character.
 2494              	
 2495 0e9c 680D0018 		.word	_NUMBQ+MAPOFFSET
 2496 0ea0 03       	_KEY:	.byte  3
 2497 0ea1 4B4559   		.ascii "KEY"
 2498              		.p2align 2 	
 2499              	KEY:
 2500 0ea4 42F804ED 		_NEST
 2501              	KEY1:
 2502 0ea8 FFF73CF9 		BL	QRX
 2503 0eac FFF78AF9 		BL	QBRAN
 2504 0eb0 A80E0018 		.word	KEY1+MAPOFFSET
 2505 0eb4 52F804FB 		_UNNEST
 2506              	
 2507              	//    SPACE	( -- )
 2508              	// 	Send the blank character to the output device.
 2509              	
 2510 0eb8 A00E0018 		.word	_KEY+MAPOFFSET
 2511 0ebc 05       	_SPACE:	.byte  5
 2512 0ebd 53504143 		.ascii "SPACE"
 2512      45
 2513 0ec2 00BF     		.p2align 2 	
 2514              	SPACE:
 2515 0ec4 42F804ED 		_NEST
 2516 0ec8 FFF7A8FA 		BL	BLANK
 2517 0ecc FFF746F9 		BL	EMIT
 2518 0ed0 52F804FB 		_UNNEST
 2519              	
 2520              	//    SPACES	( +n -- )
 2521              	// 	Send n spaces to the output device.
 2522              	
ARM GAS  stm32eforth.s 			page 49


 2523 0ed4 BC0E0018 		.word	_SPACE+MAPOFFSET
 2524 0ed8 06       	_SPACS:	.byte  6
 2525 0ed9 53504143 		.ascii "SPACES"
 2525      4553
 2526 0edf 00       		.p2align 2 	
 2527              	SPACS:
 2528 0ee0 42F804ED 		_NEST
 2529 0ee4 FFF74BF9 		_DOLIT
 2530 0ee8 00000000 		.word	0
 2531 0eec FFF74CFB 		BL	MAX
 2532 0ef0 FFF7B6F9 		BL	TOR
 2533 0ef4 00F002B8 		B.W	CHAR2
 2534              	CHAR1:
 2535 0ef8 FFF7E4FF 		BL	SPACE
 2536              	CHAR2:
 2537 0efc FFF753F9 		BL	DONXT
 2538 0f00 F80E0018 		.word	CHAR1+MAPOFFSET
 2539 0f04 52F804FB 		_UNNEST
 2540              	
 2541              	//    TYPE	( b u -- )
 2542              	// 	Output u characters from b.
 2543              	
 2544 0f08 D80E0018 		.word	_SPACS+MAPOFFSET
 2545 0f0c 04       	_TYPEE:	.byte	4
 2546 0f0d 54595045 		.ascii "TYPE"
 2547 0f11 0000BF   		.p2align 2 	
 2548              	TYPEE:
 2549 0f14 42F804ED 		_NEST
 2550 0f18 FFF7A2F9 		BL  TOR   // ( a+1 -- R: u )
 2551 0f1c 00F006B8 		B.W	TYPE2
 2552              	TYPE1:  
 2553 0f20 FFF76AFB 		BL  COUNT
 2554 0f24 FFF72CFD 		BL	TCHAR
 2555 0f28 FFF718F9 		BL	EMIT
 2556              	TYPE2:  
 2557 0f2c FFF73BF9 		BL  DONXT  
 2558 0f30 200F0018 		.word	TYPE1+MAPOFFSET
 2559 0f34 FFF7A8F9 		BL	DROP
 2560 0f38 52F804FB 		_UNNEST
 2561              	
 2562              	//    CR	  ( -- )
 2563              	// 	Output a carriage return and a line feed.
 2564              	
 2565 0f3c 0C0F0018 		.word	_TYPEE+MAPOFFSET
 2566 0f40 02       	_CR:	.byte  2
 2567 0f41 4352     		.ascii "CR"
 2568 0f43 00       		.p2align 2 	
 2569              	CR:
 2570 0f44 42F804ED 		_NEST
 2571 0f48 FFF719F9 		_DOLIT
 2572 0f4c 0D000000 		.word	CRR
 2573 0f50 FFF704F9 		BL	EMIT
 2574 0f54 FFF713F9 		_DOLIT
 2575 0f58 0A000000 		.word	LF
 2576 0f5c FFF7FEF8 		BL	EMIT
 2577 0f60 52F804FB 		_UNNEST
 2578              	
ARM GAS  stm32eforth.s 			page 50


 2579              	//    do_$	( -- a )
 2580              	// 	Return the address of a compiled string.
 2581              	//  adjust return address to skip over it.
 2582              	
 2583              	// 	.word	_CR+MAPOFFSET
 2584              	// _DOSTR	.byte  COMPO+3
 2585              	// 	.ascii "do$$"
 2586              	// 	.p2align 2 	
 2587              	DOSTR:
 2588 0f64 42F804ED 		_NEST     
 2589              	/* compiled string address is 2 levels deep */
 2590 0f68 FFF768F9 		BL	RFROM	// { -- a1 }
 2591 0f6c FFF766F9 		BL	RFROM	//  {a1 -- a1 a2 } b0 set
 2592 0f70 FFF72CFA 		BL	ONEM	//  clear b0
 2593 0f74 FFF790F9 		BL	DUPP	// {a1 a2 -- a1 a2 a2 }
 2594 0f78 FFF73EFB 		BL	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2595 0f7c FFF7F0F9 		BL	PLUS	// { -- a1 a2 a2+1+c }
 2596 0f80 FFF7F2FC 		BL	ALGND	//  end of string
 2597 0f84 FFF71AFA 		BL	ONEP	//  restore b0, this result in return address 2 level deep.
 2598 0f88 FFF76AF9 		BL	TOR		//  address after string { -- a1 a2 }
 2599 0f8c FFF78CF9 		BL	SWAP	//  count tugged
 2600 0f90 FFF766F9 		BL	TOR     //  ( -- a2) is string address
 2601 0f94 52F804FB 		_UNNEST
 2602              	
 2603              	//    $"|	( -- a )
 2604              	// 	Run time routine compiled by _". Return address of a compiled string.
 2605              	
 2606              	// 	.word	_DOSTR+MAPOFFSET
 2607              	// _STRQP	.byte  COMPO+3
 2608              	// 	.ascii "$\"|"
 2609              	// 	.p2align 2 	
 2610              	STRQP:
 2611 0f98 42F804ED 		_NEST
 2612 0f9c FFF7E2FF 		BL	DOSTR
 2613 0fa0 52F804FB 		_UNNEST			// force a call to dostr
 2614              	
 2615              	//    .$	( a -- )
 2616              	// 	Run time routine of ." . Output a compiled string.
 2617              	
 2618              	// 	.word	_STRQP+MAPOFFSET
 2619              	// _DOTST	.byte  COMPO+2
 2620              	// 	.ascii ".$$"
 2621              	// 	.p2align 2 	
 2622              	DOTST:
 2623 0fa4 42F804ED 		_NEST
 2624 0fa8 FFF726FB 		BL	COUNT // ( -- a+1 c )
 2625 0fac FFF7B2FF 		BL	TYPEE
 2626 0fb0 52F804FB 		_UNNEST
 2627              	
 2628              	//    ."|	( -- )
 2629              	// 	Run time routine of ." . Output a compiled string.
 2630              	
 2631              	// 	.word	_DOTST+MAPOFFSET
 2632              	// _DOTQP	.byte  COMPO+3
 2633              	// 	.ascii ".""|"
 2634              	// 	.p2align 2 	
 2635              	DOTQP:
ARM GAS  stm32eforth.s 			page 51


 2636 0fb4 42F804ED 		_NEST
 2637 0fb8 FFF7D4FF 		BL	DOSTR
 2638 0fbc FFF7F2FF 		BL	DOTST
 2639 0fc0 52F804FB 		_UNNEST
 2640              	
 2641              	//    .R	  ( n +n -- )
 2642              	// 	Display an integer in a field of n columns, right justified.
 2643              	
 2644 0fc4 400F0018 		.word	_CR+MAPOFFSET
 2645 0fc8 02       	_DOTR:	.byte  2
 2646 0fc9 2E52     		.ascii ".R"
 2647 0fcb 00       		.p2align 2 	
 2648              	DOTR:
 2649 0fcc 42F804ED 		_NEST
 2650 0fd0 FFF746F9 		BL	TOR
 2651 0fd4 FFF75CFE 		BL	STRR
 2652 0fd8 FFF730F9 		BL	RFROM
 2653 0fdc FFF76EF9 		BL	OVER
 2654 0fe0 FFF7C6F9 		BL	SUBB
 2655 0fe4 FFF77CFF 		BL	SPACS
 2656 0fe8 FFF794FF 		BL	TYPEE
 2657 0fec 52F804FB 		_UNNEST
 2658              	
 2659              	//    U.R	 ( u +n -- )
 2660              	// 	Display an unsigned integer in n column, right justified.
 2661              	
 2662 0ff0 C80F0018 		.word	_DOTR+MAPOFFSET
 2663 0ff4 03       	_UDOTR:	.byte  3
 2664 0ff5 552E52   		.ascii "U.R"
 2665              		.p2align 2 	
 2666              	UDOTR:
 2667 0ff8 42F804ED 		_NEST
 2668 0ffc FFF730F9 		BL	TOR
 2669 1000 FFF7DAFD 		BL	BDIGS
 2670 1004 FFF70EFE 		BL	DIGS
 2671 1008 FFF732FE 		BL	EDIGS
 2672 100c FFF716F9 		BL	RFROM
 2673 1010 FFF754F9 		BL	OVER
 2674 1014 FFF7ACF9 		BL	SUBB
 2675 1018 FFF762FF 		BL	SPACS
 2676 101c FFF77AFF 		BL	TYPEE
 2677 1020 52F804FB 		_UNNEST
 2678              	
 2679              	//    U.	  ( u -- )
 2680              	// 	Display an unsigned integer in free format.
 2681              	
 2682 1024 F40F0018 		.word	_UDOTR+MAPOFFSET
 2683 1028 02       	_UDOT:	.byte  2
 2684 1029 552E     		.ascii "U."
 2685 102b 00       		.p2align 2 	
 2686              	UDOT:
 2687 102c 42F804ED 		_NEST
 2688 1030 FFF7C2FD 		BL	BDIGS
 2689 1034 FFF7F6FD 		BL	DIGS
 2690 1038 FFF71AFE 		BL	EDIGS
 2691 103c FFF742FF 		BL	SPACE
 2692 1040 FFF768FF 		BL	TYPEE
ARM GAS  stm32eforth.s 			page 52


 2693 1044 52F804FB 		_UNNEST
 2694              	
 2695              	//    .	   ( w -- )
 2696              	// 	Display an integer in free format, preceeded by a space.
 2697              	
 2698 1048 28100018 		.word	_UDOT+MAPOFFSET
 2699 104c 01       	_DOT:	.byte  1
 2700 104d 2E       		.ascii "."
 2701 104e 00BF     		.p2align 2 	
 2702              	DOT:
 2703 1050 42F804ED 		_NEST
 2704 1054 FFF728FB 		BL	BASE
 2705 1058 FFF7DAF8 		BL	AT
 2706 105c FFF78FF8 		_DOLIT
 2707 1060 0A000000 		.word	10
 2708 1064 FFF750F9 		BL	XORR			// ?decimal
 2709 1068 FFF7ACF8 		BL	QBRAN
 2710 106c 78100018 		.word	DOT1+MAPOFFSET
 2711 1070 FFF7DCFF 		BL	UDOT
 2712 1074 52F804FB 		_UNNEST			// no,display unsigned
 2713              	DOT1:
 2714 1078 FFF70AFE 	    BL	STRR
 2715 107c FFF722FF 		BL	SPACE
 2716 1080 FFF748FF 		BL	TYPEE
 2717 1084 52F804FB 		_UNNEST			// yes, display signed
 2718              	
 2719              	//    ?	   ( a -- )
 2720              	// 	Display the contents in a memory cell.
 2721              	
 2722 1088 4C100018 		.word	_DOT+MAPOFFSET
 2723 108c 01       	_QUEST:	.byte  1
 2724 108d 3F       		.ascii "?"
 2725 108e 00BF     		.p2align 2 	
 2726              	QUEST:
 2727 1090 42F804ED 		_NEST
 2728 1094 FFF7BCF8 		BL	AT
 2729 1098 FFF7DAFF 		BL	DOT
 2730 109c 52F804FB 		_UNNEST
 2731              	
 2732              	// **************************************************************************
 2733              	//  Parsing
 2734              	
 2735              	//    parse	( b u c -- b u delta //  string> )
 2736              	// 	Scan word delimited by c. Return found string and its offset.
 2737              	
 2738              	// 	.word	_QUEST+MAPOFFSET
 2739              	// _PARS	.byte  5
 2740              	// 	.ascii "parse"
 2741              	// 	.p2align 2 	
 2742              	PARS:
 2743 10a0 42F804ED 		_NEST
 2744 10a4 FFF705FB 		BL	TEMP
 2745 10a8 FFF7A8F8 		BL	STORE
 2746 10ac FFF706F9 		BL	OVER
 2747 10b0 FFF7D6F8 		BL	TOR
 2748 10b4 FFF7F0F8 		BL	DUPP
 2749 10b8 FFF784F8 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 53


 2750 10bc AE110018 		.word	PARS8+MAPOFFSET
 2751 10c0 FFF784F9 		BL	ONEM
 2752 10c4 FFF7F5FA 		BL	TEMP
 2753 10c8 FFF7A2F8 		BL	AT
 2754 10cc FFF7A6F9 		BL	BLANK
 2755 10d0 FFF72AFA 		BL	EQUAL
 2756 10d4 FFF776F8 		BL	QBRAN
 2757 10d8 28110018 		.word	PARS3+MAPOFFSET
 2758 10dc FFF7C0F8 		BL	TOR
 2759              	PARS1:
 2760 10e0 FFF79CF9 		BL	BLANK
 2761 10e4 FFF7EAF8 		BL	OVER
 2762 10e8 FFF7A2F8 		BL	CAT			// skip leading blanks 
 2763 10ec FFF740F9 		BL	SUBB
 2764 10f0 FFF7ECF8 		BL	ZLESS
 2765 10f4 FFF7F2F9 		BL	INVER
 2766 10f8 FFF764F8 		BL	QBRAN
 2767 10fc 24110018 		.word	PARS2+MAPOFFSET
 2768 1100 FFF75CF9 		BL	ONEP
 2769 1104 FFF74FF8 		BL	DONXT
 2770 1108 E0100018 		.word	PARS1+MAPOFFSET
 2771 110c FFF796F8 		BL	RFROM
 2772 1110 FFF7BAF8 		BL	DROP
 2773 1114 FFF733F8 		_DOLIT
 2774 1118 00000000 		.word	0
 2775 111c FFF7BCF8 		BL	DUPP
 2776 1120 52F804FB 		_UNNEST
 2777              	PARS2:
 2778 1124 FFF78AF8 	  BL	RFROM
 2779              	PARS3:
 2780 1128 FFF7C8F8 		BL	OVER
 2781 112c FFF7BCF8 		BL	SWAP
 2782 1130 FFF796F8 		BL	TOR
 2783              	PARS4:
 2784 1134 FFF7BDFA 		BL	TEMP
 2785 1138 FFF76AF8 		BL	AT
 2786 113c FFF7BEF8 		BL	OVER
 2787 1140 FFF776F8 		BL	CAT
 2788 1144 FFF714F9 		BL	SUBB			// scan for delimiter
 2789 1148 FFF7B3FA 		BL	TEMP
 2790 114c FFF760F8 		BL	AT
 2791 1150 FFF764F9 		BL	BLANK
 2792 1154 FFF7E8F9 		BL	EQUAL
 2793 1158 FFF734F8 		BL	QBRAN
 2794 115c 64110018 		.word	PARS5+MAPOFFSET
 2795 1160 FFF7B4F8 		BL	ZLESS
 2796              	PARS5:
 2797 1164 FFF72EF8 		BL	QBRAN
 2798 1168 82110018 		.word	PARS6+MAPOFFSET
 2799 116c FFF726F9 		BL	ONEP
 2800 1170 FFF719F8 		BL	DONXT
 2801 1174 34110018 		.word	PARS4+MAPOFFSET
 2802 1178 FFF78EF8 		BL	DUPP
 2803 117c FFF770F8 		BL	TOR
 2804 1180 09E0     		B	PARS7
 2805              	PARS6:
 2806 1182 FFF75BF8 		BL	RFROM
ARM GAS  stm32eforth.s 			page 54


 2807 1186 FFF77FF8 		BL	DROP
 2808 118a FFF785F8 		BL	DUPP
 2809 118e FFF715F9 		BL	ONEP
 2810 1192 FFF765F8 		BL	TOR
 2811              	PARS7:
 2812 1196 FFF791F8 		BL	OVER
 2813 119a FFF7E9F8 		BL	SUBB
 2814 119e FFF74DF8 		BL	RFROM
 2815 11a2 FFF74BF8 		BL	RFROM
 2816 11a6 FFF7E3F8 		BL	SUBB
 2817 11aa 52F804FB 		_UNNEST
 2818              	PARS8:
 2819 11ae FFF785F8 		BL	OVER
 2820 11b2 FFF743F8 		BL	RFROM
 2821 11b6 FFF7DBF8 		BL	SUBB
 2822 11ba 52F804FB 		_UNNEST
 2823              	
 2824              	//    PARSE	( c -- b u //  string> )
 2825              	// 	Scan input stream and return counted string delimited by c.
 2826              	
 2827 11be 8C100018 		.word	_QUEST+MAPOFFSET
 2828 11c2 05       	_PARSE:	.byte  5
 2829 11c3 50415253 		.ascii "PARSE"
 2829      45
 2830              		.p2align 2 	
 2831              	PARSE:
 2832 11c8 42F804ED 		_NEST
 2833 11cc FFF748F8 		BL	TOR
 2834 11d0 FFF736FC 		BL	TIB
 2835 11d4 FFF782FA 		BL	INN
 2836 11d8 FFF71AF8 		BL	AT
 2837 11dc FFF7C0F8 		BL	PLUS			// current input buffer pointer
 2838 11e0 FFF786FA 		BL	NTIB
 2839 11e4 FFF714F8 		BL	AT
 2840 11e8 FFF778FA 		BL	INN
 2841 11ec FFF710F8 		BL	AT
 2842 11f0 FFF7BEF8 		BL	SUBB			// remaining count
 2843 11f4 FFF722F8 		BL	RFROM
 2844 11f8 FFF752FF 		BL	PARS
 2845 11fc FFF76EFA 		BL	INN
 2846 1200 FFF7D6F9 		BL	PSTOR
 2847 1204 52F804FB 		_UNNEST
 2848              	
 2849              	//    .(	  ( -- )
 2850              	// 	Output following string up to next ) .
 2851              	
 2852 1208 C2110018 		.word	_PARSE+MAPOFFSET
 2853 120c 82       	_DOTPR:	.byte  IMEDD+2
 2854 120d 2E28     		.ascii ".("
 2855 120f 00       		.p2align 2 	
 2856              	DOTPR:
 2857 1210 42F804ED 		_NEST
 2858 1214 FEF7B3FF 		_DOLIT
 2859 1218 29000000 		.word	')'
 2860 121c FFF7D4FF 		BL	PARSE
 2861 1220 FFF778FE 		BL	TYPEE
 2862 1224 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 55


 2863              	
 2864              	//    (	   ( -- )
 2865              	// 	Ignore following string up to next ) . A comment.
 2866              	
 2867 1228 0C120018 		.word	_DOTPR+MAPOFFSET
 2868 122c 81       	_PAREN:	.byte  IMEDD+1
 2869 122d 28       		.ascii "("
 2870 122e 00BF     		.p2align 2 	
 2871              	PAREN:
 2872 1230 42F804ED 		_NEST
 2873 1234 FEF7A3FF 		_DOLIT
 2874 1238 29000000 		.word	')'
 2875 123c FFF7C4FF 		BL	PARSE
 2876 1240 FFF72AF9 		BL	DDROP
 2877 1244 52F804FB 		_UNNEST
 2878              	
 2879              	//    \	   ( -- )
 2880              	// 	Ignore following text till the end of line.
 2881              	
 2882 1248 2C120018 		.word	_PAREN+MAPOFFSET
 2883 124c 81       	_BKSLA:	.byte  IMEDD+1
 2884 124d 5C       		.ascii	"\\"
 2885 124e 00BF     		.p2align 2 	
 2886              	BKSLA:
 2887 1250 42F804ED 		_NEST
 2888 1254 FFF74CFA 		BL	NTIB
 2889 1258 FEF7DAFF 		BL	AT
 2890 125c FFF73EFA 		BL	INN
 2891 1260 FEF7CCFF 		BL	STORE
 2892 1264 52F804FB 		_UNNEST
 2893              	
 2894              	//    CHAR	( -- c )
 2895              	// 	Parse next word and return its first character.
 2896              	
 2897 1268 4C120018 		.word	_BKSLA+MAPOFFSET
 2898 126c 04       	_CHAR:	.byte  4
 2899 126d 43484152 		.ascii "CHAR"
 2900 1271 0000BF   		.p2align 2 	
 2901              	CHAR:
 2902 1274 42F804ED 		_NEST
 2903 1278 FFF7D0F8 		BL	BLANK
 2904 127c FFF7A4FF 		BL	PARSE
 2905 1280 FFF702F8 		BL	DROP
 2906 1284 FEF7D4FF 		BL	CAT
 2907 1288 52F804FB 		_UNNEST
 2908              	
 2909              	//    WORD	( c -- a //  string> )
 2910              	// 	Parse a word from input stream and copy it to code dictionary.
 2911              	
 2912 128c 6C120018 		.word	_CHAR+MAPOFFSET
 2913 1290 04       	_WORDD:	.byte  4
 2914 1291 574F5244 		.ascii "WORD"
 2915 1295 0000BF   		.p2align 2 	
 2916              	WORDD:
 2917 1298 42F804ED 		_NEST
 2918 129c FFF794FF 		BL	PARSE
 2919 12a0 FFF7B6FB 		BL	HERE
ARM GAS  stm32eforth.s 			page 56


 2920 12a4 FFF7AAF8 		BL	CELLP
 2921 12a8 FFF728FC 		BL	PACKS
 2922 12ac 52F804FB 		_UNNEST
 2923              	
 2924              	//    TOKEN	( -- a //  string> )
 2925              	// 	Parse a word from input stream and copy it to name dictionary.
 2926              	
 2927 12b0 90120018 		.word	_WORDD+MAPOFFSET
 2928 12b4 05       	_TOKEN:	.byte  5
 2929 12b5 544F4B45 		.ascii "TOKEN"
 2929      4E
 2930 12ba 00BF     		.p2align 2 	
 2931              	TOKEN:
 2932 12bc 42F804ED 		_NEST
 2933 12c0 FFF7ACF8 		BL	BLANK
 2934 12c4 FFF7E8FF 		BL	WORDD
 2935 12c8 52F804FB 		_UNNEST
 2936              	
 2937              	// **************************************************************************
 2938              	//  Dictionary search
 2939              	
 2940              	//    NAME>	( na -- ca )
 2941              	// 	Return a code address given a name address.
 2942              	
 2943 12cc B4120018 		.word	_TOKEN+MAPOFFSET
 2944 12d0 05       	_NAMET:	.byte  5
 2945 12d1 4E414D45 		.ascii "NAME>"
 2945      3E
 2946 12d6 00BF     		.p2align 2 	
 2947              	NAMET:
 2948 12d8 42F804ED 		_NEST
 2949 12dc FFF78CF9 		BL	COUNT
 2950 12e0 FEF74DFF 		_DOLIT
 2951 12e4 1F000000 		.word	0x1F
 2952 12e8 FEF7FAFF 		BL	ANDD
 2953 12ec FFF738F8 		BL	PLUS
 2954 12f0 FFF73AFB 		BL	ALGND
 2955 12f4 52F804FB 		_UNNEST
 2956              	
 2957              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2958              	// 	Compare u bytes in two strings. Return 0 if identical.
 2959              	//
 2960              	//  Picatout 2020-12-01, 
 2961              	//      Because of problem with .align directive that
 2962              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2963              	// 		words  to do a byte by byte comparison. 
 2964              	//
 2965 12f8 D0120018 		.word	_NAMET+MAPOFFSET
 2966 12fc 05       	_SAMEQ:	.byte  5
 2967 12fd 53414D45 		.ascii "SAME?"
 2967      3F
 2968 1302 00BF     		.p2align 2	
 2969              	SAMEQ:
 2970 1304 42F804ED 		_NEST
 2971 1308 FEF7AAFF 		BL	TOR
 2972 130c 00F01EB8 		B.W	SAME2
 2973              	SAME1:
ARM GAS  stm32eforth.s 			page 57


 2974 1310 FEF7D4FF 		BL	OVER  // ( a1 a2 -- a1 a2 a1 )
 2975 1314 FEF79CFF 		BL	RAT   // a1 a2 a1 u 
 2976 1318 FFF722F8 		BL	PLUS  // a1 a2 a1+u 
 2977 131c FEF788FF 		BL	CAT	   // a1 a2 c1    		
 2978 1320 FEF7CCFF 		BL	OVER  // a1 a2 c1 a2 
 2979 1324 FEF794FF 		BL	RAT    
 2980 1328 FFF71AF8 		BL	PLUS    
 2981 132c FEF780FF 		BL	CAT	  // a1 a2 c1 c2
 2982 1330 FFF71EF8 		BL	SUBB  
 2983 1334 FFF79CF8 		BL	QDUP
 2984 1338 FEF744FF 		BL	QBRAN
 2985 133c 4C130018 		.word	SAME2+MAPOFFSET
 2986 1340 FEF77CFF 		BL	RFROM
 2987 1344 FEF7A0FF 		BL	DROP
 2988 1348 52F804FB 		_UNNEST	// strings not equal
 2989              	SAME2:
 2990 134c FEF72BFF 		BL	DONXT
 2991 1350 10130018 		.word	SAME1+MAPOFFSET
 2992 1354 FEF713FF 		_DOLIT
 2993 1358 00000000 		.word	0
 2994 135c 52F804FB 		_UNNEST	// strings equal
 2995              	
 2996              	//    find	( a na -- ca na | a F )
 2997              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2998              	
 2999              	//  Picatout 2020-12-01,  
 3000              	//		Modified from original. See comment for word "SAME?" 
 3001              	
 3002              	// 	.word	_SAMEQ+MAPOFFSET
 3003              	// _FIND	.byte  4
 3004              	// 	.ascii "find"
 3005              	// 	.p2align 2 	
 3006              	FIND:
 3007 1360 42F804ED 		_NEST
 3008 1364 FEF7A0FF 		BL	SWAP			// na a	
 3009 1368 FFF746F9 		BL	COUNT			// na a+1 count
 3010 136c FEF794FF 		BL	DUPP 
 3011 1370 FFF79FF9 		BL	TEMP
 3012 1374 FEF742FF 		BL	STORE			// na a+1 count 
 3013 1378 FEF772FF 		BL  TOR		// na a+1  R: count  
 3014 137c FEF794FF 		BL	SWAP			// a+1 na
 3015              	FIND1:
 3016 1380 FEF78AFF 		BL	DUPP			// a+1 na na
 3017 1384 FEF71EFF 		BL	QBRAN
 3018 1388 D0130018 		.word	FIND6+MAPOFFSET	// end of vocabulary
 3019 138c FEF784FF 		BL	DUPP			// a+1 na na
 3020 1390 FEF74EFF 		BL	CAT			// a+1 na name1
 3021 1394 FEF7F3FE 		_DOLIT
 3022 1398 1FFFFFFF 		.word	MASKK
 3023 139c FEF7A0FF 		BL	ANDD
 3024 13a0 FEF756FF 		BL	RAT			// a+1 na name1 count 
 3025 13a4 FEF7B0FF 		BL	XORR			// a+1 na,  same length?
 3026 13a8 FEF70CFF 		BL	QBRAN
 3027 13ac BC130018 		.word	FIND2+MAPOFFSET
 3028 13b0 FFF72CF8 		BL	CELLM			// a+1 la
 3029 13b4 FEF72CFF 		BL	AT			// a+1 next_na
 3030 13b8 FFF7E2BF 		B.w	FIND1			// try next word
ARM GAS  stm32eforth.s 			page 58


 3031              	FIND2:   
 3032 13bc FEF7FEFF 		BL	ONEP			// a+1 na+1
 3033 13c0 FFF777F9 		BL	TEMP
 3034 13c4 FEF724FF 		BL	AT			// a+1 na+1 count
 3035 13c8 FFF79CFF 		BL	SAMEQ		// a+1 na+1 ? 
 3036              	FIND3:	
 3037 13cc 00F00CB8 		B.w	FIND4
 3038              	FIND6:	
 3039 13d0 FEF734FF 		BL	RFROM			// a+1 0 name1 -- , no match
 3040 13d4 FEF758FF 		BL	DROP			// a+1 0
 3041 13d8 FEF766FF 		BL	SWAP			// 0 a+1
 3042 13dc FEF7F6FF 		BL	ONEM			// 0 a
 3043 13e0 FEF762FF 		BL	SWAP			// a 0 
 3044 13e4 52F804FB 		_UNNEST			// return without a match
 3045              	FIND4:	
 3046 13e8 FEF7ECFE 		BL	QBRAN			// a+1 na+1
 3047 13ec 00140018 		.word	FIND5+MAPOFFSET	// found a match
 3048 13f0 FEF7ECFF 		BL	ONEM			// a+1 na
 3049 13f4 FFF70AF8 		BL	CELLM			// a+4 la
 3050 13f8 FEF70AFF 		BL	AT			// a+1 next_na
 3051 13fc FFF7C0BF 		B.w	FIND1			// compare next name
 3052              	FIND5:	
 3053 1400 FEF71CFF 		BL	RFROM			// a+1 na+1 count
 3054 1404 FEF740FF 		BL	DROP			// a+1 na+1
 3055 1408 FEF74EFF 		BL	SWAP			// na+1 a+1
 3056 140c FEF73CFF 		BL	DROP			// na+1
 3057 1410 FEF7DCFF 		BL	ONEM			// na
 3058 1414 FEF740FF 		BL	DUPP			// na na
 3059 1418 FFF75EFF 		BL	NAMET			// na ca
 3060 141c FEF744FF 		BL	SWAP			// ca na
 3061 1420 52F804FB 		_UNNEST			//  return with a match
 3062              	
 3063              	//    NAME?	( a -- ca na | a F )
 3064              	// 	Search all context vocabularies for a string.
 3065              	
 3066 1424 FC120018 		.word	_SAMEQ+MAPOFFSET
 3067 1428 05       	_NAMEQ:	.byte  5
 3068 1429 4E414D45 		.ascii "NAME?"
 3068      3F
 3069 142e 00BF     		.p2align 2 	
 3070              	NAMEQ:
 3071 1430 42F804ED 		_NEST
 3072 1434 FFF77CF9 		BL	CNTXT
 3073 1438 FEF7EAFE 		BL	AT
 3074 143c FFF790FF 		BL	FIND
 3075 1440 52F804FB 		_UNNEST
 3076              	
 3077              	// **************************************************************************
 3078              	//  Terminal input
 3079              	
 3080              	//    	  ( bot eot cur -- bot eot cur )
 3081              	// 	Backup the cursor by one character.
 3082              	
 3083              	// 	.word	_NAMEQ+MAPOFFSET
 3084              	// _BKSP	.byte  2
 3085              	// 	.ascii "^H"
 3086              	// 	.p2align 2 	
ARM GAS  stm32eforth.s 			page 59


 3087              	BKSP:
 3088 1444 42F804ED 		_NEST
 3089 1448 FEF70AFF 		BL	TOR
 3090 144c FEF736FF 		BL	OVER
 3091 1450 FEF7F4FE 		BL	RFROM
 3092 1454 FEF728FF 		BL	SWAP
 3093 1458 FEF730FF 		BL	OVER
 3094 145c FEF754FF 		BL	XORR
 3095 1460 FEF7B0FE 		BL	QBRAN
 3096 1464 8C140018 		.word	BACK1+MAPOFFSET
 3097 1468 FEF789FE 		_DOLIT
 3098 146c 08000000 		.word	BKSPP
 3099 1470 FEF774FE 		BL	TECHO
 3100              	// 	BL	ATEXE
 3101 1474 FEF7AAFF 		BL	ONEM
 3102 1478 FEF7D0FF 		BL	BLANK
 3103 147c FEF76EFE 		BL	TECHO
 3104              	// 	BL	ATEXE
 3105 1480 FEF77DFE 		_DOLIT
 3106 1484 08000000 		.word	BKSPP
 3107 1488 FEF768FE 		BL	TECHO
 3108              	// 	BL	ATEXE
 3109              	BACK1:
 3110 148c 52F804FB 		  _UNNEST
 3111              	
 3112              	//    TAP	 ( bot eot cur c -- bot eot cur )
 3113              	// 	Accept and echo the key stroke and bump the cursor.
 3114              	
 3115              	// 	.word	_BKSP+MAPOFFSET
 3116              	// _TAP	.byte  3
 3117              	// 	.ascii "TAP"
 3118              	// 	.p2align 2 	
 3119              	TAP:
 3120 1490 42F804ED 		_NEST
 3121 1494 FEF700FF 		BL	DUPP
 3122 1498 FEF760FE 		BL	TECHO
 3123              	// 	BL	ATEXE
 3124 149c FEF70EFF 		BL	OVER
 3125 14a0 FEF7BCFE 		BL	CSTOR
 3126 14a4 FEF78AFF 		BL	ONEP
 3127 14a8 52F804FB 		_UNNEST
 3128              	
 3129              	//    kTAP	( bot eot cur c -- bot eot cur )
 3130              	// 	Process a key stroke, CR or backspace.
 3131              	
 3132              	// 	.word	_TAP+MAPOFFSET
 3133              	// _KTAP	.byte  4
 3134              	// 	.ascii "kTAP"
 3135              	// 	.p2align 2 	
 3136              	KTAP:
 3137              	TTAP:
 3138 14ac 42F804ED 		_NEST
 3139 14b0 FEF7F2FE 		BL	DUPP
 3140 14b4 FEF763FE 		_DOLIT
 3141 14b8 0D000000 		.word	CRR
 3142 14bc FEF724FF 		BL	XORR
 3143 14c0 FEF780FE 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 60


 3144 14c4 F4140018 		.word	KTAP2+MAPOFFSET
 3145 14c8 FEF759FE 		_DOLIT
 3146 14cc 08000000 		.word	BKSPP
 3147 14d0 FEF71AFF 		BL	XORR
 3148 14d4 FEF776FE 		BL	QBRAN
 3149 14d8 EC140018 		.word	KTAP1+MAPOFFSET
 3150 14dc FEF79EFF 		BL	BLANK
 3151 14e0 FFF7D6FF 		BL	TAP
 3152 14e4 52F804FB 		_UNNEST
 3153 14e8 00000000 		.word	0			// patch
 3154              	KTAP1:
 3155 14ec FFF7AAFF 	  BL	BKSP
 3156 14f0 52F804FB 		_UNNEST
 3157              	KTAP2:
 3158 14f4 FEF7C8FE 	  BL	DROP
 3159 14f8 FEF7D6FE 		BL	SWAP
 3160 14fc FEF7C4FE 		BL	DROP
 3161 1500 FEF7CAFE 		BL	DUPP
 3162 1504 52F804FB 		_UNNEST
 3163              	
 3164              	//    ACCEPT	( b u -- b u )
 3165              	// 	Accept characters to input buffer. Return with actual count.
 3166              	
 3167 1508 28140018 		.word	_NAMEQ+MAPOFFSET
 3168 150c 06       	_ACCEP:	.byte  6
 3169 150d 41434345 		.ascii "ACCEPT"
 3169      5054
 3170 1513 00       		.p2align 2 	
 3171              	ACCEP:
 3172 1514 42F804ED 		_NEST
 3173 1518 FEF7D0FE 		BL	OVER
 3174 151c FEF720FF 		BL	PLUS
 3175 1520 FEF7CCFE 		BL	OVER
 3176              	ACCP1:
 3177 1524 FEF7C2FF 	  BL	DDUP
 3178 1528 FEF7EEFE 		BL	XORR
 3179 152c FEF74AFE 		BL	QBRAN
 3180 1530 60150018 		.word	ACCP4+MAPOFFSET
 3181 1534 FFF7B6FC 		BL	KEY
 3182 1538 FEF7AEFE 		BL	DUPP
 3183 153c FEF76EFF 		BL	BLANK
 3184 1540 FEF71DFE 		_DOLIT
 3185 1544 7F000000 		.word	127
 3186 1548 FFF754F9 		BL	WITHI
 3187 154c FEF73AFE 		BL	QBRAN
 3188 1550 5A150018 		.word	ACCP2+MAPOFFSET
 3189 1554 FFF79CFF 		BL	TAP
 3190 1558 01E0     		B	ACCP3
 3191              	ACCP2:
 3192 155a FFF7A7FF 	  BL	KTAP
 3193              	// 	BL	ATEXE
 3194              	ACCP3:	  
 3195 155e E1E7     		B	ACCP1
 3196              	ACCP4:
 3197 1560 FEF792FE 	  BL	DROP
 3198 1564 FEF7AAFE 		BL	OVER
 3199 1568 FEF702FF 		BL	SUBB
ARM GAS  stm32eforth.s 			page 61


 3200 156c 52F804FB 		_UNNEST
 3201              	
 3202              	//    QUERY	( -- )
 3203              	// 	Accept input stream to terminal input buffer.
 3204              	
 3205 1570 0C150018 		.word	_ACCEP+MAPOFFSET
 3206 1574 05       	_QUERY:	.byte  5
 3207 1575 51554552 		.ascii "QUERY"
 3207      59
 3208 157a 00BF     		.p2align 2 	
 3209              	QUERY:
 3210 157c 42F804ED 		_NEST
 3211 1580 FFF75EFA 		BL	TIB
 3212 1584 FEF7FBFD 		_DOLIT
 3213 1588 50000000 		.word	80
 3214 158c FFF7C2FF 		BL	ACCEP
 3215 1590 FFF7AEF8 		BL	NTIB
 3216 1594 FEF732FE 		BL	STORE
 3217 1598 FEF776FE 		BL	DROP
 3218 159c FEF7EFFD 		_DOLIT
 3219 15a0 00000000 		.word	0
 3220 15a4 FFF79AF8 		BL	INN
 3221 15a8 FEF728FE 		BL	STORE
 3222 15ac 52F804FB 		_UNNEST
 3223              	
 3224              	// **************************************************************************
 3225              	//  Error handling
 3226              	
 3227              	//    ABORT	( a -- )
 3228              	// 	Reset data stack and jump to QUIT.
 3229              	
 3230 15b0 74150018 		.word	_QUERY+MAPOFFSET
 3231 15b4 05       	_ABORT:	.byte  5
 3232 15b5 41424F52 		.ascii "ABORT"
 3232      54
 3233 15ba 00BF     		.p2align 2 	
 3234              	ABORT:
 3235 15bc 42F804ED 		_NEST
 3236 15c0 FFF780FC 		BL	SPACE
 3237              	ABORT1:
 3238 15c4 FFF718F8 		BL	COUNT
 3239 15c8 FFF7A4FC 		BL	TYPEE
 3240 15cc FEF7D7FD 		_DOLIT
 3241 15d0 3F000000 		.word	0X3F
 3242 15d4 FEF7C2FD 		BL	EMIT
 3243 15d8 FFF7B4FC 		BL	CR
 3244 15dc 00F0ACF8 		BL	PRESE
 3245 15e0 00F0BAB8 		B.W	QUIT
 3246              	
 3247              	//    _abort"	( f -- )
 3248              	// 	Run time routine of ABORT" . Abort with a message.
 3249              	
 3250              	// 	.word	_ABORT+MAPOFFSET
 3251              	// _ABORQ	.byte  COMPO+6
 3252              	// 	.ascii "abort\""
 3253              	// 	.p2align 2 	
 3254              	ABORQ:
ARM GAS  stm32eforth.s 			page 62


 3255 15e4 42F804ED 		_NEST
 3256 15e8 FFF7BCFC 		BL	DOSTR 
 3257 15ec FEF75CFE 		BL	SWAP 
 3258 15f0 FEF7E8FD 		BL	QBRAN
 3259 15f4 FA150018 		.word	1f+MAPOFFSET	// text flag
 3260 15f8 E4E7     		B	ABORT1 
 3261              	1:
 3262 15fa FEF745FE 		BL	DROP
 3263 15fe 52F804FB 		_UNNEST			// drop error
 3264              	
 3265              	// **************************************************************************
 3266              	//  The text interpreter
 3267              	
 3268              	//    $INTERPRET  ( a -- )
 3269              	// 	Interpret a word. If failed, try to convert it to an integer.
 3270              	
 3271 1602 B4150018 		.word	_ABORT+MAPOFFSET
 3272 1606 0A       	_INTER:	.byte  10
 3273 1607 2424494E 		.ascii "$$INTERPRET"
 3273      54455250 
 3273      524554
 3274 1612 00BF     		.p2align 2 	
 3275              	INTER:
 3276 1614 42F804ED 		_NEST
 3277 1618 FFF70AFF 		BL	NAMEQ
 3278 161c FEF728FF 		BL	QDUP	// ?defined
 3279 1620 FEF7D0FD 		BL	QBRAN
 3280 1624 54160018 		.word	INTE1+MAPOFFSET
 3281 1628 FEF7F2FD 		BL	AT
 3282 162c FEF7A7FD 		_DOLIT
 3283 1630 40000000 		.word	COMPO
 3284 1634 FEF754FE 		BL	ANDD	// ?compile only lexicon bits
 3285 1638 FFF7D4FF 		BL	ABORQ
 3286 163c 0D       		.byte	13
 3287 163d 20636F6D 		.ascii " compile only"
 3287      70696C65 
 3287      206F6E6C 
 3287      79
 3288 164a 00BF     		.p2align 2 	
 3289 164c FEF7A6FD 		BL	EXECU
 3290 1650 52F804FB 		_UNNEST			// execute defined word
 3291              	INTE1:
 3292 1654 FFF78CFB 	  BL	NUMBQ
 3293 1658 FEF7B4FD 		BL	QBRAN
 3294 165c 64160018 		.word	INTE2+MAPOFFSET
 3295 1660 52F804FB 		_UNNEST
 3296              	INTE2:
 3297 1664 FFF7AABF 	  B.W	ABORT	// error
 3298              	
 3299              	//    [	   ( -- )
 3300              	// 	Start the text interpreter.
 3301              	
 3302 1668 06160018 		.word	_INTER+MAPOFFSET
 3303 166c 81       	_LBRAC:	.byte  IMEDD+1
 3304 166d 5B       		.ascii "["
 3305 166e 00BF     		.p2align 2 	
 3306              	LBRAC:
ARM GAS  stm32eforth.s 			page 63


 3307 1670 42F804ED 		_NEST
 3308 1674 FEF783FD 		_DOLIT
 3309 1678 14160018 		.word	INTER+MAPOFFSET
 3310 167c FFF742F8 		BL	TEVAL
 3311 1680 FEF7BCFD 		BL	STORE
 3312 1684 52F804FB 		_UNNEST
 3313              	
 3314              	//    .OK	 ( -- )
 3315              	// 	Display "ok" only while interpreting.
 3316              	
 3317 1688 6C160018 		.word	_LBRAC+MAPOFFSET
 3318 168c 03       	_DOTOK:	.byte  3
 3319 168d 2E4F4B   		.ascii ".OK"
 3320              		.p2align 2 	
 3321              	DOTOK:
 3322 1690 42F804ED 		_NEST
 3323 1694 FEF773FD 		_DOLIT
 3324 1698 14160018 		.word	INTER+MAPOFFSET
 3325 169c FFF732F8 		BL	TEVAL
 3326 16a0 FEF7B6FD 		BL	AT
 3327 16a4 FEF740FF 		BL	EQUAL
 3328 16a8 FEF78CFD 		BL	QBRAN
 3329 16ac B8160018 		.word	DOTO1+MAPOFFSET
 3330 16b0 FFF780FC 		BL	DOTQP
 3331 16b4 03       		.byte	3
 3332 16b5 206F6B   		.ascii " ok"
 3333              	DOTO1:
 3334 16b8 FFF744FC 		BL	CR
 3335 16bc 52F804FB 		_UNNEST
 3336              	
 3337              	//    ?STACK	( -- )
 3338              	// 	Abort if the data stack underflows.
 3339              	
 3340 16c0 8C160018 		.word	_DOTOK+MAPOFFSET
 3341 16c4 06       	_QSTAC:	.byte  6
 3342 16c5 3F535441 		.ascii "?STACK"
 3342      434B
 3343 16cb 00       		.p2align 2 	
 3344              	QSTAC:
 3345 16cc 42F804ED 		_NEST
 3346 16d0 FFF77CF9 		BL	DEPTH
 3347 16d4 FEF7FAFD 		BL	ZLESS	// check only for underflow
 3348 16d8 FFF784FF 		BL	ABORQ
 3349 16dc 0A       		.byte	10
 3350 16dd 20756E64 		.ascii " underflow"
 3350      6572666C 
 3350      6F77
 3351 16e7 00       		.p2align 2 	
 3352 16e8 52F804FB 		_UNNEST
 3353              	
 3354              	//    EVAL	( -- )
 3355              	// 	Interpret the input stream.
 3356              	
 3357 16ec C4160018 		.word	_QSTAC+MAPOFFSET
 3358 16f0 04       	_EVAL:	.byte  4
 3359 16f1 4556414C 		.ascii "EVAL"
 3360 16f5 0000BF   		.p2align 2 	
ARM GAS  stm32eforth.s 			page 64


 3361              	EVAL:
 3362 16f8 42F804ED 		_NEST
 3363              	EVAL1:
 3364 16fc FFF7DEFD 	    BL	TOKEN
 3365 1700 FEF7CAFD 		BL	DUPP
 3366 1704 FEF794FD 		BL	CAT	// ?input stream empty
 3367 1708 FEF75CFD 		BL	QBRAN
 3368 170c 20170018 		.word	EVAL2+MAPOFFSET
 3369 1710 FEF7F8FF 		BL	TEVAL
 3370 1714 FFF7A0F9 		BL	ATEXE
 3371 1718 FFF7D8FF 		BL	QSTAC	// evaluate input, check stack
 3372 171c FFF7EEBF 		B.W	EVAL1
 3373              	EVAL2:
 3374 1720 FEF7B2FD 		BL	DROP
 3375 1724 FFF7B4FF 		BL	DOTOK
 3376 1728 52F804FB 		_UNNEST	// prompt
 3377              	
 3378              	//    PRESET	( -- )
 3379              	// 	Reset data stack pointer and the terminal input buffer.
 3380              	
 3381 172c F0160018 		.word	_EVAL+MAPOFFSET
 3382 1730 06       	_PRESE:	.byte  6
 3383 1731 50524553 		.ascii "PRESET"
 3383      4554
 3384 1737 00       		.p2align 2 	
 3385              	PRESE:
 3386 1738 42F804ED 		_NEST
 3387 173c 4FF49D41 		_MOV32 R1,SPP // init SP 
 3387      C2F20001 
 3388 1744 85EA0505 		EOR	R5,R5,R5//  init TOS=0
 3389 1748 52F804FB 		_UNNEST 
 3390              	
 3391              	//    QUIT	( -- )
 3392              	// 	Reset return stack pointer and start text interpreter.
 3393              	
 3394 174c 30170018 		.word	_PRESE+MAPOFFSET
 3395 1750 04       	_QUIT:	.byte  4
 3396 1751 51554954 		.ascii "QUIT"
 3397 1755 0000BF   		.p2align 2 	
 3398              	QUIT:
 3399 1758 42F804ED 		_NEST
 3400 175c 4FF49F42 		_MOV32 R2,RPP
 3400      C2F20002 
 3401              	QUIT1:
 3402 1764 FFF784FF 		BL	LBRAC			// start interpretation
 3403              	QUIT2:
 3404 1768 FFF708FF 		BL	QUERY			// get input
 3405 176c FFF7C4FF 		BL	EVAL
 3406 1770 FEF734FD 		BL	BRAN
 3407 1774 68170018 		.word	QUIT2+MAPOFFSET	// continue till error
 3408              	
 3409              	/***************************
 3410              	//  Flash memory interface
 3411              	***************************/
 3412              	// UNLOCK ( T|F -- )
 3413              	// lock or unlock FLASH write 
 3414              	
ARM GAS  stm32eforth.s 			page 65


 3415 1778 50170018 		.word _QUIT+MAPOFFSET  
 3416 177c 06       	_UNLOCK: .byte 6
 3417 177d 554E4C4F 		.ascii "UNLOCK"
 3417      434B
 3418 1783 00       		.p2align 2  
 3419              	UNLOCK:	//  unlock flash memory	
 3420 1784 42F804ED 		_NEST 
 3421 1788 FEF71CFD 		BL QBRAN
 3422 178c AE170018 		.word LOCK+MAPOFFSET
 3423 1790 DFF80404 		ldr	r0, flash_regs 
 3424 1794 4FF03404 		mov r4,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 3425 1798 C460     		str r4,[r0,#FLASH_SR]
 3426 179a 0469     		ldr r4,[r0,#FLASH_CR]
 3427 179c 14F0800F 		tst r4,#(1<<7)
 3428 17a0 03D0     		beq 1f 
 3429 17a2 FE4C     		ldr	r4, flash_regs+4 // key1
 3430 17a4 4460     		str	r4, [r0, #FLASH_KEYR]
 3431 17a6 FE4C     		ldr	r4, flash_regs+8 // key2 
 3432 17a8 4460     		str	r4, [r0, #FLASH_KEYR]
 3433              		/* unlock option registers */
 3434              	/*
 3435              		ldr	r4, flash_regs+4 
 3436              		str	r4, [r0, #FLASH_OPTKEYR]
 3437              		ldr	r4, flash_regs+8
 3438              		str	r4, [r0, #FLASH_OPTKEYR]
 3439              	*/ 
 3440              	1:
 3441 17aa 52F804FB 		_UNNEST
 3442              	 // lock flash memory
 3443              	LOCK: 
 3444 17ae FA48     		ldr r0,flash_regs  
 3445              	//	ldr r4,[r0,#FLASH_CR]
 3446 17b0 4FF08004 		mov r4,#(1<<7)
 3447 17b4 0461     		str r4,[r0,#FLASH_CR]
 3448 17b6 52F804FB 		_UNNEST  
 3449              	
 3450              	WAIT_BSY:
 3451 17ba F748     		ldr	r0,flash_regs
 3452              	WAIT1:
 3453 17bc C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 3454 17be 14F00104 		ands	r4, #0x1	//  BSY
 3455 17c2 FBD1     		bne	WAIT1
 3456 17c4 7047     		_NEXT
 3457              	
 3458              	//    ERASE_PAGE	   ( adr -- )
 3459              	// 	  Erase one page of flash memory.
 3460              	//    stm32f103 page size is 1024 bytes 
 3461              	//    adr is any address inside page to erase 
 3462              	
 3463 17c6 7C170018 		.word	_UNLOCK+MAPOFFSET
 3464 17ca 0A       	_EPAGE:	.byte  10
 3465 17cb 45524153 		.ascii "ERASE_PAGE"
 3465      455F5041 
 3465      4745
 3466 17d5 0000BF   		.p2align 2 	
 3467              	
 3468              	EPAGE: 	//  page --
ARM GAS  stm32eforth.s 			page 66


 3469 17d8 42F804ED 		_NEST
 3470 17dc FFF7EDFF 		bl	WAIT_BSY
 3471 17e0 FEF7CDFC 		_DOLIT 
 3472 17e4 01000000 		.word 1 
 3473 17e8 FFF7CCFF 		bl  UNLOCK 
 3474 17ec EA48     		ldr r0,flash_regs 	 
 3475 17ee 4FF00204 		mov r4,#2 // set PER bit 
 3476 17f2 0461     		str r4,[r0,#FLASH_CR]
 3477 17f4 4561     		str r5,[r0,#FLASH_AR] // page to erase address 
 3478 17f6 0469     		ldr	r4,[r0, #FLASH_CR]	
 3479 17f8 44F04004 		orr	R4,#0x40	//  set STRT bit   
 3480 17fc 0461     		str	r4,[r0, #FLASH_CR]	//  start erasing
 3481 17fe FFF7DCFF 	 	bl	WAIT_BSY // wait until done
 3482 1802 FEF7BCFC 		_DOLIT 
 3483 1806 00000000 		.word 0 
 3484 180a FFF7BBFF 		bl	UNLOCK  // lock flash write 
 3485 180e C568     		ldr r5,[r0,#FLASH_SR] // check for errors 
 3486 1810 05F01405 		and r5,r5,#(5<<2)
 3487 1814 FFF7E6FE 		bl ABORQ 
 3488 1818 0D       		.byte 13
 3489 1819 20657261 		.ascii " erase error!"
 3489      73652065 
 3489      72726F72 
 3489      21
 3490 1826 00BF     		.p2align 2
 3491 1828 52F804FB 		_UNNEST
 3492              	
 3493              	// store 16 bit word
 3494              	// expect flash unlocked  
 3495              	HWORD_WRITE: // ( hword address -- )
 3496 182c 42F804ED 		_NEST
 3497 1830 0469     		ldr	r4, [r0, #FLASH_CR]	//  FLASH_CR
 3498              	//	bic r4,#(1<<9)|(1<<5)|(1<<4)|(1<<2)|(1<<1) //  clear OPTWRE|OPTER|OPTPG|MER|PER
 3499 1832 4FF00104 		mov r4,#1 // set PG 
 3500 1836 0461     		str r4,[r0,#FLASH_CR]
 3501 1838 2E46     		mov r6,r5 
 3502 183a 51F8045B 		_POP 
 3503 183e 3580     		strh r5,[r6] 
 3504 1840 FFF7BBFF 		bl WAIT_BSY 
 3505 1844 C568     		ldr r5,[r0,#FLASH_SR]
 3506 1846 05F01405 		and r5,r5,#(5<<2) 
 3507 184a FEF7BBFC 		bl QBRAN
 3508 184e 64180018 		.word 1f+MAPOFFSET 
 3509 1852 FFF7C7FE 		bl ABORQ
 3510 1856 0D       		.byte 13
 3511 1857 20777269 		.ascii " write error!"
 3511      74652065 
 3511      72726F72 
 3511      21
 3512              		.p2align 2
 3513              	1:	 
 3514 1864 52F804FB 		_UNNEST 
 3515              	
 3516              	
 3517              	//    I!	   ( data address -- )
 3518              	// 	   Write one word into flash memory
 3519              	//	   address must even 
ARM GAS  stm32eforth.s 			page 67


 3520              	
 3521 1868 CA170018 		.word	_EPAGE+MAPOFFSET
 3522 186c 02       	_ISTOR:	.byte  2
 3523 186d 4921     		.ascii "I!"
 3524 186f 00       		.p2align 2 	
 3525              	ISTOR:	//  data address --
 3526 1870 42F804ED 		_NEST
 3527 1874 FFF7A1FF 		bl	WAIT_BSY
 3528 1878 FEF781FC 		_DOLIT 
 3529 187c 01000000 		.word 1 
 3530 1880 FFF780FF 		bl  UNLOCK 
 3531 1884 FEF712FE 		BL DDUP 
 3532 1888 FEF7EAFC 		BL TOR 
 3533 188c FEF7E8FC 		BL TOR 
 3534 1890 FFF7CCFF 		BL HWORD_WRITE
 3535 1894 FEF7D2FC 		BL RFROM 
 3536 1898 4FEA3545 		ror r5,r5,#16
 3537 189c FEF7CEFC 		BL RFROM 
 3538 18a0 05F10205 		add r5,r5,#2 
 3539 18a4 FFF7C2FF 		BL HWORD_WRITE 
 3540 18a8 FEF769FC 		_DOLIT 
 3541 18ac 00000000 		.word 0
 3542 18b0 FFF768FF 		bl UNLOCK 
 3543 18b4 52F804FB 		_UNNEST
 3544              	
 3545              	// IMG_SIZE ( -- u )
 3546              	// return flash pages required to save 
 3547              	// user ram  
 3548 18b8 6C180018 		.word _ISTOR+MAPOFFSET 
 3549 18bc 08       	_IMG_SIZE: .byte 8
 3550 18bd 494D475F 		.ascii "IMG_SIZE" 
 3550      53495A45 
 3551 18c5 0000BF   		.p2align 2
 3552              	IMG_SIZE: 
 3553 18c8 42F804ED 		_NEST
 3554 18cc FEF757FC 		_DOLIT 
 3555 18d0 38000000 		.word VARS_END_OFS-IMG_SIGN_OFS 
 3556 18d4 FEF766FF 		BL USER_END 
 3557 18d8 FEF756FF 		BL USER_BEGIN 
 3558 18dc FEF748FD 		BL SUBB 
 3559 18e0 FEF73EFD 		BL PLUS 
 3560 18e4 FEF74BFC 		_DOLIT 
 3561 18e8 00040000 		.word 1024 
 3562 18ec FEF7F0FF 		BL SLMOD 
 3563 18f0 FEF7DAFC 		BL SWAP 
 3564 18f4 FEF766FC 		BL QBRAN 
 3565 18f8 00190018 		.word 1f+MAPOFFSET 
 3566 18fc FEF75EFD 		BL ONEP
 3567              	1:
 3568 1900 52F804FB 		_UNNEST  
 3569              	
 3570              	// IMG? (  -- T|F )
 3571              	// check if an image has been saved in FLASH 
 3572 1904 BC180018 		.word _IMG_SIZE+MAPOFFSET 
 3573 1908 04       	_IMGQ: .byte 4
 3574 1909 494D473F 		.ascii "IMG?"
 3575 190d 0000BF   		.p2align 2
ARM GAS  stm32eforth.s 			page 68


 3576              	IMGQ:
 3577 1910 42F804ED 		_NEST 
 3578 1914 FEF754FF 		BL IMG_ADR 
 3579 1918 FEF77AFC 		BL AT 
 3580 191c FEF75EFF 		BL IMG_SIGN  
 3581 1920 FEF776FC 		BL AT 
 3582 1924 FEF7F0FC 		BL XORR  
 3583 1928 FEF7F4FD 		BL ZEQUAL
 3584 192c 52F804FB 		_UNNEST
 3585              	
 3586              	// LOAD_IMG (  -- )
 3587              	// Load image from FLASH to RAM. 
 3588 1930 08190018 		.word _IMGQ+MAPOFFSET
 3589 1934 08       	_LOAD_IMG: .byte 8 
 3590 1935 4C4F4144 		.ascii "LOAD_IMG" 
 3590      5F494D47 
 3591 193d 0000BF   		.p2align 2 
 3592              	LOAD_IMG:
 3593 1940 42F804ED 		_NEST 
 3594 1944 FFF7E4FF 		BL IMGQ 
 3595 1948 FEF73CFC 		BL QBRAN 
 3596 194c 94190018 		.word 1f+MAPOFFSET
 3597              	/* copy system variables to RAM */
 3598 1950 FEF736FF 		BL IMG_ADR 
 3599 1954 FEF7A0FC 		BL DUPP 
 3600 1958 FEF782FC 		BL TOR   // save source address 
 3601 195c FEF73EFF 		BL IMG_SIGN 
 3602 1960 41F8045D 		_PUSH 
 3603 1964 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 3604 1968 FEF796FC 		BL DUPP 
 3605 196c FEF778FC 		BL TOR 
 3606 1970 FFF796F8 		BL MOVE // ( src dest count -- ) R: src count 
 3607              	/* copy user definitions */
 3608 1974 FEF762FC 		BL RFROM 
 3609 1978 FEF760FC 		BL RFROM  
 3610 197c FEF7F0FC 		BL PLUS // source address  
 3611 1980 FEF702FF 		BL USER_BEGIN // destination address
 3612 1984 FFF744F8 		BL HERE  
 3613 1988 FEF798FC 		BL OVER 
 3614 198c FEF7F0FC 		BL SUBB  // byte count 
 3615 1990 FFF786F8 		BL MOVE
 3616 1994 52F804FB 	1:	_UNNEST  
 3617              	
 3618              	// ERASE_MPG ( u1 u2 -- )
 3619              	// erase many pages 
 3620              	// u1 first page number 
 3621              	// u2 how many pages  
 3622 1998 34190018 		.word _LOAD_IMG+MAPOFFSET
 3623 199c 09       	_ERASE_MPG: .byte 9 
 3624 199d 45524153 		.ascii "ERASE_MPG"	
 3624      455F4D50 
 3624      47
 3625 19a6 00BF     		.p2align 2 
 3626              	ERASE_MPG:
 3627 19a8 42F804ED 		_NEST 
 3628 19ac FEF758FC 		BL TOR 
 3629 19b0 00F052F8 		BL PG_TO_ADR 
ARM GAS  stm32eforth.s 			page 69


 3630 19b4 FEF712FC 		BL BRAN 
 3631 19b8 D0190018 		.word 2f+MAPOFFSET 
 3632              	1:
 3633 19bc FEF76CFC 		BL DUPP 
 3634 19c0 FEF74EFC 		BL TOR 
 3635 19c4 FFF708FF 		BL EPAGE 
 3636 19c8 FEF738FC 		BL RFROM
 3637 19cc 05F58065 		add r5,#PAGE_SIZE 
 3638              	2:
 3639 19d0 FEF7E9FB 		BL DONXT
 3640 19d4 BC190018 		.word 1b+MAPOFFSET 
 3641 19d8 51F8045B 		_POP 
 3642 19dc 52F804FB 		_UNNEST 
 3643              	
 3644              	// FLSH_WR ( src dest u -- dest+u )
 3645              	// write u words to flash memory 
 3646 19e0 9C190018 		.word _ERASE_MPG+MAPOFFSET
 3647 19e4 07       	_FLSH_WR: .byte 7 
 3648 19e5 464C5348 		.ascii "FLSH_WR"
 3648      5F5752
 3649              		.p2align  
 3650              	FLSH_WR: 
 3651 19ec 42F804ED 		_NEST 
 3652 19f0 FEF736FC 		BL TOR
 3653 19f4 FEF7F2FB 		BL BRAN 
 3654 19f8 1C1A0018 		.word 3f+MAPOFFSET  
 3655              	/* write system variables to FLASH */
 3656 19fc FEF730FC 	2:  BL TOR  // destination address 
 3657 1a00 FEF74AFC 		BL DUPP 
 3658 1a04 FEF704FC 		BL AT   // get data 
 3659 1a08 FEF722FC 		BL RAT  // get destination address 
 3660 1a0c FFF730FF 		BL ISTOR
 3661 1a10 FEF7F4FC 		BL CELLP  // increment source address 
 3662 1a14 FEF712FC 		BL RFROM 
 3663 1a18 FEF7F0FC 		BL CELLP  // increment dest address 
 3664 1a1c FEF7C3FB 	3:	BL DONXT 
 3665 1a20 FC190018 		.word 2b+MAPOFFSET
 3666 1a24 FEF71CFC 		BL TOR 
 3667 1a28 FEF72EFC 		BL DROP 
 3668 1a2c FEF706FC 		BL RFROM 
 3669 1a30 52F804FB 		_UNNEST 
 3670              	
 3671              	// ADR>PG ( a -- n )
 3672              	// convert address to page number, {0..127} 
 3673 1a34 E4190018 		.word _FLSH_WR+MAPOFFSET
 3674 1a38 06       	_ADR_TO_PG: .byte 6 
 3675 1a39 4144523E 		.ascii "ADR>PG" 
 3675      5047
 3676 1a3f 00       		.p2align 2 
 3677              	ADR_TO_PG: 
 3678 1a40 4FEA9525 		lsr r5,#10 
 3679 1a44 05F07F05 		and r5,#127 
 3680 1a48 7047     		_NEXT  
 3681              	
 3682              	// PG>ADR ( n -- a )
 3683              	// convert page# to address 
 3684 1a4a 381A0018 		.word _ADR_TO_PG+MAPOFFSET
ARM GAS  stm32eforth.s 			page 70


 3685 1a4e 06       	_PG_TO_ADR: .byte 6 
 3686 1a4f 50473E41 		.ascii "PG>ADR" 
 3686      4452
 3687 1a55 0000BF   		.p2align 2 
 3688              	PG_TO_ADR:
 3689 1a58 C0F20205 		movt r5,#2
 3690 1a5c 4FEA8525 		lsl r5,#10 
 3691 1a60 7047     		_NEXT 
 3692              	
 3693              	// ERASE_IMG (  -- )
 3694              	// erase image in from FLASH  
 3695 1a62 4E1A0018 		.word _PG_TO_ADR+MAPOFFSET 
 3696 1a66 09       	_ERASE_IMG: .byte 9
 3697 1a67 45524153 		.ascii "ERASE_IMG"
 3697      455F494D 
 3697      47
 3698              		.p2align 2
 3699              	ERASE_IMG:
 3700 1a70 42F804ED 		_NEST
 3701 1a74 FEF7A4FE 		BL IMG_ADR 
 3702 1a78 FFF726FF 		BL IMG_SIZE 
 3703 1a7c FEF7F0FB 		BL TOR 
 3704 1a80 FEF7ACFB 		BL BRAN 
 3705 1a84 941A0018 		.word  2f+MAPOFFSET 
 3706 1a88 FEF706FC 	1:	BL DUPP 
 3707 1a8c FFF7A4FE 		BL EPAGE
 3708 1a90 05F58065 		ADD R5,#PAGE_SIZE 
 3709 1a94 FEF787FB 	2:	BL DONXT 
 3710 1a98 881A0018 		.word 1b+MAPOFFSET 
 3711 1a9c FEF7F4FB 		BL DROP 
 3712 1aa0 52F804FB 		_UNNEST 
 3713              	
 3714              	// SAVE_IMG ( -- )
 3715              	// save in FLASH memory system variables and user defintitions.
 3716 1aa4 661A0018 		.word _ERASE_IMG+MAPOFFSET	
 3717 1aa8 08       	_SAVE_IMG: .byte 8 
 3718 1aa9 53415645 		.ascii "SAVE_IMG"
 3718      5F494D47 
 3719 1ab1 0000BF   		.p2align 2
 3720              	SAVE_IMG:
 3721 1ab4 42F804ED 		_NEST 
 3722 1ab8 FEF7AAFF 		BL HERE 
 3723 1abc FEF764FE 		BL USER_BEGIN
 3724 1ac0 FEF732FD 		BL EQUAL 
 3725 1ac4 FEF77EFB 		BL QBRAN
 3726 1ac8 D01A0018 		.word 1f+MAPOFFSET 
 3727 1acc 52F804FB 		_UNNEST  // nothing to save 
 3728 1ad0 FFF71EFF 	1:	BL IMGQ 
 3729 1ad4 FEF776FB 		BL QBRAN 
 3730 1ad8 E01A0018 		.word 2f+MAPOFFSET
 3731              	/* delete saved image */
 3732 1adc FFF7C8FF 		BL ERASE_IMG 
 3733              	/* save system variables */
 3734              	2:	
 3735 1ae0 FEF77CFE 		BL IMG_SIGN // src address 
 3736 1ae4 FEF76CFE 		BL IMG_ADR  //  ( src dest --  
 3737 1ae8 41F8045D 		_PUSH 
ARM GAS  stm32eforth.s 			page 71


 3738 1aec 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 3739 1af0 FEF7A6FC 		BL CELLSL  // word count 
 3740 1af4 FFF77AFF 		BL FLSH_WR  // ( src dest count -- dest+u )
 3741              	/* write user definitions */
 3742 1af8 FEF746FE 		BL USER_BEGIN
 3743 1afc FEF7D4FB 		BL SWAP  // ( src dest+ -- )
 3744 1b00 FEF786FF 		BL HERE   
 3745 1b04 FEF740FE 		BL USER_BEGIN 
 3746 1b08 FEF732FC 		BL SUBB 
 3747 1b0c FEF798FC 		BL CELLSL  // src dest+ count -- 
 3748 1b10 FFF76CFF 		BL FLSH_WR  
 3749 1b14 52F804FB 		_UNNEST 
 3750              	
 3751              	// TURNKEY ( -- "WORD") 
 3752              	// set autorun program in 'BOOT variable 
 3753              	// and save image in slot 0.
 3754 1b18 A81A0018 		.word _SAVE_IMG+MAPOFFSET
 3755 1b1c 07       	_TURNKEY: .byte 7
 3756 1b1d 5455524E 		.ascii "TURNKEY"
 3756      4B4559
 3757              		.p2align 2 
 3758              	TURNKEY:
 3759 1b24 42F804ED 		_NEST 
 3760 1b28 00F040F8 		BL TICK 
 3761 1b2c FEF7B2FD 		BL TBOOT 
 3762 1b30 FEF764FB 		BL STORE 
 3763 1b34 FFF7BEFF 		BL SAVE_IMG 
 3764 1b38 52F804FB 		_UNNEST
 3765              	
 3766 1b3c 1C1B0018 		.word _TURNKEY+MAPOFFSET
 3767 1b40 06       	_FORGET: .byte 6 
 3768 1b41 464F5247 		.ascii "FORGET"
 3768      4554
 3769 1b47 00       		.p2align 2
 3770              	FORGET:
 3771 1b48 42F804ED 		_NEST 
 3772 1b4c FFF7B6FB 		BL TOKEN 
 3773 1b50 FEF7A2FB 		BL DUPP 
 3774 1b54 FEF736FB 		BL QBRAN 
 3775 1b58 FEF711FB 		_DOLIT 
 3776 1b5c 941B0018 		.word 9f+MAPOFFSET 
 3777 1b60 FFF766FC 		BL NAMEQ // ( a -- ca na | a 0 )
 3778 1b64 FEF784FC 		BL QDUP 
 3779 1b68 FEF72CFB 		BL QBRAN 
 3780 1b6c 901B0018 		.word 8f+MAPOFFSET
 3781 1b70 FEF74CFC 		BL CELLM // ( ca la )
 3782 1b74 FEF790FB 		BL DUPP 
 3783 1b78 FEF7E4FD 		BL CPP   
 3784 1b7c FEF73EFB 		BL STORE
 3785 1b80 FEF746FB 		BL AT 
 3786 1b84 FEF7F2FD 		BL LAST 
 3787 1b88 FEF738FB 		BL STORE
 3788 1b8c 00F024FA 		BL OVERT 
 3789 1b90 FEF77AFB 	8:  BL DROP 
 3790 1b94 52F804FB 	9:	_UNNEST 
 3791              	
 3792              	
ARM GAS  stm32eforth.s 			page 72


 3793              	flash_regs:
 3794 1b98 00200240 		.word FLASH_BASE_ADR // 0 
 3795 1b9c 23016745 		.word FLASH_KEY1   // 4 
 3796 1ba0 AB89EFCD 		.word FLASH_KEY2   // 8
 3797              	
 3798              	// **************************************************************************
 3799              	//  The compiler
 3800              	
 3801              	//    '	   ( -- ca )
 3802              	// 	Search context vocabularies for the next word in input stream.
 3803              	
 3804 1ba4 401B0018 		.word	_FORGET+MAPOFFSET
 3805 1ba8 01       	_TICK:	.byte  1
 3806 1ba9 27       		.ascii "'"
 3807 1baa 00BF     		.p2align 2 	
 3808              	TICK:
 3809 1bac 42F804ED 		_NEST
 3810 1bb0 FFF784FB 		BL	TOKEN
 3811 1bb4 FFF73CFC 		BL	NAMEQ	// ?defined
 3812 1bb8 FEF704FB 		BL	QBRAN
 3813 1bbc C41B0018 		.word	TICK1+MAPOFFSET
 3814 1bc0 52F804FB 		_UNNEST	// yes, push code address
 3815 1bc4 FFF7FABC 	TICK1:	B.W	ABORT	// no, error
 3816              	
 3817              	//    ALLOT	( n -- )
 3818              	// 	Allocate n bytes to the ram area.
 3819              	
 3820 1bc8 A81B0018 		.word	_TICK+MAPOFFSET
 3821 1bcc 05       	_ALLOT:	.byte  5
 3822 1bcd 414C4C4F 		.ascii "ALLOT"
 3822      54
 3823 1bd2 00BF     		.p2align 2 	
 3824              	ALLOT:
 3825 1bd4 42F804ED 		_NEST
 3826 1bd8 FEF7B4FD 		BL	CPP
 3827 1bdc FEF7E8FC 		BL	PSTOR
 3828 1be0 52F804FB 		_UNNEST			// adjust code pointer
 3829              	
 3830              	//    ,	   ( w -- )
 3831              	// 	Compile an integer into the code dictionary.
 3832              	
 3833 1be4 CC1B0018 		.word	_ALLOT+MAPOFFSET
 3834 1be8 012C     	_COMMA:	.byte  1,','
 3835 1bea 00BF     		.p2align 2 	
 3836              	COMMA:
 3837 1bec 42F804ED 		_NEST
 3838 1bf0 FEF70EFF 		BL	HERE
 3839 1bf4 FEF750FB 		BL	DUPP
 3840 1bf8 FEF700FC 		BL	CELLP	// cell boundary
 3841 1bfc FEF7A2FD 		BL	CPP
 3842 1c00 FEF7FCFA 		BL	STORE
 3843 1c04 FEF7FAFA 		BL	STORE
 3844 1c08 52F804FB 		_UNNEST	// adjust code pointer, compile
 3845              		.p2align 2 
 3846              	//    [COMPILE]   ( -- //  string> )
 3847              	// 	Compile the next immediate word into code dictionary.
 3848              	
ARM GAS  stm32eforth.s 			page 73


 3849 1c0c E81B0018 		.word	_COMMA+MAPOFFSET
 3850 1c10 89       	_BCOMP:	.byte  IMEDD+9
 3851 1c11 5B434F4D 		.ascii "[COMPILE]"
 3851      50494C45 
 3851      5D
 3852 1c1a 00BF     		.p2align 2 	
 3853              	BCOMP:
 3854 1c1c 42F804ED 		_NEST
 3855 1c20 FFF7C4FF 		BL	TICK
 3856 1c24 FFF7E2FF 		BL	COMMA
 3857 1c28 52F804FB 		_UNNEST
 3858              	
 3859              	//    COMPILE	( -- )
 3860              	// 	Compile the next address in colon list to code dictionary.
 3861              	
 3862 1c2c 101C0018 		.word	_BCOMP+MAPOFFSET
 3863 1c30 47       	_COMPI:	.byte  COMPO+7
 3864 1c31 434F4D50 		.ascii "COMPILE"
 3864      494C45
 3865              		.p2align 2 	
 3866              	COMPI:
 3867 1c38 42F804ED 		_NEST
 3868 1c3c FEF7FEFA 		BL	RFROM
 3869 1c40 25F00105 		BIC	R5,R5,#1
 3870 1c44 FEF728FB 		BL	DUPP
 3871 1c48 FEF7E2FA 		BL	AT
 3872 1c4c 00F013FA 		BL	CALLC			// compile BL instruction
 3873 1c50 FEF7D4FB 		BL	CELLP
 3874 1c54 45F00105 		ORR	R5,R5,#1
 3875 1c58 FEF702FB 		BL	TOR
 3876 1c5c 52F804FB 		_UNNEST			// adjust return address
 3877              	
 3878              	//    LITERAL	( w -- )
 3879              	// 	Compile tos to code dictionary as an integer literal.
 3880              	
 3881 1c60 301C0018 		.word	_COMPI+MAPOFFSET
 3882 1c64 87       	_LITER:	.byte  IMEDD+7
 3883 1c65 4C495445 		.ascii "LITERAL"
 3883      52414C
 3884              		.p2align 2 	
 3885              	LITER:
 3886 1c6c 42F804ED 		_NEST
 3887 1c70 FFF7E2FF 		BL	COMPI
 3888 1c74 7E010018 		.word	DOLIT+MAPOFFSET
 3889 1c78 FFF7B8FF 		BL	COMMA
 3890 1c7c 52F804FB 		_UNNEST
 3891              	
 3892              	//    $,"	( -- )
 3893              	// 	Compile a literal string up to next " .
 3894              	
 3895              	// 	.word	_LITER+MAPOFFSET
 3896              	// _STRCQ	.byte  3
 3897              	// 	.ascii "$$,"""
 3898              	// 	.p2align 2 	
 3899              	STRCQ:
 3900 1c80 42F804ED 		_NEST
 3901 1c84 FEF77BFA 		_DOLIT
ARM GAS  stm32eforth.s 			page 74


 3902 1c88 FCFFFFFF 		.word	-4
 3903 1c8c FEF75AFD 		BL	CPP
 3904 1c90 FEF78EFC 		BL	PSTOR
 3905 1c94 FEF773FA 		_DOLIT
 3906 1c98 22000000 		.word	'\"'
 3907 1c9c FFF7FCFA 		BL	WORDD			// move word to code dictionary
 3908 1ca0 FEF7AAFC 		BL	COUNT
 3909 1ca4 FEF75CFB 		BL	PLUS
 3910 1ca8 FEF75EFE 		BL	ALGND			// calculate aligned end of string
 3911 1cac FEF74AFD 		BL	CPP
 3912 1cb0 FEF7A4FA 		BL	STORE
 3913 1cb4 52F804FB 		_UNNEST 			// adjust the code pointer
 3914              	
 3915              	// **************************************************************************
 3916              	//  Structures
 3917              	
 3918              	//    FOR	 ( -- a )
 3919              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3920              	
 3921 1cb8 641C0018 		.word	_LITER+MAPOFFSET
 3922 1cbc C3       	_FOR:	.byte  COMPO+IMEDD+3
 3923 1cbd 464F52   		.ascii "FOR"
 3924              		.p2align 2 	
 3925              	FOR:
 3926 1cc0 42F804ED 		_NEST
 3927 1cc4 FFF7B8FF 		BL	COMPI
 3928 1cc8 60020018 		.word	TOR+MAPOFFSET
 3929 1ccc FEF7A0FE 		BL	HERE
 3930 1cd0 52F804FB 		_UNNEST
 3931              	
 3932              	//    BEGIN	( -- a )
 3933              	// 	Start an infinite or indefinite loop structure.
 3934              	
 3935 1cd4 BC1C0018 		.word	_FOR+MAPOFFSET
 3936 1cd8 C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 3937 1cd9 42454749 		.ascii "BEGIN"
 3937      4E
 3938 1cde 00BF     		.p2align 2 	
 3939              	BEGIN:
 3940 1ce0 42F804ED 		_NEST
 3941 1ce4 FEF794FE 		BL	HERE
 3942 1ce8 52F804FB 		_UNNEST
 3943              		.p2align 2 
 3944              	//    NEXT	( a -- )
 3945              	// 	Terminate a FOR-NEXT loop structure.
 3946              	
 3947 1cec D81C0018 		.word	_BEGIN+MAPOFFSET
 3948 1cf0 C4       	_NEXT:	.byte  COMPO+IMEDD+4
 3949 1cf1 4E455854 		.ascii "NEXT"
 3950 1cf5 0000BF   		.p2align 2 	
 3951              	NEXT:
 3952 1cf8 42F804ED 		_NEST
 3953 1cfc FFF79CFF 		BL	COMPI
 3954 1d00 A6010018 		.word	DONXT+MAPOFFSET
 3955 1d04 FFF772FF 		BL	COMMA
 3956 1d08 52F804FB 		_UNNEST
 3957              	
ARM GAS  stm32eforth.s 			page 75


 3958              	//    UNTIL	( a -- )
 3959              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3960              	
 3961 1d0c F01C0018 		.word	_NEXT+MAPOFFSET
 3962 1d10 C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3963 1d11 554E5449 		.ascii "UNTIL"
 3963      4C
 3964 1d16 00BF     		.p2align 2 	
 3965              	UNTIL:
 3966 1d18 42F804ED 		_NEST
 3967 1d1c FFF78CFF 		BL	COMPI
 3968 1d20 C4010018 		.word	QBRAN+MAPOFFSET
 3969 1d24 FFF762FF 		BL	COMMA
 3970 1d28 52F804FB 		_UNNEST
 3971              	
 3972              	//    AGAIN	( a -- )
 3973              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3974              	
 3975 1d2c 101D0018 		.word	_UNTIL+MAPOFFSET
 3976 1d30 C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3977 1d31 41474149 		.ascii "AGAIN"
 3977      4E
 3978 1d36 00BF     		.p2align 2 	
 3979              	AGAIN:
 3980 1d38 42F804ED 		_NEST
 3981 1d3c FFF77CFF 		BL	COMPI
 3982 1d40 DC010018 		.word	BRAN+MAPOFFSET
 3983 1d44 FFF752FF 		BL	COMMA
 3984 1d48 52F804FB 		_UNNEST
 3985              	
 3986              	//    IF	  ( -- A )
 3987              	// 	Begin a conditional branch structure.
 3988              	
 3989 1d4c 301D0018 		.word	_AGAIN+MAPOFFSET
 3990 1d50 C2       	_IFF:	.byte  COMPO+IMEDD+2
 3991 1d51 4946     		.ascii "IF"
 3992 1d53 00       		.p2align 2 	
 3993              	IFF:
 3994 1d54 42F804ED 		_NEST
 3995 1d58 FFF76EFF 		BL	COMPI
 3996 1d5c C4010018 		.word	QBRAN+MAPOFFSET
 3997 1d60 FEF756FE 		BL	HERE
 3998 1d64 FEF70BFA 		_DOLIT
 3999 1d68 04000000 		.word	4
 4000 1d6c FEF7EAFC 		BL	CPP
 4001 1d70 FEF71EFC 		BL	PSTOR
 4002 1d74 52F804FB 		_UNNEST
 4003              	
 4004              	//    AHEAD	( -- A )
 4005              	// 	Compile a forward branch instruction.
 4006              	
 4007 1d78 501D0018 		.word	_IFF+MAPOFFSET
 4008 1d7c C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 4009 1d7d 41484541 		.ascii "AHEAD"
 4009      44
 4010 1d82 00BF     		.p2align 2 	
 4011              	AHEAD:
ARM GAS  stm32eforth.s 			page 76


 4012 1d84 42F804ED 		_NEST
 4013 1d88 FFF756FF 		BL	COMPI
 4014 1d8c DC010018 		.word	BRAN+MAPOFFSET
 4015 1d90 FEF73EFE 		BL	HERE
 4016 1d94 FEF7F3F9 		_DOLIT
 4017 1d98 04000000 		.word	4
 4018 1d9c FEF7D2FC 		BL	CPP
 4019 1da0 FEF706FC 		BL	PSTOR
 4020 1da4 52F804FB 		_UNNEST
 4021              	
 4022              	//    REPEAT	( A a -- )
 4023              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 4024              	
 4025 1da8 7C1D0018 		.word	_AHEAD+MAPOFFSET
 4026 1dac C6       	_REPEA:	.byte  COMPO+IMEDD+6
 4027 1dad 52455045 		.ascii "REPEAT"
 4027      4154
 4028 1db3 00       		.p2align 2 	
 4029              	REPEA:
 4030 1db4 42F804ED 		_NEST
 4031 1db8 FFF7BEFF 		BL	AGAIN
 4032 1dbc FEF728FE 		BL	HERE
 4033 1dc0 FEF772FA 		BL	SWAP
 4034 1dc4 FEF71AFA 		BL	STORE
 4035 1dc8 52F804FB 		_UNNEST
 4036              	
 4037              	//    THEN	( A -- )
 4038              	// 	Terminate a conditional branch structure.
 4039              	
 4040 1dcc AC1D0018 		.word	_REPEA+MAPOFFSET
 4041 1dd0 C4       	_THENN:	.byte  COMPO+IMEDD+4
 4042 1dd1 5448454E 		.ascii "THEN"
 4043 1dd5 0000BF   		.p2align 2 	
 4044              	THENN:
 4045 1dd8 42F804ED 		_NEST
 4046 1ddc FEF718FE 		BL	HERE
 4047 1de0 FEF762FA 		BL	SWAP
 4048 1de4 FEF70AFA 		BL	STORE
 4049 1de8 52F804FB 		_UNNEST
 4050              	
 4051              	//    AFT	 ( a -- a A )
 4052              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 4053              	
 4054 1dec D01D0018 		.word	_THENN+MAPOFFSET
 4055 1df0 C3       	_AFT:	.byte  COMPO+IMEDD+3
 4056 1df1 414654   		.ascii "AFT"
 4057              		.p2align 2 	
 4058              	AFT:
 4059 1df4 42F804ED 		_NEST
 4060 1df8 FEF746FA 		BL	DROP
 4061 1dfc FFF7C2FF 		BL	AHEAD
 4062 1e00 FFF76EFF 		BL	BEGIN
 4063 1e04 FEF750FA 		BL	SWAP
 4064 1e08 52F804FB 		_UNNEST
 4065              	
 4066              	//    ELSE	( A -- A )
 4067              	// 	Start the false clause in an IF-ELSE-THEN structure.
ARM GAS  stm32eforth.s 			page 77


 4068              	
 4069 1e0c F01D0018 		.word	_AFT+MAPOFFSET
 4070 1e10 C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 4071 1e11 454C5345 		.ascii "ELSE"
 4072 1e15 0000BF   		.p2align 2 	
 4073              	ELSEE:
 4074 1e18 42F804ED 		_NEST
 4075 1e1c FFF7B2FF 		BL	AHEAD
 4076 1e20 FEF742FA 		BL	SWAP
 4077 1e24 FFF7D8FF 		BL	THENN
 4078 1e28 52F804FB 		_UNNEST
 4079              	
 4080              	//    WHILE	( a -- A a )
 4081              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 4082              	
 4083 1e2c 101E0018 		.word	_ELSEE+MAPOFFSET
 4084 1e30 C5       	_WHILE:	.byte  COMPO+IMEDD+5
 4085 1e31 5748494C 		.ascii "WHILE"
 4085      45
 4086 1e36 00BF     		.p2align 2 	
 4087              	WHILE:
 4088 1e38 42F804ED 		_NEST
 4089 1e3c FFF78AFF 		BL	IFF
 4090 1e40 FEF732FA 		BL	SWAP
 4091 1e44 52F804FB 		_UNNEST
 4092              	
 4093              	//    ABORT"	( -- //  string> )
 4094              	// 	Conditional abort with an error message.
 4095              	
 4096 1e48 301E0018 		.word	_WHILE+MAPOFFSET
 4097 1e4c 86       	_ABRTQ:	.byte  IMEDD+6
 4098 1e4d 41424F52 		.ascii "ABORT\""
 4098      5422
 4099 1e53 00       		.p2align 2 	
 4100              	ABRTQ:
 4101 1e54 42F804ED 		_NEST
 4102 1e58 FFF7EEFE 		BL	COMPI
 4103 1e5c E4150018 		.word	ABORQ+MAPOFFSET
 4104 1e60 FFF70EFF 		BL	STRCQ
 4105 1e64 52F804FB 		_UNNEST
 4106              	
 4107              	//    $"	( -- //  string> )
 4108              	// 	Compile an inlineDCB literal.
 4109              	
 4110 1e68 4C1E0018 		.word	_ABRTQ+MAPOFFSET
 4111 1e6c 82       	_STRQ:	.byte  IMEDD+2
 4112 1e6d 2422     		.byte	'$','"'
 4113 1e6f 00       		.p2align 2 	
 4114              	STRQ:
 4115 1e70 42F804ED 		_NEST
 4116 1e74 FFF7E0FE 		BL	COMPI
 4117 1e78 980F0018 		.word	STRQP+MAPOFFSET
 4118 1e7c FFF700FF 		BL	STRCQ
 4119 1e80 52F804FB 		_UNNEST
 4120              	
 4121              	//    ."	( -- //  string> )
 4122              	// 	Compile an inline word  literal to be typed out at run time.
ARM GAS  stm32eforth.s 			page 78


 4123              	
 4124 1e84 6C1E0018 		.word	_STRQ+MAPOFFSET
 4125 1e88 C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 4126 1e89 2E22     		.ascii	".\""
 4127 1e8b 00       		.p2align 2 	
 4128              	DOTQ:
 4129 1e8c 42F804ED 		_NEST
 4130 1e90 FFF7D2FE 		BL	COMPI
 4131 1e94 B40F0018 		.word	DOTQP+MAPOFFSET
 4132 1e98 FFF7F2FE 		BL	STRCQ
 4133 1e9c 52F804FB 		_UNNEST
 4134              	
 4135              	// **************************************************************************
 4136              	//  Name compiler
 4137              	
 4138              	//    ?UNIQUE	( a -- a )
 4139              	// 	Display a warning message if the word already exists.
 4140              	
 4141 1ea0 881E0018 		.word	_DOTQ+MAPOFFSET
 4142 1ea4 07       	_UNIQU:	.byte  7
 4143 1ea5 3F554E49 		.ascii "?UNIQUE"
 4143      515545
 4144              		.p2align 2 	
 4145              	UNIQU:
 4146 1eac 42F804ED 		_NEST
 4147 1eb0 FEF7F2F9 		BL	DUPP
 4148 1eb4 FFF7BCFA 		BL	NAMEQ			// ?name exists
 4149 1eb8 FEF784F9 		BL	QBRAN
 4150 1ebc D81E0018 		.word	UNIQ1+MAPOFFSET	// redefinitions are OK
 4151 1ec0 FFF778F8 		BL	DOTQP
 4152 1ec4 07       		.byte	7
 4153 1ec5 20726544 		.ascii " reDef "		// but warn the user
 4153      656620
 4154              		.p2align 2 	
 4155 1ecc FEF7F6F9 		BL	OVER
 4156 1ed0 FEF792FB 		BL	COUNT
 4157 1ed4 FFF71EF8 		BL	TYPEE			// just in case its not planned
 4158              	UNIQ1:
 4159 1ed8 FEF7D6F9 		BL	DROP
 4160 1edc 52F804FB 		_UNNEST
 4161              	
 4162              	//    $,n	 ( na -- )
 4163              	// 	Build a new dictionary name using the data at na.
 4164              	
 4165              	// 	.word	_UNIQU+MAPOFFSET
 4166              	// _SNAME	.byte  3
 4167              	// 	.ascii "$,n"
 4168              	// 	.p2align 2 	
 4169              	SNAME:
 4170 1ee0 42F804ED 		_NEST
 4171 1ee4 FEF7D8F9 		BL	DUPP			//  na na
 4172 1ee8 FEF7A2F9 		BL	CAT			//  ?null input
 4173 1eec FEF76AF9 		BL	QBRAN
 4174 1ef0 281F0018 		.word	SNAM1+MAPOFFSET
 4175 1ef4 FFF7DAFF 		BL	UNIQU			//  na
 4176 1ef8 FEF738FC 		BL	LAST			//  na last
 4177 1efc FEF788F9 		BL	AT			//  na la
ARM GAS  stm32eforth.s 			page 79


 4178 1f00 FFF774FE 		BL	COMMA			//  na
 4179 1f04 FEF7C8F9 		BL	DUPP			//  na na
 4180 1f08 FEF730FC 		BL	LAST			//  na na last
 4181 1f0c FEF776F9 		BL	STORE			//  na , save na for vocabulary link
 4182 1f10 FEF772FB 		BL	COUNT			//  na+1 count
 4183 1f14 FEF724FA 		BL	PLUS			//  na+1+count
 4184 1f18 FEF726FD 		BL	ALGND			//  word boundary
 4185 1f1c FEF712FC 		BL	CPP
 4186 1f20 FEF76CF9 		BL	STORE			//  top of dictionary now
 4187 1f24 52F804FB 		_UNNEST
 4188              	SNAM1:
 4189 1f28 FFF736F8 		BL	STRQP
 4190 1f2c 07       		.byte	7
 4191 1f2d 206E616D 		.ascii " name? "
 4191      653F20
 4192 1f34 FFF742BB 		B.W	ABORT
 4193              	
 4194              	//    $COMPILE	( a -- )
 4195              	// 	Compile next word to code dictionary as a token or literal.
 4196              	
 4197 1f38 A41E0018 		.word	_UNIQU+MAPOFFSET
 4198 1f3c 07       	_SCOMP:	.byte  7
 4199 1f3d 24434F4D 		.ascii "$COMPILE"
 4199      50494C45 
 4200 1f45 0000BF   		.p2align 2 	
 4201              	SCOMP:
 4202 1f48 42F804ED 		_NEST
 4203 1f4c FFF770FA 		BL	NAMEQ
 4204 1f50 FEF78EFA 		BL	QDUP	// defined?
 4205 1f54 FEF736F9 		BL	QBRAN
 4206 1f58 841F0018 		.word	SCOM2+MAPOFFSET
 4207 1f5c FEF758F9 		BL	AT
 4208 1f60 FEF70DF9 		_DOLIT
 4209 1f64 80000000 		.word	IMEDD
 4210 1f68 FEF7BAF9 		BL	ANDD	// immediate?
 4211 1f6c FEF72AF9 		BL	QBRAN
 4212 1f70 7C1F0018 		.word	SCOM1+MAPOFFSET
 4213 1f74 FEF712F9 		BL	EXECU
 4214 1f78 52F804FB 		_UNNEST			// it's immediate, execute
 4215              	SCOM1:
 4216 1f7c 00F07BF8 		BL	CALLC			// it's not immediate, compile
 4217 1f80 52F804FB 		_UNNEST	
 4218              	SCOM2:
 4219 1f84 FEF7F4FE 		BL	NUMBQ
 4220 1f88 FEF71CF9 		BL	QBRAN
 4221 1f8c 981F0018 		.word	SCOM3+MAPOFFSET
 4222 1f90 FFF76CFE 		BL	LITER
 4223 1f94 52F804FB 		_UNNEST			// compile number as integer
 4224              	SCOM3: // compilation abort 
 4225 1f98 00F002F8 		BL COLON_ABORT 
 4226 1f9c FFF70EBB 		B.W	ABORT			// error
 4227              	
 4228              	// before aborting a compilation 
 4229              	// reset HERE and LAST
 4230              	// to previous values.  
 4231              	COLON_ABORT:
 4232 1fa0 42F804ED 		_NEST 
ARM GAS  stm32eforth.s 			page 80


 4233 1fa4 FEF7E2FB 		BL LAST 
 4234 1fa8 FEF732F9 		BL AT 
 4235 1fac FEF72EFA 		BL CELLM 
 4236 1fb0 FEF772F9 		BL DUPP 
 4237 1fb4 FEF7C6FB 		BL CPP  
 4238 1fb8 FEF720F9 		BL STORE 
 4239 1fbc FEF728F9 		BL AT 
 4240 1fc0 FEF7D4FB 		BL LAST 
 4241 1fc4 FEF71AF9 		BL STORE 
 4242 1fc8 52F804FB 		_UNNEST 
 4243              	
 4244              	//    OVERT	( -- )
 4245              	// 	Link a new word into the current vocabulary.
 4246              	
 4247 1fcc 3C1F0018 		.word	_SCOMP+MAPOFFSET
 4248 1fd0 05       	_OVERT:	.byte  5
 4249 1fd1 4F564552 		.ascii "OVERT"
 4249      54
 4250 1fd6 00BF     		.p2align 2 	
 4251              	OVERT:
 4252 1fd8 42F804ED 		_NEST
 4253 1fdc FEF7C6FB 		BL	LAST
 4254 1fe0 FEF716F9 		BL	AT
 4255 1fe4 FEF7A4FB 		BL	CNTXT
 4256 1fe8 FEF708F9 		BL	STORE
 4257 1fec 52F804FB 		_UNNEST
 4258              	
 4259              	//    ; 	   ( -- )
 4260              	// 	Terminate a colon definition.
 4261              	
 4262 1ff0 D01F0018 		.word	_OVERT+MAPOFFSET
 4263 1ff4 C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 4264 1ff5 3B       		.ascii ";"
 4265 1ff6 00BF     		.p2align 2 	
 4266              	SEMIS:
 4267 1ff8 42F804ED 		_NEST
 4268 1ffc FEF7BFF8 		_DOLIT
 4269 2000 52F804FB 		_UNNEST
 4270 2004 FFF7F2FD 		BL	COMMA
 4271 2008 FFF732FB 		BL	LBRAC
 4272 200c FFF7E4FF 		BL	OVERT
 4273 2010 52F804FB 		_UNNEST
 4274              	
 4275              	//    ]	   ( -- )
 4276              	// 	Start compiling the words in the input stream.
 4277              	
 4278 2014 F41F0018 		.word	_SEMIS+MAPOFFSET
 4279 2018 01       	_RBRAC:	.byte  1
 4280 2019 5D       		.ascii "]"
 4281 201a 00BF     		.p2align 2 	
 4282              	RBRAC:
 4283 201c 42F804ED 		_NEST
 4284 2020 FEF7ADF8 		_DOLIT
 4285 2024 481F0018 		.word	SCOMP+MAPOFFSET
 4286 2028 FEF76CFB 		BL	TEVAL
 4287 202c FEF7E6F8 		BL	STORE
 4288 2030 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 81


 4289              	
 4290              	
 4291              	//    COMPILE_BLW	( ca -- asm_code )
 4292              	// 	Assemble a branch-link long instruction to ca.
 4293              	// ref: ARM-v7M architecture reference, section A7.7.18 
 4294              	COMPILE_BLW:
 4295 2034 4FEA6505 		ASR R5,R5,#1 
 4296 2038 4FF45044 		_MOV32 R4,0xF000D000 
 4296      CFF20004 
 4297 2040 65F30A04 		BFI R4,R5,#0,#11
 4298 2044 4FEAD525 		LSR R5,#11
 4299 2048 65F31944 		BFI R4,R5,#16,#10
 4300 204c 4FEAA525 		ASR R5,#10
 4301 2050 65F3CB24 		BFI R4,R5,#11,#1
 4302 2054 4FEA6505 		ASR R5,#1
 4303 2058 65F34D34 		BFI R4,R5,#13,#1
 4304 205c 4FEA6505 		ASR R5,#1
 4305 2060 65F39A64 		BFI R4,R5,#26,#1
 4306 2064 14F0806F 		TST R4,#(1<<26)
 4307 2068 02D1     		BNE 1f
 4308 206a 00BF     		NOP 
 4309 206c 84F42054 		EOR R4,R4,#(5<<11)
 4310 2070 4FEA3445 	1:  ROR R5,R4,#16 
 4311 2074 7047     		_NEXT 
 4312              	
 4313              	// 	.word	_RBRAC+MAPOFFSET
 4314              	// _CALLC	.byte  5
 4315              	// 	.ascii "call,"
 4316              	// 	.p2align 2 	
 4317              	CALLC:
 4318 2076 42F804ED 		_NEST
 4319 207a 25F00105 		BIC R5,R5,#1 
 4320 207e FEF7C7FC 		BL HERE 
 4321 2082 FEF775F9 		BL SUBB 
 4322 2086 A5F10405 		SUB R5,R5,#4 
 4323 208a FFF7D3FF 		BL COMPILE_BLW 
 4324 208e FFF7ADFD 		BL	COMMA			//  assemble BL.W instruction
 4325 2092 52F804FB 		_UNNEST
 4326              	
 4327              		.p2align 
 4328              	// 	:	( -- //  string> )
 4329              	// 	Start a new colon definition using next word as its name.
 4330              	
 4331 2096 18200018 		.word	_RBRAC+MAPOFFSET
 4332 209a 01       	_COLON:	.byte  1
 4333 209b 3A       		.ascii ":"
 4334              		.p2align 2 	
 4335              	COLON:
 4336 209c 42F804ED 		_NEST
 4337 20a0 FFF70CF9 		BL	TOKEN
 4338 20a4 FFF71CFF 		BL	SNAME
 4339 20a8 FEF769F8 		_DOLIT
 4340 20ac 42F804ED 		_NEST
 4341 20b0 FFF79CFD 		BL	COMMA
 4342 20b4 FFF7B2FF 		BL	RBRAC
 4343 20b8 52F804FB 		_UNNEST
 4344              	
ARM GAS  stm32eforth.s 			page 82


 4345              	//    IMMEDIATE   ( -- )
 4346              	// 	Make the last compiled word an immediate word.
 4347              	
 4348 20bc 9A200018 		.word	_COLON+MAPOFFSET
 4349 20c0 09       	_IMMED:	.byte  9
 4350 20c1 494D4D45 		.ascii "IMMEDIATE"
 4350      44494154 
 4350      45
 4351 20ca 00BF     		.p2align 2 	
 4352              	IMMED:
 4353 20cc 42F804ED 		_NEST
 4354 20d0 FEF755F8 		_DOLIT
 4355 20d4 80000000 		.word	IMEDD
 4356 20d8 FEF748FB 		BL	LAST
 4357 20dc FEF798F8 		BL	AT
 4358 20e0 FEF796F8 		BL	AT
 4359 20e4 FEF706F9 		BL	ORR
 4360 20e8 FEF740FB 		BL	LAST
 4361 20ec FEF790F8 		BL	AT
 4362 20f0 FEF784F8 		BL	STORE
 4363 20f4 52F804FB 		_UNNEST
 4364              	
 4365              	// **************************************************************************
 4366              	//  Defining words
 4367              	
 4368              	//    CONSTANT	( u -- //  string> )
 4369              	// 	Compile a new constant.
 4370              	
 4371 20f8 C0200018 		.word	_IMMED+MAPOFFSET
 4372 20fc 08       	_CONST:	.byte  8
 4373 20fd 434F4E53 		.ascii "CONSTANT"
 4373      54414E54 
 4374 2105 0000BF   		.p2align 2 	
 4375              	CONST:
 4376 2108 42F804ED 		_NEST
 4377 210c FFF7D6F8 		BL	TOKEN
 4378 2110 FFF7E6FE 		BL	SNAME
 4379 2114 FFF760FF 		BL	OVERT
 4380 2118 FEF731F8 		_DOLIT
 4381 211c 42F804ED 		_NEST
 4382 2120 FFF764FD 		BL	COMMA
 4383 2124 FEF72BF8 		_DOLIT
 4384 2128 2C060018 		.word	DOCON+MAPOFFSET
 4385 212c FFF7A3FF 		BL	CALLC
 4386 2130 FFF75CFD 		BL	COMMA
 4387 2134 52F804FB 		_UNNEST
 4388              	
 4389              		.p2align 2 
 4390              	// doDOES> ( -- a )
 4391              	// runtime action of DOES> 
 4392              	// leave parameter field address on stack 
 4393              	DODOES:
 4394 2138 42F804ED 		_NEST 
 4395 213c FEF788F8 		BL RAT 
 4396 2140 FEF744F9 		BL ONEM 
 4397 2144 FEF75AF9 		BL	CELLP
 4398 2148 FEF710FB 		BL LAST 
ARM GAS  stm32eforth.s 			page 83


 4399 214c FEF760F8 		BL AT
 4400 2150 FFF7C2F8 		BL NAMET 
 4401 2154 FEF752F9 		BL CELLP 
 4402 2158 FEF79EF8 		BL DUPP
 4403 215c FEF780F8 		BL TOR 
 4404 2160 FEF706F9 		BL SUBB 
 4405 2164 A5F10405 		SUB R5,R5,#4
 4406 2168 FFF764FF 		BL	COMPILE_BLW
 4407 216c FEF766F8 		BL RFROM
 4408 2170 FEF744F8 		BL STORE  
 4409 2174 52F804FB 		_UNNEST 
 4410              	
 4411              		
 4412              	
 4413              		.p2align 2
 4414              	//  DOES> ( -- )
 4415              	//  compile time action 
 4416 2178 FC200000 		.word _CONST   
 4417 217c C5       	_DOES: .byte IMEDD+COMPO+5 
 4418 217d 444F4553 		.ascii "DOES>"
 4418      3E
 4419 2182 00BF     		.p2align 2
 4420              	DOES: 
 4421 2184 42F804ED 		_NEST 
 4422 2188 FDF7F9FF 		_DOLIT 
 4423 218c 38210018 		.word DODOES + MAPOFFSET
 4424 2190 FFF771FF 		BL CALLC 
 4425 2194 FDF7F3FF 		_DOLIT	
 4426 2198 52F804FB 		_UNNEST 
 4427 219c FFF726FD 		BL	COMMA  
 4428 21a0 FDF7EDFF 		_DOLIT 
 4429 21a4 42F804ED 		_NEST 
 4430 21a8 FFF720FD 		BL COMMA 
 4431 21ac FDF7E7FF 		_DOLIT 
 4432 21b0 3C020018 		.word RFROM+MAPOFFSET  
 4433 21b4 FFF75FFF 		BL	CALLC
 4434 21b8 FDF7E1FF 		_DOLIT 
 4435 21bc CC030018 		.word ONEM+MAPOFFSET 
 4436 21c0 FFF759FF 		BL CALLC 
 4437 21c4 52F804FB 		_UNNEST 
 4438              	
 4439              	
 4440              	//    CREATE	( -- //  string> )
 4441              	// 	Compile a new array entry without allocating code space.
 4442              	
 4443 21c8 7C210018 		.word	_DOES+MAPOFFSET
 4444 21cc 06       	_CREAT:	.byte  6
 4445 21cd 43524541 		.ascii "CREATE"
 4445      5445
 4446 21d3 00       		.p2align 2 	
 4447              	CREAT:
 4448 21d4 42F804ED 		_NEST
 4449 21d8 FFF770F8 		BL	TOKEN
 4450 21dc FFF780FE 		BL	SNAME
 4451 21e0 FFF7FAFE 		BL	OVERT
 4452 21e4 FDF7CBFF 		_DOLIT
 4453 21e8 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 84


 4454 21ec FFF7FEFC 		BL	COMMA
 4455 21f0 FDF7C5FF 		_DOLIT
 4456 21f4 20060018 		.word	DOVAR+MAPOFFSET
 4457 21f8 FFF73DFF 		BL	CALLC
 4458 21fc 52F804FB 		_UNNEST
 4459              	
 4460              	//    VARIABLE	( -- //  string> )
 4461              	// 	Compile a new variable initialized to 0.
 4462              	
 4463 2200 CC210018 		.word	_CREAT+MAPOFFSET
 4464 2204 08       	_VARIA:	.byte  8
 4465 2205 56415249 		.ascii "VARIABLE"
 4465      41424C45 
 4466 220d 0000BF   		.p2align 2 	
 4467              	VARIA:
 4468 2210 42F804ED 		_NEST
 4469 2214 FFF7DEFF 		BL	CREAT
 4470 2218 FDF7B1FF 		_DOLIT
 4471 221c 00000000 		.word	0
 4472 2220 FFF7E4FC 		BL	COMMA
 4473 2224 52F804FB 		_UNNEST
 4474              	
 4475              	/*************
 4476              	   Tools
 4477              	*************/
 4478              	
 4479              	//    dm+	 ( a u -- a )
 4480              	// 	Dump u bytes from , leaving a+u on the stack.
 4481              	
 4482              	// 	.word	_VARIA+MAPOFFSET
 4483              	// _DMP	.byte  3
 4484              	// 	.ascii "dm+"
 4485              	// 	.p2align 2 	
 4486              	DMP:
 4487 2228 42F804ED 		_NEST
 4488 222c FEF746F8 		BL	OVER
 4489 2230 FDF7A5FF 		_DOLIT
 4490 2234 04000000 		.word	4
 4491 2238 FEF7DEFE 		BL	UDOTR			// display address
 4492 223c FEF742FE 		BL	SPACE
 4493 2240 FEF70EF8 		BL	TOR			// start count down loop
 4494 2244 00F00CB8 		B.W	PDUM2			// skip first pass
 4495              	PDUM1:
 4496 2248 FEF726F8 	  BL	DUPP
 4497 224c FDF7F0FF 		BL	CAT
 4498 2250 FDF795FF 		_DOLIT
 4499 2254 03000000 		.word	3
 4500 2258 FEF7CEFE 		BL	UDOTR			// display numeric data
 4501 225c FEF7AEF8 		BL	ONEP			// increment address
 4502              	PDUM2:
 4503 2260 FDF7A1FF 	  BL	DONXT
 4504 2264 48220018 		.word	PDUM1+MAPOFFSET	// loop till done
 4505 2268 52F804FB 		_UNNEST
 4506              		.p2align 2 
 4507              	//    DUMP	( a u -- )
 4508              	// 	Dump u bytes from a, in a formatted manner.
 4509              	
ARM GAS  stm32eforth.s 			page 85


 4510 226c 04220018 		.word	_VARIA+MAPOFFSET
 4511 2270 04       	_DUMP:	.byte  4
 4512 2271 44554D50 		.ascii "DUMP"
 4513 2275 0000BF   		.p2align 2 	
 4514              	DUMP:
 4515 2278 42F804ED 		_NEST
 4516 227c FEF714FA 		BL	BASE
 4517 2280 FDF7C6FF 		BL	AT
 4518 2284 FDF7ECFF 		BL	TOR
 4519 2288 FEF71AFD 		BL	HEX			// save radix,set hex
 4520 228c FDF777FF 		_DOLIT
 4521 2290 10000000 		.word	16
 4522 2294 FEF738FB 		BL	SLASH			// change count to lines
 4523 2298 FDF7E2FF 		BL	TOR
 4524 229c 00F014B8 		B.W	DUMP4			// start count down loop
 4525              	DUMP1:
 4526 22a0 FEF750FE 	  BL	CR
 4527 22a4 FDF76BFF 		_DOLIT
 4528 22a8 10000000 		.word	16
 4529 22ac FEF7FEF8 		BL	DDUP
 4530 22b0 FFF7BAFF 		BL	DMP			// display numeric
 4531 22b4 FEF7E6F8 		BL	ROT
 4532 22b8 FEF7E4F8 		BL	ROT
 4533 22bc FEF702FE 		BL	SPACE
 4534 22c0 FEF700FE 		BL	SPACE
 4535 22c4 FEF726FE 		BL	TYPEE			// display printable characters
 4536              	DUMP4:
 4537 22c8 FDF76DFF 	  BL	DONXT
 4538 22cc A0220018 		.word	DUMP1+MAPOFFSET	// loop till done
 4539              	DUMP3:
 4540 22d0 FDF7DAFF 	  BL	DROP
 4541 22d4 FDF7B2FF 		BL	RFROM
 4542 22d8 FEF7E6F9 		BL	BASE
 4543 22dc FDF78EFF 		BL	STORE			// restore radix
 4544 22e0 52F804FB 		_UNNEST
 4545              	
 4546              	//    .S	  ( ... -- ... )
 4547              	// 	Display the contents of the data stack.
 4548              	
 4549 22e4 70220018 		.word	_DUMP+MAPOFFSET
 4550              	_DOTS:
 4551 22e8 02       		.byte  2
 4552 22e9 2E53     		.ascii ".S"
 4553 22eb 00       		.p2align 2 	
 4554              	DOTS:
 4555 22ec 42F804ED 		_NEST
 4556 22f0 FEF7E8FD 		BL	SPACE
 4557 22f4 FEF76AFB 		BL	DEPTH			// stack depth
 4558 22f8 FDF7B2FF 		BL	TOR			// start count down loop
 4559 22fc 00F006B8 		B.W	DOTS2			// skip first pass
 4560              	DOTS1:
 4561 2300 FDF7A6FF 		BL	RAT
 4562 2304 FEF770FB 		BL	PICK
 4563 2308 FEF7A2FE 		BL	DOT			// index stack, display contents
 4564              	DOTS2:
 4565 230c FDF74BFF 		BL	DONXT
 4566 2310 00230018 		.word	DOTS1+MAPOFFSET	// loop till done
ARM GAS  stm32eforth.s 			page 86


 4567 2314 FEF7D6FD 		BL	SPACE
 4568 2318 52F804FB 		_UNNEST
 4569              	
 4570              	//    >NAME	( ca -- na | F )
 4571              	// 	Convert code address to a name address.
 4572              	
 4573 231c E8220018 		.word	_DOTS+MAPOFFSET
 4574 2320 05       	_TNAME:	.byte  5
 4575 2321 3E4E414D 		.ascii ">NAME"
 4575      45
 4576 2326 00BF     		.p2align 2 	
 4577              	TNAME:
 4578 2328 42F804ED 		_NEST
 4579 232c FDF798FF 		BL	TOR			//  
 4580 2330 FEF7FEF9 		BL	CNTXT			//  va
 4581 2334 FDF76CFF 		BL	AT			//  na
 4582              	TNAM1:
 4583 2338 FDF7AEFF 		BL	DUPP			//  na na
 4584 233c FDF742FF 		BL	QBRAN
 4585 2340 68230018 		.word	TNAM2+MAPOFFSET	//  vocabulary end, no match
 4586 2344 FDF7A8FF 		BL	DUPP			//  na na
 4587 2348 FEF7C6FF 		BL	NAMET			//  na ca
 4588 234c FDF780FF 		BL	RAT			//  na ca code
 4589 2350 FDF7DAFF 		BL	XORR			//  na f --
 4590 2354 FDF736FF 		BL	QBRAN
 4591 2358 68230018 		.word	TNAM2+MAPOFFSET
 4592 235c FEF756F8 		BL	CELLM			//  la 
 4593 2360 FDF756FF 		BL	AT			//  next_na
 4594 2364 FFF7E8BF 		B.W	TNAM1
 4595              	TNAM2:	
 4596 2368 FDF768FF 		BL	RFROM
 4597 236c FDF78CFF 		BL	DROP			//  0|na --
 4598 2370 52F804FB 		_UNNEST			// 0
 4599              	
 4600              	//    .ID	 ( na -- )
 4601              	// 	Display the name at address.
 4602              	
 4603 2374 20230018 		.word	_TNAME+MAPOFFSET
 4604 2378 03       	_DOTID:	.byte  3
 4605 2379 2E4944   		.ascii ".ID"
 4606              		.p2align 2 	
 4607              	DOTID:
 4608 237c 42F804ED 		_NEST
 4609 2380 FEF776F8 		BL	QDUP			// if zero no name
 4610 2384 FDF71EFF 		BL	QBRAN
 4611 2388 A4230018 		.word	DOTI1+MAPOFFSET
 4612 238c FEF734F9 		BL	COUNT
 4613 2390 FDF7F5FE 		_DOLIT
 4614 2394 1F000000 		.word	0x1F
 4615 2398 FDF7A2FF 		BL	ANDD			// mask lexicon bits
 4616 239c FEF7BAFD 		BL	TYPEE
 4617 23a0 52F804FB 		_UNNEST			// display name string
 4618              	DOTI1:
 4619 23a4 FEF706FE 		BL	DOTQP
 4620 23a8 09       		.byte	9
 4621 23a9 207B6E6F 		.ascii " {noName}"
 4621      4E616D65 
ARM GAS  stm32eforth.s 			page 87


 4621      7D
 4622 23b2 00BF     		.p2align 2 	
 4623 23b4 52F804FB 		_UNNEST
 4624              	
 4625              		.equ WANT_SEE, 1  // set to 1 if you want SEE 
 4626              		.if WANT_SEE 
 4627              	
 4628              	// .CA ( ca -- ca )
 4629              	// print code field address 
 4630              	DOTCA:
 4631 23b8 42F804ED 		_NEST 
 4632 23bc FDF76CFF 		BL  DUPP
 4633 23c0 FEF734FE 		BL UDOT 
 4634 23c4 FDF7DBFE 		_DOLIT 
 4635 23c8 02000000 		.word 2 
 4636 23cc FEF788FD 		BL SPACS 
 4637 23d0 52F804FB 		_UNNEST 
 4638              	
 4639              	// CODE_ABORT ( ca -- f )
 4640              	// abort if code definition
 4641              	CODE_ABORT:
 4642 23d4 42F804ED 		_NEST 
 4643 23d8 FFF7EEFF 		BL DOTCA  
 4644 23dc FDF75CFF 		BL DUPP 
 4645 23e0 FDF716FF 		BL AT 
 4646 23e4 FDF7CBFE 		_DOLIT 
 4647 23e8 42F804ED 		.word 0xed04f842 // _NEST code 
 4648 23ec FDF78CFF 		BL XORR 
 4649 23f0 FDF7E8FE 		BL QBRAN 
 4650 23f4 0C240018 		.word 1f+MAPOFFSET 
 4651 23f8 FEF774FC 		BL DECIM
 4652 23fc FFF7F2F8 		BL ABORQ 
 4653 2400 09       		.byte 9 
 4654 2401 636F6465 		.ascii "code word"
 4654      20776F72 
 4654      64
 4655 240a 00BF     		.p2align 2
 4656              	1:	 
 4657 240c FEF7D2FD 		BL DOTQP 
 4658 2410 04       		.byte 4
 4659 2411 6E657374 		.ascii "nest"
 4660 2415 0000BF   		.p2align 2 
 4661 2418 FEF794FD 		BL CR 
 4662 241c 52F804FB 		_UNNEST 
 4663              	
 4664              	
 4665              	// UNNEST? ( ca -- ca f )
 4666              	// check if UNNEST 
 4667              	UNNESTQ:
 4668 2420 42F804ED 		_NEST 
 4669 2424 FDF738FF 		BL DUPP 
 4670 2428 FDF7F2FE 		BL AT 
 4671 242c FDF7A7FE 		_DOLIT 
 4672 2430 52F804FB 		.word 0xfb04f852 
 4673 2434 FEF778F8 		BL EQUAL
 4674 2438 FDF72EFF 		BL DUPP 
 4675 243c FDF7C2FE 		BL QBRAN
ARM GAS  stm32eforth.s 			page 88


 4676 2440 54240018 		.word 1f+MAPOFFSET  
 4677 2444 FEF7B6FD 		BL DOTQP
 4678 2448 06       		.byte 6
 4679 2449 756E6E65 		.ascii "unnest" 
 4679      7374
 4680 244f 00       		.p2align 2
 4681 2450 FEF778FD 		BL CR  
 4682 2454 52F804FB 	1:	_UNNEST 
 4683              	
 4684              	
 4685              	// search no name routine from code address. 
 4686              	NONAMEQ: // ( ca -- na|ca f )
 4687 2458 42F804ED 		_NEST 
 4688 245c FDF78FFE 		_DOLIT 
 4689 2460 00000000 		.word 0 
 4690 2464 FDF720FF 		BL SWAP 
 4691 2468 FDF789FE 		_DOLIT 
 4692 246c 00000000 		.word NONAME_SUB
 4693 2470 FDF7F6FE 		BL TOR   
 4694 2474 FDF710FF 	0:	BL DUPP // ( 0 ca ca -- )  
 4695 2478 FDF7EAFE 		BL RAT  
 4696 247c FDF7C8FE 		BL AT 
 4697 2480 FDF7F6FF 		BL QDUP 
 4698 2484 FDF79EFE 		BL QBRAN 
 4699 2488 E0240018 		.word 2f+MAPOFFSET 
 4700 248c FDF73CFF 		BL XORR 
 4701 2490 FDF798FE 		BL QBRAN 
 4702 2494 AC240018 		.word 1f+MAPOFFSET 
 4703 2498 FDF7D0FE 		BL RFROM 
 4704 249c FDF7AEFF 		BL CELLP
 4705 24a0 FDF7DEFE 		BL TOR  
 4706 24a4 FDF79AFE 		BL BRAN 
 4707 24a8 74240018 		.word 0b+MAPOFFSET 
 4708 24ac FDF7C6FE 	1:  BL RFROM 
 4709 24b0 FDF765FE 		_DOLIT 
 4710 24b4 00000000 		.word NONAME_SUB
 4711 24b8 FDF75AFF 		BL SUBB
 4712 24bc FDF75FFE 		_DOLIT 
 4713 24c0 3C000000 		.word ANONYMOUS 
 4714 24c4 FDF74CFF 		BL	PLUS
 4715 24c8 FDF7A2FE 		BL	AT   
 4716 24cc FDF7ECFE 		BL	SWAP 
 4717 24d0 FDF7DAFE 		BL	DROP
 4718 24d4 FDF7E8FE 		BL	SWAP 
 4719 24d8 FEF700F8 		BL	INVER 
 4720 24dc 52F804FB 		_UNNEST 
 4721 24e0 FDF7D2FE 	2:	BL DROP 
 4722 24e4 FDF7E0FE 		BL SWAP 
 4723 24e8 FDF7A8FE 		BL RFROM
 4724 24ec FDF7CCFE 		BL DROP 
 4725 24f0 52F804FB 		_UNNEST 
 4726              	
 4727              		.p2align 2 
 4728              	
 4729              	
 4730              	// print noname routine label ( n -- )
 4731              	// n is offset in ANONYMOUS array 
ARM GAS  stm32eforth.s 			page 89


 4732              	DOTNONAME:
 4733 24f4 42F804ED 		_NEST 
 4734 24f8 41F8045D 		_PUSH 
 4735 24fc FDF73FFE 		_DOLIT 
 4736 2500 3C000000 		.word ANONYMOUS 
 4737 2504 FDF72CFF 		BL PLUS 
 4738 2508 FDF782FE 		BL AT 
 4739 250c FEF702FD 		BL TYPEE 
 4740 2510 52F804FB 		_UNNEST 
 4741              	
 4742              	// IS_BLW ( code -- f )
 4743              	// check if it is a BL instruction 
 4744              	IS_BLW:
 4745 2514 42F804ED 		_NEST 
 4746 2518 FDF731FE 		_DOLIT 
 4747 251c 00F000D0 		.word 0xD000F000
 4748 2520 FDF7BAFE 		BL DUPP 
 4749 2524 FDF79CFE 		BL TOR 
 4750 2528 FDF7DAFE 		BL ANDD
 4751 252c FDF786FE 		BL RFROM  
 4752 2530 FDF7FAFF 		BL EQUAL   
 4753 2534 52F804FB 		_UNNEST 
 4754              	
 4755              	//    SEE	 ( -- //  string> )
 4756              	// 	A simple decompiler.
 4757              	
 4758 2538 78230018 		.word	_DOTID+MAPOFFSET
 4759 253c 03       	_SEE:	.byte  3
 4760 253d 534545   		.ascii "SEE"
 4761              		.p2align 2 	
 4762              	SEE:
 4763 2540 42F804ED 		_NEST
 4764 2544 FEF7B0F8 		BL BASE 
 4765 2548 FDF762FE 		BL AT 
 4766 254c FDF788FE 		BL TOR 
 4767 2550 FEF7B6FB 		BL HEX 
 4768 2554 FFF72AFB 		BL	TICK	//  ca --, starting address
 4769 2558 FEF7F4FC 		BL	CR	
 4770 255c FFF73AFF 		BL  CODE_ABORT
 4771 2560 FDF70DFE 		_DOLIT 
 4772 2564 00000000 		.word 0  
 4773 2568 FDF77AFE 		BL TOR // not a BL counter limit to 10 consecutives 
 4774              	SEE1:
 4775 256c FDF746FF 		BL	CELLP			//  a
 4776 2570 FFF722FF 		BL  DOTCA 
 4777 2574 FFF754FF 		BL  UNNESTQ
 4778 2578 FDF724FE 		BL	QBRAN 
 4779 257c AC250018 		.word 1f+MAPOFFSET  
 4780 2580 FDF78AFE 		BL	DUPP 
 4781 2584 FDF73AFF 		BL	CELLP
 4782 2588 FDF742FE 		BL	AT 
 4783 258c FFF7C2FF 		BL	IS_BLW
 4784 2590 FDF7A4FF 		BL	INVER  
 4785 2594 FDF716FE 		BL	QBRAN 
 4786 2598 6C250018 		.word SEE1+MAPOFFSET 
 4787 259c FDF74EFE 		BL	RFROM 
 4788 25a0 FDF772FE 		BL	DROP 
ARM GAS  stm32eforth.s 			page 90


 4789 25a4 FDF71AFE 		BL	BRAN 
 4790 25a8 D8250018 		.word 2f+MAPOFFSET 
 4791 25ac FDF774FE 	1:	BL	DUPP			//  a a
 4792 25b0 00F044F8 		BL	DECOMP		//  a
 4793 25b4 FEF7C6FC 		BL	CR 
 4794 25b8 FDF74AFE 		BL	RAT 
 4795 25bc FDF7DFFD 		_DOLIT 
 4796 25c0 0A000000 		.word 10 
 4797 25c4 FDF7D4FF 		BL 	GREAT 
 4798 25c8 FDF7FCFD 		BL	QBRAN 
 4799 25cc 6C250018 		.word	SEE1+MAPOFFSET
 4800 25d0 FDF734FE 		BL	RFROM 
 4801 25d4 FDF758FE 		BL	DROP 
 4802 25d8 FDF756FE 	2:	BL	DROP
 4803 25dc FDF72EFE 		BL  RFROM 
 4804 25e0 FEF762F8 		BL 	BASE 
 4805 25e4 FDF70AFE 		BL	STORE 
 4806 25e8 52F804FB 		_UNNEST
 4807              	
 4808              	
 4809              	// BL-ADR ( asm_code -- rel_adr )
 4810              	// get absolute address from asm_code 
 4811              	// ref: ARM-v7M architecture reference, section A7.7.18 
 4812              	BLADR: 
 4813 25ec 4FEA0504 		MOV.W R4,R5
 4814 25f0 4FEA3444 		ROR R4,#16 
 4815 25f4 64F30A05 		BFI R5,R4,#0,#11 
 4816 25f8 4FEAE424 		ASR R4,#11 
 4817 25fc 64F35555 		BFI R5,R4,#21,#1 
 4818 2600 4FEAA404 		ASR R4,#2
 4819 2604 64F39655 		BFI R5,R4,#22,#1
 4820 2608 4FEAE404 		ASR R4,#3
 4821 260c 64F3D425 		BFI R5,R4,#11,#10
 4822 2610 4FEAA424 		ASR R4,#10 
 4823 2614 64F3D755 		BFI R5,R4,#23,#1
 4824 2618 15F4000F 		TST R5,#(1<<23)
 4825 261c 40F00280 		BNE.W 1f
 4826 2620 85F4C005 		EOR R5,R5,#(3<<21)
 4827 2624 4FEA0525 	1:	LSL R5,#8
 4828 2628 4FEAE515 		ASR R5,#7 
 4829 262c 7047     		_NEXT 
 4830              	
 4831              	// 	DECOMPILE ( a -- )
 4832              	// 	Convert code in a.  Display name of command or as data.
 4833              	
 4834 262e 3C250018 		.word	_SEE+MAPOFFSET
 4835 2632 09       	_DECOM:	.byte  9
 4836 2633 4445434F 		.ascii "DECOMPILE"
 4836      4D50494C 
 4836      45
 4837              		.p2align 2 
 4838              		
 4839              	DECOMP:	
 4840 263c 42F804ED 		_NEST
 4841 2640 FDF72AFE 		BL	DUPP			//  a a
 4842 2644 FDF7E4FD 		BL	AT			//  a code
 4843 2648 FDF726FE 		BL	DUPP			//  a code code
ARM GAS  stm32eforth.s 			page 91


 4844 264c FFF762FF 		BL	IS_BLW
 4845 2650 FDF7B8FD 		BL	QBRAN
 4846 2654 B0260018 		.word	DECOM2+MAPOFFSET	//  not a BL instruction 
 4847              		//  a valid_code --, extract address and display name
 4848 2658 FEF7ACFC 		BL DOTQP  
 4849 265c 03       		.byte 3
 4850 265d 424C20   		.ascii "BL "
 4851              		.p2align 2 
 4852 2660 FFF7C4FF 		BL  BLADR   // extract relative address from BL code
 4853 2664 FDF72AFE 		BL	OVER			//  a offset a
 4854 2668 FDF77AFE 		BL	PLUS			//  a target-4
 4855 266c FDF7C6FE 		BL	CELLP			//  a target
 4856 2670 FFF7A2FE 		BL  DOTCA 
 4857 2674 FFF7F0FE 		BL	NONAMEQ 
 4858 2678 FDF7A4FD 		BL	QBRAN 
 4859 267c 88260018 		.word DECOMP1+MAPOFFSET  
 4860 2680 FDF7ACFD 		BL	BRAN 
 4861 2684 8C260018 		.word DECOMP3+MAPOFFSET 
 4862              	DECOMP1:
 4863 2688 FFF74EFE 		BL	TNAME			//  a na/0 --, is it a name?
 4864              	DECOMP3:
 4865 268c FFF776FE 		BL	DOTID			//  a --, display name
 4866 2690 FDF7FAFD 		BL	DROP
 4867              	// reset not BL counter 
 4868 2694 FDF7D2FD 		BL	RFROM 
 4869 2698 FDF7D0FD 		BL	RFROM 
 4870 269c FDF7FCFD 		BL	DUPP 
 4871 26a0 FDF766FE 		BL	SUBB 
 4872 26a4 FDF7DCFD 		BL	TOR 
 4873 26a8 FDF7DAFD 		BL	TOR 	
 4874 26ac 52F804FB 		_UNNEST
 4875              			
 4876              	DECOM2: // not a BL 
 4877 26b0 FEF7BCFC 		BL	UDOT
 4878 26b4 FDF7E8FD 		BL	DROP
 4879 26b8 FDF7C0FD 		BL	RFROM // unnest address 
 4880 26bc FDF7BEFD 		BL	RFROM // not BL counter 
 4881 26c0 FDF77CFE 		BL	ONEP  // increment counter 
 4882 26c4 FDF7CCFD 		BL	TOR 
 4883 26c8 FDF7CAFD 		BL	TOR 
 4884 26cc 52F804FB 		_UNNEST
 4885              	
 4886              	//    WORDS	( -- )
 4887              	// 	Display the names in the context vocabulary.
 4888              	
 4889 26d0 32260018 		.word	_DECOM+MAPOFFSET
 4890              	.else 
 4891              		.word _DOTID+MAPOFFSET 
 4892              	.endif 
 4893 26d4 05       	_WORDS:	.byte  5
 4894 26d5 574F5244 		.ascii "WORDS"
 4894      53
 4895 26da 00BF     		.p2align 2 	
 4896              	WORDS:
 4897 26dc 42F804ED 		_NEST
 4898 26e0 FEF730FC 		BL	CR
 4899 26e4 FEF724F8 		BL	CNTXT
ARM GAS  stm32eforth.s 			page 92


 4900 26e8 FDF792FD 		BL	AT			// only in context
 4901              	WORS1:
 4902 26ec FDF7C0FE 		BL	QDUP			// ?at end of list
 4903 26f0 FDF768FD 		BL	QBRAN
 4904 26f4 10270018 		.word	WORS2+MAPOFFSET
 4905 26f8 FDF7CEFD 		BL	DUPP
 4906 26fc FEF7E2FB 		BL	SPACE
 4907 2700 FFF73CFE 		BL	DOTID			// display a name
 4908 2704 FDF782FE 		BL	CELLM
 4909 2708 FDF782FD 		BL	AT
 4910 270c FFF7EEBF 		B.W	WORS1
 4911              	WORS2:
 4912 2710 52F804FB 		_UNNEST
 4913              	
 4914              	// **************************************************************************
 4915              	//  cold start
 4916              	
 4917              	//    VER	 ( -- n )
 4918              	// 	Return the version number of this implementation.
 4919              	
 4920              	// 	.word	_WORDS+MAPOFFSET
 4921              	// _VERSN	.byte  3
 4922              	// 	.ascii "VER"
 4923              	// 	.p2align 2 	
 4924              	VERSN:
 4925 2714 42F804ED 		_NEST
 4926 2718 FDF731FD 		_DOLIT
 4927 271c 00010000 		.word	VER*256+EXT
 4928 2720 52F804FB 		_UNNEST
 4929              	
 4930              	//    hi	  ( -- )
 4931              	// 	Display the sign-on message of eForth.
 4932              	
 4933 2724 D4260018 		.word	_WORDS+MAPOFFSET
 4934 2728 02       	_HI:	.byte  2
 4935 2729 4849     		.ascii "HI"
 4936 272b 00       		.p2align 2 	
 4937              	HI:
 4938 272c 42F804ED 		_NEST
 4939 2730 FEF708FC 		BL	CR	// initialize I/O
 4940 2734 FEF73EFC 		BL	DOTQP
 4941 2738 17       		.byte	23
 4942 2739 626C7565 		.ascii "blue pill stm32eForth v" 
 4942      2070696C 
 4942      6C207374 
 4942      6D333265 
 4942      466F7274 
 4943              		.p2align 2
 4944 2750 FDF7AAFF 		BL	BASE
 4945 2754 FDF75CFD 		BL	AT
 4946 2758 FEF7B2FA 		BL	HEX	// save radix
 4947 275c FFF7DAFF 		BL	VERSN
 4948 2760 FEF72AFA 		BL	BDIGS
 4949 2764 FEF74EFA 		BL	DIG
 4950 2768 FEF74CFA 		BL	DIG
 4951 276c FDF707FD 		_DOLIT
 4952 2770 2E000000 		.word	'.'
ARM GAS  stm32eforth.s 			page 93


 4953 2774 FEF730FA 		BL	HOLD
 4954 2778 FEF754FA 		BL	DIGS
 4955 277c FEF778FA 		BL	EDIGS
 4956 2780 FEF7C8FB 		BL	TYPEE	// format version number
 4957 2784 FDF790FF 		BL	BASE
 4958 2788 FDF738FD 		BL	STORE
 4959 278c FEF7DAFB 		BL	CR
 4960 2790 52F804FB 		_UNNEST			// restore radix
 4961              	
 4962              	//    COLD	( -- )
 4963              	// 	The high level cold start sequence.
 4964              	
 4965 2794 28270018 		.word	_HI+MAPOFFSET
 4966 2798 04       	LASTN:	.byte  4
 4967 2799 434F4C44 		.ascii "COLD"
 4968 279d 000000   		.p2align 2,0	
 4969              	COLD:
 4970              	//  Initiate Forth registers
 4971 27a0 4FF49873 		_MOV32 R3,UPP // system variables area 
 4971      C2F20003 
 4972 27a8 4FF49D41 		_MOV32 R1,SPP // Forth data stack 
 4972      C2F20001 
 4973 27b0 4FF49F42 		_MOV32 R2,RPP // Forth return stack 
 4973      C2F20002 
 4974 27b8 85EA0505 		EOR R5,R5,R5			//  tos=0
 4975 27bc 42F804ED 		_NEST
 4976              		
 4977              	COLD1:
 4978 27c0 FDF7DDFC 		_DOLIT 
 4979 27c4 00000000 		.word 0 
 4980 27c8 FDF798FC 		BL ULED // turn off user LED 
 4981 27cc FDF7D7FC 		_DOLIT
 4982 27d0 00000000 		.word	UZERO
 4983 27d4 FDF7D3FC 		_DOLIT
 4984 27d8 30010020 		.word	UPP
 4985 27dc FDF7CFFC 		_DOLIT
 4986 27e0 54000000 		.word	ULAST-UZERO
 4987 27e4 FEF75CF9 		BL	MOVE 			// initialize user area
 4988 27e8 FEF7A6FF 		BL	PRESE			// initialize stack
 4989              	
 4990              		// check if user image saved in slot 0 
 4991 27ec FFF790F8 		BL IMGQ 
 4992 27f0 FDF7E8FC 		BL	QBRAN 
 4993 27f4 FC270018 		.word 1f+MAPOFFSET
 4994 27f8 FFF7A2F8 		BL	LOAD_IMG 
 4995 27fc FDF74AFF 	1:	BL	TBOOT
 4996 2800 FEF72AF9 		BL	ATEXE			// application boot
 4997 2804 FFF7E8FB 		BL	OVERT
 4998 2808 FEF7A6BF 		B.W	QUIT			// start interpretation
 4999              	COLD2:
 5000              		.p2align 2 	
 5001              	CTOP:
 5002 280c FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 5003              	
 5004              	/********************************
 5005              	  data that doesn't need to be 
 5006              	  copied in RAM 
ARM GAS  stm32eforth.s 			page 94


 5007              	*******************************/
 5008              		.section .rodata 
 5009              		.p2align 2
 5010              	NONAME_SUB: // routine not in the dictionary 
 5011 0000 DC010018 		.word BRAN+MAPOFFSET,QBRAN+MAPOFFSET, DOLIT+MAPOFFSET,DONXT+MAPOFFSET,DODOES+MAPOFFSET
 5011      C4010018 
 5011      7E010018 
 5011      A6010018 
 5011      38210018 
 5012 0014 20060018 		.word DOVAR+MAPOFFSET,DOCON+MAPOFFSET,IS_BLW+MAPOFFSET,DOTQP+MAPOFFSET,BLADR+MAPOFFSET  
 5012      2C060018 
 5012      14250018 
 5012      B40F0018 
 5012      EC250018 
 5013 0028 B8230018 		.word DOTCA+MAPOFFSET,NONAMEQ+MAPOFFSET,STRCQ+MAPOFFSET,VERSN+MAPOFFSET  
 5013      58240018 
 5013      801C0018 
 5013      14270018 
 5014 0038 00000000 		.word 0 
 5015              	
 5016              	ANONYMOUS: // anonymous routines 
 5017 003c 74000000 		.word BRAN_LBL,QBRAN_LBL,DOLIT_LBL,DONEXT_LBL,DODOES_LBL,DOVAR_LBL,DOCON_LBL
 5017      80000000 
 5017      8C000000 
 5017      98000000 
 5017      A4000000 
 5018 0058 C8000000 		.word IS_BLW_LBL,DOTQP_LBL,BLADR_LBL,DOTCA_LBL,NONAMEQ_LBL,STRCQ_LBL,VERSN_LBL   
 5018      D4000000 
 5018      D8000000 
 5018      E4000000 
 5018      F0000000 
 5019              	
 5020              	BRAN_LBL:
 5021 0074 09       		.byte 9 
 5022 0075 207B6272 		.ascii " {branch}"
 5022      616E6368 
 5022      7D
 5023 007e 0000     		.p2align 2 
 5024              	QBRAN_LBL:
 5025 0080 0A       		.byte 10
 5026 0081 207B3F62 		.ascii " {?branch}"
 5026      72616E63 
 5026      687D
 5027 008b 00       		.p2align 2
 5028              	DOLIT_LBL:
 5029 008c 08       		.byte 8 
 5030 008d 207B646F 		.ascii " {doLit}"
 5030      4C69747D 
 5031 0095 000000   		.p2align 2 
 5032              	DONEXT_LBL:
 5033 0098 09       		.byte 9
 5034 0099 207B646F 		.ascii " {doNext}"
 5034      4E657874 
 5034      7D
 5035 00a2 0000     		.p2align 2 
 5036              	DODOES_LBL:
 5037 00a4 09       		.byte 9
ARM GAS  stm32eforth.s 			page 95


 5038 00a5 207B646F 		.ascii " {doDoes}"
 5038      446F6573 
 5038      7D
 5039 00ae 0000     		.p2align 2 
 5040              	DOVAR_LBL:
 5041 00b0 08       		.byte 8
 5042 00b1 207B646F 		.ascii " {doVar}"
 5042      5661727D 
 5043 00b9 000000   		.p2align 2 
 5044              	DOCON_LBL:
 5045 00bc 0A       		.byte 10
 5046 00bd 207B646F 		.ascii " {doConst}"
 5046      436F6E73 
 5046      747D
 5047 00c7 00       		.p2align 2 
 5048              	IS_BLW_LBL:
 5049 00c8 0B       		.byte 11 
 5050 00c9 207B424C 		.ascii " {BL code?}"
 5050      20636F64 
 5050      653F7D
 5051              		.p2align 2 
 5052              	DOTQP_LBL:
 5053 00d4 03       		.byte 3
 5054 00d5 202E22   		.ascii " .\""
 5055              		.p2align 
 5056              	BLADR_LBL:
 5057 00d8 09       		.byte 9
 5058 00d9 207B424C 		.ascii " {BL>ADR}"
 5058      3E414452 
 5058      7D
 5059 00e2 0000     		.p2align 2 
 5060              	DOTCA_LBL:
 5061 00e4 08       		.byte  8
 5062 00e5 207B646F 		.ascii " {dotca}"
 5062      7463617D 
 5063 00ed 000000   		.p2align 2 
 5064              	NONAMEQ_LBL:
 5065 00f0 0A       		.byte  10
 5066 00f1 207B6E6F 		.ascii " {noname?}"
 5066      6E616D65 
 5066      3F7D
 5067 00fb 00       		.p2align 2 
 5068              	STRCQ_LBL:
 5069 00fc 06       		.byte  6
 5070 00fd 207B242C 		.ascii " {$,\"}"
 5070      227D
 5071 0103 00       		.p2align 2 
 5072              	VERSN_LBL:
 5073 0104 0A       		.byte  10
 5074 0105 207B7665 		.ascii " {version}"
 5074      7273696F 
 5074      6E7D
 5075 010f 00       		.p2align 2 
 5076              	
 5077              		.section .user 
 5078              		.p2align 10 
 5079              	USER_SPACE: // save user image here.  
ARM GAS  stm32eforth.s 			page 96


 5080 0000 FFFFFFFF 		.word 0XFFFFFFFF
 5081              	
 5082              	
 5083              	  .end 
ARM GAS  stm32eforth.s 			page 97


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  stm32eforth.s 			page 98


board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
board/blue-pill/stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
board/blue-pill/stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
board/blue-pill/stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
board/blue-pill/stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
board/blue-pill/stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
board/blue-pill/stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
board/blue-pill/stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
board/blue-pill/stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
board/blue-pill/stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
board/blue-pill/stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
board/blue-pill/stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
board/blue-pill/stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
board/blue-pill/stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
board/blue-pill/stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
board/blue-pill/stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
board/blue-pill/stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
board/blue-pill/stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
board/blue-pill/stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
board/blue-pill/stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
board/blue-pill/stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
board/blue-pill/stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
board/blue-pill/stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
board/blue-pill/stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
board/blue-pill/stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
board/blue-pill/stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
board/blue-pill/stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
board/blue-pill/stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
board/blue-pill/stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
board/blue-pill/stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
board/blue-pill/stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
board/blue-pill/stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
board/blue-pill/stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
board/blue-pill/stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32eforth.s:83     *ABS*:0000000040011000 LED_GPIO
       stm32eforth.s:84     *ABS*:000000000000000d LED_PIN
       stm32eforth.s:85     *ABS*:0000000040013800 UART
       stm32eforth.s:88     *ABS*:0000000020004e80 SPP
       stm32eforth.s:89     *ABS*:0000000020004e80 TIBB
       stm32eforth.s:90     *ABS*:0000000020004f80 RPP
       stm32eforth.s:91     *ABS*:0000000020000130 UPP
       stm32eforth.s:93     *ABS*:0000000020004e00 DEND
       stm32eforth.s:94     *ABS*:0000000020000130 RAMOFFSET
       stm32eforth.s:95     *ABS*:0000000020005000 RAMEND
       stm32eforth.s:96     *ABS*:0000000008000130 FLASHOFFSET
       stm32eforth.s:99     *ABS*:0000000018000000 MAPOFFSET
       stm32eforth.s:104    *ABS*:0000000000000004 SEED_OFS
ARM GAS  stm32eforth.s 			page 99


       stm32eforth.s:105    *ABS*:0000000000000008 TICKS_OFS
       stm32eforth.s:106    *ABS*:000000000000000c TIMER_OFS
       stm32eforth.s:107    *ABS*:0000000000000010 TORAM_OFS
       stm32eforth.s:108    *ABS*:0000000000000014 IMG_SIGN_OFS
       stm32eforth.s:109    *ABS*:0000000000000018 BOOT_OFS
       stm32eforth.s:110    *ABS*:000000000000001c BASE_OFS
       stm32eforth.s:111    *ABS*:0000000000000020 TMP_OFS
       stm32eforth.s:112    *ABS*:0000000000000024 SPAN_OFS
       stm32eforth.s:113    *ABS*:0000000000000028 TOIN_OFS
       stm32eforth.s:114    *ABS*:000000000000002c NTIB_OFS
       stm32eforth.s:115    *ABS*:0000000000000030 TIB_OFS
       stm32eforth.s:116    *ABS*:0000000000000034 EVAL_OFS
       stm32eforth.s:117    *ABS*:0000000000000038 HLD_OFS
       stm32eforth.s:118    *ABS*:000000000000003c CTXT_OFS
       stm32eforth.s:119    *ABS*:0000000000000040 FORTH_CTOP_OFS
       stm32eforth.s:120    *ABS*:0000000000000044 USER_CTOP_OFS
       stm32eforth.s:121    *ABS*:0000000000000048 LASTN_OFS
       stm32eforth.s:122    *ABS*:000000000000004c VARS_END_OFS
       stm32eforth.s:124    *ABS*:0000000000000010 RX_QUEUE_SIZE
       stm32eforth.s:125    *ABS*:0000000000000050 RX_QUEUE_OFS
       stm32eforth.s:126    *ABS*:0000000000000060 RX_HEAD_OFS
       stm32eforth.s:127    *ABS*:0000000000000064 RX_TAIL_OFS
       stm32eforth.s:175    .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:368    .inflash:00000000000000d0 reset_handler
       stm32eforth.s:266    .inflash:0000000000000000 default_handler
       stm32eforth.s:283    .inflash:0000000000000020 systick_handler
       stm32eforth.s:302    .inflash:000000000000003c uart_rx_handler
       stm32eforth.s:255    .isr_vector:0000000000000130 isr_end
       stm32eforth.s:264    .inflash:0000000000000000 $t
       stm32eforth.s:271    .inflash:0000000000000008 exception_msg
       stm32eforth.s:344    .inflash:00000000000000a4 uart_puts
       stm32eforth.s:325    .inflash:000000000000007c reset_mcu
       stm32eforth.s:272    .inflash:0000000000000008 $d
       stm32eforth.s:292    .inflash:000000000000003a systick_exit
       stm32eforth.s:322    .inflash:0000000000000076 user_reboot
       stm32eforth.s:335    .inflash:0000000000000090 user_reboot_msg
       stm32eforth.s:333    .inflash:000000000000008c scb_adr
       stm32eforth.s:334    .inflash:000000000000008c $d
       stm32eforth.s:339    .inflash:00000000000000a2 $t
       stm32eforth.s:494    .inflash:00000000000001f2 remap
       stm32eforth.s:392    .inflash:0000000000000110 init_devices
       stm32eforth.s:469    .inflash:00000000000001b0 uart_init
       stm32eforth.s:383    .inflash:00000000000000f0 forth_init
       stm32eforth.s:379    .inflash:00000000000000ec forth_entry
       stm32eforth.s:380    .inflash:00000000000000ec $d
       stm32eforth.s:4969   .text:00000000000027a0 COLD
       stm32eforth.s:384    .inflash:00000000000000f0 $t
       stm32eforth.s:405    .inflash:000000000000012e wait_hserdy
       stm32eforth.s:425    .inflash:0000000000000148 wait_pllrdy
       stm32eforth.s:437    .inflash:0000000000000168 wait_sws
       stm32eforth.s:526    .inflash:0000000000000258 remap_dest
       stm32eforth.s:524    .inflash:0000000000000254 remap_src
       stm32eforth.s:5001   .text:000000000000280c CTOP
       stm32eforth.s:573    .text:0000000000000000 UZERO
       stm32eforth.s:525    .inflash:0000000000000254 $d
       stm32eforth.s:532    *ABS*:0000000000000001 VER
       stm32eforth.s:533    *ABS*:0000000000000000 EXT
ARM GAS  stm32eforth.s 			page 100


       stm32eforth.s:537    *ABS*:0000000000000040 COMPO
       stm32eforth.s:538    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:539    *ABS*:00000000ffffff1f MASKK
       stm32eforth.s:541    *ABS*:0000000000000004 CELLL
       stm32eforth.s:542    *ABS*:000000000000000a BASEE
       stm32eforth.s:543    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:545    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:546    *ABS*:000000000000000a LF
       stm32eforth.s:547    *ABS*:000000000000000d CRR
       stm32eforth.s:548    *ABS*:000000000000001b ERR
       stm32eforth.s:549    *ABS*:0000000000000027 TIC
       stm32eforth.s:574    .text:0000000000000000 $d
       stm32eforth.s:4937   .text:000000000000272c HI
       stm32eforth.s:3275   .text:0000000000001614 INTER
       stm32eforth.s:4966   .text:0000000000002798 LASTN
       stm32eforth.s:594    .text:0000000000000054 ULAST
       stm32eforth.s:602    .text:000000000000006c $t
       stm32eforth.s:608    .text:0000000000000070 $d
       stm32eforth.s:609    .text:0000000000000074 _RAND
       stm32eforth.s:612    .text:000000000000007c RAND
       stm32eforth.s:1548   .text:0000000000000644 SEED
       stm32eforth.s:835    .text:0000000000000210 AT
       stm32eforth.s:929    .text:0000000000000298 DUPP
       stm32eforth.s:822    .text:00000000000001fc STORE
       stm32eforth.s:1331   .text:0000000000000500 ABSS
       stm32eforth.s:940    .text:00000000000002a8 SWAP
       stm32eforth.s:1897   .text:00000000000008f0 MODD
       stm32eforth.s:632    .text:00000000000000bc $d
       stm32eforth.s:633    .text:00000000000000c0 _PAUSE
       stm32eforth.s:635    .text:00000000000000c6 $t
       stm32eforth.s:636    .text:00000000000000c8 PAUSE
       stm32eforth.s:1570   .text:000000000000066c TIMER
       stm32eforth.s:640    .text:00000000000000d4 PAUSE_LOOP
       stm32eforth.s:782    .text:00000000000001c4 QBRAN
       stm32eforth.s:644    .text:00000000000000e0 $d
       stm32eforth.s:647    .text:00000000000000ec PAUSE_EXIT
       stm32eforth.s:800    .text:00000000000001dc BRAN
       stm32eforth.s:645    .text:00000000000000e4 $t
       stm32eforth.s:646    .text:00000000000000e8 $d
       stm32eforth.s:648    .text:00000000000000ec $t
       stm32eforth.s:652    .text:00000000000000f0 $d
       stm32eforth.s:653    .text:00000000000000f4 _ULED
       stm32eforth.s:657    .text:00000000000000fc ULED
       stm32eforth.s:665    .text:0000000000000114 ULED_OFF
       stm32eforth.s:671    .text:0000000000000118 $d
       stm32eforth.s:672    .text:000000000000011c _QRX
       stm32eforth.s:675    .text:0000000000000124 QKEY
       stm32eforth.s:676    .text:0000000000000124 QRX
       stm32eforth.s:696    .text:0000000000000150 $d
       stm32eforth.s:697    .text:0000000000000154 _TXSTO
       stm32eforth.s:700    .text:000000000000015c TXSTO
       stm32eforth.s:701    .text:000000000000015c EMIT
       stm32eforth.s:702    .text:000000000000015c TECHO
       stm32eforth.s:717    .text:0000000000000174 $d
       stm32eforth.s:718    .text:0000000000000178 _NOP
       stm32eforth.s:720    .text:000000000000017c $t
       stm32eforth.s:721    .text:000000000000017c NOP
ARM GAS  stm32eforth.s 			page 101


       stm32eforth.s:732    .text:000000000000017e DOLIT
       stm32eforth.s:742    .text:0000000000000190 $d
       stm32eforth.s:743    .text:0000000000000194 _EXECU
       stm32eforth.s:745    .text:000000000000019c $t
       stm32eforth.s:746    .text:000000000000019c EXECU
       stm32eforth.s:760    .text:00000000000001a6 DONXT
       stm32eforth.s:767    .text:00000000000001b4 NEXT1
       stm32eforth.s:789    .text:00000000000001d6 QBRAN1
       stm32eforth.s:808    .text:00000000000001e6 $d
       stm32eforth.s:809    .text:00000000000001ea _EXIT
       stm32eforth.s:812    .text:00000000000001f0 EXIT
       stm32eforth.s:818    .text:00000000000001f4 $d
       stm32eforth.s:819    .text:00000000000001f8 _STORE
       stm32eforth.s:821    .text:00000000000001fa $t
       stm32eforth.s:831    .text:0000000000000208 $d
       stm32eforth.s:832    .text:000000000000020c _AT
       stm32eforth.s:834    .text:000000000000020e $t
       stm32eforth.s:842    .text:0000000000000214 $d
       stm32eforth.s:843    .text:0000000000000218 _CSTOR
       stm32eforth.s:846    .text:000000000000021c CSTOR
       stm32eforth.s:855    .text:0000000000000228 $d
       stm32eforth.s:856    .text:000000000000022c _CAT
       stm32eforth.s:859    .text:0000000000000230 CAT
       stm32eforth.s:866    .text:0000000000000234 $d
       stm32eforth.s:867    .text:0000000000000238 _RFROM
       stm32eforth.s:870    .text:000000000000023c RFROM
       stm32eforth.s:878    .text:0000000000000246 $d
       stm32eforth.s:879    .text:000000000000024a _RAT
       stm32eforth.s:882    .text:0000000000000250 RAT
       stm32eforth.s:890    .text:0000000000000258 $d
       stm32eforth.s:891    .text:000000000000025c _TOR
       stm32eforth.s:894    .text:0000000000000260 TOR
       stm32eforth.s:902    .text:000000000000026a $d
       stm32eforth.s:903    .text:000000000000026e _SPAT
       stm32eforth.s:905    .text:0000000000000272 $t
       stm32eforth.s:906    .text:0000000000000274 SPAT
       stm32eforth.s:914    .text:000000000000027c $d
       stm32eforth.s:915    .text:0000000000000280 _DROP
       stm32eforth.s:918    .text:0000000000000288 DROP
       stm32eforth.s:925    .text:000000000000028e $d
       stm32eforth.s:926    .text:0000000000000292 _DUPP
       stm32eforth.s:928    .text:0000000000000296 $t
       stm32eforth.s:936    .text:000000000000029e $d
       stm32eforth.s:937    .text:00000000000002a2 _SWAP
       stm32eforth.s:949    .text:00000000000002b0 $d
       stm32eforth.s:950    .text:00000000000002b4 _OVER
       stm32eforth.s:953    .text:00000000000002bc OVER
       stm32eforth.s:961    .text:00000000000002c4 $d
       stm32eforth.s:962    .text:00000000000002c8 _ZLESS
       stm32eforth.s:965    .text:00000000000002cc ZLESS
       stm32eforth.s:973    .text:00000000000002d6 $d
       stm32eforth.s:974    .text:00000000000002da _ANDD
       stm32eforth.s:976    .text:00000000000002de $t
       stm32eforth.s:977    .text:00000000000002e0 ANDD
       stm32eforth.s:986    .text:00000000000002ec $d
       stm32eforth.s:987    .text:00000000000002f0 _ORR
       stm32eforth.s:990    .text:00000000000002f4 ORR
ARM GAS  stm32eforth.s 			page 102


       stm32eforth.s:999    .text:0000000000000300 $d
       stm32eforth.s:1000   .text:0000000000000304 _XORR
       stm32eforth.s:1002   .text:0000000000000308 $t
       stm32eforth.s:1003   .text:0000000000000308 XORR
       stm32eforth.s:1012   .text:0000000000000314 $d
       stm32eforth.s:1013   .text:0000000000000318 _UPLUS
       stm32eforth.s:1015   .text:000000000000031c $t
       stm32eforth.s:1016   .text:000000000000031c UPLUS
       stm32eforth.s:1027   .text:000000000000032c $d
       stm32eforth.s:1028   .text:0000000000000330 _RSHIFT
       stm32eforth.s:1031   .text:0000000000000338 RSHIFT
       stm32eforth.s:1039   .text:0000000000000342 $d
       stm32eforth.s:1040   .text:0000000000000346 _LSHIFT
       stm32eforth.s:1043   .text:0000000000000350 LSHIFT
       stm32eforth.s:1051   .text:000000000000035a $d
       stm32eforth.s:1052   .text:000000000000035e _PLUS
       stm32eforth.s:1054   .text:0000000000000360 $t
       stm32eforth.s:1055   .text:0000000000000360 PLUS
       stm32eforth.s:1063   .text:0000000000000368 $d
       stm32eforth.s:1064   .text:000000000000036c _SUBB
       stm32eforth.s:1066   .text:000000000000036e $t
       stm32eforth.s:1067   .text:0000000000000370 SUBB
       stm32eforth.s:1075   .text:000000000000037a $d
       stm32eforth.s:1076   .text:000000000000037e _STAR
       stm32eforth.s:1078   .text:0000000000000380 $t
       stm32eforth.s:1079   .text:0000000000000380 STAR
       stm32eforth.s:1087   .text:000000000000038a $d
       stm32eforth.s:1088   .text:000000000000038e _UMSTA
       stm32eforth.s:1090   .text:0000000000000392 $t
       stm32eforth.s:1091   .text:0000000000000394 UMSTA
       stm32eforth.s:1101   .text:00000000000003a0 $d
       stm32eforth.s:1102   .text:00000000000003a4 _MSTAR
       stm32eforth.s:1105   .text:00000000000003a8 MSTAR
       stm32eforth.s:1115   .text:00000000000003b4 $d
       stm32eforth.s:1116   .text:00000000000003b8 _ONEP
       stm32eforth.s:1119   .text:00000000000003bc ONEP
       stm32eforth.s:1126   .text:00000000000003c2 $d
       stm32eforth.s:1127   .text:00000000000003c6 _ONEM
       stm32eforth.s:1130   .text:00000000000003cc ONEM
       stm32eforth.s:1137   .text:00000000000003d2 $d
       stm32eforth.s:1138   .text:00000000000003d6 _TWOP
       stm32eforth.s:1141   .text:00000000000003dc TWOP
       stm32eforth.s:1148   .text:00000000000003e2 $d
       stm32eforth.s:1149   .text:00000000000003e6 _TWOM
       stm32eforth.s:1152   .text:00000000000003ec TWOM
       stm32eforth.s:1159   .text:00000000000003f2 $d
       stm32eforth.s:1160   .text:00000000000003f6 _CELLP
       stm32eforth.s:1162   .text:00000000000003fc $t
       stm32eforth.s:1163   .text:00000000000003fc CELLP
       stm32eforth.s:1170   .text:0000000000000402 $d
       stm32eforth.s:1171   .text:0000000000000406 _CELLM
       stm32eforth.s:1173   .text:000000000000040c $t
       stm32eforth.s:1174   .text:000000000000040c CELLM
       stm32eforth.s:1181   .text:0000000000000412 $d
       stm32eforth.s:1182   .text:0000000000000416 _BLANK
       stm32eforth.s:1185   .text:000000000000041c BLANK
       stm32eforth.s:1193   .text:0000000000000426 $d
ARM GAS  stm32eforth.s 			page 103


       stm32eforth.s:1194   .text:000000000000042a _CELLS
       stm32eforth.s:1196   .text:0000000000000430 $t
       stm32eforth.s:1197   .text:0000000000000430 CELLS
       stm32eforth.s:1204   .text:0000000000000436 $d
       stm32eforth.s:1205   .text:000000000000043a _CELLSL
       stm32eforth.s:1207   .text:0000000000000440 $t
       stm32eforth.s:1208   .text:0000000000000440 CELLSL
       stm32eforth.s:1215   .text:0000000000000446 $d
       stm32eforth.s:1216   .text:000000000000044a _TWOST
       stm32eforth.s:1219   .text:0000000000000450 TWOST
       stm32eforth.s:1226   .text:0000000000000456 $d
       stm32eforth.s:1227   .text:000000000000045a _TWOSL
       stm32eforth.s:1230   .text:0000000000000460 TWOSL
       stm32eforth.s:1237   .text:0000000000000466 $d
       stm32eforth.s:1238   .text:000000000000046a _QDUP
       stm32eforth.s:1241   .text:0000000000000470 QDUP
       stm32eforth.s:1250   .text:000000000000047a $d
       stm32eforth.s:1251   .text:000000000000047e _ROT
       stm32eforth.s:1253   .text:0000000000000482 $t
       stm32eforth.s:1254   .text:0000000000000484 ROT
       stm32eforth.s:1264   .text:000000000000048e $d
       stm32eforth.s:1265   .text:0000000000000492 _DDROP
       stm32eforth.s:1267   .text:0000000000000498 $t
       stm32eforth.s:1268   .text:0000000000000498 DDROP
       stm32eforth.s:1276   .text:00000000000004a2 $d
       stm32eforth.s:1277   .text:00000000000004a6 _DDUP
       stm32eforth.s:1280   .text:00000000000004ac DDUP
       stm32eforth.s:1289   .text:00000000000004b8 $d
       stm32eforth.s:1290   .text:00000000000004bc _DPLUS
       stm32eforth.s:1293   .text:00000000000004c0 DPLUS
       stm32eforth.s:1305   .text:00000000000004d4 $d
       stm32eforth.s:1306   .text:00000000000004d8 _INVER
       stm32eforth.s:1308   .text:00000000000004dc $t
       stm32eforth.s:1309   .text:00000000000004dc INVER
       stm32eforth.s:1316   .text:00000000000004e2 $d
       stm32eforth.s:1317   .text:00000000000004e6 _NEGAT
       stm32eforth.s:1320   .text:00000000000004f0 NEGAT
       stm32eforth.s:1327   .text:00000000000004f6 $d
       stm32eforth.s:1328   .text:00000000000004fa _ABSS
       stm32eforth.s:1330   .text:00000000000004fe $t
       stm32eforth.s:1340   .text:000000000000050a $d
       stm32eforth.s:1341   .text:000000000000050e _ZEQUAL
       stm32eforth.s:1344   .text:0000000000000514 ZEQUAL
       stm32eforth.s:1354   .text:0000000000000522 $d
       stm32eforth.s:1355   .text:0000000000000526 _EQUAL
       stm32eforth.s:1357   .text:0000000000000528 $t
       stm32eforth.s:1358   .text:0000000000000528 EQUAL
       stm32eforth.s:1369   .text:0000000000000538 $d
       stm32eforth.s:1370   .text:000000000000053c _ULESS
       stm32eforth.s:1373   .text:0000000000000540 ULESS
       stm32eforth.s:1384   .text:0000000000000550 $d
       stm32eforth.s:1385   .text:0000000000000554 _LESS
       stm32eforth.s:1387   .text:0000000000000556 $t
       stm32eforth.s:1388   .text:0000000000000558 LESS
       stm32eforth.s:1399   .text:0000000000000568 $d
       stm32eforth.s:1400   .text:000000000000056c _GREAT
       stm32eforth.s:1402   .text:000000000000056e $t
ARM GAS  stm32eforth.s 			page 104


       stm32eforth.s:1403   .text:0000000000000570 GREAT
       stm32eforth.s:1414   .text:0000000000000580 $d
       stm32eforth.s:1415   .text:0000000000000584 _MAX
       stm32eforth.s:1417   .text:0000000000000588 $t
       stm32eforth.s:1418   .text:0000000000000588 MAX
       stm32eforth.s:1428   .text:0000000000000594 $d
       stm32eforth.s:1429   .text:0000000000000598 _MIN
       stm32eforth.s:1431   .text:000000000000059c $t
       stm32eforth.s:1432   .text:000000000000059c MIN
       stm32eforth.s:1442   .text:00000000000005a8 $d
       stm32eforth.s:1443   .text:00000000000005ac _PSTOR
       stm32eforth.s:1446   .text:00000000000005b0 PSTOR
       stm32eforth.s:1457   .text:00000000000005c0 $d
       stm32eforth.s:1458   .text:00000000000005c4 _DSTOR
       stm32eforth.s:1461   .text:00000000000005c8 DSTOR
       stm32eforth.s:1472   .text:00000000000005dc $d
       stm32eforth.s:1473   .text:00000000000005e0 _DAT
       stm32eforth.s:1476   .text:00000000000005e4 DAT
       stm32eforth.s:1485   .text:00000000000005ee $d
       stm32eforth.s:1486   .text:00000000000005f2 _COUNT
       stm32eforth.s:1488   .text:00000000000005f8 $t
       stm32eforth.s:1489   .text:00000000000005f8 COUNT
       stm32eforth.s:1498   .text:0000000000000604 $d
       stm32eforth.s:1499   .text:0000000000000608 _DNEGA
       stm32eforth.s:1501   .text:0000000000000610 $t
       stm32eforth.s:1502   .text:0000000000000610 DNEGA
       stm32eforth.s:1520   .text:0000000000000620 DOVAR
       stm32eforth.s:1532   .text:000000000000062c DOCON
       stm32eforth.s:1544   .text:0000000000000638 $d
       stm32eforth.s:1545   .text:000000000000063c _SEED
       stm32eforth.s:1555   .text:000000000000064e $d
       stm32eforth.s:1556   .text:0000000000000652 _MSEC
       stm32eforth.s:1559   .text:0000000000000658 MSEC
       stm32eforth.s:1566   .text:0000000000000662 $d
       stm32eforth.s:1567   .text:0000000000000666 _TIMER
       stm32eforth.s:1569   .text:000000000000066c $t
       stm32eforth.s:1578   .text:0000000000000676 $d
       stm32eforth.s:1579   .text:000000000000067a _TORAM
       stm32eforth.s:1582   .text:0000000000000680 TORAM
       stm32eforth.s:1590   .text:000000000000068a $d
       stm32eforth.s:1591   .text:000000000000068e _TBOOT
       stm32eforth.s:1593   .text:0000000000000694 $t
       stm32eforth.s:1594   .text:0000000000000694 TBOOT
       stm32eforth.s:1602   .text:000000000000069e $d
       stm32eforth.s:1603   .text:00000000000006a2 _BASE
       stm32eforth.s:1606   .text:00000000000006a8 BASE
       stm32eforth.s:1618   .text:00000000000006b2 TEMP
       stm32eforth.s:1626   .text:00000000000006bc $d
       stm32eforth.s:1627   .text:00000000000006c0 _SPAN
       stm32eforth.s:1630   .text:00000000000006c8 SPAN
       stm32eforth.s:1638   .text:00000000000006d2 $d
       stm32eforth.s:1639   .text:00000000000006d6 _INN
       stm32eforth.s:1641   .text:00000000000006da $t
       stm32eforth.s:1642   .text:00000000000006dc INN
       stm32eforth.s:1650   .text:00000000000006e6 $d
       stm32eforth.s:1651   .text:00000000000006ea _NTIB
       stm32eforth.s:1654   .text:00000000000006f0 NTIB
ARM GAS  stm32eforth.s 			page 105


       stm32eforth.s:1662   .text:00000000000006fa $d
       stm32eforth.s:1663   .text:00000000000006fe _TEVAL
       stm32eforth.s:1665   .text:0000000000000704 $t
       stm32eforth.s:1666   .text:0000000000000704 TEVAL
       stm32eforth.s:1674   .text:000000000000070e $d
       stm32eforth.s:1675   .text:0000000000000712 _HLD
       stm32eforth.s:1677   .text:0000000000000716 $t
       stm32eforth.s:1678   .text:0000000000000718 HLD
       stm32eforth.s:1686   .text:0000000000000722 $d
       stm32eforth.s:1687   .text:0000000000000726 _CNTXT
       stm32eforth.s:1689   .text:000000000000072e $t
       stm32eforth.s:1690   .text:0000000000000730 CNTXT
       stm32eforth.s:1691   .text:0000000000000730 CRRNT
       stm32eforth.s:1699   .text:000000000000073a $d
       stm32eforth.s:1700   .text:000000000000073e _CP
       stm32eforth.s:1703   .text:0000000000000744 CPP
       stm32eforth.s:1710   .text:000000000000074e $d
       stm32eforth.s:1711   .text:0000000000000752 _FCP
       stm32eforth.s:1713   .text:0000000000000756 $t
       stm32eforth.s:1714   .text:0000000000000758 FCP
       stm32eforth.s:1722   .text:0000000000000762 $d
       stm32eforth.s:1723   .text:0000000000000766 _LAST
       stm32eforth.s:1726   .text:000000000000076c LAST
       stm32eforth.s:1737   .text:0000000000000776 $d
       stm32eforth.s:1738   .text:000000000000077a _USER_BGN
       stm32eforth.s:1741   .text:0000000000000788 USER_BEGIN
       stm32eforth.s:1745   .text:0000000000000790 USR_BGN_ADR
       stm32eforth.s:1746   .text:0000000000000790 $d
       stm32eforth.s:1751   .text:0000000000000798 _USER_END
       stm32eforth.s:1754   .text:00000000000007a4 USER_END
       stm32eforth.s:1761   .text:00000000000007b2 $d
       stm32eforth.s:1762   .text:00000000000007b6 _IMG_ADR
       stm32eforth.s:1764   .text:00000000000007be $t
       stm32eforth.s:1765   .text:00000000000007c0 IMG_ADR
       stm32eforth.s:1769   .text:00000000000007c8 USR_IMG_ADR
       stm32eforth.s:1770   .text:00000000000007c8 $d
       stm32eforth.s:5079   .user:0000000000000000 USER_SPACE
       stm32eforth.s:1774   .text:00000000000007d0 _IMG_SIGN
       stm32eforth.s:1777   .text:00000000000007dc IMG_SIGN
       stm32eforth.s:1789   .text:00000000000007e6 $d
       stm32eforth.s:1790   .text:00000000000007ea _WITHI
       stm32eforth.s:1793   .text:00000000000007f4 WITHI
       stm32eforth.s:1808   .text:0000000000000814 $d
       stm32eforth.s:1809   .text:0000000000000818 _UMMOD
       stm32eforth.s:1812   .text:0000000000000820 UMMOD
       stm32eforth.s:1816   .text:000000000000082a UMMOD0
       stm32eforth.s:1823   .text:000000000000083a UMMOD1
       stm32eforth.s:1829   .text:0000000000000844 UMMOD2
       stm32eforth.s:1839   .text:000000000000084e $d
       stm32eforth.s:1840   .text:0000000000000852 _MSMOD
       stm32eforth.s:1842   .text:0000000000000858 $t
       stm32eforth.s:1843   .text:0000000000000858 MSMOD
       stm32eforth.s:1850   .text:0000000000000870 $d
       stm32eforth.s:1855   .text:0000000000000884 MMOD1
       stm32eforth.s:1851   .text:0000000000000874 $t
       stm32eforth.s:1860   .text:0000000000000894 $d
       stm32eforth.s:1863   .text:00000000000008a0 MMOD2
ARM GAS  stm32eforth.s 			page 106


       stm32eforth.s:1861   .text:0000000000000898 $t
       stm32eforth.s:1868   .text:00000000000008b0 $d
       stm32eforth.s:1872   .text:00000000000008c0 MMOD3
       stm32eforth.s:1869   .text:00000000000008b4 $t
       stm32eforth.s:1878   .text:00000000000008c4 $d
       stm32eforth.s:1879   .text:00000000000008c8 _SLMOD
       stm32eforth.s:1882   .text:00000000000008d0 SLMOD
       stm32eforth.s:1893   .text:00000000000008e8 $d
       stm32eforth.s:1894   .text:00000000000008ec _MODD
       stm32eforth.s:1896   .text:00000000000008f0 $t
       stm32eforth.s:1906   .text:0000000000000900 $d
       stm32eforth.s:1907   .text:0000000000000904 _SLASH
       stm32eforth.s:1909   .text:0000000000000906 $t
       stm32eforth.s:1910   .text:0000000000000908 SLASH
       stm32eforth.s:1920   .text:000000000000091c $d
       stm32eforth.s:1921   .text:0000000000000920 _SSMOD
       stm32eforth.s:1923   .text:0000000000000926 $t
       stm32eforth.s:1924   .text:0000000000000928 SSMOD
       stm32eforth.s:1935   .text:0000000000000940 $d
       stm32eforth.s:1936   .text:0000000000000944 _STASL
       stm32eforth.s:1939   .text:0000000000000948 STASL
       stm32eforth.s:1952   .text:000000000000095c $d
       stm32eforth.s:1953   .text:0000000000000960 _ALGND
       stm32eforth.s:1955   .text:0000000000000968 $t
       stm32eforth.s:1956   .text:0000000000000968 ALGND
       stm32eforth.s:1965   .text:0000000000000976 $d
       stm32eforth.s:1966   .text:000000000000097a _TCHAR
       stm32eforth.s:1968   .text:0000000000000980 $t
       stm32eforth.s:1969   .text:0000000000000980 TCHAR
       stm32eforth.s:1972   .text:0000000000000988 $d
       stm32eforth.s:1973   .text:000000000000098c $t
       stm32eforth.s:1977   .text:000000000000099c $d
       stm32eforth.s:1978   .text:00000000000009a0 $t
       stm32eforth.s:1981   .text:00000000000009ac $d
       stm32eforth.s:1985   .text:00000000000009bc TCHA1
       stm32eforth.s:1982   .text:00000000000009b0 $t
       stm32eforth.s:1984   .text:00000000000009b8 $d
       stm32eforth.s:1986   .text:00000000000009bc $t
       stm32eforth.s:1991   .text:00000000000009c0 $d
       stm32eforth.s:1992   .text:00000000000009c4 _DEPTH
       stm32eforth.s:1994   .text:00000000000009ca $t
       stm32eforth.s:1995   .text:00000000000009cc DEPTH
       stm32eforth.s:2005   .text:00000000000009de $d
       stm32eforth.s:2006   .text:00000000000009e2 _PICK
       stm32eforth.s:2009   .text:00000000000009e8 PICK
       stm32eforth.s:2024   .text:0000000000000a04 $d
       stm32eforth.s:2025   .text:0000000000000a08 _HERE
       stm32eforth.s:2028   .text:0000000000000a10 HERE
       stm32eforth.s:2037   .text:0000000000000a20 $d
       stm32eforth.s:2038   .text:0000000000000a24 _PAD
       stm32eforth.s:2040   .text:0000000000000a28 $t
       stm32eforth.s:2041   .text:0000000000000a28 PAD
       stm32eforth.s:2050   .text:0000000000000a38 $d
       stm32eforth.s:2051   .text:0000000000000a3c _TIB
       stm32eforth.s:2053   .text:0000000000000a40 $t
       stm32eforth.s:2054   .text:0000000000000a40 TIB
       stm32eforth.s:2062   .text:0000000000000a48 $d
ARM GAS  stm32eforth.s 			page 107


       stm32eforth.s:2063   .text:0000000000000a4c _ATEXE
       stm32eforth.s:2066   .text:0000000000000a58 ATEXE
       stm32eforth.s:2078   .text:0000000000000a6a $d
       stm32eforth.s:2079   .text:0000000000000a6e _CMOVE
       stm32eforth.s:2081   .text:0000000000000a74 $t
       stm32eforth.s:2082   .text:0000000000000a74 CMOVE
       stm32eforth.s:2089   .text:0000000000000a86 CMOV1
       stm32eforth.s:2086   .text:0000000000000a7e CMOV0
       stm32eforth.s:2094   .text:0000000000000a90 CMOV2
       stm32eforth.s:2101   .text:0000000000000a96 $d
       stm32eforth.s:2102   .text:0000000000000a9a _MOVE
       stm32eforth.s:2105   .text:0000000000000aa0 MOVE
       stm32eforth.s:2113   .text:0000000000000ab6 MOVE1
       stm32eforth.s:2110   .text:0000000000000aae MOVE0
       stm32eforth.s:2118   .text:0000000000000ac0 MOVE2
       stm32eforth.s:2125   .text:0000000000000ac6 $d
       stm32eforth.s:2126   .text:0000000000000aca _FILL
       stm32eforth.s:2129   .text:0000000000000ad0 FILL
       stm32eforth.s:2132   .text:0000000000000ad8 FILL0
       stm32eforth.s:2135   .text:0000000000000adc FILL1
       stm32eforth.s:2141   .text:0000000000000aea FILL2
       stm32eforth.s:2148   .text:0000000000000af0 $d
       stm32eforth.s:2149   .text:0000000000000af4 _PACKS
       stm32eforth.s:2152   .text:0000000000000afc PACKS
       stm32eforth.s:2161   .text:0000000000000b1c $d
       stm32eforth.s:2162   .text:0000000000000b20 $t
       stm32eforth.s:2164   .text:0000000000000b28 $d
       stm32eforth.s:2165   .text:0000000000000b2c $t
       stm32eforth.s:2182   .text:0000000000000b54 $d
       stm32eforth.s:2183   .text:0000000000000b58 _DIGIT
       stm32eforth.s:2185   .text:0000000000000b5e $t
       stm32eforth.s:2186   .text:0000000000000b60 DIGIT
       stm32eforth.s:2189   .text:0000000000000b68 $d
       stm32eforth.s:2190   .text:0000000000000b6c $t
       stm32eforth.s:2200   .text:0000000000000b84 $d
       stm32eforth.s:2201   .text:0000000000000b88 _EXTRC
       stm32eforth.s:2203   .text:0000000000000b90 $t
       stm32eforth.s:2204   .text:0000000000000b90 EXTRC
       stm32eforth.s:2207   .text:0000000000000b98 $d
       stm32eforth.s:2208   .text:0000000000000b9c $t
       stm32eforth.s:2217   .text:0000000000000bb0 $d
       stm32eforth.s:2218   .text:0000000000000bb4 _BDIGS
       stm32eforth.s:2221   .text:0000000000000bb8 BDIGS
       stm32eforth.s:2231   .text:0000000000000bcc $d
       stm32eforth.s:2232   .text:0000000000000bd0 _HOLD
       stm32eforth.s:2235   .text:0000000000000bd8 HOLD
       stm32eforth.s:2249   .text:0000000000000bfc $d
       stm32eforth.s:2250   .text:0000000000000c00 _DIG
       stm32eforth.s:2252   .text:0000000000000c02 $t
       stm32eforth.s:2253   .text:0000000000000c04 DIG
       stm32eforth.s:2264   .text:0000000000000c1c $d
       stm32eforth.s:2265   .text:0000000000000c20 _DIGS
       stm32eforth.s:2268   .text:0000000000000c24 DIGS
       stm32eforth.s:2270   .text:0000000000000c28 DIGS1
       stm32eforth.s:2274   .text:0000000000000c34 $d
       stm32eforth.s:2276   .text:0000000000000c3a DIGS2
       stm32eforth.s:2275   .text:0000000000000c38 $t
ARM GAS  stm32eforth.s 			page 108


       stm32eforth.s:2282   .text:0000000000000c3e $d
       stm32eforth.s:2283   .text:0000000000000c42 _SIGN
       stm32eforth.s:2286   .text:0000000000000c48 SIGN
       stm32eforth.s:2290   .text:0000000000000c54 $d
       stm32eforth.s:2294   .text:0000000000000c64 SIGN1
       stm32eforth.s:2291   .text:0000000000000c58 $t
       stm32eforth.s:2292   .text:0000000000000c5c $d
       stm32eforth.s:2293   .text:0000000000000c60 $t
       stm32eforth.s:2300   .text:0000000000000c68 $d
       stm32eforth.s:2301   .text:0000000000000c6c _EDIGS
       stm32eforth.s:2304   .text:0000000000000c70 EDIGS
       stm32eforth.s:2321   .text:0000000000000c90 STRR
       stm32eforth.s:2336   .text:0000000000000cb8 $d
       stm32eforth.s:2337   .text:0000000000000cbc _HEX
       stm32eforth.s:2339   .text:0000000000000cc0 $t
       stm32eforth.s:2340   .text:0000000000000cc0 HEX
       stm32eforth.s:2343   .text:0000000000000cc8 $d
       stm32eforth.s:2344   .text:0000000000000ccc $t
       stm32eforth.s:2351   .text:0000000000000cd8 $d
       stm32eforth.s:2352   .text:0000000000000cdc _DECIM
       stm32eforth.s:2354   .text:0000000000000ce4 $t
       stm32eforth.s:2355   .text:0000000000000ce4 DECIM
       stm32eforth.s:2358   .text:0000000000000cec $d
       stm32eforth.s:2359   .text:0000000000000cf0 $t
       stm32eforth.s:2369   .text:0000000000000cfc $d
       stm32eforth.s:2370   .text:0000000000000d00 _DIGTQ
       stm32eforth.s:2373   .text:0000000000000d08 DIGTQ
       stm32eforth.s:2377   .text:0000000000000d14 $d
       stm32eforth.s:2378   .text:0000000000000d18 $t
       stm32eforth.s:2380   .text:0000000000000d20 $d
       stm32eforth.s:2381   .text:0000000000000d24 $t
       stm32eforth.s:2384   .text:0000000000000d30 $d
       stm32eforth.s:2393   .text:0000000000000d54 DGTQ1
       stm32eforth.s:2385   .text:0000000000000d34 $t
       stm32eforth.s:2386   .text:0000000000000d38 $d
       stm32eforth.s:2387   .text:0000000000000d3c $t
       stm32eforth.s:2390   .text:0000000000000d48 $d
       stm32eforth.s:2391   .text:0000000000000d4c $t
       stm32eforth.s:2402   .text:0000000000000d64 $d
       stm32eforth.s:2403   .text:0000000000000d68 _NUMBQ
       stm32eforth.s:2405   .text:0000000000000d70 $t
       stm32eforth.s:2406   .text:0000000000000d70 NUMBQ
       stm32eforth.s:2412   .text:0000000000000d84 $d
       stm32eforth.s:2413   .text:0000000000000d88 $t
       stm32eforth.s:2418   .text:0000000000000d9c $d
       stm32eforth.s:2419   .text:0000000000000da0 $t
       stm32eforth.s:2421   .text:0000000000000da8 $d
       stm32eforth.s:2427   .text:0000000000000dc0 NUMQ1
       stm32eforth.s:2422   .text:0000000000000dac $t
       stm32eforth.s:2431   .text:0000000000000dcc $d
       stm32eforth.s:2432   .text:0000000000000dd0 $t
       stm32eforth.s:2442   .text:0000000000000df8 $d
       stm32eforth.s:2481   .text:0000000000000e84 NUMQ6
       stm32eforth.s:2443   .text:0000000000000dfc $t
       stm32eforth.s:2445   .text:0000000000000e04 NUMQ2
       stm32eforth.s:2453   .text:0000000000000e20 $d
       stm32eforth.s:2472   .text:0000000000000e68 NUMQ4
ARM GAS  stm32eforth.s 			page 109


       stm32eforth.s:2454   .text:0000000000000e24 $t
       stm32eforth.s:2462   .text:0000000000000e44 $d
       stm32eforth.s:2463   .text:0000000000000e48 $t
       stm32eforth.s:2467   .text:0000000000000e58 $d
       stm32eforth.s:2469   .text:0000000000000e60 NUMQ3
       stm32eforth.s:2468   .text:0000000000000e5c $t
       stm32eforth.s:2479   .text:0000000000000e80 NUMQ5
       stm32eforth.s:2478   .text:0000000000000e7c $d
       stm32eforth.s:2480   .text:0000000000000e80 $t
       stm32eforth.s:2495   .text:0000000000000e9c $d
       stm32eforth.s:2496   .text:0000000000000ea0 _KEY
       stm32eforth.s:2498   .text:0000000000000ea4 $t
       stm32eforth.s:2499   .text:0000000000000ea4 KEY
       stm32eforth.s:2501   .text:0000000000000ea8 KEY1
       stm32eforth.s:2504   .text:0000000000000eb0 $d
       stm32eforth.s:2505   .text:0000000000000eb4 $t
       stm32eforth.s:2510   .text:0000000000000eb8 $d
       stm32eforth.s:2511   .text:0000000000000ebc _SPACE
       stm32eforth.s:2513   .text:0000000000000ec2 $t
       stm32eforth.s:2514   .text:0000000000000ec4 SPACE
       stm32eforth.s:2523   .text:0000000000000ed4 $d
       stm32eforth.s:2524   .text:0000000000000ed8 _SPACS
       stm32eforth.s:2527   .text:0000000000000ee0 SPACS
       stm32eforth.s:2530   .text:0000000000000ee8 $d
       stm32eforth.s:2531   .text:0000000000000eec $t
       stm32eforth.s:2536   .text:0000000000000efc CHAR2
       stm32eforth.s:2534   .text:0000000000000ef8 CHAR1
       stm32eforth.s:2538   .text:0000000000000f00 $d
       stm32eforth.s:2539   .text:0000000000000f04 $t
       stm32eforth.s:2544   .text:0000000000000f08 $d
       stm32eforth.s:2545   .text:0000000000000f0c _TYPEE
       stm32eforth.s:2548   .text:0000000000000f14 TYPEE
       stm32eforth.s:2556   .text:0000000000000f2c TYPE2
       stm32eforth.s:2552   .text:0000000000000f20 TYPE1
       stm32eforth.s:2558   .text:0000000000000f30 $d
       stm32eforth.s:2559   .text:0000000000000f34 $t
       stm32eforth.s:2565   .text:0000000000000f3c $d
       stm32eforth.s:2566   .text:0000000000000f40 _CR
       stm32eforth.s:2569   .text:0000000000000f44 CR
       stm32eforth.s:2572   .text:0000000000000f4c $d
       stm32eforth.s:2573   .text:0000000000000f50 $t
       stm32eforth.s:2575   .text:0000000000000f58 $d
       stm32eforth.s:2576   .text:0000000000000f5c $t
       stm32eforth.s:2587   .text:0000000000000f64 DOSTR
       stm32eforth.s:2610   .text:0000000000000f98 STRQP
       stm32eforth.s:2622   .text:0000000000000fa4 DOTST
       stm32eforth.s:2635   .text:0000000000000fb4 DOTQP
       stm32eforth.s:2644   .text:0000000000000fc4 $d
       stm32eforth.s:2645   .text:0000000000000fc8 _DOTR
       stm32eforth.s:2648   .text:0000000000000fcc DOTR
       stm32eforth.s:2662   .text:0000000000000ff0 $d
       stm32eforth.s:2663   .text:0000000000000ff4 _UDOTR
       stm32eforth.s:2665   .text:0000000000000ff8 $t
       stm32eforth.s:2666   .text:0000000000000ff8 UDOTR
       stm32eforth.s:2682   .text:0000000000001024 $d
       stm32eforth.s:2683   .text:0000000000001028 _UDOT
       stm32eforth.s:2686   .text:000000000000102c UDOT
ARM GAS  stm32eforth.s 			page 110


       stm32eforth.s:2698   .text:0000000000001048 $d
       stm32eforth.s:2699   .text:000000000000104c _DOT
       stm32eforth.s:2701   .text:000000000000104e $t
       stm32eforth.s:2702   .text:0000000000001050 DOT
       stm32eforth.s:2707   .text:0000000000001060 $d
       stm32eforth.s:2708   .text:0000000000001064 $t
       stm32eforth.s:2710   .text:000000000000106c $d
       stm32eforth.s:2713   .text:0000000000001078 DOT1
       stm32eforth.s:2711   .text:0000000000001070 $t
       stm32eforth.s:2722   .text:0000000000001088 $d
       stm32eforth.s:2723   .text:000000000000108c _QUEST
       stm32eforth.s:2725   .text:000000000000108e $t
       stm32eforth.s:2726   .text:0000000000001090 QUEST
       stm32eforth.s:2742   .text:00000000000010a0 PARS
       stm32eforth.s:2750   .text:00000000000010bc $d
       stm32eforth.s:2818   .text:00000000000011ae PARS8
       stm32eforth.s:2751   .text:00000000000010c0 $t
       stm32eforth.s:2757   .text:00000000000010d8 $d
       stm32eforth.s:2779   .text:0000000000001128 PARS3
       stm32eforth.s:2758   .text:00000000000010dc $t
       stm32eforth.s:2759   .text:00000000000010e0 PARS1
       stm32eforth.s:2767   .text:00000000000010fc $d
       stm32eforth.s:2777   .text:0000000000001124 PARS2
       stm32eforth.s:2768   .text:0000000000001100 $t
       stm32eforth.s:2770   .text:0000000000001108 $d
       stm32eforth.s:2771   .text:000000000000110c $t
       stm32eforth.s:2774   .text:0000000000001118 $d
       stm32eforth.s:2775   .text:000000000000111c $t
       stm32eforth.s:2783   .text:0000000000001134 PARS4
       stm32eforth.s:2794   .text:000000000000115c $d
       stm32eforth.s:2796   .text:0000000000001164 PARS5
       stm32eforth.s:2795   .text:0000000000001160 $t
       stm32eforth.s:2798   .text:0000000000001168 $d
       stm32eforth.s:2805   .text:0000000000001182 PARS6
       stm32eforth.s:2799   .text:000000000000116c $t
       stm32eforth.s:2801   .text:0000000000001174 $d
       stm32eforth.s:2802   .text:0000000000001178 $t
       stm32eforth.s:2811   .text:0000000000001196 PARS7
       stm32eforth.s:2827   .text:00000000000011be $d
       stm32eforth.s:2828   .text:00000000000011c2 _PARSE
       stm32eforth.s:2830   .text:00000000000011c8 $t
       stm32eforth.s:2831   .text:00000000000011c8 PARSE
       stm32eforth.s:2852   .text:0000000000001208 $d
       stm32eforth.s:2853   .text:000000000000120c _DOTPR
       stm32eforth.s:2856   .text:0000000000001210 DOTPR
       stm32eforth.s:2859   .text:0000000000001218 $d
       stm32eforth.s:2860   .text:000000000000121c $t
       stm32eforth.s:2867   .text:0000000000001228 $d
       stm32eforth.s:2868   .text:000000000000122c _PAREN
       stm32eforth.s:2870   .text:000000000000122e $t
       stm32eforth.s:2871   .text:0000000000001230 PAREN
       stm32eforth.s:2874   .text:0000000000001238 $d
       stm32eforth.s:2875   .text:000000000000123c $t
       stm32eforth.s:2882   .text:0000000000001248 $d
       stm32eforth.s:2883   .text:000000000000124c _BKSLA
       stm32eforth.s:2885   .text:000000000000124e $t
       stm32eforth.s:2886   .text:0000000000001250 BKSLA
ARM GAS  stm32eforth.s 			page 111


       stm32eforth.s:2897   .text:0000000000001268 $d
       stm32eforth.s:2898   .text:000000000000126c _CHAR
       stm32eforth.s:2901   .text:0000000000001274 CHAR
       stm32eforth.s:2912   .text:000000000000128c $d
       stm32eforth.s:2913   .text:0000000000001290 _WORDD
       stm32eforth.s:2916   .text:0000000000001298 WORDD
       stm32eforth.s:2927   .text:00000000000012b0 $d
       stm32eforth.s:2928   .text:00000000000012b4 _TOKEN
       stm32eforth.s:2930   .text:00000000000012ba $t
       stm32eforth.s:2931   .text:00000000000012bc TOKEN
       stm32eforth.s:2943   .text:00000000000012cc $d
       stm32eforth.s:2944   .text:00000000000012d0 _NAMET
       stm32eforth.s:2946   .text:00000000000012d6 $t
       stm32eforth.s:2947   .text:00000000000012d8 NAMET
       stm32eforth.s:2951   .text:00000000000012e4 $d
       stm32eforth.s:2952   .text:00000000000012e8 $t
       stm32eforth.s:2965   .text:00000000000012f8 $d
       stm32eforth.s:2966   .text:00000000000012fc _SAMEQ
       stm32eforth.s:2968   .text:0000000000001302 $t
       stm32eforth.s:2969   .text:0000000000001304 SAMEQ
       stm32eforth.s:2989   .text:000000000000134c SAME2
       stm32eforth.s:2973   .text:0000000000001310 SAME1
       stm32eforth.s:2985   .text:000000000000133c $d
       stm32eforth.s:2986   .text:0000000000001340 $t
       stm32eforth.s:2991   .text:0000000000001350 $d
       stm32eforth.s:2992   .text:0000000000001354 $t
       stm32eforth.s:2993   .text:0000000000001358 $d
       stm32eforth.s:2994   .text:000000000000135c $t
       stm32eforth.s:3006   .text:0000000000001360 FIND
       stm32eforth.s:3015   .text:0000000000001380 FIND1
       stm32eforth.s:3018   .text:0000000000001388 $d
       stm32eforth.s:3038   .text:00000000000013d0 FIND6
       stm32eforth.s:3019   .text:000000000000138c $t
       stm32eforth.s:3022   .text:0000000000001398 $d
       stm32eforth.s:3023   .text:000000000000139c $t
       stm32eforth.s:3027   .text:00000000000013ac $d
       stm32eforth.s:3031   .text:00000000000013bc FIND2
       stm32eforth.s:3028   .text:00000000000013b0 $t
       stm32eforth.s:3036   .text:00000000000013cc FIND3
       stm32eforth.s:3045   .text:00000000000013e8 FIND4
       stm32eforth.s:3047   .text:00000000000013ec $d
       stm32eforth.s:3052   .text:0000000000001400 FIND5
       stm32eforth.s:3048   .text:00000000000013f0 $t
       stm32eforth.s:3066   .text:0000000000001424 $d
       stm32eforth.s:3067   .text:0000000000001428 _NAMEQ
       stm32eforth.s:3069   .text:000000000000142e $t
       stm32eforth.s:3070   .text:0000000000001430 NAMEQ
       stm32eforth.s:3087   .text:0000000000001444 BKSP
       stm32eforth.s:3096   .text:0000000000001464 $d
       stm32eforth.s:3109   .text:000000000000148c BACK1
       stm32eforth.s:3097   .text:0000000000001468 $t
       stm32eforth.s:3098   .text:000000000000146c $d
       stm32eforth.s:3099   .text:0000000000001470 $t
       stm32eforth.s:3106   .text:0000000000001484 $d
       stm32eforth.s:3107   .text:0000000000001488 $t
       stm32eforth.s:3119   .text:0000000000001490 TAP
       stm32eforth.s:3136   .text:00000000000014ac KTAP
ARM GAS  stm32eforth.s 			page 112


       stm32eforth.s:3137   .text:00000000000014ac TTAP
       stm32eforth.s:3141   .text:00000000000014b8 $d
       stm32eforth.s:3142   .text:00000000000014bc $t
       stm32eforth.s:3144   .text:00000000000014c4 $d
       stm32eforth.s:3157   .text:00000000000014f4 KTAP2
       stm32eforth.s:3145   .text:00000000000014c8 $t
       stm32eforth.s:3146   .text:00000000000014cc $d
       stm32eforth.s:3147   .text:00000000000014d0 $t
       stm32eforth.s:3149   .text:00000000000014d8 $d
       stm32eforth.s:3154   .text:00000000000014ec KTAP1
       stm32eforth.s:3150   .text:00000000000014dc $t
       stm32eforth.s:3153   .text:00000000000014e8 $d
       stm32eforth.s:3155   .text:00000000000014ec $t
       stm32eforth.s:3167   .text:0000000000001508 $d
       stm32eforth.s:3168   .text:000000000000150c _ACCEP
       stm32eforth.s:3171   .text:0000000000001514 ACCEP
       stm32eforth.s:3176   .text:0000000000001524 ACCP1
       stm32eforth.s:3180   .text:0000000000001530 $d
       stm32eforth.s:3196   .text:0000000000001560 ACCP4
       stm32eforth.s:3181   .text:0000000000001534 $t
       stm32eforth.s:3185   .text:0000000000001544 $d
       stm32eforth.s:3186   .text:0000000000001548 $t
       stm32eforth.s:3188   .text:0000000000001550 $d
       stm32eforth.s:3191   .text:000000000000155a ACCP2
       stm32eforth.s:3189   .text:0000000000001554 $t
       stm32eforth.s:3194   .text:000000000000155e ACCP3
       stm32eforth.s:3205   .text:0000000000001570 $d
       stm32eforth.s:3206   .text:0000000000001574 _QUERY
       stm32eforth.s:3208   .text:000000000000157a $t
       stm32eforth.s:3209   .text:000000000000157c QUERY
       stm32eforth.s:3213   .text:0000000000001588 $d
       stm32eforth.s:3214   .text:000000000000158c $t
       stm32eforth.s:3219   .text:00000000000015a0 $d
       stm32eforth.s:3220   .text:00000000000015a4 $t
       stm32eforth.s:3230   .text:00000000000015b0 $d
       stm32eforth.s:3231   .text:00000000000015b4 _ABORT
       stm32eforth.s:3233   .text:00000000000015ba $t
       stm32eforth.s:3234   .text:00000000000015bc ABORT
       stm32eforth.s:3237   .text:00000000000015c4 ABORT1
       stm32eforth.s:3241   .text:00000000000015d0 $d
       stm32eforth.s:3242   .text:00000000000015d4 $t
       stm32eforth.s:3385   .text:0000000000001738 PRESE
       stm32eforth.s:3398   .text:0000000000001758 QUIT
       stm32eforth.s:3254   .text:00000000000015e4 ABORQ
       stm32eforth.s:3259   .text:00000000000015f4 $d
       stm32eforth.s:3260   .text:00000000000015f8 $t
       stm32eforth.s:3271   .text:0000000000001602 $d
       stm32eforth.s:3272   .text:0000000000001606 _INTER
       stm32eforth.s:3274   .text:0000000000001612 $t
       stm32eforth.s:3280   .text:0000000000001624 $d
       stm32eforth.s:3291   .text:0000000000001654 INTE1
       stm32eforth.s:3281   .text:0000000000001628 $t
       stm32eforth.s:3283   .text:0000000000001630 $d
       stm32eforth.s:3284   .text:0000000000001634 $t
       stm32eforth.s:3286   .text:000000000000163c $d
       stm32eforth.s:3288   .text:000000000000164a $t
       stm32eforth.s:3294   .text:000000000000165c $d
ARM GAS  stm32eforth.s 			page 113


       stm32eforth.s:3296   .text:0000000000001664 INTE2
       stm32eforth.s:3295   .text:0000000000001660 $t
       stm32eforth.s:3302   .text:0000000000001668 $d
       stm32eforth.s:3303   .text:000000000000166c _LBRAC
       stm32eforth.s:3305   .text:000000000000166e $t
       stm32eforth.s:3306   .text:0000000000001670 LBRAC
       stm32eforth.s:3309   .text:0000000000001678 $d
       stm32eforth.s:3310   .text:000000000000167c $t
       stm32eforth.s:3317   .text:0000000000001688 $d
       stm32eforth.s:3318   .text:000000000000168c _DOTOK
       stm32eforth.s:3320   .text:0000000000001690 $t
       stm32eforth.s:3321   .text:0000000000001690 DOTOK
       stm32eforth.s:3324   .text:0000000000001698 $d
       stm32eforth.s:3325   .text:000000000000169c $t
       stm32eforth.s:3329   .text:00000000000016ac $d
       stm32eforth.s:3333   .text:00000000000016b8 DOTO1
       stm32eforth.s:3330   .text:00000000000016b0 $t
       stm32eforth.s:3331   .text:00000000000016b4 $d
       stm32eforth.s:3334   .text:00000000000016b8 $t
       stm32eforth.s:3340   .text:00000000000016c0 $d
       stm32eforth.s:3341   .text:00000000000016c4 _QSTAC
       stm32eforth.s:3344   .text:00000000000016cc QSTAC
       stm32eforth.s:3349   .text:00000000000016dc $d
       stm32eforth.s:3357   .text:00000000000016ec $d
       stm32eforth.s:3358   .text:00000000000016f0 _EVAL
       stm32eforth.s:3361   .text:00000000000016f8 EVAL
       stm32eforth.s:3363   .text:00000000000016fc EVAL1
       stm32eforth.s:3368   .text:000000000000170c $d
       stm32eforth.s:3373   .text:0000000000001720 EVAL2
       stm32eforth.s:3369   .text:0000000000001710 $t
       stm32eforth.s:3381   .text:000000000000172c $d
       stm32eforth.s:3382   .text:0000000000001730 _PRESE
       stm32eforth.s:3394   .text:000000000000174c $d
       stm32eforth.s:3395   .text:0000000000001750 _QUIT
       stm32eforth.s:3401   .text:0000000000001764 QUIT1
       stm32eforth.s:3403   .text:0000000000001768 QUIT2
       stm32eforth.s:3407   .text:0000000000001774 $d
       stm32eforth.s:3416   .text:000000000000177c _UNLOCK
       stm32eforth.s:3419   .text:0000000000001784 UNLOCK
       stm32eforth.s:3422   .text:000000000000178c $d
       stm32eforth.s:3443   .text:00000000000017ae LOCK
       stm32eforth.s:3793   .text:0000000000001b98 flash_regs
       stm32eforth.s:3423   .text:0000000000001790 $t
       stm32eforth.s:3450   .text:00000000000017ba WAIT_BSY
       stm32eforth.s:3452   .text:00000000000017bc WAIT1
       stm32eforth.s:3463   .text:00000000000017c6 $d
       stm32eforth.s:3464   .text:00000000000017ca _EPAGE
       stm32eforth.s:3468   .text:00000000000017d8 EPAGE
       stm32eforth.s:3472   .text:00000000000017e4 $d
       stm32eforth.s:3473   .text:00000000000017e8 $t
       stm32eforth.s:3483   .text:0000000000001806 $d
       stm32eforth.s:3484   .text:000000000000180a $t
       stm32eforth.s:3488   .text:0000000000001818 $d
       stm32eforth.s:3490   .text:0000000000001826 $t
       stm32eforth.s:3495   .text:000000000000182c HWORD_WRITE
       stm32eforth.s:3508   .text:000000000000184e $d
       stm32eforth.s:3509   .text:0000000000001852 $t
ARM GAS  stm32eforth.s 			page 114


       stm32eforth.s:3510   .text:0000000000001856 $d
       stm32eforth.s:3512   .text:0000000000001864 $t
       stm32eforth.s:3521   .text:0000000000001868 $d
       stm32eforth.s:3522   .text:000000000000186c _ISTOR
       stm32eforth.s:3525   .text:0000000000001870 ISTOR
       stm32eforth.s:3529   .text:000000000000187c $d
       stm32eforth.s:3530   .text:0000000000001880 $t
       stm32eforth.s:3541   .text:00000000000018ac $d
       stm32eforth.s:3542   .text:00000000000018b0 $t
       stm32eforth.s:3548   .text:00000000000018b8 $d
       stm32eforth.s:3549   .text:00000000000018bc _IMG_SIZE
       stm32eforth.s:3552   .text:00000000000018c8 IMG_SIZE
       stm32eforth.s:3555   .text:00000000000018d0 $d
       stm32eforth.s:3556   .text:00000000000018d4 $t
       stm32eforth.s:3561   .text:00000000000018e8 $d
       stm32eforth.s:3562   .text:00000000000018ec $t
       stm32eforth.s:3565   .text:00000000000018f8 $d
       stm32eforth.s:3566   .text:00000000000018fc $t
       stm32eforth.s:3572   .text:0000000000001904 $d
       stm32eforth.s:3573   .text:0000000000001908 _IMGQ
       stm32eforth.s:3576   .text:0000000000001910 IMGQ
       stm32eforth.s:3588   .text:0000000000001930 $d
       stm32eforth.s:3589   .text:0000000000001934 _LOAD_IMG
       stm32eforth.s:3592   .text:0000000000001940 LOAD_IMG
       stm32eforth.s:3596   .text:000000000000194c $d
       stm32eforth.s:3598   .text:0000000000001950 $t
       stm32eforth.s:3622   .text:0000000000001998 $d
       stm32eforth.s:3623   .text:000000000000199c _ERASE_MPG
       stm32eforth.s:3625   .text:00000000000019a6 $t
       stm32eforth.s:3626   .text:00000000000019a8 ERASE_MPG
       stm32eforth.s:3688   .text:0000000000001a58 PG_TO_ADR
       stm32eforth.s:3631   .text:00000000000019b8 $d
       stm32eforth.s:3633   .text:00000000000019bc $t
       stm32eforth.s:3640   .text:00000000000019d4 $d
       stm32eforth.s:3641   .text:00000000000019d8 $t
       stm32eforth.s:3646   .text:00000000000019e0 $d
       stm32eforth.s:3647   .text:00000000000019e4 _FLSH_WR
       stm32eforth.s:3650   .text:00000000000019ec FLSH_WR
       stm32eforth.s:3651   .text:00000000000019ec $t
       stm32eforth.s:3654   .text:00000000000019f8 $d
       stm32eforth.s:3656   .text:00000000000019fc $t
       stm32eforth.s:3665   .text:0000000000001a20 $d
       stm32eforth.s:3666   .text:0000000000001a24 $t
       stm32eforth.s:3673   .text:0000000000001a34 $d
       stm32eforth.s:3674   .text:0000000000001a38 _ADR_TO_PG
       stm32eforth.s:3677   .text:0000000000001a40 ADR_TO_PG
       stm32eforth.s:3684   .text:0000000000001a4a $d
       stm32eforth.s:3685   .text:0000000000001a4e _PG_TO_ADR
       stm32eforth.s:3695   .text:0000000000001a62 $d
       stm32eforth.s:3696   .text:0000000000001a66 _ERASE_IMG
       stm32eforth.s:3698   .text:0000000000001a70 $t
       stm32eforth.s:3699   .text:0000000000001a70 ERASE_IMG
       stm32eforth.s:3705   .text:0000000000001a84 $d
       stm32eforth.s:3706   .text:0000000000001a88 $t
       stm32eforth.s:3710   .text:0000000000001a98 $d
       stm32eforth.s:3711   .text:0000000000001a9c $t
       stm32eforth.s:3716   .text:0000000000001aa4 $d
ARM GAS  stm32eforth.s 			page 115


       stm32eforth.s:3717   .text:0000000000001aa8 _SAVE_IMG
       stm32eforth.s:3720   .text:0000000000001ab4 SAVE_IMG
       stm32eforth.s:3726   .text:0000000000001ac8 $d
       stm32eforth.s:3727   .text:0000000000001acc $t
       stm32eforth.s:3730   .text:0000000000001ad8 $d
       stm32eforth.s:3732   .text:0000000000001adc $t
       stm32eforth.s:3754   .text:0000000000001b18 $d
       stm32eforth.s:3755   .text:0000000000001b1c _TURNKEY
       stm32eforth.s:3757   .text:0000000000001b24 $t
       stm32eforth.s:3758   .text:0000000000001b24 TURNKEY
       stm32eforth.s:3808   .text:0000000000001bac TICK
       stm32eforth.s:3766   .text:0000000000001b3c $d
       stm32eforth.s:3767   .text:0000000000001b40 _FORGET
       stm32eforth.s:3770   .text:0000000000001b48 FORGET
       stm32eforth.s:3776   .text:0000000000001b5c $d
       stm32eforth.s:3777   .text:0000000000001b60 $t
       stm32eforth.s:3780   .text:0000000000001b6c $d
       stm32eforth.s:3781   .text:0000000000001b70 $t
       stm32eforth.s:4251   .text:0000000000001fd8 OVERT
       stm32eforth.s:3794   .text:0000000000001b98 $d
       stm32eforth.s:3805   .text:0000000000001ba8 _TICK
       stm32eforth.s:3807   .text:0000000000001baa $t
       stm32eforth.s:3813   .text:0000000000001bbc $d
       stm32eforth.s:3815   .text:0000000000001bc4 TICK1
       stm32eforth.s:3814   .text:0000000000001bc0 $t
       stm32eforth.s:3820   .text:0000000000001bc8 $d
       stm32eforth.s:3821   .text:0000000000001bcc _ALLOT
       stm32eforth.s:3823   .text:0000000000001bd2 $t
       stm32eforth.s:3824   .text:0000000000001bd4 ALLOT
       stm32eforth.s:3833   .text:0000000000001be4 $d
       stm32eforth.s:3834   .text:0000000000001be8 _COMMA
       stm32eforth.s:3835   .text:0000000000001bea $t
       stm32eforth.s:3836   .text:0000000000001bec COMMA
       stm32eforth.s:3849   .text:0000000000001c0c $d
       stm32eforth.s:3850   .text:0000000000001c10 _BCOMP
       stm32eforth.s:3852   .text:0000000000001c1a $t
       stm32eforth.s:3853   .text:0000000000001c1c BCOMP
       stm32eforth.s:3862   .text:0000000000001c2c $d
       stm32eforth.s:3863   .text:0000000000001c30 _COMPI
       stm32eforth.s:3865   .text:0000000000001c38 $t
       stm32eforth.s:3866   .text:0000000000001c38 COMPI
       stm32eforth.s:4317   .text:0000000000002076 CALLC
       stm32eforth.s:3881   .text:0000000000001c60 $d
       stm32eforth.s:3882   .text:0000000000001c64 _LITER
       stm32eforth.s:3884   .text:0000000000001c6c $t
       stm32eforth.s:3885   .text:0000000000001c6c LITER
       stm32eforth.s:3888   .text:0000000000001c74 $d
       stm32eforth.s:3889   .text:0000000000001c78 $t
       stm32eforth.s:3899   .text:0000000000001c80 STRCQ
       stm32eforth.s:3902   .text:0000000000001c88 $d
       stm32eforth.s:3903   .text:0000000000001c8c $t
       stm32eforth.s:3906   .text:0000000000001c98 $d
       stm32eforth.s:3907   .text:0000000000001c9c $t
       stm32eforth.s:3921   .text:0000000000001cb8 $d
       stm32eforth.s:3922   .text:0000000000001cbc _FOR
       stm32eforth.s:3924   .text:0000000000001cc0 $t
       stm32eforth.s:3925   .text:0000000000001cc0 FOR
ARM GAS  stm32eforth.s 			page 116


       stm32eforth.s:3928   .text:0000000000001cc8 $d
       stm32eforth.s:3929   .text:0000000000001ccc $t
       stm32eforth.s:3935   .text:0000000000001cd4 $d
       stm32eforth.s:3936   .text:0000000000001cd8 _BEGIN
       stm32eforth.s:3938   .text:0000000000001cde $t
       stm32eforth.s:3939   .text:0000000000001ce0 BEGIN
       stm32eforth.s:3947   .text:0000000000001cec $d
       stm32eforth.s:3948   .text:0000000000001cf0 _NEXT
       stm32eforth.s:3951   .text:0000000000001cf8 NEXT
       stm32eforth.s:3954   .text:0000000000001d00 $d
       stm32eforth.s:3955   .text:0000000000001d04 $t
       stm32eforth.s:3961   .text:0000000000001d0c $d
       stm32eforth.s:3962   .text:0000000000001d10 _UNTIL
       stm32eforth.s:3964   .text:0000000000001d16 $t
       stm32eforth.s:3965   .text:0000000000001d18 UNTIL
       stm32eforth.s:3968   .text:0000000000001d20 $d
       stm32eforth.s:3969   .text:0000000000001d24 $t
       stm32eforth.s:3975   .text:0000000000001d2c $d
       stm32eforth.s:3976   .text:0000000000001d30 _AGAIN
       stm32eforth.s:3978   .text:0000000000001d36 $t
       stm32eforth.s:3979   .text:0000000000001d38 AGAIN
       stm32eforth.s:3982   .text:0000000000001d40 $d
       stm32eforth.s:3983   .text:0000000000001d44 $t
       stm32eforth.s:3989   .text:0000000000001d4c $d
       stm32eforth.s:3990   .text:0000000000001d50 _IFF
       stm32eforth.s:3993   .text:0000000000001d54 IFF
       stm32eforth.s:3996   .text:0000000000001d5c $d
       stm32eforth.s:3997   .text:0000000000001d60 $t
       stm32eforth.s:3999   .text:0000000000001d68 $d
       stm32eforth.s:4000   .text:0000000000001d6c $t
       stm32eforth.s:4007   .text:0000000000001d78 $d
       stm32eforth.s:4008   .text:0000000000001d7c _AHEAD
       stm32eforth.s:4010   .text:0000000000001d82 $t
       stm32eforth.s:4011   .text:0000000000001d84 AHEAD
       stm32eforth.s:4014   .text:0000000000001d8c $d
       stm32eforth.s:4015   .text:0000000000001d90 $t
       stm32eforth.s:4017   .text:0000000000001d98 $d
       stm32eforth.s:4018   .text:0000000000001d9c $t
       stm32eforth.s:4025   .text:0000000000001da8 $d
       stm32eforth.s:4026   .text:0000000000001dac _REPEA
       stm32eforth.s:4029   .text:0000000000001db4 REPEA
       stm32eforth.s:4040   .text:0000000000001dcc $d
       stm32eforth.s:4041   .text:0000000000001dd0 _THENN
       stm32eforth.s:4044   .text:0000000000001dd8 THENN
       stm32eforth.s:4054   .text:0000000000001dec $d
       stm32eforth.s:4055   .text:0000000000001df0 _AFT
       stm32eforth.s:4057   .text:0000000000001df4 $t
       stm32eforth.s:4058   .text:0000000000001df4 AFT
       stm32eforth.s:4069   .text:0000000000001e0c $d
       stm32eforth.s:4070   .text:0000000000001e10 _ELSEE
       stm32eforth.s:4073   .text:0000000000001e18 ELSEE
       stm32eforth.s:4083   .text:0000000000001e2c $d
       stm32eforth.s:4084   .text:0000000000001e30 _WHILE
       stm32eforth.s:4086   .text:0000000000001e36 $t
       stm32eforth.s:4087   .text:0000000000001e38 WHILE
       stm32eforth.s:4096   .text:0000000000001e48 $d
       stm32eforth.s:4097   .text:0000000000001e4c _ABRTQ
ARM GAS  stm32eforth.s 			page 117


       stm32eforth.s:4100   .text:0000000000001e54 ABRTQ
       stm32eforth.s:4103   .text:0000000000001e5c $d
       stm32eforth.s:4104   .text:0000000000001e60 $t
       stm32eforth.s:4110   .text:0000000000001e68 $d
       stm32eforth.s:4111   .text:0000000000001e6c _STRQ
       stm32eforth.s:4114   .text:0000000000001e70 STRQ
       stm32eforth.s:4117   .text:0000000000001e78 $d
       stm32eforth.s:4118   .text:0000000000001e7c $t
       stm32eforth.s:4124   .text:0000000000001e84 $d
       stm32eforth.s:4125   .text:0000000000001e88 _DOTQ
       stm32eforth.s:4128   .text:0000000000001e8c DOTQ
       stm32eforth.s:4131   .text:0000000000001e94 $d
       stm32eforth.s:4132   .text:0000000000001e98 $t
       stm32eforth.s:4141   .text:0000000000001ea0 $d
       stm32eforth.s:4142   .text:0000000000001ea4 _UNIQU
       stm32eforth.s:4144   .text:0000000000001eac $t
       stm32eforth.s:4145   .text:0000000000001eac UNIQU
       stm32eforth.s:4150   .text:0000000000001ebc $d
       stm32eforth.s:4158   .text:0000000000001ed8 UNIQ1
       stm32eforth.s:4151   .text:0000000000001ec0 $t
       stm32eforth.s:4152   .text:0000000000001ec4 $d
       stm32eforth.s:4154   .text:0000000000001ecc $t
       stm32eforth.s:4169   .text:0000000000001ee0 SNAME
       stm32eforth.s:4174   .text:0000000000001ef0 $d
       stm32eforth.s:4188   .text:0000000000001f28 SNAM1
       stm32eforth.s:4175   .text:0000000000001ef4 $t
       stm32eforth.s:4190   .text:0000000000001f2c $d
       stm32eforth.s:4192   .text:0000000000001f34 $t
       stm32eforth.s:4197   .text:0000000000001f38 $d
       stm32eforth.s:4198   .text:0000000000001f3c _SCOMP
       stm32eforth.s:4201   .text:0000000000001f48 SCOMP
       stm32eforth.s:4206   .text:0000000000001f58 $d
       stm32eforth.s:4218   .text:0000000000001f84 SCOM2
       stm32eforth.s:4207   .text:0000000000001f5c $t
       stm32eforth.s:4209   .text:0000000000001f64 $d
       stm32eforth.s:4210   .text:0000000000001f68 $t
       stm32eforth.s:4212   .text:0000000000001f70 $d
       stm32eforth.s:4215   .text:0000000000001f7c SCOM1
       stm32eforth.s:4213   .text:0000000000001f74 $t
       stm32eforth.s:4221   .text:0000000000001f8c $d
       stm32eforth.s:4224   .text:0000000000001f98 SCOM3
       stm32eforth.s:4222   .text:0000000000001f90 $t
       stm32eforth.s:4231   .text:0000000000001fa0 COLON_ABORT
       stm32eforth.s:4247   .text:0000000000001fcc $d
       stm32eforth.s:4248   .text:0000000000001fd0 _OVERT
       stm32eforth.s:4250   .text:0000000000001fd6 $t
       stm32eforth.s:4262   .text:0000000000001ff0 $d
       stm32eforth.s:4263   .text:0000000000001ff4 _SEMIS
       stm32eforth.s:4265   .text:0000000000001ff6 $t
       stm32eforth.s:4266   .text:0000000000001ff8 SEMIS
       stm32eforth.s:4278   .text:0000000000002014 $d
       stm32eforth.s:4279   .text:0000000000002018 _RBRAC
       stm32eforth.s:4281   .text:000000000000201a $t
       stm32eforth.s:4282   .text:000000000000201c RBRAC
       stm32eforth.s:4285   .text:0000000000002024 $d
       stm32eforth.s:4286   .text:0000000000002028 $t
       stm32eforth.s:4294   .text:0000000000002034 COMPILE_BLW
ARM GAS  stm32eforth.s 			page 118


       stm32eforth.s:4331   .text:0000000000002096 $d
       stm32eforth.s:4332   .text:000000000000209a _COLON
       stm32eforth.s:4334   .text:000000000000209c $t
       stm32eforth.s:4335   .text:000000000000209c COLON
       stm32eforth.s:4348   .text:00000000000020bc $d
       stm32eforth.s:4349   .text:00000000000020c0 _IMMED
       stm32eforth.s:4351   .text:00000000000020ca $t
       stm32eforth.s:4352   .text:00000000000020cc IMMED
       stm32eforth.s:4355   .text:00000000000020d4 $d
       stm32eforth.s:4356   .text:00000000000020d8 $t
       stm32eforth.s:4371   .text:00000000000020f8 $d
       stm32eforth.s:4372   .text:00000000000020fc _CONST
       stm32eforth.s:4375   .text:0000000000002108 CONST
       stm32eforth.s:4384   .text:0000000000002128 $d
       stm32eforth.s:4385   .text:000000000000212c $t
       stm32eforth.s:4393   .text:0000000000002138 DODOES
       stm32eforth.s:4416   .text:0000000000002178 $d
       stm32eforth.s:4417   .text:000000000000217c _DOES
       stm32eforth.s:4419   .text:0000000000002182 $t
       stm32eforth.s:4420   .text:0000000000002184 DOES
       stm32eforth.s:4423   .text:000000000000218c $d
       stm32eforth.s:4424   .text:0000000000002190 $t
       stm32eforth.s:4432   .text:00000000000021b0 $d
       stm32eforth.s:4433   .text:00000000000021b4 $t
       stm32eforth.s:4435   .text:00000000000021bc $d
       stm32eforth.s:4436   .text:00000000000021c0 $t
       stm32eforth.s:4443   .text:00000000000021c8 $d
       stm32eforth.s:4444   .text:00000000000021cc _CREAT
       stm32eforth.s:4447   .text:00000000000021d4 CREAT
       stm32eforth.s:4456   .text:00000000000021f4 $d
       stm32eforth.s:4457   .text:00000000000021f8 $t
       stm32eforth.s:4463   .text:0000000000002200 $d
       stm32eforth.s:4464   .text:0000000000002204 _VARIA
       stm32eforth.s:4467   .text:0000000000002210 VARIA
       stm32eforth.s:4471   .text:000000000000221c $d
       stm32eforth.s:4472   .text:0000000000002220 $t
       stm32eforth.s:4486   .text:0000000000002228 DMP
       stm32eforth.s:4490   .text:0000000000002234 $d
       stm32eforth.s:4491   .text:0000000000002238 $t
       stm32eforth.s:4502   .text:0000000000002260 PDUM2
       stm32eforth.s:4495   .text:0000000000002248 PDUM1
       stm32eforth.s:4499   .text:0000000000002254 $d
       stm32eforth.s:4500   .text:0000000000002258 $t
       stm32eforth.s:4504   .text:0000000000002264 $d
       stm32eforth.s:4505   .text:0000000000002268 $t
       stm32eforth.s:4510   .text:000000000000226c $d
       stm32eforth.s:4511   .text:0000000000002270 _DUMP
       stm32eforth.s:4514   .text:0000000000002278 DUMP
       stm32eforth.s:4521   .text:0000000000002290 $d
       stm32eforth.s:4522   .text:0000000000002294 $t
       stm32eforth.s:4536   .text:00000000000022c8 DUMP4
       stm32eforth.s:4525   .text:00000000000022a0 DUMP1
       stm32eforth.s:4528   .text:00000000000022a8 $d
       stm32eforth.s:4529   .text:00000000000022ac $t
       stm32eforth.s:4538   .text:00000000000022cc $d
       stm32eforth.s:4539   .text:00000000000022d0 DUMP3
       stm32eforth.s:4540   .text:00000000000022d0 $t
ARM GAS  stm32eforth.s 			page 119


       stm32eforth.s:4549   .text:00000000000022e4 $d
       stm32eforth.s:4550   .text:00000000000022e8 _DOTS
       stm32eforth.s:4554   .text:00000000000022ec DOTS
       stm32eforth.s:4564   .text:000000000000230c DOTS2
       stm32eforth.s:4560   .text:0000000000002300 DOTS1
       stm32eforth.s:4566   .text:0000000000002310 $d
       stm32eforth.s:4567   .text:0000000000002314 $t
       stm32eforth.s:4573   .text:000000000000231c $d
       stm32eforth.s:4574   .text:0000000000002320 _TNAME
       stm32eforth.s:4576   .text:0000000000002326 $t
       stm32eforth.s:4577   .text:0000000000002328 TNAME
       stm32eforth.s:4582   .text:0000000000002338 TNAM1
       stm32eforth.s:4585   .text:0000000000002340 $d
       stm32eforth.s:4595   .text:0000000000002368 TNAM2
       stm32eforth.s:4586   .text:0000000000002344 $t
       stm32eforth.s:4591   .text:0000000000002358 $d
       stm32eforth.s:4592   .text:000000000000235c $t
       stm32eforth.s:4603   .text:0000000000002374 $d
       stm32eforth.s:4604   .text:0000000000002378 _DOTID
       stm32eforth.s:4606   .text:000000000000237c $t
       stm32eforth.s:4607   .text:000000000000237c DOTID
       stm32eforth.s:4611   .text:0000000000002388 $d
       stm32eforth.s:4618   .text:00000000000023a4 DOTI1
       stm32eforth.s:4612   .text:000000000000238c $t
       stm32eforth.s:4614   .text:0000000000002394 $d
       stm32eforth.s:4615   .text:0000000000002398 $t
       stm32eforth.s:4620   .text:00000000000023a8 $d
       stm32eforth.s:4622   .text:00000000000023b2 $t
       stm32eforth.s:4625   *ABS*:0000000000000001 WANT_SEE
       stm32eforth.s:4630   .text:00000000000023b8 DOTCA
       stm32eforth.s:4635   .text:00000000000023c8 $d
       stm32eforth.s:4636   .text:00000000000023cc $t
       stm32eforth.s:4641   .text:00000000000023d4 CODE_ABORT
       stm32eforth.s:4647   .text:00000000000023e8 $d
       stm32eforth.s:4648   .text:00000000000023ec $t
       stm32eforth.s:4650   .text:00000000000023f4 $d
       stm32eforth.s:4651   .text:00000000000023f8 $t
       stm32eforth.s:4653   .text:0000000000002400 $d
       stm32eforth.s:4655   .text:000000000000240a $t
       stm32eforth.s:4658   .text:0000000000002410 $d
       stm32eforth.s:4667   .text:0000000000002420 UNNESTQ
       stm32eforth.s:4672   .text:0000000000002430 $d
       stm32eforth.s:4673   .text:0000000000002434 $t
       stm32eforth.s:4676   .text:0000000000002440 $d
       stm32eforth.s:4677   .text:0000000000002444 $t
       stm32eforth.s:4678   .text:0000000000002448 $d
       stm32eforth.s:4686   .text:0000000000002458 NONAMEQ
       stm32eforth.s:4689   .text:0000000000002460 $d
       stm32eforth.s:4690   .text:0000000000002464 $t
       stm32eforth.s:4692   .text:000000000000246c $d
       stm32eforth.s:5010   .rodata:0000000000000000 NONAME_SUB
       stm32eforth.s:4693   .text:0000000000002470 $t
       stm32eforth.s:4699   .text:0000000000002488 $d
       stm32eforth.s:4700   .text:000000000000248c $t
       stm32eforth.s:4702   .text:0000000000002494 $d
       stm32eforth.s:4703   .text:0000000000002498 $t
       stm32eforth.s:4707   .text:00000000000024a8 $d
ARM GAS  stm32eforth.s 			page 120


       stm32eforth.s:4708   .text:00000000000024ac $t
       stm32eforth.s:4710   .text:00000000000024b4 $d
       stm32eforth.s:4711   .text:00000000000024b8 $t
       stm32eforth.s:4713   .text:00000000000024c0 $d
       stm32eforth.s:5016   .rodata:000000000000003c ANONYMOUS
       stm32eforth.s:4714   .text:00000000000024c4 $t
       stm32eforth.s:4732   .text:00000000000024f4 DOTNONAME
       stm32eforth.s:4736   .text:0000000000002500 $d
       stm32eforth.s:4737   .text:0000000000002504 $t
       stm32eforth.s:4744   .text:0000000000002514 IS_BLW
       stm32eforth.s:4747   .text:000000000000251c $d
       stm32eforth.s:4748   .text:0000000000002520 $t
       stm32eforth.s:4758   .text:0000000000002538 $d
       stm32eforth.s:4759   .text:000000000000253c _SEE
       stm32eforth.s:4761   .text:0000000000002540 $t
       stm32eforth.s:4762   .text:0000000000002540 SEE
       stm32eforth.s:4772   .text:0000000000002564 $d
       stm32eforth.s:4773   .text:0000000000002568 $t
       stm32eforth.s:4774   .text:000000000000256c SEE1
       stm32eforth.s:4779   .text:000000000000257c $d
       stm32eforth.s:4780   .text:0000000000002580 $t
       stm32eforth.s:4786   .text:0000000000002598 $d
       stm32eforth.s:4787   .text:000000000000259c $t
       stm32eforth.s:4790   .text:00000000000025a8 $d
       stm32eforth.s:4791   .text:00000000000025ac $t
       stm32eforth.s:4839   .text:000000000000263c DECOMP
       stm32eforth.s:4796   .text:00000000000025c0 $d
       stm32eforth.s:4797   .text:00000000000025c4 $t
       stm32eforth.s:4799   .text:00000000000025cc $d
       stm32eforth.s:4800   .text:00000000000025d0 $t
       stm32eforth.s:4812   .text:00000000000025ec BLADR
       stm32eforth.s:4834   .text:000000000000262e $d
       stm32eforth.s:4835   .text:0000000000002632 _DECOM
       stm32eforth.s:4837   .text:000000000000263c $t
       stm32eforth.s:4846   .text:0000000000002654 $d
       stm32eforth.s:4876   .text:00000000000026b0 DECOM2
       stm32eforth.s:4848   .text:0000000000002658 $t
       stm32eforth.s:4849   .text:000000000000265c $d
       stm32eforth.s:4851   .text:0000000000002660 $t
       stm32eforth.s:4859   .text:000000000000267c $d
       stm32eforth.s:4862   .text:0000000000002688 DECOMP1
       stm32eforth.s:4860   .text:0000000000002680 $t
       stm32eforth.s:4861   .text:0000000000002684 $d
       stm32eforth.s:4864   .text:000000000000268c DECOMP3
       stm32eforth.s:4863   .text:0000000000002688 $t
       stm32eforth.s:4889   .text:00000000000026d0 $d
       stm32eforth.s:4893   .text:00000000000026d4 _WORDS
       stm32eforth.s:4895   .text:00000000000026da $t
       stm32eforth.s:4896   .text:00000000000026dc WORDS
       stm32eforth.s:4901   .text:00000000000026ec WORS1
       stm32eforth.s:4904   .text:00000000000026f4 $d
       stm32eforth.s:4911   .text:0000000000002710 WORS2
       stm32eforth.s:4905   .text:00000000000026f8 $t
       stm32eforth.s:4924   .text:0000000000002714 VERSN
       stm32eforth.s:4927   .text:000000000000271c $d
       stm32eforth.s:4928   .text:0000000000002720 $t
       stm32eforth.s:4933   .text:0000000000002724 $d
ARM GAS  stm32eforth.s 			page 121


       stm32eforth.s:4934   .text:0000000000002728 _HI
       stm32eforth.s:4941   .text:0000000000002738 $d
       stm32eforth.s:4943   .text:0000000000002750 $t
       stm32eforth.s:4952   .text:0000000000002770 $d
       stm32eforth.s:4953   .text:0000000000002774 $t
       stm32eforth.s:4965   .text:0000000000002794 $d
       stm32eforth.s:4971   .text:00000000000027a0 $t
       stm32eforth.s:4977   .text:00000000000027c0 COLD1
       stm32eforth.s:4979   .text:00000000000027c4 $d
       stm32eforth.s:4980   .text:00000000000027c8 $t
       stm32eforth.s:4982   .text:00000000000027d0 $d
       stm32eforth.s:4983   .text:00000000000027d4 $t
       stm32eforth.s:4984   .text:00000000000027d8 $d
       stm32eforth.s:4985   .text:00000000000027dc $t
       stm32eforth.s:4986   .text:00000000000027e0 $d
       stm32eforth.s:4987   .text:00000000000027e4 $t
       stm32eforth.s:4993   .text:00000000000027f4 $d
       stm32eforth.s:4994   .text:00000000000027f8 $t
       stm32eforth.s:4999   .text:000000000000280c COLD2
       stm32eforth.s:5002   .text:000000000000280c $d
       stm32eforth.s:5009   .rodata:0000000000000000 $d
       stm32eforth.s:5020   .rodata:0000000000000074 BRAN_LBL
       stm32eforth.s:5024   .rodata:0000000000000080 QBRAN_LBL
       stm32eforth.s:5028   .rodata:000000000000008c DOLIT_LBL
       stm32eforth.s:5032   .rodata:0000000000000098 DONEXT_LBL
       stm32eforth.s:5036   .rodata:00000000000000a4 DODOES_LBL
       stm32eforth.s:5040   .rodata:00000000000000b0 DOVAR_LBL
       stm32eforth.s:5044   .rodata:00000000000000bc DOCON_LBL
       stm32eforth.s:5048   .rodata:00000000000000c8 IS_BLW_LBL
       stm32eforth.s:5052   .rodata:00000000000000d4 DOTQP_LBL
       stm32eforth.s:5056   .rodata:00000000000000d8 BLADR_LBL
       stm32eforth.s:5060   .rodata:00000000000000e4 DOTCA_LBL
       stm32eforth.s:5064   .rodata:00000000000000f0 NONAMEQ_LBL
       stm32eforth.s:5068   .rodata:00000000000000fc STRCQ_LBL
       stm32eforth.s:5072   .rodata:0000000000000104 VERSN_LBL
       stm32eforth.s:5078   .user:0000000000000000 $d
       stm32eforth.s:611    .text:000000000000007b $d
       stm32eforth.s:611    .text:000000000000007c $t
       stm32eforth.s:655    .text:00000000000000f9 $d
       stm32eforth.s:655    .text:00000000000000fa $t
       stm32eforth.s:674    .text:0000000000000121 $d
       stm32eforth.s:674    .text:0000000000000122 $t
       stm32eforth.s:699    .text:0000000000000159 $d
       stm32eforth.s:699    .text:000000000000015a $t
       stm32eforth.s:811    .text:00000000000001ef $d
       stm32eforth.s:811    .text:00000000000001f0 $t
       stm32eforth.s:845    .text:000000000000021b $d
       stm32eforth.s:845    .text:000000000000021c $t
       stm32eforth.s:858    .text:000000000000022f $d
       stm32eforth.s:858    .text:0000000000000230 $t
       stm32eforth.s:869    .text:000000000000023b $d
       stm32eforth.s:869    .text:000000000000023c $t
       stm32eforth.s:881    .text:000000000000024d $d
       stm32eforth.s:881    .text:000000000000024e $t
       stm32eforth.s:893    .text:000000000000025f $d
       stm32eforth.s:893    .text:0000000000000260 $t
       stm32eforth.s:917    .text:0000000000000285 $d
ARM GAS  stm32eforth.s 			page 122


       stm32eforth.s:917    .text:0000000000000286 $t
       stm32eforth.s:939    .text:00000000000002a7 $d
       stm32eforth.s:939    .text:00000000000002a8 $t
       stm32eforth.s:952    .text:00000000000002b9 $d
       stm32eforth.s:952    .text:00000000000002ba $t
       stm32eforth.s:964    .text:00000000000002cb $d
       stm32eforth.s:964    .text:00000000000002cc $t
       stm32eforth.s:989    .text:00000000000002f3 $d
       stm32eforth.s:989    .text:00000000000002f4 $t
       stm32eforth.s:1030   .text:0000000000000337 $d
       stm32eforth.s:1030   .text:0000000000000338 $t
       stm32eforth.s:1042   .text:000000000000034d $d
       stm32eforth.s:1042   .text:000000000000034e $t
       stm32eforth.s:1104   .text:00000000000003a7 $d
       stm32eforth.s:1104   .text:00000000000003a8 $t
       stm32eforth.s:1118   .text:00000000000003bb $d
       stm32eforth.s:1118   .text:00000000000003bc $t
       stm32eforth.s:1129   .text:00000000000003c9 $d
       stm32eforth.s:1129   .text:00000000000003ca $t
       stm32eforth.s:1140   .text:00000000000003d9 $d
       stm32eforth.s:1140   .text:00000000000003da $t
       stm32eforth.s:1151   .text:00000000000003e9 $d
       stm32eforth.s:1151   .text:00000000000003ea $t
       stm32eforth.s:1184   .text:0000000000000419 $d
       stm32eforth.s:1184   .text:000000000000041a $t
       stm32eforth.s:1218   .text:000000000000044d $d
       stm32eforth.s:1218   .text:000000000000044e $t
       stm32eforth.s:1229   .text:000000000000045d $d
       stm32eforth.s:1229   .text:000000000000045e $t
       stm32eforth.s:1240   .text:000000000000046f $d
       stm32eforth.s:1240   .text:0000000000000470 $t
       stm32eforth.s:1279   .text:00000000000004ab $d
       stm32eforth.s:1279   .text:00000000000004ac $t
       stm32eforth.s:1292   .text:00000000000004bf $d
       stm32eforth.s:1292   .text:00000000000004c0 $t
       stm32eforth.s:1319   .text:00000000000004ed $d
       stm32eforth.s:1319   .text:00000000000004ee $t
       stm32eforth.s:1343   .text:0000000000000511 $d
       stm32eforth.s:1343   .text:0000000000000512 $t
       stm32eforth.s:1372   .text:000000000000053f $d
       stm32eforth.s:1372   .text:0000000000000540 $t
       stm32eforth.s:1445   .text:00000000000005af $d
       stm32eforth.s:1445   .text:00000000000005b0 $t
       stm32eforth.s:1460   .text:00000000000005c7 $d
       stm32eforth.s:1460   .text:00000000000005c8 $t
       stm32eforth.s:1475   .text:00000000000005e3 $d
       stm32eforth.s:1475   .text:00000000000005e4 $t
       stm32eforth.s:1547   .text:0000000000000641 $d
       stm32eforth.s:1547   .text:0000000000000642 $t
       stm32eforth.s:1558   .text:0000000000000657 $d
       stm32eforth.s:1558   .text:0000000000000658 $t
       stm32eforth.s:1581   .text:000000000000067f $d
       stm32eforth.s:1581   .text:0000000000000680 $t
       stm32eforth.s:1605   .text:00000000000006a7 $d
       stm32eforth.s:1605   .text:00000000000006a8 $t
       stm32eforth.s:1629   .text:00000000000006c5 $d
       stm32eforth.s:1629   .text:00000000000006c6 $t
ARM GAS  stm32eforth.s 			page 123


       stm32eforth.s:1653   .text:00000000000006ef $d
       stm32eforth.s:1653   .text:00000000000006f0 $t
       stm32eforth.s:1702   .text:0000000000000741 $d
       stm32eforth.s:1702   .text:0000000000000742 $t
       stm32eforth.s:1725   .text:000000000000076b $d
       stm32eforth.s:1725   .text:000000000000076c $t
       stm32eforth.s:1740   .text:0000000000000785 $d
       stm32eforth.s:1740   .text:0000000000000786 $t
       stm32eforth.s:1753   .text:00000000000007a1 $d
       stm32eforth.s:1753   .text:00000000000007a2 $t
       stm32eforth.s:1776   .text:00000000000007d9 $d
       stm32eforth.s:1776   .text:00000000000007da $t
       stm32eforth.s:1792   .text:00000000000007f1 $d
       stm32eforth.s:1792   .text:00000000000007f2 $t
       stm32eforth.s:1811   .text:000000000000081f $d
       stm32eforth.s:1811   .text:0000000000000820 $t
       stm32eforth.s:1881   .text:00000000000008cd $d
       stm32eforth.s:1881   .text:00000000000008ce $t
       stm32eforth.s:1938   .text:0000000000000947 $d
       stm32eforth.s:1938   .text:0000000000000948 $t
       stm32eforth.s:2008   .text:00000000000009e7 $d
       stm32eforth.s:2008   .text:00000000000009e8 $t
       stm32eforth.s:2027   .text:0000000000000a0d $d
       stm32eforth.s:2027   .text:0000000000000a0e $t
       stm32eforth.s:2065   .text:0000000000000a55 $d
       stm32eforth.s:2065   .text:0000000000000a56 $t
       stm32eforth.s:2104   .text:0000000000000a9f $d
       stm32eforth.s:2104   .text:0000000000000aa0 $t
       stm32eforth.s:2128   .text:0000000000000acf $d
       stm32eforth.s:2128   .text:0000000000000ad0 $t
       stm32eforth.s:2151   .text:0000000000000afb $d
       stm32eforth.s:2151   .text:0000000000000afc $t
       stm32eforth.s:2220   .text:0000000000000bb7 $d
       stm32eforth.s:2220   .text:0000000000000bb8 $t
       stm32eforth.s:2234   .text:0000000000000bd5 $d
       stm32eforth.s:2234   .text:0000000000000bd6 $t
       stm32eforth.s:2267   .text:0000000000000c23 $d
       stm32eforth.s:2267   .text:0000000000000c24 $t
       stm32eforth.s:2285   .text:0000000000000c47 $d
       stm32eforth.s:2285   .text:0000000000000c48 $t
       stm32eforth.s:2303   .text:0000000000000c6f $d
       stm32eforth.s:2303   .text:0000000000000c70 $t
       stm32eforth.s:2372   .text:0000000000000d07 $d
       stm32eforth.s:2372   .text:0000000000000d08 $t
       stm32eforth.s:2526   .text:0000000000000edf $d
       stm32eforth.s:2526   .text:0000000000000ee0 $t
       stm32eforth.s:2547   .text:0000000000000f11 $d
       stm32eforth.s:2547   .text:0000000000000f12 $t
       stm32eforth.s:2568   .text:0000000000000f43 $d
       stm32eforth.s:2568   .text:0000000000000f44 $t
       stm32eforth.s:2647   .text:0000000000000fcb $d
       stm32eforth.s:2647   .text:0000000000000fcc $t
       stm32eforth.s:2685   .text:000000000000102b $d
       stm32eforth.s:2685   .text:000000000000102c $t
       stm32eforth.s:2855   .text:000000000000120f $d
       stm32eforth.s:2855   .text:0000000000001210 $t
       stm32eforth.s:2900   .text:0000000000001271 $d
ARM GAS  stm32eforth.s 			page 124


       stm32eforth.s:2900   .text:0000000000001272 $t
       stm32eforth.s:2915   .text:0000000000001295 $d
       stm32eforth.s:2915   .text:0000000000001296 $t
       stm32eforth.s:3170   .text:0000000000001513 $d
       stm32eforth.s:3170   .text:0000000000001514 $t
       stm32eforth.s:3343   .text:00000000000016cb $d
       stm32eforth.s:3343   .text:00000000000016cc $t
       stm32eforth.s:3351   .text:00000000000016e7 $d
       stm32eforth.s:3351   .text:00000000000016e8 $t
       stm32eforth.s:3360   .text:00000000000016f5 $d
       stm32eforth.s:3360   .text:00000000000016f6 $t
       stm32eforth.s:3384   .text:0000000000001737 $d
       stm32eforth.s:3384   .text:0000000000001738 $t
       stm32eforth.s:3397   .text:0000000000001755 $d
       stm32eforth.s:3397   .text:0000000000001756 $t
       stm32eforth.s:3418   .text:0000000000001783 $d
       stm32eforth.s:3418   .text:0000000000001784 $t
       stm32eforth.s:3466   .text:00000000000017d5 $d
       stm32eforth.s:3466   .text:00000000000017d6 $t
       stm32eforth.s:3524   .text:000000000000186f $d
       stm32eforth.s:3524   .text:0000000000001870 $t
       stm32eforth.s:3551   .text:00000000000018c5 $d
       stm32eforth.s:3551   .text:00000000000018c6 $t
       stm32eforth.s:3575   .text:000000000000190d $d
       stm32eforth.s:3575   .text:000000000000190e $t
       stm32eforth.s:3591   .text:000000000000193d $d
       stm32eforth.s:3591   .text:000000000000193e $t
       stm32eforth.s:3676   .text:0000000000001a3f $d
       stm32eforth.s:3676   .text:0000000000001a40 $t
       stm32eforth.s:3687   .text:0000000000001a55 $d
       stm32eforth.s:3687   .text:0000000000001a56 $t
       stm32eforth.s:3719   .text:0000000000001ab1 $d
       stm32eforth.s:3719   .text:0000000000001ab2 $t
       stm32eforth.s:3769   .text:0000000000001b47 $d
       stm32eforth.s:3769   .text:0000000000001b48 $t
       stm32eforth.s:3950   .text:0000000000001cf5 $d
       stm32eforth.s:3950   .text:0000000000001cf6 $t
       stm32eforth.s:3992   .text:0000000000001d53 $d
       stm32eforth.s:3992   .text:0000000000001d54 $t
       stm32eforth.s:4028   .text:0000000000001db3 $d
       stm32eforth.s:4028   .text:0000000000001db4 $t
       stm32eforth.s:4043   .text:0000000000001dd5 $d
       stm32eforth.s:4043   .text:0000000000001dd6 $t
       stm32eforth.s:4072   .text:0000000000001e15 $d
       stm32eforth.s:4072   .text:0000000000001e16 $t
       stm32eforth.s:4099   .text:0000000000001e53 $d
       stm32eforth.s:4099   .text:0000000000001e54 $t
       stm32eforth.s:4113   .text:0000000000001e6f $d
       stm32eforth.s:4113   .text:0000000000001e70 $t
       stm32eforth.s:4127   .text:0000000000001e8b $d
       stm32eforth.s:4127   .text:0000000000001e8c $t
       stm32eforth.s:4200   .text:0000000000001f45 $d
       stm32eforth.s:4200   .text:0000000000001f46 $t
       stm32eforth.s:4374   .text:0000000000002105 $d
       stm32eforth.s:4374   .text:0000000000002106 $t
       stm32eforth.s:4446   .text:00000000000021d3 $d
       stm32eforth.s:4446   .text:00000000000021d4 $t
ARM GAS  stm32eforth.s 			page 125


       stm32eforth.s:4466   .text:000000000000220d $d
       stm32eforth.s:4466   .text:000000000000220e $t
       stm32eforth.s:4513   .text:0000000000002275 $d
       stm32eforth.s:4513   .text:0000000000002276 $t
       stm32eforth.s:4553   .text:00000000000022eb $d
       stm32eforth.s:4553   .text:00000000000022ec $t
       stm32eforth.s:4660   .text:0000000000002415 $d
       stm32eforth.s:4660   .text:0000000000002416 $t
       stm32eforth.s:4680   .text:000000000000244f $d
       stm32eforth.s:4680   .text:0000000000002450 $t
       stm32eforth.s:4936   .text:000000000000272b $d
       stm32eforth.s:4936   .text:000000000000272c $t
       stm32eforth.s:275    .inflash:000000000000001f $d
       stm32eforth.s:275    .inflash:0000000000000020 $t

UNDEFINED SYMBOLS
_mstack
