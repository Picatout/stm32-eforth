ARM GAS  stm32eforth.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  stm32eforth.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.p2align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.p2aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m3
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
ARM GAS  stm32eforth.s 			page 3


  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
ARM GAS  stm32eforth.s 			page 4


  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
  81              	
  82              	/* blue pill specific constants */ 
  83              	  .equ LED_GPIO, GPIOC_BASE_ADR
  84              	  .equ LED_PIN, 13
  85              	  .equ UART, USART1_BASE_ADR 
  86              	
  87              	/* eForth specific constants */
  88              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  89              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  90              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  91              	.equ UPP ,	0x20000000	/*start of user area (UP0) */
  92              	.equ DTOP ,	0x20000100	/*start of usable RAM area (HERE) */
  93              	.equ DEND , 0x20004E00  /*usable RAM end */
  94              	 .equ RAMOFFSET ,	0x20000000	// remap
  95              	 .equ RAMEND, 0x20005000 // 20Ko
  96              	 .equ FLASHOFFSET ,	0x08000c00	// remap
  97              	//.equ RAMOFFSET  ,	0x00000000	/* absolute */
  98              	//.equ MAPOFFSET  ,	0x00000000	/* absolute */
  99              	  .equ MAPOFFSET , (RAMOFFSET-FLASHOFFSET)
 100              	
 101              	
 102              	
 103              	/*************************************
 104              	   system variables offset from UPP
 105              	*************************************/
ARM GAS  stm32eforth.s 			page 5


 106              	  .equ TICKS_OFS, 4  // millseconds counter
 107              	  .equ TIMER_OFS, 8  // count down timer
 108              	  .equ BOOT_OFS, 12  // boot program address
 109              	  .equ BASE_OFS, 16  // numeric conversion base 
 110              	  .equ TMP_OFS, 20   // temporary variable
 111              	  .equ SPAN_OFS, 24  // character count received by expect  
 112              	  .equ TOIN_OFS, 28  // >IN  parse pointer in TIB
 113              	  .equ NTIB_OFS, 32  // #TIB  characters in TIB 
 114              	  .equ TIB_OFS, 36   // TIB buffer address 
 115              	  .equ EVAL_OFS, 40  // eval|compile vector 
 116              	  .equ HLD_OFS, 44   // hold pointer 
 117              	  .equ CTXT_OFS, 48  // context pointer 
 118              	  .equ FLSH_CTOP_OFS, 52  // flash free dictionary address 
 119              	  .equ RAM_CTOP_OFS, 56  // ram free dictionary address
 120              	  .equ LASTN_OFS, 60     // last word in dictionary link nfa 
 121              	
 122              	
 123              	
 124              	
 125              	/***********************************************
 126              	* MACROS
 127              	*	Assemble inline direct threaded code ending.
 128              	***********************************************/
 129              	 	.macro	_NEXT /*end low level word */
 130              		BX	LR
 131              		.endm
 132              	
 133              	 	.macro	_NEST /*start high level word */
 134              		STMFD	R2!,{LR}
 135              		.endm
 136              	
 137              	 	.macro	_UNNEST	/*end high level word */
 138              		LDMFD	R2!,{PC}
 139              		.endm
 140              	
 141              	 	.macro	_DOLIT /*long literals */
 142              		BL	DOLIT
 143              		.endm
 144              	
 145              	 	.macro	_PUSH	/*push R5 on data stack*/
 146              		STR	R5,[R1,#-4]!
 147              		.endm
 148              	
 149              	 	.macro	_POP /*pop data stack to R5 */
 150              		LDR	R5,[R1],#4
 151              		.endm
 152              	
 153              	/*************************************
 154              	*   interrupt service vectors table 
 155              	**************************************/
 156              	   .section  .isr_vector,"a",%progbits
 157              	  .type  isr_vectors, %object
 158              	
 159              	isr_vectors:
 160 0000 00000000 	  .word   _mstack          /* main return stack address */
 161 0004 00000000 	  .word   reset_handler    /* startup address */
 162              	/* core interrupts || exceptions */
ARM GAS  stm32eforth.s 			page 6


 163 0008 00000000 	  .word   default_handler  /*  NMI */
 164 000c 00000000 	  .word   default_handler  /*  HardFault */
 165 0010 00000000 	  .word   default_handler  /*  Memory Management */
 166 0014 00000000 	  .word   default_handler  /* Bus fault */
 167 0018 00000000 	  .word   default_handler  /* Usage fault */
 168 001c 00000000 	  .word   0
 169 0020 00000000 	  .word   0
 170 0024 00000000 	  .word   0
 171 0028 00000000 	  .word   0
 172 002c 00000000 	  .word   default_handler  /* SWI instruction */
 173 0030 00000000 	  .word   default_handler  /* Debug monitor */
 174 0034 00000000 	  .word   0
 175 0038 00000000 	  .word   default_handler  /* PendSV */
 176 003c 00000000 	  .word   systick_handler  /* Systick */
 177              	  
 178              	  /* External Interrupts */
 179 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 180 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 181 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 182 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 183 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 184 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 185 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 186 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 187 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 188 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 189 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 190 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 191 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 192 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 193 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 194 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 195 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 196 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 197 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 198 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 199 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 200 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 201 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 202 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 203 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 204 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 205 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 206 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 207 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 208 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 209 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 210 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 211 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 212 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 213 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 214 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 215 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 216 00d4 00000000 	  .word      default_handler /* IRQ37, USART1 */                   
 217 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 218 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 219 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
ARM GAS  stm32eforth.s 			page 7


 220 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 221 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 222 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 223 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 224 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 225 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 226 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 227 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 228 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 229 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 230 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 231 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 232 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 233 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 234 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 235 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 236 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 237 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 238 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 239              	
 240              	  .size  isr_vectors, .-isr_vectors
 241              	
 242              	/*****************************************************
 243              	* default isr handler called on unexpected interrupt
 244              	*****************************************************/
 245              	    .section  .text.default_handler,"ax",%progbits
 246              	
 247              	  .type default_handler, %function
 248              	  .p2align 2 
 249              	  .global default_handler
 250              	default_handler:
 251 0000 DFF81870 		ldr r7,exception_msg 
 252 0004 17F8010B 		ldrb r0,[r7],#1 
 253 0008 41F8045D 	1:	_PUSH 
 254 000c 17F8015B 		ldrb r5,[r7],#1
 255 0010 00F080FA 		bl EMIT 
 256 0014 0138     		subs r0,r0,#1 
 257 0016 F7D1     		bne 1b 	
 258 0018 FFF7FEBF 		b reset_handler   
 259              	  .size  default_handler, .-default_handler
 260              	exception_msg:
 261 001c 20000000 		.word .+4 
 262 0020 12       		.byte 18
 263 0021 0A0D6578 		.ascii "\n\rexeption reboot!"
 263      65707469 
 263      6F6E2072 
 263      65626F6F 
 263      7421
 264 0033 00       		.p2align 2
 265              	
 266              	/*********************************
 267              		system milliseconds counter
 268              	*********************************/	
 269              	  .type systick_handler, %function
 270              	  .p2align 2 
 271              	  .global systick_handler
 272              	systick_handler:
ARM GAS  stm32eforth.s 			page 8


 273 0034 4FF00003 	  mov r3,#UPP&0xffff
 274 0038 C2F20003 	  movt r3,#UPP>>16  	
 275 003c 5868     	  ldr r0,[r3,#TICKS_OFS]  
 276 003e 00F10100 	  add r0,#1
 277 0042 5860     	  str r0,[r3,#TICKS_OFS]
 278 0044 9868     	  ldr r0,[r3,#TIMER_OFS]
 279 0046 10B1     	  cbz r0, systick_exit
 280 0048 A0F10100 	  sub r0,#1
 281 004c 9860     	  str r0,[r3,#TIMER_OFS]
 282              	systick_exit:
 283 004e 7047     	  bx lr
 284              	
 285              	
 286              	/**************************************
 287              	  reset_handler execute at MCU reset
 288              	***************************************/
 289              	    .section  .text.reset_handler
 290              	  .type  reset_handler, %function
 291              	  .p2align 2 
 292              	  .global reset_handler
 293              	reset_handler:
 294 0000 00F070F8 		bl	remap 
 295 0004 00F006F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 296              	//	bl	UNLOCK			/* unlock flash memory */
 297 0008 0148     		ldr r0,forth_entry
 298 000a 40F00100 		orr r0,#1
 299 000e 0047     		bx r0 
 300              	forth_entry:
 301 0010 80180018 		.word COLD+MAPOFFSET 
 302              	
 303              	  .type init_devices, %function
 304              	  .p2align 2 
 305              	init_devices:
 306              	/* init clock to HSE 72 Mhz */
 307              	/* set 2 wait states in FLASH_ACR_LATENCY */
 308 0014 4FF40050 		mov r0,#FLASH_BASE_ADR&0xffff
 309 0018 C4F20200 		movt r0,#FLASH_BASE_ADR>>16 
 310 001c 4FF01202 	  mov r2,#0x12
 311 0020 0260     	  str r2,[r0,#FLASH_ACR]
 312              	/* configure clock for HSE, 8 Mhz crystal */
 313              	/* enable HSE in RCC_CR */
 314 0022 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 315 0026 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 316 002a 0168     	  ldr r1,[r0,#RCC_CR]
 317 002c 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 318 0030 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 319              	/* wait HSERDY loop */
 320              	wait_hserdy:
 321 0032 0168     	  ldr r1,[r0,#RCC_CR]
 322 0034 11F4003F 	  tst r1,#(1<<17)
 323 0038 FBD0     	  beq wait_hserdy
 324              	
 325              	/************************************************* 
 326              	   configure PLL mul factor and source 
 327              	   SYSCLOCK=72 Mhz
 328              	   select HSE as  PLL source clock
 329              	   multiply frequency by 9 
ARM GAS  stm32eforth.s 			page 9


 330              	   APB1 clock is limited to 36 Mhz so divide by 2 
 331              	****************************************************/
 332 003a 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 333 003e C0F21D01 	  movt r1,#(7<<2)|1
 334 0042 4160     	  str r1,[r0,#RCC_CFGR]
 335              	  /* enable PLL */
 336 0044 0168     	  ldr r1,[r0,#RCC_CR]
 337 0046 41F08071 	  orr r1, #1<<24 
 338 004a 0160     	  str r1,[r0,#RCC_CR]
 339              	/* wait for PLLRDY */
 340              	wait_pllrdy:
 341 004c 0168     	  ldr r1,[r0,#RCC_CR]
 342 004e 11F0007F 	  tst r1,#(1<<25)
 343 0052 FBD0     	  beq wait_pllrdy 
 344              	/* select PLL as sysclock */
 345 0054 4168     	  ldr r1,[r0,#RCC_CFGR]
 346 0056 4FF6FC72 	  mov r2,#0xfffc
 347 005a CFF6FF72 	  movt r2,#0xffff
 348 005e 01EA0201 	  and r1,r1,r2 
 349 0062 4FF00202 	  mov r2,#2
 350 0066 41EA0201 	  orr r1,r1,r2
 351 006a 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 352              	/* wait for SWS==2 */
 353              	wait_sws:
 354 006c 4168     	  ldr r1,[r0,#RCC_CFGR]
 355 006e 11F0080F 	  tst r1,#(2<<2)
 356 0072 FBD0     	  beq wait_sws
 357              	/* now sysclock is 72 Mhz */
 358              	
 359              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 360 0074 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 361 0078 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 362 007c 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 363 0080 8161     	  str	r1, [r0, #RCC_APB2ENR]
 364              	
 365              	/* configure GPIOC:13 as output for user LED */
 366 0082 4FF48050 	  mov r0,#GPIOC_BASE_ADR&0xffff
 367 0086 C4F20100 	  movt r0,#GPIOC_BASE_ADR>>16
 368 008a 4168     	  ldr r1,[r0,#GPIO_CRH]
 369 008c 6FF47002 	  mvn r2,#(15<<20)
 370 0090 01EA0201 	  and r1,r1,r2
 371 0094 4FF4C002 	  mov r2,#(6<<20)
 372 0098 41EA0201 	  orr r1,r1,r2
 373 009c 4160     	  str r1,[r0,#GPIO_CRH]
 374              	
 375              	/* configure USART1 */
 376              	/* set GPIOA PIN 9, uart TX  */
 377 009e 4FF40060 	  mov r0,#GPIOA_BASE_ADR&0XFFFF
 378 00a2 C4F20100 	  movt r0,#GPIOA_BASE_ADR>>16	
 379 00a6 4168     	  ldr r1,[r0,#GPIO_CRH]
 380 00a8 6FF0F002 	  mvn r2,#(15<<4)
 381 00ac 01EA0201 	  and r1,r1,r2
 382 00b0 4FF0A002 	  mov r2,#(0xA<<4)
 383 00b4 41EA0201 	  orr r1,r1,r2 
 384 00b8 4160     	  str r1,[r0,#GPIO_CRH]
 385              	
 386 00ba 4FF46050 	  mov r0,#UART&0xFFFF
ARM GAS  stm32eforth.s 			page 10


 387 00be C4F20100 	  movt r0,#UART>>16	
 388              	/* BAUD rate */
 389 00c2 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 390 00c6 8160     	  str r1,[r0,#USART_BRR]
 391 00c8 42F20C01 	  mov r1,#(3<<2)+(1<<13)
 392 00cc C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 393              	/* configure systicks for 1msec ticks */
 394 00ce 4EF21000 	  mov r0,#STK_BASE_ADR&0xFFFF
 395 00d2 CEF20000 	  movt r0,#STK_BASE_ADR>>16	
 396 00d6 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 397 00da 4160     	  str r1,[r0,#STK_LOAD]
 398 00dc 4FF00301 	  mov r1,#3
 399 00e0 0160     	  str r1,[r0,STK_CTL]
 400 00e2 7047     	  _NEXT  
 401              	
 402              	/* copy system to RAM */ 
 403              		.type remap, %function 
 404              	
 405              	remap:
 406 00e4 DFF83400 		ldr r0,remap_dest  
 407 00e8 0B49     		ldr r1,remap_src 
 408 00ea 42F2EA02 		mov r2,#CTOP-UZERO 
 409 00ee 02F10302 		add r2,r2,#3
 410 00f2 22F00302 		and r2,r2,#~3 
 411 00f6 51F8043B 	1:	ldr r3,[r1],#4 
 412 00fa 40F8043B 		str r3,[r0],#4 
 413 00fe 043A     		subs R2,#4 
 414 0100 F9D1     		bne 1b
 415              	// zero end of RAM 
 416 0102 4FF4A042 		mov r2,#0x5000
 417 0106 C2F20002 		movt r2,#0x2000
 418 010a 83EA0303 		eor r3,r3,r3 
 419 010e 40F8043B 	2:  str r3,[r0],#4
 420 0112 9042     		cmp r0,r2 
 421 0114 FBDB     		blt 2b 
 422 0116 7047     		_NEXT 
 423              	remap_src:
 424 0118 00040000 		.word UZERO 
 425              	remap_dest:
 426 011c 00000020 		.word RAMOFFSET 
 427              	
 428              	/********************
 429              	* Version control
 430              	*******************/
 431              	.equ VER ,	0x01	/*major release version */
 432              	.equ EXT ,	0x00	/*minor extension */
 433              	
 434              	/* Constants */
 435              	
 436              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 437              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 438              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 439              	
 440              	.equ CELLL ,	4	/*size of a cell */
 441              	.equ BASEE ,	10	/*default radix */
 442              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 443              	
ARM GAS  stm32eforth.s 			page 11


 444              	.equ BKSPP ,	8	/*backspace */
 445              	.equ LF ,	10	  /*line feed */
 446              	.equ CRR ,	13	/*carriage return */
 447              	.equ ERR ,	27	/*error escape */
 448              	.equ TIC ,	39	/*tick */
 449              	
 450              	/********************************************************
 451              	* RAM memory mapping
 452              	* 	0x20000000	RAM base address
 453              	*	0x20000000  system variables	
 454              	* 	0x20000100	Forth dictionary
 455              	* 	0x2000????	top of dictionary, HERE
 456              	* 	0x2000????	WORD buffer, HERE+16
 457              	*   0x20004E00  end of user space
 458              	* 	0x20004E80	top of data stack  R2
 459              	* 	0x20004E80	TIB terminal input buffer
 460              	* 	0x20004F80	top of return stack  R1
 461              	* 	0x20005000	top of hardware stack for interrupts R14
 462              	********************************************************/
 463              	
 464              	
 465              	/******************************************************
 466              	*  COLD start moves the following to USER variables.
 467              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 468              	******************************************************/
 469 0120 AFF30080 		.p2align 10
 469      AFF30080 
 469      AFF30080 
 469      AFF30080 
 469      AFF30080 
 470              	
 471              	UZERO:
 472 0400 00000000 		.word 0  			/*Reserved */
 473 0404 00000000 		.word 0      /* system Ticks */
 474 0408 00000000 	    .word 0     /* delay timer */
 475 040c 0C180018 		.word HI+MAPOFFSET  	/*'BOOT */
 476 0410 0A000000 		.word BASEE 	/*BASE */
 477 0414 00000000 		.word 0			/*tmp */
 478 0418 00000000 		.word 0			/*SPAN */
 479 041c 00000000 		.word 0			/*>IN */
 480 0420 00000000 		.word 0			/*#TIB */
 481 0424 804E0020 		.word TIBB	/*TIB */
 482 0428 540D0018 		.word INTER+MAPOFFSET	/*'EVAL */
 483 042c 00000000 		.word 0			/*HLD */
 484 0430 78180018 		.word LASTN+MAPOFFSET	/*CONTEXT */
 485 0434 EA180018 		.word CTOP+MAPOFFSET	/*end of dictionnary */
 486 0438 EA180018 		.word CTOP+MAPOFFSET	/* end of RAM dictionary RAM */
 487 043c 78180018 		.word LASTN+MAPOFFSET	/*LAST word in dictionary */
 488 0440 00000000 		.word 0,0			/*reserved */
 488      00000000 
 489              	ULAST:
 490              	 
 491              	
 492              	/***********************************
 493              	//  Start of Forth dictionary
 494              	***********************************/
 495              	
ARM GAS  stm32eforth.s 			page 12


 496              		.p2align 2 
 497              	
 498              	// REBOOT ( -- )
 499              	// hardware reset 
 500 0448 00000000 		.word 0
 501 044c 06       	_REBOOT: .byte 6
 502 044d 5245424F 		.ascii "REBOOT"
 502      4F54
 503 0453 00       		.p2align 2 
 504              	REBOOT:
 505 0454 0348     		ldr r0,scb_adr 
 506 0456 C168     		ldr r1,[r0,#SCB_AIRCR]
 507 0458 41F00401 		orr r1,#(1<<2)
 508 045c C0F2FA51 		movt r1,#SCB_VECTKEY
 509 0460 C160     		str r1,[r0,#SCB_AIRCR]
 510 0462 FEE7     		b . 
 511              	scb_adr:
 512 0464 00ED00E0 		.word SCB_BASE_ADR 
 513              	// PAUSE ( u -- ) 
 514              	// suspend execution for u milliseconds
 515 0468 4CF8FF17 		.word _REBOOT+MAPOFFSET
 516 046c 05       	_PAUSE: .byte 5
 517 046d 50415553 		.ascii "PAUSE"
 517      45
 518 0472 00BF     		.p2align 2
 519              	PAUSE:
 520 0474 42F804ED 		_NEST 
 521 0478 00F0C2FA 		BL TIMER 
 522 047c 00F092F8 		BL STORE 
 523              	PAUSE_LOOP:
 524 0480 00F0BEFA 		BL TIMER 
 525 0484 00F098F8 		BL AT 
 526 0488 00F070F8 		BL QBRAN 
 527 048c 98040000 		.word PAUSE_EXIT 
 528 0490 00F078F8 		BL BRAN 
 529 0494 80040000 		.word PAUSE_LOOP 
 530              	PAUSE_EXIT: 		
 531 0498 52F804FB 		_UNNEST 
 532              	
 533              	//  ULED ( T|F -- )
 534              	// control user LED, -1 ON, 0 OFF  
 535 049c 6CF8FF17 		.word _PAUSE + MAPOFFSET
 536 04a0 04       	_ULED: .byte 4
 537 04a1 554C4544 		.ascii "ULED"
 538 04a5 0000BF   		.p2align 2
 539              		.type ULED, %function 
 540              	ULED:
 541 04a8 4FF40056 		mov r6,#(1<<LED_PIN)
 542 04ac 4FF48054 		mov r4,#LED_GPIO&0xffff
 543 04b0 C4F20104 		movt r4,#LED_GPIO>>16
 544 04b4 2800     		movs r0,r5 
 545 04b6 51F8045B 		_POP
 546 04ba 01D0     		beq ULED_OFF 
 547 04bc 6661     		str r6,[r4,#GPIO_BRR]
 548 04be 7047     		_NEXT 
 549              	ULED_OFF:
 550 04c0 2661     		str r6,[r4,#GPIO_BSRR]
ARM GAS  stm32eforth.s 			page 13


 551 04c2 7047     		_NEXT 
 552              		
 553              	//    ?RX	 ( -- c T | F )
 554              	// 	Return input character and true, or a false if no input.
 555 04c4 A0F8FF17 		.word	_ULED+MAPOFFSET
 556 04c8 04       	_QRX:	.byte   4
 557 04c9 3F4B4559 		.ascii "?KEY"
 558 04cd 0000BF   		.p2align 2 
 559              	QKEY:
 560              	QRX: 
 561 04d0 41F8045D 		_PUSH
 562 04d4 4FF46054 		mov r4,#UART&0xFFFF
 563 04d8 C4F20104 		movt r4,#UART>>16
 564 04dc 2688     		ldrh	r6, [r4, #USART_SR]
 565 04de 16F02006 		ands	r6, #0x20		//  RXE
 566 04e2 05D0     		BEQ	QRX1
 567 04e4 6568     	 	LDR	R5, [R4, #USART_DR]
 568 04e6 41F8045D 		_PUSH
 569 04ea 18BF     	    IT NE 
 570 04ec 6FF00005 		MVNNE	R5,#0
 571              	QRX1:
 572 04f0 08BF     		IT EQ 
 573 04f2 0025     	    MOVEQ	R5,#0
 574 04f4 7047     		_NEXT
 575 04f6 00BF     		.p2align 2 
 576              	
 577              	//    TX!	 ( c -- )
 578              	// 	Send character c to the output device.
 579              	
 580 04f8 C8F8FF17 		.word	_QRX+MAPOFFSET
 581 04fc 04       	_TXSTO:	.byte 4
 582 04fd 454D4954 		.ascii "EMIT"
 583 0501 0000BF   		.p2align 2 	
 584              	TXSTO:
 585              	EMIT:
 586              	TECHO:
 587 0504 4FF46054 		mov r4,#UART&0xFFFF
 588 0508 C4F20104 		movt r4,#UART>>16
 589              	TX1:
 590 050c 2688     		ldrh	r6, [r4, #USART_SR]	
 591 050e 16F08006 		ands	r6, #0x80		//  TXE bit 
 592 0512 FBD0     		beq	TX1
 593 0514 A580     		strh	r5, [r4, #USART_DR]	
 594 0516 51F8045B 		_POP
 595 051a 7047     		_NEXT
 596              	
 597              	
 598              		
 599              	// **************************************************************************
 600              	//  The kernel
 601              	
 602              	//    NOP	( -- )
 603              	// 	do nothing.
 604              	
 605 051c FCF8FF17 		.word	_TXSTO+MAPOFFSET
 606 0520 03       	_NOP:	.byte   3
 607 0521 4E4F50   		.ascii "NOP"
ARM GAS  stm32eforth.s 			page 14


 608              		.p2align 2 	
 609              	NOP:
 610 0524 7047     		_NEXT
 611              	 
 612              	
 613              	//    doLIT	( -- w )
 614              	// 	Push an inline literal.
 615              	
 616              	// 	.word	_NOP+MAPOFFSET
 617              	// _LIT	.byte   COMPO+5
 618              	// 	.ascii "doLIT"
 619              	// 	.p2align 2 	
 620              	DOLIT:
 621 0526 41F8045D 		_PUSH				//  store R5 on data stack
 622 052a 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 623 052e 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 624 0532 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 625 0536 7047     		_NEXT
 626              	
 627              	//    EXECUTE	( ca -- )
 628              	// 	Execute the word at ca.
 629              	
 630 0538 20F9FF17 		.word	_NOP+MAPOFFSET
 631 053c 07       	_EXECU:	.byte   7
 632 053d 45584543 		.ascii "EXECUTE"
 632      555445
 633              		.p2align 2 	
 634              	EXECU:
 635 0544 45F00104 		ORR	R4,R5,#1		//  b0=1 
 636 0548 51F8045B 		_POP
 637 054c 2047     		BX	R4
 638              	
 639              	//    next	( -- ) counter on R:
 640              	// 	Run time code for the single index loop.
 641              	// 	: next ( -- ) \ hilevel model
 642              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 643              	
 644              	// 	.word	_EXECU+MAPOFFSET
 645              	// _DONXT	.byte   COMPO+4
 646              	// 	.ascii "next"
 647              	// 	.p2align 2 	
 648              	DONXT:
 649 054e 1468     		LDR	R4,[R2]   // ( -- u )  
 650 0550 24B9     		CBNZ R4,NEXT1 
 651              		/* loop done */
 652 0552 02F10402 		ADD	R2,R2,#4 // drop counter 
 653 0556 0EF1040E 		ADD	LR,LR,#4 // skip after loop address 
 654 055a 7047     		_NEXT
 655              	NEXT1:
 656              		/* decrement loop counter */
 657 055c A4F10104 		SUB	R4,R4,#1
 658 0560 1460     		STR	R4,[R2]
 659 0562 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 660 0566 4EF0010E 		ORR	LR,LR,#1 // begining of loop
 661 056a 7047     		_NEXT
 662              	
 663              	//    ?branch	( f -- )
ARM GAS  stm32eforth.s 			page 15


 664              	// 	Branch if flag is zero.
 665              	
 666              	// 	.word	_DONXT+MAPOFFSET
 667              	// _QBRAN	.byte   COMPO+7
 668              	// 	.ascii "?branch"
 669              	// 	.p2align 2 	
 670              	QBRAN:
 671 056c 2C00     		MOVS	R4,R5
 672 056e 51F8045B 		_POP
 673 0572 04D1     		BNE	QBRAN1
 674 0574 5EF801EC 		LDR	LR,[LR,#-1]
 675 0578 4EF0010E 		ORR LR,LR,#1
 676 057c 7047     		_NEXT
 677              	QBRAN1:
 678 057e 0EF1040E 	 	ADD	LR,LR,#4
 679 0582 7047     		_NEXT
 680              	
 681              	//    branch	( -- )
 682              	// 	Branch to an inline address.
 683              	
 684              	// 	.word	_QBRAN+MAPOFFSET
 685              	// _BRAN	.byte   COMPO+6
 686              	// 	.ascii "branch"
 687              	// 	.p2align 2 	
 688              	BRAN:
 689 0584 5EF801EC 		LDR	LR,[LR,#-1]
 690 0588 4EF0010E 		ORR	LR,LR,#1
 691 058c 7047     		_NEXT
 692              	
 693              	//    EXIT	(  -- )
 694              	// 	Exit the currently executing command.
 695              	
 696 058e 3CF9FF17 		.word	_EXECU+MAPOFFSET
 697 0592 04       	_EXIT:	.byte   4
 698 0593 45584954 		.ascii "EXIT"
 699 0597 00       		.p2align 2 	
 700              	EXIT:
 701 0598 52F804FB 		_UNNEST
 702              	
 703              	//    !	   ( w a -- )
 704              	// 	Pop the data stack to memory.
 705              	
 706 059c 92F9FF17 		.word	_EXIT+MAPOFFSET
 707 05a0 01       	_STORE:	.byte   1
 708 05a1 21       		.ascii "!"
 709 05a2 00BF     		.p2align 2 	
 710              	STORE:
 711 05a4 51F8044B 		LDR	R4,[R1],#4
 712 05a8 2C60     		STR	R4,[R5]
 713 05aa 51F8045B 		_POP
 714 05ae 7047     		_NEXT
 715              	
 716              	//    @	   ( a -- w )
 717              	// 	Push memory location to the data stack.
 718              	
 719 05b0 A0F9FF17 		.word	_STORE+MAPOFFSET
 720 05b4 01       	_AT:	.byte   1
ARM GAS  stm32eforth.s 			page 16


 721 05b5 40       		.ascii "@"
 722 05b6 00BF     		.p2align 2 	
 723              	AT:
 724 05b8 2D68     		LDR	R5,[R5]
 725 05ba 7047     		_NEXT
 726              	
 727              	//    C!	  ( c b -- )
 728              	// 	Pop the data stack to byte memory.
 729              	
 730 05bc B4F9FF17 		.word	_AT+MAPOFFSET
 731 05c0 02       	_CSTOR:	.byte   2
 732 05c1 4321     		.ascii "C!"
 733 05c3 00       		.p2align 2 	
 734              	CSTOR:
 735 05c4 51F8044B 		LDR	R4,[R1],#4
 736 05c8 2C70     		STRB	R4,[R5]
 737 05ca 51F8045B 		_POP
 738 05ce 7047     		_NEXT
 739              	
 740              	//    C@	  ( b -- c )
 741              	// 	Push byte memory location to the data stack.
 742              	
 743 05d0 C0F9FF17 		.word	_CSTOR+MAPOFFSET
 744 05d4 02       	_CAT:	.byte   2
 745 05d5 4340     		.ascii "C@"
 746 05d7 00       		.p2align 2 	
 747              	CAT:
 748 05d8 2D78     		LDRB	R5,[R5]
 749 05da 7047     		_NEXT
 750              	
 751              	//    R>	  ( -- w )
 752              	// 	Pop the return stack to the data stack.
 753              	
 754 05dc D4F9FF17 		.word	_CAT+MAPOFFSET
 755 05e0 02       	_RFROM:	.byte   2
 756 05e1 523E     		.ascii "R>"
 757 05e3 00       		.p2align 2 	
 758              	RFROM:
 759 05e4 41F8045D 		_PUSH
 760 05e8 52F8045B 		LDR	R5,[R2],#4
 761 05ec 7047     		_NEXT
 762              	
 763              	//    R@	  ( -- w )
 764              	// 	Copy top of return stack to the data stack.
 765              	
 766 05ee E0F9FF17 		.word	_RFROM+MAPOFFSET
 767 05f2 02       	_RAT:	.byte   2
 768 05f3 5240     		.ascii "R@"
 769 05f5 0000BF   		.p2align 2 	
 770              	RAT:
 771 05f8 41F8045D 		_PUSH
 772 05fc 1568     		LDR	R5,[R2]
 773 05fe 7047     		_NEXT
 774              	
 775              	//    >R	  ( w -- )
 776              	// 	Push the data stack to the return stack.
 777              	
ARM GAS  stm32eforth.s 			page 17


 778 0600 F2F9FF17 		.word	_RAT+MAPOFFSET
 779 0604 42       	_TOR:	.byte   COMPO+2
 780 0605 3E52     		.ascii ">R"
 781 0607 00       		.p2align 2 	
 782              	TOR:
 783 0608 42F8045D 		STR	R5,[R2,#-4]!
 784 060c 51F8045B 		_POP
 785 0610 7047     		_NEXT
 786              	
 787              	//    SP@	 ( -- a )
 788              	// 	Push the current data stack pointer.
 789              	
 790 0612 04FAFF17 		.word	_TOR+MAPOFFSET
 791 0616 03       	_SPAT:	.byte   3
 792 0617 535040   		.ascii "SP@"
 793 061a 00BF     		.p2align 2 	
 794              	SPAT:
 795 061c 41F8045D 		_PUSH
 796 0620 0D46     		MOV	R5,R1
 797 0622 7047     		_NEXT
 798              	
 799              	//    DROP	( w -- )
 800              	// 	Discard top stack item.
 801              	
 802 0624 16FAFF17 		.word	_SPAT+MAPOFFSET
 803 0628 04       	_DROP:	.byte   4
 804 0629 44524F50 		.ascii "DROP"
 805 062d 0000BF   		.p2align 2 	
 806              	DROP:
 807 0630 51F8045B 		_POP
 808 0634 7047     		_NEXT
 809              	
 810              	//    DUP	 ( w -- w w )
 811              	// 	Duplicate the top stack item.
 812              	
 813 0636 28FAFF17 		.word	_DROP+MAPOFFSET
 814 063a 03       	_DUPP:	.byte   3
 815 063b 445550   		.ascii "DUP"
 816 063e 00BF     		.p2align 2 	
 817              	DUPP:
 818 0640 41F8045D 		_PUSH
 819 0644 7047     		_NEXT
 820              	
 821              	//    SWAP	( w1 w2 -- w2 w1 )
 822              	// 	Exchange top two stack items.
 823              	
 824 0646 3AFAFF17 		.word	_DUPP+MAPOFFSET
 825 064a 04       	_SWAP:	.byte   4
 826 064b 53574150 		.ascii "SWAP"
 827 064f 00       		.p2align 2 	
 828              	SWAP:
 829 0650 0C68     		LDR	R4,[R1]
 830 0652 0D60     		STR	R5,[R1]
 831 0654 2546     		MOV	R5,R4
 832 0656 7047     		_NEXT
 833              	
 834              	//    OVER	( w1 w2 -- w1 w2 w1 )
ARM GAS  stm32eforth.s 			page 18


 835              	// 	Copy second stack item to top.
 836              	
 837 0658 4AFAFF17 		.word	_SWAP+MAPOFFSET
 838 065c 04       	_OVER:	.byte   4
 839 065d 4F564552 		.ascii "OVER"
 840 0661 0000BF   		.p2align 2 	
 841              	OVER:
 842 0664 41F8045D 		_PUSH
 843 0668 4D68     		LDR	R5,[R1,#4]
 844 066a 7047     		_NEXT
 845              	
 846              	//    0<	  ( n -- t )
 847              	// 	Return true if n is negative.
 848              	
 849 066c 5CFAFF17 		.word	_OVER+MAPOFFSET
 850 0670 02       	_ZLESS:	.byte   2
 851 0671 303C     		.ascii "0<"
 852 0673 00       		.p2align 2 	
 853              	ZLESS:
 854 0674 4FF00004 		MOV	R4,#0
 855 0678 04EB2505 		ADD	R5,R4,R5,ASR #32
 856 067c 7047     		_NEXT
 857              	
 858              	//    AND	 ( w w -- w )
 859              	// 	Bitwise AND.
 860              	
 861 067e 70FAFF17 		.word	_ZLESS+MAPOFFSET
 862 0682 03       	_ANDD:	.byte   3
 863 0683 414E44   		.ascii "AND"
 864 0686 00BF     		.p2align 2 	
 865              	ANDD:
 866 0688 51F8044B 		LDR	R4,[R1],#4
 867 068c 05EA0405 		AND	R5,R5,R4
 868 0690 7047     		_NEXT
 869              	
 870              	//    OR	  ( w w -- w )
 871              	// 	Bitwise inclusive OR.
 872              	
 873 0692 82FAFF17 		.word	_ANDD+MAPOFFSET
 874 0696 02       	_ORR:	.byte   2
 875 0697 4F52     		.ascii "OR"
 876 0699 0000BF   		.p2align 2 	
 877              	ORR:
 878 069c 51F8044B 		LDR	R4,[R1],#4
 879 06a0 45EA0405 		ORR	R5,R5,R4
 880 06a4 7047     		_NEXT
 881              	
 882              	//    XOR	 ( w w -- w )
 883              	// 	Bitwise exclusive OR.
 884              	
 885 06a6 96FAFF17 		.word	_ORR+MAPOFFSET
 886 06aa 03       	_XORR:	.byte   3
 887 06ab 584F52   		.ascii "XOR"
 888 06ae 00BF     		.p2align 2 	
 889              	XORR:
 890 06b0 51F8044B 		LDR	R4,[R1],#4
 891 06b4 85EA0405 		EOR	R5,R5,R4
ARM GAS  stm32eforth.s 			page 19


 892 06b8 7047     		_NEXT
 893              	
 894              	//    UM+	 ( w w -- w cy )
 895              	// 	Add two numbers, return the sum and carry flag.
 896              	
 897 06ba AAFAFF17 		.word	_XORR+MAPOFFSET
 898 06be 03       	_UPLUS:	.byte   3
 899 06bf 554D2B   		.ascii "UM+"
 900 06c2 00BF     		.p2align 2 	
 901              	UPLUS:
 902 06c4 0C68     		LDR	R4,[R1]
 903 06c6 6419     		ADDS	R4,R4,R5
 904 06c8 4FF00005 		MOV	R5,#0
 905 06cc 45F10005 		ADC	R5,R5,#0
 906 06d0 0C60     		STR	R4,[R1]
 907 06d2 7047     		_NEXT
 908              	
 909              	//    RSHIFT	 ( w # -- w )
 910              	// 	arithmetic Right shift # bits.
 911              	
 912 06d4 BEFAFF17 		.word	_UPLUS+MAPOFFSET
 913 06d8 06       	_RSHIFT:	.byte   6
 914 06d9 52534849 		.ascii "RSHIFT"
 914      4654
 915 06df 00       		.p2align 2 	
 916              	RSHIFT:
 917 06e0 51F8044B 		LDR	R4,[R1],#4
 918 06e4 44FA05F5 		MOV	R5,R4,ASR R5
 919 06e8 7047     		_NEXT
 920              	
 921              	//    LSHIFT	 ( w # -- w )
 922              	// 	Right shift # bits.
 923              	
 924 06ea D8FAFF17 		.word	_RSHIFT+MAPOFFSET
 925 06ee 06       	_LSHIFT:	.byte   6
 926 06ef 4C534849 		.ascii "LSHIFT"
 926      4654
 927 06f5 0000BF   		.p2align 2 	
 928              	LSHIFT:
 929 06f8 51F8044B 		LDR	R4,[R1],#4
 930 06fc 04FA05F5 		MOV	R5,R4,LSL R5
 931 0700 7047     		_NEXT
 932              	
 933              	//    +	 ( w w -- w )
 934              	// 	Add.
 935              	
 936 0702 EEFAFF17 		.word	_LSHIFT+MAPOFFSET
 937 0706 01       	_PLUS:	.byte   1
 938 0707 2B       		.ascii "+"
 939              		.p2align 2 	
 940              	PLUS:
 941 0708 51F8044B 		LDR	R4,[R1],#4
 942 070c 2544     		ADD	R5,R5,R4
 943 070e 7047     		_NEXT
 944              	
 945              	//    -	 ( w w -- w )
 946              	// 	Subtract.
ARM GAS  stm32eforth.s 			page 20


 947              	
 948 0710 06FBFF17 		.word	_PLUS+MAPOFFSET
 949 0714 01       	_SUBB:	.byte   1
 950 0715 2D       		.ascii "-"
 951 0716 00BF     		.p2align 2 	
 952              	SUBB:
 953 0718 51F8044B 		LDR	R4,[R1],#4
 954 071c C5EB0405 		RSB	R5,R5,R4
 955 0720 7047     		_NEXT
 956              	
 957              	//    *	 ( w w -- w )
 958              	// 	Multiply.
 959              	
 960 0722 14FBFF17 		.word	_SUBB+MAPOFFSET
 961 0726 01       	_STAR:	.byte   1
 962 0727 2A       		.ascii "*"
 963              		.p2align 2 	
 964              	STAR:
 965 0728 51F8044B 		LDR	R4,[R1],#4
 966 072c 04FB05F5 		MUL	R5,R4,R5
 967 0730 7047     		_NEXT
 968              	
 969              	//    UM*	 ( w w -- ud )
 970              	// 	Unsigned multiply.
 971              	
 972 0732 26FBFF17 		.word	_STAR+MAPOFFSET
 973 0736 03       	_UMSTA:	.byte   3
 974 0737 554D2A   		.ascii "UM*"
 975 073a 00BF     		.p2align 2 	
 976              	UMSTA:
 977 073c 0C68     		LDR	R4,[R1]
 978 073e A5FB0467 		UMULL	R6,R7,R5,R4
 979 0742 0E60     		STR	R6,[R1]
 980 0744 3D46     		MOV	R5,R7
 981 0746 7047     		_NEXT
 982              	
 983              	//    M*	 ( w w -- d )
 984              	// 	signed multiply.
 985              	
 986 0748 36FBFF17 		.word	_UMSTA+MAPOFFSET
 987 074c 02       	_MSTAR:	.byte   2
 988 074d 4D2A     		.ascii "M*"
 989 074f 00       		.p2align 2 	
 990              	MSTAR:
 991 0750 0C68     		LDR	R4,[R1]
 992 0752 85FB0467 		SMULL	R6,R7,R5,R4
 993 0756 0E60     		STR	R6,[R1]
 994 0758 3D46     		MOV	R5,R7
 995 075a 7047     		_NEXT
 996              	
 997              	//    1+	 ( w -- w+1 )
 998              	// 	Add 1.
 999              	
 1000 075c 4CFBFF17 		.word	_MSTAR+MAPOFFSET
 1001 0760 02       	_ONEP:	.byte   2
 1002 0761 312B     		.ascii "1+"
 1003 0763 00       		.p2align 2 	
ARM GAS  stm32eforth.s 			page 21


 1004              	ONEP:
 1005 0764 05F10105 		ADD	R5,R5,#1
 1006 0768 7047     		_NEXT
 1007              	
 1008              	//    1-	 ( w -- w-1 )
 1009              	// 	Subtract 1.
 1010              	
 1011 076a 60FBFF17 		.word	_ONEP+MAPOFFSET
 1012 076e 02       	_ONEM:	.byte   2
 1013 076f 312D     		.ascii "1-"
 1014 0771 0000BF   		.p2align 2 	
 1015              	ONEM:
 1016 0774 A5F10105 		SUB	R5,R5,#1
 1017 0778 7047     		_NEXT
 1018              	
 1019              	//    2+	 ( w -- w+2 )
 1020              	// 	Add 1.
 1021              	
 1022 077a 6EFBFF17 		.word	_ONEM+MAPOFFSET
 1023 077e 02       	_TWOP:	.byte   2
 1024 077f 322B     		.ascii "2+"
 1025 0781 0000BF   		.p2align 2 	
 1026              	TWOP:
 1027 0784 05F10205 		ADD	R5,R5,#2
 1028 0788 7047     		_NEXT
 1029              	
 1030              	//    2-	 ( w -- w-2 )
 1031              	// 	Subtract 2.
 1032              	
 1033 078a 7EFBFF17 		.word	_TWOP+MAPOFFSET
 1034 078e 02       	_TWOM:	.byte   2
 1035 078f 322D     		.ascii "2-"
 1036 0791 0000BF   		.p2align 2 	
 1037              	TWOM:
 1038 0794 A5F10205 		SUB	R5,R5,#2
 1039 0798 7047     		_NEXT
 1040              	
 1041              	//    CELL+	( w -- w+4 )
 1042              	// 	Add CELLL.
 1043              	
 1044 079a 8EFBFF17 		.word	_TWOM+MAPOFFSET
 1045 079e 05       	_CELLP:	.byte   5
 1046 079f 43454C4C 		.ascii "CELL+"
 1046      2B
 1047              		.p2align 2 	
 1048              	CELLP:
 1049 07a4 05F10405 		ADD	R5,R5,#CELLL
 1050 07a8 7047     		_NEXT
 1051              	
 1052              	//    CELL-	( w -- w-4 )
 1053              	// 	Subtract CELLL.
 1054              	
 1055 07aa 9EFBFF17 		.word	_CELLP+MAPOFFSET
 1056 07ae 05       	_CELLM:	.byte   5
 1057 07af 43454C4C 		.ascii "CELL-"
 1057      2D
 1058              		.p2align 2 	
ARM GAS  stm32eforth.s 			page 22


 1059              	CELLM:
 1060 07b4 A5F10405 		SUB	R5,R5,#CELLL
 1061 07b8 7047     		_NEXT
 1062              	 
 1063              	//    BL	( -- 32 )
 1064              	// 	Blank (ASCII space).
 1065              	
 1066 07ba AEFBFF17 		.word	_CELLM+MAPOFFSET
 1067 07be 02       	_BLANK:	.byte   2
 1068 07bf 424C     		.ascii "BL"
 1069 07c1 0000BF   		.p2align 2 	
 1070              	BLANK:
 1071 07c4 41F8045D 		_PUSH
 1072 07c8 4FF02005 		MOV	R5,#32
 1073 07cc 7047     		_NEXT
 1074              	
 1075              	//    CELLS	( w -- w*4 )
 1076              	// 	Multiply 4.
 1077              	
 1078 07ce BEFBFF17 		.word	_BLANK+MAPOFFSET
 1079 07d2 05       	_CELLS:	.byte   5
 1080 07d3 43454C4C 		.ascii "CELLS"
 1080      53
 1081              		.p2align 2 	
 1082              	CELLS:
 1083 07d8 4FEA8505 		MOV	R5,R5,LSL#2
 1084 07dc 7047     		_NEXT
 1085              	
 1086              	//    CELL/	( w -- w/4 )
 1087              	// 	Divide by 4.
 1088              	
 1089 07de D2FBFF17 		.word	_CELLS+MAPOFFSET
 1090 07e2 05       	_CELLSL:	.byte   5
 1091 07e3 43454C4C 		.ascii "CELL/"
 1091      2F
 1092              		.p2align 2 	
 1093              	CELLSL:
 1094 07e8 4FEAA505 		MOV	R5,R5,ASR#2
 1095 07ec 7047     		_NEXT
 1096              	
 1097              	//    2*	( w -- w*2 )
 1098              	// 	Multiply 2.
 1099              	
 1100 07ee E2FBFF17 		.word	_CELLSL+MAPOFFSET
 1101 07f2 02       	_TWOST:	.byte   2
 1102 07f3 322A     		.ascii "2*"
 1103 07f5 0000BF   		.p2align 2 	
 1104              	TWOST:
 1105 07f8 4FEA4505 		MOV	R5,R5,LSL#1
 1106 07fc 7047     		_NEXT
 1107              	
 1108              	//    2/	( w -- w/2 )
 1109              	// 	Divide by 2.
 1110              	
 1111 07fe F2FBFF17 		.word	_TWOST+MAPOFFSET
 1112 0802 02       	_TWOSL:	.byte   2
 1113 0803 322F     		.ascii "2/"
ARM GAS  stm32eforth.s 			page 23


 1114 0805 0000BF   		.p2align 2 	
 1115              	TWOSL:
 1116 0808 4FEA6505 		MOV	R5,R5,ASR#1
 1117 080c 7047     		_NEXT
 1118              	
 1119              	//    ?DUP	( w -- w w | 0 )
 1120              	// 	Conditional duplicate.
 1121              	
 1122 080e 02FCFF17 		.word	_TWOSL+MAPOFFSET
 1123 0812 04       	_QDUP:	.byte   4
 1124 0813 3F445550 		.ascii "?DUP"
 1125 0817 00       		.p2align 2 	
 1126              	QDUP:
 1127 0818 2C00     		MOVS	R4,R5
 1128 081a 18BF     		IT NE 
 1129 081c 41F8045D 	    STRNE	R5,[R1,#-4]!
 1130 0820 7047     		_NEXT
 1131              	
 1132              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1133              	// 	Rotate top 3 items.
 1134              	
 1135 0822 12FCFF17 		.word	_QDUP+MAPOFFSET
 1136 0826 03       	_ROT:	.byte   3
 1137 0827 524F54   		.ascii "ROT"
 1138 082a 00BF     		.p2align 2 	
 1139              	ROT:
 1140 082c 0C68     		LDR	R4,[R1]  // r4=w2 
 1141 082e 0D60     		STR	R5,[R1]  // w3 replace w2 
 1142 0830 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1143 0832 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1144 0834 7047     		_NEXT
 1145              	
 1146              	//    2DROP	( w1 w2 -- )
 1147              	// 	Drop top 2 items.
 1148              	
 1149 0836 26FCFF17 		.word	_ROT+MAPOFFSET
 1150 083a 05       	_DDROP:	.byte   5
 1151 083b 3244524F 		.ascii "2DROP"
 1151      50
 1152              		.p2align 2 	
 1153              	DDROP:
 1154 0840 51F8045B 		_POP
 1155 0844 51F8045B 		_POP
 1156 0848 7047     		_NEXT
 1157              	
 1158              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1159              	// 	Duplicate top 2 items.
 1160              	
 1161 084a 3AFCFF17 		.word	_DDROP+MAPOFFSET
 1162 084e 04       	_DDUP:	.byte   4
 1163 084f 32445550 		.ascii "2DUP"
 1164 0853 00       		.p2align 2 	
 1165              	DDUP:
 1166 0854 0C68     		LDR	R4,[R1] // r4=w1
 1167 0856 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1168 085a 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1169 085e 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 24


 1170              	
 1171              	//    D+	( d1 d2 -- d3 )
 1172              	// 	Add top 2 double numbers.
 1173              	
 1174 0860 4EFCFF17 		.word	_DDUP+MAPOFFSET
 1175 0864 02       	_DPLUS:	.byte   2
 1176 0865 442B     		.ascii "D+"
 1177 0867 00       		.p2align 2 	
 1178              	DPLUS:
 1179 0868 51F8044B 		LDR	R4,[R1],#4
 1180 086c 51F8046B 		LDR	R6,[R1],#4
 1181 0870 0F68     		LDR	R7,[R1]
 1182 0872 E419     		ADDS	R4,R4,R7
 1183 0874 0C60     		STR	R4,[R1]
 1184 0876 45EB0605 		ADC	R5,R5,R6
 1185 087a 7047     		_NEXT
 1186              	
 1187              	//    NOT	 ( w -- !w )
 1188              	// 	1"s complement.
 1189              	
 1190 087c 64FCFF17 		.word	_DPLUS+MAPOFFSET
 1191 0880 03       	_INVER:	.byte   3
 1192 0881 4E4F54   		.ascii "NOT"
 1193              		.p2align 2 	
 1194              	INVER:
 1195 0884 6FEA0505 		MVN	R5,R5
 1196 0888 7047     		_NEXT
 1197              	
 1198              	//    NEGATE	( w -- -w )
 1199              	// 	2's complement.
 1200              	
 1201 088a 80FCFF17 		.word	_INVER+MAPOFFSET
 1202 088e 06       	_NEGAT:	.byte   6
 1203 088f 4E454741 		.ascii "NEGATE"
 1203      5445
 1204 0895 0000BF   		.p2align 2 	
 1205              	NEGAT:
 1206 0898 C5F10005 		RSB	R5,R5,#0
 1207 089c 7047     		_NEXT
 1208              	
 1209              	//    ABS	 ( w -- |w| )
 1210              	// 	Absolute.
 1211              	
 1212 089e 8EFCFF17 		.word	_NEGAT+MAPOFFSET
 1213 08a2 03       	_ABSS:	.byte   3
 1214 08a3 414253   		.ascii "ABS"
 1215 08a6 00BF     		.p2align 2 	
 1216              	ABSS:
 1217 08a8 15F0004F 		TST	R5,#0x80000000
 1218 08ac 18BF     		IT NE
 1219 08ae 6D42     	    RSBNE   R5,R5,#0
 1220 08b0 7047     		_NEXT
 1221              	
 1222              	//  0= ( w -- f )
 1223              	// TOS==0?
 1224              	
 1225 08b2 A2FCFF17 		.word _ABSS+MAPOFFSET
ARM GAS  stm32eforth.s 			page 25


 1226 08b6 02       	_ZEQUAL: .byte 2
 1227 08b7 303D     		.ascii "0="
 1228 08b9 0000BF   		.p2align 2
 1229              	ZEQUAL:
 1230 08bc 15B9     		cbnz r5,1f
 1231 08be 4FF0FF35 		mov r5,#-1
 1232 08c2 7047     		_NEXT 
 1233 08c4 85EA0505 	1:  eor r5,r5,r5  
 1234 08c8 7047     		_NEXT 	
 1235              	
 1236              	//    =	 ( w w -- t )
 1237              	// 	Equal?
 1238              	
 1239 08ca B6FCFF17 		.word	_ZEQUAL+MAPOFFSET
 1240 08ce 01       	_EQUAL:	.byte   1
 1241 08cf 3D       		.ascii "="
 1242              		.p2align 2 	
 1243              	EQUAL:
 1244 08d0 51F8044B 		LDR	R4,[R1],#4
 1245 08d4 A542     		CMP	R5,R4
 1246 08d6 0CBF     		ITE EQ 
 1247 08d8 6FF00005 	    MVNEQ	R5,#0
 1248 08dc 0025     		MOVNE	R5,#0
 1249 08de 7047     		_NEXT
 1250              	
 1251              	//    U<	 ( w w -- t )
 1252              	// 	Unsigned equal?
 1253              	
 1254 08e0 CEFCFF17 		.word	_EQUAL+MAPOFFSET
 1255 08e4 02       	_ULESS:	.byte   2
 1256 08e5 553C     		.ascii "U<"
 1257 08e7 00       		.p2align 2 	
 1258              	ULESS:
 1259 08e8 51F8044B 		LDR	R4,[R1],#4
 1260 08ec AC42     		CMP	R4,R5
 1261 08ee 34BF     		ITE CC 
 1262 08f0 6FF00005 		MVNCC	R5,#0
 1263 08f4 0025     		MOVCS	R5,#0
 1264 08f6 7047     		_NEXT
 1265              	
 1266              	//    <	( w w -- t )
 1267              	// 	Less?
 1268              	
 1269 08f8 E4FCFF17 		.word	_ULESS+MAPOFFSET
 1270 08fc 01       	_LESS:	.byte   1
 1271 08fd 3C       		.ascii "<"
 1272 08fe 00BF     		.p2align 2 	
 1273              	LESS:
 1274 0900 51F8044B 		LDR	R4,[R1],#4
 1275 0904 AC42     		CMP	R4,R5
 1276 0906 B4BF     	    ITE LT
 1277 0908 6FF00005 		MVNLT	R5,#0
 1278 090c 0025     		MOVGE	R5,#0
 1279 090e 7047     		_NEXT
 1280              	
 1281              	//    >	( w w -- t )
 1282              	// 	greater?
ARM GAS  stm32eforth.s 			page 26


 1283              	
 1284 0910 FCFCFF17 		.word	_LESS+MAPOFFSET
 1285 0914 01       	_GREAT:	.byte   1
 1286 0915 3E       		.ascii ">"
 1287 0916 00BF     		.p2align 2 	
 1288              	GREAT:
 1289 0918 51F8044B 		LDR	R4,[R1],#4
 1290 091c AC42     		CMP	R4,R5
 1291 091e CCBF     		ITE GT
 1292 0920 6FF00005 	    MVNGT	R5,#0
 1293 0924 0025     		MOVLE	R5,#0
 1294 0926 7047     		_NEXT
 1295              	
 1296              	//    MAX	 ( w w -- max )
 1297              	// 	Leave maximum.
 1298              	
 1299 0928 14FDFF17 		.word	_GREAT+MAPOFFSET
 1300 092c 03       	_MAX:	.byte   3
 1301 092d 4D4158   		.ascii "MAX"
 1302              		.p2align 2 	
 1303              	MAX:
 1304 0930 51F8044B 		LDR	R4,[R1],#4
 1305 0934 AC42     		CMP	R4,R5
 1306 0936 C8BF     		IT GT 
 1307 0938 2546     		MOVGT	R5,R4
 1308 093a 7047     		_NEXT
 1309              	
 1310              	//    MIN	 ( w w -- min )
 1311              	// 	Leave minimum.
 1312              	
 1313 093c 2CFDFF17 		.word	_MAX+MAPOFFSET
 1314 0940 03       	_MIN:	.byte   3
 1315 0941 4D494E   		.ascii "MIN"
 1316              		.p2align 2 	
 1317              	MIN:
 1318 0944 51F8044B 		LDR	R4,[R1],#4
 1319 0948 AC42     		CMP	R4,R5
 1320 094a B8BF     		IT LT
 1321 094c 2546     		MOVLT	R5,R4
 1322 094e 7047     		_NEXT
 1323              	
 1324              	//    +!	 ( w a -- )
 1325              	// 	Add to memory.
 1326              	
 1327 0950 40FDFF17 		.word	_MIN+MAPOFFSET
 1328 0954 02       	_PSTOR:	.byte   2
 1329 0955 2B21     		.ascii "+!"
 1330 0957 00       		.p2align 2 	
 1331              	PSTOR:
 1332 0958 51F8044B 		LDR	R4,[R1],#4
 1333 095c 2E68     		LDR	R6,[R5]
 1334 095e 2644     		ADD	R6,R6,R4
 1335 0960 2E60     		STR	R6,[R5]
 1336 0962 51F8045B 		_POP
 1337 0966 7047     		_NEXT
 1338              	
 1339              	//    2!	 ( d a -- )
ARM GAS  stm32eforth.s 			page 27


 1340              	// 	Store double number.
 1341              	
 1342 0968 54FDFF17 		.word	_PSTOR+MAPOFFSET
 1343 096c 02       	_DSTOR:	.byte   2
 1344 096d 3221     		.ascii "2!"
 1345 096f 00       		.p2align 2 	
 1346              	DSTOR:
 1347 0970 51F8044B 		LDR	R4,[R1],#4
 1348 0974 51F8046B 		LDR	R6,[R1],#4
 1349 0978 45F8044B 		STR	R4,[R5],#4
 1350 097c 2E60     		STR	R6,[R5]
 1351 097e 51F8045B 		_POP
 1352 0982 7047     		_NEXT
 1353              	
 1354              	//    2@	 ( a -- d )
 1355              	// 	Fetch double number.
 1356              	
 1357 0984 6CFDFF17 		.word	_DSTOR+MAPOFFSET
 1358 0988 02       	_DAT:	.byte   2
 1359 0989 3240     		.ascii "2@"
 1360 098b 00       		.p2align 2 	
 1361              	DAT:
 1362 098c 6C68     		LDR	R4,[R5,#4]
 1363 098e 41F8044D 		STR	R4,[R1,#-4]!
 1364 0992 2D68     		LDR	R5,[R5]
 1365 0994 7047     		_NEXT
 1366              	
 1367              	//    COUNT	( b -- b+1 c )
 1368              	// 	Fetch length of string.
 1369              	
 1370 0996 88FDFF17 		.word	_DAT+MAPOFFSET
 1371 099a 05       	_COUNT:	.byte   5
 1372 099b 434F554E 		.ascii "COUNT"
 1372      54
 1373              		.p2align 2 	
 1374              	COUNT:
 1375 09a0 15F8014B 		LDRB	R4,[R5],#1
 1376 09a4 41F8045D 		_PUSH
 1377 09a8 2546     		MOV	R5,R4
 1378 09aa 7047     		_NEXT
 1379              	
 1380              	//    DNEGATE	( d -- -d )
 1381              	// 	Negate double number.
 1382              	
 1383 09ac 9AFDFF17 		.word	_COUNT+MAPOFFSET
 1384 09b0 07       	_DNEGA:	.byte   7
 1385 09b1 444E4547 		.ascii "DNEGATE"
 1385      415445
 1386              		.p2align 2 	
 1387              	DNEGA:
 1388 09b8 0C68     		LDR	R4,[R1]
 1389 09ba A6EB0606 		SUB	R6,R6,R6
 1390 09be 341B     		SUBS R4,R6,R4
 1391 09c0 66EB0505 		SBC	R5,R6,R5
 1392 09c4 0C60     		STR	R4,[R1]
 1393 09c6 7047     		_NEXT
 1394              	
ARM GAS  stm32eforth.s 			page 28


 1395              	// **************************************************************************
 1396              	//  System and user variables
 1397              	
 1398              	//    doVAR	( -- a )
 1399              	// 	Run time routine for VARIABLE and CREATE.
 1400              	
 1401              	// 	.word	_DNEGA+MAPOFFSET
 1402              	// _DOVAR	.byte  COMPO+5
 1403              	// 	.ascii "doVAR"
 1404              	// 	.p2align 2 	
 1405              	DOVAR:
 1406 09c8 41F8045D 		_PUSH
 1407 09cc AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
 1408 09d0 52F804FB 		_UNNEST
 1409              	
 1410              	//    doCON	( -- a ) 
 1411              	// 	Run time routine for CONSTANT.
 1412              	
 1413              	// 	.word	_DOVAR+MAPOFFSET
 1414              	// _DOCON	.byte  COMPO+5
 1415              	// 	.ascii "doCON"
 1416              	// 	.p2align 2 	
 1417              	DOCON:
 1418 09d4 41F8045D 		_PUSH
 1419 09d8 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1420 09dc 52F804FB 		_UNNEST
 1421              	
 1422              	/***********************
 1423              	  system variables 
 1424              	***********************/
 1425              	  
 1426              	//  MSEC ( -- a)
 1427              	// return address of milliseconds counter
 1428 09e0 B0FDFF17 	  .word _DNEGA+MAPOFFSET 
 1429 09e4 04       	_MSEC: .byte 4
 1430 09e5 4D534543 	  .ascii "MSEC"
 1431 09e9 0000BF   	  .p2align 2 
 1432              	MSEC:
 1433 09ec 41F8045D 	  _PUSH
 1434 09f0 03F10405 	  ADD R5,R3,#TICKS_OFS
 1435 09f4 7047     	  _NEXT 
 1436              	
 1437              	// TIMER ( -- a )
 1438 09f6 E4FDFF17 	  .word _MSEC+MAPOFFSET
 1439 09fa 05       	_TIMER:  .byte 5
 1440 09fb 54494D45 	  .ascii "TIMER"
 1440      52
 1441              	  .p2align 2 
 1442              	TIMER:
 1443 0a00 41F8045D 	  _PUSH 
 1444 0a04 03F10805 	  ADD R5,R3,#TIMER_OFS
 1445 0a08 7047     	  _NEXT
 1446              	
 1447              	//    'BOOT	 ( -- a )
 1448              	// 	Application.
 1449              	
 1450 0a0a FAFDFF17 		.word	_TIMER+MAPOFFSET
ARM GAS  stm32eforth.s 			page 29


 1451 0a0e 05       	_TBOOT:	.byte   5
 1452 0a0f 27424F4F 		.ascii "'BOOT"
 1452      54
 1453              		.p2align 2 	
 1454              	TBOOT:
 1455 0a14 41F8045D 		_PUSH
 1456 0a18 03F10C05 		ADD	R5,R3,#BOOT_OFS 
 1457 0a1c 7047     		_NEXT
 1458              		
 1459              	//    BASE	( -- a )
 1460              	// 	Storage of the radix base for numeric I/O.
 1461              	
 1462 0a1e 0EFEFF17 		.word	_TBOOT+MAPOFFSET
 1463 0a22 04       	_BASE:	.byte   4
 1464 0a23 42415345 		.ascii "BASE"
 1465 0a27 00       		.p2align 2 	
 1466              	BASE:
 1467 0a28 41F8045D 		_PUSH
 1468 0a2c 03F11005 		ADD	R5,R3,#BASE_OFS
 1469 0a30 7047     		_NEXT
 1470              	
 1471              	//    tmp	 ( -- a )
 1472              	// 	A temporary storage location used in parse and find.
 1473              	
 1474              	// 	.word	_BASE+MAPOFFSET
 1475              	// _TEMP	.byte   COMPO+3
 1476              	// 	.ascii "tmp"
 1477              	// 	.p2align 2 	
 1478              	TEMP:
 1479 0a32 41F8045D 		_PUSH
 1480 0a36 03F11405 		ADD	R5,R3,#TMP_OFS
 1481 0a3a 7047     		_NEXT
 1482              	
 1483              	//    SPAN	( -- a )
 1484              	// 	Hold character count received by EXPECT.
 1485              	
 1486 0a3c 22FEFF17 		.word	_BASE+MAPOFFSET
 1487 0a40 04       	_SPAN:	.byte   4
 1488 0a41 5350414E 		.ascii "SPAN"
 1489 0a45 0000BF   		.p2align 2 	
 1490              	SPAN:
 1491 0a48 41F8045D 		_PUSH
 1492 0a4c 03F11805 		ADD	R5,R3,#SPAN_OFS
 1493 0a50 7047     		_NEXT
 1494              	
 1495              	//    >IN	 ( -- a )
 1496              	// 	Hold the character pointer while parsing input stream.
 1497              	
 1498 0a52 40FEFF17 		.word	_SPAN+MAPOFFSET
 1499 0a56 03       	_INN:	.byte   3
 1500 0a57 3E494E   		.ascii ">IN"
 1501 0a5a 00BF     		.p2align 2 	
 1502              	INN:
 1503 0a5c 41F8045D 		_PUSH
 1504 0a60 03F11C05 		ADD	R5,R3,#TOIN_OFS
 1505 0a64 7047     		_NEXT
 1506              	
ARM GAS  stm32eforth.s 			page 30


 1507              	//    #TIB	( -- a )
 1508              	// 	Hold the current count and address of the terminal input buffer.
 1509              	
 1510 0a66 56FEFF17 		.word	_INN+MAPOFFSET
 1511 0a6a 04       	_NTIB:	.byte   4
 1512 0a6b 23544942 		.ascii "#TIB"
 1513 0a6f 00       		.p2align 2 	
 1514              	NTIB:
 1515 0a70 41F8045D 		_PUSH
 1516 0a74 03F12005 		ADD	R5,R3,#NTIB_OFS
 1517 0a78 7047     		_NEXT
 1518              	
 1519              	//    'EVAL	( -- a )
 1520              	// 	Execution vector of EVAL.
 1521              	
 1522 0a7a 6AFEFF17 		.word	_NTIB+MAPOFFSET
 1523 0a7e 05       	_TEVAL:	.byte   5
 1524 0a7f 27455641 		.ascii "'EVAL"
 1524      4C
 1525              		.p2align 2 	
 1526              	TEVAL:
 1527 0a84 41F8045D 		_PUSH
 1528 0a88 03F12805 		ADD	R5,R3,#EVAL_OFS
 1529 0a8c 7047     		_NEXT
 1530              	
 1531              	//    HLD	 ( -- a )
 1532              	// 	Hold a pointer in building a numeric output string.
 1533              	
 1534 0a8e 7EFEFF17 		.word	_TEVAL+MAPOFFSET
 1535 0a92 03       	_HLD:	.byte   3
 1536 0a93 484C44   		.ascii "HLD"
 1537 0a96 00BF     		.p2align 2 	
 1538              	HLD:
 1539 0a98 41F8045D 		_PUSH
 1540 0a9c 03F12C05 		ADD	R5,R3,#HLD_OFS
 1541 0aa0 7047     		_NEXT
 1542              	
 1543              	//    CONTEXT	( -- a )
 1544              	// 	A area to specify vocabulary search order.
 1545              	
 1546 0aa2 92FEFF17 		.word	_HLD+MAPOFFSET
 1547 0aa6 07       	_CNTXT:	.byte   7
 1548 0aa7 434F4E54 		.ascii "CONTEXT"
 1548      455854
 1549 0aae 00BF     		.p2align 2 	
 1550              	CNTXT:
 1551              	CRRNT:
 1552 0ab0 41F8045D 		_PUSH
 1553 0ab4 03F13005 		ADD	R5,R3,#CTXT_OFS
 1554 0ab8 7047     		_NEXT
 1555              	
 1556              	//    CP	( -- a )
 1557              	// 	Point to top name in RAM vocabulary.
 1558              	
 1559 0aba A6FEFF17 		.word	_CNTXT+MAPOFFSET
 1560 0abe 02       	_CP:	.byte   2
 1561 0abf 4350     		.ascii "CP"
ARM GAS  stm32eforth.s 			page 31


 1562 0ac1 0000BF   		.p2align 2 	
 1563              	CPP:
 1564 0ac4 41F8045D 		_PUSH
 1565 0ac8 03F13805 		ADD	R5,R3,#RAM_CTOP_OFS
 1566 0acc 7047     		_NEXT
 1567              	
 1568              	//   FCP ( -- a )
 1569              	//  Point ot top of Flash dictionary
 1570 0ace BEFEFF17 		.word _CP+MAPOFFSET
 1571 0ad2 04       	_FCPP: .byte 4 
 1572 0ad3 46435050 		.ascii "FCPP"
 1573 0ad7 00       		.p2align 2 
 1574              	FCPP: 
 1575 0ad8 41F8045D 		_PUSH 
 1576 0adc 03F13405 		ADD R5,R3,#FLSH_CTOP_OFS 
 1577 0ae0 7047     		_NEXT 
 1578              	
 1579              	//    LAST	( -- a )
 1580              	// 	Point to the last name in the name dictionary.
 1581              	
 1582 0ae2 D2FEFF17 		.word	_FCPP+MAPOFFSET
 1583 0ae6 04       	_LAST:	.byte   4
 1584 0ae7 4C415354 		.ascii "LAST"
 1585 0aeb 00       		.p2align 2 	
 1586              	LAST:
 1587 0aec 41F8045D 		_PUSH
 1588 0af0 03F13C05 		ADD	R5,R3,#LASTN_OFS
 1589 0af4 7047     		_NEXT
 1590              	
 1591              	// **************************************************************************
 1592              	//  Common functions
 1593              	
 1594              	//    WITHIN	( u ul uh -- t )
 1595              	// 	Return true if u is within the range of ul and uh.
 1596              	
 1597 0af6 E6FEFF17 		.word	_LAST+MAPOFFSET
 1598 0afa 06       	_WITHI:	.byte   6
 1599 0afb 57495448 		.ascii "WITHIN"
 1599      494E
 1600 0b01 0000BF   		.p2align 2 	
 1601              	WITHI:
 1602 0b04 42F804ED 		_NEST
 1603 0b08 FFF7ACFD 		BL	OVER
 1604 0b0c FFF704FE 		BL	SUBB
 1605 0b10 FFF77AFD 		BL	TOR
 1606 0b14 FFF700FE 		BL	SUBB
 1607 0b18 FFF764FD 		BL	RFROM
 1608 0b1c FFF7E4FE 		BL	ULESS
 1609 0b20 52F804FB 		_UNNEST
 1610              	
 1611              	//  Divide
 1612              	
 1613              	//    UM/MOD	( udl udh u -- ur uq )
 1614              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1615              	
 1616 0b24 FAFEFF17 		.word	_WITHI+MAPOFFSET
 1617 0b28 06       	_UMMOD:	.byte   6
ARM GAS  stm32eforth.s 			page 32


 1618 0b29 554D2F4D 		.ascii "UM/MOD"
 1618      4F44
 1619 0b2f 00       		.p2align 2 	
 1620              	UMMOD:
 1621 0b30 4FF00107 		MOV	R7,#1
 1622 0b34 51F8044B 		LDR	R4,[R1],#4
 1623 0b38 0E68     		LDR	R6,[R1]
 1624              	UMMOD0:
 1625 0b3a B619     		ADDS	R6,R6,R6
 1626 0b3c 6441     		ADCS	R4,R4,R4
 1627 0b3e 04D3     		BCC	UMMOD1
 1628 0b40 A4EB0504 		SUB	R4,R4,R5
 1629 0b44 06F10106 		ADD	R6,R6,#1
 1630 0b48 04E0     		B UMMOD2
 1631              	UMMOD1:
 1632 0b4a 641B     		SUBS	R4,R4,R5 
 1633 0b4c 28BF     		IT CS 
 1634 0b4e 0136     		ADDCS	R6,R6,#1
 1635 0b50 00D2     		BCS	UMMOD2
 1636 0b52 2C44     		ADD	R4,R4,R5
 1637              	UMMOD2:
 1638 0b54 FF19     		ADDS	R7,R7,R7
 1639 0b56 F0D3     		BCC	UMMOD0
 1640 0b58 3546     		MOV	R5,R6
 1641 0b5a 0C60     		STR	R4,[R1]
 1642 0b5c 7047     		_NEXT
 1643              	
 1644              	//    M/MOD	( d n -- r q )
 1645              	// 	Signed floored divide of double by single. Return mod and quotient.
 1646              	
 1647 0b5e 28FFFF17 		.word	_UMMOD+MAPOFFSET
 1648 0b62 05       	_MSMOD:	.byte  5
 1649 0b63 4D2F4D4F 		.ascii "M/MOD"
 1649      44
 1650              		.p2align 2 	
 1651              	MSMOD:	
 1652 0b68 42F804ED 		_NEST
 1653 0b6c FFF768FD 		BL	DUPP
 1654 0b70 FFF780FD 		BL	ZLESS
 1655 0b74 FFF764FD 		BL	DUPP
 1656 0b78 FFF746FD 		BL	TOR
 1657 0b7c FFF7F6FC 		BL	QBRAN
 1658 0b80 94FFFF17 		.word	MMOD1+MAPOFFSET
 1659 0b84 FFF788FE 		BL	NEGAT
 1660 0b88 FFF73EFD 		BL	TOR
 1661 0b8c FFF714FF 		BL	DNEGA
 1662 0b90 FFF728FD 		BL	RFROM
 1663              	MMOD1:
 1664 0b94 FFF738FD 	  BL	TOR
 1665 0b98 FFF752FD 		BL	DUPP
 1666 0b9c FFF76AFD 		BL	ZLESS
 1667 0ba0 FFF7E4FC 		BL	QBRAN
 1668 0ba4 B0FFFF17 		.word	MMOD2+MAPOFFSET
 1669 0ba8 FFF726FD 		BL	RAT
 1670 0bac FFF7ACFD 		BL	PLUS
 1671              	MMOD2:
 1672 0bb0 FFF718FD 	  BL	RFROM
ARM GAS  stm32eforth.s 			page 33


 1673 0bb4 FFF7BCFF 		BL	UMMOD
 1674 0bb8 FFF714FD 		BL	RFROM
 1675 0bbc FFF7D6FC 		BL	QBRAN
 1676 0bc0 D0FFFF17 		.word	MMOD3+MAPOFFSET
 1677 0bc4 FFF744FD 		BL	SWAP
 1678 0bc8 FFF766FE 		BL	NEGAT
 1679 0bcc FFF740FD 		BL	SWAP
 1680              	MMOD3:   
 1681 0bd0 52F804FB 		_UNNEST
 1682              	
 1683              	//    /MOD	( n n -- r q )
 1684              	// 	Signed divide. Return mod and quotient.
 1685              	
 1686 0bd4 62FFFF17 		.word	_MSMOD+MAPOFFSET
 1687 0bd8 04       	_SLMOD:	.byte   4
 1688 0bd9 2F4D4F44 		.ascii "/MOD"
 1689 0bdd 0000BF   		.p2align 2 	
 1690              	SLMOD:
 1691 0be0 42F804ED 		_NEST
 1692 0be4 FFF73EFD 		BL	OVER
 1693 0be8 FFF744FD 		BL	ZLESS
 1694 0bec FFF730FD 		BL	SWAP
 1695 0bf0 FFF7BAFF 		BL	MSMOD
 1696 0bf4 52F804FB 		_UNNEST
 1697              	
 1698              	//    MOD	 ( n n -- r )
 1699              	// 	Signed divide. Return mod only.
 1700              	
 1701 0bf8 D8FFFF17 		.word	_SLMOD+MAPOFFSET
 1702 0bfc 03       	_MODD:	.byte  3
 1703 0bfd 4D4F44   		.ascii "MOD"
 1704              		.p2align 2 	
 1705              	MODD:
 1706 0c00 42F804ED 		_NEST
 1707 0c04 FFF7ECFF 		BL	SLMOD
 1708 0c08 FFF712FD 		BL	DROP
 1709 0c0c 52F804FB 		_UNNEST
 1710              	
 1711              	//    /	   ( n n -- q )
 1712              	// 	Signed divide. Return quotient only.
 1713              	
 1714 0c10 FCFFFF17 		.word	_MODD+MAPOFFSET
 1715 0c14 01       	_SLASH:	.byte  1
 1716 0c15 2F       		.ascii "/"
 1717 0c16 00BF     		.p2align 2 	
 1718              	SLASH:
 1719 0c18 42F804ED 		_NEST
 1720 0c1c FFF7E0FF 		BL	SLMOD
 1721 0c20 FFF716FD 		BL	SWAP
 1722 0c24 FFF704FD 		BL	DROP
 1723 0c28 52F804FB 		_UNNEST
 1724              	
 1725              	//    */MOD	( n1 n2 n3 -- r q )
 1726              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1727              	
 1728 0c2c 14000018 		.word	_SLASH+MAPOFFSET
 1729 0c30 05       	_SSMOD:	.byte  5
ARM GAS  stm32eforth.s 			page 34


 1730 0c31 2A2F4D4F 		.ascii "*/MOD"
 1730      44
 1731 0c36 00BF     		.p2align 2 	
 1732              	SSMOD:
 1733 0c38 42F804ED 		_NEST
 1734 0c3c FFF7E4FC 		BL	TOR
 1735 0c40 FFF786FD 		BL	MSTAR
 1736 0c44 FFF7CEFC 		BL	RFROM
 1737 0c48 FFF78EFF 		BL	MSMOD
 1738 0c4c 52F804FB 		_UNNEST
 1739              	
 1740              	//    */	  ( n1 n2 n3 -- q )
 1741              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1742              	
 1743 0c50 30000018 		.word	_SSMOD+MAPOFFSET
 1744 0c54 02       	_STASL:	.byte  2
 1745 0c55 2A2F     		.ascii "*/"
 1746 0c57 00       		.p2align 2 	
 1747              	STASL:
 1748 0c58 42F804ED 		_NEST
 1749 0c5c FFF7ECFF 		BL	SSMOD
 1750 0c60 FFF7F6FC 		BL	SWAP
 1751 0c64 FFF7E4FC 		BL	DROP
 1752 0c68 52F804FB 		_UNNEST
 1753              	
 1754              	// **************************************************************************
 1755              	//  Miscellaneous
 1756              	
 1757              	//    ALIGNED	( b -- a )
 1758              	// 	Align address to the cell boundary.
 1759              	
 1760 0c6c 54000018 		.word	_STASL+MAPOFFSET
 1761 0c70 07       	_ALGND:	.byte   7
 1762 0c71 414C4947 		.ascii "ALIGNED"
 1762      4E4544
 1763              		.p2align 2 	
 1764              	ALGND:
 1765 0c78 05F10305 		ADD	R5,R5,#3
 1766 0c7c 6FF00304 		MVN	R4,#3
 1767 0c80 05EA0405 		AND	R5,R5,R4
 1768 0c84 7047     		_NEXT
 1769              	
 1770              	//    >CHAR	( c -- c )
 1771              	// 	Filter non-printing characters.
 1772              	
 1773 0c86 70000018 		.word	_ALGND+MAPOFFSET
 1774 0c8a 05       	_TCHAR:	.byte  5
 1775 0c8b 3E434841 		.ascii ">CHAR"
 1775      52
 1776              		.p2align 2 	
 1777              	TCHAR:
 1778 0c90 42F804ED 		_NEST
 1779 0c94 FFF747FC 		_DOLIT
 1780 0c98 7F000000 		.word	0x7F
 1781 0c9c FFF7F4FC 		BL	ANDD
 1782 0ca0 FFF7CEFC 		BL	DUPP	// mask msb
 1783 0ca4 FFF78EFD 		BL	BLANK
ARM GAS  stm32eforth.s 			page 35


 1784 0ca8 FFF73DFC 		_DOLIT
 1785 0cac 7F000000 		.word	127
 1786 0cb0 FFF728FF 		BL	WITHI	// check for printable
 1787 0cb4 FFF7E6FD 		BL	INVER
 1788 0cb8 FFF758FC 		BL	QBRAN
 1789 0cbc CC000018 		.word	TCHA1+MAPOFFSET
 1790 0cc0 FFF7B6FC 		BL	DROP
 1791 0cc4 FFF72FFC 		_DOLIT
 1792 0cc8 5F000000 		.word	'_'	// replace non-printables
 1793              	TCHA1:
 1794 0ccc 52F804FB 		  _UNNEST
 1795              	
 1796              	//    DEPTH	( -- n )
 1797              	// 	Return the depth of the data stack.
 1798              	
 1799 0cd0 8A000018 		.word	_TCHAR+MAPOFFSET
 1800 0cd4 05       	_DEPTH:	.byte  5
 1801 0cd5 44455054 		.ascii "DEPTH"
 1801      48
 1802 0cda 00BF     		.p2align 2 	
 1803              	DEPTH:
 1804 0cdc 41F8045D 		_PUSH
 1805 0ce0 44F68465 		MOVW	R5,#SPP&0xffff+4 
 1806 0ce4 C2F20005 	 	MOVT	R5,#SPP>>16 
 1807 0ce8 A5EB0105 		SUB	R5,R5,R1
 1808 0cec 4FEAA505 		ASR	R5,R5,#2
 1809 0cf0 A5F10105 		SUB	R5,R5,#1
 1810 0cf4 7047     		_NEXT
 1811              	
 1812              	//    PICK	( ... +n -- ... w )
 1813              	// 	Copy the nth stack item to tos.
 1814              	
 1815 0cf6 D4000018 		.word	_DEPTH+MAPOFFSET
 1816 0cfa 04       	_PICK:	.byte  4
 1817 0cfb 5049434B 		.ascii "PICK"
 1818 0cff 00       		.p2align 2 	
 1819              	PICK:
 1820 0d00 42F804ED 		_NEST
 1821 0d04 FFF72EFD 		BL	ONEP
 1822 0d08 FFF766FD 		BL	CELLS
 1823 0d0c FFF786FC 		BL	SPAT
 1824 0d10 FFF7FAFC 		BL	PLUS
 1825 0d14 FFF750FC 		BL	AT
 1826 0d18 52F804FB 		_UNNEST
 1827              	
 1828              	// **************************************************************************
 1829              	//  Memory access
 1830              	
 1831              	//    HERE	( -- a )
 1832              	// 	Return the top of the code dictionary.
 1833              	
 1834 0d1c FA000018 		.word	_PICK+MAPOFFSET
 1835 0d20 04       	_HERE:	.byte  4
 1836 0d21 48455245 		.ascii "HERE"
 1837 0d25 0000BF   		.p2align 2 	
 1838              	HERE:
 1839 0d28 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 36


 1840 0d2c FFF7CAFE 		BL	CPP
 1841 0d30 FFF742FC 		BL	AT
 1842 0d34 52F804FB 		_UNNEST
 1843              		
 1844              	//    PAD	 ( -- a )
 1845              	// 	Return the address of a temporary buffer.
 1846              	
 1847 0d38 20010018 		.word	_HERE+MAPOFFSET
 1848 0d3c 03       	_PAD:	.byte  3
 1849 0d3d 504144   		.ascii "PAD"
 1850              		.p2align 2 	
 1851              	PAD:
 1852 0d40 42F804ED 		_NEST
 1853 0d44 FFF7F0FF 		BL	HERE
 1854 0d48 05F15005 		ADD	R5,R5,#80
 1855 0d4c 52F804FB 		_UNNEST
 1856              	
 1857              	//    TIB	 ( -- a )
 1858              	// 	Return the address of the terminal input buffer.
 1859              	
 1860 0d50 3C010018 		.word	_PAD+MAPOFFSET
 1861 0d54 03       	_TIB:	.byte  3
 1862 0d55 544942   		.ascii "TIB"
 1863              		.p2align 2 	
 1864              	TIB:
 1865 0d58 41F8045D 		_PUSH
 1866 0d5c 5D6A     		ldr r5,[r3,#TIB_OFS]
 1867 0d5e 7047     		_NEXT
 1868              	
 1869              	//    @EXECUTE	( a -- )
 1870              	// 	Execute vector stored in address a.
 1871              	
 1872 0d60 54010018 		.word	_TIB+MAPOFFSET
 1873 0d64 08       	_ATEXE:	.byte   8
 1874 0d65 40455845 		.ascii "@EXECUTE"
 1874      43555445 
 1875 0d6d 0000BF   		.p2align 2 	
 1876              	ATEXE:
 1877 0d70 2C00     		MOVS	R4,R5
 1878 0d72 51F8045B 		_POP
 1879 0d76 2468     		LDR	R4,[R4]
 1880 0d78 44F00104 		ORR	R4,R4,#1
 1881 0d7c 18BF     	    IT NE 
 1882 0d7e 2047     		BXNE	R4
 1883 0d80 7047     		_NEXT
 1884              	
 1885              	//    CMOVE	( b1 b2 u -- )
 1886              	// 	Copy u bytes from b1 to b2.
 1887              	
 1888 0d82 64010018 		.word	_ATEXE+MAPOFFSET
 1889 0d86 05       	_CMOVE:	.byte   5
 1890 0d87 434D4F56 		.ascii "CMOVE"
 1890      45
 1891              		.p2align 2 	
 1892              	CMOVE:
 1893 0d8c 51F8046B 		LDR	R6,[R1],#4
 1894 0d90 51F8047B 		LDR	R7,[R1],#4
ARM GAS  stm32eforth.s 			page 37


 1895 0d94 03E0     		B CMOV1
 1896              	CMOV0:
 1897 0d96 17F8014B 		LDRB	R4,[R7],#1
 1898 0d9a 06F8014B 		STRB	R4,[R6],#1
 1899              	CMOV1:
 1900 0d9e 2D00     		MOVS	R5,R5
 1901 0da0 02D0     		BEQ	CMOV2
 1902 0da2 A5F10105 		SUB	R5,R5,#1
 1903 0da6 F6E7     		B CMOV0
 1904              	CMOV2:
 1905 0da8 51F8045B 		_POP
 1906 0dac 7047     		_NEXT
 1907              	
 1908              	//    MOVE	( a1 a2 u -- )
 1909              	// 	Copy u words from a1 to a2.
 1910              	
 1911 0dae 86010018 		.word	_CMOVE+MAPOFFSET
 1912 0db2 04       	_MOVE:	.byte   4
 1913 0db3 4D4F5645 		.ascii "MOVE"
 1914 0db7 00       		.p2align 2 	
 1915              	MOVE:
 1916 0db8 25F00305 		AND	R5,R5,#-4
 1917 0dbc 51F8046B 		LDR	R6,[R1],#4
 1918 0dc0 51F8047B 		LDR	R7,[R1],#4
 1919 0dc4 03E0     		B MOVE1
 1920              	MOVE0:
 1921 0dc6 57F8044B 		LDR	R4,[R7],#4
 1922 0dca 46F8044B 		STR	R4,[R6],#4
 1923              	MOVE1:
 1924 0dce 2D00     		MOVS	R5,R5
 1925 0dd0 02D0     		BEQ	MOVE2
 1926 0dd2 A5F10405 		SUB	R5,R5,#4
 1927 0dd6 F6E7     		B MOVE0
 1928              	MOVE2:
 1929 0dd8 51F8045B 		_POP
 1930 0ddc 7047     		_NEXT
 1931              	
 1932              	//    FILL	( b u c -- )
 1933              	// 	Fill u bytes of character c to area beginning at b.
 1934              	
 1935 0dde B2010018 		.word	_MOVE+MAPOFFSET
 1936 0de2 04       	_FILL:	.byte   4
 1937 0de3 46494C4C 		.ascii "FILL"
 1938 0de7 00       		.p2align 2 	
 1939              	FILL:
 1940 0de8 51F8046B 		LDR	R6,[R1],#4
 1941 0dec 51F8047B 		LDR	R7,[R1],#4
 1942              	FILL0:
 1943 0df0 00E0     		B FILL1
 1944 0df2 2D46     		MOV	R5,R5
 1945              	FILL1:
 1946 0df4 07F8015B 		STRB	R5,[R7],#1
 1947 0df8 3600     		MOVS	R6,R6
 1948 0dfa 02D0     		BEQ	FILL2
 1949 0dfc A6F10106 		SUB	R6,R6,#1
 1950 0e00 F6E7     		B FILL0
 1951              	FILL2:
ARM GAS  stm32eforth.s 			page 38


 1952 0e02 51F8045B 		_POP
 1953 0e06 7047     		_NEXT
 1954              	
 1955              	//    PACK$	( b u a -- a )
 1956              	// 	Build a counted word with u characters from b. Null fill.
 1957              	
 1958 0e08 E2010018 		.word	_FILL+MAPOFFSET
 1959 0e0c 05       	_PACKS:	.byte  5
 1960 0e0d 5041434B 		.ascii "PACK$$"
 1960      2424
 1961 0e13 00       		.p2align 2 	
 1962              	PACKS:
 1963 0e14 42F804ED 		_NEST
 1964 0e18 FFF72EFF 		BL	ALGND
 1965 0e1c FFF710FC 		BL	DUPP
 1966 0e20 FFF7F2FB 		BL	TOR			// strings only on cell boundary
 1967 0e24 FFF71EFC 		BL	OVER
 1968 0e28 FFF76EFC 		BL	PLUS
 1969 0e2c FFF79AFC 		BL	ONEP
 1970 0e30 FFF779FB 		_DOLIT
 1971 0e34 FCFFFFFF 		.word	0xFFFFFFFC
 1972 0e38 FFF726FC 		BL	ANDD			// count mod cell
 1973 0e3c FFF773FB 		_DOLIT
 1974 0e40 00000000 		.word	0
 1975 0e44 FFF704FC 		BL	SWAP
 1976 0e48 FFF7ACFB 		BL	STORE			// null fill cell
 1977 0e4c FFF7D4FB 		BL	RAT
 1978 0e50 FFF700FD 		BL	DDUP
 1979 0e54 FFF7B6FB 		BL	CSTOR
 1980 0e58 FFF784FC 		BL	ONEP			// save count
 1981 0e5c FFF7F8FB 		BL	SWAP
 1982 0e60 FFF794FF 		BL	CMOVE
 1983 0e64 FFF7BEFB 		BL	RFROM
 1984 0e68 52F804FB 		_UNNEST   			// move string
 1985              	
 1986              	// **************************************************************************
 1987              	//  Numeric output, single precision
 1988              	
 1989              	//    DIGIT	( u -- c )
 1990              	// 	Convert digit u to a character.
 1991              	
 1992 0e6c 0C020018 		.word	_PACKS+MAPOFFSET
 1993 0e70 05       	_DIGIT:	.byte  5
 1994 0e71 44494749 		.ascii "DIGIT"
 1994      54
 1995 0e76 00BF     		.p2align 2 	
 1996              	DIGIT:
 1997 0e78 42F804ED 		_NEST
 1998 0e7c FFF753FB 		_DOLIT
 1999 0e80 09000000 		.word	9
 2000 0e84 FFF7EEFB 		BL	OVER
 2001 0e88 FFF73AFD 		BL	LESS
 2002 0e8c 05F00705 		AND	R5,R5,#7
 2003 0e90 FFF73AFC 		BL	PLUS
 2004 0e94 05F13005 		ADD	R5,R5,#'0'
 2005 0e98 52F804FB 		_UNNEST
 2006              	
ARM GAS  stm32eforth.s 			page 39


 2007              	//    EXTRACT	( n base -- n c )
 2008              	// 	Extract the least significant digit from n.
 2009              	
 2010 0e9c 70020018 		.word	_DIGIT+MAPOFFSET
 2011 0ea0 07       	_EXTRC:	.byte  7
 2012 0ea1 45585452 		.ascii "EXTRACT"
 2012      414354
 2013              		.p2align 2 	
 2014              	EXTRC:
 2015 0ea8 42F804ED 		_NEST
 2016 0eac FFF73BFB 		_DOLIT
 2017 0eb0 00000000 		.word	0
 2018 0eb4 FFF7CCFB 		BL	SWAP
 2019 0eb8 FFF73AFE 		BL	UMMOD
 2020 0ebc FFF7C8FB 		BL	SWAP
 2021 0ec0 FFF7DAFF 		BL	DIGIT
 2022 0ec4 52F804FB 		_UNNEST
 2023              	
 2024              	//    <#	  ( -- )
 2025              	// 	Initiate the numeric output process.
 2026              	
 2027 0ec8 A0020018 		.word	_EXTRC+MAPOFFSET
 2028 0ecc 02       	_BDIGS:	.byte  2
 2029 0ecd 3C23     		.ascii "<#"
 2030 0ecf 00       		.p2align 2 	
 2031              	BDIGS:
 2032 0ed0 42F804ED 		_NEST
 2033 0ed4 FFF734FF 		BL	PAD
 2034 0ed8 FFF7DEFD 		BL	HLD
 2035 0edc FFF762FB 		BL	STORE
 2036 0ee0 52F804FB 		_UNNEST
 2037              	
 2038              	//    HOLD	( c -- )
 2039              	// 	Insert a character into the numeric output string.
 2040              	
 2041 0ee4 CC020018 		.word	_BDIGS+MAPOFFSET
 2042 0ee8 04       	_HOLD:	.byte  4
 2043 0ee9 484F4C44 		.ascii "HOLD"
 2044 0eed 0000BF   		.p2align 2 	
 2045              	HOLD:
 2046 0ef0 42F804ED 		_NEST
 2047 0ef4 FFF7D0FD 		BL	HLD
 2048 0ef8 FFF75EFB 		BL	AT
 2049 0efc FFF73AFC 		BL	ONEM
 2050 0f00 FFF79EFB 		BL	DUPP
 2051 0f04 FFF7C8FD 		BL	HLD
 2052 0f08 FFF74CFB 		BL	STORE
 2053 0f0c FFF75AFB 		BL	CSTOR
 2054 0f10 52F804FB 		_UNNEST
 2055              	
 2056              	//    #	   ( u -- u )
 2057              	// 	Extract one digit from u and append the digit to output string.
 2058              	
 2059 0f14 E8020018 		.word	_HOLD+MAPOFFSET
 2060 0f18 01       	_DIG:	.byte  1
 2061 0f19 23       		.ascii "#"
 2062 0f1a 00BF     		.p2align 2 	
ARM GAS  stm32eforth.s 			page 40


 2063              	DIG:
 2064 0f1c 42F804ED 		_NEST
 2065 0f20 FFF782FD 		BL	BASE
 2066 0f24 FFF748FB 		BL	AT
 2067 0f28 FFF7BEFF 		BL	EXTRC
 2068 0f2c FFF7E0FF 		BL	HOLD
 2069 0f30 52F804FB 		_UNNEST
 2070              	
 2071              	//    #S	  ( u -- 0 )
 2072              	// 	Convert u until all digits are added to the output string.
 2073              	
 2074 0f34 18030018 		.word	_DIG+MAPOFFSET
 2075 0f38 02       	_DIGS:	.byte  2
 2076 0f39 2353     		.ascii "#S"
 2077 0f3b 00       		.p2align 2 	
 2078              	DIGS:
 2079 0f3c 42F804ED 		_NEST
 2080              	DIGS1:
 2081 0f40 FFF7ECFF 	    BL	DIG
 2082 0f44 FFF77CFB 		BL	DUPP
 2083 0f48 FFF710FB 		BL	QBRAN
 2084 0f4c 52030018 		.word	DIGS2+MAPOFFSET
 2085 0f50 F6E7     		B	DIGS1
 2086              	DIGS2:
 2087 0f52 52F804FB 		  _UNNEST
 2088              	
 2089              	//    SIGN	( n -- )
 2090              	// 	Add a minus sign to the numeric output string.
 2091              	
 2092 0f56 38030018 		.word	_DIGS+MAPOFFSET
 2093 0f5a 04       	_SIGN:	.byte  4
 2094 0f5b 5349474E 		.ascii "SIGN"
 2095 0f5f 00       		.p2align 2 	
 2096              	SIGN:
 2097 0f60 42F804ED 		_NEST
 2098 0f64 FFF786FB 		BL	ZLESS
 2099 0f68 FFF700FB 		BL	QBRAN
 2100 0f6c 7C030018 		.word	SIGN1+MAPOFFSET
 2101 0f70 FFF7D9FA 		_DOLIT
 2102 0f74 2D000000 		.word	'-'
 2103 0f78 FFF7BAFF 		BL	HOLD
 2104              	SIGN1:
 2105 0f7c 52F804FB 		  _UNNEST
 2106              	
 2107              	//    #>	  ( w -- b u )
 2108              	// 	Prepare the outputDCB to be TYPE'd.
 2109              	
 2110 0f80 5A030018 		.word	_SIGN+MAPOFFSET
 2111 0f84 02       	_EDIGS:	.byte  2
 2112 0f85 233E     		.ascii "#>"
 2113 0f87 00       		.p2align 2 	
 2114              	EDIGS:
 2115 0f88 42F804ED 		_NEST
 2116 0f8c FFF750FB 		BL	DROP
 2117 0f90 FFF782FD 		BL	HLD
 2118 0f94 FFF710FB 		BL	AT
 2119 0f98 FFF7D2FE 		BL	PAD
ARM GAS  stm32eforth.s 			page 41


 2120 0f9c FFF762FB 		BL	OVER
 2121 0fa0 FFF7BAFB 		BL	SUBB
 2122 0fa4 52F804FB 		_UNNEST
 2123              	
 2124              	//    str	 ( n -- b u )
 2125              	// 	Convert a signed integer to a numeric string.
 2126              	
 2127              	// 	.word	_EDIGS+MAPOFFSET
 2128              	// _STRR	.byte  3
 2129              	// 	.ascii "str"
 2130              	// 	.p2align 2 	
 2131              	STRR:
 2132 0fa8 42F804ED 		_NEST
 2133 0fac FFF748FB 		BL	DUPP
 2134 0fb0 FFF72AFB 		BL	TOR
 2135 0fb4 FFF778FC 		BL	ABSS
 2136 0fb8 FFF78AFF 		BL	BDIGS
 2137 0fbc FFF7BEFF 		BL	DIGS
 2138 0fc0 FFF710FB 		BL	RFROM
 2139 0fc4 FFF7CCFF 		BL	SIGN
 2140 0fc8 FFF7DEFF 		BL	EDIGS
 2141 0fcc 52F804FB 		_UNNEST
 2142              	
 2143              	//    HEX	 ( -- )
 2144              	// 	Use radix 16 as base for numeric conversions.
 2145              	
 2146 0fd0 84030018 		.word	_EDIGS+MAPOFFSET
 2147 0fd4 03       	_HEX:	.byte  3
 2148 0fd5 484558   		.ascii "HEX"
 2149              		.p2align 2 	
 2150              	HEX:
 2151 0fd8 42F804ED 		_NEST
 2152 0fdc FFF7A3FA 		_DOLIT
 2153 0fe0 10000000 		.word	16
 2154 0fe4 FFF720FD 		BL	BASE
 2155 0fe8 FFF7DCFA 		BL	STORE
 2156 0fec 52F804FB 		_UNNEST
 2157              	
 2158              	//    DECIMAL	( -- )
 2159              	// 	Use radix 10 as base for numeric conversions.
 2160              	
 2161 0ff0 D4030018 		.word	_HEX+MAPOFFSET
 2162 0ff4 07       	_DECIM:	.byte  7
 2163 0ff5 44454349 		.ascii "DECIMAL"
 2163      4D414C
 2164              		.p2align 2 	
 2165              	DECIM:
 2166 0ffc 42F804ED 		_NEST
 2167 1000 FFF791FA 		_DOLIT
 2168 1004 0A000000 		.word	10
 2169 1008 FFF70EFD 		BL	BASE
 2170 100c FFF7CAFA 		BL	STORE
 2171 1010 52F804FB 		_UNNEST
 2172              	
 2173              	// **************************************************************************
 2174              	//  Numeric input, single precision
 2175              	
ARM GAS  stm32eforth.s 			page 42


 2176              	//    DIGIT?	( c base -- u t )
 2177              	// 	Convert a character to its numeric value. A flag indicates success.
 2178              	
 2179 1014 F4030018 		.word	_DECIM+MAPOFFSET
 2180 1018 06       	_DIGTQ:	.byte  6
 2181 1019 44494749 		.ascii "DIGIT?"
 2181      543F
 2182 101f 00       		.p2align 2 	
 2183              	DIGTQ:
 2184 1020 42F804ED 		_NEST
 2185 1024 FFF7F0FA 		BL	TOR
 2186 1028 FFF77DFA 		_DOLIT
 2187 102c 30000000 		.word	'0'
 2188 1030 FFF772FB 		BL	SUBB
 2189 1034 FFF777FA 		_DOLIT
 2190 1038 09000000 		.word	9
 2191 103c FFF712FB 		BL	OVER
 2192 1040 FFF75EFC 		BL	LESS
 2193 1044 FFF792FA 		BL	QBRAN
 2194 1048 6C040018 		.word	DGTQ1+MAPOFFSET
 2195 104c FFF76BFA 		_DOLIT
 2196 1050 07000000 		.word	7
 2197 1054 FFF760FB 		BL	SUBB
 2198 1058 FFF7F2FA 		BL	DUPP
 2199 105c FFF763FA 		_DOLIT
 2200 1060 0A000000 		.word	10
 2201 1064 FFF74CFC 		BL	LESS
 2202 1068 FFF718FB 		BL	ORR
 2203              	DGTQ1:
 2204 106c FFF7E8FA 	  BL	DUPP
 2205 1070 FFF7B8FA 		BL	RFROM
 2206 1074 FFF738FC 		BL	ULESS
 2207 1078 52F804FB 		_UNNEST
 2208              	
 2209              	//    NUMBER?	( a -- n T | a F )
 2210              	// 	Convert a number word to integer. Push a flag on tos.
 2211              	
 2212 107c 18040018 		.word	_DIGTQ+MAPOFFSET
 2213 1080 07       	_NUMBQ:	.byte  7
 2214 1081 4E554D42 		.ascii "NUMBER?"
 2214      45523F
 2215              		.p2align 2 	
 2216              	NUMBQ:
 2217 1088 42F804ED 		_NEST
 2218 108c FFF7CCFC 		BL	BASE
 2219 1090 FFF792FA 		BL	AT
 2220 1094 FFF7B8FA 		BL	TOR
 2221 1098 FFF745FA 		_DOLIT
 2222 109c 00000000 		.word	0
 2223 10a0 FFF7E0FA 		BL	OVER
 2224 10a4 FFF77CFC 		BL	COUNT
 2225 10a8 FFF7DCFA 		BL	OVER
 2226 10ac FFF794FA 		BL	CAT
 2227 10b0 FFF739FA 		_DOLIT
 2228 10b4 24000000 		.word	'$'
 2229 10b8 FFF70AFC 		BL	EQUAL
 2230 10bc FFF756FA 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 43


 2231 10c0 D8040018 		.word	NUMQ1+MAPOFFSET
 2232 10c4 FFF788FF 		BL	HEX
 2233 10c8 FFF7C2FA 		BL	SWAP
 2234 10cc FFF74AFB 		BL	ONEP
 2235 10d0 FFF7BEFA 		BL	SWAP
 2236 10d4 FFF74EFB 		BL	ONEM
 2237              	NUMQ1:
 2238 10d8 FFF7C4FA 		BL	OVER
 2239 10dc FFF77CFA 		BL	CAT
 2240 10e0 FFF721FA 		_DOLIT
 2241 10e4 2D000000 		.word	'-'
 2242 10e8 FFF7F2FB 		BL	EQUAL
 2243 10ec FFF78CFA 		BL	TOR
 2244 10f0 FFF7AEFA 		BL	SWAP
 2245 10f4 FFF780FA 		BL	RAT
 2246 10f8 FFF70EFB 		BL	SUBB
 2247 10fc FFF7A8FA 		BL	SWAP
 2248 1100 FFF77AFA 		BL	RAT
 2249 1104 FFF700FB 		BL	PLUS
 2250 1108 FFF786FB 		BL	QDUP
 2251 110c FFF72EFA 		BL	QBRAN
 2252 1110 9C050018 		.word	NUMQ6+MAPOFFSET
 2253 1114 FFF72EFB 		BL	ONEM
 2254 1118 FFF776FA 		BL	TOR
 2255              	NUMQ2:
 2256 111c FFF790FA 		BL	DUPP
 2257 1120 FFF772FA 		BL	TOR
 2258 1124 FFF758FA 		BL	CAT
 2259 1128 FFF77EFC 		BL	BASE
 2260 112c FFF744FA 		BL	AT
 2261 1130 FFF776FF 		BL	DIGTQ
 2262 1134 FFF71AFA 		BL	QBRAN
 2263 1138 80050018 		.word	NUMQ4+MAPOFFSET
 2264 113c FFF788FA 		BL	SWAP
 2265 1140 FFF772FC 		BL	BASE
 2266 1144 FFF738FA 		BL	AT
 2267 1148 FFF7EEFA 		BL	STAR
 2268 114c FFF7DCFA 		BL	PLUS
 2269 1150 FFF748FA 		BL	RFROM
 2270 1154 FFF706FB 		BL	ONEP
 2271 1158 FFF7F9F9 		BL	DONXT
 2272 115c 1C050018 		.word	NUMQ2+MAPOFFSET
 2273 1160 FFF74AFA 		BL	RAT
 2274 1164 FFF774FA 		BL	SWAP
 2275 1168 FFF762FA 		BL	DROP
 2276 116c FFF7FEF9 		BL	QBRAN
 2277 1170 78050018 		.word	NUMQ3+MAPOFFSET
 2278 1174 FFF790FB 		BL	NEGAT
 2279              	NUMQ3:
 2280 1178 FFF76AFA 		BL	SWAP
 2281 117c 00F00CB8 		B.W	NUMQ5
 2282              	NUMQ4:
 2283 1180 FFF730FA 		BL	RFROM
 2284 1184 FFF72EFA 		BL	RFROM
 2285 1188 FFF75AFB 		BL	DDROP
 2286 118c FFF758FB 		BL	DDROP
 2287 1190 FFF7C9F9 		_DOLIT
ARM GAS  stm32eforth.s 			page 44


 2288 1194 00000000 		.word	0
 2289              	NUMQ5:
 2290 1198 FFF752FA 		BL	DUPP
 2291              	NUMQ6:
 2292 119c FFF722FA 		BL	RFROM
 2293 11a0 FFF74EFB 		BL	DDROP
 2294 11a4 FFF71EFA 		BL	RFROM
 2295 11a8 FFF73EFC 		BL	BASE
 2296 11ac FFF7FAF9 		BL	STORE
 2297 11b0 52F804FB 		_UNNEST
 2298              	
 2299              	// **************************************************************************
 2300              	//  Basic I/O
 2301              	
 2302              	//    KEY	 ( -- c )
 2303              	// 	Wait for and return an input character.
 2304              	
 2305 11b4 80040018 		.word	_NUMBQ+MAPOFFSET
 2306 11b8 03       	_KEY:	.byte  3
 2307 11b9 4B4559   		.ascii "KEY"
 2308              		.p2align 2 	
 2309              	KEY:
 2310 11bc 42F804ED 		_NEST
 2311              	KEY1:
 2312 11c0 FFF786F9 		BL	QRX
 2313 11c4 FFF7D2F9 		BL	QBRAN
 2314 11c8 C0050018 		.word	KEY1+MAPOFFSET
 2315              	// CTRL-C reboot
 2316 11cc FFF738FA 		BL DUPP 
 2317 11d0 FFF7A9F9 		BL DOLIT 
 2318 11d4 03000000 		.word 3 
 2319 11d8 FFF77AFB 		BL EQUAL 
 2320 11dc FFF752FB 		BL INVER
 2321 11e0 FFF7C4F9 		BL QBRAN
 2322 11e4 54F8FF17 		.word REBOOT+MAPOFFSET 
 2323 11e8 52F804FB 		_UNNEST
 2324              	
 2325              	//    SPACE	( -- )
 2326              	// 	Send the blank character to the output device.
 2327              	
 2328 11ec B8050018 		.word	_KEY+MAPOFFSET
 2329 11f0 05       	_SPACE:	.byte  5
 2330 11f1 53504143 		.ascii "SPACE"
 2330      45
 2331 11f6 00BF     		.p2align 2 	
 2332              	SPACE:
 2333 11f8 42F804ED 		_NEST
 2334 11fc FFF7E2FA 		BL	BLANK
 2335 1200 FFF780F9 		BL	EMIT
 2336 1204 52F804FB 		_UNNEST
 2337              	
 2338              	//    SPACES	( +n -- )
 2339              	// 	Send n spaces to the output device.
 2340              	
 2341 1208 F0050018 		.word	_SPACE+MAPOFFSET
 2342 120c 06       	_SPACS:	.byte  6
 2343 120d 53504143 		.ascii "SPACES"
ARM GAS  stm32eforth.s 			page 45


 2343      4553
 2344 1213 00       		.p2align 2 	
 2345              	SPACS:
 2346 1214 42F804ED 		_NEST
 2347 1218 FFF785F9 		_DOLIT
 2348 121c 00000000 		.word	0
 2349 1220 FFF786FB 		BL	MAX
 2350 1224 FFF7F0F9 		BL	TOR
 2351 1228 00F002B8 		B.W	CHAR2
 2352              	CHAR1:
 2353 122c FFF7E4FF 		BL	SPACE
 2354              	CHAR2:
 2355 1230 FFF78DF9 		BL	DONXT
 2356 1234 2C060018 		.word	CHAR1+MAPOFFSET
 2357 1238 52F804FB 		_UNNEST
 2358              	
 2359              	//    TYPE	( b u -- )
 2360              	// 	Output u characters from b.
 2361              	
 2362 123c 0C060018 		.word	_SPACS+MAPOFFSET
 2363 1240 04       	_TYPEE:	.byte	4
 2364 1241 54595045 		.ascii "TYPE"
 2365 1245 0000BF   		.p2align 2 	
 2366              	TYPEE:
 2367 1248 42F804ED 		_NEST
 2368 124c FFF7DCF9 		BL  TOR   // ( a+1 -- R: u )
 2369 1250 05E0     		B	TYPE2
 2370              	TYPE1:  
 2371 1252 FFF7A5FB 		BL  COUNT
 2372 1256 FFF71BFD 		BL	TCHAR
 2373 125a FFF753F9 		BL	EMIT
 2374              	TYPE2:  
 2375 125e FFF776F9 		BL  DONXT  
 2376 1262 52060018 		.word	TYPE1+MAPOFFSET
 2377 1266 FFF7E3F9 		BL	DROP
 2378 126a 52F804FB 		_UNNEST
 2379              	
 2380              	//    CR	  ( -- )
 2381              	// 	Output a carriage return and a line feed.
 2382              	
 2383 126e 40060018 		.word	_TYPEE+MAPOFFSET
 2384 1272 02       	_CR:	.byte  2
 2385 1273 4352     		.ascii "CR"
 2386 1275 0000BF   		.p2align 2 	
 2387              	CR:
 2388 1278 42F804ED 		_NEST
 2389 127c FFF753F9 		_DOLIT
 2390 1280 0D000000 		.word	CRR
 2391 1284 FFF73EF9 		BL	EMIT
 2392 1288 FFF74DF9 		_DOLIT
 2393 128c 0A000000 		.word	LF
 2394 1290 FFF738F9 		BL	EMIT
 2395 1294 52F804FB 		_UNNEST
 2396              	
 2397              	//    do_$	( -- a )
 2398              	// 	Return the address of a compiled string.
 2399              	//  adjust return address to skip over it.
ARM GAS  stm32eforth.s 			page 46


 2400              	
 2401              	// 	.word	_CR+MAPOFFSET
 2402              	// _DOSTR	.byte  COMPO+3
 2403              	// 	.ascii "do$$"
 2404              	// 	.p2align 2 	
 2405              	DOSTR:
 2406 1298 42F804ED 		_NEST     
 2407              	/* compiled string address is 2 levels deep */
 2408 129c FFF7A2F9 		BL	RFROM	// { -- a1 }
 2409 12a0 FFF7A0F9 		BL	RFROM	//  {a1 -- a1 a2 } b0 set
 2410 12a4 FFF766FA 		BL	ONEM	//  clear b0
 2411 12a8 FFF7CAF9 		BL	DUPP	// {a1 a2 -- a1 a2 a2 }
 2412 12ac FFF778FB 		BL	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2413 12b0 FFF72AFA 		BL	PLUS	// { -- a1 a2 a2+1+c }
 2414 12b4 FFF7E0FC 		BL	ALGND	//  end of string
 2415 12b8 FFF754FA 		BL	ONEP	//  restore b0, this result in return address 2 level deep.
 2416 12bc FFF7A4F9 		BL	TOR		//  address after string { -- a1 a2 }
 2417 12c0 FFF7C6F9 		BL	SWAP	//  count tugged
 2418 12c4 FFF7A0F9 		BL	TOR     //  ( -- a2) is string address
 2419 12c8 52F804FB 		_UNNEST
 2420              	
 2421              	//    $"|	( -- a )
 2422              	// 	Run time routine compiled by _". Return address of a compiled string.
 2423              	
 2424              	// 	.word	_DOSTR+MAPOFFSET
 2425              	// _STRQP	.byte  COMPO+3
 2426              	// 	.ascii "$\"|"
 2427              	// 	.p2align 2 	
 2428              	STRQP:
 2429 12cc 42F804ED 		_NEST
 2430 12d0 FFF7E2FF 		BL	DOSTR
 2431 12d4 52F804FB 		_UNNEST			// force a call to dostr
 2432              	
 2433              	//    .$	( a -- )
 2434              	// 	Run time routine of ." . Output a compiled string.
 2435              	
 2436              	// 	.word	_STRQP+MAPOFFSET
 2437              	// _DOTST	.byte  COMPO+2
 2438              	// 	.ascii ".$$"
 2439              	// 	.p2align 2 	
 2440              	DOTST:
 2441 12d8 42F804ED 		_NEST
 2442 12dc FFF760FB 		BL	COUNT // ( -- a+1 c )
 2443 12e0 FFF7B2FF 		BL	TYPEE
 2444 12e4 52F804FB 		_UNNEST
 2445              	
 2446              	//    ."|	( -- )
 2447              	// 	Run time routine of ." . Output a compiled string.
 2448              	
 2449              	// 	.word	_DOTST+MAPOFFSET
 2450              	// _DOTQP	.byte  COMPO+3
 2451              	// 	.ascii ".""|"
 2452              	// 	.p2align 2 	
 2453              	DOTQP:
 2454 12e8 42F804ED 		_NEST
 2455 12ec FFF7D4FF 		BL	DOSTR
 2456 12f0 FFF7F2FF 		BL	DOTST
ARM GAS  stm32eforth.s 			page 47


 2457 12f4 52F804FB 		_UNNEST
 2458              	
 2459              	//    .R	  ( n +n -- )
 2460              	// 	Display an integer in a field of n columns, right justified.
 2461              	
 2462 12f8 72060018 		.word	_CR+MAPOFFSET
 2463 12fc 02       	_DOTR:	.byte  2
 2464 12fd 2E52     		.ascii ".R"
 2465 12ff 00       		.p2align 2 	
 2466              	DOTR:
 2467 1300 42F804ED 		_NEST
 2468 1304 FFF780F9 		BL	TOR
 2469 1308 FFF74EFE 		BL	STRR
 2470 130c FFF76AF9 		BL	RFROM
 2471 1310 FFF7A8F9 		BL	OVER
 2472 1314 FFF700FA 		BL	SUBB
 2473 1318 FFF77CFF 		BL	SPACS
 2474 131c FFF794FF 		BL	TYPEE
 2475 1320 52F804FB 		_UNNEST
 2476              	
 2477              	//    U.R	 ( u +n -- )
 2478              	// 	Display an unsigned integer in n column, right justified.
 2479              	
 2480 1324 FC060018 		.word	_DOTR+MAPOFFSET
 2481 1328 03       	_UDOTR:	.byte  3
 2482 1329 552E52   		.ascii "U.R"
 2483              		.p2align 2 	
 2484              	UDOTR:
 2485 132c 42F804ED 		_NEST
 2486 1330 FFF76AF9 		BL	TOR
 2487 1334 FFF7CCFD 		BL	BDIGS
 2488 1338 FFF700FE 		BL	DIGS
 2489 133c FFF724FE 		BL	EDIGS
 2490 1340 FFF750F9 		BL	RFROM
 2491 1344 FFF78EF9 		BL	OVER
 2492 1348 FFF7E6F9 		BL	SUBB
 2493 134c FFF762FF 		BL	SPACS
 2494 1350 FFF77AFF 		BL	TYPEE
 2495 1354 52F804FB 		_UNNEST
 2496              	
 2497              	//    U.	  ( u -- )
 2498              	// 	Display an unsigned integer in free format.
 2499              	
 2500 1358 28070018 		.word	_UDOTR+MAPOFFSET
 2501 135c 02       	_UDOT:	.byte  2
 2502 135d 552E     		.ascii "U."
 2503 135f 00       		.p2align 2 	
 2504              	UDOT:
 2505 1360 42F804ED 		_NEST
 2506 1364 FFF7B4FD 		BL	BDIGS
 2507 1368 FFF7E8FD 		BL	DIGS
 2508 136c FFF70CFE 		BL	EDIGS
 2509 1370 FFF742FF 		BL	SPACE
 2510 1374 FFF768FF 		BL	TYPEE
 2511 1378 52F804FB 		_UNNEST
 2512              	
 2513              	//    .	   ( w -- )
ARM GAS  stm32eforth.s 			page 48


 2514              	// 	Display an integer in free format, preceeded by a space.
 2515              	
 2516 137c 5C070018 		.word	_UDOT+MAPOFFSET
 2517 1380 01       	_DOT:	.byte  1
 2518 1381 2E       		.ascii "."
 2519 1382 00BF     		.p2align 2 	
 2520              	DOT:
 2521 1384 42F804ED 		_NEST
 2522 1388 FFF74EFB 		BL	BASE
 2523 138c FFF714F9 		BL	AT
 2524 1390 FFF7C9F8 		_DOLIT
 2525 1394 0A000000 		.word	10
 2526 1398 FFF78AF9 		BL	XORR			// ?decimal
 2527 139c FFF7E6F8 		BL	QBRAN
 2528 13a0 AC070018 		.word	DOT1+MAPOFFSET
 2529 13a4 FFF7DCFF 		BL	UDOT
 2530 13a8 52F804FB 		_UNNEST			// no,display unsigned
 2531              	DOT1:
 2532 13ac FFF7FCFD 	    BL	STRR
 2533 13b0 FFF722FF 		BL	SPACE
 2534 13b4 FFF748FF 		BL	TYPEE
 2535 13b8 52F804FB 		_UNNEST			// yes, display signed
 2536              	
 2537              	//    ?	   ( a -- )
 2538              	// 	Display the contents in a memory cell.
 2539              	
 2540 13bc 80070018 		.word	_DOT+MAPOFFSET
 2541 13c0 01       	_QUEST:	.byte  1
 2542 13c1 3F       		.ascii "?"
 2543 13c2 00BF     		.p2align 2 	
 2544              	QUEST:
 2545 13c4 42F804ED 		_NEST
 2546 13c8 FFF7F6F8 		BL	AT
 2547 13cc FFF7DAFF 		BL	DOT
 2548 13d0 52F804FB 		_UNNEST
 2549              	
 2550              	// **************************************************************************
 2551              	//  Parsing
 2552              	
 2553              	//    parse	( b u c -- b u delta //  string> )
 2554              	// 	Scan word delimited by c. Return found string and its offset.
 2555              	
 2556              	// 	.word	_QUEST+MAPOFFSET
 2557              	// _PARS	.byte  5
 2558              	// 	.ascii "parse"
 2559              	// 	.p2align 2 	
 2560              	PARS:
 2561 13d4 42F804ED 		_NEST
 2562 13d8 FFF72BFB 		BL	TEMP
 2563 13dc FFF7E2F8 		BL	STORE
 2564 13e0 FFF740F9 		BL	OVER
 2565 13e4 FFF710F9 		BL	TOR
 2566 13e8 FFF72AF9 		BL	DUPP
 2567 13ec FFF7BEF8 		BL	QBRAN
 2568 13f0 E2080018 		.word	PARS8+MAPOFFSET
 2569 13f4 FFF7BEF9 		BL	ONEM
 2570 13f8 FFF71BFB 		BL	TEMP
ARM GAS  stm32eforth.s 			page 49


 2571 13fc FFF7DCF8 		BL	AT
 2572 1400 FFF7E0F9 		BL	BLANK
 2573 1404 FFF764FA 		BL	EQUAL
 2574 1408 FFF7B0F8 		BL	QBRAN
 2575 140c 5C080018 		.word	PARS3+MAPOFFSET
 2576 1410 FFF7FAF8 		BL	TOR
 2577              	PARS1:
 2578 1414 FFF7D6F9 		BL	BLANK
 2579 1418 FFF724F9 		BL	OVER
 2580 141c FFF7DCF8 		BL	CAT			// skip leading blanks 
 2581 1420 FFF77AF9 		BL	SUBB
 2582 1424 FFF726F9 		BL	ZLESS
 2583 1428 FFF72CFA 		BL	INVER
 2584 142c FFF79EF8 		BL	QBRAN
 2585 1430 58080018 		.word	PARS2+MAPOFFSET
 2586 1434 FFF796F9 		BL	ONEP
 2587 1438 FFF789F8 		BL	DONXT
 2588 143c 14080018 		.word	PARS1+MAPOFFSET
 2589 1440 FFF7D0F8 		BL	RFROM
 2590 1444 FFF7F4F8 		BL	DROP
 2591 1448 FFF76DF8 		_DOLIT
 2592 144c 00000000 		.word	0
 2593 1450 FFF7F6F8 		BL	DUPP
 2594 1454 52F804FB 		_UNNEST
 2595              	PARS2:
 2596 1458 FFF7C4F8 	  BL	RFROM
 2597              	PARS3:
 2598 145c FFF702F9 		BL	OVER
 2599 1460 FFF7F6F8 		BL	SWAP
 2600 1464 FFF7D0F8 		BL	TOR
 2601              	PARS4:
 2602 1468 FFF7E3FA 		BL	TEMP
 2603 146c FFF7A4F8 		BL	AT
 2604 1470 FFF7F8F8 		BL	OVER
 2605 1474 FFF7B0F8 		BL	CAT
 2606 1478 FFF74EF9 		BL	SUBB			// scan for delimiter
 2607 147c FFF7D9FA 		BL	TEMP
 2608 1480 FFF79AF8 		BL	AT
 2609 1484 FFF79EF9 		BL	BLANK
 2610 1488 FFF722FA 		BL	EQUAL
 2611 148c FFF76EF8 		BL	QBRAN
 2612 1490 98080018 		.word	PARS5+MAPOFFSET
 2613 1494 FFF7EEF8 		BL	ZLESS
 2614              	PARS5:
 2615 1498 FFF768F8 		BL	QBRAN
 2616 149c B6080018 		.word	PARS6+MAPOFFSET
 2617 14a0 FFF760F9 		BL	ONEP
 2618 14a4 FFF753F8 		BL	DONXT
 2619 14a8 68080018 		.word	PARS4+MAPOFFSET
 2620 14ac FFF7C8F8 		BL	DUPP
 2621 14b0 FFF7AAF8 		BL	TOR
 2622 14b4 09E0     		B	PARS7
 2623              	PARS6:
 2624 14b6 FFF795F8 		BL	RFROM
 2625 14ba FFF7B9F8 		BL	DROP
 2626 14be FFF7BFF8 		BL	DUPP
 2627 14c2 FFF74FF9 		BL	ONEP
ARM GAS  stm32eforth.s 			page 50


 2628 14c6 FFF79FF8 		BL	TOR
 2629              	PARS7:
 2630 14ca FFF7CBF8 		BL	OVER
 2631 14ce FFF723F9 		BL	SUBB
 2632 14d2 FFF787F8 		BL	RFROM
 2633 14d6 FFF785F8 		BL	RFROM
 2634 14da FFF71DF9 		BL	SUBB
 2635 14de 52F804FB 		_UNNEST
 2636              	PARS8:
 2637 14e2 FFF7BFF8 		BL	OVER
 2638 14e6 FFF77DF8 		BL	RFROM
 2639 14ea FFF715F9 		BL	SUBB
 2640 14ee 52F804FB 		_UNNEST
 2641              	
 2642              	//    PARSE	( c -- b u //  string> )
 2643              	// 	Scan input stream and return counted string delimited by c.
 2644              	
 2645 14f2 C0070018 		.word	_QUEST+MAPOFFSET
 2646 14f6 05       	_PARSE:	.byte  5
 2647 14f7 50415253 		.ascii "PARSE"
 2647      45
 2648              		.p2align 2 	
 2649              	PARSE:
 2650 14fc 42F804ED 		_NEST
 2651 1500 FFF782F8 		BL	TOR
 2652 1504 FFF728FC 		BL	TIB
 2653 1508 FFF7A8FA 		BL	INN
 2654 150c FFF754F8 		BL	AT
 2655 1510 FFF7FAF8 		BL	PLUS			// current input buffer pointer
 2656 1514 FFF7ACFA 		BL	NTIB
 2657 1518 FFF74EF8 		BL	AT
 2658 151c FFF79EFA 		BL	INN
 2659 1520 FFF74AF8 		BL	AT
 2660 1524 FFF7F8F8 		BL	SUBB			// remaining count
 2661 1528 FFF75CF8 		BL	RFROM
 2662 152c FFF752FF 		BL	PARS
 2663 1530 FFF794FA 		BL	INN
 2664 1534 FFF710FA 		BL	PSTOR
 2665 1538 52F804FB 		_UNNEST
 2666              	
 2667              	//    .(	  ( -- )
 2668              	// 	Output following string up to next ) .
 2669              	
 2670 153c F6080018 		.word	_PARSE+MAPOFFSET
 2671 1540 82       	_DOTPR:	.byte  IMEDD+2
 2672 1541 2E28     		.ascii ".("
 2673 1543 00       		.p2align 2 	
 2674              	DOTPR:
 2675 1544 42F804ED 		_NEST
 2676 1548 FEF7EDFF 		_DOLIT
 2677 154c 29000000 		.word	')'
 2678 1550 FFF7D4FF 		BL	PARSE
 2679 1554 FFF778FE 		BL	TYPEE
 2680 1558 52F804FB 		_UNNEST
 2681              	
 2682              	//    (	   ( -- )
 2683              	// 	Ignore following string up to next ) . A comment.
ARM GAS  stm32eforth.s 			page 51


 2684              	
 2685 155c 40090018 		.word	_DOTPR+MAPOFFSET
 2686 1560 81       	_PAREN:	.byte  IMEDD+1
 2687 1561 28       		.ascii "("
 2688 1562 00BF     		.p2align 2 	
 2689              	PAREN:
 2690 1564 42F804ED 		_NEST
 2691 1568 FEF7DDFF 		_DOLIT
 2692 156c 29000000 		.word	')'
 2693 1570 FFF7C4FF 		BL	PARSE
 2694 1574 FFF764F9 		BL	DDROP
 2695 1578 52F804FB 		_UNNEST
 2696              	
 2697              	//    \	   ( -- )
 2698              	// 	Ignore following text till the end of line.
 2699              	
 2700 157c 60090018 		.word	_PAREN+MAPOFFSET
 2701 1580 81       	_BKSLA:	.byte  IMEDD+1
 2702 1581 27       		.byte	'\'
 2703 1582 00BF     		.p2align 2 	
 2704              	BKSLA:
 2705 1584 42F804ED 		_NEST
 2706 1588 FFF772FA 		BL	NTIB
 2707 158c FFF714F8 		BL	AT
 2708 1590 FFF764FA 		BL	INN
 2709 1594 FFF706F8 		BL	STORE
 2710 1598 52F804FB 		_UNNEST
 2711              	
 2712              	//    CHAR	( -- c )
 2713              	// 	Parse next word and return its first character.
 2714              	
 2715 159c 80090018 		.word	_BKSLA+MAPOFFSET
 2716 15a0 04       	_CHAR:	.byte  4
 2717 15a1 43484152 		.ascii "CHAR"
 2718 15a5 0000BF   		.p2align 2 	
 2719              	CHAR:
 2720 15a8 42F804ED 		_NEST
 2721 15ac FFF70AF9 		BL	BLANK
 2722 15b0 FFF7A4FF 		BL	PARSE
 2723 15b4 FFF73CF8 		BL	DROP
 2724 15b8 FFF70EF8 		BL	CAT
 2725 15bc 52F804FB 		_UNNEST
 2726              	
 2727              	//    WORD	( c -- a //  string> )
 2728              	// 	Parse a word from input stream and copy it to code dictionary.
 2729              	
 2730 15c0 A0090018 		.word	_CHAR+MAPOFFSET
 2731 15c4 04       	_WORDD:	.byte  4
 2732 15c5 574F5244 		.ascii "WORD"
 2733 15c9 0000BF   		.p2align 2 	
 2734              	WORDD:
 2735 15cc 42F804ED 		_NEST
 2736 15d0 FFF794FF 		BL	PARSE
 2737 15d4 FFF7A8FB 		BL	HERE
 2738 15d8 FFF7E4F8 		BL	CELLP
 2739 15dc FFF71AFC 		BL	PACKS
 2740 15e0 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 52


 2741              	
 2742              	//    TOKEN	( -- a //  string> )
 2743              	// 	Parse a word from input stream and copy it to name dictionary.
 2744              	
 2745 15e4 C4090018 		.word	_WORDD+MAPOFFSET
 2746 15e8 05       	_TOKEN:	.byte  5
 2747 15e9 544F4B45 		.ascii "TOKEN"
 2747      4E
 2748 15ee 00BF     		.p2align 2 	
 2749              	TOKEN:
 2750 15f0 42F804ED 		_NEST
 2751 15f4 FFF7E6F8 		BL	BLANK
 2752 15f8 FFF7E8FF 		BL	WORDD
 2753 15fc 52F804FB 		_UNNEST
 2754              	
 2755              	// **************************************************************************
 2756              	//  Dictionary search
 2757              	
 2758              	//    NAME>	( na -- ca )
 2759              	// 	Return a code address given a name address.
 2760              	
 2761 1600 E8090018 		.word	_TOKEN+MAPOFFSET
 2762 1604 05       	_NAMET:	.byte  5
 2763 1605 4E414D45 		.ascii "NAME>"
 2763      3E
 2764 160a 00BF     		.p2align 2 	
 2765              	NAMET:
 2766 160c 42F804ED 		_NEST
 2767 1610 FFF7C6F9 		BL	COUNT
 2768 1614 FEF787FF 		_DOLIT
 2769 1618 1F000000 		.word	0x1F
 2770 161c FFF734F8 		BL	ANDD
 2771 1620 FFF772F8 		BL	PLUS
 2772 1624 FFF728FB 		BL	ALGND
 2773 1628 52F804FB 		_UNNEST
 2774              	
 2775              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2776              	// 	Compare u bytes in two strings. Return 0 if identical.
 2777              	//
 2778              	//  Picatout 2020-12-01, 
 2779              	//      Because of problem with .align directive that
 2780              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2781              	// 		words  to do a byte by byte comparison. 
 2782              	//
 2783 162c 040A0018 		.word	_NAMET+MAPOFFSET
 2784 1630 05       	_SAMEQ:	.byte  5
 2785 1631 53414D45 		.ascii "SAME?"
 2785      3F
 2786 1636 00BF     		.p2align 2	
 2787              	SAMEQ:
 2788 1638 42F804ED 		_NEST
 2789 163c FEF7E4FF 		BL	TOR
 2790 1640 00F01EB8 		B.W	SAME2
 2791              	SAME1:
 2792 1644 FFF70EF8 		BL	OVER  // ( a1 a2 -- a1 a2 a1 )
 2793 1648 FEF7D6FF 		BL	RAT   // a1 a2 a1 u 
 2794 164c FFF75CF8 		BL	PLUS  // a1 a2 a1+u 
ARM GAS  stm32eforth.s 			page 53


 2795 1650 FEF7C2FF 		BL	CAT	   // a1 a2 c1    		
 2796 1654 FFF706F8 		BL	OVER  // a1 a2 c1 a2 
 2797 1658 FEF7CEFF 		BL	RAT    
 2798 165c FFF754F8 		BL	PLUS    
 2799 1660 FEF7BAFF 		BL	CAT	  // a1 a2 c1 c2
 2800 1664 FFF758F8 		BL	SUBB  
 2801 1668 FFF7D6F8 		BL	QDUP
 2802 166c FEF77EFF 		BL	QBRAN
 2803 1670 800A0018 		.word	SAME2+MAPOFFSET
 2804 1674 FEF7B6FF 		BL	RFROM
 2805 1678 FEF7DAFF 		BL	DROP
 2806 167c 52F804FB 		_UNNEST	// strings not equal
 2807              	SAME2:
 2808 1680 FEF765FF 		BL	DONXT
 2809 1684 440A0018 		.word	SAME1+MAPOFFSET
 2810 1688 FEF74DFF 		_DOLIT
 2811 168c 00000000 		.word	0
 2812 1690 52F804FB 		_UNNEST	// strings equal
 2813              	
 2814              	//    find	( a na -- ca na | a F )
 2815              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2816              	
 2817              	//  Picatout 2020-12-01,  
 2818              	//		Modified from original. See comment for word "SAME?" 
 2819              	
 2820              	// 	.word	_SAMEQ+MAPOFFSET
 2821              	// _FIND	.byte  4
 2822              	// 	.ascii "find"
 2823              	// 	.p2align 2 	
 2824              	FIND:
 2825 1694 42F804ED 		_NEST
 2826 1698 FEF7DAFF 		BL	SWAP			// na a	
 2827 169c FFF780F9 		BL	COUNT			// na a+1 count
 2828 16a0 FEF7CEFF 		BL	DUPP 
 2829 16a4 FFF7C5F9 		BL	TEMP
 2830 16a8 FEF77CFF 		BL	STORE			// na a+1 count 
 2831 16ac FEF7ACFF 		BL  TOR		// na a+1  R: count  
 2832 16b0 FEF7CEFF 		BL	SWAP			// a+1 na
 2833              	FIND1:
 2834 16b4 FEF7C4FF 		BL	DUPP			// a+1 na na
 2835 16b8 FEF758FF 		BL	QBRAN
 2836 16bc 040B0018 		.word	FIND6+MAPOFFSET	// end of vocabulary
 2837 16c0 FEF7BEFF 		BL	DUPP			// a+1 na na
 2838 16c4 FEF788FF 		BL	CAT			// a+1 na name1
 2839 16c8 FEF72DFF 		_DOLIT
 2840 16cc 1FFFFFFF 		.word	MASKK
 2841 16d0 FEF7DAFF 		BL	ANDD
 2842 16d4 FEF790FF 		BL	RAT			// a+1 na name1 count 
 2843 16d8 FEF7EAFF 		BL	XORR			// a+1 na,  same length?
 2844 16dc FEF746FF 		BL	QBRAN
 2845 16e0 F00A0018 		.word	FIND2+MAPOFFSET
 2846 16e4 FFF766F8 		BL	CELLM			// a+1 la
 2847 16e8 FEF766FF 		BL	AT			// a+1 next_na
 2848 16ec FFF7E2BF 		B.w	FIND1			// try next word
 2849              	FIND2:   
 2850 16f0 FFF738F8 		BL	ONEP			// a+1 na+1
 2851 16f4 FFF79DF9 		BL	TEMP
ARM GAS  stm32eforth.s 			page 54


 2852 16f8 FEF75EFF 		BL	AT			// a+1 na+1 count
 2853 16fc FFF79CFF 		BL	SAMEQ		// a+1 na+1 ? 
 2854              	FIND3:	
 2855 1700 00F00CB8 		B.w	FIND4
 2856              	FIND6:	
 2857 1704 FEF76EFF 		BL	RFROM			// a+1 0 name1 -- , no match
 2858 1708 FEF792FF 		BL	DROP			// a+1 0
 2859 170c FEF7A0FF 		BL	SWAP			// 0 a+1
 2860 1710 FFF730F8 		BL	ONEM			// 0 a
 2861 1714 FEF79CFF 		BL	SWAP			// a 0 
 2862 1718 52F804FB 		_UNNEST			// return without a match
 2863              	FIND4:	
 2864 171c FEF726FF 		BL	QBRAN			// a+1 na+1
 2865 1720 340B0018 		.word	FIND5+MAPOFFSET	// found a match
 2866 1724 FFF726F8 		BL	ONEM			// a+1 na
 2867 1728 FFF744F8 		BL	CELLM			// a+4 la
 2868 172c FEF744FF 		BL	AT			// a+1 next_na
 2869 1730 FFF7C0BF 		B.w	FIND1			// compare next name
 2870              	FIND5:	
 2871 1734 FEF756FF 		BL	RFROM			// a+1 na+1 count
 2872 1738 FEF77AFF 		BL	DROP			// a+1 na+1
 2873 173c FEF788FF 		BL	SWAP			// na+1 a+1
 2874 1740 FEF776FF 		BL	DROP			// na+1
 2875 1744 FFF716F8 		BL	ONEM			// na
 2876 1748 FEF77AFF 		BL	DUPP			// na na
 2877 174c FFF75EFF 		BL	NAMET			// na ca
 2878 1750 FEF77EFF 		BL	SWAP			// ca na
 2879 1754 52F804FB 		_UNNEST			//  return with a match
 2880              	
 2881              	//    NAME?	( a -- ca na | a F )
 2882              	// 	Search all context vocabularies for a string.
 2883              	
 2884 1758 300A0018 		.word	_SAMEQ+MAPOFFSET
 2885 175c 05       	_NAMEQ:	.byte  5
 2886 175d 4E414D45 		.ascii "NAME?"
 2886      3F
 2887 1762 00BF     		.p2align 2 	
 2888              	NAMEQ:
 2889 1764 42F804ED 		_NEST
 2890 1768 FFF7A2F9 		BL	CNTXT
 2891 176c FEF724FF 		BL	AT
 2892 1770 FFF790FF 		BL	FIND
 2893 1774 52F804FB 		_UNNEST
 2894              	
 2895              	// **************************************************************************
 2896              	//  Terminal input
 2897              	
 2898              	//    	  ( bot eot cur -- bot eot cur )
 2899              	// 	Backup the cursor by one character.
 2900              	
 2901              	// 	.word	_NAMEQ+MAPOFFSET
 2902              	// _BKSP	.byte  2
 2903              	// 	.ascii "^H"
 2904              	// 	.p2align 2 	
 2905              	BKSP:
 2906 1778 42F804ED 		_NEST
 2907 177c FEF744FF 		BL	TOR
ARM GAS  stm32eforth.s 			page 55


 2908 1780 FEF770FF 		BL	OVER
 2909 1784 FEF72EFF 		BL	RFROM
 2910 1788 FEF762FF 		BL	SWAP
 2911 178c FEF76AFF 		BL	OVER
 2912 1790 FEF78EFF 		BL	XORR
 2913 1794 FEF7EAFE 		BL	QBRAN
 2914 1798 C00B0018 		.word	BACK1+MAPOFFSET
 2915 179c FEF7C3FE 		_DOLIT
 2916 17a0 08000000 		.word	BKSPP
 2917 17a4 FEF7AEFE 		BL	TECHO
 2918              	// 	BL	ATEXE
 2919 17a8 FEF7E4FF 		BL	ONEM
 2920 17ac FFF70AF8 		BL	BLANK
 2921 17b0 FEF7A8FE 		BL	TECHO
 2922              	// 	BL	ATEXE
 2923 17b4 FEF7B7FE 		_DOLIT
 2924 17b8 08000000 		.word	BKSPP
 2925 17bc FEF7A2FE 		BL	TECHO
 2926              	// 	BL	ATEXE
 2927              	BACK1:
 2928 17c0 52F804FB 		  _UNNEST
 2929              	
 2930              	//    TAP	 ( bot eot cur c -- bot eot cur )
 2931              	// 	Accept and echo the key stroke and bump the cursor.
 2932              	
 2933              	// 	.word	_BKSP+MAPOFFSET
 2934              	// _TAP	.byte  3
 2935              	// 	.ascii "TAP"
 2936              	// 	.p2align 2 	
 2937              	TAP:
 2938 17c4 42F804ED 		_NEST
 2939 17c8 FEF73AFF 		BL	DUPP
 2940 17cc FEF79AFE 		BL	TECHO
 2941              	// 	BL	ATEXE
 2942 17d0 FEF748FF 		BL	OVER
 2943 17d4 FEF7F6FE 		BL	CSTOR
 2944 17d8 FEF7C4FF 		BL	ONEP
 2945 17dc 52F804FB 		_UNNEST
 2946              	
 2947              	//    kTAP	( bot eot cur c -- bot eot cur )
 2948              	// 	Process a key stroke, CR or backspace.
 2949              	
 2950              	// 	.word	_TAP+MAPOFFSET
 2951              	// _KTAP	.byte  4
 2952              	// 	.ascii "kTAP"
 2953              	// 	.p2align 2 	
 2954              	KTAP:
 2955              	TTAP:
 2956 17e0 42F804ED 		_NEST
 2957 17e4 FEF72CFF 		BL	DUPP
 2958 17e8 FEF79DFE 		_DOLIT
 2959 17ec 0D000000 		.word	CRR
 2960 17f0 FEF75EFF 		BL	XORR
 2961 17f4 FEF7BAFE 		BL	QBRAN
 2962 17f8 280C0018 		.word	KTAP2+MAPOFFSET
 2963 17fc FEF793FE 		_DOLIT
 2964 1800 08000000 		.word	BKSPP
ARM GAS  stm32eforth.s 			page 56


 2965 1804 FEF754FF 		BL	XORR
 2966 1808 FEF7B0FE 		BL	QBRAN
 2967 180c 200C0018 		.word	KTAP1+MAPOFFSET
 2968 1810 FEF7D8FF 		BL	BLANK
 2969 1814 FFF7D6FF 		BL	TAP
 2970 1818 52F804FB 		_UNNEST
 2971 181c 00000000 		.word	0			// patch
 2972              	KTAP1:
 2973 1820 FFF7AAFF 	  BL	BKSP
 2974 1824 52F804FB 		_UNNEST
 2975              	KTAP2:
 2976 1828 FEF702FF 	  BL	DROP
 2977 182c FEF710FF 		BL	SWAP
 2978 1830 FEF7FEFE 		BL	DROP
 2979 1834 FEF704FF 		BL	DUPP
 2980 1838 52F804FB 		_UNNEST
 2981              	
 2982              	//    ACCEPT	( b u -- b u )
 2983              	// 	Accept characters to input buffer. Return with actual count.
 2984              	
 2985 183c 5C0B0018 		.word	_NAMEQ+MAPOFFSET
 2986 1840 06       	_ACCEP:	.byte  6
 2987 1841 41434345 		.ascii "ACCEPT"
 2987      5054
 2988 1847 00       		.p2align 2 	
 2989              	ACCEP:
 2990 1848 42F804ED 		_NEST
 2991 184c FEF70AFF 		BL	OVER
 2992 1850 FEF75AFF 		BL	PLUS
 2993 1854 FEF706FF 		BL	OVER
 2994              	ACCP1:
 2995 1858 FEF7FCFF 	  BL	DDUP
 2996 185c FEF728FF 		BL	XORR
 2997 1860 FEF784FE 		BL	QBRAN
 2998 1864 940C0018 		.word	ACCP4+MAPOFFSET
 2999 1868 FFF7A8FC 		BL	KEY
 3000 186c FEF7E8FE 		BL	DUPP
 3001 1870 FEF7A8FF 		BL	BLANK
 3002 1874 FEF757FE 		_DOLIT
 3003 1878 7F000000 		.word	127
 3004 187c FFF742F9 		BL	WITHI
 3005 1880 FEF774FE 		BL	QBRAN
 3006 1884 8E0C0018 		.word	ACCP2+MAPOFFSET
 3007 1888 FFF79CFF 		BL	TAP
 3008 188c 01E0     		B	ACCP3
 3009              	ACCP2:
 3010 188e FFF7A7FF 	  BL	KTAP
 3011              	// 	BL	ATEXE
 3012              	ACCP3:	  
 3013 1892 E1E7     		B	ACCP1
 3014              	ACCP4:
 3015 1894 FEF7CCFE 	  BL	DROP
 3016 1898 FEF7E4FE 		BL	OVER
 3017 189c FEF73CFF 		BL	SUBB
 3018 18a0 52F804FB 		_UNNEST
 3019              	
 3020              	//    QUERY	( -- )
ARM GAS  stm32eforth.s 			page 57


 3021              	// 	Accept input stream to terminal input buffer.
 3022              	
 3023 18a4 400C0018 		.word	_ACCEP+MAPOFFSET
 3024 18a8 05       	_QUERY:	.byte  5
 3025 18a9 51554552 		.ascii "QUERY"
 3025      59
 3026 18ae 00BF     		.p2align 2 	
 3027              	QUERY:
 3028 18b0 42F804ED 		_NEST
 3029 18b4 FFF750FA 		BL	TIB
 3030 18b8 FEF735FE 		_DOLIT
 3031 18bc 50000000 		.word	80
 3032 18c0 FFF7C2FF 		BL	ACCEP
 3033 18c4 FFF7D4F8 		BL	NTIB
 3034 18c8 FEF76CFE 		BL	STORE
 3035 18cc FEF7B0FE 		BL	DROP
 3036 18d0 FEF729FE 		_DOLIT
 3037 18d4 00000000 		.word	0
 3038 18d8 FFF7C0F8 		BL	INN
 3039 18dc FEF762FE 		BL	STORE
 3040 18e0 52F804FB 		_UNNEST
 3041              	
 3042              	// **************************************************************************
 3043              	//  Error handling
 3044              	
 3045              	//    ABORT	( a -- )
 3046              	// 	Reset data stack and jump to QUIT.
 3047              	
 3048 18e4 A80C0018 		.word	_QUERY+MAPOFFSET
 3049 18e8 05       	_ABORT:	.byte  5
 3050 18e9 41424F52 		.ascii "ABORT"
 3050      54
 3051 18ee 00BF     		.p2align 2 	
 3052              	ABORT:
 3053 18f0 42F804ED 		_NEST
 3054 18f4 FFF780FC 		BL	SPACE
 3055 18f8 FFF752F8 		BL	COUNT
 3056 18fc FFF7A4FC 		BL	TYPEE
 3057 1900 FEF711FE 		_DOLIT
 3058 1904 3F000000 		.word	0X3F
 3059 1908 FEF7FCFD 		BL	EMIT
 3060 190c FFF7B4FC 		BL	CR
 3061 1910 00F0B2F8 		BL	PRESE
 3062 1914 00F0BCB8 		B.W	QUIT
 3063              	
 3064              	//    _abort"	( f -- )
 3065              	// 	Run time routine of ABORT" . Abort with a message.
 3066              	
 3067              	// 	.word	_ABORT+MAPOFFSET
 3068              	// _ABORQ	.byte  COMPO+6
 3069              	// 	.ascii "abort\""
 3070              	// 	.p2align 2 	
 3071              	ABORQ:
 3072 1918 42F804ED 		_NEST
 3073 191c FEF726FE 		BL	QBRAN
 3074 1920 380D0018 		.word	ABOR1+MAPOFFSET	// text flag
 3075 1924 FFF7B8FC 		BL	DOSTR
ARM GAS  stm32eforth.s 			page 58


 3076 1928 FFF73AF8 		BL	COUNT
 3077 192c FFF78CFC 		BL	TYPEE
 3078 1930 FFF7A2FC 		BL	CR
 3079 1934 00F0ACB8 		B.W	QUIT
 3080              	ABOR1:
 3081 1938 FFF7AEFC 		BL	DOSTR
 3082 193c FEF778FE 		BL	DROP
 3083 1940 52F804FB 		_UNNEST			// drop error
 3084              	
 3085              	// **************************************************************************
 3086              	//  The text interpreter
 3087              	
 3088              	//    $INTERPRET  ( a -- )
 3089              	// 	Interpret a word. If failed, try to convert it to an integer.
 3090              	
 3091 1944 E80C0018 		.word	_ABORT+MAPOFFSET
 3092 1948 0A       	_INTER:	.byte  10
 3093 1949 2424494E 		.ascii "$$INTERPRET"
 3093      54455250 
 3093      524554
 3094              		.p2align 2 	
 3095              	INTER:
 3096 1954 42F804ED 		_NEST
 3097 1958 FFF704FF 		BL	NAMEQ
 3098 195c FEF75CFF 		BL	QDUP	// ?defined
 3099 1960 FEF704FE 		BL	QBRAN
 3100 1964 940D0018 		.word	INTE1+MAPOFFSET
 3101 1968 FEF726FE 		BL	AT
 3102 196c FEF7DBFD 		_DOLIT
 3103 1970 40000000 		.word	COMPO
 3104 1974 FEF788FE 		BL	ANDD	// ?compile only lexicon bits
 3105 1978 FFF7CEFF 		BL	ABORQ
 3106 197c 0D       		.byte	13
 3107 197d 20636F6D 		.ascii " compile only"
 3107      70696C65 
 3107      206F6E6C 
 3107      79
 3108 198a 00BF     		.p2align 2 	
 3109 198c FEF7DAFD 		BL	EXECU
 3110 1990 52F804FB 		_UNNEST			// execute defined word
 3111              	INTE1:
 3112 1994 FFF778FB 	  BL	NUMBQ
 3113 1998 FEF7E8FD 		BL	QBRAN
 3114 199c A40D0018 		.word	INTE2+MAPOFFSET
 3115 19a0 52F804FB 		_UNNEST
 3116              	INTE2:
 3117 19a4 FFF7A4BF 	  B.W	ABORT	// error
 3118              	
 3119              	//    [	   ( -- )
 3120              	// 	Start the text interpreter.
 3121              	
 3122 19a8 480D0018 		.word	_INTER+MAPOFFSET
 3123 19ac 81       	_LBRAC:	.byte  IMEDD+1
 3124 19ad 5B       		.ascii "["
 3125 19ae 00BF     		.p2align 2 	
 3126              	LBRAC:
 3127 19b0 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 59


 3128 19b4 FEF7B7FD 		_DOLIT
 3129 19b8 540D0018 		.word	INTER+MAPOFFSET
 3130 19bc FFF762F8 		BL	TEVAL
 3131 19c0 FEF7F0FD 		BL	STORE
 3132 19c4 52F804FB 		_UNNEST
 3133              	
 3134              	//    .OK	 ( -- )
 3135              	// 	Display "ok" only while interpreting.
 3136              	
 3137 19c8 AC0D0018 		.word	_LBRAC+MAPOFFSET
 3138 19cc 03       	_DOTOK:	.byte  3
 3139 19cd 2E4F4B   		.ascii ".OK"
 3140              		.p2align 2 	
 3141              	DOTOK:
 3142 19d0 42F804ED 		_NEST
 3143 19d4 FEF7A7FD 		_DOLIT
 3144 19d8 540D0018 		.word	INTER+MAPOFFSET
 3145 19dc FFF752F8 		BL	TEVAL
 3146 19e0 FEF7EAFD 		BL	AT
 3147 19e4 FEF774FF 		BL	EQUAL
 3148 19e8 FEF7C0FD 		BL	QBRAN
 3149 19ec F80D0018 		.word	DOTO1+MAPOFFSET
 3150 19f0 FFF77AFC 		BL	DOTQP
 3151 19f4 03       		.byte	3
 3152 19f5 206F6B   		.ascii " ok"
 3153              	DOTO1:
 3154 19f8 FFF73EFC 		BL	CR
 3155 19fc 52F804FB 		_UNNEST
 3156              	
 3157              	//    ?STACK	( -- )
 3158              	// 	Abort if the data stack underflows.
 3159              	
 3160 1a00 CC0D0018 		.word	_DOTOK+MAPOFFSET
 3161 1a04 06       	_QSTAC:	.byte  6
 3162 1a05 3F535441 		.ascii "?STACK"
 3162      434B
 3163 1a0b 00       		.p2align 2 	
 3164              	QSTAC:
 3165 1a0c 42F804ED 		_NEST
 3166 1a10 FFF764F9 		BL	DEPTH
 3167 1a14 FEF72EFE 		BL	ZLESS	// check only for underflow
 3168 1a18 FFF77EFF 		BL	ABORQ
 3169 1a1c 0A       		.byte	10
 3170 1a1d 20756E64 		.ascii " underflow"
 3170      6572666C 
 3170      6F77
 3171 1a27 00       		.p2align 2 	
 3172 1a28 52F804FB 		_UNNEST
 3173              	
 3174              	//    EVAL	( -- )
 3175              	// 	Interpret the input stream.
 3176              	
 3177 1a2c 040E0018 		.word	_QSTAC+MAPOFFSET
 3178 1a30 04       	_EVAL:	.byte  4
 3179 1a31 4556414C 		.ascii "EVAL"
 3180 1a35 0000BF   		.p2align 2 	
 3181              	EVAL:
ARM GAS  stm32eforth.s 			page 60


 3182 1a38 42F804ED 		_NEST
 3183              	EVAL1:
 3184 1a3c FFF7D8FD 	    BL	TOKEN
 3185 1a40 FEF7FEFD 		BL	DUPP
 3186 1a44 FEF7C8FD 		BL	CAT	// ?input stream empty
 3187 1a48 FEF790FD 		BL	QBRAN
 3188 1a4c 600E0018 		.word	EVAL2+MAPOFFSET
 3189 1a50 FFF718F8 		BL	TEVAL
 3190 1a54 FFF78CF9 		BL	ATEXE
 3191 1a58 FFF7D8FF 		BL	QSTAC	// evaluate input, check stack
 3192 1a5c FFF7EEBF 		B.W	EVAL1
 3193              	EVAL2:
 3194 1a60 FEF7E6FD 		BL	DROP
 3195 1a64 FFF7B4FF 		BL	DOTOK
 3196 1a68 52F804FB 		_UNNEST	// prompt
 3197              	
 3198              	//    PRESET	( -- )
 3199              	// 	Reset data stack pointer and the terminal input buffer.
 3200              	
 3201 1a6c 300E0018 		.word	_EVAL+MAPOFFSET
 3202 1a70 06       	_PRESE:	.byte  6
 3203 1a71 50524553 		.ascii "PRESET"
 3203      4554
 3204 1a77 00       		.p2align 2 	
 3205              	PRESE:
 3206              	//	_NEST
 3207 1a78 44F68061 		MOVW	R1,#SPP&0xffff		//  init SP
 3208 1a7c C2F20001 	 	MOVT	R1,#SPP>>16
 3209 1a80 85EA0505 		EOR	R5,R5,R5			//  init TOS=0
 3210              	//	_UNNEST
 3211 1a84 7047     		_NEXT
 3212              	
 3213              	//    QUIT	( -- )
 3214              	// 	Reset return stack pointer and start text interpreter.
 3215              	
 3216 1a86 700E0018 		.word	_PRESE+MAPOFFSET
 3217 1a8a 04       	_QUIT:	.byte  4
 3218 1a8b 51554954 		.ascii "QUIT"
 3219 1a8f 00       		.p2align 2 	
 3220              	QUIT:
 3221 1a90 42F804ED 		_NEST
 3222 1a94 44F68072 		MOVW	R2,#RPP&0xffff  /* RESET RSTACK */
 3223 1a98 C2F20002 	 	MOVT	R2,#RPP>>16 
 3224              	QUIT1:
 3225 1a9c FFF788FF 		BL	LBRAC			// start interpretation
 3226              	QUIT2:
 3227 1aa0 FFF706FF 		BL	QUERY			// get input
 3228 1aa4 FFF7C8FF 		BL	EVAL
 3229 1aa8 FEF76CFD 		BL	BRAN
 3230 1aac A00E0018 		.word	QUIT2+MAPOFFSET	// continue till error
 3231              	
 3232              	/***************************
 3233              	//  Flash memory interface
 3234              	***************************/
 3235              	// UNLOCK ( T|F -- )
 3236              	// lock or unlock FLASH write 
 3237              	
ARM GAS  stm32eforth.s 			page 61


 3238 1ab0 8A0E0018 		.word _QUIT+MAPOFFSET  
 3239 1ab4 06       	_UNLOCK: .byte 6
 3240 1ab5 554E4C4F 		.ascii "UNLOCK"
 3240      434B
 3241 1abb 00       		.p2align 2  
 3242              	UNLOCK:	//  unlock flash memory	
 3243 1abc 42F804ED 		_NEST 
 3244 1ac0 FEF754FD 		BL QBRAN
 3245 1ac4 E62600E8 		.word LOCK-MAPOFFSET
 3246              	UNLOCK1:
 3247 1ac8 6B48     		ldr	r0, flash_regs 
 3248 1aca C468     		ldr r4, [r0, #FLASH_SR]
 3249 1acc 44F03404 		orr r4,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 3250 1ad0 C460     		str r4,[r0,#FLASH_SR]
 3251 1ad2 0469     		ldr r4,[r0,#FLASH_CR]
 3252 1ad4 14F0800F 		tst r4,#(1<<7)
 3253 1ad8 03D1     		bne 1f
 3254 1ada 684C     		ldr	r4, flash_regs+4 // key1
 3255 1adc 4460     		str	r4, [r0, #FLASH_KEYR]
 3256 1ade 684C     		ldr	r4, flash_regs+8 // key2 
 3257 1ae0 4460     		str	r4, [r0, #FLASH_KEYR]
 3258              		/* unlock option registers */
 3259              	/*
 3260              		ldr	r4, flash_regs+4 
 3261              		str	r4, [r0, #FLASH_OPTKEYR]
 3262              		ldr	r4, flash_regs+8
 3263              		str	r4, [r0, #FLASH_OPTKEYR]
 3264              	*/ 
 3265 1ae2 52F804FB 	1:	_UNNEST
 3266              	 // lock flash memory
 3267              	LOCK: 
 3268 1ae6 6448     		ldr r0,flash_regs  
 3269 1ae8 0469     		ldr r4,[r0,#FLASH_CR]
 3270 1aea 44F08004 		orr r4,#(1<<7)
 3271 1aee 0461     		str r4,[r0,#FLASH_CR]
 3272 1af0 52F804FB 		_UNNEST  
 3273              	
 3274              	WAIT_BSY:
 3275 1af4 6048     		ldr	r0,flash_regs
 3276              	WAIT1:
 3277 1af6 C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 3278 1af8 14F00104 		ands	r4, #0x1	//  BSY
 3279 1afc FBD1     		bne	WAIT1
 3280 1afe 7047     		_NEXT
 3281              	
 3282              	//    ERASE_PAGE	   ( page -- )
 3283              	// 	  Erase one page of flash memory.
 3284              	//    stm32f103 page size is 1024 bytes 
 3285              	
 3286 1b00 B40E0018 		.word	_UNLOCK+MAPOFFSET
 3287 1b04 0A       	_EPAGE:	.byte  10
 3288 1b05 45524153 		.ascii "ERASE_PAGE"
 3288      455F5041 
 3288      4745
 3289 1b0f 00       		.p2align 2 	
 3290              	
 3291              	EPAGE: 	//  page --
ARM GAS  stm32eforth.s 			page 62


 3292 1b10 42F804ED 		_NEST
 3293 1b14 FFF7EEFF 		bl	WAIT_BSY
 3294 1b18 FEF705FD 		_DOLIT 
 3295 1b1c 01000000 		.word 1 
 3296 1b20 FFF7CCFF 		bl  UNLOCK 
 3297 1b24 4FF00064 		mov r4,#FLASH_ADR
 3298 1b28 4FEA8525 		lsl r5,r5,#10
 3299 1b2c 2544     		add r5,r5,r4 
 3300 1b2e 5248     		ldr r0,flash_regs 	 
 3301 1b30 4561     		str r5,[r0,#FLASH_AR] // page address 
 3302 1b32 0469     		ldr	r4,[r0, #FLASH_CR]	
 3303 1b34 24F40D74 		bic	r4,r4,#(1<<9)|(1<<5)|(1<<4)|(1<<2)	// clear OPTWRE|OPTER|OPTPG|MER   
 3304 1b38 44F04204 		orr	R4,R4,#(1<<1)|(1<<6)	//  set STRT|PER  
 3305 1b3c 0461     		str	r4,[r0, #FLASH_CR]	//  start erasing
 3306 1b3e FFF7D9FF 	1: 	bl	WAIT_BSY
 3307 1b42 FEF7F0FC 		_DOLIT 
 3308 1b46 00000000 		.word 0 
 3309 1b4a FFF7B7FF 		bl	UNLOCK  // lock flash write 
 3310 1b4e C568     		ldr r5,[r0,#FLASH_SR] // check for errors 
 3311 1b50 05F01405 		and r5,r5,#(5<<2)
 3312 1b54 FFF7E0FE 		bl ABORQ 
 3313 1b58 0D       		.byte 13
 3314 1b59 20657261 		.ascii " erase error!"
 3314      73652065 
 3314      72726F72 
 3314      21
 3315 1b66 00BF     		.p2align 2
 3316 1b68 51F8045B 		_POP
 3317 1b6c 52F804FB 		_UNNEST
 3318              	
 3319              	// store 16 bit word
 3320              	// expect flash unlocked  
 3321              	HWORD_WRITE: // ( hword address -- )
 3322 1b70 42F804ED 		_NEST
 3323 1b74 0469     		ldr	r4, [r0, #FLASH_CR]	//  FLASH_CR
 3324              	//	bic r4,#(1<<9)|(1<<5)|(1<<4)|(1<<2)|(1<<1) //  clear OPTWRE|OPTER|OPTPG|MER|PER
 3325 1b76 4FF00104 		mov r4,#1 // set PG 
 3326 1b7a 0461     		str r4,[r0,#FLASH_CR]
 3327 1b7c 2E46     		mov r6,r5 
 3328 1b7e 51F8045B 		_POP 
 3329 1b82 3580     		strh r5,[r6] 
 3330 1b84 FFF7B6FF 		bl WAIT_BSY 
 3331 1b88 C568     		ldr r5,[r0,#FLASH_SR]
 3332 1b8a 05F01405 		and r5,r5,#(5<<2) 
 3333 1b8e FEF7EDFC 		bl QBRAN
 3334 1b92 A81B0000 		.word 1f 
 3335 1b96 FFF7BFFE 		bl ABORQ
 3336 1b9a 0D       		.byte 13
 3337 1b9b 20777269 		.ascii " write error!"
 3337      74652065 
 3337      72726F72 
 3337      21
 3338              		.p2align 2
 3339              	1:	 
 3340 1ba8 52F804FB 		_UNNEST 
 3341              	
 3342              	
ARM GAS  stm32eforth.s 			page 63


 3343              	//    I!	   ( data address -- )
 3344              	// 	   Write one word into flash memory
 3345              	//	   address must even 
 3346              	
 3347 1bac 040F0018 		.word	_EPAGE+MAPOFFSET
 3348 1bb0 02       	_ISTOR:	.byte  2
 3349 1bb1 4921     		.ascii "I!"
 3350 1bb3 00       		.p2align 2 	
 3351              	
 3352              	ISTOR:	//  data address --
 3353 1bb4 42F804ED 		_NEST
 3354 1bb8 FFF79CFF 		bl	WAIT_BSY
 3355 1bbc FEF7B3FC 		_DOLIT 
 3356 1bc0 01000000 		.word 1 
 3357 1bc4 FFF77AFF 		bl  UNLOCK 
 3358 1bc8 FEF744FE 		BL DDUP 
 3359 1bcc FEF71CFD 		BL TOR 
 3360 1bd0 FEF71AFD 		BL TOR 
 3361 1bd4 FFF7CCFF 		BL HWORD_WRITE
 3362 1bd8 FEF704FD 		BL RFROM 
 3363 1bdc 4FEA3545 		ror r5,r5,#16
 3364 1be0 FEF700FD 		BL RFROM 
 3365 1be4 05F10205 		add r5,r5,#2 
 3366 1be8 FFF7C2FF 		BL HWORD_WRITE 
 3367 1bec FEF79BFC 		_DOLIT 
 3368 1bf0 00000000 		.word 0
 3369 1bf4 FFF762FF 		bl UNLOCK 
 3370 1bf8 52F804FB 		_UNNEST
 3371              	
 3372              	//    TURNKEY	( -- )
 3373              	// 	Copy dictionary from RAM to flash.
 3374              	
 3375 1bfc B00F0018 		.word	_ISTOR+MAPOFFSET
 3376 1c00 07       	_TURN:	.byte   7
 3377 1c01 5455524E 		.ascii "TURNKEY"
 3377      4B4559
 3378              		.p2align 2 
 3379 1c08 42F804ED 	TURN:	_NEST
 3380 1c0c FEF78BFC 		_DOLIT			//  save user area
 3381 1c10 00000020 		.word	RAMOFFSET
 3382 1c14 FEF787FC 		_DOLIT
 3383 1c18 C0000000 		.word	0xC0			//  to boot array
 3384 1c1c FEF783FC 		_DOLIT
 3385 1c20 40000000 		.word	0x40
 3386 1c24 FFF7C8F8 		BL	MOVE
 3387 1c28 FEF77DFC 		_DOLIT
 3388 1c2c 00000000 		.word	0
 3389 1c30 FEF779FC 		_DOLIT
 3390 1c34 000C0008 		.word	FLASHOFFSET
 3391 1c38 FEF744FF 		BL	CPP
 3392 1c3c FEF7BCFC 		BL	AT
 3393 1c40 FEF7D2FD 		BL	CELLSL
 3394 1c44 FEF7E0FC 		BL	TOR
 3395              	TURN1:
 3396 1c48 FEF70CFD 		BL	OVER
 3397 1c4c FEF7B4FC 		BL	AT
 3398 1c50 FEF708FD 		BL	OVER
ARM GAS  stm32eforth.s 			page 64


 3399 1c54 FFF7AEFF 		BL	ISTOR
 3400 1c58 FEF7FAFC 		BL	SWAP
 3401 1c5c FEF7A2FD 		BL	CELLP
 3402 1c60 FEF7F6FC 		BL	SWAP
 3403 1c64 FEF79EFD 		BL	CELLP
 3404 1c68 FEF771FC 		BL	DONXT
 3405 1c6c 48100018 		.word	TURN1+MAPOFFSET
 3406 1c70 FEF7E6FD 		BL	DDROP
 3407 1c74 52F804FB 		_UNNEST
 3408              	
 3409              	flash_regs:
 3410 1c78 00200240 		.word FLASH_BASE_ADR // 0 
 3411 1c7c 23016745 		.word FLASH_KEY1   // 4 
 3412 1c80 AB89EFCD 		.word FLASH_KEY2   // 8
 3413              	
 3414              	// **************************************************************************
 3415              	//  The compiler
 3416              	
 3417              	//    '	   ( -- ca )
 3418              	// 	Search context vocabularies for the next word in input stream.
 3419              	
 3420 1c84 00100018 		.word	_TURN+MAPOFFSET
 3421 1c88 01       	_TICK:	.byte  1
 3422 1c89 27       		.ascii "'"
 3423 1c8a 00BF     		.p2align 2 	
 3424              	TICK:
 3425 1c8c 42F804ED 		_NEST
 3426 1c90 FFF7AEFC 		BL	TOKEN
 3427 1c94 FFF766FD 		BL	NAMEQ	// ?defined
 3428 1c98 FEF768FC 		BL	QBRAN
 3429 1c9c A4100018 		.word	TICK1+MAPOFFSET
 3430 1ca0 52F804FB 		_UNNEST	// yes, push code address
 3431 1ca4 FFF724BE 	TICK1:	B.W	ABORT	// no, error
 3432              	
 3433              	//    ALLOT	( n -- )
 3434              	// 	Allocate n bytes to the ram area.
 3435              	
 3436 1ca8 88100018 		.word	_TICK+MAPOFFSET
 3437 1cac 05       	_ALLOT:	.byte  5
 3438 1cad 414C4C4F 		.ascii "ALLOT"
 3438      54
 3439 1cb2 00BF     		.p2align 2 	
 3440              	ALLOT:
 3441 1cb4 42F804ED 		_NEST
 3442 1cb8 FEF704FF 		BL	CPP
 3443 1cbc FEF74CFE 		BL	PSTOR
 3444 1cc0 52F804FB 		_UNNEST			// adjust code pointer
 3445              	
 3446              	//    ,	   ( w -- )
 3447              	// 	Compile an integer into the code dictionary.
 3448              	
 3449 1cc4 AC100018 		.word	_ALLOT+MAPOFFSET
 3450 1cc8 012C     	_COMMA:	.byte  1,','
 3451 1cca 00BF     		.p2align 2 	
 3452              	COMMA:
 3453 1ccc 42F804ED 		_NEST
 3454 1cd0 FFF72AF8 		BL	HERE
ARM GAS  stm32eforth.s 			page 65


 3455 1cd4 FEF7B4FC 		BL	DUPP
 3456 1cd8 FEF764FD 		BL	CELLP	// cell boundary
 3457 1cdc FEF7F2FE 		BL	CPP
 3458 1ce0 FEF760FC 		BL	STORE
 3459 1ce4 FEF75EFC 		BL	STORE
 3460 1ce8 52F804FB 		_UNNEST	// adjust code pointer, compile
 3461              		.p2align 2 
 3462              	//    [COMPILE]   ( -- //  string> )
 3463              	// 	Compile the next immediate word into code dictionary.
 3464              	
 3465 1cec C8100018 		.word	_COMMA+MAPOFFSET
 3466 1cf0 89       	_BCOMP:	.byte  IMEDD+9
 3467 1cf1 5B434F4D 		.ascii "[COMPILE]"
 3467      50494C45 
 3467      5D
 3468 1cfa 00BF     		.p2align 2 	
 3469              	BCOMP:
 3470 1cfc 42F804ED 		_NEST
 3471 1d00 FFF7C4FF 		BL	TICK
 3472 1d04 FFF7E2FF 		BL	COMMA
 3473 1d08 52F804FB 		_UNNEST
 3474              	
 3475              	//    COMPILE	( -- )
 3476              	// 	Compile the next address in colon list to code dictionary.
 3477              	
 3478 1d0c F0100018 		.word	_BCOMP+MAPOFFSET
 3479 1d10 47       	_COMPI:	.byte  COMPO+7
 3480 1d11 434F4D50 		.ascii "COMPILE"
 3480      494C45
 3481              		.p2align 2 	
 3482              	COMPI:
 3483 1d18 42F804ED 		_NEST
 3484 1d1c FEF762FC 		BL	RFROM
 3485 1d20 25F00105 		BIC	R5,R5,#1
 3486 1d24 FEF78CFC 		BL	DUPP
 3487 1d28 FEF746FC 		BL	AT
 3488 1d2c 00F0DAF9 		BL	CALLC			// compile BL instruction
 3489 1d30 FEF738FD 		BL	CELLP
 3490 1d34 45F00105 		ORR	R5,R5,#1
 3491 1d38 FEF766FC 		BL	TOR
 3492 1d3c 52F804FB 		_UNNEST			// adjust return address
 3493              	
 3494              	//    LITERAL	( w -- )
 3495              	// 	Compile tos to code dictionary as an integer literal.
 3496              	
 3497 1d40 10110018 		.word	_COMPI+MAPOFFSET
 3498 1d44 87       	_LITER:	.byte  IMEDD+7
 3499 1d45 4C495445 		.ascii "LITERAL"
 3499      52414C
 3500              		.p2align 2 	
 3501              	LITER:
 3502 1d4c 42F804ED 		_NEST
 3503 1d50 FFF7E2FF 		BL	COMPI
 3504 1d54 26F9FF17 		.word	DOLIT+MAPOFFSET
 3505 1d58 FFF7B8FF 		BL	COMMA
 3506 1d5c 52F804FB 		_UNNEST
 3507              	
ARM GAS  stm32eforth.s 			page 66


 3508              	//    $,"	( -- )
 3509              	// 	Compile a literal string up to next " .
 3510              	
 3511              	// 	.word	_LITER+MAPOFFSET
 3512              	// _STRCQ	.byte  3
 3513              	// 	.ascii "$$,"""
 3514              	// 	.p2align 2 	
 3515              	STRCQ:
 3516 1d60 42F804ED 		_NEST
 3517 1d64 FEF7DFFB 		_DOLIT
 3518 1d68 FCFFFFFF 		.word	-4
 3519 1d6c FEF7AAFE 		BL	CPP
 3520 1d70 FEF7F2FD 		BL	PSTOR
 3521 1d74 FEF7D7FB 		_DOLIT
 3522 1d78 22000000 		.word	'\"'
 3523 1d7c FFF726FC 		BL	WORDD			// move word to code dictionary
 3524 1d80 FEF70EFE 		BL	COUNT
 3525 1d84 FEF7C0FC 		BL	PLUS
 3526 1d88 FEF776FF 		BL	ALGND			// calculate aligned end of string
 3527 1d8c FEF79AFE 		BL	CPP
 3528 1d90 FEF708FC 		BL	STORE
 3529 1d94 52F804FB 		_UNNEST 			// adjust the code pointer
 3530              	
 3531              	// **************************************************************************
 3532              	//  Structures
 3533              	
 3534              	//    FOR	 ( -- a )
 3535              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3536              	
 3537 1d98 44110018 		.word	_LITER+MAPOFFSET
 3538 1d9c C3       	_FOR:	.byte  COMPO+IMEDD+3
 3539 1d9d 464F52   		.ascii "FOR"
 3540              		.p2align 2 	
 3541              	FOR:
 3542 1da0 42F804ED 		_NEST
 3543 1da4 FFF7B8FF 		BL	COMPI
 3544 1da8 08FAFF17 		.word	TOR+MAPOFFSET
 3545 1dac FEF7BCFF 		BL	HERE
 3546 1db0 52F804FB 		_UNNEST
 3547              	
 3548              	//    BEGIN	( -- a )
 3549              	// 	Start an infinite or indefinite loop structure.
 3550              	
 3551 1db4 9C110018 		.word	_FOR+MAPOFFSET
 3552 1db8 C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 3553 1db9 42454749 		.ascii "BEGIN"
 3553      4E
 3554 1dbe 00BF     		.p2align 2 	
 3555              	BEGIN:
 3556 1dc0 42F804ED 		_NEST
 3557 1dc4 FEF7B0FF 		BL	HERE
 3558 1dc8 52F804FB 		_UNNEST
 3559              		.p2align 2 
 3560              	//    NEXT	( a -- )
 3561              	// 	Terminate a FOR-NEXT loop structure.
 3562              	
 3563 1dcc B8110018 		.word	_BEGIN+MAPOFFSET
ARM GAS  stm32eforth.s 			page 67


 3564 1dd0 C4       	_NEXT:	.byte  COMPO+IMEDD+4
 3565 1dd1 4E455854 		.ascii "NEXT"
 3566 1dd5 0000BF   		.p2align 2 	
 3567              	NEXT:
 3568 1dd8 42F804ED 		_NEST
 3569 1ddc FFF79CFF 		BL	COMPI
 3570 1de0 4EF9FF17 		.word	DONXT+MAPOFFSET
 3571 1de4 FFF772FF 		BL	COMMA
 3572 1de8 52F804FB 		_UNNEST
 3573              	
 3574              	//    UNTIL	( a -- )
 3575              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3576              	
 3577 1dec D0110018 		.word	_NEXT+MAPOFFSET
 3578 1df0 C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3579 1df1 554E5449 		.ascii "UNTIL"
 3579      4C
 3580 1df6 00BF     		.p2align 2 	
 3581              	UNTIL:
 3582 1df8 42F804ED 		_NEST
 3583 1dfc FFF78CFF 		BL	COMPI
 3584 1e00 6CF9FF17 		.word	QBRAN+MAPOFFSET
 3585 1e04 FFF762FF 		BL	COMMA
 3586 1e08 52F804FB 		_UNNEST
 3587              	
 3588              	//    AGAIN	( a -- )
 3589              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3590              	
 3591 1e0c F0110018 		.word	_UNTIL+MAPOFFSET
 3592 1e10 C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3593 1e11 41474149 		.ascii "AGAIN"
 3593      4E
 3594 1e16 00BF     		.p2align 2 	
 3595              	AGAIN:
 3596 1e18 42F804ED 		_NEST
 3597 1e1c FFF77CFF 		BL	COMPI
 3598 1e20 84F9FF17 		.word	BRAN+MAPOFFSET
 3599 1e24 FFF752FF 		BL	COMMA
 3600 1e28 52F804FB 		_UNNEST
 3601              	
 3602              	//    IF	  ( -- A )
 3603              	// 	Begin a conditional branch structure.
 3604              	
 3605 1e2c 10120018 		.word	_AGAIN+MAPOFFSET
 3606 1e30 C2       	_IFF:	.byte  COMPO+IMEDD+2
 3607 1e31 4946     		.ascii "IF"
 3608 1e33 00       		.p2align 2 	
 3609              	IFF:
 3610 1e34 42F804ED 		_NEST
 3611 1e38 FFF76EFF 		BL	COMPI
 3612 1e3c 6CF9FF17 		.word	QBRAN+MAPOFFSET
 3613 1e40 FEF772FF 		BL	HERE
 3614 1e44 FEF76FFB 		_DOLIT
 3615 1e48 04000000 		.word	4
 3616 1e4c FEF73AFE 		BL	CPP
 3617 1e50 FEF782FD 		BL	PSTOR
 3618 1e54 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 68


 3619              	
 3620              	//    AHEAD	( -- A )
 3621              	// 	Compile a forward branch instruction.
 3622              	
 3623 1e58 30120018 		.word	_IFF+MAPOFFSET
 3624 1e5c C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 3625 1e5d 41484541 		.ascii "AHEAD"
 3625      44
 3626 1e62 00BF     		.p2align 2 	
 3627              	AHEAD:
 3628 1e64 42F804ED 		_NEST
 3629 1e68 FFF756FF 		BL	COMPI
 3630 1e6c 84F9FF17 		.word	BRAN+MAPOFFSET
 3631 1e70 FEF75AFF 		BL	HERE
 3632 1e74 FEF757FB 		_DOLIT
 3633 1e78 04000000 		.word	4
 3634 1e7c FEF722FE 		BL	CPP
 3635 1e80 FEF76AFD 		BL	PSTOR
 3636 1e84 52F804FB 		_UNNEST
 3637              	
 3638              	//    REPEAT	( A a -- )
 3639              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3640              	
 3641 1e88 5C120018 		.word	_AHEAD+MAPOFFSET
 3642 1e8c C6       	_REPEA:	.byte  COMPO+IMEDD+6
 3643 1e8d 52455045 		.ascii "REPEAT"
 3643      4154
 3644 1e93 00       		.p2align 2 	
 3645              	REPEA:
 3646 1e94 42F804ED 		_NEST
 3647 1e98 FFF7BEFF 		BL	AGAIN
 3648 1e9c FEF744FF 		BL	HERE
 3649 1ea0 FEF7D6FB 		BL	SWAP
 3650 1ea4 FEF77EFB 		BL	STORE
 3651 1ea8 52F804FB 		_UNNEST
 3652              	
 3653              	//    THEN	( A -- )
 3654              	// 	Terminate a conditional branch structure.
 3655              	
 3656 1eac 8C120018 		.word	_REPEA+MAPOFFSET
 3657 1eb0 C4       	_THENN:	.byte  COMPO+IMEDD+4
 3658 1eb1 5448454E 		.ascii "THEN"
 3659 1eb5 0000BF   		.p2align 2 	
 3660              	THENN:
 3661 1eb8 42F804ED 		_NEST
 3662 1ebc FEF734FF 		BL	HERE
 3663 1ec0 FEF7C6FB 		BL	SWAP
 3664 1ec4 FEF76EFB 		BL	STORE
 3665 1ec8 52F804FB 		_UNNEST
 3666              	
 3667              	//    AFT	 ( a -- a A )
 3668              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3669              	
 3670 1ecc B0120018 		.word	_THENN+MAPOFFSET
 3671 1ed0 C3       	_AFT:	.byte  COMPO+IMEDD+3
 3672 1ed1 414654   		.ascii "AFT"
 3673              		.p2align 2 	
ARM GAS  stm32eforth.s 			page 69


 3674              	AFT:
 3675 1ed4 42F804ED 		_NEST
 3676 1ed8 FEF7AAFB 		BL	DROP
 3677 1edc FFF7C2FF 		BL	AHEAD
 3678 1ee0 FFF76EFF 		BL	BEGIN
 3679 1ee4 FEF7B4FB 		BL	SWAP
 3680 1ee8 52F804FB 		_UNNEST
 3681              	
 3682              	//    ELSE	( A -- A )
 3683              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3684              	
 3685 1eec D0120018 		.word	_AFT+MAPOFFSET
 3686 1ef0 C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 3687 1ef1 454C5345 		.ascii "ELSE"
 3688 1ef5 0000BF   		.p2align 2 	
 3689              	ELSEE:
 3690 1ef8 42F804ED 		_NEST
 3691 1efc FFF7B2FF 		BL	AHEAD
 3692 1f00 FEF7A6FB 		BL	SWAP
 3693 1f04 FFF7D8FF 		BL	THENN
 3694 1f08 52F804FB 		_UNNEST
 3695              	
 3696              	//    WHILE	( a -- A a )
 3697              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3698              	
 3699 1f0c F0120018 		.word	_ELSEE+MAPOFFSET
 3700 1f10 C5       	_WHILE:	.byte  COMPO+IMEDD+5
 3701 1f11 5748494C 		.ascii "WHILE"
 3701      45
 3702 1f16 00BF     		.p2align 2 	
 3703              	WHILE:
 3704 1f18 42F804ED 		_NEST
 3705 1f1c FFF78AFF 		BL	IFF
 3706 1f20 FEF796FB 		BL	SWAP
 3707 1f24 52F804FB 		_UNNEST
 3708              	
 3709              	//    ABORT"	( -- //  string> )
 3710              	// 	Conditional abort with an error message.
 3711              	
 3712 1f28 10130018 		.word	_WHILE+MAPOFFSET
 3713 1f2c 86       	_ABRTQ:	.byte  IMEDD+6
 3714 1f2d 41424F52 		.ascii "ABORT\""
 3714      5422
 3715 1f33 00       		.p2align 2 	
 3716              	ABRTQ:
 3717 1f34 42F804ED 		_NEST
 3718 1f38 FFF7EEFE 		BL	COMPI
 3719 1f3c 180D0018 		.word	ABORQ+MAPOFFSET
 3720 1f40 FFF70EFF 		BL	STRCQ
 3721 1f44 52F804FB 		_UNNEST
 3722              	
 3723              	//    $"	( -- //  string> )
 3724              	// 	Compile an inlineDCB literal.
 3725              	
 3726 1f48 2C130018 		.word	_ABRTQ+MAPOFFSET
 3727 1f4c 82       	_STRQ:	.byte  IMEDD+2
 3728 1f4d 2422     		.byte	'$','"'
ARM GAS  stm32eforth.s 			page 70


 3729 1f4f 00       		.p2align 2 	
 3730              	STRQ:
 3731 1f50 42F804ED 		_NEST
 3732 1f54 FFF7E0FE 		BL	COMPI
 3733 1f58 CC060018 		.word	STRQP+MAPOFFSET
 3734 1f5c FFF700FF 		BL	STRCQ
 3735 1f60 52F804FB 		_UNNEST
 3736              	
 3737              	//    ."	( -- //  string> )
 3738              	// 	Compile an inline word  literal to be typed out at run time.
 3739              	
 3740 1f64 4C130018 		.word	_STRQ+MAPOFFSET
 3741 1f68 C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 3742 1f69 2E22     		.byte	'.','"'
 3743 1f6b 00       		.p2align 2 	
 3744              	DOTQ:
 3745 1f6c 42F804ED 		_NEST
 3746 1f70 FFF7D2FE 		BL	COMPI
 3747 1f74 E8060018 		.word	DOTQP+MAPOFFSET
 3748 1f78 FFF7F2FE 		BL	STRCQ
 3749 1f7c 52F804FB 		_UNNEST
 3750              	
 3751              	// **************************************************************************
 3752              	//  Name compiler
 3753              	
 3754              	//    ?UNIQUE	( a -- a )
 3755              	// 	Display a warning message if the word already exists.
 3756              	
 3757 1f80 68130018 		.word	_DOTQ+MAPOFFSET
 3758 1f84 07       	_UNIQU:	.byte  7
 3759 1f85 3F554E49 		.ascii "?UNIQUE"
 3759      515545
 3760              		.p2align 2 	
 3761              	UNIQU:
 3762 1f8c 42F804ED 		_NEST
 3763 1f90 FEF756FB 		BL	DUPP
 3764 1f94 FFF7E6FB 		BL	NAMEQ			// ?name exists
 3765 1f98 FEF7E8FA 		BL	QBRAN
 3766 1f9c B8130018 		.word	UNIQ1+MAPOFFSET	// redefinitions are OK
 3767 1fa0 FFF7A2F9 		BL	DOTQP
 3768 1fa4 07       		.byte	7
 3769 1fa5 20726544 		.ascii " reDef "		// but warn the user
 3769      656620
 3770              		.p2align 2 	
 3771 1fac FEF75AFB 		BL	OVER
 3772 1fb0 FEF7F6FC 		BL	COUNT
 3773 1fb4 FFF748F9 		BL	TYPEE			// just in case its not planned
 3774              	UNIQ1:
 3775 1fb8 FEF73AFB 		BL	DROP
 3776 1fbc 52F804FB 		_UNNEST
 3777              	
 3778              	//    $,n	 ( na -- )
 3779              	// 	Build a new dictionary name using the data at na.
 3780              	
 3781              	// 	.word	_UNIQU+MAPOFFSET
 3782              	// _SNAME	.byte  3
 3783              	// 	.ascii "$$,n"
ARM GAS  stm32eforth.s 			page 71


 3784              	// 	.p2align 2 	
 3785              	SNAME:
 3786 1fc0 42F804ED 		_NEST
 3787 1fc4 FEF73CFB 		BL	DUPP			//  na na
 3788 1fc8 FEF706FB 		BL	CAT			//  ?null input
 3789 1fcc FEF7CEFA 		BL	QBRAN
 3790 1fd0 08140018 		.word	SNAM1+MAPOFFSET
 3791 1fd4 FFF7DAFF 		BL	UNIQU			//  na
 3792 1fd8 FEF788FD 		BL	LAST			//  na last
 3793 1fdc FEF7ECFA 		BL	AT			//  na la
 3794 1fe0 FFF774FE 		BL	COMMA			//  na
 3795 1fe4 FEF72CFB 		BL	DUPP			//  na na
 3796 1fe8 FEF780FD 		BL	LAST			//  na na last
 3797 1fec FEF7DAFA 		BL	STORE			//  na , save na for vocabulary link
 3798 1ff0 FEF7D6FC 		BL	COUNT			//  na+1 count
 3799 1ff4 FEF788FB 		BL	PLUS			//  na+1+count
 3800 1ff8 FEF73EFE 		BL	ALGND			//  word boundary
 3801 1ffc FEF762FD 		BL	CPP
 3802 2000 FEF7D0FA 		BL	STORE			//  top of dictionary now
 3803 2004 52F804FB 		_UNNEST
 3804              	SNAM1:
 3805 2008 FFF760F9 		BL	STRQP
 3806 200c 07       		.byte	7
 3807 200d 206E616D 		.ascii " name? "
 3807      653F20
 3808 2014 FFF76CBC 		B.W	ABORT
 3809              	
 3810              	//    $COMPILE	( a -- )
 3811              	// 	Compile next word to code dictionary as a token or literal.
 3812              	
 3813 2018 84130018 		.word	_UNIQU+MAPOFFSET
 3814 201c 08       	_SCOMP:	.byte  8
 3815 201d 2424434F 		.ascii "$$COMPILE"
 3815      4D50494C 
 3815      45
 3816 2026 00BF     		.p2align 2 	
 3817              	SCOMP:
 3818 2028 42F804ED 		_NEST
 3819 202c FFF79AFB 		BL	NAMEQ
 3820 2030 FEF7F2FB 		BL	QDUP	// defined?
 3821 2034 FEF79AFA 		BL	QBRAN
 3822 2038 64140018 		.word	SCOM2+MAPOFFSET
 3823 203c FEF7BCFA 		BL	AT
 3824 2040 FEF771FA 		_DOLIT
 3825 2044 80000000 		.word	IMEDD
 3826 2048 FEF71EFB 		BL	ANDD	// immediate?
 3827 204c FEF78EFA 		BL	QBRAN
 3828 2050 5C140018 		.word	SCOM1+MAPOFFSET
 3829 2054 FEF776FA 		BL	EXECU
 3830 2058 52F804FB 		_UNNEST			// it's immediate, execute
 3831              	SCOM1:
 3832 205c 00F042F8 		BL	CALLC			// it's not immediate, compile
 3833 2060 52F804FB 		_UNNEST	
 3834              	SCOM2:
 3835 2064 FFF710F8 		BL	NUMBQ
 3836 2068 FEF780FA 		BL	QBRAN
 3837 206c 78140018 		.word	SCOM3+MAPOFFSET
ARM GAS  stm32eforth.s 			page 72


 3838 2070 FFF76CFE 		BL	LITER
 3839 2074 52F804FB 		_UNNEST			// compile number as integer
 3840              	SCOM3:
 3841 2078 FFF73ABC 		B.W	ABORT			// error
 3842              	
 3843              	//    OVERT	( -- )
 3844              	// 	Link a new word into the current vocabulary.
 3845              	
 3846 207c 1C140018 		.word	_SCOMP+MAPOFFSET
 3847 2080 05       	_OVERT:	.byte  5
 3848 2081 4F564552 		.ascii "OVERT"
 3848      54
 3849 2086 00BF     		.p2align 2 	
 3850              	OVERT:
 3851 2088 42F804ED 		_NEST
 3852 208c FEF72EFD 		BL	LAST
 3853 2090 FEF792FA 		BL	AT
 3854 2094 FEF70CFD 		BL	CNTXT
 3855 2098 FEF784FA 		BL	STORE
 3856 209c 52F804FB 		_UNNEST
 3857              	
 3858              	//    ; 	   ( -- )
 3859              	// 	Terminate a colon definition.
 3860              	
 3861 20a0 80140018 		.word	_OVERT+MAPOFFSET
 3862 20a4 C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 3863 20a5 3B       		.ascii ";"
 3864 20a6 00BF     		.p2align 2 	
 3865              	SEMIS:
 3866 20a8 42F804ED 		_NEST
 3867 20ac FEF73BFA 		_DOLIT
 3868 20b0 52F804FB 		_UNNEST
 3869 20b4 FFF70AFE 		BL	COMMA
 3870 20b8 FFF77AFC 		BL	LBRAC
 3871 20bc FFF7E4FF 		BL	OVERT
 3872 20c0 52F804FB 		_UNNEST
 3873              	
 3874              	//    ]	   ( -- )
 3875              	// 	Start compiling the words in the input stream.
 3876              	
 3877 20c4 A4140018 		.word	_SEMIS+MAPOFFSET
 3878 20c8 01       	_RBRAC:	.byte  1
 3879 20c9 5D       		.ascii "]"
 3880 20ca 00BF     		.p2align 2 	
 3881              	RBRAC:
 3882 20cc 42F804ED 		_NEST
 3883 20d0 FEF729FA 		_DOLIT
 3884 20d4 28140018 		.word	SCOMP+MAPOFFSET
 3885 20d8 FEF7D4FC 		BL	TEVAL
 3886 20dc FEF762FA 		BL	STORE
 3887 20e0 52F804FB 		_UNNEST
 3888              	
 3889              	//    BL.W	( ca -- )
 3890              	// 	Assemble a branch-link long instruction to ca.
 3891              	// 	BL.W is split into 2 16 bit instructions with 11 bit address fields.
 3892              	
 3893              	// 	.word	_RBRAC+MAPOFFSET
ARM GAS  stm32eforth.s 			page 73


 3894              	// _CALLC	.byte  5
 3895              	// 	.ascii "call,"
 3896              	// 	.p2align 2 	
 3897              	CALLC:
 3898 20e4 42F804ED 		_NEST
 3899 20e8 25F00105 		BIC	R5,R5,#1		//  clear b0 of address from R>
 3900 20ec FEF71CFE 		BL	HERE
 3901 20f0 FEF712FB 		BL	SUBB
 3902 20f4 A5F10405 		SUB	R5,R5,#4		//  pc offset
 3903 20f8 40F2FF70 		MOVW	R0,#0x7FF		//  11 bit mask
 3904 20fc 2C46     		MOV	R4,R5
 3905 20fe 4FEA1535 		LSR	R5,R5,#12		//  get bits 22-12
 3906 2102 05EA0005 		AND	R5,R5,R0
 3907 2106 4FEAC434 		LSL	R4,R4,#15		//  get bits 11-1
 3908 210a 45EA0405 		ORR	R5,R5,R4
 3909 210e 45F07845 		ORR	R5,R5,#0xF8000000
 3910 2112 45F47045 		ORR	R5,R5,#0xF000
 3911 2116 FFF7D9FD 		BL	COMMA			//  assemble BL.W instruction
 3912 211a 52F804FB 		_UNNEST
 3913              	
 3914              	
 3915              	// 	:	( -- //  string> )
 3916              	// 	Start a new colon definition using next word as its name.
 3917              	
 3918 211e C8140018 		.word	_RBRAC+MAPOFFSET
 3919 2122 01       	_COLON:	.byte  1
 3920 2123 3A       		.ascii ":"
 3921              		.p2align 2 	
 3922              	COLON:
 3923 2124 42F804ED 		_NEST
 3924 2128 FFF762FA 		BL	TOKEN
 3925 212c FFF748FF 		BL	SNAME
 3926 2130 FEF7F9F9 		_DOLIT
 3927 2134 42F804ED 		_NEST
 3928 2138 FFF7C8FD 		BL	COMMA
 3929 213c FFF7C6FF 		BL	RBRAC
 3930 2140 52F804FB 		_UNNEST
 3931              	
 3932              	//    IMMEDIATE   ( -- )
 3933              	// 	Make the last compiled word an immediate word.
 3934              	
 3935 2144 22150018 		.word	_COLON+MAPOFFSET
 3936 2148 09       	_IMMED:	.byte  9
 3937 2149 494D4D45 		.ascii "IMMEDIATE"
 3937      44494154 
 3937      45
 3938 2152 00BF     		.p2align 2 	
 3939              	IMMED:
 3940 2154 42F804ED 		_NEST
 3941 2158 FEF7E5F9 		_DOLIT
 3942 215c 80000000 		.word	IMEDD
 3943 2160 FEF7C4FC 		BL	LAST
 3944 2164 FEF728FA 		BL	AT
 3945 2168 FEF726FA 		BL	AT
 3946 216c FEF796FA 		BL	ORR
 3947 2170 FEF7BCFC 		BL	LAST
 3948 2174 FEF720FA 		BL	AT
ARM GAS  stm32eforth.s 			page 74


 3949 2178 FEF714FA 		BL	STORE
 3950 217c 52F804FB 		_UNNEST
 3951              	
 3952              	// **************************************************************************
 3953              	//  Defining words
 3954              	
 3955              	//    CONSTANT	( u -- //  string> )
 3956              	// 	Compile a new constant.
 3957              	
 3958 2180 48150018 		.word	_IMMED+MAPOFFSET
 3959 2184 08       	_CONST:	.byte  8
 3960 2185 434F4E53 		.ascii "CONSTANT"
 3960      54414E54 
 3961 218d 0000BF   		.p2align 2 	
 3962              	CONST:
 3963 2190 42F804ED 		_NEST
 3964 2194 FFF72CFA 		BL	TOKEN
 3965 2198 FFF712FF 		BL	SNAME
 3966 219c FFF774FF 		BL	OVERT
 3967 21a0 FEF7C1F9 		_DOLIT
 3968 21a4 42F804ED 		_NEST
 3969 21a8 FFF790FD 		BL	COMMA
 3970 21ac FEF7BBF9 		_DOLIT
 3971 21b0 D4FDFF17 		.word	DOCON+MAPOFFSET
 3972 21b4 FFF796FF 		BL	CALLC
 3973 21b8 FFF788FD 		BL	COMMA
 3974 21bc 52F804FB 		_UNNEST
 3975              	
 3976              	//    CREATE	( -- //  string> )
 3977              	// 	Compile a new array entry without allocating code space.
 3978              	
 3979 21c0 84150018 		.word	_CONST+MAPOFFSET
 3980 21c4 06       	_CREAT:	.byte  6
 3981 21c5 43524541 		.ascii "CREATE"
 3981      5445
 3982 21cb 00       		.p2align 2 	
 3983              	CREAT:
 3984 21cc 42F804ED 		_NEST
 3985 21d0 FFF70EFA 		BL	TOKEN
 3986 21d4 FFF7F4FE 		BL	SNAME
 3987 21d8 FFF756FF 		BL	OVERT
 3988 21dc FEF7A3F9 		_DOLIT
 3989 21e0 42F804ED 		_NEST
 3990 21e4 FFF772FD 		BL	COMMA
 3991 21e8 FEF79DF9 		_DOLIT
 3992 21ec C8FDFF17 		.word	DOVAR+MAPOFFSET
 3993 21f0 FFF778FF 		BL	CALLC
 3994 21f4 52F804FB 		_UNNEST
 3995              	
 3996              	//    VARIABLE	( -- //  string> )
 3997              	// 	Compile a new variable initialized to 0.
 3998              	
 3999 21f8 C4150018 		.word	_CREAT+MAPOFFSET
 4000 21fc 08       	_VARIA:	.byte  8
 4001 21fd 56415249 		.ascii "VARIABLE"
 4001      41424C45 
 4002 2205 0000BF   		.p2align 2 	
ARM GAS  stm32eforth.s 			page 75


 4003              	VARIA:
 4004 2208 42F804ED 		_NEST
 4005 220c FFF7DEFF 		BL	CREAT
 4006 2210 FEF789F9 		_DOLIT
 4007 2214 00000000 		.word	0
 4008 2218 FFF758FD 		BL	COMMA
 4009 221c 52F804FB 		_UNNEST
 4010              	
 4011              	// **************************************************************************
 4012              	//  Tools
 4013              	
 4014              	//    dm+	 ( a u -- a )
 4015              	// 	Dump u bytes from , leaving a+u on the stack.
 4016              	
 4017              	// 	.word	_VARIA+MAPOFFSET
 4018              	// _DMP	.byte  3
 4019              	// 	.ascii "dm+"
 4020              	// 	.p2align 2 	
 4021              	DMP:
 4022 2220 42F804ED 		_NEST
 4023 2224 FEF71EFA 		BL	OVER
 4024 2228 FEF77DF9 		_DOLIT
 4025 222c 04000000 		.word	4
 4026 2230 FFF77CF8 		BL	UDOTR			// display address
 4027 2234 FEF7E0FF 		BL	SPACE
 4028 2238 FEF7E6F9 		BL	TOR			// start count down loop
 4029 223c 00F00CB8 		B.W	PDUM2			// skip first pass
 4030              	PDUM1:
 4031 2240 FEF7FEF9 	  BL	DUPP
 4032 2244 FEF7C8F9 		BL	CAT
 4033 2248 FEF76DF9 		_DOLIT
 4034 224c 03000000 		.word	3
 4035 2250 FFF76CF8 		BL	UDOTR			// display numeric data
 4036 2254 FEF786FA 		BL	ONEP			// increment address
 4037              	PDUM2:
 4038 2258 FEF779F9 	  BL	DONXT
 4039 225c 40160018 		.word	PDUM1+MAPOFFSET	// loop till done
 4040 2260 52F804FB 		_UNNEST
 4041              		.p2align 2 
 4042              	//    DUMP	( a u -- )
 4043              	// 	Dump u bytes from a, in a formatted manner.
 4044              	
 4045 2264 FC150018 		.word	_VARIA+MAPOFFSET
 4046 2268 04       	_DUMP:	.byte  4
 4047 2269 44554D50 		.ascii "DUMP"
 4048 226d 0000BF   		.p2align 2 	
 4049              	DUMP:
 4050 2270 42F804ED 		_NEST
 4051 2274 FEF7D8FB 		BL	BASE
 4052 2278 FEF79EF9 		BL	AT
 4053 227c FEF7C4F9 		BL	TOR
 4054 2280 FEF7AAFE 		BL	HEX			// save radix,set hex
 4055 2284 FEF74FF9 		_DOLIT
 4056 2288 10000000 		.word	16
 4057 228c FEF7C4FC 		BL	SLASH			// change count to lines
 4058 2290 FEF7BAF9 		BL	TOR
 4059 2294 00F014B8 		B.W	DUMP4			// start count down loop
ARM GAS  stm32eforth.s 			page 76


 4060              	DUMP1:
 4061 2298 FEF7EEFF 	  BL	CR
 4062 229c FEF743F9 		_DOLIT
 4063 22a0 10000000 		.word	16
 4064 22a4 FEF7D6FA 		BL	DDUP
 4065 22a8 FFF7BAFF 		BL	DMP			// display numeric
 4066 22ac FEF7BEFA 		BL	ROT
 4067 22b0 FEF7BCFA 		BL	ROT
 4068 22b4 FEF7A0FF 		BL	SPACE
 4069 22b8 FEF79EFF 		BL	SPACE
 4070 22bc FEF7C4FF 		BL	TYPEE			// display printable characters
 4071              	DUMP4:
 4072 22c0 FEF745F9 	  BL	DONXT
 4073 22c4 98160018 		.word	DUMP1+MAPOFFSET	// loop till done
 4074              	DUMP3:
 4075 22c8 FEF7B2F9 	  BL	DROP
 4076 22cc FEF78AF9 		BL	RFROM
 4077 22d0 FEF7AAFB 		BL	BASE
 4078 22d4 FEF766F9 		BL	STORE			// restore radix
 4079 22d8 52F804FB 		_UNNEST
 4080              	
 4081              	//    .S	  ( ... -- ... )
 4082              	// 	Display the contents of the data stack.
 4083              	
 4084 22dc 68160018 		.word	_DUMP+MAPOFFSET
 4085              	_DOTS:
 4086 22e0 02       		.byte  2
 4087 22e1 2E53     		.ascii ".S"
 4088 22e3 00       		.p2align 2 	
 4089              	DOTS:
 4090 22e4 42F804ED 		_NEST
 4091 22e8 FEF786FF 		BL	SPACE
 4092 22ec FEF7F6FC 		BL	DEPTH			// stack depth
 4093 22f0 FEF78AF9 		BL	TOR			// start count down loop
 4094 22f4 00F006B8 		B.W	DOTS2			// skip first pass
 4095              	DOTS1:
 4096 22f8 FEF77EF9 		BL	RAT
 4097 22fc FEF700FD 		BL	PICK
 4098 2300 FFF740F8 		BL	DOT			// index stack, display contents
 4099              	DOTS2:
 4100 2304 FEF723F9 		BL	DONXT
 4101 2308 F8160018 		.word	DOTS1+MAPOFFSET	// loop till done
 4102 230c FEF774FF 		BL	SPACE
 4103 2310 52F804FB 		_UNNEST
 4104              	
 4105              	//    >NAME	( ca -- na | F )
 4106              	// 	Convert code address to a name address.
 4107              	
 4108 2314 E0160018 		.word	_DOTS+MAPOFFSET
 4109 2318 05       	_TNAME:	.byte  5
 4110 2319 3E4E414D 		.ascii ">NAME"
 4110      45
 4111 231e 00BF     		.p2align 2 	
 4112              	TNAME:
 4113 2320 42F804ED 		_NEST
 4114 2324 FEF770F9 		BL	TOR			//  
 4115 2328 FEF7C2FB 		BL	CNTXT			//  va
ARM GAS  stm32eforth.s 			page 77


 4116 232c FEF744F9 		BL	AT			//  na
 4117              	TNAM1:
 4118 2330 FEF786F9 		BL	DUPP			//  na na
 4119 2334 FEF71AF9 		BL	QBRAN
 4120 2338 60170018 		.word	TNAM2+MAPOFFSET	//  vocabulary end, no match
 4121 233c FEF780F9 		BL	DUPP			//  na na
 4122 2340 FFF764F9 		BL	NAMET			//  na ca
 4123 2344 FEF758F9 		BL	RAT			//  na ca code
 4124 2348 FEF7B2F9 		BL	XORR			//  na f --
 4125 234c FEF70EF9 		BL	QBRAN
 4126 2350 60170018 		.word	TNAM2+MAPOFFSET
 4127 2354 FEF72EFA 		BL	CELLM			//  la 
 4128 2358 FEF72EF9 		BL	AT			//  next_na
 4129 235c FFF7E8BF 		B.W	TNAM1
 4130              	TNAM2:	
 4131 2360 FEF740F9 		BL	RFROM
 4132 2364 FEF764F9 		BL	DROP			//  0|na --
 4133 2368 52F804FB 		_UNNEST			// 0
 4134              	
 4135              	//    .ID	 ( na -- )
 4136              	// 	Display the name at address.
 4137              	
 4138 236c 18170018 		.word	_TNAME+MAPOFFSET
 4139 2370 03       	_DOTID:	.byte  3
 4140 2371 2E4944   		.ascii ".ID"
 4141              		.p2align 2 	
 4142              	DOTID:
 4143 2374 42F804ED 		_NEST
 4144 2378 FEF74EFA 		BL	QDUP			// if zero no name
 4145 237c FEF7F6F8 		BL	QBRAN
 4146 2380 9C170018 		.word	DOTI1+MAPOFFSET
 4147 2384 FEF70CFB 		BL	COUNT
 4148 2388 FEF7CDF8 		_DOLIT
 4149 238c 1F000000 		.word	0x1F
 4150 2390 FEF77AF9 		BL	ANDD			// mask lexicon bits
 4151 2394 FEF758FF 		BL	TYPEE
 4152 2398 52F804FB 		_UNNEST			// display name string
 4153              	DOTI1:
 4154 239c FEF7A4FF 		BL	DOTQP
 4155 23a0 09       		.byte	9
 4156 23a1 207B6E6F 		.ascii " {noName}"
 4156      4E616D65 
 4156      7D
 4157 23aa 00BF     		.p2align 2 	
 4158 23ac 52F804FB 		_UNNEST
 4159              	
 4160              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 4161              	.if WANT_SEE 
 4162              	//    SEE	 ( -- //  string> )
 4163              	// 	A simple decompiler.
 4164              	
 4165              		.word	_DOTID+MAPOFFSET
 4166              	_SEE:	.byte  3
 4167              		.ascii "SEE"
 4168              		.p2align 2 	
 4169              	SEE:
 4170              		_NEST
ARM GAS  stm32eforth.s 			page 78


 4171              		BL	TICK	//  ca --, starting address
 4172              		BL	CR	
 4173              		_DOLIT
 4174              		.word	20
 4175              		BL	TOR
 4176              	SEE1:
 4177              		BL	CELLP			//  a
 4178              		BL	DUPP			//  a a
 4179              		BL	DECOMP		//  a
 4180              		BL	DONXT
 4181              		.word	SEE1+MAPOFFSET
 4182              		BL	DROP
 4183              		_UNNEST
 4184              	
 4185              	// 	DECOMPILE ( a -- )
 4186              	// 	Convert code in a.  Display name of command or as data.
 4187              	
 4188              		.word	_SEE+MAPOFFSET
 4189              	_DECOM:	.byte  9
 4190              		.ascii "DECOMPILE"
 4191              		.p2align 2 
 4192              		
 4193              	DECOMP:	
 4194              		_NEST
 4195              		BL	DUPP			//  a a
 4196              	// 	BL	TOR			//  a
 4197              		BL	AT			//  a code
 4198              		BL	DUPP			//  a code code
 4199              		_DOLIT
 4200              		.word	0xF800D000 //0xF800F800
 4201              		BL	ANDD
 4202              		_DOLIT
 4203              		.word	0xF000D000 //0xF800F000
 4204              		BL	EQUAL			//  a code ?
 4205              		BL	INVER 
 4206              		BL	QBRAN
 4207              		.word	DECOM2+MAPOFFSET	//  not a command
 4208              		//  a valid_code --, extract address and display name
 4209              		MOVW	R0,#0xFFE
 4210              		MOV	R4,R5
 4211              		LSL	R5,R5,#21		//  get bits 22-12
 4212              		ASR	R5,R5,#9		//  with sign extension
 4213              		LSR	R4,R4,#15		//  get bits 11-1
 4214              		AND	R4,R4,R0		//  retain only bits 11-1
 4215              		ORR	R5,R5,R4		//  get bits 22-1
 4216              		NOP
 4217              		BL	OVER			//  a offset a
 4218              		BL	PLUS			//  a target-4
 4219              		BL	CELLP			//  a target
 4220              		BL	TNAME			//  a na/0 --, is it a name?
 4221              		BL	QDUP			//  name address or zero
 4222              		BL	QBRAN
 4223              		.word	DECOM1+MAPOFFSET
 4224              		BL	SPACE			//  a na
 4225              		BL	DOTID			//  a --, display name
 4226              	// 	BL	RFROM			//  a
 4227              		BL	DROP
ARM GAS  stm32eforth.s 			page 79


 4228              		_UNNEST
 4229              	DECOM1:	// BL	RFROM		//  a
 4230              		BL	AT			//  data
 4231              		BL	UDOT			//  display data
 4232              		_UNNEST
 4233              	DECOM2:
 4234              		BL	UDOT
 4235              	// 	BL	RFROM
 4236              		BL	DROP
 4237              		_UNNEST
 4238              	
 4239              	//    WORDS	( -- )
 4240              	// 	Display the names in the context vocabulary.
 4241              	
 4242              		.word	_DECOM+MAPOFFSET
 4243              	.else 
 4244 23b0 70170018 		.word _DOTID+MAPOFFSET 
 4245              	.endif 
 4246 23b4 05       	_WORDS:	.byte  5
 4247 23b5 574F5244 		.ascii "WORDS"
 4247      53
 4248 23ba 00BF     		.p2align 2 	
 4249              	WORDS:
 4250 23bc 42F804ED 		_NEST
 4251 23c0 FEF75AFF 		BL	CR
 4252 23c4 FEF774FB 		BL	CNTXT
 4253 23c8 FEF7F6F8 		BL	AT			// only in context
 4254              	WORS1:
 4255 23cc FEF724FA 		BL	QDUP			// ?at end of list
 4256 23d0 FEF7CCF8 		BL	QBRAN
 4257 23d4 F0170018 		.word	WORS2+MAPOFFSET
 4258 23d8 FEF732F9 		BL	DUPP
 4259 23dc FEF70CFF 		BL	SPACE
 4260 23e0 FFF7C8FF 		BL	DOTID			// display a name
 4261 23e4 FEF7E6F9 		BL	CELLM
 4262 23e8 FEF7E6F8 		BL	AT
 4263 23ec FFF7EEBF 		B.W	WORS1
 4264              	WORS2:
 4265 23f0 52F804FB 		_UNNEST
 4266              	
 4267              	// **************************************************************************
 4268              	//  cold start
 4269              	
 4270              	//    VER	 ( -- n )
 4271              	// 	Return the version number of this implementation.
 4272              	
 4273              	// 	.word	_WORDS+MAPOFFSET
 4274              	// _VERSN	.byte  3
 4275              	// 	.ascii "VER"
 4276              	// 	.p2align 2 	
 4277              	VERSN:
 4278 23f4 42F804ED 		_NEST
 4279 23f8 FEF795F8 		_DOLIT
 4280 23fc 00010000 		.word	VER*256+EXT
 4281 2400 52F804FB 		_UNNEST
 4282              	
 4283              	//    hi	  ( -- )
ARM GAS  stm32eforth.s 			page 80


 4284              	// 	Display the sign-on message of eForth.
 4285              	
 4286 2404 B4170018 		.word	_WORDS+MAPOFFSET
 4287 2408 02       	_HI:	.byte  2
 4288 2409 4849     		.ascii "HI"
 4289 240b 00       		.p2align 2 	
 4290              	HI:
 4291 240c 42F804ED 		_NEST
 4292 2410 FEF732FF 		BL	CR	// initialize I/O
 4293 2414 FEF768FF 		BL	DOTQP
 4294 2418 17       		.byte	23
 4295 2419 626C7565 		.ascii "blue pill stm32eForth v" 
 4295      2070696C 
 4295      6C207374 
 4295      6D333265 
 4295      466F7274 
 4296              		.p2align 2
 4297 2430 FEF7FAFA 		BL	BASE
 4298 2434 FEF7C0F8 		BL	AT
 4299 2438 FEF7CEFD 		BL	HEX	// save radix
 4300 243c FFF7DAFF 		BL	VERSN
 4301 2440 FEF746FD 		BL	BDIGS
 4302 2444 FEF76AFD 		BL	DIG
 4303 2448 FEF768FD 		BL	DIG
 4304 244c FEF76BF8 		_DOLIT
 4305 2450 2E000000 		.word	'.'
 4306 2454 FEF74CFD 		BL	HOLD
 4307 2458 FEF770FD 		BL	DIGS
 4308 245c FEF794FD 		BL	EDIGS
 4309 2460 FEF7F2FE 		BL	TYPEE	// format version number
 4310 2464 FEF7E0FA 		BL	BASE
 4311 2468 FEF79CF8 		BL	STORE
 4312 246c FEF704FF 		BL	CR
 4313 2470 52F804FB 		_UNNEST			// restore radix
 4314              	
 4315              	//    COLD	( -- )
 4316              	// 	The high level cold start sequence.
 4317              	
 4318 2474 08180018 		.word	_HI+MAPOFFSET
 4319 2478 04       	LASTN:	.byte  4
 4320 2479 434F4C44 		.ascii "COLD"
 4321 247d 000000   		.p2align 2,0	
 4322              	COLD:
 4323              	//  Initiate Forth registers
 4324 2480 4FF00003 		MOV R3,#UPP&0xffff	//  user area 
 4325 2484 C2F20003 	 	MOVT R3,#UPP>>16		  
 4326 2488 03F59F42 		ADD R2,R3,#RPP&0xffff	// Forth return stack
 4327 248c 03F59D41 		ADD R1,R3,#SPP&0xffff // Forth data stack
 4328 2490 85EA0505 		EOR R5,R5,R5			//  tos=0
 4329 2494 00BF     		NOP
 4330 2496 42F804ED 		_NEST
 4331              	COLD1:
 4332 249a FEF744F8 		_DOLIT 
 4333 249e 00000000 		.word 0 
 4334 24a2 FEF701F8 		BL ULED // turn off user LED 
 4335 24a6 FEF73EF8 		_DOLIT
 4336 24aa 00040000 		.word	UZERO
ARM GAS  stm32eforth.s 			page 81


 4337 24ae FEF73AF8 		_DOLIT
 4338 24b2 00000020 		.word	UPP
 4339 24b6 FEF736F8 		_DOLIT
 4340 24ba 48000000 		.word	ULAST-UZERO
 4341 24be FEF77BFC 		BL	MOVE 			// initialize user area
 4342 24c2 FFF7D9FA 		BL	PRESE			// initialize stack and TIB
 4343 24c6 FEF7A5FA 		BL	TBOOT
 4344 24ca FEF751FC 		BL	ATEXE			// application boot
 4345 24ce FEF7F9FA 		BL	CPP 
 4346 24d2 FEF771F8 		BL	AT 
 4347 24d6 FEF7CFFB 		BL  ALGND 
 4348 24da FEF7F3FA 		BL	CPP 
 4349 24de FEF761F8 		BL	STORE 
 4350 24e2 FFF7D1FD 		BL	OVERT
 4351 24e6 FFF7D3BA 		B.W	QUIT			// start interpretation
 4352              	COLD2:	
 4353              	CTOP:
 4354 24ea FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4355              	
 4356 24ee 00BF     	  .end 
ARM GAS  stm32eforth.s 			page 82


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
ARM GAS  stm32eforth.s 			page 83


board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
board/blue-pill/stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
board/blue-pill/stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
board/blue-pill/stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
board/blue-pill/stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
board/blue-pill/stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
board/blue-pill/stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
board/blue-pill/stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
board/blue-pill/stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
board/blue-pill/stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
board/blue-pill/stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
board/blue-pill/stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
board/blue-pill/stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
board/blue-pill/stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
board/blue-pill/stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
board/blue-pill/stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
board/blue-pill/stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32eforth.s:83     *ABS*:0000000040011000 LED_GPIO
       stm32eforth.s:84     *ABS*:000000000000000d LED_PIN
       stm32eforth.s:85     *ABS*:0000000040013800 UART
       stm32eforth.s:88     *ABS*:0000000020004e80 SPP
       stm32eforth.s:89     *ABS*:0000000020004e80 TIBB
       stm32eforth.s:90     *ABS*:0000000020004f80 RPP
       stm32eforth.s:91     *ABS*:0000000020000000 UPP
       stm32eforth.s:92     *ABS*:0000000020000100 DTOP
       stm32eforth.s:93     *ABS*:0000000020004e00 DEND
       stm32eforth.s:94     *ABS*:0000000020000000 RAMOFFSET
       stm32eforth.s:95     *ABS*:0000000020005000 RAMEND
       stm32eforth.s:96     *ABS*:0000000008000c00 FLASHOFFSET
       stm32eforth.s:99     *ABS*:0000000017fff400 MAPOFFSET
       stm32eforth.s:106    *ABS*:0000000000000004 TICKS_OFS
       stm32eforth.s:107    *ABS*:0000000000000008 TIMER_OFS
       stm32eforth.s:108    *ABS*:000000000000000c BOOT_OFS
       stm32eforth.s:109    *ABS*:0000000000000010 BASE_OFS
       stm32eforth.s:110    *ABS*:0000000000000014 TMP_OFS
       stm32eforth.s:111    *ABS*:0000000000000018 SPAN_OFS
       stm32eforth.s:112    *ABS*:000000000000001c TOIN_OFS
       stm32eforth.s:113    *ABS*:0000000000000020 NTIB_OFS
       stm32eforth.s:114    *ABS*:0000000000000024 TIB_OFS
       stm32eforth.s:115    *ABS*:0000000000000028 EVAL_OFS
       stm32eforth.s:116    *ABS*:000000000000002c HLD_OFS
       stm32eforth.s:117    *ABS*:0000000000000030 CTXT_OFS
       stm32eforth.s:118    *ABS*:0000000000000034 FLSH_CTOP_OFS
       stm32eforth.s:119    *ABS*:0000000000000038 RAM_CTOP_OFS
       stm32eforth.s:120    *ABS*:000000000000003c LASTN_OFS
       stm32eforth.s:159    .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:293    .text.reset_handler:0000000000000000 reset_handler
       stm32eforth.s:250    .text.default_handler:0000000000000000 default_handler
ARM GAS  stm32eforth.s 			page 84


       stm32eforth.s:272    .text.default_handler:0000000000000034 systick_handler
       stm32eforth.s:248    .text.default_handler:0000000000000000 $t
       stm32eforth.s:260    .text.default_handler:000000000000001c exception_msg
       stm32eforth.s:585    .text.reset_handler:0000000000000504 EMIT
       stm32eforth.s:261    .text.default_handler:000000000000001c $d
       stm32eforth.s:282    .text.default_handler:000000000000004e systick_exit
       stm32eforth.s:291    .text.reset_handler:0000000000000000 $t
       stm32eforth.s:405    .text.reset_handler:00000000000000e4 remap
       stm32eforth.s:305    .text.reset_handler:0000000000000014 init_devices
       stm32eforth.s:300    .text.reset_handler:0000000000000010 forth_entry
       stm32eforth.s:301    .text.reset_handler:0000000000000010 $d
       stm32eforth.s:4322   .text.reset_handler:0000000000002480 COLD
       stm32eforth.s:304    .text.reset_handler:0000000000000014 $t
       stm32eforth.s:320    .text.reset_handler:0000000000000032 wait_hserdy
       stm32eforth.s:340    .text.reset_handler:000000000000004c wait_pllrdy
       stm32eforth.s:353    .text.reset_handler:000000000000006c wait_sws
       stm32eforth.s:425    .text.reset_handler:000000000000011c remap_dest
       stm32eforth.s:423    .text.reset_handler:0000000000000118 remap_src
       stm32eforth.s:4353   .text.reset_handler:00000000000024ea CTOP
       stm32eforth.s:471    .text.reset_handler:0000000000000400 UZERO
       stm32eforth.s:424    .text.reset_handler:0000000000000118 $d
       stm32eforth.s:431    *ABS*:0000000000000001 VER
       stm32eforth.s:432    *ABS*:0000000000000000 EXT
       stm32eforth.s:436    *ABS*:0000000000000040 COMPO
       stm32eforth.s:437    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:438    *ABS*:00000000ffffff1f MASKK
       stm32eforth.s:440    *ABS*:0000000000000004 CELLL
       stm32eforth.s:441    *ABS*:000000000000000a BASEE
       stm32eforth.s:442    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:444    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:445    *ABS*:000000000000000a LF
       stm32eforth.s:446    *ABS*:000000000000000d CRR
       stm32eforth.s:447    *ABS*:000000000000001b ERR
       stm32eforth.s:448    *ABS*:0000000000000027 TIC
       stm32eforth.s:469    .text.reset_handler:0000000000000120 $t
       stm32eforth.s:472    .text.reset_handler:0000000000000400 $d
       stm32eforth.s:4290   .text.reset_handler:000000000000240c HI
       stm32eforth.s:3095   .text.reset_handler:0000000000001954 INTER
       stm32eforth.s:4319   .text.reset_handler:0000000000002478 LASTN
       stm32eforth.s:489    .text.reset_handler:0000000000000448 ULAST
       stm32eforth.s:500    .text.reset_handler:0000000000000448 $d
       stm32eforth.s:501    .text.reset_handler:000000000000044c _REBOOT
       stm32eforth.s:504    .text.reset_handler:0000000000000454 REBOOT
       stm32eforth.s:511    .text.reset_handler:0000000000000464 scb_adr
       stm32eforth.s:512    .text.reset_handler:0000000000000464 $d
       stm32eforth.s:516    .text.reset_handler:000000000000046c _PAUSE
       stm32eforth.s:518    .text.reset_handler:0000000000000472 $t
       stm32eforth.s:519    .text.reset_handler:0000000000000474 PAUSE
       stm32eforth.s:1442   .text.reset_handler:0000000000000a00 TIMER
       stm32eforth.s:710    .text.reset_handler:00000000000005a4 STORE
       stm32eforth.s:523    .text.reset_handler:0000000000000480 PAUSE_LOOP
       stm32eforth.s:723    .text.reset_handler:00000000000005b8 AT
       stm32eforth.s:670    .text.reset_handler:000000000000056c QBRAN
       stm32eforth.s:527    .text.reset_handler:000000000000048c $d
       stm32eforth.s:530    .text.reset_handler:0000000000000498 PAUSE_EXIT
       stm32eforth.s:688    .text.reset_handler:0000000000000584 BRAN
       stm32eforth.s:528    .text.reset_handler:0000000000000490 $t
ARM GAS  stm32eforth.s 			page 85


       stm32eforth.s:529    .text.reset_handler:0000000000000494 $d
       stm32eforth.s:531    .text.reset_handler:0000000000000498 $t
       stm32eforth.s:535    .text.reset_handler:000000000000049c $d
       stm32eforth.s:536    .text.reset_handler:00000000000004a0 _ULED
       stm32eforth.s:540    .text.reset_handler:00000000000004a8 ULED
       stm32eforth.s:549    .text.reset_handler:00000000000004c0 ULED_OFF
       stm32eforth.s:555    .text.reset_handler:00000000000004c4 $d
       stm32eforth.s:556    .text.reset_handler:00000000000004c8 _QRX
       stm32eforth.s:559    .text.reset_handler:00000000000004d0 QKEY
       stm32eforth.s:560    .text.reset_handler:00000000000004d0 QRX
       stm32eforth.s:571    .text.reset_handler:00000000000004f0 QRX1
       stm32eforth.s:580    .text.reset_handler:00000000000004f8 $d
       stm32eforth.s:581    .text.reset_handler:00000000000004fc _TXSTO
       stm32eforth.s:584    .text.reset_handler:0000000000000504 TXSTO
       stm32eforth.s:586    .text.reset_handler:0000000000000504 TECHO
       stm32eforth.s:589    .text.reset_handler:000000000000050c TX1
       stm32eforth.s:605    .text.reset_handler:000000000000051c $d
       stm32eforth.s:606    .text.reset_handler:0000000000000520 _NOP
       stm32eforth.s:608    .text.reset_handler:0000000000000524 $t
       stm32eforth.s:609    .text.reset_handler:0000000000000524 NOP
       stm32eforth.s:620    .text.reset_handler:0000000000000526 DOLIT
       stm32eforth.s:630    .text.reset_handler:0000000000000538 $d
       stm32eforth.s:631    .text.reset_handler:000000000000053c _EXECU
       stm32eforth.s:633    .text.reset_handler:0000000000000544 $t
       stm32eforth.s:634    .text.reset_handler:0000000000000544 EXECU
       stm32eforth.s:648    .text.reset_handler:000000000000054e DONXT
       stm32eforth.s:655    .text.reset_handler:000000000000055c NEXT1
       stm32eforth.s:677    .text.reset_handler:000000000000057e QBRAN1
       stm32eforth.s:696    .text.reset_handler:000000000000058e $d
       stm32eforth.s:697    .text.reset_handler:0000000000000592 _EXIT
       stm32eforth.s:700    .text.reset_handler:0000000000000598 EXIT
       stm32eforth.s:706    .text.reset_handler:000000000000059c $d
       stm32eforth.s:707    .text.reset_handler:00000000000005a0 _STORE
       stm32eforth.s:709    .text.reset_handler:00000000000005a2 $t
       stm32eforth.s:719    .text.reset_handler:00000000000005b0 $d
       stm32eforth.s:720    .text.reset_handler:00000000000005b4 _AT
       stm32eforth.s:722    .text.reset_handler:00000000000005b6 $t
       stm32eforth.s:730    .text.reset_handler:00000000000005bc $d
       stm32eforth.s:731    .text.reset_handler:00000000000005c0 _CSTOR
       stm32eforth.s:734    .text.reset_handler:00000000000005c4 CSTOR
       stm32eforth.s:743    .text.reset_handler:00000000000005d0 $d
       stm32eforth.s:744    .text.reset_handler:00000000000005d4 _CAT
       stm32eforth.s:747    .text.reset_handler:00000000000005d8 CAT
       stm32eforth.s:754    .text.reset_handler:00000000000005dc $d
       stm32eforth.s:755    .text.reset_handler:00000000000005e0 _RFROM
       stm32eforth.s:758    .text.reset_handler:00000000000005e4 RFROM
       stm32eforth.s:766    .text.reset_handler:00000000000005ee $d
       stm32eforth.s:767    .text.reset_handler:00000000000005f2 _RAT
       stm32eforth.s:770    .text.reset_handler:00000000000005f8 RAT
       stm32eforth.s:778    .text.reset_handler:0000000000000600 $d
       stm32eforth.s:779    .text.reset_handler:0000000000000604 _TOR
       stm32eforth.s:782    .text.reset_handler:0000000000000608 TOR
       stm32eforth.s:790    .text.reset_handler:0000000000000612 $d
       stm32eforth.s:791    .text.reset_handler:0000000000000616 _SPAT
       stm32eforth.s:793    .text.reset_handler:000000000000061a $t
       stm32eforth.s:794    .text.reset_handler:000000000000061c SPAT
       stm32eforth.s:802    .text.reset_handler:0000000000000624 $d
ARM GAS  stm32eforth.s 			page 86


       stm32eforth.s:803    .text.reset_handler:0000000000000628 _DROP
       stm32eforth.s:806    .text.reset_handler:0000000000000630 DROP
       stm32eforth.s:813    .text.reset_handler:0000000000000636 $d
       stm32eforth.s:814    .text.reset_handler:000000000000063a _DUPP
       stm32eforth.s:816    .text.reset_handler:000000000000063e $t
       stm32eforth.s:817    .text.reset_handler:0000000000000640 DUPP
       stm32eforth.s:824    .text.reset_handler:0000000000000646 $d
       stm32eforth.s:825    .text.reset_handler:000000000000064a _SWAP
       stm32eforth.s:828    .text.reset_handler:0000000000000650 SWAP
       stm32eforth.s:837    .text.reset_handler:0000000000000658 $d
       stm32eforth.s:838    .text.reset_handler:000000000000065c _OVER
       stm32eforth.s:841    .text.reset_handler:0000000000000664 OVER
       stm32eforth.s:849    .text.reset_handler:000000000000066c $d
       stm32eforth.s:850    .text.reset_handler:0000000000000670 _ZLESS
       stm32eforth.s:853    .text.reset_handler:0000000000000674 ZLESS
       stm32eforth.s:861    .text.reset_handler:000000000000067e $d
       stm32eforth.s:862    .text.reset_handler:0000000000000682 _ANDD
       stm32eforth.s:864    .text.reset_handler:0000000000000686 $t
       stm32eforth.s:865    .text.reset_handler:0000000000000688 ANDD
       stm32eforth.s:873    .text.reset_handler:0000000000000692 $d
       stm32eforth.s:874    .text.reset_handler:0000000000000696 _ORR
       stm32eforth.s:877    .text.reset_handler:000000000000069c ORR
       stm32eforth.s:885    .text.reset_handler:00000000000006a6 $d
       stm32eforth.s:886    .text.reset_handler:00000000000006aa _XORR
       stm32eforth.s:888    .text.reset_handler:00000000000006ae $t
       stm32eforth.s:889    .text.reset_handler:00000000000006b0 XORR
       stm32eforth.s:897    .text.reset_handler:00000000000006ba $d
       stm32eforth.s:898    .text.reset_handler:00000000000006be _UPLUS
       stm32eforth.s:900    .text.reset_handler:00000000000006c2 $t
       stm32eforth.s:901    .text.reset_handler:00000000000006c4 UPLUS
       stm32eforth.s:912    .text.reset_handler:00000000000006d4 $d
       stm32eforth.s:913    .text.reset_handler:00000000000006d8 _RSHIFT
       stm32eforth.s:916    .text.reset_handler:00000000000006e0 RSHIFT
       stm32eforth.s:924    .text.reset_handler:00000000000006ea $d
       stm32eforth.s:925    .text.reset_handler:00000000000006ee _LSHIFT
       stm32eforth.s:928    .text.reset_handler:00000000000006f8 LSHIFT
       stm32eforth.s:936    .text.reset_handler:0000000000000702 $d
       stm32eforth.s:937    .text.reset_handler:0000000000000706 _PLUS
       stm32eforth.s:939    .text.reset_handler:0000000000000708 $t
       stm32eforth.s:940    .text.reset_handler:0000000000000708 PLUS
       stm32eforth.s:948    .text.reset_handler:0000000000000710 $d
       stm32eforth.s:949    .text.reset_handler:0000000000000714 _SUBB
       stm32eforth.s:951    .text.reset_handler:0000000000000716 $t
       stm32eforth.s:952    .text.reset_handler:0000000000000718 SUBB
       stm32eforth.s:960    .text.reset_handler:0000000000000722 $d
       stm32eforth.s:961    .text.reset_handler:0000000000000726 _STAR
       stm32eforth.s:963    .text.reset_handler:0000000000000728 $t
       stm32eforth.s:964    .text.reset_handler:0000000000000728 STAR
       stm32eforth.s:972    .text.reset_handler:0000000000000732 $d
       stm32eforth.s:973    .text.reset_handler:0000000000000736 _UMSTA
       stm32eforth.s:975    .text.reset_handler:000000000000073a $t
       stm32eforth.s:976    .text.reset_handler:000000000000073c UMSTA
       stm32eforth.s:986    .text.reset_handler:0000000000000748 $d
       stm32eforth.s:987    .text.reset_handler:000000000000074c _MSTAR
       stm32eforth.s:990    .text.reset_handler:0000000000000750 MSTAR
       stm32eforth.s:1000   .text.reset_handler:000000000000075c $d
       stm32eforth.s:1001   .text.reset_handler:0000000000000760 _ONEP
ARM GAS  stm32eforth.s 			page 87


       stm32eforth.s:1004   .text.reset_handler:0000000000000764 ONEP
       stm32eforth.s:1011   .text.reset_handler:000000000000076a $d
       stm32eforth.s:1012   .text.reset_handler:000000000000076e _ONEM
       stm32eforth.s:1015   .text.reset_handler:0000000000000774 ONEM
       stm32eforth.s:1022   .text.reset_handler:000000000000077a $d
       stm32eforth.s:1023   .text.reset_handler:000000000000077e _TWOP
       stm32eforth.s:1026   .text.reset_handler:0000000000000784 TWOP
       stm32eforth.s:1033   .text.reset_handler:000000000000078a $d
       stm32eforth.s:1034   .text.reset_handler:000000000000078e _TWOM
       stm32eforth.s:1037   .text.reset_handler:0000000000000794 TWOM
       stm32eforth.s:1044   .text.reset_handler:000000000000079a $d
       stm32eforth.s:1045   .text.reset_handler:000000000000079e _CELLP
       stm32eforth.s:1047   .text.reset_handler:00000000000007a4 $t
       stm32eforth.s:1048   .text.reset_handler:00000000000007a4 CELLP
       stm32eforth.s:1055   .text.reset_handler:00000000000007aa $d
       stm32eforth.s:1056   .text.reset_handler:00000000000007ae _CELLM
       stm32eforth.s:1058   .text.reset_handler:00000000000007b4 $t
       stm32eforth.s:1059   .text.reset_handler:00000000000007b4 CELLM
       stm32eforth.s:1066   .text.reset_handler:00000000000007ba $d
       stm32eforth.s:1067   .text.reset_handler:00000000000007be _BLANK
       stm32eforth.s:1070   .text.reset_handler:00000000000007c4 BLANK
       stm32eforth.s:1078   .text.reset_handler:00000000000007ce $d
       stm32eforth.s:1079   .text.reset_handler:00000000000007d2 _CELLS
       stm32eforth.s:1081   .text.reset_handler:00000000000007d8 $t
       stm32eforth.s:1082   .text.reset_handler:00000000000007d8 CELLS
       stm32eforth.s:1089   .text.reset_handler:00000000000007de $d
       stm32eforth.s:1090   .text.reset_handler:00000000000007e2 _CELLSL
       stm32eforth.s:1092   .text.reset_handler:00000000000007e8 $t
       stm32eforth.s:1093   .text.reset_handler:00000000000007e8 CELLSL
       stm32eforth.s:1100   .text.reset_handler:00000000000007ee $d
       stm32eforth.s:1101   .text.reset_handler:00000000000007f2 _TWOST
       stm32eforth.s:1104   .text.reset_handler:00000000000007f8 TWOST
       stm32eforth.s:1111   .text.reset_handler:00000000000007fe $d
       stm32eforth.s:1112   .text.reset_handler:0000000000000802 _TWOSL
       stm32eforth.s:1115   .text.reset_handler:0000000000000808 TWOSL
       stm32eforth.s:1122   .text.reset_handler:000000000000080e $d
       stm32eforth.s:1123   .text.reset_handler:0000000000000812 _QDUP
       stm32eforth.s:1126   .text.reset_handler:0000000000000818 QDUP
       stm32eforth.s:1135   .text.reset_handler:0000000000000822 $d
       stm32eforth.s:1136   .text.reset_handler:0000000000000826 _ROT
       stm32eforth.s:1138   .text.reset_handler:000000000000082a $t
       stm32eforth.s:1139   .text.reset_handler:000000000000082c ROT
       stm32eforth.s:1149   .text.reset_handler:0000000000000836 $d
       stm32eforth.s:1150   .text.reset_handler:000000000000083a _DDROP
       stm32eforth.s:1152   .text.reset_handler:0000000000000840 $t
       stm32eforth.s:1153   .text.reset_handler:0000000000000840 DDROP
       stm32eforth.s:1161   .text.reset_handler:000000000000084a $d
       stm32eforth.s:1162   .text.reset_handler:000000000000084e _DDUP
       stm32eforth.s:1165   .text.reset_handler:0000000000000854 DDUP
       stm32eforth.s:1174   .text.reset_handler:0000000000000860 $d
       stm32eforth.s:1175   .text.reset_handler:0000000000000864 _DPLUS
       stm32eforth.s:1178   .text.reset_handler:0000000000000868 DPLUS
       stm32eforth.s:1190   .text.reset_handler:000000000000087c $d
       stm32eforth.s:1191   .text.reset_handler:0000000000000880 _INVER
       stm32eforth.s:1193   .text.reset_handler:0000000000000884 $t
       stm32eforth.s:1194   .text.reset_handler:0000000000000884 INVER
       stm32eforth.s:1201   .text.reset_handler:000000000000088a $d
ARM GAS  stm32eforth.s 			page 88


       stm32eforth.s:1202   .text.reset_handler:000000000000088e _NEGAT
       stm32eforth.s:1205   .text.reset_handler:0000000000000898 NEGAT
       stm32eforth.s:1212   .text.reset_handler:000000000000089e $d
       stm32eforth.s:1213   .text.reset_handler:00000000000008a2 _ABSS
       stm32eforth.s:1215   .text.reset_handler:00000000000008a6 $t
       stm32eforth.s:1216   .text.reset_handler:00000000000008a8 ABSS
       stm32eforth.s:1225   .text.reset_handler:00000000000008b2 $d
       stm32eforth.s:1226   .text.reset_handler:00000000000008b6 _ZEQUAL
       stm32eforth.s:1229   .text.reset_handler:00000000000008bc ZEQUAL
       stm32eforth.s:1239   .text.reset_handler:00000000000008ca $d
       stm32eforth.s:1240   .text.reset_handler:00000000000008ce _EQUAL
       stm32eforth.s:1242   .text.reset_handler:00000000000008d0 $t
       stm32eforth.s:1243   .text.reset_handler:00000000000008d0 EQUAL
       stm32eforth.s:1254   .text.reset_handler:00000000000008e0 $d
       stm32eforth.s:1255   .text.reset_handler:00000000000008e4 _ULESS
       stm32eforth.s:1258   .text.reset_handler:00000000000008e8 ULESS
       stm32eforth.s:1269   .text.reset_handler:00000000000008f8 $d
       stm32eforth.s:1270   .text.reset_handler:00000000000008fc _LESS
       stm32eforth.s:1272   .text.reset_handler:00000000000008fe $t
       stm32eforth.s:1273   .text.reset_handler:0000000000000900 LESS
       stm32eforth.s:1284   .text.reset_handler:0000000000000910 $d
       stm32eforth.s:1285   .text.reset_handler:0000000000000914 _GREAT
       stm32eforth.s:1287   .text.reset_handler:0000000000000916 $t
       stm32eforth.s:1288   .text.reset_handler:0000000000000918 GREAT
       stm32eforth.s:1299   .text.reset_handler:0000000000000928 $d
       stm32eforth.s:1300   .text.reset_handler:000000000000092c _MAX
       stm32eforth.s:1302   .text.reset_handler:0000000000000930 $t
       stm32eforth.s:1303   .text.reset_handler:0000000000000930 MAX
       stm32eforth.s:1313   .text.reset_handler:000000000000093c $d
       stm32eforth.s:1314   .text.reset_handler:0000000000000940 _MIN
       stm32eforth.s:1316   .text.reset_handler:0000000000000944 $t
       stm32eforth.s:1317   .text.reset_handler:0000000000000944 MIN
       stm32eforth.s:1327   .text.reset_handler:0000000000000950 $d
       stm32eforth.s:1328   .text.reset_handler:0000000000000954 _PSTOR
       stm32eforth.s:1331   .text.reset_handler:0000000000000958 PSTOR
       stm32eforth.s:1342   .text.reset_handler:0000000000000968 $d
       stm32eforth.s:1343   .text.reset_handler:000000000000096c _DSTOR
       stm32eforth.s:1346   .text.reset_handler:0000000000000970 DSTOR
       stm32eforth.s:1357   .text.reset_handler:0000000000000984 $d
       stm32eforth.s:1358   .text.reset_handler:0000000000000988 _DAT
       stm32eforth.s:1361   .text.reset_handler:000000000000098c DAT
       stm32eforth.s:1370   .text.reset_handler:0000000000000996 $d
       stm32eforth.s:1371   .text.reset_handler:000000000000099a _COUNT
       stm32eforth.s:1373   .text.reset_handler:00000000000009a0 $t
       stm32eforth.s:1374   .text.reset_handler:00000000000009a0 COUNT
       stm32eforth.s:1383   .text.reset_handler:00000000000009ac $d
       stm32eforth.s:1384   .text.reset_handler:00000000000009b0 _DNEGA
       stm32eforth.s:1386   .text.reset_handler:00000000000009b8 $t
       stm32eforth.s:1387   .text.reset_handler:00000000000009b8 DNEGA
       stm32eforth.s:1405   .text.reset_handler:00000000000009c8 DOVAR
       stm32eforth.s:1417   .text.reset_handler:00000000000009d4 DOCON
       stm32eforth.s:1428   .text.reset_handler:00000000000009e0 $d
       stm32eforth.s:1429   .text.reset_handler:00000000000009e4 _MSEC
       stm32eforth.s:1432   .text.reset_handler:00000000000009ec MSEC
       stm32eforth.s:1438   .text.reset_handler:00000000000009f6 $d
       stm32eforth.s:1439   .text.reset_handler:00000000000009fa _TIMER
       stm32eforth.s:1441   .text.reset_handler:0000000000000a00 $t
ARM GAS  stm32eforth.s 			page 89


       stm32eforth.s:1450   .text.reset_handler:0000000000000a0a $d
       stm32eforth.s:1451   .text.reset_handler:0000000000000a0e _TBOOT
       stm32eforth.s:1453   .text.reset_handler:0000000000000a14 $t
       stm32eforth.s:1454   .text.reset_handler:0000000000000a14 TBOOT
       stm32eforth.s:1462   .text.reset_handler:0000000000000a1e $d
       stm32eforth.s:1463   .text.reset_handler:0000000000000a22 _BASE
       stm32eforth.s:1466   .text.reset_handler:0000000000000a28 BASE
       stm32eforth.s:1478   .text.reset_handler:0000000000000a32 TEMP
       stm32eforth.s:1486   .text.reset_handler:0000000000000a3c $d
       stm32eforth.s:1487   .text.reset_handler:0000000000000a40 _SPAN
       stm32eforth.s:1490   .text.reset_handler:0000000000000a48 SPAN
       stm32eforth.s:1498   .text.reset_handler:0000000000000a52 $d
       stm32eforth.s:1499   .text.reset_handler:0000000000000a56 _INN
       stm32eforth.s:1501   .text.reset_handler:0000000000000a5a $t
       stm32eforth.s:1502   .text.reset_handler:0000000000000a5c INN
       stm32eforth.s:1510   .text.reset_handler:0000000000000a66 $d
       stm32eforth.s:1511   .text.reset_handler:0000000000000a6a _NTIB
       stm32eforth.s:1514   .text.reset_handler:0000000000000a70 NTIB
       stm32eforth.s:1522   .text.reset_handler:0000000000000a7a $d
       stm32eforth.s:1523   .text.reset_handler:0000000000000a7e _TEVAL
       stm32eforth.s:1525   .text.reset_handler:0000000000000a84 $t
       stm32eforth.s:1526   .text.reset_handler:0000000000000a84 TEVAL
       stm32eforth.s:1534   .text.reset_handler:0000000000000a8e $d
       stm32eforth.s:1535   .text.reset_handler:0000000000000a92 _HLD
       stm32eforth.s:1537   .text.reset_handler:0000000000000a96 $t
       stm32eforth.s:1538   .text.reset_handler:0000000000000a98 HLD
       stm32eforth.s:1546   .text.reset_handler:0000000000000aa2 $d
       stm32eforth.s:1547   .text.reset_handler:0000000000000aa6 _CNTXT
       stm32eforth.s:1549   .text.reset_handler:0000000000000aae $t
       stm32eforth.s:1550   .text.reset_handler:0000000000000ab0 CNTXT
       stm32eforth.s:1551   .text.reset_handler:0000000000000ab0 CRRNT
       stm32eforth.s:1559   .text.reset_handler:0000000000000aba $d
       stm32eforth.s:1560   .text.reset_handler:0000000000000abe _CP
       stm32eforth.s:1563   .text.reset_handler:0000000000000ac4 CPP
       stm32eforth.s:1570   .text.reset_handler:0000000000000ace $d
       stm32eforth.s:1571   .text.reset_handler:0000000000000ad2 _FCPP
       stm32eforth.s:1574   .text.reset_handler:0000000000000ad8 FCPP
       stm32eforth.s:1582   .text.reset_handler:0000000000000ae2 $d
       stm32eforth.s:1583   .text.reset_handler:0000000000000ae6 _LAST
       stm32eforth.s:1586   .text.reset_handler:0000000000000aec LAST
       stm32eforth.s:1597   .text.reset_handler:0000000000000af6 $d
       stm32eforth.s:1598   .text.reset_handler:0000000000000afa _WITHI
       stm32eforth.s:1601   .text.reset_handler:0000000000000b04 WITHI
       stm32eforth.s:1616   .text.reset_handler:0000000000000b24 $d
       stm32eforth.s:1617   .text.reset_handler:0000000000000b28 _UMMOD
       stm32eforth.s:1620   .text.reset_handler:0000000000000b30 UMMOD
       stm32eforth.s:1624   .text.reset_handler:0000000000000b3a UMMOD0
       stm32eforth.s:1631   .text.reset_handler:0000000000000b4a UMMOD1
       stm32eforth.s:1637   .text.reset_handler:0000000000000b54 UMMOD2
       stm32eforth.s:1647   .text.reset_handler:0000000000000b5e $d
       stm32eforth.s:1648   .text.reset_handler:0000000000000b62 _MSMOD
       stm32eforth.s:1650   .text.reset_handler:0000000000000b68 $t
       stm32eforth.s:1651   .text.reset_handler:0000000000000b68 MSMOD
       stm32eforth.s:1658   .text.reset_handler:0000000000000b80 $d
       stm32eforth.s:1663   .text.reset_handler:0000000000000b94 MMOD1
       stm32eforth.s:1659   .text.reset_handler:0000000000000b84 $t
       stm32eforth.s:1668   .text.reset_handler:0000000000000ba4 $d
ARM GAS  stm32eforth.s 			page 90


       stm32eforth.s:1671   .text.reset_handler:0000000000000bb0 MMOD2
       stm32eforth.s:1669   .text.reset_handler:0000000000000ba8 $t
       stm32eforth.s:1676   .text.reset_handler:0000000000000bc0 $d
       stm32eforth.s:1680   .text.reset_handler:0000000000000bd0 MMOD3
       stm32eforth.s:1677   .text.reset_handler:0000000000000bc4 $t
       stm32eforth.s:1686   .text.reset_handler:0000000000000bd4 $d
       stm32eforth.s:1687   .text.reset_handler:0000000000000bd8 _SLMOD
       stm32eforth.s:1690   .text.reset_handler:0000000000000be0 SLMOD
       stm32eforth.s:1701   .text.reset_handler:0000000000000bf8 $d
       stm32eforth.s:1702   .text.reset_handler:0000000000000bfc _MODD
       stm32eforth.s:1704   .text.reset_handler:0000000000000c00 $t
       stm32eforth.s:1705   .text.reset_handler:0000000000000c00 MODD
       stm32eforth.s:1714   .text.reset_handler:0000000000000c10 $d
       stm32eforth.s:1715   .text.reset_handler:0000000000000c14 _SLASH
       stm32eforth.s:1717   .text.reset_handler:0000000000000c16 $t
       stm32eforth.s:1718   .text.reset_handler:0000000000000c18 SLASH
       stm32eforth.s:1728   .text.reset_handler:0000000000000c2c $d
       stm32eforth.s:1729   .text.reset_handler:0000000000000c30 _SSMOD
       stm32eforth.s:1731   .text.reset_handler:0000000000000c36 $t
       stm32eforth.s:1732   .text.reset_handler:0000000000000c38 SSMOD
       stm32eforth.s:1743   .text.reset_handler:0000000000000c50 $d
       stm32eforth.s:1744   .text.reset_handler:0000000000000c54 _STASL
       stm32eforth.s:1747   .text.reset_handler:0000000000000c58 STASL
       stm32eforth.s:1760   .text.reset_handler:0000000000000c6c $d
       stm32eforth.s:1761   .text.reset_handler:0000000000000c70 _ALGND
       stm32eforth.s:1763   .text.reset_handler:0000000000000c78 $t
       stm32eforth.s:1764   .text.reset_handler:0000000000000c78 ALGND
       stm32eforth.s:1773   .text.reset_handler:0000000000000c86 $d
       stm32eforth.s:1774   .text.reset_handler:0000000000000c8a _TCHAR
       stm32eforth.s:1776   .text.reset_handler:0000000000000c90 $t
       stm32eforth.s:1777   .text.reset_handler:0000000000000c90 TCHAR
       stm32eforth.s:1780   .text.reset_handler:0000000000000c98 $d
       stm32eforth.s:1781   .text.reset_handler:0000000000000c9c $t
       stm32eforth.s:1785   .text.reset_handler:0000000000000cac $d
       stm32eforth.s:1786   .text.reset_handler:0000000000000cb0 $t
       stm32eforth.s:1789   .text.reset_handler:0000000000000cbc $d
       stm32eforth.s:1793   .text.reset_handler:0000000000000ccc TCHA1
       stm32eforth.s:1790   .text.reset_handler:0000000000000cc0 $t
       stm32eforth.s:1792   .text.reset_handler:0000000000000cc8 $d
       stm32eforth.s:1794   .text.reset_handler:0000000000000ccc $t
       stm32eforth.s:1799   .text.reset_handler:0000000000000cd0 $d
       stm32eforth.s:1800   .text.reset_handler:0000000000000cd4 _DEPTH
       stm32eforth.s:1802   .text.reset_handler:0000000000000cda $t
       stm32eforth.s:1803   .text.reset_handler:0000000000000cdc DEPTH
       stm32eforth.s:1815   .text.reset_handler:0000000000000cf6 $d
       stm32eforth.s:1816   .text.reset_handler:0000000000000cfa _PICK
       stm32eforth.s:1819   .text.reset_handler:0000000000000d00 PICK
       stm32eforth.s:1834   .text.reset_handler:0000000000000d1c $d
       stm32eforth.s:1835   .text.reset_handler:0000000000000d20 _HERE
       stm32eforth.s:1838   .text.reset_handler:0000000000000d28 HERE
       stm32eforth.s:1847   .text.reset_handler:0000000000000d38 $d
       stm32eforth.s:1848   .text.reset_handler:0000000000000d3c _PAD
       stm32eforth.s:1850   .text.reset_handler:0000000000000d40 $t
       stm32eforth.s:1851   .text.reset_handler:0000000000000d40 PAD
       stm32eforth.s:1860   .text.reset_handler:0000000000000d50 $d
       stm32eforth.s:1861   .text.reset_handler:0000000000000d54 _TIB
       stm32eforth.s:1863   .text.reset_handler:0000000000000d58 $t
ARM GAS  stm32eforth.s 			page 91


       stm32eforth.s:1864   .text.reset_handler:0000000000000d58 TIB
       stm32eforth.s:1872   .text.reset_handler:0000000000000d60 $d
       stm32eforth.s:1873   .text.reset_handler:0000000000000d64 _ATEXE
       stm32eforth.s:1876   .text.reset_handler:0000000000000d70 ATEXE
       stm32eforth.s:1888   .text.reset_handler:0000000000000d82 $d
       stm32eforth.s:1889   .text.reset_handler:0000000000000d86 _CMOVE
       stm32eforth.s:1891   .text.reset_handler:0000000000000d8c $t
       stm32eforth.s:1892   .text.reset_handler:0000000000000d8c CMOVE
       stm32eforth.s:1899   .text.reset_handler:0000000000000d9e CMOV1
       stm32eforth.s:1896   .text.reset_handler:0000000000000d96 CMOV0
       stm32eforth.s:1904   .text.reset_handler:0000000000000da8 CMOV2
       stm32eforth.s:1911   .text.reset_handler:0000000000000dae $d
       stm32eforth.s:1912   .text.reset_handler:0000000000000db2 _MOVE
       stm32eforth.s:1915   .text.reset_handler:0000000000000db8 MOVE
       stm32eforth.s:1923   .text.reset_handler:0000000000000dce MOVE1
       stm32eforth.s:1920   .text.reset_handler:0000000000000dc6 MOVE0
       stm32eforth.s:1928   .text.reset_handler:0000000000000dd8 MOVE2
       stm32eforth.s:1935   .text.reset_handler:0000000000000dde $d
       stm32eforth.s:1936   .text.reset_handler:0000000000000de2 _FILL
       stm32eforth.s:1939   .text.reset_handler:0000000000000de8 FILL
       stm32eforth.s:1942   .text.reset_handler:0000000000000df0 FILL0
       stm32eforth.s:1945   .text.reset_handler:0000000000000df4 FILL1
       stm32eforth.s:1951   .text.reset_handler:0000000000000e02 FILL2
       stm32eforth.s:1958   .text.reset_handler:0000000000000e08 $d
       stm32eforth.s:1959   .text.reset_handler:0000000000000e0c _PACKS
       stm32eforth.s:1962   .text.reset_handler:0000000000000e14 PACKS
       stm32eforth.s:1971   .text.reset_handler:0000000000000e34 $d
       stm32eforth.s:1972   .text.reset_handler:0000000000000e38 $t
       stm32eforth.s:1974   .text.reset_handler:0000000000000e40 $d
       stm32eforth.s:1975   .text.reset_handler:0000000000000e44 $t
       stm32eforth.s:1992   .text.reset_handler:0000000000000e6c $d
       stm32eforth.s:1993   .text.reset_handler:0000000000000e70 _DIGIT
       stm32eforth.s:1995   .text.reset_handler:0000000000000e76 $t
       stm32eforth.s:1996   .text.reset_handler:0000000000000e78 DIGIT
       stm32eforth.s:1999   .text.reset_handler:0000000000000e80 $d
       stm32eforth.s:2000   .text.reset_handler:0000000000000e84 $t
       stm32eforth.s:2010   .text.reset_handler:0000000000000e9c $d
       stm32eforth.s:2011   .text.reset_handler:0000000000000ea0 _EXTRC
       stm32eforth.s:2013   .text.reset_handler:0000000000000ea8 $t
       stm32eforth.s:2014   .text.reset_handler:0000000000000ea8 EXTRC
       stm32eforth.s:2017   .text.reset_handler:0000000000000eb0 $d
       stm32eforth.s:2018   .text.reset_handler:0000000000000eb4 $t
       stm32eforth.s:2027   .text.reset_handler:0000000000000ec8 $d
       stm32eforth.s:2028   .text.reset_handler:0000000000000ecc _BDIGS
       stm32eforth.s:2031   .text.reset_handler:0000000000000ed0 BDIGS
       stm32eforth.s:2041   .text.reset_handler:0000000000000ee4 $d
       stm32eforth.s:2042   .text.reset_handler:0000000000000ee8 _HOLD
       stm32eforth.s:2045   .text.reset_handler:0000000000000ef0 HOLD
       stm32eforth.s:2059   .text.reset_handler:0000000000000f14 $d
       stm32eforth.s:2060   .text.reset_handler:0000000000000f18 _DIG
       stm32eforth.s:2062   .text.reset_handler:0000000000000f1a $t
       stm32eforth.s:2063   .text.reset_handler:0000000000000f1c DIG
       stm32eforth.s:2074   .text.reset_handler:0000000000000f34 $d
       stm32eforth.s:2075   .text.reset_handler:0000000000000f38 _DIGS
       stm32eforth.s:2078   .text.reset_handler:0000000000000f3c DIGS
       stm32eforth.s:2080   .text.reset_handler:0000000000000f40 DIGS1
       stm32eforth.s:2084   .text.reset_handler:0000000000000f4c $d
ARM GAS  stm32eforth.s 			page 92


       stm32eforth.s:2086   .text.reset_handler:0000000000000f52 DIGS2
       stm32eforth.s:2085   .text.reset_handler:0000000000000f50 $t
       stm32eforth.s:2092   .text.reset_handler:0000000000000f56 $d
       stm32eforth.s:2093   .text.reset_handler:0000000000000f5a _SIGN
       stm32eforth.s:2096   .text.reset_handler:0000000000000f60 SIGN
       stm32eforth.s:2100   .text.reset_handler:0000000000000f6c $d
       stm32eforth.s:2104   .text.reset_handler:0000000000000f7c SIGN1
       stm32eforth.s:2101   .text.reset_handler:0000000000000f70 $t
       stm32eforth.s:2102   .text.reset_handler:0000000000000f74 $d
       stm32eforth.s:2103   .text.reset_handler:0000000000000f78 $t
       stm32eforth.s:2110   .text.reset_handler:0000000000000f80 $d
       stm32eforth.s:2111   .text.reset_handler:0000000000000f84 _EDIGS
       stm32eforth.s:2114   .text.reset_handler:0000000000000f88 EDIGS
       stm32eforth.s:2131   .text.reset_handler:0000000000000fa8 STRR
       stm32eforth.s:2146   .text.reset_handler:0000000000000fd0 $d
       stm32eforth.s:2147   .text.reset_handler:0000000000000fd4 _HEX
       stm32eforth.s:2149   .text.reset_handler:0000000000000fd8 $t
       stm32eforth.s:2150   .text.reset_handler:0000000000000fd8 HEX
       stm32eforth.s:2153   .text.reset_handler:0000000000000fe0 $d
       stm32eforth.s:2154   .text.reset_handler:0000000000000fe4 $t
       stm32eforth.s:2161   .text.reset_handler:0000000000000ff0 $d
       stm32eforth.s:2162   .text.reset_handler:0000000000000ff4 _DECIM
       stm32eforth.s:2164   .text.reset_handler:0000000000000ffc $t
       stm32eforth.s:2165   .text.reset_handler:0000000000000ffc DECIM
       stm32eforth.s:2168   .text.reset_handler:0000000000001004 $d
       stm32eforth.s:2169   .text.reset_handler:0000000000001008 $t
       stm32eforth.s:2179   .text.reset_handler:0000000000001014 $d
       stm32eforth.s:2180   .text.reset_handler:0000000000001018 _DIGTQ
       stm32eforth.s:2183   .text.reset_handler:0000000000001020 DIGTQ
       stm32eforth.s:2187   .text.reset_handler:000000000000102c $d
       stm32eforth.s:2188   .text.reset_handler:0000000000001030 $t
       stm32eforth.s:2190   .text.reset_handler:0000000000001038 $d
       stm32eforth.s:2191   .text.reset_handler:000000000000103c $t
       stm32eforth.s:2194   .text.reset_handler:0000000000001048 $d
       stm32eforth.s:2203   .text.reset_handler:000000000000106c DGTQ1
       stm32eforth.s:2195   .text.reset_handler:000000000000104c $t
       stm32eforth.s:2196   .text.reset_handler:0000000000001050 $d
       stm32eforth.s:2197   .text.reset_handler:0000000000001054 $t
       stm32eforth.s:2200   .text.reset_handler:0000000000001060 $d
       stm32eforth.s:2201   .text.reset_handler:0000000000001064 $t
       stm32eforth.s:2212   .text.reset_handler:000000000000107c $d
       stm32eforth.s:2213   .text.reset_handler:0000000000001080 _NUMBQ
       stm32eforth.s:2215   .text.reset_handler:0000000000001088 $t
       stm32eforth.s:2216   .text.reset_handler:0000000000001088 NUMBQ
       stm32eforth.s:2222   .text.reset_handler:000000000000109c $d
       stm32eforth.s:2223   .text.reset_handler:00000000000010a0 $t
       stm32eforth.s:2228   .text.reset_handler:00000000000010b4 $d
       stm32eforth.s:2229   .text.reset_handler:00000000000010b8 $t
       stm32eforth.s:2231   .text.reset_handler:00000000000010c0 $d
       stm32eforth.s:2237   .text.reset_handler:00000000000010d8 NUMQ1
       stm32eforth.s:2232   .text.reset_handler:00000000000010c4 $t
       stm32eforth.s:2241   .text.reset_handler:00000000000010e4 $d
       stm32eforth.s:2242   .text.reset_handler:00000000000010e8 $t
       stm32eforth.s:2252   .text.reset_handler:0000000000001110 $d
       stm32eforth.s:2291   .text.reset_handler:000000000000119c NUMQ6
       stm32eforth.s:2253   .text.reset_handler:0000000000001114 $t
       stm32eforth.s:2255   .text.reset_handler:000000000000111c NUMQ2
ARM GAS  stm32eforth.s 			page 93


       stm32eforth.s:2263   .text.reset_handler:0000000000001138 $d
       stm32eforth.s:2282   .text.reset_handler:0000000000001180 NUMQ4
       stm32eforth.s:2264   .text.reset_handler:000000000000113c $t
       stm32eforth.s:2272   .text.reset_handler:000000000000115c $d
       stm32eforth.s:2273   .text.reset_handler:0000000000001160 $t
       stm32eforth.s:2277   .text.reset_handler:0000000000001170 $d
       stm32eforth.s:2279   .text.reset_handler:0000000000001178 NUMQ3
       stm32eforth.s:2278   .text.reset_handler:0000000000001174 $t
       stm32eforth.s:2289   .text.reset_handler:0000000000001198 NUMQ5
       stm32eforth.s:2288   .text.reset_handler:0000000000001194 $d
       stm32eforth.s:2290   .text.reset_handler:0000000000001198 $t
       stm32eforth.s:2305   .text.reset_handler:00000000000011b4 $d
       stm32eforth.s:2306   .text.reset_handler:00000000000011b8 _KEY
       stm32eforth.s:2308   .text.reset_handler:00000000000011bc $t
       stm32eforth.s:2309   .text.reset_handler:00000000000011bc KEY
       stm32eforth.s:2311   .text.reset_handler:00000000000011c0 KEY1
       stm32eforth.s:2314   .text.reset_handler:00000000000011c8 $d
       stm32eforth.s:2316   .text.reset_handler:00000000000011cc $t
       stm32eforth.s:2318   .text.reset_handler:00000000000011d4 $d
       stm32eforth.s:2319   .text.reset_handler:00000000000011d8 $t
       stm32eforth.s:2322   .text.reset_handler:00000000000011e4 $d
       stm32eforth.s:2323   .text.reset_handler:00000000000011e8 $t
       stm32eforth.s:2328   .text.reset_handler:00000000000011ec $d
       stm32eforth.s:2329   .text.reset_handler:00000000000011f0 _SPACE
       stm32eforth.s:2331   .text.reset_handler:00000000000011f6 $t
       stm32eforth.s:2332   .text.reset_handler:00000000000011f8 SPACE
       stm32eforth.s:2341   .text.reset_handler:0000000000001208 $d
       stm32eforth.s:2342   .text.reset_handler:000000000000120c _SPACS
       stm32eforth.s:2345   .text.reset_handler:0000000000001214 SPACS
       stm32eforth.s:2348   .text.reset_handler:000000000000121c $d
       stm32eforth.s:2349   .text.reset_handler:0000000000001220 $t
       stm32eforth.s:2354   .text.reset_handler:0000000000001230 CHAR2
       stm32eforth.s:2352   .text.reset_handler:000000000000122c CHAR1
       stm32eforth.s:2356   .text.reset_handler:0000000000001234 $d
       stm32eforth.s:2357   .text.reset_handler:0000000000001238 $t
       stm32eforth.s:2362   .text.reset_handler:000000000000123c $d
       stm32eforth.s:2363   .text.reset_handler:0000000000001240 _TYPEE
       stm32eforth.s:2366   .text.reset_handler:0000000000001248 TYPEE
       stm32eforth.s:2374   .text.reset_handler:000000000000125e TYPE2
       stm32eforth.s:2370   .text.reset_handler:0000000000001252 TYPE1
       stm32eforth.s:2376   .text.reset_handler:0000000000001262 $d
       stm32eforth.s:2377   .text.reset_handler:0000000000001266 $t
       stm32eforth.s:2383   .text.reset_handler:000000000000126e $d
       stm32eforth.s:2384   .text.reset_handler:0000000000001272 _CR
       stm32eforth.s:2387   .text.reset_handler:0000000000001278 CR
       stm32eforth.s:2390   .text.reset_handler:0000000000001280 $d
       stm32eforth.s:2391   .text.reset_handler:0000000000001284 $t
       stm32eforth.s:2393   .text.reset_handler:000000000000128c $d
       stm32eforth.s:2394   .text.reset_handler:0000000000001290 $t
       stm32eforth.s:2405   .text.reset_handler:0000000000001298 DOSTR
       stm32eforth.s:2428   .text.reset_handler:00000000000012cc STRQP
       stm32eforth.s:2440   .text.reset_handler:00000000000012d8 DOTST
       stm32eforth.s:2453   .text.reset_handler:00000000000012e8 DOTQP
       stm32eforth.s:2462   .text.reset_handler:00000000000012f8 $d
       stm32eforth.s:2463   .text.reset_handler:00000000000012fc _DOTR
       stm32eforth.s:2466   .text.reset_handler:0000000000001300 DOTR
       stm32eforth.s:2480   .text.reset_handler:0000000000001324 $d
ARM GAS  stm32eforth.s 			page 94


       stm32eforth.s:2481   .text.reset_handler:0000000000001328 _UDOTR
       stm32eforth.s:2483   .text.reset_handler:000000000000132c $t
       stm32eforth.s:2484   .text.reset_handler:000000000000132c UDOTR
       stm32eforth.s:2500   .text.reset_handler:0000000000001358 $d
       stm32eforth.s:2501   .text.reset_handler:000000000000135c _UDOT
       stm32eforth.s:2504   .text.reset_handler:0000000000001360 UDOT
       stm32eforth.s:2516   .text.reset_handler:000000000000137c $d
       stm32eforth.s:2517   .text.reset_handler:0000000000001380 _DOT
       stm32eforth.s:2519   .text.reset_handler:0000000000001382 $t
       stm32eforth.s:2520   .text.reset_handler:0000000000001384 DOT
       stm32eforth.s:2525   .text.reset_handler:0000000000001394 $d
       stm32eforth.s:2526   .text.reset_handler:0000000000001398 $t
       stm32eforth.s:2528   .text.reset_handler:00000000000013a0 $d
       stm32eforth.s:2531   .text.reset_handler:00000000000013ac DOT1
       stm32eforth.s:2529   .text.reset_handler:00000000000013a4 $t
       stm32eforth.s:2540   .text.reset_handler:00000000000013bc $d
       stm32eforth.s:2541   .text.reset_handler:00000000000013c0 _QUEST
       stm32eforth.s:2543   .text.reset_handler:00000000000013c2 $t
       stm32eforth.s:2544   .text.reset_handler:00000000000013c4 QUEST
       stm32eforth.s:2560   .text.reset_handler:00000000000013d4 PARS
       stm32eforth.s:2568   .text.reset_handler:00000000000013f0 $d
       stm32eforth.s:2636   .text.reset_handler:00000000000014e2 PARS8
       stm32eforth.s:2569   .text.reset_handler:00000000000013f4 $t
       stm32eforth.s:2575   .text.reset_handler:000000000000140c $d
       stm32eforth.s:2597   .text.reset_handler:000000000000145c PARS3
       stm32eforth.s:2576   .text.reset_handler:0000000000001410 $t
       stm32eforth.s:2577   .text.reset_handler:0000000000001414 PARS1
       stm32eforth.s:2585   .text.reset_handler:0000000000001430 $d
       stm32eforth.s:2595   .text.reset_handler:0000000000001458 PARS2
       stm32eforth.s:2586   .text.reset_handler:0000000000001434 $t
       stm32eforth.s:2588   .text.reset_handler:000000000000143c $d
       stm32eforth.s:2589   .text.reset_handler:0000000000001440 $t
       stm32eforth.s:2592   .text.reset_handler:000000000000144c $d
       stm32eforth.s:2593   .text.reset_handler:0000000000001450 $t
       stm32eforth.s:2601   .text.reset_handler:0000000000001468 PARS4
       stm32eforth.s:2612   .text.reset_handler:0000000000001490 $d
       stm32eforth.s:2614   .text.reset_handler:0000000000001498 PARS5
       stm32eforth.s:2613   .text.reset_handler:0000000000001494 $t
       stm32eforth.s:2616   .text.reset_handler:000000000000149c $d
       stm32eforth.s:2623   .text.reset_handler:00000000000014b6 PARS6
       stm32eforth.s:2617   .text.reset_handler:00000000000014a0 $t
       stm32eforth.s:2619   .text.reset_handler:00000000000014a8 $d
       stm32eforth.s:2620   .text.reset_handler:00000000000014ac $t
       stm32eforth.s:2629   .text.reset_handler:00000000000014ca PARS7
       stm32eforth.s:2645   .text.reset_handler:00000000000014f2 $d
       stm32eforth.s:2646   .text.reset_handler:00000000000014f6 _PARSE
       stm32eforth.s:2648   .text.reset_handler:00000000000014fc $t
       stm32eforth.s:2649   .text.reset_handler:00000000000014fc PARSE
       stm32eforth.s:2670   .text.reset_handler:000000000000153c $d
       stm32eforth.s:2671   .text.reset_handler:0000000000001540 _DOTPR
       stm32eforth.s:2674   .text.reset_handler:0000000000001544 DOTPR
       stm32eforth.s:2677   .text.reset_handler:000000000000154c $d
       stm32eforth.s:2678   .text.reset_handler:0000000000001550 $t
       stm32eforth.s:2685   .text.reset_handler:000000000000155c $d
       stm32eforth.s:2686   .text.reset_handler:0000000000001560 _PAREN
       stm32eforth.s:2688   .text.reset_handler:0000000000001562 $t
       stm32eforth.s:2689   .text.reset_handler:0000000000001564 PAREN
ARM GAS  stm32eforth.s 			page 95


       stm32eforth.s:2692   .text.reset_handler:000000000000156c $d
       stm32eforth.s:2693   .text.reset_handler:0000000000001570 $t
       stm32eforth.s:2700   .text.reset_handler:000000000000157c $d
       stm32eforth.s:2701   .text.reset_handler:0000000000001580 _BKSLA
       stm32eforth.s:2703   .text.reset_handler:0000000000001582 $t
       stm32eforth.s:2704   .text.reset_handler:0000000000001584 BKSLA
       stm32eforth.s:2715   .text.reset_handler:000000000000159c $d
       stm32eforth.s:2716   .text.reset_handler:00000000000015a0 _CHAR
       stm32eforth.s:2719   .text.reset_handler:00000000000015a8 CHAR
       stm32eforth.s:2730   .text.reset_handler:00000000000015c0 $d
       stm32eforth.s:2731   .text.reset_handler:00000000000015c4 _WORDD
       stm32eforth.s:2734   .text.reset_handler:00000000000015cc WORDD
       stm32eforth.s:2745   .text.reset_handler:00000000000015e4 $d
       stm32eforth.s:2746   .text.reset_handler:00000000000015e8 _TOKEN
       stm32eforth.s:2748   .text.reset_handler:00000000000015ee $t
       stm32eforth.s:2749   .text.reset_handler:00000000000015f0 TOKEN
       stm32eforth.s:2761   .text.reset_handler:0000000000001600 $d
       stm32eforth.s:2762   .text.reset_handler:0000000000001604 _NAMET
       stm32eforth.s:2764   .text.reset_handler:000000000000160a $t
       stm32eforth.s:2765   .text.reset_handler:000000000000160c NAMET
       stm32eforth.s:2769   .text.reset_handler:0000000000001618 $d
       stm32eforth.s:2770   .text.reset_handler:000000000000161c $t
       stm32eforth.s:2783   .text.reset_handler:000000000000162c $d
       stm32eforth.s:2784   .text.reset_handler:0000000000001630 _SAMEQ
       stm32eforth.s:2786   .text.reset_handler:0000000000001636 $t
       stm32eforth.s:2787   .text.reset_handler:0000000000001638 SAMEQ
       stm32eforth.s:2807   .text.reset_handler:0000000000001680 SAME2
       stm32eforth.s:2791   .text.reset_handler:0000000000001644 SAME1
       stm32eforth.s:2803   .text.reset_handler:0000000000001670 $d
       stm32eforth.s:2804   .text.reset_handler:0000000000001674 $t
       stm32eforth.s:2809   .text.reset_handler:0000000000001684 $d
       stm32eforth.s:2810   .text.reset_handler:0000000000001688 $t
       stm32eforth.s:2811   .text.reset_handler:000000000000168c $d
       stm32eforth.s:2812   .text.reset_handler:0000000000001690 $t
       stm32eforth.s:2824   .text.reset_handler:0000000000001694 FIND
       stm32eforth.s:2833   .text.reset_handler:00000000000016b4 FIND1
       stm32eforth.s:2836   .text.reset_handler:00000000000016bc $d
       stm32eforth.s:2856   .text.reset_handler:0000000000001704 FIND6
       stm32eforth.s:2837   .text.reset_handler:00000000000016c0 $t
       stm32eforth.s:2840   .text.reset_handler:00000000000016cc $d
       stm32eforth.s:2841   .text.reset_handler:00000000000016d0 $t
       stm32eforth.s:2845   .text.reset_handler:00000000000016e0 $d
       stm32eforth.s:2849   .text.reset_handler:00000000000016f0 FIND2
       stm32eforth.s:2846   .text.reset_handler:00000000000016e4 $t
       stm32eforth.s:2854   .text.reset_handler:0000000000001700 FIND3
       stm32eforth.s:2863   .text.reset_handler:000000000000171c FIND4
       stm32eforth.s:2865   .text.reset_handler:0000000000001720 $d
       stm32eforth.s:2870   .text.reset_handler:0000000000001734 FIND5
       stm32eforth.s:2866   .text.reset_handler:0000000000001724 $t
       stm32eforth.s:2884   .text.reset_handler:0000000000001758 $d
       stm32eforth.s:2885   .text.reset_handler:000000000000175c _NAMEQ
       stm32eforth.s:2887   .text.reset_handler:0000000000001762 $t
       stm32eforth.s:2888   .text.reset_handler:0000000000001764 NAMEQ
       stm32eforth.s:2905   .text.reset_handler:0000000000001778 BKSP
       stm32eforth.s:2914   .text.reset_handler:0000000000001798 $d
       stm32eforth.s:2927   .text.reset_handler:00000000000017c0 BACK1
       stm32eforth.s:2915   .text.reset_handler:000000000000179c $t
ARM GAS  stm32eforth.s 			page 96


       stm32eforth.s:2916   .text.reset_handler:00000000000017a0 $d
       stm32eforth.s:2917   .text.reset_handler:00000000000017a4 $t
       stm32eforth.s:2924   .text.reset_handler:00000000000017b8 $d
       stm32eforth.s:2925   .text.reset_handler:00000000000017bc $t
       stm32eforth.s:2937   .text.reset_handler:00000000000017c4 TAP
       stm32eforth.s:2954   .text.reset_handler:00000000000017e0 KTAP
       stm32eforth.s:2955   .text.reset_handler:00000000000017e0 TTAP
       stm32eforth.s:2959   .text.reset_handler:00000000000017ec $d
       stm32eforth.s:2960   .text.reset_handler:00000000000017f0 $t
       stm32eforth.s:2962   .text.reset_handler:00000000000017f8 $d
       stm32eforth.s:2975   .text.reset_handler:0000000000001828 KTAP2
       stm32eforth.s:2963   .text.reset_handler:00000000000017fc $t
       stm32eforth.s:2964   .text.reset_handler:0000000000001800 $d
       stm32eforth.s:2965   .text.reset_handler:0000000000001804 $t
       stm32eforth.s:2967   .text.reset_handler:000000000000180c $d
       stm32eforth.s:2972   .text.reset_handler:0000000000001820 KTAP1
       stm32eforth.s:2968   .text.reset_handler:0000000000001810 $t
       stm32eforth.s:2971   .text.reset_handler:000000000000181c $d
       stm32eforth.s:2973   .text.reset_handler:0000000000001820 $t
       stm32eforth.s:2985   .text.reset_handler:000000000000183c $d
       stm32eforth.s:2986   .text.reset_handler:0000000000001840 _ACCEP
       stm32eforth.s:2989   .text.reset_handler:0000000000001848 ACCEP
       stm32eforth.s:2994   .text.reset_handler:0000000000001858 ACCP1
       stm32eforth.s:2998   .text.reset_handler:0000000000001864 $d
       stm32eforth.s:3014   .text.reset_handler:0000000000001894 ACCP4
       stm32eforth.s:2999   .text.reset_handler:0000000000001868 $t
       stm32eforth.s:3003   .text.reset_handler:0000000000001878 $d
       stm32eforth.s:3004   .text.reset_handler:000000000000187c $t
       stm32eforth.s:3006   .text.reset_handler:0000000000001884 $d
       stm32eforth.s:3009   .text.reset_handler:000000000000188e ACCP2
       stm32eforth.s:3007   .text.reset_handler:0000000000001888 $t
       stm32eforth.s:3012   .text.reset_handler:0000000000001892 ACCP3
       stm32eforth.s:3023   .text.reset_handler:00000000000018a4 $d
       stm32eforth.s:3024   .text.reset_handler:00000000000018a8 _QUERY
       stm32eforth.s:3026   .text.reset_handler:00000000000018ae $t
       stm32eforth.s:3027   .text.reset_handler:00000000000018b0 QUERY
       stm32eforth.s:3031   .text.reset_handler:00000000000018bc $d
       stm32eforth.s:3032   .text.reset_handler:00000000000018c0 $t
       stm32eforth.s:3037   .text.reset_handler:00000000000018d4 $d
       stm32eforth.s:3038   .text.reset_handler:00000000000018d8 $t
       stm32eforth.s:3048   .text.reset_handler:00000000000018e4 $d
       stm32eforth.s:3049   .text.reset_handler:00000000000018e8 _ABORT
       stm32eforth.s:3051   .text.reset_handler:00000000000018ee $t
       stm32eforth.s:3052   .text.reset_handler:00000000000018f0 ABORT
       stm32eforth.s:3058   .text.reset_handler:0000000000001904 $d
       stm32eforth.s:3059   .text.reset_handler:0000000000001908 $t
       stm32eforth.s:3205   .text.reset_handler:0000000000001a78 PRESE
       stm32eforth.s:3220   .text.reset_handler:0000000000001a90 QUIT
       stm32eforth.s:3071   .text.reset_handler:0000000000001918 ABORQ
       stm32eforth.s:3074   .text.reset_handler:0000000000001920 $d
       stm32eforth.s:3080   .text.reset_handler:0000000000001938 ABOR1
       stm32eforth.s:3075   .text.reset_handler:0000000000001924 $t
       stm32eforth.s:3091   .text.reset_handler:0000000000001944 $d
       stm32eforth.s:3092   .text.reset_handler:0000000000001948 _INTER
       stm32eforth.s:3094   .text.reset_handler:0000000000001954 $t
       stm32eforth.s:3100   .text.reset_handler:0000000000001964 $d
       stm32eforth.s:3111   .text.reset_handler:0000000000001994 INTE1
ARM GAS  stm32eforth.s 			page 97


       stm32eforth.s:3101   .text.reset_handler:0000000000001968 $t
       stm32eforth.s:3103   .text.reset_handler:0000000000001970 $d
       stm32eforth.s:3104   .text.reset_handler:0000000000001974 $t
       stm32eforth.s:3106   .text.reset_handler:000000000000197c $d
       stm32eforth.s:3108   .text.reset_handler:000000000000198a $t
       stm32eforth.s:3114   .text.reset_handler:000000000000199c $d
       stm32eforth.s:3116   .text.reset_handler:00000000000019a4 INTE2
       stm32eforth.s:3115   .text.reset_handler:00000000000019a0 $t
       stm32eforth.s:3122   .text.reset_handler:00000000000019a8 $d
       stm32eforth.s:3123   .text.reset_handler:00000000000019ac _LBRAC
       stm32eforth.s:3125   .text.reset_handler:00000000000019ae $t
       stm32eforth.s:3126   .text.reset_handler:00000000000019b0 LBRAC
       stm32eforth.s:3129   .text.reset_handler:00000000000019b8 $d
       stm32eforth.s:3130   .text.reset_handler:00000000000019bc $t
       stm32eforth.s:3137   .text.reset_handler:00000000000019c8 $d
       stm32eforth.s:3138   .text.reset_handler:00000000000019cc _DOTOK
       stm32eforth.s:3140   .text.reset_handler:00000000000019d0 $t
       stm32eforth.s:3141   .text.reset_handler:00000000000019d0 DOTOK
       stm32eforth.s:3144   .text.reset_handler:00000000000019d8 $d
       stm32eforth.s:3145   .text.reset_handler:00000000000019dc $t
       stm32eforth.s:3149   .text.reset_handler:00000000000019ec $d
       stm32eforth.s:3153   .text.reset_handler:00000000000019f8 DOTO1
       stm32eforth.s:3150   .text.reset_handler:00000000000019f0 $t
       stm32eforth.s:3151   .text.reset_handler:00000000000019f4 $d
       stm32eforth.s:3154   .text.reset_handler:00000000000019f8 $t
       stm32eforth.s:3160   .text.reset_handler:0000000000001a00 $d
       stm32eforth.s:3161   .text.reset_handler:0000000000001a04 _QSTAC
       stm32eforth.s:3164   .text.reset_handler:0000000000001a0c QSTAC
       stm32eforth.s:3169   .text.reset_handler:0000000000001a1c $d
       stm32eforth.s:3177   .text.reset_handler:0000000000001a2c $d
       stm32eforth.s:3178   .text.reset_handler:0000000000001a30 _EVAL
       stm32eforth.s:3181   .text.reset_handler:0000000000001a38 EVAL
       stm32eforth.s:3183   .text.reset_handler:0000000000001a3c EVAL1
       stm32eforth.s:3188   .text.reset_handler:0000000000001a4c $d
       stm32eforth.s:3193   .text.reset_handler:0000000000001a60 EVAL2
       stm32eforth.s:3189   .text.reset_handler:0000000000001a50 $t
       stm32eforth.s:3201   .text.reset_handler:0000000000001a6c $d
       stm32eforth.s:3202   .text.reset_handler:0000000000001a70 _PRESE
       stm32eforth.s:3216   .text.reset_handler:0000000000001a86 $d
       stm32eforth.s:3217   .text.reset_handler:0000000000001a8a _QUIT
       stm32eforth.s:3224   .text.reset_handler:0000000000001a9c QUIT1
       stm32eforth.s:3226   .text.reset_handler:0000000000001aa0 QUIT2
       stm32eforth.s:3230   .text.reset_handler:0000000000001aac $d
       stm32eforth.s:3239   .text.reset_handler:0000000000001ab4 _UNLOCK
       stm32eforth.s:3242   .text.reset_handler:0000000000001abc UNLOCK
       stm32eforth.s:3245   .text.reset_handler:0000000000001ac4 $d
       stm32eforth.s:3267   .text.reset_handler:0000000000001ae6 LOCK
       stm32eforth.s:3246   .text.reset_handler:0000000000001ac8 UNLOCK1
       stm32eforth.s:3409   .text.reset_handler:0000000000001c78 flash_regs
       stm32eforth.s:3247   .text.reset_handler:0000000000001ac8 $t
       stm32eforth.s:3274   .text.reset_handler:0000000000001af4 WAIT_BSY
       stm32eforth.s:3276   .text.reset_handler:0000000000001af6 WAIT1
       stm32eforth.s:3286   .text.reset_handler:0000000000001b00 $d
       stm32eforth.s:3287   .text.reset_handler:0000000000001b04 _EPAGE
       stm32eforth.s:3291   .text.reset_handler:0000000000001b10 EPAGE
       stm32eforth.s:3295   .text.reset_handler:0000000000001b1c $d
       stm32eforth.s:3296   .text.reset_handler:0000000000001b20 $t
ARM GAS  stm32eforth.s 			page 98


       stm32eforth.s:3308   .text.reset_handler:0000000000001b46 $d
       stm32eforth.s:3309   .text.reset_handler:0000000000001b4a $t
       stm32eforth.s:3313   .text.reset_handler:0000000000001b58 $d
       stm32eforth.s:3315   .text.reset_handler:0000000000001b66 $t
       stm32eforth.s:3321   .text.reset_handler:0000000000001b70 HWORD_WRITE
       stm32eforth.s:3334   .text.reset_handler:0000000000001b92 $d
       stm32eforth.s:3335   .text.reset_handler:0000000000001b96 $t
       stm32eforth.s:3336   .text.reset_handler:0000000000001b9a $d
       stm32eforth.s:3338   .text.reset_handler:0000000000001ba8 $t
       stm32eforth.s:3347   .text.reset_handler:0000000000001bac $d
       stm32eforth.s:3348   .text.reset_handler:0000000000001bb0 _ISTOR
       stm32eforth.s:3352   .text.reset_handler:0000000000001bb4 ISTOR
       stm32eforth.s:3356   .text.reset_handler:0000000000001bc0 $d
       stm32eforth.s:3357   .text.reset_handler:0000000000001bc4 $t
       stm32eforth.s:3368   .text.reset_handler:0000000000001bf0 $d
       stm32eforth.s:3369   .text.reset_handler:0000000000001bf4 $t
       stm32eforth.s:3375   .text.reset_handler:0000000000001bfc $d
       stm32eforth.s:3376   .text.reset_handler:0000000000001c00 _TURN
       stm32eforth.s:3378   .text.reset_handler:0000000000001c08 $t
       stm32eforth.s:3379   .text.reset_handler:0000000000001c08 TURN
       stm32eforth.s:3381   .text.reset_handler:0000000000001c10 $d
       stm32eforth.s:3382   .text.reset_handler:0000000000001c14 $t
       stm32eforth.s:3383   .text.reset_handler:0000000000001c18 $d
       stm32eforth.s:3384   .text.reset_handler:0000000000001c1c $t
       stm32eforth.s:3385   .text.reset_handler:0000000000001c20 $d
       stm32eforth.s:3386   .text.reset_handler:0000000000001c24 $t
       stm32eforth.s:3388   .text.reset_handler:0000000000001c2c $d
       stm32eforth.s:3389   .text.reset_handler:0000000000001c30 $t
       stm32eforth.s:3390   .text.reset_handler:0000000000001c34 $d
       stm32eforth.s:3391   .text.reset_handler:0000000000001c38 $t
       stm32eforth.s:3395   .text.reset_handler:0000000000001c48 TURN1
       stm32eforth.s:3405   .text.reset_handler:0000000000001c6c $d
       stm32eforth.s:3406   .text.reset_handler:0000000000001c70 $t
       stm32eforth.s:3410   .text.reset_handler:0000000000001c78 $d
       stm32eforth.s:3421   .text.reset_handler:0000000000001c88 _TICK
       stm32eforth.s:3423   .text.reset_handler:0000000000001c8a $t
       stm32eforth.s:3424   .text.reset_handler:0000000000001c8c TICK
       stm32eforth.s:3429   .text.reset_handler:0000000000001c9c $d
       stm32eforth.s:3431   .text.reset_handler:0000000000001ca4 TICK1
       stm32eforth.s:3430   .text.reset_handler:0000000000001ca0 $t
       stm32eforth.s:3436   .text.reset_handler:0000000000001ca8 $d
       stm32eforth.s:3437   .text.reset_handler:0000000000001cac _ALLOT
       stm32eforth.s:3439   .text.reset_handler:0000000000001cb2 $t
       stm32eforth.s:3440   .text.reset_handler:0000000000001cb4 ALLOT
       stm32eforth.s:3449   .text.reset_handler:0000000000001cc4 $d
       stm32eforth.s:3450   .text.reset_handler:0000000000001cc8 _COMMA
       stm32eforth.s:3451   .text.reset_handler:0000000000001cca $t
       stm32eforth.s:3452   .text.reset_handler:0000000000001ccc COMMA
       stm32eforth.s:3465   .text.reset_handler:0000000000001cec $d
       stm32eforth.s:3466   .text.reset_handler:0000000000001cf0 _BCOMP
       stm32eforth.s:3468   .text.reset_handler:0000000000001cfa $t
       stm32eforth.s:3469   .text.reset_handler:0000000000001cfc BCOMP
       stm32eforth.s:3478   .text.reset_handler:0000000000001d0c $d
       stm32eforth.s:3479   .text.reset_handler:0000000000001d10 _COMPI
       stm32eforth.s:3481   .text.reset_handler:0000000000001d18 $t
       stm32eforth.s:3482   .text.reset_handler:0000000000001d18 COMPI
       stm32eforth.s:3897   .text.reset_handler:00000000000020e4 CALLC
ARM GAS  stm32eforth.s 			page 99


       stm32eforth.s:3497   .text.reset_handler:0000000000001d40 $d
       stm32eforth.s:3498   .text.reset_handler:0000000000001d44 _LITER
       stm32eforth.s:3500   .text.reset_handler:0000000000001d4c $t
       stm32eforth.s:3501   .text.reset_handler:0000000000001d4c LITER
       stm32eforth.s:3504   .text.reset_handler:0000000000001d54 $d
       stm32eforth.s:3505   .text.reset_handler:0000000000001d58 $t
       stm32eforth.s:3515   .text.reset_handler:0000000000001d60 STRCQ
       stm32eforth.s:3518   .text.reset_handler:0000000000001d68 $d
       stm32eforth.s:3519   .text.reset_handler:0000000000001d6c $t
       stm32eforth.s:3522   .text.reset_handler:0000000000001d78 $d
       stm32eforth.s:3523   .text.reset_handler:0000000000001d7c $t
       stm32eforth.s:3537   .text.reset_handler:0000000000001d98 $d
       stm32eforth.s:3538   .text.reset_handler:0000000000001d9c _FOR
       stm32eforth.s:3540   .text.reset_handler:0000000000001da0 $t
       stm32eforth.s:3541   .text.reset_handler:0000000000001da0 FOR
       stm32eforth.s:3544   .text.reset_handler:0000000000001da8 $d
       stm32eforth.s:3545   .text.reset_handler:0000000000001dac $t
       stm32eforth.s:3551   .text.reset_handler:0000000000001db4 $d
       stm32eforth.s:3552   .text.reset_handler:0000000000001db8 _BEGIN
       stm32eforth.s:3554   .text.reset_handler:0000000000001dbe $t
       stm32eforth.s:3555   .text.reset_handler:0000000000001dc0 BEGIN
       stm32eforth.s:3563   .text.reset_handler:0000000000001dcc $d
       stm32eforth.s:3564   .text.reset_handler:0000000000001dd0 _NEXT
       stm32eforth.s:3567   .text.reset_handler:0000000000001dd8 NEXT
       stm32eforth.s:3570   .text.reset_handler:0000000000001de0 $d
       stm32eforth.s:3571   .text.reset_handler:0000000000001de4 $t
       stm32eforth.s:3577   .text.reset_handler:0000000000001dec $d
       stm32eforth.s:3578   .text.reset_handler:0000000000001df0 _UNTIL
       stm32eforth.s:3580   .text.reset_handler:0000000000001df6 $t
       stm32eforth.s:3581   .text.reset_handler:0000000000001df8 UNTIL
       stm32eforth.s:3584   .text.reset_handler:0000000000001e00 $d
       stm32eforth.s:3585   .text.reset_handler:0000000000001e04 $t
       stm32eforth.s:3591   .text.reset_handler:0000000000001e0c $d
       stm32eforth.s:3592   .text.reset_handler:0000000000001e10 _AGAIN
       stm32eforth.s:3594   .text.reset_handler:0000000000001e16 $t
       stm32eforth.s:3595   .text.reset_handler:0000000000001e18 AGAIN
       stm32eforth.s:3598   .text.reset_handler:0000000000001e20 $d
       stm32eforth.s:3599   .text.reset_handler:0000000000001e24 $t
       stm32eforth.s:3605   .text.reset_handler:0000000000001e2c $d
       stm32eforth.s:3606   .text.reset_handler:0000000000001e30 _IFF
       stm32eforth.s:3609   .text.reset_handler:0000000000001e34 IFF
       stm32eforth.s:3612   .text.reset_handler:0000000000001e3c $d
       stm32eforth.s:3613   .text.reset_handler:0000000000001e40 $t
       stm32eforth.s:3615   .text.reset_handler:0000000000001e48 $d
       stm32eforth.s:3616   .text.reset_handler:0000000000001e4c $t
       stm32eforth.s:3623   .text.reset_handler:0000000000001e58 $d
       stm32eforth.s:3624   .text.reset_handler:0000000000001e5c _AHEAD
       stm32eforth.s:3626   .text.reset_handler:0000000000001e62 $t
       stm32eforth.s:3627   .text.reset_handler:0000000000001e64 AHEAD
       stm32eforth.s:3630   .text.reset_handler:0000000000001e6c $d
       stm32eforth.s:3631   .text.reset_handler:0000000000001e70 $t
       stm32eforth.s:3633   .text.reset_handler:0000000000001e78 $d
       stm32eforth.s:3634   .text.reset_handler:0000000000001e7c $t
       stm32eforth.s:3641   .text.reset_handler:0000000000001e88 $d
       stm32eforth.s:3642   .text.reset_handler:0000000000001e8c _REPEA
       stm32eforth.s:3645   .text.reset_handler:0000000000001e94 REPEA
       stm32eforth.s:3656   .text.reset_handler:0000000000001eac $d
ARM GAS  stm32eforth.s 			page 100


       stm32eforth.s:3657   .text.reset_handler:0000000000001eb0 _THENN
       stm32eforth.s:3660   .text.reset_handler:0000000000001eb8 THENN
       stm32eforth.s:3670   .text.reset_handler:0000000000001ecc $d
       stm32eforth.s:3671   .text.reset_handler:0000000000001ed0 _AFT
       stm32eforth.s:3673   .text.reset_handler:0000000000001ed4 $t
       stm32eforth.s:3674   .text.reset_handler:0000000000001ed4 AFT
       stm32eforth.s:3685   .text.reset_handler:0000000000001eec $d
       stm32eforth.s:3686   .text.reset_handler:0000000000001ef0 _ELSEE
       stm32eforth.s:3689   .text.reset_handler:0000000000001ef8 ELSEE
       stm32eforth.s:3699   .text.reset_handler:0000000000001f0c $d
       stm32eforth.s:3700   .text.reset_handler:0000000000001f10 _WHILE
       stm32eforth.s:3702   .text.reset_handler:0000000000001f16 $t
       stm32eforth.s:3703   .text.reset_handler:0000000000001f18 WHILE
       stm32eforth.s:3712   .text.reset_handler:0000000000001f28 $d
       stm32eforth.s:3713   .text.reset_handler:0000000000001f2c _ABRTQ
       stm32eforth.s:3716   .text.reset_handler:0000000000001f34 ABRTQ
       stm32eforth.s:3719   .text.reset_handler:0000000000001f3c $d
       stm32eforth.s:3720   .text.reset_handler:0000000000001f40 $t
       stm32eforth.s:3726   .text.reset_handler:0000000000001f48 $d
       stm32eforth.s:3727   .text.reset_handler:0000000000001f4c _STRQ
       stm32eforth.s:3730   .text.reset_handler:0000000000001f50 STRQ
       stm32eforth.s:3733   .text.reset_handler:0000000000001f58 $d
       stm32eforth.s:3734   .text.reset_handler:0000000000001f5c $t
       stm32eforth.s:3740   .text.reset_handler:0000000000001f64 $d
       stm32eforth.s:3741   .text.reset_handler:0000000000001f68 _DOTQ
       stm32eforth.s:3744   .text.reset_handler:0000000000001f6c DOTQ
       stm32eforth.s:3747   .text.reset_handler:0000000000001f74 $d
       stm32eforth.s:3748   .text.reset_handler:0000000000001f78 $t
       stm32eforth.s:3757   .text.reset_handler:0000000000001f80 $d
       stm32eforth.s:3758   .text.reset_handler:0000000000001f84 _UNIQU
       stm32eforth.s:3760   .text.reset_handler:0000000000001f8c $t
       stm32eforth.s:3761   .text.reset_handler:0000000000001f8c UNIQU
       stm32eforth.s:3766   .text.reset_handler:0000000000001f9c $d
       stm32eforth.s:3774   .text.reset_handler:0000000000001fb8 UNIQ1
       stm32eforth.s:3767   .text.reset_handler:0000000000001fa0 $t
       stm32eforth.s:3768   .text.reset_handler:0000000000001fa4 $d
       stm32eforth.s:3770   .text.reset_handler:0000000000001fac $t
       stm32eforth.s:3785   .text.reset_handler:0000000000001fc0 SNAME
       stm32eforth.s:3790   .text.reset_handler:0000000000001fd0 $d
       stm32eforth.s:3804   .text.reset_handler:0000000000002008 SNAM1
       stm32eforth.s:3791   .text.reset_handler:0000000000001fd4 $t
       stm32eforth.s:3806   .text.reset_handler:000000000000200c $d
       stm32eforth.s:3808   .text.reset_handler:0000000000002014 $t
       stm32eforth.s:3813   .text.reset_handler:0000000000002018 $d
       stm32eforth.s:3814   .text.reset_handler:000000000000201c _SCOMP
       stm32eforth.s:3816   .text.reset_handler:0000000000002026 $t
       stm32eforth.s:3817   .text.reset_handler:0000000000002028 SCOMP
       stm32eforth.s:3822   .text.reset_handler:0000000000002038 $d
       stm32eforth.s:3834   .text.reset_handler:0000000000002064 SCOM2
       stm32eforth.s:3823   .text.reset_handler:000000000000203c $t
       stm32eforth.s:3825   .text.reset_handler:0000000000002044 $d
       stm32eforth.s:3826   .text.reset_handler:0000000000002048 $t
       stm32eforth.s:3828   .text.reset_handler:0000000000002050 $d
       stm32eforth.s:3831   .text.reset_handler:000000000000205c SCOM1
       stm32eforth.s:3829   .text.reset_handler:0000000000002054 $t
       stm32eforth.s:3837   .text.reset_handler:000000000000206c $d
       stm32eforth.s:3840   .text.reset_handler:0000000000002078 SCOM3
ARM GAS  stm32eforth.s 			page 101


       stm32eforth.s:3838   .text.reset_handler:0000000000002070 $t
       stm32eforth.s:3846   .text.reset_handler:000000000000207c $d
       stm32eforth.s:3847   .text.reset_handler:0000000000002080 _OVERT
       stm32eforth.s:3849   .text.reset_handler:0000000000002086 $t
       stm32eforth.s:3850   .text.reset_handler:0000000000002088 OVERT
       stm32eforth.s:3861   .text.reset_handler:00000000000020a0 $d
       stm32eforth.s:3862   .text.reset_handler:00000000000020a4 _SEMIS
       stm32eforth.s:3864   .text.reset_handler:00000000000020a6 $t
       stm32eforth.s:3865   .text.reset_handler:00000000000020a8 SEMIS
       stm32eforth.s:3877   .text.reset_handler:00000000000020c4 $d
       stm32eforth.s:3878   .text.reset_handler:00000000000020c8 _RBRAC
       stm32eforth.s:3880   .text.reset_handler:00000000000020ca $t
       stm32eforth.s:3881   .text.reset_handler:00000000000020cc RBRAC
       stm32eforth.s:3884   .text.reset_handler:00000000000020d4 $d
       stm32eforth.s:3885   .text.reset_handler:00000000000020d8 $t
       stm32eforth.s:3918   .text.reset_handler:000000000000211e $d
       stm32eforth.s:3919   .text.reset_handler:0000000000002122 _COLON
       stm32eforth.s:3921   .text.reset_handler:0000000000002124 $t
       stm32eforth.s:3922   .text.reset_handler:0000000000002124 COLON
       stm32eforth.s:3935   .text.reset_handler:0000000000002144 $d
       stm32eforth.s:3936   .text.reset_handler:0000000000002148 _IMMED
       stm32eforth.s:3938   .text.reset_handler:0000000000002152 $t
       stm32eforth.s:3939   .text.reset_handler:0000000000002154 IMMED
       stm32eforth.s:3942   .text.reset_handler:000000000000215c $d
       stm32eforth.s:3943   .text.reset_handler:0000000000002160 $t
       stm32eforth.s:3958   .text.reset_handler:0000000000002180 $d
       stm32eforth.s:3959   .text.reset_handler:0000000000002184 _CONST
       stm32eforth.s:3962   .text.reset_handler:0000000000002190 CONST
       stm32eforth.s:3971   .text.reset_handler:00000000000021b0 $d
       stm32eforth.s:3972   .text.reset_handler:00000000000021b4 $t
       stm32eforth.s:3979   .text.reset_handler:00000000000021c0 $d
       stm32eforth.s:3980   .text.reset_handler:00000000000021c4 _CREAT
       stm32eforth.s:3983   .text.reset_handler:00000000000021cc CREAT
       stm32eforth.s:3992   .text.reset_handler:00000000000021ec $d
       stm32eforth.s:3993   .text.reset_handler:00000000000021f0 $t
       stm32eforth.s:3999   .text.reset_handler:00000000000021f8 $d
       stm32eforth.s:4000   .text.reset_handler:00000000000021fc _VARIA
       stm32eforth.s:4003   .text.reset_handler:0000000000002208 VARIA
       stm32eforth.s:4007   .text.reset_handler:0000000000002214 $d
       stm32eforth.s:4008   .text.reset_handler:0000000000002218 $t
       stm32eforth.s:4021   .text.reset_handler:0000000000002220 DMP
       stm32eforth.s:4025   .text.reset_handler:000000000000222c $d
       stm32eforth.s:4026   .text.reset_handler:0000000000002230 $t
       stm32eforth.s:4037   .text.reset_handler:0000000000002258 PDUM2
       stm32eforth.s:4030   .text.reset_handler:0000000000002240 PDUM1
       stm32eforth.s:4034   .text.reset_handler:000000000000224c $d
       stm32eforth.s:4035   .text.reset_handler:0000000000002250 $t
       stm32eforth.s:4039   .text.reset_handler:000000000000225c $d
       stm32eforth.s:4040   .text.reset_handler:0000000000002260 $t
       stm32eforth.s:4045   .text.reset_handler:0000000000002264 $d
       stm32eforth.s:4046   .text.reset_handler:0000000000002268 _DUMP
       stm32eforth.s:4049   .text.reset_handler:0000000000002270 DUMP
       stm32eforth.s:4056   .text.reset_handler:0000000000002288 $d
       stm32eforth.s:4057   .text.reset_handler:000000000000228c $t
       stm32eforth.s:4071   .text.reset_handler:00000000000022c0 DUMP4
       stm32eforth.s:4060   .text.reset_handler:0000000000002298 DUMP1
       stm32eforth.s:4063   .text.reset_handler:00000000000022a0 $d
ARM GAS  stm32eforth.s 			page 102


       stm32eforth.s:4064   .text.reset_handler:00000000000022a4 $t
       stm32eforth.s:4073   .text.reset_handler:00000000000022c4 $d
       stm32eforth.s:4074   .text.reset_handler:00000000000022c8 DUMP3
       stm32eforth.s:4075   .text.reset_handler:00000000000022c8 $t
       stm32eforth.s:4084   .text.reset_handler:00000000000022dc $d
       stm32eforth.s:4085   .text.reset_handler:00000000000022e0 _DOTS
       stm32eforth.s:4089   .text.reset_handler:00000000000022e4 DOTS
       stm32eforth.s:4099   .text.reset_handler:0000000000002304 DOTS2
       stm32eforth.s:4095   .text.reset_handler:00000000000022f8 DOTS1
       stm32eforth.s:4101   .text.reset_handler:0000000000002308 $d
       stm32eforth.s:4102   .text.reset_handler:000000000000230c $t
       stm32eforth.s:4108   .text.reset_handler:0000000000002314 $d
       stm32eforth.s:4109   .text.reset_handler:0000000000002318 _TNAME
       stm32eforth.s:4111   .text.reset_handler:000000000000231e $t
       stm32eforth.s:4112   .text.reset_handler:0000000000002320 TNAME
       stm32eforth.s:4117   .text.reset_handler:0000000000002330 TNAM1
       stm32eforth.s:4120   .text.reset_handler:0000000000002338 $d
       stm32eforth.s:4130   .text.reset_handler:0000000000002360 TNAM2
       stm32eforth.s:4121   .text.reset_handler:000000000000233c $t
       stm32eforth.s:4126   .text.reset_handler:0000000000002350 $d
       stm32eforth.s:4127   .text.reset_handler:0000000000002354 $t
       stm32eforth.s:4138   .text.reset_handler:000000000000236c $d
       stm32eforth.s:4139   .text.reset_handler:0000000000002370 _DOTID
       stm32eforth.s:4141   .text.reset_handler:0000000000002374 $t
       stm32eforth.s:4142   .text.reset_handler:0000000000002374 DOTID
       stm32eforth.s:4146   .text.reset_handler:0000000000002380 $d
       stm32eforth.s:4153   .text.reset_handler:000000000000239c DOTI1
       stm32eforth.s:4147   .text.reset_handler:0000000000002384 $t
       stm32eforth.s:4149   .text.reset_handler:000000000000238c $d
       stm32eforth.s:4150   .text.reset_handler:0000000000002390 $t
       stm32eforth.s:4155   .text.reset_handler:00000000000023a0 $d
       stm32eforth.s:4157   .text.reset_handler:00000000000023aa $t
       stm32eforth.s:4160   *ABS*:0000000000000000 WANT_SEE
       stm32eforth.s:4244   .text.reset_handler:00000000000023b0 $d
       stm32eforth.s:4246   .text.reset_handler:00000000000023b4 _WORDS
       stm32eforth.s:4248   .text.reset_handler:00000000000023ba $t
       stm32eforth.s:4249   .text.reset_handler:00000000000023bc WORDS
       stm32eforth.s:4254   .text.reset_handler:00000000000023cc WORS1
       stm32eforth.s:4257   .text.reset_handler:00000000000023d4 $d
       stm32eforth.s:4264   .text.reset_handler:00000000000023f0 WORS2
       stm32eforth.s:4258   .text.reset_handler:00000000000023d8 $t
       stm32eforth.s:4277   .text.reset_handler:00000000000023f4 VERSN
       stm32eforth.s:4280   .text.reset_handler:00000000000023fc $d
       stm32eforth.s:4281   .text.reset_handler:0000000000002400 $t
       stm32eforth.s:4286   .text.reset_handler:0000000000002404 $d
       stm32eforth.s:4287   .text.reset_handler:0000000000002408 _HI
       stm32eforth.s:4294   .text.reset_handler:0000000000002418 $d
       stm32eforth.s:4296   .text.reset_handler:0000000000002430 $t
       stm32eforth.s:4305   .text.reset_handler:0000000000002450 $d
       stm32eforth.s:4306   .text.reset_handler:0000000000002454 $t
       stm32eforth.s:4318   .text.reset_handler:0000000000002474 $d
       stm32eforth.s:4324   .text.reset_handler:0000000000002480 $t
       stm32eforth.s:4331   .text.reset_handler:000000000000249a COLD1
       stm32eforth.s:4333   .text.reset_handler:000000000000249e $d
       stm32eforth.s:4334   .text.reset_handler:00000000000024a2 $t
       stm32eforth.s:4336   .text.reset_handler:00000000000024aa $d
       stm32eforth.s:4337   .text.reset_handler:00000000000024ae $t
ARM GAS  stm32eforth.s 			page 103


       stm32eforth.s:4338   .text.reset_handler:00000000000024b2 $d
       stm32eforth.s:4339   .text.reset_handler:00000000000024b6 $t
       stm32eforth.s:4340   .text.reset_handler:00000000000024ba $d
       stm32eforth.s:4341   .text.reset_handler:00000000000024be $t
       stm32eforth.s:4352   .text.reset_handler:00000000000024ea COLD2
       stm32eforth.s:4354   .text.reset_handler:00000000000024ea $d
       stm32eforth.s:4356   .text.reset_handler:00000000000024ee $t
       stm32eforth.s:264    .text.default_handler:0000000000000033 $d
       stm32eforth.s:264    .text.default_handler:0000000000000034 $t
       stm32eforth.s:503    .text.reset_handler:0000000000000453 $d
       stm32eforth.s:503    .text.reset_handler:0000000000000454 $t
       stm32eforth.s:538    .text.reset_handler:00000000000004a5 $d
       stm32eforth.s:538    .text.reset_handler:00000000000004a6 $t
       stm32eforth.s:558    .text.reset_handler:00000000000004cd $d
       stm32eforth.s:558    .text.reset_handler:00000000000004ce $t
       stm32eforth.s:583    .text.reset_handler:0000000000000501 $d
       stm32eforth.s:583    .text.reset_handler:0000000000000502 $t
       stm32eforth.s:699    .text.reset_handler:0000000000000597 $d
       stm32eforth.s:699    .text.reset_handler:0000000000000598 $t
       stm32eforth.s:733    .text.reset_handler:00000000000005c3 $d
       stm32eforth.s:733    .text.reset_handler:00000000000005c4 $t
       stm32eforth.s:746    .text.reset_handler:00000000000005d7 $d
       stm32eforth.s:746    .text.reset_handler:00000000000005d8 $t
       stm32eforth.s:757    .text.reset_handler:00000000000005e3 $d
       stm32eforth.s:757    .text.reset_handler:00000000000005e4 $t
       stm32eforth.s:769    .text.reset_handler:00000000000005f5 $d
       stm32eforth.s:769    .text.reset_handler:00000000000005f6 $t
       stm32eforth.s:781    .text.reset_handler:0000000000000607 $d
       stm32eforth.s:781    .text.reset_handler:0000000000000608 $t
       stm32eforth.s:805    .text.reset_handler:000000000000062d $d
       stm32eforth.s:805    .text.reset_handler:000000000000062e $t
       stm32eforth.s:827    .text.reset_handler:000000000000064f $d
       stm32eforth.s:827    .text.reset_handler:0000000000000650 $t
       stm32eforth.s:840    .text.reset_handler:0000000000000661 $d
       stm32eforth.s:840    .text.reset_handler:0000000000000662 $t
       stm32eforth.s:852    .text.reset_handler:0000000000000673 $d
       stm32eforth.s:852    .text.reset_handler:0000000000000674 $t
       stm32eforth.s:876    .text.reset_handler:0000000000000699 $d
       stm32eforth.s:876    .text.reset_handler:000000000000069a $t
       stm32eforth.s:915    .text.reset_handler:00000000000006df $d
       stm32eforth.s:915    .text.reset_handler:00000000000006e0 $t
       stm32eforth.s:927    .text.reset_handler:00000000000006f5 $d
       stm32eforth.s:927    .text.reset_handler:00000000000006f6 $t
       stm32eforth.s:989    .text.reset_handler:000000000000074f $d
       stm32eforth.s:989    .text.reset_handler:0000000000000750 $t
       stm32eforth.s:1003   .text.reset_handler:0000000000000763 $d
       stm32eforth.s:1003   .text.reset_handler:0000000000000764 $t
       stm32eforth.s:1014   .text.reset_handler:0000000000000771 $d
       stm32eforth.s:1014   .text.reset_handler:0000000000000772 $t
       stm32eforth.s:1025   .text.reset_handler:0000000000000781 $d
       stm32eforth.s:1025   .text.reset_handler:0000000000000782 $t
       stm32eforth.s:1036   .text.reset_handler:0000000000000791 $d
       stm32eforth.s:1036   .text.reset_handler:0000000000000792 $t
       stm32eforth.s:1069   .text.reset_handler:00000000000007c1 $d
       stm32eforth.s:1069   .text.reset_handler:00000000000007c2 $t
       stm32eforth.s:1103   .text.reset_handler:00000000000007f5 $d
       stm32eforth.s:1103   .text.reset_handler:00000000000007f6 $t
ARM GAS  stm32eforth.s 			page 104


       stm32eforth.s:1114   .text.reset_handler:0000000000000805 $d
       stm32eforth.s:1114   .text.reset_handler:0000000000000806 $t
       stm32eforth.s:1125   .text.reset_handler:0000000000000817 $d
       stm32eforth.s:1125   .text.reset_handler:0000000000000818 $t
       stm32eforth.s:1164   .text.reset_handler:0000000000000853 $d
       stm32eforth.s:1164   .text.reset_handler:0000000000000854 $t
       stm32eforth.s:1177   .text.reset_handler:0000000000000867 $d
       stm32eforth.s:1177   .text.reset_handler:0000000000000868 $t
       stm32eforth.s:1204   .text.reset_handler:0000000000000895 $d
       stm32eforth.s:1204   .text.reset_handler:0000000000000896 $t
       stm32eforth.s:1228   .text.reset_handler:00000000000008b9 $d
       stm32eforth.s:1228   .text.reset_handler:00000000000008ba $t
       stm32eforth.s:1257   .text.reset_handler:00000000000008e7 $d
       stm32eforth.s:1257   .text.reset_handler:00000000000008e8 $t
       stm32eforth.s:1330   .text.reset_handler:0000000000000957 $d
       stm32eforth.s:1330   .text.reset_handler:0000000000000958 $t
       stm32eforth.s:1345   .text.reset_handler:000000000000096f $d
       stm32eforth.s:1345   .text.reset_handler:0000000000000970 $t
       stm32eforth.s:1360   .text.reset_handler:000000000000098b $d
       stm32eforth.s:1360   .text.reset_handler:000000000000098c $t
       stm32eforth.s:1431   .text.reset_handler:00000000000009e9 $d
       stm32eforth.s:1431   .text.reset_handler:00000000000009ea $t
       stm32eforth.s:1465   .text.reset_handler:0000000000000a27 $d
       stm32eforth.s:1465   .text.reset_handler:0000000000000a28 $t
       stm32eforth.s:1489   .text.reset_handler:0000000000000a45 $d
       stm32eforth.s:1489   .text.reset_handler:0000000000000a46 $t
       stm32eforth.s:1513   .text.reset_handler:0000000000000a6f $d
       stm32eforth.s:1513   .text.reset_handler:0000000000000a70 $t
       stm32eforth.s:1562   .text.reset_handler:0000000000000ac1 $d
       stm32eforth.s:1562   .text.reset_handler:0000000000000ac2 $t
       stm32eforth.s:1573   .text.reset_handler:0000000000000ad7 $d
       stm32eforth.s:1573   .text.reset_handler:0000000000000ad8 $t
       stm32eforth.s:1585   .text.reset_handler:0000000000000aeb $d
       stm32eforth.s:1585   .text.reset_handler:0000000000000aec $t
       stm32eforth.s:1600   .text.reset_handler:0000000000000b01 $d
       stm32eforth.s:1600   .text.reset_handler:0000000000000b02 $t
       stm32eforth.s:1619   .text.reset_handler:0000000000000b2f $d
       stm32eforth.s:1619   .text.reset_handler:0000000000000b30 $t
       stm32eforth.s:1689   .text.reset_handler:0000000000000bdd $d
       stm32eforth.s:1689   .text.reset_handler:0000000000000bde $t
       stm32eforth.s:1746   .text.reset_handler:0000000000000c57 $d
       stm32eforth.s:1746   .text.reset_handler:0000000000000c58 $t
       stm32eforth.s:1818   .text.reset_handler:0000000000000cff $d
       stm32eforth.s:1818   .text.reset_handler:0000000000000d00 $t
       stm32eforth.s:1837   .text.reset_handler:0000000000000d25 $d
       stm32eforth.s:1837   .text.reset_handler:0000000000000d26 $t
       stm32eforth.s:1875   .text.reset_handler:0000000000000d6d $d
       stm32eforth.s:1875   .text.reset_handler:0000000000000d6e $t
       stm32eforth.s:1914   .text.reset_handler:0000000000000db7 $d
       stm32eforth.s:1914   .text.reset_handler:0000000000000db8 $t
       stm32eforth.s:1938   .text.reset_handler:0000000000000de7 $d
       stm32eforth.s:1938   .text.reset_handler:0000000000000de8 $t
       stm32eforth.s:1961   .text.reset_handler:0000000000000e13 $d
       stm32eforth.s:1961   .text.reset_handler:0000000000000e14 $t
       stm32eforth.s:2030   .text.reset_handler:0000000000000ecf $d
       stm32eforth.s:2030   .text.reset_handler:0000000000000ed0 $t
       stm32eforth.s:2044   .text.reset_handler:0000000000000eed $d
ARM GAS  stm32eforth.s 			page 105


       stm32eforth.s:2044   .text.reset_handler:0000000000000eee $t
       stm32eforth.s:2077   .text.reset_handler:0000000000000f3b $d
       stm32eforth.s:2077   .text.reset_handler:0000000000000f3c $t
       stm32eforth.s:2095   .text.reset_handler:0000000000000f5f $d
       stm32eforth.s:2095   .text.reset_handler:0000000000000f60 $t
       stm32eforth.s:2113   .text.reset_handler:0000000000000f87 $d
       stm32eforth.s:2113   .text.reset_handler:0000000000000f88 $t
       stm32eforth.s:2182   .text.reset_handler:000000000000101f $d
       stm32eforth.s:2182   .text.reset_handler:0000000000001020 $t
       stm32eforth.s:2344   .text.reset_handler:0000000000001213 $d
       stm32eforth.s:2344   .text.reset_handler:0000000000001214 $t
       stm32eforth.s:2365   .text.reset_handler:0000000000001245 $d
       stm32eforth.s:2365   .text.reset_handler:0000000000001246 $t
       stm32eforth.s:2386   .text.reset_handler:0000000000001275 $d
       stm32eforth.s:2386   .text.reset_handler:0000000000001276 $t
       stm32eforth.s:2465   .text.reset_handler:00000000000012ff $d
       stm32eforth.s:2465   .text.reset_handler:0000000000001300 $t
       stm32eforth.s:2503   .text.reset_handler:000000000000135f $d
       stm32eforth.s:2503   .text.reset_handler:0000000000001360 $t
       stm32eforth.s:2673   .text.reset_handler:0000000000001543 $d
       stm32eforth.s:2673   .text.reset_handler:0000000000001544 $t
       stm32eforth.s:2718   .text.reset_handler:00000000000015a5 $d
       stm32eforth.s:2718   .text.reset_handler:00000000000015a6 $t
       stm32eforth.s:2733   .text.reset_handler:00000000000015c9 $d
       stm32eforth.s:2733   .text.reset_handler:00000000000015ca $t
       stm32eforth.s:2988   .text.reset_handler:0000000000001847 $d
       stm32eforth.s:2988   .text.reset_handler:0000000000001848 $t
       stm32eforth.s:3163   .text.reset_handler:0000000000001a0b $d
       stm32eforth.s:3163   .text.reset_handler:0000000000001a0c $t
       stm32eforth.s:3171   .text.reset_handler:0000000000001a27 $d
       stm32eforth.s:3171   .text.reset_handler:0000000000001a28 $t
       stm32eforth.s:3180   .text.reset_handler:0000000000001a35 $d
       stm32eforth.s:3180   .text.reset_handler:0000000000001a36 $t
       stm32eforth.s:3204   .text.reset_handler:0000000000001a77 $d
       stm32eforth.s:3204   .text.reset_handler:0000000000001a78 $t
       stm32eforth.s:3219   .text.reset_handler:0000000000001a8f $d
       stm32eforth.s:3219   .text.reset_handler:0000000000001a90 $t
       stm32eforth.s:3241   .text.reset_handler:0000000000001abb $d
       stm32eforth.s:3241   .text.reset_handler:0000000000001abc $t
       stm32eforth.s:3289   .text.reset_handler:0000000000001b0f $d
       stm32eforth.s:3289   .text.reset_handler:0000000000001b10 $t
       stm32eforth.s:3350   .text.reset_handler:0000000000001bb3 $d
       stm32eforth.s:3350   .text.reset_handler:0000000000001bb4 $t
       stm32eforth.s:3566   .text.reset_handler:0000000000001dd5 $d
       stm32eforth.s:3566   .text.reset_handler:0000000000001dd6 $t
       stm32eforth.s:3608   .text.reset_handler:0000000000001e33 $d
       stm32eforth.s:3608   .text.reset_handler:0000000000001e34 $t
       stm32eforth.s:3644   .text.reset_handler:0000000000001e93 $d
       stm32eforth.s:3644   .text.reset_handler:0000000000001e94 $t
       stm32eforth.s:3659   .text.reset_handler:0000000000001eb5 $d
       stm32eforth.s:3659   .text.reset_handler:0000000000001eb6 $t
       stm32eforth.s:3688   .text.reset_handler:0000000000001ef5 $d
       stm32eforth.s:3688   .text.reset_handler:0000000000001ef6 $t
       stm32eforth.s:3715   .text.reset_handler:0000000000001f33 $d
       stm32eforth.s:3715   .text.reset_handler:0000000000001f34 $t
       stm32eforth.s:3729   .text.reset_handler:0000000000001f4f $d
       stm32eforth.s:3729   .text.reset_handler:0000000000001f50 $t
ARM GAS  stm32eforth.s 			page 106


       stm32eforth.s:3743   .text.reset_handler:0000000000001f6b $d
       stm32eforth.s:3743   .text.reset_handler:0000000000001f6c $t
       stm32eforth.s:3961   .text.reset_handler:000000000000218d $d
       stm32eforth.s:3961   .text.reset_handler:000000000000218e $t
       stm32eforth.s:3982   .text.reset_handler:00000000000021cb $d
       stm32eforth.s:3982   .text.reset_handler:00000000000021cc $t
       stm32eforth.s:4002   .text.reset_handler:0000000000002205 $d
       stm32eforth.s:4002   .text.reset_handler:0000000000002206 $t
       stm32eforth.s:4048   .text.reset_handler:000000000000226d $d
       stm32eforth.s:4048   .text.reset_handler:000000000000226e $t
       stm32eforth.s:4088   .text.reset_handler:00000000000022e3 $d
       stm32eforth.s:4088   .text.reset_handler:00000000000022e4 $t
       stm32eforth.s:4289   .text.reset_handler:000000000000240b $d
       stm32eforth.s:4289   .text.reset_handler:000000000000240c $t

UNDEFINED SYMBOLS
_mstack
