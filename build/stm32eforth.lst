ARM GAS  stm32eforth.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  stm32eforth.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.p2align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.p2aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m3
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
ARM GAS  stm32eforth.s 			page 3


  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
ARM GAS  stm32eforth.s 			page 4


  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
  81              	
  82              	/* blue pill specific constants */ 
  83              	  .equ LED_GPIO, GPIOC_BASE_ADR
  84              	  .equ LED_PIN, 13
  85              	  .equ UART, USART1_BASE_ADR 
  86              	
  87              	/* eForth specific constants */
  88              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  89              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  90              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  91              	.equ UPP ,	0x20000000	/*start of user area (UP0) */
  92              	.equ DTOP ,	0x20000100	/*start of usable RAM area (HERE) */
  93              	.equ DEND , 0x20004E00  /*usable RAM end */
  94              	 .equ RAMOFFSET ,	0x20000000	// remap
  95              	 .equ RAMEND, 0x20005000 // 20Ko
  96              	 .equ FLASHOFFSET ,	0x08000c00	// remap
  97              	//.equ RAMOFFSET  ,	0x00000000	/* absolute */
  98              	//.equ MAPOFFSET  ,	0x00000000	/* absolute */
  99              	  .equ MAPOFFSET , (RAMOFFSET-FLASHOFFSET)
 100              	
 101              	/*************************************
 102              	   system variables offset from UPP
 103              	*************************************/
 104              	  .equ SEED_OFS, 4    // prng seed 
 105              	  .equ TICKS_OFS, SEED_OFS+4  // millseconds counter
ARM GAS  stm32eforth.s 			page 5


 106              	  .equ TIMER_OFS, TICKS_OFS+4  // count down timer
 107              	  .equ TORAM_OFS, TIMER_OFS+4  // compile to RAM 
 108              	  .equ IMG_SIGN_OFS, TORAM_OFS+4  // image signature  
 109              	  .equ BOOT_OFS, IMG_SIGN_OFS+4  // boot program address
 110              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
 111              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
 112              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
 113              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
 114              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
 115              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
 116              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
 117              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
 118              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
 119              	  .equ FORTH_CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
 120              	  .equ USER_CTOP_OFS, FORTH_CTOP_OFS+4  // ram free dictionary address
 121              	  .equ LASTN_OFS, USER_CTOP_OFS+4     // last word in dictionary link nfa 
 122              	  .equ VARS_END_OFS, LASTN_OFS+4 // end of system variables  
 123              	
 124              	/***********************************************
 125              	* MACROS
 126              	*	Assemble inline direct threaded code ending.
 127              	***********************************************/
 128              	 	.macro	_NEXT /*end low level word */
 129              		BX	LR
 130              		.endm
 131              	
 132              	 	.macro	_NEST /*start high level word */
 133              		STMFD	R2!,{LR}
 134              		.endm
 135              	
 136              	 	.macro	_UNNEST	/*end high level word */
 137              		LDMFD	R2!,{PC}
 138              		.endm
 139              	
 140              	 	.macro	_DOLIT /*long literals */
 141              		BL	DOLIT
 142              		.endm
 143              	
 144              	 	.macro	_PUSH	/*push R5 on data stack*/
 145              		STR	R5,[R1,#-4]!
 146              		.endm
 147              	
 148              	 	.macro	_POP /*pop data stack to R5 */
 149              		LDR	R5,[R1],#4
 150              		.endm
 151              	
 152              	/*************************************
 153              	*   interrupt service vectors table 
 154              	**************************************/
 155              	   .section  .isr_vector,"a",%progbits
 156              	  .type  isr_vectors, %object
 157              	
 158              	isr_vectors:
 159 0000 00000000 	  .word   _mstack          /* main return stack address */
 160 0004 00000000 	  .word   reset_handler    /* startup address */
 161              	/* core interrupts || exceptions */
 162 0008 00000000 	  .word   default_handler  /*  NMI */
ARM GAS  stm32eforth.s 			page 6


 163 000c 00000000 	  .word   default_handler  /*  HardFault */
 164 0010 00000000 	  .word   default_handler  /*  Memory Management */
 165 0014 00000000 	  .word   default_handler  /* Bus fault */
 166 0018 00000000 	  .word   default_handler  /* Usage fault */
 167 001c 00000000 	  .word   0
 168 0020 00000000 	  .word   0
 169 0024 00000000 	  .word   0
 170 0028 00000000 	  .word   0
 171 002c 00000000 	  .word   default_handler  /* SWI instruction */
 172 0030 00000000 	  .word   default_handler  /* Debug monitor */
 173 0034 00000000 	  .word   0
 174 0038 00000000 	  .word   default_handler  /* PendSV */
 175 003c 00000000 	  .word   systick_handler  /* Systick */
 176              	  
 177              	  /* External Interrupts */
 178 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 179 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 180 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 181 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 182 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 183 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 184 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 185 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 186 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 187 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 188 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 189 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 190 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 191 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 192 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 193 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 194 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 195 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 196 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 197 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 198 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 199 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 200 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 201 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 202 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 203 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 204 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 205 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 206 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 207 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 208 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 209 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 210 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 211 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 212 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 213 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 214 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 215 00d4 00000000 	  .word      default_handler /* IRQ37, USART1 */                   
 216 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 217 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 218 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 219 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
ARM GAS  stm32eforth.s 			page 7


 220 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 221 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 222 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 223 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 224 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 225 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 226 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 227 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 228 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 229 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 230 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 231 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 232 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 233 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 234 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 235 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 236 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 237 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 238              	
 239              	  .size  isr_vectors, .-isr_vectors
 240              	
 241              	/*****************************************************
 242              	* default isr handler called on unexpected interrupt
 243              	*****************************************************/
 244              	    .section  .text.default_handler,"ax",%progbits
 245              	
 246              	  .type default_handler, %function
 247              	  .p2align 2 
 248              	  .global default_handler
 249              	default_handler:
 250 0000 DFF81870 		ldr r7,exception_msg 
 251 0004 17F8010B 		ldrb r0,[r7],#1 
 252 0008 41F8045D 	1:	_PUSH 
 253 000c 17F8015B 		ldrb r5,[r7],#1
 254 0010 00F0ACFA 		bl EMIT 
 255 0014 0138     		subs r0,r0,#1 
 256 0016 F7D1     		bne 1b 	
 257 0018 FFF7FEBF 		b reset_handler   
 258              	  .size  default_handler, .-default_handler
 259              	exception_msg:
 260 001c 20000000 		.word .+4 
 261 0020 12       		.byte 18
 262 0021 0A0D6578 		.ascii "\n\rexeption reboot!"
 262      65707469 
 262      6F6E2072 
 262      65626F6F 
 262      7421
 263 0033 00       		.p2align 2
 264              	
 265              	/*********************************
 266              		system milliseconds counter
 267              	*********************************/	
 268              	  .type systick_handler, %function
 269              	  .p2align 2 
 270              	  .global systick_handler
 271              	systick_handler:
 272 0034 4FF00003 	  mov r3,#UPP&0xffff
ARM GAS  stm32eforth.s 			page 8


 273 0038 C2F20003 	  movt r3,#UPP>>16  	
 274 003c 9868     	  ldr r0,[r3,#TICKS_OFS]  
 275 003e 00F10100 	  add r0,#1
 276 0042 9860     	  str r0,[r3,#TICKS_OFS]
 277 0044 D868     	  ldr r0,[r3,#TIMER_OFS]
 278 0046 10B1     	  cbz r0, systick_exit
 279 0048 A0F10100 	  sub r0,#1
 280 004c D860     	  str r0,[r3,#TIMER_OFS]
 281              	systick_exit:
 282 004e 7047     	  bx lr
 283              	
 284              	
 285              	/**************************************
 286              	  reset_handler execute at MCU reset
 287              	***************************************/
 288              	    .section  .text.reset_handler
 289              	  .type  reset_handler, %function
 290              	  .p2align 2 
 291              	  .global reset_handler
 292              	reset_handler:
 293 0000 00F070F8 		bl	remap 
 294 0004 00F006F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 295              	//	bl	UNLOCK			/* unlock flash memory */
 296 0008 0148     		ldr r0,forth_entry
 297 000a 40F00100 		orr r0,#1
 298 000e 0047     		bx r0 
 299              	forth_entry:
 300 0010 E01B0018 		.word COLD+MAPOFFSET 
 301              	
 302              	  .type init_devices, %function
 303              	  .p2align 2 
 304              	init_devices:
 305              	/* init clock to HSE 72 Mhz */
 306              	/* set 2 wait states in FLASH_ACR_LATENCY */
 307 0014 4FF40050 		mov r0,#FLASH_BASE_ADR&0xffff
 308 0018 C4F20200 		movt r0,#FLASH_BASE_ADR>>16 
 309 001c 4FF01202 	  mov r2,#0x12
 310 0020 0260     	  str r2,[r0,#FLASH_ACR]
 311              	/* configure clock for HSE, 8 Mhz crystal */
 312              	/* enable HSE in RCC_CR */
 313 0022 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 314 0026 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 315 002a 0168     	  ldr r1,[r0,#RCC_CR]
 316 002c 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 317 0030 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 318              	/* wait HSERDY loop */
 319              	wait_hserdy:
 320 0032 0168     	  ldr r1,[r0,#RCC_CR]
 321 0034 11F4003F 	  tst r1,#(1<<17)
 322 0038 FBD0     	  beq wait_hserdy
 323              	
 324              	/************************************************* 
 325              	   configure PLL mul factor and source 
 326              	   SYSCLOCK=72 Mhz
 327              	   select HSE as  PLL source clock
 328              	   multiply frequency by 9 
 329              	   APB1 clock is limited to 36 Mhz so divide by 2 
ARM GAS  stm32eforth.s 			page 9


 330              	****************************************************/
 331 003a 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 332 003e C0F21D01 	  movt r1,#(7<<2)|1
 333 0042 4160     	  str r1,[r0,#RCC_CFGR]
 334              	  /* enable PLL */
 335 0044 0168     	  ldr r1,[r0,#RCC_CR]
 336 0046 41F08071 	  orr r1, #1<<24 
 337 004a 0160     	  str r1,[r0,#RCC_CR]
 338              	/* wait for PLLRDY */
 339              	wait_pllrdy:
 340 004c 0168     	  ldr r1,[r0,#RCC_CR]
 341 004e 11F0007F 	  tst r1,#(1<<25)
 342 0052 FBD0     	  beq wait_pllrdy 
 343              	/* select PLL as sysclock */
 344 0054 4168     	  ldr r1,[r0,#RCC_CFGR]
 345 0056 4FF6FC72 	  mov r2,#0xfffc
 346 005a CFF6FF72 	  movt r2,#0xffff
 347 005e 01EA0201 	  and r1,r1,r2 
 348 0062 4FF00202 	  mov r2,#2
 349 0066 41EA0201 	  orr r1,r1,r2
 350 006a 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 351              	/* wait for SWS==2 */
 352              	wait_sws:
 353 006c 4168     	  ldr r1,[r0,#RCC_CFGR]
 354 006e 11F0080F 	  tst r1,#(2<<2)
 355 0072 FBD0     	  beq wait_sws
 356              	/* now sysclock is 72 Mhz */
 357              	
 358              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 359 0074 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 360 0078 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 361 007c 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 362 0080 8161     	  str	r1, [r0, #RCC_APB2ENR]
 363              	
 364              	/* configure GPIOC:13 as output for user LED */
 365 0082 4FF48050 	  mov r0,#GPIOC_BASE_ADR&0xffff
 366 0086 C4F20100 	  movt r0,#GPIOC_BASE_ADR>>16
 367 008a 4168     	  ldr r1,[r0,#GPIO_CRH]
 368 008c 6FF47002 	  mvn r2,#(15<<20)
 369 0090 01EA0201 	  and r1,r1,r2
 370 0094 4FF4C002 	  mov r2,#(6<<20)
 371 0098 41EA0201 	  orr r1,r1,r2
 372 009c 4160     	  str r1,[r0,#GPIO_CRH]
 373              	
 374              	/* configure USART1 */
 375              	/* set GPIOA PIN 9, uart TX  */
 376 009e 4FF40060 	  mov r0,#GPIOA_BASE_ADR&0XFFFF
 377 00a2 C4F20100 	  movt r0,#GPIOA_BASE_ADR>>16	
 378 00a6 4168     	  ldr r1,[r0,#GPIO_CRH]
 379 00a8 6FF0F002 	  mvn r2,#(15<<4)
 380 00ac 01EA0201 	  and r1,r1,r2
 381 00b0 4FF0A002 	  mov r2,#(0xA<<4)
 382 00b4 41EA0201 	  orr r1,r1,r2 
 383 00b8 4160     	  str r1,[r0,#GPIO_CRH]
 384              	
 385 00ba 4FF46050 	  mov r0,#UART&0xFFFF
 386 00be C4F20100 	  movt r0,#UART>>16	
ARM GAS  stm32eforth.s 			page 10


 387              	/* BAUD rate */
 388 00c2 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 389 00c6 8160     	  str r1,[r0,#USART_BRR]
 390 00c8 42F20C01 	  mov r1,#(3<<2)+(1<<13)
 391 00cc C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 392              	/* configure systicks for 1msec ticks */
 393 00ce 4EF21000 	  mov r0,#STK_BASE_ADR&0xFFFF
 394 00d2 CEF20000 	  movt r0,#STK_BASE_ADR>>16	
 395 00d6 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 396 00da 4160     	  str r1,[r0,#STK_LOAD]
 397 00dc 4FF00301 	  mov r1,#3
 398 00e0 0160     	  str r1,[r0,STK_CTL]
 399 00e2 7047     	  _NEXT  
 400              	
 401              	/* copy system to RAM */ 
 402              		.type remap, %function 
 403              	
 404              	remap:
 405 00e4 DFF83400 		ldr r0,remap_dest  
 406 00e8 0B49     		ldr r1,remap_src 
 407 00ea 42F24842 		mov r2,#CTOP-UZERO 
 408 00ee 02F10302 		add r2,r2,#3
 409 00f2 22F00302 		and r2,r2,#~3 
 410 00f6 51F8043B 	1:	ldr r3,[r1],#4 
 411 00fa 40F8043B 		str r3,[r0],#4 
 412 00fe 043A     		subs R2,#4 
 413 0100 F9D1     		bne 1b
 414              	// zero end of RAM 
 415 0102 4FF4A042 		mov r2,#0x5000
 416 0106 C2F20002 		movt r2,#0x2000
 417 010a 83EA0303 		eor r3,r3,r3 
 418 010e 40F8043B 	2:  str r3,[r0],#4
 419 0112 9042     		cmp r0,r2 
 420 0114 FBDB     		blt 2b 
 421 0116 7047     		_NEXT 
 422              	remap_src:
 423 0118 00040000 		.word UZERO 
 424              	remap_dest:
 425 011c 00000020 		.word RAMOFFSET 
 426              	
 427              	/********************
 428              	* Version control
 429              	*******************/
 430              	.equ VER ,	0x01	/*major release version */
 431              	.equ EXT ,	0x00	/*minor extension */
 432              	
 433              	/* Constants */
 434              	
 435              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 436              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 437              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 438              	
 439              	.equ CELLL ,	4	/*size of a cell */
 440              	.equ BASEE ,	10	/*default radix */
 441              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 442              	
 443              	.equ BKSPP ,	8	/*backspace */
ARM GAS  stm32eforth.s 			page 11


 444              	.equ LF ,	10	  /*line feed */
 445              	.equ CRR ,	13	/*carriage return */
 446              	.equ ERR ,	27	/*error escape */
 447              	.equ TIC ,	39	/*tick */
 448              	
 449              	/********************************************************
 450              	* RAM memory mapping
 451              	* 	0x20000000	RAM base address
 452              	*	0x20000000  system variables	
 453              	* 	0x20000100	Forth dictionary
 454              	* 	0x2000????	top of dictionary, HERE
 455              	* 	0x2000????	WORD buffer, HERE+16
 456              	*   0x20004E00  end of user space
 457              	* 	0x20004E80	top of data stack  R2
 458              	* 	0x20004E80	TIB terminal input buffer
 459              	* 	0x20004F80	top of return stack  R1
 460              	* 	0x20005000	top of hardware stack for interrupts R14
 461              	********************************************************/
 462              	
 463              	
 464              	/******************************************************
 465              	*  COLD start moves the following to USER variables.
 466              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 467              	******************************************************/
 468 0120 AFF30080 		.p2align 10
 468      AFF30080 
 468      AFF30080 
 468      AFF30080 
 468      AFF30080 
 469              	
 470              	UZERO:
 471 0400 00000000 		.word 0  			/*Reserved */
 472 0404 55AA0000 		.word 0xaa55 /* SEED  */ 
 473 0408 00000000 		.word 0      /* MSEC */
 474 040c 00000000 	    .word 0     /* TIMER */
 475 0410 FFFFFFFF 		.word -1    /* >RAM */ 
 476 0414 494D4147 		.ascii "IMAG" /* signature */ 
 477 0418 6C1B0018 		.word HI+MAPOFFSET  /*'BOOT */
 478 041c 0A000000 		.word BASEE 	/*BASE */
 479 0420 00000000 		.word 0			/*tmp */
 480 0424 00000000 		.word 0			/*SPAN */
 481 0428 00000000 		.word 0			/*>IN */
 482 042c 00000000 		.word 0			/*#TIB */
 483 0430 804E0020 		.word TIBB	/*TIB */
 484 0434 300E0018 		.word INTER+MAPOFFSET	/*'EVAL */
 485 0438 00000000 		.word 0			/*HLD */
 486 043c D81B0018 		.word LASTN+MAPOFFSET	/*CONTEXT */
 487 0440 481C0018 		.word CTOP+MAPOFFSET	/* FCP end of system dictionnary */
 488 0444 481C0018 		.word CTOP+MAPOFFSET	/* CP end of RAM dictionary RAM */
 489 0448 D81B0018 		.word LASTN+MAPOFFSET	/*LAST word in dictionary */
 490 044c 00000000 		.word 0,0			/*reserved */
 490      00000000 
 491              	ULAST:
 492              	
 493              	
 494              	/***********************************
 495              	//  Start of Forth dictionary
ARM GAS  stm32eforth.s 			page 12


 496              	***********************************/
 497              	
 498              		.p2align 2 
 499              	
 500              	// RANDOM ( n1 -- {0..n1-1} )
 501              	// return pseudo random number 
 502              	// REF: https://en.wikipedia.org/wiki/Xorshift
 503              	
 504 0454 00000000 		.word 0
 505 0458 06       	_RAND: .byte 6
 506 0459 52414E44 		.ascii "RANDOM"
 506      4F4D
 507 045f 00       		.p2align 2 
 508              	RAND:
 509 0460 42F804ED 		_NEST 
 510 0464 00F0EEFA 		bl SEED 
 511 0468 00F0D2F8 		bl AT 
 512 046c 4FEA4534 		lsl r4,r5,#13
 513 0470 85EA0405 		eor r5,r4
 514 0474 4FEA5544 		lsr r4,r5,#17
 515 0478 85EA0405 		eor r5,r4
 516 047c 4FEA4514 		lsl r4,r5,#5
 517 0480 85EA0405 		eor r5,r4
 518 0484 00F008F9 		bl DUPP 
 519 0488 00F0DCFA 		bl SEED 
 520 048c 00F0B6F8 		bl STORE 
 521 0490 00F036FA 		bl ABSS
 522 0494 00F008F9 		bl SWAP 
 523 0498 00F02AFC 		bl MODD 
 524 049c 52F804FB 		_UNNEST 
 525              	
 526              	// REBOOT ( -- )
 527              	// hardware reset 
 528 04a0 58F8FF17 		.word _RAND+MAPOFFSET
 529 04a4 06       	_REBOOT: .byte 6
 530 04a5 5245424F 		.ascii "REBOOT"
 530      4F54
 531 04ab 00       		.p2align 2 
 532              	REBOOT:
 533 04ac 0348     		ldr r0,scb_adr 
 534 04ae C168     		ldr r1,[r0,#SCB_AIRCR]
 535 04b0 41F00401 		orr r1,#(1<<2)
 536 04b4 C0F2FA51 		movt r1,#SCB_VECTKEY
 537 04b8 C160     		str r1,[r0,#SCB_AIRCR]
 538 04ba FEE7     		b . 
 539              	scb_adr:
 540 04bc 00ED00E0 		.word SCB_BASE_ADR 
 541              	
 542              	// PAUSE ( u -- ) 
 543              	// suspend execution for u milliseconds
 544 04c0 A4F8FF17 		.word _REBOOT+MAPOFFSET
 545 04c4 05       	_PAUSE: .byte 5
 546 04c5 50415553 		.ascii "PAUSE"
 546      45
 547 04ca 00BF     		.p2align 2
 548              	PAUSE:
 549 04cc 42F804ED 		_NEST 
ARM GAS  stm32eforth.s 			page 13


 550 04d0 00F0CCFA 		BL TIMER 
 551 04d4 00F092F8 		BL STORE 
 552              	PAUSE_LOOP:
 553 04d8 00F0C8FA 		BL TIMER 
 554 04dc 00F098F8 		BL AT 
 555 04e0 00F070F8 		BL QBRAN 
 556 04e4 F0040000 		.word PAUSE_EXIT 
 557 04e8 00F078F8 		BL BRAN 
 558 04ec D8040000 		.word PAUSE_LOOP 
 559              	PAUSE_EXIT: 		
 560 04f0 52F804FB 		_UNNEST 
 561              	
 562              	//  ULED ( T|F -- )
 563              	// control user LED, -1 ON, 0 OFF  
 564 04f4 C4F8FF17 		.word _PAUSE + MAPOFFSET
 565 04f8 04       	_ULED: .byte 4
 566 04f9 554C4544 		.ascii "ULED"
 567 04fd 0000BF   		.p2align 2
 568              		.type ULED, %function 
 569              	ULED:
 570 0500 4FF40056 		mov r6,#(1<<LED_PIN)
 571 0504 4FF48054 		mov r4,#LED_GPIO&0xffff
 572 0508 C4F20104 		movt r4,#LED_GPIO>>16
 573 050c 2800     		movs r0,r5 
 574 050e 51F8045B 		_POP
 575 0512 01D0     		beq ULED_OFF 
 576 0514 6661     		str r6,[r4,#GPIO_BRR]
 577 0516 7047     		_NEXT 
 578              	ULED_OFF:
 579 0518 2661     		str r6,[r4,#GPIO_BSRR]
 580 051a 7047     		_NEXT 
 581              		
 582              	//    ?RX	 ( -- c T | F )
 583              	// 	Return input character and true, or a false if no input.
 584 051c F8F8FF17 		.word	_ULED+MAPOFFSET
 585 0520 04       	_QRX:	.byte   4
 586 0521 3F4B4559 		.ascii "?KEY"
 587 0525 0000BF   		.p2align 2 
 588              	QKEY:
 589              	QRX: 
 590 0528 41F8045D 		_PUSH
 591 052c 4FF46054 		mov r4,#UART&0xFFFF
 592 0530 C4F20104 		movt r4,#UART>>16
 593 0534 2688     		ldrh	r6, [r4, #USART_SR]
 594 0536 16F02006 		ands	r6, #0x20		//  RXE
 595 053a 05D0     		BEQ	QRX1
 596 053c 6568     	 	LDR	R5, [R4, #USART_DR]
 597 053e 41F8045D 		_PUSH
 598 0542 18BF     	    IT NE 
 599 0544 6FF00005 		MVNNE	R5,#0
 600              	QRX1:
 601 0548 08BF     		IT EQ 
 602 054a 0025     	    MOVEQ	R5,#0
 603 054c 7047     		_NEXT
 604 054e 00BF     		.p2align 2 
 605              	
 606              	//    TX!	 ( c -- )
ARM GAS  stm32eforth.s 			page 14


 607              	// 	Send character c to the output device.
 608              	
 609 0550 20F9FF17 		.word	_QRX+MAPOFFSET
 610 0554 04       	_TXSTO:	.byte 4
 611 0555 454D4954 		.ascii "EMIT"
 612 0559 0000BF   		.p2align 2 	
 613              	TXSTO:
 614              	EMIT:
 615              	TECHO:
 616 055c 4FF46054 		mov r4,#UART&0xFFFF
 617 0560 C4F20104 		movt r4,#UART>>16
 618              	TX1:
 619 0564 2688     		ldrh	r6, [r4, #USART_SR]	
 620 0566 16F08006 		ands	r6, #0x80		//  TXE bit 
 621 056a FBD0     		beq	TX1
 622 056c A580     		strh	r5, [r4, #USART_DR]	
 623 056e 51F8045B 		_POP
 624 0572 7047     		_NEXT
 625              		
 626              	// **************************************************************************
 627              	//  The kernel
 628              	
 629              	//    NOP	( -- )
 630              	// 	do nothing.
 631              	
 632 0574 54F9FF17 		.word	_TXSTO+MAPOFFSET
 633 0578 03       	_NOP:	.byte   3
 634 0579 4E4F50   		.ascii "NOP"
 635              		.p2align 2 	
 636              	NOP:
 637 057c 7047     		_NEXT
 638              	 
 639              	
 640              	//    doLIT	( -- w )
 641              	// 	Push an inline literal.
 642              	
 643              	// 	.word	_NOP+MAPOFFSET
 644              	// _LIT	.byte   COMPO+5
 645              	// 	.ascii "doLIT"
 646              	// 	.p2align 2 	
 647              	DOLIT:
 648 057e 41F8045D 		_PUSH				//  store R5 on data stack
 649 0582 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 650 0586 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 651 058a 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 652 058e 7047     		_NEXT
 653              	
 654              	//    EXECUTE	( ca -- )
 655              	// 	Execute the word at ca.
 656              	
 657 0590 78F9FF17 		.word	_NOP+MAPOFFSET
 658 0594 07       	_EXECU:	.byte   7
 659 0595 45584543 		.ascii "EXECUTE"
 659      555445
 660              		.p2align 2 	
 661              	EXECU:
 662 059c 45F00104 		ORR	R4,R5,#1		//  b0=1 
ARM GAS  stm32eforth.s 			page 15


 663 05a0 51F8045B 		_POP
 664 05a4 2047     		BX	R4
 665              	
 666              	//    next	( -- ) counter on R:
 667              	// 	Run time code for the single index loop.
 668              	// 	: next ( -- ) \ hilevel model
 669              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 670              	
 671              	// 	.word	_EXECU+MAPOFFSET
 672              	// _DONXT	.byte   COMPO+4
 673              	// 	.ascii "next"
 674              	// 	.p2align 2 	
 675              	DONXT:
 676 05a6 1468     		LDR	R4,[R2]   // ( -- u )  
 677 05a8 24B9     		CBNZ R4,NEXT1 
 678              		/* loop done */
 679 05aa 02F10402 		ADD	R2,R2,#4 // drop counter 
 680 05ae 0EF1040E 		ADD	LR,LR,#4 // skip after loop address 
 681 05b2 7047     		_NEXT
 682              	NEXT1:
 683              		/* decrement loop counter */
 684 05b4 A4F10104 		SUB	R4,R4,#1
 685 05b8 1460     		STR	R4,[R2]
 686 05ba 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 687 05be 4EF0010E 		ORR	LR,LR,#1 // begining of loop
 688 05c2 7047     		_NEXT
 689              	
 690              	//    ?branch	( f -- )
 691              	// 	Branch if flag is zero.
 692              	
 693              	// 	.word	_DONXT+MAPOFFSET
 694              	// _QBRAN	.byte   COMPO+7
 695              	// 	.ascii "?branch"
 696              	// 	.p2align 2 	
 697              	QBRAN:
 698 05c4 2C00     		MOVS	R4,R5
 699 05c6 51F8045B 		_POP
 700 05ca 04D1     		BNE	QBRAN1
 701 05cc 5EF801EC 		LDR	LR,[LR,#-1]
 702 05d0 4EF0010E 		ORR LR,LR,#1
 703 05d4 7047     		_NEXT
 704              	QBRAN1:
 705 05d6 0EF1040E 	 	ADD	LR,LR,#4
 706 05da 7047     		_NEXT
 707              	
 708              	//    branch	( -- )
 709              	// 	Branch to an inline address.
 710              	
 711              	// 	.word	_QBRAN+MAPOFFSET
 712              	// _BRAN	.byte   COMPO+6
 713              	// 	.ascii "branch"
 714              	// 	.p2align 2 	
 715              	BRAN:
 716 05dc 5EF801EC 		LDR	LR,[LR,#-1]
 717 05e0 4EF0010E 		ORR	LR,LR,#1
 718 05e4 7047     		_NEXT
 719              	
ARM GAS  stm32eforth.s 			page 16


 720              	//    EXIT	(  -- )
 721              	// 	Exit the currently executing command.
 722              	
 723 05e6 94F9FF17 		.word	_EXECU+MAPOFFSET
 724 05ea 04       	_EXIT:	.byte   4
 725 05eb 45584954 		.ascii "EXIT"
 726 05ef 00       		.p2align 2 	
 727              	EXIT:
 728 05f0 52F804FB 		_UNNEST
 729              	
 730              	//    !	   ( w a -- )
 731              	// 	Pop the data stack to memory.
 732              	
 733 05f4 EAF9FF17 		.word	_EXIT+MAPOFFSET
 734 05f8 01       	_STORE:	.byte   1
 735 05f9 21       		.ascii "!"
 736 05fa 00BF     		.p2align 2 	
 737              	STORE:
 738 05fc 51F8044B 		LDR	R4,[R1],#4
 739 0600 2C60     		STR	R4,[R5]
 740 0602 51F8045B 		_POP
 741 0606 7047     		_NEXT
 742              	
 743              	//    @	   ( a -- w )
 744              	// 	Push memory location to the data stack.
 745              	
 746 0608 F8F9FF17 		.word	_STORE+MAPOFFSET
 747 060c 01       	_AT:	.byte   1
 748 060d 40       		.ascii "@"
 749 060e 00BF     		.p2align 2 	
 750              	AT:
 751 0610 2D68     		LDR	R5,[R5]
 752 0612 7047     		_NEXT
 753              	
 754              	//    C!	  ( c b -- )
 755              	// 	Pop the data stack to byte memory.
 756              	
 757 0614 0CFAFF17 		.word	_AT+MAPOFFSET
 758 0618 02       	_CSTOR:	.byte   2
 759 0619 4321     		.ascii "C!"
 760 061b 00       		.p2align 2 	
 761              	CSTOR:
 762 061c 51F8044B 		LDR	R4,[R1],#4
 763 0620 2C70     		STRB	R4,[R5]
 764 0622 51F8045B 		_POP
 765 0626 7047     		_NEXT
 766              	
 767              	//    C@	  ( b -- c )
 768              	// 	Push byte memory location to the data stack.
 769              	
 770 0628 18FAFF17 		.word	_CSTOR+MAPOFFSET
 771 062c 02       	_CAT:	.byte   2
 772 062d 4340     		.ascii "C@"
 773 062f 00       		.p2align 2 	
 774              	CAT:
 775 0630 2D78     		LDRB	R5,[R5]
 776 0632 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 17


 777              	
 778              	//    R>	  ( -- w )
 779              	// 	Pop the return stack to the data stack.
 780              	
 781 0634 2CFAFF17 		.word	_CAT+MAPOFFSET
 782 0638 02       	_RFROM:	.byte   2
 783 0639 523E     		.ascii "R>"
 784 063b 00       		.p2align 2 	
 785              	RFROM:
 786 063c 41F8045D 		_PUSH
 787 0640 52F8045B 		LDR	R5,[R2],#4
 788 0644 7047     		_NEXT
 789              	
 790              	//    R@	  ( -- w )
 791              	// 	Copy top of return stack to the data stack.
 792              	
 793 0646 38FAFF17 		.word	_RFROM+MAPOFFSET
 794 064a 02       	_RAT:	.byte   2
 795 064b 5240     		.ascii "R@"
 796 064d 0000BF   		.p2align 2 	
 797              	RAT:
 798 0650 41F8045D 		_PUSH
 799 0654 1568     		LDR	R5,[R2]
 800 0656 7047     		_NEXT
 801              	
 802              	//    >R	  ( w -- )
 803              	// 	Push the data stack to the return stack.
 804              	
 805 0658 4AFAFF17 		.word	_RAT+MAPOFFSET
 806 065c 42       	_TOR:	.byte   COMPO+2
 807 065d 3E52     		.ascii ">R"
 808 065f 00       		.p2align 2 	
 809              	TOR:
 810 0660 42F8045D 		STR	R5,[R2,#-4]!
 811 0664 51F8045B 		_POP
 812 0668 7047     		_NEXT
 813              	
 814              	//    SP@	 ( -- a )
 815              	// 	Push the current data stack pointer.
 816              	
 817 066a 5CFAFF17 		.word	_TOR+MAPOFFSET
 818 066e 03       	_SPAT:	.byte   3
 819 066f 535040   		.ascii "SP@"
 820 0672 00BF     		.p2align 2 	
 821              	SPAT:
 822 0674 41F8045D 		_PUSH
 823 0678 0D46     		MOV	R5,R1
 824 067a 7047     		_NEXT
 825              	
 826              	//    DROP	( w -- )
 827              	// 	Discard top stack item.
 828              	
 829 067c 6EFAFF17 		.word	_SPAT+MAPOFFSET
 830 0680 04       	_DROP:	.byte   4
 831 0681 44524F50 		.ascii "DROP"
 832 0685 0000BF   		.p2align 2 	
 833              	DROP:
ARM GAS  stm32eforth.s 			page 18


 834 0688 51F8045B 		_POP
 835 068c 7047     		_NEXT
 836              	
 837              	//    DUP	 ( w -- w w )
 838              	// 	Duplicate the top stack item.
 839              	
 840 068e 80FAFF17 		.word	_DROP+MAPOFFSET
 841 0692 03       	_DUPP:	.byte   3
 842 0693 445550   		.ascii "DUP"
 843 0696 00BF     		.p2align 2 	
 844              	DUPP:
 845 0698 41F8045D 		_PUSH
 846 069c 7047     		_NEXT
 847              	
 848              	//    SWAP	( w1 w2 -- w2 w1 )
 849              	// 	Exchange top two stack items.
 850              	
 851 069e 92FAFF17 		.word	_DUPP+MAPOFFSET
 852 06a2 04       	_SWAP:	.byte   4
 853 06a3 53574150 		.ascii "SWAP"
 854 06a7 00       		.p2align 2 	
 855              	SWAP:
 856 06a8 0C68     		LDR	R4,[R1]
 857 06aa 0D60     		STR	R5,[R1]
 858 06ac 2546     		MOV	R5,R4
 859 06ae 7047     		_NEXT
 860              	
 861              	//    OVER	( w1 w2 -- w1 w2 w1 )
 862              	// 	Copy second stack item to top.
 863              	
 864 06b0 A2FAFF17 		.word	_SWAP+MAPOFFSET
 865 06b4 04       	_OVER:	.byte   4
 866 06b5 4F564552 		.ascii "OVER"
 867 06b9 0000BF   		.p2align 2 	
 868              	OVER:
 869 06bc 41F8045D 		_PUSH
 870 06c0 4D68     		LDR	R5,[R1,#4]
 871 06c2 7047     		_NEXT
 872              	
 873              	//    0<	  ( n -- t )
 874              	// 	Return true if n is negative.
 875              	
 876 06c4 B4FAFF17 		.word	_OVER+MAPOFFSET
 877 06c8 02       	_ZLESS:	.byte   2
 878 06c9 303C     		.ascii "0<"
 879 06cb 00       		.p2align 2 	
 880              	ZLESS:
 881 06cc 4FF00004 		MOV	R4,#0
 882 06d0 04EB2505 		ADD	R5,R4,R5,ASR #32
 883 06d4 7047     		_NEXT
 884              	
 885              	//    AND	 ( w w -- w )
 886              	// 	Bitwise AND.
 887              	
 888 06d6 C8FAFF17 		.word	_ZLESS+MAPOFFSET
 889 06da 03       	_ANDD:	.byte   3
 890 06db 414E44   		.ascii "AND"
ARM GAS  stm32eforth.s 			page 19


 891 06de 00BF     		.p2align 2 	
 892              	ANDD:
 893 06e0 51F8044B 		LDR	R4,[R1],#4
 894 06e4 05EA0405 		AND	R5,R5,R4
 895 06e8 7047     		_NEXT
 896              	
 897              	//    OR	  ( w w -- w )
 898              	// 	Bitwise inclusive OR.
 899              	
 900 06ea DAFAFF17 		.word	_ANDD+MAPOFFSET
 901 06ee 02       	_ORR:	.byte   2
 902 06ef 4F52     		.ascii "OR"
 903 06f1 0000BF   		.p2align 2 	
 904              	ORR:
 905 06f4 51F8044B 		LDR	R4,[R1],#4
 906 06f8 45EA0405 		ORR	R5,R5,R4
 907 06fc 7047     		_NEXT
 908              	
 909              	//    XOR	 ( w w -- w )
 910              	// 	Bitwise exclusive OR.
 911              	
 912 06fe EEFAFF17 		.word	_ORR+MAPOFFSET
 913 0702 03       	_XORR:	.byte   3
 914 0703 584F52   		.ascii "XOR"
 915 0706 00BF     		.p2align 2 	
 916              	XORR:
 917 0708 51F8044B 		LDR	R4,[R1],#4
 918 070c 85EA0405 		EOR	R5,R5,R4
 919 0710 7047     		_NEXT
 920              	
 921              	//    UM+	 ( w w -- w cy )
 922              	// 	Add two numbers, return the sum and carry flag.
 923              	
 924 0712 02FBFF17 		.word	_XORR+MAPOFFSET
 925 0716 03       	_UPLUS:	.byte   3
 926 0717 554D2B   		.ascii "UM+"
 927 071a 00BF     		.p2align 2 	
 928              	UPLUS:
 929 071c 0C68     		LDR	R4,[R1]
 930 071e 6419     		ADDS	R4,R4,R5
 931 0720 4FF00005 		MOV	R5,#0
 932 0724 45F10005 		ADC	R5,R5,#0
 933 0728 0C60     		STR	R4,[R1]
 934 072a 7047     		_NEXT
 935              	
 936              	//    RSHIFT	 ( w # -- w )
 937              	// 	arithmetic Right shift # bits.
 938              	
 939 072c 16FBFF17 		.word	_UPLUS+MAPOFFSET
 940 0730 06       	_RSHIFT:	.byte   6
 941 0731 52534849 		.ascii "RSHIFT"
 941      4654
 942 0737 00       		.p2align 2 	
 943              	RSHIFT:
 944 0738 51F8044B 		LDR	R4,[R1],#4
 945 073c 44FA05F5 		MOV	R5,R4,ASR R5
 946 0740 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 20


 947              	
 948              	//    LSHIFT	 ( w # -- w )
 949              	// 	Right shift # bits.
 950              	
 951 0742 30FBFF17 		.word	_RSHIFT+MAPOFFSET
 952 0746 06       	_LSHIFT:	.byte   6
 953 0747 4C534849 		.ascii "LSHIFT"
 953      4654
 954 074d 0000BF   		.p2align 2 	
 955              	LSHIFT:
 956 0750 51F8044B 		LDR	R4,[R1],#4
 957 0754 04FA05F5 		MOV	R5,R4,LSL R5
 958 0758 7047     		_NEXT
 959              	
 960              	//    +	 ( w w -- w )
 961              	// 	Add.
 962              	
 963 075a 46FBFF17 		.word	_LSHIFT+MAPOFFSET
 964 075e 01       	_PLUS:	.byte   1
 965 075f 2B       		.ascii "+"
 966              		.p2align 2 	
 967              	PLUS:
 968 0760 51F8044B 		LDR	R4,[R1],#4
 969 0764 2544     		ADD	R5,R5,R4
 970 0766 7047     		_NEXT
 971              	
 972              	//    -	 ( w w -- w )
 973              	// 	Subtract.
 974              	
 975 0768 5EFBFF17 		.word	_PLUS+MAPOFFSET
 976 076c 01       	_SUBB:	.byte   1
 977 076d 2D       		.ascii "-"
 978 076e 00BF     		.p2align 2 	
 979              	SUBB:
 980 0770 51F8044B 		LDR	R4,[R1],#4
 981 0774 C5EB0405 		RSB	R5,R5,R4
 982 0778 7047     		_NEXT
 983              	
 984              	//    *	 ( w w -- w )
 985              	// 	Multiply.
 986              	
 987 077a 6CFBFF17 		.word	_SUBB+MAPOFFSET
 988 077e 01       	_STAR:	.byte   1
 989 077f 2A       		.ascii "*"
 990              		.p2align 2 	
 991              	STAR:
 992 0780 51F8044B 		LDR	R4,[R1],#4
 993 0784 04FB05F5 		MUL	R5,R4,R5
 994 0788 7047     		_NEXT
 995              	
 996              	//    UM*	 ( w w -- ud )
 997              	// 	Unsigned multiply.
 998              	
 999 078a 7EFBFF17 		.word	_STAR+MAPOFFSET
 1000 078e 03       	_UMSTA:	.byte   3
 1001 078f 554D2A   		.ascii "UM*"
 1002 0792 00BF     		.p2align 2 	
ARM GAS  stm32eforth.s 			page 21


 1003              	UMSTA:
 1004 0794 0C68     		LDR	R4,[R1]
 1005 0796 A5FB0467 		UMULL	R6,R7,R5,R4
 1006 079a 0E60     		STR	R6,[R1]
 1007 079c 3D46     		MOV	R5,R7
 1008 079e 7047     		_NEXT
 1009              	
 1010              	//    M*	 ( w w -- d )
 1011              	// 	signed multiply.
 1012              	
 1013 07a0 8EFBFF17 		.word	_UMSTA+MAPOFFSET
 1014 07a4 02       	_MSTAR:	.byte   2
 1015 07a5 4D2A     		.ascii "M*"
 1016 07a7 00       		.p2align 2 	
 1017              	MSTAR:
 1018 07a8 0C68     		LDR	R4,[R1]
 1019 07aa 85FB0467 		SMULL	R6,R7,R5,R4
 1020 07ae 0E60     		STR	R6,[R1]
 1021 07b0 3D46     		MOV	R5,R7
 1022 07b2 7047     		_NEXT
 1023              	
 1024              	//    1+	 ( w -- w+1 )
 1025              	// 	Add 1.
 1026              	
 1027 07b4 A4FBFF17 		.word	_MSTAR+MAPOFFSET
 1028 07b8 02       	_ONEP:	.byte   2
 1029 07b9 312B     		.ascii "1+"
 1030 07bb 00       		.p2align 2 	
 1031              	ONEP:
 1032 07bc 05F10105 		ADD	R5,R5,#1
 1033 07c0 7047     		_NEXT
 1034              	
 1035              	//    1-	 ( w -- w-1 )
 1036              	// 	Subtract 1.
 1037              	
 1038 07c2 B8FBFF17 		.word	_ONEP+MAPOFFSET
 1039 07c6 02       	_ONEM:	.byte   2
 1040 07c7 312D     		.ascii "1-"
 1041 07c9 0000BF   		.p2align 2 	
 1042              	ONEM:
 1043 07cc A5F10105 		SUB	R5,R5,#1
 1044 07d0 7047     		_NEXT
 1045              	
 1046              	//    2+	 ( w -- w+2 )
 1047              	// 	Add 1.
 1048              	
 1049 07d2 C6FBFF17 		.word	_ONEM+MAPOFFSET
 1050 07d6 02       	_TWOP:	.byte   2
 1051 07d7 322B     		.ascii "2+"
 1052 07d9 0000BF   		.p2align 2 	
 1053              	TWOP:
 1054 07dc 05F10205 		ADD	R5,R5,#2
 1055 07e0 7047     		_NEXT
 1056              	
 1057              	//    2-	 ( w -- w-2 )
 1058              	// 	Subtract 2.
 1059              	
ARM GAS  stm32eforth.s 			page 22


 1060 07e2 D6FBFF17 		.word	_TWOP+MAPOFFSET
 1061 07e6 02       	_TWOM:	.byte   2
 1062 07e7 322D     		.ascii "2-"
 1063 07e9 0000BF   		.p2align 2 	
 1064              	TWOM:
 1065 07ec A5F10205 		SUB	R5,R5,#2
 1066 07f0 7047     		_NEXT
 1067              	
 1068              	//    CELL+	( w -- w+4 )
 1069              	// 	Add CELLL.
 1070              	
 1071 07f2 E6FBFF17 		.word	_TWOM+MAPOFFSET
 1072 07f6 05       	_CELLP:	.byte   5
 1073 07f7 43454C4C 		.ascii "CELL+"
 1073      2B
 1074              		.p2align 2 	
 1075              	CELLP:
 1076 07fc 05F10405 		ADD	R5,R5,#CELLL
 1077 0800 7047     		_NEXT
 1078              	
 1079              	//    CELL-	( w -- w-4 )
 1080              	// 	Subtract CELLL.
 1081              	
 1082 0802 F6FBFF17 		.word	_CELLP+MAPOFFSET
 1083 0806 05       	_CELLM:	.byte   5
 1084 0807 43454C4C 		.ascii "CELL-"
 1084      2D
 1085              		.p2align 2 	
 1086              	CELLM:
 1087 080c A5F10405 		SUB	R5,R5,#CELLL
 1088 0810 7047     		_NEXT
 1089              	 
 1090              	//    BL	( -- 32 )
 1091              	// 	Blank (ASCII space).
 1092              	
 1093 0812 06FCFF17 		.word	_CELLM+MAPOFFSET
 1094 0816 02       	_BLANK:	.byte   2
 1095 0817 424C     		.ascii "BL"
 1096 0819 0000BF   		.p2align 2 	
 1097              	BLANK:
 1098 081c 41F8045D 		_PUSH
 1099 0820 4FF02005 		MOV	R5,#32
 1100 0824 7047     		_NEXT
 1101              	
 1102              	//    CELLS	( w -- w*4 )
 1103              	// 	Multiply 4.
 1104              	
 1105 0826 16FCFF17 		.word	_BLANK+MAPOFFSET
 1106 082a 05       	_CELLS:	.byte   5
 1107 082b 43454C4C 		.ascii "CELLS"
 1107      53
 1108              		.p2align 2 	
 1109              	CELLS:
 1110 0830 4FEA8505 		MOV	R5,R5,LSL#2
 1111 0834 7047     		_NEXT
 1112              	
 1113              	//    CELL/	( w -- w/4 )
ARM GAS  stm32eforth.s 			page 23


 1114              	// 	Divide by 4.
 1115              	
 1116 0836 2AFCFF17 		.word	_CELLS+MAPOFFSET
 1117 083a 05       	_CELLSL:	.byte   5
 1118 083b 43454C4C 		.ascii "CELL/"
 1118      2F
 1119              		.p2align 2 	
 1120              	CELLSL:
 1121 0840 4FEAA505 		MOV	R5,R5,ASR#2
 1122 0844 7047     		_NEXT
 1123              	
 1124              	//    2*	( w -- w*2 )
 1125              	// 	Multiply 2.
 1126              	
 1127 0846 3AFCFF17 		.word	_CELLSL+MAPOFFSET
 1128 084a 02       	_TWOST:	.byte   2
 1129 084b 322A     		.ascii "2*"
 1130 084d 0000BF   		.p2align 2 	
 1131              	TWOST:
 1132 0850 4FEA4505 		MOV	R5,R5,LSL#1
 1133 0854 7047     		_NEXT
 1134              	
 1135              	//    2/	( w -- w/2 )
 1136              	// 	Divide by 2.
 1137              	
 1138 0856 4AFCFF17 		.word	_TWOST+MAPOFFSET
 1139 085a 02       	_TWOSL:	.byte   2
 1140 085b 322F     		.ascii "2/"
 1141 085d 0000BF   		.p2align 2 	
 1142              	TWOSL:
 1143 0860 4FEA6505 		MOV	R5,R5,ASR#1
 1144 0864 7047     		_NEXT
 1145              	
 1146              	//    ?DUP	( w -- w w | 0 )
 1147              	// 	Conditional duplicate.
 1148              	
 1149 0866 5AFCFF17 		.word	_TWOSL+MAPOFFSET
 1150 086a 04       	_QDUP:	.byte   4
 1151 086b 3F445550 		.ascii "?DUP"
 1152 086f 00       		.p2align 2 	
 1153              	QDUP:
 1154 0870 2C00     		MOVS	R4,R5
 1155 0872 18BF     		IT NE 
 1156 0874 41F8045D 	    STRNE	R5,[R1,#-4]!
 1157 0878 7047     		_NEXT
 1158              	
 1159              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1160              	// 	Rotate top 3 items.
 1161              	
 1162 087a 6AFCFF17 		.word	_QDUP+MAPOFFSET
 1163 087e 03       	_ROT:	.byte   3
 1164 087f 524F54   		.ascii "ROT"
 1165 0882 00BF     		.p2align 2 	
 1166              	ROT:
 1167 0884 0C68     		LDR	R4,[R1]  // r4=w2 
 1168 0886 0D60     		STR	R5,[R1]  // w3 replace w2 
 1169 0888 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
ARM GAS  stm32eforth.s 			page 24


 1170 088a 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1171 088c 7047     		_NEXT
 1172              	
 1173              	//    2DROP	( w1 w2 -- )
 1174              	// 	Drop top 2 items.
 1175              	
 1176 088e 7EFCFF17 		.word	_ROT+MAPOFFSET
 1177 0892 05       	_DDROP:	.byte   5
 1178 0893 3244524F 		.ascii "2DROP"
 1178      50
 1179              		.p2align 2 	
 1180              	DDROP:
 1181 0898 51F8045B 		_POP
 1182 089c 51F8045B 		_POP
 1183 08a0 7047     		_NEXT
 1184              	
 1185              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1186              	// 	Duplicate top 2 items.
 1187              	
 1188 08a2 92FCFF17 		.word	_DDROP+MAPOFFSET
 1189 08a6 04       	_DDUP:	.byte   4
 1190 08a7 32445550 		.ascii "2DUP"
 1191 08ab 00       		.p2align 2 	
 1192              	DDUP:
 1193 08ac 0C68     		LDR	R4,[R1] // r4=w1
 1194 08ae 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1195 08b2 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1196 08b6 7047     		_NEXT
 1197              	
 1198              	//    D+	( d1 d2 -- d3 )
 1199              	// 	Add top 2 double numbers.
 1200              	
 1201 08b8 A6FCFF17 		.word	_DDUP+MAPOFFSET
 1202 08bc 02       	_DPLUS:	.byte   2
 1203 08bd 442B     		.ascii "D+"
 1204 08bf 00       		.p2align 2 	
 1205              	DPLUS:
 1206 08c0 51F8044B 		LDR	R4,[R1],#4
 1207 08c4 51F8046B 		LDR	R6,[R1],#4
 1208 08c8 0F68     		LDR	R7,[R1]
 1209 08ca E419     		ADDS	R4,R4,R7
 1210 08cc 0C60     		STR	R4,[R1]
 1211 08ce 45EB0605 		ADC	R5,R5,R6
 1212 08d2 7047     		_NEXT
 1213              	
 1214              	//    NOT	 ( w -- !w )
 1215              	// 	1"s complement.
 1216              	
 1217 08d4 BCFCFF17 		.word	_DPLUS+MAPOFFSET
 1218 08d8 03       	_INVER:	.byte   3
 1219 08d9 4E4F54   		.ascii "NOT"
 1220              		.p2align 2 	
 1221              	INVER:
 1222 08dc 6FEA0505 		MVN	R5,R5
 1223 08e0 7047     		_NEXT
 1224              	
 1225              	//    NEGATE	( w -- -w )
ARM GAS  stm32eforth.s 			page 25


 1226              	// 	2's complement.
 1227              	
 1228 08e2 D8FCFF17 		.word	_INVER+MAPOFFSET
 1229 08e6 06       	_NEGAT:	.byte   6
 1230 08e7 4E454741 		.ascii "NEGATE"
 1230      5445
 1231 08ed 0000BF   		.p2align 2 	
 1232              	NEGAT:
 1233 08f0 C5F10005 		RSB	R5,R5,#0
 1234 08f4 7047     		_NEXT
 1235              	
 1236              	//    ABS	 ( w -- |w| )
 1237              	// 	Absolute.
 1238              	
 1239 08f6 E6FCFF17 		.word	_NEGAT+MAPOFFSET
 1240 08fa 03       	_ABSS:	.byte   3
 1241 08fb 414253   		.ascii "ABS"
 1242 08fe 00BF     		.p2align 2 	
 1243              	ABSS:
 1244 0900 15F0004F 		TST	R5,#0x80000000
 1245 0904 18BF     		IT NE
 1246 0906 6D42     	    RSBNE   R5,R5,#0
 1247 0908 7047     		_NEXT
 1248              	
 1249              	//  0= ( w -- f )
 1250              	// TOS==0?
 1251              	
 1252 090a FAFCFF17 		.word _ABSS+MAPOFFSET
 1253 090e 02       	_ZEQUAL: .byte 2
 1254 090f 303D     		.ascii "0="
 1255 0911 0000BF   		.p2align 2
 1256              	ZEQUAL:
 1257 0914 15B9     		cbnz r5,1f
 1258 0916 4FF0FF35 		mov r5,#-1
 1259 091a 7047     		_NEXT 
 1260 091c 85EA0505 	1:  eor r5,r5,r5  
 1261 0920 7047     		_NEXT 	
 1262              	
 1263              	//    =	 ( w w -- t )
 1264              	// 	Equal?
 1265              	
 1266 0922 0EFDFF17 		.word	_ZEQUAL+MAPOFFSET
 1267 0926 01       	_EQUAL:	.byte   1
 1268 0927 3D       		.ascii "="
 1269              		.p2align 2 	
 1270              	EQUAL:
 1271 0928 51F8044B 		LDR	R4,[R1],#4
 1272 092c A542     		CMP	R5,R4
 1273 092e 0CBF     		ITE EQ 
 1274 0930 6FF00005 	    MVNEQ	R5,#0
 1275 0934 0025     		MOVNE	R5,#0
 1276 0936 7047     		_NEXT
 1277              	
 1278              	//    U<	 ( w w -- t )
 1279              	// 	Unsigned equal?
 1280              	
 1281 0938 26FDFF17 		.word	_EQUAL+MAPOFFSET
ARM GAS  stm32eforth.s 			page 26


 1282 093c 02       	_ULESS:	.byte   2
 1283 093d 553C     		.ascii "U<"
 1284 093f 00       		.p2align 2 	
 1285              	ULESS:
 1286 0940 51F8044B 		LDR	R4,[R1],#4
 1287 0944 AC42     		CMP	R4,R5
 1288 0946 34BF     		ITE CC 
 1289 0948 6FF00005 		MVNCC	R5,#0
 1290 094c 0025     		MOVCS	R5,#0
 1291 094e 7047     		_NEXT
 1292              	
 1293              	//    <	( w w -- t )
 1294              	// 	Less?
 1295              	
 1296 0950 3CFDFF17 		.word	_ULESS+MAPOFFSET
 1297 0954 01       	_LESS:	.byte   1
 1298 0955 3C       		.ascii "<"
 1299 0956 00BF     		.p2align 2 	
 1300              	LESS:
 1301 0958 51F8044B 		LDR	R4,[R1],#4
 1302 095c AC42     		CMP	R4,R5
 1303 095e B4BF     	    ITE LT
 1304 0960 6FF00005 		MVNLT	R5,#0
 1305 0964 0025     		MOVGE	R5,#0
 1306 0966 7047     		_NEXT
 1307              	
 1308              	//    >	( w w -- t )
 1309              	// 	greater?
 1310              	
 1311 0968 54FDFF17 		.word	_LESS+MAPOFFSET
 1312 096c 01       	_GREAT:	.byte   1
 1313 096d 3E       		.ascii ">"
 1314 096e 00BF     		.p2align 2 	
 1315              	GREAT:
 1316 0970 51F8044B 		LDR	R4,[R1],#4
 1317 0974 AC42     		CMP	R4,R5
 1318 0976 CCBF     		ITE GT
 1319 0978 6FF00005 	    MVNGT	R5,#0
 1320 097c 0025     		MOVLE	R5,#0
 1321 097e 7047     		_NEXT
 1322              	
 1323              	//    MAX	 ( w w -- max )
 1324              	// 	Leave maximum.
 1325              	
 1326 0980 6CFDFF17 		.word	_GREAT+MAPOFFSET
 1327 0984 03       	_MAX:	.byte   3
 1328 0985 4D4158   		.ascii "MAX"
 1329              		.p2align 2 	
 1330              	MAX:
 1331 0988 51F8044B 		LDR	R4,[R1],#4
 1332 098c AC42     		CMP	R4,R5
 1333 098e C8BF     		IT GT 
 1334 0990 2546     		MOVGT	R5,R4
 1335 0992 7047     		_NEXT
 1336              	
 1337              	//    MIN	 ( w w -- min )
 1338              	// 	Leave minimum.
ARM GAS  stm32eforth.s 			page 27


 1339              	
 1340 0994 84FDFF17 		.word	_MAX+MAPOFFSET
 1341 0998 03       	_MIN:	.byte   3
 1342 0999 4D494E   		.ascii "MIN"
 1343              		.p2align 2 	
 1344              	MIN:
 1345 099c 51F8044B 		LDR	R4,[R1],#4
 1346 09a0 AC42     		CMP	R4,R5
 1347 09a2 B8BF     		IT LT
 1348 09a4 2546     		MOVLT	R5,R4
 1349 09a6 7047     		_NEXT
 1350              	
 1351              	//    +!	 ( w a -- )
 1352              	// 	Add to memory.
 1353              	
 1354 09a8 98FDFF17 		.word	_MIN+MAPOFFSET
 1355 09ac 02       	_PSTOR:	.byte   2
 1356 09ad 2B21     		.ascii "+!"
 1357 09af 00       		.p2align 2 	
 1358              	PSTOR:
 1359 09b0 51F8044B 		LDR	R4,[R1],#4
 1360 09b4 2E68     		LDR	R6,[R5]
 1361 09b6 2644     		ADD	R6,R6,R4
 1362 09b8 2E60     		STR	R6,[R5]
 1363 09ba 51F8045B 		_POP
 1364 09be 7047     		_NEXT
 1365              	
 1366              	//    2!	 ( d a -- )
 1367              	// 	Store double number.
 1368              	
 1369 09c0 ACFDFF17 		.word	_PSTOR+MAPOFFSET
 1370 09c4 02       	_DSTOR:	.byte   2
 1371 09c5 3221     		.ascii "2!"
 1372 09c7 00       		.p2align 2 	
 1373              	DSTOR:
 1374 09c8 51F8044B 		LDR	R4,[R1],#4
 1375 09cc 51F8046B 		LDR	R6,[R1],#4
 1376 09d0 45F8044B 		STR	R4,[R5],#4
 1377 09d4 2E60     		STR	R6,[R5]
 1378 09d6 51F8045B 		_POP
 1379 09da 7047     		_NEXT
 1380              	
 1381              	//    2@	 ( a -- d )
 1382              	// 	Fetch double number.
 1383              	
 1384 09dc C4FDFF17 		.word	_DSTOR+MAPOFFSET
 1385 09e0 02       	_DAT:	.byte   2
 1386 09e1 3240     		.ascii "2@"
 1387 09e3 00       		.p2align 2 	
 1388              	DAT:
 1389 09e4 6C68     		LDR	R4,[R5,#4]
 1390 09e6 41F8044D 		STR	R4,[R1,#-4]!
 1391 09ea 2D68     		LDR	R5,[R5]
 1392 09ec 7047     		_NEXT
 1393              	
 1394              	//    COUNT	( b -- b+1 c )
 1395              	// 	Fetch length of string.
ARM GAS  stm32eforth.s 			page 28


 1396              	
 1397 09ee E0FDFF17 		.word	_DAT+MAPOFFSET
 1398 09f2 05       	_COUNT:	.byte   5
 1399 09f3 434F554E 		.ascii "COUNT"
 1399      54
 1400              		.p2align 2 	
 1401              	COUNT:
 1402 09f8 15F8014B 		LDRB	R4,[R5],#1
 1403 09fc 41F8045D 		_PUSH
 1404 0a00 2546     		MOV	R5,R4
 1405 0a02 7047     		_NEXT
 1406              	
 1407              	//    DNEGATE	( d -- -d )
 1408              	// 	Negate double number.
 1409              	
 1410 0a04 F2FDFF17 		.word	_COUNT+MAPOFFSET
 1411 0a08 07       	_DNEGA:	.byte   7
 1412 0a09 444E4547 		.ascii "DNEGATE"
 1412      415445
 1413              		.p2align 2 	
 1414              	DNEGA:
 1415 0a10 0C68     		LDR	R4,[R1]
 1416 0a12 A6EB0606 		SUB	R6,R6,R6
 1417 0a16 341B     		SUBS R4,R6,R4
 1418 0a18 66EB0505 		SBC	R5,R6,R5
 1419 0a1c 0C60     		STR	R4,[R1]
 1420 0a1e 7047     		_NEXT
 1421              	
 1422              	// **************************************************************************
 1423              	//  System and user variables
 1424              	
 1425              	//    doVAR	( -- a )
 1426              	// 	Run time routine for VARIABLE and CREATE.
 1427              	
 1428              	// 	.word	_DNEGA+MAPOFFSET
 1429              	// _DOVAR	.byte  COMPO+5
 1430              	// 	.ascii "doVAR"
 1431              	// 	.p2align 2 	
 1432              	DOVAR:
 1433 0a20 41F8045D 		_PUSH
 1434 0a24 AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
 1435 0a28 52F804FB 		_UNNEST
 1436              	
 1437              	//    doCON	( -- a ) 
 1438              	// 	Run time routine for CONSTANT.
 1439              	
 1440              	// 	.word	_DOVAR+MAPOFFSET
 1441              	// _DOCON	.byte  COMPO+5
 1442              	// 	.ascii "doCON"
 1443              	// 	.p2align 2 	
 1444              	DOCON:
 1445 0a2c 41F8045D 		_PUSH
 1446 0a30 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1447 0a34 52F804FB 		_UNNEST
 1448              	
 1449              	/***********************
 1450              	  system variables 
ARM GAS  stm32eforth.s 			page 29


 1451              	***********************/
 1452              	
 1453              	 // SEED ( -- a)
 1454              	 // return PRNG seed address 
 1455              	
 1456 0a38 08FEFF17 		.word _DNEGA+MAPOFFSET
 1457 0a3c 04       	_SEED: .byte 4
 1458 0a3d 53454544 		.ascii "SEED"
 1459 0a41 0000BF   		.p2align 2
 1460              	SEED:
 1461 0a44 41F8045D 		_PUSH 
 1462 0a48 03F10405 		ADD R5,R3,#SEED_OFS
 1463 0a4c 7047     		_NEXT 	
 1464              	
 1465              	//  MSEC ( -- a)
 1466              	// return address of milliseconds counter
 1467 0a4e 3CFEFF17 	  .word _SEED+MAPOFFSET 
 1468 0a52 04       	_MSEC: .byte 4
 1469 0a53 4D534543 	  .ascii "MSEC"
 1470 0a57 00       	  .p2align 2 
 1471              	MSEC:
 1472 0a58 41F8045D 	  _PUSH
 1473 0a5c 03F10805 	  ADD R5,R3,#TICKS_OFS
 1474 0a60 7047     	  _NEXT 
 1475              	
 1476              	// TIMER ( -- a )
 1477              	// count down timer 
 1478 0a62 52FEFF17 	  .word _MSEC+MAPOFFSET
 1479 0a66 05       	_TIMER:  .byte 5
 1480 0a67 54494D45 	  .ascii "TIMER"
 1480      52
 1481              	  .p2align 2 
 1482              	TIMER:
 1483 0a6c 41F8045D 	  _PUSH 
 1484 0a70 03F10C05 	  ADD R5,R3,#TIMER_OFS
 1485 0a74 7047     	  _NEXT
 1486              	
 1487              	// >RAM ( -- a )
 1488              	// compilation target 
 1489              	// -1 compile to RAM, 0 compile to FLASH 
 1490 0a76 66FEFF17 		.word _TIMER+MAPOFFSET
 1491 0a7a 04       	_TORAM: .byte 4 
 1492 0a7b 3E52414D 		.ascii ">RAM" 
 1493 0a7f 00       		.p2align 2 
 1494              	TORAM:
 1495 0a80 41F8045D 		_PUSH 
 1496 0a84 03F11005 		ADD R5,R3,#TORAM_OFS
 1497 0a88 7047     		_NEXT 
 1498              	
 1499              	//    'BOOT	 ( -- a )
 1500              	// 	Application.
 1501              	
 1502 0a8a 7AFEFF17 		.word	_TORAM+MAPOFFSET
 1503 0a8e 05       	_TBOOT:	.byte   5
 1504 0a8f 27424F4F 		.ascii "'BOOT"
 1504      54
 1505              		.p2align 2 	
ARM GAS  stm32eforth.s 			page 30


 1506              	TBOOT:
 1507 0a94 41F8045D 		_PUSH
 1508 0a98 03F11805 		ADD	R5,R3,#BOOT_OFS 
 1509 0a9c 7047     		_NEXT
 1510              		
 1511              	//    BASE	( -- a )
 1512              	// 	Storage of the radix base for numeric I/O.
 1513              	
 1514 0a9e 8EFEFF17 		.word	_TBOOT+MAPOFFSET
 1515 0aa2 04       	_BASE:	.byte   4
 1516 0aa3 42415345 		.ascii "BASE"
 1517 0aa7 00       		.p2align 2 	
 1518              	BASE:
 1519 0aa8 41F8045D 		_PUSH
 1520 0aac 03F11C05 		ADD	R5,R3,#BASE_OFS
 1521 0ab0 7047     		_NEXT
 1522              	
 1523              	//    tmp	 ( -- a )
 1524              	// 	A temporary storage location used in parse and find.
 1525              	
 1526              	// 	.word	_BASE+MAPOFFSET
 1527              	// _TEMP	.byte   COMPO+3
 1528              	// 	.ascii "tmp"
 1529              	// 	.p2align 2 	
 1530              	TEMP:
 1531 0ab2 41F8045D 		_PUSH
 1532 0ab6 03F12005 		ADD	R5,R3,#TMP_OFS
 1533 0aba 7047     		_NEXT
 1534              	
 1535              	//    SPAN	( -- a )
 1536              	// 	Hold character count received by EXPECT.
 1537              	
 1538 0abc A2FEFF17 		.word	_BASE+MAPOFFSET
 1539 0ac0 04       	_SPAN:	.byte   4
 1540 0ac1 5350414E 		.ascii "SPAN"
 1541 0ac5 0000BF   		.p2align 2 	
 1542              	SPAN:
 1543 0ac8 41F8045D 		_PUSH
 1544 0acc 03F12405 		ADD	R5,R3,#SPAN_OFS
 1545 0ad0 7047     		_NEXT
 1546              	
 1547              	//    >IN	 ( -- a )
 1548              	// 	Hold the character pointer while parsing input stream.
 1549              	
 1550 0ad2 C0FEFF17 		.word	_SPAN+MAPOFFSET
 1551 0ad6 03       	_INN:	.byte   3
 1552 0ad7 3E494E   		.ascii ">IN"
 1553 0ada 00BF     		.p2align 2 	
 1554              	INN:
 1555 0adc 41F8045D 		_PUSH
 1556 0ae0 03F12805 		ADD	R5,R3,#TOIN_OFS
 1557 0ae4 7047     		_NEXT
 1558              	
 1559              	//    #TIB	( -- a )
 1560              	// 	Hold the current count and address of the terminal input buffer.
 1561              	
 1562 0ae6 D6FEFF17 		.word	_INN+MAPOFFSET
ARM GAS  stm32eforth.s 			page 31


 1563 0aea 04       	_NTIB:	.byte   4
 1564 0aeb 23544942 		.ascii "#TIB"
 1565 0aef 00       		.p2align 2 	
 1566              	NTIB:
 1567 0af0 41F8045D 		_PUSH
 1568 0af4 03F12C05 		ADD	R5,R3,#NTIB_OFS
 1569 0af8 7047     		_NEXT
 1570              	
 1571              	//    'EVAL	( -- a )
 1572              	// 	Execution vector of EVAL.
 1573              	
 1574 0afa EAFEFF17 		.word	_NTIB+MAPOFFSET
 1575 0afe 05       	_TEVAL:	.byte   5
 1576 0aff 27455641 		.ascii "'EVAL"
 1576      4C
 1577              		.p2align 2 	
 1578              	TEVAL:
 1579 0b04 41F8045D 		_PUSH
 1580 0b08 03F13405 		ADD	R5,R3,#EVAL_OFS
 1581 0b0c 7047     		_NEXT
 1582              	
 1583              	//    HLD	 ( -- a )
 1584              	// 	Hold a pointer in building a numeric output string.
 1585              	
 1586 0b0e FEFEFF17 		.word	_TEVAL+MAPOFFSET
 1587 0b12 03       	_HLD:	.byte   3
 1588 0b13 484C44   		.ascii "HLD"
 1589 0b16 00BF     		.p2align 2 	
 1590              	HLD:
 1591 0b18 41F8045D 		_PUSH
 1592 0b1c 03F13805 		ADD	R5,R3,#HLD_OFS
 1593 0b20 7047     		_NEXT
 1594              	
 1595              	//    CONTEXT	( -- a )
 1596              	// 	A area to specify vocabulary search order.
 1597              	
 1598 0b22 12FFFF17 		.word	_HLD+MAPOFFSET
 1599 0b26 07       	_CNTXT:	.byte   7
 1600 0b27 434F4E54 		.ascii "CONTEXT"
 1600      455854
 1601 0b2e 00BF     		.p2align 2 	
 1602              	CNTXT:
 1603              	CRRNT:
 1604 0b30 41F8045D 		_PUSH
 1605 0b34 03F13C05 		ADD	R5,R3,#CTXT_OFS
 1606 0b38 7047     		_NEXT
 1607              	
 1608              	//    CP	( -- a )
 1609              	// 	Point to top name in RAM vocabulary.
 1610              	
 1611 0b3a 26FFFF17 		.word	_CNTXT+MAPOFFSET
 1612 0b3e 02       	_CP:	.byte   2
 1613 0b3f 4350     		.ascii "CP"
 1614 0b41 0000BF   		.p2align 2 	
 1615              	CPP:
 1616 0b44 41F8045D 		_PUSH
 1617 0b48 03F14405 		ADD	R5,R3,#USER_CTOP_OFS
ARM GAS  stm32eforth.s 			page 32


 1618 0b4c 7047     		_NEXT
 1619              	
 1620              	//   FCP ( -- a )
 1621              	//  Point ot top of Forth system dictionary
 1622 0b4e 3EFFFF17 		.word _CP+MAPOFFSET
 1623 0b52 03       	_FCP: .byte 3            
 1624 0b53 464350   		.ascii "FCP"
 1625 0b56 00BF     		.p2align 2 
 1626              	FCP: 
 1627 0b58 41F8045D 		_PUSH 
 1628 0b5c 03F14005 		ADD R5,R3,#FORTH_CTOP_OFS 
 1629 0b60 7047     		_NEXT 
 1630              	
 1631              	//    LAST	( -- a )
 1632              	// 	Point to the last name in the name dictionary.
 1633              	
 1634 0b62 52FFFF17 		.word	_FCP+MAPOFFSET
 1635 0b66 04       	_LAST:	.byte   4
 1636 0b67 4C415354 		.ascii "LAST"
 1637 0b6b 00       		.p2align 2 	
 1638              	LAST:
 1639 0b6c 41F8045D 		_PUSH
 1640 0b70 03F14805 		ADD	R5,R3,#LASTN_OFS
 1641 0b74 7047     		_NEXT
 1642              	
 1643              	/***********************
 1644              		system constants 
 1645              	***********************/
 1646              	
 1647              	//	USER_BEGIN ( -- a )
 1648              	//  where user area begin in RAM
 1649 0b76 66FFFF17 		.word _LAST+MAPOFFSET
 1650 0b7a 0A       	_USER_BGN: .byte 10
 1651 0b7b 55534552 		.ascii "USER_BEGIN"
 1651      5F424547 
 1651      494E
 1652 0b85 0000BF   		.p2align 2
 1653              	USER_BEGIN:
 1654 0b88 41F8045D 		_PUSH 
 1655 0b8c 004D     		ldr r5,USR_BGN_ADR 
 1656 0b8e 7047     		_NEXT 
 1657              	USR_BGN_ADR:
 1658 0b90 481C0018 	.word CTOP+MAPOFFSET 
 1659              	
 1660              	//  USER_END ( -- a )
 1661              	//  where user area end in RAM 
 1662 0b94 7AFFFF17 		.word _USER_BGN+MAPOFFSET
 1663 0b98 08       	_USER_END: .byte 8 
 1664 0b99 55534552 		.ascii "USER_END" 
 1664      5F454E44 
 1665 0ba1 0000BF   		.p2align 2 
 1666              	USER_END:
 1667 0ba4 41F8045D 		_PUSH 
 1668 0ba8 4FF49C45 		mov r5,#DEND&0xffff
 1669 0bac C2F20005 		movt r5,#DEND>>16 
 1670 0bb0 7047     		_NEXT 
 1671              	
ARM GAS  stm32eforth.s 			page 33


 1672              	//  IMG_ADR ( -- a )
 1673              	//  where user image is saved in FLASH
 1674 0bb2 98FFFF17 		.word _USER_END+MAPOFFSET
 1675 0bb6 07       	_IMG_ADR: .byte 7
 1676 0bb7 494D475F 		.ascii "IMG_ADR"
 1676      414452
 1677 0bbe 00BF     		.p2align 2 
 1678              	IMG_ADR:
 1679 0bc0 41F8045D 		_PUSH
 1680 0bc4 004D     		ldr r5,USR_IMG_ADR   
 1681 0bc6 7047     		_NEXT 
 1682              	USR_IMG_ADR:
 1683 0bc8 002C0000 		.word USER_SPACE 
 1684              	
 1685              	// image signature 
 1686 0bcc B6FFFF17 		.word _IMG_ADR+MAPOFFSET
 1687 0bd0 08       	_IMG_SIGN: .byte 8
 1688 0bd1 494D475F 		.ascii "IMG_SIGN"
 1688      5349474E 
 1689 0bd9 0000BF   		.p2align 2	
 1690              	IMG_SIGN: 
 1691 0bdc 41F8045D 		_PUSH 
 1692 0be0 03F11405 		ADD r5,r3,#IMG_SIGN_OFS 
 1693 0be4 7047     		_NEXT 
 1694              	
 1695              	/* *********************
 1696              	  Common functions
 1697              	***********************/
 1698              	
 1699              	//    WITHIN	( u ul uh -- t )
 1700              	// 	Return true if u is within the range of ul and uh.
 1701              	
 1702 0be6 B6FFFF17 		.word	_IMG_ADR+MAPOFFSET
 1703 0bea 06       	_WITHI:	.byte   6
 1704 0beb 57495448 		.ascii "WITHIN"
 1704      494E
 1705 0bf1 0000BF   		.p2align 2 	
 1706              	WITHI:
 1707 0bf4 42F804ED 		_NEST
 1708 0bf8 FFF760FD 		BL	OVER
 1709 0bfc FFF7B8FD 		BL	SUBB
 1710 0c00 FFF72EFD 		BL	TOR
 1711 0c04 FFF7B4FD 		BL	SUBB
 1712 0c08 FFF718FD 		BL	RFROM
 1713 0c0c FFF798FE 		BL	ULESS
 1714 0c10 52F804FB 		_UNNEST
 1715              	
 1716              	//  Divide
 1717              	
 1718              	//    UM/MOD	( udl udh u -- ur uq )
 1719              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1720              	
 1721 0c14 EAFFFF17 		.word	_WITHI+MAPOFFSET
 1722 0c18 06       	_UMMOD:	.byte   6
 1723 0c19 554D2F4D 		.ascii "UM/MOD"
 1723      4F44
 1724 0c1f 00       		.p2align 2 	
ARM GAS  stm32eforth.s 			page 34


 1725              	UMMOD:
 1726 0c20 4FF00107 		MOV	R7,#1
 1727 0c24 51F8044B 		LDR	R4,[R1],#4
 1728 0c28 0E68     		LDR	R6,[R1]
 1729              	UMMOD0:
 1730 0c2a B619     		ADDS	R6,R6,R6
 1731 0c2c 6441     		ADCS	R4,R4,R4
 1732 0c2e 04D3     		BCC	UMMOD1
 1733 0c30 A4EB0504 		SUB	R4,R4,R5
 1734 0c34 06F10106 		ADD	R6,R6,#1
 1735 0c38 04E0     		B UMMOD2
 1736              	UMMOD1:
 1737 0c3a 641B     		SUBS	R4,R4,R5 
 1738 0c3c 28BF     		IT CS 
 1739 0c3e 0136     		ADDCS	R6,R6,#1
 1740 0c40 00D2     		BCS	UMMOD2
 1741 0c42 2C44     		ADD	R4,R4,R5
 1742              	UMMOD2:
 1743 0c44 FF19     		ADDS	R7,R7,R7
 1744 0c46 F0D3     		BCC	UMMOD0
 1745 0c48 3546     		MOV	R5,R6
 1746 0c4a 0C60     		STR	R4,[R1]
 1747 0c4c 7047     		_NEXT
 1748              	
 1749              	//    M/MOD	( d n -- r q )
 1750              	// 	Signed floored divide of double by single. Return mod and quotient.
 1751              	
 1752 0c4e 18000018 		.word	_UMMOD+MAPOFFSET
 1753 0c52 05       	_MSMOD:	.byte  5
 1754 0c53 4D2F4D4F 		.ascii "M/MOD"
 1754      44
 1755              		.p2align 2 	
 1756              	MSMOD:	
 1757 0c58 42F804ED 		_NEST
 1758 0c5c FFF71CFD 		BL	DUPP
 1759 0c60 FFF734FD 		BL	ZLESS
 1760 0c64 FFF718FD 		BL	DUPP
 1761 0c68 FFF7FAFC 		BL	TOR
 1762 0c6c FFF7AAFC 		BL	QBRAN
 1763 0c70 84000018 		.word	MMOD1+MAPOFFSET
 1764 0c74 FFF73CFE 		BL	NEGAT
 1765 0c78 FFF7F2FC 		BL	TOR
 1766 0c7c FFF7C8FE 		BL	DNEGA
 1767 0c80 FFF7DCFC 		BL	RFROM
 1768              	MMOD1:
 1769 0c84 FFF7ECFC 	  BL	TOR
 1770 0c88 FFF706FD 		BL	DUPP
 1771 0c8c FFF71EFD 		BL	ZLESS
 1772 0c90 FFF798FC 		BL	QBRAN
 1773 0c94 A0000018 		.word	MMOD2+MAPOFFSET
 1774 0c98 FFF7DAFC 		BL	RAT
 1775 0c9c FFF760FD 		BL	PLUS
 1776              	MMOD2:
 1777 0ca0 FFF7CCFC 	  BL	RFROM
 1778 0ca4 FFF7BCFF 		BL	UMMOD
 1779 0ca8 FFF7C8FC 		BL	RFROM
 1780 0cac FFF78AFC 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 35


 1781 0cb0 C0000018 		.word	MMOD3+MAPOFFSET
 1782 0cb4 FFF7F8FC 		BL	SWAP
 1783 0cb8 FFF71AFE 		BL	NEGAT
 1784 0cbc FFF7F4FC 		BL	SWAP
 1785              	MMOD3:   
 1786 0cc0 52F804FB 		_UNNEST
 1787              	
 1788              	//    /MOD	( n n -- r q )
 1789              	// 	Signed divide. Return mod and quotient.
 1790              	
 1791 0cc4 52000018 		.word	_MSMOD+MAPOFFSET
 1792 0cc8 04       	_SLMOD:	.byte   4
 1793 0cc9 2F4D4F44 		.ascii "/MOD"
 1794 0ccd 0000BF   		.p2align 2 	
 1795              	SLMOD:
 1796 0cd0 42F804ED 		_NEST
 1797 0cd4 FFF7F2FC 		BL	OVER
 1798 0cd8 FFF7F8FC 		BL	ZLESS
 1799 0cdc FFF7E4FC 		BL	SWAP
 1800 0ce0 FFF7BAFF 		BL	MSMOD
 1801 0ce4 52F804FB 		_UNNEST
 1802              	
 1803              	//    MOD	 ( n n -- r )
 1804              	// 	Signed divide. Return mod only.
 1805              	
 1806 0ce8 C8000018 		.word	_SLMOD+MAPOFFSET
 1807 0cec 03       	_MODD:	.byte  3
 1808 0ced 4D4F44   		.ascii "MOD"
 1809              		.p2align 2 	
 1810              	MODD:
 1811 0cf0 42F804ED 		_NEST
 1812 0cf4 FFF7ECFF 		BL	SLMOD
 1813 0cf8 FFF7C6FC 		BL	DROP
 1814 0cfc 52F804FB 		_UNNEST
 1815              	
 1816              	//    /	   ( n n -- q )
 1817              	// 	Signed divide. Return quotient only.
 1818              	
 1819 0d00 EC000018 		.word	_MODD+MAPOFFSET
 1820 0d04 01       	_SLASH:	.byte  1
 1821 0d05 2F       		.ascii "/"
 1822 0d06 00BF     		.p2align 2 	
 1823              	SLASH:
 1824 0d08 42F804ED 		_NEST
 1825 0d0c FFF7E0FF 		BL	SLMOD
 1826 0d10 FFF7CAFC 		BL	SWAP
 1827 0d14 FFF7B8FC 		BL	DROP
 1828 0d18 52F804FB 		_UNNEST
 1829              	
 1830              	//    */MOD	( n1 n2 n3 -- r q )
 1831              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1832              	
 1833 0d1c 04010018 		.word	_SLASH+MAPOFFSET
 1834 0d20 05       	_SSMOD:	.byte  5
 1835 0d21 2A2F4D4F 		.ascii "*/MOD"
 1835      44
 1836 0d26 00BF     		.p2align 2 	
ARM GAS  stm32eforth.s 			page 36


 1837              	SSMOD:
 1838 0d28 42F804ED 		_NEST
 1839 0d2c FFF798FC 		BL	TOR
 1840 0d30 FFF73AFD 		BL	MSTAR
 1841 0d34 FFF782FC 		BL	RFROM
 1842 0d38 FFF78EFF 		BL	MSMOD
 1843 0d3c 52F804FB 		_UNNEST
 1844              	
 1845              	//    */	  ( n1 n2 n3 -- q )
 1846              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1847              	
 1848 0d40 20010018 		.word	_SSMOD+MAPOFFSET
 1849 0d44 02       	_STASL:	.byte  2
 1850 0d45 2A2F     		.ascii "*/"
 1851 0d47 00       		.p2align 2 	
 1852              	STASL:
 1853 0d48 42F804ED 		_NEST
 1854 0d4c FFF7ECFF 		BL	SSMOD
 1855 0d50 FFF7AAFC 		BL	SWAP
 1856 0d54 FFF798FC 		BL	DROP
 1857 0d58 52F804FB 		_UNNEST
 1858              	
 1859              	// **************************************************************************
 1860              	//  Miscellaneous
 1861              	
 1862              	//    ALIGNED	( b -- a )
 1863              	// 	Align address to the cell boundary.
 1864              	
 1865 0d5c 44010018 		.word	_STASL+MAPOFFSET
 1866 0d60 07       	_ALGND:	.byte   7
 1867 0d61 414C4947 		.ascii "ALIGNED"
 1867      4E4544
 1868              		.p2align 2 	
 1869              	ALGND:
 1870 0d68 05F10305 		ADD	R5,R5,#3
 1871 0d6c 6FF00304 		MVN	R4,#3
 1872 0d70 05EA0405 		AND	R5,R5,R4
 1873 0d74 7047     		_NEXT
 1874              	
 1875              	//    >CHAR	( c -- c )
 1876              	// 	Filter non-printing characters.
 1877              	
 1878 0d76 60010018 		.word	_ALGND+MAPOFFSET
 1879 0d7a 05       	_TCHAR:	.byte  5
 1880 0d7b 3E434841 		.ascii ">CHAR"
 1880      52
 1881              		.p2align 2 	
 1882              	TCHAR:
 1883 0d80 42F804ED 		_NEST
 1884 0d84 FFF7FBFB 		_DOLIT
 1885 0d88 7F000000 		.word	0x7F
 1886 0d8c FFF7A8FC 		BL	ANDD
 1887 0d90 FFF782FC 		BL	DUPP	// mask msb
 1888 0d94 FFF742FD 		BL	BLANK
 1889 0d98 FFF7F1FB 		_DOLIT
 1890 0d9c 7F000000 		.word	127
 1891 0da0 FFF728FF 		BL	WITHI	// check for printable
ARM GAS  stm32eforth.s 			page 37


 1892 0da4 FFF79AFD 		BL	INVER
 1893 0da8 FFF70CFC 		BL	QBRAN
 1894 0dac BC010018 		.word	TCHA1+MAPOFFSET
 1895 0db0 FFF76AFC 		BL	DROP
 1896 0db4 FFF7E3FB 		_DOLIT
 1897 0db8 5F000000 		.word	'_'	// replace non-printables
 1898              	TCHA1:
 1899 0dbc 52F804FB 		  _UNNEST
 1900              	
 1901              	//    DEPTH	( -- n )
 1902              	// 	Return the depth of the data stack.
 1903              	
 1904 0dc0 7A010018 		.word	_TCHAR+MAPOFFSET
 1905 0dc4 05       	_DEPTH:	.byte  5
 1906 0dc5 44455054 		.ascii "DEPTH"
 1906      48
 1907 0dca 00BF     		.p2align 2 	
 1908              	DEPTH:
 1909 0dcc 03F59D46 		ADD	R6,R3,#SPP&0xffff 
 1910 0dd0 A6EB0106 		SUB	R6,R6,R1
 1911 0dd4 41F8045D 		_PUSH
 1912 0dd8 4FEAA605 		ASR	R5,R6,#2
 1913 0ddc 7047     		_NEXT
 1914              	
 1915              	//    PICK	( ... +n -- ... w )
 1916              	// 	Copy the nth stack item to tos.
 1917              	
 1918 0dde C4010018 		.word	_DEPTH+MAPOFFSET
 1919 0de2 04       	_PICK:	.byte  4
 1920 0de3 5049434B 		.ascii "PICK"
 1921 0de7 00       		.p2align 2 	
 1922              	PICK:
 1923 0de8 42F804ED 		_NEST
 1924 0dec FFF7E6FC 		BL	ONEP
 1925 0df0 FFF71EFD 		BL	CELLS
 1926 0df4 FFF73EFC 		BL	SPAT
 1927 0df8 FFF7B2FC 		BL	PLUS
 1928 0dfc FFF708FC 		BL	AT
 1929 0e00 52F804FB 		_UNNEST
 1930              	
 1931              	// **************************************************************************
 1932              	//  Memory access
 1933              	
 1934              	//    HERE	( -- a )
 1935              	// 	Return the top of the code dictionary.
 1936              	
 1937 0e04 E2010018 		.word	_PICK+MAPOFFSET
 1938 0e08 04       	_HERE:	.byte  4
 1939 0e09 48455245 		.ascii "HERE"
 1940 0e0d 0000BF   		.p2align 2 	
 1941              	HERE:
 1942 0e10 42F804ED 		_NEST
 1943 0e14 FFF796FE 		BL	CPP
 1944 0e18 FFF7FAFB 		BL	AT
 1945 0e1c 52F804FB 		_UNNEST
 1946              		
 1947              	//    PAD	 ( -- a )
ARM GAS  stm32eforth.s 			page 38


 1948              	// 	Return the address of a temporary buffer.
 1949              	
 1950 0e20 08020018 		.word	_HERE+MAPOFFSET
 1951 0e24 03       	_PAD:	.byte  3
 1952 0e25 504144   		.ascii "PAD"
 1953              		.p2align 2 	
 1954              	PAD:
 1955 0e28 42F804ED 		_NEST
 1956 0e2c FFF7F0FF 		BL	HERE
 1957 0e30 05F15005 		ADD	R5,R5,#80
 1958 0e34 52F804FB 		_UNNEST
 1959              	
 1960              	//    TIB	 ( -- a )
 1961              	// 	Return the address of the terminal input buffer.
 1962              	
 1963 0e38 24020018 		.word	_PAD+MAPOFFSET
 1964 0e3c 03       	_TIB:	.byte  3
 1965 0e3d 544942   		.ascii "TIB"
 1966              		.p2align 2 	
 1967              	TIB:
 1968 0e40 41F8045D 		_PUSH
 1969 0e44 1D6B     		ldr r5,[r3,#TIB_OFS]
 1970 0e46 7047     		_NEXT
 1971              	
 1972              	//    @EXECUTE	( a -- )
 1973              	// 	Execute vector stored in address a.
 1974              	
 1975 0e48 3C020018 		.word	_TIB+MAPOFFSET
 1976 0e4c 08       	_ATEXE:	.byte   8
 1977 0e4d 40455845 		.ascii "@EXECUTE"
 1977      43555445 
 1978 0e55 0000BF   		.p2align 2 	
 1979              	ATEXE:
 1980 0e58 2C00     		MOVS	R4,R5
 1981 0e5a 51F8045B 		_POP
 1982 0e5e 2468     		LDR	R4,[R4]
 1983 0e60 44F00104 		ORR	R4,R4,#1
 1984 0e64 18BF     	    IT NE 
 1985 0e66 2047     		BXNE	R4
 1986 0e68 7047     		_NEXT
 1987              	
 1988              	//    CMOVE	( b1 b2 u -- )
 1989              	// 	Copy u bytes from b1 to b2.
 1990              	
 1991 0e6a 4C020018 		.word	_ATEXE+MAPOFFSET
 1992 0e6e 05       	_CMOVE:	.byte   5
 1993 0e6f 434D4F56 		.ascii "CMOVE"
 1993      45
 1994              		.p2align 2 	
 1995              	CMOVE:
 1996 0e74 51F8046B 		LDR	R6,[R1],#4
 1997 0e78 51F8047B 		LDR	R7,[R1],#4
 1998 0e7c 03E0     		B CMOV1
 1999              	CMOV0:
 2000 0e7e 17F8014B 		LDRB	R4,[R7],#1
 2001 0e82 06F8014B 		STRB	R4,[R6],#1
 2002              	CMOV1:
ARM GAS  stm32eforth.s 			page 39


 2003 0e86 2D00     		MOVS	R5,R5
 2004 0e88 02D0     		BEQ	CMOV2
 2005 0e8a A5F10105 		SUB	R5,R5,#1
 2006 0e8e F6E7     		B CMOV0
 2007              	CMOV2:
 2008 0e90 51F8045B 		_POP
 2009 0e94 7047     		_NEXT
 2010              	
 2011              	//    MOVE	( a1 a2 u -- )
 2012              	// 	Copy u words from a1 to a2.
 2013              	
 2014 0e96 6E020018 		.word	_CMOVE+MAPOFFSET
 2015 0e9a 04       	_MOVE:	.byte   4
 2016 0e9b 4D4F5645 		.ascii "MOVE"
 2017 0e9f 00       		.p2align 2 	
 2018              	MOVE:
 2019 0ea0 25F00305 		AND	R5,R5,#-4
 2020 0ea4 51F8046B 		LDR	R6,[R1],#4
 2021 0ea8 51F8047B 		LDR	R7,[R1],#4
 2022 0eac 03E0     		B MOVE1
 2023              	MOVE0:
 2024 0eae 57F8044B 		LDR	R4,[R7],#4
 2025 0eb2 46F8044B 		STR	R4,[R6],#4
 2026              	MOVE1:
 2027 0eb6 2D00     		MOVS	R5,R5
 2028 0eb8 02D0     		BEQ	MOVE2
 2029 0eba A5F10405 		SUB	R5,R5,#4
 2030 0ebe F6E7     		B MOVE0
 2031              	MOVE2:
 2032 0ec0 51F8045B 		_POP
 2033 0ec4 7047     		_NEXT
 2034              	
 2035              	//    FILL	( b u c -- )
 2036              	// 	Fill u bytes of character c to area beginning at b.
 2037              	
 2038 0ec6 9A020018 		.word	_MOVE+MAPOFFSET
 2039 0eca 04       	_FILL:	.byte   4
 2040 0ecb 46494C4C 		.ascii "FILL"
 2041 0ecf 00       		.p2align 2 	
 2042              	FILL:
 2043 0ed0 51F8046B 		LDR	R6,[R1],#4
 2044 0ed4 51F8047B 		LDR	R7,[R1],#4
 2045              	FILL0:
 2046 0ed8 00E0     		B FILL1
 2047 0eda 2D46     		MOV	R5,R5
 2048              	FILL1:
 2049 0edc 07F8015B 		STRB	R5,[R7],#1
 2050 0ee0 3600     		MOVS	R6,R6
 2051 0ee2 02D0     		BEQ	FILL2
 2052 0ee4 A6F10106 		SUB	R6,R6,#1
 2053 0ee8 F6E7     		B FILL0
 2054              	FILL2:
 2055 0eea 51F8045B 		_POP
 2056 0eee 7047     		_NEXT
 2057              	
 2058              	//    PACK$	( b u a -- a )
 2059              	// 	Build a counted word with u characters from b. Null fill.
ARM GAS  stm32eforth.s 			page 40


 2060              	
 2061 0ef0 CA020018 		.word	_FILL+MAPOFFSET
 2062 0ef4 05       	_PACKS:	.byte  5
 2063 0ef5 5041434B 		.ascii "PACK$$"
 2063      2424
 2064 0efb 00       		.p2align 2 	
 2065              	PACKS:
 2066 0efc 42F804ED 		_NEST
 2067 0f00 FFF732FF 		BL	ALGND
 2068 0f04 FFF7C8FB 		BL	DUPP
 2069 0f08 FFF7AAFB 		BL	TOR			// strings only on cell boundary
 2070 0f0c FFF7D6FB 		BL	OVER
 2071 0f10 FFF726FC 		BL	PLUS
 2072 0f14 FFF752FC 		BL	ONEP
 2073 0f18 FFF731FB 		_DOLIT
 2074 0f1c FCFFFFFF 		.word	0xFFFFFFFC
 2075 0f20 FFF7DEFB 		BL	ANDD			// count mod cell
 2076 0f24 FFF72BFB 		_DOLIT
 2077 0f28 00000000 		.word	0
 2078 0f2c FFF7BCFB 		BL	SWAP
 2079 0f30 FFF764FB 		BL	STORE			// null fill cell
 2080 0f34 FFF78CFB 		BL	RAT
 2081 0f38 FFF7B8FC 		BL	DDUP
 2082 0f3c FFF76EFB 		BL	CSTOR
 2083 0f40 FFF73CFC 		BL	ONEP			// save count
 2084 0f44 FFF7B0FB 		BL	SWAP
 2085 0f48 FFF794FF 		BL	CMOVE
 2086 0f4c FFF776FB 		BL	RFROM
 2087 0f50 52F804FB 		_UNNEST   			// move string
 2088              	
 2089              	// **************************************************************************
 2090              	//  Numeric output, single precision
 2091              	
 2092              	//    DIGIT	( u -- c )
 2093              	// 	Convert digit u to a character.
 2094              	
 2095 0f54 F4020018 		.word	_PACKS+MAPOFFSET
 2096 0f58 05       	_DIGIT:	.byte  5
 2097 0f59 44494749 		.ascii "DIGIT"
 2097      54
 2098 0f5e 00BF     		.p2align 2 	
 2099              	DIGIT:
 2100 0f60 42F804ED 		_NEST
 2101 0f64 FFF70BFB 		_DOLIT
 2102 0f68 09000000 		.word	9
 2103 0f6c FFF7A6FB 		BL	OVER
 2104 0f70 FFF7F2FC 		BL	LESS
 2105 0f74 05F00705 		AND	R5,R5,#7
 2106 0f78 FFF7F2FB 		BL	PLUS
 2107 0f7c 05F13005 		ADD	R5,R5,#'0'
 2108 0f80 52F804FB 		_UNNEST
 2109              	
 2110              	//    EXTRACT	( n base -- n c )
 2111              	// 	Extract the least significant digit from n.
 2112              	
 2113 0f84 58030018 		.word	_DIGIT+MAPOFFSET
 2114 0f88 07       	_EXTRC:	.byte  7
ARM GAS  stm32eforth.s 			page 41


 2115 0f89 45585452 		.ascii "EXTRACT"
 2115      414354
 2116              		.p2align 2 	
 2117              	EXTRC:
 2118 0f90 42F804ED 		_NEST
 2119 0f94 FFF7F3FA 		_DOLIT
 2120 0f98 00000000 		.word	0
 2121 0f9c FFF784FB 		BL	SWAP
 2122 0fa0 FFF73EFE 		BL	UMMOD
 2123 0fa4 FFF780FB 		BL	SWAP
 2124 0fa8 FFF7DAFF 		BL	DIGIT
 2125 0fac 52F804FB 		_UNNEST
 2126              	
 2127              	//    <#	  ( -- )
 2128              	// 	Initiate the numeric output process.
 2129              	
 2130 0fb0 88030018 		.word	_EXTRC+MAPOFFSET
 2131 0fb4 02       	_BDIGS:	.byte  2
 2132 0fb5 3C23     		.ascii "<#"
 2133 0fb7 00       		.p2align 2 	
 2134              	BDIGS:
 2135 0fb8 42F804ED 		_NEST
 2136 0fbc FFF734FF 		BL	PAD
 2137 0fc0 FFF7AAFD 		BL	HLD
 2138 0fc4 FFF71AFB 		BL	STORE
 2139 0fc8 52F804FB 		_UNNEST
 2140              	
 2141              	//    HOLD	( c -- )
 2142              	// 	Insert a character into the numeric output string.
 2143              	
 2144 0fcc B4030018 		.word	_BDIGS+MAPOFFSET
 2145 0fd0 04       	_HOLD:	.byte  4
 2146 0fd1 484F4C44 		.ascii "HOLD"
 2147 0fd5 0000BF   		.p2align 2 	
 2148              	HOLD:
 2149 0fd8 42F804ED 		_NEST
 2150 0fdc FFF79CFD 		BL	HLD
 2151 0fe0 FFF716FB 		BL	AT
 2152 0fe4 FFF7F2FB 		BL	ONEM
 2153 0fe8 FFF756FB 		BL	DUPP
 2154 0fec FFF794FD 		BL	HLD
 2155 0ff0 FFF704FB 		BL	STORE
 2156 0ff4 FFF712FB 		BL	CSTOR
 2157 0ff8 52F804FB 		_UNNEST
 2158              	
 2159              	//    #	   ( u -- u )
 2160              	// 	Extract one digit from u and append the digit to output string.
 2161              	
 2162 0ffc D0030018 		.word	_HOLD+MAPOFFSET
 2163 1000 01       	_DIG:	.byte  1
 2164 1001 23       		.ascii "#"
 2165 1002 00BF     		.p2align 2 	
 2166              	DIG:
 2167 1004 42F804ED 		_NEST
 2168 1008 FFF74EFD 		BL	BASE
 2169 100c FFF700FB 		BL	AT
 2170 1010 FFF7BEFF 		BL	EXTRC
ARM GAS  stm32eforth.s 			page 42


 2171 1014 FFF7E0FF 		BL	HOLD
 2172 1018 52F804FB 		_UNNEST
 2173              	
 2174              	//    #S	  ( u -- 0 )
 2175              	// 	Convert u until all digits are added to the output string.
 2176              	
 2177 101c 00040018 		.word	_DIG+MAPOFFSET
 2178 1020 02       	_DIGS:	.byte  2
 2179 1021 2353     		.ascii "#S"
 2180 1023 00       		.p2align 2 	
 2181              	DIGS:
 2182 1024 42F804ED 		_NEST
 2183              	DIGS1:
 2184 1028 FFF7ECFF 	    BL	DIG
 2185 102c FFF734FB 		BL	DUPP
 2186 1030 FFF7C8FA 		BL	QBRAN
 2187 1034 3A040018 		.word	DIGS2+MAPOFFSET
 2188 1038 F6E7     		B	DIGS1
 2189              	DIGS2:
 2190 103a 52F804FB 		  _UNNEST
 2191              	
 2192              	//    SIGN	( n -- )
 2193              	// 	Add a minus sign to the numeric output string.
 2194              	
 2195 103e 20040018 		.word	_DIGS+MAPOFFSET
 2196 1042 04       	_SIGN:	.byte  4
 2197 1043 5349474E 		.ascii "SIGN"
 2198 1047 00       		.p2align 2 	
 2199              	SIGN:
 2200 1048 42F804ED 		_NEST
 2201 104c FFF73EFB 		BL	ZLESS
 2202 1050 FFF7B8FA 		BL	QBRAN
 2203 1054 64040018 		.word	SIGN1+MAPOFFSET
 2204 1058 FFF791FA 		_DOLIT
 2205 105c 2D000000 		.word	'-'
 2206 1060 FFF7BAFF 		BL	HOLD
 2207              	SIGN1:
 2208 1064 52F804FB 		  _UNNEST
 2209              	
 2210              	//    #>	  ( w -- b u )
 2211              	// 	Prepare the outputDCB to be TYPE'd.
 2212              	
 2213 1068 42040018 		.word	_SIGN+MAPOFFSET
 2214 106c 02       	_EDIGS:	.byte  2
 2215 106d 233E     		.ascii "#>"
 2216 106f 00       		.p2align 2 	
 2217              	EDIGS:
 2218 1070 42F804ED 		_NEST
 2219 1074 FFF708FB 		BL	DROP
 2220 1078 FFF74EFD 		BL	HLD
 2221 107c FFF7C8FA 		BL	AT
 2222 1080 FFF7D2FE 		BL	PAD
 2223 1084 FFF71AFB 		BL	OVER
 2224 1088 FFF772FB 		BL	SUBB
 2225 108c 52F804FB 		_UNNEST
 2226              	
 2227              	//    str	 ( n -- b u )
ARM GAS  stm32eforth.s 			page 43


 2228              	// 	Convert a signed integer to a numeric string.
 2229              	
 2230              	// 	.word	_EDIGS+MAPOFFSET
 2231              	// _STRR	.byte  3
 2232              	// 	.ascii "str"
 2233              	// 	.p2align 2 	
 2234              	STRR:
 2235 1090 42F804ED 		_NEST
 2236 1094 FFF700FB 		BL	DUPP
 2237 1098 FFF7E2FA 		BL	TOR
 2238 109c FFF730FC 		BL	ABSS
 2239 10a0 FFF78AFF 		BL	BDIGS
 2240 10a4 FFF7BEFF 		BL	DIGS
 2241 10a8 FFF7C8FA 		BL	RFROM
 2242 10ac FFF7CCFF 		BL	SIGN
 2243 10b0 FFF7DEFF 		BL	EDIGS
 2244 10b4 52F804FB 		_UNNEST
 2245              	
 2246              	//    HEX	 ( -- )
 2247              	// 	Use radix 16 as base for numeric conversions.
 2248              	
 2249 10b8 6C040018 		.word	_EDIGS+MAPOFFSET
 2250 10bc 03       	_HEX:	.byte  3
 2251 10bd 484558   		.ascii "HEX"
 2252              		.p2align 2 	
 2253              	HEX:
 2254 10c0 42F804ED 		_NEST
 2255 10c4 FFF75BFA 		_DOLIT
 2256 10c8 10000000 		.word	16
 2257 10cc FFF7ECFC 		BL	BASE
 2258 10d0 FFF794FA 		BL	STORE
 2259 10d4 52F804FB 		_UNNEST
 2260              	
 2261              	//    DECIMAL	( -- )
 2262              	// 	Use radix 10 as base for numeric conversions.
 2263              	
 2264 10d8 BC040018 		.word	_HEX+MAPOFFSET
 2265 10dc 07       	_DECIM:	.byte  7
 2266 10dd 44454349 		.ascii "DECIMAL"
 2266      4D414C
 2267              		.p2align 2 	
 2268              	DECIM:
 2269 10e4 42F804ED 		_NEST
 2270 10e8 FFF749FA 		_DOLIT
 2271 10ec 0A000000 		.word	10
 2272 10f0 FFF7DAFC 		BL	BASE
 2273 10f4 FFF782FA 		BL	STORE
 2274 10f8 52F804FB 		_UNNEST
 2275              	
 2276              	// **************************************************************************
 2277              	//  Numeric input, single precision
 2278              	
 2279              	//    DIGIT?	( c base -- u t )
 2280              	// 	Convert a character to its numeric value. A flag indicates success.
 2281              	
 2282 10fc DC040018 		.word	_DECIM+MAPOFFSET
 2283 1100 06       	_DIGTQ:	.byte  6
ARM GAS  stm32eforth.s 			page 44


 2284 1101 44494749 		.ascii "DIGIT?"
 2284      543F
 2285 1107 00       		.p2align 2 	
 2286              	DIGTQ:
 2287 1108 42F804ED 		_NEST
 2288 110c FFF7A8FA 		BL	TOR
 2289 1110 FFF735FA 		_DOLIT
 2290 1114 30000000 		.word	'0'
 2291 1118 FFF72AFB 		BL	SUBB
 2292 111c FFF72FFA 		_DOLIT
 2293 1120 09000000 		.word	9
 2294 1124 FFF7CAFA 		BL	OVER
 2295 1128 FFF716FC 		BL	LESS
 2296 112c FFF74AFA 		BL	QBRAN
 2297 1130 54050018 		.word	DGTQ1+MAPOFFSET
 2298 1134 FFF723FA 		_DOLIT
 2299 1138 07000000 		.word	7
 2300 113c FFF718FB 		BL	SUBB
 2301 1140 FFF7AAFA 		BL	DUPP
 2302 1144 FFF71BFA 		_DOLIT
 2303 1148 0A000000 		.word	10
 2304 114c FFF704FC 		BL	LESS
 2305 1150 FFF7D0FA 		BL	ORR
 2306              	DGTQ1:
 2307 1154 FFF7A0FA 	  BL	DUPP
 2308 1158 FFF770FA 		BL	RFROM
 2309 115c FFF7F0FB 		BL	ULESS
 2310 1160 52F804FB 		_UNNEST
 2311              	
 2312              	//    NUMBER?	( a -- n T | a F )
 2313              	// 	Convert a number word to integer. Push a flag on tos.
 2314              	
 2315 1164 00050018 		.word	_DIGTQ+MAPOFFSET
 2316 1168 07       	_NUMBQ:	.byte  7
 2317 1169 4E554D42 		.ascii "NUMBER?"
 2317      45523F
 2318              		.p2align 2 	
 2319              	NUMBQ:
 2320 1170 42F804ED 		_NEST
 2321 1174 FFF798FC 		BL	BASE
 2322 1178 FFF74AFA 		BL	AT
 2323 117c FFF770FA 		BL	TOR
 2324 1180 FFF7FDF9 		_DOLIT
 2325 1184 00000000 		.word	0
 2326 1188 FFF798FA 		BL	OVER
 2327 118c FFF734FC 		BL	COUNT
 2328 1190 FFF794FA 		BL	OVER
 2329 1194 FFF74CFA 		BL	CAT
 2330 1198 FFF7F1F9 		_DOLIT
 2331 119c 24000000 		.word	'$'
 2332 11a0 FFF7C2FB 		BL	EQUAL
 2333 11a4 FFF70EFA 		BL	QBRAN
 2334 11a8 C0050018 		.word	NUMQ1+MAPOFFSET
 2335 11ac FFF788FF 		BL	HEX
 2336 11b0 FFF77AFA 		BL	SWAP
 2337 11b4 FFF702FB 		BL	ONEP
 2338 11b8 FFF776FA 		BL	SWAP
ARM GAS  stm32eforth.s 			page 45


 2339 11bc FFF706FB 		BL	ONEM
 2340              	NUMQ1:
 2341 11c0 FFF77CFA 		BL	OVER
 2342 11c4 FFF734FA 		BL	CAT
 2343 11c8 FFF7D9F9 		_DOLIT
 2344 11cc 2D000000 		.word	'-'
 2345 11d0 FFF7AAFB 		BL	EQUAL
 2346 11d4 FFF744FA 		BL	TOR
 2347 11d8 FFF766FA 		BL	SWAP
 2348 11dc FFF738FA 		BL	RAT
 2349 11e0 FFF7C6FA 		BL	SUBB
 2350 11e4 FFF760FA 		BL	SWAP
 2351 11e8 FFF732FA 		BL	RAT
 2352 11ec FFF7B8FA 		BL	PLUS
 2353 11f0 FFF73EFB 		BL	QDUP
 2354 11f4 FFF7E6F9 		BL	QBRAN
 2355 11f8 84060018 		.word	NUMQ6+MAPOFFSET
 2356 11fc FFF7E6FA 		BL	ONEM
 2357 1200 FFF72EFA 		BL	TOR
 2358              	NUMQ2:
 2359 1204 FFF748FA 		BL	DUPP
 2360 1208 FFF72AFA 		BL	TOR
 2361 120c FFF710FA 		BL	CAT
 2362 1210 FFF74AFC 		BL	BASE
 2363 1214 FFF7FCF9 		BL	AT
 2364 1218 FFF776FF 		BL	DIGTQ
 2365 121c FFF7D2F9 		BL	QBRAN
 2366 1220 68060018 		.word	NUMQ4+MAPOFFSET
 2367 1224 FFF740FA 		BL	SWAP
 2368 1228 FFF73EFC 		BL	BASE
 2369 122c FFF7F0F9 		BL	AT
 2370 1230 FFF7A6FA 		BL	STAR
 2371 1234 FFF794FA 		BL	PLUS
 2372 1238 FFF700FA 		BL	RFROM
 2373 123c FFF7BEFA 		BL	ONEP
 2374 1240 FFF7B1F9 		BL	DONXT
 2375 1244 04060018 		.word	NUMQ2+MAPOFFSET
 2376 1248 FFF702FA 		BL	RAT
 2377 124c FFF72CFA 		BL	SWAP
 2378 1250 FFF71AFA 		BL	DROP
 2379 1254 FFF7B6F9 		BL	QBRAN
 2380 1258 60060018 		.word	NUMQ3+MAPOFFSET
 2381 125c FFF748FB 		BL	NEGAT
 2382              	NUMQ3:
 2383 1260 FFF722FA 		BL	SWAP
 2384 1264 00F00CB8 		B.W	NUMQ5
 2385              	NUMQ4:
 2386 1268 FFF7E8F9 		BL	RFROM
 2387 126c FFF7E6F9 		BL	RFROM
 2388 1270 FFF712FB 		BL	DDROP
 2389 1274 FFF710FB 		BL	DDROP
 2390 1278 FFF781F9 		_DOLIT
 2391 127c 00000000 		.word	0
 2392              	NUMQ5:
 2393 1280 FFF70AFA 		BL	DUPP
 2394              	NUMQ6:
 2395 1284 FFF7DAF9 		BL	RFROM
ARM GAS  stm32eforth.s 			page 46


 2396 1288 FFF706FB 		BL	DDROP
 2397 128c FFF7D6F9 		BL	RFROM
 2398 1290 FFF70AFC 		BL	BASE
 2399 1294 FFF7B2F9 		BL	STORE
 2400 1298 52F804FB 		_UNNEST
 2401              	
 2402              	// **************************************************************************
 2403              	//  Basic I/O
 2404              	
 2405              	//    KEY	 ( -- c )
 2406              	// 	Wait for and return an input character.
 2407              	
 2408 129c 68050018 		.word	_NUMBQ+MAPOFFSET
 2409 12a0 03       	_KEY:	.byte  3
 2410 12a1 4B4559   		.ascii "KEY"
 2411              		.p2align 2 	
 2412              	KEY:
 2413 12a4 42F804ED 		_NEST
 2414              	KEY1:
 2415 12a8 FFF73EF9 		BL	QRX
 2416 12ac FFF78AF9 		BL	QBRAN
 2417 12b0 A8060018 		.word	KEY1+MAPOFFSET
 2418              	// CTRL-C reboot
 2419 12b4 FFF7F0F9 		BL DUPP 
 2420 12b8 FFF761F9 		BL DOLIT 
 2421 12bc 03000000 		.word 3 
 2422 12c0 FFF732FB 		BL EQUAL 
 2423 12c4 FFF70AFB 		BL INVER
 2424 12c8 FFF77CF9 		BL QBRAN
 2425 12cc ACF8FF17 		.word REBOOT+MAPOFFSET 
 2426 12d0 52F804FB 		_UNNEST
 2427              	
 2428              	//    SPACE	( -- )
 2429              	// 	Send the blank character to the output device.
 2430              	
 2431 12d4 A0060018 		.word	_KEY+MAPOFFSET
 2432 12d8 05       	_SPACE:	.byte  5
 2433 12d9 53504143 		.ascii "SPACE"
 2433      45
 2434 12de 00BF     		.p2align 2 	
 2435              	SPACE:
 2436 12e0 42F804ED 		_NEST
 2437 12e4 FFF79AFA 		BL	BLANK
 2438 12e8 FFF738F9 		BL	EMIT
 2439 12ec 52F804FB 		_UNNEST
 2440              	
 2441              	//    SPACES	( +n -- )
 2442              	// 	Send n spaces to the output device.
 2443              	
 2444 12f0 D8060018 		.word	_SPACE+MAPOFFSET
 2445 12f4 06       	_SPACS:	.byte  6
 2446 12f5 53504143 		.ascii "SPACES"
 2446      4553
 2447 12fb 00       		.p2align 2 	
 2448              	SPACS:
 2449 12fc 42F804ED 		_NEST
 2450 1300 FFF73DF9 		_DOLIT
ARM GAS  stm32eforth.s 			page 47


 2451 1304 00000000 		.word	0
 2452 1308 FFF73EFB 		BL	MAX
 2453 130c FFF7A8F9 		BL	TOR
 2454 1310 00F002B8 		B.W	CHAR2
 2455              	CHAR1:
 2456 1314 FFF7E4FF 		BL	SPACE
 2457              	CHAR2:
 2458 1318 FFF745F9 		BL	DONXT
 2459 131c 14070018 		.word	CHAR1+MAPOFFSET
 2460 1320 52F804FB 		_UNNEST
 2461              	
 2462              	//    TYPE	( b u -- )
 2463              	// 	Output u characters from b.
 2464              	
 2465 1324 F4060018 		.word	_SPACS+MAPOFFSET
 2466 1328 04       	_TYPEE:	.byte	4
 2467 1329 54595045 		.ascii "TYPE"
 2468 132d 0000BF   		.p2align 2 	
 2469              	TYPEE:
 2470 1330 42F804ED 		_NEST
 2471 1334 FFF794F9 		BL  TOR   // ( a+1 -- R: u )
 2472 1338 05E0     		B	TYPE2
 2473              	TYPE1:  
 2474 133a FFF75DFB 		BL  COUNT
 2475 133e FFF71FFD 		BL	TCHAR
 2476 1342 FFF70BF9 		BL	EMIT
 2477              	TYPE2:  
 2478 1346 FFF72EF9 		BL  DONXT  
 2479 134a 3A070018 		.word	TYPE1+MAPOFFSET
 2480 134e FFF79BF9 		BL	DROP
 2481 1352 52F804FB 		_UNNEST
 2482              	
 2483              	//    CR	  ( -- )
 2484              	// 	Output a carriage return and a line feed.
 2485              	
 2486 1356 28070018 		.word	_TYPEE+MAPOFFSET
 2487 135a 02       	_CR:	.byte  2
 2488 135b 4352     		.ascii "CR"
 2489 135d 0000BF   		.p2align 2 	
 2490              	CR:
 2491 1360 42F804ED 		_NEST
 2492 1364 FFF70BF9 		_DOLIT
 2493 1368 0D000000 		.word	CRR
 2494 136c FFF7F6F8 		BL	EMIT
 2495 1370 FFF705F9 		_DOLIT
 2496 1374 0A000000 		.word	LF
 2497 1378 FFF7F0F8 		BL	EMIT
 2498 137c 52F804FB 		_UNNEST
 2499              	
 2500              	//    do_$	( -- a )
 2501              	// 	Return the address of a compiled string.
 2502              	//  adjust return address to skip over it.
 2503              	
 2504              	// 	.word	_CR+MAPOFFSET
 2505              	// _DOSTR	.byte  COMPO+3
 2506              	// 	.ascii "do$$"
 2507              	// 	.p2align 2 	
ARM GAS  stm32eforth.s 			page 48


 2508              	DOSTR:
 2509 1380 42F804ED 		_NEST     
 2510              	/* compiled string address is 2 levels deep */
 2511 1384 FFF75AF9 		BL	RFROM	// { -- a1 }
 2512 1388 FFF758F9 		BL	RFROM	//  {a1 -- a1 a2 } b0 set
 2513 138c FFF71EFA 		BL	ONEM	//  clear b0
 2514 1390 FFF782F9 		BL	DUPP	// {a1 a2 -- a1 a2 a2 }
 2515 1394 FFF730FB 		BL	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2516 1398 FFF7E2F9 		BL	PLUS	// { -- a1 a2 a2+1+c }
 2517 139c FFF7E4FC 		BL	ALGND	//  end of string
 2518 13a0 FFF70CFA 		BL	ONEP	//  restore b0, this result in return address 2 level deep.
 2519 13a4 FFF75CF9 		BL	TOR		//  address after string { -- a1 a2 }
 2520 13a8 FFF77EF9 		BL	SWAP	//  count tugged
 2521 13ac FFF758F9 		BL	TOR     //  ( -- a2) is string address
 2522 13b0 52F804FB 		_UNNEST
 2523              	
 2524              	//    $"|	( -- a )
 2525              	// 	Run time routine compiled by _". Return address of a compiled string.
 2526              	
 2527              	// 	.word	_DOSTR+MAPOFFSET
 2528              	// _STRQP	.byte  COMPO+3
 2529              	// 	.ascii "$\"|"
 2530              	// 	.p2align 2 	
 2531              	STRQP:
 2532 13b4 42F804ED 		_NEST
 2533 13b8 FFF7E2FF 		BL	DOSTR
 2534 13bc 52F804FB 		_UNNEST			// force a call to dostr
 2535              	
 2536              	//    .$	( a -- )
 2537              	// 	Run time routine of ." . Output a compiled string.
 2538              	
 2539              	// 	.word	_STRQP+MAPOFFSET
 2540              	// _DOTST	.byte  COMPO+2
 2541              	// 	.ascii ".$$"
 2542              	// 	.p2align 2 	
 2543              	DOTST:
 2544 13c0 42F804ED 		_NEST
 2545 13c4 FFF718FB 		BL	COUNT // ( -- a+1 c )
 2546 13c8 FFF7B2FF 		BL	TYPEE
 2547 13cc 52F804FB 		_UNNEST
 2548              	
 2549              	//    ."|	( -- )
 2550              	// 	Run time routine of ." . Output a compiled string.
 2551              	
 2552              	// 	.word	_DOTST+MAPOFFSET
 2553              	// _DOTQP	.byte  COMPO+3
 2554              	// 	.ascii ".""|"
 2555              	// 	.p2align 2 	
 2556              	DOTQP:
 2557 13d0 42F804ED 		_NEST
 2558 13d4 FFF7D4FF 		BL	DOSTR
 2559 13d8 FFF7F2FF 		BL	DOTST
 2560 13dc 52F804FB 		_UNNEST
 2561              	
 2562              	//    .R	  ( n +n -- )
 2563              	// 	Display an integer in a field of n columns, right justified.
 2564              	
ARM GAS  stm32eforth.s 			page 49


 2565 13e0 5A070018 		.word	_CR+MAPOFFSET
 2566 13e4 02       	_DOTR:	.byte  2
 2567 13e5 2E52     		.ascii ".R"
 2568 13e7 00       		.p2align 2 	
 2569              	DOTR:
 2570 13e8 42F804ED 		_NEST
 2571 13ec FFF738F9 		BL	TOR
 2572 13f0 FFF74EFE 		BL	STRR
 2573 13f4 FFF722F9 		BL	RFROM
 2574 13f8 FFF760F9 		BL	OVER
 2575 13fc FFF7B8F9 		BL	SUBB
 2576 1400 FFF77CFF 		BL	SPACS
 2577 1404 FFF794FF 		BL	TYPEE
 2578 1408 52F804FB 		_UNNEST
 2579              	
 2580              	//    U.R	 ( u +n -- )
 2581              	// 	Display an unsigned integer in n column, right justified.
 2582              	
 2583 140c E4070018 		.word	_DOTR+MAPOFFSET
 2584 1410 03       	_UDOTR:	.byte  3
 2585 1411 552E52   		.ascii "U.R"
 2586              		.p2align 2 	
 2587              	UDOTR:
 2588 1414 42F804ED 		_NEST
 2589 1418 FFF722F9 		BL	TOR
 2590 141c FFF7CCFD 		BL	BDIGS
 2591 1420 FFF700FE 		BL	DIGS
 2592 1424 FFF724FE 		BL	EDIGS
 2593 1428 FFF708F9 		BL	RFROM
 2594 142c FFF746F9 		BL	OVER
 2595 1430 FFF79EF9 		BL	SUBB
 2596 1434 FFF762FF 		BL	SPACS
 2597 1438 FFF77AFF 		BL	TYPEE
 2598 143c 52F804FB 		_UNNEST
 2599              	
 2600              	//    U.	  ( u -- )
 2601              	// 	Display an unsigned integer in free format.
 2602              	
 2603 1440 10080018 		.word	_UDOTR+MAPOFFSET
 2604 1444 02       	_UDOT:	.byte  2
 2605 1445 552E     		.ascii "U."
 2606 1447 00       		.p2align 2 	
 2607              	UDOT:
 2608 1448 42F804ED 		_NEST
 2609 144c FFF7B4FD 		BL	BDIGS
 2610 1450 FFF7E8FD 		BL	DIGS
 2611 1454 FFF70CFE 		BL	EDIGS
 2612 1458 FFF742FF 		BL	SPACE
 2613 145c FFF768FF 		BL	TYPEE
 2614 1460 52F804FB 		_UNNEST
 2615              	
 2616              	//    .	   ( w -- )
 2617              	// 	Display an integer in free format, preceeded by a space.
 2618              	
 2619 1464 44080018 		.word	_UDOT+MAPOFFSET
 2620 1468 01       	_DOT:	.byte  1
 2621 1469 2E       		.ascii "."
ARM GAS  stm32eforth.s 			page 50


 2622 146a 00BF     		.p2align 2 	
 2623              	DOT:
 2624 146c 42F804ED 		_NEST
 2625 1470 FFF71AFB 		BL	BASE
 2626 1474 FFF7CCF8 		BL	AT
 2627 1478 FFF781F8 		_DOLIT
 2628 147c 0A000000 		.word	10
 2629 1480 FFF742F9 		BL	XORR			// ?decimal
 2630 1484 FFF79EF8 		BL	QBRAN
 2631 1488 94080018 		.word	DOT1+MAPOFFSET
 2632 148c FFF7DCFF 		BL	UDOT
 2633 1490 52F804FB 		_UNNEST			// no,display unsigned
 2634              	DOT1:
 2635 1494 FFF7FCFD 	    BL	STRR
 2636 1498 FFF722FF 		BL	SPACE
 2637 149c FFF748FF 		BL	TYPEE
 2638 14a0 52F804FB 		_UNNEST			// yes, display signed
 2639              	
 2640              	//    ?	   ( a -- )
 2641              	// 	Display the contents in a memory cell.
 2642              	
 2643 14a4 68080018 		.word	_DOT+MAPOFFSET
 2644 14a8 01       	_QUEST:	.byte  1
 2645 14a9 3F       		.ascii "?"
 2646 14aa 00BF     		.p2align 2 	
 2647              	QUEST:
 2648 14ac 42F804ED 		_NEST
 2649 14b0 FFF7AEF8 		BL	AT
 2650 14b4 FFF7DAFF 		BL	DOT
 2651 14b8 52F804FB 		_UNNEST
 2652              	
 2653              	// **************************************************************************
 2654              	//  Parsing
 2655              	
 2656              	//    parse	( b u c -- b u delta //  string> )
 2657              	// 	Scan word delimited by c. Return found string and its offset.
 2658              	
 2659              	// 	.word	_QUEST+MAPOFFSET
 2660              	// _PARS	.byte  5
 2661              	// 	.ascii "parse"
 2662              	// 	.p2align 2 	
 2663              	PARS:
 2664 14bc 42F804ED 		_NEST
 2665 14c0 FFF7F7FA 		BL	TEMP
 2666 14c4 FFF79AF8 		BL	STORE
 2667 14c8 FFF7F8F8 		BL	OVER
 2668 14cc FFF7C8F8 		BL	TOR
 2669 14d0 FFF7E2F8 		BL	DUPP
 2670 14d4 FFF776F8 		BL	QBRAN
 2671 14d8 CA090018 		.word	PARS8+MAPOFFSET
 2672 14dc FFF776F9 		BL	ONEM
 2673 14e0 FFF7E7FA 		BL	TEMP
 2674 14e4 FFF794F8 		BL	AT
 2675 14e8 FFF798F9 		BL	BLANK
 2676 14ec FFF71CFA 		BL	EQUAL
 2677 14f0 FFF768F8 		BL	QBRAN
 2678 14f4 44090018 		.word	PARS3+MAPOFFSET
ARM GAS  stm32eforth.s 			page 51


 2679 14f8 FFF7B2F8 		BL	TOR
 2680              	PARS1:
 2681 14fc FFF78EF9 		BL	BLANK
 2682 1500 FFF7DCF8 		BL	OVER
 2683 1504 FFF794F8 		BL	CAT			// skip leading blanks 
 2684 1508 FFF732F9 		BL	SUBB
 2685 150c FFF7DEF8 		BL	ZLESS
 2686 1510 FFF7E4F9 		BL	INVER
 2687 1514 FFF756F8 		BL	QBRAN
 2688 1518 40090018 		.word	PARS2+MAPOFFSET
 2689 151c FFF74EF9 		BL	ONEP
 2690 1520 FFF741F8 		BL	DONXT
 2691 1524 FC080018 		.word	PARS1+MAPOFFSET
 2692 1528 FFF788F8 		BL	RFROM
 2693 152c FFF7ACF8 		BL	DROP
 2694 1530 FFF725F8 		_DOLIT
 2695 1534 00000000 		.word	0
 2696 1538 FFF7AEF8 		BL	DUPP
 2697 153c 52F804FB 		_UNNEST
 2698              	PARS2:
 2699 1540 FFF77CF8 	  BL	RFROM
 2700              	PARS3:
 2701 1544 FFF7BAF8 		BL	OVER
 2702 1548 FFF7AEF8 		BL	SWAP
 2703 154c FFF788F8 		BL	TOR
 2704              	PARS4:
 2705 1550 FFF7AFFA 		BL	TEMP
 2706 1554 FFF75CF8 		BL	AT
 2707 1558 FFF7B0F8 		BL	OVER
 2708 155c FFF768F8 		BL	CAT
 2709 1560 FFF706F9 		BL	SUBB			// scan for delimiter
 2710 1564 FFF7A5FA 		BL	TEMP
 2711 1568 FFF752F8 		BL	AT
 2712 156c FFF756F9 		BL	BLANK
 2713 1570 FFF7DAF9 		BL	EQUAL
 2714 1574 FFF726F8 		BL	QBRAN
 2715 1578 80090018 		.word	PARS5+MAPOFFSET
 2716 157c FFF7A6F8 		BL	ZLESS
 2717              	PARS5:
 2718 1580 FFF720F8 		BL	QBRAN
 2719 1584 9E090018 		.word	PARS6+MAPOFFSET
 2720 1588 FFF718F9 		BL	ONEP
 2721 158c FFF70BF8 		BL	DONXT
 2722 1590 50090018 		.word	PARS4+MAPOFFSET
 2723 1594 FFF780F8 		BL	DUPP
 2724 1598 FFF762F8 		BL	TOR
 2725 159c 09E0     		B	PARS7
 2726              	PARS6:
 2727 159e FFF74DF8 		BL	RFROM
 2728 15a2 FFF771F8 		BL	DROP
 2729 15a6 FFF777F8 		BL	DUPP
 2730 15aa FFF707F9 		BL	ONEP
 2731 15ae FFF757F8 		BL	TOR
 2732              	PARS7:
 2733 15b2 FFF783F8 		BL	OVER
 2734 15b6 FFF7DBF8 		BL	SUBB
 2735 15ba FFF73FF8 		BL	RFROM
ARM GAS  stm32eforth.s 			page 52


 2736 15be FFF73DF8 		BL	RFROM
 2737 15c2 FFF7D5F8 		BL	SUBB
 2738 15c6 52F804FB 		_UNNEST
 2739              	PARS8:
 2740 15ca FFF777F8 		BL	OVER
 2741 15ce FFF735F8 		BL	RFROM
 2742 15d2 FFF7CDF8 		BL	SUBB
 2743 15d6 52F804FB 		_UNNEST
 2744              	
 2745              	//    PARSE	( c -- b u //  string> )
 2746              	// 	Scan input stream and return counted string delimited by c.
 2747              	
 2748 15da A8080018 		.word	_QUEST+MAPOFFSET
 2749 15de 05       	_PARSE:	.byte  5
 2750 15df 50415253 		.ascii "PARSE"
 2750      45
 2751              		.p2align 2 	
 2752              	PARSE:
 2753 15e4 42F804ED 		_NEST
 2754 15e8 FFF73AF8 		BL	TOR
 2755 15ec FFF728FC 		BL	TIB
 2756 15f0 FFF774FA 		BL	INN
 2757 15f4 FFF70CF8 		BL	AT
 2758 15f8 FFF7B2F8 		BL	PLUS			// current input buffer pointer
 2759 15fc FFF778FA 		BL	NTIB
 2760 1600 FFF706F8 		BL	AT
 2761 1604 FFF76AFA 		BL	INN
 2762 1608 FFF702F8 		BL	AT
 2763 160c FFF7B0F8 		BL	SUBB			// remaining count
 2764 1610 FFF714F8 		BL	RFROM
 2765 1614 FFF752FF 		BL	PARS
 2766 1618 FFF760FA 		BL	INN
 2767 161c FFF7C8F9 		BL	PSTOR
 2768 1620 52F804FB 		_UNNEST
 2769              	
 2770              	//    .(	  ( -- )
 2771              	// 	Output following string up to next ) .
 2772              	
 2773 1624 DE090018 		.word	_PARSE+MAPOFFSET
 2774 1628 82       	_DOTPR:	.byte  IMEDD+2
 2775 1629 2E28     		.ascii ".("
 2776 162b 00       		.p2align 2 	
 2777              	DOTPR:
 2778 162c 42F804ED 		_NEST
 2779 1630 FEF7A5FF 		_DOLIT
 2780 1634 29000000 		.word	')'
 2781 1638 FFF7D4FF 		BL	PARSE
 2782 163c FFF778FE 		BL	TYPEE
 2783 1640 52F804FB 		_UNNEST
 2784              	
 2785              	//    (	   ( -- )
 2786              	// 	Ignore following string up to next ) . A comment.
 2787              	
 2788 1644 280A0018 		.word	_DOTPR+MAPOFFSET
 2789 1648 81       	_PAREN:	.byte  IMEDD+1
 2790 1649 28       		.ascii "("
 2791 164a 00BF     		.p2align 2 	
ARM GAS  stm32eforth.s 			page 53


 2792              	PAREN:
 2793 164c 42F804ED 		_NEST
 2794 1650 FEF795FF 		_DOLIT
 2795 1654 29000000 		.word	')'
 2796 1658 FFF7C4FF 		BL	PARSE
 2797 165c FFF71CF9 		BL	DDROP
 2798 1660 52F804FB 		_UNNEST
 2799              	
 2800              	//    \	   ( -- )
 2801              	// 	Ignore following text till the end of line.
 2802              	
 2803 1664 480A0018 		.word	_PAREN+MAPOFFSET
 2804 1668 81       	_BKSLA:	.byte  IMEDD+1
 2805 1669 27       		.byte	'\'
 2806 166a 00BF     		.p2align 2 	
 2807              	BKSLA:
 2808 166c 42F804ED 		_NEST
 2809 1670 FFF73EFA 		BL	NTIB
 2810 1674 FEF7CCFF 		BL	AT
 2811 1678 FFF730FA 		BL	INN
 2812 167c FEF7BEFF 		BL	STORE
 2813 1680 52F804FB 		_UNNEST
 2814              	
 2815              	//    CHAR	( -- c )
 2816              	// 	Parse next word and return its first character.
 2817              	
 2818 1684 680A0018 		.word	_BKSLA+MAPOFFSET
 2819 1688 04       	_CHAR:	.byte  4
 2820 1689 43484152 		.ascii "CHAR"
 2821 168d 0000BF   		.p2align 2 	
 2822              	CHAR:
 2823 1690 42F804ED 		_NEST
 2824 1694 FFF7C2F8 		BL	BLANK
 2825 1698 FFF7A4FF 		BL	PARSE
 2826 169c FEF7F4FF 		BL	DROP
 2827 16a0 FEF7C6FF 		BL	CAT
 2828 16a4 52F804FB 		_UNNEST
 2829              	
 2830              	//    WORD	( c -- a //  string> )
 2831              	// 	Parse a word from input stream and copy it to code dictionary.
 2832              	
 2833 16a8 880A0018 		.word	_CHAR+MAPOFFSET
 2834 16ac 04       	_WORDD:	.byte  4
 2835 16ad 574F5244 		.ascii "WORD"
 2836 16b1 0000BF   		.p2align 2 	
 2837              	WORDD:
 2838 16b4 42F804ED 		_NEST
 2839 16b8 FFF794FF 		BL	PARSE
 2840 16bc FFF7A8FB 		BL	HERE
 2841 16c0 FFF79CF8 		BL	CELLP
 2842 16c4 FFF71AFC 		BL	PACKS
 2843 16c8 52F804FB 		_UNNEST
 2844              	
 2845              	//    TOKEN	( -- a //  string> )
 2846              	// 	Parse a word from input stream and copy it to name dictionary.
 2847              	
 2848 16cc AC0A0018 		.word	_WORDD+MAPOFFSET
ARM GAS  stm32eforth.s 			page 54


 2849 16d0 05       	_TOKEN:	.byte  5
 2850 16d1 544F4B45 		.ascii "TOKEN"
 2850      4E
 2851 16d6 00BF     		.p2align 2 	
 2852              	TOKEN:
 2853 16d8 42F804ED 		_NEST
 2854 16dc FFF79EF8 		BL	BLANK
 2855 16e0 FFF7E8FF 		BL	WORDD
 2856 16e4 52F804FB 		_UNNEST
 2857              	
 2858              	// **************************************************************************
 2859              	//  Dictionary search
 2860              	
 2861              	//    NAME>	( na -- ca )
 2862              	// 	Return a code address given a name address.
 2863              	
 2864 16e8 D00A0018 		.word	_TOKEN+MAPOFFSET
 2865 16ec 05       	_NAMET:	.byte  5
 2866 16ed 4E414D45 		.ascii "NAME>"
 2866      3E
 2867 16f2 00BF     		.p2align 2 	
 2868              	NAMET:
 2869 16f4 42F804ED 		_NEST
 2870 16f8 FFF77EF9 		BL	COUNT
 2871 16fc FEF73FFF 		_DOLIT
 2872 1700 1F000000 		.word	0x1F
 2873 1704 FEF7ECFF 		BL	ANDD
 2874 1708 FFF72AF8 		BL	PLUS
 2875 170c FFF72CFB 		BL	ALGND
 2876 1710 52F804FB 		_UNNEST
 2877              	
 2878              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2879              	// 	Compare u bytes in two strings. Return 0 if identical.
 2880              	//
 2881              	//  Picatout 2020-12-01, 
 2882              	//      Because of problem with .align directive that
 2883              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2884              	// 		words  to do a byte by byte comparison. 
 2885              	//
 2886 1714 EC0A0018 		.word	_NAMET+MAPOFFSET
 2887 1718 05       	_SAMEQ:	.byte  5
 2888 1719 53414D45 		.ascii "SAME?"
 2888      3F
 2889 171e 00BF     		.p2align 2	
 2890              	SAMEQ:
 2891 1720 42F804ED 		_NEST
 2892 1724 FEF79CFF 		BL	TOR
 2893 1728 00F01EB8 		B.W	SAME2
 2894              	SAME1:
 2895 172c FEF7C6FF 		BL	OVER  // ( a1 a2 -- a1 a2 a1 )
 2896 1730 FEF78EFF 		BL	RAT   // a1 a2 a1 u 
 2897 1734 FFF714F8 		BL	PLUS  // a1 a2 a1+u 
 2898 1738 FEF77AFF 		BL	CAT	   // a1 a2 c1    		
 2899 173c FEF7BEFF 		BL	OVER  // a1 a2 c1 a2 
 2900 1740 FEF786FF 		BL	RAT    
 2901 1744 FFF70CF8 		BL	PLUS    
 2902 1748 FEF772FF 		BL	CAT	  // a1 a2 c1 c2
ARM GAS  stm32eforth.s 			page 55


 2903 174c FFF710F8 		BL	SUBB  
 2904 1750 FFF78EF8 		BL	QDUP
 2905 1754 FEF736FF 		BL	QBRAN
 2906 1758 680B0018 		.word	SAME2+MAPOFFSET
 2907 175c FEF76EFF 		BL	RFROM
 2908 1760 FEF792FF 		BL	DROP
 2909 1764 52F804FB 		_UNNEST	// strings not equal
 2910              	SAME2:
 2911 1768 FEF71DFF 		BL	DONXT
 2912 176c 2C0B0018 		.word	SAME1+MAPOFFSET
 2913 1770 FEF705FF 		_DOLIT
 2914 1774 00000000 		.word	0
 2915 1778 52F804FB 		_UNNEST	// strings equal
 2916              	
 2917              	//    find	( a na -- ca na | a F )
 2918              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2919              	
 2920              	//  Picatout 2020-12-01,  
 2921              	//		Modified from original. See comment for word "SAME?" 
 2922              	
 2923              	// 	.word	_SAMEQ+MAPOFFSET
 2924              	// _FIND	.byte  4
 2925              	// 	.ascii "find"
 2926              	// 	.p2align 2 	
 2927              	FIND:
 2928 177c 42F804ED 		_NEST
 2929 1780 FEF792FF 		BL	SWAP			// na a	
 2930 1784 FFF738F9 		BL	COUNT			// na a+1 count
 2931 1788 FEF786FF 		BL	DUPP 
 2932 178c FFF791F9 		BL	TEMP
 2933 1790 FEF734FF 		BL	STORE			// na a+1 count 
 2934 1794 FEF764FF 		BL  TOR		// na a+1  R: count  
 2935 1798 FEF786FF 		BL	SWAP			// a+1 na
 2936              	FIND1:
 2937 179c FEF77CFF 		BL	DUPP			// a+1 na na
 2938 17a0 FEF710FF 		BL	QBRAN
 2939 17a4 EC0B0018 		.word	FIND6+MAPOFFSET	// end of vocabulary
 2940 17a8 FEF776FF 		BL	DUPP			// a+1 na na
 2941 17ac FEF740FF 		BL	CAT			// a+1 na name1
 2942 17b0 FEF7E5FE 		_DOLIT
 2943 17b4 1FFFFFFF 		.word	MASKK
 2944 17b8 FEF792FF 		BL	ANDD
 2945 17bc FEF748FF 		BL	RAT			// a+1 na name1 count 
 2946 17c0 FEF7A2FF 		BL	XORR			// a+1 na,  same length?
 2947 17c4 FEF7FEFE 		BL	QBRAN
 2948 17c8 D80B0018 		.word	FIND2+MAPOFFSET
 2949 17cc FFF71EF8 		BL	CELLM			// a+1 la
 2950 17d0 FEF71EFF 		BL	AT			// a+1 next_na
 2951 17d4 FFF7E2BF 		B.w	FIND1			// try next word
 2952              	FIND2:   
 2953 17d8 FEF7F0FF 		BL	ONEP			// a+1 na+1
 2954 17dc FFF769F9 		BL	TEMP
 2955 17e0 FEF716FF 		BL	AT			// a+1 na+1 count
 2956 17e4 FFF79CFF 		BL	SAMEQ		// a+1 na+1 ? 
 2957              	FIND3:	
 2958 17e8 00F00CB8 		B.w	FIND4
 2959              	FIND6:	
ARM GAS  stm32eforth.s 			page 56


 2960 17ec FEF726FF 		BL	RFROM			// a+1 0 name1 -- , no match
 2961 17f0 FEF74AFF 		BL	DROP			// a+1 0
 2962 17f4 FEF758FF 		BL	SWAP			// 0 a+1
 2963 17f8 FEF7E8FF 		BL	ONEM			// 0 a
 2964 17fc FEF754FF 		BL	SWAP			// a 0 
 2965 1800 52F804FB 		_UNNEST			// return without a match
 2966              	FIND4:	
 2967 1804 FEF7DEFE 		BL	QBRAN			// a+1 na+1
 2968 1808 1C0C0018 		.word	FIND5+MAPOFFSET	// found a match
 2969 180c FEF7DEFF 		BL	ONEM			// a+1 na
 2970 1810 FEF7FCFF 		BL	CELLM			// a+4 la
 2971 1814 FEF7FCFE 		BL	AT			// a+1 next_na
 2972 1818 FFF7C0BF 		B.w	FIND1			// compare next name
 2973              	FIND5:	
 2974 181c FEF70EFF 		BL	RFROM			// a+1 na+1 count
 2975 1820 FEF732FF 		BL	DROP			// a+1 na+1
 2976 1824 FEF740FF 		BL	SWAP			// na+1 a+1
 2977 1828 FEF72EFF 		BL	DROP			// na+1
 2978 182c FEF7CEFF 		BL	ONEM			// na
 2979 1830 FEF732FF 		BL	DUPP			// na na
 2980 1834 FFF75EFF 		BL	NAMET			// na ca
 2981 1838 FEF736FF 		BL	SWAP			// ca na
 2982 183c 52F804FB 		_UNNEST			//  return with a match
 2983              	
 2984              	//    NAME?	( a -- ca na | a F )
 2985              	// 	Search all context vocabularies for a string.
 2986              	
 2987 1840 180B0018 		.word	_SAMEQ+MAPOFFSET
 2988 1844 05       	_NAMEQ:	.byte  5
 2989 1845 4E414D45 		.ascii "NAME?"
 2989      3F
 2990 184a 00BF     		.p2align 2 	
 2991              	NAMEQ:
 2992 184c 42F804ED 		_NEST
 2993 1850 FFF76EF9 		BL	CNTXT
 2994 1854 FEF7DCFE 		BL	AT
 2995 1858 FFF790FF 		BL	FIND
 2996 185c 52F804FB 		_UNNEST
 2997              	
 2998              	// **************************************************************************
 2999              	//  Terminal input
 3000              	
 3001              	//    	  ( bot eot cur -- bot eot cur )
 3002              	// 	Backup the cursor by one character.
 3003              	
 3004              	// 	.word	_NAMEQ+MAPOFFSET
 3005              	// _BKSP	.byte  2
 3006              	// 	.ascii "^H"
 3007              	// 	.p2align 2 	
 3008              	BKSP:
 3009 1860 42F804ED 		_NEST
 3010 1864 FEF7FCFE 		BL	TOR
 3011 1868 FEF728FF 		BL	OVER
 3012 186c FEF7E6FE 		BL	RFROM
 3013 1870 FEF71AFF 		BL	SWAP
 3014 1874 FEF722FF 		BL	OVER
 3015 1878 FEF746FF 		BL	XORR
ARM GAS  stm32eforth.s 			page 57


 3016 187c FEF7A2FE 		BL	QBRAN
 3017 1880 A80C0018 		.word	BACK1+MAPOFFSET
 3018 1884 FEF77BFE 		_DOLIT
 3019 1888 08000000 		.word	BKSPP
 3020 188c FEF766FE 		BL	TECHO
 3021              	// 	BL	ATEXE
 3022 1890 FEF79CFF 		BL	ONEM
 3023 1894 FEF7C2FF 		BL	BLANK
 3024 1898 FEF760FE 		BL	TECHO
 3025              	// 	BL	ATEXE
 3026 189c FEF76FFE 		_DOLIT
 3027 18a0 08000000 		.word	BKSPP
 3028 18a4 FEF75AFE 		BL	TECHO
 3029              	// 	BL	ATEXE
 3030              	BACK1:
 3031 18a8 52F804FB 		  _UNNEST
 3032              	
 3033              	//    TAP	 ( bot eot cur c -- bot eot cur )
 3034              	// 	Accept and echo the key stroke and bump the cursor.
 3035              	
 3036              	// 	.word	_BKSP+MAPOFFSET
 3037              	// _TAP	.byte  3
 3038              	// 	.ascii "TAP"
 3039              	// 	.p2align 2 	
 3040              	TAP:
 3041 18ac 42F804ED 		_NEST
 3042 18b0 FEF7F2FE 		BL	DUPP
 3043 18b4 FEF752FE 		BL	TECHO
 3044              	// 	BL	ATEXE
 3045 18b8 FEF700FF 		BL	OVER
 3046 18bc FEF7AEFE 		BL	CSTOR
 3047 18c0 FEF77CFF 		BL	ONEP
 3048 18c4 52F804FB 		_UNNEST
 3049              	
 3050              	//    kTAP	( bot eot cur c -- bot eot cur )
 3051              	// 	Process a key stroke, CR or backspace.
 3052              	
 3053              	// 	.word	_TAP+MAPOFFSET
 3054              	// _KTAP	.byte  4
 3055              	// 	.ascii "kTAP"
 3056              	// 	.p2align 2 	
 3057              	KTAP:
 3058              	TTAP:
 3059 18c8 42F804ED 		_NEST
 3060 18cc FEF7E4FE 		BL	DUPP
 3061 18d0 FEF755FE 		_DOLIT
 3062 18d4 0D000000 		.word	CRR
 3063 18d8 FEF716FF 		BL	XORR
 3064 18dc FEF772FE 		BL	QBRAN
 3065 18e0 100D0018 		.word	KTAP2+MAPOFFSET
 3066 18e4 FEF74BFE 		_DOLIT
 3067 18e8 08000000 		.word	BKSPP
 3068 18ec FEF70CFF 		BL	XORR
 3069 18f0 FEF768FE 		BL	QBRAN
 3070 18f4 080D0018 		.word	KTAP1+MAPOFFSET
 3071 18f8 FEF790FF 		BL	BLANK
 3072 18fc FFF7D6FF 		BL	TAP
ARM GAS  stm32eforth.s 			page 58


 3073 1900 52F804FB 		_UNNEST
 3074 1904 00000000 		.word	0			// patch
 3075              	KTAP1:
 3076 1908 FFF7AAFF 	  BL	BKSP
 3077 190c 52F804FB 		_UNNEST
 3078              	KTAP2:
 3079 1910 FEF7BAFE 	  BL	DROP
 3080 1914 FEF7C8FE 		BL	SWAP
 3081 1918 FEF7B6FE 		BL	DROP
 3082 191c FEF7BCFE 		BL	DUPP
 3083 1920 52F804FB 		_UNNEST
 3084              	
 3085              	//    ACCEPT	( b u -- b u )
 3086              	// 	Accept characters to input buffer. Return with actual count.
 3087              	
 3088 1924 440C0018 		.word	_NAMEQ+MAPOFFSET
 3089 1928 06       	_ACCEP:	.byte  6
 3090 1929 41434345 		.ascii "ACCEPT"
 3090      5054
 3091 192f 00       		.p2align 2 	
 3092              	ACCEP:
 3093 1930 42F804ED 		_NEST
 3094 1934 FEF7C2FE 		BL	OVER
 3095 1938 FEF712FF 		BL	PLUS
 3096 193c FEF7BEFE 		BL	OVER
 3097              	ACCP1:
 3098 1940 FEF7B4FF 	  BL	DDUP
 3099 1944 FEF7E0FE 		BL	XORR
 3100 1948 FEF73CFE 		BL	QBRAN
 3101 194c 7C0D0018 		.word	ACCP4+MAPOFFSET
 3102 1950 FFF7A8FC 		BL	KEY
 3103 1954 FEF7A0FE 		BL	DUPP
 3104 1958 FEF760FF 		BL	BLANK
 3105 195c FEF70FFE 		_DOLIT
 3106 1960 7F000000 		.word	127
 3107 1964 FFF746F9 		BL	WITHI
 3108 1968 FEF72CFE 		BL	QBRAN
 3109 196c 760D0018 		.word	ACCP2+MAPOFFSET
 3110 1970 FFF79CFF 		BL	TAP
 3111 1974 01E0     		B	ACCP3
 3112              	ACCP2:
 3113 1976 FFF7A7FF 	  BL	KTAP
 3114              	// 	BL	ATEXE
 3115              	ACCP3:	  
 3116 197a E1E7     		B	ACCP1
 3117              	ACCP4:
 3118 197c FEF784FE 	  BL	DROP
 3119 1980 FEF79CFE 		BL	OVER
 3120 1984 FEF7F4FE 		BL	SUBB
 3121 1988 52F804FB 		_UNNEST
 3122              	
 3123              	//    QUERY	( -- )
 3124              	// 	Accept input stream to terminal input buffer.
 3125              	
 3126 198c 280D0018 		.word	_ACCEP+MAPOFFSET
 3127 1990 05       	_QUERY:	.byte  5
 3128 1991 51554552 		.ascii "QUERY"
ARM GAS  stm32eforth.s 			page 59


 3128      59
 3129 1996 00BF     		.p2align 2 	
 3130              	QUERY:
 3131 1998 42F804ED 		_NEST
 3132 199c FFF750FA 		BL	TIB
 3133 19a0 FEF7EDFD 		_DOLIT
 3134 19a4 50000000 		.word	80
 3135 19a8 FFF7C2FF 		BL	ACCEP
 3136 19ac FFF7A0F8 		BL	NTIB
 3137 19b0 FEF724FE 		BL	STORE
 3138 19b4 FEF768FE 		BL	DROP
 3139 19b8 FEF7E1FD 		_DOLIT
 3140 19bc 00000000 		.word	0
 3141 19c0 FFF78CF8 		BL	INN
 3142 19c4 FEF71AFE 		BL	STORE
 3143 19c8 52F804FB 		_UNNEST
 3144              	
 3145              	// **************************************************************************
 3146              	//  Error handling
 3147              	
 3148              	//    ABORT	( a -- )
 3149              	// 	Reset data stack and jump to QUIT.
 3150              	
 3151 19cc 900D0018 		.word	_QUERY+MAPOFFSET
 3152 19d0 05       	_ABORT:	.byte  5
 3153 19d1 41424F52 		.ascii "ABORT"
 3153      54
 3154 19d6 00BF     		.p2align 2 	
 3155              	ABORT:
 3156 19d8 42F804ED 		_NEST
 3157 19dc FFF780FC 		BL	SPACE
 3158              	ABORT1:
 3159 19e0 FFF70AF8 		BL	COUNT
 3160 19e4 FFF7A4FC 		BL	TYPEE
 3161 19e8 FEF7C9FD 		_DOLIT
 3162 19ec 3F000000 		.word	0X3F
 3163 19f0 FEF7B4FD 		BL	EMIT
 3164 19f4 FFF7B4FC 		BL	CR
 3165 19f8 00F0ACF8 		BL	PRESE
 3166 19fc 00F0B4B8 		B.W	QUIT
 3167              	
 3168              	//    _abort"	( f -- )
 3169              	// 	Run time routine of ABORT" . Abort with a message.
 3170              	
 3171              	// 	.word	_ABORT+MAPOFFSET
 3172              	// _ABORQ	.byte  COMPO+6
 3173              	// 	.ascii "abort\""
 3174              	// 	.p2align 2 	
 3175              	ABORQ:
 3176 1a00 42F804ED 		_NEST
 3177 1a04 FFF7BCFC 		BL	DOSTR 
 3178 1a08 FEF74EFE 		BL	SWAP 
 3179 1a0c FEF7DAFD 		BL	QBRAN
 3180 1a10 160E0018 		.word	1f+MAPOFFSET	// text flag
 3181 1a14 E4E7     		B	ABORT1 
 3182              	1:
 3183 1a16 FEF737FE 		BL	DROP
ARM GAS  stm32eforth.s 			page 60


 3184 1a1a 52F804FB 		_UNNEST			// drop error
 3185              	
 3186              	// **************************************************************************
 3187              	//  The text interpreter
 3188              	
 3189              	//    $INTERPRET  ( a -- )
 3190              	// 	Interpret a word. If failed, try to convert it to an integer.
 3191              	
 3192 1a1e D00D0018 		.word	_ABORT+MAPOFFSET
 3193 1a22 0A       	_INTER:	.byte  10
 3194 1a23 2424494E 		.ascii "$$INTERPRET"
 3194      54455250 
 3194      524554
 3195 1a2e 00BF     		.p2align 2 	
 3196              	INTER:
 3197 1a30 42F804ED 		_NEST
 3198 1a34 FFF70AFF 		BL	NAMEQ
 3199 1a38 FEF71AFF 		BL	QDUP	// ?defined
 3200 1a3c FEF7C2FD 		BL	QBRAN
 3201 1a40 700E0018 		.word	INTE1+MAPOFFSET
 3202 1a44 FEF7E4FD 		BL	AT
 3203 1a48 FEF799FD 		_DOLIT
 3204 1a4c 40000000 		.word	COMPO
 3205 1a50 FEF746FE 		BL	ANDD	// ?compile only lexicon bits
 3206 1a54 FFF7D4FF 		BL	ABORQ
 3207 1a58 0D       		.byte	13
 3208 1a59 20636F6D 		.ascii " compile only"
 3208      70696C65 
 3208      206F6E6C 
 3208      79
 3209 1a66 00BF     		.p2align 2 	
 3210 1a68 FEF798FD 		BL	EXECU
 3211 1a6c 52F804FB 		_UNNEST			// execute defined word
 3212              	INTE1:
 3213 1a70 FFF77EFB 	  BL	NUMBQ
 3214 1a74 FEF7A6FD 		BL	QBRAN
 3215 1a78 800E0018 		.word	INTE2+MAPOFFSET
 3216 1a7c 52F804FB 		_UNNEST
 3217              	INTE2:
 3218 1a80 FFF7AABF 	  B.W	ABORT	// error
 3219              	
 3220              	//    [	   ( -- )
 3221              	// 	Start the text interpreter.
 3222              	
 3223 1a84 220E0018 		.word	_INTER+MAPOFFSET
 3224 1a88 81       	_LBRAC:	.byte  IMEDD+1
 3225 1a89 5B       		.ascii "["
 3226 1a8a 00BF     		.p2align 2 	
 3227              	LBRAC:
 3228 1a8c 42F804ED 		_NEST
 3229 1a90 FEF775FD 		_DOLIT
 3230 1a94 300E0018 		.word	INTER+MAPOFFSET
 3231 1a98 FFF734F8 		BL	TEVAL
 3232 1a9c FEF7AEFD 		BL	STORE
 3233 1aa0 52F804FB 		_UNNEST
 3234              	
 3235              	//    .OK	 ( -- )
ARM GAS  stm32eforth.s 			page 61


 3236              	// 	Display "ok" only while interpreting.
 3237              	
 3238 1aa4 880E0018 		.word	_LBRAC+MAPOFFSET
 3239 1aa8 03       	_DOTOK:	.byte  3
 3240 1aa9 2E4F4B   		.ascii ".OK"
 3241              		.p2align 2 	
 3242              	DOTOK:
 3243 1aac 42F804ED 		_NEST
 3244 1ab0 FEF765FD 		_DOLIT
 3245 1ab4 300E0018 		.word	INTER+MAPOFFSET
 3246 1ab8 FFF724F8 		BL	TEVAL
 3247 1abc FEF7A8FD 		BL	AT
 3248 1ac0 FEF732FF 		BL	EQUAL
 3249 1ac4 FEF77EFD 		BL	QBRAN
 3250 1ac8 D40E0018 		.word	DOTO1+MAPOFFSET
 3251 1acc FFF780FC 		BL	DOTQP
 3252 1ad0 03       		.byte	3
 3253 1ad1 206F6B   		.ascii " ok"
 3254              	DOTO1:
 3255 1ad4 FFF744FC 		BL	CR
 3256 1ad8 52F804FB 		_UNNEST
 3257              	
 3258              	//    ?STACK	( -- )
 3259              	// 	Abort if the data stack underflows.
 3260              	
 3261 1adc A80E0018 		.word	_DOTOK+MAPOFFSET
 3262 1ae0 06       	_QSTAC:	.byte  6
 3263 1ae1 3F535441 		.ascii "?STACK"
 3263      434B
 3264 1ae7 00       		.p2align 2 	
 3265              	QSTAC:
 3266 1ae8 42F804ED 		_NEST
 3267 1aec FFF76EF9 		BL	DEPTH
 3268 1af0 FEF7ECFD 		BL	ZLESS	// check only for underflow
 3269 1af4 FFF784FF 		BL	ABORQ
 3270 1af8 0A       		.byte	10
 3271 1af9 20756E64 		.ascii " underflow"
 3271      6572666C 
 3271      6F77
 3272 1b03 00       		.p2align 2 	
 3273 1b04 52F804FB 		_UNNEST
 3274              	
 3275              	//    EVAL	( -- )
 3276              	// 	Interpret the input stream.
 3277              	
 3278 1b08 E00E0018 		.word	_QSTAC+MAPOFFSET
 3279 1b0c 04       	_EVAL:	.byte  4
 3280 1b0d 4556414C 		.ascii "EVAL"
 3281 1b11 0000BF   		.p2align 2 	
 3282              	EVAL:
 3283 1b14 42F804ED 		_NEST
 3284              	EVAL1:
 3285 1b18 FFF7DEFD 	    BL	TOKEN
 3286 1b1c FEF7BCFD 		BL	DUPP
 3287 1b20 FEF786FD 		BL	CAT	// ?input stream empty
 3288 1b24 FEF74EFD 		BL	QBRAN
 3289 1b28 3C0F0018 		.word	EVAL2+MAPOFFSET
ARM GAS  stm32eforth.s 			page 62


 3290 1b2c FEF7EAFF 		BL	TEVAL
 3291 1b30 FFF792F9 		BL	ATEXE
 3292 1b34 FFF7D8FF 		BL	QSTAC	// evaluate input, check stack
 3293 1b38 FFF7EEBF 		B.W	EVAL1
 3294              	EVAL2:
 3295 1b3c FEF7A4FD 		BL	DROP
 3296 1b40 FFF7B4FF 		BL	DOTOK
 3297 1b44 52F804FB 		_UNNEST	// prompt
 3298              	
 3299              	//    PRESET	( -- )
 3300              	// 	Reset data stack pointer and the terminal input buffer.
 3301              	
 3302 1b48 0C0F0018 		.word	_EVAL+MAPOFFSET
 3303 1b4c 06       	_PRESE:	.byte  6
 3304 1b4d 50524553 		.ascii "PRESET"
 3304      4554
 3305 1b53 00       		.p2align 2 	
 3306              	PRESE:
 3307              	//	_NEST
 3308 1b54 03F59D41 		ADD	R1,R3,#SPP&0xffff		//  init SP
 3309 1b58 85EA0505 		EOR	R5,R5,R5			//  init TOS=0
 3310              	//	_UNNEST
 3311 1b5c 7047     		_NEXT
 3312              	
 3313              	//    QUIT	( -- )
 3314              	// 	Reset return stack pointer and start text interpreter.
 3315              	
 3316 1b5e 4C0F0018 		.word	_PRESE+MAPOFFSET
 3317 1b62 04       	_QUIT:	.byte  4
 3318 1b63 51554954 		.ascii "QUIT"
 3319 1b67 00       		.p2align 2 	
 3320              	QUIT:
 3321 1b68 42F804ED 		_NEST
 3322 1b6c 44F68072 		MOVW	R2,#RPP&0xffff  /* RESET RSTACK */
 3323 1b70 C2F20002 	 	MOVT	R2,#RPP>>16 
 3324              	QUIT1:
 3325 1b74 FFF78AFF 		BL	LBRAC			// start interpretation
 3326              	QUIT2:
 3327 1b78 FFF70EFF 		BL	QUERY			// get input
 3328 1b7c FFF7CAFF 		BL	EVAL
 3329 1b80 FEF72CFD 		BL	BRAN
 3330 1b84 780F0018 		.word	QUIT2+MAPOFFSET	// continue till error
 3331              	
 3332              	/***************************
 3333              	//  Flash memory interface
 3334              	***************************/
 3335              	// UNLOCK ( T|F -- )
 3336              	// lock or unlock FLASH write 
 3337              	
 3338 1b88 620F0018 		.word _QUIT+MAPOFFSET  
 3339 1b8c 06       	_UNLOCK: .byte 6
 3340 1b8d 554E4C4F 		.ascii "UNLOCK"
 3340      434B
 3341 1b93 00       		.p2align 2  
 3342              	UNLOCK:	//  unlock flash memory	
 3343 1b94 42F804ED 		_NEST 
 3344 1b98 FEF714FD 		BL QBRAN
ARM GAS  stm32eforth.s 			page 63


 3345 1b9c BE0F0018 		.word LOCK+MAPOFFSET
 3346 1ba0 DFF80404 		ldr	r0, flash_regs 
 3347 1ba4 4FF03404 		mov r4,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 3348 1ba8 C460     		str r4,[r0,#FLASH_SR]
 3349 1baa 0469     		ldr r4,[r0,#FLASH_CR]
 3350 1bac 14F0800F 		tst r4,#(1<<7)
 3351 1bb0 03D0     		beq 1f 
 3352 1bb2 FE4C     		ldr	r4, flash_regs+4 // key1
 3353 1bb4 4460     		str	r4, [r0, #FLASH_KEYR]
 3354 1bb6 FE4C     		ldr	r4, flash_regs+8 // key2 
 3355 1bb8 4460     		str	r4, [r0, #FLASH_KEYR]
 3356              		/* unlock option registers */
 3357              	/*
 3358              		ldr	r4, flash_regs+4 
 3359              		str	r4, [r0, #FLASH_OPTKEYR]
 3360              		ldr	r4, flash_regs+8
 3361              		str	r4, [r0, #FLASH_OPTKEYR]
 3362              	*/ 
 3363              	1:
 3364 1bba 52F804FB 		_UNNEST
 3365              	 // lock flash memory
 3366              	LOCK: 
 3367 1bbe FA48     		ldr r0,flash_regs  
 3368              	//	ldr r4,[r0,#FLASH_CR]
 3369 1bc0 4FF08004 		mov r4,#(1<<7)
 3370 1bc4 0461     		str r4,[r0,#FLASH_CR]
 3371 1bc6 52F804FB 		_UNNEST  
 3372              	
 3373              	WAIT_BSY:
 3374 1bca F748     		ldr	r0,flash_regs
 3375              	WAIT1:
 3376 1bcc C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 3377 1bce 14F00104 		ands	r4, #0x1	//  BSY
 3378 1bd2 FBD1     		bne	WAIT1
 3379 1bd4 7047     		_NEXT
 3380              	
 3381              	//    ERASE_PAGE	   ( adr -- )
 3382              	// 	  Erase one page of flash memory.
 3383              	//    stm32f103 page size is 1024 bytes 
 3384              	//    adr is any address inside page to erase 
 3385              	
 3386 1bd6 8C0F0018 		.word	_UNLOCK+MAPOFFSET
 3387 1bda 0A       	_EPAGE:	.byte  10
 3388 1bdb 45524153 		.ascii "ERASE_PAGE"
 3388      455F5041 
 3388      4745
 3389 1be5 0000BF   		.p2align 2 	
 3390              	
 3391              	EPAGE: 	//  page --
 3392 1be8 42F804ED 		_NEST
 3393 1bec FFF7EDFF 		bl	WAIT_BSY
 3394 1bf0 FEF7C5FC 		_DOLIT 
 3395 1bf4 01000000 		.word 1 
 3396 1bf8 FFF7CCFF 		bl  UNLOCK 
 3397 1bfc EA48     		ldr r0,flash_regs 	 
 3398 1bfe 4FF00204 		mov r4,#2 // set PER bit 
 3399 1c02 0461     		str r4,[r0,#FLASH_CR]
ARM GAS  stm32eforth.s 			page 64


 3400 1c04 4561     		str r5,[r0,#FLASH_AR] // page to erase address 
 3401 1c06 0469     		ldr	r4,[r0, #FLASH_CR]	
 3402 1c08 44F04004 		orr	R4,#0x40	//  set STRT bit   
 3403 1c0c 0461     		str	r4,[r0, #FLASH_CR]	//  start erasing
 3404 1c0e FFF7DCFF 	 	bl	WAIT_BSY // wait until done
 3405 1c12 FEF7B4FC 		_DOLIT 
 3406 1c16 00000000 		.word 0 
 3407 1c1a FFF7BBFF 		bl	UNLOCK  // lock flash write 
 3408 1c1e C568     		ldr r5,[r0,#FLASH_SR] // check for errors 
 3409 1c20 05F01405 		and r5,r5,#(5<<2)
 3410 1c24 FFF7ECFE 		bl ABORQ 
 3411 1c28 0D       		.byte 13
 3412 1c29 20657261 		.ascii " erase error!"
 3412      73652065 
 3412      72726F72 
 3412      21
 3413 1c36 00BF     		.p2align 2
 3414 1c38 52F804FB 		_UNNEST
 3415              	
 3416              	// store 16 bit word
 3417              	// expect flash unlocked  
 3418              	HWORD_WRITE: // ( hword address -- )
 3419 1c3c 42F804ED 		_NEST
 3420 1c40 0469     		ldr	r4, [r0, #FLASH_CR]	//  FLASH_CR
 3421              	//	bic r4,#(1<<9)|(1<<5)|(1<<4)|(1<<2)|(1<<1) //  clear OPTWRE|OPTER|OPTPG|MER|PER
 3422 1c42 4FF00104 		mov r4,#1 // set PG 
 3423 1c46 0461     		str r4,[r0,#FLASH_CR]
 3424 1c48 2E46     		mov r6,r5 
 3425 1c4a 51F8045B 		_POP 
 3426 1c4e 3580     		strh r5,[r6] 
 3427 1c50 FFF7BBFF 		bl WAIT_BSY 
 3428 1c54 C568     		ldr r5,[r0,#FLASH_SR]
 3429 1c56 05F01405 		and r5,r5,#(5<<2) 
 3430 1c5a FEF7B3FC 		bl QBRAN
 3431 1c5e 74100018 		.word 1f+MAPOFFSET 
 3432 1c62 FFF7CDFE 		bl ABORQ
 3433 1c66 0D       		.byte 13
 3434 1c67 20777269 		.ascii " write error!"
 3434      74652065 
 3434      72726F72 
 3434      21
 3435              		.p2align 2
 3436              	1:	 
 3437 1c74 52F804FB 		_UNNEST 
 3438              	
 3439              	
 3440              	//    I!	   ( data address -- )
 3441              	// 	   Write one word into flash memory
 3442              	//	   address must even 
 3443              	
 3444 1c78 DA0F0018 		.word	_EPAGE+MAPOFFSET
 3445 1c7c 02       	_ISTOR:	.byte  2
 3446 1c7d 4921     		.ascii "I!"
 3447 1c7f 00       		.p2align 2 	
 3448              	ISTOR:	//  data address --
 3449 1c80 42F804ED 		_NEST
 3450 1c84 FFF7A1FF 		bl	WAIT_BSY
ARM GAS  stm32eforth.s 			page 65


 3451 1c88 FEF779FC 		_DOLIT 
 3452 1c8c 01000000 		.word 1 
 3453 1c90 FFF780FF 		bl  UNLOCK 
 3454 1c94 FEF70AFE 		BL DDUP 
 3455 1c98 FEF7E2FC 		BL TOR 
 3456 1c9c FEF7E0FC 		BL TOR 
 3457 1ca0 FFF7CCFF 		BL HWORD_WRITE
 3458 1ca4 FEF7CAFC 		BL RFROM 
 3459 1ca8 4FEA3545 		ror r5,r5,#16
 3460 1cac FEF7C6FC 		BL RFROM 
 3461 1cb0 05F10205 		add r5,r5,#2 
 3462 1cb4 FFF7C2FF 		BL HWORD_WRITE 
 3463 1cb8 FEF761FC 		_DOLIT 
 3464 1cbc 00000000 		.word 0
 3465 1cc0 FFF768FF 		bl UNLOCK 
 3466 1cc4 52F804FB 		_UNNEST
 3467              	
 3468              	// IMG_SIZE ( -- u )
 3469              	// return flash pages required to save 
 3470              	// user ram  
 3471 1cc8 7C100018 		.word _ISTOR+MAPOFFSET 
 3472 1ccc 08       	_IMG_SIZE: .byte 8
 3473 1ccd 494D475F 		.ascii "IMG_SIZE" 
 3473      53495A45 
 3474 1cd5 0000BF   		.p2align 2
 3475              	IMG_SIZE: 
 3476 1cd8 42F804ED 		_NEST
 3477 1cdc FEF74FFC 		_DOLIT 
 3478 1ce0 38000000 		.word VARS_END_OFS-IMG_SIGN_OFS 
 3479 1ce4 FEF75EFF 		BL USER_END 
 3480 1ce8 FEF74EFF 		BL USER_BEGIN 
 3481 1cec FEF740FD 		BL SUBB 
 3482 1cf0 FEF736FD 		BL PLUS 
 3483 1cf4 FEF743FC 		_DOLIT 
 3484 1cf8 00040000 		.word 1024 
 3485 1cfc FEF7E8FF 		BL SLMOD 
 3486 1d00 FEF7D2FC 		BL SWAP 
 3487 1d04 FEF75EFC 		BL QBRAN 
 3488 1d08 10110018 		.word 1f+MAPOFFSET 
 3489 1d0c FEF756FD 		BL ONEP
 3490              	1:
 3491 1d10 52F804FB 		_UNNEST  
 3492              	
 3493              	// IMG? (  -- T|F )
 3494              	// check if an image has been saved in FLASH 
 3495 1d14 CC100018 		.word _IMG_SIZE+MAPOFFSET 
 3496 1d18 04       	_IMGQ: .byte 4
 3497 1d19 494D473F 		.ascii "IMG?"
 3498 1d1d 0000BF   		.p2align 2
 3499              	IMGQ:
 3500 1d20 42F804ED 		_NEST 
 3501 1d24 FEF74CFF 		BL IMG_ADR 
 3502 1d28 FEF772FC 		BL AT 
 3503 1d2c FEF756FF 		BL IMG_SIGN  
 3504 1d30 FEF76EFC 		BL AT 
 3505 1d34 FEF7E8FC 		BL XORR  
 3506 1d38 FEF7ECFD 		BL ZEQUAL
ARM GAS  stm32eforth.s 			page 66


 3507 1d3c 52F804FB 		_UNNEST
 3508              	
 3509              	// LOAD_IMG (  -- )
 3510              	// Load image from FLASH to RAM. 
 3511 1d40 18110018 		.word _IMGQ+MAPOFFSET
 3512 1d44 08       	_LOAD_IMG: .byte 8 
 3513 1d45 4C4F4144 		.ascii "LOAD_IMG" 
 3513      5F494D47 
 3514 1d4d 0000BF   		.p2align 2 
 3515              	LOAD_IMG:
 3516 1d50 42F804ED 		_NEST 
 3517 1d54 FFF7E4FF 		BL IMGQ 
 3518 1d58 FEF734FC 		BL QBRAN 
 3519 1d5c A4110018 		.word 1f+MAPOFFSET
 3520              	/* copy system variables to RAM */
 3521 1d60 FEF72EFF 		BL IMG_ADR 
 3522 1d64 FEF798FC 		BL DUPP 
 3523 1d68 FEF77AFC 		BL TOR   // save source address 
 3524 1d6c FEF736FF 		BL IMG_SIGN 
 3525 1d70 41F8045D 		_PUSH 
 3526 1d74 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 3527 1d78 FEF78EFC 		BL DUPP 
 3528 1d7c FEF770FC 		BL TOR 
 3529 1d80 FFF78EF8 		BL MOVE // ( src dest count -- ) R: src count 
 3530              	/* copy user definitions */
 3531 1d84 FEF75AFC 		BL RFROM 
 3532 1d88 FEF758FC 		BL RFROM  
 3533 1d8c FEF7E8FC 		BL PLUS // source address  
 3534 1d90 FEF7FAFE 		BL USER_BEGIN // destination address
 3535 1d94 FFF73CF8 		BL HERE  
 3536 1d98 FEF790FC 		BL OVER 
 3537 1d9c FEF7E8FC 		BL SUBB  // byte count 
 3538 1da0 FFF77EF8 		BL MOVE
 3539 1da4 52F804FB 	1:	_UNNEST  
 3540              	
 3541              	// ERASE_MPG ( u1 u2 -- )
 3542              	// erase many pages 
 3543              	// u1 first page number 
 3544              	// u2 how many pages  
 3545 1da8 44110018 		.word _LOAD_IMG+MAPOFFSET
 3546 1dac 09       	_ERASE_MPG: .byte 9 
 3547 1dad 45524153 		.ascii "ERASE_MPG"	
 3547      455F4D50 
 3547      47
 3548 1db6 00BF     		.p2align 2 
 3549              	ERASE_MPG:
 3550 1db8 42F804ED 		_NEST 
 3551 1dbc FEF750FC 		BL TOR 
 3552 1dc0 00F052F8 		BL PG_TO_ADR 
 3553 1dc4 FEF70AFC 		BL BRAN 
 3554 1dc8 E0110018 		.word 2f+MAPOFFSET 
 3555              	1:
 3556 1dcc FEF764FC 		BL DUPP 
 3557 1dd0 FEF746FC 		BL TOR 
 3558 1dd4 FFF708FF 		BL EPAGE 
 3559 1dd8 FEF730FC 		BL RFROM
 3560 1ddc 05F58065 		add r5,#PAGE_SIZE 
ARM GAS  stm32eforth.s 			page 67


 3561              	2:
 3562 1de0 FEF7E1FB 		BL DONXT
 3563 1de4 CC110018 		.word 1b+MAPOFFSET 
 3564 1de8 51F8045B 		_POP 
 3565 1dec 52F804FB 		_UNNEST 
 3566              	
 3567              	// FLSH_WR ( src dest u -- dest+u )
 3568              	// write u words to flash memory 
 3569 1df0 AC110018 		.word _ERASE_MPG+MAPOFFSET
 3570 1df4 07       	_FLSH_WR: .byte 7 
 3571 1df5 464C5348 		.ascii "FLSH_WR"
 3571      5F5752
 3572              		.p2align  
 3573              	FLSH_WR: 
 3574 1dfc 42F804ED 		_NEST 
 3575 1e00 FEF72EFC 		BL TOR
 3576 1e04 FEF7EAFB 		BL BRAN 
 3577 1e08 2C120018 		.word 3f+MAPOFFSET  
 3578              	/* write system variables to FLASH */
 3579 1e0c FEF728FC 	2:  BL TOR  // destination address 
 3580 1e10 FEF742FC 		BL DUPP 
 3581 1e14 FEF7FCFB 		BL AT   // get data 
 3582 1e18 FEF71AFC 		BL RAT  // get destination address 
 3583 1e1c FFF730FF 		BL ISTOR
 3584 1e20 FEF7ECFC 		BL CELLP  // increment source address 
 3585 1e24 FEF70AFC 		BL RFROM 
 3586 1e28 FEF7E8FC 		BL CELLP  // increment dest address 
 3587 1e2c FEF7BBFB 	3:	BL DONXT 
 3588 1e30 0C120018 		.word 2b+MAPOFFSET
 3589 1e34 FEF714FC 		BL TOR 
 3590 1e38 FEF726FC 		BL DROP 
 3591 1e3c FEF7FEFB 		BL RFROM 
 3592 1e40 52F804FB 		_UNNEST 
 3593              	
 3594              	// ADR>PG ( a -- n )
 3595              	// convert address to page number, {0..127} 
 3596 1e44 F4110018 		.word _FLSH_WR+MAPOFFSET
 3597 1e48 06       	_ADR_TO_PG: .byte 6 
 3598 1e49 4144523E 		.ascii "ADR>PG" 
 3598      5047
 3599 1e4f 00       		.p2align 2 
 3600              	ADR_TO_PG: 
 3601 1e50 4FEA9525 		lsr r5,#10 
 3602 1e54 05F07F05 		and r5,#127 
 3603 1e58 7047     		_NEXT  
 3604              	
 3605              	// PG>ADR ( n -- a )
 3606              	// convert page# to address 
 3607 1e5a 48120018 		.word _ADR_TO_PG+MAPOFFSET
 3608 1e5e 06       	_PG_TO_ADR: .byte 6 
 3609 1e5f 50473E41 		.ascii "PG>ADR" 
 3609      4452
 3610 1e65 0000BF   		.p2align 2 
 3611              	PG_TO_ADR:
 3612 1e68 C0F20205 		movt r5,#2
 3613 1e6c 4FEA8525 		lsl r5,#10 
 3614 1e70 7047     		_NEXT 
ARM GAS  stm32eforth.s 			page 68


 3615              	
 3616              	// ERASE_IMG (  -- )
 3617              	// erase image in from FLASH  
 3618 1e72 5E120018 		.word _PG_TO_ADR+MAPOFFSET 
 3619 1e76 09       	_ERASE_IMG: .byte 9
 3620 1e77 45524153 		.ascii "ERASE_IMG"
 3620      455F494D 
 3620      47
 3621              		.p2align 2
 3622              	ERASE_IMG:
 3623 1e80 42F804ED 		_NEST
 3624 1e84 FEF79CFE 		BL IMG_ADR 
 3625 1e88 FFF726FF 		BL IMG_SIZE 
 3626 1e8c FEF7E8FB 		BL TOR 
 3627 1e90 FEF7A4FB 		BL BRAN 
 3628 1e94 A4120018 		.word  2f+MAPOFFSET 
 3629 1e98 FEF7FEFB 	1:	BL DUPP 
 3630 1e9c FFF7A4FE 		BL EPAGE
 3631 1ea0 05F58065 		ADD R5,#PAGE_SIZE 
 3632 1ea4 FEF77FFB 	2:	BL DONXT 
 3633 1ea8 98120018 		.word 1b+MAPOFFSET 
 3634 1eac FEF7ECFB 		BL DROP 
 3635 1eb0 52F804FB 		_UNNEST 
 3636              	
 3637              	// SAVE_IMG ( -- )
 3638              	// save in FLASH memory system variables and user defintitions.
 3639 1eb4 76120018 		.word _ERASE_IMG+MAPOFFSET	
 3640 1eb8 08       	_SAVE_IMG: .byte 8 
 3641 1eb9 53415645 		.ascii "SAVE_IMG"
 3641      5F494D47 
 3642 1ec1 0000BF   		.p2align 2
 3643              	SAVE_IMG:
 3644 1ec4 42F804ED 		_NEST 
 3645 1ec8 FEF7A2FF 		BL HERE 
 3646 1ecc FEF75CFE 		BL USER_BEGIN
 3647 1ed0 FEF72AFD 		BL EQUAL 
 3648 1ed4 FEF776FB 		BL QBRAN
 3649 1ed8 E0120018 		.word 1f+MAPOFFSET 
 3650 1edc 52F804FB 		_UNNEST  // nothing to save 
 3651 1ee0 FFF71EFF 	1:	BL IMGQ 
 3652 1ee4 FEF76EFB 		BL QBRAN 
 3653 1ee8 F0120018 		.word 2f+MAPOFFSET
 3654              	/* delete saved image */
 3655 1eec FFF7C8FF 		BL ERASE_IMG 
 3656              	/* save system variables */
 3657              	2:	
 3658 1ef0 FEF774FE 		BL IMG_SIGN // src address 
 3659 1ef4 FEF764FE 		BL IMG_ADR  //  ( src dest --  
 3660 1ef8 41F8045D 		_PUSH 
 3661 1efc 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 3662 1f00 FEF79EFC 		BL CELLSL  // word count 
 3663 1f04 FFF77AFF 		BL FLSH_WR  // ( src dest count -- dest+u )
 3664              	/* write user definitions */
 3665 1f08 FEF73EFE 		BL USER_BEGIN
 3666 1f0c FEF7CCFB 		BL SWAP  // ( src dest+ -- )
 3667 1f10 FEF77EFF 		BL HERE   
 3668 1f14 FEF738FE 		BL USER_BEGIN 
ARM GAS  stm32eforth.s 			page 69


 3669 1f18 FEF72AFC 		BL SUBB 
 3670 1f1c FEF790FC 		BL CELLSL  // src dest+ count -- 
 3671 1f20 FFF76CFF 		BL FLSH_WR  
 3672 1f24 52F804FB 		_UNNEST 
 3673              	
 3674              	// TURNKEY ( -- "WORD") 
 3675              	// set autorun program in 'BOOT variable 
 3676              	// and save image in slot 0.
 3677 1f28 B8120018 		.word _SAVE_IMG+MAPOFFSET
 3678 1f2c 07       	_TURNKEY: .byte 7
 3679 1f2d 5455524E 		.ascii "TURNKEY"
 3679      4B4559
 3680              		.p2align 2 
 3681              	TURNKEY:
 3682 1f34 42F804ED 		_NEST 
 3683 1f38 00F040F8 		BL TICK 
 3684 1f3c FEF7AAFD 		BL TBOOT 
 3685 1f40 FEF75CFB 		BL STORE 
 3686 1f44 FFF7BEFF 		BL SAVE_IMG 
 3687 1f48 52F804FB 		_UNNEST
 3688              	
 3689 1f4c 2C130018 		.word _TURNKEY+MAPOFFSET
 3690 1f50 06       	_FORGET: .byte 6 
 3691 1f51 464F5247 		.ascii "FORGET"
 3691      4554
 3692 1f57 00       		.p2align 2
 3693              	FORGET:
 3694 1f58 42F804ED 		_NEST 
 3695 1f5c FFF7BCFB 		BL TOKEN 
 3696 1f60 FEF79AFB 		BL DUPP 
 3697 1f64 FEF72EFB 		BL QBRAN 
 3698 1f68 FEF709FB 		_DOLIT 
 3699 1f6c A4130018 		.word 9f+MAPOFFSET 
 3700 1f70 FFF76CFC 		BL NAMEQ // ( a -- ca na | a 0 )
 3701 1f74 FEF77CFC 		BL QDUP 
 3702 1f78 FEF724FB 		BL QBRAN 
 3703 1f7c A0130018 		.word 8f+MAPOFFSET
 3704 1f80 FEF744FC 		BL CELLM // ( ca la )
 3705 1f84 FEF788FB 		BL DUPP 
 3706 1f88 FEF7DCFD 		BL CPP   
 3707 1f8c FEF736FB 		BL STORE
 3708 1f90 FEF73EFB 		BL AT 
 3709 1f94 FEF7EAFD 		BL LAST 
 3710 1f98 FEF730FB 		BL STORE
 3711 1f9c 00F024FA 		BL OVERT 
 3712 1fa0 FEF772FB 	8:  BL DROP 
 3713 1fa4 52F804FB 	9:	_UNNEST 
 3714              	
 3715              	
 3716              	flash_regs:
 3717 1fa8 00200240 		.word FLASH_BASE_ADR // 0 
 3718 1fac 23016745 		.word FLASH_KEY1   // 4 
 3719 1fb0 AB89EFCD 		.word FLASH_KEY2   // 8
 3720              	
 3721              	// **************************************************************************
 3722              	//  The compiler
 3723              	
ARM GAS  stm32eforth.s 			page 70


 3724              	//    '	   ( -- ca )
 3725              	// 	Search context vocabularies for the next word in input stream.
 3726              	
 3727 1fb4 50130018 		.word	_FORGET+MAPOFFSET
 3728 1fb8 01       	_TICK:	.byte  1
 3729 1fb9 27       		.ascii "'"
 3730 1fba 00BF     		.p2align 2 	
 3731              	TICK:
 3732 1fbc 42F804ED 		_NEST
 3733 1fc0 FFF78AFB 		BL	TOKEN
 3734 1fc4 FFF742FC 		BL	NAMEQ	// ?defined
 3735 1fc8 FEF7FCFA 		BL	QBRAN
 3736 1fcc D4130018 		.word	TICK1+MAPOFFSET
 3737 1fd0 52F804FB 		_UNNEST	// yes, push code address
 3738 1fd4 FFF700BD 	TICK1:	B.W	ABORT	// no, error
 3739              	
 3740              	//    ALLOT	( n -- )
 3741              	// 	Allocate n bytes to the ram area.
 3742              	
 3743 1fd8 B8130018 		.word	_TICK+MAPOFFSET
 3744 1fdc 05       	_ALLOT:	.byte  5
 3745 1fdd 414C4C4F 		.ascii "ALLOT"
 3745      54
 3746 1fe2 00BF     		.p2align 2 	
 3747              	ALLOT:
 3748 1fe4 42F804ED 		_NEST
 3749 1fe8 FEF7ACFD 		BL	CPP
 3750 1fec FEF7E0FC 		BL	PSTOR
 3751 1ff0 52F804FB 		_UNNEST			// adjust code pointer
 3752              	
 3753              	//    ,	   ( w -- )
 3754              	// 	Compile an integer into the code dictionary.
 3755              	
 3756 1ff4 DC130018 		.word	_ALLOT+MAPOFFSET
 3757 1ff8 012C     	_COMMA:	.byte  1,','
 3758 1ffa 00BF     		.p2align 2 	
 3759              	COMMA:
 3760 1ffc 42F804ED 		_NEST
 3761 2000 FEF706FF 		BL	HERE
 3762 2004 FEF748FB 		BL	DUPP
 3763 2008 FEF7F8FB 		BL	CELLP	// cell boundary
 3764 200c FEF79AFD 		BL	CPP
 3765 2010 FEF7F4FA 		BL	STORE
 3766 2014 FEF7F2FA 		BL	STORE
 3767 2018 52F804FB 		_UNNEST	// adjust code pointer, compile
 3768              		.p2align 2 
 3769              	//    [COMPILE]   ( -- //  string> )
 3770              	// 	Compile the next immediate word into code dictionary.
 3771              	
 3772 201c F8130018 		.word	_COMMA+MAPOFFSET
 3773 2020 89       	_BCOMP:	.byte  IMEDD+9
 3774 2021 5B434F4D 		.ascii "[COMPILE]"
 3774      50494C45 
 3774      5D
 3775 202a 00BF     		.p2align 2 	
 3776              	BCOMP:
 3777 202c 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 71


 3778 2030 FFF7C4FF 		BL	TICK
 3779 2034 FFF7E2FF 		BL	COMMA
 3780 2038 52F804FB 		_UNNEST
 3781              	
 3782              	//    COMPILE	( -- )
 3783              	// 	Compile the next address in colon list to code dictionary.
 3784              	
 3785 203c 20140018 		.word	_BCOMP+MAPOFFSET
 3786 2040 47       	_COMPI:	.byte  COMPO+7
 3787 2041 434F4D50 		.ascii "COMPILE"
 3787      494C45
 3788              		.p2align 2 	
 3789              	COMPI:
 3790 2048 42F804ED 		_NEST
 3791 204c FEF7F6FA 		BL	RFROM
 3792 2050 25F00105 		BIC	R5,R5,#1
 3793 2054 FEF720FB 		BL	DUPP
 3794 2058 FEF7DAFA 		BL	AT
 3795 205c 00F0F2F9 		BL	CALLC			// compile BL instruction
 3796 2060 FEF7CCFB 		BL	CELLP
 3797 2064 45F00105 		ORR	R5,R5,#1
 3798 2068 FEF7FAFA 		BL	TOR
 3799 206c 52F804FB 		_UNNEST			// adjust return address
 3800              	
 3801              	//    LITERAL	( w -- )
 3802              	// 	Compile tos to code dictionary as an integer literal.
 3803              	
 3804 2070 40140018 		.word	_COMPI+MAPOFFSET
 3805 2074 87       	_LITER:	.byte  IMEDD+7
 3806 2075 4C495445 		.ascii "LITERAL"
 3806      52414C
 3807              		.p2align 2 	
 3808              	LITER:
 3809 207c 42F804ED 		_NEST
 3810 2080 FFF7E2FF 		BL	COMPI
 3811 2084 7EF9FF17 		.word	DOLIT+MAPOFFSET
 3812 2088 FFF7B8FF 		BL	COMMA
 3813 208c 52F804FB 		_UNNEST
 3814              	
 3815              	//    $,"	( -- )
 3816              	// 	Compile a literal string up to next " .
 3817              	
 3818              	// 	.word	_LITER+MAPOFFSET
 3819              	// _STRCQ	.byte  3
 3820              	// 	.ascii "$$,"""
 3821              	// 	.p2align 2 	
 3822              	STRCQ:
 3823 2090 42F804ED 		_NEST
 3824 2094 FEF773FA 		_DOLIT
 3825 2098 FCFFFFFF 		.word	-4
 3826 209c FEF752FD 		BL	CPP
 3827 20a0 FEF786FC 		BL	PSTOR
 3828 20a4 FEF76BFA 		_DOLIT
 3829 20a8 22000000 		.word	'\"'
 3830 20ac FFF702FB 		BL	WORDD			// move word to code dictionary
 3831 20b0 FEF7A2FC 		BL	COUNT
 3832 20b4 FEF754FB 		BL	PLUS
ARM GAS  stm32eforth.s 			page 72


 3833 20b8 FEF756FE 		BL	ALGND			// calculate aligned end of string
 3834 20bc FEF742FD 		BL	CPP
 3835 20c0 FEF79CFA 		BL	STORE
 3836 20c4 52F804FB 		_UNNEST 			// adjust the code pointer
 3837              	
 3838              	// **************************************************************************
 3839              	//  Structures
 3840              	
 3841              	//    FOR	 ( -- a )
 3842              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3843              	
 3844 20c8 74140018 		.word	_LITER+MAPOFFSET
 3845 20cc C3       	_FOR:	.byte  COMPO+IMEDD+3
 3846 20cd 464F52   		.ascii "FOR"
 3847              		.p2align 2 	
 3848              	FOR:
 3849 20d0 42F804ED 		_NEST
 3850 20d4 FFF7B8FF 		BL	COMPI
 3851 20d8 60FAFF17 		.word	TOR+MAPOFFSET
 3852 20dc FEF798FE 		BL	HERE
 3853 20e0 52F804FB 		_UNNEST
 3854              	
 3855              	//    BEGIN	( -- a )
 3856              	// 	Start an infinite or indefinite loop structure.
 3857              	
 3858 20e4 CC140018 		.word	_FOR+MAPOFFSET
 3859 20e8 C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 3860 20e9 42454749 		.ascii "BEGIN"
 3860      4E
 3861 20ee 00BF     		.p2align 2 	
 3862              	BEGIN:
 3863 20f0 42F804ED 		_NEST
 3864 20f4 FEF78CFE 		BL	HERE
 3865 20f8 52F804FB 		_UNNEST
 3866              		.p2align 2 
 3867              	//    NEXT	( a -- )
 3868              	// 	Terminate a FOR-NEXT loop structure.
 3869              	
 3870 20fc E8140018 		.word	_BEGIN+MAPOFFSET
 3871 2100 C4       	_NEXT:	.byte  COMPO+IMEDD+4
 3872 2101 4E455854 		.ascii "NEXT"
 3873 2105 0000BF   		.p2align 2 	
 3874              	NEXT:
 3875 2108 42F804ED 		_NEST
 3876 210c FFF79CFF 		BL	COMPI
 3877 2110 A6F9FF17 		.word	DONXT+MAPOFFSET
 3878 2114 FFF772FF 		BL	COMMA
 3879 2118 52F804FB 		_UNNEST
 3880              	
 3881              	//    UNTIL	( a -- )
 3882              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3883              	
 3884 211c 00150018 		.word	_NEXT+MAPOFFSET
 3885 2120 C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3886 2121 554E5449 		.ascii "UNTIL"
 3886      4C
 3887 2126 00BF     		.p2align 2 	
ARM GAS  stm32eforth.s 			page 73


 3888              	UNTIL:
 3889 2128 42F804ED 		_NEST
 3890 212c FFF78CFF 		BL	COMPI
 3891 2130 C4F9FF17 		.word	QBRAN+MAPOFFSET
 3892 2134 FFF762FF 		BL	COMMA
 3893 2138 52F804FB 		_UNNEST
 3894              	
 3895              	//    AGAIN	( a -- )
 3896              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3897              	
 3898 213c 20150018 		.word	_UNTIL+MAPOFFSET
 3899 2140 C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3900 2141 41474149 		.ascii "AGAIN"
 3900      4E
 3901 2146 00BF     		.p2align 2 	
 3902              	AGAIN:
 3903 2148 42F804ED 		_NEST
 3904 214c FFF77CFF 		BL	COMPI
 3905 2150 DCF9FF17 		.word	BRAN+MAPOFFSET
 3906 2154 FFF752FF 		BL	COMMA
 3907 2158 52F804FB 		_UNNEST
 3908              	
 3909              	//    IF	  ( -- A )
 3910              	// 	Begin a conditional branch structure.
 3911              	
 3912 215c 40150018 		.word	_AGAIN+MAPOFFSET
 3913 2160 C2       	_IFF:	.byte  COMPO+IMEDD+2
 3914 2161 4946     		.ascii "IF"
 3915 2163 00       		.p2align 2 	
 3916              	IFF:
 3917 2164 42F804ED 		_NEST
 3918 2168 FFF76EFF 		BL	COMPI
 3919 216c C4F9FF17 		.word	QBRAN+MAPOFFSET
 3920 2170 FEF74EFE 		BL	HERE
 3921 2174 FEF703FA 		_DOLIT
 3922 2178 04000000 		.word	4
 3923 217c FEF7E2FC 		BL	CPP
 3924 2180 FEF716FC 		BL	PSTOR
 3925 2184 52F804FB 		_UNNEST
 3926              	
 3927              	//    AHEAD	( -- A )
 3928              	// 	Compile a forward branch instruction.
 3929              	
 3930 2188 60150018 		.word	_IFF+MAPOFFSET
 3931 218c C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 3932 218d 41484541 		.ascii "AHEAD"
 3932      44
 3933 2192 00BF     		.p2align 2 	
 3934              	AHEAD:
 3935 2194 42F804ED 		_NEST
 3936 2198 FFF756FF 		BL	COMPI
 3937 219c DCF9FF17 		.word	BRAN+MAPOFFSET
 3938 21a0 FEF736FE 		BL	HERE
 3939 21a4 FEF7EBF9 		_DOLIT
 3940 21a8 04000000 		.word	4
 3941 21ac FEF7CAFC 		BL	CPP
 3942 21b0 FEF7FEFB 		BL	PSTOR
ARM GAS  stm32eforth.s 			page 74


 3943 21b4 52F804FB 		_UNNEST
 3944              	
 3945              	//    REPEAT	( A a -- )
 3946              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3947              	
 3948 21b8 8C150018 		.word	_AHEAD+MAPOFFSET
 3949 21bc C6       	_REPEA:	.byte  COMPO+IMEDD+6
 3950 21bd 52455045 		.ascii "REPEAT"
 3950      4154
 3951 21c3 00       		.p2align 2 	
 3952              	REPEA:
 3953 21c4 42F804ED 		_NEST
 3954 21c8 FFF7BEFF 		BL	AGAIN
 3955 21cc FEF720FE 		BL	HERE
 3956 21d0 FEF76AFA 		BL	SWAP
 3957 21d4 FEF712FA 		BL	STORE
 3958 21d8 52F804FB 		_UNNEST
 3959              	
 3960              	//    THEN	( A -- )
 3961              	// 	Terminate a conditional branch structure.
 3962              	
 3963 21dc BC150018 		.word	_REPEA+MAPOFFSET
 3964 21e0 C4       	_THENN:	.byte  COMPO+IMEDD+4
 3965 21e1 5448454E 		.ascii "THEN"
 3966 21e5 0000BF   		.p2align 2 	
 3967              	THENN:
 3968 21e8 42F804ED 		_NEST
 3969 21ec FEF710FE 		BL	HERE
 3970 21f0 FEF75AFA 		BL	SWAP
 3971 21f4 FEF702FA 		BL	STORE
 3972 21f8 52F804FB 		_UNNEST
 3973              	
 3974              	//    AFT	 ( a -- a A )
 3975              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3976              	
 3977 21fc E0150018 		.word	_THENN+MAPOFFSET
 3978 2200 C3       	_AFT:	.byte  COMPO+IMEDD+3
 3979 2201 414654   		.ascii "AFT"
 3980              		.p2align 2 	
 3981              	AFT:
 3982 2204 42F804ED 		_NEST
 3983 2208 FEF73EFA 		BL	DROP
 3984 220c FFF7C2FF 		BL	AHEAD
 3985 2210 FFF76EFF 		BL	BEGIN
 3986 2214 FEF748FA 		BL	SWAP
 3987 2218 52F804FB 		_UNNEST
 3988              	
 3989              	//    ELSE	( A -- A )
 3990              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3991              	
 3992 221c 00160018 		.word	_AFT+MAPOFFSET
 3993 2220 C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 3994 2221 454C5345 		.ascii "ELSE"
 3995 2225 0000BF   		.p2align 2 	
 3996              	ELSEE:
 3997 2228 42F804ED 		_NEST
 3998 222c FFF7B2FF 		BL	AHEAD
ARM GAS  stm32eforth.s 			page 75


 3999 2230 FEF73AFA 		BL	SWAP
 4000 2234 FFF7D8FF 		BL	THENN
 4001 2238 52F804FB 		_UNNEST
 4002              	
 4003              	//    WHILE	( a -- A a )
 4004              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 4005              	
 4006 223c 20160018 		.word	_ELSEE+MAPOFFSET
 4007 2240 C5       	_WHILE:	.byte  COMPO+IMEDD+5
 4008 2241 5748494C 		.ascii "WHILE"
 4008      45
 4009 2246 00BF     		.p2align 2 	
 4010              	WHILE:
 4011 2248 42F804ED 		_NEST
 4012 224c FFF78AFF 		BL	IFF
 4013 2250 FEF72AFA 		BL	SWAP
 4014 2254 52F804FB 		_UNNEST
 4015              	
 4016              	//    ABORT"	( -- //  string> )
 4017              	// 	Conditional abort with an error message.
 4018              	
 4019 2258 40160018 		.word	_WHILE+MAPOFFSET
 4020 225c 86       	_ABRTQ:	.byte  IMEDD+6
 4021 225d 41424F52 		.ascii "ABORT\""
 4021      5422
 4022 2263 00       		.p2align 2 	
 4023              	ABRTQ:
 4024 2264 42F804ED 		_NEST
 4025 2268 FFF7EEFE 		BL	COMPI
 4026 226c 000E0018 		.word	ABORQ+MAPOFFSET
 4027 2270 FFF70EFF 		BL	STRCQ
 4028 2274 52F804FB 		_UNNEST
 4029              	
 4030              	//    $"	( -- //  string> )
 4031              	// 	Compile an inlineDCB literal.
 4032              	
 4033 2278 5C160018 		.word	_ABRTQ+MAPOFFSET
 4034 227c 82       	_STRQ:	.byte  IMEDD+2
 4035 227d 2422     		.byte	'$','"'
 4036 227f 00       		.p2align 2 	
 4037              	STRQ:
 4038 2280 42F804ED 		_NEST
 4039 2284 FFF7E0FE 		BL	COMPI
 4040 2288 B4070018 		.word	STRQP+MAPOFFSET
 4041 228c FFF700FF 		BL	STRCQ
 4042 2290 52F804FB 		_UNNEST
 4043              	
 4044              	//    ."	( -- //  string> )
 4045              	// 	Compile an inline word  literal to be typed out at run time.
 4046              	
 4047 2294 7C160018 		.word	_STRQ+MAPOFFSET
 4048 2298 C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 4049 2299 2E22     		.byte	'.','"'
 4050 229b 00       		.p2align 2 	
 4051              	DOTQ:
 4052 229c 42F804ED 		_NEST
 4053 22a0 FFF7D2FE 		BL	COMPI
ARM GAS  stm32eforth.s 			page 76


 4054 22a4 D0070018 		.word	DOTQP+MAPOFFSET
 4055 22a8 FFF7F2FE 		BL	STRCQ
 4056 22ac 52F804FB 		_UNNEST
 4057              	
 4058              	// **************************************************************************
 4059              	//  Name compiler
 4060              	
 4061              	//    ?UNIQUE	( a -- a )
 4062              	// 	Display a warning message if the word already exists.
 4063              	
 4064 22b0 98160018 		.word	_DOTQ+MAPOFFSET
 4065 22b4 07       	_UNIQU:	.byte  7
 4066 22b5 3F554E49 		.ascii "?UNIQUE"
 4066      515545
 4067              		.p2align 2 	
 4068              	UNIQU:
 4069 22bc 42F804ED 		_NEST
 4070 22c0 FEF7EAF9 		BL	DUPP
 4071 22c4 FFF7C2FA 		BL	NAMEQ			// ?name exists
 4072 22c8 FEF77CF9 		BL	QBRAN
 4073 22cc E8160018 		.word	UNIQ1+MAPOFFSET	// redefinitions are OK
 4074 22d0 FFF77EF8 		BL	DOTQP
 4075 22d4 07       		.byte	7
 4076 22d5 20726544 		.ascii " reDef "		// but warn the user
 4076      656620
 4077              		.p2align 2 	
 4078 22dc FEF7EEF9 		BL	OVER
 4079 22e0 FEF78AFB 		BL	COUNT
 4080 22e4 FFF724F8 		BL	TYPEE			// just in case its not planned
 4081              	UNIQ1:
 4082 22e8 FEF7CEF9 		BL	DROP
 4083 22ec 52F804FB 		_UNNEST
 4084              	
 4085              	//    $,n	 ( na -- )
 4086              	// 	Build a new dictionary name using the data at na.
 4087              	
 4088              	// 	.word	_UNIQU+MAPOFFSET
 4089              	// _SNAME	.byte  3
 4090              	// 	.ascii "$$,n"
 4091              	// 	.p2align 2 	
 4092              	SNAME:
 4093 22f0 42F804ED 		_NEST
 4094 22f4 FEF7D0F9 		BL	DUPP			//  na na
 4095 22f8 FEF79AF9 		BL	CAT			//  ?null input
 4096 22fc FEF762F9 		BL	QBRAN
 4097 2300 38170018 		.word	SNAM1+MAPOFFSET
 4098 2304 FFF7DAFF 		BL	UNIQU			//  na
 4099 2308 FEF730FC 		BL	LAST			//  na last
 4100 230c FEF780F9 		BL	AT			//  na la
 4101 2310 FFF774FE 		BL	COMMA			//  na
 4102 2314 FEF7C0F9 		BL	DUPP			//  na na
 4103 2318 FEF728FC 		BL	LAST			//  na na last
 4104 231c FEF76EF9 		BL	STORE			//  na , save na for vocabulary link
 4105 2320 FEF76AFB 		BL	COUNT			//  na+1 count
 4106 2324 FEF71CFA 		BL	PLUS			//  na+1+count
 4107 2328 FEF71EFD 		BL	ALGND			//  word boundary
 4108 232c FEF70AFC 		BL	CPP
ARM GAS  stm32eforth.s 			page 77


 4109 2330 FEF764F9 		BL	STORE			//  top of dictionary now
 4110 2334 52F804FB 		_UNNEST
 4111              	SNAM1:
 4112 2338 FFF73CF8 		BL	STRQP
 4113 233c 07       		.byte	7
 4114 233d 206E616D 		.ascii " name? "
 4114      653F20
 4115 2344 FFF748BB 		B.W	ABORT
 4116              	
 4117              	//    $COMPILE	( a -- )
 4118              	// 	Compile next word to code dictionary as a token or literal.
 4119              	
 4120 2348 B4160018 		.word	_UNIQU+MAPOFFSET
 4121 234c 08       	_SCOMP:	.byte  8
 4122 234d 2424434F 		.ascii "$$COMPILE"
 4122      4D50494C 
 4122      45
 4123 2356 00BF     		.p2align 2 	
 4124              	SCOMP:
 4125 2358 42F804ED 		_NEST
 4126 235c FFF776FA 		BL	NAMEQ
 4127 2360 FEF786FA 		BL	QDUP	// defined?
 4128 2364 FEF72EF9 		BL	QBRAN
 4129 2368 94170018 		.word	SCOM2+MAPOFFSET
 4130 236c FEF750F9 		BL	AT
 4131 2370 FEF705F9 		_DOLIT
 4132 2374 80000000 		.word	IMEDD
 4133 2378 FEF7B2F9 		BL	ANDD	// immediate?
 4134 237c FEF722F9 		BL	QBRAN
 4135 2380 8C170018 		.word	SCOM1+MAPOFFSET
 4136 2384 FEF70AF9 		BL	EXECU
 4137 2388 52F804FB 		_UNNEST			// it's immediate, execute
 4138              	SCOM1:
 4139 238c 00F05AF8 		BL	CALLC			// it's not immediate, compile
 4140 2390 52F804FB 		_UNNEST	
 4141              	SCOM2:
 4142 2394 FEF7ECFE 		BL	NUMBQ
 4143 2398 FEF714F9 		BL	QBRAN
 4144 239c A8170018 		.word	SCOM3+MAPOFFSET
 4145 23a0 FFF76CFE 		BL	LITER
 4146 23a4 52F804FB 		_UNNEST			// compile number as integer
 4147              	SCOM3: // compilation abort 
 4148 23a8 00F002F8 		BL COLON_ABORT 
 4149 23ac FFF714BB 		B.W	ABORT			// error
 4150              	
 4151              	// before aborting a compilation 
 4152              	// reset HERE and LAST
 4153              	// to previous values.  
 4154              	COLON_ABORT:
 4155 23b0 42F804ED 		_NEST 
 4156 23b4 FEF7DAFB 		BL LAST 
 4157 23b8 FEF72AF9 		BL AT 
 4158 23bc FEF726FA 		BL CELLM 
 4159 23c0 FEF76AF9 		BL DUPP 
 4160 23c4 FEF7BEFB 		BL CPP  
 4161 23c8 FEF718F9 		BL STORE 
 4162 23cc FEF720F9 		BL AT 
ARM GAS  stm32eforth.s 			page 78


 4163 23d0 FEF7CCFB 		BL LAST 
 4164 23d4 FEF712F9 		BL STORE 
 4165 23d8 52F804FB 		_UNNEST 
 4166              	
 4167              	//    OVERT	( -- )
 4168              	// 	Link a new word into the current vocabulary.
 4169              	
 4170 23dc 4C170018 		.word	_SCOMP+MAPOFFSET
 4171 23e0 05       	_OVERT:	.byte  5
 4172 23e1 4F564552 		.ascii "OVERT"
 4172      54
 4173 23e6 00BF     		.p2align 2 	
 4174              	OVERT:
 4175 23e8 42F804ED 		_NEST
 4176 23ec FEF7BEFB 		BL	LAST
 4177 23f0 FEF70EF9 		BL	AT
 4178 23f4 FEF79CFB 		BL	CNTXT
 4179 23f8 FEF700F9 		BL	STORE
 4180 23fc 52F804FB 		_UNNEST
 4181              	
 4182              	//    ; 	   ( -- )
 4183              	// 	Terminate a colon definition.
 4184              	
 4185 2400 E0170018 		.word	_OVERT+MAPOFFSET
 4186 2404 C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 4187 2405 3B       		.ascii ";"
 4188 2406 00BF     		.p2align 2 	
 4189              	SEMIS:
 4190 2408 42F804ED 		_NEST
 4191 240c FEF7B7F8 		_DOLIT
 4192 2410 52F804FB 		_UNNEST
 4193 2414 FFF7F2FD 		BL	COMMA
 4194 2418 FFF738FB 		BL	LBRAC
 4195 241c FFF7E4FF 		BL	OVERT
 4196 2420 52F804FB 		_UNNEST
 4197              	
 4198              	//    ]	   ( -- )
 4199              	// 	Start compiling the words in the input stream.
 4200              	
 4201 2424 04180018 		.word	_SEMIS+MAPOFFSET
 4202 2428 01       	_RBRAC:	.byte  1
 4203 2429 5D       		.ascii "]"
 4204 242a 00BF     		.p2align 2 	
 4205              	RBRAC:
 4206 242c 42F804ED 		_NEST
 4207 2430 FEF7A5F8 		_DOLIT
 4208 2434 58170018 		.word	SCOMP+MAPOFFSET
 4209 2438 FEF764FB 		BL	TEVAL
 4210 243c FEF7DEF8 		BL	STORE
 4211 2440 52F804FB 		_UNNEST
 4212              	
 4213              	//    BL.W	( ca -- )
 4214              	// 	Assemble a branch-link long instruction to ca.
 4215              	// 	BL.W is split into 2 16 bit instructions with 11 bit address fields.
 4216              	
 4217              	// 	.word	_RBRAC+MAPOFFSET
 4218              	// _CALLC	.byte  5
ARM GAS  stm32eforth.s 			page 79


 4219              	// 	.ascii "call,"
 4220              	// 	.p2align 2 	
 4221              	CALLC:
 4222 2444 42F804ED 		_NEST
 4223 2448 25F00105 		BIC	R5,R5,#1		//  clear b0 of address from R>
 4224 244c FEF7E0FC 		BL	HERE
 4225 2450 FEF78EF9 		BL	SUBB
 4226 2454 A5F10405 		SUB	R5,R5,#4		//  pc offset
 4227 2458 40F2FF70 		MOVW	R0,#0x7FF		//  11 bit mask
 4228 245c 2C46     		MOV	R4,R5
 4229 245e 4FEA1535 		LSR	R5,R5,#12		//  get bits 22-12
 4230 2462 05EA0005 		AND	R5,R5,R0
 4231 2466 4FEAC434 		LSL	R4,R4,#15		//  get bits 11-1
 4232 246a 45EA0405 		ORR	R5,R5,R4
 4233 246e 45F07845 		ORR	R5,R5,#0xF8000000
 4234 2472 45F47045 		ORR	R5,R5,#0xF000
 4235 2476 FFF7C1FD 		BL	COMMA			//  assemble BL.W instruction
 4236 247a 52F804FB 		_UNNEST
 4237              	
 4238              	
 4239              	// 	:	( -- //  string> )
 4240              	// 	Start a new colon definition using next word as its name.
 4241              	
 4242 247e 28180018 		.word	_RBRAC+MAPOFFSET
 4243 2482 01       	_COLON:	.byte  1
 4244 2483 3A       		.ascii ":"
 4245              		.p2align 2 	
 4246              	COLON:
 4247 2484 42F804ED 		_NEST
 4248 2488 FFF726F9 		BL	TOKEN
 4249 248c FFF730FF 		BL	SNAME
 4250 2490 FEF775F8 		_DOLIT
 4251 2494 42F804ED 		_NEST
 4252 2498 FFF7B0FD 		BL	COMMA
 4253 249c FFF7C6FF 		BL	RBRAC
 4254 24a0 52F804FB 		_UNNEST
 4255              	
 4256              	//    IMMEDIATE   ( -- )
 4257              	// 	Make the last compiled word an immediate word.
 4258              	
 4259 24a4 82180018 		.word	_COLON+MAPOFFSET
 4260 24a8 09       	_IMMED:	.byte  9
 4261 24a9 494D4D45 		.ascii "IMMEDIATE"
 4261      44494154 
 4261      45
 4262 24b2 00BF     		.p2align 2 	
 4263              	IMMED:
 4264 24b4 42F804ED 		_NEST
 4265 24b8 FEF761F8 		_DOLIT
 4266 24bc 80000000 		.word	IMEDD
 4267 24c0 FEF754FB 		BL	LAST
 4268 24c4 FEF7A4F8 		BL	AT
 4269 24c8 FEF7A2F8 		BL	AT
 4270 24cc FEF712F9 		BL	ORR
 4271 24d0 FEF74CFB 		BL	LAST
 4272 24d4 FEF79CF8 		BL	AT
 4273 24d8 FEF790F8 		BL	STORE
ARM GAS  stm32eforth.s 			page 80


 4274 24dc 52F804FB 		_UNNEST
 4275              	
 4276              	// **************************************************************************
 4277              	//  Defining words
 4278              	
 4279              	//    CONSTANT	( u -- //  string> )
 4280              	// 	Compile a new constant.
 4281              	
 4282 24e0 A8180018 		.word	_IMMED+MAPOFFSET
 4283 24e4 08       	_CONST:	.byte  8
 4284 24e5 434F4E53 		.ascii "CONSTANT"
 4284      54414E54 
 4285 24ed 0000BF   		.p2align 2 	
 4286              	CONST:
 4287 24f0 42F804ED 		_NEST
 4288 24f4 FFF7F0F8 		BL	TOKEN
 4289 24f8 FFF7FAFE 		BL	SNAME
 4290 24fc FFF774FF 		BL	OVERT
 4291 2500 FEF73DF8 		_DOLIT
 4292 2504 42F804ED 		_NEST
 4293 2508 FFF778FD 		BL	COMMA
 4294 250c FEF737F8 		_DOLIT
 4295 2510 2CFEFF17 		.word	DOCON+MAPOFFSET
 4296 2514 FFF796FF 		BL	CALLC
 4297 2518 FFF770FD 		BL	COMMA
 4298 251c 52F804FB 		_UNNEST
 4299              	
 4300              	//    CREATE	( -- //  string> )
 4301              	// 	Compile a new array entry without allocating code space.
 4302              	
 4303 2520 E4180018 		.word	_CONST+MAPOFFSET
 4304 2524 06       	_CREAT:	.byte  6
 4305 2525 43524541 		.ascii "CREATE"
 4305      5445
 4306 252b 00       		.p2align 2 	
 4307              	CREAT:
 4308 252c 42F804ED 		_NEST
 4309 2530 FFF7D2F8 		BL	TOKEN
 4310 2534 FFF7DCFE 		BL	SNAME
 4311 2538 FFF756FF 		BL	OVERT
 4312 253c FEF71FF8 		_DOLIT
 4313 2540 42F804ED 		_NEST
 4314 2544 FFF75AFD 		BL	COMMA
 4315 2548 FEF719F8 		_DOLIT
 4316 254c 20FEFF17 		.word	DOVAR+MAPOFFSET
 4317 2550 FFF778FF 		BL	CALLC
 4318 2554 52F804FB 		_UNNEST
 4319              	
 4320              	//    VARIABLE	( -- //  string> )
 4321              	// 	Compile a new variable initialized to 0.
 4322              	
 4323 2558 24190018 		.word	_CREAT+MAPOFFSET
 4324 255c 08       	_VARIA:	.byte  8
 4325 255d 56415249 		.ascii "VARIABLE"
 4325      41424C45 
 4326 2565 0000BF   		.p2align 2 	
 4327              	VARIA:
ARM GAS  stm32eforth.s 			page 81


 4328 2568 42F804ED 		_NEST
 4329 256c FFF7DEFF 		BL	CREAT
 4330 2570 FEF705F8 		_DOLIT
 4331 2574 00000000 		.word	0
 4332 2578 FFF740FD 		BL	COMMA
 4333 257c 52F804FB 		_UNNEST
 4334              	
 4335              	// **************************************************************************
 4336              	//  Tools
 4337              	
 4338              	//    dm+	 ( a u -- a )
 4339              	// 	Dump u bytes from , leaving a+u on the stack.
 4340              	
 4341              	// 	.word	_VARIA+MAPOFFSET
 4342              	// _DMP	.byte  3
 4343              	// 	.ascii "dm+"
 4344              	// 	.p2align 2 	
 4345              	DMP:
 4346 2580 42F804ED 		_NEST
 4347 2584 FEF79AF8 		BL	OVER
 4348 2588 FDF7F9FF 		_DOLIT
 4349 258c 04000000 		.word	4
 4350 2590 FEF740FF 		BL	UDOTR			// display address
 4351 2594 FEF7A4FE 		BL	SPACE
 4352 2598 FEF762F8 		BL	TOR			// start count down loop
 4353 259c 00F00CB8 		B.W	PDUM2			// skip first pass
 4354              	PDUM1:
 4355 25a0 FEF77AF8 	  BL	DUPP
 4356 25a4 FEF744F8 		BL	CAT
 4357 25a8 FDF7E9FF 		_DOLIT
 4358 25ac 03000000 		.word	3
 4359 25b0 FEF730FF 		BL	UDOTR			// display numeric data
 4360 25b4 FEF702F9 		BL	ONEP			// increment address
 4361              	PDUM2:
 4362 25b8 FDF7F5FF 	  BL	DONXT
 4363 25bc A0190018 		.word	PDUM1+MAPOFFSET	// loop till done
 4364 25c0 52F804FB 		_UNNEST
 4365              		.p2align 2 
 4366              	//    DUMP	( a u -- )
 4367              	// 	Dump u bytes from a, in a formatted manner.
 4368              	
 4369 25c4 5C190018 		.word	_VARIA+MAPOFFSET
 4370 25c8 04       	_DUMP:	.byte  4
 4371 25c9 44554D50 		.ascii "DUMP"
 4372 25cd 0000BF   		.p2align 2 	
 4373              	DUMP:
 4374 25d0 42F804ED 		_NEST
 4375 25d4 FEF768FA 		BL	BASE
 4376 25d8 FEF71AF8 		BL	AT
 4377 25dc FEF740F8 		BL	TOR
 4378 25e0 FEF76EFD 		BL	HEX			// save radix,set hex
 4379 25e4 FDF7CBFF 		_DOLIT
 4380 25e8 10000000 		.word	16
 4381 25ec FEF78CFB 		BL	SLASH			// change count to lines
 4382 25f0 FEF736F8 		BL	TOR
 4383 25f4 00F014B8 		B.W	DUMP4			// start count down loop
 4384              	DUMP1:
ARM GAS  stm32eforth.s 			page 82


 4385 25f8 FEF7B2FE 	  BL	CR
 4386 25fc FDF7BFFF 		_DOLIT
 4387 2600 10000000 		.word	16
 4388 2604 FEF752F9 		BL	DDUP
 4389 2608 FFF7BAFF 		BL	DMP			// display numeric
 4390 260c FEF73AF9 		BL	ROT
 4391 2610 FEF738F9 		BL	ROT
 4392 2614 FEF764FE 		BL	SPACE
 4393 2618 FEF762FE 		BL	SPACE
 4394 261c FEF788FE 		BL	TYPEE			// display printable characters
 4395              	DUMP4:
 4396 2620 FDF7C1FF 	  BL	DONXT
 4397 2624 F8190018 		.word	DUMP1+MAPOFFSET	// loop till done
 4398              	DUMP3:
 4399 2628 FEF72EF8 	  BL	DROP
 4400 262c FEF706F8 		BL	RFROM
 4401 2630 FEF73AFA 		BL	BASE
 4402 2634 FDF7E2FF 		BL	STORE			// restore radix
 4403 2638 52F804FB 		_UNNEST
 4404              	
 4405              	//    .S	  ( ... -- ... )
 4406              	// 	Display the contents of the data stack.
 4407              	
 4408 263c C8190018 		.word	_DUMP+MAPOFFSET
 4409              	_DOTS:
 4410 2640 02       		.byte  2
 4411 2641 2E53     		.ascii ".S"
 4412 2643 00       		.p2align 2 	
 4413              	DOTS:
 4414 2644 42F804ED 		_NEST
 4415 2648 FEF74AFE 		BL	SPACE
 4416 264c FEF7BEFB 		BL	DEPTH			// stack depth
 4417 2650 FEF706F8 		BL	TOR			// start count down loop
 4418 2654 00F006B8 		B.W	DOTS2			// skip first pass
 4419              	DOTS1:
 4420 2658 FDF7FAFF 		BL	RAT
 4421 265c FEF7C4FB 		BL	PICK
 4422 2660 FEF704FF 		BL	DOT			// index stack, display contents
 4423              	DOTS2:
 4424 2664 FDF79FFF 		BL	DONXT
 4425 2668 581A0018 		.word	DOTS1+MAPOFFSET	// loop till done
 4426 266c FEF738FE 		BL	SPACE
 4427 2670 52F804FB 		_UNNEST
 4428              	
 4429              	//    >NAME	( ca -- na | F )
 4430              	// 	Convert code address to a name address.
 4431              	
 4432 2674 401A0018 		.word	_DOTS+MAPOFFSET
 4433 2678 05       	_TNAME:	.byte  5
 4434 2679 3E4E414D 		.ascii ">NAME"
 4434      45
 4435 267e 00BF     		.p2align 2 	
 4436              	TNAME:
 4437 2680 42F804ED 		_NEST
 4438 2684 FDF7ECFF 		BL	TOR			//  
 4439 2688 FEF752FA 		BL	CNTXT			//  va
 4440 268c FDF7C0FF 		BL	AT			//  na
ARM GAS  stm32eforth.s 			page 83


 4441              	TNAM1:
 4442 2690 FEF702F8 		BL	DUPP			//  na na
 4443 2694 FDF796FF 		BL	QBRAN
 4444 2698 C01A0018 		.word	TNAM2+MAPOFFSET	//  vocabulary end, no match
 4445 269c FDF7FCFF 		BL	DUPP			//  na na
 4446 26a0 FFF728F8 		BL	NAMET			//  na ca
 4447 26a4 FDF7D4FF 		BL	RAT			//  na ca code
 4448 26a8 FEF72EF8 		BL	XORR			//  na f --
 4449 26ac FDF78AFF 		BL	QBRAN
 4450 26b0 C01A0018 		.word	TNAM2+MAPOFFSET
 4451 26b4 FEF7AAF8 		BL	CELLM			//  la 
 4452 26b8 FDF7AAFF 		BL	AT			//  next_na
 4453 26bc FFF7E8BF 		B.W	TNAM1
 4454              	TNAM2:	
 4455 26c0 FDF7BCFF 		BL	RFROM
 4456 26c4 FDF7E0FF 		BL	DROP			//  0|na --
 4457 26c8 52F804FB 		_UNNEST			// 0
 4458              	
 4459              	//    .ID	 ( na -- )
 4460              	// 	Display the name at address.
 4461              	
 4462 26cc 781A0018 		.word	_TNAME+MAPOFFSET
 4463 26d0 03       	_DOTID:	.byte  3
 4464 26d1 2E4944   		.ascii ".ID"
 4465              		.p2align 2 	
 4466              	DOTID:
 4467 26d4 42F804ED 		_NEST
 4468 26d8 FEF7CAF8 		BL	QDUP			// if zero no name
 4469 26dc FDF772FF 		BL	QBRAN
 4470 26e0 FC1A0018 		.word	DOTI1+MAPOFFSET
 4471 26e4 FEF788F9 		BL	COUNT
 4472 26e8 FDF749FF 		_DOLIT
 4473 26ec 1F000000 		.word	0x1F
 4474 26f0 FDF7F6FF 		BL	ANDD			// mask lexicon bits
 4475 26f4 FEF71CFE 		BL	TYPEE
 4476 26f8 52F804FB 		_UNNEST			// display name string
 4477              	DOTI1:
 4478 26fc FEF768FE 		BL	DOTQP
 4479 2700 09       		.byte	9
 4480 2701 207B6E6F 		.ascii " {noName}"
 4480      4E616D65 
 4480      7D
 4481 270a 00BF     		.p2align 2 	
 4482 270c 52F804FB 		_UNNEST
 4483              	
 4484              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 4485              	.if WANT_SEE 
 4486              	//    SEE	 ( -- //  string> )
 4487              	// 	A simple decompiler.
 4488              	
 4489              		.word	_DOTID+MAPOFFSET
 4490              	_SEE:	.byte  3
 4491              		.ascii "SEE"
 4492              		.p2align 2 	
 4493              	SEE:
 4494              		_NEST
 4495              		BL	TICK	//  ca --, starting address
ARM GAS  stm32eforth.s 			page 84


 4496              		BL	CR	
 4497              		_DOLIT
 4498              		.word	20
 4499              		BL	TOR
 4500              	SEE1:
 4501              		BL	CELLP			//  a
 4502              		BL	DUPP			//  a a
 4503              		BL	DECOMP		//  a
 4504              		BL	DONXT
 4505              		.word	SEE1+MAPOFFSET
 4506              		BL	DROP
 4507              		_UNNEST
 4508              	
 4509              	// 	DECOMPILE ( a -- )
 4510              	// 	Convert code in a.  Display name of command or as data.
 4511              	
 4512              		.word	_SEE+MAPOFFSET
 4513              	_DECOM:	.byte  9
 4514              		.ascii "DECOMPILE"
 4515              		.p2align 2 
 4516              		
 4517              	DECOMP:	
 4518              		_NEST
 4519              		BL	DUPP			//  a a
 4520              	// 	BL	TOR			//  a
 4521              		BL	AT			//  a code
 4522              		BL	DUPP			//  a code code
 4523              		_DOLIT
 4524              		.word	0xF800D000 //0xF800F800
 4525              		BL	ANDD
 4526              		_DOLIT
 4527              		.word	0xF000D000 //0xF800F000
 4528              		BL	EQUAL			//  a code ?
 4529              		BL	INVER 
 4530              		BL	QBRAN
 4531              		.word	DECOM2+MAPOFFSET	//  not a command
 4532              		//  a valid_code --, extract address and display name
 4533              		MOVW	R0,#0xFFE
 4534              		MOV	R4,R5
 4535              		LSL	R5,R5,#21		//  get bits 22-12
 4536              		ASR	R5,R5,#9		//  with sign extension
 4537              		LSR	R4,R4,#15		//  get bits 11-1
 4538              		AND	R4,R4,R0		//  retain only bits 11-1
 4539              		ORR	R5,R5,R4		//  get bits 22-1
 4540              		NOP
 4541              		BL	OVER			//  a offset a
 4542              		BL	PLUS			//  a target-4
 4543              		BL	CELLP			//  a target
 4544              		BL	TNAME			//  a na/0 --, is it a name?
 4545              		BL	QDUP			//  name address or zero
 4546              		BL	QBRAN
 4547              		.word	DECOM1+MAPOFFSET
 4548              		BL	SPACE			//  a na
 4549              		BL	DOTID			//  a --, display name
 4550              	// 	BL	RFROM			//  a
 4551              		BL	DROP
 4552              		_UNNEST
ARM GAS  stm32eforth.s 			page 85


 4553              	DECOM1:	// BL	RFROM		//  a
 4554              		BL	AT			//  data
 4555              		BL	UDOT			//  display data
 4556              		_UNNEST
 4557              	DECOM2:
 4558              		BL	UDOT
 4559              	// 	BL	RFROM
 4560              		BL	DROP
 4561              		_UNNEST
 4562              	
 4563              	//    WORDS	( -- )
 4564              	// 	Display the names in the context vocabulary.
 4565              	
 4566              		.word	_DECOM+MAPOFFSET
 4567              	.else 
 4568 2710 D01A0018 		.word _DOTID+MAPOFFSET 
 4569              	.endif 
 4570 2714 05       	_WORDS:	.byte  5
 4571 2715 574F5244 		.ascii "WORDS"
 4571      53
 4572 271a 00BF     		.p2align 2 	
 4573              	WORDS:
 4574 271c 42F804ED 		_NEST
 4575 2720 FEF71EFE 		BL	CR
 4576 2724 FEF704FA 		BL	CNTXT
 4577 2728 FDF772FF 		BL	AT			// only in context
 4578              	WORS1:
 4579 272c FEF7A0F8 		BL	QDUP			// ?at end of list
 4580 2730 FDF748FF 		BL	QBRAN
 4581 2734 501B0018 		.word	WORS2+MAPOFFSET
 4582 2738 FDF7AEFF 		BL	DUPP
 4583 273c FEF7D0FD 		BL	SPACE
 4584 2740 FFF7C8FF 		BL	DOTID			// display a name
 4585 2744 FEF762F8 		BL	CELLM
 4586 2748 FDF762FF 		BL	AT
 4587 274c FFF7EEBF 		B.W	WORS1
 4588              	WORS2:
 4589 2750 52F804FB 		_UNNEST
 4590              	
 4591              	// **************************************************************************
 4592              	//  cold start
 4593              	
 4594              	//    VER	 ( -- n )
 4595              	// 	Return the version number of this implementation.
 4596              	
 4597              	// 	.word	_WORDS+MAPOFFSET
 4598              	// _VERSN	.byte  3
 4599              	// 	.ascii "VER"
 4600              	// 	.p2align 2 	
 4601              	VERSN:
 4602 2754 42F804ED 		_NEST
 4603 2758 FDF711FF 		_DOLIT
 4604 275c 00010000 		.word	VER*256+EXT
 4605 2760 52F804FB 		_UNNEST
 4606              	
 4607              	//    hi	  ( -- )
 4608              	// 	Display the sign-on message of eForth.
ARM GAS  stm32eforth.s 			page 86


 4609              	
 4610 2764 141B0018 		.word	_WORDS+MAPOFFSET
 4611 2768 02       	_HI:	.byte  2
 4612 2769 4849     		.ascii "HI"
 4613 276b 00       		.p2align 2 	
 4614              	HI:
 4615 276c 42F804ED 		_NEST
 4616 2770 FEF7F6FD 		BL	CR	// initialize I/O
 4617 2774 FEF72CFE 		BL	DOTQP
 4618 2778 17       		.byte	23
 4619 2779 626C7565 		.ascii "blue pill stm32eForth v" 
 4619      2070696C 
 4619      6C207374 
 4619      6D333265 
 4619      466F7274 
 4620              		.p2align 2
 4621 2790 FEF78AF9 		BL	BASE
 4622 2794 FDF73CFF 		BL	AT
 4623 2798 FEF792FC 		BL	HEX	// save radix
 4624 279c FFF7DAFF 		BL	VERSN
 4625 27a0 FEF70AFC 		BL	BDIGS
 4626 27a4 FEF72EFC 		BL	DIG
 4627 27a8 FEF72CFC 		BL	DIG
 4628 27ac FDF7E7FE 		_DOLIT
 4629 27b0 2E000000 		.word	'.'
 4630 27b4 FEF710FC 		BL	HOLD
 4631 27b8 FEF734FC 		BL	DIGS
 4632 27bc FEF758FC 		BL	EDIGS
 4633 27c0 FEF7B6FD 		BL	TYPEE	// format version number
 4634 27c4 FEF770F9 		BL	BASE
 4635 27c8 FDF718FF 		BL	STORE
 4636 27cc FEF7C8FD 		BL	CR
 4637 27d0 52F804FB 		_UNNEST			// restore radix
 4638              	
 4639              	//    COLD	( -- )
 4640              	// 	The high level cold start sequence.
 4641              	
 4642 27d4 681B0018 		.word	_HI+MAPOFFSET
 4643 27d8 04       	LASTN:	.byte  4
 4644 27d9 434F4C44 		.ascii "COLD"
 4645 27dd 000000   		.p2align 2,0	
 4646              	COLD:
 4647              	//  Initiate Forth registers
 4648 27e0 4FF00003 		MOV R3,#UPP&0xffff	//  user area 
 4649 27e4 C2F20003 	 	MOVT R3,#UPP>>16		  
 4650 27e8 03F59F42 		ADD R2,R3,#RPP&0xffff	// Forth return stack
 4651 27ec 03F59D41 		ADD R1,R3,#SPP&0xffff // Forth data stack
 4652 27f0 85EA0505 		EOR R5,R5,R5			//  tos=0
 4653 27f4 42F804ED 		_NEST
 4654              	COLD1:
 4655 27f8 FDF7C1FE 		_DOLIT 
 4656 27fc 00000000 		.word 0 
 4657 2800 FDF77EFE 		BL ULED // turn off user LED 
 4658 2804 FDF7BBFE 		_DOLIT
 4659 2808 00040000 		.word	UZERO
 4660 280c FDF7B7FE 		_DOLIT
 4661 2810 00000020 		.word	UPP
ARM GAS  stm32eforth.s 			page 87


 4662 2814 FDF7B3FE 		_DOLIT
 4663 2818 54000000 		.word	ULAST-UZERO
 4664 281c FEF740FB 		BL	MOVE 			// initialize user area
 4665 2820 FFF798F9 		BL	PRESE			// initialize stack
 4666              		// check if user image saved in slot 0 
 4667 2824 FFF77CFA 		BL IMGQ 
 4668 2828 FDF7CCFE 		BL	QBRAN 
 4669 282c 341C0018 		.word 1f+MAPOFFSET
 4670 2830 FFF78EFA 		BL	LOAD_IMG 
 4671 2834 FEF72EF9 	1:	BL	TBOOT
 4672 2838 FEF70EFB 		BL	ATEXE			// application boot
 4673 283c FFF7D4FD 		BL	OVERT
 4674 2840 FFF792B9 		B.W	QUIT			// start interpretation
 4675              	COLD2:
 4676 2844 AFF30080 		.p2align 3 	
 4677              	CTOP:
 4678 2848 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4679 284c AFF30080 		.p2align 10 
 4679      AFF30080 
 4679      AFF30080 
 4679      AFF30080 
 4679      AFF30080 
 4680              	USER_SPACE: // save user image here.  
 4681 2c00 FFFFFFFF 		.word 0XFFFFFFFF
 4682              	
 4683              	  .end 
ARM GAS  stm32eforth.s 			page 88


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  stm32eforth.s 			page 89


board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
board/blue-pill/stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
board/blue-pill/stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
board/blue-pill/stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
board/blue-pill/stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
board/blue-pill/stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
board/blue-pill/stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
board/blue-pill/stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
board/blue-pill/stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
board/blue-pill/stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
board/blue-pill/stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
board/blue-pill/stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
board/blue-pill/stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
board/blue-pill/stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
board/blue-pill/stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
board/blue-pill/stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
board/blue-pill/stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32eforth.s:83     *ABS*:0000000040011000 LED_GPIO
       stm32eforth.s:84     *ABS*:000000000000000d LED_PIN
       stm32eforth.s:85     *ABS*:0000000040013800 UART
       stm32eforth.s:88     *ABS*:0000000020004e80 SPP
       stm32eforth.s:89     *ABS*:0000000020004e80 TIBB
       stm32eforth.s:90     *ABS*:0000000020004f80 RPP
       stm32eforth.s:91     *ABS*:0000000020000000 UPP
       stm32eforth.s:92     *ABS*:0000000020000100 DTOP
       stm32eforth.s:93     *ABS*:0000000020004e00 DEND
       stm32eforth.s:94     *ABS*:0000000020000000 RAMOFFSET
       stm32eforth.s:95     *ABS*:0000000020005000 RAMEND
       stm32eforth.s:96     *ABS*:0000000008000c00 FLASHOFFSET
       stm32eforth.s:99     *ABS*:0000000017fff400 MAPOFFSET
       stm32eforth.s:104    *ABS*:0000000000000004 SEED_OFS
       stm32eforth.s:105    *ABS*:0000000000000008 TICKS_OFS
       stm32eforth.s:106    *ABS*:000000000000000c TIMER_OFS
       stm32eforth.s:107    *ABS*:0000000000000010 TORAM_OFS
       stm32eforth.s:108    *ABS*:0000000000000014 IMG_SIGN_OFS
       stm32eforth.s:109    *ABS*:0000000000000018 BOOT_OFS
       stm32eforth.s:110    *ABS*:000000000000001c BASE_OFS
       stm32eforth.s:111    *ABS*:0000000000000020 TMP_OFS
       stm32eforth.s:112    *ABS*:0000000000000024 SPAN_OFS
       stm32eforth.s:113    *ABS*:0000000000000028 TOIN_OFS
       stm32eforth.s:114    *ABS*:000000000000002c NTIB_OFS
       stm32eforth.s:115    *ABS*:0000000000000030 TIB_OFS
       stm32eforth.s:116    *ABS*:0000000000000034 EVAL_OFS
       stm32eforth.s:117    *ABS*:0000000000000038 HLD_OFS
       stm32eforth.s:118    *ABS*:000000000000003c CTXT_OFS
       stm32eforth.s:119    *ABS*:0000000000000040 FORTH_CTOP_OFS
       stm32eforth.s:120    *ABS*:0000000000000044 USER_CTOP_OFS
ARM GAS  stm32eforth.s 			page 90


       stm32eforth.s:121    *ABS*:0000000000000048 LASTN_OFS
       stm32eforth.s:122    *ABS*:000000000000004c VARS_END_OFS
       stm32eforth.s:158    .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:292    .text.reset_handler:0000000000000000 reset_handler
       stm32eforth.s:249    .text.default_handler:0000000000000000 default_handler
       stm32eforth.s:271    .text.default_handler:0000000000000034 systick_handler
       stm32eforth.s:247    .text.default_handler:0000000000000000 $t
       stm32eforth.s:259    .text.default_handler:000000000000001c exception_msg
       stm32eforth.s:614    .text.reset_handler:000000000000055c EMIT
       stm32eforth.s:260    .text.default_handler:000000000000001c $d
       stm32eforth.s:281    .text.default_handler:000000000000004e systick_exit
       stm32eforth.s:290    .text.reset_handler:0000000000000000 $t
       stm32eforth.s:404    .text.reset_handler:00000000000000e4 remap
       stm32eforth.s:304    .text.reset_handler:0000000000000014 init_devices
       stm32eforth.s:299    .text.reset_handler:0000000000000010 forth_entry
       stm32eforth.s:300    .text.reset_handler:0000000000000010 $d
       stm32eforth.s:4646   .text.reset_handler:00000000000027e0 COLD
       stm32eforth.s:303    .text.reset_handler:0000000000000014 $t
       stm32eforth.s:319    .text.reset_handler:0000000000000032 wait_hserdy
       stm32eforth.s:339    .text.reset_handler:000000000000004c wait_pllrdy
       stm32eforth.s:352    .text.reset_handler:000000000000006c wait_sws
       stm32eforth.s:424    .text.reset_handler:000000000000011c remap_dest
       stm32eforth.s:422    .text.reset_handler:0000000000000118 remap_src
       stm32eforth.s:4677   .text.reset_handler:0000000000002848 CTOP
       stm32eforth.s:470    .text.reset_handler:0000000000000400 UZERO
       stm32eforth.s:423    .text.reset_handler:0000000000000118 $d
       stm32eforth.s:430    *ABS*:0000000000000001 VER
       stm32eforth.s:431    *ABS*:0000000000000000 EXT
       stm32eforth.s:435    *ABS*:0000000000000040 COMPO
       stm32eforth.s:436    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:437    *ABS*:00000000ffffff1f MASKK
       stm32eforth.s:439    *ABS*:0000000000000004 CELLL
       stm32eforth.s:440    *ABS*:000000000000000a BASEE
       stm32eforth.s:441    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:443    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:444    *ABS*:000000000000000a LF
       stm32eforth.s:445    *ABS*:000000000000000d CRR
       stm32eforth.s:446    *ABS*:000000000000001b ERR
       stm32eforth.s:447    *ABS*:0000000000000027 TIC
       stm32eforth.s:468    .text.reset_handler:0000000000000120 $t
       stm32eforth.s:471    .text.reset_handler:0000000000000400 $d
       stm32eforth.s:4614   .text.reset_handler:000000000000276c HI
       stm32eforth.s:3196   .text.reset_handler:0000000000001a30 INTER
       stm32eforth.s:4643   .text.reset_handler:00000000000027d8 LASTN
       stm32eforth.s:491    .text.reset_handler:0000000000000454 ULAST
       stm32eforth.s:504    .text.reset_handler:0000000000000454 $d
       stm32eforth.s:505    .text.reset_handler:0000000000000458 _RAND
       stm32eforth.s:508    .text.reset_handler:0000000000000460 RAND
       stm32eforth.s:1460   .text.reset_handler:0000000000000a44 SEED
       stm32eforth.s:750    .text.reset_handler:0000000000000610 AT
       stm32eforth.s:844    .text.reset_handler:0000000000000698 DUPP
       stm32eforth.s:737    .text.reset_handler:00000000000005fc STORE
       stm32eforth.s:1243   .text.reset_handler:0000000000000900 ABSS
       stm32eforth.s:855    .text.reset_handler:00000000000006a8 SWAP
       stm32eforth.s:1810   .text.reset_handler:0000000000000cf0 MODD
       stm32eforth.s:528    .text.reset_handler:00000000000004a0 $d
       stm32eforth.s:529    .text.reset_handler:00000000000004a4 _REBOOT
ARM GAS  stm32eforth.s 			page 91


       stm32eforth.s:532    .text.reset_handler:00000000000004ac REBOOT
       stm32eforth.s:539    .text.reset_handler:00000000000004bc scb_adr
       stm32eforth.s:540    .text.reset_handler:00000000000004bc $d
       stm32eforth.s:545    .text.reset_handler:00000000000004c4 _PAUSE
       stm32eforth.s:547    .text.reset_handler:00000000000004ca $t
       stm32eforth.s:548    .text.reset_handler:00000000000004cc PAUSE
       stm32eforth.s:1482   .text.reset_handler:0000000000000a6c TIMER
       stm32eforth.s:552    .text.reset_handler:00000000000004d8 PAUSE_LOOP
       stm32eforth.s:697    .text.reset_handler:00000000000005c4 QBRAN
       stm32eforth.s:556    .text.reset_handler:00000000000004e4 $d
       stm32eforth.s:559    .text.reset_handler:00000000000004f0 PAUSE_EXIT
       stm32eforth.s:715    .text.reset_handler:00000000000005dc BRAN
       stm32eforth.s:557    .text.reset_handler:00000000000004e8 $t
       stm32eforth.s:558    .text.reset_handler:00000000000004ec $d
       stm32eforth.s:560    .text.reset_handler:00000000000004f0 $t
       stm32eforth.s:564    .text.reset_handler:00000000000004f4 $d
       stm32eforth.s:565    .text.reset_handler:00000000000004f8 _ULED
       stm32eforth.s:569    .text.reset_handler:0000000000000500 ULED
       stm32eforth.s:578    .text.reset_handler:0000000000000518 ULED_OFF
       stm32eforth.s:584    .text.reset_handler:000000000000051c $d
       stm32eforth.s:585    .text.reset_handler:0000000000000520 _QRX
       stm32eforth.s:588    .text.reset_handler:0000000000000528 QKEY
       stm32eforth.s:589    .text.reset_handler:0000000000000528 QRX
       stm32eforth.s:600    .text.reset_handler:0000000000000548 QRX1
       stm32eforth.s:609    .text.reset_handler:0000000000000550 $d
       stm32eforth.s:610    .text.reset_handler:0000000000000554 _TXSTO
       stm32eforth.s:613    .text.reset_handler:000000000000055c TXSTO
       stm32eforth.s:615    .text.reset_handler:000000000000055c TECHO
       stm32eforth.s:618    .text.reset_handler:0000000000000564 TX1
       stm32eforth.s:632    .text.reset_handler:0000000000000574 $d
       stm32eforth.s:633    .text.reset_handler:0000000000000578 _NOP
       stm32eforth.s:635    .text.reset_handler:000000000000057c $t
       stm32eforth.s:636    .text.reset_handler:000000000000057c NOP
       stm32eforth.s:647    .text.reset_handler:000000000000057e DOLIT
       stm32eforth.s:657    .text.reset_handler:0000000000000590 $d
       stm32eforth.s:658    .text.reset_handler:0000000000000594 _EXECU
       stm32eforth.s:660    .text.reset_handler:000000000000059c $t
       stm32eforth.s:661    .text.reset_handler:000000000000059c EXECU
       stm32eforth.s:675    .text.reset_handler:00000000000005a6 DONXT
       stm32eforth.s:682    .text.reset_handler:00000000000005b4 NEXT1
       stm32eforth.s:704    .text.reset_handler:00000000000005d6 QBRAN1
       stm32eforth.s:723    .text.reset_handler:00000000000005e6 $d
       stm32eforth.s:724    .text.reset_handler:00000000000005ea _EXIT
       stm32eforth.s:727    .text.reset_handler:00000000000005f0 EXIT
       stm32eforth.s:733    .text.reset_handler:00000000000005f4 $d
       stm32eforth.s:734    .text.reset_handler:00000000000005f8 _STORE
       stm32eforth.s:736    .text.reset_handler:00000000000005fa $t
       stm32eforth.s:746    .text.reset_handler:0000000000000608 $d
       stm32eforth.s:747    .text.reset_handler:000000000000060c _AT
       stm32eforth.s:749    .text.reset_handler:000000000000060e $t
       stm32eforth.s:757    .text.reset_handler:0000000000000614 $d
       stm32eforth.s:758    .text.reset_handler:0000000000000618 _CSTOR
       stm32eforth.s:761    .text.reset_handler:000000000000061c CSTOR
       stm32eforth.s:770    .text.reset_handler:0000000000000628 $d
       stm32eforth.s:771    .text.reset_handler:000000000000062c _CAT
       stm32eforth.s:774    .text.reset_handler:0000000000000630 CAT
       stm32eforth.s:781    .text.reset_handler:0000000000000634 $d
ARM GAS  stm32eforth.s 			page 92


       stm32eforth.s:782    .text.reset_handler:0000000000000638 _RFROM
       stm32eforth.s:785    .text.reset_handler:000000000000063c RFROM
       stm32eforth.s:793    .text.reset_handler:0000000000000646 $d
       stm32eforth.s:794    .text.reset_handler:000000000000064a _RAT
       stm32eforth.s:797    .text.reset_handler:0000000000000650 RAT
       stm32eforth.s:805    .text.reset_handler:0000000000000658 $d
       stm32eforth.s:806    .text.reset_handler:000000000000065c _TOR
       stm32eforth.s:809    .text.reset_handler:0000000000000660 TOR
       stm32eforth.s:817    .text.reset_handler:000000000000066a $d
       stm32eforth.s:818    .text.reset_handler:000000000000066e _SPAT
       stm32eforth.s:820    .text.reset_handler:0000000000000672 $t
       stm32eforth.s:821    .text.reset_handler:0000000000000674 SPAT
       stm32eforth.s:829    .text.reset_handler:000000000000067c $d
       stm32eforth.s:830    .text.reset_handler:0000000000000680 _DROP
       stm32eforth.s:833    .text.reset_handler:0000000000000688 DROP
       stm32eforth.s:840    .text.reset_handler:000000000000068e $d
       stm32eforth.s:841    .text.reset_handler:0000000000000692 _DUPP
       stm32eforth.s:843    .text.reset_handler:0000000000000696 $t
       stm32eforth.s:851    .text.reset_handler:000000000000069e $d
       stm32eforth.s:852    .text.reset_handler:00000000000006a2 _SWAP
       stm32eforth.s:864    .text.reset_handler:00000000000006b0 $d
       stm32eforth.s:865    .text.reset_handler:00000000000006b4 _OVER
       stm32eforth.s:868    .text.reset_handler:00000000000006bc OVER
       stm32eforth.s:876    .text.reset_handler:00000000000006c4 $d
       stm32eforth.s:877    .text.reset_handler:00000000000006c8 _ZLESS
       stm32eforth.s:880    .text.reset_handler:00000000000006cc ZLESS
       stm32eforth.s:888    .text.reset_handler:00000000000006d6 $d
       stm32eforth.s:889    .text.reset_handler:00000000000006da _ANDD
       stm32eforth.s:891    .text.reset_handler:00000000000006de $t
       stm32eforth.s:892    .text.reset_handler:00000000000006e0 ANDD
       stm32eforth.s:900    .text.reset_handler:00000000000006ea $d
       stm32eforth.s:901    .text.reset_handler:00000000000006ee _ORR
       stm32eforth.s:904    .text.reset_handler:00000000000006f4 ORR
       stm32eforth.s:912    .text.reset_handler:00000000000006fe $d
       stm32eforth.s:913    .text.reset_handler:0000000000000702 _XORR
       stm32eforth.s:915    .text.reset_handler:0000000000000706 $t
       stm32eforth.s:916    .text.reset_handler:0000000000000708 XORR
       stm32eforth.s:924    .text.reset_handler:0000000000000712 $d
       stm32eforth.s:925    .text.reset_handler:0000000000000716 _UPLUS
       stm32eforth.s:927    .text.reset_handler:000000000000071a $t
       stm32eforth.s:928    .text.reset_handler:000000000000071c UPLUS
       stm32eforth.s:939    .text.reset_handler:000000000000072c $d
       stm32eforth.s:940    .text.reset_handler:0000000000000730 _RSHIFT
       stm32eforth.s:943    .text.reset_handler:0000000000000738 RSHIFT
       stm32eforth.s:951    .text.reset_handler:0000000000000742 $d
       stm32eforth.s:952    .text.reset_handler:0000000000000746 _LSHIFT
       stm32eforth.s:955    .text.reset_handler:0000000000000750 LSHIFT
       stm32eforth.s:963    .text.reset_handler:000000000000075a $d
       stm32eforth.s:964    .text.reset_handler:000000000000075e _PLUS
       stm32eforth.s:966    .text.reset_handler:0000000000000760 $t
       stm32eforth.s:967    .text.reset_handler:0000000000000760 PLUS
       stm32eforth.s:975    .text.reset_handler:0000000000000768 $d
       stm32eforth.s:976    .text.reset_handler:000000000000076c _SUBB
       stm32eforth.s:978    .text.reset_handler:000000000000076e $t
       stm32eforth.s:979    .text.reset_handler:0000000000000770 SUBB
       stm32eforth.s:987    .text.reset_handler:000000000000077a $d
       stm32eforth.s:988    .text.reset_handler:000000000000077e _STAR
ARM GAS  stm32eforth.s 			page 93


       stm32eforth.s:990    .text.reset_handler:0000000000000780 $t
       stm32eforth.s:991    .text.reset_handler:0000000000000780 STAR
       stm32eforth.s:999    .text.reset_handler:000000000000078a $d
       stm32eforth.s:1000   .text.reset_handler:000000000000078e _UMSTA
       stm32eforth.s:1002   .text.reset_handler:0000000000000792 $t
       stm32eforth.s:1003   .text.reset_handler:0000000000000794 UMSTA
       stm32eforth.s:1013   .text.reset_handler:00000000000007a0 $d
       stm32eforth.s:1014   .text.reset_handler:00000000000007a4 _MSTAR
       stm32eforth.s:1017   .text.reset_handler:00000000000007a8 MSTAR
       stm32eforth.s:1027   .text.reset_handler:00000000000007b4 $d
       stm32eforth.s:1028   .text.reset_handler:00000000000007b8 _ONEP
       stm32eforth.s:1031   .text.reset_handler:00000000000007bc ONEP
       stm32eforth.s:1038   .text.reset_handler:00000000000007c2 $d
       stm32eforth.s:1039   .text.reset_handler:00000000000007c6 _ONEM
       stm32eforth.s:1042   .text.reset_handler:00000000000007cc ONEM
       stm32eforth.s:1049   .text.reset_handler:00000000000007d2 $d
       stm32eforth.s:1050   .text.reset_handler:00000000000007d6 _TWOP
       stm32eforth.s:1053   .text.reset_handler:00000000000007dc TWOP
       stm32eforth.s:1060   .text.reset_handler:00000000000007e2 $d
       stm32eforth.s:1061   .text.reset_handler:00000000000007e6 _TWOM
       stm32eforth.s:1064   .text.reset_handler:00000000000007ec TWOM
       stm32eforth.s:1071   .text.reset_handler:00000000000007f2 $d
       stm32eforth.s:1072   .text.reset_handler:00000000000007f6 _CELLP
       stm32eforth.s:1074   .text.reset_handler:00000000000007fc $t
       stm32eforth.s:1075   .text.reset_handler:00000000000007fc CELLP
       stm32eforth.s:1082   .text.reset_handler:0000000000000802 $d
       stm32eforth.s:1083   .text.reset_handler:0000000000000806 _CELLM
       stm32eforth.s:1085   .text.reset_handler:000000000000080c $t
       stm32eforth.s:1086   .text.reset_handler:000000000000080c CELLM
       stm32eforth.s:1093   .text.reset_handler:0000000000000812 $d
       stm32eforth.s:1094   .text.reset_handler:0000000000000816 _BLANK
       stm32eforth.s:1097   .text.reset_handler:000000000000081c BLANK
       stm32eforth.s:1105   .text.reset_handler:0000000000000826 $d
       stm32eforth.s:1106   .text.reset_handler:000000000000082a _CELLS
       stm32eforth.s:1108   .text.reset_handler:0000000000000830 $t
       stm32eforth.s:1109   .text.reset_handler:0000000000000830 CELLS
       stm32eforth.s:1116   .text.reset_handler:0000000000000836 $d
       stm32eforth.s:1117   .text.reset_handler:000000000000083a _CELLSL
       stm32eforth.s:1119   .text.reset_handler:0000000000000840 $t
       stm32eforth.s:1120   .text.reset_handler:0000000000000840 CELLSL
       stm32eforth.s:1127   .text.reset_handler:0000000000000846 $d
       stm32eforth.s:1128   .text.reset_handler:000000000000084a _TWOST
       stm32eforth.s:1131   .text.reset_handler:0000000000000850 TWOST
       stm32eforth.s:1138   .text.reset_handler:0000000000000856 $d
       stm32eforth.s:1139   .text.reset_handler:000000000000085a _TWOSL
       stm32eforth.s:1142   .text.reset_handler:0000000000000860 TWOSL
       stm32eforth.s:1149   .text.reset_handler:0000000000000866 $d
       stm32eforth.s:1150   .text.reset_handler:000000000000086a _QDUP
       stm32eforth.s:1153   .text.reset_handler:0000000000000870 QDUP
       stm32eforth.s:1162   .text.reset_handler:000000000000087a $d
       stm32eforth.s:1163   .text.reset_handler:000000000000087e _ROT
       stm32eforth.s:1165   .text.reset_handler:0000000000000882 $t
       stm32eforth.s:1166   .text.reset_handler:0000000000000884 ROT
       stm32eforth.s:1176   .text.reset_handler:000000000000088e $d
       stm32eforth.s:1177   .text.reset_handler:0000000000000892 _DDROP
       stm32eforth.s:1179   .text.reset_handler:0000000000000898 $t
       stm32eforth.s:1180   .text.reset_handler:0000000000000898 DDROP
ARM GAS  stm32eforth.s 			page 94


       stm32eforth.s:1188   .text.reset_handler:00000000000008a2 $d
       stm32eforth.s:1189   .text.reset_handler:00000000000008a6 _DDUP
       stm32eforth.s:1192   .text.reset_handler:00000000000008ac DDUP
       stm32eforth.s:1201   .text.reset_handler:00000000000008b8 $d
       stm32eforth.s:1202   .text.reset_handler:00000000000008bc _DPLUS
       stm32eforth.s:1205   .text.reset_handler:00000000000008c0 DPLUS
       stm32eforth.s:1217   .text.reset_handler:00000000000008d4 $d
       stm32eforth.s:1218   .text.reset_handler:00000000000008d8 _INVER
       stm32eforth.s:1220   .text.reset_handler:00000000000008dc $t
       stm32eforth.s:1221   .text.reset_handler:00000000000008dc INVER
       stm32eforth.s:1228   .text.reset_handler:00000000000008e2 $d
       stm32eforth.s:1229   .text.reset_handler:00000000000008e6 _NEGAT
       stm32eforth.s:1232   .text.reset_handler:00000000000008f0 NEGAT
       stm32eforth.s:1239   .text.reset_handler:00000000000008f6 $d
       stm32eforth.s:1240   .text.reset_handler:00000000000008fa _ABSS
       stm32eforth.s:1242   .text.reset_handler:00000000000008fe $t
       stm32eforth.s:1252   .text.reset_handler:000000000000090a $d
       stm32eforth.s:1253   .text.reset_handler:000000000000090e _ZEQUAL
       stm32eforth.s:1256   .text.reset_handler:0000000000000914 ZEQUAL
       stm32eforth.s:1266   .text.reset_handler:0000000000000922 $d
       stm32eforth.s:1267   .text.reset_handler:0000000000000926 _EQUAL
       stm32eforth.s:1269   .text.reset_handler:0000000000000928 $t
       stm32eforth.s:1270   .text.reset_handler:0000000000000928 EQUAL
       stm32eforth.s:1281   .text.reset_handler:0000000000000938 $d
       stm32eforth.s:1282   .text.reset_handler:000000000000093c _ULESS
       stm32eforth.s:1285   .text.reset_handler:0000000000000940 ULESS
       stm32eforth.s:1296   .text.reset_handler:0000000000000950 $d
       stm32eforth.s:1297   .text.reset_handler:0000000000000954 _LESS
       stm32eforth.s:1299   .text.reset_handler:0000000000000956 $t
       stm32eforth.s:1300   .text.reset_handler:0000000000000958 LESS
       stm32eforth.s:1311   .text.reset_handler:0000000000000968 $d
       stm32eforth.s:1312   .text.reset_handler:000000000000096c _GREAT
       stm32eforth.s:1314   .text.reset_handler:000000000000096e $t
       stm32eforth.s:1315   .text.reset_handler:0000000000000970 GREAT
       stm32eforth.s:1326   .text.reset_handler:0000000000000980 $d
       stm32eforth.s:1327   .text.reset_handler:0000000000000984 _MAX
       stm32eforth.s:1329   .text.reset_handler:0000000000000988 $t
       stm32eforth.s:1330   .text.reset_handler:0000000000000988 MAX
       stm32eforth.s:1340   .text.reset_handler:0000000000000994 $d
       stm32eforth.s:1341   .text.reset_handler:0000000000000998 _MIN
       stm32eforth.s:1343   .text.reset_handler:000000000000099c $t
       stm32eforth.s:1344   .text.reset_handler:000000000000099c MIN
       stm32eforth.s:1354   .text.reset_handler:00000000000009a8 $d
       stm32eforth.s:1355   .text.reset_handler:00000000000009ac _PSTOR
       stm32eforth.s:1358   .text.reset_handler:00000000000009b0 PSTOR
       stm32eforth.s:1369   .text.reset_handler:00000000000009c0 $d
       stm32eforth.s:1370   .text.reset_handler:00000000000009c4 _DSTOR
       stm32eforth.s:1373   .text.reset_handler:00000000000009c8 DSTOR
       stm32eforth.s:1384   .text.reset_handler:00000000000009dc $d
       stm32eforth.s:1385   .text.reset_handler:00000000000009e0 _DAT
       stm32eforth.s:1388   .text.reset_handler:00000000000009e4 DAT
       stm32eforth.s:1397   .text.reset_handler:00000000000009ee $d
       stm32eforth.s:1398   .text.reset_handler:00000000000009f2 _COUNT
       stm32eforth.s:1400   .text.reset_handler:00000000000009f8 $t
       stm32eforth.s:1401   .text.reset_handler:00000000000009f8 COUNT
       stm32eforth.s:1410   .text.reset_handler:0000000000000a04 $d
       stm32eforth.s:1411   .text.reset_handler:0000000000000a08 _DNEGA
ARM GAS  stm32eforth.s 			page 95


       stm32eforth.s:1413   .text.reset_handler:0000000000000a10 $t
       stm32eforth.s:1414   .text.reset_handler:0000000000000a10 DNEGA
       stm32eforth.s:1432   .text.reset_handler:0000000000000a20 DOVAR
       stm32eforth.s:1444   .text.reset_handler:0000000000000a2c DOCON
       stm32eforth.s:1456   .text.reset_handler:0000000000000a38 $d
       stm32eforth.s:1457   .text.reset_handler:0000000000000a3c _SEED
       stm32eforth.s:1467   .text.reset_handler:0000000000000a4e $d
       stm32eforth.s:1468   .text.reset_handler:0000000000000a52 _MSEC
       stm32eforth.s:1471   .text.reset_handler:0000000000000a58 MSEC
       stm32eforth.s:1478   .text.reset_handler:0000000000000a62 $d
       stm32eforth.s:1479   .text.reset_handler:0000000000000a66 _TIMER
       stm32eforth.s:1481   .text.reset_handler:0000000000000a6c $t
       stm32eforth.s:1490   .text.reset_handler:0000000000000a76 $d
       stm32eforth.s:1491   .text.reset_handler:0000000000000a7a _TORAM
       stm32eforth.s:1494   .text.reset_handler:0000000000000a80 TORAM
       stm32eforth.s:1502   .text.reset_handler:0000000000000a8a $d
       stm32eforth.s:1503   .text.reset_handler:0000000000000a8e _TBOOT
       stm32eforth.s:1505   .text.reset_handler:0000000000000a94 $t
       stm32eforth.s:1506   .text.reset_handler:0000000000000a94 TBOOT
       stm32eforth.s:1514   .text.reset_handler:0000000000000a9e $d
       stm32eforth.s:1515   .text.reset_handler:0000000000000aa2 _BASE
       stm32eforth.s:1518   .text.reset_handler:0000000000000aa8 BASE
       stm32eforth.s:1530   .text.reset_handler:0000000000000ab2 TEMP
       stm32eforth.s:1538   .text.reset_handler:0000000000000abc $d
       stm32eforth.s:1539   .text.reset_handler:0000000000000ac0 _SPAN
       stm32eforth.s:1542   .text.reset_handler:0000000000000ac8 SPAN
       stm32eforth.s:1550   .text.reset_handler:0000000000000ad2 $d
       stm32eforth.s:1551   .text.reset_handler:0000000000000ad6 _INN
       stm32eforth.s:1553   .text.reset_handler:0000000000000ada $t
       stm32eforth.s:1554   .text.reset_handler:0000000000000adc INN
       stm32eforth.s:1562   .text.reset_handler:0000000000000ae6 $d
       stm32eforth.s:1563   .text.reset_handler:0000000000000aea _NTIB
       stm32eforth.s:1566   .text.reset_handler:0000000000000af0 NTIB
       stm32eforth.s:1574   .text.reset_handler:0000000000000afa $d
       stm32eforth.s:1575   .text.reset_handler:0000000000000afe _TEVAL
       stm32eforth.s:1577   .text.reset_handler:0000000000000b04 $t
       stm32eforth.s:1578   .text.reset_handler:0000000000000b04 TEVAL
       stm32eforth.s:1586   .text.reset_handler:0000000000000b0e $d
       stm32eforth.s:1587   .text.reset_handler:0000000000000b12 _HLD
       stm32eforth.s:1589   .text.reset_handler:0000000000000b16 $t
       stm32eforth.s:1590   .text.reset_handler:0000000000000b18 HLD
       stm32eforth.s:1598   .text.reset_handler:0000000000000b22 $d
       stm32eforth.s:1599   .text.reset_handler:0000000000000b26 _CNTXT
       stm32eforth.s:1601   .text.reset_handler:0000000000000b2e $t
       stm32eforth.s:1602   .text.reset_handler:0000000000000b30 CNTXT
       stm32eforth.s:1603   .text.reset_handler:0000000000000b30 CRRNT
       stm32eforth.s:1611   .text.reset_handler:0000000000000b3a $d
       stm32eforth.s:1612   .text.reset_handler:0000000000000b3e _CP
       stm32eforth.s:1615   .text.reset_handler:0000000000000b44 CPP
       stm32eforth.s:1622   .text.reset_handler:0000000000000b4e $d
       stm32eforth.s:1623   .text.reset_handler:0000000000000b52 _FCP
       stm32eforth.s:1625   .text.reset_handler:0000000000000b56 $t
       stm32eforth.s:1626   .text.reset_handler:0000000000000b58 FCP
       stm32eforth.s:1634   .text.reset_handler:0000000000000b62 $d
       stm32eforth.s:1635   .text.reset_handler:0000000000000b66 _LAST
       stm32eforth.s:1638   .text.reset_handler:0000000000000b6c LAST
       stm32eforth.s:1649   .text.reset_handler:0000000000000b76 $d
ARM GAS  stm32eforth.s 			page 96


       stm32eforth.s:1650   .text.reset_handler:0000000000000b7a _USER_BGN
       stm32eforth.s:1653   .text.reset_handler:0000000000000b88 USER_BEGIN
       stm32eforth.s:1657   .text.reset_handler:0000000000000b90 USR_BGN_ADR
       stm32eforth.s:1658   .text.reset_handler:0000000000000b90 $d
       stm32eforth.s:1663   .text.reset_handler:0000000000000b98 _USER_END
       stm32eforth.s:1666   .text.reset_handler:0000000000000ba4 USER_END
       stm32eforth.s:1674   .text.reset_handler:0000000000000bb2 $d
       stm32eforth.s:1675   .text.reset_handler:0000000000000bb6 _IMG_ADR
       stm32eforth.s:1677   .text.reset_handler:0000000000000bbe $t
       stm32eforth.s:1678   .text.reset_handler:0000000000000bc0 IMG_ADR
       stm32eforth.s:1682   .text.reset_handler:0000000000000bc8 USR_IMG_ADR
       stm32eforth.s:1683   .text.reset_handler:0000000000000bc8 $d
       stm32eforth.s:4680   .text.reset_handler:0000000000002c00 USER_SPACE
       stm32eforth.s:1687   .text.reset_handler:0000000000000bd0 _IMG_SIGN
       stm32eforth.s:1690   .text.reset_handler:0000000000000bdc IMG_SIGN
       stm32eforth.s:1702   .text.reset_handler:0000000000000be6 $d
       stm32eforth.s:1703   .text.reset_handler:0000000000000bea _WITHI
       stm32eforth.s:1706   .text.reset_handler:0000000000000bf4 WITHI
       stm32eforth.s:1721   .text.reset_handler:0000000000000c14 $d
       stm32eforth.s:1722   .text.reset_handler:0000000000000c18 _UMMOD
       stm32eforth.s:1725   .text.reset_handler:0000000000000c20 UMMOD
       stm32eforth.s:1729   .text.reset_handler:0000000000000c2a UMMOD0
       stm32eforth.s:1736   .text.reset_handler:0000000000000c3a UMMOD1
       stm32eforth.s:1742   .text.reset_handler:0000000000000c44 UMMOD2
       stm32eforth.s:1752   .text.reset_handler:0000000000000c4e $d
       stm32eforth.s:1753   .text.reset_handler:0000000000000c52 _MSMOD
       stm32eforth.s:1755   .text.reset_handler:0000000000000c58 $t
       stm32eforth.s:1756   .text.reset_handler:0000000000000c58 MSMOD
       stm32eforth.s:1763   .text.reset_handler:0000000000000c70 $d
       stm32eforth.s:1768   .text.reset_handler:0000000000000c84 MMOD1
       stm32eforth.s:1764   .text.reset_handler:0000000000000c74 $t
       stm32eforth.s:1773   .text.reset_handler:0000000000000c94 $d
       stm32eforth.s:1776   .text.reset_handler:0000000000000ca0 MMOD2
       stm32eforth.s:1774   .text.reset_handler:0000000000000c98 $t
       stm32eforth.s:1781   .text.reset_handler:0000000000000cb0 $d
       stm32eforth.s:1785   .text.reset_handler:0000000000000cc0 MMOD3
       stm32eforth.s:1782   .text.reset_handler:0000000000000cb4 $t
       stm32eforth.s:1791   .text.reset_handler:0000000000000cc4 $d
       stm32eforth.s:1792   .text.reset_handler:0000000000000cc8 _SLMOD
       stm32eforth.s:1795   .text.reset_handler:0000000000000cd0 SLMOD
       stm32eforth.s:1806   .text.reset_handler:0000000000000ce8 $d
       stm32eforth.s:1807   .text.reset_handler:0000000000000cec _MODD
       stm32eforth.s:1809   .text.reset_handler:0000000000000cf0 $t
       stm32eforth.s:1819   .text.reset_handler:0000000000000d00 $d
       stm32eforth.s:1820   .text.reset_handler:0000000000000d04 _SLASH
       stm32eforth.s:1822   .text.reset_handler:0000000000000d06 $t
       stm32eforth.s:1823   .text.reset_handler:0000000000000d08 SLASH
       stm32eforth.s:1833   .text.reset_handler:0000000000000d1c $d
       stm32eforth.s:1834   .text.reset_handler:0000000000000d20 _SSMOD
       stm32eforth.s:1836   .text.reset_handler:0000000000000d26 $t
       stm32eforth.s:1837   .text.reset_handler:0000000000000d28 SSMOD
       stm32eforth.s:1848   .text.reset_handler:0000000000000d40 $d
       stm32eforth.s:1849   .text.reset_handler:0000000000000d44 _STASL
       stm32eforth.s:1852   .text.reset_handler:0000000000000d48 STASL
       stm32eforth.s:1865   .text.reset_handler:0000000000000d5c $d
       stm32eforth.s:1866   .text.reset_handler:0000000000000d60 _ALGND
       stm32eforth.s:1868   .text.reset_handler:0000000000000d68 $t
ARM GAS  stm32eforth.s 			page 97


       stm32eforth.s:1869   .text.reset_handler:0000000000000d68 ALGND
       stm32eforth.s:1878   .text.reset_handler:0000000000000d76 $d
       stm32eforth.s:1879   .text.reset_handler:0000000000000d7a _TCHAR
       stm32eforth.s:1881   .text.reset_handler:0000000000000d80 $t
       stm32eforth.s:1882   .text.reset_handler:0000000000000d80 TCHAR
       stm32eforth.s:1885   .text.reset_handler:0000000000000d88 $d
       stm32eforth.s:1886   .text.reset_handler:0000000000000d8c $t
       stm32eforth.s:1890   .text.reset_handler:0000000000000d9c $d
       stm32eforth.s:1891   .text.reset_handler:0000000000000da0 $t
       stm32eforth.s:1894   .text.reset_handler:0000000000000dac $d
       stm32eforth.s:1898   .text.reset_handler:0000000000000dbc TCHA1
       stm32eforth.s:1895   .text.reset_handler:0000000000000db0 $t
       stm32eforth.s:1897   .text.reset_handler:0000000000000db8 $d
       stm32eforth.s:1899   .text.reset_handler:0000000000000dbc $t
       stm32eforth.s:1904   .text.reset_handler:0000000000000dc0 $d
       stm32eforth.s:1905   .text.reset_handler:0000000000000dc4 _DEPTH
       stm32eforth.s:1907   .text.reset_handler:0000000000000dca $t
       stm32eforth.s:1908   .text.reset_handler:0000000000000dcc DEPTH
       stm32eforth.s:1918   .text.reset_handler:0000000000000dde $d
       stm32eforth.s:1919   .text.reset_handler:0000000000000de2 _PICK
       stm32eforth.s:1922   .text.reset_handler:0000000000000de8 PICK
       stm32eforth.s:1937   .text.reset_handler:0000000000000e04 $d
       stm32eforth.s:1938   .text.reset_handler:0000000000000e08 _HERE
       stm32eforth.s:1941   .text.reset_handler:0000000000000e10 HERE
       stm32eforth.s:1950   .text.reset_handler:0000000000000e20 $d
       stm32eforth.s:1951   .text.reset_handler:0000000000000e24 _PAD
       stm32eforth.s:1953   .text.reset_handler:0000000000000e28 $t
       stm32eforth.s:1954   .text.reset_handler:0000000000000e28 PAD
       stm32eforth.s:1963   .text.reset_handler:0000000000000e38 $d
       stm32eforth.s:1964   .text.reset_handler:0000000000000e3c _TIB
       stm32eforth.s:1966   .text.reset_handler:0000000000000e40 $t
       stm32eforth.s:1967   .text.reset_handler:0000000000000e40 TIB
       stm32eforth.s:1975   .text.reset_handler:0000000000000e48 $d
       stm32eforth.s:1976   .text.reset_handler:0000000000000e4c _ATEXE
       stm32eforth.s:1979   .text.reset_handler:0000000000000e58 ATEXE
       stm32eforth.s:1991   .text.reset_handler:0000000000000e6a $d
       stm32eforth.s:1992   .text.reset_handler:0000000000000e6e _CMOVE
       stm32eforth.s:1994   .text.reset_handler:0000000000000e74 $t
       stm32eforth.s:1995   .text.reset_handler:0000000000000e74 CMOVE
       stm32eforth.s:2002   .text.reset_handler:0000000000000e86 CMOV1
       stm32eforth.s:1999   .text.reset_handler:0000000000000e7e CMOV0
       stm32eforth.s:2007   .text.reset_handler:0000000000000e90 CMOV2
       stm32eforth.s:2014   .text.reset_handler:0000000000000e96 $d
       stm32eforth.s:2015   .text.reset_handler:0000000000000e9a _MOVE
       stm32eforth.s:2018   .text.reset_handler:0000000000000ea0 MOVE
       stm32eforth.s:2026   .text.reset_handler:0000000000000eb6 MOVE1
       stm32eforth.s:2023   .text.reset_handler:0000000000000eae MOVE0
       stm32eforth.s:2031   .text.reset_handler:0000000000000ec0 MOVE2
       stm32eforth.s:2038   .text.reset_handler:0000000000000ec6 $d
       stm32eforth.s:2039   .text.reset_handler:0000000000000eca _FILL
       stm32eforth.s:2042   .text.reset_handler:0000000000000ed0 FILL
       stm32eforth.s:2045   .text.reset_handler:0000000000000ed8 FILL0
       stm32eforth.s:2048   .text.reset_handler:0000000000000edc FILL1
       stm32eforth.s:2054   .text.reset_handler:0000000000000eea FILL2
       stm32eforth.s:2061   .text.reset_handler:0000000000000ef0 $d
       stm32eforth.s:2062   .text.reset_handler:0000000000000ef4 _PACKS
       stm32eforth.s:2065   .text.reset_handler:0000000000000efc PACKS
ARM GAS  stm32eforth.s 			page 98


       stm32eforth.s:2074   .text.reset_handler:0000000000000f1c $d
       stm32eforth.s:2075   .text.reset_handler:0000000000000f20 $t
       stm32eforth.s:2077   .text.reset_handler:0000000000000f28 $d
       stm32eforth.s:2078   .text.reset_handler:0000000000000f2c $t
       stm32eforth.s:2095   .text.reset_handler:0000000000000f54 $d
       stm32eforth.s:2096   .text.reset_handler:0000000000000f58 _DIGIT
       stm32eforth.s:2098   .text.reset_handler:0000000000000f5e $t
       stm32eforth.s:2099   .text.reset_handler:0000000000000f60 DIGIT
       stm32eforth.s:2102   .text.reset_handler:0000000000000f68 $d
       stm32eforth.s:2103   .text.reset_handler:0000000000000f6c $t
       stm32eforth.s:2113   .text.reset_handler:0000000000000f84 $d
       stm32eforth.s:2114   .text.reset_handler:0000000000000f88 _EXTRC
       stm32eforth.s:2116   .text.reset_handler:0000000000000f90 $t
       stm32eforth.s:2117   .text.reset_handler:0000000000000f90 EXTRC
       stm32eforth.s:2120   .text.reset_handler:0000000000000f98 $d
       stm32eforth.s:2121   .text.reset_handler:0000000000000f9c $t
       stm32eforth.s:2130   .text.reset_handler:0000000000000fb0 $d
       stm32eforth.s:2131   .text.reset_handler:0000000000000fb4 _BDIGS
       stm32eforth.s:2134   .text.reset_handler:0000000000000fb8 BDIGS
       stm32eforth.s:2144   .text.reset_handler:0000000000000fcc $d
       stm32eforth.s:2145   .text.reset_handler:0000000000000fd0 _HOLD
       stm32eforth.s:2148   .text.reset_handler:0000000000000fd8 HOLD
       stm32eforth.s:2162   .text.reset_handler:0000000000000ffc $d
       stm32eforth.s:2163   .text.reset_handler:0000000000001000 _DIG
       stm32eforth.s:2165   .text.reset_handler:0000000000001002 $t
       stm32eforth.s:2166   .text.reset_handler:0000000000001004 DIG
       stm32eforth.s:2177   .text.reset_handler:000000000000101c $d
       stm32eforth.s:2178   .text.reset_handler:0000000000001020 _DIGS
       stm32eforth.s:2181   .text.reset_handler:0000000000001024 DIGS
       stm32eforth.s:2183   .text.reset_handler:0000000000001028 DIGS1
       stm32eforth.s:2187   .text.reset_handler:0000000000001034 $d
       stm32eforth.s:2189   .text.reset_handler:000000000000103a DIGS2
       stm32eforth.s:2188   .text.reset_handler:0000000000001038 $t
       stm32eforth.s:2195   .text.reset_handler:000000000000103e $d
       stm32eforth.s:2196   .text.reset_handler:0000000000001042 _SIGN
       stm32eforth.s:2199   .text.reset_handler:0000000000001048 SIGN
       stm32eforth.s:2203   .text.reset_handler:0000000000001054 $d
       stm32eforth.s:2207   .text.reset_handler:0000000000001064 SIGN1
       stm32eforth.s:2204   .text.reset_handler:0000000000001058 $t
       stm32eforth.s:2205   .text.reset_handler:000000000000105c $d
       stm32eforth.s:2206   .text.reset_handler:0000000000001060 $t
       stm32eforth.s:2213   .text.reset_handler:0000000000001068 $d
       stm32eforth.s:2214   .text.reset_handler:000000000000106c _EDIGS
       stm32eforth.s:2217   .text.reset_handler:0000000000001070 EDIGS
       stm32eforth.s:2234   .text.reset_handler:0000000000001090 STRR
       stm32eforth.s:2249   .text.reset_handler:00000000000010b8 $d
       stm32eforth.s:2250   .text.reset_handler:00000000000010bc _HEX
       stm32eforth.s:2252   .text.reset_handler:00000000000010c0 $t
       stm32eforth.s:2253   .text.reset_handler:00000000000010c0 HEX
       stm32eforth.s:2256   .text.reset_handler:00000000000010c8 $d
       stm32eforth.s:2257   .text.reset_handler:00000000000010cc $t
       stm32eforth.s:2264   .text.reset_handler:00000000000010d8 $d
       stm32eforth.s:2265   .text.reset_handler:00000000000010dc _DECIM
       stm32eforth.s:2267   .text.reset_handler:00000000000010e4 $t
       stm32eforth.s:2268   .text.reset_handler:00000000000010e4 DECIM
       stm32eforth.s:2271   .text.reset_handler:00000000000010ec $d
       stm32eforth.s:2272   .text.reset_handler:00000000000010f0 $t
ARM GAS  stm32eforth.s 			page 99


       stm32eforth.s:2282   .text.reset_handler:00000000000010fc $d
       stm32eforth.s:2283   .text.reset_handler:0000000000001100 _DIGTQ
       stm32eforth.s:2286   .text.reset_handler:0000000000001108 DIGTQ
       stm32eforth.s:2290   .text.reset_handler:0000000000001114 $d
       stm32eforth.s:2291   .text.reset_handler:0000000000001118 $t
       stm32eforth.s:2293   .text.reset_handler:0000000000001120 $d
       stm32eforth.s:2294   .text.reset_handler:0000000000001124 $t
       stm32eforth.s:2297   .text.reset_handler:0000000000001130 $d
       stm32eforth.s:2306   .text.reset_handler:0000000000001154 DGTQ1
       stm32eforth.s:2298   .text.reset_handler:0000000000001134 $t
       stm32eforth.s:2299   .text.reset_handler:0000000000001138 $d
       stm32eforth.s:2300   .text.reset_handler:000000000000113c $t
       stm32eforth.s:2303   .text.reset_handler:0000000000001148 $d
       stm32eforth.s:2304   .text.reset_handler:000000000000114c $t
       stm32eforth.s:2315   .text.reset_handler:0000000000001164 $d
       stm32eforth.s:2316   .text.reset_handler:0000000000001168 _NUMBQ
       stm32eforth.s:2318   .text.reset_handler:0000000000001170 $t
       stm32eforth.s:2319   .text.reset_handler:0000000000001170 NUMBQ
       stm32eforth.s:2325   .text.reset_handler:0000000000001184 $d
       stm32eforth.s:2326   .text.reset_handler:0000000000001188 $t
       stm32eforth.s:2331   .text.reset_handler:000000000000119c $d
       stm32eforth.s:2332   .text.reset_handler:00000000000011a0 $t
       stm32eforth.s:2334   .text.reset_handler:00000000000011a8 $d
       stm32eforth.s:2340   .text.reset_handler:00000000000011c0 NUMQ1
       stm32eforth.s:2335   .text.reset_handler:00000000000011ac $t
       stm32eforth.s:2344   .text.reset_handler:00000000000011cc $d
       stm32eforth.s:2345   .text.reset_handler:00000000000011d0 $t
       stm32eforth.s:2355   .text.reset_handler:00000000000011f8 $d
       stm32eforth.s:2394   .text.reset_handler:0000000000001284 NUMQ6
       stm32eforth.s:2356   .text.reset_handler:00000000000011fc $t
       stm32eforth.s:2358   .text.reset_handler:0000000000001204 NUMQ2
       stm32eforth.s:2366   .text.reset_handler:0000000000001220 $d
       stm32eforth.s:2385   .text.reset_handler:0000000000001268 NUMQ4
       stm32eforth.s:2367   .text.reset_handler:0000000000001224 $t
       stm32eforth.s:2375   .text.reset_handler:0000000000001244 $d
       stm32eforth.s:2376   .text.reset_handler:0000000000001248 $t
       stm32eforth.s:2380   .text.reset_handler:0000000000001258 $d
       stm32eforth.s:2382   .text.reset_handler:0000000000001260 NUMQ3
       stm32eforth.s:2381   .text.reset_handler:000000000000125c $t
       stm32eforth.s:2392   .text.reset_handler:0000000000001280 NUMQ5
       stm32eforth.s:2391   .text.reset_handler:000000000000127c $d
       stm32eforth.s:2393   .text.reset_handler:0000000000001280 $t
       stm32eforth.s:2408   .text.reset_handler:000000000000129c $d
       stm32eforth.s:2409   .text.reset_handler:00000000000012a0 _KEY
       stm32eforth.s:2411   .text.reset_handler:00000000000012a4 $t
       stm32eforth.s:2412   .text.reset_handler:00000000000012a4 KEY
       stm32eforth.s:2414   .text.reset_handler:00000000000012a8 KEY1
       stm32eforth.s:2417   .text.reset_handler:00000000000012b0 $d
       stm32eforth.s:2419   .text.reset_handler:00000000000012b4 $t
       stm32eforth.s:2421   .text.reset_handler:00000000000012bc $d
       stm32eforth.s:2422   .text.reset_handler:00000000000012c0 $t
       stm32eforth.s:2425   .text.reset_handler:00000000000012cc $d
       stm32eforth.s:2426   .text.reset_handler:00000000000012d0 $t
       stm32eforth.s:2431   .text.reset_handler:00000000000012d4 $d
       stm32eforth.s:2432   .text.reset_handler:00000000000012d8 _SPACE
       stm32eforth.s:2434   .text.reset_handler:00000000000012de $t
       stm32eforth.s:2435   .text.reset_handler:00000000000012e0 SPACE
ARM GAS  stm32eforth.s 			page 100


       stm32eforth.s:2444   .text.reset_handler:00000000000012f0 $d
       stm32eforth.s:2445   .text.reset_handler:00000000000012f4 _SPACS
       stm32eforth.s:2448   .text.reset_handler:00000000000012fc SPACS
       stm32eforth.s:2451   .text.reset_handler:0000000000001304 $d
       stm32eforth.s:2452   .text.reset_handler:0000000000001308 $t
       stm32eforth.s:2457   .text.reset_handler:0000000000001318 CHAR2
       stm32eforth.s:2455   .text.reset_handler:0000000000001314 CHAR1
       stm32eforth.s:2459   .text.reset_handler:000000000000131c $d
       stm32eforth.s:2460   .text.reset_handler:0000000000001320 $t
       stm32eforth.s:2465   .text.reset_handler:0000000000001324 $d
       stm32eforth.s:2466   .text.reset_handler:0000000000001328 _TYPEE
       stm32eforth.s:2469   .text.reset_handler:0000000000001330 TYPEE
       stm32eforth.s:2477   .text.reset_handler:0000000000001346 TYPE2
       stm32eforth.s:2473   .text.reset_handler:000000000000133a TYPE1
       stm32eforth.s:2479   .text.reset_handler:000000000000134a $d
       stm32eforth.s:2480   .text.reset_handler:000000000000134e $t
       stm32eforth.s:2486   .text.reset_handler:0000000000001356 $d
       stm32eforth.s:2487   .text.reset_handler:000000000000135a _CR
       stm32eforth.s:2490   .text.reset_handler:0000000000001360 CR
       stm32eforth.s:2493   .text.reset_handler:0000000000001368 $d
       stm32eforth.s:2494   .text.reset_handler:000000000000136c $t
       stm32eforth.s:2496   .text.reset_handler:0000000000001374 $d
       stm32eforth.s:2497   .text.reset_handler:0000000000001378 $t
       stm32eforth.s:2508   .text.reset_handler:0000000000001380 DOSTR
       stm32eforth.s:2531   .text.reset_handler:00000000000013b4 STRQP
       stm32eforth.s:2543   .text.reset_handler:00000000000013c0 DOTST
       stm32eforth.s:2556   .text.reset_handler:00000000000013d0 DOTQP
       stm32eforth.s:2565   .text.reset_handler:00000000000013e0 $d
       stm32eforth.s:2566   .text.reset_handler:00000000000013e4 _DOTR
       stm32eforth.s:2569   .text.reset_handler:00000000000013e8 DOTR
       stm32eforth.s:2583   .text.reset_handler:000000000000140c $d
       stm32eforth.s:2584   .text.reset_handler:0000000000001410 _UDOTR
       stm32eforth.s:2586   .text.reset_handler:0000000000001414 $t
       stm32eforth.s:2587   .text.reset_handler:0000000000001414 UDOTR
       stm32eforth.s:2603   .text.reset_handler:0000000000001440 $d
       stm32eforth.s:2604   .text.reset_handler:0000000000001444 _UDOT
       stm32eforth.s:2607   .text.reset_handler:0000000000001448 UDOT
       stm32eforth.s:2619   .text.reset_handler:0000000000001464 $d
       stm32eforth.s:2620   .text.reset_handler:0000000000001468 _DOT
       stm32eforth.s:2622   .text.reset_handler:000000000000146a $t
       stm32eforth.s:2623   .text.reset_handler:000000000000146c DOT
       stm32eforth.s:2628   .text.reset_handler:000000000000147c $d
       stm32eforth.s:2629   .text.reset_handler:0000000000001480 $t
       stm32eforth.s:2631   .text.reset_handler:0000000000001488 $d
       stm32eforth.s:2634   .text.reset_handler:0000000000001494 DOT1
       stm32eforth.s:2632   .text.reset_handler:000000000000148c $t
       stm32eforth.s:2643   .text.reset_handler:00000000000014a4 $d
       stm32eforth.s:2644   .text.reset_handler:00000000000014a8 _QUEST
       stm32eforth.s:2646   .text.reset_handler:00000000000014aa $t
       stm32eforth.s:2647   .text.reset_handler:00000000000014ac QUEST
       stm32eforth.s:2663   .text.reset_handler:00000000000014bc PARS
       stm32eforth.s:2671   .text.reset_handler:00000000000014d8 $d
       stm32eforth.s:2739   .text.reset_handler:00000000000015ca PARS8
       stm32eforth.s:2672   .text.reset_handler:00000000000014dc $t
       stm32eforth.s:2678   .text.reset_handler:00000000000014f4 $d
       stm32eforth.s:2700   .text.reset_handler:0000000000001544 PARS3
       stm32eforth.s:2679   .text.reset_handler:00000000000014f8 $t
ARM GAS  stm32eforth.s 			page 101


       stm32eforth.s:2680   .text.reset_handler:00000000000014fc PARS1
       stm32eforth.s:2688   .text.reset_handler:0000000000001518 $d
       stm32eforth.s:2698   .text.reset_handler:0000000000001540 PARS2
       stm32eforth.s:2689   .text.reset_handler:000000000000151c $t
       stm32eforth.s:2691   .text.reset_handler:0000000000001524 $d
       stm32eforth.s:2692   .text.reset_handler:0000000000001528 $t
       stm32eforth.s:2695   .text.reset_handler:0000000000001534 $d
       stm32eforth.s:2696   .text.reset_handler:0000000000001538 $t
       stm32eforth.s:2704   .text.reset_handler:0000000000001550 PARS4
       stm32eforth.s:2715   .text.reset_handler:0000000000001578 $d
       stm32eforth.s:2717   .text.reset_handler:0000000000001580 PARS5
       stm32eforth.s:2716   .text.reset_handler:000000000000157c $t
       stm32eforth.s:2719   .text.reset_handler:0000000000001584 $d
       stm32eforth.s:2726   .text.reset_handler:000000000000159e PARS6
       stm32eforth.s:2720   .text.reset_handler:0000000000001588 $t
       stm32eforth.s:2722   .text.reset_handler:0000000000001590 $d
       stm32eforth.s:2723   .text.reset_handler:0000000000001594 $t
       stm32eforth.s:2732   .text.reset_handler:00000000000015b2 PARS7
       stm32eforth.s:2748   .text.reset_handler:00000000000015da $d
       stm32eforth.s:2749   .text.reset_handler:00000000000015de _PARSE
       stm32eforth.s:2751   .text.reset_handler:00000000000015e4 $t
       stm32eforth.s:2752   .text.reset_handler:00000000000015e4 PARSE
       stm32eforth.s:2773   .text.reset_handler:0000000000001624 $d
       stm32eforth.s:2774   .text.reset_handler:0000000000001628 _DOTPR
       stm32eforth.s:2777   .text.reset_handler:000000000000162c DOTPR
       stm32eforth.s:2780   .text.reset_handler:0000000000001634 $d
       stm32eforth.s:2781   .text.reset_handler:0000000000001638 $t
       stm32eforth.s:2788   .text.reset_handler:0000000000001644 $d
       stm32eforth.s:2789   .text.reset_handler:0000000000001648 _PAREN
       stm32eforth.s:2791   .text.reset_handler:000000000000164a $t
       stm32eforth.s:2792   .text.reset_handler:000000000000164c PAREN
       stm32eforth.s:2795   .text.reset_handler:0000000000001654 $d
       stm32eforth.s:2796   .text.reset_handler:0000000000001658 $t
       stm32eforth.s:2803   .text.reset_handler:0000000000001664 $d
       stm32eforth.s:2804   .text.reset_handler:0000000000001668 _BKSLA
       stm32eforth.s:2806   .text.reset_handler:000000000000166a $t
       stm32eforth.s:2807   .text.reset_handler:000000000000166c BKSLA
       stm32eforth.s:2818   .text.reset_handler:0000000000001684 $d
       stm32eforth.s:2819   .text.reset_handler:0000000000001688 _CHAR
       stm32eforth.s:2822   .text.reset_handler:0000000000001690 CHAR
       stm32eforth.s:2833   .text.reset_handler:00000000000016a8 $d
       stm32eforth.s:2834   .text.reset_handler:00000000000016ac _WORDD
       stm32eforth.s:2837   .text.reset_handler:00000000000016b4 WORDD
       stm32eforth.s:2848   .text.reset_handler:00000000000016cc $d
       stm32eforth.s:2849   .text.reset_handler:00000000000016d0 _TOKEN
       stm32eforth.s:2851   .text.reset_handler:00000000000016d6 $t
       stm32eforth.s:2852   .text.reset_handler:00000000000016d8 TOKEN
       stm32eforth.s:2864   .text.reset_handler:00000000000016e8 $d
       stm32eforth.s:2865   .text.reset_handler:00000000000016ec _NAMET
       stm32eforth.s:2867   .text.reset_handler:00000000000016f2 $t
       stm32eforth.s:2868   .text.reset_handler:00000000000016f4 NAMET
       stm32eforth.s:2872   .text.reset_handler:0000000000001700 $d
       stm32eforth.s:2873   .text.reset_handler:0000000000001704 $t
       stm32eforth.s:2886   .text.reset_handler:0000000000001714 $d
       stm32eforth.s:2887   .text.reset_handler:0000000000001718 _SAMEQ
       stm32eforth.s:2889   .text.reset_handler:000000000000171e $t
       stm32eforth.s:2890   .text.reset_handler:0000000000001720 SAMEQ
ARM GAS  stm32eforth.s 			page 102


       stm32eforth.s:2910   .text.reset_handler:0000000000001768 SAME2
       stm32eforth.s:2894   .text.reset_handler:000000000000172c SAME1
       stm32eforth.s:2906   .text.reset_handler:0000000000001758 $d
       stm32eforth.s:2907   .text.reset_handler:000000000000175c $t
       stm32eforth.s:2912   .text.reset_handler:000000000000176c $d
       stm32eforth.s:2913   .text.reset_handler:0000000000001770 $t
       stm32eforth.s:2914   .text.reset_handler:0000000000001774 $d
       stm32eforth.s:2915   .text.reset_handler:0000000000001778 $t
       stm32eforth.s:2927   .text.reset_handler:000000000000177c FIND
       stm32eforth.s:2936   .text.reset_handler:000000000000179c FIND1
       stm32eforth.s:2939   .text.reset_handler:00000000000017a4 $d
       stm32eforth.s:2959   .text.reset_handler:00000000000017ec FIND6
       stm32eforth.s:2940   .text.reset_handler:00000000000017a8 $t
       stm32eforth.s:2943   .text.reset_handler:00000000000017b4 $d
       stm32eforth.s:2944   .text.reset_handler:00000000000017b8 $t
       stm32eforth.s:2948   .text.reset_handler:00000000000017c8 $d
       stm32eforth.s:2952   .text.reset_handler:00000000000017d8 FIND2
       stm32eforth.s:2949   .text.reset_handler:00000000000017cc $t
       stm32eforth.s:2957   .text.reset_handler:00000000000017e8 FIND3
       stm32eforth.s:2966   .text.reset_handler:0000000000001804 FIND4
       stm32eforth.s:2968   .text.reset_handler:0000000000001808 $d
       stm32eforth.s:2973   .text.reset_handler:000000000000181c FIND5
       stm32eforth.s:2969   .text.reset_handler:000000000000180c $t
       stm32eforth.s:2987   .text.reset_handler:0000000000001840 $d
       stm32eforth.s:2988   .text.reset_handler:0000000000001844 _NAMEQ
       stm32eforth.s:2990   .text.reset_handler:000000000000184a $t
       stm32eforth.s:2991   .text.reset_handler:000000000000184c NAMEQ
       stm32eforth.s:3008   .text.reset_handler:0000000000001860 BKSP
       stm32eforth.s:3017   .text.reset_handler:0000000000001880 $d
       stm32eforth.s:3030   .text.reset_handler:00000000000018a8 BACK1
       stm32eforth.s:3018   .text.reset_handler:0000000000001884 $t
       stm32eforth.s:3019   .text.reset_handler:0000000000001888 $d
       stm32eforth.s:3020   .text.reset_handler:000000000000188c $t
       stm32eforth.s:3027   .text.reset_handler:00000000000018a0 $d
       stm32eforth.s:3028   .text.reset_handler:00000000000018a4 $t
       stm32eforth.s:3040   .text.reset_handler:00000000000018ac TAP
       stm32eforth.s:3057   .text.reset_handler:00000000000018c8 KTAP
       stm32eforth.s:3058   .text.reset_handler:00000000000018c8 TTAP
       stm32eforth.s:3062   .text.reset_handler:00000000000018d4 $d
       stm32eforth.s:3063   .text.reset_handler:00000000000018d8 $t
       stm32eforth.s:3065   .text.reset_handler:00000000000018e0 $d
       stm32eforth.s:3078   .text.reset_handler:0000000000001910 KTAP2
       stm32eforth.s:3066   .text.reset_handler:00000000000018e4 $t
       stm32eforth.s:3067   .text.reset_handler:00000000000018e8 $d
       stm32eforth.s:3068   .text.reset_handler:00000000000018ec $t
       stm32eforth.s:3070   .text.reset_handler:00000000000018f4 $d
       stm32eforth.s:3075   .text.reset_handler:0000000000001908 KTAP1
       stm32eforth.s:3071   .text.reset_handler:00000000000018f8 $t
       stm32eforth.s:3074   .text.reset_handler:0000000000001904 $d
       stm32eforth.s:3076   .text.reset_handler:0000000000001908 $t
       stm32eforth.s:3088   .text.reset_handler:0000000000001924 $d
       stm32eforth.s:3089   .text.reset_handler:0000000000001928 _ACCEP
       stm32eforth.s:3092   .text.reset_handler:0000000000001930 ACCEP
       stm32eforth.s:3097   .text.reset_handler:0000000000001940 ACCP1
       stm32eforth.s:3101   .text.reset_handler:000000000000194c $d
       stm32eforth.s:3117   .text.reset_handler:000000000000197c ACCP4
       stm32eforth.s:3102   .text.reset_handler:0000000000001950 $t
ARM GAS  stm32eforth.s 			page 103


       stm32eforth.s:3106   .text.reset_handler:0000000000001960 $d
       stm32eforth.s:3107   .text.reset_handler:0000000000001964 $t
       stm32eforth.s:3109   .text.reset_handler:000000000000196c $d
       stm32eforth.s:3112   .text.reset_handler:0000000000001976 ACCP2
       stm32eforth.s:3110   .text.reset_handler:0000000000001970 $t
       stm32eforth.s:3115   .text.reset_handler:000000000000197a ACCP3
       stm32eforth.s:3126   .text.reset_handler:000000000000198c $d
       stm32eforth.s:3127   .text.reset_handler:0000000000001990 _QUERY
       stm32eforth.s:3129   .text.reset_handler:0000000000001996 $t
       stm32eforth.s:3130   .text.reset_handler:0000000000001998 QUERY
       stm32eforth.s:3134   .text.reset_handler:00000000000019a4 $d
       stm32eforth.s:3135   .text.reset_handler:00000000000019a8 $t
       stm32eforth.s:3140   .text.reset_handler:00000000000019bc $d
       stm32eforth.s:3141   .text.reset_handler:00000000000019c0 $t
       stm32eforth.s:3151   .text.reset_handler:00000000000019cc $d
       stm32eforth.s:3152   .text.reset_handler:00000000000019d0 _ABORT
       stm32eforth.s:3154   .text.reset_handler:00000000000019d6 $t
       stm32eforth.s:3155   .text.reset_handler:00000000000019d8 ABORT
       stm32eforth.s:3158   .text.reset_handler:00000000000019e0 ABORT1
       stm32eforth.s:3162   .text.reset_handler:00000000000019ec $d
       stm32eforth.s:3163   .text.reset_handler:00000000000019f0 $t
       stm32eforth.s:3306   .text.reset_handler:0000000000001b54 PRESE
       stm32eforth.s:3320   .text.reset_handler:0000000000001b68 QUIT
       stm32eforth.s:3175   .text.reset_handler:0000000000001a00 ABORQ
       stm32eforth.s:3180   .text.reset_handler:0000000000001a10 $d
       stm32eforth.s:3181   .text.reset_handler:0000000000001a14 $t
       stm32eforth.s:3192   .text.reset_handler:0000000000001a1e $d
       stm32eforth.s:3193   .text.reset_handler:0000000000001a22 _INTER
       stm32eforth.s:3195   .text.reset_handler:0000000000001a2e $t
       stm32eforth.s:3201   .text.reset_handler:0000000000001a40 $d
       stm32eforth.s:3212   .text.reset_handler:0000000000001a70 INTE1
       stm32eforth.s:3202   .text.reset_handler:0000000000001a44 $t
       stm32eforth.s:3204   .text.reset_handler:0000000000001a4c $d
       stm32eforth.s:3205   .text.reset_handler:0000000000001a50 $t
       stm32eforth.s:3207   .text.reset_handler:0000000000001a58 $d
       stm32eforth.s:3209   .text.reset_handler:0000000000001a66 $t
       stm32eforth.s:3215   .text.reset_handler:0000000000001a78 $d
       stm32eforth.s:3217   .text.reset_handler:0000000000001a80 INTE2
       stm32eforth.s:3216   .text.reset_handler:0000000000001a7c $t
       stm32eforth.s:3223   .text.reset_handler:0000000000001a84 $d
       stm32eforth.s:3224   .text.reset_handler:0000000000001a88 _LBRAC
       stm32eforth.s:3226   .text.reset_handler:0000000000001a8a $t
       stm32eforth.s:3227   .text.reset_handler:0000000000001a8c LBRAC
       stm32eforth.s:3230   .text.reset_handler:0000000000001a94 $d
       stm32eforth.s:3231   .text.reset_handler:0000000000001a98 $t
       stm32eforth.s:3238   .text.reset_handler:0000000000001aa4 $d
       stm32eforth.s:3239   .text.reset_handler:0000000000001aa8 _DOTOK
       stm32eforth.s:3241   .text.reset_handler:0000000000001aac $t
       stm32eforth.s:3242   .text.reset_handler:0000000000001aac DOTOK
       stm32eforth.s:3245   .text.reset_handler:0000000000001ab4 $d
       stm32eforth.s:3246   .text.reset_handler:0000000000001ab8 $t
       stm32eforth.s:3250   .text.reset_handler:0000000000001ac8 $d
       stm32eforth.s:3254   .text.reset_handler:0000000000001ad4 DOTO1
       stm32eforth.s:3251   .text.reset_handler:0000000000001acc $t
       stm32eforth.s:3252   .text.reset_handler:0000000000001ad0 $d
       stm32eforth.s:3255   .text.reset_handler:0000000000001ad4 $t
       stm32eforth.s:3261   .text.reset_handler:0000000000001adc $d
ARM GAS  stm32eforth.s 			page 104


       stm32eforth.s:3262   .text.reset_handler:0000000000001ae0 _QSTAC
       stm32eforth.s:3265   .text.reset_handler:0000000000001ae8 QSTAC
       stm32eforth.s:3270   .text.reset_handler:0000000000001af8 $d
       stm32eforth.s:3278   .text.reset_handler:0000000000001b08 $d
       stm32eforth.s:3279   .text.reset_handler:0000000000001b0c _EVAL
       stm32eforth.s:3282   .text.reset_handler:0000000000001b14 EVAL
       stm32eforth.s:3284   .text.reset_handler:0000000000001b18 EVAL1
       stm32eforth.s:3289   .text.reset_handler:0000000000001b28 $d
       stm32eforth.s:3294   .text.reset_handler:0000000000001b3c EVAL2
       stm32eforth.s:3290   .text.reset_handler:0000000000001b2c $t
       stm32eforth.s:3302   .text.reset_handler:0000000000001b48 $d
       stm32eforth.s:3303   .text.reset_handler:0000000000001b4c _PRESE
       stm32eforth.s:3316   .text.reset_handler:0000000000001b5e $d
       stm32eforth.s:3317   .text.reset_handler:0000000000001b62 _QUIT
       stm32eforth.s:3324   .text.reset_handler:0000000000001b74 QUIT1
       stm32eforth.s:3326   .text.reset_handler:0000000000001b78 QUIT2
       stm32eforth.s:3330   .text.reset_handler:0000000000001b84 $d
       stm32eforth.s:3339   .text.reset_handler:0000000000001b8c _UNLOCK
       stm32eforth.s:3342   .text.reset_handler:0000000000001b94 UNLOCK
       stm32eforth.s:3345   .text.reset_handler:0000000000001b9c $d
       stm32eforth.s:3366   .text.reset_handler:0000000000001bbe LOCK
       stm32eforth.s:3716   .text.reset_handler:0000000000001fa8 flash_regs
       stm32eforth.s:3346   .text.reset_handler:0000000000001ba0 $t
       stm32eforth.s:3373   .text.reset_handler:0000000000001bca WAIT_BSY
       stm32eforth.s:3375   .text.reset_handler:0000000000001bcc WAIT1
       stm32eforth.s:3386   .text.reset_handler:0000000000001bd6 $d
       stm32eforth.s:3387   .text.reset_handler:0000000000001bda _EPAGE
       stm32eforth.s:3391   .text.reset_handler:0000000000001be8 EPAGE
       stm32eforth.s:3395   .text.reset_handler:0000000000001bf4 $d
       stm32eforth.s:3396   .text.reset_handler:0000000000001bf8 $t
       stm32eforth.s:3406   .text.reset_handler:0000000000001c16 $d
       stm32eforth.s:3407   .text.reset_handler:0000000000001c1a $t
       stm32eforth.s:3411   .text.reset_handler:0000000000001c28 $d
       stm32eforth.s:3413   .text.reset_handler:0000000000001c36 $t
       stm32eforth.s:3418   .text.reset_handler:0000000000001c3c HWORD_WRITE
       stm32eforth.s:3431   .text.reset_handler:0000000000001c5e $d
       stm32eforth.s:3432   .text.reset_handler:0000000000001c62 $t
       stm32eforth.s:3433   .text.reset_handler:0000000000001c66 $d
       stm32eforth.s:3435   .text.reset_handler:0000000000001c74 $t
       stm32eforth.s:3444   .text.reset_handler:0000000000001c78 $d
       stm32eforth.s:3445   .text.reset_handler:0000000000001c7c _ISTOR
       stm32eforth.s:3448   .text.reset_handler:0000000000001c80 ISTOR
       stm32eforth.s:3452   .text.reset_handler:0000000000001c8c $d
       stm32eforth.s:3453   .text.reset_handler:0000000000001c90 $t
       stm32eforth.s:3464   .text.reset_handler:0000000000001cbc $d
       stm32eforth.s:3465   .text.reset_handler:0000000000001cc0 $t
       stm32eforth.s:3471   .text.reset_handler:0000000000001cc8 $d
       stm32eforth.s:3472   .text.reset_handler:0000000000001ccc _IMG_SIZE
       stm32eforth.s:3475   .text.reset_handler:0000000000001cd8 IMG_SIZE
       stm32eforth.s:3478   .text.reset_handler:0000000000001ce0 $d
       stm32eforth.s:3479   .text.reset_handler:0000000000001ce4 $t
       stm32eforth.s:3484   .text.reset_handler:0000000000001cf8 $d
       stm32eforth.s:3485   .text.reset_handler:0000000000001cfc $t
       stm32eforth.s:3488   .text.reset_handler:0000000000001d08 $d
       stm32eforth.s:3489   .text.reset_handler:0000000000001d0c $t
       stm32eforth.s:3495   .text.reset_handler:0000000000001d14 $d
       stm32eforth.s:3496   .text.reset_handler:0000000000001d18 _IMGQ
ARM GAS  stm32eforth.s 			page 105


       stm32eforth.s:3499   .text.reset_handler:0000000000001d20 IMGQ
       stm32eforth.s:3511   .text.reset_handler:0000000000001d40 $d
       stm32eforth.s:3512   .text.reset_handler:0000000000001d44 _LOAD_IMG
       stm32eforth.s:3515   .text.reset_handler:0000000000001d50 LOAD_IMG
       stm32eforth.s:3519   .text.reset_handler:0000000000001d5c $d
       stm32eforth.s:3521   .text.reset_handler:0000000000001d60 $t
       stm32eforth.s:3545   .text.reset_handler:0000000000001da8 $d
       stm32eforth.s:3546   .text.reset_handler:0000000000001dac _ERASE_MPG
       stm32eforth.s:3548   .text.reset_handler:0000000000001db6 $t
       stm32eforth.s:3549   .text.reset_handler:0000000000001db8 ERASE_MPG
       stm32eforth.s:3611   .text.reset_handler:0000000000001e68 PG_TO_ADR
       stm32eforth.s:3554   .text.reset_handler:0000000000001dc8 $d
       stm32eforth.s:3556   .text.reset_handler:0000000000001dcc $t
       stm32eforth.s:3563   .text.reset_handler:0000000000001de4 $d
       stm32eforth.s:3564   .text.reset_handler:0000000000001de8 $t
       stm32eforth.s:3569   .text.reset_handler:0000000000001df0 $d
       stm32eforth.s:3570   .text.reset_handler:0000000000001df4 _FLSH_WR
       stm32eforth.s:3573   .text.reset_handler:0000000000001dfc FLSH_WR
       stm32eforth.s:3574   .text.reset_handler:0000000000001dfc $t
       stm32eforth.s:3577   .text.reset_handler:0000000000001e08 $d
       stm32eforth.s:3579   .text.reset_handler:0000000000001e0c $t
       stm32eforth.s:3588   .text.reset_handler:0000000000001e30 $d
       stm32eforth.s:3589   .text.reset_handler:0000000000001e34 $t
       stm32eforth.s:3596   .text.reset_handler:0000000000001e44 $d
       stm32eforth.s:3597   .text.reset_handler:0000000000001e48 _ADR_TO_PG
       stm32eforth.s:3600   .text.reset_handler:0000000000001e50 ADR_TO_PG
       stm32eforth.s:3607   .text.reset_handler:0000000000001e5a $d
       stm32eforth.s:3608   .text.reset_handler:0000000000001e5e _PG_TO_ADR
       stm32eforth.s:3618   .text.reset_handler:0000000000001e72 $d
       stm32eforth.s:3619   .text.reset_handler:0000000000001e76 _ERASE_IMG
       stm32eforth.s:3621   .text.reset_handler:0000000000001e80 $t
       stm32eforth.s:3622   .text.reset_handler:0000000000001e80 ERASE_IMG
       stm32eforth.s:3628   .text.reset_handler:0000000000001e94 $d
       stm32eforth.s:3629   .text.reset_handler:0000000000001e98 $t
       stm32eforth.s:3633   .text.reset_handler:0000000000001ea8 $d
       stm32eforth.s:3634   .text.reset_handler:0000000000001eac $t
       stm32eforth.s:3639   .text.reset_handler:0000000000001eb4 $d
       stm32eforth.s:3640   .text.reset_handler:0000000000001eb8 _SAVE_IMG
       stm32eforth.s:3643   .text.reset_handler:0000000000001ec4 SAVE_IMG
       stm32eforth.s:3649   .text.reset_handler:0000000000001ed8 $d
       stm32eforth.s:3650   .text.reset_handler:0000000000001edc $t
       stm32eforth.s:3653   .text.reset_handler:0000000000001ee8 $d
       stm32eforth.s:3655   .text.reset_handler:0000000000001eec $t
       stm32eforth.s:3677   .text.reset_handler:0000000000001f28 $d
       stm32eforth.s:3678   .text.reset_handler:0000000000001f2c _TURNKEY
       stm32eforth.s:3680   .text.reset_handler:0000000000001f34 $t
       stm32eforth.s:3681   .text.reset_handler:0000000000001f34 TURNKEY
       stm32eforth.s:3731   .text.reset_handler:0000000000001fbc TICK
       stm32eforth.s:3689   .text.reset_handler:0000000000001f4c $d
       stm32eforth.s:3690   .text.reset_handler:0000000000001f50 _FORGET
       stm32eforth.s:3693   .text.reset_handler:0000000000001f58 FORGET
       stm32eforth.s:3699   .text.reset_handler:0000000000001f6c $d
       stm32eforth.s:3700   .text.reset_handler:0000000000001f70 $t
       stm32eforth.s:3703   .text.reset_handler:0000000000001f7c $d
       stm32eforth.s:3704   .text.reset_handler:0000000000001f80 $t
       stm32eforth.s:4174   .text.reset_handler:00000000000023e8 OVERT
       stm32eforth.s:3717   .text.reset_handler:0000000000001fa8 $d
ARM GAS  stm32eforth.s 			page 106


       stm32eforth.s:3728   .text.reset_handler:0000000000001fb8 _TICK
       stm32eforth.s:3730   .text.reset_handler:0000000000001fba $t
       stm32eforth.s:3736   .text.reset_handler:0000000000001fcc $d
       stm32eforth.s:3738   .text.reset_handler:0000000000001fd4 TICK1
       stm32eforth.s:3737   .text.reset_handler:0000000000001fd0 $t
       stm32eforth.s:3743   .text.reset_handler:0000000000001fd8 $d
       stm32eforth.s:3744   .text.reset_handler:0000000000001fdc _ALLOT
       stm32eforth.s:3746   .text.reset_handler:0000000000001fe2 $t
       stm32eforth.s:3747   .text.reset_handler:0000000000001fe4 ALLOT
       stm32eforth.s:3756   .text.reset_handler:0000000000001ff4 $d
       stm32eforth.s:3757   .text.reset_handler:0000000000001ff8 _COMMA
       stm32eforth.s:3758   .text.reset_handler:0000000000001ffa $t
       stm32eforth.s:3759   .text.reset_handler:0000000000001ffc COMMA
       stm32eforth.s:3772   .text.reset_handler:000000000000201c $d
       stm32eforth.s:3773   .text.reset_handler:0000000000002020 _BCOMP
       stm32eforth.s:3775   .text.reset_handler:000000000000202a $t
       stm32eforth.s:3776   .text.reset_handler:000000000000202c BCOMP
       stm32eforth.s:3785   .text.reset_handler:000000000000203c $d
       stm32eforth.s:3786   .text.reset_handler:0000000000002040 _COMPI
       stm32eforth.s:3788   .text.reset_handler:0000000000002048 $t
       stm32eforth.s:3789   .text.reset_handler:0000000000002048 COMPI
       stm32eforth.s:4221   .text.reset_handler:0000000000002444 CALLC
       stm32eforth.s:3804   .text.reset_handler:0000000000002070 $d
       stm32eforth.s:3805   .text.reset_handler:0000000000002074 _LITER
       stm32eforth.s:3807   .text.reset_handler:000000000000207c $t
       stm32eforth.s:3808   .text.reset_handler:000000000000207c LITER
       stm32eforth.s:3811   .text.reset_handler:0000000000002084 $d
       stm32eforth.s:3812   .text.reset_handler:0000000000002088 $t
       stm32eforth.s:3822   .text.reset_handler:0000000000002090 STRCQ
       stm32eforth.s:3825   .text.reset_handler:0000000000002098 $d
       stm32eforth.s:3826   .text.reset_handler:000000000000209c $t
       stm32eforth.s:3829   .text.reset_handler:00000000000020a8 $d
       stm32eforth.s:3830   .text.reset_handler:00000000000020ac $t
       stm32eforth.s:3844   .text.reset_handler:00000000000020c8 $d
       stm32eforth.s:3845   .text.reset_handler:00000000000020cc _FOR
       stm32eforth.s:3847   .text.reset_handler:00000000000020d0 $t
       stm32eforth.s:3848   .text.reset_handler:00000000000020d0 FOR
       stm32eforth.s:3851   .text.reset_handler:00000000000020d8 $d
       stm32eforth.s:3852   .text.reset_handler:00000000000020dc $t
       stm32eforth.s:3858   .text.reset_handler:00000000000020e4 $d
       stm32eforth.s:3859   .text.reset_handler:00000000000020e8 _BEGIN
       stm32eforth.s:3861   .text.reset_handler:00000000000020ee $t
       stm32eforth.s:3862   .text.reset_handler:00000000000020f0 BEGIN
       stm32eforth.s:3870   .text.reset_handler:00000000000020fc $d
       stm32eforth.s:3871   .text.reset_handler:0000000000002100 _NEXT
       stm32eforth.s:3874   .text.reset_handler:0000000000002108 NEXT
       stm32eforth.s:3877   .text.reset_handler:0000000000002110 $d
       stm32eforth.s:3878   .text.reset_handler:0000000000002114 $t
       stm32eforth.s:3884   .text.reset_handler:000000000000211c $d
       stm32eforth.s:3885   .text.reset_handler:0000000000002120 _UNTIL
       stm32eforth.s:3887   .text.reset_handler:0000000000002126 $t
       stm32eforth.s:3888   .text.reset_handler:0000000000002128 UNTIL
       stm32eforth.s:3891   .text.reset_handler:0000000000002130 $d
       stm32eforth.s:3892   .text.reset_handler:0000000000002134 $t
       stm32eforth.s:3898   .text.reset_handler:000000000000213c $d
       stm32eforth.s:3899   .text.reset_handler:0000000000002140 _AGAIN
       stm32eforth.s:3901   .text.reset_handler:0000000000002146 $t
ARM GAS  stm32eforth.s 			page 107


       stm32eforth.s:3902   .text.reset_handler:0000000000002148 AGAIN
       stm32eforth.s:3905   .text.reset_handler:0000000000002150 $d
       stm32eforth.s:3906   .text.reset_handler:0000000000002154 $t
       stm32eforth.s:3912   .text.reset_handler:000000000000215c $d
       stm32eforth.s:3913   .text.reset_handler:0000000000002160 _IFF
       stm32eforth.s:3916   .text.reset_handler:0000000000002164 IFF
       stm32eforth.s:3919   .text.reset_handler:000000000000216c $d
       stm32eforth.s:3920   .text.reset_handler:0000000000002170 $t
       stm32eforth.s:3922   .text.reset_handler:0000000000002178 $d
       stm32eforth.s:3923   .text.reset_handler:000000000000217c $t
       stm32eforth.s:3930   .text.reset_handler:0000000000002188 $d
       stm32eforth.s:3931   .text.reset_handler:000000000000218c _AHEAD
       stm32eforth.s:3933   .text.reset_handler:0000000000002192 $t
       stm32eforth.s:3934   .text.reset_handler:0000000000002194 AHEAD
       stm32eforth.s:3937   .text.reset_handler:000000000000219c $d
       stm32eforth.s:3938   .text.reset_handler:00000000000021a0 $t
       stm32eforth.s:3940   .text.reset_handler:00000000000021a8 $d
       stm32eforth.s:3941   .text.reset_handler:00000000000021ac $t
       stm32eforth.s:3948   .text.reset_handler:00000000000021b8 $d
       stm32eforth.s:3949   .text.reset_handler:00000000000021bc _REPEA
       stm32eforth.s:3952   .text.reset_handler:00000000000021c4 REPEA
       stm32eforth.s:3963   .text.reset_handler:00000000000021dc $d
       stm32eforth.s:3964   .text.reset_handler:00000000000021e0 _THENN
       stm32eforth.s:3967   .text.reset_handler:00000000000021e8 THENN
       stm32eforth.s:3977   .text.reset_handler:00000000000021fc $d
       stm32eforth.s:3978   .text.reset_handler:0000000000002200 _AFT
       stm32eforth.s:3980   .text.reset_handler:0000000000002204 $t
       stm32eforth.s:3981   .text.reset_handler:0000000000002204 AFT
       stm32eforth.s:3992   .text.reset_handler:000000000000221c $d
       stm32eforth.s:3993   .text.reset_handler:0000000000002220 _ELSEE
       stm32eforth.s:3996   .text.reset_handler:0000000000002228 ELSEE
       stm32eforth.s:4006   .text.reset_handler:000000000000223c $d
       stm32eforth.s:4007   .text.reset_handler:0000000000002240 _WHILE
       stm32eforth.s:4009   .text.reset_handler:0000000000002246 $t
       stm32eforth.s:4010   .text.reset_handler:0000000000002248 WHILE
       stm32eforth.s:4019   .text.reset_handler:0000000000002258 $d
       stm32eforth.s:4020   .text.reset_handler:000000000000225c _ABRTQ
       stm32eforth.s:4023   .text.reset_handler:0000000000002264 ABRTQ
       stm32eforth.s:4026   .text.reset_handler:000000000000226c $d
       stm32eforth.s:4027   .text.reset_handler:0000000000002270 $t
       stm32eforth.s:4033   .text.reset_handler:0000000000002278 $d
       stm32eforth.s:4034   .text.reset_handler:000000000000227c _STRQ
       stm32eforth.s:4037   .text.reset_handler:0000000000002280 STRQ
       stm32eforth.s:4040   .text.reset_handler:0000000000002288 $d
       stm32eforth.s:4041   .text.reset_handler:000000000000228c $t
       stm32eforth.s:4047   .text.reset_handler:0000000000002294 $d
       stm32eforth.s:4048   .text.reset_handler:0000000000002298 _DOTQ
       stm32eforth.s:4051   .text.reset_handler:000000000000229c DOTQ
       stm32eforth.s:4054   .text.reset_handler:00000000000022a4 $d
       stm32eforth.s:4055   .text.reset_handler:00000000000022a8 $t
       stm32eforth.s:4064   .text.reset_handler:00000000000022b0 $d
       stm32eforth.s:4065   .text.reset_handler:00000000000022b4 _UNIQU
       stm32eforth.s:4067   .text.reset_handler:00000000000022bc $t
       stm32eforth.s:4068   .text.reset_handler:00000000000022bc UNIQU
       stm32eforth.s:4073   .text.reset_handler:00000000000022cc $d
       stm32eforth.s:4081   .text.reset_handler:00000000000022e8 UNIQ1
       stm32eforth.s:4074   .text.reset_handler:00000000000022d0 $t
ARM GAS  stm32eforth.s 			page 108


       stm32eforth.s:4075   .text.reset_handler:00000000000022d4 $d
       stm32eforth.s:4077   .text.reset_handler:00000000000022dc $t
       stm32eforth.s:4092   .text.reset_handler:00000000000022f0 SNAME
       stm32eforth.s:4097   .text.reset_handler:0000000000002300 $d
       stm32eforth.s:4111   .text.reset_handler:0000000000002338 SNAM1
       stm32eforth.s:4098   .text.reset_handler:0000000000002304 $t
       stm32eforth.s:4113   .text.reset_handler:000000000000233c $d
       stm32eforth.s:4115   .text.reset_handler:0000000000002344 $t
       stm32eforth.s:4120   .text.reset_handler:0000000000002348 $d
       stm32eforth.s:4121   .text.reset_handler:000000000000234c _SCOMP
       stm32eforth.s:4123   .text.reset_handler:0000000000002356 $t
       stm32eforth.s:4124   .text.reset_handler:0000000000002358 SCOMP
       stm32eforth.s:4129   .text.reset_handler:0000000000002368 $d
       stm32eforth.s:4141   .text.reset_handler:0000000000002394 SCOM2
       stm32eforth.s:4130   .text.reset_handler:000000000000236c $t
       stm32eforth.s:4132   .text.reset_handler:0000000000002374 $d
       stm32eforth.s:4133   .text.reset_handler:0000000000002378 $t
       stm32eforth.s:4135   .text.reset_handler:0000000000002380 $d
       stm32eforth.s:4138   .text.reset_handler:000000000000238c SCOM1
       stm32eforth.s:4136   .text.reset_handler:0000000000002384 $t
       stm32eforth.s:4144   .text.reset_handler:000000000000239c $d
       stm32eforth.s:4147   .text.reset_handler:00000000000023a8 SCOM3
       stm32eforth.s:4145   .text.reset_handler:00000000000023a0 $t
       stm32eforth.s:4154   .text.reset_handler:00000000000023b0 COLON_ABORT
       stm32eforth.s:4170   .text.reset_handler:00000000000023dc $d
       stm32eforth.s:4171   .text.reset_handler:00000000000023e0 _OVERT
       stm32eforth.s:4173   .text.reset_handler:00000000000023e6 $t
       stm32eforth.s:4185   .text.reset_handler:0000000000002400 $d
       stm32eforth.s:4186   .text.reset_handler:0000000000002404 _SEMIS
       stm32eforth.s:4188   .text.reset_handler:0000000000002406 $t
       stm32eforth.s:4189   .text.reset_handler:0000000000002408 SEMIS
       stm32eforth.s:4201   .text.reset_handler:0000000000002424 $d
       stm32eforth.s:4202   .text.reset_handler:0000000000002428 _RBRAC
       stm32eforth.s:4204   .text.reset_handler:000000000000242a $t
       stm32eforth.s:4205   .text.reset_handler:000000000000242c RBRAC
       stm32eforth.s:4208   .text.reset_handler:0000000000002434 $d
       stm32eforth.s:4209   .text.reset_handler:0000000000002438 $t
       stm32eforth.s:4242   .text.reset_handler:000000000000247e $d
       stm32eforth.s:4243   .text.reset_handler:0000000000002482 _COLON
       stm32eforth.s:4245   .text.reset_handler:0000000000002484 $t
       stm32eforth.s:4246   .text.reset_handler:0000000000002484 COLON
       stm32eforth.s:4259   .text.reset_handler:00000000000024a4 $d
       stm32eforth.s:4260   .text.reset_handler:00000000000024a8 _IMMED
       stm32eforth.s:4262   .text.reset_handler:00000000000024b2 $t
       stm32eforth.s:4263   .text.reset_handler:00000000000024b4 IMMED
       stm32eforth.s:4266   .text.reset_handler:00000000000024bc $d
       stm32eforth.s:4267   .text.reset_handler:00000000000024c0 $t
       stm32eforth.s:4282   .text.reset_handler:00000000000024e0 $d
       stm32eforth.s:4283   .text.reset_handler:00000000000024e4 _CONST
       stm32eforth.s:4286   .text.reset_handler:00000000000024f0 CONST
       stm32eforth.s:4295   .text.reset_handler:0000000000002510 $d
       stm32eforth.s:4296   .text.reset_handler:0000000000002514 $t
       stm32eforth.s:4303   .text.reset_handler:0000000000002520 $d
       stm32eforth.s:4304   .text.reset_handler:0000000000002524 _CREAT
       stm32eforth.s:4307   .text.reset_handler:000000000000252c CREAT
       stm32eforth.s:4316   .text.reset_handler:000000000000254c $d
       stm32eforth.s:4317   .text.reset_handler:0000000000002550 $t
ARM GAS  stm32eforth.s 			page 109


       stm32eforth.s:4323   .text.reset_handler:0000000000002558 $d
       stm32eforth.s:4324   .text.reset_handler:000000000000255c _VARIA
       stm32eforth.s:4327   .text.reset_handler:0000000000002568 VARIA
       stm32eforth.s:4331   .text.reset_handler:0000000000002574 $d
       stm32eforth.s:4332   .text.reset_handler:0000000000002578 $t
       stm32eforth.s:4345   .text.reset_handler:0000000000002580 DMP
       stm32eforth.s:4349   .text.reset_handler:000000000000258c $d
       stm32eforth.s:4350   .text.reset_handler:0000000000002590 $t
       stm32eforth.s:4361   .text.reset_handler:00000000000025b8 PDUM2
       stm32eforth.s:4354   .text.reset_handler:00000000000025a0 PDUM1
       stm32eforth.s:4358   .text.reset_handler:00000000000025ac $d
       stm32eforth.s:4359   .text.reset_handler:00000000000025b0 $t
       stm32eforth.s:4363   .text.reset_handler:00000000000025bc $d
       stm32eforth.s:4364   .text.reset_handler:00000000000025c0 $t
       stm32eforth.s:4369   .text.reset_handler:00000000000025c4 $d
       stm32eforth.s:4370   .text.reset_handler:00000000000025c8 _DUMP
       stm32eforth.s:4373   .text.reset_handler:00000000000025d0 DUMP
       stm32eforth.s:4380   .text.reset_handler:00000000000025e8 $d
       stm32eforth.s:4381   .text.reset_handler:00000000000025ec $t
       stm32eforth.s:4395   .text.reset_handler:0000000000002620 DUMP4
       stm32eforth.s:4384   .text.reset_handler:00000000000025f8 DUMP1
       stm32eforth.s:4387   .text.reset_handler:0000000000002600 $d
       stm32eforth.s:4388   .text.reset_handler:0000000000002604 $t
       stm32eforth.s:4397   .text.reset_handler:0000000000002624 $d
       stm32eforth.s:4398   .text.reset_handler:0000000000002628 DUMP3
       stm32eforth.s:4399   .text.reset_handler:0000000000002628 $t
       stm32eforth.s:4408   .text.reset_handler:000000000000263c $d
       stm32eforth.s:4409   .text.reset_handler:0000000000002640 _DOTS
       stm32eforth.s:4413   .text.reset_handler:0000000000002644 DOTS
       stm32eforth.s:4423   .text.reset_handler:0000000000002664 DOTS2
       stm32eforth.s:4419   .text.reset_handler:0000000000002658 DOTS1
       stm32eforth.s:4425   .text.reset_handler:0000000000002668 $d
       stm32eforth.s:4426   .text.reset_handler:000000000000266c $t
       stm32eforth.s:4432   .text.reset_handler:0000000000002674 $d
       stm32eforth.s:4433   .text.reset_handler:0000000000002678 _TNAME
       stm32eforth.s:4435   .text.reset_handler:000000000000267e $t
       stm32eforth.s:4436   .text.reset_handler:0000000000002680 TNAME
       stm32eforth.s:4441   .text.reset_handler:0000000000002690 TNAM1
       stm32eforth.s:4444   .text.reset_handler:0000000000002698 $d
       stm32eforth.s:4454   .text.reset_handler:00000000000026c0 TNAM2
       stm32eforth.s:4445   .text.reset_handler:000000000000269c $t
       stm32eforth.s:4450   .text.reset_handler:00000000000026b0 $d
       stm32eforth.s:4451   .text.reset_handler:00000000000026b4 $t
       stm32eforth.s:4462   .text.reset_handler:00000000000026cc $d
       stm32eforth.s:4463   .text.reset_handler:00000000000026d0 _DOTID
       stm32eforth.s:4465   .text.reset_handler:00000000000026d4 $t
       stm32eforth.s:4466   .text.reset_handler:00000000000026d4 DOTID
       stm32eforth.s:4470   .text.reset_handler:00000000000026e0 $d
       stm32eforth.s:4477   .text.reset_handler:00000000000026fc DOTI1
       stm32eforth.s:4471   .text.reset_handler:00000000000026e4 $t
       stm32eforth.s:4473   .text.reset_handler:00000000000026ec $d
       stm32eforth.s:4474   .text.reset_handler:00000000000026f0 $t
       stm32eforth.s:4479   .text.reset_handler:0000000000002700 $d
       stm32eforth.s:4481   .text.reset_handler:000000000000270a $t
       stm32eforth.s:4484   *ABS*:0000000000000000 WANT_SEE
       stm32eforth.s:4568   .text.reset_handler:0000000000002710 $d
       stm32eforth.s:4570   .text.reset_handler:0000000000002714 _WORDS
ARM GAS  stm32eforth.s 			page 110


       stm32eforth.s:4572   .text.reset_handler:000000000000271a $t
       stm32eforth.s:4573   .text.reset_handler:000000000000271c WORDS
       stm32eforth.s:4578   .text.reset_handler:000000000000272c WORS1
       stm32eforth.s:4581   .text.reset_handler:0000000000002734 $d
       stm32eforth.s:4588   .text.reset_handler:0000000000002750 WORS2
       stm32eforth.s:4582   .text.reset_handler:0000000000002738 $t
       stm32eforth.s:4601   .text.reset_handler:0000000000002754 VERSN
       stm32eforth.s:4604   .text.reset_handler:000000000000275c $d
       stm32eforth.s:4605   .text.reset_handler:0000000000002760 $t
       stm32eforth.s:4610   .text.reset_handler:0000000000002764 $d
       stm32eforth.s:4611   .text.reset_handler:0000000000002768 _HI
       stm32eforth.s:4618   .text.reset_handler:0000000000002778 $d
       stm32eforth.s:4620   .text.reset_handler:0000000000002790 $t
       stm32eforth.s:4629   .text.reset_handler:00000000000027b0 $d
       stm32eforth.s:4630   .text.reset_handler:00000000000027b4 $t
       stm32eforth.s:4642   .text.reset_handler:00000000000027d4 $d
       stm32eforth.s:4648   .text.reset_handler:00000000000027e0 $t
       stm32eforth.s:4654   .text.reset_handler:00000000000027f8 COLD1
       stm32eforth.s:4656   .text.reset_handler:00000000000027fc $d
       stm32eforth.s:4657   .text.reset_handler:0000000000002800 $t
       stm32eforth.s:4659   .text.reset_handler:0000000000002808 $d
       stm32eforth.s:4660   .text.reset_handler:000000000000280c $t
       stm32eforth.s:4661   .text.reset_handler:0000000000002810 $d
       stm32eforth.s:4662   .text.reset_handler:0000000000002814 $t
       stm32eforth.s:4663   .text.reset_handler:0000000000002818 $d
       stm32eforth.s:4664   .text.reset_handler:000000000000281c $t
       stm32eforth.s:4669   .text.reset_handler:000000000000282c $d
       stm32eforth.s:4670   .text.reset_handler:0000000000002830 $t
       stm32eforth.s:4675   .text.reset_handler:0000000000002844 COLD2
       stm32eforth.s:4678   .text.reset_handler:0000000000002848 $d
       stm32eforth.s:4679   .text.reset_handler:000000000000284c $t
       stm32eforth.s:4681   .text.reset_handler:0000000000002c00 $d
       stm32eforth.s:263    .text.default_handler:0000000000000033 $d
       stm32eforth.s:263    .text.default_handler:0000000000000034 $t
       stm32eforth.s:507    .text.reset_handler:000000000000045f $d
       stm32eforth.s:507    .text.reset_handler:0000000000000460 $t
       stm32eforth.s:531    .text.reset_handler:00000000000004ab $d
       stm32eforth.s:531    .text.reset_handler:00000000000004ac $t
       stm32eforth.s:567    .text.reset_handler:00000000000004fd $d
       stm32eforth.s:567    .text.reset_handler:00000000000004fe $t
       stm32eforth.s:587    .text.reset_handler:0000000000000525 $d
       stm32eforth.s:587    .text.reset_handler:0000000000000526 $t
       stm32eforth.s:612    .text.reset_handler:0000000000000559 $d
       stm32eforth.s:612    .text.reset_handler:000000000000055a $t
       stm32eforth.s:726    .text.reset_handler:00000000000005ef $d
       stm32eforth.s:726    .text.reset_handler:00000000000005f0 $t
       stm32eforth.s:760    .text.reset_handler:000000000000061b $d
       stm32eforth.s:760    .text.reset_handler:000000000000061c $t
       stm32eforth.s:773    .text.reset_handler:000000000000062f $d
       stm32eforth.s:773    .text.reset_handler:0000000000000630 $t
       stm32eforth.s:784    .text.reset_handler:000000000000063b $d
       stm32eforth.s:784    .text.reset_handler:000000000000063c $t
       stm32eforth.s:796    .text.reset_handler:000000000000064d $d
       stm32eforth.s:796    .text.reset_handler:000000000000064e $t
       stm32eforth.s:808    .text.reset_handler:000000000000065f $d
       stm32eforth.s:808    .text.reset_handler:0000000000000660 $t
       stm32eforth.s:832    .text.reset_handler:0000000000000685 $d
ARM GAS  stm32eforth.s 			page 111


       stm32eforth.s:832    .text.reset_handler:0000000000000686 $t
       stm32eforth.s:854    .text.reset_handler:00000000000006a7 $d
       stm32eforth.s:854    .text.reset_handler:00000000000006a8 $t
       stm32eforth.s:867    .text.reset_handler:00000000000006b9 $d
       stm32eforth.s:867    .text.reset_handler:00000000000006ba $t
       stm32eforth.s:879    .text.reset_handler:00000000000006cb $d
       stm32eforth.s:879    .text.reset_handler:00000000000006cc $t
       stm32eforth.s:903    .text.reset_handler:00000000000006f1 $d
       stm32eforth.s:903    .text.reset_handler:00000000000006f2 $t
       stm32eforth.s:942    .text.reset_handler:0000000000000737 $d
       stm32eforth.s:942    .text.reset_handler:0000000000000738 $t
       stm32eforth.s:954    .text.reset_handler:000000000000074d $d
       stm32eforth.s:954    .text.reset_handler:000000000000074e $t
       stm32eforth.s:1016   .text.reset_handler:00000000000007a7 $d
       stm32eforth.s:1016   .text.reset_handler:00000000000007a8 $t
       stm32eforth.s:1030   .text.reset_handler:00000000000007bb $d
       stm32eforth.s:1030   .text.reset_handler:00000000000007bc $t
       stm32eforth.s:1041   .text.reset_handler:00000000000007c9 $d
       stm32eforth.s:1041   .text.reset_handler:00000000000007ca $t
       stm32eforth.s:1052   .text.reset_handler:00000000000007d9 $d
       stm32eforth.s:1052   .text.reset_handler:00000000000007da $t
       stm32eforth.s:1063   .text.reset_handler:00000000000007e9 $d
       stm32eforth.s:1063   .text.reset_handler:00000000000007ea $t
       stm32eforth.s:1096   .text.reset_handler:0000000000000819 $d
       stm32eforth.s:1096   .text.reset_handler:000000000000081a $t
       stm32eforth.s:1130   .text.reset_handler:000000000000084d $d
       stm32eforth.s:1130   .text.reset_handler:000000000000084e $t
       stm32eforth.s:1141   .text.reset_handler:000000000000085d $d
       stm32eforth.s:1141   .text.reset_handler:000000000000085e $t
       stm32eforth.s:1152   .text.reset_handler:000000000000086f $d
       stm32eforth.s:1152   .text.reset_handler:0000000000000870 $t
       stm32eforth.s:1191   .text.reset_handler:00000000000008ab $d
       stm32eforth.s:1191   .text.reset_handler:00000000000008ac $t
       stm32eforth.s:1204   .text.reset_handler:00000000000008bf $d
       stm32eforth.s:1204   .text.reset_handler:00000000000008c0 $t
       stm32eforth.s:1231   .text.reset_handler:00000000000008ed $d
       stm32eforth.s:1231   .text.reset_handler:00000000000008ee $t
       stm32eforth.s:1255   .text.reset_handler:0000000000000911 $d
       stm32eforth.s:1255   .text.reset_handler:0000000000000912 $t
       stm32eforth.s:1284   .text.reset_handler:000000000000093f $d
       stm32eforth.s:1284   .text.reset_handler:0000000000000940 $t
       stm32eforth.s:1357   .text.reset_handler:00000000000009af $d
       stm32eforth.s:1357   .text.reset_handler:00000000000009b0 $t
       stm32eforth.s:1372   .text.reset_handler:00000000000009c7 $d
       stm32eforth.s:1372   .text.reset_handler:00000000000009c8 $t
       stm32eforth.s:1387   .text.reset_handler:00000000000009e3 $d
       stm32eforth.s:1387   .text.reset_handler:00000000000009e4 $t
       stm32eforth.s:1459   .text.reset_handler:0000000000000a41 $d
       stm32eforth.s:1459   .text.reset_handler:0000000000000a42 $t
       stm32eforth.s:1470   .text.reset_handler:0000000000000a57 $d
       stm32eforth.s:1470   .text.reset_handler:0000000000000a58 $t
       stm32eforth.s:1493   .text.reset_handler:0000000000000a7f $d
       stm32eforth.s:1493   .text.reset_handler:0000000000000a80 $t
       stm32eforth.s:1517   .text.reset_handler:0000000000000aa7 $d
       stm32eforth.s:1517   .text.reset_handler:0000000000000aa8 $t
       stm32eforth.s:1541   .text.reset_handler:0000000000000ac5 $d
       stm32eforth.s:1541   .text.reset_handler:0000000000000ac6 $t
ARM GAS  stm32eforth.s 			page 112


       stm32eforth.s:1565   .text.reset_handler:0000000000000aef $d
       stm32eforth.s:1565   .text.reset_handler:0000000000000af0 $t
       stm32eforth.s:1614   .text.reset_handler:0000000000000b41 $d
       stm32eforth.s:1614   .text.reset_handler:0000000000000b42 $t
       stm32eforth.s:1637   .text.reset_handler:0000000000000b6b $d
       stm32eforth.s:1637   .text.reset_handler:0000000000000b6c $t
       stm32eforth.s:1652   .text.reset_handler:0000000000000b85 $d
       stm32eforth.s:1652   .text.reset_handler:0000000000000b86 $t
       stm32eforth.s:1665   .text.reset_handler:0000000000000ba1 $d
       stm32eforth.s:1665   .text.reset_handler:0000000000000ba2 $t
       stm32eforth.s:1689   .text.reset_handler:0000000000000bd9 $d
       stm32eforth.s:1689   .text.reset_handler:0000000000000bda $t
       stm32eforth.s:1705   .text.reset_handler:0000000000000bf1 $d
       stm32eforth.s:1705   .text.reset_handler:0000000000000bf2 $t
       stm32eforth.s:1724   .text.reset_handler:0000000000000c1f $d
       stm32eforth.s:1724   .text.reset_handler:0000000000000c20 $t
       stm32eforth.s:1794   .text.reset_handler:0000000000000ccd $d
       stm32eforth.s:1794   .text.reset_handler:0000000000000cce $t
       stm32eforth.s:1851   .text.reset_handler:0000000000000d47 $d
       stm32eforth.s:1851   .text.reset_handler:0000000000000d48 $t
       stm32eforth.s:1921   .text.reset_handler:0000000000000de7 $d
       stm32eforth.s:1921   .text.reset_handler:0000000000000de8 $t
       stm32eforth.s:1940   .text.reset_handler:0000000000000e0d $d
       stm32eforth.s:1940   .text.reset_handler:0000000000000e0e $t
       stm32eforth.s:1978   .text.reset_handler:0000000000000e55 $d
       stm32eforth.s:1978   .text.reset_handler:0000000000000e56 $t
       stm32eforth.s:2017   .text.reset_handler:0000000000000e9f $d
       stm32eforth.s:2017   .text.reset_handler:0000000000000ea0 $t
       stm32eforth.s:2041   .text.reset_handler:0000000000000ecf $d
       stm32eforth.s:2041   .text.reset_handler:0000000000000ed0 $t
       stm32eforth.s:2064   .text.reset_handler:0000000000000efb $d
       stm32eforth.s:2064   .text.reset_handler:0000000000000efc $t
       stm32eforth.s:2133   .text.reset_handler:0000000000000fb7 $d
       stm32eforth.s:2133   .text.reset_handler:0000000000000fb8 $t
       stm32eforth.s:2147   .text.reset_handler:0000000000000fd5 $d
       stm32eforth.s:2147   .text.reset_handler:0000000000000fd6 $t
       stm32eforth.s:2180   .text.reset_handler:0000000000001023 $d
       stm32eforth.s:2180   .text.reset_handler:0000000000001024 $t
       stm32eforth.s:2198   .text.reset_handler:0000000000001047 $d
       stm32eforth.s:2198   .text.reset_handler:0000000000001048 $t
       stm32eforth.s:2216   .text.reset_handler:000000000000106f $d
       stm32eforth.s:2216   .text.reset_handler:0000000000001070 $t
       stm32eforth.s:2285   .text.reset_handler:0000000000001107 $d
       stm32eforth.s:2285   .text.reset_handler:0000000000001108 $t
       stm32eforth.s:2447   .text.reset_handler:00000000000012fb $d
       stm32eforth.s:2447   .text.reset_handler:00000000000012fc $t
       stm32eforth.s:2468   .text.reset_handler:000000000000132d $d
       stm32eforth.s:2468   .text.reset_handler:000000000000132e $t
       stm32eforth.s:2489   .text.reset_handler:000000000000135d $d
       stm32eforth.s:2489   .text.reset_handler:000000000000135e $t
       stm32eforth.s:2568   .text.reset_handler:00000000000013e7 $d
       stm32eforth.s:2568   .text.reset_handler:00000000000013e8 $t
       stm32eforth.s:2606   .text.reset_handler:0000000000001447 $d
       stm32eforth.s:2606   .text.reset_handler:0000000000001448 $t
       stm32eforth.s:2776   .text.reset_handler:000000000000162b $d
       stm32eforth.s:2776   .text.reset_handler:000000000000162c $t
       stm32eforth.s:2821   .text.reset_handler:000000000000168d $d
ARM GAS  stm32eforth.s 			page 113


       stm32eforth.s:2821   .text.reset_handler:000000000000168e $t
       stm32eforth.s:2836   .text.reset_handler:00000000000016b1 $d
       stm32eforth.s:2836   .text.reset_handler:00000000000016b2 $t
       stm32eforth.s:3091   .text.reset_handler:000000000000192f $d
       stm32eforth.s:3091   .text.reset_handler:0000000000001930 $t
       stm32eforth.s:3264   .text.reset_handler:0000000000001ae7 $d
       stm32eforth.s:3264   .text.reset_handler:0000000000001ae8 $t
       stm32eforth.s:3272   .text.reset_handler:0000000000001b03 $d
       stm32eforth.s:3272   .text.reset_handler:0000000000001b04 $t
       stm32eforth.s:3281   .text.reset_handler:0000000000001b11 $d
       stm32eforth.s:3281   .text.reset_handler:0000000000001b12 $t
       stm32eforth.s:3305   .text.reset_handler:0000000000001b53 $d
       stm32eforth.s:3305   .text.reset_handler:0000000000001b54 $t
       stm32eforth.s:3319   .text.reset_handler:0000000000001b67 $d
       stm32eforth.s:3319   .text.reset_handler:0000000000001b68 $t
       stm32eforth.s:3341   .text.reset_handler:0000000000001b93 $d
       stm32eforth.s:3341   .text.reset_handler:0000000000001b94 $t
       stm32eforth.s:3389   .text.reset_handler:0000000000001be5 $d
       stm32eforth.s:3389   .text.reset_handler:0000000000001be6 $t
       stm32eforth.s:3447   .text.reset_handler:0000000000001c7f $d
       stm32eforth.s:3447   .text.reset_handler:0000000000001c80 $t
       stm32eforth.s:3474   .text.reset_handler:0000000000001cd5 $d
       stm32eforth.s:3474   .text.reset_handler:0000000000001cd6 $t
       stm32eforth.s:3498   .text.reset_handler:0000000000001d1d $d
       stm32eforth.s:3498   .text.reset_handler:0000000000001d1e $t
       stm32eforth.s:3514   .text.reset_handler:0000000000001d4d $d
       stm32eforth.s:3514   .text.reset_handler:0000000000001d4e $t
       stm32eforth.s:3599   .text.reset_handler:0000000000001e4f $d
       stm32eforth.s:3599   .text.reset_handler:0000000000001e50 $t
       stm32eforth.s:3610   .text.reset_handler:0000000000001e65 $d
       stm32eforth.s:3610   .text.reset_handler:0000000000001e66 $t
       stm32eforth.s:3642   .text.reset_handler:0000000000001ec1 $d
       stm32eforth.s:3642   .text.reset_handler:0000000000001ec2 $t
       stm32eforth.s:3692   .text.reset_handler:0000000000001f57 $d
       stm32eforth.s:3692   .text.reset_handler:0000000000001f58 $t
       stm32eforth.s:3873   .text.reset_handler:0000000000002105 $d
       stm32eforth.s:3873   .text.reset_handler:0000000000002106 $t
       stm32eforth.s:3915   .text.reset_handler:0000000000002163 $d
       stm32eforth.s:3915   .text.reset_handler:0000000000002164 $t
       stm32eforth.s:3951   .text.reset_handler:00000000000021c3 $d
       stm32eforth.s:3951   .text.reset_handler:00000000000021c4 $t
       stm32eforth.s:3966   .text.reset_handler:00000000000021e5 $d
       stm32eforth.s:3966   .text.reset_handler:00000000000021e6 $t
       stm32eforth.s:3995   .text.reset_handler:0000000000002225 $d
       stm32eforth.s:3995   .text.reset_handler:0000000000002226 $t
       stm32eforth.s:4022   .text.reset_handler:0000000000002263 $d
       stm32eforth.s:4022   .text.reset_handler:0000000000002264 $t
       stm32eforth.s:4036   .text.reset_handler:000000000000227f $d
       stm32eforth.s:4036   .text.reset_handler:0000000000002280 $t
       stm32eforth.s:4050   .text.reset_handler:000000000000229b $d
       stm32eforth.s:4050   .text.reset_handler:000000000000229c $t
       stm32eforth.s:4285   .text.reset_handler:00000000000024ed $d
       stm32eforth.s:4285   .text.reset_handler:00000000000024ee $t
       stm32eforth.s:4306   .text.reset_handler:000000000000252b $d
       stm32eforth.s:4306   .text.reset_handler:000000000000252c $t
       stm32eforth.s:4326   .text.reset_handler:0000000000002565 $d
       stm32eforth.s:4326   .text.reset_handler:0000000000002566 $t
ARM GAS  stm32eforth.s 			page 114


       stm32eforth.s:4372   .text.reset_handler:00000000000025cd $d
       stm32eforth.s:4372   .text.reset_handler:00000000000025ce $t
       stm32eforth.s:4412   .text.reset_handler:0000000000002643 $d
       stm32eforth.s:4412   .text.reset_handler:0000000000002644 $t
       stm32eforth.s:4613   .text.reset_handler:000000000000276b $d
       stm32eforth.s:4613   .text.reset_handler:000000000000276c $t

UNDEFINED SYMBOLS
_mstack
