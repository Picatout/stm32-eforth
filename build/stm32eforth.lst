ARM GAS  stm32eforth.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  stm32eforth.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.p2align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.p2aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m3
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
ARM GAS  stm32eforth.s 			page 3


  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
ARM GAS  stm32eforth.s 			page 4


  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
  81              	
  82              	/* blue pill specific constants */ 
  83              	  .equ LED_GPIO, GPIOC_BASE_ADR
  84              	  .equ LED_PIN, 13
  85              	  .equ UART, USART1_BASE_ADR 
  86              	
  87              	/* eForth specific constants */
  88              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  89              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  90              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  91              	.equ UPP ,	0x20000000	/*start of user area (UP0) */
  92              	.equ DTOP ,	0x20000100	/*start of usable RAM area (HERE) */
  93              	.equ DEND , 0x20004E00  /*usable RAM end */
  94              	
  95              	/*************************************
  96              	   system variables offset from UPP
  97              	*************************************/
  98              	  .equ TICKS_OFS, 4  // millseconds counter
  99              	  .equ TIMER_OFS, 8  // count down timer
 100              	  .equ BOOT_OFS, 12  // boot program address
 101              	  .equ BASE_OFS, 16  // numeric conversion base 
 102              	  .equ TMP_OFS, 20   // temporary variable
 103              	  .equ SPAN_OFS, 24  // character count received by expect  
 104              	  .equ TOIN_OFS, 28  // >IN  parse pointer in TIB
 105              	  .equ NTIB_OFS, 32  // #TIB  characters in TIB 
ARM GAS  stm32eforth.s 			page 5


 106              	  .equ TIB_OFS, 36   // TIB buffer address 
 107              	  .equ EVAL_OFS, 40  // eval|compile vector 
 108              	  .equ HLD_OFS, 44   // hold pointer 
 109              	  .equ CTXT_OFS, 48  // context pointer 
 110              	  .equ FLSH_CTOP_OFS, 52  // flash free dictionary address 
 111              	  .equ RAM_CTOP_OFS, 56  // ram free dictionary address
 112              	  .equ LASTN_OFS, 60     // last word in dictionary link nfa 
 113              	
 114              	
 115              	
 116              	
 117              	/***********************************************
 118              	* MACROS
 119              	*	Assemble inline direct threaded code ending.
 120              	***********************************************/
 121              	 	.macro	_NEXT /*end low level word */
 122              		BX	LR
 123              		.endm
 124              	
 125              	 	.macro	_NEST /*start high level word */
 126              		STMFD	R2!,{LR}
 127              		.endm
 128              	
 129              	 	.macro	_UNNEST	/*end high level word */
 130              		LDMFD	R2!,{PC}
 131              		.endm
 132              	
 133              	 	.macro	_DOLIT /*long literals */
 134              		BL	DOLIT
 135              		.endm
 136              	
 137              	 	.macro	_PUSH	/*push R5 on data stack*/
 138              		STR	R5,[R1,#-4]!
 139              		.endm
 140              	
 141              	 	.macro	_POP /*pop data stack to R5 */
 142              		LDR	R5,[R1],#4
 143              		.endm
 144              	
 145              	/*************************************
 146              	*   interrupt service vectors table 
 147              	**************************************/
 148              	   .section  .isr_vector,"a",%progbits
 149              	  .type  isr_vectors, %object
 150              	
 151              	isr_vectors:
 152 0000 00000000 	  .word   _mstack          /* main return stack address */
 153 0004 00000000 	  .word   reset_handler    /* startup address */
 154              	/* core interrupts || exceptions */
 155 0008 00000000 	  .word   default_handler  /*  NMI */
 156 000c 00000000 	  .word   default_handler  /*  HardFault */
 157 0010 00000000 	  .word   default_handler  /*  Memory Management */
 158 0014 00000000 	  .word   default_handler  /* Bus fault */
 159 0018 00000000 	  .word   default_handler  /* Usage fault */
 160 001c 00000000 	  .word   0
 161 0020 00000000 	  .word   0
 162 0024 00000000 	  .word   0
ARM GAS  stm32eforth.s 			page 6


 163 0028 00000000 	  .word   0
 164 002c 00000000 	  .word   default_handler  /* SWI instruction */
 165 0030 00000000 	  .word   default_handler  /* Debug monitor */
 166 0034 00000000 	  .word   0
 167 0038 00000000 	  .word   default_handler  /* PendSV */
 168 003c 00000000 	  .word   systick_handler  /* Systick */
 169              	  
 170              	  /* External Interrupts */
 171 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 172 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 173 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 174 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 175 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 176 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 177 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 178 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 179 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 180 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 181 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 182 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 183 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 184 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 185 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 186 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 187 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 188 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 189 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 190 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 191 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 192 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 193 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 194 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 195 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 196 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 197 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 198 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 199 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 200 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 201 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 202 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 203 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 204 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 205 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 206 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 207 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 208 00d4 00000000 	  .word      default_handler /* IRQ37, USART1 */                   
 209 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 210 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 211 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 212 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 213 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 214 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 215 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 216 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 217 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 218 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 219 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
ARM GAS  stm32eforth.s 			page 7


 220 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 221 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 222 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 223 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 224 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 225 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 226 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 227 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 228 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 229 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 230 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 231              	
 232              	  .size  isr_vectors, .-isr_vectors
 233              	
 234              	/*****************************************************
 235              	* default isr handler called on unexpected interrupt
 236              	*****************************************************/
 237              	    .section  .text.default_handler,"ax",%progbits
 238              	
 239              	  .type default_handler, %function
 240              	  .p2align 2 
 241              	  .global default_handler
 242              	default_handler:
 243 0000 00F00FF9 		_DOLIT 
 244 0004 FFFFFFFF 		.word -1
 245 0008 FFF7FEFF 		BL ULED 
 246 000c 00F0ACFF 		BL	CR	// new line
 247 0010 00F0E4FF 		BL	DOTQP
 248 0014 10       		.byte	16
 249 0015 20657863 		.ascii " exception halt!"	
 249      65707469 
 249      6F6E2068 
 249      616C7421 
 250 0025 0000BF   		.p2align 2 
 251 0028 00F0A6B8 		b REBOOT   
 252              	  .size  default_handler, .-default_handler
 253              	
 254              	
 255              	
 256              	/*********************************
 257              		system milliseconds counter
 258              	*********************************/	
 259              	  .type systick_handler, %function
 260              	  .p2align 2 
 261              	  .global systick_handler
 262              	systick_handler:
 263 002c 4FF00003 	  mov r3,#UPP&0xffff
 264 0030 C2F20003 	  movt r3,#UPP>>16  	
 265 0034 5868     	  ldr r0,[r3,#TICKS_OFS]  
 266 0036 00F10100 	  add r0,#1
 267 003a 5860     	  str r0,[r3,#TICKS_OFS]
 268 003c 9868     	  ldr r0,[r3,#TIMER_OFS]
 269 003e 10B1     	  cbz r0, systick_exit
 270 0040 A0F10100 	  sub r0,#1
 271 0044 9860     	  str r0,[r3,#TIMER_OFS]
 272              	systick_exit:
 273 0046 7047     	  bx lr
ARM GAS  stm32eforth.s 			page 8


 274              	
 275              	
 276              	/**************************************
 277              	  reset_handler execute at MCU reset
 278              	***************************************/
 279              	    .section  .text.reset_handler
 280              	  .type  reset_handler, %function
 281              	  .p2align 2 
 282              	  .global reset_handler
 283              	reset_handler:
 284              	/* zero RAM */
 285 0000 4FF00000 		mov r0,#0
 286 0004 C2F20000 		movt r0,#0x2000
 287 0008 81EA0101 		eor r1,r1,r1 // r1=0
 288 000c 4FF4A042 		mov r2,#0x5000 // RAM size 
 289 0010 02EB0003 		add r3,r2,r0 
 290              	zero_loop:
 291 0014 40F8041B 		str r1,[r0],#4
 292 0018 043A     		subs r2,#4
 293 001a FBD1     		bne zero_loop		
 294 001c 00F006F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 295 0020 01F0B8FB 		bl	UNLOCK			/* unlock flash memory */
 296 0024 02F0B2F8 		bl COLD 
 297 0028 FFF7FEBF 		b reset_handler 
 298              	
 299              	  .type init_devices, %function
 300              	  .p2align 2 
 301              	init_devices:
 302              	/* init clock to HSE 72 Mhz */
 303              	/* set 2 wait states in FLASH_ACR_LATENCY */
 304 002c 4FF40050 		mov r0,#FLASH_BASE_ADR&0xffff
 305 0030 C4F20200 		movt r0,#FLASH_BASE_ADR>>16 
 306 0034 4FF01202 	  mov r2,#0x12
 307 0038 0260     	  str r2,[r0,#FLASH_ACR]
 308              	/* configure clock for HSE, 8 Mhz crystal */
 309              	/* enable HSE in RCC_CR */
 310 003a 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 311 003e C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 312 0042 0168     	  ldr r1,[r0,#RCC_CR]
 313 0044 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 314 0048 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 315              	/* wait HSERDY loop */
 316              	wait_hserdy:
 317 004a 0168     	  ldr r1,[r0,#RCC_CR]
 318 004c 11F4003F 	  tst r1,#(1<<17)
 319 0050 FBD0     	  beq wait_hserdy
 320              	
 321              	/************************************************* 
 322              	   configure PLL mul factor and source 
 323              	   SYSCLOCK=72 Mhz
 324              	   select HSE as  PLL source clock
 325              	   multiply frequency by 9 
 326              	   APB1 clock is limited to 36 Mhz so divide by 2 
 327              	****************************************************/
 328 0052 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 329 0056 C0F21D01 	  movt r1,#(7<<2)|1
 330 005a 4160     	  str r1,[r0,#RCC_CFGR]
ARM GAS  stm32eforth.s 			page 9


 331              	  /* enable PLL */
 332 005c 0168     	  ldr r1,[r0,#RCC_CR]
 333 005e 41F08071 	  orr r1, #1<<24 
 334 0062 0160     	  str r1,[r0,#RCC_CR]
 335              	/* wait for PLLRDY */
 336              	wait_pllrdy:
 337 0064 0168     	  ldr r1,[r0,#RCC_CR]
 338 0066 11F0007F 	  tst r1,#(1<<25)
 339 006a FBD0     	  beq wait_pllrdy 
 340              	/* select PLL as sysclock */
 341 006c 4168     	  ldr r1,[r0,#RCC_CFGR]
 342 006e 4FF6FC72 	  mov r2,#0xfffc
 343 0072 CFF6FF72 	  movt r2,#0xffff
 344 0076 01EA0201 	  and r1,r1,r2 
 345 007a 4FF00202 	  mov r2,#2
 346 007e 41EA0201 	  orr r1,r1,r2
 347 0082 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 348              	/* wait for SWS==2 */
 349              	wait_sws:
 350 0084 4168     	  ldr r1,[r0,#RCC_CFGR]
 351 0086 11F0080F 	  tst r1,#(2<<2)
 352 008a FBD0     	  beq wait_sws
 353              	/* now sysclock is 72 Mhz */
 354              	
 355              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 356 008c 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 357 0090 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 358 0094 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 359 0098 8161     	  str	r1, [r0, #RCC_APB2ENR]
 360              	
 361              	/* configure GPIOC:13 as output for user LED */
 362 009a 4FF48050 	  mov r0,#GPIOC_BASE_ADR&0xffff
 363 009e C4F20100 	  movt r0,#GPIOC_BASE_ADR>>16
 364 00a2 4168     	  ldr r1,[r0,#GPIO_CRH]
 365 00a4 6FF47002 	  mvn r2,#(15<<20)
 366 00a8 01EA0201 	  and r1,r1,r2
 367 00ac 4FF4C002 	  mov r2,#(6<<20)
 368 00b0 41EA0201 	  orr r1,r1,r2
 369 00b4 4160     	  str r1,[r0,#GPIO_CRH]
 370              	
 371              	/* configure USART1 */
 372              	/* set GPIOA PIN 9, uart TX  */
 373 00b6 4FF40060 	  mov r0,#GPIOA_BASE_ADR&0XFFFF
 374 00ba C4F20100 	  movt r0,#GPIOA_BASE_ADR>>16	
 375 00be 4168     	  ldr r1,[r0,#GPIO_CRH]
 376 00c0 6FF0F002 	  mvn r2,#(15<<4)
 377 00c4 01EA0201 	  and r1,r1,r2
 378 00c8 4FF0A002 	  mov r2,#(0xA<<4)
 379 00cc 41EA0201 	  orr r1,r1,r2 
 380 00d0 4160     	  str r1,[r0,#GPIO_CRH]
 381              	
 382 00d2 4FF46050 	  mov r0,#UART&0xFFFF
 383 00d6 C4F20100 	  movt r0,#UART>>16	
 384              	/* BAUD rate */
 385 00da 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 386 00de 8160     	  str r1,[r0,#USART_BRR]
 387 00e0 42F20C01 	  mov r1,#(3<<2)+(1<<13)
ARM GAS  stm32eforth.s 			page 10


 388 00e4 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 389              	/* configure systicks for 1msec ticks */
 390 00e6 4EF21000 	  mov r0,#STK_BASE_ADR&0xFFFF
 391 00ea CEF20000 	  movt r0,#STK_BASE_ADR>>16	
 392 00ee 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 393 00f2 4160     	  str r1,[r0,#STK_LOAD]
 394 00f4 4FF00301 	  mov r1,#3
 395 00f8 0160     	  str r1,[r0,STK_CTL]
 396 00fa 7047     	  _NEXT  
 397              	
 398              	
 399              	/********************
 400              	* Version control
 401              	*******************/
 402              	.equ VER ,	0x01	/*major release version */
 403              	.equ EXT ,	0x00	/*minor extension */
 404              	
 405              	/* Constants */
 406              	
 407              	// .equ RAMOFFSET ,	0x20000000	;remap
 408              	// .equ MAPOFFSET ,	0x08000000	;remap
 409              	.equ RAMOFFSET  ,	0x00000000	/* absolute */
 410              	.equ MAPOFFSET  ,	0x00000000	/* absolute */
 411              	
 412              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 413              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 414              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 415              	
 416              	.equ CELLL ,	4	/*size of a cell */
 417              	.equ BASEE ,	16	/*default radix */
 418              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 419              	
 420              	.equ BKSPP ,	8	/*backspace */
 421              	.equ LF ,	10	  /*line feed */
 422              	.equ CRR ,	13	/*carriage return */
 423              	.equ ERR ,	27	/*error escape */
 424              	.equ TIC ,	39	/*tick */
 425              	
 426              	/********************************************************
 427              	* RAM memory mapping
 428              	* 	0x20000000	RAM base address
 429              	*	0x20000000  system variables	
 430              	* 	0x20000100	Forth dictionary
 431              	* 	0x2000????	top of dictionary, HERE
 432              	* 	0x2000????	WORD buffer, HERE+16
 433              	*   0x20004E00  end of user space
 434              	* 	0x20004E80	top of data stack  R2
 435              	* 	0x20004E80	TIB terminal input buffer
 436              	* 	0x20004F80	top of return stack  R1
 437              	* 	0x20005000	top of hardware stack for interrupts R14
 438              	********************************************************/
 439              	
 440              	
 441              	/******************************************************
 442              	*  COLD start moves the following to USER variables.
 443              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 444              	******************************************************/
ARM GAS  stm32eforth.s 			page 11


 445              		.p2align 2   	
 446              	  
 447              	UZERO:
 448 00fc 00000000 		.word 0  			/*Reserved */
 449 0100 00000000 		.word 0      /* system Ticks */
 450 0104 00000000 	    .word 0     /* delay timer */
 451 0108 18210000 		.word HI  	/*'BOOT */
 452 010c 10000000 		.word BASEE 	/*BASE */
 453 0110 00000000 		.word 0			/*tmp */
 454 0114 00000000 		.word 0			/*SPAN */
 455 0118 00000000 		.word 0			/*>IN */
 456 011c 00000000 		.word 0			/*#TIB */
 457 0120 804E0020 		.word TIBB	/*TIB */
 458 0124 38160000 		.word INTER	/*'EVAL */
 459 0128 00000000 		.word 0			/*HLD */
 460 012c 84210000 		.word LASTN	/*CONTEXT */
 461 0130 E2210000 		.word CTOP	/*FLASH */
 462 0134 00010020 		.word DTOP	/* start adress of RAM dictionary RAM */
 463 0138 84210000 		.word LASTN	/*LAST */
 464 013c 00000000 	  .word 0,0			/*reserved */
 464      00000000 
 465              	ULAST:
 466              	
 467              	 
 468              	
 469              	/***********************************
 470              	//  Start of Forth dictionary
 471              	***********************************/
 472              	
 473              		.p2align 2 
 474              	
 475              	// REBOOT ( -- )
 476              	// system reset 
 477 0144 00000000 		.word 0
 478              	_REBOOT:
 479 0148 06       		.byte 6
 480 0149 5245424F 		.ascii "REBOOT"
 480      4F54
 481 014f 00       		.p2align 2 
 482              	REBOOT:
 483 0150 4FF46D40 		mov r0,#SCB_BASE_ADR&0xffff
 484 0154 CEF20000 		movt r0,#SCB_BASE_ADR>>16
 485 0158 C168     		ldr r1,[r0,#SCB_AIRCR]
 486 015a C0F2FA51 		movt r1,#SCB_VECTKEY 
 487 015e 41F00401 		orr r1,#(1<<2)
 488 0162 C160     		str r1,[r0,#SCB_AIRCR]
 489 0164 7047     		_NEXT 
 490              	
 491              	// PAUSE ( u -- ) 
 492              	// suspend execution for u milliseconds
 493 0166 48010000 		.word _REBOOT 
 494 016a 05       	_PAUSE: .byte 5
 495 016b 50415553 		.ascii "PAUSE"
 495      45
 496              		.p2align 2
 497              	PAUSE:
 498 0170 42F804ED 		_NEST 
ARM GAS  stm32eforth.s 			page 12


 499 0174 00F0B6FA 		BL TIMER 
 500 0178 00F092F8 		BL STORE 
 501              	PAUSE_LOOP:
 502 017c 00F0B2FA 		BL TIMER 
 503 0180 00F098F8 		BL AT 
 504 0184 00F070F8 		BL QBRAN 
 505 0188 94010000 		.word PAUSE_EXIT 
 506 018c 00F078F8 		BL BRAN 
 507 0190 7C010000 		.word PAUSE_LOOP 
 508              	PAUSE_EXIT: 		
 509 0194 52F804FB 		_UNNEST 
 510              	
 511              	//  ULED ( T|F -- )
 512              	// control user LED, -1 ON, 0 OFF  
 513 0198 6A010000 		.word _PAUSE 
 514 019c 04       	_ULED: .byte 4
 515 019d 554C4544 		.ascii "ULED"
 516 01a1 0000BF   		.p2align 2
 517              		.type ULED, %function 
 518              	ULED:
 519 01a4 4FF40056 		mov r6,#(1<<LED_PIN)
 520 01a8 4FF48054 		mov r4,#LED_GPIO&0xffff
 521 01ac C4F20104 		movt r4,#LED_GPIO>>16
 522 01b0 2800     		movs r0,r5 
 523 01b2 51F8045B 		_POP
 524 01b6 01D0     		beq ULED_OFF 
 525 01b8 6661     		str r6,[r4,#GPIO_BRR]
 526 01ba 7047     		_NEXT 
 527              	ULED_OFF:
 528 01bc 2661     		str r6,[r4,#GPIO_BSRR]
 529 01be 7047     		_NEXT 
 530              		
 531              	//    ?RX	 ( -- c T | F )
 532              	// 	Return input character and true, or a false if no input.
 533 01c0 9C010000 		.word	_ULED-MAPOFFSET
 534 01c4 04       	_QRX:	.byte   4
 535 01c5 3F4B4559 		.ascii "?KEY"
 536 01c9 0000BF   		.p2align 2 
 537              	QKEY:
 538              	QRX: 
 539 01cc 41F8045D 		_PUSH
 540 01d0 4FF46054 		mov r4,#UART&0xFFFF
 541 01d4 C4F20104 		movt r4,#UART>>16
 542 01d8 2688     		ldrh	r6, [r4, #USART_SR]
 543 01da 16F02006 		ands	r6, #0x20		//  RXE
 544 01de 05D0     		BEQ	QRX1
 545 01e0 6568     	 	LDR	R5, [R4, #USART_DR]
 546 01e2 41F8045D 		_PUSH
 547 01e6 18BF     	    IT NE 
 548 01e8 6FF00005 		MVNNE	R5,#0
 549              	QRX1:
 550 01ec 08BF     		IT EQ 
 551 01ee 0025     	    MOVEQ	R5,#0
 552 01f0 7047     		_NEXT
 553 01f2 00BF     		.p2align 2 
 554              	
 555              	//    TX!	 ( c -- )
ARM GAS  stm32eforth.s 			page 13


 556              	// 	Send character c to the output device.
 557              	
 558 01f4 C4010000 		.word	_QRX-MAPOFFSET
 559 01f8 04       	_TXSTO:	.byte 4
 560 01f9 454D4954 		.ascii "EMIT"
 561 01fd 0000BF   		.p2align 2 	
 562              	TXSTO:
 563              	EMIT:
 564              	TECHO:
 565 0200 4FF46054 		mov r4,#UART&0xFFFF
 566 0204 C4F20104 		movt r4,#UART>>16
 567              	TX1:
 568 0208 2688     		ldrh	r6, [r4, #USART_SR]	
 569 020a 16F08006 		ands	r6, #0x80		//  TXE bit 
 570 020e FBD0     		beq	TX1
 571 0210 A580     		strh	r5, [r4, #USART_DR]	
 572 0212 51F8045B 		_POP
 573 0216 7047     		_NEXT
 574              	
 575              	
 576              		
 577              	// **************************************************************************
 578              	//  The kernel
 579              	
 580              	//    NOP	( -- )
 581              	// 	do nothing.
 582              	
 583 0218 F8010000 		.word	_TXSTO-MAPOFFSET
 584 021c 03       	_NOP:	.byte   3
 585 021d 4E4F50   		.ascii "NOP"
 586              		.p2align 2 	
 587              	NOP:
 588 0220 7047     		_NEXT
 589              	 
 590              	
 591              	//    doLIT	( -- w )
 592              	// 	Push an inline literal.
 593              	
 594              	// 	.word	_NOP-MAPOFFSET
 595              	// _LIT	.byte   COMPO+5
 596              	// 	.ascii "doLIT"
 597              	// 	.p2align 2 	
 598              	DOLIT:
 599 0222 41F8045D 		_PUSH				//  store R5 on data stack
 600 0226 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 601 022a 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 602 022e 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 603 0232 7047     		_NEXT
 604              	
 605              	//    EXECUTE	( ca -- )
 606              	// 	Execute the word at ca.
 607              	
 608 0234 1C020000 		.word	_NOP-MAPOFFSET
 609 0238 07       	_EXECU:	.byte   7
 610 0239 45584543 		.ascii "EXECUTE"
 610      555445
 611              		.p2align 2 	
ARM GAS  stm32eforth.s 			page 14


 612              	EXECU:
 613 0240 45F00104 		ORR	R4,R5,#1		//  b0=1 
 614 0244 51F8045B 		_POP
 615 0248 2047     		BX	R4
 616              	
 617              	//    next	( -- ) counter on R:
 618              	// 	Run time code for the single index loop.
 619              	// 	: next ( -- ) \ hilevel model
 620              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 621              	
 622              	// 	.word	_EXECU-MAPOFFSET
 623              	// _DONXT	.byte   COMPO+4
 624              	// 	.ascii "next"
 625              	// 	.p2align 2 	
 626              	DONXT:
 627 024a 1468     		LDR	R4,[R2]   // ( -- u )  
 628 024c 24B9     		CBNZ R4,NEXT1 
 629              		/* loop done */
 630 024e 02F10402 		ADD	R2,R2,#4 // drop counter 
 631 0252 0EF1040E 		ADD	LR,LR,#4 // skip after loop address 
 632 0256 7047     		_NEXT
 633              	NEXT1:
 634              		/* decrement loop counter */
 635 0258 A4F10104 		SUB	R4,R4,#1
 636 025c 1460     		STR	R4,[R2]
 637 025e 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 638 0262 4EF0010E 		ORR	LR,LR,#1 // begining of loop
 639 0266 7047     		_NEXT
 640              	
 641              	//    ?branch	( f -- )
 642              	// 	Branch if flag is zero.
 643              	
 644              	// 	.word	_DONXT-MAPOFFSET
 645              	// _QBRAN	.byte   COMPO+7
 646              	// 	.ascii "?branch"
 647              	// 	.p2align 2 	
 648              	QBRAN:
 649 0268 2C00     		MOVS	R4,R5
 650 026a 51F8045B 		_POP
 651 026e 04D1     		BNE	QBRAN1
 652 0270 5EF801EC 		LDR	LR,[LR,#-1]
 653 0274 4EF0010E 		ORR LR,LR,#1
 654 0278 7047     		_NEXT
 655              	QBRAN1:
 656 027a 0EF1040E 	 	ADD	LR,LR,#4
 657 027e 7047     		_NEXT
 658              	
 659              	//    branch	( -- )
 660              	// 	Branch to an inline address.
 661              	
 662              	// 	.word	_QBRAN-MAPOFFSET
 663              	// _BRAN	.byte   COMPO+6
 664              	// 	.ascii "branch"
 665              	// 	.p2align 2 	
 666              	BRAN:
 667 0280 5EF801EC 		LDR	LR,[LR,#-1]
 668 0284 4EF0010E 		ORR	LR,LR,#1
ARM GAS  stm32eforth.s 			page 15


 669 0288 7047     		_NEXT
 670              	
 671              	//    EXIT	(  -- )
 672              	// 	Exit the currently executing command.
 673              	
 674 028a 38020000 		.word	_EXECU-MAPOFFSET
 675 028e 04       	_EXIT:	.byte   4
 676 028f 45584954 		.ascii "EXIT"
 677 0293 00       		.p2align 2 	
 678              	EXIT:
 679 0294 52F804FB 		_UNNEST
 680              	
 681              	//    !	   ( w a -- )
 682              	// 	Pop the data stack to memory.
 683              	
 684 0298 8E020000 		.word	_EXIT-MAPOFFSET
 685 029c 01       	_STORE:	.byte   1
 686 029d 21       		.ascii "!"
 687 029e 00BF     		.p2align 2 	
 688              	STORE:
 689 02a0 51F8044B 		LDR	R4,[R1],#4
 690 02a4 2C60     		STR	R4,[R5]
 691 02a6 51F8045B 		_POP
 692 02aa 7047     		_NEXT
 693              	
 694              	//    @	   ( a -- w )
 695              	// 	Push memory location to the data stack.
 696              	
 697 02ac 9C020000 		.word	_STORE-MAPOFFSET
 698 02b0 01       	_AT:	.byte   1
 699 02b1 40       		.ascii "@"
 700 02b2 00BF     		.p2align 2 	
 701              	AT:
 702 02b4 2D68     		LDR	R5,[R5]
 703 02b6 7047     		_NEXT
 704              	
 705              	//    C!	  ( c b -- )
 706              	// 	Pop the data stack to byte memory.
 707              	
 708 02b8 B0020000 		.word	_AT-MAPOFFSET
 709 02bc 02       	_CSTOR:	.byte   2
 710 02bd 4321     		.ascii "C!"
 711 02bf 00       		.p2align 2 	
 712              	CSTOR:
 713 02c0 51F8044B 		LDR	R4,[R1],#4
 714 02c4 2C70     		STRB	R4,[R5]
 715 02c6 51F8045B 		_POP
 716 02ca 7047     		_NEXT
 717              	
 718              	//    C@	  ( b -- c )
 719              	// 	Push byte memory location to the data stack.
 720              	
 721 02cc BC020000 		.word	_CSTOR-MAPOFFSET
 722 02d0 02       	_CAT:	.byte   2
 723 02d1 4340     		.ascii "C@"
 724 02d3 00       		.p2align 2 	
 725              	CAT:
ARM GAS  stm32eforth.s 			page 16


 726 02d4 2D78     		LDRB	R5,[R5]
 727 02d6 7047     		_NEXT
 728              	
 729              	//    R>	  ( -- w )
 730              	// 	Pop the return stack to the data stack.
 731              	
 732 02d8 D0020000 		.word	_CAT-MAPOFFSET
 733 02dc 02       	_RFROM:	.byte   2
 734 02dd 523E     		.ascii "R>"
 735 02df 00       		.p2align 2 	
 736              	RFROM:
 737 02e0 41F8045D 		_PUSH
 738 02e4 52F8045B 		LDR	R5,[R2],#4
 739 02e8 7047     		_NEXT
 740              	
 741              	//    R@	  ( -- w )
 742              	// 	Copy top of return stack to the data stack.
 743              	
 744 02ea DC020000 		.word	_RFROM-MAPOFFSET
 745 02ee 02       	_RAT:	.byte   2
 746 02ef 5240     		.ascii "R@"
 747 02f1 0000BF   		.p2align 2 	
 748              	RAT:
 749 02f4 41F8045D 		_PUSH
 750 02f8 1568     		LDR	R5,[R2]
 751 02fa 7047     		_NEXT
 752              	
 753              	//    >R	  ( w -- )
 754              	// 	Push the data stack to the return stack.
 755              	
 756 02fc EE020000 		.word	_RAT-MAPOFFSET
 757 0300 42       	_TOR:	.byte   COMPO+2
 758 0301 3E52     		.ascii ">R"
 759 0303 00       		.p2align 2 	
 760              	TOR:
 761 0304 42F8045D 		STR	R5,[R2,#-4]!
 762 0308 51F8045B 		_POP
 763 030c 7047     		_NEXT
 764              	
 765              	//    SP@	 ( -- a )
 766              	// 	Push the current data stack pointer.
 767              	
 768 030e 00030000 		.word	_TOR-MAPOFFSET
 769 0312 03       	_SPAT:	.byte   3
 770 0313 535040   		.ascii "SP@"
 771 0316 00BF     		.p2align 2 	
 772              	SPAT:
 773 0318 41F8045D 		_PUSH
 774 031c 0D46     		MOV	R5,R1
 775 031e 7047     		_NEXT
 776              	
 777              	//    DROP	( w -- )
 778              	// 	Discard top stack item.
 779              	
 780 0320 12030000 		.word	_SPAT-MAPOFFSET
 781 0324 04       	_DROP:	.byte   4
 782 0325 44524F50 		.ascii "DROP"
ARM GAS  stm32eforth.s 			page 17


 783 0329 0000BF   		.p2align 2 	
 784              	DROP:
 785 032c 51F8045B 		_POP
 786 0330 7047     		_NEXT
 787              	
 788              	//    DUP	 ( w -- w w )
 789              	// 	Duplicate the top stack item.
 790              	
 791 0332 24030000 		.word	_DROP-MAPOFFSET
 792 0336 03       	_DUPP:	.byte   3
 793 0337 445550   		.ascii "DUP"
 794 033a 00BF     		.p2align 2 	
 795              	DUPP:
 796 033c 41F8045D 		_PUSH
 797 0340 7047     		_NEXT
 798              	
 799              	//    SWAP	( w1 w2 -- w2 w1 )
 800              	// 	Exchange top two stack items.
 801              	
 802 0342 36030000 		.word	_DUPP-MAPOFFSET
 803 0346 04       	_SWAP:	.byte   4
 804 0347 53574150 		.ascii "SWAP"
 805 034b 00       		.p2align 2 	
 806              	SWAP:
 807 034c 0C68     		LDR	R4,[R1]
 808 034e 0D60     		STR	R5,[R1]
 809 0350 2546     		MOV	R5,R4
 810 0352 7047     		_NEXT
 811              	
 812              	//    OVER	( w1 w2 -- w1 w2 w1 )
 813              	// 	Copy second stack item to top.
 814              	
 815 0354 46030000 		.word	_SWAP-MAPOFFSET
 816 0358 04       	_OVER:	.byte   4
 817 0359 4F564552 		.ascii "OVER"
 818 035d 0000BF   		.p2align 2 	
 819              	OVER:
 820 0360 41F8045D 		_PUSH
 821 0364 4D68     		LDR	R5,[R1,#4]
 822 0366 7047     		_NEXT
 823              	
 824              	//    0<	  ( n -- t )
 825              	// 	Return true if n is negative.
 826              	
 827 0368 58030000 		.word	_OVER-MAPOFFSET
 828 036c 02       	_ZLESS:	.byte   2
 829 036d 303C     		.ascii "0<"
 830 036f 00       		.p2align 2 	
 831              	ZLESS:
 832 0370 4FF00004 		MOV	R4,#0
 833 0374 04EB2505 		ADD	R5,R4,R5,ASR #32
 834 0378 7047     		_NEXT
 835              	
 836              	//    AND	 ( w w -- w )
 837              	// 	Bitwise AND.
 838              	
 839 037a 6C030000 		.word	_ZLESS-MAPOFFSET
ARM GAS  stm32eforth.s 			page 18


 840 037e 03       	_ANDD:	.byte   3
 841 037f 414E44   		.ascii "AND"
 842 0382 00BF     		.p2align 2 	
 843              	ANDD:
 844 0384 51F8044B 		LDR	R4,[R1],#4
 845 0388 05EA0405 		AND	R5,R5,R4
 846 038c 7047     		_NEXT
 847              	
 848              	//    OR	  ( w w -- w )
 849              	// 	Bitwise inclusive OR.
 850              	
 851 038e 7E030000 		.word	_ANDD-MAPOFFSET
 852 0392 02       	_ORR:	.byte   2
 853 0393 4F52     		.ascii "OR"
 854 0395 0000BF   		.p2align 2 	
 855              	ORR:
 856 0398 51F8044B 		LDR	R4,[R1],#4
 857 039c 45EA0405 		ORR	R5,R5,R4
 858 03a0 7047     		_NEXT
 859              	
 860              	//    XOR	 ( w w -- w )
 861              	// 	Bitwise exclusive OR.
 862              	
 863 03a2 92030000 		.word	_ORR-MAPOFFSET
 864 03a6 03       	_XORR:	.byte   3
 865 03a7 584F52   		.ascii "XOR"
 866 03aa 00BF     		.p2align 2 	
 867              	XORR:
 868 03ac 51F8044B 		LDR	R4,[R1],#4
 869 03b0 85EA0405 		EOR	R5,R5,R4
 870 03b4 7047     		_NEXT
 871              	
 872              	//    UM+	 ( w w -- w cy )
 873              	// 	Add two numbers, return the sum and carry flag.
 874              	
 875 03b6 A6030000 		.word	_XORR-MAPOFFSET
 876 03ba 03       	_UPLUS:	.byte   3
 877 03bb 554D2B   		.ascii "UM+"
 878 03be 00BF     		.p2align 2 	
 879              	UPLUS:
 880 03c0 0C68     		LDR	R4,[R1]
 881 03c2 6419     		ADDS	R4,R4,R5
 882 03c4 4FF00005 		MOV	R5,#0
 883 03c8 45F10005 		ADC	R5,R5,#0
 884 03cc 0C60     		STR	R4,[R1]
 885 03ce 7047     		_NEXT
 886              	
 887              	//    RSHIFT	 ( w # -- w )
 888              	// 	arithmetic Right shift # bits.
 889              	
 890 03d0 BA030000 		.word	_UPLUS-MAPOFFSET
 891 03d4 06       	_RSHIFT:	.byte   6
 892 03d5 52534849 		.ascii "RSHIFT"
 892      4654
 893 03db 00       		.p2align 2 	
 894              	RSHIFT:
 895 03dc 51F8044B 		LDR	R4,[R1],#4
ARM GAS  stm32eforth.s 			page 19


 896 03e0 44FA05F5 		MOV	R5,R4,ASR R5
 897 03e4 7047     		_NEXT
 898              	
 899              	//    LSHIFT	 ( w # -- w )
 900              	// 	Right shift # bits.
 901              	
 902 03e6 D4030000 		.word	_RSHIFT-MAPOFFSET
 903 03ea 06       	_LSHIFT:	.byte   6
 904 03eb 4C534849 		.ascii "LSHIFT"
 904      4654
 905 03f1 0000BF   		.p2align 2 	
 906              	LSHIFT:
 907 03f4 51F8044B 		LDR	R4,[R1],#4
 908 03f8 04FA05F5 		MOV	R5,R4,LSL R5
 909 03fc 7047     		_NEXT
 910              	
 911              	//    +	 ( w w -- w )
 912              	// 	Add.
 913              	
 914 03fe EA030000 		.word	_LSHIFT-MAPOFFSET
 915 0402 01       	_PLUS:	.byte   1
 916 0403 2B       		.ascii "+"
 917              		.p2align 2 	
 918              	PLUS:
 919 0404 51F8044B 		LDR	R4,[R1],#4
 920 0408 2544     		ADD	R5,R5,R4
 921 040a 7047     		_NEXT
 922              	
 923              	//    -	 ( w w -- w )
 924              	// 	Subtract.
 925              	
 926 040c 02040000 		.word	_PLUS-MAPOFFSET
 927 0410 01       	_SUBB:	.byte   1
 928 0411 2D       		.ascii "-"
 929 0412 00BF     		.p2align 2 	
 930              	SUBB:
 931 0414 51F8044B 		LDR	R4,[R1],#4
 932 0418 C5EB0405 		RSB	R5,R5,R4
 933 041c 7047     		_NEXT
 934              	
 935              	//    *	 ( w w -- w )
 936              	// 	Multiply.
 937              	
 938 041e 10040000 		.word	_SUBB-MAPOFFSET
 939 0422 01       	_STAR:	.byte   1
 940 0423 2A       		.ascii "*"
 941              		.p2align 2 	
 942              	STAR:
 943 0424 51F8044B 		LDR	R4,[R1],#4
 944 0428 04FB05F5 		MUL	R5,R4,R5
 945 042c 7047     		_NEXT
 946              	
 947              	//    UM*	 ( w w -- ud )
 948              	// 	Unsigned multiply.
 949              	
 950 042e 22040000 		.word	_STAR-MAPOFFSET
 951 0432 03       	_UMSTA:	.byte   3
ARM GAS  stm32eforth.s 			page 20


 952 0433 554D2A   		.ascii "UM*"
 953 0436 00BF     		.p2align 2 	
 954              	UMSTA:
 955 0438 0C68     		LDR	R4,[R1]
 956 043a A5FB0467 		UMULL	R6,R7,R5,R4
 957 043e 0E60     		STR	R6,[R1]
 958 0440 3D46     		MOV	R5,R7
 959 0442 7047     		_NEXT
 960              	
 961              	//    M*	 ( w w -- d )
 962              	// 	signed multiply.
 963              	
 964 0444 32040000 		.word	_UMSTA-MAPOFFSET
 965 0448 02       	_MSTAR:	.byte   2
 966 0449 4D2A     		.ascii "M*"
 967 044b 00       		.p2align 2 	
 968              	MSTAR:
 969 044c 0C68     		LDR	R4,[R1]
 970 044e 85FB0467 		SMULL	R6,R7,R5,R4
 971 0452 0E60     		STR	R6,[R1]
 972 0454 3D46     		MOV	R5,R7
 973 0456 7047     		_NEXT
 974              	
 975              	//    1+	 ( w -- w+1 )
 976              	// 	Add 1.
 977              	
 978 0458 48040000 		.word	_MSTAR-MAPOFFSET
 979 045c 02       	_ONEP:	.byte   2
 980 045d 312B     		.ascii "1+"
 981 045f 00       		.p2align 2 	
 982              	ONEP:
 983 0460 05F10105 		ADD	R5,R5,#1
 984 0464 7047     		_NEXT
 985              	
 986              	//    1-	 ( w -- w-1 )
 987              	// 	Subtract 1.
 988              	
 989 0466 5C040000 		.word	_ONEP-MAPOFFSET
 990 046a 02       	_ONEM:	.byte   2
 991 046b 312D     		.ascii "1-"
 992 046d 0000BF   		.p2align 2 	
 993              	ONEM:
 994 0470 A5F10105 		SUB	R5,R5,#1
 995 0474 7047     		_NEXT
 996              	
 997              	//    2+	 ( w -- w+2 )
 998              	// 	Add 1.
 999              	
 1000 0476 6A040000 		.word	_ONEM-MAPOFFSET
 1001 047a 02       	_TWOP:	.byte   2
 1002 047b 322B     		.ascii "2+"
 1003 047d 0000BF   		.p2align 2 	
 1004              	TWOP:
 1005 0480 05F10205 		ADD	R5,R5,#2
 1006 0484 7047     		_NEXT
 1007              	
 1008              	//    2-	 ( w -- w-2 )
ARM GAS  stm32eforth.s 			page 21


 1009              	// 	Subtract 2.
 1010              	
 1011 0486 7A040000 		.word	_TWOP-MAPOFFSET
 1012 048a 02       	_TWOM:	.byte   2
 1013 048b 322D     		.ascii "2-"
 1014 048d 0000BF   		.p2align 2 	
 1015              	TWOM:
 1016 0490 A5F10205 		SUB	R5,R5,#2
 1017 0494 7047     		_NEXT
 1018              	
 1019              	//    CELL+	( w -- w+4 )
 1020              	// 	Add CELLL.
 1021              	
 1022 0496 8A040000 		.word	_TWOM-MAPOFFSET
 1023 049a 05       	_CELLP:	.byte   5
 1024 049b 43454C4C 		.ascii "CELL+"
 1024      2B
 1025              		.p2align 2 	
 1026              	CELLP:
 1027 04a0 05F10405 		ADD	R5,R5,#CELLL
 1028 04a4 7047     		_NEXT
 1029              	
 1030              	//    CELL-	( w -- w-4 )
 1031              	// 	Subtract CELLL.
 1032              	
 1033 04a6 9A040000 		.word	_CELLP-MAPOFFSET
 1034 04aa 05       	_CELLM:	.byte   5
 1035 04ab 43454C4C 		.ascii "CELL-"
 1035      2D
 1036              		.p2align 2 	
 1037              	CELLM:
 1038 04b0 A5F10405 		SUB	R5,R5,#CELLL
 1039 04b4 7047     		_NEXT
 1040              	 
 1041              	//    BL	( -- 32 )
 1042              	// 	Blank (ASCII space).
 1043              	
 1044 04b6 AA040000 		.word	_CELLM-MAPOFFSET
 1045 04ba 02       	_BLANK:	.byte   2
 1046 04bb 424C     		.ascii "BL"
 1047 04bd 0000BF   		.p2align 2 	
 1048              	BLANK:
 1049 04c0 41F8045D 		_PUSH
 1050 04c4 4FF02005 		MOV	R5,#32
 1051 04c8 7047     		_NEXT
 1052              	
 1053              	//    CELLS	( w -- w*4 )
 1054              	// 	Multiply 4.
 1055              	
 1056 04ca BA040000 		.word	_BLANK-MAPOFFSET
 1057 04ce 05       	_CELLS:	.byte   5
 1058 04cf 43454C4C 		.ascii "CELLS"
 1058      53
 1059              		.p2align 2 	
 1060              	CELLS:
 1061 04d4 4FEA8505 		MOV	R5,R5,LSL#2
 1062 04d8 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 22


 1063              	
 1064              	//    CELL/	( w -- w/4 )
 1065              	// 	Divide by 4.
 1066              	
 1067 04da CE040000 		.word	_CELLS-MAPOFFSET
 1068 04de 05       	_CELLSL:	.byte   5
 1069 04df 43454C4C 		.ascii "CELL/"
 1069      2F
 1070              		.p2align 2 	
 1071              	CELLSL:
 1072 04e4 4FEAA505 		MOV	R5,R5,ASR#2
 1073 04e8 7047     		_NEXT
 1074              	
 1075              	//    2*	( w -- w*2 )
 1076              	// 	Multiply 2.
 1077              	
 1078 04ea DE040000 		.word	_CELLSL-MAPOFFSET
 1079 04ee 02       	_TWOST:	.byte   2
 1080 04ef 322A     		.ascii "2*"
 1081 04f1 0000BF   		.p2align 2 	
 1082              	TWOST:
 1083 04f4 4FEA4505 		MOV	R5,R5,LSL#1
 1084 04f8 7047     		_NEXT
 1085              	
 1086              	//    2/	( w -- w/2 )
 1087              	// 	Divide by 2.
 1088              	
 1089 04fa EE040000 		.word	_TWOST-MAPOFFSET
 1090 04fe 02       	_TWOSL:	.byte   2
 1091 04ff 322F     		.ascii "2/"
 1092 0501 0000BF   		.p2align 2 	
 1093              	TWOSL:
 1094 0504 4FEA6505 		MOV	R5,R5,ASR#1
 1095 0508 7047     		_NEXT
 1096              	
 1097              	//    ?DUP	( w -- w w | 0 )
 1098              	// 	Conditional duplicate.
 1099              	
 1100 050a FE040000 		.word	_TWOSL-MAPOFFSET
 1101 050e 04       	_QDUP:	.byte   4
 1102 050f 3F445550 		.ascii "?DUP"
 1103 0513 00       		.p2align 2 	
 1104              	QDUP:
 1105 0514 2C00     		MOVS	R4,R5
 1106 0516 18BF     		IT NE 
 1107 0518 41F8045D 	    STRNE	R5,[R1,#-4]!
 1108 051c 7047     		_NEXT
 1109              	
 1110              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1111              	// 	Rotate top 3 items.
 1112              	
 1113 051e 0E050000 		.word	_QDUP-MAPOFFSET
 1114 0522 03       	_ROT:	.byte   3
 1115 0523 524F54   		.ascii "ROT"
 1116 0526 00BF     		.p2align 2 	
 1117              	ROT:
 1118 0528 0C68     		LDR	R4,[R1]  // r4=w2 
ARM GAS  stm32eforth.s 			page 23


 1119 052a 0D60     		STR	R5,[R1]  // w3 replace w2 
 1120 052c 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1121 052e 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1122 0530 7047     		_NEXT
 1123              	
 1124              	//    2DROP	( w1 w2 -- )
 1125              	// 	Drop top 2 items.
 1126              	
 1127 0532 22050000 		.word	_ROT-MAPOFFSET
 1128 0536 05       	_DDROP:	.byte   5
 1129 0537 3244524F 		.ascii "2DROP"
 1129      50
 1130              		.p2align 2 	
 1131              	DDROP:
 1132 053c 51F8045B 		_POP
 1133 0540 51F8045B 		_POP
 1134 0544 7047     		_NEXT
 1135              	
 1136              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1137              	// 	Duplicate top 2 items.
 1138              	
 1139 0546 36050000 		.word	_DDROP-MAPOFFSET
 1140 054a 04       	_DDUP:	.byte   4
 1141 054b 32445550 		.ascii "2DUP"
 1142 054f 00       		.p2align 2 	
 1143              	DDUP:
 1144 0550 0C68     		LDR	R4,[R1] // r4=w1
 1145 0552 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1146 0556 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1147 055a 7047     		_NEXT
 1148              	
 1149              	//    D+	( d1 d2 -- d3 )
 1150              	// 	Add top 2 double numbers.
 1151              	
 1152 055c 4A050000 		.word	_DDUP-MAPOFFSET
 1153 0560 02       	_DPLUS:	.byte   2
 1154 0561 442B     		.ascii "D+"
 1155 0563 00       		.p2align 2 	
 1156              	DPLUS:
 1157 0564 51F8044B 		LDR	R4,[R1],#4
 1158 0568 51F8046B 		LDR	R6,[R1],#4
 1159 056c 0F68     		LDR	R7,[R1]
 1160 056e E419     		ADDS	R4,R4,R7
 1161 0570 0C60     		STR	R4,[R1]
 1162 0572 45EB0605 		ADC	R5,R5,R6
 1163 0576 7047     		_NEXT
 1164              	
 1165              	//    NOT	 ( w -- !w )
 1166              	// 	1"s complement.
 1167              	
 1168 0578 60050000 		.word	_DPLUS-MAPOFFSET
 1169 057c 03       	_INVER:	.byte   3
 1170 057d 4E4F54   		.ascii "NOT"
 1171              		.p2align 2 	
 1172              	INVER:
 1173 0580 6FEA0505 		MVN	R5,R5
 1174 0584 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 24


 1175              	
 1176              	//    NEGATE	( w -- -w )
 1177              	// 	2's complement.
 1178              	
 1179 0586 7C050000 		.word	_INVER-MAPOFFSET
 1180 058a 06       	_NEGAT:	.byte   6
 1181 058b 4E454741 		.ascii "NEGATE"
 1181      5445
 1182 0591 0000BF   		.p2align 2 	
 1183              	NEGAT:
 1184 0594 C5F10005 		RSB	R5,R5,#0
 1185 0598 7047     		_NEXT
 1186              	
 1187              	//    ABS	 ( w -- |w| )
 1188              	// 	Absolute.
 1189              	
 1190 059a 8A050000 		.word	_NEGAT-MAPOFFSET
 1191 059e 03       	_ABSS:	.byte   3
 1192 059f 414253   		.ascii "ABS"
 1193 05a2 00BF     		.p2align 2 	
 1194              	ABSS:
 1195 05a4 15F0004F 		TST	R5,#0x80000000
 1196 05a8 18BF     		IT NE
 1197 05aa 6D42     	    RSBNE   R5,R5,#0
 1198 05ac 7047     		_NEXT
 1199              	
 1200              	//    =	 ( w w -- t )
 1201              	// 	Equal?
 1202              	
 1203 05ae 9E050000 		.word	_ABSS-MAPOFFSET
 1204 05b2 01       	_EQUAL:	.byte   1
 1205 05b3 3D       		.ascii "="
 1206              		.p2align 2 	
 1207              	EQUAL:
 1208 05b4 51F8044B 		LDR	R4,[R1],#4
 1209 05b8 A542     		CMP	R5,R4
 1210 05ba 0CBF     		ITE EQ 
 1211 05bc 6FF00005 	    MVNEQ	R5,#0
 1212 05c0 0025     		MOVNE	R5,#0
 1213 05c2 7047     		_NEXT
 1214              	
 1215              	//    U<	 ( w w -- t )
 1216              	// 	Unsigned equal?
 1217              	
 1218 05c4 B2050000 		.word	_EQUAL-MAPOFFSET
 1219 05c8 02       	_ULESS:	.byte   2
 1220 05c9 553C     		.ascii "U<"
 1221 05cb 00       		.p2align 2 	
 1222              	ULESS:
 1223 05cc 51F8044B 		LDR	R4,[R1],#4
 1224 05d0 AC42     		CMP	R4,R5
 1225 05d2 34BF     		ITE CC 
 1226 05d4 6FF00005 		MVNCC	R5,#0
 1227 05d8 0025     		MOVCS	R5,#0
 1228 05da 7047     		_NEXT
 1229              	
 1230              	//    <	( w w -- t )
ARM GAS  stm32eforth.s 			page 25


 1231              	// 	Less?
 1232              	
 1233 05dc C8050000 		.word	_ULESS-MAPOFFSET
 1234 05e0 01       	_LESS:	.byte   1
 1235 05e1 3C       		.ascii "<"
 1236 05e2 00BF     		.p2align 2 	
 1237              	LESS:
 1238 05e4 51F8044B 		LDR	R4,[R1],#4
 1239 05e8 AC42     		CMP	R4,R5
 1240 05ea B4BF     	    ITE LT
 1241 05ec 6FF00005 		MVNLT	R5,#0
 1242 05f0 0025     		MOVGE	R5,#0
 1243 05f2 7047     		_NEXT
 1244              	
 1245              	//    >	( w w -- t )
 1246              	// 	greater?
 1247              	
 1248 05f4 E0050000 		.word	_LESS-MAPOFFSET
 1249 05f8 01       	_GREAT:	.byte   1
 1250 05f9 3E       		.ascii ">"
 1251 05fa 00BF     		.p2align 2 	
 1252              	GREAT:
 1253 05fc 51F8044B 		LDR	R4,[R1],#4
 1254 0600 AC42     		CMP	R4,R5
 1255 0602 CCBF     		ITE GT
 1256 0604 6FF00005 	    MVNGT	R5,#0
 1257 0608 0025     		MOVLE	R5,#0
 1258 060a 7047     		_NEXT
 1259              	
 1260              	//    MAX	 ( w w -- max )
 1261              	// 	Leave maximum.
 1262              	
 1263 060c F8050000 		.word	_GREAT-MAPOFFSET
 1264 0610 03       	_MAX:	.byte   3
 1265 0611 4D4158   		.ascii "MAX"
 1266              		.p2align 2 	
 1267              	MAX:
 1268 0614 51F8044B 		LDR	R4,[R1],#4
 1269 0618 AC42     		CMP	R4,R5
 1270 061a C8BF     		IT GT 
 1271 061c 2546     		MOVGT	R5,R4
 1272 061e 7047     		_NEXT
 1273              	
 1274              	//    MIN	 ( w w -- min )
 1275              	// 	Leave minimum.
 1276              	
 1277 0620 10060000 		.word	_MAX-MAPOFFSET
 1278 0624 03       	_MIN:	.byte   3
 1279 0625 4D494E   		.ascii "MIN"
 1280              		.p2align 2 	
 1281              	MIN:
 1282 0628 51F8044B 		LDR	R4,[R1],#4
 1283 062c AC42     		CMP	R4,R5
 1284 062e B8BF     		IT LT
 1285 0630 2546     		MOVLT	R5,R4
 1286 0632 7047     		_NEXT
 1287              	
ARM GAS  stm32eforth.s 			page 26


 1288              	//    +!	 ( w a -- )
 1289              	// 	Add to memory.
 1290              	
 1291 0634 24060000 		.word	_MIN-MAPOFFSET
 1292 0638 02       	_PSTOR:	.byte   2
 1293 0639 2B21     		.ascii "+!"
 1294 063b 00       		.p2align 2 	
 1295              	PSTOR:
 1296 063c 51F8044B 		LDR	R4,[R1],#4
 1297 0640 2E68     		LDR	R6,[R5]
 1298 0642 2644     		ADD	R6,R6,R4
 1299 0644 2E60     		STR	R6,[R5]
 1300 0646 51F8045B 		_POP
 1301 064a 7047     		_NEXT
 1302              	
 1303              	//    2!	 ( d a -- )
 1304              	// 	Store double number.
 1305              	
 1306 064c 38060000 		.word	_PSTOR-MAPOFFSET
 1307 0650 02       	_DSTOR:	.byte   2
 1308 0651 3221     		.ascii "2!"
 1309 0653 00       		.p2align 2 	
 1310              	DSTOR:
 1311 0654 51F8044B 		LDR	R4,[R1],#4
 1312 0658 51F8046B 		LDR	R6,[R1],#4
 1313 065c 45F8044B 		STR	R4,[R5],#4
 1314 0660 2E60     		STR	R6,[R5]
 1315 0662 51F8045B 		_POP
 1316 0666 7047     		_NEXT
 1317              	
 1318              	//    2@	 ( a -- d )
 1319              	// 	Fetch double number.
 1320              	
 1321 0668 50060000 		.word	_DSTOR-MAPOFFSET
 1322 066c 02       	_DAT:	.byte   2
 1323 066d 3240     		.ascii "2@"
 1324 066f 00       		.p2align 2 	
 1325              	DAT:
 1326 0670 6C68     		LDR	R4,[R5,#4]
 1327 0672 41F8044D 		STR	R4,[R1,#-4]!
 1328 0676 2D68     		LDR	R5,[R5]
 1329 0678 7047     		_NEXT
 1330              	
 1331              	//    COUNT	( b -- b+1 c )
 1332              	// 	Fetch length of string.
 1333              	
 1334 067a 6C060000 		.word	_DAT-MAPOFFSET
 1335 067e 05       	_COUNT:	.byte   5
 1336 067f 434F554E 		.ascii "COUNT"
 1336      54
 1337              		.p2align 2 	
 1338              	COUNT:
 1339 0684 15F8014B 		LDRB	R4,[R5],#1
 1340 0688 41F8045D 		_PUSH
 1341 068c 2546     		MOV	R5,R4
 1342 068e 7047     		_NEXT
 1343              	
ARM GAS  stm32eforth.s 			page 27


 1344              	//    DNEGATE	( d -- -d )
 1345              	// 	Negate double number.
 1346              	
 1347 0690 7E060000 		.word	_COUNT-MAPOFFSET
 1348 0694 07       	_DNEGA:	.byte   7
 1349 0695 444E4547 		.ascii "DNEGATE"
 1349      415445
 1350              		.p2align 2 	
 1351              	DNEGA:
 1352 069c 0C68     		LDR	R4,[R1]
 1353 069e A6EB0606 		SUB	R6,R6,R6
 1354 06a2 341B     		SUBS R4,R6,R4
 1355 06a4 66EB0505 		SBC	R5,R6,R5
 1356 06a8 0C60     		STR	R4,[R1]
 1357 06aa 7047     		_NEXT
 1358              	
 1359              	// **************************************************************************
 1360              	//  System and user variables
 1361              	
 1362              	//    doVAR	( -- a )
 1363              	// 	Run time routine for VARIABLE and CREATE.
 1364              	
 1365              	// 	.word	_DNEGA-MAPOFFSET
 1366              	// _DOVAR	.byte  COMPO+5
 1367              	// 	.ascii "doVAR"
 1368              	// 	.p2align 2 	
 1369              	DOVAR:
 1370 06ac 41F8045D 		_PUSH
 1371 06b0 AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
 1372 06b4 52F804FB 		_UNNEST
 1373              	
 1374              	//    doCON	( -- a ) 
 1375              	// 	Run time routine for CONSTANT.
 1376              	
 1377              	// 	.word	_DOVAR-MAPOFFSET
 1378              	// _DOCON	.byte  COMPO+5
 1379              	// 	.ascii "doCON"
 1380              	// 	.p2align 2 	
 1381              	DOCON:
 1382 06b8 41F8045D 		_PUSH
 1383 06bc 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1384 06c0 52F804FB 		_UNNEST
 1385              	
 1386              	/***********************
 1387              	  system variables 
 1388              	***********************/
 1389              	  
 1390              	//  MSEC ( -- a)
 1391              	// return address of milliseconds counter
 1392 06c4 94060000 	  .word _DNEGA-MAPOFFSET 
 1393 06c8 04       	_MSEC: .byte 4
 1394 06c9 4D534543 	  .ascii "MSEC"
 1395 06cd 0000BF   	  .p2align 2 
 1396              	MSEC:
 1397 06d0 41F8045D 	  _PUSH
 1398 06d4 03F10405 	  ADD R5,R3,#TICKS_OFS
 1399 06d8 7047     	  _NEXT 
ARM GAS  stm32eforth.s 			page 28


 1400              	
 1401              	// TIMER ( -- a )
 1402 06da C8060000 	  .word _MSEC-MAPOFFSET
 1403 06de 05       	_TIMER:  .byte 5
 1404 06df 54494D45 	  .ascii "TIMER"
 1404      52
 1405              	  .p2align 2 
 1406              	TIMER:
 1407 06e4 41F8045D 	  _PUSH 
 1408 06e8 03F10805 	  ADD R5,R3,#TIMER_OFS
 1409 06ec 7047     	  _NEXT
 1410              	
 1411              	//    'BOOT	 ( -- a )
 1412              	// 	Application.
 1413              	
 1414 06ee DE060000 		.word	_TIMER-MAPOFFSET
 1415 06f2 05       	_TBOOT:	.byte   5
 1416 06f3 27424F4F 		.ascii "'BOOT"
 1416      54
 1417              		.p2align 2 	
 1418              	TBOOT:
 1419 06f8 41F8045D 		_PUSH
 1420 06fc 03F10C05 		ADD	R5,R3,#BOOT_OFS 
 1421 0700 7047     		_NEXT
 1422              		
 1423              	//    BASE	( -- a )
 1424              	// 	Storage of the radix base for numeric I/O.
 1425              	
 1426 0702 F2060000 		.word	_TBOOT-MAPOFFSET
 1427 0706 04       	_BASE:	.byte   4
 1428 0707 42415345 		.ascii "BASE"
 1429 070b 00       		.p2align 2 	
 1430              	BASE:
 1431 070c 41F8045D 		_PUSH
 1432 0710 03F11005 		ADD	R5,R3,#BASE_OFS
 1433 0714 7047     		_NEXT
 1434              	
 1435              	//    tmp	 ( -- a )
 1436              	// 	A temporary storage location used in parse and find.
 1437              	
 1438              	// 	.word	_BASE-MAPOFFSET
 1439              	// _TEMP	.byte   COMPO+3
 1440              	// 	.ascii "tmp"
 1441              	// 	.p2align 2 	
 1442              	TEMP:
 1443 0716 41F8045D 		_PUSH
 1444 071a 03F11405 		ADD	R5,R3,#TMP_OFS
 1445 071e 7047     		_NEXT
 1446              	
 1447              	//    SPAN	( -- a )
 1448              	// 	Hold character count received by EXPECT.
 1449              	
 1450 0720 06070000 		.word	_BASE-MAPOFFSET
 1451 0724 04       	_SPAN:	.byte   4
 1452 0725 5350414E 		.ascii "SPAN"
 1453 0729 0000BF   		.p2align 2 	
 1454              	SPAN:
ARM GAS  stm32eforth.s 			page 29


 1455 072c 41F8045D 		_PUSH
 1456 0730 03F11805 		ADD	R5,R3,#SPAN_OFS
 1457 0734 7047     		_NEXT
 1458              	
 1459              	//    >IN	 ( -- a )
 1460              	// 	Hold the character pointer while parsing input stream.
 1461              	
 1462 0736 24070000 		.word	_SPAN-MAPOFFSET
 1463 073a 03       	_INN:	.byte   3
 1464 073b 3E494E   		.ascii ">IN"
 1465 073e 00BF     		.p2align 2 	
 1466              	INN:
 1467 0740 41F8045D 		_PUSH
 1468 0744 03F11C05 		ADD	R5,R3,#TOIN_OFS
 1469 0748 7047     		_NEXT
 1470              	
 1471              	//    #TIB	( -- a )
 1472              	// 	Hold the current count and address of the terminal input buffer.
 1473              	
 1474 074a 3A070000 		.word	_INN-MAPOFFSET
 1475 074e 04       	_NTIB:	.byte   4
 1476 074f 23544942 		.ascii "#TIB"
 1477 0753 00       		.p2align 2 	
 1478              	NTIB:
 1479 0754 41F8045D 		_PUSH
 1480 0758 03F12005 		ADD	R5,R3,#NTIB_OFS
 1481 075c 7047     		_NEXT
 1482              	
 1483              	//    'EVAL	( -- a )
 1484              	// 	Execution vector of EVAL.
 1485              	
 1486 075e 4E070000 		.word	_NTIB-MAPOFFSET
 1487 0762 05       	_TEVAL:	.byte   5
 1488 0763 27455641 		.ascii "'EVAL"
 1488      4C
 1489              		.p2align 2 	
 1490              	TEVAL:
 1491 0768 41F8045D 		_PUSH
 1492 076c 03F12805 		ADD	R5,R3,#EVAL_OFS
 1493 0770 7047     		_NEXT
 1494              	
 1495              	//    HLD	 ( -- a )
 1496              	// 	Hold a pointer in building a numeric output string.
 1497              	
 1498 0772 62070000 		.word	_TEVAL-MAPOFFSET
 1499 0776 03       	_HLD:	.byte   3
 1500 0777 484C44   		.ascii "HLD"
 1501 077a 00BF     		.p2align 2 	
 1502              	HLD:
 1503 077c 41F8045D 		_PUSH
 1504 0780 03F12C05 		ADD	R5,R3,#HLD_OFS
 1505 0784 7047     		_NEXT
 1506              	
 1507              	//    CONTEXT	( -- a )
 1508              	// 	A area to specify vocabulary search order.
 1509              	
 1510 0786 76070000 		.word	_HLD-MAPOFFSET
ARM GAS  stm32eforth.s 			page 30


 1511 078a 07       	_CNTXT:	.byte   7
 1512 078b 434F4E54 		.ascii "CONTEXT"
 1512      455854
 1513 0792 00BF     		.p2align 2 	
 1514              	CNTXT:
 1515              	CRRNT:
 1516 0794 41F8045D 		_PUSH
 1517 0798 03F13005 		ADD	R5,R3,#CTXT_OFS
 1518 079c 7047     		_NEXT
 1519              	
 1520              	//    CP	( -- a )
 1521              	// 	Point to top name in RAM vocabulary.
 1522              	
 1523 079e 8A070000 		.word	_CNTXT-MAPOFFSET
 1524 07a2 02       	_CP:	.byte   2
 1525 07a3 4350     		.ascii "CP"
 1526 07a5 0000BF   		.p2align 2 	
 1527              	CPP:
 1528 07a8 41F8045D 		_PUSH
 1529 07ac 03F13805 		ADD	R5,R3,#RAM_CTOP_OFS
 1530 07b0 7047     		_NEXT
 1531              	
 1532              	//   FCP ( -- a )
 1533              	//  Point ot top of Flash dictionary
 1534 07b2 A2070000 		.word _CP-MAPOFFSET
 1535 07b6 04       	_FCPP: .byte 4 
 1536 07b7 46435050 		.ascii "FCPP"
 1537 07bb 00       		.p2align 2 
 1538              	FCPP: 
 1539 07bc 41F8045D 		_PUSH 
 1540 07c0 03F13405 		ADD R5,R3,#FLSH_CTOP_OFS 
 1541 07c4 7047     		_NEXT 
 1542              	
 1543              	//    LAST	( -- a )
 1544              	// 	Point to the last name in the name dictionary.
 1545              	
 1546 07c6 B6070000 		.word	_FCPP-MAPOFFSET
 1547 07ca 04       	_LAST:	.byte   4
 1548 07cb 4C415354 		.ascii "LAST"
 1549 07cf 00       		.p2align 2 	
 1550              	LAST:
 1551 07d0 41F8045D 		_PUSH
 1552 07d4 03F13C05 		ADD	R5,R3,#LASTN_OFS
 1553 07d8 7047     		_NEXT
 1554              	
 1555              	// **************************************************************************
 1556              	//  Common functions
 1557              	
 1558              	//    WITHIN	( u ul uh -- t )
 1559              	// 	Return true if u is within the range of ul and uh.
 1560              	
 1561 07da CA070000 		.word	_LAST-MAPOFFSET
 1562 07de 06       	_WITHI:	.byte   6
 1563 07df 57495448 		.ascii "WITHIN"
 1563      494E
 1564 07e5 0000BF   		.p2align 2 	
 1565              	WITHI:
ARM GAS  stm32eforth.s 			page 31


 1566 07e8 42F804ED 		_NEST
 1567 07ec FFF7B8FD 		BL	OVER
 1568 07f0 FFF710FE 		BL	SUBB
 1569 07f4 FFF786FD 		BL	TOR
 1570 07f8 FFF70CFE 		BL	SUBB
 1571 07fc FFF770FD 		BL	RFROM
 1572 0800 FFF7E4FE 		BL	ULESS
 1573 0804 52F804FB 		_UNNEST
 1574              	
 1575              	//  Divide
 1576              	
 1577              	//    UM/MOD	( udl udh u -- ur uq )
 1578              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1579              	
 1580 0808 DE070000 		.word	_WITHI-MAPOFFSET
 1581 080c 06       	_UMMOD:	.byte   6
 1582 080d 554D2F4D 		.ascii "UM/MOD"
 1582      4F44
 1583 0813 00       		.p2align 2 	
 1584              	UMMOD:
 1585 0814 4FF00107 		MOV	R7,#1
 1586 0818 51F8044B 		LDR	R4,[R1],#4
 1587 081c 0E68     		LDR	R6,[R1]
 1588              	UMMOD0:
 1589 081e B619     		ADDS	R6,R6,R6
 1590 0820 6441     		ADCS	R4,R4,R4
 1591 0822 04D3     		BCC	UMMOD1
 1592 0824 A4EB0504 		SUB	R4,R4,R5
 1593 0828 06F10106 		ADD	R6,R6,#1
 1594 082c 04E0     		B UMMOD2
 1595              	UMMOD1:
 1596 082e 641B     		SUBS	R4,R4,R5 
 1597 0830 28BF     		IT CS 
 1598 0832 0136     		ADDCS	R6,R6,#1
 1599 0834 00D2     		BCS	UMMOD2
 1600 0836 2C44     		ADD	R4,R4,R5
 1601              	UMMOD2:
 1602 0838 FF19     		ADDS	R7,R7,R7
 1603 083a F0D3     		BCC	UMMOD0
 1604 083c 3546     		MOV	R5,R6
 1605 083e 0C60     		STR	R4,[R1]
 1606 0840 7047     		_NEXT
 1607              	
 1608              	//    M/MOD	( d n -- r q )
 1609              	// 	Signed floored divide of double by single. Return mod and quotient.
 1610              	
 1611 0842 0C080000 		.word	_UMMOD-MAPOFFSET
 1612 0846 05       	_MSMOD:	.byte  5
 1613 0847 4D2F4D4F 		.ascii "M/MOD"
 1613      44
 1614              		.p2align 2 	
 1615              	MSMOD:	
 1616 084c 42F804ED 		_NEST
 1617 0850 FFF774FD 		BL	DUPP
 1618 0854 FFF78CFD 		BL	ZLESS
 1619 0858 FFF770FD 		BL	DUPP
 1620 085c FFF752FD 		BL	TOR
ARM GAS  stm32eforth.s 			page 32


 1621 0860 FFF702FD 		BL	QBRAN
 1622 0864 78080000 		.word	MMOD1-MAPOFFSET
 1623 0868 FFF794FE 		BL	NEGAT
 1624 086c FFF74AFD 		BL	TOR
 1625 0870 FFF714FF 		BL	DNEGA
 1626 0874 FFF734FD 		BL	RFROM
 1627              	MMOD1:
 1628 0878 FFF744FD 	  BL	TOR
 1629 087c FFF75EFD 		BL	DUPP
 1630 0880 FFF776FD 		BL	ZLESS
 1631 0884 FFF7F0FC 		BL	QBRAN
 1632 0888 94080000 		.word	MMOD2-MAPOFFSET
 1633 088c FFF732FD 		BL	RAT
 1634 0890 FFF7B8FD 		BL	PLUS
 1635              	MMOD2:
 1636 0894 FFF724FD 	  BL	RFROM
 1637 0898 FFF7BCFF 		BL	UMMOD
 1638 089c FFF720FD 		BL	RFROM
 1639 08a0 FFF7E2FC 		BL	QBRAN
 1640 08a4 B4080000 		.word	MMOD3-MAPOFFSET
 1641 08a8 FFF750FD 		BL	SWAP
 1642 08ac FFF772FE 		BL	NEGAT
 1643 08b0 FFF74CFD 		BL	SWAP
 1644              	MMOD3:   
 1645 08b4 52F804FB 		_UNNEST
 1646              	
 1647              	//    /MOD	( n n -- r q )
 1648              	// 	Signed divide. Return mod and quotient.
 1649              	
 1650 08b8 46080000 		.word	_MSMOD-MAPOFFSET
 1651 08bc 04       	_SLMOD:	.byte   4
 1652 08bd 2F4D4F44 		.ascii "/MOD"
 1653 08c1 0000BF   		.p2align 2 	
 1654              	SLMOD:
 1655 08c4 42F804ED 		_NEST
 1656 08c8 FFF74AFD 		BL	OVER
 1657 08cc FFF750FD 		BL	ZLESS
 1658 08d0 FFF73CFD 		BL	SWAP
 1659 08d4 FFF7BAFF 		BL	MSMOD
 1660 08d8 52F804FB 		_UNNEST
 1661              	
 1662              	//    MOD	 ( n n -- r )
 1663              	// 	Signed divide. Return mod only.
 1664              	
 1665 08dc BC080000 		.word	_SLMOD-MAPOFFSET
 1666 08e0 03       	_MODD:	.byte  3
 1667 08e1 4D4F44   		.ascii "MOD"
 1668              		.p2align 2 	
 1669              	MODD:
 1670 08e4 42F804ED 		_NEST
 1671 08e8 FFF7ECFF 		BL	SLMOD
 1672 08ec FFF71EFD 		BL	DROP
 1673 08f0 52F804FB 		_UNNEST
 1674              	
 1675              	//    /	   ( n n -- q )
 1676              	// 	Signed divide. Return quotient only.
 1677              	
ARM GAS  stm32eforth.s 			page 33


 1678 08f4 E0080000 		.word	_MODD-MAPOFFSET
 1679 08f8 01       	_SLASH:	.byte  1
 1680 08f9 2F       		.ascii "/"
 1681 08fa 00BF     		.p2align 2 	
 1682              	SLASH:
 1683 08fc 42F804ED 		_NEST
 1684 0900 FFF7E0FF 		BL	SLMOD
 1685 0904 FFF722FD 		BL	SWAP
 1686 0908 FFF710FD 		BL	DROP
 1687 090c 52F804FB 		_UNNEST
 1688              	
 1689              	//    */MOD	( n1 n2 n3 -- r q )
 1690              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1691              	
 1692 0910 F8080000 		.word	_SLASH-MAPOFFSET
 1693 0914 05       	_SSMOD:	.byte  5
 1694 0915 2A2F4D4F 		.ascii "*/MOD"
 1694      44
 1695 091a 00BF     		.p2align 2 	
 1696              	SSMOD:
 1697 091c 42F804ED 		_NEST
 1698 0920 FFF7F0FC 		BL	TOR
 1699 0924 FFF792FD 		BL	MSTAR
 1700 0928 FFF7DAFC 		BL	RFROM
 1701 092c FFF78EFF 		BL	MSMOD
 1702 0930 52F804FB 		_UNNEST
 1703              	
 1704              	//    */	  ( n1 n2 n3 -- q )
 1705              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1706              	
 1707 0934 14090000 		.word	_SSMOD-MAPOFFSET
 1708 0938 02       	_STASL:	.byte  2
 1709 0939 2A2F     		.ascii "*/"
 1710 093b 00       		.p2align 2 	
 1711              	STASL:
 1712 093c 42F804ED 		_NEST
 1713 0940 FFF7ECFF 		BL	SSMOD
 1714 0944 FFF702FD 		BL	SWAP
 1715 0948 FFF7F0FC 		BL	DROP
 1716 094c 52F804FB 		_UNNEST
 1717              	
 1718              	// **************************************************************************
 1719              	//  Miscellaneous
 1720              	
 1721              	//    ALIGNED	( b -- a )
 1722              	// 	Align address to the cell boundary.
 1723              	
 1724 0950 38090000 		.word	_STASL-MAPOFFSET
 1725 0954 07       	_ALGND:	.byte   7
 1726 0955 414C4947 		.ascii "ALIGNED"
 1726      4E4544
 1727              		.p2align 2 	
 1728              	ALGND:
 1729 095c 05F10305 		ADD	R5,R5,#3
 1730 0960 6FF00304 		MVN	R4,#3
 1731 0964 05EA0405 		AND	R5,R5,R4
 1732 0968 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 34


 1733              	
 1734              	//    >CHAR	( c -- c )
 1735              	// 	Filter non-printing characters.
 1736              	
 1737 096a 54090000 		.word	_ALGND-MAPOFFSET
 1738 096e 05       	_TCHAR:	.byte  5
 1739 096f 3E434841 		.ascii ">CHAR"
 1739      52
 1740              		.p2align 2 	
 1741              	TCHAR:
 1742 0974 42F804ED 		_NEST
 1743 0978 FFF753FC 		_DOLIT
 1744 097c 7F000000 		.word	0x7F
 1745 0980 FFF700FD 		BL	ANDD
 1746 0984 FFF7DAFC 		BL	DUPP	// mask msb
 1747 0988 FFF79AFD 		BL	BLANK
 1748 098c FFF749FC 		_DOLIT
 1749 0990 7F000000 		.word	127
 1750 0994 FFF728FF 		BL	WITHI	// check for printable
 1751 0998 FFF7F2FD 		BL	INVER
 1752 099c FFF764FC 		BL	QBRAN
 1753 09a0 B0090000 		.word	TCHA1-MAPOFFSET
 1754 09a4 FFF7C2FC 		BL	DROP
 1755 09a8 FFF73BFC 		_DOLIT
 1756 09ac 5F000000 		.word	'_'	// replace non-printables
 1757              	TCHA1:
 1758 09b0 52F804FB 		  _UNNEST
 1759              	
 1760              	//    DEPTH	( -- n )
 1761              	// 	Return the depth of the data stack.
 1762              	
 1763 09b4 6E090000 		.word	_TCHAR-MAPOFFSET
 1764 09b8 05       	_DEPTH:	.byte  5
 1765 09b9 44455054 		.ascii "DEPTH"
 1765      48
 1766 09be 00BF     		.p2align 2 	
 1767              	DEPTH:
 1768 09c0 41F8045D 		_PUSH
 1769 09c4 44F68465 		MOVW	R5,#SPP&0xffff+4 
 1770 09c8 C2F20005 	 	MOVT	R5,#SPP>>16 
 1771 09cc A5EB0105 		SUB	R5,R5,R1
 1772 09d0 4FEAA505 		ASR	R5,R5,#2
 1773 09d4 A5F10105 		SUB	R5,R5,#1
 1774 09d8 7047     		_NEXT
 1775              	
 1776              	//    PICK	( ... +n -- ... w )
 1777              	// 	Copy the nth stack item to tos.
 1778              	
 1779 09da B8090000 		.word	_DEPTH-MAPOFFSET
 1780 09de 04       	_PICK:	.byte  4
 1781 09df 5049434B 		.ascii "PICK"
 1782 09e3 00       		.p2align 2 	
 1783              	PICK:
 1784 09e4 42F804ED 		_NEST
 1785 09e8 FFF73AFD 		BL	ONEP
 1786 09ec FFF772FD 		BL	CELLS
 1787 09f0 FFF792FC 		BL	SPAT
ARM GAS  stm32eforth.s 			page 35


 1788 09f4 FFF706FD 		BL	PLUS
 1789 09f8 FFF75CFC 		BL	AT
 1790 09fc 52F804FB 		_UNNEST
 1791              	
 1792              	// **************************************************************************
 1793              	//  Memory access
 1794              	
 1795              	//    HERE	( -- a )
 1796              	// 	Return the top of the code dictionary.
 1797              	
 1798 0a00 DE090000 		.word	_PICK-MAPOFFSET
 1799 0a04 04       	_HERE:	.byte  4
 1800 0a05 48455245 		.ascii "HERE"
 1801 0a09 0000BF   		.p2align 2 	
 1802              	HERE:
 1803 0a0c 42F804ED 		_NEST
 1804 0a10 FFF7CAFE 		BL	CPP
 1805 0a14 FFF74EFC 		BL	AT
 1806 0a18 52F804FB 		_UNNEST
 1807              		
 1808              	//    PAD	 ( -- a )
 1809              	// 	Return the address of a temporary buffer.
 1810              	
 1811 0a1c 040A0000 		.word	_HERE-MAPOFFSET
 1812 0a20 03       	_PAD:	.byte  3
 1813 0a21 504144   		.ascii "PAD"
 1814              		.p2align 2 	
 1815              	PAD:
 1816 0a24 42F804ED 		_NEST
 1817 0a28 FFF7F0FF 		BL	HERE
 1818 0a2c 05F15005 		ADD	R5,R5,#80
 1819 0a30 52F804FB 		_UNNEST
 1820              	
 1821              	//    TIB	 ( -- a )
 1822              	// 	Return the address of the terminal input buffer.
 1823              	
 1824 0a34 200A0000 		.word	_PAD-MAPOFFSET
 1825 0a38 03       	_TIB:	.byte  3
 1826 0a39 544942   		.ascii "TIB"
 1827              		.p2align 2 	
 1828              	TIB:
 1829 0a3c 41F8045D 		_PUSH
 1830 0a40 5D6A     		ldr r5,[r3,#TIB_OFS]
 1831 0a42 7047     		_NEXT
 1832              	
 1833              	//    @EXECUTE	( a -- )
 1834              	// 	Execute vector stored in address a.
 1835              	
 1836 0a44 380A0000 		.word	_TIB-MAPOFFSET
 1837 0a48 08       	_ATEXE:	.byte   8
 1838 0a49 40455845 		.ascii "@EXECUTE"
 1838      43555445 
 1839 0a51 0000BF   		.p2align 2 	
 1840              	ATEXE:
 1841 0a54 2C00     		MOVS	R4,R5
 1842 0a56 51F8045B 		_POP
 1843 0a5a 2468     		LDR	R4,[R4]
ARM GAS  stm32eforth.s 			page 36


 1844 0a5c 44F00104 		ORR	R4,R4,#1
 1845 0a60 18BF     	    IT NE 
 1846 0a62 2047     		BXNE	R4
 1847 0a64 7047     		_NEXT
 1848              	
 1849              	//    CMOVE	( b1 b2 u -- )
 1850              	// 	Copy u bytes from b1 to b2.
 1851              	
 1852 0a66 480A0000 		.word	_ATEXE-MAPOFFSET
 1853 0a6a 05       	_CMOVE:	.byte   5
 1854 0a6b 434D4F56 		.ascii "CMOVE"
 1854      45
 1855              		.p2align 2 	
 1856              	CMOVE:
 1857 0a70 51F8046B 		LDR	R6,[R1],#4
 1858 0a74 51F8047B 		LDR	R7,[R1],#4
 1859 0a78 03E0     		B CMOV1
 1860              	CMOV0:
 1861 0a7a 17F8014B 		LDRB	R4,[R7],#1
 1862 0a7e 06F8014B 		STRB	R4,[R6],#1
 1863              	CMOV1:
 1864 0a82 2D00     		MOVS	R5,R5
 1865 0a84 02D0     		BEQ	CMOV2
 1866 0a86 A5F10105 		SUB	R5,R5,#1
 1867 0a8a F6E7     		B CMOV0
 1868              	CMOV2:
 1869 0a8c 51F8045B 		_POP
 1870 0a90 7047     		_NEXT
 1871              	
 1872              	//    MOVE	( a1 a2 u -- )
 1873              	// 	Copy u words from a1 to a2.
 1874              	
 1875 0a92 6A0A0000 		.word	_CMOVE-MAPOFFSET
 1876 0a96 04       	_MOVE:	.byte   4
 1877 0a97 4D4F5645 		.ascii "MOVE"
 1878 0a9b 00       		.p2align 2 	
 1879              	MOVE:
 1880 0a9c 25F00305 		AND	R5,R5,#-4
 1881 0aa0 51F8046B 		LDR	R6,[R1],#4
 1882 0aa4 51F8047B 		LDR	R7,[R1],#4
 1883 0aa8 03E0     		B MOVE1
 1884              	MOVE0:
 1885 0aaa 57F8044B 		LDR	R4,[R7],#4
 1886 0aae 46F8044B 		STR	R4,[R6],#4
 1887              	MOVE1:
 1888 0ab2 2D00     		MOVS	R5,R5
 1889 0ab4 02D0     		BEQ	MOVE2
 1890 0ab6 A5F10405 		SUB	R5,R5,#4
 1891 0aba F6E7     		B MOVE0
 1892              	MOVE2:
 1893 0abc 51F8045B 		_POP
 1894 0ac0 7047     		_NEXT
 1895              	
 1896              	//    FILL	( b u c -- )
 1897              	// 	Fill u bytes of character c to area beginning at b.
 1898              	
 1899 0ac2 960A0000 		.word	_MOVE-MAPOFFSET
ARM GAS  stm32eforth.s 			page 37


 1900 0ac6 04       	_FILL:	.byte   4
 1901 0ac7 46494C4C 		.ascii "FILL"
 1902 0acb 00       		.p2align 2 	
 1903              	FILL:
 1904 0acc 51F8046B 		LDR	R6,[R1],#4
 1905 0ad0 51F8047B 		LDR	R7,[R1],#4
 1906              	FILL0:
 1907 0ad4 00E0     		B FILL1
 1908 0ad6 2D46     		MOV	R5,R5
 1909              	FILL1:
 1910 0ad8 07F8015B 		STRB	R5,[R7],#1
 1911 0adc 3600     		MOVS	R6,R6
 1912 0ade 02D0     		BEQ	FILL2
 1913 0ae0 A6F10106 		SUB	R6,R6,#1
 1914 0ae4 F6E7     		B FILL0
 1915              	FILL2:
 1916 0ae6 51F8045B 		_POP
 1917 0aea 7047     		_NEXT
 1918              	
 1919              	//    PACK$	( b u a -- a )
 1920              	// 	Build a counted word with u characters from b. Null fill.
 1921              	
 1922 0aec C60A0000 		.word	_FILL-MAPOFFSET
 1923 0af0 05       	_PACKS:	.byte  5
 1924 0af1 5041434B 		.ascii "PACK$$"
 1924      2424
 1925 0af7 00       		.p2align 2 	
 1926              	PACKS:
 1927 0af8 42F804ED 		_NEST
 1928 0afc FFF72EFF 		BL	ALGND
 1929 0b00 FFF71CFC 		BL	DUPP
 1930 0b04 FFF7FEFB 		BL	TOR			// strings only on cell boundary
 1931 0b08 FFF72AFC 		BL	OVER
 1932 0b0c FFF77AFC 		BL	PLUS
 1933 0b10 FFF7A6FC 		BL	ONEP
 1934 0b14 FFF785FB 		_DOLIT
 1935 0b18 FCFFFFFF 		.word	0xFFFFFFFC
 1936 0b1c FFF732FC 		BL	ANDD			// count mod cell
 1937 0b20 FFF77FFB 		_DOLIT
 1938 0b24 00000000 		.word	0
 1939 0b28 FFF710FC 		BL	SWAP
 1940 0b2c FFF7B8FB 		BL	STORE			// null fill cell
 1941 0b30 FFF7E0FB 		BL	RAT
 1942 0b34 FFF70CFD 		BL	DDUP
 1943 0b38 FFF7C2FB 		BL	CSTOR
 1944 0b3c FFF790FC 		BL	ONEP			// save count
 1945 0b40 FFF704FC 		BL	SWAP
 1946 0b44 FFF794FF 		BL	CMOVE
 1947 0b48 FFF7CAFB 		BL	RFROM
 1948 0b4c 52F804FB 		_UNNEST   			// move string
 1949              	
 1950              	// **************************************************************************
 1951              	//  Numeric output, single precision
 1952              	
 1953              	//    DIGIT	( u -- c )
 1954              	// 	Convert digit u to a character.
 1955              	
ARM GAS  stm32eforth.s 			page 38


 1956 0b50 F00A0000 		.word	_PACKS-MAPOFFSET
 1957 0b54 05       	_DIGIT:	.byte  5
 1958 0b55 44494749 		.ascii "DIGIT"
 1958      54
 1959 0b5a 00BF     		.p2align 2 	
 1960              	DIGIT:
 1961 0b5c 42F804ED 		_NEST
 1962 0b60 FFF75FFB 		_DOLIT
 1963 0b64 09000000 		.word	9
 1964 0b68 FFF7FAFB 		BL	OVER
 1965 0b6c FFF73AFD 		BL	LESS
 1966 0b70 05F00705 		AND	R5,R5,#7
 1967 0b74 FFF746FC 		BL	PLUS
 1968 0b78 05F13005 		ADD	R5,R5,#'0'
 1969 0b7c 52F804FB 		_UNNEST
 1970              	
 1971              	//    EXTRACT	( n base -- n c )
 1972              	// 	Extract the least significant digit from n.
 1973              	
 1974 0b80 540B0000 		.word	_DIGIT-MAPOFFSET
 1975 0b84 07       	_EXTRC:	.byte  7
 1976 0b85 45585452 		.ascii "EXTRACT"
 1976      414354
 1977              		.p2align 2 	
 1978              	EXTRC:
 1979 0b8c 42F804ED 		_NEST
 1980 0b90 FFF747FB 		_DOLIT
 1981 0b94 00000000 		.word	0
 1982 0b98 FFF7D8FB 		BL	SWAP
 1983 0b9c FFF73AFE 		BL	UMMOD
 1984 0ba0 FFF7D4FB 		BL	SWAP
 1985 0ba4 FFF7DAFF 		BL	DIGIT
 1986 0ba8 52F804FB 		_UNNEST
 1987              	
 1988              	//    <#	  ( -- )
 1989              	// 	Initiate the numeric output process.
 1990              	
 1991 0bac 840B0000 		.word	_EXTRC-MAPOFFSET
 1992 0bb0 02       	_BDIGS:	.byte  2
 1993 0bb1 3C23     		.ascii "<#"
 1994 0bb3 00       		.p2align 2 	
 1995              	BDIGS:
 1996 0bb4 42F804ED 		_NEST
 1997 0bb8 FFF734FF 		BL	PAD
 1998 0bbc FFF7DEFD 		BL	HLD
 1999 0bc0 FFF76EFB 		BL	STORE
 2000 0bc4 52F804FB 		_UNNEST
 2001              	
 2002              	//    HOLD	( c -- )
 2003              	// 	Insert a character into the numeric output string.
 2004              	
 2005 0bc8 B00B0000 		.word	_BDIGS-MAPOFFSET
 2006 0bcc 04       	_HOLD:	.byte  4
 2007 0bcd 484F4C44 		.ascii "HOLD"
 2008 0bd1 0000BF   		.p2align 2 	
 2009              	HOLD:
 2010 0bd4 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 39


 2011 0bd8 FFF7D0FD 		BL	HLD
 2012 0bdc FFF76AFB 		BL	AT
 2013 0be0 FFF746FC 		BL	ONEM
 2014 0be4 FFF7AAFB 		BL	DUPP
 2015 0be8 FFF7C8FD 		BL	HLD
 2016 0bec FFF758FB 		BL	STORE
 2017 0bf0 FFF766FB 		BL	CSTOR
 2018 0bf4 52F804FB 		_UNNEST
 2019              	
 2020              	//    #	   ( u -- u )
 2021              	// 	Extract one digit from u and append the digit to output string.
 2022              	
 2023 0bf8 CC0B0000 		.word	_HOLD-MAPOFFSET
 2024 0bfc 01       	_DIG:	.byte  1
 2025 0bfd 23       		.ascii "#"
 2026 0bfe 00BF     		.p2align 2 	
 2027              	DIG:
 2028 0c00 42F804ED 		_NEST
 2029 0c04 FFF782FD 		BL	BASE
 2030 0c08 FFF754FB 		BL	AT
 2031 0c0c FFF7BEFF 		BL	EXTRC
 2032 0c10 FFF7E0FF 		BL	HOLD
 2033 0c14 52F804FB 		_UNNEST
 2034              	
 2035              	//    #S	  ( u -- 0 )
 2036              	// 	Convert u until all digits are added to the output string.
 2037              	
 2038 0c18 FC0B0000 		.word	_DIG-MAPOFFSET
 2039 0c1c 02       	_DIGS:	.byte  2
 2040 0c1d 2353     		.ascii "#S"
 2041 0c1f 00       		.p2align 2 	
 2042              	DIGS:
 2043 0c20 42F804ED 		_NEST
 2044              	DIGS1:
 2045 0c24 FFF7ECFF 	    BL	DIG
 2046 0c28 FFF788FB 		BL	DUPP
 2047 0c2c FFF71CFB 		BL	QBRAN
 2048 0c30 360C0000 		.word	DIGS2-MAPOFFSET
 2049 0c34 F6E7     		B	DIGS1
 2050              	DIGS2:
 2051 0c36 52F804FB 		  _UNNEST
 2052              	
 2053              	//    SIGN	( n -- )
 2054              	// 	Add a minus sign to the numeric output string.
 2055              	
 2056 0c3a 1C0C0000 		.word	_DIGS-MAPOFFSET
 2057 0c3e 04       	_SIGN:	.byte  4
 2058 0c3f 5349474E 		.ascii "SIGN"
 2059 0c43 00       		.p2align 2 	
 2060              	SIGN:
 2061 0c44 42F804ED 		_NEST
 2062 0c48 FFF792FB 		BL	ZLESS
 2063 0c4c FFF70CFB 		BL	QBRAN
 2064 0c50 600C0000 		.word	SIGN1-MAPOFFSET
 2065 0c54 FFF7E5FA 		_DOLIT
 2066 0c58 2D000000 		.word	'-'
 2067 0c5c FFF7BAFF 		BL	HOLD
ARM GAS  stm32eforth.s 			page 40


 2068              	SIGN1:
 2069 0c60 52F804FB 		  _UNNEST
 2070              	
 2071              	//    #>	  ( w -- b u )
 2072              	// 	Prepare the outputDCB to be TYPE'd.
 2073              	
 2074 0c64 3E0C0000 		.word	_SIGN-MAPOFFSET
 2075 0c68 02       	_EDIGS:	.byte  2
 2076 0c69 233E     		.ascii "#>"
 2077 0c6b 00       		.p2align 2 	
 2078              	EDIGS:
 2079 0c6c 42F804ED 		_NEST
 2080 0c70 FFF75CFB 		BL	DROP
 2081 0c74 FFF782FD 		BL	HLD
 2082 0c78 FFF71CFB 		BL	AT
 2083 0c7c FFF7D2FE 		BL	PAD
 2084 0c80 FFF76EFB 		BL	OVER
 2085 0c84 FFF7C6FB 		BL	SUBB
 2086 0c88 52F804FB 		_UNNEST
 2087              	
 2088              	//    str	 ( n -- b u )
 2089              	// 	Convert a signed integer to a numeric string.
 2090              	
 2091              	// 	.word	_EDIGS-MAPOFFSET
 2092              	// _STRR	.byte  3
 2093              	// 	.ascii "str"
 2094              	// 	.p2align 2 	
 2095              	STRR:
 2096 0c8c 42F804ED 		_NEST
 2097 0c90 FFF754FB 		BL	DUPP
 2098 0c94 FFF736FB 		BL	TOR
 2099 0c98 FFF784FC 		BL	ABSS
 2100 0c9c FFF78AFF 		BL	BDIGS
 2101 0ca0 FFF7BEFF 		BL	DIGS
 2102 0ca4 FFF71CFB 		BL	RFROM
 2103 0ca8 FFF7CCFF 		BL	SIGN
 2104 0cac FFF7DEFF 		BL	EDIGS
 2105 0cb0 52F804FB 		_UNNEST
 2106              	
 2107              	//    HEX	 ( -- )
 2108              	// 	Use radix 16 as base for numeric conversions.
 2109              	
 2110 0cb4 680C0000 		.word	_EDIGS-MAPOFFSET
 2111 0cb8 03       	_HEX:	.byte  3
 2112 0cb9 484558   		.ascii "HEX"
 2113              		.p2align 2 	
 2114              	HEX:
 2115 0cbc 42F804ED 		_NEST
 2116 0cc0 FFF7AFFA 		_DOLIT
 2117 0cc4 10000000 		.word	16
 2118 0cc8 FFF720FD 		BL	BASE
 2119 0ccc FFF7E8FA 		BL	STORE
 2120 0cd0 52F804FB 		_UNNEST
 2121              	
 2122              	//    DECIMAL	( -- )
 2123              	// 	Use radix 10 as base for numeric conversions.
 2124              	
ARM GAS  stm32eforth.s 			page 41


 2125 0cd4 B80C0000 		.word	_HEX-MAPOFFSET
 2126 0cd8 07       	_DECIM:	.byte  7
 2127 0cd9 44454349 		.ascii "DECIMAL"
 2127      4D414C
 2128              		.p2align 2 	
 2129              	DECIM:
 2130 0ce0 42F804ED 		_NEST
 2131 0ce4 FFF79DFA 		_DOLIT
 2132 0ce8 0A000000 		.word	10
 2133 0cec FFF70EFD 		BL	BASE
 2134 0cf0 FFF7D6FA 		BL	STORE
 2135 0cf4 52F804FB 		_UNNEST
 2136              	
 2137              	// **************************************************************************
 2138              	//  Numeric input, single precision
 2139              	
 2140              	//    DIGIT?	( c base -- u t )
 2141              	// 	Convert a character to its numeric value. A flag indicates success.
 2142              	
 2143 0cf8 D80C0000 		.word	_DECIM-MAPOFFSET
 2144 0cfc 06       	_DIGTQ:	.byte  6
 2145 0cfd 44494749 		.ascii "DIGIT?"
 2145      543F
 2146 0d03 00       		.p2align 2 	
 2147              	DIGTQ:
 2148 0d04 42F804ED 		_NEST
 2149 0d08 FFF7FCFA 		BL	TOR
 2150 0d0c FFF789FA 		_DOLIT
 2151 0d10 30000000 		.word	'0'
 2152 0d14 FFF77EFB 		BL	SUBB
 2153 0d18 FFF783FA 		_DOLIT
 2154 0d1c 09000000 		.word	9
 2155 0d20 FFF71EFB 		BL	OVER
 2156 0d24 FFF75EFC 		BL	LESS
 2157 0d28 FFF79EFA 		BL	QBRAN
 2158 0d2c 500D0000 		.word	DGTQ1-MAPOFFSET
 2159 0d30 FFF777FA 		_DOLIT
 2160 0d34 07000000 		.word	7
 2161 0d38 FFF76CFB 		BL	SUBB
 2162 0d3c FFF7FEFA 		BL	DUPP
 2163 0d40 FFF76FFA 		_DOLIT
 2164 0d44 0A000000 		.word	10
 2165 0d48 FFF74CFC 		BL	LESS
 2166 0d4c FFF724FB 		BL	ORR
 2167              	DGTQ1:
 2168 0d50 FFF7F4FA 	  BL	DUPP
 2169 0d54 FFF7C4FA 		BL	RFROM
 2170 0d58 FFF738FC 		BL	ULESS
 2171 0d5c 52F804FB 		_UNNEST
 2172              	
 2173              	//    NUMBER?	( a -- n T | a F )
 2174              	// 	Convert a numberDCB to integer. Push a flag on tos.
 2175              	
 2176 0d60 FC0C0000 		.word	_DIGTQ-MAPOFFSET
 2177 0d64 07       	_NUMBQ:	.byte  7
 2178 0d65 4E554D42 		.ascii "NUMBER?"
 2178      45523F
ARM GAS  stm32eforth.s 			page 42


 2179              		.p2align 2 	
 2180              	NUMBQ:
 2181 0d6c 42F804ED 		_NEST
 2182 0d70 FFF7CCFC 		BL	BASE
 2183 0d74 FFF79EFA 		BL	AT
 2184 0d78 FFF7C4FA 		BL	TOR
 2185 0d7c FFF751FA 		_DOLIT
 2186 0d80 00000000 		.word	0
 2187 0d84 FFF7ECFA 		BL	OVER
 2188 0d88 FFF77CFC 		BL	COUNT
 2189 0d8c FFF7E8FA 		BL	OVER
 2190 0d90 FFF7A0FA 		BL	CAT
 2191 0d94 FFF745FA 		_DOLIT
 2192 0d98 5F000000 		.word	'_'
 2193 0d9c FFF70AFC 		BL	EQUAL
 2194 0da0 FFF762FA 		BL	QBRAN
 2195 0da4 BC0D0000 		.word	NUMQ1-MAPOFFSET
 2196 0da8 FFF788FF 		BL	HEX
 2197 0dac FFF7CEFA 		BL	SWAP
 2198 0db0 FFF756FB 		BL	ONEP
 2199 0db4 FFF7CAFA 		BL	SWAP
 2200 0db8 FFF75AFB 		BL	ONEM
 2201              	NUMQ1:
 2202 0dbc FFF7D0FA 	  BL	OVER
 2203 0dc0 FFF788FA 		BL	CAT
 2204 0dc4 FFF72DFA 		_DOLIT
 2205 0dc8 2D000000 		.word	'-'
 2206 0dcc FFF7F2FB 		BL	EQUAL
 2207 0dd0 FFF798FA 		BL	TOR
 2208 0dd4 FFF7BAFA 		BL	SWAP
 2209 0dd8 FFF78CFA 		BL	RAT
 2210 0ddc FFF71AFB 		BL	SUBB
 2211 0de0 FFF7B4FA 		BL	SWAP
 2212 0de4 FFF786FA 		BL	RAT
 2213 0de8 FFF70CFB 		BL	PLUS
 2214 0dec FFF792FB 		BL	QDUP
 2215 0df0 FFF73AFA 		BL	QBRAN
 2216 0df4 800E0000 		.word	NUMQ6-MAPOFFSET
 2217 0df8 FFF73AFB 		BL	ONEM
 2218 0dfc FFF782FA 		BL	TOR
 2219              	NUMQ2:
 2220 0e00 FFF79CFA 	  BL	DUPP
 2221 0e04 FFF77EFA 		BL	TOR
 2222 0e08 FFF764FA 		BL	CAT
 2223 0e0c FFF77EFC 		BL	BASE
 2224 0e10 FFF750FA 		BL	AT
 2225 0e14 FFF776FF 		BL	DIGTQ
 2226 0e18 FFF726FA 		BL	QBRAN
 2227 0e1c 640E0000 		.word	NUMQ4-MAPOFFSET
 2228 0e20 FFF794FA 		BL	SWAP
 2229 0e24 FFF772FC 		BL	BASE
 2230 0e28 FFF744FA 		BL	AT
 2231 0e2c FFF7FAFA 		BL	STAR
 2232 0e30 FFF7E8FA 		BL	PLUS
 2233 0e34 FFF754FA 		BL	RFROM
 2234 0e38 FFF712FB 		BL	ONEP
 2235 0e3c FFF705FA 		BL	DONXT
ARM GAS  stm32eforth.s 			page 43


 2236 0e40 000E0000 		.word	NUMQ2-MAPOFFSET
 2237 0e44 FFF756FA 		BL	RAT
 2238 0e48 FFF780FA 		BL	SWAP
 2239 0e4c FFF76EFA 		BL	DROP
 2240 0e50 FFF70AFA 		BL	QBRAN
 2241 0e54 5C0E0000 		.word	NUMQ3-MAPOFFSET
 2242 0e58 FFF79CFB 		BL	NEGAT
 2243              	NUMQ3:
 2244 0e5c FFF776FA 	  BL	SWAP
 2245 0e60 00F00CB8 		B.W	NUMQ5
 2246              	NUMQ4:
 2247 0e64 FFF73CFA 	  BL	RFROM
 2248 0e68 FFF73AFA 		BL	RFROM
 2249 0e6c FFF766FB 		BL	DDROP
 2250 0e70 FFF764FB 		BL	DDROP
 2251 0e74 FFF7D5F9 		_DOLIT
 2252 0e78 00000000 		.word	0
 2253              	NUMQ5:
 2254 0e7c FFF75EFA 	  BL	DUPP
 2255              	NUMQ6:
 2256 0e80 FFF72EFA 	  BL	RFROM
 2257 0e84 FFF75AFB 		BL	DDROP
 2258 0e88 FFF72AFA 		BL	RFROM
 2259 0e8c FFF73EFC 		BL	BASE
 2260 0e90 FFF706FA 		BL	STORE
 2261 0e94 52F804FB 		_UNNEST
 2262              	
 2263              	// **************************************************************************
 2264              	//  Basic I/O
 2265              	
 2266              	//    KEY	 ( -- c )
 2267              	// 	Wait for and return an input character.
 2268              	
 2269 0e98 640D0000 		.word	_NUMBQ-MAPOFFSET
 2270 0e9c 03       	_KEY:	.byte  3
 2271 0e9d 4B4559   		.ascii "KEY"
 2272              		.p2align 2 	
 2273              	KEY:
 2274 0ea0 42F804ED 		_NEST
 2275              	KEY1:
 2276 0ea4 FFF792F9 		BL	QRX
 2277 0ea8 FFF7DEF9 		BL	QBRAN
 2278 0eac A40E0000 		.word	KEY1-MAPOFFSET
 2279              	// CTRL-C reboot
 2280 0eb0 FFF744FA 		BL DUPP 
 2281 0eb4 FFF7B5F9 		BL DOLIT 
 2282 0eb8 03000000 		.word 3 
 2283 0ebc FFF77AFB 		BL EQUAL 
 2284 0ec0 FFF75EFB 		BL INVER
 2285 0ec4 FFF7D0F9 		BL QBRAN
 2286 0ec8 50010000 		.word REBOOT-MAPOFFSET 
 2287 0ecc 52F804FB 		_UNNEST
 2288              	
 2289              	//    SPACE	( -- )
 2290              	// 	Send the blank character to the output device.
 2291              	
 2292 0ed0 9C0E0000 		.word	_KEY-MAPOFFSET
ARM GAS  stm32eforth.s 			page 44


 2293 0ed4 05       	_SPACE:	.byte  5
 2294 0ed5 53504143 		.ascii "SPACE"
 2294      45
 2295 0eda 00BF     		.p2align 2 	
 2296              	SPACE:
 2297 0edc 42F804ED 		_NEST
 2298 0ee0 FFF7EEFA 		BL	BLANK
 2299 0ee4 FFF78CF9 		BL	EMIT
 2300 0ee8 52F804FB 		_UNNEST
 2301              	
 2302              	//    SPACES	( +n -- )
 2303              	// 	Send n spaces to the output device.
 2304              	
 2305 0eec D40E0000 		.word	_SPACE-MAPOFFSET
 2306 0ef0 06       	_SPACS:	.byte  6
 2307 0ef1 53504143 		.ascii "SPACES"
 2307      4553
 2308 0ef7 00       		.p2align 2 	
 2309              	SPACS:
 2310 0ef8 42F804ED 		_NEST
 2311 0efc FFF791F9 		_DOLIT
 2312 0f00 00000000 		.word	0
 2313 0f04 FFF786FB 		BL	MAX
 2314 0f08 FFF7FCF9 		BL	TOR
 2315 0f0c 00F002B8 		B.W	CHAR2
 2316              	CHAR1:
 2317 0f10 FFF7E4FF 		BL	SPACE
 2318              	CHAR2:
 2319 0f14 FFF799F9 		BL	DONXT
 2320 0f18 100F0000 		.word	CHAR1-MAPOFFSET
 2321 0f1c 52F804FB 		_UNNEST
 2322              	
 2323              	//    TYPE	( b u -- )
 2324              	// 	Output u characters from b.
 2325              	
 2326 0f20 F00E0000 		.word	_SPACS-MAPOFFSET
 2327 0f24 04       	_TYPEE:	.byte	4
 2328 0f25 54595045 		.ascii "TYPE"
 2329 0f29 0000BF   		.p2align 2 	
 2330              	TYPEE:
 2331 0f2c 42F804ED 		_NEST
 2332 0f30 FFF7E8F9 		BL  TOR   // ( a+1 -- R: u )
 2333 0f34 05E0     		B	TYPE2
 2334              	TYPE1:  
 2335 0f36 FFF7A5FB 		BL  COUNT
 2336 0f3a FFF71BFD 		BL	TCHAR
 2337 0f3e FFF75FF9 		BL	EMIT
 2338              	TYPE2:  
 2339 0f42 FFF782F9 		BL  DONXT  
 2340 0f46 360F0000 		.word	TYPE1-MAPOFFSET
 2341 0f4a FFF7EFF9 		BL	DROP
 2342 0f4e 52F804FB 		_UNNEST
 2343              	
 2344              	//    CR	  ( -- )
 2345              	// 	Output a carriage return and a line feed.
 2346              	
 2347 0f52 240F0000 		.word	_TYPEE-MAPOFFSET
ARM GAS  stm32eforth.s 			page 45


 2348 0f56 02       	_CR:	.byte  2
 2349 0f57 4352     		.ascii "CR"
 2350 0f59 0000BF   		.p2align 2 	
 2351              	CR:
 2352 0f5c 42F804ED 		_NEST
 2353 0f60 FFF75FF9 		_DOLIT
 2354 0f64 0D000000 		.word	CRR
 2355 0f68 FFF74AF9 		BL	EMIT
 2356 0f6c FFF759F9 		_DOLIT
 2357 0f70 0A000000 		.word	LF
 2358 0f74 FFF744F9 		BL	EMIT
 2359 0f78 52F804FB 		_UNNEST
 2360              	
 2361              	//    do_$	( -- a )
 2362              	// 	Return the address of a compiled string.
 2363              	//  adjust return address to skip over it.
 2364              	
 2365              	// 	.word	_CR-MAPOFFSET
 2366              	// _DOSTR	.byte  COMPO+3
 2367              	// 	.ascii "do$$"
 2368              	// 	.p2align 2 	
 2369              	DOSTR:
 2370 0f7c 42F804ED 		_NEST     
 2371              	/* compiled string address is 2 levels deep */
 2372 0f80 FFF7AEF9 		BL	RFROM	// { -- a1 }
 2373 0f84 FFF7ACF9 		BL	RFROM	//  {a1 -- a1 a2 } b0 set
 2374 0f88 FFF772FA 		BL	ONEM	//  clear b0
 2375 0f8c FFF7D6F9 		BL	DUPP	// {a1 a2 -- a1 a2 a2 }
 2376 0f90 FFF778FB 		BL	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2377 0f94 FFF736FA 		BL	PLUS	// { -- a1 a2 a2+1+c }
 2378 0f98 FFF7E0FC 		BL	ALGND	//  end of string
 2379 0f9c FFF760FA 		BL	ONEP	//  restore b0, this result in return address 2 level deep.
 2380 0fa0 FFF7B0F9 		BL	TOR		//  address after string { -- a1 a2 }
 2381 0fa4 FFF7D2F9 		BL	SWAP	//  count tugged
 2382 0fa8 FFF7ACF9 		BL	TOR     //  ( -- a2) is string address
 2383 0fac 52F804FB 		_UNNEST
 2384              	
 2385              	//    $"|	( -- a )
 2386              	// 	Run time routine compiled by _". Return address of a compiled string.
 2387              	
 2388              	// 	.word	_DOSTR-MAPOFFSET
 2389              	// _STRQP	.byte  COMPO+3
 2390              	// 	.ascii "$\"|"
 2391              	// 	.p2align 2 	
 2392              	STRQP:
 2393 0fb0 42F804ED 		_NEST
 2394 0fb4 FFF7E2FF 		BL	DOSTR
 2395 0fb8 52F804FB 		_UNNEST			// force a call to dostr
 2396              	
 2397              	//    .$	( a -- )
 2398              	// 	Run time routine of ." . Output a compiled string.
 2399              	
 2400              	// 	.word	_STRQP-MAPOFFSET
 2401              	// _DOTST	.byte  COMPO+2
 2402              	// 	.ascii ".$$"
 2403              	// 	.p2align 2 	
 2404              	DOTST:
ARM GAS  stm32eforth.s 			page 46


 2405 0fbc 42F804ED 		_NEST
 2406 0fc0 FFF760FB 		BL	COUNT // ( -- a+1 c )
 2407 0fc4 FFF7B2FF 		BL	TYPEE
 2408 0fc8 52F804FB 		_UNNEST
 2409              	
 2410              	//    ."|	( -- )
 2411              	// 	Run time routine of ." . Output a compiled string.
 2412              	
 2413              	// 	.word	_DOTST-MAPOFFSET
 2414              	// _DOTQP	.byte  COMPO+3
 2415              	// 	.ascii ".""|"
 2416              	// 	.p2align 2 	
 2417              	DOTQP:
 2418 0fcc 42F804ED 		_NEST
 2419 0fd0 FFF7D4FF 		BL	DOSTR
 2420 0fd4 FFF7F2FF 		BL	DOTST
 2421 0fd8 52F804FB 		_UNNEST
 2422              	
 2423              	//    .R	  ( n +n -- )
 2424              	// 	Display an integer in a field of n columns, right justified.
 2425              	
 2426 0fdc 560F0000 		.word	_CR-MAPOFFSET
 2427 0fe0 02       	_DOTR:	.byte  2
 2428 0fe1 2E52     		.ascii ".R"
 2429 0fe3 00       		.p2align 2 	
 2430              	DOTR:
 2431 0fe4 42F804ED 		_NEST
 2432 0fe8 FFF78CF9 		BL	TOR
 2433 0fec FFF74EFE 		BL	STRR
 2434 0ff0 FFF776F9 		BL	RFROM
 2435 0ff4 FFF7B4F9 		BL	OVER
 2436 0ff8 FFF70CFA 		BL	SUBB
 2437 0ffc FFF77CFF 		BL	SPACS
 2438 1000 FFF794FF 		BL	TYPEE
 2439 1004 52F804FB 		_UNNEST
 2440              	
 2441              	//    U.R	 ( u +n -- )
 2442              	// 	Display an unsigned integer in n column, right justified.
 2443              	
 2444 1008 E00F0000 		.word	_DOTR-MAPOFFSET
 2445 100c 03       	_UDOTR:	.byte  3
 2446 100d 552E52   		.ascii "U.R"
 2447              		.p2align 2 	
 2448              	UDOTR:
 2449 1010 42F804ED 		_NEST
 2450 1014 FFF776F9 		BL	TOR
 2451 1018 FFF7CCFD 		BL	BDIGS
 2452 101c FFF700FE 		BL	DIGS
 2453 1020 FFF724FE 		BL	EDIGS
 2454 1024 FFF75CF9 		BL	RFROM
 2455 1028 FFF79AF9 		BL	OVER
 2456 102c FFF7F2F9 		BL	SUBB
 2457 1030 FFF762FF 		BL	SPACS
 2458 1034 FFF77AFF 		BL	TYPEE
 2459 1038 52F804FB 		_UNNEST
 2460              	
 2461              	//    U.	  ( u -- )
ARM GAS  stm32eforth.s 			page 47


 2462              	// 	Display an unsigned integer in free format.
 2463              	
 2464 103c 0C100000 		.word	_UDOTR-MAPOFFSET
 2465 1040 02       	_UDOT:	.byte  2
 2466 1041 552E     		.ascii "U."
 2467 1043 00       		.p2align 2 	
 2468              	UDOT:
 2469 1044 42F804ED 		_NEST
 2470 1048 FFF7B4FD 		BL	BDIGS
 2471 104c FFF7E8FD 		BL	DIGS
 2472 1050 FFF70CFE 		BL	EDIGS
 2473 1054 FFF742FF 		BL	SPACE
 2474 1058 FFF768FF 		BL	TYPEE
 2475 105c 52F804FB 		_UNNEST
 2476              	
 2477              	//    .	   ( w -- )
 2478              	// 	Display an integer in free format, preceeded by a space.
 2479              	
 2480 1060 40100000 		.word	_UDOT-MAPOFFSET
 2481 1064 01       	_DOT:	.byte  1
 2482 1065 2E       		.ascii "."
 2483 1066 00BF     		.p2align 2 	
 2484              	DOT:
 2485 1068 42F804ED 		_NEST
 2486 106c FFF74EFB 		BL	BASE
 2487 1070 FFF720F9 		BL	AT
 2488 1074 FFF7D5F8 		_DOLIT
 2489 1078 0A000000 		.word	10
 2490 107c FFF796F9 		BL	XORR			// ?decimal
 2491 1080 FFF7F2F8 		BL	QBRAN
 2492 1084 90100000 		.word	DOT1-MAPOFFSET
 2493 1088 FFF7DCFF 		BL	UDOT
 2494 108c 52F804FB 		_UNNEST			// no,display unsigned
 2495              	DOT1:
 2496 1090 FFF7FCFD 	    BL	STRR
 2497 1094 FFF722FF 		BL	SPACE
 2498 1098 FFF748FF 		BL	TYPEE
 2499 109c 52F804FB 		_UNNEST			// yes, display signed
 2500              	
 2501              	//    ?	   ( a -- )
 2502              	// 	Display the contents in a memory cell.
 2503              	
 2504 10a0 64100000 		.word	_DOT-MAPOFFSET
 2505 10a4 01       	_QUEST:	.byte  1
 2506 10a5 3F       		.ascii "?"
 2507 10a6 00BF     		.p2align 2 	
 2508              	QUEST:
 2509 10a8 42F804ED 		_NEST
 2510 10ac FFF702F9 		BL	AT
 2511 10b0 FFF7DAFF 		BL	DOT
 2512 10b4 52F804FB 		_UNNEST
 2513              	
 2514              	// **************************************************************************
 2515              	//  Parsing
 2516              	
 2517              	//    parse	( b u c -- b u delta //  string> )
 2518              	// 	Scan word delimited by c. Return found string and its offset.
ARM GAS  stm32eforth.s 			page 48


 2519              	
 2520              	// 	.word	_QUEST-MAPOFFSET
 2521              	// _PARS	.byte  5
 2522              	// 	.ascii "parse"
 2523              	// 	.p2align 2 	
 2524              	PARS:
 2525 10b8 42F804ED 		_NEST
 2526 10bc FFF72BFB 		BL	TEMP
 2527 10c0 FFF7EEF8 		BL	STORE
 2528 10c4 FFF74CF9 		BL	OVER
 2529 10c8 FFF71CF9 		BL	TOR
 2530 10cc FFF736F9 		BL	DUPP
 2531 10d0 FFF7CAF8 		BL	QBRAN
 2532 10d4 C6110000 		.word	PARS8-MAPOFFSET
 2533 10d8 FFF7CAF9 		BL	ONEM
 2534 10dc FFF71BFB 		BL	TEMP
 2535 10e0 FFF7E8F8 		BL	AT
 2536 10e4 FFF7ECF9 		BL	BLANK
 2537 10e8 FFF764FA 		BL	EQUAL
 2538 10ec FFF7BCF8 		BL	QBRAN
 2539 10f0 40110000 		.word	PARS3-MAPOFFSET
 2540 10f4 FFF706F9 		BL	TOR
 2541              	PARS1:
 2542 10f8 FFF7E2F9 		BL	BLANK
 2543 10fc FFF730F9 		BL	OVER
 2544 1100 FFF7E8F8 		BL	CAT			// skip leading blanks 
 2545 1104 FFF786F9 		BL	SUBB
 2546 1108 FFF732F9 		BL	ZLESS
 2547 110c FFF738FA 		BL	INVER
 2548 1110 FFF7AAF8 		BL	QBRAN
 2549 1114 3C110000 		.word	PARS2-MAPOFFSET
 2550 1118 FFF7A2F9 		BL	ONEP
 2551 111c FFF795F8 		BL	DONXT
 2552 1120 F8100000 		.word	PARS1-MAPOFFSET
 2553 1124 FFF7DCF8 		BL	RFROM
 2554 1128 FFF700F9 		BL	DROP
 2555 112c FFF779F8 		_DOLIT
 2556 1130 00000000 		.word	0
 2557 1134 FFF702F9 		BL	DUPP
 2558 1138 52F804FB 		_UNNEST
 2559              	PARS2:
 2560 113c FFF7D0F8 	  BL	RFROM
 2561              	PARS3:
 2562 1140 FFF70EF9 		BL	OVER
 2563 1144 FFF702F9 		BL	SWAP
 2564 1148 FFF7DCF8 		BL	TOR
 2565              	PARS4:
 2566 114c FFF7E3FA 		BL	TEMP
 2567 1150 FFF7B0F8 		BL	AT
 2568 1154 FFF704F9 		BL	OVER
 2569 1158 FFF7BCF8 		BL	CAT
 2570 115c FFF75AF9 		BL	SUBB			// scan for delimiter
 2571 1160 FFF7D9FA 		BL	TEMP
 2572 1164 FFF7A6F8 		BL	AT
 2573 1168 FFF7AAF9 		BL	BLANK
 2574 116c FFF722FA 		BL	EQUAL
 2575 1170 FFF77AF8 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 49


 2576 1174 7C110000 		.word	PARS5-MAPOFFSET
 2577 1178 FFF7FAF8 		BL	ZLESS
 2578              	PARS5:
 2579 117c FFF774F8 		BL	QBRAN
 2580 1180 9A110000 		.word	PARS6-MAPOFFSET
 2581 1184 FFF76CF9 		BL	ONEP
 2582 1188 FFF75FF8 		BL	DONXT
 2583 118c 4C110000 		.word	PARS4-MAPOFFSET
 2584 1190 FFF7D4F8 		BL	DUPP
 2585 1194 FFF7B6F8 		BL	TOR
 2586 1198 09E0     		B	PARS7
 2587              	PARS6:
 2588 119a FFF7A1F8 		BL	RFROM
 2589 119e FFF7C5F8 		BL	DROP
 2590 11a2 FFF7CBF8 		BL	DUPP
 2591 11a6 FFF75BF9 		BL	ONEP
 2592 11aa FFF7ABF8 		BL	TOR
 2593              	PARS7:
 2594 11ae FFF7D7F8 		BL	OVER
 2595 11b2 FFF72FF9 		BL	SUBB
 2596 11b6 FFF793F8 		BL	RFROM
 2597 11ba FFF791F8 		BL	RFROM
 2598 11be FFF729F9 		BL	SUBB
 2599 11c2 52F804FB 		_UNNEST
 2600              	PARS8:
 2601 11c6 FFF7CBF8 		BL	OVER
 2602 11ca FFF789F8 		BL	RFROM
 2603 11ce FFF721F9 		BL	SUBB
 2604 11d2 52F804FB 		_UNNEST
 2605              	
 2606              	//    PARSE	( c -- b u //  string> )
 2607              	// 	Scan input stream and return counted string delimited by c.
 2608              	
 2609 11d6 A4100000 		.word	_QUEST-MAPOFFSET
 2610 11da 05       	_PARSE:	.byte  5
 2611 11db 50415253 		.ascii "PARSE"
 2611      45
 2612              		.p2align 2 	
 2613              	PARSE:
 2614 11e0 42F804ED 		_NEST
 2615 11e4 FFF78EF8 		BL	TOR
 2616 11e8 FFF728FC 		BL	TIB
 2617 11ec FFF7A8FA 		BL	INN
 2618 11f0 FFF760F8 		BL	AT
 2619 11f4 FFF706F9 		BL	PLUS			// current input buffer pointer
 2620 11f8 FFF7ACFA 		BL	NTIB
 2621 11fc FFF75AF8 		BL	AT
 2622 1200 FFF79EFA 		BL	INN
 2623 1204 FFF756F8 		BL	AT
 2624 1208 FFF704F9 		BL	SUBB			// remaining count
 2625 120c FFF768F8 		BL	RFROM
 2626 1210 FFF752FF 		BL	PARS
 2627 1214 FFF794FA 		BL	INN
 2628 1218 FFF710FA 		BL	PSTOR
 2629 121c 52F804FB 		_UNNEST
 2630              	
 2631              	//    .(	  ( -- )
ARM GAS  stm32eforth.s 			page 50


 2632              	// 	Output following string up to next ) .
 2633              	
 2634 1220 DA110000 		.word	_PARSE-MAPOFFSET
 2635 1224 82       	_DOTPR:	.byte  IMEDD+2
 2636 1225 2E28     		.ascii ".("
 2637 1227 00       		.p2align 2 	
 2638              	DOTPR:
 2639 1228 42F804ED 		_NEST
 2640 122c FEF7F9FF 		_DOLIT
 2641 1230 29000000 		.word	')'
 2642 1234 FFF7D4FF 		BL	PARSE
 2643 1238 FFF778FE 		BL	TYPEE
 2644 123c 52F804FB 		_UNNEST
 2645              	
 2646              	//    (	   ( -- )
 2647              	// 	Ignore following string up to next ) . A comment.
 2648              	
 2649 1240 24120000 		.word	_DOTPR-MAPOFFSET
 2650 1244 81       	_PAREN:	.byte  IMEDD+1
 2651 1245 28       		.ascii "("
 2652 1246 00BF     		.p2align 2 	
 2653              	PAREN:
 2654 1248 42F804ED 		_NEST
 2655 124c FEF7E9FF 		_DOLIT
 2656 1250 29000000 		.word	')'
 2657 1254 FFF7C4FF 		BL	PARSE
 2658 1258 FFF770F9 		BL	DDROP
 2659 125c 52F804FB 		_UNNEST
 2660              	
 2661              	//    \	   ( -- )
 2662              	// 	Ignore following text till the end of line.
 2663              	
 2664 1260 44120000 		.word	_PAREN-MAPOFFSET
 2665 1264 81       	_BKSLA:	.byte  IMEDD+1
 2666 1265 27       		.byte	'\'
 2667 1266 00BF     		.p2align 2 	
 2668              	BKSLA:
 2669 1268 42F804ED 		_NEST
 2670 126c FFF772FA 		BL	NTIB
 2671 1270 FFF720F8 		BL	AT
 2672 1274 FFF764FA 		BL	INN
 2673 1278 FFF712F8 		BL	STORE
 2674 127c 52F804FB 		_UNNEST
 2675              	
 2676              	//    CHAR	( -- c )
 2677              	// 	Parse next word and return its first character.
 2678              	
 2679 1280 64120000 		.word	_BKSLA-MAPOFFSET
 2680 1284 04       	_CHAR:	.byte  4
 2681 1285 43484152 		.ascii "CHAR"
 2682 1289 0000BF   		.p2align 2 	
 2683              	CHAR:
 2684 128c 42F804ED 		_NEST
 2685 1290 FFF716F9 		BL	BLANK
 2686 1294 FFF7A4FF 		BL	PARSE
 2687 1298 FFF748F8 		BL	DROP
 2688 129c FFF71AF8 		BL	CAT
ARM GAS  stm32eforth.s 			page 51


 2689 12a0 52F804FB 		_UNNEST
 2690              	
 2691              	//    WORD	( c -- a //  string> )
 2692              	// 	Parse a word from input stream and copy it to code dictionary.
 2693              	
 2694 12a4 84120000 		.word	_CHAR-MAPOFFSET
 2695 12a8 04       	_WORDD:	.byte  4
 2696 12a9 574F5244 		.ascii "WORD"
 2697 12ad 0000BF   		.p2align 2 	
 2698              	WORDD:
 2699 12b0 42F804ED 		_NEST
 2700 12b4 FFF794FF 		BL	PARSE
 2701 12b8 FFF7A8FB 		BL	HERE
 2702 12bc FFF7F0F8 		BL	CELLP
 2703 12c0 FFF71AFC 		BL	PACKS
 2704 12c4 52F804FB 		_UNNEST
 2705              	
 2706              	//    TOKEN	( -- a //  string> )
 2707              	// 	Parse a word from input stream and copy it to name dictionary.
 2708              	
 2709 12c8 A8120000 		.word	_WORDD-MAPOFFSET
 2710 12cc 05       	_TOKEN:	.byte  5
 2711 12cd 544F4B45 		.ascii "TOKEN"
 2711      4E
 2712 12d2 00BF     		.p2align 2 	
 2713              	TOKEN:
 2714 12d4 42F804ED 		_NEST
 2715 12d8 FFF7F2F8 		BL	BLANK
 2716 12dc FFF7E8FF 		BL	WORDD
 2717 12e0 52F804FB 		_UNNEST
 2718              	
 2719              	// **************************************************************************
 2720              	//  Dictionary search
 2721              	
 2722              	//    NAME>	( na -- ca )
 2723              	// 	Return a code address given a name address.
 2724              	
 2725 12e4 CC120000 		.word	_TOKEN-MAPOFFSET
 2726 12e8 05       	_NAMET:	.byte  5
 2727 12e9 4E414D45 		.ascii "NAME>"
 2727      3E
 2728 12ee 00BF     		.p2align 2 	
 2729              	NAMET:
 2730 12f0 42F804ED 		_NEST
 2731 12f4 FFF7C6F9 		BL	COUNT
 2732 12f8 FEF793FF 		_DOLIT
 2733 12fc 1F000000 		.word	0x1F
 2734 1300 FFF740F8 		BL	ANDD
 2735 1304 FFF77EF8 		BL	PLUS
 2736 1308 FFF728FB 		BL	ALGND
 2737 130c 52F804FB 		_UNNEST
 2738              	
 2739              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2740              	// 	Compare u bytes in two strings. Return 0 if identical.
 2741              	//
 2742              	//  Picatout 2020-12-01, 
 2743              	//      Because of problem with .align directive that
ARM GAS  stm32eforth.s 			page 52


 2744              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2745              	// 		words  to do a byte by byte comparison. 
 2746              	//
 2747 1310 E8120000 		.word	_NAMET-MAPOFFSET
 2748 1314 05       	_SAMEQ:	.byte  5
 2749 1315 53414D45 		.ascii "SAME?"
 2749      3F
 2750 131a 00BF     		.p2align 2	
 2751              	SAMEQ:
 2752 131c 42F804ED 		_NEST
 2753 1320 FEF7F0FF 		BL	TOR
 2754 1324 00F01EB8 		B.W	SAME2
 2755              	SAME1:
 2756 1328 FFF71AF8 		BL	OVER  // ( a1 a2 -- a1 a2 a1 )
 2757 132c FEF7E2FF 		BL	RAT   // a1 a2 a1 u 
 2758 1330 FFF768F8 		BL	PLUS  // a1 a2 a1+u 
 2759 1334 FEF7CEFF 		BL	CAT	   // a1 a2 c1    		
 2760 1338 FFF712F8 		BL	OVER  // a1 a2 c1 a2 
 2761 133c FEF7DAFF 		BL	RAT    
 2762 1340 FFF760F8 		BL	PLUS    
 2763 1344 FEF7C6FF 		BL	CAT	  // a1 a2 c1 c2
 2764 1348 FFF764F8 		BL	SUBB  
 2765 134c FFF7E2F8 		BL	QDUP
 2766 1350 FEF78AFF 		BL	QBRAN
 2767 1354 64130000 		.word	SAME2-MAPOFFSET
 2768 1358 FEF7C2FF 		BL	RFROM
 2769 135c FEF7E6FF 		BL	DROP
 2770 1360 52F804FB 		_UNNEST	// strings not equal
 2771              	SAME2:
 2772 1364 FEF771FF 		BL	DONXT
 2773 1368 28130000 		.word	SAME1-MAPOFFSET
 2774 136c FEF759FF 		_DOLIT
 2775 1370 00000000 		.word	0
 2776 1374 52F804FB 		_UNNEST	// strings equal
 2777              	
 2778              	//    find	( a na -- ca na | a F )
 2779              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2780              	
 2781              	//  Picatout 2020-12-01,  
 2782              	//		Modified from original. See comment for word "SAME?" 
 2783              	
 2784              	// 	.word	_SAMEQ-MAPOFFSET
 2785              	// _FIND	.byte  4
 2786              	// 	.ascii "find"
 2787              	// 	.p2align 2 	
 2788              	FIND:
 2789 1378 42F804ED 		_NEST
 2790 137c FEF7E6FF 		BL	SWAP			// na a	
 2791 1380 FFF780F9 		BL	COUNT			// na a+1 count
 2792 1384 FEF7DAFF 		BL	DUPP 
 2793 1388 FFF7C5F9 		BL	TEMP
 2794 138c FEF788FF 		BL	STORE			// na a+1 count 
 2795 1390 FEF7B8FF 		BL  TOR		// na a+1  R: count  
 2796 1394 FEF7DAFF 		BL	SWAP			// a+1 na
 2797              	FIND1:
 2798 1398 FEF7D0FF 		BL	DUPP			// a+1 na na
 2799 139c FEF764FF 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 53


 2800 13a0 E8130000 		.word	FIND6-MAPOFFSET	// end of vocabulary
 2801 13a4 FEF7CAFF 		BL	DUPP			// a+1 na na
 2802 13a8 FEF794FF 		BL	CAT			// a+1 na name1
 2803 13ac FEF739FF 		_DOLIT
 2804 13b0 1FFFFFFF 		.word	MASKK
 2805 13b4 FEF7E6FF 		BL	ANDD
 2806 13b8 FEF79CFF 		BL	RAT			// a+1 na name1 count 
 2807 13bc FEF7F6FF 		BL	XORR			// a+1 na,  same length?
 2808 13c0 FEF752FF 		BL	QBRAN
 2809 13c4 D4130000 		.word	FIND2-MAPOFFSET
 2810 13c8 FFF772F8 		BL	CELLM			// a+1 la
 2811 13cc FEF772FF 		BL	AT			// a+1 next_na
 2812 13d0 FFF7E2BF 		B.w	FIND1			// try next word
 2813              	FIND2:   
 2814 13d4 FFF744F8 		BL	ONEP			// a+1 na+1
 2815 13d8 FFF79DF9 		BL	TEMP
 2816 13dc FEF76AFF 		BL	AT			// a+1 na+1 count
 2817 13e0 FFF79CFF 		BL	SAMEQ		// a+1 na+1 ? 
 2818              	FIND3:	
 2819 13e4 00F00CB8 		B.w	FIND4
 2820              	FIND6:	
 2821 13e8 FEF77AFF 		BL	RFROM			// a+1 0 name1 -- , no match
 2822 13ec FEF79EFF 		BL	DROP			// a+1 0
 2823 13f0 FEF7ACFF 		BL	SWAP			// 0 a+1
 2824 13f4 FFF73CF8 		BL	ONEM			// 0 a
 2825 13f8 FEF7A8FF 		BL	SWAP			// a 0 
 2826 13fc 52F804FB 		_UNNEST			// return without a match
 2827              	FIND4:	
 2828 1400 FEF732FF 		BL	QBRAN			// a+1 na+1
 2829 1404 18140000 		.word	FIND5-MAPOFFSET	// found a match
 2830 1408 FFF732F8 		BL	ONEM			// a+1 na
 2831 140c FFF750F8 		BL	CELLM			// a+4 la
 2832 1410 FEF750FF 		BL	AT			// a+1 next_na
 2833 1414 FFF7C0BF 		B.w	FIND1			// compare next name
 2834              	FIND5:	
 2835 1418 FEF762FF 		BL	RFROM			// a+1 na+1 count
 2836 141c FEF786FF 		BL	DROP			// a+1 na+1
 2837 1420 FEF794FF 		BL	SWAP			// na+1 a+1
 2838 1424 FEF782FF 		BL	DROP			// na+1
 2839 1428 FFF722F8 		BL	ONEM			// na
 2840 142c FEF786FF 		BL	DUPP			// na na
 2841 1430 FFF75EFF 		BL	NAMET			// na ca
 2842 1434 FEF78AFF 		BL	SWAP			// ca na
 2843 1438 52F804FB 		_UNNEST			//  return with a match
 2844              	
 2845              	//    NAME?	( a -- ca na | a F )
 2846              	// 	Search all context vocabularies for a string.
 2847              	
 2848 143c 14130000 		.word	_SAMEQ-MAPOFFSET
 2849 1440 05       	_NAMEQ:	.byte  5
 2850 1441 4E414D45 		.ascii "NAME?"
 2850      3F
 2851 1446 00BF     		.p2align 2 	
 2852              	NAMEQ:
 2853 1448 42F804ED 		_NEST
 2854 144c FFF7A2F9 		BL	CNTXT
 2855 1450 FEF730FF 		BL	AT
ARM GAS  stm32eforth.s 			page 54


 2856 1454 FFF790FF 		BL	FIND
 2857 1458 52F804FB 		_UNNEST
 2858              	
 2859              	// **************************************************************************
 2860              	//  Terminal input
 2861              	
 2862              	//    	  ( bot eot cur -- bot eot cur )
 2863              	// 	Backup the cursor by one character.
 2864              	
 2865              	// 	.word	_NAMEQ-MAPOFFSET
 2866              	// _BKSP	.byte  2
 2867              	// 	.ascii "^H"
 2868              	// 	.p2align 2 	
 2869              	BKSP:
 2870 145c 42F804ED 		_NEST
 2871 1460 FEF750FF 		BL	TOR
 2872 1464 FEF77CFF 		BL	OVER
 2873 1468 FEF73AFF 		BL	RFROM
 2874 146c FEF76EFF 		BL	SWAP
 2875 1470 FEF776FF 		BL	OVER
 2876 1474 FEF79AFF 		BL	XORR
 2877 1478 FEF7F6FE 		BL	QBRAN
 2878 147c A4140000 		.word	BACK1-MAPOFFSET
 2879 1480 FEF7CFFE 		_DOLIT
 2880 1484 08000000 		.word	BKSPP
 2881 1488 FEF7BAFE 		BL	TECHO
 2882              	// 	BL	ATEXE
 2883 148c FEF7F0FF 		BL	ONEM
 2884 1490 FFF716F8 		BL	BLANK
 2885 1494 FEF7B4FE 		BL	TECHO
 2886              	// 	BL	ATEXE
 2887 1498 FEF7C3FE 		_DOLIT
 2888 149c 08000000 		.word	BKSPP
 2889 14a0 FEF7AEFE 		BL	TECHO
 2890              	// 	BL	ATEXE
 2891              	BACK1:
 2892 14a4 52F804FB 		  _UNNEST
 2893              	
 2894              	//    TAP	 ( bot eot cur c -- bot eot cur )
 2895              	// 	Accept and echo the key stroke and bump the cursor.
 2896              	
 2897              	// 	.word	_BKSP-MAPOFFSET
 2898              	// _TAP	.byte  3
 2899              	// 	.ascii "TAP"
 2900              	// 	.p2align 2 	
 2901              	TAP:
 2902 14a8 42F804ED 		_NEST
 2903 14ac FEF746FF 		BL	DUPP
 2904 14b0 FEF7A6FE 		BL	TECHO
 2905              	// 	BL	ATEXE
 2906 14b4 FEF754FF 		BL	OVER
 2907 14b8 FEF702FF 		BL	CSTOR
 2908 14bc FEF7D0FF 		BL	ONEP
 2909 14c0 52F804FB 		_UNNEST
 2910              	
 2911              	//    kTAP	( bot eot cur c -- bot eot cur )
 2912              	// 	Process a key stroke, CR or backspace.
ARM GAS  stm32eforth.s 			page 55


 2913              	
 2914              	// 	.word	_TAP-MAPOFFSET
 2915              	// _KTAP	.byte  4
 2916              	// 	.ascii "kTAP"
 2917              	// 	.p2align 2 	
 2918              	KTAP:
 2919              	TTAP:
 2920 14c4 42F804ED 		_NEST
 2921 14c8 FEF738FF 		BL	DUPP
 2922 14cc FEF7A9FE 		_DOLIT
 2923 14d0 0D000000 		.word	CRR
 2924 14d4 FEF76AFF 		BL	XORR
 2925 14d8 FEF7C6FE 		BL	QBRAN
 2926 14dc 0C150000 		.word	KTAP2-MAPOFFSET
 2927 14e0 FEF79FFE 		_DOLIT
 2928 14e4 08000000 		.word	BKSPP
 2929 14e8 FEF760FF 		BL	XORR
 2930 14ec FEF7BCFE 		BL	QBRAN
 2931 14f0 04150000 		.word	KTAP1-MAPOFFSET
 2932 14f4 FEF7E4FF 		BL	BLANK
 2933 14f8 FFF7D6FF 		BL	TAP
 2934 14fc 52F804FB 		_UNNEST
 2935 1500 00000000 		.word	0			// patch
 2936              	KTAP1:
 2937 1504 FFF7AAFF 	  BL	BKSP
 2938 1508 52F804FB 		_UNNEST
 2939              	KTAP2:
 2940 150c FEF70EFF 	  BL	DROP
 2941 1510 FEF71CFF 		BL	SWAP
 2942 1514 FEF70AFF 		BL	DROP
 2943 1518 FEF710FF 		BL	DUPP
 2944 151c 52F804FB 		_UNNEST
 2945              	
 2946              	//    ACCEPT	( b u -- b u )
 2947              	// 	Accept characters to input buffer. Return with actual count.
 2948              	
 2949 1520 40140000 		.word	_NAMEQ-MAPOFFSET
 2950 1524 06       	_ACCEP:	.byte  6
 2951 1525 41434345 		.ascii "ACCEPT"
 2951      5054
 2952 152b 00       		.p2align 2 	
 2953              	ACCEP:
 2954 152c 42F804ED 		_NEST
 2955 1530 FEF716FF 		BL	OVER
 2956 1534 FEF766FF 		BL	PLUS
 2957 1538 FEF712FF 		BL	OVER
 2958              	ACCP1:
 2959 153c FFF708F8 	  BL	DDUP
 2960 1540 FEF734FF 		BL	XORR
 2961 1544 FEF790FE 		BL	QBRAN
 2962 1548 78150000 		.word	ACCP4-MAPOFFSET
 2963 154c FFF7A8FC 		BL	KEY
 2964 1550 FEF7F4FE 		BL	DUPP
 2965 1554 FEF7B4FF 		BL	BLANK
 2966 1558 FEF763FE 		_DOLIT
 2967 155c 7F000000 		.word	127
 2968 1560 FFF742F9 		BL	WITHI
ARM GAS  stm32eforth.s 			page 56


 2969 1564 FEF780FE 		BL	QBRAN
 2970 1568 72150000 		.word	ACCP2-MAPOFFSET
 2971 156c FFF79CFF 		BL	TAP
 2972 1570 01E0     		B	ACCP3
 2973              	ACCP2:
 2974 1572 FFF7A7FF 	  BL	KTAP
 2975              	// 	BL	ATEXE
 2976              	ACCP3:	  
 2977 1576 E1E7     		B	ACCP1
 2978              	ACCP4:
 2979 1578 FEF7D8FE 	  BL	DROP
 2980 157c FEF7F0FE 		BL	OVER
 2981 1580 FEF748FF 		BL	SUBB
 2982 1584 52F804FB 		_UNNEST
 2983              	
 2984              	//    QUERY	( -- )
 2985              	// 	Accept input stream to terminal input buffer.
 2986              	
 2987 1588 24150000 		.word	_ACCEP-MAPOFFSET
 2988 158c 05       	_QUERY:	.byte  5
 2989 158d 51554552 		.ascii "QUERY"
 2989      59
 2990 1592 00BF     		.p2align 2 	
 2991              	QUERY:
 2992 1594 42F804ED 		_NEST
 2993 1598 FFF750FA 		BL	TIB
 2994 159c FEF741FE 		_DOLIT
 2995 15a0 50000000 		.word	80
 2996 15a4 FFF7C2FF 		BL	ACCEP
 2997 15a8 FFF7D4F8 		BL	NTIB
 2998 15ac FEF778FE 		BL	STORE
 2999 15b0 FEF7BCFE 		BL	DROP
 3000 15b4 FEF735FE 		_DOLIT
 3001 15b8 00000000 		.word	0
 3002 15bc FFF7C0F8 		BL	INN
 3003 15c0 FEF76EFE 		BL	STORE
 3004 15c4 52F804FB 		_UNNEST
 3005              	
 3006              	// **************************************************************************
 3007              	//  Error handling
 3008              	
 3009              	//    ABORT	( a -- )
 3010              	// 	Reset data stack and jump to QUIT.
 3011              	
 3012 15c8 8C150000 		.word	_QUERY-MAPOFFSET
 3013 15cc 05       	_ABORT:	.byte  5
 3014 15cd 41424F52 		.ascii "ABORT"
 3014      54
 3015 15d2 00BF     		.p2align 2 	
 3016              	ABORT:
 3017 15d4 42F804ED 		_NEST
 3018 15d8 FFF780FC 		BL	SPACE
 3019 15dc FFF752F8 		BL	COUNT
 3020 15e0 FFF7A4FC 		BL	TYPEE
 3021 15e4 FEF71DFE 		_DOLIT
 3022 15e8 3F000000 		.word	0X3F
 3023 15ec FEF708FE 		BL	EMIT
ARM GAS  stm32eforth.s 			page 57


 3024 15f0 FFF7B4FC 		BL	CR
 3025 15f4 00F0B2F8 		BL	PRESE
 3026 15f8 00F0BCB8 		B.W	QUIT
 3027              	
 3028              	//    _abort"	( f -- )
 3029              	// 	Run time routine of ABORT" . Abort with a message.
 3030              	
 3031              	// 	.word	_ABORT-MAPOFFSET
 3032              	// _ABORQ	.byte  COMPO+6
 3033              	// 	.ascii "abort\""
 3034              	// 	.p2align 2 	
 3035              	ABORQ:
 3036 15fc 42F804ED 		_NEST
 3037 1600 FEF732FE 		BL	QBRAN
 3038 1604 1C160000 		.word	ABOR1-MAPOFFSET	// text flag
 3039 1608 FFF7B8FC 		BL	DOSTR
 3040 160c FFF73AF8 		BL	COUNT
 3041 1610 FFF78CFC 		BL	TYPEE
 3042 1614 FFF7A2FC 		BL	CR
 3043 1618 00F0ACB8 		B.W	QUIT
 3044              	ABOR1:
 3045 161c FFF7AEFC 	  BL	DOSTR
 3046 1620 FEF784FE 		BL	DROP
 3047 1624 52F804FB 		_UNNEST			// drop error
 3048              	
 3049              	// **************************************************************************
 3050              	//  The text interpreter
 3051              	
 3052              	//    $INTERPRET  ( a -- )
 3053              	// 	Interpret a word. If failed, try to convert it to an integer.
 3054              	
 3055 1628 CC150000 		.word	_ABORT-MAPOFFSET
 3056 162c 0A       	_INTER:	.byte  10
 3057 162d 2424494E 		.ascii "$$INTERPRET"
 3057      54455250 
 3057      524554
 3058              		.p2align 2 	
 3059              	INTER:
 3060 1638 42F804ED 		_NEST
 3061 163c FFF704FF 		BL	NAMEQ
 3062 1640 FEF768FF 		BL	QDUP	// ?defined
 3063 1644 FEF710FE 		BL	QBRAN
 3064 1648 78160000 		.word	INTE1-MAPOFFSET
 3065 164c FEF732FE 		BL	AT
 3066 1650 FEF7E7FD 		_DOLIT
 3067 1654 40000000 		.word	COMPO
 3068 1658 FEF794FE 		BL	ANDD	// ?compile only lexicon bits
 3069 165c FFF7CEFF 		BL	ABORQ
 3070 1660 0D       		.byte	13
 3071 1661 20636F6D 		.ascii " compile only"
 3071      70696C65 
 3071      206F6E6C 
 3071      79
 3072 166e 00BF     		.p2align 2 	
 3073 1670 FEF7E6FD 		BL	EXECU
 3074 1674 52F804FB 		_UNNEST			// execute defined word
 3075              	INTE1:
ARM GAS  stm32eforth.s 			page 58


 3076 1678 FFF778FB 	  BL	NUMBQ
 3077 167c FEF7F4FD 		BL	QBRAN
 3078 1680 88160000 		.word	INTE2-MAPOFFSET
 3079 1684 52F804FB 		_UNNEST
 3080              	INTE2:
 3081 1688 FFF7A4BF 	  B.W	ABORT	// error
 3082              	
 3083              	//    [	   ( -- )
 3084              	// 	Start the text interpreter.
 3085              	
 3086 168c 2C160000 		.word	_INTER-MAPOFFSET
 3087 1690 81       	_LBRAC:	.byte  IMEDD+1
 3088 1691 5B       		.ascii "["
 3089 1692 00BF     		.p2align 2 	
 3090              	LBRAC:
 3091 1694 42F804ED 		_NEST
 3092 1698 FEF7C3FD 		_DOLIT
 3093 169c 38160000 		.word	INTER-MAPOFFSET
 3094 16a0 FFF762F8 		BL	TEVAL
 3095 16a4 FEF7FCFD 		BL	STORE
 3096 16a8 52F804FB 		_UNNEST
 3097              	
 3098              	//    .OK	 ( -- )
 3099              	// 	Display "ok" only while interpreting.
 3100              	
 3101 16ac 90160000 		.word	_LBRAC-MAPOFFSET
 3102 16b0 03       	_DOTOK:	.byte  3
 3103 16b1 2E4F4B   		.ascii ".OK"
 3104              		.p2align 2 	
 3105              	DOTOK:
 3106 16b4 42F804ED 		_NEST
 3107 16b8 FEF7B3FD 		_DOLIT
 3108 16bc 38160000 		.word	INTER-MAPOFFSET
 3109 16c0 FFF752F8 		BL	TEVAL
 3110 16c4 FEF7F6FD 		BL	AT
 3111 16c8 FEF774FF 		BL	EQUAL
 3112 16cc FEF7CCFD 		BL	QBRAN
 3113 16d0 DC160000 		.word	DOTO1-MAPOFFSET
 3114 16d4 FFF77AFC 		BL	DOTQP
 3115 16d8 03       		.byte	3
 3116 16d9 206F6B   		.ascii " ok"
 3117              	DOTO1:
 3118 16dc FFF73EFC 		BL	CR
 3119 16e0 52F804FB 		_UNNEST
 3120              	
 3121              	//    ?STACK	( -- )
 3122              	// 	Abort if the data stack underflows.
 3123              	
 3124 16e4 B0160000 		.word	_DOTOK-MAPOFFSET
 3125 16e8 06       	_QSTAC:	.byte  6
 3126 16e9 3F535441 		.ascii "?STACK"
 3126      434B
 3127 16ef 00       		.p2align 2 	
 3128              	QSTAC:
 3129 16f0 42F804ED 		_NEST
 3130 16f4 FFF764F9 		BL	DEPTH
 3131 16f8 FEF73AFE 		BL	ZLESS	// check only for underflow
ARM GAS  stm32eforth.s 			page 59


 3132 16fc FFF77EFF 		BL	ABORQ
 3133 1700 0A       		.byte	10
 3134 1701 20756E64 		.ascii " underflow"
 3134      6572666C 
 3134      6F77
 3135 170b 00       		.p2align 2 	
 3136 170c 52F804FB 		_UNNEST
 3137              	
 3138              	//    EVAL	( -- )
 3139              	// 	Interpret the input stream.
 3140              	
 3141 1710 E8160000 		.word	_QSTAC-MAPOFFSET
 3142 1714 04       	_EVAL:	.byte  4
 3143 1715 4556414C 		.ascii "EVAL"
 3144 1719 0000BF   		.p2align 2 	
 3145              	EVAL:
 3146 171c 42F804ED 		_NEST
 3147              	EVAL1:
 3148 1720 FFF7D8FD 	    BL	TOKEN
 3149 1724 FEF70AFE 		BL	DUPP
 3150 1728 FEF7D4FD 		BL	CAT	// ?input stream empty
 3151 172c FEF79CFD 		BL	QBRAN
 3152 1730 44170000 		.word	EVAL2-MAPOFFSET
 3153 1734 FFF718F8 		BL	TEVAL
 3154 1738 FFF78CF9 		BL	ATEXE
 3155 173c FFF7D8FF 		BL	QSTAC	// evaluate input, check stack
 3156 1740 FFF7EEBF 		B.W	EVAL1
 3157              	EVAL2:
 3158 1744 FEF7F2FD 		BL	DROP
 3159 1748 FFF7B4FF 		BL	DOTOK
 3160 174c 52F804FB 		_UNNEST	// prompt
 3161              	
 3162              	//    PRESET	( -- )
 3163              	// 	Reset data stack pointer and the terminal input buffer.
 3164              	
 3165 1750 14170000 		.word	_EVAL-MAPOFFSET
 3166 1754 06       	_PRESE:	.byte  6
 3167 1755 50524553 		.ascii "PRESET"
 3167      4554
 3168 175b 00       		.p2align 2 	
 3169              	PRESE:
 3170              	//	_NEST
 3171 175c 44F68061 		MOVW	R1,#SPP&0xffff		//  init SP
 3172 1760 C2F20001 	 	MOVT	R1,#SPP>>16
 3173 1764 85EA0505 		EOR	R5,R5,R5			//  init TOS=0
 3174              	//	_UNNEST
 3175 1768 7047     		_NEXT
 3176              	
 3177              	//    QUIT	( -- )
 3178              	// 	Reset return stack pointer and start text interpreter.
 3179              	
 3180 176a 54170000 		.word	_PRESE-MAPOFFSET
 3181 176e 04       	_QUIT:	.byte  4
 3182 176f 51554954 		.ascii "QUIT"
 3183 1773 00       		.p2align 2 	
 3184              	QUIT:
 3185 1774 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 60


 3186 1778 44F68072 		MOVW	R2,#RPP&0xffff  /* RESET RSTACK */
 3187 177c C2F20002 	 	MOVT	R2,#RPP>>16 
 3188              	QUIT1:
 3189 1780 FFF788FF 		BL	LBRAC			// start interpretation
 3190              	QUIT2:
 3191 1784 FFF706FF 		BL	QUERY			// get input
 3192 1788 FFF7C8FF 		BL	EVAL
 3193 178c FEF778FD 		BL	BRAN
 3194 1790 84170000 		.word	QUIT2-MAPOFFSET	// continue till error
 3195              	
 3196              	/***************************
 3197              	//  Flash memory interface
 3198              	***************************/
 3199              	UNLOCK:	//  unlock flash memory	
 3200 1794 DFF8500A 		ldr	r0, =FLASH_BASE_ADR
 3201 1798 DFF8504A 		ldr	r4, =FLASH_KEY1
 3202 179c 4460     		str	r4, [r0, #FLASH_KEYR]
 3203 179e DFF8504A 		ldr	r4, =FLASH_KEY2 
 3204 17a2 4460     		str	r4, [r0, #FLASH_KEYR]
 3205              		/* unlock option registers */
 3206 17a4 DFF8444A 		ldr	r4, =FLASH_KEY1
 3207 17a8 8460     		str	r4, [r0, #FLASH_OPTKEYR]
 3208 17aa DFF8444A 		ldr	r4, =FLASH_KEY2
 3209 17ae 8460     		str	r4, [r0, #FLASH_OPTKEYR]
 3210 17b0 7047     		_NEXT
 3211              	WAIT_BSY:
 3212 17b2 DFF8340A 		ldr	r0,=FLASH_BASE_ADR
 3213              	WAIT1:
 3214 17b6 C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 3215 17b8 14F00104 		ands	r4, #0x1	//  BSY
 3216 17bc FBD1     		bne	WAIT1
 3217 17be 7047     		_NEXT
 3218              	
 3219              	LOCK: // lock flash memory 
 3220 17c0 DFF8240A 		ldr r0,=FLASH_BASE_ADR 
 3221 17c4 0469     		ldr r4,[r0,#FLASH_CR]
 3222 17c6 44F08004 		orr r4,#(1<<7)
 3223 17ca 0461     		str r4,[r0,#FLASH_CR]
 3224 17cc 7047     		_NEXT 
 3225              	
 3226              	
 3227              	//    ERASE_SECTOR	   ( sector -- )
 3228              	// 	  Erase one sector of flash memory.  Sector=0 to 11
 3229              	
 3230 17ce 6E170000 		.word	_QUIT-MAPOFFSET
 3231 17d2 0C       	_ESECT:	.byte  12
 3232 17d3 45524153 		.ascii "ERASE_SECTOR"
 3232      455F5345 
 3232      43544F52 
 3233 17df 00       		.p2align 2 	
 3234              	
 3235              	ESECT: 	//  sector --
 3236 17e0 42F804ED 		_NEST
 3237 17e4 FFF7E5FF 		bl	WAIT_BSY
 3238 17e8 0469     		ldr	r4,[r0, #FLASH_CR]	
 3239 17ea 24F07804 		bic	r4,r4,#0x78	//  clear SNB
 3240 17ee 4FEAC505 		lsl	R5,R5,#3		//  align sector #
ARM GAS  stm32eforth.s 			page 61


 3241 17f2 44EA0504 		orr	r4,r4,r5		//  put in sector #
 3242 17f6 44F48034 		orr	R4,R4,#0x10000	//  set STRT bit
 3243 17fa 44F40074 		orr	R4,R4,#0x200	//  PSIZE=32
 3244 17fe 44F00204 		orr	R4,R4,#2		//  set SER bit, enable erase
 3245 1802 0461     		str	r4,[r0, #0x10]	//  start erasing
 3246              	// 	bl	WAIT_BSY
 3247 1804 51F8045B 		_POP
 3248 1808 52F804FB 		_UNNEST
 3249              	
 3250              	//    I!	   ( data address -- )
 3251              	// 	   Write one word into flash memory
 3252              	
 3253 180c D2170000 		.word	_ESECT-MAPOFFSET
 3254 1810 02       	_ISTOR:	.byte  2
 3255 1811 4921     		.ascii "I!"
 3256 1813 00       		.p2align 2 	
 3257              	
 3258              	ISTOR:	//  data address --
 3259 1814 42F804ED 		_NEST
 3260 1818 FFF7CBFF 		bl	WAIT_BSY
 3261 181c 0469     		ldr	r4, [r0, #0x10]	//  FLASH_CR
 3262 181e 44F00104 		orr	r4,R4,#0x1		//  PG
 3263 1822 0461     		str	r4, [r0, #0x10]	//  enable programming
 3264 1824 FEF73CFD 		bl	STORE
 3265 1828 FFF7C3FF 		bl	WAIT_BSY
 3266 182c 0469     		ldr	r4, [r0, #0x10]	//  FLASH_CR
 3267 182e 24F00104 		bic	r4,R4,#0x1		//  PG
 3268 1832 0461     		str	r4, [r0, #0x10]	//  disable programming
 3269 1834 52F804FB 		_UNNEST
 3270              	
 3271              	//    TURNKEY	( -- )
 3272              	// 	Copy dictionary from RAM to flash.
 3273              	
 3274 1838 10180000 		.word	_ISTOR-MAPOFFSET
 3275 183c 07       	_TURN:	.byte   7
 3276 183d 5455524E 		.ascii "TURNKEY"
 3276      4B4559
 3277              		.p2align 2 
 3278 1844 42F804ED 	TURN:	_NEST
 3279 1848 FEF7EBFC 		_DOLIT			//  save user area
 3280 184c 00FF0000 		.word	0XFF00
 3281 1850 FEF7E7FC 		_DOLIT
 3282 1854 C0000000 		.word	0xC0			//  to boot array
 3283 1858 FEF7E3FC 		_DOLIT
 3284 185c 40000000 		.word	0x40
 3285 1860 FFF71CF9 		BL	MOVE
 3286 1864 FEF7DDFC 		_DOLIT
 3287 1868 00000000 		.word	0
 3288 186c FEF7D9FC 		_DOLIT
 3289 1870 00000008 		.word	0x8000000
 3290 1874 FEF798FF 		BL	CPP
 3291 1878 FEF71CFD 		BL	AT
 3292 187c FEF732FE 		BL	CELLSL
 3293 1880 FEF740FD 		BL	TOR
 3294              	TURN1:
 3295 1884 FEF76CFD 		BL	OVER
 3296 1888 FEF714FD 		BL	AT
ARM GAS  stm32eforth.s 			page 62


 3297 188c FEF768FD 		BL	OVER
 3298 1890 FFF7C0FF 		BL	ISTOR
 3299 1894 FEF75AFD 		BL	SWAP
 3300 1898 FEF702FE 		BL	CELLP
 3301 189c FEF756FD 		BL	SWAP
 3302 18a0 FEF7FEFD 		BL	CELLP
 3303 18a4 FEF7D1FC 		BL	DONXT
 3304 18a8 84180000 		.word	TURN1-MAPOFFSET
 3305 18ac FEF746FE 		BL	DDROP
 3306 18b0 52F804FB 		_UNNEST
 3307              	
 3308              	// **************************************************************************
 3309              	//  The compiler
 3310              	
 3311              	//    '	   ( -- ca )
 3312              	// 	Search context vocabularies for the next word in input stream.
 3313              	
 3314 18b4 3C180000 		.word	_TURN-MAPOFFSET
 3315 18b8 01       	_TICK:	.byte  1
 3316 18b9 27       		.ascii "'"
 3317 18ba 00BF     		.p2align 2 	
 3318              	TICK:
 3319 18bc 42F804ED 		_NEST
 3320 18c0 FFF708FD 		BL	TOKEN
 3321 18c4 FFF7C0FD 		BL	NAMEQ	// ?defined
 3322 18c8 FEF7CEFC 		BL	QBRAN
 3323 18cc D4180000 		.word	TICK1-MAPOFFSET
 3324 18d0 52F804FB 		_UNNEST	// yes, push code address
 3325 18d4 FFF77EBE 	TICK1:	B.W	ABORT	// no, error
 3326              	
 3327              	//    ALLOT	( n -- )
 3328              	// 	Allocate n bytes to the ram area.
 3329              	
 3330 18d8 B8180000 		.word	_TICK-MAPOFFSET
 3331 18dc 05       	_ALLOT:	.byte  5
 3332 18dd 414C4C4F 		.ascii "ALLOT"
 3332      54
 3333 18e2 00BF     		.p2align 2 	
 3334              	ALLOT:
 3335 18e4 42F804ED 		_NEST
 3336 18e8 FEF75EFF 		BL	CPP
 3337 18ec FEF7A6FE 		BL	PSTOR
 3338 18f0 52F804FB 		_UNNEST			// adjust code pointer
 3339              	
 3340              	//    ,	   ( w -- )
 3341              	// 	Compile an integer into the code dictionary.
 3342              	
 3343 18f4 DC180000 		.word	_ALLOT-MAPOFFSET
 3344 18f8 012C     	_COMMA:	.byte  1,','
 3345 18fa 00BF     		.p2align 2 	
 3346              	COMMA:
 3347 18fc 42F804ED 		_NEST
 3348 1900 FFF784F8 		BL	HERE
 3349 1904 FEF71AFD 		BL	DUPP
 3350 1908 FEF7CAFD 		BL	CELLP	// cell boundary
 3351 190c FEF74CFF 		BL	CPP
 3352 1910 FEF7C6FC 		BL	STORE
ARM GAS  stm32eforth.s 			page 63


 3353 1914 FEF7C4FC 		BL	STORE
 3354 1918 52F804FB 		_UNNEST	// adjust code pointer, compile
 3355              		.p2align 2 
 3356              	//    [COMPILE]   ( -- //  string> )
 3357              	// 	Compile the next immediate word into code dictionary.
 3358              	
 3359 191c F8180000 		.word	_COMMA-MAPOFFSET
 3360 1920 89       	_BCOMP:	.byte  IMEDD+9
 3361 1921 5B434F4D 		.ascii "[COMPILE]"
 3361      50494C45 
 3361      5D
 3362 192a 00BF     		.p2align 2 	
 3363              	BCOMP:
 3364 192c 42F804ED 		_NEST
 3365 1930 FFF7C4FF 		BL	TICK
 3366 1934 FFF7E2FF 		BL	COMMA
 3367 1938 52F804FB 		_UNNEST
 3368              	
 3369              	//    COMPILE	( -- )
 3370              	// 	Compile the next address in colon list to code dictionary.
 3371              	
 3372 193c 20190000 		.word	_BCOMP-MAPOFFSET
 3373 1940 47       	_COMPI:	.byte  COMPO+7
 3374 1941 434F4D50 		.ascii "COMPILE"
 3374      494C45
 3375              		.p2align 2 	
 3376              	COMPI:
 3377 1948 42F804ED 		_NEST
 3378 194c FEF7C8FC 		BL	RFROM
 3379 1950 25F00105 		BIC	R5,R5,#1
 3380 1954 FEF7F2FC 		BL	DUPP
 3381 1958 FEF7ACFC 		BL	AT
 3382 195c 00F0DAF9 		BL	CALLC			// compile BL instruction
 3383 1960 FEF79EFD 		BL	CELLP
 3384 1964 45F00105 		ORR	R5,R5,#1
 3385 1968 FEF7CCFC 		BL	TOR
 3386 196c 52F804FB 		_UNNEST			// adjust return address
 3387              	
 3388              	//    LITERAL	( w -- )
 3389              	// 	Compile tos to code dictionary as an integer literal.
 3390              	
 3391 1970 40190000 		.word	_COMPI-MAPOFFSET
 3392 1974 87       	_LITER:	.byte  IMEDD+7
 3393 1975 4C495445 		.ascii "LITERAL"
 3393      52414C
 3394              		.p2align 2 	
 3395              	LITER:
 3396 197c 42F804ED 		_NEST
 3397 1980 FFF7E2FF 		BL	COMPI
 3398 1984 22020000 		.word	DOLIT-MAPOFFSET
 3399 1988 FFF7B8FF 		BL	COMMA
 3400 198c 52F804FB 		_UNNEST
 3401              	
 3402              	//    $,"	( -- )
 3403              	// 	Compile a literal string up to next " .
 3404              	
 3405              	// 	.word	_LITER-MAPOFFSET
ARM GAS  stm32eforth.s 			page 64


 3406              	// _STRCQ	.byte  3
 3407              	// 	.ascii "$$,"""
 3408              	// 	.p2align 2 	
 3409              	STRCQ:
 3410 1990 42F804ED 		_NEST
 3411 1994 FEF745FC 		_DOLIT
 3412 1998 FCFFFFFF 		.word	-4
 3413 199c FEF704FF 		BL	CPP
 3414 19a0 FEF74CFE 		BL	PSTOR
 3415 19a4 FEF73DFC 		_DOLIT
 3416 19a8 22000000 		.word	'\"'
 3417 19ac FFF780FC 		BL	WORDD			// moveDCB to code dictionary
 3418 19b0 FEF768FE 		BL	COUNT
 3419 19b4 FEF726FD 		BL	PLUS
 3420 19b8 FEF7D0FF 		BL	ALGND			// calculate aligned end of string
 3421 19bc FEF7F4FE 		BL	CPP
 3422 19c0 FEF76EFC 		BL	STORE
 3423 19c4 52F804FB 		_UNNEST 			// adjust the code pointer
 3424              	
 3425              	// **************************************************************************
 3426              	//  Structures
 3427              	
 3428              	//    FOR	 ( -- a )
 3429              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3430              	
 3431 19c8 74190000 		.word	_LITER-MAPOFFSET
 3432 19cc 83       	_FOR:	.byte  IMEDD+3
 3433 19cd 464F52   		.ascii "FOR"
 3434              		.p2align 2 	
 3435              	FOR:
 3436 19d0 42F804ED 		_NEST
 3437 19d4 FFF7B8FF 		BL	COMPI
 3438 19d8 04030000 		.word	TOR-MAPOFFSET
 3439 19dc FFF716F8 		BL	HERE
 3440 19e0 52F804FB 		_UNNEST
 3441              	
 3442              	//    BEGIN	( -- a )
 3443              	// 	Start an infinite or indefinite loop structure.
 3444              	
 3445 19e4 CC190000 		.word	_FOR-MAPOFFSET
 3446 19e8 85       	_BEGIN:	.byte  IMEDD+5
 3447 19e9 42454749 		.ascii "BEGIN"
 3447      4E
 3448 19ee 00BF     		.p2align 2 	
 3449              	BEGIN:
 3450 19f0 42F804ED 		_NEST
 3451 19f4 FFF70AF8 		BL	HERE
 3452 19f8 52F804FB 		_UNNEST
 3453              		.p2align 2 
 3454              	//    NEXT	( a -- )
 3455              	// 	Terminate a FOR-NEXT loop structure.
 3456              	
 3457 19fc E8190000 		.word	_BEGIN-MAPOFFSET
 3458 1a00 84       	_NEXT:	.byte  IMEDD+4
 3459 1a01 4E455854 		.ascii "NEXT"
 3460 1a05 0000BF   		.p2align 2 	
 3461              	NEXT:
ARM GAS  stm32eforth.s 			page 65


 3462 1a08 42F804ED 		_NEST
 3463 1a0c FFF79CFF 		BL	COMPI
 3464 1a10 4A020000 		.word	DONXT-MAPOFFSET
 3465 1a14 FFF772FF 		BL	COMMA
 3466 1a18 52F804FB 		_UNNEST
 3467              	
 3468              	//    UNTIL	( a -- )
 3469              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3470              	
 3471 1a1c 001A0000 		.word	_NEXT-MAPOFFSET
 3472 1a20 85       	_UNTIL:	.byte  IMEDD+5
 3473 1a21 554E5449 		.ascii "UNTIL"
 3473      4C
 3474 1a26 00BF     		.p2align 2 	
 3475              	UNTIL:
 3476 1a28 42F804ED 		_NEST
 3477 1a2c FFF78CFF 		BL	COMPI
 3478 1a30 68020000 		.word	QBRAN-MAPOFFSET
 3479 1a34 FFF762FF 		BL	COMMA
 3480 1a38 52F804FB 		_UNNEST
 3481              	
 3482              	//    AGAIN	( a -- )
 3483              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3484              	
 3485 1a3c 201A0000 		.word	_UNTIL-MAPOFFSET
 3486 1a40 85       	_AGAIN:	.byte  IMEDD+5
 3487 1a41 41474149 		.ascii "AGAIN"
 3487      4E
 3488 1a46 00BF     		.p2align 2 	
 3489              	AGAIN:
 3490 1a48 42F804ED 		_NEST
 3491 1a4c FFF77CFF 		BL	COMPI
 3492 1a50 80020000 		.word	BRAN-MAPOFFSET
 3493 1a54 FFF752FF 		BL	COMMA
 3494 1a58 52F804FB 		_UNNEST
 3495              	
 3496              	//    IF	  ( -- A )
 3497              	// 	Begin a conditional branch structure.
 3498              	
 3499 1a5c 401A0000 		.word	_AGAIN-MAPOFFSET
 3500 1a60 82       	_IFF:	.byte  IMEDD+2
 3501 1a61 4946     		.ascii "IF"
 3502 1a63 00       		.p2align 2 	
 3503              	IFF:
 3504 1a64 42F804ED 		_NEST
 3505 1a68 FFF76EFF 		BL	COMPI
 3506 1a6c 68020000 		.word	QBRAN-MAPOFFSET
 3507 1a70 FEF7CCFF 		BL	HERE
 3508 1a74 FEF7D5FB 		_DOLIT
 3509 1a78 04000000 		.word	4
 3510 1a7c FEF794FE 		BL	CPP
 3511 1a80 FEF7DCFD 		BL	PSTOR
 3512 1a84 52F804FB 		_UNNEST
 3513              	
 3514              	//    AHEAD	( -- A )
 3515              	// 	Compile a forward branch instruction.
 3516              	
ARM GAS  stm32eforth.s 			page 66


 3517 1a88 601A0000 		.word	_IFF-MAPOFFSET
 3518 1a8c 85       	_AHEAD:	.byte  IMEDD+5
 3519 1a8d 41484541 		.ascii "AHEAD"
 3519      44
 3520 1a92 00BF     		.p2align 2 	
 3521              	AHEAD:
 3522 1a94 42F804ED 		_NEST
 3523 1a98 FFF756FF 		BL	COMPI
 3524 1a9c 80020000 		.word	BRAN-MAPOFFSET
 3525 1aa0 FEF7B4FF 		BL	HERE
 3526 1aa4 FEF7BDFB 		_DOLIT
 3527 1aa8 04000000 		.word	4
 3528 1aac FEF77CFE 		BL	CPP
 3529 1ab0 FEF7C4FD 		BL	PSTOR
 3530 1ab4 52F804FB 		_UNNEST
 3531              	
 3532              	//    REPEAT	( A a -- )
 3533              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3534              	
 3535 1ab8 8C1A0000 		.word	_AHEAD-MAPOFFSET
 3536 1abc 86       	_REPEA:	.byte  IMEDD+6
 3537 1abd 52455045 		.ascii "REPEAT"
 3537      4154
 3538 1ac3 00       		.p2align 2 	
 3539              	REPEA:
 3540 1ac4 42F804ED 		_NEST
 3541 1ac8 FFF7BEFF 		BL	AGAIN
 3542 1acc FEF79EFF 		BL	HERE
 3543 1ad0 FEF73CFC 		BL	SWAP
 3544 1ad4 FEF7E4FB 		BL	STORE
 3545 1ad8 52F804FB 		_UNNEST
 3546              	
 3547              	//    THEN	( A -- )
 3548              	// 	Terminate a conditional branch structure.
 3549              	
 3550 1adc BC1A0000 		.word	_REPEA-MAPOFFSET
 3551 1ae0 84       	_THENN:	.byte  IMEDD+4
 3552 1ae1 5448454E 		.ascii "THEN"
 3553 1ae5 0000BF   		.p2align 2 	
 3554              	THENN:
 3555 1ae8 42F804ED 		_NEST
 3556 1aec FEF78EFF 		BL	HERE
 3557 1af0 FEF72CFC 		BL	SWAP
 3558 1af4 FEF7D4FB 		BL	STORE
 3559 1af8 52F804FB 		_UNNEST
 3560              	
 3561              	//    AFT	 ( a -- a A )
 3562              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3563              	
 3564 1afc E01A0000 		.word	_THENN-MAPOFFSET
 3565 1b00 83       	_AFT:	.byte  IMEDD+3
 3566 1b01 414654   		.ascii "AFT"
 3567              		.p2align 2 	
 3568              	AFT:
 3569 1b04 42F804ED 		_NEST
 3570 1b08 FEF710FC 		BL	DROP
 3571 1b0c FFF7C2FF 		BL	AHEAD
ARM GAS  stm32eforth.s 			page 67


 3572 1b10 FFF76EFF 		BL	BEGIN
 3573 1b14 FEF71AFC 		BL	SWAP
 3574 1b18 52F804FB 		_UNNEST
 3575              	
 3576              	//    ELSE	( A -- A )
 3577              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3578              	
 3579 1b1c 001B0000 		.word	_AFT-MAPOFFSET
 3580 1b20 84       	_ELSEE:	.byte  IMEDD+4
 3581 1b21 454C5345 		.ascii "ELSE"
 3582 1b25 0000BF   		.p2align 2 	
 3583              	ELSEE:
 3584 1b28 42F804ED 		_NEST
 3585 1b2c FFF7B2FF 		BL	AHEAD
 3586 1b30 FEF70CFC 		BL	SWAP
 3587 1b34 FFF7D8FF 		BL	THENN
 3588 1b38 52F804FB 		_UNNEST
 3589              	
 3590              	//    WHILE	( a -- A a )
 3591              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3592              	
 3593 1b3c 201B0000 		.word	_ELSEE-MAPOFFSET
 3594 1b40 85       	_WHILE:	.byte  IMEDD+5
 3595 1b41 5748494C 		.ascii "WHILE"
 3595      45
 3596 1b46 00BF     		.p2align 2 	
 3597              	WHILE:
 3598 1b48 42F804ED 		_NEST
 3599 1b4c FFF78AFF 		BL	IFF
 3600 1b50 FEF7FCFB 		BL	SWAP
 3601 1b54 52F804FB 		_UNNEST
 3602              	
 3603              	//    ABORT"	( -- //  string> )
 3604              	// 	Conditional abort with an error message.
 3605              	
 3606 1b58 401B0000 		.word	_WHILE-MAPOFFSET
 3607 1b5c 86       	_ABRTQ:	.byte  IMEDD+6
 3608 1b5d 41424F52 		.ascii "ABORT\""
 3608      5422
 3609 1b63 00       		.p2align 2 	
 3610              	ABRTQ:
 3611 1b64 42F804ED 		_NEST
 3612 1b68 FFF7EEFE 		BL	COMPI
 3613 1b6c FC150000 		.word	ABORQ-MAPOFFSET
 3614 1b70 FFF70EFF 		BL	STRCQ
 3615 1b74 52F804FB 		_UNNEST
 3616              	
 3617              	//    $"	( -- //  string> )
 3618              	// 	Compile an inlineDCB literal.
 3619              	
 3620 1b78 5C1B0000 		.word	_ABRTQ-MAPOFFSET
 3621 1b7c 82       	_STRQ:	.byte  IMEDD+2
 3622 1b7d 2422     		.byte	'$','"'
 3623 1b7f 00       		.p2align 2 	
 3624              	STRQ:
 3625 1b80 42F804ED 		_NEST
 3626 1b84 FFF7E0FE 		BL	COMPI
ARM GAS  stm32eforth.s 			page 68


 3627 1b88 B00F0000 		.word	STRQP-MAPOFFSET
 3628 1b8c FFF700FF 		BL	STRCQ
 3629 1b90 52F804FB 		_UNNEST
 3630              	
 3631              	//    ."	( -- //  string> )
 3632              	// 	Compile an inlineDCB literal to be typed out at run time.
 3633              	
 3634 1b94 7C1B0000 		.word	_STRQ-MAPOFFSET
 3635 1b98 82       	_DOTQ:	.byte  IMEDD+2
 3636 1b99 2E22     		.byte	'.','"'
 3637 1b9b 00       		.p2align 2 	
 3638              	DOTQ:
 3639 1b9c 42F804ED 		_NEST
 3640 1ba0 FFF7D2FE 		BL	COMPI
 3641 1ba4 CC0F0000 		.word	DOTQP-MAPOFFSET
 3642 1ba8 FFF7F2FE 		BL	STRCQ
 3643 1bac 52F804FB 		_UNNEST
 3644              	
 3645              	// **************************************************************************
 3646              	//  Name compiler
 3647              	
 3648              	//    ?UNIQUE	( a -- a )
 3649              	// 	Display a warning message if the word already exists.
 3650              	
 3651 1bb0 981B0000 		.word	_DOTQ-MAPOFFSET
 3652 1bb4 07       	_UNIQU:	.byte  7
 3653 1bb5 3F554E49 		.ascii "?UNIQUE"
 3653      515545
 3654              		.p2align 2 	
 3655              	UNIQU:
 3656 1bbc 42F804ED 		_NEST
 3657 1bc0 FEF7BCFB 		BL	DUPP
 3658 1bc4 FFF740FC 		BL	NAMEQ			// ?name exists
 3659 1bc8 FEF74EFB 		BL	QBRAN
 3660 1bcc E81B0000 		.word	UNIQ1-MAPOFFSET	// redefinitions are OK
 3661 1bd0 FFF7FCF9 		BL	DOTQP
 3662 1bd4 07       		.byte	7
 3663 1bd5 20726544 		.ascii " reDef "		// but warn the user
 3663      656620
 3664              		.p2align 2 	
 3665 1bdc FEF7C0FB 		BL	OVER
 3666 1be0 FEF750FD 		BL	COUNT
 3667 1be4 FFF7A2F9 		BL	TYPEE			// just in case its not planned
 3668              	UNIQ1:
 3669 1be8 FEF7A0FB 		BL	DROP
 3670 1bec 52F804FB 		_UNNEST
 3671              	
 3672              	//    $,n	 ( na -- )
 3673              	// 	Build a new dictionary name using the data at na.
 3674              	
 3675              	// 	.word	_UNIQU-MAPOFFSET
 3676              	// _SNAME	.byte  3
 3677              	// 	.ascii "$$,n"
 3678              	// 	.p2align 2 	
 3679              	SNAME:
 3680 1bf0 42F804ED 		_NEST
 3681 1bf4 FEF7A2FB 		BL	DUPP			//  na na
ARM GAS  stm32eforth.s 			page 69


 3682 1bf8 FEF76CFB 		BL	CAT			//  ?null input
 3683 1bfc FEF734FB 		BL	QBRAN
 3684 1c00 381C0000 		.word	SNAM1-MAPOFFSET
 3685 1c04 FFF7DAFF 		BL	UNIQU			//  na
 3686 1c08 FEF7E2FD 		BL	LAST			//  na last
 3687 1c0c FEF752FB 		BL	AT			//  na la
 3688 1c10 FFF774FE 		BL	COMMA			//  na
 3689 1c14 FEF792FB 		BL	DUPP			//  na na
 3690 1c18 FEF7DAFD 		BL	LAST			//  na na last
 3691 1c1c FEF740FB 		BL	STORE			//  na , save na for vocabulary link
 3692 1c20 FEF730FD 		BL	COUNT			//  na+1 count
 3693 1c24 FEF7EEFB 		BL	PLUS			//  na+1+count
 3694 1c28 FEF798FE 		BL	ALGND			//  word boundary
 3695 1c2c FEF7BCFD 		BL	CPP
 3696 1c30 FEF736FB 		BL	STORE			//  top of dictionary now
 3697 1c34 52F804FB 		_UNNEST
 3698              	SNAM1:
 3699 1c38 FFF7BAF9 		BL	STRQP
 3700 1c3c 07       		.byte	7
 3701 1c3d 206E616D 		.ascii " name? "
 3701      653F20
 3702 1c44 FFF7C6BC 		B.W	ABORT
 3703              	
 3704              	//    $COMPILE	( a -- )
 3705              	// 	Compile next word to code dictionary as a token or literal.
 3706              	
 3707 1c48 B41B0000 		.word	_UNIQU-MAPOFFSET
 3708 1c4c 08       	_SCOMP:	.byte  8
 3709 1c4d 2424434F 		.ascii "$$COMPILE"
 3709      4D50494C 
 3709      45
 3710 1c56 00BF     		.p2align 2 	
 3711              	SCOMP:
 3712 1c58 42F804ED 		_NEST
 3713 1c5c FFF7F4FB 		BL	NAMEQ
 3714 1c60 FEF758FC 		BL	QDUP	// defined?
 3715 1c64 FEF700FB 		BL	QBRAN
 3716 1c68 941C0000 		.word	SCOM2-MAPOFFSET
 3717 1c6c FEF722FB 		BL	AT
 3718 1c70 FEF7D7FA 		_DOLIT
 3719 1c74 80000000 		.word	IMEDD
 3720 1c78 FEF784FB 		BL	ANDD	// immediate?
 3721 1c7c FEF7F4FA 		BL	QBRAN
 3722 1c80 8C1C0000 		.word	SCOM1-MAPOFFSET
 3723 1c84 FEF7DCFA 		BL	EXECU
 3724 1c88 52F804FB 		_UNNEST			// it's immediate, execute
 3725              	SCOM1:
 3726 1c8c 00F042F8 		BL	CALLC			// it's not immediate, compile
 3727 1c90 52F804FB 		_UNNEST	
 3728              	SCOM2:
 3729 1c94 FFF76AF8 		BL	NUMBQ
 3730 1c98 FEF7E6FA 		BL	QBRAN
 3731 1c9c A81C0000 		.word	SCOM3-MAPOFFSET
 3732 1ca0 FFF76CFE 		BL	LITER
 3733 1ca4 52F804FB 		_UNNEST			// compile number as integer
 3734              	SCOM3:
 3735 1ca8 FFF794BC 		B.W	ABORT			// error
ARM GAS  stm32eforth.s 			page 70


 3736              	
 3737              	//    OVERT	( -- )
 3738              	// 	Link a new word into the current vocabulary.
 3739              	
 3740 1cac 4C1C0000 		.word	_SCOMP-MAPOFFSET
 3741 1cb0 05       	_OVERT:	.byte  5
 3742 1cb1 4F564552 		.ascii "OVERT"
 3742      54
 3743 1cb6 00BF     		.p2align 2 	
 3744              	OVERT:
 3745 1cb8 42F804ED 		_NEST
 3746 1cbc FEF788FD 		BL	LAST
 3747 1cc0 FEF7F8FA 		BL	AT
 3748 1cc4 FEF766FD 		BL	CNTXT
 3749 1cc8 FEF7EAFA 		BL	STORE
 3750 1ccc 52F804FB 		_UNNEST
 3751              	
 3752              	//    ; 	   ( -- )
 3753              	// 	Terminate a colon definition.
 3754              	
 3755 1cd0 B01C0000 		.word	_OVERT-MAPOFFSET
 3756 1cd4 C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 3757 1cd5 3B       		.ascii ";"
 3758 1cd6 00BF     		.p2align 2 	
 3759              	SEMIS:
 3760 1cd8 42F804ED 		_NEST
 3761 1cdc FEF7A1FA 		_DOLIT
 3762 1ce0 52F804FB 		_UNNEST
 3763 1ce4 FFF70AFE 		BL	COMMA
 3764 1ce8 FFF7D4FC 		BL	LBRAC
 3765 1cec FFF7E4FF 		BL	OVERT
 3766 1cf0 52F804FB 		_UNNEST
 3767              	
 3768              	//    ]	   ( -- )
 3769              	// 	Start compiling the words in the input stream.
 3770              	
 3771 1cf4 D41C0000 		.word	_SEMIS-MAPOFFSET
 3772 1cf8 01       	_RBRAC:	.byte  1
 3773 1cf9 5D       		.ascii "]"
 3774 1cfa 00BF     		.p2align 2 	
 3775              	RBRAC:
 3776 1cfc 42F804ED 		_NEST
 3777 1d00 FEF78FFA 		_DOLIT
 3778 1d04 581C0000 		.word	SCOMP-MAPOFFSET
 3779 1d08 FEF72EFD 		BL	TEVAL
 3780 1d0c FEF7C8FA 		BL	STORE
 3781 1d10 52F804FB 		_UNNEST
 3782              	
 3783              	//    BL.W	( ca -- )
 3784              	// 	Assemble a branch-link long instruction to ca.
 3785              	// 	BL.W is split into 2 16 bit instructions with 11 bit address fields.
 3786              	
 3787              	// 	.word	_RBRAC-MAPOFFSET
 3788              	// _CALLC	.byte  5
 3789              	// 	.ascii "call,"
 3790              	// 	.p2align 2 	
 3791              	CALLC:
ARM GAS  stm32eforth.s 			page 71


 3792 1d14 42F804ED 		_NEST
 3793 1d18 25F00105 		BIC	R5,R5,#1		//  clear b0 of address from R>
 3794 1d1c FEF776FE 		BL	HERE
 3795 1d20 FEF778FB 		BL	SUBB
 3796 1d24 A5F10405 		SUB	R5,R5,#4		//  pc offset
 3797 1d28 40F2FF70 		MOVW	R0,#0x7FF		//  11 bit mask
 3798 1d2c 2C46     		MOV	R4,R5
 3799 1d2e 4FEA1535 		LSR	R5,R5,#12		//  get bits 22-12
 3800 1d32 05EA0005 		AND	R5,R5,R0
 3801 1d36 4FEAC434 		LSL	R4,R4,#15		//  get bits 11-1
 3802 1d3a 45EA0405 		ORR	R5,R5,R4
 3803 1d3e 45F07845 		ORR	R5,R5,#0xF8000000
 3804 1d42 45F47045 		ORR	R5,R5,#0xF000
 3805 1d46 FFF7D9FD 		BL	COMMA			//  assemble BL.W instruction
 3806 1d4a 52F804FB 		_UNNEST
 3807              	
 3808              	
 3809              	// 	:	( -- //  string> )
 3810              	// 	Start a new colon definition using next word as its name.
 3811              	
 3812 1d4e F81C0000 		.word	_RBRAC-MAPOFFSET
 3813 1d52 01       	_COLON:	.byte  1
 3814 1d53 3A       		.ascii ":"
 3815              		.p2align 2 	
 3816              	COLON:
 3817 1d54 42F804ED 		_NEST
 3818 1d58 FFF7BCFA 		BL	TOKEN
 3819 1d5c FFF748FF 		BL	SNAME
 3820 1d60 FEF75FFA 		_DOLIT
 3821 1d64 42F804ED 		_NEST
 3822 1d68 FFF7C8FD 		BL	COMMA
 3823 1d6c FFF7C6FF 		BL	RBRAC
 3824 1d70 52F804FB 		_UNNEST
 3825              	
 3826              	//    IMMEDIATE   ( -- )
 3827              	// 	Make the last compiled word an immediate word.
 3828              	
 3829 1d74 521D0000 		.word	_COLON-MAPOFFSET
 3830 1d78 09       	_IMMED:	.byte  9
 3831 1d79 494D4D45 		.ascii "IMMEDIATE"
 3831      44494154 
 3831      45
 3832 1d82 00BF     		.p2align 2 	
 3833              	IMMED:
 3834 1d84 42F804ED 		_NEST
 3835 1d88 FEF74BFA 		_DOLIT
 3836 1d8c 80000000 		.word	IMEDD
 3837 1d90 FEF71EFD 		BL	LAST
 3838 1d94 FEF78EFA 		BL	AT
 3839 1d98 FEF78CFA 		BL	AT
 3840 1d9c FEF7FCFA 		BL	ORR
 3841 1da0 FEF716FD 		BL	LAST
 3842 1da4 FEF786FA 		BL	AT
 3843 1da8 FEF77AFA 		BL	STORE
 3844 1dac 52F804FB 		_UNNEST
 3845              	
 3846              	// **************************************************************************
ARM GAS  stm32eforth.s 			page 72


 3847              	//  Defining words
 3848              	
 3849              	//    CONSTANT	( u -- //  string> )
 3850              	// 	Compile a new constant.
 3851              	
 3852 1db0 781D0000 		.word	_IMMED-MAPOFFSET
 3853 1db4 08       	_CONST:	.byte  8
 3854 1db5 434F4E53 		.ascii "CONSTANT"
 3854      54414E54 
 3855 1dbd 0000BF   		.p2align 2 	
 3856              	CONST:
 3857 1dc0 42F804ED 		_NEST
 3858 1dc4 FFF786FA 		BL	TOKEN
 3859 1dc8 FFF712FF 		BL	SNAME
 3860 1dcc FFF774FF 		BL	OVERT
 3861 1dd0 FEF727FA 		_DOLIT
 3862 1dd4 42F804ED 		_NEST
 3863 1dd8 FFF790FD 		BL	COMMA
 3864 1ddc FEF721FA 		_DOLIT
 3865 1de0 B8060000 		.word	DOCON-MAPOFFSET
 3866 1de4 FFF796FF 		BL	CALLC
 3867 1de8 FFF788FD 		BL	COMMA
 3868 1dec 52F804FB 		_UNNEST
 3869              	
 3870              	//    CREATE	( -- //  string> )
 3871              	// 	Compile a new array entry without allocating code space.
 3872              	
 3873 1df0 B41D0000 		.word	_CONST-MAPOFFSET
 3874 1df4 06       	_CREAT:	.byte  6
 3875 1df5 43524541 		.ascii "CREATE"
 3875      5445
 3876 1dfb 00       		.p2align 2 	
 3877              	CREAT:
 3878 1dfc 42F804ED 		_NEST
 3879 1e00 FFF768FA 		BL	TOKEN
 3880 1e04 FFF7F4FE 		BL	SNAME
 3881 1e08 FFF756FF 		BL	OVERT
 3882 1e0c FEF709FA 		_DOLIT
 3883 1e10 42F804ED 		_NEST
 3884 1e14 FFF772FD 		BL	COMMA
 3885 1e18 FEF703FA 		_DOLIT
 3886 1e1c AC060000 		.word	DOVAR-MAPOFFSET
 3887 1e20 FFF778FF 		BL	CALLC
 3888 1e24 52F804FB 		_UNNEST
 3889              	
 3890              	//    VARIABLE	( -- //  string> )
 3891              	// 	Compile a new variable initialized to 0.
 3892              	
 3893 1e28 F41D0000 		.word	_CREAT-MAPOFFSET
 3894 1e2c 08       	_VARIA:	.byte  8
 3895 1e2d 56415249 		.ascii "VARIABLE"
 3895      41424C45 
 3896 1e35 0000BF   		.p2align 2 	
 3897              	VARIA:
 3898 1e38 42F804ED 		_NEST
 3899 1e3c FFF7DEFF 		BL	CREAT
 3900 1e40 FEF7EFF9 		_DOLIT
ARM GAS  stm32eforth.s 			page 73


 3901 1e44 00000000 		.word	0
 3902 1e48 FFF758FD 		BL	COMMA
 3903 1e4c 52F804FB 		_UNNEST
 3904              	
 3905              	// **************************************************************************
 3906              	//  Tools
 3907              	
 3908              	//    dm+	 ( a u -- a )
 3909              	// 	Dump u bytes from , leaving a+u on the stack.
 3910              	
 3911              	// 	.word	_VARIA-MAPOFFSET
 3912              	// _DMP	.byte  3
 3913              	// 	.ascii "dm+"
 3914              	// 	.p2align 2 	
 3915              	DMP:
 3916 1e50 42F804ED 		_NEST
 3917 1e54 FEF784FA 		BL	OVER
 3918 1e58 FEF7E3F9 		_DOLIT
 3919 1e5c 04000000 		.word	4
 3920 1e60 FFF7D6F8 		BL	UDOTR			// display address
 3921 1e64 FFF73AF8 		BL	SPACE
 3922 1e68 FEF74CFA 		BL	TOR			// start count down loop
 3923 1e6c 00F00CB8 		B.W	PDUM2			// skip first pass
 3924              	PDUM1:
 3925 1e70 FEF764FA 	  BL	DUPP
 3926 1e74 FEF72EFA 		BL	CAT
 3927 1e78 FEF7D3F9 		_DOLIT
 3928 1e7c 03000000 		.word	3
 3929 1e80 FFF7C6F8 		BL	UDOTR			// display numeric data
 3930 1e84 FEF7ECFA 		BL	ONEP			// increment address
 3931              	PDUM2:
 3932 1e88 FEF7DFF9 	  BL	DONXT
 3933 1e8c 701E0000 		.word	PDUM1-MAPOFFSET	// loop till done
 3934 1e90 52F804FB 		_UNNEST
 3935              		.p2align 2 
 3936              	//    DUMP	( a u -- )
 3937              	// 	Dump u bytes from a, in a formatted manner.
 3938              	
 3939 1e94 2C1E0000 		.word	_VARIA-MAPOFFSET
 3940 1e98 04       	_DUMP:	.byte  4
 3941 1e99 44554D50 		.ascii "DUMP"
 3942 1e9d 0000BF   		.p2align 2 	
 3943              	DUMP:
 3944 1ea0 42F804ED 		_NEST
 3945 1ea4 FEF732FC 		BL	BASE
 3946 1ea8 FEF704FA 		BL	AT
 3947 1eac FEF72AFA 		BL	TOR
 3948 1eb0 FEF704FF 		BL	HEX			// save radix,set hex
 3949 1eb4 FEF7B5F9 		_DOLIT
 3950 1eb8 10000000 		.word	16
 3951 1ebc FEF71EFD 		BL	SLASH			// change count to lines
 3952 1ec0 FEF720FA 		BL	TOR
 3953 1ec4 00F014B8 		B.W	DUMP4			// start count down loop
 3954              	DUMP1:
 3955 1ec8 FFF748F8 	  BL	CR
 3956 1ecc FEF7A9F9 		_DOLIT
 3957 1ed0 10000000 		.word	16
ARM GAS  stm32eforth.s 			page 74


 3958 1ed4 FEF73CFB 		BL	DDUP
 3959 1ed8 FFF7BAFF 		BL	DMP			// display numeric
 3960 1edc FEF724FB 		BL	ROT
 3961 1ee0 FEF722FB 		BL	ROT
 3962 1ee4 FEF7FAFF 		BL	SPACE
 3963 1ee8 FEF7F8FF 		BL	SPACE
 3964 1eec FFF71EF8 		BL	TYPEE			// display printable characters
 3965              	DUMP4:
 3966 1ef0 FEF7ABF9 	  BL	DONXT
 3967 1ef4 C81E0000 		.word	DUMP1-MAPOFFSET	// loop till done
 3968              	DUMP3:
 3969 1ef8 FEF718FA 	  BL	DROP
 3970 1efc FEF7F0F9 		BL	RFROM
 3971 1f00 FEF704FC 		BL	BASE
 3972 1f04 FEF7CCF9 		BL	STORE			// restore radix
 3973 1f08 52F804FB 		_UNNEST
 3974              	
 3975              	//    .S	  ( ... -- ... )
 3976              	// 	Display the contents of the data stack.
 3977              	
 3978 1f0c 981E0000 		.word	_DUMP-MAPOFFSET
 3979              	_DOTS:
 3980 1f10 02       		.byte  2
 3981 1f11 2E53     		.ascii ".S"
 3982 1f13 00       		.p2align 2 	
 3983              	DOTS:
 3984 1f14 42F804ED 		_NEST
 3985 1f18 FEF7E0FF 		BL	SPACE
 3986 1f1c FEF750FD 		BL	DEPTH			// stack depth
 3987 1f20 FEF7F0F9 		BL	TOR			// start count down loop
 3988 1f24 00F006B8 		B.W	DOTS2			// skip first pass
 3989              	DOTS1:
 3990 1f28 FEF7E4F9 		BL	RAT
 3991 1f2c FEF75AFD 		BL	PICK
 3992 1f30 FFF79AF8 		BL	DOT			// index stack, display contents
 3993              	DOTS2:
 3994 1f34 FEF789F9 		BL	DONXT
 3995 1f38 281F0000 		.word	DOTS1-MAPOFFSET	// loop till done
 3996 1f3c FEF7CEFF 		BL	SPACE
 3997 1f40 52F804FB 		_UNNEST
 3998              	
 3999              	//    >NAME	( ca -- na | F )
 4000              	// 	Convert code address to a name address.
 4001              	
 4002 1f44 101F0000 		.word	_DOTS-MAPOFFSET
 4003 1f48 05       	_TNAME:	.byte  5
 4004 1f49 3E4E414D 		.ascii ">NAME"
 4004      45
 4005 1f4e 00BF     		.p2align 2 	
 4006              	TNAME:
 4007 1f50 42F804ED 		_NEST
 4008 1f54 FEF7D6F9 		BL	TOR			//  
 4009 1f58 FEF71CFC 		BL	CNTXT			//  va
 4010 1f5c FEF7AAF9 		BL	AT			//  na
 4011              	TNAM1:
 4012 1f60 FEF7ECF9 		BL	DUPP			//  na na
 4013 1f64 FEF780F9 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 75


 4014 1f68 901F0000 		.word	TNAM2-MAPOFFSET	//  vocabulary end, no match
 4015 1f6c FEF7E6F9 		BL	DUPP			//  na na
 4016 1f70 FFF7BEF9 		BL	NAMET			//  na ca
 4017 1f74 FEF7BEF9 		BL	RAT			//  na ca code
 4018 1f78 FEF718FA 		BL	XORR			//  na f --
 4019 1f7c FEF774F9 		BL	QBRAN
 4020 1f80 901F0000 		.word	TNAM2-MAPOFFSET
 4021 1f84 FEF794FA 		BL	CELLM			//  la 
 4022 1f88 FEF794F9 		BL	AT			//  next_na
 4023 1f8c FFF7E8BF 		B.W	TNAM1
 4024              	TNAM2:	
 4025 1f90 FEF7A6F9 		BL	RFROM
 4026 1f94 FEF7CAF9 		BL	DROP			//  0|na --
 4027 1f98 52F804FB 		_UNNEST			// 0
 4028              	
 4029              	//    .ID	 ( na -- )
 4030              	// 	Display the name at address.
 4031              	
 4032 1f9c 481F0000 		.word	_TNAME-MAPOFFSET
 4033 1fa0 03       	_DOTID:	.byte  3
 4034 1fa1 2E4944   		.ascii ".ID"
 4035              		.p2align 2 	
 4036              	DOTID:
 4037 1fa4 42F804ED 		_NEST
 4038 1fa8 FEF7B4FA 		BL	QDUP			// if zero no name
 4039 1fac FEF75CF9 		BL	QBRAN
 4040 1fb0 CC1F0000 		.word	DOTI1-MAPOFFSET
 4041 1fb4 FEF766FB 		BL	COUNT
 4042 1fb8 FEF733F9 		_DOLIT
 4043 1fbc 1F000000 		.word	0x1F
 4044 1fc0 FEF7E0F9 		BL	ANDD			// mask lexicon bits
 4045 1fc4 FEF7B2FF 		BL	TYPEE
 4046 1fc8 52F804FB 		_UNNEST			// display name string
 4047              	DOTI1:
 4048 1fcc FEF7FEFF 	  BL	DOTQP
 4049 1fd0 09       		.byte	9
 4050 1fd1 207B6E6F 		.ascii " {noName}"
 4050      4E616D65 
 4050      7D
 4051 1fda 00BF     		.p2align 2 	
 4052 1fdc 52F804FB 		_UNNEST
 4053              	
 4054              	//    SEE	 ( -- //  string> )
 4055              	// 	A simple decompiler.
 4056              	
 4057 1fe0 A01F0000 		.word	_DOTID-MAPOFFSET
 4058 1fe4 03       	_SEE:	.byte  3
 4059 1fe5 534545   		.ascii "SEE"
 4060              		.p2align 2 	
 4061              	SEE:
 4062 1fe8 42F804ED 		_NEST
 4063 1fec FFF766FC 		BL	TICK	//  ca --, starting address
 4064 1ff0 FEF7B4FF 		BL	CR	
 4065 1ff4 FEF715F9 		_DOLIT
 4066 1ff8 14000000 		.word	20
 4067 1ffc FEF782F9 		BL	TOR
 4068              	SEE1:
ARM GAS  stm32eforth.s 			page 76


 4069 2000 FEF74EFA 		BL	CELLP			//  a
 4070 2004 FEF79AF9 		BL	DUPP			//  a a
 4071 2008 00F010F8 		BL	DECOMP		//  a
 4072 200c FEF71DF9 		BL	DONXT
 4073 2010 00200000 		.word	SEE1-MAPOFFSET
 4074 2014 FEF78AF9 		BL	DROP
 4075 2018 52F804FB 		_UNNEST
 4076              	
 4077              	// 	DECOMPILE ( a -- )
 4078              	// 	Convert code in a.  Display name of command or as data.
 4079              	
 4080 201c E41F0000 		.word	_SEE-MAPOFFSET
 4081 2020 09       	_DECOM:	.byte  9
 4082 2021 4445434F 		.ascii "DECOMPILE"
 4082      4D50494C 
 4082      45
 4083 202a 00BF     		.p2align 2 
 4084              		
 4085              	DECOMP:	
 4086 202c 42F804ED 		_NEST
 4087 2030 FEF784F9 		BL	DUPP			//  a a
 4088              	// 	BL	TOR			//  a
 4089 2034 FEF73EF9 		BL	AT			//  a code
 4090 2038 FEF780F9 		BL	DUPP			//  a code code
 4091 203c FEF7F1F8 		_DOLIT
 4092 2040 00F800F8 		.word	0xF800F800
 4093 2044 FEF79EF9 		BL	ANDD
 4094 2048 FEF7EBF8 		_DOLIT
 4095 204c 00F000F8 		.word	0xF800F000
 4096 2050 FEF7B0FA 		BL	EQUAL			//  a code ?
 4097 2054 FEF708F9 		BL	QBRAN
 4098 2058 B0200000 		.word	DECOM2-MAPOFFSET	//  not a command
 4099              		//  a valid_code --, extract address and display name
 4100 205c 40F6FE70 		MOVW	R0,#0xFFE
 4101 2060 2C46     		MOV	R4,R5
 4102 2062 4FEA4555 		LSL	R5,R5,#21		//  get bits 22-12
 4103 2066 4FEA6525 		ASR	R5,R5,#9		//  with sign extension
 4104 206a 4FEAD434 		LSR	R4,R4,#15		//  get bits 11-1
 4105 206e 04EA0004 		AND	R4,R4,R0		//  retain only bits 11-1
 4106 2072 45EA0405 		ORR	R5,R5,R4		//  get bits 22-1
 4107 2076 00BF     		NOP
 4108 2078 FEF772F9 		BL	OVER			//  a offset a
 4109 207c FEF7C2F9 		BL	PLUS			//  a target-4
 4110 2080 FEF70EFA 		BL	CELLP			//  a target
 4111 2084 FFF764FF 		BL	TNAME			//  a na/0 --, is it a name?
 4112 2088 FEF744FA 		BL	QDUP			//  name address or zero
 4113 208c FEF7ECF8 		BL	QBRAN
 4114 2090 A4200000 		.word	DECOM1-MAPOFFSET
 4115 2094 FEF722FF 		BL	SPACE			//  a na
 4116 2098 FFF784FF 		BL	DOTID			//  a --, display name
 4117              	// 	BL	RFROM			//  a
 4118 209c FEF746F9 		BL	DROP
 4119 20a0 52F804FB 		_UNNEST
 4120              	DECOM1:	// BL	RFROM		//  a
 4121 20a4 FEF706F9 		BL	AT			//  data
 4122 20a8 FEF7CCFF 		BL	UDOT			//  display data
 4123 20ac 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 77


 4124              	DECOM2:
 4125 20b0 FEF7C8FF 		BL	UDOT
 4126              	// 	BL	RFROM
 4127 20b4 FEF73AF9 		BL	DROP
 4128 20b8 52F804FB 		_UNNEST
 4129              	
 4130              	//    WORDS	( -- )
 4131              	// 	Display the names in the context vocabulary.
 4132              	
 4133 20bc 20200000 		.word	_DECOM-MAPOFFSET
 4134 20c0 05       	_WORDS:	.byte  5
 4135 20c1 574F5244 		.ascii "WORDS"
 4135      53
 4136 20c6 00BF     		.p2align 2 	
 4137              	WORDS:
 4138 20c8 42F804ED 		_NEST
 4139 20cc FEF746FF 		BL	CR
 4140 20d0 FEF760FB 		BL	CNTXT
 4141 20d4 FEF7EEF8 		BL	AT			// only in context
 4142              	WORS1:
 4143 20d8 FEF71CFA 		BL	QDUP			// ?at end of list
 4144 20dc FEF7C4F8 		BL	QBRAN
 4145 20e0 FC200000 		.word	WORS2-MAPOFFSET
 4146 20e4 FEF72AF9 		BL	DUPP
 4147 20e8 FEF7F8FE 		BL	SPACE
 4148 20ec FFF75AFF 		BL	DOTID			// display a name
 4149 20f0 FEF7DEF9 		BL	CELLM
 4150 20f4 FEF7DEF8 		BL	AT
 4151 20f8 FFF7EEBF 		B.W	WORS1
 4152              	WORS2:
 4153 20fc 52F804FB 		_UNNEST
 4154              	
 4155              	// **************************************************************************
 4156              	//  cold start
 4157              	
 4158              	//    VER	 ( -- n )
 4159              	// 	Return the version number of this implementation.
 4160              	
 4161              	// 	.word	_WORDS-MAPOFFSET
 4162              	// _VERSN	.byte  3
 4163              	// 	.ascii "VER"
 4164              	// 	.p2align 2 	
 4165              	VERSN:
 4166 2100 42F804ED 		_NEST
 4167 2104 FEF78DF8 		_DOLIT
 4168 2108 00010000 		.word	VER*256+EXT
 4169 210c 52F804FB 		_UNNEST
 4170              	
 4171              	//    hi	  ( -- )
 4172              	// 	Display the sign-on message of eForth.
 4173              	
 4174 2110 C0200000 		.word	_WORDS-MAPOFFSET
 4175 2114 02       	_HI:	.byte  2
 4176 2115 4849     		.ascii "HI"
 4177 2117 00       		.p2align 2 	
 4178              	HI:
 4179 2118 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 78


 4180 211c FEF71EFF 		BL	CR	// initialize I/O
 4181 2120 FEF754FF 		BL	DOTQP
 4182 2124 17       		.byte	23
 4183 2125 626C7565 		.ascii "blue pill stm32eForth v" 
 4183      2070696C 
 4183      6C207374 
 4183      6D333265 
 4183      466F7274 
 4184              		.p2align 2
 4185 213c FEF7E6FA 		BL	BASE
 4186 2140 FEF7B8F8 		BL	AT
 4187 2144 FEF7BAFD 		BL	HEX	// save radix
 4188 2148 FFF7DAFF 		BL	VERSN
 4189 214c FEF732FD 		BL	BDIGS
 4190 2150 FEF756FD 		BL	DIG
 4191 2154 FEF754FD 		BL	DIG
 4192 2158 FEF763F8 		_DOLIT
 4193 215c 2E000000 		.word	'.'
 4194 2160 FEF738FD 		BL	HOLD
 4195 2164 FEF75CFD 		BL	DIGS
 4196 2168 FEF780FD 		BL	EDIGS
 4197 216c FEF7DEFE 		BL	TYPEE	// format version number
 4198 2170 FEF7CCFA 		BL	BASE
 4199 2174 FEF794F8 		BL	STORE
 4200 2178 FEF7F0FE 		BL	CR
 4201 217c 52F804FB 		_UNNEST			// restore radix
 4202              	
 4203              	//    COLD	( -- )
 4204              	// 	The high level cold start sequence.
 4205              	
 4206 2180 14210000 		.word	_HI-MAPOFFSET
 4207 2184 04       	LASTN:	.byte  4
 4208 2185 434F4C44 		.ascii "COLD"
 4209 2189 000000   		.p2align 2,0	
 4210              	COLD:
 4211              	//  Initiate Forth registers
 4212 218c 4FF00003 		MOV R3,#UPP&0xffff	//  user area 
 4213 2190 C2F20003 	 	MOVT R3,#UPP>>16		  
 4214 2194 03F59F42 		ADD R2,R3,#RPP&0xffff	// Forth return stack
 4215 2198 03F59D41 		ADD R1,R3,#SPP&0xffff // Forth data stack
 4216 219c 85EA0505 		EOR R5,R5,R5			//  tos=0
 4217 21a0 00BF     		NOP
 4218 21a2 42F804ED 		_NEST
 4219              	COLD1:
 4220 21a6 FEF73CF8 		_DOLIT 
 4221 21aa 00000000 		.word 0 
 4222 21ae FDF7F9FF 		BL ULED // turn off user LED 
 4223 21b2 FEF736F8 		_DOLIT
 4224 21b6 FC000000 		.word	UZERO-MAPOFFSET
 4225 21ba FEF732F8 		_DOLIT
 4226 21be 00000020 		.word	UPP
 4227 21c2 FEF72EF8 		_DOLIT
 4228 21c6 48000000 		.word	ULAST-UZERO
 4229 21ca FEF767FC 		BL	MOVE 			// initialize user area
 4230 21ce FFF7C5FA 		BL	PRESE			// initialize stack and TIB
 4231 21d2 FEF791FA 		BL	TBOOT
 4232 21d6 FEF73DFC 		BL	ATEXE			// application boot
ARM GAS  stm32eforth.s 			page 79


 4233 21da FFF76DFD 		BL	OVERT
 4234 21de FFF7C9BA 		B.W	QUIT			// start interpretation
 4235              	COLD2:	
 4236              	CTOP:
 4237 21e2 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4238              	
 4239 21e6 00000020 	  .end 
 4239      02402301 
 4239      6745AB89 
 4239      EFCD
ARM GAS  stm32eforth.s 			page 80


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
ARM GAS  stm32eforth.s 			page 81


board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
board/blue-pill/stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
board/blue-pill/stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
board/blue-pill/stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
board/blue-pill/stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
board/blue-pill/stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
board/blue-pill/stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
board/blue-pill/stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
board/blue-pill/stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
board/blue-pill/stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
board/blue-pill/stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
board/blue-pill/stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
board/blue-pill/stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
board/blue-pill/stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
board/blue-pill/stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
board/blue-pill/stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
board/blue-pill/stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32eforth.s:83     *ABS*:0000000040011000 LED_GPIO
       stm32eforth.s:84     *ABS*:000000000000000d LED_PIN
       stm32eforth.s:85     *ABS*:0000000040013800 UART
       stm32eforth.s:88     *ABS*:0000000020004e80 SPP
       stm32eforth.s:89     *ABS*:0000000020004e80 TIBB
       stm32eforth.s:90     *ABS*:0000000020004f80 RPP
       stm32eforth.s:91     *ABS*:0000000020000000 UPP
       stm32eforth.s:92     *ABS*:0000000020000100 DTOP
       stm32eforth.s:93     *ABS*:0000000020004e00 DEND
       stm32eforth.s:98     *ABS*:0000000000000004 TICKS_OFS
       stm32eforth.s:99     *ABS*:0000000000000008 TIMER_OFS
       stm32eforth.s:100    *ABS*:000000000000000c BOOT_OFS
       stm32eforth.s:101    *ABS*:0000000000000010 BASE_OFS
       stm32eforth.s:102    *ABS*:0000000000000014 TMP_OFS
       stm32eforth.s:103    *ABS*:0000000000000018 SPAN_OFS
       stm32eforth.s:104    *ABS*:000000000000001c TOIN_OFS
       stm32eforth.s:105    *ABS*:0000000000000020 NTIB_OFS
       stm32eforth.s:106    *ABS*:0000000000000024 TIB_OFS
       stm32eforth.s:107    *ABS*:0000000000000028 EVAL_OFS
       stm32eforth.s:108    *ABS*:000000000000002c HLD_OFS
       stm32eforth.s:109    *ABS*:0000000000000030 CTXT_OFS
       stm32eforth.s:110    *ABS*:0000000000000034 FLSH_CTOP_OFS
       stm32eforth.s:111    *ABS*:0000000000000038 RAM_CTOP_OFS
       stm32eforth.s:112    *ABS*:000000000000003c LASTN_OFS
       stm32eforth.s:151    .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:283    .text.reset_handler:0000000000000000 reset_handler
       stm32eforth.s:242    .text.default_handler:0000000000000000 default_handler
       stm32eforth.s:262    .text.default_handler:000000000000002c systick_handler
       stm32eforth.s:240    .text.default_handler:0000000000000000 $t
       stm32eforth.s:598    .text.reset_handler:0000000000000222 DOLIT
       stm32eforth.s:244    .text.default_handler:0000000000000004 $d
ARM GAS  stm32eforth.s 			page 82


       stm32eforth.s:518    .text.reset_handler:00000000000001a4 ULED
       stm32eforth.s:245    .text.default_handler:0000000000000008 $t
       stm32eforth.s:2351   .text.reset_handler:0000000000000f5c CR
       stm32eforth.s:2417   .text.reset_handler:0000000000000fcc DOTQP
       stm32eforth.s:248    .text.default_handler:0000000000000014 $d
       stm32eforth.s:482    .text.reset_handler:0000000000000150 REBOOT
       stm32eforth.s:272    .text.default_handler:0000000000000046 systick_exit
       stm32eforth.s:281    .text.reset_handler:0000000000000000 $t
       stm32eforth.s:290    .text.reset_handler:0000000000000014 zero_loop
       stm32eforth.s:301    .text.reset_handler:000000000000002c init_devices
       stm32eforth.s:3199   .text.reset_handler:0000000000001794 UNLOCK
       stm32eforth.s:4210   .text.reset_handler:000000000000218c COLD
       stm32eforth.s:316    .text.reset_handler:000000000000004a wait_hserdy
       stm32eforth.s:336    .text.reset_handler:0000000000000064 wait_pllrdy
       stm32eforth.s:349    .text.reset_handler:0000000000000084 wait_sws
       stm32eforth.s:402    *ABS*:0000000000000001 VER
       stm32eforth.s:403    *ABS*:0000000000000000 EXT
       stm32eforth.s:409    *ABS*:0000000000000000 RAMOFFSET
       stm32eforth.s:410    *ABS*:0000000000000000 MAPOFFSET
       stm32eforth.s:412    *ABS*:0000000000000040 COMPO
       stm32eforth.s:413    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:414    *ABS*:00000000ffffff1f MASKK
       stm32eforth.s:416    *ABS*:0000000000000004 CELLL
       stm32eforth.s:417    *ABS*:0000000000000010 BASEE
       stm32eforth.s:418    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:420    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:421    *ABS*:000000000000000a LF
       stm32eforth.s:422    *ABS*:000000000000000d CRR
       stm32eforth.s:423    *ABS*:000000000000001b ERR
       stm32eforth.s:424    *ABS*:0000000000000027 TIC
       stm32eforth.s:447    .text.reset_handler:00000000000000fc UZERO
       stm32eforth.s:448    .text.reset_handler:00000000000000fc $d
       stm32eforth.s:4178   .text.reset_handler:0000000000002118 HI
       stm32eforth.s:3059   .text.reset_handler:0000000000001638 INTER
       stm32eforth.s:4207   .text.reset_handler:0000000000002184 LASTN
       stm32eforth.s:4236   .text.reset_handler:00000000000021e2 CTOP
       stm32eforth.s:465    .text.reset_handler:0000000000000144 ULAST
       stm32eforth.s:477    .text.reset_handler:0000000000000144 $d
       stm32eforth.s:478    .text.reset_handler:0000000000000148 _REBOOT
       stm32eforth.s:493    .text.reset_handler:0000000000000166 $d
       stm32eforth.s:494    .text.reset_handler:000000000000016a _PAUSE
       stm32eforth.s:496    .text.reset_handler:0000000000000170 $t
       stm32eforth.s:497    .text.reset_handler:0000000000000170 PAUSE
       stm32eforth.s:1406   .text.reset_handler:00000000000006e4 TIMER
       stm32eforth.s:688    .text.reset_handler:00000000000002a0 STORE
       stm32eforth.s:501    .text.reset_handler:000000000000017c PAUSE_LOOP
       stm32eforth.s:701    .text.reset_handler:00000000000002b4 AT
       stm32eforth.s:648    .text.reset_handler:0000000000000268 QBRAN
       stm32eforth.s:505    .text.reset_handler:0000000000000188 $d
       stm32eforth.s:508    .text.reset_handler:0000000000000194 PAUSE_EXIT
       stm32eforth.s:666    .text.reset_handler:0000000000000280 BRAN
       stm32eforth.s:506    .text.reset_handler:000000000000018c $t
       stm32eforth.s:507    .text.reset_handler:0000000000000190 $d
       stm32eforth.s:509    .text.reset_handler:0000000000000194 $t
       stm32eforth.s:513    .text.reset_handler:0000000000000198 $d
       stm32eforth.s:514    .text.reset_handler:000000000000019c _ULED
       stm32eforth.s:527    .text.reset_handler:00000000000001bc ULED_OFF
ARM GAS  stm32eforth.s 			page 83


       stm32eforth.s:533    .text.reset_handler:00000000000001c0 $d
       stm32eforth.s:534    .text.reset_handler:00000000000001c4 _QRX
       stm32eforth.s:537    .text.reset_handler:00000000000001cc QKEY
       stm32eforth.s:538    .text.reset_handler:00000000000001cc QRX
       stm32eforth.s:549    .text.reset_handler:00000000000001ec QRX1
       stm32eforth.s:558    .text.reset_handler:00000000000001f4 $d
       stm32eforth.s:559    .text.reset_handler:00000000000001f8 _TXSTO
       stm32eforth.s:562    .text.reset_handler:0000000000000200 TXSTO
       stm32eforth.s:563    .text.reset_handler:0000000000000200 EMIT
       stm32eforth.s:564    .text.reset_handler:0000000000000200 TECHO
       stm32eforth.s:567    .text.reset_handler:0000000000000208 TX1
       stm32eforth.s:583    .text.reset_handler:0000000000000218 $d
       stm32eforth.s:584    .text.reset_handler:000000000000021c _NOP
       stm32eforth.s:586    .text.reset_handler:0000000000000220 $t
       stm32eforth.s:587    .text.reset_handler:0000000000000220 NOP
       stm32eforth.s:608    .text.reset_handler:0000000000000234 $d
       stm32eforth.s:609    .text.reset_handler:0000000000000238 _EXECU
       stm32eforth.s:611    .text.reset_handler:0000000000000240 $t
       stm32eforth.s:612    .text.reset_handler:0000000000000240 EXECU
       stm32eforth.s:626    .text.reset_handler:000000000000024a DONXT
       stm32eforth.s:633    .text.reset_handler:0000000000000258 NEXT1
       stm32eforth.s:655    .text.reset_handler:000000000000027a QBRAN1
       stm32eforth.s:674    .text.reset_handler:000000000000028a $d
       stm32eforth.s:675    .text.reset_handler:000000000000028e _EXIT
       stm32eforth.s:678    .text.reset_handler:0000000000000294 EXIT
       stm32eforth.s:684    .text.reset_handler:0000000000000298 $d
       stm32eforth.s:685    .text.reset_handler:000000000000029c _STORE
       stm32eforth.s:687    .text.reset_handler:000000000000029e $t
       stm32eforth.s:697    .text.reset_handler:00000000000002ac $d
       stm32eforth.s:698    .text.reset_handler:00000000000002b0 _AT
       stm32eforth.s:700    .text.reset_handler:00000000000002b2 $t
       stm32eforth.s:708    .text.reset_handler:00000000000002b8 $d
       stm32eforth.s:709    .text.reset_handler:00000000000002bc _CSTOR
       stm32eforth.s:712    .text.reset_handler:00000000000002c0 CSTOR
       stm32eforth.s:721    .text.reset_handler:00000000000002cc $d
       stm32eforth.s:722    .text.reset_handler:00000000000002d0 _CAT
       stm32eforth.s:725    .text.reset_handler:00000000000002d4 CAT
       stm32eforth.s:732    .text.reset_handler:00000000000002d8 $d
       stm32eforth.s:733    .text.reset_handler:00000000000002dc _RFROM
       stm32eforth.s:736    .text.reset_handler:00000000000002e0 RFROM
       stm32eforth.s:744    .text.reset_handler:00000000000002ea $d
       stm32eforth.s:745    .text.reset_handler:00000000000002ee _RAT
       stm32eforth.s:748    .text.reset_handler:00000000000002f4 RAT
       stm32eforth.s:756    .text.reset_handler:00000000000002fc $d
       stm32eforth.s:757    .text.reset_handler:0000000000000300 _TOR
       stm32eforth.s:760    .text.reset_handler:0000000000000304 TOR
       stm32eforth.s:768    .text.reset_handler:000000000000030e $d
       stm32eforth.s:769    .text.reset_handler:0000000000000312 _SPAT
       stm32eforth.s:771    .text.reset_handler:0000000000000316 $t
       stm32eforth.s:772    .text.reset_handler:0000000000000318 SPAT
       stm32eforth.s:780    .text.reset_handler:0000000000000320 $d
       stm32eforth.s:781    .text.reset_handler:0000000000000324 _DROP
       stm32eforth.s:784    .text.reset_handler:000000000000032c DROP
       stm32eforth.s:791    .text.reset_handler:0000000000000332 $d
       stm32eforth.s:792    .text.reset_handler:0000000000000336 _DUPP
       stm32eforth.s:794    .text.reset_handler:000000000000033a $t
       stm32eforth.s:795    .text.reset_handler:000000000000033c DUPP
ARM GAS  stm32eforth.s 			page 84


       stm32eforth.s:802    .text.reset_handler:0000000000000342 $d
       stm32eforth.s:803    .text.reset_handler:0000000000000346 _SWAP
       stm32eforth.s:806    .text.reset_handler:000000000000034c SWAP
       stm32eforth.s:815    .text.reset_handler:0000000000000354 $d
       stm32eforth.s:816    .text.reset_handler:0000000000000358 _OVER
       stm32eforth.s:819    .text.reset_handler:0000000000000360 OVER
       stm32eforth.s:827    .text.reset_handler:0000000000000368 $d
       stm32eforth.s:828    .text.reset_handler:000000000000036c _ZLESS
       stm32eforth.s:831    .text.reset_handler:0000000000000370 ZLESS
       stm32eforth.s:839    .text.reset_handler:000000000000037a $d
       stm32eforth.s:840    .text.reset_handler:000000000000037e _ANDD
       stm32eforth.s:842    .text.reset_handler:0000000000000382 $t
       stm32eforth.s:843    .text.reset_handler:0000000000000384 ANDD
       stm32eforth.s:851    .text.reset_handler:000000000000038e $d
       stm32eforth.s:852    .text.reset_handler:0000000000000392 _ORR
       stm32eforth.s:855    .text.reset_handler:0000000000000398 ORR
       stm32eforth.s:863    .text.reset_handler:00000000000003a2 $d
       stm32eforth.s:864    .text.reset_handler:00000000000003a6 _XORR
       stm32eforth.s:866    .text.reset_handler:00000000000003aa $t
       stm32eforth.s:867    .text.reset_handler:00000000000003ac XORR
       stm32eforth.s:875    .text.reset_handler:00000000000003b6 $d
       stm32eforth.s:876    .text.reset_handler:00000000000003ba _UPLUS
       stm32eforth.s:878    .text.reset_handler:00000000000003be $t
       stm32eforth.s:879    .text.reset_handler:00000000000003c0 UPLUS
       stm32eforth.s:890    .text.reset_handler:00000000000003d0 $d
       stm32eforth.s:891    .text.reset_handler:00000000000003d4 _RSHIFT
       stm32eforth.s:894    .text.reset_handler:00000000000003dc RSHIFT
       stm32eforth.s:902    .text.reset_handler:00000000000003e6 $d
       stm32eforth.s:903    .text.reset_handler:00000000000003ea _LSHIFT
       stm32eforth.s:906    .text.reset_handler:00000000000003f4 LSHIFT
       stm32eforth.s:914    .text.reset_handler:00000000000003fe $d
       stm32eforth.s:915    .text.reset_handler:0000000000000402 _PLUS
       stm32eforth.s:917    .text.reset_handler:0000000000000404 $t
       stm32eforth.s:918    .text.reset_handler:0000000000000404 PLUS
       stm32eforth.s:926    .text.reset_handler:000000000000040c $d
       stm32eforth.s:927    .text.reset_handler:0000000000000410 _SUBB
       stm32eforth.s:929    .text.reset_handler:0000000000000412 $t
       stm32eforth.s:930    .text.reset_handler:0000000000000414 SUBB
       stm32eforth.s:938    .text.reset_handler:000000000000041e $d
       stm32eforth.s:939    .text.reset_handler:0000000000000422 _STAR
       stm32eforth.s:941    .text.reset_handler:0000000000000424 $t
       stm32eforth.s:942    .text.reset_handler:0000000000000424 STAR
       stm32eforth.s:950    .text.reset_handler:000000000000042e $d
       stm32eforth.s:951    .text.reset_handler:0000000000000432 _UMSTA
       stm32eforth.s:953    .text.reset_handler:0000000000000436 $t
       stm32eforth.s:954    .text.reset_handler:0000000000000438 UMSTA
       stm32eforth.s:964    .text.reset_handler:0000000000000444 $d
       stm32eforth.s:965    .text.reset_handler:0000000000000448 _MSTAR
       stm32eforth.s:968    .text.reset_handler:000000000000044c MSTAR
       stm32eforth.s:978    .text.reset_handler:0000000000000458 $d
       stm32eforth.s:979    .text.reset_handler:000000000000045c _ONEP
       stm32eforth.s:982    .text.reset_handler:0000000000000460 ONEP
       stm32eforth.s:989    .text.reset_handler:0000000000000466 $d
       stm32eforth.s:990    .text.reset_handler:000000000000046a _ONEM
       stm32eforth.s:993    .text.reset_handler:0000000000000470 ONEM
       stm32eforth.s:1000   .text.reset_handler:0000000000000476 $d
       stm32eforth.s:1001   .text.reset_handler:000000000000047a _TWOP
ARM GAS  stm32eforth.s 			page 85


       stm32eforth.s:1004   .text.reset_handler:0000000000000480 TWOP
       stm32eforth.s:1011   .text.reset_handler:0000000000000486 $d
       stm32eforth.s:1012   .text.reset_handler:000000000000048a _TWOM
       stm32eforth.s:1015   .text.reset_handler:0000000000000490 TWOM
       stm32eforth.s:1022   .text.reset_handler:0000000000000496 $d
       stm32eforth.s:1023   .text.reset_handler:000000000000049a _CELLP
       stm32eforth.s:1025   .text.reset_handler:00000000000004a0 $t
       stm32eforth.s:1026   .text.reset_handler:00000000000004a0 CELLP
       stm32eforth.s:1033   .text.reset_handler:00000000000004a6 $d
       stm32eforth.s:1034   .text.reset_handler:00000000000004aa _CELLM
       stm32eforth.s:1036   .text.reset_handler:00000000000004b0 $t
       stm32eforth.s:1037   .text.reset_handler:00000000000004b0 CELLM
       stm32eforth.s:1044   .text.reset_handler:00000000000004b6 $d
       stm32eforth.s:1045   .text.reset_handler:00000000000004ba _BLANK
       stm32eforth.s:1048   .text.reset_handler:00000000000004c0 BLANK
       stm32eforth.s:1056   .text.reset_handler:00000000000004ca $d
       stm32eforth.s:1057   .text.reset_handler:00000000000004ce _CELLS
       stm32eforth.s:1059   .text.reset_handler:00000000000004d4 $t
       stm32eforth.s:1060   .text.reset_handler:00000000000004d4 CELLS
       stm32eforth.s:1067   .text.reset_handler:00000000000004da $d
       stm32eforth.s:1068   .text.reset_handler:00000000000004de _CELLSL
       stm32eforth.s:1070   .text.reset_handler:00000000000004e4 $t
       stm32eforth.s:1071   .text.reset_handler:00000000000004e4 CELLSL
       stm32eforth.s:1078   .text.reset_handler:00000000000004ea $d
       stm32eforth.s:1079   .text.reset_handler:00000000000004ee _TWOST
       stm32eforth.s:1082   .text.reset_handler:00000000000004f4 TWOST
       stm32eforth.s:1089   .text.reset_handler:00000000000004fa $d
       stm32eforth.s:1090   .text.reset_handler:00000000000004fe _TWOSL
       stm32eforth.s:1093   .text.reset_handler:0000000000000504 TWOSL
       stm32eforth.s:1100   .text.reset_handler:000000000000050a $d
       stm32eforth.s:1101   .text.reset_handler:000000000000050e _QDUP
       stm32eforth.s:1104   .text.reset_handler:0000000000000514 QDUP
       stm32eforth.s:1113   .text.reset_handler:000000000000051e $d
       stm32eforth.s:1114   .text.reset_handler:0000000000000522 _ROT
       stm32eforth.s:1116   .text.reset_handler:0000000000000526 $t
       stm32eforth.s:1117   .text.reset_handler:0000000000000528 ROT
       stm32eforth.s:1127   .text.reset_handler:0000000000000532 $d
       stm32eforth.s:1128   .text.reset_handler:0000000000000536 _DDROP
       stm32eforth.s:1130   .text.reset_handler:000000000000053c $t
       stm32eforth.s:1131   .text.reset_handler:000000000000053c DDROP
       stm32eforth.s:1139   .text.reset_handler:0000000000000546 $d
       stm32eforth.s:1140   .text.reset_handler:000000000000054a _DDUP
       stm32eforth.s:1143   .text.reset_handler:0000000000000550 DDUP
       stm32eforth.s:1152   .text.reset_handler:000000000000055c $d
       stm32eforth.s:1153   .text.reset_handler:0000000000000560 _DPLUS
       stm32eforth.s:1156   .text.reset_handler:0000000000000564 DPLUS
       stm32eforth.s:1168   .text.reset_handler:0000000000000578 $d
       stm32eforth.s:1169   .text.reset_handler:000000000000057c _INVER
       stm32eforth.s:1171   .text.reset_handler:0000000000000580 $t
       stm32eforth.s:1172   .text.reset_handler:0000000000000580 INVER
       stm32eforth.s:1179   .text.reset_handler:0000000000000586 $d
       stm32eforth.s:1180   .text.reset_handler:000000000000058a _NEGAT
       stm32eforth.s:1183   .text.reset_handler:0000000000000594 NEGAT
       stm32eforth.s:1190   .text.reset_handler:000000000000059a $d
       stm32eforth.s:1191   .text.reset_handler:000000000000059e _ABSS
       stm32eforth.s:1193   .text.reset_handler:00000000000005a2 $t
       stm32eforth.s:1194   .text.reset_handler:00000000000005a4 ABSS
ARM GAS  stm32eforth.s 			page 86


       stm32eforth.s:1203   .text.reset_handler:00000000000005ae $d
       stm32eforth.s:1204   .text.reset_handler:00000000000005b2 _EQUAL
       stm32eforth.s:1206   .text.reset_handler:00000000000005b4 $t
       stm32eforth.s:1207   .text.reset_handler:00000000000005b4 EQUAL
       stm32eforth.s:1218   .text.reset_handler:00000000000005c4 $d
       stm32eforth.s:1219   .text.reset_handler:00000000000005c8 _ULESS
       stm32eforth.s:1222   .text.reset_handler:00000000000005cc ULESS
       stm32eforth.s:1233   .text.reset_handler:00000000000005dc $d
       stm32eforth.s:1234   .text.reset_handler:00000000000005e0 _LESS
       stm32eforth.s:1236   .text.reset_handler:00000000000005e2 $t
       stm32eforth.s:1237   .text.reset_handler:00000000000005e4 LESS
       stm32eforth.s:1248   .text.reset_handler:00000000000005f4 $d
       stm32eforth.s:1249   .text.reset_handler:00000000000005f8 _GREAT
       stm32eforth.s:1251   .text.reset_handler:00000000000005fa $t
       stm32eforth.s:1252   .text.reset_handler:00000000000005fc GREAT
       stm32eforth.s:1263   .text.reset_handler:000000000000060c $d
       stm32eforth.s:1264   .text.reset_handler:0000000000000610 _MAX
       stm32eforth.s:1266   .text.reset_handler:0000000000000614 $t
       stm32eforth.s:1267   .text.reset_handler:0000000000000614 MAX
       stm32eforth.s:1277   .text.reset_handler:0000000000000620 $d
       stm32eforth.s:1278   .text.reset_handler:0000000000000624 _MIN
       stm32eforth.s:1280   .text.reset_handler:0000000000000628 $t
       stm32eforth.s:1281   .text.reset_handler:0000000000000628 MIN
       stm32eforth.s:1291   .text.reset_handler:0000000000000634 $d
       stm32eforth.s:1292   .text.reset_handler:0000000000000638 _PSTOR
       stm32eforth.s:1295   .text.reset_handler:000000000000063c PSTOR
       stm32eforth.s:1306   .text.reset_handler:000000000000064c $d
       stm32eforth.s:1307   .text.reset_handler:0000000000000650 _DSTOR
       stm32eforth.s:1310   .text.reset_handler:0000000000000654 DSTOR
       stm32eforth.s:1321   .text.reset_handler:0000000000000668 $d
       stm32eforth.s:1322   .text.reset_handler:000000000000066c _DAT
       stm32eforth.s:1325   .text.reset_handler:0000000000000670 DAT
       stm32eforth.s:1334   .text.reset_handler:000000000000067a $d
       stm32eforth.s:1335   .text.reset_handler:000000000000067e _COUNT
       stm32eforth.s:1337   .text.reset_handler:0000000000000684 $t
       stm32eforth.s:1338   .text.reset_handler:0000000000000684 COUNT
       stm32eforth.s:1347   .text.reset_handler:0000000000000690 $d
       stm32eforth.s:1348   .text.reset_handler:0000000000000694 _DNEGA
       stm32eforth.s:1350   .text.reset_handler:000000000000069c $t
       stm32eforth.s:1351   .text.reset_handler:000000000000069c DNEGA
       stm32eforth.s:1369   .text.reset_handler:00000000000006ac DOVAR
       stm32eforth.s:1381   .text.reset_handler:00000000000006b8 DOCON
       stm32eforth.s:1392   .text.reset_handler:00000000000006c4 $d
       stm32eforth.s:1393   .text.reset_handler:00000000000006c8 _MSEC
       stm32eforth.s:1396   .text.reset_handler:00000000000006d0 MSEC
       stm32eforth.s:1402   .text.reset_handler:00000000000006da $d
       stm32eforth.s:1403   .text.reset_handler:00000000000006de _TIMER
       stm32eforth.s:1405   .text.reset_handler:00000000000006e4 $t
       stm32eforth.s:1414   .text.reset_handler:00000000000006ee $d
       stm32eforth.s:1415   .text.reset_handler:00000000000006f2 _TBOOT
       stm32eforth.s:1417   .text.reset_handler:00000000000006f8 $t
       stm32eforth.s:1418   .text.reset_handler:00000000000006f8 TBOOT
       stm32eforth.s:1426   .text.reset_handler:0000000000000702 $d
       stm32eforth.s:1427   .text.reset_handler:0000000000000706 _BASE
       stm32eforth.s:1430   .text.reset_handler:000000000000070c BASE
       stm32eforth.s:1442   .text.reset_handler:0000000000000716 TEMP
       stm32eforth.s:1450   .text.reset_handler:0000000000000720 $d
ARM GAS  stm32eforth.s 			page 87


       stm32eforth.s:1451   .text.reset_handler:0000000000000724 _SPAN
       stm32eforth.s:1454   .text.reset_handler:000000000000072c SPAN
       stm32eforth.s:1462   .text.reset_handler:0000000000000736 $d
       stm32eforth.s:1463   .text.reset_handler:000000000000073a _INN
       stm32eforth.s:1465   .text.reset_handler:000000000000073e $t
       stm32eforth.s:1466   .text.reset_handler:0000000000000740 INN
       stm32eforth.s:1474   .text.reset_handler:000000000000074a $d
       stm32eforth.s:1475   .text.reset_handler:000000000000074e _NTIB
       stm32eforth.s:1478   .text.reset_handler:0000000000000754 NTIB
       stm32eforth.s:1486   .text.reset_handler:000000000000075e $d
       stm32eforth.s:1487   .text.reset_handler:0000000000000762 _TEVAL
       stm32eforth.s:1489   .text.reset_handler:0000000000000768 $t
       stm32eforth.s:1490   .text.reset_handler:0000000000000768 TEVAL
       stm32eforth.s:1498   .text.reset_handler:0000000000000772 $d
       stm32eforth.s:1499   .text.reset_handler:0000000000000776 _HLD
       stm32eforth.s:1501   .text.reset_handler:000000000000077a $t
       stm32eforth.s:1502   .text.reset_handler:000000000000077c HLD
       stm32eforth.s:1510   .text.reset_handler:0000000000000786 $d
       stm32eforth.s:1511   .text.reset_handler:000000000000078a _CNTXT
       stm32eforth.s:1513   .text.reset_handler:0000000000000792 $t
       stm32eforth.s:1514   .text.reset_handler:0000000000000794 CNTXT
       stm32eforth.s:1515   .text.reset_handler:0000000000000794 CRRNT
       stm32eforth.s:1523   .text.reset_handler:000000000000079e $d
       stm32eforth.s:1524   .text.reset_handler:00000000000007a2 _CP
       stm32eforth.s:1527   .text.reset_handler:00000000000007a8 CPP
       stm32eforth.s:1534   .text.reset_handler:00000000000007b2 $d
       stm32eforth.s:1535   .text.reset_handler:00000000000007b6 _FCPP
       stm32eforth.s:1538   .text.reset_handler:00000000000007bc FCPP
       stm32eforth.s:1546   .text.reset_handler:00000000000007c6 $d
       stm32eforth.s:1547   .text.reset_handler:00000000000007ca _LAST
       stm32eforth.s:1550   .text.reset_handler:00000000000007d0 LAST
       stm32eforth.s:1561   .text.reset_handler:00000000000007da $d
       stm32eforth.s:1562   .text.reset_handler:00000000000007de _WITHI
       stm32eforth.s:1565   .text.reset_handler:00000000000007e8 WITHI
       stm32eforth.s:1580   .text.reset_handler:0000000000000808 $d
       stm32eforth.s:1581   .text.reset_handler:000000000000080c _UMMOD
       stm32eforth.s:1584   .text.reset_handler:0000000000000814 UMMOD
       stm32eforth.s:1588   .text.reset_handler:000000000000081e UMMOD0
       stm32eforth.s:1595   .text.reset_handler:000000000000082e UMMOD1
       stm32eforth.s:1601   .text.reset_handler:0000000000000838 UMMOD2
       stm32eforth.s:1611   .text.reset_handler:0000000000000842 $d
       stm32eforth.s:1612   .text.reset_handler:0000000000000846 _MSMOD
       stm32eforth.s:1614   .text.reset_handler:000000000000084c $t
       stm32eforth.s:1615   .text.reset_handler:000000000000084c MSMOD
       stm32eforth.s:1622   .text.reset_handler:0000000000000864 $d
       stm32eforth.s:1627   .text.reset_handler:0000000000000878 MMOD1
       stm32eforth.s:1623   .text.reset_handler:0000000000000868 $t
       stm32eforth.s:1632   .text.reset_handler:0000000000000888 $d
       stm32eforth.s:1635   .text.reset_handler:0000000000000894 MMOD2
       stm32eforth.s:1633   .text.reset_handler:000000000000088c $t
       stm32eforth.s:1640   .text.reset_handler:00000000000008a4 $d
       stm32eforth.s:1644   .text.reset_handler:00000000000008b4 MMOD3
       stm32eforth.s:1641   .text.reset_handler:00000000000008a8 $t
       stm32eforth.s:1650   .text.reset_handler:00000000000008b8 $d
       stm32eforth.s:1651   .text.reset_handler:00000000000008bc _SLMOD
       stm32eforth.s:1654   .text.reset_handler:00000000000008c4 SLMOD
       stm32eforth.s:1665   .text.reset_handler:00000000000008dc $d
ARM GAS  stm32eforth.s 			page 88


       stm32eforth.s:1666   .text.reset_handler:00000000000008e0 _MODD
       stm32eforth.s:1668   .text.reset_handler:00000000000008e4 $t
       stm32eforth.s:1669   .text.reset_handler:00000000000008e4 MODD
       stm32eforth.s:1678   .text.reset_handler:00000000000008f4 $d
       stm32eforth.s:1679   .text.reset_handler:00000000000008f8 _SLASH
       stm32eforth.s:1681   .text.reset_handler:00000000000008fa $t
       stm32eforth.s:1682   .text.reset_handler:00000000000008fc SLASH
       stm32eforth.s:1692   .text.reset_handler:0000000000000910 $d
       stm32eforth.s:1693   .text.reset_handler:0000000000000914 _SSMOD
       stm32eforth.s:1695   .text.reset_handler:000000000000091a $t
       stm32eforth.s:1696   .text.reset_handler:000000000000091c SSMOD
       stm32eforth.s:1707   .text.reset_handler:0000000000000934 $d
       stm32eforth.s:1708   .text.reset_handler:0000000000000938 _STASL
       stm32eforth.s:1711   .text.reset_handler:000000000000093c STASL
       stm32eforth.s:1724   .text.reset_handler:0000000000000950 $d
       stm32eforth.s:1725   .text.reset_handler:0000000000000954 _ALGND
       stm32eforth.s:1727   .text.reset_handler:000000000000095c $t
       stm32eforth.s:1728   .text.reset_handler:000000000000095c ALGND
       stm32eforth.s:1737   .text.reset_handler:000000000000096a $d
       stm32eforth.s:1738   .text.reset_handler:000000000000096e _TCHAR
       stm32eforth.s:1740   .text.reset_handler:0000000000000974 $t
       stm32eforth.s:1741   .text.reset_handler:0000000000000974 TCHAR
       stm32eforth.s:1744   .text.reset_handler:000000000000097c $d
       stm32eforth.s:1745   .text.reset_handler:0000000000000980 $t
       stm32eforth.s:1749   .text.reset_handler:0000000000000990 $d
       stm32eforth.s:1750   .text.reset_handler:0000000000000994 $t
       stm32eforth.s:1753   .text.reset_handler:00000000000009a0 $d
       stm32eforth.s:1757   .text.reset_handler:00000000000009b0 TCHA1
       stm32eforth.s:1754   .text.reset_handler:00000000000009a4 $t
       stm32eforth.s:1756   .text.reset_handler:00000000000009ac $d
       stm32eforth.s:1758   .text.reset_handler:00000000000009b0 $t
       stm32eforth.s:1763   .text.reset_handler:00000000000009b4 $d
       stm32eforth.s:1764   .text.reset_handler:00000000000009b8 _DEPTH
       stm32eforth.s:1766   .text.reset_handler:00000000000009be $t
       stm32eforth.s:1767   .text.reset_handler:00000000000009c0 DEPTH
       stm32eforth.s:1779   .text.reset_handler:00000000000009da $d
       stm32eforth.s:1780   .text.reset_handler:00000000000009de _PICK
       stm32eforth.s:1783   .text.reset_handler:00000000000009e4 PICK
       stm32eforth.s:1798   .text.reset_handler:0000000000000a00 $d
       stm32eforth.s:1799   .text.reset_handler:0000000000000a04 _HERE
       stm32eforth.s:1802   .text.reset_handler:0000000000000a0c HERE
       stm32eforth.s:1811   .text.reset_handler:0000000000000a1c $d
       stm32eforth.s:1812   .text.reset_handler:0000000000000a20 _PAD
       stm32eforth.s:1814   .text.reset_handler:0000000000000a24 $t
       stm32eforth.s:1815   .text.reset_handler:0000000000000a24 PAD
       stm32eforth.s:1824   .text.reset_handler:0000000000000a34 $d
       stm32eforth.s:1825   .text.reset_handler:0000000000000a38 _TIB
       stm32eforth.s:1827   .text.reset_handler:0000000000000a3c $t
       stm32eforth.s:1828   .text.reset_handler:0000000000000a3c TIB
       stm32eforth.s:1836   .text.reset_handler:0000000000000a44 $d
       stm32eforth.s:1837   .text.reset_handler:0000000000000a48 _ATEXE
       stm32eforth.s:1840   .text.reset_handler:0000000000000a54 ATEXE
       stm32eforth.s:1852   .text.reset_handler:0000000000000a66 $d
       stm32eforth.s:1853   .text.reset_handler:0000000000000a6a _CMOVE
       stm32eforth.s:1855   .text.reset_handler:0000000000000a70 $t
       stm32eforth.s:1856   .text.reset_handler:0000000000000a70 CMOVE
       stm32eforth.s:1863   .text.reset_handler:0000000000000a82 CMOV1
ARM GAS  stm32eforth.s 			page 89


       stm32eforth.s:1860   .text.reset_handler:0000000000000a7a CMOV0
       stm32eforth.s:1868   .text.reset_handler:0000000000000a8c CMOV2
       stm32eforth.s:1875   .text.reset_handler:0000000000000a92 $d
       stm32eforth.s:1876   .text.reset_handler:0000000000000a96 _MOVE
       stm32eforth.s:1879   .text.reset_handler:0000000000000a9c MOVE
       stm32eforth.s:1887   .text.reset_handler:0000000000000ab2 MOVE1
       stm32eforth.s:1884   .text.reset_handler:0000000000000aaa MOVE0
       stm32eforth.s:1892   .text.reset_handler:0000000000000abc MOVE2
       stm32eforth.s:1899   .text.reset_handler:0000000000000ac2 $d
       stm32eforth.s:1900   .text.reset_handler:0000000000000ac6 _FILL
       stm32eforth.s:1903   .text.reset_handler:0000000000000acc FILL
       stm32eforth.s:1906   .text.reset_handler:0000000000000ad4 FILL0
       stm32eforth.s:1909   .text.reset_handler:0000000000000ad8 FILL1
       stm32eforth.s:1915   .text.reset_handler:0000000000000ae6 FILL2
       stm32eforth.s:1922   .text.reset_handler:0000000000000aec $d
       stm32eforth.s:1923   .text.reset_handler:0000000000000af0 _PACKS
       stm32eforth.s:1926   .text.reset_handler:0000000000000af8 PACKS
       stm32eforth.s:1935   .text.reset_handler:0000000000000b18 $d
       stm32eforth.s:1936   .text.reset_handler:0000000000000b1c $t
       stm32eforth.s:1938   .text.reset_handler:0000000000000b24 $d
       stm32eforth.s:1939   .text.reset_handler:0000000000000b28 $t
       stm32eforth.s:1956   .text.reset_handler:0000000000000b50 $d
       stm32eforth.s:1957   .text.reset_handler:0000000000000b54 _DIGIT
       stm32eforth.s:1959   .text.reset_handler:0000000000000b5a $t
       stm32eforth.s:1960   .text.reset_handler:0000000000000b5c DIGIT
       stm32eforth.s:1963   .text.reset_handler:0000000000000b64 $d
       stm32eforth.s:1964   .text.reset_handler:0000000000000b68 $t
       stm32eforth.s:1974   .text.reset_handler:0000000000000b80 $d
       stm32eforth.s:1975   .text.reset_handler:0000000000000b84 _EXTRC
       stm32eforth.s:1977   .text.reset_handler:0000000000000b8c $t
       stm32eforth.s:1978   .text.reset_handler:0000000000000b8c EXTRC
       stm32eforth.s:1981   .text.reset_handler:0000000000000b94 $d
       stm32eforth.s:1982   .text.reset_handler:0000000000000b98 $t
       stm32eforth.s:1991   .text.reset_handler:0000000000000bac $d
       stm32eforth.s:1992   .text.reset_handler:0000000000000bb0 _BDIGS
       stm32eforth.s:1995   .text.reset_handler:0000000000000bb4 BDIGS
       stm32eforth.s:2005   .text.reset_handler:0000000000000bc8 $d
       stm32eforth.s:2006   .text.reset_handler:0000000000000bcc _HOLD
       stm32eforth.s:2009   .text.reset_handler:0000000000000bd4 HOLD
       stm32eforth.s:2023   .text.reset_handler:0000000000000bf8 $d
       stm32eforth.s:2024   .text.reset_handler:0000000000000bfc _DIG
       stm32eforth.s:2026   .text.reset_handler:0000000000000bfe $t
       stm32eforth.s:2027   .text.reset_handler:0000000000000c00 DIG
       stm32eforth.s:2038   .text.reset_handler:0000000000000c18 $d
       stm32eforth.s:2039   .text.reset_handler:0000000000000c1c _DIGS
       stm32eforth.s:2042   .text.reset_handler:0000000000000c20 DIGS
       stm32eforth.s:2044   .text.reset_handler:0000000000000c24 DIGS1
       stm32eforth.s:2048   .text.reset_handler:0000000000000c30 $d
       stm32eforth.s:2050   .text.reset_handler:0000000000000c36 DIGS2
       stm32eforth.s:2049   .text.reset_handler:0000000000000c34 $t
       stm32eforth.s:2056   .text.reset_handler:0000000000000c3a $d
       stm32eforth.s:2057   .text.reset_handler:0000000000000c3e _SIGN
       stm32eforth.s:2060   .text.reset_handler:0000000000000c44 SIGN
       stm32eforth.s:2064   .text.reset_handler:0000000000000c50 $d
       stm32eforth.s:2068   .text.reset_handler:0000000000000c60 SIGN1
       stm32eforth.s:2065   .text.reset_handler:0000000000000c54 $t
       stm32eforth.s:2066   .text.reset_handler:0000000000000c58 $d
ARM GAS  stm32eforth.s 			page 90


       stm32eforth.s:2067   .text.reset_handler:0000000000000c5c $t
       stm32eforth.s:2074   .text.reset_handler:0000000000000c64 $d
       stm32eforth.s:2075   .text.reset_handler:0000000000000c68 _EDIGS
       stm32eforth.s:2078   .text.reset_handler:0000000000000c6c EDIGS
       stm32eforth.s:2095   .text.reset_handler:0000000000000c8c STRR
       stm32eforth.s:2110   .text.reset_handler:0000000000000cb4 $d
       stm32eforth.s:2111   .text.reset_handler:0000000000000cb8 _HEX
       stm32eforth.s:2113   .text.reset_handler:0000000000000cbc $t
       stm32eforth.s:2114   .text.reset_handler:0000000000000cbc HEX
       stm32eforth.s:2117   .text.reset_handler:0000000000000cc4 $d
       stm32eforth.s:2118   .text.reset_handler:0000000000000cc8 $t
       stm32eforth.s:2125   .text.reset_handler:0000000000000cd4 $d
       stm32eforth.s:2126   .text.reset_handler:0000000000000cd8 _DECIM
       stm32eforth.s:2128   .text.reset_handler:0000000000000ce0 $t
       stm32eforth.s:2129   .text.reset_handler:0000000000000ce0 DECIM
       stm32eforth.s:2132   .text.reset_handler:0000000000000ce8 $d
       stm32eforth.s:2133   .text.reset_handler:0000000000000cec $t
       stm32eforth.s:2143   .text.reset_handler:0000000000000cf8 $d
       stm32eforth.s:2144   .text.reset_handler:0000000000000cfc _DIGTQ
       stm32eforth.s:2147   .text.reset_handler:0000000000000d04 DIGTQ
       stm32eforth.s:2151   .text.reset_handler:0000000000000d10 $d
       stm32eforth.s:2152   .text.reset_handler:0000000000000d14 $t
       stm32eforth.s:2154   .text.reset_handler:0000000000000d1c $d
       stm32eforth.s:2155   .text.reset_handler:0000000000000d20 $t
       stm32eforth.s:2158   .text.reset_handler:0000000000000d2c $d
       stm32eforth.s:2167   .text.reset_handler:0000000000000d50 DGTQ1
       stm32eforth.s:2159   .text.reset_handler:0000000000000d30 $t
       stm32eforth.s:2160   .text.reset_handler:0000000000000d34 $d
       stm32eforth.s:2161   .text.reset_handler:0000000000000d38 $t
       stm32eforth.s:2164   .text.reset_handler:0000000000000d44 $d
       stm32eforth.s:2165   .text.reset_handler:0000000000000d48 $t
       stm32eforth.s:2176   .text.reset_handler:0000000000000d60 $d
       stm32eforth.s:2177   .text.reset_handler:0000000000000d64 _NUMBQ
       stm32eforth.s:2179   .text.reset_handler:0000000000000d6c $t
       stm32eforth.s:2180   .text.reset_handler:0000000000000d6c NUMBQ
       stm32eforth.s:2186   .text.reset_handler:0000000000000d80 $d
       stm32eforth.s:2187   .text.reset_handler:0000000000000d84 $t
       stm32eforth.s:2192   .text.reset_handler:0000000000000d98 $d
       stm32eforth.s:2193   .text.reset_handler:0000000000000d9c $t
       stm32eforth.s:2195   .text.reset_handler:0000000000000da4 $d
       stm32eforth.s:2201   .text.reset_handler:0000000000000dbc NUMQ1
       stm32eforth.s:2196   .text.reset_handler:0000000000000da8 $t
       stm32eforth.s:2205   .text.reset_handler:0000000000000dc8 $d
       stm32eforth.s:2206   .text.reset_handler:0000000000000dcc $t
       stm32eforth.s:2216   .text.reset_handler:0000000000000df4 $d
       stm32eforth.s:2255   .text.reset_handler:0000000000000e80 NUMQ6
       stm32eforth.s:2217   .text.reset_handler:0000000000000df8 $t
       stm32eforth.s:2219   .text.reset_handler:0000000000000e00 NUMQ2
       stm32eforth.s:2227   .text.reset_handler:0000000000000e1c $d
       stm32eforth.s:2246   .text.reset_handler:0000000000000e64 NUMQ4
       stm32eforth.s:2228   .text.reset_handler:0000000000000e20 $t
       stm32eforth.s:2236   .text.reset_handler:0000000000000e40 $d
       stm32eforth.s:2237   .text.reset_handler:0000000000000e44 $t
       stm32eforth.s:2241   .text.reset_handler:0000000000000e54 $d
       stm32eforth.s:2243   .text.reset_handler:0000000000000e5c NUMQ3
       stm32eforth.s:2242   .text.reset_handler:0000000000000e58 $t
       stm32eforth.s:2253   .text.reset_handler:0000000000000e7c NUMQ5
ARM GAS  stm32eforth.s 			page 91


       stm32eforth.s:2252   .text.reset_handler:0000000000000e78 $d
       stm32eforth.s:2254   .text.reset_handler:0000000000000e7c $t
       stm32eforth.s:2269   .text.reset_handler:0000000000000e98 $d
       stm32eforth.s:2270   .text.reset_handler:0000000000000e9c _KEY
       stm32eforth.s:2272   .text.reset_handler:0000000000000ea0 $t
       stm32eforth.s:2273   .text.reset_handler:0000000000000ea0 KEY
       stm32eforth.s:2275   .text.reset_handler:0000000000000ea4 KEY1
       stm32eforth.s:2278   .text.reset_handler:0000000000000eac $d
       stm32eforth.s:2280   .text.reset_handler:0000000000000eb0 $t
       stm32eforth.s:2282   .text.reset_handler:0000000000000eb8 $d
       stm32eforth.s:2283   .text.reset_handler:0000000000000ebc $t
       stm32eforth.s:2286   .text.reset_handler:0000000000000ec8 $d
       stm32eforth.s:2287   .text.reset_handler:0000000000000ecc $t
       stm32eforth.s:2292   .text.reset_handler:0000000000000ed0 $d
       stm32eforth.s:2293   .text.reset_handler:0000000000000ed4 _SPACE
       stm32eforth.s:2295   .text.reset_handler:0000000000000eda $t
       stm32eforth.s:2296   .text.reset_handler:0000000000000edc SPACE
       stm32eforth.s:2305   .text.reset_handler:0000000000000eec $d
       stm32eforth.s:2306   .text.reset_handler:0000000000000ef0 _SPACS
       stm32eforth.s:2309   .text.reset_handler:0000000000000ef8 SPACS
       stm32eforth.s:2312   .text.reset_handler:0000000000000f00 $d
       stm32eforth.s:2313   .text.reset_handler:0000000000000f04 $t
       stm32eforth.s:2318   .text.reset_handler:0000000000000f14 CHAR2
       stm32eforth.s:2316   .text.reset_handler:0000000000000f10 CHAR1
       stm32eforth.s:2320   .text.reset_handler:0000000000000f18 $d
       stm32eforth.s:2321   .text.reset_handler:0000000000000f1c $t
       stm32eforth.s:2326   .text.reset_handler:0000000000000f20 $d
       stm32eforth.s:2327   .text.reset_handler:0000000000000f24 _TYPEE
       stm32eforth.s:2330   .text.reset_handler:0000000000000f2c TYPEE
       stm32eforth.s:2338   .text.reset_handler:0000000000000f42 TYPE2
       stm32eforth.s:2334   .text.reset_handler:0000000000000f36 TYPE1
       stm32eforth.s:2340   .text.reset_handler:0000000000000f46 $d
       stm32eforth.s:2341   .text.reset_handler:0000000000000f4a $t
       stm32eforth.s:2347   .text.reset_handler:0000000000000f52 $d
       stm32eforth.s:2348   .text.reset_handler:0000000000000f56 _CR
       stm32eforth.s:2354   .text.reset_handler:0000000000000f64 $d
       stm32eforth.s:2355   .text.reset_handler:0000000000000f68 $t
       stm32eforth.s:2357   .text.reset_handler:0000000000000f70 $d
       stm32eforth.s:2358   .text.reset_handler:0000000000000f74 $t
       stm32eforth.s:2369   .text.reset_handler:0000000000000f7c DOSTR
       stm32eforth.s:2392   .text.reset_handler:0000000000000fb0 STRQP
       stm32eforth.s:2404   .text.reset_handler:0000000000000fbc DOTST
       stm32eforth.s:2426   .text.reset_handler:0000000000000fdc $d
       stm32eforth.s:2427   .text.reset_handler:0000000000000fe0 _DOTR
       stm32eforth.s:2430   .text.reset_handler:0000000000000fe4 DOTR
       stm32eforth.s:2444   .text.reset_handler:0000000000001008 $d
       stm32eforth.s:2445   .text.reset_handler:000000000000100c _UDOTR
       stm32eforth.s:2447   .text.reset_handler:0000000000001010 $t
       stm32eforth.s:2448   .text.reset_handler:0000000000001010 UDOTR
       stm32eforth.s:2464   .text.reset_handler:000000000000103c $d
       stm32eforth.s:2465   .text.reset_handler:0000000000001040 _UDOT
       stm32eforth.s:2468   .text.reset_handler:0000000000001044 UDOT
       stm32eforth.s:2480   .text.reset_handler:0000000000001060 $d
       stm32eforth.s:2481   .text.reset_handler:0000000000001064 _DOT
       stm32eforth.s:2483   .text.reset_handler:0000000000001066 $t
       stm32eforth.s:2484   .text.reset_handler:0000000000001068 DOT
       stm32eforth.s:2489   .text.reset_handler:0000000000001078 $d
ARM GAS  stm32eforth.s 			page 92


       stm32eforth.s:2490   .text.reset_handler:000000000000107c $t
       stm32eforth.s:2492   .text.reset_handler:0000000000001084 $d
       stm32eforth.s:2495   .text.reset_handler:0000000000001090 DOT1
       stm32eforth.s:2493   .text.reset_handler:0000000000001088 $t
       stm32eforth.s:2504   .text.reset_handler:00000000000010a0 $d
       stm32eforth.s:2505   .text.reset_handler:00000000000010a4 _QUEST
       stm32eforth.s:2507   .text.reset_handler:00000000000010a6 $t
       stm32eforth.s:2508   .text.reset_handler:00000000000010a8 QUEST
       stm32eforth.s:2524   .text.reset_handler:00000000000010b8 PARS
       stm32eforth.s:2532   .text.reset_handler:00000000000010d4 $d
       stm32eforth.s:2600   .text.reset_handler:00000000000011c6 PARS8
       stm32eforth.s:2533   .text.reset_handler:00000000000010d8 $t
       stm32eforth.s:2539   .text.reset_handler:00000000000010f0 $d
       stm32eforth.s:2561   .text.reset_handler:0000000000001140 PARS3
       stm32eforth.s:2540   .text.reset_handler:00000000000010f4 $t
       stm32eforth.s:2541   .text.reset_handler:00000000000010f8 PARS1
       stm32eforth.s:2549   .text.reset_handler:0000000000001114 $d
       stm32eforth.s:2559   .text.reset_handler:000000000000113c PARS2
       stm32eforth.s:2550   .text.reset_handler:0000000000001118 $t
       stm32eforth.s:2552   .text.reset_handler:0000000000001120 $d
       stm32eforth.s:2553   .text.reset_handler:0000000000001124 $t
       stm32eforth.s:2556   .text.reset_handler:0000000000001130 $d
       stm32eforth.s:2557   .text.reset_handler:0000000000001134 $t
       stm32eforth.s:2565   .text.reset_handler:000000000000114c PARS4
       stm32eforth.s:2576   .text.reset_handler:0000000000001174 $d
       stm32eforth.s:2578   .text.reset_handler:000000000000117c PARS5
       stm32eforth.s:2577   .text.reset_handler:0000000000001178 $t
       stm32eforth.s:2580   .text.reset_handler:0000000000001180 $d
       stm32eforth.s:2587   .text.reset_handler:000000000000119a PARS6
       stm32eforth.s:2581   .text.reset_handler:0000000000001184 $t
       stm32eforth.s:2583   .text.reset_handler:000000000000118c $d
       stm32eforth.s:2584   .text.reset_handler:0000000000001190 $t
       stm32eforth.s:2593   .text.reset_handler:00000000000011ae PARS7
       stm32eforth.s:2609   .text.reset_handler:00000000000011d6 $d
       stm32eforth.s:2610   .text.reset_handler:00000000000011da _PARSE
       stm32eforth.s:2612   .text.reset_handler:00000000000011e0 $t
       stm32eforth.s:2613   .text.reset_handler:00000000000011e0 PARSE
       stm32eforth.s:2634   .text.reset_handler:0000000000001220 $d
       stm32eforth.s:2635   .text.reset_handler:0000000000001224 _DOTPR
       stm32eforth.s:2638   .text.reset_handler:0000000000001228 DOTPR
       stm32eforth.s:2641   .text.reset_handler:0000000000001230 $d
       stm32eforth.s:2642   .text.reset_handler:0000000000001234 $t
       stm32eforth.s:2649   .text.reset_handler:0000000000001240 $d
       stm32eforth.s:2650   .text.reset_handler:0000000000001244 _PAREN
       stm32eforth.s:2652   .text.reset_handler:0000000000001246 $t
       stm32eforth.s:2653   .text.reset_handler:0000000000001248 PAREN
       stm32eforth.s:2656   .text.reset_handler:0000000000001250 $d
       stm32eforth.s:2657   .text.reset_handler:0000000000001254 $t
       stm32eforth.s:2664   .text.reset_handler:0000000000001260 $d
       stm32eforth.s:2665   .text.reset_handler:0000000000001264 _BKSLA
       stm32eforth.s:2667   .text.reset_handler:0000000000001266 $t
       stm32eforth.s:2668   .text.reset_handler:0000000000001268 BKSLA
       stm32eforth.s:2679   .text.reset_handler:0000000000001280 $d
       stm32eforth.s:2680   .text.reset_handler:0000000000001284 _CHAR
       stm32eforth.s:2683   .text.reset_handler:000000000000128c CHAR
       stm32eforth.s:2694   .text.reset_handler:00000000000012a4 $d
       stm32eforth.s:2695   .text.reset_handler:00000000000012a8 _WORDD
ARM GAS  stm32eforth.s 			page 93


       stm32eforth.s:2698   .text.reset_handler:00000000000012b0 WORDD
       stm32eforth.s:2709   .text.reset_handler:00000000000012c8 $d
       stm32eforth.s:2710   .text.reset_handler:00000000000012cc _TOKEN
       stm32eforth.s:2712   .text.reset_handler:00000000000012d2 $t
       stm32eforth.s:2713   .text.reset_handler:00000000000012d4 TOKEN
       stm32eforth.s:2725   .text.reset_handler:00000000000012e4 $d
       stm32eforth.s:2726   .text.reset_handler:00000000000012e8 _NAMET
       stm32eforth.s:2728   .text.reset_handler:00000000000012ee $t
       stm32eforth.s:2729   .text.reset_handler:00000000000012f0 NAMET
       stm32eforth.s:2733   .text.reset_handler:00000000000012fc $d
       stm32eforth.s:2734   .text.reset_handler:0000000000001300 $t
       stm32eforth.s:2747   .text.reset_handler:0000000000001310 $d
       stm32eforth.s:2748   .text.reset_handler:0000000000001314 _SAMEQ
       stm32eforth.s:2750   .text.reset_handler:000000000000131a $t
       stm32eforth.s:2751   .text.reset_handler:000000000000131c SAMEQ
       stm32eforth.s:2771   .text.reset_handler:0000000000001364 SAME2
       stm32eforth.s:2755   .text.reset_handler:0000000000001328 SAME1
       stm32eforth.s:2767   .text.reset_handler:0000000000001354 $d
       stm32eforth.s:2768   .text.reset_handler:0000000000001358 $t
       stm32eforth.s:2773   .text.reset_handler:0000000000001368 $d
       stm32eforth.s:2774   .text.reset_handler:000000000000136c $t
       stm32eforth.s:2775   .text.reset_handler:0000000000001370 $d
       stm32eforth.s:2776   .text.reset_handler:0000000000001374 $t
       stm32eforth.s:2788   .text.reset_handler:0000000000001378 FIND
       stm32eforth.s:2797   .text.reset_handler:0000000000001398 FIND1
       stm32eforth.s:2800   .text.reset_handler:00000000000013a0 $d
       stm32eforth.s:2820   .text.reset_handler:00000000000013e8 FIND6
       stm32eforth.s:2801   .text.reset_handler:00000000000013a4 $t
       stm32eforth.s:2804   .text.reset_handler:00000000000013b0 $d
       stm32eforth.s:2805   .text.reset_handler:00000000000013b4 $t
       stm32eforth.s:2809   .text.reset_handler:00000000000013c4 $d
       stm32eforth.s:2813   .text.reset_handler:00000000000013d4 FIND2
       stm32eforth.s:2810   .text.reset_handler:00000000000013c8 $t
       stm32eforth.s:2818   .text.reset_handler:00000000000013e4 FIND3
       stm32eforth.s:2827   .text.reset_handler:0000000000001400 FIND4
       stm32eforth.s:2829   .text.reset_handler:0000000000001404 $d
       stm32eforth.s:2834   .text.reset_handler:0000000000001418 FIND5
       stm32eforth.s:2830   .text.reset_handler:0000000000001408 $t
       stm32eforth.s:2848   .text.reset_handler:000000000000143c $d
       stm32eforth.s:2849   .text.reset_handler:0000000000001440 _NAMEQ
       stm32eforth.s:2851   .text.reset_handler:0000000000001446 $t
       stm32eforth.s:2852   .text.reset_handler:0000000000001448 NAMEQ
       stm32eforth.s:2869   .text.reset_handler:000000000000145c BKSP
       stm32eforth.s:2878   .text.reset_handler:000000000000147c $d
       stm32eforth.s:2891   .text.reset_handler:00000000000014a4 BACK1
       stm32eforth.s:2879   .text.reset_handler:0000000000001480 $t
       stm32eforth.s:2880   .text.reset_handler:0000000000001484 $d
       stm32eforth.s:2881   .text.reset_handler:0000000000001488 $t
       stm32eforth.s:2888   .text.reset_handler:000000000000149c $d
       stm32eforth.s:2889   .text.reset_handler:00000000000014a0 $t
       stm32eforth.s:2901   .text.reset_handler:00000000000014a8 TAP
       stm32eforth.s:2918   .text.reset_handler:00000000000014c4 KTAP
       stm32eforth.s:2919   .text.reset_handler:00000000000014c4 TTAP
       stm32eforth.s:2923   .text.reset_handler:00000000000014d0 $d
       stm32eforth.s:2924   .text.reset_handler:00000000000014d4 $t
       stm32eforth.s:2926   .text.reset_handler:00000000000014dc $d
       stm32eforth.s:2939   .text.reset_handler:000000000000150c KTAP2
ARM GAS  stm32eforth.s 			page 94


       stm32eforth.s:2927   .text.reset_handler:00000000000014e0 $t
       stm32eforth.s:2928   .text.reset_handler:00000000000014e4 $d
       stm32eforth.s:2929   .text.reset_handler:00000000000014e8 $t
       stm32eforth.s:2931   .text.reset_handler:00000000000014f0 $d
       stm32eforth.s:2936   .text.reset_handler:0000000000001504 KTAP1
       stm32eforth.s:2932   .text.reset_handler:00000000000014f4 $t
       stm32eforth.s:2935   .text.reset_handler:0000000000001500 $d
       stm32eforth.s:2937   .text.reset_handler:0000000000001504 $t
       stm32eforth.s:2949   .text.reset_handler:0000000000001520 $d
       stm32eforth.s:2950   .text.reset_handler:0000000000001524 _ACCEP
       stm32eforth.s:2953   .text.reset_handler:000000000000152c ACCEP
       stm32eforth.s:2958   .text.reset_handler:000000000000153c ACCP1
       stm32eforth.s:2962   .text.reset_handler:0000000000001548 $d
       stm32eforth.s:2978   .text.reset_handler:0000000000001578 ACCP4
       stm32eforth.s:2963   .text.reset_handler:000000000000154c $t
       stm32eforth.s:2967   .text.reset_handler:000000000000155c $d
       stm32eforth.s:2968   .text.reset_handler:0000000000001560 $t
       stm32eforth.s:2970   .text.reset_handler:0000000000001568 $d
       stm32eforth.s:2973   .text.reset_handler:0000000000001572 ACCP2
       stm32eforth.s:2971   .text.reset_handler:000000000000156c $t
       stm32eforth.s:2976   .text.reset_handler:0000000000001576 ACCP3
       stm32eforth.s:2987   .text.reset_handler:0000000000001588 $d
       stm32eforth.s:2988   .text.reset_handler:000000000000158c _QUERY
       stm32eforth.s:2990   .text.reset_handler:0000000000001592 $t
       stm32eforth.s:2991   .text.reset_handler:0000000000001594 QUERY
       stm32eforth.s:2995   .text.reset_handler:00000000000015a0 $d
       stm32eforth.s:2996   .text.reset_handler:00000000000015a4 $t
       stm32eforth.s:3001   .text.reset_handler:00000000000015b8 $d
       stm32eforth.s:3002   .text.reset_handler:00000000000015bc $t
       stm32eforth.s:3012   .text.reset_handler:00000000000015c8 $d
       stm32eforth.s:3013   .text.reset_handler:00000000000015cc _ABORT
       stm32eforth.s:3015   .text.reset_handler:00000000000015d2 $t
       stm32eforth.s:3016   .text.reset_handler:00000000000015d4 ABORT
       stm32eforth.s:3022   .text.reset_handler:00000000000015e8 $d
       stm32eforth.s:3023   .text.reset_handler:00000000000015ec $t
       stm32eforth.s:3169   .text.reset_handler:000000000000175c PRESE
       stm32eforth.s:3184   .text.reset_handler:0000000000001774 QUIT
       stm32eforth.s:3035   .text.reset_handler:00000000000015fc ABORQ
       stm32eforth.s:3038   .text.reset_handler:0000000000001604 $d
       stm32eforth.s:3044   .text.reset_handler:000000000000161c ABOR1
       stm32eforth.s:3039   .text.reset_handler:0000000000001608 $t
       stm32eforth.s:3055   .text.reset_handler:0000000000001628 $d
       stm32eforth.s:3056   .text.reset_handler:000000000000162c _INTER
       stm32eforth.s:3058   .text.reset_handler:0000000000001638 $t
       stm32eforth.s:3064   .text.reset_handler:0000000000001648 $d
       stm32eforth.s:3075   .text.reset_handler:0000000000001678 INTE1
       stm32eforth.s:3065   .text.reset_handler:000000000000164c $t
       stm32eforth.s:3067   .text.reset_handler:0000000000001654 $d
       stm32eforth.s:3068   .text.reset_handler:0000000000001658 $t
       stm32eforth.s:3070   .text.reset_handler:0000000000001660 $d
       stm32eforth.s:3072   .text.reset_handler:000000000000166e $t
       stm32eforth.s:3078   .text.reset_handler:0000000000001680 $d
       stm32eforth.s:3080   .text.reset_handler:0000000000001688 INTE2
       stm32eforth.s:3079   .text.reset_handler:0000000000001684 $t
       stm32eforth.s:3086   .text.reset_handler:000000000000168c $d
       stm32eforth.s:3087   .text.reset_handler:0000000000001690 _LBRAC
       stm32eforth.s:3089   .text.reset_handler:0000000000001692 $t
ARM GAS  stm32eforth.s 			page 95


       stm32eforth.s:3090   .text.reset_handler:0000000000001694 LBRAC
       stm32eforth.s:3093   .text.reset_handler:000000000000169c $d
       stm32eforth.s:3094   .text.reset_handler:00000000000016a0 $t
       stm32eforth.s:3101   .text.reset_handler:00000000000016ac $d
       stm32eforth.s:3102   .text.reset_handler:00000000000016b0 _DOTOK
       stm32eforth.s:3104   .text.reset_handler:00000000000016b4 $t
       stm32eforth.s:3105   .text.reset_handler:00000000000016b4 DOTOK
       stm32eforth.s:3108   .text.reset_handler:00000000000016bc $d
       stm32eforth.s:3109   .text.reset_handler:00000000000016c0 $t
       stm32eforth.s:3113   .text.reset_handler:00000000000016d0 $d
       stm32eforth.s:3117   .text.reset_handler:00000000000016dc DOTO1
       stm32eforth.s:3114   .text.reset_handler:00000000000016d4 $t
       stm32eforth.s:3115   .text.reset_handler:00000000000016d8 $d
       stm32eforth.s:3118   .text.reset_handler:00000000000016dc $t
       stm32eforth.s:3124   .text.reset_handler:00000000000016e4 $d
       stm32eforth.s:3125   .text.reset_handler:00000000000016e8 _QSTAC
       stm32eforth.s:3128   .text.reset_handler:00000000000016f0 QSTAC
       stm32eforth.s:3133   .text.reset_handler:0000000000001700 $d
       stm32eforth.s:3141   .text.reset_handler:0000000000001710 $d
       stm32eforth.s:3142   .text.reset_handler:0000000000001714 _EVAL
       stm32eforth.s:3145   .text.reset_handler:000000000000171c EVAL
       stm32eforth.s:3147   .text.reset_handler:0000000000001720 EVAL1
       stm32eforth.s:3152   .text.reset_handler:0000000000001730 $d
       stm32eforth.s:3157   .text.reset_handler:0000000000001744 EVAL2
       stm32eforth.s:3153   .text.reset_handler:0000000000001734 $t
       stm32eforth.s:3165   .text.reset_handler:0000000000001750 $d
       stm32eforth.s:3166   .text.reset_handler:0000000000001754 _PRESE
       stm32eforth.s:3180   .text.reset_handler:000000000000176a $d
       stm32eforth.s:3181   .text.reset_handler:000000000000176e _QUIT
       stm32eforth.s:3188   .text.reset_handler:0000000000001780 QUIT1
       stm32eforth.s:3190   .text.reset_handler:0000000000001784 QUIT2
       stm32eforth.s:3194   .text.reset_handler:0000000000001790 $d
       stm32eforth.s:3200   .text.reset_handler:0000000000001794 $t
       stm32eforth.s:3211   .text.reset_handler:00000000000017b2 WAIT_BSY
       stm32eforth.s:3213   .text.reset_handler:00000000000017b6 WAIT1
       stm32eforth.s:3219   .text.reset_handler:00000000000017c0 LOCK
       stm32eforth.s:3230   .text.reset_handler:00000000000017ce $d
       stm32eforth.s:3231   .text.reset_handler:00000000000017d2 _ESECT
       stm32eforth.s:3235   .text.reset_handler:00000000000017e0 ESECT
       stm32eforth.s:3253   .text.reset_handler:000000000000180c $d
       stm32eforth.s:3254   .text.reset_handler:0000000000001810 _ISTOR
       stm32eforth.s:3258   .text.reset_handler:0000000000001814 ISTOR
       stm32eforth.s:3274   .text.reset_handler:0000000000001838 $d
       stm32eforth.s:3275   .text.reset_handler:000000000000183c _TURN
       stm32eforth.s:3277   .text.reset_handler:0000000000001844 $t
       stm32eforth.s:3278   .text.reset_handler:0000000000001844 TURN
       stm32eforth.s:3280   .text.reset_handler:000000000000184c $d
       stm32eforth.s:3281   .text.reset_handler:0000000000001850 $t
       stm32eforth.s:3282   .text.reset_handler:0000000000001854 $d
       stm32eforth.s:3283   .text.reset_handler:0000000000001858 $t
       stm32eforth.s:3284   .text.reset_handler:000000000000185c $d
       stm32eforth.s:3285   .text.reset_handler:0000000000001860 $t
       stm32eforth.s:3287   .text.reset_handler:0000000000001868 $d
       stm32eforth.s:3288   .text.reset_handler:000000000000186c $t
       stm32eforth.s:3289   .text.reset_handler:0000000000001870 $d
       stm32eforth.s:3290   .text.reset_handler:0000000000001874 $t
       stm32eforth.s:3294   .text.reset_handler:0000000000001884 TURN1
ARM GAS  stm32eforth.s 			page 96


       stm32eforth.s:3304   .text.reset_handler:00000000000018a8 $d
       stm32eforth.s:3305   .text.reset_handler:00000000000018ac $t
       stm32eforth.s:3314   .text.reset_handler:00000000000018b4 $d
       stm32eforth.s:3315   .text.reset_handler:00000000000018b8 _TICK
       stm32eforth.s:3317   .text.reset_handler:00000000000018ba $t
       stm32eforth.s:3318   .text.reset_handler:00000000000018bc TICK
       stm32eforth.s:3323   .text.reset_handler:00000000000018cc $d
       stm32eforth.s:3325   .text.reset_handler:00000000000018d4 TICK1
       stm32eforth.s:3324   .text.reset_handler:00000000000018d0 $t
       stm32eforth.s:3330   .text.reset_handler:00000000000018d8 $d
       stm32eforth.s:3331   .text.reset_handler:00000000000018dc _ALLOT
       stm32eforth.s:3333   .text.reset_handler:00000000000018e2 $t
       stm32eforth.s:3334   .text.reset_handler:00000000000018e4 ALLOT
       stm32eforth.s:3343   .text.reset_handler:00000000000018f4 $d
       stm32eforth.s:3344   .text.reset_handler:00000000000018f8 _COMMA
       stm32eforth.s:3345   .text.reset_handler:00000000000018fa $t
       stm32eforth.s:3346   .text.reset_handler:00000000000018fc COMMA
       stm32eforth.s:3359   .text.reset_handler:000000000000191c $d
       stm32eforth.s:3360   .text.reset_handler:0000000000001920 _BCOMP
       stm32eforth.s:3362   .text.reset_handler:000000000000192a $t
       stm32eforth.s:3363   .text.reset_handler:000000000000192c BCOMP
       stm32eforth.s:3372   .text.reset_handler:000000000000193c $d
       stm32eforth.s:3373   .text.reset_handler:0000000000001940 _COMPI
       stm32eforth.s:3375   .text.reset_handler:0000000000001948 $t
       stm32eforth.s:3376   .text.reset_handler:0000000000001948 COMPI
       stm32eforth.s:3791   .text.reset_handler:0000000000001d14 CALLC
       stm32eforth.s:3391   .text.reset_handler:0000000000001970 $d
       stm32eforth.s:3392   .text.reset_handler:0000000000001974 _LITER
       stm32eforth.s:3394   .text.reset_handler:000000000000197c $t
       stm32eforth.s:3395   .text.reset_handler:000000000000197c LITER
       stm32eforth.s:3398   .text.reset_handler:0000000000001984 $d
       stm32eforth.s:3399   .text.reset_handler:0000000000001988 $t
       stm32eforth.s:3409   .text.reset_handler:0000000000001990 STRCQ
       stm32eforth.s:3412   .text.reset_handler:0000000000001998 $d
       stm32eforth.s:3413   .text.reset_handler:000000000000199c $t
       stm32eforth.s:3416   .text.reset_handler:00000000000019a8 $d
       stm32eforth.s:3417   .text.reset_handler:00000000000019ac $t
       stm32eforth.s:3431   .text.reset_handler:00000000000019c8 $d
       stm32eforth.s:3432   .text.reset_handler:00000000000019cc _FOR
       stm32eforth.s:3434   .text.reset_handler:00000000000019d0 $t
       stm32eforth.s:3435   .text.reset_handler:00000000000019d0 FOR
       stm32eforth.s:3438   .text.reset_handler:00000000000019d8 $d
       stm32eforth.s:3439   .text.reset_handler:00000000000019dc $t
       stm32eforth.s:3445   .text.reset_handler:00000000000019e4 $d
       stm32eforth.s:3446   .text.reset_handler:00000000000019e8 _BEGIN
       stm32eforth.s:3448   .text.reset_handler:00000000000019ee $t
       stm32eforth.s:3449   .text.reset_handler:00000000000019f0 BEGIN
       stm32eforth.s:3457   .text.reset_handler:00000000000019fc $d
       stm32eforth.s:3458   .text.reset_handler:0000000000001a00 _NEXT
       stm32eforth.s:3461   .text.reset_handler:0000000000001a08 NEXT
       stm32eforth.s:3464   .text.reset_handler:0000000000001a10 $d
       stm32eforth.s:3465   .text.reset_handler:0000000000001a14 $t
       stm32eforth.s:3471   .text.reset_handler:0000000000001a1c $d
       stm32eforth.s:3472   .text.reset_handler:0000000000001a20 _UNTIL
       stm32eforth.s:3474   .text.reset_handler:0000000000001a26 $t
       stm32eforth.s:3475   .text.reset_handler:0000000000001a28 UNTIL
       stm32eforth.s:3478   .text.reset_handler:0000000000001a30 $d
ARM GAS  stm32eforth.s 			page 97


       stm32eforth.s:3479   .text.reset_handler:0000000000001a34 $t
       stm32eforth.s:3485   .text.reset_handler:0000000000001a3c $d
       stm32eforth.s:3486   .text.reset_handler:0000000000001a40 _AGAIN
       stm32eforth.s:3488   .text.reset_handler:0000000000001a46 $t
       stm32eforth.s:3489   .text.reset_handler:0000000000001a48 AGAIN
       stm32eforth.s:3492   .text.reset_handler:0000000000001a50 $d
       stm32eforth.s:3493   .text.reset_handler:0000000000001a54 $t
       stm32eforth.s:3499   .text.reset_handler:0000000000001a5c $d
       stm32eforth.s:3500   .text.reset_handler:0000000000001a60 _IFF
       stm32eforth.s:3503   .text.reset_handler:0000000000001a64 IFF
       stm32eforth.s:3506   .text.reset_handler:0000000000001a6c $d
       stm32eforth.s:3507   .text.reset_handler:0000000000001a70 $t
       stm32eforth.s:3509   .text.reset_handler:0000000000001a78 $d
       stm32eforth.s:3510   .text.reset_handler:0000000000001a7c $t
       stm32eforth.s:3517   .text.reset_handler:0000000000001a88 $d
       stm32eforth.s:3518   .text.reset_handler:0000000000001a8c _AHEAD
       stm32eforth.s:3520   .text.reset_handler:0000000000001a92 $t
       stm32eforth.s:3521   .text.reset_handler:0000000000001a94 AHEAD
       stm32eforth.s:3524   .text.reset_handler:0000000000001a9c $d
       stm32eforth.s:3525   .text.reset_handler:0000000000001aa0 $t
       stm32eforth.s:3527   .text.reset_handler:0000000000001aa8 $d
       stm32eforth.s:3528   .text.reset_handler:0000000000001aac $t
       stm32eforth.s:3535   .text.reset_handler:0000000000001ab8 $d
       stm32eforth.s:3536   .text.reset_handler:0000000000001abc _REPEA
       stm32eforth.s:3539   .text.reset_handler:0000000000001ac4 REPEA
       stm32eforth.s:3550   .text.reset_handler:0000000000001adc $d
       stm32eforth.s:3551   .text.reset_handler:0000000000001ae0 _THENN
       stm32eforth.s:3554   .text.reset_handler:0000000000001ae8 THENN
       stm32eforth.s:3564   .text.reset_handler:0000000000001afc $d
       stm32eforth.s:3565   .text.reset_handler:0000000000001b00 _AFT
       stm32eforth.s:3567   .text.reset_handler:0000000000001b04 $t
       stm32eforth.s:3568   .text.reset_handler:0000000000001b04 AFT
       stm32eforth.s:3579   .text.reset_handler:0000000000001b1c $d
       stm32eforth.s:3580   .text.reset_handler:0000000000001b20 _ELSEE
       stm32eforth.s:3583   .text.reset_handler:0000000000001b28 ELSEE
       stm32eforth.s:3593   .text.reset_handler:0000000000001b3c $d
       stm32eforth.s:3594   .text.reset_handler:0000000000001b40 _WHILE
       stm32eforth.s:3596   .text.reset_handler:0000000000001b46 $t
       stm32eforth.s:3597   .text.reset_handler:0000000000001b48 WHILE
       stm32eforth.s:3606   .text.reset_handler:0000000000001b58 $d
       stm32eforth.s:3607   .text.reset_handler:0000000000001b5c _ABRTQ
       stm32eforth.s:3610   .text.reset_handler:0000000000001b64 ABRTQ
       stm32eforth.s:3613   .text.reset_handler:0000000000001b6c $d
       stm32eforth.s:3614   .text.reset_handler:0000000000001b70 $t
       stm32eforth.s:3620   .text.reset_handler:0000000000001b78 $d
       stm32eforth.s:3621   .text.reset_handler:0000000000001b7c _STRQ
       stm32eforth.s:3624   .text.reset_handler:0000000000001b80 STRQ
       stm32eforth.s:3627   .text.reset_handler:0000000000001b88 $d
       stm32eforth.s:3628   .text.reset_handler:0000000000001b8c $t
       stm32eforth.s:3634   .text.reset_handler:0000000000001b94 $d
       stm32eforth.s:3635   .text.reset_handler:0000000000001b98 _DOTQ
       stm32eforth.s:3638   .text.reset_handler:0000000000001b9c DOTQ
       stm32eforth.s:3641   .text.reset_handler:0000000000001ba4 $d
       stm32eforth.s:3642   .text.reset_handler:0000000000001ba8 $t
       stm32eforth.s:3651   .text.reset_handler:0000000000001bb0 $d
       stm32eforth.s:3652   .text.reset_handler:0000000000001bb4 _UNIQU
       stm32eforth.s:3654   .text.reset_handler:0000000000001bbc $t
ARM GAS  stm32eforth.s 			page 98


       stm32eforth.s:3655   .text.reset_handler:0000000000001bbc UNIQU
       stm32eforth.s:3660   .text.reset_handler:0000000000001bcc $d
       stm32eforth.s:3668   .text.reset_handler:0000000000001be8 UNIQ1
       stm32eforth.s:3661   .text.reset_handler:0000000000001bd0 $t
       stm32eforth.s:3662   .text.reset_handler:0000000000001bd4 $d
       stm32eforth.s:3664   .text.reset_handler:0000000000001bdc $t
       stm32eforth.s:3679   .text.reset_handler:0000000000001bf0 SNAME
       stm32eforth.s:3684   .text.reset_handler:0000000000001c00 $d
       stm32eforth.s:3698   .text.reset_handler:0000000000001c38 SNAM1
       stm32eforth.s:3685   .text.reset_handler:0000000000001c04 $t
       stm32eforth.s:3700   .text.reset_handler:0000000000001c3c $d
       stm32eforth.s:3702   .text.reset_handler:0000000000001c44 $t
       stm32eforth.s:3707   .text.reset_handler:0000000000001c48 $d
       stm32eforth.s:3708   .text.reset_handler:0000000000001c4c _SCOMP
       stm32eforth.s:3710   .text.reset_handler:0000000000001c56 $t
       stm32eforth.s:3711   .text.reset_handler:0000000000001c58 SCOMP
       stm32eforth.s:3716   .text.reset_handler:0000000000001c68 $d
       stm32eforth.s:3728   .text.reset_handler:0000000000001c94 SCOM2
       stm32eforth.s:3717   .text.reset_handler:0000000000001c6c $t
       stm32eforth.s:3719   .text.reset_handler:0000000000001c74 $d
       stm32eforth.s:3720   .text.reset_handler:0000000000001c78 $t
       stm32eforth.s:3722   .text.reset_handler:0000000000001c80 $d
       stm32eforth.s:3725   .text.reset_handler:0000000000001c8c SCOM1
       stm32eforth.s:3723   .text.reset_handler:0000000000001c84 $t
       stm32eforth.s:3731   .text.reset_handler:0000000000001c9c $d
       stm32eforth.s:3734   .text.reset_handler:0000000000001ca8 SCOM3
       stm32eforth.s:3732   .text.reset_handler:0000000000001ca0 $t
       stm32eforth.s:3740   .text.reset_handler:0000000000001cac $d
       stm32eforth.s:3741   .text.reset_handler:0000000000001cb0 _OVERT
       stm32eforth.s:3743   .text.reset_handler:0000000000001cb6 $t
       stm32eforth.s:3744   .text.reset_handler:0000000000001cb8 OVERT
       stm32eforth.s:3755   .text.reset_handler:0000000000001cd0 $d
       stm32eforth.s:3756   .text.reset_handler:0000000000001cd4 _SEMIS
       stm32eforth.s:3758   .text.reset_handler:0000000000001cd6 $t
       stm32eforth.s:3759   .text.reset_handler:0000000000001cd8 SEMIS
       stm32eforth.s:3771   .text.reset_handler:0000000000001cf4 $d
       stm32eforth.s:3772   .text.reset_handler:0000000000001cf8 _RBRAC
       stm32eforth.s:3774   .text.reset_handler:0000000000001cfa $t
       stm32eforth.s:3775   .text.reset_handler:0000000000001cfc RBRAC
       stm32eforth.s:3778   .text.reset_handler:0000000000001d04 $d
       stm32eforth.s:3779   .text.reset_handler:0000000000001d08 $t
       stm32eforth.s:3812   .text.reset_handler:0000000000001d4e $d
       stm32eforth.s:3813   .text.reset_handler:0000000000001d52 _COLON
       stm32eforth.s:3815   .text.reset_handler:0000000000001d54 $t
       stm32eforth.s:3816   .text.reset_handler:0000000000001d54 COLON
       stm32eforth.s:3829   .text.reset_handler:0000000000001d74 $d
       stm32eforth.s:3830   .text.reset_handler:0000000000001d78 _IMMED
       stm32eforth.s:3832   .text.reset_handler:0000000000001d82 $t
       stm32eforth.s:3833   .text.reset_handler:0000000000001d84 IMMED
       stm32eforth.s:3836   .text.reset_handler:0000000000001d8c $d
       stm32eforth.s:3837   .text.reset_handler:0000000000001d90 $t
       stm32eforth.s:3852   .text.reset_handler:0000000000001db0 $d
       stm32eforth.s:3853   .text.reset_handler:0000000000001db4 _CONST
       stm32eforth.s:3856   .text.reset_handler:0000000000001dc0 CONST
       stm32eforth.s:3865   .text.reset_handler:0000000000001de0 $d
       stm32eforth.s:3866   .text.reset_handler:0000000000001de4 $t
       stm32eforth.s:3873   .text.reset_handler:0000000000001df0 $d
ARM GAS  stm32eforth.s 			page 99


       stm32eforth.s:3874   .text.reset_handler:0000000000001df4 _CREAT
       stm32eforth.s:3877   .text.reset_handler:0000000000001dfc CREAT
       stm32eforth.s:3886   .text.reset_handler:0000000000001e1c $d
       stm32eforth.s:3887   .text.reset_handler:0000000000001e20 $t
       stm32eforth.s:3893   .text.reset_handler:0000000000001e28 $d
       stm32eforth.s:3894   .text.reset_handler:0000000000001e2c _VARIA
       stm32eforth.s:3897   .text.reset_handler:0000000000001e38 VARIA
       stm32eforth.s:3901   .text.reset_handler:0000000000001e44 $d
       stm32eforth.s:3902   .text.reset_handler:0000000000001e48 $t
       stm32eforth.s:3915   .text.reset_handler:0000000000001e50 DMP
       stm32eforth.s:3919   .text.reset_handler:0000000000001e5c $d
       stm32eforth.s:3920   .text.reset_handler:0000000000001e60 $t
       stm32eforth.s:3931   .text.reset_handler:0000000000001e88 PDUM2
       stm32eforth.s:3924   .text.reset_handler:0000000000001e70 PDUM1
       stm32eforth.s:3928   .text.reset_handler:0000000000001e7c $d
       stm32eforth.s:3929   .text.reset_handler:0000000000001e80 $t
       stm32eforth.s:3933   .text.reset_handler:0000000000001e8c $d
       stm32eforth.s:3934   .text.reset_handler:0000000000001e90 $t
       stm32eforth.s:3939   .text.reset_handler:0000000000001e94 $d
       stm32eforth.s:3940   .text.reset_handler:0000000000001e98 _DUMP
       stm32eforth.s:3943   .text.reset_handler:0000000000001ea0 DUMP
       stm32eforth.s:3950   .text.reset_handler:0000000000001eb8 $d
       stm32eforth.s:3951   .text.reset_handler:0000000000001ebc $t
       stm32eforth.s:3965   .text.reset_handler:0000000000001ef0 DUMP4
       stm32eforth.s:3954   .text.reset_handler:0000000000001ec8 DUMP1
       stm32eforth.s:3957   .text.reset_handler:0000000000001ed0 $d
       stm32eforth.s:3958   .text.reset_handler:0000000000001ed4 $t
       stm32eforth.s:3967   .text.reset_handler:0000000000001ef4 $d
       stm32eforth.s:3968   .text.reset_handler:0000000000001ef8 DUMP3
       stm32eforth.s:3969   .text.reset_handler:0000000000001ef8 $t
       stm32eforth.s:3978   .text.reset_handler:0000000000001f0c $d
       stm32eforth.s:3979   .text.reset_handler:0000000000001f10 _DOTS
       stm32eforth.s:3983   .text.reset_handler:0000000000001f14 DOTS
       stm32eforth.s:3993   .text.reset_handler:0000000000001f34 DOTS2
       stm32eforth.s:3989   .text.reset_handler:0000000000001f28 DOTS1
       stm32eforth.s:3995   .text.reset_handler:0000000000001f38 $d
       stm32eforth.s:3996   .text.reset_handler:0000000000001f3c $t
       stm32eforth.s:4002   .text.reset_handler:0000000000001f44 $d
       stm32eforth.s:4003   .text.reset_handler:0000000000001f48 _TNAME
       stm32eforth.s:4005   .text.reset_handler:0000000000001f4e $t
       stm32eforth.s:4006   .text.reset_handler:0000000000001f50 TNAME
       stm32eforth.s:4011   .text.reset_handler:0000000000001f60 TNAM1
       stm32eforth.s:4014   .text.reset_handler:0000000000001f68 $d
       stm32eforth.s:4024   .text.reset_handler:0000000000001f90 TNAM2
       stm32eforth.s:4015   .text.reset_handler:0000000000001f6c $t
       stm32eforth.s:4020   .text.reset_handler:0000000000001f80 $d
       stm32eforth.s:4021   .text.reset_handler:0000000000001f84 $t
       stm32eforth.s:4032   .text.reset_handler:0000000000001f9c $d
       stm32eforth.s:4033   .text.reset_handler:0000000000001fa0 _DOTID
       stm32eforth.s:4035   .text.reset_handler:0000000000001fa4 $t
       stm32eforth.s:4036   .text.reset_handler:0000000000001fa4 DOTID
       stm32eforth.s:4040   .text.reset_handler:0000000000001fb0 $d
       stm32eforth.s:4047   .text.reset_handler:0000000000001fcc DOTI1
       stm32eforth.s:4041   .text.reset_handler:0000000000001fb4 $t
       stm32eforth.s:4043   .text.reset_handler:0000000000001fbc $d
       stm32eforth.s:4044   .text.reset_handler:0000000000001fc0 $t
       stm32eforth.s:4049   .text.reset_handler:0000000000001fd0 $d
ARM GAS  stm32eforth.s 			page 100


       stm32eforth.s:4051   .text.reset_handler:0000000000001fda $t
       stm32eforth.s:4057   .text.reset_handler:0000000000001fe0 $d
       stm32eforth.s:4058   .text.reset_handler:0000000000001fe4 _SEE
       stm32eforth.s:4060   .text.reset_handler:0000000000001fe8 $t
       stm32eforth.s:4061   .text.reset_handler:0000000000001fe8 SEE
       stm32eforth.s:4066   .text.reset_handler:0000000000001ff8 $d
       stm32eforth.s:4067   .text.reset_handler:0000000000001ffc $t
       stm32eforth.s:4068   .text.reset_handler:0000000000002000 SEE1
       stm32eforth.s:4085   .text.reset_handler:000000000000202c DECOMP
       stm32eforth.s:4073   .text.reset_handler:0000000000002010 $d
       stm32eforth.s:4074   .text.reset_handler:0000000000002014 $t
       stm32eforth.s:4080   .text.reset_handler:000000000000201c $d
       stm32eforth.s:4081   .text.reset_handler:0000000000002020 _DECOM
       stm32eforth.s:4083   .text.reset_handler:000000000000202a $t
       stm32eforth.s:4092   .text.reset_handler:0000000000002040 $d
       stm32eforth.s:4093   .text.reset_handler:0000000000002044 $t
       stm32eforth.s:4095   .text.reset_handler:000000000000204c $d
       stm32eforth.s:4096   .text.reset_handler:0000000000002050 $t
       stm32eforth.s:4098   .text.reset_handler:0000000000002058 $d
       stm32eforth.s:4124   .text.reset_handler:00000000000020b0 DECOM2
       stm32eforth.s:4100   .text.reset_handler:000000000000205c $t
       stm32eforth.s:4114   .text.reset_handler:0000000000002090 $d
       stm32eforth.s:4120   .text.reset_handler:00000000000020a4 DECOM1
       stm32eforth.s:4115   .text.reset_handler:0000000000002094 $t
       stm32eforth.s:4133   .text.reset_handler:00000000000020bc $d
       stm32eforth.s:4134   .text.reset_handler:00000000000020c0 _WORDS
       stm32eforth.s:4136   .text.reset_handler:00000000000020c6 $t
       stm32eforth.s:4137   .text.reset_handler:00000000000020c8 WORDS
       stm32eforth.s:4142   .text.reset_handler:00000000000020d8 WORS1
       stm32eforth.s:4145   .text.reset_handler:00000000000020e0 $d
       stm32eforth.s:4152   .text.reset_handler:00000000000020fc WORS2
       stm32eforth.s:4146   .text.reset_handler:00000000000020e4 $t
       stm32eforth.s:4165   .text.reset_handler:0000000000002100 VERSN
       stm32eforth.s:4168   .text.reset_handler:0000000000002108 $d
       stm32eforth.s:4169   .text.reset_handler:000000000000210c $t
       stm32eforth.s:4174   .text.reset_handler:0000000000002110 $d
       stm32eforth.s:4175   .text.reset_handler:0000000000002114 _HI
       stm32eforth.s:4182   .text.reset_handler:0000000000002124 $d
       stm32eforth.s:4184   .text.reset_handler:000000000000213c $t
       stm32eforth.s:4193   .text.reset_handler:000000000000215c $d
       stm32eforth.s:4194   .text.reset_handler:0000000000002160 $t
       stm32eforth.s:4206   .text.reset_handler:0000000000002180 $d
       stm32eforth.s:4212   .text.reset_handler:000000000000218c $t
       stm32eforth.s:4219   .text.reset_handler:00000000000021a6 COLD1
       stm32eforth.s:4221   .text.reset_handler:00000000000021aa $d
       stm32eforth.s:4222   .text.reset_handler:00000000000021ae $t
       stm32eforth.s:4224   .text.reset_handler:00000000000021b6 $d
       stm32eforth.s:4225   .text.reset_handler:00000000000021ba $t
       stm32eforth.s:4226   .text.reset_handler:00000000000021be $d
       stm32eforth.s:4227   .text.reset_handler:00000000000021c2 $t
       stm32eforth.s:4228   .text.reset_handler:00000000000021c6 $d
       stm32eforth.s:4229   .text.reset_handler:00000000000021ca $t
       stm32eforth.s:4235   .text.reset_handler:00000000000021e2 COLD2
       stm32eforth.s:4237   .text.reset_handler:00000000000021e2 $d
       stm32eforth.s:4239   .text.reset_handler:00000000000021e8 $d
       stm32eforth.s:250    .text.default_handler:0000000000000025 $d
       stm32eforth.s:250    .text.default_handler:0000000000000026 $t
ARM GAS  stm32eforth.s 			page 101


       stm32eforth.s:481    .text.reset_handler:000000000000014f $d
       stm32eforth.s:481    .text.reset_handler:0000000000000150 $t
       stm32eforth.s:516    .text.reset_handler:00000000000001a1 $d
       stm32eforth.s:516    .text.reset_handler:00000000000001a2 $t
       stm32eforth.s:536    .text.reset_handler:00000000000001c9 $d
       stm32eforth.s:536    .text.reset_handler:00000000000001ca $t
       stm32eforth.s:561    .text.reset_handler:00000000000001fd $d
       stm32eforth.s:561    .text.reset_handler:00000000000001fe $t
       stm32eforth.s:677    .text.reset_handler:0000000000000293 $d
       stm32eforth.s:677    .text.reset_handler:0000000000000294 $t
       stm32eforth.s:711    .text.reset_handler:00000000000002bf $d
       stm32eforth.s:711    .text.reset_handler:00000000000002c0 $t
       stm32eforth.s:724    .text.reset_handler:00000000000002d3 $d
       stm32eforth.s:724    .text.reset_handler:00000000000002d4 $t
       stm32eforth.s:735    .text.reset_handler:00000000000002df $d
       stm32eforth.s:735    .text.reset_handler:00000000000002e0 $t
       stm32eforth.s:747    .text.reset_handler:00000000000002f1 $d
       stm32eforth.s:747    .text.reset_handler:00000000000002f2 $t
       stm32eforth.s:759    .text.reset_handler:0000000000000303 $d
       stm32eforth.s:759    .text.reset_handler:0000000000000304 $t
       stm32eforth.s:783    .text.reset_handler:0000000000000329 $d
       stm32eforth.s:783    .text.reset_handler:000000000000032a $t
       stm32eforth.s:805    .text.reset_handler:000000000000034b $d
       stm32eforth.s:805    .text.reset_handler:000000000000034c $t
       stm32eforth.s:818    .text.reset_handler:000000000000035d $d
       stm32eforth.s:818    .text.reset_handler:000000000000035e $t
       stm32eforth.s:830    .text.reset_handler:000000000000036f $d
       stm32eforth.s:830    .text.reset_handler:0000000000000370 $t
       stm32eforth.s:854    .text.reset_handler:0000000000000395 $d
       stm32eforth.s:854    .text.reset_handler:0000000000000396 $t
       stm32eforth.s:893    .text.reset_handler:00000000000003db $d
       stm32eforth.s:893    .text.reset_handler:00000000000003dc $t
       stm32eforth.s:905    .text.reset_handler:00000000000003f1 $d
       stm32eforth.s:905    .text.reset_handler:00000000000003f2 $t
       stm32eforth.s:967    .text.reset_handler:000000000000044b $d
       stm32eforth.s:967    .text.reset_handler:000000000000044c $t
       stm32eforth.s:981    .text.reset_handler:000000000000045f $d
       stm32eforth.s:981    .text.reset_handler:0000000000000460 $t
       stm32eforth.s:992    .text.reset_handler:000000000000046d $d
       stm32eforth.s:992    .text.reset_handler:000000000000046e $t
       stm32eforth.s:1003   .text.reset_handler:000000000000047d $d
       stm32eforth.s:1003   .text.reset_handler:000000000000047e $t
       stm32eforth.s:1014   .text.reset_handler:000000000000048d $d
       stm32eforth.s:1014   .text.reset_handler:000000000000048e $t
       stm32eforth.s:1047   .text.reset_handler:00000000000004bd $d
       stm32eforth.s:1047   .text.reset_handler:00000000000004be $t
       stm32eforth.s:1081   .text.reset_handler:00000000000004f1 $d
       stm32eforth.s:1081   .text.reset_handler:00000000000004f2 $t
       stm32eforth.s:1092   .text.reset_handler:0000000000000501 $d
       stm32eforth.s:1092   .text.reset_handler:0000000000000502 $t
       stm32eforth.s:1103   .text.reset_handler:0000000000000513 $d
       stm32eforth.s:1103   .text.reset_handler:0000000000000514 $t
       stm32eforth.s:1142   .text.reset_handler:000000000000054f $d
       stm32eforth.s:1142   .text.reset_handler:0000000000000550 $t
       stm32eforth.s:1155   .text.reset_handler:0000000000000563 $d
       stm32eforth.s:1155   .text.reset_handler:0000000000000564 $t
       stm32eforth.s:1182   .text.reset_handler:0000000000000591 $d
ARM GAS  stm32eforth.s 			page 102


       stm32eforth.s:1182   .text.reset_handler:0000000000000592 $t
       stm32eforth.s:1221   .text.reset_handler:00000000000005cb $d
       stm32eforth.s:1221   .text.reset_handler:00000000000005cc $t
       stm32eforth.s:1294   .text.reset_handler:000000000000063b $d
       stm32eforth.s:1294   .text.reset_handler:000000000000063c $t
       stm32eforth.s:1309   .text.reset_handler:0000000000000653 $d
       stm32eforth.s:1309   .text.reset_handler:0000000000000654 $t
       stm32eforth.s:1324   .text.reset_handler:000000000000066f $d
       stm32eforth.s:1324   .text.reset_handler:0000000000000670 $t
       stm32eforth.s:1395   .text.reset_handler:00000000000006cd $d
       stm32eforth.s:1395   .text.reset_handler:00000000000006ce $t
       stm32eforth.s:1429   .text.reset_handler:000000000000070b $d
       stm32eforth.s:1429   .text.reset_handler:000000000000070c $t
       stm32eforth.s:1453   .text.reset_handler:0000000000000729 $d
       stm32eforth.s:1453   .text.reset_handler:000000000000072a $t
       stm32eforth.s:1477   .text.reset_handler:0000000000000753 $d
       stm32eforth.s:1477   .text.reset_handler:0000000000000754 $t
       stm32eforth.s:1526   .text.reset_handler:00000000000007a5 $d
       stm32eforth.s:1526   .text.reset_handler:00000000000007a6 $t
       stm32eforth.s:1537   .text.reset_handler:00000000000007bb $d
       stm32eforth.s:1537   .text.reset_handler:00000000000007bc $t
       stm32eforth.s:1549   .text.reset_handler:00000000000007cf $d
       stm32eforth.s:1549   .text.reset_handler:00000000000007d0 $t
       stm32eforth.s:1564   .text.reset_handler:00000000000007e5 $d
       stm32eforth.s:1564   .text.reset_handler:00000000000007e6 $t
       stm32eforth.s:1583   .text.reset_handler:0000000000000813 $d
       stm32eforth.s:1583   .text.reset_handler:0000000000000814 $t
       stm32eforth.s:1653   .text.reset_handler:00000000000008c1 $d
       stm32eforth.s:1653   .text.reset_handler:00000000000008c2 $t
       stm32eforth.s:1710   .text.reset_handler:000000000000093b $d
       stm32eforth.s:1710   .text.reset_handler:000000000000093c $t
       stm32eforth.s:1782   .text.reset_handler:00000000000009e3 $d
       stm32eforth.s:1782   .text.reset_handler:00000000000009e4 $t
       stm32eforth.s:1801   .text.reset_handler:0000000000000a09 $d
       stm32eforth.s:1801   .text.reset_handler:0000000000000a0a $t
       stm32eforth.s:1839   .text.reset_handler:0000000000000a51 $d
       stm32eforth.s:1839   .text.reset_handler:0000000000000a52 $t
       stm32eforth.s:1878   .text.reset_handler:0000000000000a9b $d
       stm32eforth.s:1878   .text.reset_handler:0000000000000a9c $t
       stm32eforth.s:1902   .text.reset_handler:0000000000000acb $d
       stm32eforth.s:1902   .text.reset_handler:0000000000000acc $t
       stm32eforth.s:1925   .text.reset_handler:0000000000000af7 $d
       stm32eforth.s:1925   .text.reset_handler:0000000000000af8 $t
       stm32eforth.s:1994   .text.reset_handler:0000000000000bb3 $d
       stm32eforth.s:1994   .text.reset_handler:0000000000000bb4 $t
       stm32eforth.s:2008   .text.reset_handler:0000000000000bd1 $d
       stm32eforth.s:2008   .text.reset_handler:0000000000000bd2 $t
       stm32eforth.s:2041   .text.reset_handler:0000000000000c1f $d
       stm32eforth.s:2041   .text.reset_handler:0000000000000c20 $t
       stm32eforth.s:2059   .text.reset_handler:0000000000000c43 $d
       stm32eforth.s:2059   .text.reset_handler:0000000000000c44 $t
       stm32eforth.s:2077   .text.reset_handler:0000000000000c6b $d
       stm32eforth.s:2077   .text.reset_handler:0000000000000c6c $t
       stm32eforth.s:2146   .text.reset_handler:0000000000000d03 $d
       stm32eforth.s:2146   .text.reset_handler:0000000000000d04 $t
       stm32eforth.s:2308   .text.reset_handler:0000000000000ef7 $d
       stm32eforth.s:2308   .text.reset_handler:0000000000000ef8 $t
ARM GAS  stm32eforth.s 			page 103


       stm32eforth.s:2329   .text.reset_handler:0000000000000f29 $d
       stm32eforth.s:2329   .text.reset_handler:0000000000000f2a $t
       stm32eforth.s:2350   .text.reset_handler:0000000000000f59 $d
       stm32eforth.s:2350   .text.reset_handler:0000000000000f5a $t
       stm32eforth.s:2429   .text.reset_handler:0000000000000fe3 $d
       stm32eforth.s:2429   .text.reset_handler:0000000000000fe4 $t
       stm32eforth.s:2467   .text.reset_handler:0000000000001043 $d
       stm32eforth.s:2467   .text.reset_handler:0000000000001044 $t
       stm32eforth.s:2637   .text.reset_handler:0000000000001227 $d
       stm32eforth.s:2637   .text.reset_handler:0000000000001228 $t
       stm32eforth.s:2682   .text.reset_handler:0000000000001289 $d
       stm32eforth.s:2682   .text.reset_handler:000000000000128a $t
       stm32eforth.s:2697   .text.reset_handler:00000000000012ad $d
       stm32eforth.s:2697   .text.reset_handler:00000000000012ae $t
       stm32eforth.s:2952   .text.reset_handler:000000000000152b $d
       stm32eforth.s:2952   .text.reset_handler:000000000000152c $t
       stm32eforth.s:3127   .text.reset_handler:00000000000016ef $d
       stm32eforth.s:3127   .text.reset_handler:00000000000016f0 $t
       stm32eforth.s:3135   .text.reset_handler:000000000000170b $d
       stm32eforth.s:3135   .text.reset_handler:000000000000170c $t
       stm32eforth.s:3144   .text.reset_handler:0000000000001719 $d
       stm32eforth.s:3144   .text.reset_handler:000000000000171a $t
       stm32eforth.s:3168   .text.reset_handler:000000000000175b $d
       stm32eforth.s:3168   .text.reset_handler:000000000000175c $t
       stm32eforth.s:3183   .text.reset_handler:0000000000001773 $d
       stm32eforth.s:3183   .text.reset_handler:0000000000001774 $t
       stm32eforth.s:3233   .text.reset_handler:00000000000017df $d
       stm32eforth.s:3233   .text.reset_handler:00000000000017e0 $t
       stm32eforth.s:3256   .text.reset_handler:0000000000001813 $d
       stm32eforth.s:3256   .text.reset_handler:0000000000001814 $t
       stm32eforth.s:3460   .text.reset_handler:0000000000001a05 $d
       stm32eforth.s:3460   .text.reset_handler:0000000000001a06 $t
       stm32eforth.s:3502   .text.reset_handler:0000000000001a63 $d
       stm32eforth.s:3502   .text.reset_handler:0000000000001a64 $t
       stm32eforth.s:3538   .text.reset_handler:0000000000001ac3 $d
       stm32eforth.s:3538   .text.reset_handler:0000000000001ac4 $t
       stm32eforth.s:3553   .text.reset_handler:0000000000001ae5 $d
       stm32eforth.s:3553   .text.reset_handler:0000000000001ae6 $t
       stm32eforth.s:3582   .text.reset_handler:0000000000001b25 $d
       stm32eforth.s:3582   .text.reset_handler:0000000000001b26 $t
       stm32eforth.s:3609   .text.reset_handler:0000000000001b63 $d
       stm32eforth.s:3609   .text.reset_handler:0000000000001b64 $t
       stm32eforth.s:3623   .text.reset_handler:0000000000001b7f $d
       stm32eforth.s:3623   .text.reset_handler:0000000000001b80 $t
       stm32eforth.s:3637   .text.reset_handler:0000000000001b9b $d
       stm32eforth.s:3637   .text.reset_handler:0000000000001b9c $t
       stm32eforth.s:3855   .text.reset_handler:0000000000001dbd $d
       stm32eforth.s:3855   .text.reset_handler:0000000000001dbe $t
       stm32eforth.s:3876   .text.reset_handler:0000000000001dfb $d
       stm32eforth.s:3876   .text.reset_handler:0000000000001dfc $t
       stm32eforth.s:3896   .text.reset_handler:0000000000001e35 $d
       stm32eforth.s:3896   .text.reset_handler:0000000000001e36 $t
       stm32eforth.s:3942   .text.reset_handler:0000000000001e9d $d
       stm32eforth.s:3942   .text.reset_handler:0000000000001e9e $t
       stm32eforth.s:3982   .text.reset_handler:0000000000001f13 $d
       stm32eforth.s:3982   .text.reset_handler:0000000000001f14 $t
       stm32eforth.s:4177   .text.reset_handler:0000000000002117 $d
ARM GAS  stm32eforth.s 			page 104


       stm32eforth.s:4177   .text.reset_handler:0000000000002118 $t

UNDEFINED SYMBOLS
_mstack
