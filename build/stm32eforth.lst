ARM GAS  stm32eforth.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  stm32eforth.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.p2align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.p2aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m3
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
ARM GAS  stm32eforth.s 			page 3


  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
ARM GAS  stm32eforth.s 			page 4


  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
  81              	
  82              	/* blue pill specific constants */ 
  83              	  .equ LED_GPIO, GPIOC_BASE_ADR
  84              	  .equ LED_PIN, 13
  85              	  .equ UART, USART1_BASE_ADR 
  86              	
  87              	/* eForth specific constants */
  88              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  89              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  90              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  91              	.equ UPP ,	0x20000000	/*start of user area (UP0) */
  92              	.equ DTOP ,	0x20000100	/*start of usable RAM area (HERE) */
  93              	.equ DEND , 0x20004E00  /*usable RAM end */
  94              	
  95              	/*************************************
  96              	   system variables offset from UPP
  97              	*************************************/
  98              	  .equ TICKS_OFS, 4  // millseconds counter
  99              	  .equ TIMER_OFS, 8  // count down timer
 100              	  .equ BOOT_OFS, 12  // boot program address
 101              	  .equ BASE_OFS, 16  // numeric conversion base 
 102              	  .equ TMP_OFS, 20   // temporary variable
 103              	  .equ SPAN_OFS, 24  // character count received by expect  
 104              	  .equ TOIN_OFS, 28  // >IN  parse pointer in TIB
 105              	  .equ NTIB_OFS, 32  // #TIB  characters in TIB 
ARM GAS  stm32eforth.s 			page 5


 106              	  .equ TIB_OFS, 36   // TIB buffer address 
 107              	  .equ EVAL_OFS, 40  // eval|compile vector 
 108              	  .equ HLD_OFS, 44   // hold pointer 
 109              	  .equ CTXT_OFS, 48  // context pointer 
 110              	  .equ FLSH_CTOP_OFS, 52  // flash free dictionary address 
 111              	  .equ RAM_CTOP_OFS, 56  // ram free dictionary address
 112              	  .equ LASTN_OFS, 60     // last word in dictionary link nfa 
 113              	
 114              	
 115              	
 116              	
 117              	/***********************************************
 118              	* MACROS
 119              	*	Assemble inline direct threaded code ending.
 120              	***********************************************/
 121              	 	.macro	_NEXT /*end low level word */
 122              		BX	LR
 123              		.endm
 124              	
 125              	 	.macro	_NEST /*start high level word */
 126              		STMFD	R2!,{LR}
 127              		.endm
 128              	
 129              	 	.macro	_UNNEST	/*end high level word */
 130              		LDMFD	R2!,{LR}
 131              		BX LR 
 132              		.endm
 133              	
 134              	 	.macro	_DOLIT /*long literals */
 135              		BL	DOLIT
 136              		.endm
 137              	
 138              	 	.macro	_PUSH	/*push R5 on data stack*/
 139              		STR	R5,[R1,#-4]!
 140              		.endm
 141              	
 142              	 	.macro	_POP /*pop data stack to R5 */
 143              		LDR	R5,[R1],#4
 144              		.endm
 145              	
 146              	/*************************************
 147              	*   interrupt service vectors table 
 148              	**************************************/
 149              	   .section  .isr_vector,"a",%progbits
 150              	  .type  isr_vectors, %object
 151              	
 152              	isr_vectors:
 153 0000 00000000 	  .word   _mstack          /* main return stack address */
 154 0004 00000000 	  .word   reset_handler    /* startup address */
 155              	/* core interrupts || exceptions */
 156 0008 00000000 	  .word   default_handler  /*  NMI */
 157 000c 00000000 	  .word   default_handler  /*  HardFault */
 158 0010 00000000 	  .word   default_handler  /*  Memory Management */
 159 0014 00000000 	  .word   default_handler  /* Bus fault */
 160 0018 00000000 	  .word   default_handler  /* Usage fault */
 161 001c 00000000 	  .word   0
 162 0020 00000000 	  .word   0
ARM GAS  stm32eforth.s 			page 6


 163 0024 00000000 	  .word   0
 164 0028 00000000 	  .word   0
 165 002c 00000000 	  .word   default_handler  /* SWI instruction */
 166 0030 00000000 	  .word   default_handler  /* Debug monitor */
 167 0034 00000000 	  .word   0
 168 0038 00000000 	  .word   default_handler  /* PendSV */
 169 003c 00000000 	  .word   systick_handler  /* Systick */
 170              	  
 171              	  /* External Interrupts */
 172 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 173 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 174 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 175 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 176 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 177 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 178 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 179 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 180 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 181 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 182 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 183 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 184 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 185 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 186 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 187 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 188 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 189 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 190 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 191 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 192 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 193 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 194 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 195 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 196 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 197 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 198 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 199 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 200 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 201 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 202 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 203 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 204 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 205 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 206 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 207 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 208 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 209 00d4 00000000 	  .word      default_handler /* IRQ37, USART1 */                   
 210 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 211 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 212 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 213 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 214 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 215 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 216 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 217 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 218 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 219 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
ARM GAS  stm32eforth.s 			page 7


 220 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 221 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 222 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 223 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 224 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 225 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 226 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 227 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 228 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 229 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 230 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 231 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 232              	
 233              	  .size  isr_vectors, .-isr_vectors
 234              	
 235              	/*****************************************************
 236              	* default isr handler called on unexpected interrupt
 237              	*****************************************************/
 238              	    .section  .text.default_handler,"ax",%progbits
 239              	
 240              	  .type default_handler, %function
 241              	  .p2align 2 
 242              	  .global default_handler
 243              	default_handler:
 244 0000 00F00FF9 		_DOLIT 
 245 0004 FFFFFFFF 		.word -1
 246 0008 FFF7FEFF 		BL ULED 
 247 000c 00F0D0FF 		BL	CR	// new line
 248 0010 01F00CF8 		BL	DOTQP
 249 0014 10       		.byte	16
 250 0015 20657863 		.ascii " exception halt!"	
 250      65707469 
 250      6F6E2068 
 250      616C7421 
 251 0025 0000BF   		.p2align 2 
 252 0028 00F0A6B8 		b REBOOT   
 253              	  .size  default_handler, .-default_handler
 254              	
 255              	
 256              	
 257              	/*********************************
 258              		system milliseconds counter
 259              	*********************************/	
 260              	  .type systick_handler, %function
 261              	  .p2align 2 
 262              	  .global systick_handler
 263              	systick_handler:
 264 002c 4FF00003 	  mov r3,#UPP&0xffff
 265 0030 C2F20003 	  movt r3,#UPP>>16  	
 266 0034 5868     	  ldr r0,[r3,#TICKS_OFS]  
 267 0036 00F10100 	  add r0,#1
 268 003a 5860     	  str r0,[r3,#TICKS_OFS]
 269 003c 9868     	  ldr r0,[r3,#TIMER_OFS]
 270 003e 10B1     	  cbz r0, systick_exit
 271 0040 A0F10100 	  sub r0,#1
 272 0044 9860     	  str r0,[r3,#TIMER_OFS]
 273              	systick_exit:
ARM GAS  stm32eforth.s 			page 8


 274 0046 7047     	  bx lr
 275              	
 276              	
 277              	/**************************************
 278              	  reset_handler execute at MCU reset
 279              	***************************************/
 280              	    .section  .text.reset_handler
 281              	  .type  reset_handler, %function
 282              	  .p2align 2 
 283              	  .global reset_handler
 284              	reset_handler:
 285              	/* zero RAM */
 286 0000 4FF00000 		mov r0,#0
 287 0004 C2F20000 		movt r0,#0x2000
 288 0008 81EA0101 		eor r1,r1,r1 // r1=0
 289 000c 4FF4A042 		mov r2,#0x5000 // RAM size 
 290 0010 02EB0003 		add r3,r2,r0 
 291              	zero_loop:
 292 0014 40F8041B 		str r1,[r0],#4
 293 0018 043A     		subs r2,#4
 294 001a FBD1     		bne zero_loop		
 295 001c 00F006F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 296 0020 01F002FC 		bl	UNLOCK			/* unlock flash memory */
 297 0024 02F030F9 		bl COLD 
 298 0028 FFF7FEBF 		b reset_handler 
 299              	
 300              	  .type init_devices, %function
 301              	  .p2align 2 
 302              	init_devices:
 303              	/* init clock to HSE 72 Mhz */
 304              	/* set 2 wait states in FLASH_ACR_LATENCY */
 305 002c 4FF40050 		mov r0,#FLASH_BASE_ADR&0xffff
 306 0030 C4F20200 		movt r0,#FLASH_BASE_ADR>>16 
 307 0034 4FF01202 	  mov r2,#0x12
 308 0038 0260     	  str r2,[r0,#FLASH_ACR]
 309              	/* configure clock for HSE, 8 Mhz crystal */
 310              	/* enable HSE in RCC_CR */
 311 003a 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 312 003e C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 313 0042 0168     	  ldr r1,[r0,#RCC_CR]
 314 0044 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 315 0048 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 316              	/* wait HSERDY loop */
 317              	wait_hserdy:
 318 004a 0168     	  ldr r1,[r0,#RCC_CR]
 319 004c 11F4003F 	  tst r1,#(1<<17)
 320 0050 FBD0     	  beq wait_hserdy
 321              	
 322              	/************************************************* 
 323              	   configure PLL mul factor and source 
 324              	   SYSCLOCK=72 Mhz
 325              	   select HSE as  PLL source clock
 326              	   multiply frequency by 9 
 327              	   APB1 clock is limited to 36 Mhz so divide by 2 
 328              	****************************************************/
 329 0052 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 330 0056 C0F21D01 	  movt r1,#(7<<2)|1
ARM GAS  stm32eforth.s 			page 9


 331 005a 4160     	  str r1,[r0,#RCC_CFGR]
 332              	  /* enable PLL */
 333 005c 0168     	  ldr r1,[r0,#RCC_CR]
 334 005e 41F08071 	  orr r1, #1<<24 
 335 0062 0160     	  str r1,[r0,#RCC_CR]
 336              	/* wait for PLLRDY */
 337              	wait_pllrdy:
 338 0064 0168     	  ldr r1,[r0,#RCC_CR]
 339 0066 11F0007F 	  tst r1,#(1<<25)
 340 006a FBD0     	  beq wait_pllrdy 
 341              	/* select PLL as sysclock */
 342 006c 4168     	  ldr r1,[r0,#RCC_CFGR]
 343 006e 4FF6FC72 	  mov r2,#0xfffc
 344 0072 CFF6FF72 	  movt r2,#0xffff
 345 0076 01EA0201 	  and r1,r1,r2 
 346 007a 4FF00202 	  mov r2,#2
 347 007e 41EA0201 	  orr r1,r1,r2
 348 0082 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 349              	/* wait for SWS==2 */
 350              	wait_sws:
 351 0084 4168     	  ldr r1,[r0,#RCC_CFGR]
 352 0086 11F0080F 	  tst r1,#(2<<2)
 353 008a FBD0     	  beq wait_sws
 354              	/* now sysclock is 72 Mhz */
 355              	
 356              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 357 008c 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 358 0090 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 359 0094 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 360 0098 8161     	  str	r1, [r0, #RCC_APB2ENR]
 361              	
 362              	/* configure GPIOC:13 as output for user LED */
 363 009a 4FF48050 	  mov r0,#GPIOC_BASE_ADR&0xffff
 364 009e C4F20100 	  movt r0,#GPIOC_BASE_ADR>>16
 365 00a2 4168     	  ldr r1,[r0,#GPIO_CRH]
 366 00a4 6FF47002 	  mvn r2,#(15<<20)
 367 00a8 01EA0201 	  and r1,r1,r2
 368 00ac 4FF4C002 	  mov r2,#(6<<20)
 369 00b0 41EA0201 	  orr r1,r1,r2
 370 00b4 4160     	  str r1,[r0,#GPIO_CRH]
 371              	
 372              	/* configure USART1 */
 373              	/* set GPIOA PIN 9, uart TX  */
 374 00b6 4FF40060 	  mov r0,#GPIOA_BASE_ADR&0XFFFF
 375 00ba C4F20100 	  movt r0,#GPIOA_BASE_ADR>>16	
 376 00be 4168     	  ldr r1,[r0,#GPIO_CRH]
 377 00c0 6FF0F002 	  mvn r2,#(15<<4)
 378 00c4 01EA0201 	  and r1,r1,r2
 379 00c8 4FF0A002 	  mov r2,#(0xA<<4)
 380 00cc 41EA0201 	  orr r1,r1,r2 
 381 00d0 4160     	  str r1,[r0,#GPIO_CRH]
 382              	
 383 00d2 4FF46050 	  mov r0,#UART&0xFFFF
 384 00d6 C4F20100 	  movt r0,#UART>>16	
 385              	/* BAUD rate */
 386 00da 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 387 00de 8160     	  str r1,[r0,#USART_BRR]
ARM GAS  stm32eforth.s 			page 10


 388 00e0 42F20C01 	  mov r1,#(3<<2)+(1<<13)
 389 00e4 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 390              	/* configure systicks for 1msec ticks */
 391 00e6 4EF21000 	  mov r0,#STK_BASE_ADR&0xFFFF
 392 00ea CEF20000 	  movt r0,#STK_BASE_ADR>>16	
 393 00ee 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 394 00f2 4160     	  str r1,[r0,#STK_LOAD]
 395 00f4 4FF00301 	  mov r1,#3
 396 00f8 0160     	  str r1,[r0,STK_CTL]
 397 00fa 7047     	  _NEXT  
 398              	
 399              	
 400              	/********************
 401              	* Version control
 402              	*******************/
 403              	.equ VER ,	0x01	/*major release version */
 404              	.equ EXT ,	0x00	/*minor extension */
 405              	
 406              	/* Constants */
 407              	
 408              	// .equ RAMOFFSET ,	0x20000000	;remap
 409              	// .equ MAPOFFSET ,	0x08000000	;remap
 410              	.equ RAMOFFSET  ,	0x00000000	/* absolute */
 411              	.equ MAPOFFSET  ,	0x00000000	/* absolute */
 412              	
 413              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 414              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 415              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 416              	
 417              	.equ CELLL ,	4	/*size of a cell */
 418              	.equ BASEE ,	16	/*default radix */
 419              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 420              	
 421              	.equ BKSPP ,	8	/*backspace */
 422              	.equ LF ,	10	  /*line feed */
 423              	.equ CRR ,	13	/*carriage return */
 424              	.equ ERR ,	27	/*error escape */
 425              	.equ TIC ,	39	/*tick */
 426              	
 427              	/********************************************************
 428              	* RAM memory mapping
 429              	* 	0x20000000	RAM base address
 430              	*	0x20000000  system variables	
 431              	* 	0x20000100	Forth dictionary
 432              	* 	0x2000????	top of dictionary, HERE
 433              	* 	0x2000????	WORD buffer, HERE+16
 434              	*   0x20004E00  end of user space
 435              	* 	0x20004E80	top of data stack  R2
 436              	* 	0x20004E80	TIB terminal input buffer
 437              	* 	0x20004F80	top of return stack  R1
 438              	* 	0x20005000	top of hardware stack for interrupts R14
 439              	********************************************************/
 440              	
 441              	
 442              	/******************************************************
 443              	*  COLD start moves the following to USER variables.
 444              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
ARM GAS  stm32eforth.s 			page 11


 445              	******************************************************/
 446              		.p2align 2   	
 447              	  
 448              	UZERO:
 449 00fc 00000000 		.word 0  			/*Reserved */
 450 0100 00000000 		.word 0      /* system Ticks */
 451 0104 00000000 	    .word 0     /* delay timer */
 452 0108 14220000 		.word HI  	/*'BOOT */
 453 010c 10000000 		.word BASEE 	/*BASE */
 454 0110 00000000 		.word 0			/*tmp */
 455 0114 00000000 		.word 0			/*SPAN */
 456 0118 00000000 		.word 0			/*>IN */
 457 011c 00000000 		.word 0			/*#TIB */
 458 0120 804E0020 		.word TIBB	/*TIB */
 459 0124 BC160000 		.word INTER	/*'EVAL */
 460 0128 00000000 		.word 0			/*HLD */
 461 012c 82220000 		.word LASTN	/*CONTEXT */
 462 0130 DE220000 		.word CTOP	/*FLASH */
 463 0134 00010020 		.word DTOP	/* start adress of RAM dictionary RAM */
 464 0138 82220000 		.word LASTN	/*LAST */
 465 013c 00000000 	  .word 0,0			/*reserved */
 465      00000000 
 466              	ULAST:
 467              	
 468              	 
 469              	
 470              	/***********************************
 471              	//  Start of Forth dictionary
 472              	***********************************/
 473              	
 474              		.p2align 2 
 475              	
 476              	// REBOOT ( -- )
 477              	// system reset 
 478 0144 00000000 		.word 0
 479              	_REBOOT:
 480 0148 06       		.byte 6
 481 0149 5245424F 		.ascii "REBOOT"
 481      4F54
 482 014f 00       		.p2align 2 
 483              	REBOOT:
 484 0150 4FF46D40 		mov r0,#SCB_BASE_ADR&0xffff
 485 0154 CEF20000 		movt r0,#SCB_BASE_ADR>>16
 486 0158 C168     		ldr r1,[r0,#SCB_AIRCR]
 487 015a C0F2FA51 		movt r1,#SCB_VECTKEY 
 488 015e 41F00401 		orr r1,#(1<<2)
 489 0162 C160     		str r1,[r0,#SCB_AIRCR]
 490 0164 7047     		_NEXT 
 491              	
 492              	// PAUSE ( u -- ) 
 493              	// suspend execution for u milliseconds
 494 0166 48010000 		.word _REBOOT 
 495 016a 05       	_PAUSE: .byte 5
 496 016b 50415553 		.ascii "PAUSE"
 496      45
 497              		.p2align 2
 498              	PAUSE:
ARM GAS  stm32eforth.s 			page 12


 499 0170 42F804ED 		_NEST 
 500 0174 00F0B8FA 		BL TIMER 
 501 0178 00F092F8 		BL STORE 
 502              	PAUSE_LOOP:
 503 017c 00F0B4FA 		BL TIMER 
 504 0180 00F098F8 		BL AT 
 505 0184 00F070F8 		BL QBRAN 
 506 0188 94010000 		.word PAUSE_EXIT 
 507 018c 00F078F8 		BL BRAN 
 508 0190 7C010000 		.word PAUSE_LOOP 
 509              	PAUSE_EXIT: 		
 510 0194 52F804EB 		_UNNEST 
 510      7047
 511              	
 512              	//  ULED ( T|F -- )
 513              	// control user LED, -1 ON, 0 OFF  
 514 019a 6A010000 		.word _PAUSE 
 515 019e 04       	_ULED: .byte 4
 516 019f 554C4544 		.ascii "ULED"
 517 01a3 00       		.p2align 2
 518              		.type ULED, %function 
 519              	ULED:
 520 01a4 4FF40056 		mov r6,#(1<<LED_PIN)
 521 01a8 4FF48054 		mov r4,#LED_GPIO&0xffff
 522 01ac C4F20104 		movt r4,#LED_GPIO>>16
 523 01b0 2800     		movs r0,r5 
 524 01b2 51F8045B 		_POP
 525 01b6 01D0     		beq ULED_OFF 
 526 01b8 6661     		str r6,[r4,#GPIO_BRR]
 527 01ba 7047     		_NEXT 
 528              	ULED_OFF:
 529 01bc 2661     		str r6,[r4,#GPIO_BSRR]
 530 01be 7047     		_NEXT 
 531              		
 532              	//    ?RX	 ( -- c T | F )
 533              	// 	Return input character and true, or a false if no input.
 534 01c0 9E010000 		.word	_ULED-MAPOFFSET
 535 01c4 04       	_QRX:	.byte   4
 536 01c5 3F4B4559 		.ascii "?KEY"
 537 01c9 0000BF   		.p2align 2 
 538              	QKEY:
 539              	QRX: 
 540 01cc 41F8045D 		_PUSH
 541 01d0 4FF46054 		mov r4,#UART&0xFFFF
 542 01d4 C4F20104 		movt r4,#UART>>16
 543 01d8 2688     		ldrh	r6, [r4, #USART_SR]
 544 01da 16F02006 		ands	r6, #0x20		//  RXE
 545 01de 05D0     		BEQ	QRX1
 546 01e0 6568     	 	LDR	R5, [R4, #USART_DR]
 547 01e2 41F8045D 		_PUSH
 548 01e6 18BF     	    IT NE 
 549 01e8 6FF00005 		MVNNE	R5,#0
 550              	QRX1:
 551 01ec 08BF     		IT EQ 
 552 01ee 0025     	    MOVEQ	R5,#0
 553 01f0 7047     		_NEXT
 554 01f2 00BF     		.p2align 2 
ARM GAS  stm32eforth.s 			page 13


 555              	
 556              	//    TX!	 ( c -- )
 557              	// 	Send character c to the output device.
 558              	
 559 01f4 C4010000 		.word	_QRX-MAPOFFSET
 560 01f8 04       	_TXSTO:	.byte 4
 561 01f9 454D4954 		.ascii "EMIT"
 562 01fd 0000BF   		.p2align 2 	
 563              	TXSTO:
 564              	EMIT:
 565              	TECHO:
 566 0200 4FF46054 		mov r4,#UART&0xFFFF
 567 0204 C4F20104 		movt r4,#UART>>16
 568              	TX1:
 569 0208 2688     		ldrh	r6, [r4, #USART_SR]	
 570 020a 16F08006 		ands	r6, #0x80		//  TXE bit 
 571 020e FBD0     		beq	TX1
 572 0210 A580     		strh	r5, [r4, #USART_DR]	
 573 0212 51F8045B 		_POP
 574 0216 7047     		_NEXT
 575              	
 576              	
 577              		
 578              	// **************************************************************************
 579              	//  The kernel
 580              	
 581              	//    NOP	( -- )
 582              	// 	do nothing.
 583              	
 584 0218 F8010000 		.word	_TXSTO-MAPOFFSET
 585 021c 03       	_NOP:	.byte   3
 586 021d 4E4F50   		.ascii "NOP"
 587              		.p2align 2 	
 588              	NOP:
 589 0220 7047     		_NEXT
 590              	 
 591              	
 592              	//    doLIT	( -- w )
 593              	// 	Push an inline literal.
 594              	
 595              	// 	.word	_NOP-MAPOFFSET
 596              	// _LIT	.byte   COMPO+5
 597              	// 	.ascii "doLIT"
 598              	// 	.p2align 2 	
 599              	DOLIT:
 600 0222 41F8045D 		_PUSH				//  store R5 on data stack
 601 0226 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 602 022a 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 603 022e 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 604 0232 7047     		_NEXT
 605              	
 606              	//    EXECUTE	( ca -- )
 607              	// 	Execute the word at ca.
 608              	
 609 0234 1C020000 		.word	_NOP-MAPOFFSET
 610 0238 07       	_EXECU:	.byte   7
 611 0239 45584543 		.ascii "EXECUTE"
ARM GAS  stm32eforth.s 			page 14


 611      555445
 612              		.p2align 2 	
 613              	EXECU:
 614 0240 45F00104 		ORR	R4,R5,#1		//  b0=1 
 615 0244 51F8045B 		_POP
 616 0248 2047     		BX	R4
 617              	
 618              	//    next	( -- ) counter on R:
 619              	// 	Run time code for the single index loop.
 620              	// 	: next ( -- ) \ hilevel model
 621              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 622              	
 623              	// 	.word	_EXECU-MAPOFFSET
 624              	// _DONXT	.byte   COMPO+4
 625              	// 	.ascii "next"
 626              	// 	.p2align 2 	
 627              	DONXT:
 628 024a 1468     		LDR	R4,[R2]   // ( -- u )  
 629 024c 24B9     		CBNZ R4,NEXT1 
 630              		/* loop done */
 631 024e 02F10402 		ADD	R2,R2,#4 // drop counter 
 632 0252 0EF1040E 		ADD	LR,LR,#4 // skip after loop address 
 633 0256 7047     		_NEXT
 634              	NEXT1:
 635              		/* decrement loop counter */
 636 0258 A4F10104 		SUB	R4,R4,#1
 637 025c 1460     		STR	R4,[R2]
 638 025e 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 639 0262 4EF0010E 		ORR	LR,LR,#1 // begining of loop
 640 0266 7047     		_NEXT
 641              	
 642              	//    ?branch	( f -- )
 643              	// 	Branch if flag is zero.
 644              	
 645              	// 	.word	_DONXT-MAPOFFSET
 646              	// _QBRAN	.byte   COMPO+7
 647              	// 	.ascii "?branch"
 648              	// 	.p2align 2 	
 649              	QBRAN:
 650 0268 2C00     		MOVS	R4,R5
 651 026a 51F8045B 		_POP
 652 026e 04D1     		BNE	QBRAN1
 653 0270 5EF801EC 		LDR	LR,[LR,#-1]
 654 0274 4EF0010E 		ORR LR,LR,#1
 655 0278 7047     		_NEXT
 656              	QBRAN1:
 657 027a 0EF1040E 	 	ADD	LR,LR,#4
 658 027e 7047     		_NEXT
 659              	
 660              	//    branch	( -- )
 661              	// 	Branch to an inline address.
 662              	
 663              	// 	.word	_QBRAN-MAPOFFSET
 664              	// _BRAN	.byte   COMPO+6
 665              	// 	.ascii "branch"
 666              	// 	.p2align 2 	
 667              	BRAN:
ARM GAS  stm32eforth.s 			page 15


 668 0280 5EF801EC 		LDR	LR,[LR,#-1]
 669 0284 4EF0010E 		ORR	LR,LR,#1
 670 0288 7047     		_NEXT
 671              	
 672              	//    EXIT	(  -- )
 673              	// 	Exit the currently executing command.
 674              	
 675 028a 38020000 		.word	_EXECU-MAPOFFSET
 676 028e 04       	_EXIT:	.byte   4
 677 028f 45584954 		.ascii "EXIT"
 678 0293 00       		.p2align 2 	
 679              	EXIT:
 680 0294 52F804EB 		_UNNEST
 680      7047
 681              	
 682              	//    !	   ( w a -- )
 683              	// 	Pop the data stack to memory.
 684              	
 685 029a 8E020000 		.word	_EXIT-MAPOFFSET
 686 029e 01       	_STORE:	.byte   1
 687 029f 21       		.ascii "!"
 688              		.p2align 2 	
 689              	STORE:
 690 02a0 51F8044B 		LDR	R4,[R1],#4
 691 02a4 2C60     		STR	R4,[R5]
 692 02a6 51F8045B 		_POP
 693 02aa 7047     		_NEXT
 694              	
 695              	//    @	   ( a -- w )
 696              	// 	Push memory location to the data stack.
 697              	
 698 02ac 9E020000 		.word	_STORE-MAPOFFSET
 699 02b0 01       	_AT:	.byte   1
 700 02b1 40       		.ascii "@"
 701 02b2 00BF     		.p2align 2 	
 702              	AT:
 703 02b4 2D68     		LDR	R5,[R5]
 704 02b6 7047     		_NEXT
 705              	
 706              	//    C!	  ( c b -- )
 707              	// 	Pop the data stack to byte memory.
 708              	
 709 02b8 B0020000 		.word	_AT-MAPOFFSET
 710 02bc 02       	_CSTOR:	.byte   2
 711 02bd 4321     		.ascii "C!"
 712 02bf 00       		.p2align 2 	
 713              	CSTOR:
 714 02c0 51F8044B 		LDR	R4,[R1],#4
 715 02c4 2C70     		STRB	R4,[R5]
 716 02c6 51F8045B 		_POP
 717 02ca 7047     		_NEXT
 718              	
 719              	//    C@	  ( b -- c )
 720              	// 	Push byte memory location to the data stack.
 721              	
 722 02cc BC020000 		.word	_CSTOR-MAPOFFSET
 723 02d0 02       	_CAT:	.byte   2
ARM GAS  stm32eforth.s 			page 16


 724 02d1 4340     		.ascii "C@"
 725 02d3 00       		.p2align 2 	
 726              	CAT:
 727 02d4 2D78     		LDRB	R5,[R5]
 728 02d6 7047     		_NEXT
 729              	
 730              	//    R>	  ( -- w )
 731              	// 	Pop the return stack to the data stack.
 732              	
 733 02d8 D0020000 		.word	_CAT-MAPOFFSET
 734 02dc 02       	_RFROM:	.byte   2
 735 02dd 523E     		.ascii "R>"
 736 02df 00       		.p2align 2 	
 737              	RFROM:
 738 02e0 41F8045D 		_PUSH
 739 02e4 52F8045B 		LDR	R5,[R2],#4
 740 02e8 7047     		_NEXT
 741              	
 742              	//    R@	  ( -- w )
 743              	// 	Copy top of return stack to the data stack.
 744              	
 745 02ea DC020000 		.word	_RFROM-MAPOFFSET
 746 02ee 02       	_RAT:	.byte   2
 747 02ef 5240     		.ascii "R@"
 748 02f1 0000BF   		.p2align 2 	
 749              	RAT:
 750 02f4 41F8045D 		_PUSH
 751 02f8 1568     		LDR	R5,[R2]
 752 02fa 7047     		_NEXT
 753              	
 754              	//    >R	  ( w -- )
 755              	// 	Push the data stack to the return stack.
 756              	
 757 02fc EE020000 		.word	_RAT-MAPOFFSET
 758 0300 42       	_TOR:	.byte   COMPO+2
 759 0301 3E52     		.ascii ">R"
 760 0303 00       		.p2align 2 	
 761              	TOR:
 762 0304 42F8045D 		STR	R5,[R2,#-4]!
 763 0308 51F8045B 		_POP
 764 030c 7047     		_NEXT
 765              	
 766              	//    SP@	 ( -- a )
 767              	// 	Push the current data stack pointer.
 768              	
 769 030e 00030000 		.word	_TOR-MAPOFFSET
 770 0312 03       	_SPAT:	.byte   3
 771 0313 535040   		.ascii "SP@"
 772 0316 00BF     		.p2align 2 	
 773              	SPAT:
 774 0318 41F8045D 		_PUSH
 775 031c 0D46     		MOV	R5,R1
 776 031e 7047     		_NEXT
 777              	
 778              	//    DROP	( w -- )
 779              	// 	Discard top stack item.
 780              	
ARM GAS  stm32eforth.s 			page 17


 781 0320 12030000 		.word	_SPAT-MAPOFFSET
 782 0324 04       	_DROP:	.byte   4
 783 0325 44524F50 		.ascii "DROP"
 784 0329 0000BF   		.p2align 2 	
 785              	DROP:
 786 032c 51F8045B 		_POP
 787 0330 7047     		_NEXT
 788              	
 789              	//    DUP	 ( w -- w w )
 790              	// 	Duplicate the top stack item.
 791              	
 792 0332 24030000 		.word	_DROP-MAPOFFSET
 793 0336 03       	_DUPP:	.byte   3
 794 0337 445550   		.ascii "DUP"
 795 033a 00BF     		.p2align 2 	
 796              	DUPP:
 797 033c 41F8045D 		_PUSH
 798 0340 7047     		_NEXT
 799              	
 800              	//    SWAP	( w1 w2 -- w2 w1 )
 801              	// 	Exchange top two stack items.
 802              	
 803 0342 36030000 		.word	_DUPP-MAPOFFSET
 804 0346 04       	_SWAP:	.byte   4
 805 0347 53574150 		.ascii "SWAP"
 806 034b 00       		.p2align 2 	
 807              	SWAP:
 808 034c 0C68     		LDR	R4,[R1]
 809 034e 0D60     		STR	R5,[R1]
 810 0350 2546     		MOV	R5,R4
 811 0352 7047     		_NEXT
 812              	
 813              	//    OVER	( w1 w2 -- w1 w2 w1 )
 814              	// 	Copy second stack item to top.
 815              	
 816 0354 46030000 		.word	_SWAP-MAPOFFSET
 817 0358 04       	_OVER:	.byte   4
 818 0359 4F564552 		.ascii "OVER"
 819 035d 0000BF   		.p2align 2 	
 820              	OVER:
 821 0360 41F8045D 		_PUSH
 822 0364 4D68     		LDR	R5,[R1,#4]
 823 0366 7047     		_NEXT
 824              	
 825              	//    0<	  ( n -- t )
 826              	// 	Return true if n is negative.
 827              	
 828 0368 58030000 		.word	_OVER-MAPOFFSET
 829 036c 02       	_ZLESS:	.byte   2
 830 036d 303C     		.ascii "0<"
 831 036f 00       		.p2align 2 	
 832              	ZLESS:
 833 0370 4FF00004 		MOV	R4,#0
 834 0374 04EB2505 		ADD	R5,R4,R5,ASR #32
 835 0378 7047     		_NEXT
 836              	
 837              	//    AND	 ( w w -- w )
ARM GAS  stm32eforth.s 			page 18


 838              	// 	Bitwise AND.
 839              	
 840 037a 6C030000 		.word	_ZLESS-MAPOFFSET
 841 037e 03       	_ANDD:	.byte   3
 842 037f 414E44   		.ascii "AND"
 843 0382 00BF     		.p2align 2 	
 844              	ANDD:
 845 0384 51F8044B 		LDR	R4,[R1],#4
 846 0388 05EA0405 		AND	R5,R5,R4
 847 038c 7047     		_NEXT
 848              	
 849              	//    OR	  ( w w -- w )
 850              	// 	Bitwise inclusive OR.
 851              	
 852 038e 7E030000 		.word	_ANDD-MAPOFFSET
 853 0392 02       	_ORR:	.byte   2
 854 0393 4F52     		.ascii "OR"
 855 0395 0000BF   		.p2align 2 	
 856              	ORR:
 857 0398 51F8044B 		LDR	R4,[R1],#4
 858 039c 45EA0405 		ORR	R5,R5,R4
 859 03a0 7047     		_NEXT
 860              	
 861              	//    XOR	 ( w w -- w )
 862              	// 	Bitwise exclusive OR.
 863              	
 864 03a2 92030000 		.word	_ORR-MAPOFFSET
 865 03a6 03       	_XORR:	.byte   3
 866 03a7 584F52   		.ascii "XOR"
 867 03aa 00BF     		.p2align 2 	
 868              	XORR:
 869 03ac 51F8044B 		LDR	R4,[R1],#4
 870 03b0 85EA0405 		EOR	R5,R5,R4
 871 03b4 7047     		_NEXT
 872              	
 873              	//    UM+	 ( w w -- w cy )
 874              	// 	Add two numbers, return the sum and carry flag.
 875              	
 876 03b6 A6030000 		.word	_XORR-MAPOFFSET
 877 03ba 03       	_UPLUS:	.byte   3
 878 03bb 554D2B   		.ascii "UM+"
 879 03be 00BF     		.p2align 2 	
 880              	UPLUS:
 881 03c0 0C68     		LDR	R4,[R1]
 882 03c2 6419     		ADDS	R4,R4,R5
 883 03c4 4FF00005 		MOV	R5,#0
 884 03c8 45F10005 		ADC	R5,R5,#0
 885 03cc 0C60     		STR	R4,[R1]
 886 03ce 7047     		_NEXT
 887              	
 888              	//    RSHIFT	 ( w # -- w )
 889              	// 	arithmetic Right shift # bits.
 890              	
 891 03d0 BA030000 		.word	_UPLUS-MAPOFFSET
 892 03d4 06       	_RSHIFT:	.byte   6
 893 03d5 52534849 		.ascii "RSHIFT"
 893      4654
ARM GAS  stm32eforth.s 			page 19


 894 03db 00       		.p2align 2 	
 895              	RSHIFT:
 896 03dc 51F8044B 		LDR	R4,[R1],#4
 897 03e0 44FA05F5 		MOV	R5,R4,ASR R5
 898 03e4 7047     		_NEXT
 899              	
 900              	//    LSHIFT	 ( w # -- w )
 901              	// 	Right shift # bits.
 902              	
 903 03e6 D4030000 		.word	_RSHIFT-MAPOFFSET
 904 03ea 06       	_LSHIFT:	.byte   6
 905 03eb 4C534849 		.ascii "LSHIFT"
 905      4654
 906 03f1 0000BF   		.p2align 2 	
 907              	LSHIFT:
 908 03f4 51F8044B 		LDR	R4,[R1],#4
 909 03f8 04FA05F5 		MOV	R5,R4,LSL R5
 910 03fc 7047     		_NEXT
 911              	
 912              	//    +	 ( w w -- w )
 913              	// 	Add.
 914              	
 915 03fe EA030000 		.word	_LSHIFT-MAPOFFSET
 916 0402 01       	_PLUS:	.byte   1
 917 0403 2B       		.ascii "+"
 918              		.p2align 2 	
 919              	PLUS:
 920 0404 51F8044B 		LDR	R4,[R1],#4
 921 0408 2544     		ADD	R5,R5,R4
 922 040a 7047     		_NEXT
 923              	
 924              	//    -	 ( w w -- w )
 925              	// 	Subtract.
 926              	
 927 040c 02040000 		.word	_PLUS-MAPOFFSET
 928 0410 01       	_SUBB:	.byte   1
 929 0411 2D       		.ascii "-"
 930 0412 00BF     		.p2align 2 	
 931              	SUBB:
 932 0414 51F8044B 		LDR	R4,[R1],#4
 933 0418 C5EB0405 		RSB	R5,R5,R4
 934 041c 7047     		_NEXT
 935              	
 936              	//    *	 ( w w -- w )
 937              	// 	Multiply.
 938              	
 939 041e 10040000 		.word	_SUBB-MAPOFFSET
 940 0422 01       	_STAR:	.byte   1
 941 0423 2A       		.ascii "*"
 942              		.p2align 2 	
 943              	STAR:
 944 0424 51F8044B 		LDR	R4,[R1],#4
 945 0428 04FB05F5 		MUL	R5,R4,R5
 946 042c 7047     		_NEXT
 947              	
 948              	//    UM*	 ( w w -- ud )
 949              	// 	Unsigned multiply.
ARM GAS  stm32eforth.s 			page 20


 950              	
 951 042e 22040000 		.word	_STAR-MAPOFFSET
 952 0432 03       	_UMSTA:	.byte   3
 953 0433 554D2A   		.ascii "UM*"
 954 0436 00BF     		.p2align 2 	
 955              	UMSTA:
 956 0438 0C68     		LDR	R4,[R1]
 957 043a A5FB0467 		UMULL	R6,R7,R5,R4
 958 043e 0E60     		STR	R6,[R1]
 959 0440 3D46     		MOV	R5,R7
 960 0442 7047     		_NEXT
 961              	
 962              	//    M*	 ( w w -- d )
 963              	// 	signed multiply.
 964              	
 965 0444 32040000 		.word	_UMSTA-MAPOFFSET
 966 0448 02       	_MSTAR:	.byte   2
 967 0449 4D2A     		.ascii "M*"
 968 044b 00       		.p2align 2 	
 969              	MSTAR:
 970 044c 0C68     		LDR	R4,[R1]
 971 044e 85FB0467 		SMULL	R6,R7,R5,R4
 972 0452 0E60     		STR	R6,[R1]
 973 0454 3D46     		MOV	R5,R7
 974 0456 7047     		_NEXT
 975              	
 976              	//    1+	 ( w -- w+1 )
 977              	// 	Add 1.
 978              	
 979 0458 48040000 		.word	_MSTAR-MAPOFFSET
 980 045c 02       	_ONEP:	.byte   2
 981 045d 312B     		.ascii "1+"
 982 045f 00       		.p2align 2 	
 983              	ONEP:
 984 0460 05F10105 		ADD	R5,R5,#1
 985 0464 7047     		_NEXT
 986              	
 987              	//    1-	 ( w -- w-1 )
 988              	// 	Subtract 1.
 989              	
 990 0466 5C040000 		.word	_ONEP-MAPOFFSET
 991 046a 02       	_ONEM:	.byte   2
 992 046b 312D     		.ascii "1-"
 993 046d 0000BF   		.p2align 2 	
 994              	ONEM:
 995 0470 A5F10105 		SUB	R5,R5,#1
 996 0474 7047     		_NEXT
 997              	
 998              	//    2+	 ( w -- w+2 )
 999              	// 	Add 1.
 1000              	
 1001 0476 6A040000 		.word	_ONEM-MAPOFFSET
 1002 047a 02       	_TWOP:	.byte   2
 1003 047b 322B     		.ascii "2+"
 1004 047d 0000BF   		.p2align 2 	
 1005              	TWOP:
 1006 0480 05F10205 		ADD	R5,R5,#2
ARM GAS  stm32eforth.s 			page 21


 1007 0484 7047     		_NEXT
 1008              	
 1009              	//    2-	 ( w -- w-2 )
 1010              	// 	Subtract 2.
 1011              	
 1012 0486 7A040000 		.word	_TWOP-MAPOFFSET
 1013 048a 02       	_TWOM:	.byte   2
 1014 048b 322D     		.ascii "2-"
 1015 048d 0000BF   		.p2align 2 	
 1016              	TWOM:
 1017 0490 A5F10205 		SUB	R5,R5,#2
 1018 0494 7047     		_NEXT
 1019              	
 1020              	//    CELL+	( w -- w+4 )
 1021              	// 	Add CELLL.
 1022              	
 1023 0496 8A040000 		.word	_TWOM-MAPOFFSET
 1024 049a 05       	_CELLP:	.byte   5
 1025 049b 43454C4C 		.ascii "CELL+"
 1025      2B
 1026              		.p2align 2 	
 1027              	CELLP:
 1028 04a0 05F10405 		ADD	R5,R5,#CELLL
 1029 04a4 7047     		_NEXT
 1030              	
 1031              	//    CELL-	( w -- w-4 )
 1032              	// 	Subtract CELLL.
 1033              	
 1034 04a6 9A040000 		.word	_CELLP-MAPOFFSET
 1035 04aa 05       	_CELLM:	.byte   5
 1036 04ab 43454C4C 		.ascii "CELL-"
 1036      2D
 1037              		.p2align 2 	
 1038              	CELLM:
 1039 04b0 A5F10405 		SUB	R5,R5,#CELLL
 1040 04b4 7047     		_NEXT
 1041              	 
 1042              	//    BL	( -- 32 )
 1043              	// 	Blank (ASCII space).
 1044              	
 1045 04b6 AA040000 		.word	_CELLM-MAPOFFSET
 1046 04ba 02       	_BLANK:	.byte   2
 1047 04bb 424C     		.ascii "BL"
 1048 04bd 0000BF   		.p2align 2 	
 1049              	BLANK:
 1050 04c0 41F8045D 		_PUSH
 1051 04c4 4FF02005 		MOV	R5,#32
 1052 04c8 7047     		_NEXT
 1053              	
 1054              	//    CELLS	( w -- w*4 )
 1055              	// 	Multiply 4.
 1056              	
 1057 04ca BA040000 		.word	_BLANK-MAPOFFSET
 1058 04ce 05       	_CELLS:	.byte   5
 1059 04cf 43454C4C 		.ascii "CELLS"
 1059      53
 1060              		.p2align 2 	
ARM GAS  stm32eforth.s 			page 22


 1061              	CELLS:
 1062 04d4 4FEA8505 		MOV	R5,R5,LSL#2
 1063 04d8 7047     		_NEXT
 1064              	
 1065              	//    CELL/	( w -- w/4 )
 1066              	// 	Divide by 4.
 1067              	
 1068 04da CE040000 		.word	_CELLS-MAPOFFSET
 1069 04de 05       	_CELLSL:	.byte   5
 1070 04df 43454C4C 		.ascii "CELL/"
 1070      2F
 1071              		.p2align 2 	
 1072              	CELLSL:
 1073 04e4 4FEAA505 		MOV	R5,R5,ASR#2
 1074 04e8 7047     		_NEXT
 1075              	
 1076              	//    2*	( w -- w*2 )
 1077              	// 	Multiply 2.
 1078              	
 1079 04ea DE040000 		.word	_CELLSL-MAPOFFSET
 1080 04ee 02       	_TWOST:	.byte   2
 1081 04ef 322A     		.ascii "2*"
 1082 04f1 0000BF   		.p2align 2 	
 1083              	TWOST:
 1084 04f4 4FEA4505 		MOV	R5,R5,LSL#1
 1085 04f8 7047     		_NEXT
 1086              	
 1087              	//    2/	( w -- w/2 )
 1088              	// 	Divide by 2.
 1089              	
 1090 04fa EE040000 		.word	_TWOST-MAPOFFSET
 1091 04fe 02       	_TWOSL:	.byte   2
 1092 04ff 322F     		.ascii "2/"
 1093 0501 0000BF   		.p2align 2 	
 1094              	TWOSL:
 1095 0504 4FEA6505 		MOV	R5,R5,ASR#1
 1096 0508 7047     		_NEXT
 1097              	
 1098              	//    ?DUP	( w -- w w | 0 )
 1099              	// 	Conditional duplicate.
 1100              	
 1101 050a FE040000 		.word	_TWOSL-MAPOFFSET
 1102 050e 04       	_QDUP:	.byte   4
 1103 050f 3F445550 		.ascii "?DUP"
 1104 0513 00       		.p2align 2 	
 1105              	QDUP:
 1106 0514 2C00     		MOVS	R4,R5
 1107 0516 18BF     		IT NE 
 1108 0518 41F8045D 	    STRNE	R5,[R1,#-4]!
 1109 051c 7047     		_NEXT
 1110              	
 1111              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1112              	// 	Rotate top 3 items.
 1113              	
 1114 051e 0E050000 		.word	_QDUP-MAPOFFSET
 1115 0522 03       	_ROT:	.byte   3
 1116 0523 524F54   		.ascii "ROT"
ARM GAS  stm32eforth.s 			page 23


 1117 0526 00BF     		.p2align 2 	
 1118              	ROT:
 1119 0528 0C68     		LDR	R4,[R1]  // r4=w2 
 1120 052a 0D60     		STR	R5,[R1]  // w3 replace w2 
 1121 052c 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1122 052e 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1123 0530 7047     		_NEXT
 1124              	
 1125              	//    2DROP	( w1 w2 -- )
 1126              	// 	Drop top 2 items.
 1127              	
 1128 0532 22050000 		.word	_ROT-MAPOFFSET
 1129 0536 05       	_DDROP:	.byte   5
 1130 0537 3244524F 		.ascii "2DROP"
 1130      50
 1131              		.p2align 2 	
 1132              	DDROP:
 1133 053c 51F8045B 		_POP
 1134 0540 51F8045B 		_POP
 1135 0544 7047     		_NEXT
 1136              	
 1137              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1138              	// 	Duplicate top 2 items.
 1139              	
 1140 0546 36050000 		.word	_DDROP-MAPOFFSET
 1141 054a 04       	_DDUP:	.byte   4
 1142 054b 32445550 		.ascii "2DUP"
 1143 054f 00       		.p2align 2 	
 1144              	DDUP:
 1145 0550 0C68     		LDR	R4,[R1] // r4=w1
 1146 0552 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1147 0556 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1148 055a 7047     		_NEXT
 1149              	
 1150              	//    D+	( d1 d2 -- d3 )
 1151              	// 	Add top 2 double numbers.
 1152              	
 1153 055c 4A050000 		.word	_DDUP-MAPOFFSET
 1154 0560 02       	_DPLUS:	.byte   2
 1155 0561 442B     		.ascii "D+"
 1156 0563 00       		.p2align 2 	
 1157              	DPLUS:
 1158 0564 51F8044B 		LDR	R4,[R1],#4
 1159 0568 51F8046B 		LDR	R6,[R1],#4
 1160 056c 0F68     		LDR	R7,[R1]
 1161 056e E419     		ADDS	R4,R4,R7
 1162 0570 0C60     		STR	R4,[R1]
 1163 0572 45EB0605 		ADC	R5,R5,R6
 1164 0576 7047     		_NEXT
 1165              	
 1166              	//    NOT	 ( w -- !w )
 1167              	// 	1"s complement.
 1168              	
 1169 0578 60050000 		.word	_DPLUS-MAPOFFSET
 1170 057c 03       	_INVER:	.byte   3
 1171 057d 4E4F54   		.ascii "NOT"
 1172              		.p2align 2 	
ARM GAS  stm32eforth.s 			page 24


 1173              	INVER:
 1174 0580 6FEA0505 		MVN	R5,R5
 1175 0584 7047     		_NEXT
 1176              	
 1177              	//    NEGATE	( w -- -w )
 1178              	// 	2's complement.
 1179              	
 1180 0586 7C050000 		.word	_INVER-MAPOFFSET
 1181 058a 06       	_NEGAT:	.byte   6
 1182 058b 4E454741 		.ascii "NEGATE"
 1182      5445
 1183 0591 0000BF   		.p2align 2 	
 1184              	NEGAT:
 1185 0594 C5F10005 		RSB	R5,R5,#0
 1186 0598 7047     		_NEXT
 1187              	
 1188              	//    ABS	 ( w -- |w| )
 1189              	// 	Absolute.
 1190              	
 1191 059a 8A050000 		.word	_NEGAT-MAPOFFSET
 1192 059e 03       	_ABSS:	.byte   3
 1193 059f 414253   		.ascii "ABS"
 1194 05a2 00BF     		.p2align 2 	
 1195              	ABSS:
 1196 05a4 15F0004F 		TST	R5,#0x80000000
 1197 05a8 18BF     		IT NE
 1198 05aa 6D42     	    RSBNE   R5,R5,#0
 1199 05ac 7047     		_NEXT
 1200              	
 1201              	//    =	 ( w w -- t )
 1202              	// 	Equal?
 1203              	
 1204 05ae 9E050000 		.word	_ABSS-MAPOFFSET
 1205 05b2 01       	_EQUAL:	.byte   1
 1206 05b3 3D       		.ascii "="
 1207              		.p2align 2 	
 1208              	EQUAL:
 1209 05b4 51F8044B 		LDR	R4,[R1],#4
 1210 05b8 A542     		CMP	R5,R4
 1211 05ba 0CBF     		ITE EQ 
 1212 05bc 6FF00005 	    MVNEQ	R5,#0
 1213 05c0 0025     		MOVNE	R5,#0
 1214 05c2 7047     		_NEXT
 1215              	
 1216              	//    U<	 ( w w -- t )
 1217              	// 	Unsigned equal?
 1218              	
 1219 05c4 B2050000 		.word	_EQUAL-MAPOFFSET
 1220 05c8 02       	_ULESS:	.byte   2
 1221 05c9 553C     		.ascii "U<"
 1222 05cb 00       		.p2align 2 	
 1223              	ULESS:
 1224 05cc 51F8044B 		LDR	R4,[R1],#4
 1225 05d0 AC42     		CMP	R4,R5
 1226 05d2 34BF     		ITE CC 
 1227 05d4 6FF00005 		MVNCC	R5,#0
 1228 05d8 0025     		MOVCS	R5,#0
ARM GAS  stm32eforth.s 			page 25


 1229 05da 7047     		_NEXT
 1230              	
 1231              	//    <	( w w -- t )
 1232              	// 	Less?
 1233              	
 1234 05dc C8050000 		.word	_ULESS-MAPOFFSET
 1235 05e0 01       	_LESS:	.byte   1
 1236 05e1 3C       		.ascii "<"
 1237 05e2 00BF     		.p2align 2 	
 1238              	LESS:
 1239 05e4 51F8044B 		LDR	R4,[R1],#4
 1240 05e8 AC42     		CMP	R4,R5
 1241 05ea B4BF     	    ITE LT
 1242 05ec 6FF00005 		MVNLT	R5,#0
 1243 05f0 0025     		MOVGE	R5,#0
 1244 05f2 7047     		_NEXT
 1245              	
 1246              	//    >	( w w -- t )
 1247              	// 	greater?
 1248              	
 1249 05f4 E0050000 		.word	_LESS-MAPOFFSET
 1250 05f8 01       	_GREAT:	.byte   1
 1251 05f9 3E       		.ascii ">"
 1252 05fa 00BF     		.p2align 2 	
 1253              	GREAT:
 1254 05fc 51F8044B 		LDR	R4,[R1],#4
 1255 0600 AC42     		CMP	R4,R5
 1256 0602 CCBF     		ITE GT
 1257 0604 6FF00005 	    MVNGT	R5,#0
 1258 0608 0025     		MOVLE	R5,#0
 1259 060a 7047     		_NEXT
 1260              	
 1261              	//    MAX	 ( w w -- max )
 1262              	// 	Leave maximum.
 1263              	
 1264 060c F8050000 		.word	_GREAT-MAPOFFSET
 1265 0610 03       	_MAX:	.byte   3
 1266 0611 4D4158   		.ascii "MAX"
 1267              		.p2align 2 	
 1268              	MAX:
 1269 0614 51F8044B 		LDR	R4,[R1],#4
 1270 0618 AC42     		CMP	R4,R5
 1271 061a C8BF     		IT GT 
 1272 061c 2546     		MOVGT	R5,R4
 1273 061e 7047     		_NEXT
 1274              	
 1275              	//    MIN	 ( w w -- min )
 1276              	// 	Leave minimum.
 1277              	
 1278 0620 10060000 		.word	_MAX-MAPOFFSET
 1279 0624 03       	_MIN:	.byte   3
 1280 0625 4D494E   		.ascii "MIN"
 1281              		.p2align 2 	
 1282              	MIN:
 1283 0628 51F8044B 		LDR	R4,[R1],#4
 1284 062c AC42     		CMP	R4,R5
 1285 062e B8BF     		IT LT
ARM GAS  stm32eforth.s 			page 26


 1286 0630 2546     		MOVLT	R5,R4
 1287 0632 7047     		_NEXT
 1288              	
 1289              	//    +!	 ( w a -- )
 1290              	// 	Add to memory.
 1291              	
 1292 0634 24060000 		.word	_MIN-MAPOFFSET
 1293 0638 02       	_PSTOR:	.byte   2
 1294 0639 2B21     		.ascii "+!"
 1295 063b 00       		.p2align 2 	
 1296              	PSTOR:
 1297 063c 51F8044B 		LDR	R4,[R1],#4
 1298 0640 2E68     		LDR	R6,[R5]
 1299 0642 2644     		ADD	R6,R6,R4
 1300 0644 2E60     		STR	R6,[R5]
 1301 0646 51F8045B 		_POP
 1302 064a 7047     		_NEXT
 1303              	
 1304              	//    2!	 ( d a -- )
 1305              	// 	Store double number.
 1306              	
 1307 064c 38060000 		.word	_PSTOR-MAPOFFSET
 1308 0650 02       	_DSTOR:	.byte   2
 1309 0651 3221     		.ascii "2!"
 1310 0653 00       		.p2align 2 	
 1311              	DSTOR:
 1312 0654 51F8044B 		LDR	R4,[R1],#4
 1313 0658 51F8046B 		LDR	R6,[R1],#4
 1314 065c 45F8044B 		STR	R4,[R5],#4
 1315 0660 2E60     		STR	R6,[R5]
 1316 0662 51F8045B 		_POP
 1317 0666 7047     		_NEXT
 1318              	
 1319              	//    2@	 ( a -- d )
 1320              	// 	Fetch double number.
 1321              	
 1322 0668 50060000 		.word	_DSTOR-MAPOFFSET
 1323 066c 02       	_DAT:	.byte   2
 1324 066d 3240     		.ascii "2@"
 1325 066f 00       		.p2align 2 	
 1326              	DAT:
 1327 0670 6C68     		LDR	R4,[R5,#4]
 1328 0672 41F8044D 		STR	R4,[R1,#-4]!
 1329 0676 2D68     		LDR	R5,[R5]
 1330 0678 7047     		_NEXT
 1331              	
 1332              	//    COUNT	( b -- b+1 c )
 1333              	// 	Fetch length of string.
 1334              	
 1335 067a 6C060000 		.word	_DAT-MAPOFFSET
 1336 067e 05       	_COUNT:	.byte   5
 1337 067f 434F554E 		.ascii "COUNT"
 1337      54
 1338              		.p2align 2 	
 1339              	COUNT:
 1340 0684 15F8014B 		LDRB	R4,[R5],#1
 1341 0688 41F8045D 		_PUSH
ARM GAS  stm32eforth.s 			page 27


 1342 068c 2546     		MOV	R5,R4
 1343 068e 7047     		_NEXT
 1344              	
 1345              	//    DNEGATE	( d -- -d )
 1346              	// 	Negate double number.
 1347              	
 1348 0690 7E060000 		.word	_COUNT-MAPOFFSET
 1349 0694 07       	_DNEGA:	.byte   7
 1350 0695 444E4547 		.ascii "DNEGATE"
 1350      415445
 1351              		.p2align 2 	
 1352              	DNEGA:
 1353 069c 0C68     		LDR	R4,[R1]
 1354 069e A6EB0606 		SUB	R6,R6,R6
 1355 06a2 341B     		SUBS R4,R6,R4
 1356 06a4 66EB0505 		SBC	R5,R6,R5
 1357 06a8 0C60     		STR	R4,[R1]
 1358 06aa 7047     		_NEXT
 1359              	
 1360              	// **************************************************************************
 1361              	//  System and user variables
 1362              	
 1363              	//    doVAR	( -- a )
 1364              	// 	Run time routine for VARIABLE and CREATE.
 1365              	
 1366              	// 	.word	_DNEGA-MAPOFFSET
 1367              	// _DOVAR	.byte  COMPO+5
 1368              	// 	.ascii "doVAR"
 1369              	// 	.p2align 2 	
 1370              	DOVAR:
 1371 06ac 41F8045D 		_PUSH
 1372 06b0 AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
 1373 06b4 52F804EB 		_UNNEST
 1373      7047
 1374              	
 1375              	//    doCON	( -- a ) 
 1376              	// 	Run time routine for CONSTANT.
 1377              	
 1378              	// 	.word	_DOVAR-MAPOFFSET
 1379              	// _DOCON	.byte  COMPO+5
 1380              	// 	.ascii "doCON"
 1381              	// 	.p2align 2 	
 1382              	DOCON:
 1383 06ba 41F8045D 		_PUSH
 1384 06be 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1385 06c2 52F804EB 		_UNNEST
 1385      7047
 1386              	
 1387              	/***********************
 1388              	  system variables 
 1389              	***********************/
 1390              	  
 1391              	//  MSEC ( -- a)
 1392              	// return address of milliseconds counter
 1393 06c8 94060000 	  .word _DNEGA-MAPOFFSET 
 1394 06cc 04       	_MSEC: .byte 4
 1395 06cd 4D534543 	  .ascii "MSEC"
ARM GAS  stm32eforth.s 			page 28


 1396 06d1 0000BF   	  .p2align 2 
 1397              	MSEC:
 1398 06d4 41F8045D 	  _PUSH
 1399 06d8 03F10405 	  ADD R5,R3,#TICKS_OFS
 1400 06dc 7047     	  _NEXT 
 1401              	
 1402              	// TIMER ( -- a )
 1403 06de CC060000 	  .word _MSEC-MAPOFFSET
 1404 06e2 05       	_TIMER:  .byte 5
 1405 06e3 54494D45 	  .ascii "TIMER"
 1405      52
 1406              	  .p2align 2 
 1407              	TIMER:
 1408 06e8 41F8045D 	  _PUSH 
 1409 06ec 05F13505 	  ADD R5,53,#TIMER_OFS
 1410 06f0 7047     	  _NEXT
 1411              	
 1412              	//    'BOOT	 ( -- a )
 1413              	// 	Application.
 1414              	
 1415 06f2 E2060000 		.word	_TIMER-MAPOFFSET
 1416 06f6 05       	_TBOOT:	.byte   5
 1417 06f7 27424F4F 		.ascii "'BOOT"
 1417      54
 1418              		.p2align 2 	
 1419              	TBOOT:
 1420 06fc 41F8045D 		_PUSH
 1421 0700 03F10C05 		ADD	R5,R3,#BOOT_OFS 
 1422 0704 7047     		_NEXT
 1423              		
 1424              	//    BASE	( -- a )
 1425              	// 	Storage of the radix base for numeric I/O.
 1426              	
 1427 0706 F6060000 		.word	_TBOOT-MAPOFFSET
 1428 070a 04       	_BASE:	.byte   4
 1429 070b 42415345 		.ascii "BASE"
 1430 070f 00       		.p2align 2 	
 1431              	BASE:
 1432 0710 41F8045D 		_PUSH
 1433 0714 03F11005 		ADD	R5,R3,#BASE_OFS
 1434 0718 7047     		_NEXT
 1435              	
 1436              	//    tmp	 ( -- a )
 1437              	// 	A temporary storage location used in parse and find.
 1438              	
 1439              	// 	.word	_BASE-MAPOFFSET
 1440              	// _TEMP	.byte   COMPO+3
 1441              	// 	.ascii "tmp"
 1442              	// 	.p2align 2 	
 1443              	TEMP:
 1444 071a 41F8045D 		_PUSH
 1445 071e 03F11405 		ADD	R5,R3,#TMP_OFS
 1446 0722 7047     		_NEXT
 1447              	
 1448              	//    SPAN	( -- a )
 1449              	// 	Hold character count received by EXPECT.
 1450              	
ARM GAS  stm32eforth.s 			page 29


 1451 0724 0A070000 		.word	_BASE-MAPOFFSET
 1452 0728 04       	_SPAN:	.byte   4
 1453 0729 5350414E 		.ascii "SPAN"
 1454 072d 0000BF   		.p2align 2 	
 1455              	SPAN:
 1456 0730 41F8045D 		_PUSH
 1457 0734 03F11805 		ADD	R5,R3,#SPAN_OFS
 1458 0738 7047     		_NEXT
 1459              	
 1460              	//    >IN	 ( -- a )
 1461              	// 	Hold the character pointer while parsing input stream.
 1462              	
 1463 073a 28070000 		.word	_SPAN-MAPOFFSET
 1464 073e 03       	_INN:	.byte   3
 1465 073f 3E494E   		.ascii ">IN"
 1466 0742 00BF     		.p2align 2 	
 1467              	INN:
 1468 0744 41F8045D 		_PUSH
 1469 0748 03F11C05 		ADD	R5,R3,#TOIN_OFS
 1470 074c 7047     		_NEXT
 1471              	
 1472              	//    #TIB	( -- a )
 1473              	// 	Hold the current count and address of the terminal input buffer.
 1474              	
 1475 074e 3E070000 		.word	_INN-MAPOFFSET
 1476 0752 04       	_NTIB:	.byte   4
 1477 0753 23544942 		.ascii "#TIB"
 1478 0757 00       		.p2align 2 	
 1479              	NTIB:
 1480 0758 41F8045D 		_PUSH
 1481 075c 03F12005 		ADD	R5,R3,#NTIB_OFS
 1482 0760 7047     		_NEXT
 1483              	
 1484              	//    'EVAL	( -- a )
 1485              	// 	Execution vector of EVAL.
 1486              	
 1487 0762 52070000 		.word	_NTIB-MAPOFFSET
 1488 0766 05       	_TEVAL:	.byte   5
 1489 0767 27455641 		.ascii "'EVAL"
 1489      4C
 1490              		.p2align 2 	
 1491              	TEVAL:
 1492 076c 41F8045D 		_PUSH
 1493 0770 03F12805 		ADD	R5,R3,#EVAL_OFS
 1494 0774 7047     		_NEXT
 1495              	
 1496              	//    HLD	 ( -- a )
 1497              	// 	Hold a pointer in building a numeric output string.
 1498              	
 1499 0776 66070000 		.word	_TEVAL-MAPOFFSET
 1500 077a 03       	_HLD:	.byte   3
 1501 077b 484C44   		.ascii "HLD"
 1502 077e 00BF     		.p2align 2 	
 1503              	HLD:
 1504 0780 41F8045D 		_PUSH
 1505 0784 03F12C05 		ADD	R5,R3,#HLD_OFS
 1506 0788 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 30


 1507              	
 1508              	//    CONTEXT	( -- a )
 1509              	// 	A area to specify vocabulary search order.
 1510              	
 1511 078a 7A070000 		.word	_HLD-MAPOFFSET
 1512 078e 07       	_CNTXT:	.byte   7
 1513 078f 434F4E54 		.ascii "CONTEXT"
 1513      455854
 1514 0796 00BF     		.p2align 2 	
 1515              	CNTXT:
 1516              	CRRNT:
 1517 0798 41F8045D 		_PUSH
 1518 079c 03F13005 		ADD	R5,R3,#CTXT_OFS
 1519 07a0 7047     		_NEXT
 1520              	
 1521              	//    CP	( -- a )
 1522              	// 	Point to top name in RAM vocabulary.
 1523              	
 1524 07a2 8E070000 		.word	_CNTXT-MAPOFFSET
 1525 07a6 02       	_CP:	.byte   2
 1526 07a7 4350     		.ascii "CP"
 1527 07a9 0000BF   		.p2align 2 	
 1528              	CPP:
 1529 07ac 41F8045D 		_PUSH
 1530 07b0 03F13805 		ADD	R5,R3,#RAM_CTOP_OFS
 1531 07b4 7047     		_NEXT
 1532              	
 1533              	//   FCP ( -- a )
 1534              	//  Point ot top of Flash dictionary
 1535 07b6 A6070000 		.word _CP-MAPOFFSET
 1536 07ba 04       	_FCPP: .byte 4 
 1537 07bb 46435050 		.ascii "FCPP"
 1538 07bf 00       		.p2align 2 
 1539              	FCPP: 
 1540 07c0 41F8045D 		_PUSH 
 1541 07c4 03F13405 		ADD R5,R3,#FLSH_CTOP_OFS 
 1542 07c8 7047     		_NEXT 
 1543              	
 1544              	//    LAST	( -- a )
 1545              	// 	Point to the last name in the name dictionary.
 1546              	
 1547 07ca BA070000 		.word	_FCPP-MAPOFFSET
 1548 07ce 04       	_LAST:	.byte   4
 1549 07cf 4C415354 		.ascii "LAST"
 1550 07d3 00       		.p2align 2 	
 1551              	LAST:
 1552 07d4 41F8045D 		_PUSH
 1553 07d8 03F13C05 		ADD	R5,R3,#LASTN_OFS
 1554 07dc 7047     		_NEXT
 1555              	
 1556              	// **************************************************************************
 1557              	//  Common functions
 1558              	
 1559              	//    WITHIN	( u ul uh -- t )
 1560              	// 	Return true if u is within the range of ul and uh.
 1561              	
 1562 07de CE070000 		.word	_LAST-MAPOFFSET
ARM GAS  stm32eforth.s 			page 31


 1563 07e2 06       	_WITHI:	.byte   6
 1564 07e3 57495448 		.ascii "WITHIN"
 1564      494E
 1565 07e9 0000BF   		.p2align 2 	
 1566              	WITHI:
 1567 07ec 42F804ED 		_NEST
 1568 07f0 FFF7B6FD 		BL	OVER
 1569 07f4 FFF70EFE 		BL	SUBB
 1570 07f8 FFF784FD 		BL	TOR
 1571 07fc FFF70AFE 		BL	SUBB
 1572 0800 FFF76EFD 		BL	RFROM
 1573 0804 FFF7E2FE 		BL	ULESS
 1574 0808 52F804EB 		_UNNEST
 1574      7047
 1575              	
 1576              	//  Divide
 1577              	
 1578              	//    UM/MOD	( udl udh u -- ur uq )
 1579              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1580              	
 1581 080e E2070000 		.word	_WITHI-MAPOFFSET
 1582 0812 06       	_UMMOD:	.byte   6
 1583 0813 554D2F4D 		.ascii "UM/MOD"
 1583      4F44
 1584 0819 0000BF   		.p2align 2 	
 1585              	UMMOD:
 1586 081c 4FF00107 		MOV	R7,#1
 1587 0820 51F8044B 		LDR	R4,[R1],#4
 1588 0824 0E68     		LDR	R6,[R1]
 1589              	UMMOD0:
 1590 0826 B619     		ADDS	R6,R6,R6
 1591 0828 6441     		ADCS	R4,R4,R4
 1592 082a 04D3     		BCC	UMMOD1
 1593 082c A4EB0504 		SUB	R4,R4,R5
 1594 0830 06F10106 		ADD	R6,R6,#1
 1595 0834 04E0     		B UMMOD2
 1596              	UMMOD1:
 1597 0836 641B     		SUBS	R4,R4,R5 
 1598 0838 28BF     		IT CS 
 1599 083a 0136     		ADDCS	R6,R6,#1
 1600 083c 00D2     		BCS	UMMOD2
 1601 083e 2C44     		ADD	R4,R4,R5
 1602              	UMMOD2:
 1603 0840 FF19     		ADDS	R7,R7,R7
 1604 0842 F0D3     		BCC	UMMOD0
 1605 0844 3546     		MOV	R5,R6
 1606 0846 0C60     		STR	R4,[R1]
 1607 0848 7047     		_NEXT
 1608              	
 1609              	//    M/MOD	( d n -- r q )
 1610              	// 	Signed floored divide of double by single. Return mod and quotient.
 1611              	
 1612 084a 12080000 		.word	_UMMOD-MAPOFFSET
 1613 084e 05       	_MSMOD:	.byte  5
 1614 084f 4D2F4D4F 		.ascii "M/MOD"
 1614      44
 1615              		.p2align 2 	
ARM GAS  stm32eforth.s 			page 32


 1616              	MSMOD:	
 1617 0854 42F804ED 		_NEST
 1618 0858 FFF770FD 		BL	DUPP
 1619 085c FFF788FD 		BL	ZLESS
 1620 0860 FFF76CFD 		BL	DUPP
 1621 0864 FFF74EFD 		BL	TOR
 1622 0868 FFF7FEFC 		BL	QBRAN
 1623 086c 80080000 		.word	MMOD1-MAPOFFSET
 1624 0870 FFF790FE 		BL	NEGAT
 1625 0874 FFF746FD 		BL	TOR
 1626 0878 FFF710FF 		BL	DNEGA
 1627 087c FFF730FD 		BL	RFROM
 1628              	MMOD1:
 1629 0880 FFF740FD 	  BL	TOR
 1630 0884 FFF75AFD 		BL	DUPP
 1631 0888 FFF772FD 		BL	ZLESS
 1632 088c FFF7ECFC 		BL	QBRAN
 1633 0890 9C080000 		.word	MMOD2-MAPOFFSET
 1634 0894 FFF72EFD 		BL	RAT
 1635 0898 FFF7B4FD 		BL	PLUS
 1636              	MMOD2:
 1637 089c FFF720FD 	  BL	RFROM
 1638 08a0 FFF7BCFF 		BL	UMMOD
 1639 08a4 FFF71CFD 		BL	RFROM
 1640 08a8 FFF7DEFC 		BL	QBRAN
 1641 08ac BC080000 		.word	MMOD3-MAPOFFSET
 1642 08b0 FFF74CFD 		BL	SWAP
 1643 08b4 FFF76EFE 		BL	NEGAT
 1644 08b8 FFF748FD 		BL	SWAP
 1645              	MMOD3:   
 1646 08bc 52F804EB 		_UNNEST
 1646      7047
 1647              	
 1648              	//    /MOD	( n n -- r q )
 1649              	// 	Signed divide. Return mod and quotient.
 1650              	
 1651 08c2 4E080000 		.word	_MSMOD-MAPOFFSET
 1652 08c6 04       	_SLMOD:	.byte   4
 1653 08c7 2F4D4F44 		.ascii "/MOD"
 1654 08cb 00       		.p2align 2 	
 1655              	SLMOD:
 1656 08cc 42F804ED 		_NEST
 1657 08d0 FFF746FD 		BL	OVER
 1658 08d4 FFF74CFD 		BL	ZLESS
 1659 08d8 FFF738FD 		BL	SWAP
 1660 08dc FFF7BAFF 		BL	MSMOD
 1661 08e0 52F804EB 		_UNNEST
 1661      7047
 1662              	
 1663              	//    MOD	 ( n n -- r )
 1664              	// 	Signed divide. Return mod only.
 1665              	
 1666 08e6 C6080000 		.word	_SLMOD-MAPOFFSET
 1667 08ea 03       	_MODD:	.byte  3
 1668 08eb 4D4F44   		.ascii "MOD"
 1669 08ee 00BF     		.p2align 2 	
 1670              	MODD:
ARM GAS  stm32eforth.s 			page 33


 1671 08f0 42F804ED 		_NEST
 1672 08f4 FFF7EAFF 		BL	SLMOD
 1673 08f8 FFF718FD 		BL	DROP
 1674 08fc 52F804EB 		_UNNEST
 1674      7047
 1675              	
 1676              	//    /	   ( n n -- q )
 1677              	// 	Signed divide. Return quotient only.
 1678              	
 1679 0902 EA080000 		.word	_MODD-MAPOFFSET
 1680 0906 01       	_SLASH:	.byte  1
 1681 0907 2F       		.ascii "/"
 1682              		.p2align 2 	
 1683              	SLASH:
 1684 0908 42F804ED 		_NEST
 1685 090c FFF7DEFF 		BL	SLMOD
 1686 0910 FFF71CFD 		BL	SWAP
 1687 0914 FFF70AFD 		BL	DROP
 1688 0918 52F804EB 		_UNNEST
 1688      7047
 1689              	
 1690              	//    */MOD	( n1 n2 n3 -- r q )
 1691              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1692              	
 1693 091e 06090000 		.word	_SLASH-MAPOFFSET
 1694 0922 05       	_SSMOD:	.byte  5
 1695 0923 2A2F4D4F 		.ascii "*/MOD"
 1695      44
 1696              		.p2align 2 	
 1697              	SSMOD:
 1698 0928 42F804ED 		_NEST
 1699 092c FFF7EAFC 		BL	TOR
 1700 0930 FFF78CFD 		BL	MSTAR
 1701 0934 FFF7D4FC 		BL	RFROM
 1702 0938 FFF78CFF 		BL	MSMOD
 1703 093c 52F804EB 		_UNNEST
 1703      7047
 1704              	
 1705              	//    */	  ( n1 n2 n3 -- q )
 1706              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1707              	
 1708 0942 22090000 		.word	_SSMOD-MAPOFFSET
 1709 0946 02       	_STASL:	.byte  2
 1710 0947 2A2F     		.ascii "*/"
 1711 0949 0000BF   		.p2align 2 	
 1712              	STASL:
 1713 094c 42F804ED 		_NEST
 1714 0950 FFF7EAFF 		BL	SSMOD
 1715 0954 FFF7FAFC 		BL	SWAP
 1716 0958 FFF7E8FC 		BL	DROP
 1717 095c 52F804EB 		_UNNEST
 1717      7047
 1718              	
 1719              	// **************************************************************************
 1720              	//  Miscellaneous
 1721              	
 1722              	//    ALIGNED	( b -- a )
ARM GAS  stm32eforth.s 			page 34


 1723              	// 	Align address to the cell boundary.
 1724              	
 1725 0962 46090000 		.word	_STASL-MAPOFFSET
 1726 0966 07       	_ALGND:	.byte   7
 1727 0967 414C4947 		.ascii "ALIGNED"
 1727      4E4544
 1728 096e 00BF     		.p2align 2 	
 1729              	ALGND:
 1730 0970 05F10305 		ADD	R5,R5,#3
 1731 0974 6FF00304 		MVN	R4,#3
 1732 0978 05EA0405 		AND	R5,R5,R4
 1733 097c 7047     		_NEXT
 1734              	
 1735              	//    >CHAR	( c -- c )
 1736              	// 	Filter non-printing characters.
 1737              	
 1738 097e 66090000 		.word	_ALGND-MAPOFFSET
 1739 0982 05       	_TCHAR:	.byte  5
 1740 0983 3E434841 		.ascii ">CHAR"
 1740      52
 1741              		.p2align 2 	
 1742              	TCHAR:
 1743 0988 42F804ED 		_NEST
 1744 098c FFF749FC 		_DOLIT
 1745 0990 7F000000 		.word	0x7F
 1746 0994 FFF7F6FC 		BL	ANDD
 1747 0998 FFF7D0FC 		BL	DUPP	// mask msb
 1748 099c FFF790FD 		BL	BLANK
 1749 09a0 FFF73FFC 		_DOLIT
 1750 09a4 7F000000 		.word	127
 1751 09a8 FFF720FF 		BL	WITHI	// check for printable
 1752 09ac FFF7E8FD 		BL	INVER
 1753 09b0 FFF75AFC 		BL	QBRAN
 1754 09b4 C4090000 		.word	TCHA1-MAPOFFSET
 1755 09b8 FFF7B8FC 		BL	DROP
 1756 09bc FFF731FC 		_DOLIT
 1757 09c0 5F000000 		.word	'_'	// replace non-printables
 1758              	TCHA1:
 1759 09c4 52F804EB 		  _UNNEST
 1759      7047
 1760              	
 1761              	//    DEPTH	( -- n )
 1762              	// 	Return the depth of the data stack.
 1763              	
 1764 09ca 82090000 		.word	_TCHAR-MAPOFFSET
 1765 09ce 05       	_DEPTH:	.byte  5
 1766 09cf 44455054 		.ascii "DEPTH"
 1766      48
 1767              		.p2align 2 	
 1768              	DEPTH:
 1769 09d4 41F8045D 		_PUSH
 1770 09d8 44F68465 		MOVW	R5,#SPP&0xffff+4 
 1771 09dc C2F20005 	 	MOVT	R5,#SPP>>16 
 1772 09e0 A5EB0105 		SUB	R5,R5,R1
 1773 09e4 4FEAA505 		ASR	R5,R5,#2
 1774 09e8 A5F10105 		SUB	R5,R5,#1
 1775 09ec 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 35


 1776              	
 1777              	//    PICK	( ... +n -- ... w )
 1778              	// 	Copy the nth stack item to tos.
 1779              	
 1780 09ee CE090000 		.word	_DEPTH-MAPOFFSET
 1781 09f2 04       	_PICK:	.byte  4
 1782 09f3 5049434B 		.ascii "PICK"
 1783 09f7 00       		.p2align 2 	
 1784              	PICK:
 1785 09f8 42F804ED 		_NEST
 1786 09fc FFF730FD 		BL	ONEP
 1787 0a00 FFF768FD 		BL	CELLS
 1788 0a04 FFF788FC 		BL	SPAT
 1789 0a08 FFF7FCFC 		BL	PLUS
 1790 0a0c FFF752FC 		BL	AT
 1791 0a10 52F804EB 		_UNNEST
 1791      7047
 1792              	
 1793              	// **************************************************************************
 1794              	//  Memory access
 1795              	
 1796              	//    HERE	( -- a )
 1797              	// 	Return the top of the code dictionary.
 1798              	
 1799 0a16 F2090000 		.word	_PICK-MAPOFFSET
 1800 0a1a 04       	_HERE:	.byte  4
 1801 0a1b 48455245 		.ascii "HERE"
 1802 0a1f 00       		.p2align 2 	
 1803              	HERE:
 1804 0a20 42F804ED 		_NEST
 1805 0a24 FFF7C2FE 		BL	CPP
 1806 0a28 FFF744FC 		BL	AT
 1807 0a2c 52F804EB 		_UNNEST
 1807      7047
 1808              		
 1809              	//    PAD	 ( -- a )
 1810              	// 	Return the address of a temporary buffer.
 1811              	
 1812 0a32 1A0A0000 		.word	_HERE-MAPOFFSET
 1813 0a36 03       	_PAD:	.byte  3
 1814 0a37 504144   		.ascii "PAD"
 1815 0a3a 00BF     		.p2align 2 	
 1816              	PAD:
 1817 0a3c 42F804ED 		_NEST
 1818 0a40 FFF7EEFF 		BL	HERE
 1819 0a44 05F15005 		ADD	R5,R5,#80
 1820 0a48 52F804EB 		_UNNEST
 1820      7047
 1821              	
 1822              	//    TIB	 ( -- a )
 1823              	// 	Return the address of the terminal input buffer.
 1824              	
 1825 0a4e 360A0000 		.word	_PAD-MAPOFFSET
 1826 0a52 03       	_TIB:	.byte  3
 1827 0a53 544942   		.ascii "TIB"
 1828 0a56 00BF     		.p2align 2 	
 1829              	TIB:
ARM GAS  stm32eforth.s 			page 36


 1830 0a58 41F8045D 		_PUSH
 1831 0a5c 5D6A     		ldr r5,[r3,#TIB_OFS]
 1832 0a5e 7047     		_NEXT
 1833              	
 1834              	//    @EXECUTE	( a -- )
 1835              	// 	Execute vector stored in address a.
 1836              	
 1837 0a60 520A0000 		.word	_TIB-MAPOFFSET
 1838 0a64 08       	_ATEXE:	.byte   8
 1839 0a65 40455845 		.ascii "@EXECUTE"
 1839      43555445 
 1840 0a6d 0000BF   		.p2align 2 	
 1841              	ATEXE:
 1842 0a70 2C00     		MOVS	R4,R5
 1843 0a72 51F8045B 		_POP
 1844 0a76 2468     		LDR	R4,[R4]
 1845 0a78 44F00104 		ORR	R4,R4,#1
 1846 0a7c 18BF     	    IT NE 
 1847 0a7e 2047     		BXNE	R4
 1848 0a80 7047     		_NEXT
 1849              	
 1850              	//    CMOVE	( b1 b2 u -- )
 1851              	// 	Copy u bytes from b1 to b2.
 1852              	
 1853 0a82 640A0000 		.word	_ATEXE-MAPOFFSET
 1854 0a86 05       	_CMOVE:	.byte   5
 1855 0a87 434D4F56 		.ascii "CMOVE"
 1855      45
 1856              		.p2align 2 	
 1857              	CMOVE:
 1858 0a8c 51F8046B 		LDR	R6,[R1],#4
 1859 0a90 51F8047B 		LDR	R7,[R1],#4
 1860 0a94 03E0     		B CMOV1
 1861              	CMOV0:
 1862 0a96 17F8014B 		LDRB	R4,[R7],#1
 1863 0a9a 06F8014B 		STRB	R4,[R6],#1
 1864              	CMOV1:
 1865 0a9e 2D00     		MOVS	R5,R5
 1866 0aa0 02D0     		BEQ	CMOV2
 1867 0aa2 A5F10105 		SUB	R5,R5,#1
 1868 0aa6 F6E7     		B CMOV0
 1869              	CMOV2:
 1870 0aa8 51F8045B 		_POP
 1871 0aac 7047     		_NEXT
 1872              	
 1873              	//    MOVE	( a1 a2 u -- )
 1874              	// 	Copy u words from a1 to a2.
 1875              	
 1876 0aae 860A0000 		.word	_CMOVE-MAPOFFSET
 1877 0ab2 04       	_MOVE:	.byte   4
 1878 0ab3 4D4F5645 		.ascii "MOVE"
 1879 0ab7 00       		.p2align 2 	
 1880              	MOVE:
 1881 0ab8 25F00305 		AND	R5,R5,#-4
 1882 0abc 51F8046B 		LDR	R6,[R1],#4
 1883 0ac0 51F8047B 		LDR	R7,[R1],#4
 1884 0ac4 03E0     		B MOVE1
ARM GAS  stm32eforth.s 			page 37


 1885              	MOVE0:
 1886 0ac6 57F8044B 		LDR	R4,[R7],#4
 1887 0aca 46F8044B 		STR	R4,[R6],#4
 1888              	MOVE1:
 1889 0ace 2D00     		MOVS	R5,R5
 1890 0ad0 02D0     		BEQ	MOVE2
 1891 0ad2 A5F10405 		SUB	R5,R5,#4
 1892 0ad6 F6E7     		B MOVE0
 1893              	MOVE2:
 1894 0ad8 51F8045B 		_POP
 1895 0adc 7047     		_NEXT
 1896              	
 1897              	//    FILL	( b u c -- )
 1898              	// 	Fill u bytes of character c to area beginning at b.
 1899              	
 1900 0ade B20A0000 		.word	_MOVE-MAPOFFSET
 1901 0ae2 04       	_FILL:	.byte   4
 1902 0ae3 46494C4C 		.ascii "FILL"
 1903 0ae7 00       		.p2align 2 	
 1904              	FILL:
 1905 0ae8 51F8046B 		LDR	R6,[R1],#4
 1906 0aec 51F8047B 		LDR	R7,[R1],#4
 1907              	FILL0:
 1908 0af0 00E0     		B FILL1
 1909 0af2 2D46     		MOV	R5,R5
 1910              	FILL1:
 1911 0af4 07F8015B 		STRB	R5,[R7],#1
 1912 0af8 3600     		MOVS	R6,R6
 1913 0afa 02D0     		BEQ	FILL2
 1914 0afc A6F10106 		SUB	R6,R6,#1
 1915 0b00 F6E7     		B FILL0
 1916              	FILL2:
 1917 0b02 51F8045B 		_POP
 1918 0b06 7047     		_NEXT
 1919              	
 1920              	//    PACK$	( b u a -- a )
 1921              	// 	Build a counted word with u characters from b. Null fill.
 1922              	
 1923 0b08 E20A0000 		.word	_FILL-MAPOFFSET
 1924 0b0c 05       	_PACKS:	.byte  5
 1925 0b0d 5041434B 		.ascii "PACK$$"
 1925      2424
 1926 0b13 00       		.p2align 2 	
 1927              	PACKS:
 1928 0b14 42F804ED 		_NEST
 1929 0b18 FFF72AFF 		BL	ALGND
 1930 0b1c FFF70EFC 		BL	DUPP
 1931 0b20 FFF7F0FB 		BL	TOR			// strings only on cell boundary
 1932 0b24 FFF71CFC 		BL	OVER
 1933 0b28 FFF76CFC 		BL	PLUS
 1934 0b2c FFF798FC 		BL	ONEP
 1935 0b30 FFF777FB 		_DOLIT
 1936 0b34 FCFFFFFF 		.word	0xFFFFFFFC
 1937 0b38 FFF724FC 		BL	ANDD			// count mod cell
 1938 0b3c FFF771FB 		_DOLIT
 1939 0b40 00000000 		.word	0
 1940 0b44 FFF702FC 		BL	SWAP
ARM GAS  stm32eforth.s 			page 38


 1941 0b48 FFF7AAFB 		BL	STORE			// null fill cell
 1942 0b4c FFF7D2FB 		BL	RAT
 1943 0b50 FFF7FEFC 		BL	DDUP
 1944 0b54 FFF7B4FB 		BL	CSTOR
 1945 0b58 FFF782FC 		BL	ONEP			// save count
 1946 0b5c FFF7F6FB 		BL	SWAP
 1947 0b60 FFF794FF 		BL	CMOVE
 1948 0b64 FFF7BCFB 		BL	RFROM
 1949 0b68 52F804EB 		_UNNEST   			// move string
 1949      7047
 1950              	
 1951              	// **************************************************************************
 1952              	//  Numeric output, single precision
 1953              	
 1954              	//    DIGIT	( u -- c )
 1955              	// 	Convert digit u to a character.
 1956              	
 1957 0b6e 0C0B0000 		.word	_PACKS-MAPOFFSET
 1958 0b72 05       	_DIGIT:	.byte  5
 1959 0b73 44494749 		.ascii "DIGIT"
 1959      54
 1960              		.p2align 2 	
 1961              	DIGIT:
 1962 0b78 42F804ED 		_NEST
 1963 0b7c FFF751FB 		_DOLIT
 1964 0b80 09000000 		.word	9
 1965 0b84 FFF7ECFB 		BL	OVER
 1966 0b88 FFF72CFD 		BL	LESS
 1967 0b8c 05F00705 		AND	R5,R5,#7
 1968 0b90 FFF738FC 		BL	PLUS
 1969 0b94 05F13005 		ADD	R5,R5,#'0'
 1970 0b98 52F804EB 		_UNNEST
 1970      7047
 1971              	
 1972              	//    EXTRACT	( n base -- n c )
 1973              	// 	Extract the least significant digit from n.
 1974              	
 1975 0b9e 720B0000 		.word	_DIGIT-MAPOFFSET
 1976 0ba2 07       	_EXTRC:	.byte  7
 1977 0ba3 45585452 		.ascii "EXTRACT"
 1977      414354
 1978 0baa 00BF     		.p2align 2 	
 1979              	EXTRC:
 1980 0bac 42F804ED 		_NEST
 1981 0bb0 FFF737FB 		_DOLIT
 1982 0bb4 00000000 		.word	0
 1983 0bb8 FFF7C8FB 		BL	SWAP
 1984 0bbc FFF72EFE 		BL	UMMOD
 1985 0bc0 FFF7C4FB 		BL	SWAP
 1986 0bc4 FFF7D8FF 		BL	DIGIT
 1987 0bc8 52F804EB 		_UNNEST
 1987      7047
 1988              	
 1989              	//    <#	  ( -- )
 1990              	// 	Initiate the numeric output process.
 1991              	
 1992 0bce A20B0000 		.word	_EXTRC-MAPOFFSET
ARM GAS  stm32eforth.s 			page 39


 1993 0bd2 02       	_BDIGS:	.byte  2
 1994 0bd3 3C23     		.ascii "<#"
 1995 0bd5 0000BF   		.p2align 2 	
 1996              	BDIGS:
 1997 0bd8 42F804ED 		_NEST
 1998 0bdc FFF72EFF 		BL	PAD
 1999 0be0 FFF7CEFD 		BL	HLD
 2000 0be4 FFF75CFB 		BL	STORE
 2001 0be8 52F804EB 		_UNNEST
 2001      7047
 2002              	
 2003              	//    HOLD	( c -- )
 2004              	// 	Insert a character into the numeric output string.
 2005              	
 2006 0bee D20B0000 		.word	_BDIGS-MAPOFFSET
 2007 0bf2 04       	_HOLD:	.byte  4
 2008 0bf3 484F4C44 		.ascii "HOLD"
 2009 0bf7 00       		.p2align 2 	
 2010              	HOLD:
 2011 0bf8 42F804ED 		_NEST
 2012 0bfc FFF7C0FD 		BL	HLD
 2013 0c00 FFF758FB 		BL	AT
 2014 0c04 FFF734FC 		BL	ONEM
 2015 0c08 FFF798FB 		BL	DUPP
 2016 0c0c FFF7B8FD 		BL	HLD
 2017 0c10 FFF746FB 		BL	STORE
 2018 0c14 FFF754FB 		BL	CSTOR
 2019 0c18 52F804EB 		_UNNEST
 2019      7047
 2020              	
 2021              	//    #	   ( u -- u )
 2022              	// 	Extract one digit from u and append the digit to output string.
 2023              	
 2024 0c1e F20B0000 		.word	_HOLD-MAPOFFSET
 2025 0c22 01       	_DIG:	.byte  1
 2026 0c23 23       		.ascii "#"
 2027              		.p2align 2 	
 2028              	DIG:
 2029 0c24 42F804ED 		_NEST
 2030 0c28 FFF772FD 		BL	BASE
 2031 0c2c FFF742FB 		BL	AT
 2032 0c30 FFF7BCFF 		BL	EXTRC
 2033 0c34 FFF7E0FF 		BL	HOLD
 2034 0c38 52F804EB 		_UNNEST
 2034      7047
 2035              	
 2036              	//    #S	  ( u -- 0 )
 2037              	// 	Convert u until all digits are added to the output string.
 2038              	
 2039 0c3e 220C0000 		.word	_DIG-MAPOFFSET
 2040 0c42 02       	_DIGS:	.byte  2
 2041 0c43 2353     		.ascii "#S"
 2042 0c45 0000BF   		.p2align 2 	
 2043              	DIGS:
 2044 0c48 42F804ED 		_NEST
 2045              	DIGS1:
 2046 0c4c FFF7EAFF 	    BL	DIG
ARM GAS  stm32eforth.s 			page 40


 2047 0c50 FFF774FB 		BL	DUPP
 2048 0c54 FFF708FB 		BL	QBRAN
 2049 0c58 5E0C0000 		.word	DIGS2-MAPOFFSET
 2050 0c5c F6E7     		B	DIGS1
 2051              	DIGS2:
 2052 0c5e 52F804EB 		  _UNNEST
 2052      7047
 2053              	
 2054              	//    SIGN	( n -- )
 2055              	// 	Add a minus sign to the numeric output string.
 2056              	
 2057 0c64 420C0000 		.word	_DIGS-MAPOFFSET
 2058 0c68 04       	_SIGN:	.byte  4
 2059 0c69 5349474E 		.ascii "SIGN"
 2060 0c6d 0000BF   		.p2align 2 	
 2061              	SIGN:
 2062 0c70 42F804ED 		_NEST
 2063 0c74 FFF77CFB 		BL	ZLESS
 2064 0c78 FFF7F6FA 		BL	QBRAN
 2065 0c7c 8C0C0000 		.word	SIGN1-MAPOFFSET
 2066 0c80 FFF7CFFA 		_DOLIT
 2067 0c84 2D000000 		.word	'-'
 2068 0c88 FFF7B6FF 		BL	HOLD
 2069              	SIGN1:
 2070 0c8c 52F804EB 		  _UNNEST
 2070      7047
 2071              	
 2072              	//    #>	  ( w -- b u )
 2073              	// 	Prepare the outputDCB to be TYPE'd.
 2074              	
 2075 0c92 680C0000 		.word	_SIGN-MAPOFFSET
 2076 0c96 02       	_EDIGS:	.byte  2
 2077 0c97 233E     		.ascii "#>"
 2078 0c99 0000BF   		.p2align 2 	
 2079              	EDIGS:
 2080 0c9c 42F804ED 		_NEST
 2081 0ca0 FFF744FB 		BL	DROP
 2082 0ca4 FFF76CFD 		BL	HLD
 2083 0ca8 FFF704FB 		BL	AT
 2084 0cac FFF7C6FE 		BL	PAD
 2085 0cb0 FFF756FB 		BL	OVER
 2086 0cb4 FFF7AEFB 		BL	SUBB
 2087 0cb8 52F804EB 		_UNNEST
 2087      7047
 2088              	
 2089              	//    str	 ( n -- b u )
 2090              	// 	Convert a signed integer to a numeric string.
 2091              	
 2092              	// 	.word	_EDIGS-MAPOFFSET
 2093              	// _STRR	.byte  3
 2094              	// 	.ascii "str"
 2095              	// 	.p2align 2 	
 2096              	STRR:
 2097 0cbe 42F804ED 		_NEST
 2098 0cc2 FFF73BFB 		BL	DUPP
 2099 0cc6 FFF71DFB 		BL	TOR
 2100 0cca FFF76BFC 		BL	ABSS
ARM GAS  stm32eforth.s 			page 41


 2101 0cce FFF783FF 		BL	BDIGS
 2102 0cd2 FFF7B9FF 		BL	DIGS
 2103 0cd6 FFF703FB 		BL	RFROM
 2104 0cda FFF7C9FF 		BL	SIGN
 2105 0cde FFF7DDFF 		BL	EDIGS
 2106 0ce2 52F804EB 		_UNNEST
 2106      7047
 2107              	
 2108              	//    HEX	 ( -- )
 2109              	// 	Use radix 16 as base for numeric conversions.
 2110              	
 2111 0ce8 960C0000 		.word	_EDIGS-MAPOFFSET
 2112 0cec 03       	_HEX:	.byte  3
 2113 0ced 484558   		.ascii "HEX"
 2114              		.p2align 2 	
 2115              	HEX:
 2116 0cf0 42F804ED 		_NEST
 2117 0cf4 FFF795FA 		_DOLIT
 2118 0cf8 10000000 		.word	16
 2119 0cfc FFF708FD 		BL	BASE
 2120 0d00 FFF7CEFA 		BL	STORE
 2121 0d04 52F804EB 		_UNNEST
 2121      7047
 2122              	
 2123              	//    DECIMAL	( -- )
 2124              	// 	Use radix 10 as base for numeric conversions.
 2125              	
 2126 0d0a EC0C0000 		.word	_HEX-MAPOFFSET
 2127 0d0e 07       	_DECIM:	.byte  7
 2128 0d0f 44454349 		.ascii "DECIMAL"
 2128      4D414C
 2129 0d16 00BF     		.p2align 2 	
 2130              	DECIM:
 2131 0d18 42F804ED 		_NEST
 2132 0d1c FFF781FA 		_DOLIT
 2133 0d20 0A000000 		.word	10
 2134 0d24 FFF7F4FC 		BL	BASE
 2135 0d28 FFF7BAFA 		BL	STORE
 2136 0d2c 52F804EB 		_UNNEST
 2136      7047
 2137              	
 2138              	// **************************************************************************
 2139              	//  Numeric input, single precision
 2140              	
 2141              	//    DIGIT?	( c base -- u t )
 2142              	// 	Convert a character to its numeric value. A flag indicates success.
 2143              	
 2144 0d32 0E0D0000 		.word	_DECIM-MAPOFFSET
 2145 0d36 06       	_DIGTQ:	.byte  6
 2146 0d37 44494749 		.ascii "DIGIT?"
 2146      543F
 2147 0d3d 0000BF   		.p2align 2 	
 2148              	DIGTQ:
 2149 0d40 42F804ED 		_NEST
 2150 0d44 FFF7DEFA 		BL	TOR
 2151 0d48 FFF76BFA 		_DOLIT
 2152 0d4c 30000000 		.word	'0'
ARM GAS  stm32eforth.s 			page 42


 2153 0d50 FFF760FB 		BL	SUBB
 2154 0d54 FFF765FA 		_DOLIT
 2155 0d58 09000000 		.word	9
 2156 0d5c FFF700FB 		BL	OVER
 2157 0d60 FFF740FC 		BL	LESS
 2158 0d64 FFF780FA 		BL	QBRAN
 2159 0d68 8C0D0000 		.word	DGTQ1-MAPOFFSET
 2160 0d6c FFF759FA 		_DOLIT
 2161 0d70 07000000 		.word	7
 2162 0d74 FFF74EFB 		BL	SUBB
 2163 0d78 FFF7E0FA 		BL	DUPP
 2164 0d7c FFF751FA 		_DOLIT
 2165 0d80 0A000000 		.word	10
 2166 0d84 FFF72EFC 		BL	LESS
 2167 0d88 FFF706FB 		BL	ORR
 2168              	DGTQ1:
 2169 0d8c FFF7D6FA 	  BL	DUPP
 2170 0d90 FFF7A6FA 		BL	RFROM
 2171 0d94 FFF71AFC 		BL	ULESS
 2172 0d98 52F804EB 		_UNNEST
 2172      7047
 2173              	
 2174              	//    NUMBER?	( a -- n T | a F )
 2175              	// 	Convert a numberDCB to integer. Push a flag on tos.
 2176              	
 2177 0d9e 360D0000 		.word	_DIGTQ-MAPOFFSET
 2178 0da2 07       	_NUMBQ:	.byte  7
 2179 0da3 4E554D42 		.ascii "NUMBER?"
 2179      45523F
 2180 0daa 00BF     		.p2align 2 	
 2181              	NUMBQ:
 2182 0dac 42F804ED 		_NEST
 2183 0db0 FFF7AEFC 		BL	BASE
 2184 0db4 FFF77EFA 		BL	AT
 2185 0db8 FFF7A4FA 		BL	TOR
 2186 0dbc FFF731FA 		_DOLIT
 2187 0dc0 00000000 		.word	0
 2188 0dc4 FFF7CCFA 		BL	OVER
 2189 0dc8 FFF75CFC 		BL	COUNT
 2190 0dcc FFF7C8FA 		BL	OVER
 2191 0dd0 FFF780FA 		BL	CAT
 2192 0dd4 FFF725FA 		_DOLIT
 2193 0dd8 5F000000 		.word	'_'
 2194 0ddc FFF7EAFB 		BL	EQUAL
 2195 0de0 FFF742FA 		BL	QBRAN
 2196 0de4 FC0D0000 		.word	NUMQ1-MAPOFFSET
 2197 0de8 FFF782FF 		BL	HEX
 2198 0dec FFF7AEFA 		BL	SWAP
 2199 0df0 FFF736FB 		BL	ONEP
 2200 0df4 FFF7AAFA 		BL	SWAP
 2201 0df8 FFF73AFB 		BL	ONEM
 2202              	NUMQ1:
 2203 0dfc FFF7B0FA 	  BL	OVER
 2204 0e00 FFF768FA 		BL	CAT
 2205 0e04 FFF70DFA 		_DOLIT
 2206 0e08 2D000000 		.word	'-'
 2207 0e0c FFF7D2FB 		BL	EQUAL
ARM GAS  stm32eforth.s 			page 43


 2208 0e10 FFF778FA 		BL	TOR
 2209 0e14 FFF79AFA 		BL	SWAP
 2210 0e18 FFF76CFA 		BL	RAT
 2211 0e1c FFF7FAFA 		BL	SUBB
 2212 0e20 FFF794FA 		BL	SWAP
 2213 0e24 FFF766FA 		BL	RAT
 2214 0e28 FFF7ECFA 		BL	PLUS
 2215 0e2c FFF772FB 		BL	QDUP
 2216 0e30 FFF71AFA 		BL	QBRAN
 2217 0e34 C00E0000 		.word	NUMQ6-MAPOFFSET
 2218 0e38 FFF71AFB 		BL	ONEM
 2219 0e3c FFF762FA 		BL	TOR
 2220              	NUMQ2:
 2221 0e40 FFF77CFA 	  BL	DUPP
 2222 0e44 FFF75EFA 		BL	TOR
 2223 0e48 FFF744FA 		BL	CAT
 2224 0e4c FFF760FC 		BL	BASE
 2225 0e50 FFF730FA 		BL	AT
 2226 0e54 FFF774FF 		BL	DIGTQ
 2227 0e58 FFF706FA 		BL	QBRAN
 2228 0e5c A40E0000 		.word	NUMQ4-MAPOFFSET
 2229 0e60 FFF774FA 		BL	SWAP
 2230 0e64 FFF754FC 		BL	BASE
 2231 0e68 FFF724FA 		BL	AT
 2232 0e6c FFF7DAFA 		BL	STAR
 2233 0e70 FFF7C8FA 		BL	PLUS
 2234 0e74 FFF734FA 		BL	RFROM
 2235 0e78 FFF7F2FA 		BL	ONEP
 2236 0e7c FFF7E5F9 		BL	DONXT
 2237 0e80 400E0000 		.word	NUMQ2-MAPOFFSET
 2238 0e84 FFF736FA 		BL	RAT
 2239 0e88 FFF760FA 		BL	SWAP
 2240 0e8c FFF74EFA 		BL	DROP
 2241 0e90 FFF7EAF9 		BL	QBRAN
 2242 0e94 9C0E0000 		.word	NUMQ3-MAPOFFSET
 2243 0e98 FFF77CFB 		BL	NEGAT
 2244              	NUMQ3:
 2245 0e9c FFF756FA 	  BL	SWAP
 2246 0ea0 00F00CB8 		B.W	NUMQ5
 2247              	NUMQ4:
 2248 0ea4 FFF71CFA 	  BL	RFROM
 2249 0ea8 FFF71AFA 		BL	RFROM
 2250 0eac FFF746FB 		BL	DDROP
 2251 0eb0 FFF744FB 		BL	DDROP
 2252 0eb4 FFF7B5F9 		_DOLIT
 2253 0eb8 00000000 		.word	0
 2254              	NUMQ5:
 2255 0ebc FFF73EFA 	  BL	DUPP
 2256              	NUMQ6:
 2257 0ec0 FFF70EFA 	  BL	RFROM
 2258 0ec4 FFF73AFB 		BL	DDROP
 2259 0ec8 FFF70AFA 		BL	RFROM
 2260 0ecc FFF720FC 		BL	BASE
 2261 0ed0 FFF7E6F9 		BL	STORE
 2262 0ed4 52F804EB 		_UNNEST
 2262      7047
 2263              	
ARM GAS  stm32eforth.s 			page 44


 2264              	// **************************************************************************
 2265              	//  Basic I/O
 2266              	
 2267              	//    KEY	 ( -- c )
 2268              	// 	Wait for and return an input character.
 2269              	
 2270 0eda A20D0000 		.word	_NUMBQ-MAPOFFSET
 2271 0ede 03       	_KEY:	.byte  3
 2272 0edf 4B4559   		.ascii "KEY"
 2273 0ee2 00BF     		.p2align 2 	
 2274              	KEY:
 2275 0ee4 42F804ED 		_NEST
 2276              	KEY1:
 2277 0ee8 FFF770F9 		BL	QRX
 2278 0eec FFF7BCF9 		BL	QBRAN
 2279 0ef0 E80E0000 		.word	KEY1-MAPOFFSET
 2280              	// CTRL-C reboot
 2281 0ef4 FFF722FA 		BL DUPP 
 2282 0ef8 FFF793F9 		BL DOLIT 
 2283 0efc 03000000 		.word 3 
 2284 0f00 FFF758FB 		BL EQUAL 
 2285 0f04 FFF73CFB 		BL INVER
 2286 0f08 FFF7AEF9 		BL QBRAN
 2287 0f0c 50010000 		.word REBOOT-MAPOFFSET 
 2288 0f10 52F804EB 		_UNNEST
 2288      7047
 2289              	
 2290              	//    SPACE	( -- )
 2291              	// 	Send the blank character to the output device.
 2292              	
 2293 0f16 DE0E0000 		.word	_KEY-MAPOFFSET
 2294 0f1a 05       	_SPACE:	.byte  5
 2295 0f1b 53504143 		.ascii "SPACE"
 2295      45
 2296              		.p2align 2 	
 2297              	SPACE:
 2298 0f20 42F804ED 		_NEST
 2299 0f24 FFF7CCFA 		BL	BLANK
 2300 0f28 FFF76AF9 		BL	EMIT
 2301 0f2c 52F804EB 		_UNNEST
 2301      7047
 2302              	
 2303              	//    SPACES	( +n -- )
 2304              	// 	Send n spaces to the output device.
 2305              	
 2306 0f32 1A0F0000 		.word	_SPACE-MAPOFFSET
 2307 0f36 06       	_SPACS:	.byte  6
 2308 0f37 53504143 		.ascii "SPACES"
 2308      4553
 2309 0f3d 0000BF   		.p2align 2 	
 2310              	SPACS:
 2311 0f40 42F804ED 		_NEST
 2312 0f44 FFF76DF9 		_DOLIT
 2313 0f48 00000000 		.word	0
 2314 0f4c FFF762FB 		BL	MAX
 2315 0f50 FFF7D8F9 		BL	TOR
 2316 0f54 00F002B8 		B.W	CHAR2
ARM GAS  stm32eforth.s 			page 45


 2317              	CHAR1:
 2318 0f58 FFF7E2FF 		BL	SPACE
 2319              	CHAR2:
 2320 0f5c FFF775F9 		BL	DONXT
 2321 0f60 580F0000 		.word	CHAR1-MAPOFFSET
 2322 0f64 52F804EB 		_UNNEST
 2322      7047
 2323              	
 2324              	//    TYPE	( b u -- )
 2325              	// 	Output u characters from b.
 2326              	
 2327 0f6a 360F0000 		.word	_SPACS-MAPOFFSET
 2328 0f6e 04       	_TYPEE:	.byte	4
 2329 0f6f 54595045 		.ascii "TYPE"
 2330 0f73 00       		.p2align 2 	
 2331              	TYPEE:
 2332 0f74 42F804ED 		_NEST
 2333 0f78 FFF7C4F9 		BL  TOR   // ( a+1 -- R: u )
 2334 0f7c 05E0     		B	TYPE2
 2335              	TYPE1:  
 2336 0f7e FFF781FB 		BL  COUNT
 2337 0f82 FFF701FD 		BL	TCHAR
 2338 0f86 FFF73BF9 		BL	EMIT
 2339              	TYPE2:  
 2340 0f8a FFF75EF9 		BL  DONXT  
 2341 0f8e 7E0F0000 		.word	TYPE1-MAPOFFSET
 2342 0f92 FFF7CBF9 		BL	DROP
 2343 0f96 52F804EB 		_UNNEST
 2343      7047
 2344              	
 2345              	//    CR	  ( -- )
 2346              	// 	Output a carriage return and a line feed.
 2347              	
 2348 0f9c 6E0F0000 		.word	_TYPEE-MAPOFFSET
 2349 0fa0 02       	_CR:	.byte  2
 2350 0fa1 4352     		.ascii "CR"
 2351 0fa3 00       		.p2align 2 	
 2352              	CR:
 2353 0fa4 42F804ED 		_NEST
 2354 0fa8 FFF73BF9 		_DOLIT
 2355 0fac 0D000000 		.word	CRR
 2356 0fb0 FFF726F9 		BL	EMIT
 2357 0fb4 FFF735F9 		_DOLIT
 2358 0fb8 0A000000 		.word	LF
 2359 0fbc FFF720F9 		BL	EMIT
 2360 0fc0 52F804EB 		_UNNEST
 2360      7047
 2361              	
 2362              	//    do_$	( -- a )
 2363              	// 	Return the address of a compiled string.
 2364              	//  adjust return address to skip over it.
 2365              	
 2366              	// 	.word	_CR-MAPOFFSET
 2367              	// _DOSTR	.byte  COMPO+3
 2368              	// 	.ascii "do$$"
 2369              	// 	.p2align 2 	
 2370              	DOSTR:
ARM GAS  stm32eforth.s 			page 46


 2371 0fc6 42F804ED 		_NEST     
 2372              	/* compiled string address is 2 levels deep */
 2373 0fca FFF789F9 		BL	RFROM	// { -- a1 }
 2374 0fce FFF787F9 		BL	RFROM	//  {a1 -- a1 a2 } b0 set
 2375 0fd2 FFF74DFA 		BL	ONEM	//  clear b0
 2376 0fd6 FFF7B1F9 		BL	DUPP	// {a1 a2 -- a1 a2 a2 }
 2377 0fda FFF753FB 		BL	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2378 0fde FFF711FA 		BL	PLUS	// { -- a1 a2 a2+1+c }
 2379 0fe2 FFF7C5FC 		BL	ALGND	//  end of string
 2380 0fe6 FFF73BFA 		BL	ONEP	//  restore b0, this result in return address 2 level deep.
 2381 0fea FFF78BF9 		BL	TOR		//  address after string { -- a1 a2 }
 2382 0fee FFF7ADF9 		BL	SWAP	//  count tugged
 2383 0ff2 FFF787F9 		BL	TOR     //  ( -- a2) is string address
 2384 0ff6 52F804EB 		_UNNEST
 2384      7047
 2385              	
 2386              	//    $"|	( -- a )
 2387              	// 	Run time routine compiled by _". Return address of a compiled string.
 2388              	
 2389              	// 	.word	_DOSTR-MAPOFFSET
 2390              	// _STRQP	.byte  COMPO+3
 2391              	// 	.ascii "$\"|"
 2392              	// 	.p2align 2 	
 2393              	STRQP:
 2394 0ffc 42F804ED 		_NEST
 2395 1000 FFF7E1FF 		BL	DOSTR
 2396 1004 52F804EB 		_UNNEST			// force a call to dostr
 2396      7047
 2397              	
 2398              	//    .$	( a -- )
 2399              	// 	Run time routine of ." . Output a compiled string.
 2400              	
 2401              	// 	.word	_STRQP-MAPOFFSET
 2402              	// _DOTST	.byte  COMPO+2
 2403              	// 	.ascii ".$$"
 2404              	// 	.p2align 2 	
 2405              	DOTST:
 2406 100a 42F804ED 		_NEST
 2407 100e FFF739FB 		BL	COUNT // ( -- a+1 c )
 2408 1012 FFF7AFFF 		BL	TYPEE
 2409 1016 52F804EB 		_UNNEST
 2409      7047
 2410              	
 2411              	//    ."|	( -- )
 2412              	// 	Run time routine of ." . Output a compiled string.
 2413              	
 2414              	// 	.word	_DOTST-MAPOFFSET
 2415              	// _DOTQP	.byte  COMPO+3
 2416              	// 	.ascii ".""|"
 2417              	// 	.p2align 2 	
 2418              	DOTQP:
 2419 101c 42F804ED 		_NEST
 2420 1020 FFF7D1FF 		BL	DOSTR
 2421 1024 FFF7F1FF 		BL	DOTST
 2422 1028 52F804EB 		_UNNEST
 2422      7047
 2423              	
ARM GAS  stm32eforth.s 			page 47


 2424              	//    .R	  ( n +n -- )
 2425              	// 	Display an integer in a field of n columns, right justified.
 2426              	
 2427 102e A00F0000 		.word	_CR-MAPOFFSET
 2428 1032 02       	_DOTR:	.byte  2
 2429 1033 2E52     		.ascii ".R"
 2430 1035 0000BF   		.p2align 2 	
 2431              	DOTR:
 2432 1038 42F804ED 		_NEST
 2433 103c FFF762F9 		BL	TOR
 2434 1040 FFF73DFE 		BL	STRR
 2435 1044 FFF74CF9 		BL	RFROM
 2436 1048 FFF78AF9 		BL	OVER
 2437 104c FFF7E2F9 		BL	SUBB
 2438 1050 FFF776FF 		BL	SPACS
 2439 1054 FFF78EFF 		BL	TYPEE
 2440 1058 52F804EB 		_UNNEST
 2440      7047
 2441              	
 2442              	//    U.R	 ( u +n -- )
 2443              	// 	Display an unsigned integer in n column, right justified.
 2444              	
 2445 105e 32100000 		.word	_DOTR-MAPOFFSET
 2446 1062 03       	_UDOTR:	.byte  3
 2447 1063 552E52   		.ascii "U.R"
 2448 1066 00BF     		.p2align 2 	
 2449              	UDOTR:
 2450 1068 42F804ED 		_NEST
 2451 106c FFF74AF9 		BL	TOR
 2452 1070 FFF7B2FD 		BL	BDIGS
 2453 1074 FFF7E8FD 		BL	DIGS
 2454 1078 FFF710FE 		BL	EDIGS
 2455 107c FFF730F9 		BL	RFROM
 2456 1080 FFF76EF9 		BL	OVER
 2457 1084 FFF7C6F9 		BL	SUBB
 2458 1088 FFF75AFF 		BL	SPACS
 2459 108c FFF772FF 		BL	TYPEE
 2460 1090 52F804EB 		_UNNEST
 2460      7047
 2461              	
 2462              	//    U.	  ( u -- )
 2463              	// 	Display an unsigned integer in free format.
 2464              	
 2465 1096 62100000 		.word	_UDOTR-MAPOFFSET
 2466 109a 02       	_UDOT:	.byte  2
 2467 109b 552E     		.ascii "U."
 2468 109d 0000BF   		.p2align 2 	
 2469              	UDOT:
 2470 10a0 42F804ED 		_NEST
 2471 10a4 FFF798FD 		BL	BDIGS
 2472 10a8 FFF7CEFD 		BL	DIGS
 2473 10ac FFF7F6FD 		BL	EDIGS
 2474 10b0 FFF736FF 		BL	SPACE
 2475 10b4 FFF75EFF 		BL	TYPEE
 2476 10b8 52F804EB 		_UNNEST
 2476      7047
 2477              	
ARM GAS  stm32eforth.s 			page 48


 2478              	//    .	   ( w -- )
 2479              	// 	Display an integer in free format, preceeded by a space.
 2480              	
 2481 10be 9A100000 		.word	_UDOT-MAPOFFSET
 2482 10c2 01       	_DOT:	.byte  1
 2483 10c3 2E       		.ascii "."
 2484              		.p2align 2 	
 2485              	DOT:
 2486 10c4 42F804ED 		_NEST
 2487 10c8 FFF722FB 		BL	BASE
 2488 10cc FFF7F2F8 		BL	AT
 2489 10d0 FFF7A7F8 		_DOLIT
 2490 10d4 0A000000 		.word	10
 2491 10d8 FFF768F9 		BL	XORR			// ?decimal
 2492 10dc FFF7C4F8 		BL	QBRAN
 2493 10e0 EE100000 		.word	DOT1-MAPOFFSET
 2494 10e4 FFF7DCFF 		BL	UDOT
 2495 10e8 52F804EB 		_UNNEST			// no,display unsigned
 2495      7047
 2496              	DOT1:
 2497 10ee FFF7E6FD 	    BL	STRR
 2498 10f2 FFF715FF 		BL	SPACE
 2499 10f6 FFF73DFF 		BL	TYPEE
 2500 10fa 52F804EB 		_UNNEST			// yes, display signed
 2500      7047
 2501              	
 2502              	//    ?	   ( a -- )
 2503              	// 	Display the contents in a memory cell.
 2504              	
 2505 1100 C2100000 		.word	_DOT-MAPOFFSET
 2506 1104 01       	_QUEST:	.byte  1
 2507 1105 3F       		.ascii "?"
 2508 1106 00BF     		.p2align 2 	
 2509              	QUEST:
 2510 1108 42F804ED 		_NEST
 2511 110c FFF7D2F8 		BL	AT
 2512 1110 FFF7D8FF 		BL	DOT
 2513 1114 52F804EB 		_UNNEST
 2513      7047
 2514              	
 2515              	// **************************************************************************
 2516              	//  Parsing
 2517              	
 2518              	//    parse	( b u c -- b u delta //  string> )
 2519              	// 	Scan word delimited by c. Return found string and its offset.
 2520              	
 2521              	// 	.word	_QUEST-MAPOFFSET
 2522              	// _PARS	.byte  5
 2523              	// 	.ascii "parse"
 2524              	// 	.p2align 2 	
 2525              	PARS:
 2526 111a 42F804ED 		_NEST
 2527 111e FFF7FCFA 		BL	TEMP
 2528 1122 FFF7BDF8 		BL	STORE
 2529 1126 FFF71BF9 		BL	OVER
 2530 112a FFF7EBF8 		BL	TOR
 2531 112e FFF705F9 		BL	DUPP
ARM GAS  stm32eforth.s 			page 49


 2532 1132 FFF799F8 		BL	QBRAN
 2533 1136 2C120000 		.word	PARS8-MAPOFFSET
 2534 113a FFF799F9 		BL	ONEM
 2535 113e FFF7ECFA 		BL	TEMP
 2536 1142 FFF7B7F8 		BL	AT
 2537 1146 FFF7BBF9 		BL	BLANK
 2538 114a FFF733FA 		BL	EQUAL
 2539 114e FFF78BF8 		BL	QBRAN
 2540 1152 A4110000 		.word	PARS3-MAPOFFSET
 2541 1156 FFF7D5F8 		BL	TOR
 2542              	PARS1:
 2543 115a FFF7B1F9 		BL	BLANK
 2544 115e FFF7FFF8 		BL	OVER
 2545 1162 FFF7B7F8 		BL	CAT			// skip leading blanks 
 2546 1166 FFF755F9 		BL	SUBB
 2547 116a FFF701F9 		BL	ZLESS
 2548 116e FFF707FA 		BL	INVER
 2549 1172 FFF779F8 		BL	QBRAN
 2550 1176 A0110000 		.word	PARS2-MAPOFFSET
 2551 117a FFF771F9 		BL	ONEP
 2552 117e FFF764F8 		BL	DONXT
 2553 1182 5A110000 		.word	PARS1-MAPOFFSET
 2554 1186 FFF7ABF8 		BL	RFROM
 2555 118a FFF7CFF8 		BL	DROP
 2556 118e FFF748F8 		_DOLIT
 2557 1192 00000000 		.word	0
 2558 1196 FFF7D1F8 		BL	DUPP
 2559 119a 52F804EB 		_UNNEST
 2559      7047
 2560              	PARS2:
 2561 11a0 FFF79EF8 	  BL	RFROM
 2562              	PARS3:
 2563 11a4 FFF7DCF8 		BL	OVER
 2564 11a8 FFF7D0F8 		BL	SWAP
 2565 11ac FFF7AAF8 		BL	TOR
 2566              	PARS4:
 2567 11b0 FFF7B3FA 		BL	TEMP
 2568 11b4 FFF77EF8 		BL	AT
 2569 11b8 FFF7D2F8 		BL	OVER
 2570 11bc FFF78AF8 		BL	CAT
 2571 11c0 FFF728F9 		BL	SUBB			// scan for delimiter
 2572 11c4 FFF7A9FA 		BL	TEMP
 2573 11c8 FFF774F8 		BL	AT
 2574 11cc FFF778F9 		BL	BLANK
 2575 11d0 FFF7F0F9 		BL	EQUAL
 2576 11d4 FFF748F8 		BL	QBRAN
 2577 11d8 E0110000 		.word	PARS5-MAPOFFSET
 2578 11dc FFF7C8F8 		BL	ZLESS
 2579              	PARS5:
 2580 11e0 FFF742F8 		BL	QBRAN
 2581 11e4 FE110000 		.word	PARS6-MAPOFFSET
 2582 11e8 FFF73AF9 		BL	ONEP
 2583 11ec FFF72DF8 		BL	DONXT
 2584 11f0 B0110000 		.word	PARS4-MAPOFFSET
 2585 11f4 FFF7A2F8 		BL	DUPP
 2586 11f8 FFF784F8 		BL	TOR
 2587 11fc 09E0     		B	PARS7
ARM GAS  stm32eforth.s 			page 50


 2588              	PARS6:
 2589 11fe FFF76FF8 		BL	RFROM
 2590 1202 FFF793F8 		BL	DROP
 2591 1206 FFF799F8 		BL	DUPP
 2592 120a FFF729F9 		BL	ONEP
 2593 120e FFF779F8 		BL	TOR
 2594              	PARS7:
 2595 1212 FFF7A5F8 		BL	OVER
 2596 1216 FFF7FDF8 		BL	SUBB
 2597 121a FFF761F8 		BL	RFROM
 2598 121e FFF75FF8 		BL	RFROM
 2599 1222 FFF7F7F8 		BL	SUBB
 2600 1226 52F804EB 		_UNNEST
 2600      7047
 2601              	PARS8:
 2602 122c FFF798F8 		BL	OVER
 2603 1230 FFF756F8 		BL	RFROM
 2604 1234 FFF7EEF8 		BL	SUBB
 2605 1238 52F804EB 		_UNNEST
 2605      7047
 2606              	
 2607              	//    PARSE	( c -- b u //  string> )
 2608              	// 	Scan input stream and return counted string delimited by c.
 2609              	
 2610 123e 04110000 		.word	_QUEST-MAPOFFSET
 2611 1242 05       	_PARSE:	.byte  5
 2612 1243 50415253 		.ascii "PARSE"
 2612      45
 2613              		.p2align 2 	
 2614              	PARSE:
 2615 1248 42F804ED 		_NEST
 2616 124c FFF75AF8 		BL	TOR
 2617 1250 FFF702FC 		BL	TIB
 2618 1254 FFF776FA 		BL	INN
 2619 1258 FFF72CF8 		BL	AT
 2620 125c FFF7D2F8 		BL	PLUS			// current input buffer pointer
 2621 1260 FFF77AFA 		BL	NTIB
 2622 1264 FFF726F8 		BL	AT
 2623 1268 FFF76CFA 		BL	INN
 2624 126c FFF722F8 		BL	AT
 2625 1270 FFF7D0F8 		BL	SUBB			// remaining count
 2626 1274 FFF734F8 		BL	RFROM
 2627 1278 FFF74FFF 		BL	PARS
 2628 127c FFF762FA 		BL	INN
 2629 1280 FFF7DCF9 		BL	PSTOR
 2630 1284 52F804EB 		_UNNEST
 2630      7047
 2631              	
 2632              	//    .(	  ( -- )
 2633              	// 	Output following string up to next ) .
 2634              	
 2635 128a 42120000 		.word	_PARSE-MAPOFFSET
 2636 128e 82       	_DOTPR:	.byte  IMEDD+2
 2637 128f 2E28     		.ascii ".("
 2638 1291 0000BF   		.p2align 2 	
 2639              	DOTPR:
 2640 1294 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 51


 2641 1298 FEF7C3FF 		_DOLIT
 2642 129c 29000000 		.word	')'
 2643 12a0 FFF7D2FF 		BL	PARSE
 2644 12a4 FFF766FE 		BL	TYPEE
 2645 12a8 52F804EB 		_UNNEST
 2645      7047
 2646              	
 2647              	//    (	   ( -- )
 2648              	// 	Ignore following string up to next ) . A comment.
 2649              	
 2650 12ae 8E120000 		.word	_DOTPR-MAPOFFSET
 2651 12b2 81       	_PAREN:	.byte  IMEDD+1
 2652 12b3 28       		.ascii "("
 2653              		.p2align 2 	
 2654              	PAREN:
 2655 12b4 42F804ED 		_NEST
 2656 12b8 FEF7B3FF 		_DOLIT
 2657 12bc 29000000 		.word	')'
 2658 12c0 FFF7C2FF 		BL	PARSE
 2659 12c4 FFF73AF9 		BL	DDROP
 2660 12c8 52F804EB 		_UNNEST
 2660      7047
 2661              	
 2662              	//    \	   ( -- )
 2663              	// 	Ignore following text till the end of line.
 2664              	
 2665 12ce B2120000 		.word	_PAREN-MAPOFFSET
 2666 12d2 81       	_BKSLA:	.byte  IMEDD+1
 2667 12d3 27       		.byte	'\'
 2668              		.p2align 2 	
 2669              	BKSLA:
 2670 12d4 42F804ED 		_NEST
 2671 12d8 FFF73EFA 		BL	NTIB
 2672 12dc FEF7EAFF 		BL	AT
 2673 12e0 FFF730FA 		BL	INN
 2674 12e4 FEF7DCFF 		BL	STORE
 2675 12e8 52F804EB 		_UNNEST
 2675      7047
 2676              	
 2677              	//    CHAR	( -- c )
 2678              	// 	Parse next word and return its first character.
 2679              	
 2680 12ee D2120000 		.word	_BKSLA-MAPOFFSET
 2681 12f2 04       	_CHAR:	.byte  4
 2682 12f3 43484152 		.ascii "CHAR"
 2683 12f7 00       		.p2align 2 	
 2684              	CHAR:
 2685 12f8 42F804ED 		_NEST
 2686 12fc FFF7E0F8 		BL	BLANK
 2687 1300 FFF7A2FF 		BL	PARSE
 2688 1304 FFF712F8 		BL	DROP
 2689 1308 FEF7E4FF 		BL	CAT
 2690 130c 52F804EB 		_UNNEST
 2690      7047
 2691              	
 2692              	//    WORD	( c -- a //  string> )
 2693              	// 	Parse a word from input stream and copy it to code dictionary.
ARM GAS  stm32eforth.s 			page 52


 2694              	
 2695 1312 F2120000 		.word	_CHAR-MAPOFFSET
 2696 1316 04       	_WORDD:	.byte  4
 2697 1317 574F5244 		.ascii "WORD"
 2698 131b 00       		.p2align 2 	
 2699              	WORDD:
 2700 131c 42F804ED 		_NEST
 2701 1320 FFF792FF 		BL	PARSE
 2702 1324 FFF77CFB 		BL	HERE
 2703 1328 FFF7BAF8 		BL	CELLP
 2704 132c FFF7F2FB 		BL	PACKS
 2705 1330 52F804EB 		_UNNEST
 2705      7047
 2706              	
 2707              	//    TOKEN	( -- a //  string> )
 2708              	// 	Parse a word from input stream and copy it to name dictionary.
 2709              	
 2710 1336 16130000 		.word	_WORDD-MAPOFFSET
 2711 133a 05       	_TOKEN:	.byte  5
 2712 133b 544F4B45 		.ascii "TOKEN"
 2712      4E
 2713              		.p2align 2 	
 2714              	TOKEN:
 2715 1340 42F804ED 		_NEST
 2716 1344 FFF7BCF8 		BL	BLANK
 2717 1348 FFF7E8FF 		BL	WORDD
 2718 134c 52F804EB 		_UNNEST
 2718      7047
 2719              	
 2720              	// **************************************************************************
 2721              	//  Dictionary search
 2722              	
 2723              	//    NAME>	( na -- ca )
 2724              	// 	Return a code address given a name address.
 2725              	
 2726 1352 3A130000 		.word	_TOKEN-MAPOFFSET
 2727 1356 05       	_NAMET:	.byte  5
 2728 1357 4E414D45 		.ascii "NAME>"
 2728      3E
 2729              		.p2align 2 	
 2730              	NAMET:
 2731 135c 42F804ED 		_NEST
 2732 1360 FFF790F9 		BL	COUNT
 2733 1364 FEF75DFF 		_DOLIT
 2734 1368 1F000000 		.word	0x1F
 2735 136c FFF70AF8 		BL	ANDD
 2736 1370 FFF748F8 		BL	PLUS
 2737 1374 FFF7FCFA 		BL	ALGND
 2738 1378 52F804EB 		_UNNEST
 2738      7047
 2739              	
 2740              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2741              	// 	Compare u bytes in two strings. Return 0 if identical.
 2742              	//
 2743              	//  Picatout 2020-12-01, 
 2744              	//      Because of problem with .align directive that
 2745              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
ARM GAS  stm32eforth.s 			page 53


 2746              	// 		words  to do a byte by byte comparison. 
 2747              	//
 2748 137e 56130000 		.word	_NAMET-MAPOFFSET
 2749 1382 05       	_SAMEQ:	.byte  5
 2750 1383 53414D45 		.ascii "SAME?"
 2750      3F
 2751              		.p2align 2	
 2752              	SAMEQ:
 2753 1388 42F804ED 		_NEST
 2754 138c FEF7BAFF 		BL	TOR
 2755 1390 00F01FB8 		B.W	SAME2
 2756              	SAME1:
 2757 1394 FEF7E4FF 		BL	OVER  // ( a1 a2 -- a1 a2 a1 )
 2758 1398 FEF7ACFF 		BL	RAT   // a1 a2 a1 u 
 2759 139c FFF732F8 		BL	PLUS  // a1 a2 a1+u 
 2760 13a0 FEF798FF 		BL	CAT	   // a1 a2 c1    		
 2761 13a4 FEF7DCFF 		BL	OVER  // a1 a2 c1 a2 
 2762 13a8 FEF7A4FF 		BL	RAT    
 2763 13ac FFF72AF8 		BL	PLUS    
 2764 13b0 FEF790FF 		BL	CAT	  // a1 a2 c1 c2
 2765 13b4 FFF72EF8 		BL	SUBB  
 2766 13b8 FFF7ACF8 		BL	QDUP
 2767 13bc FEF754FF 		BL	QBRAN
 2768 13c0 D2130000 		.word	SAME2-MAPOFFSET
 2769 13c4 FEF78CFF 		BL	RFROM
 2770 13c8 FEF7B0FF 		BL	DROP
 2771 13cc 52F804EB 		_UNNEST	// strings not equal
 2771      7047
 2772              	SAME2:
 2773 13d2 FEF73AFF 		BL	DONXT
 2774 13d6 94130000 		.word	SAME1-MAPOFFSET
 2775 13da FEF722FF 		_DOLIT
 2776 13de 00000000 		.word	0
 2777 13e2 52F804EB 		_UNNEST	// strings equal
 2777      7047
 2778              	
 2779              	//    find	( a na -- ca na | a F )
 2780              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2781              	
 2782              	//  Picatout 2020-12-01,  
 2783              	//		Modified from original. See comment for word "SAME?" 
 2784              	
 2785              	// 	.word	_SAMEQ-MAPOFFSET
 2786              	// _FIND	.byte  4
 2787              	// 	.ascii "find"
 2788              	// 	.p2align 2 	
 2789              	FIND:
 2790 13e8 42F804ED 		_NEST
 2791 13ec FEF7AEFF 		BL	SWAP			// na a	
 2792 13f0 FFF748F9 		BL	COUNT			// na a+1 count
 2793 13f4 FEF7A2FF 		BL	DUPP 
 2794 13f8 FFF78FF9 		BL	TEMP
 2795 13fc FEF750FF 		BL	STORE			// na a+1 count 
 2796 1400 FEF780FF 		BL  TOR		// na a+1  R: count  
 2797 1404 FEF7A2FF 		BL	SWAP			// a+1 na
 2798              	FIND1:
 2799 1408 FEF798FF 		BL	DUPP			// a+1 na na
ARM GAS  stm32eforth.s 			page 54


 2800 140c FEF72CFF 		BL	QBRAN
 2801 1410 58140000 		.word	FIND6-MAPOFFSET	// end of vocabulary
 2802 1414 FEF792FF 		BL	DUPP			// a+1 na na
 2803 1418 FEF75CFF 		BL	CAT			// a+1 na name1
 2804 141c FEF701FF 		_DOLIT
 2805 1420 1FFFFFFF 		.word	MASKK
 2806 1424 FEF7AEFF 		BL	ANDD
 2807 1428 FEF764FF 		BL	RAT			// a+1 na name1 count 
 2808 142c FEF7BEFF 		BL	XORR			// a+1 na,  same length?
 2809 1430 FEF71AFF 		BL	QBRAN
 2810 1434 44140000 		.word	FIND2-MAPOFFSET
 2811 1438 FFF73AF8 		BL	CELLM			// a+1 la
 2812 143c FEF73AFF 		BL	AT			// a+1 next_na
 2813 1440 FFF7E2BF 		B.w	FIND1			// try next word
 2814              	FIND2:   
 2815 1444 FFF70CF8 		BL	ONEP			// a+1 na+1
 2816 1448 FFF767F9 		BL	TEMP
 2817 144c FEF732FF 		BL	AT			// a+1 na+1 count
 2818 1450 FFF79AFF 		BL	SAMEQ		// a+1 na+1 ? 
 2819              	FIND3:	
 2820 1454 00F00DB8 		B.w	FIND4
 2821              	FIND6:	
 2822 1458 FEF742FF 		BL	RFROM			// a+1 0 name1 -- , no match
 2823 145c FEF766FF 		BL	DROP			// a+1 0
 2824 1460 FEF774FF 		BL	SWAP			// 0 a+1
 2825 1464 FFF704F8 		BL	ONEM			// 0 a
 2826 1468 FEF770FF 		BL	SWAP			// a 0 
 2827 146c 52F804EB 		_UNNEST			// return without a match
 2827      7047
 2828              	FIND4:	
 2829 1472 FEF7F9FE 		BL	QBRAN			// a+1 na+1
 2830 1476 8A140000 		.word	FIND5-MAPOFFSET	// found a match
 2831 147a FEF7F9FF 		BL	ONEM			// a+1 na
 2832 147e FFF717F8 		BL	CELLM			// a+4 la
 2833 1482 FEF717FF 		BL	AT			// a+1 next_na
 2834 1486 FFF7BFBF 		B.w	FIND1			// compare next name
 2835              	FIND5:	
 2836 148a FEF729FF 		BL	RFROM			// a+1 na+1 count
 2837 148e FEF74DFF 		BL	DROP			// a+1 na+1
 2838 1492 FEF75BFF 		BL	SWAP			// na+1 a+1
 2839 1496 FEF749FF 		BL	DROP			// na+1
 2840 149a FEF7E9FF 		BL	ONEM			// na
 2841 149e FEF74DFF 		BL	DUPP			// na na
 2842 14a2 FFF75BFF 		BL	NAMET			// na ca
 2843 14a6 FEF751FF 		BL	SWAP			// ca na
 2844 14aa 52F804EB 		_UNNEST			//  return with a match
 2844      7047
 2845              	
 2846              	//    NAME?	( a -- ca na | a F )
 2847              	// 	Search all context vocabularies for a string.
 2848              	
 2849 14b0 82130000 		.word	_SAMEQ-MAPOFFSET
 2850 14b4 05       	_NAMEQ:	.byte  5
 2851 14b5 4E414D45 		.ascii "NAME?"
 2851      3F
 2852 14ba 00BF     		.p2align 2 	
 2853              	NAMEQ:
ARM GAS  stm32eforth.s 			page 55


 2854 14bc 42F804ED 		_NEST
 2855 14c0 FFF76AF9 		BL	CNTXT
 2856 14c4 FEF7F6FE 		BL	AT
 2857 14c8 FFF78EFF 		BL	FIND
 2858 14cc 52F804EB 		_UNNEST
 2858      7047
 2859              	
 2860              	// **************************************************************************
 2861              	//  Terminal input
 2862              	
 2863              	//    	  ( bot eot cur -- bot eot cur )
 2864              	// 	Backup the cursor by one character.
 2865              	
 2866              	// 	.word	_NAMEQ-MAPOFFSET
 2867              	// _BKSP	.byte  2
 2868              	// 	.ascii "^H"
 2869              	// 	.p2align 2 	
 2870              	BKSP:
 2871 14d2 42F804ED 		_NEST
 2872 14d6 FEF715FF 		BL	TOR
 2873 14da FEF741FF 		BL	OVER
 2874 14de FEF7FFFE 		BL	RFROM
 2875 14e2 FEF733FF 		BL	SWAP
 2876 14e6 FEF73BFF 		BL	OVER
 2877 14ea FEF75FFF 		BL	XORR
 2878 14ee FEF7BBFE 		BL	QBRAN
 2879 14f2 1A150000 		.word	BACK1-MAPOFFSET
 2880 14f6 FEF794FE 		_DOLIT
 2881 14fa 08000000 		.word	BKSPP
 2882 14fe FEF77FFE 		BL	TECHO
 2883              	// 	BL	ATEXE
 2884 1502 FEF7B5FF 		BL	ONEM
 2885 1506 FEF7DBFF 		BL	BLANK
 2886 150a FEF779FE 		BL	TECHO
 2887              	// 	BL	ATEXE
 2888 150e FEF788FE 		_DOLIT
 2889 1512 08000000 		.word	BKSPP
 2890 1516 FEF773FE 		BL	TECHO
 2891              	// 	BL	ATEXE
 2892              	BACK1:
 2893 151a 52F804EB 		  _UNNEST
 2893      7047
 2894              	
 2895              	//    TAP	 ( bot eot cur c -- bot eot cur )
 2896              	// 	Accept and echo the key stroke and bump the cursor.
 2897              	
 2898              	// 	.word	_BKSP-MAPOFFSET
 2899              	// _TAP	.byte  3
 2900              	// 	.ascii "TAP"
 2901              	// 	.p2align 2 	
 2902              	TAP:
 2903 1520 42F804ED 		_NEST
 2904 1524 FEF70AFF 		BL	DUPP
 2905 1528 FEF76AFE 		BL	TECHO
 2906              	// 	BL	ATEXE
 2907 152c FEF718FF 		BL	OVER
 2908 1530 FEF7C6FE 		BL	CSTOR
ARM GAS  stm32eforth.s 			page 56


 2909 1534 FEF794FF 		BL	ONEP
 2910 1538 52F804EB 		_UNNEST
 2910      7047
 2911              	
 2912              	//    kTAP	( bot eot cur c -- bot eot cur )
 2913              	// 	Process a key stroke, CR or backspace.
 2914              	
 2915              	// 	.word	_TAP-MAPOFFSET
 2916              	// _KTAP	.byte  4
 2917              	// 	.ascii "kTAP"
 2918              	// 	.p2align 2 	
 2919              	KTAP:
 2920              	TTAP:
 2921 153e 42F804ED 		_NEST
 2922 1542 FEF7FBFE 		BL	DUPP
 2923 1546 FEF76CFE 		_DOLIT
 2924 154a 0D000000 		.word	CRR
 2925 154e FEF72DFF 		BL	XORR
 2926 1552 FEF789FE 		BL	QBRAN
 2927 1556 8A150000 		.word	KTAP2-MAPOFFSET
 2928 155a FEF762FE 		_DOLIT
 2929 155e 08000000 		.word	BKSPP
 2930 1562 FEF723FF 		BL	XORR
 2931 1566 FEF77FFE 		BL	QBRAN
 2932 156a 80150000 		.word	KTAP1-MAPOFFSET
 2933 156e FEF7A7FF 		BL	BLANK
 2934 1572 FFF7D5FF 		BL	TAP
 2935 1576 52F804EB 		_UNNEST
 2935      7047
 2936 157c 00000000 		.word	0			// patch
 2937              	KTAP1:
 2938 1580 FFF7A7FF 	  BL	BKSP
 2939 1584 52F804EB 		_UNNEST
 2939      7047
 2940              	KTAP2:
 2941 158a FEF7CFFE 	  BL	DROP
 2942 158e FEF7DDFE 		BL	SWAP
 2943 1592 FEF7CBFE 		BL	DROP
 2944 1596 FEF7D1FE 		BL	DUPP
 2945 159a 52F804EB 		_UNNEST
 2945      7047
 2946              	
 2947              	//    ACCEPT	( b u -- b u )
 2948              	// 	Accept characters to input buffer. Return with actual count.
 2949              	
 2950 15a0 B4140000 		.word	_NAMEQ-MAPOFFSET
 2951 15a4 06       	_ACCEP:	.byte  6
 2952 15a5 41434345 		.ascii "ACCEPT"
 2952      5054
 2953 15ab 00       		.p2align 2 	
 2954              	ACCEP:
 2955 15ac 42F804ED 		_NEST
 2956 15b0 FEF7D6FE 		BL	OVER
 2957 15b4 FEF726FF 		BL	PLUS
 2958 15b8 FEF7D2FE 		BL	OVER
 2959              	ACCP1:
 2960 15bc FEF7C8FF 	  BL	DDUP
ARM GAS  stm32eforth.s 			page 57


 2961 15c0 FEF7F4FE 		BL	XORR
 2962 15c4 FEF750FE 		BL	QBRAN
 2963 15c8 F8150000 		.word	ACCP4-MAPOFFSET
 2964 15cc FFF78AFC 		BL	KEY
 2965 15d0 FEF7B4FE 		BL	DUPP
 2966 15d4 FEF774FF 		BL	BLANK
 2967 15d8 FEF723FE 		_DOLIT
 2968 15dc 7F000000 		.word	127
 2969 15e0 FFF704F9 		BL	WITHI
 2970 15e4 FEF740FE 		BL	QBRAN
 2971 15e8 F2150000 		.word	ACCP2-MAPOFFSET
 2972 15ec FFF798FF 		BL	TAP
 2973 15f0 01E0     		B	ACCP3
 2974              	ACCP2:
 2975 15f2 FFF7A4FF 	  BL	KTAP
 2976              	// 	BL	ATEXE
 2977              	ACCP3:	  
 2978 15f6 E1E7     		B	ACCP1
 2979              	ACCP4:
 2980 15f8 FEF798FE 	  BL	DROP
 2981 15fc FEF7B0FE 		BL	OVER
 2982 1600 FEF708FF 		BL	SUBB
 2983 1604 52F804EB 		_UNNEST
 2983      7047
 2984              	
 2985              	//    QUERY	( -- )
 2986              	// 	Accept input stream to terminal input buffer.
 2987              	
 2988 160a A4150000 		.word	_ACCEP-MAPOFFSET
 2989 160e 05       	_QUERY:	.byte  5
 2990 160f 51554552 		.ascii "QUERY"
 2990      59
 2991              		.p2align 2 	
 2992              	QUERY:
 2993 1614 42F804ED 		_NEST
 2994 1618 FFF71EFA 		BL	TIB
 2995 161c FEF701FE 		_DOLIT
 2996 1620 50000000 		.word	80
 2997 1624 FFF7C2FF 		BL	ACCEP
 2998 1628 FFF796F8 		BL	NTIB
 2999 162c FEF738FE 		BL	STORE
 3000 1630 FEF77CFE 		BL	DROP
 3001 1634 FEF7F5FD 		_DOLIT
 3002 1638 00000000 		.word	0
 3003 163c FFF782F8 		BL	INN
 3004 1640 FEF72EFE 		BL	STORE
 3005 1644 52F804EB 		_UNNEST
 3005      7047
 3006              	
 3007              	// **************************************************************************
 3008              	//  Error handling
 3009              	
 3010              	//    ABORT	( a -- )
 3011              	// 	Reset data stack and jump to QUIT.
 3012              	
 3013 164a 0E160000 		.word	_QUERY-MAPOFFSET
 3014 164e 05       	_ABORT:	.byte  5
ARM GAS  stm32eforth.s 			page 58


 3015 164f 41424F52 		.ascii "ABORT"
 3015      54
 3016              		.p2align 2 	
 3017              	ABORT:
 3018 1654 42F804ED 		_NEST
 3019 1658 FFF762FC 		BL	SPACE
 3020 165c FFF712F8 		BL	COUNT
 3021 1660 FFF788FC 		BL	TYPEE
 3022 1664 FEF7DDFD 		_DOLIT
 3023 1668 3F000000 		.word	0X3F
 3024 166c FEF7C8FD 		BL	EMIT
 3025 1670 FFF798FC 		BL	CR
 3026 1674 00F0BCF8 		BL	PRESE
 3027 1678 00F0C6B8 		B.W	QUIT
 3028              	
 3029              	//    _abort"	( f -- )
 3030              	// 	Run time routine of ABORT" . Abort with a message.
 3031              	
 3032              	// 	.word	_ABORT-MAPOFFSET
 3033              	// _ABORQ	.byte  COMPO+6
 3034              	// 	.ascii "abort\""
 3035              	// 	.p2align 2 	
 3036              	ABORQ:
 3037 167c 42F804ED 		_NEST
 3038 1680 FEF7F2FD 		BL	QBRAN
 3039 1684 9C160000 		.word	ABOR1-MAPOFFSET	// text flag
 3040 1688 FFF79DFC 		BL	DOSTR
 3041 168c FEF7FAFF 		BL	COUNT
 3042 1690 FFF770FC 		BL	TYPEE
 3043 1694 FFF786FC 		BL	CR
 3044 1698 00F0B6B8 		B.W	QUIT
 3045              	ABOR1:
 3046 169c FFF793FC 	  BL	DOSTR
 3047 16a0 FEF744FE 		BL	DROP
 3048 16a4 52F804EB 		_UNNEST			// drop error
 3048      7047
 3049              	
 3050              	// **************************************************************************
 3051              	//  The text interpreter
 3052              	
 3053              	//    $INTERPRET  ( a -- )
 3054              	// 	Interpret a word. If failed, try to convert it to an integer.
 3055              	
 3056 16aa 4E160000 		.word	_ABORT-MAPOFFSET
 3057 16ae 0A       	_INTER:	.byte  10
 3058 16af 2424494E 		.ascii "$$INTERPRET"
 3058      54455250 
 3058      524554
 3059 16ba 00BF     		.p2align 2 	
 3060              	INTER:
 3061 16bc 42F804ED 		_NEST
 3062 16c0 FFF7FCFE 		BL	NAMEQ
 3063 16c4 FEF726FF 		BL	QDUP	// ?defined
 3064 16c8 FEF7CEFD 		BL	QBRAN
 3065 16cc FE160000 		.word	INTE1-MAPOFFSET
 3066 16d0 FEF7F0FD 		BL	AT
 3067 16d4 FEF7A5FD 		_DOLIT
ARM GAS  stm32eforth.s 			page 59


 3068 16d8 40000000 		.word	COMPO
 3069 16dc FEF752FE 		BL	ANDD	// ?compile only lexicon bits
 3070 16e0 FFF7CCFF 		BL	ABORQ
 3071 16e4 0D       		.byte	13
 3072 16e5 20636F6D 		.ascii " compile only"
 3072      70696C65 
 3072      206F6E6C 
 3072      79
 3073 16f2 00BF     		.p2align 2 	
 3074 16f4 FEF7A4FD 		BL	EXECU
 3075 16f8 52F804EB 		_UNNEST			// execute defined word
 3075      7047
 3076              	INTE1:
 3077 16fe FFF755FB 	  BL	NUMBQ
 3078 1702 FEF7B1FD 		BL	QBRAN
 3079 1706 10170000 		.word	INTE2-MAPOFFSET
 3080 170a 52F804EB 		_UNNEST
 3080      7047
 3081              	INTE2:
 3082 1710 FFF7A0BF 	  B.W	ABORT	// error
 3083              	
 3084              	//    [	   ( -- )
 3085              	// 	Start the text interpreter.
 3086              	
 3087 1714 AE160000 		.word	_INTER-MAPOFFSET
 3088 1718 81       	_LBRAC:	.byte  IMEDD+1
 3089 1719 5B       		.ascii "["
 3090 171a 00BF     		.p2align 2 	
 3091              	LBRAC:
 3092 171c 42F804ED 		_NEST
 3093 1720 FEF77FFD 		_DOLIT
 3094 1724 BC160000 		.word	INTER-MAPOFFSET
 3095 1728 FFF720F8 		BL	TEVAL
 3096 172c FEF7B8FD 		BL	STORE
 3097 1730 52F804EB 		_UNNEST
 3097      7047
 3098              	
 3099              	//    .OK	 ( -- )
 3100              	// 	Display "ok" only while interpreting.
 3101              	
 3102 1736 18170000 		.word	_LBRAC-MAPOFFSET
 3103 173a 03       	_DOTOK:	.byte  3
 3104 173b 2E4F4B   		.ascii ".OK"
 3105 173e 00BF     		.p2align 2 	
 3106              	DOTOK:
 3107 1740 42F804ED 		_NEST
 3108 1744 FEF76DFD 		_DOLIT
 3109 1748 BC160000 		.word	INTER-MAPOFFSET
 3110 174c FFF70EF8 		BL	TEVAL
 3111 1750 FEF7B0FD 		BL	AT
 3112 1754 FEF72EFF 		BL	EQUAL
 3113 1758 FEF786FD 		BL	QBRAN
 3114 175c 68170000 		.word	DOTO1-MAPOFFSET
 3115 1760 FFF75CFC 		BL	DOTQP
 3116 1764 03       		.byte	3
 3117 1765 206F6B   		.ascii " ok"
 3118              	DOTO1:
ARM GAS  stm32eforth.s 			page 60


 3119 1768 FFF71CFC 		BL	CR
 3120 176c 52F804EB 		_UNNEST
 3120      7047
 3121              	
 3122              	//    ?STACK	( -- )
 3123              	// 	Abort if the data stack underflows.
 3124              	
 3125 1772 3A170000 		.word	_DOTOK-MAPOFFSET
 3126 1776 06       	_QSTAC:	.byte  6
 3127 1777 3F535441 		.ascii "?STACK"
 3127      434B
 3128 177d 0000BF   		.p2align 2 	
 3129              	QSTAC:
 3130 1780 42F804ED 		_NEST
 3131 1784 FFF726F9 		BL	DEPTH
 3132 1788 FEF7F2FD 		BL	ZLESS	// check only for underflow
 3133 178c FFF776FF 		BL	ABORQ
 3134 1790 0A       		.byte	10
 3135 1791 20756E64 		.ascii " underflow"
 3135      6572666C 
 3135      6F77
 3136 179b 00       		.p2align 2 	
 3137 179c 52F804EB 		_UNNEST
 3137      7047
 3138              	
 3139              	//    EVAL	( -- )
 3140              	// 	Interpret the input stream.
 3141              	
 3142 17a2 76170000 		.word	_QSTAC-MAPOFFSET
 3143 17a6 04       	_EVAL:	.byte  4
 3144 17a7 4556414C 		.ascii "EVAL"
 3145 17ab 00       		.p2align 2 	
 3146              	EVAL:
 3147 17ac 42F804ED 		_NEST
 3148              	EVAL1:
 3149 17b0 FFF7C6FD 	    BL	TOKEN
 3150 17b4 FEF7C2FD 		BL	DUPP
 3151 17b8 FEF78CFD 		BL	CAT	// ?input stream empty
 3152 17bc FEF754FD 		BL	QBRAN
 3153 17c0 D4170000 		.word	EVAL2-MAPOFFSET
 3154 17c4 FEF7D2FF 		BL	TEVAL
 3155 17c8 FFF752F9 		BL	ATEXE
 3156 17cc FFF7D8FF 		BL	QSTAC	// evaluate input, check stack
 3157 17d0 FFF7EEBF 		B.W	EVAL1
 3158              	EVAL2:
 3159 17d4 FEF7AAFD 		BL	DROP
 3160 17d8 FFF7B2FF 		BL	DOTOK
 3161 17dc 52F804EB 		_UNNEST	// prompt
 3161      7047
 3162              	
 3163              	//    PRESET	( -- )
 3164              	// 	Reset data stack pointer and the terminal input buffer.
 3165              	
 3166 17e2 A6170000 		.word	_EVAL-MAPOFFSET
 3167 17e6 06       	_PRESE:	.byte  6
 3168 17e7 50524553 		.ascii "PRESET"
 3168      4554
ARM GAS  stm32eforth.s 			page 61


 3169 17ed 0000BF   		.p2align 2 	
 3170              	PRESE:
 3171              	//	_NEST
 3172 17f0 44F68061 		MOVW	R1,#SPP&0xffff		//  init SP
 3173 17f4 C2F20001 	 	MOVT	R1,#SPP>>16
 3174 17f8 85EA0505 		EOR	R5,R5,R5			//  init TOS=0
 3175              	//	_UNNEST
 3176 17fc 7047     		_NEXT
 3177              	
 3178              	//    QUIT	( -- )
 3179              	// 	Reset return stack pointer and start text interpreter.
 3180              	
 3181 17fe E6170000 		.word	_PRESE-MAPOFFSET
 3182 1802 04       	_QUIT:	.byte  4
 3183 1803 51554954 		.ascii "QUIT"
 3184 1807 00       		.p2align 2 	
 3185              	QUIT:
 3186 1808 42F804ED 		_NEST
 3187 180c 44F68072 		MOVW	R2,#RPP&0xffff  /* RESET RSTACK */
 3188 1810 C2F20002 	 	MOVT	R2,#RPP>>16 
 3189              	QUIT1:
 3190 1814 FFF782FF 		BL	LBRAC			// start interpretation
 3191              	QUIT2:
 3192 1818 FFF7FCFE 		BL	QUERY			// get input
 3193 181c FFF7C6FF 		BL	EVAL
 3194 1820 FEF72EFD 		BL	BRAN
 3195 1824 18180000 		.word	QUIT2-MAPOFFSET	// continue till error
 3196              	
 3197              	/***************************
 3198              	//  Flash memory interface
 3199              	***************************/
 3200              	UNLOCK:	//  unlock flash memory	
 3201 1828 DFF8B80A 		ldr	r0, =FLASH_BASE_ADR
 3202 182c DFF8B84A 		ldr	r4, =FLASH_KEY1
 3203 1830 4460     		str	r4, [r0, #FLASH_KEYR]
 3204 1832 DFF8B84A 		ldr	r4, =FLASH_KEY2 
 3205 1836 4460     		str	r4, [r0, #FLASH_KEYR]
 3206              		/* unlock option registers */
 3207 1838 DFF8AC4A 		ldr	r4, =FLASH_KEY1
 3208 183c 8460     		str	r4, [r0, #FLASH_OPTKEYR]
 3209 183e DFF8AC4A 		ldr	r4, =FLASH_KEY2
 3210 1842 8460     		str	r4, [r0, #FLASH_OPTKEYR]
 3211 1844 7047     		_NEXT
 3212              	WAIT_BSY:
 3213 1846 DFF89C0A 		ldr	r0,=FLASH_BASE_ADR
 3214              	WAIT1:
 3215 184a C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 3216 184c 14F00104 		ands	r4, #0x1	//  BSY
 3217 1850 FBD1     		bne	WAIT1
 3218 1852 7047     		_NEXT
 3219              	
 3220              	LOCK: // lock flash memory 
 3221 1854 DFF88C0A 		ldr r0,=FLASH_BASE_ADR 
 3222 1858 0469     		ldr r4,[r0,#FLASH_CR]
 3223 185a 44F08004 		orr r4,#(1<<7)
 3224 185e 0461     		str r4,[r0,#FLASH_CR]
 3225 1860 7047     		_NEXT 
ARM GAS  stm32eforth.s 			page 62


 3226              	
 3227              	
 3228              	//    ERASE_SECTOR	   ( sector -- )
 3229              	// 	  Erase one sector of flash memory.  Sector=0 to 11
 3230              	
 3231 1862 02180000 		.word	_QUIT-MAPOFFSET
 3232 1866 0C       	_ESECT:	.byte  12
 3233 1867 45524153 		.ascii "ERASE_SECTOR"
 3233      455F5345 
 3233      43544F52 
 3234 1873 00       		.p2align 2 	
 3235              	
 3236              	ESECT: 	//  sector --
 3237 1874 42F804ED 		_NEST
 3238 1878 FFF7E5FF 		bl	WAIT_BSY
 3239 187c 0469     		ldr	r4,[r0, #FLASH_CR]	
 3240 187e 24F07804 		bic	r4,r4,#0x78	//  clear SNB
 3241 1882 4FEAC505 		lsl	R5,R5,#3		//  align sector #
 3242 1886 44EA0504 		orr	r4,r4,r5		//  put in sector #
 3243 188a 44F48034 		orr	R4,R4,#0x10000	//  set STRT bit
 3244 188e 44F40074 		orr	R4,R4,#0x200	//  PSIZE=32
 3245 1892 44F00204 		orr	R4,R4,#2		//  set SER bit, enable erase
 3246 1896 0461     		str	r4,[r0, #0x10]	//  start erasing
 3247              	// 	bl	WAIT_BSY
 3248 1898 51F8045B 		_POP
 3249 189c 52F804EB 		_UNNEST
 3249      7047
 3250              	
 3251              	//    I!	   ( data address -- )
 3252              	// 	   Write one word into flash memory
 3253              	
 3254 18a2 66180000 		.word	_ESECT-MAPOFFSET
 3255 18a6 02       	_ISTOR:	.byte  2
 3256 18a7 4921     		.ascii "I!"
 3257 18a9 0000BF   		.p2align 2 	
 3258              	
 3259              	ISTOR:	//  data address --
 3260 18ac 42F804ED 		_NEST
 3261 18b0 FFF7C9FF 		bl	WAIT_BSY
 3262 18b4 0469     		ldr	r4, [r0, #0x10]	//  FLASH_CR
 3263 18b6 44F00104 		orr	r4,R4,#0x1		//  PG
 3264 18ba 0461     		str	r4, [r0, #0x10]	//  enable programming
 3265 18bc FEF7F0FC 		bl	STORE
 3266 18c0 FFF7C1FF 		bl	WAIT_BSY
 3267 18c4 0469     		ldr	r4, [r0, #0x10]	//  FLASH_CR
 3268 18c6 24F00104 		bic	r4,R4,#0x1		//  PG
 3269 18ca 0461     		str	r4, [r0, #0x10]	//  disable programming
 3270 18cc 52F804EB 		_UNNEST
 3270      7047
 3271              	
 3272              	//    TURNKEY	( -- )
 3273              	// 	Copy dictionary from RAM to flash.
 3274              	
 3275 18d2 A6180000 		.word	_ISTOR-MAPOFFSET
 3276 18d6 07       	_TURN:	.byte   7
 3277 18d7 5455524E 		.ascii "TURNKEY"
 3277      4B4559
ARM GAS  stm32eforth.s 			page 63


 3278 18de 00BF     		.p2align 2 
 3279 18e0 42F804ED 	TURN:	_NEST
 3280 18e4 FEF79DFC 		_DOLIT			//  save user area
 3281 18e8 00FF0000 		.word	0XFF00
 3282 18ec FEF799FC 		_DOLIT
 3283 18f0 C0000000 		.word	0xC0			//  to boot array
 3284 18f4 FEF795FC 		_DOLIT
 3285 18f8 40000000 		.word	0x40
 3286 18fc FFF7DCF8 		BL	MOVE
 3287 1900 FEF78FFC 		_DOLIT
 3288 1904 00000000 		.word	0
 3289 1908 FEF78BFC 		_DOLIT
 3290 190c 00000008 		.word	0x8000000
 3291 1910 FEF74CFF 		BL	CPP
 3292 1914 FEF7CEFC 		BL	AT
 3293 1918 FEF7E4FD 		BL	CELLSL
 3294 191c FEF7F2FC 		BL	TOR
 3295              	TURN1:
 3296 1920 FEF71EFD 		BL	OVER
 3297 1924 FEF7C6FC 		BL	AT
 3298 1928 FEF71AFD 		BL	OVER
 3299 192c FFF7BEFF 		BL	ISTOR
 3300 1930 FEF70CFD 		BL	SWAP
 3301 1934 FEF7B4FD 		BL	CELLP
 3302 1938 FEF708FD 		BL	SWAP
 3303 193c FEF7B0FD 		BL	CELLP
 3304 1940 FEF783FC 		BL	DONXT
 3305 1944 20190000 		.word	TURN1-MAPOFFSET
 3306 1948 FEF7F8FD 		BL	DDROP
 3307 194c 52F804EB 		_UNNEST
 3307      7047
 3308              	
 3309              	// **************************************************************************
 3310              	//  The compiler
 3311              	
 3312              	//    '	   ( -- ca )
 3313              	// 	Search context vocabularies for the next word in input stream.
 3314              	
 3315 1952 D6180000 		.word	_TURN-MAPOFFSET
 3316 1956 01       	_TICK:	.byte  1
 3317 1957 27       		.ascii "'"
 3318              		.p2align 2 	
 3319              	TICK:
 3320 1958 42F804ED 		_NEST
 3321 195c FFF7F0FC 		BL	TOKEN
 3322 1960 FFF7ACFD 		BL	NAMEQ	// ?defined
 3323 1964 FEF780FC 		BL	QBRAN
 3324 1968 72190000 		.word	TICK1-MAPOFFSET
 3325 196c 52F804EB 		_UNNEST	// yes, push code address
 3325      7047
 3326 1972 FFF76FBE 	TICK1:	B.W	ABORT	// no, error
 3327              	
 3328              	//    ALLOT	( n -- )
 3329              	// 	Allocate n bytes to the ram area.
 3330              	
 3331 1976 56190000 		.word	_TICK-MAPOFFSET
 3332 197a 05       	_ALLOT:	.byte  5
ARM GAS  stm32eforth.s 			page 64


 3333 197b 414C4C4F 		.ascii "ALLOT"
 3333      54
 3334              		.p2align 2 	
 3335              	ALLOT:
 3336 1980 42F804ED 		_NEST
 3337 1984 FEF712FF 		BL	CPP
 3338 1988 FEF758FE 		BL	PSTOR
 3339 198c 52F804EB 		_UNNEST			// adjust code pointer
 3339      7047
 3340              	
 3341              	//    ,	   ( w -- )
 3342              	// 	Compile an integer into the code dictionary.
 3343              	
 3344 1992 7A190000 		.word	_ALLOT-MAPOFFSET
 3345 1996 012C     	_COMMA:	.byte  1,','
 3346              		.p2align 2 	
 3347              	COMMA:
 3348 1998 42F804ED 		_NEST
 3349 199c FFF740F8 		BL	HERE
 3350 19a0 FEF7CCFC 		BL	DUPP
 3351 19a4 FEF77CFD 		BL	CELLP	// cell boundary
 3352 19a8 FEF700FF 		BL	CPP
 3353 19ac FEF778FC 		BL	STORE
 3354 19b0 FEF776FC 		BL	STORE
 3355 19b4 52F804EB 		_UNNEST	// adjust code pointer, compile
 3355      7047
 3356 19ba 00BF     		.p2align 2 
 3357              	//    [COMPILE]   ( -- //  string> )
 3358              	// 	Compile the next immediate word into code dictionary.
 3359              	
 3360 19bc 96190000 		.word	_COMMA-MAPOFFSET
 3361 19c0 89       	_BCOMP:	.byte  IMEDD+9
 3362 19c1 5B434F4D 		.ascii "[COMPILE]"
 3362      50494C45 
 3362      5D
 3363 19ca 00BF     		.p2align 2 	
 3364              	BCOMP:
 3365 19cc 42F804ED 		_NEST
 3366 19d0 FFF7C2FF 		BL	TICK
 3367 19d4 FFF7E0FF 		BL	COMMA
 3368 19d8 52F804EB 		_UNNEST
 3368      7047
 3369              	
 3370              	//    COMPILE	( -- )
 3371              	// 	Compile the next address in colon list to code dictionary.
 3372              	
 3373 19de C0190000 		.word	_BCOMP-MAPOFFSET
 3374 19e2 47       	_COMPI:	.byte  COMPO+7
 3375 19e3 434F4D50 		.ascii "COMPILE"
 3375      494C45
 3376 19ea 00BF     		.p2align 2 	
 3377              	COMPI:
 3378 19ec 42F804ED 		_NEST
 3379 19f0 FEF776FC 		BL	RFROM
 3380 19f4 25F00105 		BIC	R5,R5,#1
 3381 19f8 FEF7A0FC 		BL	DUPP
 3382 19fc FEF75AFC 		BL	AT
ARM GAS  stm32eforth.s 			page 65


 3383 1a00 00F0F7F9 		BL	CALLC			// compile BL instruction
 3384 1a04 FEF74CFD 		BL	CELLP
 3385 1a08 45F00105 		ORR	R5,R5,#1
 3386 1a0c FEF77AFC 		BL	TOR
 3387 1a10 52F804EB 		_UNNEST			// adjust return address
 3387      7047
 3388              	
 3389              	//    LITERAL	( w -- )
 3390              	// 	Compile tos to code dictionary as an integer literal.
 3391              	
 3392 1a16 E2190000 		.word	_COMPI-MAPOFFSET
 3393 1a1a 87       	_LITER:	.byte  IMEDD+7
 3394 1a1b 4C495445 		.ascii "LITERAL"
 3394      52414C
 3395 1a22 00BF     		.p2align 2 	
 3396              	LITER:
 3397 1a24 42F804ED 		_NEST
 3398 1a28 FFF7E0FF 		BL	COMPI
 3399 1a2c 22020000 		.word	DOLIT-MAPOFFSET
 3400 1a30 FFF7B2FF 		BL	COMMA
 3401 1a34 52F804EB 		_UNNEST
 3401      7047
 3402              	
 3403              	//    $,"	( -- )
 3404              	// 	Compile a literal string up to next " .
 3405              	
 3406              	// 	.word	_LITER-MAPOFFSET
 3407              	// _STRCQ	.byte  3
 3408              	// 	.ascii "$$,"""
 3409              	// 	.p2align 2 	
 3410              	STRCQ:
 3411 1a3a 42F804ED 		_NEST
 3412 1a3e FEF7F0FB 		_DOLIT
 3413 1a42 FCFFFFFF 		.word	-4
 3414 1a46 FEF7B1FE 		BL	CPP
 3415 1a4a FEF7F7FD 		BL	PSTOR
 3416 1a4e FEF7E8FB 		_DOLIT
 3417 1a52 22000000 		.word	'\"'
 3418 1a56 FFF761FC 		BL	WORDD			// moveDCB to code dictionary
 3419 1a5a FEF713FE 		BL	COUNT
 3420 1a5e FEF7D1FC 		BL	PLUS
 3421 1a62 FEF785FF 		BL	ALGND			// calculate aligned end of string
 3422 1a66 FEF7A1FE 		BL	CPP
 3423 1a6a FEF719FC 		BL	STORE
 3424 1a6e 52F804EB 		_UNNEST 			// adjust the code pointer
 3424      7047
 3425              	
 3426              	// **************************************************************************
 3427              	//  Structures
 3428              	
 3429              	//    FOR	 ( -- a )
 3430              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3431              	
 3432 1a74 1A1A0000 		.word	_LITER-MAPOFFSET
 3433 1a78 83       	_FOR:	.byte  IMEDD+3
 3434 1a79 464F52   		.ascii "FOR"
 3435              		.p2align 2 	
ARM GAS  stm32eforth.s 			page 66


 3436              	FOR:
 3437 1a7c 42F804ED 		_NEST
 3438 1a80 FFF7B4FF 		BL	COMPI
 3439 1a84 04030000 		.word	TOR-MAPOFFSET
 3440 1a88 FEF7CAFF 		BL	HERE
 3441 1a8c 52F804EB 		_UNNEST
 3441      7047
 3442              	
 3443              	//    BEGIN	( -- a )
 3444              	// 	Start an infinite or indefinite loop structure.
 3445              	
 3446 1a92 781A0000 		.word	_FOR-MAPOFFSET
 3447 1a96 85       	_BEGIN:	.byte  IMEDD+5
 3448 1a97 42454749 		.ascii "BEGIN"
 3448      4E
 3449              		.p2align 2 	
 3450              	BEGIN:
 3451 1a9c 42F804ED 		_NEST
 3452 1aa0 FEF7BEFF 		BL	HERE
 3453 1aa4 52F804EB 		_UNNEST
 3453      7047
 3454 1aaa 00BF     		.p2align 2 
 3455              	//    NEXT	( a -- )
 3456              	// 	Terminate a FOR-NEXT loop structure.
 3457              	
 3458 1aac 961A0000 		.word	_BEGIN-MAPOFFSET
 3459 1ab0 84       	_NEXT:	.byte  IMEDD+4
 3460 1ab1 4E455854 		.ascii "NEXT"
 3461 1ab5 0000BF   		.p2align 2 	
 3462              	NEXT:
 3463 1ab8 42F804ED 		_NEST
 3464 1abc FFF796FF 		BL	COMPI
 3465 1ac0 4A020000 		.word	DONXT-MAPOFFSET
 3466 1ac4 FFF768FF 		BL	COMMA
 3467 1ac8 52F804EB 		_UNNEST
 3467      7047
 3468              	
 3469              	//    UNTIL	( a -- )
 3470              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3471              	
 3472 1ace B01A0000 		.word	_NEXT-MAPOFFSET
 3473 1ad2 85       	_UNTIL:	.byte  IMEDD+5
 3474 1ad3 554E5449 		.ascii "UNTIL"
 3474      4C
 3475              		.p2align 2 	
 3476              	UNTIL:
 3477 1ad8 42F804ED 		_NEST
 3478 1adc FFF786FF 		BL	COMPI
 3479 1ae0 68020000 		.word	QBRAN-MAPOFFSET
 3480 1ae4 FFF758FF 		BL	COMMA
 3481 1ae8 52F804EB 		_UNNEST
 3481      7047
 3482              	
 3483              	//    AGAIN	( a -- )
 3484              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3485              	
 3486 1aee D21A0000 		.word	_UNTIL-MAPOFFSET
ARM GAS  stm32eforth.s 			page 67


 3487 1af2 85       	_AGAIN:	.byte  IMEDD+5
 3488 1af3 41474149 		.ascii "AGAIN"
 3488      4E
 3489              		.p2align 2 	
 3490              	AGAIN:
 3491 1af8 42F804ED 		_NEST
 3492 1afc FFF776FF 		BL	COMPI
 3493 1b00 80020000 		.word	BRAN-MAPOFFSET
 3494 1b04 FFF748FF 		BL	COMMA
 3495 1b08 52F804EB 		_UNNEST
 3495      7047
 3496              	
 3497              	//    IF	  ( -- A )
 3498              	// 	Begin a conditional branch structure.
 3499              	
 3500 1b0e F21A0000 		.word	_AGAIN-MAPOFFSET
 3501 1b12 82       	_IFF:	.byte  IMEDD+2
 3502 1b13 4946     		.ascii "IF"
 3503 1b15 0000BF   		.p2align 2 	
 3504              	IFF:
 3505 1b18 42F804ED 		_NEST
 3506 1b1c FFF766FF 		BL	COMPI
 3507 1b20 68020000 		.word	QBRAN-MAPOFFSET
 3508 1b24 FEF77CFF 		BL	HERE
 3509 1b28 FEF77BFB 		_DOLIT
 3510 1b2c 04000000 		.word	4
 3511 1b30 FEF73CFE 		BL	CPP
 3512 1b34 FEF782FD 		BL	PSTOR
 3513 1b38 52F804EB 		_UNNEST
 3513      7047
 3514              	
 3515              	//    AHEAD	( -- A )
 3516              	// 	Compile a forward branch instruction.
 3517              	
 3518 1b3e 121B0000 		.word	_IFF-MAPOFFSET
 3519 1b42 85       	_AHEAD:	.byte  IMEDD+5
 3520 1b43 41484541 		.ascii "AHEAD"
 3520      44
 3521              		.p2align 2 	
 3522              	AHEAD:
 3523 1b48 42F804ED 		_NEST
 3524 1b4c FFF74EFF 		BL	COMPI
 3525 1b50 80020000 		.word	BRAN-MAPOFFSET
 3526 1b54 FEF764FF 		BL	HERE
 3527 1b58 FEF763FB 		_DOLIT
 3528 1b5c 04000000 		.word	4
 3529 1b60 FEF724FE 		BL	CPP
 3530 1b64 FEF76AFD 		BL	PSTOR
 3531 1b68 52F804EB 		_UNNEST
 3531      7047
 3532              	
 3533              	//    REPEAT	( A a -- )
 3534              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3535              	
 3536 1b6e 421B0000 		.word	_AHEAD-MAPOFFSET
 3537 1b72 86       	_REPEA:	.byte  IMEDD+6
 3538 1b73 52455045 		.ascii "REPEAT"
ARM GAS  stm32eforth.s 			page 68


 3538      4154
 3539 1b79 0000BF   		.p2align 2 	
 3540              	REPEA:
 3541 1b7c 42F804ED 		_NEST
 3542 1b80 FFF7BAFF 		BL	AGAIN
 3543 1b84 FEF74CFF 		BL	HERE
 3544 1b88 FEF7E0FB 		BL	SWAP
 3545 1b8c FEF788FB 		BL	STORE
 3546 1b90 52F804EB 		_UNNEST
 3546      7047
 3547              	
 3548              	//    THEN	( A -- )
 3549              	// 	Terminate a conditional branch structure.
 3550              	
 3551 1b96 721B0000 		.word	_REPEA-MAPOFFSET
 3552 1b9a 84       	_THENN:	.byte  IMEDD+4
 3553 1b9b 5448454E 		.ascii "THEN"
 3554 1b9f 00       		.p2align 2 	
 3555              	THENN:
 3556 1ba0 42F804ED 		_NEST
 3557 1ba4 FEF73CFF 		BL	HERE
 3558 1ba8 FEF7D0FB 		BL	SWAP
 3559 1bac FEF778FB 		BL	STORE
 3560 1bb0 52F804EB 		_UNNEST
 3560      7047
 3561              	
 3562              	//    AFT	 ( a -- a A )
 3563              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3564              	
 3565 1bb6 9A1B0000 		.word	_THENN-MAPOFFSET
 3566 1bba 83       	_AFT:	.byte  IMEDD+3
 3567 1bbb 414654   		.ascii "AFT"
 3568 1bbe 00BF     		.p2align 2 	
 3569              	AFT:
 3570 1bc0 42F804ED 		_NEST
 3571 1bc4 FEF7B2FB 		BL	DROP
 3572 1bc8 FFF7BEFF 		BL	AHEAD
 3573 1bcc FFF766FF 		BL	BEGIN
 3574 1bd0 FEF7BCFB 		BL	SWAP
 3575 1bd4 52F804EB 		_UNNEST
 3575      7047
 3576              	
 3577              	//    ELSE	( A -- A )
 3578              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3579              	
 3580 1bda BA1B0000 		.word	_AFT-MAPOFFSET
 3581 1bde 84       	_ELSEE:	.byte  IMEDD+4
 3582 1bdf 454C5345 		.ascii "ELSE"
 3583 1be3 00       		.p2align 2 	
 3584              	ELSEE:
 3585 1be4 42F804ED 		_NEST
 3586 1be8 FFF7AEFF 		BL	AHEAD
 3587 1bec FEF7AEFB 		BL	SWAP
 3588 1bf0 FFF7D6FF 		BL	THENN
 3589 1bf4 52F804EB 		_UNNEST
 3589      7047
 3590              	
ARM GAS  stm32eforth.s 			page 69


 3591              	//    WHILE	( a -- A a )
 3592              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3593              	
 3594 1bfa DE1B0000 		.word	_ELSEE-MAPOFFSET
 3595 1bfe 85       	_WHILE:	.byte  IMEDD+5
 3596 1bff 5748494C 		.ascii "WHILE"
 3596      45
 3597              		.p2align 2 	
 3598              	WHILE:
 3599 1c04 42F804ED 		_NEST
 3600 1c08 FFF786FF 		BL	IFF
 3601 1c0c FEF79EFB 		BL	SWAP
 3602 1c10 52F804EB 		_UNNEST
 3602      7047
 3603              	
 3604              	//    ABORT"	( -- //  string> )
 3605              	// 	Conditional abort with an error message.
 3606              	
 3607 1c16 FE1B0000 		.word	_WHILE-MAPOFFSET
 3608 1c1a 86       	_ABRTQ:	.byte  IMEDD+6
 3609 1c1b 41424F52 		.ascii "ABORT\""
 3609      5422
 3610 1c21 0000BF   		.p2align 2 	
 3611              	ABRTQ:
 3612 1c24 42F804ED 		_NEST
 3613 1c28 FFF7E0FE 		BL	COMPI
 3614 1c2c 7C160000 		.word	ABORQ-MAPOFFSET
 3615 1c30 FFF703FF 		BL	STRCQ
 3616 1c34 52F804EB 		_UNNEST
 3616      7047
 3617              	
 3618              	//    $"	( -- //  string> )
 3619              	// 	Compile an inlineDCB literal.
 3620              	
 3621 1c3a 1A1C0000 		.word	_ABRTQ-MAPOFFSET
 3622 1c3e 82       	_STRQ:	.byte  IMEDD+2
 3623 1c3f 2422     		.byte	'$','"'
 3624 1c41 0000BF   		.p2align 2 	
 3625              	STRQ:
 3626 1c44 42F804ED 		_NEST
 3627 1c48 FFF7D0FE 		BL	COMPI
 3628 1c4c FC0F0000 		.word	STRQP-MAPOFFSET
 3629 1c50 FFF7F3FE 		BL	STRCQ
 3630 1c54 52F804EB 		_UNNEST
 3630      7047
 3631              	
 3632              	//    ."	( -- //  string> )
 3633              	// 	Compile an inlineDCB literal to be typed out at run time.
 3634              	
 3635 1c5a 3E1C0000 		.word	_STRQ-MAPOFFSET
 3636 1c5e 82       	_DOTQ:	.byte  IMEDD+2
 3637 1c5f 2E22     		.byte	'.','"'
 3638 1c61 0000BF   		.p2align 2 	
 3639              	DOTQ:
 3640 1c64 42F804ED 		_NEST
 3641 1c68 FFF7C0FE 		BL	COMPI
 3642 1c6c 1C100000 		.word	DOTQP-MAPOFFSET
ARM GAS  stm32eforth.s 			page 70


 3643 1c70 FFF7E3FE 		BL	STRCQ
 3644 1c74 52F804EB 		_UNNEST
 3644      7047
 3645              	
 3646              	// **************************************************************************
 3647              	//  Name compiler
 3648              	
 3649              	//    ?UNIQUE	( a -- a )
 3650              	// 	Display a warning message if the word already exists.
 3651              	
 3652 1c7a 5E1C0000 		.word	_DOTQ-MAPOFFSET
 3653 1c7e 07       	_UNIQU:	.byte  7
 3654 1c7f 3F554E49 		.ascii "?UNIQUE"
 3654      515545
 3655 1c86 00BF     		.p2align 2 	
 3656              	UNIQU:
 3657 1c88 42F804ED 		_NEST
 3658 1c8c FEF756FB 		BL	DUPP
 3659 1c90 FFF714FC 		BL	NAMEQ			// ?name exists
 3660 1c94 FEF7E8FA 		BL	QBRAN
 3661 1c98 B41C0000 		.word	UNIQ1-MAPOFFSET	// redefinitions are OK
 3662 1c9c FFF7BEF9 		BL	DOTQP
 3663 1ca0 07       		.byte	7
 3664 1ca1 20726544 		.ascii " reDef "		// but warn the user
 3664      656620
 3665              		.p2align 2 	
 3666 1ca8 FEF75AFB 		BL	OVER
 3667 1cac FEF7EAFC 		BL	COUNT
 3668 1cb0 FFF760F9 		BL	TYPEE			// just in case its not planned
 3669              	UNIQ1:
 3670 1cb4 FEF73AFB 		BL	DROP
 3671 1cb8 52F804EB 		_UNNEST
 3671      7047
 3672              	
 3673              	//    $,n	 ( na -- )
 3674              	// 	Build a new dictionary name using the data at na.
 3675              	
 3676              	// 	.word	_UNIQU-MAPOFFSET
 3677              	// _SNAME	.byte  3
 3678              	// 	.ascii "$$,n"
 3679              	// 	.p2align 2 	
 3680              	SNAME:
 3681 1cbe 42F804ED 		_NEST
 3682 1cc2 FEF73BFB 		BL	DUPP			//  na na
 3683 1cc6 FEF705FB 		BL	CAT			//  ?null input
 3684 1cca FEF7CDFA 		BL	QBRAN
 3685 1cce 081D0000 		.word	SNAM1-MAPOFFSET
 3686 1cd2 FFF7D9FF 		BL	UNIQU			//  na
 3687 1cd6 FEF77DFD 		BL	LAST			//  na last
 3688 1cda FEF7EBFA 		BL	AT			//  na la
 3689 1cde FFF75BFE 		BL	COMMA			//  na
 3690 1ce2 FEF72BFB 		BL	DUPP			//  na na
 3691 1ce6 FEF775FD 		BL	LAST			//  na na last
 3692 1cea FEF7D9FA 		BL	STORE			//  na , save na for vocabulary link
 3693 1cee FEF7C9FC 		BL	COUNT			//  na+1 count
 3694 1cf2 FEF787FB 		BL	PLUS			//  na+1+count
 3695 1cf6 FEF73BFE 		BL	ALGND			//  word boundary
ARM GAS  stm32eforth.s 			page 71


 3696 1cfa FEF757FD 		BL	CPP
 3697 1cfe FEF7CFFA 		BL	STORE			//  top of dictionary now
 3698 1d02 52F804EB 		_UNNEST
 3698      7047
 3699              	SNAM1:
 3700 1d08 FFF778F9 		BL	STRQP
 3701 1d0c 07       		.byte	7
 3702 1d0d 206E616D 		.ascii " name? "
 3702      653F20
 3703 1d14 FFF79EBC 		B.W	ABORT
 3704              	
 3705              	//    $COMPILE	( a -- )
 3706              	// 	Compile next word to code dictionary as a token or literal.
 3707              	
 3708 1d18 7E1C0000 		.word	_UNIQU-MAPOFFSET
 3709 1d1c 08       	_SCOMP:	.byte  8
 3710 1d1d 2424434F 		.ascii "$$COMPILE"
 3710      4D50494C 
 3710      45
 3711 1d26 00BF     		.p2align 2 	
 3712              	SCOMP:
 3713 1d28 42F804ED 		_NEST
 3714 1d2c FFF7C6FB 		BL	NAMEQ
 3715 1d30 FEF7F0FB 		BL	QDUP	// defined?
 3716 1d34 FEF798FA 		BL	QBRAN
 3717 1d38 681D0000 		.word	SCOM2-MAPOFFSET
 3718 1d3c FEF7BAFA 		BL	AT
 3719 1d40 FEF76FFA 		_DOLIT
 3720 1d44 80000000 		.word	IMEDD
 3721 1d48 FEF71CFB 		BL	ANDD	// immediate?
 3722 1d4c FEF78CFA 		BL	QBRAN
 3723 1d50 5E1D0000 		.word	SCOM1-MAPOFFSET
 3724 1d54 FEF774FA 		BL	EXECU
 3725 1d58 52F804EB 		_UNNEST			// it's immediate, execute
 3725      7047
 3726              	SCOM1:
 3727 1d5e 00F048F8 		BL	CALLC			// it's not immediate, compile
 3728 1d62 52F804EB 		_UNNEST	
 3728      7047
 3729              	SCOM2:
 3730 1d68 FFF720F8 		BL	NUMBQ
 3731 1d6c FEF77CFA 		BL	QBRAN
 3732 1d70 7E1D0000 		.word	SCOM3-MAPOFFSET
 3733 1d74 FFF756FE 		BL	LITER
 3734 1d78 52F804EB 		_UNNEST			// compile number as integer
 3734      7047
 3735              	SCOM3:
 3736 1d7e FFF769BC 		B.W	ABORT			// error
 3737              	
 3738              	//    OVERT	( -- )
 3739              	// 	Link a new word into the current vocabulary.
 3740              	
 3741 1d82 1C1D0000 		.word	_SCOMP-MAPOFFSET
 3742 1d86 05       	_OVERT:	.byte  5
 3743 1d87 4F564552 		.ascii "OVERT"
 3743      54
 3744              		.p2align 2 	
ARM GAS  stm32eforth.s 			page 72


 3745              	OVERT:
 3746 1d8c 42F804ED 		_NEST
 3747 1d90 FEF720FD 		BL	LAST
 3748 1d94 FEF78EFA 		BL	AT
 3749 1d98 FEF7FEFC 		BL	CNTXT
 3750 1d9c FEF780FA 		BL	STORE
 3751 1da0 52F804EB 		_UNNEST
 3751      7047
 3752              	
 3753              	//    ; 	   ( -- )
 3754              	// 	Terminate a colon definition.
 3755              	
 3756 1da6 861D0000 		.word	_OVERT-MAPOFFSET
 3757 1daa C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 3758 1dab 2F2F20   		.ascii "// "
 3759 1dae 00BF     		.p2align 2 	
 3760              	SEMIS:
 3761 1db0 42F804ED 		_NEST
 3762 1db4 FEF735FA 		_DOLIT
 3763 1db8 52F804EB 		_UNNEST
 3763      7047
 3764 1dbe FFF7EBFD 		BL	COMMA
 3765 1dc2 FFF7ABFC 		BL	LBRAC
 3766 1dc6 FFF7E1FF 		BL	OVERT
 3767 1dca 52F804EB 		_UNNEST
 3767      7047
 3768              	
 3769              	//    ]	   ( -- )
 3770              	// 	Start compiling the words in the input stream.
 3771              	
 3772 1dd0 AA1D0000 		.word	_SEMIS-MAPOFFSET
 3773 1dd4 01       	_RBRAC:	.byte  1
 3774 1dd5 5D       		.ascii "]"
 3775 1dd6 00BF     		.p2align 2 	
 3776              	RBRAC:
 3777 1dd8 42F804ED 		_NEST
 3778 1ddc FEF721FA 		_DOLIT
 3779 1de0 281D0000 		.word	SCOMP-MAPOFFSET
 3780 1de4 FEF7C2FC 		BL	TEVAL
 3781 1de8 FEF75AFA 		BL	STORE
 3782 1dec 52F804EB 		_UNNEST
 3782      7047
 3783              	
 3784              	//    BL.W	( ca -- )
 3785              	// 	Assemble a branch-link long instruction to ca.
 3786              	// 	BL.W is split into 2 16 bit instructions with 11 bit address fields.
 3787              	
 3788              	// 	.word	_RBRAC-MAPOFFSET
 3789              	// _CALLC	.byte  5
 3790              	// 	.ascii "call,"
 3791              	// 	.p2align 2 	
 3792              	CALLC:
 3793 1df2 42F804ED 		_NEST
 3794 1df6 25F00105 		BIC	R5,R5,#1		//  clear b0 of address from R>
 3795 1dfa FEF711FE 		BL	HERE
 3796 1dfe FEF709FB 		BL	SUBB
 3797 1e02 A5F10405 		SUB	R5,R5,#4		//  pc offset
ARM GAS  stm32eforth.s 			page 73


 3798 1e06 40F2FF70 		MOVW	R0,#0x7FF		//  11 bit mask
 3799 1e0a 2C46     		MOV	R4,R5
 3800 1e0c 4FEA1535 		LSR	R5,R5,#12		//  get bits 22-12
 3801 1e10 05EA0005 		AND	R5,R5,R0
 3802 1e14 4FEAC434 		LSL	R4,R4,#15		//  get bits 11-1
 3803 1e18 45EA0405 		ORR	R5,R5,R4
 3804 1e1c 45F07845 		ORR	R5,R5,#0xF8000000
 3805 1e20 45F47045 		ORR	R5,R5,#0xF000
 3806 1e24 FFF7B8FD 		BL	COMMA			//  assemble BL.W instruction
 3807 1e28 52F804EB 		_UNNEST
 3807      7047
 3808              	
 3809              	
 3810              	// 	:	( -- //  string> )
 3811              	// 	Start a new colon definition using next word as its name.
 3812              	
 3813 1e2e D41D0000 		.word	_RBRAC-MAPOFFSET
 3814 1e32 01       	_COLON:	.byte  1
 3815 1e33 3A       		.ascii ":"
 3816              		.p2align 2 	
 3817              	COLON:
 3818 1e34 42F804ED 		_NEST
 3819 1e38 FFF782FA 		BL	TOKEN
 3820 1e3c FFF73FFF 		BL	SNAME
 3821 1e40 FEF7EFF9 		_DOLIT
 3822 1e44 42F804ED 		_NEST
 3823 1e48 FFF7A6FD 		BL	COMMA
 3824 1e4c FFF7C4FF 		BL	RBRAC
 3825 1e50 52F804EB 		_UNNEST
 3825      7047
 3826              	
 3827              	//    IMMEDIATE   ( -- )
 3828              	// 	Make the last compiled word an immediate word.
 3829              	
 3830 1e56 321E0000 		.word	_COLON-MAPOFFSET
 3831 1e5a 09       	_IMMED:	.byte  9
 3832 1e5b 494D4D45 		.ascii "IMMEDIATE"
 3832      44494154 
 3832      45
 3833              		.p2align 2 	
 3834              	IMMED:
 3835 1e64 42F804ED 		_NEST
 3836 1e68 FEF7DBF9 		_DOLIT
 3837 1e6c 80000000 		.word	IMEDD
 3838 1e70 FEF7B0FC 		BL	LAST
 3839 1e74 FEF71EFA 		BL	AT
 3840 1e78 FEF71CFA 		BL	AT
 3841 1e7c FEF78CFA 		BL	ORR
 3842 1e80 FEF7A8FC 		BL	LAST
 3843 1e84 FEF716FA 		BL	AT
 3844 1e88 FEF70AFA 		BL	STORE
 3845 1e8c 52F804EB 		_UNNEST
 3845      7047
 3846              	
 3847              	// **************************************************************************
 3848              	//  Defining words
 3849              	
ARM GAS  stm32eforth.s 			page 74


 3850              	//    CONSTANT	( u -- //  string> )
 3851              	// 	Compile a new constant.
 3852              	
 3853 1e92 5A1E0000 		.word	_IMMED-MAPOFFSET
 3854 1e96 08       	_CONST:	.byte  8
 3855 1e97 434F4E53 		.ascii "CONSTANT"
 3855      54414E54 
 3856 1e9f 00       		.p2align 2 	
 3857              	CONST:
 3858 1ea0 42F804ED 		_NEST
 3859 1ea4 FFF74CFA 		BL	TOKEN
 3860 1ea8 FFF709FF 		BL	SNAME
 3861 1eac FFF76EFF 		BL	OVERT
 3862 1eb0 FEF7B7F9 		_DOLIT
 3863 1eb4 42F804ED 		_NEST
 3864 1eb8 FFF76EFD 		BL	COMMA
 3865 1ebc FEF7B1F9 		_DOLIT
 3866 1ec0 BA060000 		.word	DOCON-MAPOFFSET
 3867 1ec4 FFF795FF 		BL	CALLC
 3868 1ec8 FFF766FD 		BL	COMMA
 3869 1ecc 52F804EB 		_UNNEST
 3869      7047
 3870              	
 3871              	//    CREATE	( -- //  string> )
 3872              	// 	Compile a new array entry without allocating code space.
 3873              	
 3874 1ed2 961E0000 		.word	_CONST-MAPOFFSET
 3875 1ed6 06       	_CREAT:	.byte  6
 3876 1ed7 43524541 		.ascii "CREATE"
 3876      5445
 3877 1edd 0000BF   		.p2align 2 	
 3878              	CREAT:
 3879 1ee0 42F804ED 		_NEST
 3880 1ee4 FFF72CFA 		BL	TOKEN
 3881 1ee8 FFF7E9FE 		BL	SNAME
 3882 1eec FFF74EFF 		BL	OVERT
 3883 1ef0 FEF797F9 		_DOLIT
 3884 1ef4 42F804ED 		_NEST
 3885 1ef8 FFF74EFD 		BL	COMMA
 3886 1efc FEF791F9 		_DOLIT
 3887 1f00 AC060000 		.word	DOVAR-MAPOFFSET
 3888 1f04 FFF775FF 		BL	CALLC
 3889 1f08 52F804EB 		_UNNEST
 3889      7047
 3890              	
 3891              	//    VARIABLE	( -- //  string> )
 3892              	// 	Compile a new variable initialized to 0.
 3893              	
 3894 1f0e D61E0000 		.word	_CREAT-MAPOFFSET
 3895 1f12 08       	_VARIA:	.byte  8
 3896 1f13 56415249 		.ascii "VARIABLE"
 3896      41424C45 
 3897 1f1b 00       		.p2align 2 	
 3898              	VARIA:
 3899 1f1c 42F804ED 		_NEST
 3900 1f20 FFF7DEFF 		BL	CREAT
 3901 1f24 FEF77DF9 		_DOLIT
ARM GAS  stm32eforth.s 			page 75


 3902 1f28 00000000 		.word	0
 3903 1f2c FFF734FD 		BL	COMMA
 3904 1f30 52F804EB 		_UNNEST
 3904      7047
 3905              	
 3906              	// **************************************************************************
 3907              	//  Tools
 3908              	
 3909              	//    dm+	 ( a u -- a )
 3910              	// 	Dump u bytes from , leaving a+u on the stack.
 3911              	
 3912              	// 	.word	_VARIA-MAPOFFSET
 3913              	// _DMP	.byte  3
 3914              	// 	.ascii "dm+"
 3915              	// 	.p2align 2 	
 3916              	DMP:
 3917 1f36 42F804ED 		_NEST
 3918 1f3a FEF711FA 		BL	OVER
 3919 1f3e FEF770F9 		_DOLIT
 3920 1f42 04000000 		.word	4
 3921 1f46 FFF78FF8 		BL	UDOTR			// display address
 3922 1f4a FEF7E9FF 		BL	SPACE
 3923 1f4e FEF7D9F9 		BL	TOR			// start count down loop
 3924 1f52 00F00CB8 		B.W	PDUM2			// skip first pass
 3925              	PDUM1:
 3926 1f56 FEF7F1F9 	  BL	DUPP
 3927 1f5a FEF7BBF9 		BL	CAT
 3928 1f5e FEF760F9 		_DOLIT
 3929 1f62 03000000 		.word	3
 3930 1f66 FFF77FF8 		BL	UDOTR			// display numeric data
 3931 1f6a FEF779FA 		BL	ONEP			// increment address
 3932              	PDUM2:
 3933 1f6e FEF76CF9 	  BL	DONXT
 3934 1f72 561F0000 		.word	PDUM1-MAPOFFSET	// loop till done
 3935 1f76 52F804EB 		_UNNEST
 3935      7047
 3936              		.p2align 2 
 3937              	//    DUMP	( a u -- )
 3938              	// 	Dump u bytes from a, in a formatted manner.
 3939              	
 3940 1f7c 121F0000 		.word	_VARIA-MAPOFFSET
 3941 1f80 04       	_DUMP:	.byte  4
 3942 1f81 44554D50 		.ascii "DUMP"
 3943 1f85 0000BF   		.p2align 2 	
 3944              	DUMP:
 3945 1f88 42F804ED 		_NEST
 3946 1f8c FEF7C0FB 		BL	BASE
 3947 1f90 FEF790F9 		BL	AT
 3948 1f94 FEF7B6F9 		BL	TOR
 3949 1f98 FEF7AAFE 		BL	HEX			// save radix,set hex
 3950 1f9c FEF741F9 		_DOLIT
 3951 1fa0 10000000 		.word	16
 3952 1fa4 FEF7B0FC 		BL	SLASH			// change count to lines
 3953 1fa8 FEF7ACF9 		BL	TOR
 3954 1fac 00F014B8 		B.W	DUMP4			// start count down loop
 3955              	DUMP1:
 3956 1fb0 FEF7F8FF 	  BL	CR
ARM GAS  stm32eforth.s 			page 76


 3957 1fb4 FEF735F9 		_DOLIT
 3958 1fb8 10000000 		.word	16
 3959 1fbc FEF7C8FA 		BL	DDUP
 3960 1fc0 FFF7B9FF 		BL	DMP			// display numeric
 3961 1fc4 FEF7B0FA 		BL	ROT
 3962 1fc8 FEF7AEFA 		BL	ROT
 3963 1fcc FEF7A8FF 		BL	SPACE
 3964 1fd0 FEF7A6FF 		BL	SPACE
 3965 1fd4 FEF7CEFF 		BL	TYPEE			// display printable characters
 3966              	DUMP4:
 3967 1fd8 FEF737F9 	  BL	DONXT
 3968 1fdc B01F0000 		.word	DUMP1-MAPOFFSET	// loop till done
 3969              	DUMP3:
 3970 1fe0 FEF7A4F9 	  BL	DROP
 3971 1fe4 FEF77CF9 		BL	RFROM
 3972 1fe8 FEF792FB 		BL	BASE
 3973 1fec FEF758F9 		BL	STORE			// restore radix
 3974 1ff0 52F804EB 		_UNNEST
 3974      7047
 3975              	
 3976              	//    .S	  ( ... -- ... )
 3977              	// 	Display the contents of the data stack.
 3978              	
 3979 1ff6 801F0000 		.word	_DUMP-MAPOFFSET
 3980              	_DOTS:
 3981 1ffa 02       		.byte  2
 3982 1ffb 2E53     		.ascii ".S"
 3983 1ffd 0000BF   		.p2align 2 	
 3984              	DOTS:
 3985 2000 42F804ED 		_NEST
 3986 2004 FEF78CFF 		BL	SPACE
 3987 2008 FEF7E4FC 		BL	DEPTH			// stack depth
 3988 200c FEF77AF9 		BL	TOR			// start count down loop
 3989 2010 00F006B8 		B.W	DOTS2			// skip first pass
 3990              	DOTS1:
 3991 2014 FEF76EF9 		BL	RAT
 3992 2018 FEF7EEFC 		BL	PICK
 3993 201c FFF752F8 		BL	DOT			// index stack, display contents
 3994              	DOTS2:
 3995 2020 FEF713F9 		BL	DONXT
 3996 2024 14200000 		.word	DOTS1-MAPOFFSET	// loop till done
 3997 2028 FEF77AFF 		BL	SPACE
 3998 202c 52F804EB 		_UNNEST
 3998      7047
 3999              	
 4000              	//    >NAME	( ca -- na | F )
 4001              	// 	Convert code address to a name address.
 4002              	
 4003 2032 FA1F0000 		.word	_DOTS-MAPOFFSET
 4004 2036 05       	_TNAME:	.byte  5
 4005 2037 3E4E414D 		.ascii ">NAME"
 4005      45
 4006              		.p2align 2 	
 4007              	TNAME:
 4008 203c 42F804ED 		_NEST
 4009 2040 FEF760F9 		BL	TOR			//  
 4010 2044 FEF7A8FB 		BL	CNTXT			//  va
ARM GAS  stm32eforth.s 			page 77


 4011 2048 FEF734F9 		BL	AT			//  na
 4012              	TNAM1:
 4013 204c FEF776F9 		BL	DUPP			//  na na
 4014 2050 FEF70AF9 		BL	QBRAN
 4015 2054 7C200000 		.word	TNAM2-MAPOFFSET	//  vocabulary end, no match
 4016 2058 FEF770F9 		BL	DUPP			//  na na
 4017 205c FFF77EF9 		BL	NAMET			//  na ca
 4018 2060 FEF748F9 		BL	RAT			//  na ca code
 4019 2064 FEF7A2F9 		BL	XORR			//  na f --
 4020 2068 FEF7FEF8 		BL	QBRAN
 4021 206c 7C200000 		.word	TNAM2-MAPOFFSET
 4022 2070 FEF71EFA 		BL	CELLM			//  la 
 4023 2074 FEF71EF9 		BL	AT			//  next_na
 4024 2078 FFF7E8BF 		B.W	TNAM1
 4025              	TNAM2:	
 4026 207c FEF730F9 		BL	RFROM
 4027 2080 FEF754F9 		BL	DROP			//  0|na --
 4028 2084 52F804EB 		_UNNEST			// 0
 4028      7047
 4029              	
 4030              	//    .ID	 ( na -- )
 4031              	// 	Display the name at address.
 4032              	
 4033 208a 36200000 		.word	_TNAME-MAPOFFSET
 4034 208e 03       	_DOTID:	.byte  3
 4035 208f 2E4944   		.ascii ".ID"
 4036 2092 00BF     		.p2align 2 	
 4037              	DOTID:
 4038 2094 42F804ED 		_NEST
 4039 2098 FEF73CFA 		BL	QDUP			// if zero no name
 4040 209c FEF7E4F8 		BL	QBRAN
 4041 20a0 BE200000 		.word	DOTI1-MAPOFFSET
 4042 20a4 FEF7EEFA 		BL	COUNT
 4043 20a8 FEF7BBF8 		_DOLIT
 4044 20ac 1F000000 		.word	0x1F
 4045 20b0 FEF768F9 		BL	ANDD			// mask lexicon bits
 4046 20b4 FEF75EFF 		BL	TYPEE
 4047 20b8 52F804EB 		_UNNEST			// display name string
 4047      7047
 4048              	DOTI1:
 4049 20be FEF7ADFF 	  BL	DOTQP
 4050 20c2 09       		.byte	9
 4051 20c3 207B6E6F 		.ascii " {noName}"
 4051      4E616D65 
 4051      7D
 4052              		.p2align 2 	
 4053 20cc 52F804EB 		_UNNEST
 4053      7047
 4054              	
 4055              	//    SEE	 ( -- //  string> )
 4056              	// 	A simple decompiler.
 4057              	
 4058 20d2 8E200000 		.word	_DOTID-MAPOFFSET
 4059 20d6 03       	_SEE:	.byte  3
 4060 20d7 534545   		.ascii "SEE"
 4061 20da 00BF     		.p2align 2 	
 4062              	SEE:
ARM GAS  stm32eforth.s 			page 78


 4063 20dc 42F804ED 		_NEST
 4064 20e0 FFF73AFC 		BL	TICK	//  ca --, starting address
 4065 20e4 FEF75EFF 		BL	CR	
 4066 20e8 FEF79BF8 		_DOLIT
 4067 20ec 14000000 		.word	20
 4068 20f0 FEF708F9 		BL	TOR
 4069              	SEE1:
 4070 20f4 FEF7D4F9 		BL	CELLP			//  a
 4071 20f8 FEF720F9 		BL	DUPP			//  a a
 4072 20fc 00F010F8 		BL	DECOMP		//  a
 4073 2100 FEF7A3F8 		BL	DONXT
 4074 2104 F4200000 		.word	SEE1-MAPOFFSET
 4075 2108 FEF710F9 		BL	DROP
 4076 210c 52F804EB 		_UNNEST
 4076      7047
 4077              	
 4078              	// 	DECOMPILE ( a -- )
 4079              	// 	Convert code in a.  Display name of command or as data.
 4080              	
 4081 2112 D6200000 		.word	_SEE-MAPOFFSET
 4082 2116 09       	_DECOM:	.byte  9
 4083 2117 4445434F 		.ascii "DECOMPILE"
 4083      4D50494C 
 4083      45
 4084              		.p2align 2 
 4085              		
 4086              	DECOMP:	
 4087 2120 42F804ED 		_NEST
 4088 2124 FEF70AF9 		BL	DUPP			//  a a
 4089              	// 	BL	TOR			//  a
 4090 2128 FEF7C4F8 		BL	AT			//  a code
 4091 212c FEF706F9 		BL	DUPP			//  a code code
 4092 2130 FEF777F8 		_DOLIT
 4093 2134 00F800F8 		.word	0xF800F800
 4094 2138 FEF724F9 		BL	ANDD
 4095 213c FEF771F8 		_DOLIT
 4096 2140 00F000F8 		.word	0xF800F000
 4097 2144 FEF736FA 		BL	EQUAL			//  a code ?
 4098 2148 FEF78EF8 		BL	QBRAN
 4099 214c A8210000 		.word	DECOM2-MAPOFFSET	//  not a command
 4100              		//  a valid_code --, extract address and display name
 4101 2150 40F6FE70 		MOVW	R0,#0xFFE
 4102 2154 2C46     		MOV	R4,R5
 4103 2156 4FEA4555 		LSL	R5,R5,#21		//  get bits 22-12
 4104 215a 4FEA6525 		ASR	R5,R5,#9		//  with sign extension
 4105 215e 4FEAD434 		LSR	R4,R4,#15		//  get bits 11-1
 4106 2162 04EA0004 		AND	R4,R4,R0		//  retain only bits 11-1
 4107 2166 45EA0405 		ORR	R5,R5,R4		//  get bits 22-1
 4108 216a 00BF     		NOP
 4109 216c FEF7F8F8 		BL	OVER			//  a offset a
 4110 2170 FEF748F9 		BL	PLUS			//  a target-4
 4111 2174 FEF794F9 		BL	CELLP			//  a target
 4112 2178 FFF760FF 		BL	TNAME			//  a na/0 --, is it a name?
 4113 217c FEF7CAF9 		BL	QDUP			//  name address or zero
 4114 2180 FEF772F8 		BL	QBRAN
 4115 2184 9A210000 		.word	DECOM1-MAPOFFSET
 4116 2188 FEF7CAFE 		BL	SPACE			//  a na
ARM GAS  stm32eforth.s 			page 79


 4117 218c FFF782FF 		BL	DOTID			//  a --, display name
 4118              	// 	BL	RFROM			//  a
 4119 2190 FEF7CCF8 		BL	DROP
 4120 2194 52F804EB 		_UNNEST
 4120      7047
 4121              	DECOM1:	// BL	RFROM		//  a
 4122 219a FEF78BF8 		BL	AT			//  data
 4123 219e FEF77FFF 		BL	UDOT			//  display data
 4124 21a2 52F804EB 		_UNNEST
 4124      7047
 4125              	DECOM2:
 4126 21a8 FEF77AFF 		BL	UDOT
 4127              	// 	BL	RFROM
 4128 21ac FEF7BEF8 		BL	DROP
 4129 21b0 52F804EB 		_UNNEST
 4129      7047
 4130              	
 4131              	//    WORDS	( -- )
 4132              	// 	Display the names in the context vocabulary.
 4133              	
 4134 21b6 16210000 		.word	_DECOM-MAPOFFSET
 4135 21ba 05       	_WORDS:	.byte  5
 4136 21bb 574F5244 		.ascii "WORDS"
 4136      53
 4137              		.p2align 2 	
 4138              	WORDS:
 4139 21c0 42F804ED 		_NEST
 4140 21c4 FEF7EEFE 		BL	CR
 4141 21c8 FEF7E6FA 		BL	CNTXT
 4142 21cc FEF772F8 		BL	AT			// only in context
 4143              	WORS1:
 4144 21d0 FEF7A0F9 		BL	QDUP			// ?at end of list
 4145 21d4 FEF748F8 		BL	QBRAN
 4146 21d8 F4210000 		.word	WORS2-MAPOFFSET
 4147 21dc FEF7AEF8 		BL	DUPP
 4148 21e0 FEF79EFE 		BL	SPACE
 4149 21e4 FFF756FF 		BL	DOTID			// display a name
 4150 21e8 FEF762F9 		BL	CELLM
 4151 21ec FEF762F8 		BL	AT
 4152 21f0 FFF7EEBF 		B.W	WORS1
 4153              	WORS2:
 4154 21f4 52F804EB 		_UNNEST
 4154      7047
 4155              	
 4156              	// **************************************************************************
 4157              	//  cold start
 4158              	
 4159              	//    VER	 ( -- n )
 4160              	// 	Return the version number of this implementation.
 4161              	
 4162              	// 	.word	_WORDS-MAPOFFSET
 4163              	// _VERSN	.byte  3
 4164              	// 	.ascii "VER"
 4165              	// 	.p2align 2 	
 4166              	VERSN:
 4167 21fa 42F804ED 		_NEST
 4168 21fe FEF710F8 		_DOLIT
ARM GAS  stm32eforth.s 			page 80


 4169 2202 00010000 		.word	VER*256+EXT
 4170 2206 52F804EB 		_UNNEST
 4170      7047
 4171              	
 4172              	//    hi	  ( -- )
 4173              	// 	Display the sign-on message of eForth.
 4174              	
 4175 220c BA210000 		.word	_WORDS-MAPOFFSET
 4176 2210 02       	_HI:	.byte  2
 4177 2211 4849     		.ascii "HI"
 4178 2213 00       		.p2align 2 	
 4179              	HI:
 4180 2214 42F804ED 		_NEST
 4181 2218 FEF7C4FE 		BL	CR	// initialize I/O
 4182 221c FEF7FEFE 		BL	DOTQP
 4183 2220 17       		.byte	23
 4184 2221 626C7565 		.ascii "blue pill stm32eForth v" 
 4184      2070696C 
 4184      6C207374 
 4184      6D333265 
 4184      466F7274 
 4185              		.p2align 2
 4186 2238 FEF76AFA 		BL	BASE
 4187 223c FEF73AF8 		BL	AT
 4188 2240 FEF756FD 		BL	HEX	// save radix
 4189 2244 FFF7D9FF 		BL	VERSN
 4190 2248 FEF7C6FC 		BL	BDIGS
 4191 224c FEF7EAFC 		BL	DIG
 4192 2250 FEF7E8FC 		BL	DIG
 4193 2254 FDF7E5FF 		_DOLIT
 4194 2258 2E000000 		.word	'.'
 4195 225c FEF7CCFC 		BL	HOLD
 4196 2260 FEF7F2FC 		BL	DIGS
 4197 2264 FEF71AFD 		BL	EDIGS
 4198 2268 FEF784FE 		BL	TYPEE	// format version number
 4199 226c FEF750FA 		BL	BASE
 4200 2270 FEF716F8 		BL	STORE
 4201 2274 FEF796FE 		BL	CR
 4202 2278 52F804EB 		_UNNEST			// restore radix
 4202      7047
 4203              	
 4204              	//    COLD	( -- )
 4205              	// 	The high level cold start sequence.
 4206              	
 4207 227e 10220000 		.word	_HI-MAPOFFSET
 4208 2282 04       	LASTN:	.byte  4
 4209 2283 434F4C44 		.ascii "COLD"
 4210 2287 00       		.p2align 2,0	
 4211              	COLD:
 4212              	//  Initiate Forth registers
 4213 2288 4FF00003 		MOV R3,#UPP&0xffff	//  user area 
 4214 228c C2F20003 	 	MOVT R3,#UPP>>16		  
 4215 2290 03F59F42 		ADD R2,R3,#RPP&0xffff	// Forth return stack
 4216 2294 03F59D41 		ADD R1,R3,#SPP&0xffff // Forth data stack
 4217 2298 85EA0505 		EOR R5,R5,R5			//  tos=0
 4218 229c 00BF     		NOP
 4219 229e 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 81


 4220              	COLD1:
 4221 22a2 FDF7BEFF 		_DOLIT 
 4222 22a6 00000000 		.word 0 
 4223 22aa FDF77BFF 		BL ULED // turn off user LED 
 4224 22ae FDF7B8FF 		_DOLIT
 4225 22b2 FC000000 		.word	UZERO-MAPOFFSET
 4226 22b6 FDF7B4FF 		_DOLIT
 4227 22ba 00000020 		.word	UPP
 4228 22be FDF7B0FF 		_DOLIT
 4229 22c2 48000000 		.word	ULAST-UZERO
 4230 22c6 FEF7F7FB 		BL	MOVE 			// initialize user area
 4231 22ca FFF791FA 		BL	PRESE			// initialize stack and TIB
 4232 22ce FEF715FA 		BL	TBOOT
 4233 22d2 FEF7CDFB 		BL	ATEXE			// application boot
 4234 22d6 FFF759FD 		BL	OVERT
 4235 22da FFF795BA 		B.W	QUIT			// start interpretation
 4236              	COLD2:	
 4237              	CTOP:
 4238 22de FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4239              	
 4240 22e2 00000020 	  .end 
 4240      02402301 
 4240      6745AB89 
 4240      EFCD
ARM GAS  stm32eforth.s 			page 82


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
ARM GAS  stm32eforth.s 			page 83


board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
board/blue-pill/stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
board/blue-pill/stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
board/blue-pill/stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
board/blue-pill/stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
board/blue-pill/stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
board/blue-pill/stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
board/blue-pill/stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
board/blue-pill/stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
board/blue-pill/stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
board/blue-pill/stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
board/blue-pill/stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
board/blue-pill/stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
board/blue-pill/stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
board/blue-pill/stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
board/blue-pill/stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
board/blue-pill/stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32eforth.s:83     *ABS*:0000000040011000 LED_GPIO
       stm32eforth.s:84     *ABS*:000000000000000d LED_PIN
       stm32eforth.s:85     *ABS*:0000000040013800 UART
       stm32eforth.s:88     *ABS*:0000000020004e80 SPP
       stm32eforth.s:89     *ABS*:0000000020004e80 TIBB
       stm32eforth.s:90     *ABS*:0000000020004f80 RPP
       stm32eforth.s:91     *ABS*:0000000020000000 UPP
       stm32eforth.s:92     *ABS*:0000000020000100 DTOP
       stm32eforth.s:93     *ABS*:0000000020004e00 DEND
       stm32eforth.s:98     *ABS*:0000000000000004 TICKS_OFS
       stm32eforth.s:99     *ABS*:0000000000000008 TIMER_OFS
       stm32eforth.s:100    *ABS*:000000000000000c BOOT_OFS
       stm32eforth.s:101    *ABS*:0000000000000010 BASE_OFS
       stm32eforth.s:102    *ABS*:0000000000000014 TMP_OFS
       stm32eforth.s:103    *ABS*:0000000000000018 SPAN_OFS
       stm32eforth.s:104    *ABS*:000000000000001c TOIN_OFS
       stm32eforth.s:105    *ABS*:0000000000000020 NTIB_OFS
       stm32eforth.s:106    *ABS*:0000000000000024 TIB_OFS
       stm32eforth.s:107    *ABS*:0000000000000028 EVAL_OFS
       stm32eforth.s:108    *ABS*:000000000000002c HLD_OFS
       stm32eforth.s:109    *ABS*:0000000000000030 CTXT_OFS
       stm32eforth.s:110    *ABS*:0000000000000034 FLSH_CTOP_OFS
       stm32eforth.s:111    *ABS*:0000000000000038 RAM_CTOP_OFS
       stm32eforth.s:112    *ABS*:000000000000003c LASTN_OFS
       stm32eforth.s:152    .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:284    .text.reset_handler:0000000000000000 reset_handler
       stm32eforth.s:243    .text.default_handler:0000000000000000 default_handler
       stm32eforth.s:263    .text.default_handler:000000000000002c systick_handler
       stm32eforth.s:241    .text.default_handler:0000000000000000 $t
       stm32eforth.s:599    .text.reset_handler:0000000000000222 DOLIT
       stm32eforth.s:245    .text.default_handler:0000000000000004 $d
ARM GAS  stm32eforth.s 			page 84


       stm32eforth.s:519    .text.reset_handler:00000000000001a4 ULED
       stm32eforth.s:246    .text.default_handler:0000000000000008 $t
       stm32eforth.s:2352   .text.reset_handler:0000000000000fa4 CR
       stm32eforth.s:2418   .text.reset_handler:000000000000101c DOTQP
       stm32eforth.s:249    .text.default_handler:0000000000000014 $d
       stm32eforth.s:483    .text.reset_handler:0000000000000150 REBOOT
       stm32eforth.s:273    .text.default_handler:0000000000000046 systick_exit
       stm32eforth.s:282    .text.reset_handler:0000000000000000 $t
       stm32eforth.s:291    .text.reset_handler:0000000000000014 zero_loop
       stm32eforth.s:302    .text.reset_handler:000000000000002c init_devices
       stm32eforth.s:3200   .text.reset_handler:0000000000001828 UNLOCK
       stm32eforth.s:4211   .text.reset_handler:0000000000002288 COLD
       stm32eforth.s:317    .text.reset_handler:000000000000004a wait_hserdy
       stm32eforth.s:337    .text.reset_handler:0000000000000064 wait_pllrdy
       stm32eforth.s:350    .text.reset_handler:0000000000000084 wait_sws
       stm32eforth.s:403    *ABS*:0000000000000001 VER
       stm32eforth.s:404    *ABS*:0000000000000000 EXT
       stm32eforth.s:410    *ABS*:0000000000000000 RAMOFFSET
       stm32eforth.s:411    *ABS*:0000000000000000 MAPOFFSET
       stm32eforth.s:413    *ABS*:0000000000000040 COMPO
       stm32eforth.s:414    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:415    *ABS*:00000000ffffff1f MASKK
       stm32eforth.s:417    *ABS*:0000000000000004 CELLL
       stm32eforth.s:418    *ABS*:0000000000000010 BASEE
       stm32eforth.s:419    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:421    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:422    *ABS*:000000000000000a LF
       stm32eforth.s:423    *ABS*:000000000000000d CRR
       stm32eforth.s:424    *ABS*:000000000000001b ERR
       stm32eforth.s:425    *ABS*:0000000000000027 TIC
       stm32eforth.s:448    .text.reset_handler:00000000000000fc UZERO
       stm32eforth.s:449    .text.reset_handler:00000000000000fc $d
       stm32eforth.s:4179   .text.reset_handler:0000000000002214 HI
       stm32eforth.s:3060   .text.reset_handler:00000000000016bc INTER
       stm32eforth.s:4208   .text.reset_handler:0000000000002282 LASTN
       stm32eforth.s:4237   .text.reset_handler:00000000000022de CTOP
       stm32eforth.s:466    .text.reset_handler:0000000000000144 ULAST
       stm32eforth.s:478    .text.reset_handler:0000000000000144 $d
       stm32eforth.s:479    .text.reset_handler:0000000000000148 _REBOOT
       stm32eforth.s:494    .text.reset_handler:0000000000000166 $d
       stm32eforth.s:495    .text.reset_handler:000000000000016a _PAUSE
       stm32eforth.s:497    .text.reset_handler:0000000000000170 $t
       stm32eforth.s:498    .text.reset_handler:0000000000000170 PAUSE
       stm32eforth.s:1407   .text.reset_handler:00000000000006e8 TIMER
       stm32eforth.s:689    .text.reset_handler:00000000000002a0 STORE
       stm32eforth.s:502    .text.reset_handler:000000000000017c PAUSE_LOOP
       stm32eforth.s:702    .text.reset_handler:00000000000002b4 AT
       stm32eforth.s:649    .text.reset_handler:0000000000000268 QBRAN
       stm32eforth.s:506    .text.reset_handler:0000000000000188 $d
       stm32eforth.s:509    .text.reset_handler:0000000000000194 PAUSE_EXIT
       stm32eforth.s:667    .text.reset_handler:0000000000000280 BRAN
       stm32eforth.s:507    .text.reset_handler:000000000000018c $t
       stm32eforth.s:508    .text.reset_handler:0000000000000190 $d
       stm32eforth.s:510    .text.reset_handler:0000000000000194 $t
       stm32eforth.s:514    .text.reset_handler:000000000000019a $d
       stm32eforth.s:515    .text.reset_handler:000000000000019e _ULED
       stm32eforth.s:528    .text.reset_handler:00000000000001bc ULED_OFF
ARM GAS  stm32eforth.s 			page 85


       stm32eforth.s:534    .text.reset_handler:00000000000001c0 $d
       stm32eforth.s:535    .text.reset_handler:00000000000001c4 _QRX
       stm32eforth.s:538    .text.reset_handler:00000000000001cc QKEY
       stm32eforth.s:539    .text.reset_handler:00000000000001cc QRX
       stm32eforth.s:550    .text.reset_handler:00000000000001ec QRX1
       stm32eforth.s:559    .text.reset_handler:00000000000001f4 $d
       stm32eforth.s:560    .text.reset_handler:00000000000001f8 _TXSTO
       stm32eforth.s:563    .text.reset_handler:0000000000000200 TXSTO
       stm32eforth.s:564    .text.reset_handler:0000000000000200 EMIT
       stm32eforth.s:565    .text.reset_handler:0000000000000200 TECHO
       stm32eforth.s:568    .text.reset_handler:0000000000000208 TX1
       stm32eforth.s:584    .text.reset_handler:0000000000000218 $d
       stm32eforth.s:585    .text.reset_handler:000000000000021c _NOP
       stm32eforth.s:587    .text.reset_handler:0000000000000220 $t
       stm32eforth.s:588    .text.reset_handler:0000000000000220 NOP
       stm32eforth.s:609    .text.reset_handler:0000000000000234 $d
       stm32eforth.s:610    .text.reset_handler:0000000000000238 _EXECU
       stm32eforth.s:612    .text.reset_handler:0000000000000240 $t
       stm32eforth.s:613    .text.reset_handler:0000000000000240 EXECU
       stm32eforth.s:627    .text.reset_handler:000000000000024a DONXT
       stm32eforth.s:634    .text.reset_handler:0000000000000258 NEXT1
       stm32eforth.s:656    .text.reset_handler:000000000000027a QBRAN1
       stm32eforth.s:675    .text.reset_handler:000000000000028a $d
       stm32eforth.s:676    .text.reset_handler:000000000000028e _EXIT
       stm32eforth.s:679    .text.reset_handler:0000000000000294 EXIT
       stm32eforth.s:685    .text.reset_handler:000000000000029a $d
       stm32eforth.s:686    .text.reset_handler:000000000000029e _STORE
       stm32eforth.s:688    .text.reset_handler:00000000000002a0 $t
       stm32eforth.s:698    .text.reset_handler:00000000000002ac $d
       stm32eforth.s:699    .text.reset_handler:00000000000002b0 _AT
       stm32eforth.s:701    .text.reset_handler:00000000000002b2 $t
       stm32eforth.s:709    .text.reset_handler:00000000000002b8 $d
       stm32eforth.s:710    .text.reset_handler:00000000000002bc _CSTOR
       stm32eforth.s:713    .text.reset_handler:00000000000002c0 CSTOR
       stm32eforth.s:722    .text.reset_handler:00000000000002cc $d
       stm32eforth.s:723    .text.reset_handler:00000000000002d0 _CAT
       stm32eforth.s:726    .text.reset_handler:00000000000002d4 CAT
       stm32eforth.s:733    .text.reset_handler:00000000000002d8 $d
       stm32eforth.s:734    .text.reset_handler:00000000000002dc _RFROM
       stm32eforth.s:737    .text.reset_handler:00000000000002e0 RFROM
       stm32eforth.s:745    .text.reset_handler:00000000000002ea $d
       stm32eforth.s:746    .text.reset_handler:00000000000002ee _RAT
       stm32eforth.s:749    .text.reset_handler:00000000000002f4 RAT
       stm32eforth.s:757    .text.reset_handler:00000000000002fc $d
       stm32eforth.s:758    .text.reset_handler:0000000000000300 _TOR
       stm32eforth.s:761    .text.reset_handler:0000000000000304 TOR
       stm32eforth.s:769    .text.reset_handler:000000000000030e $d
       stm32eforth.s:770    .text.reset_handler:0000000000000312 _SPAT
       stm32eforth.s:772    .text.reset_handler:0000000000000316 $t
       stm32eforth.s:773    .text.reset_handler:0000000000000318 SPAT
       stm32eforth.s:781    .text.reset_handler:0000000000000320 $d
       stm32eforth.s:782    .text.reset_handler:0000000000000324 _DROP
       stm32eforth.s:785    .text.reset_handler:000000000000032c DROP
       stm32eforth.s:792    .text.reset_handler:0000000000000332 $d
       stm32eforth.s:793    .text.reset_handler:0000000000000336 _DUPP
       stm32eforth.s:795    .text.reset_handler:000000000000033a $t
       stm32eforth.s:796    .text.reset_handler:000000000000033c DUPP
ARM GAS  stm32eforth.s 			page 86


       stm32eforth.s:803    .text.reset_handler:0000000000000342 $d
       stm32eforth.s:804    .text.reset_handler:0000000000000346 _SWAP
       stm32eforth.s:807    .text.reset_handler:000000000000034c SWAP
       stm32eforth.s:816    .text.reset_handler:0000000000000354 $d
       stm32eforth.s:817    .text.reset_handler:0000000000000358 _OVER
       stm32eforth.s:820    .text.reset_handler:0000000000000360 OVER
       stm32eforth.s:828    .text.reset_handler:0000000000000368 $d
       stm32eforth.s:829    .text.reset_handler:000000000000036c _ZLESS
       stm32eforth.s:832    .text.reset_handler:0000000000000370 ZLESS
       stm32eforth.s:840    .text.reset_handler:000000000000037a $d
       stm32eforth.s:841    .text.reset_handler:000000000000037e _ANDD
       stm32eforth.s:843    .text.reset_handler:0000000000000382 $t
       stm32eforth.s:844    .text.reset_handler:0000000000000384 ANDD
       stm32eforth.s:852    .text.reset_handler:000000000000038e $d
       stm32eforth.s:853    .text.reset_handler:0000000000000392 _ORR
       stm32eforth.s:856    .text.reset_handler:0000000000000398 ORR
       stm32eforth.s:864    .text.reset_handler:00000000000003a2 $d
       stm32eforth.s:865    .text.reset_handler:00000000000003a6 _XORR
       stm32eforth.s:867    .text.reset_handler:00000000000003aa $t
       stm32eforth.s:868    .text.reset_handler:00000000000003ac XORR
       stm32eforth.s:876    .text.reset_handler:00000000000003b6 $d
       stm32eforth.s:877    .text.reset_handler:00000000000003ba _UPLUS
       stm32eforth.s:879    .text.reset_handler:00000000000003be $t
       stm32eforth.s:880    .text.reset_handler:00000000000003c0 UPLUS
       stm32eforth.s:891    .text.reset_handler:00000000000003d0 $d
       stm32eforth.s:892    .text.reset_handler:00000000000003d4 _RSHIFT
       stm32eforth.s:895    .text.reset_handler:00000000000003dc RSHIFT
       stm32eforth.s:903    .text.reset_handler:00000000000003e6 $d
       stm32eforth.s:904    .text.reset_handler:00000000000003ea _LSHIFT
       stm32eforth.s:907    .text.reset_handler:00000000000003f4 LSHIFT
       stm32eforth.s:915    .text.reset_handler:00000000000003fe $d
       stm32eforth.s:916    .text.reset_handler:0000000000000402 _PLUS
       stm32eforth.s:918    .text.reset_handler:0000000000000404 $t
       stm32eforth.s:919    .text.reset_handler:0000000000000404 PLUS
       stm32eforth.s:927    .text.reset_handler:000000000000040c $d
       stm32eforth.s:928    .text.reset_handler:0000000000000410 _SUBB
       stm32eforth.s:930    .text.reset_handler:0000000000000412 $t
       stm32eforth.s:931    .text.reset_handler:0000000000000414 SUBB
       stm32eforth.s:939    .text.reset_handler:000000000000041e $d
       stm32eforth.s:940    .text.reset_handler:0000000000000422 _STAR
       stm32eforth.s:942    .text.reset_handler:0000000000000424 $t
       stm32eforth.s:943    .text.reset_handler:0000000000000424 STAR
       stm32eforth.s:951    .text.reset_handler:000000000000042e $d
       stm32eforth.s:952    .text.reset_handler:0000000000000432 _UMSTA
       stm32eforth.s:954    .text.reset_handler:0000000000000436 $t
       stm32eforth.s:955    .text.reset_handler:0000000000000438 UMSTA
       stm32eforth.s:965    .text.reset_handler:0000000000000444 $d
       stm32eforth.s:966    .text.reset_handler:0000000000000448 _MSTAR
       stm32eforth.s:969    .text.reset_handler:000000000000044c MSTAR
       stm32eforth.s:979    .text.reset_handler:0000000000000458 $d
       stm32eforth.s:980    .text.reset_handler:000000000000045c _ONEP
       stm32eforth.s:983    .text.reset_handler:0000000000000460 ONEP
       stm32eforth.s:990    .text.reset_handler:0000000000000466 $d
       stm32eforth.s:991    .text.reset_handler:000000000000046a _ONEM
       stm32eforth.s:994    .text.reset_handler:0000000000000470 ONEM
       stm32eforth.s:1001   .text.reset_handler:0000000000000476 $d
       stm32eforth.s:1002   .text.reset_handler:000000000000047a _TWOP
ARM GAS  stm32eforth.s 			page 87


       stm32eforth.s:1005   .text.reset_handler:0000000000000480 TWOP
       stm32eforth.s:1012   .text.reset_handler:0000000000000486 $d
       stm32eforth.s:1013   .text.reset_handler:000000000000048a _TWOM
       stm32eforth.s:1016   .text.reset_handler:0000000000000490 TWOM
       stm32eforth.s:1023   .text.reset_handler:0000000000000496 $d
       stm32eforth.s:1024   .text.reset_handler:000000000000049a _CELLP
       stm32eforth.s:1026   .text.reset_handler:00000000000004a0 $t
       stm32eforth.s:1027   .text.reset_handler:00000000000004a0 CELLP
       stm32eforth.s:1034   .text.reset_handler:00000000000004a6 $d
       stm32eforth.s:1035   .text.reset_handler:00000000000004aa _CELLM
       stm32eforth.s:1037   .text.reset_handler:00000000000004b0 $t
       stm32eforth.s:1038   .text.reset_handler:00000000000004b0 CELLM
       stm32eforth.s:1045   .text.reset_handler:00000000000004b6 $d
       stm32eforth.s:1046   .text.reset_handler:00000000000004ba _BLANK
       stm32eforth.s:1049   .text.reset_handler:00000000000004c0 BLANK
       stm32eforth.s:1057   .text.reset_handler:00000000000004ca $d
       stm32eforth.s:1058   .text.reset_handler:00000000000004ce _CELLS
       stm32eforth.s:1060   .text.reset_handler:00000000000004d4 $t
       stm32eforth.s:1061   .text.reset_handler:00000000000004d4 CELLS
       stm32eforth.s:1068   .text.reset_handler:00000000000004da $d
       stm32eforth.s:1069   .text.reset_handler:00000000000004de _CELLSL
       stm32eforth.s:1071   .text.reset_handler:00000000000004e4 $t
       stm32eforth.s:1072   .text.reset_handler:00000000000004e4 CELLSL
       stm32eforth.s:1079   .text.reset_handler:00000000000004ea $d
       stm32eforth.s:1080   .text.reset_handler:00000000000004ee _TWOST
       stm32eforth.s:1083   .text.reset_handler:00000000000004f4 TWOST
       stm32eforth.s:1090   .text.reset_handler:00000000000004fa $d
       stm32eforth.s:1091   .text.reset_handler:00000000000004fe _TWOSL
       stm32eforth.s:1094   .text.reset_handler:0000000000000504 TWOSL
       stm32eforth.s:1101   .text.reset_handler:000000000000050a $d
       stm32eforth.s:1102   .text.reset_handler:000000000000050e _QDUP
       stm32eforth.s:1105   .text.reset_handler:0000000000000514 QDUP
       stm32eforth.s:1114   .text.reset_handler:000000000000051e $d
       stm32eforth.s:1115   .text.reset_handler:0000000000000522 _ROT
       stm32eforth.s:1117   .text.reset_handler:0000000000000526 $t
       stm32eforth.s:1118   .text.reset_handler:0000000000000528 ROT
       stm32eforth.s:1128   .text.reset_handler:0000000000000532 $d
       stm32eforth.s:1129   .text.reset_handler:0000000000000536 _DDROP
       stm32eforth.s:1131   .text.reset_handler:000000000000053c $t
       stm32eforth.s:1132   .text.reset_handler:000000000000053c DDROP
       stm32eforth.s:1140   .text.reset_handler:0000000000000546 $d
       stm32eforth.s:1141   .text.reset_handler:000000000000054a _DDUP
       stm32eforth.s:1144   .text.reset_handler:0000000000000550 DDUP
       stm32eforth.s:1153   .text.reset_handler:000000000000055c $d
       stm32eforth.s:1154   .text.reset_handler:0000000000000560 _DPLUS
       stm32eforth.s:1157   .text.reset_handler:0000000000000564 DPLUS
       stm32eforth.s:1169   .text.reset_handler:0000000000000578 $d
       stm32eforth.s:1170   .text.reset_handler:000000000000057c _INVER
       stm32eforth.s:1172   .text.reset_handler:0000000000000580 $t
       stm32eforth.s:1173   .text.reset_handler:0000000000000580 INVER
       stm32eforth.s:1180   .text.reset_handler:0000000000000586 $d
       stm32eforth.s:1181   .text.reset_handler:000000000000058a _NEGAT
       stm32eforth.s:1184   .text.reset_handler:0000000000000594 NEGAT
       stm32eforth.s:1191   .text.reset_handler:000000000000059a $d
       stm32eforth.s:1192   .text.reset_handler:000000000000059e _ABSS
       stm32eforth.s:1194   .text.reset_handler:00000000000005a2 $t
       stm32eforth.s:1195   .text.reset_handler:00000000000005a4 ABSS
ARM GAS  stm32eforth.s 			page 88


       stm32eforth.s:1204   .text.reset_handler:00000000000005ae $d
       stm32eforth.s:1205   .text.reset_handler:00000000000005b2 _EQUAL
       stm32eforth.s:1207   .text.reset_handler:00000000000005b4 $t
       stm32eforth.s:1208   .text.reset_handler:00000000000005b4 EQUAL
       stm32eforth.s:1219   .text.reset_handler:00000000000005c4 $d
       stm32eforth.s:1220   .text.reset_handler:00000000000005c8 _ULESS
       stm32eforth.s:1223   .text.reset_handler:00000000000005cc ULESS
       stm32eforth.s:1234   .text.reset_handler:00000000000005dc $d
       stm32eforth.s:1235   .text.reset_handler:00000000000005e0 _LESS
       stm32eforth.s:1237   .text.reset_handler:00000000000005e2 $t
       stm32eforth.s:1238   .text.reset_handler:00000000000005e4 LESS
       stm32eforth.s:1249   .text.reset_handler:00000000000005f4 $d
       stm32eforth.s:1250   .text.reset_handler:00000000000005f8 _GREAT
       stm32eforth.s:1252   .text.reset_handler:00000000000005fa $t
       stm32eforth.s:1253   .text.reset_handler:00000000000005fc GREAT
       stm32eforth.s:1264   .text.reset_handler:000000000000060c $d
       stm32eforth.s:1265   .text.reset_handler:0000000000000610 _MAX
       stm32eforth.s:1267   .text.reset_handler:0000000000000614 $t
       stm32eforth.s:1268   .text.reset_handler:0000000000000614 MAX
       stm32eforth.s:1278   .text.reset_handler:0000000000000620 $d
       stm32eforth.s:1279   .text.reset_handler:0000000000000624 _MIN
       stm32eforth.s:1281   .text.reset_handler:0000000000000628 $t
       stm32eforth.s:1282   .text.reset_handler:0000000000000628 MIN
       stm32eforth.s:1292   .text.reset_handler:0000000000000634 $d
       stm32eforth.s:1293   .text.reset_handler:0000000000000638 _PSTOR
       stm32eforth.s:1296   .text.reset_handler:000000000000063c PSTOR
       stm32eforth.s:1307   .text.reset_handler:000000000000064c $d
       stm32eforth.s:1308   .text.reset_handler:0000000000000650 _DSTOR
       stm32eforth.s:1311   .text.reset_handler:0000000000000654 DSTOR
       stm32eforth.s:1322   .text.reset_handler:0000000000000668 $d
       stm32eforth.s:1323   .text.reset_handler:000000000000066c _DAT
       stm32eforth.s:1326   .text.reset_handler:0000000000000670 DAT
       stm32eforth.s:1335   .text.reset_handler:000000000000067a $d
       stm32eforth.s:1336   .text.reset_handler:000000000000067e _COUNT
       stm32eforth.s:1338   .text.reset_handler:0000000000000684 $t
       stm32eforth.s:1339   .text.reset_handler:0000000000000684 COUNT
       stm32eforth.s:1348   .text.reset_handler:0000000000000690 $d
       stm32eforth.s:1349   .text.reset_handler:0000000000000694 _DNEGA
       stm32eforth.s:1351   .text.reset_handler:000000000000069c $t
       stm32eforth.s:1352   .text.reset_handler:000000000000069c DNEGA
       stm32eforth.s:1370   .text.reset_handler:00000000000006ac DOVAR
       stm32eforth.s:1382   .text.reset_handler:00000000000006ba DOCON
       stm32eforth.s:1393   .text.reset_handler:00000000000006c8 $d
       stm32eforth.s:1394   .text.reset_handler:00000000000006cc _MSEC
       stm32eforth.s:1397   .text.reset_handler:00000000000006d4 MSEC
       stm32eforth.s:1403   .text.reset_handler:00000000000006de $d
       stm32eforth.s:1404   .text.reset_handler:00000000000006e2 _TIMER
       stm32eforth.s:1406   .text.reset_handler:00000000000006e8 $t
       stm32eforth.s:1415   .text.reset_handler:00000000000006f2 $d
       stm32eforth.s:1416   .text.reset_handler:00000000000006f6 _TBOOT
       stm32eforth.s:1418   .text.reset_handler:00000000000006fc $t
       stm32eforth.s:1419   .text.reset_handler:00000000000006fc TBOOT
       stm32eforth.s:1427   .text.reset_handler:0000000000000706 $d
       stm32eforth.s:1428   .text.reset_handler:000000000000070a _BASE
       stm32eforth.s:1431   .text.reset_handler:0000000000000710 BASE
       stm32eforth.s:1443   .text.reset_handler:000000000000071a TEMP
       stm32eforth.s:1451   .text.reset_handler:0000000000000724 $d
ARM GAS  stm32eforth.s 			page 89


       stm32eforth.s:1452   .text.reset_handler:0000000000000728 _SPAN
       stm32eforth.s:1455   .text.reset_handler:0000000000000730 SPAN
       stm32eforth.s:1463   .text.reset_handler:000000000000073a $d
       stm32eforth.s:1464   .text.reset_handler:000000000000073e _INN
       stm32eforth.s:1466   .text.reset_handler:0000000000000742 $t
       stm32eforth.s:1467   .text.reset_handler:0000000000000744 INN
       stm32eforth.s:1475   .text.reset_handler:000000000000074e $d
       stm32eforth.s:1476   .text.reset_handler:0000000000000752 _NTIB
       stm32eforth.s:1479   .text.reset_handler:0000000000000758 NTIB
       stm32eforth.s:1487   .text.reset_handler:0000000000000762 $d
       stm32eforth.s:1488   .text.reset_handler:0000000000000766 _TEVAL
       stm32eforth.s:1490   .text.reset_handler:000000000000076c $t
       stm32eforth.s:1491   .text.reset_handler:000000000000076c TEVAL
       stm32eforth.s:1499   .text.reset_handler:0000000000000776 $d
       stm32eforth.s:1500   .text.reset_handler:000000000000077a _HLD
       stm32eforth.s:1502   .text.reset_handler:000000000000077e $t
       stm32eforth.s:1503   .text.reset_handler:0000000000000780 HLD
       stm32eforth.s:1511   .text.reset_handler:000000000000078a $d
       stm32eforth.s:1512   .text.reset_handler:000000000000078e _CNTXT
       stm32eforth.s:1514   .text.reset_handler:0000000000000796 $t
       stm32eforth.s:1515   .text.reset_handler:0000000000000798 CNTXT
       stm32eforth.s:1516   .text.reset_handler:0000000000000798 CRRNT
       stm32eforth.s:1524   .text.reset_handler:00000000000007a2 $d
       stm32eforth.s:1525   .text.reset_handler:00000000000007a6 _CP
       stm32eforth.s:1528   .text.reset_handler:00000000000007ac CPP
       stm32eforth.s:1535   .text.reset_handler:00000000000007b6 $d
       stm32eforth.s:1536   .text.reset_handler:00000000000007ba _FCPP
       stm32eforth.s:1539   .text.reset_handler:00000000000007c0 FCPP
       stm32eforth.s:1547   .text.reset_handler:00000000000007ca $d
       stm32eforth.s:1548   .text.reset_handler:00000000000007ce _LAST
       stm32eforth.s:1551   .text.reset_handler:00000000000007d4 LAST
       stm32eforth.s:1562   .text.reset_handler:00000000000007de $d
       stm32eforth.s:1563   .text.reset_handler:00000000000007e2 _WITHI
       stm32eforth.s:1566   .text.reset_handler:00000000000007ec WITHI
       stm32eforth.s:1581   .text.reset_handler:000000000000080e $d
       stm32eforth.s:1582   .text.reset_handler:0000000000000812 _UMMOD
       stm32eforth.s:1585   .text.reset_handler:000000000000081c UMMOD
       stm32eforth.s:1589   .text.reset_handler:0000000000000826 UMMOD0
       stm32eforth.s:1596   .text.reset_handler:0000000000000836 UMMOD1
       stm32eforth.s:1602   .text.reset_handler:0000000000000840 UMMOD2
       stm32eforth.s:1612   .text.reset_handler:000000000000084a $d
       stm32eforth.s:1613   .text.reset_handler:000000000000084e _MSMOD
       stm32eforth.s:1615   .text.reset_handler:0000000000000854 $t
       stm32eforth.s:1616   .text.reset_handler:0000000000000854 MSMOD
       stm32eforth.s:1623   .text.reset_handler:000000000000086c $d
       stm32eforth.s:1628   .text.reset_handler:0000000000000880 MMOD1
       stm32eforth.s:1624   .text.reset_handler:0000000000000870 $t
       stm32eforth.s:1633   .text.reset_handler:0000000000000890 $d
       stm32eforth.s:1636   .text.reset_handler:000000000000089c MMOD2
       stm32eforth.s:1634   .text.reset_handler:0000000000000894 $t
       stm32eforth.s:1641   .text.reset_handler:00000000000008ac $d
       stm32eforth.s:1645   .text.reset_handler:00000000000008bc MMOD3
       stm32eforth.s:1642   .text.reset_handler:00000000000008b0 $t
       stm32eforth.s:1651   .text.reset_handler:00000000000008c2 $d
       stm32eforth.s:1652   .text.reset_handler:00000000000008c6 _SLMOD
       stm32eforth.s:1655   .text.reset_handler:00000000000008cc SLMOD
       stm32eforth.s:1666   .text.reset_handler:00000000000008e6 $d
ARM GAS  stm32eforth.s 			page 90


       stm32eforth.s:1667   .text.reset_handler:00000000000008ea _MODD
       stm32eforth.s:1669   .text.reset_handler:00000000000008ee $t
       stm32eforth.s:1670   .text.reset_handler:00000000000008f0 MODD
       stm32eforth.s:1679   .text.reset_handler:0000000000000902 $d
       stm32eforth.s:1680   .text.reset_handler:0000000000000906 _SLASH
       stm32eforth.s:1682   .text.reset_handler:0000000000000908 $t
       stm32eforth.s:1683   .text.reset_handler:0000000000000908 SLASH
       stm32eforth.s:1693   .text.reset_handler:000000000000091e $d
       stm32eforth.s:1694   .text.reset_handler:0000000000000922 _SSMOD
       stm32eforth.s:1696   .text.reset_handler:0000000000000928 $t
       stm32eforth.s:1697   .text.reset_handler:0000000000000928 SSMOD
       stm32eforth.s:1708   .text.reset_handler:0000000000000942 $d
       stm32eforth.s:1709   .text.reset_handler:0000000000000946 _STASL
       stm32eforth.s:1712   .text.reset_handler:000000000000094c STASL
       stm32eforth.s:1725   .text.reset_handler:0000000000000962 $d
       stm32eforth.s:1726   .text.reset_handler:0000000000000966 _ALGND
       stm32eforth.s:1728   .text.reset_handler:000000000000096e $t
       stm32eforth.s:1729   .text.reset_handler:0000000000000970 ALGND
       stm32eforth.s:1738   .text.reset_handler:000000000000097e $d
       stm32eforth.s:1739   .text.reset_handler:0000000000000982 _TCHAR
       stm32eforth.s:1741   .text.reset_handler:0000000000000988 $t
       stm32eforth.s:1742   .text.reset_handler:0000000000000988 TCHAR
       stm32eforth.s:1745   .text.reset_handler:0000000000000990 $d
       stm32eforth.s:1746   .text.reset_handler:0000000000000994 $t
       stm32eforth.s:1750   .text.reset_handler:00000000000009a4 $d
       stm32eforth.s:1751   .text.reset_handler:00000000000009a8 $t
       stm32eforth.s:1754   .text.reset_handler:00000000000009b4 $d
       stm32eforth.s:1758   .text.reset_handler:00000000000009c4 TCHA1
       stm32eforth.s:1755   .text.reset_handler:00000000000009b8 $t
       stm32eforth.s:1757   .text.reset_handler:00000000000009c0 $d
       stm32eforth.s:1759   .text.reset_handler:00000000000009c4 $t
       stm32eforth.s:1764   .text.reset_handler:00000000000009ca $d
       stm32eforth.s:1765   .text.reset_handler:00000000000009ce _DEPTH
       stm32eforth.s:1767   .text.reset_handler:00000000000009d4 $t
       stm32eforth.s:1768   .text.reset_handler:00000000000009d4 DEPTH
       stm32eforth.s:1780   .text.reset_handler:00000000000009ee $d
       stm32eforth.s:1781   .text.reset_handler:00000000000009f2 _PICK
       stm32eforth.s:1784   .text.reset_handler:00000000000009f8 PICK
       stm32eforth.s:1799   .text.reset_handler:0000000000000a16 $d
       stm32eforth.s:1800   .text.reset_handler:0000000000000a1a _HERE
       stm32eforth.s:1803   .text.reset_handler:0000000000000a20 HERE
       stm32eforth.s:1812   .text.reset_handler:0000000000000a32 $d
       stm32eforth.s:1813   .text.reset_handler:0000000000000a36 _PAD
       stm32eforth.s:1815   .text.reset_handler:0000000000000a3a $t
       stm32eforth.s:1816   .text.reset_handler:0000000000000a3c PAD
       stm32eforth.s:1825   .text.reset_handler:0000000000000a4e $d
       stm32eforth.s:1826   .text.reset_handler:0000000000000a52 _TIB
       stm32eforth.s:1828   .text.reset_handler:0000000000000a56 $t
       stm32eforth.s:1829   .text.reset_handler:0000000000000a58 TIB
       stm32eforth.s:1837   .text.reset_handler:0000000000000a60 $d
       stm32eforth.s:1838   .text.reset_handler:0000000000000a64 _ATEXE
       stm32eforth.s:1841   .text.reset_handler:0000000000000a70 ATEXE
       stm32eforth.s:1853   .text.reset_handler:0000000000000a82 $d
       stm32eforth.s:1854   .text.reset_handler:0000000000000a86 _CMOVE
       stm32eforth.s:1856   .text.reset_handler:0000000000000a8c $t
       stm32eforth.s:1857   .text.reset_handler:0000000000000a8c CMOVE
       stm32eforth.s:1864   .text.reset_handler:0000000000000a9e CMOV1
ARM GAS  stm32eforth.s 			page 91


       stm32eforth.s:1861   .text.reset_handler:0000000000000a96 CMOV0
       stm32eforth.s:1869   .text.reset_handler:0000000000000aa8 CMOV2
       stm32eforth.s:1876   .text.reset_handler:0000000000000aae $d
       stm32eforth.s:1877   .text.reset_handler:0000000000000ab2 _MOVE
       stm32eforth.s:1880   .text.reset_handler:0000000000000ab8 MOVE
       stm32eforth.s:1888   .text.reset_handler:0000000000000ace MOVE1
       stm32eforth.s:1885   .text.reset_handler:0000000000000ac6 MOVE0
       stm32eforth.s:1893   .text.reset_handler:0000000000000ad8 MOVE2
       stm32eforth.s:1900   .text.reset_handler:0000000000000ade $d
       stm32eforth.s:1901   .text.reset_handler:0000000000000ae2 _FILL
       stm32eforth.s:1904   .text.reset_handler:0000000000000ae8 FILL
       stm32eforth.s:1907   .text.reset_handler:0000000000000af0 FILL0
       stm32eforth.s:1910   .text.reset_handler:0000000000000af4 FILL1
       stm32eforth.s:1916   .text.reset_handler:0000000000000b02 FILL2
       stm32eforth.s:1923   .text.reset_handler:0000000000000b08 $d
       stm32eforth.s:1924   .text.reset_handler:0000000000000b0c _PACKS
       stm32eforth.s:1927   .text.reset_handler:0000000000000b14 PACKS
       stm32eforth.s:1936   .text.reset_handler:0000000000000b34 $d
       stm32eforth.s:1937   .text.reset_handler:0000000000000b38 $t
       stm32eforth.s:1939   .text.reset_handler:0000000000000b40 $d
       stm32eforth.s:1940   .text.reset_handler:0000000000000b44 $t
       stm32eforth.s:1957   .text.reset_handler:0000000000000b6e $d
       stm32eforth.s:1958   .text.reset_handler:0000000000000b72 _DIGIT
       stm32eforth.s:1960   .text.reset_handler:0000000000000b78 $t
       stm32eforth.s:1961   .text.reset_handler:0000000000000b78 DIGIT
       stm32eforth.s:1964   .text.reset_handler:0000000000000b80 $d
       stm32eforth.s:1965   .text.reset_handler:0000000000000b84 $t
       stm32eforth.s:1975   .text.reset_handler:0000000000000b9e $d
       stm32eforth.s:1976   .text.reset_handler:0000000000000ba2 _EXTRC
       stm32eforth.s:1978   .text.reset_handler:0000000000000baa $t
       stm32eforth.s:1979   .text.reset_handler:0000000000000bac EXTRC
       stm32eforth.s:1982   .text.reset_handler:0000000000000bb4 $d
       stm32eforth.s:1983   .text.reset_handler:0000000000000bb8 $t
       stm32eforth.s:1992   .text.reset_handler:0000000000000bce $d
       stm32eforth.s:1993   .text.reset_handler:0000000000000bd2 _BDIGS
       stm32eforth.s:1996   .text.reset_handler:0000000000000bd8 BDIGS
       stm32eforth.s:2006   .text.reset_handler:0000000000000bee $d
       stm32eforth.s:2007   .text.reset_handler:0000000000000bf2 _HOLD
       stm32eforth.s:2010   .text.reset_handler:0000000000000bf8 HOLD
       stm32eforth.s:2024   .text.reset_handler:0000000000000c1e $d
       stm32eforth.s:2025   .text.reset_handler:0000000000000c22 _DIG
       stm32eforth.s:2027   .text.reset_handler:0000000000000c24 $t
       stm32eforth.s:2028   .text.reset_handler:0000000000000c24 DIG
       stm32eforth.s:2039   .text.reset_handler:0000000000000c3e $d
       stm32eforth.s:2040   .text.reset_handler:0000000000000c42 _DIGS
       stm32eforth.s:2043   .text.reset_handler:0000000000000c48 DIGS
       stm32eforth.s:2045   .text.reset_handler:0000000000000c4c DIGS1
       stm32eforth.s:2049   .text.reset_handler:0000000000000c58 $d
       stm32eforth.s:2051   .text.reset_handler:0000000000000c5e DIGS2
       stm32eforth.s:2050   .text.reset_handler:0000000000000c5c $t
       stm32eforth.s:2057   .text.reset_handler:0000000000000c64 $d
       stm32eforth.s:2058   .text.reset_handler:0000000000000c68 _SIGN
       stm32eforth.s:2061   .text.reset_handler:0000000000000c70 SIGN
       stm32eforth.s:2065   .text.reset_handler:0000000000000c7c $d
       stm32eforth.s:2069   .text.reset_handler:0000000000000c8c SIGN1
       stm32eforth.s:2066   .text.reset_handler:0000000000000c80 $t
       stm32eforth.s:2067   .text.reset_handler:0000000000000c84 $d
ARM GAS  stm32eforth.s 			page 92


       stm32eforth.s:2068   .text.reset_handler:0000000000000c88 $t
       stm32eforth.s:2075   .text.reset_handler:0000000000000c92 $d
       stm32eforth.s:2076   .text.reset_handler:0000000000000c96 _EDIGS
       stm32eforth.s:2079   .text.reset_handler:0000000000000c9c EDIGS
       stm32eforth.s:2096   .text.reset_handler:0000000000000cbe STRR
       stm32eforth.s:2111   .text.reset_handler:0000000000000ce8 $d
       stm32eforth.s:2112   .text.reset_handler:0000000000000cec _HEX
       stm32eforth.s:2114   .text.reset_handler:0000000000000cf0 $t
       stm32eforth.s:2115   .text.reset_handler:0000000000000cf0 HEX
       stm32eforth.s:2118   .text.reset_handler:0000000000000cf8 $d
       stm32eforth.s:2119   .text.reset_handler:0000000000000cfc $t
       stm32eforth.s:2126   .text.reset_handler:0000000000000d0a $d
       stm32eforth.s:2127   .text.reset_handler:0000000000000d0e _DECIM
       stm32eforth.s:2129   .text.reset_handler:0000000000000d16 $t
       stm32eforth.s:2130   .text.reset_handler:0000000000000d18 DECIM
       stm32eforth.s:2133   .text.reset_handler:0000000000000d20 $d
       stm32eforth.s:2134   .text.reset_handler:0000000000000d24 $t
       stm32eforth.s:2144   .text.reset_handler:0000000000000d32 $d
       stm32eforth.s:2145   .text.reset_handler:0000000000000d36 _DIGTQ
       stm32eforth.s:2148   .text.reset_handler:0000000000000d40 DIGTQ
       stm32eforth.s:2152   .text.reset_handler:0000000000000d4c $d
       stm32eforth.s:2153   .text.reset_handler:0000000000000d50 $t
       stm32eforth.s:2155   .text.reset_handler:0000000000000d58 $d
       stm32eforth.s:2156   .text.reset_handler:0000000000000d5c $t
       stm32eforth.s:2159   .text.reset_handler:0000000000000d68 $d
       stm32eforth.s:2168   .text.reset_handler:0000000000000d8c DGTQ1
       stm32eforth.s:2160   .text.reset_handler:0000000000000d6c $t
       stm32eforth.s:2161   .text.reset_handler:0000000000000d70 $d
       stm32eforth.s:2162   .text.reset_handler:0000000000000d74 $t
       stm32eforth.s:2165   .text.reset_handler:0000000000000d80 $d
       stm32eforth.s:2166   .text.reset_handler:0000000000000d84 $t
       stm32eforth.s:2177   .text.reset_handler:0000000000000d9e $d
       stm32eforth.s:2178   .text.reset_handler:0000000000000da2 _NUMBQ
       stm32eforth.s:2180   .text.reset_handler:0000000000000daa $t
       stm32eforth.s:2181   .text.reset_handler:0000000000000dac NUMBQ
       stm32eforth.s:2187   .text.reset_handler:0000000000000dc0 $d
       stm32eforth.s:2188   .text.reset_handler:0000000000000dc4 $t
       stm32eforth.s:2193   .text.reset_handler:0000000000000dd8 $d
       stm32eforth.s:2194   .text.reset_handler:0000000000000ddc $t
       stm32eforth.s:2196   .text.reset_handler:0000000000000de4 $d
       stm32eforth.s:2202   .text.reset_handler:0000000000000dfc NUMQ1
       stm32eforth.s:2197   .text.reset_handler:0000000000000de8 $t
       stm32eforth.s:2206   .text.reset_handler:0000000000000e08 $d
       stm32eforth.s:2207   .text.reset_handler:0000000000000e0c $t
       stm32eforth.s:2217   .text.reset_handler:0000000000000e34 $d
       stm32eforth.s:2256   .text.reset_handler:0000000000000ec0 NUMQ6
       stm32eforth.s:2218   .text.reset_handler:0000000000000e38 $t
       stm32eforth.s:2220   .text.reset_handler:0000000000000e40 NUMQ2
       stm32eforth.s:2228   .text.reset_handler:0000000000000e5c $d
       stm32eforth.s:2247   .text.reset_handler:0000000000000ea4 NUMQ4
       stm32eforth.s:2229   .text.reset_handler:0000000000000e60 $t
       stm32eforth.s:2237   .text.reset_handler:0000000000000e80 $d
       stm32eforth.s:2238   .text.reset_handler:0000000000000e84 $t
       stm32eforth.s:2242   .text.reset_handler:0000000000000e94 $d
       stm32eforth.s:2244   .text.reset_handler:0000000000000e9c NUMQ3
       stm32eforth.s:2243   .text.reset_handler:0000000000000e98 $t
       stm32eforth.s:2254   .text.reset_handler:0000000000000ebc NUMQ5
ARM GAS  stm32eforth.s 			page 93


       stm32eforth.s:2253   .text.reset_handler:0000000000000eb8 $d
       stm32eforth.s:2255   .text.reset_handler:0000000000000ebc $t
       stm32eforth.s:2270   .text.reset_handler:0000000000000eda $d
       stm32eforth.s:2271   .text.reset_handler:0000000000000ede _KEY
       stm32eforth.s:2273   .text.reset_handler:0000000000000ee2 $t
       stm32eforth.s:2274   .text.reset_handler:0000000000000ee4 KEY
       stm32eforth.s:2276   .text.reset_handler:0000000000000ee8 KEY1
       stm32eforth.s:2279   .text.reset_handler:0000000000000ef0 $d
       stm32eforth.s:2281   .text.reset_handler:0000000000000ef4 $t
       stm32eforth.s:2283   .text.reset_handler:0000000000000efc $d
       stm32eforth.s:2284   .text.reset_handler:0000000000000f00 $t
       stm32eforth.s:2287   .text.reset_handler:0000000000000f0c $d
       stm32eforth.s:2288   .text.reset_handler:0000000000000f10 $t
       stm32eforth.s:2293   .text.reset_handler:0000000000000f16 $d
       stm32eforth.s:2294   .text.reset_handler:0000000000000f1a _SPACE
       stm32eforth.s:2296   .text.reset_handler:0000000000000f20 $t
       stm32eforth.s:2297   .text.reset_handler:0000000000000f20 SPACE
       stm32eforth.s:2306   .text.reset_handler:0000000000000f32 $d
       stm32eforth.s:2307   .text.reset_handler:0000000000000f36 _SPACS
       stm32eforth.s:2310   .text.reset_handler:0000000000000f40 SPACS
       stm32eforth.s:2313   .text.reset_handler:0000000000000f48 $d
       stm32eforth.s:2314   .text.reset_handler:0000000000000f4c $t
       stm32eforth.s:2319   .text.reset_handler:0000000000000f5c CHAR2
       stm32eforth.s:2317   .text.reset_handler:0000000000000f58 CHAR1
       stm32eforth.s:2321   .text.reset_handler:0000000000000f60 $d
       stm32eforth.s:2322   .text.reset_handler:0000000000000f64 $t
       stm32eforth.s:2327   .text.reset_handler:0000000000000f6a $d
       stm32eforth.s:2328   .text.reset_handler:0000000000000f6e _TYPEE
       stm32eforth.s:2331   .text.reset_handler:0000000000000f74 TYPEE
       stm32eforth.s:2339   .text.reset_handler:0000000000000f8a TYPE2
       stm32eforth.s:2335   .text.reset_handler:0000000000000f7e TYPE1
       stm32eforth.s:2341   .text.reset_handler:0000000000000f8e $d
       stm32eforth.s:2342   .text.reset_handler:0000000000000f92 $t
       stm32eforth.s:2348   .text.reset_handler:0000000000000f9c $d
       stm32eforth.s:2349   .text.reset_handler:0000000000000fa0 _CR
       stm32eforth.s:2355   .text.reset_handler:0000000000000fac $d
       stm32eforth.s:2356   .text.reset_handler:0000000000000fb0 $t
       stm32eforth.s:2358   .text.reset_handler:0000000000000fb8 $d
       stm32eforth.s:2359   .text.reset_handler:0000000000000fbc $t
       stm32eforth.s:2370   .text.reset_handler:0000000000000fc6 DOSTR
       stm32eforth.s:2393   .text.reset_handler:0000000000000ffc STRQP
       stm32eforth.s:2405   .text.reset_handler:000000000000100a DOTST
       stm32eforth.s:2427   .text.reset_handler:000000000000102e $d
       stm32eforth.s:2428   .text.reset_handler:0000000000001032 _DOTR
       stm32eforth.s:2431   .text.reset_handler:0000000000001038 DOTR
       stm32eforth.s:2445   .text.reset_handler:000000000000105e $d
       stm32eforth.s:2446   .text.reset_handler:0000000000001062 _UDOTR
       stm32eforth.s:2448   .text.reset_handler:0000000000001066 $t
       stm32eforth.s:2449   .text.reset_handler:0000000000001068 UDOTR
       stm32eforth.s:2465   .text.reset_handler:0000000000001096 $d
       stm32eforth.s:2466   .text.reset_handler:000000000000109a _UDOT
       stm32eforth.s:2469   .text.reset_handler:00000000000010a0 UDOT
       stm32eforth.s:2481   .text.reset_handler:00000000000010be $d
       stm32eforth.s:2482   .text.reset_handler:00000000000010c2 _DOT
       stm32eforth.s:2484   .text.reset_handler:00000000000010c4 $t
       stm32eforth.s:2485   .text.reset_handler:00000000000010c4 DOT
       stm32eforth.s:2490   .text.reset_handler:00000000000010d4 $d
ARM GAS  stm32eforth.s 			page 94


       stm32eforth.s:2491   .text.reset_handler:00000000000010d8 $t
       stm32eforth.s:2493   .text.reset_handler:00000000000010e0 $d
       stm32eforth.s:2496   .text.reset_handler:00000000000010ee DOT1
       stm32eforth.s:2494   .text.reset_handler:00000000000010e4 $t
       stm32eforth.s:2505   .text.reset_handler:0000000000001100 $d
       stm32eforth.s:2506   .text.reset_handler:0000000000001104 _QUEST
       stm32eforth.s:2508   .text.reset_handler:0000000000001106 $t
       stm32eforth.s:2509   .text.reset_handler:0000000000001108 QUEST
       stm32eforth.s:2525   .text.reset_handler:000000000000111a PARS
       stm32eforth.s:2533   .text.reset_handler:0000000000001136 $d
       stm32eforth.s:2601   .text.reset_handler:000000000000122c PARS8
       stm32eforth.s:2534   .text.reset_handler:000000000000113a $t
       stm32eforth.s:2540   .text.reset_handler:0000000000001152 $d
       stm32eforth.s:2562   .text.reset_handler:00000000000011a4 PARS3
       stm32eforth.s:2541   .text.reset_handler:0000000000001156 $t
       stm32eforth.s:2542   .text.reset_handler:000000000000115a PARS1
       stm32eforth.s:2550   .text.reset_handler:0000000000001176 $d
       stm32eforth.s:2560   .text.reset_handler:00000000000011a0 PARS2
       stm32eforth.s:2551   .text.reset_handler:000000000000117a $t
       stm32eforth.s:2553   .text.reset_handler:0000000000001182 $d
       stm32eforth.s:2554   .text.reset_handler:0000000000001186 $t
       stm32eforth.s:2557   .text.reset_handler:0000000000001192 $d
       stm32eforth.s:2558   .text.reset_handler:0000000000001196 $t
       stm32eforth.s:2566   .text.reset_handler:00000000000011b0 PARS4
       stm32eforth.s:2577   .text.reset_handler:00000000000011d8 $d
       stm32eforth.s:2579   .text.reset_handler:00000000000011e0 PARS5
       stm32eforth.s:2578   .text.reset_handler:00000000000011dc $t
       stm32eforth.s:2581   .text.reset_handler:00000000000011e4 $d
       stm32eforth.s:2588   .text.reset_handler:00000000000011fe PARS6
       stm32eforth.s:2582   .text.reset_handler:00000000000011e8 $t
       stm32eforth.s:2584   .text.reset_handler:00000000000011f0 $d
       stm32eforth.s:2585   .text.reset_handler:00000000000011f4 $t
       stm32eforth.s:2594   .text.reset_handler:0000000000001212 PARS7
       stm32eforth.s:2610   .text.reset_handler:000000000000123e $d
       stm32eforth.s:2611   .text.reset_handler:0000000000001242 _PARSE
       stm32eforth.s:2613   .text.reset_handler:0000000000001248 $t
       stm32eforth.s:2614   .text.reset_handler:0000000000001248 PARSE
       stm32eforth.s:2635   .text.reset_handler:000000000000128a $d
       stm32eforth.s:2636   .text.reset_handler:000000000000128e _DOTPR
       stm32eforth.s:2639   .text.reset_handler:0000000000001294 DOTPR
       stm32eforth.s:2642   .text.reset_handler:000000000000129c $d
       stm32eforth.s:2643   .text.reset_handler:00000000000012a0 $t
       stm32eforth.s:2650   .text.reset_handler:00000000000012ae $d
       stm32eforth.s:2651   .text.reset_handler:00000000000012b2 _PAREN
       stm32eforth.s:2653   .text.reset_handler:00000000000012b4 $t
       stm32eforth.s:2654   .text.reset_handler:00000000000012b4 PAREN
       stm32eforth.s:2657   .text.reset_handler:00000000000012bc $d
       stm32eforth.s:2658   .text.reset_handler:00000000000012c0 $t
       stm32eforth.s:2665   .text.reset_handler:00000000000012ce $d
       stm32eforth.s:2666   .text.reset_handler:00000000000012d2 _BKSLA
       stm32eforth.s:2668   .text.reset_handler:00000000000012d4 $t
       stm32eforth.s:2669   .text.reset_handler:00000000000012d4 BKSLA
       stm32eforth.s:2680   .text.reset_handler:00000000000012ee $d
       stm32eforth.s:2681   .text.reset_handler:00000000000012f2 _CHAR
       stm32eforth.s:2684   .text.reset_handler:00000000000012f8 CHAR
       stm32eforth.s:2695   .text.reset_handler:0000000000001312 $d
       stm32eforth.s:2696   .text.reset_handler:0000000000001316 _WORDD
ARM GAS  stm32eforth.s 			page 95


       stm32eforth.s:2699   .text.reset_handler:000000000000131c WORDD
       stm32eforth.s:2710   .text.reset_handler:0000000000001336 $d
       stm32eforth.s:2711   .text.reset_handler:000000000000133a _TOKEN
       stm32eforth.s:2713   .text.reset_handler:0000000000001340 $t
       stm32eforth.s:2714   .text.reset_handler:0000000000001340 TOKEN
       stm32eforth.s:2726   .text.reset_handler:0000000000001352 $d
       stm32eforth.s:2727   .text.reset_handler:0000000000001356 _NAMET
       stm32eforth.s:2729   .text.reset_handler:000000000000135c $t
       stm32eforth.s:2730   .text.reset_handler:000000000000135c NAMET
       stm32eforth.s:2734   .text.reset_handler:0000000000001368 $d
       stm32eforth.s:2735   .text.reset_handler:000000000000136c $t
       stm32eforth.s:2748   .text.reset_handler:000000000000137e $d
       stm32eforth.s:2749   .text.reset_handler:0000000000001382 _SAMEQ
       stm32eforth.s:2751   .text.reset_handler:0000000000001388 $t
       stm32eforth.s:2752   .text.reset_handler:0000000000001388 SAMEQ
       stm32eforth.s:2772   .text.reset_handler:00000000000013d2 SAME2
       stm32eforth.s:2756   .text.reset_handler:0000000000001394 SAME1
       stm32eforth.s:2768   .text.reset_handler:00000000000013c0 $d
       stm32eforth.s:2769   .text.reset_handler:00000000000013c4 $t
       stm32eforth.s:2774   .text.reset_handler:00000000000013d6 $d
       stm32eforth.s:2775   .text.reset_handler:00000000000013da $t
       stm32eforth.s:2776   .text.reset_handler:00000000000013de $d
       stm32eforth.s:2777   .text.reset_handler:00000000000013e2 $t
       stm32eforth.s:2789   .text.reset_handler:00000000000013e8 FIND
       stm32eforth.s:2798   .text.reset_handler:0000000000001408 FIND1
       stm32eforth.s:2801   .text.reset_handler:0000000000001410 $d
       stm32eforth.s:2821   .text.reset_handler:0000000000001458 FIND6
       stm32eforth.s:2802   .text.reset_handler:0000000000001414 $t
       stm32eforth.s:2805   .text.reset_handler:0000000000001420 $d
       stm32eforth.s:2806   .text.reset_handler:0000000000001424 $t
       stm32eforth.s:2810   .text.reset_handler:0000000000001434 $d
       stm32eforth.s:2814   .text.reset_handler:0000000000001444 FIND2
       stm32eforth.s:2811   .text.reset_handler:0000000000001438 $t
       stm32eforth.s:2819   .text.reset_handler:0000000000001454 FIND3
       stm32eforth.s:2828   .text.reset_handler:0000000000001472 FIND4
       stm32eforth.s:2830   .text.reset_handler:0000000000001476 $d
       stm32eforth.s:2835   .text.reset_handler:000000000000148a FIND5
       stm32eforth.s:2831   .text.reset_handler:000000000000147a $t
       stm32eforth.s:2849   .text.reset_handler:00000000000014b0 $d
       stm32eforth.s:2850   .text.reset_handler:00000000000014b4 _NAMEQ
       stm32eforth.s:2852   .text.reset_handler:00000000000014ba $t
       stm32eforth.s:2853   .text.reset_handler:00000000000014bc NAMEQ
       stm32eforth.s:2870   .text.reset_handler:00000000000014d2 BKSP
       stm32eforth.s:2879   .text.reset_handler:00000000000014f2 $d
       stm32eforth.s:2892   .text.reset_handler:000000000000151a BACK1
       stm32eforth.s:2880   .text.reset_handler:00000000000014f6 $t
       stm32eforth.s:2881   .text.reset_handler:00000000000014fa $d
       stm32eforth.s:2882   .text.reset_handler:00000000000014fe $t
       stm32eforth.s:2889   .text.reset_handler:0000000000001512 $d
       stm32eforth.s:2890   .text.reset_handler:0000000000001516 $t
       stm32eforth.s:2902   .text.reset_handler:0000000000001520 TAP
       stm32eforth.s:2919   .text.reset_handler:000000000000153e KTAP
       stm32eforth.s:2920   .text.reset_handler:000000000000153e TTAP
       stm32eforth.s:2924   .text.reset_handler:000000000000154a $d
       stm32eforth.s:2925   .text.reset_handler:000000000000154e $t
       stm32eforth.s:2927   .text.reset_handler:0000000000001556 $d
       stm32eforth.s:2940   .text.reset_handler:000000000000158a KTAP2
ARM GAS  stm32eforth.s 			page 96


       stm32eforth.s:2928   .text.reset_handler:000000000000155a $t
       stm32eforth.s:2929   .text.reset_handler:000000000000155e $d
       stm32eforth.s:2930   .text.reset_handler:0000000000001562 $t
       stm32eforth.s:2932   .text.reset_handler:000000000000156a $d
       stm32eforth.s:2937   .text.reset_handler:0000000000001580 KTAP1
       stm32eforth.s:2933   .text.reset_handler:000000000000156e $t
       stm32eforth.s:2936   .text.reset_handler:000000000000157c $d
       stm32eforth.s:2938   .text.reset_handler:0000000000001580 $t
       stm32eforth.s:2950   .text.reset_handler:00000000000015a0 $d
       stm32eforth.s:2951   .text.reset_handler:00000000000015a4 _ACCEP
       stm32eforth.s:2954   .text.reset_handler:00000000000015ac ACCEP
       stm32eforth.s:2959   .text.reset_handler:00000000000015bc ACCP1
       stm32eforth.s:2963   .text.reset_handler:00000000000015c8 $d
       stm32eforth.s:2979   .text.reset_handler:00000000000015f8 ACCP4
       stm32eforth.s:2964   .text.reset_handler:00000000000015cc $t
       stm32eforth.s:2968   .text.reset_handler:00000000000015dc $d
       stm32eforth.s:2969   .text.reset_handler:00000000000015e0 $t
       stm32eforth.s:2971   .text.reset_handler:00000000000015e8 $d
       stm32eforth.s:2974   .text.reset_handler:00000000000015f2 ACCP2
       stm32eforth.s:2972   .text.reset_handler:00000000000015ec $t
       stm32eforth.s:2977   .text.reset_handler:00000000000015f6 ACCP3
       stm32eforth.s:2988   .text.reset_handler:000000000000160a $d
       stm32eforth.s:2989   .text.reset_handler:000000000000160e _QUERY
       stm32eforth.s:2991   .text.reset_handler:0000000000001614 $t
       stm32eforth.s:2992   .text.reset_handler:0000000000001614 QUERY
       stm32eforth.s:2996   .text.reset_handler:0000000000001620 $d
       stm32eforth.s:2997   .text.reset_handler:0000000000001624 $t
       stm32eforth.s:3002   .text.reset_handler:0000000000001638 $d
       stm32eforth.s:3003   .text.reset_handler:000000000000163c $t
       stm32eforth.s:3013   .text.reset_handler:000000000000164a $d
       stm32eforth.s:3014   .text.reset_handler:000000000000164e _ABORT
       stm32eforth.s:3016   .text.reset_handler:0000000000001654 $t
       stm32eforth.s:3017   .text.reset_handler:0000000000001654 ABORT
       stm32eforth.s:3023   .text.reset_handler:0000000000001668 $d
       stm32eforth.s:3024   .text.reset_handler:000000000000166c $t
       stm32eforth.s:3170   .text.reset_handler:00000000000017f0 PRESE
       stm32eforth.s:3185   .text.reset_handler:0000000000001808 QUIT
       stm32eforth.s:3036   .text.reset_handler:000000000000167c ABORQ
       stm32eforth.s:3039   .text.reset_handler:0000000000001684 $d
       stm32eforth.s:3045   .text.reset_handler:000000000000169c ABOR1
       stm32eforth.s:3040   .text.reset_handler:0000000000001688 $t
       stm32eforth.s:3056   .text.reset_handler:00000000000016aa $d
       stm32eforth.s:3057   .text.reset_handler:00000000000016ae _INTER
       stm32eforth.s:3059   .text.reset_handler:00000000000016ba $t
       stm32eforth.s:3065   .text.reset_handler:00000000000016cc $d
       stm32eforth.s:3076   .text.reset_handler:00000000000016fe INTE1
       stm32eforth.s:3066   .text.reset_handler:00000000000016d0 $t
       stm32eforth.s:3068   .text.reset_handler:00000000000016d8 $d
       stm32eforth.s:3069   .text.reset_handler:00000000000016dc $t
       stm32eforth.s:3071   .text.reset_handler:00000000000016e4 $d
       stm32eforth.s:3073   .text.reset_handler:00000000000016f2 $t
       stm32eforth.s:3079   .text.reset_handler:0000000000001706 $d
       stm32eforth.s:3081   .text.reset_handler:0000000000001710 INTE2
       stm32eforth.s:3080   .text.reset_handler:000000000000170a $t
       stm32eforth.s:3087   .text.reset_handler:0000000000001714 $d
       stm32eforth.s:3088   .text.reset_handler:0000000000001718 _LBRAC
       stm32eforth.s:3090   .text.reset_handler:000000000000171a $t
ARM GAS  stm32eforth.s 			page 97


       stm32eforth.s:3091   .text.reset_handler:000000000000171c LBRAC
       stm32eforth.s:3094   .text.reset_handler:0000000000001724 $d
       stm32eforth.s:3095   .text.reset_handler:0000000000001728 $t
       stm32eforth.s:3102   .text.reset_handler:0000000000001736 $d
       stm32eforth.s:3103   .text.reset_handler:000000000000173a _DOTOK
       stm32eforth.s:3105   .text.reset_handler:000000000000173e $t
       stm32eforth.s:3106   .text.reset_handler:0000000000001740 DOTOK
       stm32eforth.s:3109   .text.reset_handler:0000000000001748 $d
       stm32eforth.s:3110   .text.reset_handler:000000000000174c $t
       stm32eforth.s:3114   .text.reset_handler:000000000000175c $d
       stm32eforth.s:3118   .text.reset_handler:0000000000001768 DOTO1
       stm32eforth.s:3115   .text.reset_handler:0000000000001760 $t
       stm32eforth.s:3116   .text.reset_handler:0000000000001764 $d
       stm32eforth.s:3119   .text.reset_handler:0000000000001768 $t
       stm32eforth.s:3125   .text.reset_handler:0000000000001772 $d
       stm32eforth.s:3126   .text.reset_handler:0000000000001776 _QSTAC
       stm32eforth.s:3129   .text.reset_handler:0000000000001780 QSTAC
       stm32eforth.s:3134   .text.reset_handler:0000000000001790 $d
       stm32eforth.s:3142   .text.reset_handler:00000000000017a2 $d
       stm32eforth.s:3143   .text.reset_handler:00000000000017a6 _EVAL
       stm32eforth.s:3146   .text.reset_handler:00000000000017ac EVAL
       stm32eforth.s:3148   .text.reset_handler:00000000000017b0 EVAL1
       stm32eforth.s:3153   .text.reset_handler:00000000000017c0 $d
       stm32eforth.s:3158   .text.reset_handler:00000000000017d4 EVAL2
       stm32eforth.s:3154   .text.reset_handler:00000000000017c4 $t
       stm32eforth.s:3166   .text.reset_handler:00000000000017e2 $d
       stm32eforth.s:3167   .text.reset_handler:00000000000017e6 _PRESE
       stm32eforth.s:3181   .text.reset_handler:00000000000017fe $d
       stm32eforth.s:3182   .text.reset_handler:0000000000001802 _QUIT
       stm32eforth.s:3189   .text.reset_handler:0000000000001814 QUIT1
       stm32eforth.s:3191   .text.reset_handler:0000000000001818 QUIT2
       stm32eforth.s:3195   .text.reset_handler:0000000000001824 $d
       stm32eforth.s:3201   .text.reset_handler:0000000000001828 $t
       stm32eforth.s:3212   .text.reset_handler:0000000000001846 WAIT_BSY
       stm32eforth.s:3214   .text.reset_handler:000000000000184a WAIT1
       stm32eforth.s:3220   .text.reset_handler:0000000000001854 LOCK
       stm32eforth.s:3231   .text.reset_handler:0000000000001862 $d
       stm32eforth.s:3232   .text.reset_handler:0000000000001866 _ESECT
       stm32eforth.s:3236   .text.reset_handler:0000000000001874 ESECT
       stm32eforth.s:3254   .text.reset_handler:00000000000018a2 $d
       stm32eforth.s:3255   .text.reset_handler:00000000000018a6 _ISTOR
       stm32eforth.s:3259   .text.reset_handler:00000000000018ac ISTOR
       stm32eforth.s:3275   .text.reset_handler:00000000000018d2 $d
       stm32eforth.s:3276   .text.reset_handler:00000000000018d6 _TURN
       stm32eforth.s:3278   .text.reset_handler:00000000000018de $t
       stm32eforth.s:3279   .text.reset_handler:00000000000018e0 TURN
       stm32eforth.s:3281   .text.reset_handler:00000000000018e8 $d
       stm32eforth.s:3282   .text.reset_handler:00000000000018ec $t
       stm32eforth.s:3283   .text.reset_handler:00000000000018f0 $d
       stm32eforth.s:3284   .text.reset_handler:00000000000018f4 $t
       stm32eforth.s:3285   .text.reset_handler:00000000000018f8 $d
       stm32eforth.s:3286   .text.reset_handler:00000000000018fc $t
       stm32eforth.s:3288   .text.reset_handler:0000000000001904 $d
       stm32eforth.s:3289   .text.reset_handler:0000000000001908 $t
       stm32eforth.s:3290   .text.reset_handler:000000000000190c $d
       stm32eforth.s:3291   .text.reset_handler:0000000000001910 $t
       stm32eforth.s:3295   .text.reset_handler:0000000000001920 TURN1
ARM GAS  stm32eforth.s 			page 98


       stm32eforth.s:3305   .text.reset_handler:0000000000001944 $d
       stm32eforth.s:3306   .text.reset_handler:0000000000001948 $t
       stm32eforth.s:3315   .text.reset_handler:0000000000001952 $d
       stm32eforth.s:3316   .text.reset_handler:0000000000001956 _TICK
       stm32eforth.s:3318   .text.reset_handler:0000000000001958 $t
       stm32eforth.s:3319   .text.reset_handler:0000000000001958 TICK
       stm32eforth.s:3324   .text.reset_handler:0000000000001968 $d
       stm32eforth.s:3326   .text.reset_handler:0000000000001972 TICK1
       stm32eforth.s:3325   .text.reset_handler:000000000000196c $t
       stm32eforth.s:3331   .text.reset_handler:0000000000001976 $d
       stm32eforth.s:3332   .text.reset_handler:000000000000197a _ALLOT
       stm32eforth.s:3334   .text.reset_handler:0000000000001980 $t
       stm32eforth.s:3335   .text.reset_handler:0000000000001980 ALLOT
       stm32eforth.s:3344   .text.reset_handler:0000000000001992 $d
       stm32eforth.s:3345   .text.reset_handler:0000000000001996 _COMMA
       stm32eforth.s:3346   .text.reset_handler:0000000000001998 $t
       stm32eforth.s:3347   .text.reset_handler:0000000000001998 COMMA
       stm32eforth.s:3360   .text.reset_handler:00000000000019bc $d
       stm32eforth.s:3361   .text.reset_handler:00000000000019c0 _BCOMP
       stm32eforth.s:3363   .text.reset_handler:00000000000019ca $t
       stm32eforth.s:3364   .text.reset_handler:00000000000019cc BCOMP
       stm32eforth.s:3373   .text.reset_handler:00000000000019de $d
       stm32eforth.s:3374   .text.reset_handler:00000000000019e2 _COMPI
       stm32eforth.s:3376   .text.reset_handler:00000000000019ea $t
       stm32eforth.s:3377   .text.reset_handler:00000000000019ec COMPI
       stm32eforth.s:3792   .text.reset_handler:0000000000001df2 CALLC
       stm32eforth.s:3392   .text.reset_handler:0000000000001a16 $d
       stm32eforth.s:3393   .text.reset_handler:0000000000001a1a _LITER
       stm32eforth.s:3395   .text.reset_handler:0000000000001a22 $t
       stm32eforth.s:3396   .text.reset_handler:0000000000001a24 LITER
       stm32eforth.s:3399   .text.reset_handler:0000000000001a2c $d
       stm32eforth.s:3400   .text.reset_handler:0000000000001a30 $t
       stm32eforth.s:3410   .text.reset_handler:0000000000001a3a STRCQ
       stm32eforth.s:3413   .text.reset_handler:0000000000001a42 $d
       stm32eforth.s:3414   .text.reset_handler:0000000000001a46 $t
       stm32eforth.s:3417   .text.reset_handler:0000000000001a52 $d
       stm32eforth.s:3418   .text.reset_handler:0000000000001a56 $t
       stm32eforth.s:3432   .text.reset_handler:0000000000001a74 $d
       stm32eforth.s:3433   .text.reset_handler:0000000000001a78 _FOR
       stm32eforth.s:3435   .text.reset_handler:0000000000001a7c $t
       stm32eforth.s:3436   .text.reset_handler:0000000000001a7c FOR
       stm32eforth.s:3439   .text.reset_handler:0000000000001a84 $d
       stm32eforth.s:3440   .text.reset_handler:0000000000001a88 $t
       stm32eforth.s:3446   .text.reset_handler:0000000000001a92 $d
       stm32eforth.s:3447   .text.reset_handler:0000000000001a96 _BEGIN
       stm32eforth.s:3449   .text.reset_handler:0000000000001a9c $t
       stm32eforth.s:3450   .text.reset_handler:0000000000001a9c BEGIN
       stm32eforth.s:3458   .text.reset_handler:0000000000001aac $d
       stm32eforth.s:3459   .text.reset_handler:0000000000001ab0 _NEXT
       stm32eforth.s:3462   .text.reset_handler:0000000000001ab8 NEXT
       stm32eforth.s:3465   .text.reset_handler:0000000000001ac0 $d
       stm32eforth.s:3466   .text.reset_handler:0000000000001ac4 $t
       stm32eforth.s:3472   .text.reset_handler:0000000000001ace $d
       stm32eforth.s:3473   .text.reset_handler:0000000000001ad2 _UNTIL
       stm32eforth.s:3475   .text.reset_handler:0000000000001ad8 $t
       stm32eforth.s:3476   .text.reset_handler:0000000000001ad8 UNTIL
       stm32eforth.s:3479   .text.reset_handler:0000000000001ae0 $d
ARM GAS  stm32eforth.s 			page 99


       stm32eforth.s:3480   .text.reset_handler:0000000000001ae4 $t
       stm32eforth.s:3486   .text.reset_handler:0000000000001aee $d
       stm32eforth.s:3487   .text.reset_handler:0000000000001af2 _AGAIN
       stm32eforth.s:3489   .text.reset_handler:0000000000001af8 $t
       stm32eforth.s:3490   .text.reset_handler:0000000000001af8 AGAIN
       stm32eforth.s:3493   .text.reset_handler:0000000000001b00 $d
       stm32eforth.s:3494   .text.reset_handler:0000000000001b04 $t
       stm32eforth.s:3500   .text.reset_handler:0000000000001b0e $d
       stm32eforth.s:3501   .text.reset_handler:0000000000001b12 _IFF
       stm32eforth.s:3504   .text.reset_handler:0000000000001b18 IFF
       stm32eforth.s:3507   .text.reset_handler:0000000000001b20 $d
       stm32eforth.s:3508   .text.reset_handler:0000000000001b24 $t
       stm32eforth.s:3510   .text.reset_handler:0000000000001b2c $d
       stm32eforth.s:3511   .text.reset_handler:0000000000001b30 $t
       stm32eforth.s:3518   .text.reset_handler:0000000000001b3e $d
       stm32eforth.s:3519   .text.reset_handler:0000000000001b42 _AHEAD
       stm32eforth.s:3521   .text.reset_handler:0000000000001b48 $t
       stm32eforth.s:3522   .text.reset_handler:0000000000001b48 AHEAD
       stm32eforth.s:3525   .text.reset_handler:0000000000001b50 $d
       stm32eforth.s:3526   .text.reset_handler:0000000000001b54 $t
       stm32eforth.s:3528   .text.reset_handler:0000000000001b5c $d
       stm32eforth.s:3529   .text.reset_handler:0000000000001b60 $t
       stm32eforth.s:3536   .text.reset_handler:0000000000001b6e $d
       stm32eforth.s:3537   .text.reset_handler:0000000000001b72 _REPEA
       stm32eforth.s:3540   .text.reset_handler:0000000000001b7c REPEA
       stm32eforth.s:3551   .text.reset_handler:0000000000001b96 $d
       stm32eforth.s:3552   .text.reset_handler:0000000000001b9a _THENN
       stm32eforth.s:3555   .text.reset_handler:0000000000001ba0 THENN
       stm32eforth.s:3565   .text.reset_handler:0000000000001bb6 $d
       stm32eforth.s:3566   .text.reset_handler:0000000000001bba _AFT
       stm32eforth.s:3568   .text.reset_handler:0000000000001bbe $t
       stm32eforth.s:3569   .text.reset_handler:0000000000001bc0 AFT
       stm32eforth.s:3580   .text.reset_handler:0000000000001bda $d
       stm32eforth.s:3581   .text.reset_handler:0000000000001bde _ELSEE
       stm32eforth.s:3584   .text.reset_handler:0000000000001be4 ELSEE
       stm32eforth.s:3594   .text.reset_handler:0000000000001bfa $d
       stm32eforth.s:3595   .text.reset_handler:0000000000001bfe _WHILE
       stm32eforth.s:3597   .text.reset_handler:0000000000001c04 $t
       stm32eforth.s:3598   .text.reset_handler:0000000000001c04 WHILE
       stm32eforth.s:3607   .text.reset_handler:0000000000001c16 $d
       stm32eforth.s:3608   .text.reset_handler:0000000000001c1a _ABRTQ
       stm32eforth.s:3611   .text.reset_handler:0000000000001c24 ABRTQ
       stm32eforth.s:3614   .text.reset_handler:0000000000001c2c $d
       stm32eforth.s:3615   .text.reset_handler:0000000000001c30 $t
       stm32eforth.s:3621   .text.reset_handler:0000000000001c3a $d
       stm32eforth.s:3622   .text.reset_handler:0000000000001c3e _STRQ
       stm32eforth.s:3625   .text.reset_handler:0000000000001c44 STRQ
       stm32eforth.s:3628   .text.reset_handler:0000000000001c4c $d
       stm32eforth.s:3629   .text.reset_handler:0000000000001c50 $t
       stm32eforth.s:3635   .text.reset_handler:0000000000001c5a $d
       stm32eforth.s:3636   .text.reset_handler:0000000000001c5e _DOTQ
       stm32eforth.s:3639   .text.reset_handler:0000000000001c64 DOTQ
       stm32eforth.s:3642   .text.reset_handler:0000000000001c6c $d
       stm32eforth.s:3643   .text.reset_handler:0000000000001c70 $t
       stm32eforth.s:3652   .text.reset_handler:0000000000001c7a $d
       stm32eforth.s:3653   .text.reset_handler:0000000000001c7e _UNIQU
       stm32eforth.s:3655   .text.reset_handler:0000000000001c86 $t
ARM GAS  stm32eforth.s 			page 100


       stm32eforth.s:3656   .text.reset_handler:0000000000001c88 UNIQU
       stm32eforth.s:3661   .text.reset_handler:0000000000001c98 $d
       stm32eforth.s:3669   .text.reset_handler:0000000000001cb4 UNIQ1
       stm32eforth.s:3662   .text.reset_handler:0000000000001c9c $t
       stm32eforth.s:3663   .text.reset_handler:0000000000001ca0 $d
       stm32eforth.s:3665   .text.reset_handler:0000000000001ca8 $t
       stm32eforth.s:3680   .text.reset_handler:0000000000001cbe SNAME
       stm32eforth.s:3685   .text.reset_handler:0000000000001cce $d
       stm32eforth.s:3699   .text.reset_handler:0000000000001d08 SNAM1
       stm32eforth.s:3686   .text.reset_handler:0000000000001cd2 $t
       stm32eforth.s:3701   .text.reset_handler:0000000000001d0c $d
       stm32eforth.s:3703   .text.reset_handler:0000000000001d14 $t
       stm32eforth.s:3708   .text.reset_handler:0000000000001d18 $d
       stm32eforth.s:3709   .text.reset_handler:0000000000001d1c _SCOMP
       stm32eforth.s:3711   .text.reset_handler:0000000000001d26 $t
       stm32eforth.s:3712   .text.reset_handler:0000000000001d28 SCOMP
       stm32eforth.s:3717   .text.reset_handler:0000000000001d38 $d
       stm32eforth.s:3729   .text.reset_handler:0000000000001d68 SCOM2
       stm32eforth.s:3718   .text.reset_handler:0000000000001d3c $t
       stm32eforth.s:3720   .text.reset_handler:0000000000001d44 $d
       stm32eforth.s:3721   .text.reset_handler:0000000000001d48 $t
       stm32eforth.s:3723   .text.reset_handler:0000000000001d50 $d
       stm32eforth.s:3726   .text.reset_handler:0000000000001d5e SCOM1
       stm32eforth.s:3724   .text.reset_handler:0000000000001d54 $t
       stm32eforth.s:3732   .text.reset_handler:0000000000001d70 $d
       stm32eforth.s:3735   .text.reset_handler:0000000000001d7e SCOM3
       stm32eforth.s:3733   .text.reset_handler:0000000000001d74 $t
       stm32eforth.s:3741   .text.reset_handler:0000000000001d82 $d
       stm32eforth.s:3742   .text.reset_handler:0000000000001d86 _OVERT
       stm32eforth.s:3744   .text.reset_handler:0000000000001d8c $t
       stm32eforth.s:3745   .text.reset_handler:0000000000001d8c OVERT
       stm32eforth.s:3756   .text.reset_handler:0000000000001da6 $d
       stm32eforth.s:3757   .text.reset_handler:0000000000001daa _SEMIS
       stm32eforth.s:3759   .text.reset_handler:0000000000001dae $t
       stm32eforth.s:3760   .text.reset_handler:0000000000001db0 SEMIS
       stm32eforth.s:3772   .text.reset_handler:0000000000001dd0 $d
       stm32eforth.s:3773   .text.reset_handler:0000000000001dd4 _RBRAC
       stm32eforth.s:3775   .text.reset_handler:0000000000001dd6 $t
       stm32eforth.s:3776   .text.reset_handler:0000000000001dd8 RBRAC
       stm32eforth.s:3779   .text.reset_handler:0000000000001de0 $d
       stm32eforth.s:3780   .text.reset_handler:0000000000001de4 $t
       stm32eforth.s:3813   .text.reset_handler:0000000000001e2e $d
       stm32eforth.s:3814   .text.reset_handler:0000000000001e32 _COLON
       stm32eforth.s:3816   .text.reset_handler:0000000000001e34 $t
       stm32eforth.s:3817   .text.reset_handler:0000000000001e34 COLON
       stm32eforth.s:3830   .text.reset_handler:0000000000001e56 $d
       stm32eforth.s:3831   .text.reset_handler:0000000000001e5a _IMMED
       stm32eforth.s:3833   .text.reset_handler:0000000000001e64 $t
       stm32eforth.s:3834   .text.reset_handler:0000000000001e64 IMMED
       stm32eforth.s:3837   .text.reset_handler:0000000000001e6c $d
       stm32eforth.s:3838   .text.reset_handler:0000000000001e70 $t
       stm32eforth.s:3853   .text.reset_handler:0000000000001e92 $d
       stm32eforth.s:3854   .text.reset_handler:0000000000001e96 _CONST
       stm32eforth.s:3857   .text.reset_handler:0000000000001ea0 CONST
       stm32eforth.s:3866   .text.reset_handler:0000000000001ec0 $d
       stm32eforth.s:3867   .text.reset_handler:0000000000001ec4 $t
       stm32eforth.s:3874   .text.reset_handler:0000000000001ed2 $d
ARM GAS  stm32eforth.s 			page 101


       stm32eforth.s:3875   .text.reset_handler:0000000000001ed6 _CREAT
       stm32eforth.s:3878   .text.reset_handler:0000000000001ee0 CREAT
       stm32eforth.s:3887   .text.reset_handler:0000000000001f00 $d
       stm32eforth.s:3888   .text.reset_handler:0000000000001f04 $t
       stm32eforth.s:3894   .text.reset_handler:0000000000001f0e $d
       stm32eforth.s:3895   .text.reset_handler:0000000000001f12 _VARIA
       stm32eforth.s:3898   .text.reset_handler:0000000000001f1c VARIA
       stm32eforth.s:3902   .text.reset_handler:0000000000001f28 $d
       stm32eforth.s:3903   .text.reset_handler:0000000000001f2c $t
       stm32eforth.s:3916   .text.reset_handler:0000000000001f36 DMP
       stm32eforth.s:3920   .text.reset_handler:0000000000001f42 $d
       stm32eforth.s:3921   .text.reset_handler:0000000000001f46 $t
       stm32eforth.s:3932   .text.reset_handler:0000000000001f6e PDUM2
       stm32eforth.s:3925   .text.reset_handler:0000000000001f56 PDUM1
       stm32eforth.s:3929   .text.reset_handler:0000000000001f62 $d
       stm32eforth.s:3930   .text.reset_handler:0000000000001f66 $t
       stm32eforth.s:3934   .text.reset_handler:0000000000001f72 $d
       stm32eforth.s:3935   .text.reset_handler:0000000000001f76 $t
       stm32eforth.s:3940   .text.reset_handler:0000000000001f7c $d
       stm32eforth.s:3941   .text.reset_handler:0000000000001f80 _DUMP
       stm32eforth.s:3944   .text.reset_handler:0000000000001f88 DUMP
       stm32eforth.s:3951   .text.reset_handler:0000000000001fa0 $d
       stm32eforth.s:3952   .text.reset_handler:0000000000001fa4 $t
       stm32eforth.s:3966   .text.reset_handler:0000000000001fd8 DUMP4
       stm32eforth.s:3955   .text.reset_handler:0000000000001fb0 DUMP1
       stm32eforth.s:3958   .text.reset_handler:0000000000001fb8 $d
       stm32eforth.s:3959   .text.reset_handler:0000000000001fbc $t
       stm32eforth.s:3968   .text.reset_handler:0000000000001fdc $d
       stm32eforth.s:3969   .text.reset_handler:0000000000001fe0 DUMP3
       stm32eforth.s:3970   .text.reset_handler:0000000000001fe0 $t
       stm32eforth.s:3979   .text.reset_handler:0000000000001ff6 $d
       stm32eforth.s:3980   .text.reset_handler:0000000000001ffa _DOTS
       stm32eforth.s:3984   .text.reset_handler:0000000000002000 DOTS
       stm32eforth.s:3994   .text.reset_handler:0000000000002020 DOTS2
       stm32eforth.s:3990   .text.reset_handler:0000000000002014 DOTS1
       stm32eforth.s:3996   .text.reset_handler:0000000000002024 $d
       stm32eforth.s:3997   .text.reset_handler:0000000000002028 $t
       stm32eforth.s:4003   .text.reset_handler:0000000000002032 $d
       stm32eforth.s:4004   .text.reset_handler:0000000000002036 _TNAME
       stm32eforth.s:4006   .text.reset_handler:000000000000203c $t
       stm32eforth.s:4007   .text.reset_handler:000000000000203c TNAME
       stm32eforth.s:4012   .text.reset_handler:000000000000204c TNAM1
       stm32eforth.s:4015   .text.reset_handler:0000000000002054 $d
       stm32eforth.s:4025   .text.reset_handler:000000000000207c TNAM2
       stm32eforth.s:4016   .text.reset_handler:0000000000002058 $t
       stm32eforth.s:4021   .text.reset_handler:000000000000206c $d
       stm32eforth.s:4022   .text.reset_handler:0000000000002070 $t
       stm32eforth.s:4033   .text.reset_handler:000000000000208a $d
       stm32eforth.s:4034   .text.reset_handler:000000000000208e _DOTID
       stm32eforth.s:4036   .text.reset_handler:0000000000002092 $t
       stm32eforth.s:4037   .text.reset_handler:0000000000002094 DOTID
       stm32eforth.s:4041   .text.reset_handler:00000000000020a0 $d
       stm32eforth.s:4048   .text.reset_handler:00000000000020be DOTI1
       stm32eforth.s:4042   .text.reset_handler:00000000000020a4 $t
       stm32eforth.s:4044   .text.reset_handler:00000000000020ac $d
       stm32eforth.s:4045   .text.reset_handler:00000000000020b0 $t
       stm32eforth.s:4050   .text.reset_handler:00000000000020c2 $d
ARM GAS  stm32eforth.s 			page 102


       stm32eforth.s:4052   .text.reset_handler:00000000000020cc $t
       stm32eforth.s:4058   .text.reset_handler:00000000000020d2 $d
       stm32eforth.s:4059   .text.reset_handler:00000000000020d6 _SEE
       stm32eforth.s:4061   .text.reset_handler:00000000000020da $t
       stm32eforth.s:4062   .text.reset_handler:00000000000020dc SEE
       stm32eforth.s:4067   .text.reset_handler:00000000000020ec $d
       stm32eforth.s:4068   .text.reset_handler:00000000000020f0 $t
       stm32eforth.s:4069   .text.reset_handler:00000000000020f4 SEE1
       stm32eforth.s:4086   .text.reset_handler:0000000000002120 DECOMP
       stm32eforth.s:4074   .text.reset_handler:0000000000002104 $d
       stm32eforth.s:4075   .text.reset_handler:0000000000002108 $t
       stm32eforth.s:4081   .text.reset_handler:0000000000002112 $d
       stm32eforth.s:4082   .text.reset_handler:0000000000002116 _DECOM
       stm32eforth.s:4084   .text.reset_handler:0000000000002120 $t
       stm32eforth.s:4093   .text.reset_handler:0000000000002134 $d
       stm32eforth.s:4094   .text.reset_handler:0000000000002138 $t
       stm32eforth.s:4096   .text.reset_handler:0000000000002140 $d
       stm32eforth.s:4097   .text.reset_handler:0000000000002144 $t
       stm32eforth.s:4099   .text.reset_handler:000000000000214c $d
       stm32eforth.s:4125   .text.reset_handler:00000000000021a8 DECOM2
       stm32eforth.s:4101   .text.reset_handler:0000000000002150 $t
       stm32eforth.s:4115   .text.reset_handler:0000000000002184 $d
       stm32eforth.s:4121   .text.reset_handler:000000000000219a DECOM1
       stm32eforth.s:4116   .text.reset_handler:0000000000002188 $t
       stm32eforth.s:4134   .text.reset_handler:00000000000021b6 $d
       stm32eforth.s:4135   .text.reset_handler:00000000000021ba _WORDS
       stm32eforth.s:4137   .text.reset_handler:00000000000021c0 $t
       stm32eforth.s:4138   .text.reset_handler:00000000000021c0 WORDS
       stm32eforth.s:4143   .text.reset_handler:00000000000021d0 WORS1
       stm32eforth.s:4146   .text.reset_handler:00000000000021d8 $d
       stm32eforth.s:4153   .text.reset_handler:00000000000021f4 WORS2
       stm32eforth.s:4147   .text.reset_handler:00000000000021dc $t
       stm32eforth.s:4166   .text.reset_handler:00000000000021fa VERSN
       stm32eforth.s:4169   .text.reset_handler:0000000000002202 $d
       stm32eforth.s:4170   .text.reset_handler:0000000000002206 $t
       stm32eforth.s:4175   .text.reset_handler:000000000000220c $d
       stm32eforth.s:4176   .text.reset_handler:0000000000002210 _HI
       stm32eforth.s:4183   .text.reset_handler:0000000000002220 $d
       stm32eforth.s:4185   .text.reset_handler:0000000000002238 $t
       stm32eforth.s:4194   .text.reset_handler:0000000000002258 $d
       stm32eforth.s:4195   .text.reset_handler:000000000000225c $t
       stm32eforth.s:4207   .text.reset_handler:000000000000227e $d
       stm32eforth.s:4213   .text.reset_handler:0000000000002288 $t
       stm32eforth.s:4220   .text.reset_handler:00000000000022a2 COLD1
       stm32eforth.s:4222   .text.reset_handler:00000000000022a6 $d
       stm32eforth.s:4223   .text.reset_handler:00000000000022aa $t
       stm32eforth.s:4225   .text.reset_handler:00000000000022b2 $d
       stm32eforth.s:4226   .text.reset_handler:00000000000022b6 $t
       stm32eforth.s:4227   .text.reset_handler:00000000000022ba $d
       stm32eforth.s:4228   .text.reset_handler:00000000000022be $t
       stm32eforth.s:4229   .text.reset_handler:00000000000022c2 $d
       stm32eforth.s:4230   .text.reset_handler:00000000000022c6 $t
       stm32eforth.s:4236   .text.reset_handler:00000000000022de COLD2
       stm32eforth.s:4238   .text.reset_handler:00000000000022de $d
       stm32eforth.s:4240   .text.reset_handler:00000000000022e4 $d
       stm32eforth.s:251    .text.default_handler:0000000000000025 $d
       stm32eforth.s:251    .text.default_handler:0000000000000026 $t
ARM GAS  stm32eforth.s 			page 103


       stm32eforth.s:482    .text.reset_handler:000000000000014f $d
       stm32eforth.s:482    .text.reset_handler:0000000000000150 $t
       stm32eforth.s:517    .text.reset_handler:00000000000001a3 $d
       stm32eforth.s:517    .text.reset_handler:00000000000001a4 $t
       stm32eforth.s:537    .text.reset_handler:00000000000001c9 $d
       stm32eforth.s:537    .text.reset_handler:00000000000001ca $t
       stm32eforth.s:562    .text.reset_handler:00000000000001fd $d
       stm32eforth.s:562    .text.reset_handler:00000000000001fe $t
       stm32eforth.s:678    .text.reset_handler:0000000000000293 $d
       stm32eforth.s:678    .text.reset_handler:0000000000000294 $t
       stm32eforth.s:712    .text.reset_handler:00000000000002bf $d
       stm32eforth.s:712    .text.reset_handler:00000000000002c0 $t
       stm32eforth.s:725    .text.reset_handler:00000000000002d3 $d
       stm32eforth.s:725    .text.reset_handler:00000000000002d4 $t
       stm32eforth.s:736    .text.reset_handler:00000000000002df $d
       stm32eforth.s:736    .text.reset_handler:00000000000002e0 $t
       stm32eforth.s:748    .text.reset_handler:00000000000002f1 $d
       stm32eforth.s:748    .text.reset_handler:00000000000002f2 $t
       stm32eforth.s:760    .text.reset_handler:0000000000000303 $d
       stm32eforth.s:760    .text.reset_handler:0000000000000304 $t
       stm32eforth.s:784    .text.reset_handler:0000000000000329 $d
       stm32eforth.s:784    .text.reset_handler:000000000000032a $t
       stm32eforth.s:806    .text.reset_handler:000000000000034b $d
       stm32eforth.s:806    .text.reset_handler:000000000000034c $t
       stm32eforth.s:819    .text.reset_handler:000000000000035d $d
       stm32eforth.s:819    .text.reset_handler:000000000000035e $t
       stm32eforth.s:831    .text.reset_handler:000000000000036f $d
       stm32eforth.s:831    .text.reset_handler:0000000000000370 $t
       stm32eforth.s:855    .text.reset_handler:0000000000000395 $d
       stm32eforth.s:855    .text.reset_handler:0000000000000396 $t
       stm32eforth.s:894    .text.reset_handler:00000000000003db $d
       stm32eforth.s:894    .text.reset_handler:00000000000003dc $t
       stm32eforth.s:906    .text.reset_handler:00000000000003f1 $d
       stm32eforth.s:906    .text.reset_handler:00000000000003f2 $t
       stm32eforth.s:968    .text.reset_handler:000000000000044b $d
       stm32eforth.s:968    .text.reset_handler:000000000000044c $t
       stm32eforth.s:982    .text.reset_handler:000000000000045f $d
       stm32eforth.s:982    .text.reset_handler:0000000000000460 $t
       stm32eforth.s:993    .text.reset_handler:000000000000046d $d
       stm32eforth.s:993    .text.reset_handler:000000000000046e $t
       stm32eforth.s:1004   .text.reset_handler:000000000000047d $d
       stm32eforth.s:1004   .text.reset_handler:000000000000047e $t
       stm32eforth.s:1015   .text.reset_handler:000000000000048d $d
       stm32eforth.s:1015   .text.reset_handler:000000000000048e $t
       stm32eforth.s:1048   .text.reset_handler:00000000000004bd $d
       stm32eforth.s:1048   .text.reset_handler:00000000000004be $t
       stm32eforth.s:1082   .text.reset_handler:00000000000004f1 $d
       stm32eforth.s:1082   .text.reset_handler:00000000000004f2 $t
       stm32eforth.s:1093   .text.reset_handler:0000000000000501 $d
       stm32eforth.s:1093   .text.reset_handler:0000000000000502 $t
       stm32eforth.s:1104   .text.reset_handler:0000000000000513 $d
       stm32eforth.s:1104   .text.reset_handler:0000000000000514 $t
       stm32eforth.s:1143   .text.reset_handler:000000000000054f $d
       stm32eforth.s:1143   .text.reset_handler:0000000000000550 $t
       stm32eforth.s:1156   .text.reset_handler:0000000000000563 $d
       stm32eforth.s:1156   .text.reset_handler:0000000000000564 $t
       stm32eforth.s:1183   .text.reset_handler:0000000000000591 $d
ARM GAS  stm32eforth.s 			page 104


       stm32eforth.s:1183   .text.reset_handler:0000000000000592 $t
       stm32eforth.s:1222   .text.reset_handler:00000000000005cb $d
       stm32eforth.s:1222   .text.reset_handler:00000000000005cc $t
       stm32eforth.s:1295   .text.reset_handler:000000000000063b $d
       stm32eforth.s:1295   .text.reset_handler:000000000000063c $t
       stm32eforth.s:1310   .text.reset_handler:0000000000000653 $d
       stm32eforth.s:1310   .text.reset_handler:0000000000000654 $t
       stm32eforth.s:1325   .text.reset_handler:000000000000066f $d
       stm32eforth.s:1325   .text.reset_handler:0000000000000670 $t
       stm32eforth.s:1396   .text.reset_handler:00000000000006d1 $d
       stm32eforth.s:1396   .text.reset_handler:00000000000006d2 $t
       stm32eforth.s:1430   .text.reset_handler:000000000000070f $d
       stm32eforth.s:1430   .text.reset_handler:0000000000000710 $t
       stm32eforth.s:1454   .text.reset_handler:000000000000072d $d
       stm32eforth.s:1454   .text.reset_handler:000000000000072e $t
       stm32eforth.s:1478   .text.reset_handler:0000000000000757 $d
       stm32eforth.s:1478   .text.reset_handler:0000000000000758 $t
       stm32eforth.s:1527   .text.reset_handler:00000000000007a9 $d
       stm32eforth.s:1527   .text.reset_handler:00000000000007aa $t
       stm32eforth.s:1538   .text.reset_handler:00000000000007bf $d
       stm32eforth.s:1538   .text.reset_handler:00000000000007c0 $t
       stm32eforth.s:1550   .text.reset_handler:00000000000007d3 $d
       stm32eforth.s:1550   .text.reset_handler:00000000000007d4 $t
       stm32eforth.s:1565   .text.reset_handler:00000000000007e9 $d
       stm32eforth.s:1565   .text.reset_handler:00000000000007ea $t
       stm32eforth.s:1584   .text.reset_handler:0000000000000819 $d
       stm32eforth.s:1584   .text.reset_handler:000000000000081a $t
       stm32eforth.s:1654   .text.reset_handler:00000000000008cb $d
       stm32eforth.s:1654   .text.reset_handler:00000000000008cc $t
       stm32eforth.s:1711   .text.reset_handler:0000000000000949 $d
       stm32eforth.s:1711   .text.reset_handler:000000000000094a $t
       stm32eforth.s:1783   .text.reset_handler:00000000000009f7 $d
       stm32eforth.s:1783   .text.reset_handler:00000000000009f8 $t
       stm32eforth.s:1802   .text.reset_handler:0000000000000a1f $d
       stm32eforth.s:1802   .text.reset_handler:0000000000000a20 $t
       stm32eforth.s:1840   .text.reset_handler:0000000000000a6d $d
       stm32eforth.s:1840   .text.reset_handler:0000000000000a6e $t
       stm32eforth.s:1879   .text.reset_handler:0000000000000ab7 $d
       stm32eforth.s:1879   .text.reset_handler:0000000000000ab8 $t
       stm32eforth.s:1903   .text.reset_handler:0000000000000ae7 $d
       stm32eforth.s:1903   .text.reset_handler:0000000000000ae8 $t
       stm32eforth.s:1926   .text.reset_handler:0000000000000b13 $d
       stm32eforth.s:1926   .text.reset_handler:0000000000000b14 $t
       stm32eforth.s:1995   .text.reset_handler:0000000000000bd5 $d
       stm32eforth.s:1995   .text.reset_handler:0000000000000bd6 $t
       stm32eforth.s:2009   .text.reset_handler:0000000000000bf7 $d
       stm32eforth.s:2009   .text.reset_handler:0000000000000bf8 $t
       stm32eforth.s:2042   .text.reset_handler:0000000000000c45 $d
       stm32eforth.s:2042   .text.reset_handler:0000000000000c46 $t
       stm32eforth.s:2060   .text.reset_handler:0000000000000c6d $d
       stm32eforth.s:2060   .text.reset_handler:0000000000000c6e $t
       stm32eforth.s:2078   .text.reset_handler:0000000000000c99 $d
       stm32eforth.s:2078   .text.reset_handler:0000000000000c9a $t
       stm32eforth.s:2147   .text.reset_handler:0000000000000d3d $d
       stm32eforth.s:2147   .text.reset_handler:0000000000000d3e $t
       stm32eforth.s:2309   .text.reset_handler:0000000000000f3d $d
       stm32eforth.s:2309   .text.reset_handler:0000000000000f3e $t
ARM GAS  stm32eforth.s 			page 105


       stm32eforth.s:2330   .text.reset_handler:0000000000000f73 $d
       stm32eforth.s:2330   .text.reset_handler:0000000000000f74 $t
       stm32eforth.s:2351   .text.reset_handler:0000000000000fa3 $d
       stm32eforth.s:2351   .text.reset_handler:0000000000000fa4 $t
       stm32eforth.s:2430   .text.reset_handler:0000000000001035 $d
       stm32eforth.s:2430   .text.reset_handler:0000000000001036 $t
       stm32eforth.s:2468   .text.reset_handler:000000000000109d $d
       stm32eforth.s:2468   .text.reset_handler:000000000000109e $t
       stm32eforth.s:2638   .text.reset_handler:0000000000001291 $d
       stm32eforth.s:2638   .text.reset_handler:0000000000001292 $t
       stm32eforth.s:2683   .text.reset_handler:00000000000012f7 $d
       stm32eforth.s:2683   .text.reset_handler:00000000000012f8 $t
       stm32eforth.s:2698   .text.reset_handler:000000000000131b $d
       stm32eforth.s:2698   .text.reset_handler:000000000000131c $t
       stm32eforth.s:2953   .text.reset_handler:00000000000015ab $d
       stm32eforth.s:2953   .text.reset_handler:00000000000015ac $t
       stm32eforth.s:3128   .text.reset_handler:000000000000177d $d
       stm32eforth.s:3128   .text.reset_handler:000000000000177e $t
       stm32eforth.s:3136   .text.reset_handler:000000000000179b $d
       stm32eforth.s:3136   .text.reset_handler:000000000000179c $t
       stm32eforth.s:3145   .text.reset_handler:00000000000017ab $d
       stm32eforth.s:3145   .text.reset_handler:00000000000017ac $t
       stm32eforth.s:3169   .text.reset_handler:00000000000017ed $d
       stm32eforth.s:3169   .text.reset_handler:00000000000017ee $t
       stm32eforth.s:3184   .text.reset_handler:0000000000001807 $d
       stm32eforth.s:3184   .text.reset_handler:0000000000001808 $t
       stm32eforth.s:3234   .text.reset_handler:0000000000001873 $d
       stm32eforth.s:3234   .text.reset_handler:0000000000001874 $t
       stm32eforth.s:3257   .text.reset_handler:00000000000018a9 $d
       stm32eforth.s:3257   .text.reset_handler:00000000000018aa $t
       stm32eforth.s:3461   .text.reset_handler:0000000000001ab5 $d
       stm32eforth.s:3461   .text.reset_handler:0000000000001ab6 $t
       stm32eforth.s:3503   .text.reset_handler:0000000000001b15 $d
       stm32eforth.s:3503   .text.reset_handler:0000000000001b16 $t
       stm32eforth.s:3539   .text.reset_handler:0000000000001b79 $d
       stm32eforth.s:3539   .text.reset_handler:0000000000001b7a $t
       stm32eforth.s:3554   .text.reset_handler:0000000000001b9f $d
       stm32eforth.s:3554   .text.reset_handler:0000000000001ba0 $t
       stm32eforth.s:3583   .text.reset_handler:0000000000001be3 $d
       stm32eforth.s:3583   .text.reset_handler:0000000000001be4 $t
       stm32eforth.s:3610   .text.reset_handler:0000000000001c21 $d
       stm32eforth.s:3610   .text.reset_handler:0000000000001c22 $t
       stm32eforth.s:3624   .text.reset_handler:0000000000001c41 $d
       stm32eforth.s:3624   .text.reset_handler:0000000000001c42 $t
       stm32eforth.s:3638   .text.reset_handler:0000000000001c61 $d
       stm32eforth.s:3638   .text.reset_handler:0000000000001c62 $t
       stm32eforth.s:3856   .text.reset_handler:0000000000001e9f $d
       stm32eforth.s:3856   .text.reset_handler:0000000000001ea0 $t
       stm32eforth.s:3877   .text.reset_handler:0000000000001edd $d
       stm32eforth.s:3877   .text.reset_handler:0000000000001ede $t
       stm32eforth.s:3897   .text.reset_handler:0000000000001f1b $d
       stm32eforth.s:3897   .text.reset_handler:0000000000001f1c $t
       stm32eforth.s:3943   .text.reset_handler:0000000000001f85 $d
       stm32eforth.s:3943   .text.reset_handler:0000000000001f86 $t
       stm32eforth.s:3983   .text.reset_handler:0000000000001ffd $d
       stm32eforth.s:3983   .text.reset_handler:0000000000001ffe $t
       stm32eforth.s:4178   .text.reset_handler:0000000000002213 $d
ARM GAS  stm32eforth.s 			page 106


       stm32eforth.s:4178   .text.reset_handler:0000000000002214 $t

UNDEFINED SYMBOLS
_mstack
