ARM GAS  stm32eforth.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  stm32eforth.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.p2align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.p2aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m3
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
ARM GAS  stm32eforth.s 			page 3


  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
ARM GAS  stm32eforth.s 			page 4


  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
  81              	
  82              	/* blue pill specific constants */ 
  83              	  .equ LED_GPIO, GPIOC_BASE_ADR
  84              	  .equ LED_PIN, 13
  85              	  .equ UART, USART1_BASE_ADR 
  86              	
  87              	/* eForth specific constants */
  88              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  89              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  90              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  91              	.equ UPP ,	0x20000000	/*start of user area (UP0) */
  92              	.equ DTOP ,	0x20000100	/*start of usable RAM area (HERE) */
  93              	.equ DEND , 0x20004E00  /*usable RAM end */
  94              	 .equ RAMOFFSET ,	0x20000000	// remap
  95              	 .equ RAMEND, 0x20005000 // 20Ko
  96              	 .equ FLASHOFFSET ,	0x08000c00	// remap
  97              	//.equ RAMOFFSET  ,	0x00000000	/* absolute */
  98              	//.equ MAPOFFSET  ,	0x00000000	/* absolute */
  99              	  .equ MAPOFFSET , (RAMOFFSET-FLASHOFFSET)
 100              	
 101              	/*************************************
 102              	   system variables offset from UPP
 103              	*************************************/
 104              	  .equ SEED_OFS, 4    // prng seed 
 105              	  .equ TICKS_OFS, SEED_OFS+4  // millseconds counter
ARM GAS  stm32eforth.s 			page 5


 106              	  .equ TIMER_OFS, TICKS_OFS+4  // count down timer
 107              	  .equ TORAM_OFS, TIMER_OFS+4  // compile to RAM 
 108              	  .equ BOOT_OFS, TORAM_OFS+4  // boot program address
 109              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
 110              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
 111              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
 112              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
 113              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
 114              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
 115              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
 116              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
 117              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
 118              	  .equ FORTH_CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
 119              	  .equ USER_CTOP_OFS, FORTH_CTOP_OFS+4  // ram free dictionary address
 120              	  .equ LASTN_OFS, USER_CTOP_OFS+4     // last word in dictionary link nfa 
 121              	  .equ VARS_END_OFS, LASTN_OFS+4 // end of system variables  
 122              	
 123              	/***********************************************
 124              	* MACROS
 125              	*	Assemble inline direct threaded code ending.
 126              	***********************************************/
 127              	 	.macro	_NEXT /*end low level word */
 128              		BX	LR
 129              		.endm
 130              	
 131              	 	.macro	_NEST /*start high level word */
 132              		STMFD	R2!,{LR}
 133              		.endm
 134              	
 135              	 	.macro	_UNNEST	/*end high level word */
 136              		LDMFD	R2!,{PC}
 137              		.endm
 138              	
 139              	 	.macro	_DOLIT /*long literals */
 140              		BL	DOLIT
 141              		.endm
 142              	
 143              	 	.macro	_PUSH	/*push R5 on data stack*/
 144              		STR	R5,[R1,#-4]!
 145              		.endm
 146              	
 147              	 	.macro	_POP /*pop data stack to R5 */
 148              		LDR	R5,[R1],#4
 149              		.endm
 150              	
 151              	/*************************************
 152              	*   interrupt service vectors table 
 153              	**************************************/
 154              	   .section  .isr_vector,"a",%progbits
 155              	  .type  isr_vectors, %object
 156              	
 157              	isr_vectors:
 158 0000 00000000 	  .word   _mstack          /* main return stack address */
 159 0004 00000000 	  .word   reset_handler    /* startup address */
 160              	/* core interrupts || exceptions */
 161 0008 00000000 	  .word   default_handler  /*  NMI */
 162 000c 00000000 	  .word   default_handler  /*  HardFault */
ARM GAS  stm32eforth.s 			page 6


 163 0010 00000000 	  .word   default_handler  /*  Memory Management */
 164 0014 00000000 	  .word   default_handler  /* Bus fault */
 165 0018 00000000 	  .word   default_handler  /* Usage fault */
 166 001c 00000000 	  .word   0
 167 0020 00000000 	  .word   0
 168 0024 00000000 	  .word   0
 169 0028 00000000 	  .word   0
 170 002c 00000000 	  .word   default_handler  /* SWI instruction */
 171 0030 00000000 	  .word   default_handler  /* Debug monitor */
 172 0034 00000000 	  .word   0
 173 0038 00000000 	  .word   default_handler  /* PendSV */
 174 003c 00000000 	  .word   systick_handler  /* Systick */
 175              	  
 176              	  /* External Interrupts */
 177 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 178 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 179 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 180 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 181 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 182 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 183 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 184 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 185 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 186 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 187 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 188 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 189 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 190 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 191 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 192 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 193 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 194 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 195 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 196 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 197 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 198 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 199 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 200 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 201 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 202 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 203 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 204 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 205 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 206 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 207 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 208 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 209 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 210 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 211 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 212 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 213 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 214 00d4 00000000 	  .word      default_handler /* IRQ37, USART1 */                   
 215 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 216 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 217 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 218 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 219 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
ARM GAS  stm32eforth.s 			page 7


 220 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 221 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 222 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 223 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 224 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 225 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 226 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 227 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 228 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 229 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 230 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 231 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 232 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 233 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 234 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 235 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 236 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 237              	
 238              	  .size  isr_vectors, .-isr_vectors
 239              	
 240              	/*****************************************************
 241              	* default isr handler called on unexpected interrupt
 242              	*****************************************************/
 243              	    .section  .text.default_handler,"ax",%progbits
 244              	
 245              	  .type default_handler, %function
 246              	  .p2align 2 
 247              	  .global default_handler
 248              	default_handler:
 249 0000 DFF81870 		ldr r7,exception_msg 
 250 0004 17F8010B 		ldrb r0,[r7],#1 
 251 0008 41F8045D 	1:	_PUSH 
 252 000c 17F8015B 		ldrb r5,[r7],#1
 253 0010 00F0AAFA 		bl EMIT 
 254 0014 0138     		subs r0,r0,#1 
 255 0016 F7D1     		bne 1b 	
 256 0018 FFF7FEBF 		b reset_handler   
 257              	  .size  default_handler, .-default_handler
 258              	exception_msg:
 259 001c 20000000 		.word .+4 
 260 0020 12       		.byte 18
 261 0021 0A0D6578 		.ascii "\n\rexeption reboot!"
 261      65707469 
 261      6F6E2072 
 261      65626F6F 
 261      7421
 262 0033 00       		.p2align 2
 263              	
 264              	/*********************************
 265              		system milliseconds counter
 266              	*********************************/	
 267              	  .type systick_handler, %function
 268              	  .p2align 2 
 269              	  .global systick_handler
 270              	systick_handler:
 271 0034 4FF00003 	  mov r3,#UPP&0xffff
 272 0038 C2F20003 	  movt r3,#UPP>>16  	
ARM GAS  stm32eforth.s 			page 8


 273 003c 9868     	  ldr r0,[r3,#TICKS_OFS]  
 274 003e 00F10100 	  add r0,#1
 275 0042 9860     	  str r0,[r3,#TICKS_OFS]
 276 0044 D868     	  ldr r0,[r3,#TIMER_OFS]
 277 0046 10B1     	  cbz r0, systick_exit
 278 0048 A0F10100 	  sub r0,#1
 279 004c D860     	  str r0,[r3,#TIMER_OFS]
 280              	systick_exit:
 281 004e 7047     	  bx lr
 282              	
 283              	
 284              	/**************************************
 285              	  reset_handler execute at MCU reset
 286              	***************************************/
 287              	    .section  .text.reset_handler
 288              	  .type  reset_handler, %function
 289              	  .p2align 2 
 290              	  .global reset_handler
 291              	reset_handler:
 292 0000 00F070F8 		bl	remap 
 293 0004 00F006F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 294              	//	bl	UNLOCK			/* unlock flash memory */
 295 0008 0148     		ldr r0,forth_entry
 296 000a 40F00100 		orr r0,#1
 297 000e 0047     		bx r0 
 298              	forth_entry:
 299 0010 E41A0018 		.word COLD+MAPOFFSET 
 300              	
 301              	  .type init_devices, %function
 302              	  .p2align 2 
 303              	init_devices:
 304              	/* init clock to HSE 72 Mhz */
 305              	/* set 2 wait states in FLASH_ACR_LATENCY */
 306 0014 4FF40050 		mov r0,#FLASH_BASE_ADR&0xffff
 307 0018 C4F20200 		movt r0,#FLASH_BASE_ADR>>16 
 308 001c 4FF01202 	  mov r2,#0x12
 309 0020 0260     	  str r2,[r0,#FLASH_ACR]
 310              	/* configure clock for HSE, 8 Mhz crystal */
 311              	/* enable HSE in RCC_CR */
 312 0022 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 313 0026 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 314 002a 0168     	  ldr r1,[r0,#RCC_CR]
 315 002c 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 316 0030 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 317              	/* wait HSERDY loop */
 318              	wait_hserdy:
 319 0032 0168     	  ldr r1,[r0,#RCC_CR]
 320 0034 11F4003F 	  tst r1,#(1<<17)
 321 0038 FBD0     	  beq wait_hserdy
 322              	
 323              	/************************************************* 
 324              	   configure PLL mul factor and source 
 325              	   SYSCLOCK=72 Mhz
 326              	   select HSE as  PLL source clock
 327              	   multiply frequency by 9 
 328              	   APB1 clock is limited to 36 Mhz so divide by 2 
 329              	****************************************************/
ARM GAS  stm32eforth.s 			page 9


 330 003a 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 331 003e C0F21D01 	  movt r1,#(7<<2)|1
 332 0042 4160     	  str r1,[r0,#RCC_CFGR]
 333              	  /* enable PLL */
 334 0044 0168     	  ldr r1,[r0,#RCC_CR]
 335 0046 41F08071 	  orr r1, #1<<24 
 336 004a 0160     	  str r1,[r0,#RCC_CR]
 337              	/* wait for PLLRDY */
 338              	wait_pllrdy:
 339 004c 0168     	  ldr r1,[r0,#RCC_CR]
 340 004e 11F0007F 	  tst r1,#(1<<25)
 341 0052 FBD0     	  beq wait_pllrdy 
 342              	/* select PLL as sysclock */
 343 0054 4168     	  ldr r1,[r0,#RCC_CFGR]
 344 0056 4FF6FC72 	  mov r2,#0xfffc
 345 005a CFF6FF72 	  movt r2,#0xffff
 346 005e 01EA0201 	  and r1,r1,r2 
 347 0062 4FF00202 	  mov r2,#2
 348 0066 41EA0201 	  orr r1,r1,r2
 349 006a 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 350              	/* wait for SWS==2 */
 351              	wait_sws:
 352 006c 4168     	  ldr r1,[r0,#RCC_CFGR]
 353 006e 11F0080F 	  tst r1,#(2<<2)
 354 0072 FBD0     	  beq wait_sws
 355              	/* now sysclock is 72 Mhz */
 356              	
 357              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 358 0074 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 359 0078 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 360 007c 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 361 0080 8161     	  str	r1, [r0, #RCC_APB2ENR]
 362              	
 363              	/* configure GPIOC:13 as output for user LED */
 364 0082 4FF48050 	  mov r0,#GPIOC_BASE_ADR&0xffff
 365 0086 C4F20100 	  movt r0,#GPIOC_BASE_ADR>>16
 366 008a 4168     	  ldr r1,[r0,#GPIO_CRH]
 367 008c 6FF47002 	  mvn r2,#(15<<20)
 368 0090 01EA0201 	  and r1,r1,r2
 369 0094 4FF4C002 	  mov r2,#(6<<20)
 370 0098 41EA0201 	  orr r1,r1,r2
 371 009c 4160     	  str r1,[r0,#GPIO_CRH]
 372              	
 373              	/* configure USART1 */
 374              	/* set GPIOA PIN 9, uart TX  */
 375 009e 4FF40060 	  mov r0,#GPIOA_BASE_ADR&0XFFFF
 376 00a2 C4F20100 	  movt r0,#GPIOA_BASE_ADR>>16	
 377 00a6 4168     	  ldr r1,[r0,#GPIO_CRH]
 378 00a8 6FF0F002 	  mvn r2,#(15<<4)
 379 00ac 01EA0201 	  and r1,r1,r2
 380 00b0 4FF0A002 	  mov r2,#(0xA<<4)
 381 00b4 41EA0201 	  orr r1,r1,r2 
 382 00b8 4160     	  str r1,[r0,#GPIO_CRH]
 383              	
 384 00ba 4FF46050 	  mov r0,#UART&0xFFFF
 385 00be C4F20100 	  movt r0,#UART>>16	
 386              	/* BAUD rate */
ARM GAS  stm32eforth.s 			page 10


 387 00c2 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 388 00c6 8160     	  str r1,[r0,#USART_BRR]
 389 00c8 42F20C01 	  mov r1,#(3<<2)+(1<<13)
 390 00cc C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 391              	/* configure systicks for 1msec ticks */
 392 00ce 4EF21000 	  mov r0,#STK_BASE_ADR&0xFFFF
 393 00d2 CEF20000 	  movt r0,#STK_BASE_ADR>>16	
 394 00d6 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 395 00da 4160     	  str r1,[r0,#STK_LOAD]
 396 00dc 4FF00301 	  mov r1,#3
 397 00e0 0160     	  str r1,[r0,STK_CTL]
 398 00e2 7047     	  _NEXT  
 399              	
 400              	/* copy system to RAM */ 
 401              		.type remap, %function 
 402              	
 403              	remap:
 404 00e4 DFF83400 		ldr r0,remap_dest  
 405 00e8 0B49     		ldr r1,remap_src 
 406 00ea 42F24832 		mov r2,#CTOP-UZERO 
 407 00ee 02F10302 		add r2,r2,#3
 408 00f2 22F00302 		and r2,r2,#~3 
 409 00f6 51F8043B 	1:	ldr r3,[r1],#4 
 410 00fa 40F8043B 		str r3,[r0],#4 
 411 00fe 043A     		subs R2,#4 
 412 0100 F9D1     		bne 1b
 413              	// zero end of RAM 
 414 0102 4FF4A042 		mov r2,#0x5000
 415 0106 C2F20002 		movt r2,#0x2000
 416 010a 83EA0303 		eor r3,r3,r3 
 417 010e 40F8043B 	2:  str r3,[r0],#4
 418 0112 9042     		cmp r0,r2 
 419 0114 FBDB     		blt 2b 
 420 0116 7047     		_NEXT 
 421              	remap_src:
 422 0118 00040000 		.word UZERO 
 423              	remap_dest:
 424 011c 00000020 		.word RAMOFFSET 
 425              	
 426              	/********************
 427              	* Version control
 428              	*******************/
 429              	.equ VER ,	0x01	/*major release version */
 430              	.equ EXT ,	0x00	/*minor extension */
 431              	
 432              	/* Constants */
 433              	
 434              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 435              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 436              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 437              	
 438              	.equ CELLL ,	4	/*size of a cell */
 439              	.equ BASEE ,	10	/*default radix */
 440              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 441              	
 442              	.equ BKSPP ,	8	/*backspace */
 443              	.equ LF ,	10	  /*line feed */
ARM GAS  stm32eforth.s 			page 11


 444              	.equ CRR ,	13	/*carriage return */
 445              	.equ ERR ,	27	/*error escape */
 446              	.equ TIC ,	39	/*tick */
 447              	
 448              	/********************************************************
 449              	* RAM memory mapping
 450              	* 	0x20000000	RAM base address
 451              	*	0x20000000  system variables	
 452              	* 	0x20000100	Forth dictionary
 453              	* 	0x2000????	top of dictionary, HERE
 454              	* 	0x2000????	WORD buffer, HERE+16
 455              	*   0x20004E00  end of user space
 456              	* 	0x20004E80	top of data stack  R2
 457              	* 	0x20004E80	TIB terminal input buffer
 458              	* 	0x20004F80	top of return stack  R1
 459              	* 	0x20005000	top of hardware stack for interrupts R14
 460              	********************************************************/
 461              	
 462              	
 463              	/******************************************************
 464              	*  COLD start moves the following to USER variables.
 465              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 466              	******************************************************/
 467 0120 AFF30080 		.p2align 10
 467      AFF30080 
 467      AFF30080 
 467      AFF30080 
 467      AFF30080 
 468              	
 469              	UZERO:
 470 0400 00000000 		.word 0  			/*Reserved */
 471 0404 55AA0000 		.word 0xaa55 /* SEED  */ 
 472 0408 00000000 		.word 0      /* MSEC */
 473 040c 00000000 	    .word 0     /* TIMER */
 474 0410 FFFFFFFF 		.word -1    /* >RAM */ 
 475 0414 701A0018 		.word HI+MAPOFFSET  /*'BOOT */
 476 0418 0A000000 		.word BASEE 	/*BASE */
 477 041c 00000000 		.word 0			/*tmp */
 478 0420 00000000 		.word 0			/*SPAN */
 479 0424 00000000 		.word 0			/*>IN */
 480 0428 00000000 		.word 0			/*#TIB */
 481 042c 804E0020 		.word TIBB	/*TIB */
 482 0430 240E0018 		.word INTER+MAPOFFSET	/*'EVAL */
 483 0434 00000000 		.word 0			/*HLD */
 484 0438 DC1A0018 		.word LASTN+MAPOFFSET	/*CONTEXT */
 485 043c 481B0018 		.word CTOP+MAPOFFSET	/* FCP end of system dictionnary */
 486 0440 481B0018 		.word CTOP+MAPOFFSET	/* CP end of RAM dictionary RAM */
 487 0444 DC1A0018 		.word LASTN+MAPOFFSET	/*LAST word in dictionary */
 488 0448 00000000 		.word 0,0			/*reserved */
 488      00000000 
 489              	ULAST:
 490              	
 491              	 
 492              	
 493              	/***********************************
 494              	//  Start of Forth dictionary
 495              	***********************************/
ARM GAS  stm32eforth.s 			page 12


 496              	
 497              		.p2align 2 
 498              	
 499              	// RANDOM ( n1 -- {0..n1-1} )
 500              	// return pseudo random number 
 501              	// REF: https://en.wikipedia.org/wiki/Xorshift
 502              	
 503 0450 00000000 		.word 0
 504 0454 06       	_RAND: .byte 6
 505 0455 52414E44 		.ascii "RANDOM"
 505      4F4D
 506 045b 00       		.p2align 2 
 507              	RAND:
 508 045c 42F804ED 		_NEST 
 509 0460 00F0EEFA 		bl SEED 
 510 0464 00F0D2F8 		bl AT 
 511 0468 4FEA4534 		lsl r4,r5,#13
 512 046c 85EA0405 		eor r5,r4
 513 0470 4FEA5544 		lsr r4,r5,#17
 514 0474 85EA0405 		eor r5,r4
 515 0478 4FEA4514 		lsl r4,r5,#5
 516 047c 85EA0405 		eor r5,r4
 517 0480 00F008F9 		bl DUPP 
 518 0484 00F0DCFA 		bl SEED 
 519 0488 00F0B6F8 		bl STORE 
 520 048c 00F036FA 		bl ABSS
 521 0490 00F008F9 		bl SWAP 
 522 0494 00F01CFC 		bl MODD 
 523 0498 52F804FB 		_UNNEST 
 524              	
 525              	// REBOOT ( -- )
 526              	// hardware reset 
 527 049c 54F8FF17 		.word _RAND+MAPOFFSET
 528 04a0 06       	_REBOOT: .byte 6
 529 04a1 5245424F 		.ascii "REBOOT"
 529      4F54
 530 04a7 00       		.p2align 2 
 531              	REBOOT:
 532 04a8 0348     		ldr r0,scb_adr 
 533 04aa C168     		ldr r1,[r0,#SCB_AIRCR]
 534 04ac 41F00401 		orr r1,#(1<<2)
 535 04b0 C0F2FA51 		movt r1,#SCB_VECTKEY
 536 04b4 C160     		str r1,[r0,#SCB_AIRCR]
 537 04b6 FEE7     		b . 
 538              	scb_adr:
 539 04b8 00ED00E0 		.word SCB_BASE_ADR 
 540              	
 541              	// PAUSE ( u -- ) 
 542              	// suspend execution for u milliseconds
 543 04bc A0F8FF17 		.word _REBOOT+MAPOFFSET
 544 04c0 05       	_PAUSE: .byte 5
 545 04c1 50415553 		.ascii "PAUSE"
 545      45
 546 04c6 00BF     		.p2align 2
 547              	PAUSE:
 548 04c8 42F804ED 		_NEST 
 549 04cc 00F0CCFA 		BL TIMER 
ARM GAS  stm32eforth.s 			page 13


 550 04d0 00F092F8 		BL STORE 
 551              	PAUSE_LOOP:
 552 04d4 00F0C8FA 		BL TIMER 
 553 04d8 00F098F8 		BL AT 
 554 04dc 00F070F8 		BL QBRAN 
 555 04e0 EC040000 		.word PAUSE_EXIT 
 556 04e4 00F078F8 		BL BRAN 
 557 04e8 D4040000 		.word PAUSE_LOOP 
 558              	PAUSE_EXIT: 		
 559 04ec 52F804FB 		_UNNEST 
 560              	
 561              	//  ULED ( T|F -- )
 562              	// control user LED, -1 ON, 0 OFF  
 563 04f0 C0F8FF17 		.word _PAUSE + MAPOFFSET
 564 04f4 04       	_ULED: .byte 4
 565 04f5 554C4544 		.ascii "ULED"
 566 04f9 0000BF   		.p2align 2
 567              		.type ULED, %function 
 568              	ULED:
 569 04fc 4FF40056 		mov r6,#(1<<LED_PIN)
 570 0500 4FF48054 		mov r4,#LED_GPIO&0xffff
 571 0504 C4F20104 		movt r4,#LED_GPIO>>16
 572 0508 2800     		movs r0,r5 
 573 050a 51F8045B 		_POP
 574 050e 01D0     		beq ULED_OFF 
 575 0510 6661     		str r6,[r4,#GPIO_BRR]
 576 0512 7047     		_NEXT 
 577              	ULED_OFF:
 578 0514 2661     		str r6,[r4,#GPIO_BSRR]
 579 0516 7047     		_NEXT 
 580              		
 581              	//    ?RX	 ( -- c T | F )
 582              	// 	Return input character and true, or a false if no input.
 583 0518 F4F8FF17 		.word	_ULED+MAPOFFSET
 584 051c 04       	_QRX:	.byte   4
 585 051d 3F4B4559 		.ascii "?KEY"
 586 0521 0000BF   		.p2align 2 
 587              	QKEY:
 588              	QRX: 
 589 0524 41F8045D 		_PUSH
 590 0528 4FF46054 		mov r4,#UART&0xFFFF
 591 052c C4F20104 		movt r4,#UART>>16
 592 0530 2688     		ldrh	r6, [r4, #USART_SR]
 593 0532 16F02006 		ands	r6, #0x20		//  RXE
 594 0536 05D0     		BEQ	QRX1
 595 0538 6568     	 	LDR	R5, [R4, #USART_DR]
 596 053a 41F8045D 		_PUSH
 597 053e 18BF     	    IT NE 
 598 0540 6FF00005 		MVNNE	R5,#0
 599              	QRX1:
 600 0544 08BF     		IT EQ 
 601 0546 0025     	    MOVEQ	R5,#0
 602 0548 7047     		_NEXT
 603 054a 00BF     		.p2align 2 
 604              	
 605              	//    TX!	 ( c -- )
 606              	// 	Send character c to the output device.
ARM GAS  stm32eforth.s 			page 14


 607              	
 608 054c 1CF9FF17 		.word	_QRX+MAPOFFSET
 609 0550 04       	_TXSTO:	.byte 4
 610 0551 454D4954 		.ascii "EMIT"
 611 0555 0000BF   		.p2align 2 	
 612              	TXSTO:
 613              	EMIT:
 614              	TECHO:
 615 0558 4FF46054 		mov r4,#UART&0xFFFF
 616 055c C4F20104 		movt r4,#UART>>16
 617              	TX1:
 618 0560 2688     		ldrh	r6, [r4, #USART_SR]	
 619 0562 16F08006 		ands	r6, #0x80		//  TXE bit 
 620 0566 FBD0     		beq	TX1
 621 0568 A580     		strh	r5, [r4, #USART_DR]	
 622 056a 51F8045B 		_POP
 623 056e 7047     		_NEXT
 624              		
 625              	// **************************************************************************
 626              	//  The kernel
 627              	
 628              	//    NOP	( -- )
 629              	// 	do nothing.
 630              	
 631 0570 50F9FF17 		.word	_TXSTO+MAPOFFSET
 632 0574 03       	_NOP:	.byte   3
 633 0575 4E4F50   		.ascii "NOP"
 634              		.p2align 2 	
 635              	NOP:
 636 0578 7047     		_NEXT
 637              	 
 638              	
 639              	//    doLIT	( -- w )
 640              	// 	Push an inline literal.
 641              	
 642              	// 	.word	_NOP+MAPOFFSET
 643              	// _LIT	.byte   COMPO+5
 644              	// 	.ascii "doLIT"
 645              	// 	.p2align 2 	
 646              	DOLIT:
 647 057a 41F8045D 		_PUSH				//  store R5 on data stack
 648 057e 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 649 0582 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 650 0586 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 651 058a 7047     		_NEXT
 652              	
 653              	//    EXECUTE	( ca -- )
 654              	// 	Execute the word at ca.
 655              	
 656 058c 74F9FF17 		.word	_NOP+MAPOFFSET
 657 0590 07       	_EXECU:	.byte   7
 658 0591 45584543 		.ascii "EXECUTE"
 658      555445
 659              		.p2align 2 	
 660              	EXECU:
 661 0598 45F00104 		ORR	R4,R5,#1		//  b0=1 
 662 059c 51F8045B 		_POP
ARM GAS  stm32eforth.s 			page 15


 663 05a0 2047     		BX	R4
 664              	
 665              	//    next	( -- ) counter on R:
 666              	// 	Run time code for the single index loop.
 667              	// 	: next ( -- ) \ hilevel model
 668              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 669              	
 670              	// 	.word	_EXECU+MAPOFFSET
 671              	// _DONXT	.byte   COMPO+4
 672              	// 	.ascii "next"
 673              	// 	.p2align 2 	
 674              	DONXT:
 675 05a2 1468     		LDR	R4,[R2]   // ( -- u )  
 676 05a4 24B9     		CBNZ R4,NEXT1 
 677              		/* loop done */
 678 05a6 02F10402 		ADD	R2,R2,#4 // drop counter 
 679 05aa 0EF1040E 		ADD	LR,LR,#4 // skip after loop address 
 680 05ae 7047     		_NEXT
 681              	NEXT1:
 682              		/* decrement loop counter */
 683 05b0 A4F10104 		SUB	R4,R4,#1
 684 05b4 1460     		STR	R4,[R2]
 685 05b6 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 686 05ba 4EF0010E 		ORR	LR,LR,#1 // begining of loop
 687 05be 7047     		_NEXT
 688              	
 689              	//    ?branch	( f -- )
 690              	// 	Branch if flag is zero.
 691              	
 692              	// 	.word	_DONXT+MAPOFFSET
 693              	// _QBRAN	.byte   COMPO+7
 694              	// 	.ascii "?branch"
 695              	// 	.p2align 2 	
 696              	QBRAN:
 697 05c0 2C00     		MOVS	R4,R5
 698 05c2 51F8045B 		_POP
 699 05c6 04D1     		BNE	QBRAN1
 700 05c8 5EF801EC 		LDR	LR,[LR,#-1]
 701 05cc 4EF0010E 		ORR LR,LR,#1
 702 05d0 7047     		_NEXT
 703              	QBRAN1:
 704 05d2 0EF1040E 	 	ADD	LR,LR,#4
 705 05d6 7047     		_NEXT
 706              	
 707              	//    branch	( -- )
 708              	// 	Branch to an inline address.
 709              	
 710              	// 	.word	_QBRAN+MAPOFFSET
 711              	// _BRAN	.byte   COMPO+6
 712              	// 	.ascii "branch"
 713              	// 	.p2align 2 	
 714              	BRAN:
 715 05d8 5EF801EC 		LDR	LR,[LR,#-1]
 716 05dc 4EF0010E 		ORR	LR,LR,#1
 717 05e0 7047     		_NEXT
 718              	
 719              	//    EXIT	(  -- )
ARM GAS  stm32eforth.s 			page 16


 720              	// 	Exit the currently executing command.
 721              	
 722 05e2 90F9FF17 		.word	_EXECU+MAPOFFSET
 723 05e6 04       	_EXIT:	.byte   4
 724 05e7 45584954 		.ascii "EXIT"
 725 05eb 00       		.p2align 2 	
 726              	EXIT:
 727 05ec 52F804FB 		_UNNEST
 728              	
 729              	//    !	   ( w a -- )
 730              	// 	Pop the data stack to memory.
 731              	
 732 05f0 E6F9FF17 		.word	_EXIT+MAPOFFSET
 733 05f4 01       	_STORE:	.byte   1
 734 05f5 21       		.ascii "!"
 735 05f6 00BF     		.p2align 2 	
 736              	STORE:
 737 05f8 51F8044B 		LDR	R4,[R1],#4
 738 05fc 2C60     		STR	R4,[R5]
 739 05fe 51F8045B 		_POP
 740 0602 7047     		_NEXT
 741              	
 742              	//    @	   ( a -- w )
 743              	// 	Push memory location to the data stack.
 744              	
 745 0604 F4F9FF17 		.word	_STORE+MAPOFFSET
 746 0608 01       	_AT:	.byte   1
 747 0609 40       		.ascii "@"
 748 060a 00BF     		.p2align 2 	
 749              	AT:
 750 060c 2D68     		LDR	R5,[R5]
 751 060e 7047     		_NEXT
 752              	
 753              	//    C!	  ( c b -- )
 754              	// 	Pop the data stack to byte memory.
 755              	
 756 0610 08FAFF17 		.word	_AT+MAPOFFSET
 757 0614 02       	_CSTOR:	.byte   2
 758 0615 4321     		.ascii "C!"
 759 0617 00       		.p2align 2 	
 760              	CSTOR:
 761 0618 51F8044B 		LDR	R4,[R1],#4
 762 061c 2C70     		STRB	R4,[R5]
 763 061e 51F8045B 		_POP
 764 0622 7047     		_NEXT
 765              	
 766              	//    C@	  ( b -- c )
 767              	// 	Push byte memory location to the data stack.
 768              	
 769 0624 14FAFF17 		.word	_CSTOR+MAPOFFSET
 770 0628 02       	_CAT:	.byte   2
 771 0629 4340     		.ascii "C@"
 772 062b 00       		.p2align 2 	
 773              	CAT:
 774 062c 2D78     		LDRB	R5,[R5]
 775 062e 7047     		_NEXT
 776              	
ARM GAS  stm32eforth.s 			page 17


 777              	//    R>	  ( -- w )
 778              	// 	Pop the return stack to the data stack.
 779              	
 780 0630 28FAFF17 		.word	_CAT+MAPOFFSET
 781 0634 02       	_RFROM:	.byte   2
 782 0635 523E     		.ascii "R>"
 783 0637 00       		.p2align 2 	
 784              	RFROM:
 785 0638 41F8045D 		_PUSH
 786 063c 52F8045B 		LDR	R5,[R2],#4
 787 0640 7047     		_NEXT
 788              	
 789              	//    R@	  ( -- w )
 790              	// 	Copy top of return stack to the data stack.
 791              	
 792 0642 34FAFF17 		.word	_RFROM+MAPOFFSET
 793 0646 02       	_RAT:	.byte   2
 794 0647 5240     		.ascii "R@"
 795 0649 0000BF   		.p2align 2 	
 796              	RAT:
 797 064c 41F8045D 		_PUSH
 798 0650 1568     		LDR	R5,[R2]
 799 0652 7047     		_NEXT
 800              	
 801              	//    >R	  ( w -- )
 802              	// 	Push the data stack to the return stack.
 803              	
 804 0654 46FAFF17 		.word	_RAT+MAPOFFSET
 805 0658 42       	_TOR:	.byte   COMPO+2
 806 0659 3E52     		.ascii ">R"
 807 065b 00       		.p2align 2 	
 808              	TOR:
 809 065c 42F8045D 		STR	R5,[R2,#-4]!
 810 0660 51F8045B 		_POP
 811 0664 7047     		_NEXT
 812              	
 813              	//    SP@	 ( -- a )
 814              	// 	Push the current data stack pointer.
 815              	
 816 0666 58FAFF17 		.word	_TOR+MAPOFFSET
 817 066a 03       	_SPAT:	.byte   3
 818 066b 535040   		.ascii "SP@"
 819 066e 00BF     		.p2align 2 	
 820              	SPAT:
 821 0670 41F8045D 		_PUSH
 822 0674 0D46     		MOV	R5,R1
 823 0676 7047     		_NEXT
 824              	
 825              	//    DROP	( w -- )
 826              	// 	Discard top stack item.
 827              	
 828 0678 6AFAFF17 		.word	_SPAT+MAPOFFSET
 829 067c 04       	_DROP:	.byte   4
 830 067d 44524F50 		.ascii "DROP"
 831 0681 0000BF   		.p2align 2 	
 832              	DROP:
 833 0684 51F8045B 		_POP
ARM GAS  stm32eforth.s 			page 18


 834 0688 7047     		_NEXT
 835              	
 836              	//    DUP	 ( w -- w w )
 837              	// 	Duplicate the top stack item.
 838              	
 839 068a 7CFAFF17 		.word	_DROP+MAPOFFSET
 840 068e 03       	_DUPP:	.byte   3
 841 068f 445550   		.ascii "DUP"
 842 0692 00BF     		.p2align 2 	
 843              	DUPP:
 844 0694 41F8045D 		_PUSH
 845 0698 7047     		_NEXT
 846              	
 847              	//    SWAP	( w1 w2 -- w2 w1 )
 848              	// 	Exchange top two stack items.
 849              	
 850 069a 8EFAFF17 		.word	_DUPP+MAPOFFSET
 851 069e 04       	_SWAP:	.byte   4
 852 069f 53574150 		.ascii "SWAP"
 853 06a3 00       		.p2align 2 	
 854              	SWAP:
 855 06a4 0C68     		LDR	R4,[R1]
 856 06a6 0D60     		STR	R5,[R1]
 857 06a8 2546     		MOV	R5,R4
 858 06aa 7047     		_NEXT
 859              	
 860              	//    OVER	( w1 w2 -- w1 w2 w1 )
 861              	// 	Copy second stack item to top.
 862              	
 863 06ac 9EFAFF17 		.word	_SWAP+MAPOFFSET
 864 06b0 04       	_OVER:	.byte   4
 865 06b1 4F564552 		.ascii "OVER"
 866 06b5 0000BF   		.p2align 2 	
 867              	OVER:
 868 06b8 41F8045D 		_PUSH
 869 06bc 4D68     		LDR	R5,[R1,#4]
 870 06be 7047     		_NEXT
 871              	
 872              	//    0<	  ( n -- t )
 873              	// 	Return true if n is negative.
 874              	
 875 06c0 B0FAFF17 		.word	_OVER+MAPOFFSET
 876 06c4 02       	_ZLESS:	.byte   2
 877 06c5 303C     		.ascii "0<"
 878 06c7 00       		.p2align 2 	
 879              	ZLESS:
 880 06c8 4FF00004 		MOV	R4,#0
 881 06cc 04EB2505 		ADD	R5,R4,R5,ASR #32
 882 06d0 7047     		_NEXT
 883              	
 884              	//    AND	 ( w w -- w )
 885              	// 	Bitwise AND.
 886              	
 887 06d2 C4FAFF17 		.word	_ZLESS+MAPOFFSET
 888 06d6 03       	_ANDD:	.byte   3
 889 06d7 414E44   		.ascii "AND"
 890 06da 00BF     		.p2align 2 	
ARM GAS  stm32eforth.s 			page 19


 891              	ANDD:
 892 06dc 51F8044B 		LDR	R4,[R1],#4
 893 06e0 05EA0405 		AND	R5,R5,R4
 894 06e4 7047     		_NEXT
 895              	
 896              	//    OR	  ( w w -- w )
 897              	// 	Bitwise inclusive OR.
 898              	
 899 06e6 D6FAFF17 		.word	_ANDD+MAPOFFSET
 900 06ea 02       	_ORR:	.byte   2
 901 06eb 4F52     		.ascii "OR"
 902 06ed 0000BF   		.p2align 2 	
 903              	ORR:
 904 06f0 51F8044B 		LDR	R4,[R1],#4
 905 06f4 45EA0405 		ORR	R5,R5,R4
 906 06f8 7047     		_NEXT
 907              	
 908              	//    XOR	 ( w w -- w )
 909              	// 	Bitwise exclusive OR.
 910              	
 911 06fa EAFAFF17 		.word	_ORR+MAPOFFSET
 912 06fe 03       	_XORR:	.byte   3
 913 06ff 584F52   		.ascii "XOR"
 914 0702 00BF     		.p2align 2 	
 915              	XORR:
 916 0704 51F8044B 		LDR	R4,[R1],#4
 917 0708 85EA0405 		EOR	R5,R5,R4
 918 070c 7047     		_NEXT
 919              	
 920              	//    UM+	 ( w w -- w cy )
 921              	// 	Add two numbers, return the sum and carry flag.
 922              	
 923 070e FEFAFF17 		.word	_XORR+MAPOFFSET
 924 0712 03       	_UPLUS:	.byte   3
 925 0713 554D2B   		.ascii "UM+"
 926 0716 00BF     		.p2align 2 	
 927              	UPLUS:
 928 0718 0C68     		LDR	R4,[R1]
 929 071a 6419     		ADDS	R4,R4,R5
 930 071c 4FF00005 		MOV	R5,#0
 931 0720 45F10005 		ADC	R5,R5,#0
 932 0724 0C60     		STR	R4,[R1]
 933 0726 7047     		_NEXT
 934              	
 935              	//    RSHIFT	 ( w # -- w )
 936              	// 	arithmetic Right shift # bits.
 937              	
 938 0728 12FBFF17 		.word	_UPLUS+MAPOFFSET
 939 072c 06       	_RSHIFT:	.byte   6
 940 072d 52534849 		.ascii "RSHIFT"
 940      4654
 941 0733 00       		.p2align 2 	
 942              	RSHIFT:
 943 0734 51F8044B 		LDR	R4,[R1],#4
 944 0738 44FA05F5 		MOV	R5,R4,ASR R5
 945 073c 7047     		_NEXT
 946              	
ARM GAS  stm32eforth.s 			page 20


 947              	//    LSHIFT	 ( w # -- w )
 948              	// 	Right shift # bits.
 949              	
 950 073e 2CFBFF17 		.word	_RSHIFT+MAPOFFSET
 951 0742 06       	_LSHIFT:	.byte   6
 952 0743 4C534849 		.ascii "LSHIFT"
 952      4654
 953 0749 0000BF   		.p2align 2 	
 954              	LSHIFT:
 955 074c 51F8044B 		LDR	R4,[R1],#4
 956 0750 04FA05F5 		MOV	R5,R4,LSL R5
 957 0754 7047     		_NEXT
 958              	
 959              	//    +	 ( w w -- w )
 960              	// 	Add.
 961              	
 962 0756 42FBFF17 		.word	_LSHIFT+MAPOFFSET
 963 075a 01       	_PLUS:	.byte   1
 964 075b 2B       		.ascii "+"
 965              		.p2align 2 	
 966              	PLUS:
 967 075c 51F8044B 		LDR	R4,[R1],#4
 968 0760 2544     		ADD	R5,R5,R4
 969 0762 7047     		_NEXT
 970              	
 971              	//    -	 ( w w -- w )
 972              	// 	Subtract.
 973              	
 974 0764 5AFBFF17 		.word	_PLUS+MAPOFFSET
 975 0768 01       	_SUBB:	.byte   1
 976 0769 2D       		.ascii "-"
 977 076a 00BF     		.p2align 2 	
 978              	SUBB:
 979 076c 51F8044B 		LDR	R4,[R1],#4
 980 0770 C5EB0405 		RSB	R5,R5,R4
 981 0774 7047     		_NEXT
 982              	
 983              	//    *	 ( w w -- w )
 984              	// 	Multiply.
 985              	
 986 0776 68FBFF17 		.word	_SUBB+MAPOFFSET
 987 077a 01       	_STAR:	.byte   1
 988 077b 2A       		.ascii "*"
 989              		.p2align 2 	
 990              	STAR:
 991 077c 51F8044B 		LDR	R4,[R1],#4
 992 0780 04FB05F5 		MUL	R5,R4,R5
 993 0784 7047     		_NEXT
 994              	
 995              	//    UM*	 ( w w -- ud )
 996              	// 	Unsigned multiply.
 997              	
 998 0786 7AFBFF17 		.word	_STAR+MAPOFFSET
 999 078a 03       	_UMSTA:	.byte   3
 1000 078b 554D2A   		.ascii "UM*"
 1001 078e 00BF     		.p2align 2 	
 1002              	UMSTA:
ARM GAS  stm32eforth.s 			page 21


 1003 0790 0C68     		LDR	R4,[R1]
 1004 0792 A5FB0467 		UMULL	R6,R7,R5,R4
 1005 0796 0E60     		STR	R6,[R1]
 1006 0798 3D46     		MOV	R5,R7
 1007 079a 7047     		_NEXT
 1008              	
 1009              	//    M*	 ( w w -- d )
 1010              	// 	signed multiply.
 1011              	
 1012 079c 8AFBFF17 		.word	_UMSTA+MAPOFFSET
 1013 07a0 02       	_MSTAR:	.byte   2
 1014 07a1 4D2A     		.ascii "M*"
 1015 07a3 00       		.p2align 2 	
 1016              	MSTAR:
 1017 07a4 0C68     		LDR	R4,[R1]
 1018 07a6 85FB0467 		SMULL	R6,R7,R5,R4
 1019 07aa 0E60     		STR	R6,[R1]
 1020 07ac 3D46     		MOV	R5,R7
 1021 07ae 7047     		_NEXT
 1022              	
 1023              	//    1+	 ( w -- w+1 )
 1024              	// 	Add 1.
 1025              	
 1026 07b0 A0FBFF17 		.word	_MSTAR+MAPOFFSET
 1027 07b4 02       	_ONEP:	.byte   2
 1028 07b5 312B     		.ascii "1+"
 1029 07b7 00       		.p2align 2 	
 1030              	ONEP:
 1031 07b8 05F10105 		ADD	R5,R5,#1
 1032 07bc 7047     		_NEXT
 1033              	
 1034              	//    1-	 ( w -- w-1 )
 1035              	// 	Subtract 1.
 1036              	
 1037 07be B4FBFF17 		.word	_ONEP+MAPOFFSET
 1038 07c2 02       	_ONEM:	.byte   2
 1039 07c3 312D     		.ascii "1-"
 1040 07c5 0000BF   		.p2align 2 	
 1041              	ONEM:
 1042 07c8 A5F10105 		SUB	R5,R5,#1
 1043 07cc 7047     		_NEXT
 1044              	
 1045              	//    2+	 ( w -- w+2 )
 1046              	// 	Add 1.
 1047              	
 1048 07ce C2FBFF17 		.word	_ONEM+MAPOFFSET
 1049 07d2 02       	_TWOP:	.byte   2
 1050 07d3 322B     		.ascii "2+"
 1051 07d5 0000BF   		.p2align 2 	
 1052              	TWOP:
 1053 07d8 05F10205 		ADD	R5,R5,#2
 1054 07dc 7047     		_NEXT
 1055              	
 1056              	//    2-	 ( w -- w-2 )
 1057              	// 	Subtract 2.
 1058              	
 1059 07de D2FBFF17 		.word	_TWOP+MAPOFFSET
ARM GAS  stm32eforth.s 			page 22


 1060 07e2 02       	_TWOM:	.byte   2
 1061 07e3 322D     		.ascii "2-"
 1062 07e5 0000BF   		.p2align 2 	
 1063              	TWOM:
 1064 07e8 A5F10205 		SUB	R5,R5,#2
 1065 07ec 7047     		_NEXT
 1066              	
 1067              	//    CELL+	( w -- w+4 )
 1068              	// 	Add CELLL.
 1069              	
 1070 07ee E2FBFF17 		.word	_TWOM+MAPOFFSET
 1071 07f2 05       	_CELLP:	.byte   5
 1072 07f3 43454C4C 		.ascii "CELL+"
 1072      2B
 1073              		.p2align 2 	
 1074              	CELLP:
 1075 07f8 05F10405 		ADD	R5,R5,#CELLL
 1076 07fc 7047     		_NEXT
 1077              	
 1078              	//    CELL-	( w -- w-4 )
 1079              	// 	Subtract CELLL.
 1080              	
 1081 07fe F2FBFF17 		.word	_CELLP+MAPOFFSET
 1082 0802 05       	_CELLM:	.byte   5
 1083 0803 43454C4C 		.ascii "CELL-"
 1083      2D
 1084              		.p2align 2 	
 1085              	CELLM:
 1086 0808 A5F10405 		SUB	R5,R5,#CELLL
 1087 080c 7047     		_NEXT
 1088              	 
 1089              	//    BL	( -- 32 )
 1090              	// 	Blank (ASCII space).
 1091              	
 1092 080e 02FCFF17 		.word	_CELLM+MAPOFFSET
 1093 0812 02       	_BLANK:	.byte   2
 1094 0813 424C     		.ascii "BL"
 1095 0815 0000BF   		.p2align 2 	
 1096              	BLANK:
 1097 0818 41F8045D 		_PUSH
 1098 081c 4FF02005 		MOV	R5,#32
 1099 0820 7047     		_NEXT
 1100              	
 1101              	//    CELLS	( w -- w*4 )
 1102              	// 	Multiply 4.
 1103              	
 1104 0822 12FCFF17 		.word	_BLANK+MAPOFFSET
 1105 0826 05       	_CELLS:	.byte   5
 1106 0827 43454C4C 		.ascii "CELLS"
 1106      53
 1107              		.p2align 2 	
 1108              	CELLS:
 1109 082c 4FEA8505 		MOV	R5,R5,LSL#2
 1110 0830 7047     		_NEXT
 1111              	
 1112              	//    CELL/	( w -- w/4 )
 1113              	// 	Divide by 4.
ARM GAS  stm32eforth.s 			page 23


 1114              	
 1115 0832 26FCFF17 		.word	_CELLS+MAPOFFSET
 1116 0836 05       	_CELLSL:	.byte   5
 1117 0837 43454C4C 		.ascii "CELL/"
 1117      2F
 1118              		.p2align 2 	
 1119              	CELLSL:
 1120 083c 4FEAA505 		MOV	R5,R5,ASR#2
 1121 0840 7047     		_NEXT
 1122              	
 1123              	//    2*	( w -- w*2 )
 1124              	// 	Multiply 2.
 1125              	
 1126 0842 36FCFF17 		.word	_CELLSL+MAPOFFSET
 1127 0846 02       	_TWOST:	.byte   2
 1128 0847 322A     		.ascii "2*"
 1129 0849 0000BF   		.p2align 2 	
 1130              	TWOST:
 1131 084c 4FEA4505 		MOV	R5,R5,LSL#1
 1132 0850 7047     		_NEXT
 1133              	
 1134              	//    2/	( w -- w/2 )
 1135              	// 	Divide by 2.
 1136              	
 1137 0852 46FCFF17 		.word	_TWOST+MAPOFFSET
 1138 0856 02       	_TWOSL:	.byte   2
 1139 0857 322F     		.ascii "2/"
 1140 0859 0000BF   		.p2align 2 	
 1141              	TWOSL:
 1142 085c 4FEA6505 		MOV	R5,R5,ASR#1
 1143 0860 7047     		_NEXT
 1144              	
 1145              	//    ?DUP	( w -- w w | 0 )
 1146              	// 	Conditional duplicate.
 1147              	
 1148 0862 56FCFF17 		.word	_TWOSL+MAPOFFSET
 1149 0866 04       	_QDUP:	.byte   4
 1150 0867 3F445550 		.ascii "?DUP"
 1151 086b 00       		.p2align 2 	
 1152              	QDUP:
 1153 086c 2C00     		MOVS	R4,R5
 1154 086e 18BF     		IT NE 
 1155 0870 41F8045D 	    STRNE	R5,[R1,#-4]!
 1156 0874 7047     		_NEXT
 1157              	
 1158              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1159              	// 	Rotate top 3 items.
 1160              	
 1161 0876 66FCFF17 		.word	_QDUP+MAPOFFSET
 1162 087a 03       	_ROT:	.byte   3
 1163 087b 524F54   		.ascii "ROT"
 1164 087e 00BF     		.p2align 2 	
 1165              	ROT:
 1166 0880 0C68     		LDR	R4,[R1]  // r4=w2 
 1167 0882 0D60     		STR	R5,[R1]  // w3 replace w2 
 1168 0884 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1169 0886 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
ARM GAS  stm32eforth.s 			page 24


 1170 0888 7047     		_NEXT
 1171              	
 1172              	//    2DROP	( w1 w2 -- )
 1173              	// 	Drop top 2 items.
 1174              	
 1175 088a 7AFCFF17 		.word	_ROT+MAPOFFSET
 1176 088e 05       	_DDROP:	.byte   5
 1177 088f 3244524F 		.ascii "2DROP"
 1177      50
 1178              		.p2align 2 	
 1179              	DDROP:
 1180 0894 51F8045B 		_POP
 1181 0898 51F8045B 		_POP
 1182 089c 7047     		_NEXT
 1183              	
 1184              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1185              	// 	Duplicate top 2 items.
 1186              	
 1187 089e 8EFCFF17 		.word	_DDROP+MAPOFFSET
 1188 08a2 04       	_DDUP:	.byte   4
 1189 08a3 32445550 		.ascii "2DUP"
 1190 08a7 00       		.p2align 2 	
 1191              	DDUP:
 1192 08a8 0C68     		LDR	R4,[R1] // r4=w1
 1193 08aa 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1194 08ae 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1195 08b2 7047     		_NEXT
 1196              	
 1197              	//    D+	( d1 d2 -- d3 )
 1198              	// 	Add top 2 double numbers.
 1199              	
 1200 08b4 A2FCFF17 		.word	_DDUP+MAPOFFSET
 1201 08b8 02       	_DPLUS:	.byte   2
 1202 08b9 442B     		.ascii "D+"
 1203 08bb 00       		.p2align 2 	
 1204              	DPLUS:
 1205 08bc 51F8044B 		LDR	R4,[R1],#4
 1206 08c0 51F8046B 		LDR	R6,[R1],#4
 1207 08c4 0F68     		LDR	R7,[R1]
 1208 08c6 E419     		ADDS	R4,R4,R7
 1209 08c8 0C60     		STR	R4,[R1]
 1210 08ca 45EB0605 		ADC	R5,R5,R6
 1211 08ce 7047     		_NEXT
 1212              	
 1213              	//    NOT	 ( w -- !w )
 1214              	// 	1"s complement.
 1215              	
 1216 08d0 B8FCFF17 		.word	_DPLUS+MAPOFFSET
 1217 08d4 03       	_INVER:	.byte   3
 1218 08d5 4E4F54   		.ascii "NOT"
 1219              		.p2align 2 	
 1220              	INVER:
 1221 08d8 6FEA0505 		MVN	R5,R5
 1222 08dc 7047     		_NEXT
 1223              	
 1224              	//    NEGATE	( w -- -w )
 1225              	// 	2's complement.
ARM GAS  stm32eforth.s 			page 25


 1226              	
 1227 08de D4FCFF17 		.word	_INVER+MAPOFFSET
 1228 08e2 06       	_NEGAT:	.byte   6
 1229 08e3 4E454741 		.ascii "NEGATE"
 1229      5445
 1230 08e9 0000BF   		.p2align 2 	
 1231              	NEGAT:
 1232 08ec C5F10005 		RSB	R5,R5,#0
 1233 08f0 7047     		_NEXT
 1234              	
 1235              	//    ABS	 ( w -- |w| )
 1236              	// 	Absolute.
 1237              	
 1238 08f2 E2FCFF17 		.word	_NEGAT+MAPOFFSET
 1239 08f6 03       	_ABSS:	.byte   3
 1240 08f7 414253   		.ascii "ABS"
 1241 08fa 00BF     		.p2align 2 	
 1242              	ABSS:
 1243 08fc 15F0004F 		TST	R5,#0x80000000
 1244 0900 18BF     		IT NE
 1245 0902 6D42     	    RSBNE   R5,R5,#0
 1246 0904 7047     		_NEXT
 1247              	
 1248              	//  0= ( w -- f )
 1249              	// TOS==0?
 1250              	
 1251 0906 F6FCFF17 		.word _ABSS+MAPOFFSET
 1252 090a 02       	_ZEQUAL: .byte 2
 1253 090b 303D     		.ascii "0="
 1254 090d 0000BF   		.p2align 2
 1255              	ZEQUAL:
 1256 0910 15B9     		cbnz r5,1f
 1257 0912 4FF0FF35 		mov r5,#-1
 1258 0916 7047     		_NEXT 
 1259 0918 85EA0505 	1:  eor r5,r5,r5  
 1260 091c 7047     		_NEXT 	
 1261              	
 1262              	//    =	 ( w w -- t )
 1263              	// 	Equal?
 1264              	
 1265 091e 0AFDFF17 		.word	_ZEQUAL+MAPOFFSET
 1266 0922 01       	_EQUAL:	.byte   1
 1267 0923 3D       		.ascii "="
 1268              		.p2align 2 	
 1269              	EQUAL:
 1270 0924 51F8044B 		LDR	R4,[R1],#4
 1271 0928 A542     		CMP	R5,R4
 1272 092a 0CBF     		ITE EQ 
 1273 092c 6FF00005 	    MVNEQ	R5,#0
 1274 0930 0025     		MOVNE	R5,#0
 1275 0932 7047     		_NEXT
 1276              	
 1277              	//    U<	 ( w w -- t )
 1278              	// 	Unsigned equal?
 1279              	
 1280 0934 22FDFF17 		.word	_EQUAL+MAPOFFSET
 1281 0938 02       	_ULESS:	.byte   2
ARM GAS  stm32eforth.s 			page 26


 1282 0939 553C     		.ascii "U<"
 1283 093b 00       		.p2align 2 	
 1284              	ULESS:
 1285 093c 51F8044B 		LDR	R4,[R1],#4
 1286 0940 AC42     		CMP	R4,R5
 1287 0942 34BF     		ITE CC 
 1288 0944 6FF00005 		MVNCC	R5,#0
 1289 0948 0025     		MOVCS	R5,#0
 1290 094a 7047     		_NEXT
 1291              	
 1292              	//    <	( w w -- t )
 1293              	// 	Less?
 1294              	
 1295 094c 38FDFF17 		.word	_ULESS+MAPOFFSET
 1296 0950 01       	_LESS:	.byte   1
 1297 0951 3C       		.ascii "<"
 1298 0952 00BF     		.p2align 2 	
 1299              	LESS:
 1300 0954 51F8044B 		LDR	R4,[R1],#4
 1301 0958 AC42     		CMP	R4,R5
 1302 095a B4BF     	    ITE LT
 1303 095c 6FF00005 		MVNLT	R5,#0
 1304 0960 0025     		MOVGE	R5,#0
 1305 0962 7047     		_NEXT
 1306              	
 1307              	//    >	( w w -- t )
 1308              	// 	greater?
 1309              	
 1310 0964 50FDFF17 		.word	_LESS+MAPOFFSET
 1311 0968 01       	_GREAT:	.byte   1
 1312 0969 3E       		.ascii ">"
 1313 096a 00BF     		.p2align 2 	
 1314              	GREAT:
 1315 096c 51F8044B 		LDR	R4,[R1],#4
 1316 0970 AC42     		CMP	R4,R5
 1317 0972 CCBF     		ITE GT
 1318 0974 6FF00005 	    MVNGT	R5,#0
 1319 0978 0025     		MOVLE	R5,#0
 1320 097a 7047     		_NEXT
 1321              	
 1322              	//    MAX	 ( w w -- max )
 1323              	// 	Leave maximum.
 1324              	
 1325 097c 68FDFF17 		.word	_GREAT+MAPOFFSET
 1326 0980 03       	_MAX:	.byte   3
 1327 0981 4D4158   		.ascii "MAX"
 1328              		.p2align 2 	
 1329              	MAX:
 1330 0984 51F8044B 		LDR	R4,[R1],#4
 1331 0988 AC42     		CMP	R4,R5
 1332 098a C8BF     		IT GT 
 1333 098c 2546     		MOVGT	R5,R4
 1334 098e 7047     		_NEXT
 1335              	
 1336              	//    MIN	 ( w w -- min )
 1337              	// 	Leave minimum.
 1338              	
ARM GAS  stm32eforth.s 			page 27


 1339 0990 80FDFF17 		.word	_MAX+MAPOFFSET
 1340 0994 03       	_MIN:	.byte   3
 1341 0995 4D494E   		.ascii "MIN"
 1342              		.p2align 2 	
 1343              	MIN:
 1344 0998 51F8044B 		LDR	R4,[R1],#4
 1345 099c AC42     		CMP	R4,R5
 1346 099e B8BF     		IT LT
 1347 09a0 2546     		MOVLT	R5,R4
 1348 09a2 7047     		_NEXT
 1349              	
 1350              	//    +!	 ( w a -- )
 1351              	// 	Add to memory.
 1352              	
 1353 09a4 94FDFF17 		.word	_MIN+MAPOFFSET
 1354 09a8 02       	_PSTOR:	.byte   2
 1355 09a9 2B21     		.ascii "+!"
 1356 09ab 00       		.p2align 2 	
 1357              	PSTOR:
 1358 09ac 51F8044B 		LDR	R4,[R1],#4
 1359 09b0 2E68     		LDR	R6,[R5]
 1360 09b2 2644     		ADD	R6,R6,R4
 1361 09b4 2E60     		STR	R6,[R5]
 1362 09b6 51F8045B 		_POP
 1363 09ba 7047     		_NEXT
 1364              	
 1365              	//    2!	 ( d a -- )
 1366              	// 	Store double number.
 1367              	
 1368 09bc A8FDFF17 		.word	_PSTOR+MAPOFFSET
 1369 09c0 02       	_DSTOR:	.byte   2
 1370 09c1 3221     		.ascii "2!"
 1371 09c3 00       		.p2align 2 	
 1372              	DSTOR:
 1373 09c4 51F8044B 		LDR	R4,[R1],#4
 1374 09c8 51F8046B 		LDR	R6,[R1],#4
 1375 09cc 45F8044B 		STR	R4,[R5],#4
 1376 09d0 2E60     		STR	R6,[R5]
 1377 09d2 51F8045B 		_POP
 1378 09d6 7047     		_NEXT
 1379              	
 1380              	//    2@	 ( a -- d )
 1381              	// 	Fetch double number.
 1382              	
 1383 09d8 C0FDFF17 		.word	_DSTOR+MAPOFFSET
 1384 09dc 02       	_DAT:	.byte   2
 1385 09dd 3240     		.ascii "2@"
 1386 09df 00       		.p2align 2 	
 1387              	DAT:
 1388 09e0 6C68     		LDR	R4,[R5,#4]
 1389 09e2 41F8044D 		STR	R4,[R1,#-4]!
 1390 09e6 2D68     		LDR	R5,[R5]
 1391 09e8 7047     		_NEXT
 1392              	
 1393              	//    COUNT	( b -- b+1 c )
 1394              	// 	Fetch length of string.
 1395              	
ARM GAS  stm32eforth.s 			page 28


 1396 09ea DCFDFF17 		.word	_DAT+MAPOFFSET
 1397 09ee 05       	_COUNT:	.byte   5
 1398 09ef 434F554E 		.ascii "COUNT"
 1398      54
 1399              		.p2align 2 	
 1400              	COUNT:
 1401 09f4 15F8014B 		LDRB	R4,[R5],#1
 1402 09f8 41F8045D 		_PUSH
 1403 09fc 2546     		MOV	R5,R4
 1404 09fe 7047     		_NEXT
 1405              	
 1406              	//    DNEGATE	( d -- -d )
 1407              	// 	Negate double number.
 1408              	
 1409 0a00 EEFDFF17 		.word	_COUNT+MAPOFFSET
 1410 0a04 07       	_DNEGA:	.byte   7
 1411 0a05 444E4547 		.ascii "DNEGATE"
 1411      415445
 1412              		.p2align 2 	
 1413              	DNEGA:
 1414 0a0c 0C68     		LDR	R4,[R1]
 1415 0a0e A6EB0606 		SUB	R6,R6,R6
 1416 0a12 341B     		SUBS R4,R6,R4
 1417 0a14 66EB0505 		SBC	R5,R6,R5
 1418 0a18 0C60     		STR	R4,[R1]
 1419 0a1a 7047     		_NEXT
 1420              	
 1421              	// **************************************************************************
 1422              	//  System and user variables
 1423              	
 1424              	//    doVAR	( -- a )
 1425              	// 	Run time routine for VARIABLE and CREATE.
 1426              	
 1427              	// 	.word	_DNEGA+MAPOFFSET
 1428              	// _DOVAR	.byte  COMPO+5
 1429              	// 	.ascii "doVAR"
 1430              	// 	.p2align 2 	
 1431              	DOVAR:
 1432 0a1c 41F8045D 		_PUSH
 1433 0a20 AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
 1434 0a24 52F804FB 		_UNNEST
 1435              	
 1436              	//    doCON	( -- a ) 
 1437              	// 	Run time routine for CONSTANT.
 1438              	
 1439              	// 	.word	_DOVAR+MAPOFFSET
 1440              	// _DOCON	.byte  COMPO+5
 1441              	// 	.ascii "doCON"
 1442              	// 	.p2align 2 	
 1443              	DOCON:
 1444 0a28 41F8045D 		_PUSH
 1445 0a2c 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1446 0a30 52F804FB 		_UNNEST
 1447              	
 1448              	/***********************
 1449              	  system variables 
 1450              	***********************/
ARM GAS  stm32eforth.s 			page 29


 1451              	
 1452              	 // SEED ( -- a)
 1453              	 // return PRNG seed address 
 1454              	
 1455 0a34 04FEFF17 		.word _DNEGA+MAPOFFSET
 1456 0a38 04       	_SEED: .byte 4
 1457 0a39 53454544 		.ascii "SEED"
 1458 0a3d 0000BF   		.p2align 2
 1459              	SEED:
 1460 0a40 41F8045D 		_PUSH 
 1461 0a44 03F10405 		ADD R5,R3,#SEED_OFS
 1462 0a48 7047     		_NEXT 	
 1463              	
 1464              	//  MSEC ( -- a)
 1465              	// return address of milliseconds counter
 1466 0a4a 38FEFF17 	  .word _SEED+MAPOFFSET 
 1467 0a4e 04       	_MSEC: .byte 4
 1468 0a4f 4D534543 	  .ascii "MSEC"
 1469 0a53 00       	  .p2align 2 
 1470              	MSEC:
 1471 0a54 41F8045D 	  _PUSH
 1472 0a58 03F10805 	  ADD R5,R3,#TICKS_OFS
 1473 0a5c 7047     	  _NEXT 
 1474              	
 1475              	// TIMER ( -- a )
 1476              	// count down timer 
 1477 0a5e 4EFEFF17 	  .word _MSEC+MAPOFFSET
 1478 0a62 05       	_TIMER:  .byte 5
 1479 0a63 54494D45 	  .ascii "TIMER"
 1479      52
 1480              	  .p2align 2 
 1481              	TIMER:
 1482 0a68 41F8045D 	  _PUSH 
 1483 0a6c 03F10C05 	  ADD R5,R3,#TIMER_OFS
 1484 0a70 7047     	  _NEXT
 1485              	
 1486              	// >RAM ( -- a )
 1487              	// compilation target 
 1488              	// -1 compile to RAM, 0 compile to FLASH 
 1489 0a72 62FEFF17 		.word _TIMER+MAPOFFSET
 1490 0a76 04       	_TORAM: .byte 4 
 1491 0a77 3E52414D 		.ascii ">RAM" 
 1492 0a7b 00       		.p2align 2 
 1493              	TORAM:
 1494 0a7c 41F8045D 		_PUSH 
 1495 0a80 03F11005 		ADD R5,R3,#TORAM_OFS
 1496 0a84 7047     		_NEXT 
 1497              	
 1498              	//    'BOOT	 ( -- a )
 1499              	// 	Application.
 1500              	
 1501 0a86 76FEFF17 		.word	_TORAM+MAPOFFSET
 1502 0a8a 05       	_TBOOT:	.byte   5
 1503 0a8b 27424F4F 		.ascii "'BOOT"
 1503      54
 1504              		.p2align 2 	
 1505              	TBOOT:
ARM GAS  stm32eforth.s 			page 30


 1506 0a90 41F8045D 		_PUSH
 1507 0a94 03F11405 		ADD	R5,R3,#BOOT_OFS 
 1508 0a98 7047     		_NEXT
 1509              		
 1510              	//    BASE	( -- a )
 1511              	// 	Storage of the radix base for numeric I/O.
 1512              	
 1513 0a9a 8AFEFF17 		.word	_TBOOT+MAPOFFSET
 1514 0a9e 04       	_BASE:	.byte   4
 1515 0a9f 42415345 		.ascii "BASE"
 1516 0aa3 00       		.p2align 2 	
 1517              	BASE:
 1518 0aa4 41F8045D 		_PUSH
 1519 0aa8 03F11805 		ADD	R5,R3,#BASE_OFS
 1520 0aac 7047     		_NEXT
 1521              	
 1522              	//    tmp	 ( -- a )
 1523              	// 	A temporary storage location used in parse and find.
 1524              	
 1525              	// 	.word	_BASE+MAPOFFSET
 1526              	// _TEMP	.byte   COMPO+3
 1527              	// 	.ascii "tmp"
 1528              	// 	.p2align 2 	
 1529              	TEMP:
 1530 0aae 41F8045D 		_PUSH
 1531 0ab2 03F11C05 		ADD	R5,R3,#TMP_OFS
 1532 0ab6 7047     		_NEXT
 1533              	
 1534              	//    SPAN	( -- a )
 1535              	// 	Hold character count received by EXPECT.
 1536              	
 1537 0ab8 9EFEFF17 		.word	_BASE+MAPOFFSET
 1538 0abc 04       	_SPAN:	.byte   4
 1539 0abd 5350414E 		.ascii "SPAN"
 1540 0ac1 0000BF   		.p2align 2 	
 1541              	SPAN:
 1542 0ac4 41F8045D 		_PUSH
 1543 0ac8 03F12005 		ADD	R5,R3,#SPAN_OFS
 1544 0acc 7047     		_NEXT
 1545              	
 1546              	//    >IN	 ( -- a )
 1547              	// 	Hold the character pointer while parsing input stream.
 1548              	
 1549 0ace BCFEFF17 		.word	_SPAN+MAPOFFSET
 1550 0ad2 03       	_INN:	.byte   3
 1551 0ad3 3E494E   		.ascii ">IN"
 1552 0ad6 00BF     		.p2align 2 	
 1553              	INN:
 1554 0ad8 41F8045D 		_PUSH
 1555 0adc 03F12405 		ADD	R5,R3,#TOIN_OFS
 1556 0ae0 7047     		_NEXT
 1557              	
 1558              	//    #TIB	( -- a )
 1559              	// 	Hold the current count and address of the terminal input buffer.
 1560              	
 1561 0ae2 D2FEFF17 		.word	_INN+MAPOFFSET
 1562 0ae6 04       	_NTIB:	.byte   4
ARM GAS  stm32eforth.s 			page 31


 1563 0ae7 23544942 		.ascii "#TIB"
 1564 0aeb 00       		.p2align 2 	
 1565              	NTIB:
 1566 0aec 41F8045D 		_PUSH
 1567 0af0 03F12805 		ADD	R5,R3,#NTIB_OFS
 1568 0af4 7047     		_NEXT
 1569              	
 1570              	//    'EVAL	( -- a )
 1571              	// 	Execution vector of EVAL.
 1572              	
 1573 0af6 E6FEFF17 		.word	_NTIB+MAPOFFSET
 1574 0afa 05       	_TEVAL:	.byte   5
 1575 0afb 27455641 		.ascii "'EVAL"
 1575      4C
 1576              		.p2align 2 	
 1577              	TEVAL:
 1578 0b00 41F8045D 		_PUSH
 1579 0b04 03F13005 		ADD	R5,R3,#EVAL_OFS
 1580 0b08 7047     		_NEXT
 1581              	
 1582              	//    HLD	 ( -- a )
 1583              	// 	Hold a pointer in building a numeric output string.
 1584              	
 1585 0b0a FAFEFF17 		.word	_TEVAL+MAPOFFSET
 1586 0b0e 03       	_HLD:	.byte   3
 1587 0b0f 484C44   		.ascii "HLD"
 1588 0b12 00BF     		.p2align 2 	
 1589              	HLD:
 1590 0b14 41F8045D 		_PUSH
 1591 0b18 03F13405 		ADD	R5,R3,#HLD_OFS
 1592 0b1c 7047     		_NEXT
 1593              	
 1594              	//    CONTEXT	( -- a )
 1595              	// 	A area to specify vocabulary search order.
 1596              	
 1597 0b1e 0EFFFF17 		.word	_HLD+MAPOFFSET
 1598 0b22 07       	_CNTXT:	.byte   7
 1599 0b23 434F4E54 		.ascii "CONTEXT"
 1599      455854
 1600 0b2a 00BF     		.p2align 2 	
 1601              	CNTXT:
 1602              	CRRNT:
 1603 0b2c 41F8045D 		_PUSH
 1604 0b30 03F13805 		ADD	R5,R3,#CTXT_OFS
 1605 0b34 7047     		_NEXT
 1606              	
 1607              	//    CP	( -- a )
 1608              	// 	Point to top name in RAM vocabulary.
 1609              	
 1610 0b36 22FFFF17 		.word	_CNTXT+MAPOFFSET
 1611 0b3a 02       	_CP:	.byte   2
 1612 0b3b 4350     		.ascii "CP"
 1613 0b3d 0000BF   		.p2align 2 	
 1614              	CPP:
 1615 0b40 41F8045D 		_PUSH
 1616 0b44 03F14005 		ADD	R5,R3,#USER_CTOP_OFS
 1617 0b48 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 32


 1618              	
 1619              	//   FCP ( -- a )
 1620              	//  Point ot top of Forth system dictionary
 1621 0b4a 3AFFFF17 		.word _CP+MAPOFFSET
 1622 0b4e 03       	_FCP: .byte 3            
 1623 0b4f 464350   		.ascii "FCP"
 1624 0b52 00BF     		.p2align 2 
 1625              	FCP: 
 1626 0b54 41F8045D 		_PUSH 
 1627 0b58 03F13C05 		ADD R5,R3,#FORTH_CTOP_OFS 
 1628 0b5c 7047     		_NEXT 
 1629              	
 1630              	//    LAST	( -- a )
 1631              	// 	Point to the last name in the name dictionary.
 1632              	
 1633 0b5e 4EFFFF17 		.word	_FCP+MAPOFFSET
 1634 0b62 04       	_LAST:	.byte   4
 1635 0b63 4C415354 		.ascii "LAST"
 1636 0b67 00       		.p2align 2 	
 1637              	LAST:
 1638 0b68 41F8045D 		_PUSH
 1639 0b6c 03F14405 		ADD	R5,R3,#LASTN_OFS
 1640 0b70 7047     		_NEXT
 1641              	
 1642              	/***********************
 1643              		system constants 
 1644              	***********************/
 1645              	
 1646              	//	USER_BEGIN ( -- a )
 1647              	//  where user area begin in RAM
 1648 0b72 62FFFF17 		.word _LAST+MAPOFFSET
 1649 0b76 0A       	_USER_BGN: .byte 10
 1650 0b77 55534552 		.ascii "USER_BEGIN"
 1650      5F424547 
 1650      494E
 1651 0b81 0000BF   		.p2align 2
 1652              	USER_BEGIN:
 1653 0b84 41F8045D 		_PUSH 
 1654 0b88 004D     		ldr r5,USR_BGN_ADR 
 1655 0b8a 7047     		_NEXT 
 1656              	USR_BGN_ADR:
 1657 0b8c 481B0018 	.word CTOP+MAPOFFSET 
 1658              	
 1659              	//  USER_END ( -- a )
 1660              	//  where user area end in RAM 
 1661 0b90 76FFFF17 		.word _USER_BGN+MAPOFFSET
 1662 0b94 08       	_USER_END: .byte 8 
 1663 0b95 55534552 		.ascii "USER_END" 
 1663      5F454E44 
 1664 0b9d 0000BF   		.p2align 2 
 1665              	USER_END:
 1666 0ba0 41F8045D 		_PUSH 
 1667 0ba4 4FF49C45 		mov r5,#DEND&0xffff
 1668 0ba8 C2F20005 		movt r5,#DEND>>16 
 1669 0bac 7047     		_NEXT 
 1670              	
 1671              	//  USER_IMG ( -- a )
ARM GAS  stm32eforth.s 			page 33


 1672              	//  where user image is saved in FLASH
 1673 0bae 94FFFF17 		.word _USER_END+MAPOFFSET
 1674 0bb2 08       	_USER_IMG: .byte 8
 1675 0bb3 55534552 		.ascii "USER_IMG"
 1675      5F494D47 
 1676 0bbb 00       		.p2align 2 
 1677              	USER_IMG:
 1678 0bbc 41F8045D 		_PUSH
 1679 0bc0 004D     		ldr r5,USR_IMG_ADR   
 1680 0bc2 7047     		_NEXT 
 1681              	USR_IMG_ADR:
 1682 0bc4 00280000 		.word USER 
 1683              	
 1684              	// **************************************************************************
 1685              	//  Common functions
 1686              	
 1687              	//    WITHIN	( u ul uh -- t )
 1688              	// 	Return true if u is within the range of ul and uh.
 1689              	
 1690 0bc8 B2FFFF17 		.word	_USER_IMG+MAPOFFSET
 1691 0bcc 06       	_WITHI:	.byte   6
 1692 0bcd 57495448 		.ascii "WITHIN"
 1692      494E
 1693 0bd3 00       		.p2align 2 	
 1694              	WITHI:
 1695 0bd4 42F804ED 		_NEST
 1696 0bd8 FFF76EFD 		BL	OVER
 1697 0bdc FFF7C6FD 		BL	SUBB
 1698 0be0 FFF73CFD 		BL	TOR
 1699 0be4 FFF7C2FD 		BL	SUBB
 1700 0be8 FFF726FD 		BL	RFROM
 1701 0bec FFF7A6FE 		BL	ULESS
 1702 0bf0 52F804FB 		_UNNEST
 1703              	
 1704              	//  Divide
 1705              	
 1706              	//    UM/MOD	( udl udh u -- ur uq )
 1707              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1708              	
 1709 0bf4 CCFFFF17 		.word	_WITHI+MAPOFFSET
 1710 0bf8 06       	_UMMOD:	.byte   6
 1711 0bf9 554D2F4D 		.ascii "UM/MOD"
 1711      4F44
 1712 0bff 00       		.p2align 2 	
 1713              	UMMOD:
 1714 0c00 4FF00107 		MOV	R7,#1
 1715 0c04 51F8044B 		LDR	R4,[R1],#4
 1716 0c08 0E68     		LDR	R6,[R1]
 1717              	UMMOD0:
 1718 0c0a B619     		ADDS	R6,R6,R6
 1719 0c0c 6441     		ADCS	R4,R4,R4
 1720 0c0e 04D3     		BCC	UMMOD1
 1721 0c10 A4EB0504 		SUB	R4,R4,R5
 1722 0c14 06F10106 		ADD	R6,R6,#1
 1723 0c18 04E0     		B UMMOD2
 1724              	UMMOD1:
 1725 0c1a 641B     		SUBS	R4,R4,R5 
ARM GAS  stm32eforth.s 			page 34


 1726 0c1c 28BF     		IT CS 
 1727 0c1e 0136     		ADDCS	R6,R6,#1
 1728 0c20 00D2     		BCS	UMMOD2
 1729 0c22 2C44     		ADD	R4,R4,R5
 1730              	UMMOD2:
 1731 0c24 FF19     		ADDS	R7,R7,R7
 1732 0c26 F0D3     		BCC	UMMOD0
 1733 0c28 3546     		MOV	R5,R6
 1734 0c2a 0C60     		STR	R4,[R1]
 1735 0c2c 7047     		_NEXT
 1736              	
 1737              	//    M/MOD	( d n -- r q )
 1738              	// 	Signed floored divide of double by single. Return mod and quotient.
 1739              	
 1740 0c2e F8FFFF17 		.word	_UMMOD+MAPOFFSET
 1741 0c32 05       	_MSMOD:	.byte  5
 1742 0c33 4D2F4D4F 		.ascii "M/MOD"
 1742      44
 1743              		.p2align 2 	
 1744              	MSMOD:	
 1745 0c38 42F804ED 		_NEST
 1746 0c3c FFF72AFD 		BL	DUPP
 1747 0c40 FFF742FD 		BL	ZLESS
 1748 0c44 FFF726FD 		BL	DUPP
 1749 0c48 FFF708FD 		BL	TOR
 1750 0c4c FFF7B8FC 		BL	QBRAN
 1751 0c50 64000018 		.word	MMOD1+MAPOFFSET
 1752 0c54 FFF74AFE 		BL	NEGAT
 1753 0c58 FFF700FD 		BL	TOR
 1754 0c5c FFF7D6FE 		BL	DNEGA
 1755 0c60 FFF7EAFC 		BL	RFROM
 1756              	MMOD1:
 1757 0c64 FFF7FAFC 	  BL	TOR
 1758 0c68 FFF714FD 		BL	DUPP
 1759 0c6c FFF72CFD 		BL	ZLESS
 1760 0c70 FFF7A6FC 		BL	QBRAN
 1761 0c74 80000018 		.word	MMOD2+MAPOFFSET
 1762 0c78 FFF7E8FC 		BL	RAT
 1763 0c7c FFF76EFD 		BL	PLUS
 1764              	MMOD2:
 1765 0c80 FFF7DAFC 	  BL	RFROM
 1766 0c84 FFF7BCFF 		BL	UMMOD
 1767 0c88 FFF7D6FC 		BL	RFROM
 1768 0c8c FFF798FC 		BL	QBRAN
 1769 0c90 A0000018 		.word	MMOD3+MAPOFFSET
 1770 0c94 FFF706FD 		BL	SWAP
 1771 0c98 FFF728FE 		BL	NEGAT
 1772 0c9c FFF702FD 		BL	SWAP
 1773              	MMOD3:   
 1774 0ca0 52F804FB 		_UNNEST
 1775              	
 1776              	//    /MOD	( n n -- r q )
 1777              	// 	Signed divide. Return mod and quotient.
 1778              	
 1779 0ca4 32000018 		.word	_MSMOD+MAPOFFSET
 1780 0ca8 04       	_SLMOD:	.byte   4
 1781 0ca9 2F4D4F44 		.ascii "/MOD"
ARM GAS  stm32eforth.s 			page 35


 1782 0cad 0000BF   		.p2align 2 	
 1783              	SLMOD:
 1784 0cb0 42F804ED 		_NEST
 1785 0cb4 FFF700FD 		BL	OVER
 1786 0cb8 FFF706FD 		BL	ZLESS
 1787 0cbc FFF7F2FC 		BL	SWAP
 1788 0cc0 FFF7BAFF 		BL	MSMOD
 1789 0cc4 52F804FB 		_UNNEST
 1790              	
 1791              	//    MOD	 ( n n -- r )
 1792              	// 	Signed divide. Return mod only.
 1793              	
 1794 0cc8 A8000018 		.word	_SLMOD+MAPOFFSET
 1795 0ccc 03       	_MODD:	.byte  3
 1796 0ccd 4D4F44   		.ascii "MOD"
 1797              		.p2align 2 	
 1798              	MODD:
 1799 0cd0 42F804ED 		_NEST
 1800 0cd4 FFF7ECFF 		BL	SLMOD
 1801 0cd8 FFF7D4FC 		BL	DROP
 1802 0cdc 52F804FB 		_UNNEST
 1803              	
 1804              	//    /	   ( n n -- q )
 1805              	// 	Signed divide. Return quotient only.
 1806              	
 1807 0ce0 CC000018 		.word	_MODD+MAPOFFSET
 1808 0ce4 01       	_SLASH:	.byte  1
 1809 0ce5 2F       		.ascii "/"
 1810 0ce6 00BF     		.p2align 2 	
 1811              	SLASH:
 1812 0ce8 42F804ED 		_NEST
 1813 0cec FFF7E0FF 		BL	SLMOD
 1814 0cf0 FFF7D8FC 		BL	SWAP
 1815 0cf4 FFF7C6FC 		BL	DROP
 1816 0cf8 52F804FB 		_UNNEST
 1817              	
 1818              	//    */MOD	( n1 n2 n3 -- r q )
 1819              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1820              	
 1821 0cfc E4000018 		.word	_SLASH+MAPOFFSET
 1822 0d00 05       	_SSMOD:	.byte  5
 1823 0d01 2A2F4D4F 		.ascii "*/MOD"
 1823      44
 1824 0d06 00BF     		.p2align 2 	
 1825              	SSMOD:
 1826 0d08 42F804ED 		_NEST
 1827 0d0c FFF7A6FC 		BL	TOR
 1828 0d10 FFF748FD 		BL	MSTAR
 1829 0d14 FFF790FC 		BL	RFROM
 1830 0d18 FFF78EFF 		BL	MSMOD
 1831 0d1c 52F804FB 		_UNNEST
 1832              	
 1833              	//    */	  ( n1 n2 n3 -- q )
 1834              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1835              	
 1836 0d20 00010018 		.word	_SSMOD+MAPOFFSET
 1837 0d24 02       	_STASL:	.byte  2
ARM GAS  stm32eforth.s 			page 36


 1838 0d25 2A2F     		.ascii "*/"
 1839 0d27 00       		.p2align 2 	
 1840              	STASL:
 1841 0d28 42F804ED 		_NEST
 1842 0d2c FFF7ECFF 		BL	SSMOD
 1843 0d30 FFF7B8FC 		BL	SWAP
 1844 0d34 FFF7A6FC 		BL	DROP
 1845 0d38 52F804FB 		_UNNEST
 1846              	
 1847              	// **************************************************************************
 1848              	//  Miscellaneous
 1849              	
 1850              	//    ALIGNED	( b -- a )
 1851              	// 	Align address to the cell boundary.
 1852              	
 1853 0d3c 24010018 		.word	_STASL+MAPOFFSET
 1854 0d40 07       	_ALGND:	.byte   7
 1855 0d41 414C4947 		.ascii "ALIGNED"
 1855      4E4544
 1856              		.p2align 2 	
 1857              	ALGND:
 1858 0d48 05F10305 		ADD	R5,R5,#3
 1859 0d4c 6FF00304 		MVN	R4,#3
 1860 0d50 05EA0405 		AND	R5,R5,R4
 1861 0d54 7047     		_NEXT
 1862              	
 1863              	//    >CHAR	( c -- c )
 1864              	// 	Filter non-printing characters.
 1865              	
 1866 0d56 40010018 		.word	_ALGND+MAPOFFSET
 1867 0d5a 05       	_TCHAR:	.byte  5
 1868 0d5b 3E434841 		.ascii ">CHAR"
 1868      52
 1869              		.p2align 2 	
 1870              	TCHAR:
 1871 0d60 42F804ED 		_NEST
 1872 0d64 FFF709FC 		_DOLIT
 1873 0d68 7F000000 		.word	0x7F
 1874 0d6c FFF7B6FC 		BL	ANDD
 1875 0d70 FFF790FC 		BL	DUPP	// mask msb
 1876 0d74 FFF750FD 		BL	BLANK
 1877 0d78 FFF7FFFB 		_DOLIT
 1878 0d7c 7F000000 		.word	127
 1879 0d80 FFF728FF 		BL	WITHI	// check for printable
 1880 0d84 FFF7A8FD 		BL	INVER
 1881 0d88 FFF71AFC 		BL	QBRAN
 1882 0d8c 9C010018 		.word	TCHA1+MAPOFFSET
 1883 0d90 FFF778FC 		BL	DROP
 1884 0d94 FFF7F1FB 		_DOLIT
 1885 0d98 5F000000 		.word	'_'	// replace non-printables
 1886              	TCHA1:
 1887 0d9c 52F804FB 		  _UNNEST
 1888              	
 1889              	//    DEPTH	( -- n )
 1890              	// 	Return the depth of the data stack.
 1891              	
 1892 0da0 5A010018 		.word	_TCHAR+MAPOFFSET
ARM GAS  stm32eforth.s 			page 37


 1893 0da4 05       	_DEPTH:	.byte  5
 1894 0da5 44455054 		.ascii "DEPTH"
 1894      48
 1895 0daa 00BF     		.p2align 2 	
 1896              	DEPTH:
 1897 0dac 41F8045D 		_PUSH
 1898 0db0 44F68465 		MOVW	R5,#SPP&0xffff+4 
 1899 0db4 C2F20005 	 	MOVT	R5,#SPP>>16 
 1900 0db8 A5EB0105 		SUB	R5,R5,R1
 1901 0dbc 4FEAA505 		ASR	R5,R5,#2
 1902 0dc0 A5F10105 		SUB	R5,R5,#1
 1903 0dc4 7047     		_NEXT
 1904              	
 1905              	//    PICK	( ... +n -- ... w )
 1906              	// 	Copy the nth stack item to tos.
 1907              	
 1908 0dc6 A4010018 		.word	_DEPTH+MAPOFFSET
 1909 0dca 04       	_PICK:	.byte  4
 1910 0dcb 5049434B 		.ascii "PICK"
 1911 0dcf 00       		.p2align 2 	
 1912              	PICK:
 1913 0dd0 42F804ED 		_NEST
 1914 0dd4 FFF7F0FC 		BL	ONEP
 1915 0dd8 FFF728FD 		BL	CELLS
 1916 0ddc FFF748FC 		BL	SPAT
 1917 0de0 FFF7BCFC 		BL	PLUS
 1918 0de4 FFF712FC 		BL	AT
 1919 0de8 52F804FB 		_UNNEST
 1920              	
 1921              	// **************************************************************************
 1922              	//  Memory access
 1923              	
 1924              	//    HERE	( -- a )
 1925              	// 	Return the top of the code dictionary.
 1926              	
 1927 0dec CA010018 		.word	_PICK+MAPOFFSET
 1928 0df0 04       	_HERE:	.byte  4
 1929 0df1 48455245 		.ascii "HERE"
 1930 0df5 0000BF   		.p2align 2 	
 1931              	HERE:
 1932 0df8 42F804ED 		_NEST
 1933 0dfc FFF7A0FE 		BL	CPP
 1934 0e00 FFF704FC 		BL	AT
 1935 0e04 52F804FB 		_UNNEST
 1936              		
 1937              	//    PAD	 ( -- a )
 1938              	// 	Return the address of a temporary buffer.
 1939              	
 1940 0e08 F0010018 		.word	_HERE+MAPOFFSET
 1941 0e0c 03       	_PAD:	.byte  3
 1942 0e0d 504144   		.ascii "PAD"
 1943              		.p2align 2 	
 1944              	PAD:
 1945 0e10 42F804ED 		_NEST
 1946 0e14 FFF7F0FF 		BL	HERE
 1947 0e18 05F15005 		ADD	R5,R5,#80
 1948 0e1c 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 38


 1949              	
 1950              	//    TIB	 ( -- a )
 1951              	// 	Return the address of the terminal input buffer.
 1952              	
 1953 0e20 0C020018 		.word	_PAD+MAPOFFSET
 1954 0e24 03       	_TIB:	.byte  3
 1955 0e25 544942   		.ascii "TIB"
 1956              		.p2align 2 	
 1957              	TIB:
 1958 0e28 41F8045D 		_PUSH
 1959 0e2c DD6A     		ldr r5,[r3,#TIB_OFS]
 1960 0e2e 7047     		_NEXT
 1961              	
 1962              	//    @EXECUTE	( a -- )
 1963              	// 	Execute vector stored in address a.
 1964              	
 1965 0e30 24020018 		.word	_TIB+MAPOFFSET
 1966 0e34 08       	_ATEXE:	.byte   8
 1967 0e35 40455845 		.ascii "@EXECUTE"
 1967      43555445 
 1968 0e3d 0000BF   		.p2align 2 	
 1969              	ATEXE:
 1970 0e40 2C00     		MOVS	R4,R5
 1971 0e42 51F8045B 		_POP
 1972 0e46 2468     		LDR	R4,[R4]
 1973 0e48 44F00104 		ORR	R4,R4,#1
 1974 0e4c 18BF     	    IT NE 
 1975 0e4e 2047     		BXNE	R4
 1976 0e50 7047     		_NEXT
 1977              	
 1978              	//    CMOVE	( b1 b2 u -- )
 1979              	// 	Copy u bytes from b1 to b2.
 1980              	
 1981 0e52 34020018 		.word	_ATEXE+MAPOFFSET
 1982 0e56 05       	_CMOVE:	.byte   5
 1983 0e57 434D4F56 		.ascii "CMOVE"
 1983      45
 1984              		.p2align 2 	
 1985              	CMOVE:
 1986 0e5c 51F8046B 		LDR	R6,[R1],#4
 1987 0e60 51F8047B 		LDR	R7,[R1],#4
 1988 0e64 03E0     		B CMOV1
 1989              	CMOV0:
 1990 0e66 17F8014B 		LDRB	R4,[R7],#1
 1991 0e6a 06F8014B 		STRB	R4,[R6],#1
 1992              	CMOV1:
 1993 0e6e 2D00     		MOVS	R5,R5
 1994 0e70 02D0     		BEQ	CMOV2
 1995 0e72 A5F10105 		SUB	R5,R5,#1
 1996 0e76 F6E7     		B CMOV0
 1997              	CMOV2:
 1998 0e78 51F8045B 		_POP
 1999 0e7c 7047     		_NEXT
 2000              	
 2001              	//    MOVE	( a1 a2 u -- )
 2002              	// 	Copy u words from a1 to a2.
 2003              	
ARM GAS  stm32eforth.s 			page 39


 2004 0e7e 56020018 		.word	_CMOVE+MAPOFFSET
 2005 0e82 04       	_MOVE:	.byte   4
 2006 0e83 4D4F5645 		.ascii "MOVE"
 2007 0e87 00       		.p2align 2 	
 2008              	MOVE:
 2009 0e88 25F00305 		AND	R5,R5,#-4
 2010 0e8c 51F8046B 		LDR	R6,[R1],#4
 2011 0e90 51F8047B 		LDR	R7,[R1],#4
 2012 0e94 03E0     		B MOVE1
 2013              	MOVE0:
 2014 0e96 57F8044B 		LDR	R4,[R7],#4
 2015 0e9a 46F8044B 		STR	R4,[R6],#4
 2016              	MOVE1:
 2017 0e9e 2D00     		MOVS	R5,R5
 2018 0ea0 02D0     		BEQ	MOVE2
 2019 0ea2 A5F10405 		SUB	R5,R5,#4
 2020 0ea6 F6E7     		B MOVE0
 2021              	MOVE2:
 2022 0ea8 51F8045B 		_POP
 2023 0eac 7047     		_NEXT
 2024              	
 2025              	//    FILL	( b u c -- )
 2026              	// 	Fill u bytes of character c to area beginning at b.
 2027              	
 2028 0eae 82020018 		.word	_MOVE+MAPOFFSET
 2029 0eb2 04       	_FILL:	.byte   4
 2030 0eb3 46494C4C 		.ascii "FILL"
 2031 0eb7 00       		.p2align 2 	
 2032              	FILL:
 2033 0eb8 51F8046B 		LDR	R6,[R1],#4
 2034 0ebc 51F8047B 		LDR	R7,[R1],#4
 2035              	FILL0:
 2036 0ec0 00E0     		B FILL1
 2037 0ec2 2D46     		MOV	R5,R5
 2038              	FILL1:
 2039 0ec4 07F8015B 		STRB	R5,[R7],#1
 2040 0ec8 3600     		MOVS	R6,R6
 2041 0eca 02D0     		BEQ	FILL2
 2042 0ecc A6F10106 		SUB	R6,R6,#1
 2043 0ed0 F6E7     		B FILL0
 2044              	FILL2:
 2045 0ed2 51F8045B 		_POP
 2046 0ed6 7047     		_NEXT
 2047              	
 2048              	//    PACK$	( b u a -- a )
 2049              	// 	Build a counted word with u characters from b. Null fill.
 2050              	
 2051 0ed8 B2020018 		.word	_FILL+MAPOFFSET
 2052 0edc 05       	_PACKS:	.byte  5
 2053 0edd 5041434B 		.ascii "PACK$$"
 2053      2424
 2054 0ee3 00       		.p2align 2 	
 2055              	PACKS:
 2056 0ee4 42F804ED 		_NEST
 2057 0ee8 FFF72EFF 		BL	ALGND
 2058 0eec FFF7D2FB 		BL	DUPP
 2059 0ef0 FFF7B4FB 		BL	TOR			// strings only on cell boundary
ARM GAS  stm32eforth.s 			page 40


 2060 0ef4 FFF7E0FB 		BL	OVER
 2061 0ef8 FFF730FC 		BL	PLUS
 2062 0efc FFF75CFC 		BL	ONEP
 2063 0f00 FFF73BFB 		_DOLIT
 2064 0f04 FCFFFFFF 		.word	0xFFFFFFFC
 2065 0f08 FFF7E8FB 		BL	ANDD			// count mod cell
 2066 0f0c FFF735FB 		_DOLIT
 2067 0f10 00000000 		.word	0
 2068 0f14 FFF7C6FB 		BL	SWAP
 2069 0f18 FFF76EFB 		BL	STORE			// null fill cell
 2070 0f1c FFF796FB 		BL	RAT
 2071 0f20 FFF7C2FC 		BL	DDUP
 2072 0f24 FFF778FB 		BL	CSTOR
 2073 0f28 FFF746FC 		BL	ONEP			// save count
 2074 0f2c FFF7BAFB 		BL	SWAP
 2075 0f30 FFF794FF 		BL	CMOVE
 2076 0f34 FFF780FB 		BL	RFROM
 2077 0f38 52F804FB 		_UNNEST   			// move string
 2078              	
 2079              	// **************************************************************************
 2080              	//  Numeric output, single precision
 2081              	
 2082              	//    DIGIT	( u -- c )
 2083              	// 	Convert digit u to a character.
 2084              	
 2085 0f3c DC020018 		.word	_PACKS+MAPOFFSET
 2086 0f40 05       	_DIGIT:	.byte  5
 2087 0f41 44494749 		.ascii "DIGIT"
 2087      54
 2088 0f46 00BF     		.p2align 2 	
 2089              	DIGIT:
 2090 0f48 42F804ED 		_NEST
 2091 0f4c FFF715FB 		_DOLIT
 2092 0f50 09000000 		.word	9
 2093 0f54 FFF7B0FB 		BL	OVER
 2094 0f58 FFF7FCFC 		BL	LESS
 2095 0f5c 05F00705 		AND	R5,R5,#7
 2096 0f60 FFF7FCFB 		BL	PLUS
 2097 0f64 05F13005 		ADD	R5,R5,#'0'
 2098 0f68 52F804FB 		_UNNEST
 2099              	
 2100              	//    EXTRACT	( n base -- n c )
 2101              	// 	Extract the least significant digit from n.
 2102              	
 2103 0f6c 40030018 		.word	_DIGIT+MAPOFFSET
 2104 0f70 07       	_EXTRC:	.byte  7
 2105 0f71 45585452 		.ascii "EXTRACT"
 2105      414354
 2106              		.p2align 2 	
 2107              	EXTRC:
 2108 0f78 42F804ED 		_NEST
 2109 0f7c FFF7FDFA 		_DOLIT
 2110 0f80 00000000 		.word	0
 2111 0f84 FFF78EFB 		BL	SWAP
 2112 0f88 FFF73AFE 		BL	UMMOD
 2113 0f8c FFF78AFB 		BL	SWAP
 2114 0f90 FFF7DAFF 		BL	DIGIT
ARM GAS  stm32eforth.s 			page 41


 2115 0f94 52F804FB 		_UNNEST
 2116              	
 2117              	//    <#	  ( -- )
 2118              	// 	Initiate the numeric output process.
 2119              	
 2120 0f98 70030018 		.word	_EXTRC+MAPOFFSET
 2121 0f9c 02       	_BDIGS:	.byte  2
 2122 0f9d 3C23     		.ascii "<#"
 2123 0f9f 00       		.p2align 2 	
 2124              	BDIGS:
 2125 0fa0 42F804ED 		_NEST
 2126 0fa4 FFF734FF 		BL	PAD
 2127 0fa8 FFF7B4FD 		BL	HLD
 2128 0fac FFF724FB 		BL	STORE
 2129 0fb0 52F804FB 		_UNNEST
 2130              	
 2131              	//    HOLD	( c -- )
 2132              	// 	Insert a character into the numeric output string.
 2133              	
 2134 0fb4 9C030018 		.word	_BDIGS+MAPOFFSET
 2135 0fb8 04       	_HOLD:	.byte  4
 2136 0fb9 484F4C44 		.ascii "HOLD"
 2137 0fbd 0000BF   		.p2align 2 	
 2138              	HOLD:
 2139 0fc0 42F804ED 		_NEST
 2140 0fc4 FFF7A6FD 		BL	HLD
 2141 0fc8 FFF720FB 		BL	AT
 2142 0fcc FFF7FCFB 		BL	ONEM
 2143 0fd0 FFF760FB 		BL	DUPP
 2144 0fd4 FFF79EFD 		BL	HLD
 2145 0fd8 FFF70EFB 		BL	STORE
 2146 0fdc FFF71CFB 		BL	CSTOR
 2147 0fe0 52F804FB 		_UNNEST
 2148              	
 2149              	//    #	   ( u -- u )
 2150              	// 	Extract one digit from u and append the digit to output string.
 2151              	
 2152 0fe4 B8030018 		.word	_HOLD+MAPOFFSET
 2153 0fe8 01       	_DIG:	.byte  1
 2154 0fe9 23       		.ascii "#"
 2155 0fea 00BF     		.p2align 2 	
 2156              	DIG:
 2157 0fec 42F804ED 		_NEST
 2158 0ff0 FFF758FD 		BL	BASE
 2159 0ff4 FFF70AFB 		BL	AT
 2160 0ff8 FFF7BEFF 		BL	EXTRC
 2161 0ffc FFF7E0FF 		BL	HOLD
 2162 1000 52F804FB 		_UNNEST
 2163              	
 2164              	//    #S	  ( u -- 0 )
 2165              	// 	Convert u until all digits are added to the output string.
 2166              	
 2167 1004 E8030018 		.word	_DIG+MAPOFFSET
 2168 1008 02       	_DIGS:	.byte  2
 2169 1009 2353     		.ascii "#S"
 2170 100b 00       		.p2align 2 	
 2171              	DIGS:
ARM GAS  stm32eforth.s 			page 42


 2172 100c 42F804ED 		_NEST
 2173              	DIGS1:
 2174 1010 FFF7ECFF 	    BL	DIG
 2175 1014 FFF73EFB 		BL	DUPP
 2176 1018 FFF7D2FA 		BL	QBRAN
 2177 101c 22040018 		.word	DIGS2+MAPOFFSET
 2178 1020 F6E7     		B	DIGS1
 2179              	DIGS2:
 2180 1022 52F804FB 		  _UNNEST
 2181              	
 2182              	//    SIGN	( n -- )
 2183              	// 	Add a minus sign to the numeric output string.
 2184              	
 2185 1026 08040018 		.word	_DIGS+MAPOFFSET
 2186 102a 04       	_SIGN:	.byte  4
 2187 102b 5349474E 		.ascii "SIGN"
 2188 102f 00       		.p2align 2 	
 2189              	SIGN:
 2190 1030 42F804ED 		_NEST
 2191 1034 FFF748FB 		BL	ZLESS
 2192 1038 FFF7C2FA 		BL	QBRAN
 2193 103c 4C040018 		.word	SIGN1+MAPOFFSET
 2194 1040 FFF79BFA 		_DOLIT
 2195 1044 2D000000 		.word	'-'
 2196 1048 FFF7BAFF 		BL	HOLD
 2197              	SIGN1:
 2198 104c 52F804FB 		  _UNNEST
 2199              	
 2200              	//    #>	  ( w -- b u )
 2201              	// 	Prepare the outputDCB to be TYPE'd.
 2202              	
 2203 1050 2A040018 		.word	_SIGN+MAPOFFSET
 2204 1054 02       	_EDIGS:	.byte  2
 2205 1055 233E     		.ascii "#>"
 2206 1057 00       		.p2align 2 	
 2207              	EDIGS:
 2208 1058 42F804ED 		_NEST
 2209 105c FFF712FB 		BL	DROP
 2210 1060 FFF758FD 		BL	HLD
 2211 1064 FFF7D2FA 		BL	AT
 2212 1068 FFF7D2FE 		BL	PAD
 2213 106c FFF724FB 		BL	OVER
 2214 1070 FFF77CFB 		BL	SUBB
 2215 1074 52F804FB 		_UNNEST
 2216              	
 2217              	//    str	 ( n -- b u )
 2218              	// 	Convert a signed integer to a numeric string.
 2219              	
 2220              	// 	.word	_EDIGS+MAPOFFSET
 2221              	// _STRR	.byte  3
 2222              	// 	.ascii "str"
 2223              	// 	.p2align 2 	
 2224              	STRR:
 2225 1078 42F804ED 		_NEST
 2226 107c FFF70AFB 		BL	DUPP
 2227 1080 FFF7ECFA 		BL	TOR
 2228 1084 FFF73AFC 		BL	ABSS
ARM GAS  stm32eforth.s 			page 43


 2229 1088 FFF78AFF 		BL	BDIGS
 2230 108c FFF7BEFF 		BL	DIGS
 2231 1090 FFF7D2FA 		BL	RFROM
 2232 1094 FFF7CCFF 		BL	SIGN
 2233 1098 FFF7DEFF 		BL	EDIGS
 2234 109c 52F804FB 		_UNNEST
 2235              	
 2236              	//    HEX	 ( -- )
 2237              	// 	Use radix 16 as base for numeric conversions.
 2238              	
 2239 10a0 54040018 		.word	_EDIGS+MAPOFFSET
 2240 10a4 03       	_HEX:	.byte  3
 2241 10a5 484558   		.ascii "HEX"
 2242              		.p2align 2 	
 2243              	HEX:
 2244 10a8 42F804ED 		_NEST
 2245 10ac FFF765FA 		_DOLIT
 2246 10b0 10000000 		.word	16
 2247 10b4 FFF7F6FC 		BL	BASE
 2248 10b8 FFF79EFA 		BL	STORE
 2249 10bc 52F804FB 		_UNNEST
 2250              	
 2251              	//    DECIMAL	( -- )
 2252              	// 	Use radix 10 as base for numeric conversions.
 2253              	
 2254 10c0 A4040018 		.word	_HEX+MAPOFFSET
 2255 10c4 07       	_DECIM:	.byte  7
 2256 10c5 44454349 		.ascii "DECIMAL"
 2256      4D414C
 2257              		.p2align 2 	
 2258              	DECIM:
 2259 10cc 42F804ED 		_NEST
 2260 10d0 FFF753FA 		_DOLIT
 2261 10d4 0A000000 		.word	10
 2262 10d8 FFF7E4FC 		BL	BASE
 2263 10dc FFF78CFA 		BL	STORE
 2264 10e0 52F804FB 		_UNNEST
 2265              	
 2266              	// **************************************************************************
 2267              	//  Numeric input, single precision
 2268              	
 2269              	//    DIGIT?	( c base -- u t )
 2270              	// 	Convert a character to its numeric value. A flag indicates success.
 2271              	
 2272 10e4 C4040018 		.word	_DECIM+MAPOFFSET
 2273 10e8 06       	_DIGTQ:	.byte  6
 2274 10e9 44494749 		.ascii "DIGIT?"
 2274      543F
 2275 10ef 00       		.p2align 2 	
 2276              	DIGTQ:
 2277 10f0 42F804ED 		_NEST
 2278 10f4 FFF7B2FA 		BL	TOR
 2279 10f8 FFF73FFA 		_DOLIT
 2280 10fc 30000000 		.word	'0'
 2281 1100 FFF734FB 		BL	SUBB
 2282 1104 FFF739FA 		_DOLIT
 2283 1108 09000000 		.word	9
ARM GAS  stm32eforth.s 			page 44


 2284 110c FFF7D4FA 		BL	OVER
 2285 1110 FFF720FC 		BL	LESS
 2286 1114 FFF754FA 		BL	QBRAN
 2287 1118 3C050018 		.word	DGTQ1+MAPOFFSET
 2288 111c FFF72DFA 		_DOLIT
 2289 1120 07000000 		.word	7
 2290 1124 FFF722FB 		BL	SUBB
 2291 1128 FFF7B4FA 		BL	DUPP
 2292 112c FFF725FA 		_DOLIT
 2293 1130 0A000000 		.word	10
 2294 1134 FFF70EFC 		BL	LESS
 2295 1138 FFF7DAFA 		BL	ORR
 2296              	DGTQ1:
 2297 113c FFF7AAFA 	  BL	DUPP
 2298 1140 FFF77AFA 		BL	RFROM
 2299 1144 FFF7FAFB 		BL	ULESS
 2300 1148 52F804FB 		_UNNEST
 2301              	
 2302              	//    NUMBER?	( a -- n T | a F )
 2303              	// 	Convert a number word to integer. Push a flag on tos.
 2304              	
 2305 114c E8040018 		.word	_DIGTQ+MAPOFFSET
 2306 1150 07       	_NUMBQ:	.byte  7
 2307 1151 4E554D42 		.ascii "NUMBER?"
 2307      45523F
 2308              		.p2align 2 	
 2309              	NUMBQ:
 2310 1158 42F804ED 		_NEST
 2311 115c FFF7A2FC 		BL	BASE
 2312 1160 FFF754FA 		BL	AT
 2313 1164 FFF77AFA 		BL	TOR
 2314 1168 FFF707FA 		_DOLIT
 2315 116c 00000000 		.word	0
 2316 1170 FFF7A2FA 		BL	OVER
 2317 1174 FFF73EFC 		BL	COUNT
 2318 1178 FFF79EFA 		BL	OVER
 2319 117c FFF756FA 		BL	CAT
 2320 1180 FFF7FBF9 		_DOLIT
 2321 1184 24000000 		.word	'$'
 2322 1188 FFF7CCFB 		BL	EQUAL
 2323 118c FFF718FA 		BL	QBRAN
 2324 1190 A8050018 		.word	NUMQ1+MAPOFFSET
 2325 1194 FFF788FF 		BL	HEX
 2326 1198 FFF784FA 		BL	SWAP
 2327 119c FFF70CFB 		BL	ONEP
 2328 11a0 FFF780FA 		BL	SWAP
 2329 11a4 FFF710FB 		BL	ONEM
 2330              	NUMQ1:
 2331 11a8 FFF786FA 		BL	OVER
 2332 11ac FFF73EFA 		BL	CAT
 2333 11b0 FFF7E3F9 		_DOLIT
 2334 11b4 2D000000 		.word	'-'
 2335 11b8 FFF7B4FB 		BL	EQUAL
 2336 11bc FFF74EFA 		BL	TOR
 2337 11c0 FFF770FA 		BL	SWAP
 2338 11c4 FFF742FA 		BL	RAT
 2339 11c8 FFF7D0FA 		BL	SUBB
ARM GAS  stm32eforth.s 			page 45


 2340 11cc FFF76AFA 		BL	SWAP
 2341 11d0 FFF73CFA 		BL	RAT
 2342 11d4 FFF7C2FA 		BL	PLUS
 2343 11d8 FFF748FB 		BL	QDUP
 2344 11dc FFF7F0F9 		BL	QBRAN
 2345 11e0 6C060018 		.word	NUMQ6+MAPOFFSET
 2346 11e4 FFF7F0FA 		BL	ONEM
 2347 11e8 FFF738FA 		BL	TOR
 2348              	NUMQ2:
 2349 11ec FFF752FA 		BL	DUPP
 2350 11f0 FFF734FA 		BL	TOR
 2351 11f4 FFF71AFA 		BL	CAT
 2352 11f8 FFF754FC 		BL	BASE
 2353 11fc FFF706FA 		BL	AT
 2354 1200 FFF776FF 		BL	DIGTQ
 2355 1204 FFF7DCF9 		BL	QBRAN
 2356 1208 50060018 		.word	NUMQ4+MAPOFFSET
 2357 120c FFF74AFA 		BL	SWAP
 2358 1210 FFF748FC 		BL	BASE
 2359 1214 FFF7FAF9 		BL	AT
 2360 1218 FFF7B0FA 		BL	STAR
 2361 121c FFF79EFA 		BL	PLUS
 2362 1220 FFF70AFA 		BL	RFROM
 2363 1224 FFF7C8FA 		BL	ONEP
 2364 1228 FFF7BBF9 		BL	DONXT
 2365 122c EC050018 		.word	NUMQ2+MAPOFFSET
 2366 1230 FFF70CFA 		BL	RAT
 2367 1234 FFF736FA 		BL	SWAP
 2368 1238 FFF724FA 		BL	DROP
 2369 123c FFF7C0F9 		BL	QBRAN
 2370 1240 48060018 		.word	NUMQ3+MAPOFFSET
 2371 1244 FFF752FB 		BL	NEGAT
 2372              	NUMQ3:
 2373 1248 FFF72CFA 		BL	SWAP
 2374 124c 00F00CB8 		B.W	NUMQ5
 2375              	NUMQ4:
 2376 1250 FFF7F2F9 		BL	RFROM
 2377 1254 FFF7F0F9 		BL	RFROM
 2378 1258 FFF71CFB 		BL	DDROP
 2379 125c FFF71AFB 		BL	DDROP
 2380 1260 FFF78BF9 		_DOLIT
 2381 1264 00000000 		.word	0
 2382              	NUMQ5:
 2383 1268 FFF714FA 		BL	DUPP
 2384              	NUMQ6:
 2385 126c FFF7E4F9 		BL	RFROM
 2386 1270 FFF710FB 		BL	DDROP
 2387 1274 FFF7E0F9 		BL	RFROM
 2388 1278 FFF714FC 		BL	BASE
 2389 127c FFF7BCF9 		BL	STORE
 2390 1280 52F804FB 		_UNNEST
 2391              	
 2392              	// **************************************************************************
 2393              	//  Basic I/O
 2394              	
 2395              	//    KEY	 ( -- c )
 2396              	// 	Wait for and return an input character.
ARM GAS  stm32eforth.s 			page 46


 2397              	
 2398 1284 50050018 		.word	_NUMBQ+MAPOFFSET
 2399 1288 03       	_KEY:	.byte  3
 2400 1289 4B4559   		.ascii "KEY"
 2401              		.p2align 2 	
 2402              	KEY:
 2403 128c 42F804ED 		_NEST
 2404              	KEY1:
 2405 1290 FFF748F9 		BL	QRX
 2406 1294 FFF794F9 		BL	QBRAN
 2407 1298 90060018 		.word	KEY1+MAPOFFSET
 2408              	// CTRL-C reboot
 2409 129c FFF7FAF9 		BL DUPP 
 2410 12a0 FFF76BF9 		BL DOLIT 
 2411 12a4 03000000 		.word 3 
 2412 12a8 FFF73CFB 		BL EQUAL 
 2413 12ac FFF714FB 		BL INVER
 2414 12b0 FFF786F9 		BL QBRAN
 2415 12b4 A8F8FF17 		.word REBOOT+MAPOFFSET 
 2416 12b8 52F804FB 		_UNNEST
 2417              	
 2418              	//    SPACE	( -- )
 2419              	// 	Send the blank character to the output device.
 2420              	
 2421 12bc 88060018 		.word	_KEY+MAPOFFSET
 2422 12c0 05       	_SPACE:	.byte  5
 2423 12c1 53504143 		.ascii "SPACE"
 2423      45
 2424 12c6 00BF     		.p2align 2 	
 2425              	SPACE:
 2426 12c8 42F804ED 		_NEST
 2427 12cc FFF7A4FA 		BL	BLANK
 2428 12d0 FFF742F9 		BL	EMIT
 2429 12d4 52F804FB 		_UNNEST
 2430              	
 2431              	//    SPACES	( +n -- )
 2432              	// 	Send n spaces to the output device.
 2433              	
 2434 12d8 C0060018 		.word	_SPACE+MAPOFFSET
 2435 12dc 06       	_SPACS:	.byte  6
 2436 12dd 53504143 		.ascii "SPACES"
 2436      4553
 2437 12e3 00       		.p2align 2 	
 2438              	SPACS:
 2439 12e4 42F804ED 		_NEST
 2440 12e8 FFF747F9 		_DOLIT
 2441 12ec 00000000 		.word	0
 2442 12f0 FFF748FB 		BL	MAX
 2443 12f4 FFF7B2F9 		BL	TOR
 2444 12f8 00F002B8 		B.W	CHAR2
 2445              	CHAR1:
 2446 12fc FFF7E4FF 		BL	SPACE
 2447              	CHAR2:
 2448 1300 FFF74FF9 		BL	DONXT
 2449 1304 FC060018 		.word	CHAR1+MAPOFFSET
 2450 1308 52F804FB 		_UNNEST
 2451              	
ARM GAS  stm32eforth.s 			page 47


 2452              	//    TYPE	( b u -- )
 2453              	// 	Output u characters from b.
 2454              	
 2455 130c DC060018 		.word	_SPACS+MAPOFFSET
 2456 1310 04       	_TYPEE:	.byte	4
 2457 1311 54595045 		.ascii "TYPE"
 2458 1315 0000BF   		.p2align 2 	
 2459              	TYPEE:
 2460 1318 42F804ED 		_NEST
 2461 131c FFF79EF9 		BL  TOR   // ( a+1 -- R: u )
 2462 1320 05E0     		B	TYPE2
 2463              	TYPE1:  
 2464 1322 FFF767FB 		BL  COUNT
 2465 1326 FFF71BFD 		BL	TCHAR
 2466 132a FFF715F9 		BL	EMIT
 2467              	TYPE2:  
 2468 132e FFF738F9 		BL  DONXT  
 2469 1332 22070018 		.word	TYPE1+MAPOFFSET
 2470 1336 FFF7A5F9 		BL	DROP
 2471 133a 52F804FB 		_UNNEST
 2472              	
 2473              	//    CR	  ( -- )
 2474              	// 	Output a carriage return and a line feed.
 2475              	
 2476 133e 10070018 		.word	_TYPEE+MAPOFFSET
 2477 1342 02       	_CR:	.byte  2
 2478 1343 4352     		.ascii "CR"
 2479 1345 0000BF   		.p2align 2 	
 2480              	CR:
 2481 1348 42F804ED 		_NEST
 2482 134c FFF715F9 		_DOLIT
 2483 1350 0D000000 		.word	CRR
 2484 1354 FFF700F9 		BL	EMIT
 2485 1358 FFF70FF9 		_DOLIT
 2486 135c 0A000000 		.word	LF
 2487 1360 FFF7FAF8 		BL	EMIT
 2488 1364 52F804FB 		_UNNEST
 2489              	
 2490              	//    do_$	( -- a )
 2491              	// 	Return the address of a compiled string.
 2492              	//  adjust return address to skip over it.
 2493              	
 2494              	// 	.word	_CR+MAPOFFSET
 2495              	// _DOSTR	.byte  COMPO+3
 2496              	// 	.ascii "do$$"
 2497              	// 	.p2align 2 	
 2498              	DOSTR:
 2499 1368 42F804ED 		_NEST     
 2500              	/* compiled string address is 2 levels deep */
 2501 136c FFF764F9 		BL	RFROM	// { -- a1 }
 2502 1370 FFF762F9 		BL	RFROM	//  {a1 -- a1 a2 } b0 set
 2503 1374 FFF728FA 		BL	ONEM	//  clear b0
 2504 1378 FFF78CF9 		BL	DUPP	// {a1 a2 -- a1 a2 a2 }
 2505 137c FFF73AFB 		BL	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2506 1380 FFF7ECF9 		BL	PLUS	// { -- a1 a2 a2+1+c }
 2507 1384 FFF7E0FC 		BL	ALGND	//  end of string
 2508 1388 FFF716FA 		BL	ONEP	//  restore b0, this result in return address 2 level deep.
ARM GAS  stm32eforth.s 			page 48


 2509 138c FFF766F9 		BL	TOR		//  address after string { -- a1 a2 }
 2510 1390 FFF788F9 		BL	SWAP	//  count tugged
 2511 1394 FFF762F9 		BL	TOR     //  ( -- a2) is string address
 2512 1398 52F804FB 		_UNNEST
 2513              	
 2514              	//    $"|	( -- a )
 2515              	// 	Run time routine compiled by _". Return address of a compiled string.
 2516              	
 2517              	// 	.word	_DOSTR+MAPOFFSET
 2518              	// _STRQP	.byte  COMPO+3
 2519              	// 	.ascii "$\"|"
 2520              	// 	.p2align 2 	
 2521              	STRQP:
 2522 139c 42F804ED 		_NEST
 2523 13a0 FFF7E2FF 		BL	DOSTR
 2524 13a4 52F804FB 		_UNNEST			// force a call to dostr
 2525              	
 2526              	//    .$	( a -- )
 2527              	// 	Run time routine of ." . Output a compiled string.
 2528              	
 2529              	// 	.word	_STRQP+MAPOFFSET
 2530              	// _DOTST	.byte  COMPO+2
 2531              	// 	.ascii ".$$"
 2532              	// 	.p2align 2 	
 2533              	DOTST:
 2534 13a8 42F804ED 		_NEST
 2535 13ac FFF722FB 		BL	COUNT // ( -- a+1 c )
 2536 13b0 FFF7B2FF 		BL	TYPEE
 2537 13b4 52F804FB 		_UNNEST
 2538              	
 2539              	//    ."|	( -- )
 2540              	// 	Run time routine of ." . Output a compiled string.
 2541              	
 2542              	// 	.word	_DOTST+MAPOFFSET
 2543              	// _DOTQP	.byte  COMPO+3
 2544              	// 	.ascii ".""|"
 2545              	// 	.p2align 2 	
 2546              	DOTQP:
 2547 13b8 42F804ED 		_NEST
 2548 13bc FFF7D4FF 		BL	DOSTR
 2549 13c0 FFF7F2FF 		BL	DOTST
 2550 13c4 52F804FB 		_UNNEST
 2551              	
 2552              	//    .R	  ( n +n -- )
 2553              	// 	Display an integer in a field of n columns, right justified.
 2554              	
 2555 13c8 42070018 		.word	_CR+MAPOFFSET
 2556 13cc 02       	_DOTR:	.byte  2
 2557 13cd 2E52     		.ascii ".R"
 2558 13cf 00       		.p2align 2 	
 2559              	DOTR:
 2560 13d0 42F804ED 		_NEST
 2561 13d4 FFF742F9 		BL	TOR
 2562 13d8 FFF74EFE 		BL	STRR
 2563 13dc FFF72CF9 		BL	RFROM
 2564 13e0 FFF76AF9 		BL	OVER
 2565 13e4 FFF7C2F9 		BL	SUBB
ARM GAS  stm32eforth.s 			page 49


 2566 13e8 FFF77CFF 		BL	SPACS
 2567 13ec FFF794FF 		BL	TYPEE
 2568 13f0 52F804FB 		_UNNEST
 2569              	
 2570              	//    U.R	 ( u +n -- )
 2571              	// 	Display an unsigned integer in n column, right justified.
 2572              	
 2573 13f4 CC070018 		.word	_DOTR+MAPOFFSET
 2574 13f8 03       	_UDOTR:	.byte  3
 2575 13f9 552E52   		.ascii "U.R"
 2576              		.p2align 2 	
 2577              	UDOTR:
 2578 13fc 42F804ED 		_NEST
 2579 1400 FFF72CF9 		BL	TOR
 2580 1404 FFF7CCFD 		BL	BDIGS
 2581 1408 FFF700FE 		BL	DIGS
 2582 140c FFF724FE 		BL	EDIGS
 2583 1410 FFF712F9 		BL	RFROM
 2584 1414 FFF750F9 		BL	OVER
 2585 1418 FFF7A8F9 		BL	SUBB
 2586 141c FFF762FF 		BL	SPACS
 2587 1420 FFF77AFF 		BL	TYPEE
 2588 1424 52F804FB 		_UNNEST
 2589              	
 2590              	//    U.	  ( u -- )
 2591              	// 	Display an unsigned integer in free format.
 2592              	
 2593 1428 F8070018 		.word	_UDOTR+MAPOFFSET
 2594 142c 02       	_UDOT:	.byte  2
 2595 142d 552E     		.ascii "U."
 2596 142f 00       		.p2align 2 	
 2597              	UDOT:
 2598 1430 42F804ED 		_NEST
 2599 1434 FFF7B4FD 		BL	BDIGS
 2600 1438 FFF7E8FD 		BL	DIGS
 2601 143c FFF70CFE 		BL	EDIGS
 2602 1440 FFF742FF 		BL	SPACE
 2603 1444 FFF768FF 		BL	TYPEE
 2604 1448 52F804FB 		_UNNEST
 2605              	
 2606              	//    .	   ( w -- )
 2607              	// 	Display an integer in free format, preceeded by a space.
 2608              	
 2609 144c 2C080018 		.word	_UDOT+MAPOFFSET
 2610 1450 01       	_DOT:	.byte  1
 2611 1451 2E       		.ascii "."
 2612 1452 00BF     		.p2align 2 	
 2613              	DOT:
 2614 1454 42F804ED 		_NEST
 2615 1458 FFF724FB 		BL	BASE
 2616 145c FFF7D6F8 		BL	AT
 2617 1460 FFF78BF8 		_DOLIT
 2618 1464 0A000000 		.word	10
 2619 1468 FFF74CF9 		BL	XORR			// ?decimal
 2620 146c FFF7A8F8 		BL	QBRAN
 2621 1470 7C080018 		.word	DOT1+MAPOFFSET
 2622 1474 FFF7DCFF 		BL	UDOT
ARM GAS  stm32eforth.s 			page 50


 2623 1478 52F804FB 		_UNNEST			// no,display unsigned
 2624              	DOT1:
 2625 147c FFF7FCFD 	    BL	STRR
 2626 1480 FFF722FF 		BL	SPACE
 2627 1484 FFF748FF 		BL	TYPEE
 2628 1488 52F804FB 		_UNNEST			// yes, display signed
 2629              	
 2630              	//    ?	   ( a -- )
 2631              	// 	Display the contents in a memory cell.
 2632              	
 2633 148c 50080018 		.word	_DOT+MAPOFFSET
 2634 1490 01       	_QUEST:	.byte  1
 2635 1491 3F       		.ascii "?"
 2636 1492 00BF     		.p2align 2 	
 2637              	QUEST:
 2638 1494 42F804ED 		_NEST
 2639 1498 FFF7B8F8 		BL	AT
 2640 149c FFF7DAFF 		BL	DOT
 2641 14a0 52F804FB 		_UNNEST
 2642              	
 2643              	// **************************************************************************
 2644              	//  Parsing
 2645              	
 2646              	//    parse	( b u c -- b u delta //  string> )
 2647              	// 	Scan word delimited by c. Return found string and its offset.
 2648              	
 2649              	// 	.word	_QUEST+MAPOFFSET
 2650              	// _PARS	.byte  5
 2651              	// 	.ascii "parse"
 2652              	// 	.p2align 2 	
 2653              	PARS:
 2654 14a4 42F804ED 		_NEST
 2655 14a8 FFF701FB 		BL	TEMP
 2656 14ac FFF7A4F8 		BL	STORE
 2657 14b0 FFF702F9 		BL	OVER
 2658 14b4 FFF7D2F8 		BL	TOR
 2659 14b8 FFF7ECF8 		BL	DUPP
 2660 14bc FFF780F8 		BL	QBRAN
 2661 14c0 B2090018 		.word	PARS8+MAPOFFSET
 2662 14c4 FFF780F9 		BL	ONEM
 2663 14c8 FFF7F1FA 		BL	TEMP
 2664 14cc FFF79EF8 		BL	AT
 2665 14d0 FFF7A2F9 		BL	BLANK
 2666 14d4 FFF726FA 		BL	EQUAL
 2667 14d8 FFF772F8 		BL	QBRAN
 2668 14dc 2C090018 		.word	PARS3+MAPOFFSET
 2669 14e0 FFF7BCF8 		BL	TOR
 2670              	PARS1:
 2671 14e4 FFF798F9 		BL	BLANK
 2672 14e8 FFF7E6F8 		BL	OVER
 2673 14ec FFF79EF8 		BL	CAT			// skip leading blanks 
 2674 14f0 FFF73CF9 		BL	SUBB
 2675 14f4 FFF7E8F8 		BL	ZLESS
 2676 14f8 FFF7EEF9 		BL	INVER
 2677 14fc FFF760F8 		BL	QBRAN
 2678 1500 28090018 		.word	PARS2+MAPOFFSET
 2679 1504 FFF758F9 		BL	ONEP
ARM GAS  stm32eforth.s 			page 51


 2680 1508 FFF74BF8 		BL	DONXT
 2681 150c E4080018 		.word	PARS1+MAPOFFSET
 2682 1510 FFF792F8 		BL	RFROM
 2683 1514 FFF7B6F8 		BL	DROP
 2684 1518 FFF72FF8 		_DOLIT
 2685 151c 00000000 		.word	0
 2686 1520 FFF7B8F8 		BL	DUPP
 2687 1524 52F804FB 		_UNNEST
 2688              	PARS2:
 2689 1528 FFF786F8 	  BL	RFROM
 2690              	PARS3:
 2691 152c FFF7C4F8 		BL	OVER
 2692 1530 FFF7B8F8 		BL	SWAP
 2693 1534 FFF792F8 		BL	TOR
 2694              	PARS4:
 2695 1538 FFF7B9FA 		BL	TEMP
 2696 153c FFF766F8 		BL	AT
 2697 1540 FFF7BAF8 		BL	OVER
 2698 1544 FFF772F8 		BL	CAT
 2699 1548 FFF710F9 		BL	SUBB			// scan for delimiter
 2700 154c FFF7AFFA 		BL	TEMP
 2701 1550 FFF75CF8 		BL	AT
 2702 1554 FFF760F9 		BL	BLANK
 2703 1558 FFF7E4F9 		BL	EQUAL
 2704 155c FFF730F8 		BL	QBRAN
 2705 1560 68090018 		.word	PARS5+MAPOFFSET
 2706 1564 FFF7B0F8 		BL	ZLESS
 2707              	PARS5:
 2708 1568 FFF72AF8 		BL	QBRAN
 2709 156c 86090018 		.word	PARS6+MAPOFFSET
 2710 1570 FFF722F9 		BL	ONEP
 2711 1574 FFF715F8 		BL	DONXT
 2712 1578 38090018 		.word	PARS4+MAPOFFSET
 2713 157c FFF78AF8 		BL	DUPP
 2714 1580 FFF76CF8 		BL	TOR
 2715 1584 09E0     		B	PARS7
 2716              	PARS6:
 2717 1586 FFF757F8 		BL	RFROM
 2718 158a FFF77BF8 		BL	DROP
 2719 158e FFF781F8 		BL	DUPP
 2720 1592 FFF711F9 		BL	ONEP
 2721 1596 FFF761F8 		BL	TOR
 2722              	PARS7:
 2723 159a FFF78DF8 		BL	OVER
 2724 159e FFF7E5F8 		BL	SUBB
 2725 15a2 FFF749F8 		BL	RFROM
 2726 15a6 FFF747F8 		BL	RFROM
 2727 15aa FFF7DFF8 		BL	SUBB
 2728 15ae 52F804FB 		_UNNEST
 2729              	PARS8:
 2730 15b2 FFF781F8 		BL	OVER
 2731 15b6 FFF73FF8 		BL	RFROM
 2732 15ba FFF7D7F8 		BL	SUBB
 2733 15be 52F804FB 		_UNNEST
 2734              	
 2735              	//    PARSE	( c -- b u //  string> )
 2736              	// 	Scan input stream and return counted string delimited by c.
ARM GAS  stm32eforth.s 			page 52


 2737              	
 2738 15c2 90080018 		.word	_QUEST+MAPOFFSET
 2739 15c6 05       	_PARSE:	.byte  5
 2740 15c7 50415253 		.ascii "PARSE"
 2740      45
 2741              		.p2align 2 	
 2742              	PARSE:
 2743 15cc 42F804ED 		_NEST
 2744 15d0 FFF744F8 		BL	TOR
 2745 15d4 FFF728FC 		BL	TIB
 2746 15d8 FFF77EFA 		BL	INN
 2747 15dc FFF716F8 		BL	AT
 2748 15e0 FFF7BCF8 		BL	PLUS			// current input buffer pointer
 2749 15e4 FFF782FA 		BL	NTIB
 2750 15e8 FFF710F8 		BL	AT
 2751 15ec FFF774FA 		BL	INN
 2752 15f0 FFF70CF8 		BL	AT
 2753 15f4 FFF7BAF8 		BL	SUBB			// remaining count
 2754 15f8 FFF71EF8 		BL	RFROM
 2755 15fc FFF752FF 		BL	PARS
 2756 1600 FFF76AFA 		BL	INN
 2757 1604 FFF7D2F9 		BL	PSTOR
 2758 1608 52F804FB 		_UNNEST
 2759              	
 2760              	//    .(	  ( -- )
 2761              	// 	Output following string up to next ) .
 2762              	
 2763 160c C6090018 		.word	_PARSE+MAPOFFSET
 2764 1610 82       	_DOTPR:	.byte  IMEDD+2
 2765 1611 2E28     		.ascii ".("
 2766 1613 00       		.p2align 2 	
 2767              	DOTPR:
 2768 1614 42F804ED 		_NEST
 2769 1618 FEF7AFFF 		_DOLIT
 2770 161c 29000000 		.word	')'
 2771 1620 FFF7D4FF 		BL	PARSE
 2772 1624 FFF778FE 		BL	TYPEE
 2773 1628 52F804FB 		_UNNEST
 2774              	
 2775              	//    (	   ( -- )
 2776              	// 	Ignore following string up to next ) . A comment.
 2777              	
 2778 162c 100A0018 		.word	_DOTPR+MAPOFFSET
 2779 1630 81       	_PAREN:	.byte  IMEDD+1
 2780 1631 28       		.ascii "("
 2781 1632 00BF     		.p2align 2 	
 2782              	PAREN:
 2783 1634 42F804ED 		_NEST
 2784 1638 FEF79FFF 		_DOLIT
 2785 163c 29000000 		.word	')'
 2786 1640 FFF7C4FF 		BL	PARSE
 2787 1644 FFF726F9 		BL	DDROP
 2788 1648 52F804FB 		_UNNEST
 2789              	
 2790              	//    \	   ( -- )
 2791              	// 	Ignore following text till the end of line.
 2792              	
ARM GAS  stm32eforth.s 			page 53


 2793 164c 300A0018 		.word	_PAREN+MAPOFFSET
 2794 1650 81       	_BKSLA:	.byte  IMEDD+1
 2795 1651 27       		.byte	'\'
 2796 1652 00BF     		.p2align 2 	
 2797              	BKSLA:
 2798 1654 42F804ED 		_NEST
 2799 1658 FFF748FA 		BL	NTIB
 2800 165c FEF7D6FF 		BL	AT
 2801 1660 FFF73AFA 		BL	INN
 2802 1664 FEF7C8FF 		BL	STORE
 2803 1668 52F804FB 		_UNNEST
 2804              	
 2805              	//    CHAR	( -- c )
 2806              	// 	Parse next word and return its first character.
 2807              	
 2808 166c 500A0018 		.word	_BKSLA+MAPOFFSET
 2809 1670 04       	_CHAR:	.byte  4
 2810 1671 43484152 		.ascii "CHAR"
 2811 1675 0000BF   		.p2align 2 	
 2812              	CHAR:
 2813 1678 42F804ED 		_NEST
 2814 167c FFF7CCF8 		BL	BLANK
 2815 1680 FFF7A4FF 		BL	PARSE
 2816 1684 FEF7FEFF 		BL	DROP
 2817 1688 FEF7D0FF 		BL	CAT
 2818 168c 52F804FB 		_UNNEST
 2819              	
 2820              	//    WORD	( c -- a //  string> )
 2821              	// 	Parse a word from input stream and copy it to code dictionary.
 2822              	
 2823 1690 700A0018 		.word	_CHAR+MAPOFFSET
 2824 1694 04       	_WORDD:	.byte  4
 2825 1695 574F5244 		.ascii "WORD"
 2826 1699 0000BF   		.p2align 2 	
 2827              	WORDD:
 2828 169c 42F804ED 		_NEST
 2829 16a0 FFF794FF 		BL	PARSE
 2830 16a4 FFF7A8FB 		BL	HERE
 2831 16a8 FFF7A6F8 		BL	CELLP
 2832 16ac FFF71AFC 		BL	PACKS
 2833 16b0 52F804FB 		_UNNEST
 2834              	
 2835              	//    TOKEN	( -- a //  string> )
 2836              	// 	Parse a word from input stream and copy it to name dictionary.
 2837              	
 2838 16b4 940A0018 		.word	_WORDD+MAPOFFSET
 2839 16b8 05       	_TOKEN:	.byte  5
 2840 16b9 544F4B45 		.ascii "TOKEN"
 2840      4E
 2841 16be 00BF     		.p2align 2 	
 2842              	TOKEN:
 2843 16c0 42F804ED 		_NEST
 2844 16c4 FFF7A8F8 		BL	BLANK
 2845 16c8 FFF7E8FF 		BL	WORDD
 2846 16cc 52F804FB 		_UNNEST
 2847              	
 2848              	// **************************************************************************
ARM GAS  stm32eforth.s 			page 54


 2849              	//  Dictionary search
 2850              	
 2851              	//    NAME>	( na -- ca )
 2852              	// 	Return a code address given a name address.
 2853              	
 2854 16d0 B80A0018 		.word	_TOKEN+MAPOFFSET
 2855 16d4 05       	_NAMET:	.byte  5
 2856 16d5 4E414D45 		.ascii "NAME>"
 2856      3E
 2857 16da 00BF     		.p2align 2 	
 2858              	NAMET:
 2859 16dc 42F804ED 		_NEST
 2860 16e0 FFF788F9 		BL	COUNT
 2861 16e4 FEF749FF 		_DOLIT
 2862 16e8 1F000000 		.word	0x1F
 2863 16ec FEF7F6FF 		BL	ANDD
 2864 16f0 FFF734F8 		BL	PLUS
 2865 16f4 FFF728FB 		BL	ALGND
 2866 16f8 52F804FB 		_UNNEST
 2867              	
 2868              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2869              	// 	Compare u bytes in two strings. Return 0 if identical.
 2870              	//
 2871              	//  Picatout 2020-12-01, 
 2872              	//      Because of problem with .align directive that
 2873              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2874              	// 		words  to do a byte by byte comparison. 
 2875              	//
 2876 16fc D40A0018 		.word	_NAMET+MAPOFFSET
 2877 1700 05       	_SAMEQ:	.byte  5
 2878 1701 53414D45 		.ascii "SAME?"
 2878      3F
 2879 1706 00BF     		.p2align 2	
 2880              	SAMEQ:
 2881 1708 42F804ED 		_NEST
 2882 170c FEF7A6FF 		BL	TOR
 2883 1710 00F01EB8 		B.W	SAME2
 2884              	SAME1:
 2885 1714 FEF7D0FF 		BL	OVER  // ( a1 a2 -- a1 a2 a1 )
 2886 1718 FEF798FF 		BL	RAT   // a1 a2 a1 u 
 2887 171c FFF71EF8 		BL	PLUS  // a1 a2 a1+u 
 2888 1720 FEF784FF 		BL	CAT	   // a1 a2 c1    		
 2889 1724 FEF7C8FF 		BL	OVER  // a1 a2 c1 a2 
 2890 1728 FEF790FF 		BL	RAT    
 2891 172c FFF716F8 		BL	PLUS    
 2892 1730 FEF77CFF 		BL	CAT	  // a1 a2 c1 c2
 2893 1734 FFF71AF8 		BL	SUBB  
 2894 1738 FFF798F8 		BL	QDUP
 2895 173c FEF740FF 		BL	QBRAN
 2896 1740 500B0018 		.word	SAME2+MAPOFFSET
 2897 1744 FEF778FF 		BL	RFROM
 2898 1748 FEF79CFF 		BL	DROP
 2899 174c 52F804FB 		_UNNEST	// strings not equal
 2900              	SAME2:
 2901 1750 FEF727FF 		BL	DONXT
 2902 1754 140B0018 		.word	SAME1+MAPOFFSET
 2903 1758 FEF70FFF 		_DOLIT
ARM GAS  stm32eforth.s 			page 55


 2904 175c 00000000 		.word	0
 2905 1760 52F804FB 		_UNNEST	// strings equal
 2906              	
 2907              	//    find	( a na -- ca na | a F )
 2908              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2909              	
 2910              	//  Picatout 2020-12-01,  
 2911              	//		Modified from original. See comment for word "SAME?" 
 2912              	
 2913              	// 	.word	_SAMEQ+MAPOFFSET
 2914              	// _FIND	.byte  4
 2915              	// 	.ascii "find"
 2916              	// 	.p2align 2 	
 2917              	FIND:
 2918 1764 42F804ED 		_NEST
 2919 1768 FEF79CFF 		BL	SWAP			// na a	
 2920 176c FFF742F9 		BL	COUNT			// na a+1 count
 2921 1770 FEF790FF 		BL	DUPP 
 2922 1774 FFF79BF9 		BL	TEMP
 2923 1778 FEF73EFF 		BL	STORE			// na a+1 count 
 2924 177c FEF76EFF 		BL  TOR		// na a+1  R: count  
 2925 1780 FEF790FF 		BL	SWAP			// a+1 na
 2926              	FIND1:
 2927 1784 FEF786FF 		BL	DUPP			// a+1 na na
 2928 1788 FEF71AFF 		BL	QBRAN
 2929 178c D40B0018 		.word	FIND6+MAPOFFSET	// end of vocabulary
 2930 1790 FEF780FF 		BL	DUPP			// a+1 na na
 2931 1794 FEF74AFF 		BL	CAT			// a+1 na name1
 2932 1798 FEF7EFFE 		_DOLIT
 2933 179c 1FFFFFFF 		.word	MASKK
 2934 17a0 FEF79CFF 		BL	ANDD
 2935 17a4 FEF752FF 		BL	RAT			// a+1 na name1 count 
 2936 17a8 FEF7ACFF 		BL	XORR			// a+1 na,  same length?
 2937 17ac FEF708FF 		BL	QBRAN
 2938 17b0 C00B0018 		.word	FIND2+MAPOFFSET
 2939 17b4 FFF728F8 		BL	CELLM			// a+1 la
 2940 17b8 FEF728FF 		BL	AT			// a+1 next_na
 2941 17bc FFF7E2BF 		B.w	FIND1			// try next word
 2942              	FIND2:   
 2943 17c0 FEF7FAFF 		BL	ONEP			// a+1 na+1
 2944 17c4 FFF773F9 		BL	TEMP
 2945 17c8 FEF720FF 		BL	AT			// a+1 na+1 count
 2946 17cc FFF79CFF 		BL	SAMEQ		// a+1 na+1 ? 
 2947              	FIND3:	
 2948 17d0 00F00CB8 		B.w	FIND4
 2949              	FIND6:	
 2950 17d4 FEF730FF 		BL	RFROM			// a+1 0 name1 -- , no match
 2951 17d8 FEF754FF 		BL	DROP			// a+1 0
 2952 17dc FEF762FF 		BL	SWAP			// 0 a+1
 2953 17e0 FEF7F2FF 		BL	ONEM			// 0 a
 2954 17e4 FEF75EFF 		BL	SWAP			// a 0 
 2955 17e8 52F804FB 		_UNNEST			// return without a match
 2956              	FIND4:	
 2957 17ec FEF7E8FE 		BL	QBRAN			// a+1 na+1
 2958 17f0 040C0018 		.word	FIND5+MAPOFFSET	// found a match
 2959 17f4 FEF7E8FF 		BL	ONEM			// a+1 na
 2960 17f8 FFF706F8 		BL	CELLM			// a+4 la
ARM GAS  stm32eforth.s 			page 56


 2961 17fc FEF706FF 		BL	AT			// a+1 next_na
 2962 1800 FFF7C0BF 		B.w	FIND1			// compare next name
 2963              	FIND5:	
 2964 1804 FEF718FF 		BL	RFROM			// a+1 na+1 count
 2965 1808 FEF73CFF 		BL	DROP			// a+1 na+1
 2966 180c FEF74AFF 		BL	SWAP			// na+1 a+1
 2967 1810 FEF738FF 		BL	DROP			// na+1
 2968 1814 FEF7D8FF 		BL	ONEM			// na
 2969 1818 FEF73CFF 		BL	DUPP			// na na
 2970 181c FFF75EFF 		BL	NAMET			// na ca
 2971 1820 FEF740FF 		BL	SWAP			// ca na
 2972 1824 52F804FB 		_UNNEST			//  return with a match
 2973              	
 2974              	//    NAME?	( a -- ca na | a F )
 2975              	// 	Search all context vocabularies for a string.
 2976              	
 2977 1828 000B0018 		.word	_SAMEQ+MAPOFFSET
 2978 182c 05       	_NAMEQ:	.byte  5
 2979 182d 4E414D45 		.ascii "NAME?"
 2979      3F
 2980 1832 00BF     		.p2align 2 	
 2981              	NAMEQ:
 2982 1834 42F804ED 		_NEST
 2983 1838 FFF778F9 		BL	CNTXT
 2984 183c FEF7E6FE 		BL	AT
 2985 1840 FFF790FF 		BL	FIND
 2986 1844 52F804FB 		_UNNEST
 2987              	
 2988              	// **************************************************************************
 2989              	//  Terminal input
 2990              	
 2991              	//    	  ( bot eot cur -- bot eot cur )
 2992              	// 	Backup the cursor by one character.
 2993              	
 2994              	// 	.word	_NAMEQ+MAPOFFSET
 2995              	// _BKSP	.byte  2
 2996              	// 	.ascii "^H"
 2997              	// 	.p2align 2 	
 2998              	BKSP:
 2999 1848 42F804ED 		_NEST
 3000 184c FEF706FF 		BL	TOR
 3001 1850 FEF732FF 		BL	OVER
 3002 1854 FEF7F0FE 		BL	RFROM
 3003 1858 FEF724FF 		BL	SWAP
 3004 185c FEF72CFF 		BL	OVER
 3005 1860 FEF750FF 		BL	XORR
 3006 1864 FEF7ACFE 		BL	QBRAN
 3007 1868 900C0018 		.word	BACK1+MAPOFFSET
 3008 186c FEF785FE 		_DOLIT
 3009 1870 08000000 		.word	BKSPP
 3010 1874 FEF770FE 		BL	TECHO
 3011              	// 	BL	ATEXE
 3012 1878 FEF7A6FF 		BL	ONEM
 3013 187c FEF7CCFF 		BL	BLANK
 3014 1880 FEF76AFE 		BL	TECHO
 3015              	// 	BL	ATEXE
 3016 1884 FEF779FE 		_DOLIT
ARM GAS  stm32eforth.s 			page 57


 3017 1888 08000000 		.word	BKSPP
 3018 188c FEF764FE 		BL	TECHO
 3019              	// 	BL	ATEXE
 3020              	BACK1:
 3021 1890 52F804FB 		  _UNNEST
 3022              	
 3023              	//    TAP	 ( bot eot cur c -- bot eot cur )
 3024              	// 	Accept and echo the key stroke and bump the cursor.
 3025              	
 3026              	// 	.word	_BKSP+MAPOFFSET
 3027              	// _TAP	.byte  3
 3028              	// 	.ascii "TAP"
 3029              	// 	.p2align 2 	
 3030              	TAP:
 3031 1894 42F804ED 		_NEST
 3032 1898 FEF7FCFE 		BL	DUPP
 3033 189c FEF75CFE 		BL	TECHO
 3034              	// 	BL	ATEXE
 3035 18a0 FEF70AFF 		BL	OVER
 3036 18a4 FEF7B8FE 		BL	CSTOR
 3037 18a8 FEF786FF 		BL	ONEP
 3038 18ac 52F804FB 		_UNNEST
 3039              	
 3040              	//    kTAP	( bot eot cur c -- bot eot cur )
 3041              	// 	Process a key stroke, CR or backspace.
 3042              	
 3043              	// 	.word	_TAP+MAPOFFSET
 3044              	// _KTAP	.byte  4
 3045              	// 	.ascii "kTAP"
 3046              	// 	.p2align 2 	
 3047              	KTAP:
 3048              	TTAP:
 3049 18b0 42F804ED 		_NEST
 3050 18b4 FEF7EEFE 		BL	DUPP
 3051 18b8 FEF75FFE 		_DOLIT
 3052 18bc 0D000000 		.word	CRR
 3053 18c0 FEF720FF 		BL	XORR
 3054 18c4 FEF77CFE 		BL	QBRAN
 3055 18c8 F80C0018 		.word	KTAP2+MAPOFFSET
 3056 18cc FEF755FE 		_DOLIT
 3057 18d0 08000000 		.word	BKSPP
 3058 18d4 FEF716FF 		BL	XORR
 3059 18d8 FEF772FE 		BL	QBRAN
 3060 18dc F00C0018 		.word	KTAP1+MAPOFFSET
 3061 18e0 FEF79AFF 		BL	BLANK
 3062 18e4 FFF7D6FF 		BL	TAP
 3063 18e8 52F804FB 		_UNNEST
 3064 18ec 00000000 		.word	0			// patch
 3065              	KTAP1:
 3066 18f0 FFF7AAFF 	  BL	BKSP
 3067 18f4 52F804FB 		_UNNEST
 3068              	KTAP2:
 3069 18f8 FEF7C4FE 	  BL	DROP
 3070 18fc FEF7D2FE 		BL	SWAP
 3071 1900 FEF7C0FE 		BL	DROP
 3072 1904 FEF7C6FE 		BL	DUPP
 3073 1908 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 58


 3074              	
 3075              	//    ACCEPT	( b u -- b u )
 3076              	// 	Accept characters to input buffer. Return with actual count.
 3077              	
 3078 190c 2C0C0018 		.word	_NAMEQ+MAPOFFSET
 3079 1910 06       	_ACCEP:	.byte  6
 3080 1911 41434345 		.ascii "ACCEPT"
 3080      5054
 3081 1917 00       		.p2align 2 	
 3082              	ACCEP:
 3083 1918 42F804ED 		_NEST
 3084 191c FEF7CCFE 		BL	OVER
 3085 1920 FEF71CFF 		BL	PLUS
 3086 1924 FEF7C8FE 		BL	OVER
 3087              	ACCP1:
 3088 1928 FEF7BEFF 	  BL	DDUP
 3089 192c FEF7EAFE 		BL	XORR
 3090 1930 FEF746FE 		BL	QBRAN
 3091 1934 640D0018 		.word	ACCP4+MAPOFFSET
 3092 1938 FFF7A8FC 		BL	KEY
 3093 193c FEF7AAFE 		BL	DUPP
 3094 1940 FEF76AFF 		BL	BLANK
 3095 1944 FEF719FE 		_DOLIT
 3096 1948 7F000000 		.word	127
 3097 194c FFF742F9 		BL	WITHI
 3098 1950 FEF736FE 		BL	QBRAN
 3099 1954 5E0D0018 		.word	ACCP2+MAPOFFSET
 3100 1958 FFF79CFF 		BL	TAP
 3101 195c 01E0     		B	ACCP3
 3102              	ACCP2:
 3103 195e FFF7A7FF 	  BL	KTAP
 3104              	// 	BL	ATEXE
 3105              	ACCP3:	  
 3106 1962 E1E7     		B	ACCP1
 3107              	ACCP4:
 3108 1964 FEF78EFE 	  BL	DROP
 3109 1968 FEF7A6FE 		BL	OVER
 3110 196c FEF7FEFE 		BL	SUBB
 3111 1970 52F804FB 		_UNNEST
 3112              	
 3113              	//    QUERY	( -- )
 3114              	// 	Accept input stream to terminal input buffer.
 3115              	
 3116 1974 100D0018 		.word	_ACCEP+MAPOFFSET
 3117 1978 05       	_QUERY:	.byte  5
 3118 1979 51554552 		.ascii "QUERY"
 3118      59
 3119 197e 00BF     		.p2align 2 	
 3120              	QUERY:
 3121 1980 42F804ED 		_NEST
 3122 1984 FFF750FA 		BL	TIB
 3123 1988 FEF7F7FD 		_DOLIT
 3124 198c 50000000 		.word	80
 3125 1990 FFF7C2FF 		BL	ACCEP
 3126 1994 FFF7AAF8 		BL	NTIB
 3127 1998 FEF72EFE 		BL	STORE
 3128 199c FEF772FE 		BL	DROP
ARM GAS  stm32eforth.s 			page 59


 3129 19a0 FEF7EBFD 		_DOLIT
 3130 19a4 00000000 		.word	0
 3131 19a8 FFF796F8 		BL	INN
 3132 19ac FEF724FE 		BL	STORE
 3133 19b0 52F804FB 		_UNNEST
 3134              	
 3135              	// **************************************************************************
 3136              	//  Error handling
 3137              	
 3138              	//    ABORT	( a -- )
 3139              	// 	Reset data stack and jump to QUIT.
 3140              	
 3141 19b4 780D0018 		.word	_QUERY+MAPOFFSET
 3142 19b8 05       	_ABORT:	.byte  5
 3143 19b9 41424F52 		.ascii "ABORT"
 3143      54
 3144 19be 00BF     		.p2align 2 	
 3145              	ABORT:
 3146 19c0 42F804ED 		_NEST
 3147 19c4 FFF780FC 		BL	SPACE
 3148 19c8 FFF714F8 		BL	COUNT
 3149 19cc FFF7A4FC 		BL	TYPEE
 3150 19d0 FEF7D3FD 		_DOLIT
 3151 19d4 3F000000 		.word	0X3F
 3152 19d8 FEF7BEFD 		BL	EMIT
 3153 19dc FFF7B4FC 		BL	CR
 3154 19e0 00F0B2F8 		BL	PRESE
 3155 19e4 00F0BCB8 		B.W	QUIT
 3156              	
 3157              	//    _abort"	( f -- )
 3158              	// 	Run time routine of ABORT" . Abort with a message.
 3159              	
 3160              	// 	.word	_ABORT+MAPOFFSET
 3161              	// _ABORQ	.byte  COMPO+6
 3162              	// 	.ascii "abort\""
 3163              	// 	.p2align 2 	
 3164              	ABORQ:
 3165 19e8 42F804ED 		_NEST
 3166 19ec FEF7E8FD 		BL	QBRAN
 3167 19f0 080E0018 		.word	ABOR1+MAPOFFSET	// text flag
 3168 19f4 FFF7B8FC 		BL	DOSTR
 3169 19f8 FEF7FCFF 		BL	COUNT
 3170 19fc FFF78CFC 		BL	TYPEE
 3171 1a00 FFF7A2FC 		BL	CR
 3172 1a04 00F0ACB8 		B.W	QUIT
 3173              	ABOR1:
 3174 1a08 FFF7AEFC 		BL	DOSTR
 3175 1a0c FEF73AFE 		BL	DROP
 3176 1a10 52F804FB 		_UNNEST			// drop error
 3177              	
 3178              	// **************************************************************************
 3179              	//  The text interpreter
 3180              	
 3181              	//    $INTERPRET  ( a -- )
 3182              	// 	Interpret a word. If failed, try to convert it to an integer.
 3183              	
 3184 1a14 B80D0018 		.word	_ABORT+MAPOFFSET
ARM GAS  stm32eforth.s 			page 60


 3185 1a18 0A       	_INTER:	.byte  10
 3186 1a19 2424494E 		.ascii "$$INTERPRET"
 3186      54455250 
 3186      524554
 3187              		.p2align 2 	
 3188              	INTER:
 3189 1a24 42F804ED 		_NEST
 3190 1a28 FFF704FF 		BL	NAMEQ
 3191 1a2c FEF71EFF 		BL	QDUP	// ?defined
 3192 1a30 FEF7C6FD 		BL	QBRAN
 3193 1a34 640E0018 		.word	INTE1+MAPOFFSET
 3194 1a38 FEF7E8FD 		BL	AT
 3195 1a3c FEF79DFD 		_DOLIT
 3196 1a40 40000000 		.word	COMPO
 3197 1a44 FEF74AFE 		BL	ANDD	// ?compile only lexicon bits
 3198 1a48 FFF7CEFF 		BL	ABORQ
 3199 1a4c 0D       		.byte	13
 3200 1a4d 20636F6D 		.ascii " compile only"
 3200      70696C65 
 3200      206F6E6C 
 3200      79
 3201 1a5a 00BF     		.p2align 2 	
 3202 1a5c FEF79CFD 		BL	EXECU
 3203 1a60 52F804FB 		_UNNEST			// execute defined word
 3204              	INTE1:
 3205 1a64 FFF778FB 	  BL	NUMBQ
 3206 1a68 FEF7AAFD 		BL	QBRAN
 3207 1a6c 740E0018 		.word	INTE2+MAPOFFSET
 3208 1a70 52F804FB 		_UNNEST
 3209              	INTE2:
 3210 1a74 FFF7A4BF 	  B.W	ABORT	// error
 3211              	
 3212              	//    [	   ( -- )
 3213              	// 	Start the text interpreter.
 3214              	
 3215 1a78 180E0018 		.word	_INTER+MAPOFFSET
 3216 1a7c 81       	_LBRAC:	.byte  IMEDD+1
 3217 1a7d 5B       		.ascii "["
 3218 1a7e 00BF     		.p2align 2 	
 3219              	LBRAC:
 3220 1a80 42F804ED 		_NEST
 3221 1a84 FEF779FD 		_DOLIT
 3222 1a88 240E0018 		.word	INTER+MAPOFFSET
 3223 1a8c FFF738F8 		BL	TEVAL
 3224 1a90 FEF7B2FD 		BL	STORE
 3225 1a94 52F804FB 		_UNNEST
 3226              	
 3227              	//    .OK	 ( -- )
 3228              	// 	Display "ok" only while interpreting.
 3229              	
 3230 1a98 7C0E0018 		.word	_LBRAC+MAPOFFSET
 3231 1a9c 03       	_DOTOK:	.byte  3
 3232 1a9d 2E4F4B   		.ascii ".OK"
 3233              		.p2align 2 	
 3234              	DOTOK:
 3235 1aa0 42F804ED 		_NEST
 3236 1aa4 FEF769FD 		_DOLIT
ARM GAS  stm32eforth.s 			page 61


 3237 1aa8 240E0018 		.word	INTER+MAPOFFSET
 3238 1aac FFF728F8 		BL	TEVAL
 3239 1ab0 FEF7ACFD 		BL	AT
 3240 1ab4 FEF736FF 		BL	EQUAL
 3241 1ab8 FEF782FD 		BL	QBRAN
 3242 1abc C80E0018 		.word	DOTO1+MAPOFFSET
 3243 1ac0 FFF77AFC 		BL	DOTQP
 3244 1ac4 03       		.byte	3
 3245 1ac5 206F6B   		.ascii " ok"
 3246              	DOTO1:
 3247 1ac8 FFF73EFC 		BL	CR
 3248 1acc 52F804FB 		_UNNEST
 3249              	
 3250              	//    ?STACK	( -- )
 3251              	// 	Abort if the data stack underflows.
 3252              	
 3253 1ad0 9C0E0018 		.word	_DOTOK+MAPOFFSET
 3254 1ad4 06       	_QSTAC:	.byte  6
 3255 1ad5 3F535441 		.ascii "?STACK"
 3255      434B
 3256 1adb 00       		.p2align 2 	
 3257              	QSTAC:
 3258 1adc 42F804ED 		_NEST
 3259 1ae0 FFF764F9 		BL	DEPTH
 3260 1ae4 FEF7F0FD 		BL	ZLESS	// check only for underflow
 3261 1ae8 FFF77EFF 		BL	ABORQ
 3262 1aec 0A       		.byte	10
 3263 1aed 20756E64 		.ascii " underflow"
 3263      6572666C 
 3263      6F77
 3264 1af7 00       		.p2align 2 	
 3265 1af8 52F804FB 		_UNNEST
 3266              	
 3267              	//    EVAL	( -- )
 3268              	// 	Interpret the input stream.
 3269              	
 3270 1afc D40E0018 		.word	_QSTAC+MAPOFFSET
 3271 1b00 04       	_EVAL:	.byte  4
 3272 1b01 4556414C 		.ascii "EVAL"
 3273 1b05 0000BF   		.p2align 2 	
 3274              	EVAL:
 3275 1b08 42F804ED 		_NEST
 3276              	EVAL1:
 3277 1b0c FFF7D8FD 	    BL	TOKEN
 3278 1b10 FEF7C0FD 		BL	DUPP
 3279 1b14 FEF78AFD 		BL	CAT	// ?input stream empty
 3280 1b18 FEF752FD 		BL	QBRAN
 3281 1b1c 300F0018 		.word	EVAL2+MAPOFFSET
 3282 1b20 FEF7EEFF 		BL	TEVAL
 3283 1b24 FFF78CF9 		BL	ATEXE
 3284 1b28 FFF7D8FF 		BL	QSTAC	// evaluate input, check stack
 3285 1b2c FFF7EEBF 		B.W	EVAL1
 3286              	EVAL2:
 3287 1b30 FEF7A8FD 		BL	DROP
 3288 1b34 FFF7B4FF 		BL	DOTOK
 3289 1b38 52F804FB 		_UNNEST	// prompt
 3290              	
ARM GAS  stm32eforth.s 			page 62


 3291              	//    PRESET	( -- )
 3292              	// 	Reset data stack pointer and the terminal input buffer.
 3293              	
 3294 1b3c 000F0018 		.word	_EVAL+MAPOFFSET
 3295 1b40 06       	_PRESE:	.byte  6
 3296 1b41 50524553 		.ascii "PRESET"
 3296      4554
 3297 1b47 00       		.p2align 2 	
 3298              	PRESE:
 3299              	//	_NEST
 3300 1b48 44F68061 		MOVW	R1,#SPP&0xffff		//  init SP
 3301 1b4c C2F20001 	 	MOVT	R1,#SPP>>16
 3302 1b50 85EA0505 		EOR	R5,R5,R5			//  init TOS=0
 3303              	//	_UNNEST
 3304 1b54 7047     		_NEXT
 3305              	
 3306              	//    QUIT	( -- )
 3307              	// 	Reset return stack pointer and start text interpreter.
 3308              	
 3309 1b56 400F0018 		.word	_PRESE+MAPOFFSET
 3310 1b5a 04       	_QUIT:	.byte  4
 3311 1b5b 51554954 		.ascii "QUIT"
 3312 1b5f 00       		.p2align 2 	
 3313              	QUIT:
 3314 1b60 42F804ED 		_NEST
 3315 1b64 44F68072 		MOVW	R2,#RPP&0xffff  /* RESET RSTACK */
 3316 1b68 C2F20002 	 	MOVT	R2,#RPP>>16 
 3317              	QUIT1:
 3318 1b6c FFF788FF 		BL	LBRAC			// start interpretation
 3319              	QUIT2:
 3320 1b70 FFF706FF 		BL	QUERY			// get input
 3321 1b74 FFF7C8FF 		BL	EVAL
 3322 1b78 FEF72EFD 		BL	BRAN
 3323 1b7c 700F0018 		.word	QUIT2+MAPOFFSET	// continue till error
 3324              	
 3325              	/***************************
 3326              	//  Flash memory interface
 3327              	***************************/
 3328              	// UNLOCK ( T|F -- )
 3329              	// lock or unlock FLASH write 
 3330              	
 3331 1b80 5A0F0018 		.word _QUIT+MAPOFFSET  
 3332 1b84 06       	_UNLOCK: .byte 6
 3333 1b85 554E4C4F 		.ascii "UNLOCK"
 3333      434B
 3334 1b8b 00       		.p2align 2  
 3335              	UNLOCK:	//  unlock flash memory	
 3336 1b8c 42F804ED 		_NEST 
 3337 1b90 FEF716FD 		BL QBRAN
 3338 1b94 B40F0018 		.word LOCK+MAPOFFSET
 3339 1b98 C448     		ldr	r0, flash_regs 
 3340 1b9a 4FF03404 		mov r4,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 3341 1b9e C460     		str r4,[r0,#FLASH_SR]
 3342 1ba0 0469     		ldr r4,[r0,#FLASH_CR]
 3343 1ba2 14F0800F 		tst r4,#(1<<7)
 3344 1ba6 03D0     		beq 1f 
 3345 1ba8 C14C     		ldr	r4, flash_regs+4 // key1
ARM GAS  stm32eforth.s 			page 63


 3346 1baa 4460     		str	r4, [r0, #FLASH_KEYR]
 3347 1bac C14C     		ldr	r4, flash_regs+8 // key2 
 3348 1bae 4460     		str	r4, [r0, #FLASH_KEYR]
 3349              		/* unlock option registers */
 3350              	/*
 3351              		ldr	r4, flash_regs+4 
 3352              		str	r4, [r0, #FLASH_OPTKEYR]
 3353              		ldr	r4, flash_regs+8
 3354              		str	r4, [r0, #FLASH_OPTKEYR]
 3355              	*/ 
 3356              	1:
 3357 1bb0 52F804FB 		_UNNEST
 3358              	 // lock flash memory
 3359              	LOCK: 
 3360 1bb4 BD48     		ldr r0,flash_regs  
 3361              	//	ldr r4,[r0,#FLASH_CR]
 3362 1bb6 4FF08004 		mov r4,#(1<<7)
 3363 1bba 0461     		str r4,[r0,#FLASH_CR]
 3364 1bbc 52F804FB 		_UNNEST  
 3365              	
 3366              	WAIT_BSY:
 3367 1bc0 BA48     		ldr	r0,flash_regs
 3368              	WAIT1:
 3369 1bc2 C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 3370 1bc4 14F00104 		ands	r4, #0x1	//  BSY
 3371 1bc8 FBD1     		bne	WAIT1
 3372 1bca 7047     		_NEXT
 3373              	
 3374              	//    ERASE_PAGE	   ( adr -- )
 3375              	// 	  Erase one page of flash memory.
 3376              	//    stm32f103 page size is 1024 bytes 
 3377              	//    adr is any address inside page to erase 
 3378              	
 3379 1bcc 840F0018 		.word	_UNLOCK+MAPOFFSET
 3380 1bd0 0A       	_EPAGE:	.byte  10
 3381 1bd1 45524153 		.ascii "ERASE_PAGE"
 3381      455F5041 
 3381      4745
 3382 1bdb 00       		.p2align 2 	
 3383              	
 3384              	EPAGE: 	//  page --
 3385 1bdc 42F804ED 		_NEST
 3386              	
 3387 1be0 FFF7EEFF 		bl	WAIT_BSY
 3388 1be4 FEF7C9FC 		_DOLIT 
 3389 1be8 01000000 		.word 1 
 3390 1bec FFF7CEFF 		bl  UNLOCK 
 3391 1bf0 AE48     		ldr r0,flash_regs 	 
 3392 1bf2 4FF00204 		mov r4,#2 // set PER bit 
 3393 1bf6 0461     		str r4,[r0,#FLASH_CR]
 3394 1bf8 4561     		str r5,[r0,#FLASH_AR] // page to erase address 
 3395 1bfa 0469     		ldr	r4,[r0, #FLASH_CR]	
 3396 1bfc 44F04004 		orr	R4,#0x40	//  set STRT bit   
 3397 1c00 0461     		str	r4,[r0, #FLASH_CR]	//  start erasing
 3398 1c02 FFF7DDFF 	 	bl	WAIT_BSY // wait until done
 3399 1c06 FEF7B8FC 		_DOLIT 
 3400 1c0a 00000000 		.word 0 
ARM GAS  stm32eforth.s 			page 64


 3401 1c0e FFF7BDFF 		bl	UNLOCK  // lock flash write 
 3402 1c12 C568     		ldr r5,[r0,#FLASH_SR] // check for errors 
 3403 1c14 05F01405 		and r5,r5,#(5<<2)
 3404 1c18 FFF7E6FE 		bl ABORQ 
 3405 1c1c 0D       		.byte 13
 3406 1c1d 20657261 		.ascii " erase error!"
 3406      73652065 
 3406      72726F72 
 3406      21
 3407 1c2a 00BF     		.p2align 2
 3408 1c2c 52F804FB 		_UNNEST
 3409              	
 3410              	// store 16 bit word
 3411              	// expect flash unlocked  
 3412              	HWORD_WRITE: // ( hword address -- )
 3413 1c30 42F804ED 		_NEST
 3414 1c34 0469     		ldr	r4, [r0, #FLASH_CR]	//  FLASH_CR
 3415              	//	bic r4,#(1<<9)|(1<<5)|(1<<4)|(1<<2)|(1<<1) //  clear OPTWRE|OPTER|OPTPG|MER|PER
 3416 1c36 4FF00104 		mov r4,#1 // set PG 
 3417 1c3a 0461     		str r4,[r0,#FLASH_CR]
 3418 1c3c 2E46     		mov r6,r5 
 3419 1c3e 51F8045B 		_POP 
 3420 1c42 3580     		strh r5,[r6] 
 3421 1c44 FFF7BCFF 		bl WAIT_BSY 
 3422 1c48 C568     		ldr r5,[r0,#FLASH_SR]
 3423 1c4a 05F01405 		and r5,r5,#(5<<2) 
 3424 1c4e FEF7B7FC 		bl QBRAN
 3425 1c52 68100018 		.word 1f+MAPOFFSET 
 3426 1c56 FFF7C7FE 		bl ABORQ
 3427 1c5a 0D       		.byte 13
 3428 1c5b 20777269 		.ascii " write error!"
 3428      74652065 
 3428      72726F72 
 3428      21
 3429              		.p2align 2
 3430              	1:	 
 3431 1c68 52F804FB 		_UNNEST 
 3432              	
 3433              	
 3434              	//    I!	   ( data address -- )
 3435              	// 	   Write one word into flash memory
 3436              	//	   address must even 
 3437              	
 3438 1c6c D00F0018 		.word	_EPAGE+MAPOFFSET
 3439 1c70 02       	_ISTOR:	.byte  2
 3440 1c71 4921     		.ascii "I!"
 3441 1c73 00       		.p2align 2 	
 3442              	ISTOR:	//  data address --
 3443 1c74 42F804ED 		_NEST
 3444 1c78 FFF7A2FF 		bl	WAIT_BSY
 3445 1c7c FEF77DFC 		_DOLIT 
 3446 1c80 01000000 		.word 1 
 3447 1c84 FFF782FF 		bl  UNLOCK 
 3448 1c88 FEF70EFE 		BL DDUP 
 3449 1c8c FEF7E6FC 		BL TOR 
 3450 1c90 FEF7E4FC 		BL TOR 
 3451 1c94 FFF7CCFF 		BL HWORD_WRITE
ARM GAS  stm32eforth.s 			page 65


 3452 1c98 FEF7CEFC 		BL RFROM 
 3453 1c9c 4FEA3545 		ror r5,r5,#16
 3454 1ca0 FEF7CAFC 		BL RFROM 
 3455 1ca4 05F10205 		add r5,r5,#2 
 3456 1ca8 FFF7C2FF 		BL HWORD_WRITE 
 3457 1cac FEF765FC 		_DOLIT 
 3458 1cb0 00000000 		.word 0
 3459 1cb4 FFF76AFF 		bl UNLOCK 
 3460 1cb8 52F804FB 		_UNNEST
 3461              	
 3462              	// IMG? ( -- T|F )
 3463              	// check if an image has been saved 
 3464 1cbc 70100018 		.word _ISTOR+MAPOFFSET 
 3465 1cc0 04       	_IMGQ: .byte 4
 3466 1cc1 494D473F 		.ascii "IMG?"
 3467 1cc5 0000BF   		.p2align 2
 3468              	IMGQ:
 3469 1cc8 42F804ED 		_NEST 
 3470 1ccc FEF776FF 		BL USER_IMG 
 3471 1cd0 FEF79CFC 		BL AT 
 3472 1cd4 FEF751FC 		_DOLIT 
 3473 1cd8 FFFFFFFF 		.word -1
 3474 1cdc FEF712FD 		BL XORR  
 3475 1ce0 52F804FB 		_UNNEST
 3476              	
 3477              	// LOAD_IMG ( -- )
 3478              	// copy save image in RAM 
 3479 1ce4 C0100018 		.word _IMGQ+MAPOFFSET
 3480 1ce8 08       	_LOAD_IMG: .byte 8 
 3481 1ce9 4C4F4144 		.ascii "LOAD_IMG" 
 3481      5F494D47 
 3482 1cf1 0000BF   		.p2align 2 
 3483              	LOAD_IMG:
 3484 1cf4 42F804ED 		_NEST 
 3485 1cf8 FEF760FF 		BL USER_IMG // image address in flash
 3486              	/* copy system variables to RAM */
 3487 1cfc 41F8045D 		_PUSH 
 3488 1d00 03F11405 		ADD R5,R3,#BOOT_OFS // copy start at boot variable 
 3489 1d04 41F8045D 		_PUSH 
 3490 1d08 4FF0D005 		MOV R5,#(VARS_END_OFS-BOOT_OFS)*4 
 3491 1d0c FEF7C2FC 		BL DUPP 
 3492 1d10 FEF7A4FC 		BL TOR 
 3493 1d14 FFF7B8F8 		BL MOVE 
 3494              	/* copy user definitions */
 3495 1d18 FEF78EFC 		BL RFROM 
 3496 1d1c FEF74EFF 		BL USER_IMG 
 3497 1d20 FEF71CFD 		BL PLUS // source address  
 3498 1d24 FEF72EFF 		BL USER_BEGIN // destination address
 3499 1d28 FFF766F8 		BL HERE  
 3500 1d2c FEF71EFD 		BL SUBB  // byte count 
 3501 1d30 FFF7AAF8 		BL MOVE 
 3502 1d34 52F804FB 		_UNNEST 
 3503              	
 3504              	// ERASE_MPG ( u1 u2 -- )
 3505              	// erase many pages 
 3506              	// u1 first page number 
 3507              	// u2 how many pages  
ARM GAS  stm32eforth.s 			page 66


 3508 1d38 E8100018 		.word _LOAD_IMG+MAPOFFSET
 3509 1d3c 09       	_ERASE_MPG: .byte 9 
 3510 1d3d 45524153 		.ascii "ERASE_MPG"	
 3510      455F4D50 
 3510      47
 3511 1d46 00BF     		.p2align 2 
 3512              	ERASE_MPG:
 3513 1d48 42F804ED 		_NEST 
 3514 1d4c FEF786FC 		BL TOR 
 3515 1d50 4FEA8525 		lsl r5,#10
 3516 1d54 FEF711FC 		_DOLIT 
 3517 1d58 00000008 		.word FLASH_ADR 
 3518 1d5c FEF7FEFC 		BL PLUS 
 3519 1d60 FEF73AFC 		BL BRAN 
 3520 1d64 7C110018 		.word 2f+MAPOFFSET 
 3521              	1:
 3522 1d68 FEF794FC 		BL DUPP 
 3523 1d6c FEF776FC 		BL TOR 
 3524 1d70 FFF734FF 		BL EPAGE 
 3525 1d74 FEF760FC 		BL RFROM
 3526 1d78 05F58065 		add r5,#PAGE_SIZE 
 3527              	2:
 3528 1d7c FEF711FC 		BL DONXT
 3529 1d80 68110018 		.word 1b+MAPOFFSET 
 3530 1d84 51F8045B 		_POP 
 3531 1d88 52F804FB 		_UNNEST 
 3532              	
 3533              	// FLSH_WR ( src dest u -- dest+u )
 3534              	// write u words to flash memory 
 3535 1d8c 3C110018 		.word _ERASE_MPG+MAPOFFSET
 3536 1d90 07       	_FLSH_WR: .byte 7 
 3537 1d91 464C5348 		.ascii "FLSH_WR"
 3537      5F5752
 3538              		.p2align  
 3539              	FLSH_WR: 
 3540 1d98 42F804ED 		_NEST 
 3541 1d9c FEF75EFC 		BL TOR
 3542 1da0 FEF71AFC 		BL BRAN 
 3543 1da4 C8110018 		.word 3f+MAPOFFSET  
 3544              	/* write system variables to FLASH */
 3545 1da8 FEF758FC 	2:  BL TOR  // destination address 
 3546 1dac FEF772FC 		BL DUPP 
 3547 1db0 FEF72CFC 		BL AT   // get data 
 3548 1db4 FEF74AFC 		BL RAT  // get destination address 
 3549 1db8 FFF75CFF 		BL ISTOR
 3550 1dbc FEF71CFD 		BL CELLP  // increment source address 
 3551 1dc0 FEF73AFC 		BL RFROM 
 3552 1dc4 FEF718FD 		BL CELLP  // increment dest address 
 3553 1dc8 FEF7EBFB 	3:	BL DONXT 
 3554 1dcc A8110018 		.word 2b+MAPOFFSET
 3555 1dd0 FEF744FC 		BL TOR 
 3556 1dd4 FEF756FC 		BL DROP 
 3557 1dd8 FEF72EFC 		BL RFROM 
 3558 1ddc 52F804FB 		_UNNEST 
 3559              	
 3560              	// PAGE ( a -- u )
 3561              	// convert address to page number 
ARM GAS  stm32eforth.s 			page 67


 3562 1de0 90110018 		.word _FLSH_WR+MAPOFFSET
 3563 1de4 04       	_PAGE: .byte 4 
 3564 1de5 50414745 		.ascii "PAGE" 
 3565 1de9 0000BF   		.p2align 2 
 3566              	PAGE: 
 3567 1dec 4FF00004 		mov r4,#0
 3568 1df0 C0F60004 		movt r4,#0x800
 3569 1df4 A5EB0405 		sub r5,r4 
 3570 1df8 4FEA9525 		lsr r5,#10 
 3571 1dfc 7047     		_NEXT  
 3572              	
 3573              	// SAVE_IMG ( -- )
 3574              	// copy in flash RAM system variables and user defintitions.
 3575 1dfe E4110018 		.word _PAGE+MAPOFFSET	
 3576 1e02 08       	_SAVE_IMG: .byte 8 
 3577 1e03 53415645 		.ascii "SAVE_IMG"
 3577      5F494D47 
 3578 1e0b 00       		.p2align 2
 3579              	SAVE_IMG:
 3580 1e0c 42F804ED 		_NEST 
 3581 1e10 FEF7F2FF 		BL HERE 
 3582 1e14 FEF7B6FE 		BL USER_BEGIN 
 3583 1e18 FEF784FD 		BL EQUAL 
 3584 1e1c FEF7D0FB 		BL QBRAN
 3585 1e20 28120018 		.word 1f+MAPOFFSET 
 3586 1e24 52F804FB 		_UNNEST  // nothing to save 
 3587 1e28 FFF74EFF 	1:	BL IMGQ 
 3588 1e2c FEF7C8FB 		BL QBRAN 
 3589 1e30 5C120018 		.word 2f+MAPOFFSET
 3590              	/* delete saved image */
 3591 1e34 FEF7C2FE 		BL USER_IMG 
 3592 1e38 FFF7D8FF 		BL PAGE 
 3593 1e3c FEF7B0FE 		BL USER_END  
 3594 1e40 FEF7A0FE 		BL USER_BEGIN 
 3595 1e44 FEF792FC 		BL SUBB 
 3596 1e48 FEF797FB 		_DOLIT 
 3597 1e4c 00040000 		.word 1024 
 3598 1e50 FEF74AFF 		BL SLASH 
 3599 1e54 FEF7B0FC 		BL ONEP   // # pages to delete 
 3600 1e58 FFF776FF 		BL ERASE_MPG 
 3601              	/* save system variables */
 3602 1e5c 41F8045D 	2:	_PUSH 
 3603 1e60 03F11405 		ADD R5,R3,#BOOT_OFS // copy start at boot variable 
 3604 1e64 FEF7AAFE 		BL USER_IMG // image address in flash  
 3605 1e68 41F8045D 		_PUSH 
 3606 1e6c 4FF03405 		MOV R5,#(VARS_END_OFS-BOOT_OFS) 
 3607 1e70 FEF7E4FC 		BL CELLSL  // word count 
 3608 1e74 FFF790FF 		BL FLSH_WR 
 3609              	/* write user definitions */
 3610 1e78 FEF7F0FB 		BL TOR    // destination address 
 3611 1e7c FEF7BCFF 		BL HERE 
 3612 1e80 FEF780FE 		BL USER_BEGIN 
 3613 1e84 FEF772FC 		BL SUBB 
 3614 1e88 FEF7D8FC 		BL CELLSL
 3615 1e8c FEF7E6FB 		BL TOR     // word count  
 3616 1e90 FEF778FE 		BL USER_BEGIN 
 3617 1e94 FEF7D0FB 		BL RFROM // count 
ARM GAS  stm32eforth.s 			page 68


 3618 1e98 FEF7CEFB 		BL RFROM // dest 
 3619 1e9c FEF702FC 		BL SWAP 
 3620 1ea0 FFF77AFF 		BL FLSH_WR  
 3621 1ea4 FEF7EEFB 		BL DROP 
 3622 1ea8 52F804FB 		_UNNEST 
 3623              	
 3624              	flash_regs:
 3625 1eac 00200240 		.word FLASH_BASE_ADR // 0 
 3626 1eb0 23016745 		.word FLASH_KEY1   // 4 
 3627 1eb4 AB89EFCD 		.word FLASH_KEY2   // 8
 3628              	
 3629              	// **************************************************************************
 3630              	//  The compiler
 3631              	
 3632              	//    '	   ( -- ca )
 3633              	// 	Search context vocabularies for the next word in input stream.
 3634              	
 3635 1eb8 02120018 		.word	_SAVE_IMG+MAPOFFSET
 3636 1ebc 01       	_TICK:	.byte  1
 3637 1ebd 27       		.ascii "'"
 3638 1ebe 00BF     		.p2align 2 	
 3639              	TICK:
 3640 1ec0 42F804ED 		_NEST
 3641 1ec4 FFF7FCFB 		BL	TOKEN
 3642 1ec8 FFF7B4FC 		BL	NAMEQ	// ?defined
 3643 1ecc FEF778FB 		BL	QBRAN
 3644 1ed0 D8120018 		.word	TICK1+MAPOFFSET
 3645 1ed4 52F804FB 		_UNNEST	// yes, push code address
 3646 1ed8 FFF772BD 	TICK1:	B.W	ABORT	// no, error
 3647              	
 3648              	//    ALLOT	( n -- )
 3649              	// 	Allocate n bytes to the ram area.
 3650              	
 3651 1edc BC120018 		.word	_TICK+MAPOFFSET
 3652 1ee0 05       	_ALLOT:	.byte  5
 3653 1ee1 414C4C4F 		.ascii "ALLOT"
 3653      54
 3654 1ee6 00BF     		.p2align 2 	
 3655              	ALLOT:
 3656 1ee8 42F804ED 		_NEST
 3657 1eec FEF728FE 		BL	CPP
 3658 1ef0 FEF75CFD 		BL	PSTOR
 3659 1ef4 52F804FB 		_UNNEST			// adjust code pointer
 3660              	
 3661              	//    ,	   ( w -- )
 3662              	// 	Compile an integer into the code dictionary.
 3663              	
 3664 1ef8 E0120018 		.word	_ALLOT+MAPOFFSET
 3665 1efc 012C     	_COMMA:	.byte  1,','
 3666 1efe 00BF     		.p2align 2 	
 3667              	COMMA:
 3668 1f00 42F804ED 		_NEST
 3669 1f04 FEF778FF 		BL	HERE
 3670 1f08 FEF7C4FB 		BL	DUPP
 3671 1f0c FEF774FC 		BL	CELLP	// cell boundary
 3672 1f10 FEF716FE 		BL	CPP
 3673 1f14 FEF770FB 		BL	STORE
ARM GAS  stm32eforth.s 			page 69


 3674 1f18 FEF76EFB 		BL	STORE
 3675 1f1c 52F804FB 		_UNNEST	// adjust code pointer, compile
 3676              		.p2align 2 
 3677              	//    [COMPILE]   ( -- //  string> )
 3678              	// 	Compile the next immediate word into code dictionary.
 3679              	
 3680 1f20 FC120018 		.word	_COMMA+MAPOFFSET
 3681 1f24 89       	_BCOMP:	.byte  IMEDD+9
 3682 1f25 5B434F4D 		.ascii "[COMPILE]"
 3682      50494C45 
 3682      5D
 3683 1f2e 00BF     		.p2align 2 	
 3684              	BCOMP:
 3685 1f30 42F804ED 		_NEST
 3686 1f34 FFF7C4FF 		BL	TICK
 3687 1f38 FFF7E2FF 		BL	COMMA
 3688 1f3c 52F804FB 		_UNNEST
 3689              	
 3690              	//    COMPILE	( -- )
 3691              	// 	Compile the next address in colon list to code dictionary.
 3692              	
 3693 1f40 24130018 		.word	_BCOMP+MAPOFFSET
 3694 1f44 47       	_COMPI:	.byte  COMPO+7
 3695 1f45 434F4D50 		.ascii "COMPILE"
 3695      494C45
 3696              		.p2align 2 	
 3697              	COMPI:
 3698 1f4c 42F804ED 		_NEST
 3699 1f50 FEF772FB 		BL	RFROM
 3700 1f54 25F00105 		BIC	R5,R5,#1
 3701 1f58 FEF79CFB 		BL	DUPP
 3702 1f5c FEF756FB 		BL	AT
 3703 1f60 00F0F2F9 		BL	CALLC			// compile BL instruction
 3704 1f64 FEF748FC 		BL	CELLP
 3705 1f68 45F00105 		ORR	R5,R5,#1
 3706 1f6c FEF776FB 		BL	TOR
 3707 1f70 52F804FB 		_UNNEST			// adjust return address
 3708              	
 3709              	//    LITERAL	( w -- )
 3710              	// 	Compile tos to code dictionary as an integer literal.
 3711              	
 3712 1f74 44130018 		.word	_COMPI+MAPOFFSET
 3713 1f78 87       	_LITER:	.byte  IMEDD+7
 3714 1f79 4C495445 		.ascii "LITERAL"
 3714      52414C
 3715              		.p2align 2 	
 3716              	LITER:
 3717 1f80 42F804ED 		_NEST
 3718 1f84 FFF7E2FF 		BL	COMPI
 3719 1f88 7AF9FF17 		.word	DOLIT+MAPOFFSET
 3720 1f8c FFF7B8FF 		BL	COMMA
 3721 1f90 52F804FB 		_UNNEST
 3722              	
 3723              	//    $,"	( -- )
 3724              	// 	Compile a literal string up to next " .
 3725              	
 3726              	// 	.word	_LITER+MAPOFFSET
ARM GAS  stm32eforth.s 			page 70


 3727              	// _STRCQ	.byte  3
 3728              	// 	.ascii "$$,"""
 3729              	// 	.p2align 2 	
 3730              	STRCQ:
 3731 1f94 42F804ED 		_NEST
 3732 1f98 FEF7EFFA 		_DOLIT
 3733 1f9c FCFFFFFF 		.word	-4
 3734 1fa0 FEF7CEFD 		BL	CPP
 3735 1fa4 FEF702FD 		BL	PSTOR
 3736 1fa8 FEF7E7FA 		_DOLIT
 3737 1fac 22000000 		.word	'\"'
 3738 1fb0 FFF774FB 		BL	WORDD			// move word to code dictionary
 3739 1fb4 FEF71EFD 		BL	COUNT
 3740 1fb8 FEF7D0FB 		BL	PLUS
 3741 1fbc FEF7C4FE 		BL	ALGND			// calculate aligned end of string
 3742 1fc0 FEF7BEFD 		BL	CPP
 3743 1fc4 FEF718FB 		BL	STORE
 3744 1fc8 52F804FB 		_UNNEST 			// adjust the code pointer
 3745              	
 3746              	// **************************************************************************
 3747              	//  Structures
 3748              	
 3749              	//    FOR	 ( -- a )
 3750              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3751              	
 3752 1fcc 78130018 		.word	_LITER+MAPOFFSET
 3753 1fd0 C3       	_FOR:	.byte  COMPO+IMEDD+3
 3754 1fd1 464F52   		.ascii "FOR"
 3755              		.p2align 2 	
 3756              	FOR:
 3757 1fd4 42F804ED 		_NEST
 3758 1fd8 FFF7B8FF 		BL	COMPI
 3759 1fdc 5CFAFF17 		.word	TOR+MAPOFFSET
 3760 1fe0 FEF70AFF 		BL	HERE
 3761 1fe4 52F804FB 		_UNNEST
 3762              	
 3763              	//    BEGIN	( -- a )
 3764              	// 	Start an infinite or indefinite loop structure.
 3765              	
 3766 1fe8 D0130018 		.word	_FOR+MAPOFFSET
 3767 1fec C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 3768 1fed 42454749 		.ascii "BEGIN"
 3768      4E
 3769 1ff2 00BF     		.p2align 2 	
 3770              	BEGIN:
 3771 1ff4 42F804ED 		_NEST
 3772 1ff8 FEF7FEFE 		BL	HERE
 3773 1ffc 52F804FB 		_UNNEST
 3774              		.p2align 2 
 3775              	//    NEXT	( a -- )
 3776              	// 	Terminate a FOR-NEXT loop structure.
 3777              	
 3778 2000 EC130018 		.word	_BEGIN+MAPOFFSET
 3779 2004 C4       	_NEXT:	.byte  COMPO+IMEDD+4
 3780 2005 4E455854 		.ascii "NEXT"
 3781 2009 0000BF   		.p2align 2 	
 3782              	NEXT:
ARM GAS  stm32eforth.s 			page 71


 3783 200c 42F804ED 		_NEST
 3784 2010 FFF79CFF 		BL	COMPI
 3785 2014 A2F9FF17 		.word	DONXT+MAPOFFSET
 3786 2018 FFF772FF 		BL	COMMA
 3787 201c 52F804FB 		_UNNEST
 3788              	
 3789              	//    UNTIL	( a -- )
 3790              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3791              	
 3792 2020 04140018 		.word	_NEXT+MAPOFFSET
 3793 2024 C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3794 2025 554E5449 		.ascii "UNTIL"
 3794      4C
 3795 202a 00BF     		.p2align 2 	
 3796              	UNTIL:
 3797 202c 42F804ED 		_NEST
 3798 2030 FFF78CFF 		BL	COMPI
 3799 2034 C0F9FF17 		.word	QBRAN+MAPOFFSET
 3800 2038 FFF762FF 		BL	COMMA
 3801 203c 52F804FB 		_UNNEST
 3802              	
 3803              	//    AGAIN	( a -- )
 3804              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3805              	
 3806 2040 24140018 		.word	_UNTIL+MAPOFFSET
 3807 2044 C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3808 2045 41474149 		.ascii "AGAIN"
 3808      4E
 3809 204a 00BF     		.p2align 2 	
 3810              	AGAIN:
 3811 204c 42F804ED 		_NEST
 3812 2050 FFF77CFF 		BL	COMPI
 3813 2054 D8F9FF17 		.word	BRAN+MAPOFFSET
 3814 2058 FFF752FF 		BL	COMMA
 3815 205c 52F804FB 		_UNNEST
 3816              	
 3817              	//    IF	  ( -- A )
 3818              	// 	Begin a conditional branch structure.
 3819              	
 3820 2060 44140018 		.word	_AGAIN+MAPOFFSET
 3821 2064 C2       	_IFF:	.byte  COMPO+IMEDD+2
 3822 2065 4946     		.ascii "IF"
 3823 2067 00       		.p2align 2 	
 3824              	IFF:
 3825 2068 42F804ED 		_NEST
 3826 206c FFF76EFF 		BL	COMPI
 3827 2070 C0F9FF17 		.word	QBRAN+MAPOFFSET
 3828 2074 FEF7C0FE 		BL	HERE
 3829 2078 FEF77FFA 		_DOLIT
 3830 207c 04000000 		.word	4
 3831 2080 FEF75EFD 		BL	CPP
 3832 2084 FEF792FC 		BL	PSTOR
 3833 2088 52F804FB 		_UNNEST
 3834              	
 3835              	//    AHEAD	( -- A )
 3836              	// 	Compile a forward branch instruction.
 3837              	
ARM GAS  stm32eforth.s 			page 72


 3838 208c 64140018 		.word	_IFF+MAPOFFSET
 3839 2090 C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 3840 2091 41484541 		.ascii "AHEAD"
 3840      44
 3841 2096 00BF     		.p2align 2 	
 3842              	AHEAD:
 3843 2098 42F804ED 		_NEST
 3844 209c FFF756FF 		BL	COMPI
 3845 20a0 D8F9FF17 		.word	BRAN+MAPOFFSET
 3846 20a4 FEF7A8FE 		BL	HERE
 3847 20a8 FEF767FA 		_DOLIT
 3848 20ac 04000000 		.word	4
 3849 20b0 FEF746FD 		BL	CPP
 3850 20b4 FEF77AFC 		BL	PSTOR
 3851 20b8 52F804FB 		_UNNEST
 3852              	
 3853              	//    REPEAT	( A a -- )
 3854              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3855              	
 3856 20bc 90140018 		.word	_AHEAD+MAPOFFSET
 3857 20c0 C6       	_REPEA:	.byte  COMPO+IMEDD+6
 3858 20c1 52455045 		.ascii "REPEAT"
 3858      4154
 3859 20c7 00       		.p2align 2 	
 3860              	REPEA:
 3861 20c8 42F804ED 		_NEST
 3862 20cc FFF7BEFF 		BL	AGAIN
 3863 20d0 FEF792FE 		BL	HERE
 3864 20d4 FEF7E6FA 		BL	SWAP
 3865 20d8 FEF78EFA 		BL	STORE
 3866 20dc 52F804FB 		_UNNEST
 3867              	
 3868              	//    THEN	( A -- )
 3869              	// 	Terminate a conditional branch structure.
 3870              	
 3871 20e0 C0140018 		.word	_REPEA+MAPOFFSET
 3872 20e4 C4       	_THENN:	.byte  COMPO+IMEDD+4
 3873 20e5 5448454E 		.ascii "THEN"
 3874 20e9 0000BF   		.p2align 2 	
 3875              	THENN:
 3876 20ec 42F804ED 		_NEST
 3877 20f0 FEF782FE 		BL	HERE
 3878 20f4 FEF7D6FA 		BL	SWAP
 3879 20f8 FEF77EFA 		BL	STORE
 3880 20fc 52F804FB 		_UNNEST
 3881              	
 3882              	//    AFT	 ( a -- a A )
 3883              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3884              	
 3885 2100 E4140018 		.word	_THENN+MAPOFFSET
 3886 2104 C3       	_AFT:	.byte  COMPO+IMEDD+3
 3887 2105 414654   		.ascii "AFT"
 3888              		.p2align 2 	
 3889              	AFT:
 3890 2108 42F804ED 		_NEST
 3891 210c FEF7BAFA 		BL	DROP
 3892 2110 FFF7C2FF 		BL	AHEAD
ARM GAS  stm32eforth.s 			page 73


 3893 2114 FFF76EFF 		BL	BEGIN
 3894 2118 FEF7C4FA 		BL	SWAP
 3895 211c 52F804FB 		_UNNEST
 3896              	
 3897              	//    ELSE	( A -- A )
 3898              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3899              	
 3900 2120 04150018 		.word	_AFT+MAPOFFSET
 3901 2124 C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 3902 2125 454C5345 		.ascii "ELSE"
 3903 2129 0000BF   		.p2align 2 	
 3904              	ELSEE:
 3905 212c 42F804ED 		_NEST
 3906 2130 FFF7B2FF 		BL	AHEAD
 3907 2134 FEF7B6FA 		BL	SWAP
 3908 2138 FFF7D8FF 		BL	THENN
 3909 213c 52F804FB 		_UNNEST
 3910              	
 3911              	//    WHILE	( a -- A a )
 3912              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3913              	
 3914 2140 24150018 		.word	_ELSEE+MAPOFFSET
 3915 2144 C5       	_WHILE:	.byte  COMPO+IMEDD+5
 3916 2145 5748494C 		.ascii "WHILE"
 3916      45
 3917 214a 00BF     		.p2align 2 	
 3918              	WHILE:
 3919 214c 42F804ED 		_NEST
 3920 2150 FFF78AFF 		BL	IFF
 3921 2154 FEF7A6FA 		BL	SWAP
 3922 2158 52F804FB 		_UNNEST
 3923              	
 3924              	//    ABORT"	( -- //  string> )
 3925              	// 	Conditional abort with an error message.
 3926              	
 3927 215c 44150018 		.word	_WHILE+MAPOFFSET
 3928 2160 86       	_ABRTQ:	.byte  IMEDD+6
 3929 2161 41424F52 		.ascii "ABORT\""
 3929      5422
 3930 2167 00       		.p2align 2 	
 3931              	ABRTQ:
 3932 2168 42F804ED 		_NEST
 3933 216c FFF7EEFE 		BL	COMPI
 3934 2170 E80D0018 		.word	ABORQ+MAPOFFSET
 3935 2174 FFF70EFF 		BL	STRCQ
 3936 2178 52F804FB 		_UNNEST
 3937              	
 3938              	//    $"	( -- //  string> )
 3939              	// 	Compile an inlineDCB literal.
 3940              	
 3941 217c 60150018 		.word	_ABRTQ+MAPOFFSET
 3942 2180 82       	_STRQ:	.byte  IMEDD+2
 3943 2181 2422     		.byte	'$','"'
 3944 2183 00       		.p2align 2 	
 3945              	STRQ:
 3946 2184 42F804ED 		_NEST
 3947 2188 FFF7E0FE 		BL	COMPI
ARM GAS  stm32eforth.s 			page 74


 3948 218c 9C070018 		.word	STRQP+MAPOFFSET
 3949 2190 FFF700FF 		BL	STRCQ
 3950 2194 52F804FB 		_UNNEST
 3951              	
 3952              	//    ."	( -- //  string> )
 3953              	// 	Compile an inline word  literal to be typed out at run time.
 3954              	
 3955 2198 80150018 		.word	_STRQ+MAPOFFSET
 3956 219c C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 3957 219d 2E22     		.byte	'.','"'
 3958 219f 00       		.p2align 2 	
 3959              	DOTQ:
 3960 21a0 42F804ED 		_NEST
 3961 21a4 FFF7D2FE 		BL	COMPI
 3962 21a8 B8070018 		.word	DOTQP+MAPOFFSET
 3963 21ac FFF7F2FE 		BL	STRCQ
 3964 21b0 52F804FB 		_UNNEST
 3965              	
 3966              	// **************************************************************************
 3967              	//  Name compiler
 3968              	
 3969              	//    ?UNIQUE	( a -- a )
 3970              	// 	Display a warning message if the word already exists.
 3971              	
 3972 21b4 9C150018 		.word	_DOTQ+MAPOFFSET
 3973 21b8 07       	_UNIQU:	.byte  7
 3974 21b9 3F554E49 		.ascii "?UNIQUE"
 3974      515545
 3975              		.p2align 2 	
 3976              	UNIQU:
 3977 21c0 42F804ED 		_NEST
 3978 21c4 FEF766FA 		BL	DUPP
 3979 21c8 FFF734FB 		BL	NAMEQ			// ?name exists
 3980 21cc FEF7F8F9 		BL	QBRAN
 3981 21d0 EC150018 		.word	UNIQ1+MAPOFFSET	// redefinitions are OK
 3982 21d4 FFF7F0F8 		BL	DOTQP
 3983 21d8 07       		.byte	7
 3984 21d9 20726544 		.ascii " reDef "		// but warn the user
 3984      656620
 3985              		.p2align 2 	
 3986 21e0 FEF76AFA 		BL	OVER
 3987 21e4 FEF706FC 		BL	COUNT
 3988 21e8 FFF796F8 		BL	TYPEE			// just in case its not planned
 3989              	UNIQ1:
 3990 21ec FEF74AFA 		BL	DROP
 3991 21f0 52F804FB 		_UNNEST
 3992              	
 3993              	//    $,n	 ( na -- )
 3994              	// 	Build a new dictionary name using the data at na.
 3995              	
 3996              	// 	.word	_UNIQU+MAPOFFSET
 3997              	// _SNAME	.byte  3
 3998              	// 	.ascii "$$,n"
 3999              	// 	.p2align 2 	
 4000              	SNAME:
 4001 21f4 42F804ED 		_NEST
 4002 21f8 FEF74CFA 		BL	DUPP			//  na na
ARM GAS  stm32eforth.s 			page 75


 4003 21fc FEF716FA 		BL	CAT			//  ?null input
 4004 2200 FEF7DEF9 		BL	QBRAN
 4005 2204 3C160018 		.word	SNAM1+MAPOFFSET
 4006 2208 FFF7DAFF 		BL	UNIQU			//  na
 4007 220c FEF7ACFC 		BL	LAST			//  na last
 4008 2210 FEF7FCF9 		BL	AT			//  na la
 4009 2214 FFF774FE 		BL	COMMA			//  na
 4010 2218 FEF73CFA 		BL	DUPP			//  na na
 4011 221c FEF7A4FC 		BL	LAST			//  na na last
 4012 2220 FEF7EAF9 		BL	STORE			//  na , save na for vocabulary link
 4013 2224 FEF7E6FB 		BL	COUNT			//  na+1 count
 4014 2228 FEF798FA 		BL	PLUS			//  na+1+count
 4015 222c FEF78CFD 		BL	ALGND			//  word boundary
 4016 2230 FEF786FC 		BL	CPP
 4017 2234 FEF7E0F9 		BL	STORE			//  top of dictionary now
 4018 2238 52F804FB 		_UNNEST
 4019              	SNAM1:
 4020 223c FFF7AEF8 		BL	STRQP
 4021 2240 07       		.byte	7
 4022 2241 206E616D 		.ascii " name? "
 4022      653F20
 4023 2248 FFF7BABB 		B.W	ABORT
 4024              	
 4025              	//    $COMPILE	( a -- )
 4026              	// 	Compile next word to code dictionary as a token or literal.
 4027              	
 4028 224c B8150018 		.word	_UNIQU+MAPOFFSET
 4029 2250 08       	_SCOMP:	.byte  8
 4030 2251 2424434F 		.ascii "$$COMPILE"
 4030      4D50494C 
 4030      45
 4031 225a 00BF     		.p2align 2 	
 4032              	SCOMP:
 4033 225c 42F804ED 		_NEST
 4034 2260 FFF7E8FA 		BL	NAMEQ
 4035 2264 FEF702FB 		BL	QDUP	// defined?
 4036 2268 FEF7AAF9 		BL	QBRAN
 4037 226c 98160018 		.word	SCOM2+MAPOFFSET
 4038 2270 FEF7CCF9 		BL	AT
 4039 2274 FEF781F9 		_DOLIT
 4040 2278 80000000 		.word	IMEDD
 4041 227c FEF72EFA 		BL	ANDD	// immediate?
 4042 2280 FEF79EF9 		BL	QBRAN
 4043 2284 90160018 		.word	SCOM1+MAPOFFSET
 4044 2288 FEF786F9 		BL	EXECU
 4045 228c 52F804FB 		_UNNEST			// it's immediate, execute
 4046              	SCOM1:
 4047 2290 00F05AF8 		BL	CALLC			// it's not immediate, compile
 4048 2294 52F804FB 		_UNNEST	
 4049              	SCOM2:
 4050 2298 FEF75EFF 		BL	NUMBQ
 4051 229c FEF790F9 		BL	QBRAN
 4052 22a0 AC160018 		.word	SCOM3+MAPOFFSET
 4053 22a4 FFF76CFE 		BL	LITER
 4054 22a8 52F804FB 		_UNNEST			// compile number as integer
 4055              	SCOM3: // compilation abort 
 4056 22ac 00F002F8 		BL COLON_ABORT 
ARM GAS  stm32eforth.s 			page 76


 4057 22b0 FFF786BB 		B.W	ABORT			// error
 4058              	
 4059              	// before aborting a compilation 
 4060              	// reset HERE and LAST
 4061              	// to previous values.  
 4062              	COLON_ABORT:
 4063 22b4 42F804ED 		_NEST 
 4064 22b8 FEF756FC 		BL LAST 
 4065 22bc FEF7A6F9 		BL AT 
 4066 22c0 FEF7A2FA 		BL CELLM 
 4067 22c4 FEF7E6F9 		BL DUPP 
 4068 22c8 FEF73AFC 		BL CPP  
 4069 22cc FEF794F9 		BL STORE 
 4070 22d0 FEF79CF9 		BL AT 
 4071 22d4 FEF748FC 		BL LAST 
 4072 22d8 FEF78EF9 		BL STORE 
 4073 22dc 52F804FB 		_UNNEST 
 4074              	
 4075              	//    OVERT	( -- )
 4076              	// 	Link a new word into the current vocabulary.
 4077              	
 4078 22e0 50160018 		.word	_SCOMP+MAPOFFSET
 4079 22e4 05       	_OVERT:	.byte  5
 4080 22e5 4F564552 		.ascii "OVERT"
 4080      54
 4081 22ea 00BF     		.p2align 2 	
 4082              	OVERT:
 4083 22ec 42F804ED 		_NEST
 4084 22f0 FEF73AFC 		BL	LAST
 4085 22f4 FEF78AF9 		BL	AT
 4086 22f8 FEF718FC 		BL	CNTXT
 4087 22fc FEF77CF9 		BL	STORE
 4088 2300 52F804FB 		_UNNEST
 4089              	
 4090              	//    ; 	   ( -- )
 4091              	// 	Terminate a colon definition.
 4092              	
 4093 2304 E4160018 		.word	_OVERT+MAPOFFSET
 4094 2308 C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 4095 2309 3B       		.ascii ";"
 4096 230a 00BF     		.p2align 2 	
 4097              	SEMIS:
 4098 230c 42F804ED 		_NEST
 4099 2310 FEF733F9 		_DOLIT
 4100 2314 52F804FB 		_UNNEST
 4101 2318 FFF7F2FD 		BL	COMMA
 4102 231c FFF7B0FB 		BL	LBRAC
 4103 2320 FFF7E4FF 		BL	OVERT
 4104 2324 52F804FB 		_UNNEST
 4105              	
 4106              	//    ]	   ( -- )
 4107              	// 	Start compiling the words in the input stream.
 4108              	
 4109 2328 08170018 		.word	_SEMIS+MAPOFFSET
 4110 232c 01       	_RBRAC:	.byte  1
 4111 232d 5D       		.ascii "]"
 4112 232e 00BF     		.p2align 2 	
ARM GAS  stm32eforth.s 			page 77


 4113              	RBRAC:
 4114 2330 42F804ED 		_NEST
 4115 2334 FEF721F9 		_DOLIT
 4116 2338 5C160018 		.word	SCOMP+MAPOFFSET
 4117 233c FEF7E0FB 		BL	TEVAL
 4118 2340 FEF75AF9 		BL	STORE
 4119 2344 52F804FB 		_UNNEST
 4120              	
 4121              	//    BL.W	( ca -- )
 4122              	// 	Assemble a branch-link long instruction to ca.
 4123              	// 	BL.W is split into 2 16 bit instructions with 11 bit address fields.
 4124              	
 4125              	// 	.word	_RBRAC+MAPOFFSET
 4126              	// _CALLC	.byte  5
 4127              	// 	.ascii "call,"
 4128              	// 	.p2align 2 	
 4129              	CALLC:
 4130 2348 42F804ED 		_NEST
 4131 234c 25F00105 		BIC	R5,R5,#1		//  clear b0 of address from R>
 4132 2350 FEF752FD 		BL	HERE
 4133 2354 FEF70AFA 		BL	SUBB
 4134 2358 A5F10405 		SUB	R5,R5,#4		//  pc offset
 4135 235c 40F2FF70 		MOVW	R0,#0x7FF		//  11 bit mask
 4136 2360 2C46     		MOV	R4,R5
 4137 2362 4FEA1535 		LSR	R5,R5,#12		//  get bits 22-12
 4138 2366 05EA0005 		AND	R5,R5,R0
 4139 236a 4FEAC434 		LSL	R4,R4,#15		//  get bits 11-1
 4140 236e 45EA0405 		ORR	R5,R5,R4
 4141 2372 45F07845 		ORR	R5,R5,#0xF8000000
 4142 2376 45F47045 		ORR	R5,R5,#0xF000
 4143 237a FFF7C1FD 		BL	COMMA			//  assemble BL.W instruction
 4144 237e 52F804FB 		_UNNEST
 4145              	
 4146              	
 4147              	// 	:	( -- //  string> )
 4148              	// 	Start a new colon definition using next word as its name.
 4149              	
 4150 2382 2C170018 		.word	_RBRAC+MAPOFFSET
 4151 2386 01       	_COLON:	.byte  1
 4152 2387 3A       		.ascii ":"
 4153              		.p2align 2 	
 4154              	COLON:
 4155 2388 42F804ED 		_NEST
 4156 238c FFF798F9 		BL	TOKEN
 4157 2390 FFF730FF 		BL	SNAME
 4158 2394 FEF7F1F8 		_DOLIT
 4159 2398 42F804ED 		_NEST
 4160 239c FFF7B0FD 		BL	COMMA
 4161 23a0 FFF7C6FF 		BL	RBRAC
 4162 23a4 52F804FB 		_UNNEST
 4163              	
 4164              	//    IMMEDIATE   ( -- )
 4165              	// 	Make the last compiled word an immediate word.
 4166              	
 4167 23a8 86170018 		.word	_COLON+MAPOFFSET
 4168 23ac 09       	_IMMED:	.byte  9
 4169 23ad 494D4D45 		.ascii "IMMEDIATE"
ARM GAS  stm32eforth.s 			page 78


 4169      44494154 
 4169      45
 4170 23b6 00BF     		.p2align 2 	
 4171              	IMMED:
 4172 23b8 42F804ED 		_NEST
 4173 23bc FEF7DDF8 		_DOLIT
 4174 23c0 80000000 		.word	IMEDD
 4175 23c4 FEF7D0FB 		BL	LAST
 4176 23c8 FEF720F9 		BL	AT
 4177 23cc FEF71EF9 		BL	AT
 4178 23d0 FEF78EF9 		BL	ORR
 4179 23d4 FEF7C8FB 		BL	LAST
 4180 23d8 FEF718F9 		BL	AT
 4181 23dc FEF70CF9 		BL	STORE
 4182 23e0 52F804FB 		_UNNEST
 4183              	
 4184              	// **************************************************************************
 4185              	//  Defining words
 4186              	
 4187              	//    CONSTANT	( u -- //  string> )
 4188              	// 	Compile a new constant.
 4189              	
 4190 23e4 AC170018 		.word	_IMMED+MAPOFFSET
 4191 23e8 08       	_CONST:	.byte  8
 4192 23e9 434F4E53 		.ascii "CONSTANT"
 4192      54414E54 
 4193 23f1 0000BF   		.p2align 2 	
 4194              	CONST:
 4195 23f4 42F804ED 		_NEST
 4196 23f8 FFF762F9 		BL	TOKEN
 4197 23fc FFF7FAFE 		BL	SNAME
 4198 2400 FFF774FF 		BL	OVERT
 4199 2404 FEF7B9F8 		_DOLIT
 4200 2408 42F804ED 		_NEST
 4201 240c FFF778FD 		BL	COMMA
 4202 2410 FEF7B3F8 		_DOLIT
 4203 2414 28FEFF17 		.word	DOCON+MAPOFFSET
 4204 2418 FFF796FF 		BL	CALLC
 4205 241c FFF770FD 		BL	COMMA
 4206 2420 52F804FB 		_UNNEST
 4207              	
 4208              	//    CREATE	( -- //  string> )
 4209              	// 	Compile a new array entry without allocating code space.
 4210              	
 4211 2424 E8170018 		.word	_CONST+MAPOFFSET
 4212 2428 06       	_CREAT:	.byte  6
 4213 2429 43524541 		.ascii "CREATE"
 4213      5445
 4214 242f 00       		.p2align 2 	
 4215              	CREAT:
 4216 2430 42F804ED 		_NEST
 4217 2434 FFF744F9 		BL	TOKEN
 4218 2438 FFF7DCFE 		BL	SNAME
 4219 243c FFF756FF 		BL	OVERT
 4220 2440 FEF79BF8 		_DOLIT
 4221 2444 42F804ED 		_NEST
 4222 2448 FFF75AFD 		BL	COMMA
ARM GAS  stm32eforth.s 			page 79


 4223 244c FEF795F8 		_DOLIT
 4224 2450 1CFEFF17 		.word	DOVAR+MAPOFFSET
 4225 2454 FFF778FF 		BL	CALLC
 4226 2458 52F804FB 		_UNNEST
 4227              	
 4228              	//    VARIABLE	( -- //  string> )
 4229              	// 	Compile a new variable initialized to 0.
 4230              	
 4231 245c 28180018 		.word	_CREAT+MAPOFFSET
 4232 2460 08       	_VARIA:	.byte  8
 4233 2461 56415249 		.ascii "VARIABLE"
 4233      41424C45 
 4234 2469 0000BF   		.p2align 2 	
 4235              	VARIA:
 4236 246c 42F804ED 		_NEST
 4237 2470 FFF7DEFF 		BL	CREAT
 4238 2474 FEF781F8 		_DOLIT
 4239 2478 00000000 		.word	0
 4240 247c FFF740FD 		BL	COMMA
 4241 2480 52F804FB 		_UNNEST
 4242              	
 4243              	// **************************************************************************
 4244              	//  Tools
 4245              	
 4246              	//    dm+	 ( a u -- a )
 4247              	// 	Dump u bytes from , leaving a+u on the stack.
 4248              	
 4249              	// 	.word	_VARIA+MAPOFFSET
 4250              	// _DMP	.byte  3
 4251              	// 	.ascii "dm+"
 4252              	// 	.p2align 2 	
 4253              	DMP:
 4254 2484 42F804ED 		_NEST
 4255 2488 FEF716F9 		BL	OVER
 4256 248c FEF775F8 		_DOLIT
 4257 2490 04000000 		.word	4
 4258 2494 FEF7B2FF 		BL	UDOTR			// display address
 4259 2498 FEF716FF 		BL	SPACE
 4260 249c FEF7DEF8 		BL	TOR			// start count down loop
 4261 24a0 00F00CB8 		B.W	PDUM2			// skip first pass
 4262              	PDUM1:
 4263 24a4 FEF7F6F8 	  BL	DUPP
 4264 24a8 FEF7C0F8 		BL	CAT
 4265 24ac FEF765F8 		_DOLIT
 4266 24b0 03000000 		.word	3
 4267 24b4 FEF7A2FF 		BL	UDOTR			// display numeric data
 4268 24b8 FEF77EF9 		BL	ONEP			// increment address
 4269              	PDUM2:
 4270 24bc FEF771F8 	  BL	DONXT
 4271 24c0 A4180018 		.word	PDUM1+MAPOFFSET	// loop till done
 4272 24c4 52F804FB 		_UNNEST
 4273              		.p2align 2 
 4274              	//    DUMP	( a u -- )
 4275              	// 	Dump u bytes from a, in a formatted manner.
 4276              	
 4277 24c8 60180018 		.word	_VARIA+MAPOFFSET
 4278 24cc 04       	_DUMP:	.byte  4
ARM GAS  stm32eforth.s 			page 80


 4279 24cd 44554D50 		.ascii "DUMP"
 4280 24d1 0000BF   		.p2align 2 	
 4281              	DUMP:
 4282 24d4 42F804ED 		_NEST
 4283 24d8 FEF7E4FA 		BL	BASE
 4284 24dc FEF796F8 		BL	AT
 4285 24e0 FEF7BCF8 		BL	TOR
 4286 24e4 FEF7E0FD 		BL	HEX			// save radix,set hex
 4287 24e8 FEF747F8 		_DOLIT
 4288 24ec 10000000 		.word	16
 4289 24f0 FEF7FAFB 		BL	SLASH			// change count to lines
 4290 24f4 FEF7B2F8 		BL	TOR
 4291 24f8 00F014B8 		B.W	DUMP4			// start count down loop
 4292              	DUMP1:
 4293 24fc FEF724FF 	  BL	CR
 4294 2500 FEF73BF8 		_DOLIT
 4295 2504 10000000 		.word	16
 4296 2508 FEF7CEF9 		BL	DDUP
 4297 250c FFF7BAFF 		BL	DMP			// display numeric
 4298 2510 FEF7B6F9 		BL	ROT
 4299 2514 FEF7B4F9 		BL	ROT
 4300 2518 FEF7D6FE 		BL	SPACE
 4301 251c FEF7D4FE 		BL	SPACE
 4302 2520 FEF7FAFE 		BL	TYPEE			// display printable characters
 4303              	DUMP4:
 4304 2524 FEF73DF8 	  BL	DONXT
 4305 2528 FC180018 		.word	DUMP1+MAPOFFSET	// loop till done
 4306              	DUMP3:
 4307 252c FEF7AAF8 	  BL	DROP
 4308 2530 FEF782F8 		BL	RFROM
 4309 2534 FEF7B6FA 		BL	BASE
 4310 2538 FEF75EF8 		BL	STORE			// restore radix
 4311 253c 52F804FB 		_UNNEST
 4312              	
 4313              	//    .S	  ( ... -- ... )
 4314              	// 	Display the contents of the data stack.
 4315              	
 4316 2540 CC180018 		.word	_DUMP+MAPOFFSET
 4317              	_DOTS:
 4318 2544 02       		.byte  2
 4319 2545 2E53     		.ascii ".S"
 4320 2547 00       		.p2align 2 	
 4321              	DOTS:
 4322 2548 42F804ED 		_NEST
 4323 254c FEF7BCFE 		BL	SPACE
 4324 2550 FEF72CFC 		BL	DEPTH			// stack depth
 4325 2554 FEF782F8 		BL	TOR			// start count down loop
 4326 2558 00F006B8 		B.W	DOTS2			// skip first pass
 4327              	DOTS1:
 4328 255c FEF776F8 		BL	RAT
 4329 2560 FEF736FC 		BL	PICK
 4330 2564 FEF776FF 		BL	DOT			// index stack, display contents
 4331              	DOTS2:
 4332 2568 FEF71BF8 		BL	DONXT
 4333 256c 5C190018 		.word	DOTS1+MAPOFFSET	// loop till done
 4334 2570 FEF7AAFE 		BL	SPACE
 4335 2574 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 81


 4336              	
 4337              	//    >NAME	( ca -- na | F )
 4338              	// 	Convert code address to a name address.
 4339              	
 4340 2578 44190018 		.word	_DOTS+MAPOFFSET
 4341 257c 05       	_TNAME:	.byte  5
 4342 257d 3E4E414D 		.ascii ">NAME"
 4342      45
 4343 2582 00BF     		.p2align 2 	
 4344              	TNAME:
 4345 2584 42F804ED 		_NEST
 4346 2588 FEF768F8 		BL	TOR			//  
 4347 258c FEF7CEFA 		BL	CNTXT			//  va
 4348 2590 FEF73CF8 		BL	AT			//  na
 4349              	TNAM1:
 4350 2594 FEF77EF8 		BL	DUPP			//  na na
 4351 2598 FEF712F8 		BL	QBRAN
 4352 259c C4190018 		.word	TNAM2+MAPOFFSET	//  vocabulary end, no match
 4353 25a0 FEF778F8 		BL	DUPP			//  na na
 4354 25a4 FFF79AF8 		BL	NAMET			//  na ca
 4355 25a8 FEF750F8 		BL	RAT			//  na ca code
 4356 25ac FEF7AAF8 		BL	XORR			//  na f --
 4357 25b0 FEF706F8 		BL	QBRAN
 4358 25b4 C4190018 		.word	TNAM2+MAPOFFSET
 4359 25b8 FEF726F9 		BL	CELLM			//  la 
 4360 25bc FEF726F8 		BL	AT			//  next_na
 4361 25c0 FFF7E8BF 		B.W	TNAM1
 4362              	TNAM2:	
 4363 25c4 FEF738F8 		BL	RFROM
 4364 25c8 FEF75CF8 		BL	DROP			//  0|na --
 4365 25cc 52F804FB 		_UNNEST			// 0
 4366              	
 4367              	//    .ID	 ( na -- )
 4368              	// 	Display the name at address.
 4369              	
 4370 25d0 7C190018 		.word	_TNAME+MAPOFFSET
 4371 25d4 03       	_DOTID:	.byte  3
 4372 25d5 2E4944   		.ascii ".ID"
 4373              		.p2align 2 	
 4374              	DOTID:
 4375 25d8 42F804ED 		_NEST
 4376 25dc FEF746F9 		BL	QDUP			// if zero no name
 4377 25e0 FDF7EEFF 		BL	QBRAN
 4378 25e4 001A0018 		.word	DOTI1+MAPOFFSET
 4379 25e8 FEF704FA 		BL	COUNT
 4380 25ec FDF7C5FF 		_DOLIT
 4381 25f0 1F000000 		.word	0x1F
 4382 25f4 FEF772F8 		BL	ANDD			// mask lexicon bits
 4383 25f8 FEF78EFE 		BL	TYPEE
 4384 25fc 52F804FB 		_UNNEST			// display name string
 4385              	DOTI1:
 4386 2600 FEF7DAFE 		BL	DOTQP
 4387 2604 09       		.byte	9
 4388 2605 207B6E6F 		.ascii " {noName}"
 4388      4E616D65 
 4388      7D
 4389 260e 00BF     		.p2align 2 	
ARM GAS  stm32eforth.s 			page 82


 4390 2610 52F804FB 		_UNNEST
 4391              	
 4392              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 4393              	.if WANT_SEE 
 4394              	//    SEE	 ( -- //  string> )
 4395              	// 	A simple decompiler.
 4396              	
 4397              		.word	_DOTID+MAPOFFSET
 4398              	_SEE:	.byte  3
 4399              		.ascii "SEE"
 4400              		.p2align 2 	
 4401              	SEE:
 4402              		_NEST
 4403              		BL	TICK	//  ca --, starting address
 4404              		BL	CR	
 4405              		_DOLIT
 4406              		.word	20
 4407              		BL	TOR
 4408              	SEE1:
 4409              		BL	CELLP			//  a
 4410              		BL	DUPP			//  a a
 4411              		BL	DECOMP		//  a
 4412              		BL	DONXT
 4413              		.word	SEE1+MAPOFFSET
 4414              		BL	DROP
 4415              		_UNNEST
 4416              	
 4417              	// 	DECOMPILE ( a -- )
 4418              	// 	Convert code in a.  Display name of command or as data.
 4419              	
 4420              		.word	_SEE+MAPOFFSET
 4421              	_DECOM:	.byte  9
 4422              		.ascii "DECOMPILE"
 4423              		.p2align 2 
 4424              		
 4425              	DECOMP:	
 4426              		_NEST
 4427              		BL	DUPP			//  a a
 4428              	// 	BL	TOR			//  a
 4429              		BL	AT			//  a code
 4430              		BL	DUPP			//  a code code
 4431              		_DOLIT
 4432              		.word	0xF800D000 //0xF800F800
 4433              		BL	ANDD
 4434              		_DOLIT
 4435              		.word	0xF000D000 //0xF800F000
 4436              		BL	EQUAL			//  a code ?
 4437              		BL	INVER 
 4438              		BL	QBRAN
 4439              		.word	DECOM2+MAPOFFSET	//  not a command
 4440              		//  a valid_code --, extract address and display name
 4441              		MOVW	R0,#0xFFE
 4442              		MOV	R4,R5
 4443              		LSL	R5,R5,#21		//  get bits 22-12
 4444              		ASR	R5,R5,#9		//  with sign extension
 4445              		LSR	R4,R4,#15		//  get bits 11-1
 4446              		AND	R4,R4,R0		//  retain only bits 11-1
ARM GAS  stm32eforth.s 			page 83


 4447              		ORR	R5,R5,R4		//  get bits 22-1
 4448              		NOP
 4449              		BL	OVER			//  a offset a
 4450              		BL	PLUS			//  a target-4
 4451              		BL	CELLP			//  a target
 4452              		BL	TNAME			//  a na/0 --, is it a name?
 4453              		BL	QDUP			//  name address or zero
 4454              		BL	QBRAN
 4455              		.word	DECOM1+MAPOFFSET
 4456              		BL	SPACE			//  a na
 4457              		BL	DOTID			//  a --, display name
 4458              	// 	BL	RFROM			//  a
 4459              		BL	DROP
 4460              		_UNNEST
 4461              	DECOM1:	// BL	RFROM		//  a
 4462              		BL	AT			//  data
 4463              		BL	UDOT			//  display data
 4464              		_UNNEST
 4465              	DECOM2:
 4466              		BL	UDOT
 4467              	// 	BL	RFROM
 4468              		BL	DROP
 4469              		_UNNEST
 4470              	
 4471              	//    WORDS	( -- )
 4472              	// 	Display the names in the context vocabulary.
 4473              	
 4474              		.word	_DECOM+MAPOFFSET
 4475              	.else 
 4476 2614 D4190018 		.word _DOTID+MAPOFFSET 
 4477              	.endif 
 4478 2618 05       	_WORDS:	.byte  5
 4479 2619 574F5244 		.ascii "WORDS"
 4479      53
 4480 261e 00BF     		.p2align 2 	
 4481              	WORDS:
 4482 2620 42F804ED 		_NEST
 4483 2624 FEF790FE 		BL	CR
 4484 2628 FEF780FA 		BL	CNTXT
 4485 262c FDF7EEFF 		BL	AT			// only in context
 4486              	WORS1:
 4487 2630 FEF71CF9 		BL	QDUP			// ?at end of list
 4488 2634 FDF7C4FF 		BL	QBRAN
 4489 2638 541A0018 		.word	WORS2+MAPOFFSET
 4490 263c FEF72AF8 		BL	DUPP
 4491 2640 FEF742FE 		BL	SPACE
 4492 2644 FFF7C8FF 		BL	DOTID			// display a name
 4493 2648 FEF7DEF8 		BL	CELLM
 4494 264c FDF7DEFF 		BL	AT
 4495 2650 FFF7EEBF 		B.W	WORS1
 4496              	WORS2:
 4497 2654 52F804FB 		_UNNEST
 4498              	
 4499              	// **************************************************************************
 4500              	//  cold start
 4501              	
 4502              	//    VER	 ( -- n )
ARM GAS  stm32eforth.s 			page 84


 4503              	// 	Return the version number of this implementation.
 4504              	
 4505              	// 	.word	_WORDS+MAPOFFSET
 4506              	// _VERSN	.byte  3
 4507              	// 	.ascii "VER"
 4508              	// 	.p2align 2 	
 4509              	VERSN:
 4510 2658 42F804ED 		_NEST
 4511 265c FDF78DFF 		_DOLIT
 4512 2660 00010000 		.word	VER*256+EXT
 4513 2664 52F804FB 		_UNNEST
 4514              	
 4515              	//    hi	  ( -- )
 4516              	// 	Display the sign-on message of eForth.
 4517              	
 4518 2668 181A0018 		.word	_WORDS+MAPOFFSET
 4519 266c 02       	_HI:	.byte  2
 4520 266d 4849     		.ascii "HI"
 4521 266f 00       		.p2align 2 	
 4522              	HI:
 4523 2670 42F804ED 		_NEST
 4524 2674 FEF768FE 		BL	CR	// initialize I/O
 4525 2678 FEF79EFE 		BL	DOTQP
 4526 267c 17       		.byte	23
 4527 267d 626C7565 		.ascii "blue pill stm32eForth v" 
 4527      2070696C 
 4527      6C207374 
 4527      6D333265 
 4527      466F7274 
 4528              		.p2align 2
 4529 2694 FEF706FA 		BL	BASE
 4530 2698 FDF7B8FF 		BL	AT
 4531 269c FEF704FD 		BL	HEX	// save radix
 4532 26a0 FFF7DAFF 		BL	VERSN
 4533 26a4 FEF77CFC 		BL	BDIGS
 4534 26a8 FEF7A0FC 		BL	DIG
 4535 26ac FEF79EFC 		BL	DIG
 4536 26b0 FDF763FF 		_DOLIT
 4537 26b4 2E000000 		.word	'.'
 4538 26b8 FEF782FC 		BL	HOLD
 4539 26bc FEF7A6FC 		BL	DIGS
 4540 26c0 FEF7CAFC 		BL	EDIGS
 4541 26c4 FEF728FE 		BL	TYPEE	// format version number
 4542 26c8 FEF7ECF9 		BL	BASE
 4543 26cc FDF794FF 		BL	STORE
 4544 26d0 FEF73AFE 		BL	CR
 4545 26d4 52F804FB 		_UNNEST			// restore radix
 4546              	
 4547              	//    COLD	( -- )
 4548              	// 	The high level cold start sequence.
 4549              	
 4550 26d8 6C1A0018 		.word	_HI+MAPOFFSET
 4551 26dc 04       	LASTN:	.byte  4
 4552 26dd 434F4C44 		.ascii "COLD"
 4553 26e1 000000   		.p2align 2,0	
 4554              	COLD:
 4555              	//  Initiate Forth registers
ARM GAS  stm32eforth.s 			page 85


 4556 26e4 4FF00003 		MOV R3,#UPP&0xffff	//  user area 
 4557 26e8 C2F20003 	 	MOVT R3,#UPP>>16		  
 4558 26ec 03F59F42 		ADD R2,R3,#RPP&0xffff	// Forth return stack
 4559 26f0 03F59D41 		ADD R1,R3,#SPP&0xffff // Forth data stack
 4560 26f4 85EA0505 		EOR R5,R5,R5			//  tos=0
 4561 26f8 00BF     		NOP
 4562 26fa 42F804ED 		_NEST
 4563              	COLD1:
 4564 26fe FDF73CFF 		_DOLIT 
 4565 2702 00000000 		.word 0 
 4566 2706 FDF7F9FE 		BL ULED // turn off user LED 
 4567 270a FDF736FF 		_DOLIT
 4568 270e 00040000 		.word	UZERO
 4569 2712 FDF732FF 		_DOLIT
 4570 2716 00000020 		.word	UPP
 4571 271a FDF72EFF 		_DOLIT
 4572 271e 50000000 		.word	ULAST-UZERO
 4573 2722 FEF7B1FB 		BL	MOVE 			// initialize user area
 4574 2726 FFF70FFA 		BL	PRESE			// initialize stack and TIB
 4575 272a FFF7CDFA 		BL	IMGQ			// check if user image saved
 4576 272e FDF747FF 		BL	QBRAN 
 4577 2732 381B0018 		.word 1f+MAPOFFSET
 4578 2736 00BF     		NOP 
 4579              	//	BL	LOAD_IMG 
 4580 2738 FEF7AAF9 	1:	BL	TBOOT
 4581 273c FEF780FB 		BL	ATEXE			// application boot
 4582 2740 FFF7D4FD 		BL	OVERT
 4583 2744 FFF70CBA 		B.W	QUIT			// start interpretation
 4584              	COLD2:
 4585              		.p2align 3 	
 4586              	CTOP:
 4587 2748 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4588 274c AFF30080 		.p2align 10 
 4588      AFF30080 
 4588      AFF30080 
 4588      AFF30080 
 4588      AFF30080 
 4589              	USER: // user image save 
 4590 2800 FFFFFFFF 		.word 0XFFFFFFFF
 4591              	
 4592              	  .end 
ARM GAS  stm32eforth.s 			page 86


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  stm32eforth.s 			page 87


board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
board/blue-pill/stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
board/blue-pill/stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
board/blue-pill/stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
board/blue-pill/stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
board/blue-pill/stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
board/blue-pill/stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
board/blue-pill/stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
board/blue-pill/stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
board/blue-pill/stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
board/blue-pill/stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
board/blue-pill/stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
board/blue-pill/stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
board/blue-pill/stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
board/blue-pill/stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
board/blue-pill/stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
board/blue-pill/stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32eforth.s:83     *ABS*:0000000040011000 LED_GPIO
       stm32eforth.s:84     *ABS*:000000000000000d LED_PIN
       stm32eforth.s:85     *ABS*:0000000040013800 UART
       stm32eforth.s:88     *ABS*:0000000020004e80 SPP
       stm32eforth.s:89     *ABS*:0000000020004e80 TIBB
       stm32eforth.s:90     *ABS*:0000000020004f80 RPP
       stm32eforth.s:91     *ABS*:0000000020000000 UPP
       stm32eforth.s:92     *ABS*:0000000020000100 DTOP
       stm32eforth.s:93     *ABS*:0000000020004e00 DEND
       stm32eforth.s:94     *ABS*:0000000020000000 RAMOFFSET
       stm32eforth.s:95     *ABS*:0000000020005000 RAMEND
       stm32eforth.s:96     *ABS*:0000000008000c00 FLASHOFFSET
       stm32eforth.s:99     *ABS*:0000000017fff400 MAPOFFSET
       stm32eforth.s:104    *ABS*:0000000000000004 SEED_OFS
       stm32eforth.s:105    *ABS*:0000000000000008 TICKS_OFS
       stm32eforth.s:106    *ABS*:000000000000000c TIMER_OFS
       stm32eforth.s:107    *ABS*:0000000000000010 TORAM_OFS
       stm32eforth.s:108    *ABS*:0000000000000014 BOOT_OFS
       stm32eforth.s:109    *ABS*:0000000000000018 BASE_OFS
       stm32eforth.s:110    *ABS*:000000000000001c TMP_OFS
       stm32eforth.s:111    *ABS*:0000000000000020 SPAN_OFS
       stm32eforth.s:112    *ABS*:0000000000000024 TOIN_OFS
       stm32eforth.s:113    *ABS*:0000000000000028 NTIB_OFS
       stm32eforth.s:114    *ABS*:000000000000002c TIB_OFS
       stm32eforth.s:115    *ABS*:0000000000000030 EVAL_OFS
       stm32eforth.s:116    *ABS*:0000000000000034 HLD_OFS
       stm32eforth.s:117    *ABS*:0000000000000038 CTXT_OFS
       stm32eforth.s:118    *ABS*:000000000000003c FORTH_CTOP_OFS
       stm32eforth.s:119    *ABS*:0000000000000040 USER_CTOP_OFS
       stm32eforth.s:120    *ABS*:0000000000000044 LASTN_OFS
ARM GAS  stm32eforth.s 			page 88


       stm32eforth.s:121    *ABS*:0000000000000048 VARS_END_OFS
       stm32eforth.s:157    .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:291    .text.reset_handler:0000000000000000 reset_handler
       stm32eforth.s:248    .text.default_handler:0000000000000000 default_handler
       stm32eforth.s:270    .text.default_handler:0000000000000034 systick_handler
       stm32eforth.s:246    .text.default_handler:0000000000000000 $t
       stm32eforth.s:258    .text.default_handler:000000000000001c exception_msg
       stm32eforth.s:613    .text.reset_handler:0000000000000558 EMIT
       stm32eforth.s:259    .text.default_handler:000000000000001c $d
       stm32eforth.s:280    .text.default_handler:000000000000004e systick_exit
       stm32eforth.s:289    .text.reset_handler:0000000000000000 $t
       stm32eforth.s:403    .text.reset_handler:00000000000000e4 remap
       stm32eforth.s:303    .text.reset_handler:0000000000000014 init_devices
       stm32eforth.s:298    .text.reset_handler:0000000000000010 forth_entry
       stm32eforth.s:299    .text.reset_handler:0000000000000010 $d
       stm32eforth.s:4554   .text.reset_handler:00000000000026e4 COLD
       stm32eforth.s:302    .text.reset_handler:0000000000000014 $t
       stm32eforth.s:318    .text.reset_handler:0000000000000032 wait_hserdy
       stm32eforth.s:338    .text.reset_handler:000000000000004c wait_pllrdy
       stm32eforth.s:351    .text.reset_handler:000000000000006c wait_sws
       stm32eforth.s:423    .text.reset_handler:000000000000011c remap_dest
       stm32eforth.s:421    .text.reset_handler:0000000000000118 remap_src
       stm32eforth.s:4586   .text.reset_handler:0000000000002748 CTOP
       stm32eforth.s:469    .text.reset_handler:0000000000000400 UZERO
       stm32eforth.s:422    .text.reset_handler:0000000000000118 $d
       stm32eforth.s:429    *ABS*:0000000000000001 VER
       stm32eforth.s:430    *ABS*:0000000000000000 EXT
       stm32eforth.s:434    *ABS*:0000000000000040 COMPO
       stm32eforth.s:435    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:436    *ABS*:00000000ffffff1f MASKK
       stm32eforth.s:438    *ABS*:0000000000000004 CELLL
       stm32eforth.s:439    *ABS*:000000000000000a BASEE
       stm32eforth.s:440    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:442    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:443    *ABS*:000000000000000a LF
       stm32eforth.s:444    *ABS*:000000000000000d CRR
       stm32eforth.s:445    *ABS*:000000000000001b ERR
       stm32eforth.s:446    *ABS*:0000000000000027 TIC
       stm32eforth.s:467    .text.reset_handler:0000000000000120 $t
       stm32eforth.s:470    .text.reset_handler:0000000000000400 $d
       stm32eforth.s:4522   .text.reset_handler:0000000000002670 HI
       stm32eforth.s:3188   .text.reset_handler:0000000000001a24 INTER
       stm32eforth.s:4551   .text.reset_handler:00000000000026dc LASTN
       stm32eforth.s:489    .text.reset_handler:0000000000000450 ULAST
       stm32eforth.s:503    .text.reset_handler:0000000000000450 $d
       stm32eforth.s:504    .text.reset_handler:0000000000000454 _RAND
       stm32eforth.s:507    .text.reset_handler:000000000000045c RAND
       stm32eforth.s:1459   .text.reset_handler:0000000000000a40 SEED
       stm32eforth.s:749    .text.reset_handler:000000000000060c AT
       stm32eforth.s:843    .text.reset_handler:0000000000000694 DUPP
       stm32eforth.s:736    .text.reset_handler:00000000000005f8 STORE
       stm32eforth.s:1242   .text.reset_handler:00000000000008fc ABSS
       stm32eforth.s:854    .text.reset_handler:00000000000006a4 SWAP
       stm32eforth.s:1798   .text.reset_handler:0000000000000cd0 MODD
       stm32eforth.s:527    .text.reset_handler:000000000000049c $d
       stm32eforth.s:528    .text.reset_handler:00000000000004a0 _REBOOT
       stm32eforth.s:531    .text.reset_handler:00000000000004a8 REBOOT
ARM GAS  stm32eforth.s 			page 89


       stm32eforth.s:538    .text.reset_handler:00000000000004b8 scb_adr
       stm32eforth.s:539    .text.reset_handler:00000000000004b8 $d
       stm32eforth.s:544    .text.reset_handler:00000000000004c0 _PAUSE
       stm32eforth.s:546    .text.reset_handler:00000000000004c6 $t
       stm32eforth.s:547    .text.reset_handler:00000000000004c8 PAUSE
       stm32eforth.s:1481   .text.reset_handler:0000000000000a68 TIMER
       stm32eforth.s:551    .text.reset_handler:00000000000004d4 PAUSE_LOOP
       stm32eforth.s:696    .text.reset_handler:00000000000005c0 QBRAN
       stm32eforth.s:555    .text.reset_handler:00000000000004e0 $d
       stm32eforth.s:558    .text.reset_handler:00000000000004ec PAUSE_EXIT
       stm32eforth.s:714    .text.reset_handler:00000000000005d8 BRAN
       stm32eforth.s:556    .text.reset_handler:00000000000004e4 $t
       stm32eforth.s:557    .text.reset_handler:00000000000004e8 $d
       stm32eforth.s:559    .text.reset_handler:00000000000004ec $t
       stm32eforth.s:563    .text.reset_handler:00000000000004f0 $d
       stm32eforth.s:564    .text.reset_handler:00000000000004f4 _ULED
       stm32eforth.s:568    .text.reset_handler:00000000000004fc ULED
       stm32eforth.s:577    .text.reset_handler:0000000000000514 ULED_OFF
       stm32eforth.s:583    .text.reset_handler:0000000000000518 $d
       stm32eforth.s:584    .text.reset_handler:000000000000051c _QRX
       stm32eforth.s:587    .text.reset_handler:0000000000000524 QKEY
       stm32eforth.s:588    .text.reset_handler:0000000000000524 QRX
       stm32eforth.s:599    .text.reset_handler:0000000000000544 QRX1
       stm32eforth.s:608    .text.reset_handler:000000000000054c $d
       stm32eforth.s:609    .text.reset_handler:0000000000000550 _TXSTO
       stm32eforth.s:612    .text.reset_handler:0000000000000558 TXSTO
       stm32eforth.s:614    .text.reset_handler:0000000000000558 TECHO
       stm32eforth.s:617    .text.reset_handler:0000000000000560 TX1
       stm32eforth.s:631    .text.reset_handler:0000000000000570 $d
       stm32eforth.s:632    .text.reset_handler:0000000000000574 _NOP
       stm32eforth.s:634    .text.reset_handler:0000000000000578 $t
       stm32eforth.s:635    .text.reset_handler:0000000000000578 NOP
       stm32eforth.s:646    .text.reset_handler:000000000000057a DOLIT
       stm32eforth.s:656    .text.reset_handler:000000000000058c $d
       stm32eforth.s:657    .text.reset_handler:0000000000000590 _EXECU
       stm32eforth.s:659    .text.reset_handler:0000000000000598 $t
       stm32eforth.s:660    .text.reset_handler:0000000000000598 EXECU
       stm32eforth.s:674    .text.reset_handler:00000000000005a2 DONXT
       stm32eforth.s:681    .text.reset_handler:00000000000005b0 NEXT1
       stm32eforth.s:703    .text.reset_handler:00000000000005d2 QBRAN1
       stm32eforth.s:722    .text.reset_handler:00000000000005e2 $d
       stm32eforth.s:723    .text.reset_handler:00000000000005e6 _EXIT
       stm32eforth.s:726    .text.reset_handler:00000000000005ec EXIT
       stm32eforth.s:732    .text.reset_handler:00000000000005f0 $d
       stm32eforth.s:733    .text.reset_handler:00000000000005f4 _STORE
       stm32eforth.s:735    .text.reset_handler:00000000000005f6 $t
       stm32eforth.s:745    .text.reset_handler:0000000000000604 $d
       stm32eforth.s:746    .text.reset_handler:0000000000000608 _AT
       stm32eforth.s:748    .text.reset_handler:000000000000060a $t
       stm32eforth.s:756    .text.reset_handler:0000000000000610 $d
       stm32eforth.s:757    .text.reset_handler:0000000000000614 _CSTOR
       stm32eforth.s:760    .text.reset_handler:0000000000000618 CSTOR
       stm32eforth.s:769    .text.reset_handler:0000000000000624 $d
       stm32eforth.s:770    .text.reset_handler:0000000000000628 _CAT
       stm32eforth.s:773    .text.reset_handler:000000000000062c CAT
       stm32eforth.s:780    .text.reset_handler:0000000000000630 $d
       stm32eforth.s:781    .text.reset_handler:0000000000000634 _RFROM
ARM GAS  stm32eforth.s 			page 90


       stm32eforth.s:784    .text.reset_handler:0000000000000638 RFROM
       stm32eforth.s:792    .text.reset_handler:0000000000000642 $d
       stm32eforth.s:793    .text.reset_handler:0000000000000646 _RAT
       stm32eforth.s:796    .text.reset_handler:000000000000064c RAT
       stm32eforth.s:804    .text.reset_handler:0000000000000654 $d
       stm32eforth.s:805    .text.reset_handler:0000000000000658 _TOR
       stm32eforth.s:808    .text.reset_handler:000000000000065c TOR
       stm32eforth.s:816    .text.reset_handler:0000000000000666 $d
       stm32eforth.s:817    .text.reset_handler:000000000000066a _SPAT
       stm32eforth.s:819    .text.reset_handler:000000000000066e $t
       stm32eforth.s:820    .text.reset_handler:0000000000000670 SPAT
       stm32eforth.s:828    .text.reset_handler:0000000000000678 $d
       stm32eforth.s:829    .text.reset_handler:000000000000067c _DROP
       stm32eforth.s:832    .text.reset_handler:0000000000000684 DROP
       stm32eforth.s:839    .text.reset_handler:000000000000068a $d
       stm32eforth.s:840    .text.reset_handler:000000000000068e _DUPP
       stm32eforth.s:842    .text.reset_handler:0000000000000692 $t
       stm32eforth.s:850    .text.reset_handler:000000000000069a $d
       stm32eforth.s:851    .text.reset_handler:000000000000069e _SWAP
       stm32eforth.s:863    .text.reset_handler:00000000000006ac $d
       stm32eforth.s:864    .text.reset_handler:00000000000006b0 _OVER
       stm32eforth.s:867    .text.reset_handler:00000000000006b8 OVER
       stm32eforth.s:875    .text.reset_handler:00000000000006c0 $d
       stm32eforth.s:876    .text.reset_handler:00000000000006c4 _ZLESS
       stm32eforth.s:879    .text.reset_handler:00000000000006c8 ZLESS
       stm32eforth.s:887    .text.reset_handler:00000000000006d2 $d
       stm32eforth.s:888    .text.reset_handler:00000000000006d6 _ANDD
       stm32eforth.s:890    .text.reset_handler:00000000000006da $t
       stm32eforth.s:891    .text.reset_handler:00000000000006dc ANDD
       stm32eforth.s:899    .text.reset_handler:00000000000006e6 $d
       stm32eforth.s:900    .text.reset_handler:00000000000006ea _ORR
       stm32eforth.s:903    .text.reset_handler:00000000000006f0 ORR
       stm32eforth.s:911    .text.reset_handler:00000000000006fa $d
       stm32eforth.s:912    .text.reset_handler:00000000000006fe _XORR
       stm32eforth.s:914    .text.reset_handler:0000000000000702 $t
       stm32eforth.s:915    .text.reset_handler:0000000000000704 XORR
       stm32eforth.s:923    .text.reset_handler:000000000000070e $d
       stm32eforth.s:924    .text.reset_handler:0000000000000712 _UPLUS
       stm32eforth.s:926    .text.reset_handler:0000000000000716 $t
       stm32eforth.s:927    .text.reset_handler:0000000000000718 UPLUS
       stm32eforth.s:938    .text.reset_handler:0000000000000728 $d
       stm32eforth.s:939    .text.reset_handler:000000000000072c _RSHIFT
       stm32eforth.s:942    .text.reset_handler:0000000000000734 RSHIFT
       stm32eforth.s:950    .text.reset_handler:000000000000073e $d
       stm32eforth.s:951    .text.reset_handler:0000000000000742 _LSHIFT
       stm32eforth.s:954    .text.reset_handler:000000000000074c LSHIFT
       stm32eforth.s:962    .text.reset_handler:0000000000000756 $d
       stm32eforth.s:963    .text.reset_handler:000000000000075a _PLUS
       stm32eforth.s:965    .text.reset_handler:000000000000075c $t
       stm32eforth.s:966    .text.reset_handler:000000000000075c PLUS
       stm32eforth.s:974    .text.reset_handler:0000000000000764 $d
       stm32eforth.s:975    .text.reset_handler:0000000000000768 _SUBB
       stm32eforth.s:977    .text.reset_handler:000000000000076a $t
       stm32eforth.s:978    .text.reset_handler:000000000000076c SUBB
       stm32eforth.s:986    .text.reset_handler:0000000000000776 $d
       stm32eforth.s:987    .text.reset_handler:000000000000077a _STAR
       stm32eforth.s:989    .text.reset_handler:000000000000077c $t
ARM GAS  stm32eforth.s 			page 91


       stm32eforth.s:990    .text.reset_handler:000000000000077c STAR
       stm32eforth.s:998    .text.reset_handler:0000000000000786 $d
       stm32eforth.s:999    .text.reset_handler:000000000000078a _UMSTA
       stm32eforth.s:1001   .text.reset_handler:000000000000078e $t
       stm32eforth.s:1002   .text.reset_handler:0000000000000790 UMSTA
       stm32eforth.s:1012   .text.reset_handler:000000000000079c $d
       stm32eforth.s:1013   .text.reset_handler:00000000000007a0 _MSTAR
       stm32eforth.s:1016   .text.reset_handler:00000000000007a4 MSTAR
       stm32eforth.s:1026   .text.reset_handler:00000000000007b0 $d
       stm32eforth.s:1027   .text.reset_handler:00000000000007b4 _ONEP
       stm32eforth.s:1030   .text.reset_handler:00000000000007b8 ONEP
       stm32eforth.s:1037   .text.reset_handler:00000000000007be $d
       stm32eforth.s:1038   .text.reset_handler:00000000000007c2 _ONEM
       stm32eforth.s:1041   .text.reset_handler:00000000000007c8 ONEM
       stm32eforth.s:1048   .text.reset_handler:00000000000007ce $d
       stm32eforth.s:1049   .text.reset_handler:00000000000007d2 _TWOP
       stm32eforth.s:1052   .text.reset_handler:00000000000007d8 TWOP
       stm32eforth.s:1059   .text.reset_handler:00000000000007de $d
       stm32eforth.s:1060   .text.reset_handler:00000000000007e2 _TWOM
       stm32eforth.s:1063   .text.reset_handler:00000000000007e8 TWOM
       stm32eforth.s:1070   .text.reset_handler:00000000000007ee $d
       stm32eforth.s:1071   .text.reset_handler:00000000000007f2 _CELLP
       stm32eforth.s:1073   .text.reset_handler:00000000000007f8 $t
       stm32eforth.s:1074   .text.reset_handler:00000000000007f8 CELLP
       stm32eforth.s:1081   .text.reset_handler:00000000000007fe $d
       stm32eforth.s:1082   .text.reset_handler:0000000000000802 _CELLM
       stm32eforth.s:1084   .text.reset_handler:0000000000000808 $t
       stm32eforth.s:1085   .text.reset_handler:0000000000000808 CELLM
       stm32eforth.s:1092   .text.reset_handler:000000000000080e $d
       stm32eforth.s:1093   .text.reset_handler:0000000000000812 _BLANK
       stm32eforth.s:1096   .text.reset_handler:0000000000000818 BLANK
       stm32eforth.s:1104   .text.reset_handler:0000000000000822 $d
       stm32eforth.s:1105   .text.reset_handler:0000000000000826 _CELLS
       stm32eforth.s:1107   .text.reset_handler:000000000000082c $t
       stm32eforth.s:1108   .text.reset_handler:000000000000082c CELLS
       stm32eforth.s:1115   .text.reset_handler:0000000000000832 $d
       stm32eforth.s:1116   .text.reset_handler:0000000000000836 _CELLSL
       stm32eforth.s:1118   .text.reset_handler:000000000000083c $t
       stm32eforth.s:1119   .text.reset_handler:000000000000083c CELLSL
       stm32eforth.s:1126   .text.reset_handler:0000000000000842 $d
       stm32eforth.s:1127   .text.reset_handler:0000000000000846 _TWOST
       stm32eforth.s:1130   .text.reset_handler:000000000000084c TWOST
       stm32eforth.s:1137   .text.reset_handler:0000000000000852 $d
       stm32eforth.s:1138   .text.reset_handler:0000000000000856 _TWOSL
       stm32eforth.s:1141   .text.reset_handler:000000000000085c TWOSL
       stm32eforth.s:1148   .text.reset_handler:0000000000000862 $d
       stm32eforth.s:1149   .text.reset_handler:0000000000000866 _QDUP
       stm32eforth.s:1152   .text.reset_handler:000000000000086c QDUP
       stm32eforth.s:1161   .text.reset_handler:0000000000000876 $d
       stm32eforth.s:1162   .text.reset_handler:000000000000087a _ROT
       stm32eforth.s:1164   .text.reset_handler:000000000000087e $t
       stm32eforth.s:1165   .text.reset_handler:0000000000000880 ROT
       stm32eforth.s:1175   .text.reset_handler:000000000000088a $d
       stm32eforth.s:1176   .text.reset_handler:000000000000088e _DDROP
       stm32eforth.s:1178   .text.reset_handler:0000000000000894 $t
       stm32eforth.s:1179   .text.reset_handler:0000000000000894 DDROP
       stm32eforth.s:1187   .text.reset_handler:000000000000089e $d
ARM GAS  stm32eforth.s 			page 92


       stm32eforth.s:1188   .text.reset_handler:00000000000008a2 _DDUP
       stm32eforth.s:1191   .text.reset_handler:00000000000008a8 DDUP
       stm32eforth.s:1200   .text.reset_handler:00000000000008b4 $d
       stm32eforth.s:1201   .text.reset_handler:00000000000008b8 _DPLUS
       stm32eforth.s:1204   .text.reset_handler:00000000000008bc DPLUS
       stm32eforth.s:1216   .text.reset_handler:00000000000008d0 $d
       stm32eforth.s:1217   .text.reset_handler:00000000000008d4 _INVER
       stm32eforth.s:1219   .text.reset_handler:00000000000008d8 $t
       stm32eforth.s:1220   .text.reset_handler:00000000000008d8 INVER
       stm32eforth.s:1227   .text.reset_handler:00000000000008de $d
       stm32eforth.s:1228   .text.reset_handler:00000000000008e2 _NEGAT
       stm32eforth.s:1231   .text.reset_handler:00000000000008ec NEGAT
       stm32eforth.s:1238   .text.reset_handler:00000000000008f2 $d
       stm32eforth.s:1239   .text.reset_handler:00000000000008f6 _ABSS
       stm32eforth.s:1241   .text.reset_handler:00000000000008fa $t
       stm32eforth.s:1251   .text.reset_handler:0000000000000906 $d
       stm32eforth.s:1252   .text.reset_handler:000000000000090a _ZEQUAL
       stm32eforth.s:1255   .text.reset_handler:0000000000000910 ZEQUAL
       stm32eforth.s:1265   .text.reset_handler:000000000000091e $d
       stm32eforth.s:1266   .text.reset_handler:0000000000000922 _EQUAL
       stm32eforth.s:1268   .text.reset_handler:0000000000000924 $t
       stm32eforth.s:1269   .text.reset_handler:0000000000000924 EQUAL
       stm32eforth.s:1280   .text.reset_handler:0000000000000934 $d
       stm32eforth.s:1281   .text.reset_handler:0000000000000938 _ULESS
       stm32eforth.s:1284   .text.reset_handler:000000000000093c ULESS
       stm32eforth.s:1295   .text.reset_handler:000000000000094c $d
       stm32eforth.s:1296   .text.reset_handler:0000000000000950 _LESS
       stm32eforth.s:1298   .text.reset_handler:0000000000000952 $t
       stm32eforth.s:1299   .text.reset_handler:0000000000000954 LESS
       stm32eforth.s:1310   .text.reset_handler:0000000000000964 $d
       stm32eforth.s:1311   .text.reset_handler:0000000000000968 _GREAT
       stm32eforth.s:1313   .text.reset_handler:000000000000096a $t
       stm32eforth.s:1314   .text.reset_handler:000000000000096c GREAT
       stm32eforth.s:1325   .text.reset_handler:000000000000097c $d
       stm32eforth.s:1326   .text.reset_handler:0000000000000980 _MAX
       stm32eforth.s:1328   .text.reset_handler:0000000000000984 $t
       stm32eforth.s:1329   .text.reset_handler:0000000000000984 MAX
       stm32eforth.s:1339   .text.reset_handler:0000000000000990 $d
       stm32eforth.s:1340   .text.reset_handler:0000000000000994 _MIN
       stm32eforth.s:1342   .text.reset_handler:0000000000000998 $t
       stm32eforth.s:1343   .text.reset_handler:0000000000000998 MIN
       stm32eforth.s:1353   .text.reset_handler:00000000000009a4 $d
       stm32eforth.s:1354   .text.reset_handler:00000000000009a8 _PSTOR
       stm32eforth.s:1357   .text.reset_handler:00000000000009ac PSTOR
       stm32eforth.s:1368   .text.reset_handler:00000000000009bc $d
       stm32eforth.s:1369   .text.reset_handler:00000000000009c0 _DSTOR
       stm32eforth.s:1372   .text.reset_handler:00000000000009c4 DSTOR
       stm32eforth.s:1383   .text.reset_handler:00000000000009d8 $d
       stm32eforth.s:1384   .text.reset_handler:00000000000009dc _DAT
       stm32eforth.s:1387   .text.reset_handler:00000000000009e0 DAT
       stm32eforth.s:1396   .text.reset_handler:00000000000009ea $d
       stm32eforth.s:1397   .text.reset_handler:00000000000009ee _COUNT
       stm32eforth.s:1399   .text.reset_handler:00000000000009f4 $t
       stm32eforth.s:1400   .text.reset_handler:00000000000009f4 COUNT
       stm32eforth.s:1409   .text.reset_handler:0000000000000a00 $d
       stm32eforth.s:1410   .text.reset_handler:0000000000000a04 _DNEGA
       stm32eforth.s:1412   .text.reset_handler:0000000000000a0c $t
ARM GAS  stm32eforth.s 			page 93


       stm32eforth.s:1413   .text.reset_handler:0000000000000a0c DNEGA
       stm32eforth.s:1431   .text.reset_handler:0000000000000a1c DOVAR
       stm32eforth.s:1443   .text.reset_handler:0000000000000a28 DOCON
       stm32eforth.s:1455   .text.reset_handler:0000000000000a34 $d
       stm32eforth.s:1456   .text.reset_handler:0000000000000a38 _SEED
       stm32eforth.s:1466   .text.reset_handler:0000000000000a4a $d
       stm32eforth.s:1467   .text.reset_handler:0000000000000a4e _MSEC
       stm32eforth.s:1470   .text.reset_handler:0000000000000a54 MSEC
       stm32eforth.s:1477   .text.reset_handler:0000000000000a5e $d
       stm32eforth.s:1478   .text.reset_handler:0000000000000a62 _TIMER
       stm32eforth.s:1480   .text.reset_handler:0000000000000a68 $t
       stm32eforth.s:1489   .text.reset_handler:0000000000000a72 $d
       stm32eforth.s:1490   .text.reset_handler:0000000000000a76 _TORAM
       stm32eforth.s:1493   .text.reset_handler:0000000000000a7c TORAM
       stm32eforth.s:1501   .text.reset_handler:0000000000000a86 $d
       stm32eforth.s:1502   .text.reset_handler:0000000000000a8a _TBOOT
       stm32eforth.s:1504   .text.reset_handler:0000000000000a90 $t
       stm32eforth.s:1505   .text.reset_handler:0000000000000a90 TBOOT
       stm32eforth.s:1513   .text.reset_handler:0000000000000a9a $d
       stm32eforth.s:1514   .text.reset_handler:0000000000000a9e _BASE
       stm32eforth.s:1517   .text.reset_handler:0000000000000aa4 BASE
       stm32eforth.s:1529   .text.reset_handler:0000000000000aae TEMP
       stm32eforth.s:1537   .text.reset_handler:0000000000000ab8 $d
       stm32eforth.s:1538   .text.reset_handler:0000000000000abc _SPAN
       stm32eforth.s:1541   .text.reset_handler:0000000000000ac4 SPAN
       stm32eforth.s:1549   .text.reset_handler:0000000000000ace $d
       stm32eforth.s:1550   .text.reset_handler:0000000000000ad2 _INN
       stm32eforth.s:1552   .text.reset_handler:0000000000000ad6 $t
       stm32eforth.s:1553   .text.reset_handler:0000000000000ad8 INN
       stm32eforth.s:1561   .text.reset_handler:0000000000000ae2 $d
       stm32eforth.s:1562   .text.reset_handler:0000000000000ae6 _NTIB
       stm32eforth.s:1565   .text.reset_handler:0000000000000aec NTIB
       stm32eforth.s:1573   .text.reset_handler:0000000000000af6 $d
       stm32eforth.s:1574   .text.reset_handler:0000000000000afa _TEVAL
       stm32eforth.s:1576   .text.reset_handler:0000000000000b00 $t
       stm32eforth.s:1577   .text.reset_handler:0000000000000b00 TEVAL
       stm32eforth.s:1585   .text.reset_handler:0000000000000b0a $d
       stm32eforth.s:1586   .text.reset_handler:0000000000000b0e _HLD
       stm32eforth.s:1588   .text.reset_handler:0000000000000b12 $t
       stm32eforth.s:1589   .text.reset_handler:0000000000000b14 HLD
       stm32eforth.s:1597   .text.reset_handler:0000000000000b1e $d
       stm32eforth.s:1598   .text.reset_handler:0000000000000b22 _CNTXT
       stm32eforth.s:1600   .text.reset_handler:0000000000000b2a $t
       stm32eforth.s:1601   .text.reset_handler:0000000000000b2c CNTXT
       stm32eforth.s:1602   .text.reset_handler:0000000000000b2c CRRNT
       stm32eforth.s:1610   .text.reset_handler:0000000000000b36 $d
       stm32eforth.s:1611   .text.reset_handler:0000000000000b3a _CP
       stm32eforth.s:1614   .text.reset_handler:0000000000000b40 CPP
       stm32eforth.s:1621   .text.reset_handler:0000000000000b4a $d
       stm32eforth.s:1622   .text.reset_handler:0000000000000b4e _FCP
       stm32eforth.s:1624   .text.reset_handler:0000000000000b52 $t
       stm32eforth.s:1625   .text.reset_handler:0000000000000b54 FCP
       stm32eforth.s:1633   .text.reset_handler:0000000000000b5e $d
       stm32eforth.s:1634   .text.reset_handler:0000000000000b62 _LAST
       stm32eforth.s:1637   .text.reset_handler:0000000000000b68 LAST
       stm32eforth.s:1648   .text.reset_handler:0000000000000b72 $d
       stm32eforth.s:1649   .text.reset_handler:0000000000000b76 _USER_BGN
ARM GAS  stm32eforth.s 			page 94


       stm32eforth.s:1652   .text.reset_handler:0000000000000b84 USER_BEGIN
       stm32eforth.s:1656   .text.reset_handler:0000000000000b8c USR_BGN_ADR
       stm32eforth.s:1657   .text.reset_handler:0000000000000b8c $d
       stm32eforth.s:1662   .text.reset_handler:0000000000000b94 _USER_END
       stm32eforth.s:1665   .text.reset_handler:0000000000000ba0 USER_END
       stm32eforth.s:1673   .text.reset_handler:0000000000000bae $d
       stm32eforth.s:1674   .text.reset_handler:0000000000000bb2 _USER_IMG
       stm32eforth.s:1677   .text.reset_handler:0000000000000bbc USER_IMG
       stm32eforth.s:1681   .text.reset_handler:0000000000000bc4 USR_IMG_ADR
       stm32eforth.s:1682   .text.reset_handler:0000000000000bc4 $d
       stm32eforth.s:4589   .text.reset_handler:0000000000002800 USER
       stm32eforth.s:1691   .text.reset_handler:0000000000000bcc _WITHI
       stm32eforth.s:1694   .text.reset_handler:0000000000000bd4 WITHI
       stm32eforth.s:1709   .text.reset_handler:0000000000000bf4 $d
       stm32eforth.s:1710   .text.reset_handler:0000000000000bf8 _UMMOD
       stm32eforth.s:1713   .text.reset_handler:0000000000000c00 UMMOD
       stm32eforth.s:1717   .text.reset_handler:0000000000000c0a UMMOD0
       stm32eforth.s:1724   .text.reset_handler:0000000000000c1a UMMOD1
       stm32eforth.s:1730   .text.reset_handler:0000000000000c24 UMMOD2
       stm32eforth.s:1740   .text.reset_handler:0000000000000c2e $d
       stm32eforth.s:1741   .text.reset_handler:0000000000000c32 _MSMOD
       stm32eforth.s:1743   .text.reset_handler:0000000000000c38 $t
       stm32eforth.s:1744   .text.reset_handler:0000000000000c38 MSMOD
       stm32eforth.s:1751   .text.reset_handler:0000000000000c50 $d
       stm32eforth.s:1756   .text.reset_handler:0000000000000c64 MMOD1
       stm32eforth.s:1752   .text.reset_handler:0000000000000c54 $t
       stm32eforth.s:1761   .text.reset_handler:0000000000000c74 $d
       stm32eforth.s:1764   .text.reset_handler:0000000000000c80 MMOD2
       stm32eforth.s:1762   .text.reset_handler:0000000000000c78 $t
       stm32eforth.s:1769   .text.reset_handler:0000000000000c90 $d
       stm32eforth.s:1773   .text.reset_handler:0000000000000ca0 MMOD3
       stm32eforth.s:1770   .text.reset_handler:0000000000000c94 $t
       stm32eforth.s:1779   .text.reset_handler:0000000000000ca4 $d
       stm32eforth.s:1780   .text.reset_handler:0000000000000ca8 _SLMOD
       stm32eforth.s:1783   .text.reset_handler:0000000000000cb0 SLMOD
       stm32eforth.s:1794   .text.reset_handler:0000000000000cc8 $d
       stm32eforth.s:1795   .text.reset_handler:0000000000000ccc _MODD
       stm32eforth.s:1797   .text.reset_handler:0000000000000cd0 $t
       stm32eforth.s:1807   .text.reset_handler:0000000000000ce0 $d
       stm32eforth.s:1808   .text.reset_handler:0000000000000ce4 _SLASH
       stm32eforth.s:1810   .text.reset_handler:0000000000000ce6 $t
       stm32eforth.s:1811   .text.reset_handler:0000000000000ce8 SLASH
       stm32eforth.s:1821   .text.reset_handler:0000000000000cfc $d
       stm32eforth.s:1822   .text.reset_handler:0000000000000d00 _SSMOD
       stm32eforth.s:1824   .text.reset_handler:0000000000000d06 $t
       stm32eforth.s:1825   .text.reset_handler:0000000000000d08 SSMOD
       stm32eforth.s:1836   .text.reset_handler:0000000000000d20 $d
       stm32eforth.s:1837   .text.reset_handler:0000000000000d24 _STASL
       stm32eforth.s:1840   .text.reset_handler:0000000000000d28 STASL
       stm32eforth.s:1853   .text.reset_handler:0000000000000d3c $d
       stm32eforth.s:1854   .text.reset_handler:0000000000000d40 _ALGND
       stm32eforth.s:1856   .text.reset_handler:0000000000000d48 $t
       stm32eforth.s:1857   .text.reset_handler:0000000000000d48 ALGND
       stm32eforth.s:1866   .text.reset_handler:0000000000000d56 $d
       stm32eforth.s:1867   .text.reset_handler:0000000000000d5a _TCHAR
       stm32eforth.s:1869   .text.reset_handler:0000000000000d60 $t
       stm32eforth.s:1870   .text.reset_handler:0000000000000d60 TCHAR
ARM GAS  stm32eforth.s 			page 95


       stm32eforth.s:1873   .text.reset_handler:0000000000000d68 $d
       stm32eforth.s:1874   .text.reset_handler:0000000000000d6c $t
       stm32eforth.s:1878   .text.reset_handler:0000000000000d7c $d
       stm32eforth.s:1879   .text.reset_handler:0000000000000d80 $t
       stm32eforth.s:1882   .text.reset_handler:0000000000000d8c $d
       stm32eforth.s:1886   .text.reset_handler:0000000000000d9c TCHA1
       stm32eforth.s:1883   .text.reset_handler:0000000000000d90 $t
       stm32eforth.s:1885   .text.reset_handler:0000000000000d98 $d
       stm32eforth.s:1887   .text.reset_handler:0000000000000d9c $t
       stm32eforth.s:1892   .text.reset_handler:0000000000000da0 $d
       stm32eforth.s:1893   .text.reset_handler:0000000000000da4 _DEPTH
       stm32eforth.s:1895   .text.reset_handler:0000000000000daa $t
       stm32eforth.s:1896   .text.reset_handler:0000000000000dac DEPTH
       stm32eforth.s:1908   .text.reset_handler:0000000000000dc6 $d
       stm32eforth.s:1909   .text.reset_handler:0000000000000dca _PICK
       stm32eforth.s:1912   .text.reset_handler:0000000000000dd0 PICK
       stm32eforth.s:1927   .text.reset_handler:0000000000000dec $d
       stm32eforth.s:1928   .text.reset_handler:0000000000000df0 _HERE
       stm32eforth.s:1931   .text.reset_handler:0000000000000df8 HERE
       stm32eforth.s:1940   .text.reset_handler:0000000000000e08 $d
       stm32eforth.s:1941   .text.reset_handler:0000000000000e0c _PAD
       stm32eforth.s:1943   .text.reset_handler:0000000000000e10 $t
       stm32eforth.s:1944   .text.reset_handler:0000000000000e10 PAD
       stm32eforth.s:1953   .text.reset_handler:0000000000000e20 $d
       stm32eforth.s:1954   .text.reset_handler:0000000000000e24 _TIB
       stm32eforth.s:1956   .text.reset_handler:0000000000000e28 $t
       stm32eforth.s:1957   .text.reset_handler:0000000000000e28 TIB
       stm32eforth.s:1965   .text.reset_handler:0000000000000e30 $d
       stm32eforth.s:1966   .text.reset_handler:0000000000000e34 _ATEXE
       stm32eforth.s:1969   .text.reset_handler:0000000000000e40 ATEXE
       stm32eforth.s:1981   .text.reset_handler:0000000000000e52 $d
       stm32eforth.s:1982   .text.reset_handler:0000000000000e56 _CMOVE
       stm32eforth.s:1984   .text.reset_handler:0000000000000e5c $t
       stm32eforth.s:1985   .text.reset_handler:0000000000000e5c CMOVE
       stm32eforth.s:1992   .text.reset_handler:0000000000000e6e CMOV1
       stm32eforth.s:1989   .text.reset_handler:0000000000000e66 CMOV0
       stm32eforth.s:1997   .text.reset_handler:0000000000000e78 CMOV2
       stm32eforth.s:2004   .text.reset_handler:0000000000000e7e $d
       stm32eforth.s:2005   .text.reset_handler:0000000000000e82 _MOVE
       stm32eforth.s:2008   .text.reset_handler:0000000000000e88 MOVE
       stm32eforth.s:2016   .text.reset_handler:0000000000000e9e MOVE1
       stm32eforth.s:2013   .text.reset_handler:0000000000000e96 MOVE0
       stm32eforth.s:2021   .text.reset_handler:0000000000000ea8 MOVE2
       stm32eforth.s:2028   .text.reset_handler:0000000000000eae $d
       stm32eforth.s:2029   .text.reset_handler:0000000000000eb2 _FILL
       stm32eforth.s:2032   .text.reset_handler:0000000000000eb8 FILL
       stm32eforth.s:2035   .text.reset_handler:0000000000000ec0 FILL0
       stm32eforth.s:2038   .text.reset_handler:0000000000000ec4 FILL1
       stm32eforth.s:2044   .text.reset_handler:0000000000000ed2 FILL2
       stm32eforth.s:2051   .text.reset_handler:0000000000000ed8 $d
       stm32eforth.s:2052   .text.reset_handler:0000000000000edc _PACKS
       stm32eforth.s:2055   .text.reset_handler:0000000000000ee4 PACKS
       stm32eforth.s:2064   .text.reset_handler:0000000000000f04 $d
       stm32eforth.s:2065   .text.reset_handler:0000000000000f08 $t
       stm32eforth.s:2067   .text.reset_handler:0000000000000f10 $d
       stm32eforth.s:2068   .text.reset_handler:0000000000000f14 $t
       stm32eforth.s:2085   .text.reset_handler:0000000000000f3c $d
ARM GAS  stm32eforth.s 			page 96


       stm32eforth.s:2086   .text.reset_handler:0000000000000f40 _DIGIT
       stm32eforth.s:2088   .text.reset_handler:0000000000000f46 $t
       stm32eforth.s:2089   .text.reset_handler:0000000000000f48 DIGIT
       stm32eforth.s:2092   .text.reset_handler:0000000000000f50 $d
       stm32eforth.s:2093   .text.reset_handler:0000000000000f54 $t
       stm32eforth.s:2103   .text.reset_handler:0000000000000f6c $d
       stm32eforth.s:2104   .text.reset_handler:0000000000000f70 _EXTRC
       stm32eforth.s:2106   .text.reset_handler:0000000000000f78 $t
       stm32eforth.s:2107   .text.reset_handler:0000000000000f78 EXTRC
       stm32eforth.s:2110   .text.reset_handler:0000000000000f80 $d
       stm32eforth.s:2111   .text.reset_handler:0000000000000f84 $t
       stm32eforth.s:2120   .text.reset_handler:0000000000000f98 $d
       stm32eforth.s:2121   .text.reset_handler:0000000000000f9c _BDIGS
       stm32eforth.s:2124   .text.reset_handler:0000000000000fa0 BDIGS
       stm32eforth.s:2134   .text.reset_handler:0000000000000fb4 $d
       stm32eforth.s:2135   .text.reset_handler:0000000000000fb8 _HOLD
       stm32eforth.s:2138   .text.reset_handler:0000000000000fc0 HOLD
       stm32eforth.s:2152   .text.reset_handler:0000000000000fe4 $d
       stm32eforth.s:2153   .text.reset_handler:0000000000000fe8 _DIG
       stm32eforth.s:2155   .text.reset_handler:0000000000000fea $t
       stm32eforth.s:2156   .text.reset_handler:0000000000000fec DIG
       stm32eforth.s:2167   .text.reset_handler:0000000000001004 $d
       stm32eforth.s:2168   .text.reset_handler:0000000000001008 _DIGS
       stm32eforth.s:2171   .text.reset_handler:000000000000100c DIGS
       stm32eforth.s:2173   .text.reset_handler:0000000000001010 DIGS1
       stm32eforth.s:2177   .text.reset_handler:000000000000101c $d
       stm32eforth.s:2179   .text.reset_handler:0000000000001022 DIGS2
       stm32eforth.s:2178   .text.reset_handler:0000000000001020 $t
       stm32eforth.s:2185   .text.reset_handler:0000000000001026 $d
       stm32eforth.s:2186   .text.reset_handler:000000000000102a _SIGN
       stm32eforth.s:2189   .text.reset_handler:0000000000001030 SIGN
       stm32eforth.s:2193   .text.reset_handler:000000000000103c $d
       stm32eforth.s:2197   .text.reset_handler:000000000000104c SIGN1
       stm32eforth.s:2194   .text.reset_handler:0000000000001040 $t
       stm32eforth.s:2195   .text.reset_handler:0000000000001044 $d
       stm32eforth.s:2196   .text.reset_handler:0000000000001048 $t
       stm32eforth.s:2203   .text.reset_handler:0000000000001050 $d
       stm32eforth.s:2204   .text.reset_handler:0000000000001054 _EDIGS
       stm32eforth.s:2207   .text.reset_handler:0000000000001058 EDIGS
       stm32eforth.s:2224   .text.reset_handler:0000000000001078 STRR
       stm32eforth.s:2239   .text.reset_handler:00000000000010a0 $d
       stm32eforth.s:2240   .text.reset_handler:00000000000010a4 _HEX
       stm32eforth.s:2242   .text.reset_handler:00000000000010a8 $t
       stm32eforth.s:2243   .text.reset_handler:00000000000010a8 HEX
       stm32eforth.s:2246   .text.reset_handler:00000000000010b0 $d
       stm32eforth.s:2247   .text.reset_handler:00000000000010b4 $t
       stm32eforth.s:2254   .text.reset_handler:00000000000010c0 $d
       stm32eforth.s:2255   .text.reset_handler:00000000000010c4 _DECIM
       stm32eforth.s:2257   .text.reset_handler:00000000000010cc $t
       stm32eforth.s:2258   .text.reset_handler:00000000000010cc DECIM
       stm32eforth.s:2261   .text.reset_handler:00000000000010d4 $d
       stm32eforth.s:2262   .text.reset_handler:00000000000010d8 $t
       stm32eforth.s:2272   .text.reset_handler:00000000000010e4 $d
       stm32eforth.s:2273   .text.reset_handler:00000000000010e8 _DIGTQ
       stm32eforth.s:2276   .text.reset_handler:00000000000010f0 DIGTQ
       stm32eforth.s:2280   .text.reset_handler:00000000000010fc $d
       stm32eforth.s:2281   .text.reset_handler:0000000000001100 $t
ARM GAS  stm32eforth.s 			page 97


       stm32eforth.s:2283   .text.reset_handler:0000000000001108 $d
       stm32eforth.s:2284   .text.reset_handler:000000000000110c $t
       stm32eforth.s:2287   .text.reset_handler:0000000000001118 $d
       stm32eforth.s:2296   .text.reset_handler:000000000000113c DGTQ1
       stm32eforth.s:2288   .text.reset_handler:000000000000111c $t
       stm32eforth.s:2289   .text.reset_handler:0000000000001120 $d
       stm32eforth.s:2290   .text.reset_handler:0000000000001124 $t
       stm32eforth.s:2293   .text.reset_handler:0000000000001130 $d
       stm32eforth.s:2294   .text.reset_handler:0000000000001134 $t
       stm32eforth.s:2305   .text.reset_handler:000000000000114c $d
       stm32eforth.s:2306   .text.reset_handler:0000000000001150 _NUMBQ
       stm32eforth.s:2308   .text.reset_handler:0000000000001158 $t
       stm32eforth.s:2309   .text.reset_handler:0000000000001158 NUMBQ
       stm32eforth.s:2315   .text.reset_handler:000000000000116c $d
       stm32eforth.s:2316   .text.reset_handler:0000000000001170 $t
       stm32eforth.s:2321   .text.reset_handler:0000000000001184 $d
       stm32eforth.s:2322   .text.reset_handler:0000000000001188 $t
       stm32eforth.s:2324   .text.reset_handler:0000000000001190 $d
       stm32eforth.s:2330   .text.reset_handler:00000000000011a8 NUMQ1
       stm32eforth.s:2325   .text.reset_handler:0000000000001194 $t
       stm32eforth.s:2334   .text.reset_handler:00000000000011b4 $d
       stm32eforth.s:2335   .text.reset_handler:00000000000011b8 $t
       stm32eforth.s:2345   .text.reset_handler:00000000000011e0 $d
       stm32eforth.s:2384   .text.reset_handler:000000000000126c NUMQ6
       stm32eforth.s:2346   .text.reset_handler:00000000000011e4 $t
       stm32eforth.s:2348   .text.reset_handler:00000000000011ec NUMQ2
       stm32eforth.s:2356   .text.reset_handler:0000000000001208 $d
       stm32eforth.s:2375   .text.reset_handler:0000000000001250 NUMQ4
       stm32eforth.s:2357   .text.reset_handler:000000000000120c $t
       stm32eforth.s:2365   .text.reset_handler:000000000000122c $d
       stm32eforth.s:2366   .text.reset_handler:0000000000001230 $t
       stm32eforth.s:2370   .text.reset_handler:0000000000001240 $d
       stm32eforth.s:2372   .text.reset_handler:0000000000001248 NUMQ3
       stm32eforth.s:2371   .text.reset_handler:0000000000001244 $t
       stm32eforth.s:2382   .text.reset_handler:0000000000001268 NUMQ5
       stm32eforth.s:2381   .text.reset_handler:0000000000001264 $d
       stm32eforth.s:2383   .text.reset_handler:0000000000001268 $t
       stm32eforth.s:2398   .text.reset_handler:0000000000001284 $d
       stm32eforth.s:2399   .text.reset_handler:0000000000001288 _KEY
       stm32eforth.s:2401   .text.reset_handler:000000000000128c $t
       stm32eforth.s:2402   .text.reset_handler:000000000000128c KEY
       stm32eforth.s:2404   .text.reset_handler:0000000000001290 KEY1
       stm32eforth.s:2407   .text.reset_handler:0000000000001298 $d
       stm32eforth.s:2409   .text.reset_handler:000000000000129c $t
       stm32eforth.s:2411   .text.reset_handler:00000000000012a4 $d
       stm32eforth.s:2412   .text.reset_handler:00000000000012a8 $t
       stm32eforth.s:2415   .text.reset_handler:00000000000012b4 $d
       stm32eforth.s:2416   .text.reset_handler:00000000000012b8 $t
       stm32eforth.s:2421   .text.reset_handler:00000000000012bc $d
       stm32eforth.s:2422   .text.reset_handler:00000000000012c0 _SPACE
       stm32eforth.s:2424   .text.reset_handler:00000000000012c6 $t
       stm32eforth.s:2425   .text.reset_handler:00000000000012c8 SPACE
       stm32eforth.s:2434   .text.reset_handler:00000000000012d8 $d
       stm32eforth.s:2435   .text.reset_handler:00000000000012dc _SPACS
       stm32eforth.s:2438   .text.reset_handler:00000000000012e4 SPACS
       stm32eforth.s:2441   .text.reset_handler:00000000000012ec $d
       stm32eforth.s:2442   .text.reset_handler:00000000000012f0 $t
ARM GAS  stm32eforth.s 			page 98


       stm32eforth.s:2447   .text.reset_handler:0000000000001300 CHAR2
       stm32eforth.s:2445   .text.reset_handler:00000000000012fc CHAR1
       stm32eforth.s:2449   .text.reset_handler:0000000000001304 $d
       stm32eforth.s:2450   .text.reset_handler:0000000000001308 $t
       stm32eforth.s:2455   .text.reset_handler:000000000000130c $d
       stm32eforth.s:2456   .text.reset_handler:0000000000001310 _TYPEE
       stm32eforth.s:2459   .text.reset_handler:0000000000001318 TYPEE
       stm32eforth.s:2467   .text.reset_handler:000000000000132e TYPE2
       stm32eforth.s:2463   .text.reset_handler:0000000000001322 TYPE1
       stm32eforth.s:2469   .text.reset_handler:0000000000001332 $d
       stm32eforth.s:2470   .text.reset_handler:0000000000001336 $t
       stm32eforth.s:2476   .text.reset_handler:000000000000133e $d
       stm32eforth.s:2477   .text.reset_handler:0000000000001342 _CR
       stm32eforth.s:2480   .text.reset_handler:0000000000001348 CR
       stm32eforth.s:2483   .text.reset_handler:0000000000001350 $d
       stm32eforth.s:2484   .text.reset_handler:0000000000001354 $t
       stm32eforth.s:2486   .text.reset_handler:000000000000135c $d
       stm32eforth.s:2487   .text.reset_handler:0000000000001360 $t
       stm32eforth.s:2498   .text.reset_handler:0000000000001368 DOSTR
       stm32eforth.s:2521   .text.reset_handler:000000000000139c STRQP
       stm32eforth.s:2533   .text.reset_handler:00000000000013a8 DOTST
       stm32eforth.s:2546   .text.reset_handler:00000000000013b8 DOTQP
       stm32eforth.s:2555   .text.reset_handler:00000000000013c8 $d
       stm32eforth.s:2556   .text.reset_handler:00000000000013cc _DOTR
       stm32eforth.s:2559   .text.reset_handler:00000000000013d0 DOTR
       stm32eforth.s:2573   .text.reset_handler:00000000000013f4 $d
       stm32eforth.s:2574   .text.reset_handler:00000000000013f8 _UDOTR
       stm32eforth.s:2576   .text.reset_handler:00000000000013fc $t
       stm32eforth.s:2577   .text.reset_handler:00000000000013fc UDOTR
       stm32eforth.s:2593   .text.reset_handler:0000000000001428 $d
       stm32eforth.s:2594   .text.reset_handler:000000000000142c _UDOT
       stm32eforth.s:2597   .text.reset_handler:0000000000001430 UDOT
       stm32eforth.s:2609   .text.reset_handler:000000000000144c $d
       stm32eforth.s:2610   .text.reset_handler:0000000000001450 _DOT
       stm32eforth.s:2612   .text.reset_handler:0000000000001452 $t
       stm32eforth.s:2613   .text.reset_handler:0000000000001454 DOT
       stm32eforth.s:2618   .text.reset_handler:0000000000001464 $d
       stm32eforth.s:2619   .text.reset_handler:0000000000001468 $t
       stm32eforth.s:2621   .text.reset_handler:0000000000001470 $d
       stm32eforth.s:2624   .text.reset_handler:000000000000147c DOT1
       stm32eforth.s:2622   .text.reset_handler:0000000000001474 $t
       stm32eforth.s:2633   .text.reset_handler:000000000000148c $d
       stm32eforth.s:2634   .text.reset_handler:0000000000001490 _QUEST
       stm32eforth.s:2636   .text.reset_handler:0000000000001492 $t
       stm32eforth.s:2637   .text.reset_handler:0000000000001494 QUEST
       stm32eforth.s:2653   .text.reset_handler:00000000000014a4 PARS
       stm32eforth.s:2661   .text.reset_handler:00000000000014c0 $d
       stm32eforth.s:2729   .text.reset_handler:00000000000015b2 PARS8
       stm32eforth.s:2662   .text.reset_handler:00000000000014c4 $t
       stm32eforth.s:2668   .text.reset_handler:00000000000014dc $d
       stm32eforth.s:2690   .text.reset_handler:000000000000152c PARS3
       stm32eforth.s:2669   .text.reset_handler:00000000000014e0 $t
       stm32eforth.s:2670   .text.reset_handler:00000000000014e4 PARS1
       stm32eforth.s:2678   .text.reset_handler:0000000000001500 $d
       stm32eforth.s:2688   .text.reset_handler:0000000000001528 PARS2
       stm32eforth.s:2679   .text.reset_handler:0000000000001504 $t
       stm32eforth.s:2681   .text.reset_handler:000000000000150c $d
ARM GAS  stm32eforth.s 			page 99


       stm32eforth.s:2682   .text.reset_handler:0000000000001510 $t
       stm32eforth.s:2685   .text.reset_handler:000000000000151c $d
       stm32eforth.s:2686   .text.reset_handler:0000000000001520 $t
       stm32eforth.s:2694   .text.reset_handler:0000000000001538 PARS4
       stm32eforth.s:2705   .text.reset_handler:0000000000001560 $d
       stm32eforth.s:2707   .text.reset_handler:0000000000001568 PARS5
       stm32eforth.s:2706   .text.reset_handler:0000000000001564 $t
       stm32eforth.s:2709   .text.reset_handler:000000000000156c $d
       stm32eforth.s:2716   .text.reset_handler:0000000000001586 PARS6
       stm32eforth.s:2710   .text.reset_handler:0000000000001570 $t
       stm32eforth.s:2712   .text.reset_handler:0000000000001578 $d
       stm32eforth.s:2713   .text.reset_handler:000000000000157c $t
       stm32eforth.s:2722   .text.reset_handler:000000000000159a PARS7
       stm32eforth.s:2738   .text.reset_handler:00000000000015c2 $d
       stm32eforth.s:2739   .text.reset_handler:00000000000015c6 _PARSE
       stm32eforth.s:2741   .text.reset_handler:00000000000015cc $t
       stm32eforth.s:2742   .text.reset_handler:00000000000015cc PARSE
       stm32eforth.s:2763   .text.reset_handler:000000000000160c $d
       stm32eforth.s:2764   .text.reset_handler:0000000000001610 _DOTPR
       stm32eforth.s:2767   .text.reset_handler:0000000000001614 DOTPR
       stm32eforth.s:2770   .text.reset_handler:000000000000161c $d
       stm32eforth.s:2771   .text.reset_handler:0000000000001620 $t
       stm32eforth.s:2778   .text.reset_handler:000000000000162c $d
       stm32eforth.s:2779   .text.reset_handler:0000000000001630 _PAREN
       stm32eforth.s:2781   .text.reset_handler:0000000000001632 $t
       stm32eforth.s:2782   .text.reset_handler:0000000000001634 PAREN
       stm32eforth.s:2785   .text.reset_handler:000000000000163c $d
       stm32eforth.s:2786   .text.reset_handler:0000000000001640 $t
       stm32eforth.s:2793   .text.reset_handler:000000000000164c $d
       stm32eforth.s:2794   .text.reset_handler:0000000000001650 _BKSLA
       stm32eforth.s:2796   .text.reset_handler:0000000000001652 $t
       stm32eforth.s:2797   .text.reset_handler:0000000000001654 BKSLA
       stm32eforth.s:2808   .text.reset_handler:000000000000166c $d
       stm32eforth.s:2809   .text.reset_handler:0000000000001670 _CHAR
       stm32eforth.s:2812   .text.reset_handler:0000000000001678 CHAR
       stm32eforth.s:2823   .text.reset_handler:0000000000001690 $d
       stm32eforth.s:2824   .text.reset_handler:0000000000001694 _WORDD
       stm32eforth.s:2827   .text.reset_handler:000000000000169c WORDD
       stm32eforth.s:2838   .text.reset_handler:00000000000016b4 $d
       stm32eforth.s:2839   .text.reset_handler:00000000000016b8 _TOKEN
       stm32eforth.s:2841   .text.reset_handler:00000000000016be $t
       stm32eforth.s:2842   .text.reset_handler:00000000000016c0 TOKEN
       stm32eforth.s:2854   .text.reset_handler:00000000000016d0 $d
       stm32eforth.s:2855   .text.reset_handler:00000000000016d4 _NAMET
       stm32eforth.s:2857   .text.reset_handler:00000000000016da $t
       stm32eforth.s:2858   .text.reset_handler:00000000000016dc NAMET
       stm32eforth.s:2862   .text.reset_handler:00000000000016e8 $d
       stm32eforth.s:2863   .text.reset_handler:00000000000016ec $t
       stm32eforth.s:2876   .text.reset_handler:00000000000016fc $d
       stm32eforth.s:2877   .text.reset_handler:0000000000001700 _SAMEQ
       stm32eforth.s:2879   .text.reset_handler:0000000000001706 $t
       stm32eforth.s:2880   .text.reset_handler:0000000000001708 SAMEQ
       stm32eforth.s:2900   .text.reset_handler:0000000000001750 SAME2
       stm32eforth.s:2884   .text.reset_handler:0000000000001714 SAME1
       stm32eforth.s:2896   .text.reset_handler:0000000000001740 $d
       stm32eforth.s:2897   .text.reset_handler:0000000000001744 $t
       stm32eforth.s:2902   .text.reset_handler:0000000000001754 $d
ARM GAS  stm32eforth.s 			page 100


       stm32eforth.s:2903   .text.reset_handler:0000000000001758 $t
       stm32eforth.s:2904   .text.reset_handler:000000000000175c $d
       stm32eforth.s:2905   .text.reset_handler:0000000000001760 $t
       stm32eforth.s:2917   .text.reset_handler:0000000000001764 FIND
       stm32eforth.s:2926   .text.reset_handler:0000000000001784 FIND1
       stm32eforth.s:2929   .text.reset_handler:000000000000178c $d
       stm32eforth.s:2949   .text.reset_handler:00000000000017d4 FIND6
       stm32eforth.s:2930   .text.reset_handler:0000000000001790 $t
       stm32eforth.s:2933   .text.reset_handler:000000000000179c $d
       stm32eforth.s:2934   .text.reset_handler:00000000000017a0 $t
       stm32eforth.s:2938   .text.reset_handler:00000000000017b0 $d
       stm32eforth.s:2942   .text.reset_handler:00000000000017c0 FIND2
       stm32eforth.s:2939   .text.reset_handler:00000000000017b4 $t
       stm32eforth.s:2947   .text.reset_handler:00000000000017d0 FIND3
       stm32eforth.s:2956   .text.reset_handler:00000000000017ec FIND4
       stm32eforth.s:2958   .text.reset_handler:00000000000017f0 $d
       stm32eforth.s:2963   .text.reset_handler:0000000000001804 FIND5
       stm32eforth.s:2959   .text.reset_handler:00000000000017f4 $t
       stm32eforth.s:2977   .text.reset_handler:0000000000001828 $d
       stm32eforth.s:2978   .text.reset_handler:000000000000182c _NAMEQ
       stm32eforth.s:2980   .text.reset_handler:0000000000001832 $t
       stm32eforth.s:2981   .text.reset_handler:0000000000001834 NAMEQ
       stm32eforth.s:2998   .text.reset_handler:0000000000001848 BKSP
       stm32eforth.s:3007   .text.reset_handler:0000000000001868 $d
       stm32eforth.s:3020   .text.reset_handler:0000000000001890 BACK1
       stm32eforth.s:3008   .text.reset_handler:000000000000186c $t
       stm32eforth.s:3009   .text.reset_handler:0000000000001870 $d
       stm32eforth.s:3010   .text.reset_handler:0000000000001874 $t
       stm32eforth.s:3017   .text.reset_handler:0000000000001888 $d
       stm32eforth.s:3018   .text.reset_handler:000000000000188c $t
       stm32eforth.s:3030   .text.reset_handler:0000000000001894 TAP
       stm32eforth.s:3047   .text.reset_handler:00000000000018b0 KTAP
       stm32eforth.s:3048   .text.reset_handler:00000000000018b0 TTAP
       stm32eforth.s:3052   .text.reset_handler:00000000000018bc $d
       stm32eforth.s:3053   .text.reset_handler:00000000000018c0 $t
       stm32eforth.s:3055   .text.reset_handler:00000000000018c8 $d
       stm32eforth.s:3068   .text.reset_handler:00000000000018f8 KTAP2
       stm32eforth.s:3056   .text.reset_handler:00000000000018cc $t
       stm32eforth.s:3057   .text.reset_handler:00000000000018d0 $d
       stm32eforth.s:3058   .text.reset_handler:00000000000018d4 $t
       stm32eforth.s:3060   .text.reset_handler:00000000000018dc $d
       stm32eforth.s:3065   .text.reset_handler:00000000000018f0 KTAP1
       stm32eforth.s:3061   .text.reset_handler:00000000000018e0 $t
       stm32eforth.s:3064   .text.reset_handler:00000000000018ec $d
       stm32eforth.s:3066   .text.reset_handler:00000000000018f0 $t
       stm32eforth.s:3078   .text.reset_handler:000000000000190c $d
       stm32eforth.s:3079   .text.reset_handler:0000000000001910 _ACCEP
       stm32eforth.s:3082   .text.reset_handler:0000000000001918 ACCEP
       stm32eforth.s:3087   .text.reset_handler:0000000000001928 ACCP1
       stm32eforth.s:3091   .text.reset_handler:0000000000001934 $d
       stm32eforth.s:3107   .text.reset_handler:0000000000001964 ACCP4
       stm32eforth.s:3092   .text.reset_handler:0000000000001938 $t
       stm32eforth.s:3096   .text.reset_handler:0000000000001948 $d
       stm32eforth.s:3097   .text.reset_handler:000000000000194c $t
       stm32eforth.s:3099   .text.reset_handler:0000000000001954 $d
       stm32eforth.s:3102   .text.reset_handler:000000000000195e ACCP2
       stm32eforth.s:3100   .text.reset_handler:0000000000001958 $t
ARM GAS  stm32eforth.s 			page 101


       stm32eforth.s:3105   .text.reset_handler:0000000000001962 ACCP3
       stm32eforth.s:3116   .text.reset_handler:0000000000001974 $d
       stm32eforth.s:3117   .text.reset_handler:0000000000001978 _QUERY
       stm32eforth.s:3119   .text.reset_handler:000000000000197e $t
       stm32eforth.s:3120   .text.reset_handler:0000000000001980 QUERY
       stm32eforth.s:3124   .text.reset_handler:000000000000198c $d
       stm32eforth.s:3125   .text.reset_handler:0000000000001990 $t
       stm32eforth.s:3130   .text.reset_handler:00000000000019a4 $d
       stm32eforth.s:3131   .text.reset_handler:00000000000019a8 $t
       stm32eforth.s:3141   .text.reset_handler:00000000000019b4 $d
       stm32eforth.s:3142   .text.reset_handler:00000000000019b8 _ABORT
       stm32eforth.s:3144   .text.reset_handler:00000000000019be $t
       stm32eforth.s:3145   .text.reset_handler:00000000000019c0 ABORT
       stm32eforth.s:3151   .text.reset_handler:00000000000019d4 $d
       stm32eforth.s:3152   .text.reset_handler:00000000000019d8 $t
       stm32eforth.s:3298   .text.reset_handler:0000000000001b48 PRESE
       stm32eforth.s:3313   .text.reset_handler:0000000000001b60 QUIT
       stm32eforth.s:3164   .text.reset_handler:00000000000019e8 ABORQ
       stm32eforth.s:3167   .text.reset_handler:00000000000019f0 $d
       stm32eforth.s:3173   .text.reset_handler:0000000000001a08 ABOR1
       stm32eforth.s:3168   .text.reset_handler:00000000000019f4 $t
       stm32eforth.s:3184   .text.reset_handler:0000000000001a14 $d
       stm32eforth.s:3185   .text.reset_handler:0000000000001a18 _INTER
       stm32eforth.s:3187   .text.reset_handler:0000000000001a24 $t
       stm32eforth.s:3193   .text.reset_handler:0000000000001a34 $d
       stm32eforth.s:3204   .text.reset_handler:0000000000001a64 INTE1
       stm32eforth.s:3194   .text.reset_handler:0000000000001a38 $t
       stm32eforth.s:3196   .text.reset_handler:0000000000001a40 $d
       stm32eforth.s:3197   .text.reset_handler:0000000000001a44 $t
       stm32eforth.s:3199   .text.reset_handler:0000000000001a4c $d
       stm32eforth.s:3201   .text.reset_handler:0000000000001a5a $t
       stm32eforth.s:3207   .text.reset_handler:0000000000001a6c $d
       stm32eforth.s:3209   .text.reset_handler:0000000000001a74 INTE2
       stm32eforth.s:3208   .text.reset_handler:0000000000001a70 $t
       stm32eforth.s:3215   .text.reset_handler:0000000000001a78 $d
       stm32eforth.s:3216   .text.reset_handler:0000000000001a7c _LBRAC
       stm32eforth.s:3218   .text.reset_handler:0000000000001a7e $t
       stm32eforth.s:3219   .text.reset_handler:0000000000001a80 LBRAC
       stm32eforth.s:3222   .text.reset_handler:0000000000001a88 $d
       stm32eforth.s:3223   .text.reset_handler:0000000000001a8c $t
       stm32eforth.s:3230   .text.reset_handler:0000000000001a98 $d
       stm32eforth.s:3231   .text.reset_handler:0000000000001a9c _DOTOK
       stm32eforth.s:3233   .text.reset_handler:0000000000001aa0 $t
       stm32eforth.s:3234   .text.reset_handler:0000000000001aa0 DOTOK
       stm32eforth.s:3237   .text.reset_handler:0000000000001aa8 $d
       stm32eforth.s:3238   .text.reset_handler:0000000000001aac $t
       stm32eforth.s:3242   .text.reset_handler:0000000000001abc $d
       stm32eforth.s:3246   .text.reset_handler:0000000000001ac8 DOTO1
       stm32eforth.s:3243   .text.reset_handler:0000000000001ac0 $t
       stm32eforth.s:3244   .text.reset_handler:0000000000001ac4 $d
       stm32eforth.s:3247   .text.reset_handler:0000000000001ac8 $t
       stm32eforth.s:3253   .text.reset_handler:0000000000001ad0 $d
       stm32eforth.s:3254   .text.reset_handler:0000000000001ad4 _QSTAC
       stm32eforth.s:3257   .text.reset_handler:0000000000001adc QSTAC
       stm32eforth.s:3262   .text.reset_handler:0000000000001aec $d
       stm32eforth.s:3270   .text.reset_handler:0000000000001afc $d
       stm32eforth.s:3271   .text.reset_handler:0000000000001b00 _EVAL
ARM GAS  stm32eforth.s 			page 102


       stm32eforth.s:3274   .text.reset_handler:0000000000001b08 EVAL
       stm32eforth.s:3276   .text.reset_handler:0000000000001b0c EVAL1
       stm32eforth.s:3281   .text.reset_handler:0000000000001b1c $d
       stm32eforth.s:3286   .text.reset_handler:0000000000001b30 EVAL2
       stm32eforth.s:3282   .text.reset_handler:0000000000001b20 $t
       stm32eforth.s:3294   .text.reset_handler:0000000000001b3c $d
       stm32eforth.s:3295   .text.reset_handler:0000000000001b40 _PRESE
       stm32eforth.s:3309   .text.reset_handler:0000000000001b56 $d
       stm32eforth.s:3310   .text.reset_handler:0000000000001b5a _QUIT
       stm32eforth.s:3317   .text.reset_handler:0000000000001b6c QUIT1
       stm32eforth.s:3319   .text.reset_handler:0000000000001b70 QUIT2
       stm32eforth.s:3323   .text.reset_handler:0000000000001b7c $d
       stm32eforth.s:3332   .text.reset_handler:0000000000001b84 _UNLOCK
       stm32eforth.s:3335   .text.reset_handler:0000000000001b8c UNLOCK
       stm32eforth.s:3338   .text.reset_handler:0000000000001b94 $d
       stm32eforth.s:3359   .text.reset_handler:0000000000001bb4 LOCK
       stm32eforth.s:3624   .text.reset_handler:0000000000001eac flash_regs
       stm32eforth.s:3339   .text.reset_handler:0000000000001b98 $t
       stm32eforth.s:3366   .text.reset_handler:0000000000001bc0 WAIT_BSY
       stm32eforth.s:3368   .text.reset_handler:0000000000001bc2 WAIT1
       stm32eforth.s:3379   .text.reset_handler:0000000000001bcc $d
       stm32eforth.s:3380   .text.reset_handler:0000000000001bd0 _EPAGE
       stm32eforth.s:3384   .text.reset_handler:0000000000001bdc EPAGE
       stm32eforth.s:3389   .text.reset_handler:0000000000001be8 $d
       stm32eforth.s:3390   .text.reset_handler:0000000000001bec $t
       stm32eforth.s:3400   .text.reset_handler:0000000000001c0a $d
       stm32eforth.s:3401   .text.reset_handler:0000000000001c0e $t
       stm32eforth.s:3405   .text.reset_handler:0000000000001c1c $d
       stm32eforth.s:3407   .text.reset_handler:0000000000001c2a $t
       stm32eforth.s:3412   .text.reset_handler:0000000000001c30 HWORD_WRITE
       stm32eforth.s:3425   .text.reset_handler:0000000000001c52 $d
       stm32eforth.s:3426   .text.reset_handler:0000000000001c56 $t
       stm32eforth.s:3427   .text.reset_handler:0000000000001c5a $d
       stm32eforth.s:3429   .text.reset_handler:0000000000001c68 $t
       stm32eforth.s:3438   .text.reset_handler:0000000000001c6c $d
       stm32eforth.s:3439   .text.reset_handler:0000000000001c70 _ISTOR
       stm32eforth.s:3442   .text.reset_handler:0000000000001c74 ISTOR
       stm32eforth.s:3446   .text.reset_handler:0000000000001c80 $d
       stm32eforth.s:3447   .text.reset_handler:0000000000001c84 $t
       stm32eforth.s:3458   .text.reset_handler:0000000000001cb0 $d
       stm32eforth.s:3459   .text.reset_handler:0000000000001cb4 $t
       stm32eforth.s:3464   .text.reset_handler:0000000000001cbc $d
       stm32eforth.s:3465   .text.reset_handler:0000000000001cc0 _IMGQ
       stm32eforth.s:3468   .text.reset_handler:0000000000001cc8 IMGQ
       stm32eforth.s:3473   .text.reset_handler:0000000000001cd8 $d
       stm32eforth.s:3474   .text.reset_handler:0000000000001cdc $t
       stm32eforth.s:3479   .text.reset_handler:0000000000001ce4 $d
       stm32eforth.s:3480   .text.reset_handler:0000000000001ce8 _LOAD_IMG
       stm32eforth.s:3483   .text.reset_handler:0000000000001cf4 LOAD_IMG
       stm32eforth.s:3508   .text.reset_handler:0000000000001d38 $d
       stm32eforth.s:3509   .text.reset_handler:0000000000001d3c _ERASE_MPG
       stm32eforth.s:3511   .text.reset_handler:0000000000001d46 $t
       stm32eforth.s:3512   .text.reset_handler:0000000000001d48 ERASE_MPG
       stm32eforth.s:3517   .text.reset_handler:0000000000001d58 $d
       stm32eforth.s:3518   .text.reset_handler:0000000000001d5c $t
       stm32eforth.s:3520   .text.reset_handler:0000000000001d64 $d
       stm32eforth.s:3522   .text.reset_handler:0000000000001d68 $t
ARM GAS  stm32eforth.s 			page 103


       stm32eforth.s:3529   .text.reset_handler:0000000000001d80 $d
       stm32eforth.s:3530   .text.reset_handler:0000000000001d84 $t
       stm32eforth.s:3535   .text.reset_handler:0000000000001d8c $d
       stm32eforth.s:3536   .text.reset_handler:0000000000001d90 _FLSH_WR
       stm32eforth.s:3539   .text.reset_handler:0000000000001d98 FLSH_WR
       stm32eforth.s:3540   .text.reset_handler:0000000000001d98 $t
       stm32eforth.s:3543   .text.reset_handler:0000000000001da4 $d
       stm32eforth.s:3545   .text.reset_handler:0000000000001da8 $t
       stm32eforth.s:3554   .text.reset_handler:0000000000001dcc $d
       stm32eforth.s:3555   .text.reset_handler:0000000000001dd0 $t
       stm32eforth.s:3562   .text.reset_handler:0000000000001de0 $d
       stm32eforth.s:3563   .text.reset_handler:0000000000001de4 _PAGE
       stm32eforth.s:3566   .text.reset_handler:0000000000001dec PAGE
       stm32eforth.s:3575   .text.reset_handler:0000000000001dfe $d
       stm32eforth.s:3576   .text.reset_handler:0000000000001e02 _SAVE_IMG
       stm32eforth.s:3579   .text.reset_handler:0000000000001e0c SAVE_IMG
       stm32eforth.s:3585   .text.reset_handler:0000000000001e20 $d
       stm32eforth.s:3586   .text.reset_handler:0000000000001e24 $t
       stm32eforth.s:3589   .text.reset_handler:0000000000001e30 $d
       stm32eforth.s:3591   .text.reset_handler:0000000000001e34 $t
       stm32eforth.s:3597   .text.reset_handler:0000000000001e4c $d
       stm32eforth.s:3598   .text.reset_handler:0000000000001e50 $t
       stm32eforth.s:3625   .text.reset_handler:0000000000001eac $d
       stm32eforth.s:3636   .text.reset_handler:0000000000001ebc _TICK
       stm32eforth.s:3638   .text.reset_handler:0000000000001ebe $t
       stm32eforth.s:3639   .text.reset_handler:0000000000001ec0 TICK
       stm32eforth.s:3644   .text.reset_handler:0000000000001ed0 $d
       stm32eforth.s:3646   .text.reset_handler:0000000000001ed8 TICK1
       stm32eforth.s:3645   .text.reset_handler:0000000000001ed4 $t
       stm32eforth.s:3651   .text.reset_handler:0000000000001edc $d
       stm32eforth.s:3652   .text.reset_handler:0000000000001ee0 _ALLOT
       stm32eforth.s:3654   .text.reset_handler:0000000000001ee6 $t
       stm32eforth.s:3655   .text.reset_handler:0000000000001ee8 ALLOT
       stm32eforth.s:3664   .text.reset_handler:0000000000001ef8 $d
       stm32eforth.s:3665   .text.reset_handler:0000000000001efc _COMMA
       stm32eforth.s:3666   .text.reset_handler:0000000000001efe $t
       stm32eforth.s:3667   .text.reset_handler:0000000000001f00 COMMA
       stm32eforth.s:3680   .text.reset_handler:0000000000001f20 $d
       stm32eforth.s:3681   .text.reset_handler:0000000000001f24 _BCOMP
       stm32eforth.s:3683   .text.reset_handler:0000000000001f2e $t
       stm32eforth.s:3684   .text.reset_handler:0000000000001f30 BCOMP
       stm32eforth.s:3693   .text.reset_handler:0000000000001f40 $d
       stm32eforth.s:3694   .text.reset_handler:0000000000001f44 _COMPI
       stm32eforth.s:3696   .text.reset_handler:0000000000001f4c $t
       stm32eforth.s:3697   .text.reset_handler:0000000000001f4c COMPI
       stm32eforth.s:4129   .text.reset_handler:0000000000002348 CALLC
       stm32eforth.s:3712   .text.reset_handler:0000000000001f74 $d
       stm32eforth.s:3713   .text.reset_handler:0000000000001f78 _LITER
       stm32eforth.s:3715   .text.reset_handler:0000000000001f80 $t
       stm32eforth.s:3716   .text.reset_handler:0000000000001f80 LITER
       stm32eforth.s:3719   .text.reset_handler:0000000000001f88 $d
       stm32eforth.s:3720   .text.reset_handler:0000000000001f8c $t
       stm32eforth.s:3730   .text.reset_handler:0000000000001f94 STRCQ
       stm32eforth.s:3733   .text.reset_handler:0000000000001f9c $d
       stm32eforth.s:3734   .text.reset_handler:0000000000001fa0 $t
       stm32eforth.s:3737   .text.reset_handler:0000000000001fac $d
       stm32eforth.s:3738   .text.reset_handler:0000000000001fb0 $t
ARM GAS  stm32eforth.s 			page 104


       stm32eforth.s:3752   .text.reset_handler:0000000000001fcc $d
       stm32eforth.s:3753   .text.reset_handler:0000000000001fd0 _FOR
       stm32eforth.s:3755   .text.reset_handler:0000000000001fd4 $t
       stm32eforth.s:3756   .text.reset_handler:0000000000001fd4 FOR
       stm32eforth.s:3759   .text.reset_handler:0000000000001fdc $d
       stm32eforth.s:3760   .text.reset_handler:0000000000001fe0 $t
       stm32eforth.s:3766   .text.reset_handler:0000000000001fe8 $d
       stm32eforth.s:3767   .text.reset_handler:0000000000001fec _BEGIN
       stm32eforth.s:3769   .text.reset_handler:0000000000001ff2 $t
       stm32eforth.s:3770   .text.reset_handler:0000000000001ff4 BEGIN
       stm32eforth.s:3778   .text.reset_handler:0000000000002000 $d
       stm32eforth.s:3779   .text.reset_handler:0000000000002004 _NEXT
       stm32eforth.s:3782   .text.reset_handler:000000000000200c NEXT
       stm32eforth.s:3785   .text.reset_handler:0000000000002014 $d
       stm32eforth.s:3786   .text.reset_handler:0000000000002018 $t
       stm32eforth.s:3792   .text.reset_handler:0000000000002020 $d
       stm32eforth.s:3793   .text.reset_handler:0000000000002024 _UNTIL
       stm32eforth.s:3795   .text.reset_handler:000000000000202a $t
       stm32eforth.s:3796   .text.reset_handler:000000000000202c UNTIL
       stm32eforth.s:3799   .text.reset_handler:0000000000002034 $d
       stm32eforth.s:3800   .text.reset_handler:0000000000002038 $t
       stm32eforth.s:3806   .text.reset_handler:0000000000002040 $d
       stm32eforth.s:3807   .text.reset_handler:0000000000002044 _AGAIN
       stm32eforth.s:3809   .text.reset_handler:000000000000204a $t
       stm32eforth.s:3810   .text.reset_handler:000000000000204c AGAIN
       stm32eforth.s:3813   .text.reset_handler:0000000000002054 $d
       stm32eforth.s:3814   .text.reset_handler:0000000000002058 $t
       stm32eforth.s:3820   .text.reset_handler:0000000000002060 $d
       stm32eforth.s:3821   .text.reset_handler:0000000000002064 _IFF
       stm32eforth.s:3824   .text.reset_handler:0000000000002068 IFF
       stm32eforth.s:3827   .text.reset_handler:0000000000002070 $d
       stm32eforth.s:3828   .text.reset_handler:0000000000002074 $t
       stm32eforth.s:3830   .text.reset_handler:000000000000207c $d
       stm32eforth.s:3831   .text.reset_handler:0000000000002080 $t
       stm32eforth.s:3838   .text.reset_handler:000000000000208c $d
       stm32eforth.s:3839   .text.reset_handler:0000000000002090 _AHEAD
       stm32eforth.s:3841   .text.reset_handler:0000000000002096 $t
       stm32eforth.s:3842   .text.reset_handler:0000000000002098 AHEAD
       stm32eforth.s:3845   .text.reset_handler:00000000000020a0 $d
       stm32eforth.s:3846   .text.reset_handler:00000000000020a4 $t
       stm32eforth.s:3848   .text.reset_handler:00000000000020ac $d
       stm32eforth.s:3849   .text.reset_handler:00000000000020b0 $t
       stm32eforth.s:3856   .text.reset_handler:00000000000020bc $d
       stm32eforth.s:3857   .text.reset_handler:00000000000020c0 _REPEA
       stm32eforth.s:3860   .text.reset_handler:00000000000020c8 REPEA
       stm32eforth.s:3871   .text.reset_handler:00000000000020e0 $d
       stm32eforth.s:3872   .text.reset_handler:00000000000020e4 _THENN
       stm32eforth.s:3875   .text.reset_handler:00000000000020ec THENN
       stm32eforth.s:3885   .text.reset_handler:0000000000002100 $d
       stm32eforth.s:3886   .text.reset_handler:0000000000002104 _AFT
       stm32eforth.s:3888   .text.reset_handler:0000000000002108 $t
       stm32eforth.s:3889   .text.reset_handler:0000000000002108 AFT
       stm32eforth.s:3900   .text.reset_handler:0000000000002120 $d
       stm32eforth.s:3901   .text.reset_handler:0000000000002124 _ELSEE
       stm32eforth.s:3904   .text.reset_handler:000000000000212c ELSEE
       stm32eforth.s:3914   .text.reset_handler:0000000000002140 $d
       stm32eforth.s:3915   .text.reset_handler:0000000000002144 _WHILE
ARM GAS  stm32eforth.s 			page 105


       stm32eforth.s:3917   .text.reset_handler:000000000000214a $t
       stm32eforth.s:3918   .text.reset_handler:000000000000214c WHILE
       stm32eforth.s:3927   .text.reset_handler:000000000000215c $d
       stm32eforth.s:3928   .text.reset_handler:0000000000002160 _ABRTQ
       stm32eforth.s:3931   .text.reset_handler:0000000000002168 ABRTQ
       stm32eforth.s:3934   .text.reset_handler:0000000000002170 $d
       stm32eforth.s:3935   .text.reset_handler:0000000000002174 $t
       stm32eforth.s:3941   .text.reset_handler:000000000000217c $d
       stm32eforth.s:3942   .text.reset_handler:0000000000002180 _STRQ
       stm32eforth.s:3945   .text.reset_handler:0000000000002184 STRQ
       stm32eforth.s:3948   .text.reset_handler:000000000000218c $d
       stm32eforth.s:3949   .text.reset_handler:0000000000002190 $t
       stm32eforth.s:3955   .text.reset_handler:0000000000002198 $d
       stm32eforth.s:3956   .text.reset_handler:000000000000219c _DOTQ
       stm32eforth.s:3959   .text.reset_handler:00000000000021a0 DOTQ
       stm32eforth.s:3962   .text.reset_handler:00000000000021a8 $d
       stm32eforth.s:3963   .text.reset_handler:00000000000021ac $t
       stm32eforth.s:3972   .text.reset_handler:00000000000021b4 $d
       stm32eforth.s:3973   .text.reset_handler:00000000000021b8 _UNIQU
       stm32eforth.s:3975   .text.reset_handler:00000000000021c0 $t
       stm32eforth.s:3976   .text.reset_handler:00000000000021c0 UNIQU
       stm32eforth.s:3981   .text.reset_handler:00000000000021d0 $d
       stm32eforth.s:3989   .text.reset_handler:00000000000021ec UNIQ1
       stm32eforth.s:3982   .text.reset_handler:00000000000021d4 $t
       stm32eforth.s:3983   .text.reset_handler:00000000000021d8 $d
       stm32eforth.s:3985   .text.reset_handler:00000000000021e0 $t
       stm32eforth.s:4000   .text.reset_handler:00000000000021f4 SNAME
       stm32eforth.s:4005   .text.reset_handler:0000000000002204 $d
       stm32eforth.s:4019   .text.reset_handler:000000000000223c SNAM1
       stm32eforth.s:4006   .text.reset_handler:0000000000002208 $t
       stm32eforth.s:4021   .text.reset_handler:0000000000002240 $d
       stm32eforth.s:4023   .text.reset_handler:0000000000002248 $t
       stm32eforth.s:4028   .text.reset_handler:000000000000224c $d
       stm32eforth.s:4029   .text.reset_handler:0000000000002250 _SCOMP
       stm32eforth.s:4031   .text.reset_handler:000000000000225a $t
       stm32eforth.s:4032   .text.reset_handler:000000000000225c SCOMP
       stm32eforth.s:4037   .text.reset_handler:000000000000226c $d
       stm32eforth.s:4049   .text.reset_handler:0000000000002298 SCOM2
       stm32eforth.s:4038   .text.reset_handler:0000000000002270 $t
       stm32eforth.s:4040   .text.reset_handler:0000000000002278 $d
       stm32eforth.s:4041   .text.reset_handler:000000000000227c $t
       stm32eforth.s:4043   .text.reset_handler:0000000000002284 $d
       stm32eforth.s:4046   .text.reset_handler:0000000000002290 SCOM1
       stm32eforth.s:4044   .text.reset_handler:0000000000002288 $t
       stm32eforth.s:4052   .text.reset_handler:00000000000022a0 $d
       stm32eforth.s:4055   .text.reset_handler:00000000000022ac SCOM3
       stm32eforth.s:4053   .text.reset_handler:00000000000022a4 $t
       stm32eforth.s:4062   .text.reset_handler:00000000000022b4 COLON_ABORT
       stm32eforth.s:4078   .text.reset_handler:00000000000022e0 $d
       stm32eforth.s:4079   .text.reset_handler:00000000000022e4 _OVERT
       stm32eforth.s:4081   .text.reset_handler:00000000000022ea $t
       stm32eforth.s:4082   .text.reset_handler:00000000000022ec OVERT
       stm32eforth.s:4093   .text.reset_handler:0000000000002304 $d
       stm32eforth.s:4094   .text.reset_handler:0000000000002308 _SEMIS
       stm32eforth.s:4096   .text.reset_handler:000000000000230a $t
       stm32eforth.s:4097   .text.reset_handler:000000000000230c SEMIS
       stm32eforth.s:4109   .text.reset_handler:0000000000002328 $d
ARM GAS  stm32eforth.s 			page 106


       stm32eforth.s:4110   .text.reset_handler:000000000000232c _RBRAC
       stm32eforth.s:4112   .text.reset_handler:000000000000232e $t
       stm32eforth.s:4113   .text.reset_handler:0000000000002330 RBRAC
       stm32eforth.s:4116   .text.reset_handler:0000000000002338 $d
       stm32eforth.s:4117   .text.reset_handler:000000000000233c $t
       stm32eforth.s:4150   .text.reset_handler:0000000000002382 $d
       stm32eforth.s:4151   .text.reset_handler:0000000000002386 _COLON
       stm32eforth.s:4153   .text.reset_handler:0000000000002388 $t
       stm32eforth.s:4154   .text.reset_handler:0000000000002388 COLON
       stm32eforth.s:4167   .text.reset_handler:00000000000023a8 $d
       stm32eforth.s:4168   .text.reset_handler:00000000000023ac _IMMED
       stm32eforth.s:4170   .text.reset_handler:00000000000023b6 $t
       stm32eforth.s:4171   .text.reset_handler:00000000000023b8 IMMED
       stm32eforth.s:4174   .text.reset_handler:00000000000023c0 $d
       stm32eforth.s:4175   .text.reset_handler:00000000000023c4 $t
       stm32eforth.s:4190   .text.reset_handler:00000000000023e4 $d
       stm32eforth.s:4191   .text.reset_handler:00000000000023e8 _CONST
       stm32eforth.s:4194   .text.reset_handler:00000000000023f4 CONST
       stm32eforth.s:4203   .text.reset_handler:0000000000002414 $d
       stm32eforth.s:4204   .text.reset_handler:0000000000002418 $t
       stm32eforth.s:4211   .text.reset_handler:0000000000002424 $d
       stm32eforth.s:4212   .text.reset_handler:0000000000002428 _CREAT
       stm32eforth.s:4215   .text.reset_handler:0000000000002430 CREAT
       stm32eforth.s:4224   .text.reset_handler:0000000000002450 $d
       stm32eforth.s:4225   .text.reset_handler:0000000000002454 $t
       stm32eforth.s:4231   .text.reset_handler:000000000000245c $d
       stm32eforth.s:4232   .text.reset_handler:0000000000002460 _VARIA
       stm32eforth.s:4235   .text.reset_handler:000000000000246c VARIA
       stm32eforth.s:4239   .text.reset_handler:0000000000002478 $d
       stm32eforth.s:4240   .text.reset_handler:000000000000247c $t
       stm32eforth.s:4253   .text.reset_handler:0000000000002484 DMP
       stm32eforth.s:4257   .text.reset_handler:0000000000002490 $d
       stm32eforth.s:4258   .text.reset_handler:0000000000002494 $t
       stm32eforth.s:4269   .text.reset_handler:00000000000024bc PDUM2
       stm32eforth.s:4262   .text.reset_handler:00000000000024a4 PDUM1
       stm32eforth.s:4266   .text.reset_handler:00000000000024b0 $d
       stm32eforth.s:4267   .text.reset_handler:00000000000024b4 $t
       stm32eforth.s:4271   .text.reset_handler:00000000000024c0 $d
       stm32eforth.s:4272   .text.reset_handler:00000000000024c4 $t
       stm32eforth.s:4277   .text.reset_handler:00000000000024c8 $d
       stm32eforth.s:4278   .text.reset_handler:00000000000024cc _DUMP
       stm32eforth.s:4281   .text.reset_handler:00000000000024d4 DUMP
       stm32eforth.s:4288   .text.reset_handler:00000000000024ec $d
       stm32eforth.s:4289   .text.reset_handler:00000000000024f0 $t
       stm32eforth.s:4303   .text.reset_handler:0000000000002524 DUMP4
       stm32eforth.s:4292   .text.reset_handler:00000000000024fc DUMP1
       stm32eforth.s:4295   .text.reset_handler:0000000000002504 $d
       stm32eforth.s:4296   .text.reset_handler:0000000000002508 $t
       stm32eforth.s:4305   .text.reset_handler:0000000000002528 $d
       stm32eforth.s:4306   .text.reset_handler:000000000000252c DUMP3
       stm32eforth.s:4307   .text.reset_handler:000000000000252c $t
       stm32eforth.s:4316   .text.reset_handler:0000000000002540 $d
       stm32eforth.s:4317   .text.reset_handler:0000000000002544 _DOTS
       stm32eforth.s:4321   .text.reset_handler:0000000000002548 DOTS
       stm32eforth.s:4331   .text.reset_handler:0000000000002568 DOTS2
       stm32eforth.s:4327   .text.reset_handler:000000000000255c DOTS1
       stm32eforth.s:4333   .text.reset_handler:000000000000256c $d
ARM GAS  stm32eforth.s 			page 107


       stm32eforth.s:4334   .text.reset_handler:0000000000002570 $t
       stm32eforth.s:4340   .text.reset_handler:0000000000002578 $d
       stm32eforth.s:4341   .text.reset_handler:000000000000257c _TNAME
       stm32eforth.s:4343   .text.reset_handler:0000000000002582 $t
       stm32eforth.s:4344   .text.reset_handler:0000000000002584 TNAME
       stm32eforth.s:4349   .text.reset_handler:0000000000002594 TNAM1
       stm32eforth.s:4352   .text.reset_handler:000000000000259c $d
       stm32eforth.s:4362   .text.reset_handler:00000000000025c4 TNAM2
       stm32eforth.s:4353   .text.reset_handler:00000000000025a0 $t
       stm32eforth.s:4358   .text.reset_handler:00000000000025b4 $d
       stm32eforth.s:4359   .text.reset_handler:00000000000025b8 $t
       stm32eforth.s:4370   .text.reset_handler:00000000000025d0 $d
       stm32eforth.s:4371   .text.reset_handler:00000000000025d4 _DOTID
       stm32eforth.s:4373   .text.reset_handler:00000000000025d8 $t
       stm32eforth.s:4374   .text.reset_handler:00000000000025d8 DOTID
       stm32eforth.s:4378   .text.reset_handler:00000000000025e4 $d
       stm32eforth.s:4385   .text.reset_handler:0000000000002600 DOTI1
       stm32eforth.s:4379   .text.reset_handler:00000000000025e8 $t
       stm32eforth.s:4381   .text.reset_handler:00000000000025f0 $d
       stm32eforth.s:4382   .text.reset_handler:00000000000025f4 $t
       stm32eforth.s:4387   .text.reset_handler:0000000000002604 $d
       stm32eforth.s:4389   .text.reset_handler:000000000000260e $t
       stm32eforth.s:4392   *ABS*:0000000000000000 WANT_SEE
       stm32eforth.s:4476   .text.reset_handler:0000000000002614 $d
       stm32eforth.s:4478   .text.reset_handler:0000000000002618 _WORDS
       stm32eforth.s:4480   .text.reset_handler:000000000000261e $t
       stm32eforth.s:4481   .text.reset_handler:0000000000002620 WORDS
       stm32eforth.s:4486   .text.reset_handler:0000000000002630 WORS1
       stm32eforth.s:4489   .text.reset_handler:0000000000002638 $d
       stm32eforth.s:4496   .text.reset_handler:0000000000002654 WORS2
       stm32eforth.s:4490   .text.reset_handler:000000000000263c $t
       stm32eforth.s:4509   .text.reset_handler:0000000000002658 VERSN
       stm32eforth.s:4512   .text.reset_handler:0000000000002660 $d
       stm32eforth.s:4513   .text.reset_handler:0000000000002664 $t
       stm32eforth.s:4518   .text.reset_handler:0000000000002668 $d
       stm32eforth.s:4519   .text.reset_handler:000000000000266c _HI
       stm32eforth.s:4526   .text.reset_handler:000000000000267c $d
       stm32eforth.s:4528   .text.reset_handler:0000000000002694 $t
       stm32eforth.s:4537   .text.reset_handler:00000000000026b4 $d
       stm32eforth.s:4538   .text.reset_handler:00000000000026b8 $t
       stm32eforth.s:4550   .text.reset_handler:00000000000026d8 $d
       stm32eforth.s:4556   .text.reset_handler:00000000000026e4 $t
       stm32eforth.s:4563   .text.reset_handler:00000000000026fe COLD1
       stm32eforth.s:4565   .text.reset_handler:0000000000002702 $d
       stm32eforth.s:4566   .text.reset_handler:0000000000002706 $t
       stm32eforth.s:4568   .text.reset_handler:000000000000270e $d
       stm32eforth.s:4569   .text.reset_handler:0000000000002712 $t
       stm32eforth.s:4570   .text.reset_handler:0000000000002716 $d
       stm32eforth.s:4571   .text.reset_handler:000000000000271a $t
       stm32eforth.s:4572   .text.reset_handler:000000000000271e $d
       stm32eforth.s:4573   .text.reset_handler:0000000000002722 $t
       stm32eforth.s:4577   .text.reset_handler:0000000000002732 $d
       stm32eforth.s:4578   .text.reset_handler:0000000000002736 $t
       stm32eforth.s:4584   .text.reset_handler:0000000000002748 COLD2
       stm32eforth.s:4587   .text.reset_handler:0000000000002748 $d
       stm32eforth.s:4588   .text.reset_handler:000000000000274c $t
       stm32eforth.s:4590   .text.reset_handler:0000000000002800 $d
ARM GAS  stm32eforth.s 			page 108


       stm32eforth.s:262    .text.default_handler:0000000000000033 $d
       stm32eforth.s:262    .text.default_handler:0000000000000034 $t
       stm32eforth.s:506    .text.reset_handler:000000000000045b $d
       stm32eforth.s:506    .text.reset_handler:000000000000045c $t
       stm32eforth.s:530    .text.reset_handler:00000000000004a7 $d
       stm32eforth.s:530    .text.reset_handler:00000000000004a8 $t
       stm32eforth.s:566    .text.reset_handler:00000000000004f9 $d
       stm32eforth.s:566    .text.reset_handler:00000000000004fa $t
       stm32eforth.s:586    .text.reset_handler:0000000000000521 $d
       stm32eforth.s:586    .text.reset_handler:0000000000000522 $t
       stm32eforth.s:611    .text.reset_handler:0000000000000555 $d
       stm32eforth.s:611    .text.reset_handler:0000000000000556 $t
       stm32eforth.s:725    .text.reset_handler:00000000000005eb $d
       stm32eforth.s:725    .text.reset_handler:00000000000005ec $t
       stm32eforth.s:759    .text.reset_handler:0000000000000617 $d
       stm32eforth.s:759    .text.reset_handler:0000000000000618 $t
       stm32eforth.s:772    .text.reset_handler:000000000000062b $d
       stm32eforth.s:772    .text.reset_handler:000000000000062c $t
       stm32eforth.s:783    .text.reset_handler:0000000000000637 $d
       stm32eforth.s:783    .text.reset_handler:0000000000000638 $t
       stm32eforth.s:795    .text.reset_handler:0000000000000649 $d
       stm32eforth.s:795    .text.reset_handler:000000000000064a $t
       stm32eforth.s:807    .text.reset_handler:000000000000065b $d
       stm32eforth.s:807    .text.reset_handler:000000000000065c $t
       stm32eforth.s:831    .text.reset_handler:0000000000000681 $d
       stm32eforth.s:831    .text.reset_handler:0000000000000682 $t
       stm32eforth.s:853    .text.reset_handler:00000000000006a3 $d
       stm32eforth.s:853    .text.reset_handler:00000000000006a4 $t
       stm32eforth.s:866    .text.reset_handler:00000000000006b5 $d
       stm32eforth.s:866    .text.reset_handler:00000000000006b6 $t
       stm32eforth.s:878    .text.reset_handler:00000000000006c7 $d
       stm32eforth.s:878    .text.reset_handler:00000000000006c8 $t
       stm32eforth.s:902    .text.reset_handler:00000000000006ed $d
       stm32eforth.s:902    .text.reset_handler:00000000000006ee $t
       stm32eforth.s:941    .text.reset_handler:0000000000000733 $d
       stm32eforth.s:941    .text.reset_handler:0000000000000734 $t
       stm32eforth.s:953    .text.reset_handler:0000000000000749 $d
       stm32eforth.s:953    .text.reset_handler:000000000000074a $t
       stm32eforth.s:1015   .text.reset_handler:00000000000007a3 $d
       stm32eforth.s:1015   .text.reset_handler:00000000000007a4 $t
       stm32eforth.s:1029   .text.reset_handler:00000000000007b7 $d
       stm32eforth.s:1029   .text.reset_handler:00000000000007b8 $t
       stm32eforth.s:1040   .text.reset_handler:00000000000007c5 $d
       stm32eforth.s:1040   .text.reset_handler:00000000000007c6 $t
       stm32eforth.s:1051   .text.reset_handler:00000000000007d5 $d
       stm32eforth.s:1051   .text.reset_handler:00000000000007d6 $t
       stm32eforth.s:1062   .text.reset_handler:00000000000007e5 $d
       stm32eforth.s:1062   .text.reset_handler:00000000000007e6 $t
       stm32eforth.s:1095   .text.reset_handler:0000000000000815 $d
       stm32eforth.s:1095   .text.reset_handler:0000000000000816 $t
       stm32eforth.s:1129   .text.reset_handler:0000000000000849 $d
       stm32eforth.s:1129   .text.reset_handler:000000000000084a $t
       stm32eforth.s:1140   .text.reset_handler:0000000000000859 $d
       stm32eforth.s:1140   .text.reset_handler:000000000000085a $t
       stm32eforth.s:1151   .text.reset_handler:000000000000086b $d
       stm32eforth.s:1151   .text.reset_handler:000000000000086c $t
       stm32eforth.s:1190   .text.reset_handler:00000000000008a7 $d
ARM GAS  stm32eforth.s 			page 109


       stm32eforth.s:1190   .text.reset_handler:00000000000008a8 $t
       stm32eforth.s:1203   .text.reset_handler:00000000000008bb $d
       stm32eforth.s:1203   .text.reset_handler:00000000000008bc $t
       stm32eforth.s:1230   .text.reset_handler:00000000000008e9 $d
       stm32eforth.s:1230   .text.reset_handler:00000000000008ea $t
       stm32eforth.s:1254   .text.reset_handler:000000000000090d $d
       stm32eforth.s:1254   .text.reset_handler:000000000000090e $t
       stm32eforth.s:1283   .text.reset_handler:000000000000093b $d
       stm32eforth.s:1283   .text.reset_handler:000000000000093c $t
       stm32eforth.s:1356   .text.reset_handler:00000000000009ab $d
       stm32eforth.s:1356   .text.reset_handler:00000000000009ac $t
       stm32eforth.s:1371   .text.reset_handler:00000000000009c3 $d
       stm32eforth.s:1371   .text.reset_handler:00000000000009c4 $t
       stm32eforth.s:1386   .text.reset_handler:00000000000009df $d
       stm32eforth.s:1386   .text.reset_handler:00000000000009e0 $t
       stm32eforth.s:1458   .text.reset_handler:0000000000000a3d $d
       stm32eforth.s:1458   .text.reset_handler:0000000000000a3e $t
       stm32eforth.s:1469   .text.reset_handler:0000000000000a53 $d
       stm32eforth.s:1469   .text.reset_handler:0000000000000a54 $t
       stm32eforth.s:1492   .text.reset_handler:0000000000000a7b $d
       stm32eforth.s:1492   .text.reset_handler:0000000000000a7c $t
       stm32eforth.s:1516   .text.reset_handler:0000000000000aa3 $d
       stm32eforth.s:1516   .text.reset_handler:0000000000000aa4 $t
       stm32eforth.s:1540   .text.reset_handler:0000000000000ac1 $d
       stm32eforth.s:1540   .text.reset_handler:0000000000000ac2 $t
       stm32eforth.s:1564   .text.reset_handler:0000000000000aeb $d
       stm32eforth.s:1564   .text.reset_handler:0000000000000aec $t
       stm32eforth.s:1613   .text.reset_handler:0000000000000b3d $d
       stm32eforth.s:1613   .text.reset_handler:0000000000000b3e $t
       stm32eforth.s:1636   .text.reset_handler:0000000000000b67 $d
       stm32eforth.s:1636   .text.reset_handler:0000000000000b68 $t
       stm32eforth.s:1651   .text.reset_handler:0000000000000b81 $d
       stm32eforth.s:1651   .text.reset_handler:0000000000000b82 $t
       stm32eforth.s:1664   .text.reset_handler:0000000000000b9d $d
       stm32eforth.s:1664   .text.reset_handler:0000000000000b9e $t
       stm32eforth.s:1676   .text.reset_handler:0000000000000bbb $d
       stm32eforth.s:1676   .text.reset_handler:0000000000000bbc $t
       stm32eforth.s:1693   .text.reset_handler:0000000000000bd3 $d
       stm32eforth.s:1693   .text.reset_handler:0000000000000bd4 $t
       stm32eforth.s:1712   .text.reset_handler:0000000000000bff $d
       stm32eforth.s:1712   .text.reset_handler:0000000000000c00 $t
       stm32eforth.s:1782   .text.reset_handler:0000000000000cad $d
       stm32eforth.s:1782   .text.reset_handler:0000000000000cae $t
       stm32eforth.s:1839   .text.reset_handler:0000000000000d27 $d
       stm32eforth.s:1839   .text.reset_handler:0000000000000d28 $t
       stm32eforth.s:1911   .text.reset_handler:0000000000000dcf $d
       stm32eforth.s:1911   .text.reset_handler:0000000000000dd0 $t
       stm32eforth.s:1930   .text.reset_handler:0000000000000df5 $d
       stm32eforth.s:1930   .text.reset_handler:0000000000000df6 $t
       stm32eforth.s:1968   .text.reset_handler:0000000000000e3d $d
       stm32eforth.s:1968   .text.reset_handler:0000000000000e3e $t
       stm32eforth.s:2007   .text.reset_handler:0000000000000e87 $d
       stm32eforth.s:2007   .text.reset_handler:0000000000000e88 $t
       stm32eforth.s:2031   .text.reset_handler:0000000000000eb7 $d
       stm32eforth.s:2031   .text.reset_handler:0000000000000eb8 $t
       stm32eforth.s:2054   .text.reset_handler:0000000000000ee3 $d
       stm32eforth.s:2054   .text.reset_handler:0000000000000ee4 $t
ARM GAS  stm32eforth.s 			page 110


       stm32eforth.s:2123   .text.reset_handler:0000000000000f9f $d
       stm32eforth.s:2123   .text.reset_handler:0000000000000fa0 $t
       stm32eforth.s:2137   .text.reset_handler:0000000000000fbd $d
       stm32eforth.s:2137   .text.reset_handler:0000000000000fbe $t
       stm32eforth.s:2170   .text.reset_handler:000000000000100b $d
       stm32eforth.s:2170   .text.reset_handler:000000000000100c $t
       stm32eforth.s:2188   .text.reset_handler:000000000000102f $d
       stm32eforth.s:2188   .text.reset_handler:0000000000001030 $t
       stm32eforth.s:2206   .text.reset_handler:0000000000001057 $d
       stm32eforth.s:2206   .text.reset_handler:0000000000001058 $t
       stm32eforth.s:2275   .text.reset_handler:00000000000010ef $d
       stm32eforth.s:2275   .text.reset_handler:00000000000010f0 $t
       stm32eforth.s:2437   .text.reset_handler:00000000000012e3 $d
       stm32eforth.s:2437   .text.reset_handler:00000000000012e4 $t
       stm32eforth.s:2458   .text.reset_handler:0000000000001315 $d
       stm32eforth.s:2458   .text.reset_handler:0000000000001316 $t
       stm32eforth.s:2479   .text.reset_handler:0000000000001345 $d
       stm32eforth.s:2479   .text.reset_handler:0000000000001346 $t
       stm32eforth.s:2558   .text.reset_handler:00000000000013cf $d
       stm32eforth.s:2558   .text.reset_handler:00000000000013d0 $t
       stm32eforth.s:2596   .text.reset_handler:000000000000142f $d
       stm32eforth.s:2596   .text.reset_handler:0000000000001430 $t
       stm32eforth.s:2766   .text.reset_handler:0000000000001613 $d
       stm32eforth.s:2766   .text.reset_handler:0000000000001614 $t
       stm32eforth.s:2811   .text.reset_handler:0000000000001675 $d
       stm32eforth.s:2811   .text.reset_handler:0000000000001676 $t
       stm32eforth.s:2826   .text.reset_handler:0000000000001699 $d
       stm32eforth.s:2826   .text.reset_handler:000000000000169a $t
       stm32eforth.s:3081   .text.reset_handler:0000000000001917 $d
       stm32eforth.s:3081   .text.reset_handler:0000000000001918 $t
       stm32eforth.s:3256   .text.reset_handler:0000000000001adb $d
       stm32eforth.s:3256   .text.reset_handler:0000000000001adc $t
       stm32eforth.s:3264   .text.reset_handler:0000000000001af7 $d
       stm32eforth.s:3264   .text.reset_handler:0000000000001af8 $t
       stm32eforth.s:3273   .text.reset_handler:0000000000001b05 $d
       stm32eforth.s:3273   .text.reset_handler:0000000000001b06 $t
       stm32eforth.s:3297   .text.reset_handler:0000000000001b47 $d
       stm32eforth.s:3297   .text.reset_handler:0000000000001b48 $t
       stm32eforth.s:3312   .text.reset_handler:0000000000001b5f $d
       stm32eforth.s:3312   .text.reset_handler:0000000000001b60 $t
       stm32eforth.s:3334   .text.reset_handler:0000000000001b8b $d
       stm32eforth.s:3334   .text.reset_handler:0000000000001b8c $t
       stm32eforth.s:3382   .text.reset_handler:0000000000001bdb $d
       stm32eforth.s:3382   .text.reset_handler:0000000000001bdc $t
       stm32eforth.s:3441   .text.reset_handler:0000000000001c73 $d
       stm32eforth.s:3441   .text.reset_handler:0000000000001c74 $t
       stm32eforth.s:3467   .text.reset_handler:0000000000001cc5 $d
       stm32eforth.s:3467   .text.reset_handler:0000000000001cc6 $t
       stm32eforth.s:3482   .text.reset_handler:0000000000001cf1 $d
       stm32eforth.s:3482   .text.reset_handler:0000000000001cf2 $t
       stm32eforth.s:3565   .text.reset_handler:0000000000001de9 $d
       stm32eforth.s:3565   .text.reset_handler:0000000000001dea $t
       stm32eforth.s:3578   .text.reset_handler:0000000000001e0b $d
       stm32eforth.s:3578   .text.reset_handler:0000000000001e0c $t
       stm32eforth.s:3781   .text.reset_handler:0000000000002009 $d
       stm32eforth.s:3781   .text.reset_handler:000000000000200a $t
       stm32eforth.s:3823   .text.reset_handler:0000000000002067 $d
ARM GAS  stm32eforth.s 			page 111


       stm32eforth.s:3823   .text.reset_handler:0000000000002068 $t
       stm32eforth.s:3859   .text.reset_handler:00000000000020c7 $d
       stm32eforth.s:3859   .text.reset_handler:00000000000020c8 $t
       stm32eforth.s:3874   .text.reset_handler:00000000000020e9 $d
       stm32eforth.s:3874   .text.reset_handler:00000000000020ea $t
       stm32eforth.s:3903   .text.reset_handler:0000000000002129 $d
       stm32eforth.s:3903   .text.reset_handler:000000000000212a $t
       stm32eforth.s:3930   .text.reset_handler:0000000000002167 $d
       stm32eforth.s:3930   .text.reset_handler:0000000000002168 $t
       stm32eforth.s:3944   .text.reset_handler:0000000000002183 $d
       stm32eforth.s:3944   .text.reset_handler:0000000000002184 $t
       stm32eforth.s:3958   .text.reset_handler:000000000000219f $d
       stm32eforth.s:3958   .text.reset_handler:00000000000021a0 $t
       stm32eforth.s:4193   .text.reset_handler:00000000000023f1 $d
       stm32eforth.s:4193   .text.reset_handler:00000000000023f2 $t
       stm32eforth.s:4214   .text.reset_handler:000000000000242f $d
       stm32eforth.s:4214   .text.reset_handler:0000000000002430 $t
       stm32eforth.s:4234   .text.reset_handler:0000000000002469 $d
       stm32eforth.s:4234   .text.reset_handler:000000000000246a $t
       stm32eforth.s:4280   .text.reset_handler:00000000000024d1 $d
       stm32eforth.s:4280   .text.reset_handler:00000000000024d2 $t
       stm32eforth.s:4320   .text.reset_handler:0000000000002547 $d
       stm32eforth.s:4320   .text.reset_handler:0000000000002548 $t
       stm32eforth.s:4521   .text.reset_handler:000000000000266f $d
       stm32eforth.s:4521   .text.reset_handler:0000000000002670 $t

UNDEFINED SYMBOLS
_mstack
