ARM GAS  stm32eforth.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  stm32eforth.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.p2align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.p2aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m3
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
ARM GAS  stm32eforth.s 			page 3


  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
ARM GAS  stm32eforth.s 			page 4


  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
  81              	
  82              	/* blue pill specific constants */ 
  83              	  .equ LED_GPIO, GPIOC_BASE_ADR
  84              	  .equ LED_PIN, 13
  85              	  .equ UART, USART1_BASE_ADR 
  86              	
  87              	/* eForth specific constants */
  88              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  89              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  90              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  91              	.equ UPP ,	0x20000000	/*start of user area (UP0) */
  92              	.equ DTOP ,	0x20000100	/*start of usable RAM area (HERE) */
  93              	.equ DEND , 0x20004E00  /*usable RAM end */
  94              	 .equ RAMOFFSET ,	0x20000000	// remap
  95              	 .equ RAMEND, 0x20005000 // 20Ko
  96              	 .equ FLASHOFFSET ,	0x08000c00	// remap
  97              	//.equ RAMOFFSET  ,	0x00000000	/* absolute */
  98              	//.equ MAPOFFSET  ,	0x00000000	/* absolute */
  99              	  .equ MAPOFFSET , (RAMOFFSET-FLASHOFFSET)
 100              	
 101              	/*************************************
 102              	   system variables offset from UPP
 103              	*************************************/
 104              	  .equ SEED_OFS, 4    // prng seed 
 105              	  .equ TICKS_OFS, SEED_OFS+4  // millseconds counter
ARM GAS  stm32eforth.s 			page 5


 106              	  .equ TIMER_OFS, TICKS_OFS+4  // count down timer
 107              	  .equ TORAM_OFS, TIMER_OFS+4  // compile to RAM 
 108              	  .equ IMG_SIGN_OFS, TORAM_OFS+4  // image signature  
 109              	  .equ BOOT_OFS, IMG_SIGN_OFS+4  // boot program address
 110              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
 111              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
 112              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
 113              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
 114              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
 115              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
 116              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
 117              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
 118              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
 119              	  .equ FORTH_CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
 120              	  .equ USER_CTOP_OFS, FORTH_CTOP_OFS+4  // ram free dictionary address
 121              	  .equ LASTN_OFS, USER_CTOP_OFS+4     // last word in dictionary link nfa 
 122              	  .equ VARS_END_OFS, LASTN_OFS+4 // end of system variables  
 123              	
 124              	/***********************************************
 125              	* MACROS
 126              	*	Assemble inline direct threaded code ending.
 127              	***********************************************/
 128              	 	.macro	_NEXT /*end low level word */
 129              		BX	LR
 130              		.endm
 131              	
 132              	 	.macro	_NEST /*start high level word */
 133              		STMFD	R2!,{LR}
 134              		.endm
 135              	
 136              	 	.macro	_UNNEST	/*end high level word */
 137              		LDMFD	R2!,{PC}
 138              		.endm
 139              	
 140              	 	.macro	_DOLIT /*long literals */
 141              		BL	DOLIT
 142              		.endm
 143              	
 144              	 	.macro	_PUSH	/*push R5 on data stack*/
 145              		STR	R5,[R1,#-4]!
 146              		.endm
 147              	
 148              	 	.macro	_POP /*pop data stack to R5 */
 149              		LDR	R5,[R1],#4
 150              		.endm
 151              	
 152              	/*************************************
 153              	*   interrupt service vectors table 
 154              	**************************************/
 155              	   .section  .isr_vector,"a",%progbits
 156              	  .type  isr_vectors, %object
 157              	
 158              	isr_vectors:
 159 0000 00000000 	  .word   _mstack          /* main return stack address */
 160 0004 00000000 	  .word   reset_handler    /* startup address */
 161              	/* core interrupts || exceptions */
 162 0008 00000000 	  .word   default_handler  /*  NMI */
ARM GAS  stm32eforth.s 			page 6


 163 000c 00000000 	  .word   default_handler  /*  HardFault */
 164 0010 00000000 	  .word   default_handler  /*  Memory Management */
 165 0014 00000000 	  .word   default_handler  /* Bus fault */
 166 0018 00000000 	  .word   default_handler  /* Usage fault */
 167 001c 00000000 	  .word   0
 168 0020 00000000 	  .word   0
 169 0024 00000000 	  .word   0
 170 0028 00000000 	  .word   0
 171 002c 00000000 	  .word   default_handler  /* SWI instruction */
 172 0030 00000000 	  .word   default_handler  /* Debug monitor */
 173 0034 00000000 	  .word   0
 174 0038 00000000 	  .word   default_handler  /* PendSV */
 175 003c 00000000 	  .word   systick_handler  /* Systick */
 176              	  
 177              	  /* External Interrupts */
 178 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 179 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 180 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 181 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 182 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 183 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 184 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 185 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 186 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 187 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 188 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 189 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 190 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 191 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 192 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 193 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 194 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 195 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 196 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 197 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 198 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 199 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 200 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 201 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 202 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 203 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 204 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 205 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 206 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 207 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 208 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 209 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 210 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 211 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 212 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 213 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 214 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 215 00d4 00000000 	  .word      default_handler /* IRQ37, USART1 */                   
 216 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 217 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 218 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 219 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
ARM GAS  stm32eforth.s 			page 7


 220 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 221 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 222 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 223 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 224 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 225 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 226 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 227 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 228 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 229 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 230 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 231 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 232 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 233 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 234 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 235 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 236 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 237 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 238              	
 239              	  .size  isr_vectors, .-isr_vectors
 240              	
 241              	/*****************************************************
 242              	* default isr handler called on unexpected interrupt
 243              	*****************************************************/
 244              	    .section  .text.default_handler,"ax",%progbits
 245              	
 246              	  .type default_handler, %function
 247              	  .p2align 2 
 248              	  .global default_handler
 249              	default_handler:
 250 0000 DFF81870 		ldr r7,exception_msg 
 251 0004 17F8010B 		ldrb r0,[r7],#1 
 252 0008 41F8045D 	1:	_PUSH 
 253 000c 17F8015B 		ldrb r5,[r7],#1
 254 0010 00F0ACFA 		bl EMIT 
 255 0014 0138     		subs r0,r0,#1 
 256 0016 F7D1     		bne 1b 	
 257 0018 FFF7FEBF 		b reset_handler   
 258              	  .size  default_handler, .-default_handler
 259              	exception_msg:
 260 001c 20000000 		.word .+4 
 261 0020 12       		.byte 18
 262 0021 0A0D6578 		.ascii "\n\rexeption reboot!"
 262      65707469 
 262      6F6E2072 
 262      65626F6F 
 262      7421
 263 0033 00       		.p2align 2
 264              	
 265              	/*********************************
 266              		system milliseconds counter
 267              	*********************************/	
 268              	  .type systick_handler, %function
 269              	  .p2align 2 
 270              	  .global systick_handler
 271              	systick_handler:
 272 0034 4FF00003 	  mov r3,#UPP&0xffff
ARM GAS  stm32eforth.s 			page 8


 273 0038 C2F20003 	  movt r3,#UPP>>16  	
 274 003c 9868     	  ldr r0,[r3,#TICKS_OFS]  
 275 003e 00F10100 	  add r0,#1
 276 0042 9860     	  str r0,[r3,#TICKS_OFS]
 277 0044 D868     	  ldr r0,[r3,#TIMER_OFS]
 278 0046 10B1     	  cbz r0, systick_exit
 279 0048 A0F10100 	  sub r0,#1
 280 004c D860     	  str r0,[r3,#TIMER_OFS]
 281              	systick_exit:
 282 004e 7047     	  bx lr
 283              	
 284              	
 285              	/**************************************
 286              	  reset_handler execute at MCU reset
 287              	***************************************/
 288              	    .section  .text.reset_handler
 289              	  .type  reset_handler, %function
 290              	  .p2align 2 
 291              	  .global reset_handler
 292              	reset_handler:
 293 0000 00F070F8 		bl	remap 
 294 0004 00F006F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 295              	//	bl	UNLOCK			/* unlock flash memory */
 296 0008 0148     		ldr r0,forth_entry
 297 000a 40F00100 		orr r0,#1
 298 000e 0047     		bx r0 
 299              	forth_entry:
 300 0010 B81B0018 		.word COLD+MAPOFFSET 
 301              	
 302              	  .type init_devices, %function
 303              	  .p2align 2 
 304              	init_devices:
 305              	/* init clock to HSE 72 Mhz */
 306              	/* set 2 wait states in FLASH_ACR_LATENCY */
 307 0014 4FF40050 		mov r0,#FLASH_BASE_ADR&0xffff
 308 0018 C4F20200 		movt r0,#FLASH_BASE_ADR>>16 
 309 001c 4FF01202 	  mov r2,#0x12
 310 0020 0260     	  str r2,[r0,#FLASH_ACR]
 311              	/* configure clock for HSE, 8 Mhz crystal */
 312              	/* enable HSE in RCC_CR */
 313 0022 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 314 0026 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 315 002a 0168     	  ldr r1,[r0,#RCC_CR]
 316 002c 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 317 0030 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 318              	/* wait HSERDY loop */
 319              	wait_hserdy:
 320 0032 0168     	  ldr r1,[r0,#RCC_CR]
 321 0034 11F4003F 	  tst r1,#(1<<17)
 322 0038 FBD0     	  beq wait_hserdy
 323              	
 324              	/************************************************* 
 325              	   configure PLL mul factor and source 
 326              	   SYSCLOCK=72 Mhz
 327              	   select HSE as  PLL source clock
 328              	   multiply frequency by 9 
 329              	   APB1 clock is limited to 36 Mhz so divide by 2 
ARM GAS  stm32eforth.s 			page 9


 330              	****************************************************/
 331 003a 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 332 003e C0F21D01 	  movt r1,#(7<<2)|1
 333 0042 4160     	  str r1,[r0,#RCC_CFGR]
 334              	  /* enable PLL */
 335 0044 0168     	  ldr r1,[r0,#RCC_CR]
 336 0046 41F08071 	  orr r1, #1<<24 
 337 004a 0160     	  str r1,[r0,#RCC_CR]
 338              	/* wait for PLLRDY */
 339              	wait_pllrdy:
 340 004c 0168     	  ldr r1,[r0,#RCC_CR]
 341 004e 11F0007F 	  tst r1,#(1<<25)
 342 0052 FBD0     	  beq wait_pllrdy 
 343              	/* select PLL as sysclock */
 344 0054 4168     	  ldr r1,[r0,#RCC_CFGR]
 345 0056 4FF6FC72 	  mov r2,#0xfffc
 346 005a CFF6FF72 	  movt r2,#0xffff
 347 005e 01EA0201 	  and r1,r1,r2 
 348 0062 4FF00202 	  mov r2,#2
 349 0066 41EA0201 	  orr r1,r1,r2
 350 006a 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 351              	/* wait for SWS==2 */
 352              	wait_sws:
 353 006c 4168     	  ldr r1,[r0,#RCC_CFGR]
 354 006e 11F0080F 	  tst r1,#(2<<2)
 355 0072 FBD0     	  beq wait_sws
 356              	/* now sysclock is 72 Mhz */
 357              	
 358              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 359 0074 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 360 0078 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 361 007c 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 362 0080 8161     	  str	r1, [r0, #RCC_APB2ENR]
 363              	
 364              	/* configure GPIOC:13 as output for user LED */
 365 0082 4FF48050 	  mov r0,#GPIOC_BASE_ADR&0xffff
 366 0086 C4F20100 	  movt r0,#GPIOC_BASE_ADR>>16
 367 008a 4168     	  ldr r1,[r0,#GPIO_CRH]
 368 008c 6FF47002 	  mvn r2,#(15<<20)
 369 0090 01EA0201 	  and r1,r1,r2
 370 0094 4FF4C002 	  mov r2,#(6<<20)
 371 0098 41EA0201 	  orr r1,r1,r2
 372 009c 4160     	  str r1,[r0,#GPIO_CRH]
 373              	
 374              	/* configure USART1 */
 375              	/* set GPIOA PIN 9, uart TX  */
 376 009e 4FF40060 	  mov r0,#GPIOA_BASE_ADR&0XFFFF
 377 00a2 C4F20100 	  movt r0,#GPIOA_BASE_ADR>>16	
 378 00a6 4168     	  ldr r1,[r0,#GPIO_CRH]
 379 00a8 6FF0F002 	  mvn r2,#(15<<4)
 380 00ac 01EA0201 	  and r1,r1,r2
 381 00b0 4FF0A002 	  mov r2,#(0xA<<4)
 382 00b4 41EA0201 	  orr r1,r1,r2 
 383 00b8 4160     	  str r1,[r0,#GPIO_CRH]
 384              	
 385 00ba 4FF46050 	  mov r0,#UART&0xFFFF
 386 00be C4F20100 	  movt r0,#UART>>16	
ARM GAS  stm32eforth.s 			page 10


 387              	/* BAUD rate */
 388 00c2 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 389 00c6 8160     	  str r1,[r0,#USART_BRR]
 390 00c8 42F20C01 	  mov r1,#(3<<2)+(1<<13)
 391 00cc C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 392              	/* configure systicks for 1msec ticks */
 393 00ce 4EF21000 	  mov r0,#STK_BASE_ADR&0xFFFF
 394 00d2 CEF20000 	  movt r0,#STK_BASE_ADR>>16	
 395 00d6 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 396 00da 4160     	  str r1,[r0,#STK_LOAD]
 397 00dc 4FF00301 	  mov r1,#3
 398 00e0 0160     	  str r1,[r0,STK_CTL]
 399 00e2 7047     	  _NEXT  
 400              	
 401              	/* copy system to RAM */ 
 402              		.type remap, %function 
 403              	
 404              	remap:
 405 00e4 DFF83400 		ldr r0,remap_dest  
 406 00e8 0B49     		ldr r1,remap_src 
 407 00ea 42F22042 		mov r2,#CTOP-UZERO 
 408 00ee 02F10302 		add r2,r2,#3
 409 00f2 22F00302 		and r2,r2,#~3 
 410 00f6 51F8043B 	1:	ldr r3,[r1],#4 
 411 00fa 40F8043B 		str r3,[r0],#4 
 412 00fe 043A     		subs R2,#4 
 413 0100 F9D1     		bne 1b
 414              	// zero end of RAM 
 415 0102 4FF4A042 		mov r2,#0x5000
 416 0106 C2F20002 		movt r2,#0x2000
 417 010a 83EA0303 		eor r3,r3,r3 
 418 010e 40F8043B 	2:  str r3,[r0],#4
 419 0112 9042     		cmp r0,r2 
 420 0114 FBDB     		blt 2b 
 421 0116 7047     		_NEXT 
 422              	remap_src:
 423 0118 00040000 		.word UZERO 
 424              	remap_dest:
 425 011c 00000020 		.word RAMOFFSET 
 426              	
 427              	/********************
 428              	* Version control
 429              	*******************/
 430              	.equ VER ,	0x01	/*major release version */
 431              	.equ EXT ,	0x00	/*minor extension */
 432              	
 433              	/* Constants */
 434              	
 435              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 436              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 437              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 438              	
 439              	.equ CELLL ,	4	/*size of a cell */
 440              	.equ BASEE ,	10	/*default radix */
 441              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 442              	
 443              	.equ BKSPP ,	8	/*backspace */
ARM GAS  stm32eforth.s 			page 11


 444              	.equ LF ,	10	  /*line feed */
 445              	.equ CRR ,	13	/*carriage return */
 446              	.equ ERR ,	27	/*error escape */
 447              	.equ TIC ,	39	/*tick */
 448              	
 449              	/********************************************************
 450              	* RAM memory mapping
 451              	* 	0x20000000	RAM base address
 452              	*	0x20000000  system variables	
 453              	* 	0x20000100	Forth dictionary
 454              	* 	0x2000????	top of dictionary, HERE
 455              	* 	0x2000????	WORD buffer, HERE+16
 456              	*   0x20004E00  end of user space
 457              	* 	0x20004E80	top of data stack  R2
 458              	* 	0x20004E80	TIB terminal input buffer
 459              	* 	0x20004F80	top of return stack  R1
 460              	* 	0x20005000	top of hardware stack for interrupts R14
 461              	********************************************************/
 462              	
 463              	
 464              	/******************************************************
 465              	*  COLD start moves the following to USER variables.
 466              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 467              	******************************************************/
 468 0120 AFF30080 		.p2align 10
 468      AFF30080 
 468      AFF30080 
 468      AFF30080 
 468      AFF30080 
 469              	
 470              	UZERO:
 471 0400 00000000 		.word 0  			/*Reserved */
 472 0404 55AA0000 		.word 0xaa55 /* SEED  */ 
 473 0408 00000000 		.word 0      /* MSEC */
 474 040c 00000000 	    .word 0     /* TIMER */
 475 0410 FFFFFFFF 		.word -1    /* >RAM */ 
 476 0414 494D4147 		.ascii "IMAG" /* signature */ 
 477 0418 441B0018 		.word HI+MAPOFFSET  /*'BOOT */
 478 041c 0A000000 		.word BASEE 	/*BASE */
 479 0420 00000000 		.word 0			/*tmp */
 480 0424 00000000 		.word 0			/*SPAN */
 481 0428 00000000 		.word 0			/*>IN */
 482 042c 00000000 		.word 0			/*#TIB */
 483 0430 804E0020 		.word TIBB	/*TIB */
 484 0434 340E0018 		.word INTER+MAPOFFSET	/*'EVAL */
 485 0438 00000000 		.word 0			/*HLD */
 486 043c B01B0018 		.word LASTN+MAPOFFSET	/*CONTEXT */
 487 0440 201C0018 		.word CTOP+MAPOFFSET	/* FCP end of system dictionnary */
 488 0444 201C0018 		.word CTOP+MAPOFFSET	/* CP end of RAM dictionary RAM */
 489 0448 B01B0018 		.word LASTN+MAPOFFSET	/*LAST word in dictionary */
 490 044c 00000000 		.word 0,0			/*reserved */
 490      00000000 
 491              	ULAST:
 492              	
 493              	 
 494              	
 495              	/***********************************
ARM GAS  stm32eforth.s 			page 12


 496              	//  Start of Forth dictionary
 497              	***********************************/
 498              	
 499              		.p2align 2 
 500              	
 501              	// RANDOM ( n1 -- {0..n1-1} )
 502              	// return pseudo random number 
 503              	// REF: https://en.wikipedia.org/wiki/Xorshift
 504              	
 505 0454 00000000 		.word 0
 506 0458 06       	_RAND: .byte 6
 507 0459 52414E44 		.ascii "RANDOM"
 507      4F4D
 508 045f 00       		.p2align 2 
 509              	RAND:
 510 0460 42F804ED 		_NEST 
 511 0464 00F0EEFA 		bl SEED 
 512 0468 00F0D2F8 		bl AT 
 513 046c 4FEA4534 		lsl r4,r5,#13
 514 0470 85EA0405 		eor r5,r4
 515 0474 4FEA5544 		lsr r4,r5,#17
 516 0478 85EA0405 		eor r5,r4
 517 047c 4FEA4514 		lsl r4,r5,#5
 518 0480 85EA0405 		eor r5,r4
 519 0484 00F008F9 		bl DUPP 
 520 0488 00F0DCFA 		bl SEED 
 521 048c 00F0B6F8 		bl STORE 
 522 0490 00F036FA 		bl ABSS
 523 0494 00F008F9 		bl SWAP 
 524 0498 00F022FC 		bl MODD 
 525 049c 52F804FB 		_UNNEST 
 526              	
 527              	// REBOOT ( -- )
 528              	// hardware reset 
 529 04a0 58F8FF17 		.word _RAND+MAPOFFSET
 530 04a4 06       	_REBOOT: .byte 6
 531 04a5 5245424F 		.ascii "REBOOT"
 531      4F54
 532 04ab 00       		.p2align 2 
 533              	REBOOT:
 534 04ac 0348     		ldr r0,scb_adr 
 535 04ae C168     		ldr r1,[r0,#SCB_AIRCR]
 536 04b0 41F00401 		orr r1,#(1<<2)
 537 04b4 C0F2FA51 		movt r1,#SCB_VECTKEY
 538 04b8 C160     		str r1,[r0,#SCB_AIRCR]
 539 04ba FEE7     		b . 
 540              	scb_adr:
 541 04bc 00ED00E0 		.word SCB_BASE_ADR 
 542              	
 543              	// PAUSE ( u -- ) 
 544              	// suspend execution for u milliseconds
 545 04c0 A4F8FF17 		.word _REBOOT+MAPOFFSET
 546 04c4 05       	_PAUSE: .byte 5
 547 04c5 50415553 		.ascii "PAUSE"
 547      45
 548 04ca 00BF     		.p2align 2
 549              	PAUSE:
ARM GAS  stm32eforth.s 			page 13


 550 04cc 42F804ED 		_NEST 
 551 04d0 00F0CCFA 		BL TIMER 
 552 04d4 00F092F8 		BL STORE 
 553              	PAUSE_LOOP:
 554 04d8 00F0C8FA 		BL TIMER 
 555 04dc 00F098F8 		BL AT 
 556 04e0 00F070F8 		BL QBRAN 
 557 04e4 F0040000 		.word PAUSE_EXIT 
 558 04e8 00F078F8 		BL BRAN 
 559 04ec D8040000 		.word PAUSE_LOOP 
 560              	PAUSE_EXIT: 		
 561 04f0 52F804FB 		_UNNEST 
 562              	
 563              	//  ULED ( T|F -- )
 564              	// control user LED, -1 ON, 0 OFF  
 565 04f4 C4F8FF17 		.word _PAUSE + MAPOFFSET
 566 04f8 04       	_ULED: .byte 4
 567 04f9 554C4544 		.ascii "ULED"
 568 04fd 0000BF   		.p2align 2
 569              		.type ULED, %function 
 570              	ULED:
 571 0500 4FF40056 		mov r6,#(1<<LED_PIN)
 572 0504 4FF48054 		mov r4,#LED_GPIO&0xffff
 573 0508 C4F20104 		movt r4,#LED_GPIO>>16
 574 050c 2800     		movs r0,r5 
 575 050e 51F8045B 		_POP
 576 0512 01D0     		beq ULED_OFF 
 577 0514 6661     		str r6,[r4,#GPIO_BRR]
 578 0516 7047     		_NEXT 
 579              	ULED_OFF:
 580 0518 2661     		str r6,[r4,#GPIO_BSRR]
 581 051a 7047     		_NEXT 
 582              		
 583              	//    ?RX	 ( -- c T | F )
 584              	// 	Return input character and true, or a false if no input.
 585 051c F8F8FF17 		.word	_ULED+MAPOFFSET
 586 0520 04       	_QRX:	.byte   4
 587 0521 3F4B4559 		.ascii "?KEY"
 588 0525 0000BF   		.p2align 2 
 589              	QKEY:
 590              	QRX: 
 591 0528 41F8045D 		_PUSH
 592 052c 4FF46054 		mov r4,#UART&0xFFFF
 593 0530 C4F20104 		movt r4,#UART>>16
 594 0534 2688     		ldrh	r6, [r4, #USART_SR]
 595 0536 16F02006 		ands	r6, #0x20		//  RXE
 596 053a 05D0     		BEQ	QRX1
 597 053c 6568     	 	LDR	R5, [R4, #USART_DR]
 598 053e 41F8045D 		_PUSH
 599 0542 18BF     	    IT NE 
 600 0544 6FF00005 		MVNNE	R5,#0
 601              	QRX1:
 602 0548 08BF     		IT EQ 
 603 054a 0025     	    MOVEQ	R5,#0
 604 054c 7047     		_NEXT
 605 054e 00BF     		.p2align 2 
 606              	
ARM GAS  stm32eforth.s 			page 14


 607              	//    TX!	 ( c -- )
 608              	// 	Send character c to the output device.
 609              	
 610 0550 20F9FF17 		.word	_QRX+MAPOFFSET
 611 0554 04       	_TXSTO:	.byte 4
 612 0555 454D4954 		.ascii "EMIT"
 613 0559 0000BF   		.p2align 2 	
 614              	TXSTO:
 615              	EMIT:
 616              	TECHO:
 617 055c 4FF46054 		mov r4,#UART&0xFFFF
 618 0560 C4F20104 		movt r4,#UART>>16
 619              	TX1:
 620 0564 2688     		ldrh	r6, [r4, #USART_SR]	
 621 0566 16F08006 		ands	r6, #0x80		//  TXE bit 
 622 056a FBD0     		beq	TX1
 623 056c A580     		strh	r5, [r4, #USART_DR]	
 624 056e 51F8045B 		_POP
 625 0572 7047     		_NEXT
 626              		
 627              	// **************************************************************************
 628              	//  The kernel
 629              	
 630              	//    NOP	( -- )
 631              	// 	do nothing.
 632              	
 633 0574 54F9FF17 		.word	_TXSTO+MAPOFFSET
 634 0578 03       	_NOP:	.byte   3
 635 0579 4E4F50   		.ascii "NOP"
 636              		.p2align 2 	
 637              	NOP:
 638 057c 7047     		_NEXT
 639              	 
 640              	
 641              	//    doLIT	( -- w )
 642              	// 	Push an inline literal.
 643              	
 644              	// 	.word	_NOP+MAPOFFSET
 645              	// _LIT	.byte   COMPO+5
 646              	// 	.ascii "doLIT"
 647              	// 	.p2align 2 	
 648              	DOLIT:
 649 057e 41F8045D 		_PUSH				//  store R5 on data stack
 650 0582 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 651 0586 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 652 058a 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 653 058e 7047     		_NEXT
 654              	
 655              	//    EXECUTE	( ca -- )
 656              	// 	Execute the word at ca.
 657              	
 658 0590 78F9FF17 		.word	_NOP+MAPOFFSET
 659 0594 07       	_EXECU:	.byte   7
 660 0595 45584543 		.ascii "EXECUTE"
 660      555445
 661              		.p2align 2 	
 662              	EXECU:
ARM GAS  stm32eforth.s 			page 15


 663 059c 45F00104 		ORR	R4,R5,#1		//  b0=1 
 664 05a0 51F8045B 		_POP
 665 05a4 2047     		BX	R4
 666              	
 667              	//    next	( -- ) counter on R:
 668              	// 	Run time code for the single index loop.
 669              	// 	: next ( -- ) \ hilevel model
 670              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 671              	
 672              	// 	.word	_EXECU+MAPOFFSET
 673              	// _DONXT	.byte   COMPO+4
 674              	// 	.ascii "next"
 675              	// 	.p2align 2 	
 676              	DONXT:
 677 05a6 1468     		LDR	R4,[R2]   // ( -- u )  
 678 05a8 24B9     		CBNZ R4,NEXT1 
 679              		/* loop done */
 680 05aa 02F10402 		ADD	R2,R2,#4 // drop counter 
 681 05ae 0EF1040E 		ADD	LR,LR,#4 // skip after loop address 
 682 05b2 7047     		_NEXT
 683              	NEXT1:
 684              		/* decrement loop counter */
 685 05b4 A4F10104 		SUB	R4,R4,#1
 686 05b8 1460     		STR	R4,[R2]
 687 05ba 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 688 05be 4EF0010E 		ORR	LR,LR,#1 // begining of loop
 689 05c2 7047     		_NEXT
 690              	
 691              	//    ?branch	( f -- )
 692              	// 	Branch if flag is zero.
 693              	
 694              	// 	.word	_DONXT+MAPOFFSET
 695              	// _QBRAN	.byte   COMPO+7
 696              	// 	.ascii "?branch"
 697              	// 	.p2align 2 	
 698              	QBRAN:
 699 05c4 2C00     		MOVS	R4,R5
 700 05c6 51F8045B 		_POP
 701 05ca 04D1     		BNE	QBRAN1
 702 05cc 5EF801EC 		LDR	LR,[LR,#-1]
 703 05d0 4EF0010E 		ORR LR,LR,#1
 704 05d4 7047     		_NEXT
 705              	QBRAN1:
 706 05d6 0EF1040E 	 	ADD	LR,LR,#4
 707 05da 7047     		_NEXT
 708              	
 709              	//    branch	( -- )
 710              	// 	Branch to an inline address.
 711              	
 712              	// 	.word	_QBRAN+MAPOFFSET
 713              	// _BRAN	.byte   COMPO+6
 714              	// 	.ascii "branch"
 715              	// 	.p2align 2 	
 716              	BRAN:
 717 05dc 5EF801EC 		LDR	LR,[LR,#-1]
 718 05e0 4EF0010E 		ORR	LR,LR,#1
 719 05e4 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 16


 720              	
 721              	//    EXIT	(  -- )
 722              	// 	Exit the currently executing command.
 723              	
 724 05e6 94F9FF17 		.word	_EXECU+MAPOFFSET
 725 05ea 04       	_EXIT:	.byte   4
 726 05eb 45584954 		.ascii "EXIT"
 727 05ef 00       		.p2align 2 	
 728              	EXIT:
 729 05f0 52F804FB 		_UNNEST
 730              	
 731              	//    !	   ( w a -- )
 732              	// 	Pop the data stack to memory.
 733              	
 734 05f4 EAF9FF17 		.word	_EXIT+MAPOFFSET
 735 05f8 01       	_STORE:	.byte   1
 736 05f9 21       		.ascii "!"
 737 05fa 00BF     		.p2align 2 	
 738              	STORE:
 739 05fc 51F8044B 		LDR	R4,[R1],#4
 740 0600 2C60     		STR	R4,[R5]
 741 0602 51F8045B 		_POP
 742 0606 7047     		_NEXT
 743              	
 744              	//    @	   ( a -- w )
 745              	// 	Push memory location to the data stack.
 746              	
 747 0608 F8F9FF17 		.word	_STORE+MAPOFFSET
 748 060c 01       	_AT:	.byte   1
 749 060d 40       		.ascii "@"
 750 060e 00BF     		.p2align 2 	
 751              	AT:
 752 0610 2D68     		LDR	R5,[R5]
 753 0612 7047     		_NEXT
 754              	
 755              	//    C!	  ( c b -- )
 756              	// 	Pop the data stack to byte memory.
 757              	
 758 0614 0CFAFF17 		.word	_AT+MAPOFFSET
 759 0618 02       	_CSTOR:	.byte   2
 760 0619 4321     		.ascii "C!"
 761 061b 00       		.p2align 2 	
 762              	CSTOR:
 763 061c 51F8044B 		LDR	R4,[R1],#4
 764 0620 2C70     		STRB	R4,[R5]
 765 0622 51F8045B 		_POP
 766 0626 7047     		_NEXT
 767              	
 768              	//    C@	  ( b -- c )
 769              	// 	Push byte memory location to the data stack.
 770              	
 771 0628 18FAFF17 		.word	_CSTOR+MAPOFFSET
 772 062c 02       	_CAT:	.byte   2
 773 062d 4340     		.ascii "C@"
 774 062f 00       		.p2align 2 	
 775              	CAT:
 776 0630 2D78     		LDRB	R5,[R5]
ARM GAS  stm32eforth.s 			page 17


 777 0632 7047     		_NEXT
 778              	
 779              	//    R>	  ( -- w )
 780              	// 	Pop the return stack to the data stack.
 781              	
 782 0634 2CFAFF17 		.word	_CAT+MAPOFFSET
 783 0638 02       	_RFROM:	.byte   2
 784 0639 523E     		.ascii "R>"
 785 063b 00       		.p2align 2 	
 786              	RFROM:
 787 063c 41F8045D 		_PUSH
 788 0640 52F8045B 		LDR	R5,[R2],#4
 789 0644 7047     		_NEXT
 790              	
 791              	//    R@	  ( -- w )
 792              	// 	Copy top of return stack to the data stack.
 793              	
 794 0646 38FAFF17 		.word	_RFROM+MAPOFFSET
 795 064a 02       	_RAT:	.byte   2
 796 064b 5240     		.ascii "R@"
 797 064d 0000BF   		.p2align 2 	
 798              	RAT:
 799 0650 41F8045D 		_PUSH
 800 0654 1568     		LDR	R5,[R2]
 801 0656 7047     		_NEXT
 802              	
 803              	//    >R	  ( w -- )
 804              	// 	Push the data stack to the return stack.
 805              	
 806 0658 4AFAFF17 		.word	_RAT+MAPOFFSET
 807 065c 42       	_TOR:	.byte   COMPO+2
 808 065d 3E52     		.ascii ">R"
 809 065f 00       		.p2align 2 	
 810              	TOR:
 811 0660 42F8045D 		STR	R5,[R2,#-4]!
 812 0664 51F8045B 		_POP
 813 0668 7047     		_NEXT
 814              	
 815              	//    SP@	 ( -- a )
 816              	// 	Push the current data stack pointer.
 817              	
 818 066a 5CFAFF17 		.word	_TOR+MAPOFFSET
 819 066e 03       	_SPAT:	.byte   3
 820 066f 535040   		.ascii "SP@"
 821 0672 00BF     		.p2align 2 	
 822              	SPAT:
 823 0674 41F8045D 		_PUSH
 824 0678 0D46     		MOV	R5,R1
 825 067a 7047     		_NEXT
 826              	
 827              	//    DROP	( w -- )
 828              	// 	Discard top stack item.
 829              	
 830 067c 6EFAFF17 		.word	_SPAT+MAPOFFSET
 831 0680 04       	_DROP:	.byte   4
 832 0681 44524F50 		.ascii "DROP"
 833 0685 0000BF   		.p2align 2 	
ARM GAS  stm32eforth.s 			page 18


 834              	DROP:
 835 0688 51F8045B 		_POP
 836 068c 7047     		_NEXT
 837              	
 838              	//    DUP	 ( w -- w w )
 839              	// 	Duplicate the top stack item.
 840              	
 841 068e 80FAFF17 		.word	_DROP+MAPOFFSET
 842 0692 03       	_DUPP:	.byte   3
 843 0693 445550   		.ascii "DUP"
 844 0696 00BF     		.p2align 2 	
 845              	DUPP:
 846 0698 41F8045D 		_PUSH
 847 069c 7047     		_NEXT
 848              	
 849              	//    SWAP	( w1 w2 -- w2 w1 )
 850              	// 	Exchange top two stack items.
 851              	
 852 069e 92FAFF17 		.word	_DUPP+MAPOFFSET
 853 06a2 04       	_SWAP:	.byte   4
 854 06a3 53574150 		.ascii "SWAP"
 855 06a7 00       		.p2align 2 	
 856              	SWAP:
 857 06a8 0C68     		LDR	R4,[R1]
 858 06aa 0D60     		STR	R5,[R1]
 859 06ac 2546     		MOV	R5,R4
 860 06ae 7047     		_NEXT
 861              	
 862              	//    OVER	( w1 w2 -- w1 w2 w1 )
 863              	// 	Copy second stack item to top.
 864              	
 865 06b0 A2FAFF17 		.word	_SWAP+MAPOFFSET
 866 06b4 04       	_OVER:	.byte   4
 867 06b5 4F564552 		.ascii "OVER"
 868 06b9 0000BF   		.p2align 2 	
 869              	OVER:
 870 06bc 41F8045D 		_PUSH
 871 06c0 4D68     		LDR	R5,[R1,#4]
 872 06c2 7047     		_NEXT
 873              	
 874              	//    0<	  ( n -- t )
 875              	// 	Return true if n is negative.
 876              	
 877 06c4 B4FAFF17 		.word	_OVER+MAPOFFSET
 878 06c8 02       	_ZLESS:	.byte   2
 879 06c9 303C     		.ascii "0<"
 880 06cb 00       		.p2align 2 	
 881              	ZLESS:
 882 06cc 4FF00004 		MOV	R4,#0
 883 06d0 04EB2505 		ADD	R5,R4,R5,ASR #32
 884 06d4 7047     		_NEXT
 885              	
 886              	//    AND	 ( w w -- w )
 887              	// 	Bitwise AND.
 888              	
 889 06d6 C8FAFF17 		.word	_ZLESS+MAPOFFSET
 890 06da 03       	_ANDD:	.byte   3
ARM GAS  stm32eforth.s 			page 19


 891 06db 414E44   		.ascii "AND"
 892 06de 00BF     		.p2align 2 	
 893              	ANDD:
 894 06e0 51F8044B 		LDR	R4,[R1],#4
 895 06e4 05EA0405 		AND	R5,R5,R4
 896 06e8 7047     		_NEXT
 897              	
 898              	//    OR	  ( w w -- w )
 899              	// 	Bitwise inclusive OR.
 900              	
 901 06ea DAFAFF17 		.word	_ANDD+MAPOFFSET
 902 06ee 02       	_ORR:	.byte   2
 903 06ef 4F52     		.ascii "OR"
 904 06f1 0000BF   		.p2align 2 	
 905              	ORR:
 906 06f4 51F8044B 		LDR	R4,[R1],#4
 907 06f8 45EA0405 		ORR	R5,R5,R4
 908 06fc 7047     		_NEXT
 909              	
 910              	//    XOR	 ( w w -- w )
 911              	// 	Bitwise exclusive OR.
 912              	
 913 06fe EEFAFF17 		.word	_ORR+MAPOFFSET
 914 0702 03       	_XORR:	.byte   3
 915 0703 584F52   		.ascii "XOR"
 916 0706 00BF     		.p2align 2 	
 917              	XORR:
 918 0708 51F8044B 		LDR	R4,[R1],#4
 919 070c 85EA0405 		EOR	R5,R5,R4
 920 0710 7047     		_NEXT
 921              	
 922              	//    UM+	 ( w w -- w cy )
 923              	// 	Add two numbers, return the sum and carry flag.
 924              	
 925 0712 02FBFF17 		.word	_XORR+MAPOFFSET
 926 0716 03       	_UPLUS:	.byte   3
 927 0717 554D2B   		.ascii "UM+"
 928 071a 00BF     		.p2align 2 	
 929              	UPLUS:
 930 071c 0C68     		LDR	R4,[R1]
 931 071e 6419     		ADDS	R4,R4,R5
 932 0720 4FF00005 		MOV	R5,#0
 933 0724 45F10005 		ADC	R5,R5,#0
 934 0728 0C60     		STR	R4,[R1]
 935 072a 7047     		_NEXT
 936              	
 937              	//    RSHIFT	 ( w # -- w )
 938              	// 	arithmetic Right shift # bits.
 939              	
 940 072c 16FBFF17 		.word	_UPLUS+MAPOFFSET
 941 0730 06       	_RSHIFT:	.byte   6
 942 0731 52534849 		.ascii "RSHIFT"
 942      4654
 943 0737 00       		.p2align 2 	
 944              	RSHIFT:
 945 0738 51F8044B 		LDR	R4,[R1],#4
 946 073c 44FA05F5 		MOV	R5,R4,ASR R5
ARM GAS  stm32eforth.s 			page 20


 947 0740 7047     		_NEXT
 948              	
 949              	//    LSHIFT	 ( w # -- w )
 950              	// 	Right shift # bits.
 951              	
 952 0742 30FBFF17 		.word	_RSHIFT+MAPOFFSET
 953 0746 06       	_LSHIFT:	.byte   6
 954 0747 4C534849 		.ascii "LSHIFT"
 954      4654
 955 074d 0000BF   		.p2align 2 	
 956              	LSHIFT:
 957 0750 51F8044B 		LDR	R4,[R1],#4
 958 0754 04FA05F5 		MOV	R5,R4,LSL R5
 959 0758 7047     		_NEXT
 960              	
 961              	//    +	 ( w w -- w )
 962              	// 	Add.
 963              	
 964 075a 46FBFF17 		.word	_LSHIFT+MAPOFFSET
 965 075e 01       	_PLUS:	.byte   1
 966 075f 2B       		.ascii "+"
 967              		.p2align 2 	
 968              	PLUS:
 969 0760 51F8044B 		LDR	R4,[R1],#4
 970 0764 2544     		ADD	R5,R5,R4
 971 0766 7047     		_NEXT
 972              	
 973              	//    -	 ( w w -- w )
 974              	// 	Subtract.
 975              	
 976 0768 5EFBFF17 		.word	_PLUS+MAPOFFSET
 977 076c 01       	_SUBB:	.byte   1
 978 076d 2D       		.ascii "-"
 979 076e 00BF     		.p2align 2 	
 980              	SUBB:
 981 0770 51F8044B 		LDR	R4,[R1],#4
 982 0774 C5EB0405 		RSB	R5,R5,R4
 983 0778 7047     		_NEXT
 984              	
 985              	//    *	 ( w w -- w )
 986              	// 	Multiply.
 987              	
 988 077a 6CFBFF17 		.word	_SUBB+MAPOFFSET
 989 077e 01       	_STAR:	.byte   1
 990 077f 2A       		.ascii "*"
 991              		.p2align 2 	
 992              	STAR:
 993 0780 51F8044B 		LDR	R4,[R1],#4
 994 0784 04FB05F5 		MUL	R5,R4,R5
 995 0788 7047     		_NEXT
 996              	
 997              	//    UM*	 ( w w -- ud )
 998              	// 	Unsigned multiply.
 999              	
 1000 078a 7EFBFF17 		.word	_STAR+MAPOFFSET
 1001 078e 03       	_UMSTA:	.byte   3
 1002 078f 554D2A   		.ascii "UM*"
ARM GAS  stm32eforth.s 			page 21


 1003 0792 00BF     		.p2align 2 	
 1004              	UMSTA:
 1005 0794 0C68     		LDR	R4,[R1]
 1006 0796 A5FB0467 		UMULL	R6,R7,R5,R4
 1007 079a 0E60     		STR	R6,[R1]
 1008 079c 3D46     		MOV	R5,R7
 1009 079e 7047     		_NEXT
 1010              	
 1011              	//    M*	 ( w w -- d )
 1012              	// 	signed multiply.
 1013              	
 1014 07a0 8EFBFF17 		.word	_UMSTA+MAPOFFSET
 1015 07a4 02       	_MSTAR:	.byte   2
 1016 07a5 4D2A     		.ascii "M*"
 1017 07a7 00       		.p2align 2 	
 1018              	MSTAR:
 1019 07a8 0C68     		LDR	R4,[R1]
 1020 07aa 85FB0467 		SMULL	R6,R7,R5,R4
 1021 07ae 0E60     		STR	R6,[R1]
 1022 07b0 3D46     		MOV	R5,R7
 1023 07b2 7047     		_NEXT
 1024              	
 1025              	//    1+	 ( w -- w+1 )
 1026              	// 	Add 1.
 1027              	
 1028 07b4 A4FBFF17 		.word	_MSTAR+MAPOFFSET
 1029 07b8 02       	_ONEP:	.byte   2
 1030 07b9 312B     		.ascii "1+"
 1031 07bb 00       		.p2align 2 	
 1032              	ONEP:
 1033 07bc 05F10105 		ADD	R5,R5,#1
 1034 07c0 7047     		_NEXT
 1035              	
 1036              	//    1-	 ( w -- w-1 )
 1037              	// 	Subtract 1.
 1038              	
 1039 07c2 B8FBFF17 		.word	_ONEP+MAPOFFSET
 1040 07c6 02       	_ONEM:	.byte   2
 1041 07c7 312D     		.ascii "1-"
 1042 07c9 0000BF   		.p2align 2 	
 1043              	ONEM:
 1044 07cc A5F10105 		SUB	R5,R5,#1
 1045 07d0 7047     		_NEXT
 1046              	
 1047              	//    2+	 ( w -- w+2 )
 1048              	// 	Add 1.
 1049              	
 1050 07d2 C6FBFF17 		.word	_ONEM+MAPOFFSET
 1051 07d6 02       	_TWOP:	.byte   2
 1052 07d7 322B     		.ascii "2+"
 1053 07d9 0000BF   		.p2align 2 	
 1054              	TWOP:
 1055 07dc 05F10205 		ADD	R5,R5,#2
 1056 07e0 7047     		_NEXT
 1057              	
 1058              	//    2-	 ( w -- w-2 )
 1059              	// 	Subtract 2.
ARM GAS  stm32eforth.s 			page 22


 1060              	
 1061 07e2 D6FBFF17 		.word	_TWOP+MAPOFFSET
 1062 07e6 02       	_TWOM:	.byte   2
 1063 07e7 322D     		.ascii "2-"
 1064 07e9 0000BF   		.p2align 2 	
 1065              	TWOM:
 1066 07ec A5F10205 		SUB	R5,R5,#2
 1067 07f0 7047     		_NEXT
 1068              	
 1069              	//    CELL+	( w -- w+4 )
 1070              	// 	Add CELLL.
 1071              	
 1072 07f2 E6FBFF17 		.word	_TWOM+MAPOFFSET
 1073 07f6 05       	_CELLP:	.byte   5
 1074 07f7 43454C4C 		.ascii "CELL+"
 1074      2B
 1075              		.p2align 2 	
 1076              	CELLP:
 1077 07fc 05F10405 		ADD	R5,R5,#CELLL
 1078 0800 7047     		_NEXT
 1079              	
 1080              	//    CELL-	( w -- w-4 )
 1081              	// 	Subtract CELLL.
 1082              	
 1083 0802 F6FBFF17 		.word	_CELLP+MAPOFFSET
 1084 0806 05       	_CELLM:	.byte   5
 1085 0807 43454C4C 		.ascii "CELL-"
 1085      2D
 1086              		.p2align 2 	
 1087              	CELLM:
 1088 080c A5F10405 		SUB	R5,R5,#CELLL
 1089 0810 7047     		_NEXT
 1090              	 
 1091              	//    BL	( -- 32 )
 1092              	// 	Blank (ASCII space).
 1093              	
 1094 0812 06FCFF17 		.word	_CELLM+MAPOFFSET
 1095 0816 02       	_BLANK:	.byte   2
 1096 0817 424C     		.ascii "BL"
 1097 0819 0000BF   		.p2align 2 	
 1098              	BLANK:
 1099 081c 41F8045D 		_PUSH
 1100 0820 4FF02005 		MOV	R5,#32
 1101 0824 7047     		_NEXT
 1102              	
 1103              	//    CELLS	( w -- w*4 )
 1104              	// 	Multiply 4.
 1105              	
 1106 0826 16FCFF17 		.word	_BLANK+MAPOFFSET
 1107 082a 05       	_CELLS:	.byte   5
 1108 082b 43454C4C 		.ascii "CELLS"
 1108      53
 1109              		.p2align 2 	
 1110              	CELLS:
 1111 0830 4FEA8505 		MOV	R5,R5,LSL#2
 1112 0834 7047     		_NEXT
 1113              	
ARM GAS  stm32eforth.s 			page 23


 1114              	//    CELL/	( w -- w/4 )
 1115              	// 	Divide by 4.
 1116              	
 1117 0836 2AFCFF17 		.word	_CELLS+MAPOFFSET
 1118 083a 05       	_CELLSL:	.byte   5
 1119 083b 43454C4C 		.ascii "CELL/"
 1119      2F
 1120              		.p2align 2 	
 1121              	CELLSL:
 1122 0840 4FEAA505 		MOV	R5,R5,ASR#2
 1123 0844 7047     		_NEXT
 1124              	
 1125              	//    2*	( w -- w*2 )
 1126              	// 	Multiply 2.
 1127              	
 1128 0846 3AFCFF17 		.word	_CELLSL+MAPOFFSET
 1129 084a 02       	_TWOST:	.byte   2
 1130 084b 322A     		.ascii "2*"
 1131 084d 0000BF   		.p2align 2 	
 1132              	TWOST:
 1133 0850 4FEA4505 		MOV	R5,R5,LSL#1
 1134 0854 7047     		_NEXT
 1135              	
 1136              	//    2/	( w -- w/2 )
 1137              	// 	Divide by 2.
 1138              	
 1139 0856 4AFCFF17 		.word	_TWOST+MAPOFFSET
 1140 085a 02       	_TWOSL:	.byte   2
 1141 085b 322F     		.ascii "2/"
 1142 085d 0000BF   		.p2align 2 	
 1143              	TWOSL:
 1144 0860 4FEA6505 		MOV	R5,R5,ASR#1
 1145 0864 7047     		_NEXT
 1146              	
 1147              	//    ?DUP	( w -- w w | 0 )
 1148              	// 	Conditional duplicate.
 1149              	
 1150 0866 5AFCFF17 		.word	_TWOSL+MAPOFFSET
 1151 086a 04       	_QDUP:	.byte   4
 1152 086b 3F445550 		.ascii "?DUP"
 1153 086f 00       		.p2align 2 	
 1154              	QDUP:
 1155 0870 2C00     		MOVS	R4,R5
 1156 0872 18BF     		IT NE 
 1157 0874 41F8045D 	    STRNE	R5,[R1,#-4]!
 1158 0878 7047     		_NEXT
 1159              	
 1160              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1161              	// 	Rotate top 3 items.
 1162              	
 1163 087a 6AFCFF17 		.word	_QDUP+MAPOFFSET
 1164 087e 03       	_ROT:	.byte   3
 1165 087f 524F54   		.ascii "ROT"
 1166 0882 00BF     		.p2align 2 	
 1167              	ROT:
 1168 0884 0C68     		LDR	R4,[R1]  // r4=w2 
 1169 0886 0D60     		STR	R5,[R1]  // w3 replace w2 
ARM GAS  stm32eforth.s 			page 24


 1170 0888 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1171 088a 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1172 088c 7047     		_NEXT
 1173              	
 1174              	//    2DROP	( w1 w2 -- )
 1175              	// 	Drop top 2 items.
 1176              	
 1177 088e 7EFCFF17 		.word	_ROT+MAPOFFSET
 1178 0892 05       	_DDROP:	.byte   5
 1179 0893 3244524F 		.ascii "2DROP"
 1179      50
 1180              		.p2align 2 	
 1181              	DDROP:
 1182 0898 51F8045B 		_POP
 1183 089c 51F8045B 		_POP
 1184 08a0 7047     		_NEXT
 1185              	
 1186              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1187              	// 	Duplicate top 2 items.
 1188              	
 1189 08a2 92FCFF17 		.word	_DDROP+MAPOFFSET
 1190 08a6 04       	_DDUP:	.byte   4
 1191 08a7 32445550 		.ascii "2DUP"
 1192 08ab 00       		.p2align 2 	
 1193              	DDUP:
 1194 08ac 0C68     		LDR	R4,[R1] // r4=w1
 1195 08ae 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1196 08b2 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1197 08b6 7047     		_NEXT
 1198              	
 1199              	//    D+	( d1 d2 -- d3 )
 1200              	// 	Add top 2 double numbers.
 1201              	
 1202 08b8 A6FCFF17 		.word	_DDUP+MAPOFFSET
 1203 08bc 02       	_DPLUS:	.byte   2
 1204 08bd 442B     		.ascii "D+"
 1205 08bf 00       		.p2align 2 	
 1206              	DPLUS:
 1207 08c0 51F8044B 		LDR	R4,[R1],#4
 1208 08c4 51F8046B 		LDR	R6,[R1],#4
 1209 08c8 0F68     		LDR	R7,[R1]
 1210 08ca E419     		ADDS	R4,R4,R7
 1211 08cc 0C60     		STR	R4,[R1]
 1212 08ce 45EB0605 		ADC	R5,R5,R6
 1213 08d2 7047     		_NEXT
 1214              	
 1215              	//    NOT	 ( w -- !w )
 1216              	// 	1"s complement.
 1217              	
 1218 08d4 BCFCFF17 		.word	_DPLUS+MAPOFFSET
 1219 08d8 03       	_INVER:	.byte   3
 1220 08d9 4E4F54   		.ascii "NOT"
 1221              		.p2align 2 	
 1222              	INVER:
 1223 08dc 6FEA0505 		MVN	R5,R5
 1224 08e0 7047     		_NEXT
 1225              	
ARM GAS  stm32eforth.s 			page 25


 1226              	//    NEGATE	( w -- -w )
 1227              	// 	2's complement.
 1228              	
 1229 08e2 D8FCFF17 		.word	_INVER+MAPOFFSET
 1230 08e6 06       	_NEGAT:	.byte   6
 1231 08e7 4E454741 		.ascii "NEGATE"
 1231      5445
 1232 08ed 0000BF   		.p2align 2 	
 1233              	NEGAT:
 1234 08f0 C5F10005 		RSB	R5,R5,#0
 1235 08f4 7047     		_NEXT
 1236              	
 1237              	//    ABS	 ( w -- |w| )
 1238              	// 	Absolute.
 1239              	
 1240 08f6 E6FCFF17 		.word	_NEGAT+MAPOFFSET
 1241 08fa 03       	_ABSS:	.byte   3
 1242 08fb 414253   		.ascii "ABS"
 1243 08fe 00BF     		.p2align 2 	
 1244              	ABSS:
 1245 0900 15F0004F 		TST	R5,#0x80000000
 1246 0904 18BF     		IT NE
 1247 0906 6D42     	    RSBNE   R5,R5,#0
 1248 0908 7047     		_NEXT
 1249              	
 1250              	//  0= ( w -- f )
 1251              	// TOS==0?
 1252              	
 1253 090a FAFCFF17 		.word _ABSS+MAPOFFSET
 1254 090e 02       	_ZEQUAL: .byte 2
 1255 090f 303D     		.ascii "0="
 1256 0911 0000BF   		.p2align 2
 1257              	ZEQUAL:
 1258 0914 15B9     		cbnz r5,1f
 1259 0916 4FF0FF35 		mov r5,#-1
 1260 091a 7047     		_NEXT 
 1261 091c 85EA0505 	1:  eor r5,r5,r5  
 1262 0920 7047     		_NEXT 	
 1263              	
 1264              	//    =	 ( w w -- t )
 1265              	// 	Equal?
 1266              	
 1267 0922 0EFDFF17 		.word	_ZEQUAL+MAPOFFSET
 1268 0926 01       	_EQUAL:	.byte   1
 1269 0927 3D       		.ascii "="
 1270              		.p2align 2 	
 1271              	EQUAL:
 1272 0928 51F8044B 		LDR	R4,[R1],#4
 1273 092c A542     		CMP	R5,R4
 1274 092e 0CBF     		ITE EQ 
 1275 0930 6FF00005 	    MVNEQ	R5,#0
 1276 0934 0025     		MOVNE	R5,#0
 1277 0936 7047     		_NEXT
 1278              	
 1279              	//    U<	 ( w w -- t )
 1280              	// 	Unsigned equal?
 1281              	
ARM GAS  stm32eforth.s 			page 26


 1282 0938 26FDFF17 		.word	_EQUAL+MAPOFFSET
 1283 093c 02       	_ULESS:	.byte   2
 1284 093d 553C     		.ascii "U<"
 1285 093f 00       		.p2align 2 	
 1286              	ULESS:
 1287 0940 51F8044B 		LDR	R4,[R1],#4
 1288 0944 AC42     		CMP	R4,R5
 1289 0946 34BF     		ITE CC 
 1290 0948 6FF00005 		MVNCC	R5,#0
 1291 094c 0025     		MOVCS	R5,#0
 1292 094e 7047     		_NEXT
 1293              	
 1294              	//    <	( w w -- t )
 1295              	// 	Less?
 1296              	
 1297 0950 3CFDFF17 		.word	_ULESS+MAPOFFSET
 1298 0954 01       	_LESS:	.byte   1
 1299 0955 3C       		.ascii "<"
 1300 0956 00BF     		.p2align 2 	
 1301              	LESS:
 1302 0958 51F8044B 		LDR	R4,[R1],#4
 1303 095c AC42     		CMP	R4,R5
 1304 095e B4BF     	    ITE LT
 1305 0960 6FF00005 		MVNLT	R5,#0
 1306 0964 0025     		MOVGE	R5,#0
 1307 0966 7047     		_NEXT
 1308              	
 1309              	//    >	( w w -- t )
 1310              	// 	greater?
 1311              	
 1312 0968 54FDFF17 		.word	_LESS+MAPOFFSET
 1313 096c 01       	_GREAT:	.byte   1
 1314 096d 3E       		.ascii ">"
 1315 096e 00BF     		.p2align 2 	
 1316              	GREAT:
 1317 0970 51F8044B 		LDR	R4,[R1],#4
 1318 0974 AC42     		CMP	R4,R5
 1319 0976 CCBF     		ITE GT
 1320 0978 6FF00005 	    MVNGT	R5,#0
 1321 097c 0025     		MOVLE	R5,#0
 1322 097e 7047     		_NEXT
 1323              	
 1324              	//    MAX	 ( w w -- max )
 1325              	// 	Leave maximum.
 1326              	
 1327 0980 6CFDFF17 		.word	_GREAT+MAPOFFSET
 1328 0984 03       	_MAX:	.byte   3
 1329 0985 4D4158   		.ascii "MAX"
 1330              		.p2align 2 	
 1331              	MAX:
 1332 0988 51F8044B 		LDR	R4,[R1],#4
 1333 098c AC42     		CMP	R4,R5
 1334 098e C8BF     		IT GT 
 1335 0990 2546     		MOVGT	R5,R4
 1336 0992 7047     		_NEXT
 1337              	
 1338              	//    MIN	 ( w w -- min )
ARM GAS  stm32eforth.s 			page 27


 1339              	// 	Leave minimum.
 1340              	
 1341 0994 84FDFF17 		.word	_MAX+MAPOFFSET
 1342 0998 03       	_MIN:	.byte   3
 1343 0999 4D494E   		.ascii "MIN"
 1344              		.p2align 2 	
 1345              	MIN:
 1346 099c 51F8044B 		LDR	R4,[R1],#4
 1347 09a0 AC42     		CMP	R4,R5
 1348 09a2 B8BF     		IT LT
 1349 09a4 2546     		MOVLT	R5,R4
 1350 09a6 7047     		_NEXT
 1351              	
 1352              	//    +!	 ( w a -- )
 1353              	// 	Add to memory.
 1354              	
 1355 09a8 98FDFF17 		.word	_MIN+MAPOFFSET
 1356 09ac 02       	_PSTOR:	.byte   2
 1357 09ad 2B21     		.ascii "+!"
 1358 09af 00       		.p2align 2 	
 1359              	PSTOR:
 1360 09b0 51F8044B 		LDR	R4,[R1],#4
 1361 09b4 2E68     		LDR	R6,[R5]
 1362 09b6 2644     		ADD	R6,R6,R4
 1363 09b8 2E60     		STR	R6,[R5]
 1364 09ba 51F8045B 		_POP
 1365 09be 7047     		_NEXT
 1366              	
 1367              	//    2!	 ( d a -- )
 1368              	// 	Store double number.
 1369              	
 1370 09c0 ACFDFF17 		.word	_PSTOR+MAPOFFSET
 1371 09c4 02       	_DSTOR:	.byte   2
 1372 09c5 3221     		.ascii "2!"
 1373 09c7 00       		.p2align 2 	
 1374              	DSTOR:
 1375 09c8 51F8044B 		LDR	R4,[R1],#4
 1376 09cc 51F8046B 		LDR	R6,[R1],#4
 1377 09d0 45F8044B 		STR	R4,[R5],#4
 1378 09d4 2E60     		STR	R6,[R5]
 1379 09d6 51F8045B 		_POP
 1380 09da 7047     		_NEXT
 1381              	
 1382              	//    2@	 ( a -- d )
 1383              	// 	Fetch double number.
 1384              	
 1385 09dc C4FDFF17 		.word	_DSTOR+MAPOFFSET
 1386 09e0 02       	_DAT:	.byte   2
 1387 09e1 3240     		.ascii "2@"
 1388 09e3 00       		.p2align 2 	
 1389              	DAT:
 1390 09e4 6C68     		LDR	R4,[R5,#4]
 1391 09e6 41F8044D 		STR	R4,[R1,#-4]!
 1392 09ea 2D68     		LDR	R5,[R5]
 1393 09ec 7047     		_NEXT
 1394              	
 1395              	//    COUNT	( b -- b+1 c )
ARM GAS  stm32eforth.s 			page 28


 1396              	// 	Fetch length of string.
 1397              	
 1398 09ee E0FDFF17 		.word	_DAT+MAPOFFSET
 1399 09f2 05       	_COUNT:	.byte   5
 1400 09f3 434F554E 		.ascii "COUNT"
 1400      54
 1401              		.p2align 2 	
 1402              	COUNT:
 1403 09f8 15F8014B 		LDRB	R4,[R5],#1
 1404 09fc 41F8045D 		_PUSH
 1405 0a00 2546     		MOV	R5,R4
 1406 0a02 7047     		_NEXT
 1407              	
 1408              	//    DNEGATE	( d -- -d )
 1409              	// 	Negate double number.
 1410              	
 1411 0a04 F2FDFF17 		.word	_COUNT+MAPOFFSET
 1412 0a08 07       	_DNEGA:	.byte   7
 1413 0a09 444E4547 		.ascii "DNEGATE"
 1413      415445
 1414              		.p2align 2 	
 1415              	DNEGA:
 1416 0a10 0C68     		LDR	R4,[R1]
 1417 0a12 A6EB0606 		SUB	R6,R6,R6
 1418 0a16 341B     		SUBS R4,R6,R4
 1419 0a18 66EB0505 		SBC	R5,R6,R5
 1420 0a1c 0C60     		STR	R4,[R1]
 1421 0a1e 7047     		_NEXT
 1422              	
 1423              	// **************************************************************************
 1424              	//  System and user variables
 1425              	
 1426              	//    doVAR	( -- a )
 1427              	// 	Run time routine for VARIABLE and CREATE.
 1428              	
 1429              	// 	.word	_DNEGA+MAPOFFSET
 1430              	// _DOVAR	.byte  COMPO+5
 1431              	// 	.ascii "doVAR"
 1432              	// 	.p2align 2 	
 1433              	DOVAR:
 1434 0a20 41F8045D 		_PUSH
 1435 0a24 AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
 1436 0a28 52F804FB 		_UNNEST
 1437              	
 1438              	//    doCON	( -- a ) 
 1439              	// 	Run time routine for CONSTANT.
 1440              	
 1441              	// 	.word	_DOVAR+MAPOFFSET
 1442              	// _DOCON	.byte  COMPO+5
 1443              	// 	.ascii "doCON"
 1444              	// 	.p2align 2 	
 1445              	DOCON:
 1446 0a2c 41F8045D 		_PUSH
 1447 0a30 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1448 0a34 52F804FB 		_UNNEST
 1449              	
 1450              	/***********************
ARM GAS  stm32eforth.s 			page 29


 1451              	  system variables 
 1452              	***********************/
 1453              	
 1454              	 // SEED ( -- a)
 1455              	 // return PRNG seed address 
 1456              	
 1457 0a38 08FEFF17 		.word _DNEGA+MAPOFFSET
 1458 0a3c 04       	_SEED: .byte 4
 1459 0a3d 53454544 		.ascii "SEED"
 1460 0a41 0000BF   		.p2align 2
 1461              	SEED:
 1462 0a44 41F8045D 		_PUSH 
 1463 0a48 03F10405 		ADD R5,R3,#SEED_OFS
 1464 0a4c 7047     		_NEXT 	
 1465              	
 1466              	//  MSEC ( -- a)
 1467              	// return address of milliseconds counter
 1468 0a4e 3CFEFF17 	  .word _SEED+MAPOFFSET 
 1469 0a52 04       	_MSEC: .byte 4
 1470 0a53 4D534543 	  .ascii "MSEC"
 1471 0a57 00       	  .p2align 2 
 1472              	MSEC:
 1473 0a58 41F8045D 	  _PUSH
 1474 0a5c 03F10805 	  ADD R5,R3,#TICKS_OFS
 1475 0a60 7047     	  _NEXT 
 1476              	
 1477              	// TIMER ( -- a )
 1478              	// count down timer 
 1479 0a62 52FEFF17 	  .word _MSEC+MAPOFFSET
 1480 0a66 05       	_TIMER:  .byte 5
 1481 0a67 54494D45 	  .ascii "TIMER"
 1481      52
 1482              	  .p2align 2 
 1483              	TIMER:
 1484 0a6c 41F8045D 	  _PUSH 
 1485 0a70 03F10C05 	  ADD R5,R3,#TIMER_OFS
 1486 0a74 7047     	  _NEXT
 1487              	
 1488              	// >RAM ( -- a )
 1489              	// compilation target 
 1490              	// -1 compile to RAM, 0 compile to FLASH 
 1491 0a76 66FEFF17 		.word _TIMER+MAPOFFSET
 1492 0a7a 04       	_TORAM: .byte 4 
 1493 0a7b 3E52414D 		.ascii ">RAM" 
 1494 0a7f 00       		.p2align 2 
 1495              	TORAM:
 1496 0a80 41F8045D 		_PUSH 
 1497 0a84 03F11005 		ADD R5,R3,#TORAM_OFS
 1498 0a88 7047     		_NEXT 
 1499              	
 1500              	//    'BOOT	 ( -- a )
 1501              	// 	Application.
 1502              	
 1503 0a8a 7AFEFF17 		.word	_TORAM+MAPOFFSET
 1504 0a8e 05       	_TBOOT:	.byte   5
 1505 0a8f 27424F4F 		.ascii "'BOOT"
 1505      54
ARM GAS  stm32eforth.s 			page 30


 1506              		.p2align 2 	
 1507              	TBOOT:
 1508 0a94 41F8045D 		_PUSH
 1509 0a98 03F11805 		ADD	R5,R3,#BOOT_OFS 
 1510 0a9c 7047     		_NEXT
 1511              		
 1512              	//    BASE	( -- a )
 1513              	// 	Storage of the radix base for numeric I/O.
 1514              	
 1515 0a9e 8EFEFF17 		.word	_TBOOT+MAPOFFSET
 1516 0aa2 04       	_BASE:	.byte   4
 1517 0aa3 42415345 		.ascii "BASE"
 1518 0aa7 00       		.p2align 2 	
 1519              	BASE:
 1520 0aa8 41F8045D 		_PUSH
 1521 0aac 03F11C05 		ADD	R5,R3,#BASE_OFS
 1522 0ab0 7047     		_NEXT
 1523              	
 1524              	//    tmp	 ( -- a )
 1525              	// 	A temporary storage location used in parse and find.
 1526              	
 1527              	// 	.word	_BASE+MAPOFFSET
 1528              	// _TEMP	.byte   COMPO+3
 1529              	// 	.ascii "tmp"
 1530              	// 	.p2align 2 	
 1531              	TEMP:
 1532 0ab2 41F8045D 		_PUSH
 1533 0ab6 03F12005 		ADD	R5,R3,#TMP_OFS
 1534 0aba 7047     		_NEXT
 1535              	
 1536              	//    SPAN	( -- a )
 1537              	// 	Hold character count received by EXPECT.
 1538              	
 1539 0abc A2FEFF17 		.word	_BASE+MAPOFFSET
 1540 0ac0 04       	_SPAN:	.byte   4
 1541 0ac1 5350414E 		.ascii "SPAN"
 1542 0ac5 0000BF   		.p2align 2 	
 1543              	SPAN:
 1544 0ac8 41F8045D 		_PUSH
 1545 0acc 03F12405 		ADD	R5,R3,#SPAN_OFS
 1546 0ad0 7047     		_NEXT
 1547              	
 1548              	//    >IN	 ( -- a )
 1549              	// 	Hold the character pointer while parsing input stream.
 1550              	
 1551 0ad2 C0FEFF17 		.word	_SPAN+MAPOFFSET
 1552 0ad6 03       	_INN:	.byte   3
 1553 0ad7 3E494E   		.ascii ">IN"
 1554 0ada 00BF     		.p2align 2 	
 1555              	INN:
 1556 0adc 41F8045D 		_PUSH
 1557 0ae0 03F12805 		ADD	R5,R3,#TOIN_OFS
 1558 0ae4 7047     		_NEXT
 1559              	
 1560              	//    #TIB	( -- a )
 1561              	// 	Hold the current count and address of the terminal input buffer.
 1562              	
ARM GAS  stm32eforth.s 			page 31


 1563 0ae6 D6FEFF17 		.word	_INN+MAPOFFSET
 1564 0aea 04       	_NTIB:	.byte   4
 1565 0aeb 23544942 		.ascii "#TIB"
 1566 0aef 00       		.p2align 2 	
 1567              	NTIB:
 1568 0af0 41F8045D 		_PUSH
 1569 0af4 03F12C05 		ADD	R5,R3,#NTIB_OFS
 1570 0af8 7047     		_NEXT
 1571              	
 1572              	//    'EVAL	( -- a )
 1573              	// 	Execution vector of EVAL.
 1574              	
 1575 0afa EAFEFF17 		.word	_NTIB+MAPOFFSET
 1576 0afe 05       	_TEVAL:	.byte   5
 1577 0aff 27455641 		.ascii "'EVAL"
 1577      4C
 1578              		.p2align 2 	
 1579              	TEVAL:
 1580 0b04 41F8045D 		_PUSH
 1581 0b08 03F13405 		ADD	R5,R3,#EVAL_OFS
 1582 0b0c 7047     		_NEXT
 1583              	
 1584              	//    HLD	 ( -- a )
 1585              	// 	Hold a pointer in building a numeric output string.
 1586              	
 1587 0b0e FEFEFF17 		.word	_TEVAL+MAPOFFSET
 1588 0b12 03       	_HLD:	.byte   3
 1589 0b13 484C44   		.ascii "HLD"
 1590 0b16 00BF     		.p2align 2 	
 1591              	HLD:
 1592 0b18 41F8045D 		_PUSH
 1593 0b1c 03F13805 		ADD	R5,R3,#HLD_OFS
 1594 0b20 7047     		_NEXT
 1595              	
 1596              	//    CONTEXT	( -- a )
 1597              	// 	A area to specify vocabulary search order.
 1598              	
 1599 0b22 12FFFF17 		.word	_HLD+MAPOFFSET
 1600 0b26 07       	_CNTXT:	.byte   7
 1601 0b27 434F4E54 		.ascii "CONTEXT"
 1601      455854
 1602 0b2e 00BF     		.p2align 2 	
 1603              	CNTXT:
 1604              	CRRNT:
 1605 0b30 41F8045D 		_PUSH
 1606 0b34 03F13C05 		ADD	R5,R3,#CTXT_OFS
 1607 0b38 7047     		_NEXT
 1608              	
 1609              	//    CP	( -- a )
 1610              	// 	Point to top name in RAM vocabulary.
 1611              	
 1612 0b3a 26FFFF17 		.word	_CNTXT+MAPOFFSET
 1613 0b3e 02       	_CP:	.byte   2
 1614 0b3f 4350     		.ascii "CP"
 1615 0b41 0000BF   		.p2align 2 	
 1616              	CPP:
 1617 0b44 41F8045D 		_PUSH
ARM GAS  stm32eforth.s 			page 32


 1618 0b48 03F14405 		ADD	R5,R3,#USER_CTOP_OFS
 1619 0b4c 7047     		_NEXT
 1620              	
 1621              	//   FCP ( -- a )
 1622              	//  Point ot top of Forth system dictionary
 1623 0b4e 3EFFFF17 		.word _CP+MAPOFFSET
 1624 0b52 03       	_FCP: .byte 3            
 1625 0b53 464350   		.ascii "FCP"
 1626 0b56 00BF     		.p2align 2 
 1627              	FCP: 
 1628 0b58 41F8045D 		_PUSH 
 1629 0b5c 03F14005 		ADD R5,R3,#FORTH_CTOP_OFS 
 1630 0b60 7047     		_NEXT 
 1631              	
 1632              	//    LAST	( -- a )
 1633              	// 	Point to the last name in the name dictionary.
 1634              	
 1635 0b62 52FFFF17 		.word	_FCP+MAPOFFSET
 1636 0b66 04       	_LAST:	.byte   4
 1637 0b67 4C415354 		.ascii "LAST"
 1638 0b6b 00       		.p2align 2 	
 1639              	LAST:
 1640 0b6c 41F8045D 		_PUSH
 1641 0b70 03F14805 		ADD	R5,R3,#LASTN_OFS
 1642 0b74 7047     		_NEXT
 1643              	
 1644              	/***********************
 1645              		system constants 
 1646              	***********************/
 1647              	
 1648              	//	USER_BEGIN ( -- a )
 1649              	//  where user area begin in RAM
 1650 0b76 66FFFF17 		.word _LAST+MAPOFFSET
 1651 0b7a 0A       	_USER_BGN: .byte 10
 1652 0b7b 55534552 		.ascii "USER_BEGIN"
 1652      5F424547 
 1652      494E
 1653 0b85 0000BF   		.p2align 2
 1654              	USER_BEGIN:
 1655 0b88 41F8045D 		_PUSH 
 1656 0b8c 004D     		ldr r5,USR_BGN_ADR 
 1657 0b8e 7047     		_NEXT 
 1658              	USR_BGN_ADR:
 1659 0b90 201C0018 	.word CTOP+MAPOFFSET 
 1660              	
 1661              	//  USER_END ( -- a )
 1662              	//  where user area end in RAM 
 1663 0b94 7AFFFF17 		.word _USER_BGN+MAPOFFSET
 1664 0b98 08       	_USER_END: .byte 8 
 1665 0b99 55534552 		.ascii "USER_END" 
 1665      5F454E44 
 1666 0ba1 0000BF   		.p2align 2 
 1667              	USER_END:
 1668 0ba4 41F8045D 		_PUSH 
 1669 0ba8 4FF49C45 		mov r5,#DEND&0xffff
 1670 0bac C2F20005 		movt r5,#DEND>>16 
 1671 0bb0 7047     		_NEXT 
ARM GAS  stm32eforth.s 			page 33


 1672              	
 1673              	//  IMAGE0 ( -- a )
 1674              	//  where user image is saved in FLASH
 1675 0bb2 98FFFF17 		.word _USER_END+MAPOFFSET
 1676 0bb6 06       	_IMAGE0: .byte 6
 1677 0bb7 494D4147 		.ascii "IMAGE0"
 1677      4530
 1678 0bbd 0000BF   		.p2align 2 
 1679              	IMAGE0:
 1680 0bc0 41F8045D 		_PUSH
 1681 0bc4 004D     		ldr r5,USR_IMG_ADR   
 1682 0bc6 7047     		_NEXT 
 1683              	USR_IMG_ADR:
 1684 0bc8 002C0000 		.word USER_SPACE 
 1685              	
 1686              	// image signature 
 1687              	IMG_SIGN: 
 1688 0bcc 41F8045D 		_PUSH 
 1689 0bd0 03F11405 		ADD r5,r3,#IMG_SIGN_OFS 
 1690 0bd4 2D68     		LDR R5,[R5]
 1691 0bd6 7047     		_NEXT 
 1692              	
 1693              	/* *********************
 1694              	  Common functions
 1695              	***********************/
 1696              	
 1697              	//    WITHIN	( u ul uh -- t )
 1698              	// 	Return true if u is within the range of ul and uh.
 1699              	
 1700 0bd8 B6FFFF17 		.word	_IMAGE0+MAPOFFSET
 1701 0bdc 06       	_WITHI:	.byte   6
 1702 0bdd 57495448 		.ascii "WITHIN"
 1702      494E
 1703 0be3 00       		.p2align 2 	
 1704              	WITHI:
 1705 0be4 42F804ED 		_NEST
 1706 0be8 FFF768FD 		BL	OVER
 1707 0bec FFF7C0FD 		BL	SUBB
 1708 0bf0 FFF736FD 		BL	TOR
 1709 0bf4 FFF7BCFD 		BL	SUBB
 1710 0bf8 FFF720FD 		BL	RFROM
 1711 0bfc FFF7A0FE 		BL	ULESS
 1712 0c00 52F804FB 		_UNNEST
 1713              	
 1714              	//  Divide
 1715              	
 1716              	//    UM/MOD	( udl udh u -- ur uq )
 1717              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1718              	
 1719 0c04 DCFFFF17 		.word	_WITHI+MAPOFFSET
 1720 0c08 06       	_UMMOD:	.byte   6
 1721 0c09 554D2F4D 		.ascii "UM/MOD"
 1721      4F44
 1722 0c0f 00       		.p2align 2 	
 1723              	UMMOD:
 1724 0c10 4FF00107 		MOV	R7,#1
 1725 0c14 51F8044B 		LDR	R4,[R1],#4
ARM GAS  stm32eforth.s 			page 34


 1726 0c18 0E68     		LDR	R6,[R1]
 1727              	UMMOD0:
 1728 0c1a B619     		ADDS	R6,R6,R6
 1729 0c1c 6441     		ADCS	R4,R4,R4
 1730 0c1e 04D3     		BCC	UMMOD1
 1731 0c20 A4EB0504 		SUB	R4,R4,R5
 1732 0c24 06F10106 		ADD	R6,R6,#1
 1733 0c28 04E0     		B UMMOD2
 1734              	UMMOD1:
 1735 0c2a 641B     		SUBS	R4,R4,R5 
 1736 0c2c 28BF     		IT CS 
 1737 0c2e 0136     		ADDCS	R6,R6,#1
 1738 0c30 00D2     		BCS	UMMOD2
 1739 0c32 2C44     		ADD	R4,R4,R5
 1740              	UMMOD2:
 1741 0c34 FF19     		ADDS	R7,R7,R7
 1742 0c36 F0D3     		BCC	UMMOD0
 1743 0c38 3546     		MOV	R5,R6
 1744 0c3a 0C60     		STR	R4,[R1]
 1745 0c3c 7047     		_NEXT
 1746              	
 1747              	//    M/MOD	( d n -- r q )
 1748              	// 	Signed floored divide of double by single. Return mod and quotient.
 1749              	
 1750 0c3e 08000018 		.word	_UMMOD+MAPOFFSET
 1751 0c42 05       	_MSMOD:	.byte  5
 1752 0c43 4D2F4D4F 		.ascii "M/MOD"
 1752      44
 1753              		.p2align 2 	
 1754              	MSMOD:	
 1755 0c48 42F804ED 		_NEST
 1756 0c4c FFF724FD 		BL	DUPP
 1757 0c50 FFF73CFD 		BL	ZLESS
 1758 0c54 FFF720FD 		BL	DUPP
 1759 0c58 FFF702FD 		BL	TOR
 1760 0c5c FFF7B2FC 		BL	QBRAN
 1761 0c60 74000018 		.word	MMOD1+MAPOFFSET
 1762 0c64 FFF744FE 		BL	NEGAT
 1763 0c68 FFF7FAFC 		BL	TOR
 1764 0c6c FFF7D0FE 		BL	DNEGA
 1765 0c70 FFF7E4FC 		BL	RFROM
 1766              	MMOD1:
 1767 0c74 FFF7F4FC 	  BL	TOR
 1768 0c78 FFF70EFD 		BL	DUPP
 1769 0c7c FFF726FD 		BL	ZLESS
 1770 0c80 FFF7A0FC 		BL	QBRAN
 1771 0c84 90000018 		.word	MMOD2+MAPOFFSET
 1772 0c88 FFF7E2FC 		BL	RAT
 1773 0c8c FFF768FD 		BL	PLUS
 1774              	MMOD2:
 1775 0c90 FFF7D4FC 	  BL	RFROM
 1776 0c94 FFF7BCFF 		BL	UMMOD
 1777 0c98 FFF7D0FC 		BL	RFROM
 1778 0c9c FFF792FC 		BL	QBRAN
 1779 0ca0 B0000018 		.word	MMOD3+MAPOFFSET
 1780 0ca4 FFF700FD 		BL	SWAP
 1781 0ca8 FFF722FE 		BL	NEGAT
ARM GAS  stm32eforth.s 			page 35


 1782 0cac FFF7FCFC 		BL	SWAP
 1783              	MMOD3:   
 1784 0cb0 52F804FB 		_UNNEST
 1785              	
 1786              	//    /MOD	( n n -- r q )
 1787              	// 	Signed divide. Return mod and quotient.
 1788              	
 1789 0cb4 42000018 		.word	_MSMOD+MAPOFFSET
 1790 0cb8 04       	_SLMOD:	.byte   4
 1791 0cb9 2F4D4F44 		.ascii "/MOD"
 1792 0cbd 0000BF   		.p2align 2 	
 1793              	SLMOD:
 1794 0cc0 42F804ED 		_NEST
 1795 0cc4 FFF7FAFC 		BL	OVER
 1796 0cc8 FFF700FD 		BL	ZLESS
 1797 0ccc FFF7ECFC 		BL	SWAP
 1798 0cd0 FFF7BAFF 		BL	MSMOD
 1799 0cd4 52F804FB 		_UNNEST
 1800              	
 1801              	//    MOD	 ( n n -- r )
 1802              	// 	Signed divide. Return mod only.
 1803              	
 1804 0cd8 B8000018 		.word	_SLMOD+MAPOFFSET
 1805 0cdc 03       	_MODD:	.byte  3
 1806 0cdd 4D4F44   		.ascii "MOD"
 1807              		.p2align 2 	
 1808              	MODD:
 1809 0ce0 42F804ED 		_NEST
 1810 0ce4 FFF7ECFF 		BL	SLMOD
 1811 0ce8 FFF7CEFC 		BL	DROP
 1812 0cec 52F804FB 		_UNNEST
 1813              	
 1814              	//    /	   ( n n -- q )
 1815              	// 	Signed divide. Return quotient only.
 1816              	
 1817 0cf0 DC000018 		.word	_MODD+MAPOFFSET
 1818 0cf4 01       	_SLASH:	.byte  1
 1819 0cf5 2F       		.ascii "/"
 1820 0cf6 00BF     		.p2align 2 	
 1821              	SLASH:
 1822 0cf8 42F804ED 		_NEST
 1823 0cfc FFF7E0FF 		BL	SLMOD
 1824 0d00 FFF7D2FC 		BL	SWAP
 1825 0d04 FFF7C0FC 		BL	DROP
 1826 0d08 52F804FB 		_UNNEST
 1827              	
 1828              	//    */MOD	( n1 n2 n3 -- r q )
 1829              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1830              	
 1831 0d0c F4000018 		.word	_SLASH+MAPOFFSET
 1832 0d10 05       	_SSMOD:	.byte  5
 1833 0d11 2A2F4D4F 		.ascii "*/MOD"
 1833      44
 1834 0d16 00BF     		.p2align 2 	
 1835              	SSMOD:
 1836 0d18 42F804ED 		_NEST
 1837 0d1c FFF7A0FC 		BL	TOR
ARM GAS  stm32eforth.s 			page 36


 1838 0d20 FFF742FD 		BL	MSTAR
 1839 0d24 FFF78AFC 		BL	RFROM
 1840 0d28 FFF78EFF 		BL	MSMOD
 1841 0d2c 52F804FB 		_UNNEST
 1842              	
 1843              	//    */	  ( n1 n2 n3 -- q )
 1844              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1845              	
 1846 0d30 10010018 		.word	_SSMOD+MAPOFFSET
 1847 0d34 02       	_STASL:	.byte  2
 1848 0d35 2A2F     		.ascii "*/"
 1849 0d37 00       		.p2align 2 	
 1850              	STASL:
 1851 0d38 42F804ED 		_NEST
 1852 0d3c FFF7ECFF 		BL	SSMOD
 1853 0d40 FFF7B2FC 		BL	SWAP
 1854 0d44 FFF7A0FC 		BL	DROP
 1855 0d48 52F804FB 		_UNNEST
 1856              	
 1857              	// **************************************************************************
 1858              	//  Miscellaneous
 1859              	
 1860              	//    ALIGNED	( b -- a )
 1861              	// 	Align address to the cell boundary.
 1862              	
 1863 0d4c 34010018 		.word	_STASL+MAPOFFSET
 1864 0d50 07       	_ALGND:	.byte   7
 1865 0d51 414C4947 		.ascii "ALIGNED"
 1865      4E4544
 1866              		.p2align 2 	
 1867              	ALGND:
 1868 0d58 05F10305 		ADD	R5,R5,#3
 1869 0d5c 6FF00304 		MVN	R4,#3
 1870 0d60 05EA0405 		AND	R5,R5,R4
 1871 0d64 7047     		_NEXT
 1872              	
 1873              	//    >CHAR	( c -- c )
 1874              	// 	Filter non-printing characters.
 1875              	
 1876 0d66 50010018 		.word	_ALGND+MAPOFFSET
 1877 0d6a 05       	_TCHAR:	.byte  5
 1878 0d6b 3E434841 		.ascii ">CHAR"
 1878      52
 1879              		.p2align 2 	
 1880              	TCHAR:
 1881 0d70 42F804ED 		_NEST
 1882 0d74 FFF703FC 		_DOLIT
 1883 0d78 7F000000 		.word	0x7F
 1884 0d7c FFF7B0FC 		BL	ANDD
 1885 0d80 FFF78AFC 		BL	DUPP	// mask msb
 1886 0d84 FFF74AFD 		BL	BLANK
 1887 0d88 FFF7F9FB 		_DOLIT
 1888 0d8c 7F000000 		.word	127
 1889 0d90 FFF728FF 		BL	WITHI	// check for printable
 1890 0d94 FFF7A2FD 		BL	INVER
 1891 0d98 FFF714FC 		BL	QBRAN
 1892 0d9c AC010018 		.word	TCHA1+MAPOFFSET
ARM GAS  stm32eforth.s 			page 37


 1893 0da0 FFF772FC 		BL	DROP
 1894 0da4 FFF7EBFB 		_DOLIT
 1895 0da8 5F000000 		.word	'_'	// replace non-printables
 1896              	TCHA1:
 1897 0dac 52F804FB 		  _UNNEST
 1898              	
 1899              	//    DEPTH	( -- n )
 1900              	// 	Return the depth of the data stack.
 1901              	
 1902 0db0 6A010018 		.word	_TCHAR+MAPOFFSET
 1903 0db4 05       	_DEPTH:	.byte  5
 1904 0db5 44455054 		.ascii "DEPTH"
 1904      48
 1905 0dba 00BF     		.p2align 2 	
 1906              	DEPTH:
 1907 0dbc 41F8045D 		_PUSH
 1908 0dc0 44F68465 		MOVW	R5,#SPP&0xffff+4 
 1909 0dc4 C2F20005 	 	MOVT	R5,#SPP>>16 
 1910 0dc8 A5EB0105 		SUB	R5,R5,R1
 1911 0dcc 4FEAA505 		ASR	R5,R5,#2
 1912 0dd0 A5F10105 		SUB	R5,R5,#1
 1913 0dd4 7047     		_NEXT
 1914              	
 1915              	//    PICK	( ... +n -- ... w )
 1916              	// 	Copy the nth stack item to tos.
 1917              	
 1918 0dd6 B4010018 		.word	_DEPTH+MAPOFFSET
 1919 0dda 04       	_PICK:	.byte  4
 1920 0ddb 5049434B 		.ascii "PICK"
 1921 0ddf 00       		.p2align 2 	
 1922              	PICK:
 1923 0de0 42F804ED 		_NEST
 1924 0de4 FFF7EAFC 		BL	ONEP
 1925 0de8 FFF722FD 		BL	CELLS
 1926 0dec FFF742FC 		BL	SPAT
 1927 0df0 FFF7B6FC 		BL	PLUS
 1928 0df4 FFF70CFC 		BL	AT
 1929 0df8 52F804FB 		_UNNEST
 1930              	
 1931              	// **************************************************************************
 1932              	//  Memory access
 1933              	
 1934              	//    HERE	( -- a )
 1935              	// 	Return the top of the code dictionary.
 1936              	
 1937 0dfc DA010018 		.word	_PICK+MAPOFFSET
 1938 0e00 04       	_HERE:	.byte  4
 1939 0e01 48455245 		.ascii "HERE"
 1940 0e05 0000BF   		.p2align 2 	
 1941              	HERE:
 1942 0e08 42F804ED 		_NEST
 1943 0e0c FFF79AFE 		BL	CPP
 1944 0e10 FFF7FEFB 		BL	AT
 1945 0e14 52F804FB 		_UNNEST
 1946              		
 1947              	//    PAD	 ( -- a )
 1948              	// 	Return the address of a temporary buffer.
ARM GAS  stm32eforth.s 			page 38


 1949              	
 1950 0e18 00020018 		.word	_HERE+MAPOFFSET
 1951 0e1c 03       	_PAD:	.byte  3
 1952 0e1d 504144   		.ascii "PAD"
 1953              		.p2align 2 	
 1954              	PAD:
 1955 0e20 42F804ED 		_NEST
 1956 0e24 FFF7F0FF 		BL	HERE
 1957 0e28 05F15005 		ADD	R5,R5,#80
 1958 0e2c 52F804FB 		_UNNEST
 1959              	
 1960              	//    TIB	 ( -- a )
 1961              	// 	Return the address of the terminal input buffer.
 1962              	
 1963 0e30 1C020018 		.word	_PAD+MAPOFFSET
 1964 0e34 03       	_TIB:	.byte  3
 1965 0e35 544942   		.ascii "TIB"
 1966              		.p2align 2 	
 1967              	TIB:
 1968 0e38 41F8045D 		_PUSH
 1969 0e3c 1D6B     		ldr r5,[r3,#TIB_OFS]
 1970 0e3e 7047     		_NEXT
 1971              	
 1972              	//    @EXECUTE	( a -- )
 1973              	// 	Execute vector stored in address a.
 1974              	
 1975 0e40 34020018 		.word	_TIB+MAPOFFSET
 1976 0e44 08       	_ATEXE:	.byte   8
 1977 0e45 40455845 		.ascii "@EXECUTE"
 1977      43555445 
 1978 0e4d 0000BF   		.p2align 2 	
 1979              	ATEXE:
 1980 0e50 2C00     		MOVS	R4,R5
 1981 0e52 51F8045B 		_POP
 1982 0e56 2468     		LDR	R4,[R4]
 1983 0e58 44F00104 		ORR	R4,R4,#1
 1984 0e5c 18BF     	    IT NE 
 1985 0e5e 2047     		BXNE	R4
 1986 0e60 7047     		_NEXT
 1987              	
 1988              	//    CMOVE	( b1 b2 u -- )
 1989              	// 	Copy u bytes from b1 to b2.
 1990              	
 1991 0e62 44020018 		.word	_ATEXE+MAPOFFSET
 1992 0e66 05       	_CMOVE:	.byte   5
 1993 0e67 434D4F56 		.ascii "CMOVE"
 1993      45
 1994              		.p2align 2 	
 1995              	CMOVE:
 1996 0e6c 51F8046B 		LDR	R6,[R1],#4
 1997 0e70 51F8047B 		LDR	R7,[R1],#4
 1998 0e74 03E0     		B CMOV1
 1999              	CMOV0:
 2000 0e76 17F8014B 		LDRB	R4,[R7],#1
 2001 0e7a 06F8014B 		STRB	R4,[R6],#1
 2002              	CMOV1:
 2003 0e7e 2D00     		MOVS	R5,R5
ARM GAS  stm32eforth.s 			page 39


 2004 0e80 02D0     		BEQ	CMOV2
 2005 0e82 A5F10105 		SUB	R5,R5,#1
 2006 0e86 F6E7     		B CMOV0
 2007              	CMOV2:
 2008 0e88 51F8045B 		_POP
 2009 0e8c 7047     		_NEXT
 2010              	
 2011              	//    MOVE	( a1 a2 u -- )
 2012              	// 	Copy u words from a1 to a2.
 2013              	
 2014 0e8e 66020018 		.word	_CMOVE+MAPOFFSET
 2015 0e92 04       	_MOVE:	.byte   4
 2016 0e93 4D4F5645 		.ascii "MOVE"
 2017 0e97 00       		.p2align 2 	
 2018              	MOVE:
 2019 0e98 25F00305 		AND	R5,R5,#-4
 2020 0e9c 51F8046B 		LDR	R6,[R1],#4
 2021 0ea0 51F8047B 		LDR	R7,[R1],#4
 2022 0ea4 03E0     		B MOVE1
 2023              	MOVE0:
 2024 0ea6 57F8044B 		LDR	R4,[R7],#4
 2025 0eaa 46F8044B 		STR	R4,[R6],#4
 2026              	MOVE1:
 2027 0eae 2D00     		MOVS	R5,R5
 2028 0eb0 02D0     		BEQ	MOVE2
 2029 0eb2 A5F10405 		SUB	R5,R5,#4
 2030 0eb6 F6E7     		B MOVE0
 2031              	MOVE2:
 2032 0eb8 51F8045B 		_POP
 2033 0ebc 7047     		_NEXT
 2034              	
 2035              	//    FILL	( b u c -- )
 2036              	// 	Fill u bytes of character c to area beginning at b.
 2037              	
 2038 0ebe 92020018 		.word	_MOVE+MAPOFFSET
 2039 0ec2 04       	_FILL:	.byte   4
 2040 0ec3 46494C4C 		.ascii "FILL"
 2041 0ec7 00       		.p2align 2 	
 2042              	FILL:
 2043 0ec8 51F8046B 		LDR	R6,[R1],#4
 2044 0ecc 51F8047B 		LDR	R7,[R1],#4
 2045              	FILL0:
 2046 0ed0 00E0     		B FILL1
 2047 0ed2 2D46     		MOV	R5,R5
 2048              	FILL1:
 2049 0ed4 07F8015B 		STRB	R5,[R7],#1
 2050 0ed8 3600     		MOVS	R6,R6
 2051 0eda 02D0     		BEQ	FILL2
 2052 0edc A6F10106 		SUB	R6,R6,#1
 2053 0ee0 F6E7     		B FILL0
 2054              	FILL2:
 2055 0ee2 51F8045B 		_POP
 2056 0ee6 7047     		_NEXT
 2057              	
 2058              	//    PACK$	( b u a -- a )
 2059              	// 	Build a counted word with u characters from b. Null fill.
 2060              	
ARM GAS  stm32eforth.s 			page 40


 2061 0ee8 C2020018 		.word	_FILL+MAPOFFSET
 2062 0eec 05       	_PACKS:	.byte  5
 2063 0eed 5041434B 		.ascii "PACK$$"
 2063      2424
 2064 0ef3 00       		.p2align 2 	
 2065              	PACKS:
 2066 0ef4 42F804ED 		_NEST
 2067 0ef8 FFF72EFF 		BL	ALGND
 2068 0efc FFF7CCFB 		BL	DUPP
 2069 0f00 FFF7AEFB 		BL	TOR			// strings only on cell boundary
 2070 0f04 FFF7DAFB 		BL	OVER
 2071 0f08 FFF72AFC 		BL	PLUS
 2072 0f0c FFF756FC 		BL	ONEP
 2073 0f10 FFF735FB 		_DOLIT
 2074 0f14 FCFFFFFF 		.word	0xFFFFFFFC
 2075 0f18 FFF7E2FB 		BL	ANDD			// count mod cell
 2076 0f1c FFF72FFB 		_DOLIT
 2077 0f20 00000000 		.word	0
 2078 0f24 FFF7C0FB 		BL	SWAP
 2079 0f28 FFF768FB 		BL	STORE			// null fill cell
 2080 0f2c FFF790FB 		BL	RAT
 2081 0f30 FFF7BCFC 		BL	DDUP
 2082 0f34 FFF772FB 		BL	CSTOR
 2083 0f38 FFF740FC 		BL	ONEP			// save count
 2084 0f3c FFF7B4FB 		BL	SWAP
 2085 0f40 FFF794FF 		BL	CMOVE
 2086 0f44 FFF77AFB 		BL	RFROM
 2087 0f48 52F804FB 		_UNNEST   			// move string
 2088              	
 2089              	// **************************************************************************
 2090              	//  Numeric output, single precision
 2091              	
 2092              	//    DIGIT	( u -- c )
 2093              	// 	Convert digit u to a character.
 2094              	
 2095 0f4c EC020018 		.word	_PACKS+MAPOFFSET
 2096 0f50 05       	_DIGIT:	.byte  5
 2097 0f51 44494749 		.ascii "DIGIT"
 2097      54
 2098 0f56 00BF     		.p2align 2 	
 2099              	DIGIT:
 2100 0f58 42F804ED 		_NEST
 2101 0f5c FFF70FFB 		_DOLIT
 2102 0f60 09000000 		.word	9
 2103 0f64 FFF7AAFB 		BL	OVER
 2104 0f68 FFF7F6FC 		BL	LESS
 2105 0f6c 05F00705 		AND	R5,R5,#7
 2106 0f70 FFF7F6FB 		BL	PLUS
 2107 0f74 05F13005 		ADD	R5,R5,#'0'
 2108 0f78 52F804FB 		_UNNEST
 2109              	
 2110              	//    EXTRACT	( n base -- n c )
 2111              	// 	Extract the least significant digit from n.
 2112              	
 2113 0f7c 50030018 		.word	_DIGIT+MAPOFFSET
 2114 0f80 07       	_EXTRC:	.byte  7
 2115 0f81 45585452 		.ascii "EXTRACT"
ARM GAS  stm32eforth.s 			page 41


 2115      414354
 2116              		.p2align 2 	
 2117              	EXTRC:
 2118 0f88 42F804ED 		_NEST
 2119 0f8c FFF7F7FA 		_DOLIT
 2120 0f90 00000000 		.word	0
 2121 0f94 FFF788FB 		BL	SWAP
 2122 0f98 FFF73AFE 		BL	UMMOD
 2123 0f9c FFF784FB 		BL	SWAP
 2124 0fa0 FFF7DAFF 		BL	DIGIT
 2125 0fa4 52F804FB 		_UNNEST
 2126              	
 2127              	//    <#	  ( -- )
 2128              	// 	Initiate the numeric output process.
 2129              	
 2130 0fa8 80030018 		.word	_EXTRC+MAPOFFSET
 2131 0fac 02       	_BDIGS:	.byte  2
 2132 0fad 3C23     		.ascii "<#"
 2133 0faf 00       		.p2align 2 	
 2134              	BDIGS:
 2135 0fb0 42F804ED 		_NEST
 2136 0fb4 FFF734FF 		BL	PAD
 2137 0fb8 FFF7AEFD 		BL	HLD
 2138 0fbc FFF71EFB 		BL	STORE
 2139 0fc0 52F804FB 		_UNNEST
 2140              	
 2141              	//    HOLD	( c -- )
 2142              	// 	Insert a character into the numeric output string.
 2143              	
 2144 0fc4 AC030018 		.word	_BDIGS+MAPOFFSET
 2145 0fc8 04       	_HOLD:	.byte  4
 2146 0fc9 484F4C44 		.ascii "HOLD"
 2147 0fcd 0000BF   		.p2align 2 	
 2148              	HOLD:
 2149 0fd0 42F804ED 		_NEST
 2150 0fd4 FFF7A0FD 		BL	HLD
 2151 0fd8 FFF71AFB 		BL	AT
 2152 0fdc FFF7F6FB 		BL	ONEM
 2153 0fe0 FFF75AFB 		BL	DUPP
 2154 0fe4 FFF798FD 		BL	HLD
 2155 0fe8 FFF708FB 		BL	STORE
 2156 0fec FFF716FB 		BL	CSTOR
 2157 0ff0 52F804FB 		_UNNEST
 2158              	
 2159              	//    #	   ( u -- u )
 2160              	// 	Extract one digit from u and append the digit to output string.
 2161              	
 2162 0ff4 C8030018 		.word	_HOLD+MAPOFFSET
 2163 0ff8 01       	_DIG:	.byte  1
 2164 0ff9 23       		.ascii "#"
 2165 0ffa 00BF     		.p2align 2 	
 2166              	DIG:
 2167 0ffc 42F804ED 		_NEST
 2168 1000 FFF752FD 		BL	BASE
 2169 1004 FFF704FB 		BL	AT
 2170 1008 FFF7BEFF 		BL	EXTRC
 2171 100c FFF7E0FF 		BL	HOLD
ARM GAS  stm32eforth.s 			page 42


 2172 1010 52F804FB 		_UNNEST
 2173              	
 2174              	//    #S	  ( u -- 0 )
 2175              	// 	Convert u until all digits are added to the output string.
 2176              	
 2177 1014 F8030018 		.word	_DIG+MAPOFFSET
 2178 1018 02       	_DIGS:	.byte  2
 2179 1019 2353     		.ascii "#S"
 2180 101b 00       		.p2align 2 	
 2181              	DIGS:
 2182 101c 42F804ED 		_NEST
 2183              	DIGS1:
 2184 1020 FFF7ECFF 	    BL	DIG
 2185 1024 FFF738FB 		BL	DUPP
 2186 1028 FFF7CCFA 		BL	QBRAN
 2187 102c 32040018 		.word	DIGS2+MAPOFFSET
 2188 1030 F6E7     		B	DIGS1
 2189              	DIGS2:
 2190 1032 52F804FB 		  _UNNEST
 2191              	
 2192              	//    SIGN	( n -- )
 2193              	// 	Add a minus sign to the numeric output string.
 2194              	
 2195 1036 18040018 		.word	_DIGS+MAPOFFSET
 2196 103a 04       	_SIGN:	.byte  4
 2197 103b 5349474E 		.ascii "SIGN"
 2198 103f 00       		.p2align 2 	
 2199              	SIGN:
 2200 1040 42F804ED 		_NEST
 2201 1044 FFF742FB 		BL	ZLESS
 2202 1048 FFF7BCFA 		BL	QBRAN
 2203 104c 5C040018 		.word	SIGN1+MAPOFFSET
 2204 1050 FFF795FA 		_DOLIT
 2205 1054 2D000000 		.word	'-'
 2206 1058 FFF7BAFF 		BL	HOLD
 2207              	SIGN1:
 2208 105c 52F804FB 		  _UNNEST
 2209              	
 2210              	//    #>	  ( w -- b u )
 2211              	// 	Prepare the outputDCB to be TYPE'd.
 2212              	
 2213 1060 3A040018 		.word	_SIGN+MAPOFFSET
 2214 1064 02       	_EDIGS:	.byte  2
 2215 1065 233E     		.ascii "#>"
 2216 1067 00       		.p2align 2 	
 2217              	EDIGS:
 2218 1068 42F804ED 		_NEST
 2219 106c FFF70CFB 		BL	DROP
 2220 1070 FFF752FD 		BL	HLD
 2221 1074 FFF7CCFA 		BL	AT
 2222 1078 FFF7D2FE 		BL	PAD
 2223 107c FFF71EFB 		BL	OVER
 2224 1080 FFF776FB 		BL	SUBB
 2225 1084 52F804FB 		_UNNEST
 2226              	
 2227              	//    str	 ( n -- b u )
 2228              	// 	Convert a signed integer to a numeric string.
ARM GAS  stm32eforth.s 			page 43


 2229              	
 2230              	// 	.word	_EDIGS+MAPOFFSET
 2231              	// _STRR	.byte  3
 2232              	// 	.ascii "str"
 2233              	// 	.p2align 2 	
 2234              	STRR:
 2235 1088 42F804ED 		_NEST
 2236 108c FFF704FB 		BL	DUPP
 2237 1090 FFF7E6FA 		BL	TOR
 2238 1094 FFF734FC 		BL	ABSS
 2239 1098 FFF78AFF 		BL	BDIGS
 2240 109c FFF7BEFF 		BL	DIGS
 2241 10a0 FFF7CCFA 		BL	RFROM
 2242 10a4 FFF7CCFF 		BL	SIGN
 2243 10a8 FFF7DEFF 		BL	EDIGS
 2244 10ac 52F804FB 		_UNNEST
 2245              	
 2246              	//    HEX	 ( -- )
 2247              	// 	Use radix 16 as base for numeric conversions.
 2248              	
 2249 10b0 64040018 		.word	_EDIGS+MAPOFFSET
 2250 10b4 03       	_HEX:	.byte  3
 2251 10b5 484558   		.ascii "HEX"
 2252              		.p2align 2 	
 2253              	HEX:
 2254 10b8 42F804ED 		_NEST
 2255 10bc FFF75FFA 		_DOLIT
 2256 10c0 10000000 		.word	16
 2257 10c4 FFF7F0FC 		BL	BASE
 2258 10c8 FFF798FA 		BL	STORE
 2259 10cc 52F804FB 		_UNNEST
 2260              	
 2261              	//    DECIMAL	( -- )
 2262              	// 	Use radix 10 as base for numeric conversions.
 2263              	
 2264 10d0 B4040018 		.word	_HEX+MAPOFFSET
 2265 10d4 07       	_DECIM:	.byte  7
 2266 10d5 44454349 		.ascii "DECIMAL"
 2266      4D414C
 2267              		.p2align 2 	
 2268              	DECIM:
 2269 10dc 42F804ED 		_NEST
 2270 10e0 FFF74DFA 		_DOLIT
 2271 10e4 0A000000 		.word	10
 2272 10e8 FFF7DEFC 		BL	BASE
 2273 10ec FFF786FA 		BL	STORE
 2274 10f0 52F804FB 		_UNNEST
 2275              	
 2276              	// **************************************************************************
 2277              	//  Numeric input, single precision
 2278              	
 2279              	//    DIGIT?	( c base -- u t )
 2280              	// 	Convert a character to its numeric value. A flag indicates success.
 2281              	
 2282 10f4 D4040018 		.word	_DECIM+MAPOFFSET
 2283 10f8 06       	_DIGTQ:	.byte  6
 2284 10f9 44494749 		.ascii "DIGIT?"
ARM GAS  stm32eforth.s 			page 44


 2284      543F
 2285 10ff 00       		.p2align 2 	
 2286              	DIGTQ:
 2287 1100 42F804ED 		_NEST
 2288 1104 FFF7ACFA 		BL	TOR
 2289 1108 FFF739FA 		_DOLIT
 2290 110c 30000000 		.word	'0'
 2291 1110 FFF72EFB 		BL	SUBB
 2292 1114 FFF733FA 		_DOLIT
 2293 1118 09000000 		.word	9
 2294 111c FFF7CEFA 		BL	OVER
 2295 1120 FFF71AFC 		BL	LESS
 2296 1124 FFF74EFA 		BL	QBRAN
 2297 1128 4C050018 		.word	DGTQ1+MAPOFFSET
 2298 112c FFF727FA 		_DOLIT
 2299 1130 07000000 		.word	7
 2300 1134 FFF71CFB 		BL	SUBB
 2301 1138 FFF7AEFA 		BL	DUPP
 2302 113c FFF71FFA 		_DOLIT
 2303 1140 0A000000 		.word	10
 2304 1144 FFF708FC 		BL	LESS
 2305 1148 FFF7D4FA 		BL	ORR
 2306              	DGTQ1:
 2307 114c FFF7A4FA 	  BL	DUPP
 2308 1150 FFF774FA 		BL	RFROM
 2309 1154 FFF7F4FB 		BL	ULESS
 2310 1158 52F804FB 		_UNNEST
 2311              	
 2312              	//    NUMBER?	( a -- n T | a F )
 2313              	// 	Convert a number word to integer. Push a flag on tos.
 2314              	
 2315 115c F8040018 		.word	_DIGTQ+MAPOFFSET
 2316 1160 07       	_NUMBQ:	.byte  7
 2317 1161 4E554D42 		.ascii "NUMBER?"
 2317      45523F
 2318              		.p2align 2 	
 2319              	NUMBQ:
 2320 1168 42F804ED 		_NEST
 2321 116c FFF79CFC 		BL	BASE
 2322 1170 FFF74EFA 		BL	AT
 2323 1174 FFF774FA 		BL	TOR
 2324 1178 FFF701FA 		_DOLIT
 2325 117c 00000000 		.word	0
 2326 1180 FFF79CFA 		BL	OVER
 2327 1184 FFF738FC 		BL	COUNT
 2328 1188 FFF798FA 		BL	OVER
 2329 118c FFF750FA 		BL	CAT
 2330 1190 FFF7F5F9 		_DOLIT
 2331 1194 24000000 		.word	'$'
 2332 1198 FFF7C6FB 		BL	EQUAL
 2333 119c FFF712FA 		BL	QBRAN
 2334 11a0 B8050018 		.word	NUMQ1+MAPOFFSET
 2335 11a4 FFF788FF 		BL	HEX
 2336 11a8 FFF77EFA 		BL	SWAP
 2337 11ac FFF706FB 		BL	ONEP
 2338 11b0 FFF77AFA 		BL	SWAP
 2339 11b4 FFF70AFB 		BL	ONEM
ARM GAS  stm32eforth.s 			page 45


 2340              	NUMQ1:
 2341 11b8 FFF780FA 		BL	OVER
 2342 11bc FFF738FA 		BL	CAT
 2343 11c0 FFF7DDF9 		_DOLIT
 2344 11c4 2D000000 		.word	'-'
 2345 11c8 FFF7AEFB 		BL	EQUAL
 2346 11cc FFF748FA 		BL	TOR
 2347 11d0 FFF76AFA 		BL	SWAP
 2348 11d4 FFF73CFA 		BL	RAT
 2349 11d8 FFF7CAFA 		BL	SUBB
 2350 11dc FFF764FA 		BL	SWAP
 2351 11e0 FFF736FA 		BL	RAT
 2352 11e4 FFF7BCFA 		BL	PLUS
 2353 11e8 FFF742FB 		BL	QDUP
 2354 11ec FFF7EAF9 		BL	QBRAN
 2355 11f0 7C060018 		.word	NUMQ6+MAPOFFSET
 2356 11f4 FFF7EAFA 		BL	ONEM
 2357 11f8 FFF732FA 		BL	TOR
 2358              	NUMQ2:
 2359 11fc FFF74CFA 		BL	DUPP
 2360 1200 FFF72EFA 		BL	TOR
 2361 1204 FFF714FA 		BL	CAT
 2362 1208 FFF74EFC 		BL	BASE
 2363 120c FFF700FA 		BL	AT
 2364 1210 FFF776FF 		BL	DIGTQ
 2365 1214 FFF7D6F9 		BL	QBRAN
 2366 1218 60060018 		.word	NUMQ4+MAPOFFSET
 2367 121c FFF744FA 		BL	SWAP
 2368 1220 FFF742FC 		BL	BASE
 2369 1224 FFF7F4F9 		BL	AT
 2370 1228 FFF7AAFA 		BL	STAR
 2371 122c FFF798FA 		BL	PLUS
 2372 1230 FFF704FA 		BL	RFROM
 2373 1234 FFF7C2FA 		BL	ONEP
 2374 1238 FFF7B5F9 		BL	DONXT
 2375 123c FC050018 		.word	NUMQ2+MAPOFFSET
 2376 1240 FFF706FA 		BL	RAT
 2377 1244 FFF730FA 		BL	SWAP
 2378 1248 FFF71EFA 		BL	DROP
 2379 124c FFF7BAF9 		BL	QBRAN
 2380 1250 58060018 		.word	NUMQ3+MAPOFFSET
 2381 1254 FFF74CFB 		BL	NEGAT
 2382              	NUMQ3:
 2383 1258 FFF726FA 		BL	SWAP
 2384 125c 00F00CB8 		B.W	NUMQ5
 2385              	NUMQ4:
 2386 1260 FFF7ECF9 		BL	RFROM
 2387 1264 FFF7EAF9 		BL	RFROM
 2388 1268 FFF716FB 		BL	DDROP
 2389 126c FFF714FB 		BL	DDROP
 2390 1270 FFF785F9 		_DOLIT
 2391 1274 00000000 		.word	0
 2392              	NUMQ5:
 2393 1278 FFF70EFA 		BL	DUPP
 2394              	NUMQ6:
 2395 127c FFF7DEF9 		BL	RFROM
 2396 1280 FFF70AFB 		BL	DDROP
ARM GAS  stm32eforth.s 			page 46


 2397 1284 FFF7DAF9 		BL	RFROM
 2398 1288 FFF70EFC 		BL	BASE
 2399 128c FFF7B6F9 		BL	STORE
 2400 1290 52F804FB 		_UNNEST
 2401              	
 2402              	// **************************************************************************
 2403              	//  Basic I/O
 2404              	
 2405              	//    KEY	 ( -- c )
 2406              	// 	Wait for and return an input character.
 2407              	
 2408 1294 60050018 		.word	_NUMBQ+MAPOFFSET
 2409 1298 03       	_KEY:	.byte  3
 2410 1299 4B4559   		.ascii "KEY"
 2411              		.p2align 2 	
 2412              	KEY:
 2413 129c 42F804ED 		_NEST
 2414              	KEY1:
 2415 12a0 FFF742F9 		BL	QRX
 2416 12a4 FFF78EF9 		BL	QBRAN
 2417 12a8 A0060018 		.word	KEY1+MAPOFFSET
 2418              	// CTRL-C reboot
 2419 12ac FFF7F4F9 		BL DUPP 
 2420 12b0 FFF765F9 		BL DOLIT 
 2421 12b4 03000000 		.word 3 
 2422 12b8 FFF736FB 		BL EQUAL 
 2423 12bc FFF70EFB 		BL INVER
 2424 12c0 FFF780F9 		BL QBRAN
 2425 12c4 ACF8FF17 		.word REBOOT+MAPOFFSET 
 2426 12c8 52F804FB 		_UNNEST
 2427              	
 2428              	//    SPACE	( -- )
 2429              	// 	Send the blank character to the output device.
 2430              	
 2431 12cc 98060018 		.word	_KEY+MAPOFFSET
 2432 12d0 05       	_SPACE:	.byte  5
 2433 12d1 53504143 		.ascii "SPACE"
 2433      45
 2434 12d6 00BF     		.p2align 2 	
 2435              	SPACE:
 2436 12d8 42F804ED 		_NEST
 2437 12dc FFF79EFA 		BL	BLANK
 2438 12e0 FFF73CF9 		BL	EMIT
 2439 12e4 52F804FB 		_UNNEST
 2440              	
 2441              	//    SPACES	( +n -- )
 2442              	// 	Send n spaces to the output device.
 2443              	
 2444 12e8 D0060018 		.word	_SPACE+MAPOFFSET
 2445 12ec 06       	_SPACS:	.byte  6
 2446 12ed 53504143 		.ascii "SPACES"
 2446      4553
 2447 12f3 00       		.p2align 2 	
 2448              	SPACS:
 2449 12f4 42F804ED 		_NEST
 2450 12f8 FFF741F9 		_DOLIT
 2451 12fc 00000000 		.word	0
ARM GAS  stm32eforth.s 			page 47


 2452 1300 FFF742FB 		BL	MAX
 2453 1304 FFF7ACF9 		BL	TOR
 2454 1308 00F002B8 		B.W	CHAR2
 2455              	CHAR1:
 2456 130c FFF7E4FF 		BL	SPACE
 2457              	CHAR2:
 2458 1310 FFF749F9 		BL	DONXT
 2459 1314 0C070018 		.word	CHAR1+MAPOFFSET
 2460 1318 52F804FB 		_UNNEST
 2461              	
 2462              	//    TYPE	( b u -- )
 2463              	// 	Output u characters from b.
 2464              	
 2465 131c EC060018 		.word	_SPACS+MAPOFFSET
 2466 1320 04       	_TYPEE:	.byte	4
 2467 1321 54595045 		.ascii "TYPE"
 2468 1325 0000BF   		.p2align 2 	
 2469              	TYPEE:
 2470 1328 42F804ED 		_NEST
 2471 132c FFF798F9 		BL  TOR   // ( a+1 -- R: u )
 2472 1330 05E0     		B	TYPE2
 2473              	TYPE1:  
 2474 1332 FFF761FB 		BL  COUNT
 2475 1336 FFF71BFD 		BL	TCHAR
 2476 133a FFF70FF9 		BL	EMIT
 2477              	TYPE2:  
 2478 133e FFF732F9 		BL  DONXT  
 2479 1342 32070018 		.word	TYPE1+MAPOFFSET
 2480 1346 FFF79FF9 		BL	DROP
 2481 134a 52F804FB 		_UNNEST
 2482              	
 2483              	//    CR	  ( -- )
 2484              	// 	Output a carriage return and a line feed.
 2485              	
 2486 134e 20070018 		.word	_TYPEE+MAPOFFSET
 2487 1352 02       	_CR:	.byte  2
 2488 1353 4352     		.ascii "CR"
 2489 1355 0000BF   		.p2align 2 	
 2490              	CR:
 2491 1358 42F804ED 		_NEST
 2492 135c FFF70FF9 		_DOLIT
 2493 1360 0D000000 		.word	CRR
 2494 1364 FFF7FAF8 		BL	EMIT
 2495 1368 FFF709F9 		_DOLIT
 2496 136c 0A000000 		.word	LF
 2497 1370 FFF7F4F8 		BL	EMIT
 2498 1374 52F804FB 		_UNNEST
 2499              	
 2500              	//    do_$	( -- a )
 2501              	// 	Return the address of a compiled string.
 2502              	//  adjust return address to skip over it.
 2503              	
 2504              	// 	.word	_CR+MAPOFFSET
 2505              	// _DOSTR	.byte  COMPO+3
 2506              	// 	.ascii "do$$"
 2507              	// 	.p2align 2 	
 2508              	DOSTR:
ARM GAS  stm32eforth.s 			page 48


 2509 1378 42F804ED 		_NEST     
 2510              	/* compiled string address is 2 levels deep */
 2511 137c FFF75EF9 		BL	RFROM	// { -- a1 }
 2512 1380 FFF75CF9 		BL	RFROM	//  {a1 -- a1 a2 } b0 set
 2513 1384 FFF722FA 		BL	ONEM	//  clear b0
 2514 1388 FFF786F9 		BL	DUPP	// {a1 a2 -- a1 a2 a2 }
 2515 138c FFF734FB 		BL	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2516 1390 FFF7E6F9 		BL	PLUS	// { -- a1 a2 a2+1+c }
 2517 1394 FFF7E0FC 		BL	ALGND	//  end of string
 2518 1398 FFF710FA 		BL	ONEP	//  restore b0, this result in return address 2 level deep.
 2519 139c FFF760F9 		BL	TOR		//  address after string { -- a1 a2 }
 2520 13a0 FFF782F9 		BL	SWAP	//  count tugged
 2521 13a4 FFF75CF9 		BL	TOR     //  ( -- a2) is string address
 2522 13a8 52F804FB 		_UNNEST
 2523              	
 2524              	//    $"|	( -- a )
 2525              	// 	Run time routine compiled by _". Return address of a compiled string.
 2526              	
 2527              	// 	.word	_DOSTR+MAPOFFSET
 2528              	// _STRQP	.byte  COMPO+3
 2529              	// 	.ascii "$\"|"
 2530              	// 	.p2align 2 	
 2531              	STRQP:
 2532 13ac 42F804ED 		_NEST
 2533 13b0 FFF7E2FF 		BL	DOSTR
 2534 13b4 52F804FB 		_UNNEST			// force a call to dostr
 2535              	
 2536              	//    .$	( a -- )
 2537              	// 	Run time routine of ." . Output a compiled string.
 2538              	
 2539              	// 	.word	_STRQP+MAPOFFSET
 2540              	// _DOTST	.byte  COMPO+2
 2541              	// 	.ascii ".$$"
 2542              	// 	.p2align 2 	
 2543              	DOTST:
 2544 13b8 42F804ED 		_NEST
 2545 13bc FFF71CFB 		BL	COUNT // ( -- a+1 c )
 2546 13c0 FFF7B2FF 		BL	TYPEE
 2547 13c4 52F804FB 		_UNNEST
 2548              	
 2549              	//    ."|	( -- )
 2550              	// 	Run time routine of ." . Output a compiled string.
 2551              	
 2552              	// 	.word	_DOTST+MAPOFFSET
 2553              	// _DOTQP	.byte  COMPO+3
 2554              	// 	.ascii ".""|"
 2555              	// 	.p2align 2 	
 2556              	DOTQP:
 2557 13c8 42F804ED 		_NEST
 2558 13cc FFF7D4FF 		BL	DOSTR
 2559 13d0 FFF7F2FF 		BL	DOTST
 2560 13d4 52F804FB 		_UNNEST
 2561              	
 2562              	//    .R	  ( n +n -- )
 2563              	// 	Display an integer in a field of n columns, right justified.
 2564              	
 2565 13d8 52070018 		.word	_CR+MAPOFFSET
ARM GAS  stm32eforth.s 			page 49


 2566 13dc 02       	_DOTR:	.byte  2
 2567 13dd 2E52     		.ascii ".R"
 2568 13df 00       		.p2align 2 	
 2569              	DOTR:
 2570 13e0 42F804ED 		_NEST
 2571 13e4 FFF73CF9 		BL	TOR
 2572 13e8 FFF74EFE 		BL	STRR
 2573 13ec FFF726F9 		BL	RFROM
 2574 13f0 FFF764F9 		BL	OVER
 2575 13f4 FFF7BCF9 		BL	SUBB
 2576 13f8 FFF77CFF 		BL	SPACS
 2577 13fc FFF794FF 		BL	TYPEE
 2578 1400 52F804FB 		_UNNEST
 2579              	
 2580              	//    U.R	 ( u +n -- )
 2581              	// 	Display an unsigned integer in n column, right justified.
 2582              	
 2583 1404 DC070018 		.word	_DOTR+MAPOFFSET
 2584 1408 03       	_UDOTR:	.byte  3
 2585 1409 552E52   		.ascii "U.R"
 2586              		.p2align 2 	
 2587              	UDOTR:
 2588 140c 42F804ED 		_NEST
 2589 1410 FFF726F9 		BL	TOR
 2590 1414 FFF7CCFD 		BL	BDIGS
 2591 1418 FFF700FE 		BL	DIGS
 2592 141c FFF724FE 		BL	EDIGS
 2593 1420 FFF70CF9 		BL	RFROM
 2594 1424 FFF74AF9 		BL	OVER
 2595 1428 FFF7A2F9 		BL	SUBB
 2596 142c FFF762FF 		BL	SPACS
 2597 1430 FFF77AFF 		BL	TYPEE
 2598 1434 52F804FB 		_UNNEST
 2599              	
 2600              	//    U.	  ( u -- )
 2601              	// 	Display an unsigned integer in free format.
 2602              	
 2603 1438 08080018 		.word	_UDOTR+MAPOFFSET
 2604 143c 02       	_UDOT:	.byte  2
 2605 143d 552E     		.ascii "U."
 2606 143f 00       		.p2align 2 	
 2607              	UDOT:
 2608 1440 42F804ED 		_NEST
 2609 1444 FFF7B4FD 		BL	BDIGS
 2610 1448 FFF7E8FD 		BL	DIGS
 2611 144c FFF70CFE 		BL	EDIGS
 2612 1450 FFF742FF 		BL	SPACE
 2613 1454 FFF768FF 		BL	TYPEE
 2614 1458 52F804FB 		_UNNEST
 2615              	
 2616              	//    .	   ( w -- )
 2617              	// 	Display an integer in free format, preceeded by a space.
 2618              	
 2619 145c 3C080018 		.word	_UDOT+MAPOFFSET
 2620 1460 01       	_DOT:	.byte  1
 2621 1461 2E       		.ascii "."
 2622 1462 00BF     		.p2align 2 	
ARM GAS  stm32eforth.s 			page 50


 2623              	DOT:
 2624 1464 42F804ED 		_NEST
 2625 1468 FFF71EFB 		BL	BASE
 2626 146c FFF7D0F8 		BL	AT
 2627 1470 FFF785F8 		_DOLIT
 2628 1474 0A000000 		.word	10
 2629 1478 FFF746F9 		BL	XORR			// ?decimal
 2630 147c FFF7A2F8 		BL	QBRAN
 2631 1480 8C080018 		.word	DOT1+MAPOFFSET
 2632 1484 FFF7DCFF 		BL	UDOT
 2633 1488 52F804FB 		_UNNEST			// no,display unsigned
 2634              	DOT1:
 2635 148c FFF7FCFD 	    BL	STRR
 2636 1490 FFF722FF 		BL	SPACE
 2637 1494 FFF748FF 		BL	TYPEE
 2638 1498 52F804FB 		_UNNEST			// yes, display signed
 2639              	
 2640              	//    ?	   ( a -- )
 2641              	// 	Display the contents in a memory cell.
 2642              	
 2643 149c 60080018 		.word	_DOT+MAPOFFSET
 2644 14a0 01       	_QUEST:	.byte  1
 2645 14a1 3F       		.ascii "?"
 2646 14a2 00BF     		.p2align 2 	
 2647              	QUEST:
 2648 14a4 42F804ED 		_NEST
 2649 14a8 FFF7B2F8 		BL	AT
 2650 14ac FFF7DAFF 		BL	DOT
 2651 14b0 52F804FB 		_UNNEST
 2652              	
 2653              	// **************************************************************************
 2654              	//  Parsing
 2655              	
 2656              	//    parse	( b u c -- b u delta //  string> )
 2657              	// 	Scan word delimited by c. Return found string and its offset.
 2658              	
 2659              	// 	.word	_QUEST+MAPOFFSET
 2660              	// _PARS	.byte  5
 2661              	// 	.ascii "parse"
 2662              	// 	.p2align 2 	
 2663              	PARS:
 2664 14b4 42F804ED 		_NEST
 2665 14b8 FFF7FBFA 		BL	TEMP
 2666 14bc FFF79EF8 		BL	STORE
 2667 14c0 FFF7FCF8 		BL	OVER
 2668 14c4 FFF7CCF8 		BL	TOR
 2669 14c8 FFF7E6F8 		BL	DUPP
 2670 14cc FFF77AF8 		BL	QBRAN
 2671 14d0 C2090018 		.word	PARS8+MAPOFFSET
 2672 14d4 FFF77AF9 		BL	ONEM
 2673 14d8 FFF7EBFA 		BL	TEMP
 2674 14dc FFF798F8 		BL	AT
 2675 14e0 FFF79CF9 		BL	BLANK
 2676 14e4 FFF720FA 		BL	EQUAL
 2677 14e8 FFF76CF8 		BL	QBRAN
 2678 14ec 3C090018 		.word	PARS3+MAPOFFSET
 2679 14f0 FFF7B6F8 		BL	TOR
ARM GAS  stm32eforth.s 			page 51


 2680              	PARS1:
 2681 14f4 FFF792F9 		BL	BLANK
 2682 14f8 FFF7E0F8 		BL	OVER
 2683 14fc FFF798F8 		BL	CAT			// skip leading blanks 
 2684 1500 FFF736F9 		BL	SUBB
 2685 1504 FFF7E2F8 		BL	ZLESS
 2686 1508 FFF7E8F9 		BL	INVER
 2687 150c FFF75AF8 		BL	QBRAN
 2688 1510 38090018 		.word	PARS2+MAPOFFSET
 2689 1514 FFF752F9 		BL	ONEP
 2690 1518 FFF745F8 		BL	DONXT
 2691 151c F4080018 		.word	PARS1+MAPOFFSET
 2692 1520 FFF78CF8 		BL	RFROM
 2693 1524 FFF7B0F8 		BL	DROP
 2694 1528 FFF729F8 		_DOLIT
 2695 152c 00000000 		.word	0
 2696 1530 FFF7B2F8 		BL	DUPP
 2697 1534 52F804FB 		_UNNEST
 2698              	PARS2:
 2699 1538 FFF780F8 	  BL	RFROM
 2700              	PARS3:
 2701 153c FFF7BEF8 		BL	OVER
 2702 1540 FFF7B2F8 		BL	SWAP
 2703 1544 FFF78CF8 		BL	TOR
 2704              	PARS4:
 2705 1548 FFF7B3FA 		BL	TEMP
 2706 154c FFF760F8 		BL	AT
 2707 1550 FFF7B4F8 		BL	OVER
 2708 1554 FFF76CF8 		BL	CAT
 2709 1558 FFF70AF9 		BL	SUBB			// scan for delimiter
 2710 155c FFF7A9FA 		BL	TEMP
 2711 1560 FFF756F8 		BL	AT
 2712 1564 FFF75AF9 		BL	BLANK
 2713 1568 FFF7DEF9 		BL	EQUAL
 2714 156c FFF72AF8 		BL	QBRAN
 2715 1570 78090018 		.word	PARS5+MAPOFFSET
 2716 1574 FFF7AAF8 		BL	ZLESS
 2717              	PARS5:
 2718 1578 FFF724F8 		BL	QBRAN
 2719 157c 96090018 		.word	PARS6+MAPOFFSET
 2720 1580 FFF71CF9 		BL	ONEP
 2721 1584 FFF70FF8 		BL	DONXT
 2722 1588 48090018 		.word	PARS4+MAPOFFSET
 2723 158c FFF784F8 		BL	DUPP
 2724 1590 FFF766F8 		BL	TOR
 2725 1594 09E0     		B	PARS7
 2726              	PARS6:
 2727 1596 FFF751F8 		BL	RFROM
 2728 159a FFF775F8 		BL	DROP
 2729 159e FFF77BF8 		BL	DUPP
 2730 15a2 FFF70BF9 		BL	ONEP
 2731 15a6 FFF75BF8 		BL	TOR
 2732              	PARS7:
 2733 15aa FFF787F8 		BL	OVER
 2734 15ae FFF7DFF8 		BL	SUBB
 2735 15b2 FFF743F8 		BL	RFROM
 2736 15b6 FFF741F8 		BL	RFROM
ARM GAS  stm32eforth.s 			page 52


 2737 15ba FFF7D9F8 		BL	SUBB
 2738 15be 52F804FB 		_UNNEST
 2739              	PARS8:
 2740 15c2 FFF77BF8 		BL	OVER
 2741 15c6 FFF739F8 		BL	RFROM
 2742 15ca FFF7D1F8 		BL	SUBB
 2743 15ce 52F804FB 		_UNNEST
 2744              	
 2745              	//    PARSE	( c -- b u //  string> )
 2746              	// 	Scan input stream and return counted string delimited by c.
 2747              	
 2748 15d2 A0080018 		.word	_QUEST+MAPOFFSET
 2749 15d6 05       	_PARSE:	.byte  5
 2750 15d7 50415253 		.ascii "PARSE"
 2750      45
 2751              		.p2align 2 	
 2752              	PARSE:
 2753 15dc 42F804ED 		_NEST
 2754 15e0 FFF73EF8 		BL	TOR
 2755 15e4 FFF728FC 		BL	TIB
 2756 15e8 FFF778FA 		BL	INN
 2757 15ec FFF710F8 		BL	AT
 2758 15f0 FFF7B6F8 		BL	PLUS			// current input buffer pointer
 2759 15f4 FFF77CFA 		BL	NTIB
 2760 15f8 FFF70AF8 		BL	AT
 2761 15fc FFF76EFA 		BL	INN
 2762 1600 FFF706F8 		BL	AT
 2763 1604 FFF7B4F8 		BL	SUBB			// remaining count
 2764 1608 FFF718F8 		BL	RFROM
 2765 160c FFF752FF 		BL	PARS
 2766 1610 FFF764FA 		BL	INN
 2767 1614 FFF7CCF9 		BL	PSTOR
 2768 1618 52F804FB 		_UNNEST
 2769              	
 2770              	//    .(	  ( -- )
 2771              	// 	Output following string up to next ) .
 2772              	
 2773 161c D6090018 		.word	_PARSE+MAPOFFSET
 2774 1620 82       	_DOTPR:	.byte  IMEDD+2
 2775 1621 2E28     		.ascii ".("
 2776 1623 00       		.p2align 2 	
 2777              	DOTPR:
 2778 1624 42F804ED 		_NEST
 2779 1628 FEF7A9FF 		_DOLIT
 2780 162c 29000000 		.word	')'
 2781 1630 FFF7D4FF 		BL	PARSE
 2782 1634 FFF778FE 		BL	TYPEE
 2783 1638 52F804FB 		_UNNEST
 2784              	
 2785              	//    (	   ( -- )
 2786              	// 	Ignore following string up to next ) . A comment.
 2787              	
 2788 163c 200A0018 		.word	_DOTPR+MAPOFFSET
 2789 1640 81       	_PAREN:	.byte  IMEDD+1
 2790 1641 28       		.ascii "("
 2791 1642 00BF     		.p2align 2 	
 2792              	PAREN:
ARM GAS  stm32eforth.s 			page 53


 2793 1644 42F804ED 		_NEST
 2794 1648 FEF799FF 		_DOLIT
 2795 164c 29000000 		.word	')'
 2796 1650 FFF7C4FF 		BL	PARSE
 2797 1654 FFF720F9 		BL	DDROP
 2798 1658 52F804FB 		_UNNEST
 2799              	
 2800              	//    \	   ( -- )
 2801              	// 	Ignore following text till the end of line.
 2802              	
 2803 165c 400A0018 		.word	_PAREN+MAPOFFSET
 2804 1660 81       	_BKSLA:	.byte  IMEDD+1
 2805 1661 27       		.byte	'\'
 2806 1662 00BF     		.p2align 2 	
 2807              	BKSLA:
 2808 1664 42F804ED 		_NEST
 2809 1668 FFF742FA 		BL	NTIB
 2810 166c FEF7D0FF 		BL	AT
 2811 1670 FFF734FA 		BL	INN
 2812 1674 FEF7C2FF 		BL	STORE
 2813 1678 52F804FB 		_UNNEST
 2814              	
 2815              	//    CHAR	( -- c )
 2816              	// 	Parse next word and return its first character.
 2817              	
 2818 167c 600A0018 		.word	_BKSLA+MAPOFFSET
 2819 1680 04       	_CHAR:	.byte  4
 2820 1681 43484152 		.ascii "CHAR"
 2821 1685 0000BF   		.p2align 2 	
 2822              	CHAR:
 2823 1688 42F804ED 		_NEST
 2824 168c FFF7C6F8 		BL	BLANK
 2825 1690 FFF7A4FF 		BL	PARSE
 2826 1694 FEF7F8FF 		BL	DROP
 2827 1698 FEF7CAFF 		BL	CAT
 2828 169c 52F804FB 		_UNNEST
 2829              	
 2830              	//    WORD	( c -- a //  string> )
 2831              	// 	Parse a word from input stream and copy it to code dictionary.
 2832              	
 2833 16a0 800A0018 		.word	_CHAR+MAPOFFSET
 2834 16a4 04       	_WORDD:	.byte  4
 2835 16a5 574F5244 		.ascii "WORD"
 2836 16a9 0000BF   		.p2align 2 	
 2837              	WORDD:
 2838 16ac 42F804ED 		_NEST
 2839 16b0 FFF794FF 		BL	PARSE
 2840 16b4 FFF7A8FB 		BL	HERE
 2841 16b8 FFF7A0F8 		BL	CELLP
 2842 16bc FFF71AFC 		BL	PACKS
 2843 16c0 52F804FB 		_UNNEST
 2844              	
 2845              	//    TOKEN	( -- a //  string> )
 2846              	// 	Parse a word from input stream and copy it to name dictionary.
 2847              	
 2848 16c4 A40A0018 		.word	_WORDD+MAPOFFSET
 2849 16c8 05       	_TOKEN:	.byte  5
ARM GAS  stm32eforth.s 			page 54


 2850 16c9 544F4B45 		.ascii "TOKEN"
 2850      4E
 2851 16ce 00BF     		.p2align 2 	
 2852              	TOKEN:
 2853 16d0 42F804ED 		_NEST
 2854 16d4 FFF7A2F8 		BL	BLANK
 2855 16d8 FFF7E8FF 		BL	WORDD
 2856 16dc 52F804FB 		_UNNEST
 2857              	
 2858              	// **************************************************************************
 2859              	//  Dictionary search
 2860              	
 2861              	//    NAME>	( na -- ca )
 2862              	// 	Return a code address given a name address.
 2863              	
 2864 16e0 C80A0018 		.word	_TOKEN+MAPOFFSET
 2865 16e4 05       	_NAMET:	.byte  5
 2866 16e5 4E414D45 		.ascii "NAME>"
 2866      3E
 2867 16ea 00BF     		.p2align 2 	
 2868              	NAMET:
 2869 16ec 42F804ED 		_NEST
 2870 16f0 FFF782F9 		BL	COUNT
 2871 16f4 FEF743FF 		_DOLIT
 2872 16f8 1F000000 		.word	0x1F
 2873 16fc FEF7F0FF 		BL	ANDD
 2874 1700 FFF72EF8 		BL	PLUS
 2875 1704 FFF728FB 		BL	ALGND
 2876 1708 52F804FB 		_UNNEST
 2877              	
 2878              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2879              	// 	Compare u bytes in two strings. Return 0 if identical.
 2880              	//
 2881              	//  Picatout 2020-12-01, 
 2882              	//      Because of problem with .align directive that
 2883              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2884              	// 		words  to do a byte by byte comparison. 
 2885              	//
 2886 170c E40A0018 		.word	_NAMET+MAPOFFSET
 2887 1710 05       	_SAMEQ:	.byte  5
 2888 1711 53414D45 		.ascii "SAME?"
 2888      3F
 2889 1716 00BF     		.p2align 2	
 2890              	SAMEQ:
 2891 1718 42F804ED 		_NEST
 2892 171c FEF7A0FF 		BL	TOR
 2893 1720 00F01EB8 		B.W	SAME2
 2894              	SAME1:
 2895 1724 FEF7CAFF 		BL	OVER  // ( a1 a2 -- a1 a2 a1 )
 2896 1728 FEF792FF 		BL	RAT   // a1 a2 a1 u 
 2897 172c FFF718F8 		BL	PLUS  // a1 a2 a1+u 
 2898 1730 FEF77EFF 		BL	CAT	   // a1 a2 c1    		
 2899 1734 FEF7C2FF 		BL	OVER  // a1 a2 c1 a2 
 2900 1738 FEF78AFF 		BL	RAT    
 2901 173c FFF710F8 		BL	PLUS    
 2902 1740 FEF776FF 		BL	CAT	  // a1 a2 c1 c2
 2903 1744 FFF714F8 		BL	SUBB  
ARM GAS  stm32eforth.s 			page 55


 2904 1748 FFF792F8 		BL	QDUP
 2905 174c FEF73AFF 		BL	QBRAN
 2906 1750 600B0018 		.word	SAME2+MAPOFFSET
 2907 1754 FEF772FF 		BL	RFROM
 2908 1758 FEF796FF 		BL	DROP
 2909 175c 52F804FB 		_UNNEST	// strings not equal
 2910              	SAME2:
 2911 1760 FEF721FF 		BL	DONXT
 2912 1764 240B0018 		.word	SAME1+MAPOFFSET
 2913 1768 FEF709FF 		_DOLIT
 2914 176c 00000000 		.word	0
 2915 1770 52F804FB 		_UNNEST	// strings equal
 2916              	
 2917              	//    find	( a na -- ca na | a F )
 2918              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2919              	
 2920              	//  Picatout 2020-12-01,  
 2921              	//		Modified from original. See comment for word "SAME?" 
 2922              	
 2923              	// 	.word	_SAMEQ+MAPOFFSET
 2924              	// _FIND	.byte  4
 2925              	// 	.ascii "find"
 2926              	// 	.p2align 2 	
 2927              	FIND:
 2928 1774 42F804ED 		_NEST
 2929 1778 FEF796FF 		BL	SWAP			// na a	
 2930 177c FFF73CF9 		BL	COUNT			// na a+1 count
 2931 1780 FEF78AFF 		BL	DUPP 
 2932 1784 FFF795F9 		BL	TEMP
 2933 1788 FEF738FF 		BL	STORE			// na a+1 count 
 2934 178c FEF768FF 		BL  TOR		// na a+1  R: count  
 2935 1790 FEF78AFF 		BL	SWAP			// a+1 na
 2936              	FIND1:
 2937 1794 FEF780FF 		BL	DUPP			// a+1 na na
 2938 1798 FEF714FF 		BL	QBRAN
 2939 179c E40B0018 		.word	FIND6+MAPOFFSET	// end of vocabulary
 2940 17a0 FEF77AFF 		BL	DUPP			// a+1 na na
 2941 17a4 FEF744FF 		BL	CAT			// a+1 na name1
 2942 17a8 FEF7E9FE 		_DOLIT
 2943 17ac 1FFFFFFF 		.word	MASKK
 2944 17b0 FEF796FF 		BL	ANDD
 2945 17b4 FEF74CFF 		BL	RAT			// a+1 na name1 count 
 2946 17b8 FEF7A6FF 		BL	XORR			// a+1 na,  same length?
 2947 17bc FEF702FF 		BL	QBRAN
 2948 17c0 D00B0018 		.word	FIND2+MAPOFFSET
 2949 17c4 FFF722F8 		BL	CELLM			// a+1 la
 2950 17c8 FEF722FF 		BL	AT			// a+1 next_na
 2951 17cc FFF7E2BF 		B.w	FIND1			// try next word
 2952              	FIND2:   
 2953 17d0 FEF7F4FF 		BL	ONEP			// a+1 na+1
 2954 17d4 FFF76DF9 		BL	TEMP
 2955 17d8 FEF71AFF 		BL	AT			// a+1 na+1 count
 2956 17dc FFF79CFF 		BL	SAMEQ		// a+1 na+1 ? 
 2957              	FIND3:	
 2958 17e0 00F00CB8 		B.w	FIND4
 2959              	FIND6:	
 2960 17e4 FEF72AFF 		BL	RFROM			// a+1 0 name1 -- , no match
ARM GAS  stm32eforth.s 			page 56


 2961 17e8 FEF74EFF 		BL	DROP			// a+1 0
 2962 17ec FEF75CFF 		BL	SWAP			// 0 a+1
 2963 17f0 FEF7ECFF 		BL	ONEM			// 0 a
 2964 17f4 FEF758FF 		BL	SWAP			// a 0 
 2965 17f8 52F804FB 		_UNNEST			// return without a match
 2966              	FIND4:	
 2967 17fc FEF7E2FE 		BL	QBRAN			// a+1 na+1
 2968 1800 140C0018 		.word	FIND5+MAPOFFSET	// found a match
 2969 1804 FEF7E2FF 		BL	ONEM			// a+1 na
 2970 1808 FFF700F8 		BL	CELLM			// a+4 la
 2971 180c FEF700FF 		BL	AT			// a+1 next_na
 2972 1810 FFF7C0BF 		B.w	FIND1			// compare next name
 2973              	FIND5:	
 2974 1814 FEF712FF 		BL	RFROM			// a+1 na+1 count
 2975 1818 FEF736FF 		BL	DROP			// a+1 na+1
 2976 181c FEF744FF 		BL	SWAP			// na+1 a+1
 2977 1820 FEF732FF 		BL	DROP			// na+1
 2978 1824 FEF7D2FF 		BL	ONEM			// na
 2979 1828 FEF736FF 		BL	DUPP			// na na
 2980 182c FFF75EFF 		BL	NAMET			// na ca
 2981 1830 FEF73AFF 		BL	SWAP			// ca na
 2982 1834 52F804FB 		_UNNEST			//  return with a match
 2983              	
 2984              	//    NAME?	( a -- ca na | a F )
 2985              	// 	Search all context vocabularies for a string.
 2986              	
 2987 1838 100B0018 		.word	_SAMEQ+MAPOFFSET
 2988 183c 05       	_NAMEQ:	.byte  5
 2989 183d 4E414D45 		.ascii "NAME?"
 2989      3F
 2990 1842 00BF     		.p2align 2 	
 2991              	NAMEQ:
 2992 1844 42F804ED 		_NEST
 2993 1848 FFF772F9 		BL	CNTXT
 2994 184c FEF7E0FE 		BL	AT
 2995 1850 FFF790FF 		BL	FIND
 2996 1854 52F804FB 		_UNNEST
 2997              	
 2998              	// **************************************************************************
 2999              	//  Terminal input
 3000              	
 3001              	//    	  ( bot eot cur -- bot eot cur )
 3002              	// 	Backup the cursor by one character.
 3003              	
 3004              	// 	.word	_NAMEQ+MAPOFFSET
 3005              	// _BKSP	.byte  2
 3006              	// 	.ascii "^H"
 3007              	// 	.p2align 2 	
 3008              	BKSP:
 3009 1858 42F804ED 		_NEST
 3010 185c FEF700FF 		BL	TOR
 3011 1860 FEF72CFF 		BL	OVER
 3012 1864 FEF7EAFE 		BL	RFROM
 3013 1868 FEF71EFF 		BL	SWAP
 3014 186c FEF726FF 		BL	OVER
 3015 1870 FEF74AFF 		BL	XORR
 3016 1874 FEF7A6FE 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 57


 3017 1878 A00C0018 		.word	BACK1+MAPOFFSET
 3018 187c FEF77FFE 		_DOLIT
 3019 1880 08000000 		.word	BKSPP
 3020 1884 FEF76AFE 		BL	TECHO
 3021              	// 	BL	ATEXE
 3022 1888 FEF7A0FF 		BL	ONEM
 3023 188c FEF7C6FF 		BL	BLANK
 3024 1890 FEF764FE 		BL	TECHO
 3025              	// 	BL	ATEXE
 3026 1894 FEF773FE 		_DOLIT
 3027 1898 08000000 		.word	BKSPP
 3028 189c FEF75EFE 		BL	TECHO
 3029              	// 	BL	ATEXE
 3030              	BACK1:
 3031 18a0 52F804FB 		  _UNNEST
 3032              	
 3033              	//    TAP	 ( bot eot cur c -- bot eot cur )
 3034              	// 	Accept and echo the key stroke and bump the cursor.
 3035              	
 3036              	// 	.word	_BKSP+MAPOFFSET
 3037              	// _TAP	.byte  3
 3038              	// 	.ascii "TAP"
 3039              	// 	.p2align 2 	
 3040              	TAP:
 3041 18a4 42F804ED 		_NEST
 3042 18a8 FEF7F6FE 		BL	DUPP
 3043 18ac FEF756FE 		BL	TECHO
 3044              	// 	BL	ATEXE
 3045 18b0 FEF704FF 		BL	OVER
 3046 18b4 FEF7B2FE 		BL	CSTOR
 3047 18b8 FEF780FF 		BL	ONEP
 3048 18bc 52F804FB 		_UNNEST
 3049              	
 3050              	//    kTAP	( bot eot cur c -- bot eot cur )
 3051              	// 	Process a key stroke, CR or backspace.
 3052              	
 3053              	// 	.word	_TAP+MAPOFFSET
 3054              	// _KTAP	.byte  4
 3055              	// 	.ascii "kTAP"
 3056              	// 	.p2align 2 	
 3057              	KTAP:
 3058              	TTAP:
 3059 18c0 42F804ED 		_NEST
 3060 18c4 FEF7E8FE 		BL	DUPP
 3061 18c8 FEF759FE 		_DOLIT
 3062 18cc 0D000000 		.word	CRR
 3063 18d0 FEF71AFF 		BL	XORR
 3064 18d4 FEF776FE 		BL	QBRAN
 3065 18d8 080D0018 		.word	KTAP2+MAPOFFSET
 3066 18dc FEF74FFE 		_DOLIT
 3067 18e0 08000000 		.word	BKSPP
 3068 18e4 FEF710FF 		BL	XORR
 3069 18e8 FEF76CFE 		BL	QBRAN
 3070 18ec 000D0018 		.word	KTAP1+MAPOFFSET
 3071 18f0 FEF794FF 		BL	BLANK
 3072 18f4 FFF7D6FF 		BL	TAP
 3073 18f8 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 58


 3074 18fc 00000000 		.word	0			// patch
 3075              	KTAP1:
 3076 1900 FFF7AAFF 	  BL	BKSP
 3077 1904 52F804FB 		_UNNEST
 3078              	KTAP2:
 3079 1908 FEF7BEFE 	  BL	DROP
 3080 190c FEF7CCFE 		BL	SWAP
 3081 1910 FEF7BAFE 		BL	DROP
 3082 1914 FEF7C0FE 		BL	DUPP
 3083 1918 52F804FB 		_UNNEST
 3084              	
 3085              	//    ACCEPT	( b u -- b u )
 3086              	// 	Accept characters to input buffer. Return with actual count.
 3087              	
 3088 191c 3C0C0018 		.word	_NAMEQ+MAPOFFSET
 3089 1920 06       	_ACCEP:	.byte  6
 3090 1921 41434345 		.ascii "ACCEPT"
 3090      5054
 3091 1927 00       		.p2align 2 	
 3092              	ACCEP:
 3093 1928 42F804ED 		_NEST
 3094 192c FEF7C6FE 		BL	OVER
 3095 1930 FEF716FF 		BL	PLUS
 3096 1934 FEF7C2FE 		BL	OVER
 3097              	ACCP1:
 3098 1938 FEF7B8FF 	  BL	DDUP
 3099 193c FEF7E4FE 		BL	XORR
 3100 1940 FEF740FE 		BL	QBRAN
 3101 1944 740D0018 		.word	ACCP4+MAPOFFSET
 3102 1948 FFF7A8FC 		BL	KEY
 3103 194c FEF7A4FE 		BL	DUPP
 3104 1950 FEF764FF 		BL	BLANK
 3105 1954 FEF713FE 		_DOLIT
 3106 1958 7F000000 		.word	127
 3107 195c FFF742F9 		BL	WITHI
 3108 1960 FEF730FE 		BL	QBRAN
 3109 1964 6E0D0018 		.word	ACCP2+MAPOFFSET
 3110 1968 FFF79CFF 		BL	TAP
 3111 196c 01E0     		B	ACCP3
 3112              	ACCP2:
 3113 196e FFF7A7FF 	  BL	KTAP
 3114              	// 	BL	ATEXE
 3115              	ACCP3:	  
 3116 1972 E1E7     		B	ACCP1
 3117              	ACCP4:
 3118 1974 FEF788FE 	  BL	DROP
 3119 1978 FEF7A0FE 		BL	OVER
 3120 197c FEF7F8FE 		BL	SUBB
 3121 1980 52F804FB 		_UNNEST
 3122              	
 3123              	//    QUERY	( -- )
 3124              	// 	Accept input stream to terminal input buffer.
 3125              	
 3126 1984 200D0018 		.word	_ACCEP+MAPOFFSET
 3127 1988 05       	_QUERY:	.byte  5
 3128 1989 51554552 		.ascii "QUERY"
 3128      59
ARM GAS  stm32eforth.s 			page 59


 3129 198e 00BF     		.p2align 2 	
 3130              	QUERY:
 3131 1990 42F804ED 		_NEST
 3132 1994 FFF750FA 		BL	TIB
 3133 1998 FEF7F1FD 		_DOLIT
 3134 199c 50000000 		.word	80
 3135 19a0 FFF7C2FF 		BL	ACCEP
 3136 19a4 FFF7A4F8 		BL	NTIB
 3137 19a8 FEF728FE 		BL	STORE
 3138 19ac FEF76CFE 		BL	DROP
 3139 19b0 FEF7E5FD 		_DOLIT
 3140 19b4 00000000 		.word	0
 3141 19b8 FFF790F8 		BL	INN
 3142 19bc FEF71EFE 		BL	STORE
 3143 19c0 52F804FB 		_UNNEST
 3144              	
 3145              	// **************************************************************************
 3146              	//  Error handling
 3147              	
 3148              	//    ABORT	( a -- )
 3149              	// 	Reset data stack and jump to QUIT.
 3150              	
 3151 19c4 880D0018 		.word	_QUERY+MAPOFFSET
 3152 19c8 05       	_ABORT:	.byte  5
 3153 19c9 41424F52 		.ascii "ABORT"
 3153      54
 3154 19ce 00BF     		.p2align 2 	
 3155              	ABORT:
 3156 19d0 42F804ED 		_NEST
 3157 19d4 FFF780FC 		BL	SPACE
 3158 19d8 FFF70EF8 		BL	COUNT
 3159 19dc FFF7A4FC 		BL	TYPEE
 3160 19e0 FEF7CDFD 		_DOLIT
 3161 19e4 3F000000 		.word	0X3F
 3162 19e8 FEF7B8FD 		BL	EMIT
 3163 19ec FFF7B4FC 		BL	CR
 3164 19f0 00F0B2F8 		BL	PRESE
 3165 19f4 00F0BCB8 		B.W	QUIT
 3166              	
 3167              	//    _abort"	( f -- )
 3168              	// 	Run time routine of ABORT" . Abort with a message.
 3169              	
 3170              	// 	.word	_ABORT+MAPOFFSET
 3171              	// _ABORQ	.byte  COMPO+6
 3172              	// 	.ascii "abort\""
 3173              	// 	.p2align 2 	
 3174              	ABORQ:
 3175 19f8 42F804ED 		_NEST
 3176 19fc FEF7E2FD 		BL	QBRAN
 3177 1a00 180E0018 		.word	ABOR1+MAPOFFSET	// text flag
 3178 1a04 FFF7B8FC 		BL	DOSTR
 3179 1a08 FEF7F6FF 		BL	COUNT
 3180 1a0c FFF78CFC 		BL	TYPEE
 3181 1a10 FFF7A2FC 		BL	CR
 3182 1a14 00F0ACB8 		B.W	QUIT
 3183              	ABOR1:
 3184 1a18 FFF7AEFC 		BL	DOSTR
ARM GAS  stm32eforth.s 			page 60


 3185 1a1c FEF734FE 		BL	DROP
 3186 1a20 52F804FB 		_UNNEST			// drop error
 3187              	
 3188              	// **************************************************************************
 3189              	//  The text interpreter
 3190              	
 3191              	//    $INTERPRET  ( a -- )
 3192              	// 	Interpret a word. If failed, try to convert it to an integer.
 3193              	
 3194 1a24 C80D0018 		.word	_ABORT+MAPOFFSET
 3195 1a28 0A       	_INTER:	.byte  10
 3196 1a29 2424494E 		.ascii "$$INTERPRET"
 3196      54455250 
 3196      524554
 3197              		.p2align 2 	
 3198              	INTER:
 3199 1a34 42F804ED 		_NEST
 3200 1a38 FFF704FF 		BL	NAMEQ
 3201 1a3c FEF718FF 		BL	QDUP	// ?defined
 3202 1a40 FEF7C0FD 		BL	QBRAN
 3203 1a44 740E0018 		.word	INTE1+MAPOFFSET
 3204 1a48 FEF7E2FD 		BL	AT
 3205 1a4c FEF797FD 		_DOLIT
 3206 1a50 40000000 		.word	COMPO
 3207 1a54 FEF744FE 		BL	ANDD	// ?compile only lexicon bits
 3208 1a58 FFF7CEFF 		BL	ABORQ
 3209 1a5c 0D       		.byte	13
 3210 1a5d 20636F6D 		.ascii " compile only"
 3210      70696C65 
 3210      206F6E6C 
 3210      79
 3211 1a6a 00BF     		.p2align 2 	
 3212 1a6c FEF796FD 		BL	EXECU
 3213 1a70 52F804FB 		_UNNEST			// execute defined word
 3214              	INTE1:
 3215 1a74 FFF778FB 	  BL	NUMBQ
 3216 1a78 FEF7A4FD 		BL	QBRAN
 3217 1a7c 840E0018 		.word	INTE2+MAPOFFSET
 3218 1a80 52F804FB 		_UNNEST
 3219              	INTE2:
 3220 1a84 FFF7A4BF 	  B.W	ABORT	// error
 3221              	
 3222              	//    [	   ( -- )
 3223              	// 	Start the text interpreter.
 3224              	
 3225 1a88 280E0018 		.word	_INTER+MAPOFFSET
 3226 1a8c 81       	_LBRAC:	.byte  IMEDD+1
 3227 1a8d 5B       		.ascii "["
 3228 1a8e 00BF     		.p2align 2 	
 3229              	LBRAC:
 3230 1a90 42F804ED 		_NEST
 3231 1a94 FEF773FD 		_DOLIT
 3232 1a98 340E0018 		.word	INTER+MAPOFFSET
 3233 1a9c FFF732F8 		BL	TEVAL
 3234 1aa0 FEF7ACFD 		BL	STORE
 3235 1aa4 52F804FB 		_UNNEST
 3236              	
ARM GAS  stm32eforth.s 			page 61


 3237              	//    .OK	 ( -- )
 3238              	// 	Display "ok" only while interpreting.
 3239              	
 3240 1aa8 8C0E0018 		.word	_LBRAC+MAPOFFSET
 3241 1aac 03       	_DOTOK:	.byte  3
 3242 1aad 2E4F4B   		.ascii ".OK"
 3243              		.p2align 2 	
 3244              	DOTOK:
 3245 1ab0 42F804ED 		_NEST
 3246 1ab4 FEF763FD 		_DOLIT
 3247 1ab8 340E0018 		.word	INTER+MAPOFFSET
 3248 1abc FFF722F8 		BL	TEVAL
 3249 1ac0 FEF7A6FD 		BL	AT
 3250 1ac4 FEF730FF 		BL	EQUAL
 3251 1ac8 FEF77CFD 		BL	QBRAN
 3252 1acc D80E0018 		.word	DOTO1+MAPOFFSET
 3253 1ad0 FFF77AFC 		BL	DOTQP
 3254 1ad4 03       		.byte	3
 3255 1ad5 206F6B   		.ascii " ok"
 3256              	DOTO1:
 3257 1ad8 FFF73EFC 		BL	CR
 3258 1adc 52F804FB 		_UNNEST
 3259              	
 3260              	//    ?STACK	( -- )
 3261              	// 	Abort if the data stack underflows.
 3262              	
 3263 1ae0 AC0E0018 		.word	_DOTOK+MAPOFFSET
 3264 1ae4 06       	_QSTAC:	.byte  6
 3265 1ae5 3F535441 		.ascii "?STACK"
 3265      434B
 3266 1aeb 00       		.p2align 2 	
 3267              	QSTAC:
 3268 1aec 42F804ED 		_NEST
 3269 1af0 FFF764F9 		BL	DEPTH
 3270 1af4 FEF7EAFD 		BL	ZLESS	// check only for underflow
 3271 1af8 FFF77EFF 		BL	ABORQ
 3272 1afc 0A       		.byte	10
 3273 1afd 20756E64 		.ascii " underflow"
 3273      6572666C 
 3273      6F77
 3274 1b07 00       		.p2align 2 	
 3275 1b08 52F804FB 		_UNNEST
 3276              	
 3277              	//    EVAL	( -- )
 3278              	// 	Interpret the input stream.
 3279              	
 3280 1b0c E40E0018 		.word	_QSTAC+MAPOFFSET
 3281 1b10 04       	_EVAL:	.byte  4
 3282 1b11 4556414C 		.ascii "EVAL"
 3283 1b15 0000BF   		.p2align 2 	
 3284              	EVAL:
 3285 1b18 42F804ED 		_NEST
 3286              	EVAL1:
 3287 1b1c FFF7D8FD 	    BL	TOKEN
 3288 1b20 FEF7BAFD 		BL	DUPP
 3289 1b24 FEF784FD 		BL	CAT	// ?input stream empty
 3290 1b28 FEF74CFD 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 62


 3291 1b2c 400F0018 		.word	EVAL2+MAPOFFSET
 3292 1b30 FEF7E8FF 		BL	TEVAL
 3293 1b34 FFF78CF9 		BL	ATEXE
 3294 1b38 FFF7D8FF 		BL	QSTAC	// evaluate input, check stack
 3295 1b3c FFF7EEBF 		B.W	EVAL1
 3296              	EVAL2:
 3297 1b40 FEF7A2FD 		BL	DROP
 3298 1b44 FFF7B4FF 		BL	DOTOK
 3299 1b48 52F804FB 		_UNNEST	// prompt
 3300              	
 3301              	//    PRESET	( -- )
 3302              	// 	Reset data stack pointer and the terminal input buffer.
 3303              	
 3304 1b4c 100F0018 		.word	_EVAL+MAPOFFSET
 3305 1b50 06       	_PRESE:	.byte  6
 3306 1b51 50524553 		.ascii "PRESET"
 3306      4554
 3307 1b57 00       		.p2align 2 	
 3308              	PRESE:
 3309              	//	_NEST
 3310 1b58 44F68061 		MOVW	R1,#SPP&0xffff		//  init SP
 3311 1b5c C2F20001 	 	MOVT	R1,#SPP>>16
 3312 1b60 85EA0505 		EOR	R5,R5,R5			//  init TOS=0
 3313              	//	_UNNEST
 3314 1b64 7047     		_NEXT
 3315              	
 3316              	//    QUIT	( -- )
 3317              	// 	Reset return stack pointer and start text interpreter.
 3318              	
 3319 1b66 500F0018 		.word	_PRESE+MAPOFFSET
 3320 1b6a 04       	_QUIT:	.byte  4
 3321 1b6b 51554954 		.ascii "QUIT"
 3322 1b6f 00       		.p2align 2 	
 3323              	QUIT:
 3324 1b70 42F804ED 		_NEST
 3325 1b74 44F68072 		MOVW	R2,#RPP&0xffff  /* RESET RSTACK */
 3326 1b78 C2F20002 	 	MOVT	R2,#RPP>>16 
 3327              	QUIT1:
 3328 1b7c FFF788FF 		BL	LBRAC			// start interpretation
 3329              	QUIT2:
 3330 1b80 FFF706FF 		BL	QUERY			// get input
 3331 1b84 FFF7C8FF 		BL	EVAL
 3332 1b88 FEF728FD 		BL	BRAN
 3333 1b8c 800F0018 		.word	QUIT2+MAPOFFSET	// continue till error
 3334              	
 3335              	/***************************
 3336              	//  Flash memory interface
 3337              	***************************/
 3338              	// UNLOCK ( T|F -- )
 3339              	// lock or unlock FLASH write 
 3340              	
 3341 1b90 6A0F0018 		.word _QUIT+MAPOFFSET  
 3342 1b94 06       	_UNLOCK: .byte 6
 3343 1b95 554E4C4F 		.ascii "UNLOCK"
 3343      434B
 3344 1b9b 00       		.p2align 2  
 3345              	UNLOCK:	//  unlock flash memory	
ARM GAS  stm32eforth.s 			page 63


 3346 1b9c 42F804ED 		_NEST 
 3347 1ba0 FEF710FD 		BL QBRAN
 3348 1ba4 C40F0018 		.word LOCK+MAPOFFSET
 3349 1ba8 F548     		ldr	r0, flash_regs 
 3350 1baa 4FF03404 		mov r4,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 3351 1bae C460     		str r4,[r0,#FLASH_SR]
 3352 1bb0 0469     		ldr r4,[r0,#FLASH_CR]
 3353 1bb2 14F0800F 		tst r4,#(1<<7)
 3354 1bb6 03D0     		beq 1f 
 3355 1bb8 F24C     		ldr	r4, flash_regs+4 // key1
 3356 1bba 4460     		str	r4, [r0, #FLASH_KEYR]
 3357 1bbc F24C     		ldr	r4, flash_regs+8 // key2 
 3358 1bbe 4460     		str	r4, [r0, #FLASH_KEYR]
 3359              		/* unlock option registers */
 3360              	/*
 3361              		ldr	r4, flash_regs+4 
 3362              		str	r4, [r0, #FLASH_OPTKEYR]
 3363              		ldr	r4, flash_regs+8
 3364              		str	r4, [r0, #FLASH_OPTKEYR]
 3365              	*/ 
 3366              	1:
 3367 1bc0 52F804FB 		_UNNEST
 3368              	 // lock flash memory
 3369              	LOCK: 
 3370 1bc4 EE48     		ldr r0,flash_regs  
 3371              	//	ldr r4,[r0,#FLASH_CR]
 3372 1bc6 4FF08004 		mov r4,#(1<<7)
 3373 1bca 0461     		str r4,[r0,#FLASH_CR]
 3374 1bcc 52F804FB 		_UNNEST  
 3375              	
 3376              	WAIT_BSY:
 3377 1bd0 EB48     		ldr	r0,flash_regs
 3378              	WAIT1:
 3379 1bd2 C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 3380 1bd4 14F00104 		ands	r4, #0x1	//  BSY
 3381 1bd8 FBD1     		bne	WAIT1
 3382 1bda 7047     		_NEXT
 3383              	
 3384              	//    ERASE_PAGE	   ( adr -- )
 3385              	// 	  Erase one page of flash memory.
 3386              	//    stm32f103 page size is 1024 bytes 
 3387              	//    adr is any address inside page to erase 
 3388              	
 3389 1bdc 940F0018 		.word	_UNLOCK+MAPOFFSET
 3390 1be0 0A       	_EPAGE:	.byte  10
 3391 1be1 45524153 		.ascii "ERASE_PAGE"
 3391      455F5041 
 3391      4745
 3392 1beb 00       		.p2align 2 	
 3393              	
 3394              	EPAGE: 	//  page --
 3395 1bec 42F804ED 		_NEST
 3396 1bf0 FFF7EEFF 		bl	WAIT_BSY
 3397 1bf4 FEF7C3FC 		_DOLIT 
 3398 1bf8 01000000 		.word 1 
 3399 1bfc FFF7CEFF 		bl  UNLOCK 
 3400 1c00 DF48     		ldr r0,flash_regs 	 
ARM GAS  stm32eforth.s 			page 64


 3401 1c02 4FF00204 		mov r4,#2 // set PER bit 
 3402 1c06 0461     		str r4,[r0,#FLASH_CR]
 3403 1c08 4561     		str r5,[r0,#FLASH_AR] // page to erase address 
 3404 1c0a 0469     		ldr	r4,[r0, #FLASH_CR]	
 3405 1c0c 44F04004 		orr	R4,#0x40	//  set STRT bit   
 3406 1c10 0461     		str	r4,[r0, #FLASH_CR]	//  start erasing
 3407 1c12 FFF7DDFF 	 	bl	WAIT_BSY // wait until done
 3408 1c16 FEF7B2FC 		_DOLIT 
 3409 1c1a 00000000 		.word 0 
 3410 1c1e FFF7BDFF 		bl	UNLOCK  // lock flash write 
 3411 1c22 C568     		ldr r5,[r0,#FLASH_SR] // check for errors 
 3412 1c24 05F01405 		and r5,r5,#(5<<2)
 3413 1c28 FFF7E6FE 		bl ABORQ 
 3414 1c2c 0D       		.byte 13
 3415 1c2d 20657261 		.ascii " erase error!"
 3415      73652065 
 3415      72726F72 
 3415      21
 3416 1c3a 00BF     		.p2align 2
 3417 1c3c 52F804FB 		_UNNEST
 3418              	
 3419              	// store 16 bit word
 3420              	// expect flash unlocked  
 3421              	HWORD_WRITE: // ( hword address -- )
 3422 1c40 42F804ED 		_NEST
 3423 1c44 0469     		ldr	r4, [r0, #FLASH_CR]	//  FLASH_CR
 3424              	//	bic r4,#(1<<9)|(1<<5)|(1<<4)|(1<<2)|(1<<1) //  clear OPTWRE|OPTER|OPTPG|MER|PER
 3425 1c46 4FF00104 		mov r4,#1 // set PG 
 3426 1c4a 0461     		str r4,[r0,#FLASH_CR]
 3427 1c4c 2E46     		mov r6,r5 
 3428 1c4e 51F8045B 		_POP 
 3429 1c52 3580     		strh r5,[r6] 
 3430 1c54 FFF7BCFF 		bl WAIT_BSY 
 3431 1c58 C568     		ldr r5,[r0,#FLASH_SR]
 3432 1c5a 05F01405 		and r5,r5,#(5<<2) 
 3433 1c5e FEF7B1FC 		bl QBRAN
 3434 1c62 78100018 		.word 1f+MAPOFFSET 
 3435 1c66 FFF7C7FE 		bl ABORQ
 3436 1c6a 0D       		.byte 13
 3437 1c6b 20777269 		.ascii " write error!"
 3437      74652065 
 3437      72726F72 
 3437      21
 3438              		.p2align 2
 3439              	1:	 
 3440 1c78 52F804FB 		_UNNEST 
 3441              	
 3442              	
 3443              	//    I!	   ( data address -- )
 3444              	// 	   Write one word into flash memory
 3445              	//	   address must even 
 3446              	
 3447 1c7c E00F0018 		.word	_EPAGE+MAPOFFSET
 3448 1c80 02       	_ISTOR:	.byte  2
 3449 1c81 4921     		.ascii "I!"
 3450 1c83 00       		.p2align 2 	
 3451              	ISTOR:	//  data address --
ARM GAS  stm32eforth.s 			page 65


 3452 1c84 42F804ED 		_NEST
 3453 1c88 FFF7A2FF 		bl	WAIT_BSY
 3454 1c8c FEF777FC 		_DOLIT 
 3455 1c90 01000000 		.word 1 
 3456 1c94 FFF782FF 		bl  UNLOCK 
 3457 1c98 FEF708FE 		BL DDUP 
 3458 1c9c FEF7E0FC 		BL TOR 
 3459 1ca0 FEF7DEFC 		BL TOR 
 3460 1ca4 FFF7CCFF 		BL HWORD_WRITE
 3461 1ca8 FEF7C8FC 		BL RFROM 
 3462 1cac 4FEA3545 		ror r5,r5,#16
 3463 1cb0 FEF7C4FC 		BL RFROM 
 3464 1cb4 05F10205 		add r5,r5,#2 
 3465 1cb8 FFF7C2FF 		BL HWORD_WRITE 
 3466 1cbc FEF75FFC 		_DOLIT 
 3467 1cc0 00000000 		.word 0
 3468 1cc4 FFF76AFF 		bl UNLOCK 
 3469 1cc8 52F804FB 		_UNNEST
 3470              	
 3471              	// IMG_SIZE ( -- u )
 3472              	// return flash pages required to save 
 3473              	// user ram  
 3474 1ccc 80100018 		.word _ISTOR+MAPOFFSET 
 3475 1cd0 08       	_IMG_SIZE: .byte 8
 3476 1cd1 494D475F 		.ascii "IMG_SIZE" 
 3476      53495A45 
 3477 1cd9 0000BF   		.p2align 2
 3478              	IMG_SIZE: 
 3479 1cdc 42F804ED 		_NEST
 3480 1ce0 FEF74DFC 		_DOLIT 
 3481 1ce4 38000000 		.word VARS_END_OFS-IMG_SIGN_OFS 
 3482 1ce8 FEF75CFF 		BL USER_END 
 3483 1cec FEF74CFF 		BL USER_BEGIN 
 3484 1cf0 FEF73EFD 		BL SUBB 
 3485 1cf4 FEF734FD 		BL PLUS 
 3486 1cf8 FEF741FC 		_DOLIT 
 3487 1cfc 00040000 		.word 1024 
 3488 1d00 FEF7DEFF 		BL SLMOD 
 3489 1d04 FEF7D0FC 		BL SWAP 
 3490 1d08 FEF75CFC 		BL QBRAN 
 3491 1d0c 14110018 		.word 1f+MAPOFFSET 
 3492 1d10 FEF754FD 		BL ONEP
 3493              	1:
 3494 1d14 52F804FB 		_UNNEST  
 3495              	
 3496              	// IMG? ( n -- T|F )
 3497              	// check if an image has been saved in slot n 
 3498 1d18 D0100018 		.word _IMG_SIZE+MAPOFFSET 
 3499 1d1c 04       	_IMGQ: .byte 4
 3500 1d1d 494D473F 		.ascii "IMG?"
 3501 1d21 0000BF   		.p2align 2
 3502              	IMGQ:
 3503 1d24 42F804ED 		_NEST 
 3504 1d28 00F010F8 		BL IMG_ADR 
 3505 1d2c FEF770FC 		BL AT 
 3506 1d30 FEF74CFF 		BL IMG_SIGN  
 3507 1d34 FEF7E8FC 		BL XORR  
ARM GAS  stm32eforth.s 			page 66


 3508 1d38 FEF7ECFD 		BL ZEQUAL
 3509 1d3c 52F804FB 		_UNNEST
 3510              	
 3511              	// IMG_ADR ( n -- a )
 3512              	// return image address from its number
 3513              	// IMG_ADR=USER_SPACE+IMG_SIZE*1024*n  
 3514 1d40 1C110018 		.word _IMGQ+MAPOFFSET
 3515 1d44 07       	_IMG_ADR: .byte 7 
 3516 1d45 494D475F 		.ascii "IMG_ADR"
 3516      414452
 3517              		.p2align 2 
 3518              	IMG_ADR:
 3519 1d4c 42F804ED 		_NEST 
 3520 1d50 FFF7C4FF 		BL IMG_SIZE // number of pages per image. 
 3521 1d54 4FEA8525 		LSL R5,#10  // * 1024 
 3522 1d58 FEF712FD 		BL STAR     // * n 
 3523 1d5c FEF730FF 		BL IMAGE0 
 3524 1d60 FEF7FEFC 		BL PLUS    // + USER_SPACE  
 3525 1d64 52F804FB 		_UNNEST 
 3526              	
 3527              	// LOAD_IMG ( n -- )
 3528              	// Load image in slot n in RAM. 
 3529 1d68 44110018 		.word _IMG_ADR+MAPOFFSET
 3530 1d6c 08       	_LOAD_IMG: .byte 8 
 3531 1d6d 4C4F4144 		.ascii "LOAD_IMG" 
 3531      5F494D47 
 3532 1d75 0000BF   		.p2align 2 
 3533              	LOAD_IMG:
 3534 1d78 42F804ED 		_NEST 
 3535 1d7c FEF78CFC 		BL DUPP 
 3536 1d80 FFF7D0FF 		BL IMGQ 
 3537 1d84 FEF71EFC 		BL QBRAN 
 3538 1d88 D4110018 		.word 1f+MAPOFFSET
 3539              	/* copy system variables to RAM */
 3540 1d8c FFF7DEFF 		BL IMG_ADR 
 3541 1d90 FEF782FC 		BL DUPP 
 3542 1d94 FEF764FC 		BL TOR 
 3543 1d98 41F8045D 		_PUSH 
 3544 1d9c 03F11405 		ADD R5,R3,#IMG_SIGN_OFS // copy start at signature 
 3545 1da0 41F8045D 		_PUSH 
 3546 1da4 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 3547 1da8 FEF776FC 		BL DUPP 
 3548 1dac FEF758FC 		BL TOR 
 3549 1db0 FFF772F8 		BL MOVE 
 3550              	/* copy user definitions */
 3551 1db4 FEF742FC 		BL RFROM 
 3552 1db8 FEF740FC 		BL RFROM  
 3553 1dbc FEF7D0FC 		BL PLUS // source address  
 3554 1dc0 FEF7E2FE 		BL USER_BEGIN // destination address
 3555 1dc4 FFF720F8 		BL HERE  
 3556 1dc8 FEF7D2FC 		BL SUBB  // byte count 
 3557 1dcc FFF764F8 		BL MOVE
 3558 1dd0 52F804FB 		_UNNEST  
 3559 1dd4 FEF758FC 	1:	BL DROP 
 3560 1dd8 52F804FB 		_UNNEST 
 3561              	
 3562              	
ARM GAS  stm32eforth.s 			page 67


 3563              	// ERASE_MPG ( u1 u2 -- )
 3564              	// erase many pages 
 3565              	// u1 first page number 
 3566              	// u2 how many pages  
 3567 1ddc 6C110018 		.word _LOAD_IMG+MAPOFFSET
 3568 1de0 09       	_ERASE_MPG: .byte 9 
 3569 1de1 45524153 		.ascii "ERASE_MPG"	
 3569      455F4D50 
 3569      47
 3570 1dea 00BF     		.p2align 2 
 3571              	ERASE_MPG:
 3572 1dec 42F804ED 		_NEST 
 3573 1df0 FEF736FC 		BL TOR 
 3574 1df4 00F052F8 		BL PG_TO_ADR 
 3575 1df8 FEF7F0FB 		BL BRAN 
 3576 1dfc 14120018 		.word 2f+MAPOFFSET 
 3577              	1:
 3578 1e00 FEF74AFC 		BL DUPP 
 3579 1e04 FEF72CFC 		BL TOR 
 3580 1e08 FFF7F0FE 		BL EPAGE 
 3581 1e0c FEF716FC 		BL RFROM
 3582 1e10 05F58065 		add r5,#PAGE_SIZE 
 3583              	2:
 3584 1e14 FEF7C7FB 		BL DONXT
 3585 1e18 00120018 		.word 1b+MAPOFFSET 
 3586 1e1c 51F8045B 		_POP 
 3587 1e20 52F804FB 		_UNNEST 
 3588              	
 3589              	// FLSH_WR ( src dest u -- dest+u )
 3590              	// write u words to flash memory 
 3591 1e24 E0110018 		.word _ERASE_MPG+MAPOFFSET
 3592 1e28 07       	_FLSH_WR: .byte 7 
 3593 1e29 464C5348 		.ascii "FLSH_WR"
 3593      5F5752
 3594              		.p2align  
 3595              	FLSH_WR: 
 3596 1e30 42F804ED 		_NEST 
 3597 1e34 FEF714FC 		BL TOR
 3598 1e38 FEF7D0FB 		BL BRAN 
 3599 1e3c 60120018 		.word 3f+MAPOFFSET  
 3600              	/* write system variables to FLASH */
 3601 1e40 FEF70EFC 	2:  BL TOR  // destination address 
 3602 1e44 FEF728FC 		BL DUPP 
 3603 1e48 FEF7E2FB 		BL AT   // get data 
 3604 1e4c FEF700FC 		BL RAT  // get destination address 
 3605 1e50 FFF718FF 		BL ISTOR
 3606 1e54 FEF7D2FC 		BL CELLP  // increment source address 
 3607 1e58 FEF7F0FB 		BL RFROM 
 3608 1e5c FEF7CEFC 		BL CELLP  // increment dest address 
 3609 1e60 FEF7A1FB 	3:	BL DONXT 
 3610 1e64 40120018 		.word 2b+MAPOFFSET
 3611 1e68 FEF7FAFB 		BL TOR 
 3612 1e6c FEF70CFC 		BL DROP 
 3613 1e70 FEF7E4FB 		BL RFROM 
 3614 1e74 52F804FB 		_UNNEST 
 3615              	
 3616              	// ADR>PG ( a -- n )
ARM GAS  stm32eforth.s 			page 68


 3617              	// convert address to page number, {0..127} 
 3618 1e78 28120018 		.word _FLSH_WR+MAPOFFSET
 3619 1e7c 06       	_ADR_TO_PG: .byte 6 
 3620 1e7d 4144523E 		.ascii "ADR>PG" 
 3620      5047
 3621 1e83 00       		.p2align 2 
 3622              	ADR_TO_PG: 
 3623 1e84 4FEA9525 		lsr r5,#10 
 3624 1e88 05F07F05 		and r5,#127 
 3625 1e8c 7047     		_NEXT  
 3626              	
 3627              	// PG>ADR ( n -- a )
 3628              	// convert page# to address 
 3629 1e8e 7C120018 		.word _ADR_TO_PG+MAPOFFSET
 3630 1e92 06       	_PG_TO_ADR: .byte 6 
 3631 1e93 50473E41 		.ascii "PG>ADR" 
 3631      4452
 3632 1e99 0000BF   		.p2align 2 
 3633              	PG_TO_ADR:
 3634 1e9c C0F20205 		movt r5,#2
 3635 1ea0 4FEA8525 		lsl r5,#10 
 3636 1ea4 7047     		_NEXT 
 3637              	
 3638              	// ERASE_IMG ( n -- )
 3639              	// erase image in slot n  
 3640 1ea6 92120018 		.word _PG_TO_ADR+MAPOFFSET 
 3641 1eaa 09       	_ERASE_IMG: .byte 9
 3642 1eab 45524153 		.ascii "ERASE_IMG"
 3642      455F494D 
 3642      47
 3643              		.p2align 2
 3644              	ERASE_IMG:
 3645 1eb4 42F804ED 		_NEST
 3646 1eb8 FFF748FF 		BL IMG_ADR 
 3647 1ebc FFF70EFF 		BL IMG_SIZE 
 3648 1ec0 FEF7CEFB 		BL TOR 
 3649 1ec4 FEF78AFB 		BL BRAN 
 3650 1ec8 D8120018 		.word  2f+MAPOFFSET 
 3651 1ecc FEF7E4FB 	1:	BL DUPP 
 3652 1ed0 FFF78CFE 		BL EPAGE
 3653 1ed4 05F58065 		ADD R5,#PAGE_SIZE 
 3654 1ed8 FEF765FB 	2:	BL DONXT 
 3655 1edc CC120018 		.word 1b+MAPOFFSET 
 3656 1ee0 FEF7D2FB 		BL DROP 
 3657 1ee4 52F804FB 		_UNNEST 
 3658              	
 3659              	// SAVE_IMG ( n -- )
 3660              	// copy in flash RAM system variables and user defintitions.
 3661              	// n is image slot number 
 3662 1ee8 AA120018 		.word _ERASE_IMG+MAPOFFSET	
 3663 1eec 08       	_SAVE_IMG: .byte 8 
 3664 1eed 53415645 		.ascii "SAVE_IMG"
 3664      5F494D47 
 3665 1ef5 0000BF   		.p2align 2
 3666              	SAVE_IMG:
 3667 1ef8 42F804ED 		_NEST 
 3668 1efc FEF784FF 		BL HERE 
ARM GAS  stm32eforth.s 			page 69


 3669 1f00 FEF742FE 		BL USER_BEGIN 
 3670 1f04 FEF710FD 		BL EQUAL 
 3671 1f08 FEF7E8FC 		BL INVER 
 3672 1f0c FEF75AFB 		BL QBRAN
 3673 1f10 1C130018 		.word 1f+MAPOFFSET 
 3674 1f14 FEF7B8FB 		BL DROP 
 3675 1f18 52F804FB 		_UNNEST  // nothing to save 
 3676 1f1c FEF7BCFB 	1:	BL DUPP 
 3677 1f20 FFF700FF 		BL IMGQ 
 3678 1f24 FEF74EFB 		BL QBRAN 
 3679 1f28 34130018 		.word 2f+MAPOFFSET
 3680              	/* delete saved image */
 3681 1f2c FEF7B4FB 		BL DUPP 
 3682 1f30 FFF7C0FF 		BL ERASE_IMG 
 3683              	/* save system variables */
 3684 1f34 FFF70AFF 	2:	BL IMG_ADR // where to save  
 3685 1f38 03F11405 		ADD R5,R3,#IMG_SIGN_OFS // save from here  
 3686 1f3c FEF7BEFB 		BL OVER  // dest src dest 
 3687 1f40 41F8045D 		_PUSH 
 3688 1f44 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 3689 1f48 FEF77AFC 		BL CELLSL  // word count 
 3690 1f4c FEF7A4FB 		BL DUPP 
 3691 1f50 FEF786FB 		BL TOR 
 3692 1f54 FFF76CFF 		BL FLSH_WR  // ( dest src dest count, R: count -- )
 3693              	/* write user definitions */
 3694 1f58 FEF770FB 		BL RFROM    // ( dest count -- )
 3695 1f5c FEF700FC 		BL PLUS     // ( dest+ --  )
 3696 1f60 FEF712FE 		BL USER_BEGIN 
 3697 1f64 FEF7A0FB 		BL SWAP  // ( src dest+ -- )
 3698 1f68 FEF74EFF 		BL HERE   
 3699 1f6c FEF70CFE 		BL USER_BEGIN 
 3700 1f70 FEF7FEFB 		BL SUBB 
 3701 1f74 FEF764FC 		BL CELLSL  // src dest+ count -- 
 3702 1f78 FFF75AFF 		BL FLSH_WR  
 3703 1f7c 52F804FB 		_UNNEST 
 3704              	
 3705              	flash_regs:
 3706 1f80 00200240 		.word FLASH_BASE_ADR // 0 
 3707 1f84 23016745 		.word FLASH_KEY1   // 4 
 3708 1f88 AB89EFCD 		.word FLASH_KEY2   // 8
 3709              	
 3710              	// **************************************************************************
 3711              	//  The compiler
 3712              	
 3713              	//    '	   ( -- ca )
 3714              	// 	Search context vocabularies for the next word in input stream.
 3715              	
 3716 1f8c EC120018 		.word	_SAVE_IMG+MAPOFFSET
 3717 1f90 01       	_TICK:	.byte  1
 3718 1f91 27       		.ascii "'"
 3719 1f92 00BF     		.p2align 2 	
 3720              	TICK:
 3721 1f94 42F804ED 		_NEST
 3722 1f98 FFF79AFB 		BL	TOKEN
 3723 1f9c FFF752FC 		BL	NAMEQ	// ?defined
 3724 1fa0 FEF710FB 		BL	QBRAN
 3725 1fa4 AC130018 		.word	TICK1+MAPOFFSET
ARM GAS  stm32eforth.s 			page 70


 3726 1fa8 52F804FB 		_UNNEST	// yes, push code address
 3727 1fac FFF710BD 	TICK1:	B.W	ABORT	// no, error
 3728              	
 3729              	//    ALLOT	( n -- )
 3730              	// 	Allocate n bytes to the ram area.
 3731              	
 3732 1fb0 90130018 		.word	_TICK+MAPOFFSET
 3733 1fb4 05       	_ALLOT:	.byte  5
 3734 1fb5 414C4C4F 		.ascii "ALLOT"
 3734      54
 3735 1fba 00BF     		.p2align 2 	
 3736              	ALLOT:
 3737 1fbc 42F804ED 		_NEST
 3738 1fc0 FEF7C0FD 		BL	CPP
 3739 1fc4 FEF7F4FC 		BL	PSTOR
 3740 1fc8 52F804FB 		_UNNEST			// adjust code pointer
 3741              	
 3742              	//    ,	   ( w -- )
 3743              	// 	Compile an integer into the code dictionary.
 3744              	
 3745 1fcc B4130018 		.word	_ALLOT+MAPOFFSET
 3746 1fd0 012C     	_COMMA:	.byte  1,','
 3747 1fd2 00BF     		.p2align 2 	
 3748              	COMMA:
 3749 1fd4 42F804ED 		_NEST
 3750 1fd8 FEF716FF 		BL	HERE
 3751 1fdc FEF75CFB 		BL	DUPP
 3752 1fe0 FEF70CFC 		BL	CELLP	// cell boundary
 3753 1fe4 FEF7AEFD 		BL	CPP
 3754 1fe8 FEF708FB 		BL	STORE
 3755 1fec FEF706FB 		BL	STORE
 3756 1ff0 52F804FB 		_UNNEST	// adjust code pointer, compile
 3757              		.p2align 2 
 3758              	//    [COMPILE]   ( -- //  string> )
 3759              	// 	Compile the next immediate word into code dictionary.
 3760              	
 3761 1ff4 D0130018 		.word	_COMMA+MAPOFFSET
 3762 1ff8 89       	_BCOMP:	.byte  IMEDD+9
 3763 1ff9 5B434F4D 		.ascii "[COMPILE]"
 3763      50494C45 
 3763      5D
 3764 2002 00BF     		.p2align 2 	
 3765              	BCOMP:
 3766 2004 42F804ED 		_NEST
 3767 2008 FFF7C4FF 		BL	TICK
 3768 200c FFF7E2FF 		BL	COMMA
 3769 2010 52F804FB 		_UNNEST
 3770              	
 3771              	//    COMPILE	( -- )
 3772              	// 	Compile the next address in colon list to code dictionary.
 3773              	
 3774 2014 F8130018 		.word	_BCOMP+MAPOFFSET
 3775 2018 47       	_COMPI:	.byte  COMPO+7
 3776 2019 434F4D50 		.ascii "COMPILE"
 3776      494C45
 3777              		.p2align 2 	
 3778              	COMPI:
ARM GAS  stm32eforth.s 			page 71


 3779 2020 42F804ED 		_NEST
 3780 2024 FEF70AFB 		BL	RFROM
 3781 2028 25F00105 		BIC	R5,R5,#1
 3782 202c FEF734FB 		BL	DUPP
 3783 2030 FEF7EEFA 		BL	AT
 3784 2034 00F0F2F9 		BL	CALLC			// compile BL instruction
 3785 2038 FEF7E0FB 		BL	CELLP
 3786 203c 45F00105 		ORR	R5,R5,#1
 3787 2040 FEF70EFB 		BL	TOR
 3788 2044 52F804FB 		_UNNEST			// adjust return address
 3789              	
 3790              	//    LITERAL	( w -- )
 3791              	// 	Compile tos to code dictionary as an integer literal.
 3792              	
 3793 2048 18140018 		.word	_COMPI+MAPOFFSET
 3794 204c 87       	_LITER:	.byte  IMEDD+7
 3795 204d 4C495445 		.ascii "LITERAL"
 3795      52414C
 3796              		.p2align 2 	
 3797              	LITER:
 3798 2054 42F804ED 		_NEST
 3799 2058 FFF7E2FF 		BL	COMPI
 3800 205c 7EF9FF17 		.word	DOLIT+MAPOFFSET
 3801 2060 FFF7B8FF 		BL	COMMA
 3802 2064 52F804FB 		_UNNEST
 3803              	
 3804              	//    $,"	( -- )
 3805              	// 	Compile a literal string up to next " .
 3806              	
 3807              	// 	.word	_LITER+MAPOFFSET
 3808              	// _STRCQ	.byte  3
 3809              	// 	.ascii "$$,"""
 3810              	// 	.p2align 2 	
 3811              	STRCQ:
 3812 2068 42F804ED 		_NEST
 3813 206c FEF787FA 		_DOLIT
 3814 2070 FCFFFFFF 		.word	-4
 3815 2074 FEF766FD 		BL	CPP
 3816 2078 FEF79AFC 		BL	PSTOR
 3817 207c FEF77FFA 		_DOLIT
 3818 2080 22000000 		.word	'\"'
 3819 2084 FFF712FB 		BL	WORDD			// move word to code dictionary
 3820 2088 FEF7B6FC 		BL	COUNT
 3821 208c FEF768FB 		BL	PLUS
 3822 2090 FEF762FE 		BL	ALGND			// calculate aligned end of string
 3823 2094 FEF756FD 		BL	CPP
 3824 2098 FEF7B0FA 		BL	STORE
 3825 209c 52F804FB 		_UNNEST 			// adjust the code pointer
 3826              	
 3827              	// **************************************************************************
 3828              	//  Structures
 3829              	
 3830              	//    FOR	 ( -- a )
 3831              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3832              	
 3833 20a0 4C140018 		.word	_LITER+MAPOFFSET
 3834 20a4 C3       	_FOR:	.byte  COMPO+IMEDD+3
ARM GAS  stm32eforth.s 			page 72


 3835 20a5 464F52   		.ascii "FOR"
 3836              		.p2align 2 	
 3837              	FOR:
 3838 20a8 42F804ED 		_NEST
 3839 20ac FFF7B8FF 		BL	COMPI
 3840 20b0 60FAFF17 		.word	TOR+MAPOFFSET
 3841 20b4 FEF7A8FE 		BL	HERE
 3842 20b8 52F804FB 		_UNNEST
 3843              	
 3844              	//    BEGIN	( -- a )
 3845              	// 	Start an infinite or indefinite loop structure.
 3846              	
 3847 20bc A4140018 		.word	_FOR+MAPOFFSET
 3848 20c0 C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 3849 20c1 42454749 		.ascii "BEGIN"
 3849      4E
 3850 20c6 00BF     		.p2align 2 	
 3851              	BEGIN:
 3852 20c8 42F804ED 		_NEST
 3853 20cc FEF79CFE 		BL	HERE
 3854 20d0 52F804FB 		_UNNEST
 3855              		.p2align 2 
 3856              	//    NEXT	( a -- )
 3857              	// 	Terminate a FOR-NEXT loop structure.
 3858              	
 3859 20d4 C0140018 		.word	_BEGIN+MAPOFFSET
 3860 20d8 C4       	_NEXT:	.byte  COMPO+IMEDD+4
 3861 20d9 4E455854 		.ascii "NEXT"
 3862 20dd 0000BF   		.p2align 2 	
 3863              	NEXT:
 3864 20e0 42F804ED 		_NEST
 3865 20e4 FFF79CFF 		BL	COMPI
 3866 20e8 A6F9FF17 		.word	DONXT+MAPOFFSET
 3867 20ec FFF772FF 		BL	COMMA
 3868 20f0 52F804FB 		_UNNEST
 3869              	
 3870              	//    UNTIL	( a -- )
 3871              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3872              	
 3873 20f4 D8140018 		.word	_NEXT+MAPOFFSET
 3874 20f8 C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3875 20f9 554E5449 		.ascii "UNTIL"
 3875      4C
 3876 20fe 00BF     		.p2align 2 	
 3877              	UNTIL:
 3878 2100 42F804ED 		_NEST
 3879 2104 FFF78CFF 		BL	COMPI
 3880 2108 C4F9FF17 		.word	QBRAN+MAPOFFSET
 3881 210c FFF762FF 		BL	COMMA
 3882 2110 52F804FB 		_UNNEST
 3883              	
 3884              	//    AGAIN	( a -- )
 3885              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3886              	
 3887 2114 F8140018 		.word	_UNTIL+MAPOFFSET
 3888 2118 C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3889 2119 41474149 		.ascii "AGAIN"
ARM GAS  stm32eforth.s 			page 73


 3889      4E
 3890 211e 00BF     		.p2align 2 	
 3891              	AGAIN:
 3892 2120 42F804ED 		_NEST
 3893 2124 FFF77CFF 		BL	COMPI
 3894 2128 DCF9FF17 		.word	BRAN+MAPOFFSET
 3895 212c FFF752FF 		BL	COMMA
 3896 2130 52F804FB 		_UNNEST
 3897              	
 3898              	//    IF	  ( -- A )
 3899              	// 	Begin a conditional branch structure.
 3900              	
 3901 2134 18150018 		.word	_AGAIN+MAPOFFSET
 3902 2138 C2       	_IFF:	.byte  COMPO+IMEDD+2
 3903 2139 4946     		.ascii "IF"
 3904 213b 00       		.p2align 2 	
 3905              	IFF:
 3906 213c 42F804ED 		_NEST
 3907 2140 FFF76EFF 		BL	COMPI
 3908 2144 C4F9FF17 		.word	QBRAN+MAPOFFSET
 3909 2148 FEF75EFE 		BL	HERE
 3910 214c FEF717FA 		_DOLIT
 3911 2150 04000000 		.word	4
 3912 2154 FEF7F6FC 		BL	CPP
 3913 2158 FEF72AFC 		BL	PSTOR
 3914 215c 52F804FB 		_UNNEST
 3915              	
 3916              	//    AHEAD	( -- A )
 3917              	// 	Compile a forward branch instruction.
 3918              	
 3919 2160 38150018 		.word	_IFF+MAPOFFSET
 3920 2164 C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 3921 2165 41484541 		.ascii "AHEAD"
 3921      44
 3922 216a 00BF     		.p2align 2 	
 3923              	AHEAD:
 3924 216c 42F804ED 		_NEST
 3925 2170 FFF756FF 		BL	COMPI
 3926 2174 DCF9FF17 		.word	BRAN+MAPOFFSET
 3927 2178 FEF746FE 		BL	HERE
 3928 217c FEF7FFF9 		_DOLIT
 3929 2180 04000000 		.word	4
 3930 2184 FEF7DEFC 		BL	CPP
 3931 2188 FEF712FC 		BL	PSTOR
 3932 218c 52F804FB 		_UNNEST
 3933              	
 3934              	//    REPEAT	( A a -- )
 3935              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3936              	
 3937 2190 64150018 		.word	_AHEAD+MAPOFFSET
 3938 2194 C6       	_REPEA:	.byte  COMPO+IMEDD+6
 3939 2195 52455045 		.ascii "REPEAT"
 3939      4154
 3940 219b 00       		.p2align 2 	
 3941              	REPEA:
 3942 219c 42F804ED 		_NEST
 3943 21a0 FFF7BEFF 		BL	AGAIN
ARM GAS  stm32eforth.s 			page 74


 3944 21a4 FEF730FE 		BL	HERE
 3945 21a8 FEF77EFA 		BL	SWAP
 3946 21ac FEF726FA 		BL	STORE
 3947 21b0 52F804FB 		_UNNEST
 3948              	
 3949              	//    THEN	( A -- )
 3950              	// 	Terminate a conditional branch structure.
 3951              	
 3952 21b4 94150018 		.word	_REPEA+MAPOFFSET
 3953 21b8 C4       	_THENN:	.byte  COMPO+IMEDD+4
 3954 21b9 5448454E 		.ascii "THEN"
 3955 21bd 0000BF   		.p2align 2 	
 3956              	THENN:
 3957 21c0 42F804ED 		_NEST
 3958 21c4 FEF720FE 		BL	HERE
 3959 21c8 FEF76EFA 		BL	SWAP
 3960 21cc FEF716FA 		BL	STORE
 3961 21d0 52F804FB 		_UNNEST
 3962              	
 3963              	//    AFT	 ( a -- a A )
 3964              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3965              	
 3966 21d4 B8150018 		.word	_THENN+MAPOFFSET
 3967 21d8 C3       	_AFT:	.byte  COMPO+IMEDD+3
 3968 21d9 414654   		.ascii "AFT"
 3969              		.p2align 2 	
 3970              	AFT:
 3971 21dc 42F804ED 		_NEST
 3972 21e0 FEF752FA 		BL	DROP
 3973 21e4 FFF7C2FF 		BL	AHEAD
 3974 21e8 FFF76EFF 		BL	BEGIN
 3975 21ec FEF75CFA 		BL	SWAP
 3976 21f0 52F804FB 		_UNNEST
 3977              	
 3978              	//    ELSE	( A -- A )
 3979              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3980              	
 3981 21f4 D8150018 		.word	_AFT+MAPOFFSET
 3982 21f8 C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 3983 21f9 454C5345 		.ascii "ELSE"
 3984 21fd 0000BF   		.p2align 2 	
 3985              	ELSEE:
 3986 2200 42F804ED 		_NEST
 3987 2204 FFF7B2FF 		BL	AHEAD
 3988 2208 FEF74EFA 		BL	SWAP
 3989 220c FFF7D8FF 		BL	THENN
 3990 2210 52F804FB 		_UNNEST
 3991              	
 3992              	//    WHILE	( a -- A a )
 3993              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3994              	
 3995 2214 F8150018 		.word	_ELSEE+MAPOFFSET
 3996 2218 C5       	_WHILE:	.byte  COMPO+IMEDD+5
 3997 2219 5748494C 		.ascii "WHILE"
 3997      45
 3998 221e 00BF     		.p2align 2 	
 3999              	WHILE:
ARM GAS  stm32eforth.s 			page 75


 4000 2220 42F804ED 		_NEST
 4001 2224 FFF78AFF 		BL	IFF
 4002 2228 FEF73EFA 		BL	SWAP
 4003 222c 52F804FB 		_UNNEST
 4004              	
 4005              	//    ABORT"	( -- //  string> )
 4006              	// 	Conditional abort with an error message.
 4007              	
 4008 2230 18160018 		.word	_WHILE+MAPOFFSET
 4009 2234 86       	_ABRTQ:	.byte  IMEDD+6
 4010 2235 41424F52 		.ascii "ABORT\""
 4010      5422
 4011 223b 00       		.p2align 2 	
 4012              	ABRTQ:
 4013 223c 42F804ED 		_NEST
 4014 2240 FFF7EEFE 		BL	COMPI
 4015 2244 F80D0018 		.word	ABORQ+MAPOFFSET
 4016 2248 FFF70EFF 		BL	STRCQ
 4017 224c 52F804FB 		_UNNEST
 4018              	
 4019              	//    $"	( -- //  string> )
 4020              	// 	Compile an inlineDCB literal.
 4021              	
 4022 2250 34160018 		.word	_ABRTQ+MAPOFFSET
 4023 2254 82       	_STRQ:	.byte  IMEDD+2
 4024 2255 2422     		.byte	'$','"'
 4025 2257 00       		.p2align 2 	
 4026              	STRQ:
 4027 2258 42F804ED 		_NEST
 4028 225c FFF7E0FE 		BL	COMPI
 4029 2260 AC070018 		.word	STRQP+MAPOFFSET
 4030 2264 FFF700FF 		BL	STRCQ
 4031 2268 52F804FB 		_UNNEST
 4032              	
 4033              	//    ."	( -- //  string> )
 4034              	// 	Compile an inline word  literal to be typed out at run time.
 4035              	
 4036 226c 54160018 		.word	_STRQ+MAPOFFSET
 4037 2270 C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 4038 2271 2E22     		.byte	'.','"'
 4039 2273 00       		.p2align 2 	
 4040              	DOTQ:
 4041 2274 42F804ED 		_NEST
 4042 2278 FFF7D2FE 		BL	COMPI
 4043 227c C8070018 		.word	DOTQP+MAPOFFSET
 4044 2280 FFF7F2FE 		BL	STRCQ
 4045 2284 52F804FB 		_UNNEST
 4046              	
 4047              	// **************************************************************************
 4048              	//  Name compiler
 4049              	
 4050              	//    ?UNIQUE	( a -- a )
 4051              	// 	Display a warning message if the word already exists.
 4052              	
 4053 2288 70160018 		.word	_DOTQ+MAPOFFSET
 4054 228c 07       	_UNIQU:	.byte  7
 4055 228d 3F554E49 		.ascii "?UNIQUE"
ARM GAS  stm32eforth.s 			page 76


 4055      515545
 4056              		.p2align 2 	
 4057              	UNIQU:
 4058 2294 42F804ED 		_NEST
 4059 2298 FEF7FEF9 		BL	DUPP
 4060 229c FFF7D2FA 		BL	NAMEQ			// ?name exists
 4061 22a0 FEF790F9 		BL	QBRAN
 4062 22a4 C0160018 		.word	UNIQ1+MAPOFFSET	// redefinitions are OK
 4063 22a8 FFF78EF8 		BL	DOTQP
 4064 22ac 07       		.byte	7
 4065 22ad 20726544 		.ascii " reDef "		// but warn the user
 4065      656620
 4066              		.p2align 2 	
 4067 22b4 FEF702FA 		BL	OVER
 4068 22b8 FEF79EFB 		BL	COUNT
 4069 22bc FFF734F8 		BL	TYPEE			// just in case its not planned
 4070              	UNIQ1:
 4071 22c0 FEF7E2F9 		BL	DROP
 4072 22c4 52F804FB 		_UNNEST
 4073              	
 4074              	//    $,n	 ( na -- )
 4075              	// 	Build a new dictionary name using the data at na.
 4076              	
 4077              	// 	.word	_UNIQU+MAPOFFSET
 4078              	// _SNAME	.byte  3
 4079              	// 	.ascii "$$,n"
 4080              	// 	.p2align 2 	
 4081              	SNAME:
 4082 22c8 42F804ED 		_NEST
 4083 22cc FEF7E4F9 		BL	DUPP			//  na na
 4084 22d0 FEF7AEF9 		BL	CAT			//  ?null input
 4085 22d4 FEF776F9 		BL	QBRAN
 4086 22d8 10170018 		.word	SNAM1+MAPOFFSET
 4087 22dc FFF7DAFF 		BL	UNIQU			//  na
 4088 22e0 FEF744FC 		BL	LAST			//  na last
 4089 22e4 FEF794F9 		BL	AT			//  na la
 4090 22e8 FFF774FE 		BL	COMMA			//  na
 4091 22ec FEF7D4F9 		BL	DUPP			//  na na
 4092 22f0 FEF73CFC 		BL	LAST			//  na na last
 4093 22f4 FEF782F9 		BL	STORE			//  na , save na for vocabulary link
 4094 22f8 FEF77EFB 		BL	COUNT			//  na+1 count
 4095 22fc FEF730FA 		BL	PLUS			//  na+1+count
 4096 2300 FEF72AFD 		BL	ALGND			//  word boundary
 4097 2304 FEF71EFC 		BL	CPP
 4098 2308 FEF778F9 		BL	STORE			//  top of dictionary now
 4099 230c 52F804FB 		_UNNEST
 4100              	SNAM1:
 4101 2310 FFF74CF8 		BL	STRQP
 4102 2314 07       		.byte	7
 4103 2315 206E616D 		.ascii " name? "
 4103      653F20
 4104 231c FFF758BB 		B.W	ABORT
 4105              	
 4106              	//    $COMPILE	( a -- )
 4107              	// 	Compile next word to code dictionary as a token or literal.
 4108              	
 4109 2320 8C160018 		.word	_UNIQU+MAPOFFSET
ARM GAS  stm32eforth.s 			page 77


 4110 2324 08       	_SCOMP:	.byte  8
 4111 2325 2424434F 		.ascii "$$COMPILE"
 4111      4D50494C 
 4111      45
 4112 232e 00BF     		.p2align 2 	
 4113              	SCOMP:
 4114 2330 42F804ED 		_NEST
 4115 2334 FFF786FA 		BL	NAMEQ
 4116 2338 FEF79AFA 		BL	QDUP	// defined?
 4117 233c FEF742F9 		BL	QBRAN
 4118 2340 6C170018 		.word	SCOM2+MAPOFFSET
 4119 2344 FEF764F9 		BL	AT
 4120 2348 FEF719F9 		_DOLIT
 4121 234c 80000000 		.word	IMEDD
 4122 2350 FEF7C6F9 		BL	ANDD	// immediate?
 4123 2354 FEF736F9 		BL	QBRAN
 4124 2358 64170018 		.word	SCOM1+MAPOFFSET
 4125 235c FEF71EF9 		BL	EXECU
 4126 2360 52F804FB 		_UNNEST			// it's immediate, execute
 4127              	SCOM1:
 4128 2364 00F05AF8 		BL	CALLC			// it's not immediate, compile
 4129 2368 52F804FB 		_UNNEST	
 4130              	SCOM2:
 4131 236c FEF7FCFE 		BL	NUMBQ
 4132 2370 FEF728F9 		BL	QBRAN
 4133 2374 80170018 		.word	SCOM3+MAPOFFSET
 4134 2378 FFF76CFE 		BL	LITER
 4135 237c 52F804FB 		_UNNEST			// compile number as integer
 4136              	SCOM3: // compilation abort 
 4137 2380 00F002F8 		BL COLON_ABORT 
 4138 2384 FFF724BB 		B.W	ABORT			// error
 4139              	
 4140              	// before aborting a compilation 
 4141              	// reset HERE and LAST
 4142              	// to previous values.  
 4143              	COLON_ABORT:
 4144 2388 42F804ED 		_NEST 
 4145 238c FEF7EEFB 		BL LAST 
 4146 2390 FEF73EF9 		BL AT 
 4147 2394 FEF73AFA 		BL CELLM 
 4148 2398 FEF77EF9 		BL DUPP 
 4149 239c FEF7D2FB 		BL CPP  
 4150 23a0 FEF72CF9 		BL STORE 
 4151 23a4 FEF734F9 		BL AT 
 4152 23a8 FEF7E0FB 		BL LAST 
 4153 23ac FEF726F9 		BL STORE 
 4154 23b0 52F804FB 		_UNNEST 
 4155              	
 4156              	//    OVERT	( -- )
 4157              	// 	Link a new word into the current vocabulary.
 4158              	
 4159 23b4 24170018 		.word	_SCOMP+MAPOFFSET
 4160 23b8 05       	_OVERT:	.byte  5
 4161 23b9 4F564552 		.ascii "OVERT"
 4161      54
 4162 23be 00BF     		.p2align 2 	
 4163              	OVERT:
ARM GAS  stm32eforth.s 			page 78


 4164 23c0 42F804ED 		_NEST
 4165 23c4 FEF7D2FB 		BL	LAST
 4166 23c8 FEF722F9 		BL	AT
 4167 23cc FEF7B0FB 		BL	CNTXT
 4168 23d0 FEF714F9 		BL	STORE
 4169 23d4 52F804FB 		_UNNEST
 4170              	
 4171              	//    ; 	   ( -- )
 4172              	// 	Terminate a colon definition.
 4173              	
 4174 23d8 B8170018 		.word	_OVERT+MAPOFFSET
 4175 23dc C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 4176 23dd 3B       		.ascii ";"
 4177 23de 00BF     		.p2align 2 	
 4178              	SEMIS:
 4179 23e0 42F804ED 		_NEST
 4180 23e4 FEF7CBF8 		_DOLIT
 4181 23e8 52F804FB 		_UNNEST
 4182 23ec FFF7F2FD 		BL	COMMA
 4183 23f0 FFF74EFB 		BL	LBRAC
 4184 23f4 FFF7E4FF 		BL	OVERT
 4185 23f8 52F804FB 		_UNNEST
 4186              	
 4187              	//    ]	   ( -- )
 4188              	// 	Start compiling the words in the input stream.
 4189              	
 4190 23fc DC170018 		.word	_SEMIS+MAPOFFSET
 4191 2400 01       	_RBRAC:	.byte  1
 4192 2401 5D       		.ascii "]"
 4193 2402 00BF     		.p2align 2 	
 4194              	RBRAC:
 4195 2404 42F804ED 		_NEST
 4196 2408 FEF7B9F8 		_DOLIT
 4197 240c 30170018 		.word	SCOMP+MAPOFFSET
 4198 2410 FEF778FB 		BL	TEVAL
 4199 2414 FEF7F2F8 		BL	STORE
 4200 2418 52F804FB 		_UNNEST
 4201              	
 4202              	//    BL.W	( ca -- )
 4203              	// 	Assemble a branch-link long instruction to ca.
 4204              	// 	BL.W is split into 2 16 bit instructions with 11 bit address fields.
 4205              	
 4206              	// 	.word	_RBRAC+MAPOFFSET
 4207              	// _CALLC	.byte  5
 4208              	// 	.ascii "call,"
 4209              	// 	.p2align 2 	
 4210              	CALLC:
 4211 241c 42F804ED 		_NEST
 4212 2420 25F00105 		BIC	R5,R5,#1		//  clear b0 of address from R>
 4213 2424 FEF7F0FC 		BL	HERE
 4214 2428 FEF7A2F9 		BL	SUBB
 4215 242c A5F10405 		SUB	R5,R5,#4		//  pc offset
 4216 2430 40F2FF70 		MOVW	R0,#0x7FF		//  11 bit mask
 4217 2434 2C46     		MOV	R4,R5
 4218 2436 4FEA1535 		LSR	R5,R5,#12		//  get bits 22-12
 4219 243a 05EA0005 		AND	R5,R5,R0
 4220 243e 4FEAC434 		LSL	R4,R4,#15		//  get bits 11-1
ARM GAS  stm32eforth.s 			page 79


 4221 2442 45EA0405 		ORR	R5,R5,R4
 4222 2446 45F07845 		ORR	R5,R5,#0xF8000000
 4223 244a 45F47045 		ORR	R5,R5,#0xF000
 4224 244e FFF7C1FD 		BL	COMMA			//  assemble BL.W instruction
 4225 2452 52F804FB 		_UNNEST
 4226              	
 4227              	
 4228              	// 	:	( -- //  string> )
 4229              	// 	Start a new colon definition using next word as its name.
 4230              	
 4231 2456 00180018 		.word	_RBRAC+MAPOFFSET
 4232 245a 01       	_COLON:	.byte  1
 4233 245b 3A       		.ascii ":"
 4234              		.p2align 2 	
 4235              	COLON:
 4236 245c 42F804ED 		_NEST
 4237 2460 FFF736F9 		BL	TOKEN
 4238 2464 FFF730FF 		BL	SNAME
 4239 2468 FEF789F8 		_DOLIT
 4240 246c 42F804ED 		_NEST
 4241 2470 FFF7B0FD 		BL	COMMA
 4242 2474 FFF7C6FF 		BL	RBRAC
 4243 2478 52F804FB 		_UNNEST
 4244              	
 4245              	//    IMMEDIATE   ( -- )
 4246              	// 	Make the last compiled word an immediate word.
 4247              	
 4248 247c 5A180018 		.word	_COLON+MAPOFFSET
 4249 2480 09       	_IMMED:	.byte  9
 4250 2481 494D4D45 		.ascii "IMMEDIATE"
 4250      44494154 
 4250      45
 4251 248a 00BF     		.p2align 2 	
 4252              	IMMED:
 4253 248c 42F804ED 		_NEST
 4254 2490 FEF775F8 		_DOLIT
 4255 2494 80000000 		.word	IMEDD
 4256 2498 FEF768FB 		BL	LAST
 4257 249c FEF7B8F8 		BL	AT
 4258 24a0 FEF7B6F8 		BL	AT
 4259 24a4 FEF726F9 		BL	ORR
 4260 24a8 FEF760FB 		BL	LAST
 4261 24ac FEF7B0F8 		BL	AT
 4262 24b0 FEF7A4F8 		BL	STORE
 4263 24b4 52F804FB 		_UNNEST
 4264              	
 4265              	// **************************************************************************
 4266              	//  Defining words
 4267              	
 4268              	//    CONSTANT	( u -- //  string> )
 4269              	// 	Compile a new constant.
 4270              	
 4271 24b8 80180018 		.word	_IMMED+MAPOFFSET
 4272 24bc 08       	_CONST:	.byte  8
 4273 24bd 434F4E53 		.ascii "CONSTANT"
 4273      54414E54 
 4274 24c5 0000BF   		.p2align 2 	
ARM GAS  stm32eforth.s 			page 80


 4275              	CONST:
 4276 24c8 42F804ED 		_NEST
 4277 24cc FFF700F9 		BL	TOKEN
 4278 24d0 FFF7FAFE 		BL	SNAME
 4279 24d4 FFF774FF 		BL	OVERT
 4280 24d8 FEF751F8 		_DOLIT
 4281 24dc 42F804ED 		_NEST
 4282 24e0 FFF778FD 		BL	COMMA
 4283 24e4 FEF74BF8 		_DOLIT
 4284 24e8 2CFEFF17 		.word	DOCON+MAPOFFSET
 4285 24ec FFF796FF 		BL	CALLC
 4286 24f0 FFF770FD 		BL	COMMA
 4287 24f4 52F804FB 		_UNNEST
 4288              	
 4289              	//    CREATE	( -- //  string> )
 4290              	// 	Compile a new array entry without allocating code space.
 4291              	
 4292 24f8 BC180018 		.word	_CONST+MAPOFFSET
 4293 24fc 06       	_CREAT:	.byte  6
 4294 24fd 43524541 		.ascii "CREATE"
 4294      5445
 4295 2503 00       		.p2align 2 	
 4296              	CREAT:
 4297 2504 42F804ED 		_NEST
 4298 2508 FFF7E2F8 		BL	TOKEN
 4299 250c FFF7DCFE 		BL	SNAME
 4300 2510 FFF756FF 		BL	OVERT
 4301 2514 FEF733F8 		_DOLIT
 4302 2518 42F804ED 		_NEST
 4303 251c FFF75AFD 		BL	COMMA
 4304 2520 FEF72DF8 		_DOLIT
 4305 2524 20FEFF17 		.word	DOVAR+MAPOFFSET
 4306 2528 FFF778FF 		BL	CALLC
 4307 252c 52F804FB 		_UNNEST
 4308              	
 4309              	//    VARIABLE	( -- //  string> )
 4310              	// 	Compile a new variable initialized to 0.
 4311              	
 4312 2530 FC180018 		.word	_CREAT+MAPOFFSET
 4313 2534 08       	_VARIA:	.byte  8
 4314 2535 56415249 		.ascii "VARIABLE"
 4314      41424C45 
 4315 253d 0000BF   		.p2align 2 	
 4316              	VARIA:
 4317 2540 42F804ED 		_NEST
 4318 2544 FFF7DEFF 		BL	CREAT
 4319 2548 FEF719F8 		_DOLIT
 4320 254c 00000000 		.word	0
 4321 2550 FFF740FD 		BL	COMMA
 4322 2554 52F804FB 		_UNNEST
 4323              	
 4324              	// **************************************************************************
 4325              	//  Tools
 4326              	
 4327              	//    dm+	 ( a u -- a )
 4328              	// 	Dump u bytes from , leaving a+u on the stack.
 4329              	
ARM GAS  stm32eforth.s 			page 81


 4330              	// 	.word	_VARIA+MAPOFFSET
 4331              	// _DMP	.byte  3
 4332              	// 	.ascii "dm+"
 4333              	// 	.p2align 2 	
 4334              	DMP:
 4335 2558 42F804ED 		_NEST
 4336 255c FEF7AEF8 		BL	OVER
 4337 2560 FEF70DF8 		_DOLIT
 4338 2564 04000000 		.word	4
 4339 2568 FEF750FF 		BL	UDOTR			// display address
 4340 256c FEF7B4FE 		BL	SPACE
 4341 2570 FEF776F8 		BL	TOR			// start count down loop
 4342 2574 00F00CB8 		B.W	PDUM2			// skip first pass
 4343              	PDUM1:
 4344 2578 FEF78EF8 	  BL	DUPP
 4345 257c FEF758F8 		BL	CAT
 4346 2580 FDF7FDFF 		_DOLIT
 4347 2584 03000000 		.word	3
 4348 2588 FEF740FF 		BL	UDOTR			// display numeric data
 4349 258c FEF716F9 		BL	ONEP			// increment address
 4350              	PDUM2:
 4351 2590 FEF709F8 	  BL	DONXT
 4352 2594 78190018 		.word	PDUM1+MAPOFFSET	// loop till done
 4353 2598 52F804FB 		_UNNEST
 4354              		.p2align 2 
 4355              	//    DUMP	( a u -- )
 4356              	// 	Dump u bytes from a, in a formatted manner.
 4357              	
 4358 259c 34190018 		.word	_VARIA+MAPOFFSET
 4359 25a0 04       	_DUMP:	.byte  4
 4360 25a1 44554D50 		.ascii "DUMP"
 4361 25a5 0000BF   		.p2align 2 	
 4362              	DUMP:
 4363 25a8 42F804ED 		_NEST
 4364 25ac FEF77CFA 		BL	BASE
 4365 25b0 FEF72EF8 		BL	AT
 4366 25b4 FEF754F8 		BL	TOR
 4367 25b8 FEF77EFD 		BL	HEX			// save radix,set hex
 4368 25bc FDF7DFFF 		_DOLIT
 4369 25c0 10000000 		.word	16
 4370 25c4 FEF798FB 		BL	SLASH			// change count to lines
 4371 25c8 FEF74AF8 		BL	TOR
 4372 25cc 00F014B8 		B.W	DUMP4			// start count down loop
 4373              	DUMP1:
 4374 25d0 FEF7C2FE 	  BL	CR
 4375 25d4 FDF7D3FF 		_DOLIT
 4376 25d8 10000000 		.word	16
 4377 25dc FEF766F9 		BL	DDUP
 4378 25e0 FFF7BAFF 		BL	DMP			// display numeric
 4379 25e4 FEF74EF9 		BL	ROT
 4380 25e8 FEF74CF9 		BL	ROT
 4381 25ec FEF774FE 		BL	SPACE
 4382 25f0 FEF772FE 		BL	SPACE
 4383 25f4 FEF798FE 		BL	TYPEE			// display printable characters
 4384              	DUMP4:
 4385 25f8 FDF7D5FF 	  BL	DONXT
 4386 25fc D0190018 		.word	DUMP1+MAPOFFSET	// loop till done
ARM GAS  stm32eforth.s 			page 82


 4387              	DUMP3:
 4388 2600 FEF742F8 	  BL	DROP
 4389 2604 FEF71AF8 		BL	RFROM
 4390 2608 FEF74EFA 		BL	BASE
 4391 260c FDF7F6FF 		BL	STORE			// restore radix
 4392 2610 52F804FB 		_UNNEST
 4393              	
 4394              	//    .S	  ( ... -- ... )
 4395              	// 	Display the contents of the data stack.
 4396              	
 4397 2614 A0190018 		.word	_DUMP+MAPOFFSET
 4398              	_DOTS:
 4399 2618 02       		.byte  2
 4400 2619 2E53     		.ascii ".S"
 4401 261b 00       		.p2align 2 	
 4402              	DOTS:
 4403 261c 42F804ED 		_NEST
 4404 2620 FEF75AFE 		BL	SPACE
 4405 2624 FEF7CAFB 		BL	DEPTH			// stack depth
 4406 2628 FEF71AF8 		BL	TOR			// start count down loop
 4407 262c 00F006B8 		B.W	DOTS2			// skip first pass
 4408              	DOTS1:
 4409 2630 FEF70EF8 		BL	RAT
 4410 2634 FEF7D4FB 		BL	PICK
 4411 2638 FEF714FF 		BL	DOT			// index stack, display contents
 4412              	DOTS2:
 4413 263c FDF7B3FF 		BL	DONXT
 4414 2640 301A0018 		.word	DOTS1+MAPOFFSET	// loop till done
 4415 2644 FEF748FE 		BL	SPACE
 4416 2648 52F804FB 		_UNNEST
 4417              	
 4418              	//    >NAME	( ca -- na | F )
 4419              	// 	Convert code address to a name address.
 4420              	
 4421 264c 181A0018 		.word	_DOTS+MAPOFFSET
 4422 2650 05       	_TNAME:	.byte  5
 4423 2651 3E4E414D 		.ascii ">NAME"
 4423      45
 4424 2656 00BF     		.p2align 2 	
 4425              	TNAME:
 4426 2658 42F804ED 		_NEST
 4427 265c FEF700F8 		BL	TOR			//  
 4428 2660 FEF766FA 		BL	CNTXT			//  va
 4429 2664 FDF7D4FF 		BL	AT			//  na
 4430              	TNAM1:
 4431 2668 FEF716F8 		BL	DUPP			//  na na
 4432 266c FDF7AAFF 		BL	QBRAN
 4433 2670 981A0018 		.word	TNAM2+MAPOFFSET	//  vocabulary end, no match
 4434 2674 FEF710F8 		BL	DUPP			//  na na
 4435 2678 FFF738F8 		BL	NAMET			//  na ca
 4436 267c FDF7E8FF 		BL	RAT			//  na ca code
 4437 2680 FEF742F8 		BL	XORR			//  na f --
 4438 2684 FDF79EFF 		BL	QBRAN
 4439 2688 981A0018 		.word	TNAM2+MAPOFFSET
 4440 268c FEF7BEF8 		BL	CELLM			//  la 
 4441 2690 FDF7BEFF 		BL	AT			//  next_na
 4442 2694 FFF7E8BF 		B.W	TNAM1
ARM GAS  stm32eforth.s 			page 83


 4443              	TNAM2:	
 4444 2698 FDF7D0FF 		BL	RFROM
 4445 269c FDF7F4FF 		BL	DROP			//  0|na --
 4446 26a0 52F804FB 		_UNNEST			// 0
 4447              	
 4448              	//    .ID	 ( na -- )
 4449              	// 	Display the name at address.
 4450              	
 4451 26a4 501A0018 		.word	_TNAME+MAPOFFSET
 4452 26a8 03       	_DOTID:	.byte  3
 4453 26a9 2E4944   		.ascii ".ID"
 4454              		.p2align 2 	
 4455              	DOTID:
 4456 26ac 42F804ED 		_NEST
 4457 26b0 FEF7DEF8 		BL	QDUP			// if zero no name
 4458 26b4 FDF786FF 		BL	QBRAN
 4459 26b8 D41A0018 		.word	DOTI1+MAPOFFSET
 4460 26bc FEF79CF9 		BL	COUNT
 4461 26c0 FDF75DFF 		_DOLIT
 4462 26c4 1F000000 		.word	0x1F
 4463 26c8 FEF70AF8 		BL	ANDD			// mask lexicon bits
 4464 26cc FEF72CFE 		BL	TYPEE
 4465 26d0 52F804FB 		_UNNEST			// display name string
 4466              	DOTI1:
 4467 26d4 FEF778FE 		BL	DOTQP
 4468 26d8 09       		.byte	9
 4469 26d9 207B6E6F 		.ascii " {noName}"
 4469      4E616D65 
 4469      7D
 4470 26e2 00BF     		.p2align 2 	
 4471 26e4 52F804FB 		_UNNEST
 4472              	
 4473              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 4474              	.if WANT_SEE 
 4475              	//    SEE	 ( -- //  string> )
 4476              	// 	A simple decompiler.
 4477              	
 4478              		.word	_DOTID+MAPOFFSET
 4479              	_SEE:	.byte  3
 4480              		.ascii "SEE"
 4481              		.p2align 2 	
 4482              	SEE:
 4483              		_NEST
 4484              		BL	TICK	//  ca --, starting address
 4485              		BL	CR	
 4486              		_DOLIT
 4487              		.word	20
 4488              		BL	TOR
 4489              	SEE1:
 4490              		BL	CELLP			//  a
 4491              		BL	DUPP			//  a a
 4492              		BL	DECOMP		//  a
 4493              		BL	DONXT
 4494              		.word	SEE1+MAPOFFSET
 4495              		BL	DROP
 4496              		_UNNEST
 4497              	
ARM GAS  stm32eforth.s 			page 84


 4498              	// 	DECOMPILE ( a -- )
 4499              	// 	Convert code in a.  Display name of command or as data.
 4500              	
 4501              		.word	_SEE+MAPOFFSET
 4502              	_DECOM:	.byte  9
 4503              		.ascii "DECOMPILE"
 4504              		.p2align 2 
 4505              		
 4506              	DECOMP:	
 4507              		_NEST
 4508              		BL	DUPP			//  a a
 4509              	// 	BL	TOR			//  a
 4510              		BL	AT			//  a code
 4511              		BL	DUPP			//  a code code
 4512              		_DOLIT
 4513              		.word	0xF800D000 //0xF800F800
 4514              		BL	ANDD
 4515              		_DOLIT
 4516              		.word	0xF000D000 //0xF800F000
 4517              		BL	EQUAL			//  a code ?
 4518              		BL	INVER 
 4519              		BL	QBRAN
 4520              		.word	DECOM2+MAPOFFSET	//  not a command
 4521              		//  a valid_code --, extract address and display name
 4522              		MOVW	R0,#0xFFE
 4523              		MOV	R4,R5
 4524              		LSL	R5,R5,#21		//  get bits 22-12
 4525              		ASR	R5,R5,#9		//  with sign extension
 4526              		LSR	R4,R4,#15		//  get bits 11-1
 4527              		AND	R4,R4,R0		//  retain only bits 11-1
 4528              		ORR	R5,R5,R4		//  get bits 22-1
 4529              		NOP
 4530              		BL	OVER			//  a offset a
 4531              		BL	PLUS			//  a target-4
 4532              		BL	CELLP			//  a target
 4533              		BL	TNAME			//  a na/0 --, is it a name?
 4534              		BL	QDUP			//  name address or zero
 4535              		BL	QBRAN
 4536              		.word	DECOM1+MAPOFFSET
 4537              		BL	SPACE			//  a na
 4538              		BL	DOTID			//  a --, display name
 4539              	// 	BL	RFROM			//  a
 4540              		BL	DROP
 4541              		_UNNEST
 4542              	DECOM1:	// BL	RFROM		//  a
 4543              		BL	AT			//  data
 4544              		BL	UDOT			//  display data
 4545              		_UNNEST
 4546              	DECOM2:
 4547              		BL	UDOT
 4548              	// 	BL	RFROM
 4549              		BL	DROP
 4550              		_UNNEST
 4551              	
 4552              	//    WORDS	( -- )
 4553              	// 	Display the names in the context vocabulary.
 4554              	
ARM GAS  stm32eforth.s 			page 85


 4555              		.word	_DECOM+MAPOFFSET
 4556              	.else 
 4557 26e8 A81A0018 		.word _DOTID+MAPOFFSET 
 4558              	.endif 
 4559 26ec 05       	_WORDS:	.byte  5
 4560 26ed 574F5244 		.ascii "WORDS"
 4560      53
 4561 26f2 00BF     		.p2align 2 	
 4562              	WORDS:
 4563 26f4 42F804ED 		_NEST
 4564 26f8 FEF72EFE 		BL	CR
 4565 26fc FEF718FA 		BL	CNTXT
 4566 2700 FDF786FF 		BL	AT			// only in context
 4567              	WORS1:
 4568 2704 FEF7B4F8 		BL	QDUP			// ?at end of list
 4569 2708 FDF75CFF 		BL	QBRAN
 4570 270c 281B0018 		.word	WORS2+MAPOFFSET
 4571 2710 FDF7C2FF 		BL	DUPP
 4572 2714 FEF7E0FD 		BL	SPACE
 4573 2718 FFF7C8FF 		BL	DOTID			// display a name
 4574 271c FEF776F8 		BL	CELLM
 4575 2720 FDF776FF 		BL	AT
 4576 2724 FFF7EEBF 		B.W	WORS1
 4577              	WORS2:
 4578 2728 52F804FB 		_UNNEST
 4579              	
 4580              	// **************************************************************************
 4581              	//  cold start
 4582              	
 4583              	//    VER	 ( -- n )
 4584              	// 	Return the version number of this implementation.
 4585              	
 4586              	// 	.word	_WORDS+MAPOFFSET
 4587              	// _VERSN	.byte  3
 4588              	// 	.ascii "VER"
 4589              	// 	.p2align 2 	
 4590              	VERSN:
 4591 272c 42F804ED 		_NEST
 4592 2730 FDF725FF 		_DOLIT
 4593 2734 00010000 		.word	VER*256+EXT
 4594 2738 52F804FB 		_UNNEST
 4595              	
 4596              	//    hi	  ( -- )
 4597              	// 	Display the sign-on message of eForth.
 4598              	
 4599 273c EC1A0018 		.word	_WORDS+MAPOFFSET
 4600 2740 02       	_HI:	.byte  2
 4601 2741 4849     		.ascii "HI"
 4602 2743 00       		.p2align 2 	
 4603              	HI:
 4604 2744 42F804ED 		_NEST
 4605 2748 FEF706FE 		BL	CR	// initialize I/O
 4606 274c FEF73CFE 		BL	DOTQP
 4607 2750 17       		.byte	23
 4608 2751 626C7565 		.ascii "blue pill stm32eForth v" 
 4608      2070696C 
 4608      6C207374 
ARM GAS  stm32eforth.s 			page 86


 4608      6D333265 
 4608      466F7274 
 4609              		.p2align 2
 4610 2768 FEF79EF9 		BL	BASE
 4611 276c FDF750FF 		BL	AT
 4612 2770 FEF7A2FC 		BL	HEX	// save radix
 4613 2774 FFF7DAFF 		BL	VERSN
 4614 2778 FEF71AFC 		BL	BDIGS
 4615 277c FEF73EFC 		BL	DIG
 4616 2780 FEF73CFC 		BL	DIG
 4617 2784 FDF7FBFE 		_DOLIT
 4618 2788 2E000000 		.word	'.'
 4619 278c FEF720FC 		BL	HOLD
 4620 2790 FEF744FC 		BL	DIGS
 4621 2794 FEF768FC 		BL	EDIGS
 4622 2798 FEF7C6FD 		BL	TYPEE	// format version number
 4623 279c FEF784F9 		BL	BASE
 4624 27a0 FDF72CFF 		BL	STORE
 4625 27a4 FEF7D8FD 		BL	CR
 4626 27a8 52F804FB 		_UNNEST			// restore radix
 4627              	
 4628              	//    COLD	( -- )
 4629              	// 	The high level cold start sequence.
 4630              	
 4631 27ac 401B0018 		.word	_HI+MAPOFFSET
 4632 27b0 04       	LASTN:	.byte  4
 4633 27b1 434F4C44 		.ascii "COLD"
 4634 27b5 000000   		.p2align 2,0	
 4635              	COLD:
 4636              	//  Initiate Forth registers
 4637 27b8 4FF00003 		MOV R3,#UPP&0xffff	//  user area 
 4638 27bc C2F20003 	 	MOVT R3,#UPP>>16		  
 4639 27c0 03F59F42 		ADD R2,R3,#RPP&0xffff	// Forth return stack
 4640 27c4 03F59D41 		ADD R1,R3,#SPP&0xffff // Forth data stack
 4641 27c8 85EA0505 		EOR R5,R5,R5			//  tos=0
 4642 27cc 00BF     		NOP
 4643 27ce 42F804ED 		_NEST
 4644              	COLD1:
 4645 27d2 FDF7D4FE 		_DOLIT 
 4646 27d6 00000000 		.word 0 
 4647 27da FDF791FE 		BL ULED // turn off user LED 
 4648 27de FDF7CEFE 		_DOLIT
 4649 27e2 00040000 		.word	UZERO
 4650 27e6 FDF7CAFE 		_DOLIT
 4651 27ea 00000020 		.word	UPP
 4652 27ee FDF7C6FE 		_DOLIT
 4653 27f2 54000000 		.word	ULAST-UZERO
 4654 27f6 FEF74FFB 		BL	MOVE 			// initialize user area
 4655 27fa FFF7ADF9 		BL	PRESE			// initialize stack and TIB
 4656 27fe FEF7DFF9 		BL	IMAGE0			// check if user image saved in slot 0 
 4657 2802 FDF7DFFE 		BL	QBRAN 
 4658 2806 0C1C0018 		.word 1f+MAPOFFSET
 4659 280a 00BF     		NOP 
 4660              	//	BL	LOAD_IMG 
 4661 280c FEF742F9 	1:	BL	TBOOT
 4662 2810 FEF71EFB 		BL	ATEXE			// application boot
 4663 2814 FFF7D4FD 		BL	OVERT
ARM GAS  stm32eforth.s 			page 87


 4664 2818 FFF7AAB9 		B.W	QUIT			// start interpretation
 4665              	COLD2:
 4666 281c AFF30080 		.p2align 3 	
 4667              	CTOP:
 4668 2820 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4669 2824 AFF30080 		.p2align 10 
 4669      AFF30080 
 4669      AFF30080 
 4669      AFF30080 
 4669      AFF30080 
 4670              	USER_SPACE: // save user image here.  
 4671 2c00 FFFFFFFF 		.word 0XFFFFFFFF
 4672              	
 4673              	  .end 
ARM GAS  stm32eforth.s 			page 88


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  stm32eforth.s 			page 89


board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
board/blue-pill/stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
board/blue-pill/stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
board/blue-pill/stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
board/blue-pill/stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
board/blue-pill/stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
board/blue-pill/stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
board/blue-pill/stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
board/blue-pill/stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
board/blue-pill/stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
board/blue-pill/stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
board/blue-pill/stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
board/blue-pill/stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
board/blue-pill/stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
board/blue-pill/stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
board/blue-pill/stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
board/blue-pill/stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32eforth.s:83     *ABS*:0000000040011000 LED_GPIO
       stm32eforth.s:84     *ABS*:000000000000000d LED_PIN
       stm32eforth.s:85     *ABS*:0000000040013800 UART
       stm32eforth.s:88     *ABS*:0000000020004e80 SPP
       stm32eforth.s:89     *ABS*:0000000020004e80 TIBB
       stm32eforth.s:90     *ABS*:0000000020004f80 RPP
       stm32eforth.s:91     *ABS*:0000000020000000 UPP
       stm32eforth.s:92     *ABS*:0000000020000100 DTOP
       stm32eforth.s:93     *ABS*:0000000020004e00 DEND
       stm32eforth.s:94     *ABS*:0000000020000000 RAMOFFSET
       stm32eforth.s:95     *ABS*:0000000020005000 RAMEND
       stm32eforth.s:96     *ABS*:0000000008000c00 FLASHOFFSET
       stm32eforth.s:99     *ABS*:0000000017fff400 MAPOFFSET
       stm32eforth.s:104    *ABS*:0000000000000004 SEED_OFS
       stm32eforth.s:105    *ABS*:0000000000000008 TICKS_OFS
       stm32eforth.s:106    *ABS*:000000000000000c TIMER_OFS
       stm32eforth.s:107    *ABS*:0000000000000010 TORAM_OFS
       stm32eforth.s:108    *ABS*:0000000000000014 IMG_SIGN_OFS
       stm32eforth.s:109    *ABS*:0000000000000018 BOOT_OFS
       stm32eforth.s:110    *ABS*:000000000000001c BASE_OFS
       stm32eforth.s:111    *ABS*:0000000000000020 TMP_OFS
       stm32eforth.s:112    *ABS*:0000000000000024 SPAN_OFS
       stm32eforth.s:113    *ABS*:0000000000000028 TOIN_OFS
       stm32eforth.s:114    *ABS*:000000000000002c NTIB_OFS
       stm32eforth.s:115    *ABS*:0000000000000030 TIB_OFS
       stm32eforth.s:116    *ABS*:0000000000000034 EVAL_OFS
       stm32eforth.s:117    *ABS*:0000000000000038 HLD_OFS
       stm32eforth.s:118    *ABS*:000000000000003c CTXT_OFS
       stm32eforth.s:119    *ABS*:0000000000000040 FORTH_CTOP_OFS
       stm32eforth.s:120    *ABS*:0000000000000044 USER_CTOP_OFS
ARM GAS  stm32eforth.s 			page 90


       stm32eforth.s:121    *ABS*:0000000000000048 LASTN_OFS
       stm32eforth.s:122    *ABS*:000000000000004c VARS_END_OFS
       stm32eforth.s:158    .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:292    .text.reset_handler:0000000000000000 reset_handler
       stm32eforth.s:249    .text.default_handler:0000000000000000 default_handler
       stm32eforth.s:271    .text.default_handler:0000000000000034 systick_handler
       stm32eforth.s:247    .text.default_handler:0000000000000000 $t
       stm32eforth.s:259    .text.default_handler:000000000000001c exception_msg
       stm32eforth.s:615    .text.reset_handler:000000000000055c EMIT
       stm32eforth.s:260    .text.default_handler:000000000000001c $d
       stm32eforth.s:281    .text.default_handler:000000000000004e systick_exit
       stm32eforth.s:290    .text.reset_handler:0000000000000000 $t
       stm32eforth.s:404    .text.reset_handler:00000000000000e4 remap
       stm32eforth.s:304    .text.reset_handler:0000000000000014 init_devices
       stm32eforth.s:299    .text.reset_handler:0000000000000010 forth_entry
       stm32eforth.s:300    .text.reset_handler:0000000000000010 $d
       stm32eforth.s:4635   .text.reset_handler:00000000000027b8 COLD
       stm32eforth.s:303    .text.reset_handler:0000000000000014 $t
       stm32eforth.s:319    .text.reset_handler:0000000000000032 wait_hserdy
       stm32eforth.s:339    .text.reset_handler:000000000000004c wait_pllrdy
       stm32eforth.s:352    .text.reset_handler:000000000000006c wait_sws
       stm32eforth.s:424    .text.reset_handler:000000000000011c remap_dest
       stm32eforth.s:422    .text.reset_handler:0000000000000118 remap_src
       stm32eforth.s:4667   .text.reset_handler:0000000000002820 CTOP
       stm32eforth.s:470    .text.reset_handler:0000000000000400 UZERO
       stm32eforth.s:423    .text.reset_handler:0000000000000118 $d
       stm32eforth.s:430    *ABS*:0000000000000001 VER
       stm32eforth.s:431    *ABS*:0000000000000000 EXT
       stm32eforth.s:435    *ABS*:0000000000000040 COMPO
       stm32eforth.s:436    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:437    *ABS*:00000000ffffff1f MASKK
       stm32eforth.s:439    *ABS*:0000000000000004 CELLL
       stm32eforth.s:440    *ABS*:000000000000000a BASEE
       stm32eforth.s:441    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:443    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:444    *ABS*:000000000000000a LF
       stm32eforth.s:445    *ABS*:000000000000000d CRR
       stm32eforth.s:446    *ABS*:000000000000001b ERR
       stm32eforth.s:447    *ABS*:0000000000000027 TIC
       stm32eforth.s:468    .text.reset_handler:0000000000000120 $t
       stm32eforth.s:471    .text.reset_handler:0000000000000400 $d
       stm32eforth.s:4603   .text.reset_handler:0000000000002744 HI
       stm32eforth.s:3198   .text.reset_handler:0000000000001a34 INTER
       stm32eforth.s:4632   .text.reset_handler:00000000000027b0 LASTN
       stm32eforth.s:491    .text.reset_handler:0000000000000454 ULAST
       stm32eforth.s:505    .text.reset_handler:0000000000000454 $d
       stm32eforth.s:506    .text.reset_handler:0000000000000458 _RAND
       stm32eforth.s:509    .text.reset_handler:0000000000000460 RAND
       stm32eforth.s:1461   .text.reset_handler:0000000000000a44 SEED
       stm32eforth.s:751    .text.reset_handler:0000000000000610 AT
       stm32eforth.s:845    .text.reset_handler:0000000000000698 DUPP
       stm32eforth.s:738    .text.reset_handler:00000000000005fc STORE
       stm32eforth.s:1244   .text.reset_handler:0000000000000900 ABSS
       stm32eforth.s:856    .text.reset_handler:00000000000006a8 SWAP
       stm32eforth.s:1808   .text.reset_handler:0000000000000ce0 MODD
       stm32eforth.s:529    .text.reset_handler:00000000000004a0 $d
       stm32eforth.s:530    .text.reset_handler:00000000000004a4 _REBOOT
ARM GAS  stm32eforth.s 			page 91


       stm32eforth.s:533    .text.reset_handler:00000000000004ac REBOOT
       stm32eforth.s:540    .text.reset_handler:00000000000004bc scb_adr
       stm32eforth.s:541    .text.reset_handler:00000000000004bc $d
       stm32eforth.s:546    .text.reset_handler:00000000000004c4 _PAUSE
       stm32eforth.s:548    .text.reset_handler:00000000000004ca $t
       stm32eforth.s:549    .text.reset_handler:00000000000004cc PAUSE
       stm32eforth.s:1483   .text.reset_handler:0000000000000a6c TIMER
       stm32eforth.s:553    .text.reset_handler:00000000000004d8 PAUSE_LOOP
       stm32eforth.s:698    .text.reset_handler:00000000000005c4 QBRAN
       stm32eforth.s:557    .text.reset_handler:00000000000004e4 $d
       stm32eforth.s:560    .text.reset_handler:00000000000004f0 PAUSE_EXIT
       stm32eforth.s:716    .text.reset_handler:00000000000005dc BRAN
       stm32eforth.s:558    .text.reset_handler:00000000000004e8 $t
       stm32eforth.s:559    .text.reset_handler:00000000000004ec $d
       stm32eforth.s:561    .text.reset_handler:00000000000004f0 $t
       stm32eforth.s:565    .text.reset_handler:00000000000004f4 $d
       stm32eforth.s:566    .text.reset_handler:00000000000004f8 _ULED
       stm32eforth.s:570    .text.reset_handler:0000000000000500 ULED
       stm32eforth.s:579    .text.reset_handler:0000000000000518 ULED_OFF
       stm32eforth.s:585    .text.reset_handler:000000000000051c $d
       stm32eforth.s:586    .text.reset_handler:0000000000000520 _QRX
       stm32eforth.s:589    .text.reset_handler:0000000000000528 QKEY
       stm32eforth.s:590    .text.reset_handler:0000000000000528 QRX
       stm32eforth.s:601    .text.reset_handler:0000000000000548 QRX1
       stm32eforth.s:610    .text.reset_handler:0000000000000550 $d
       stm32eforth.s:611    .text.reset_handler:0000000000000554 _TXSTO
       stm32eforth.s:614    .text.reset_handler:000000000000055c TXSTO
       stm32eforth.s:616    .text.reset_handler:000000000000055c TECHO
       stm32eforth.s:619    .text.reset_handler:0000000000000564 TX1
       stm32eforth.s:633    .text.reset_handler:0000000000000574 $d
       stm32eforth.s:634    .text.reset_handler:0000000000000578 _NOP
       stm32eforth.s:636    .text.reset_handler:000000000000057c $t
       stm32eforth.s:637    .text.reset_handler:000000000000057c NOP
       stm32eforth.s:648    .text.reset_handler:000000000000057e DOLIT
       stm32eforth.s:658    .text.reset_handler:0000000000000590 $d
       stm32eforth.s:659    .text.reset_handler:0000000000000594 _EXECU
       stm32eforth.s:661    .text.reset_handler:000000000000059c $t
       stm32eforth.s:662    .text.reset_handler:000000000000059c EXECU
       stm32eforth.s:676    .text.reset_handler:00000000000005a6 DONXT
       stm32eforth.s:683    .text.reset_handler:00000000000005b4 NEXT1
       stm32eforth.s:705    .text.reset_handler:00000000000005d6 QBRAN1
       stm32eforth.s:724    .text.reset_handler:00000000000005e6 $d
       stm32eforth.s:725    .text.reset_handler:00000000000005ea _EXIT
       stm32eforth.s:728    .text.reset_handler:00000000000005f0 EXIT
       stm32eforth.s:734    .text.reset_handler:00000000000005f4 $d
       stm32eforth.s:735    .text.reset_handler:00000000000005f8 _STORE
       stm32eforth.s:737    .text.reset_handler:00000000000005fa $t
       stm32eforth.s:747    .text.reset_handler:0000000000000608 $d
       stm32eforth.s:748    .text.reset_handler:000000000000060c _AT
       stm32eforth.s:750    .text.reset_handler:000000000000060e $t
       stm32eforth.s:758    .text.reset_handler:0000000000000614 $d
       stm32eforth.s:759    .text.reset_handler:0000000000000618 _CSTOR
       stm32eforth.s:762    .text.reset_handler:000000000000061c CSTOR
       stm32eforth.s:771    .text.reset_handler:0000000000000628 $d
       stm32eforth.s:772    .text.reset_handler:000000000000062c _CAT
       stm32eforth.s:775    .text.reset_handler:0000000000000630 CAT
       stm32eforth.s:782    .text.reset_handler:0000000000000634 $d
ARM GAS  stm32eforth.s 			page 92


       stm32eforth.s:783    .text.reset_handler:0000000000000638 _RFROM
       stm32eforth.s:786    .text.reset_handler:000000000000063c RFROM
       stm32eforth.s:794    .text.reset_handler:0000000000000646 $d
       stm32eforth.s:795    .text.reset_handler:000000000000064a _RAT
       stm32eforth.s:798    .text.reset_handler:0000000000000650 RAT
       stm32eforth.s:806    .text.reset_handler:0000000000000658 $d
       stm32eforth.s:807    .text.reset_handler:000000000000065c _TOR
       stm32eforth.s:810    .text.reset_handler:0000000000000660 TOR
       stm32eforth.s:818    .text.reset_handler:000000000000066a $d
       stm32eforth.s:819    .text.reset_handler:000000000000066e _SPAT
       stm32eforth.s:821    .text.reset_handler:0000000000000672 $t
       stm32eforth.s:822    .text.reset_handler:0000000000000674 SPAT
       stm32eforth.s:830    .text.reset_handler:000000000000067c $d
       stm32eforth.s:831    .text.reset_handler:0000000000000680 _DROP
       stm32eforth.s:834    .text.reset_handler:0000000000000688 DROP
       stm32eforth.s:841    .text.reset_handler:000000000000068e $d
       stm32eforth.s:842    .text.reset_handler:0000000000000692 _DUPP
       stm32eforth.s:844    .text.reset_handler:0000000000000696 $t
       stm32eforth.s:852    .text.reset_handler:000000000000069e $d
       stm32eforth.s:853    .text.reset_handler:00000000000006a2 _SWAP
       stm32eforth.s:865    .text.reset_handler:00000000000006b0 $d
       stm32eforth.s:866    .text.reset_handler:00000000000006b4 _OVER
       stm32eforth.s:869    .text.reset_handler:00000000000006bc OVER
       stm32eforth.s:877    .text.reset_handler:00000000000006c4 $d
       stm32eforth.s:878    .text.reset_handler:00000000000006c8 _ZLESS
       stm32eforth.s:881    .text.reset_handler:00000000000006cc ZLESS
       stm32eforth.s:889    .text.reset_handler:00000000000006d6 $d
       stm32eforth.s:890    .text.reset_handler:00000000000006da _ANDD
       stm32eforth.s:892    .text.reset_handler:00000000000006de $t
       stm32eforth.s:893    .text.reset_handler:00000000000006e0 ANDD
       stm32eforth.s:901    .text.reset_handler:00000000000006ea $d
       stm32eforth.s:902    .text.reset_handler:00000000000006ee _ORR
       stm32eforth.s:905    .text.reset_handler:00000000000006f4 ORR
       stm32eforth.s:913    .text.reset_handler:00000000000006fe $d
       stm32eforth.s:914    .text.reset_handler:0000000000000702 _XORR
       stm32eforth.s:916    .text.reset_handler:0000000000000706 $t
       stm32eforth.s:917    .text.reset_handler:0000000000000708 XORR
       stm32eforth.s:925    .text.reset_handler:0000000000000712 $d
       stm32eforth.s:926    .text.reset_handler:0000000000000716 _UPLUS
       stm32eforth.s:928    .text.reset_handler:000000000000071a $t
       stm32eforth.s:929    .text.reset_handler:000000000000071c UPLUS
       stm32eforth.s:940    .text.reset_handler:000000000000072c $d
       stm32eforth.s:941    .text.reset_handler:0000000000000730 _RSHIFT
       stm32eforth.s:944    .text.reset_handler:0000000000000738 RSHIFT
       stm32eforth.s:952    .text.reset_handler:0000000000000742 $d
       stm32eforth.s:953    .text.reset_handler:0000000000000746 _LSHIFT
       stm32eforth.s:956    .text.reset_handler:0000000000000750 LSHIFT
       stm32eforth.s:964    .text.reset_handler:000000000000075a $d
       stm32eforth.s:965    .text.reset_handler:000000000000075e _PLUS
       stm32eforth.s:967    .text.reset_handler:0000000000000760 $t
       stm32eforth.s:968    .text.reset_handler:0000000000000760 PLUS
       stm32eforth.s:976    .text.reset_handler:0000000000000768 $d
       stm32eforth.s:977    .text.reset_handler:000000000000076c _SUBB
       stm32eforth.s:979    .text.reset_handler:000000000000076e $t
       stm32eforth.s:980    .text.reset_handler:0000000000000770 SUBB
       stm32eforth.s:988    .text.reset_handler:000000000000077a $d
       stm32eforth.s:989    .text.reset_handler:000000000000077e _STAR
ARM GAS  stm32eforth.s 			page 93


       stm32eforth.s:991    .text.reset_handler:0000000000000780 $t
       stm32eforth.s:992    .text.reset_handler:0000000000000780 STAR
       stm32eforth.s:1000   .text.reset_handler:000000000000078a $d
       stm32eforth.s:1001   .text.reset_handler:000000000000078e _UMSTA
       stm32eforth.s:1003   .text.reset_handler:0000000000000792 $t
       stm32eforth.s:1004   .text.reset_handler:0000000000000794 UMSTA
       stm32eforth.s:1014   .text.reset_handler:00000000000007a0 $d
       stm32eforth.s:1015   .text.reset_handler:00000000000007a4 _MSTAR
       stm32eforth.s:1018   .text.reset_handler:00000000000007a8 MSTAR
       stm32eforth.s:1028   .text.reset_handler:00000000000007b4 $d
       stm32eforth.s:1029   .text.reset_handler:00000000000007b8 _ONEP
       stm32eforth.s:1032   .text.reset_handler:00000000000007bc ONEP
       stm32eforth.s:1039   .text.reset_handler:00000000000007c2 $d
       stm32eforth.s:1040   .text.reset_handler:00000000000007c6 _ONEM
       stm32eforth.s:1043   .text.reset_handler:00000000000007cc ONEM
       stm32eforth.s:1050   .text.reset_handler:00000000000007d2 $d
       stm32eforth.s:1051   .text.reset_handler:00000000000007d6 _TWOP
       stm32eforth.s:1054   .text.reset_handler:00000000000007dc TWOP
       stm32eforth.s:1061   .text.reset_handler:00000000000007e2 $d
       stm32eforth.s:1062   .text.reset_handler:00000000000007e6 _TWOM
       stm32eforth.s:1065   .text.reset_handler:00000000000007ec TWOM
       stm32eforth.s:1072   .text.reset_handler:00000000000007f2 $d
       stm32eforth.s:1073   .text.reset_handler:00000000000007f6 _CELLP
       stm32eforth.s:1075   .text.reset_handler:00000000000007fc $t
       stm32eforth.s:1076   .text.reset_handler:00000000000007fc CELLP
       stm32eforth.s:1083   .text.reset_handler:0000000000000802 $d
       stm32eforth.s:1084   .text.reset_handler:0000000000000806 _CELLM
       stm32eforth.s:1086   .text.reset_handler:000000000000080c $t
       stm32eforth.s:1087   .text.reset_handler:000000000000080c CELLM
       stm32eforth.s:1094   .text.reset_handler:0000000000000812 $d
       stm32eforth.s:1095   .text.reset_handler:0000000000000816 _BLANK
       stm32eforth.s:1098   .text.reset_handler:000000000000081c BLANK
       stm32eforth.s:1106   .text.reset_handler:0000000000000826 $d
       stm32eforth.s:1107   .text.reset_handler:000000000000082a _CELLS
       stm32eforth.s:1109   .text.reset_handler:0000000000000830 $t
       stm32eforth.s:1110   .text.reset_handler:0000000000000830 CELLS
       stm32eforth.s:1117   .text.reset_handler:0000000000000836 $d
       stm32eforth.s:1118   .text.reset_handler:000000000000083a _CELLSL
       stm32eforth.s:1120   .text.reset_handler:0000000000000840 $t
       stm32eforth.s:1121   .text.reset_handler:0000000000000840 CELLSL
       stm32eforth.s:1128   .text.reset_handler:0000000000000846 $d
       stm32eforth.s:1129   .text.reset_handler:000000000000084a _TWOST
       stm32eforth.s:1132   .text.reset_handler:0000000000000850 TWOST
       stm32eforth.s:1139   .text.reset_handler:0000000000000856 $d
       stm32eforth.s:1140   .text.reset_handler:000000000000085a _TWOSL
       stm32eforth.s:1143   .text.reset_handler:0000000000000860 TWOSL
       stm32eforth.s:1150   .text.reset_handler:0000000000000866 $d
       stm32eforth.s:1151   .text.reset_handler:000000000000086a _QDUP
       stm32eforth.s:1154   .text.reset_handler:0000000000000870 QDUP
       stm32eforth.s:1163   .text.reset_handler:000000000000087a $d
       stm32eforth.s:1164   .text.reset_handler:000000000000087e _ROT
       stm32eforth.s:1166   .text.reset_handler:0000000000000882 $t
       stm32eforth.s:1167   .text.reset_handler:0000000000000884 ROT
       stm32eforth.s:1177   .text.reset_handler:000000000000088e $d
       stm32eforth.s:1178   .text.reset_handler:0000000000000892 _DDROP
       stm32eforth.s:1180   .text.reset_handler:0000000000000898 $t
       stm32eforth.s:1181   .text.reset_handler:0000000000000898 DDROP
ARM GAS  stm32eforth.s 			page 94


       stm32eforth.s:1189   .text.reset_handler:00000000000008a2 $d
       stm32eforth.s:1190   .text.reset_handler:00000000000008a6 _DDUP
       stm32eforth.s:1193   .text.reset_handler:00000000000008ac DDUP
       stm32eforth.s:1202   .text.reset_handler:00000000000008b8 $d
       stm32eforth.s:1203   .text.reset_handler:00000000000008bc _DPLUS
       stm32eforth.s:1206   .text.reset_handler:00000000000008c0 DPLUS
       stm32eforth.s:1218   .text.reset_handler:00000000000008d4 $d
       stm32eforth.s:1219   .text.reset_handler:00000000000008d8 _INVER
       stm32eforth.s:1221   .text.reset_handler:00000000000008dc $t
       stm32eforth.s:1222   .text.reset_handler:00000000000008dc INVER
       stm32eforth.s:1229   .text.reset_handler:00000000000008e2 $d
       stm32eforth.s:1230   .text.reset_handler:00000000000008e6 _NEGAT
       stm32eforth.s:1233   .text.reset_handler:00000000000008f0 NEGAT
       stm32eforth.s:1240   .text.reset_handler:00000000000008f6 $d
       stm32eforth.s:1241   .text.reset_handler:00000000000008fa _ABSS
       stm32eforth.s:1243   .text.reset_handler:00000000000008fe $t
       stm32eforth.s:1253   .text.reset_handler:000000000000090a $d
       stm32eforth.s:1254   .text.reset_handler:000000000000090e _ZEQUAL
       stm32eforth.s:1257   .text.reset_handler:0000000000000914 ZEQUAL
       stm32eforth.s:1267   .text.reset_handler:0000000000000922 $d
       stm32eforth.s:1268   .text.reset_handler:0000000000000926 _EQUAL
       stm32eforth.s:1270   .text.reset_handler:0000000000000928 $t
       stm32eforth.s:1271   .text.reset_handler:0000000000000928 EQUAL
       stm32eforth.s:1282   .text.reset_handler:0000000000000938 $d
       stm32eforth.s:1283   .text.reset_handler:000000000000093c _ULESS
       stm32eforth.s:1286   .text.reset_handler:0000000000000940 ULESS
       stm32eforth.s:1297   .text.reset_handler:0000000000000950 $d
       stm32eforth.s:1298   .text.reset_handler:0000000000000954 _LESS
       stm32eforth.s:1300   .text.reset_handler:0000000000000956 $t
       stm32eforth.s:1301   .text.reset_handler:0000000000000958 LESS
       stm32eforth.s:1312   .text.reset_handler:0000000000000968 $d
       stm32eforth.s:1313   .text.reset_handler:000000000000096c _GREAT
       stm32eforth.s:1315   .text.reset_handler:000000000000096e $t
       stm32eforth.s:1316   .text.reset_handler:0000000000000970 GREAT
       stm32eforth.s:1327   .text.reset_handler:0000000000000980 $d
       stm32eforth.s:1328   .text.reset_handler:0000000000000984 _MAX
       stm32eforth.s:1330   .text.reset_handler:0000000000000988 $t
       stm32eforth.s:1331   .text.reset_handler:0000000000000988 MAX
       stm32eforth.s:1341   .text.reset_handler:0000000000000994 $d
       stm32eforth.s:1342   .text.reset_handler:0000000000000998 _MIN
       stm32eforth.s:1344   .text.reset_handler:000000000000099c $t
       stm32eforth.s:1345   .text.reset_handler:000000000000099c MIN
       stm32eforth.s:1355   .text.reset_handler:00000000000009a8 $d
       stm32eforth.s:1356   .text.reset_handler:00000000000009ac _PSTOR
       stm32eforth.s:1359   .text.reset_handler:00000000000009b0 PSTOR
       stm32eforth.s:1370   .text.reset_handler:00000000000009c0 $d
       stm32eforth.s:1371   .text.reset_handler:00000000000009c4 _DSTOR
       stm32eforth.s:1374   .text.reset_handler:00000000000009c8 DSTOR
       stm32eforth.s:1385   .text.reset_handler:00000000000009dc $d
       stm32eforth.s:1386   .text.reset_handler:00000000000009e0 _DAT
       stm32eforth.s:1389   .text.reset_handler:00000000000009e4 DAT
       stm32eforth.s:1398   .text.reset_handler:00000000000009ee $d
       stm32eforth.s:1399   .text.reset_handler:00000000000009f2 _COUNT
       stm32eforth.s:1401   .text.reset_handler:00000000000009f8 $t
       stm32eforth.s:1402   .text.reset_handler:00000000000009f8 COUNT
       stm32eforth.s:1411   .text.reset_handler:0000000000000a04 $d
       stm32eforth.s:1412   .text.reset_handler:0000000000000a08 _DNEGA
ARM GAS  stm32eforth.s 			page 95


       stm32eforth.s:1414   .text.reset_handler:0000000000000a10 $t
       stm32eforth.s:1415   .text.reset_handler:0000000000000a10 DNEGA
       stm32eforth.s:1433   .text.reset_handler:0000000000000a20 DOVAR
       stm32eforth.s:1445   .text.reset_handler:0000000000000a2c DOCON
       stm32eforth.s:1457   .text.reset_handler:0000000000000a38 $d
       stm32eforth.s:1458   .text.reset_handler:0000000000000a3c _SEED
       stm32eforth.s:1468   .text.reset_handler:0000000000000a4e $d
       stm32eforth.s:1469   .text.reset_handler:0000000000000a52 _MSEC
       stm32eforth.s:1472   .text.reset_handler:0000000000000a58 MSEC
       stm32eforth.s:1479   .text.reset_handler:0000000000000a62 $d
       stm32eforth.s:1480   .text.reset_handler:0000000000000a66 _TIMER
       stm32eforth.s:1482   .text.reset_handler:0000000000000a6c $t
       stm32eforth.s:1491   .text.reset_handler:0000000000000a76 $d
       stm32eforth.s:1492   .text.reset_handler:0000000000000a7a _TORAM
       stm32eforth.s:1495   .text.reset_handler:0000000000000a80 TORAM
       stm32eforth.s:1503   .text.reset_handler:0000000000000a8a $d
       stm32eforth.s:1504   .text.reset_handler:0000000000000a8e _TBOOT
       stm32eforth.s:1506   .text.reset_handler:0000000000000a94 $t
       stm32eforth.s:1507   .text.reset_handler:0000000000000a94 TBOOT
       stm32eforth.s:1515   .text.reset_handler:0000000000000a9e $d
       stm32eforth.s:1516   .text.reset_handler:0000000000000aa2 _BASE
       stm32eforth.s:1519   .text.reset_handler:0000000000000aa8 BASE
       stm32eforth.s:1531   .text.reset_handler:0000000000000ab2 TEMP
       stm32eforth.s:1539   .text.reset_handler:0000000000000abc $d
       stm32eforth.s:1540   .text.reset_handler:0000000000000ac0 _SPAN
       stm32eforth.s:1543   .text.reset_handler:0000000000000ac8 SPAN
       stm32eforth.s:1551   .text.reset_handler:0000000000000ad2 $d
       stm32eforth.s:1552   .text.reset_handler:0000000000000ad6 _INN
       stm32eforth.s:1554   .text.reset_handler:0000000000000ada $t
       stm32eforth.s:1555   .text.reset_handler:0000000000000adc INN
       stm32eforth.s:1563   .text.reset_handler:0000000000000ae6 $d
       stm32eforth.s:1564   .text.reset_handler:0000000000000aea _NTIB
       stm32eforth.s:1567   .text.reset_handler:0000000000000af0 NTIB
       stm32eforth.s:1575   .text.reset_handler:0000000000000afa $d
       stm32eforth.s:1576   .text.reset_handler:0000000000000afe _TEVAL
       stm32eforth.s:1578   .text.reset_handler:0000000000000b04 $t
       stm32eforth.s:1579   .text.reset_handler:0000000000000b04 TEVAL
       stm32eforth.s:1587   .text.reset_handler:0000000000000b0e $d
       stm32eforth.s:1588   .text.reset_handler:0000000000000b12 _HLD
       stm32eforth.s:1590   .text.reset_handler:0000000000000b16 $t
       stm32eforth.s:1591   .text.reset_handler:0000000000000b18 HLD
       stm32eforth.s:1599   .text.reset_handler:0000000000000b22 $d
       stm32eforth.s:1600   .text.reset_handler:0000000000000b26 _CNTXT
       stm32eforth.s:1602   .text.reset_handler:0000000000000b2e $t
       stm32eforth.s:1603   .text.reset_handler:0000000000000b30 CNTXT
       stm32eforth.s:1604   .text.reset_handler:0000000000000b30 CRRNT
       stm32eforth.s:1612   .text.reset_handler:0000000000000b3a $d
       stm32eforth.s:1613   .text.reset_handler:0000000000000b3e _CP
       stm32eforth.s:1616   .text.reset_handler:0000000000000b44 CPP
       stm32eforth.s:1623   .text.reset_handler:0000000000000b4e $d
       stm32eforth.s:1624   .text.reset_handler:0000000000000b52 _FCP
       stm32eforth.s:1626   .text.reset_handler:0000000000000b56 $t
       stm32eforth.s:1627   .text.reset_handler:0000000000000b58 FCP
       stm32eforth.s:1635   .text.reset_handler:0000000000000b62 $d
       stm32eforth.s:1636   .text.reset_handler:0000000000000b66 _LAST
       stm32eforth.s:1639   .text.reset_handler:0000000000000b6c LAST
       stm32eforth.s:1650   .text.reset_handler:0000000000000b76 $d
ARM GAS  stm32eforth.s 			page 96


       stm32eforth.s:1651   .text.reset_handler:0000000000000b7a _USER_BGN
       stm32eforth.s:1654   .text.reset_handler:0000000000000b88 USER_BEGIN
       stm32eforth.s:1658   .text.reset_handler:0000000000000b90 USR_BGN_ADR
       stm32eforth.s:1659   .text.reset_handler:0000000000000b90 $d
       stm32eforth.s:1664   .text.reset_handler:0000000000000b98 _USER_END
       stm32eforth.s:1667   .text.reset_handler:0000000000000ba4 USER_END
       stm32eforth.s:1675   .text.reset_handler:0000000000000bb2 $d
       stm32eforth.s:1676   .text.reset_handler:0000000000000bb6 _IMAGE0
       stm32eforth.s:1679   .text.reset_handler:0000000000000bc0 IMAGE0
       stm32eforth.s:1683   .text.reset_handler:0000000000000bc8 USR_IMG_ADR
       stm32eforth.s:1684   .text.reset_handler:0000000000000bc8 $d
       stm32eforth.s:4670   .text.reset_handler:0000000000002c00 USER_SPACE
       stm32eforth.s:1687   .text.reset_handler:0000000000000bcc IMG_SIGN
       stm32eforth.s:1688   .text.reset_handler:0000000000000bcc $t
       stm32eforth.s:1700   .text.reset_handler:0000000000000bd8 $d
       stm32eforth.s:1701   .text.reset_handler:0000000000000bdc _WITHI
       stm32eforth.s:1704   .text.reset_handler:0000000000000be4 WITHI
       stm32eforth.s:1719   .text.reset_handler:0000000000000c04 $d
       stm32eforth.s:1720   .text.reset_handler:0000000000000c08 _UMMOD
       stm32eforth.s:1723   .text.reset_handler:0000000000000c10 UMMOD
       stm32eforth.s:1727   .text.reset_handler:0000000000000c1a UMMOD0
       stm32eforth.s:1734   .text.reset_handler:0000000000000c2a UMMOD1
       stm32eforth.s:1740   .text.reset_handler:0000000000000c34 UMMOD2
       stm32eforth.s:1750   .text.reset_handler:0000000000000c3e $d
       stm32eforth.s:1751   .text.reset_handler:0000000000000c42 _MSMOD
       stm32eforth.s:1753   .text.reset_handler:0000000000000c48 $t
       stm32eforth.s:1754   .text.reset_handler:0000000000000c48 MSMOD
       stm32eforth.s:1761   .text.reset_handler:0000000000000c60 $d
       stm32eforth.s:1766   .text.reset_handler:0000000000000c74 MMOD1
       stm32eforth.s:1762   .text.reset_handler:0000000000000c64 $t
       stm32eforth.s:1771   .text.reset_handler:0000000000000c84 $d
       stm32eforth.s:1774   .text.reset_handler:0000000000000c90 MMOD2
       stm32eforth.s:1772   .text.reset_handler:0000000000000c88 $t
       stm32eforth.s:1779   .text.reset_handler:0000000000000ca0 $d
       stm32eforth.s:1783   .text.reset_handler:0000000000000cb0 MMOD3
       stm32eforth.s:1780   .text.reset_handler:0000000000000ca4 $t
       stm32eforth.s:1789   .text.reset_handler:0000000000000cb4 $d
       stm32eforth.s:1790   .text.reset_handler:0000000000000cb8 _SLMOD
       stm32eforth.s:1793   .text.reset_handler:0000000000000cc0 SLMOD
       stm32eforth.s:1804   .text.reset_handler:0000000000000cd8 $d
       stm32eforth.s:1805   .text.reset_handler:0000000000000cdc _MODD
       stm32eforth.s:1807   .text.reset_handler:0000000000000ce0 $t
       stm32eforth.s:1817   .text.reset_handler:0000000000000cf0 $d
       stm32eforth.s:1818   .text.reset_handler:0000000000000cf4 _SLASH
       stm32eforth.s:1820   .text.reset_handler:0000000000000cf6 $t
       stm32eforth.s:1821   .text.reset_handler:0000000000000cf8 SLASH
       stm32eforth.s:1831   .text.reset_handler:0000000000000d0c $d
       stm32eforth.s:1832   .text.reset_handler:0000000000000d10 _SSMOD
       stm32eforth.s:1834   .text.reset_handler:0000000000000d16 $t
       stm32eforth.s:1835   .text.reset_handler:0000000000000d18 SSMOD
       stm32eforth.s:1846   .text.reset_handler:0000000000000d30 $d
       stm32eforth.s:1847   .text.reset_handler:0000000000000d34 _STASL
       stm32eforth.s:1850   .text.reset_handler:0000000000000d38 STASL
       stm32eforth.s:1863   .text.reset_handler:0000000000000d4c $d
       stm32eforth.s:1864   .text.reset_handler:0000000000000d50 _ALGND
       stm32eforth.s:1866   .text.reset_handler:0000000000000d58 $t
       stm32eforth.s:1867   .text.reset_handler:0000000000000d58 ALGND
ARM GAS  stm32eforth.s 			page 97


       stm32eforth.s:1876   .text.reset_handler:0000000000000d66 $d
       stm32eforth.s:1877   .text.reset_handler:0000000000000d6a _TCHAR
       stm32eforth.s:1879   .text.reset_handler:0000000000000d70 $t
       stm32eforth.s:1880   .text.reset_handler:0000000000000d70 TCHAR
       stm32eforth.s:1883   .text.reset_handler:0000000000000d78 $d
       stm32eforth.s:1884   .text.reset_handler:0000000000000d7c $t
       stm32eforth.s:1888   .text.reset_handler:0000000000000d8c $d
       stm32eforth.s:1889   .text.reset_handler:0000000000000d90 $t
       stm32eforth.s:1892   .text.reset_handler:0000000000000d9c $d
       stm32eforth.s:1896   .text.reset_handler:0000000000000dac TCHA1
       stm32eforth.s:1893   .text.reset_handler:0000000000000da0 $t
       stm32eforth.s:1895   .text.reset_handler:0000000000000da8 $d
       stm32eforth.s:1897   .text.reset_handler:0000000000000dac $t
       stm32eforth.s:1902   .text.reset_handler:0000000000000db0 $d
       stm32eforth.s:1903   .text.reset_handler:0000000000000db4 _DEPTH
       stm32eforth.s:1905   .text.reset_handler:0000000000000dba $t
       stm32eforth.s:1906   .text.reset_handler:0000000000000dbc DEPTH
       stm32eforth.s:1918   .text.reset_handler:0000000000000dd6 $d
       stm32eforth.s:1919   .text.reset_handler:0000000000000dda _PICK
       stm32eforth.s:1922   .text.reset_handler:0000000000000de0 PICK
       stm32eforth.s:1937   .text.reset_handler:0000000000000dfc $d
       stm32eforth.s:1938   .text.reset_handler:0000000000000e00 _HERE
       stm32eforth.s:1941   .text.reset_handler:0000000000000e08 HERE
       stm32eforth.s:1950   .text.reset_handler:0000000000000e18 $d
       stm32eforth.s:1951   .text.reset_handler:0000000000000e1c _PAD
       stm32eforth.s:1953   .text.reset_handler:0000000000000e20 $t
       stm32eforth.s:1954   .text.reset_handler:0000000000000e20 PAD
       stm32eforth.s:1963   .text.reset_handler:0000000000000e30 $d
       stm32eforth.s:1964   .text.reset_handler:0000000000000e34 _TIB
       stm32eforth.s:1966   .text.reset_handler:0000000000000e38 $t
       stm32eforth.s:1967   .text.reset_handler:0000000000000e38 TIB
       stm32eforth.s:1975   .text.reset_handler:0000000000000e40 $d
       stm32eforth.s:1976   .text.reset_handler:0000000000000e44 _ATEXE
       stm32eforth.s:1979   .text.reset_handler:0000000000000e50 ATEXE
       stm32eforth.s:1991   .text.reset_handler:0000000000000e62 $d
       stm32eforth.s:1992   .text.reset_handler:0000000000000e66 _CMOVE
       stm32eforth.s:1994   .text.reset_handler:0000000000000e6c $t
       stm32eforth.s:1995   .text.reset_handler:0000000000000e6c CMOVE
       stm32eforth.s:2002   .text.reset_handler:0000000000000e7e CMOV1
       stm32eforth.s:1999   .text.reset_handler:0000000000000e76 CMOV0
       stm32eforth.s:2007   .text.reset_handler:0000000000000e88 CMOV2
       stm32eforth.s:2014   .text.reset_handler:0000000000000e8e $d
       stm32eforth.s:2015   .text.reset_handler:0000000000000e92 _MOVE
       stm32eforth.s:2018   .text.reset_handler:0000000000000e98 MOVE
       stm32eforth.s:2026   .text.reset_handler:0000000000000eae MOVE1
       stm32eforth.s:2023   .text.reset_handler:0000000000000ea6 MOVE0
       stm32eforth.s:2031   .text.reset_handler:0000000000000eb8 MOVE2
       stm32eforth.s:2038   .text.reset_handler:0000000000000ebe $d
       stm32eforth.s:2039   .text.reset_handler:0000000000000ec2 _FILL
       stm32eforth.s:2042   .text.reset_handler:0000000000000ec8 FILL
       stm32eforth.s:2045   .text.reset_handler:0000000000000ed0 FILL0
       stm32eforth.s:2048   .text.reset_handler:0000000000000ed4 FILL1
       stm32eforth.s:2054   .text.reset_handler:0000000000000ee2 FILL2
       stm32eforth.s:2061   .text.reset_handler:0000000000000ee8 $d
       stm32eforth.s:2062   .text.reset_handler:0000000000000eec _PACKS
       stm32eforth.s:2065   .text.reset_handler:0000000000000ef4 PACKS
       stm32eforth.s:2074   .text.reset_handler:0000000000000f14 $d
ARM GAS  stm32eforth.s 			page 98


       stm32eforth.s:2075   .text.reset_handler:0000000000000f18 $t
       stm32eforth.s:2077   .text.reset_handler:0000000000000f20 $d
       stm32eforth.s:2078   .text.reset_handler:0000000000000f24 $t
       stm32eforth.s:2095   .text.reset_handler:0000000000000f4c $d
       stm32eforth.s:2096   .text.reset_handler:0000000000000f50 _DIGIT
       stm32eforth.s:2098   .text.reset_handler:0000000000000f56 $t
       stm32eforth.s:2099   .text.reset_handler:0000000000000f58 DIGIT
       stm32eforth.s:2102   .text.reset_handler:0000000000000f60 $d
       stm32eforth.s:2103   .text.reset_handler:0000000000000f64 $t
       stm32eforth.s:2113   .text.reset_handler:0000000000000f7c $d
       stm32eforth.s:2114   .text.reset_handler:0000000000000f80 _EXTRC
       stm32eforth.s:2116   .text.reset_handler:0000000000000f88 $t
       stm32eforth.s:2117   .text.reset_handler:0000000000000f88 EXTRC
       stm32eforth.s:2120   .text.reset_handler:0000000000000f90 $d
       stm32eforth.s:2121   .text.reset_handler:0000000000000f94 $t
       stm32eforth.s:2130   .text.reset_handler:0000000000000fa8 $d
       stm32eforth.s:2131   .text.reset_handler:0000000000000fac _BDIGS
       stm32eforth.s:2134   .text.reset_handler:0000000000000fb0 BDIGS
       stm32eforth.s:2144   .text.reset_handler:0000000000000fc4 $d
       stm32eforth.s:2145   .text.reset_handler:0000000000000fc8 _HOLD
       stm32eforth.s:2148   .text.reset_handler:0000000000000fd0 HOLD
       stm32eforth.s:2162   .text.reset_handler:0000000000000ff4 $d
       stm32eforth.s:2163   .text.reset_handler:0000000000000ff8 _DIG
       stm32eforth.s:2165   .text.reset_handler:0000000000000ffa $t
       stm32eforth.s:2166   .text.reset_handler:0000000000000ffc DIG
       stm32eforth.s:2177   .text.reset_handler:0000000000001014 $d
       stm32eforth.s:2178   .text.reset_handler:0000000000001018 _DIGS
       stm32eforth.s:2181   .text.reset_handler:000000000000101c DIGS
       stm32eforth.s:2183   .text.reset_handler:0000000000001020 DIGS1
       stm32eforth.s:2187   .text.reset_handler:000000000000102c $d
       stm32eforth.s:2189   .text.reset_handler:0000000000001032 DIGS2
       stm32eforth.s:2188   .text.reset_handler:0000000000001030 $t
       stm32eforth.s:2195   .text.reset_handler:0000000000001036 $d
       stm32eforth.s:2196   .text.reset_handler:000000000000103a _SIGN
       stm32eforth.s:2199   .text.reset_handler:0000000000001040 SIGN
       stm32eforth.s:2203   .text.reset_handler:000000000000104c $d
       stm32eforth.s:2207   .text.reset_handler:000000000000105c SIGN1
       stm32eforth.s:2204   .text.reset_handler:0000000000001050 $t
       stm32eforth.s:2205   .text.reset_handler:0000000000001054 $d
       stm32eforth.s:2206   .text.reset_handler:0000000000001058 $t
       stm32eforth.s:2213   .text.reset_handler:0000000000001060 $d
       stm32eforth.s:2214   .text.reset_handler:0000000000001064 _EDIGS
       stm32eforth.s:2217   .text.reset_handler:0000000000001068 EDIGS
       stm32eforth.s:2234   .text.reset_handler:0000000000001088 STRR
       stm32eforth.s:2249   .text.reset_handler:00000000000010b0 $d
       stm32eforth.s:2250   .text.reset_handler:00000000000010b4 _HEX
       stm32eforth.s:2252   .text.reset_handler:00000000000010b8 $t
       stm32eforth.s:2253   .text.reset_handler:00000000000010b8 HEX
       stm32eforth.s:2256   .text.reset_handler:00000000000010c0 $d
       stm32eforth.s:2257   .text.reset_handler:00000000000010c4 $t
       stm32eforth.s:2264   .text.reset_handler:00000000000010d0 $d
       stm32eforth.s:2265   .text.reset_handler:00000000000010d4 _DECIM
       stm32eforth.s:2267   .text.reset_handler:00000000000010dc $t
       stm32eforth.s:2268   .text.reset_handler:00000000000010dc DECIM
       stm32eforth.s:2271   .text.reset_handler:00000000000010e4 $d
       stm32eforth.s:2272   .text.reset_handler:00000000000010e8 $t
       stm32eforth.s:2282   .text.reset_handler:00000000000010f4 $d
ARM GAS  stm32eforth.s 			page 99


       stm32eforth.s:2283   .text.reset_handler:00000000000010f8 _DIGTQ
       stm32eforth.s:2286   .text.reset_handler:0000000000001100 DIGTQ
       stm32eforth.s:2290   .text.reset_handler:000000000000110c $d
       stm32eforth.s:2291   .text.reset_handler:0000000000001110 $t
       stm32eforth.s:2293   .text.reset_handler:0000000000001118 $d
       stm32eforth.s:2294   .text.reset_handler:000000000000111c $t
       stm32eforth.s:2297   .text.reset_handler:0000000000001128 $d
       stm32eforth.s:2306   .text.reset_handler:000000000000114c DGTQ1
       stm32eforth.s:2298   .text.reset_handler:000000000000112c $t
       stm32eforth.s:2299   .text.reset_handler:0000000000001130 $d
       stm32eforth.s:2300   .text.reset_handler:0000000000001134 $t
       stm32eforth.s:2303   .text.reset_handler:0000000000001140 $d
       stm32eforth.s:2304   .text.reset_handler:0000000000001144 $t
       stm32eforth.s:2315   .text.reset_handler:000000000000115c $d
       stm32eforth.s:2316   .text.reset_handler:0000000000001160 _NUMBQ
       stm32eforth.s:2318   .text.reset_handler:0000000000001168 $t
       stm32eforth.s:2319   .text.reset_handler:0000000000001168 NUMBQ
       stm32eforth.s:2325   .text.reset_handler:000000000000117c $d
       stm32eforth.s:2326   .text.reset_handler:0000000000001180 $t
       stm32eforth.s:2331   .text.reset_handler:0000000000001194 $d
       stm32eforth.s:2332   .text.reset_handler:0000000000001198 $t
       stm32eforth.s:2334   .text.reset_handler:00000000000011a0 $d
       stm32eforth.s:2340   .text.reset_handler:00000000000011b8 NUMQ1
       stm32eforth.s:2335   .text.reset_handler:00000000000011a4 $t
       stm32eforth.s:2344   .text.reset_handler:00000000000011c4 $d
       stm32eforth.s:2345   .text.reset_handler:00000000000011c8 $t
       stm32eforth.s:2355   .text.reset_handler:00000000000011f0 $d
       stm32eforth.s:2394   .text.reset_handler:000000000000127c NUMQ6
       stm32eforth.s:2356   .text.reset_handler:00000000000011f4 $t
       stm32eforth.s:2358   .text.reset_handler:00000000000011fc NUMQ2
       stm32eforth.s:2366   .text.reset_handler:0000000000001218 $d
       stm32eforth.s:2385   .text.reset_handler:0000000000001260 NUMQ4
       stm32eforth.s:2367   .text.reset_handler:000000000000121c $t
       stm32eforth.s:2375   .text.reset_handler:000000000000123c $d
       stm32eforth.s:2376   .text.reset_handler:0000000000001240 $t
       stm32eforth.s:2380   .text.reset_handler:0000000000001250 $d
       stm32eforth.s:2382   .text.reset_handler:0000000000001258 NUMQ3
       stm32eforth.s:2381   .text.reset_handler:0000000000001254 $t
       stm32eforth.s:2392   .text.reset_handler:0000000000001278 NUMQ5
       stm32eforth.s:2391   .text.reset_handler:0000000000001274 $d
       stm32eforth.s:2393   .text.reset_handler:0000000000001278 $t
       stm32eforth.s:2408   .text.reset_handler:0000000000001294 $d
       stm32eforth.s:2409   .text.reset_handler:0000000000001298 _KEY
       stm32eforth.s:2411   .text.reset_handler:000000000000129c $t
       stm32eforth.s:2412   .text.reset_handler:000000000000129c KEY
       stm32eforth.s:2414   .text.reset_handler:00000000000012a0 KEY1
       stm32eforth.s:2417   .text.reset_handler:00000000000012a8 $d
       stm32eforth.s:2419   .text.reset_handler:00000000000012ac $t
       stm32eforth.s:2421   .text.reset_handler:00000000000012b4 $d
       stm32eforth.s:2422   .text.reset_handler:00000000000012b8 $t
       stm32eforth.s:2425   .text.reset_handler:00000000000012c4 $d
       stm32eforth.s:2426   .text.reset_handler:00000000000012c8 $t
       stm32eforth.s:2431   .text.reset_handler:00000000000012cc $d
       stm32eforth.s:2432   .text.reset_handler:00000000000012d0 _SPACE
       stm32eforth.s:2434   .text.reset_handler:00000000000012d6 $t
       stm32eforth.s:2435   .text.reset_handler:00000000000012d8 SPACE
       stm32eforth.s:2444   .text.reset_handler:00000000000012e8 $d
ARM GAS  stm32eforth.s 			page 100


       stm32eforth.s:2445   .text.reset_handler:00000000000012ec _SPACS
       stm32eforth.s:2448   .text.reset_handler:00000000000012f4 SPACS
       stm32eforth.s:2451   .text.reset_handler:00000000000012fc $d
       stm32eforth.s:2452   .text.reset_handler:0000000000001300 $t
       stm32eforth.s:2457   .text.reset_handler:0000000000001310 CHAR2
       stm32eforth.s:2455   .text.reset_handler:000000000000130c CHAR1
       stm32eforth.s:2459   .text.reset_handler:0000000000001314 $d
       stm32eforth.s:2460   .text.reset_handler:0000000000001318 $t
       stm32eforth.s:2465   .text.reset_handler:000000000000131c $d
       stm32eforth.s:2466   .text.reset_handler:0000000000001320 _TYPEE
       stm32eforth.s:2469   .text.reset_handler:0000000000001328 TYPEE
       stm32eforth.s:2477   .text.reset_handler:000000000000133e TYPE2
       stm32eforth.s:2473   .text.reset_handler:0000000000001332 TYPE1
       stm32eforth.s:2479   .text.reset_handler:0000000000001342 $d
       stm32eforth.s:2480   .text.reset_handler:0000000000001346 $t
       stm32eforth.s:2486   .text.reset_handler:000000000000134e $d
       stm32eforth.s:2487   .text.reset_handler:0000000000001352 _CR
       stm32eforth.s:2490   .text.reset_handler:0000000000001358 CR
       stm32eforth.s:2493   .text.reset_handler:0000000000001360 $d
       stm32eforth.s:2494   .text.reset_handler:0000000000001364 $t
       stm32eforth.s:2496   .text.reset_handler:000000000000136c $d
       stm32eforth.s:2497   .text.reset_handler:0000000000001370 $t
       stm32eforth.s:2508   .text.reset_handler:0000000000001378 DOSTR
       stm32eforth.s:2531   .text.reset_handler:00000000000013ac STRQP
       stm32eforth.s:2543   .text.reset_handler:00000000000013b8 DOTST
       stm32eforth.s:2556   .text.reset_handler:00000000000013c8 DOTQP
       stm32eforth.s:2565   .text.reset_handler:00000000000013d8 $d
       stm32eforth.s:2566   .text.reset_handler:00000000000013dc _DOTR
       stm32eforth.s:2569   .text.reset_handler:00000000000013e0 DOTR
       stm32eforth.s:2583   .text.reset_handler:0000000000001404 $d
       stm32eforth.s:2584   .text.reset_handler:0000000000001408 _UDOTR
       stm32eforth.s:2586   .text.reset_handler:000000000000140c $t
       stm32eforth.s:2587   .text.reset_handler:000000000000140c UDOTR
       stm32eforth.s:2603   .text.reset_handler:0000000000001438 $d
       stm32eforth.s:2604   .text.reset_handler:000000000000143c _UDOT
       stm32eforth.s:2607   .text.reset_handler:0000000000001440 UDOT
       stm32eforth.s:2619   .text.reset_handler:000000000000145c $d
       stm32eforth.s:2620   .text.reset_handler:0000000000001460 _DOT
       stm32eforth.s:2622   .text.reset_handler:0000000000001462 $t
       stm32eforth.s:2623   .text.reset_handler:0000000000001464 DOT
       stm32eforth.s:2628   .text.reset_handler:0000000000001474 $d
       stm32eforth.s:2629   .text.reset_handler:0000000000001478 $t
       stm32eforth.s:2631   .text.reset_handler:0000000000001480 $d
       stm32eforth.s:2634   .text.reset_handler:000000000000148c DOT1
       stm32eforth.s:2632   .text.reset_handler:0000000000001484 $t
       stm32eforth.s:2643   .text.reset_handler:000000000000149c $d
       stm32eforth.s:2644   .text.reset_handler:00000000000014a0 _QUEST
       stm32eforth.s:2646   .text.reset_handler:00000000000014a2 $t
       stm32eforth.s:2647   .text.reset_handler:00000000000014a4 QUEST
       stm32eforth.s:2663   .text.reset_handler:00000000000014b4 PARS
       stm32eforth.s:2671   .text.reset_handler:00000000000014d0 $d
       stm32eforth.s:2739   .text.reset_handler:00000000000015c2 PARS8
       stm32eforth.s:2672   .text.reset_handler:00000000000014d4 $t
       stm32eforth.s:2678   .text.reset_handler:00000000000014ec $d
       stm32eforth.s:2700   .text.reset_handler:000000000000153c PARS3
       stm32eforth.s:2679   .text.reset_handler:00000000000014f0 $t
       stm32eforth.s:2680   .text.reset_handler:00000000000014f4 PARS1
ARM GAS  stm32eforth.s 			page 101


       stm32eforth.s:2688   .text.reset_handler:0000000000001510 $d
       stm32eforth.s:2698   .text.reset_handler:0000000000001538 PARS2
       stm32eforth.s:2689   .text.reset_handler:0000000000001514 $t
       stm32eforth.s:2691   .text.reset_handler:000000000000151c $d
       stm32eforth.s:2692   .text.reset_handler:0000000000001520 $t
       stm32eforth.s:2695   .text.reset_handler:000000000000152c $d
       stm32eforth.s:2696   .text.reset_handler:0000000000001530 $t
       stm32eforth.s:2704   .text.reset_handler:0000000000001548 PARS4
       stm32eforth.s:2715   .text.reset_handler:0000000000001570 $d
       stm32eforth.s:2717   .text.reset_handler:0000000000001578 PARS5
       stm32eforth.s:2716   .text.reset_handler:0000000000001574 $t
       stm32eforth.s:2719   .text.reset_handler:000000000000157c $d
       stm32eforth.s:2726   .text.reset_handler:0000000000001596 PARS6
       stm32eforth.s:2720   .text.reset_handler:0000000000001580 $t
       stm32eforth.s:2722   .text.reset_handler:0000000000001588 $d
       stm32eforth.s:2723   .text.reset_handler:000000000000158c $t
       stm32eforth.s:2732   .text.reset_handler:00000000000015aa PARS7
       stm32eforth.s:2748   .text.reset_handler:00000000000015d2 $d
       stm32eforth.s:2749   .text.reset_handler:00000000000015d6 _PARSE
       stm32eforth.s:2751   .text.reset_handler:00000000000015dc $t
       stm32eforth.s:2752   .text.reset_handler:00000000000015dc PARSE
       stm32eforth.s:2773   .text.reset_handler:000000000000161c $d
       stm32eforth.s:2774   .text.reset_handler:0000000000001620 _DOTPR
       stm32eforth.s:2777   .text.reset_handler:0000000000001624 DOTPR
       stm32eforth.s:2780   .text.reset_handler:000000000000162c $d
       stm32eforth.s:2781   .text.reset_handler:0000000000001630 $t
       stm32eforth.s:2788   .text.reset_handler:000000000000163c $d
       stm32eforth.s:2789   .text.reset_handler:0000000000001640 _PAREN
       stm32eforth.s:2791   .text.reset_handler:0000000000001642 $t
       stm32eforth.s:2792   .text.reset_handler:0000000000001644 PAREN
       stm32eforth.s:2795   .text.reset_handler:000000000000164c $d
       stm32eforth.s:2796   .text.reset_handler:0000000000001650 $t
       stm32eforth.s:2803   .text.reset_handler:000000000000165c $d
       stm32eforth.s:2804   .text.reset_handler:0000000000001660 _BKSLA
       stm32eforth.s:2806   .text.reset_handler:0000000000001662 $t
       stm32eforth.s:2807   .text.reset_handler:0000000000001664 BKSLA
       stm32eforth.s:2818   .text.reset_handler:000000000000167c $d
       stm32eforth.s:2819   .text.reset_handler:0000000000001680 _CHAR
       stm32eforth.s:2822   .text.reset_handler:0000000000001688 CHAR
       stm32eforth.s:2833   .text.reset_handler:00000000000016a0 $d
       stm32eforth.s:2834   .text.reset_handler:00000000000016a4 _WORDD
       stm32eforth.s:2837   .text.reset_handler:00000000000016ac WORDD
       stm32eforth.s:2848   .text.reset_handler:00000000000016c4 $d
       stm32eforth.s:2849   .text.reset_handler:00000000000016c8 _TOKEN
       stm32eforth.s:2851   .text.reset_handler:00000000000016ce $t
       stm32eforth.s:2852   .text.reset_handler:00000000000016d0 TOKEN
       stm32eforth.s:2864   .text.reset_handler:00000000000016e0 $d
       stm32eforth.s:2865   .text.reset_handler:00000000000016e4 _NAMET
       stm32eforth.s:2867   .text.reset_handler:00000000000016ea $t
       stm32eforth.s:2868   .text.reset_handler:00000000000016ec NAMET
       stm32eforth.s:2872   .text.reset_handler:00000000000016f8 $d
       stm32eforth.s:2873   .text.reset_handler:00000000000016fc $t
       stm32eforth.s:2886   .text.reset_handler:000000000000170c $d
       stm32eforth.s:2887   .text.reset_handler:0000000000001710 _SAMEQ
       stm32eforth.s:2889   .text.reset_handler:0000000000001716 $t
       stm32eforth.s:2890   .text.reset_handler:0000000000001718 SAMEQ
       stm32eforth.s:2910   .text.reset_handler:0000000000001760 SAME2
ARM GAS  stm32eforth.s 			page 102


       stm32eforth.s:2894   .text.reset_handler:0000000000001724 SAME1
       stm32eforth.s:2906   .text.reset_handler:0000000000001750 $d
       stm32eforth.s:2907   .text.reset_handler:0000000000001754 $t
       stm32eforth.s:2912   .text.reset_handler:0000000000001764 $d
       stm32eforth.s:2913   .text.reset_handler:0000000000001768 $t
       stm32eforth.s:2914   .text.reset_handler:000000000000176c $d
       stm32eforth.s:2915   .text.reset_handler:0000000000001770 $t
       stm32eforth.s:2927   .text.reset_handler:0000000000001774 FIND
       stm32eforth.s:2936   .text.reset_handler:0000000000001794 FIND1
       stm32eforth.s:2939   .text.reset_handler:000000000000179c $d
       stm32eforth.s:2959   .text.reset_handler:00000000000017e4 FIND6
       stm32eforth.s:2940   .text.reset_handler:00000000000017a0 $t
       stm32eforth.s:2943   .text.reset_handler:00000000000017ac $d
       stm32eforth.s:2944   .text.reset_handler:00000000000017b0 $t
       stm32eforth.s:2948   .text.reset_handler:00000000000017c0 $d
       stm32eforth.s:2952   .text.reset_handler:00000000000017d0 FIND2
       stm32eforth.s:2949   .text.reset_handler:00000000000017c4 $t
       stm32eforth.s:2957   .text.reset_handler:00000000000017e0 FIND3
       stm32eforth.s:2966   .text.reset_handler:00000000000017fc FIND4
       stm32eforth.s:2968   .text.reset_handler:0000000000001800 $d
       stm32eforth.s:2973   .text.reset_handler:0000000000001814 FIND5
       stm32eforth.s:2969   .text.reset_handler:0000000000001804 $t
       stm32eforth.s:2987   .text.reset_handler:0000000000001838 $d
       stm32eforth.s:2988   .text.reset_handler:000000000000183c _NAMEQ
       stm32eforth.s:2990   .text.reset_handler:0000000000001842 $t
       stm32eforth.s:2991   .text.reset_handler:0000000000001844 NAMEQ
       stm32eforth.s:3008   .text.reset_handler:0000000000001858 BKSP
       stm32eforth.s:3017   .text.reset_handler:0000000000001878 $d
       stm32eforth.s:3030   .text.reset_handler:00000000000018a0 BACK1
       stm32eforth.s:3018   .text.reset_handler:000000000000187c $t
       stm32eforth.s:3019   .text.reset_handler:0000000000001880 $d
       stm32eforth.s:3020   .text.reset_handler:0000000000001884 $t
       stm32eforth.s:3027   .text.reset_handler:0000000000001898 $d
       stm32eforth.s:3028   .text.reset_handler:000000000000189c $t
       stm32eforth.s:3040   .text.reset_handler:00000000000018a4 TAP
       stm32eforth.s:3057   .text.reset_handler:00000000000018c0 KTAP
       stm32eforth.s:3058   .text.reset_handler:00000000000018c0 TTAP
       stm32eforth.s:3062   .text.reset_handler:00000000000018cc $d
       stm32eforth.s:3063   .text.reset_handler:00000000000018d0 $t
       stm32eforth.s:3065   .text.reset_handler:00000000000018d8 $d
       stm32eforth.s:3078   .text.reset_handler:0000000000001908 KTAP2
       stm32eforth.s:3066   .text.reset_handler:00000000000018dc $t
       stm32eforth.s:3067   .text.reset_handler:00000000000018e0 $d
       stm32eforth.s:3068   .text.reset_handler:00000000000018e4 $t
       stm32eforth.s:3070   .text.reset_handler:00000000000018ec $d
       stm32eforth.s:3075   .text.reset_handler:0000000000001900 KTAP1
       stm32eforth.s:3071   .text.reset_handler:00000000000018f0 $t
       stm32eforth.s:3074   .text.reset_handler:00000000000018fc $d
       stm32eforth.s:3076   .text.reset_handler:0000000000001900 $t
       stm32eforth.s:3088   .text.reset_handler:000000000000191c $d
       stm32eforth.s:3089   .text.reset_handler:0000000000001920 _ACCEP
       stm32eforth.s:3092   .text.reset_handler:0000000000001928 ACCEP
       stm32eforth.s:3097   .text.reset_handler:0000000000001938 ACCP1
       stm32eforth.s:3101   .text.reset_handler:0000000000001944 $d
       stm32eforth.s:3117   .text.reset_handler:0000000000001974 ACCP4
       stm32eforth.s:3102   .text.reset_handler:0000000000001948 $t
       stm32eforth.s:3106   .text.reset_handler:0000000000001958 $d
ARM GAS  stm32eforth.s 			page 103


       stm32eforth.s:3107   .text.reset_handler:000000000000195c $t
       stm32eforth.s:3109   .text.reset_handler:0000000000001964 $d
       stm32eforth.s:3112   .text.reset_handler:000000000000196e ACCP2
       stm32eforth.s:3110   .text.reset_handler:0000000000001968 $t
       stm32eforth.s:3115   .text.reset_handler:0000000000001972 ACCP3
       stm32eforth.s:3126   .text.reset_handler:0000000000001984 $d
       stm32eforth.s:3127   .text.reset_handler:0000000000001988 _QUERY
       stm32eforth.s:3129   .text.reset_handler:000000000000198e $t
       stm32eforth.s:3130   .text.reset_handler:0000000000001990 QUERY
       stm32eforth.s:3134   .text.reset_handler:000000000000199c $d
       stm32eforth.s:3135   .text.reset_handler:00000000000019a0 $t
       stm32eforth.s:3140   .text.reset_handler:00000000000019b4 $d
       stm32eforth.s:3141   .text.reset_handler:00000000000019b8 $t
       stm32eforth.s:3151   .text.reset_handler:00000000000019c4 $d
       stm32eforth.s:3152   .text.reset_handler:00000000000019c8 _ABORT
       stm32eforth.s:3154   .text.reset_handler:00000000000019ce $t
       stm32eforth.s:3155   .text.reset_handler:00000000000019d0 ABORT
       stm32eforth.s:3161   .text.reset_handler:00000000000019e4 $d
       stm32eforth.s:3162   .text.reset_handler:00000000000019e8 $t
       stm32eforth.s:3308   .text.reset_handler:0000000000001b58 PRESE
       stm32eforth.s:3323   .text.reset_handler:0000000000001b70 QUIT
       stm32eforth.s:3174   .text.reset_handler:00000000000019f8 ABORQ
       stm32eforth.s:3177   .text.reset_handler:0000000000001a00 $d
       stm32eforth.s:3183   .text.reset_handler:0000000000001a18 ABOR1
       stm32eforth.s:3178   .text.reset_handler:0000000000001a04 $t
       stm32eforth.s:3194   .text.reset_handler:0000000000001a24 $d
       stm32eforth.s:3195   .text.reset_handler:0000000000001a28 _INTER
       stm32eforth.s:3197   .text.reset_handler:0000000000001a34 $t
       stm32eforth.s:3203   .text.reset_handler:0000000000001a44 $d
       stm32eforth.s:3214   .text.reset_handler:0000000000001a74 INTE1
       stm32eforth.s:3204   .text.reset_handler:0000000000001a48 $t
       stm32eforth.s:3206   .text.reset_handler:0000000000001a50 $d
       stm32eforth.s:3207   .text.reset_handler:0000000000001a54 $t
       stm32eforth.s:3209   .text.reset_handler:0000000000001a5c $d
       stm32eforth.s:3211   .text.reset_handler:0000000000001a6a $t
       stm32eforth.s:3217   .text.reset_handler:0000000000001a7c $d
       stm32eforth.s:3219   .text.reset_handler:0000000000001a84 INTE2
       stm32eforth.s:3218   .text.reset_handler:0000000000001a80 $t
       stm32eforth.s:3225   .text.reset_handler:0000000000001a88 $d
       stm32eforth.s:3226   .text.reset_handler:0000000000001a8c _LBRAC
       stm32eforth.s:3228   .text.reset_handler:0000000000001a8e $t
       stm32eforth.s:3229   .text.reset_handler:0000000000001a90 LBRAC
       stm32eforth.s:3232   .text.reset_handler:0000000000001a98 $d
       stm32eforth.s:3233   .text.reset_handler:0000000000001a9c $t
       stm32eforth.s:3240   .text.reset_handler:0000000000001aa8 $d
       stm32eforth.s:3241   .text.reset_handler:0000000000001aac _DOTOK
       stm32eforth.s:3243   .text.reset_handler:0000000000001ab0 $t
       stm32eforth.s:3244   .text.reset_handler:0000000000001ab0 DOTOK
       stm32eforth.s:3247   .text.reset_handler:0000000000001ab8 $d
       stm32eforth.s:3248   .text.reset_handler:0000000000001abc $t
       stm32eforth.s:3252   .text.reset_handler:0000000000001acc $d
       stm32eforth.s:3256   .text.reset_handler:0000000000001ad8 DOTO1
       stm32eforth.s:3253   .text.reset_handler:0000000000001ad0 $t
       stm32eforth.s:3254   .text.reset_handler:0000000000001ad4 $d
       stm32eforth.s:3257   .text.reset_handler:0000000000001ad8 $t
       stm32eforth.s:3263   .text.reset_handler:0000000000001ae0 $d
       stm32eforth.s:3264   .text.reset_handler:0000000000001ae4 _QSTAC
ARM GAS  stm32eforth.s 			page 104


       stm32eforth.s:3267   .text.reset_handler:0000000000001aec QSTAC
       stm32eforth.s:3272   .text.reset_handler:0000000000001afc $d
       stm32eforth.s:3280   .text.reset_handler:0000000000001b0c $d
       stm32eforth.s:3281   .text.reset_handler:0000000000001b10 _EVAL
       stm32eforth.s:3284   .text.reset_handler:0000000000001b18 EVAL
       stm32eforth.s:3286   .text.reset_handler:0000000000001b1c EVAL1
       stm32eforth.s:3291   .text.reset_handler:0000000000001b2c $d
       stm32eforth.s:3296   .text.reset_handler:0000000000001b40 EVAL2
       stm32eforth.s:3292   .text.reset_handler:0000000000001b30 $t
       stm32eforth.s:3304   .text.reset_handler:0000000000001b4c $d
       stm32eforth.s:3305   .text.reset_handler:0000000000001b50 _PRESE
       stm32eforth.s:3319   .text.reset_handler:0000000000001b66 $d
       stm32eforth.s:3320   .text.reset_handler:0000000000001b6a _QUIT
       stm32eforth.s:3327   .text.reset_handler:0000000000001b7c QUIT1
       stm32eforth.s:3329   .text.reset_handler:0000000000001b80 QUIT2
       stm32eforth.s:3333   .text.reset_handler:0000000000001b8c $d
       stm32eforth.s:3342   .text.reset_handler:0000000000001b94 _UNLOCK
       stm32eforth.s:3345   .text.reset_handler:0000000000001b9c UNLOCK
       stm32eforth.s:3348   .text.reset_handler:0000000000001ba4 $d
       stm32eforth.s:3369   .text.reset_handler:0000000000001bc4 LOCK
       stm32eforth.s:3705   .text.reset_handler:0000000000001f80 flash_regs
       stm32eforth.s:3349   .text.reset_handler:0000000000001ba8 $t
       stm32eforth.s:3376   .text.reset_handler:0000000000001bd0 WAIT_BSY
       stm32eforth.s:3378   .text.reset_handler:0000000000001bd2 WAIT1
       stm32eforth.s:3389   .text.reset_handler:0000000000001bdc $d
       stm32eforth.s:3390   .text.reset_handler:0000000000001be0 _EPAGE
       stm32eforth.s:3394   .text.reset_handler:0000000000001bec EPAGE
       stm32eforth.s:3398   .text.reset_handler:0000000000001bf8 $d
       stm32eforth.s:3399   .text.reset_handler:0000000000001bfc $t
       stm32eforth.s:3409   .text.reset_handler:0000000000001c1a $d
       stm32eforth.s:3410   .text.reset_handler:0000000000001c1e $t
       stm32eforth.s:3414   .text.reset_handler:0000000000001c2c $d
       stm32eforth.s:3416   .text.reset_handler:0000000000001c3a $t
       stm32eforth.s:3421   .text.reset_handler:0000000000001c40 HWORD_WRITE
       stm32eforth.s:3434   .text.reset_handler:0000000000001c62 $d
       stm32eforth.s:3435   .text.reset_handler:0000000000001c66 $t
       stm32eforth.s:3436   .text.reset_handler:0000000000001c6a $d
       stm32eforth.s:3438   .text.reset_handler:0000000000001c78 $t
       stm32eforth.s:3447   .text.reset_handler:0000000000001c7c $d
       stm32eforth.s:3448   .text.reset_handler:0000000000001c80 _ISTOR
       stm32eforth.s:3451   .text.reset_handler:0000000000001c84 ISTOR
       stm32eforth.s:3455   .text.reset_handler:0000000000001c90 $d
       stm32eforth.s:3456   .text.reset_handler:0000000000001c94 $t
       stm32eforth.s:3467   .text.reset_handler:0000000000001cc0 $d
       stm32eforth.s:3468   .text.reset_handler:0000000000001cc4 $t
       stm32eforth.s:3474   .text.reset_handler:0000000000001ccc $d
       stm32eforth.s:3475   .text.reset_handler:0000000000001cd0 _IMG_SIZE
       stm32eforth.s:3478   .text.reset_handler:0000000000001cdc IMG_SIZE
       stm32eforth.s:3481   .text.reset_handler:0000000000001ce4 $d
       stm32eforth.s:3482   .text.reset_handler:0000000000001ce8 $t
       stm32eforth.s:3487   .text.reset_handler:0000000000001cfc $d
       stm32eforth.s:3488   .text.reset_handler:0000000000001d00 $t
       stm32eforth.s:3491   .text.reset_handler:0000000000001d0c $d
       stm32eforth.s:3492   .text.reset_handler:0000000000001d10 $t
       stm32eforth.s:3498   .text.reset_handler:0000000000001d18 $d
       stm32eforth.s:3499   .text.reset_handler:0000000000001d1c _IMGQ
       stm32eforth.s:3502   .text.reset_handler:0000000000001d24 IMGQ
ARM GAS  stm32eforth.s 			page 105


       stm32eforth.s:3518   .text.reset_handler:0000000000001d4c IMG_ADR
       stm32eforth.s:3514   .text.reset_handler:0000000000001d40 $d
       stm32eforth.s:3515   .text.reset_handler:0000000000001d44 _IMG_ADR
       stm32eforth.s:3517   .text.reset_handler:0000000000001d4c $t
       stm32eforth.s:3529   .text.reset_handler:0000000000001d68 $d
       stm32eforth.s:3530   .text.reset_handler:0000000000001d6c _LOAD_IMG
       stm32eforth.s:3533   .text.reset_handler:0000000000001d78 LOAD_IMG
       stm32eforth.s:3538   .text.reset_handler:0000000000001d88 $d
       stm32eforth.s:3540   .text.reset_handler:0000000000001d8c $t
       stm32eforth.s:3567   .text.reset_handler:0000000000001ddc $d
       stm32eforth.s:3568   .text.reset_handler:0000000000001de0 _ERASE_MPG
       stm32eforth.s:3570   .text.reset_handler:0000000000001dea $t
       stm32eforth.s:3571   .text.reset_handler:0000000000001dec ERASE_MPG
       stm32eforth.s:3633   .text.reset_handler:0000000000001e9c PG_TO_ADR
       stm32eforth.s:3576   .text.reset_handler:0000000000001dfc $d
       stm32eforth.s:3578   .text.reset_handler:0000000000001e00 $t
       stm32eforth.s:3585   .text.reset_handler:0000000000001e18 $d
       stm32eforth.s:3586   .text.reset_handler:0000000000001e1c $t
       stm32eforth.s:3591   .text.reset_handler:0000000000001e24 $d
       stm32eforth.s:3592   .text.reset_handler:0000000000001e28 _FLSH_WR
       stm32eforth.s:3595   .text.reset_handler:0000000000001e30 FLSH_WR
       stm32eforth.s:3596   .text.reset_handler:0000000000001e30 $t
       stm32eforth.s:3599   .text.reset_handler:0000000000001e3c $d
       stm32eforth.s:3601   .text.reset_handler:0000000000001e40 $t
       stm32eforth.s:3610   .text.reset_handler:0000000000001e64 $d
       stm32eforth.s:3611   .text.reset_handler:0000000000001e68 $t
       stm32eforth.s:3618   .text.reset_handler:0000000000001e78 $d
       stm32eforth.s:3619   .text.reset_handler:0000000000001e7c _ADR_TO_PG
       stm32eforth.s:3622   .text.reset_handler:0000000000001e84 ADR_TO_PG
       stm32eforth.s:3629   .text.reset_handler:0000000000001e8e $d
       stm32eforth.s:3630   .text.reset_handler:0000000000001e92 _PG_TO_ADR
       stm32eforth.s:3640   .text.reset_handler:0000000000001ea6 $d
       stm32eforth.s:3641   .text.reset_handler:0000000000001eaa _ERASE_IMG
       stm32eforth.s:3643   .text.reset_handler:0000000000001eb4 $t
       stm32eforth.s:3644   .text.reset_handler:0000000000001eb4 ERASE_IMG
       stm32eforth.s:3650   .text.reset_handler:0000000000001ec8 $d
       stm32eforth.s:3651   .text.reset_handler:0000000000001ecc $t
       stm32eforth.s:3655   .text.reset_handler:0000000000001edc $d
       stm32eforth.s:3656   .text.reset_handler:0000000000001ee0 $t
       stm32eforth.s:3662   .text.reset_handler:0000000000001ee8 $d
       stm32eforth.s:3663   .text.reset_handler:0000000000001eec _SAVE_IMG
       stm32eforth.s:3666   .text.reset_handler:0000000000001ef8 SAVE_IMG
       stm32eforth.s:3673   .text.reset_handler:0000000000001f10 $d
       stm32eforth.s:3674   .text.reset_handler:0000000000001f14 $t
       stm32eforth.s:3679   .text.reset_handler:0000000000001f28 $d
       stm32eforth.s:3681   .text.reset_handler:0000000000001f2c $t
       stm32eforth.s:3706   .text.reset_handler:0000000000001f80 $d
       stm32eforth.s:3717   .text.reset_handler:0000000000001f90 _TICK
       stm32eforth.s:3719   .text.reset_handler:0000000000001f92 $t
       stm32eforth.s:3720   .text.reset_handler:0000000000001f94 TICK
       stm32eforth.s:3725   .text.reset_handler:0000000000001fa4 $d
       stm32eforth.s:3727   .text.reset_handler:0000000000001fac TICK1
       stm32eforth.s:3726   .text.reset_handler:0000000000001fa8 $t
       stm32eforth.s:3732   .text.reset_handler:0000000000001fb0 $d
       stm32eforth.s:3733   .text.reset_handler:0000000000001fb4 _ALLOT
       stm32eforth.s:3735   .text.reset_handler:0000000000001fba $t
       stm32eforth.s:3736   .text.reset_handler:0000000000001fbc ALLOT
ARM GAS  stm32eforth.s 			page 106


       stm32eforth.s:3745   .text.reset_handler:0000000000001fcc $d
       stm32eforth.s:3746   .text.reset_handler:0000000000001fd0 _COMMA
       stm32eforth.s:3747   .text.reset_handler:0000000000001fd2 $t
       stm32eforth.s:3748   .text.reset_handler:0000000000001fd4 COMMA
       stm32eforth.s:3761   .text.reset_handler:0000000000001ff4 $d
       stm32eforth.s:3762   .text.reset_handler:0000000000001ff8 _BCOMP
       stm32eforth.s:3764   .text.reset_handler:0000000000002002 $t
       stm32eforth.s:3765   .text.reset_handler:0000000000002004 BCOMP
       stm32eforth.s:3774   .text.reset_handler:0000000000002014 $d
       stm32eforth.s:3775   .text.reset_handler:0000000000002018 _COMPI
       stm32eforth.s:3777   .text.reset_handler:0000000000002020 $t
       stm32eforth.s:3778   .text.reset_handler:0000000000002020 COMPI
       stm32eforth.s:4210   .text.reset_handler:000000000000241c CALLC
       stm32eforth.s:3793   .text.reset_handler:0000000000002048 $d
       stm32eforth.s:3794   .text.reset_handler:000000000000204c _LITER
       stm32eforth.s:3796   .text.reset_handler:0000000000002054 $t
       stm32eforth.s:3797   .text.reset_handler:0000000000002054 LITER
       stm32eforth.s:3800   .text.reset_handler:000000000000205c $d
       stm32eforth.s:3801   .text.reset_handler:0000000000002060 $t
       stm32eforth.s:3811   .text.reset_handler:0000000000002068 STRCQ
       stm32eforth.s:3814   .text.reset_handler:0000000000002070 $d
       stm32eforth.s:3815   .text.reset_handler:0000000000002074 $t
       stm32eforth.s:3818   .text.reset_handler:0000000000002080 $d
       stm32eforth.s:3819   .text.reset_handler:0000000000002084 $t
       stm32eforth.s:3833   .text.reset_handler:00000000000020a0 $d
       stm32eforth.s:3834   .text.reset_handler:00000000000020a4 _FOR
       stm32eforth.s:3836   .text.reset_handler:00000000000020a8 $t
       stm32eforth.s:3837   .text.reset_handler:00000000000020a8 FOR
       stm32eforth.s:3840   .text.reset_handler:00000000000020b0 $d
       stm32eforth.s:3841   .text.reset_handler:00000000000020b4 $t
       stm32eforth.s:3847   .text.reset_handler:00000000000020bc $d
       stm32eforth.s:3848   .text.reset_handler:00000000000020c0 _BEGIN
       stm32eforth.s:3850   .text.reset_handler:00000000000020c6 $t
       stm32eforth.s:3851   .text.reset_handler:00000000000020c8 BEGIN
       stm32eforth.s:3859   .text.reset_handler:00000000000020d4 $d
       stm32eforth.s:3860   .text.reset_handler:00000000000020d8 _NEXT
       stm32eforth.s:3863   .text.reset_handler:00000000000020e0 NEXT
       stm32eforth.s:3866   .text.reset_handler:00000000000020e8 $d
       stm32eforth.s:3867   .text.reset_handler:00000000000020ec $t
       stm32eforth.s:3873   .text.reset_handler:00000000000020f4 $d
       stm32eforth.s:3874   .text.reset_handler:00000000000020f8 _UNTIL
       stm32eforth.s:3876   .text.reset_handler:00000000000020fe $t
       stm32eforth.s:3877   .text.reset_handler:0000000000002100 UNTIL
       stm32eforth.s:3880   .text.reset_handler:0000000000002108 $d
       stm32eforth.s:3881   .text.reset_handler:000000000000210c $t
       stm32eforth.s:3887   .text.reset_handler:0000000000002114 $d
       stm32eforth.s:3888   .text.reset_handler:0000000000002118 _AGAIN
       stm32eforth.s:3890   .text.reset_handler:000000000000211e $t
       stm32eforth.s:3891   .text.reset_handler:0000000000002120 AGAIN
       stm32eforth.s:3894   .text.reset_handler:0000000000002128 $d
       stm32eforth.s:3895   .text.reset_handler:000000000000212c $t
       stm32eforth.s:3901   .text.reset_handler:0000000000002134 $d
       stm32eforth.s:3902   .text.reset_handler:0000000000002138 _IFF
       stm32eforth.s:3905   .text.reset_handler:000000000000213c IFF
       stm32eforth.s:3908   .text.reset_handler:0000000000002144 $d
       stm32eforth.s:3909   .text.reset_handler:0000000000002148 $t
       stm32eforth.s:3911   .text.reset_handler:0000000000002150 $d
ARM GAS  stm32eforth.s 			page 107


       stm32eforth.s:3912   .text.reset_handler:0000000000002154 $t
       stm32eforth.s:3919   .text.reset_handler:0000000000002160 $d
       stm32eforth.s:3920   .text.reset_handler:0000000000002164 _AHEAD
       stm32eforth.s:3922   .text.reset_handler:000000000000216a $t
       stm32eforth.s:3923   .text.reset_handler:000000000000216c AHEAD
       stm32eforth.s:3926   .text.reset_handler:0000000000002174 $d
       stm32eforth.s:3927   .text.reset_handler:0000000000002178 $t
       stm32eforth.s:3929   .text.reset_handler:0000000000002180 $d
       stm32eforth.s:3930   .text.reset_handler:0000000000002184 $t
       stm32eforth.s:3937   .text.reset_handler:0000000000002190 $d
       stm32eforth.s:3938   .text.reset_handler:0000000000002194 _REPEA
       stm32eforth.s:3941   .text.reset_handler:000000000000219c REPEA
       stm32eforth.s:3952   .text.reset_handler:00000000000021b4 $d
       stm32eforth.s:3953   .text.reset_handler:00000000000021b8 _THENN
       stm32eforth.s:3956   .text.reset_handler:00000000000021c0 THENN
       stm32eforth.s:3966   .text.reset_handler:00000000000021d4 $d
       stm32eforth.s:3967   .text.reset_handler:00000000000021d8 _AFT
       stm32eforth.s:3969   .text.reset_handler:00000000000021dc $t
       stm32eforth.s:3970   .text.reset_handler:00000000000021dc AFT
       stm32eforth.s:3981   .text.reset_handler:00000000000021f4 $d
       stm32eforth.s:3982   .text.reset_handler:00000000000021f8 _ELSEE
       stm32eforth.s:3985   .text.reset_handler:0000000000002200 ELSEE
       stm32eforth.s:3995   .text.reset_handler:0000000000002214 $d
       stm32eforth.s:3996   .text.reset_handler:0000000000002218 _WHILE
       stm32eforth.s:3998   .text.reset_handler:000000000000221e $t
       stm32eforth.s:3999   .text.reset_handler:0000000000002220 WHILE
       stm32eforth.s:4008   .text.reset_handler:0000000000002230 $d
       stm32eforth.s:4009   .text.reset_handler:0000000000002234 _ABRTQ
       stm32eforth.s:4012   .text.reset_handler:000000000000223c ABRTQ
       stm32eforth.s:4015   .text.reset_handler:0000000000002244 $d
       stm32eforth.s:4016   .text.reset_handler:0000000000002248 $t
       stm32eforth.s:4022   .text.reset_handler:0000000000002250 $d
       stm32eforth.s:4023   .text.reset_handler:0000000000002254 _STRQ
       stm32eforth.s:4026   .text.reset_handler:0000000000002258 STRQ
       stm32eforth.s:4029   .text.reset_handler:0000000000002260 $d
       stm32eforth.s:4030   .text.reset_handler:0000000000002264 $t
       stm32eforth.s:4036   .text.reset_handler:000000000000226c $d
       stm32eforth.s:4037   .text.reset_handler:0000000000002270 _DOTQ
       stm32eforth.s:4040   .text.reset_handler:0000000000002274 DOTQ
       stm32eforth.s:4043   .text.reset_handler:000000000000227c $d
       stm32eforth.s:4044   .text.reset_handler:0000000000002280 $t
       stm32eforth.s:4053   .text.reset_handler:0000000000002288 $d
       stm32eforth.s:4054   .text.reset_handler:000000000000228c _UNIQU
       stm32eforth.s:4056   .text.reset_handler:0000000000002294 $t
       stm32eforth.s:4057   .text.reset_handler:0000000000002294 UNIQU
       stm32eforth.s:4062   .text.reset_handler:00000000000022a4 $d
       stm32eforth.s:4070   .text.reset_handler:00000000000022c0 UNIQ1
       stm32eforth.s:4063   .text.reset_handler:00000000000022a8 $t
       stm32eforth.s:4064   .text.reset_handler:00000000000022ac $d
       stm32eforth.s:4066   .text.reset_handler:00000000000022b4 $t
       stm32eforth.s:4081   .text.reset_handler:00000000000022c8 SNAME
       stm32eforth.s:4086   .text.reset_handler:00000000000022d8 $d
       stm32eforth.s:4100   .text.reset_handler:0000000000002310 SNAM1
       stm32eforth.s:4087   .text.reset_handler:00000000000022dc $t
       stm32eforth.s:4102   .text.reset_handler:0000000000002314 $d
       stm32eforth.s:4104   .text.reset_handler:000000000000231c $t
       stm32eforth.s:4109   .text.reset_handler:0000000000002320 $d
ARM GAS  stm32eforth.s 			page 108


       stm32eforth.s:4110   .text.reset_handler:0000000000002324 _SCOMP
       stm32eforth.s:4112   .text.reset_handler:000000000000232e $t
       stm32eforth.s:4113   .text.reset_handler:0000000000002330 SCOMP
       stm32eforth.s:4118   .text.reset_handler:0000000000002340 $d
       stm32eforth.s:4130   .text.reset_handler:000000000000236c SCOM2
       stm32eforth.s:4119   .text.reset_handler:0000000000002344 $t
       stm32eforth.s:4121   .text.reset_handler:000000000000234c $d
       stm32eforth.s:4122   .text.reset_handler:0000000000002350 $t
       stm32eforth.s:4124   .text.reset_handler:0000000000002358 $d
       stm32eforth.s:4127   .text.reset_handler:0000000000002364 SCOM1
       stm32eforth.s:4125   .text.reset_handler:000000000000235c $t
       stm32eforth.s:4133   .text.reset_handler:0000000000002374 $d
       stm32eforth.s:4136   .text.reset_handler:0000000000002380 SCOM3
       stm32eforth.s:4134   .text.reset_handler:0000000000002378 $t
       stm32eforth.s:4143   .text.reset_handler:0000000000002388 COLON_ABORT
       stm32eforth.s:4159   .text.reset_handler:00000000000023b4 $d
       stm32eforth.s:4160   .text.reset_handler:00000000000023b8 _OVERT
       stm32eforth.s:4162   .text.reset_handler:00000000000023be $t
       stm32eforth.s:4163   .text.reset_handler:00000000000023c0 OVERT
       stm32eforth.s:4174   .text.reset_handler:00000000000023d8 $d
       stm32eforth.s:4175   .text.reset_handler:00000000000023dc _SEMIS
       stm32eforth.s:4177   .text.reset_handler:00000000000023de $t
       stm32eforth.s:4178   .text.reset_handler:00000000000023e0 SEMIS
       stm32eforth.s:4190   .text.reset_handler:00000000000023fc $d
       stm32eforth.s:4191   .text.reset_handler:0000000000002400 _RBRAC
       stm32eforth.s:4193   .text.reset_handler:0000000000002402 $t
       stm32eforth.s:4194   .text.reset_handler:0000000000002404 RBRAC
       stm32eforth.s:4197   .text.reset_handler:000000000000240c $d
       stm32eforth.s:4198   .text.reset_handler:0000000000002410 $t
       stm32eforth.s:4231   .text.reset_handler:0000000000002456 $d
       stm32eforth.s:4232   .text.reset_handler:000000000000245a _COLON
       stm32eforth.s:4234   .text.reset_handler:000000000000245c $t
       stm32eforth.s:4235   .text.reset_handler:000000000000245c COLON
       stm32eforth.s:4248   .text.reset_handler:000000000000247c $d
       stm32eforth.s:4249   .text.reset_handler:0000000000002480 _IMMED
       stm32eforth.s:4251   .text.reset_handler:000000000000248a $t
       stm32eforth.s:4252   .text.reset_handler:000000000000248c IMMED
       stm32eforth.s:4255   .text.reset_handler:0000000000002494 $d
       stm32eforth.s:4256   .text.reset_handler:0000000000002498 $t
       stm32eforth.s:4271   .text.reset_handler:00000000000024b8 $d
       stm32eforth.s:4272   .text.reset_handler:00000000000024bc _CONST
       stm32eforth.s:4275   .text.reset_handler:00000000000024c8 CONST
       stm32eforth.s:4284   .text.reset_handler:00000000000024e8 $d
       stm32eforth.s:4285   .text.reset_handler:00000000000024ec $t
       stm32eforth.s:4292   .text.reset_handler:00000000000024f8 $d
       stm32eforth.s:4293   .text.reset_handler:00000000000024fc _CREAT
       stm32eforth.s:4296   .text.reset_handler:0000000000002504 CREAT
       stm32eforth.s:4305   .text.reset_handler:0000000000002524 $d
       stm32eforth.s:4306   .text.reset_handler:0000000000002528 $t
       stm32eforth.s:4312   .text.reset_handler:0000000000002530 $d
       stm32eforth.s:4313   .text.reset_handler:0000000000002534 _VARIA
       stm32eforth.s:4316   .text.reset_handler:0000000000002540 VARIA
       stm32eforth.s:4320   .text.reset_handler:000000000000254c $d
       stm32eforth.s:4321   .text.reset_handler:0000000000002550 $t
       stm32eforth.s:4334   .text.reset_handler:0000000000002558 DMP
       stm32eforth.s:4338   .text.reset_handler:0000000000002564 $d
       stm32eforth.s:4339   .text.reset_handler:0000000000002568 $t
ARM GAS  stm32eforth.s 			page 109


       stm32eforth.s:4350   .text.reset_handler:0000000000002590 PDUM2
       stm32eforth.s:4343   .text.reset_handler:0000000000002578 PDUM1
       stm32eforth.s:4347   .text.reset_handler:0000000000002584 $d
       stm32eforth.s:4348   .text.reset_handler:0000000000002588 $t
       stm32eforth.s:4352   .text.reset_handler:0000000000002594 $d
       stm32eforth.s:4353   .text.reset_handler:0000000000002598 $t
       stm32eforth.s:4358   .text.reset_handler:000000000000259c $d
       stm32eforth.s:4359   .text.reset_handler:00000000000025a0 _DUMP
       stm32eforth.s:4362   .text.reset_handler:00000000000025a8 DUMP
       stm32eforth.s:4369   .text.reset_handler:00000000000025c0 $d
       stm32eforth.s:4370   .text.reset_handler:00000000000025c4 $t
       stm32eforth.s:4384   .text.reset_handler:00000000000025f8 DUMP4
       stm32eforth.s:4373   .text.reset_handler:00000000000025d0 DUMP1
       stm32eforth.s:4376   .text.reset_handler:00000000000025d8 $d
       stm32eforth.s:4377   .text.reset_handler:00000000000025dc $t
       stm32eforth.s:4386   .text.reset_handler:00000000000025fc $d
       stm32eforth.s:4387   .text.reset_handler:0000000000002600 DUMP3
       stm32eforth.s:4388   .text.reset_handler:0000000000002600 $t
       stm32eforth.s:4397   .text.reset_handler:0000000000002614 $d
       stm32eforth.s:4398   .text.reset_handler:0000000000002618 _DOTS
       stm32eforth.s:4402   .text.reset_handler:000000000000261c DOTS
       stm32eforth.s:4412   .text.reset_handler:000000000000263c DOTS2
       stm32eforth.s:4408   .text.reset_handler:0000000000002630 DOTS1
       stm32eforth.s:4414   .text.reset_handler:0000000000002640 $d
       stm32eforth.s:4415   .text.reset_handler:0000000000002644 $t
       stm32eforth.s:4421   .text.reset_handler:000000000000264c $d
       stm32eforth.s:4422   .text.reset_handler:0000000000002650 _TNAME
       stm32eforth.s:4424   .text.reset_handler:0000000000002656 $t
       stm32eforth.s:4425   .text.reset_handler:0000000000002658 TNAME
       stm32eforth.s:4430   .text.reset_handler:0000000000002668 TNAM1
       stm32eforth.s:4433   .text.reset_handler:0000000000002670 $d
       stm32eforth.s:4443   .text.reset_handler:0000000000002698 TNAM2
       stm32eforth.s:4434   .text.reset_handler:0000000000002674 $t
       stm32eforth.s:4439   .text.reset_handler:0000000000002688 $d
       stm32eforth.s:4440   .text.reset_handler:000000000000268c $t
       stm32eforth.s:4451   .text.reset_handler:00000000000026a4 $d
       stm32eforth.s:4452   .text.reset_handler:00000000000026a8 _DOTID
       stm32eforth.s:4454   .text.reset_handler:00000000000026ac $t
       stm32eforth.s:4455   .text.reset_handler:00000000000026ac DOTID
       stm32eforth.s:4459   .text.reset_handler:00000000000026b8 $d
       stm32eforth.s:4466   .text.reset_handler:00000000000026d4 DOTI1
       stm32eforth.s:4460   .text.reset_handler:00000000000026bc $t
       stm32eforth.s:4462   .text.reset_handler:00000000000026c4 $d
       stm32eforth.s:4463   .text.reset_handler:00000000000026c8 $t
       stm32eforth.s:4468   .text.reset_handler:00000000000026d8 $d
       stm32eforth.s:4470   .text.reset_handler:00000000000026e2 $t
       stm32eforth.s:4473   *ABS*:0000000000000000 WANT_SEE
       stm32eforth.s:4557   .text.reset_handler:00000000000026e8 $d
       stm32eforth.s:4559   .text.reset_handler:00000000000026ec _WORDS
       stm32eforth.s:4561   .text.reset_handler:00000000000026f2 $t
       stm32eforth.s:4562   .text.reset_handler:00000000000026f4 WORDS
       stm32eforth.s:4567   .text.reset_handler:0000000000002704 WORS1
       stm32eforth.s:4570   .text.reset_handler:000000000000270c $d
       stm32eforth.s:4577   .text.reset_handler:0000000000002728 WORS2
       stm32eforth.s:4571   .text.reset_handler:0000000000002710 $t
       stm32eforth.s:4590   .text.reset_handler:000000000000272c VERSN
       stm32eforth.s:4593   .text.reset_handler:0000000000002734 $d
ARM GAS  stm32eforth.s 			page 110


       stm32eforth.s:4594   .text.reset_handler:0000000000002738 $t
       stm32eforth.s:4599   .text.reset_handler:000000000000273c $d
       stm32eforth.s:4600   .text.reset_handler:0000000000002740 _HI
       stm32eforth.s:4607   .text.reset_handler:0000000000002750 $d
       stm32eforth.s:4609   .text.reset_handler:0000000000002768 $t
       stm32eforth.s:4618   .text.reset_handler:0000000000002788 $d
       stm32eforth.s:4619   .text.reset_handler:000000000000278c $t
       stm32eforth.s:4631   .text.reset_handler:00000000000027ac $d
       stm32eforth.s:4637   .text.reset_handler:00000000000027b8 $t
       stm32eforth.s:4644   .text.reset_handler:00000000000027d2 COLD1
       stm32eforth.s:4646   .text.reset_handler:00000000000027d6 $d
       stm32eforth.s:4647   .text.reset_handler:00000000000027da $t
       stm32eforth.s:4649   .text.reset_handler:00000000000027e2 $d
       stm32eforth.s:4650   .text.reset_handler:00000000000027e6 $t
       stm32eforth.s:4651   .text.reset_handler:00000000000027ea $d
       stm32eforth.s:4652   .text.reset_handler:00000000000027ee $t
       stm32eforth.s:4653   .text.reset_handler:00000000000027f2 $d
       stm32eforth.s:4654   .text.reset_handler:00000000000027f6 $t
       stm32eforth.s:4658   .text.reset_handler:0000000000002806 $d
       stm32eforth.s:4659   .text.reset_handler:000000000000280a $t
       stm32eforth.s:4665   .text.reset_handler:000000000000281c COLD2
       stm32eforth.s:4668   .text.reset_handler:0000000000002820 $d
       stm32eforth.s:4669   .text.reset_handler:0000000000002824 $t
       stm32eforth.s:4671   .text.reset_handler:0000000000002c00 $d
       stm32eforth.s:263    .text.default_handler:0000000000000033 $d
       stm32eforth.s:263    .text.default_handler:0000000000000034 $t
       stm32eforth.s:508    .text.reset_handler:000000000000045f $d
       stm32eforth.s:508    .text.reset_handler:0000000000000460 $t
       stm32eforth.s:532    .text.reset_handler:00000000000004ab $d
       stm32eforth.s:532    .text.reset_handler:00000000000004ac $t
       stm32eforth.s:568    .text.reset_handler:00000000000004fd $d
       stm32eforth.s:568    .text.reset_handler:00000000000004fe $t
       stm32eforth.s:588    .text.reset_handler:0000000000000525 $d
       stm32eforth.s:588    .text.reset_handler:0000000000000526 $t
       stm32eforth.s:613    .text.reset_handler:0000000000000559 $d
       stm32eforth.s:613    .text.reset_handler:000000000000055a $t
       stm32eforth.s:727    .text.reset_handler:00000000000005ef $d
       stm32eforth.s:727    .text.reset_handler:00000000000005f0 $t
       stm32eforth.s:761    .text.reset_handler:000000000000061b $d
       stm32eforth.s:761    .text.reset_handler:000000000000061c $t
       stm32eforth.s:774    .text.reset_handler:000000000000062f $d
       stm32eforth.s:774    .text.reset_handler:0000000000000630 $t
       stm32eforth.s:785    .text.reset_handler:000000000000063b $d
       stm32eforth.s:785    .text.reset_handler:000000000000063c $t
       stm32eforth.s:797    .text.reset_handler:000000000000064d $d
       stm32eforth.s:797    .text.reset_handler:000000000000064e $t
       stm32eforth.s:809    .text.reset_handler:000000000000065f $d
       stm32eforth.s:809    .text.reset_handler:0000000000000660 $t
       stm32eforth.s:833    .text.reset_handler:0000000000000685 $d
       stm32eforth.s:833    .text.reset_handler:0000000000000686 $t
       stm32eforth.s:855    .text.reset_handler:00000000000006a7 $d
       stm32eforth.s:855    .text.reset_handler:00000000000006a8 $t
       stm32eforth.s:868    .text.reset_handler:00000000000006b9 $d
       stm32eforth.s:868    .text.reset_handler:00000000000006ba $t
       stm32eforth.s:880    .text.reset_handler:00000000000006cb $d
       stm32eforth.s:880    .text.reset_handler:00000000000006cc $t
       stm32eforth.s:904    .text.reset_handler:00000000000006f1 $d
ARM GAS  stm32eforth.s 			page 111


       stm32eforth.s:904    .text.reset_handler:00000000000006f2 $t
       stm32eforth.s:943    .text.reset_handler:0000000000000737 $d
       stm32eforth.s:943    .text.reset_handler:0000000000000738 $t
       stm32eforth.s:955    .text.reset_handler:000000000000074d $d
       stm32eforth.s:955    .text.reset_handler:000000000000074e $t
       stm32eforth.s:1017   .text.reset_handler:00000000000007a7 $d
       stm32eforth.s:1017   .text.reset_handler:00000000000007a8 $t
       stm32eforth.s:1031   .text.reset_handler:00000000000007bb $d
       stm32eforth.s:1031   .text.reset_handler:00000000000007bc $t
       stm32eforth.s:1042   .text.reset_handler:00000000000007c9 $d
       stm32eforth.s:1042   .text.reset_handler:00000000000007ca $t
       stm32eforth.s:1053   .text.reset_handler:00000000000007d9 $d
       stm32eforth.s:1053   .text.reset_handler:00000000000007da $t
       stm32eforth.s:1064   .text.reset_handler:00000000000007e9 $d
       stm32eforth.s:1064   .text.reset_handler:00000000000007ea $t
       stm32eforth.s:1097   .text.reset_handler:0000000000000819 $d
       stm32eforth.s:1097   .text.reset_handler:000000000000081a $t
       stm32eforth.s:1131   .text.reset_handler:000000000000084d $d
       stm32eforth.s:1131   .text.reset_handler:000000000000084e $t
       stm32eforth.s:1142   .text.reset_handler:000000000000085d $d
       stm32eforth.s:1142   .text.reset_handler:000000000000085e $t
       stm32eforth.s:1153   .text.reset_handler:000000000000086f $d
       stm32eforth.s:1153   .text.reset_handler:0000000000000870 $t
       stm32eforth.s:1192   .text.reset_handler:00000000000008ab $d
       stm32eforth.s:1192   .text.reset_handler:00000000000008ac $t
       stm32eforth.s:1205   .text.reset_handler:00000000000008bf $d
       stm32eforth.s:1205   .text.reset_handler:00000000000008c0 $t
       stm32eforth.s:1232   .text.reset_handler:00000000000008ed $d
       stm32eforth.s:1232   .text.reset_handler:00000000000008ee $t
       stm32eforth.s:1256   .text.reset_handler:0000000000000911 $d
       stm32eforth.s:1256   .text.reset_handler:0000000000000912 $t
       stm32eforth.s:1285   .text.reset_handler:000000000000093f $d
       stm32eforth.s:1285   .text.reset_handler:0000000000000940 $t
       stm32eforth.s:1358   .text.reset_handler:00000000000009af $d
       stm32eforth.s:1358   .text.reset_handler:00000000000009b0 $t
       stm32eforth.s:1373   .text.reset_handler:00000000000009c7 $d
       stm32eforth.s:1373   .text.reset_handler:00000000000009c8 $t
       stm32eforth.s:1388   .text.reset_handler:00000000000009e3 $d
       stm32eforth.s:1388   .text.reset_handler:00000000000009e4 $t
       stm32eforth.s:1460   .text.reset_handler:0000000000000a41 $d
       stm32eforth.s:1460   .text.reset_handler:0000000000000a42 $t
       stm32eforth.s:1471   .text.reset_handler:0000000000000a57 $d
       stm32eforth.s:1471   .text.reset_handler:0000000000000a58 $t
       stm32eforth.s:1494   .text.reset_handler:0000000000000a7f $d
       stm32eforth.s:1494   .text.reset_handler:0000000000000a80 $t
       stm32eforth.s:1518   .text.reset_handler:0000000000000aa7 $d
       stm32eforth.s:1518   .text.reset_handler:0000000000000aa8 $t
       stm32eforth.s:1542   .text.reset_handler:0000000000000ac5 $d
       stm32eforth.s:1542   .text.reset_handler:0000000000000ac6 $t
       stm32eforth.s:1566   .text.reset_handler:0000000000000aef $d
       stm32eforth.s:1566   .text.reset_handler:0000000000000af0 $t
       stm32eforth.s:1615   .text.reset_handler:0000000000000b41 $d
       stm32eforth.s:1615   .text.reset_handler:0000000000000b42 $t
       stm32eforth.s:1638   .text.reset_handler:0000000000000b6b $d
       stm32eforth.s:1638   .text.reset_handler:0000000000000b6c $t
       stm32eforth.s:1653   .text.reset_handler:0000000000000b85 $d
       stm32eforth.s:1653   .text.reset_handler:0000000000000b86 $t
ARM GAS  stm32eforth.s 			page 112


       stm32eforth.s:1666   .text.reset_handler:0000000000000ba1 $d
       stm32eforth.s:1666   .text.reset_handler:0000000000000ba2 $t
       stm32eforth.s:1678   .text.reset_handler:0000000000000bbd $d
       stm32eforth.s:1678   .text.reset_handler:0000000000000bbe $t
       stm32eforth.s:1703   .text.reset_handler:0000000000000be3 $d
       stm32eforth.s:1703   .text.reset_handler:0000000000000be4 $t
       stm32eforth.s:1722   .text.reset_handler:0000000000000c0f $d
       stm32eforth.s:1722   .text.reset_handler:0000000000000c10 $t
       stm32eforth.s:1792   .text.reset_handler:0000000000000cbd $d
       stm32eforth.s:1792   .text.reset_handler:0000000000000cbe $t
       stm32eforth.s:1849   .text.reset_handler:0000000000000d37 $d
       stm32eforth.s:1849   .text.reset_handler:0000000000000d38 $t
       stm32eforth.s:1921   .text.reset_handler:0000000000000ddf $d
       stm32eforth.s:1921   .text.reset_handler:0000000000000de0 $t
       stm32eforth.s:1940   .text.reset_handler:0000000000000e05 $d
       stm32eforth.s:1940   .text.reset_handler:0000000000000e06 $t
       stm32eforth.s:1978   .text.reset_handler:0000000000000e4d $d
       stm32eforth.s:1978   .text.reset_handler:0000000000000e4e $t
       stm32eforth.s:2017   .text.reset_handler:0000000000000e97 $d
       stm32eforth.s:2017   .text.reset_handler:0000000000000e98 $t
       stm32eforth.s:2041   .text.reset_handler:0000000000000ec7 $d
       stm32eforth.s:2041   .text.reset_handler:0000000000000ec8 $t
       stm32eforth.s:2064   .text.reset_handler:0000000000000ef3 $d
       stm32eforth.s:2064   .text.reset_handler:0000000000000ef4 $t
       stm32eforth.s:2133   .text.reset_handler:0000000000000faf $d
       stm32eforth.s:2133   .text.reset_handler:0000000000000fb0 $t
       stm32eforth.s:2147   .text.reset_handler:0000000000000fcd $d
       stm32eforth.s:2147   .text.reset_handler:0000000000000fce $t
       stm32eforth.s:2180   .text.reset_handler:000000000000101b $d
       stm32eforth.s:2180   .text.reset_handler:000000000000101c $t
       stm32eforth.s:2198   .text.reset_handler:000000000000103f $d
       stm32eforth.s:2198   .text.reset_handler:0000000000001040 $t
       stm32eforth.s:2216   .text.reset_handler:0000000000001067 $d
       stm32eforth.s:2216   .text.reset_handler:0000000000001068 $t
       stm32eforth.s:2285   .text.reset_handler:00000000000010ff $d
       stm32eforth.s:2285   .text.reset_handler:0000000000001100 $t
       stm32eforth.s:2447   .text.reset_handler:00000000000012f3 $d
       stm32eforth.s:2447   .text.reset_handler:00000000000012f4 $t
       stm32eforth.s:2468   .text.reset_handler:0000000000001325 $d
       stm32eforth.s:2468   .text.reset_handler:0000000000001326 $t
       stm32eforth.s:2489   .text.reset_handler:0000000000001355 $d
       stm32eforth.s:2489   .text.reset_handler:0000000000001356 $t
       stm32eforth.s:2568   .text.reset_handler:00000000000013df $d
       stm32eforth.s:2568   .text.reset_handler:00000000000013e0 $t
       stm32eforth.s:2606   .text.reset_handler:000000000000143f $d
       stm32eforth.s:2606   .text.reset_handler:0000000000001440 $t
       stm32eforth.s:2776   .text.reset_handler:0000000000001623 $d
       stm32eforth.s:2776   .text.reset_handler:0000000000001624 $t
       stm32eforth.s:2821   .text.reset_handler:0000000000001685 $d
       stm32eforth.s:2821   .text.reset_handler:0000000000001686 $t
       stm32eforth.s:2836   .text.reset_handler:00000000000016a9 $d
       stm32eforth.s:2836   .text.reset_handler:00000000000016aa $t
       stm32eforth.s:3091   .text.reset_handler:0000000000001927 $d
       stm32eforth.s:3091   .text.reset_handler:0000000000001928 $t
       stm32eforth.s:3266   .text.reset_handler:0000000000001aeb $d
       stm32eforth.s:3266   .text.reset_handler:0000000000001aec $t
       stm32eforth.s:3274   .text.reset_handler:0000000000001b07 $d
ARM GAS  stm32eforth.s 			page 113


       stm32eforth.s:3274   .text.reset_handler:0000000000001b08 $t
       stm32eforth.s:3283   .text.reset_handler:0000000000001b15 $d
       stm32eforth.s:3283   .text.reset_handler:0000000000001b16 $t
       stm32eforth.s:3307   .text.reset_handler:0000000000001b57 $d
       stm32eforth.s:3307   .text.reset_handler:0000000000001b58 $t
       stm32eforth.s:3322   .text.reset_handler:0000000000001b6f $d
       stm32eforth.s:3322   .text.reset_handler:0000000000001b70 $t
       stm32eforth.s:3344   .text.reset_handler:0000000000001b9b $d
       stm32eforth.s:3344   .text.reset_handler:0000000000001b9c $t
       stm32eforth.s:3392   .text.reset_handler:0000000000001beb $d
       stm32eforth.s:3392   .text.reset_handler:0000000000001bec $t
       stm32eforth.s:3450   .text.reset_handler:0000000000001c83 $d
       stm32eforth.s:3450   .text.reset_handler:0000000000001c84 $t
       stm32eforth.s:3477   .text.reset_handler:0000000000001cd9 $d
       stm32eforth.s:3477   .text.reset_handler:0000000000001cda $t
       stm32eforth.s:3501   .text.reset_handler:0000000000001d21 $d
       stm32eforth.s:3501   .text.reset_handler:0000000000001d22 $t
       stm32eforth.s:3532   .text.reset_handler:0000000000001d75 $d
       stm32eforth.s:3532   .text.reset_handler:0000000000001d76 $t
       stm32eforth.s:3621   .text.reset_handler:0000000000001e83 $d
       stm32eforth.s:3621   .text.reset_handler:0000000000001e84 $t
       stm32eforth.s:3632   .text.reset_handler:0000000000001e99 $d
       stm32eforth.s:3632   .text.reset_handler:0000000000001e9a $t
       stm32eforth.s:3665   .text.reset_handler:0000000000001ef5 $d
       stm32eforth.s:3665   .text.reset_handler:0000000000001ef6 $t
       stm32eforth.s:3862   .text.reset_handler:00000000000020dd $d
       stm32eforth.s:3862   .text.reset_handler:00000000000020de $t
       stm32eforth.s:3904   .text.reset_handler:000000000000213b $d
       stm32eforth.s:3904   .text.reset_handler:000000000000213c $t
       stm32eforth.s:3940   .text.reset_handler:000000000000219b $d
       stm32eforth.s:3940   .text.reset_handler:000000000000219c $t
       stm32eforth.s:3955   .text.reset_handler:00000000000021bd $d
       stm32eforth.s:3955   .text.reset_handler:00000000000021be $t
       stm32eforth.s:3984   .text.reset_handler:00000000000021fd $d
       stm32eforth.s:3984   .text.reset_handler:00000000000021fe $t
       stm32eforth.s:4011   .text.reset_handler:000000000000223b $d
       stm32eforth.s:4011   .text.reset_handler:000000000000223c $t
       stm32eforth.s:4025   .text.reset_handler:0000000000002257 $d
       stm32eforth.s:4025   .text.reset_handler:0000000000002258 $t
       stm32eforth.s:4039   .text.reset_handler:0000000000002273 $d
       stm32eforth.s:4039   .text.reset_handler:0000000000002274 $t
       stm32eforth.s:4274   .text.reset_handler:00000000000024c5 $d
       stm32eforth.s:4274   .text.reset_handler:00000000000024c6 $t
       stm32eforth.s:4295   .text.reset_handler:0000000000002503 $d
       stm32eforth.s:4295   .text.reset_handler:0000000000002504 $t
       stm32eforth.s:4315   .text.reset_handler:000000000000253d $d
       stm32eforth.s:4315   .text.reset_handler:000000000000253e $t
       stm32eforth.s:4361   .text.reset_handler:00000000000025a5 $d
       stm32eforth.s:4361   .text.reset_handler:00000000000025a6 $t
       stm32eforth.s:4401   .text.reset_handler:000000000000261b $d
       stm32eforth.s:4401   .text.reset_handler:000000000000261c $t
       stm32eforth.s:4602   .text.reset_handler:0000000000002743 $d
       stm32eforth.s:4602   .text.reset_handler:0000000000002744 $t

UNDEFINED SYMBOLS
_mstack
