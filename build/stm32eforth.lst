ARM GAS  stm32eforth.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  stm32eforth.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m3
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
ARM GAS  stm32eforth.s 			page 3


  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
ARM GAS  stm32eforth.s 			page 4


  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
  81              	
  82              	/*************************************
  83              	    uninitialized variables 
  84              	*************************************/
  85              	  .section .bss
  86              	 
  87 0000 00000000 	system_vars: .space ULAST-UZERO
  87      00000000 
  87      00000000 
  87      00000000 
  87      00000000 
  88              	
  89              	  .equ ticks , system_vars+4
  90              	  .equ timer , system_var+8
  91              	
  92              	
  93              	/***********************************************
  94              	* MACROS
  95              	*	Assemble inline direct threaded code ending.
  96              	***********************************************/
  97              	 	.macro	_NEXT /*end low level word */
  98              		BX	LR
  99              		.endm
 100              	
 101              	 	.macro	_NEST /*start high level word */
 102              		STMFD	R2!,{LR}
 103              		.endm
 104              	
 105              	 	.macro	_UNNEST	/*end high level word */
 106              		LDMFD	R2!,{PC}
 107              		.endm
 108              	
 109              	 	.macro	_DOLIT /*long literals */
 110              		BL	DOLIT
 111              		.endm
 112              	
 113              	 	.macro	_PUSH	/*push R5 on data stack*/
 114              		STR	R5,[R1,#-4]!
 115              		.endm
 116              	
 117              	 	.macro	_POP /*pop data stack to R5 */
 118              		LDR	R5,[R1],#4
 119              		.endm
 120              	
 121              	/*************************************
ARM GAS  stm32eforth.s 			page 5


 122              	*   interrupt service vectors table 
 123              	**************************************/
 124              	   .section  .isr_vector,"a",%progbits
 125              	  .type  isr_vectors, %object
 126              	
 127              	isr_vectors:
 128 0000 00000000 	  .word   _rstack          /* return stack address */
 129 0004 00000000 	  .word   reset_handler    /* startup address */
 130              	/* core interrupts || exceptions */
 131 0008 00000000 	  .word   default_handler  /*  NMI */
 132 000c 00000000 	  .word   default_handler  /*  HardFault */
 133 0010 00000000 	  .word   default_handler  /*  Memory Management */
 134 0014 00000000 	  .word   default_handler  /* Bus fault */
 135 0018 00000000 	  .word   default_handler  /* Usage fault */
 136 001c 00000000 	  .word   0
 137 0020 00000000 	  .word   0
 138 0024 00000000 	  .word   0
 139 0028 00000000 	  .word   0
 140 002c 00000000 	  .word   default_handler  /* SWI instruction */
 141 0030 00000000 	  .word   default_handler  /* Debug monitor */
 142 0034 00000000 	  .word   0
 143 0038 00000000 	  .word   default_handler  /* PendSV */
 144 003c 00000000 	  .word   systick_handler  /* Systick */
 145              	  
 146              	  /* External Interrupts */
 147 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 148 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 149 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 150 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 151 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 152 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 153 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 154 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 155 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 156 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 157 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 158 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 159 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 160 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 161 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 162 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 163 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 164 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 165 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 166 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 167 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 168 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 169 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 170 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 171 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 172 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 173 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 174 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 175 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 176 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 177 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 178 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
ARM GAS  stm32eforth.s 			page 6


 179 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 180 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 181 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 182 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 183 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 184 00d4 00000000 	  .word      default_handler /* IRQ37, USART1 */                   
 185 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 186 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 187 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 188 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 189 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 190 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 191 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 192 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 193 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 194 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 195 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 196 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 197 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 198 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 199 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 200 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 201 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 202 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 203 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 204 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 205 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 206 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 207              	
 208              	  .size  isr_vectors, .-isr_vectors
 209              	
 210              	/*****************************************************
 211              	* default isr handler called on unexpected interrupt
 212              	*****************************************************/
 213              	    .section  .text.default_handler,"ax",%progbits
 214              	
 215              	  .type default_handler, %function
 216              	  .align 2 
 217              	  .global default_handler
 218              	default_handler:
 219 0000 42F804ED 		_NEST
 220 0004 00F0A6FF 		BL	CR	// new line
 221 0008 00F0DEFF 		BL	DOTQP
 222 000c 10       		.byte	16
 223 000d 20657863 		.ascii " exception hatl!"	// model
 223      65707469 
 223      6F6E2068 
 223      61746C21 
 224 001d 0000BF   		.align 2 
 225 0020 00F064FE 		BL HEX 
 226 0024 41F8045D 		_PUSH 
 227 0028 4EEA0E05 		ORR R5,LR,LR 
 228 002c 01F01AF8 		BL UDOT 
 229              	Infinite_Loop:
 230 0030 FEE7     	  b  Infinite_Loop
 231              	  .size  default_handler, .-default_handler
 232              	
ARM GAS  stm32eforth.s 			page 7


 233              	  .type systick_handler, %function
 234 0032 00BF     	  .align 2 
 235              	  .global systick_handler
 236              	systick_handler:
 237 0034 0548     	  ldr r0,=ticks 
 238 0036 0168     	  ldr r1,[r0]
 239 0038 01F10101 	  add r1,#1
 240 003c 0160     	  str r1,[r0]
 241 003e 4168     	  ldr r1,[r0,#4]
 242 0040 11B1     	  cbz r1, stk_exit
 243 0042 A1F10101 	  sub r1,#1
 244 0046 4160     	  str r1,[r0,#4]
 245              	stk_exit:
 246 0048 7047     	  bx lr
 247              	
 248              	  .equ LED_GPIO, GPIOC_BASE_ADR
 249              	  .equ LED_PIN, 13
 250              	
 251              	/**************************************
 252              	  reset_handler execute at MCU reset
 253              	***************************************/
 254 004a 0000     	    .section  .text.reset_handler
 255              	  .type  reset_handler, %function
 256              	  .align 2 
 257              	  .global reset_handler
 258              	reset_handler:
 259              	/* zero RAM */
 260 0000 4FF00000 		mov r0,#0
 261 0004 C2F20000 		movt r0,#0x2000
 262 0008 4FF00001 		mov r1,#0
 263 000c 4FF4A042 		mov r2,#0x5000 // RAM size 
 264              	zero_loop:
 265 0010 40F8041B 		str r1,[r0],#4
 266 0014 043A     		subs r2,#4
 267 0016 FBD1     		bne zero_loop		
 268 0018 00F004F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 269 001c 01F0C6FB 		bl	UNLOCK			/* unlock flash memory */
 270 0020 02F0BAB8 		b	COLD
 271              	
 272              	  .type init_devices, %function
 273              	  .align 2 
 274              	init_devices:
 275              	/* init clock to HSE 72 Mhz */
 276              	/* set 2 wait states in FLASH_ACR_LATENCY */
 277 0024 4FF40050 		mov r0,#FLASH_BASE_ADR&0xffff
 278 0028 C4F20200 		movt r0,#FLASH_BASE_ADR>>16 
 279 002c 4FF01202 	  mov r2,#0x12
 280 0030 0260     	  str r2,[r0,#FLASH_ACR]
 281              	/* configure clock for HSE, 8 Mhz crystal */
 282              	/* enable HSE in RCC_CR */
 283 0032 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 284 0036 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 285 003a 0168     	  ldr r1,[r0,#RCC_CR]
 286 003c 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 287 0040 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 288              	/* wait HSERDY loop */
 289              	wait_hserdy:
ARM GAS  stm32eforth.s 			page 8


 290 0042 0168     	  ldr r1,[r0,#RCC_CR]
 291 0044 11F4003F 	  tst r1,#(1<<17)
 292 0048 FBD0     	  beq wait_hserdy
 293              	
 294              	/************************************************* 
 295              	   configure PLL mul factor and source 
 296              	   SYSCLOCK=72 Mhz
 297              	   select HSE as  PLL source clock
 298              	   multiply frequency by 9 
 299              	   APB1 clock is limited to 36 Mhz so divide by 2 
 300              	****************************************************/
 301 004a 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 302 004e C0F21D01 	  movt r1,#(7<<2)|1
 303 0052 4160     	  str r1,[r0,#RCC_CFGR]
 304              	  /* enable PLL */
 305 0054 0168     	  ldr r1,[r0,#RCC_CR]
 306 0056 41F08071 	  orr r1, #1<<24 
 307 005a 0160     	  str r1,[r0,#RCC_CR]
 308              	/* wait for PLLRDY */
 309              	wait_pllrdy:
 310 005c 0168     	  ldr r1,[r0,#RCC_CR]
 311 005e 11F0007F 	  tst r1,#(1<<25)
 312 0062 FBD0     	  beq wait_pllrdy 
 313              	/* select PLL as sysclock */
 314 0064 4168     	  ldr r1,[r0,#RCC_CFGR]
 315 0066 4FF6FC72 	  mov r2,#0xfffc
 316 006a CFF6FF72 	  movt r2,#0xffff
 317 006e 01EA0201 	  and r1,r1,r2 
 318 0072 4FF00202 	  mov r2,#2
 319 0076 41EA0201 	  orr r1,r1,r2
 320 007a 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 321              	/* wait for SWS==2 */
 322              	wait_sws:
 323 007c 4168     	  ldr r1,[r0,#RCC_CFGR]
 324 007e 11F0080F 	  tst r1,#(2<<2)
 325 0082 FBD0     	  beq wait_sws
 326              	/* now sysclock is 72 Mhz */
 327              	
 328              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 329 0084 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 330 0088 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 331 008c 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 332 0090 8161     	  str	r1, [r0, #RCC_APB2ENR]
 333              	
 334              	/* configure GPIOC:13 as output for user LED */
 335 0092 4FF48050 	  mov r0,#GPIOC_BASE_ADR&0xffff
 336 0096 C4F20100 	  movt r0,#GPIOC_BASE_ADR>>16
 337 009a 4168     	  ldr r1,[r0,#GPIO_CRH]
 338 009c 6FF47002 	  mvn r2,#(15<<20)
 339 00a0 01EA0201 	  and r1,r1,r2
 340 00a4 4FF4C002 	  mov r2,#(6<<20)
 341 00a8 41EA0201 	  orr r1,r1,r2
 342 00ac 4160     	  str r1,[r0,#GPIO_CRH]
 343              	
 344              	/* configure USART1 */
 345              	/* set GPIOA PIN 9, uart TX  */
 346 00ae 4FF40060 	  mov r0,#GPIOA_BASE_ADR&0XFFFF
ARM GAS  stm32eforth.s 			page 9


 347 00b2 C4F20100 	  movt r0,#GPIOA_BASE_ADR>>16	
 348 00b6 4168     	  ldr r1,[r0,#GPIO_CRH]
 349 00b8 6FF0F002 	  mvn r2,#(15<<4)
 350 00bc 01EA0201 	  and r1,r1,r2
 351 00c0 4FF0A002 	  mov r2,#(0xA<<4)
 352 00c4 41EA0201 	  orr r1,r1,r2 
 353 00c8 4160     	  str r1,[r0,#GPIO_CRH]
 354              	
 355              	  .equ UART, USART1_BASE_ADR 
 356 00ca 4FF46050 	  mov r0,#UART&0xFFFF
 357 00ce C4F20100 	  movt r0,#UART>>16	
 358              	/* BAUD rate */
 359 00d2 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 360 00d6 8160     	  str r1,[r0,#USART_BRR]
 361 00d8 42F20C01 	  mov r1,#(3<<2)+(1<<13)
 362 00dc C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 363              	/* configure systicks for 1msec ticks */
 364 00de 4EF21000 	  mov r0,#STK_BASE_ADR&0xFFFF
 365 00e2 CEF20000 	  movt r0,#STK_BASE_ADR>>16	
 366 00e6 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 367 00ea 4160     	  str r1,[r0,#STK_LOAD]
 368 00ec 4FF00301 	  mov r1,#3
 369 00f0 0160     	  str r1,[r0,STK_CTL]
 370 00f2 7047     	  bx lr 
 371              	
 372              	
 373              	/********************
 374              	* Version control
 375              	*******************/
 376              	.equ VER ,	0x01	/*major release version */
 377              	.equ EXT ,	0x00	/*minor extension */
 378              	
 379              	/* Constants */
 380              	
 381              	// .equ RAMOFFSET ,	0x20000000	;remap
 382              	// .equ MAPOFFSET ,	0x08000000	;remap
 383              	.equ RAMOFFSET  ,	0x00000000	/* absolute */
 384              	.equ MAPOFFSET  ,	0x00000000	/* absolute */
 385              	
 386              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 387              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 388              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 389              	
 390              	.equ CELLL ,	4	/*size of a cell */
 391              	.equ BASEE ,	16	/*default radix */
 392              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 393              	
 394              	.equ BKSPP ,	8	/*backspace */
 395              	.equ LF ,	10	  /*line feed */
 396              	.equ CRR ,	13	/*carriage return */
 397              	.equ ERR ,	27	/*error escape */
 398              	.equ TIC ,	39	/*tick */
 399              	
 400              	/********************************************************
 401              	* RAM memory mapping
 402              	* 	0x20000000	RAM base address
 403              	*	  0x20000000  system variables	
ARM GAS  stm32eforth.s 			page 10


 404              	* 	0x20000100	Forth dictionary
 405              	* 	0x2000????	top of dictionary, HERE
 406              	* 	0x2000????	WORD buffer, HERE+16
 407              	*   0x20004E00  end of user space
 408              	* 	0x20004F00	top of data stack
 409              	* 	0x20004F00	TIB terminal input buffer
 410              	* 	0x20004F80	top of return stack
 411              	* 	0x20005000	top of hardware stack for interrupts
 412              	********************************************************/
 413              	
 414              	.equ SPP 	,	0x20004F00	/*top of data stack (SP0) */
 415              	.equ TIBB ,	0x20004F00	/*terminal input buffer (TIB) */
 416              	.equ RPP 	,	0x20004F80	/*top of return stack (RP0) */
 417              	.equ UPP 	,	0x20000000	/*start of user area (UP0) */
 418              	.equ DTOP ,	0x20000100	/*start of usable RAM area (HERE) */
 419              	.equ DEND , 0x20004E00  /*usable RAM end */
 420              	
 421              	
 422              	/******************************************************
 423              	*  COLD start moves the following to USER variables.
 424              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 425              	******************************************************/
 426              		.align 2   	
 427              	  
 428              	  .equ TICKS_OFS, 4
 429              	  .equ TIMER_OFS, 8
 430              	  .equ BOOT_OFS, 12
 431              	  .equ BASE_OFS, 16
 432              	  .equ TMP_OFS, 20
 433              	  .equ SPAN_OFS, 24 
 434              	  .equ TOIN_OFS, 28
 435              	  .equ NTIB_OFS, 32
 436              	  .equ TIB_OFS, 36
 437              	  .equ EVAL_OFS, 40
 438              	  .equ HLD_OFS, 44 
 439              	  .equ CTXT_OFS, 48 
 440              	  .equ FLSH_CTOP_OFS, 52
 441              	  .equ RAM_CTOP_OFS, 56
 442              	  .equ LASTN_OFS, 60
 443              	
 444              	UZERO:
 445 00f4 00000000 		.word 0  			/*Reserved */
 446 00f8 00000000 		.word 0      /* system Ticks */
 447 00fc 00000000 	    .word 0     /* delay timer */
 448 0100 2C210000 		.word HI  	/*'BOOT */
 449 0104 10000000 		.word BASEE 	/*BASE */
 450 0108 00000000 		.word 0			/*tmp */
 451 010c 00000000 		.word 0			/*SPAN */
 452 0110 00000000 		.word 0			/*>IN */
 453 0114 00000000 		.word 0			/*#TIB */
 454 0118 004F0020 		.word TIBB	/*TIB */
 455 011c 48160000 		.word INTER	/*'EVAL */
 456 0120 00000000 		.word 0			/*HLD */
 457 0124 90210000 		.word LASTN	/*CONTEXT */
 458 0128 E4210000 		.word CTOP	/*FLASH */
 459 012c 00010020 		.word DTOP	/* start adress of RAM dictionary RAM */
 460 0130 90210000 		.word LASTN	/*LAST */
ARM GAS  stm32eforth.s 			page 11


 461 0134 00000000 	  .word 0,0			/*reserved */
 461      00000000 
 462              	ULAST:
 463              	
 464              	 
 465              	
 466              	// **********************************************************************
 467              	//  Start of Forth dictionary
 468              	//  usart1
 469              		.align 2 
 470              	//    ?RX	 ( -- c T | F )
 471              	// 	Return input character and true, or a false if no input.
 472 013c 00000000 		.word	0
 473 0140 04       	_QRX:	.byte   4
 474 0141 3F4B4559 		.ascii "?KEY"
 475 0145 0000BF   		.align 2 
 476              	QKEY:
 477              	QRX: 
 478 0148 41F8045D 		_PUSH
 479 014c 4FF46054 		mov r4,#UART&0xFFFF
 480 0150 C4F20104 		movt r4,#UART>>16
 481 0154 2688     		ldrh	r6, [r4, #USART_SR]	//  USART->SR
 482 0156 16F02006 		ands	r6, #0x20		//  RXE
 483 015a 05D0     		BEQ	QRX1
 484 015c 6568     	 	LDR	R5, [R4, #USART_DR]
 485 015e 41F8045D 		_PUSH
 486 0162 18BF     	  IT NE 
 487 0164 6FF00005 		MVNNE	R5,#0
 488              	QRX1:
 489 0168 08BF     		IT EQ 
 490 016a 0025     	  MOVEQ	R5,#0
 491 016c 7047     		_NEXT
 492 016e 00BF     		.align 2 
 493              	
 494              	//    TX!	 ( c -- )
 495              	// 	Send character c to the output device.
 496              	
 497 0170 40010000 		.word	_QRX-MAPOFFSET
 498 0174 04       	_TXSTO:	.byte 4
 499 0175 454D4954 		.ascii "EMIT"
 500 0179 0000BF   		.align 2 	
 501              	TXSTO:
 502              	EMIT:
 503              	TECHO:
 504 017c 4FF46054 		mov r4,#UART&0xFFFF
 505 0180 C4F20104 		movt r4,#UART>>16
 506              	TX1:
 507 0184 2688     		ldrh	r6, [r4, #USART_SR]	
 508 0186 16F08006 		ands	r6, #0x80		//  TXE bit 
 509 018a FBD0     		beq	TX1
 510 018c A580     		strh	r5, [r4, #USART_DR]	
 511 018e 51F8045B 		_POP
 512 0192 7047     		_NEXT
 513              	
 514              		.align 2 
 515              		
 516              	// **************************************************************************
ARM GAS  stm32eforth.s 			page 12


 517              	//  The kernel
 518              	
 519              	//    NOP	( -- )
 520              	// 	do nothing.
 521              	
 522 0194 74010000 		.word	_TXSTO-MAPOFFSET
 523 0198 03       	_NOP:	.byte   3
 524 0199 4E4F50   		.ascii "NOP"
 525              		.align 2 	
 526              	NOP:
 527 019c 7047     		_NEXT
 528 019e 00BF     		.align 2 
 529              	
 530              	//    doLIT	( -- w )
 531              	// 	Push an inline literal.
 532              	
 533              	// 	.word	_NOP-MAPOFFSET
 534              	// _LIT	.byte   COMPO+5
 535              	// 	.ascii "doLIT"
 536              	// 	.align 2 	
 537              	DOLIT:
 538 01a0 41F8045D 		_PUSH				//  store R5 on data stack
 539 01a4 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 540 01a8 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 541 01ac 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 542 01b0 7047     		_NEXT
 543 01b2 00BF     		.align 2 
 544              	
 545              	//    EXECUTE	( ca -- )
 546              	// 	Execute the word at ca.
 547              	
 548 01b4 98010000 		.word	_NOP-MAPOFFSET
 549 01b8 07       	_EXECU:	.byte   7
 550 01b9 45584543 		.ascii "EXECUTE"
 550      555445
 551              		.align 2 	
 552              	EXECU:
 553 01c0 45F00104 		ORR	R4,R5,#1		//  b0=1 
 554 01c4 51F8045B 		_POP
 555 01c8 2047     		BX	R4
 556 01ca 00BF     		.align 2 
 557              	
 558              	//    next	( -- )
 559              	// 	Run time code for the single index loop.
 560              	// 	: next ( -- ) \ hilevel model
 561              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 562              	
 563              	// 	.word	_EXECU-MAPOFFSET
 564              	// _DONXT	.byte   COMPO+4
 565              	// 	.ascii "next"
 566              	// 	.align 2 	
 567              	DONXT:
 568 01cc 1468     		LDR	R4,[R2]
 569 01ce 2400     		MOVS	R4,R4
 570 01d0 04D1     		BNE	NEXT1
 571 01d2 02F10402 		ADD	R2,R2,#4
 572 01d6 0EF1040E 		ADD	LR,LR,#4
ARM GAS  stm32eforth.s 			page 13


 573 01da 7047     		_NEXT
 574              	NEXT1:
 575 01dc A4F10104 		SUB	R4,R4,#1
 576 01e0 1460     		STR	R4,[R2]
 577 01e2 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 578 01e6 4EF0010E 		ORR	LR,LR,#1
 579 01ea 7047     		_NEXT
 580              		.align 2 
 581              	//    ?branch	( f -- )
 582              	// 	Branch if flag is zero.
 583              	
 584              	// 	.word	_DONXT-MAPOFFSET
 585              	// _QBRAN	.byte   COMPO+7
 586              	// 	.ascii "?branch"
 587              	// 	.align 2 	
 588              	QBRAN:
 589 01ec 2C00     		MOVS	R4,R5
 590 01ee 51F8045B 		_POP
 591 01f2 04D1     		BNE	QBRAN1
 592 01f4 5EF801EC 		LDR	LR,[LR,#-1]
 593 01f8 4EF0010E 		ORR LR,LR,#1
 594 01fc 7047     		_NEXT
 595              	QBRAN1:
 596 01fe 0EF1040E 	 	ADD	LR,LR,#4
 597 0202 7047     		_NEXT
 598              		.align 2 
 599              	//    branch	( -- )
 600              	// 	Branch to an inline address.
 601              	
 602              	// 	.word	_QBRAN-MAPOFFSET
 603              	// _BRAN	.byte   COMPO+6
 604              	// 	.ascii "branch"
 605              	// 	.align 2 	
 606              	BRAN:
 607 0204 5EF801EC 		LDR	LR,[LR,#-1]
 608 0208 4EF0010E 		ORR	LR,LR,#1
 609 020c 7047     		_NEXT
 610 020e 00BF     		.align 2 
 611              	
 612              	//    EXIT	(  -- )
 613              	// 	Exit the currently executing command.
 614              	
 615 0210 B8010000 		.word	_EXECU-MAPOFFSET
 616 0214 04       	_EXIT:	.byte   4
 617 0215 45584954 		.ascii "EXIT"
 618 0219 0000BF   		.align 2 	
 619              	EXIT:
 620 021c 52F804FB 		_UNNEST
 621              		.align 2 
 622              	//    !	   ( w a -- )
 623              	// 	Pop the data stack to memory.
 624              	
 625 0220 14020000 		.word	_EXIT-MAPOFFSET
 626 0224 01       	_STORE:	.byte   1
 627 0225 21       		.ascii "!"
 628 0226 00BF     		.align 2 	
 629              	STORE:
ARM GAS  stm32eforth.s 			page 14


 630 0228 51F8044B 		LDR	R4,[R1],#4
 631 022c 2C60     		STR	R4,[R5]
 632 022e 51F8045B 		_POP
 633 0232 7047     		_NEXT
 634              		.align 2 
 635              	//    @	   ( a -- w )
 636              	// 	Push memory location to the data stack.
 637              	
 638 0234 24020000 		.word	_STORE-MAPOFFSET
 639 0238 01       	_AT:	.byte   1
 640 0239 40       		.ascii "@"
 641 023a 00BF     		.align 2 	
 642              	AT:
 643 023c 2D68     		LDR	R5,[R5]
 644 023e 7047     		_NEXT
 645              		.align 2 
 646              	//    C!	  ( c b -- )
 647              	// 	Pop the data stack to byte memory.
 648              	
 649 0240 38020000 		.word	_AT-MAPOFFSET
 650 0244 02       	_CSTOR:	.byte   2
 651 0245 4321     		.ascii "C!"
 652 0247 00       		.align 2 	
 653              	CSTOR:
 654 0248 51F8044B 		LDR	R4,[R1],#4
 655 024c 2C70     		STRB	R4,[R5]
 656 024e 51F8045B 		_POP
 657 0252 7047     		_NEXT
 658              		.align 2 
 659              	//    C@	  ( b -- c )
 660              	// 	Push byte memory location to the data stack.
 661              	
 662 0254 44020000 		.word	_CSTOR-MAPOFFSET
 663 0258 02       	_CAT:	.byte   2
 664 0259 4340     		.ascii "C@"
 665 025b 00       		.align 2 	
 666              	CAT:
 667 025c 2D78     		LDRB	R5,[R5]
 668 025e 7047     		_NEXT
 669              		.align 2 
 670              	//    R>	  ( -- w )
 671              	// 	Pop the return stack to the data stack.
 672              	
 673 0260 58020000 		.word	_CAT-MAPOFFSET
 674 0264 02       	_RFROM:	.byte   2
 675 0265 523E     		.ascii "R>"
 676 0267 00       		.align 2 	
 677              	RFROM:
 678 0268 41F8045D 		_PUSH
 679 026c 52F8045B 		LDR	R5,[R2],#4
 680 0270 7047     		_NEXT
 681 0272 00BF     		.align 2 
 682              	
 683              	//    R@	  ( -- w )
 684              	// 	Copy top of return stack to the data stack.
 685              	
 686 0274 64020000 		.word	_RFROM-MAPOFFSET
ARM GAS  stm32eforth.s 			page 15


 687 0278 02       	_RAT:	.byte   2
 688 0279 5240     		.ascii "R@"
 689 027b 00       		.align 2 	
 690              	RAT:
 691 027c 41F8045D 		_PUSH
 692 0280 1568     		LDR	R5,[R2]
 693 0282 7047     		_NEXT
 694              		.align 2 
 695              	//    >R	  ( w -- )
 696              	// 	Push the data stack to the return stack.
 697              	
 698 0284 78020000 		.word	_RAT-MAPOFFSET
 699 0288 42       	_TOR:	.byte   COMPO+2
 700 0289 3E52     		.ascii ">R"
 701 028b 00       		.align 2 	
 702              	TOR:
 703 028c 42F8045D 		STR	R5,[R2,#-4]!
 704 0290 51F8045B 		_POP
 705 0294 7047     		_NEXT
 706 0296 00BF     		.align 2 
 707              	
 708              	//    SP@	 ( -- a )
 709              	// 	Push the current data stack pointer.
 710              	
 711 0298 88020000 		.word	_TOR-MAPOFFSET
 712 029c 03       	_SPAT:	.byte   3
 713 029d 535040   		.ascii "SP@"
 714              		.align 2 	
 715              	SPAT:
 716 02a0 41F8045D 		_PUSH
 717 02a4 0D46     		MOV	R5,R1
 718 02a6 7047     		_NEXT
 719              		.align 2 
 720              	//    DROP	( w -- )
 721              	// 	Discard top stack item.
 722              	
 723 02a8 9C020000 		.word	_SPAT-MAPOFFSET
 724 02ac 04       	_DROP:	.byte   4
 725 02ad 44524F50 		.ascii "DROP"
 726 02b1 0000BF   		.align 2 	
 727              	DROP:
 728 02b4 51F8045B 		_POP
 729 02b8 7047     		_NEXT
 730 02ba 00BF     		.align 2 
 731              	
 732              	//    DUP	 ( w -- w w )
 733              	// 	Duplicate the top stack item.
 734              	
 735 02bc AC020000 		.word	_DROP-MAPOFFSET
 736 02c0 03       	_DUPP:	.byte   3
 737 02c1 445550   		.ascii "DUP"
 738              		.align 2 	
 739              	DUPP:
 740 02c4 41F8045D 		_PUSH
 741 02c8 7047     		_NEXT
 742 02ca 00BF     		.align 2 
 743              	
ARM GAS  stm32eforth.s 			page 16


 744              	//    SWAP	( w1 w2 -- w2 w1 )
 745              	// 	Exchange top two stack items.
 746              	
 747 02cc C0020000 		.word	_DUPP-MAPOFFSET
 748 02d0 04       	_SWAP:	.byte   4
 749 02d1 53574150 		.ascii "SWAP"
 750 02d5 0000BF   		.align 2 	
 751              	SWAP:
 752 02d8 0C68     		LDR	R4,[R1]
 753 02da 0D60     		STR	R5,[R1]
 754 02dc 2546     		MOV	R5,R4
 755 02de 7047     		_NEXT
 756              		.align 2 
 757              	//    OVER	( w1 w2 -- w1 w2 w1 )
 758              	// 	Copy second stack item to top.
 759              	
 760 02e0 D0020000 		.word	_SWAP-MAPOFFSET
 761 02e4 04       	_OVER:	.byte   4
 762 02e5 4F564552 		.ascii "OVER"
 763 02e9 0000BF   		.align 2 	
 764              	OVER:
 765 02ec 41F8045D 		_PUSH
 766 02f0 4D68     		LDR	R5,[R1,#4]
 767 02f2 7047     		_NEXT
 768              		.align 2 
 769              	//    0<	  ( n -- t )
 770              	// 	Return true if n is negative.
 771              	
 772 02f4 E4020000 		.word	_OVER-MAPOFFSET
 773 02f8 02       	_ZLESS:	.byte   2
 774 02f9 303C     		.ascii "0<"
 775 02fb 00       		.align 2 	
 776              	ZLESS:
 777 02fc 4FF00004 		MOV	R4,#0
 778 0300 04EB2505 		ADD	R5,R4,R5,ASR #32
 779 0304 7047     		_NEXT
 780 0306 00BF     		.align 2 
 781              	
 782              	//    AND	 ( w w -- w )
 783              	// 	Bitwise AND.
 784              	
 785 0308 F8020000 		.word	_ZLESS-MAPOFFSET
 786 030c 03       	_ANDD:	.byte   3
 787 030d 414E44   		.ascii "AND"
 788              		.align 2 	
 789              	ANDD:
 790 0310 51F8044B 		LDR	R4,[R1],#4
 791 0314 05EA0405 		AND	R5,R5,R4
 792 0318 7047     		_NEXT
 793 031a 00BF     		.align 2 
 794              	
 795              	//    OR	  ( w w -- w )
 796              	// 	Bitwise inclusive OR.
 797              	
 798 031c 0C030000 		.word	_ANDD-MAPOFFSET
 799 0320 02       	_ORR:	.byte   2
 800 0321 4F52     		.ascii "OR"
ARM GAS  stm32eforth.s 			page 17


 801 0323 00       		.align 2 	
 802              	ORR:
 803 0324 51F8044B 		LDR	R4,[R1],#4
 804 0328 45EA0405 		ORR	R5,R5,R4
 805 032c 7047     		_NEXT
 806 032e 00BF     		.align 2 
 807              	
 808              	//    XOR	 ( w w -- w )
 809              	// 	Bitwise exclusive OR.
 810              	
 811 0330 20030000 		.word	_ORR-MAPOFFSET
 812 0334 03       	_XORR:	.byte   3
 813 0335 584F52   		.ascii "XOR"
 814              		.align 2 	
 815              	XORR:
 816 0338 51F8044B 		LDR	R4,[R1],#4
 817 033c 85EA0405 		EOR	R5,R5,R4
 818 0340 7047     		_NEXT
 819 0342 00BF     		.align 2 
 820              	
 821              	//    UM+	 ( w w -- w cy )
 822              	// 	Add two numbers, return the sum and carry flag.
 823              	
 824 0344 34030000 		.word	_XORR-MAPOFFSET
 825 0348 03       	_UPLUS:	.byte   3
 826 0349 554D2B   		.ascii "UM+"
 827              		.align 2 	
 828              	UPLUS:
 829 034c 0C68     		LDR	R4,[R1]
 830 034e 6419     		ADDS	R4,R4,R5
 831 0350 4FF00005 		MOV	R5,#0
 832 0354 45F10005 		ADC	R5,R5,#0
 833 0358 0C60     		STR	R4,[R1]
 834 035a 7047     		_NEXT
 835              		.align 2 
 836              	//    RSHIFT	 ( w # -- w )
 837              	// 	Right shift # bits.
 838              	
 839 035c 48030000 		.word	_UPLUS-MAPOFFSET
 840 0360 06       	_RSHIFT:	.byte   6
 841 0361 52534849 		.ascii "RSHIFT"
 841      4654
 842 0367 00       		.align 2 	
 843              	RSHIFT:
 844 0368 51F8044B 		LDR	R4,[R1],#4
 845 036c 44FA05F5 		MOV	R5,R4,ASR R5
 846 0370 7047     		_NEXT
 847 0372 00BF     		.align 2 
 848              	
 849              	//    LSHIFT	 ( w # -- w )
 850              	// 	Right shift # bits.
 851              	
 852 0374 60030000 		.word	_RSHIFT-MAPOFFSET
 853 0378 06       	_LSHIFT:	.byte   6
 854 0379 4C534849 		.ascii "LSHIFT"
 854      4654
 855 037f 00       		.align 2 	
ARM GAS  stm32eforth.s 			page 18


 856              	LSHIFT:
 857 0380 51F8044B 		LDR	R4,[R1],#4
 858 0384 04FA05F5 		MOV	R5,R4,LSL R5
 859 0388 7047     		_NEXT
 860 038a 00BF     		.align 2 
 861              	
 862              	//    +	 ( w w -- w )
 863              	// 	Add.
 864              	
 865 038c 78030000 		.word	_LSHIFT-MAPOFFSET
 866 0390 01       	_PLUS:	.byte   1
 867 0391 2B       		.ascii "+"
 868 0392 00BF     		.align 2 	
 869              	PLUS:
 870 0394 51F8044B 		LDR	R4,[R1],#4
 871 0398 2544     		ADD	R5,R5,R4
 872 039a 7047     		_NEXT
 873              		.align 2 
 874              	//    -	 ( w w -- w )
 875              	// 	Subtract.
 876              	
 877 039c 90030000 		.word	_PLUS-MAPOFFSET
 878 03a0 01       	_SUBB:	.byte   1
 879 03a1 2D       		.ascii "-"
 880 03a2 00BF     		.align 2 	
 881              	SUBB:
 882 03a4 51F8044B 		LDR	R4,[R1],#4
 883 03a8 C5EB0405 		RSB	R5,R5,R4
 884 03ac 7047     		_NEXT
 885 03ae 00BF     		.align 2 
 886              	
 887              	//    *	 ( w w -- w )
 888              	// 	Multiply.
 889              	
 890 03b0 A0030000 		.word	_SUBB-MAPOFFSET
 891 03b4 01       	_STAR:	.byte   1
 892 03b5 2A       		.ascii "*"
 893 03b6 00BF     		.align 2 	
 894              	STAR:
 895 03b8 51F8044B 		LDR	R4,[R1],#4
 896 03bc 04FB05F5 		MUL	R5,R4,R5
 897 03c0 7047     		_NEXT
 898 03c2 00BF     		.align 2 
 899              	
 900              	//    UM*	 ( w w -- ud )
 901              	// 	Unsigned multiply.
 902              	
 903 03c4 B4030000 		.word	_STAR-MAPOFFSET
 904 03c8 03       	_UMSTA:	.byte   3
 905 03c9 554D2A   		.ascii "UM*"
 906              		.align 2 	
 907              	UMSTA:
 908 03cc 0C68     		LDR	R4,[R1]
 909 03ce A5FB0467 		UMULL	R6,R7,R5,R4
 910 03d2 0E60     		STR	R6,[R1]
 911 03d4 3D46     		MOV	R5,R7
 912 03d6 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 19


 913              		.align 2 
 914              	//    M*	 ( w w -- d )
 915              	// 	Unsigned multiply.
 916              	
 917 03d8 C8030000 		.word	_UMSTA-MAPOFFSET
 918 03dc 02       	_MSTAR:	.byte   2
 919 03dd 4D2A     		.ascii "M*"
 920 03df 00       		.align 2 	
 921              	MSTAR:
 922 03e0 0C68     		LDR	R4,[R1]
 923 03e2 85FB0467 		SMULL	R6,R7,R5,R4
 924 03e6 0E60     		STR	R6,[R1]
 925 03e8 3D46     		MOV	R5,R7
 926 03ea 7047     		_NEXT
 927              		.align 2 
 928              	//    1+	 ( w -- w+1 )
 929              	// 	Add 1.
 930              	
 931 03ec DC030000 		.word	_MSTAR-MAPOFFSET
 932 03f0 02       	_ONEP:	.byte   2
 933 03f1 312B     		.ascii "1+"
 934 03f3 00       		.align 2 	
 935              	ONEP:
 936 03f4 05F10105 		ADD	R5,R5,#1
 937 03f8 7047     		_NEXT
 938 03fa 00BF     		.align 2 
 939              	
 940              	//    1-	 ( w -- w-1 )
 941              	// 	Subtract 1.
 942              	
 943 03fc F0030000 		.word	_ONEP-MAPOFFSET
 944 0400 02       	_ONEM:	.byte   2
 945 0401 312D     		.ascii "1-"
 946 0403 00       		.align 2 	
 947              	ONEM:
 948 0404 A5F10105 		SUB	R5,R5,#1
 949 0408 7047     		_NEXT
 950 040a 00BF     		.align 2 
 951              	
 952              	//    2+	 ( w -- w+2 )
 953              	// 	Add 1.
 954              	
 955 040c 00040000 		.word	_ONEM-MAPOFFSET
 956 0410 02       	_TWOP:	.byte   2
 957 0411 322B     		.ascii "2+"
 958 0413 00       		.align 2 	
 959              	TWOP:
 960 0414 05F10205 		ADD	R5,R5,#2
 961 0418 7047     		_NEXT
 962 041a 00BF     		.align 2 
 963              	
 964              	//    2-	 ( w -- w-2 )
 965              	// 	Subtract 2.
 966              	
 967 041c 10040000 		.word	_TWOP-MAPOFFSET
 968 0420 02       	_TWOM:	.byte   2
 969 0421 322D     		.ascii "2-"
ARM GAS  stm32eforth.s 			page 20


 970 0423 00       		.align 2 	
 971              	TWOM:
 972 0424 A5F10205 		SUB	R5,R5,#2
 973 0428 7047     		_NEXT
 974 042a 00BF     		.align 2 
 975              	
 976              	//    CELL+	( w -- w+4 )
 977              	// 	Add 4.
 978              	
 979 042c 20040000 		.word	_TWOM-MAPOFFSET
 980 0430 05       	_CELLP:	.byte   5
 981 0431 43454C4C 		.ascii "CELL+"
 981      2B
 982 0436 00BF     		.align 2 	
 983              	CELLP:
 984 0438 05F10405 		ADD	R5,R5,#4
 985 043c 7047     		_NEXT
 986 043e 00BF     		.align 2 
 987              	
 988              	//    CELL-	( w -- w-4 )
 989              	// 	Subtract 4.
 990              	
 991 0440 30040000 		.word	_CELLP-MAPOFFSET
 992 0444 05       	_CELLM:	.byte   5
 993 0445 43454C4C 		.ascii "CELL-"
 993      2D
 994 044a 00BF     		.align 2 	
 995              	CELLM:
 996 044c A5F10405 		SUB	R5,R5,#4
 997 0450 7047     		_NEXT
 998 0452 00BF     		.align 2 
 999              	 
 1000              	//    BL	( -- 32 )
 1001              	// 	Blank (ASCII space).
 1002              	
 1003 0454 44040000 		.word	_CELLM-MAPOFFSET
 1004 0458 02       	_BLANK:	.byte   2
 1005 0459 424C     		.ascii "BL"
 1006 045b 00       		.align 2 	
 1007              	BLANK:
 1008 045c 41F8045D 		_PUSH
 1009 0460 4FF02005 		MOV	R5,#32
 1010 0464 7047     		_NEXT
 1011 0466 00BF     		.align 2 
 1012              	
 1013              	//    CELLS	( w -- w*4 )
 1014              	// 	Multiply 4.
 1015              	
 1016 0468 58040000 		.word	_BLANK-MAPOFFSET
 1017 046c 05       	_CELLS:	.byte   5
 1018 046d 43454C4C 		.ascii "CELLS"
 1018      53
 1019 0472 00BF     		.align 2 	
 1020              	CELLS:
 1021 0474 4FEA8505 		MOV	R5,R5,LSL#2
 1022 0478 7047     		_NEXT
 1023 047a 00BF     		.align 2 
ARM GAS  stm32eforth.s 			page 21


 1024              	
 1025              	//    CELL/	( w -- w/4 )
 1026              	// 	Divide by 4.
 1027              	
 1028 047c 6C040000 		.word	_CELLS-MAPOFFSET
 1029 0480 05       	_CELLSL:	.byte   5
 1030 0481 43454C4C 		.ascii "CELL/"
 1030      2F
 1031 0486 00BF     		.align 2 	
 1032              	CELLSL:
 1033 0488 4FEAA505 		MOV	R5,R5,ASR#2
 1034 048c 7047     		_NEXT
 1035 048e 00BF     		.align 2 
 1036              	
 1037              	//    2*	( w -- w*2 )
 1038              	// 	Multiply 2.
 1039              	
 1040 0490 80040000 		.word	_CELLSL-MAPOFFSET
 1041 0494 02       	_TWOST:	.byte   2
 1042 0495 322A     		.ascii "2*"
 1043 0497 00       		.align 2 	
 1044              	TWOST:
 1045 0498 4FEA4505 		MOV	R5,R5,LSL#1
 1046 049c 7047     		_NEXT
 1047 049e 00BF     		.align 2 
 1048              	
 1049              	//    2/	( w -- w/2 )
 1050              	// 	Divide by 2.
 1051              	
 1052 04a0 94040000 		.word	_TWOST-MAPOFFSET
 1053 04a4 02       	_TWOSL:	.byte   2
 1054 04a5 322F     		.ascii "2/"
 1055 04a7 00       		.align 2 	
 1056              	TWOSL:
 1057 04a8 4FEA6505 		MOV	R5,R5,ASR#1
 1058 04ac 7047     		_NEXT
 1059 04ae 00BF     		.align 2 
 1060              	
 1061              	//    ?DUP	( w -- w w | 0 )
 1062              	// 	Conditional duplicate.
 1063              	
 1064 04b0 A4040000 		.word	_TWOSL-MAPOFFSET
 1065 04b4 04       	_QDUP:	.byte   4
 1066 04b5 3F445550 		.ascii "?DUP"
 1067 04b9 0000BF   		.align 2 	
 1068              	QDUP:
 1069 04bc 2C00     		MOVS	R4,R5
 1070 04be 18BF     		IT NE 
 1071 04c0 41F8045D 	  STRNE	R5,[R1,#-4]!
 1072 04c4 7047     		_NEXT
 1073 04c6 00BF     		.align 2 
 1074              	
 1075              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1076              	// 	Rotate top 3 items.
 1077              	
 1078 04c8 B4040000 		.word	_QDUP-MAPOFFSET
 1079 04cc 03       	_ROT:	.byte   3
ARM GAS  stm32eforth.s 			page 22


 1080 04cd 524F54   		.ascii "ROT"
 1081              		.align 2 	
 1082              	ROT:
 1083 04d0 0C68     		LDR	R4,[R1]
 1084 04d2 0D60     		STR	R5,[R1]
 1085 04d4 4D68     		LDR	R5,[R1,#4]
 1086 04d6 4C60     		STR	R4,[R1,#4]
 1087 04d8 7047     		_NEXT
 1088 04da 00BF     		.align 2 
 1089              	
 1090              	//    2DROP	( w1 w2 -- )
 1091              	// 	Drop top 2 items.
 1092              	
 1093 04dc CC040000 		.word	_ROT-MAPOFFSET
 1094 04e0 05       	_DDROP:	.byte   5
 1095 04e1 3244524F 		.ascii "2DROP"
 1095      50
 1096 04e6 00BF     		.align 2 	
 1097              	DDROP:
 1098 04e8 51F8045B 		_POP
 1099 04ec 51F8045B 		_POP
 1100 04f0 7047     		_NEXT
 1101 04f2 00BF     		.align 2 
 1102              	
 1103              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1104              	// 	Duplicate top 2 items.
 1105              	
 1106 04f4 E0040000 		.word	_DDROP-MAPOFFSET
 1107 04f8 04       	_DDUP:	.byte   4
 1108 04f9 32445550 		.ascii "2DUP"
 1109 04fd 0000BF   		.align 2 	
 1110              	DDUP:
 1111 0500 0C68     		LDR	R4,[R1]
 1112 0502 41F8045D 		STR	R5,[R1,#-4]!
 1113 0506 41F8044D 		STR	R4,[R1,#-4]!
 1114 050a 7047     		_NEXT
 1115              		.align 2 
 1116              	//    D+	( d1 d2 -- d3 )
 1117              	// 	Add top 2 double numbers.
 1118              	
 1119 050c F8040000 		.word	_DDUP-MAPOFFSET
 1120 0510 02       	_DPLUS:	.byte   2
 1121 0511 442B     		.ascii "D+"
 1122 0513 00       		.align 2 	
 1123              	DPLUS:
 1124 0514 51F8044B 		LDR	R4,[R1],#4
 1125 0518 51F8046B 		LDR	R6,[R1],#4
 1126 051c 0F68     		LDR	R7,[R1]
 1127 051e E419     		ADDS	R4,R4,R7
 1128 0520 0C60     		STR	R4,[R1]
 1129 0522 45EB0605 		ADC	R5,R5,R6
 1130 0526 7047     		_NEXT
 1131              		.align 2 
 1132              	//    NOT	 ( w -- !w )
 1133              	// 	1"s complement.
 1134              	
 1135 0528 10050000 		.word	_DPLUS-MAPOFFSET
ARM GAS  stm32eforth.s 			page 23


 1136 052c 03       	_INVER:	.byte   3
 1137 052d 4E4F54   		.ascii "NOT"
 1138              		.align 2 	
 1139              	INVER:
 1140 0530 6FEA0505 		MVN	R5,R5
 1141 0534 7047     		_NEXT
 1142 0536 00BF     		.align 2 
 1143              	
 1144              	//    NEGATE	( w -- -w )
 1145              	// 	2's complement.
 1146              	
 1147 0538 2C050000 		.word	_INVER-MAPOFFSET
 1148 053c 06       	_NEGAT:	.byte   6
 1149 053d 4E454741 		.ascii "NEGATE"
 1149      5445
 1150 0543 00       		.align 2 	
 1151              	NEGAT:
 1152 0544 C5F10005 		RSB	R5,R5,#0
 1153 0548 7047     		_NEXT
 1154 054a 00BF     		.align 2 
 1155              	
 1156              	//    ABS	 ( w -- |w| )
 1157              	// 	Absolute.
 1158              	
 1159 054c 3C050000 		.word	_NEGAT-MAPOFFSET
 1160 0550 03       	_ABSS:	.byte   3
 1161 0551 414253   		.ascii "ABS"
 1162              		.align 2 	
 1163              	ABSS:
 1164 0554 15F0004F 		TST	R5,#0x80000000
 1165 0558 18BF     		IT NE
 1166 055a 6D42     	  RSBNE   R5,R5,#0
 1167 055c 7047     		_NEXT
 1168 055e 00BF     		.align 2 
 1169              	
 1170              	//    =	 ( w w -- t )
 1171              	// 	Equal?
 1172              	
 1173 0560 50050000 		.word	_ABSS-MAPOFFSET
 1174 0564 01       	_EQUAL:	.byte   1
 1175 0565 3D       		.ascii "="
 1176 0566 00BF     		.align 2 	
 1177              	EQUAL:
 1178 0568 51F8044B 		LDR	R4,[R1],#4
 1179 056c A542     		CMP	R5,R4
 1180 056e 0CBF     		ITE EQ 
 1181 0570 6FF00005 	  MVNEQ	R5,#0
 1182 0574 0025     		MOVNE	R5,#0
 1183 0576 7047     		_NEXT
 1184              		.align 2 
 1185              	//    U<	 ( w w -- t )
 1186              	// 	Unsigned equal?
 1187              	
 1188 0578 64050000 		.word	_EQUAL-MAPOFFSET
 1189 057c 02       	_ULESS:	.byte   2
 1190 057d 553C     		.ascii "U<"
 1191 057f 00       		.align 2 	
ARM GAS  stm32eforth.s 			page 24


 1192              	ULESS:
 1193 0580 51F8044B 		LDR	R4,[R1],#4
 1194 0584 AC42     		CMP	R4,R5
 1195 0586 34BF     		ITE CC 
 1196 0588 6FF00005 	  MVNCC	R5,#0
 1197 058c 0025     		MOVCS	R5,#0
 1198 058e 7047     		_NEXT
 1199              		.align 2 
 1200              	//    <	( w w -- t )
 1201              	// 	Less?
 1202              	
 1203 0590 7C050000 		.word	_ULESS-MAPOFFSET
 1204 0594 01       	_LESS:	.byte   1
 1205 0595 3C       		.ascii "<"
 1206 0596 00BF     		.align 2 	
 1207              	LESS:
 1208 0598 51F8044B 		LDR	R4,[R1],#4
 1209 059c AC42     		CMP	R4,R5
 1210 059e B4BF     	  ITE LT
 1211 05a0 6FF00005 		MVNLT	R5,#0
 1212 05a4 0025     		MOVGE	R5,#0
 1213 05a6 7047     		_NEXT
 1214              		.align 2 
 1215              	//    >	( w w -- t )
 1216              	// 	greater?
 1217              	
 1218 05a8 94050000 		.word	_LESS-MAPOFFSET
 1219 05ac 01       	_GREAT:	.byte   1
 1220 05ad 3E       		.ascii ">"
 1221 05ae 00BF     		.align 2 	
 1222              	GREAT:
 1223 05b0 51F8044B 		LDR	R4,[R1],#4
 1224 05b4 AC42     		CMP	R4,R5
 1225 05b6 CCBF     		ITE GT
 1226 05b8 6FF00005 	  MVNGT	R5,#0
 1227 05bc 0025     		MOVLE	R5,#0
 1228 05be 7047     		_NEXT
 1229              		.align 2 
 1230              	//    MAX	 ( w w -- max )
 1231              	// 	Leave maximum.
 1232              	
 1233 05c0 AC050000 		.word	_GREAT-MAPOFFSET
 1234 05c4 03       	_MAX:	.byte   3
 1235 05c5 4D4158   		.ascii "MAX"
 1236              		.align 2 	
 1237              	MAX:
 1238 05c8 51F8044B 		LDR	R4,[R1],#4
 1239 05cc AC42     		CMP	R4,R5
 1240 05ce C8BF     		IT GT 
 1241 05d0 2546     	  MOVGT	R5,R4
 1242 05d2 7047     		_NEXT
 1243              		.align 2 
 1244              	//    MIN	 ( w w -- min )
 1245              	// 	Leave minimum.
 1246              	
 1247 05d4 C4050000 		.word	_MAX-MAPOFFSET
 1248 05d8 03       	_MIN:	.byte   3
ARM GAS  stm32eforth.s 			page 25


 1249 05d9 4D494E   		.ascii "MIN"
 1250              		.align 2 	
 1251              	MIN:
 1252 05dc 51F8044B 		LDR	R4,[R1],#4
 1253 05e0 AC42     		CMP	R4,R5
 1254 05e2 B8BF     		IT LT
 1255 05e4 2546     	  MOVLT	R5,R4
 1256 05e6 7047     		_NEXT
 1257              		.align 2 
 1258              	//    +!	 ( w a -- )
 1259              	// 	Add to memory.
 1260              	
 1261 05e8 D8050000 		.word	_MIN-MAPOFFSET
 1262 05ec 02       	_PSTOR:	.byte   2
 1263 05ed 2B21     		.ascii "+!"
 1264 05ef 00       		.align 2 	
 1265              	PSTOR:
 1266 05f0 51F8044B 		LDR	R4,[R1],#4
 1267 05f4 2E68     		LDR	R6,[R5]
 1268 05f6 2644     		ADD	R6,R6,R4
 1269 05f8 2E60     		STR	R6,[R5]
 1270 05fa 51F8045B 		_POP
 1271 05fe 7047     		_NEXT
 1272              		.align 2 
 1273              	//    2!	 ( d a -- )
 1274              	// 	Store double number.
 1275              	
 1276 0600 EC050000 		.word	_PSTOR-MAPOFFSET
 1277 0604 02       	_DSTOR:	.byte   2
 1278 0605 3221     		.ascii "2!"
 1279 0607 00       		.align 2 	
 1280              	DSTOR:
 1281 0608 51F8044B 		LDR	R4,[R1],#4
 1282 060c 51F8046B 		LDR	R6,[R1],#4
 1283 0610 45F8044B 		STR	R4,[R5],#4
 1284 0614 2E60     		STR	R6,[R5]
 1285 0616 51F8045B 		_POP
 1286 061a 7047     		_NEXT
 1287              		.align 2 
 1288              	//    2@	 ( a -- d )
 1289              	// 	Fetch double number.
 1290              	
 1291 061c 04060000 		.word	_DSTOR-MAPOFFSET
 1292 0620 02       	_DAT:	.byte   2
 1293 0621 3240     		.ascii "2@"
 1294 0623 00       		.align 2 	
 1295              	DAT:
 1296 0624 6C68     		LDR	R4,[R5,#4]
 1297 0626 41F8044D 		STR	R4,[R1,#-4]!
 1298 062a 2D68     		LDR	R5,[R5]
 1299 062c 7047     		_NEXT
 1300 062e 00BF     		.align 2 
 1301              	
 1302              	//    COUNT	( b -- b+1 c )
 1303              	// 	Fetch length of string.
 1304              	
 1305 0630 20060000 		.word	_DAT-MAPOFFSET
ARM GAS  stm32eforth.s 			page 26


 1306 0634 05       	_COUNT:	.byte   5
 1307 0635 434F554E 		.ascii "COUNT"
 1307      54
 1308 063a 00BF     		.align 2 	
 1309              	COUNT:
 1310 063c 15F8014B 		LDRB	R4,[R5],#1
 1311 0640 41F8045D 		_PUSH
 1312 0644 2546     		MOV	R5,R4
 1313 0646 7047     		_NEXT
 1314              		.align 2 
 1315              	
 1316              	//    DNEGATE	( d -- -d )
 1317              	// 	Negate double number.
 1318              	
 1319 0648 34060000 		.word	_COUNT-MAPOFFSET
 1320 064c 07       	_DNEGA:	.byte   7
 1321 064d 444E4547 		.ascii "DNEGATE"
 1321      415445
 1322              		.align 2 	
 1323              	DNEGA:
 1324 0654 0C68     		LDR	R4,[R1]
 1325 0656 A8EB0808 		SUB	R8,R8,R8
 1326 065a 341B     		SUBS	R4,R6,R4
 1327 065c 66EB0505 		SBC	R5,R6,R5
 1328 0660 0C60     		STR	R4,[R1]
 1329 0662 7047     		_NEXT
 1330              		.align 2 
 1331              	// **************************************************************************
 1332              	//  System and user variables
 1333              	
 1334              	//    doVAR	( -- a )
 1335              	// 	Run time routine for VARIABLE and CREATE.
 1336              	
 1337              	// 	.word	_DNEGA-MAPOFFSET
 1338              	// _DOVAR	.byte  COMPO+5
 1339              	// 	.ascii "doVAR"
 1340              	// 	.align 2 	
 1341              	DOVAR:
 1342 0664 41F8045D 		_PUSH
 1343 0668 AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
 1344 066c 52F804FB 		_UNNEST
 1345              		.align 2 
 1346              	
 1347              	//    doCON	( -- a ) 
 1348              	// 	Run time r outine for CONSTANT.
 1349              	
 1350              	// 	.word	_DOVAR-MAPOFFSET
 1351              	// _DOCON	.byte  COMPO+5
 1352              	// 	.ascii "doCON"
 1353              	// 	.align 2 	
 1354              	DOCON:
 1355 0670 41F8045D 		_PUSH
 1356 0674 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1357 0678 52F804FB 		_UNNEST
 1358              		.align 2 
 1359              	/***********************
 1360              	  system variables 
ARM GAS  stm32eforth.s 			page 27


 1361              	***********************/
 1362              	  
 1363              	//  TICKS ( -- a)
 1364 067c 4C060000 	  .word _DNEGA-MAPOFFSET 
 1365 0680 05       	_TICKS: .byte 5
 1366 0681 5449434B 	  .ascii "TICKS"
 1366      53
 1367 0686 00BF     	  .align 2 
 1368              	TICKS:
 1369 0688 41F8045D 	  _PUSH
 1370 068c 03F10405 	  ADD R5,R3,#TICKS_OFS
 1371 0690 7047     	  _NEXT 
 1372 0692 00BF     	  .align 2 
 1373              	
 1374              	// TIMER ( -- a )
 1375 0694 80060000 	  .word _TICKS-MAPOFFSET
 1376 0698 05       	_TIMER:  .byte 5
 1377 0699 54494D45 	  .ascii "TIMER"
 1377      52
 1378 069e 00BF     	  .align 2 
 1379              	TIMER:
 1380 06a0 41F8045D 	  _PUSH 
 1381 06a4 05F13505 	  ADD R5,53,#TIMER_OFS
 1382 06a8 7047     	  _NEXT
 1383 06aa 00BF     	  .align 2 
 1384              	
 1385              	//    'BOOT	 ( -- a )
 1386              	// 	Application.
 1387              	
 1388 06ac 98060000 		.word	_TIMER-MAPOFFSET
 1389 06b0 05       	_TBOOT:	.byte   5
 1390 06b1 27424F4F 		.ascii "'BOOT"
 1390      54
 1391 06b6 00BF     		.align 2 	
 1392              	TBOOT:
 1393 06b8 41F8045D 		_PUSH
 1394 06bc 03F10C05 		ADD	R5,R3,#BOOT_OFS 
 1395 06c0 7047     		_NEXT
 1396 06c2 00BF     		.align 2 
 1397              		
 1398              	//    BASE	( -- a )
 1399              	// 	Storage of the radix base for numeric I/O.
 1400              	
 1401 06c4 B0060000 		.word	_TBOOT-MAPOFFSET
 1402 06c8 04       	_BASE:	.byte   4
 1403 06c9 42415345 		.ascii "BASE"
 1404 06cd 0000BF   		.align 2 	
 1405              	BASE:
 1406 06d0 41F8045D 		_PUSH
 1407 06d4 03F11005 		ADD	R5,R3,#BASE_OFS
 1408 06d8 7047     		_NEXT
 1409 06da 00BF     		.align 2 
 1410              	
 1411              	//    tmp	 ( -- a )
 1412              	// 	A temporary storage location used in parse and find.
 1413              	
 1414              	// 	.word	_BASE-MAPOFFSET
ARM GAS  stm32eforth.s 			page 28


 1415              	// _TEMP	.byte   COMPO+3
 1416              	// 	.ascii "tmp"
 1417              	// 	.align 2 	
 1418              	TEMP:
 1419 06dc 41F8045D 		_PUSH
 1420 06e0 03F11405 		ADD	R5,R3,#TMP_OFS
 1421 06e4 7047     		_NEXT
 1422 06e6 00BF     		.align 2 
 1423              	
 1424              	//    SPAN	( -- a )
 1425              	// 	Hold character count received by EXPECT.
 1426              	
 1427 06e8 C8060000 		.word	_BASE-MAPOFFSET
 1428 06ec 04       	_SPAN:	.byte   4
 1429 06ed 5350414E 		.ascii "SPAN"
 1430 06f1 0000BF   		.align 2 	
 1431              	SPAN:
 1432 06f4 41F8045D 		_PUSH
 1433 06f8 03F11805 		ADD	R5,R3,#SPAN_OFS
 1434 06fc 7047     		_NEXT
 1435 06fe 00BF     		.align 2 
 1436              	
 1437              	//    >IN	 ( -- a )
 1438              	// 	Hold the character pointer while parsing input stream.
 1439              	
 1440 0700 EC060000 		.word	_SPAN-MAPOFFSET
 1441 0704 03       	_INN:	.byte   3
 1442 0705 3E494E   		.ascii ">IN"
 1443              		.align 2 	
 1444              	INN:
 1445 0708 41F8045D 		_PUSH
 1446 070c 03F11C05 		ADD	R5,R3,#TOIN_OFS
 1447 0710 7047     		_NEXT
 1448 0712 00BF     		.align 2 
 1449              	
 1450              	//    #TIB	( -- a )
 1451              	// 	Hold the current count and address of the terminal input buffer.
 1452              	
 1453 0714 04070000 		.word	_INN-MAPOFFSET
 1454 0718 04       	_NTIB:	.byte   4
 1455 0719 23544942 		.ascii "#TIB"
 1456 071d 0000BF   		.align 2 	
 1457              	NTIB:
 1458 0720 41F8045D 		_PUSH
 1459 0724 03F12005 		ADD	R5,R3,#NTIB_OFS
 1460 0728 7047     		_NEXT
 1461 072a 00BF     		.align 2 
 1462              	
 1463              	//    'EVAL	( -- a )
 1464              	// 	Execution vector of EVAL.
 1465              	
 1466 072c 18070000 		.word	_NTIB-MAPOFFSET
 1467 0730 05       	_TEVAL:	.byte   5
 1468 0731 27455641 		.ascii "'EVAL"
 1468      4C
 1469 0736 00BF     		.align 2 	
 1470              	TEVAL:
ARM GAS  stm32eforth.s 			page 29


 1471 0738 41F8045D 		_PUSH
 1472 073c 03F12805 		ADD	R5,R3,#EVAL_OFS
 1473 0740 7047     		_NEXT
 1474 0742 00BF     		.align 2 
 1475              	
 1476              	//    HLD	 ( -- a )
 1477              	// 	Hold a pointer in building a numeric output string.
 1478              	
 1479 0744 30070000 		.word	_TEVAL-MAPOFFSET
 1480 0748 03       	_HLD:	.byte   3
 1481 0749 484C44   		.ascii "HLD"
 1482              		.align 2 	
 1483              	HLD:
 1484 074c 41F8045D 		_PUSH
 1485 0750 03F12C05 		ADD	R5,R3,#HLD_OFS
 1486 0754 7047     		_NEXT
 1487 0756 00BF     		.align 2 
 1488              	
 1489              	//    CONTEXT	( -- a )
 1490              	// 	A area to specify vocabulary search order.
 1491              	
 1492 0758 48070000 		.word	_HLD-MAPOFFSET
 1493 075c 07       	_CNTXT:	.byte   7
 1494 075d 434F4E54 		.ascii "CONTEXT"
 1494      455854
 1495              		.align 2 	
 1496              	CNTXT:
 1497              	CRRNT:
 1498 0764 41F8045D 		_PUSH
 1499 0768 03F13005 		ADD	R5,R3,#CTXT_OFS
 1500 076c 7047     		_NEXT
 1501 076e 00BF     		.align 2 
 1502              	
 1503              	//    CP	( -- a )
 1504              	// 	Point to top name in RAM vocabulary.
 1505              	
 1506 0770 5C070000 		.word	_CNTXT-MAPOFFSET
 1507 0774 02       	_CP:	.byte   2
 1508 0775 4350     		.ascii "CP"
 1509 0777 00       		.align 2 	
 1510              	CPP:
 1511 0778 41F8045D 		_PUSH
 1512 077c 03F13805 		ADD	R5,R3,#RAM_CTOP_OFS
 1513 0780 7047     		_NEXT
 1514 0782 00BF     		.align 2 
 1515              	
 1516              	//   FCP ( -- a )
 1517              	//  Point ot top of Flash dictionary
 1518 0784 74070000 		.word _CP-MAPOFFSET
 1519 0788 04       	_FCPP: .byte 4 
 1520 0789 46435050 		.ascii "FCPP"
 1521 078d 0000BF   		.align 2 
 1522              	FCPP: 
 1523 0790 41F8045D 		_PUSH 
 1524 0794 03F13405 		ADD R5,R3,#FLSH_CTOP_OFS 
 1525 0798 7047     		_NEXT 
 1526 079a 00BF     		.align 2  
ARM GAS  stm32eforth.s 			page 30


 1527              	
 1528              	//    LAST	( -- a )
 1529              	// 	Point to the last name in the name dictionary.
 1530              	
 1531 079c 88070000 		.word	_FCPP-MAPOFFSET
 1532 07a0 04       	_LAST:	.byte   4
 1533 07a1 4C415354 		.ascii "LAST"
 1534 07a5 0000BF   		.align 2 	
 1535              	LAST:
 1536 07a8 41F8045D 		_PUSH
 1537 07ac 03F13C05 		ADD	R5,R3,#LASTN_OFS
 1538 07b0 7047     		_NEXT
 1539 07b2 00BF     		.align 2 
 1540              	
 1541              	// **************************************************************************
 1542              	//  Common functions
 1543              	
 1544              	//    WITHIN	( u ul uh -- t )
 1545              	// 	Return true if u is within the range of ul and uh.
 1546              	
 1547 07b4 A0070000 		.word	_LAST-MAPOFFSET
 1548 07b8 06       	_WITHI:	.byte   6
 1549 07b9 57495448 		.ascii "WITHIN"
 1549      494E
 1550 07bf 00       		.align 2 	
 1551              	WITHI:
 1552 07c0 42F804ED 		_NEST
 1553 07c4 FFF792FD 		BL	OVER
 1554 07c8 FFF7ECFD 		BL	SUBB
 1555 07cc FFF75EFD 		BL	TOR
 1556 07d0 FFF7E8FD 		BL	SUBB
 1557 07d4 FFF748FD 		BL	RFROM
 1558 07d8 FFF7D2FE 		BL	ULESS
 1559 07dc 52F804FB 		_UNNEST
 1560              		.align 2 
 1561              	//  Divide
 1562              	
 1563              	//    UM/MOD	( udl udh u -- ur uq )
 1564              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1565              	
 1566 07e0 B8070000 		.word	_WITHI-MAPOFFSET
 1567 07e4 06       	_UMMOD:	.byte   6
 1568 07e5 554D2F4D 		.ascii "UM/MOD"
 1568      4F44
 1569 07eb 00       		.align 2 	
 1570              	UMMOD:
 1571 07ec 4FF00107 		MOV	R7,#1
 1572 07f0 51F8044B 		LDR	R4,[R1],#4
 1573 07f4 0E68     		LDR	R6,[R1]
 1574              	UMMOD0:
 1575 07f6 B619     		ADDS	R6,R6,R6
 1576 07f8 6441     		ADCS	R4,R4,R4
 1577 07fa 04D3     		BCC	UMMOD1
 1578 07fc A4EB0504 		SUB	R4,R4,R5
 1579 0800 06F10106 		ADD	R6,R6,#1
 1580 0804 04E0     		B UMMOD2
 1581              	UMMOD1:
ARM GAS  stm32eforth.s 			page 31


 1582 0806 641B     		SUBS	R4,R4,R5 
 1583 0808 56F10106 		ADCS	R6,R6,#1
 1584 080c 00D2     		BCS	UMMOD2
 1585 080e 2C44     		ADD	R4,R4,R5
 1586              	UMMOD2:
 1587 0810 FF19     		ADDS	R7,R7,R7
 1588 0812 F0D3     		BCC	UMMOD0
 1589 0814 3546     		MOV	R5,R6
 1590 0816 0C60     		STR	R4,[R1]
 1591 0818 7047     		_NEXT
 1592 081a 00BF     		.align 2 
 1593              	
 1594              	//    M/MOD	( d n -- r q )
 1595              	// 	Signed floored divide of double by single. Return mod and quotient.
 1596              	
 1597 081c E4070000 		.word	_UMMOD-MAPOFFSET
 1598 0820 05       	_MSMOD:	.byte  5
 1599 0821 4D2F4D4F 		.ascii "M/MOD"
 1599      44
 1600 0826 00BF     		.align 2 	
 1601              	MSMOD:	
 1602 0828 42F804ED 		_NEST
 1603 082c FFF74AFD 		BL	DUPP
 1604 0830 FFF764FD 		BL	ZLESS
 1605 0834 FFF746FD 		BL	DUPP
 1606 0838 FFF728FD 		BL	TOR
 1607 083c FFF7D6FC 		BL	QBRAN
 1608 0840 54080000 		.word	MMOD1-MAPOFFSET
 1609 0844 FFF77EFE 		BL	NEGAT
 1610 0848 FFF720FD 		BL	TOR
 1611 084c FFF702FF 		BL	DNEGA
 1612 0850 FFF70AFD 		BL	RFROM
 1613              	MMOD1:
 1614 0854 FFF71AFD 	  BL	TOR
 1615 0858 FFF734FD 		BL	DUPP
 1616 085c FFF74EFD 		BL	ZLESS
 1617 0860 FFF7C4FC 		BL	QBRAN
 1618 0864 70080000 		.word	MMOD2-MAPOFFSET
 1619 0868 FFF708FD 		BL	RAT
 1620 086c FFF792FD 		BL	PLUS
 1621              	MMOD2:
 1622 0870 FFF7FAFC 	  BL	RFROM
 1623 0874 FFF7BAFF 		BL	UMMOD
 1624 0878 FFF7F6FC 		BL	RFROM
 1625 087c FFF7B6FC 		BL	QBRAN
 1626 0880 90080000 		.word	MMOD3-MAPOFFSET
 1627 0884 FFF728FD 		BL	SWAP
 1628 0888 FFF75CFE 		BL	NEGAT
 1629 088c FFF724FD 		BL	SWAP
 1630              	MMOD3:   
 1631 0890 52F804FB 		_UNNEST
 1632              		.align 2 
 1633              	
 1634              	//    /MOD	( n n -- r q )
 1635              	// 	Signed divide. Return mod and quotient.
 1636              	
 1637 0894 20080000 		.word	_MSMOD-MAPOFFSET
ARM GAS  stm32eforth.s 			page 32


 1638 0898 04       	_SLMOD:	.byte   4
 1639 0899 2F4D4F44 		.ascii "/MOD"
 1640 089d 0000BF   		.align 2 	
 1641              	SLMOD:
 1642 08a0 42F804ED 		_NEST
 1643 08a4 FFF722FD 		BL	OVER
 1644 08a8 FFF728FD 		BL	ZLESS
 1645 08ac FFF714FD 		BL	SWAP
 1646 08b0 FFF7BAFF 		BL	MSMOD
 1647 08b4 52F804FB 		_UNNEST
 1648              		.align 2 
 1649              	//    MOD	 ( n n -- r )
 1650              	// 	Signed divide. Return mod only.
 1651              	
 1652 08b8 98080000 		.word	_SLMOD-MAPOFFSET
 1653 08bc 03       	_MODD:	.byte  3
 1654 08bd 4D4F44   		.ascii "MOD"
 1655              		.align 2 	
 1656              	MODD:
 1657 08c0 42F804ED 		_NEST
 1658 08c4 FFF7ECFF 		BL	SLMOD
 1659 08c8 FFF7F4FC 		BL	DROP
 1660 08cc 52F804FB 		_UNNEST
 1661              		.align 2 
 1662              	//    /	   ( n n -- q )
 1663              	// 	Signed divide. Return quotient only.
 1664              	
 1665 08d0 BC080000 		.word	_MODD-MAPOFFSET
 1666 08d4 01       	_SLASH:	.byte  1
 1667 08d5 2F       		.ascii "/"
 1668 08d6 00BF     		.align 2 	
 1669              	SLASH:
 1670 08d8 42F804ED 		_NEST
 1671 08dc FFF7E0FF 		BL	SLMOD
 1672 08e0 FFF7FAFC 		BL	SWAP
 1673 08e4 FFF7E6FC 		BL	DROP
 1674 08e8 52F804FB 		_UNNEST
 1675              		.align 2 
 1676              	//    */MOD	( n1 n2 n3 -- r q )
 1677              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1678              	
 1679 08ec D4080000 		.word	_SLASH-MAPOFFSET
 1680 08f0 05       	_SSMOD:	.byte  5
 1681 08f1 2A2F4D4F 		.ascii "*/MOD"
 1681      44
 1682 08f6 00BF     		.align 2 	
 1683              	SSMOD:
 1684 08f8 42F804ED 		_NEST
 1685 08fc FFF7C6FC 		BL	TOR
 1686 0900 FFF76EFD 		BL	MSTAR
 1687 0904 FFF7B0FC 		BL	RFROM
 1688 0908 FFF78EFF 		BL	MSMOD
 1689 090c 52F804FB 		_UNNEST
 1690              		.align 2 
 1691              	//    */	  ( n1 n2 n3 -- q )
 1692              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1693              	
ARM GAS  stm32eforth.s 			page 33


 1694 0910 F0080000 		.word	_SSMOD-MAPOFFSET
 1695 0914 02       	_STASL:	.byte  2
 1696 0915 2A2F     		.ascii "*/"
 1697 0917 00       		.align 2 	
 1698              	STASL:
 1699 0918 42F804ED 		_NEST
 1700 091c FFF7ECFF 		BL	SSMOD
 1701 0920 FFF7DAFC 		BL	SWAP
 1702 0924 FFF7C6FC 		BL	DROP
 1703 0928 52F804FB 		_UNNEST
 1704              		.align 2 
 1705              	// **************************************************************************
 1706              	//  Miscellaneous
 1707              	
 1708              	//    ALIGNED	( b -- a )
 1709              	// 	Align address to the cell boundary.
 1710              	
 1711 092c 14090000 		.word	_STASL-MAPOFFSET
 1712 0930 07       	_ALGND:	.byte   7
 1713 0931 414C4947 		.ascii "ALIGNED"
 1713      4E4544
 1714              		.align 2 	
 1715              	ALGND:
 1716 0938 05F10305 		ADD	R5,R5,#3
 1717 093c 6FF00304 		MVN	R4,#3
 1718 0940 05EA0405 		AND	R5,R5,R4
 1719 0944 7047     		_NEXT
 1720 0946 00BF     		.align 2 
 1721              	
 1722              	//    >CHAR	( c -- c )
 1723              	// 	Filter non-printing characters.
 1724              	
 1725 0948 30090000 		.word	_ALGND-MAPOFFSET
 1726 094c 05       	_TCHAR:	.byte  5
 1727 094d 3E434841 		.ascii ">CHAR"
 1727      52
 1728 0952 00BF     		.align 2 	
 1729              	TCHAR:
 1730 0954 42F804ED 		_NEST
 1731 0958 FFF722FC 		_DOLIT
 1732 095c 7F000000 		.word	0x7F
 1733 0960 FFF7D6FC 		BL	ANDD
 1734 0964 FFF7AEFC 		BL	DUPP	// mask msb
 1735 0968 FFF778FD 		BL	BLANK
 1736 096c FFF718FC 		_DOLIT
 1737 0970 7F000000 		.word	127
 1738 0974 FFF724FF 		BL	WITHI	// check for printable
 1739 0978 FFF7DAFD 		BL	INVER
 1740 097c FFF736FC 		BL	QBRAN
 1741 0980 90090000 		.word	TCHA1-MAPOFFSET
 1742 0984 FFF796FC 		BL	DROP
 1743 0988 FFF70AFC 		_DOLIT
 1744 098c 5F000000 		.word	'_'	// replace non-printables
 1745              	TCHA1:
 1746 0990 52F804FB 		  _UNNEST
 1747              		.align 2 
 1748              	//    DEPTH	( -- n )
ARM GAS  stm32eforth.s 			page 34


 1749              	// 	Return the depth of the data stack.
 1750              	
 1751 0994 4C090000 		.word	_TCHAR-MAPOFFSET
 1752 0998 05       	_DEPTH:	.byte  5
 1753 0999 44455054 		.ascii "DEPTH"
 1753      48
 1754 099e 00BF     		.align 2 	
 1755              	DEPTH:
 1756 09a0 41F8045D 		_PUSH
 1757 09a4 4FF60065 		MOVW	R5,#0XFE00
 1758              	// 	MOVT	R5,#0X2000
 1759 09a8 A5EB0105 		SUB	R5,R5,R1
 1760 09ac 4FEAA505 		ASR	R5,R5,#2
 1761 09b0 A5F10105 		SUB	R5,R5,#1
 1762 09b4 7047     		_NEXT
 1763 09b6 00BF     		.align 2 
 1764              	
 1765              	//    PICK	( ... +n -- ... w )
 1766              	// 	Copy the nth stack item to tos.
 1767              	
 1768 09b8 98090000 		.word	_DEPTH-MAPOFFSET
 1769 09bc 04       	_PICK:	.byte  4
 1770 09bd 5049434B 		.ascii "PICK"
 1771 09c1 0000BF   		.align 2 	
 1772              	PICK:
 1773 09c4 42F804ED 		_NEST
 1774 09c8 FFF714FD 		BL	ONEP
 1775 09cc FFF752FD 		BL	CELLS
 1776 09d0 FFF766FC 		BL	SPAT
 1777 09d4 FFF7DEFC 		BL	PLUS
 1778 09d8 FFF730FC 		BL	AT
 1779 09dc 52F804FB 		_UNNEST
 1780              		.align 2 
 1781              	
 1782              	// **************************************************************************
 1783              	//  Memory access
 1784              	
 1785              	//    HERE	( -- a )
 1786              	// 	Return the top of the code dictionary.
 1787              	
 1788 09e0 BC090000 		.word	_PICK-MAPOFFSET
 1789 09e4 04       	_HERE:	.byte  4
 1790 09e5 48455245 		.ascii "HERE"
 1791 09e9 0000BF   		.align 2 	
 1792              	HERE:
 1793 09ec 42F804ED 		_NEST
 1794 09f0 FFF7C2FE 		BL	CPP
 1795 09f4 FFF722FC 		BL	AT
 1796 09f8 52F804FB 		_UNNEST
 1797              		.align 2 
 1798              		
 1799              	//    PAD	 ( -- a )
 1800              	// 	Return the address of a temporary buffer.
 1801              	
 1802 09fc E4090000 		.word	_HERE-MAPOFFSET
 1803 0a00 03       	_PAD:	.byte  3
 1804 0a01 504144   		.ascii "PAD"
ARM GAS  stm32eforth.s 			page 35


 1805              		.align 2 	
 1806              	PAD:
 1807 0a04 42F804ED 		_NEST
 1808 0a08 FFF7F0FF 		BL	HERE
 1809              	
 1810 0a0c 4FF48076 		mov r6,#0x100
 1811 0a10 C2F20006 		movt r6,#0x2000
 1812 0a14 B542     		cmp R5,R6 
 1813 0a16 05D0     		beq good
 1814 0a18 41F8045D 		_PUSH 
 1815 0a1c 4FF05A05 		mov  R5,#'Z' 
 1816 0a20 FFF7ACFB 		BL EMIT 
 1817              	good: 
 1818              	
 1819 0a24 05F15005 		ADD	R5,R5,#80
 1820 0a28 52F804FB 		_UNNEST
 1821              		.align 2 
 1822              	//    TIB	 ( -- a )
 1823              	// 	Return the address of the terminal input buffer.
 1824              	
 1825 0a2c 000A0000 		.word	_PAD-MAPOFFSET
 1826 0a30 03       	_TIB:	.byte  3
 1827 0a31 544942   		.ascii "TIB"
 1828              		.align 2 	
 1829              		.equ TIB_ADR, 0x20004F00
 1830              	TIB:
 1831 0a34 41F8045D 		_PUSH
 1832 0a38 4FF49E45 		mov r5,#TIB_ADR&0xffff
 1833 0a3c C2F20005 		movt r5,#TIB_ADR>>16
 1834 0a40 7047     		_NEXT
 1835 0a42 00BF     		.align 2 
 1836              	
 1837              	//    @EXECUTE	( a -- )
 1838              	// 	Execute vector stored in address a.
 1839              	
 1840 0a44 300A0000 		.word	_TIB-MAPOFFSET
 1841 0a48 08       	_ATEXE:	.byte   8
 1842 0a49 40455845 		.ascii "@EXECUTE"
 1842      43555445 
 1843 0a51 0000BF   		.align 2 	
 1844              	ATEXE:
 1845 0a54 2C00     		MOVS	R4,R5
 1846 0a56 51F8045B 		_POP
 1847 0a5a 2468     		LDR	R4,[R4]
 1848 0a5c 44F00104 		ORR	R4,R4,#1
 1849 0a60 18BF     	    IT NE 
 1850 0a62 2047     		BXNE	R4
 1851 0a64 7047     		_NEXT
 1852 0a66 00BF     		.align 2 
 1853              	
 1854              	//    CMOVE	( b1 b2 u -- )
 1855              	// 	Copy u bytes from b1 to b2.
 1856              	
 1857 0a68 480A0000 		.word	_ATEXE-MAPOFFSET
 1858 0a6c 05       	_CMOVE:	.byte   5
 1859 0a6d 434D4F56 		.ascii "CMOVE"
 1859      45
ARM GAS  stm32eforth.s 			page 36


 1860 0a72 00BF     		.align 2 	
 1861              	CMOVE:
 1862 0a74 51F8046B 		LDR	R6,[R1],#4
 1863 0a78 51F8047B 		LDR	R7,[R1],#4
 1864 0a7c 03E0     		B CMOV1
 1865              	CMOV0:
 1866 0a7e 17F8014B 		LDRB	R4,[R7],#1
 1867 0a82 06F8014B 		STRB	R4,[R6],#1
 1868              	CMOV1:
 1869 0a86 2D00     		MOVS	R5,R5
 1870 0a88 02D0     		BEQ	CMOV2
 1871 0a8a A5F10105 		SUB	R5,R5,#1
 1872 0a8e F6E7     		B CMOV0
 1873              	CMOV2:
 1874 0a90 51F8045B 		_POP
 1875 0a94 7047     		_NEXT
 1876 0a96 00BF     		.align 2 
 1877              	
 1878              	//    MOVE	( a1 a2 u -- )
 1879              	// 	Copy u words from a1 to a2.
 1880              	
 1881 0a98 6C0A0000 		.word	_CMOVE-MAPOFFSET
 1882 0a9c 04       	_MOVE:	.byte   4
 1883 0a9d 4D4F5645 		.ascii "MOVE"
 1884 0aa1 0000BF   		.align 2 	
 1885              	MOVE:
 1886 0aa4 25F00305 		AND	R5,R5,#-4
 1887 0aa8 51F8046B 		LDR	R6,[R1],#4
 1888 0aac 51F8047B 		LDR	R7,[R1],#4
 1889 0ab0 03E0     		B MOVE1
 1890              	MOVE0:
 1891 0ab2 57F8044B 		LDR	R4,[R7],#4
 1892 0ab6 46F8044B 		STR	R4,[R6],#4
 1893              	MOVE1:
 1894 0aba 2D00     		MOVS	R5,R5
 1895 0abc 02D0     		BEQ	MOVE2
 1896 0abe A5F10405 		SUB	R5,R5,#4
 1897 0ac2 F6E7     		B MOVE0
 1898              	MOVE2:
 1899 0ac4 51F8045B 		_POP
 1900 0ac8 7047     		_NEXT
 1901 0aca 00BF     		.align 2 
 1902              	
 1903              	//    FILL	( b u c -- )
 1904              	// 	Fill u bytes of character c to area beginning at b.
 1905              	
 1906 0acc 9C0A0000 		.word	_MOVE-MAPOFFSET
 1907 0ad0 04       	_FILL:	.byte   4
 1908 0ad1 46494C4C 		.ascii "FILL"
 1909 0ad5 0000BF   		.align 2 	
 1910              	FILL:
 1911 0ad8 51F8046B 		LDR	R6,[R1],#4
 1912 0adc 51F8047B 		LDR	R7,[R1],#4
 1913              	FILL0:
 1914 0ae0 00E0     		B FILL1
 1915 0ae2 2D46     		MOV	R5,R5
 1916              	FILL1:
ARM GAS  stm32eforth.s 			page 37


 1917 0ae4 07F8015B 		STRB	R5,[R7],#1
 1918 0ae8 3600     		MOVS	R6,R6
 1919 0aea 02D0     		BEQ	FILL2
 1920 0aec A6F10106 		SUB	R6,R6,#1
 1921 0af0 F6E7     		B FILL0
 1922              	FILL2:
 1923 0af2 51F8045B 		_POP
 1924 0af6 7047     		_NEXT
 1925              		.align 2 
 1926              	//    PACK$	( b u a -- a )
 1927              	// 	Build a countedDCB with u characters from b. Null fill.
 1928              	
 1929 0af8 D00A0000 		.word	_FILL-MAPOFFSET
 1930 0afc 05       	_PACKS:	.byte  5
 1931 0afd 5041434B 		.ascii "PACK$$"
 1931      2424
 1932 0b03 00       		.align 2 	
 1933              	PACKS:
 1934 0b04 42F804ED 		_NEST
 1935 0b08 FFF716FF 		BL	ALGND
 1936 0b0c FFF7DAFB 		BL	DUPP
 1937 0b10 FFF7BCFB 		BL	TOR			// strings only on cell boundary
 1938 0b14 FFF7EAFB 		BL	OVER
 1939 0b18 FFF73CFC 		BL	PLUS
 1940 0b1c FFF76AFC 		BL	ONEP
 1941 0b20 FFF73EFB 		_DOLIT
 1942 0b24 FCFFFFFF 		.word	0xFFFFFFFC
 1943 0b28 FFF7F2FB 		BL	ANDD			// count mod cell
 1944 0b2c FFF738FB 		_DOLIT
 1945 0b30 00000000 		.word	0
 1946 0b34 FFF7D0FB 		BL	SWAP
 1947 0b38 FFF776FB 		BL	STORE			// null fill cell
 1948 0b3c FFF79EFB 		BL	RAT
 1949 0b40 FFF7DEFC 		BL	DDUP
 1950 0b44 FFF780FB 		BL	CSTOR
 1951 0b48 FFF754FC 		BL	ONEP			// save count
 1952 0b4c FFF7C4FB 		BL	SWAP
 1953 0b50 FFF790FF 		BL	CMOVE
 1954 0b54 FFF788FB 		BL	RFROM
 1955 0b58 52F804FB 		_UNNEST   			// move string
 1956              		.align 2 
 1957              	// **************************************************************************
 1958              	//  Numeric output, single precision
 1959              	
 1960              	//    DIGIT	( u -- c )
 1961              	// 	Convert digit u to a character.
 1962              	
 1963 0b5c FC0A0000 		.word	_PACKS-MAPOFFSET
 1964 0b60 05       	_DIGIT:	.byte  5
 1965 0b61 44494749 		.ascii "DIGIT"
 1965      54
 1966 0b66 00BF     		.align 2 	
 1967              	DIGIT:
 1968 0b68 42F804ED 		_NEST
 1969 0b6c FFF718FB 		_DOLIT
 1970 0b70 09000000 		.word	9
 1971 0b74 FFF7BAFB 		BL	OVER
ARM GAS  stm32eforth.s 			page 38


 1972 0b78 FFF70EFD 		BL	LESS
 1973 0b7c 05F00705 		AND	R5,R5,#7
 1974 0b80 FFF708FC 		BL	PLUS
 1975 0b84 05F13005 		ADD	R5,R5,#'0'
 1976 0b88 52F804FB 		_UNNEST
 1977              		.align 2 
 1978              	//    EXTRACT	( n base -- n c )
 1979              	// 	Extract the least significant digit from n.
 1980              	
 1981 0b8c 600B0000 		.word	_DIGIT-MAPOFFSET
 1982 0b90 07       	_EXTRC:	.byte  7
 1983 0b91 45585452 		.ascii "EXTRACT"
 1983      414354
 1984              		.align 2 	
 1985              	EXTRC:
 1986 0b98 42F804ED 		_NEST
 1987 0b9c FFF700FB 		_DOLIT
 1988 0ba0 00000000 		.word	0
 1989 0ba4 FFF798FB 		BL	SWAP
 1990 0ba8 FFF720FE 		BL	UMMOD
 1991 0bac FFF794FB 		BL	SWAP
 1992 0bb0 FFF7DAFF 		BL	DIGIT
 1993 0bb4 52F804FB 		_UNNEST
 1994              		.align 2 
 1995              	//    <#	  ( -- )
 1996              	// 	Initiate the numeric output process.
 1997              	
 1998 0bb8 900B0000 		.word	_EXTRC-MAPOFFSET
 1999 0bbc 02       	_BDIGS:	.byte  2
 2000 0bbd 3C23     		.ascii "<#"
 2001 0bbf 00       		.align 2 	
 2002              	BDIGS:
 2003 0bc0 42F804ED 		_NEST
 2004 0bc4 FFF71EFF 		BL	PAD
 2005 0bc8 FFF7C0FD 		BL	HLD
 2006 0bcc FFF72CFB 		BL	STORE
 2007 0bd0 52F804FB 		_UNNEST
 2008              		.align 2 
 2009              	
 2010              	//    HOLD	( c -- )
 2011              	// 	Insert a character into the numeric output string.
 2012              	
 2013 0bd4 BC0B0000 		.word	_BDIGS-MAPOFFSET
 2014 0bd8 04       	_HOLD:	.byte  4
 2015 0bd9 484F4C44 		.ascii "HOLD"
 2016 0bdd 0000BF   		.align 2 	
 2017              	HOLD:
 2018 0be0 42F804ED 		_NEST
 2019 0be4 FFF7B2FD 		BL	HLD
 2020 0be8 FFF728FB 		BL	AT
 2021 0bec FFF70AFC 		BL	ONEM
 2022 0bf0 FFF768FB 		BL	DUPP
 2023 0bf4 FFF7AAFD 		BL	HLD
 2024 0bf8 FFF716FB 		BL	STORE
 2025 0bfc FFF724FB 		BL	CSTOR
 2026 0c00 52F804FB 		_UNNEST
 2027              		.align 2
ARM GAS  stm32eforth.s 			page 39


 2028              	
 2029              	//    #	   ( u -- u )
 2030              	// 	Extract one digit from u and append the digit to output string.
 2031              	
 2032 0c04 D80B0000 		.word	_HOLD-MAPOFFSET
 2033 0c08 01       	_DIG:	.byte  1
 2034 0c09 23       		.ascii "#"
 2035 0c0a 00BF     		.align 2 	
 2036              	DIG:
 2037 0c0c 42F804ED 		_NEST
 2038 0c10 FFF75EFD 		BL	BASE
 2039 0c14 FFF712FB 		BL	AT
 2040 0c18 FFF7BEFF 		BL	EXTRC
 2041 0c1c FFF7E0FF 		BL	HOLD
 2042 0c20 52F804FB 		_UNNEST
 2043              		.align 2 
 2044              	//    #S	  ( u -- 0 )
 2045              	// 	Convert u until all digits are added to the output string.
 2046              	
 2047 0c24 080C0000 		.word	_DIG-MAPOFFSET
 2048 0c28 02       	_DIGS:	.byte  2
 2049 0c29 2353     		.ascii "#S"
 2050 0c2b 00       		.align 2 	
 2051              	DIGS:
 2052 0c2c 42F804ED 		_NEST
 2053              	DIGS1:
 2054 0c30 FFF7ECFF 	    BL	DIG
 2055 0c34 FFF746FB 		BL	DUPP
 2056 0c38 FFF7D8FA 		BL	QBRAN
 2057 0c3c 420C0000 		.word	DIGS2-MAPOFFSET
 2058 0c40 F6E7     		B	DIGS1
 2059              	DIGS2:
 2060 0c42 52F804FB 		  _UNNEST
 2061 0c46 00BF     		.align 2 
 2062              	
 2063              	//    SIGN	( n -- )
 2064              	// 	Add a minus sign to the numeric output string.
 2065              	
 2066 0c48 280C0000 		.word	_DIGS-MAPOFFSET
 2067 0c4c 04       	_SIGN:	.byte  4
 2068 0c4d 5349474E 		.ascii "SIGN"
 2069 0c51 0000BF   		.align 2 	
 2070              	SIGN:
 2071 0c54 42F804ED 		_NEST
 2072 0c58 FFF750FB 		BL	ZLESS
 2073 0c5c FFF7C6FA 		BL	QBRAN
 2074 0c60 700C0000 		.word	SIGN1-MAPOFFSET
 2075 0c64 FFF79CFA 		_DOLIT
 2076 0c68 2D000000 		.word	'-'
 2077 0c6c FFF7B8FF 		BL	HOLD
 2078              	SIGN1:
 2079 0c70 52F804FB 		  _UNNEST
 2080              		.align 2 
 2081              	//    #>	  ( w -- b u )
 2082              	// 	Prepare the outputDCB to be TYPE'd.
 2083              	
 2084 0c74 4C0C0000 		.word	_SIGN-MAPOFFSET
ARM GAS  stm32eforth.s 			page 40


 2085 0c78 02       	_EDIGS:	.byte  2
 2086 0c79 233E     		.ascii "#>"
 2087 0c7b 00       		.align 2 	
 2088              	EDIGS:
 2089 0c7c 42F804ED 		_NEST
 2090 0c80 FFF718FB 		BL	DROP
 2091 0c84 FFF762FD 		BL	HLD
 2092 0c88 FFF7D8FA 		BL	AT
 2093 0c8c FFF7BAFE 		BL	PAD
 2094 0c90 FFF72CFB 		BL	OVER
 2095 0c94 FFF786FB 		BL	SUBB
 2096 0c98 52F804FB 		_UNNEST
 2097              		.align 2 
 2098              	//    str	 ( n -- b u )
 2099              	// 	Convert a signed integer to a numeric string.
 2100              	
 2101              	// 	.word	_EDIGS-MAPOFFSET
 2102              	// _STRR	.byte  3
 2103              	// 	.ascii "str"
 2104              	// 	.align 2 	
 2105              	STRR:
 2106 0c9c 42F804ED 		_NEST
 2107 0ca0 FFF710FB 		BL	DUPP
 2108 0ca4 FFF7F2FA 		BL	TOR
 2109 0ca8 FFF754FC 		BL	ABSS
 2110 0cac FFF788FF 		BL	BDIGS
 2111 0cb0 FFF7BCFF 		BL	DIGS
 2112 0cb4 FFF7D8FA 		BL	RFROM
 2113 0cb8 FFF7CCFF 		BL	SIGN
 2114 0cbc FFF7DEFF 		BL	EDIGS
 2115 0cc0 52F804FB 		_UNNEST
 2116              		.align 2 
 2117              	//    HEX	 ( -- )
 2118              	// 	Use radix 16 as base for numeric conversions.
 2119              	
 2120 0cc4 780C0000 		.word	_EDIGS-MAPOFFSET
 2121 0cc8 03       	_HEX:	.byte  3
 2122 0cc9 484558   		.ascii "HEX"
 2123              		.align 2 	
 2124              	HEX:
 2125 0ccc 42F804ED 		_NEST
 2126 0cd0 FFF766FA 		_DOLIT
 2127 0cd4 10000000 		.word	16
 2128 0cd8 FFF7FAFC 		BL	BASE
 2129 0cdc FFF7A4FA 		BL	STORE
 2130 0ce0 52F804FB 		_UNNEST
 2131              		.align 2
 2132              	
 2133              	//    DECIMAL	( -- )
 2134              	// 	Use radix 10 as base for numeric conversions.
 2135              	
 2136 0ce4 C80C0000 		.word	_HEX-MAPOFFSET
 2137 0ce8 07       	_DECIM:	.byte  7
 2138 0ce9 44454349 		.ascii "DECIMAL"
 2138      4D414C
 2139              		.align 2 	
 2140              	DECIM:
ARM GAS  stm32eforth.s 			page 41


 2141 0cf0 42F804ED 		_NEST
 2142 0cf4 FFF754FA 		_DOLIT
 2143 0cf8 0A000000 		.word	10
 2144 0cfc FFF7E8FC 		BL	BASE
 2145 0d00 FFF792FA 		BL	STORE
 2146 0d04 52F804FB 		_UNNEST
 2147              		.align 2
 2148              	
 2149              	// **************************************************************************
 2150              	//  Numeric input, single precision
 2151              	
 2152              	//    DIGIT?	( c base -- u t )
 2153              	// 	Convert a character to its numeric value. A flag indicates success.
 2154              	
 2155 0d08 E80C0000 		.word	_DECIM-MAPOFFSET
 2156 0d0c 06       	_DIGTQ:	.byte  6
 2157 0d0d 44494749 		.ascii "DIGIT?"
 2157      543F
 2158 0d13 00       		.align 2 	
 2159              	DIGTQ:
 2160 0d14 42F804ED 		_NEST
 2161 0d18 FFF7B8FA 		BL	TOR
 2162 0d1c FFF740FA 		_DOLIT
 2163 0d20 30000000 		.word	'0'
 2164 0d24 FFF73EFB 		BL	SUBB
 2165 0d28 FFF73AFA 		_DOLIT
 2166 0d2c 09000000 		.word	9
 2167 0d30 FFF7DCFA 		BL	OVER
 2168 0d34 FFF730FC 		BL	LESS
 2169 0d38 FFF758FA 		BL	QBRAN
 2170 0d3c 600D0000 		.word	DGTQ1-MAPOFFSET
 2171 0d40 FFF72EFA 		_DOLIT
 2172 0d44 07000000 		.word	7
 2173 0d48 FFF72CFB 		BL	SUBB
 2174 0d4c FFF7BAFA 		BL	DUPP
 2175 0d50 FFF726FA 		_DOLIT
 2176 0d54 0A000000 		.word	10
 2177 0d58 FFF71EFC 		BL	LESS
 2178 0d5c FFF7E2FA 		BL	ORR
 2179              	DGTQ1:
 2180 0d60 FFF7B0FA 	  BL	DUPP
 2181 0d64 FFF780FA 		BL	RFROM
 2182 0d68 FFF70AFC 		BL	ULESS
 2183 0d6c 52F804FB 		_UNNEST
 2184              		.align 2 
 2185              	//    NUMBER?	( a -- n T | a F )
 2186              	// 	Convert a numberDCB to integer. Push a flag on tos.
 2187              	
 2188 0d70 0C0D0000 		.word	_DIGTQ-MAPOFFSET
 2189 0d74 07       	_NUMBQ:	.byte  7
 2190 0d75 4E554D42 		.ascii "NUMBER?"
 2190      45523F
 2191              		.align 2 	
 2192              	NUMBQ:
 2193 0d7c 42F804ED 		_NEST
 2194 0d80 FFF7A6FC 		BL	BASE
 2195 0d84 FFF75AFA 		BL	AT
ARM GAS  stm32eforth.s 			page 42


 2196 0d88 FFF780FA 		BL	TOR
 2197 0d8c FFF708FA 		_DOLIT
 2198 0d90 00000000 		.word	0
 2199 0d94 FFF7AAFA 		BL	OVER
 2200 0d98 FFF750FC 		BL	COUNT
 2201 0d9c FFF7A6FA 		BL	OVER
 2202 0da0 FFF75CFA 		BL	CAT
 2203 0da4 FFF7FCF9 		_DOLIT
 2204 0da8 5F000000 		.word	'_'
 2205 0dac FFF7DCFB 		BL	EQUAL
 2206 0db0 FFF71CFA 		BL	QBRAN
 2207 0db4 CC0D0000 		.word	NUMQ1-MAPOFFSET
 2208 0db8 FFF788FF 		BL	HEX
 2209 0dbc FFF78CFA 		BL	SWAP
 2210 0dc0 FFF718FB 		BL	ONEP
 2211 0dc4 FFF788FA 		BL	SWAP
 2212 0dc8 FFF71CFB 		BL	ONEM
 2213              	NUMQ1:
 2214 0dcc FFF78EFA 	  BL	OVER
 2215 0dd0 FFF744FA 		BL	CAT
 2216 0dd4 FFF7E4F9 		_DOLIT
 2217 0dd8 2D000000 		.word	'-'
 2218 0ddc FFF7C4FB 		BL	EQUAL
 2219 0de0 FFF754FA 		BL	TOR
 2220 0de4 FFF778FA 		BL	SWAP
 2221 0de8 FFF748FA 		BL	RAT
 2222 0dec FFF7DAFA 		BL	SUBB
 2223 0df0 FFF772FA 		BL	SWAP
 2224 0df4 FFF742FA 		BL	RAT
 2225 0df8 FFF7CCFA 		BL	PLUS
 2226 0dfc FFF75EFB 		BL	QDUP
 2227 0e00 FFF7F4F9 		BL	QBRAN
 2228 0e04 900E0000 		.word	NUMQ6-MAPOFFSET
 2229 0e08 FFF7FCFA 		BL	ONEM
 2230 0e0c FFF73EFA 		BL	TOR
 2231              	NUMQ2:
 2232 0e10 FFF758FA 	  BL	DUPP
 2233 0e14 FFF73AFA 		BL	TOR
 2234 0e18 FFF720FA 		BL	CAT
 2235 0e1c FFF758FC 		BL	BASE
 2236 0e20 FFF70CFA 		BL	AT
 2237 0e24 FFF776FF 		BL	DIGTQ
 2238 0e28 FFF7E0F9 		BL	QBRAN
 2239 0e2c 740E0000 		.word	NUMQ4-MAPOFFSET
 2240 0e30 FFF752FA 		BL	SWAP
 2241 0e34 FFF74CFC 		BL	BASE
 2242 0e38 FFF700FA 		BL	AT
 2243 0e3c FFF7BCFA 		BL	STAR
 2244 0e40 FFF7A8FA 		BL	PLUS
 2245 0e44 FFF710FA 		BL	RFROM
 2246 0e48 FFF7D4FA 		BL	ONEP
 2247 0e4c FFF7BEF9 		BL	DONXT
 2248 0e50 100E0000 		.word	NUMQ2-MAPOFFSET
 2249 0e54 FFF712FA 		BL	RAT
 2250 0e58 FFF73EFA 		BL	SWAP
 2251 0e5c FFF72AFA 		BL	DROP
 2252 0e60 FFF7C4F9 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 43


 2253 0e64 6C0E0000 		.word	NUMQ3-MAPOFFSET
 2254 0e68 FFF76CFB 		BL	NEGAT
 2255              	NUMQ3:
 2256 0e6c FFF734FA 	  BL	SWAP
 2257 0e70 00F00CB8 		B.W	NUMQ5
 2258              	NUMQ4:
 2259 0e74 FFF7F8F9 	  BL	RFROM
 2260 0e78 FFF7F6F9 		BL	RFROM
 2261 0e7c FFF734FB 		BL	DDROP
 2262 0e80 FFF732FB 		BL	DDROP
 2263 0e84 FFF78CF9 		_DOLIT
 2264 0e88 00000000 		.word	0
 2265              	NUMQ5:
 2266 0e8c FFF71AFA 	  BL	DUPP
 2267              	NUMQ6:
 2268 0e90 FFF7EAF9 	  BL	RFROM
 2269 0e94 FFF728FB 		BL	DDROP
 2270 0e98 FFF7E6F9 		BL	RFROM
 2271 0e9c FFF718FC 		BL	BASE
 2272 0ea0 FFF7C2F9 		BL	STORE
 2273 0ea4 52F804FB 		_UNNEST
 2274              		.align 2 
 2275              	// **************************************************************************
 2276              	//  Basic I/O
 2277              	
 2278              	//    KEY	 ( -- c )
 2279              	// 	Wait for and return an input character.
 2280              	
 2281 0ea8 740D0000 		.word	_NUMBQ-MAPOFFSET
 2282 0eac 03       	_KEY:	.byte  3
 2283 0ead 4B4559   		.ascii "KEY"
 2284              		.align 2 	
 2285              	KEY:
 2286 0eb0 42F804ED 		_NEST
 2287              	KEY1:
 2288 0eb4 FFF748F9 	  BL	QRX
 2289 0eb8 FFF798F9 		BL	QBRAN
 2290 0ebc B40E0000 		.word	KEY1-MAPOFFSET
 2291 0ec0 52F804FB 		_UNNEST
 2292              		.align 2 
 2293              	//    SPACE	( -- )
 2294              	// 	Send the blank character to the output device.
 2295              	
 2296 0ec4 AC0E0000 		.word	_KEY-MAPOFFSET
 2297 0ec8 05       	_SPACE:	.byte  5
 2298 0ec9 53504143 		.ascii "SPACE"
 2298      45
 2299 0ece 00BF     		.align 2 	
 2300              	SPACE:
 2301 0ed0 42F804ED 		_NEST
 2302 0ed4 FFF7C2FA 		BL	BLANK
 2303 0ed8 FFF750F9 		BL	EMIT
 2304 0edc 52F804FB 		_UNNEST
 2305              		.align 2 
 2306              	//    SPACES	( +n -- )
 2307              	// 	Send n spaces to the output device.
 2308              	
ARM GAS  stm32eforth.s 			page 44


 2309 0ee0 C80E0000 		.word	_SPACE-MAPOFFSET
 2310 0ee4 06       	_SPACS:	.byte  6
 2311 0ee5 53504143 		.ascii "SPACES"
 2311      4553
 2312 0eeb 00       		.align 2 	
 2313              	SPACS:
 2314 0eec 42F804ED 		_NEST
 2315 0ef0 FFF756F9 		_DOLIT
 2316 0ef4 00000000 		.word	0
 2317 0ef8 FFF766FB 		BL	MAX
 2318 0efc FFF7C6F9 		BL	TOR
 2319 0f00 00F002B8 		B.W	CHAR2
 2320              	CHAR1:
 2321 0f04 FFF7E4FF 	  BL	SPACE
 2322              	CHAR2:
 2323 0f08 FFF760F9 	  BL	DONXT
 2324 0f0c 040F0000 		.word	CHAR1-MAPOFFSET
 2325 0f10 52F804FB 		_UNNEST
 2326              		.align 2 
 2327              	
 2328              	//    TYPE	( b u -- )
 2329              	// 	Output u characters from b.
 2330              	
 2331 0f14 E40E0000 		.word	_SPACS-MAPOFFSET
 2332 0f18 04       	_TYPEE:	.byte	4
 2333 0f19 54595045 		.ascii "TYPE"
 2334 0f1d 0000BF   		.align 2 	
 2335              	TYPEE:
 2336 0f20 42F804ED 		_NEST
 2337 0f24 FFF7B2F9 		BL  TOR
 2338 0f28 00F006B8 		B.W	TYPE2
 2339              	TYPE1:  
 2340 0f2c FFF786FB 		BL  COUNT
 2341 0f30 FFF710FD 		BL	TCHAR
 2342 0f34 FFF722F9 		BL	EMIT
 2343              	TYPE2:  
 2344 0f38 FFF748F9 		BL  DONXT
 2345 0f3c 2C0F0000 		.word	TYPE1-MAPOFFSET
 2346 0f40 FFF7B8F9 		BL	DROP
 2347 0f44 52F804FB 		_UNNEST
 2348              		.align 2 
 2349              	
 2350              	//    CR	  ( -- )
 2351              	// 	Output a carriage return and a line feed.
 2352              	
 2353 0f48 180F0000 		.word	_TYPEE-MAPOFFSET
 2354 0f4c 02       	_CR:	.byte  2
 2355 0f4d 4352     		.ascii "CR"
 2356 0f4f 00       		.align 2 	
 2357              	CR:
 2358 0f50 42F804ED 		_NEST
 2359 0f54 FFF724F9 		_DOLIT
 2360 0f58 0D000000 		.word	CRR
 2361 0f5c FFF70EF9 		BL	EMIT
 2362 0f60 FFF71EF9 		_DOLIT
 2363 0f64 0A000000 		.word	LF
 2364 0f68 FFF708F9 		BL	EMIT
ARM GAS  stm32eforth.s 			page 45


 2365 0f6c 52F804FB 		_UNNEST
 2366              		.align 2 
 2367              	//    do_$	( -- a )
 2368              	// 	Return the address of a compiled string.
 2369              	
 2370              	// 	.word	_CR-MAPOFFSET
 2371              	// _DOSTR	.byte  COMPO+3
 2372              	// 	.ascii "do$$"
 2373              	// 	.align 2 	
 2374              	DOSTR:
 2375 0f70 42F804ED 		_NEST
 2376 0f74 FFF778F9 		BL	RFROM
 2377 0f78 FFF776F9 		BL	RFROM			//  b0 set
 2378 0f7c FFF742FA 		BL	ONEM			//  clear b0
 2379 0f80 FFF7A0F9 		BL	DUPP
 2380 0f84 FFF75AFB 		BL	COUNT			//  get addr-1 count
 2381 0f88 FFF704FA 		BL	PLUS
 2382 0f8c FFF7D4FC 		BL	ALGND			//  end of string
 2383 0f90 FFF730FA 		BL	ONEP			//  restore b0
 2384 0f94 FFF77AF9 		BL	TOR				//  address after string
 2385 0f98 FFF79EF9 		BL	SWAP			//  count tugged
 2386 0f9c FFF776F9 		BL	TOR
 2387 0fa0 52F804FB 		_UNNEST
 2388              		.align 2 
 2389              	//    $"|	( -- a )
 2390              	// 	Run time routine compiled by _". Return address of a compiled string.
 2391              	
 2392              	// 	.word	_DOSTR-MAPOFFSET
 2393              	// _STRQP	.byte  COMPO+3
 2394              	// 	.ascii "$$""|"
 2395              	// 	.align 2 	
 2396              	STRQP:
 2397 0fa4 42F804ED 		_NEST
 2398 0fa8 FFF7E2FF 		BL	DOSTR
 2399 0fac 52F804FB 		_UNNEST			// force a call to dostr
 2400              		.align 2 
 2401              	//    .$	( -- )
 2402              	// 	Run time routine of ." . Output a compiled string.
 2403              	
 2404              	// 	.word	_STRQP-MAPOFFSET
 2405              	// _DOTST	.byte  COMPO+2
 2406              	// 	.ascii ".$$"
 2407              	// 	.align 2 	
 2408              	DOTST:
 2409 0fb0 42F804ED 		_NEST
 2410 0fb4 FFF742FB 		BL	COUNT
 2411 0fb8 FFF7B2FF 		BL	TYPEE
 2412 0fbc 52F804FB 		_UNNEST
 2413              		.align 2 
 2414              	//    ."|	( -- )
 2415              	// 	Run time routine of ." . Output a compiled string.
 2416              	
 2417              	// 	.word	_DOTST-MAPOFFSET
 2418              	// _DOTQP	.byte  COMPO+3
 2419              	// 	.ascii ".""|"
 2420              	// 	.align 2 	
 2421              	DOTQP:
ARM GAS  stm32eforth.s 			page 46


 2422 0fc0 42F804ED 		_NEST
 2423 0fc4 FFF7D4FF 		BL	DOSTR
 2424 0fc8 FFF7F2FF 		BL	DOTST
 2425 0fcc 52F804FB 		_UNNEST
 2426              		.align 2 
 2427              	//    .R	  ( n +n -- )
 2428              	// 	Display an integer in a field of n columns, right justified.
 2429              	
 2430 0fd0 4C0F0000 		.word	_CR-MAPOFFSET
 2431 0fd4 02       	_DOTR:	.byte  2
 2432 0fd5 2E52     		.ascii ".R"
 2433 0fd7 00       		.align 2 	
 2434              	DOTR:
 2435 0fd8 42F804ED 		_NEST
 2436 0fdc FFF756F9 		BL	TOR
 2437 0fe0 FFF75CFE 		BL	STRR
 2438 0fe4 FFF740F9 		BL	RFROM
 2439 0fe8 FFF780F9 		BL	OVER
 2440 0fec FFF7DAF9 		BL	SUBB
 2441 0ff0 FFF77CFF 		BL	SPACS
 2442 0ff4 FFF794FF 		BL	TYPEE
 2443 0ff8 52F804FB 		_UNNEST
 2444              		.align 2 
 2445              	//    U.R	 ( u +n -- )
 2446              	// 	Display an unsigned integer in n column, right justified.
 2447              	
 2448 0ffc D40F0000 		.word	_DOTR-MAPOFFSET
 2449 1000 03       	_UDOTR:	.byte  3
 2450 1001 552E52   		.ascii "U.R"
 2451              		.align 2 	
 2452              	UDOTR:
 2453 1004 42F804ED 		_NEST
 2454 1008 FFF740F9 		BL	TOR
 2455 100c FFF7D8FD 		BL	BDIGS
 2456 1010 FFF70CFE 		BL	DIGS
 2457 1014 FFF732FE 		BL	EDIGS
 2458 1018 FFF726F9 		BL	RFROM
 2459 101c FFF766F9 		BL	OVER
 2460 1020 FFF7C0F9 		BL	SUBB
 2461 1024 FFF762FF 		BL	SPACS
 2462 1028 FFF77AFF 		BL	TYPEE
 2463 102c 52F804FB 		_UNNEST
 2464              		.align 2 
 2465              	//    U.	  ( u -- )
 2466              	// 	Display an unsigned integer in free format.
 2467              	
 2468 1030 00100000 		.word	_UDOTR-MAPOFFSET
 2469 1034 02       	_UDOT:	.byte  2
 2470 1035 552E     		.ascii "U."
 2471 1037 00       		.align 2 	
 2472              	UDOT:
 2473 1038 42F804ED 		_NEST
 2474 103c FFF7C0FD 		BL	BDIGS
 2475 1040 FFF7F4FD 		BL	DIGS
 2476 1044 FFF71AFE 		BL	EDIGS
 2477 1048 FFF742FF 		BL	SPACE
 2478 104c FFF768FF 		BL	TYPEE
ARM GAS  stm32eforth.s 			page 47


 2479 1050 52F804FB 		_UNNEST
 2480              		.align 2 
 2481              	//    .	   ( w -- )
 2482              	// 	Display an integer in free format, preceeded by a space.
 2483              	
 2484 1054 34100000 		.word	_UDOT-MAPOFFSET
 2485 1058 01       	_DOT:	.byte  1
 2486 1059 2E       		.ascii "."
 2487 105a 00BF     		.align 2 	
 2488              	DOT:
 2489 105c 42F804ED 		_NEST
 2490 1060 FFF736FB 		BL	BASE
 2491 1064 FFF7EAF8 		BL	AT
 2492 1068 FFF79AF8 		_DOLIT
 2493 106c 0A000000 		.word	10
 2494 1070 FFF762F9 		BL	XORR			// ?decimal
 2495 1074 FFF7BAF8 		BL	QBRAN
 2496 1078 84100000 		.word	DOT1-MAPOFFSET
 2497 107c FFF7DCFF 		BL	UDOT
 2498 1080 52F804FB 		_UNNEST			// no,display unsigned
 2499              	DOT1:
 2500 1084 FFF70AFE 	    BL	STRR
 2501 1088 FFF722FF 		BL	SPACE
 2502 108c FFF748FF 		BL	TYPEE
 2503 1090 52F804FB 		_UNNEST			// yes, display signed
 2504              		.align 2 
 2505              	//    ?	   ( a -- )
 2506              	// 	Display the contents in a memory cell.
 2507              	
 2508 1094 58100000 		.word	_DOT-MAPOFFSET
 2509 1098 01       	_QUEST:	.byte  1
 2510 1099 3F       		.ascii "?"
 2511 109a 00BF     		.align 2 	
 2512              	QUEST:
 2513 109c 42F804ED 		_NEST
 2514 10a0 FFF7CCF8 		BL	AT
 2515 10a4 FFF7DAFF 		BL	DOT
 2516 10a8 52F804FB 		_UNNEST
 2517              		.align 2 
 2518              	
 2519              	// **************************************************************************
 2520              	//  Parsing
 2521              	
 2522              	//    parse	( b u c -- b u delta //  string> )
 2523              	// 	ScanDCB delimited by c. Return found string and its offset.
 2524              	
 2525              	// 	.word	_QUEST-MAPOFFSET
 2526              	// _PARS	.byte  5
 2527              	// 	.ascii "parse"
 2528              	// 	.align 2 	
 2529              	PARS:
 2530 10ac 42F804ED 		_NEST
 2531 10b0 FFF714FB 		BL	TEMP
 2532 10b4 FFF7B8F8 		BL	STORE
 2533 10b8 FFF718F9 		BL	OVER
 2534 10bc FFF7E6F8 		BL	TOR
 2535 10c0 FFF700F9 		BL	DUPP
ARM GAS  stm32eforth.s 			page 48


 2536 10c4 FFF792F8 		BL	QBRAN
 2537 10c8 BA110000 		.word	PARS8-MAPOFFSET
 2538 10cc FFF79AF9 		BL	ONEM
 2539 10d0 FFF704FB 		BL	TEMP
 2540 10d4 FFF7B2F8 		BL	AT
 2541 10d8 FFF7C0F9 		BL	BLANK
 2542 10dc FFF744FA 		BL	EQUAL
 2543 10e0 FFF784F8 		BL	QBRAN
 2544 10e4 34110000 		.word	PARS3-MAPOFFSET
 2545 10e8 FFF7D0F8 		BL	TOR
 2546              	PARS1:
 2547 10ec FFF7B6F9 	  BL	BLANK
 2548 10f0 FFF7FCF8 		BL	OVER
 2549 10f4 FFF7B2F8 		BL	CAT			// skip leading blanks 
 2550 10f8 FFF754F9 		BL	SUBB
 2551 10fc FFF7FEF8 		BL	ZLESS
 2552 1100 FFF716FA 		BL	INVER
 2553 1104 FFF772F8 		BL	QBRAN
 2554 1108 30110000 		.word	PARS2-MAPOFFSET
 2555 110c FFF772F9 		BL	ONEP
 2556 1110 FFF75CF8 		BL	DONXT
 2557 1114 EC100000 		.word	PARS1-MAPOFFSET
 2558 1118 FFF7A6F8 		BL	RFROM
 2559 111c FFF7CAF8 		BL	DROP
 2560 1120 FFF73EF8 		_DOLIT
 2561 1124 00000000 		.word	0
 2562 1128 FFF7CCF8 		BL	DUPP
 2563 112c 52F804FB 		_UNNEST
 2564              	PARS2:
 2565 1130 FFF79AF8 	  BL	RFROM
 2566              	PARS3:
 2567 1134 FFF7DAF8 	  BL	OVER
 2568 1138 FFF7CEF8 		BL	SWAP
 2569 113c FFF7A6F8 		BL	TOR
 2570              	PARS4:
 2571 1140 FFF7CCFA 	  BL	TEMP
 2572 1144 FFF77AF8 		BL	AT
 2573 1148 FFF7D0F8 		BL	OVER
 2574 114c FFF786F8 		BL	CAT
 2575 1150 FFF728F9 		BL	SUBB			// scan for delimiter
 2576 1154 FFF7C2FA 		BL	TEMP
 2577 1158 FFF770F8 		BL	AT
 2578 115c FFF77EF9 		BL	BLANK
 2579 1160 FFF702FA 		BL	EQUAL
 2580 1164 FFF742F8 		BL	QBRAN
 2581 1168 70110000 		.word	PARS5-MAPOFFSET
 2582 116c FFF7C6F8 		BL	ZLESS
 2583              	PARS5:
 2584 1170 FFF73CF8 	  BL	QBRAN
 2585 1174 8E110000 		.word	PARS6-MAPOFFSET
 2586 1178 FFF73CF9 		BL	ONEP
 2587 117c FFF726F8 		BL	DONXT
 2588 1180 40110000 		.word	PARS4-MAPOFFSET
 2589 1184 FFF79EF8 		BL	DUPP
 2590 1188 FFF780F8 		BL	TOR
 2591 118c 09E0     		B	PARS7
 2592              	PARS6:
ARM GAS  stm32eforth.s 			page 49


 2593 118e FFF76BF8 	  BL	RFROM
 2594 1192 FFF78FF8 		BL	DROP
 2595 1196 FFF795F8 		BL	DUPP
 2596 119a FFF72BF9 		BL	ONEP
 2597 119e FFF775F8 		BL	TOR
 2598              	PARS7:
 2599 11a2 FFF7A3F8 	  BL	OVER
 2600 11a6 FFF7FDF8 		BL	SUBB
 2601 11aa FFF75DF8 		BL	RFROM
 2602 11ae FFF75BF8 		BL	RFROM
 2603 11b2 FFF7F7F8 		BL	SUBB
 2604 11b6 52F804FB 		_UNNEST
 2605              	PARS8:
 2606 11ba FFF797F8 	  BL	OVER
 2607 11be FFF753F8 		BL	RFROM
 2608 11c2 FFF7EFF8 		BL	SUBB
 2609 11c6 52F804FB 		_UNNEST
 2610 11ca 00BF     		.align 2 
 2611              	
 2612              	//    PARSE	( c -- b u //  string> )
 2613              	// 	Scan input stream and return counted string delimited by c.
 2614              	
 2615 11cc 98100000 		.word	_QUEST-MAPOFFSET
 2616 11d0 05       	_PARSE:	.byte  5
 2617 11d1 50415253 		.ascii "PARSE"
 2617      45
 2618 11d6 00BF     		.align 2 	
 2619              	PARSE:
 2620 11d8 42F804ED 		_NEST
 2621 11dc FFF756F8 		BL	TOR
 2622 11e0 FFF728FC 		BL	TIB
 2623 11e4 FFF790FA 		BL	INN
 2624 11e8 FFF728F8 		BL	AT
 2625 11ec FFF7D2F8 		BL	PLUS			// current input buffer pointer
 2626 11f0 FFF796FA 		BL	NTIB
 2627 11f4 FFF722F8 		BL	AT
 2628 11f8 FFF786FA 		BL	INN
 2629 11fc FFF71EF8 		BL	AT
 2630 1200 FFF7D0F8 		BL	SUBB			// remaining count
 2631 1204 FFF730F8 		BL	RFROM
 2632 1208 FFF750FF 		BL	PARS
 2633 120c FFF77CFA 		BL	INN
 2634 1210 FFF7EEF9 		BL	PSTOR
 2635 1214 52F804FB 		_UNNEST
 2636              		.align 2 
 2637              	//    .(	  ( -- )
 2638              	// 	Output following string up to next ) .
 2639              	
 2640 1218 D0110000 		.word	_PARSE-MAPOFFSET
 2641 121c 82       	_DOTPR:	.byte  IMEDD+2
 2642 121d 2E28     		.ascii ".("
 2643 121f 00       		.align 2 	
 2644              	DOTPR:
 2645 1220 42F804ED 		_NEST
 2646 1224 FEF7BCFF 		_DOLIT
 2647 1228 29000000 		.word	')'
 2648 122c FFF7D4FF 		BL	PARSE
ARM GAS  stm32eforth.s 			page 50


 2649 1230 FFF776FE 		BL	TYPEE
 2650 1234 52F804FB 		_UNNEST
 2651              		.align 2 
 2652              	//    (	   ( -- )
 2653              	// 	Ignore following string up to next ) . A comment.
 2654              	
 2655 1238 1C120000 		.word	_DOTPR-MAPOFFSET
 2656 123c 81       	_PAREN:	.byte  IMEDD+1
 2657 123d 28       		.ascii "("
 2658 123e 00BF     		.align 2 	
 2659              	PAREN:
 2660 1240 42F804ED 		_NEST
 2661 1244 FEF7ACFF 		_DOLIT
 2662 1248 29000000 		.word	')'
 2663 124c FFF7C4FF 		BL	PARSE
 2664 1250 FFF74AF9 		BL	DDROP
 2665 1254 52F804FB 		_UNNEST
 2666              		.align 2 
 2667              	//    \	   ( -- )
 2668              	// 	Ignore following text till the end of line.
 2669              	
 2670 1258 3C120000 		.word	_PAREN-MAPOFFSET
 2671 125c 81       	_BKSLA:	.byte  IMEDD+1
 2672 125d 27       		.byte	'\'
 2673 125e 00BF     		.align 2 	
 2674              	BKSLA:
 2675 1260 42F804ED 		_NEST
 2676 1264 FFF75CFA 		BL	NTIB
 2677 1268 FEF7E8FF 		BL	AT
 2678 126c FFF74CFA 		BL	INN
 2679 1270 FEF7DAFF 		BL	STORE
 2680 1274 52F804FB 		_UNNEST
 2681              		.align 2 
 2682              	//    CHAR	( -- c )
 2683              	// 	Parse next word and return its first character.
 2684              	
 2685 1278 5C120000 		.word	_BKSLA-MAPOFFSET
 2686 127c 04       	_CHAR:	.byte  4
 2687 127d 43484152 		.ascii "CHAR"
 2688 1281 0000BF   		.align 2 	
 2689              	CHAR:
 2690 1284 42F804ED 		_NEST
 2691 1288 FFF7E8F8 		BL	BLANK
 2692 128c FFF7A4FF 		BL	PARSE
 2693 1290 FFF710F8 		BL	DROP
 2694 1294 FEF7E2FF 		BL	CAT
 2695 1298 52F804FB 		_UNNEST
 2696              		.align 2 
 2697              	//    WORD	( c -- a //  string> )
 2698              	// 	Parse a word from input stream and copy it to code dictionary.
 2699              	
 2700 129c 7C120000 		.word	_CHAR-MAPOFFSET
 2701 12a0 04       	_WORDD:	.byte  4
 2702 12a1 574F5244 		.ascii "WORD"
 2703 12a5 0000BF   		.align 2 	
 2704              	WORDD:
 2705 12a8 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 51


 2706 12ac FFF794FF 		BL	PARSE
 2707 12b0 FFF79CFB 		BL	HERE
 2708 12b4 FFF7C0F8 		BL	CELLP
 2709 12b8 FFF724FC 		BL	PACKS
 2710 12bc 52F804FB 		_UNNEST
 2711              		.align 2 
 2712              	//    TOKEN	( -- a //  string> )
 2713              	// 	Parse a word from input stream and copy it to name dictionary.
 2714              	
 2715 12c0 A0120000 		.word	_WORDD-MAPOFFSET
 2716 12c4 05       	_TOKEN:	.byte  5
 2717 12c5 544F4B45 		.ascii "TOKEN"
 2717      4E
 2718 12ca 00BF     		.align 2 	
 2719              	TOKEN:
 2720 12cc 42F804ED 		_NEST
 2721 12d0 FFF7C4F8 		BL	BLANK
 2722 12d4 FFF7E8FF 		BL	WORDD
 2723 12d8 52F804FB 		_UNNEST
 2724              		.align 2 
 2725              	// **************************************************************************
 2726              	//  Dictionary search
 2727              	
 2728              	//    NAME>	( na -- ca )
 2729              	// 	Return a code address given a name address.
 2730              	
 2731 12dc C4120000 		.word	_TOKEN-MAPOFFSET
 2732 12e0 05       	_NAMET:	.byte  5
 2733 12e1 4E414D45 		.ascii "NAME>"
 2733      3E
 2734 12e6 00BF     		.align 2 	
 2735              	NAMET:
 2736 12e8 42F804ED 		_NEST
 2737 12ec FFF7A6F9 		BL	COUNT
 2738 12f0 FEF756FF 		_DOLIT
 2739 12f4 1F000000 		.word	0x1F
 2740 12f8 FFF70AF8 		BL	ANDD
 2741 12fc FFF74AF8 		BL	PLUS
 2742 1300 FFF71AFB 		BL	ALGND
 2743 1304 52F804FB 		_UNNEST
 2744              		.align 2 
 2745              	//    SAME?	( a a u -- a a f \ -0+ )
 2746              	// 	Compare u cells in two strings. Return 0 if identical.
 2747              	
 2748 1308 E0120000 		.word	_NAMET-MAPOFFSET
 2749 130c 05       	_SAMEQ:	.byte  5
 2750 130d 53414D45 		.ascii "SAME?"
 2750      3F
 2751 1312 00BF     		.align 2 	
 2752              	SAMEQ:
 2753 1314 42F804ED 		_NEST
 2754 1318 FEF7B8FF 		BL	TOR
 2755 131c 00F022B8 		B.W	SAME2
 2756              	SAME1:
 2757 1320 FEF7E4FF 	  BL	OVER
 2758 1324 FEF7AAFF 		BL	RAT
 2759 1328 FFF7A4F8 		BL	CELLS
ARM GAS  stm32eforth.s 			page 52


 2760 132c FFF732F8 		BL	PLUS
 2761 1330 FEF784FF 		BL	AT			// 32/16 mix-up
 2762 1334 FEF7DAFF 		BL	OVER
 2763 1338 FEF7A0FF 		BL	RAT
 2764 133c FFF79AF8 		BL	CELLS
 2765 1340 FFF728F8 		BL	PLUS
 2766 1344 FEF77AFF 		BL	AT			// 32/16 mix-up
 2767 1348 FFF72CF8 		BL	SUBB
 2768 134c FFF7B6F8 		BL	QDUP
 2769 1350 FEF74CFF 		BL	QBRAN
 2770 1354 64130000 		.word	SAME2-MAPOFFSET
 2771 1358 FEF786FF 		BL	RFROM
 2772 135c FEF7AAFF 		BL	DROP
 2773 1360 52F804FB 		_UNNEST			// strings not equal
 2774              	SAME2:
 2775 1364 FEF732FF 	  BL	DONXT
 2776 1368 20130000 		.word	SAME1-MAPOFFSET
 2777 136c FEF718FF 		_DOLIT
 2778 1370 00000000 		.word	0
 2779 1374 52F804FB 		_UNNEST			// strings equal
 2780              		.align 2 
 2781              	//    find	( a na -- ca na | a F )
 2782              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2783              	
 2784              	// 	.word	_SAMEQ-MAPOFFSET
 2785              	// _FIND	.byte  4
 2786              	// 	.ascii "find"
 2787              	// 	.align 2 	
 2788              	FIND:
 2789 1378 42F804ED 		_NEST
 2790 137c FEF7ACFF 		BL	SWAP			//  na a	
 2791 1380 FEF7A0FF 		BL	DUPP			//  na a a
 2792 1384 FEF76AFF 		BL	CAT			//  na a count
 2793 1388 FFF77EF8 		BL	CELLSL		//  na a count/4
 2794 138c FFF7A6F9 		BL	TEMP
 2795 1390 FEF74AFF 		BL	STORE			//  na a
 2796 1394 FEF796FF 		BL	DUPP			//  na a a
 2797 1398 FEF750FF 		BL	AT			//  na a word1
 2798 139c FEF776FF 		BL	TOR			//  na a
 2799 13a0 FFF74AF8 		BL	CELLP			//  na a+4
 2800 13a4 FEF798FF 		BL	SWAP			//  a+4 na
 2801              	FIND1:
 2802 13a8 FEF78CFF 		BL	DUPP			//  a+4 na na
 2803 13ac FEF71EFF 		BL	QBRAN
 2804 13b0 F8130000 		.word	FIND6-MAPOFFSET	//  end of vocabulary
 2805 13b4 FEF786FF 		BL	DUPP			//  a+4 na na
 2806 13b8 FEF740FF 		BL	AT			//  a+4 na name1
 2807 13bc FEF7F0FE 		_DOLIT
 2808 13c0 1FFFFFFF 		.word	MASKK
 2809 13c4 FEF7A4FF 		BL	ANDD
 2810 13c8 FEF758FF 		BL	RAT			//  a+4 na name1 word1
 2811 13cc FEF7B4FF 		BL	XORR			//  a+4 na ?
 2812 13d0 FEF70CFF 		BL	QBRAN
 2813 13d4 E4130000 		.word	FIND2-MAPOFFSET
 2814 13d8 FFF738F8 		BL	CELLM			//  a+4 la
 2815 13dc FEF72EFF 		BL	AT			//  a+4 next_na
 2816 13e0 FFF7E2BF 		B.w	FIND1			//  try next word
ARM GAS  stm32eforth.s 			page 53


 2817              	FIND2:   
 2818 13e4 FFF728F8 		BL	CELLP			//  a+4 na+4
 2819 13e8 FFF778F9 		BL	TEMP
 2820 13ec FEF726FF 		BL	AT			//  a+4 na+4 count/4
 2821 13f0 FFF790FF 		BL	SAMEQ			//  a+4 na+4 ? 
 2822              	FIND3:	
 2823 13f4 00F00CB8 		B.w	FIND4
 2824              	FIND6:	
 2825 13f8 FEF736FF 		BL	RFROM			//  a+4 0 name1 -- , no match
 2826 13fc FEF75AFF 		BL	DROP			//  a+4 0
 2827 1400 FEF76AFF 		BL	SWAP			//  0 a+4
 2828 1404 FFF722F8 		BL	CELLM			//  0 a
 2829 1408 FEF766FF 		BL	SWAP			//  a 0 
 2830 140c 52F804FB 		_UNNEST			//  return without a match
 2831              	FIND4:	
 2832 1410 FEF7ECFE 		BL	QBRAN			//  a+4 na+4
 2833 1414 28140000 		.word	FIND5-MAPOFFSET	//  found a match
 2834 1418 FFF718F8 		BL	CELLM			//  a+4 na
 2835 141c FFF716F8 		BL	CELLM			//  a+4 la
 2836 1420 FEF70CFF 		BL	AT			//  a+4 next_na
 2837 1424 FFF7C0BF 		B.w	FIND1			//  compare next name
 2838              	FIND5:	
 2839 1428 FEF71EFF 		BL	RFROM			//  a+4 na+4 count/4
 2840 142c FEF742FF 		BL	DROP			//  a+4 na+4
 2841 1430 FEF752FF 		BL	SWAP			//  na+4 a+4
 2842 1434 FEF73EFF 		BL	DROP			//  na+4
 2843 1438 FFF708F8 		BL	CELLM			//  na
 2844 143c FEF742FF 		BL	DUPP			//  na na
 2845 1440 FFF752FF 		BL	NAMET			//  na ca
 2846 1444 FEF748FF 		BL	SWAP			//  ca na
 2847 1448 52F804FB 		_UNNEST			//  return with a match
 2848              		.align 2 
 2849              	
 2850              	//    NAME?	( a -- ca na | a F )
 2851              	// 	Search all context vocabularies for a string.
 2852              	
 2853 144c 0C130000 		.word	_SAMEQ-MAPOFFSET
 2854 1450 05       	_NAMEQ:	.byte  5
 2855 1451 4E414D45 		.ascii "NAME?"
 2855      3F
 2856 1456 00BF     		.align 2 	
 2857              	NAMEQ:
 2858 1458 42F804ED 		_NEST
 2859 145c FFF782F9 		BL	CNTXT
 2860 1460 FEF7ECFE 		BL	AT
 2861 1464 FFF788FF 		BL	FIND
 2862 1468 52F804FB 		_UNNEST
 2863              		.align 2 
 2864              	// **************************************************************************
 2865              	//  Terminal input
 2866              	
 2867              	//    	  ( bot eot cur -- bot eot cur )
 2868              	// 	Backup the cursor by one character.
 2869              	
 2870              	// 	.word	_NAMEQ-MAPOFFSET
 2871              	// _BKSP	.byte  2
 2872              	// 	.ascii "^H"
ARM GAS  stm32eforth.s 			page 54


 2873              	// 	.align 2 	
 2874              	BKSP:
 2875 146c 42F804ED 		_NEST
 2876 1470 FEF70CFF 		BL	TOR
 2877 1474 FEF73AFF 		BL	OVER
 2878 1478 FEF7F6FE 		BL	RFROM
 2879 147c FEF72CFF 		BL	SWAP
 2880 1480 FEF734FF 		BL	OVER
 2881 1484 FEF758FF 		BL	XORR
 2882 1488 FEF7B0FE 		BL	QBRAN
 2883 148c B4140000 		.word	BACK1-MAPOFFSET
 2884 1490 FEF786FE 		_DOLIT
 2885 1494 08000000 		.word	BKSPP
 2886 1498 FEF770FE 		BL	TECHO
 2887              	// 	BL	ATEXE
 2888 149c FEF7B2FF 		BL	ONEM
 2889 14a0 FEF7DCFF 		BL	BLANK
 2890 14a4 FEF76AFE 		BL	TECHO
 2891              	// 	BL	ATEXE
 2892 14a8 FEF77AFE 		_DOLIT
 2893 14ac 08000000 		.word	BKSPP
 2894 14b0 FEF764FE 		BL	TECHO
 2895              	// 	BL	ATEXE
 2896              	BACK1:
 2897 14b4 52F804FB 		  _UNNEST
 2898              		.align 2 
 2899              	//    TAP	 ( bot eot cur c -- bot eot cur )
 2900              	// 	Accept and echo the key stroke and bump the cursor.
 2901              	
 2902              	// 	.word	_BKSP-MAPOFFSET
 2903              	// _TAP	.byte  3
 2904              	// 	.ascii "TAP"
 2905              	// 	.align 2 	
 2906              	TAP:
 2907 14b8 42F804ED 		_NEST
 2908 14bc FEF702FF 		BL	DUPP
 2909 14c0 FEF75CFE 		BL	TECHO
 2910              	// 	BL	ATEXE
 2911 14c4 FEF712FF 		BL	OVER
 2912 14c8 FEF7BEFE 		BL	CSTOR
 2913 14cc FEF792FF 		BL	ONEP
 2914 14d0 52F804FB 		_UNNEST
 2915              		.align 2 
 2916              	//    kTAP	( bot eot cur c -- bot eot cur )
 2917              	// 	Process a key stroke, CR or backspace.
 2918              	
 2919              	// 	.word	_TAP-MAPOFFSET
 2920              	// _KTAP	.byte  4
 2921              	// 	.ascii "kTAP"
 2922              	// 	.align 2 	
 2923              	KTAP:
 2924              	TTAP:
 2925 14d4 42F804ED 		_NEST
 2926 14d8 FEF7F4FE 		BL	DUPP
 2927 14dc FEF760FE 		_DOLIT
 2928 14e0 0D000000 		.word	CRR
 2929 14e4 FEF728FF 		BL	XORR
ARM GAS  stm32eforth.s 			page 55


 2930 14e8 FEF780FE 		BL	QBRAN
 2931 14ec 1C150000 		.word	KTAP2-MAPOFFSET
 2932 14f0 FEF756FE 		_DOLIT
 2933 14f4 08000000 		.word	BKSPP
 2934 14f8 FEF71EFF 		BL	XORR
 2935 14fc FEF776FE 		BL	QBRAN
 2936 1500 14150000 		.word	KTAP1-MAPOFFSET
 2937 1504 FEF7AAFF 		BL	BLANK
 2938 1508 FFF7D6FF 		BL	TAP
 2939 150c 52F804FB 		_UNNEST
 2940 1510 00000000 		.word	0			// patch
 2941              	KTAP1:
 2942 1514 FFF7AAFF 	  BL	BKSP
 2943 1518 52F804FB 		_UNNEST
 2944              	KTAP2:
 2945 151c FEF7CAFE 	  BL	DROP
 2946 1520 FEF7DAFE 		BL	SWAP
 2947 1524 FEF7C6FE 		BL	DROP
 2948 1528 FEF7CCFE 		BL	DUPP
 2949 152c 52F804FB 		_UNNEST
 2950              		.align 2 
 2951              	//    ACCEPT	( b u -- b u )
 2952              	// 	Accept characters to input buffer. Return with actual count.
 2953              	
 2954 1530 50140000 		.word	_NAMEQ-MAPOFFSET
 2955 1534 06       	_ACCEP:	.byte  6
 2956 1535 41434345 		.ascii "ACCEPT"
 2956      5054
 2957 153b 00       		.align 2 	
 2958              	ACCEP:
 2959 153c 42F804ED 		_NEST
 2960 1540 FEF7D4FE 		BL	OVER
 2961 1544 FEF726FF 		BL	PLUS
 2962 1548 FEF7D0FE 		BL	OVER
 2963              	ACCP1:
 2964 154c FEF7D8FF 	  BL	DDUP
 2965 1550 FEF7F2FE 		BL	XORR
 2966 1554 FEF74AFE 		BL	QBRAN
 2967 1558 88150000 		.word	ACCP4-MAPOFFSET
 2968 155c FFF7A8FC 		BL	KEY
 2969 1560 FEF7B0FE 		BL	DUPP
 2970 1564 FEF77AFF 		BL	BLANK
 2971 1568 FEF71AFE 		_DOLIT
 2972 156c 7F000000 		.word	127
 2973 1570 FFF726F9 		BL	WITHI
 2974 1574 FEF73AFE 		BL	QBRAN
 2975 1578 82150000 		.word	ACCP2-MAPOFFSET
 2976 157c FFF79CFF 		BL	TAP
 2977 1580 01E0     		B	ACCP3
 2978              	ACCP2:
 2979 1582 FFF7A7FF 	  BL	KTAP
 2980              	// 	BL	ATEXE
 2981              	ACCP3:	  
 2982 1586 E1E7     		B	ACCP1
 2983              	ACCP4:
 2984 1588 FEF794FE 	  BL	DROP
 2985 158c FEF7AEFE 		BL	OVER
ARM GAS  stm32eforth.s 			page 56


 2986 1590 FEF708FF 		BL	SUBB
 2987 1594 52F804FB 		_UNNEST
 2988              		.align 2 
 2989              	//    QUERY	( -- )
 2990              	// 	Accept input stream to terminal input buffer.
 2991              	
 2992 1598 34150000 		.word	_ACCEP-MAPOFFSET
 2993 159c 05       	_QUERY:	.byte  5
 2994 159d 51554552 		.ascii "QUERY"
 2994      59
 2995 15a2 00BF     		.align 2 	
 2996              	QUERY:
 2997 15a4 42F804ED 		_NEST
 2998 15a8 FFF744FA 		BL	TIB
 2999 15ac FEF7F8FD 		_DOLIT
 3000 15b0 50000000 		.word	80
 3001 15b4 FFF7C2FF 		BL	ACCEP
 3002 15b8 FFF7B2F8 		BL	NTIB
 3003 15bc FEF734FE 		BL	STORE
 3004 15c0 FEF778FE 		BL	DROP
 3005 15c4 FEF7ECFD 		_DOLIT
 3006 15c8 00000000 		.word	0
 3007 15cc FFF79CF8 		BL	INN
 3008 15d0 FEF72AFE 		BL	STORE
 3009 15d4 52F804FB 		_UNNEST
 3010              		.align 2 
 3011              	// **************************************************************************
 3012              	//  Error handling
 3013              	
 3014              	//    ABORT	( a -- )
 3015              	// 	Reset data stack and jump to QUIT.
 3016              	
 3017 15d8 9C150000 		.word	_QUERY-MAPOFFSET
 3018 15dc 05       	_ABORT:	.byte  5
 3019 15dd 41424F52 		.ascii "ABORT"
 3019      54
 3020 15e2 00BF     		.align 2 	
 3021              	ABORT:
 3022 15e4 42F804ED 		_NEST
 3023 15e8 FFF772FC 		BL	SPACE
 3024 15ec FFF726F8 		BL	COUNT
 3025 15f0 FFF796FC 		BL	TYPEE
 3026 15f4 FEF7D4FD 		_DOLIT
 3027 15f8 3F000000 		.word	0X3F
 3028 15fc FEF7BEFD 		BL	EMIT
 3029 1600 FFF7A6FC 		BL	CR
 3030 1604 00F0B2F8 		BL	PRESE
 3031 1608 00F0C0B8 		B.W	QUIT
 3032              		.align 2 
 3033              	
 3034              	//    _abort"	( f -- )
 3035              	// 	Run time routine of ABORT" . Abort with a message.
 3036              	
 3037              	// 	.word	_ABORT-MAPOFFSET
 3038              	// _ABORQ	.byte  COMPO+6
 3039              	// 	.ascii "abort\""
 3040              	// 	.align 2 	
ARM GAS  stm32eforth.s 			page 57


 3041              	ABORQ:
 3042 160c 42F804ED 		_NEST
 3043 1610 FEF7ECFD 		BL	QBRAN
 3044 1614 2C160000 		.word	ABOR1-MAPOFFSET	// text flag
 3045 1618 FFF7AAFC 		BL	DOSTR
 3046 161c FFF70EF8 		BL	COUNT
 3047 1620 FFF77EFC 		BL	TYPEE
 3048 1624 FFF794FC 		BL	CR
 3049 1628 00F0B0B8 		B.W	QUIT
 3050              	ABOR1:
 3051 162c FFF7A0FC 	  BL	DOSTR
 3052 1630 FEF740FE 		BL	DROP
 3053 1634 52F804FB 		_UNNEST			// drop error
 3054              		.align 2 
 3055              	// **************************************************************************
 3056              	//  The text interpreter
 3057              	
 3058              	//    $INTERPRET  ( a -- )
 3059              	// 	Interpret a word. If failed, try to convert it to an integer.
 3060              	
 3061 1638 DC150000 		.word	_ABORT-MAPOFFSET
 3062 163c 0A       	_INTER:	.byte  10
 3063 163d 2424494E 		.ascii "$$INTERPRET"
 3063      54455250 
 3063      524554
 3064              		.align 2 	
 3065              	INTER:
 3066 1648 42F804ED 		_NEST
 3067 164c FFF704FF 		BL	NAMEQ
 3068 1650 FEF734FF 		BL	QDUP	// ?defined
 3069 1654 FEF7CAFD 		BL	QBRAN
 3070 1658 88160000 		.word	INTE1-MAPOFFSET
 3071 165c FEF7EEFD 		BL	AT
 3072 1660 FEF79EFD 		_DOLIT
 3073 1664 40000000 		.word	COMPO
 3074 1668 FEF752FE 		BL	ANDD	// ?compile only lexicon bits
 3075 166c FFF7CEFF 		BL	ABORQ
 3076 1670 0D       		.byte	13
 3077 1671 20636F6D 		.ascii " compile only"
 3077      70696C65 
 3077      206F6E6C 
 3077      79
 3078 167e 00BF     		.align 2 	
 3079 1680 FEF79EFD 		BL	EXECU
 3080 1684 52F804FB 		_UNNEST			// execute defined word
 3081              	INTE1:
 3082 1688 FFF778FB 	  BL	NUMBQ
 3083 168c FEF7AEFD 		BL	QBRAN
 3084 1690 98160000 		.word	INTE2-MAPOFFSET
 3085 1694 52F804FB 		_UNNEST
 3086              	INTE2:
 3087 1698 FFF7A4BF 	  B.W	ABORT	// error
 3088              	
 3089              	//    [	   ( -- )
 3090              	// 	Start the text interpreter.
 3091              	
 3092 169c 3C160000 		.word	_INTER-MAPOFFSET
ARM GAS  stm32eforth.s 			page 58


 3093 16a0 81       	_LBRAC:	.byte  IMEDD+1
 3094 16a1 5B       		.ascii "["
 3095 16a2 00BF     		.align 2 	
 3096              	LBRAC:
 3097 16a4 42F804ED 		_NEST
 3098 16a8 FEF77AFD 		_DOLIT
 3099 16ac 48160000 		.word	INTER-MAPOFFSET
 3100 16b0 FFF742F8 		BL	TEVAL
 3101 16b4 FEF7B8FD 		BL	STORE
 3102 16b8 52F804FB 		_UNNEST
 3103              		.align 2 
 3104              	//    .OK	 ( -- )
 3105              	// 	Display "ok" only while interpreting.
 3106              	
 3107 16bc A0160000 		.word	_LBRAC-MAPOFFSET
 3108 16c0 03       	_DOTOK:	.byte  3
 3109 16c1 2E4F4B   		.ascii ".OK"
 3110              		.align 2 	
 3111              	DOTOK:
 3112 16c4 42F804ED 		_NEST
 3113 16c8 FEF76AFD 		_DOLIT
 3114 16cc 48160000 		.word	INTER-MAPOFFSET
 3115 16d0 FFF732F8 		BL	TEVAL
 3116 16d4 FEF7B2FD 		BL	AT
 3117 16d8 FEF746FF 		BL	EQUAL
 3118 16dc FEF786FD 		BL	QBRAN
 3119 16e0 EC160000 		.word	DOTO1-MAPOFFSET
 3120 16e4 FFF76CFC 		BL	DOTQP
 3121 16e8 03       		.byte	3
 3122 16e9 206F6B   		.ascii " ok"
 3123              		.align 2 	
 3124              	DOTO1:
 3125 16ec FFF730FC 	  BL	CR
 3126 16f0 52F804FB 		_UNNEST
 3127              		.align 2 
 3128              	//    ?STACK	( -- )
 3129              	// 	Abort if the data stack underflows.
 3130              	
 3131 16f4 C0160000 		.word	_DOTOK-MAPOFFSET
 3132 16f8 06       	_QSTAC:	.byte  6
 3133 16f9 3F535441 		.ascii "?STACK"
 3133      434B
 3134 16ff 00       		.align 2 	
 3135              	QSTAC:
 3136 1700 42F804ED 		_NEST
 3137 1704 FFF74CF9 		BL	DEPTH
 3138 1708 FEF7F8FD 		BL	ZLESS	// check only for underflow
 3139 170c FFF77EFF 		BL	ABORQ
 3140 1710 0A       		.byte	10
 3141 1711 20756E64 		.ascii " underflow"
 3141      6572666C 
 3141      6F77
 3142 171b 00       		.align 2 	
 3143 171c 52F804FB 		_UNNEST
 3144              		.align 2 
 3145              	//    EVAL	( -- )
 3146              	// 	Interpret the input stream.
ARM GAS  stm32eforth.s 			page 59


 3147              	
 3148 1720 F8160000 		.word	_QSTAC-MAPOFFSET
 3149 1724 04       	_EVAL:	.byte  4
 3150 1725 4556414C 		.ascii "EVAL"
 3151 1729 0000BF   		.align 2 	
 3152              	EVAL:
 3153 172c 42F804ED 		_NEST
 3154              	EVAL1:
 3155 1730 FFF7CCFD 	  BL	TOKEN
 3156 1734 FEF7C6FD 		BL	DUPP
 3157 1738 FEF790FD 		BL	CAT	// ?input stream empty
 3158 173c FEF756FD 		BL	QBRAN
 3159 1740 54170000 		.word	EVAL2-MAPOFFSET
 3160 1744 FEF7F8FF 		BL	TEVAL
 3161 1748 FFF784F9 		BL	ATEXE
 3162 174c FFF7D8FF 		BL	QSTAC	// evaluate input, check stack
 3163 1750 FFF7EEBF 		B.W	EVAL1
 3164              	EVAL2:
 3165 1754 FEF7AEFD 	  BL	DROP
 3166 1758 FFF7B4FF 		BL	DOTOK
 3167 175c 52F804FB 		_UNNEST	// prompt
 3168              		.align 2 
 3169              	
 3170              	//    PRESET	( -- )
 3171              	// 	Reset data stack pointer and the terminal input buffer.
 3172              	
 3173 1760 24170000 		.word	_EVAL-MAPOFFSET
 3174 1764 06       	_PRESE:	.byte  6
 3175 1765 50524553 		.ascii "PRESET"
 3175      4554
 3176 176b 00       		.align 2 	
 3177              	PRESE:
 3178 176c 42F804ED 		_NEST
 3179 1770 44F60071 		MOVW	R1,#0x4F00		//  init SP
 3180 1774 C2F20001 	 	MOVT	R1,#0X2000
 3181 1778 40F20000 		MOVW	R0,#0			//  init TOS ???
 3182 177c 52F804FB 		_UNNEST
 3183              		.align 2 
 3184              	
 3185              	//    QUIT	( -- )
 3186              	// 	Reset return stack pointer and start text interpreter.
 3187              	
 3188 1780 64170000 		.word	_PRESE-MAPOFFSET
 3189 1784 04       	_QUIT:	.byte  4
 3190 1785 51554954 		.ascii "QUIT"
 3191 1789 0000BF   		.align 2 	
 3192              	QUIT:
 3193 178c 42F804ED 		_NEST
 3194 1790 44F68072 		MOVW	R2,#0X4F80  /* RESET RSTACK */
 3195 1794 C2F20002 	 	MOVT	R2,#0X2000
 3196              	QUIT1:
 3197 1798 FFF784FF 	  BL	LBRAC			// start interpretation
 3198              	QUIT2:
 3199 179c FFF702FF 	  BL	QUERY			// get input
 3200 17a0 FFF7C4FF 		BL	EVAL
 3201 17a4 FEF72EFD 		BL	BRAN
 3202 17a8 9C170000 		.word	QUIT2-MAPOFFSET	// continue till error
ARM GAS  stm32eforth.s 			page 60


 3203              	
 3204              	/***************************
 3205              	//  Flash memory interface
 3206              	***************************/
 3207              	UNLOCK:	//  unlock flash memory	
 3208 17ac DFF8380A 		ldr	r0, =FLASH_BASE_ADR
 3209 17b0 DFF8384A 		ldr	r4, =FLASH_KEY1
 3210 17b4 4460     		str	r4, [r0, #FLASH_KEYR]
 3211 17b6 DFF8384A 		ldr	r4, =FLASH_KEY2
 3212 17ba 4460     		str	r4, [r0, #FLASH_KEYR]
 3213              		/* unlock option registers */
 3214 17bc DFF82C4A 		ldr	r4, =FLASH_KEY1
 3215 17c0 8460     		str	r4, [r0, #FLASH_OPTKEYR]
 3216 17c2 DFF82C4A 		ldr	r4, =FLASH_KEY2
 3217 17c6 8460     		str	r4, [r0, #FLASH_OPTKEYR]
 3218 17c8 7047     		_NEXT
 3219 17ca 00BF     		.align 2 
 3220              	WAIT_BSY:
 3221 17cc DFF8180A 		ldr	r0,=FLASH_BASE_ADR
 3222              	WAIT1:
 3223 17d0 C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 3224 17d2 14F00104 		ands	r4, #0x1	//  BSY
 3225 17d6 FBD1     		bne	WAIT1
 3226 17d8 7047     		_NEXT
 3227 17da 00BF     		.align 2 
 3228              	
 3229              	//    ERASE_SECTOR	   ( sector -- )
 3230              	// 	  Erase one sector of flash memory.  Sector=0 to 11
 3231              	
 3232 17dc 84170000 		.word	_QUIT-MAPOFFSET
 3233 17e0 0C       	_ESECT:	.byte  12
 3234 17e1 45524153 		.ascii "ERASE_SECTOR"
 3234      455F5345 
 3234      43544F52 
 3235 17ed 0000BF   		.align 2 	
 3236              	
 3237              	ESECT: 	//  sector --
 3238 17f0 42F804ED 		_NEST
 3239 17f4 FFF7EAFF 		bl	WAIT_BSY
 3240 17f8 0469     		ldr	r4,[r0, #FLASH_CR]	
 3241 17fa 24F07804 		bic	r4,r4,#0x78	//  clear SNB
 3242 17fe 4FEAC505 		lsl	R5,R5,#3		//  align sector #
 3243 1802 44EA0504 		orr	r4,r4,r5		//  put in sector #
 3244 1806 44F48034 		orr	R4,R4,#0x10000	//  set STRT bit
 3245 180a 44F40074 		orr	R4,R4,#0x200	//  PSIZE=32
 3246 180e 44F00204 		orr	R4,R4,#2		//  set SER bit, enable erase
 3247 1812 0461     		str	r4,[r0, #0x10]	//  start erasing
 3248              	// 	bl	WAIT_BSY
 3249 1814 51F8045B 		_POP
 3250 1818 52F804FB 		_UNNEST
 3251              		.align 2 
 3252              	//    I!	   ( data address -- )
 3253              	// 	   Write one word into flash memory
 3254              	
 3255 181c E0170000 		.word	_ESECT-MAPOFFSET
 3256 1820 02       	_ISTOR:	.byte  2
 3257 1821 4921     		.ascii "I!"
ARM GAS  stm32eforth.s 			page 61


 3258 1823 00       		.align 2 	
 3259              	
 3260              	ISTOR:	//  data address --
 3261 1824 42F804ED 		_NEST
 3262 1828 FFF7D0FF 		bl	WAIT_BSY
 3263 182c 0469     		ldr	r4, [r0, #0x10]	//  FLASH_CR
 3264 182e 44F00104 		orr	r4,R4,#0x1		//  PG
 3265 1832 0461     		str	r4, [r0, #0x10]	//  enable programming
 3266 1834 FEF7F8FC 		bl	STORE
 3267 1838 FFF7C8FF 		bl	WAIT_BSY
 3268 183c 0469     		ldr	r4, [r0, #0x10]	//  FLASH_CR
 3269 183e 24F00104 		bic	r4,R4,#0x1		//  PG
 3270 1842 0461     		str	r4, [r0, #0x10]	//  disable programming
 3271 1844 52F804FB 		_UNNEST
 3272              		.align 2 
 3273              		
 3274              	
 3275              	//    TURNKEY	( -- )
 3276              	// 	Copy dictionary from RAM to flash.
 3277              	
 3278 1848 20180000 		.word	_ISTOR-MAPOFFSET
 3279 184c 07       	_TURN:	.byte   7
 3280 184d 5455524E 		.ascii "TURNKEY"
 3280      4B4559
 3281              		.align 2 
 3282 1854 42F804ED 	TURN:	_NEST
 3283 1858 FEF7A2FC 		_DOLIT			//  save user area
 3284 185c 00FF0000 		.word	0XFF00
 3285 1860 FEF79EFC 		_DOLIT
 3286 1864 C0000000 		.word	0xC0			//  to boot array
 3287 1868 FEF79AFC 		_DOLIT
 3288 186c 40000000 		.word	0x40
 3289 1870 FFF718F9 		BL	MOVE
 3290 1874 FEF794FC 		_DOLIT
 3291 1878 00000000 		.word	0
 3292 187c FEF790FC 		_DOLIT
 3293 1880 00000008 		.word	0x8000000
 3294 1884 FEF778FF 		BL	CPP
 3295 1888 FEF7D8FC 		BL	AT
 3296 188c FEF7FCFD 		BL	CELLSL
 3297 1890 FEF7FCFC 		BL	TOR
 3298              	TURN1:
 3299 1894 FEF72AFD 		BL	OVER
 3300 1898 FEF7D0FC 		BL	AT
 3301 189c FEF726FD 		BL	OVER
 3302 18a0 FFF7C0FF 		BL	ISTOR
 3303 18a4 FEF718FD 		BL	SWAP
 3304 18a8 FEF7C6FD 		BL	CELLP
 3305 18ac FEF714FD 		BL	SWAP
 3306 18b0 FEF7C2FD 		BL	CELLP
 3307 18b4 FEF78AFC 		BL	DONXT
 3308 18b8 94180000 		.word	TURN1-MAPOFFSET
 3309 18bc FEF714FE 		BL	DDROP
 3310 18c0 52F804FB 		_UNNEST
 3311              		.align 2 
 3312              	
 3313              	// **************************************************************************
ARM GAS  stm32eforth.s 			page 62


 3314              	//  The compiler
 3315              	
 3316              	//    '	   ( -- ca )
 3317              	// 	Search context vocabularies for the next word in input stream.
 3318              	
 3319 18c4 4C180000 		.word	_TURN-MAPOFFSET
 3320 18c8 01       	_TICK:	.byte  1
 3321 18c9 27       		.ascii "'"
 3322 18ca 00BF     		.align 2 	
 3323              	TICK:
 3324 18cc 42F804ED 		_NEST
 3325 18d0 FFF7FCFC 		BL	TOKEN
 3326 18d4 FFF7C0FD 		BL	NAMEQ	// ?defined
 3327 18d8 FEF788FC 		BL	QBRAN
 3328 18dc E4180000 		.word	TICK1-MAPOFFSET
 3329 18e0 52F804FB 		_UNNEST	// yes, push code address
 3330 18e4 FFF77EBE 	TICK1:	B.W	ABORT	// no, error
 3331              	
 3332              	//    ALLOT	( n -- )
 3333              	// 	Allocate n bytes to the ram area.
 3334              	
 3335 18e8 C8180000 		.word	_TICK-MAPOFFSET
 3336 18ec 05       	_ALLOT:	.byte  5
 3337 18ed 414C4C4F 		.ascii "ALLOT"
 3337      54
 3338 18f2 00BF     		.align 2 	
 3339              	ALLOT:
 3340 18f4 42F804ED 		_NEST
 3341 18f8 FEF73EFF 		BL	CPP
 3342 18fc FEF778FE 		BL	PSTOR
 3343 1900 52F804FB 		_UNNEST			// adjust code pointer
 3344              		.align 2 
 3345              	//    ,	   ( w -- )
 3346              	// 	Compile an integer into the code dictionary.
 3347              	
 3348 1904 EC180000 		.word	_ALLOT-MAPOFFSET
 3349 1908 012C     	_COMMA:	.byte  1,','
 3350 190a 00BF     		.align 2 	
 3351              	COMMA:
 3352 190c 42F804ED 		_NEST
 3353 1910 FFF76CF8 		BL	HERE
 3354 1914 FEF7D6FC 		BL	DUPP
 3355 1918 FEF78EFD 		BL	CELLP	// cell boundary
 3356 191c FEF72CFF 		BL	CPP
 3357 1920 FEF782FC 		BL	STORE
 3358 1924 FEF780FC 		BL	STORE
 3359 1928 52F804FB 		_UNNEST	// adjust code pointer, compile
 3360              		.align 2 
 3361              	//    [COMPILE]   ( -- //  string> )
 3362              	// 	Compile the next immediate word into code dictionary.
 3363              	
 3364 192c 08190000 		.word	_COMMA-MAPOFFSET
 3365 1930 89       	_BCOMP:	.byte  IMEDD+9
 3366 1931 5B434F4D 		.ascii "[COMPILE]"
 3366      50494C45 
 3366      5D
 3367 193a 00BF     		.align 2 	
ARM GAS  stm32eforth.s 			page 63


 3368              	BCOMP:
 3369 193c 42F804ED 		_NEST
 3370 1940 FFF7C4FF 		BL	TICK
 3371 1944 FFF7E2FF 		BL	COMMA
 3372 1948 52F804FB 		_UNNEST
 3373              		.align 2 
 3374              	//    COMPILE	( -- )
 3375              	// 	Compile the next address in colon list to code dictionary.
 3376              	
 3377 194c 30190000 		.word	_BCOMP-MAPOFFSET
 3378 1950 47       	_COMPI:	.byte  COMPO+7
 3379 1951 434F4D50 		.ascii "COMPILE"
 3379      494C45
 3380              		.align 2 	
 3381              	COMPI:
 3382 1958 42F804ED 		_NEST
 3383 195c FEF784FC 		BL	RFROM
 3384 1960 25F00105 		BIC	R5,R5,#1
 3385 1964 FEF7AEFC 		BL	DUPP
 3386 1968 FEF768FC 		BL	AT
 3387 196c 00F0DAF9 		BL	CALLC			// compile BL instruction
 3388 1970 FEF762FD 		BL	CELLP
 3389 1974 45F00105 		ORR	R5,R5,#1
 3390 1978 FEF788FC 		BL	TOR
 3391 197c 52F804FB 		_UNNEST			// adjust return address
 3392              		.align 2 
 3393              	//    LITERAL	( w -- )
 3394              	// 	Compile tos to code dictionary as an integer literal.
 3395              	
 3396 1980 50190000 		.word	_COMPI-MAPOFFSET
 3397 1984 87       	_LITER:	.byte  IMEDD+7
 3398 1985 4C495445 		.ascii "LITERAL"
 3398      52414C
 3399              		.align 2 	
 3400              	LITER:
 3401 198c 42F804ED 		_NEST
 3402 1990 FFF7E2FF 		BL	COMPI
 3403 1994 A0010000 		.word	DOLIT-MAPOFFSET
 3404 1998 FFF7B8FF 		BL	COMMA
 3405 199c 52F804FB 		_UNNEST
 3406              		.align 2 
 3407              	//    $,"	( -- )
 3408              	// 	Compile a literal string up to next " .
 3409              	
 3410              	// 	.word	_LITER-MAPOFFSET
 3411              	// _STRCQ	.byte  3
 3412              	// 	.ascii "$$,"""
 3413              	// 	.align 2 	
 3414              	STRCQ:
 3415 19a0 42F804ED 		_NEST
 3416 19a4 FEF7FCFB 		_DOLIT
 3417 19a8 FCFFFFFF 		.word	-4
 3418 19ac FEF7E4FE 		BL	CPP
 3419 19b0 FEF71EFE 		BL	PSTOR
 3420 19b4 FEF7F4FB 		_DOLIT
 3421 19b8 22000000 		.word	'\"'
 3422 19bc FFF774FC 		BL	WORDD			// moveDCB to code dictionary
ARM GAS  stm32eforth.s 			page 64


 3423 19c0 FEF73CFE 		BL	COUNT
 3424 19c4 FEF7E6FC 		BL	PLUS
 3425 19c8 FEF7B6FF 		BL	ALGND			// calculate aligned end of string
 3426 19cc FEF7D4FE 		BL	CPP
 3427 19d0 FEF72AFC 		BL	STORE
 3428 19d4 52F804FB 		_UNNEST 			// adjust the code pointer
 3429              		.align 2 
 3430              	// **************************************************************************
 3431              	//  Structures
 3432              	
 3433              	//    FOR	 ( -- a )
 3434              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3435              	
 3436 19d8 84190000 		.word	_LITER-MAPOFFSET
 3437 19dc 83       	_FOR:	.byte  IMEDD+3
 3438 19dd 464F52   		.ascii "FOR"
 3439              		.align 2 	
 3440              	FOR:
 3441 19e0 42F804ED 		_NEST
 3442 19e4 FFF7B8FF 		BL	COMPI
 3443 19e8 8C020000 		.word	TOR-MAPOFFSET
 3444 19ec FEF7FEFF 		BL	HERE
 3445 19f0 52F804FB 		_UNNEST
 3446              		.align 2 
 3447              	//    BEGIN	( -- a )
 3448              	// 	Start an infinite or indefinite loop structure.
 3449              	
 3450 19f4 DC190000 		.word	_FOR-MAPOFFSET
 3451 19f8 85       	_BEGIN:	.byte  IMEDD+5
 3452 19f9 42454749 		.ascii "BEGIN"
 3452      4E
 3453 19fe 00BF     		.align 2 	
 3454              	BEGIN:
 3455 1a00 42F804ED 		_NEST
 3456 1a04 FEF7F2FF 		BL	HERE
 3457 1a08 52F804FB 		_UNNEST
 3458              		.align 2 
 3459              	//    NEXT	( a -- )
 3460              	// 	Terminate a FOR-NEXT loop structure.
 3461              	
 3462 1a0c F8190000 		.word	_BEGIN-MAPOFFSET
 3463 1a10 84       	_NEXT:	.byte  IMEDD+4
 3464 1a11 4E455854 		.ascii "NEXT"
 3465 1a15 0000BF   		.align 2 	
 3466              	NEXT:
 3467 1a18 42F804ED 		_NEST
 3468 1a1c FFF79CFF 		BL	COMPI
 3469 1a20 CC010000 		.word	DONXT-MAPOFFSET
 3470 1a24 FFF772FF 		BL	COMMA
 3471 1a28 52F804FB 		_UNNEST
 3472              		.align 2 
 3473              	//    UNTIL	( a -- )
 3474              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3475              	
 3476 1a2c 101A0000 		.word	_NEXT-MAPOFFSET
 3477 1a30 85       	_UNTIL:	.byte  IMEDD+5
 3478 1a31 554E5449 		.ascii "UNTIL"
ARM GAS  stm32eforth.s 			page 65


 3478      4C
 3479 1a36 00BF     		.align 2 	
 3480              	UNTIL:
 3481 1a38 42F804ED 		_NEST
 3482 1a3c FFF78CFF 		BL	COMPI
 3483 1a40 EC010000 		.word	QBRAN-MAPOFFSET
 3484 1a44 FFF762FF 		BL	COMMA
 3485 1a48 52F804FB 		_UNNEST
 3486              		.align 2 
 3487              	//    AGAIN	( a -- )
 3488              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3489              	
 3490 1a4c 301A0000 		.word	_UNTIL-MAPOFFSET
 3491 1a50 85       	_AGAIN:	.byte  IMEDD+5
 3492 1a51 41474149 		.ascii "AGAIN"
 3492      4E
 3493 1a56 00BF     		.align 2 	
 3494              	AGAIN:
 3495 1a58 42F804ED 		_NEST
 3496 1a5c FFF77CFF 		BL	COMPI
 3497 1a60 04020000 		.word	BRAN-MAPOFFSET
 3498 1a64 FFF752FF 		BL	COMMA
 3499 1a68 52F804FB 		_UNNEST
 3500              		.align 2 
 3501              	//    IF	  ( -- A )
 3502              	// 	Begin a conditional branch structure.
 3503              	
 3504 1a6c 501A0000 		.word	_AGAIN-MAPOFFSET
 3505 1a70 82       	_IFF:	.byte  IMEDD+2
 3506 1a71 4946     		.ascii "IF"
 3507 1a73 00       		.align 2 	
 3508              	IFF:
 3509 1a74 42F804ED 		_NEST
 3510 1a78 FFF76EFF 		BL	COMPI
 3511 1a7c EC010000 		.word	QBRAN-MAPOFFSET
 3512 1a80 FEF7B4FF 		BL	HERE
 3513 1a84 FEF78CFB 		_DOLIT
 3514 1a88 04000000 		.word	4
 3515 1a8c FEF774FE 		BL	CPP
 3516 1a90 FEF7AEFD 		BL	PSTOR
 3517 1a94 52F804FB 		_UNNEST
 3518              		.align 2 
 3519              	//    AHEAD	( -- A )
 3520              	// 	Compile a forward branch instruction.
 3521              	
 3522 1a98 701A0000 		.word	_IFF-MAPOFFSET
 3523 1a9c 85       	_AHEAD:	.byte  IMEDD+5
 3524 1a9d 41484541 		.ascii "AHEAD"
 3524      44
 3525 1aa2 00BF     		.align 2 	
 3526              	AHEAD:
 3527 1aa4 42F804ED 		_NEST
 3528 1aa8 FFF756FF 		BL	COMPI
 3529 1aac 04020000 		.word	BRAN-MAPOFFSET
 3530 1ab0 FEF79CFF 		BL	HERE
 3531 1ab4 FEF774FB 		_DOLIT
 3532 1ab8 04000000 		.word	4
ARM GAS  stm32eforth.s 			page 66


 3533 1abc FEF75CFE 		BL	CPP
 3534 1ac0 FEF796FD 		BL	PSTOR
 3535 1ac4 52F804FB 		_UNNEST
 3536              		.align 2 
 3537              	//    REPEAT	( A a -- )
 3538              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3539              	
 3540 1ac8 9C1A0000 		.word	_AHEAD-MAPOFFSET
 3541 1acc 86       	_REPEA:	.byte  IMEDD+6
 3542 1acd 52455045 		.ascii "REPEAT"
 3542      4154
 3543 1ad3 00       		.align 2 	
 3544              	REPEA:
 3545 1ad4 42F804ED 		_NEST
 3546 1ad8 FFF7BEFF 		BL	AGAIN
 3547 1adc FEF786FF 		BL	HERE
 3548 1ae0 FEF7FAFB 		BL	SWAP
 3549 1ae4 FEF7A0FB 		BL	STORE
 3550 1ae8 52F804FB 		_UNNEST
 3551              		.align 2 
 3552              	//    THEN	( A -- )
 3553              	// 	Terminate a conditional branch structure.
 3554              	
 3555 1aec CC1A0000 		.word	_REPEA-MAPOFFSET
 3556 1af0 84       	_THENN:	.byte  IMEDD+4
 3557 1af1 5448454E 		.ascii "THEN"
 3558 1af5 0000BF   		.align 2 	
 3559              	THENN:
 3560 1af8 42F804ED 		_NEST
 3561 1afc FEF776FF 		BL	HERE
 3562 1b00 FEF7EAFB 		BL	SWAP
 3563 1b04 FEF790FB 		BL	STORE
 3564 1b08 52F804FB 		_UNNEST
 3565              		.align 2 
 3566              	//    AFT	 ( a -- a A )
 3567              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3568              	
 3569 1b0c F01A0000 		.word	_THENN-MAPOFFSET
 3570 1b10 83       	_AFT:	.byte  IMEDD+3
 3571 1b11 414654   		.ascii "AFT"
 3572              		.align 2 	
 3573              	AFT:
 3574 1b14 42F804ED 		_NEST
 3575 1b18 FEF7CCFB 		BL	DROP
 3576 1b1c FFF7C2FF 		BL	AHEAD
 3577 1b20 FFF76EFF 		BL	BEGIN
 3578 1b24 FEF7D8FB 		BL	SWAP
 3579 1b28 52F804FB 		_UNNEST
 3580              		.align 2 
 3581              	//    ELSE	( A -- A )
 3582              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3583              	
 3584 1b2c 101B0000 		.word	_AFT-MAPOFFSET
 3585 1b30 84       	_ELSEE:	.byte  IMEDD+4
 3586 1b31 454C5345 		.ascii "ELSE"
 3587 1b35 0000BF   		.align 2 	
 3588              	ELSEE:
ARM GAS  stm32eforth.s 			page 67


 3589 1b38 42F804ED 		_NEST
 3590 1b3c FFF7B2FF 		BL	AHEAD
 3591 1b40 FEF7CAFB 		BL	SWAP
 3592 1b44 FFF7D8FF 		BL	THENN
 3593 1b48 52F804FB 		_UNNEST
 3594              		.align 2 
 3595              	//    WHILE	( a -- A a )
 3596              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3597              	
 3598 1b4c 301B0000 		.word	_ELSEE-MAPOFFSET
 3599 1b50 85       	_WHILE:	.byte  IMEDD+5
 3600 1b51 5748494C 		.ascii "WHILE"
 3600      45
 3601 1b56 00BF     		.align 2 	
 3602              	WHILE:
 3603 1b58 42F804ED 		_NEST
 3604 1b5c FFF78AFF 		BL	IFF
 3605 1b60 FEF7BAFB 		BL	SWAP
 3606 1b64 52F804FB 		_UNNEST
 3607              		.align 2 
 3608              	//    ABORT"	( -- //  string> )
 3609              	// 	Conditional abort with an error message.
 3610              	
 3611 1b68 501B0000 		.word	_WHILE-MAPOFFSET
 3612 1b6c 86       	_ABRTQ:	.byte  IMEDD+6
 3613 1b6d 41424F52 		.ascii "ABORT\""
 3613      5422
 3614 1b73 00       		.align 2 	
 3615              	ABRTQ:
 3616 1b74 42F804ED 		_NEST
 3617 1b78 FFF7EEFE 		BL	COMPI
 3618 1b7c 0C160000 		.word	ABORQ-MAPOFFSET
 3619 1b80 FFF70EFF 		BL	STRCQ
 3620 1b84 52F804FB 		_UNNEST
 3621              		.align 2 
 3622              	//    $"	( -- //  string> )
 3623              	// 	Compile an inlineDCB literal.
 3624              	
 3625 1b88 6C1B0000 		.word	_ABRTQ-MAPOFFSET
 3626 1b8c 82       	_STRQ:	.byte  IMEDD+2
 3627 1b8d 2422     		.byte	'$','"'
 3628 1b8f 00       		.align 2 	
 3629              	STRQ:
 3630 1b90 42F804ED 		_NEST
 3631 1b94 FFF7E0FE 		BL	COMPI
 3632 1b98 A40F0000 		.word	STRQP-MAPOFFSET
 3633 1b9c FFF700FF 		BL	STRCQ
 3634 1ba0 52F804FB 		_UNNEST
 3635              		.align 2 
 3636              	//    ."	( -- //  string> )
 3637              	// 	Compile an inlineDCB literal to be typed out at run time.
 3638              	
 3639 1ba4 8C1B0000 		.word	_STRQ-MAPOFFSET
 3640 1ba8 82       	_DOTQ:	.byte  IMEDD+2
 3641 1ba9 2E22     		.byte	'.','"'
 3642 1bab 00       		.align 2 	
 3643              	DOTQ:
ARM GAS  stm32eforth.s 			page 68


 3644 1bac 42F804ED 		_NEST
 3645 1bb0 FFF7D2FE 		BL	COMPI
 3646 1bb4 C00F0000 		.word	DOTQP-MAPOFFSET
 3647 1bb8 FFF7F2FE 		BL	STRCQ
 3648 1bbc 52F804FB 		_UNNEST
 3649              		.align 2 
 3650              	// **************************************************************************
 3651              	//  Name compiler
 3652              	
 3653              	//    ?UNIQUE	( a -- a )
 3654              	// 	Display a warning message if the word already exists.
 3655              	
 3656 1bc0 A81B0000 		.word	_DOTQ-MAPOFFSET
 3657 1bc4 07       	_UNIQU:	.byte  7
 3658 1bc5 3F554E49 		.ascii "?UNIQUE"
 3658      515545
 3659              		.align 2 	
 3660              	UNIQU:
 3661 1bcc 42F804ED 		_NEST
 3662 1bd0 FEF778FB 		BL	DUPP
 3663 1bd4 FFF740FC 		BL	NAMEQ			// ?name exists
 3664 1bd8 FEF708FB 		BL	QBRAN
 3665 1bdc F81B0000 		.word	UNIQ1-MAPOFFSET	// redefinitions are OK
 3666 1be0 FFF7EEF9 		BL	DOTQP
 3667 1be4 07       		.byte	7
 3668 1be5 20726544 		.ascii " reDef "		// but warn the user
 3668      656620
 3669              		.align 2 	
 3670 1bec FEF77EFB 		BL	OVER
 3671 1bf0 FEF724FD 		BL	COUNT
 3672 1bf4 FFF794F9 		BL	TYPEE			// just in case its not planned
 3673              	UNIQ1:
 3674 1bf8 FEF75CFB 		BL	DROP
 3675 1bfc 52F804FB 		_UNNEST
 3676              		.align 2 
 3677              	//    $,n	 ( na -- )
 3678              	// 	Build a new dictionary name using the data at na.
 3679              	
 3680              	// 	.word	_UNIQU-MAPOFFSET
 3681              	// _SNAME	.byte  3
 3682              	// 	.ascii "$$,n"
 3683              	// 	.align 2 	
 3684              	SNAME:
 3685 1c00 42F804ED 		_NEST
 3686 1c04 FEF75EFB 		BL	DUPP			//  na na
 3687 1c08 FEF728FB 		BL	CAT			//  ?null input
 3688 1c0c FEF7EEFA 		BL	QBRAN
 3689 1c10 481C0000 		.word	SNAM1-MAPOFFSET
 3690 1c14 FFF7DAFF 		BL	UNIQU			//  na
 3691 1c18 FEF7C6FD 		BL	LAST			//  na last
 3692 1c1c FEF70EFB 		BL	AT			//  na la
 3693 1c20 FFF774FE 		BL	COMMA			//  na
 3694 1c24 FEF74EFB 		BL	DUPP			//  na na
 3695 1c28 FEF7BEFD 		BL	LAST			//  na na last
 3696 1c2c FEF7FCFA 		BL	STORE			//  na , save na for vocabulary link
 3697 1c30 FEF704FD 		BL	COUNT			//  na+1 count
 3698 1c34 FEF7AEFB 		BL	PLUS			//  na+1+count
ARM GAS  stm32eforth.s 			page 69


 3699 1c38 FEF77EFE 		BL	ALGND			//  word boundary
 3700 1c3c FEF79CFD 		BL	CPP
 3701 1c40 FEF7F2FA 		BL	STORE			//  top of dictionary now
 3702 1c44 52F804FB 		_UNNEST
 3703              	SNAM1:
 3704 1c48 FFF7ACF9 		BL	STRQP
 3705 1c4c 07       		.byte	7
 3706 1c4d 206E616D 		.ascii " name? "
 3706      653F20
 3707 1c54 FFF7C6BC 		B.W	ABORT
 3708              	
 3709              	//    $COMPILE	( a -- )
 3710              	// 	Compile next word to code dictionary as a token or literal.
 3711              	
 3712 1c58 C41B0000 		.word	_UNIQU-MAPOFFSET
 3713 1c5c 08       	_SCOMP:	.byte  8
 3714 1c5d 2424434F 		.ascii "$$COMPILE"
 3714      4D50494C 
 3714      45
 3715 1c66 00BF     		.align 2 	
 3716              	SCOMP:
 3717 1c68 42F804ED 		_NEST
 3718 1c6c FFF7F4FB 		BL	NAMEQ
 3719 1c70 FEF724FC 		BL	QDUP	// defined?
 3720 1c74 FEF7BAFA 		BL	QBRAN
 3721 1c78 A41C0000 		.word	SCOM2-MAPOFFSET
 3722 1c7c FEF7DEFA 		BL	AT
 3723 1c80 FEF78EFA 		_DOLIT
 3724 1c84 80000000 		.word	IMEDD
 3725 1c88 FEF742FB 		BL	ANDD	// immediate?
 3726 1c8c FEF7AEFA 		BL	QBRAN
 3727 1c90 9C1C0000 		.word	SCOM1-MAPOFFSET
 3728 1c94 FEF794FA 		BL	EXECU
 3729 1c98 52F804FB 		_UNNEST			// it's immediate, execute
 3730              	SCOM1:
 3731 1c9c 00F042F8 		BL	CALLC			// it's not immediate, compile
 3732 1ca0 52F804FB 		_UNNEST	
 3733              	SCOM2:
 3734 1ca4 FFF76AF8 		BL	NUMBQ
 3735 1ca8 FEF7A0FA 		BL	QBRAN
 3736 1cac B81C0000 		.word	SCOM3-MAPOFFSET
 3737 1cb0 FFF76CFE 		BL	LITER
 3738 1cb4 52F804FB 		_UNNEST			// compile number as integer
 3739              	SCOM3:
 3740 1cb8 FFF794BC 		B.W	ABORT			// error
 3741              	
 3742              	//    OVERT	( -- )
 3743              	// 	Link a new word into the current vocabulary.
 3744              	
 3745 1cbc 5C1C0000 		.word	_SCOMP-MAPOFFSET
 3746 1cc0 05       	_OVERT:	.byte  5
 3747 1cc1 4F564552 		.ascii "OVERT"
 3747      54
 3748 1cc6 00BF     		.align 2 	
 3749              	OVERT:
 3750 1cc8 42F804ED 		_NEST
 3751 1ccc FEF76CFD 		BL	LAST
ARM GAS  stm32eforth.s 			page 70


 3752 1cd0 FEF7B4FA 		BL	AT
 3753 1cd4 FEF746FD 		BL	CNTXT
 3754 1cd8 FEF7A6FA 		BL	STORE
 3755 1cdc 52F804FB 		_UNNEST
 3756              		.align 2 
 3757              	//    // 	   ( -- )
 3758              	// 	Terminate a colon definition.
 3759              	
 3760 1ce0 C01C0000 		.word	_OVERT-MAPOFFSET
 3761 1ce4 C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 3762 1ce5 2F2F20   		.ascii "// "
 3763              		.align 2 	
 3764              	SEMIS:
 3765 1ce8 42F804ED 		_NEST
 3766 1cec FEF758FA 		_DOLIT
 3767 1cf0 52F804FB 		_UNNEST
 3768 1cf4 FFF70AFE 		BL	COMMA
 3769 1cf8 FFF7D4FC 		BL	LBRAC
 3770 1cfc FFF7E4FF 		BL	OVERT
 3771 1d00 52F804FB 		_UNNEST
 3772              		.align 2 
 3773              	//    ]	   ( -- )
 3774              	// 	Start compiling the words in the input stream.
 3775              	
 3776 1d04 E41C0000 		.word	_SEMIS-MAPOFFSET
 3777 1d08 01       	_RBRAC:	.byte  1
 3778 1d09 5D       		.ascii "]"
 3779 1d0a 00BF     		.align 2 	
 3780              	RBRAC:
 3781 1d0c 42F804ED 		_NEST
 3782 1d10 FEF746FA 		_DOLIT
 3783 1d14 681C0000 		.word	SCOMP-MAPOFFSET
 3784 1d18 FEF70EFD 		BL	TEVAL
 3785 1d1c FEF784FA 		BL	STORE
 3786 1d20 52F804FB 		_UNNEST
 3787              		.align 2 
 3788              	//    BL.W	( ca -- )
 3789              	// 	Assemble a branch-link long instruction to ca.
 3790              	// 	BL.W is split into 2 16 bit instructions with 11 bit address fields.
 3791              	
 3792              	// 	.word	_RBRAC-MAPOFFSET
 3793              	// _CALLC	.byte  5
 3794              	// 	.ascii "call,"
 3795              	// 	.align 2 	
 3796              	CALLC:
 3797 1d24 42F804ED 		_NEST
 3798 1d28 25F00105 		BIC	R5,R5,#1		//  clear b0 of address from R>
 3799 1d2c FEF75EFE 		BL	HERE
 3800 1d30 FEF738FB 		BL	SUBB
 3801 1d34 A5F10405 		SUB	R5,R5,#4		//  pc offset
 3802 1d38 40F2FF70 		MOVW	R0,#0x7FF		//  11 bit mask
 3803 1d3c 2C46     		MOV	R4,R5
 3804 1d3e 4FEA1535 		LSR	R5,R5,#12		//  get bits 22-12
 3805 1d42 05EA0005 		AND	R5,R5,R0
 3806 1d46 4FEAC434 		LSL	R4,R4,#15		//  get bits 11-1
 3807 1d4a 45EA0405 		ORR	R5,R5,R4
 3808 1d4e 45F07845 		ORR	R5,R5,#0xF8000000
ARM GAS  stm32eforth.s 			page 71


 3809 1d52 45F47045 		ORR	R5,R5,#0xF000
 3810 1d56 FFF7D9FD 		BL	COMMA			//  assemble BL.W instruction
 3811 1d5a 52F804FB 		_UNNEST
 3812 1d5e 00BF     		.align 2 
 3813              	
 3814              	// 	:	( -- //  string> )
 3815              	// 	Start a new colon definition using next word as its name.
 3816              	
 3817 1d60 081D0000 		.word	_RBRAC-MAPOFFSET
 3818 1d64 01       	_COLON:	.byte  1
 3819 1d65 3A       		.ascii ":"
 3820 1d66 00BF     		.align 2 	
 3821              	COLON:
 3822 1d68 42F804ED 		_NEST
 3823 1d6c FFF7AEFA 		BL	TOKEN
 3824 1d70 FFF746FF 		BL	SNAME
 3825 1d74 FEF714FA 		_DOLIT
 3826 1d78 42F804ED 		_NEST
 3827 1d7c FFF7C6FD 		BL	COMMA
 3828 1d80 FFF7C4FF 		BL	RBRAC
 3829 1d84 52F804FB 		_UNNEST
 3830              		.align 2 
 3831              	//    IMMEDIATE   ( -- )
 3832              	// 	Make the last compiled word an immediate word.
 3833              	
 3834 1d88 641D0000 		.word	_COLON-MAPOFFSET
 3835 1d8c 09       	_IMMED:	.byte  9
 3836 1d8d 494D4D45 		.ascii "IMMEDIATE"
 3836      44494154 
 3836      45
 3837 1d96 00BF     		.align 2 	
 3838              	IMMED:
 3839 1d98 42F804ED 		_NEST
 3840 1d9c FEF700FA 		_DOLIT
 3841 1da0 80000000 		.word	IMEDD
 3842 1da4 FEF700FD 		BL	LAST
 3843 1da8 FEF748FA 		BL	AT
 3844 1dac FEF746FA 		BL	AT
 3845 1db0 FEF7B8FA 		BL	ORR
 3846 1db4 FEF7F8FC 		BL	LAST
 3847 1db8 FEF740FA 		BL	AT
 3848 1dbc FEF734FA 		BL	STORE
 3849 1dc0 52F804FB 		_UNNEST
 3850              		.align 2 
 3851              	// **************************************************************************
 3852              	//  Defining words
 3853              	
 3854              	//    CONSTANT	( u -- //  string> )
 3855              	// 	Compile a new constant.
 3856              	
 3857 1dc4 8C1D0000 		.word	_IMMED-MAPOFFSET
 3858 1dc8 08       	_CONST:	.byte  8
 3859 1dc9 434F4E53 		.ascii "CONSTANT"
 3859      54414E54 
 3860 1dd1 0000BF   		.align 2 	
 3861              	CONST:
 3862 1dd4 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 72


 3863 1dd8 FFF778FA 		BL	TOKEN
 3864 1ddc FFF710FF 		BL	SNAME
 3865 1de0 FFF772FF 		BL	OVERT
 3866 1de4 FEF7DCF9 		_DOLIT
 3867 1de8 42F804ED 		_NEST
 3868 1dec FFF78EFD 		BL	COMMA
 3869 1df0 FEF7D6F9 		_DOLIT
 3870 1df4 70060000 		.word	DOCON-MAPOFFSET
 3871 1df8 FFF794FF 		BL	CALLC
 3872 1dfc FFF786FD 		BL	COMMA
 3873 1e00 52F804FB 		_UNNEST
 3874              		.align 2 
 3875              	//    CREATE	( -- //  string> )
 3876              	// 	Compile a new array entry without allocating code space.
 3877              	
 3878 1e04 C81D0000 		.word	_CONST-MAPOFFSET
 3879 1e08 06       	_CREAT:	.byte  6
 3880 1e09 43524541 		.ascii "CREATE"
 3880      5445
 3881 1e0f 00       		.align 2 	
 3882              	CREAT:
 3883 1e10 42F804ED 		_NEST
 3884 1e14 FFF75AFA 		BL	TOKEN
 3885 1e18 FFF7F2FE 		BL	SNAME
 3886 1e1c FFF754FF 		BL	OVERT
 3887 1e20 FEF7BEF9 		_DOLIT
 3888 1e24 42F804ED 		_NEST
 3889 1e28 FFF770FD 		BL	COMMA
 3890 1e2c FEF7B8F9 		_DOLIT
 3891 1e30 64060000 		.word	DOVAR-MAPOFFSET
 3892 1e34 FFF776FF 		BL	CALLC
 3893 1e38 52F804FB 		_UNNEST
 3894              		.align 2 
 3895              	//    VARIABLE	( -- //  string> )
 3896              	// 	Compile a new variable initialized to 0.
 3897              	
 3898 1e3c 081E0000 		.word	_CREAT-MAPOFFSET
 3899 1e40 08       	_VARIA:	.byte  8
 3900 1e41 56415249 		.ascii "VARIABLE"
 3900      41424C45 
 3901 1e49 0000BF   		.align 2 	
 3902              	VARIA:
 3903 1e4c 42F804ED 		_NEST
 3904 1e50 FFF7DEFF 		BL	CREAT
 3905 1e54 FEF7A4F9 		_DOLIT
 3906 1e58 00000000 		.word	0
 3907 1e5c FFF756FD 		BL	COMMA
 3908 1e60 52F804FB 		_UNNEST
 3909              		.align 2 
 3910              	// **************************************************************************
 3911              	//  Tools
 3912              	
 3913              	//    dm+	 ( a u -- a )
 3914              	// 	Dump u bytes from , leaving a+u on the stack.
 3915              	
 3916              	// 	.word	_VARIA-MAPOFFSET
 3917              	// _DMP	.byte  3
ARM GAS  stm32eforth.s 			page 73


 3918              	// 	.ascii "dm+"
 3919              	// 	.align 2 	
 3920              	DMP:
 3921 1e64 42F804ED 		_NEST
 3922 1e68 FEF740FA 		BL	OVER
 3923 1e6c FEF798F9 		_DOLIT
 3924 1e70 04000000 		.word	4
 3925 1e74 FFF7C6F8 		BL	UDOTR			// display address
 3926 1e78 FFF72AF8 		BL	SPACE
 3927 1e7c FEF706FA 		BL	TOR			// start count down loop
 3928 1e80 00F00CB8 		B.W	PDUM2			// skip first pass
 3929              	PDUM1:
 3930 1e84 FEF71EFA 	  BL	DUPP
 3931 1e88 FEF7E8F9 		BL	CAT
 3932 1e8c FEF788F9 		_DOLIT
 3933 1e90 03000000 		.word	3
 3934 1e94 FFF7B6F8 		BL	UDOTR			// display numeric data
 3935 1e98 FEF7ACFA 		BL	ONEP			// increment address
 3936              	PDUM2:
 3937 1e9c FEF796F9 	  BL	DONXT
 3938 1ea0 841E0000 		.word	PDUM1-MAPOFFSET	// loop till done
 3939 1ea4 52F804FB 		_UNNEST
 3940              		.align 2 
 3941              	//    DUMP	( a u -- )
 3942              	// 	Dump u bytes from a, in a formatted manner.
 3943              	
 3944 1ea8 401E0000 		.word	_VARIA-MAPOFFSET
 3945 1eac 04       	_DUMP:	.byte  4
 3946 1ead 44554D50 		.ascii "DUMP"
 3947 1eb1 0000BF   		.align 2 	
 3948              	DUMP:
 3949 1eb4 42F804ED 		_NEST
 3950 1eb8 FEF70AFC 		BL	BASE
 3951 1ebc FEF7BEF9 		BL	AT
 3952 1ec0 FEF7E4F9 		BL	TOR
 3953 1ec4 FEF702FF 		BL	HEX			// save radix,set hex
 3954 1ec8 FEF76AF9 		_DOLIT
 3955 1ecc 10000000 		.word	16
 3956 1ed0 FEF702FD 		BL	SLASH			// change count to lines
 3957 1ed4 FEF7DAF9 		BL	TOR
 3958 1ed8 00F014B8 		B.W	DUMP4			// start count down loop
 3959              	DUMP1:
 3960 1edc FFF738F8 	  BL	CR
 3961 1ee0 FEF75EF9 		_DOLIT
 3962 1ee4 10000000 		.word	16
 3963 1ee8 FEF70AFB 		BL	DDUP
 3964 1eec FFF7BAFF 		BL	DMP			// display numeric
 3965 1ef0 FEF7EEFA 		BL	ROT
 3966 1ef4 FEF7ECFA 		BL	ROT
 3967 1ef8 FEF7EAFF 		BL	SPACE
 3968 1efc FEF7E8FF 		BL	SPACE
 3969 1f00 FFF70EF8 		BL	TYPEE			// display printable characters
 3970              	DUMP4:
 3971 1f04 FEF762F9 	  BL	DONXT
 3972 1f08 DC1E0000 		.word	DUMP1-MAPOFFSET	// loop till done
 3973              	DUMP3:
 3974 1f0c FEF7D2F9 	  BL	DROP
ARM GAS  stm32eforth.s 			page 74


 3975 1f10 FEF7AAF9 		BL	RFROM
 3976 1f14 FEF7DCFB 		BL	BASE
 3977 1f18 FEF786F9 		BL	STORE			// restore radix
 3978 1f1c 52F804FB 		_UNNEST
 3979              		.align 2 
 3980              	//    .S	  ( ... -- ... )
 3981              	// 	Display the contents of the data stack.
 3982              	
 3983 1f20 AC1E0000 		.word	_DUMP-MAPOFFSET
 3984              	_DOTS:
 3985 1f24 02       		.byte  2
 3986 1f25 2E53     		.ascii ".S"
 3987 1f27 00       		.align 2 	
 3988              	DOTS:
 3989 1f28 42F804ED 		_NEST
 3990 1f2c FEF7D0FF 		BL	SPACE
 3991 1f30 FEF736FD 		BL	DEPTH			// stack depth
 3992 1f34 FEF7AAF9 		BL	TOR			// start count down loop
 3993 1f38 00F006B8 		B.W	DOTS2			// skip first pass
 3994              	DOTS1:
 3995 1f3c FEF79EF9 	  BL	RAT
 3996 1f40 FEF740FD 		BL	PICK
 3997 1f44 FFF78AF8 		BL	DOT			// index stack, display contents
 3998              	DOTS2:
 3999 1f48 FEF740F9 	  BL	DONXT
 4000 1f4c 3C1F0000 		.word	DOTS1-MAPOFFSET	// loop till done
 4001 1f50 FEF7BEFF 		BL	SPACE
 4002 1f54 52F804FB 		_UNNEST
 4003              		.align 2 
 4004              	//    >NAME	( ca -- na | F )
 4005              	// 	Convert code address to a name address.
 4006              	
 4007 1f58 241F0000 		.word	_DOTS-MAPOFFSET
 4008 1f5c 05       	_TNAME:	.byte  5
 4009 1f5d 3E4E414D 		.ascii ">NAME"
 4009      45
 4010 1f62 00BF     		.align 2 	
 4011              	TNAME:
 4012 1f64 42F804ED 		_NEST
 4013 1f68 FEF790F9 		BL	TOR			//  
 4014 1f6c FEF7FAFB 		BL	CNTXT			//  va
 4015 1f70 FEF764F9 		BL	AT			//  na
 4016              	TNAM1:
 4017 1f74 FEF7A6F9 		BL	DUPP			//  na na
 4018 1f78 FEF738F9 		BL	QBRAN
 4019 1f7c A41F0000 		.word	TNAM2-MAPOFFSET	//  vocabulary end, no match
 4020 1f80 FEF7A0F9 		BL	DUPP			//  na na
 4021 1f84 FFF7B0F9 		BL	NAMET			//  na ca
 4022 1f88 FEF778F9 		BL	RAT			//  na ca code
 4023 1f8c FEF7D4F9 		BL	XORR			//  na f --
 4024 1f90 FEF72CF9 		BL	QBRAN
 4025 1f94 A41F0000 		.word	TNAM2-MAPOFFSET
 4026 1f98 FEF758FA 		BL	CELLM			//  la 
 4027 1f9c FEF74EF9 		BL	AT			//  next_na
 4028 1fa0 FFF7E8BF 		B.W	TNAM1
 4029              	TNAM2:	
 4030 1fa4 FEF760F9 		BL	RFROM
ARM GAS  stm32eforth.s 			page 75


 4031 1fa8 FEF784F9 		BL	DROP			//  0|na --
 4032 1fac 52F804FB 		_UNNEST			// 0
 4033              		.align 2 
 4034              	//    .ID	 ( na -- )
 4035              	// 	Display the name at address.
 4036              	
 4037 1fb0 5C1F0000 		.word	_TNAME-MAPOFFSET
 4038 1fb4 03       	_DOTID:	.byte  3
 4039 1fb5 2E4944   		.ascii ".ID"
 4040              		.align 2 	
 4041              	DOTID:
 4042 1fb8 42F804ED 		_NEST
 4043 1fbc FEF77EFA 		BL	QDUP			// if zero no name
 4044 1fc0 FEF714F9 		BL	QBRAN
 4045 1fc4 E01F0000 		.word	DOTI1-MAPOFFSET
 4046 1fc8 FEF738FB 		BL	COUNT
 4047 1fcc FEF7E8F8 		_DOLIT
 4048 1fd0 1F000000 		.word	0x1F
 4049 1fd4 FEF79CF9 		BL	ANDD			// mask lexicon bits
 4050 1fd8 FEF7A2FF 		BL	TYPEE
 4051 1fdc 52F804FB 		_UNNEST			// display name string
 4052              	DOTI1:
 4053 1fe0 FEF7EEFF 	  BL	DOTQP
 4054 1fe4 09       		.byte	9
 4055 1fe5 207B6E6F 		.ascii " {noName}"
 4055      4E616D65 
 4055      7D
 4056 1fee 00BF     		.align 2 	
 4057 1ff0 52F804FB 		_UNNEST
 4058              		.align 2 
 4059              	//    SEE	 ( -- //  string> )
 4060              	// 	A simple decompiler.
 4061              	
 4062 1ff4 B41F0000 		.word	_DOTID-MAPOFFSET
 4063 1ff8 03       	_SEE:	.byte  3
 4064 1ff9 534545   		.ascii "SEE"
 4065              		.align 2 	
 4066              	SEE:
 4067 1ffc 42F804ED 		_NEST
 4068 2000 FFF764FC 		BL	TICK	//  ca --, starting address
 4069 2004 FEF7A4FF 		BL	CR	
 4070 2008 FEF7CAF8 		_DOLIT
 4071 200c 14000000 		.word	20
 4072 2010 FEF73CF9 		BL	TOR
 4073              	SEE1:
 4074 2014 FEF710FA 		BL	CELLP			//  a
 4075 2018 FEF754F9 		BL	DUPP			//  a a
 4076 201c 00F010F8 		BL	DECOMP		//  a
 4077 2020 FEF7D4F8 		BL	DONXT
 4078 2024 14200000 		.word	SEE1-MAPOFFSET
 4079 2028 FEF744F9 		BL	DROP
 4080 202c 52F804FB 		_UNNEST
 4081              		.align 2 
 4082              	// 	DECOMPILE ( a -- )
 4083              	// 	Convert code in a.  Display name of command or as data.
 4084              	
 4085 2030 F81F0000 		.word	_SEE-MAPOFFSET
ARM GAS  stm32eforth.s 			page 76


 4086 2034 09       	_DECOM:	.byte  9
 4087 2035 4445434F 		.ascii "DECOMPILE"
 4087      4D50494C 
 4087      45
 4088 203e 00BF     		.align 2 
 4089              		
 4090              	DECOMP:	
 4091 2040 42F804ED 		_NEST
 4092 2044 FEF73EF9 		BL	DUPP			//  a a
 4093              	// 	BL	TOR			//  a
 4094 2048 FEF7F8F8 		BL	AT			//  a code
 4095 204c FEF73AF9 		BL	DUPP			//  a code code
 4096 2050 FEF7A6F8 		_DOLIT
 4097 2054 00F800F8 		.word	0xF800F800
 4098 2058 FEF75AF9 		BL	ANDD
 4099 205c FEF7A0F8 		_DOLIT
 4100 2060 00F000F8 		.word	0xF800F000
 4101 2064 FEF780FA 		BL	EQUAL			//  a code ?
 4102 2068 FEF7C0F8 		BL	QBRAN
 4103 206c C4200000 		.word	DECOM2-MAPOFFSET	//  not a command
 4104              		//  a valid_code --, extract address and display name
 4105 2070 40F6FE70 		MOVW	R0,#0xFFE
 4106 2074 2C46     		MOV	R4,R5
 4107 2076 4FEA4555 		LSL	R5,R5,#21		//  get bits 22-12
 4108 207a 4FEA6525 		ASR	R5,R5,#9		//  with sign extension
 4109 207e 4FEAD434 		LSR	R4,R4,#15		//  get bits 11-1
 4110 2082 04EA0004 		AND	R4,R4,R0		//  retain only bits 11-1
 4111 2086 45EA0405 		ORR	R5,R5,R4		//  get bits 22-1
 4112 208a 00BF     		NOP
 4113 208c FEF72EF9 		BL	OVER			//  a offset a
 4114 2090 FEF780F9 		BL	PLUS			//  a target-4
 4115 2094 FEF7D0F9 		BL	CELLP			//  a target
 4116 2098 FFF764FF 		BL	TNAME			//  a na/0 --, is it a name?
 4117 209c FEF70EFA 		BL	QDUP			//  name address or zero
 4118 20a0 FEF7A4F8 		BL	QBRAN
 4119 20a4 B8200000 		.word	DECOM1-MAPOFFSET
 4120 20a8 FEF712FF 		BL	SPACE			//  a na
 4121 20ac FFF784FF 		BL	DOTID			//  a --, display name
 4122              	// 	BL	RFROM			//  a
 4123 20b0 FEF700F9 		BL	DROP
 4124 20b4 52F804FB 		_UNNEST
 4125              	DECOM1:	// BL	RFROM		//  a
 4126 20b8 FEF7C0F8 		BL	AT			//  data
 4127 20bc FEF7BCFF 		BL	UDOT			//  display data
 4128 20c0 52F804FB 		_UNNEST
 4129              	DECOM2:
 4130 20c4 FEF7B8FF 		BL	UDOT
 4131              	// 	BL	RFROM
 4132 20c8 FEF7F4F8 		BL	DROP
 4133 20cc 52F804FB 		_UNNEST
 4134              		.align 2 
 4135              	//    WORDS	( -- )
 4136              	// 	Display the names in the context vocabulary.
 4137              	
 4138 20d0 34200000 		.word	_DECOM-MAPOFFSET
 4139 20d4 05       	_WORDS:	.byte  5
 4140 20d5 574F5244 		.ascii "WORDS"
ARM GAS  stm32eforth.s 			page 77


 4140      53
 4141 20da 00BF     		.align 2 	
 4142              	WORDS:
 4143 20dc 42F804ED 		_NEST
 4144 20e0 FEF736FF 		BL	CR
 4145 20e4 FEF73EFB 		BL	CNTXT
 4146 20e8 FEF7A8F8 		BL	AT			// only in context
 4147              	WORS1:
 4148 20ec FEF7E6F9 		BL	QDUP			// ?at end of list
 4149 20f0 FEF77CF8 		BL	QBRAN
 4150 20f4 10210000 		.word	WORS2-MAPOFFSET
 4151 20f8 FEF7E4F8 		BL	DUPP
 4152 20fc FEF7E8FE 		BL	SPACE
 4153 2100 FFF75AFF 		BL	DOTID			// display a name
 4154 2104 FEF7A2F9 		BL	CELLM
 4155 2108 FEF798F8 		BL	AT
 4156 210c FFF7EEBF 		B.W	WORS1
 4157              	WORS2:
 4158 2110 52F804FB 		_UNNEST
 4159              		.align 2 
 4160              	
 4161              	// **************************************************************************
 4162              	//  cold start
 4163              	
 4164              	//    VER	 ( -- n )
 4165              	// 	Return the version number of this implementation.
 4166              	
 4167              	// 	.word	_WORDS-MAPOFFSET
 4168              	// _VERSN	.byte  3
 4169              	// 	.ascii "VER"
 4170              	// 	.align 2 	
 4171              	VERSN:
 4172 2114 42F804ED 		_NEST
 4173 2118 FEF742F8 		_DOLIT
 4174 211c 00010000 		.word	VER*256+EXT
 4175 2120 52F804FB 		_UNNEST
 4176              		.align 2 
 4177              	//    hi	  ( -- )
 4178              	// 	Display the sign-on message of eForth.
 4179              	
 4180 2124 D4200000 		.word	_WORDS-MAPOFFSET
 4181 2128 02       	_HI:	.byte  2
 4182 2129 4849     		.ascii "HI"
 4183 212b 00       		.align 2 	
 4184              	HI:
 4185 212c 42F804ED 		_NEST
 4186 2130 FEF70EFF 		BL	CR	// initialize I/O
 4187 2134 FEF744FF 		BL	DOTQP
 4188 2138 0D       		.byte	13
 4189 2139 73746D33 		.ascii "stm32eForth v"	// model
 4189      3265466F 
 4189      72746820 
 4189      76
 4190 2146 00BF     		.align 2
 4191 2148 FEF7C2FA 		BL	BASE
 4192 214c FEF776F8 		BL	AT
 4193 2150 FEF7BCFD 		BL	HEX	// save radix
ARM GAS  stm32eforth.s 			page 78


 4194 2154 FFF7DEFF 		BL	VERSN
 4195 2158 FEF732FD 		BL	BDIGS
 4196 215c FEF756FD 		BL	DIG
 4197 2160 FEF754FD 		BL	DIG
 4198 2164 FEF71CF8 		_DOLIT
 4199 2168 2E000000 		.word	'.'
 4200 216c FEF738FD 		BL	HOLD
 4201 2170 FEF75CFD 		BL	DIGS
 4202 2174 FEF782FD 		BL	EDIGS
 4203 2178 FEF7D2FE 		BL	TYPEE	// format version number
 4204 217c FEF7A8FA 		BL	BASE
 4205 2180 FEF752F8 		BL	STORE
 4206 2184 FEF7E4FE 		BL	CR
 4207 2188 52F804FB 		_UNNEST			// restore radix
 4208              		.align 2 
 4209              	
 4210              	//    COLD	( -- )
 4211              	// 	The high level cold start sequence.
 4212              	
 4213 218c 28210000 		.word	_HI-MAPOFFSET
 4214 2190 04       	LASTN:	.byte  4
 4215 2191 434F4C44 		.ascii "COLD"
 4216 2195 0000BF   		.align 2 	
 4217              		.type COLD,%function 
 4218              	COLD:
 4219              	//  Initiate Forth registers
 4220 2198 4FF00003 		MOV R3,#UPP&0xffff		//  user area 
 4221 219c C2F20003 	 	MOVT R3,#UPP>>16		  
 4222 21a0 03F59F42 		ADD R2,R3,#0x4f80	// Forth return stack
 4223 21a4 03F59E41 		ADD R1,R3,#0x4F00 // Forth data stack
 4224 21a8 4FF00005 		MOV R5,#0			//  tos
 4225 21ac 00BF     		NOP
 4226 21ae 42F804ED 		_NEST
 4227              	COLD1:
 4228 21b2 FDF7F5FF 		_DOLIT
 4229 21b6 F4000000 		.word	UZERO-MAPOFFSET
 4230 21ba FDF7F1FF 		_DOLIT
 4231 21be 00000020 		.word	UPP
 4232 21c2 FDF7EDFF 		_DOLIT
 4233 21c6 48000000 		.word	ULAST-UZERO
 4234 21ca FEF76BFC 		BL	MOVE 			// initialize user area
 4235 21ce FFF7CDFA 		BL	PRESE			// initialize stack and TIB
 4236 21d2 FEF771FA 		BL	TBOOT
 4237 21d6 FEF73DFC 		BL	ATEXE			// application boot
 4238 21da FFF775FD 		BL	OVERT
 4239 21de FFF7D5BA 		B.W	QUIT			// start interpretation
 4240 21e2 00BF     		.align 2 
 4241              	COLD2:	
 4242              	CTOP:
 4243 21e4 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4244              	
 4245              	
 4246 21e8 00200240 	  .end 
 4246      23016745 
 4246      AB89EFCD 
ARM GAS  stm32eforth.s 			page 79


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
ARM GAS  stm32eforth.s 			page 80


board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32eforth.s:87     .bss:0000000000000000 system_vars
       stm32eforth.s:462    .text.reset_handler:000000000000013c ULAST
       stm32eforth.s:444    .text.reset_handler:00000000000000f4 UZERO
       stm32eforth.s:87     .bss:0000000000000004 ticks
       stm32eforth.s:127    .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:258    .text.reset_handler:0000000000000000 reset_handler
       stm32eforth.s:218    .text.default_handler:0000000000000000 default_handler
       stm32eforth.s:236    .text.default_handler:0000000000000034 systick_handler
       stm32eforth.s:216    .text.default_handler:0000000000000000 $t
       stm32eforth.s:2357   .text.reset_handler:0000000000000f50 CR
       stm32eforth.s:2421   .text.reset_handler:0000000000000fc0 DOTQP
       stm32eforth.s:222    .text.default_handler:000000000000000c $d
       stm32eforth.s:2124   .text.reset_handler:0000000000000ccc HEX
       stm32eforth.s:2472   .text.reset_handler:0000000000001038 UDOT
       stm32eforth.s:229    .text.default_handler:0000000000000030 Infinite_Loop
       stm32eforth.s:245    .text.default_handler:0000000000000048 stk_exit
       stm32eforth.s:248    *ABS*:0000000040011000 LED_GPIO
       stm32eforth.s:249    *ABS*:000000000000000d LED_PIN
       stm32eforth.s:256    .text.reset_handler:0000000000000000 $t
       stm32eforth.s:264    .text.reset_handler:0000000000000010 zero_loop
       stm32eforth.s:274    .text.reset_handler:0000000000000024 init_devices
       stm32eforth.s:3207   .text.reset_handler:00000000000017ac UNLOCK
       stm32eforth.s:4218   .text.reset_handler:0000000000002198 COLD
       stm32eforth.s:289    .text.reset_handler:0000000000000042 wait_hserdy
       stm32eforth.s:309    .text.reset_handler:000000000000005c wait_pllrdy
       stm32eforth.s:322    .text.reset_handler:000000000000007c wait_sws
       stm32eforth.s:355    *ABS*:0000000040013800 UART
       stm32eforth.s:376    *ABS*:0000000000000001 VER
       stm32eforth.s:377    *ABS*:0000000000000000 EXT
       stm32eforth.s:383    *ABS*:0000000000000000 RAMOFFSET
       stm32eforth.s:384    *ABS*:0000000000000000 MAPOFFSET
       stm32eforth.s:386    *ABS*:0000000000000040 COMPO
       stm32eforth.s:387    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:388    *ABS*:00000000ffffff1f MASKK
       stm32eforth.s:390    *ABS*:0000000000000004 CELLL
       stm32eforth.s:391    *ABS*:0000000000000010 BASEE
       stm32eforth.s:392    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:394    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:395    *ABS*:000000000000000a LF
       stm32eforth.s:396    *ABS*:000000000000000d CRR
       stm32eforth.s:397    *ABS*:000000000000001b ERR
       stm32eforth.s:398    *ABS*:0000000000000027 TIC
       stm32eforth.s:414    *ABS*:0000000020004f00 SPP
       stm32eforth.s:415    *ABS*:0000000020004f00 TIBB
       stm32eforth.s:416    *ABS*:0000000020004f80 RPP
       stm32eforth.s:417    *ABS*:0000000020000000 UPP
       stm32eforth.s:418    *ABS*:0000000020000100 DTOP
ARM GAS  stm32eforth.s 			page 81


       stm32eforth.s:419    *ABS*:0000000020004e00 DEND
       stm32eforth.s:428    *ABS*:0000000000000004 TICKS_OFS
       stm32eforth.s:429    *ABS*:0000000000000008 TIMER_OFS
       stm32eforth.s:430    *ABS*:000000000000000c BOOT_OFS
       stm32eforth.s:431    *ABS*:0000000000000010 BASE_OFS
       stm32eforth.s:432    *ABS*:0000000000000014 TMP_OFS
       stm32eforth.s:433    *ABS*:0000000000000018 SPAN_OFS
       stm32eforth.s:434    *ABS*:000000000000001c TOIN_OFS
       stm32eforth.s:435    *ABS*:0000000000000020 NTIB_OFS
       stm32eforth.s:436    *ABS*:0000000000000024 TIB_OFS
       stm32eforth.s:437    *ABS*:0000000000000028 EVAL_OFS
       stm32eforth.s:438    *ABS*:000000000000002c HLD_OFS
       stm32eforth.s:439    *ABS*:0000000000000030 CTXT_OFS
       stm32eforth.s:440    *ABS*:0000000000000034 FLSH_CTOP_OFS
       stm32eforth.s:441    *ABS*:0000000000000038 RAM_CTOP_OFS
       stm32eforth.s:442    *ABS*:000000000000003c LASTN_OFS
       stm32eforth.s:445    .text.reset_handler:00000000000000f4 $d
       stm32eforth.s:4184   .text.reset_handler:000000000000212c HI
       stm32eforth.s:3065   .text.reset_handler:0000000000001648 INTER
       stm32eforth.s:4214   .text.reset_handler:0000000000002190 LASTN
       stm32eforth.s:4242   .text.reset_handler:00000000000021e4 CTOP
       stm32eforth.s:472    .text.reset_handler:000000000000013c $d
       stm32eforth.s:473    .text.reset_handler:0000000000000140 _QRX
       stm32eforth.s:476    .text.reset_handler:0000000000000148 QKEY
       stm32eforth.s:477    .text.reset_handler:0000000000000148 QRX
       stm32eforth.s:488    .text.reset_handler:0000000000000168 QRX1
       stm32eforth.s:497    .text.reset_handler:0000000000000170 $d
       stm32eforth.s:498    .text.reset_handler:0000000000000174 _TXSTO
       stm32eforth.s:501    .text.reset_handler:000000000000017c TXSTO
       stm32eforth.s:502    .text.reset_handler:000000000000017c EMIT
       stm32eforth.s:503    .text.reset_handler:000000000000017c TECHO
       stm32eforth.s:506    .text.reset_handler:0000000000000184 TX1
       stm32eforth.s:522    .text.reset_handler:0000000000000194 $d
       stm32eforth.s:523    .text.reset_handler:0000000000000198 _NOP
       stm32eforth.s:525    .text.reset_handler:000000000000019c $t
       stm32eforth.s:526    .text.reset_handler:000000000000019c NOP
       stm32eforth.s:537    .text.reset_handler:00000000000001a0 DOLIT
       stm32eforth.s:548    .text.reset_handler:00000000000001b4 $d
       stm32eforth.s:549    .text.reset_handler:00000000000001b8 _EXECU
       stm32eforth.s:551    .text.reset_handler:00000000000001c0 $t
       stm32eforth.s:552    .text.reset_handler:00000000000001c0 EXECU
       stm32eforth.s:567    .text.reset_handler:00000000000001cc DONXT
       stm32eforth.s:574    .text.reset_handler:00000000000001dc NEXT1
       stm32eforth.s:588    .text.reset_handler:00000000000001ec QBRAN
       stm32eforth.s:595    .text.reset_handler:00000000000001fe QBRAN1
       stm32eforth.s:606    .text.reset_handler:0000000000000204 BRAN
       stm32eforth.s:615    .text.reset_handler:0000000000000210 $d
       stm32eforth.s:616    .text.reset_handler:0000000000000214 _EXIT
       stm32eforth.s:619    .text.reset_handler:000000000000021c EXIT
       stm32eforth.s:625    .text.reset_handler:0000000000000220 $d
       stm32eforth.s:626    .text.reset_handler:0000000000000224 _STORE
       stm32eforth.s:628    .text.reset_handler:0000000000000226 $t
       stm32eforth.s:629    .text.reset_handler:0000000000000228 STORE
       stm32eforth.s:638    .text.reset_handler:0000000000000234 $d
       stm32eforth.s:639    .text.reset_handler:0000000000000238 _AT
       stm32eforth.s:641    .text.reset_handler:000000000000023a $t
       stm32eforth.s:642    .text.reset_handler:000000000000023c AT
ARM GAS  stm32eforth.s 			page 82


       stm32eforth.s:649    .text.reset_handler:0000000000000240 $d
       stm32eforth.s:650    .text.reset_handler:0000000000000244 _CSTOR
       stm32eforth.s:653    .text.reset_handler:0000000000000248 CSTOR
       stm32eforth.s:662    .text.reset_handler:0000000000000254 $d
       stm32eforth.s:663    .text.reset_handler:0000000000000258 _CAT
       stm32eforth.s:666    .text.reset_handler:000000000000025c CAT
       stm32eforth.s:673    .text.reset_handler:0000000000000260 $d
       stm32eforth.s:674    .text.reset_handler:0000000000000264 _RFROM
       stm32eforth.s:677    .text.reset_handler:0000000000000268 RFROM
       stm32eforth.s:686    .text.reset_handler:0000000000000274 $d
       stm32eforth.s:687    .text.reset_handler:0000000000000278 _RAT
       stm32eforth.s:690    .text.reset_handler:000000000000027c RAT
       stm32eforth.s:698    .text.reset_handler:0000000000000284 $d
       stm32eforth.s:699    .text.reset_handler:0000000000000288 _TOR
       stm32eforth.s:702    .text.reset_handler:000000000000028c TOR
       stm32eforth.s:711    .text.reset_handler:0000000000000298 $d
       stm32eforth.s:712    .text.reset_handler:000000000000029c _SPAT
       stm32eforth.s:714    .text.reset_handler:00000000000002a0 $t
       stm32eforth.s:715    .text.reset_handler:00000000000002a0 SPAT
       stm32eforth.s:723    .text.reset_handler:00000000000002a8 $d
       stm32eforth.s:724    .text.reset_handler:00000000000002ac _DROP
       stm32eforth.s:727    .text.reset_handler:00000000000002b4 DROP
       stm32eforth.s:735    .text.reset_handler:00000000000002bc $d
       stm32eforth.s:736    .text.reset_handler:00000000000002c0 _DUPP
       stm32eforth.s:738    .text.reset_handler:00000000000002c4 $t
       stm32eforth.s:739    .text.reset_handler:00000000000002c4 DUPP
       stm32eforth.s:747    .text.reset_handler:00000000000002cc $d
       stm32eforth.s:748    .text.reset_handler:00000000000002d0 _SWAP
       stm32eforth.s:751    .text.reset_handler:00000000000002d8 SWAP
       stm32eforth.s:760    .text.reset_handler:00000000000002e0 $d
       stm32eforth.s:761    .text.reset_handler:00000000000002e4 _OVER
       stm32eforth.s:764    .text.reset_handler:00000000000002ec OVER
       stm32eforth.s:772    .text.reset_handler:00000000000002f4 $d
       stm32eforth.s:773    .text.reset_handler:00000000000002f8 _ZLESS
       stm32eforth.s:776    .text.reset_handler:00000000000002fc ZLESS
       stm32eforth.s:785    .text.reset_handler:0000000000000308 $d
       stm32eforth.s:786    .text.reset_handler:000000000000030c _ANDD
       stm32eforth.s:788    .text.reset_handler:0000000000000310 $t
       stm32eforth.s:789    .text.reset_handler:0000000000000310 ANDD
       stm32eforth.s:798    .text.reset_handler:000000000000031c $d
       stm32eforth.s:799    .text.reset_handler:0000000000000320 _ORR
       stm32eforth.s:802    .text.reset_handler:0000000000000324 ORR
       stm32eforth.s:811    .text.reset_handler:0000000000000330 $d
       stm32eforth.s:812    .text.reset_handler:0000000000000334 _XORR
       stm32eforth.s:814    .text.reset_handler:0000000000000338 $t
       stm32eforth.s:815    .text.reset_handler:0000000000000338 XORR
       stm32eforth.s:824    .text.reset_handler:0000000000000344 $d
       stm32eforth.s:825    .text.reset_handler:0000000000000348 _UPLUS
       stm32eforth.s:827    .text.reset_handler:000000000000034c $t
       stm32eforth.s:828    .text.reset_handler:000000000000034c UPLUS
       stm32eforth.s:839    .text.reset_handler:000000000000035c $d
       stm32eforth.s:840    .text.reset_handler:0000000000000360 _RSHIFT
       stm32eforth.s:843    .text.reset_handler:0000000000000368 RSHIFT
       stm32eforth.s:852    .text.reset_handler:0000000000000374 $d
       stm32eforth.s:853    .text.reset_handler:0000000000000378 _LSHIFT
       stm32eforth.s:856    .text.reset_handler:0000000000000380 LSHIFT
       stm32eforth.s:865    .text.reset_handler:000000000000038c $d
ARM GAS  stm32eforth.s 			page 83


       stm32eforth.s:866    .text.reset_handler:0000000000000390 _PLUS
       stm32eforth.s:868    .text.reset_handler:0000000000000392 $t
       stm32eforth.s:869    .text.reset_handler:0000000000000394 PLUS
       stm32eforth.s:877    .text.reset_handler:000000000000039c $d
       stm32eforth.s:878    .text.reset_handler:00000000000003a0 _SUBB
       stm32eforth.s:880    .text.reset_handler:00000000000003a2 $t
       stm32eforth.s:881    .text.reset_handler:00000000000003a4 SUBB
       stm32eforth.s:890    .text.reset_handler:00000000000003b0 $d
       stm32eforth.s:891    .text.reset_handler:00000000000003b4 _STAR
       stm32eforth.s:893    .text.reset_handler:00000000000003b6 $t
       stm32eforth.s:894    .text.reset_handler:00000000000003b8 STAR
       stm32eforth.s:903    .text.reset_handler:00000000000003c4 $d
       stm32eforth.s:904    .text.reset_handler:00000000000003c8 _UMSTA
       stm32eforth.s:906    .text.reset_handler:00000000000003cc $t
       stm32eforth.s:907    .text.reset_handler:00000000000003cc UMSTA
       stm32eforth.s:917    .text.reset_handler:00000000000003d8 $d
       stm32eforth.s:918    .text.reset_handler:00000000000003dc _MSTAR
       stm32eforth.s:921    .text.reset_handler:00000000000003e0 MSTAR
       stm32eforth.s:931    .text.reset_handler:00000000000003ec $d
       stm32eforth.s:932    .text.reset_handler:00000000000003f0 _ONEP
       stm32eforth.s:935    .text.reset_handler:00000000000003f4 ONEP
       stm32eforth.s:943    .text.reset_handler:00000000000003fc $d
       stm32eforth.s:944    .text.reset_handler:0000000000000400 _ONEM
       stm32eforth.s:947    .text.reset_handler:0000000000000404 ONEM
       stm32eforth.s:955    .text.reset_handler:000000000000040c $d
       stm32eforth.s:956    .text.reset_handler:0000000000000410 _TWOP
       stm32eforth.s:959    .text.reset_handler:0000000000000414 TWOP
       stm32eforth.s:967    .text.reset_handler:000000000000041c $d
       stm32eforth.s:968    .text.reset_handler:0000000000000420 _TWOM
       stm32eforth.s:971    .text.reset_handler:0000000000000424 TWOM
       stm32eforth.s:979    .text.reset_handler:000000000000042c $d
       stm32eforth.s:980    .text.reset_handler:0000000000000430 _CELLP
       stm32eforth.s:982    .text.reset_handler:0000000000000436 $t
       stm32eforth.s:983    .text.reset_handler:0000000000000438 CELLP
       stm32eforth.s:991    .text.reset_handler:0000000000000440 $d
       stm32eforth.s:992    .text.reset_handler:0000000000000444 _CELLM
       stm32eforth.s:994    .text.reset_handler:000000000000044a $t
       stm32eforth.s:995    .text.reset_handler:000000000000044c CELLM
       stm32eforth.s:1003   .text.reset_handler:0000000000000454 $d
       stm32eforth.s:1004   .text.reset_handler:0000000000000458 _BLANK
       stm32eforth.s:1007   .text.reset_handler:000000000000045c BLANK
       stm32eforth.s:1016   .text.reset_handler:0000000000000468 $d
       stm32eforth.s:1017   .text.reset_handler:000000000000046c _CELLS
       stm32eforth.s:1019   .text.reset_handler:0000000000000472 $t
       stm32eforth.s:1020   .text.reset_handler:0000000000000474 CELLS
       stm32eforth.s:1028   .text.reset_handler:000000000000047c $d
       stm32eforth.s:1029   .text.reset_handler:0000000000000480 _CELLSL
       stm32eforth.s:1031   .text.reset_handler:0000000000000486 $t
       stm32eforth.s:1032   .text.reset_handler:0000000000000488 CELLSL
       stm32eforth.s:1040   .text.reset_handler:0000000000000490 $d
       stm32eforth.s:1041   .text.reset_handler:0000000000000494 _TWOST
       stm32eforth.s:1044   .text.reset_handler:0000000000000498 TWOST
       stm32eforth.s:1052   .text.reset_handler:00000000000004a0 $d
       stm32eforth.s:1053   .text.reset_handler:00000000000004a4 _TWOSL
       stm32eforth.s:1056   .text.reset_handler:00000000000004a8 TWOSL
       stm32eforth.s:1064   .text.reset_handler:00000000000004b0 $d
       stm32eforth.s:1065   .text.reset_handler:00000000000004b4 _QDUP
ARM GAS  stm32eforth.s 			page 84


       stm32eforth.s:1068   .text.reset_handler:00000000000004bc QDUP
       stm32eforth.s:1078   .text.reset_handler:00000000000004c8 $d
       stm32eforth.s:1079   .text.reset_handler:00000000000004cc _ROT
       stm32eforth.s:1081   .text.reset_handler:00000000000004d0 $t
       stm32eforth.s:1082   .text.reset_handler:00000000000004d0 ROT
       stm32eforth.s:1093   .text.reset_handler:00000000000004dc $d
       stm32eforth.s:1094   .text.reset_handler:00000000000004e0 _DDROP
       stm32eforth.s:1096   .text.reset_handler:00000000000004e6 $t
       stm32eforth.s:1097   .text.reset_handler:00000000000004e8 DDROP
       stm32eforth.s:1106   .text.reset_handler:00000000000004f4 $d
       stm32eforth.s:1107   .text.reset_handler:00000000000004f8 _DDUP
       stm32eforth.s:1110   .text.reset_handler:0000000000000500 DDUP
       stm32eforth.s:1119   .text.reset_handler:000000000000050c $d
       stm32eforth.s:1120   .text.reset_handler:0000000000000510 _DPLUS
       stm32eforth.s:1123   .text.reset_handler:0000000000000514 DPLUS
       stm32eforth.s:1135   .text.reset_handler:0000000000000528 $d
       stm32eforth.s:1136   .text.reset_handler:000000000000052c _INVER
       stm32eforth.s:1138   .text.reset_handler:0000000000000530 $t
       stm32eforth.s:1139   .text.reset_handler:0000000000000530 INVER
       stm32eforth.s:1147   .text.reset_handler:0000000000000538 $d
       stm32eforth.s:1148   .text.reset_handler:000000000000053c _NEGAT
       stm32eforth.s:1151   .text.reset_handler:0000000000000544 NEGAT
       stm32eforth.s:1159   .text.reset_handler:000000000000054c $d
       stm32eforth.s:1160   .text.reset_handler:0000000000000550 _ABSS
       stm32eforth.s:1162   .text.reset_handler:0000000000000554 $t
       stm32eforth.s:1163   .text.reset_handler:0000000000000554 ABSS
       stm32eforth.s:1173   .text.reset_handler:0000000000000560 $d
       stm32eforth.s:1174   .text.reset_handler:0000000000000564 _EQUAL
       stm32eforth.s:1176   .text.reset_handler:0000000000000566 $t
       stm32eforth.s:1177   .text.reset_handler:0000000000000568 EQUAL
       stm32eforth.s:1188   .text.reset_handler:0000000000000578 $d
       stm32eforth.s:1189   .text.reset_handler:000000000000057c _ULESS
       stm32eforth.s:1192   .text.reset_handler:0000000000000580 ULESS
       stm32eforth.s:1203   .text.reset_handler:0000000000000590 $d
       stm32eforth.s:1204   .text.reset_handler:0000000000000594 _LESS
       stm32eforth.s:1206   .text.reset_handler:0000000000000596 $t
       stm32eforth.s:1207   .text.reset_handler:0000000000000598 LESS
       stm32eforth.s:1218   .text.reset_handler:00000000000005a8 $d
       stm32eforth.s:1219   .text.reset_handler:00000000000005ac _GREAT
       stm32eforth.s:1221   .text.reset_handler:00000000000005ae $t
       stm32eforth.s:1222   .text.reset_handler:00000000000005b0 GREAT
       stm32eforth.s:1233   .text.reset_handler:00000000000005c0 $d
       stm32eforth.s:1234   .text.reset_handler:00000000000005c4 _MAX
       stm32eforth.s:1236   .text.reset_handler:00000000000005c8 $t
       stm32eforth.s:1237   .text.reset_handler:00000000000005c8 MAX
       stm32eforth.s:1247   .text.reset_handler:00000000000005d4 $d
       stm32eforth.s:1248   .text.reset_handler:00000000000005d8 _MIN
       stm32eforth.s:1250   .text.reset_handler:00000000000005dc $t
       stm32eforth.s:1251   .text.reset_handler:00000000000005dc MIN
       stm32eforth.s:1261   .text.reset_handler:00000000000005e8 $d
       stm32eforth.s:1262   .text.reset_handler:00000000000005ec _PSTOR
       stm32eforth.s:1265   .text.reset_handler:00000000000005f0 PSTOR
       stm32eforth.s:1276   .text.reset_handler:0000000000000600 $d
       stm32eforth.s:1277   .text.reset_handler:0000000000000604 _DSTOR
       stm32eforth.s:1280   .text.reset_handler:0000000000000608 DSTOR
       stm32eforth.s:1291   .text.reset_handler:000000000000061c $d
       stm32eforth.s:1292   .text.reset_handler:0000000000000620 _DAT
ARM GAS  stm32eforth.s 			page 85


       stm32eforth.s:1295   .text.reset_handler:0000000000000624 DAT
       stm32eforth.s:1305   .text.reset_handler:0000000000000630 $d
       stm32eforth.s:1306   .text.reset_handler:0000000000000634 _COUNT
       stm32eforth.s:1308   .text.reset_handler:000000000000063a $t
       stm32eforth.s:1309   .text.reset_handler:000000000000063c COUNT
       stm32eforth.s:1319   .text.reset_handler:0000000000000648 $d
       stm32eforth.s:1320   .text.reset_handler:000000000000064c _DNEGA
       stm32eforth.s:1322   .text.reset_handler:0000000000000654 $t
       stm32eforth.s:1323   .text.reset_handler:0000000000000654 DNEGA
       stm32eforth.s:1341   .text.reset_handler:0000000000000664 DOVAR
       stm32eforth.s:1354   .text.reset_handler:0000000000000670 DOCON
       stm32eforth.s:1364   .text.reset_handler:000000000000067c $d
       stm32eforth.s:1365   .text.reset_handler:0000000000000680 _TICKS
       stm32eforth.s:1367   .text.reset_handler:0000000000000686 $t
       stm32eforth.s:1368   .text.reset_handler:0000000000000688 TICKS
       stm32eforth.s:1375   .text.reset_handler:0000000000000694 $d
       stm32eforth.s:1376   .text.reset_handler:0000000000000698 _TIMER
       stm32eforth.s:1378   .text.reset_handler:000000000000069e $t
       stm32eforth.s:1379   .text.reset_handler:00000000000006a0 TIMER
       stm32eforth.s:1388   .text.reset_handler:00000000000006ac $d
       stm32eforth.s:1389   .text.reset_handler:00000000000006b0 _TBOOT
       stm32eforth.s:1391   .text.reset_handler:00000000000006b6 $t
       stm32eforth.s:1392   .text.reset_handler:00000000000006b8 TBOOT
       stm32eforth.s:1401   .text.reset_handler:00000000000006c4 $d
       stm32eforth.s:1402   .text.reset_handler:00000000000006c8 _BASE
       stm32eforth.s:1405   .text.reset_handler:00000000000006d0 BASE
       stm32eforth.s:1418   .text.reset_handler:00000000000006dc TEMP
       stm32eforth.s:1427   .text.reset_handler:00000000000006e8 $d
       stm32eforth.s:1428   .text.reset_handler:00000000000006ec _SPAN
       stm32eforth.s:1431   .text.reset_handler:00000000000006f4 SPAN
       stm32eforth.s:1440   .text.reset_handler:0000000000000700 $d
       stm32eforth.s:1441   .text.reset_handler:0000000000000704 _INN
       stm32eforth.s:1443   .text.reset_handler:0000000000000708 $t
       stm32eforth.s:1444   .text.reset_handler:0000000000000708 INN
       stm32eforth.s:1453   .text.reset_handler:0000000000000714 $d
       stm32eforth.s:1454   .text.reset_handler:0000000000000718 _NTIB
       stm32eforth.s:1457   .text.reset_handler:0000000000000720 NTIB
       stm32eforth.s:1466   .text.reset_handler:000000000000072c $d
       stm32eforth.s:1467   .text.reset_handler:0000000000000730 _TEVAL
       stm32eforth.s:1469   .text.reset_handler:0000000000000736 $t
       stm32eforth.s:1470   .text.reset_handler:0000000000000738 TEVAL
       stm32eforth.s:1479   .text.reset_handler:0000000000000744 $d
       stm32eforth.s:1480   .text.reset_handler:0000000000000748 _HLD
       stm32eforth.s:1482   .text.reset_handler:000000000000074c $t
       stm32eforth.s:1483   .text.reset_handler:000000000000074c HLD
       stm32eforth.s:1492   .text.reset_handler:0000000000000758 $d
       stm32eforth.s:1493   .text.reset_handler:000000000000075c _CNTXT
       stm32eforth.s:1495   .text.reset_handler:0000000000000764 $t
       stm32eforth.s:1496   .text.reset_handler:0000000000000764 CNTXT
       stm32eforth.s:1497   .text.reset_handler:0000000000000764 CRRNT
       stm32eforth.s:1506   .text.reset_handler:0000000000000770 $d
       stm32eforth.s:1507   .text.reset_handler:0000000000000774 _CP
       stm32eforth.s:1510   .text.reset_handler:0000000000000778 CPP
       stm32eforth.s:1518   .text.reset_handler:0000000000000784 $d
       stm32eforth.s:1519   .text.reset_handler:0000000000000788 _FCPP
       stm32eforth.s:1522   .text.reset_handler:0000000000000790 FCPP
       stm32eforth.s:1531   .text.reset_handler:000000000000079c $d
ARM GAS  stm32eforth.s 			page 86


       stm32eforth.s:1532   .text.reset_handler:00000000000007a0 _LAST
       stm32eforth.s:1535   .text.reset_handler:00000000000007a8 LAST
       stm32eforth.s:1547   .text.reset_handler:00000000000007b4 $d
       stm32eforth.s:1548   .text.reset_handler:00000000000007b8 _WITHI
       stm32eforth.s:1551   .text.reset_handler:00000000000007c0 WITHI
       stm32eforth.s:1566   .text.reset_handler:00000000000007e0 $d
       stm32eforth.s:1567   .text.reset_handler:00000000000007e4 _UMMOD
       stm32eforth.s:1570   .text.reset_handler:00000000000007ec UMMOD
       stm32eforth.s:1574   .text.reset_handler:00000000000007f6 UMMOD0
       stm32eforth.s:1581   .text.reset_handler:0000000000000806 UMMOD1
       stm32eforth.s:1586   .text.reset_handler:0000000000000810 UMMOD2
       stm32eforth.s:1597   .text.reset_handler:000000000000081c $d
       stm32eforth.s:1598   .text.reset_handler:0000000000000820 _MSMOD
       stm32eforth.s:1600   .text.reset_handler:0000000000000826 $t
       stm32eforth.s:1601   .text.reset_handler:0000000000000828 MSMOD
       stm32eforth.s:1608   .text.reset_handler:0000000000000840 $d
       stm32eforth.s:1613   .text.reset_handler:0000000000000854 MMOD1
       stm32eforth.s:1609   .text.reset_handler:0000000000000844 $t
       stm32eforth.s:1618   .text.reset_handler:0000000000000864 $d
       stm32eforth.s:1621   .text.reset_handler:0000000000000870 MMOD2
       stm32eforth.s:1619   .text.reset_handler:0000000000000868 $t
       stm32eforth.s:1626   .text.reset_handler:0000000000000880 $d
       stm32eforth.s:1630   .text.reset_handler:0000000000000890 MMOD3
       stm32eforth.s:1627   .text.reset_handler:0000000000000884 $t
       stm32eforth.s:1637   .text.reset_handler:0000000000000894 $d
       stm32eforth.s:1638   .text.reset_handler:0000000000000898 _SLMOD
       stm32eforth.s:1641   .text.reset_handler:00000000000008a0 SLMOD
       stm32eforth.s:1652   .text.reset_handler:00000000000008b8 $d
       stm32eforth.s:1653   .text.reset_handler:00000000000008bc _MODD
       stm32eforth.s:1655   .text.reset_handler:00000000000008c0 $t
       stm32eforth.s:1656   .text.reset_handler:00000000000008c0 MODD
       stm32eforth.s:1665   .text.reset_handler:00000000000008d0 $d
       stm32eforth.s:1666   .text.reset_handler:00000000000008d4 _SLASH
       stm32eforth.s:1668   .text.reset_handler:00000000000008d6 $t
       stm32eforth.s:1669   .text.reset_handler:00000000000008d8 SLASH
       stm32eforth.s:1679   .text.reset_handler:00000000000008ec $d
       stm32eforth.s:1680   .text.reset_handler:00000000000008f0 _SSMOD
       stm32eforth.s:1682   .text.reset_handler:00000000000008f6 $t
       stm32eforth.s:1683   .text.reset_handler:00000000000008f8 SSMOD
       stm32eforth.s:1694   .text.reset_handler:0000000000000910 $d
       stm32eforth.s:1695   .text.reset_handler:0000000000000914 _STASL
       stm32eforth.s:1698   .text.reset_handler:0000000000000918 STASL
       stm32eforth.s:1711   .text.reset_handler:000000000000092c $d
       stm32eforth.s:1712   .text.reset_handler:0000000000000930 _ALGND
       stm32eforth.s:1714   .text.reset_handler:0000000000000938 $t
       stm32eforth.s:1715   .text.reset_handler:0000000000000938 ALGND
       stm32eforth.s:1725   .text.reset_handler:0000000000000948 $d
       stm32eforth.s:1726   .text.reset_handler:000000000000094c _TCHAR
       stm32eforth.s:1728   .text.reset_handler:0000000000000952 $t
       stm32eforth.s:1729   .text.reset_handler:0000000000000954 TCHAR
       stm32eforth.s:1732   .text.reset_handler:000000000000095c $d
       stm32eforth.s:1733   .text.reset_handler:0000000000000960 $t
       stm32eforth.s:1737   .text.reset_handler:0000000000000970 $d
       stm32eforth.s:1738   .text.reset_handler:0000000000000974 $t
       stm32eforth.s:1741   .text.reset_handler:0000000000000980 $d
       stm32eforth.s:1745   .text.reset_handler:0000000000000990 TCHA1
       stm32eforth.s:1742   .text.reset_handler:0000000000000984 $t
ARM GAS  stm32eforth.s 			page 87


       stm32eforth.s:1744   .text.reset_handler:000000000000098c $d
       stm32eforth.s:1746   .text.reset_handler:0000000000000990 $t
       stm32eforth.s:1751   .text.reset_handler:0000000000000994 $d
       stm32eforth.s:1752   .text.reset_handler:0000000000000998 _DEPTH
       stm32eforth.s:1754   .text.reset_handler:000000000000099e $t
       stm32eforth.s:1755   .text.reset_handler:00000000000009a0 DEPTH
       stm32eforth.s:1768   .text.reset_handler:00000000000009b8 $d
       stm32eforth.s:1769   .text.reset_handler:00000000000009bc _PICK
       stm32eforth.s:1772   .text.reset_handler:00000000000009c4 PICK
       stm32eforth.s:1788   .text.reset_handler:00000000000009e0 $d
       stm32eforth.s:1789   .text.reset_handler:00000000000009e4 _HERE
       stm32eforth.s:1792   .text.reset_handler:00000000000009ec HERE
       stm32eforth.s:1802   .text.reset_handler:00000000000009fc $d
       stm32eforth.s:1803   .text.reset_handler:0000000000000a00 _PAD
       stm32eforth.s:1805   .text.reset_handler:0000000000000a04 $t
       stm32eforth.s:1806   .text.reset_handler:0000000000000a04 PAD
       stm32eforth.s:1817   .text.reset_handler:0000000000000a24 good
       stm32eforth.s:1825   .text.reset_handler:0000000000000a2c $d
       stm32eforth.s:1826   .text.reset_handler:0000000000000a30 _TIB
       stm32eforth.s:1828   .text.reset_handler:0000000000000a34 $t
       stm32eforth.s:1829   *ABS*:0000000020004f00 TIB_ADR
       stm32eforth.s:1830   .text.reset_handler:0000000000000a34 TIB
       stm32eforth.s:1840   .text.reset_handler:0000000000000a44 $d
       stm32eforth.s:1841   .text.reset_handler:0000000000000a48 _ATEXE
       stm32eforth.s:1844   .text.reset_handler:0000000000000a54 ATEXE
       stm32eforth.s:1857   .text.reset_handler:0000000000000a68 $d
       stm32eforth.s:1858   .text.reset_handler:0000000000000a6c _CMOVE
       stm32eforth.s:1860   .text.reset_handler:0000000000000a72 $t
       stm32eforth.s:1861   .text.reset_handler:0000000000000a74 CMOVE
       stm32eforth.s:1868   .text.reset_handler:0000000000000a86 CMOV1
       stm32eforth.s:1865   .text.reset_handler:0000000000000a7e CMOV0
       stm32eforth.s:1873   .text.reset_handler:0000000000000a90 CMOV2
       stm32eforth.s:1881   .text.reset_handler:0000000000000a98 $d
       stm32eforth.s:1882   .text.reset_handler:0000000000000a9c _MOVE
       stm32eforth.s:1885   .text.reset_handler:0000000000000aa4 MOVE
       stm32eforth.s:1893   .text.reset_handler:0000000000000aba MOVE1
       stm32eforth.s:1890   .text.reset_handler:0000000000000ab2 MOVE0
       stm32eforth.s:1898   .text.reset_handler:0000000000000ac4 MOVE2
       stm32eforth.s:1906   .text.reset_handler:0000000000000acc $d
       stm32eforth.s:1907   .text.reset_handler:0000000000000ad0 _FILL
       stm32eforth.s:1910   .text.reset_handler:0000000000000ad8 FILL
       stm32eforth.s:1913   .text.reset_handler:0000000000000ae0 FILL0
       stm32eforth.s:1916   .text.reset_handler:0000000000000ae4 FILL1
       stm32eforth.s:1922   .text.reset_handler:0000000000000af2 FILL2
       stm32eforth.s:1929   .text.reset_handler:0000000000000af8 $d
       stm32eforth.s:1930   .text.reset_handler:0000000000000afc _PACKS
       stm32eforth.s:1933   .text.reset_handler:0000000000000b04 PACKS
       stm32eforth.s:1942   .text.reset_handler:0000000000000b24 $d
       stm32eforth.s:1943   .text.reset_handler:0000000000000b28 $t
       stm32eforth.s:1945   .text.reset_handler:0000000000000b30 $d
       stm32eforth.s:1946   .text.reset_handler:0000000000000b34 $t
       stm32eforth.s:1963   .text.reset_handler:0000000000000b5c $d
       stm32eforth.s:1964   .text.reset_handler:0000000000000b60 _DIGIT
       stm32eforth.s:1966   .text.reset_handler:0000000000000b66 $t
       stm32eforth.s:1967   .text.reset_handler:0000000000000b68 DIGIT
       stm32eforth.s:1970   .text.reset_handler:0000000000000b70 $d
       stm32eforth.s:1971   .text.reset_handler:0000000000000b74 $t
ARM GAS  stm32eforth.s 			page 88


       stm32eforth.s:1981   .text.reset_handler:0000000000000b8c $d
       stm32eforth.s:1982   .text.reset_handler:0000000000000b90 _EXTRC
       stm32eforth.s:1984   .text.reset_handler:0000000000000b98 $t
       stm32eforth.s:1985   .text.reset_handler:0000000000000b98 EXTRC
       stm32eforth.s:1988   .text.reset_handler:0000000000000ba0 $d
       stm32eforth.s:1989   .text.reset_handler:0000000000000ba4 $t
       stm32eforth.s:1998   .text.reset_handler:0000000000000bb8 $d
       stm32eforth.s:1999   .text.reset_handler:0000000000000bbc _BDIGS
       stm32eforth.s:2002   .text.reset_handler:0000000000000bc0 BDIGS
       stm32eforth.s:2013   .text.reset_handler:0000000000000bd4 $d
       stm32eforth.s:2014   .text.reset_handler:0000000000000bd8 _HOLD
       stm32eforth.s:2017   .text.reset_handler:0000000000000be0 HOLD
       stm32eforth.s:2032   .text.reset_handler:0000000000000c04 $d
       stm32eforth.s:2033   .text.reset_handler:0000000000000c08 _DIG
       stm32eforth.s:2035   .text.reset_handler:0000000000000c0a $t
       stm32eforth.s:2036   .text.reset_handler:0000000000000c0c DIG
       stm32eforth.s:2047   .text.reset_handler:0000000000000c24 $d
       stm32eforth.s:2048   .text.reset_handler:0000000000000c28 _DIGS
       stm32eforth.s:2051   .text.reset_handler:0000000000000c2c DIGS
       stm32eforth.s:2053   .text.reset_handler:0000000000000c30 DIGS1
       stm32eforth.s:2057   .text.reset_handler:0000000000000c3c $d
       stm32eforth.s:2059   .text.reset_handler:0000000000000c42 DIGS2
       stm32eforth.s:2058   .text.reset_handler:0000000000000c40 $t
       stm32eforth.s:2066   .text.reset_handler:0000000000000c48 $d
       stm32eforth.s:2067   .text.reset_handler:0000000000000c4c _SIGN
       stm32eforth.s:2070   .text.reset_handler:0000000000000c54 SIGN
       stm32eforth.s:2074   .text.reset_handler:0000000000000c60 $d
       stm32eforth.s:2078   .text.reset_handler:0000000000000c70 SIGN1
       stm32eforth.s:2075   .text.reset_handler:0000000000000c64 $t
       stm32eforth.s:2076   .text.reset_handler:0000000000000c68 $d
       stm32eforth.s:2077   .text.reset_handler:0000000000000c6c $t
       stm32eforth.s:2084   .text.reset_handler:0000000000000c74 $d
       stm32eforth.s:2085   .text.reset_handler:0000000000000c78 _EDIGS
       stm32eforth.s:2088   .text.reset_handler:0000000000000c7c EDIGS
       stm32eforth.s:2105   .text.reset_handler:0000000000000c9c STRR
       stm32eforth.s:2120   .text.reset_handler:0000000000000cc4 $d
       stm32eforth.s:2121   .text.reset_handler:0000000000000cc8 _HEX
       stm32eforth.s:2123   .text.reset_handler:0000000000000ccc $t
       stm32eforth.s:2127   .text.reset_handler:0000000000000cd4 $d
       stm32eforth.s:2128   .text.reset_handler:0000000000000cd8 $t
       stm32eforth.s:2136   .text.reset_handler:0000000000000ce4 $d
       stm32eforth.s:2137   .text.reset_handler:0000000000000ce8 _DECIM
       stm32eforth.s:2139   .text.reset_handler:0000000000000cf0 $t
       stm32eforth.s:2140   .text.reset_handler:0000000000000cf0 DECIM
       stm32eforth.s:2143   .text.reset_handler:0000000000000cf8 $d
       stm32eforth.s:2144   .text.reset_handler:0000000000000cfc $t
       stm32eforth.s:2155   .text.reset_handler:0000000000000d08 $d
       stm32eforth.s:2156   .text.reset_handler:0000000000000d0c _DIGTQ
       stm32eforth.s:2159   .text.reset_handler:0000000000000d14 DIGTQ
       stm32eforth.s:2163   .text.reset_handler:0000000000000d20 $d
       stm32eforth.s:2164   .text.reset_handler:0000000000000d24 $t
       stm32eforth.s:2166   .text.reset_handler:0000000000000d2c $d
       stm32eforth.s:2167   .text.reset_handler:0000000000000d30 $t
       stm32eforth.s:2170   .text.reset_handler:0000000000000d3c $d
       stm32eforth.s:2179   .text.reset_handler:0000000000000d60 DGTQ1
       stm32eforth.s:2171   .text.reset_handler:0000000000000d40 $t
       stm32eforth.s:2172   .text.reset_handler:0000000000000d44 $d
ARM GAS  stm32eforth.s 			page 89


       stm32eforth.s:2173   .text.reset_handler:0000000000000d48 $t
       stm32eforth.s:2176   .text.reset_handler:0000000000000d54 $d
       stm32eforth.s:2177   .text.reset_handler:0000000000000d58 $t
       stm32eforth.s:2188   .text.reset_handler:0000000000000d70 $d
       stm32eforth.s:2189   .text.reset_handler:0000000000000d74 _NUMBQ
       stm32eforth.s:2191   .text.reset_handler:0000000000000d7c $t
       stm32eforth.s:2192   .text.reset_handler:0000000000000d7c NUMBQ
       stm32eforth.s:2198   .text.reset_handler:0000000000000d90 $d
       stm32eforth.s:2199   .text.reset_handler:0000000000000d94 $t
       stm32eforth.s:2204   .text.reset_handler:0000000000000da8 $d
       stm32eforth.s:2205   .text.reset_handler:0000000000000dac $t
       stm32eforth.s:2207   .text.reset_handler:0000000000000db4 $d
       stm32eforth.s:2213   .text.reset_handler:0000000000000dcc NUMQ1
       stm32eforth.s:2208   .text.reset_handler:0000000000000db8 $t
       stm32eforth.s:2217   .text.reset_handler:0000000000000dd8 $d
       stm32eforth.s:2218   .text.reset_handler:0000000000000ddc $t
       stm32eforth.s:2228   .text.reset_handler:0000000000000e04 $d
       stm32eforth.s:2267   .text.reset_handler:0000000000000e90 NUMQ6
       stm32eforth.s:2229   .text.reset_handler:0000000000000e08 $t
       stm32eforth.s:2231   .text.reset_handler:0000000000000e10 NUMQ2
       stm32eforth.s:2239   .text.reset_handler:0000000000000e2c $d
       stm32eforth.s:2258   .text.reset_handler:0000000000000e74 NUMQ4
       stm32eforth.s:2240   .text.reset_handler:0000000000000e30 $t
       stm32eforth.s:2248   .text.reset_handler:0000000000000e50 $d
       stm32eforth.s:2249   .text.reset_handler:0000000000000e54 $t
       stm32eforth.s:2253   .text.reset_handler:0000000000000e64 $d
       stm32eforth.s:2255   .text.reset_handler:0000000000000e6c NUMQ3
       stm32eforth.s:2254   .text.reset_handler:0000000000000e68 $t
       stm32eforth.s:2265   .text.reset_handler:0000000000000e8c NUMQ5
       stm32eforth.s:2264   .text.reset_handler:0000000000000e88 $d
       stm32eforth.s:2266   .text.reset_handler:0000000000000e8c $t
       stm32eforth.s:2281   .text.reset_handler:0000000000000ea8 $d
       stm32eforth.s:2282   .text.reset_handler:0000000000000eac _KEY
       stm32eforth.s:2284   .text.reset_handler:0000000000000eb0 $t
       stm32eforth.s:2285   .text.reset_handler:0000000000000eb0 KEY
       stm32eforth.s:2287   .text.reset_handler:0000000000000eb4 KEY1
       stm32eforth.s:2290   .text.reset_handler:0000000000000ebc $d
       stm32eforth.s:2291   .text.reset_handler:0000000000000ec0 $t
       stm32eforth.s:2296   .text.reset_handler:0000000000000ec4 $d
       stm32eforth.s:2297   .text.reset_handler:0000000000000ec8 _SPACE
       stm32eforth.s:2299   .text.reset_handler:0000000000000ece $t
       stm32eforth.s:2300   .text.reset_handler:0000000000000ed0 SPACE
       stm32eforth.s:2309   .text.reset_handler:0000000000000ee0 $d
       stm32eforth.s:2310   .text.reset_handler:0000000000000ee4 _SPACS
       stm32eforth.s:2313   .text.reset_handler:0000000000000eec SPACS
       stm32eforth.s:2316   .text.reset_handler:0000000000000ef4 $d
       stm32eforth.s:2317   .text.reset_handler:0000000000000ef8 $t
       stm32eforth.s:2322   .text.reset_handler:0000000000000f08 CHAR2
       stm32eforth.s:2320   .text.reset_handler:0000000000000f04 CHAR1
       stm32eforth.s:2324   .text.reset_handler:0000000000000f0c $d
       stm32eforth.s:2325   .text.reset_handler:0000000000000f10 $t
       stm32eforth.s:2331   .text.reset_handler:0000000000000f14 $d
       stm32eforth.s:2332   .text.reset_handler:0000000000000f18 _TYPEE
       stm32eforth.s:2335   .text.reset_handler:0000000000000f20 TYPEE
       stm32eforth.s:2343   .text.reset_handler:0000000000000f38 TYPE2
       stm32eforth.s:2339   .text.reset_handler:0000000000000f2c TYPE1
       stm32eforth.s:2345   .text.reset_handler:0000000000000f3c $d
ARM GAS  stm32eforth.s 			page 90


       stm32eforth.s:2346   .text.reset_handler:0000000000000f40 $t
       stm32eforth.s:2353   .text.reset_handler:0000000000000f48 $d
       stm32eforth.s:2354   .text.reset_handler:0000000000000f4c _CR
       stm32eforth.s:2360   .text.reset_handler:0000000000000f58 $d
       stm32eforth.s:2361   .text.reset_handler:0000000000000f5c $t
       stm32eforth.s:2363   .text.reset_handler:0000000000000f64 $d
       stm32eforth.s:2364   .text.reset_handler:0000000000000f68 $t
       stm32eforth.s:2374   .text.reset_handler:0000000000000f70 DOSTR
       stm32eforth.s:2396   .text.reset_handler:0000000000000fa4 STRQP
       stm32eforth.s:2408   .text.reset_handler:0000000000000fb0 DOTST
       stm32eforth.s:2430   .text.reset_handler:0000000000000fd0 $d
       stm32eforth.s:2431   .text.reset_handler:0000000000000fd4 _DOTR
       stm32eforth.s:2434   .text.reset_handler:0000000000000fd8 DOTR
       stm32eforth.s:2448   .text.reset_handler:0000000000000ffc $d
       stm32eforth.s:2449   .text.reset_handler:0000000000001000 _UDOTR
       stm32eforth.s:2451   .text.reset_handler:0000000000001004 $t
       stm32eforth.s:2452   .text.reset_handler:0000000000001004 UDOTR
       stm32eforth.s:2468   .text.reset_handler:0000000000001030 $d
       stm32eforth.s:2469   .text.reset_handler:0000000000001034 _UDOT
       stm32eforth.s:2484   .text.reset_handler:0000000000001054 $d
       stm32eforth.s:2485   .text.reset_handler:0000000000001058 _DOT
       stm32eforth.s:2487   .text.reset_handler:000000000000105a $t
       stm32eforth.s:2488   .text.reset_handler:000000000000105c DOT
       stm32eforth.s:2493   .text.reset_handler:000000000000106c $d
       stm32eforth.s:2494   .text.reset_handler:0000000000001070 $t
       stm32eforth.s:2496   .text.reset_handler:0000000000001078 $d
       stm32eforth.s:2499   .text.reset_handler:0000000000001084 DOT1
       stm32eforth.s:2497   .text.reset_handler:000000000000107c $t
       stm32eforth.s:2508   .text.reset_handler:0000000000001094 $d
       stm32eforth.s:2509   .text.reset_handler:0000000000001098 _QUEST
       stm32eforth.s:2511   .text.reset_handler:000000000000109a $t
       stm32eforth.s:2512   .text.reset_handler:000000000000109c QUEST
       stm32eforth.s:2529   .text.reset_handler:00000000000010ac PARS
       stm32eforth.s:2537   .text.reset_handler:00000000000010c8 $d
       stm32eforth.s:2605   .text.reset_handler:00000000000011ba PARS8
       stm32eforth.s:2538   .text.reset_handler:00000000000010cc $t
       stm32eforth.s:2544   .text.reset_handler:00000000000010e4 $d
       stm32eforth.s:2566   .text.reset_handler:0000000000001134 PARS3
       stm32eforth.s:2545   .text.reset_handler:00000000000010e8 $t
       stm32eforth.s:2546   .text.reset_handler:00000000000010ec PARS1
       stm32eforth.s:2554   .text.reset_handler:0000000000001108 $d
       stm32eforth.s:2564   .text.reset_handler:0000000000001130 PARS2
       stm32eforth.s:2555   .text.reset_handler:000000000000110c $t
       stm32eforth.s:2557   .text.reset_handler:0000000000001114 $d
       stm32eforth.s:2558   .text.reset_handler:0000000000001118 $t
       stm32eforth.s:2561   .text.reset_handler:0000000000001124 $d
       stm32eforth.s:2562   .text.reset_handler:0000000000001128 $t
       stm32eforth.s:2570   .text.reset_handler:0000000000001140 PARS4
       stm32eforth.s:2581   .text.reset_handler:0000000000001168 $d
       stm32eforth.s:2583   .text.reset_handler:0000000000001170 PARS5
       stm32eforth.s:2582   .text.reset_handler:000000000000116c $t
       stm32eforth.s:2585   .text.reset_handler:0000000000001174 $d
       stm32eforth.s:2592   .text.reset_handler:000000000000118e PARS6
       stm32eforth.s:2586   .text.reset_handler:0000000000001178 $t
       stm32eforth.s:2588   .text.reset_handler:0000000000001180 $d
       stm32eforth.s:2589   .text.reset_handler:0000000000001184 $t
       stm32eforth.s:2598   .text.reset_handler:00000000000011a2 PARS7
ARM GAS  stm32eforth.s 			page 91


       stm32eforth.s:2615   .text.reset_handler:00000000000011cc $d
       stm32eforth.s:2616   .text.reset_handler:00000000000011d0 _PARSE
       stm32eforth.s:2618   .text.reset_handler:00000000000011d6 $t
       stm32eforth.s:2619   .text.reset_handler:00000000000011d8 PARSE
       stm32eforth.s:2640   .text.reset_handler:0000000000001218 $d
       stm32eforth.s:2641   .text.reset_handler:000000000000121c _DOTPR
       stm32eforth.s:2644   .text.reset_handler:0000000000001220 DOTPR
       stm32eforth.s:2647   .text.reset_handler:0000000000001228 $d
       stm32eforth.s:2648   .text.reset_handler:000000000000122c $t
       stm32eforth.s:2655   .text.reset_handler:0000000000001238 $d
       stm32eforth.s:2656   .text.reset_handler:000000000000123c _PAREN
       stm32eforth.s:2658   .text.reset_handler:000000000000123e $t
       stm32eforth.s:2659   .text.reset_handler:0000000000001240 PAREN
       stm32eforth.s:2662   .text.reset_handler:0000000000001248 $d
       stm32eforth.s:2663   .text.reset_handler:000000000000124c $t
       stm32eforth.s:2670   .text.reset_handler:0000000000001258 $d
       stm32eforth.s:2671   .text.reset_handler:000000000000125c _BKSLA
       stm32eforth.s:2673   .text.reset_handler:000000000000125e $t
       stm32eforth.s:2674   .text.reset_handler:0000000000001260 BKSLA
       stm32eforth.s:2685   .text.reset_handler:0000000000001278 $d
       stm32eforth.s:2686   .text.reset_handler:000000000000127c _CHAR
       stm32eforth.s:2689   .text.reset_handler:0000000000001284 CHAR
       stm32eforth.s:2700   .text.reset_handler:000000000000129c $d
       stm32eforth.s:2701   .text.reset_handler:00000000000012a0 _WORDD
       stm32eforth.s:2704   .text.reset_handler:00000000000012a8 WORDD
       stm32eforth.s:2715   .text.reset_handler:00000000000012c0 $d
       stm32eforth.s:2716   .text.reset_handler:00000000000012c4 _TOKEN
       stm32eforth.s:2718   .text.reset_handler:00000000000012ca $t
       stm32eforth.s:2719   .text.reset_handler:00000000000012cc TOKEN
       stm32eforth.s:2731   .text.reset_handler:00000000000012dc $d
       stm32eforth.s:2732   .text.reset_handler:00000000000012e0 _NAMET
       stm32eforth.s:2734   .text.reset_handler:00000000000012e6 $t
       stm32eforth.s:2735   .text.reset_handler:00000000000012e8 NAMET
       stm32eforth.s:2739   .text.reset_handler:00000000000012f4 $d
       stm32eforth.s:2740   .text.reset_handler:00000000000012f8 $t
       stm32eforth.s:2748   .text.reset_handler:0000000000001308 $d
       stm32eforth.s:2749   .text.reset_handler:000000000000130c _SAMEQ
       stm32eforth.s:2751   .text.reset_handler:0000000000001312 $t
       stm32eforth.s:2752   .text.reset_handler:0000000000001314 SAMEQ
       stm32eforth.s:2774   .text.reset_handler:0000000000001364 SAME2
       stm32eforth.s:2756   .text.reset_handler:0000000000001320 SAME1
       stm32eforth.s:2770   .text.reset_handler:0000000000001354 $d
       stm32eforth.s:2771   .text.reset_handler:0000000000001358 $t
       stm32eforth.s:2776   .text.reset_handler:0000000000001368 $d
       stm32eforth.s:2777   .text.reset_handler:000000000000136c $t
       stm32eforth.s:2778   .text.reset_handler:0000000000001370 $d
       stm32eforth.s:2779   .text.reset_handler:0000000000001374 $t
       stm32eforth.s:2788   .text.reset_handler:0000000000001378 FIND
       stm32eforth.s:2801   .text.reset_handler:00000000000013a8 FIND1
       stm32eforth.s:2804   .text.reset_handler:00000000000013b0 $d
       stm32eforth.s:2824   .text.reset_handler:00000000000013f8 FIND6
       stm32eforth.s:2805   .text.reset_handler:00000000000013b4 $t
       stm32eforth.s:2808   .text.reset_handler:00000000000013c0 $d
       stm32eforth.s:2809   .text.reset_handler:00000000000013c4 $t
       stm32eforth.s:2813   .text.reset_handler:00000000000013d4 $d
       stm32eforth.s:2817   .text.reset_handler:00000000000013e4 FIND2
       stm32eforth.s:2814   .text.reset_handler:00000000000013d8 $t
ARM GAS  stm32eforth.s 			page 92


       stm32eforth.s:2822   .text.reset_handler:00000000000013f4 FIND3
       stm32eforth.s:2831   .text.reset_handler:0000000000001410 FIND4
       stm32eforth.s:2833   .text.reset_handler:0000000000001414 $d
       stm32eforth.s:2838   .text.reset_handler:0000000000001428 FIND5
       stm32eforth.s:2834   .text.reset_handler:0000000000001418 $t
       stm32eforth.s:2853   .text.reset_handler:000000000000144c $d
       stm32eforth.s:2854   .text.reset_handler:0000000000001450 _NAMEQ
       stm32eforth.s:2856   .text.reset_handler:0000000000001456 $t
       stm32eforth.s:2857   .text.reset_handler:0000000000001458 NAMEQ
       stm32eforth.s:2874   .text.reset_handler:000000000000146c BKSP
       stm32eforth.s:2883   .text.reset_handler:000000000000148c $d
       stm32eforth.s:2896   .text.reset_handler:00000000000014b4 BACK1
       stm32eforth.s:2884   .text.reset_handler:0000000000001490 $t
       stm32eforth.s:2885   .text.reset_handler:0000000000001494 $d
       stm32eforth.s:2886   .text.reset_handler:0000000000001498 $t
       stm32eforth.s:2893   .text.reset_handler:00000000000014ac $d
       stm32eforth.s:2894   .text.reset_handler:00000000000014b0 $t
       stm32eforth.s:2906   .text.reset_handler:00000000000014b8 TAP
       stm32eforth.s:2923   .text.reset_handler:00000000000014d4 KTAP
       stm32eforth.s:2924   .text.reset_handler:00000000000014d4 TTAP
       stm32eforth.s:2928   .text.reset_handler:00000000000014e0 $d
       stm32eforth.s:2929   .text.reset_handler:00000000000014e4 $t
       stm32eforth.s:2931   .text.reset_handler:00000000000014ec $d
       stm32eforth.s:2944   .text.reset_handler:000000000000151c KTAP2
       stm32eforth.s:2932   .text.reset_handler:00000000000014f0 $t
       stm32eforth.s:2933   .text.reset_handler:00000000000014f4 $d
       stm32eforth.s:2934   .text.reset_handler:00000000000014f8 $t
       stm32eforth.s:2936   .text.reset_handler:0000000000001500 $d
       stm32eforth.s:2941   .text.reset_handler:0000000000001514 KTAP1
       stm32eforth.s:2937   .text.reset_handler:0000000000001504 $t
       stm32eforth.s:2940   .text.reset_handler:0000000000001510 $d
       stm32eforth.s:2942   .text.reset_handler:0000000000001514 $t
       stm32eforth.s:2954   .text.reset_handler:0000000000001530 $d
       stm32eforth.s:2955   .text.reset_handler:0000000000001534 _ACCEP
       stm32eforth.s:2958   .text.reset_handler:000000000000153c ACCEP
       stm32eforth.s:2963   .text.reset_handler:000000000000154c ACCP1
       stm32eforth.s:2967   .text.reset_handler:0000000000001558 $d
       stm32eforth.s:2983   .text.reset_handler:0000000000001588 ACCP4
       stm32eforth.s:2968   .text.reset_handler:000000000000155c $t
       stm32eforth.s:2972   .text.reset_handler:000000000000156c $d
       stm32eforth.s:2973   .text.reset_handler:0000000000001570 $t
       stm32eforth.s:2975   .text.reset_handler:0000000000001578 $d
       stm32eforth.s:2978   .text.reset_handler:0000000000001582 ACCP2
       stm32eforth.s:2976   .text.reset_handler:000000000000157c $t
       stm32eforth.s:2981   .text.reset_handler:0000000000001586 ACCP3
       stm32eforth.s:2992   .text.reset_handler:0000000000001598 $d
       stm32eforth.s:2993   .text.reset_handler:000000000000159c _QUERY
       stm32eforth.s:2995   .text.reset_handler:00000000000015a2 $t
       stm32eforth.s:2996   .text.reset_handler:00000000000015a4 QUERY
       stm32eforth.s:3000   .text.reset_handler:00000000000015b0 $d
       stm32eforth.s:3001   .text.reset_handler:00000000000015b4 $t
       stm32eforth.s:3006   .text.reset_handler:00000000000015c8 $d
       stm32eforth.s:3007   .text.reset_handler:00000000000015cc $t
       stm32eforth.s:3017   .text.reset_handler:00000000000015d8 $d
       stm32eforth.s:3018   .text.reset_handler:00000000000015dc _ABORT
       stm32eforth.s:3020   .text.reset_handler:00000000000015e2 $t
       stm32eforth.s:3021   .text.reset_handler:00000000000015e4 ABORT
ARM GAS  stm32eforth.s 			page 93


       stm32eforth.s:3027   .text.reset_handler:00000000000015f8 $d
       stm32eforth.s:3028   .text.reset_handler:00000000000015fc $t
       stm32eforth.s:3177   .text.reset_handler:000000000000176c PRESE
       stm32eforth.s:3192   .text.reset_handler:000000000000178c QUIT
       stm32eforth.s:3041   .text.reset_handler:000000000000160c ABORQ
       stm32eforth.s:3044   .text.reset_handler:0000000000001614 $d
       stm32eforth.s:3050   .text.reset_handler:000000000000162c ABOR1
       stm32eforth.s:3045   .text.reset_handler:0000000000001618 $t
       stm32eforth.s:3061   .text.reset_handler:0000000000001638 $d
       stm32eforth.s:3062   .text.reset_handler:000000000000163c _INTER
       stm32eforth.s:3064   .text.reset_handler:0000000000001648 $t
       stm32eforth.s:3070   .text.reset_handler:0000000000001658 $d
       stm32eforth.s:3081   .text.reset_handler:0000000000001688 INTE1
       stm32eforth.s:3071   .text.reset_handler:000000000000165c $t
       stm32eforth.s:3073   .text.reset_handler:0000000000001664 $d
       stm32eforth.s:3074   .text.reset_handler:0000000000001668 $t
       stm32eforth.s:3076   .text.reset_handler:0000000000001670 $d
       stm32eforth.s:3078   .text.reset_handler:000000000000167e $t
       stm32eforth.s:3084   .text.reset_handler:0000000000001690 $d
       stm32eforth.s:3086   .text.reset_handler:0000000000001698 INTE2
       stm32eforth.s:3085   .text.reset_handler:0000000000001694 $t
       stm32eforth.s:3092   .text.reset_handler:000000000000169c $d
       stm32eforth.s:3093   .text.reset_handler:00000000000016a0 _LBRAC
       stm32eforth.s:3095   .text.reset_handler:00000000000016a2 $t
       stm32eforth.s:3096   .text.reset_handler:00000000000016a4 LBRAC
       stm32eforth.s:3099   .text.reset_handler:00000000000016ac $d
       stm32eforth.s:3100   .text.reset_handler:00000000000016b0 $t
       stm32eforth.s:3107   .text.reset_handler:00000000000016bc $d
       stm32eforth.s:3108   .text.reset_handler:00000000000016c0 _DOTOK
       stm32eforth.s:3110   .text.reset_handler:00000000000016c4 $t
       stm32eforth.s:3111   .text.reset_handler:00000000000016c4 DOTOK
       stm32eforth.s:3114   .text.reset_handler:00000000000016cc $d
       stm32eforth.s:3115   .text.reset_handler:00000000000016d0 $t
       stm32eforth.s:3119   .text.reset_handler:00000000000016e0 $d
       stm32eforth.s:3124   .text.reset_handler:00000000000016ec DOTO1
       stm32eforth.s:3120   .text.reset_handler:00000000000016e4 $t
       stm32eforth.s:3121   .text.reset_handler:00000000000016e8 $d
       stm32eforth.s:3123   .text.reset_handler:00000000000016ec $t
       stm32eforth.s:3131   .text.reset_handler:00000000000016f4 $d
       stm32eforth.s:3132   .text.reset_handler:00000000000016f8 _QSTAC
       stm32eforth.s:3135   .text.reset_handler:0000000000001700 QSTAC
       stm32eforth.s:3140   .text.reset_handler:0000000000001710 $d
       stm32eforth.s:3148   .text.reset_handler:0000000000001720 $d
       stm32eforth.s:3149   .text.reset_handler:0000000000001724 _EVAL
       stm32eforth.s:3152   .text.reset_handler:000000000000172c EVAL
       stm32eforth.s:3154   .text.reset_handler:0000000000001730 EVAL1
       stm32eforth.s:3159   .text.reset_handler:0000000000001740 $d
       stm32eforth.s:3164   .text.reset_handler:0000000000001754 EVAL2
       stm32eforth.s:3160   .text.reset_handler:0000000000001744 $t
       stm32eforth.s:3173   .text.reset_handler:0000000000001760 $d
       stm32eforth.s:3174   .text.reset_handler:0000000000001764 _PRESE
       stm32eforth.s:3188   .text.reset_handler:0000000000001780 $d
       stm32eforth.s:3189   .text.reset_handler:0000000000001784 _QUIT
       stm32eforth.s:3196   .text.reset_handler:0000000000001798 QUIT1
       stm32eforth.s:3198   .text.reset_handler:000000000000179c QUIT2
       stm32eforth.s:3202   .text.reset_handler:00000000000017a8 $d
       stm32eforth.s:3208   .text.reset_handler:00000000000017ac $t
ARM GAS  stm32eforth.s 			page 94


       stm32eforth.s:3220   .text.reset_handler:00000000000017cc WAIT_BSY
       stm32eforth.s:3222   .text.reset_handler:00000000000017d0 WAIT1
       stm32eforth.s:3232   .text.reset_handler:00000000000017dc $d
       stm32eforth.s:3233   .text.reset_handler:00000000000017e0 _ESECT
       stm32eforth.s:3237   .text.reset_handler:00000000000017f0 ESECT
       stm32eforth.s:3255   .text.reset_handler:000000000000181c $d
       stm32eforth.s:3256   .text.reset_handler:0000000000001820 _ISTOR
       stm32eforth.s:3260   .text.reset_handler:0000000000001824 ISTOR
       stm32eforth.s:3278   .text.reset_handler:0000000000001848 $d
       stm32eforth.s:3279   .text.reset_handler:000000000000184c _TURN
       stm32eforth.s:3281   .text.reset_handler:0000000000001854 $t
       stm32eforth.s:3282   .text.reset_handler:0000000000001854 TURN
       stm32eforth.s:3284   .text.reset_handler:000000000000185c $d
       stm32eforth.s:3285   .text.reset_handler:0000000000001860 $t
       stm32eforth.s:3286   .text.reset_handler:0000000000001864 $d
       stm32eforth.s:3287   .text.reset_handler:0000000000001868 $t
       stm32eforth.s:3288   .text.reset_handler:000000000000186c $d
       stm32eforth.s:3289   .text.reset_handler:0000000000001870 $t
       stm32eforth.s:3291   .text.reset_handler:0000000000001878 $d
       stm32eforth.s:3292   .text.reset_handler:000000000000187c $t
       stm32eforth.s:3293   .text.reset_handler:0000000000001880 $d
       stm32eforth.s:3294   .text.reset_handler:0000000000001884 $t
       stm32eforth.s:3298   .text.reset_handler:0000000000001894 TURN1
       stm32eforth.s:3308   .text.reset_handler:00000000000018b8 $d
       stm32eforth.s:3309   .text.reset_handler:00000000000018bc $t
       stm32eforth.s:3319   .text.reset_handler:00000000000018c4 $d
       stm32eforth.s:3320   .text.reset_handler:00000000000018c8 _TICK
       stm32eforth.s:3322   .text.reset_handler:00000000000018ca $t
       stm32eforth.s:3323   .text.reset_handler:00000000000018cc TICK
       stm32eforth.s:3328   .text.reset_handler:00000000000018dc $d
       stm32eforth.s:3330   .text.reset_handler:00000000000018e4 TICK1
       stm32eforth.s:3329   .text.reset_handler:00000000000018e0 $t
       stm32eforth.s:3335   .text.reset_handler:00000000000018e8 $d
       stm32eforth.s:3336   .text.reset_handler:00000000000018ec _ALLOT
       stm32eforth.s:3338   .text.reset_handler:00000000000018f2 $t
       stm32eforth.s:3339   .text.reset_handler:00000000000018f4 ALLOT
       stm32eforth.s:3348   .text.reset_handler:0000000000001904 $d
       stm32eforth.s:3349   .text.reset_handler:0000000000001908 _COMMA
       stm32eforth.s:3350   .text.reset_handler:000000000000190a $t
       stm32eforth.s:3351   .text.reset_handler:000000000000190c COMMA
       stm32eforth.s:3364   .text.reset_handler:000000000000192c $d
       stm32eforth.s:3365   .text.reset_handler:0000000000001930 _BCOMP
       stm32eforth.s:3367   .text.reset_handler:000000000000193a $t
       stm32eforth.s:3368   .text.reset_handler:000000000000193c BCOMP
       stm32eforth.s:3377   .text.reset_handler:000000000000194c $d
       stm32eforth.s:3378   .text.reset_handler:0000000000001950 _COMPI
       stm32eforth.s:3380   .text.reset_handler:0000000000001958 $t
       stm32eforth.s:3381   .text.reset_handler:0000000000001958 COMPI
       stm32eforth.s:3796   .text.reset_handler:0000000000001d24 CALLC
       stm32eforth.s:3396   .text.reset_handler:0000000000001980 $d
       stm32eforth.s:3397   .text.reset_handler:0000000000001984 _LITER
       stm32eforth.s:3399   .text.reset_handler:000000000000198c $t
       stm32eforth.s:3400   .text.reset_handler:000000000000198c LITER
       stm32eforth.s:3403   .text.reset_handler:0000000000001994 $d
       stm32eforth.s:3404   .text.reset_handler:0000000000001998 $t
       stm32eforth.s:3414   .text.reset_handler:00000000000019a0 STRCQ
       stm32eforth.s:3417   .text.reset_handler:00000000000019a8 $d
ARM GAS  stm32eforth.s 			page 95


       stm32eforth.s:3418   .text.reset_handler:00000000000019ac $t
       stm32eforth.s:3421   .text.reset_handler:00000000000019b8 $d
       stm32eforth.s:3422   .text.reset_handler:00000000000019bc $t
       stm32eforth.s:3436   .text.reset_handler:00000000000019d8 $d
       stm32eforth.s:3437   .text.reset_handler:00000000000019dc _FOR
       stm32eforth.s:3439   .text.reset_handler:00000000000019e0 $t
       stm32eforth.s:3440   .text.reset_handler:00000000000019e0 FOR
       stm32eforth.s:3443   .text.reset_handler:00000000000019e8 $d
       stm32eforth.s:3444   .text.reset_handler:00000000000019ec $t
       stm32eforth.s:3450   .text.reset_handler:00000000000019f4 $d
       stm32eforth.s:3451   .text.reset_handler:00000000000019f8 _BEGIN
       stm32eforth.s:3453   .text.reset_handler:00000000000019fe $t
       stm32eforth.s:3454   .text.reset_handler:0000000000001a00 BEGIN
       stm32eforth.s:3462   .text.reset_handler:0000000000001a0c $d
       stm32eforth.s:3463   .text.reset_handler:0000000000001a10 _NEXT
       stm32eforth.s:3466   .text.reset_handler:0000000000001a18 NEXT
       stm32eforth.s:3469   .text.reset_handler:0000000000001a20 $d
       stm32eforth.s:3470   .text.reset_handler:0000000000001a24 $t
       stm32eforth.s:3476   .text.reset_handler:0000000000001a2c $d
       stm32eforth.s:3477   .text.reset_handler:0000000000001a30 _UNTIL
       stm32eforth.s:3479   .text.reset_handler:0000000000001a36 $t
       stm32eforth.s:3480   .text.reset_handler:0000000000001a38 UNTIL
       stm32eforth.s:3483   .text.reset_handler:0000000000001a40 $d
       stm32eforth.s:3484   .text.reset_handler:0000000000001a44 $t
       stm32eforth.s:3490   .text.reset_handler:0000000000001a4c $d
       stm32eforth.s:3491   .text.reset_handler:0000000000001a50 _AGAIN
       stm32eforth.s:3493   .text.reset_handler:0000000000001a56 $t
       stm32eforth.s:3494   .text.reset_handler:0000000000001a58 AGAIN
       stm32eforth.s:3497   .text.reset_handler:0000000000001a60 $d
       stm32eforth.s:3498   .text.reset_handler:0000000000001a64 $t
       stm32eforth.s:3504   .text.reset_handler:0000000000001a6c $d
       stm32eforth.s:3505   .text.reset_handler:0000000000001a70 _IFF
       stm32eforth.s:3508   .text.reset_handler:0000000000001a74 IFF
       stm32eforth.s:3511   .text.reset_handler:0000000000001a7c $d
       stm32eforth.s:3512   .text.reset_handler:0000000000001a80 $t
       stm32eforth.s:3514   .text.reset_handler:0000000000001a88 $d
       stm32eforth.s:3515   .text.reset_handler:0000000000001a8c $t
       stm32eforth.s:3522   .text.reset_handler:0000000000001a98 $d
       stm32eforth.s:3523   .text.reset_handler:0000000000001a9c _AHEAD
       stm32eforth.s:3525   .text.reset_handler:0000000000001aa2 $t
       stm32eforth.s:3526   .text.reset_handler:0000000000001aa4 AHEAD
       stm32eforth.s:3529   .text.reset_handler:0000000000001aac $d
       stm32eforth.s:3530   .text.reset_handler:0000000000001ab0 $t
       stm32eforth.s:3532   .text.reset_handler:0000000000001ab8 $d
       stm32eforth.s:3533   .text.reset_handler:0000000000001abc $t
       stm32eforth.s:3540   .text.reset_handler:0000000000001ac8 $d
       stm32eforth.s:3541   .text.reset_handler:0000000000001acc _REPEA
       stm32eforth.s:3544   .text.reset_handler:0000000000001ad4 REPEA
       stm32eforth.s:3555   .text.reset_handler:0000000000001aec $d
       stm32eforth.s:3556   .text.reset_handler:0000000000001af0 _THENN
       stm32eforth.s:3559   .text.reset_handler:0000000000001af8 THENN
       stm32eforth.s:3569   .text.reset_handler:0000000000001b0c $d
       stm32eforth.s:3570   .text.reset_handler:0000000000001b10 _AFT
       stm32eforth.s:3572   .text.reset_handler:0000000000001b14 $t
       stm32eforth.s:3573   .text.reset_handler:0000000000001b14 AFT
       stm32eforth.s:3584   .text.reset_handler:0000000000001b2c $d
       stm32eforth.s:3585   .text.reset_handler:0000000000001b30 _ELSEE
ARM GAS  stm32eforth.s 			page 96


       stm32eforth.s:3588   .text.reset_handler:0000000000001b38 ELSEE
       stm32eforth.s:3598   .text.reset_handler:0000000000001b4c $d
       stm32eforth.s:3599   .text.reset_handler:0000000000001b50 _WHILE
       stm32eforth.s:3601   .text.reset_handler:0000000000001b56 $t
       stm32eforth.s:3602   .text.reset_handler:0000000000001b58 WHILE
       stm32eforth.s:3611   .text.reset_handler:0000000000001b68 $d
       stm32eforth.s:3612   .text.reset_handler:0000000000001b6c _ABRTQ
       stm32eforth.s:3615   .text.reset_handler:0000000000001b74 ABRTQ
       stm32eforth.s:3618   .text.reset_handler:0000000000001b7c $d
       stm32eforth.s:3619   .text.reset_handler:0000000000001b80 $t
       stm32eforth.s:3625   .text.reset_handler:0000000000001b88 $d
       stm32eforth.s:3626   .text.reset_handler:0000000000001b8c _STRQ
       stm32eforth.s:3629   .text.reset_handler:0000000000001b90 STRQ
       stm32eforth.s:3632   .text.reset_handler:0000000000001b98 $d
       stm32eforth.s:3633   .text.reset_handler:0000000000001b9c $t
       stm32eforth.s:3639   .text.reset_handler:0000000000001ba4 $d
       stm32eforth.s:3640   .text.reset_handler:0000000000001ba8 _DOTQ
       stm32eforth.s:3643   .text.reset_handler:0000000000001bac DOTQ
       stm32eforth.s:3646   .text.reset_handler:0000000000001bb4 $d
       stm32eforth.s:3647   .text.reset_handler:0000000000001bb8 $t
       stm32eforth.s:3656   .text.reset_handler:0000000000001bc0 $d
       stm32eforth.s:3657   .text.reset_handler:0000000000001bc4 _UNIQU
       stm32eforth.s:3659   .text.reset_handler:0000000000001bcc $t
       stm32eforth.s:3660   .text.reset_handler:0000000000001bcc UNIQU
       stm32eforth.s:3665   .text.reset_handler:0000000000001bdc $d
       stm32eforth.s:3673   .text.reset_handler:0000000000001bf8 UNIQ1
       stm32eforth.s:3666   .text.reset_handler:0000000000001be0 $t
       stm32eforth.s:3667   .text.reset_handler:0000000000001be4 $d
       stm32eforth.s:3669   .text.reset_handler:0000000000001bec $t
       stm32eforth.s:3684   .text.reset_handler:0000000000001c00 SNAME
       stm32eforth.s:3689   .text.reset_handler:0000000000001c10 $d
       stm32eforth.s:3703   .text.reset_handler:0000000000001c48 SNAM1
       stm32eforth.s:3690   .text.reset_handler:0000000000001c14 $t
       stm32eforth.s:3705   .text.reset_handler:0000000000001c4c $d
       stm32eforth.s:3707   .text.reset_handler:0000000000001c54 $t
       stm32eforth.s:3712   .text.reset_handler:0000000000001c58 $d
       stm32eforth.s:3713   .text.reset_handler:0000000000001c5c _SCOMP
       stm32eforth.s:3715   .text.reset_handler:0000000000001c66 $t
       stm32eforth.s:3716   .text.reset_handler:0000000000001c68 SCOMP
       stm32eforth.s:3721   .text.reset_handler:0000000000001c78 $d
       stm32eforth.s:3733   .text.reset_handler:0000000000001ca4 SCOM2
       stm32eforth.s:3722   .text.reset_handler:0000000000001c7c $t
       stm32eforth.s:3724   .text.reset_handler:0000000000001c84 $d
       stm32eforth.s:3725   .text.reset_handler:0000000000001c88 $t
       stm32eforth.s:3727   .text.reset_handler:0000000000001c90 $d
       stm32eforth.s:3730   .text.reset_handler:0000000000001c9c SCOM1
       stm32eforth.s:3728   .text.reset_handler:0000000000001c94 $t
       stm32eforth.s:3736   .text.reset_handler:0000000000001cac $d
       stm32eforth.s:3739   .text.reset_handler:0000000000001cb8 SCOM3
       stm32eforth.s:3737   .text.reset_handler:0000000000001cb0 $t
       stm32eforth.s:3745   .text.reset_handler:0000000000001cbc $d
       stm32eforth.s:3746   .text.reset_handler:0000000000001cc0 _OVERT
       stm32eforth.s:3748   .text.reset_handler:0000000000001cc6 $t
       stm32eforth.s:3749   .text.reset_handler:0000000000001cc8 OVERT
       stm32eforth.s:3760   .text.reset_handler:0000000000001ce0 $d
       stm32eforth.s:3761   .text.reset_handler:0000000000001ce4 _SEMIS
       stm32eforth.s:3763   .text.reset_handler:0000000000001ce8 $t
ARM GAS  stm32eforth.s 			page 97


       stm32eforth.s:3764   .text.reset_handler:0000000000001ce8 SEMIS
       stm32eforth.s:3776   .text.reset_handler:0000000000001d04 $d
       stm32eforth.s:3777   .text.reset_handler:0000000000001d08 _RBRAC
       stm32eforth.s:3779   .text.reset_handler:0000000000001d0a $t
       stm32eforth.s:3780   .text.reset_handler:0000000000001d0c RBRAC
       stm32eforth.s:3783   .text.reset_handler:0000000000001d14 $d
       stm32eforth.s:3784   .text.reset_handler:0000000000001d18 $t
       stm32eforth.s:3817   .text.reset_handler:0000000000001d60 $d
       stm32eforth.s:3818   .text.reset_handler:0000000000001d64 _COLON
       stm32eforth.s:3820   .text.reset_handler:0000000000001d66 $t
       stm32eforth.s:3821   .text.reset_handler:0000000000001d68 COLON
       stm32eforth.s:3834   .text.reset_handler:0000000000001d88 $d
       stm32eforth.s:3835   .text.reset_handler:0000000000001d8c _IMMED
       stm32eforth.s:3837   .text.reset_handler:0000000000001d96 $t
       stm32eforth.s:3838   .text.reset_handler:0000000000001d98 IMMED
       stm32eforth.s:3841   .text.reset_handler:0000000000001da0 $d
       stm32eforth.s:3842   .text.reset_handler:0000000000001da4 $t
       stm32eforth.s:3857   .text.reset_handler:0000000000001dc4 $d
       stm32eforth.s:3858   .text.reset_handler:0000000000001dc8 _CONST
       stm32eforth.s:3861   .text.reset_handler:0000000000001dd4 CONST
       stm32eforth.s:3870   .text.reset_handler:0000000000001df4 $d
       stm32eforth.s:3871   .text.reset_handler:0000000000001df8 $t
       stm32eforth.s:3878   .text.reset_handler:0000000000001e04 $d
       stm32eforth.s:3879   .text.reset_handler:0000000000001e08 _CREAT
       stm32eforth.s:3882   .text.reset_handler:0000000000001e10 CREAT
       stm32eforth.s:3891   .text.reset_handler:0000000000001e30 $d
       stm32eforth.s:3892   .text.reset_handler:0000000000001e34 $t
       stm32eforth.s:3898   .text.reset_handler:0000000000001e3c $d
       stm32eforth.s:3899   .text.reset_handler:0000000000001e40 _VARIA
       stm32eforth.s:3902   .text.reset_handler:0000000000001e4c VARIA
       stm32eforth.s:3906   .text.reset_handler:0000000000001e58 $d
       stm32eforth.s:3907   .text.reset_handler:0000000000001e5c $t
       stm32eforth.s:3920   .text.reset_handler:0000000000001e64 DMP
       stm32eforth.s:3924   .text.reset_handler:0000000000001e70 $d
       stm32eforth.s:3925   .text.reset_handler:0000000000001e74 $t
       stm32eforth.s:3936   .text.reset_handler:0000000000001e9c PDUM2
       stm32eforth.s:3929   .text.reset_handler:0000000000001e84 PDUM1
       stm32eforth.s:3933   .text.reset_handler:0000000000001e90 $d
       stm32eforth.s:3934   .text.reset_handler:0000000000001e94 $t
       stm32eforth.s:3938   .text.reset_handler:0000000000001ea0 $d
       stm32eforth.s:3939   .text.reset_handler:0000000000001ea4 $t
       stm32eforth.s:3944   .text.reset_handler:0000000000001ea8 $d
       stm32eforth.s:3945   .text.reset_handler:0000000000001eac _DUMP
       stm32eforth.s:3948   .text.reset_handler:0000000000001eb4 DUMP
       stm32eforth.s:3955   .text.reset_handler:0000000000001ecc $d
       stm32eforth.s:3956   .text.reset_handler:0000000000001ed0 $t
       stm32eforth.s:3970   .text.reset_handler:0000000000001f04 DUMP4
       stm32eforth.s:3959   .text.reset_handler:0000000000001edc DUMP1
       stm32eforth.s:3962   .text.reset_handler:0000000000001ee4 $d
       stm32eforth.s:3963   .text.reset_handler:0000000000001ee8 $t
       stm32eforth.s:3972   .text.reset_handler:0000000000001f08 $d
       stm32eforth.s:3973   .text.reset_handler:0000000000001f0c DUMP3
       stm32eforth.s:3974   .text.reset_handler:0000000000001f0c $t
       stm32eforth.s:3983   .text.reset_handler:0000000000001f20 $d
       stm32eforth.s:3984   .text.reset_handler:0000000000001f24 _DOTS
       stm32eforth.s:3988   .text.reset_handler:0000000000001f28 DOTS
       stm32eforth.s:3998   .text.reset_handler:0000000000001f48 DOTS2
ARM GAS  stm32eforth.s 			page 98


       stm32eforth.s:3994   .text.reset_handler:0000000000001f3c DOTS1
       stm32eforth.s:4000   .text.reset_handler:0000000000001f4c $d
       stm32eforth.s:4001   .text.reset_handler:0000000000001f50 $t
       stm32eforth.s:4007   .text.reset_handler:0000000000001f58 $d
       stm32eforth.s:4008   .text.reset_handler:0000000000001f5c _TNAME
       stm32eforth.s:4010   .text.reset_handler:0000000000001f62 $t
       stm32eforth.s:4011   .text.reset_handler:0000000000001f64 TNAME
       stm32eforth.s:4016   .text.reset_handler:0000000000001f74 TNAM1
       stm32eforth.s:4019   .text.reset_handler:0000000000001f7c $d
       stm32eforth.s:4029   .text.reset_handler:0000000000001fa4 TNAM2
       stm32eforth.s:4020   .text.reset_handler:0000000000001f80 $t
       stm32eforth.s:4025   .text.reset_handler:0000000000001f94 $d
       stm32eforth.s:4026   .text.reset_handler:0000000000001f98 $t
       stm32eforth.s:4037   .text.reset_handler:0000000000001fb0 $d
       stm32eforth.s:4038   .text.reset_handler:0000000000001fb4 _DOTID
       stm32eforth.s:4040   .text.reset_handler:0000000000001fb8 $t
       stm32eforth.s:4041   .text.reset_handler:0000000000001fb8 DOTID
       stm32eforth.s:4045   .text.reset_handler:0000000000001fc4 $d
       stm32eforth.s:4052   .text.reset_handler:0000000000001fe0 DOTI1
       stm32eforth.s:4046   .text.reset_handler:0000000000001fc8 $t
       stm32eforth.s:4048   .text.reset_handler:0000000000001fd0 $d
       stm32eforth.s:4049   .text.reset_handler:0000000000001fd4 $t
       stm32eforth.s:4054   .text.reset_handler:0000000000001fe4 $d
       stm32eforth.s:4056   .text.reset_handler:0000000000001fee $t
       stm32eforth.s:4062   .text.reset_handler:0000000000001ff4 $d
       stm32eforth.s:4063   .text.reset_handler:0000000000001ff8 _SEE
       stm32eforth.s:4065   .text.reset_handler:0000000000001ffc $t
       stm32eforth.s:4066   .text.reset_handler:0000000000001ffc SEE
       stm32eforth.s:4071   .text.reset_handler:000000000000200c $d
       stm32eforth.s:4072   .text.reset_handler:0000000000002010 $t
       stm32eforth.s:4073   .text.reset_handler:0000000000002014 SEE1
       stm32eforth.s:4090   .text.reset_handler:0000000000002040 DECOMP
       stm32eforth.s:4078   .text.reset_handler:0000000000002024 $d
       stm32eforth.s:4079   .text.reset_handler:0000000000002028 $t
       stm32eforth.s:4085   .text.reset_handler:0000000000002030 $d
       stm32eforth.s:4086   .text.reset_handler:0000000000002034 _DECOM
       stm32eforth.s:4088   .text.reset_handler:000000000000203e $t
       stm32eforth.s:4097   .text.reset_handler:0000000000002054 $d
       stm32eforth.s:4098   .text.reset_handler:0000000000002058 $t
       stm32eforth.s:4100   .text.reset_handler:0000000000002060 $d
       stm32eforth.s:4101   .text.reset_handler:0000000000002064 $t
       stm32eforth.s:4103   .text.reset_handler:000000000000206c $d
       stm32eforth.s:4129   .text.reset_handler:00000000000020c4 DECOM2
       stm32eforth.s:4105   .text.reset_handler:0000000000002070 $t
       stm32eforth.s:4119   .text.reset_handler:00000000000020a4 $d
       stm32eforth.s:4125   .text.reset_handler:00000000000020b8 DECOM1
       stm32eforth.s:4120   .text.reset_handler:00000000000020a8 $t
       stm32eforth.s:4138   .text.reset_handler:00000000000020d0 $d
       stm32eforth.s:4139   .text.reset_handler:00000000000020d4 _WORDS
       stm32eforth.s:4141   .text.reset_handler:00000000000020da $t
       stm32eforth.s:4142   .text.reset_handler:00000000000020dc WORDS
       stm32eforth.s:4147   .text.reset_handler:00000000000020ec WORS1
       stm32eforth.s:4150   .text.reset_handler:00000000000020f4 $d
       stm32eforth.s:4157   .text.reset_handler:0000000000002110 WORS2
       stm32eforth.s:4151   .text.reset_handler:00000000000020f8 $t
       stm32eforth.s:4171   .text.reset_handler:0000000000002114 VERSN
       stm32eforth.s:4174   .text.reset_handler:000000000000211c $d
ARM GAS  stm32eforth.s 			page 99


       stm32eforth.s:4175   .text.reset_handler:0000000000002120 $t
       stm32eforth.s:4180   .text.reset_handler:0000000000002124 $d
       stm32eforth.s:4181   .text.reset_handler:0000000000002128 _HI
       stm32eforth.s:4188   .text.reset_handler:0000000000002138 $d
       stm32eforth.s:4190   .text.reset_handler:0000000000002146 $t
       stm32eforth.s:4199   .text.reset_handler:0000000000002168 $d
       stm32eforth.s:4200   .text.reset_handler:000000000000216c $t
       stm32eforth.s:4213   .text.reset_handler:000000000000218c $d
       stm32eforth.s:4227   .text.reset_handler:00000000000021b2 COLD1
       stm32eforth.s:4229   .text.reset_handler:00000000000021b6 $d
       stm32eforth.s:4230   .text.reset_handler:00000000000021ba $t
       stm32eforth.s:4231   .text.reset_handler:00000000000021be $d
       stm32eforth.s:4232   .text.reset_handler:00000000000021c2 $t
       stm32eforth.s:4233   .text.reset_handler:00000000000021c6 $d
       stm32eforth.s:4234   .text.reset_handler:00000000000021ca $t
       stm32eforth.s:4241   .text.reset_handler:00000000000021e4 COLD2
       stm32eforth.s:4243   .text.reset_handler:00000000000021e4 $d
       stm32eforth.s:4246   .text.reset_handler:00000000000021e8 $d
       stm32eforth.s:254    .text.default_handler:000000000000004a $d
       stm32eforth.s:4246   .text.default_handler:000000000000004c $d
       stm32eforth.s:224    .text.default_handler:000000000000001d $d
       stm32eforth.s:224    .text.default_handler:000000000000001e $t
       stm32eforth.s:475    .text.reset_handler:0000000000000145 $d
       stm32eforth.s:475    .text.reset_handler:0000000000000146 $t
       stm32eforth.s:500    .text.reset_handler:0000000000000179 $d
       stm32eforth.s:500    .text.reset_handler:000000000000017a $t
       stm32eforth.s:618    .text.reset_handler:0000000000000219 $d
       stm32eforth.s:618    .text.reset_handler:000000000000021a $t
       stm32eforth.s:652    .text.reset_handler:0000000000000247 $d
       stm32eforth.s:652    .text.reset_handler:0000000000000248 $t
       stm32eforth.s:665    .text.reset_handler:000000000000025b $d
       stm32eforth.s:665    .text.reset_handler:000000000000025c $t
       stm32eforth.s:676    .text.reset_handler:0000000000000267 $d
       stm32eforth.s:676    .text.reset_handler:0000000000000268 $t
       stm32eforth.s:689    .text.reset_handler:000000000000027b $d
       stm32eforth.s:689    .text.reset_handler:000000000000027c $t
       stm32eforth.s:701    .text.reset_handler:000000000000028b $d
       stm32eforth.s:701    .text.reset_handler:000000000000028c $t
       stm32eforth.s:726    .text.reset_handler:00000000000002b1 $d
       stm32eforth.s:726    .text.reset_handler:00000000000002b2 $t
       stm32eforth.s:750    .text.reset_handler:00000000000002d5 $d
       stm32eforth.s:750    .text.reset_handler:00000000000002d6 $t
       stm32eforth.s:763    .text.reset_handler:00000000000002e9 $d
       stm32eforth.s:763    .text.reset_handler:00000000000002ea $t
       stm32eforth.s:775    .text.reset_handler:00000000000002fb $d
       stm32eforth.s:775    .text.reset_handler:00000000000002fc $t
       stm32eforth.s:801    .text.reset_handler:0000000000000323 $d
       stm32eforth.s:801    .text.reset_handler:0000000000000324 $t
       stm32eforth.s:842    .text.reset_handler:0000000000000367 $d
       stm32eforth.s:842    .text.reset_handler:0000000000000368 $t
       stm32eforth.s:855    .text.reset_handler:000000000000037f $d
       stm32eforth.s:855    .text.reset_handler:0000000000000380 $t
       stm32eforth.s:920    .text.reset_handler:00000000000003df $d
       stm32eforth.s:920    .text.reset_handler:00000000000003e0 $t
       stm32eforth.s:934    .text.reset_handler:00000000000003f3 $d
       stm32eforth.s:934    .text.reset_handler:00000000000003f4 $t
       stm32eforth.s:946    .text.reset_handler:0000000000000403 $d
ARM GAS  stm32eforth.s 			page 100


       stm32eforth.s:946    .text.reset_handler:0000000000000404 $t
       stm32eforth.s:958    .text.reset_handler:0000000000000413 $d
       stm32eforth.s:958    .text.reset_handler:0000000000000414 $t
       stm32eforth.s:970    .text.reset_handler:0000000000000423 $d
       stm32eforth.s:970    .text.reset_handler:0000000000000424 $t
       stm32eforth.s:1006   .text.reset_handler:000000000000045b $d
       stm32eforth.s:1006   .text.reset_handler:000000000000045c $t
       stm32eforth.s:1043   .text.reset_handler:0000000000000497 $d
       stm32eforth.s:1043   .text.reset_handler:0000000000000498 $t
       stm32eforth.s:1055   .text.reset_handler:00000000000004a7 $d
       stm32eforth.s:1055   .text.reset_handler:00000000000004a8 $t
       stm32eforth.s:1067   .text.reset_handler:00000000000004b9 $d
       stm32eforth.s:1067   .text.reset_handler:00000000000004ba $t
       stm32eforth.s:1109   .text.reset_handler:00000000000004fd $d
       stm32eforth.s:1109   .text.reset_handler:00000000000004fe $t
       stm32eforth.s:1122   .text.reset_handler:0000000000000513 $d
       stm32eforth.s:1122   .text.reset_handler:0000000000000514 $t
       stm32eforth.s:1150   .text.reset_handler:0000000000000543 $d
       stm32eforth.s:1150   .text.reset_handler:0000000000000544 $t
       stm32eforth.s:1191   .text.reset_handler:000000000000057f $d
       stm32eforth.s:1191   .text.reset_handler:0000000000000580 $t
       stm32eforth.s:1264   .text.reset_handler:00000000000005ef $d
       stm32eforth.s:1264   .text.reset_handler:00000000000005f0 $t
       stm32eforth.s:1279   .text.reset_handler:0000000000000607 $d
       stm32eforth.s:1279   .text.reset_handler:0000000000000608 $t
       stm32eforth.s:1294   .text.reset_handler:0000000000000623 $d
       stm32eforth.s:1294   .text.reset_handler:0000000000000624 $t
       stm32eforth.s:1404   .text.reset_handler:00000000000006cd $d
       stm32eforth.s:1404   .text.reset_handler:00000000000006ce $t
       stm32eforth.s:1430   .text.reset_handler:00000000000006f1 $d
       stm32eforth.s:1430   .text.reset_handler:00000000000006f2 $t
       stm32eforth.s:1456   .text.reset_handler:000000000000071d $d
       stm32eforth.s:1456   .text.reset_handler:000000000000071e $t
       stm32eforth.s:1509   .text.reset_handler:0000000000000777 $d
       stm32eforth.s:1509   .text.reset_handler:0000000000000778 $t
       stm32eforth.s:1521   .text.reset_handler:000000000000078d $d
       stm32eforth.s:1521   .text.reset_handler:000000000000078e $t
       stm32eforth.s:1534   .text.reset_handler:00000000000007a5 $d
       stm32eforth.s:1534   .text.reset_handler:00000000000007a6 $t
       stm32eforth.s:1550   .text.reset_handler:00000000000007bf $d
       stm32eforth.s:1550   .text.reset_handler:00000000000007c0 $t
       stm32eforth.s:1569   .text.reset_handler:00000000000007eb $d
       stm32eforth.s:1569   .text.reset_handler:00000000000007ec $t
       stm32eforth.s:1640   .text.reset_handler:000000000000089d $d
       stm32eforth.s:1640   .text.reset_handler:000000000000089e $t
       stm32eforth.s:1697   .text.reset_handler:0000000000000917 $d
       stm32eforth.s:1697   .text.reset_handler:0000000000000918 $t
       stm32eforth.s:1771   .text.reset_handler:00000000000009c1 $d
       stm32eforth.s:1771   .text.reset_handler:00000000000009c2 $t
       stm32eforth.s:1791   .text.reset_handler:00000000000009e9 $d
       stm32eforth.s:1791   .text.reset_handler:00000000000009ea $t
       stm32eforth.s:1843   .text.reset_handler:0000000000000a51 $d
       stm32eforth.s:1843   .text.reset_handler:0000000000000a52 $t
       stm32eforth.s:1884   .text.reset_handler:0000000000000aa1 $d
       stm32eforth.s:1884   .text.reset_handler:0000000000000aa2 $t
       stm32eforth.s:1909   .text.reset_handler:0000000000000ad5 $d
       stm32eforth.s:1909   .text.reset_handler:0000000000000ad6 $t
ARM GAS  stm32eforth.s 			page 101


       stm32eforth.s:1932   .text.reset_handler:0000000000000b03 $d
       stm32eforth.s:1932   .text.reset_handler:0000000000000b04 $t
       stm32eforth.s:2001   .text.reset_handler:0000000000000bbf $d
       stm32eforth.s:2001   .text.reset_handler:0000000000000bc0 $t
       stm32eforth.s:2016   .text.reset_handler:0000000000000bdd $d
       stm32eforth.s:2016   .text.reset_handler:0000000000000bde $t
       stm32eforth.s:2050   .text.reset_handler:0000000000000c2b $d
       stm32eforth.s:2050   .text.reset_handler:0000000000000c2c $t
       stm32eforth.s:2069   .text.reset_handler:0000000000000c51 $d
       stm32eforth.s:2069   .text.reset_handler:0000000000000c52 $t
       stm32eforth.s:2087   .text.reset_handler:0000000000000c7b $d
       stm32eforth.s:2087   .text.reset_handler:0000000000000c7c $t
       stm32eforth.s:2158   .text.reset_handler:0000000000000d13 $d
       stm32eforth.s:2158   .text.reset_handler:0000000000000d14 $t
       stm32eforth.s:2312   .text.reset_handler:0000000000000eeb $d
       stm32eforth.s:2312   .text.reset_handler:0000000000000eec $t
       stm32eforth.s:2334   .text.reset_handler:0000000000000f1d $d
       stm32eforth.s:2334   .text.reset_handler:0000000000000f1e $t
       stm32eforth.s:2356   .text.reset_handler:0000000000000f4f $d
       stm32eforth.s:2356   .text.reset_handler:0000000000000f50 $t
       stm32eforth.s:2433   .text.reset_handler:0000000000000fd7 $d
       stm32eforth.s:2433   .text.reset_handler:0000000000000fd8 $t
       stm32eforth.s:2471   .text.reset_handler:0000000000001037 $d
       stm32eforth.s:2471   .text.reset_handler:0000000000001038 $t
       stm32eforth.s:2643   .text.reset_handler:000000000000121f $d
       stm32eforth.s:2643   .text.reset_handler:0000000000001220 $t
       stm32eforth.s:2688   .text.reset_handler:0000000000001281 $d
       stm32eforth.s:2688   .text.reset_handler:0000000000001282 $t
       stm32eforth.s:2703   .text.reset_handler:00000000000012a5 $d
       stm32eforth.s:2703   .text.reset_handler:00000000000012a6 $t
       stm32eforth.s:2957   .text.reset_handler:000000000000153b $d
       stm32eforth.s:2957   .text.reset_handler:000000000000153c $t
       stm32eforth.s:3134   .text.reset_handler:00000000000016ff $d
       stm32eforth.s:3134   .text.reset_handler:0000000000001700 $t
       stm32eforth.s:3142   .text.reset_handler:000000000000171b $d
       stm32eforth.s:3142   .text.reset_handler:000000000000171c $t
       stm32eforth.s:3151   .text.reset_handler:0000000000001729 $d
       stm32eforth.s:3151   .text.reset_handler:000000000000172a $t
       stm32eforth.s:3176   .text.reset_handler:000000000000176b $d
       stm32eforth.s:3176   .text.reset_handler:000000000000176c $t
       stm32eforth.s:3191   .text.reset_handler:0000000000001789 $d
       stm32eforth.s:3191   .text.reset_handler:000000000000178a $t
       stm32eforth.s:3235   .text.reset_handler:00000000000017ed $d
       stm32eforth.s:3235   .text.reset_handler:00000000000017ee $t
       stm32eforth.s:3258   .text.reset_handler:0000000000001823 $d
       stm32eforth.s:3258   .text.reset_handler:0000000000001824 $t
       stm32eforth.s:3465   .text.reset_handler:0000000000001a15 $d
       stm32eforth.s:3465   .text.reset_handler:0000000000001a16 $t
       stm32eforth.s:3507   .text.reset_handler:0000000000001a73 $d
       stm32eforth.s:3507   .text.reset_handler:0000000000001a74 $t
       stm32eforth.s:3543   .text.reset_handler:0000000000001ad3 $d
       stm32eforth.s:3543   .text.reset_handler:0000000000001ad4 $t
       stm32eforth.s:3558   .text.reset_handler:0000000000001af5 $d
       stm32eforth.s:3558   .text.reset_handler:0000000000001af6 $t
       stm32eforth.s:3587   .text.reset_handler:0000000000001b35 $d
       stm32eforth.s:3587   .text.reset_handler:0000000000001b36 $t
       stm32eforth.s:3614   .text.reset_handler:0000000000001b73 $d
ARM GAS  stm32eforth.s 			page 102


       stm32eforth.s:3614   .text.reset_handler:0000000000001b74 $t
       stm32eforth.s:3628   .text.reset_handler:0000000000001b8f $d
       stm32eforth.s:3628   .text.reset_handler:0000000000001b90 $t
       stm32eforth.s:3642   .text.reset_handler:0000000000001bab $d
       stm32eforth.s:3642   .text.reset_handler:0000000000001bac $t
       stm32eforth.s:3860   .text.reset_handler:0000000000001dd1 $d
       stm32eforth.s:3860   .text.reset_handler:0000000000001dd2 $t
       stm32eforth.s:3881   .text.reset_handler:0000000000001e0f $d
       stm32eforth.s:3881   .text.reset_handler:0000000000001e10 $t
       stm32eforth.s:3901   .text.reset_handler:0000000000001e49 $d
       stm32eforth.s:3901   .text.reset_handler:0000000000001e4a $t
       stm32eforth.s:3947   .text.reset_handler:0000000000001eb1 $d
       stm32eforth.s:3947   .text.reset_handler:0000000000001eb2 $t
       stm32eforth.s:3987   .text.reset_handler:0000000000001f27 $d
       stm32eforth.s:3987   .text.reset_handler:0000000000001f28 $t
       stm32eforth.s:4183   .text.reset_handler:000000000000212b $d
       stm32eforth.s:4183   .text.reset_handler:000000000000212c $t
       stm32eforth.s:4216   .text.reset_handler:0000000000002195 $d
       stm32eforth.s:4216   .text.reset_handler:0000000000002196 $t

UNDEFINED SYMBOLS
system_var
_rstack
