ARM GAS  stm32eforth.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  stm32eforth.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.p2align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.p2aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m3
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "board/blue-pill/stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
ARM GAS  stm32eforth.s 			page 3


  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
ARM GAS  stm32eforth.s 			page 4


  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
  81              	
  82              	/* blue pill specific constants */ 
  83              	  .equ LED_GPIO, GPIOC_BASE_ADR
  84              	  .equ LED_PIN, 13
  85              	  .equ UART, USART1_BASE_ADR 
  86              	
  87              	/* eForth specific constants */
  88              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  89              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  90              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  91              	.equ UPP ,	0x20000000	/*start of user area (UP0) */
  92              	.equ DTOP ,	0x20000100	/*start of usable RAM area (HERE) */
  93              	.equ DEND , 0x20004E00  /*usable RAM end */
  94              	 .equ RAMOFFSET ,	0x20000000	// remap
  95              	 .equ RAMEND, 0x20005000 // 20Ko
  96              	 .equ FLASHOFFSET ,	0x08000c00	// remap
  97              	//.equ RAMOFFSET  ,	0x00000000	/* absolute */
  98              	//.equ MAPOFFSET  ,	0x00000000	/* absolute */
  99              	  .equ MAPOFFSET , (RAMOFFSET-FLASHOFFSET)
 100              	
 101              	/*************************************
 102              	   system variables offset from UPP
 103              	*************************************/
 104              	  .equ SEED_OFS, 4    // prng seed 
 105              	  .equ TICKS_OFS, SEED_OFS+4  // millseconds counter
ARM GAS  stm32eforth.s 			page 5


 106              	  .equ TIMER_OFS, TICKS_OFS+4  // count down timer
 107              	  .equ BOOT_OFS, TIMER_OFS+4  // boot program address
 108              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
 109              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
 110              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
 111              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
 112              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
 113              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
 114              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
 115              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
 116              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
 117              	  .equ FORTH_CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
 118              	  .equ USER_CTOP_OFS, FORTH_CTOP_OFS+4  // ram free dictionary address
 119              	  .equ LASTN_OFS, USER_CTOP_OFS+4     // last word in dictionary link nfa 
 120              	  .equ USER_BEGIN_OFS, LASTN_OFS+4 // start of user area in RAM 
 121              	  .equ USER_END_OFS, USER_BEGIN_OFS+4  // end of user area in RAM 
 122              	  .equ USER_IMG_OFS,USER_END_OFS+4  // user image save area address  
 123              	
 124              	/***********************************************
 125              	* MACROS
 126              	*	Assemble inline direct threaded code ending.
 127              	***********************************************/
 128              	 	.macro	_NEXT /*end low level word */
 129              		BX	LR
 130              		.endm
 131              	
 132              	 	.macro	_NEST /*start high level word */
 133              		STMFD	R2!,{LR}
 134              		.endm
 135              	
 136              	 	.macro	_UNNEST	/*end high level word */
 137              		LDMFD	R2!,{PC}
 138              		.endm
 139              	
 140              	 	.macro	_DOLIT /*long literals */
 141              		BL	DOLIT
 142              		.endm
 143              	
 144              	 	.macro	_PUSH	/*push R5 on data stack*/
 145              		STR	R5,[R1,#-4]!
 146              		.endm
 147              	
 148              	 	.macro	_POP /*pop data stack to R5 */
 149              		LDR	R5,[R1],#4
 150              		.endm
 151              	
 152              	/*************************************
 153              	*   interrupt service vectors table 
 154              	**************************************/
 155              	   .section  .isr_vector,"a",%progbits
 156              	  .type  isr_vectors, %object
 157              	
 158              	isr_vectors:
 159 0000 00000000 	  .word   _mstack          /* main return stack address */
 160 0004 00000000 	  .word   reset_handler    /* startup address */
 161              	/* core interrupts || exceptions */
 162 0008 00000000 	  .word   default_handler  /*  NMI */
ARM GAS  stm32eforth.s 			page 6


 163 000c 00000000 	  .word   default_handler  /*  HardFault */
 164 0010 00000000 	  .word   default_handler  /*  Memory Management */
 165 0014 00000000 	  .word   default_handler  /* Bus fault */
 166 0018 00000000 	  .word   default_handler  /* Usage fault */
 167 001c 00000000 	  .word   0
 168 0020 00000000 	  .word   0
 169 0024 00000000 	  .word   0
 170 0028 00000000 	  .word   0
 171 002c 00000000 	  .word   default_handler  /* SWI instruction */
 172 0030 00000000 	  .word   default_handler  /* Debug monitor */
 173 0034 00000000 	  .word   0
 174 0038 00000000 	  .word   default_handler  /* PendSV */
 175 003c 00000000 	  .word   systick_handler  /* Systick */
 176              	  
 177              	  /* External Interrupts */
 178 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 179 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 180 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 181 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 182 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 183 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 184 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 185 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 186 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 187 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 188 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 189 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 190 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 191 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 192 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 193 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 194 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 195 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 196 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 197 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 198 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 199 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 200 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 201 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 202 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 203 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 204 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 205 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 206 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 207 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 208 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 209 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 210 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 211 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 212 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 213 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 214 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 215 00d4 00000000 	  .word      default_handler /* IRQ37, USART1 */                   
 216 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 217 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 218 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 219 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
ARM GAS  stm32eforth.s 			page 7


 220 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 221 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 222 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 223 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 224 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 225 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 226 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 227 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 228 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 229 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 230 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 231 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 232 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 233 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 234 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 235 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 236 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 237 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 238              	
 239              	  .size  isr_vectors, .-isr_vectors
 240              	
 241              	/*****************************************************
 242              	* default isr handler called on unexpected interrupt
 243              	*****************************************************/
 244              	    .section  .text.default_handler,"ax",%progbits
 245              	
 246              	  .type default_handler, %function
 247              	  .p2align 2 
 248              	  .global default_handler
 249              	default_handler:
 250 0000 DFF81870 		ldr r7,exception_msg 
 251 0004 17F8010B 		ldrb r0,[r7],#1 
 252 0008 41F8045D 	1:	_PUSH 
 253 000c 17F8015B 		ldrb r5,[r7],#1
 254 0010 00F0AEFA 		bl EMIT 
 255 0014 0138     		subs r0,r0,#1 
 256 0016 F7D1     		bne 1b 	
 257 0018 FFF7FEBF 		b reset_handler   
 258              	  .size  default_handler, .-default_handler
 259              	exception_msg:
 260 001c 20000000 		.word .+4 
 261 0020 12       		.byte 18
 262 0021 0A0D6578 		.ascii "\n\rexeption reboot!"
 262      65707469 
 262      6F6E2072 
 262      65626F6F 
 262      7421
 263 0033 00       		.p2align 2
 264              	
 265              	/*********************************
 266              		system milliseconds counter
 267              	*********************************/	
 268              	  .type systick_handler, %function
 269              	  .p2align 2 
 270              	  .global systick_handler
 271              	systick_handler:
 272 0034 4FF00003 	  mov r3,#UPP&0xffff
ARM GAS  stm32eforth.s 			page 8


 273 0038 C2F20003 	  movt r3,#UPP>>16  	
 274 003c 9868     	  ldr r0,[r3,#TICKS_OFS]  
 275 003e 00F10100 	  add r0,#1
 276 0042 9860     	  str r0,[r3,#TICKS_OFS]
 277 0044 D868     	  ldr r0,[r3,#TIMER_OFS]
 278 0046 10B1     	  cbz r0, systick_exit
 279 0048 A0F10100 	  sub r0,#1
 280 004c D860     	  str r0,[r3,#TIMER_OFS]
 281              	systick_exit:
 282 004e 7047     	  bx lr
 283              	
 284              	
 285              	/**************************************
 286              	  reset_handler execute at MCU reset
 287              	***************************************/
 288              	    .section  .text.reset_handler
 289              	  .type  reset_handler, %function
 290              	  .p2align 2 
 291              	  .global reset_handler
 292              	reset_handler:
 293 0000 00F070F8 		bl	remap 
 294 0004 00F006F8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 295              	//	bl	UNLOCK			/* unlock flash memory */
 296 0008 0148     		ldr r0,forth_entry
 297 000a 40F00100 		orr r0,#1
 298 000e 0047     		bx r0 
 299              	forth_entry:
 300 0010 CC1A0018 		.word COLD+MAPOFFSET 
 301              	
 302              	  .type init_devices, %function
 303              	  .p2align 2 
 304              	init_devices:
 305              	/* init clock to HSE 72 Mhz */
 306              	/* set 2 wait states in FLASH_ACR_LATENCY */
 307 0014 4FF40050 		mov r0,#FLASH_BASE_ADR&0xffff
 308 0018 C4F20200 		movt r0,#FLASH_BASE_ADR>>16 
 309 001c 4FF01202 	  mov r2,#0x12
 310 0020 0260     	  str r2,[r0,#FLASH_ACR]
 311              	/* configure clock for HSE, 8 Mhz crystal */
 312              	/* enable HSE in RCC_CR */
 313 0022 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 314 0026 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 315 002a 0168     	  ldr r1,[r0,#RCC_CR]
 316 002c 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 317 0030 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 318              	/* wait HSERDY loop */
 319              	wait_hserdy:
 320 0032 0168     	  ldr r1,[r0,#RCC_CR]
 321 0034 11F4003F 	  tst r1,#(1<<17)
 322 0038 FBD0     	  beq wait_hserdy
 323              	
 324              	/************************************************* 
 325              	   configure PLL mul factor and source 
 326              	   SYSCLOCK=72 Mhz
 327              	   select HSE as  PLL source clock
 328              	   multiply frequency by 9 
 329              	   APB1 clock is limited to 36 Mhz so divide by 2 
ARM GAS  stm32eforth.s 			page 9


 330              	****************************************************/
 331 003a 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 332 003e C0F21D01 	  movt r1,#(7<<2)|1
 333 0042 4160     	  str r1,[r0,#RCC_CFGR]
 334              	  /* enable PLL */
 335 0044 0168     	  ldr r1,[r0,#RCC_CR]
 336 0046 41F08071 	  orr r1, #1<<24 
 337 004a 0160     	  str r1,[r0,#RCC_CR]
 338              	/* wait for PLLRDY */
 339              	wait_pllrdy:
 340 004c 0168     	  ldr r1,[r0,#RCC_CR]
 341 004e 11F0007F 	  tst r1,#(1<<25)
 342 0052 FBD0     	  beq wait_pllrdy 
 343              	/* select PLL as sysclock */
 344 0054 4168     	  ldr r1,[r0,#RCC_CFGR]
 345 0056 4FF6FC72 	  mov r2,#0xfffc
 346 005a CFF6FF72 	  movt r2,#0xffff
 347 005e 01EA0201 	  and r1,r1,r2 
 348 0062 4FF00202 	  mov r2,#2
 349 0066 41EA0201 	  orr r1,r1,r2
 350 006a 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 351              	/* wait for SWS==2 */
 352              	wait_sws:
 353 006c 4168     	  ldr r1,[r0,#RCC_CFGR]
 354 006e 11F0080F 	  tst r1,#(2<<2)
 355 0072 FBD0     	  beq wait_sws
 356              	/* now sysclock is 72 Mhz */
 357              	
 358              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 359 0074 4FF48050 	  mov r0,#RCC_BASE_ADR&0xFFFF
 360 0078 C4F20200 	  movt r0,#RCC_BASE_ADR>>16
 361 007c 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 362 0080 8161     	  str	r1, [r0, #RCC_APB2ENR]
 363              	
 364              	/* configure GPIOC:13 as output for user LED */
 365 0082 4FF48050 	  mov r0,#GPIOC_BASE_ADR&0xffff
 366 0086 C4F20100 	  movt r0,#GPIOC_BASE_ADR>>16
 367 008a 4168     	  ldr r1,[r0,#GPIO_CRH]
 368 008c 6FF47002 	  mvn r2,#(15<<20)
 369 0090 01EA0201 	  and r1,r1,r2
 370 0094 4FF4C002 	  mov r2,#(6<<20)
 371 0098 41EA0201 	  orr r1,r1,r2
 372 009c 4160     	  str r1,[r0,#GPIO_CRH]
 373              	
 374              	/* configure USART1 */
 375              	/* set GPIOA PIN 9, uart TX  */
 376 009e 4FF40060 	  mov r0,#GPIOA_BASE_ADR&0XFFFF
 377 00a2 C4F20100 	  movt r0,#GPIOA_BASE_ADR>>16	
 378 00a6 4168     	  ldr r1,[r0,#GPIO_CRH]
 379 00a8 6FF0F002 	  mvn r2,#(15<<4)
 380 00ac 01EA0201 	  and r1,r1,r2
 381 00b0 4FF0A002 	  mov r2,#(0xA<<4)
 382 00b4 41EA0201 	  orr r1,r1,r2 
 383 00b8 4160     	  str r1,[r0,#GPIO_CRH]
 384              	
 385 00ba 4FF46050 	  mov r0,#UART&0xFFFF
 386 00be C4F20100 	  movt r0,#UART>>16	
ARM GAS  stm32eforth.s 			page 10


 387              	/* BAUD rate */
 388 00c2 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 389 00c6 8160     	  str r1,[r0,#USART_BRR]
 390 00c8 42F20C01 	  mov r1,#(3<<2)+(1<<13)
 391 00cc C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 392              	/* configure systicks for 1msec ticks */
 393 00ce 4EF21000 	  mov r0,#STK_BASE_ADR&0xFFFF
 394 00d2 CEF20000 	  movt r0,#STK_BASE_ADR>>16	
 395 00d6 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 396 00da 4160     	  str r1,[r0,#STK_LOAD]
 397 00dc 4FF00301 	  mov r1,#3
 398 00e0 0160     	  str r1,[r0,STK_CTL]
 399 00e2 7047     	  _NEXT  
 400              	
 401              	/* copy system to RAM */ 
 402              		.type remap, %function 
 403              	
 404              	remap:
 405 00e4 DFF83400 		ldr r0,remap_dest  
 406 00e8 0B49     		ldr r1,remap_src 
 407 00ea 42F25032 		mov r2,#CTOP-UZERO 
 408 00ee 02F10302 		add r2,r2,#3
 409 00f2 22F00302 		and r2,r2,#~3 
 410 00f6 51F8043B 	1:	ldr r3,[r1],#4 
 411 00fa 40F8043B 		str r3,[r0],#4 
 412 00fe 043A     		subs R2,#4 
 413 0100 F9D1     		bne 1b
 414              	// zero end of RAM 
 415 0102 4FF4A042 		mov r2,#0x5000
 416 0106 C2F20002 		movt r2,#0x2000
 417 010a 83EA0303 		eor r3,r3,r3 
 418 010e 40F8043B 	2:  str r3,[r0],#4
 419 0112 9042     		cmp r0,r2 
 420 0114 FBDB     		blt 2b 
 421 0116 7047     		_NEXT 
 422              	remap_src:
 423 0118 00040000 		.word UZERO 
 424              	remap_dest:
 425 011c 00000020 		.word RAMOFFSET 
 426              	
 427              	/********************
 428              	* Version control
 429              	*******************/
 430              	.equ VER ,	0x01	/*major release version */
 431              	.equ EXT ,	0x00	/*minor extension */
 432              	
 433              	/* Constants */
 434              	
 435              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 436              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 437              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 438              	
 439              	.equ CELLL ,	4	/*size of a cell */
 440              	.equ BASEE ,	10	/*default radix */
 441              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 442              	
 443              	.equ BKSPP ,	8	/*backspace */
ARM GAS  stm32eforth.s 			page 11


 444              	.equ LF ,	10	  /*line feed */
 445              	.equ CRR ,	13	/*carriage return */
 446              	.equ ERR ,	27	/*error escape */
 447              	.equ TIC ,	39	/*tick */
 448              	
 449              	/********************************************************
 450              	* RAM memory mapping
 451              	* 	0x20000000	RAM base address
 452              	*	0x20000000  system variables	
 453              	* 	0x20000100	Forth dictionary
 454              	* 	0x2000????	top of dictionary, HERE
 455              	* 	0x2000????	WORD buffer, HERE+16
 456              	*   0x20004E00  end of user space
 457              	* 	0x20004E80	top of data stack  R2
 458              	* 	0x20004E80	TIB terminal input buffer
 459              	* 	0x20004F80	top of return stack  R1
 460              	* 	0x20005000	top of hardware stack for interrupts R14
 461              	********************************************************/
 462              	
 463              	
 464              	/******************************************************
 465              	*  COLD start moves the following to USER variables.
 466              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 467              	******************************************************/
 468 0120 AFF30080 		.p2align 10
 468      AFF30080 
 468      AFF30080 
 468      AFF30080 
 468      AFF30080 
 469              	
 470              	UZERO:
 471 0400 00000000 		.word 0  			/*Reserved */
 472 0404 55AA0000 		.word 0xaa55 /* SEED  */ 
 473 0408 00000000 		.word 0      /* MSEC */
 474 040c 00000000 	    .word 0     /* TIMER */
 475 0410 581A0018 		.word HI+MAPOFFSET  /*'BOOT */
 476 0414 0A000000 		.word BASEE 	/*BASE */
 477 0418 00000000 		.word 0			/*tmp */
 478 041c 00000000 		.word 0			/*SPAN */
 479 0420 00000000 		.word 0			/*>IN */
 480 0424 00000000 		.word 0			/*#TIB */
 481 0428 804E0020 		.word TIBB	/*TIB */
 482 042c 100E0018 		.word INTER+MAPOFFSET	/*'EVAL */
 483 0430 00000000 		.word 0			/*HLD */
 484 0434 C41A0018 		.word LASTN+MAPOFFSET	/*CONTEXT */
 485 0438 501B0018 		.word CTOP+MAPOFFSET	/* FCP end of system dictionnary */
 486 043c 501B0018 		.word CTOP+MAPOFFSET	/* CP end of RAM dictionary RAM */
 487 0440 C41A0018 		.word LASTN+MAPOFFSET	/*LAST word in dictionary */
 488 0444 501B0018 		.word CTOP+MAPOFFSET    /* USER_BEGIN, beginning of USER dictionary space */
 489 0448 004E0020 		.word DEND              /* USER_END, end of USER dictionary space */
 490 044c 00280000 		.word USER				 /*USER_IMG, user image save area address */ 
 491 0450 00000000 		.word 0,0			/*reserved */
 491      00000000 
 492              	ULAST:
 493              	 
 494              	
 495              	/***********************************
ARM GAS  stm32eforth.s 			page 12


 496              	//  Start of Forth dictionary
 497              	***********************************/
 498              	
 499              		.p2align 2 
 500              	
 501              	// RANDOM ( n1 -- {0..n1-1} )
 502              	// return pseudo random number 
 503              	// REF: https://en.wikipedia.org/wiki/Xorshift
 504              	
 505 0458 00000000 		.word 0
 506 045c 06       	_RAND: .byte 6
 507 045d 52414E44 		.ascii "RANDOM"
 507      4F4D
 508 0463 00       		.p2align 2 
 509              	RAND:
 510 0464 42F804ED 		_NEST 
 511 0468 00F0EEFA 		bl SEED 
 512 046c 00F0D2F8 		bl AT 
 513 0470 4FEA4534 		lsl r4,r5,#13
 514 0474 85EA0405 		eor r5,r4
 515 0478 4FEA5544 		lsr r4,r5,#17
 516 047c 85EA0405 		eor r5,r4
 517 0480 4FEA4514 		lsl r4,r5,#5
 518 0484 85EA0405 		eor r5,r4
 519 0488 00F008F9 		bl DUPP 
 520 048c 00F0DCFA 		bl SEED 
 521 0490 00F0B6F8 		bl STORE 
 522 0494 00F036FA 		bl ABSS
 523 0498 00F008F9 		bl SWAP 
 524 049c 00F00EFC 		bl MODD 
 525 04a0 52F804FB 		_UNNEST 
 526              	
 527              	// REBOOT ( -- )
 528              	// hardware reset 
 529 04a4 5CF8FF17 		.word _RAND+MAPOFFSET
 530 04a8 06       	_REBOOT: .byte 6
 531 04a9 5245424F 		.ascii "REBOOT"
 531      4F54
 532 04af 00       		.p2align 2 
 533              	REBOOT:
 534 04b0 0348     		ldr r0,scb_adr 
 535 04b2 C168     		ldr r1,[r0,#SCB_AIRCR]
 536 04b4 41F00401 		orr r1,#(1<<2)
 537 04b8 C0F2FA51 		movt r1,#SCB_VECTKEY
 538 04bc C160     		str r1,[r0,#SCB_AIRCR]
 539 04be FEE7     		b . 
 540              	scb_adr:
 541 04c0 00ED00E0 		.word SCB_BASE_ADR 
 542              	
 543              	// PAUSE ( u -- ) 
 544              	// suspend execution for u milliseconds
 545 04c4 A8F8FF17 		.word _REBOOT+MAPOFFSET
 546 04c8 05       	_PAUSE: .byte 5
 547 04c9 50415553 		.ascii "PAUSE"
 547      45
 548 04ce 00BF     		.p2align 2
 549              	PAUSE:
ARM GAS  stm32eforth.s 			page 13


 550 04d0 42F804ED 		_NEST 
 551 04d4 00F0CCFA 		BL TIMER 
 552 04d8 00F092F8 		BL STORE 
 553              	PAUSE_LOOP:
 554 04dc 00F0C8FA 		BL TIMER 
 555 04e0 00F098F8 		BL AT 
 556 04e4 00F070F8 		BL QBRAN 
 557 04e8 F4040000 		.word PAUSE_EXIT 
 558 04ec 00F078F8 		BL BRAN 
 559 04f0 DC040000 		.word PAUSE_LOOP 
 560              	PAUSE_EXIT: 		
 561 04f4 52F804FB 		_UNNEST 
 562              	
 563              	//  ULED ( T|F -- )
 564              	// control user LED, -1 ON, 0 OFF  
 565 04f8 C8F8FF17 		.word _PAUSE + MAPOFFSET
 566 04fc 04       	_ULED: .byte 4
 567 04fd 554C4544 		.ascii "ULED"
 568 0501 0000BF   		.p2align 2
 569              		.type ULED, %function 
 570              	ULED:
 571 0504 4FF40056 		mov r6,#(1<<LED_PIN)
 572 0508 4FF48054 		mov r4,#LED_GPIO&0xffff
 573 050c C4F20104 		movt r4,#LED_GPIO>>16
 574 0510 2800     		movs r0,r5 
 575 0512 51F8045B 		_POP
 576 0516 01D0     		beq ULED_OFF 
 577 0518 6661     		str r6,[r4,#GPIO_BRR]
 578 051a 7047     		_NEXT 
 579              	ULED_OFF:
 580 051c 2661     		str r6,[r4,#GPIO_BSRR]
 581 051e 7047     		_NEXT 
 582              		
 583              	//    ?RX	 ( -- c T | F )
 584              	// 	Return input character and true, or a false if no input.
 585 0520 FCF8FF17 		.word	_ULED+MAPOFFSET
 586 0524 04       	_QRX:	.byte   4
 587 0525 3F4B4559 		.ascii "?KEY"
 588 0529 0000BF   		.p2align 2 
 589              	QKEY:
 590              	QRX: 
 591 052c 41F8045D 		_PUSH
 592 0530 4FF46054 		mov r4,#UART&0xFFFF
 593 0534 C4F20104 		movt r4,#UART>>16
 594 0538 2688     		ldrh	r6, [r4, #USART_SR]
 595 053a 16F02006 		ands	r6, #0x20		//  RXE
 596 053e 05D0     		BEQ	QRX1
 597 0540 6568     	 	LDR	R5, [R4, #USART_DR]
 598 0542 41F8045D 		_PUSH
 599 0546 18BF     	    IT NE 
 600 0548 6FF00005 		MVNNE	R5,#0
 601              	QRX1:
 602 054c 08BF     		IT EQ 
 603 054e 0025     	    MOVEQ	R5,#0
 604 0550 7047     		_NEXT
 605 0552 00BF     		.p2align 2 
 606              	
ARM GAS  stm32eforth.s 			page 14


 607              	//    TX!	 ( c -- )
 608              	// 	Send character c to the output device.
 609              	
 610 0554 24F9FF17 		.word	_QRX+MAPOFFSET
 611 0558 04       	_TXSTO:	.byte 4
 612 0559 454D4954 		.ascii "EMIT"
 613 055d 0000BF   		.p2align 2 	
 614              	TXSTO:
 615              	EMIT:
 616              	TECHO:
 617 0560 4FF46054 		mov r4,#UART&0xFFFF
 618 0564 C4F20104 		movt r4,#UART>>16
 619              	TX1:
 620 0568 2688     		ldrh	r6, [r4, #USART_SR]	
 621 056a 16F08006 		ands	r6, #0x80		//  TXE bit 
 622 056e FBD0     		beq	TX1
 623 0570 A580     		strh	r5, [r4, #USART_DR]	
 624 0572 51F8045B 		_POP
 625 0576 7047     		_NEXT
 626              		
 627              	// **************************************************************************
 628              	//  The kernel
 629              	
 630              	//    NOP	( -- )
 631              	// 	do nothing.
 632              	
 633 0578 58F9FF17 		.word	_TXSTO+MAPOFFSET
 634 057c 03       	_NOP:	.byte   3
 635 057d 4E4F50   		.ascii "NOP"
 636              		.p2align 2 	
 637              	NOP:
 638 0580 7047     		_NEXT
 639              	 
 640              	
 641              	//    doLIT	( -- w )
 642              	// 	Push an inline literal.
 643              	
 644              	// 	.word	_NOP+MAPOFFSET
 645              	// _LIT	.byte   COMPO+5
 646              	// 	.ascii "doLIT"
 647              	// 	.p2align 2 	
 648              	DOLIT:
 649 0582 41F8045D 		_PUSH				//  store R5 on data stack
 650 0586 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 651 058a 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 652 058e 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 653 0592 7047     		_NEXT
 654              	
 655              	//    EXECUTE	( ca -- )
 656              	// 	Execute the word at ca.
 657              	
 658 0594 7CF9FF17 		.word	_NOP+MAPOFFSET
 659 0598 07       	_EXECU:	.byte   7
 660 0599 45584543 		.ascii "EXECUTE"
 660      555445
 661              		.p2align 2 	
 662              	EXECU:
ARM GAS  stm32eforth.s 			page 15


 663 05a0 45F00104 		ORR	R4,R5,#1		//  b0=1 
 664 05a4 51F8045B 		_POP
 665 05a8 2047     		BX	R4
 666              	
 667              	//    next	( -- ) counter on R:
 668              	// 	Run time code for the single index loop.
 669              	// 	: next ( -- ) \ hilevel model
 670              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 671              	
 672              	// 	.word	_EXECU+MAPOFFSET
 673              	// _DONXT	.byte   COMPO+4
 674              	// 	.ascii "next"
 675              	// 	.p2align 2 	
 676              	DONXT:
 677 05aa 1468     		LDR	R4,[R2]   // ( -- u )  
 678 05ac 24B9     		CBNZ R4,NEXT1 
 679              		/* loop done */
 680 05ae 02F10402 		ADD	R2,R2,#4 // drop counter 
 681 05b2 0EF1040E 		ADD	LR,LR,#4 // skip after loop address 
 682 05b6 7047     		_NEXT
 683              	NEXT1:
 684              		/* decrement loop counter */
 685 05b8 A4F10104 		SUB	R4,R4,#1
 686 05bc 1460     		STR	R4,[R2]
 687 05be 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 688 05c2 4EF0010E 		ORR	LR,LR,#1 // begining of loop
 689 05c6 7047     		_NEXT
 690              	
 691              	//    ?branch	( f -- )
 692              	// 	Branch if flag is zero.
 693              	
 694              	// 	.word	_DONXT+MAPOFFSET
 695              	// _QBRAN	.byte   COMPO+7
 696              	// 	.ascii "?branch"
 697              	// 	.p2align 2 	
 698              	QBRAN:
 699 05c8 2C00     		MOVS	R4,R5
 700 05ca 51F8045B 		_POP
 701 05ce 04D1     		BNE	QBRAN1
 702 05d0 5EF801EC 		LDR	LR,[LR,#-1]
 703 05d4 4EF0010E 		ORR LR,LR,#1
 704 05d8 7047     		_NEXT
 705              	QBRAN1:
 706 05da 0EF1040E 	 	ADD	LR,LR,#4
 707 05de 7047     		_NEXT
 708              	
 709              	//    branch	( -- )
 710              	// 	Branch to an inline address.
 711              	
 712              	// 	.word	_QBRAN+MAPOFFSET
 713              	// _BRAN	.byte   COMPO+6
 714              	// 	.ascii "branch"
 715              	// 	.p2align 2 	
 716              	BRAN:
 717 05e0 5EF801EC 		LDR	LR,[LR,#-1]
 718 05e4 4EF0010E 		ORR	LR,LR,#1
 719 05e8 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 16


 720              	
 721              	//    EXIT	(  -- )
 722              	// 	Exit the currently executing command.
 723              	
 724 05ea 98F9FF17 		.word	_EXECU+MAPOFFSET
 725 05ee 04       	_EXIT:	.byte   4
 726 05ef 45584954 		.ascii "EXIT"
 727 05f3 00       		.p2align 2 	
 728              	EXIT:
 729 05f4 52F804FB 		_UNNEST
 730              	
 731              	//    !	   ( w a -- )
 732              	// 	Pop the data stack to memory.
 733              	
 734 05f8 EEF9FF17 		.word	_EXIT+MAPOFFSET
 735 05fc 01       	_STORE:	.byte   1
 736 05fd 21       		.ascii "!"
 737 05fe 00BF     		.p2align 2 	
 738              	STORE:
 739 0600 51F8044B 		LDR	R4,[R1],#4
 740 0604 2C60     		STR	R4,[R5]
 741 0606 51F8045B 		_POP
 742 060a 7047     		_NEXT
 743              	
 744              	//    @	   ( a -- w )
 745              	// 	Push memory location to the data stack.
 746              	
 747 060c FCF9FF17 		.word	_STORE+MAPOFFSET
 748 0610 01       	_AT:	.byte   1
 749 0611 40       		.ascii "@"
 750 0612 00BF     		.p2align 2 	
 751              	AT:
 752 0614 2D68     		LDR	R5,[R5]
 753 0616 7047     		_NEXT
 754              	
 755              	//    C!	  ( c b -- )
 756              	// 	Pop the data stack to byte memory.
 757              	
 758 0618 10FAFF17 		.word	_AT+MAPOFFSET
 759 061c 02       	_CSTOR:	.byte   2
 760 061d 4321     		.ascii "C!"
 761 061f 00       		.p2align 2 	
 762              	CSTOR:
 763 0620 51F8044B 		LDR	R4,[R1],#4
 764 0624 2C70     		STRB	R4,[R5]
 765 0626 51F8045B 		_POP
 766 062a 7047     		_NEXT
 767              	
 768              	//    C@	  ( b -- c )
 769              	// 	Push byte memory location to the data stack.
 770              	
 771 062c 1CFAFF17 		.word	_CSTOR+MAPOFFSET
 772 0630 02       	_CAT:	.byte   2
 773 0631 4340     		.ascii "C@"
 774 0633 00       		.p2align 2 	
 775              	CAT:
 776 0634 2D78     		LDRB	R5,[R5]
ARM GAS  stm32eforth.s 			page 17


 777 0636 7047     		_NEXT
 778              	
 779              	//    R>	  ( -- w )
 780              	// 	Pop the return stack to the data stack.
 781              	
 782 0638 30FAFF17 		.word	_CAT+MAPOFFSET
 783 063c 02       	_RFROM:	.byte   2
 784 063d 523E     		.ascii "R>"
 785 063f 00       		.p2align 2 	
 786              	RFROM:
 787 0640 41F8045D 		_PUSH
 788 0644 52F8045B 		LDR	R5,[R2],#4
 789 0648 7047     		_NEXT
 790              	
 791              	//    R@	  ( -- w )
 792              	// 	Copy top of return stack to the data stack.
 793              	
 794 064a 3CFAFF17 		.word	_RFROM+MAPOFFSET
 795 064e 02       	_RAT:	.byte   2
 796 064f 5240     		.ascii "R@"
 797 0651 0000BF   		.p2align 2 	
 798              	RAT:
 799 0654 41F8045D 		_PUSH
 800 0658 1568     		LDR	R5,[R2]
 801 065a 7047     		_NEXT
 802              	
 803              	//    >R	  ( w -- )
 804              	// 	Push the data stack to the return stack.
 805              	
 806 065c 4EFAFF17 		.word	_RAT+MAPOFFSET
 807 0660 42       	_TOR:	.byte   COMPO+2
 808 0661 3E52     		.ascii ">R"
 809 0663 00       		.p2align 2 	
 810              	TOR:
 811 0664 42F8045D 		STR	R5,[R2,#-4]!
 812 0668 51F8045B 		_POP
 813 066c 7047     		_NEXT
 814              	
 815              	//    SP@	 ( -- a )
 816              	// 	Push the current data stack pointer.
 817              	
 818 066e 60FAFF17 		.word	_TOR+MAPOFFSET
 819 0672 03       	_SPAT:	.byte   3
 820 0673 535040   		.ascii "SP@"
 821 0676 00BF     		.p2align 2 	
 822              	SPAT:
 823 0678 41F8045D 		_PUSH
 824 067c 0D46     		MOV	R5,R1
 825 067e 7047     		_NEXT
 826              	
 827              	//    DROP	( w -- )
 828              	// 	Discard top stack item.
 829              	
 830 0680 72FAFF17 		.word	_SPAT+MAPOFFSET
 831 0684 04       	_DROP:	.byte   4
 832 0685 44524F50 		.ascii "DROP"
 833 0689 0000BF   		.p2align 2 	
ARM GAS  stm32eforth.s 			page 18


 834              	DROP:
 835 068c 51F8045B 		_POP
 836 0690 7047     		_NEXT
 837              	
 838              	//    DUP	 ( w -- w w )
 839              	// 	Duplicate the top stack item.
 840              	
 841 0692 84FAFF17 		.word	_DROP+MAPOFFSET
 842 0696 03       	_DUPP:	.byte   3
 843 0697 445550   		.ascii "DUP"
 844 069a 00BF     		.p2align 2 	
 845              	DUPP:
 846 069c 41F8045D 		_PUSH
 847 06a0 7047     		_NEXT
 848              	
 849              	//    SWAP	( w1 w2 -- w2 w1 )
 850              	// 	Exchange top two stack items.
 851              	
 852 06a2 96FAFF17 		.word	_DUPP+MAPOFFSET
 853 06a6 04       	_SWAP:	.byte   4
 854 06a7 53574150 		.ascii "SWAP"
 855 06ab 00       		.p2align 2 	
 856              	SWAP:
 857 06ac 0C68     		LDR	R4,[R1]
 858 06ae 0D60     		STR	R5,[R1]
 859 06b0 2546     		MOV	R5,R4
 860 06b2 7047     		_NEXT
 861              	
 862              	//    OVER	( w1 w2 -- w1 w2 w1 )
 863              	// 	Copy second stack item to top.
 864              	
 865 06b4 A6FAFF17 		.word	_SWAP+MAPOFFSET
 866 06b8 04       	_OVER:	.byte   4
 867 06b9 4F564552 		.ascii "OVER"
 868 06bd 0000BF   		.p2align 2 	
 869              	OVER:
 870 06c0 41F8045D 		_PUSH
 871 06c4 4D68     		LDR	R5,[R1,#4]
 872 06c6 7047     		_NEXT
 873              	
 874              	//    0<	  ( n -- t )
 875              	// 	Return true if n is negative.
 876              	
 877 06c8 B8FAFF17 		.word	_OVER+MAPOFFSET
 878 06cc 02       	_ZLESS:	.byte   2
 879 06cd 303C     		.ascii "0<"
 880 06cf 00       		.p2align 2 	
 881              	ZLESS:
 882 06d0 4FF00004 		MOV	R4,#0
 883 06d4 04EB2505 		ADD	R5,R4,R5,ASR #32
 884 06d8 7047     		_NEXT
 885              	
 886              	//    AND	 ( w w -- w )
 887              	// 	Bitwise AND.
 888              	
 889 06da CCFAFF17 		.word	_ZLESS+MAPOFFSET
 890 06de 03       	_ANDD:	.byte   3
ARM GAS  stm32eforth.s 			page 19


 891 06df 414E44   		.ascii "AND"
 892 06e2 00BF     		.p2align 2 	
 893              	ANDD:
 894 06e4 51F8044B 		LDR	R4,[R1],#4
 895 06e8 05EA0405 		AND	R5,R5,R4
 896 06ec 7047     		_NEXT
 897              	
 898              	//    OR	  ( w w -- w )
 899              	// 	Bitwise inclusive OR.
 900              	
 901 06ee DEFAFF17 		.word	_ANDD+MAPOFFSET
 902 06f2 02       	_ORR:	.byte   2
 903 06f3 4F52     		.ascii "OR"
 904 06f5 0000BF   		.p2align 2 	
 905              	ORR:
 906 06f8 51F8044B 		LDR	R4,[R1],#4
 907 06fc 45EA0405 		ORR	R5,R5,R4
 908 0700 7047     		_NEXT
 909              	
 910              	//    XOR	 ( w w -- w )
 911              	// 	Bitwise exclusive OR.
 912              	
 913 0702 F2FAFF17 		.word	_ORR+MAPOFFSET
 914 0706 03       	_XORR:	.byte   3
 915 0707 584F52   		.ascii "XOR"
 916 070a 00BF     		.p2align 2 	
 917              	XORR:
 918 070c 51F8044B 		LDR	R4,[R1],#4
 919 0710 85EA0405 		EOR	R5,R5,R4
 920 0714 7047     		_NEXT
 921              	
 922              	//    UM+	 ( w w -- w cy )
 923              	// 	Add two numbers, return the sum and carry flag.
 924              	
 925 0716 06FBFF17 		.word	_XORR+MAPOFFSET
 926 071a 03       	_UPLUS:	.byte   3
 927 071b 554D2B   		.ascii "UM+"
 928 071e 00BF     		.p2align 2 	
 929              	UPLUS:
 930 0720 0C68     		LDR	R4,[R1]
 931 0722 6419     		ADDS	R4,R4,R5
 932 0724 4FF00005 		MOV	R5,#0
 933 0728 45F10005 		ADC	R5,R5,#0
 934 072c 0C60     		STR	R4,[R1]
 935 072e 7047     		_NEXT
 936              	
 937              	//    RSHIFT	 ( w # -- w )
 938              	// 	arithmetic Right shift # bits.
 939              	
 940 0730 1AFBFF17 		.word	_UPLUS+MAPOFFSET
 941 0734 06       	_RSHIFT:	.byte   6
 942 0735 52534849 		.ascii "RSHIFT"
 942      4654
 943 073b 00       		.p2align 2 	
 944              	RSHIFT:
 945 073c 51F8044B 		LDR	R4,[R1],#4
 946 0740 44FA05F5 		MOV	R5,R4,ASR R5
ARM GAS  stm32eforth.s 			page 20


 947 0744 7047     		_NEXT
 948              	
 949              	//    LSHIFT	 ( w # -- w )
 950              	// 	Right shift # bits.
 951              	
 952 0746 34FBFF17 		.word	_RSHIFT+MAPOFFSET
 953 074a 06       	_LSHIFT:	.byte   6
 954 074b 4C534849 		.ascii "LSHIFT"
 954      4654
 955 0751 0000BF   		.p2align 2 	
 956              	LSHIFT:
 957 0754 51F8044B 		LDR	R4,[R1],#4
 958 0758 04FA05F5 		MOV	R5,R4,LSL R5
 959 075c 7047     		_NEXT
 960              	
 961              	//    +	 ( w w -- w )
 962              	// 	Add.
 963              	
 964 075e 4AFBFF17 		.word	_LSHIFT+MAPOFFSET
 965 0762 01       	_PLUS:	.byte   1
 966 0763 2B       		.ascii "+"
 967              		.p2align 2 	
 968              	PLUS:
 969 0764 51F8044B 		LDR	R4,[R1],#4
 970 0768 2544     		ADD	R5,R5,R4
 971 076a 7047     		_NEXT
 972              	
 973              	//    -	 ( w w -- w )
 974              	// 	Subtract.
 975              	
 976 076c 62FBFF17 		.word	_PLUS+MAPOFFSET
 977 0770 01       	_SUBB:	.byte   1
 978 0771 2D       		.ascii "-"
 979 0772 00BF     		.p2align 2 	
 980              	SUBB:
 981 0774 51F8044B 		LDR	R4,[R1],#4
 982 0778 C5EB0405 		RSB	R5,R5,R4
 983 077c 7047     		_NEXT
 984              	
 985              	//    *	 ( w w -- w )
 986              	// 	Multiply.
 987              	
 988 077e 70FBFF17 		.word	_SUBB+MAPOFFSET
 989 0782 01       	_STAR:	.byte   1
 990 0783 2A       		.ascii "*"
 991              		.p2align 2 	
 992              	STAR:
 993 0784 51F8044B 		LDR	R4,[R1],#4
 994 0788 04FB05F5 		MUL	R5,R4,R5
 995 078c 7047     		_NEXT
 996              	
 997              	//    UM*	 ( w w -- ud )
 998              	// 	Unsigned multiply.
 999              	
 1000 078e 82FBFF17 		.word	_STAR+MAPOFFSET
 1001 0792 03       	_UMSTA:	.byte   3
 1002 0793 554D2A   		.ascii "UM*"
ARM GAS  stm32eforth.s 			page 21


 1003 0796 00BF     		.p2align 2 	
 1004              	UMSTA:
 1005 0798 0C68     		LDR	R4,[R1]
 1006 079a A5FB0467 		UMULL	R6,R7,R5,R4
 1007 079e 0E60     		STR	R6,[R1]
 1008 07a0 3D46     		MOV	R5,R7
 1009 07a2 7047     		_NEXT
 1010              	
 1011              	//    M*	 ( w w -- d )
 1012              	// 	signed multiply.
 1013              	
 1014 07a4 92FBFF17 		.word	_UMSTA+MAPOFFSET
 1015 07a8 02       	_MSTAR:	.byte   2
 1016 07a9 4D2A     		.ascii "M*"
 1017 07ab 00       		.p2align 2 	
 1018              	MSTAR:
 1019 07ac 0C68     		LDR	R4,[R1]
 1020 07ae 85FB0467 		SMULL	R6,R7,R5,R4
 1021 07b2 0E60     		STR	R6,[R1]
 1022 07b4 3D46     		MOV	R5,R7
 1023 07b6 7047     		_NEXT
 1024              	
 1025              	//    1+	 ( w -- w+1 )
 1026              	// 	Add 1.
 1027              	
 1028 07b8 A8FBFF17 		.word	_MSTAR+MAPOFFSET
 1029 07bc 02       	_ONEP:	.byte   2
 1030 07bd 312B     		.ascii "1+"
 1031 07bf 00       		.p2align 2 	
 1032              	ONEP:
 1033 07c0 05F10105 		ADD	R5,R5,#1
 1034 07c4 7047     		_NEXT
 1035              	
 1036              	//    1-	 ( w -- w-1 )
 1037              	// 	Subtract 1.
 1038              	
 1039 07c6 BCFBFF17 		.word	_ONEP+MAPOFFSET
 1040 07ca 02       	_ONEM:	.byte   2
 1041 07cb 312D     		.ascii "1-"
 1042 07cd 0000BF   		.p2align 2 	
 1043              	ONEM:
 1044 07d0 A5F10105 		SUB	R5,R5,#1
 1045 07d4 7047     		_NEXT
 1046              	
 1047              	//    2+	 ( w -- w+2 )
 1048              	// 	Add 1.
 1049              	
 1050 07d6 CAFBFF17 		.word	_ONEM+MAPOFFSET
 1051 07da 02       	_TWOP:	.byte   2
 1052 07db 322B     		.ascii "2+"
 1053 07dd 0000BF   		.p2align 2 	
 1054              	TWOP:
 1055 07e0 05F10205 		ADD	R5,R5,#2
 1056 07e4 7047     		_NEXT
 1057              	
 1058              	//    2-	 ( w -- w-2 )
 1059              	// 	Subtract 2.
ARM GAS  stm32eforth.s 			page 22


 1060              	
 1061 07e6 DAFBFF17 		.word	_TWOP+MAPOFFSET
 1062 07ea 02       	_TWOM:	.byte   2
 1063 07eb 322D     		.ascii "2-"
 1064 07ed 0000BF   		.p2align 2 	
 1065              	TWOM:
 1066 07f0 A5F10205 		SUB	R5,R5,#2
 1067 07f4 7047     		_NEXT
 1068              	
 1069              	//    CELL+	( w -- w+4 )
 1070              	// 	Add CELLL.
 1071              	
 1072 07f6 EAFBFF17 		.word	_TWOM+MAPOFFSET
 1073 07fa 05       	_CELLP:	.byte   5
 1074 07fb 43454C4C 		.ascii "CELL+"
 1074      2B
 1075              		.p2align 2 	
 1076              	CELLP:
 1077 0800 05F10405 		ADD	R5,R5,#CELLL
 1078 0804 7047     		_NEXT
 1079              	
 1080              	//    CELL-	( w -- w-4 )
 1081              	// 	Subtract CELLL.
 1082              	
 1083 0806 FAFBFF17 		.word	_CELLP+MAPOFFSET
 1084 080a 05       	_CELLM:	.byte   5
 1085 080b 43454C4C 		.ascii "CELL-"
 1085      2D
 1086              		.p2align 2 	
 1087              	CELLM:
 1088 0810 A5F10405 		SUB	R5,R5,#CELLL
 1089 0814 7047     		_NEXT
 1090              	 
 1091              	//    BL	( -- 32 )
 1092              	// 	Blank (ASCII space).
 1093              	
 1094 0816 0AFCFF17 		.word	_CELLM+MAPOFFSET
 1095 081a 02       	_BLANK:	.byte   2
 1096 081b 424C     		.ascii "BL"
 1097 081d 0000BF   		.p2align 2 	
 1098              	BLANK:
 1099 0820 41F8045D 		_PUSH
 1100 0824 4FF02005 		MOV	R5,#32
 1101 0828 7047     		_NEXT
 1102              	
 1103              	//    CELLS	( w -- w*4 )
 1104              	// 	Multiply 4.
 1105              	
 1106 082a 1AFCFF17 		.word	_BLANK+MAPOFFSET
 1107 082e 05       	_CELLS:	.byte   5
 1108 082f 43454C4C 		.ascii "CELLS"
 1108      53
 1109              		.p2align 2 	
 1110              	CELLS:
 1111 0834 4FEA8505 		MOV	R5,R5,LSL#2
 1112 0838 7047     		_NEXT
 1113              	
ARM GAS  stm32eforth.s 			page 23


 1114              	//    CELL/	( w -- w/4 )
 1115              	// 	Divide by 4.
 1116              	
 1117 083a 2EFCFF17 		.word	_CELLS+MAPOFFSET
 1118 083e 05       	_CELLSL:	.byte   5
 1119 083f 43454C4C 		.ascii "CELL/"
 1119      2F
 1120              		.p2align 2 	
 1121              	CELLSL:
 1122 0844 4FEAA505 		MOV	R5,R5,ASR#2
 1123 0848 7047     		_NEXT
 1124              	
 1125              	//    2*	( w -- w*2 )
 1126              	// 	Multiply 2.
 1127              	
 1128 084a 3EFCFF17 		.word	_CELLSL+MAPOFFSET
 1129 084e 02       	_TWOST:	.byte   2
 1130 084f 322A     		.ascii "2*"
 1131 0851 0000BF   		.p2align 2 	
 1132              	TWOST:
 1133 0854 4FEA4505 		MOV	R5,R5,LSL#1
 1134 0858 7047     		_NEXT
 1135              	
 1136              	//    2/	( w -- w/2 )
 1137              	// 	Divide by 2.
 1138              	
 1139 085a 4EFCFF17 		.word	_TWOST+MAPOFFSET
 1140 085e 02       	_TWOSL:	.byte   2
 1141 085f 322F     		.ascii "2/"
 1142 0861 0000BF   		.p2align 2 	
 1143              	TWOSL:
 1144 0864 4FEA6505 		MOV	R5,R5,ASR#1
 1145 0868 7047     		_NEXT
 1146              	
 1147              	//    ?DUP	( w -- w w | 0 )
 1148              	// 	Conditional duplicate.
 1149              	
 1150 086a 5EFCFF17 		.word	_TWOSL+MAPOFFSET
 1151 086e 04       	_QDUP:	.byte   4
 1152 086f 3F445550 		.ascii "?DUP"
 1153 0873 00       		.p2align 2 	
 1154              	QDUP:
 1155 0874 2C00     		MOVS	R4,R5
 1156 0876 18BF     		IT NE 
 1157 0878 41F8045D 	    STRNE	R5,[R1,#-4]!
 1158 087c 7047     		_NEXT
 1159              	
 1160              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1161              	// 	Rotate top 3 items.
 1162              	
 1163 087e 6EFCFF17 		.word	_QDUP+MAPOFFSET
 1164 0882 03       	_ROT:	.byte   3
 1165 0883 524F54   		.ascii "ROT"
 1166 0886 00BF     		.p2align 2 	
 1167              	ROT:
 1168 0888 0C68     		LDR	R4,[R1]  // r4=w2 
 1169 088a 0D60     		STR	R5,[R1]  // w3 replace w2 
ARM GAS  stm32eforth.s 			page 24


 1170 088c 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1171 088e 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1172 0890 7047     		_NEXT
 1173              	
 1174              	//    2DROP	( w1 w2 -- )
 1175              	// 	Drop top 2 items.
 1176              	
 1177 0892 82FCFF17 		.word	_ROT+MAPOFFSET
 1178 0896 05       	_DDROP:	.byte   5
 1179 0897 3244524F 		.ascii "2DROP"
 1179      50
 1180              		.p2align 2 	
 1181              	DDROP:
 1182 089c 51F8045B 		_POP
 1183 08a0 51F8045B 		_POP
 1184 08a4 7047     		_NEXT
 1185              	
 1186              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1187              	// 	Duplicate top 2 items.
 1188              	
 1189 08a6 96FCFF17 		.word	_DDROP+MAPOFFSET
 1190 08aa 04       	_DDUP:	.byte   4
 1191 08ab 32445550 		.ascii "2DUP"
 1192 08af 00       		.p2align 2 	
 1193              	DDUP:
 1194 08b0 0C68     		LDR	R4,[R1] // r4=w1
 1195 08b2 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1196 08b6 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1197 08ba 7047     		_NEXT
 1198              	
 1199              	//    D+	( d1 d2 -- d3 )
 1200              	// 	Add top 2 double numbers.
 1201              	
 1202 08bc AAFCFF17 		.word	_DDUP+MAPOFFSET
 1203 08c0 02       	_DPLUS:	.byte   2
 1204 08c1 442B     		.ascii "D+"
 1205 08c3 00       		.p2align 2 	
 1206              	DPLUS:
 1207 08c4 51F8044B 		LDR	R4,[R1],#4
 1208 08c8 51F8046B 		LDR	R6,[R1],#4
 1209 08cc 0F68     		LDR	R7,[R1]
 1210 08ce E419     		ADDS	R4,R4,R7
 1211 08d0 0C60     		STR	R4,[R1]
 1212 08d2 45EB0605 		ADC	R5,R5,R6
 1213 08d6 7047     		_NEXT
 1214              	
 1215              	//    NOT	 ( w -- !w )
 1216              	// 	1"s complement.
 1217              	
 1218 08d8 C0FCFF17 		.word	_DPLUS+MAPOFFSET
 1219 08dc 03       	_INVER:	.byte   3
 1220 08dd 4E4F54   		.ascii "NOT"
 1221              		.p2align 2 	
 1222              	INVER:
 1223 08e0 6FEA0505 		MVN	R5,R5
 1224 08e4 7047     		_NEXT
 1225              	
ARM GAS  stm32eforth.s 			page 25


 1226              	//    NEGATE	( w -- -w )
 1227              	// 	2's complement.
 1228              	
 1229 08e6 DCFCFF17 		.word	_INVER+MAPOFFSET
 1230 08ea 06       	_NEGAT:	.byte   6
 1231 08eb 4E454741 		.ascii "NEGATE"
 1231      5445
 1232 08f1 0000BF   		.p2align 2 	
 1233              	NEGAT:
 1234 08f4 C5F10005 		RSB	R5,R5,#0
 1235 08f8 7047     		_NEXT
 1236              	
 1237              	//    ABS	 ( w -- |w| )
 1238              	// 	Absolute.
 1239              	
 1240 08fa EAFCFF17 		.word	_NEGAT+MAPOFFSET
 1241 08fe 03       	_ABSS:	.byte   3
 1242 08ff 414253   		.ascii "ABS"
 1243 0902 00BF     		.p2align 2 	
 1244              	ABSS:
 1245 0904 15F0004F 		TST	R5,#0x80000000
 1246 0908 18BF     		IT NE
 1247 090a 6D42     	    RSBNE   R5,R5,#0
 1248 090c 7047     		_NEXT
 1249              	
 1250              	//  0= ( w -- f )
 1251              	// TOS==0?
 1252              	
 1253 090e FEFCFF17 		.word _ABSS+MAPOFFSET
 1254 0912 02       	_ZEQUAL: .byte 2
 1255 0913 303D     		.ascii "0="
 1256 0915 0000BF   		.p2align 2
 1257              	ZEQUAL:
 1258 0918 15B9     		cbnz r5,1f
 1259 091a 4FF0FF35 		mov r5,#-1
 1260 091e 7047     		_NEXT 
 1261 0920 85EA0505 	1:  eor r5,r5,r5  
 1262 0924 7047     		_NEXT 	
 1263              	
 1264              	//    =	 ( w w -- t )
 1265              	// 	Equal?
 1266              	
 1267 0926 12FDFF17 		.word	_ZEQUAL+MAPOFFSET
 1268 092a 01       	_EQUAL:	.byte   1
 1269 092b 3D       		.ascii "="
 1270              		.p2align 2 	
 1271              	EQUAL:
 1272 092c 51F8044B 		LDR	R4,[R1],#4
 1273 0930 A542     		CMP	R5,R4
 1274 0932 0CBF     		ITE EQ 
 1275 0934 6FF00005 	    MVNEQ	R5,#0
 1276 0938 0025     		MOVNE	R5,#0
 1277 093a 7047     		_NEXT
 1278              	
 1279              	//    U<	 ( w w -- t )
 1280              	// 	Unsigned equal?
 1281              	
ARM GAS  stm32eforth.s 			page 26


 1282 093c 2AFDFF17 		.word	_EQUAL+MAPOFFSET
 1283 0940 02       	_ULESS:	.byte   2
 1284 0941 553C     		.ascii "U<"
 1285 0943 00       		.p2align 2 	
 1286              	ULESS:
 1287 0944 51F8044B 		LDR	R4,[R1],#4
 1288 0948 AC42     		CMP	R4,R5
 1289 094a 34BF     		ITE CC 
 1290 094c 6FF00005 		MVNCC	R5,#0
 1291 0950 0025     		MOVCS	R5,#0
 1292 0952 7047     		_NEXT
 1293              	
 1294              	//    <	( w w -- t )
 1295              	// 	Less?
 1296              	
 1297 0954 40FDFF17 		.word	_ULESS+MAPOFFSET
 1298 0958 01       	_LESS:	.byte   1
 1299 0959 3C       		.ascii "<"
 1300 095a 00BF     		.p2align 2 	
 1301              	LESS:
 1302 095c 51F8044B 		LDR	R4,[R1],#4
 1303 0960 AC42     		CMP	R4,R5
 1304 0962 B4BF     	    ITE LT
 1305 0964 6FF00005 		MVNLT	R5,#0
 1306 0968 0025     		MOVGE	R5,#0
 1307 096a 7047     		_NEXT
 1308              	
 1309              	//    >	( w w -- t )
 1310              	// 	greater?
 1311              	
 1312 096c 58FDFF17 		.word	_LESS+MAPOFFSET
 1313 0970 01       	_GREAT:	.byte   1
 1314 0971 3E       		.ascii ">"
 1315 0972 00BF     		.p2align 2 	
 1316              	GREAT:
 1317 0974 51F8044B 		LDR	R4,[R1],#4
 1318 0978 AC42     		CMP	R4,R5
 1319 097a CCBF     		ITE GT
 1320 097c 6FF00005 	    MVNGT	R5,#0
 1321 0980 0025     		MOVLE	R5,#0
 1322 0982 7047     		_NEXT
 1323              	
 1324              	//    MAX	 ( w w -- max )
 1325              	// 	Leave maximum.
 1326              	
 1327 0984 70FDFF17 		.word	_GREAT+MAPOFFSET
 1328 0988 03       	_MAX:	.byte   3
 1329 0989 4D4158   		.ascii "MAX"
 1330              		.p2align 2 	
 1331              	MAX:
 1332 098c 51F8044B 		LDR	R4,[R1],#4
 1333 0990 AC42     		CMP	R4,R5
 1334 0992 C8BF     		IT GT 
 1335 0994 2546     		MOVGT	R5,R4
 1336 0996 7047     		_NEXT
 1337              	
 1338              	//    MIN	 ( w w -- min )
ARM GAS  stm32eforth.s 			page 27


 1339              	// 	Leave minimum.
 1340              	
 1341 0998 88FDFF17 		.word	_MAX+MAPOFFSET
 1342 099c 03       	_MIN:	.byte   3
 1343 099d 4D494E   		.ascii "MIN"
 1344              		.p2align 2 	
 1345              	MIN:
 1346 09a0 51F8044B 		LDR	R4,[R1],#4
 1347 09a4 AC42     		CMP	R4,R5
 1348 09a6 B8BF     		IT LT
 1349 09a8 2546     		MOVLT	R5,R4
 1350 09aa 7047     		_NEXT
 1351              	
 1352              	//    +!	 ( w a -- )
 1353              	// 	Add to memory.
 1354              	
 1355 09ac 9CFDFF17 		.word	_MIN+MAPOFFSET
 1356 09b0 02       	_PSTOR:	.byte   2
 1357 09b1 2B21     		.ascii "+!"
 1358 09b3 00       		.p2align 2 	
 1359              	PSTOR:
 1360 09b4 51F8044B 		LDR	R4,[R1],#4
 1361 09b8 2E68     		LDR	R6,[R5]
 1362 09ba 2644     		ADD	R6,R6,R4
 1363 09bc 2E60     		STR	R6,[R5]
 1364 09be 51F8045B 		_POP
 1365 09c2 7047     		_NEXT
 1366              	
 1367              	//    2!	 ( d a -- )
 1368              	// 	Store double number.
 1369              	
 1370 09c4 B0FDFF17 		.word	_PSTOR+MAPOFFSET
 1371 09c8 02       	_DSTOR:	.byte   2
 1372 09c9 3221     		.ascii "2!"
 1373 09cb 00       		.p2align 2 	
 1374              	DSTOR:
 1375 09cc 51F8044B 		LDR	R4,[R1],#4
 1376 09d0 51F8046B 		LDR	R6,[R1],#4
 1377 09d4 45F8044B 		STR	R4,[R5],#4
 1378 09d8 2E60     		STR	R6,[R5]
 1379 09da 51F8045B 		_POP
 1380 09de 7047     		_NEXT
 1381              	
 1382              	//    2@	 ( a -- d )
 1383              	// 	Fetch double number.
 1384              	
 1385 09e0 C8FDFF17 		.word	_DSTOR+MAPOFFSET
 1386 09e4 02       	_DAT:	.byte   2
 1387 09e5 3240     		.ascii "2@"
 1388 09e7 00       		.p2align 2 	
 1389              	DAT:
 1390 09e8 6C68     		LDR	R4,[R5,#4]
 1391 09ea 41F8044D 		STR	R4,[R1,#-4]!
 1392 09ee 2D68     		LDR	R5,[R5]
 1393 09f0 7047     		_NEXT
 1394              	
 1395              	//    COUNT	( b -- b+1 c )
ARM GAS  stm32eforth.s 			page 28


 1396              	// 	Fetch length of string.
 1397              	
 1398 09f2 E4FDFF17 		.word	_DAT+MAPOFFSET
 1399 09f6 05       	_COUNT:	.byte   5
 1400 09f7 434F554E 		.ascii "COUNT"
 1400      54
 1401              		.p2align 2 	
 1402              	COUNT:
 1403 09fc 15F8014B 		LDRB	R4,[R5],#1
 1404 0a00 41F8045D 		_PUSH
 1405 0a04 2546     		MOV	R5,R4
 1406 0a06 7047     		_NEXT
 1407              	
 1408              	//    DNEGATE	( d -- -d )
 1409              	// 	Negate double number.
 1410              	
 1411 0a08 F6FDFF17 		.word	_COUNT+MAPOFFSET
 1412 0a0c 07       	_DNEGA:	.byte   7
 1413 0a0d 444E4547 		.ascii "DNEGATE"
 1413      415445
 1414              		.p2align 2 	
 1415              	DNEGA:
 1416 0a14 0C68     		LDR	R4,[R1]
 1417 0a16 A6EB0606 		SUB	R6,R6,R6
 1418 0a1a 341B     		SUBS R4,R6,R4
 1419 0a1c 66EB0505 		SBC	R5,R6,R5
 1420 0a20 0C60     		STR	R4,[R1]
 1421 0a22 7047     		_NEXT
 1422              	
 1423              	// **************************************************************************
 1424              	//  System and user variables
 1425              	
 1426              	//    doVAR	( -- a )
 1427              	// 	Run time routine for VARIABLE and CREATE.
 1428              	
 1429              	// 	.word	_DNEGA+MAPOFFSET
 1430              	// _DOVAR	.byte  COMPO+5
 1431              	// 	.ascii "doVAR"
 1432              	// 	.p2align 2 	
 1433              	DOVAR:
 1434 0a24 41F8045D 		_PUSH
 1435 0a28 AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
 1436 0a2c 52F804FB 		_UNNEST
 1437              	
 1438              	//    doCON	( -- a ) 
 1439              	// 	Run time routine for CONSTANT.
 1440              	
 1441              	// 	.word	_DOVAR+MAPOFFSET
 1442              	// _DOCON	.byte  COMPO+5
 1443              	// 	.ascii "doCON"
 1444              	// 	.p2align 2 	
 1445              	DOCON:
 1446 0a30 41F8045D 		_PUSH
 1447 0a34 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1448 0a38 52F804FB 		_UNNEST
 1449              	
 1450              	/***********************
ARM GAS  stm32eforth.s 			page 29


 1451              	  system variables 
 1452              	***********************/
 1453              	
 1454              	 // SEED ( -- a)
 1455              	 // return PRNG seed address 
 1456              	
 1457 0a3c 0CFEFF17 		.word _DNEGA+MAPOFFSET
 1458 0a40 04       	_SEED: .byte 4
 1459 0a41 53454544 		.ascii "SEED"
 1460 0a45 0000BF   		.p2align 2
 1461              	SEED:
 1462 0a48 41F8045D 		_PUSH 
 1463 0a4c 03F10405 		ADD R5,R3,#SEED_OFS
 1464 0a50 7047     		_NEXT 	
 1465              	
 1466              	//  MSEC ( -- a)
 1467              	// return address of milliseconds counter
 1468 0a52 40FEFF17 	  .word _SEED+MAPOFFSET 
 1469 0a56 04       	_MSEC: .byte 4
 1470 0a57 4D534543 	  .ascii "MSEC"
 1471 0a5b 00       	  .p2align 2 
 1472              	MSEC:
 1473 0a5c 41F8045D 	  _PUSH
 1474 0a60 03F10805 	  ADD R5,R3,#TICKS_OFS
 1475 0a64 7047     	  _NEXT 
 1476              	
 1477              	// TIMER ( -- a )
 1478 0a66 56FEFF17 	  .word _MSEC+MAPOFFSET
 1479 0a6a 05       	_TIMER:  .byte 5
 1480 0a6b 54494D45 	  .ascii "TIMER"
 1480      52
 1481              	  .p2align 2 
 1482              	TIMER:
 1483 0a70 41F8045D 	  _PUSH 
 1484 0a74 03F10C05 	  ADD R5,R3,#TIMER_OFS
 1485 0a78 7047     	  _NEXT
 1486              	
 1487              	//    'BOOT	 ( -- a )
 1488              	// 	Application.
 1489              	
 1490 0a7a 6AFEFF17 		.word	_TIMER+MAPOFFSET
 1491 0a7e 05       	_TBOOT:	.byte   5
 1492 0a7f 27424F4F 		.ascii "'BOOT"
 1492      54
 1493              		.p2align 2 	
 1494              	TBOOT:
 1495 0a84 41F8045D 		_PUSH
 1496 0a88 03F11005 		ADD	R5,R3,#BOOT_OFS 
 1497 0a8c 7047     		_NEXT
 1498              		
 1499              	//    BASE	( -- a )
 1500              	// 	Storage of the radix base for numeric I/O.
 1501              	
 1502 0a8e 7EFEFF17 		.word	_TBOOT+MAPOFFSET
 1503 0a92 04       	_BASE:	.byte   4
 1504 0a93 42415345 		.ascii "BASE"
 1505 0a97 00       		.p2align 2 	
ARM GAS  stm32eforth.s 			page 30


 1506              	BASE:
 1507 0a98 41F8045D 		_PUSH
 1508 0a9c 03F11405 		ADD	R5,R3,#BASE_OFS
 1509 0aa0 7047     		_NEXT
 1510              	
 1511              	//    tmp	 ( -- a )
 1512              	// 	A temporary storage location used in parse and find.
 1513              	
 1514              	// 	.word	_BASE+MAPOFFSET
 1515              	// _TEMP	.byte   COMPO+3
 1516              	// 	.ascii "tmp"
 1517              	// 	.p2align 2 	
 1518              	TEMP:
 1519 0aa2 41F8045D 		_PUSH
 1520 0aa6 03F11805 		ADD	R5,R3,#TMP_OFS
 1521 0aaa 7047     		_NEXT
 1522              	
 1523              	//    SPAN	( -- a )
 1524              	// 	Hold character count received by EXPECT.
 1525              	
 1526 0aac 92FEFF17 		.word	_BASE+MAPOFFSET
 1527 0ab0 04       	_SPAN:	.byte   4
 1528 0ab1 5350414E 		.ascii "SPAN"
 1529 0ab5 0000BF   		.p2align 2 	
 1530              	SPAN:
 1531 0ab8 41F8045D 		_PUSH
 1532 0abc 03F11C05 		ADD	R5,R3,#SPAN_OFS
 1533 0ac0 7047     		_NEXT
 1534              	
 1535              	//    >IN	 ( -- a )
 1536              	// 	Hold the character pointer while parsing input stream.
 1537              	
 1538 0ac2 B0FEFF17 		.word	_SPAN+MAPOFFSET
 1539 0ac6 03       	_INN:	.byte   3
 1540 0ac7 3E494E   		.ascii ">IN"
 1541 0aca 00BF     		.p2align 2 	
 1542              	INN:
 1543 0acc 41F8045D 		_PUSH
 1544 0ad0 03F12005 		ADD	R5,R3,#TOIN_OFS
 1545 0ad4 7047     		_NEXT
 1546              	
 1547              	//    #TIB	( -- a )
 1548              	// 	Hold the current count and address of the terminal input buffer.
 1549              	
 1550 0ad6 C6FEFF17 		.word	_INN+MAPOFFSET
 1551 0ada 04       	_NTIB:	.byte   4
 1552 0adb 23544942 		.ascii "#TIB"
 1553 0adf 00       		.p2align 2 	
 1554              	NTIB:
 1555 0ae0 41F8045D 		_PUSH
 1556 0ae4 03F12405 		ADD	R5,R3,#NTIB_OFS
 1557 0ae8 7047     		_NEXT
 1558              	
 1559              	//    'EVAL	( -- a )
 1560              	// 	Execution vector of EVAL.
 1561              	
 1562 0aea DAFEFF17 		.word	_NTIB+MAPOFFSET
ARM GAS  stm32eforth.s 			page 31


 1563 0aee 05       	_TEVAL:	.byte   5
 1564 0aef 27455641 		.ascii "'EVAL"
 1564      4C
 1565              		.p2align 2 	
 1566              	TEVAL:
 1567 0af4 41F8045D 		_PUSH
 1568 0af8 03F12C05 		ADD	R5,R3,#EVAL_OFS
 1569 0afc 7047     		_NEXT
 1570              	
 1571              	//    HLD	 ( -- a )
 1572              	// 	Hold a pointer in building a numeric output string.
 1573              	
 1574 0afe EEFEFF17 		.word	_TEVAL+MAPOFFSET
 1575 0b02 03       	_HLD:	.byte   3
 1576 0b03 484C44   		.ascii "HLD"
 1577 0b06 00BF     		.p2align 2 	
 1578              	HLD:
 1579 0b08 41F8045D 		_PUSH
 1580 0b0c 03F13005 		ADD	R5,R3,#HLD_OFS
 1581 0b10 7047     		_NEXT
 1582              	
 1583              	//    CONTEXT	( -- a )
 1584              	// 	A area to specify vocabulary search order.
 1585              	
 1586 0b12 02FFFF17 		.word	_HLD+MAPOFFSET
 1587 0b16 07       	_CNTXT:	.byte   7
 1588 0b17 434F4E54 		.ascii "CONTEXT"
 1588      455854
 1589 0b1e 00BF     		.p2align 2 	
 1590              	CNTXT:
 1591              	CRRNT:
 1592 0b20 41F8045D 		_PUSH
 1593 0b24 03F13405 		ADD	R5,R3,#CTXT_OFS
 1594 0b28 7047     		_NEXT
 1595              	
 1596              	//    CP	( -- a )
 1597              	// 	Point to top name in RAM vocabulary.
 1598              	
 1599 0b2a 16FFFF17 		.word	_CNTXT+MAPOFFSET
 1600 0b2e 02       	_CP:	.byte   2
 1601 0b2f 4350     		.ascii "CP"
 1602 0b31 0000BF   		.p2align 2 	
 1603              	CPP:
 1604 0b34 41F8045D 		_PUSH
 1605 0b38 03F13C05 		ADD	R5,R3,#USER_CTOP_OFS
 1606 0b3c 7047     		_NEXT
 1607              	
 1608              	//   FCP ( -- a )
 1609              	//  Point ot top of Forth system dictionary
 1610 0b3e 2EFFFF17 		.word _CP+MAPOFFSET
 1611 0b42 03       	_FCP: .byte 3            
 1612 0b43 464350   		.ascii "FCP"
 1613 0b46 00BF     		.p2align 2 
 1614              	FCP: 
 1615 0b48 41F8045D 		_PUSH 
 1616 0b4c 03F13805 		ADD R5,R3,#FORTH_CTOP_OFS 
 1617 0b50 7047     		_NEXT 
ARM GAS  stm32eforth.s 			page 32


 1618              	
 1619              	//    LAST	( -- a )
 1620              	// 	Point to the last name in the name dictionary.
 1621              	
 1622 0b52 42FFFF17 		.word	_FCP+MAPOFFSET
 1623 0b56 04       	_LAST:	.byte   4
 1624 0b57 4C415354 		.ascii "LAST"
 1625 0b5b 00       		.p2align 2 	
 1626              	LAST:
 1627 0b5c 41F8045D 		_PUSH
 1628 0b60 03F14005 		ADD	R5,R3,#LASTN_OFS
 1629 0b64 7047     		_NEXT
 1630              	
 1631              	//	USER_BEGIN ( -- a )
 1632              	//  where user area begin in RAM
 1633 0b66 56FFFF17 		.word _LAST+MAPOFFSET
 1634 0b6a 0A       	_USER_BGN: .byte 10
 1635 0b6b 55534552 		.ascii "USER_BEGIN"
 1635      5F424547 
 1635      494E
 1636 0b75 0000BF   		.p2align 2
 1637              	USER_BEGIN:
 1638 0b78 41F8045D 		_PUSH 
 1639 0b7c 03F14405 		ADD R5,R3,#USER_BEGIN_OFS
 1640 0b80 7047     		_NEXT 
 1641              	
 1642              	//  USER_END ( -- a )
 1643              	//  where user area end in RAM 
 1644 0b82 6AFFFF17 		.word _USER_BGN+MAPOFFSET
 1645 0b86 08       	_USER_END: .byte 8 
 1646 0b87 55534552 		.ascii "USER_END" 
 1646      5F454E44 
 1647 0b8f 00       		.p2align 2 
 1648              	USER_END:
 1649 0b90 41F8045D 		_PUSH 
 1650 0b94 03F14805 		ADD R5,R3,#USER_END_OFS
 1651 0b98 7047     		_NEXT 
 1652              	
 1653              	//  USER_IMG ( -- a )
 1654              	//  where user image is saved in FLASH
 1655 0b9a 86FFFF17 		.word _USER_END+MAPOFFSET
 1656 0b9e 08       	_USER_IMG: .byte 8
 1657 0b9f 55534552 		.ascii "USER_IMG"
 1657      5F494D47 
 1658 0ba7 00       		.p2align 2 
 1659              	USER_IMG:
 1660 0ba8 41F8045D 		_PUSH 
 1661 0bac 03F14C05 		ADD R5,R3,#USER_IMG_OFS 
 1662 0bb0 7047     		_NEXT 
 1663              	
 1664              	// **************************************************************************
 1665              	//  Common functions
 1666              	
 1667              	//    WITHIN	( u ul uh -- t )
 1668              	// 	Return true if u is within the range of ul and uh.
 1669              	
 1670 0bb2 9EFFFF17 		.word	_USER_IMG+MAPOFFSET
ARM GAS  stm32eforth.s 			page 33


 1671 0bb6 06       	_WITHI:	.byte   6
 1672 0bb7 57495448 		.ascii "WITHIN"
 1672      494E
 1673 0bbd 0000BF   		.p2align 2 	
 1674              	WITHI:
 1675 0bc0 42F804ED 		_NEST
 1676 0bc4 FFF77CFD 		BL	OVER
 1677 0bc8 FFF7D4FD 		BL	SUBB
 1678 0bcc FFF74AFD 		BL	TOR
 1679 0bd0 FFF7D0FD 		BL	SUBB
 1680 0bd4 FFF734FD 		BL	RFROM
 1681 0bd8 FFF7B4FE 		BL	ULESS
 1682 0bdc 52F804FB 		_UNNEST
 1683              	
 1684              	//  Divide
 1685              	
 1686              	//    UM/MOD	( udl udh u -- ur uq )
 1687              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1688              	
 1689 0be0 B6FFFF17 		.word	_WITHI+MAPOFFSET
 1690 0be4 06       	_UMMOD:	.byte   6
 1691 0be5 554D2F4D 		.ascii "UM/MOD"
 1691      4F44
 1692 0beb 00       		.p2align 2 	
 1693              	UMMOD:
 1694 0bec 4FF00107 		MOV	R7,#1
 1695 0bf0 51F8044B 		LDR	R4,[R1],#4
 1696 0bf4 0E68     		LDR	R6,[R1]
 1697              	UMMOD0:
 1698 0bf6 B619     		ADDS	R6,R6,R6
 1699 0bf8 6441     		ADCS	R4,R4,R4
 1700 0bfa 04D3     		BCC	UMMOD1
 1701 0bfc A4EB0504 		SUB	R4,R4,R5
 1702 0c00 06F10106 		ADD	R6,R6,#1
 1703 0c04 04E0     		B UMMOD2
 1704              	UMMOD1:
 1705 0c06 641B     		SUBS	R4,R4,R5 
 1706 0c08 28BF     		IT CS 
 1707 0c0a 0136     		ADDCS	R6,R6,#1
 1708 0c0c 00D2     		BCS	UMMOD2
 1709 0c0e 2C44     		ADD	R4,R4,R5
 1710              	UMMOD2:
 1711 0c10 FF19     		ADDS	R7,R7,R7
 1712 0c12 F0D3     		BCC	UMMOD0
 1713 0c14 3546     		MOV	R5,R6
 1714 0c16 0C60     		STR	R4,[R1]
 1715 0c18 7047     		_NEXT
 1716              	
 1717              	//    M/MOD	( d n -- r q )
 1718              	// 	Signed floored divide of double by single. Return mod and quotient.
 1719              	
 1720 0c1a E4FFFF17 		.word	_UMMOD+MAPOFFSET
 1721 0c1e 05       	_MSMOD:	.byte  5
 1722 0c1f 4D2F4D4F 		.ascii "M/MOD"
 1722      44
 1723              		.p2align 2 	
 1724              	MSMOD:	
ARM GAS  stm32eforth.s 			page 34


 1725 0c24 42F804ED 		_NEST
 1726 0c28 FFF738FD 		BL	DUPP
 1727 0c2c FFF750FD 		BL	ZLESS
 1728 0c30 FFF734FD 		BL	DUPP
 1729 0c34 FFF716FD 		BL	TOR
 1730 0c38 FFF7C6FC 		BL	QBRAN
 1731 0c3c 50000018 		.word	MMOD1+MAPOFFSET
 1732 0c40 FFF758FE 		BL	NEGAT
 1733 0c44 FFF70EFD 		BL	TOR
 1734 0c48 FFF7E4FE 		BL	DNEGA
 1735 0c4c FFF7F8FC 		BL	RFROM
 1736              	MMOD1:
 1737 0c50 FFF708FD 	  BL	TOR
 1738 0c54 FFF722FD 		BL	DUPP
 1739 0c58 FFF73AFD 		BL	ZLESS
 1740 0c5c FFF7B4FC 		BL	QBRAN
 1741 0c60 6C000018 		.word	MMOD2+MAPOFFSET
 1742 0c64 FFF7F6FC 		BL	RAT
 1743 0c68 FFF77CFD 		BL	PLUS
 1744              	MMOD2:
 1745 0c6c FFF7E8FC 	  BL	RFROM
 1746 0c70 FFF7BCFF 		BL	UMMOD
 1747 0c74 FFF7E4FC 		BL	RFROM
 1748 0c78 FFF7A6FC 		BL	QBRAN
 1749 0c7c 8C000018 		.word	MMOD3+MAPOFFSET
 1750 0c80 FFF714FD 		BL	SWAP
 1751 0c84 FFF736FE 		BL	NEGAT
 1752 0c88 FFF710FD 		BL	SWAP
 1753              	MMOD3:   
 1754 0c8c 52F804FB 		_UNNEST
 1755              	
 1756              	//    /MOD	( n n -- r q )
 1757              	// 	Signed divide. Return mod and quotient.
 1758              	
 1759 0c90 1E000018 		.word	_MSMOD+MAPOFFSET
 1760 0c94 04       	_SLMOD:	.byte   4
 1761 0c95 2F4D4F44 		.ascii "/MOD"
 1762 0c99 0000BF   		.p2align 2 	
 1763              	SLMOD:
 1764 0c9c 42F804ED 		_NEST
 1765 0ca0 FFF70EFD 		BL	OVER
 1766 0ca4 FFF714FD 		BL	ZLESS
 1767 0ca8 FFF700FD 		BL	SWAP
 1768 0cac FFF7BAFF 		BL	MSMOD
 1769 0cb0 52F804FB 		_UNNEST
 1770              	
 1771              	//    MOD	 ( n n -- r )
 1772              	// 	Signed divide. Return mod only.
 1773              	
 1774 0cb4 94000018 		.word	_SLMOD+MAPOFFSET
 1775 0cb8 03       	_MODD:	.byte  3
 1776 0cb9 4D4F44   		.ascii "MOD"
 1777              		.p2align 2 	
 1778              	MODD:
 1779 0cbc 42F804ED 		_NEST
 1780 0cc0 FFF7ECFF 		BL	SLMOD
 1781 0cc4 FFF7E2FC 		BL	DROP
ARM GAS  stm32eforth.s 			page 35


 1782 0cc8 52F804FB 		_UNNEST
 1783              	
 1784              	//    /	   ( n n -- q )
 1785              	// 	Signed divide. Return quotient only.
 1786              	
 1787 0ccc B8000018 		.word	_MODD+MAPOFFSET
 1788 0cd0 01       	_SLASH:	.byte  1
 1789 0cd1 2F       		.ascii "/"
 1790 0cd2 00BF     		.p2align 2 	
 1791              	SLASH:
 1792 0cd4 42F804ED 		_NEST
 1793 0cd8 FFF7E0FF 		BL	SLMOD
 1794 0cdc FFF7E6FC 		BL	SWAP
 1795 0ce0 FFF7D4FC 		BL	DROP
 1796 0ce4 52F804FB 		_UNNEST
 1797              	
 1798              	//    */MOD	( n1 n2 n3 -- r q )
 1799              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1800              	
 1801 0ce8 D0000018 		.word	_SLASH+MAPOFFSET
 1802 0cec 05       	_SSMOD:	.byte  5
 1803 0ced 2A2F4D4F 		.ascii "*/MOD"
 1803      44
 1804 0cf2 00BF     		.p2align 2 	
 1805              	SSMOD:
 1806 0cf4 42F804ED 		_NEST
 1807 0cf8 FFF7B4FC 		BL	TOR
 1808 0cfc FFF756FD 		BL	MSTAR
 1809 0d00 FFF79EFC 		BL	RFROM
 1810 0d04 FFF78EFF 		BL	MSMOD
 1811 0d08 52F804FB 		_UNNEST
 1812              	
 1813              	//    */	  ( n1 n2 n3 -- q )
 1814              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1815              	
 1816 0d0c EC000018 		.word	_SSMOD+MAPOFFSET
 1817 0d10 02       	_STASL:	.byte  2
 1818 0d11 2A2F     		.ascii "*/"
 1819 0d13 00       		.p2align 2 	
 1820              	STASL:
 1821 0d14 42F804ED 		_NEST
 1822 0d18 FFF7ECFF 		BL	SSMOD
 1823 0d1c FFF7C6FC 		BL	SWAP
 1824 0d20 FFF7B4FC 		BL	DROP
 1825 0d24 52F804FB 		_UNNEST
 1826              	
 1827              	// **************************************************************************
 1828              	//  Miscellaneous
 1829              	
 1830              	//    ALIGNED	( b -- a )
 1831              	// 	Align address to the cell boundary.
 1832              	
 1833 0d28 10010018 		.word	_STASL+MAPOFFSET
 1834 0d2c 07       	_ALGND:	.byte   7
 1835 0d2d 414C4947 		.ascii "ALIGNED"
 1835      4E4544
 1836              		.p2align 2 	
ARM GAS  stm32eforth.s 			page 36


 1837              	ALGND:
 1838 0d34 05F10305 		ADD	R5,R5,#3
 1839 0d38 6FF00304 		MVN	R4,#3
 1840 0d3c 05EA0405 		AND	R5,R5,R4
 1841 0d40 7047     		_NEXT
 1842              	
 1843              	//    >CHAR	( c -- c )
 1844              	// 	Filter non-printing characters.
 1845              	
 1846 0d42 2C010018 		.word	_ALGND+MAPOFFSET
 1847 0d46 05       	_TCHAR:	.byte  5
 1848 0d47 3E434841 		.ascii ">CHAR"
 1848      52
 1849              		.p2align 2 	
 1850              	TCHAR:
 1851 0d4c 42F804ED 		_NEST
 1852 0d50 FFF717FC 		_DOLIT
 1853 0d54 7F000000 		.word	0x7F
 1854 0d58 FFF7C4FC 		BL	ANDD
 1855 0d5c FFF79EFC 		BL	DUPP	// mask msb
 1856 0d60 FFF75EFD 		BL	BLANK
 1857 0d64 FFF70DFC 		_DOLIT
 1858 0d68 7F000000 		.word	127
 1859 0d6c FFF728FF 		BL	WITHI	// check for printable
 1860 0d70 FFF7B6FD 		BL	INVER
 1861 0d74 FFF728FC 		BL	QBRAN
 1862 0d78 88010018 		.word	TCHA1+MAPOFFSET
 1863 0d7c FFF786FC 		BL	DROP
 1864 0d80 FFF7FFFB 		_DOLIT
 1865 0d84 5F000000 		.word	'_'	// replace non-printables
 1866              	TCHA1:
 1867 0d88 52F804FB 		  _UNNEST
 1868              	
 1869              	//    DEPTH	( -- n )
 1870              	// 	Return the depth of the data stack.
 1871              	
 1872 0d8c 46010018 		.word	_TCHAR+MAPOFFSET
 1873 0d90 05       	_DEPTH:	.byte  5
 1874 0d91 44455054 		.ascii "DEPTH"
 1874      48
 1875 0d96 00BF     		.p2align 2 	
 1876              	DEPTH:
 1877 0d98 41F8045D 		_PUSH
 1878 0d9c 44F68465 		MOVW	R5,#SPP&0xffff+4 
 1879 0da0 C2F20005 	 	MOVT	R5,#SPP>>16 
 1880 0da4 A5EB0105 		SUB	R5,R5,R1
 1881 0da8 4FEAA505 		ASR	R5,R5,#2
 1882 0dac A5F10105 		SUB	R5,R5,#1
 1883 0db0 7047     		_NEXT
 1884              	
 1885              	//    PICK	( ... +n -- ... w )
 1886              	// 	Copy the nth stack item to tos.
 1887              	
 1888 0db2 90010018 		.word	_DEPTH+MAPOFFSET
 1889 0db6 04       	_PICK:	.byte  4
 1890 0db7 5049434B 		.ascii "PICK"
 1891 0dbb 00       		.p2align 2 	
ARM GAS  stm32eforth.s 			page 37


 1892              	PICK:
 1893 0dbc 42F804ED 		_NEST
 1894 0dc0 FFF7FEFC 		BL	ONEP
 1895 0dc4 FFF736FD 		BL	CELLS
 1896 0dc8 FFF756FC 		BL	SPAT
 1897 0dcc FFF7CAFC 		BL	PLUS
 1898 0dd0 FFF720FC 		BL	AT
 1899 0dd4 52F804FB 		_UNNEST
 1900              	
 1901              	// **************************************************************************
 1902              	//  Memory access
 1903              	
 1904              	//    HERE	( -- a )
 1905              	// 	Return the top of the code dictionary.
 1906              	
 1907 0dd8 B6010018 		.word	_PICK+MAPOFFSET
 1908 0ddc 04       	_HERE:	.byte  4
 1909 0ddd 48455245 		.ascii "HERE"
 1910 0de1 0000BF   		.p2align 2 	
 1911              	HERE:
 1912 0de4 42F804ED 		_NEST
 1913 0de8 FFF7A4FE 		BL	CPP
 1914 0dec FFF712FC 		BL	AT
 1915 0df0 52F804FB 		_UNNEST
 1916              		
 1917              	//    PAD	 ( -- a )
 1918              	// 	Return the address of a temporary buffer.
 1919              	
 1920 0df4 DC010018 		.word	_HERE+MAPOFFSET
 1921 0df8 03       	_PAD:	.byte  3
 1922 0df9 504144   		.ascii "PAD"
 1923              		.p2align 2 	
 1924              	PAD:
 1925 0dfc 42F804ED 		_NEST
 1926 0e00 FFF7F0FF 		BL	HERE
 1927 0e04 05F15005 		ADD	R5,R5,#80
 1928 0e08 52F804FB 		_UNNEST
 1929              	
 1930              	//    TIB	 ( -- a )
 1931              	// 	Return the address of the terminal input buffer.
 1932              	
 1933 0e0c F8010018 		.word	_PAD+MAPOFFSET
 1934 0e10 03       	_TIB:	.byte  3
 1935 0e11 544942   		.ascii "TIB"
 1936              		.p2align 2 	
 1937              	TIB:
 1938 0e14 41F8045D 		_PUSH
 1939 0e18 9D6A     		ldr r5,[r3,#TIB_OFS]
 1940 0e1a 7047     		_NEXT
 1941              	
 1942              	//    @EXECUTE	( a -- )
 1943              	// 	Execute vector stored in address a.
 1944              	
 1945 0e1c 10020018 		.word	_TIB+MAPOFFSET
 1946 0e20 08       	_ATEXE:	.byte   8
 1947 0e21 40455845 		.ascii "@EXECUTE"
 1947      43555445 
ARM GAS  stm32eforth.s 			page 38


 1948 0e29 0000BF   		.p2align 2 	
 1949              	ATEXE:
 1950 0e2c 2C00     		MOVS	R4,R5
 1951 0e2e 51F8045B 		_POP
 1952 0e32 2468     		LDR	R4,[R4]
 1953 0e34 44F00104 		ORR	R4,R4,#1
 1954 0e38 18BF     	    IT NE 
 1955 0e3a 2047     		BXNE	R4
 1956 0e3c 7047     		_NEXT
 1957              	
 1958              	//    CMOVE	( b1 b2 u -- )
 1959              	// 	Copy u bytes from b1 to b2.
 1960              	
 1961 0e3e 20020018 		.word	_ATEXE+MAPOFFSET
 1962 0e42 05       	_CMOVE:	.byte   5
 1963 0e43 434D4F56 		.ascii "CMOVE"
 1963      45
 1964              		.p2align 2 	
 1965              	CMOVE:
 1966 0e48 51F8046B 		LDR	R6,[R1],#4
 1967 0e4c 51F8047B 		LDR	R7,[R1],#4
 1968 0e50 03E0     		B CMOV1
 1969              	CMOV0:
 1970 0e52 17F8014B 		LDRB	R4,[R7],#1
 1971 0e56 06F8014B 		STRB	R4,[R6],#1
 1972              	CMOV1:
 1973 0e5a 2D00     		MOVS	R5,R5
 1974 0e5c 02D0     		BEQ	CMOV2
 1975 0e5e A5F10105 		SUB	R5,R5,#1
 1976 0e62 F6E7     		B CMOV0
 1977              	CMOV2:
 1978 0e64 51F8045B 		_POP
 1979 0e68 7047     		_NEXT
 1980              	
 1981              	//    MOVE	( a1 a2 u -- )
 1982              	// 	Copy u words from a1 to a2.
 1983              	
 1984 0e6a 42020018 		.word	_CMOVE+MAPOFFSET
 1985 0e6e 04       	_MOVE:	.byte   4
 1986 0e6f 4D4F5645 		.ascii "MOVE"
 1987 0e73 00       		.p2align 2 	
 1988              	MOVE:
 1989 0e74 25F00305 		AND	R5,R5,#-4
 1990 0e78 51F8046B 		LDR	R6,[R1],#4
 1991 0e7c 51F8047B 		LDR	R7,[R1],#4
 1992 0e80 03E0     		B MOVE1
 1993              	MOVE0:
 1994 0e82 57F8044B 		LDR	R4,[R7],#4
 1995 0e86 46F8044B 		STR	R4,[R6],#4
 1996              	MOVE1:
 1997 0e8a 2D00     		MOVS	R5,R5
 1998 0e8c 02D0     		BEQ	MOVE2
 1999 0e8e A5F10405 		SUB	R5,R5,#4
 2000 0e92 F6E7     		B MOVE0
 2001              	MOVE2:
 2002 0e94 51F8045B 		_POP
 2003 0e98 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 39


 2004              	
 2005              	//    FILL	( b u c -- )
 2006              	// 	Fill u bytes of character c to area beginning at b.
 2007              	
 2008 0e9a 6E020018 		.word	_MOVE+MAPOFFSET
 2009 0e9e 04       	_FILL:	.byte   4
 2010 0e9f 46494C4C 		.ascii "FILL"
 2011 0ea3 00       		.p2align 2 	
 2012              	FILL:
 2013 0ea4 51F8046B 		LDR	R6,[R1],#4
 2014 0ea8 51F8047B 		LDR	R7,[R1],#4
 2015              	FILL0:
 2016 0eac 00E0     		B FILL1
 2017 0eae 2D46     		MOV	R5,R5
 2018              	FILL1:
 2019 0eb0 07F8015B 		STRB	R5,[R7],#1
 2020 0eb4 3600     		MOVS	R6,R6
 2021 0eb6 02D0     		BEQ	FILL2
 2022 0eb8 A6F10106 		SUB	R6,R6,#1
 2023 0ebc F6E7     		B FILL0
 2024              	FILL2:
 2025 0ebe 51F8045B 		_POP
 2026 0ec2 7047     		_NEXT
 2027              	
 2028              	//    PACK$	( b u a -- a )
 2029              	// 	Build a counted word with u characters from b. Null fill.
 2030              	
 2031 0ec4 9E020018 		.word	_FILL+MAPOFFSET
 2032 0ec8 05       	_PACKS:	.byte  5
 2033 0ec9 5041434B 		.ascii "PACK$$"
 2033      2424
 2034 0ecf 00       		.p2align 2 	
 2035              	PACKS:
 2036 0ed0 42F804ED 		_NEST
 2037 0ed4 FFF72EFF 		BL	ALGND
 2038 0ed8 FFF7E0FB 		BL	DUPP
 2039 0edc FFF7C2FB 		BL	TOR			// strings only on cell boundary
 2040 0ee0 FFF7EEFB 		BL	OVER
 2041 0ee4 FFF73EFC 		BL	PLUS
 2042 0ee8 FFF76AFC 		BL	ONEP
 2043 0eec FFF749FB 		_DOLIT
 2044 0ef0 FCFFFFFF 		.word	0xFFFFFFFC
 2045 0ef4 FFF7F6FB 		BL	ANDD			// count mod cell
 2046 0ef8 FFF743FB 		_DOLIT
 2047 0efc 00000000 		.word	0
 2048 0f00 FFF7D4FB 		BL	SWAP
 2049 0f04 FFF77CFB 		BL	STORE			// null fill cell
 2050 0f08 FFF7A4FB 		BL	RAT
 2051 0f0c FFF7D0FC 		BL	DDUP
 2052 0f10 FFF786FB 		BL	CSTOR
 2053 0f14 FFF754FC 		BL	ONEP			// save count
 2054 0f18 FFF7C8FB 		BL	SWAP
 2055 0f1c FFF794FF 		BL	CMOVE
 2056 0f20 FFF78EFB 		BL	RFROM
 2057 0f24 52F804FB 		_UNNEST   			// move string
 2058              	
 2059              	// **************************************************************************
ARM GAS  stm32eforth.s 			page 40


 2060              	//  Numeric output, single precision
 2061              	
 2062              	//    DIGIT	( u -- c )
 2063              	// 	Convert digit u to a character.
 2064              	
 2065 0f28 C8020018 		.word	_PACKS+MAPOFFSET
 2066 0f2c 05       	_DIGIT:	.byte  5
 2067 0f2d 44494749 		.ascii "DIGIT"
 2067      54
 2068 0f32 00BF     		.p2align 2 	
 2069              	DIGIT:
 2070 0f34 42F804ED 		_NEST
 2071 0f38 FFF723FB 		_DOLIT
 2072 0f3c 09000000 		.word	9
 2073 0f40 FFF7BEFB 		BL	OVER
 2074 0f44 FFF70AFD 		BL	LESS
 2075 0f48 05F00705 		AND	R5,R5,#7
 2076 0f4c FFF70AFC 		BL	PLUS
 2077 0f50 05F13005 		ADD	R5,R5,#'0'
 2078 0f54 52F804FB 		_UNNEST
 2079              	
 2080              	//    EXTRACT	( n base -- n c )
 2081              	// 	Extract the least significant digit from n.
 2082              	
 2083 0f58 2C030018 		.word	_DIGIT+MAPOFFSET
 2084 0f5c 07       	_EXTRC:	.byte  7
 2085 0f5d 45585452 		.ascii "EXTRACT"
 2085      414354
 2086              		.p2align 2 	
 2087              	EXTRC:
 2088 0f64 42F804ED 		_NEST
 2089 0f68 FFF70BFB 		_DOLIT
 2090 0f6c 00000000 		.word	0
 2091 0f70 FFF79CFB 		BL	SWAP
 2092 0f74 FFF73AFE 		BL	UMMOD
 2093 0f78 FFF798FB 		BL	SWAP
 2094 0f7c FFF7DAFF 		BL	DIGIT
 2095 0f80 52F804FB 		_UNNEST
 2096              	
 2097              	//    <#	  ( -- )
 2098              	// 	Initiate the numeric output process.
 2099              	
 2100 0f84 5C030018 		.word	_EXTRC+MAPOFFSET
 2101 0f88 02       	_BDIGS:	.byte  2
 2102 0f89 3C23     		.ascii "<#"
 2103 0f8b 00       		.p2align 2 	
 2104              	BDIGS:
 2105 0f8c 42F804ED 		_NEST
 2106 0f90 FFF734FF 		BL	PAD
 2107 0f94 FFF7B8FD 		BL	HLD
 2108 0f98 FFF732FB 		BL	STORE
 2109 0f9c 52F804FB 		_UNNEST
 2110              	
 2111              	//    HOLD	( c -- )
 2112              	// 	Insert a character into the numeric output string.
 2113              	
 2114 0fa0 88030018 		.word	_BDIGS+MAPOFFSET
ARM GAS  stm32eforth.s 			page 41


 2115 0fa4 04       	_HOLD:	.byte  4
 2116 0fa5 484F4C44 		.ascii "HOLD"
 2117 0fa9 0000BF   		.p2align 2 	
 2118              	HOLD:
 2119 0fac 42F804ED 		_NEST
 2120 0fb0 FFF7AAFD 		BL	HLD
 2121 0fb4 FFF72EFB 		BL	AT
 2122 0fb8 FFF70AFC 		BL	ONEM
 2123 0fbc FFF76EFB 		BL	DUPP
 2124 0fc0 FFF7A2FD 		BL	HLD
 2125 0fc4 FFF71CFB 		BL	STORE
 2126 0fc8 FFF72AFB 		BL	CSTOR
 2127 0fcc 52F804FB 		_UNNEST
 2128              	
 2129              	//    #	   ( u -- u )
 2130              	// 	Extract one digit from u and append the digit to output string.
 2131              	
 2132 0fd0 A4030018 		.word	_HOLD+MAPOFFSET
 2133 0fd4 01       	_DIG:	.byte  1
 2134 0fd5 23       		.ascii "#"
 2135 0fd6 00BF     		.p2align 2 	
 2136              	DIG:
 2137 0fd8 42F804ED 		_NEST
 2138 0fdc FFF75CFD 		BL	BASE
 2139 0fe0 FFF718FB 		BL	AT
 2140 0fe4 FFF7BEFF 		BL	EXTRC
 2141 0fe8 FFF7E0FF 		BL	HOLD
 2142 0fec 52F804FB 		_UNNEST
 2143              	
 2144              	//    #S	  ( u -- 0 )
 2145              	// 	Convert u until all digits are added to the output string.
 2146              	
 2147 0ff0 D4030018 		.word	_DIG+MAPOFFSET
 2148 0ff4 02       	_DIGS:	.byte  2
 2149 0ff5 2353     		.ascii "#S"
 2150 0ff7 00       		.p2align 2 	
 2151              	DIGS:
 2152 0ff8 42F804ED 		_NEST
 2153              	DIGS1:
 2154 0ffc FFF7ECFF 	    BL	DIG
 2155 1000 FFF74CFB 		BL	DUPP
 2156 1004 FFF7E0FA 		BL	QBRAN
 2157 1008 0E040018 		.word	DIGS2+MAPOFFSET
 2158 100c F6E7     		B	DIGS1
 2159              	DIGS2:
 2160 100e 52F804FB 		  _UNNEST
 2161              	
 2162              	//    SIGN	( n -- )
 2163              	// 	Add a minus sign to the numeric output string.
 2164              	
 2165 1012 F4030018 		.word	_DIGS+MAPOFFSET
 2166 1016 04       	_SIGN:	.byte  4
 2167 1017 5349474E 		.ascii "SIGN"
 2168 101b 00       		.p2align 2 	
 2169              	SIGN:
 2170 101c 42F804ED 		_NEST
 2171 1020 FFF756FB 		BL	ZLESS
ARM GAS  stm32eforth.s 			page 42


 2172 1024 FFF7D0FA 		BL	QBRAN
 2173 1028 38040018 		.word	SIGN1+MAPOFFSET
 2174 102c FFF7A9FA 		_DOLIT
 2175 1030 2D000000 		.word	'-'
 2176 1034 FFF7BAFF 		BL	HOLD
 2177              	SIGN1:
 2178 1038 52F804FB 		  _UNNEST
 2179              	
 2180              	//    #>	  ( w -- b u )
 2181              	// 	Prepare the outputDCB to be TYPE'd.
 2182              	
 2183 103c 16040018 		.word	_SIGN+MAPOFFSET
 2184 1040 02       	_EDIGS:	.byte  2
 2185 1041 233E     		.ascii "#>"
 2186 1043 00       		.p2align 2 	
 2187              	EDIGS:
 2188 1044 42F804ED 		_NEST
 2189 1048 FFF720FB 		BL	DROP
 2190 104c FFF75CFD 		BL	HLD
 2191 1050 FFF7E0FA 		BL	AT
 2192 1054 FFF7D2FE 		BL	PAD
 2193 1058 FFF732FB 		BL	OVER
 2194 105c FFF78AFB 		BL	SUBB
 2195 1060 52F804FB 		_UNNEST
 2196              	
 2197              	//    str	 ( n -- b u )
 2198              	// 	Convert a signed integer to a numeric string.
 2199              	
 2200              	// 	.word	_EDIGS+MAPOFFSET
 2201              	// _STRR	.byte  3
 2202              	// 	.ascii "str"
 2203              	// 	.p2align 2 	
 2204              	STRR:
 2205 1064 42F804ED 		_NEST
 2206 1068 FFF718FB 		BL	DUPP
 2207 106c FFF7FAFA 		BL	TOR
 2208 1070 FFF748FC 		BL	ABSS
 2209 1074 FFF78AFF 		BL	BDIGS
 2210 1078 FFF7BEFF 		BL	DIGS
 2211 107c FFF7E0FA 		BL	RFROM
 2212 1080 FFF7CCFF 		BL	SIGN
 2213 1084 FFF7DEFF 		BL	EDIGS
 2214 1088 52F804FB 		_UNNEST
 2215              	
 2216              	//    HEX	 ( -- )
 2217              	// 	Use radix 16 as base for numeric conversions.
 2218              	
 2219 108c 40040018 		.word	_EDIGS+MAPOFFSET
 2220 1090 03       	_HEX:	.byte  3
 2221 1091 484558   		.ascii "HEX"
 2222              		.p2align 2 	
 2223              	HEX:
 2224 1094 42F804ED 		_NEST
 2225 1098 FFF773FA 		_DOLIT
 2226 109c 10000000 		.word	16
 2227 10a0 FFF7FAFC 		BL	BASE
 2228 10a4 FFF7ACFA 		BL	STORE
ARM GAS  stm32eforth.s 			page 43


 2229 10a8 52F804FB 		_UNNEST
 2230              	
 2231              	//    DECIMAL	( -- )
 2232              	// 	Use radix 10 as base for numeric conversions.
 2233              	
 2234 10ac 90040018 		.word	_HEX+MAPOFFSET
 2235 10b0 07       	_DECIM:	.byte  7
 2236 10b1 44454349 		.ascii "DECIMAL"
 2236      4D414C
 2237              		.p2align 2 	
 2238              	DECIM:
 2239 10b8 42F804ED 		_NEST
 2240 10bc FFF761FA 		_DOLIT
 2241 10c0 0A000000 		.word	10
 2242 10c4 FFF7E8FC 		BL	BASE
 2243 10c8 FFF79AFA 		BL	STORE
 2244 10cc 52F804FB 		_UNNEST
 2245              	
 2246              	// **************************************************************************
 2247              	//  Numeric input, single precision
 2248              	
 2249              	//    DIGIT?	( c base -- u t )
 2250              	// 	Convert a character to its numeric value. A flag indicates success.
 2251              	
 2252 10d0 B0040018 		.word	_DECIM+MAPOFFSET
 2253 10d4 06       	_DIGTQ:	.byte  6
 2254 10d5 44494749 		.ascii "DIGIT?"
 2254      543F
 2255 10db 00       		.p2align 2 	
 2256              	DIGTQ:
 2257 10dc 42F804ED 		_NEST
 2258 10e0 FFF7C0FA 		BL	TOR
 2259 10e4 FFF74DFA 		_DOLIT
 2260 10e8 30000000 		.word	'0'
 2261 10ec FFF742FB 		BL	SUBB
 2262 10f0 FFF747FA 		_DOLIT
 2263 10f4 09000000 		.word	9
 2264 10f8 FFF7E2FA 		BL	OVER
 2265 10fc FFF72EFC 		BL	LESS
 2266 1100 FFF762FA 		BL	QBRAN
 2267 1104 28050018 		.word	DGTQ1+MAPOFFSET
 2268 1108 FFF73BFA 		_DOLIT
 2269 110c 07000000 		.word	7
 2270 1110 FFF730FB 		BL	SUBB
 2271 1114 FFF7C2FA 		BL	DUPP
 2272 1118 FFF733FA 		_DOLIT
 2273 111c 0A000000 		.word	10
 2274 1120 FFF71CFC 		BL	LESS
 2275 1124 FFF7E8FA 		BL	ORR
 2276              	DGTQ1:
 2277 1128 FFF7B8FA 	  BL	DUPP
 2278 112c FFF788FA 		BL	RFROM
 2279 1130 FFF708FC 		BL	ULESS
 2280 1134 52F804FB 		_UNNEST
 2281              	
 2282              	//    NUMBER?	( a -- n T | a F )
 2283              	// 	Convert a number word to integer. Push a flag on tos.
ARM GAS  stm32eforth.s 			page 44


 2284              	
 2285 1138 D4040018 		.word	_DIGTQ+MAPOFFSET
 2286 113c 07       	_NUMBQ:	.byte  7
 2287 113d 4E554D42 		.ascii "NUMBER?"
 2287      45523F
 2288              		.p2align 2 	
 2289              	NUMBQ:
 2290 1144 42F804ED 		_NEST
 2291 1148 FFF7A6FC 		BL	BASE
 2292 114c FFF762FA 		BL	AT
 2293 1150 FFF788FA 		BL	TOR
 2294 1154 FFF715FA 		_DOLIT
 2295 1158 00000000 		.word	0
 2296 115c FFF7B0FA 		BL	OVER
 2297 1160 FFF74CFC 		BL	COUNT
 2298 1164 FFF7ACFA 		BL	OVER
 2299 1168 FFF764FA 		BL	CAT
 2300 116c FFF709FA 		_DOLIT
 2301 1170 24000000 		.word	'$'
 2302 1174 FFF7DAFB 		BL	EQUAL
 2303 1178 FFF726FA 		BL	QBRAN
 2304 117c 94050018 		.word	NUMQ1+MAPOFFSET
 2305 1180 FFF788FF 		BL	HEX
 2306 1184 FFF792FA 		BL	SWAP
 2307 1188 FFF71AFB 		BL	ONEP
 2308 118c FFF78EFA 		BL	SWAP
 2309 1190 FFF71EFB 		BL	ONEM
 2310              	NUMQ1:
 2311 1194 FFF794FA 		BL	OVER
 2312 1198 FFF74CFA 		BL	CAT
 2313 119c FFF7F1F9 		_DOLIT
 2314 11a0 2D000000 		.word	'-'
 2315 11a4 FFF7C2FB 		BL	EQUAL
 2316 11a8 FFF75CFA 		BL	TOR
 2317 11ac FFF77EFA 		BL	SWAP
 2318 11b0 FFF750FA 		BL	RAT
 2319 11b4 FFF7DEFA 		BL	SUBB
 2320 11b8 FFF778FA 		BL	SWAP
 2321 11bc FFF74AFA 		BL	RAT
 2322 11c0 FFF7D0FA 		BL	PLUS
 2323 11c4 FFF756FB 		BL	QDUP
 2324 11c8 FFF7FEF9 		BL	QBRAN
 2325 11cc 58060018 		.word	NUMQ6+MAPOFFSET
 2326 11d0 FFF7FEFA 		BL	ONEM
 2327 11d4 FFF746FA 		BL	TOR
 2328              	NUMQ2:
 2329 11d8 FFF760FA 		BL	DUPP
 2330 11dc FFF742FA 		BL	TOR
 2331 11e0 FFF728FA 		BL	CAT
 2332 11e4 FFF758FC 		BL	BASE
 2333 11e8 FFF714FA 		BL	AT
 2334 11ec FFF776FF 		BL	DIGTQ
 2335 11f0 FFF7EAF9 		BL	QBRAN
 2336 11f4 3C060018 		.word	NUMQ4+MAPOFFSET
 2337 11f8 FFF758FA 		BL	SWAP
 2338 11fc FFF74CFC 		BL	BASE
 2339 1200 FFF708FA 		BL	AT
ARM GAS  stm32eforth.s 			page 45


 2340 1204 FFF7BEFA 		BL	STAR
 2341 1208 FFF7ACFA 		BL	PLUS
 2342 120c FFF718FA 		BL	RFROM
 2343 1210 FFF7D6FA 		BL	ONEP
 2344 1214 FFF7C9F9 		BL	DONXT
 2345 1218 D8050018 		.word	NUMQ2+MAPOFFSET
 2346 121c FFF71AFA 		BL	RAT
 2347 1220 FFF744FA 		BL	SWAP
 2348 1224 FFF732FA 		BL	DROP
 2349 1228 FFF7CEF9 		BL	QBRAN
 2350 122c 34060018 		.word	NUMQ3+MAPOFFSET
 2351 1230 FFF760FB 		BL	NEGAT
 2352              	NUMQ3:
 2353 1234 FFF73AFA 		BL	SWAP
 2354 1238 00F00CB8 		B.W	NUMQ5
 2355              	NUMQ4:
 2356 123c FFF700FA 		BL	RFROM
 2357 1240 FFF7FEF9 		BL	RFROM
 2358 1244 FFF72AFB 		BL	DDROP
 2359 1248 FFF728FB 		BL	DDROP
 2360 124c FFF799F9 		_DOLIT
 2361 1250 00000000 		.word	0
 2362              	NUMQ5:
 2363 1254 FFF722FA 		BL	DUPP
 2364              	NUMQ6:
 2365 1258 FFF7F2F9 		BL	RFROM
 2366 125c FFF71EFB 		BL	DDROP
 2367 1260 FFF7EEF9 		BL	RFROM
 2368 1264 FFF718FC 		BL	BASE
 2369 1268 FFF7CAF9 		BL	STORE
 2370 126c 52F804FB 		_UNNEST
 2371              	
 2372              	// **************************************************************************
 2373              	//  Basic I/O
 2374              	
 2375              	//    KEY	 ( -- c )
 2376              	// 	Wait for and return an input character.
 2377              	
 2378 1270 3C050018 		.word	_NUMBQ+MAPOFFSET
 2379 1274 03       	_KEY:	.byte  3
 2380 1275 4B4559   		.ascii "KEY"
 2381              		.p2align 2 	
 2382              	KEY:
 2383 1278 42F804ED 		_NEST
 2384              	KEY1:
 2385 127c FFF756F9 		BL	QRX
 2386 1280 FFF7A2F9 		BL	QBRAN
 2387 1284 7C060018 		.word	KEY1+MAPOFFSET
 2388              	// CTRL-C reboot
 2389 1288 FFF708FA 		BL DUPP 
 2390 128c FFF779F9 		BL DOLIT 
 2391 1290 03000000 		.word 3 
 2392 1294 FFF74AFB 		BL EQUAL 
 2393 1298 FFF722FB 		BL INVER
 2394 129c FFF794F9 		BL QBRAN
 2395 12a0 B0F8FF17 		.word REBOOT+MAPOFFSET 
 2396 12a4 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 46


 2397              	
 2398              	//    SPACE	( -- )
 2399              	// 	Send the blank character to the output device.
 2400              	
 2401 12a8 74060018 		.word	_KEY+MAPOFFSET
 2402 12ac 05       	_SPACE:	.byte  5
 2403 12ad 53504143 		.ascii "SPACE"
 2403      45
 2404 12b2 00BF     		.p2align 2 	
 2405              	SPACE:
 2406 12b4 42F804ED 		_NEST
 2407 12b8 FFF7B2FA 		BL	BLANK
 2408 12bc FFF750F9 		BL	EMIT
 2409 12c0 52F804FB 		_UNNEST
 2410              	
 2411              	//    SPACES	( +n -- )
 2412              	// 	Send n spaces to the output device.
 2413              	
 2414 12c4 AC060018 		.word	_SPACE+MAPOFFSET
 2415 12c8 06       	_SPACS:	.byte  6
 2416 12c9 53504143 		.ascii "SPACES"
 2416      4553
 2417 12cf 00       		.p2align 2 	
 2418              	SPACS:
 2419 12d0 42F804ED 		_NEST
 2420 12d4 FFF755F9 		_DOLIT
 2421 12d8 00000000 		.word	0
 2422 12dc FFF756FB 		BL	MAX
 2423 12e0 FFF7C0F9 		BL	TOR
 2424 12e4 00F002B8 		B.W	CHAR2
 2425              	CHAR1:
 2426 12e8 FFF7E4FF 		BL	SPACE
 2427              	CHAR2:
 2428 12ec FFF75DF9 		BL	DONXT
 2429 12f0 E8060018 		.word	CHAR1+MAPOFFSET
 2430 12f4 52F804FB 		_UNNEST
 2431              	
 2432              	//    TYPE	( b u -- )
 2433              	// 	Output u characters from b.
 2434              	
 2435 12f8 C8060018 		.word	_SPACS+MAPOFFSET
 2436 12fc 04       	_TYPEE:	.byte	4
 2437 12fd 54595045 		.ascii "TYPE"
 2438 1301 0000BF   		.p2align 2 	
 2439              	TYPEE:
 2440 1304 42F804ED 		_NEST
 2441 1308 FFF7ACF9 		BL  TOR   // ( a+1 -- R: u )
 2442 130c 05E0     		B	TYPE2
 2443              	TYPE1:  
 2444 130e FFF775FB 		BL  COUNT
 2445 1312 FFF71BFD 		BL	TCHAR
 2446 1316 FFF723F9 		BL	EMIT
 2447              	TYPE2:  
 2448 131a FFF746F9 		BL  DONXT  
 2449 131e 0E070018 		.word	TYPE1+MAPOFFSET
 2450 1322 FFF7B3F9 		BL	DROP
 2451 1326 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 47


 2452              	
 2453              	//    CR	  ( -- )
 2454              	// 	Output a carriage return and a line feed.
 2455              	
 2456 132a FC060018 		.word	_TYPEE+MAPOFFSET
 2457 132e 02       	_CR:	.byte  2
 2458 132f 4352     		.ascii "CR"
 2459 1331 0000BF   		.p2align 2 	
 2460              	CR:
 2461 1334 42F804ED 		_NEST
 2462 1338 FFF723F9 		_DOLIT
 2463 133c 0D000000 		.word	CRR
 2464 1340 FFF70EF9 		BL	EMIT
 2465 1344 FFF71DF9 		_DOLIT
 2466 1348 0A000000 		.word	LF
 2467 134c FFF708F9 		BL	EMIT
 2468 1350 52F804FB 		_UNNEST
 2469              	
 2470              	//    do_$	( -- a )
 2471              	// 	Return the address of a compiled string.
 2472              	//  adjust return address to skip over it.
 2473              	
 2474              	// 	.word	_CR+MAPOFFSET
 2475              	// _DOSTR	.byte  COMPO+3
 2476              	// 	.ascii "do$$"
 2477              	// 	.p2align 2 	
 2478              	DOSTR:
 2479 1354 42F804ED 		_NEST     
 2480              	/* compiled string address is 2 levels deep */
 2481 1358 FFF772F9 		BL	RFROM	// { -- a1 }
 2482 135c FFF770F9 		BL	RFROM	//  {a1 -- a1 a2 } b0 set
 2483 1360 FFF736FA 		BL	ONEM	//  clear b0
 2484 1364 FFF79AF9 		BL	DUPP	// {a1 a2 -- a1 a2 a2 }
 2485 1368 FFF748FB 		BL	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2486 136c FFF7FAF9 		BL	PLUS	// { -- a1 a2 a2+1+c }
 2487 1370 FFF7E0FC 		BL	ALGND	//  end of string
 2488 1374 FFF724FA 		BL	ONEP	//  restore b0, this result in return address 2 level deep.
 2489 1378 FFF774F9 		BL	TOR		//  address after string { -- a1 a2 }
 2490 137c FFF796F9 		BL	SWAP	//  count tugged
 2491 1380 FFF770F9 		BL	TOR     //  ( -- a2) is string address
 2492 1384 52F804FB 		_UNNEST
 2493              	
 2494              	//    $"|	( -- a )
 2495              	// 	Run time routine compiled by _". Return address of a compiled string.
 2496              	
 2497              	// 	.word	_DOSTR+MAPOFFSET
 2498              	// _STRQP	.byte  COMPO+3
 2499              	// 	.ascii "$\"|"
 2500              	// 	.p2align 2 	
 2501              	STRQP:
 2502 1388 42F804ED 		_NEST
 2503 138c FFF7E2FF 		BL	DOSTR
 2504 1390 52F804FB 		_UNNEST			// force a call to dostr
 2505              	
 2506              	//    .$	( a -- )
 2507              	// 	Run time routine of ." . Output a compiled string.
 2508              	
ARM GAS  stm32eforth.s 			page 48


 2509              	// 	.word	_STRQP+MAPOFFSET
 2510              	// _DOTST	.byte  COMPO+2
 2511              	// 	.ascii ".$$"
 2512              	// 	.p2align 2 	
 2513              	DOTST:
 2514 1394 42F804ED 		_NEST
 2515 1398 FFF730FB 		BL	COUNT // ( -- a+1 c )
 2516 139c FFF7B2FF 		BL	TYPEE
 2517 13a0 52F804FB 		_UNNEST
 2518              	
 2519              	//    ."|	( -- )
 2520              	// 	Run time routine of ." . Output a compiled string.
 2521              	
 2522              	// 	.word	_DOTST+MAPOFFSET
 2523              	// _DOTQP	.byte  COMPO+3
 2524              	// 	.ascii ".""|"
 2525              	// 	.p2align 2 	
 2526              	DOTQP:
 2527 13a4 42F804ED 		_NEST
 2528 13a8 FFF7D4FF 		BL	DOSTR
 2529 13ac FFF7F2FF 		BL	DOTST
 2530 13b0 52F804FB 		_UNNEST
 2531              	
 2532              	//    .R	  ( n +n -- )
 2533              	// 	Display an integer in a field of n columns, right justified.
 2534              	
 2535 13b4 2E070018 		.word	_CR+MAPOFFSET
 2536 13b8 02       	_DOTR:	.byte  2
 2537 13b9 2E52     		.ascii ".R"
 2538 13bb 00       		.p2align 2 	
 2539              	DOTR:
 2540 13bc 42F804ED 		_NEST
 2541 13c0 FFF750F9 		BL	TOR
 2542 13c4 FFF74EFE 		BL	STRR
 2543 13c8 FFF73AF9 		BL	RFROM
 2544 13cc FFF778F9 		BL	OVER
 2545 13d0 FFF7D0F9 		BL	SUBB
 2546 13d4 FFF77CFF 		BL	SPACS
 2547 13d8 FFF794FF 		BL	TYPEE
 2548 13dc 52F804FB 		_UNNEST
 2549              	
 2550              	//    U.R	 ( u +n -- )
 2551              	// 	Display an unsigned integer in n column, right justified.
 2552              	
 2553 13e0 B8070018 		.word	_DOTR+MAPOFFSET
 2554 13e4 03       	_UDOTR:	.byte  3
 2555 13e5 552E52   		.ascii "U.R"
 2556              		.p2align 2 	
 2557              	UDOTR:
 2558 13e8 42F804ED 		_NEST
 2559 13ec FFF73AF9 		BL	TOR
 2560 13f0 FFF7CCFD 		BL	BDIGS
 2561 13f4 FFF700FE 		BL	DIGS
 2562 13f8 FFF724FE 		BL	EDIGS
 2563 13fc FFF720F9 		BL	RFROM
 2564 1400 FFF75EF9 		BL	OVER
 2565 1404 FFF7B6F9 		BL	SUBB
ARM GAS  stm32eforth.s 			page 49


 2566 1408 FFF762FF 		BL	SPACS
 2567 140c FFF77AFF 		BL	TYPEE
 2568 1410 52F804FB 		_UNNEST
 2569              	
 2570              	//    U.	  ( u -- )
 2571              	// 	Display an unsigned integer in free format.
 2572              	
 2573 1414 E4070018 		.word	_UDOTR+MAPOFFSET
 2574 1418 02       	_UDOT:	.byte  2
 2575 1419 552E     		.ascii "U."
 2576 141b 00       		.p2align 2 	
 2577              	UDOT:
 2578 141c 42F804ED 		_NEST
 2579 1420 FFF7B4FD 		BL	BDIGS
 2580 1424 FFF7E8FD 		BL	DIGS
 2581 1428 FFF70CFE 		BL	EDIGS
 2582 142c FFF742FF 		BL	SPACE
 2583 1430 FFF768FF 		BL	TYPEE
 2584 1434 52F804FB 		_UNNEST
 2585              	
 2586              	//    .	   ( w -- )
 2587              	// 	Display an integer in free format, preceeded by a space.
 2588              	
 2589 1438 18080018 		.word	_UDOT+MAPOFFSET
 2590 143c 01       	_DOT:	.byte  1
 2591 143d 2E       		.ascii "."
 2592 143e 00BF     		.p2align 2 	
 2593              	DOT:
 2594 1440 42F804ED 		_NEST
 2595 1444 FFF728FB 		BL	BASE
 2596 1448 FFF7E4F8 		BL	AT
 2597 144c FFF799F8 		_DOLIT
 2598 1450 0A000000 		.word	10
 2599 1454 FFF75AF9 		BL	XORR			// ?decimal
 2600 1458 FFF7B6F8 		BL	QBRAN
 2601 145c 68080018 		.word	DOT1+MAPOFFSET
 2602 1460 FFF7DCFF 		BL	UDOT
 2603 1464 52F804FB 		_UNNEST			// no,display unsigned
 2604              	DOT1:
 2605 1468 FFF7FCFD 	    BL	STRR
 2606 146c FFF722FF 		BL	SPACE
 2607 1470 FFF748FF 		BL	TYPEE
 2608 1474 52F804FB 		_UNNEST			// yes, display signed
 2609              	
 2610              	//    ?	   ( a -- )
 2611              	// 	Display the contents in a memory cell.
 2612              	
 2613 1478 3C080018 		.word	_DOT+MAPOFFSET
 2614 147c 01       	_QUEST:	.byte  1
 2615 147d 3F       		.ascii "?"
 2616 147e 00BF     		.p2align 2 	
 2617              	QUEST:
 2618 1480 42F804ED 		_NEST
 2619 1484 FFF7C6F8 		BL	AT
 2620 1488 FFF7DAFF 		BL	DOT
 2621 148c 52F804FB 		_UNNEST
 2622              	
ARM GAS  stm32eforth.s 			page 50


 2623              	// **************************************************************************
 2624              	//  Parsing
 2625              	
 2626              	//    parse	( b u c -- b u delta //  string> )
 2627              	// 	Scan word delimited by c. Return found string and its offset.
 2628              	
 2629              	// 	.word	_QUEST+MAPOFFSET
 2630              	// _PARS	.byte  5
 2631              	// 	.ascii "parse"
 2632              	// 	.p2align 2 	
 2633              	PARS:
 2634 1490 42F804ED 		_NEST
 2635 1494 FFF705FB 		BL	TEMP
 2636 1498 FFF7B2F8 		BL	STORE
 2637 149c FFF710F9 		BL	OVER
 2638 14a0 FFF7E0F8 		BL	TOR
 2639 14a4 FFF7FAF8 		BL	DUPP
 2640 14a8 FFF78EF8 		BL	QBRAN
 2641 14ac 9E090018 		.word	PARS8+MAPOFFSET
 2642 14b0 FFF78EF9 		BL	ONEM
 2643 14b4 FFF7F5FA 		BL	TEMP
 2644 14b8 FFF7ACF8 		BL	AT
 2645 14bc FFF7B0F9 		BL	BLANK
 2646 14c0 FFF734FA 		BL	EQUAL
 2647 14c4 FFF780F8 		BL	QBRAN
 2648 14c8 18090018 		.word	PARS3+MAPOFFSET
 2649 14cc FFF7CAF8 		BL	TOR
 2650              	PARS1:
 2651 14d0 FFF7A6F9 		BL	BLANK
 2652 14d4 FFF7F4F8 		BL	OVER
 2653 14d8 FFF7ACF8 		BL	CAT			// skip leading blanks 
 2654 14dc FFF74AF9 		BL	SUBB
 2655 14e0 FFF7F6F8 		BL	ZLESS
 2656 14e4 FFF7FCF9 		BL	INVER
 2657 14e8 FFF76EF8 		BL	QBRAN
 2658 14ec 14090018 		.word	PARS2+MAPOFFSET
 2659 14f0 FFF766F9 		BL	ONEP
 2660 14f4 FFF759F8 		BL	DONXT
 2661 14f8 D0080018 		.word	PARS1+MAPOFFSET
 2662 14fc FFF7A0F8 		BL	RFROM
 2663 1500 FFF7C4F8 		BL	DROP
 2664 1504 FFF73DF8 		_DOLIT
 2665 1508 00000000 		.word	0
 2666 150c FFF7C6F8 		BL	DUPP
 2667 1510 52F804FB 		_UNNEST
 2668              	PARS2:
 2669 1514 FFF794F8 	  BL	RFROM
 2670              	PARS3:
 2671 1518 FFF7D2F8 		BL	OVER
 2672 151c FFF7C6F8 		BL	SWAP
 2673 1520 FFF7A0F8 		BL	TOR
 2674              	PARS4:
 2675 1524 FFF7BDFA 		BL	TEMP
 2676 1528 FFF774F8 		BL	AT
 2677 152c FFF7C8F8 		BL	OVER
 2678 1530 FFF780F8 		BL	CAT
 2679 1534 FFF71EF9 		BL	SUBB			// scan for delimiter
ARM GAS  stm32eforth.s 			page 51


 2680 1538 FFF7B3FA 		BL	TEMP
 2681 153c FFF76AF8 		BL	AT
 2682 1540 FFF76EF9 		BL	BLANK
 2683 1544 FFF7F2F9 		BL	EQUAL
 2684 1548 FFF73EF8 		BL	QBRAN
 2685 154c 54090018 		.word	PARS5+MAPOFFSET
 2686 1550 FFF7BEF8 		BL	ZLESS
 2687              	PARS5:
 2688 1554 FFF738F8 		BL	QBRAN
 2689 1558 72090018 		.word	PARS6+MAPOFFSET
 2690 155c FFF730F9 		BL	ONEP
 2691 1560 FFF723F8 		BL	DONXT
 2692 1564 24090018 		.word	PARS4+MAPOFFSET
 2693 1568 FFF798F8 		BL	DUPP
 2694 156c FFF77AF8 		BL	TOR
 2695 1570 09E0     		B	PARS7
 2696              	PARS6:
 2697 1572 FFF765F8 		BL	RFROM
 2698 1576 FFF789F8 		BL	DROP
 2699 157a FFF78FF8 		BL	DUPP
 2700 157e FFF71FF9 		BL	ONEP
 2701 1582 FFF76FF8 		BL	TOR
 2702              	PARS7:
 2703 1586 FFF79BF8 		BL	OVER
 2704 158a FFF7F3F8 		BL	SUBB
 2705 158e FFF757F8 		BL	RFROM
 2706 1592 FFF755F8 		BL	RFROM
 2707 1596 FFF7EDF8 		BL	SUBB
 2708 159a 52F804FB 		_UNNEST
 2709              	PARS8:
 2710 159e FFF78FF8 		BL	OVER
 2711 15a2 FFF74DF8 		BL	RFROM
 2712 15a6 FFF7E5F8 		BL	SUBB
 2713 15aa 52F804FB 		_UNNEST
 2714              	
 2715              	//    PARSE	( c -- b u //  string> )
 2716              	// 	Scan input stream and return counted string delimited by c.
 2717              	
 2718 15ae 7C080018 		.word	_QUEST+MAPOFFSET
 2719 15b2 05       	_PARSE:	.byte  5
 2720 15b3 50415253 		.ascii "PARSE"
 2720      45
 2721              		.p2align 2 	
 2722              	PARSE:
 2723 15b8 42F804ED 		_NEST
 2724 15bc FFF752F8 		BL	TOR
 2725 15c0 FFF728FC 		BL	TIB
 2726 15c4 FFF782FA 		BL	INN
 2727 15c8 FFF724F8 		BL	AT
 2728 15cc FFF7CAF8 		BL	PLUS			// current input buffer pointer
 2729 15d0 FFF786FA 		BL	NTIB
 2730 15d4 FFF71EF8 		BL	AT
 2731 15d8 FFF778FA 		BL	INN
 2732 15dc FFF71AF8 		BL	AT
 2733 15e0 FFF7C8F8 		BL	SUBB			// remaining count
 2734 15e4 FFF72CF8 		BL	RFROM
 2735 15e8 FFF752FF 		BL	PARS
ARM GAS  stm32eforth.s 			page 52


 2736 15ec FFF76EFA 		BL	INN
 2737 15f0 FFF7E0F9 		BL	PSTOR
 2738 15f4 52F804FB 		_UNNEST
 2739              	
 2740              	//    .(	  ( -- )
 2741              	// 	Output following string up to next ) .
 2742              	
 2743 15f8 B2090018 		.word	_PARSE+MAPOFFSET
 2744 15fc 82       	_DOTPR:	.byte  IMEDD+2
 2745 15fd 2E28     		.ascii ".("
 2746 15ff 00       		.p2align 2 	
 2747              	DOTPR:
 2748 1600 42F804ED 		_NEST
 2749 1604 FEF7BDFF 		_DOLIT
 2750 1608 29000000 		.word	')'
 2751 160c FFF7D4FF 		BL	PARSE
 2752 1610 FFF778FE 		BL	TYPEE
 2753 1614 52F804FB 		_UNNEST
 2754              	
 2755              	//    (	   ( -- )
 2756              	// 	Ignore following string up to next ) . A comment.
 2757              	
 2758 1618 FC090018 		.word	_DOTPR+MAPOFFSET
 2759 161c 81       	_PAREN:	.byte  IMEDD+1
 2760 161d 28       		.ascii "("
 2761 161e 00BF     		.p2align 2 	
 2762              	PAREN:
 2763 1620 42F804ED 		_NEST
 2764 1624 FEF7ADFF 		_DOLIT
 2765 1628 29000000 		.word	')'
 2766 162c FFF7C4FF 		BL	PARSE
 2767 1630 FFF734F9 		BL	DDROP
 2768 1634 52F804FB 		_UNNEST
 2769              	
 2770              	//    \	   ( -- )
 2771              	// 	Ignore following text till the end of line.
 2772              	
 2773 1638 1C0A0018 		.word	_PAREN+MAPOFFSET
 2774 163c 81       	_BKSLA:	.byte  IMEDD+1
 2775 163d 27       		.byte	'\'
 2776 163e 00BF     		.p2align 2 	
 2777              	BKSLA:
 2778 1640 42F804ED 		_NEST
 2779 1644 FFF74CFA 		BL	NTIB
 2780 1648 FEF7E4FF 		BL	AT
 2781 164c FFF73EFA 		BL	INN
 2782 1650 FEF7D6FF 		BL	STORE
 2783 1654 52F804FB 		_UNNEST
 2784              	
 2785              	//    CHAR	( -- c )
 2786              	// 	Parse next word and return its first character.
 2787              	
 2788 1658 3C0A0018 		.word	_BKSLA+MAPOFFSET
 2789 165c 04       	_CHAR:	.byte  4
 2790 165d 43484152 		.ascii "CHAR"
 2791 1661 0000BF   		.p2align 2 	
 2792              	CHAR:
ARM GAS  stm32eforth.s 			page 53


 2793 1664 42F804ED 		_NEST
 2794 1668 FFF7DAF8 		BL	BLANK
 2795 166c FFF7A4FF 		BL	PARSE
 2796 1670 FFF70CF8 		BL	DROP
 2797 1674 FEF7DEFF 		BL	CAT
 2798 1678 52F804FB 		_UNNEST
 2799              	
 2800              	//    WORD	( c -- a //  string> )
 2801              	// 	Parse a word from input stream and copy it to code dictionary.
 2802              	
 2803 167c 5C0A0018 		.word	_CHAR+MAPOFFSET
 2804 1680 04       	_WORDD:	.byte  4
 2805 1681 574F5244 		.ascii "WORD"
 2806 1685 0000BF   		.p2align 2 	
 2807              	WORDD:
 2808 1688 42F804ED 		_NEST
 2809 168c FFF794FF 		BL	PARSE
 2810 1690 FFF7A8FB 		BL	HERE
 2811 1694 FFF7B4F8 		BL	CELLP
 2812 1698 FFF71AFC 		BL	PACKS
 2813 169c 52F804FB 		_UNNEST
 2814              	
 2815              	//    TOKEN	( -- a //  string> )
 2816              	// 	Parse a word from input stream and copy it to name dictionary.
 2817              	
 2818 16a0 800A0018 		.word	_WORDD+MAPOFFSET
 2819 16a4 05       	_TOKEN:	.byte  5
 2820 16a5 544F4B45 		.ascii "TOKEN"
 2820      4E
 2821 16aa 00BF     		.p2align 2 	
 2822              	TOKEN:
 2823 16ac 42F804ED 		_NEST
 2824 16b0 FFF7B6F8 		BL	BLANK
 2825 16b4 FFF7E8FF 		BL	WORDD
 2826 16b8 52F804FB 		_UNNEST
 2827              	
 2828              	// **************************************************************************
 2829              	//  Dictionary search
 2830              	
 2831              	//    NAME>	( na -- ca )
 2832              	// 	Return a code address given a name address.
 2833              	
 2834 16bc A40A0018 		.word	_TOKEN+MAPOFFSET
 2835 16c0 05       	_NAMET:	.byte  5
 2836 16c1 4E414D45 		.ascii "NAME>"
 2836      3E
 2837 16c6 00BF     		.p2align 2 	
 2838              	NAMET:
 2839 16c8 42F804ED 		_NEST
 2840 16cc FFF796F9 		BL	COUNT
 2841 16d0 FEF757FF 		_DOLIT
 2842 16d4 1F000000 		.word	0x1F
 2843 16d8 FFF704F8 		BL	ANDD
 2844 16dc FFF742F8 		BL	PLUS
 2845 16e0 FFF728FB 		BL	ALGND
 2846 16e4 52F804FB 		_UNNEST
 2847              	
ARM GAS  stm32eforth.s 			page 54


 2848              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2849              	// 	Compare u bytes in two strings. Return 0 if identical.
 2850              	//
 2851              	//  Picatout 2020-12-01, 
 2852              	//      Because of problem with .align directive that
 2853              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2854              	// 		words  to do a byte by byte comparison. 
 2855              	//
 2856 16e8 C00A0018 		.word	_NAMET+MAPOFFSET
 2857 16ec 05       	_SAMEQ:	.byte  5
 2858 16ed 53414D45 		.ascii "SAME?"
 2858      3F
 2859 16f2 00BF     		.p2align 2	
 2860              	SAMEQ:
 2861 16f4 42F804ED 		_NEST
 2862 16f8 FEF7B4FF 		BL	TOR
 2863 16fc 00F01EB8 		B.W	SAME2
 2864              	SAME1:
 2865 1700 FEF7DEFF 		BL	OVER  // ( a1 a2 -- a1 a2 a1 )
 2866 1704 FEF7A6FF 		BL	RAT   // a1 a2 a1 u 
 2867 1708 FFF72CF8 		BL	PLUS  // a1 a2 a1+u 
 2868 170c FEF792FF 		BL	CAT	   // a1 a2 c1    		
 2869 1710 FEF7D6FF 		BL	OVER  // a1 a2 c1 a2 
 2870 1714 FEF79EFF 		BL	RAT    
 2871 1718 FFF724F8 		BL	PLUS    
 2872 171c FEF78AFF 		BL	CAT	  // a1 a2 c1 c2
 2873 1720 FFF728F8 		BL	SUBB  
 2874 1724 FFF7A6F8 		BL	QDUP
 2875 1728 FEF74EFF 		BL	QBRAN
 2876 172c 3C0B0018 		.word	SAME2+MAPOFFSET
 2877 1730 FEF786FF 		BL	RFROM
 2878 1734 FEF7AAFF 		BL	DROP
 2879 1738 52F804FB 		_UNNEST	// strings not equal
 2880              	SAME2:
 2881 173c FEF735FF 		BL	DONXT
 2882 1740 000B0018 		.word	SAME1+MAPOFFSET
 2883 1744 FEF71DFF 		_DOLIT
 2884 1748 00000000 		.word	0
 2885 174c 52F804FB 		_UNNEST	// strings equal
 2886              	
 2887              	//    find	( a na -- ca na | a F )
 2888              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2889              	
 2890              	//  Picatout 2020-12-01,  
 2891              	//		Modified from original. See comment for word "SAME?" 
 2892              	
 2893              	// 	.word	_SAMEQ+MAPOFFSET
 2894              	// _FIND	.byte  4
 2895              	// 	.ascii "find"
 2896              	// 	.p2align 2 	
 2897              	FIND:
 2898 1750 42F804ED 		_NEST
 2899 1754 FEF7AAFF 		BL	SWAP			// na a	
 2900 1758 FFF750F9 		BL	COUNT			// na a+1 count
 2901 175c FEF79EFF 		BL	DUPP 
 2902 1760 FFF79FF9 		BL	TEMP
 2903 1764 FEF74CFF 		BL	STORE			// na a+1 count 
ARM GAS  stm32eforth.s 			page 55


 2904 1768 FEF77CFF 		BL  TOR		// na a+1  R: count  
 2905 176c FEF79EFF 		BL	SWAP			// a+1 na
 2906              	FIND1:
 2907 1770 FEF794FF 		BL	DUPP			// a+1 na na
 2908 1774 FEF728FF 		BL	QBRAN
 2909 1778 C00B0018 		.word	FIND6+MAPOFFSET	// end of vocabulary
 2910 177c FEF78EFF 		BL	DUPP			// a+1 na na
 2911 1780 FEF758FF 		BL	CAT			// a+1 na name1
 2912 1784 FEF7FDFE 		_DOLIT
 2913 1788 1FFFFFFF 		.word	MASKK
 2914 178c FEF7AAFF 		BL	ANDD
 2915 1790 FEF760FF 		BL	RAT			// a+1 na name1 count 
 2916 1794 FEF7BAFF 		BL	XORR			// a+1 na,  same length?
 2917 1798 FEF716FF 		BL	QBRAN
 2918 179c AC0B0018 		.word	FIND2+MAPOFFSET
 2919 17a0 FFF736F8 		BL	CELLM			// a+1 la
 2920 17a4 FEF736FF 		BL	AT			// a+1 next_na
 2921 17a8 FFF7E2BF 		B.w	FIND1			// try next word
 2922              	FIND2:   
 2923 17ac FFF708F8 		BL	ONEP			// a+1 na+1
 2924 17b0 FFF777F9 		BL	TEMP
 2925 17b4 FEF72EFF 		BL	AT			// a+1 na+1 count
 2926 17b8 FFF79CFF 		BL	SAMEQ		// a+1 na+1 ? 
 2927              	FIND3:	
 2928 17bc 00F00CB8 		B.w	FIND4
 2929              	FIND6:	
 2930 17c0 FEF73EFF 		BL	RFROM			// a+1 0 name1 -- , no match
 2931 17c4 FEF762FF 		BL	DROP			// a+1 0
 2932 17c8 FEF770FF 		BL	SWAP			// 0 a+1
 2933 17cc FFF700F8 		BL	ONEM			// 0 a
 2934 17d0 FEF76CFF 		BL	SWAP			// a 0 
 2935 17d4 52F804FB 		_UNNEST			// return without a match
 2936              	FIND4:	
 2937 17d8 FEF7F6FE 		BL	QBRAN			// a+1 na+1
 2938 17dc F00B0018 		.word	FIND5+MAPOFFSET	// found a match
 2939 17e0 FEF7F6FF 		BL	ONEM			// a+1 na
 2940 17e4 FFF714F8 		BL	CELLM			// a+4 la
 2941 17e8 FEF714FF 		BL	AT			// a+1 next_na
 2942 17ec FFF7C0BF 		B.w	FIND1			// compare next name
 2943              	FIND5:	
 2944 17f0 FEF726FF 		BL	RFROM			// a+1 na+1 count
 2945 17f4 FEF74AFF 		BL	DROP			// a+1 na+1
 2946 17f8 FEF758FF 		BL	SWAP			// na+1 a+1
 2947 17fc FEF746FF 		BL	DROP			// na+1
 2948 1800 FEF7E6FF 		BL	ONEM			// na
 2949 1804 FEF74AFF 		BL	DUPP			// na na
 2950 1808 FFF75EFF 		BL	NAMET			// na ca
 2951 180c FEF74EFF 		BL	SWAP			// ca na
 2952 1810 52F804FB 		_UNNEST			//  return with a match
 2953              	
 2954              	//    NAME?	( a -- ca na | a F )
 2955              	// 	Search all context vocabularies for a string.
 2956              	
 2957 1814 EC0A0018 		.word	_SAMEQ+MAPOFFSET
 2958 1818 05       	_NAMEQ:	.byte  5
 2959 1819 4E414D45 		.ascii "NAME?"
 2959      3F
ARM GAS  stm32eforth.s 			page 56


 2960 181e 00BF     		.p2align 2 	
 2961              	NAMEQ:
 2962 1820 42F804ED 		_NEST
 2963 1824 FFF77CF9 		BL	CNTXT
 2964 1828 FEF7F4FE 		BL	AT
 2965 182c FFF790FF 		BL	FIND
 2966 1830 52F804FB 		_UNNEST
 2967              	
 2968              	// **************************************************************************
 2969              	//  Terminal input
 2970              	
 2971              	//    	  ( bot eot cur -- bot eot cur )
 2972              	// 	Backup the cursor by one character.
 2973              	
 2974              	// 	.word	_NAMEQ+MAPOFFSET
 2975              	// _BKSP	.byte  2
 2976              	// 	.ascii "^H"
 2977              	// 	.p2align 2 	
 2978              	BKSP:
 2979 1834 42F804ED 		_NEST
 2980 1838 FEF714FF 		BL	TOR
 2981 183c FEF740FF 		BL	OVER
 2982 1840 FEF7FEFE 		BL	RFROM
 2983 1844 FEF732FF 		BL	SWAP
 2984 1848 FEF73AFF 		BL	OVER
 2985 184c FEF75EFF 		BL	XORR
 2986 1850 FEF7BAFE 		BL	QBRAN
 2987 1854 7C0C0018 		.word	BACK1+MAPOFFSET
 2988 1858 FEF793FE 		_DOLIT
 2989 185c 08000000 		.word	BKSPP
 2990 1860 FEF77EFE 		BL	TECHO
 2991              	// 	BL	ATEXE
 2992 1864 FEF7B4FF 		BL	ONEM
 2993 1868 FEF7DAFF 		BL	BLANK
 2994 186c FEF778FE 		BL	TECHO
 2995              	// 	BL	ATEXE
 2996 1870 FEF787FE 		_DOLIT
 2997 1874 08000000 		.word	BKSPP
 2998 1878 FEF772FE 		BL	TECHO
 2999              	// 	BL	ATEXE
 3000              	BACK1:
 3001 187c 52F804FB 		  _UNNEST
 3002              	
 3003              	//    TAP	 ( bot eot cur c -- bot eot cur )
 3004              	// 	Accept and echo the key stroke and bump the cursor.
 3005              	
 3006              	// 	.word	_BKSP+MAPOFFSET
 3007              	// _TAP	.byte  3
 3008              	// 	.ascii "TAP"
 3009              	// 	.p2align 2 	
 3010              	TAP:
 3011 1880 42F804ED 		_NEST
 3012 1884 FEF70AFF 		BL	DUPP
 3013 1888 FEF76AFE 		BL	TECHO
 3014              	// 	BL	ATEXE
 3015 188c FEF718FF 		BL	OVER
 3016 1890 FEF7C6FE 		BL	CSTOR
ARM GAS  stm32eforth.s 			page 57


 3017 1894 FEF794FF 		BL	ONEP
 3018 1898 52F804FB 		_UNNEST
 3019              	
 3020              	//    kTAP	( bot eot cur c -- bot eot cur )
 3021              	// 	Process a key stroke, CR or backspace.
 3022              	
 3023              	// 	.word	_TAP+MAPOFFSET
 3024              	// _KTAP	.byte  4
 3025              	// 	.ascii "kTAP"
 3026              	// 	.p2align 2 	
 3027              	KTAP:
 3028              	TTAP:
 3029 189c 42F804ED 		_NEST
 3030 18a0 FEF7FCFE 		BL	DUPP
 3031 18a4 FEF76DFE 		_DOLIT
 3032 18a8 0D000000 		.word	CRR
 3033 18ac FEF72EFF 		BL	XORR
 3034 18b0 FEF78AFE 		BL	QBRAN
 3035 18b4 E40C0018 		.word	KTAP2+MAPOFFSET
 3036 18b8 FEF763FE 		_DOLIT
 3037 18bc 08000000 		.word	BKSPP
 3038 18c0 FEF724FF 		BL	XORR
 3039 18c4 FEF780FE 		BL	QBRAN
 3040 18c8 DC0C0018 		.word	KTAP1+MAPOFFSET
 3041 18cc FEF7A8FF 		BL	BLANK
 3042 18d0 FFF7D6FF 		BL	TAP
 3043 18d4 52F804FB 		_UNNEST
 3044 18d8 00000000 		.word	0			// patch
 3045              	KTAP1:
 3046 18dc FFF7AAFF 	  BL	BKSP
 3047 18e0 52F804FB 		_UNNEST
 3048              	KTAP2:
 3049 18e4 FEF7D2FE 	  BL	DROP
 3050 18e8 FEF7E0FE 		BL	SWAP
 3051 18ec FEF7CEFE 		BL	DROP
 3052 18f0 FEF7D4FE 		BL	DUPP
 3053 18f4 52F804FB 		_UNNEST
 3054              	
 3055              	//    ACCEPT	( b u -- b u )
 3056              	// 	Accept characters to input buffer. Return with actual count.
 3057              	
 3058 18f8 180C0018 		.word	_NAMEQ+MAPOFFSET
 3059 18fc 06       	_ACCEP:	.byte  6
 3060 18fd 41434345 		.ascii "ACCEPT"
 3060      5054
 3061 1903 00       		.p2align 2 	
 3062              	ACCEP:
 3063 1904 42F804ED 		_NEST
 3064 1908 FEF7DAFE 		BL	OVER
 3065 190c FEF72AFF 		BL	PLUS
 3066 1910 FEF7D6FE 		BL	OVER
 3067              	ACCP1:
 3068 1914 FEF7CCFF 	  BL	DDUP
 3069 1918 FEF7F8FE 		BL	XORR
 3070 191c FEF754FE 		BL	QBRAN
 3071 1920 500D0018 		.word	ACCP4+MAPOFFSET
 3072 1924 FFF7A8FC 		BL	KEY
ARM GAS  stm32eforth.s 			page 58


 3073 1928 FEF7B8FE 		BL	DUPP
 3074 192c FEF778FF 		BL	BLANK
 3075 1930 FEF727FE 		_DOLIT
 3076 1934 7F000000 		.word	127
 3077 1938 FFF742F9 		BL	WITHI
 3078 193c FEF744FE 		BL	QBRAN
 3079 1940 4A0D0018 		.word	ACCP2+MAPOFFSET
 3080 1944 FFF79CFF 		BL	TAP
 3081 1948 01E0     		B	ACCP3
 3082              	ACCP2:
 3083 194a FFF7A7FF 	  BL	KTAP
 3084              	// 	BL	ATEXE
 3085              	ACCP3:	  
 3086 194e E1E7     		B	ACCP1
 3087              	ACCP4:
 3088 1950 FEF79CFE 	  BL	DROP
 3089 1954 FEF7B4FE 		BL	OVER
 3090 1958 FEF70CFF 		BL	SUBB
 3091 195c 52F804FB 		_UNNEST
 3092              	
 3093              	//    QUERY	( -- )
 3094              	// 	Accept input stream to terminal input buffer.
 3095              	
 3096 1960 FC0C0018 		.word	_ACCEP+MAPOFFSET
 3097 1964 05       	_QUERY:	.byte  5
 3098 1965 51554552 		.ascii "QUERY"
 3098      59
 3099 196a 00BF     		.p2align 2 	
 3100              	QUERY:
 3101 196c 42F804ED 		_NEST
 3102 1970 FFF750FA 		BL	TIB
 3103 1974 FEF705FE 		_DOLIT
 3104 1978 50000000 		.word	80
 3105 197c FFF7C2FF 		BL	ACCEP
 3106 1980 FFF7AEF8 		BL	NTIB
 3107 1984 FEF73CFE 		BL	STORE
 3108 1988 FEF780FE 		BL	DROP
 3109 198c FEF7F9FD 		_DOLIT
 3110 1990 00000000 		.word	0
 3111 1994 FFF79AF8 		BL	INN
 3112 1998 FEF732FE 		BL	STORE
 3113 199c 52F804FB 		_UNNEST
 3114              	
 3115              	// **************************************************************************
 3116              	//  Error handling
 3117              	
 3118              	//    ABORT	( a -- )
 3119              	// 	Reset data stack and jump to QUIT.
 3120              	
 3121 19a0 640D0018 		.word	_QUERY+MAPOFFSET
 3122 19a4 05       	_ABORT:	.byte  5
 3123 19a5 41424F52 		.ascii "ABORT"
 3123      54
 3124 19aa 00BF     		.p2align 2 	
 3125              	ABORT:
 3126 19ac 42F804ED 		_NEST
 3127 19b0 FFF780FC 		BL	SPACE
ARM GAS  stm32eforth.s 			page 59


 3128 19b4 FFF722F8 		BL	COUNT
 3129 19b8 FFF7A4FC 		BL	TYPEE
 3130 19bc FEF7E1FD 		_DOLIT
 3131 19c0 3F000000 		.word	0X3F
 3132 19c4 FEF7CCFD 		BL	EMIT
 3133 19c8 FFF7B4FC 		BL	CR
 3134 19cc 00F0B2F8 		BL	PRESE
 3135 19d0 00F0BCB8 		B.W	QUIT
 3136              	
 3137              	//    _abort"	( f -- )
 3138              	// 	Run time routine of ABORT" . Abort with a message.
 3139              	
 3140              	// 	.word	_ABORT+MAPOFFSET
 3141              	// _ABORQ	.byte  COMPO+6
 3142              	// 	.ascii "abort\""
 3143              	// 	.p2align 2 	
 3144              	ABORQ:
 3145 19d4 42F804ED 		_NEST
 3146 19d8 FEF7F6FD 		BL	QBRAN
 3147 19dc F40D0018 		.word	ABOR1+MAPOFFSET	// text flag
 3148 19e0 FFF7B8FC 		BL	DOSTR
 3149 19e4 FFF70AF8 		BL	COUNT
 3150 19e8 FFF78CFC 		BL	TYPEE
 3151 19ec FFF7A2FC 		BL	CR
 3152 19f0 00F0ACB8 		B.W	QUIT
 3153              	ABOR1:
 3154 19f4 FFF7AEFC 		BL	DOSTR
 3155 19f8 FEF748FE 		BL	DROP
 3156 19fc 52F804FB 		_UNNEST			// drop error
 3157              	
 3158              	// **************************************************************************
 3159              	//  The text interpreter
 3160              	
 3161              	//    $INTERPRET  ( a -- )
 3162              	// 	Interpret a word. If failed, try to convert it to an integer.
 3163              	
 3164 1a00 A40D0018 		.word	_ABORT+MAPOFFSET
 3165 1a04 0A       	_INTER:	.byte  10
 3166 1a05 2424494E 		.ascii "$$INTERPRET"
 3166      54455250 
 3166      524554
 3167              		.p2align 2 	
 3168              	INTER:
 3169 1a10 42F804ED 		_NEST
 3170 1a14 FFF704FF 		BL	NAMEQ
 3171 1a18 FEF72CFF 		BL	QDUP	// ?defined
 3172 1a1c FEF7D4FD 		BL	QBRAN
 3173 1a20 500E0018 		.word	INTE1+MAPOFFSET
 3174 1a24 FEF7F6FD 		BL	AT
 3175 1a28 FEF7ABFD 		_DOLIT
 3176 1a2c 40000000 		.word	COMPO
 3177 1a30 FEF758FE 		BL	ANDD	// ?compile only lexicon bits
 3178 1a34 FFF7CEFF 		BL	ABORQ
 3179 1a38 0D       		.byte	13
 3180 1a39 20636F6D 		.ascii " compile only"
 3180      70696C65 
 3180      206F6E6C 
ARM GAS  stm32eforth.s 			page 60


 3180      79
 3181 1a46 00BF     		.p2align 2 	
 3182 1a48 FEF7AAFD 		BL	EXECU
 3183 1a4c 52F804FB 		_UNNEST			// execute defined word
 3184              	INTE1:
 3185 1a50 FFF778FB 	  BL	NUMBQ
 3186 1a54 FEF7B8FD 		BL	QBRAN
 3187 1a58 600E0018 		.word	INTE2+MAPOFFSET
 3188 1a5c 52F804FB 		_UNNEST
 3189              	INTE2:
 3190 1a60 FFF7A4BF 	  B.W	ABORT	// error
 3191              	
 3192              	//    [	   ( -- )
 3193              	// 	Start the text interpreter.
 3194              	
 3195 1a64 040E0018 		.word	_INTER+MAPOFFSET
 3196 1a68 81       	_LBRAC:	.byte  IMEDD+1
 3197 1a69 5B       		.ascii "["
 3198 1a6a 00BF     		.p2align 2 	
 3199              	LBRAC:
 3200 1a6c 42F804ED 		_NEST
 3201 1a70 FEF787FD 		_DOLIT
 3202 1a74 100E0018 		.word	INTER+MAPOFFSET
 3203 1a78 FFF73CF8 		BL	TEVAL
 3204 1a7c FEF7C0FD 		BL	STORE
 3205 1a80 52F804FB 		_UNNEST
 3206              	
 3207              	//    .OK	 ( -- )
 3208              	// 	Display "ok" only while interpreting.
 3209              	
 3210 1a84 680E0018 		.word	_LBRAC+MAPOFFSET
 3211 1a88 03       	_DOTOK:	.byte  3
 3212 1a89 2E4F4B   		.ascii ".OK"
 3213              		.p2align 2 	
 3214              	DOTOK:
 3215 1a8c 42F804ED 		_NEST
 3216 1a90 FEF777FD 		_DOLIT
 3217 1a94 100E0018 		.word	INTER+MAPOFFSET
 3218 1a98 FFF72CF8 		BL	TEVAL
 3219 1a9c FEF7BAFD 		BL	AT
 3220 1aa0 FEF744FF 		BL	EQUAL
 3221 1aa4 FEF790FD 		BL	QBRAN
 3222 1aa8 B40E0018 		.word	DOTO1+MAPOFFSET
 3223 1aac FFF77AFC 		BL	DOTQP
 3224 1ab0 03       		.byte	3
 3225 1ab1 206F6B   		.ascii " ok"
 3226              	DOTO1:
 3227 1ab4 FFF73EFC 		BL	CR
 3228 1ab8 52F804FB 		_UNNEST
 3229              	
 3230              	//    ?STACK	( -- )
 3231              	// 	Abort if the data stack underflows.
 3232              	
 3233 1abc 880E0018 		.word	_DOTOK+MAPOFFSET
 3234 1ac0 06       	_QSTAC:	.byte  6
 3235 1ac1 3F535441 		.ascii "?STACK"
 3235      434B
ARM GAS  stm32eforth.s 			page 61


 3236 1ac7 00       		.p2align 2 	
 3237              	QSTAC:
 3238 1ac8 42F804ED 		_NEST
 3239 1acc FFF764F9 		BL	DEPTH
 3240 1ad0 FEF7FEFD 		BL	ZLESS	// check only for underflow
 3241 1ad4 FFF77EFF 		BL	ABORQ
 3242 1ad8 0A       		.byte	10
 3243 1ad9 20756E64 		.ascii " underflow"
 3243      6572666C 
 3243      6F77
 3244 1ae3 00       		.p2align 2 	
 3245 1ae4 52F804FB 		_UNNEST
 3246              	
 3247              	//    EVAL	( -- )
 3248              	// 	Interpret the input stream.
 3249              	
 3250 1ae8 C00E0018 		.word	_QSTAC+MAPOFFSET
 3251 1aec 04       	_EVAL:	.byte  4
 3252 1aed 4556414C 		.ascii "EVAL"
 3253 1af1 0000BF   		.p2align 2 	
 3254              	EVAL:
 3255 1af4 42F804ED 		_NEST
 3256              	EVAL1:
 3257 1af8 FFF7D8FD 	    BL	TOKEN
 3258 1afc FEF7CEFD 		BL	DUPP
 3259 1b00 FEF798FD 		BL	CAT	// ?input stream empty
 3260 1b04 FEF760FD 		BL	QBRAN
 3261 1b08 1C0F0018 		.word	EVAL2+MAPOFFSET
 3262 1b0c FEF7F2FF 		BL	TEVAL
 3263 1b10 FFF78CF9 		BL	ATEXE
 3264 1b14 FFF7D8FF 		BL	QSTAC	// evaluate input, check stack
 3265 1b18 FFF7EEBF 		B.W	EVAL1
 3266              	EVAL2:
 3267 1b1c FEF7B6FD 		BL	DROP
 3268 1b20 FFF7B4FF 		BL	DOTOK
 3269 1b24 52F804FB 		_UNNEST	// prompt
 3270              	
 3271              	//    PRESET	( -- )
 3272              	// 	Reset data stack pointer and the terminal input buffer.
 3273              	
 3274 1b28 EC0E0018 		.word	_EVAL+MAPOFFSET
 3275 1b2c 06       	_PRESE:	.byte  6
 3276 1b2d 50524553 		.ascii "PRESET"
 3276      4554
 3277 1b33 00       		.p2align 2 	
 3278              	PRESE:
 3279              	//	_NEST
 3280 1b34 44F68061 		MOVW	R1,#SPP&0xffff		//  init SP
 3281 1b38 C2F20001 	 	MOVT	R1,#SPP>>16
 3282 1b3c 85EA0505 		EOR	R5,R5,R5			//  init TOS=0
 3283              	//	_UNNEST
 3284 1b40 7047     		_NEXT
 3285              	
 3286              	//    QUIT	( -- )
 3287              	// 	Reset return stack pointer and start text interpreter.
 3288              	
 3289 1b42 2C0F0018 		.word	_PRESE+MAPOFFSET
ARM GAS  stm32eforth.s 			page 62


 3290 1b46 04       	_QUIT:	.byte  4
 3291 1b47 51554954 		.ascii "QUIT"
 3292 1b4b 00       		.p2align 2 	
 3293              	QUIT:
 3294 1b4c 42F804ED 		_NEST
 3295 1b50 44F68072 		MOVW	R2,#RPP&0xffff  /* RESET RSTACK */
 3296 1b54 C2F20002 	 	MOVT	R2,#RPP>>16 
 3297              	QUIT1:
 3298 1b58 FFF788FF 		BL	LBRAC			// start interpretation
 3299              	QUIT2:
 3300 1b5c FFF706FF 		BL	QUERY			// get input
 3301 1b60 FFF7C8FF 		BL	EVAL
 3302 1b64 FEF73CFD 		BL	BRAN
 3303 1b68 5C0F0018 		.word	QUIT2+MAPOFFSET	// continue till error
 3304              	
 3305              	/***************************
 3306              	//  Flash memory interface
 3307              	***************************/
 3308              	// UNLOCK ( T|F -- )
 3309              	// lock or unlock FLASH write 
 3310              	
 3311 1b6c 460F0018 		.word _QUIT+MAPOFFSET  
 3312 1b70 06       	_UNLOCK: .byte 6
 3313 1b71 554E4C4F 		.ascii "UNLOCK"
 3313      434B
 3314 1b77 00       		.p2align 2  
 3315              	UNLOCK:	//  unlock flash memory	
 3316 1b78 42F804ED 		_NEST 
 3317 1b7c FEF724FD 		BL QBRAN
 3318 1b80 A00F0018 		.word LOCK+MAPOFFSET
 3319 1b84 CF48     		ldr	r0, flash_regs 
 3320 1b86 4FF03404 		mov r4,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 3321 1b8a C460     		str r4,[r0,#FLASH_SR]
 3322 1b8c 0469     		ldr r4,[r0,#FLASH_CR]
 3323 1b8e 14F0800F 		tst r4,#(1<<7)
 3324 1b92 03D0     		beq 1f 
 3325 1b94 CC4C     		ldr	r4, flash_regs+4 // key1
 3326 1b96 4460     		str	r4, [r0, #FLASH_KEYR]
 3327 1b98 CC4C     		ldr	r4, flash_regs+8 // key2 
 3328 1b9a 4460     		str	r4, [r0, #FLASH_KEYR]
 3329              		/* unlock option registers */
 3330              	/*
 3331              		ldr	r4, flash_regs+4 
 3332              		str	r4, [r0, #FLASH_OPTKEYR]
 3333              		ldr	r4, flash_regs+8
 3334              		str	r4, [r0, #FLASH_OPTKEYR]
 3335              	*/ 
 3336              	1:
 3337 1b9c 52F804FB 		_UNNEST
 3338              	 // lock flash memory
 3339              	LOCK: 
 3340 1ba0 C848     		ldr r0,flash_regs  
 3341              	//	ldr r4,[r0,#FLASH_CR]
 3342 1ba2 4FF08004 		mov r4,#(1<<7)
 3343 1ba6 0461     		str r4,[r0,#FLASH_CR]
 3344 1ba8 52F804FB 		_UNNEST  
 3345              	
ARM GAS  stm32eforth.s 			page 63


 3346              	WAIT_BSY:
 3347 1bac C548     		ldr	r0,flash_regs
 3348              	WAIT1:
 3349 1bae C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 3350 1bb0 14F00104 		ands	r4, #0x1	//  BSY
 3351 1bb4 FBD1     		bne	WAIT1
 3352 1bb6 7047     		_NEXT
 3353              	
 3354              	//    ERASE_PAGE	   ( adr -- )
 3355              	// 	  Erase one page of flash memory.
 3356              	//    stm32f103 page size is 1024 bytes 
 3357              	//    adr is any address inside page to erase 
 3358              	
 3359 1bb8 700F0018 		.word	_UNLOCK+MAPOFFSET
 3360 1bbc 0A       	_EPAGE:	.byte  10
 3361 1bbd 45524153 		.ascii "ERASE_PAGE"
 3361      455F5041 
 3361      4745
 3362 1bc7 00       		.p2align 2 	
 3363              	
 3364              	EPAGE: 	//  page --
 3365 1bc8 42F804ED 		_NEST
 3366              	
 3367 1bcc FFF7EEFF 		bl	WAIT_BSY
 3368 1bd0 FEF7D7FC 		_DOLIT 
 3369 1bd4 01000000 		.word 1 
 3370 1bd8 FFF7CEFF 		bl  UNLOCK 
 3371 1bdc B948     		ldr r0,flash_regs 	 
 3372 1bde 4FF00204 		mov r4,#2 // set PER bit 
 3373 1be2 0461     		str r4,[r0,#FLASH_CR]
 3374 1be4 4561     		str r5,[r0,#FLASH_AR] // page to erase address 
 3375 1be6 0469     		ldr	r4,[r0, #FLASH_CR]	
 3376 1be8 44F04004 		orr	R4,#0x40	//  set STRT bit   
 3377 1bec 0461     		str	r4,[r0, #FLASH_CR]	//  start erasing
 3378 1bee FFF7DDFF 	 	bl	WAIT_BSY // wait until done
 3379 1bf2 FEF7C6FC 		_DOLIT 
 3380 1bf6 00000000 		.word 0 
 3381 1bfa FFF7BDFF 		bl	UNLOCK  // lock flash write 
 3382 1bfe C568     		ldr r5,[r0,#FLASH_SR] // check for errors 
 3383 1c00 05F01405 		and r5,r5,#(5<<2)
 3384 1c04 FFF7E6FE 		bl ABORQ 
 3385 1c08 0D       		.byte 13
 3386 1c09 20657261 		.ascii " erase error!"
 3386      73652065 
 3386      72726F72 
 3386      21
 3387 1c16 00BF     		.p2align 2
 3388 1c18 52F804FB 		_UNNEST
 3389              	
 3390              	// store 16 bit word
 3391              	// expect flash unlocked  
 3392              	HWORD_WRITE: // ( hword address -- )
 3393 1c1c 42F804ED 		_NEST
 3394 1c20 0469     		ldr	r4, [r0, #FLASH_CR]	//  FLASH_CR
 3395              	//	bic r4,#(1<<9)|(1<<5)|(1<<4)|(1<<2)|(1<<1) //  clear OPTWRE|OPTER|OPTPG|MER|PER
 3396 1c22 4FF00104 		mov r4,#1 // set PG 
 3397 1c26 0461     		str r4,[r0,#FLASH_CR]
ARM GAS  stm32eforth.s 			page 64


 3398 1c28 2E46     		mov r6,r5 
 3399 1c2a 51F8045B 		_POP 
 3400 1c2e 3580     		strh r5,[r6] 
 3401 1c30 FFF7BCFF 		bl WAIT_BSY 
 3402 1c34 C568     		ldr r5,[r0,#FLASH_SR]
 3403 1c36 05F01405 		and r5,r5,#(5<<2) 
 3404 1c3a FEF7C5FC 		bl QBRAN
 3405 1c3e 54100018 		.word 1f+MAPOFFSET 
 3406 1c42 FFF7C7FE 		bl ABORQ
 3407 1c46 0D       		.byte 13
 3408 1c47 20777269 		.ascii " write error!"
 3408      74652065 
 3408      72726F72 
 3408      21
 3409              		.p2align 2
 3410              	1:	 
 3411 1c54 52F804FB 		_UNNEST 
 3412              	
 3413              	
 3414              	//    I!	   ( data address -- )
 3415              	// 	   Write one word into flash memory
 3416              	//	   address must even 
 3417              	
 3418 1c58 BC0F0018 		.word	_EPAGE+MAPOFFSET
 3419 1c5c 02       	_ISTOR:	.byte  2
 3420 1c5d 4921     		.ascii "I!"
 3421 1c5f 00       		.p2align 2 	
 3422              	ISTOR:	//  data address --
 3423 1c60 42F804ED 		_NEST
 3424 1c64 FFF7A2FF 		bl	WAIT_BSY
 3425 1c68 FEF78BFC 		_DOLIT 
 3426 1c6c 01000000 		.word 1 
 3427 1c70 FFF782FF 		bl  UNLOCK 
 3428 1c74 FEF71CFE 		BL DDUP 
 3429 1c78 FEF7F4FC 		BL TOR 
 3430 1c7c FEF7F2FC 		BL TOR 
 3431 1c80 FFF7CCFF 		BL HWORD_WRITE
 3432 1c84 FEF7DCFC 		BL RFROM 
 3433 1c88 4FEA3545 		ror r5,r5,#16
 3434 1c8c FEF7D8FC 		BL RFROM 
 3435 1c90 05F10205 		add r5,r5,#2 
 3436 1c94 FFF7C2FF 		BL HWORD_WRITE 
 3437 1c98 FEF773FC 		_DOLIT 
 3438 1c9c 00000000 		.word 0
 3439 1ca0 FFF76AFF 		bl UNLOCK 
 3440 1ca4 52F804FB 		_UNNEST
 3441              	
 3442              	// IMG? ( -- T|F )
 3443              	// check if an image has been saved 
 3444 1ca8 5C100018 		.word _ISTOR+MAPOFFSET 
 3445 1cac 04       	_IMGQ: .byte 4
 3446 1cad 494D473F 		.ascii "IMG?"
 3447 1cb1 0000BF   		.p2align 2
 3448              	IMGQ:
 3449 1cb4 42F804ED 		_NEST 
 3450 1cb8 FEF776FF 		BL USER_IMG 
 3451 1cbc FEF7AAFC 		BL AT 
ARM GAS  stm32eforth.s 			page 65


 3452 1cc0 FEF7A8FC 		BL AT 
 3453 1cc4 FEF75DFC 		_DOLIT 
 3454 1cc8 FFFFFFFF 		.word -1
 3455 1ccc FEF71EFD 		BL XORR  
 3456 1cd0 52F804FB 		_UNNEST
 3457              	
 3458              	// LOAD_IMG ( -- )
 3459              	// copy save image in RAM 
 3460 1cd4 AC100018 		.word _IMGQ+MAPOFFSET
 3461 1cd8 08       	_LOAD_IMG: .byte 8 
 3462 1cd9 4C4F4144 		.ascii "LOAD_IMG" 
 3462      5F494D47 
 3463 1ce1 0000BF   		.p2align 2 
 3464              	LOAD_IMG:
 3465 1ce4 42F804ED 		_NEST 
 3466 1ce8 FEF75EFF 		BL USER_IMG 
 3467 1cec FEF792FC 		BL AT       // image address in flash 
 3468 1cf0 FEF7D4FC 		BL DUPP
 3469 1cf4 FEF7B6FC 		BL TOR  
 3470              	/* copy system variables to RAM */
 3471 1cf8 41F8045D 		_PUSH 
 3472 1cfc 03F11005 		ADD R5,R3,#BOOT_OFS // copy start at boot variable 
 3473 1d00 41F8045D 		_PUSH 
 3474 1d04 4FF0F005 		MOV R5,#(USER_IMG_OFS-BOOT_OFS)*4 
 3475 1d08 FEF7C8FC 		BL DUPP 
 3476 1d0c FEF7AAFC 		BL TOR 
 3477 1d10 FFF7B0F8 		BL MOVE 
 3478              	/* copy user definitions */
 3479 1d14 FEF794FC 		BL RFROM 
 3480 1d18 FEF792FC 		BL RFROM 
 3481 1d1c FEF722FD 		BL PLUS // source address  
 3482 1d20 FEF72AFF 		BL USER_BEGIN 
 3483 1d24 FEF776FC 		BL AT   // destination address 
 3484 1d28 FFF75CF8 		BL HERE  
 3485 1d2c FEF722FD 		BL SUBB  // byte count 
 3486 1d30 FFF7A0F8 		BL MOVE 
 3487 1d34 52F804FB 		_UNNEST 
 3488              	
 3489              	// ERASE_MPG ( u1 u2 -- )
 3490              	// erase many pages 
 3491              	// u1 first page number 
 3492              	// u2 how many pages  
 3493 1d38 D8100018 		.word _LOAD_IMG+MAPOFFSET
 3494 1d3c 09       	_ERASE_MPG: .byte 9 
 3495 1d3d 45524153 		.ascii "ERASE_MPG"	
 3495      455F4D50 
 3495      47
 3496 1d46 00BF     		.p2align 2 
 3497              	ERASE_MPG:
 3498 1d48 42F804ED 		_NEST 
 3499 1d4c FEF78AFC 		BL TOR 
 3500 1d50 4FEA8525 		lsl r5,#10
 3501 1d54 FEF715FC 		_DOLIT 
 3502 1d58 00000008 		.word FLASH_ADR 
 3503 1d5c FEF702FD 		BL PLUS 
 3504 1d60 FEF73EFC 		BL BRAN 
 3505 1d64 7C110018 		.word 2f+MAPOFFSET 
ARM GAS  stm32eforth.s 			page 66


 3506              	1:
 3507 1d68 FEF798FC 		BL DUPP 
 3508 1d6c FEF77AFC 		BL TOR 
 3509 1d70 FFF72AFF 		BL EPAGE 
 3510 1d74 FEF764FC 		BL RFROM
 3511 1d78 05F58065 		add r5,#PAGE_SIZE 
 3512              	2:
 3513 1d7c FEF715FC 		BL DONXT
 3514 1d80 68110018 		.word 1b+MAPOFFSET 
 3515 1d84 51F8045B 		_POP 
 3516 1d88 52F804FB 		_UNNEST 
 3517              	
 3518              	// FLSH_WR ( src dest u -- dest+u )
 3519              	// write u words to flash memory 
 3520 1d8c 3C110018 		.word _ERASE_MPG+MAPOFFSET
 3521 1d90 07       	_FLSH_WR: .byte 7 
 3522 1d91 464C5348 		.ascii "FLSH_WR"
 3522      5F5752
 3523              		.p2align  
 3524              	FLSH_WR: 
 3525 1d98 42F804ED 		_NEST 
 3526 1d9c FEF762FC 		BL TOR
 3527 1da0 FEF71EFC 		BL BRAN 
 3528 1da4 C8110018 		.word 3f+MAPOFFSET  
 3529              	/* write system variables to FLASH */
 3530 1da8 FEF75CFC 	2:  BL TOR  // destination address 
 3531 1dac FEF776FC 		BL DUPP 
 3532 1db0 FEF730FC 		BL AT   // get data 
 3533 1db4 FEF74EFC 		BL RAT  // get destination address 
 3534 1db8 FFF752FF 		BL ISTOR
 3535 1dbc FEF720FD 		BL CELLP  // increment source address 
 3536 1dc0 FEF73EFC 		BL RFROM 
 3537 1dc4 FEF71CFD 		BL CELLP  // increment dest address 
 3538 1dc8 FEF7EFFB 	3:	BL DONXT 
 3539 1dcc A8110018 		.word 2b+MAPOFFSET
 3540 1dd0 FEF748FC 		BL TOR 
 3541 1dd4 FEF75AFC 		BL DROP 
 3542 1dd8 FEF732FC 		BL RFROM 
 3543 1ddc 52F804FB 		_UNNEST 
 3544              	
 3545              	// PAGE ( a -- u )
 3546              	// convert address to page number 
 3547 1de0 90110018 		.word _FLSH_WR+MAPOFFSET
 3548 1de4 04       	_PAGE: .byte 4 
 3549 1de5 50414745 		.ascii "PAGE" 
 3550 1de9 0000BF   		.p2align 2 
 3551              	PAGE: 
 3552 1dec 4FF00004 		mov r4,#0
 3553 1df0 C0F60004 		movt r4,#0x800
 3554 1df4 A5EB0405 		sub r5,r4 
 3555 1df8 4FEA9525 		lsr r5,#10 
 3556 1dfc 7047     		_NEXT  
 3557              	
 3558              	// SAVE_IMG ( -- )
 3559              	// copy in flash RAM system variables and user defintitions.
 3560 1dfe E4110018 		.word _PAGE+MAPOFFSET	
 3561 1e02 08       	_SAVE_IMG: .byte 8 
ARM GAS  stm32eforth.s 			page 67


 3562 1e03 53415645 		.ascii "SAVE_IMG"
 3562      5F494D47 
 3563 1e0b 00       		.p2align 2
 3564              	SAVE_IMG:
 3565 1e0c 42F804ED 		_NEST 
 3566 1e10 FEF7E8FF 		BL HERE 
 3567 1e14 FEF7B0FE 		BL USER_BEGIN 
 3568 1e18 FEF7FCFB 		BL AT 
 3569 1e1c FEF786FD 		BL EQUAL 
 3570 1e20 FEF7D2FB 		BL QBRAN
 3571 1e24 2C120018 		.word 1f+MAPOFFSET 
 3572 1e28 52F804FB 		_UNNEST  // nothing to save 
 3573 1e2c FFF742FF 	1:	BL IMGQ 
 3574 1e30 FEF7CAFB 		BL QBRAN 
 3575 1e34 68120018 		.word 2f+MAPOFFSET
 3576              	/* delete saved image */
 3577 1e38 FEF7B6FE 		BL USER_IMG 
 3578 1e3c FEF7EAFB 		BL AT 
 3579 1e40 FFF7D4FF 		BL PAGE 
 3580 1e44 FEF79DFB 		_DOLIT 
 3581 1e48 004E0020 		.word DEND  
 3582 1e4c FEF794FE 		BL USER_BEGIN 
 3583 1e50 FEF790FC 		BL SUBB 
 3584 1e54 FEF795FB 		_DOLIT 
 3585 1e58 00040000 		.word 1024 
 3586 1e5c FEF73AFF 		BL SLASH 
 3587 1e60 FEF7AEFC 		BL ONEP   // # pages to delete 
 3588 1e64 FFF770FF 		BL ERASE_MPG 
 3589              	/* save system variables */
 3590 1e68 41F8045D 	2:	_PUSH 
 3591 1e6c 03F11005 		ADD R5,R3,#BOOT_OFS // copy start at boot variable 
 3592 1e70 FEF79AFE 		BL USER_IMG 
 3593 1e74 FEF7CEFB 		BL AT       // image address in flash 
 3594 1e78 41F8045D 		_PUSH 
 3595 1e7c 4FF03C05 		MOV R5,#(USER_IMG_OFS-BOOT_OFS) 
 3596 1e80 FEF7E0FC 		BL CELLSL  // word count 
 3597 1e84 FFF788FF 		BL FLSH_WR 
 3598              	/* write user definitions */
 3599 1e88 FEF7ECFB 		BL TOR    // destination address 
 3600 1e8c FEF7AAFF 		BL HERE 
 3601 1e90 FEF772FE 		BL USER_BEGIN 
 3602 1e94 FEF7BEFB 		BL AT 
 3603 1e98 FEF76CFC 		BL SUBB 
 3604 1e9c FEF7D2FC 		BL CELLSL
 3605 1ea0 FEF7E0FB 		BL TOR     // word count  
 3606 1ea4 FEF768FE 		BL USER_BEGIN 
 3607 1ea8 FEF7B4FB 		BL AT    // source address 
 3608 1eac FEF7C8FB 		BL RFROM // count 
 3609 1eb0 FEF7C6FB 		BL RFROM // dest 
 3610 1eb4 FEF7FAFB 		BL SWAP 
 3611 1eb8 FFF76EFF 		BL FLSH_WR  
 3612 1ebc FEF7E6FB 		BL DROP 
 3613 1ec0 52F804FB 		_UNNEST 
 3614              	
 3615              	flash_regs:
 3616 1ec4 00200240 		.word FLASH_BASE_ADR // 0 
 3617 1ec8 23016745 		.word FLASH_KEY1   // 4 
ARM GAS  stm32eforth.s 			page 68


 3618 1ecc AB89EFCD 		.word FLASH_KEY2   // 8
 3619              	
 3620              	// **************************************************************************
 3621              	//  The compiler
 3622              	
 3623              	//    '	   ( -- ca )
 3624              	// 	Search context vocabularies for the next word in input stream.
 3625              	
 3626 1ed0 02120018 		.word	_SAVE_IMG+MAPOFFSET
 3627 1ed4 01       	_TICK:	.byte  1
 3628 1ed5 27       		.ascii "'"
 3629 1ed6 00BF     		.p2align 2 	
 3630              	TICK:
 3631 1ed8 42F804ED 		_NEST
 3632 1edc FFF7E6FB 		BL	TOKEN
 3633 1ee0 FFF79EFC 		BL	NAMEQ	// ?defined
 3634 1ee4 FEF770FB 		BL	QBRAN
 3635 1ee8 F0120018 		.word	TICK1+MAPOFFSET
 3636 1eec 52F804FB 		_UNNEST	// yes, push code address
 3637 1ef0 FFF75CBD 	TICK1:	B.W	ABORT	// no, error
 3638              	
 3639              	//    ALLOT	( n -- )
 3640              	// 	Allocate n bytes to the ram area.
 3641              	
 3642 1ef4 D4120018 		.word	_TICK+MAPOFFSET
 3643 1ef8 05       	_ALLOT:	.byte  5
 3644 1ef9 414C4C4F 		.ascii "ALLOT"
 3644      54
 3645 1efe 00BF     		.p2align 2 	
 3646              	ALLOT:
 3647 1f00 42F804ED 		_NEST
 3648 1f04 FEF716FE 		BL	CPP
 3649 1f08 FEF754FD 		BL	PSTOR
 3650 1f0c 52F804FB 		_UNNEST			// adjust code pointer
 3651              	
 3652              	//    ,	   ( w -- )
 3653              	// 	Compile an integer into the code dictionary.
 3654              	
 3655 1f10 F8120018 		.word	_ALLOT+MAPOFFSET
 3656 1f14 012C     	_COMMA:	.byte  1,','
 3657 1f16 00BF     		.p2align 2 	
 3658              	COMMA:
 3659 1f18 42F804ED 		_NEST
 3660 1f1c FEF762FF 		BL	HERE
 3661 1f20 FEF7BCFB 		BL	DUPP
 3662 1f24 FEF76CFC 		BL	CELLP	// cell boundary
 3663 1f28 FEF704FE 		BL	CPP
 3664 1f2c FEF768FB 		BL	STORE
 3665 1f30 FEF766FB 		BL	STORE
 3666 1f34 52F804FB 		_UNNEST	// adjust code pointer, compile
 3667              		.p2align 2 
 3668              	//    [COMPILE]   ( -- //  string> )
 3669              	// 	Compile the next immediate word into code dictionary.
 3670              	
 3671 1f38 14130018 		.word	_COMMA+MAPOFFSET
 3672 1f3c 89       	_BCOMP:	.byte  IMEDD+9
 3673 1f3d 5B434F4D 		.ascii "[COMPILE]"
ARM GAS  stm32eforth.s 			page 69


 3673      50494C45 
 3673      5D
 3674 1f46 00BF     		.p2align 2 	
 3675              	BCOMP:
 3676 1f48 42F804ED 		_NEST
 3677 1f4c FFF7C4FF 		BL	TICK
 3678 1f50 FFF7E2FF 		BL	COMMA
 3679 1f54 52F804FB 		_UNNEST
 3680              	
 3681              	//    COMPILE	( -- )
 3682              	// 	Compile the next address in colon list to code dictionary.
 3683              	
 3684 1f58 3C130018 		.word	_BCOMP+MAPOFFSET
 3685 1f5c 47       	_COMPI:	.byte  COMPO+7
 3686 1f5d 434F4D50 		.ascii "COMPILE"
 3686      494C45
 3687              		.p2align 2 	
 3688              	COMPI:
 3689 1f64 42F804ED 		_NEST
 3690 1f68 FEF76AFB 		BL	RFROM
 3691 1f6c 25F00105 		BIC	R5,R5,#1
 3692 1f70 FEF794FB 		BL	DUPP
 3693 1f74 FEF74EFB 		BL	AT
 3694 1f78 00F0DAF9 		BL	CALLC			// compile BL instruction
 3695 1f7c FEF740FC 		BL	CELLP
 3696 1f80 45F00105 		ORR	R5,R5,#1
 3697 1f84 FEF76EFB 		BL	TOR
 3698 1f88 52F804FB 		_UNNEST			// adjust return address
 3699              	
 3700              	//    LITERAL	( w -- )
 3701              	// 	Compile tos to code dictionary as an integer literal.
 3702              	
 3703 1f8c 5C130018 		.word	_COMPI+MAPOFFSET
 3704 1f90 87       	_LITER:	.byte  IMEDD+7
 3705 1f91 4C495445 		.ascii "LITERAL"
 3705      52414C
 3706              		.p2align 2 	
 3707              	LITER:
 3708 1f98 42F804ED 		_NEST
 3709 1f9c FFF7E2FF 		BL	COMPI
 3710 1fa0 82F9FF17 		.word	DOLIT+MAPOFFSET
 3711 1fa4 FFF7B8FF 		BL	COMMA
 3712 1fa8 52F804FB 		_UNNEST
 3713              	
 3714              	//    $,"	( -- )
 3715              	// 	Compile a literal string up to next " .
 3716              	
 3717              	// 	.word	_LITER+MAPOFFSET
 3718              	// _STRCQ	.byte  3
 3719              	// 	.ascii "$$,"""
 3720              	// 	.p2align 2 	
 3721              	STRCQ:
 3722 1fac 42F804ED 		_NEST
 3723 1fb0 FEF7E7FA 		_DOLIT
 3724 1fb4 FCFFFFFF 		.word	-4
 3725 1fb8 FEF7BCFD 		BL	CPP
 3726 1fbc FEF7FAFC 		BL	PSTOR
ARM GAS  stm32eforth.s 			page 70


 3727 1fc0 FEF7DFFA 		_DOLIT
 3728 1fc4 22000000 		.word	'\"'
 3729 1fc8 FFF75EFB 		BL	WORDD			// move word to code dictionary
 3730 1fcc FEF716FD 		BL	COUNT
 3731 1fd0 FEF7C8FB 		BL	PLUS
 3732 1fd4 FEF7AEFE 		BL	ALGND			// calculate aligned end of string
 3733 1fd8 FEF7ACFD 		BL	CPP
 3734 1fdc FEF710FB 		BL	STORE
 3735 1fe0 52F804FB 		_UNNEST 			// adjust the code pointer
 3736              	
 3737              	// **************************************************************************
 3738              	//  Structures
 3739              	
 3740              	//    FOR	 ( -- a )
 3741              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3742              	
 3743 1fe4 90130018 		.word	_LITER+MAPOFFSET
 3744 1fe8 C3       	_FOR:	.byte  COMPO+IMEDD+3
 3745 1fe9 464F52   		.ascii "FOR"
 3746              		.p2align 2 	
 3747              	FOR:
 3748 1fec 42F804ED 		_NEST
 3749 1ff0 FFF7B8FF 		BL	COMPI
 3750 1ff4 64FAFF17 		.word	TOR+MAPOFFSET
 3751 1ff8 FEF7F4FE 		BL	HERE
 3752 1ffc 52F804FB 		_UNNEST
 3753              	
 3754              	//    BEGIN	( -- a )
 3755              	// 	Start an infinite or indefinite loop structure.
 3756              	
 3757 2000 E8130018 		.word	_FOR+MAPOFFSET
 3758 2004 C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 3759 2005 42454749 		.ascii "BEGIN"
 3759      4E
 3760 200a 00BF     		.p2align 2 	
 3761              	BEGIN:
 3762 200c 42F804ED 		_NEST
 3763 2010 FEF7E8FE 		BL	HERE
 3764 2014 52F804FB 		_UNNEST
 3765              		.p2align 2 
 3766              	//    NEXT	( a -- )
 3767              	// 	Terminate a FOR-NEXT loop structure.
 3768              	
 3769 2018 04140018 		.word	_BEGIN+MAPOFFSET
 3770 201c C4       	_NEXT:	.byte  COMPO+IMEDD+4
 3771 201d 4E455854 		.ascii "NEXT"
 3772 2021 0000BF   		.p2align 2 	
 3773              	NEXT:
 3774 2024 42F804ED 		_NEST
 3775 2028 FFF79CFF 		BL	COMPI
 3776 202c AAF9FF17 		.word	DONXT+MAPOFFSET
 3777 2030 FFF772FF 		BL	COMMA
 3778 2034 52F804FB 		_UNNEST
 3779              	
 3780              	//    UNTIL	( a -- )
 3781              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3782              	
ARM GAS  stm32eforth.s 			page 71


 3783 2038 1C140018 		.word	_NEXT+MAPOFFSET
 3784 203c C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3785 203d 554E5449 		.ascii "UNTIL"
 3785      4C
 3786 2042 00BF     		.p2align 2 	
 3787              	UNTIL:
 3788 2044 42F804ED 		_NEST
 3789 2048 FFF78CFF 		BL	COMPI
 3790 204c C8F9FF17 		.word	QBRAN+MAPOFFSET
 3791 2050 FFF762FF 		BL	COMMA
 3792 2054 52F804FB 		_UNNEST
 3793              	
 3794              	//    AGAIN	( a -- )
 3795              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3796              	
 3797 2058 3C140018 		.word	_UNTIL+MAPOFFSET
 3798 205c C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3799 205d 41474149 		.ascii "AGAIN"
 3799      4E
 3800 2062 00BF     		.p2align 2 	
 3801              	AGAIN:
 3802 2064 42F804ED 		_NEST
 3803 2068 FFF77CFF 		BL	COMPI
 3804 206c E0F9FF17 		.word	BRAN+MAPOFFSET
 3805 2070 FFF752FF 		BL	COMMA
 3806 2074 52F804FB 		_UNNEST
 3807              	
 3808              	//    IF	  ( -- A )
 3809              	// 	Begin a conditional branch structure.
 3810              	
 3811 2078 5C140018 		.word	_AGAIN+MAPOFFSET
 3812 207c C2       	_IFF:	.byte  COMPO+IMEDD+2
 3813 207d 4946     		.ascii "IF"
 3814 207f 00       		.p2align 2 	
 3815              	IFF:
 3816 2080 42F804ED 		_NEST
 3817 2084 FFF76EFF 		BL	COMPI
 3818 2088 C8F9FF17 		.word	QBRAN+MAPOFFSET
 3819 208c FEF7AAFE 		BL	HERE
 3820 2090 FEF777FA 		_DOLIT
 3821 2094 04000000 		.word	4
 3822 2098 FEF74CFD 		BL	CPP
 3823 209c FEF78AFC 		BL	PSTOR
 3824 20a0 52F804FB 		_UNNEST
 3825              	
 3826              	//    AHEAD	( -- A )
 3827              	// 	Compile a forward branch instruction.
 3828              	
 3829 20a4 7C140018 		.word	_IFF+MAPOFFSET
 3830 20a8 C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 3831 20a9 41484541 		.ascii "AHEAD"
 3831      44
 3832 20ae 00BF     		.p2align 2 	
 3833              	AHEAD:
 3834 20b0 42F804ED 		_NEST
 3835 20b4 FFF756FF 		BL	COMPI
 3836 20b8 E0F9FF17 		.word	BRAN+MAPOFFSET
ARM GAS  stm32eforth.s 			page 72


 3837 20bc FEF792FE 		BL	HERE
 3838 20c0 FEF75FFA 		_DOLIT
 3839 20c4 04000000 		.word	4
 3840 20c8 FEF734FD 		BL	CPP
 3841 20cc FEF772FC 		BL	PSTOR
 3842 20d0 52F804FB 		_UNNEST
 3843              	
 3844              	//    REPEAT	( A a -- )
 3845              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3846              	
 3847 20d4 A8140018 		.word	_AHEAD+MAPOFFSET
 3848 20d8 C6       	_REPEA:	.byte  COMPO+IMEDD+6
 3849 20d9 52455045 		.ascii "REPEAT"
 3849      4154
 3850 20df 00       		.p2align 2 	
 3851              	REPEA:
 3852 20e0 42F804ED 		_NEST
 3853 20e4 FFF7BEFF 		BL	AGAIN
 3854 20e8 FEF77CFE 		BL	HERE
 3855 20ec FEF7DEFA 		BL	SWAP
 3856 20f0 FEF786FA 		BL	STORE
 3857 20f4 52F804FB 		_UNNEST
 3858              	
 3859              	//    THEN	( A -- )
 3860              	// 	Terminate a conditional branch structure.
 3861              	
 3862 20f8 D8140018 		.word	_REPEA+MAPOFFSET
 3863 20fc C4       	_THENN:	.byte  COMPO+IMEDD+4
 3864 20fd 5448454E 		.ascii "THEN"
 3865 2101 0000BF   		.p2align 2 	
 3866              	THENN:
 3867 2104 42F804ED 		_NEST
 3868 2108 FEF76CFE 		BL	HERE
 3869 210c FEF7CEFA 		BL	SWAP
 3870 2110 FEF776FA 		BL	STORE
 3871 2114 52F804FB 		_UNNEST
 3872              	
 3873              	//    AFT	 ( a -- a A )
 3874              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3875              	
 3876 2118 FC140018 		.word	_THENN+MAPOFFSET
 3877 211c C3       	_AFT:	.byte  COMPO+IMEDD+3
 3878 211d 414654   		.ascii "AFT"
 3879              		.p2align 2 	
 3880              	AFT:
 3881 2120 42F804ED 		_NEST
 3882 2124 FEF7B2FA 		BL	DROP
 3883 2128 FFF7C2FF 		BL	AHEAD
 3884 212c FFF76EFF 		BL	BEGIN
 3885 2130 FEF7BCFA 		BL	SWAP
 3886 2134 52F804FB 		_UNNEST
 3887              	
 3888              	//    ELSE	( A -- A )
 3889              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3890              	
 3891 2138 1C150018 		.word	_AFT+MAPOFFSET
 3892 213c C4       	_ELSEE:	.byte  COMPO+IMEDD+4
ARM GAS  stm32eforth.s 			page 73


 3893 213d 454C5345 		.ascii "ELSE"
 3894 2141 0000BF   		.p2align 2 	
 3895              	ELSEE:
 3896 2144 42F804ED 		_NEST
 3897 2148 FFF7B2FF 		BL	AHEAD
 3898 214c FEF7AEFA 		BL	SWAP
 3899 2150 FFF7D8FF 		BL	THENN
 3900 2154 52F804FB 		_UNNEST
 3901              	
 3902              	//    WHILE	( a -- A a )
 3903              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3904              	
 3905 2158 3C150018 		.word	_ELSEE+MAPOFFSET
 3906 215c C5       	_WHILE:	.byte  COMPO+IMEDD+5
 3907 215d 5748494C 		.ascii "WHILE"
 3907      45
 3908 2162 00BF     		.p2align 2 	
 3909              	WHILE:
 3910 2164 42F804ED 		_NEST
 3911 2168 FFF78AFF 		BL	IFF
 3912 216c FEF79EFA 		BL	SWAP
 3913 2170 52F804FB 		_UNNEST
 3914              	
 3915              	//    ABORT"	( -- //  string> )
 3916              	// 	Conditional abort with an error message.
 3917              	
 3918 2174 5C150018 		.word	_WHILE+MAPOFFSET
 3919 2178 86       	_ABRTQ:	.byte  IMEDD+6
 3920 2179 41424F52 		.ascii "ABORT\""
 3920      5422
 3921 217f 00       		.p2align 2 	
 3922              	ABRTQ:
 3923 2180 42F804ED 		_NEST
 3924 2184 FFF7EEFE 		BL	COMPI
 3925 2188 D40D0018 		.word	ABORQ+MAPOFFSET
 3926 218c FFF70EFF 		BL	STRCQ
 3927 2190 52F804FB 		_UNNEST
 3928              	
 3929              	//    $"	( -- //  string> )
 3930              	// 	Compile an inlineDCB literal.
 3931              	
 3932 2194 78150018 		.word	_ABRTQ+MAPOFFSET
 3933 2198 82       	_STRQ:	.byte  IMEDD+2
 3934 2199 2422     		.byte	'$','"'
 3935 219b 00       		.p2align 2 	
 3936              	STRQ:
 3937 219c 42F804ED 		_NEST
 3938 21a0 FFF7E0FE 		BL	COMPI
 3939 21a4 88070018 		.word	STRQP+MAPOFFSET
 3940 21a8 FFF700FF 		BL	STRCQ
 3941 21ac 52F804FB 		_UNNEST
 3942              	
 3943              	//    ."	( -- //  string> )
 3944              	// 	Compile an inline word  literal to be typed out at run time.
 3945              	
 3946 21b0 98150018 		.word	_STRQ+MAPOFFSET
 3947 21b4 C2       	_DOTQ:	.byte  IMEDD+COMPO+2
ARM GAS  stm32eforth.s 			page 74


 3948 21b5 2E22     		.byte	'.','"'
 3949 21b7 00       		.p2align 2 	
 3950              	DOTQ:
 3951 21b8 42F804ED 		_NEST
 3952 21bc FFF7D2FE 		BL	COMPI
 3953 21c0 A4070018 		.word	DOTQP+MAPOFFSET
 3954 21c4 FFF7F2FE 		BL	STRCQ
 3955 21c8 52F804FB 		_UNNEST
 3956              	
 3957              	// **************************************************************************
 3958              	//  Name compiler
 3959              	
 3960              	//    ?UNIQUE	( a -- a )
 3961              	// 	Display a warning message if the word already exists.
 3962              	
 3963 21cc B4150018 		.word	_DOTQ+MAPOFFSET
 3964 21d0 07       	_UNIQU:	.byte  7
 3965 21d1 3F554E49 		.ascii "?UNIQUE"
 3965      515545
 3966              		.p2align 2 	
 3967              	UNIQU:
 3968 21d8 42F804ED 		_NEST
 3969 21dc FEF75EFA 		BL	DUPP
 3970 21e0 FFF71EFB 		BL	NAMEQ			// ?name exists
 3971 21e4 FEF7F0F9 		BL	QBRAN
 3972 21e8 04160018 		.word	UNIQ1+MAPOFFSET	// redefinitions are OK
 3973 21ec FFF7DAF8 		BL	DOTQP
 3974 21f0 07       		.byte	7
 3975 21f1 20726544 		.ascii " reDef "		// but warn the user
 3975      656620
 3976              		.p2align 2 	
 3977 21f8 FEF762FA 		BL	OVER
 3978 21fc FEF7FEFB 		BL	COUNT
 3979 2200 FFF780F8 		BL	TYPEE			// just in case its not planned
 3980              	UNIQ1:
 3981 2204 FEF742FA 		BL	DROP
 3982 2208 52F804FB 		_UNNEST
 3983              	
 3984              	//    $,n	 ( na -- )
 3985              	// 	Build a new dictionary name using the data at na.
 3986              	
 3987              	// 	.word	_UNIQU+MAPOFFSET
 3988              	// _SNAME	.byte  3
 3989              	// 	.ascii "$$,n"
 3990              	// 	.p2align 2 	
 3991              	SNAME:
 3992 220c 42F804ED 		_NEST
 3993 2210 FEF744FA 		BL	DUPP			//  na na
 3994 2214 FEF70EFA 		BL	CAT			//  ?null input
 3995 2218 FEF7D6F9 		BL	QBRAN
 3996 221c 54160018 		.word	SNAM1+MAPOFFSET
 3997 2220 FFF7DAFF 		BL	UNIQU			//  na
 3998 2224 FEF79AFC 		BL	LAST			//  na last
 3999 2228 FEF7F4F9 		BL	AT			//  na la
 4000 222c FFF774FE 		BL	COMMA			//  na
 4001 2230 FEF734FA 		BL	DUPP			//  na na
 4002 2234 FEF792FC 		BL	LAST			//  na na last
ARM GAS  stm32eforth.s 			page 75


 4003 2238 FEF7E2F9 		BL	STORE			//  na , save na for vocabulary link
 4004 223c FEF7DEFB 		BL	COUNT			//  na+1 count
 4005 2240 FEF790FA 		BL	PLUS			//  na+1+count
 4006 2244 FEF776FD 		BL	ALGND			//  word boundary
 4007 2248 FEF774FC 		BL	CPP
 4008 224c FEF7D8F9 		BL	STORE			//  top of dictionary now
 4009 2250 52F804FB 		_UNNEST
 4010              	SNAM1:
 4011 2254 FFF798F8 		BL	STRQP
 4012 2258 07       		.byte	7
 4013 2259 206E616D 		.ascii " name? "
 4013      653F20
 4014 2260 FFF7A4BB 		B.W	ABORT
 4015              	
 4016              	//    $COMPILE	( a -- )
 4017              	// 	Compile next word to code dictionary as a token or literal.
 4018              	
 4019 2264 D0150018 		.word	_UNIQU+MAPOFFSET
 4020 2268 08       	_SCOMP:	.byte  8
 4021 2269 2424434F 		.ascii "$$COMPILE"
 4021      4D50494C 
 4021      45
 4022 2272 00BF     		.p2align 2 	
 4023              	SCOMP:
 4024 2274 42F804ED 		_NEST
 4025 2278 FFF7D2FA 		BL	NAMEQ
 4026 227c FEF7FAFA 		BL	QDUP	// defined?
 4027 2280 FEF7A2F9 		BL	QBRAN
 4028 2284 B0160018 		.word	SCOM2+MAPOFFSET
 4029 2288 FEF7C4F9 		BL	AT
 4030 228c FEF779F9 		_DOLIT
 4031 2290 80000000 		.word	IMEDD
 4032 2294 FEF726FA 		BL	ANDD	// immediate?
 4033 2298 FEF796F9 		BL	QBRAN
 4034 229c A8160018 		.word	SCOM1+MAPOFFSET
 4035 22a0 FEF77EF9 		BL	EXECU
 4036 22a4 52F804FB 		_UNNEST			// it's immediate, execute
 4037              	SCOM1:
 4038 22a8 00F042F8 		BL	CALLC			// it's not immediate, compile
 4039 22ac 52F804FB 		_UNNEST	
 4040              	SCOM2:
 4041 22b0 FEF748FF 		BL	NUMBQ
 4042 22b4 FEF788F9 		BL	QBRAN
 4043 22b8 C4160018 		.word	SCOM3+MAPOFFSET
 4044 22bc FFF76CFE 		BL	LITER
 4045 22c0 52F804FB 		_UNNEST			// compile number as integer
 4046              	SCOM3:
 4047 22c4 FFF772BB 		B.W	ABORT			// error
 4048              	
 4049              	//    OVERT	( -- )
 4050              	// 	Link a new word into the current vocabulary.
 4051              	
 4052 22c8 68160018 		.word	_SCOMP+MAPOFFSET
 4053 22cc 05       	_OVERT:	.byte  5
 4054 22cd 4F564552 		.ascii "OVERT"
 4054      54
 4055 22d2 00BF     		.p2align 2 	
ARM GAS  stm32eforth.s 			page 76


 4056              	OVERT:
 4057 22d4 42F804ED 		_NEST
 4058 22d8 FEF740FC 		BL	LAST
 4059 22dc FEF79AF9 		BL	AT
 4060 22e0 FEF71EFC 		BL	CNTXT
 4061 22e4 FEF78CF9 		BL	STORE
 4062 22e8 52F804FB 		_UNNEST
 4063              	
 4064              	//    ; 	   ( -- )
 4065              	// 	Terminate a colon definition.
 4066              	
 4067 22ec CC160018 		.word	_OVERT+MAPOFFSET
 4068 22f0 C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 4069 22f1 3B       		.ascii ";"
 4070 22f2 00BF     		.p2align 2 	
 4071              	SEMIS:
 4072 22f4 42F804ED 		_NEST
 4073 22f8 FEF743F9 		_DOLIT
 4074 22fc 52F804FB 		_UNNEST
 4075 2300 FFF70AFE 		BL	COMMA
 4076 2304 FFF7B2FB 		BL	LBRAC
 4077 2308 FFF7E4FF 		BL	OVERT
 4078 230c 52F804FB 		_UNNEST
 4079              	
 4080              	//    ]	   ( -- )
 4081              	// 	Start compiling the words in the input stream.
 4082              	
 4083 2310 F0160018 		.word	_SEMIS+MAPOFFSET
 4084 2314 01       	_RBRAC:	.byte  1
 4085 2315 5D       		.ascii "]"
 4086 2316 00BF     		.p2align 2 	
 4087              	RBRAC:
 4088 2318 42F804ED 		_NEST
 4089 231c FEF731F9 		_DOLIT
 4090 2320 74160018 		.word	SCOMP+MAPOFFSET
 4091 2324 FEF7E6FB 		BL	TEVAL
 4092 2328 FEF76AF9 		BL	STORE
 4093 232c 52F804FB 		_UNNEST
 4094              	
 4095              	//    BL.W	( ca -- )
 4096              	// 	Assemble a branch-link long instruction to ca.
 4097              	// 	BL.W is split into 2 16 bit instructions with 11 bit address fields.
 4098              	
 4099              	// 	.word	_RBRAC+MAPOFFSET
 4100              	// _CALLC	.byte  5
 4101              	// 	.ascii "call,"
 4102              	// 	.p2align 2 	
 4103              	CALLC:
 4104 2330 42F804ED 		_NEST
 4105 2334 25F00105 		BIC	R5,R5,#1		//  clear b0 of address from R>
 4106 2338 FEF754FD 		BL	HERE
 4107 233c FEF71AFA 		BL	SUBB
 4108 2340 A5F10405 		SUB	R5,R5,#4		//  pc offset
 4109 2344 40F2FF70 		MOVW	R0,#0x7FF		//  11 bit mask
 4110 2348 2C46     		MOV	R4,R5
 4111 234a 4FEA1535 		LSR	R5,R5,#12		//  get bits 22-12
 4112 234e 05EA0005 		AND	R5,R5,R0
ARM GAS  stm32eforth.s 			page 77


 4113 2352 4FEAC434 		LSL	R4,R4,#15		//  get bits 11-1
 4114 2356 45EA0405 		ORR	R5,R5,R4
 4115 235a 45F07845 		ORR	R5,R5,#0xF8000000
 4116 235e 45F47045 		ORR	R5,R5,#0xF000
 4117 2362 FFF7D9FD 		BL	COMMA			//  assemble BL.W instruction
 4118 2366 52F804FB 		_UNNEST
 4119              	
 4120              	
 4121              	// 	:	( -- //  string> )
 4122              	// 	Start a new colon definition using next word as its name.
 4123              	
 4124 236a 14170018 		.word	_RBRAC+MAPOFFSET
 4125 236e 01       	_COLON:	.byte  1
 4126 236f 3A       		.ascii ":"
 4127              		.p2align 2 	
 4128              	COLON:
 4129 2370 42F804ED 		_NEST
 4130 2374 FFF79AF9 		BL	TOKEN
 4131 2378 FFF748FF 		BL	SNAME
 4132 237c FEF701F9 		_DOLIT
 4133 2380 42F804ED 		_NEST
 4134 2384 FFF7C8FD 		BL	COMMA
 4135 2388 FFF7C6FF 		BL	RBRAC
 4136 238c 52F804FB 		_UNNEST
 4137              	
 4138              	//    IMMEDIATE   ( -- )
 4139              	// 	Make the last compiled word an immediate word.
 4140              	
 4141 2390 6E170018 		.word	_COLON+MAPOFFSET
 4142 2394 09       	_IMMED:	.byte  9
 4143 2395 494D4D45 		.ascii "IMMEDIATE"
 4143      44494154 
 4143      45
 4144 239e 00BF     		.p2align 2 	
 4145              	IMMED:
 4146 23a0 42F804ED 		_NEST
 4147 23a4 FEF7EDF8 		_DOLIT
 4148 23a8 80000000 		.word	IMEDD
 4149 23ac FEF7D6FB 		BL	LAST
 4150 23b0 FEF730F9 		BL	AT
 4151 23b4 FEF72EF9 		BL	AT
 4152 23b8 FEF79EF9 		BL	ORR
 4153 23bc FEF7CEFB 		BL	LAST
 4154 23c0 FEF728F9 		BL	AT
 4155 23c4 FEF71CF9 		BL	STORE
 4156 23c8 52F804FB 		_UNNEST
 4157              	
 4158              	// **************************************************************************
 4159              	//  Defining words
 4160              	
 4161              	//    CONSTANT	( u -- //  string> )
 4162              	// 	Compile a new constant.
 4163              	
 4164 23cc 94170018 		.word	_IMMED+MAPOFFSET
 4165 23d0 08       	_CONST:	.byte  8
 4166 23d1 434F4E53 		.ascii "CONSTANT"
 4166      54414E54 
ARM GAS  stm32eforth.s 			page 78


 4167 23d9 0000BF   		.p2align 2 	
 4168              	CONST:
 4169 23dc 42F804ED 		_NEST
 4170 23e0 FFF764F9 		BL	TOKEN
 4171 23e4 FFF712FF 		BL	SNAME
 4172 23e8 FFF774FF 		BL	OVERT
 4173 23ec FEF7C9F8 		_DOLIT
 4174 23f0 42F804ED 		_NEST
 4175 23f4 FFF790FD 		BL	COMMA
 4176 23f8 FEF7C3F8 		_DOLIT
 4177 23fc 30FEFF17 		.word	DOCON+MAPOFFSET
 4178 2400 FFF796FF 		BL	CALLC
 4179 2404 FFF788FD 		BL	COMMA
 4180 2408 52F804FB 		_UNNEST
 4181              	
 4182              	//    CREATE	( -- //  string> )
 4183              	// 	Compile a new array entry without allocating code space.
 4184              	
 4185 240c D0170018 		.word	_CONST+MAPOFFSET
 4186 2410 06       	_CREAT:	.byte  6
 4187 2411 43524541 		.ascii "CREATE"
 4187      5445
 4188 2417 00       		.p2align 2 	
 4189              	CREAT:
 4190 2418 42F804ED 		_NEST
 4191 241c FFF746F9 		BL	TOKEN
 4192 2420 FFF7F4FE 		BL	SNAME
 4193 2424 FFF756FF 		BL	OVERT
 4194 2428 FEF7ABF8 		_DOLIT
 4195 242c 42F804ED 		_NEST
 4196 2430 FFF772FD 		BL	COMMA
 4197 2434 FEF7A5F8 		_DOLIT
 4198 2438 24FEFF17 		.word	DOVAR+MAPOFFSET
 4199 243c FFF778FF 		BL	CALLC
 4200 2440 52F804FB 		_UNNEST
 4201              	
 4202              	//    VARIABLE	( -- //  string> )
 4203              	// 	Compile a new variable initialized to 0.
 4204              	
 4205 2444 10180018 		.word	_CREAT+MAPOFFSET
 4206 2448 08       	_VARIA:	.byte  8
 4207 2449 56415249 		.ascii "VARIABLE"
 4207      41424C45 
 4208 2451 0000BF   		.p2align 2 	
 4209              	VARIA:
 4210 2454 42F804ED 		_NEST
 4211 2458 FFF7DEFF 		BL	CREAT
 4212 245c FEF791F8 		_DOLIT
 4213 2460 00000000 		.word	0
 4214 2464 FFF758FD 		BL	COMMA
 4215 2468 52F804FB 		_UNNEST
 4216              	
 4217              	// **************************************************************************
 4218              	//  Tools
 4219              	
 4220              	//    dm+	 ( a u -- a )
 4221              	// 	Dump u bytes from , leaving a+u on the stack.
ARM GAS  stm32eforth.s 			page 79


 4222              	
 4223              	// 	.word	_VARIA+MAPOFFSET
 4224              	// _DMP	.byte  3
 4225              	// 	.ascii "dm+"
 4226              	// 	.p2align 2 	
 4227              	DMP:
 4228 246c 42F804ED 		_NEST
 4229 2470 FEF726F9 		BL	OVER
 4230 2474 FEF785F8 		_DOLIT
 4231 2478 04000000 		.word	4
 4232 247c FEF7B4FF 		BL	UDOTR			// display address
 4233 2480 FEF718FF 		BL	SPACE
 4234 2484 FEF7EEF8 		BL	TOR			// start count down loop
 4235 2488 00F00CB8 		B.W	PDUM2			// skip first pass
 4236              	PDUM1:
 4237 248c FEF706F9 	  BL	DUPP
 4238 2490 FEF7D0F8 		BL	CAT
 4239 2494 FEF775F8 		_DOLIT
 4240 2498 03000000 		.word	3
 4241 249c FEF7A4FF 		BL	UDOTR			// display numeric data
 4242 24a0 FEF78EF9 		BL	ONEP			// increment address
 4243              	PDUM2:
 4244 24a4 FEF781F8 	  BL	DONXT
 4245 24a8 8C180018 		.word	PDUM1+MAPOFFSET	// loop till done
 4246 24ac 52F804FB 		_UNNEST
 4247              		.p2align 2 
 4248              	//    DUMP	( a u -- )
 4249              	// 	Dump u bytes from a, in a formatted manner.
 4250              	
 4251 24b0 48180018 		.word	_VARIA+MAPOFFSET
 4252 24b4 04       	_DUMP:	.byte  4
 4253 24b5 44554D50 		.ascii "DUMP"
 4254 24b9 0000BF   		.p2align 2 	
 4255              	DUMP:
 4256 24bc 42F804ED 		_NEST
 4257 24c0 FEF7EAFA 		BL	BASE
 4258 24c4 FEF7A6F8 		BL	AT
 4259 24c8 FEF7CCF8 		BL	TOR
 4260 24cc FEF7E2FD 		BL	HEX			// save radix,set hex
 4261 24d0 FEF757F8 		_DOLIT
 4262 24d4 10000000 		.word	16
 4263 24d8 FEF7FCFB 		BL	SLASH			// change count to lines
 4264 24dc FEF7C2F8 		BL	TOR
 4265 24e0 00F014B8 		B.W	DUMP4			// start count down loop
 4266              	DUMP1:
 4267 24e4 FEF726FF 	  BL	CR
 4268 24e8 FEF74BF8 		_DOLIT
 4269 24ec 10000000 		.word	16
 4270 24f0 FEF7DEF9 		BL	DDUP
 4271 24f4 FFF7BAFF 		BL	DMP			// display numeric
 4272 24f8 FEF7C6F9 		BL	ROT
 4273 24fc FEF7C4F9 		BL	ROT
 4274 2500 FEF7D8FE 		BL	SPACE
 4275 2504 FEF7D6FE 		BL	SPACE
 4276 2508 FEF7FCFE 		BL	TYPEE			// display printable characters
 4277              	DUMP4:
 4278 250c FEF74DF8 	  BL	DONXT
ARM GAS  stm32eforth.s 			page 80


 4279 2510 E4180018 		.word	DUMP1+MAPOFFSET	// loop till done
 4280              	DUMP3:
 4281 2514 FEF7BAF8 	  BL	DROP
 4282 2518 FEF792F8 		BL	RFROM
 4283 251c FEF7BCFA 		BL	BASE
 4284 2520 FEF76EF8 		BL	STORE			// restore radix
 4285 2524 52F804FB 		_UNNEST
 4286              	
 4287              	//    .S	  ( ... -- ... )
 4288              	// 	Display the contents of the data stack.
 4289              	
 4290 2528 B4180018 		.word	_DUMP+MAPOFFSET
 4291              	_DOTS:
 4292 252c 02       		.byte  2
 4293 252d 2E53     		.ascii ".S"
 4294 252f 00       		.p2align 2 	
 4295              	DOTS:
 4296 2530 42F804ED 		_NEST
 4297 2534 FEF7BEFE 		BL	SPACE
 4298 2538 FEF72EFC 		BL	DEPTH			// stack depth
 4299 253c FEF792F8 		BL	TOR			// start count down loop
 4300 2540 00F006B8 		B.W	DOTS2			// skip first pass
 4301              	DOTS1:
 4302 2544 FEF786F8 		BL	RAT
 4303 2548 FEF738FC 		BL	PICK
 4304 254c FEF778FF 		BL	DOT			// index stack, display contents
 4305              	DOTS2:
 4306 2550 FEF72BF8 		BL	DONXT
 4307 2554 44190018 		.word	DOTS1+MAPOFFSET	// loop till done
 4308 2558 FEF7ACFE 		BL	SPACE
 4309 255c 52F804FB 		_UNNEST
 4310              	
 4311              	//    >NAME	( ca -- na | F )
 4312              	// 	Convert code address to a name address.
 4313              	
 4314 2560 2C190018 		.word	_DOTS+MAPOFFSET
 4315 2564 05       	_TNAME:	.byte  5
 4316 2565 3E4E414D 		.ascii ">NAME"
 4316      45
 4317 256a 00BF     		.p2align 2 	
 4318              	TNAME:
 4319 256c 42F804ED 		_NEST
 4320 2570 FEF778F8 		BL	TOR			//  
 4321 2574 FEF7D4FA 		BL	CNTXT			//  va
 4322 2578 FEF74CF8 		BL	AT			//  na
 4323              	TNAM1:
 4324 257c FEF78EF8 		BL	DUPP			//  na na
 4325 2580 FEF722F8 		BL	QBRAN
 4326 2584 AC190018 		.word	TNAM2+MAPOFFSET	//  vocabulary end, no match
 4327 2588 FEF788F8 		BL	DUPP			//  na na
 4328 258c FFF79CF8 		BL	NAMET			//  na ca
 4329 2590 FEF760F8 		BL	RAT			//  na ca code
 4330 2594 FEF7BAF8 		BL	XORR			//  na f --
 4331 2598 FEF716F8 		BL	QBRAN
 4332 259c AC190018 		.word	TNAM2+MAPOFFSET
 4333 25a0 FEF736F9 		BL	CELLM			//  la 
 4334 25a4 FEF736F8 		BL	AT			//  next_na
ARM GAS  stm32eforth.s 			page 81


 4335 25a8 FFF7E8BF 		B.W	TNAM1
 4336              	TNAM2:	
 4337 25ac FEF748F8 		BL	RFROM
 4338 25b0 FEF76CF8 		BL	DROP			//  0|na --
 4339 25b4 52F804FB 		_UNNEST			// 0
 4340              	
 4341              	//    .ID	 ( na -- )
 4342              	// 	Display the name at address.
 4343              	
 4344 25b8 64190018 		.word	_TNAME+MAPOFFSET
 4345 25bc 03       	_DOTID:	.byte  3
 4346 25bd 2E4944   		.ascii ".ID"
 4347              		.p2align 2 	
 4348              	DOTID:
 4349 25c0 42F804ED 		_NEST
 4350 25c4 FEF756F9 		BL	QDUP			// if zero no name
 4351 25c8 FDF7FEFF 		BL	QBRAN
 4352 25cc E8190018 		.word	DOTI1+MAPOFFSET
 4353 25d0 FEF714FA 		BL	COUNT
 4354 25d4 FDF7D5FF 		_DOLIT
 4355 25d8 1F000000 		.word	0x1F
 4356 25dc FEF782F8 		BL	ANDD			// mask lexicon bits
 4357 25e0 FEF790FE 		BL	TYPEE
 4358 25e4 52F804FB 		_UNNEST			// display name string
 4359              	DOTI1:
 4360 25e8 FEF7DCFE 		BL	DOTQP
 4361 25ec 09       		.byte	9
 4362 25ed 207B6E6F 		.ascii " {noName}"
 4362      4E616D65 
 4362      7D
 4363 25f6 00BF     		.p2align 2 	
 4364 25f8 52F804FB 		_UNNEST
 4365              	
 4366              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 4367              	.if WANT_SEE 
 4368              	//    SEE	 ( -- //  string> )
 4369              	// 	A simple decompiler.
 4370              	
 4371              		.word	_DOTID+MAPOFFSET
 4372              	_SEE:	.byte  3
 4373              		.ascii "SEE"
 4374              		.p2align 2 	
 4375              	SEE:
 4376              		_NEST
 4377              		BL	TICK	//  ca --, starting address
 4378              		BL	CR	
 4379              		_DOLIT
 4380              		.word	20
 4381              		BL	TOR
 4382              	SEE1:
 4383              		BL	CELLP			//  a
 4384              		BL	DUPP			//  a a
 4385              		BL	DECOMP		//  a
 4386              		BL	DONXT
 4387              		.word	SEE1+MAPOFFSET
 4388              		BL	DROP
 4389              		_UNNEST
ARM GAS  stm32eforth.s 			page 82


 4390              	
 4391              	// 	DECOMPILE ( a -- )
 4392              	// 	Convert code in a.  Display name of command or as data.
 4393              	
 4394              		.word	_SEE+MAPOFFSET
 4395              	_DECOM:	.byte  9
 4396              		.ascii "DECOMPILE"
 4397              		.p2align 2 
 4398              		
 4399              	DECOMP:	
 4400              		_NEST
 4401              		BL	DUPP			//  a a
 4402              	// 	BL	TOR			//  a
 4403              		BL	AT			//  a code
 4404              		BL	DUPP			//  a code code
 4405              		_DOLIT
 4406              		.word	0xF800D000 //0xF800F800
 4407              		BL	ANDD
 4408              		_DOLIT
 4409              		.word	0xF000D000 //0xF800F000
 4410              		BL	EQUAL			//  a code ?
 4411              		BL	INVER 
 4412              		BL	QBRAN
 4413              		.word	DECOM2+MAPOFFSET	//  not a command
 4414              		//  a valid_code --, extract address and display name
 4415              		MOVW	R0,#0xFFE
 4416              		MOV	R4,R5
 4417              		LSL	R5,R5,#21		//  get bits 22-12
 4418              		ASR	R5,R5,#9		//  with sign extension
 4419              		LSR	R4,R4,#15		//  get bits 11-1
 4420              		AND	R4,R4,R0		//  retain only bits 11-1
 4421              		ORR	R5,R5,R4		//  get bits 22-1
 4422              		NOP
 4423              		BL	OVER			//  a offset a
 4424              		BL	PLUS			//  a target-4
 4425              		BL	CELLP			//  a target
 4426              		BL	TNAME			//  a na/0 --, is it a name?
 4427              		BL	QDUP			//  name address or zero
 4428              		BL	QBRAN
 4429              		.word	DECOM1+MAPOFFSET
 4430              		BL	SPACE			//  a na
 4431              		BL	DOTID			//  a --, display name
 4432              	// 	BL	RFROM			//  a
 4433              		BL	DROP
 4434              		_UNNEST
 4435              	DECOM1:	// BL	RFROM		//  a
 4436              		BL	AT			//  data
 4437              		BL	UDOT			//  display data
 4438              		_UNNEST
 4439              	DECOM2:
 4440              		BL	UDOT
 4441              	// 	BL	RFROM
 4442              		BL	DROP
 4443              		_UNNEST
 4444              	
 4445              	//    WORDS	( -- )
 4446              	// 	Display the names in the context vocabulary.
ARM GAS  stm32eforth.s 			page 83


 4447              	
 4448              		.word	_DECOM+MAPOFFSET
 4449              	.else 
 4450 25fc BC190018 		.word _DOTID+MAPOFFSET 
 4451              	.endif 
 4452 2600 05       	_WORDS:	.byte  5
 4453 2601 574F5244 		.ascii "WORDS"
 4453      53
 4454 2606 00BF     		.p2align 2 	
 4455              	WORDS:
 4456 2608 42F804ED 		_NEST
 4457 260c FEF792FE 		BL	CR
 4458 2610 FEF786FA 		BL	CNTXT
 4459 2614 FDF7FEFF 		BL	AT			// only in context
 4460              	WORS1:
 4461 2618 FEF72CF9 		BL	QDUP			// ?at end of list
 4462 261c FDF7D4FF 		BL	QBRAN
 4463 2620 3C1A0018 		.word	WORS2+MAPOFFSET
 4464 2624 FEF73AF8 		BL	DUPP
 4465 2628 FEF744FE 		BL	SPACE
 4466 262c FFF7C8FF 		BL	DOTID			// display a name
 4467 2630 FEF7EEF8 		BL	CELLM
 4468 2634 FDF7EEFF 		BL	AT
 4469 2638 FFF7EEBF 		B.W	WORS1
 4470              	WORS2:
 4471 263c 52F804FB 		_UNNEST
 4472              	
 4473              	// **************************************************************************
 4474              	//  cold start
 4475              	
 4476              	//    VER	 ( -- n )
 4477              	// 	Return the version number of this implementation.
 4478              	
 4479              	// 	.word	_WORDS+MAPOFFSET
 4480              	// _VERSN	.byte  3
 4481              	// 	.ascii "VER"
 4482              	// 	.p2align 2 	
 4483              	VERSN:
 4484 2640 42F804ED 		_NEST
 4485 2644 FDF79DFF 		_DOLIT
 4486 2648 00010000 		.word	VER*256+EXT
 4487 264c 52F804FB 		_UNNEST
 4488              	
 4489              	//    hi	  ( -- )
 4490              	// 	Display the sign-on message of eForth.
 4491              	
 4492 2650 001A0018 		.word	_WORDS+MAPOFFSET
 4493 2654 02       	_HI:	.byte  2
 4494 2655 4849     		.ascii "HI"
 4495 2657 00       		.p2align 2 	
 4496              	HI:
 4497 2658 42F804ED 		_NEST
 4498 265c FEF76AFE 		BL	CR	// initialize I/O
 4499 2660 FEF7A0FE 		BL	DOTQP
 4500 2664 17       		.byte	23
 4501 2665 626C7565 		.ascii "blue pill stm32eForth v" 
 4501      2070696C 
ARM GAS  stm32eforth.s 			page 84


 4501      6C207374 
 4501      6D333265 
 4501      466F7274 
 4502              		.p2align 2
 4503 267c FEF70CFA 		BL	BASE
 4504 2680 FDF7C8FF 		BL	AT
 4505 2684 FEF706FD 		BL	HEX	// save radix
 4506 2688 FFF7DAFF 		BL	VERSN
 4507 268c FEF77EFC 		BL	BDIGS
 4508 2690 FEF7A2FC 		BL	DIG
 4509 2694 FEF7A0FC 		BL	DIG
 4510 2698 FDF773FF 		_DOLIT
 4511 269c 2E000000 		.word	'.'
 4512 26a0 FEF784FC 		BL	HOLD
 4513 26a4 FEF7A8FC 		BL	DIGS
 4514 26a8 FEF7CCFC 		BL	EDIGS
 4515 26ac FEF72AFE 		BL	TYPEE	// format version number
 4516 26b0 FEF7F2F9 		BL	BASE
 4517 26b4 FDF7A4FF 		BL	STORE
 4518 26b8 FEF73CFE 		BL	CR
 4519 26bc 52F804FB 		_UNNEST			// restore radix
 4520              	
 4521              	//    COLD	( -- )
 4522              	// 	The high level cold start sequence.
 4523              	
 4524 26c0 541A0018 		.word	_HI+MAPOFFSET
 4525 26c4 04       	LASTN:	.byte  4
 4526 26c5 434F4C44 		.ascii "COLD"
 4527 26c9 000000   		.p2align 2,0	
 4528              	COLD:
 4529              	//  Initiate Forth registers
 4530 26cc 4FF00003 		MOV R3,#UPP&0xffff	//  user area 
 4531 26d0 C2F20003 	 	MOVT R3,#UPP>>16		  
 4532 26d4 03F59F42 		ADD R2,R3,#RPP&0xffff	// Forth return stack
 4533 26d8 03F59D41 		ADD R1,R3,#SPP&0xffff // Forth data stack
 4534 26dc 85EA0505 		EOR R5,R5,R5			//  tos=0
 4535 26e0 00BF     		NOP
 4536 26e2 42F804ED 		_NEST
 4537              	COLD1:
 4538 26e6 FDF74CFF 		_DOLIT 
 4539 26ea 00000000 		.word 0 
 4540 26ee FDF709FF 		BL ULED // turn off user LED 
 4541 26f2 FDF746FF 		_DOLIT
 4542 26f6 00040000 		.word	UZERO
 4543 26fa FDF742FF 		_DOLIT
 4544 26fe 00000020 		.word	UPP
 4545 2702 FDF73EFF 		_DOLIT
 4546 2706 58000000 		.word	ULAST-UZERO
 4547 270a FEF7B3FB 		BL	MOVE 			// initialize user area
 4548 270e FFF711FA 		BL	PRESE			// initialize stack and TIB
 4549 2712 FFF7CFFA 		BL	IMGQ			// check if user image saved
 4550 2716 FDF757FF 		BL	QBRAN 
 4551 271a 201B0018 		.word 1f+MAPOFFSET
 4552 271e 00BF     		NOP 
 4553              	//	BL	LOAD_IMG 
 4554 2720 FEF7B0F9 	1:	BL	TBOOT
 4555 2724 FEF782FB 		BL	ATEXE			// application boot
ARM GAS  stm32eforth.s 			page 85


 4556 2728 FEF704FA 		BL	CPP 
 4557 272c FDF772FF 		BL	AT 
 4558 2730 FEF700FB 		BL  ALGND 
 4559 2734 FDF7B2FF 		BL  DUPP 
 4560 2738 FEF7FCF9 		BL	CPP 
 4561 273c FDF760FF 		BL	STORE
 4562 2740 FEF71AFA 		BL  USER_BEGIN 
 4563 2744 FDF75CFF 		BL  STORE  
 4564 2748 FFF7C4FD 		BL	OVERT
 4565 274c FFF7FEB9 		B.W	QUIT			// start interpretation
 4566              	COLD2:	
 4567              	CTOP:
 4568 2750 FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4569 2754 AFF30080 		.p2align 10 
 4569      AFF30080 
 4569      AFF30080 
 4569      AFF30080 
 4569      AFF30080 
 4570              	USER: // user image save 
 4571 2800 FFFFFFFF 		.word 0XFFFFFFFF
 4572              	
 4573              	  .end 
ARM GAS  stm32eforth.s 			page 86


DEFINED SYMBOLS
board/blue-pill/stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
board/blue-pill/stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
board/blue-pill/stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
board/blue-pill/stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
board/blue-pill/stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
board/blue-pill/stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
board/blue-pill/stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
board/blue-pill/stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
board/blue-pill/stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
board/blue-pill/stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
board/blue-pill/stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
board/blue-pill/stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
board/blue-pill/stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
board/blue-pill/stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
board/blue-pill/stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
board/blue-pill/stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
board/blue-pill/stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
board/blue-pill/stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
board/blue-pill/stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
board/blue-pill/stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
board/blue-pill/stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
board/blue-pill/stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
board/blue-pill/stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
board/blue-pill/stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
board/blue-pill/stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
board/blue-pill/stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
board/blue-pill/stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
board/blue-pill/stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
board/blue-pill/stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
board/blue-pill/stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
board/blue-pill/stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
board/blue-pill/stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
board/blue-pill/stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
board/blue-pill/stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
board/blue-pill/stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
board/blue-pill/stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
board/blue-pill/stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
board/blue-pill/stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
board/blue-pill/stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
board/blue-pill/stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
board/blue-pill/stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
board/blue-pill/stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
board/blue-pill/stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
board/blue-pill/stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
board/blue-pill/stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
board/blue-pill/stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
board/blue-pill/stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
board/blue-pill/stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
board/blue-pill/stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
board/blue-pill/stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
board/blue-pill/stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
board/blue-pill/stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
board/blue-pill/stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
board/blue-pill/stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
board/blue-pill/stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
board/blue-pill/stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  stm32eforth.s 			page 87


board/blue-pill/stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
board/blue-pill/stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
board/blue-pill/stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
board/blue-pill/stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
board/blue-pill/stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
board/blue-pill/stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
board/blue-pill/stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
board/blue-pill/stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
board/blue-pill/stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
board/blue-pill/stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
board/blue-pill/stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
board/blue-pill/stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
board/blue-pill/stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
board/blue-pill/stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
board/blue-pill/stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
board/blue-pill/stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
board/blue-pill/stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
board/blue-pill/stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
board/blue-pill/stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
board/blue-pill/stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
board/blue-pill/stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
board/blue-pill/stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
board/blue-pill/stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
board/blue-pill/stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
board/blue-pill/stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
board/blue-pill/stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
board/blue-pill/stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32eforth.s:83     *ABS*:0000000040011000 LED_GPIO
       stm32eforth.s:84     *ABS*:000000000000000d LED_PIN
       stm32eforth.s:85     *ABS*:0000000040013800 UART
       stm32eforth.s:88     *ABS*:0000000020004e80 SPP
       stm32eforth.s:89     *ABS*:0000000020004e80 TIBB
       stm32eforth.s:90     *ABS*:0000000020004f80 RPP
       stm32eforth.s:91     *ABS*:0000000020000000 UPP
       stm32eforth.s:92     *ABS*:0000000020000100 DTOP
       stm32eforth.s:93     *ABS*:0000000020004e00 DEND
       stm32eforth.s:94     *ABS*:0000000020000000 RAMOFFSET
       stm32eforth.s:95     *ABS*:0000000020005000 RAMEND
       stm32eforth.s:96     *ABS*:0000000008000c00 FLASHOFFSET
       stm32eforth.s:99     *ABS*:0000000017fff400 MAPOFFSET
       stm32eforth.s:104    *ABS*:0000000000000004 SEED_OFS
       stm32eforth.s:105    *ABS*:0000000000000008 TICKS_OFS
       stm32eforth.s:106    *ABS*:000000000000000c TIMER_OFS
       stm32eforth.s:107    *ABS*:0000000000000010 BOOT_OFS
       stm32eforth.s:108    *ABS*:0000000000000014 BASE_OFS
       stm32eforth.s:109    *ABS*:0000000000000018 TMP_OFS
       stm32eforth.s:110    *ABS*:000000000000001c SPAN_OFS
       stm32eforth.s:111    *ABS*:0000000000000020 TOIN_OFS
       stm32eforth.s:112    *ABS*:0000000000000024 NTIB_OFS
       stm32eforth.s:113    *ABS*:0000000000000028 TIB_OFS
       stm32eforth.s:114    *ABS*:000000000000002c EVAL_OFS
       stm32eforth.s:115    *ABS*:0000000000000030 HLD_OFS
       stm32eforth.s:116    *ABS*:0000000000000034 CTXT_OFS
       stm32eforth.s:117    *ABS*:0000000000000038 FORTH_CTOP_OFS
       stm32eforth.s:118    *ABS*:000000000000003c USER_CTOP_OFS
       stm32eforth.s:119    *ABS*:0000000000000040 LASTN_OFS
       stm32eforth.s:120    *ABS*:0000000000000044 USER_BEGIN_OFS
ARM GAS  stm32eforth.s 			page 88


       stm32eforth.s:121    *ABS*:0000000000000048 USER_END_OFS
       stm32eforth.s:122    *ABS*:000000000000004c USER_IMG_OFS
       stm32eforth.s:158    .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:292    .text.reset_handler:0000000000000000 reset_handler
       stm32eforth.s:249    .text.default_handler:0000000000000000 default_handler
       stm32eforth.s:271    .text.default_handler:0000000000000034 systick_handler
       stm32eforth.s:247    .text.default_handler:0000000000000000 $t
       stm32eforth.s:259    .text.default_handler:000000000000001c exception_msg
       stm32eforth.s:615    .text.reset_handler:0000000000000560 EMIT
       stm32eforth.s:260    .text.default_handler:000000000000001c $d
       stm32eforth.s:281    .text.default_handler:000000000000004e systick_exit
       stm32eforth.s:290    .text.reset_handler:0000000000000000 $t
       stm32eforth.s:404    .text.reset_handler:00000000000000e4 remap
       stm32eforth.s:304    .text.reset_handler:0000000000000014 init_devices
       stm32eforth.s:299    .text.reset_handler:0000000000000010 forth_entry
       stm32eforth.s:300    .text.reset_handler:0000000000000010 $d
       stm32eforth.s:4528   .text.reset_handler:00000000000026cc COLD
       stm32eforth.s:303    .text.reset_handler:0000000000000014 $t
       stm32eforth.s:319    .text.reset_handler:0000000000000032 wait_hserdy
       stm32eforth.s:339    .text.reset_handler:000000000000004c wait_pllrdy
       stm32eforth.s:352    .text.reset_handler:000000000000006c wait_sws
       stm32eforth.s:424    .text.reset_handler:000000000000011c remap_dest
       stm32eforth.s:422    .text.reset_handler:0000000000000118 remap_src
       stm32eforth.s:4567   .text.reset_handler:0000000000002750 CTOP
       stm32eforth.s:470    .text.reset_handler:0000000000000400 UZERO
       stm32eforth.s:423    .text.reset_handler:0000000000000118 $d
       stm32eforth.s:430    *ABS*:0000000000000001 VER
       stm32eforth.s:431    *ABS*:0000000000000000 EXT
       stm32eforth.s:435    *ABS*:0000000000000040 COMPO
       stm32eforth.s:436    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:437    *ABS*:00000000ffffff1f MASKK
       stm32eforth.s:439    *ABS*:0000000000000004 CELLL
       stm32eforth.s:440    *ABS*:000000000000000a BASEE
       stm32eforth.s:441    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:443    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:444    *ABS*:000000000000000a LF
       stm32eforth.s:445    *ABS*:000000000000000d CRR
       stm32eforth.s:446    *ABS*:000000000000001b ERR
       stm32eforth.s:447    *ABS*:0000000000000027 TIC
       stm32eforth.s:468    .text.reset_handler:0000000000000120 $t
       stm32eforth.s:471    .text.reset_handler:0000000000000400 $d
       stm32eforth.s:4496   .text.reset_handler:0000000000002658 HI
       stm32eforth.s:3168   .text.reset_handler:0000000000001a10 INTER
       stm32eforth.s:4525   .text.reset_handler:00000000000026c4 LASTN
       stm32eforth.s:4570   .text.reset_handler:0000000000002800 USER
       stm32eforth.s:492    .text.reset_handler:0000000000000458 ULAST
       stm32eforth.s:505    .text.reset_handler:0000000000000458 $d
       stm32eforth.s:506    .text.reset_handler:000000000000045c _RAND
       stm32eforth.s:509    .text.reset_handler:0000000000000464 RAND
       stm32eforth.s:1461   .text.reset_handler:0000000000000a48 SEED
       stm32eforth.s:751    .text.reset_handler:0000000000000614 AT
       stm32eforth.s:845    .text.reset_handler:000000000000069c DUPP
       stm32eforth.s:738    .text.reset_handler:0000000000000600 STORE
       stm32eforth.s:1244   .text.reset_handler:0000000000000904 ABSS
       stm32eforth.s:856    .text.reset_handler:00000000000006ac SWAP
       stm32eforth.s:1778   .text.reset_handler:0000000000000cbc MODD
       stm32eforth.s:529    .text.reset_handler:00000000000004a4 $d
ARM GAS  stm32eforth.s 			page 89


       stm32eforth.s:530    .text.reset_handler:00000000000004a8 _REBOOT
       stm32eforth.s:533    .text.reset_handler:00000000000004b0 REBOOT
       stm32eforth.s:540    .text.reset_handler:00000000000004c0 scb_adr
       stm32eforth.s:541    .text.reset_handler:00000000000004c0 $d
       stm32eforth.s:546    .text.reset_handler:00000000000004c8 _PAUSE
       stm32eforth.s:548    .text.reset_handler:00000000000004ce $t
       stm32eforth.s:549    .text.reset_handler:00000000000004d0 PAUSE
       stm32eforth.s:1482   .text.reset_handler:0000000000000a70 TIMER
       stm32eforth.s:553    .text.reset_handler:00000000000004dc PAUSE_LOOP
       stm32eforth.s:698    .text.reset_handler:00000000000005c8 QBRAN
       stm32eforth.s:557    .text.reset_handler:00000000000004e8 $d
       stm32eforth.s:560    .text.reset_handler:00000000000004f4 PAUSE_EXIT
       stm32eforth.s:716    .text.reset_handler:00000000000005e0 BRAN
       stm32eforth.s:558    .text.reset_handler:00000000000004ec $t
       stm32eforth.s:559    .text.reset_handler:00000000000004f0 $d
       stm32eforth.s:561    .text.reset_handler:00000000000004f4 $t
       stm32eforth.s:565    .text.reset_handler:00000000000004f8 $d
       stm32eforth.s:566    .text.reset_handler:00000000000004fc _ULED
       stm32eforth.s:570    .text.reset_handler:0000000000000504 ULED
       stm32eforth.s:579    .text.reset_handler:000000000000051c ULED_OFF
       stm32eforth.s:585    .text.reset_handler:0000000000000520 $d
       stm32eforth.s:586    .text.reset_handler:0000000000000524 _QRX
       stm32eforth.s:589    .text.reset_handler:000000000000052c QKEY
       stm32eforth.s:590    .text.reset_handler:000000000000052c QRX
       stm32eforth.s:601    .text.reset_handler:000000000000054c QRX1
       stm32eforth.s:610    .text.reset_handler:0000000000000554 $d
       stm32eforth.s:611    .text.reset_handler:0000000000000558 _TXSTO
       stm32eforth.s:614    .text.reset_handler:0000000000000560 TXSTO
       stm32eforth.s:616    .text.reset_handler:0000000000000560 TECHO
       stm32eforth.s:619    .text.reset_handler:0000000000000568 TX1
       stm32eforth.s:633    .text.reset_handler:0000000000000578 $d
       stm32eforth.s:634    .text.reset_handler:000000000000057c _NOP
       stm32eforth.s:636    .text.reset_handler:0000000000000580 $t
       stm32eforth.s:637    .text.reset_handler:0000000000000580 NOP
       stm32eforth.s:648    .text.reset_handler:0000000000000582 DOLIT
       stm32eforth.s:658    .text.reset_handler:0000000000000594 $d
       stm32eforth.s:659    .text.reset_handler:0000000000000598 _EXECU
       stm32eforth.s:661    .text.reset_handler:00000000000005a0 $t
       stm32eforth.s:662    .text.reset_handler:00000000000005a0 EXECU
       stm32eforth.s:676    .text.reset_handler:00000000000005aa DONXT
       stm32eforth.s:683    .text.reset_handler:00000000000005b8 NEXT1
       stm32eforth.s:705    .text.reset_handler:00000000000005da QBRAN1
       stm32eforth.s:724    .text.reset_handler:00000000000005ea $d
       stm32eforth.s:725    .text.reset_handler:00000000000005ee _EXIT
       stm32eforth.s:728    .text.reset_handler:00000000000005f4 EXIT
       stm32eforth.s:734    .text.reset_handler:00000000000005f8 $d
       stm32eforth.s:735    .text.reset_handler:00000000000005fc _STORE
       stm32eforth.s:737    .text.reset_handler:00000000000005fe $t
       stm32eforth.s:747    .text.reset_handler:000000000000060c $d
       stm32eforth.s:748    .text.reset_handler:0000000000000610 _AT
       stm32eforth.s:750    .text.reset_handler:0000000000000612 $t
       stm32eforth.s:758    .text.reset_handler:0000000000000618 $d
       stm32eforth.s:759    .text.reset_handler:000000000000061c _CSTOR
       stm32eforth.s:762    .text.reset_handler:0000000000000620 CSTOR
       stm32eforth.s:771    .text.reset_handler:000000000000062c $d
       stm32eforth.s:772    .text.reset_handler:0000000000000630 _CAT
       stm32eforth.s:775    .text.reset_handler:0000000000000634 CAT
ARM GAS  stm32eforth.s 			page 90


       stm32eforth.s:782    .text.reset_handler:0000000000000638 $d
       stm32eforth.s:783    .text.reset_handler:000000000000063c _RFROM
       stm32eforth.s:786    .text.reset_handler:0000000000000640 RFROM
       stm32eforth.s:794    .text.reset_handler:000000000000064a $d
       stm32eforth.s:795    .text.reset_handler:000000000000064e _RAT
       stm32eforth.s:798    .text.reset_handler:0000000000000654 RAT
       stm32eforth.s:806    .text.reset_handler:000000000000065c $d
       stm32eforth.s:807    .text.reset_handler:0000000000000660 _TOR
       stm32eforth.s:810    .text.reset_handler:0000000000000664 TOR
       stm32eforth.s:818    .text.reset_handler:000000000000066e $d
       stm32eforth.s:819    .text.reset_handler:0000000000000672 _SPAT
       stm32eforth.s:821    .text.reset_handler:0000000000000676 $t
       stm32eforth.s:822    .text.reset_handler:0000000000000678 SPAT
       stm32eforth.s:830    .text.reset_handler:0000000000000680 $d
       stm32eforth.s:831    .text.reset_handler:0000000000000684 _DROP
       stm32eforth.s:834    .text.reset_handler:000000000000068c DROP
       stm32eforth.s:841    .text.reset_handler:0000000000000692 $d
       stm32eforth.s:842    .text.reset_handler:0000000000000696 _DUPP
       stm32eforth.s:844    .text.reset_handler:000000000000069a $t
       stm32eforth.s:852    .text.reset_handler:00000000000006a2 $d
       stm32eforth.s:853    .text.reset_handler:00000000000006a6 _SWAP
       stm32eforth.s:865    .text.reset_handler:00000000000006b4 $d
       stm32eforth.s:866    .text.reset_handler:00000000000006b8 _OVER
       stm32eforth.s:869    .text.reset_handler:00000000000006c0 OVER
       stm32eforth.s:877    .text.reset_handler:00000000000006c8 $d
       stm32eforth.s:878    .text.reset_handler:00000000000006cc _ZLESS
       stm32eforth.s:881    .text.reset_handler:00000000000006d0 ZLESS
       stm32eforth.s:889    .text.reset_handler:00000000000006da $d
       stm32eforth.s:890    .text.reset_handler:00000000000006de _ANDD
       stm32eforth.s:892    .text.reset_handler:00000000000006e2 $t
       stm32eforth.s:893    .text.reset_handler:00000000000006e4 ANDD
       stm32eforth.s:901    .text.reset_handler:00000000000006ee $d
       stm32eforth.s:902    .text.reset_handler:00000000000006f2 _ORR
       stm32eforth.s:905    .text.reset_handler:00000000000006f8 ORR
       stm32eforth.s:913    .text.reset_handler:0000000000000702 $d
       stm32eforth.s:914    .text.reset_handler:0000000000000706 _XORR
       stm32eforth.s:916    .text.reset_handler:000000000000070a $t
       stm32eforth.s:917    .text.reset_handler:000000000000070c XORR
       stm32eforth.s:925    .text.reset_handler:0000000000000716 $d
       stm32eforth.s:926    .text.reset_handler:000000000000071a _UPLUS
       stm32eforth.s:928    .text.reset_handler:000000000000071e $t
       stm32eforth.s:929    .text.reset_handler:0000000000000720 UPLUS
       stm32eforth.s:940    .text.reset_handler:0000000000000730 $d
       stm32eforth.s:941    .text.reset_handler:0000000000000734 _RSHIFT
       stm32eforth.s:944    .text.reset_handler:000000000000073c RSHIFT
       stm32eforth.s:952    .text.reset_handler:0000000000000746 $d
       stm32eforth.s:953    .text.reset_handler:000000000000074a _LSHIFT
       stm32eforth.s:956    .text.reset_handler:0000000000000754 LSHIFT
       stm32eforth.s:964    .text.reset_handler:000000000000075e $d
       stm32eforth.s:965    .text.reset_handler:0000000000000762 _PLUS
       stm32eforth.s:967    .text.reset_handler:0000000000000764 $t
       stm32eforth.s:968    .text.reset_handler:0000000000000764 PLUS
       stm32eforth.s:976    .text.reset_handler:000000000000076c $d
       stm32eforth.s:977    .text.reset_handler:0000000000000770 _SUBB
       stm32eforth.s:979    .text.reset_handler:0000000000000772 $t
       stm32eforth.s:980    .text.reset_handler:0000000000000774 SUBB
       stm32eforth.s:988    .text.reset_handler:000000000000077e $d
ARM GAS  stm32eforth.s 			page 91


       stm32eforth.s:989    .text.reset_handler:0000000000000782 _STAR
       stm32eforth.s:991    .text.reset_handler:0000000000000784 $t
       stm32eforth.s:992    .text.reset_handler:0000000000000784 STAR
       stm32eforth.s:1000   .text.reset_handler:000000000000078e $d
       stm32eforth.s:1001   .text.reset_handler:0000000000000792 _UMSTA
       stm32eforth.s:1003   .text.reset_handler:0000000000000796 $t
       stm32eforth.s:1004   .text.reset_handler:0000000000000798 UMSTA
       stm32eforth.s:1014   .text.reset_handler:00000000000007a4 $d
       stm32eforth.s:1015   .text.reset_handler:00000000000007a8 _MSTAR
       stm32eforth.s:1018   .text.reset_handler:00000000000007ac MSTAR
       stm32eforth.s:1028   .text.reset_handler:00000000000007b8 $d
       stm32eforth.s:1029   .text.reset_handler:00000000000007bc _ONEP
       stm32eforth.s:1032   .text.reset_handler:00000000000007c0 ONEP
       stm32eforth.s:1039   .text.reset_handler:00000000000007c6 $d
       stm32eforth.s:1040   .text.reset_handler:00000000000007ca _ONEM
       stm32eforth.s:1043   .text.reset_handler:00000000000007d0 ONEM
       stm32eforth.s:1050   .text.reset_handler:00000000000007d6 $d
       stm32eforth.s:1051   .text.reset_handler:00000000000007da _TWOP
       stm32eforth.s:1054   .text.reset_handler:00000000000007e0 TWOP
       stm32eforth.s:1061   .text.reset_handler:00000000000007e6 $d
       stm32eforth.s:1062   .text.reset_handler:00000000000007ea _TWOM
       stm32eforth.s:1065   .text.reset_handler:00000000000007f0 TWOM
       stm32eforth.s:1072   .text.reset_handler:00000000000007f6 $d
       stm32eforth.s:1073   .text.reset_handler:00000000000007fa _CELLP
       stm32eforth.s:1075   .text.reset_handler:0000000000000800 $t
       stm32eforth.s:1076   .text.reset_handler:0000000000000800 CELLP
       stm32eforth.s:1083   .text.reset_handler:0000000000000806 $d
       stm32eforth.s:1084   .text.reset_handler:000000000000080a _CELLM
       stm32eforth.s:1086   .text.reset_handler:0000000000000810 $t
       stm32eforth.s:1087   .text.reset_handler:0000000000000810 CELLM
       stm32eforth.s:1094   .text.reset_handler:0000000000000816 $d
       stm32eforth.s:1095   .text.reset_handler:000000000000081a _BLANK
       stm32eforth.s:1098   .text.reset_handler:0000000000000820 BLANK
       stm32eforth.s:1106   .text.reset_handler:000000000000082a $d
       stm32eforth.s:1107   .text.reset_handler:000000000000082e _CELLS
       stm32eforth.s:1109   .text.reset_handler:0000000000000834 $t
       stm32eforth.s:1110   .text.reset_handler:0000000000000834 CELLS
       stm32eforth.s:1117   .text.reset_handler:000000000000083a $d
       stm32eforth.s:1118   .text.reset_handler:000000000000083e _CELLSL
       stm32eforth.s:1120   .text.reset_handler:0000000000000844 $t
       stm32eforth.s:1121   .text.reset_handler:0000000000000844 CELLSL
       stm32eforth.s:1128   .text.reset_handler:000000000000084a $d
       stm32eforth.s:1129   .text.reset_handler:000000000000084e _TWOST
       stm32eforth.s:1132   .text.reset_handler:0000000000000854 TWOST
       stm32eforth.s:1139   .text.reset_handler:000000000000085a $d
       stm32eforth.s:1140   .text.reset_handler:000000000000085e _TWOSL
       stm32eforth.s:1143   .text.reset_handler:0000000000000864 TWOSL
       stm32eforth.s:1150   .text.reset_handler:000000000000086a $d
       stm32eforth.s:1151   .text.reset_handler:000000000000086e _QDUP
       stm32eforth.s:1154   .text.reset_handler:0000000000000874 QDUP
       stm32eforth.s:1163   .text.reset_handler:000000000000087e $d
       stm32eforth.s:1164   .text.reset_handler:0000000000000882 _ROT
       stm32eforth.s:1166   .text.reset_handler:0000000000000886 $t
       stm32eforth.s:1167   .text.reset_handler:0000000000000888 ROT
       stm32eforth.s:1177   .text.reset_handler:0000000000000892 $d
       stm32eforth.s:1178   .text.reset_handler:0000000000000896 _DDROP
       stm32eforth.s:1180   .text.reset_handler:000000000000089c $t
ARM GAS  stm32eforth.s 			page 92


       stm32eforth.s:1181   .text.reset_handler:000000000000089c DDROP
       stm32eforth.s:1189   .text.reset_handler:00000000000008a6 $d
       stm32eforth.s:1190   .text.reset_handler:00000000000008aa _DDUP
       stm32eforth.s:1193   .text.reset_handler:00000000000008b0 DDUP
       stm32eforth.s:1202   .text.reset_handler:00000000000008bc $d
       stm32eforth.s:1203   .text.reset_handler:00000000000008c0 _DPLUS
       stm32eforth.s:1206   .text.reset_handler:00000000000008c4 DPLUS
       stm32eforth.s:1218   .text.reset_handler:00000000000008d8 $d
       stm32eforth.s:1219   .text.reset_handler:00000000000008dc _INVER
       stm32eforth.s:1221   .text.reset_handler:00000000000008e0 $t
       stm32eforth.s:1222   .text.reset_handler:00000000000008e0 INVER
       stm32eforth.s:1229   .text.reset_handler:00000000000008e6 $d
       stm32eforth.s:1230   .text.reset_handler:00000000000008ea _NEGAT
       stm32eforth.s:1233   .text.reset_handler:00000000000008f4 NEGAT
       stm32eforth.s:1240   .text.reset_handler:00000000000008fa $d
       stm32eforth.s:1241   .text.reset_handler:00000000000008fe _ABSS
       stm32eforth.s:1243   .text.reset_handler:0000000000000902 $t
       stm32eforth.s:1253   .text.reset_handler:000000000000090e $d
       stm32eforth.s:1254   .text.reset_handler:0000000000000912 _ZEQUAL
       stm32eforth.s:1257   .text.reset_handler:0000000000000918 ZEQUAL
       stm32eforth.s:1267   .text.reset_handler:0000000000000926 $d
       stm32eforth.s:1268   .text.reset_handler:000000000000092a _EQUAL
       stm32eforth.s:1270   .text.reset_handler:000000000000092c $t
       stm32eforth.s:1271   .text.reset_handler:000000000000092c EQUAL
       stm32eforth.s:1282   .text.reset_handler:000000000000093c $d
       stm32eforth.s:1283   .text.reset_handler:0000000000000940 _ULESS
       stm32eforth.s:1286   .text.reset_handler:0000000000000944 ULESS
       stm32eforth.s:1297   .text.reset_handler:0000000000000954 $d
       stm32eforth.s:1298   .text.reset_handler:0000000000000958 _LESS
       stm32eforth.s:1300   .text.reset_handler:000000000000095a $t
       stm32eforth.s:1301   .text.reset_handler:000000000000095c LESS
       stm32eforth.s:1312   .text.reset_handler:000000000000096c $d
       stm32eforth.s:1313   .text.reset_handler:0000000000000970 _GREAT
       stm32eforth.s:1315   .text.reset_handler:0000000000000972 $t
       stm32eforth.s:1316   .text.reset_handler:0000000000000974 GREAT
       stm32eforth.s:1327   .text.reset_handler:0000000000000984 $d
       stm32eforth.s:1328   .text.reset_handler:0000000000000988 _MAX
       stm32eforth.s:1330   .text.reset_handler:000000000000098c $t
       stm32eforth.s:1331   .text.reset_handler:000000000000098c MAX
       stm32eforth.s:1341   .text.reset_handler:0000000000000998 $d
       stm32eforth.s:1342   .text.reset_handler:000000000000099c _MIN
       stm32eforth.s:1344   .text.reset_handler:00000000000009a0 $t
       stm32eforth.s:1345   .text.reset_handler:00000000000009a0 MIN
       stm32eforth.s:1355   .text.reset_handler:00000000000009ac $d
       stm32eforth.s:1356   .text.reset_handler:00000000000009b0 _PSTOR
       stm32eforth.s:1359   .text.reset_handler:00000000000009b4 PSTOR
       stm32eforth.s:1370   .text.reset_handler:00000000000009c4 $d
       stm32eforth.s:1371   .text.reset_handler:00000000000009c8 _DSTOR
       stm32eforth.s:1374   .text.reset_handler:00000000000009cc DSTOR
       stm32eforth.s:1385   .text.reset_handler:00000000000009e0 $d
       stm32eforth.s:1386   .text.reset_handler:00000000000009e4 _DAT
       stm32eforth.s:1389   .text.reset_handler:00000000000009e8 DAT
       stm32eforth.s:1398   .text.reset_handler:00000000000009f2 $d
       stm32eforth.s:1399   .text.reset_handler:00000000000009f6 _COUNT
       stm32eforth.s:1401   .text.reset_handler:00000000000009fc $t
       stm32eforth.s:1402   .text.reset_handler:00000000000009fc COUNT
       stm32eforth.s:1411   .text.reset_handler:0000000000000a08 $d
ARM GAS  stm32eforth.s 			page 93


       stm32eforth.s:1412   .text.reset_handler:0000000000000a0c _DNEGA
       stm32eforth.s:1414   .text.reset_handler:0000000000000a14 $t
       stm32eforth.s:1415   .text.reset_handler:0000000000000a14 DNEGA
       stm32eforth.s:1433   .text.reset_handler:0000000000000a24 DOVAR
       stm32eforth.s:1445   .text.reset_handler:0000000000000a30 DOCON
       stm32eforth.s:1457   .text.reset_handler:0000000000000a3c $d
       stm32eforth.s:1458   .text.reset_handler:0000000000000a40 _SEED
       stm32eforth.s:1468   .text.reset_handler:0000000000000a52 $d
       stm32eforth.s:1469   .text.reset_handler:0000000000000a56 _MSEC
       stm32eforth.s:1472   .text.reset_handler:0000000000000a5c MSEC
       stm32eforth.s:1478   .text.reset_handler:0000000000000a66 $d
       stm32eforth.s:1479   .text.reset_handler:0000000000000a6a _TIMER
       stm32eforth.s:1481   .text.reset_handler:0000000000000a70 $t
       stm32eforth.s:1490   .text.reset_handler:0000000000000a7a $d
       stm32eforth.s:1491   .text.reset_handler:0000000000000a7e _TBOOT
       stm32eforth.s:1493   .text.reset_handler:0000000000000a84 $t
       stm32eforth.s:1494   .text.reset_handler:0000000000000a84 TBOOT
       stm32eforth.s:1502   .text.reset_handler:0000000000000a8e $d
       stm32eforth.s:1503   .text.reset_handler:0000000000000a92 _BASE
       stm32eforth.s:1506   .text.reset_handler:0000000000000a98 BASE
       stm32eforth.s:1518   .text.reset_handler:0000000000000aa2 TEMP
       stm32eforth.s:1526   .text.reset_handler:0000000000000aac $d
       stm32eforth.s:1527   .text.reset_handler:0000000000000ab0 _SPAN
       stm32eforth.s:1530   .text.reset_handler:0000000000000ab8 SPAN
       stm32eforth.s:1538   .text.reset_handler:0000000000000ac2 $d
       stm32eforth.s:1539   .text.reset_handler:0000000000000ac6 _INN
       stm32eforth.s:1541   .text.reset_handler:0000000000000aca $t
       stm32eforth.s:1542   .text.reset_handler:0000000000000acc INN
       stm32eforth.s:1550   .text.reset_handler:0000000000000ad6 $d
       stm32eforth.s:1551   .text.reset_handler:0000000000000ada _NTIB
       stm32eforth.s:1554   .text.reset_handler:0000000000000ae0 NTIB
       stm32eforth.s:1562   .text.reset_handler:0000000000000aea $d
       stm32eforth.s:1563   .text.reset_handler:0000000000000aee _TEVAL
       stm32eforth.s:1565   .text.reset_handler:0000000000000af4 $t
       stm32eforth.s:1566   .text.reset_handler:0000000000000af4 TEVAL
       stm32eforth.s:1574   .text.reset_handler:0000000000000afe $d
       stm32eforth.s:1575   .text.reset_handler:0000000000000b02 _HLD
       stm32eforth.s:1577   .text.reset_handler:0000000000000b06 $t
       stm32eforth.s:1578   .text.reset_handler:0000000000000b08 HLD
       stm32eforth.s:1586   .text.reset_handler:0000000000000b12 $d
       stm32eforth.s:1587   .text.reset_handler:0000000000000b16 _CNTXT
       stm32eforth.s:1589   .text.reset_handler:0000000000000b1e $t
       stm32eforth.s:1590   .text.reset_handler:0000000000000b20 CNTXT
       stm32eforth.s:1591   .text.reset_handler:0000000000000b20 CRRNT
       stm32eforth.s:1599   .text.reset_handler:0000000000000b2a $d
       stm32eforth.s:1600   .text.reset_handler:0000000000000b2e _CP
       stm32eforth.s:1603   .text.reset_handler:0000000000000b34 CPP
       stm32eforth.s:1610   .text.reset_handler:0000000000000b3e $d
       stm32eforth.s:1611   .text.reset_handler:0000000000000b42 _FCP
       stm32eforth.s:1613   .text.reset_handler:0000000000000b46 $t
       stm32eforth.s:1614   .text.reset_handler:0000000000000b48 FCP
       stm32eforth.s:1622   .text.reset_handler:0000000000000b52 $d
       stm32eforth.s:1623   .text.reset_handler:0000000000000b56 _LAST
       stm32eforth.s:1626   .text.reset_handler:0000000000000b5c LAST
       stm32eforth.s:1633   .text.reset_handler:0000000000000b66 $d
       stm32eforth.s:1634   .text.reset_handler:0000000000000b6a _USER_BGN
       stm32eforth.s:1637   .text.reset_handler:0000000000000b78 USER_BEGIN
ARM GAS  stm32eforth.s 			page 94


       stm32eforth.s:1644   .text.reset_handler:0000000000000b82 $d
       stm32eforth.s:1645   .text.reset_handler:0000000000000b86 _USER_END
       stm32eforth.s:1648   .text.reset_handler:0000000000000b90 USER_END
       stm32eforth.s:1655   .text.reset_handler:0000000000000b9a $d
       stm32eforth.s:1656   .text.reset_handler:0000000000000b9e _USER_IMG
       stm32eforth.s:1659   .text.reset_handler:0000000000000ba8 USER_IMG
       stm32eforth.s:1670   .text.reset_handler:0000000000000bb2 $d
       stm32eforth.s:1671   .text.reset_handler:0000000000000bb6 _WITHI
       stm32eforth.s:1674   .text.reset_handler:0000000000000bc0 WITHI
       stm32eforth.s:1689   .text.reset_handler:0000000000000be0 $d
       stm32eforth.s:1690   .text.reset_handler:0000000000000be4 _UMMOD
       stm32eforth.s:1693   .text.reset_handler:0000000000000bec UMMOD
       stm32eforth.s:1697   .text.reset_handler:0000000000000bf6 UMMOD0
       stm32eforth.s:1704   .text.reset_handler:0000000000000c06 UMMOD1
       stm32eforth.s:1710   .text.reset_handler:0000000000000c10 UMMOD2
       stm32eforth.s:1720   .text.reset_handler:0000000000000c1a $d
       stm32eforth.s:1721   .text.reset_handler:0000000000000c1e _MSMOD
       stm32eforth.s:1723   .text.reset_handler:0000000000000c24 $t
       stm32eforth.s:1724   .text.reset_handler:0000000000000c24 MSMOD
       stm32eforth.s:1731   .text.reset_handler:0000000000000c3c $d
       stm32eforth.s:1736   .text.reset_handler:0000000000000c50 MMOD1
       stm32eforth.s:1732   .text.reset_handler:0000000000000c40 $t
       stm32eforth.s:1741   .text.reset_handler:0000000000000c60 $d
       stm32eforth.s:1744   .text.reset_handler:0000000000000c6c MMOD2
       stm32eforth.s:1742   .text.reset_handler:0000000000000c64 $t
       stm32eforth.s:1749   .text.reset_handler:0000000000000c7c $d
       stm32eforth.s:1753   .text.reset_handler:0000000000000c8c MMOD3
       stm32eforth.s:1750   .text.reset_handler:0000000000000c80 $t
       stm32eforth.s:1759   .text.reset_handler:0000000000000c90 $d
       stm32eforth.s:1760   .text.reset_handler:0000000000000c94 _SLMOD
       stm32eforth.s:1763   .text.reset_handler:0000000000000c9c SLMOD
       stm32eforth.s:1774   .text.reset_handler:0000000000000cb4 $d
       stm32eforth.s:1775   .text.reset_handler:0000000000000cb8 _MODD
       stm32eforth.s:1777   .text.reset_handler:0000000000000cbc $t
       stm32eforth.s:1787   .text.reset_handler:0000000000000ccc $d
       stm32eforth.s:1788   .text.reset_handler:0000000000000cd0 _SLASH
       stm32eforth.s:1790   .text.reset_handler:0000000000000cd2 $t
       stm32eforth.s:1791   .text.reset_handler:0000000000000cd4 SLASH
       stm32eforth.s:1801   .text.reset_handler:0000000000000ce8 $d
       stm32eforth.s:1802   .text.reset_handler:0000000000000cec _SSMOD
       stm32eforth.s:1804   .text.reset_handler:0000000000000cf2 $t
       stm32eforth.s:1805   .text.reset_handler:0000000000000cf4 SSMOD
       stm32eforth.s:1816   .text.reset_handler:0000000000000d0c $d
       stm32eforth.s:1817   .text.reset_handler:0000000000000d10 _STASL
       stm32eforth.s:1820   .text.reset_handler:0000000000000d14 STASL
       stm32eforth.s:1833   .text.reset_handler:0000000000000d28 $d
       stm32eforth.s:1834   .text.reset_handler:0000000000000d2c _ALGND
       stm32eforth.s:1836   .text.reset_handler:0000000000000d34 $t
       stm32eforth.s:1837   .text.reset_handler:0000000000000d34 ALGND
       stm32eforth.s:1846   .text.reset_handler:0000000000000d42 $d
       stm32eforth.s:1847   .text.reset_handler:0000000000000d46 _TCHAR
       stm32eforth.s:1849   .text.reset_handler:0000000000000d4c $t
       stm32eforth.s:1850   .text.reset_handler:0000000000000d4c TCHAR
       stm32eforth.s:1853   .text.reset_handler:0000000000000d54 $d
       stm32eforth.s:1854   .text.reset_handler:0000000000000d58 $t
       stm32eforth.s:1858   .text.reset_handler:0000000000000d68 $d
       stm32eforth.s:1859   .text.reset_handler:0000000000000d6c $t
ARM GAS  stm32eforth.s 			page 95


       stm32eforth.s:1862   .text.reset_handler:0000000000000d78 $d
       stm32eforth.s:1866   .text.reset_handler:0000000000000d88 TCHA1
       stm32eforth.s:1863   .text.reset_handler:0000000000000d7c $t
       stm32eforth.s:1865   .text.reset_handler:0000000000000d84 $d
       stm32eforth.s:1867   .text.reset_handler:0000000000000d88 $t
       stm32eforth.s:1872   .text.reset_handler:0000000000000d8c $d
       stm32eforth.s:1873   .text.reset_handler:0000000000000d90 _DEPTH
       stm32eforth.s:1875   .text.reset_handler:0000000000000d96 $t
       stm32eforth.s:1876   .text.reset_handler:0000000000000d98 DEPTH
       stm32eforth.s:1888   .text.reset_handler:0000000000000db2 $d
       stm32eforth.s:1889   .text.reset_handler:0000000000000db6 _PICK
       stm32eforth.s:1892   .text.reset_handler:0000000000000dbc PICK
       stm32eforth.s:1907   .text.reset_handler:0000000000000dd8 $d
       stm32eforth.s:1908   .text.reset_handler:0000000000000ddc _HERE
       stm32eforth.s:1911   .text.reset_handler:0000000000000de4 HERE
       stm32eforth.s:1920   .text.reset_handler:0000000000000df4 $d
       stm32eforth.s:1921   .text.reset_handler:0000000000000df8 _PAD
       stm32eforth.s:1923   .text.reset_handler:0000000000000dfc $t
       stm32eforth.s:1924   .text.reset_handler:0000000000000dfc PAD
       stm32eforth.s:1933   .text.reset_handler:0000000000000e0c $d
       stm32eforth.s:1934   .text.reset_handler:0000000000000e10 _TIB
       stm32eforth.s:1936   .text.reset_handler:0000000000000e14 $t
       stm32eforth.s:1937   .text.reset_handler:0000000000000e14 TIB
       stm32eforth.s:1945   .text.reset_handler:0000000000000e1c $d
       stm32eforth.s:1946   .text.reset_handler:0000000000000e20 _ATEXE
       stm32eforth.s:1949   .text.reset_handler:0000000000000e2c ATEXE
       stm32eforth.s:1961   .text.reset_handler:0000000000000e3e $d
       stm32eforth.s:1962   .text.reset_handler:0000000000000e42 _CMOVE
       stm32eforth.s:1964   .text.reset_handler:0000000000000e48 $t
       stm32eforth.s:1965   .text.reset_handler:0000000000000e48 CMOVE
       stm32eforth.s:1972   .text.reset_handler:0000000000000e5a CMOV1
       stm32eforth.s:1969   .text.reset_handler:0000000000000e52 CMOV0
       stm32eforth.s:1977   .text.reset_handler:0000000000000e64 CMOV2
       stm32eforth.s:1984   .text.reset_handler:0000000000000e6a $d
       stm32eforth.s:1985   .text.reset_handler:0000000000000e6e _MOVE
       stm32eforth.s:1988   .text.reset_handler:0000000000000e74 MOVE
       stm32eforth.s:1996   .text.reset_handler:0000000000000e8a MOVE1
       stm32eforth.s:1993   .text.reset_handler:0000000000000e82 MOVE0
       stm32eforth.s:2001   .text.reset_handler:0000000000000e94 MOVE2
       stm32eforth.s:2008   .text.reset_handler:0000000000000e9a $d
       stm32eforth.s:2009   .text.reset_handler:0000000000000e9e _FILL
       stm32eforth.s:2012   .text.reset_handler:0000000000000ea4 FILL
       stm32eforth.s:2015   .text.reset_handler:0000000000000eac FILL0
       stm32eforth.s:2018   .text.reset_handler:0000000000000eb0 FILL1
       stm32eforth.s:2024   .text.reset_handler:0000000000000ebe FILL2
       stm32eforth.s:2031   .text.reset_handler:0000000000000ec4 $d
       stm32eforth.s:2032   .text.reset_handler:0000000000000ec8 _PACKS
       stm32eforth.s:2035   .text.reset_handler:0000000000000ed0 PACKS
       stm32eforth.s:2044   .text.reset_handler:0000000000000ef0 $d
       stm32eforth.s:2045   .text.reset_handler:0000000000000ef4 $t
       stm32eforth.s:2047   .text.reset_handler:0000000000000efc $d
       stm32eforth.s:2048   .text.reset_handler:0000000000000f00 $t
       stm32eforth.s:2065   .text.reset_handler:0000000000000f28 $d
       stm32eforth.s:2066   .text.reset_handler:0000000000000f2c _DIGIT
       stm32eforth.s:2068   .text.reset_handler:0000000000000f32 $t
       stm32eforth.s:2069   .text.reset_handler:0000000000000f34 DIGIT
       stm32eforth.s:2072   .text.reset_handler:0000000000000f3c $d
ARM GAS  stm32eforth.s 			page 96


       stm32eforth.s:2073   .text.reset_handler:0000000000000f40 $t
       stm32eforth.s:2083   .text.reset_handler:0000000000000f58 $d
       stm32eforth.s:2084   .text.reset_handler:0000000000000f5c _EXTRC
       stm32eforth.s:2086   .text.reset_handler:0000000000000f64 $t
       stm32eforth.s:2087   .text.reset_handler:0000000000000f64 EXTRC
       stm32eforth.s:2090   .text.reset_handler:0000000000000f6c $d
       stm32eforth.s:2091   .text.reset_handler:0000000000000f70 $t
       stm32eforth.s:2100   .text.reset_handler:0000000000000f84 $d
       stm32eforth.s:2101   .text.reset_handler:0000000000000f88 _BDIGS
       stm32eforth.s:2104   .text.reset_handler:0000000000000f8c BDIGS
       stm32eforth.s:2114   .text.reset_handler:0000000000000fa0 $d
       stm32eforth.s:2115   .text.reset_handler:0000000000000fa4 _HOLD
       stm32eforth.s:2118   .text.reset_handler:0000000000000fac HOLD
       stm32eforth.s:2132   .text.reset_handler:0000000000000fd0 $d
       stm32eforth.s:2133   .text.reset_handler:0000000000000fd4 _DIG
       stm32eforth.s:2135   .text.reset_handler:0000000000000fd6 $t
       stm32eforth.s:2136   .text.reset_handler:0000000000000fd8 DIG
       stm32eforth.s:2147   .text.reset_handler:0000000000000ff0 $d
       stm32eforth.s:2148   .text.reset_handler:0000000000000ff4 _DIGS
       stm32eforth.s:2151   .text.reset_handler:0000000000000ff8 DIGS
       stm32eforth.s:2153   .text.reset_handler:0000000000000ffc DIGS1
       stm32eforth.s:2157   .text.reset_handler:0000000000001008 $d
       stm32eforth.s:2159   .text.reset_handler:000000000000100e DIGS2
       stm32eforth.s:2158   .text.reset_handler:000000000000100c $t
       stm32eforth.s:2165   .text.reset_handler:0000000000001012 $d
       stm32eforth.s:2166   .text.reset_handler:0000000000001016 _SIGN
       stm32eforth.s:2169   .text.reset_handler:000000000000101c SIGN
       stm32eforth.s:2173   .text.reset_handler:0000000000001028 $d
       stm32eforth.s:2177   .text.reset_handler:0000000000001038 SIGN1
       stm32eforth.s:2174   .text.reset_handler:000000000000102c $t
       stm32eforth.s:2175   .text.reset_handler:0000000000001030 $d
       stm32eforth.s:2176   .text.reset_handler:0000000000001034 $t
       stm32eforth.s:2183   .text.reset_handler:000000000000103c $d
       stm32eforth.s:2184   .text.reset_handler:0000000000001040 _EDIGS
       stm32eforth.s:2187   .text.reset_handler:0000000000001044 EDIGS
       stm32eforth.s:2204   .text.reset_handler:0000000000001064 STRR
       stm32eforth.s:2219   .text.reset_handler:000000000000108c $d
       stm32eforth.s:2220   .text.reset_handler:0000000000001090 _HEX
       stm32eforth.s:2222   .text.reset_handler:0000000000001094 $t
       stm32eforth.s:2223   .text.reset_handler:0000000000001094 HEX
       stm32eforth.s:2226   .text.reset_handler:000000000000109c $d
       stm32eforth.s:2227   .text.reset_handler:00000000000010a0 $t
       stm32eforth.s:2234   .text.reset_handler:00000000000010ac $d
       stm32eforth.s:2235   .text.reset_handler:00000000000010b0 _DECIM
       stm32eforth.s:2237   .text.reset_handler:00000000000010b8 $t
       stm32eforth.s:2238   .text.reset_handler:00000000000010b8 DECIM
       stm32eforth.s:2241   .text.reset_handler:00000000000010c0 $d
       stm32eforth.s:2242   .text.reset_handler:00000000000010c4 $t
       stm32eforth.s:2252   .text.reset_handler:00000000000010d0 $d
       stm32eforth.s:2253   .text.reset_handler:00000000000010d4 _DIGTQ
       stm32eforth.s:2256   .text.reset_handler:00000000000010dc DIGTQ
       stm32eforth.s:2260   .text.reset_handler:00000000000010e8 $d
       stm32eforth.s:2261   .text.reset_handler:00000000000010ec $t
       stm32eforth.s:2263   .text.reset_handler:00000000000010f4 $d
       stm32eforth.s:2264   .text.reset_handler:00000000000010f8 $t
       stm32eforth.s:2267   .text.reset_handler:0000000000001104 $d
       stm32eforth.s:2276   .text.reset_handler:0000000000001128 DGTQ1
ARM GAS  stm32eforth.s 			page 97


       stm32eforth.s:2268   .text.reset_handler:0000000000001108 $t
       stm32eforth.s:2269   .text.reset_handler:000000000000110c $d
       stm32eforth.s:2270   .text.reset_handler:0000000000001110 $t
       stm32eforth.s:2273   .text.reset_handler:000000000000111c $d
       stm32eforth.s:2274   .text.reset_handler:0000000000001120 $t
       stm32eforth.s:2285   .text.reset_handler:0000000000001138 $d
       stm32eforth.s:2286   .text.reset_handler:000000000000113c _NUMBQ
       stm32eforth.s:2288   .text.reset_handler:0000000000001144 $t
       stm32eforth.s:2289   .text.reset_handler:0000000000001144 NUMBQ
       stm32eforth.s:2295   .text.reset_handler:0000000000001158 $d
       stm32eforth.s:2296   .text.reset_handler:000000000000115c $t
       stm32eforth.s:2301   .text.reset_handler:0000000000001170 $d
       stm32eforth.s:2302   .text.reset_handler:0000000000001174 $t
       stm32eforth.s:2304   .text.reset_handler:000000000000117c $d
       stm32eforth.s:2310   .text.reset_handler:0000000000001194 NUMQ1
       stm32eforth.s:2305   .text.reset_handler:0000000000001180 $t
       stm32eforth.s:2314   .text.reset_handler:00000000000011a0 $d
       stm32eforth.s:2315   .text.reset_handler:00000000000011a4 $t
       stm32eforth.s:2325   .text.reset_handler:00000000000011cc $d
       stm32eforth.s:2364   .text.reset_handler:0000000000001258 NUMQ6
       stm32eforth.s:2326   .text.reset_handler:00000000000011d0 $t
       stm32eforth.s:2328   .text.reset_handler:00000000000011d8 NUMQ2
       stm32eforth.s:2336   .text.reset_handler:00000000000011f4 $d
       stm32eforth.s:2355   .text.reset_handler:000000000000123c NUMQ4
       stm32eforth.s:2337   .text.reset_handler:00000000000011f8 $t
       stm32eforth.s:2345   .text.reset_handler:0000000000001218 $d
       stm32eforth.s:2346   .text.reset_handler:000000000000121c $t
       stm32eforth.s:2350   .text.reset_handler:000000000000122c $d
       stm32eforth.s:2352   .text.reset_handler:0000000000001234 NUMQ3
       stm32eforth.s:2351   .text.reset_handler:0000000000001230 $t
       stm32eforth.s:2362   .text.reset_handler:0000000000001254 NUMQ5
       stm32eforth.s:2361   .text.reset_handler:0000000000001250 $d
       stm32eforth.s:2363   .text.reset_handler:0000000000001254 $t
       stm32eforth.s:2378   .text.reset_handler:0000000000001270 $d
       stm32eforth.s:2379   .text.reset_handler:0000000000001274 _KEY
       stm32eforth.s:2381   .text.reset_handler:0000000000001278 $t
       stm32eforth.s:2382   .text.reset_handler:0000000000001278 KEY
       stm32eforth.s:2384   .text.reset_handler:000000000000127c KEY1
       stm32eforth.s:2387   .text.reset_handler:0000000000001284 $d
       stm32eforth.s:2389   .text.reset_handler:0000000000001288 $t
       stm32eforth.s:2391   .text.reset_handler:0000000000001290 $d
       stm32eforth.s:2392   .text.reset_handler:0000000000001294 $t
       stm32eforth.s:2395   .text.reset_handler:00000000000012a0 $d
       stm32eforth.s:2396   .text.reset_handler:00000000000012a4 $t
       stm32eforth.s:2401   .text.reset_handler:00000000000012a8 $d
       stm32eforth.s:2402   .text.reset_handler:00000000000012ac _SPACE
       stm32eforth.s:2404   .text.reset_handler:00000000000012b2 $t
       stm32eforth.s:2405   .text.reset_handler:00000000000012b4 SPACE
       stm32eforth.s:2414   .text.reset_handler:00000000000012c4 $d
       stm32eforth.s:2415   .text.reset_handler:00000000000012c8 _SPACS
       stm32eforth.s:2418   .text.reset_handler:00000000000012d0 SPACS
       stm32eforth.s:2421   .text.reset_handler:00000000000012d8 $d
       stm32eforth.s:2422   .text.reset_handler:00000000000012dc $t
       stm32eforth.s:2427   .text.reset_handler:00000000000012ec CHAR2
       stm32eforth.s:2425   .text.reset_handler:00000000000012e8 CHAR1
       stm32eforth.s:2429   .text.reset_handler:00000000000012f0 $d
       stm32eforth.s:2430   .text.reset_handler:00000000000012f4 $t
ARM GAS  stm32eforth.s 			page 98


       stm32eforth.s:2435   .text.reset_handler:00000000000012f8 $d
       stm32eforth.s:2436   .text.reset_handler:00000000000012fc _TYPEE
       stm32eforth.s:2439   .text.reset_handler:0000000000001304 TYPEE
       stm32eforth.s:2447   .text.reset_handler:000000000000131a TYPE2
       stm32eforth.s:2443   .text.reset_handler:000000000000130e TYPE1
       stm32eforth.s:2449   .text.reset_handler:000000000000131e $d
       stm32eforth.s:2450   .text.reset_handler:0000000000001322 $t
       stm32eforth.s:2456   .text.reset_handler:000000000000132a $d
       stm32eforth.s:2457   .text.reset_handler:000000000000132e _CR
       stm32eforth.s:2460   .text.reset_handler:0000000000001334 CR
       stm32eforth.s:2463   .text.reset_handler:000000000000133c $d
       stm32eforth.s:2464   .text.reset_handler:0000000000001340 $t
       stm32eforth.s:2466   .text.reset_handler:0000000000001348 $d
       stm32eforth.s:2467   .text.reset_handler:000000000000134c $t
       stm32eforth.s:2478   .text.reset_handler:0000000000001354 DOSTR
       stm32eforth.s:2501   .text.reset_handler:0000000000001388 STRQP
       stm32eforth.s:2513   .text.reset_handler:0000000000001394 DOTST
       stm32eforth.s:2526   .text.reset_handler:00000000000013a4 DOTQP
       stm32eforth.s:2535   .text.reset_handler:00000000000013b4 $d
       stm32eforth.s:2536   .text.reset_handler:00000000000013b8 _DOTR
       stm32eforth.s:2539   .text.reset_handler:00000000000013bc DOTR
       stm32eforth.s:2553   .text.reset_handler:00000000000013e0 $d
       stm32eforth.s:2554   .text.reset_handler:00000000000013e4 _UDOTR
       stm32eforth.s:2556   .text.reset_handler:00000000000013e8 $t
       stm32eforth.s:2557   .text.reset_handler:00000000000013e8 UDOTR
       stm32eforth.s:2573   .text.reset_handler:0000000000001414 $d
       stm32eforth.s:2574   .text.reset_handler:0000000000001418 _UDOT
       stm32eforth.s:2577   .text.reset_handler:000000000000141c UDOT
       stm32eforth.s:2589   .text.reset_handler:0000000000001438 $d
       stm32eforth.s:2590   .text.reset_handler:000000000000143c _DOT
       stm32eforth.s:2592   .text.reset_handler:000000000000143e $t
       stm32eforth.s:2593   .text.reset_handler:0000000000001440 DOT
       stm32eforth.s:2598   .text.reset_handler:0000000000001450 $d
       stm32eforth.s:2599   .text.reset_handler:0000000000001454 $t
       stm32eforth.s:2601   .text.reset_handler:000000000000145c $d
       stm32eforth.s:2604   .text.reset_handler:0000000000001468 DOT1
       stm32eforth.s:2602   .text.reset_handler:0000000000001460 $t
       stm32eforth.s:2613   .text.reset_handler:0000000000001478 $d
       stm32eforth.s:2614   .text.reset_handler:000000000000147c _QUEST
       stm32eforth.s:2616   .text.reset_handler:000000000000147e $t
       stm32eforth.s:2617   .text.reset_handler:0000000000001480 QUEST
       stm32eforth.s:2633   .text.reset_handler:0000000000001490 PARS
       stm32eforth.s:2641   .text.reset_handler:00000000000014ac $d
       stm32eforth.s:2709   .text.reset_handler:000000000000159e PARS8
       stm32eforth.s:2642   .text.reset_handler:00000000000014b0 $t
       stm32eforth.s:2648   .text.reset_handler:00000000000014c8 $d
       stm32eforth.s:2670   .text.reset_handler:0000000000001518 PARS3
       stm32eforth.s:2649   .text.reset_handler:00000000000014cc $t
       stm32eforth.s:2650   .text.reset_handler:00000000000014d0 PARS1
       stm32eforth.s:2658   .text.reset_handler:00000000000014ec $d
       stm32eforth.s:2668   .text.reset_handler:0000000000001514 PARS2
       stm32eforth.s:2659   .text.reset_handler:00000000000014f0 $t
       stm32eforth.s:2661   .text.reset_handler:00000000000014f8 $d
       stm32eforth.s:2662   .text.reset_handler:00000000000014fc $t
       stm32eforth.s:2665   .text.reset_handler:0000000000001508 $d
       stm32eforth.s:2666   .text.reset_handler:000000000000150c $t
       stm32eforth.s:2674   .text.reset_handler:0000000000001524 PARS4
ARM GAS  stm32eforth.s 			page 99


       stm32eforth.s:2685   .text.reset_handler:000000000000154c $d
       stm32eforth.s:2687   .text.reset_handler:0000000000001554 PARS5
       stm32eforth.s:2686   .text.reset_handler:0000000000001550 $t
       stm32eforth.s:2689   .text.reset_handler:0000000000001558 $d
       stm32eforth.s:2696   .text.reset_handler:0000000000001572 PARS6
       stm32eforth.s:2690   .text.reset_handler:000000000000155c $t
       stm32eforth.s:2692   .text.reset_handler:0000000000001564 $d
       stm32eforth.s:2693   .text.reset_handler:0000000000001568 $t
       stm32eforth.s:2702   .text.reset_handler:0000000000001586 PARS7
       stm32eforth.s:2718   .text.reset_handler:00000000000015ae $d
       stm32eforth.s:2719   .text.reset_handler:00000000000015b2 _PARSE
       stm32eforth.s:2721   .text.reset_handler:00000000000015b8 $t
       stm32eforth.s:2722   .text.reset_handler:00000000000015b8 PARSE
       stm32eforth.s:2743   .text.reset_handler:00000000000015f8 $d
       stm32eforth.s:2744   .text.reset_handler:00000000000015fc _DOTPR
       stm32eforth.s:2747   .text.reset_handler:0000000000001600 DOTPR
       stm32eforth.s:2750   .text.reset_handler:0000000000001608 $d
       stm32eforth.s:2751   .text.reset_handler:000000000000160c $t
       stm32eforth.s:2758   .text.reset_handler:0000000000001618 $d
       stm32eforth.s:2759   .text.reset_handler:000000000000161c _PAREN
       stm32eforth.s:2761   .text.reset_handler:000000000000161e $t
       stm32eforth.s:2762   .text.reset_handler:0000000000001620 PAREN
       stm32eforth.s:2765   .text.reset_handler:0000000000001628 $d
       stm32eforth.s:2766   .text.reset_handler:000000000000162c $t
       stm32eforth.s:2773   .text.reset_handler:0000000000001638 $d
       stm32eforth.s:2774   .text.reset_handler:000000000000163c _BKSLA
       stm32eforth.s:2776   .text.reset_handler:000000000000163e $t
       stm32eforth.s:2777   .text.reset_handler:0000000000001640 BKSLA
       stm32eforth.s:2788   .text.reset_handler:0000000000001658 $d
       stm32eforth.s:2789   .text.reset_handler:000000000000165c _CHAR
       stm32eforth.s:2792   .text.reset_handler:0000000000001664 CHAR
       stm32eforth.s:2803   .text.reset_handler:000000000000167c $d
       stm32eforth.s:2804   .text.reset_handler:0000000000001680 _WORDD
       stm32eforth.s:2807   .text.reset_handler:0000000000001688 WORDD
       stm32eforth.s:2818   .text.reset_handler:00000000000016a0 $d
       stm32eforth.s:2819   .text.reset_handler:00000000000016a4 _TOKEN
       stm32eforth.s:2821   .text.reset_handler:00000000000016aa $t
       stm32eforth.s:2822   .text.reset_handler:00000000000016ac TOKEN
       stm32eforth.s:2834   .text.reset_handler:00000000000016bc $d
       stm32eforth.s:2835   .text.reset_handler:00000000000016c0 _NAMET
       stm32eforth.s:2837   .text.reset_handler:00000000000016c6 $t
       stm32eforth.s:2838   .text.reset_handler:00000000000016c8 NAMET
       stm32eforth.s:2842   .text.reset_handler:00000000000016d4 $d
       stm32eforth.s:2843   .text.reset_handler:00000000000016d8 $t
       stm32eforth.s:2856   .text.reset_handler:00000000000016e8 $d
       stm32eforth.s:2857   .text.reset_handler:00000000000016ec _SAMEQ
       stm32eforth.s:2859   .text.reset_handler:00000000000016f2 $t
       stm32eforth.s:2860   .text.reset_handler:00000000000016f4 SAMEQ
       stm32eforth.s:2880   .text.reset_handler:000000000000173c SAME2
       stm32eforth.s:2864   .text.reset_handler:0000000000001700 SAME1
       stm32eforth.s:2876   .text.reset_handler:000000000000172c $d
       stm32eforth.s:2877   .text.reset_handler:0000000000001730 $t
       stm32eforth.s:2882   .text.reset_handler:0000000000001740 $d
       stm32eforth.s:2883   .text.reset_handler:0000000000001744 $t
       stm32eforth.s:2884   .text.reset_handler:0000000000001748 $d
       stm32eforth.s:2885   .text.reset_handler:000000000000174c $t
       stm32eforth.s:2897   .text.reset_handler:0000000000001750 FIND
ARM GAS  stm32eforth.s 			page 100


       stm32eforth.s:2906   .text.reset_handler:0000000000001770 FIND1
       stm32eforth.s:2909   .text.reset_handler:0000000000001778 $d
       stm32eforth.s:2929   .text.reset_handler:00000000000017c0 FIND6
       stm32eforth.s:2910   .text.reset_handler:000000000000177c $t
       stm32eforth.s:2913   .text.reset_handler:0000000000001788 $d
       stm32eforth.s:2914   .text.reset_handler:000000000000178c $t
       stm32eforth.s:2918   .text.reset_handler:000000000000179c $d
       stm32eforth.s:2922   .text.reset_handler:00000000000017ac FIND2
       stm32eforth.s:2919   .text.reset_handler:00000000000017a0 $t
       stm32eforth.s:2927   .text.reset_handler:00000000000017bc FIND3
       stm32eforth.s:2936   .text.reset_handler:00000000000017d8 FIND4
       stm32eforth.s:2938   .text.reset_handler:00000000000017dc $d
       stm32eforth.s:2943   .text.reset_handler:00000000000017f0 FIND5
       stm32eforth.s:2939   .text.reset_handler:00000000000017e0 $t
       stm32eforth.s:2957   .text.reset_handler:0000000000001814 $d
       stm32eforth.s:2958   .text.reset_handler:0000000000001818 _NAMEQ
       stm32eforth.s:2960   .text.reset_handler:000000000000181e $t
       stm32eforth.s:2961   .text.reset_handler:0000000000001820 NAMEQ
       stm32eforth.s:2978   .text.reset_handler:0000000000001834 BKSP
       stm32eforth.s:2987   .text.reset_handler:0000000000001854 $d
       stm32eforth.s:3000   .text.reset_handler:000000000000187c BACK1
       stm32eforth.s:2988   .text.reset_handler:0000000000001858 $t
       stm32eforth.s:2989   .text.reset_handler:000000000000185c $d
       stm32eforth.s:2990   .text.reset_handler:0000000000001860 $t
       stm32eforth.s:2997   .text.reset_handler:0000000000001874 $d
       stm32eforth.s:2998   .text.reset_handler:0000000000001878 $t
       stm32eforth.s:3010   .text.reset_handler:0000000000001880 TAP
       stm32eforth.s:3027   .text.reset_handler:000000000000189c KTAP
       stm32eforth.s:3028   .text.reset_handler:000000000000189c TTAP
       stm32eforth.s:3032   .text.reset_handler:00000000000018a8 $d
       stm32eforth.s:3033   .text.reset_handler:00000000000018ac $t
       stm32eforth.s:3035   .text.reset_handler:00000000000018b4 $d
       stm32eforth.s:3048   .text.reset_handler:00000000000018e4 KTAP2
       stm32eforth.s:3036   .text.reset_handler:00000000000018b8 $t
       stm32eforth.s:3037   .text.reset_handler:00000000000018bc $d
       stm32eforth.s:3038   .text.reset_handler:00000000000018c0 $t
       stm32eforth.s:3040   .text.reset_handler:00000000000018c8 $d
       stm32eforth.s:3045   .text.reset_handler:00000000000018dc KTAP1
       stm32eforth.s:3041   .text.reset_handler:00000000000018cc $t
       stm32eforth.s:3044   .text.reset_handler:00000000000018d8 $d
       stm32eforth.s:3046   .text.reset_handler:00000000000018dc $t
       stm32eforth.s:3058   .text.reset_handler:00000000000018f8 $d
       stm32eforth.s:3059   .text.reset_handler:00000000000018fc _ACCEP
       stm32eforth.s:3062   .text.reset_handler:0000000000001904 ACCEP
       stm32eforth.s:3067   .text.reset_handler:0000000000001914 ACCP1
       stm32eforth.s:3071   .text.reset_handler:0000000000001920 $d
       stm32eforth.s:3087   .text.reset_handler:0000000000001950 ACCP4
       stm32eforth.s:3072   .text.reset_handler:0000000000001924 $t
       stm32eforth.s:3076   .text.reset_handler:0000000000001934 $d
       stm32eforth.s:3077   .text.reset_handler:0000000000001938 $t
       stm32eforth.s:3079   .text.reset_handler:0000000000001940 $d
       stm32eforth.s:3082   .text.reset_handler:000000000000194a ACCP2
       stm32eforth.s:3080   .text.reset_handler:0000000000001944 $t
       stm32eforth.s:3085   .text.reset_handler:000000000000194e ACCP3
       stm32eforth.s:3096   .text.reset_handler:0000000000001960 $d
       stm32eforth.s:3097   .text.reset_handler:0000000000001964 _QUERY
       stm32eforth.s:3099   .text.reset_handler:000000000000196a $t
ARM GAS  stm32eforth.s 			page 101


       stm32eforth.s:3100   .text.reset_handler:000000000000196c QUERY
       stm32eforth.s:3104   .text.reset_handler:0000000000001978 $d
       stm32eforth.s:3105   .text.reset_handler:000000000000197c $t
       stm32eforth.s:3110   .text.reset_handler:0000000000001990 $d
       stm32eforth.s:3111   .text.reset_handler:0000000000001994 $t
       stm32eforth.s:3121   .text.reset_handler:00000000000019a0 $d
       stm32eforth.s:3122   .text.reset_handler:00000000000019a4 _ABORT
       stm32eforth.s:3124   .text.reset_handler:00000000000019aa $t
       stm32eforth.s:3125   .text.reset_handler:00000000000019ac ABORT
       stm32eforth.s:3131   .text.reset_handler:00000000000019c0 $d
       stm32eforth.s:3132   .text.reset_handler:00000000000019c4 $t
       stm32eforth.s:3278   .text.reset_handler:0000000000001b34 PRESE
       stm32eforth.s:3293   .text.reset_handler:0000000000001b4c QUIT
       stm32eforth.s:3144   .text.reset_handler:00000000000019d4 ABORQ
       stm32eforth.s:3147   .text.reset_handler:00000000000019dc $d
       stm32eforth.s:3153   .text.reset_handler:00000000000019f4 ABOR1
       stm32eforth.s:3148   .text.reset_handler:00000000000019e0 $t
       stm32eforth.s:3164   .text.reset_handler:0000000000001a00 $d
       stm32eforth.s:3165   .text.reset_handler:0000000000001a04 _INTER
       stm32eforth.s:3167   .text.reset_handler:0000000000001a10 $t
       stm32eforth.s:3173   .text.reset_handler:0000000000001a20 $d
       stm32eforth.s:3184   .text.reset_handler:0000000000001a50 INTE1
       stm32eforth.s:3174   .text.reset_handler:0000000000001a24 $t
       stm32eforth.s:3176   .text.reset_handler:0000000000001a2c $d
       stm32eforth.s:3177   .text.reset_handler:0000000000001a30 $t
       stm32eforth.s:3179   .text.reset_handler:0000000000001a38 $d
       stm32eforth.s:3181   .text.reset_handler:0000000000001a46 $t
       stm32eforth.s:3187   .text.reset_handler:0000000000001a58 $d
       stm32eforth.s:3189   .text.reset_handler:0000000000001a60 INTE2
       stm32eforth.s:3188   .text.reset_handler:0000000000001a5c $t
       stm32eforth.s:3195   .text.reset_handler:0000000000001a64 $d
       stm32eforth.s:3196   .text.reset_handler:0000000000001a68 _LBRAC
       stm32eforth.s:3198   .text.reset_handler:0000000000001a6a $t
       stm32eforth.s:3199   .text.reset_handler:0000000000001a6c LBRAC
       stm32eforth.s:3202   .text.reset_handler:0000000000001a74 $d
       stm32eforth.s:3203   .text.reset_handler:0000000000001a78 $t
       stm32eforth.s:3210   .text.reset_handler:0000000000001a84 $d
       stm32eforth.s:3211   .text.reset_handler:0000000000001a88 _DOTOK
       stm32eforth.s:3213   .text.reset_handler:0000000000001a8c $t
       stm32eforth.s:3214   .text.reset_handler:0000000000001a8c DOTOK
       stm32eforth.s:3217   .text.reset_handler:0000000000001a94 $d
       stm32eforth.s:3218   .text.reset_handler:0000000000001a98 $t
       stm32eforth.s:3222   .text.reset_handler:0000000000001aa8 $d
       stm32eforth.s:3226   .text.reset_handler:0000000000001ab4 DOTO1
       stm32eforth.s:3223   .text.reset_handler:0000000000001aac $t
       stm32eforth.s:3224   .text.reset_handler:0000000000001ab0 $d
       stm32eforth.s:3227   .text.reset_handler:0000000000001ab4 $t
       stm32eforth.s:3233   .text.reset_handler:0000000000001abc $d
       stm32eforth.s:3234   .text.reset_handler:0000000000001ac0 _QSTAC
       stm32eforth.s:3237   .text.reset_handler:0000000000001ac8 QSTAC
       stm32eforth.s:3242   .text.reset_handler:0000000000001ad8 $d
       stm32eforth.s:3250   .text.reset_handler:0000000000001ae8 $d
       stm32eforth.s:3251   .text.reset_handler:0000000000001aec _EVAL
       stm32eforth.s:3254   .text.reset_handler:0000000000001af4 EVAL
       stm32eforth.s:3256   .text.reset_handler:0000000000001af8 EVAL1
       stm32eforth.s:3261   .text.reset_handler:0000000000001b08 $d
       stm32eforth.s:3266   .text.reset_handler:0000000000001b1c EVAL2
ARM GAS  stm32eforth.s 			page 102


       stm32eforth.s:3262   .text.reset_handler:0000000000001b0c $t
       stm32eforth.s:3274   .text.reset_handler:0000000000001b28 $d
       stm32eforth.s:3275   .text.reset_handler:0000000000001b2c _PRESE
       stm32eforth.s:3289   .text.reset_handler:0000000000001b42 $d
       stm32eforth.s:3290   .text.reset_handler:0000000000001b46 _QUIT
       stm32eforth.s:3297   .text.reset_handler:0000000000001b58 QUIT1
       stm32eforth.s:3299   .text.reset_handler:0000000000001b5c QUIT2
       stm32eforth.s:3303   .text.reset_handler:0000000000001b68 $d
       stm32eforth.s:3312   .text.reset_handler:0000000000001b70 _UNLOCK
       stm32eforth.s:3315   .text.reset_handler:0000000000001b78 UNLOCK
       stm32eforth.s:3318   .text.reset_handler:0000000000001b80 $d
       stm32eforth.s:3339   .text.reset_handler:0000000000001ba0 LOCK
       stm32eforth.s:3615   .text.reset_handler:0000000000001ec4 flash_regs
       stm32eforth.s:3319   .text.reset_handler:0000000000001b84 $t
       stm32eforth.s:3346   .text.reset_handler:0000000000001bac WAIT_BSY
       stm32eforth.s:3348   .text.reset_handler:0000000000001bae WAIT1
       stm32eforth.s:3359   .text.reset_handler:0000000000001bb8 $d
       stm32eforth.s:3360   .text.reset_handler:0000000000001bbc _EPAGE
       stm32eforth.s:3364   .text.reset_handler:0000000000001bc8 EPAGE
       stm32eforth.s:3369   .text.reset_handler:0000000000001bd4 $d
       stm32eforth.s:3370   .text.reset_handler:0000000000001bd8 $t
       stm32eforth.s:3380   .text.reset_handler:0000000000001bf6 $d
       stm32eforth.s:3381   .text.reset_handler:0000000000001bfa $t
       stm32eforth.s:3385   .text.reset_handler:0000000000001c08 $d
       stm32eforth.s:3387   .text.reset_handler:0000000000001c16 $t
       stm32eforth.s:3392   .text.reset_handler:0000000000001c1c HWORD_WRITE
       stm32eforth.s:3405   .text.reset_handler:0000000000001c3e $d
       stm32eforth.s:3406   .text.reset_handler:0000000000001c42 $t
       stm32eforth.s:3407   .text.reset_handler:0000000000001c46 $d
       stm32eforth.s:3409   .text.reset_handler:0000000000001c54 $t
       stm32eforth.s:3418   .text.reset_handler:0000000000001c58 $d
       stm32eforth.s:3419   .text.reset_handler:0000000000001c5c _ISTOR
       stm32eforth.s:3422   .text.reset_handler:0000000000001c60 ISTOR
       stm32eforth.s:3426   .text.reset_handler:0000000000001c6c $d
       stm32eforth.s:3427   .text.reset_handler:0000000000001c70 $t
       stm32eforth.s:3438   .text.reset_handler:0000000000001c9c $d
       stm32eforth.s:3439   .text.reset_handler:0000000000001ca0 $t
       stm32eforth.s:3444   .text.reset_handler:0000000000001ca8 $d
       stm32eforth.s:3445   .text.reset_handler:0000000000001cac _IMGQ
       stm32eforth.s:3448   .text.reset_handler:0000000000001cb4 IMGQ
       stm32eforth.s:3454   .text.reset_handler:0000000000001cc8 $d
       stm32eforth.s:3455   .text.reset_handler:0000000000001ccc $t
       stm32eforth.s:3460   .text.reset_handler:0000000000001cd4 $d
       stm32eforth.s:3461   .text.reset_handler:0000000000001cd8 _LOAD_IMG
       stm32eforth.s:3464   .text.reset_handler:0000000000001ce4 LOAD_IMG
       stm32eforth.s:3493   .text.reset_handler:0000000000001d38 $d
       stm32eforth.s:3494   .text.reset_handler:0000000000001d3c _ERASE_MPG
       stm32eforth.s:3496   .text.reset_handler:0000000000001d46 $t
       stm32eforth.s:3497   .text.reset_handler:0000000000001d48 ERASE_MPG
       stm32eforth.s:3502   .text.reset_handler:0000000000001d58 $d
       stm32eforth.s:3503   .text.reset_handler:0000000000001d5c $t
       stm32eforth.s:3505   .text.reset_handler:0000000000001d64 $d
       stm32eforth.s:3507   .text.reset_handler:0000000000001d68 $t
       stm32eforth.s:3514   .text.reset_handler:0000000000001d80 $d
       stm32eforth.s:3515   .text.reset_handler:0000000000001d84 $t
       stm32eforth.s:3520   .text.reset_handler:0000000000001d8c $d
       stm32eforth.s:3521   .text.reset_handler:0000000000001d90 _FLSH_WR
ARM GAS  stm32eforth.s 			page 103


       stm32eforth.s:3524   .text.reset_handler:0000000000001d98 FLSH_WR
       stm32eforth.s:3525   .text.reset_handler:0000000000001d98 $t
       stm32eforth.s:3528   .text.reset_handler:0000000000001da4 $d
       stm32eforth.s:3530   .text.reset_handler:0000000000001da8 $t
       stm32eforth.s:3539   .text.reset_handler:0000000000001dcc $d
       stm32eforth.s:3540   .text.reset_handler:0000000000001dd0 $t
       stm32eforth.s:3547   .text.reset_handler:0000000000001de0 $d
       stm32eforth.s:3548   .text.reset_handler:0000000000001de4 _PAGE
       stm32eforth.s:3551   .text.reset_handler:0000000000001dec PAGE
       stm32eforth.s:3560   .text.reset_handler:0000000000001dfe $d
       stm32eforth.s:3561   .text.reset_handler:0000000000001e02 _SAVE_IMG
       stm32eforth.s:3564   .text.reset_handler:0000000000001e0c SAVE_IMG
       stm32eforth.s:3571   .text.reset_handler:0000000000001e24 $d
       stm32eforth.s:3572   .text.reset_handler:0000000000001e28 $t
       stm32eforth.s:3575   .text.reset_handler:0000000000001e34 $d
       stm32eforth.s:3577   .text.reset_handler:0000000000001e38 $t
       stm32eforth.s:3581   .text.reset_handler:0000000000001e48 $d
       stm32eforth.s:3582   .text.reset_handler:0000000000001e4c $t
       stm32eforth.s:3585   .text.reset_handler:0000000000001e58 $d
       stm32eforth.s:3586   .text.reset_handler:0000000000001e5c $t
       stm32eforth.s:3616   .text.reset_handler:0000000000001ec4 $d
       stm32eforth.s:3627   .text.reset_handler:0000000000001ed4 _TICK
       stm32eforth.s:3629   .text.reset_handler:0000000000001ed6 $t
       stm32eforth.s:3630   .text.reset_handler:0000000000001ed8 TICK
       stm32eforth.s:3635   .text.reset_handler:0000000000001ee8 $d
       stm32eforth.s:3637   .text.reset_handler:0000000000001ef0 TICK1
       stm32eforth.s:3636   .text.reset_handler:0000000000001eec $t
       stm32eforth.s:3642   .text.reset_handler:0000000000001ef4 $d
       stm32eforth.s:3643   .text.reset_handler:0000000000001ef8 _ALLOT
       stm32eforth.s:3645   .text.reset_handler:0000000000001efe $t
       stm32eforth.s:3646   .text.reset_handler:0000000000001f00 ALLOT
       stm32eforth.s:3655   .text.reset_handler:0000000000001f10 $d
       stm32eforth.s:3656   .text.reset_handler:0000000000001f14 _COMMA
       stm32eforth.s:3657   .text.reset_handler:0000000000001f16 $t
       stm32eforth.s:3658   .text.reset_handler:0000000000001f18 COMMA
       stm32eforth.s:3671   .text.reset_handler:0000000000001f38 $d
       stm32eforth.s:3672   .text.reset_handler:0000000000001f3c _BCOMP
       stm32eforth.s:3674   .text.reset_handler:0000000000001f46 $t
       stm32eforth.s:3675   .text.reset_handler:0000000000001f48 BCOMP
       stm32eforth.s:3684   .text.reset_handler:0000000000001f58 $d
       stm32eforth.s:3685   .text.reset_handler:0000000000001f5c _COMPI
       stm32eforth.s:3687   .text.reset_handler:0000000000001f64 $t
       stm32eforth.s:3688   .text.reset_handler:0000000000001f64 COMPI
       stm32eforth.s:4103   .text.reset_handler:0000000000002330 CALLC
       stm32eforth.s:3703   .text.reset_handler:0000000000001f8c $d
       stm32eforth.s:3704   .text.reset_handler:0000000000001f90 _LITER
       stm32eforth.s:3706   .text.reset_handler:0000000000001f98 $t
       stm32eforth.s:3707   .text.reset_handler:0000000000001f98 LITER
       stm32eforth.s:3710   .text.reset_handler:0000000000001fa0 $d
       stm32eforth.s:3711   .text.reset_handler:0000000000001fa4 $t
       stm32eforth.s:3721   .text.reset_handler:0000000000001fac STRCQ
       stm32eforth.s:3724   .text.reset_handler:0000000000001fb4 $d
       stm32eforth.s:3725   .text.reset_handler:0000000000001fb8 $t
       stm32eforth.s:3728   .text.reset_handler:0000000000001fc4 $d
       stm32eforth.s:3729   .text.reset_handler:0000000000001fc8 $t
       stm32eforth.s:3743   .text.reset_handler:0000000000001fe4 $d
       stm32eforth.s:3744   .text.reset_handler:0000000000001fe8 _FOR
ARM GAS  stm32eforth.s 			page 104


       stm32eforth.s:3746   .text.reset_handler:0000000000001fec $t
       stm32eforth.s:3747   .text.reset_handler:0000000000001fec FOR
       stm32eforth.s:3750   .text.reset_handler:0000000000001ff4 $d
       stm32eforth.s:3751   .text.reset_handler:0000000000001ff8 $t
       stm32eforth.s:3757   .text.reset_handler:0000000000002000 $d
       stm32eforth.s:3758   .text.reset_handler:0000000000002004 _BEGIN
       stm32eforth.s:3760   .text.reset_handler:000000000000200a $t
       stm32eforth.s:3761   .text.reset_handler:000000000000200c BEGIN
       stm32eforth.s:3769   .text.reset_handler:0000000000002018 $d
       stm32eforth.s:3770   .text.reset_handler:000000000000201c _NEXT
       stm32eforth.s:3773   .text.reset_handler:0000000000002024 NEXT
       stm32eforth.s:3776   .text.reset_handler:000000000000202c $d
       stm32eforth.s:3777   .text.reset_handler:0000000000002030 $t
       stm32eforth.s:3783   .text.reset_handler:0000000000002038 $d
       stm32eforth.s:3784   .text.reset_handler:000000000000203c _UNTIL
       stm32eforth.s:3786   .text.reset_handler:0000000000002042 $t
       stm32eforth.s:3787   .text.reset_handler:0000000000002044 UNTIL
       stm32eforth.s:3790   .text.reset_handler:000000000000204c $d
       stm32eforth.s:3791   .text.reset_handler:0000000000002050 $t
       stm32eforth.s:3797   .text.reset_handler:0000000000002058 $d
       stm32eforth.s:3798   .text.reset_handler:000000000000205c _AGAIN
       stm32eforth.s:3800   .text.reset_handler:0000000000002062 $t
       stm32eforth.s:3801   .text.reset_handler:0000000000002064 AGAIN
       stm32eforth.s:3804   .text.reset_handler:000000000000206c $d
       stm32eforth.s:3805   .text.reset_handler:0000000000002070 $t
       stm32eforth.s:3811   .text.reset_handler:0000000000002078 $d
       stm32eforth.s:3812   .text.reset_handler:000000000000207c _IFF
       stm32eforth.s:3815   .text.reset_handler:0000000000002080 IFF
       stm32eforth.s:3818   .text.reset_handler:0000000000002088 $d
       stm32eforth.s:3819   .text.reset_handler:000000000000208c $t
       stm32eforth.s:3821   .text.reset_handler:0000000000002094 $d
       stm32eforth.s:3822   .text.reset_handler:0000000000002098 $t
       stm32eforth.s:3829   .text.reset_handler:00000000000020a4 $d
       stm32eforth.s:3830   .text.reset_handler:00000000000020a8 _AHEAD
       stm32eforth.s:3832   .text.reset_handler:00000000000020ae $t
       stm32eforth.s:3833   .text.reset_handler:00000000000020b0 AHEAD
       stm32eforth.s:3836   .text.reset_handler:00000000000020b8 $d
       stm32eforth.s:3837   .text.reset_handler:00000000000020bc $t
       stm32eforth.s:3839   .text.reset_handler:00000000000020c4 $d
       stm32eforth.s:3840   .text.reset_handler:00000000000020c8 $t
       stm32eforth.s:3847   .text.reset_handler:00000000000020d4 $d
       stm32eforth.s:3848   .text.reset_handler:00000000000020d8 _REPEA
       stm32eforth.s:3851   .text.reset_handler:00000000000020e0 REPEA
       stm32eforth.s:3862   .text.reset_handler:00000000000020f8 $d
       stm32eforth.s:3863   .text.reset_handler:00000000000020fc _THENN
       stm32eforth.s:3866   .text.reset_handler:0000000000002104 THENN
       stm32eforth.s:3876   .text.reset_handler:0000000000002118 $d
       stm32eforth.s:3877   .text.reset_handler:000000000000211c _AFT
       stm32eforth.s:3879   .text.reset_handler:0000000000002120 $t
       stm32eforth.s:3880   .text.reset_handler:0000000000002120 AFT
       stm32eforth.s:3891   .text.reset_handler:0000000000002138 $d
       stm32eforth.s:3892   .text.reset_handler:000000000000213c _ELSEE
       stm32eforth.s:3895   .text.reset_handler:0000000000002144 ELSEE
       stm32eforth.s:3905   .text.reset_handler:0000000000002158 $d
       stm32eforth.s:3906   .text.reset_handler:000000000000215c _WHILE
       stm32eforth.s:3908   .text.reset_handler:0000000000002162 $t
       stm32eforth.s:3909   .text.reset_handler:0000000000002164 WHILE
ARM GAS  stm32eforth.s 			page 105


       stm32eforth.s:3918   .text.reset_handler:0000000000002174 $d
       stm32eforth.s:3919   .text.reset_handler:0000000000002178 _ABRTQ
       stm32eforth.s:3922   .text.reset_handler:0000000000002180 ABRTQ
       stm32eforth.s:3925   .text.reset_handler:0000000000002188 $d
       stm32eforth.s:3926   .text.reset_handler:000000000000218c $t
       stm32eforth.s:3932   .text.reset_handler:0000000000002194 $d
       stm32eforth.s:3933   .text.reset_handler:0000000000002198 _STRQ
       stm32eforth.s:3936   .text.reset_handler:000000000000219c STRQ
       stm32eforth.s:3939   .text.reset_handler:00000000000021a4 $d
       stm32eforth.s:3940   .text.reset_handler:00000000000021a8 $t
       stm32eforth.s:3946   .text.reset_handler:00000000000021b0 $d
       stm32eforth.s:3947   .text.reset_handler:00000000000021b4 _DOTQ
       stm32eforth.s:3950   .text.reset_handler:00000000000021b8 DOTQ
       stm32eforth.s:3953   .text.reset_handler:00000000000021c0 $d
       stm32eforth.s:3954   .text.reset_handler:00000000000021c4 $t
       stm32eforth.s:3963   .text.reset_handler:00000000000021cc $d
       stm32eforth.s:3964   .text.reset_handler:00000000000021d0 _UNIQU
       stm32eforth.s:3966   .text.reset_handler:00000000000021d8 $t
       stm32eforth.s:3967   .text.reset_handler:00000000000021d8 UNIQU
       stm32eforth.s:3972   .text.reset_handler:00000000000021e8 $d
       stm32eforth.s:3980   .text.reset_handler:0000000000002204 UNIQ1
       stm32eforth.s:3973   .text.reset_handler:00000000000021ec $t
       stm32eforth.s:3974   .text.reset_handler:00000000000021f0 $d
       stm32eforth.s:3976   .text.reset_handler:00000000000021f8 $t
       stm32eforth.s:3991   .text.reset_handler:000000000000220c SNAME
       stm32eforth.s:3996   .text.reset_handler:000000000000221c $d
       stm32eforth.s:4010   .text.reset_handler:0000000000002254 SNAM1
       stm32eforth.s:3997   .text.reset_handler:0000000000002220 $t
       stm32eforth.s:4012   .text.reset_handler:0000000000002258 $d
       stm32eforth.s:4014   .text.reset_handler:0000000000002260 $t
       stm32eforth.s:4019   .text.reset_handler:0000000000002264 $d
       stm32eforth.s:4020   .text.reset_handler:0000000000002268 _SCOMP
       stm32eforth.s:4022   .text.reset_handler:0000000000002272 $t
       stm32eforth.s:4023   .text.reset_handler:0000000000002274 SCOMP
       stm32eforth.s:4028   .text.reset_handler:0000000000002284 $d
       stm32eforth.s:4040   .text.reset_handler:00000000000022b0 SCOM2
       stm32eforth.s:4029   .text.reset_handler:0000000000002288 $t
       stm32eforth.s:4031   .text.reset_handler:0000000000002290 $d
       stm32eforth.s:4032   .text.reset_handler:0000000000002294 $t
       stm32eforth.s:4034   .text.reset_handler:000000000000229c $d
       stm32eforth.s:4037   .text.reset_handler:00000000000022a8 SCOM1
       stm32eforth.s:4035   .text.reset_handler:00000000000022a0 $t
       stm32eforth.s:4043   .text.reset_handler:00000000000022b8 $d
       stm32eforth.s:4046   .text.reset_handler:00000000000022c4 SCOM3
       stm32eforth.s:4044   .text.reset_handler:00000000000022bc $t
       stm32eforth.s:4052   .text.reset_handler:00000000000022c8 $d
       stm32eforth.s:4053   .text.reset_handler:00000000000022cc _OVERT
       stm32eforth.s:4055   .text.reset_handler:00000000000022d2 $t
       stm32eforth.s:4056   .text.reset_handler:00000000000022d4 OVERT
       stm32eforth.s:4067   .text.reset_handler:00000000000022ec $d
       stm32eforth.s:4068   .text.reset_handler:00000000000022f0 _SEMIS
       stm32eforth.s:4070   .text.reset_handler:00000000000022f2 $t
       stm32eforth.s:4071   .text.reset_handler:00000000000022f4 SEMIS
       stm32eforth.s:4083   .text.reset_handler:0000000000002310 $d
       stm32eforth.s:4084   .text.reset_handler:0000000000002314 _RBRAC
       stm32eforth.s:4086   .text.reset_handler:0000000000002316 $t
       stm32eforth.s:4087   .text.reset_handler:0000000000002318 RBRAC
ARM GAS  stm32eforth.s 			page 106


       stm32eforth.s:4090   .text.reset_handler:0000000000002320 $d
       stm32eforth.s:4091   .text.reset_handler:0000000000002324 $t
       stm32eforth.s:4124   .text.reset_handler:000000000000236a $d
       stm32eforth.s:4125   .text.reset_handler:000000000000236e _COLON
       stm32eforth.s:4127   .text.reset_handler:0000000000002370 $t
       stm32eforth.s:4128   .text.reset_handler:0000000000002370 COLON
       stm32eforth.s:4141   .text.reset_handler:0000000000002390 $d
       stm32eforth.s:4142   .text.reset_handler:0000000000002394 _IMMED
       stm32eforth.s:4144   .text.reset_handler:000000000000239e $t
       stm32eforth.s:4145   .text.reset_handler:00000000000023a0 IMMED
       stm32eforth.s:4148   .text.reset_handler:00000000000023a8 $d
       stm32eforth.s:4149   .text.reset_handler:00000000000023ac $t
       stm32eforth.s:4164   .text.reset_handler:00000000000023cc $d
       stm32eforth.s:4165   .text.reset_handler:00000000000023d0 _CONST
       stm32eforth.s:4168   .text.reset_handler:00000000000023dc CONST
       stm32eforth.s:4177   .text.reset_handler:00000000000023fc $d
       stm32eforth.s:4178   .text.reset_handler:0000000000002400 $t
       stm32eforth.s:4185   .text.reset_handler:000000000000240c $d
       stm32eforth.s:4186   .text.reset_handler:0000000000002410 _CREAT
       stm32eforth.s:4189   .text.reset_handler:0000000000002418 CREAT
       stm32eforth.s:4198   .text.reset_handler:0000000000002438 $d
       stm32eforth.s:4199   .text.reset_handler:000000000000243c $t
       stm32eforth.s:4205   .text.reset_handler:0000000000002444 $d
       stm32eforth.s:4206   .text.reset_handler:0000000000002448 _VARIA
       stm32eforth.s:4209   .text.reset_handler:0000000000002454 VARIA
       stm32eforth.s:4213   .text.reset_handler:0000000000002460 $d
       stm32eforth.s:4214   .text.reset_handler:0000000000002464 $t
       stm32eforth.s:4227   .text.reset_handler:000000000000246c DMP
       stm32eforth.s:4231   .text.reset_handler:0000000000002478 $d
       stm32eforth.s:4232   .text.reset_handler:000000000000247c $t
       stm32eforth.s:4243   .text.reset_handler:00000000000024a4 PDUM2
       stm32eforth.s:4236   .text.reset_handler:000000000000248c PDUM1
       stm32eforth.s:4240   .text.reset_handler:0000000000002498 $d
       stm32eforth.s:4241   .text.reset_handler:000000000000249c $t
       stm32eforth.s:4245   .text.reset_handler:00000000000024a8 $d
       stm32eforth.s:4246   .text.reset_handler:00000000000024ac $t
       stm32eforth.s:4251   .text.reset_handler:00000000000024b0 $d
       stm32eforth.s:4252   .text.reset_handler:00000000000024b4 _DUMP
       stm32eforth.s:4255   .text.reset_handler:00000000000024bc DUMP
       stm32eforth.s:4262   .text.reset_handler:00000000000024d4 $d
       stm32eforth.s:4263   .text.reset_handler:00000000000024d8 $t
       stm32eforth.s:4277   .text.reset_handler:000000000000250c DUMP4
       stm32eforth.s:4266   .text.reset_handler:00000000000024e4 DUMP1
       stm32eforth.s:4269   .text.reset_handler:00000000000024ec $d
       stm32eforth.s:4270   .text.reset_handler:00000000000024f0 $t
       stm32eforth.s:4279   .text.reset_handler:0000000000002510 $d
       stm32eforth.s:4280   .text.reset_handler:0000000000002514 DUMP3
       stm32eforth.s:4281   .text.reset_handler:0000000000002514 $t
       stm32eforth.s:4290   .text.reset_handler:0000000000002528 $d
       stm32eforth.s:4291   .text.reset_handler:000000000000252c _DOTS
       stm32eforth.s:4295   .text.reset_handler:0000000000002530 DOTS
       stm32eforth.s:4305   .text.reset_handler:0000000000002550 DOTS2
       stm32eforth.s:4301   .text.reset_handler:0000000000002544 DOTS1
       stm32eforth.s:4307   .text.reset_handler:0000000000002554 $d
       stm32eforth.s:4308   .text.reset_handler:0000000000002558 $t
       stm32eforth.s:4314   .text.reset_handler:0000000000002560 $d
       stm32eforth.s:4315   .text.reset_handler:0000000000002564 _TNAME
ARM GAS  stm32eforth.s 			page 107


       stm32eforth.s:4317   .text.reset_handler:000000000000256a $t
       stm32eforth.s:4318   .text.reset_handler:000000000000256c TNAME
       stm32eforth.s:4323   .text.reset_handler:000000000000257c TNAM1
       stm32eforth.s:4326   .text.reset_handler:0000000000002584 $d
       stm32eforth.s:4336   .text.reset_handler:00000000000025ac TNAM2
       stm32eforth.s:4327   .text.reset_handler:0000000000002588 $t
       stm32eforth.s:4332   .text.reset_handler:000000000000259c $d
       stm32eforth.s:4333   .text.reset_handler:00000000000025a0 $t
       stm32eforth.s:4344   .text.reset_handler:00000000000025b8 $d
       stm32eforth.s:4345   .text.reset_handler:00000000000025bc _DOTID
       stm32eforth.s:4347   .text.reset_handler:00000000000025c0 $t
       stm32eforth.s:4348   .text.reset_handler:00000000000025c0 DOTID
       stm32eforth.s:4352   .text.reset_handler:00000000000025cc $d
       stm32eforth.s:4359   .text.reset_handler:00000000000025e8 DOTI1
       stm32eforth.s:4353   .text.reset_handler:00000000000025d0 $t
       stm32eforth.s:4355   .text.reset_handler:00000000000025d8 $d
       stm32eforth.s:4356   .text.reset_handler:00000000000025dc $t
       stm32eforth.s:4361   .text.reset_handler:00000000000025ec $d
       stm32eforth.s:4363   .text.reset_handler:00000000000025f6 $t
       stm32eforth.s:4366   *ABS*:0000000000000000 WANT_SEE
       stm32eforth.s:4450   .text.reset_handler:00000000000025fc $d
       stm32eforth.s:4452   .text.reset_handler:0000000000002600 _WORDS
       stm32eforth.s:4454   .text.reset_handler:0000000000002606 $t
       stm32eforth.s:4455   .text.reset_handler:0000000000002608 WORDS
       stm32eforth.s:4460   .text.reset_handler:0000000000002618 WORS1
       stm32eforth.s:4463   .text.reset_handler:0000000000002620 $d
       stm32eforth.s:4470   .text.reset_handler:000000000000263c WORS2
       stm32eforth.s:4464   .text.reset_handler:0000000000002624 $t
       stm32eforth.s:4483   .text.reset_handler:0000000000002640 VERSN
       stm32eforth.s:4486   .text.reset_handler:0000000000002648 $d
       stm32eforth.s:4487   .text.reset_handler:000000000000264c $t
       stm32eforth.s:4492   .text.reset_handler:0000000000002650 $d
       stm32eforth.s:4493   .text.reset_handler:0000000000002654 _HI
       stm32eforth.s:4500   .text.reset_handler:0000000000002664 $d
       stm32eforth.s:4502   .text.reset_handler:000000000000267c $t
       stm32eforth.s:4511   .text.reset_handler:000000000000269c $d
       stm32eforth.s:4512   .text.reset_handler:00000000000026a0 $t
       stm32eforth.s:4524   .text.reset_handler:00000000000026c0 $d
       stm32eforth.s:4530   .text.reset_handler:00000000000026cc $t
       stm32eforth.s:4537   .text.reset_handler:00000000000026e6 COLD1
       stm32eforth.s:4539   .text.reset_handler:00000000000026ea $d
       stm32eforth.s:4540   .text.reset_handler:00000000000026ee $t
       stm32eforth.s:4542   .text.reset_handler:00000000000026f6 $d
       stm32eforth.s:4543   .text.reset_handler:00000000000026fa $t
       stm32eforth.s:4544   .text.reset_handler:00000000000026fe $d
       stm32eforth.s:4545   .text.reset_handler:0000000000002702 $t
       stm32eforth.s:4546   .text.reset_handler:0000000000002706 $d
       stm32eforth.s:4547   .text.reset_handler:000000000000270a $t
       stm32eforth.s:4551   .text.reset_handler:000000000000271a $d
       stm32eforth.s:4552   .text.reset_handler:000000000000271e $t
       stm32eforth.s:4566   .text.reset_handler:0000000000002750 COLD2
       stm32eforth.s:4568   .text.reset_handler:0000000000002750 $d
       stm32eforth.s:4569   .text.reset_handler:0000000000002754 $t
       stm32eforth.s:4571   .text.reset_handler:0000000000002800 $d
       stm32eforth.s:263    .text.default_handler:0000000000000033 $d
       stm32eforth.s:263    .text.default_handler:0000000000000034 $t
       stm32eforth.s:508    .text.reset_handler:0000000000000463 $d
ARM GAS  stm32eforth.s 			page 108


       stm32eforth.s:508    .text.reset_handler:0000000000000464 $t
       stm32eforth.s:532    .text.reset_handler:00000000000004af $d
       stm32eforth.s:532    .text.reset_handler:00000000000004b0 $t
       stm32eforth.s:568    .text.reset_handler:0000000000000501 $d
       stm32eforth.s:568    .text.reset_handler:0000000000000502 $t
       stm32eforth.s:588    .text.reset_handler:0000000000000529 $d
       stm32eforth.s:588    .text.reset_handler:000000000000052a $t
       stm32eforth.s:613    .text.reset_handler:000000000000055d $d
       stm32eforth.s:613    .text.reset_handler:000000000000055e $t
       stm32eforth.s:727    .text.reset_handler:00000000000005f3 $d
       stm32eforth.s:727    .text.reset_handler:00000000000005f4 $t
       stm32eforth.s:761    .text.reset_handler:000000000000061f $d
       stm32eforth.s:761    .text.reset_handler:0000000000000620 $t
       stm32eforth.s:774    .text.reset_handler:0000000000000633 $d
       stm32eforth.s:774    .text.reset_handler:0000000000000634 $t
       stm32eforth.s:785    .text.reset_handler:000000000000063f $d
       stm32eforth.s:785    .text.reset_handler:0000000000000640 $t
       stm32eforth.s:797    .text.reset_handler:0000000000000651 $d
       stm32eforth.s:797    .text.reset_handler:0000000000000652 $t
       stm32eforth.s:809    .text.reset_handler:0000000000000663 $d
       stm32eforth.s:809    .text.reset_handler:0000000000000664 $t
       stm32eforth.s:833    .text.reset_handler:0000000000000689 $d
       stm32eforth.s:833    .text.reset_handler:000000000000068a $t
       stm32eforth.s:855    .text.reset_handler:00000000000006ab $d
       stm32eforth.s:855    .text.reset_handler:00000000000006ac $t
       stm32eforth.s:868    .text.reset_handler:00000000000006bd $d
       stm32eforth.s:868    .text.reset_handler:00000000000006be $t
       stm32eforth.s:880    .text.reset_handler:00000000000006cf $d
       stm32eforth.s:880    .text.reset_handler:00000000000006d0 $t
       stm32eforth.s:904    .text.reset_handler:00000000000006f5 $d
       stm32eforth.s:904    .text.reset_handler:00000000000006f6 $t
       stm32eforth.s:943    .text.reset_handler:000000000000073b $d
       stm32eforth.s:943    .text.reset_handler:000000000000073c $t
       stm32eforth.s:955    .text.reset_handler:0000000000000751 $d
       stm32eforth.s:955    .text.reset_handler:0000000000000752 $t
       stm32eforth.s:1017   .text.reset_handler:00000000000007ab $d
       stm32eforth.s:1017   .text.reset_handler:00000000000007ac $t
       stm32eforth.s:1031   .text.reset_handler:00000000000007bf $d
       stm32eforth.s:1031   .text.reset_handler:00000000000007c0 $t
       stm32eforth.s:1042   .text.reset_handler:00000000000007cd $d
       stm32eforth.s:1042   .text.reset_handler:00000000000007ce $t
       stm32eforth.s:1053   .text.reset_handler:00000000000007dd $d
       stm32eforth.s:1053   .text.reset_handler:00000000000007de $t
       stm32eforth.s:1064   .text.reset_handler:00000000000007ed $d
       stm32eforth.s:1064   .text.reset_handler:00000000000007ee $t
       stm32eforth.s:1097   .text.reset_handler:000000000000081d $d
       stm32eforth.s:1097   .text.reset_handler:000000000000081e $t
       stm32eforth.s:1131   .text.reset_handler:0000000000000851 $d
       stm32eforth.s:1131   .text.reset_handler:0000000000000852 $t
       stm32eforth.s:1142   .text.reset_handler:0000000000000861 $d
       stm32eforth.s:1142   .text.reset_handler:0000000000000862 $t
       stm32eforth.s:1153   .text.reset_handler:0000000000000873 $d
       stm32eforth.s:1153   .text.reset_handler:0000000000000874 $t
       stm32eforth.s:1192   .text.reset_handler:00000000000008af $d
       stm32eforth.s:1192   .text.reset_handler:00000000000008b0 $t
       stm32eforth.s:1205   .text.reset_handler:00000000000008c3 $d
       stm32eforth.s:1205   .text.reset_handler:00000000000008c4 $t
ARM GAS  stm32eforth.s 			page 109


       stm32eforth.s:1232   .text.reset_handler:00000000000008f1 $d
       stm32eforth.s:1232   .text.reset_handler:00000000000008f2 $t
       stm32eforth.s:1256   .text.reset_handler:0000000000000915 $d
       stm32eforth.s:1256   .text.reset_handler:0000000000000916 $t
       stm32eforth.s:1285   .text.reset_handler:0000000000000943 $d
       stm32eforth.s:1285   .text.reset_handler:0000000000000944 $t
       stm32eforth.s:1358   .text.reset_handler:00000000000009b3 $d
       stm32eforth.s:1358   .text.reset_handler:00000000000009b4 $t
       stm32eforth.s:1373   .text.reset_handler:00000000000009cb $d
       stm32eforth.s:1373   .text.reset_handler:00000000000009cc $t
       stm32eforth.s:1388   .text.reset_handler:00000000000009e7 $d
       stm32eforth.s:1388   .text.reset_handler:00000000000009e8 $t
       stm32eforth.s:1460   .text.reset_handler:0000000000000a45 $d
       stm32eforth.s:1460   .text.reset_handler:0000000000000a46 $t
       stm32eforth.s:1471   .text.reset_handler:0000000000000a5b $d
       stm32eforth.s:1471   .text.reset_handler:0000000000000a5c $t
       stm32eforth.s:1505   .text.reset_handler:0000000000000a97 $d
       stm32eforth.s:1505   .text.reset_handler:0000000000000a98 $t
       stm32eforth.s:1529   .text.reset_handler:0000000000000ab5 $d
       stm32eforth.s:1529   .text.reset_handler:0000000000000ab6 $t
       stm32eforth.s:1553   .text.reset_handler:0000000000000adf $d
       stm32eforth.s:1553   .text.reset_handler:0000000000000ae0 $t
       stm32eforth.s:1602   .text.reset_handler:0000000000000b31 $d
       stm32eforth.s:1602   .text.reset_handler:0000000000000b32 $t
       stm32eforth.s:1625   .text.reset_handler:0000000000000b5b $d
       stm32eforth.s:1625   .text.reset_handler:0000000000000b5c $t
       stm32eforth.s:1636   .text.reset_handler:0000000000000b75 $d
       stm32eforth.s:1636   .text.reset_handler:0000000000000b76 $t
       stm32eforth.s:1647   .text.reset_handler:0000000000000b8f $d
       stm32eforth.s:1647   .text.reset_handler:0000000000000b90 $t
       stm32eforth.s:1658   .text.reset_handler:0000000000000ba7 $d
       stm32eforth.s:1658   .text.reset_handler:0000000000000ba8 $t
       stm32eforth.s:1673   .text.reset_handler:0000000000000bbd $d
       stm32eforth.s:1673   .text.reset_handler:0000000000000bbe $t
       stm32eforth.s:1692   .text.reset_handler:0000000000000beb $d
       stm32eforth.s:1692   .text.reset_handler:0000000000000bec $t
       stm32eforth.s:1762   .text.reset_handler:0000000000000c99 $d
       stm32eforth.s:1762   .text.reset_handler:0000000000000c9a $t
       stm32eforth.s:1819   .text.reset_handler:0000000000000d13 $d
       stm32eforth.s:1819   .text.reset_handler:0000000000000d14 $t
       stm32eforth.s:1891   .text.reset_handler:0000000000000dbb $d
       stm32eforth.s:1891   .text.reset_handler:0000000000000dbc $t
       stm32eforth.s:1910   .text.reset_handler:0000000000000de1 $d
       stm32eforth.s:1910   .text.reset_handler:0000000000000de2 $t
       stm32eforth.s:1948   .text.reset_handler:0000000000000e29 $d
       stm32eforth.s:1948   .text.reset_handler:0000000000000e2a $t
       stm32eforth.s:1987   .text.reset_handler:0000000000000e73 $d
       stm32eforth.s:1987   .text.reset_handler:0000000000000e74 $t
       stm32eforth.s:2011   .text.reset_handler:0000000000000ea3 $d
       stm32eforth.s:2011   .text.reset_handler:0000000000000ea4 $t
       stm32eforth.s:2034   .text.reset_handler:0000000000000ecf $d
       stm32eforth.s:2034   .text.reset_handler:0000000000000ed0 $t
       stm32eforth.s:2103   .text.reset_handler:0000000000000f8b $d
       stm32eforth.s:2103   .text.reset_handler:0000000000000f8c $t
       stm32eforth.s:2117   .text.reset_handler:0000000000000fa9 $d
       stm32eforth.s:2117   .text.reset_handler:0000000000000faa $t
       stm32eforth.s:2150   .text.reset_handler:0000000000000ff7 $d
ARM GAS  stm32eforth.s 			page 110


       stm32eforth.s:2150   .text.reset_handler:0000000000000ff8 $t
       stm32eforth.s:2168   .text.reset_handler:000000000000101b $d
       stm32eforth.s:2168   .text.reset_handler:000000000000101c $t
       stm32eforth.s:2186   .text.reset_handler:0000000000001043 $d
       stm32eforth.s:2186   .text.reset_handler:0000000000001044 $t
       stm32eforth.s:2255   .text.reset_handler:00000000000010db $d
       stm32eforth.s:2255   .text.reset_handler:00000000000010dc $t
       stm32eforth.s:2417   .text.reset_handler:00000000000012cf $d
       stm32eforth.s:2417   .text.reset_handler:00000000000012d0 $t
       stm32eforth.s:2438   .text.reset_handler:0000000000001301 $d
       stm32eforth.s:2438   .text.reset_handler:0000000000001302 $t
       stm32eforth.s:2459   .text.reset_handler:0000000000001331 $d
       stm32eforth.s:2459   .text.reset_handler:0000000000001332 $t
       stm32eforth.s:2538   .text.reset_handler:00000000000013bb $d
       stm32eforth.s:2538   .text.reset_handler:00000000000013bc $t
       stm32eforth.s:2576   .text.reset_handler:000000000000141b $d
       stm32eforth.s:2576   .text.reset_handler:000000000000141c $t
       stm32eforth.s:2746   .text.reset_handler:00000000000015ff $d
       stm32eforth.s:2746   .text.reset_handler:0000000000001600 $t
       stm32eforth.s:2791   .text.reset_handler:0000000000001661 $d
       stm32eforth.s:2791   .text.reset_handler:0000000000001662 $t
       stm32eforth.s:2806   .text.reset_handler:0000000000001685 $d
       stm32eforth.s:2806   .text.reset_handler:0000000000001686 $t
       stm32eforth.s:3061   .text.reset_handler:0000000000001903 $d
       stm32eforth.s:3061   .text.reset_handler:0000000000001904 $t
       stm32eforth.s:3236   .text.reset_handler:0000000000001ac7 $d
       stm32eforth.s:3236   .text.reset_handler:0000000000001ac8 $t
       stm32eforth.s:3244   .text.reset_handler:0000000000001ae3 $d
       stm32eforth.s:3244   .text.reset_handler:0000000000001ae4 $t
       stm32eforth.s:3253   .text.reset_handler:0000000000001af1 $d
       stm32eforth.s:3253   .text.reset_handler:0000000000001af2 $t
       stm32eforth.s:3277   .text.reset_handler:0000000000001b33 $d
       stm32eforth.s:3277   .text.reset_handler:0000000000001b34 $t
       stm32eforth.s:3292   .text.reset_handler:0000000000001b4b $d
       stm32eforth.s:3292   .text.reset_handler:0000000000001b4c $t
       stm32eforth.s:3314   .text.reset_handler:0000000000001b77 $d
       stm32eforth.s:3314   .text.reset_handler:0000000000001b78 $t
       stm32eforth.s:3362   .text.reset_handler:0000000000001bc7 $d
       stm32eforth.s:3362   .text.reset_handler:0000000000001bc8 $t
       stm32eforth.s:3421   .text.reset_handler:0000000000001c5f $d
       stm32eforth.s:3421   .text.reset_handler:0000000000001c60 $t
       stm32eforth.s:3447   .text.reset_handler:0000000000001cb1 $d
       stm32eforth.s:3447   .text.reset_handler:0000000000001cb2 $t
       stm32eforth.s:3463   .text.reset_handler:0000000000001ce1 $d
       stm32eforth.s:3463   .text.reset_handler:0000000000001ce2 $t
       stm32eforth.s:3550   .text.reset_handler:0000000000001de9 $d
       stm32eforth.s:3550   .text.reset_handler:0000000000001dea $t
       stm32eforth.s:3563   .text.reset_handler:0000000000001e0b $d
       stm32eforth.s:3563   .text.reset_handler:0000000000001e0c $t
       stm32eforth.s:3772   .text.reset_handler:0000000000002021 $d
       stm32eforth.s:3772   .text.reset_handler:0000000000002022 $t
       stm32eforth.s:3814   .text.reset_handler:000000000000207f $d
       stm32eforth.s:3814   .text.reset_handler:0000000000002080 $t
       stm32eforth.s:3850   .text.reset_handler:00000000000020df $d
       stm32eforth.s:3850   .text.reset_handler:00000000000020e0 $t
       stm32eforth.s:3865   .text.reset_handler:0000000000002101 $d
       stm32eforth.s:3865   .text.reset_handler:0000000000002102 $t
ARM GAS  stm32eforth.s 			page 111


       stm32eforth.s:3894   .text.reset_handler:0000000000002141 $d
       stm32eforth.s:3894   .text.reset_handler:0000000000002142 $t
       stm32eforth.s:3921   .text.reset_handler:000000000000217f $d
       stm32eforth.s:3921   .text.reset_handler:0000000000002180 $t
       stm32eforth.s:3935   .text.reset_handler:000000000000219b $d
       stm32eforth.s:3935   .text.reset_handler:000000000000219c $t
       stm32eforth.s:3949   .text.reset_handler:00000000000021b7 $d
       stm32eforth.s:3949   .text.reset_handler:00000000000021b8 $t
       stm32eforth.s:4167   .text.reset_handler:00000000000023d9 $d
       stm32eforth.s:4167   .text.reset_handler:00000000000023da $t
       stm32eforth.s:4188   .text.reset_handler:0000000000002417 $d
       stm32eforth.s:4188   .text.reset_handler:0000000000002418 $t
       stm32eforth.s:4208   .text.reset_handler:0000000000002451 $d
       stm32eforth.s:4208   .text.reset_handler:0000000000002452 $t
       stm32eforth.s:4254   .text.reset_handler:00000000000024b9 $d
       stm32eforth.s:4254   .text.reset_handler:00000000000024ba $t
       stm32eforth.s:4294   .text.reset_handler:000000000000252f $d
       stm32eforth.s:4294   .text.reset_handler:0000000000002530 $t
       stm32eforth.s:4495   .text.reset_handler:0000000000002657 $d
       stm32eforth.s:4495   .text.reset_handler:0000000000002658 $t

UNDEFINED SYMBOLS
_mstack
