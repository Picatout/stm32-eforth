ARM GAS  stm32eforth.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  stm32eforth.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.p2align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.p2aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m3
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size 
  18              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  19              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  20              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  21              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  22              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  23              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  24              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  25              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  26              	
  27              	
  28              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  29              	      .equ SYS_MEM, 0x1FFFF000
  30              	      .equ SYS_MEM_SIZE, 0x77FF 
  31              	
  32              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  33              	      .equ OTP_MEM, 0x1FFF7800
  34              	      .equ OTP_SIZE, 0x210 
ARM GAS  stm32eforth.s 			page 3


  35              	
  36              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  37              	      .equ OPTION, 0x1FFFC000   
  38              	      .equ OPT_SIZE, 16
  39              	
  40              	
  41              	   /* peripherals base address */
  42              	      .equ PER_BASE_ADR,  0x40000000
  43              	   /* PERIPHERALS bit band alias */
  44              	      .equ PER_BIT_ALIAS, 0x42000000 
  45              	
  46              	
  47              	    /* RCC registers address */
  48              	    .equ RCC_BASE_ADR, 0x40023800
  49              	    /* RCC registers offset */
  50              	    .equ RCC_CR, 0
  51              	    .equ RCC_PLLCFGR,0X4
  52              	    .equ RCC_CFGR, 0X8
  53              	    .equ RCC_CIR, 0XC
  54              	    .equ RCC_AHB1RSTR, 0X10
  55              	    .equ RCC_AHB2RSTR, 0X14
  56              	    .equ RCC_APB1RSTR, 0x20
  57              	    .equ RCC_APB2RSTR, 0X24
  58              	    .equ RCC_AHB1ENR, 0X30
  59              	    .equ RCC_AHB2ENR, 0X34 
  60              	    .equ RCC_APB1ENR, 0X40
  61              	    .equ RCC_APB2ENR, 0X44
  62              	    .equ RCC_AHB1LPENR,0X50
  63              	    .equ RCC_AHB2LPENR,0X54
  64              	    .equ RCC_APB1LPENR,0X60
  65              	    .equ RCC_APB2LPENR,0X64
  66              	    .equ RCC_BDCR,0X70
  67              	    .equ RCC_CSR,0X74
  68              	    .equ RCC_SSCGR,0X80
  69              	    .equ RCC_PLLI2SCFGR,0X84
  70              	    .equ RCC_DCKCFGR, 0X8C 
  71              	
  72              	    /* FLASH registers address */
  73              	    .equ FLASH_BASE_ADR, 0x40023C00
  74              	    /* FLASH registers offset */
  75              	    .equ FLASH_ACR, 0
  76              	    .equ FLASH_KEYR, 4
  77              	    .equ FLASH_OPTKEYR, 8
  78              	    .equ FLASH_SR, 12
  79              	    .equ FLASH_CR, 16
  80              	    .equ FLASH_OPTCR, 20
  81              	    .equ RDPRT_KEY, 0x00A5
  82              	    .equ FLASH_KEY1, 0x45670123
  83              	    .equ FLASH_KEY2, 0xCDEF89AB
  84              	    .equ OPTKEY1, 0x08192A3B
  85              	    .equ OPTKEY2, 0x4C5D6E7F
  86              	
  87              	    /* GPIOx base address */
  88              	    .equ GPIOA_BASE_ADR, 0x40020000
  89              	    .equ GPIOB_BASE_ADR, 0x40020400
  90              	    .equ GPIOC_BASE_ADR, 0x40020800
  91              	    .equ GPIOD_BASE_ADR, 0x40020C00
ARM GAS  stm32eforth.s 			page 4


  92              	    .equ GPIOE_BASE_ADR, 0x40021000
  93              	    .equ GPIOH_BASE_ADR, 0x40021C00
  94              	
  95              	    /* gpiox registers offset from base address */
  96              	    .equ GPIO_MODER, 0
  97              	    .equ GPIO_OTYPER, 4
  98              	    .equ GPIO_OSPEEDR, 8
  99              	    .equ GPIO_PUPDR, 12
 100              	    .equ GPIO_IDR, 16
 101              	    .equ GPIO_ODR, 20
 102              	    .equ GPIO_BSRR, 24 
 103              	    .equ GPIO_LCKR, 28
 104              	    .equ GPIO_AFRL, 32
 105              	    .equ GPIO_AFRH, 36
 106              	    
 107              	
 108              	    /* USART1 registers */
 109              	    .equ USART1_BASE_ADR, 0x40011000
 110              	    /* USARTx registers offset */
 111              	    .equ USART_SR, 0
 112              	    .equ USART_DR,4
 113              	    .equ USART_BRR,8
 114              	    .equ USART_CR1,12
 115              	    .equ USART_CR2,16
 116              	    .equ USART_CR3,20
 117              	    .equ USART_GTPR,24
 118              	
 119              	   /* systick */
 120              	    .equ STK_BASE_ADR, 0xE000E010
 121              	    /* registers offset */
 122              	    .equ STK_CTL, 0
 123              	    .equ STK_LOAD, 4
 124              	    .equ STK_VAL, 8
 125              	    .equ STK_CALIB, 12
 126              	
 127              	   /* system control block */
 128              	   .equ SCB_BASE_ADR, 0xE000ED00
 129              	   /* registers offset */
 130              	   .equ SCB_CPUID, 0
 131              	   .equ SCB_ICSR, 0x4 
 132              	   .equ SCB_VTOR, 0x8
 133              	   .equ SCB_AIRCR, 0xc
 134              	   .equ SCB_SCR, 0x10
 135              	   .equ SCB_CCR, 0x14
 136              	   .equ SCB_SHPR1,0x18
 137              	   .equ SCB_SHPR2,0x1c
 138              	   .equ SCB_SHPR3,0x20
 139              	   .equ SCB_SHCSR,0x24
 140              	   .equ SCB_CFSR,0x28
 141              	   .equ SCB_MMSR,0x28
 142              	   .equ SCB_BFSR,0x29
 143              	   .equ SCB_UFSR,0x2a
 144              	   .equ SCB_HFSR,0x2c
 145              	   .equ SCB_MMAR,0x34
 146              	   .equ SCB_BFAR,0x38
 147              	   .equ SCB_AFSR,0x3c
 148              	   // key to to write in SCB_AIRCR 
ARM GAS  stm32eforth.s 			page 5


 149              	   .equ SCB_VECTKEY,0x5fa 
 150              	   
 151              	   /* NVIC block */
 152              	   .equ NVIC_BASE_ADR, 0xE000E100
 153              	   .equ NVIC_ISER0, 0x100
 154              	   .equ NVIC_ISER1, 0x104
 155              	   .equ NVIC_ISER2, 0x108
 156              	   .equ NVIC_ISER3, 0x10c
 157              	   .equ NVIC_ISER4, 0x110
 158              	   .equ NVIC_ISER5, 0x114
 159              	   .equ NVIC_ISER6, 0x118
 160              	   .equ NVIC_ISER7, 0x11c
 161              	   .equ NVIC_ICER0, 0x180
 162              	   .equ NVIC_ICER1, 0x184 
 163              	   .equ NVIC_ICER2, 0x188 
 164              	   .equ NVIC_ICER3, 0x18C 
 165              	   .equ NVIC_ICER4, 0x190 
 166              	   .equ NVIC_ICER5, 0x194 
 167              	   .equ NVIC_ICER6, 0x198 
 168              	   .equ NVIC_ICER7, 0x19C 
 169              	   .equ NVIC_ISPR0, 0x200
 170              	   .equ NVIC_ISPR1, 0x204
 171              	   .equ NVIC_ISPR2, 0x208 
 172              	   .equ NVIC_ISPR3, 0x20c 
 173              	   .equ NVIC_ISPR4, 0x210 
 174              	   .equ NVIC_ISPR5, 0x214 
 175              	   .equ NVIC_ISPR6, 0x218 
 176              	   .equ NVIC_ISPR7, 0x21c 
 177              	   .equ NVIC_ICPR0, 0x280
 178              	   .equ NVIC_ICPR1, 0x284
 179              	   .equ NVIC_ICPR2, 0x288
 180              	   .equ NVIC_ICPR3, 0x28c
 181              	   .equ NVIC_ICPR4, 0x290
 182              	   .equ NVIC_ICPR5, 0x294
 183              	   .equ NVIC_ICPR6, 0x298
 184              	   .equ NVIC_ICPR7, 0x29c
 185              	   .equ NVIC_IABR0, 0x300
 186              	   .equ NVIC_IABR1, 0x304
 187              	   .equ NVIC_IABR2, 0x308
 188              	   .equ NVIC_IABR3, 0x30c
 189              	   .equ NVIC_IABR4, 0x310
 190              	   .equ NVIC_IABR5, 0x314
 191              	   .equ NVIC_IABR6, 0x318
 192              	   .equ NVIC_IABR7, 0x31c
 193              	/*  NVIC_IPR0 - NVIC_IPR59 */
 194              	   .equ NVIC_IPR_BASE, 0x400 
 195              	   .equ NVIC_STIR, 0xE00 
  81              	
  82              	/* blue pill specific constants */ 
  83              	  .equ LED_GPIO, GPIOC_BASE_ADR
  84              	  .equ LED_PIN, 13
  85              	  .equ UART, USART1_BASE_ADR 
  86              	
  87              	/* eForth specific constants */
  88              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  89              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  90              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
ARM GAS  stm32eforth.s 			page 6


  91              		.equ UPP ,	0x20000200	/*start of user area (UP0) */
  92              		.equ DEND , SPP-128  /*usable RAM end */
  93              		.equ RAMOFFSET ,	UPP 	// remap
  94              		.equ FLASHOFFSET ,	0x08000200	// remap
  95              		//.equ RAMOFFSET  ,	0x00000000	/* absolute */
  96              		//.equ MAPOFFSET  ,	0x00000000	/* absolute */
  97              		.equ MAPOFFSET , (RAMOFFSET-FLASHOFFSET)
  98              		.equ IRQOFFSET , (RAM_ADR-FLASH_ADR)
  99              	
 100              	/*************************************
 101              	   system variables offset from UPP
 102              	*************************************/
 103              	  .equ SEED_OFS, 4    // prng seed 
 104              	  .equ TICKS_OFS, SEED_OFS+4  // millseconds counter
 105              	  .equ TIMER_OFS, TICKS_OFS+4  // count down timer
 106              	  .equ TORAM_OFS, TIMER_OFS+4  // compile to RAM 
 107              	  .equ IMG_SIGN_OFS, TORAM_OFS+4  // image signature  
 108              	  .equ BOOT_OFS, IMG_SIGN_OFS+4  // boot program address
 109              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
 110              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
 111              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
 112              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
 113              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
 114              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
 115              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
 116              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
 117              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
 118              	  .equ FORTH_CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
 119              	  .equ USER_CTOP_OFS, FORTH_CTOP_OFS+4  // ram free dictionary address
 120              	  .equ LASTN_OFS, USER_CTOP_OFS+4     // last word in dictionary link nfa 
 121              	  .equ VARS_END_OFS, LASTN_OFS+4 // end of system variables  
 122              	  
 123              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
 124              	  .equ RX_QUEUE_OFS, VARS_END_OFS+4 // rx queue 
 125              	  .equ RX_HEAD_OFS, RX_QUEUE_OFS+RX_QUEUE_SIZE // queue head indice 
 126              	  .equ RX_TAIL_OFS, RX_HEAD_OFS+4 // queue tail indice 
 127              	
 128              	
 129              	/***********************************************
 130              	* MACROS
 131              	*	Assemble inline direct threaded code ending.
 132              	***********************************************/
 133              		.macro _CALL fn /* low level routine call */ 
 134              	 	PUSH {LR}
 135              		BL \fn  
 136              		POP {LR}
 137              		.endm
 138              		
 139              		.macro _MOV32 R V 
 140              		MOV \R, #\V&0xffff
 141              		MOVT \R, #\V>>16
 142              		.endm
 143              	
 144              		.macro	_NEXT /*end low level word */
 145              		BX	LR
 146              		.endm
 147              	
ARM GAS  stm32eforth.s 			page 7


 148              	 	.macro	_NEST /*start high level word */
 149              		STMFD	R2!,{LR}
 150              		.endm
 151              	
 152              	 	.macro	_UNNEST	/*end high level word */
 153              		LDMFD	R2!,{PC}
 154              		.endm
 155              	
 156              	 	.macro	_DOLIT  value /*long literals */
 157              		BL	DOLIT
 158              		.word \value 
 159              		.endm
 160              	
 161              	 	.macro	_PUSH	/*push R5 on data stack*/
 162              		STR	R5,[R1,#-4]!
 163              		.endm
 164              	
 165              	 	.macro	_POP /*pop data stack to R5 */
 166              		LDR	R5,[R1],#4
 167              		.endm
 168              	
 169              		/* dictionary header for words copied to RAM */
 170              		.macro _HEADER  label, nlen, name
 171              			.section .inflash.dictinary 
 172              		LF_\label:   // link field
 173              			.word link 
 174              			.equ link , . 
 175              		_\label: .byte \nlen    // name field
 176              			.ascii "\name"
 177              			.p2align 2 
 178              		CA_\label:   // code field address 
 179              			.word \label + MAPOFFSET 
 180              			.section .text, "ax", %progbits 
 181              			.p2align 2 
 182              		\label:  // code address in .section .text 
 183              		.endm 
 184              	
 185              		/* dictionary header for words executed from flash memory */
 186              		.macro _HEADER_FL  label, nlen, name
 187              			.section .inflash.dictinary 
 188              		LF_\label:   // link field
 189              			.word link 
 190              			.equ link , . 
 191              		_\label: .byte \nlen    // name field
 192              			.ascii "\name"
 193              			.p2align 2 
 194              		CA_\label:   // code field address 
 195              			.word \label + MAPOFFSET 
 196              			.section .text, "ax", %progbits 
 197              			.p2align 2 
 198              		\label:  // code address in .section .text 
 199              			_DOLIT FL_\label 
 200              			MOV R4,R5
 201              			_POP 
 202              			BLX  R4
 203              			_NEXT     
 204              			.section .inflash ,"ax", %progbits 
ARM GAS  stm32eforth.s 			page 8


 205              			.p2align 2 
 206              			.type FL_\label, %function 
 207              		FL_\label: 
 208              		.endm 
 209              	
 210              	
 211              		.equ link, 0
 212              	
 213              	
 214              	/*************************************
 215              	*   interrupt service vectors table 
 216              	**************************************/
 217              	   .section  .isr_vector,"a",%progbits
 218              	  .type  isr_vectors, %object
 219              	
 220              	isr_vectors:
 221 0000 00000000 	  .word   _mstack          /* main return stack address */
 222 0004 00000000 	  .word   reset_handler    /* startup address */
 223              	/* core interrupts || exceptions */
 224 0008 00000000 	  .word   default_handler  /*  -14 NMI */
 225 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
 226 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
 227 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
 228 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
 229 001c 00000000 	  .word   0 /* -9 */
 230 0020 00000000 	  .word   0 /* -8 */ 
 231 0024 00000000 	  .word   0 /* -7 */
 232 0028 00000000 	  .word   0	/* -6 */
 233 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
 234 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
 235 0034 00000000 	  .word   0 /* -3 */
 236 0038 00000000 	  .word   default_handler  /* -2 PendSV */
 237 003c 00000000 	  .word   systick_handler  /* -1 Systick */
 238              	 irq0:  
 239              	  /* External Interrupts */
 240 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
 241 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 242 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 243 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 244 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 245 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 246 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 247 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 248 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 249 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 250 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 251 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 252 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 253 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 254 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 255 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 256 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 257 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 258 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 259 008c 00000000 	  .word      0 /* IRQ19 not used */                         
 260 0090 00000000 	  .word      0 /* IRQ20 not used */                          
 261 0094 00000000 	  .word      0 /* IRQ21 not used */                          
ARM GAS  stm32eforth.s 			page 9


 262 0098 00000000 	  .word      0 /* IRQ22 not used */                          
 263 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 264 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
 265 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
 266 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
 267 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 268 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 269 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 270 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 271 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
 272 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 273 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
 274 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 275 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 276 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 277 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
 278 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 279 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
 280 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 281 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 282 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 283 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 284 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 285 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 286 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 287 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 288 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 289 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 290 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 291 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 292 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 293 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 294 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 295 011c 00000000 	  .word      0 /* IRQ55, not used  */
 296 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 297 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 298 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 299 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 300 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 301 0134 00000000 	  .word		 0 /* IRQ61, not used */
 302 0138 00000000 	  .word		 0 /* IRQ62, not used */
 303 013c 00000000 	  .word		 0 /* IRQ63, not used */
 304 0140 00000000 	  .word		 0 /* IRQ64, not used */
 305 0144 00000000 	  .word		 0 /* IRQ65, not used */
 306 0148 00000000 	  .word		 0 /* IRQ66, not used */
 307 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 308 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 309 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 310 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
 311 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 312 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 313 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 314 0168 00000000 	  .word		 0 /* IRQ74, not used */
 315 016c 00000000 	  .word		 0 /* IRQ75, not used */
 316 0170 00000000 	  .word		 0 /* IRQ76, not used */
 317 0174 00000000 	  .word		 0 /* IRQ77, not used */
 318 0178 00000000 	  .word		 0 /* IRQ78, not used */
ARM GAS  stm32eforth.s 			page 10


 319 017c 00000000 	  .word		 0 /* IRQ79, not used */
 320 0180 00000000 	  .word		 0 /* IRQ80, not used */
 321 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
 322 0188 00000000 	  .word		 0 /* IRQ82, not used */
 323 018c 00000000 	  .word		 0 /* IRQ83, not used */
 324 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 325 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 326              	isr_end:
 327              	  .size  isr_vectors, .-isr_vectors
 328 0198 00000000 	  .p2align 9
 328      00000000 
 328      00000000 
 328      00000000 
 328      00000000 
 329              	
 330              	/*****************************************************
 331              	* default isr handler called on unexpected interrupt
 332              	*****************************************************/
 333              	   .section  .inflash, "ax", %progbits 
 334              	   
 335              	  .type default_handler, %function
 336              	  .p2align 2 
 337              	  .global default_handler
 338              	default_handler:
 339 0000 014D     		ldr r5,exception_msg 
 340 0002 00F04FF8 		bl uart_puts 
 341 0006 39E0     		b reset_mcu    
 342              	  .size  default_handler, .-default_handler
 343              	exception_msg:
 344 0008 0C000000 		.word .+4 
 345 000c 12       		.byte 18
 346 000d 0A0D6578 		.ascii "\n\rexeption reboot!"
 346      65707469 
 346      6F6E2072 
 346      65626F6F 
 346      7421
 347 001f 00       		.p2align 2
 348              	
 349              	/*********************************
 350              		system milliseconds counter
 351              	*********************************/	
 352              	  .type systick_handler, %function
 353              	  .p2align 2 
 354              	  .global systick_handler
 355              	systick_handler:
 356 0020 4FF40073 	  _MOV32 r3,UPP
 356      C2F20003 
 357 0028 9868     	  ldr r0,[r3,#TICKS_OFS]  
 358 002a 00F10100 	  add r0,#1
 359 002e 9860     	  str r0,[r3,#TICKS_OFS]
 360 0030 D868     	  ldr r0,[r3,#TIMER_OFS]
 361 0032 10B1     	  cbz r0, systick_exit
 362 0034 A0F10100 	  sub r0,#1
 363 0038 D860     	  str r0,[r3,#TIMER_OFS]
 364              	systick_exit:
 365 003a 7047     	  bx lr
 366              	
ARM GAS  stm32eforth.s 			page 11


 367              	
 368              	
 369              	/**************************
 370              		UART RX handler
 371              	**************************/
 372              		.p2align 2
 373              		.type uart_rx_handler, %function
 374              	uart_rx_handler:
 375 003c 2DE9D002 		push {r4,r6,r7,r9}
 376 0040 4FF48054 		_MOV32 r4,UART 
 376      C4F20104 
 377 0048 2668     		ldr r6,[r4,#USART_SR]
 378 004a D4F80490 		ldr r9,[r4,#USART_DR]
 379 004e 16F0200F 		tst r6,#(1<<5) // RXNE 
 380 0052 0DD0     		beq 2f // no char received 
 381 0054 B9F1030F 		cmp r9,#3
 382 0058 0DD0     		beq user_reboot // received CTRL-C then reboot MCU 
 383 005a 03F15007 		add r7,r3,#RX_QUEUE_OFS
 384 005e 5C6E     		ldr r4,[r3,#RX_TAIL_OFS]
 385 0060 2744     		add r7,r7,r4 
 386 0062 87F80090 		strb r9,[r7]
 387 0066 04F10104 		add r4,#1 
 388 006a 04F00F04 		and r4,#(RX_QUEUE_SIZE-1)
 389 006e 5C66     		str r4,[r3,#RX_TAIL_OFS]
 390              	2:	
 391 0070 BDE8D002 		pop {r4,r6,r7,r9}
 392 0074 7047     		bx lr 
 393              	
 394              	user_reboot:
 395 0076 064D     		ldr r5,user_reboot_msg
 396 0078 00F014F8 		bl uart_puts 
 397              	reset_mcu: 
 398 007c 0348     		ldr r0,scb_adr 
 399 007e C168     		ldr r1,[r0,#SCB_AIRCR]
 400 0080 41F00401 		orr r1,#(1<<2)
 401 0084 C0F2FA51 		movt r1,#SCB_VECTKEY
 402 0088 C160     		str r1,[r0,#SCB_AIRCR]
 403 008a FEE7     		b . 
 404              		.p2align 2 
 405              	scb_adr:
 406 008c 00ED00E0 		.word SCB_BASE_ADR 
 407              	user_reboot_msg:
 408 0090 94000000 		.word .+4
 409 0094 0D       		.byte 13 
 410 0095 0D757365 		.ascii "\ruser reboot!"
 410      72207265 
 410      626F6F74 
 410      21
 411 00a2 00BF     		.p2align 2 
 412              	
 413              	// send counted string to uart 
 414              	// input: r5 string* 
 415              		.type uart_puts,%function 
 416              	uart_puts:
 417 00a4 4FF48050 		_MOV32 r0,UART 
 417      C4F20100 
 418 00ac 15F8011B 		ldrb r1,[r5],#1 // string length
ARM GAS  stm32eforth.s 			page 12


 419 00b0 0940     		ands r1,r1
 420 00b2 0CD0     	1:	beq 9f 
 421 00b4 0268     	2:  ldr r2,[r0,#USART_SR]
 422 00b6 12F08002 		ands r2,#0x80 
 423 00ba FBD0     		beq 2b 	
 424 00bc 15F8012B 		ldrb r2,[r5],#1
 425 00c0 0271     		strb r2,[r0,#USART_DR]
 426 00c2 0139     		subs r1,r1,#1 
 427 00c4 F6D1     		bne 2b 
 428 00c6 0268     	3:	ldr r2,[r0,#USART_SR]
 429 00c8 12F04002 		ands r2,#(1<<6)
 430 00cc FBD0     		beq 3b 
 431 00ce 7047     	9:  bx lr 
 432              	
 433              	
 434              	/**************************************
 435              	  reset_handler execute at MCU reset
 436              	***************************************/
 437              	  .type  reset_handler, %function
 438              	  .p2align 2 
 439              	  .global reset_handler
 440              	reset_handler:
 441 00d0 4FF00000 		_MOV32 r0,RAM_END
 441      C2F20200 
 442 00d8 8546     		mov sp,r0  
 443 00da 00F0B7F8 		bl	remap 
 444 00de 00F03BF8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 445 00e2 00F08DF8 		bl  uart_init
 446 00e6 00F009F8 		bl forth_init 
 447              	//	bl	blink			/* test */
 448 00ea 0348     		ldr r0,forth_entry
 449 00ec 40F00100 		orr r0,#1
 450 00f0 8047     		blx r0
 451 00f2 FFF7FEBF 		b.w .  
 452 00f6 00BF     		.p2align 2 
 453              	forth_entry:
 454 00f8 201D0018 		.word COLD+MAPOFFSET 
 455              	
 456              		.type forth_init, %function 
 457              	forth_init:
 458 00fc 4FF40073 		_MOV32 r3,UPP 
 458      C2F20003 
 459 0104 4FF47F41 		_MOV32 R1,SPP
 459      C2F20101 
 460 010c 4FF68072 		_MOV32 R2,RPP
 460      C2F20102 
 461 0114 85EA0505 		EOR R5,R5  
 462 0118 7047     		BX LR 
 463              	
 464              		.type blink, %function 
 465              	blink:
 466 011a 4FF40060 		_MOV32 r0,GPIOC_BASE_ADR
 466      C4F20200 
 467 0122 4FF40051 	0:	mov r1,#1<<LED_PIN 
 468 0126 8161     		str r1,[r0,GPIO_BSRR]
 469 0128 4FF4FA71 		mov	r1,#500
 470 012c D960     		str r1,[R3,#TIMER_OFS] 
ARM GAS  stm32eforth.s 			page 13


 471 012e 00B500F0 		_CALL timeout
 471      0EF85DF8 
 471      04EB
 472 0138 4FF00051 		mov r1,#1<<(LED_PIN+16)
 473 013c 8161     		str r1,[r0,#GPIO_BSRR]
 474 013e 4FF4FA71 		mov	r1,#500
 475 0142 D960     		str r1,[R3,#TIMER_OFS] 
 476 0144 00B500F0 		_CALL timeout 
 476      03F85DF8 
 476      04EB
 477 014e E8E7     		b 0b 
 478              	
 479              		.type timeout, %function 
 480              	timeout:
 481 0150 D968     		ldr r1,[r3,#TIMER_OFS]
 482 0152 0943     		orrs r1,r1
 483 0154 FCD1     		bne timeout 
 484 0156 7047     		bx lr 
 485              	
 486              	
 487              	  .type init_devices, %function
 488              	  .p2align 2 
 489              	init_devices:
 490              	/* init clock to HSE 96 Mhz */
 491              	/* set 3 wait states in FLASH_ACR_LATENCY */
 492 0158 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 492      C4F20200 
 493 0160 4FF00301 	  mov r1,#3 
 494 0164 0160     	  str r1,[r0,#FLASH_ACR]
 495              	/* configure clock for HSE, 25 Mhz crystal */
 496              	/* enable HSE in RCC_CR */
 497 0166 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 497      C4F20200 
 498 016e 0168     	  ldr r1,[r0,#RCC_CR]
 499 0170 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 500 0174 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 501              	/* wait HSERDY loop */
 502              	wait_hserdy:
 503 0176 0168     	  ldr r1,[r0,#RCC_CR]
 504 0178 11F4003F 	  tst r1,#(1<<17)
 505 017c FBD0     	  beq wait_hserdy
 506              	
 507              	/************************************************* 
 508              	   configure PLL  and source 
 509              	   SYSCLOCK=96 Mhz
 510              	   select HSE as  PLL source clock
 511              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 512              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 513              	****************************************************/
 514              	  /* set RCC_PLLCFGR */
 515 017e 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 515      C4F20200 
 516 0186 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 516      C0F24041 
 517 018e 4160     	  str r1,[r0,#RCC_PLLCFGR]
 518              	  /* enable PLL */
 519 0190 0168     	  ldr r1,[r0,#RCC_CR]
ARM GAS  stm32eforth.s 			page 14


 520 0192 41F08071 	  orr r1, #(1<<24)
 521 0196 0160     	  str r1,[r0,#RCC_CR]
 522              	/* wait for PLLRDY */
 523              	wait_pllrdy:
 524 0198 0168     	  ldr r1,[r0,#RCC_CR]
 525 019a 11F0007F 	  tst r1,#(1<<25)
 526 019e FBD1     	  bne wait_pllrdy 
 527              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 528 01a0 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 528      C0F21901 
 529 01a8 8160     	  str r1,[r0,#RCC_CFGR]
 530              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 531 01aa 8168     	  ldr r1,[r0,#RCC_CFGR]
 532 01ac 41F00201 	  orr r1,#2
 533 01b0 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 534              	/* wait for SWS==2 */
 535              	wait_sws:
 536 01b2 8168     	  ldr r1,[r0,#RCC_CFGR]
 537 01b4 11F0080F 	  tst r1,#(2<<2)
 538 01b8 FBD0     	  beq wait_sws
 539              	/* now sysclock is 96 Mhz */
 540              	
 541              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 542 01ba 4FF00501 	  mov	r1, #(1)|(1<<2)		/* GPIOAEN|GPIOCEN */
 543 01be 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 544 01c0 4FF01001 	  mov	r1, #(1<<4)  /* USART1 enable */
 545 01c4 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 546              	/* configure GPIOC:13 as output for user LED */
 547 01c6 4FF40060 	  _MOV32 r0,LED_GPIO 
 547      C4F20200 
 548 01ce 0168     	  ldr r1,[r0,#GPIO_MODER]
 549 01d0 6FF04062 	  mvn r2,#(3<<(2*LED_PIN))
 550 01d4 01EA0201 	  and r1,r1,r2
 551 01d8 41F08061 	  orr r1,#(1<<(2*LED_PIN))
 552 01dc 0160     	  str r1,[r0,#GPIO_MODER]
 553 01de 4168     	  ldr r1,[r0,#GPIO_OTYPER]
 554 01e0 41F40051 	  orr r1,#(1<<LED_PIN)
 555 01e4 4160     	  str r1,[r0,#GPIO_OTYPER] // open drain 
 556              	
 557              	/* configure systicks for 1msec ticks */
 558 01e6 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 558      CEF20000 
 559 01ee 47F2FF61 	  _MOV32 r1,95999 
 559      C0F20101 
 560 01f6 4160     	  str r1,[r0,#STK_LOAD]
 561 01f8 4FF00701 	  mov r1,#7
 562 01fc 0160     	  str r1,[r0,STK_CTL]
 563 01fe 7047     	  _NEXT  
 564              	
 565              	/*******************************
 566              	  initialize UART peripheral 
 567              	********************************/
 568              		.type uart_init, %function
 569              	uart_init:
 570              	/* set GPIOA PIN 9, uart TX  */
 571 0200 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
 571      C4F20200 
ARM GAS  stm32eforth.s 			page 15


 572 0208 0168     	  ldr r1,[r0,#GPIO_MODER]
 573 020a 6FF44022 	  mvn r2,#(3<<(2*9)) //+(3<<(2*10))
 574 020e 01EA0201 	  and r1,r1,r2
 575 0212 4FF40022 	  mov r2,#(2<<(2*9)) //+(2<<(2*10))
 576 0216 41EA0201 	  orr r1,r1,r2 
 577 021a 0160     	  str r1,[r0,#GPIO_MODER]
 578              	/* select alternate functions USART1 */ 
 579 021c 4FF4EE61 	  mov r1,#(7<<4)+(7<<8)
 580 0220 4162     	  str r1,[r0,#GPIO_AFRH]
 581 0222 4FF48050 	  _MOV32 r0,UART 
 581      C4F20100 
 582              	/* BAUD rate */
 583 022a 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
 584 022e 8160     	  str r1,[r0,#USART_BRR]
 585 0230 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 586 0234 C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 587              	/* enable interrupt in NVIC */
 588 0236 4FF46140 	  _MOV32 r0,NVIC_BASE_ADR
 588      CEF20000 
 589 023e D0F80411 	  ldr r1,[r0,#NVIC_ISER1]
 590 0242 41F02001 	  orr r1,#32   
 591 0246 C0F80411 	  str r1,[r0,#NVIC_ISER1]
 592 024a 7047     	  bx lr 
 593              	
 594              	/* copy system to RAM */ 
 595              		.type remap, %function 
 596              	
 597              	remap:
 598              	// tranfert isr_vector to RAM at 0x20000000
 599 024c 4FF00000 		_MOV32 r0,RAM_ADR
 599      C2F20000 
 600 0254 81EA0101 		eor r1,r1
 601 0258 4FF4CC72 		mov r2,#(isr_end-isr_vectors) 
 602 025c 51F8043B 	1:	ldr r3,[r1],#4
 603 0260 40F8043B 		str r3,[r0],#4
 604 0264 043A     		subs r2,#4
 605 0266 F9D1     		bne 1b
 606              	// set new vector table address
 607 0268 4FF46D40 		_MOV32 r0,SCB_BASE_ADR
 607      CEF20000 
 608 0270 4FF00001 		_MOV32 r1,RAM_ADR 
 608      C2F20001 
 609 0278 8160     		str r1,[r0,#SCB_VTOR]
 610              	// copy system variable and code 	
 611 027a 0D48     		ldr r0,remap_dest
 612 027c 0B49     		ldr r1,remap_src 
 613 027e 41F68C52 		mov r2,#CTOP-UZERO 
 614 0282 02F10302 		add r2,r2,#3
 615 0286 22F00302 		and r2,r2,#~3 
 616 028a 51F8043B 	1:	ldr r3,[r1],#4 
 617 028e 40F8043B 		str r3,[r0],#4 
 618 0292 043A     		subs R2,#4 
 619 0294 F9D1     		bne 1b
 620              	// zero end of RAM 
 621 0296 4FF00002 		_MOV32 r2,RAM_END 
 621      C2F20202 
 622 029e 83EA0303 		eor r3,r3,r3 
ARM GAS  stm32eforth.s 			page 16


 623 02a2 40F8043B 	2:  str r3,[r0],#4
 624 02a6 9042     		cmp r0,r2 
 625 02a8 FBDB     		blt 2b 
 626 02aa 7047     		_NEXT 
 627              	remap_src:
 628 02ac 00000000 		.word UZERO 
 629              	remap_dest:
 630 02b0 00020020 		.word RAMOFFSET 
 631              	
 632              	/********************
 633              	* Version control
 634              	*******************/
 635              	.equ VER ,	0x01	/*major release version */
 636              	.equ EXT ,	0x00	/*minor extension */
 637              	
 638              	/* Constants */
 639              	
 640              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 641              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 642              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 643              	
 644              	.equ CELLL ,	4	/*size of a cell */
 645              	.equ BASEE ,	10	/*default radix */
 646              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 647              	
 648              	.equ BKSPP ,	8	/*backspace */
 649              	.equ LF ,	10	  /*line feed */
 650              	.equ CRR ,	13	/*carriage return */
 651              	.equ ERR ,	27	/*error escape */
 652              	.equ TIC ,	39	/*tick */
 653              	
 654              	/********************************************************
 655              	* RAM memory mapping
 656              	* 	0x20000000	RAM base address
 657              	*	0x20000000  system variables	
 658              	* 	0x20000100	Forth dictionary
 659              	* 	0x2000????	top of dictionary, HERE
 660              	* 	0x2000????	WORD buffer, HERE+16
 661              	*   0x20004E00  end of user space
 662              	* 	0x20004E80	top of data stack  R2
 663              	* 	0x20004E80	TIB terminal input buffer
 664              	* 	0x20004F80	top of return stack  R1
 665              	* 	0x20005000	top of hardware stack for interrupts R14
 666              	********************************************************/
 667              	
 668              	
 669              	/******************************************************
 670              	*  COLD start moves the following to USER variables.
 671              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 672              	******************************************************/
 673              		.section  .text, "ax" ,%progbits 
 674              		.p2align 2
 675              	
 676              	UZERO:
 677 0000 00000000 		.word 0  			/*Reserved */
 678 0004 55AA0000 		.word 0xaa55 /* SEED  */ 
 679 0008 00000000 		.word 0      /* MSEC */
ARM GAS  stm32eforth.s 			page 17


 680 000c 00000000 	    .word 0     /* TIMER */
 681 0010 FFFFFFFF 		.word -1    /* >RAM */ 
 682 0014 494D4147 		.ascii "IMAG" /* signature */ 
 683 0018 C41C0018 		.word HI+MAPOFFSET  /*'BOOT */
 684 001c 0A000000 		.word BASEE 	/*BASE */
 685 0020 00000000 		.word 0			/*tmp */
 686 0024 00000000 		.word 0			/*SPAN */
 687 0028 00000000 		.word 0			/*>IN */
 688 002c 00000000 		.word 0			/*#TIB */
 689 0030 00FF0120 		.word TIBB	/*TIB */
 690 0034 80110018 		.word INTER+MAPOFFSET	/*'EVAL */
 691 0038 00000000 		.word 0			/*HLD */
 692 003c 140C0000 		.word _LASTN	/*CONTEXT */
 693 0040 8C1D0000 		.word CTOP  	/* FCP end of system dictionnary */
 694 0044 8C1D0018 		.word CTOP+MAPOFFSET	/* CP end of RAM dictionary RAM */
 695 0048 140C0000 		.word _LASTN	/*LAST word in dictionary */
 696 004c 00000000 		.word 0,0			/*reserved */
 696      00000000 
 697              	ULAST:
 698 0054 00000000 		.space  RX_QUEUE_SIZE+8 /* space reserved for rx_queue,head and tail pointer.
 698      00000000 
 698      00000000 
 698      00000000 
 698      00000000 
 699              	
 700              	
 701              	/***********************************
 702              	//  Start of Forth dictionary
 703              	***********************************/
 704              	
 705 006c AFF30080 		.p2align 4
 706              	
 707              	// RST-IVEC ( n -- )
 708              	// reset interrupt vector n to default_handler
 709              		_HEADER RSTIVEC,8,"RST-IVEC"
 710 0070 42F804ED 		_NEST 
 711 0074 00F089F8 		_DOLIT default_handler 
 711      00000000 
 712 007c 00F0E2F8 		BL	SWAP 
 713 0080 00F04EF9 		BL	CELLS 
 714 0084 00F081F8 		_DOLIT irq0+IRQOFFSET  
 714      40000018 
 715 008c 00F00EF9 		BL	PLUS 
 716 0090 00F0ACF8 		BL	STORE 
 717 0094 52F804FB 		_UNNEST 
 718              	
 719              	//	SET-IVEC ( a n -- )
 720              	// set interrupt vector address 
 721              		_HEADER SETIVEC,8,"SET-IVEC"
 722 0098 42F804ED 		_NEST
 723 009c 00F0D2F8 		BL	SWAP 
 724 00a0 00F020F9 		BL 	ONEP 
 725 00a4 00F0CEF8 		BL	SWAP  
 726 00a8 00F03AF9 		BL CELLS 
 727 00ac 00F06DF8 		_DOLIT irq0+IRQOFFSET  
 727      40000018 
 728 00b4 00F0FAF8 		BL	PLUS 
ARM GAS  stm32eforth.s 			page 18


 729 00b8 00F098F8 		BL 	STORE 
 730 00bc 52F804FB 		_UNNEST 
 731              	
 732              	
 733              	// RANDOM ( n1 -- {0..n1-1} )
 734              	// return pseudo random number 
 735              	// REF: https://en.wikipedia.org/wiki/Xorshift
 736              	
 737              		_HEADER RAND,6,RANDOM 
 738 00c0 42F804ED 		_NEST 
 739 00c4 00F0D2F9 		bl SEED 
 740 00c8 00F096F8 		bl AT 
 741 00cc 4FEA4534 		lsl r4,r5,#13
 742 00d0 85EA0405 		eor r5,r4
 743 00d4 4FEA5544 		lsr r4,r5,#17
 744 00d8 85EA0405 		eor r5,r4
 745 00dc 4FEA4514 		lsl r4,r5,#5
 746 00e0 85EA0405 		eor r5,r4
 747 00e4 00F0AAF8 		bl DUPP 
 748 00e8 00F0C0F9 		bl SEED 
 749 00ec 00F07EF8 		bl STORE 
 750 00f0 00F050F9 		bl ABSS
 751 00f4 00F0A6F8 		bl SWAP 
 752 00f8 00F094FA 		bl MODD 
 753 00fc 52F804FB 		_UNNEST 
 754              	
 755              	// PAUSE ( u -- ) 
 756              	// suspend execution for u milliseconds
 757              		_HEADER PAUSE,5,PAUSE 
 758 0100 42F804ED 		_NEST 
 759 0104 00F0BEF9 		BL TIMER 
 760 0108 00F070F8 		BL STORE 
 761              	PAUSE_LOOP:
 762 010c 00F0BAF9 		BL TIMER 
 763 0110 00F072F8 		BL AT 
 764 0114 00F056F8 		BL QBRAN 
 765 0118 24010000 		.word PAUSE_EXIT 
 766 011c 00F05EF8 		BL BRAN 
 767 0120 0C010000 		.word PAUSE_LOOP 
 768              	PAUSE_EXIT: 		
 769 0124 52F804FB 		_UNNEST 
 770              	
 771              	//  ULED ( T|F -- )
 772              	// control user LED, -1 ON, 0 OFF  
 773              		_HEADER ULED,4,ULED
 774 0128 4FF40056 		mov r6,#(1<<LED_PIN)
 775 012c 4FF40064 		_MOV32 r4,LED_GPIO 
 775      C4F20204 
 776 0134 2800     		movs r0,r5 
 777 0136 51F8045B 		_POP
 778 013a 01D0     		beq ULED_OFF 
 779 013c 4FEA0646 		LSL r6,#16 
 780              	ULED_OFF:
 781 0140 A661     		str r6,[r4,#GPIO_BSRR]
 782 0142 7047     		_NEXT 
 783              		
 784              	//    ?RX	 ( -- c T | F )
ARM GAS  stm32eforth.s 			page 19


 785              	// 	Return input character and true, or a false if no input.
 786              		_HEADER QRX,4,"?KEY"
 787              	QKEY: 
 788 0144 41F8045D 		_PUSH
 789 0148 5F6E     		ldr r7,[r3,#RX_TAIL_OFS] 
 790 014a 1E6E     		ldr r6,[r3,#RX_HEAD_OFS]
 791 014c 96EA0705 		eors r5,r6,r7 
 792 0150 0CD0     		beq 1f
 793 0152 03F15007 		add r7,r3,#RX_QUEUE_OFS 
 794 0156 3744     		add r7,r6 
 795 0158 3D78     		ldrb r5,[r7]
 796 015a 06F10106 		add r6,#1 
 797 015e 06F00F06 		and r6,#(RX_QUEUE_SIZE-1)
 798 0162 1E66     		str r6,[R3,#RX_HEAD_OFS]
 799 0164 41F8045D 		_PUSH 
 800 0168 4FF0FF35 		mov r5,#-1
 801 016c 7047     	1:	_NEXT 
 802 016e 00BF     		.p2align 2 
 803              	
 804              	//    TX!	 ( c -- )
 805              	// 	Send character c to the output device.
 806              		_HEADER EMIT,4,EMIT
 807              	TECHO:
 808 0170 4FF48054 		_MOV32 r4,UART 
 808      C4F20104 
 809 0178 2668     	1:	ldr	r6, [r4, #USART_SR]	
 810 017a 16F08006 		ands	r6, #0x80		//  TXE bit 
 811 017e FBD0     		beq	1b
 812 0180 2571     		strb	r5, [r4, #USART_DR]	
 813 0182 51F8045B 		_POP
 814 0186 7047     		_NEXT 
 815              		
 816              	// **************************************************************************
 817              	//  The kernel
 818              	
 819              	//    NOP	( -- )
 820              	// 	do nothing.
 821              		_HEADER NOP,3,NOP 
 822 0188 7047     		_NEXT
 823              	 
 824              	
 825              	//    doLIT	( -- w )
 826              	// 	Push an inline literal.
 827              	
 828              	// 	.word	_NOP+MAPOFFSET
 829              	// _LIT	.byte   COMPO+5
 830              	// 	.ascii "doLIT"
 831              	// 	.p2align 2 	
 832              	DOLIT:
 833 018a 41F8045D 		_PUSH				//  store R5 on data stack
 834 018e 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 835 0192 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 836 0196 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 837 019a 7047     		_NEXT
 838              	
 839              	//    EXECUTE	( ca -- )
 840              	// 	Execute the word at ca.
ARM GAS  stm32eforth.s 			page 20


 841              		_HEADER EXECU,7,EXECUTE 
 842 019c 45F00104 		ORR	R4,R5,#1		//  b0=1 
 843 01a0 51F8045B 		_POP
 844 01a4 2047     		BX	R4
 845              	
 846              	//    next	( -- ) counter on R:
 847              	// 	Run time code for the single index loop.
 848              	// 	: next ( -- ) \ hilevel model
 849              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 850              	
 851              	// 	.word	_EXECU+MAPOFFSET
 852              	// _DONXT	.byte   COMPO+4
 853              	// 	.ascii "next"
 854              	// 	.p2align 2 	
 855              	DONXT:
 856 01a6 1468     		LDR	R4,[R2]   // ( -- u )  
 857 01a8 24B9     		CBNZ R4,NEXT1 
 858              		/* loop done */
 859 01aa 02F10402 		ADD	R2,R2,#4 // drop counter 
 860 01ae 0EF1040E 		ADD	LR,LR,#4 // skip after loop address 
 861 01b2 7047     		_NEXT
 862              	NEXT1:
 863              		/* decrement loop counter */
 864 01b4 A4F10104 		SUB	R4,R4,#1
 865 01b8 1460     		STR	R4,[R2]
 866 01ba 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 867 01be 4EF0010E 		ORR	LR,LR,#1 // begining of loop
 868 01c2 7047     		_NEXT
 869              	
 870              	//    ?branch	( f -- )
 871              	// 	Branch if flag is zero.
 872              	
 873              	// 	.word	_DONXT+MAPOFFSET
 874              	// _QBRAN	.byte   COMPO+7
 875              	// 	.ascii "?branch"
 876              	// 	.p2align 2 	
 877              	QBRAN:
 878 01c4 2C00     		MOVS	R4,R5
 879 01c6 51F8045B 		_POP
 880 01ca 04D1     		BNE	QBRAN1
 881 01cc 5EF801EC 		LDR	LR,[LR,#-1]
 882 01d0 4EF0010E 		ORR LR,LR,#1
 883 01d4 7047     		_NEXT
 884              	QBRAN1:
 885 01d6 0EF1040E 	 	ADD	LR,LR,#4
 886 01da 7047     		_NEXT
 887              	
 888              	//    branch	( -- )
 889              	// 	Branch to an inline address.
 890              	
 891              	// 	.word	_QBRAN+MAPOFFSET
 892              	// _BRAN	.byte   COMPO+6
 893              	// 	.ascii "branch"
 894              	// 	.p2align 2 	
 895              	BRAN:
 896 01dc 5EF801EC 		LDR	LR,[LR,#-1]
 897 01e0 4EF0010E 		ORR	LR,LR,#1
ARM GAS  stm32eforth.s 			page 21


 898 01e4 7047     		_NEXT
 899              	
 900              	//    EXIT	(  -- )
 901              	// 	Exit the currently executing command.
 902 01e6 00BF     		_HEADER EXIT,4,EXIT 
 903 01e8 52F804FB 		_UNNEST 
 904              	
 905              	//    !	   ( w a -- )
 906              	// 	Pop the data stack to memory.
 907              		_HEADER STORE,1,"!"
 908 01ec 51F8044B 		LDR	R4,[R1],#4
 909 01f0 2C60     		STR	R4,[R5]
 910 01f2 51F8045B 		_POP
 911 01f6 7047     		_NEXT
 912              	
 913              	//    @	   ( a -- w )
 914              	// 	Push memory location to the data stack.
 915              		_HEADER AT,1,"@"
 916 01f8 2D68     		LDR	R5,[R5]
 917 01fa 7047     		_NEXT
 918              	
 919              	//    C!	  ( c b -- )
 920              	// 	Pop the data stack to byte memory.
 921              		_HEADER CSTOR,2,"C!"
 922 01fc 51F8044B 		LDR	R4,[R1],#4
 923 0200 2C70     		STRB	R4,[R5]
 924 0202 51F8045B 		_POP
 925 0206 7047     		_NEXT
 926              	
 927              	//    C@	  ( b -- c )
 928              	// 	Push byte memory location to the data stack.
 929              		_HEADER CAT,2,"C@"
 930 0208 2D78     		LDRB	R5,[R5]
 931 020a 7047     		_NEXT
 932              	
 933              	//    R>	  ( -- w )
 934              	// 	Pop the return stack to the data stack.
 935              		_HEADER RFROM,2,"R>"
 936 020c 41F8045D 		_PUSH
 937 0210 52F8045B 		LDR	R5,[R2],#4
 938 0214 7047     		_NEXT
 939              	
 940              	//    R@	  ( -- w )
 941              	// 	Copy top of return stack to the data stack.
 942 0216 00BF     		_HEADER RAT,2,"R@"
 943 0218 41F8045D 		_PUSH
 944 021c 1568     		LDR	R5,[R2]
 945 021e 7047     		_NEXT
 946              	
 947              	//    >R	  ( w -- )
 948              	// 	Push the data stack to the return stack.
 949              		_HEADER TOR,2+COMPO,">R"
 950 0220 42F8045D 		STR	R5,[R2,#-4]!
 951 0224 51F8045B 		_POP
 952 0228 7047     		_NEXT  
 953              	
 954              	//    SP@	 ( -- a )
ARM GAS  stm32eforth.s 			page 22


 955              	// 	Push the current data stack pointer.
 956 022a 00BF     		_HEADER SPAT,3,"SP@"
 957 022c 41F8045D 		_PUSH
 958 0230 0D46     		MOV	R5,R1
 959 0232 7047     		_NEXT
 960              	
 961              	//    DROP	( w -- )
 962              	// 	Discard top stack item.
 963              		_HEADER DROP,4,DROP
 964 0234 51F8045B 		_POP
 965 0238 7047     		_NEXT
 966              	
 967              	//    DUP	 ( w -- w w )
 968              	// 	Duplicate the top stack item.
 969 023a 00BF     		_HEADER DUPP,3,"DUP"
 970 023c 41F8045D 		_PUSH
 971 0240 7047     		_NEXT
 972              	
 973              	//    SWAP	( w1 w2 -- w2 w1 )
 974              	// 	Exchange top two stack items.
 975 0242 00BF     		_HEADER SWAP,4,"SWAP"
 976 0244 0C68     		LDR	R4,[R1]
 977 0246 0D60     		STR	R5,[R1]
 978 0248 2546     		MOV	R5,R4
 979 024a 7047     		_NEXT
 980              	
 981              	//    OVER	( w1 w2 -- w1 w2 w1 )
 982              	// 	Copy second stack item to top.
 983              		_HEADER OVER,4,"OVER"
 984 024c 41F8045D 		_PUSH
 985 0250 4D68     		LDR	R5,[R1,#4]
 986 0252 7047     		_NEXT
 987              	
 988              	//    0<	  ( n -- t )
 989              	// 	Return true if n is negative.
 990              		_HEADER ZLESS,2,"0<"
 991 0254 4FF00004 		MOV	R4,#0
 992 0258 04EB2505 		ADD	R5,R4,R5,ASR #32
 993 025c 7047     		_NEXT
 994              	
 995              	//    AND	 ( w w -- w )
 996              	// 	Bitwise AND.
 997 025e 00BF     		_HEADER ANDD,3,"AND"
 998 0260 51F8044B 		LDR	R4,[R1],#4
 999 0264 05EA0405 		AND	R5,R4
 1000 0268 7047     		_NEXT
 1001              	
 1002              	//    OR	  ( w w -- w )
 1003              	// 	Bitwise inclusive OR.
 1004 026a 00BF     		_HEADER ORR,2,"OR"
 1005 026c 51F8044B 		LDR	R4,[R1],#4
 1006 0270 45EA0405 		ORR	R5,R4
 1007 0274 7047     		_NEXT
 1008              	
 1009              	//    XOR	 ( w w -- w )
 1010              	// 	Bitwise exclusive OR.
 1011 0276 00BF     		_HEADER XORR,3,"XOR"
ARM GAS  stm32eforth.s 			page 23


 1012 0278 51F8044B 		LDR	R4,[R1],#4
 1013 027c 85EA0405 		EOR	R5,R4
 1014 0280 7047     		_NEXT
 1015              	
 1016              	//    UM+	 ( w w -- w cy )
 1017              	// 	Add two numbers, return the sum and carry flag.
 1018 0282 00BF     		_HEADER UPLUS,3,"UM+"
 1019 0284 0C68     		LDR	R4,[R1]
 1020 0286 6419     		ADDS	R4,R4,R5
 1021 0288 4FF00005 		MOV	R5,#0
 1022 028c 45F10005 		ADC	R5,R5,#0
 1023 0290 0C60     		STR	R4,[R1]
 1024 0292 7047     		_NEXT
 1025              	
 1026              	//    RSHIFT	 ( w # -- w )
 1027              	// 	arithmetic Right shift # bits.
 1028              		_HEADER RSHIFT,6,"RSHIFT"
 1029 0294 51F8044B 		LDR	R4,[R1],#4
 1030 0298 44FA05F5 		MOV	R5,R4,ASR R5
 1031 029c 7047     		_NEXT
 1032              	
 1033              	//    LSHIFT	 ( w # -- w )
 1034              	// 	Right shift # bits.
 1035 029e 00BF     		_HEADER LSHIFT,6,"LSHIFT"
 1036 02a0 51F8044B 		LDR	R4,[R1],#4
 1037 02a4 04FA05F5 		MOV	R5,R4,LSL R5
 1038 02a8 7047     		_NEXT
 1039              	
 1040              	//    +	 ( w w -- w )
 1041              	// 	Add.
 1042 02aa 00BF     		_HEADER PLUS,1,"+"
 1043 02ac 51F8044B 		LDR	R4,[R1],#4
 1044 02b0 2544     		ADD	R5,R5,R4
 1045 02b2 7047     		_NEXT
 1046              	
 1047              	//    -	 ( w w -- w )
 1048              	// 	Subtract.
 1049              		_HEADER SUBB,1,"-"
 1050 02b4 51F8044B 		LDR	R4,[R1],#4
 1051 02b8 C5EB0405 		RSB	R5,R5,R4
 1052 02bc 7047     		_NEXT
 1053              	
 1054              	//    *	 ( w w -- w )
 1055              	// 	Multiply.
 1056 02be 00BF     		_HEADER STAR,1,"*"
 1057 02c0 51F8044B 		LDR	R4,[R1],#4
 1058 02c4 04FB05F5 		MUL	R5,R4,R5
 1059 02c8 7047     		_NEXT
 1060              	
 1061              	//    UM*	 ( w w -- ud )
 1062              	// 	Unsigned multiply.
 1063 02ca 00BF     		_HEADER UMSTA,3,"UM*"
 1064 02cc 0C68     		LDR	R4,[R1]
 1065 02ce A5FB0467 		UMULL	R6,R7,R5,R4
 1066 02d2 0E60     		STR	R6,[R1]
 1067 02d4 3D46     		MOV	R5,R7
 1068 02d6 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 24


 1069              	
 1070              	//    M*	 ( w w -- d )
 1071              	// 	signed multiply.
 1072              		_HEADER MSTAR,2,"M*"
 1073 02d8 0C68     		LDR	R4,[R1]
 1074 02da 85FB0467 		SMULL	R6,R7,R5,R4
 1075 02de 0E60     		STR	R6,[R1]
 1076 02e0 3D46     		MOV	R5,R7
 1077 02e2 7047     		_NEXT
 1078              	
 1079              	//    1+	 ( w -- w+1 )
 1080              	// 	Add 1.
 1081              		_HEADER ONEP,2,"1+"
 1082 02e4 05F10105 		ADD	R5,R5,#1
 1083 02e8 7047     		_NEXT
 1084              	
 1085              	//    1-	 ( w -- w-1 )
 1086              	// 	Subtract 1.
 1087 02ea 00BF     		_HEADER ONEM,2,"1-"
 1088 02ec A5F10105 		SUB	R5,R5,#1
 1089 02f0 7047     		_NEXT
 1090              	
 1091              	//    2+	 ( w -- w+2 )
 1092              	// 	Add 1.
 1093 02f2 00BF     		_HEADER TWOP,2,"2+"
 1094 02f4 05F10205 		ADD	R5,R5,#2
 1095 02f8 7047     		_NEXT
 1096              	
 1097              	//    2-	 ( w -- w-2 )
 1098              	// 	Subtract 2.
 1099 02fa 00BF     		_HEADER TWOM,2,"2-"
 1100 02fc A5F10205 		SUB	R5,R5,#2
 1101 0300 7047     		_NEXT
 1102              	
 1103              	//    CELL+	( w -- w+4 )
 1104              	// 	Add CELLL.
 1105 0302 00BF     		_HEADER CELLP,5,"CELL+"
 1106 0304 05F10405 		ADD	R5,R5,#CELLL
 1107 0308 7047     		_NEXT
 1108              	
 1109              	//    CELL-	( w -- w-4 )
 1110              	// 	Subtract CELLL.
 1111 030a 00BF     		_HEADER CELLM,5,"CELL-"
 1112 030c A5F10405 		SUB	R5,R5,#CELLL
 1113 0310 7047     		_NEXT
 1114              	 
 1115              	//    BL	( -- 32 )
 1116              	// 	Blank (ASCII space).
 1117 0312 00BF     		_HEADER BLANK,2,"BL"
 1118 0314 41F8045D 		_PUSH
 1119 0318 4FF02005 		MOV	R5,#32
 1120 031c 7047     		_NEXT
 1121              	
 1122              	//    CELLS	( w -- w*4 )
 1123              	// 	Multiply 4.
 1124 031e 00BF     		_HEADER CELLS,5,"CELLS"
 1125 0320 4FEA8505 		MOV	R5,R5,LSL#2
ARM GAS  stm32eforth.s 			page 25


 1126 0324 7047     		_NEXT
 1127              	
 1128              	//    CELL/	( w -- w/4 )
 1129              	// 	Divide by 4.
 1130 0326 00BF     		_HEADER CELLSL,5,"CELL/"
 1131 0328 4FEAA505 		MOV	R5,R5,ASR#2
 1132 032c 7047     		_NEXT
 1133              	
 1134              	//    2*	( w -- w*2 )
 1135              	// 	Multiply 2.
 1136 032e 00BF     		_HEADER TWOST,2,"2*"
 1137 0330 4FEA4505 		MOV	R5,R5,LSL#1
 1138 0334 7047     		_NEXT
 1139              	
 1140              	//    2/	( w -- w/2 )
 1141              	// 	Divide by 2.
 1142 0336 00BF     		_HEADER TWOSL,2,"2/"
 1143 0338 4FEA6505 		MOV	R5,R5,ASR#1
 1144 033c 7047     		_NEXT
 1145              	
 1146              	//    ?DUP	( w -- w w | 0 )
 1147              	// 	Conditional duplicate.
 1148 033e 00BF     		_HEADER QDUP,4,"?DUP"
 1149 0340 2C00     		MOVS	R4,R5
 1150 0342 18BF     		IT NE 
 1151 0344 41F8045D 	    STRNE	R5,[R1,#-4]!
 1152 0348 7047     		_NEXT
 1153              	
 1154              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1155              	// 	Rotate top 3 items.
 1156 034a 00BF     		_HEADER ROT,3,"ROT"
 1157 034c 0C68     		LDR	R4,[R1]  // r4=w2 
 1158 034e 0D60     		STR	R5,[R1]  // w3 replace w2 
 1159 0350 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1160 0352 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1161 0354 7047     		_NEXT
 1162              	
 1163              	//    2DROP	( w1 w2 -- )
 1164              	// 	Drop top 2 items.
 1165 0356 00BF     		_HEADER DDROP,5,"2DROP"
 1166 0358 51F8045B 		_POP
 1167 035c 51F8045B 		_POP
 1168 0360 7047     		_NEXT
 1169              	
 1170              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1171              	// 	Duplicate top 2 items.
 1172 0362 00BF     		_HEADER DDUP,4,"2DUP"
 1173 0364 0C68     		LDR	R4,[R1] // r4=w1
 1174 0366 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1175 036a 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1176 036e 7047     		_NEXT
 1177              	
 1178              	//    D+	( d1 d2 -- d3 )
 1179              	// 	Add top 2 double numbers.
 1180              		_HEADER DPLUS,2,"D+"
 1181 0370 51F8044B 		LDR	R4,[R1],#4
 1182 0374 51F8046B 		LDR	R6,[R1],#4
ARM GAS  stm32eforth.s 			page 26


 1183 0378 0F68     		LDR	R7,[R1]
 1184 037a E419     		ADDS	R4,R4,R7
 1185 037c 0C60     		STR	R4,[R1]
 1186 037e 45EB0605 		ADC	R5,R5,R6
 1187 0382 7047     		_NEXT
 1188              	
 1189              	//    NOT	 ( w -- !w )
 1190              	// 	1"s complement.
 1191              		_HEADER INVER,3,"NOT"
 1192 0384 6FEA0505 		MVN	R5,R5
 1193 0388 7047     		_NEXT
 1194              	
 1195              	//    NEGATE	( w -- -w )
 1196              	// 	2's complement.
 1197 038a 00BF     		_HEADER NEGAT,6,"NEGATE"
 1198 038c C5F10005 		RSB	R5,R5,#0
 1199 0390 7047     		_NEXT
 1200              	
 1201              	//    ABS	 ( w -- |w| )
 1202              	// 	Absolute.
 1203 0392 00BF     		_HEADER ABSS,3,"ABS"
 1204 0394 15F0004F 		TST	R5,#0x80000000
 1205 0398 18BF     		IT NE
 1206 039a 6D42     	    RSBNE   R5,R5,#0
 1207 039c 7047     		_NEXT
 1208              	
 1209              	//  0= ( w -- f )
 1210              	// TOS==0?
 1211 039e 00BF     		_HEADER ZEQUAL,2,"0="
 1212 03a0 15B9     		cbnz r5,1f
 1213 03a2 4FF0FF35 		mov r5,#-1
 1214 03a6 7047     		_NEXT 
 1215 03a8 85EA0505 	1:  eor r5,r5,r5  
 1216 03ac 7047     		_NEXT 	
 1217              	
 1218              	//    =	 ( w w -- t )
 1219              	// 	Equal?
 1220 03ae 00BF     		_HEADER EQUAL,1,"="
 1221 03b0 51F8044B 		LDR	R4,[R1],#4
 1222 03b4 A542     		CMP	R5,R4
 1223 03b6 0CBF     		ITE EQ 
 1224 03b8 6FF00005 	    MVNEQ	R5,#0
 1225 03bc 0025     		MOVNE	R5,#0
 1226 03be 7047     		_NEXT
 1227              	
 1228              	//    U<	 ( w w -- t )
 1229              	// 	Unsigned equal?
 1230              		_HEADER ULESS,2,"U<"
 1231 03c0 51F8044B 		LDR	R4,[R1],#4
 1232 03c4 AC42     		CMP	R4,R5
 1233 03c6 34BF     		ITE CC 
 1234 03c8 6FF00005 		MVNCC	R5,#0
 1235 03cc 0025     		MOVCS	R5,#0
 1236 03ce 7047     		_NEXT
 1237              	
 1238              	//    <	( w w -- t )
 1239              	// 	Less?
ARM GAS  stm32eforth.s 			page 27


 1240              		_HEADER LESS,1,"<"
 1241 03d0 51F8044B 		LDR	R4,[R1],#4
 1242 03d4 AC42     		CMP	R4,R5
 1243 03d6 B4BF     	    ITE LT
 1244 03d8 6FF00005 		MVNLT	R5,#0
 1245 03dc 0025     		MOVGE	R5,#0
 1246 03de 7047     		_NEXT
 1247              	
 1248              	//    >	( w w -- t )
 1249              	// 	greater?
 1250              		_HEADER GREAT,1,">"
 1251 03e0 51F8044B 		LDR	R4,[R1],#4
 1252 03e4 AC42     		CMP	R4,R5
 1253 03e6 CCBF     		ITE GT
 1254 03e8 6FF00005 	    MVNGT	R5,#0
 1255 03ec 0025     		MOVLE	R5,#0
 1256 03ee 7047     		_NEXT
 1257              	
 1258              	//    MAX	 ( w w -- max )
 1259              	// 	Leave maximum.
 1260              		_HEADER MAX,3,"MAX"
 1261 03f0 51F8044B 		LDR	R4,[R1],#4
 1262 03f4 AC42     		CMP	R4,R5
 1263 03f6 C8BF     		IT GT 
 1264 03f8 2546     		MOVGT	R5,R4
 1265 03fa 7047     		_NEXT
 1266              	
 1267              	//    MIN	 ( w w -- min )
 1268              	// 	Leave minimum.
 1269              		_HEADER MIN,3,"MIN"
 1270 03fc 51F8044B 		LDR	R4,[R1],#4
 1271 0400 AC42     		CMP	R4,R5
 1272 0402 B8BF     		IT LT
 1273 0404 2546     		MOVLT	R5,R4
 1274 0406 7047     		_NEXT
 1275              	
 1276              	//    +!	 ( w a -- )
 1277              	// 	Add to memory.
 1278              		_HEADER PSTOR,2,"+!"
 1279 0408 51F8044B 		LDR	R4,[R1],#4
 1280 040c 2E68     		LDR	R6,[R5]
 1281 040e 2644     		ADD	R6,R6,R4
 1282 0410 2E60     		STR	R6,[R5]
 1283 0412 51F8045B 		_POP
 1284 0416 7047     		_NEXT
 1285              	
 1286              	//    2!	 ( d a -- )
 1287              	// 	Store double number.
 1288              		_HEADER DSTOR,2,"2!"
 1289 0418 51F8044B 		LDR	R4,[R1],#4
 1290 041c 51F8046B 		LDR	R6,[R1],#4
 1291 0420 45F8044B 		STR	R4,[R5],#4
 1292 0424 2E60     		STR	R6,[R5]
 1293 0426 51F8045B 		_POP
 1294 042a 7047     		_NEXT
 1295              	
 1296              	//    2@	 ( a -- d )
ARM GAS  stm32eforth.s 			page 28


 1297              	// 	Fetch double number.
 1298              		_HEADER DAT,2,"2@"
 1299 042c 6C68     		LDR	R4,[R5,#4]
 1300 042e 41F8044D 		STR	R4,[R1,#-4]!
 1301 0432 2D68     		LDR	R5,[R5]
 1302 0434 7047     		_NEXT
 1303              	
 1304              	//    COUNT	( b -- b+1 c )
 1305              	// 	Fetch length of string.
 1306 0436 00BF     		_HEADER COUNT,5,"COUNT"
 1307 0438 15F8014B 		LDRB	R4,[R5],#1
 1308 043c 41F8045D 		_PUSH
 1309 0440 2546     		MOV	R5,R4
 1310 0442 7047     		_NEXT
 1311              	
 1312              	//    DNEGATE	( d -- -d )
 1313              	// 	Negate double number.
 1314              		_HEADER DNEGA,7,"DNEGATE"
 1315 0444 0C68     		LDR	R4,[R1]
 1316 0446 A6EB0606 		SUB	R6,R6,R6
 1317 044a 341B     		SUBS R4,R6,R4
 1318 044c 66EB0505 		SBC	R5,R6,R5
 1319 0450 0C60     		STR	R4,[R1]
 1320 0452 7047     		_NEXT
 1321              	
 1322              	// **************************************************************************
 1323              	//  System and user variables
 1324              	
 1325              	//    doVAR	( -- a )
 1326              	// 	Run time routine for VARIABLE and CREATE.
 1327              	
 1328              	// 	.word	_DNEGA+MAPOFFSET
 1329              	// _DOVAR	.byte  COMPO+5
 1330              	// 	.ascii "doVAR"
 1331              	// 	.p2align 2 	
 1332              	DOVAR:
 1333 0454 41F8045D 		_PUSH
 1334 0458 AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
 1335 045c 52F804FB 		_UNNEST
 1336              	
 1337              	//    doCON	( -- a ) 
 1338              	// 	Run time routine for CONSTANT.
 1339              	
 1340              	// 	.word	_DOVAR+MAPOFFSET
 1341              	// _DOCON	.byte  COMPO+5
 1342              	// 	.ascii "doCON"
 1343              	// 	.p2align 2 	
 1344              	DOCON:
 1345 0460 41F8045D 		_PUSH
 1346 0464 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1347 0468 52F804FB 		_UNNEST
 1348              	
 1349              	/***********************
 1350              	  system variables 
 1351              	***********************/
 1352              	
 1353              	 // SEED ( -- a)
ARM GAS  stm32eforth.s 			page 29


 1354              	 // return PRNG seed address 
 1355              		_HEADER SEED,4,"SEED"
 1356 046c 41F8045D 		_PUSH 
 1357 0470 03F10405 		ADD R5,R3,#SEED_OFS
 1358 0474 7047     		_NEXT 	
 1359              	
 1360              	//  MSEC ( -- a)
 1361              	// return address of milliseconds counter
 1362 0476 00BF     		_HEADER MSEC,4,"MSEC"
 1363 0478 41F8045D 	  _PUSH
 1364 047c 03F10805 	  ADD R5,R3,#TICKS_OFS
 1365 0480 7047     	  _NEXT 
 1366              	
 1367              	// TIMER ( -- a )
 1368              	// count down timer 
 1369 0482 00BF     		_HEADER TIMER,5,"TIMER"
 1370 0484 41F8045D 	  _PUSH 
 1371 0488 03F10C05 	  ADD R5,R3,#TIMER_OFS
 1372 048c 7047     	  _NEXT
 1373              	
 1374              	//    'BOOT	 ( -- a )
 1375              	// 	Application.
 1376 048e 00BF     		_HEADER TBOOT,5,"'BOOT"
 1377 0490 41F8045D 		_PUSH
 1378 0494 03F11805 		ADD	R5,R3,#BOOT_OFS 
 1379 0498 7047     		_NEXT
 1380              	
 1381              	//    BASE	( -- a )
 1382              	// 	Storage of the radix base for numeric I/O.
 1383 049a 00BF     		_HEADER BASE,4,"BASE"
 1384 049c 41F8045D 		_PUSH
 1385 04a0 03F11C05 		ADD	R5,R3,#BASE_OFS
 1386 04a4 7047     		_NEXT
 1387              	
 1388              	//    tmp	 ( -- a )
 1389              	// 	A temporary storage location used in parse and find.
 1390              	
 1391              	// 	.word	_BASE+MAPOFFSET
 1392              	// _TEMP	.byte   COMPO+3
 1393              	// 	.ascii "tmp"
 1394              	// 	.p2align 2 	
 1395              	TEMP:
 1396 04a6 41F8045D 		_PUSH
 1397 04aa 03F12005 		ADD	R5,R3,#TMP_OFS
 1398 04ae 7047     		_NEXT
 1399              	
 1400              	//    SPAN	( -- a )
 1401              	// 	Hold character count received by EXPECT.
 1402              		_HEADER SPAN,4,"SPAN"
 1403 04b0 41F8045D 		_PUSH
 1404 04b4 03F12405 		ADD	R5,R3,#SPAN_OFS
 1405 04b8 7047     		_NEXT
 1406              	
 1407              	//    >IN	 ( -- a )
 1408              	// 	Hold the character pointer while parsing input stream.
 1409 04ba 00BF     		_HEADER INN,3,">IN"
 1410 04bc 41F8045D 		_PUSH
ARM GAS  stm32eforth.s 			page 30


 1411 04c0 03F12805 		ADD	R5,R3,#TOIN_OFS
 1412 04c4 7047     		_NEXT
 1413              	
 1414              	//    #TIB	( -- a )
 1415              	// 	Hold the current count and address of the terminal input buffer.
 1416 04c6 00BF     		_HEADER NTIB,4,"#TIB"
 1417 04c8 41F8045D 		_PUSH
 1418 04cc 03F12C05 		ADD	R5,R3,#NTIB_OFS
 1419 04d0 7047     		_NEXT
 1420              	
 1421              	//    'EVAL	( -- a )
 1422              	// 	Execution vector of EVAL.
 1423 04d2 00BF     		_HEADER TEVAL,5,"'EVAL"
 1424 04d4 41F8045D 		_PUSH
 1425 04d8 03F13405 		ADD	R5,R3,#EVAL_OFS
 1426 04dc 7047     		_NEXT
 1427              	
 1428              	//    HLD	 ( -- a )
 1429              	// 	Hold a pointer in building a numeric output string.
 1430 04de 00BF     		_HEADER HLD,3,"HLD"
 1431 04e0 41F8045D 		_PUSH
 1432 04e4 03F13805 		ADD	R5,R3,#HLD_OFS
 1433 04e8 7047     		_NEXT
 1434              	
 1435              	//    CONTEXT	( -- a )
 1436              	// 	A area to specify vocabulary search order.
 1437 04ea 00BF     		_HEADER CNTXT,7,"CONTEXT"
 1438              	CRRNT:
 1439 04ec 41F8045D 		_PUSH
 1440 04f0 03F13C05 		ADD	R5,R3,#CTXT_OFS
 1441 04f4 7047     		_NEXT
 1442              	
 1443              	//    CP	( -- a )
 1444              	// 	Point to top name in RAM vocabulary.
 1445 04f6 00BF     		_HEADER CPP,2,"CP"
 1446 04f8 41F8045D 		_PUSH
 1447 04fc 03F14405 		ADD	R5,R3,#USER_CTOP_OFS
 1448 0500 7047     		_NEXT
 1449              	
 1450              	//   FCP ( -- a )
 1451              	//  Point ot top of Forth system dictionary
 1452 0502 00BF     		_HEADER FCP,3,"FCP"
 1453 0504 41F8045D 		_PUSH 
 1454 0508 03F14005 		ADD R5,R3,#FORTH_CTOP_OFS 
 1455 050c 7047     		_NEXT 
 1456              	
 1457              	//    LAST	( -- a )
 1458              	// 	Point to the last name in the name dictionary.
 1459 050e 00BF     		_HEADER LAST,4,"LAST"
 1460 0510 41F8045D 		_PUSH
 1461 0514 03F14805 		ADD	R5,R3,#LASTN_OFS
 1462 0518 7047     		_NEXT
 1463              	
 1464              	/***********************
 1465              		system constants 
 1466              	***********************/
 1467              	
ARM GAS  stm32eforth.s 			page 31


 1468              	//	USER_BEGIN ( -- a )
 1469              	//  where user area begin in RAM
 1470 051a 00BF     		_HEADER USER_BEGIN,10,"USER_BEGIN"
 1471 051c 41F8045D 		_PUSH 
 1472 0520 004D     		ldr r5,USR_BGN_ADR 
 1473 0522 7047     		_NEXT 
 1474              	USR_BGN_ADR:
 1475 0524 8C1D0018 	.word CTOP+MAPOFFSET 
 1476              	
 1477              	//  USER_END ( -- a )
 1478              	//  where user area end in RAM 
 1479              		_HEADER USER_END,8,"USER_END"
 1480 0528 41F8045D 		_PUSH 
 1481 052c 4FF68065 		_MOV32 R5,DEND 
 1481      C2F20105 
 1482 0534 7047     		_NEXT 
 1483              	
 1484              	//  IMG_ADR ( -- a )
 1485              	//  where user image is saved in FLASH
 1486 0536 00BF     		_HEADER IMG_ADR,7,"IMG_ADR"
 1487 0538 41F8045D 		_PUSH
 1488 053c 004D     		ldr r5,USR_IMG_ADR   
 1489 053e 7047     		_NEXT 
 1490              	USR_IMG_ADR:
 1491 0540 00000000 		.word USER_SPACE 
 1492              	
 1493              	//  IMG_SIGN ( -- a )
 1494              	// image signature 
 1495              		_HEADER IMG_SIGN,8,"IMG_SIGN"
 1496 0544 41F8045D 		_PUSH 
 1497 0548 03F11405 		ADD r5,r3,#IMG_SIGN_OFS 
 1498 054c 7047     		_NEXT 
 1499              	
 1500              	/* *********************
 1501              	  Common functions
 1502              	***********************/
 1503              	
 1504              	//    WITHIN	( u ul uh -- t )
 1505              	// 	Return true if u is within the range of ul and uh.
 1506 054e 00BF     		_HEADER WITHI,6,"WITHIN"
 1507 0550 42F804ED 		_NEST
 1508 0554 FFF77AFE 		BL	OVER
 1509 0558 FFF7ACFE 		BL	SUBB
 1510 055c FFF760FE 		BL	TOR
 1511 0560 FFF7A8FE 		BL	SUBB
 1512 0564 FFF752FE 		BL	RFROM
 1513 0568 FFF72AFF 		BL	ULESS
 1514 056c 52F804FB 		_UNNEST
 1515              	
 1516              	//  Divide
 1517              	
 1518              	//    UM/MOD	( udl udh u -- ur uq )
 1519              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1520              		_HEADER UMMOD,6,"UM/MOD"
 1521 0570 4FF00107 		MOV	R7,#1
 1522 0574 51F8044B 		LDR	R4,[R1],#4
 1523 0578 0E68     		LDR	R6,[R1]
ARM GAS  stm32eforth.s 			page 32


 1524              	UMMOD0:
 1525 057a B619     		ADDS	R6,R6,R6
 1526 057c 6441     		ADCS	R4,R4,R4
 1527 057e 04D3     		BCC	UMMOD1
 1528 0580 A4EB0504 		SUB	R4,R4,R5
 1529 0584 06F10106 		ADD	R6,R6,#1
 1530 0588 04E0     		B UMMOD2
 1531              	UMMOD1:
 1532 058a 641B     		SUBS	R4,R4,R5 
 1533 058c 28BF     		IT CS 
 1534 058e 0136     		ADDCS	R6,R6,#1
 1535 0590 00D2     		BCS	UMMOD2
 1536 0592 2C44     		ADD	R4,R4,R5
 1537              	UMMOD2:
 1538 0594 FF19     		ADDS	R7,R7,R7
 1539 0596 F0D3     		BCC	UMMOD0
 1540 0598 3546     		MOV	R5,R6
 1541 059a 0C60     		STR	R4,[R1]
 1542 059c 7047     		_NEXT
 1543              	
 1544              	//    M/MOD	( d n -- r q )
 1545              	// 	Signed floored divide of double by single. Return mod and quotient.
 1546 059e 00BF     		_HEADER MSMOD,5,"M/MOD"
 1547 05a0 42F804ED 		_NEST
 1548 05a4 FFF74AFE 		BL	DUPP
 1549 05a8 FFF754FE 		BL	ZLESS
 1550 05ac FFF746FE 		BL	DUPP
 1551 05b0 FFF736FE 		BL	TOR
 1552 05b4 FFF706FE 		BL	QBRAN
 1553 05b8 CC050018 		.word	MMOD1+MAPOFFSET
 1554 05bc FFF7E6FE 		BL	NEGAT
 1555 05c0 FFF72EFE 		BL	TOR
 1556 05c4 FFF73EFF 		BL	DNEGA
 1557 05c8 FFF720FE 		BL	RFROM
 1558              	MMOD1:
 1559 05cc FFF728FE 	  BL	TOR
 1560 05d0 FFF734FE 		BL	DUPP
 1561 05d4 FFF73EFE 		BL	ZLESS
 1562 05d8 FFF7F4FD 		BL	QBRAN
 1563 05dc E8050018 		.word	MMOD2+MAPOFFSET
 1564 05e0 FFF71AFE 		BL	RAT
 1565 05e4 FFF762FE 		BL	PLUS
 1566              	MMOD2:
 1567 05e8 FFF710FE 	  BL	RFROM
 1568 05ec FFF7C0FF 		BL	UMMOD
 1569 05f0 FFF70CFE 		BL	RFROM
 1570 05f4 FFF7E6FD 		BL	QBRAN
 1571 05f8 08060018 		.word	MMOD3+MAPOFFSET
 1572 05fc FFF722FE 		BL	SWAP
 1573 0600 FFF7C4FE 		BL	NEGAT
 1574 0604 FFF71EFE 		BL	SWAP
 1575              	MMOD3:   
 1576 0608 52F804FB 		_UNNEST
 1577              	
 1578              	//    /MOD	( n n -- r q )
 1579              	// 	Signed divide. Return mod and quotient.
 1580              		_HEADER SLMOD,4,"/MOD"
ARM GAS  stm32eforth.s 			page 33


 1581 060c 42F804ED 		_NEST
 1582 0610 FFF71CFE 		BL	OVER
 1583 0614 FFF71EFE 		BL	ZLESS
 1584 0618 FFF714FE 		BL	SWAP
 1585 061c FFF7C0FF 		BL	MSMOD
 1586 0620 52F804FB 		_UNNEST
 1587              	
 1588              	//    MOD	 ( n n -- r )
 1589              	// 	Signed divide. Return mod only.
 1590              		_HEADER MODD,3,"MODD"
 1591 0624 42F804ED 		_NEST
 1592 0628 FFF7F0FF 		BL	SLMOD
 1593 062c FFF702FE 		BL	DROP
 1594 0630 52F804FB 		_UNNEST
 1595              	
 1596              	//    /	   ( n n -- q )
 1597              	// 	Signed divide. Return quotient only.
 1598              		_HEADER SLASH,1,"/"
 1599 0634 42F804ED 		_NEST
 1600 0638 FFF7E8FF 		BL	SLMOD
 1601 063c FFF702FE 		BL	SWAP
 1602 0640 FFF7F8FD 		BL	DROP
 1603 0644 52F804FB 		_UNNEST
 1604              	
 1605              	//    */MOD	( n1 n2 n3 -- r q )
 1606              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1607              		_HEADER SSMOD,5,"*/MOD"
 1608 0648 42F804ED 		_NEST
 1609 064c FFF7E8FD 		BL	TOR
 1610 0650 FFF742FE 		BL	MSTAR
 1611 0654 FFF7DAFD 		BL	RFROM
 1612 0658 FFF7A2FF 		BL	MSMOD
 1613 065c 52F804FB 		_UNNEST
 1614              	
 1615              	//    */	  ( n1 n2 n3 -- q )
 1616              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1617              		_HEADER STASL,2,"*/"
 1618 0660 42F804ED 		_NEST
 1619 0664 FFF7F0FF 		BL	SSMOD
 1620 0668 FFF7ECFD 		BL	SWAP
 1621 066c FFF7E2FD 		BL	DROP
 1622 0670 52F804FB 		_UNNEST
 1623              	
 1624              	// **************************************************************************
 1625              	//  Miscellaneous
 1626              	
 1627              	//    ALIGNED	( b -- a )
 1628              	// 	Align address to the cell boundary.
 1629              		_HEADER ALGND,7,"ALIGNED"
 1630 0674 05F10305 		ADD	R5,R5,#3
 1631 0678 6FF00304 		MVN	R4,#3
 1632 067c 05EA0405 		AND	R5,R5,R4
 1633 0680 7047     		_NEXT
 1634              	
 1635              	//    >CHAR	( c -- c )
 1636              	// 	Filter non-printing characters.
 1637 0682 00BF     		_HEADER TCHAR,5,">CHAR"
ARM GAS  stm32eforth.s 			page 34


 1638 0684 42F804ED 		_NEST
 1639 0688 FFF77FFD 		_DOLIT 0x7F
 1639      7F000000 
 1640 0690 FFF7E6FD 		BL	ANDD
 1641 0694 FFF7D2FD 		BL	DUPP	// mask msb
 1642 0698 FFF73CFE 		BL	BLANK
 1643 069c FFF775FD 		_DOLIT 127
 1643      7F000000 
 1644 06a4 FFF754FF 		BL	WITHI	// check for printable
 1645 06a8 FFF76CFE 		BL	INVER
 1646 06ac FFF78AFD 		BL	QBRAN
 1647 06b0 C0060018 		.word	TCHA1+MAPOFFSET
 1648 06b4 FFF7BEFD 		BL	DROP
 1649 06b8 FFF767FD 		_DOLIT 	'_'	// replace non-printables
 1649      5F000000 
 1650              	TCHA1:
 1651 06c0 52F804FB 		  _UNNEST
 1652              	
 1653              	//    DEPTH	( -- n )
 1654              	// 	Return the depth of the data stack.
 1655              		_HEADER DEPTH,5,"DEPTH"
 1656 06c4 4FF47F46 		_MOV32 R6,SPP 
 1656      C2F20106 
 1657 06cc A6EB0106 		SUB	R6,R6,R1
 1658 06d0 41F8045D 		_PUSH
 1659 06d4 4FEAA605 		ASR	R5,R6,#2
 1660 06d8 7047     		_NEXT  
 1661              	
 1662              	//    PICK	( ... +n -- ... w )
 1663              	// 	Copy the nth stack item to tos.
 1664 06da 00BF     		_HEADER PICK,4,"PICK"
 1665 06dc 42F804ED 		_NEST
 1666 06e0 FFF700FE 		BL	ONEP
 1667 06e4 FFF71CFE 		BL	CELLS
 1668 06e8 FFF7A0FD 		BL	SPAT
 1669 06ec FFF7DEFD 		BL	PLUS
 1670 06f0 FFF782FD 		BL	AT
 1671 06f4 52F804FB 		_UNNEST
 1672              	
 1673              	// **************************************************************************
 1674              	//  Memory access
 1675              	
 1676              	//    HERE	( -- a )
 1677              	// 	Return the top of the code dictionary.
 1678              		_HEADER HERE,4,"HERE"
 1679 06f8 42F804ED 		_NEST
 1680 06fc FFF7FCFE 		BL	CPP
 1681 0700 FFF77AFD 		BL	AT
 1682 0704 52F804FB 		_UNNEST
 1683              		
 1684              	//    PAD	 ( -- a )
 1685              	// 	Return the address of a temporary buffer.
 1686              		_HEADER PAD,4,"PAD"
 1687 0708 42F804ED 		_NEST
 1688 070c FFF7F4FF 		BL	HERE
 1689 0710 05F15005 		ADD	R5,R5,#80
 1690 0714 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 35


 1691              	
 1692              	//    TIB	 ( -- a )
 1693              	// 	Return the address of the terminal input buffer.
 1694              		_HEADER TIB,3,"TIB"
 1695 0718 41F8045D 		_PUSH
 1696 071c 1D6B     		ldr r5,[r3,#TIB_OFS]
 1697 071e 7047     		_NEXT
 1698              	
 1699              	//    @EXECUTE	( a -- )
 1700              	// 	Execute vector stored in address a.
 1701              		_HEADER ATEXE,8,"@EXECUTE"
 1702 0720 2C00     		MOVS	R4,R5
 1703 0722 51F8045B 		_POP
 1704 0726 2468     		LDR	R4,[R4]
 1705 0728 44F00104 		ORR	R4,R4,#1
 1706 072c 18BF     	    IT NE 
 1707 072e 2047     		BXNE	R4
 1708 0730 7047     		_NEXT
 1709              	
 1710              	//    CMOVE	( b1 b2 u -- )
 1711              	// 	Copy u bytes from b1 to b2.
 1712 0732 00BF     		_HEADER CMOVE,5,"CMOVE"
 1713 0734 51F8046B 		LDR	R6,[R1],#4
 1714 0738 51F8047B 		LDR	R7,[R1],#4
 1715 073c 03E0     		B CMOV1
 1716              	CMOV0:
 1717 073e 17F8014B 		LDRB	R4,[R7],#1
 1718 0742 06F8014B 		STRB	R4,[R6],#1
 1719              	CMOV1:
 1720 0746 2D00     		MOVS	R5,R5
 1721 0748 02D0     		BEQ	CMOV2
 1722 074a A5F10105 		SUB	R5,R5,#1
 1723 074e F6E7     		B CMOV0
 1724              	CMOV2:
 1725 0750 51F8045B 		_POP
 1726 0754 7047     		_NEXT
 1727              	
 1728              	//    MOVE	( a1 a2 u -- )
 1729              	// 	Copy u words from a1 to a2.
 1730 0756 00BF     		_HEADER MOVE,4,"MOVE"
 1731 0758 25F00305 		AND	R5,R5,#-4
 1732 075c 51F8046B 		LDR	R6,[R1],#4
 1733 0760 51F8047B 		LDR	R7,[R1],#4
 1734 0764 03E0     		B MOVE1
 1735              	MOVE0:
 1736 0766 57F8044B 		LDR	R4,[R7],#4
 1737 076a 46F8044B 		STR	R4,[R6],#4
 1738              	MOVE1:
 1739 076e 2D00     		MOVS	R5,R5
 1740 0770 02D0     		BEQ	MOVE2
 1741 0772 A5F10405 		SUB	R5,R5,#4
 1742 0776 F6E7     		B MOVE0
 1743              	MOVE2:
 1744 0778 51F8045B 		_POP
 1745 077c 7047     		_NEXT
 1746              	
 1747              	//    FILL	( b u c -- )
ARM GAS  stm32eforth.s 			page 36


 1748              	// 	Fill u bytes of character c to area beginning at b.
 1749 077e 00BF     		_HEADER FILL,4,"FILL"
 1750 0780 51F8046B 		LDR	R6,[R1],#4
 1751 0784 51F8047B 		LDR	R7,[R1],#4
 1752              	FILL0:
 1753 0788 00E0     		B FILL1
 1754 078a 2D46     		MOV	R5,R5
 1755              	FILL1:
 1756 078c 07F8015B 		STRB	R5,[R7],#1
 1757 0790 3600     		MOVS	R6,R6
 1758 0792 02D0     		BEQ	FILL2
 1759 0794 A6F10106 		SUB	R6,R6,#1
 1760 0798 F6E7     		B FILL0
 1761              	FILL2:
 1762 079a 51F8045B 		_POP
 1763 079e 7047     		_NEXT
 1764              	
 1765              	//    PACK$	( b u a -- a )
 1766              	// 	Build a counted word with u characters from b. Null fill.
 1767              		_HEADER PACKS,5,"PACK$"
 1768 07a0 42F804ED 		_NEST
 1769 07a4 FFF766FF 		BL	ALGND
 1770 07a8 FFF748FD 		BL	DUPP
 1771 07ac FFF738FD 		BL	TOR			// strings only on cell boundary
 1772 07b0 FFF74CFD 		BL	OVER
 1773 07b4 FFF77AFD 		BL	PLUS
 1774 07b8 FFF794FD 		BL	ONEP
 1775 07bc FFF7E5FC 		_DOLIT 0xFFFFFFFC
 1775      FCFFFFFF 
 1776 07c4 FFF74CFD 		BL	ANDD			// count mod cell
 1777 07c8 FFF7DFFC 		_DOLIT 	0
 1777      00000000 
 1778 07d0 FFF738FD 		BL	SWAP
 1779 07d4 FFF70AFD 		BL	STORE			// null fill cell
 1780 07d8 FFF71EFD 		BL	RAT
 1781 07dc FFF7C2FD 		BL	DDUP
 1782 07e0 FFF70CFD 		BL	CSTOR
 1783 07e4 FFF77EFD 		BL	ONEP			// save count
 1784 07e8 FFF72CFD 		BL	SWAP
 1785 07ec FFF7A2FF 		BL	CMOVE
 1786 07f0 FFF70CFD 		BL	RFROM
 1787 07f4 52F804FB 		_UNNEST   			// move string
 1788              	
 1789              	// **************************************************************************
 1790              	//  Numeric output, single precision
 1791              	
 1792              	//    DIGIT	( u -- c )
 1793              	// 	Convert digit u to a character.
 1794              		_HEADER DIGIT,5,"DIGIT"
 1795 07f8 42F804ED 		_NEST
 1796 07fc FFF7C5FC 		_DOLIT 9
 1796      09000000 
 1797 0804 FFF722FD 		BL	OVER
 1798 0808 FFF7E2FD 		BL	LESS
 1799 080c 05F00705 		AND	R5,R5,#7
 1800 0810 FFF74CFD 		BL	PLUS
 1801 0814 05F13005 		ADD	R5,R5,#'0'
ARM GAS  stm32eforth.s 			page 37


 1802 0818 52F804FB 		_UNNEST
 1803              	
 1804              	//    EXTRACT	( n base -- n c )
 1805              	// 	Extract the least significant digit from n.
 1806              		_HEADER EXTRC,7,"EXTRACT"
 1807 081c 42F804ED 		_NEST
 1808 0820 FFF7B3FC 		_DOLIT 0
 1808      00000000 
 1809 0828 FFF70CFD 		BL	SWAP
 1810 082c FFF7A0FE 		BL	UMMOD
 1811 0830 FFF708FD 		BL	SWAP
 1812 0834 FFF7E0FF 		BL	DIGIT
 1813 0838 52F804FB 		_UNNEST
 1814              	
 1815              	//    <#	  ( -- )
 1816              	// 	Initiate the numeric output process.
 1817              		_HEADER BDIGS,2,"<#"
 1818 083c 42F804ED 		_NEST
 1819 0840 FFF762FF 		BL	PAD
 1820 0844 FFF74CFE 		BL	HLD
 1821 0848 FFF7D0FC 		BL	STORE
 1822 084c 52F804FB 		_UNNEST
 1823              	
 1824              	//    HOLD	( c -- )
 1825              	// 	Insert a character into the numeric output string.
 1826              		_HEADER HOLD,4,"HOLD"
 1827 0850 42F804ED 		_NEST
 1828 0854 FFF744FE 		BL	HLD
 1829 0858 FFF7CEFC 		BL	AT
 1830 085c FFF746FD 		BL	ONEM
 1831 0860 FFF7ECFC 		BL	DUPP
 1832 0864 FFF73CFE 		BL	HLD
 1833 0868 FFF7C0FC 		BL	STORE
 1834 086c FFF7C6FC 		BL	CSTOR
 1835 0870 52F804FB 		_UNNEST
 1836              	
 1837              	//    #	   ( u -- u )
 1838              	// 	Extract one digit from u and append the digit to output string.
 1839              		_HEADER DIG,1,"#"
 1840 0874 42F804ED 		_NEST
 1841 0878 FFF710FE 		BL	BASE
 1842 087c FFF7BCFC 		BL	AT
 1843 0880 FFF7CCFF 		BL	EXTRC
 1844 0884 FFF7E4FF 		BL	HOLD
 1845 0888 52F804FB 		_UNNEST
 1846              	
 1847              	//    #S	  ( u -- 0 )
 1848              	// 	Convert u until all digits are added to the output string.
 1849              		_HEADER DIGS,2,"#S"
 1850 088c 42F804ED 		_NEST
 1851              	DIGS1:
 1852 0890 FFF7F0FF 	    BL	DIG
 1853 0894 FFF7D2FC 		BL	DUPP
 1854 0898 FFF794FC 		BL	QBRAN
 1855 089c A2080018 		.word	DIGS2+MAPOFFSET
 1856 08a0 F6E7     		B	DIGS1
 1857              	DIGS2:
ARM GAS  stm32eforth.s 			page 38


 1858 08a2 52F804FB 		  _UNNEST
 1859              	
 1860              	//    SIGN	( n -- )
 1861              	// 	Add a minus sign to the numeric output string.
 1862 08a6 00BF     		_HEADER SIGN, 4,"SIGN"
 1863 08a8 42F804ED 		_NEST
 1864 08ac FFF7D2FC 		BL	ZLESS
 1865 08b0 FFF788FC 		BL	QBRAN
 1866 08b4 C4080018 		.word	SIGN1+MAPOFFSET
 1867 08b8 FFF767FC 		_DOLIT '-'
 1867      2D000000 
 1868 08c0 FFF7C6FF 		BL	HOLD
 1869              	SIGN1:
 1870 08c4 52F804FB 		  _UNNEST
 1871              	
 1872              	//    #>	  ( w -- b u )
 1873              	// 	Prepare the outputDCB to be TYPE'd.
 1874              		_HEADER EDIGS,2,"#>"
 1875 08c8 42F804ED 		_NEST
 1876 08cc FFF7B2FC 		BL	DROP
 1877 08d0 FFF706FE 		BL	HLD
 1878 08d4 FFF790FC 		BL	AT
 1879 08d8 FFF716FF 		BL	PAD
 1880 08dc FFF7B6FC 		BL	OVER
 1881 08e0 FFF7E8FC 		BL	SUBB
 1882 08e4 52F804FB 		_UNNEST
 1883              	
 1884              	//    str	 ( n -- b u )
 1885              	// 	Convert a signed integer to a numeric string.
 1886              	
 1887              	// 	.word	_EDIGS+MAPOFFSET
 1888              	// _STRR	.byte  3
 1889              	// 	.ascii "str"
 1890              	// 	.p2align 2 	
 1891              	STRR:
 1892 08e8 42F804ED 		_NEST
 1893 08ec FFF7A6FC 		BL	DUPP
 1894 08f0 FFF796FC 		BL	TOR
 1895 08f4 FFF74EFD 		BL	ABSS
 1896 08f8 FFF7A0FF 		BL	BDIGS
 1897 08fc FFF7C6FF 		BL	DIGS
 1898 0900 FFF784FC 		BL	RFROM
 1899 0904 FFF7D0FF 		BL	SIGN
 1900 0908 FFF7DEFF 		BL	EDIGS
 1901 090c 52F804FB 		_UNNEST
 1902              	
 1903              	//    HEX	 ( -- )
 1904              	// 	Use radix 16 as base for numeric conversions.
 1905              		_HEADER HEX,3,"HEX"
 1906 0910 42F804ED 		_NEST
 1907 0914 FFF739FC 		_DOLIT 16
 1907      10000000 
 1908 091c FFF7BEFD 		BL	BASE
 1909 0920 FFF764FC 		BL	STORE
 1910 0924 52F804FB 		_UNNEST
 1911              	
 1912              	//    DECIMAL	( -- )
ARM GAS  stm32eforth.s 			page 39


 1913              	// 	Use radix 10 as base for numeric conversions.
 1914              		_HEADER DECIM,7,"DECIMAL"
 1915 0928 42F804ED 		_NEST
 1916 092c FFF72DFC 		_DOLIT 10
 1916      0A000000 
 1917 0934 FFF7B2FD 		BL	BASE
 1918 0938 FFF758FC 		BL	STORE
 1919 093c 52F804FB 		_UNNEST
 1920              	
 1921              	// **************************************************************************
 1922              	//  Numeric input, single precision
 1923              	
 1924              	//    DIGIT?	( c base -- u t )
 1925              	// 	Convert a character to its numeric value. A flag indicates success.
 1926              		_HEADER DIGTQ,6,"DIGIT?"
 1927 0940 42F804ED 		_NEST
 1928 0944 FFF76CFC 		BL	TOR
 1929 0948 FFF71FFC 		_DOLIT '0'
 1929      30000000 
 1930 0950 FFF7B0FC 		BL	SUBB
 1931 0954 FFF719FC 		_DOLIT 9
 1931      09000000 
 1932 095c FFF776FC 		BL	OVER
 1933 0960 FFF736FD 		BL	LESS
 1934 0964 FFF72EFC 		BL	QBRAN
 1935 0968 8C090018 		.word	DGTQ1+MAPOFFSET
 1936 096c FFF70DFC 		_DOLIT 7
 1936      07000000 
 1937 0974 FFF79EFC 		BL	SUBB
 1938 0978 FFF760FC 		BL	DUPP
 1939 097c FFF705FC 		_DOLIT 10
 1939      0A000000 
 1940 0984 FFF724FD 		BL	LESS
 1941 0988 FFF770FC 		BL	ORR
 1942              	DGTQ1:
 1943 098c FFF756FC 	  BL	DUPP
 1944 0990 FFF73CFC 		BL	RFROM
 1945 0994 FFF714FD 		BL	ULESS
 1946 0998 52F804FB 		_UNNEST
 1947              	
 1948              	//    NUMBER?	( a -- n T | a F )
 1949              	// 	Convert a number word to integer. Push a flag on tos.
 1950              		_HEADER NUMBQ,7,"NUMBER?"
 1951 099c 42F804ED 		_NEST
 1952 09a0 FFF77CFD 		BL	BASE
 1953 09a4 FFF728FC 		BL	AT
 1954 09a8 FFF73AFC 		BL	TOR
 1955 09ac FFF7EDFB 		_DOLIT 0
 1955      00000000 
 1956 09b4 FFF74AFC 		BL	OVER
 1957 09b8 FFF73EFD 		BL	COUNT
 1958 09bc FFF746FC 		BL	OVER
 1959 09c0 FFF722FC 		BL	CAT
 1960 09c4 FFF7E1FB 		_DOLIT '$'
 1960      24000000 
 1961 09cc FFF7F0FC 		BL	EQUAL
 1962 09d0 FFF7F8FB 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 40


 1963 09d4 EC090018 		.word	NUMQ1+MAPOFFSET
 1964 09d8 FFF79AFF 		BL	HEX
 1965 09dc FFF732FC 		BL	SWAP
 1966 09e0 FFF780FC 		BL	ONEP
 1967 09e4 FFF72EFC 		BL	SWAP
 1968 09e8 FFF780FC 		BL	ONEM
 1969              	NUMQ1:
 1970 09ec FFF72EFC 		BL	OVER
 1971 09f0 FFF70AFC 		BL	CAT
 1972 09f4 FFF7C9FB 		_DOLIT '-'
 1972      2D000000 
 1973 09fc FFF7D8FC 		BL	EQUAL
 1974 0a00 FFF70EFC 		BL	TOR
 1975 0a04 FFF71EFC 		BL	SWAP
 1976 0a08 FFF706FC 		BL	RAT
 1977 0a0c FFF752FC 		BL	SUBB
 1978 0a10 FFF718FC 		BL	SWAP
 1979 0a14 FFF700FC 		BL	RAT
 1980 0a18 FFF748FC 		BL	PLUS
 1981 0a1c FFF790FC 		BL	QDUP
 1982 0a20 FFF7D0FB 		BL	QBRAN
 1983 0a24 B00A0018 		.word	NUMQ6+MAPOFFSET
 1984 0a28 FFF760FC 		BL	ONEM
 1985 0a2c FFF7F8FB 		BL	TOR
 1986              	NUMQ2:
 1987 0a30 FFF704FC 		BL	DUPP
 1988 0a34 FFF7F4FB 		BL	TOR
 1989 0a38 FFF7E6FB 		BL	CAT
 1990 0a3c FFF72EFD 		BL	BASE
 1991 0a40 FFF7DAFB 		BL	AT
 1992 0a44 FFF77CFF 		BL	DIGTQ
 1993 0a48 FFF7BCFB 		BL	QBRAN
 1994 0a4c 940A0018 		.word	NUMQ4+MAPOFFSET
 1995 0a50 FFF7F8FB 		BL	SWAP
 1996 0a54 FFF722FD 		BL	BASE
 1997 0a58 FFF7CEFB 		BL	AT
 1998 0a5c FFF730FC 		BL	STAR
 1999 0a60 FFF724FC 		BL	PLUS
 2000 0a64 FFF7D2FB 		BL	RFROM
 2001 0a68 FFF73CFC 		BL	ONEP
 2002 0a6c FFF79BFB 		BL	DONXT
 2003 0a70 300A0018 		.word	NUMQ2+MAPOFFSET
 2004 0a74 FFF7D0FB 		BL	RAT
 2005 0a78 FFF7E4FB 		BL	SWAP
 2006 0a7c FFF7DAFB 		BL	DROP
 2007 0a80 FFF7A0FB 		BL	QBRAN
 2008 0a84 8C0A0018 		.word	NUMQ3+MAPOFFSET
 2009 0a88 FFF780FC 		BL	NEGAT
 2010              	NUMQ3:
 2011 0a8c FFF7DAFB 		BL	SWAP
 2012 0a90 00F00CB8 		B.W	NUMQ5
 2013              	NUMQ4:
 2014 0a94 FFF7BAFB 		BL	RFROM
 2015 0a98 FFF7B8FB 		BL	RFROM
 2016 0a9c FFF75CFC 		BL	DDROP
 2017 0aa0 FFF75AFC 		BL	DDROP
 2018 0aa4 FFF771FB 		_DOLIT	0
ARM GAS  stm32eforth.s 			page 41


 2018      00000000 
 2019              	NUMQ5:
 2020 0aac FFF7C6FB 		BL	DUPP
 2021              	NUMQ6:
 2022 0ab0 FFF7ACFB 		BL	RFROM
 2023 0ab4 FFF750FC 		BL	DDROP
 2024 0ab8 FFF7A8FB 		BL	RFROM
 2025 0abc FFF7EEFC 		BL	BASE
 2026 0ac0 FFF794FB 		BL	STORE
 2027 0ac4 52F804FB 		_UNNEST
 2028              	
 2029              	// **************************************************************************
 2030              	//  Basic I/O
 2031              	
 2032              	//    KEY	 ( -- c )
 2033              	// 	Wait for and return an input character.
 2034              		_HEADER KEY,3,"KEY"
 2035 0ac8 42F804ED 		_NEST
 2036              	KEY1:
 2037 0acc FFF73AFB 		BL	QRX
 2038 0ad0 FFF778FB 		BL	QBRAN
 2039 0ad4 CC0A0018 		.word	KEY1+MAPOFFSET
 2040 0ad8 52F804FB 		_UNNEST
 2041              	
 2042              	//    SPACE	( -- )
 2043              	// 	Send the blank character to the output device.
 2044              		_HEADER SPACE,5,"SPACE"
 2045 0adc 42F804ED 		_NEST
 2046 0ae0 FFF718FC 		BL	BLANK
 2047 0ae4 FFF744FB 		BL	EMIT
 2048 0ae8 52F804FB 		_UNNEST
 2049              	
 2050              	//    SPACES	( +n -- )
 2051              	// 	Send n spaces to the output device.
 2052              		_HEADER SPACS,6,"SPACES"
 2053 0aec 42F804ED 		_NEST
 2054 0af0 FFF74BFB 		_DOLIT 0
 2054      00000000 
 2055 0af8 FFF77AFC 		BL	MAX
 2056 0afc FFF790FB 		BL	TOR
 2057 0b00 00F002B8 		B.W	CHAR2
 2058              	CHAR1:
 2059 0b04 FFF7EAFF 		BL	SPACE
 2060              	CHAR2:
 2061 0b08 FFF74DFB 		BL	DONXT
 2062 0b0c 040B0018 		.word	CHAR1+MAPOFFSET
 2063 0b10 52F804FB 		_UNNEST
 2064              	
 2065              	//    TYPE	( b u -- )
 2066              	// 	Output u characters from b.
 2067              		_HEADER TYPEE,4,"TYPE"
 2068 0b14 42F804ED 		_NEST
 2069 0b18 FFF782FB 		BL  TOR   // ( a+1 -- R: u )
 2070 0b1c 00F006B8 		B.W	TYPE2
 2071              	TYPE1:  
 2072 0b20 FFF78AFC 		BL  COUNT
 2073 0b24 FFF7AEFD 		BL	TCHAR
ARM GAS  stm32eforth.s 			page 42


 2074 0b28 FFF722FB 		BL	EMIT
 2075              	TYPE2:  
 2076 0b2c FFF73BFB 		BL  DONXT  
 2077 0b30 200B0018 		.word	TYPE1+MAPOFFSET
 2078 0b34 FFF77EFB 		BL	DROP
 2079 0b38 52F804FB 		_UNNEST
 2080              	
 2081              	//    CR	  ( -- )
 2082              	// 	Output a carriage return and a line feed.
 2083              		_HEADER CR,2,"CR"
 2084 0b3c 42F804ED 		_NEST
 2085 0b40 FFF723FB 		_DOLIT	CRR
 2085      0D000000 
 2086 0b48 FFF712FB 		BL	EMIT
 2087 0b4c FFF71DFB 		_DOLIT	LF
 2087      0A000000 
 2088 0b54 FFF70CFB 		BL	EMIT
 2089 0b58 52F804FB 		_UNNEST
 2090              	
 2091              	//    do_$	( -- a )
 2092              	// 	Return the address of a compiled string.
 2093              	//  adjust return address to skip over it.
 2094              	
 2095              	// 	.word	_CR+MAPOFFSET
 2096              	// _DOSTR	.byte  COMPO+3
 2097              	// 	.ascii "do$$"
 2098              	// 	.p2align 2 	
 2099              	DOSTR:
 2100 0b5c 42F804ED 		_NEST     
 2101              	/* compiled string address is 2 levels deep */
 2102 0b60 FFF754FB 		BL	RFROM	// { -- a1 }
 2103 0b64 FFF752FB 		BL	RFROM	//  {a1 -- a1 a2 } b0 set
 2104 0b68 FFF7C0FB 		BL	ONEM	//  clear b0
 2105 0b6c FFF766FB 		BL	DUPP	// {a1 a2 -- a1 a2 a2 }
 2106 0b70 FFF762FC 		BL	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2107 0b74 FFF79AFB 		BL	PLUS	// { -- a1 a2 a2+1+c }
 2108 0b78 FFF77CFD 		BL	ALGND	//  end of string
 2109 0b7c FFF7B2FB 		BL	ONEP	//  restore b0, this result in return address 2 level deep.
 2110 0b80 FFF74EFB 		BL	TOR		//  address after string { -- a1 a2 }
 2111 0b84 FFF75EFB 		BL	SWAP	//  count tugged
 2112 0b88 FFF74AFB 		BL	TOR     //  ( -- a2) is string address
 2113 0b8c 52F804FB 		_UNNEST
 2114              	
 2115              	//    $"|	( -- a )
 2116              	// 	Run time routine compiled by _". Return address of a compiled string.
 2117              	
 2118              	// 	.word	_DOSTR+MAPOFFSET
 2119              	// _STRQP	.byte  COMPO+3
 2120              	// 	.ascii "$\"|"
 2121              	// 	.p2align 2 	
 2122              	STRQP:
 2123 0b90 42F804ED 		_NEST
 2124 0b94 FFF7E2FF 		BL	DOSTR
 2125 0b98 52F804FB 		_UNNEST			// force a call to dostr
 2126              	
 2127              	//    .$	( a -- )
 2128              	// 	Run time routine of ." . Output a compiled string.
ARM GAS  stm32eforth.s 			page 43


 2129              	
 2130              	// 	.word	_STRQP+MAPOFFSET
 2131              	// _DOTST	.byte  COMPO+2
 2132              	// 	.ascii ".$$"
 2133              	// 	.p2align 2 	
 2134              	DOTST:
 2135 0b9c 42F804ED 		_NEST
 2136 0ba0 FFF74AFC 		BL	COUNT // ( -- a+1 c )
 2137 0ba4 FFF7B6FF 		BL	TYPEE
 2138 0ba8 52F804FB 		_UNNEST
 2139              	
 2140              	//    ."|	( -- )
 2141              	// 	Run time routine of ." . Output a compiled string.
 2142              	
 2143              	// 	.word	_DOTST+MAPOFFSET
 2144              	// _DOTQP	.byte  COMPO+3
 2145              	// 	.ascii ".""|"
 2146              	// 	.p2align 2 	
 2147              	DOTQP:
 2148 0bac 42F804ED 		_NEST
 2149 0bb0 FFF7D4FF 		BL	DOSTR
 2150 0bb4 FFF7F2FF 		BL	DOTST
 2151 0bb8 52F804FB 		_UNNEST
 2152              	
 2153              	//    .R	  ( n +n -- )
 2154              	// 	Display an integer in a field of n columns, right justified.
 2155              		_HEADER DOTR,2,".R"
 2156 0bbc 42F804ED 		_NEST
 2157 0bc0 FFF72EFB 		BL	TOR
 2158 0bc4 FFF790FE 		BL	STRR
 2159 0bc8 FFF720FB 		BL	RFROM
 2160 0bcc FFF73EFB 		BL	OVER
 2161 0bd0 FFF770FB 		BL	SUBB
 2162 0bd4 FFF78AFF 		BL	SPACS
 2163 0bd8 FFF79CFF 		BL	TYPEE
 2164 0bdc 52F804FB 		_UNNEST
 2165              	
 2166              	//    U.R	 ( u +n -- )
 2167              	// 	Display an unsigned integer in n column, right justified.
 2168              		_HEADER UDOTR,3,"U.R"
 2169 0be0 42F804ED 		_NEST
 2170 0be4 FFF71CFB 		BL	TOR
 2171 0be8 FFF728FE 		BL	BDIGS
 2172 0bec FFF74EFE 		BL	DIGS
 2173 0bf0 FFF76AFE 		BL	EDIGS
 2174 0bf4 FFF70AFB 		BL	RFROM
 2175 0bf8 FFF728FB 		BL	OVER
 2176 0bfc FFF75AFB 		BL	SUBB
 2177 0c00 FFF774FF 		BL	SPACS
 2178 0c04 FFF786FF 		BL	TYPEE
 2179 0c08 52F804FB 		_UNNEST
 2180              	
 2181              	//    U.	  ( u -- )
 2182              	// 	Display an unsigned integer in free format.
 2183              		_HEADER UDOT,2,"U."
 2184 0c0c 42F804ED 		_NEST
 2185 0c10 FFF714FE 		BL	BDIGS
ARM GAS  stm32eforth.s 			page 44


 2186 0c14 FFF73AFE 		BL	DIGS
 2187 0c18 FFF756FE 		BL	EDIGS
 2188 0c1c FFF75EFF 		BL	SPACE
 2189 0c20 FFF778FF 		BL	TYPEE
 2190 0c24 52F804FB 		_UNNEST
 2191              	
 2192              	//   H. ( u -- )
 2193              	//  display unsigned integer in hexadecimal
 2194              		_HEADER HDOT,2,"H."
 2195 0c28 42F804ED 		_NEST 
 2196 0c2c FFF736FC 		BL	BASE 
 2197 0c30 FFF7E2FA 		BL	AT 
 2198 0c34 FFF7F4FA 		BL	TOR 
 2199 0c38 FFF76AFE 		BL	HEX 
 2200 0c3c FFF7E6FF 		BL	UDOT 
 2201 0c40 FFF7E4FA 		BL	RFROM 
 2202 0c44 FFF72AFC 		BL	BASE 
 2203 0c48 FFF7D0FA 		BL	STORE 
 2204 0c4c 52F804FB 		_UNNEST 
 2205              	
 2206              	
 2207              	//    .	   ( w -- )
 2208              	// 	Display an integer in free format, preceeded by a space.
 2209              		_HEADER DOT,1,"."
 2210 0c50 42F804ED 		_NEST
 2211 0c54 FFF722FC 		BL	BASE
 2212 0c58 FFF7CEFA 		BL	AT
 2213 0c5c FFF795FA 		_DOLIT	10
 2213      0A000000 
 2214 0c64 FFF708FB 		BL	XORR			// ?decimal
 2215 0c68 FFF7ACFA 		BL	QBRAN
 2216 0c6c 780C0018 		.word	DOT1+MAPOFFSET
 2217 0c70 FFF7CCFF 		BL	UDOT
 2218 0c74 52F804FB 		_UNNEST			// no,display unsigned
 2219              	DOT1:
 2220 0c78 FFF736FE 	    BL	STRR
 2221 0c7c FFF72EFF 		BL	SPACE
 2222 0c80 FFF748FF 		BL	TYPEE
 2223 0c84 52F804FB 		_UNNEST			// yes, display signed
 2224              	
 2225              	//    ?	   ( a -- )
 2226              	// 	Display the contents in a memory cell.
 2227              		_HEADER QUEST,1,"?"
 2228 0c88 42F804ED 		_NEST
 2229 0c8c FFF7B4FA 		BL	AT
 2230 0c90 FFF7DEFF 		BL	DOT
 2231 0c94 52F804FB 		_UNNEST
 2232              	
 2233              	// **************************************************************************
 2234              	//  Parsing
 2235              	
 2236              	//    parse	( b u c -- b u delta //  string> )
 2237              	// 	Scan word delimited by c. Return found string and its offset.
 2238              	
 2239              	// 	.word	_QUEST+MAPOFFSET
 2240              	// _PARS	.byte  5
 2241              	// 	.ascii "parse"
ARM GAS  stm32eforth.s 			page 45


 2242              	// 	.p2align 2 	
 2243              	PARS:
 2244 0c98 42F804ED 		_NEST
 2245 0c9c FFF703FC 		BL	TEMP
 2246 0ca0 FFF7A4FA 		BL	STORE
 2247 0ca4 FFF7D2FA 		BL	OVER
 2248 0ca8 FFF7BAFA 		BL	TOR
 2249 0cac FFF7C6FA 		BL	DUPP
 2250 0cb0 FFF788FA 		BL	QBRAN
 2251 0cb4 A60D0018 		.word	PARS8+MAPOFFSET
 2252 0cb8 FFF718FB 		BL	ONEM
 2253 0cbc FFF7F3FB 		BL	TEMP
 2254 0cc0 FFF79AFA 		BL	AT
 2255 0cc4 FFF726FB 		BL	BLANK
 2256 0cc8 FFF772FB 		BL	EQUAL
 2257 0ccc FFF77AFA 		BL	QBRAN
 2258 0cd0 200D0018 		.word	PARS3+MAPOFFSET
 2259 0cd4 FFF7A4FA 		BL	TOR
 2260              	PARS1:
 2261 0cd8 FFF71CFB 		BL	BLANK
 2262 0cdc FFF7B6FA 		BL	OVER
 2263 0ce0 FFF792FA 		BL	CAT			// skip leading blanks 
 2264 0ce4 FFF7E6FA 		BL	SUBB
 2265 0ce8 FFF7B4FA 		BL	ZLESS
 2266 0cec FFF74AFB 		BL	INVER
 2267 0cf0 FFF768FA 		BL	QBRAN
 2268 0cf4 1C0D0018 		.word	PARS2+MAPOFFSET
 2269 0cf8 FFF7F4FA 		BL	ONEP
 2270 0cfc FFF753FA 		BL	DONXT
 2271 0d00 D80C0018 		.word	PARS1+MAPOFFSET
 2272 0d04 FFF782FA 		BL	RFROM
 2273 0d08 FFF794FA 		BL	DROP
 2274 0d0c FFF73DFA 		_DOLIT	0
 2274      00000000 
 2275 0d14 FFF792FA 		BL	DUPP
 2276 0d18 52F804FB 		_UNNEST
 2277              	PARS2:
 2278 0d1c FFF776FA 	  BL	RFROM
 2279              	PARS3:
 2280 0d20 FFF794FA 		BL	OVER
 2281 0d24 FFF78EFA 		BL	SWAP
 2282 0d28 FFF77AFA 		BL	TOR
 2283              	PARS4:
 2284 0d2c FFF7BBFB 		BL	TEMP
 2285 0d30 FFF762FA 		BL	AT
 2286 0d34 FFF78AFA 		BL	OVER
 2287 0d38 FFF766FA 		BL	CAT
 2288 0d3c FFF7BAFA 		BL	SUBB			// scan for delimiter
 2289 0d40 FFF7B1FB 		BL	TEMP
 2290 0d44 FFF758FA 		BL	AT
 2291 0d48 FFF7E4FA 		BL	BLANK
 2292 0d4c FFF730FB 		BL	EQUAL
 2293 0d50 FFF738FA 		BL	QBRAN
 2294 0d54 5C0D0018 		.word	PARS5+MAPOFFSET
 2295 0d58 FFF77CFA 		BL	ZLESS
 2296              	PARS5:
 2297 0d5c FFF732FA 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 46


 2298 0d60 7A0D0018 		.word	PARS6+MAPOFFSET
 2299 0d64 FFF7BEFA 		BL	ONEP
 2300 0d68 FFF71DFA 		BL	DONXT
 2301 0d6c 2C0D0018 		.word	PARS4+MAPOFFSET
 2302 0d70 FFF764FA 		BL	DUPP
 2303 0d74 FFF754FA 		BL	TOR
 2304 0d78 09E0     		B	PARS7
 2305              	PARS6:
 2306 0d7a FFF747FA 		BL	RFROM
 2307 0d7e FFF759FA 		BL	DROP
 2308 0d82 FFF75BFA 		BL	DUPP
 2309 0d86 FFF7ADFA 		BL	ONEP
 2310 0d8a FFF749FA 		BL	TOR
 2311              	PARS7:
 2312 0d8e FFF75DFA 		BL	OVER
 2313 0d92 FFF78FFA 		BL	SUBB
 2314 0d96 FFF739FA 		BL	RFROM
 2315 0d9a FFF737FA 		BL	RFROM
 2316 0d9e FFF789FA 		BL	SUBB
 2317 0da2 52F804FB 		_UNNEST
 2318              	PARS8:
 2319 0da6 FFF751FA 		BL	OVER
 2320 0daa FFF72FFA 		BL	RFROM
 2321 0dae FFF781FA 		BL	SUBB
 2322 0db2 52F804FB 		_UNNEST
 2323              	
 2324              	//    PARSE	( c -- b u //  string> )
 2325              	// 	Scan input stream and return counted string delimited by c.
 2326 0db6 00BF     		_HEADER PARSE,5,"PARSE"
 2327 0db8 42F804ED 		_NEST
 2328 0dbc FFF730FA 		BL	TOR
 2329 0dc0 FFF7AAFC 		BL	TIB
 2330 0dc4 FFF77AFB 		BL	INN
 2331 0dc8 FFF716FA 		BL	AT
 2332 0dcc FFF76EFA 		BL	PLUS			// current input buffer pointer
 2333 0dd0 FFF77AFB 		BL	NTIB
 2334 0dd4 FFF710FA 		BL	AT
 2335 0dd8 FFF770FB 		BL	INN
 2336 0ddc FFF70CFA 		BL	AT
 2337 0de0 FFF768FA 		BL	SUBB			// remaining count
 2338 0de4 FFF712FA 		BL	RFROM
 2339 0de8 FFF756FF 		BL	PARS
 2340 0dec FFF766FB 		BL	INN
 2341 0df0 FFF70AFB 		BL	PSTOR
 2342 0df4 52F804FB 		_UNNEST
 2343              	
 2344              	//    .(	  ( -- )
 2345              	// 	Output following string up to next ) .
 2346              		_HEADER DOTPR,IMEDD+2,".("
 2347 0df8 42F804ED 		_NEST
 2348 0dfc FFF7C5F9 		_DOLIT	')'
 2348      29000000 
 2349 0e04 FFF7D8FF 		BL	PARSE
 2350 0e08 FFF784FE 		BL	TYPEE
 2351 0e0c 52F804FB 		_UNNEST
 2352              	
 2353              	//    (	   ( -- )
ARM GAS  stm32eforth.s 			page 47


 2354              	// 	Ignore following string up to next ) . A comment.
 2355              		_HEADER PAREN,IMEDD+1,"("
 2356 0e10 42F804ED 		_NEST
 2357 0e14 FFF7B9F9 		_DOLIT	')'
 2357      29000000 
 2358 0e1c FFF7CCFF 		BL	PARSE
 2359 0e20 FFF79AFA 		BL	DDROP
 2360 0e24 52F804FB 		_UNNEST
 2361              	
 2362              	//    \	   ( -- )
 2363              	// 	Ignore following text till the end of line.
 2364              		_HEADER BKSLA,1,"\\"
 2365 0e28 42F804ED 		_NEST
 2366 0e2c FFF74CFB 		BL	NTIB
 2367 0e30 FFF7E2F9 		BL	AT
 2368 0e34 FFF742FB 		BL	INN
 2369 0e38 FFF7D8F9 		BL	STORE
 2370 0e3c 52F804FB 		_UNNEST
 2371              	
 2372              	//    CHAR	( -- c )
 2373              	// 	Parse next word and return its first character.
 2374              		_HEADER CAHR,4,"CHAR"
 2375 0e40 42F804ED 		_NEST
 2376 0e44 FFF766FA 		BL	BLANK
 2377 0e48 FFF7B6FF 		BL	PARSE
 2378 0e4c FFF7F2F9 		BL	DROP
 2379 0e50 FFF7DAF9 		BL	CAT
 2380 0e54 52F804FB 		_UNNEST
 2381              	
 2382              	//    WORD	( c -- a //  string> )
 2383              	// 	Parse a word from input stream and copy it to code dictionary.
 2384              		_HEADER WORDD,4,"WORD"
 2385 0e58 42F804ED 		_NEST
 2386 0e5c FFF7ACFF 		BL	PARSE
 2387 0e60 FFF74AFC 		BL	HERE
 2388 0e64 FFF74EFA 		BL	CELLP
 2389 0e68 FFF79AFC 		BL	PACKS
 2390 0e6c 52F804FB 		_UNNEST
 2391              	
 2392              	//    TOKEN	( -- a //  string> )
 2393              	// 	Parse a word from input stream and copy it to name dictionary.
 2394              		_HEADER TOKEN,5,"TOKEN"
 2395 0e70 42F804ED 		_NEST
 2396 0e74 FFF74EFA 		BL	BLANK
 2397 0e78 FFF7EEFF 		BL	WORDD
 2398 0e7c 52F804FB 		_UNNEST
 2399              	
 2400              	// **************************************************************************
 2401              	//  Dictionary search
 2402              	
 2403              	//    >CFA	( na -- cfa )
 2404              	// 	Return a code field address given a name address.
 2405              		_HEADER TOCFA,4,">CFA"
 2406 0e80 42F804ED 		_NEST
 2407 0e84 FFF7D8FA 		BL	COUNT
 2408 0e88 FFF77FF9 		_DOLIT	0x1F
 2408      1F000000 
ARM GAS  stm32eforth.s 			page 48


 2409 0e90 FFF7E6F9 		BL	ANDD
 2410 0e94 FFF70AFA 		BL	PLUS
 2411 0e98 FFF7ECFB 		BL	ALGND
 2412 0e9c 52F804FB 		_UNNEST
 2413              	
 2414              	//	NAME> ( na -- ca ) 
 2415              	// Return code address 
 2416              		_HEADER NAMET,5,"NAME>"
 2417 0ea0 42F804ED 		_NEST 
 2418 0ea4 FFF7ECFF 		BL	TOCFA
 2419 0ea8 FFF7A6F9 		BL	AT  
 2420 0eac 52F804FB 		_UNNEST 
 2421              	
 2422              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2423              	// 	Compare u bytes in two strings. Return 0 if identical.
 2424              	//
 2425              	//  Picatout 2020-12-01, 
 2426              	//      Because of problem with .align directive that
 2427              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2428              	// 		words  to do a byte by byte comparison. 
 2429              	//
 2430              		_HEADER SAMEQ,5,"SAME?"
 2431 0eb0 42F804ED 		_NEST
 2432 0eb4 FFF7B4F9 		BL	TOR
 2433 0eb8 00F01EB8 		B.W	SAME2
 2434              	SAME1:
 2435 0ebc FFF7C6F9 		BL	OVER  // ( a1 a2 -- a1 a2 a1 )
 2436 0ec0 FFF7AAF9 		BL	RAT   // a1 a2 a1 u 
 2437 0ec4 FFF7F2F9 		BL	PLUS  // a1 a2 a1+u 
 2438 0ec8 FFF79EF9 		BL	CAT	   // a1 a2 c1    		
 2439 0ecc FFF7BEF9 		BL	OVER  // a1 a2 c1 a2 
 2440 0ed0 FFF7A2F9 		BL	RAT    
 2441 0ed4 FFF7EAF9 		BL	PLUS    
 2442 0ed8 FFF796F9 		BL	CAT	  // a1 a2 c1 c2
 2443 0edc FFF7EAF9 		BL	SUBB  
 2444 0ee0 FFF72EFA 		BL	QDUP
 2445 0ee4 FFF76EF9 		BL	QBRAN
 2446 0ee8 F80E0018 		.word	SAME2+MAPOFFSET
 2447 0eec FFF78EF9 		BL	RFROM
 2448 0ef0 FFF7A0F9 		BL	DROP
 2449 0ef4 52F804FB 		_UNNEST	// strings not equal
 2450              	SAME2:
 2451 0ef8 FFF755F9 		BL	DONXT
 2452 0efc BC0E0018 		.word	SAME1+MAPOFFSET
 2453 0f00 FFF743F9 		_DOLIT	0
 2453      00000000 
 2454 0f08 52F804FB 		_UNNEST	// strings equal
 2455              	
 2456              	//    find	( a na -- ca na | a F )
 2457              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2458              	
 2459              	//  Picatout 2020-12-01,  
 2460              	//		Modified from original. See comment for word "SAME?" 
 2461              	
 2462              	// 	.word	_SAMEQ+MAPOFFSET
 2463              	// _FIND	.byte  4
 2464              	// 	.ascii "find"
ARM GAS  stm32eforth.s 			page 49


 2465              	// 	.p2align 2 	
 2466              	FIND:
 2467 0f0c 42F804ED 		_NEST
 2468 0f10 FFF798F9 		BL	SWAP			// na a	
 2469 0f14 FFF790FA 		BL	COUNT			// na a+1 count
 2470 0f18 FFF790F9 		BL	DUPP 
 2471 0f1c FFF7C3FA 		BL	TEMP
 2472 0f20 FFF764F9 		BL	STORE			// na a+1 count 
 2473 0f24 FFF77CF9 		BL  TOR		// na a+1  R: count  
 2474 0f28 FFF78CF9 		BL	SWAP			// a+1 na
 2475              	FIND1:
 2476 0f2c FFF786F9 		BL	DUPP			// a+1 na na
 2477 0f30 FFF748F9 		BL	QBRAN
 2478 0f34 7C0F0018 		.word	FIND6+MAPOFFSET	// end of vocabulary
 2479 0f38 FFF780F9 		BL	DUPP			// a+1 na na
 2480 0f3c FFF764F9 		BL	CAT			// a+1 na name1
 2481 0f40 FFF723F9 		_DOLIT	MASKK
 2481      1FFFFFFF 
 2482 0f48 FFF78AF9 		BL	ANDD
 2483 0f4c FFF764F9 		BL	RAT			// a+1 na name1 count 
 2484 0f50 FFF792F9 		BL	XORR			// a+1 na,  same length?
 2485 0f54 FFF736F9 		BL	QBRAN
 2486 0f58 680F0018 		.word	FIND2+MAPOFFSET
 2487 0f5c FFF7D6F9 		BL	CELLM			// a+1 la
 2488 0f60 FFF74AF9 		BL	AT			// a+1 next_na
 2489 0f64 FFF7E2BF 		B.w	FIND1			// try next word
 2490              	FIND2:   
 2491 0f68 FFF7BCF9 		BL	ONEP			// a+1 na+1
 2492 0f6c FFF79BFA 		BL	TEMP
 2493 0f70 FFF742F9 		BL	AT			// a+1 na+1 count
 2494 0f74 FFF79CFF 		BL	SAMEQ		// a+1 na+1 ? 
 2495              	FIND3:	
 2496 0f78 00F00CB8 		B.w	FIND4
 2497              	FIND6:	
 2498 0f7c FFF746F9 		BL	RFROM			// a+1 0 name1 -- , no match
 2499 0f80 FFF758F9 		BL	DROP			// a+1 0
 2500 0f84 FFF75EF9 		BL	SWAP			// 0 a+1
 2501 0f88 FFF7B0F9 		BL	ONEM			// 0 a
 2502 0f8c FFF75AF9 		BL	SWAP			// a 0 
 2503 0f90 52F804FB 		_UNNEST			// return without a match
 2504              	FIND4:	
 2505 0f94 FFF716F9 		BL	QBRAN			// a+1 na+1
 2506 0f98 AC0F0018 		.word	FIND5+MAPOFFSET	// found a match
 2507 0f9c FFF7A6F9 		BL	ONEM			// a+1 na
 2508 0fa0 FFF7B4F9 		BL	CELLM			// a+4 la
 2509 0fa4 FFF728F9 		BL	AT			// a+1 next_na
 2510 0fa8 FFF7C0BF 		B.w	FIND1			// compare next name
 2511              	FIND5:	
 2512 0fac FFF72EF9 		BL	RFROM			// a+1 na+1 count
 2513 0fb0 FFF740F9 		BL	DROP			// a+1 na+1
 2514 0fb4 FFF746F9 		BL	SWAP			// na+1 a+1
 2515 0fb8 FFF73CF9 		BL	DROP			// na+1
 2516 0fbc FFF796F9 		BL	ONEM			// na
 2517 0fc0 FFF73CF9 		BL	DUPP			// na na
 2518 0fc4 FFF76CFF 		BL	NAMET			// na ca
 2519 0fc8 FFF73CF9 		BL	SWAP			// ca na
 2520 0fcc 52F804FB 		_UNNEST			//  return with a match
ARM GAS  stm32eforth.s 			page 50


 2521              	
 2522              	//    NAME?	( a -- ca na | a F )
 2523              	// 	Search all context vocabularies for a string.
 2524              		_HEADER NAMEQ,5,"NAME?"
 2525 0fd0 42F804ED 		_NEST
 2526 0fd4 FFF78AFA 		BL	CNTXT
 2527 0fd8 FFF70EF9 		BL	AT
 2528 0fdc FFF796FF 		BL	FIND
 2529 0fe0 52F804FB 		_UNNEST
 2530              	
 2531              	// **************************************************************************
 2532              	//  Terminal input
 2533              	
 2534              	//    	  ( bot eot cur -- bot eot cur )
 2535              	// 	Backup the cursor by one character.
 2536              	
 2537              	// 	.word	_NAMEQ+MAPOFFSET
 2538              	// _BKSP	.byte  2
 2539              	// 	.ascii "^H"
 2540              	// 	.p2align 2 	
 2541              	BKSP:
 2542 0fe4 42F804ED 		_NEST
 2543 0fe8 FFF71AF9 		BL	TOR
 2544 0fec FFF72EF9 		BL	OVER
 2545 0ff0 FFF70CF9 		BL	RFROM
 2546 0ff4 FFF726F9 		BL	SWAP
 2547 0ff8 FFF728F9 		BL	OVER
 2548 0ffc FFF73CF9 		BL	XORR
 2549 1000 FFF7E0F8 		BL	QBRAN
 2550 1004 2C100018 		.word	BACK1+MAPOFFSET
 2551 1008 FFF7BFF8 		_DOLIT	BKSPP
 2551      08000000 
 2552 1010 FFF7AEF8 		BL	TECHO
 2553              	// 	BL	ATEXE
 2554 1014 FFF76AF9 		BL	ONEM
 2555 1018 FFF77CF9 		BL	BLANK
 2556 101c FFF7A8F8 		BL	TECHO
 2557              	// 	BL	ATEXE
 2558 1020 FFF7B3F8 		_DOLIT	BKSPP
 2558      08000000 
 2559 1028 FFF7A2F8 		BL	TECHO
 2560              	// 	BL	ATEXE
 2561              	BACK1:
 2562 102c 52F804FB 		  _UNNEST
 2563              	
 2564              	//    TAP	 ( bot eot cur c -- bot eot cur )
 2565              	// 	Accept and echo the key stroke and bump the cursor.
 2566              	
 2567              	// 	.word	_BKSP+MAPOFFSET
 2568              	// _TAP	.byte  3
 2569              	// 	.ascii "TAP"
 2570              	// 	.p2align 2 	
 2571              	TAP:
 2572 1030 42F804ED 		_NEST
 2573 1034 FFF702F9 		BL	DUPP
 2574 1038 FFF79AF8 		BL	TECHO
 2575              	// 	BL	ATEXE
ARM GAS  stm32eforth.s 			page 51


 2576 103c FFF706F9 		BL	OVER
 2577 1040 FFF7DCF8 		BL	CSTOR
 2578 1044 FFF74EF9 		BL	ONEP
 2579 1048 52F804FB 		_UNNEST
 2580              	
 2581              	//    kTAP	( bot eot cur c -- bot eot cur )
 2582              	// 	Process a key stroke, CR or backspace.
 2583              	
 2584              	// 	.word	_TAP+MAPOFFSET
 2585              	// _KTAP	.byte  4
 2586              	// 	.ascii "kTAP"
 2587              	// 	.p2align 2 	
 2588              	KTAP:
 2589              	TTAP:
 2590 104c 42F804ED 		_NEST
 2591 1050 FFF7F4F8 		BL	DUPP
 2592 1054 FFF799F8 		_DOLIT	CRR
 2592      0D000000 
 2593 105c FFF70CF9 		BL	XORR
 2594 1060 FFF7B0F8 		BL	QBRAN
 2595 1064 94100018 		.word	KTAP2+MAPOFFSET
 2596 1068 FFF78FF8 		_DOLIT	BKSPP
 2596      08000000 
 2597 1070 FFF702F9 		BL	XORR
 2598 1074 FFF7A6F8 		BL	QBRAN
 2599 1078 8C100018 		.word	KTAP1+MAPOFFSET
 2600 107c FFF74AF9 		BL	BLANK
 2601 1080 FFF7D6FF 		BL	TAP
 2602 1084 52F804FB 		_UNNEST
 2603 1088 00000000 		.word	0			// patch
 2604              	KTAP1:
 2605 108c FFF7AAFF 	  BL	BKSP
 2606 1090 52F804FB 		_UNNEST
 2607              	KTAP2:
 2608 1094 FFF7CEF8 	  BL	DROP
 2609 1098 FFF7D4F8 		BL	SWAP
 2610 109c FFF7CAF8 		BL	DROP
 2611 10a0 FFF7CCF8 		BL	DUPP
 2612 10a4 52F804FB 		_UNNEST
 2613              	
 2614              	//    ACCEPT	( b u -- b u )
 2615              	// 	Accept characters to input buffer. Return with actual count.
 2616              		_HEADER ACCEP,6,"ACCEPT"
 2617 10a8 42F804ED 		_NEST
 2618 10ac FFF7CEF8 		BL	OVER
 2619 10b0 FFF7FCF8 		BL	PLUS
 2620 10b4 FFF7CAF8 		BL	OVER
 2621              	ACCP1:
 2622 10b8 FFF754F9 	  BL	DDUP
 2623 10bc FFF7DCF8 		BL	XORR
 2624 10c0 FFF780F8 		BL	QBRAN
 2625 10c4 F4100018 		.word	ACCP4+MAPOFFSET
 2626 10c8 FFF7FEFC 		BL	KEY
 2627 10cc FFF7B6F8 		BL	DUPP
 2628 10d0 FFF720F9 		BL	BLANK
 2629 10d4 FFF759F8 		_DOLIT	127
 2629      7F000000 
ARM GAS  stm32eforth.s 			page 52


 2630 10dc FFF738FA 		BL	WITHI
 2631 10e0 FFF770F8 		BL	QBRAN
 2632 10e4 EE100018 		.word	ACCP2+MAPOFFSET
 2633 10e8 FFF7A2FF 		BL	TAP
 2634 10ec 01E0     		B	ACCP3
 2635              	ACCP2:
 2636 10ee FFF7ADFF 	  BL	KTAP
 2637              	// 	BL	ATEXE
 2638              	ACCP3:	  
 2639 10f2 E1E7     		B	ACCP1
 2640              	ACCP4:
 2641 10f4 FFF79EF8 	  BL	DROP
 2642 10f8 FFF7A8F8 		BL	OVER
 2643 10fc FFF7DAF8 		BL	SUBB
 2644 1100 52F804FB 		_UNNEST
 2645              	
 2646              	//    QUERY	( -- )
 2647              	// 	Accept input stream to terminal input buffer.
 2648              		_HEADER QUERY,5,"QUERY"
 2649 1104 42F804ED 		_NEST
 2650 1108 FFF706FB 		BL	TIB
 2651 110c FFF73DF8 		_DOLIT	80
 2651      50000000 
 2652 1114 FFF7C8FF 		BL	ACCEP
 2653 1118 FFF7D6F9 		BL	NTIB
 2654 111c FFF766F8 		BL	STORE
 2655 1120 FFF788F8 		BL	DROP
 2656 1124 FFF731F8 		_DOLIT	0
 2656      00000000 
 2657 112c FFF7C6F9 		BL	INN
 2658 1130 FFF75CF8 		BL	STORE
 2659 1134 52F804FB 		_UNNEST
 2660              	
 2661              	// **************************************************************************
 2662              	//  Error handling
 2663              	
 2664              	//    ABORT	( a -- )
 2665              	// 	Reset data stack and jump to QUIT.
 2666              		_HEADER ABORT,5,"ABORT"
 2667 1138 42F804ED 		_NEST
 2668 113c FFF7CEFC 		BL	SPACE
 2669              	ABORT1:
 2670 1140 FFF77AF9 		BL	COUNT
 2671 1144 FFF7E6FC 		BL	TYPEE
 2672 1148 FFF71FF8 		_DOLIT	0X3F
 2672      3F000000 
 2673 1150 FFF70EF8 		BL	EMIT
 2674 1154 FFF7F2FC 		BL	CR
 2675 1158 00F08AF8 		BL	PRESE
 2676 115c 00F092B8 		B.W	QUIT
 2677              	
 2678              	//    _abort"	( f -- )
 2679              	// 	Run time routine of ABORT" . Abort with a message.
 2680              	
 2681              	// 	.word	_ABORT+MAPOFFSET
 2682              	// _ABORQ	.byte  COMPO+6
 2683              	// 	.ascii "abort\""
ARM GAS  stm32eforth.s 			page 53


 2684              	// 	.p2align 2 	
 2685              	ABORQ:
 2686 1160 42F804ED 		_NEST
 2687 1164 FFF7FAFC 		BL	DOSTR 
 2688 1168 FFF76CF8 		BL	SWAP 
 2689 116c FFF72AF8 		BL	QBRAN
 2690 1170 76110018 		.word	1f+MAPOFFSET	// text flag
 2691 1174 E4E7     		B	ABORT1 
 2692              	1:
 2693 1176 FFF75DF8 		BL	DROP
 2694 117a 52F804FB 		_UNNEST			// drop error
 2695              	
 2696              	// **************************************************************************
 2697              	//  The text interpreter
 2698              	
 2699              	//    $INTERPRET  ( a -- )
 2700              	// 	Interpret a word. If failed, try to convert it to an integer.
 2701 117e 00BF     		_HEADER INTER,10,"$INTERPRET"
 2702 1180 42F804ED 		_NEST
 2703 1184 FFF724FF 		BL	NAMEQ
 2704 1188 FFF7DAF8 		BL	QDUP	// ?defined
 2705 118c FFF71AF8 		BL	QBRAN
 2706 1190 C0110018 		.word	INTE1+MAPOFFSET
 2707 1194 FFF730F8 		BL	AT
 2708 1198 FEF7F7FF 		_DOLIT	COMPO
 2708      40000000 
 2709 11a0 FFF75EF8 		BL	ANDD	// ?compile only lexicon bits
 2710 11a4 FFF7DCFF 		BL	ABORQ
 2711 11a8 0D       		.byte	13
 2712 11a9 20636F6D 		.ascii " compile only"
 2712      70696C65 
 2712      206F6E6C 
 2712      79
 2713 11b6 00BF     		.p2align 2 	
 2714 11b8 FEF7F0FF 		BL	EXECU
 2715 11bc 52F804FB 		_UNNEST			// execute defined word
 2716              	INTE1:
 2717 11c0 FFF7ECFB 	  BL	NUMBQ
 2718 11c4 FEF7FEFF 		BL	QBRAN
 2719 11c8 D0110018 		.word	INTE2+MAPOFFSET
 2720 11cc 52F804FB 		_UNNEST
 2721              	INTE2:
 2722 11d0 FFF7B2BF 	  B.W	ABORT	// error
 2723              	
 2724              	//    [	   ( -- )
 2725              	// 	Start the text interpreter.
 2726              		_HEADER LBRAC,IMEDD+1,"["
 2727 11d4 42F804ED 		_NEST
 2728 11d8 FEF7D7FF 		_DOLIT	INTER+MAPOFFSET
 2728      80110018 
 2729 11e0 FFF778F9 		BL	TEVAL
 2730 11e4 FFF702F8 		BL	STORE
 2731 11e8 52F804FB 		_UNNEST
 2732              	
 2733              	//    .OK	 ( -- )
 2734              	// 	Display "ok" only while interpreting.
 2735              		_HEADER DOTOK,3,".OK"
ARM GAS  stm32eforth.s 			page 54


 2736 11ec 42F804ED 		_NEST
 2737 11f0 FEF7CBFF 		_DOLIT	INTER+MAPOFFSET
 2737      80110018 
 2738 11f8 FFF76CF9 		BL	TEVAL
 2739 11fc FEF7FCFF 		BL	AT
 2740 1200 FFF7D6F8 		BL	EQUAL
 2741 1204 FEF7DEFF 		BL	QBRAN
 2742 1208 14120018 		.word	DOTO1+MAPOFFSET
 2743 120c FFF7CEFC 		BL	DOTQP
 2744 1210 03       		.byte	3
 2745 1211 206F6B   		.ascii " ok"
 2746              	DOTO1:
 2747 1214 FFF792FC 		BL	CR
 2748 1218 52F804FB 		_UNNEST
 2749              	
 2750              	//    ?STACK	( -- )
 2751              	// 	Abort if the data stack underflows.
 2752              		_HEADER QSTAC,6,"?STACK"
 2753 121c 42F804ED 		_NEST
 2754 1220 FFF750FA 		BL	DEPTH
 2755 1224 FFF716F8 		BL	ZLESS	// check only for underflow
 2756 1228 FFF79AFF 		BL	ABORQ
 2757 122c 0A       		.byte	10
 2758 122d 20756E64 		.ascii " underflow"
 2758      6572666C 
 2758      6F77
 2759 1237 00       		.p2align 2 	
 2760 1238 52F804FB 		_UNNEST
 2761              	
 2762              	//    EVAL	( -- )
 2763              	// 	Interpret the input stream.
 2764              		_HEADER EVAL,4,"EVAL"
 2765 123c 42F804ED 		_NEST
 2766              	EVAL1:
 2767 1240 FFF716FE 	    BL	TOKEN
 2768 1244 FEF7FAFF 		BL	DUPP
 2769 1248 FEF7DEFF 		BL	CAT	// ?input stream empty
 2770 124c FEF7BAFF 		BL	QBRAN
 2771 1250 64120018 		.word	EVAL2+MAPOFFSET
 2772 1254 FFF73EF9 		BL	TEVAL
 2773 1258 FFF762FA 		BL	ATEXE
 2774 125c FFF7DEFF 		BL	QSTAC	// evaluate input, check stack
 2775 1260 FFF7EEBF 		B.W	EVAL1
 2776              	EVAL2:
 2777 1264 FEF7E6FF 		BL	DROP
 2778 1268 FFF7C0FF 		BL	DOTOK
 2779 126c 52F804FB 		_UNNEST	// prompt
 2780              	
 2781              	//    PRESET	( -- )
 2782              	// 	Reset data stack pointer and the terminal input buffer.
 2783              		_HEADER PRESE,6,"PRESET"
 2784 1270 42F804ED 		_NEST
 2785 1274 4FF47F41 		_MOV32 R1,SPP // init SP 
 2785      C2F20101 
 2786 127c 85EA0505 		EOR	R5,R5,R5//  init TOS=0
 2787 1280 52F804FB 		_UNNEST 
 2788              	
ARM GAS  stm32eforth.s 			page 55


 2789              	//    QUIT	( -- )
 2790              	// 	Reset return stack pointer and start text interpreter.
 2791              		_HEADER QUIT,4,"QUIT"
 2792 1284 42F804ED 		_NEST
 2793 1288 4FF68072 		_MOV32 R2,RPP
 2793      C2F20102 
 2794              	QUIT1:
 2795 1290 FFF7A0FF 		BL	LBRAC			// start interpretation
 2796              	QUIT2:
 2797 1294 FFF736FF 		BL	QUERY			// get input
 2798 1298 FFF7D0FF 		BL	EVAL
 2799 129c FEF79EFF 		BL	BRAN
 2800 12a0 94120018 		.word	QUIT2+MAPOFFSET	// continue till error
 2801              	
 2802              	/***************************
 2803              	//  Flash memory interface
 2804              	***************************/
 2805              	// UNLOCK ( T|F -- )
 2806              	// lock or unlock FLASH write 
 2807              		_HEADER UNLOCK,6,"UNLOCK"
 2808 12a4 42F804ED 		_NEST 
 2809 12a8 FEF78CFF 		BL QBRAN
 2810 12ac CC120018 		.word LOCK+MAPOFFSET
 2811 12b0 D448     		ldr	r0, flash_regs 
 2812 12b2 4FF03404 		mov r4,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 2813 12b6 C460     		str r4,[r0,#FLASH_SR]
 2814 12b8 0469     		ldr r4,[r0,#FLASH_CR]
 2815 12ba 14F0800F 		tst r4,#(1<<7)
 2816 12be 03D0     		beq 1f 
 2817 12c0 D14C     		ldr	r4, flash_regs+4 // key1
 2818 12c2 4460     		str	r4, [r0, #FLASH_KEYR]
 2819 12c4 D14C     		ldr	r4, flash_regs+8 // key2 
 2820 12c6 4460     		str	r4, [r0, #FLASH_KEYR]
 2821              		/* unlock option registers */
 2822              	/*
 2823              		ldr	r4, flash_regs+4 
 2824              		str	r4, [r0, #FLASH_OPTKEYR]
 2825              		ldr	r4, flash_regs+8
 2826              		str	r4, [r0, #FLASH_OPTKEYR]
 2827              	*/ 
 2828              	1:
 2829 12c8 52F804FB 		_UNNEST
 2830              	 // lock flash memory
 2831              	LOCK: 
 2832 12cc CD48     		ldr r0,flash_regs  
 2833              	//	ldr r4,[r0,#FLASH_CR]
 2834 12ce 4FF08004 		mov r4,#(1<<7)
 2835 12d2 0461     		str r4,[r0,#FLASH_CR]
 2836 12d4 52F804FB 		_UNNEST  
 2837              	
 2838              	WAIT_BSY:
 2839 12d8 CA48     		ldr	r0,flash_regs
 2840              	WAIT1:
 2841 12da C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 2842 12dc 14F00104 		ands	r4, #0x1	//  BSY
 2843 12e0 FBD1     		bne	WAIT1
 2844 12e2 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 56


 2845              	
 2846              	//    ERASE_PAGE	   ( adr -- )
 2847              	// 	  Erase one page of flash memory.
 2848              	//    stm32f103 page size is 1024 bytes 
 2849              	//    adr is any address inside page to erase 
 2850              		_HEADER EPAGE,10,"ERASE_PAGE"
 2851 12e4 42F804ED 		_NEST
 2852 12e8 FFF7F6FF 		bl	WAIT_BSY
 2853 12ec FEF74DFF 		_DOLIT 1 
 2853      01000000 
 2854 12f4 FFF7D6FF 		bl  UNLOCK 
 2855 12f8 C248     		ldr r0,flash_regs 	 
 2856 12fa 4FF00204 		mov r4,#2 // set PER bit 
 2857 12fe 0461     		str r4,[r0,#FLASH_CR]
 2858              	//	str r5,[r0,#FLASH_AR] // page to erase address 
 2859 1300 0469     		ldr	r4,[r0, #FLASH_CR]	
 2860 1302 44F04004 		orr	R4,#0x40	//  set STRT bit   
 2861 1306 0461     		str	r4,[r0, #FLASH_CR]	//  start erasing
 2862 1308 FFF7E6FF 	 	bl	WAIT_BSY // wait until done
 2863 130c FEF73DFF 		_DOLIT 0 
 2863      00000000 
 2864 1314 FFF7C6FF 		bl	UNLOCK  // lock flash write 
 2865 1318 C568     		ldr r5,[r0,#FLASH_SR] // check for errors 
 2866 131a 05F01405 		and r5,r5,#(5<<2)
 2867 131e FFF71FFF 		bl ABORQ 
 2868 1322 0D       		.byte 13
 2869 1323 20657261 		.ascii " erase error!"
 2869      73652065 
 2869      72726F72 
 2869      21
 2870              		.p2align 2
 2871 1330 52F804FB 		_UNNEST
 2872              	
 2873              	// store 16 bit word
 2874              	// expect flash unlocked  
 2875              	HWORD_WRITE: // ( hword address -- )
 2876 1334 42F804ED 		_NEST
 2877 1338 0469     		ldr	r4, [r0, #FLASH_CR]	//  FLASH_CR
 2878              	//	bic r4,#(1<<9)|(1<<5)|(1<<4)|(1<<2)|(1<<1) //  clear OPTWRE|OPTER|OPTPG|MER|PER
 2879 133a 4FF00104 		mov r4,#1 // set PG 
 2880 133e 0461     		str r4,[r0,#FLASH_CR]
 2881 1340 2E46     		mov r6,r5 
 2882 1342 51F8045B 		_POP 
 2883 1346 3580     		strh r5,[r6] 
 2884 1348 FFF7C6FF 		bl WAIT_BSY 
 2885 134c C568     		ldr r5,[r0,#FLASH_SR]
 2886 134e 05F01405 		and r5,r5,#(5<<2) 
 2887 1352 FEF737FF 		bl QBRAN
 2888 1356 6C130018 		.word 1f+MAPOFFSET 
 2889 135a FFF701FF 		bl ABORQ
 2890 135e 0D       		.byte 13
 2891 135f 20777269 		.ascii " write error!"
 2891      74652065 
 2891      72726F72 
 2891      21
 2892              		.p2align 2
 2893              	1:	 
ARM GAS  stm32eforth.s 			page 57


 2894 136c 52F804FB 		_UNNEST 
 2895              	
 2896              	
 2897              	//    I!	   ( data address -- )
 2898              	// 	   Write one word into flash memory
 2899              	//	   address must even 
 2900              		_HEADER ISTOR,2,"I!"
 2901 1370 42F804ED 		_NEST
 2902 1374 FFF7B0FF 		bl	WAIT_BSY
 2903 1378 FEF707FF 		_DOLIT 1 
 2903      01000000 
 2904 1380 FFF790FF 		bl  UNLOCK 
 2905 1384 FEF7EEFF 		BL DDUP 
 2906 1388 FEF74AFF 		BL TOR 
 2907 138c FEF748FF 		BL TOR 
 2908 1390 FFF7D0FF 		BL HWORD_WRITE
 2909 1394 FEF73AFF 		BL RFROM 
 2910 1398 4FEA3545 		ror r5,r5,#16
 2911 139c FEF736FF 		BL RFROM 
 2912 13a0 05F10205 		add r5,r5,#2 
 2913 13a4 FFF7C6FF 		BL HWORD_WRITE 
 2914 13a8 FEF7EFFE 		_DOLIT 0
 2914      00000000 
 2915 13b0 FFF778FF 		bl UNLOCK 
 2916 13b4 52F804FB 		_UNNEST
 2917              	
 2918              	// IMG_SIZE ( -- u )
 2919              	// return flash pages required to save 
 2920              	// user ram  
 2921              		_HEADER IMG_SIZE,8,"IMG_SIZE"
 2922 13b8 42F804ED 		_NEST
 2923 13bc FEF7E5FE 		_DOLIT VARS_END_OFS-IMG_SIGN_OFS 
 2923      38000000 
 2924 13c4 FFF7B0F8 		BL USER_END 
 2925 13c8 FFF7A8F8 		BL USER_BEGIN 
 2926 13cc FEF772FF 		BL SUBB 
 2927 13d0 FEF76CFF 		BL PLUS 
 2928 13d4 FEF7D9FE 		_DOLIT 1024 
 2928      00040000 
 2929 13dc FFF716F9 		BL SLMOD 
 2930 13e0 FEF730FF 		BL SWAP 
 2931 13e4 FEF7EEFE 		BL QBRAN 
 2932 13e8 F0130018 		.word 1f+MAPOFFSET 
 2933 13ec FEF77AFF 		BL ONEP
 2934              	1:
 2935 13f0 52F804FB 		_UNNEST  
 2936              	
 2937              	// IMG? (  -- T|F )
 2938              	// check if an image has been saved in FLASH 
 2939              		_HEADER IMGQ,4,"IMG?"
 2940 13f4 42F804ED 		_NEST 
 2941 13f8 FFF79EF8 		BL IMG_ADR 
 2942 13fc FEF7FCFE 		BL AT 
 2943 1400 FFF7A0F8 		BL IMG_SIGN  
 2944 1404 FEF7F8FE 		BL AT 
 2945 1408 FEF736FF 		BL XORR  
 2946 140c FEF7C8FF 		BL ZEQUAL
ARM GAS  stm32eforth.s 			page 58


 2947 1410 52F804FB 		_UNNEST
 2948              	
 2949              	// LOAD_IMG (  -- )
 2950              	// Load image from FLASH to RAM. 
 2951              		_HEADER LOAD_IMG,8,"LOAD_IMG"
 2952 1414 42F804ED 		_NEST 
 2953 1418 FFF7ECFF 		BL IMGQ 
 2954 141c FEF7D2FE 		BL QBRAN 
 2955 1420 68140018 		.word 1f+MAPOFFSET
 2956              	/* copy system variables to RAM */
 2957 1424 FFF788F8 		BL IMG_ADR 
 2958 1428 FEF708FF 		BL DUPP 
 2959 142c FEF7F8FE 		BL TOR   // save source address 
 2960 1430 FFF788F8 		BL IMG_SIGN 
 2961 1434 41F8045D 		_PUSH 
 2962 1438 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 2963 143c FEF7FEFE 		BL DUPP 
 2964 1440 FEF7EEFE 		BL TOR 
 2965 1444 FFF788F9 		BL MOVE // ( src dest count -- ) R: src count 
 2966              	/* copy user definitions */
 2967 1448 FEF7E0FE 		BL RFROM 
 2968 144c FEF7DEFE 		BL RFROM  
 2969 1450 FEF72CFF 		BL PLUS // source address  
 2970 1454 FFF762F8 		BL USER_BEGIN // destination address
 2971 1458 FFF74EF9 		BL HERE  
 2972 145c FEF7F6FE 		BL OVER 
 2973 1460 FEF728FF 		BL SUBB  // byte count 
 2974 1464 FFF778F9 		BL MOVE
 2975 1468 52F804FB 	1:	_UNNEST  
 2976              	
 2977              	// ERASE_MPG ( u1 u2 -- )
 2978              	// erase many pages 
 2979              	// u1 first page number 
 2980              	// u2 how many pages  
 2981              		_HEADER ERASE_MPG,9,"ERASE_MPG"
 2982 146c 42F804ED 		_NEST 
 2983 1470 FEF7D6FE 		BL TOR 
 2984 1474 00F040F8 		BL PG_TO_ADR 
 2985 1478 FEF7B0FE 		BL BRAN 
 2986 147c 94140018 		.word 2f+MAPOFFSET 
 2987              	1:
 2988 1480 FEF7DCFE 		BL DUPP 
 2989 1484 FEF7CCFE 		BL TOR 
 2990 1488 FFF72CFF 		BL EPAGE 
 2991 148c FEF7BEFE 		BL RFROM
 2992 1490 05F58045 		add r5,#SECTOR0_SIZE 
 2993              	2:
 2994 1494 FEF787FE 		BL DONXT
 2995 1498 80140018 		.word 1b+MAPOFFSET 
 2996 149c 51F8045B 		_POP 
 2997 14a0 52F804FB 		_UNNEST 
 2998              	
 2999              	// FLSH_WR ( src dest u -- dest+u )
 3000              	// write u words to flash memory 
 3001              		_HEADER FLSH_WR,7,"FLSH_WR"
 3002 14a4 42F804ED 		_NEST 
 3003 14a8 FEF7BAFE 		BL TOR
ARM GAS  stm32eforth.s 			page 59


 3004 14ac FEF796FE 		BL BRAN 
 3005 14b0 D4140018 		.word 3f+MAPOFFSET  
 3006              	/* write system variables to FLASH */
 3007 14b4 FEF7B4FE 	2:  BL TOR  // destination address 
 3008 14b8 FEF7C0FE 		BL DUPP 
 3009 14bc FEF79CFE 		BL AT   // get data 
 3010 14c0 FEF7AAFE 		BL RAT  // get destination address 
 3011 14c4 FFF754FF 		BL ISTOR
 3012 14c8 FEF71CFF 		BL CELLP  // increment source address 
 3013 14cc FEF79EFE 		BL RFROM 
 3014 14d0 FEF718FF 		BL CELLP  // increment dest address 
 3015 14d4 FEF767FE 	3:	BL DONXT 
 3016 14d8 B4140018 		.word 2b+MAPOFFSET
 3017 14dc FEF7A0FE 		BL TOR 
 3018 14e0 FEF7A8FE 		BL DROP 
 3019 14e4 FEF792FE 		BL RFROM 
 3020 14e8 52F804FB 		_UNNEST 
 3021              	
 3022              	// ADR>PG ( a -- n )
 3023              	// convert address to page number, {0..127} 
 3024              		_HEADER ADR_TO_PG,6,"ADR>PG"
 3025 14ec 4FEA9525 		lsr r5,#10 
 3026 14f0 05F07F05 		and r5,#127 
 3027 14f4 7047     		_NEXT  
 3028              	
 3029              	// PG>ADR ( n -- a )
 3030              	// convert page# to address 
 3031 14f6 00BF     		_HEADER PG_TO_ADR,6,"PG>ADR"
 3032 14f8 C0F20205 		movt r5,#2
 3033 14fc 4FEA8525 		lsl r5,#10 
 3034 1500 7047     		_NEXT 
 3035              	
 3036              	// ERASE_IMG (  -- )
 3037              	// erase image in from FLASH  
 3038 1502 00BF     		_HEADER ERASE_IMG,9,"ERASE_IMG"
 3039 1504 42F804ED 		_NEST
 3040 1508 FFF716F8 		BL IMG_ADR 
 3041 150c FFF754FF 		BL IMG_SIZE 
 3042 1510 FEF786FE 		BL TOR 
 3043 1514 FEF762FE 		BL BRAN 
 3044 1518 28150018 		.word  2f+MAPOFFSET 
 3045 151c FEF78EFE 	1:	BL DUPP 
 3046 1520 FFF7E0FE 		BL EPAGE
 3047 1524 05F58045 		ADD R5,#SECTOR0_SIZE 
 3048 1528 FEF73DFE 	2:	BL DONXT 
 3049 152c 1C150018 		.word 1b+MAPOFFSET 
 3050 1530 FEF780FE 		BL DROP 
 3051 1534 52F804FB 		_UNNEST 
 3052              	
 3053              	// SAVE_IMG ( -- )
 3054              	// save in FLASH memory system variables and user defintitions.
 3055              		_HEADER SAVE_IMG,8,"SAVE_IMG"
 3056 1538 42F804ED 		_NEST 
 3057 153c FFF7DCF8 		BL HERE 
 3058 1540 FEF7ECFF 		BL USER_BEGIN
 3059 1544 FEF734FF 		BL EQUAL 
 3060 1548 FEF73CFE 		BL QBRAN
ARM GAS  stm32eforth.s 			page 60


 3061 154c 54150018 		.word 1f+MAPOFFSET 
 3062 1550 52F804FB 		_UNNEST  // nothing to save 
 3063 1554 FFF74EFF 	1:	BL IMGQ 
 3064 1558 FEF734FE 		BL QBRAN 
 3065 155c 64150018 		.word 2f+MAPOFFSET
 3066              	/* delete saved image */
 3067 1560 FFF7D0FF 		BL ERASE_IMG 
 3068              	/* save system variables */
 3069              	2:	
 3070 1564 FEF7EEFF 		BL IMG_SIGN // src address 
 3071 1568 FEF7E6FF 		BL IMG_ADR  //  ( src dest --  
 3072 156c 41F8045D 		_PUSH 
 3073 1570 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 3074 1574 FEF7D8FE 		BL CELLSL  // word count 
 3075 1578 FFF794FF 		BL FLSH_WR  // ( src dest count -- dest+u )
 3076              	/* write user definitions */
 3077 157c FEF7CEFF 		BL USER_BEGIN
 3078 1580 FEF760FE 		BL SWAP  // ( src dest+ -- )
 3079 1584 FFF7B8F8 		BL HERE   
 3080 1588 FEF7C8FF 		BL USER_BEGIN 
 3081 158c FEF792FE 		BL SUBB 
 3082 1590 FEF7CAFE 		BL CELLSL  // src dest+ count -- 
 3083 1594 FFF786FF 		BL FLSH_WR  
 3084 1598 52F804FB 		_UNNEST 
 3085              	
 3086              	// TURNKEY ( -- "WORD") 
 3087              	// set autorun program in 'BOOT variable 
 3088              	// and save image in slot 0.
 3089              		_HEADER TURNKEY,7,"TURNKEY"
 3090 159c 42F804ED 		_NEST 
 3091 15a0 00F036F8 		BL TICK 
 3092 15a4 FEF774FF 		BL TBOOT 
 3093 15a8 FEF720FE 		BL STORE 
 3094 15ac FFF7C4FF 		BL SAVE_IMG 
 3095 15b0 52F804FB 		_UNNEST
 3096              	
 3097              	// FORGET ( -- ) "word"
 3098              	// forget all words defined from "word"	
 3099              		_HEADER FORGET,6,"FORGET"
 3100 15b4 42F804ED 		_NEST 
 3101 15b8 FFF75AFC 		BL TOKEN 
 3102 15bc FEF73EFE 		BL DUPP 
 3103 15c0 FEF700FE 		BL QBRAN 
 3104 15c4 FEF7E1FD 		_DOLIT 9f+MAPOFFSET 
 3104      00160018 
 3105 15cc FFF700FD 		BL NAMEQ // ( a -- ca na | a 0 )
 3106 15d0 FEF7B6FE 		BL QDUP 
 3107 15d4 FEF7F6FD 		BL QBRAN 
 3108 15d8 FC150018 		.word 8f+MAPOFFSET
 3109 15dc FEF796FE 		BL CELLM // ( ca la )
 3110 15e0 FEF72CFE 		BL DUPP 
 3111 15e4 FEF788FF 		BL CPP   
 3112 15e8 FEF700FE 		BL STORE
 3113 15ec FEF704FE 		BL AT 
 3114 15f0 FEF78EFF 		BL LAST 
 3115 15f4 FEF7FAFD 		BL STORE
 3116 15f8 00F0A0F9 		BL OVERT 
ARM GAS  stm32eforth.s 			page 61


 3117 15fc FEF71AFE 	8:  BL DROP 
 3118 1600 52F804FB 	9:	_UNNEST 
 3119              	
 3120              	flash_regs:
 3121 1604 003C0240 		.word FLASH_BASE_ADR // 0 
 3122 1608 23016745 		.word FLASH_KEY1   // 4 
 3123 160c AB89EFCD 		.word FLASH_KEY2   // 8
 3124              	
 3125              	// **************************************************************************
 3126              	//  The compiler
 3127              	
 3128              	//    '	   ( -- ca )
 3129              	// 	Search context vocabularies for the next word in input stream.
 3130              		_HEADER TICK,1,"'"
 3131 1610 42F804ED 		_NEST
 3132 1614 FFF72CFC 		BL	TOKEN
 3133 1618 FFF7DAFC 		BL	NAMEQ	// ?defined
 3134 161c FEF7D2FD 		BL	QBRAN
 3135 1620 28160018 		.word	TICK1+MAPOFFSET
 3136 1624 52F804FB 		_UNNEST	// yes, push code address
 3137 1628 FFF786BD 	TICK1:	B.W	ABORT	// no, error
 3138              	
 3139              	//    ALLOT	( n -- )
 3140              	// 	Allocate n bytes to the ram area.
 3141              		_HEADER ALLOT,5,"ALLOT"
 3142 162c 42F804ED 		_NEST
 3143 1630 FEF762FF 		BL	CPP
 3144 1634 FEF7E8FE 		BL	PSTOR
 3145 1638 52F804FB 		_UNNEST			// adjust code pointer
 3146              	
 3147              	//    ,	   ( w -- )
 3148              	// 	Compile an integer into the code dictionary.
 3149              		_HEADER COMMA,1,","
 3150 163c 42F804ED 		_NEST
 3151 1640 FFF75AF8 		BL	HERE
 3152 1644 FEF7FAFD 		BL	DUPP
 3153 1648 FEF75CFE 		BL	CELLP	// cell boundary
 3154 164c FEF754FF 		BL	CPP
 3155 1650 FEF7CCFD 		BL	STORE
 3156 1654 FEF7CAFD 		BL	STORE
 3157 1658 52F804FB 		_UNNEST	// adjust code pointer, compile
 3158              		.p2align 2 
 3159              	//    [COMPILE]   ( -- //  string> )
 3160              	// 	Compile the next immediate word into code dictionary.
 3161              		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3162 165c 42F804ED 		_NEST
 3163 1660 FFF7D6FF 		BL	TICK
 3164 1664 FFF7EAFF 		BL	COMMA
 3165 1668 52F804FB 		_UNNEST
 3166              	
 3167              	//    COMPILE	( -- )
 3168              	// 	Compile the next address in colon list to code dictionary.
 3169              		_HEADER COMPI,COMPO+7,"COMPILE"
 3170 166c 42F804ED 		_NEST
 3171 1670 FEF7CCFD 		BL	RFROM
 3172 1674 25F00105 		BIC	R5,R5,#1
 3173 1678 FEF7E0FD 		BL	DUPP
ARM GAS  stm32eforth.s 			page 62


 3174 167c FEF7BCFD 		BL	AT
 3175 1680 00F0A3F9 		BL	CALLC			// compile BL instruction
 3176 1684 FEF73EFE 		BL	CELLP
 3177 1688 45F00105 		ORR	R5,R5,#1
 3178 168c FEF7C8FD 		BL	TOR
 3179 1690 52F804FB 		_UNNEST			// adjust return address
 3180              	
 3181              	//    LITERAL	( w -- )
 3182              	// 	Compile tos to code dictionary as an integer literal.
 3183              		_HEADER LITER,IMEDD+7,"LITERAL"
 3184 1694 74090018 		.word	_COMPI+MAPOFFSET
 3185 1698 42F804ED 		_NEST
 3186 169c FFF7E6FF 		BL	COMPI
 3187 16a0 8A010018 		.word	DOLIT+MAPOFFSET
 3188 16a4 FFF7CAFF 		BL	COMMA
 3189 16a8 52F804FB 		_UNNEST
 3190              	
 3191              	//    $,"	( -- )
 3192              	// 	Compile a literal string up to next " .
 3193              	
 3194              	// 	.word	_LITER+MAPOFFSET
 3195              	// _STRCQ	.byte  3
 3196              	// 	.ascii "$$,"""
 3197              	// 	.p2align 2 	
 3198              	STRCQ:
 3199 16ac 42F804ED 		_NEST
 3200 16b0 FEF76BFD 		_DOLIT	-4
 3200      FCFFFFFF 
 3201 16b8 FEF71EFF 		BL	CPP
 3202 16bc FEF7A4FE 		BL	PSTOR
 3203 16c0 FEF763FD 		_DOLIT	'\"'
 3203      22000000 
 3204 16c8 FFF7C6FB 		BL	WORDD			// move word to code dictionary
 3205 16cc FEF7B4FE 		BL	COUNT
 3206 16d0 FEF7ECFD 		BL	PLUS
 3207 16d4 FEF7CEFF 		BL	ALGND			// calculate aligned end of string
 3208 16d8 FEF70EFF 		BL	CPP
 3209 16dc FEF786FD 		BL	STORE
 3210 16e0 52F804FB 		_UNNEST 			// adjust the code pointer
 3211              	
 3212              	// **************************************************************************
 3213              	//  Structures
 3214              	
 3215              	//    FOR	 ( -- a )
 3216              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3217              		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3218 16e4 42F804ED 		_NEST
 3219 16e8 FFF7C0FF 		BL	COMPI
 3220 16ec 20020018 		.word	TOR+MAPOFFSET
 3221 16f0 FFF702F8 		BL	HERE
 3222 16f4 52F804FB 		_UNNEST
 3223              	
 3224              	//    BEGIN	( -- a )
 3225              	// 	Start an infinite or indefinite loop structure.
 3226              		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3227 16f8 42F804ED 		_NEST
 3228 16fc FEF7FCFF 		BL	HERE
ARM GAS  stm32eforth.s 			page 63


 3229 1700 52F804FB 		_UNNEST
 3230              		.p2align 2 
 3231              	//    NEXT	( a -- )
 3232              	// 	Terminate a FOR-NEXT loop structure.
 3233              		_HEADER NEXT,COMPO+IMEDD+4,"NEXT"
 3234 1704 42F804ED 		_NEST
 3235 1708 FFF7B0FF 		BL	COMPI
 3236 170c A6010018 		.word	DONXT+MAPOFFSET
 3237 1710 FFF794FF 		BL	COMMA
 3238 1714 52F804FB 		_UNNEST
 3239              	
 3240              	//    UNTIL	( a -- )
 3241              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3242              		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3243 1718 42F804ED 		_NEST
 3244 171c FFF7A6FF 		BL	COMPI
 3245 1720 C4010018 		.word	QBRAN+MAPOFFSET
 3246 1724 FFF78AFF 		BL	COMMA
 3247 1728 52F804FB 		_UNNEST
 3248              	
 3249              	//    AGAIN	( a -- )
 3250              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3251              		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3252 172c 42F804ED 		_NEST
 3253 1730 FFF79CFF 		BL	COMPI
 3254 1734 DC010018 		.word	BRAN+MAPOFFSET
 3255 1738 FFF780FF 		BL	COMMA
 3256 173c 52F804FB 		_UNNEST
 3257              	
 3258              	//    IF	  ( -- A )
 3259              	// 	Begin a conditional branch structure.
 3260              		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3261 1740 42F804ED 		_NEST
 3262 1744 FFF792FF 		BL	COMPI
 3263 1748 C4010018 		.word	QBRAN+MAPOFFSET
 3264 174c FEF7D4FF 		BL	HERE
 3265 1750 FEF71BFD 		_DOLIT	4
 3265      04000000 
 3266 1758 FEF7CEFE 		BL	CPP
 3267 175c FEF754FE 		BL	PSTOR
 3268 1760 52F804FB 		_UNNEST
 3269              	
 3270              	//    AHEAD	( -- A )
 3271              	// 	Compile a forward branch instruction.
 3272              		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3273 1764 42F804ED 		_NEST
 3274 1768 FFF780FF 		BL	COMPI
 3275 176c DC010018 		.word	BRAN+MAPOFFSET
 3276 1770 FEF7C2FF 		BL	HERE
 3277 1774 FEF709FD 		_DOLIT	4
 3277      04000000 
 3278 177c FEF7BCFE 		BL	CPP
 3279 1780 FEF742FE 		BL	PSTOR
 3280 1784 52F804FB 		_UNNEST
 3281              	
 3282              	//    REPEAT	( A a -- )
 3283              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
ARM GAS  stm32eforth.s 			page 64


 3284              		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3285 1788 42F804ED 		_NEST
 3286 178c FFF7CEFF 		BL	AGAIN
 3287 1790 FEF7B2FF 		BL	HERE
 3288 1794 FEF756FD 		BL	SWAP
 3289 1798 FEF728FD 		BL	STORE
 3290 179c 52F804FB 		_UNNEST
 3291              	
 3292              	//    THEN	( A -- )
 3293              	// 	Terminate a conditional branch structure.
 3294              		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3295 17a0 42F804ED 		_NEST
 3296 17a4 FEF7A8FF 		BL	HERE
 3297 17a8 FEF74CFD 		BL	SWAP
 3298 17ac FEF71EFD 		BL	STORE
 3299 17b0 52F804FB 		_UNNEST
 3300              	
 3301              	//    AFT	 ( a -- a A )
 3302              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3303              		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3304 17b4 42F804ED 		_NEST
 3305 17b8 FEF73CFD 		BL	DROP
 3306 17bc FFF7D2FF 		BL	AHEAD
 3307 17c0 FFF79AFF 		BL	BEGIN
 3308 17c4 FEF73EFD 		BL	SWAP
 3309 17c8 52F804FB 		_UNNEST
 3310              	
 3311              	//    ELSE	( A -- A )
 3312              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3313              		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3314 17cc 42F804ED 		_NEST
 3315 17d0 FFF7C8FF 		BL	AHEAD
 3316 17d4 FEF736FD 		BL	SWAP
 3317 17d8 FFF7E2FF 		BL	THENN
 3318 17dc 52F804FB 		_UNNEST
 3319              	
 3320              	//    WHILE	( a -- A a )
 3321              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3322              		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3323 17e0 42F804ED 		_NEST
 3324 17e4 FFF7ACFF 		BL	IFF
 3325 17e8 FEF72CFD 		BL	SWAP
 3326 17ec 52F804FB 		_UNNEST
 3327              	
 3328              	//    ABORT"	( -- //  string> )
 3329              	// 	Conditional abort with an error message.
 3330              		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3331 17f0 42F804ED 		_NEST
 3332 17f4 FFF73AFF 		BL	COMPI
 3333 17f8 60110018 		.word	ABORQ+MAPOFFSET
 3334 17fc FFF756FF 		BL	STRCQ
 3335 1800 52F804FB 		_UNNEST
 3336              	
 3337              	//    $"	( -- //  string> )
 3338              	// 	Compile an inline string literal.
 3339              		_HEADER STRQ,IMEDD+2,"$\""
 3340 1804 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 65


 3341 1808 FFF730FF 		BL	COMPI
 3342 180c 900B0018 		.word	STRQP+MAPOFFSET
 3343 1810 FFF74CFF 		BL	STRCQ
 3344 1814 52F804FB 		_UNNEST
 3345              	
 3346              	//    ."	( -- //  string> )
 3347              	// 	Compile an inline word  literal to be typed out at run time.
 3348              		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3349 1818 42F804ED 		_NEST
 3350 181c FFF726FF 		BL	COMPI
 3351 1820 AC0B0018 		.word	DOTQP+MAPOFFSET
 3352 1824 FFF742FF 		BL	STRCQ
 3353 1828 52F804FB 		_UNNEST
 3354              	
 3355              	/*******************
 3356              	  Name compiler
 3357              	*******************/
 3358              	
 3359              	//    ?UNIQUE	( a -- a )
 3360              	// 	Display a warning message if the word already exists.
 3361              		_HEADER UNIQU,7,"?UNIQUE"
 3362 182c 42F804ED 		_NEST
 3363 1830 FEF704FD 		BL	DUPP
 3364 1834 FFF7CCFB 		BL	NAMEQ			// ?name exists
 3365 1838 FEF7C4FC 		BL	QBRAN
 3366 183c 58180018 		.word	UNIQ1+MAPOFFSET	// redefinitions are OK
 3367 1840 FFF7B4F9 		BL	DOTQP
 3368 1844 07       		.byte	7
 3369 1845 20726544 		.ascii " reDef "		// but warn the user
 3369      656620
 3370              		.p2align 2 	
 3371 184c FEF7FEFC 		BL	OVER
 3372 1850 FEF7F2FD 		BL	COUNT
 3373 1854 FFF75EF9 		BL	TYPEE			// just in case its not planned
 3374              	UNIQ1:
 3375 1858 FEF7ECFC 		BL	DROP
 3376 185c 52F804FB 		_UNNEST
 3377              	
 3378              	//    $,n	 ( na -- )
 3379              	// 	Build a new dictionary name using the data at na.
 3380              	
 3381              	// 	.word	_UNIQU+MAPOFFSET
 3382              	// _SNAME	.byte  3
 3383              	// 	.ascii "$,n"
 3384              	// 	.p2align 2 	
 3385              	SNAME:
 3386 1860 42F804ED 		_NEST
 3387 1864 FEF7EAFC 		BL	DUPP			//  na na
 3388 1868 FEF7CEFC 		BL	CAT			//  ?null input
 3389 186c FEF7AAFC 		BL	QBRAN
 3390 1870 A8180018 		.word	SNAM1+MAPOFFSET
 3391 1874 FFF7DAFF 		BL	UNIQU			//  na
 3392 1878 FEF74AFE 		BL	LAST			//  na last
 3393 187c FEF7BCFC 		BL	AT			//  na la
 3394 1880 FFF7DCFE 		BL	COMMA			//  na
 3395 1884 FEF7DAFC 		BL	DUPP			//  na na
 3396 1888 FEF742FE 		BL	LAST			//  na na last
ARM GAS  stm32eforth.s 			page 66


 3397 188c FEF7AEFC 		BL	STORE			//  na , save na for vocabulary link
 3398 1890 FEF7D2FD 		BL	COUNT			//  na+1 count
 3399 1894 FEF70AFD 		BL	PLUS			//  na+1+count
 3400 1898 FEF7ECFE 		BL	ALGND			//  word boundary
 3401 189c FEF72CFE 		BL	CPP
 3402 18a0 FEF7A4FC 		BL	STORE			//  top of dictionary now
 3403 18a4 52F804FB 		_UNNEST
 3404              	SNAM1:
 3405 18a8 FFF772F9 		BL	STRQP
 3406 18ac 07       		.byte	7
 3407 18ad 206E616D 		.ascii " name? "
 3407      653F20
 3408 18b4 FFF740BC 		B.W	ABORT
 3409              	
 3410              	//    $COMPILE	( a -- )
 3411              	// 	Compile next word to code dictionary as a token or literal.
 3412              		_HEADER SCOMP,7,"$COMPILE"
 3413 18b8 42F804ED 		_NEST
 3414 18bc FFF788FB 		BL	NAMEQ
 3415 18c0 FEF73EFD 		BL	QDUP	// defined?
 3416 18c4 FEF77EFC 		BL	QBRAN
 3417 18c8 F4180018 		.word	SCOM2+MAPOFFSET
 3418 18cc FEF794FC 		BL	AT
 3419 18d0 FEF75BFC 		_DOLIT	IMEDD
 3419      80000000 
 3420 18d8 FEF7C2FC 		BL	ANDD	// immediate?
 3421 18dc FEF772FC 		BL	QBRAN
 3422 18e0 EC180018 		.word	SCOM1+MAPOFFSET
 3423 18e4 FEF75AFC 		BL	EXECU
 3424 18e8 52F804FB 		_UNNEST			// it's immediate, execute
 3425              	SCOM1:
 3426 18ec 00F06DF8 		BL	CALLC			// it's not immediate, compile
 3427 18f0 52F804FB 		_UNNEST	
 3428              	SCOM2:
 3429 18f4 FFF752F8 		BL	NUMBQ
 3430 18f8 FEF764FC 		BL	QBRAN
 3431 18fc 08190018 		.word	SCOM3+MAPOFFSET
 3432 1900 FFF7C8FE 		BL	LITER
 3433 1904 52F804FB 		_UNNEST			// compile number as integer
 3434              	SCOM3: // compilation abort 
 3435 1908 00F002F8 		BL COLON_ABORT 
 3436 190c FFF714BC 		B.W	ABORT			// error
 3437              	
 3438              	// before aborting a compilation 
 3439              	// reset HERE and LAST
 3440              	// to previous values.  
 3441              	COLON_ABORT:
 3442 1910 42F804ED 		_NEST 
 3443 1914 FEF7FCFD 		BL LAST 
 3444 1918 FEF76EFC 		BL AT 
 3445 191c FEF7F6FC 		BL CELLM 
 3446 1920 FEF78CFC 		BL DUPP 
 3447 1924 FEF7E8FD 		BL CPP  
 3448 1928 FEF760FC 		BL STORE 
 3449 192c FEF764FC 		BL AT 
 3450 1930 FEF7EEFD 		BL LAST 
 3451 1934 FEF75AFC 		BL STORE 
ARM GAS  stm32eforth.s 			page 67


 3452 1938 52F804FB 		_UNNEST 
 3453              	
 3454              	//    OVERT	( -- )
 3455              	// 	Link a new word into the current vocabulary.
 3456              		_HEADER OVERT,5,"OVERT"
 3457 193c 42F804ED 		_NEST
 3458 1940 FEF7E6FD 		BL	LAST
 3459 1944 FEF758FC 		BL	AT
 3460 1948 FEF7D0FD 		BL	CNTXT
 3461 194c FEF74EFC 		BL	STORE
 3462 1950 52F804FB 		_UNNEST
 3463              	
 3464              	//    ; 	   ( -- )
 3465              	// 	Terminate a colon definition.
 3466              		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3467 1954 42F804ED 		_NEST
 3468 1958 FEF717FC 		BL	DOLIT 
 3469 195c 52F804FB 		_UNNEST
 3470 1960 FFF76CFE 		BL	COMMA
 3471 1964 FFF736FC 		BL	LBRAC
 3472 1968 FFF7E8FF 		BL	OVERT
 3473 196c 52F804FB 		_UNNEST
 3474              	
 3475              	//    ]	   ( -- )
 3476              	// 	Start compiling the words in the input stream.
 3477              		_HEADER RBRAC,1,"]"
 3478 1970 42F804ED 		_NEST
 3479 1974 FEF709FC 		_DOLIT SCOMP+MAPOFFSET
 3479      B8180018 
 3480 197c FEF7AAFD 		BL	TEVAL
 3481 1980 FEF734FC 		BL	STORE
 3482 1984 52F804FB 		_UNNEST
 3483              	
 3484              	
 3485              	//    COMPILE_BLW	( ca -- asm_code )
 3486              	// 	Assemble a branch-link long instruction to ca.
 3487              	// ref: ARM-v7M architecture reference, section A7.7.18 
 3488              	COMPILE_BLW:
 3489 1988 4FEA6505 		ASR R5,R5,#1 
 3490 198c 4FF45044 		_MOV32 R4,0xF000D000 
 3490      CFF20004 
 3491 1994 65F30A04 		BFI R4,R5,#0,#11
 3492 1998 4FEAD525 		LSR R5,#11
 3493 199c 65F31944 		BFI R4,R5,#16,#10
 3494 19a0 4FEAA525 		ASR R5,#10
 3495 19a4 65F3CB24 		BFI R4,R5,#11,#1
 3496 19a8 4FEA6505 		ASR R5,#1
 3497 19ac 65F34D34 		BFI R4,R5,#13,#1
 3498 19b0 4FEA6505 		ASR R5,#1
 3499 19b4 65F39A64 		BFI R4,R5,#26,#1
 3500 19b8 14F0806F 		TST R4,#(1<<26)
 3501 19bc 02D1     		BNE 1f
 3502 19be 00BF     		NOP 
 3503 19c0 84F42054 		EOR R4,R4,#(5<<11)
 3504 19c4 4FEA3445 	1:  ROR R5,R4,#16 
 3505 19c8 7047     		_NEXT 
 3506              	
ARM GAS  stm32eforth.s 			page 68


 3507              	// 	.word	_RBRAC+MAPOFFSET
 3508              	// _CALLC	.byte  5
 3509              	// 	.ascii "call,"
 3510              	// 	.p2align 2 	
 3511              	CALLC:
 3512 19ca 42F804ED 		_NEST
 3513 19ce 25F00105 		BIC R5,R5,#1 
 3514 19d2 FEF791FE 		BL HERE 
 3515 19d6 FEF76DFC 		BL SUBB 
 3516 19da A5F10405 		SUB R5,R5,#4 
 3517 19de FFF7D3FF 		BL COMPILE_BLW 
 3518 19e2 FFF72BFE 		BL	COMMA			//  assemble BL.W instruction
 3519 19e6 52F804FB 		_UNNEST
 3520              	
 3521              		.p2align 
 3522              	// 	:	( -- //  string> )
 3523              	// 	Start a new colon definition using next word as its name.
 3524 19ea 00BF     		_HEADER COLON,1,":"
 3525 19ec 42F804ED 		_NEST
 3526 19f0 00F03AF8 		BL	HEAD 
 3527 19f4 FFF7BCFF 		BL	RBRAC
 3528 19f8 52F804FB 		_UNNEST
 3529              	
 3530              	//    IMMEDIATE   ( -- )
 3531              	// 	Make the last compiled word an immediate word.
 3532              		_HEADER IMMED,9,"IMMEDIATE"
 3533 19fc 42F804ED 		_NEST
 3534 1a00 FEF7C3FB 		_DOLIT IMEDD
 3534      80000000 
 3535 1a08 FEF782FD 		BL	LAST
 3536 1a0c FEF7F4FB 		BL	AT
 3537 1a10 FEF7F2FB 		BL	AT
 3538 1a14 FEF72AFC 		BL	ORR
 3539 1a18 FEF77AFD 		BL	LAST
 3540 1a1c FEF7ECFB 		BL	AT
 3541 1a20 FEF7E4FB 		BL	STORE
 3542 1a24 52F804FB 		_UNNEST
 3543              	
 3544              	
 3545              	//  I: ( -- a )
 3546              	// debute la compilation 
 3547              	// d'une routine d'interruption. 
 3548              		_HEADER ICOLON,2,"I:"
 3549 1a28 42F804ED 		_NEST 
 3550 1a2c FEF764FE 		BL	HERE
 3551 1a30 FEF7ABFB 		BL	DOLIT 
 3552 1a34 42F804ED 		_NEST 
 3553 1a38 FFF700FE 		BL	COMMA 
 3554 1a3c FFF798FF 		BL	RBRAC 
 3555 1a40 52F804FB 		_UNNEST 
 3556              	
 3557              	// I; ( a -- a )
 3558              	// Termine la compilation 
 3559              	// d'une routine d'interruption. 
 3560              		_HEADER ISEMIS,IMEDD+COMPO+2,"I;"
 3561 1a44 42F804ED 		_NEST 
 3562 1a48 FEF79FFB 		BL	DOLIT 
ARM GAS  stm32eforth.s 			page 69


 3563 1a4c 52F804EB 		LDMFD	R2!,{LR}
 3564 1a50 FFF7F4FD 		BL	COMMA
 3565 1a54 FEF799FB 		BL	DOLIT 
 3566 1a58 7047     		BX LR 
 3567 1a5a 00BF     		NOP 
 3568 1a5c FFF7EEFD 		BL COMMA 
 3569 1a60 FFF7B8FB 		BL	LBRAC
 3570 1a64 52F804FB 		_UNNEST 
 3571              	
 3572              	
 3573              	/*********************
 3574              	   Defining words
 3575              	*********************/
 3576              	
 3577              	//  HEADER ( -- )  "string"
 3578              	// create a dictionary header in RAM
 3579              		_HEADER HEAD,6,"HEADER"
 3580 1a68 42F804ED 		_NEST 
 3581 1a6c FFF700FA 		BL	TOKEN
 3582 1a70 FFF7F6FE 		BL	SNAME
 3583 1a74 FEF740FE 		BL	HERE   
 3584 1a78 FEF744FC 		BL	CELLP
 3585 1a7c FFF7DEFD 		BL	COMMA 
 3586 1a80 FEF783FB 		BL	DOLIT 
 3587 1a84 42F804ED 		_NEST 
 3588 1a88 FFF7D8FD 		BL	COMMA 
 3589 1a8c 52F804FB 		_UNNEST 
 3590              	
 3591              	//    CONSTANT	( u -- //  string> )
 3592              	// 	Compile a new constant.
 3593              		_HEADER CONST,8,"CONSTANT" 
 3594 1a90 42F804ED 		_NEST
 3595 1a94 FFF7E8FF 		BL	HEAD 
 3596 1a98 FEF777FB 		_DOLIT DOCON+MAPOFFSET
 3596      60040018 
 3597 1aa0 FFF793FF 		BL	CALLC
 3598 1aa4 FFF7CAFD 		BL	COMMA
 3599 1aa8 FFF748FF 		BL	OVERT 
 3600 1aac 52F804FB 		_UNNEST
 3601              	
 3602              		.p2align 2 
 3603              	// doDOES> ( -- )
 3604              	// set code addresse in code field of new word 
 3605              	DODOES:
 3606 1ab0 42F804ED 		_NEST 
 3607 1ab4 FEF72CFD 		BL	LAST 
 3608 1ab8 FEF79EFB 		BL	AT 
 3609 1abc FFF7E0F9 		BL 	TOCFA
 3610 1ac0 FEF71AFE 		BL	HERE  // this is ca of new word 
 3611 1ac4 FEF7C2FB 		BL	OVER  
 3612 1ac8 FEF790FB 		BL	STORE
 3613 1acc FEF75DFB 		BL	DOLIT 
 3614 1ad0 42F804ED 		_NEST 
 3615 1ad4 FFF7B2FD 		BL COMMA  
 3616 1ad8 FEF757FB 		_DOLIT 12 
 3616      0C000000 
 3617 1ae0 FEF7E4FB 		BL	PLUS  // parameter field of new word 
ARM GAS  stm32eforth.s 			page 70


 3618 1ae4 FFF7D6FD 		BL	LITER
 3619 1ae8 FEF796FB 		BL RAT 
 3620 1aec FEF7FEFB 		BL ONEM 
 3621 1af0 FEF708FC 		BL	CELLP
 3622 1af4 FFF769FF 		BL	CALLC  
 3623 1af8 FEF747FB 		BL	DOLIT 
 3624 1afc 52F804FB 		_UNNEST 
 3625 1b00 FFF79CFD 		BL	COMMA 
 3626 1b04 FFF71AFF 		BL	OVERT 
 3627 1b08 52F804FB 		_UNNEST 
 3628              	
 3629              		
 3630              	
 3631              		.p2align 2
 3632              	//  DOES> ( -- )
 3633              	//  compile time action 
 3634              		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3635 1b0c 42F804ED 		_NEST 
 3636 1b10 FEF73BFB 		_DOLIT DODOES+MAPOFFSET
 3636      B01A0018 
 3637 1b18 FFF757FF 		BL CALLC 
 3638 1b1c FEF735FB 		BL	DOLIT	
 3639 1b20 52F804FB 		_UNNEST 
 3640 1b24 FFF78AFD 		BL	COMMA  
 3641 1b28 FEF72FFB 		BL	DOLIT 
 3642 1b2c 42F804ED 		_NEST 
 3643 1b30 FFF784FD 		BL	COMMA 
 3644 1b34 52F804FB 		_UNNEST 
 3645              	
 3646              	
 3647              	//    CREATE	( -- //  string> )
 3648              	// 	Compile a new array entry without allocating code space.
 3649              		_HEADER CREAT,6,"CREATE"
 3650 1b38 42F804ED 		_NEST
 3651 1b3c FFF794FF 		BL	HEAD 
 3652 1b40 FEF723FB 		_DOLIT DOVAR+MAPOFFSET 
 3652      54040018 
 3653 1b48 FFF73FFF 		BL	CALLC  
 3654 1b4c 52F804FB 		_UNNEST
 3655              	
 3656              	//    VARIABLE	( -- //  string> )
 3657              	// 	Compile a new variable initialized to 0.
 3658              		_HEADER VARIA,8,"VARIABLE"
 3659 1b50 42F804ED 		_NEST
 3660 1b54 FFF7F0FF 		BL	CREAT
 3661 1b58 FEF717FB 		_DOLIT 0
 3661      00000000 
 3662 1b60 FFF76CFD 		BL	COMMA
 3663 1b64 FFF7EAFE 		BL	OVERT 
 3664 1b68 52F804FB 		_UNNEST
 3665              	
 3666              	//  FCALL ( a -- )
 3667              	//  call code in FLASH memory 
 3668              	//  from RAM or opposite
 3669              		_HEADER FCALL,5,"FCALL"
 3670 1b6c 42F804ED 		_NEST 
 3671 1b70 2C46     		MOV R4,R5
ARM GAS  stm32eforth.s 			page 71


 3672 1b72 51F8045B 		_POP 
 3673 1b76 44F00104 		ORR R4,R4,#1
 3674 1b7a A047     		BLX R4 
 3675 1b7c 52F804FB 		_UNNEST 
 3676              	
 3677              	
 3678              	// DEFER ( -- ) name
 3679              	// create a differed word 
 3680              		_HEADER DEFER,5,"DEFER"
 3681 1b80 42F804ED 		_NEST 
 3682 1b84 FFF770FF 		BL	HEAD
 3683 1b88 FEF7FFFA 		_DOLIT  NOP + MAPOFFSET 
 3683      88010018 
 3684 1b90 FFF71BFF 		BL	CALLC 
 3685 1b94 FEF7F9FA 		BL	DOLIT 
 3686 1b98 52F804FB 		_UNNEST  
 3687 1b9c FFF74EFD 		BL	COMMA 
 3688 1ba0 FFF7CCFE 		BL	OVERT  
 3689 1ba4 52F804FB 		_UNNEST 
 3690              	
 3691              	// DEFER! ( a -- ) name 
 3692              	// set execution address of a defered word 
 3693              		_HEADER DEFERSTO,6,"DEFER!"
 3694 1ba8 42F804ED 		_NEST
 3695 1bac 25F00105 		BIC R5,R5,#1 
 3696 1bb0 FFF72EFD 		BL	TICK 
 3697 1bb4 FEF7A6FB 		BL	CELLP 
 3698 1bb8 FEF740FB 		BL	DUPP
 3699 1bbc FEF730FB 		BL	TOR 
 3700 1bc0 FEF778FB 		BL SUBB 
 3701 1bc4 A5F10405 		SUB R5,R5,#4 
 3702 1bc8 FFF7DEFE 		BL COMPILE_BLW 
 3703 1bcc FEF71EFB 		BL	RFROM   
 3704 1bd0 FEF70CFB 		BL	STORE 
 3705 1bd4 52F804FB 		_UNNEST 
 3706              		
 3707              	// DEFER@ ( -- a ) name
 3708              	// get execution address of word 	
 3709              		_HEADER DEFERAT,6,"DEFER@"
 3710 1bd8 42F804ED 		_NEST 
 3711 1bdc FFF718FD 		BL TICK 
 3712 1be0 FEF790FB 		BL	CELLP
 3713 1be4 FEF72AFB 		BL	DUPP
 3714 1be8 FEF71AFB 		BL	TOR  
 3715 1bec FEF704FB 		BL	AT
 3716 1bf0 FEF7CBFA 		_DOLIT BLADR 
 3716      00000000 
 3717 1bf8 FFF7B8FF 		BL	FCALL 
 3718 1bfc FEF7C5FA 		_DOLIT	4  
 3718      04000000 
 3719 1c04 FEF752FB 		BL	PLUS 
 3720 1c08 FEF700FB 		BL	RFROM
 3721 1c0c FEF74EFB 		BL	PLUS  
 3722 1c10 52F804FB 		_UNNEST
 3723              	
 3724              	/*************
 3725              	   Tools
ARM GAS  stm32eforth.s 			page 72


 3726              	*************/
 3727              	
 3728              	//    dm+	 ( a u -- a )
 3729              	// 	Dump u bytes from , leaving a+u on the stack.
 3730              	
 3731              	// 	.word	_VARIA+MAPOFFSET
 3732              	// _DMP	.byte  3
 3733              	// 	.ascii "dm+"
 3734              	 	.p2align 2 	
 3735              		.section .inflash, "ax", %progbits 
 3736              		.type DMP, %function 
 3737              	DMP:
 3738 02b4 42F804ED 		_NEST
 3739 02b8 00F024F9 		BL	OVER
 3740 02bc 00F0C3F8 		_DOLIT	4
 3740      04000000 
 3741 02c4 00F0EEFD 		BL	UDOTR			// display address
 3742 02c8 00F06CFD 		BL	SPACE
 3743 02cc 00F00EF9 		BL	TOR			// start count down loop
 3744 02d0 00F00CB8 		B.W	PDUM2			// skip first pass
 3745              	PDUM1:
 3746 02d4 00F01CF9 	  BL	DUPP
 3747 02d8 00F002F9 		BL	CAT
 3748 02dc 00F0C3F8 		_DOLIT 3
 3748      03000000 
 3749 02e4 00F0EEFD 		BL	UDOTR			// display numeric data
 3750 02e8 00F070F9 		BL	ONEP			// increment address
 3751              	PDUM2:
 3752 02ec 00F0D1F8 	  BL	DONXT
 3753 02f0 D4020000 		.word	PDUM1	// loop till done
 3754 02f4 52F804FB 		_UNNEST
 3755              		.p2align 2 
 3756              	
 3757              	//    DUMP	( a u -- )
 3758              	// 	Dump u bytes from a, in a formatted manner.
 3759              		_HEADER_FL DUMP,4,"DUMP"
 3760 02f8 42F804ED 		_NEST
 3761 02fc 00F04CFA 		BL	BASE
 3762 0300 00F0FAF8 		BL	AT
 3763 0304 00F00EF9 		BL	TOR
 3764 0308 00F086FC 		BL	HEX			// save radix,set hex
 3765 030c 00F0C3F8 		_DOLIT	16
 3765      10000000 
 3766 0314 00F018FB 		BL	SLASH			// change count to lines
 3767 0318 00F00EF9 		BL	TOR
 3768 031c 00F014B8 		B.W	DUMP4			// start count down loop
 3769              	DUMP1:
 3770 0320 00F09CFD 	    BL	CR
 3771 0324 00F0C3F8 		_DOLIT	16
 3771      10000000 
 3772 032c 00F0B0F9 		BL	DDUP
 3773 0330 FFF7C0FF 		BL	DMP			// display numeric
 3774 0334 00F0A4F9 		BL	ROT
 3775 0338 00F0A4F9 		BL	ROT
 3776 033c 00F06CFD 		BL	SPACE
 3777 0340 00F06CFD 		BL	SPACE
 3778 0344 00F088FD 		BL	TYPEE			// display printable characters
ARM GAS  stm32eforth.s 			page 73


 3779              	DUMP4:
 3780 0348 00F0D1F8 	    BL	DONXT
 3781 034c 20030000 		.word	DUMP1	// loop till done
 3782              	DUMP3:
 3783 0350 00F018F9 	    BL	DROP
 3784 0354 00F004F9 		BL	RFROM
 3785 0358 00F04CFA 		BL	BASE
 3786 035c 00F0F4F8 		BL	STORE			// restore radix
 3787 0360 52F804FB 		_UNNEST
 3788              	
 3789              	//    .S	  ( ... -- ... )
 3790              	// 	Display the contents of the data stack.
 3791              		_HEADER_FL DOTS,2,".S"
 3792 0364 42F804ED 		_NEST
 3793 0368 00F06CFD 		BL	SPACE
 3794 036c 00F060FB 		BL	DEPTH			// stack depth
 3795 0370 00F00EF9 		BL	TOR			// start count down loop
 3796 0374 00F006B8 		B.W	DOTS2			// skip first pass
 3797              	DOTS1:
 3798 0378 00F00AF9 		BL	RAT
 3799 037c 00F06CFB 		BL	PICK
 3800 0380 00F026FE 		BL	DOT			// index stack, display contents
 3801              	DOTS2:
 3802 0384 00F0D1F8 		BL	DONXT
 3803 0388 78030000 		.word	DOTS1	// loop till done
 3804 038c 00F06CFD 		BL	SPACE
 3805 0390 52F804FB 		_UNNEST
 3806              	
 3807              	//    >NAME	( ca -- na | F )
 3808              	// 	Convert code address to a name address.
 3809              		_HEADER_FL TNAME,5,">NAME"
 3810 0394 42F804ED 		_NEST
 3811 0398 00F00EF9 		BL	TOR			//  
 3812 039c 00F074FA 		BL	CNTXT			//  va
 3813 03a0 00F0FAF8 		BL	AT			//  na
 3814              	TNAM1:
 3815 03a4 00F01CF9 		BL	DUPP			//  na na
 3816 03a8 00F0E0F8 		BL	QBRAN
 3817 03ac E0030000 		.word	TNAM2	//  vocabulary end, no match
 3818 03b0 00F01CF9 		BL	DUPP			//  na na
 3819 03b4 00F04EFF 		BL	NAMET			//  na ca
 3820 03b8 00F00AF9 		BL	RAT			//  na ca code
 3821 03bc 00F03AF9 		BL	XORR			//  na f --
 3822 03c0 00F0C3F8 		_DOLIT 	0xFFFFFF
 3822      FFFFFF00 
 3823 03c8 00F02EF9 		BL	ANDD 
 3824 03cc 00F0E0F8 		BL	QBRAN
 3825 03d0 E0030000 		.word	TNAM2
 3826 03d4 00F084F9 		BL	CELLM			//  la 
 3827 03d8 00F0FAF8 		BL	AT			//  next_na
 3828 03dc FFF7E2BF 		B.W	TNAM1
 3829              	TNAM2:	
 3830 03e0 00F004F9 		BL	RFROM
 3831 03e4 00F018F9 		BL	DROP			//  0|na --
 3832 03e8 52F804FB 		_UNNEST			// 0
 3833              	
 3834              	//    .ID	 ( na -- )
ARM GAS  stm32eforth.s 			page 74


 3835              	// 	Display the name at address.
 3836              		_HEADER_FL DOTID,3,".ID"
 3837 03ec 42F804ED 		_NEST
 3838 03f0 00F09EF9 		BL	QDUP			// if zero no name
 3839 03f4 00F0E0F8 		BL	QBRAN
 3840 03f8 14040000 		.word	DOTI1
 3841 03fc 00F01AFA 		BL	COUNT
 3842 0400 00F0C3F8 		_DOLIT	0x1F
 3842      1F000000 
 3843 0408 00F02EF9 		BL	ANDD			// mask lexicon bits
 3844 040c 00F088FD 		BL	TYPEE
 3845 0410 52F804FB 		_UNNEST			// display name string
 3846              	DOTI1:
 3847 0414 00F0D4FD 		BL	DOTQP
 3848 0418 09       		.byte	9
 3849 0419 207B6E6F 		.ascii " {noName}"
 3849      4E616D65 
 3849      7D
 3850 0422 00BF     		.p2align 2 	
 3851 0424 52F804FB 		_UNNEST
 3852              	
 3853              		.equ WANT_SEE, 1  // set to 1 if you want SEE 
 3854              		.if WANT_SEE 
 3855              	
 3856              	// .CA ( ca -- ca )
 3857              	// print code field address 
 3858              		.section .inflash ,"ax", %progbits 
 3859              		.p2align 2
 3860              		.type DOTCA, %function 
 3861              	DOTCA:
 3862 0428 42F804ED 		_NEST 
 3863 042c 00F01CF9 		BL  DUPP
 3864 0430 00F004FE 		BL UDOT 
 3865 0434 00F0C3F8 		_DOLIT 2 
 3865      02000000 
 3866 043c 00F074FD 		BL SPACS 
 3867 0440 52F804FB 		_UNNEST 
 3868              	
 3869              	// CODE_ABORT ( ca -- f )
 3870              	// abort if code definition
 3871              		.type CODE_ABORT,%function
 3872              	CODE_ABORT:
 3873 0444 42F804ED 		_NEST 
 3874 0448 FFF7EEFF 		BL DOTCA  
 3875 044c 00F01CF9 		BL DUPP 
 3876 0450 00F0FAF8 		BL AT 
 3877 0454 00F0C3F8 		BL DOLIT 
 3878 0458 42F804ED 		_NEST 
 3879 045c 00F03AF9 		BL XORR 
 3880 0460 00F0E0F8 		BL QBRAN 
 3881 0464 7C040000 		.word 1f 
 3882 0468 00F092FC 		BL DECIM
 3883 046c 01F0AEF8 		BL ABORQ 
 3884 0470 09       		.byte 9 
 3885 0471 636F6465 		.ascii "code word"
 3885      20776F72 
 3885      64
ARM GAS  stm32eforth.s 			page 75


 3886 047a 00BF     		.p2align 2
 3887              	1:	 
 3888 047c 00F0D4FD 		BL DOTQP 
 3889 0480 04       		.byte 4
 3890 0481 6E657374 		.ascii "nest"
 3891 0485 0000BF   		.p2align 2 
 3892 0488 00F09CFD 		BL CR 
 3893 048c 52F804FB 		_UNNEST 
 3894              	
 3895              	
 3896              	// UNNEST? ( ca -- ca f )
 3897              	// check if UNNEST 
 3898              		.type UNNESTQ,%function
 3899              	UNNESTQ:
 3900 0490 42F804ED 		_NEST 
 3901 0494 00F01CF9 		BL DUPP 
 3902 0498 00F0FAF8 		BL AT 
 3903 049c 00F0C3F8 		BL DOLIT 
 3904 04a0 52F804FB 		_UNNEST  
 3905 04a4 00F0D6F9 		BL EQUAL
 3906 04a8 00F01CF9 		BL DUPP 
 3907 04ac 00F0E0F8 		BL QBRAN
 3908 04b0 C4040000 		.word 1f  
 3909 04b4 00F0D4FD 		BL DOTQP
 3910 04b8 06       		.byte 6
 3911 04b9 756E6E65 		.ascii "unnest" 
 3911      7374
 3912 04bf 00       		.p2align 2
 3913 04c0 00F09CFD 		BL CR  
 3914 04c4 52F804FB 	1:	_UNNEST 
 3915              	
 3916              	
 3917              	// search no name routine from code address. 
 3918              		.type NONAMEQ, %function
 3919              	NONAMEQ: // ( ca -- na|ca f )
 3920 04c8 42F804ED 		_NEST 
 3921 04cc 00F0C3F8 		_DOLIT 0 
 3921      00000000 
 3922 04d4 00F020F9 		BL SWAP 
 3923 04d8 00F0C3F8 		_DOLIT NONAME_SUB
 3923      18000000 
 3924 04e0 00F00EF9 		BL TOR   
 3925 04e4 00F01CF9 	0:	BL DUPP // ( 0 ca ca -- )  
 3926 04e8 00F00AF9 		BL RAT  
 3927 04ec 00F0FAF8 		BL AT
 3928 04f0 00F09EF9 		BL QDUP 
 3929 04f4 00F0E0F8 		BL QBRAN 
 3930 04f8 5C050000 		.word 2f 
 3931 04fc 00F03AF9 		BL XORR 
 3932 0500 00F0C3F8 		_DOLIT 0xFFFFFF 
 3932      FFFFFF00 
 3933 0508 00F02EF9 		BL	ANDD  
 3934 050c 00F0E0F8 		BL QBRAN 
 3935 0510 28050000 		.word 1f 
 3936 0514 00F004F9 		BL RFROM 
 3937 0518 00F080F9 		BL CELLP
 3938 051c 00F00EF9 		BL TOR  
ARM GAS  stm32eforth.s 			page 76


 3939 0520 00F0ECF8 		BL BRAN 
 3940 0524 E4040000 		.word 0b 
 3941 0528 00F004F9 	1:  BL RFROM 
 3942 052c 00F0C3F8 		_DOLIT NONAME_SUB
 3942      18000000 
 3943 0534 00F058F9 		BL SUBB
 3944 0538 00F0C3F8 		_DOLIT ANONYMOUS 
 3944      54000000 
 3945 0540 00F054F9 		BL	PLUS
 3946 0544 00F0FAF8 		BL	AT   
 3947 0548 00F020F9 		BL	SWAP 
 3948 054c 00F018F9 		BL	DROP
 3949 0550 00F020F9 		BL	SWAP 
 3950 0554 00F0C0F9 		BL	INVER 
 3951 0558 52F804FB 		_UNNEST 
 3952 055c 00F018F9 	2:	BL DROP 
 3953 0560 00F020F9 		BL SWAP 
 3954 0564 00F004F9 		BL RFROM
 3955 0568 00F018F9 		BL DROP 
 3956 056c 52F804FB 		_UNNEST 
 3957              	
 3958              		.p2align 2 
 3959              	
 3960              	
 3961              	// print noname routine label ( n -- )
 3962              	// n is offset in ANONYMOUS array 
 3963              		.type DOTNONAME,%function
 3964              	DOTNONAME:
 3965 0570 42F804ED 		_NEST 
 3966 0574 41F8045D 		_PUSH 
 3967 0578 00F0C3F8 		_DOLIT ANONYMOUS 
 3967      54000000 
 3968 0580 00F054F9 		BL PLUS 
 3969 0584 00F0FAF8 		BL AT 
 3970 0588 00F088FD 		BL TYPEE 
 3971 058c 52F804FB 		_UNNEST 
 3972              	
 3973              	// IS_BLW ( code -- f )
 3974              	// check if it is a BL instruction 
 3975              		.type IS_BLW, %function 
 3976              	IS_BLW:
 3977 0590 42F804ED 		_NEST 
 3978 0594 00F0C3F8 		_DOLIT 0xD000F000
 3978      00F000D0 
 3979 059c 00F01CF9 		BL DUPP 
 3980 05a0 00F00EF9 		BL TOR 
 3981 05a4 00F02EF9 		BL ANDD
 3982 05a8 00F004F9 		BL RFROM  
 3983 05ac 00F0D6F9 		BL EQUAL   
 3984 05b0 52F804FB 		_UNNEST 
 3985              	
 3986              	//    SEE	 ( -- //  string> )
 3987              	// 	A simple decompiler.
 3988              		_HEADER_FL SEE,3,"SEE"
 3989 05b4 42F804ED 		_NEST
 3990 05b8 00F04CFA 		BL BASE 
 3991 05bc 00F0FAF8 		BL AT 
ARM GAS  stm32eforth.s 			page 77


 3992 05c0 00F00EF9 		BL TOR 
 3993 05c4 00F086FC 		BL HEX 
 3994 05c8 01F006FB 		BL	TICK	//  ca --, starting address
 3995 05cc 00F09CFD 		BL	CR	
 3996 05d0 FFF738FF 		BL  CODE_ABORT
 3997 05d4 00F008F8 		BL	FL_SCOL 
 3998 05d8 00F004F9 		BL  RFROM 
 3999 05dc 00F04CFA 		BL 	BASE 
 4000 05e0 00F0F4F8 		BL	STORE 
 4001 05e4 52F804FB 		_UNNEST
 4002              	
 4003              	
 4004              	// SEECOLON ( ca -- )
 4005              	// Decompile colon definition 
 4006              		_HEADER_FL SCOL,8,"SEECOLON"
 4007 05e8 42F804ED 		_NEST 
 4008 05ec 00F0C3F8 		_DOLIT 9  
 4008      09000000 
 4009 05f4 00F00EF9 		BL TOR // not a BL counter limit to 10 consecutives 
 4010              	SCOL1:
 4011 05f8 00F080F9 		BL	CELLP			//  a
 4012 05fc FFF714FF 		BL  DOTCA 
 4013 0600 FFF746FF 		BL  UNNESTQ
 4014 0604 00F0E0F8 		BL	QBRAN 
 4015 0608 38060000 		.word 1f  
 4016 060c 00F01CF9 		BL	DUPP 
 4017 0610 00F080F9 		BL	CELLP
 4018 0614 00F0FAF8 		BL	AT 
 4019 0618 FFF7BAFF 		BL	IS_BLW
 4020 061c 00F0C0F9 		BL	INVER  
 4021 0620 00F0E0F8 		BL	QBRAN 
 4022 0624 F8050000 		.word SCOL1 
 4023 0628 00F004F9 		BL	RFROM 
 4024 062c 00F018F9 		BL	DROP 
 4025 0630 00F0ECF8 		BL	BRAN 
 4026 0634 4C060000 		.word 2f 
 4027 0638 00F01CF9 	1:	BL	DUPP			//  a a
 4028 063c 00F02CF8 		BL	FL_DECOMP		//  a
 4029 0640 00F09CFD 		BL	CR 
 4030 0644 00F0D1F8 		BL	DONXT  
 4031 0648 F8050000 		.word	SCOL1
 4032 064c 00F018F9 	2:	BL DROP 
 4033 0650 52F804FB 		_UNNEST
 4034              	
 4035              	// BL-ADR ( asm_code -- rel_adr )
 4036              	// get absolute address from asm_code 
 4037              	// ref: ARM-v7M architecture reference, section A7.7.18 
 4038              		.p2align 2 
 4039              		.type BLADR, %function 
 4040              	BLADR: 
 4041 0654 4FEA0504 		MOV.W R4,R5
 4042 0658 4FEA3444 		ROR R4,#16 
 4043 065c 64F30A05 		BFI R5,R4,#0,#11 
 4044 0660 4FEAE424 		ASR R4,#11 
 4045 0664 64F35555 		BFI R5,R4,#21,#1 
 4046 0668 4FEAA404 		ASR R4,#2
 4047 066c 64F39655 		BFI R5,R4,#22,#1
ARM GAS  stm32eforth.s 			page 78


 4048 0670 4FEAE404 		ASR R4,#3
 4049 0674 64F3D425 		BFI R5,R4,#11,#10
 4050 0678 4FEAA424 		ASR R4,#10 
 4051 067c 64F3D755 		BFI R5,R4,#23,#1
 4052 0680 15F4000F 		TST R5,#(1<<23)
 4053 0684 40F00280 		BNE.W 1f
 4054 0688 85F4C005 		EOR R5,R5,#(3<<21)
 4055 068c 4FEA0525 	1:	LSL R5,#8
 4056 0690 4FEAE515 		ASR R5,#7 
 4057 0694 7047     		_NEXT 
 4058              	
 4059              		
 4060              	// 	DECOMPILE ( a -- )
 4061              	// 	Convert code in a.  Display name of command or as data.
 4062 0696 00BF     		_HEADER_FL DECOMP,9,"DECOMPILE"
 4063 0698 42F804ED 		_NEST
 4064 069c 00F01CF9 		BL	DUPP			//  a a
 4065 06a0 00F0FAF8 		BL	AT			//  a code
 4066 06a4 00F01CF9 		BL	DUPP			//  a code code
 4067 06a8 FFF772FF 		BL	IS_BLW
 4068 06ac 00F0E0F8 		BL	QBRAN
 4069 06b0 10070000 		.word	DECOM2	//  not a BL instruction 
 4070              		//  a valid_code --, extract address and display name
 4071 06b4 00F0D4FD 		BL DOTQP  
 4072 06b8 03       		.byte 3
 4073 06b9 424C20   		.ascii "BL "
 4074              		.p2align 2
 4075 06bc FFF7CAFF 		BL  BLADR   // extract relative address from BL code
 4076 06c0 00F024F9 		BL	OVER			//  a offset a
 4077 06c4 00F054F9 		BL	PLUS			//  a target-4
 4078 06c8 00F080F9 		BL	CELLP			//  a target
 4079 06cc FFF7ACFE 		BL  DOTCA 
 4080 06d0 FFF7FAFE 		BL	NONAMEQ 
 4081 06d4 00F0E0F8 		BL	QBRAN 
 4082 06d8 E4060000 		.word DECOMP1  
 4083 06dc 00F0ECF8 		BL	BRAN 
 4084 06e0 E8060000 		.word DECOMP3 
 4085              	DECOMP1:
 4086 06e4 FFF756FE 		BL	FL_TNAME			//  a na/0 --, is it a name?
 4087              	DECOMP3:
 4088 06e8 FFF780FE 		BL	FL_DOTID			//  a --, display name
 4089 06ec 00F018F9 		BL	DROP
 4090              	// reset not BL counter 
 4091 06f0 00F004F9 		BL	RFROM 
 4092 06f4 00F004F9 		BL	RFROM 
 4093 06f8 00F018F9 		BL	DROP
 4094 06fc 00F0C3F8 		_DOLIT 9  
 4094      09000000 
 4095 0704 00F00EF9 		BL	TOR 
 4096 0708 00F00EF9 		BL	TOR 	
 4097 070c 52F804FB 		_UNNEST
 4098              	DECOM2: // not a BL 
 4099 0710 00F004FE 		BL	UDOT
 4100 0714 00F018F9 		BL	DROP
 4101 0718 52F804FB 		_UNNEST
 4102              	.endif 
 4103              	
ARM GAS  stm32eforth.s 			page 79


 4104              	//    WORDS	( -- )
 4105              	// 	Display the names in the context vocabulary.
 4106              		_HEADER_FL WORDS,5,"WORDS"
 4107 071c 42F804ED 		_NEST
 4108 0720 00F09CFD 		BL	CR
 4109 0724 00F074FA 		BL	CNTXT
 4110 0728 00F0FAF8 		BL	AT			// only in context
 4111              	WORS1:
 4112 072c 00F09EF9 		BL	QDUP			// ?at end of list
 4113 0730 00F0E0F8 		BL	QBRAN
 4114 0734 50070000 		.word	WORS2
 4115 0738 00F01CF9 		BL	DUPP
 4116 073c 00F06CFD 		BL	SPACE
 4117 0740 FFF754FE 		BL	FL_DOTID			// display a name
 4118 0744 00F084F9 		BL	CELLM
 4119 0748 00F0FAF8 		BL	AT
 4120 074c FFF7EEBF 		B.W	WORS1
 4121              	WORS2:
 4122 0750 52F804FB 		_UNNEST
 4123              	
 4124              		.section .text , "ax", %progbits
 4125              	
 4126              	// **************************************************************************
 4127              	//  cold start
 4128              	
 4129              	//    VER	 ( -- n )
 4130              	// 	Return the version number of this implementation.
 4131              	
 4132              	// 	.word	_WORDS+MAPOFFSET
 4133              	// _VERSN	.byte  3
 4134              	// 	.ascii "VER"
 4135              	// 	.p2align 2 	
 4136              	VERSN:
 4137 1cb2 42F804ED 		_NEST
 4138 1cb6 FEF768FA 		_DOLIT	VER*256+EXT
 4138      00010000 
 4139 1cbe 52F804FB 		_UNNEST
 4140              	
 4141              	//    hi	  ( -- )
 4142              	// 	Display the sign-on message of eForth.
 4143 1cc2 00BF     		_HEADER HI,2,"HI"
 4144 1cc4 42F804ED 		_NEST
 4145 1cc8 FEF738FF 		BL	CR	// initialize I/O
 4146 1ccc FEF75DFA 		_DOLIT hi_msg 
 4146      00000000 
 4147 1cd4 FEF7B0FB 		BL	COUNT 
 4148 1cd8 FEF71CFF 		BL	TYPEE 
 4149 1cdc FEF7DEFB 		BL	BASE
 4150 1ce0 FEF78AFA 		BL	AT
 4151 1ce4 FEF714FE 		BL	HEX	// save radix
 4152 1ce8 FFF7E3FF 		BL	VERSN
 4153 1cec FEF7A6FD 		BL	BDIGS
 4154 1cf0 FEF7C0FD 		BL	DIG
 4155 1cf4 FEF7BEFD 		BL	DIG
 4156 1cf8 FEF747FA 		_DOLIT	'.'
 4156      2E000000 
 4157 1d00 FEF7A6FD 		BL	HOLD
ARM GAS  stm32eforth.s 			page 80


 4158 1d04 FEF7C2FD 		BL	DIGS
 4159 1d08 FEF7DEFD 		BL	EDIGS
 4160 1d0c FEF702FF 		BL	TYPEE	// format version number
 4161 1d10 FEF7C4FB 		BL	BASE
 4162 1d14 FEF76AFA 		BL	STORE
 4163 1d18 FEF710FF 		BL	CR
 4164 1d1c 52F804FB 		_UNNEST			// restore radix
 4165              	
 4166              		.section .rodata
 4167              		.p2align 2 
 4168              	hi_msg:
 4169 0000 17       		.byte	23
 4170 0001 626C7565 		.ascii "blue pill stm32eForth v" 
 4170      2070696C 
 4170      6C207374 
 4170      6D333265 
 4170      466F7274 
 4171              		.p2align 2 
 4172              	
 4173              		.section  .text, "ax" ,%progbits 
 4174              	
 4175              	//    COLD	( -- )
 4176              	// 	The high level cold start sequence.
 4177              		_HEADER LASTN,4,"COLD"
 4178              	COLD:
 4179              	//  Initiate Forth registers
 4180 1d20 4FF40073 		_MOV32 R3,UPP // system variables area 
 4180      C2F20003 
 4181 1d28 4FF47F41 		_MOV32 R1,SPP // Forth data stack 
 4181      C2F20101 
 4182 1d30 4FF68072 		_MOV32 R2,RPP // Forth return stack 
 4182      C2F20102 
 4183 1d38 85EA0505 		EOR R5,R5,R5			//  tos=0
 4184 1d3c 42F804ED 		_NEST
 4185              	COLD1:
 4186 1d40 FEF723FA 		_DOLIT 0 
 4186      00000000 
 4187 1d48 FEF7EEF9 		BL ULED // turn off user LED 
 4188 1d4c FEF71DFA 		_DOLIT	UZERO
 4188      00000000 
 4189 1d54 FEF719FA 		_DOLIT	UPP
 4189      00020020 
 4190 1d5c FEF715FA 		_DOLIT	ULAST-UZERO
 4190      54000000 
 4191 1d64 FEF7F8FC 		BL	MOVE 			// initialize user area
 4192 1d68 FFF782FA 		BL	PRESE			// initialize stack
 4193              		// check if user image saved in slot 0 
 4194 1d6c FFF742FB 		BL IMGQ 
 4195 1d70 FEF728FA 		BL	QBRAN 
 4196 1d74 7C1D0018 		.word 1f+MAPOFFSET
 4197 1d78 FFF74CFB 		BL	LOAD_IMG 
 4198 1d7c FEF788FB 	1:	BL	TBOOT
 4199 1d80 FEF7CEFC 		BL	ATEXE			// application boot
 4200 1d84 FFF7DAFD 		BL	OVERT
 4201 1d88 FFF77CBA 		B.W	QUIT			// start interpretation
 4202              		.p2align 2
 4203              	CTOP: 
ARM GAS  stm32eforth.s 			page 81


 4204              	COLD2:
 4205 1d8c FFFFFFFF 		.word	0XFFFFFFFF
 4206              		
 4207              	/********************************
 4208              	  data that doesn't need to be 
 4209              	  copied in RAM 
 4210              	*******************************/
 4211              		.section .rodata 
 4212              		.p2align 2
 4213              	NONAME_SUB: // routine not in the dictionary 
 4214 0018 DC010000 		.word BRAN,QBRAN, DOLIT,DONXT,DODOES
 4214      C4010000 
 4214      8A010000 
 4214      A6010000 
 4214      B01A0000 
 4215 002c 54040000 		.word DOVAR,DOCON,IS_BLW,DOTQP,BLADR  
 4215      60040000 
 4215      00000000 
 4215      AC0B0000 
 4215      00000000 
 4216 0040 00000000 		.word DOTCA,NONAMEQ,STRCQ,VERSN  
 4216      00000000 
 4216      AC160000 
 4216      B21C0000 
 4217 0050 00000000 		.word 0 
 4218              	
 4219              	ANONYMOUS: // anonymous routines 
 4220 0054 8C000000 		.word BRAN_LBL,QBRAN_LBL,DOLIT_LBL,DONEXT_LBL,DODOES_LBL,DOVAR_LBL,DOCON_LBL
 4220      98000000 
 4220      A4000000 
 4220      B0000000 
 4220      BC000000 
 4221 0070 E0000000 		.word IS_BLW_LBL,DOTQP_LBL,BLADR_LBL,DOTCA_LBL,NONAMEQ_LBL,STRCQ_LBL,VERSN_LBL   
 4221      EC000000 
 4221      F0000000 
 4221      FC000000 
 4221      08010000 
 4222              	
 4223              	BRAN_LBL:
 4224 008c 09       		.byte 9 
 4225 008d 207B6272 		.ascii " {branch}"
 4225      616E6368 
 4225      7D
 4226 0096 0000     		.p2align 2 
 4227              	QBRAN_LBL:
 4228 0098 0A       		.byte 10
 4229 0099 207B3F62 		.ascii " {?branch}"
 4229      72616E63 
 4229      687D
 4230 00a3 00       		.p2align 2
 4231              	DOLIT_LBL:
 4232 00a4 08       		.byte 8 
 4233 00a5 207B646F 		.ascii " {doLit}"
 4233      4C69747D 
 4234 00ad 000000   		.p2align 2 
 4235              	DONEXT_LBL:
 4236 00b0 09       		.byte 9
ARM GAS  stm32eforth.s 			page 82


 4237 00b1 207B646F 		.ascii " {doNext}"
 4237      4E657874 
 4237      7D
 4238 00ba 0000     		.p2align 2 
 4239              	DODOES_LBL:
 4240 00bc 09       		.byte 9
 4241 00bd 207B646F 		.ascii " {doDoes}"
 4241      446F6573 
 4241      7D
 4242 00c6 0000     		.p2align 2 
 4243              	DOVAR_LBL:
 4244 00c8 08       		.byte 8
 4245 00c9 207B646F 		.ascii " {doVar}"
 4245      5661727D 
 4246 00d1 000000   		.p2align 2 
 4247              	DOCON_LBL:
 4248 00d4 0A       		.byte 10
 4249 00d5 207B646F 		.ascii " {doConst}"
 4249      436F6E73 
 4249      747D
 4250 00df 00       		.p2align 2 
 4251              	IS_BLW_LBL:
 4252 00e0 0B       		.byte 11 
 4253 00e1 207B424C 		.ascii " {BL code?}"
 4253      20636F64 
 4253      653F7D
 4254              		.p2align 2 
 4255              	DOTQP_LBL:
 4256 00ec 03       		.byte 3
 4257 00ed 202E22   		.ascii " .\""
 4258              		.p2align 
 4259              	BLADR_LBL:
 4260 00f0 09       		.byte 9
 4261 00f1 207B424C 		.ascii " {BL>ADR}"
 4261      3E414452 
 4261      7D
 4262 00fa 0000     		.p2align 2 
 4263              	DOTCA_LBL:
 4264 00fc 08       		.byte  8
 4265 00fd 207B646F 		.ascii " {dotca}"
 4265      7463617D 
 4266 0105 000000   		.p2align 2 
 4267              	NONAMEQ_LBL:
 4268 0108 0A       		.byte  10
 4269 0109 207B6E6F 		.ascii " {noname?}"
 4269      6E616D65 
 4269      3F7D
 4270 0113 00       		.p2align 2 
 4271              	STRCQ_LBL:
 4272 0114 06       		.byte  6
 4273 0115 207B242C 		.ascii " {$,\"}"
 4273      227D
 4274 011b 00       		.p2align 2 
 4275              	VERSN_LBL:
 4276 011c 0A       		.byte  10
 4277 011d 207B7665 		.ascii " {version}"
 4277      7273696F 
ARM GAS  stm32eforth.s 			page 83


 4277      6E7D
 4278 0127 00       		.p2align 2 
 4279              	
 4280              		.section .user 
 4281              		.p2align 10 
 4282              	USER_SPACE: // save user image here.  
 4283 0000 FFFFFFFF 		.word 0XFFFFFFFF
 4284              	
 4285              	
 4286              	  .end 
ARM GAS  stm32eforth.s 			page 84


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:20     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:22     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:23     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:24     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:25     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:29     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:30     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:33     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:34     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:37     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:38     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:42     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:44     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:48     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:50     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:51     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:52     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:53     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:54     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:55     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:56     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:57     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:58     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:59     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:60     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:61     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:62     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:63     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:64     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:65     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:66     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:67     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:68     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:69     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:70     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:73     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:75     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:76     *ABS*:0000000000000004 FLASH_KEYR
     stm32f411ce.inc:77     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:78     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:79     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:80     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:81     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:82     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:83     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:84     *ABS*:0000000008192a3b OPTKEY1
ARM GAS  stm32eforth.s 			page 85


     stm32f411ce.inc:85     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:88     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:89     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:90     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:91     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:92     *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:93     *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:96     *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:97     *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:98     *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:99     *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:100    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:101    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:102    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:103    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:104    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:105    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:109    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:111    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:112    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:113    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:114    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:115    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:116    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:117    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:120    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:122    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:123    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:124    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:125    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:128    *ABS*:00000000e000ed00 SCB_BASE_ADR
     stm32f411ce.inc:130    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:131    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:132    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:133    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:134    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:135    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:136    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:137    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:138    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:139    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:140    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:141    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:142    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:143    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:144    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:145    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:146    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:147    *ABS*:000000000000003c SCB_AFSR
     stm32f411ce.inc:149    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:152    *ABS*:00000000e000e100 NVIC_BASE_ADR
     stm32f411ce.inc:153    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:154    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:155    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:156    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:157    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:158    *ABS*:0000000000000114 NVIC_ISER5
ARM GAS  stm32eforth.s 			page 86


     stm32f411ce.inc:159    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:160    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:161    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:162    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:163    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:164    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:165    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:166    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:167    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:168    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:169    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:170    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:171    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:172    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:173    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:174    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:175    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:176    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:177    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:178    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:179    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:180    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:181    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:182    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:183    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:184    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:185    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:186    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:187    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:188    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:189    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:190    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:191    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:192    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:194    *ABS*:0000000000000400 NVIC_IPR_BASE
     stm32f411ce.inc:195    *ABS*:0000000000000e00 NVIC_STIR
       stm32eforth.s:83     *ABS*:0000000040020800 LED_GPIO
       stm32eforth.s:84     *ABS*:000000000000000d LED_PIN
       stm32eforth.s:85     *ABS*:0000000040011000 UART
       stm32eforth.s:88     *ABS*:000000002001ff80 RPP
       stm32eforth.s:89     *ABS*:000000002001ff00 TIBB
       stm32eforth.s:90     *ABS*:000000002001ff00 SPP
       stm32eforth.s:91     *ABS*:0000000020000200 UPP
       stm32eforth.s:92     *ABS*:000000002001fe80 DEND
       stm32eforth.s:93     *ABS*:0000000020000200 RAMOFFSET
       stm32eforth.s:94     *ABS*:0000000008000200 FLASHOFFSET
       stm32eforth.s:97     *ABS*:0000000018000000 MAPOFFSET
       stm32eforth.s:98     *ABS*:0000000018000000 IRQOFFSET
       stm32eforth.s:103    *ABS*:0000000000000004 SEED_OFS
       stm32eforth.s:104    *ABS*:0000000000000008 TICKS_OFS
       stm32eforth.s:105    *ABS*:000000000000000c TIMER_OFS
       stm32eforth.s:106    *ABS*:0000000000000010 TORAM_OFS
       stm32eforth.s:107    *ABS*:0000000000000014 IMG_SIGN_OFS
       stm32eforth.s:108    *ABS*:0000000000000018 BOOT_OFS
       stm32eforth.s:109    *ABS*:000000000000001c BASE_OFS
       stm32eforth.s:110    *ABS*:0000000000000020 TMP_OFS
       stm32eforth.s:111    *ABS*:0000000000000024 SPAN_OFS
ARM GAS  stm32eforth.s 			page 87


       stm32eforth.s:112    *ABS*:0000000000000028 TOIN_OFS
       stm32eforth.s:113    *ABS*:000000000000002c NTIB_OFS
       stm32eforth.s:114    *ABS*:0000000000000030 TIB_OFS
       stm32eforth.s:115    *ABS*:0000000000000034 EVAL_OFS
       stm32eforth.s:116    *ABS*:0000000000000038 HLD_OFS
       stm32eforth.s:117    *ABS*:000000000000003c CTXT_OFS
       stm32eforth.s:118    *ABS*:0000000000000040 FORTH_CTOP_OFS
       stm32eforth.s:119    *ABS*:0000000000000044 USER_CTOP_OFS
       stm32eforth.s:120    *ABS*:0000000000000048 LASTN_OFS
       stm32eforth.s:121    *ABS*:000000000000004c VARS_END_OFS
       stm32eforth.s:123    *ABS*:0000000000000010 RX_QUEUE_SIZE
       stm32eforth.s:124    *ABS*:0000000000000050 RX_QUEUE_OFS
       stm32eforth.s:125    *ABS*:0000000000000060 RX_HEAD_OFS
       stm32eforth.s:126    *ABS*:0000000000000064 RX_TAIL_OFS
       stm32eforth.s:4143   .inflash.dictinary:0000000000000c14 link
       stm32eforth.s:220    .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:440    .inflash:00000000000000d0 reset_handler
       stm32eforth.s:338    .inflash:0000000000000000 default_handler
       stm32eforth.s:355    .inflash:0000000000000020 systick_handler
       stm32eforth.s:238    .isr_vector:0000000000000040 irq0
       stm32eforth.s:374    .inflash:000000000000003c uart_rx_handler
       stm32eforth.s:326    .isr_vector:0000000000000198 isr_end
       stm32eforth.s:328    .isr_vector:0000000000000198 $d
       stm32eforth.s:336    .inflash:0000000000000000 $t
       stm32eforth.s:343    .inflash:0000000000000008 exception_msg
       stm32eforth.s:416    .inflash:00000000000000a4 uart_puts
       stm32eforth.s:397    .inflash:000000000000007c reset_mcu
       stm32eforth.s:344    .inflash:0000000000000008 $d
       stm32eforth.s:364    .inflash:000000000000003a systick_exit
       stm32eforth.s:394    .inflash:0000000000000076 user_reboot
       stm32eforth.s:407    .inflash:0000000000000090 user_reboot_msg
       stm32eforth.s:405    .inflash:000000000000008c scb_adr
       stm32eforth.s:406    .inflash:000000000000008c $d
       stm32eforth.s:411    .inflash:00000000000000a2 $t
       stm32eforth.s:597    .inflash:000000000000024c remap
       stm32eforth.s:489    .inflash:0000000000000158 init_devices
       stm32eforth.s:569    .inflash:0000000000000200 uart_init
       stm32eforth.s:457    .inflash:00000000000000fc forth_init
       stm32eforth.s:453    .inflash:00000000000000f8 forth_entry
       stm32eforth.s:454    .inflash:00000000000000f8 $d
       stm32eforth.s:4178   .text:0000000000001d20 COLD
       stm32eforth.s:458    .inflash:00000000000000fc $t
       stm32eforth.s:465    .inflash:000000000000011a blink
       stm32eforth.s:480    .inflash:0000000000000150 timeout
       stm32eforth.s:502    .inflash:0000000000000176 wait_hserdy
       stm32eforth.s:523    .inflash:0000000000000198 wait_pllrdy
       stm32eforth.s:535    .inflash:00000000000001b2 wait_sws
       stm32eforth.s:629    .inflash:00000000000002b0 remap_dest
       stm32eforth.s:627    .inflash:00000000000002ac remap_src
       stm32eforth.s:4203   .text:0000000000001d8c CTOP
       stm32eforth.s:676    .text:0000000000000000 UZERO
       stm32eforth.s:628    .inflash:00000000000002ac $d
       stm32eforth.s:635    *ABS*:0000000000000001 VER
       stm32eforth.s:636    *ABS*:0000000000000000 EXT
       stm32eforth.s:640    *ABS*:0000000000000040 COMPO
       stm32eforth.s:641    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:642    *ABS*:00000000ffffff1f MASKK
ARM GAS  stm32eforth.s 			page 88


       stm32eforth.s:644    *ABS*:0000000000000004 CELLL
       stm32eforth.s:645    *ABS*:000000000000000a BASEE
       stm32eforth.s:646    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:648    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:649    *ABS*:000000000000000a LF
       stm32eforth.s:650    *ABS*:000000000000000d CRR
       stm32eforth.s:651    *ABS*:000000000000001b ERR
       stm32eforth.s:652    *ABS*:0000000000000027 TIC
       stm32eforth.s:677    .text:0000000000000000 $d
       stm32eforth.s:4143   .text:0000000000001cc4 HI
       stm32eforth.s:2701   .text:0000000000001180 INTER
       stm32eforth.s:4143   .inflash.dictinary:0000000000000c14 _LASTN
       stm32eforth.s:697    .text:0000000000000054 ULAST
       stm32eforth.s:705    .text:000000000000006c $t
               .inflash.dictinary:0000000000000000 LF_RSTIVEC
               .inflash.dictinary:0000000000000004 _RSTIVEC
               .inflash.dictinary:000000000000000d $d
       stm32eforth.s:709    .inflash.dictinary:0000000000000010 CA_RSTIVEC
       stm32eforth.s:709    .text:0000000000000070 RSTIVEC
       stm32eforth.s:832    .text:000000000000018a DOLIT
       stm32eforth.s:711    .text:0000000000000078 $d
       stm32eforth.s:975    .text:0000000000000244 SWAP
       stm32eforth.s:712    .text:000000000000007c $t
       stm32eforth.s:1124   .text:0000000000000320 CELLS
       stm32eforth.s:714    .text:0000000000000088 $d
       stm32eforth.s:1042   .text:00000000000002ac PLUS
       stm32eforth.s:715    .text:000000000000008c $t
       stm32eforth.s:907    .text:00000000000001ec STORE
       stm32eforth.s:709    .inflash.dictinary:0000000000000014 LF_SETIVEC
       stm32eforth.s:709    .inflash.dictinary:0000000000000018 _SETIVEC
       stm32eforth.s:721    .inflash.dictinary:0000000000000024 CA_SETIVEC
       stm32eforth.s:721    .text:0000000000000098 SETIVEC
       stm32eforth.s:1081   .text:00000000000002e4 ONEP
       stm32eforth.s:727    .text:00000000000000b0 $d
       stm32eforth.s:728    .text:00000000000000b4 $t
       stm32eforth.s:721    .inflash.dictinary:0000000000000028 LF_RAND
       stm32eforth.s:721    .inflash.dictinary:000000000000002c _RAND
       stm32eforth.s:737    .inflash.dictinary:0000000000000034 CA_RAND
       stm32eforth.s:737    .text:00000000000000c0 RAND
       stm32eforth.s:1355   .text:000000000000046c SEED
       stm32eforth.s:915    .text:00000000000001f8 AT
       stm32eforth.s:969    .text:000000000000023c DUPP
       stm32eforth.s:1203   .text:0000000000000394 ABSS
       stm32eforth.s:1590   .text:0000000000000624 MODD
       stm32eforth.s:737    .inflash.dictinary:0000000000000038 LF_PAUSE
       stm32eforth.s:737    .inflash.dictinary:000000000000003c _PAUSE
       stm32eforth.s:757    .inflash.dictinary:0000000000000044 CA_PAUSE
       stm32eforth.s:757    .text:0000000000000100 PAUSE
       stm32eforth.s:1369   .text:0000000000000484 TIMER
       stm32eforth.s:761    .text:000000000000010c PAUSE_LOOP
       stm32eforth.s:877    .text:00000000000001c4 QBRAN
       stm32eforth.s:765    .text:0000000000000118 $d
       stm32eforth.s:768    .text:0000000000000124 PAUSE_EXIT
       stm32eforth.s:895    .text:00000000000001dc BRAN
       stm32eforth.s:766    .text:000000000000011c $t
       stm32eforth.s:767    .text:0000000000000120 $d
       stm32eforth.s:769    .text:0000000000000124 $t
ARM GAS  stm32eforth.s 			page 89


       stm32eforth.s:757    .inflash.dictinary:0000000000000048 LF_ULED
       stm32eforth.s:757    .inflash.dictinary:000000000000004c _ULED
       stm32eforth.s:773    .inflash.dictinary:0000000000000054 CA_ULED
       stm32eforth.s:773    .text:0000000000000128 ULED
       stm32eforth.s:780    .text:0000000000000140 ULED_OFF
       stm32eforth.s:773    .inflash.dictinary:0000000000000058 LF_QRX
       stm32eforth.s:773    .inflash.dictinary:000000000000005c _QRX
       stm32eforth.s:786    .inflash.dictinary:0000000000000064 CA_QRX
       stm32eforth.s:786    .text:0000000000000144 QRX
       stm32eforth.s:787    .text:0000000000000144 QKEY
       stm32eforth.s:786    .inflash.dictinary:0000000000000068 LF_EMIT
       stm32eforth.s:786    .inflash.dictinary:000000000000006c _EMIT
       stm32eforth.s:806    .inflash.dictinary:0000000000000074 CA_EMIT
       stm32eforth.s:806    .text:0000000000000170 EMIT
       stm32eforth.s:807    .text:0000000000000170 TECHO
       stm32eforth.s:806    .inflash.dictinary:0000000000000078 LF_NOP
       stm32eforth.s:806    .inflash.dictinary:000000000000007c _NOP
       stm32eforth.s:821    .inflash.dictinary:0000000000000080 CA_NOP
       stm32eforth.s:821    .text:0000000000000188 NOP
       stm32eforth.s:821    .inflash.dictinary:0000000000000084 LF_EXECU
       stm32eforth.s:821    .inflash.dictinary:0000000000000088 _EXECU
       stm32eforth.s:841    .inflash.dictinary:0000000000000090 CA_EXECU
       stm32eforth.s:841    .text:000000000000019c EXECU
       stm32eforth.s:855    .text:00000000000001a6 DONXT
       stm32eforth.s:862    .text:00000000000001b4 NEXT1
       stm32eforth.s:884    .text:00000000000001d6 QBRAN1
       stm32eforth.s:841    .inflash.dictinary:0000000000000094 LF_EXIT
       stm32eforth.s:841    .inflash.dictinary:0000000000000098 _EXIT
       stm32eforth.s:902    .inflash.dictinary:00000000000000a0 CA_EXIT
       stm32eforth.s:902    .text:00000000000001e8 EXIT
       stm32eforth.s:902    .inflash.dictinary:00000000000000a4 LF_STORE
       stm32eforth.s:902    .inflash.dictinary:00000000000000a8 _STORE
       stm32eforth.s:907    .inflash.dictinary:00000000000000ac CA_STORE
       stm32eforth.s:907    .inflash.dictinary:00000000000000b0 LF_AT
       stm32eforth.s:907    .inflash.dictinary:00000000000000b4 _AT
       stm32eforth.s:915    .inflash.dictinary:00000000000000b8 CA_AT
       stm32eforth.s:915    .inflash.dictinary:00000000000000bc LF_CSTOR
       stm32eforth.s:915    .inflash.dictinary:00000000000000c0 _CSTOR
       stm32eforth.s:921    .inflash.dictinary:00000000000000c4 CA_CSTOR
       stm32eforth.s:921    .text:00000000000001fc CSTOR
       stm32eforth.s:921    .inflash.dictinary:00000000000000c8 LF_CAT
       stm32eforth.s:921    .inflash.dictinary:00000000000000cc _CAT
       stm32eforth.s:929    .inflash.dictinary:00000000000000d0 CA_CAT
       stm32eforth.s:929    .text:0000000000000208 CAT
       stm32eforth.s:929    .inflash.dictinary:00000000000000d4 LF_RFROM
       stm32eforth.s:929    .inflash.dictinary:00000000000000d8 _RFROM
       stm32eforth.s:935    .inflash.dictinary:00000000000000dc CA_RFROM
       stm32eforth.s:935    .text:000000000000020c RFROM
       stm32eforth.s:935    .inflash.dictinary:00000000000000e0 LF_RAT
       stm32eforth.s:935    .inflash.dictinary:00000000000000e4 _RAT
       stm32eforth.s:942    .inflash.dictinary:00000000000000e8 CA_RAT
       stm32eforth.s:942    .text:0000000000000218 RAT
       stm32eforth.s:942    .inflash.dictinary:00000000000000ec LF_TOR
       stm32eforth.s:942    .inflash.dictinary:00000000000000f0 _TOR
       stm32eforth.s:949    .inflash.dictinary:00000000000000f4 CA_TOR
       stm32eforth.s:949    .text:0000000000000220 TOR
       stm32eforth.s:949    .inflash.dictinary:00000000000000f8 LF_SPAT
ARM GAS  stm32eforth.s 			page 90


       stm32eforth.s:949    .inflash.dictinary:00000000000000fc _SPAT
       stm32eforth.s:956    .inflash.dictinary:0000000000000100 CA_SPAT
       stm32eforth.s:956    .text:000000000000022c SPAT
       stm32eforth.s:956    .inflash.dictinary:0000000000000104 LF_DROP
       stm32eforth.s:956    .inflash.dictinary:0000000000000108 _DROP
       stm32eforth.s:963    .inflash.dictinary:0000000000000110 CA_DROP
       stm32eforth.s:963    .text:0000000000000234 DROP
       stm32eforth.s:963    .inflash.dictinary:0000000000000114 LF_DUPP
       stm32eforth.s:963    .inflash.dictinary:0000000000000118 _DUPP
       stm32eforth.s:969    .inflash.dictinary:000000000000011c CA_DUPP
       stm32eforth.s:969    .inflash.dictinary:0000000000000120 LF_SWAP
       stm32eforth.s:969    .inflash.dictinary:0000000000000124 _SWAP
       stm32eforth.s:975    .inflash.dictinary:000000000000012c CA_SWAP
       stm32eforth.s:975    .inflash.dictinary:0000000000000130 LF_OVER
       stm32eforth.s:975    .inflash.dictinary:0000000000000134 _OVER
       stm32eforth.s:983    .inflash.dictinary:000000000000013c CA_OVER
       stm32eforth.s:983    .text:000000000000024c OVER
       stm32eforth.s:983    .inflash.dictinary:0000000000000140 LF_ZLESS
       stm32eforth.s:983    .inflash.dictinary:0000000000000144 _ZLESS
       stm32eforth.s:990    .inflash.dictinary:0000000000000148 CA_ZLESS
       stm32eforth.s:990    .text:0000000000000254 ZLESS
       stm32eforth.s:990    .inflash.dictinary:000000000000014c LF_ANDD
       stm32eforth.s:990    .inflash.dictinary:0000000000000150 _ANDD
       stm32eforth.s:997    .inflash.dictinary:0000000000000154 CA_ANDD
       stm32eforth.s:997    .text:0000000000000260 ANDD
       stm32eforth.s:997    .inflash.dictinary:0000000000000158 LF_ORR
       stm32eforth.s:997    .inflash.dictinary:000000000000015c _ORR
       stm32eforth.s:1004   .inflash.dictinary:0000000000000160 CA_ORR
       stm32eforth.s:1004   .text:000000000000026c ORR
       stm32eforth.s:1004   .inflash.dictinary:0000000000000164 LF_XORR
       stm32eforth.s:1004   .inflash.dictinary:0000000000000168 _XORR
       stm32eforth.s:1011   .inflash.dictinary:000000000000016c CA_XORR
       stm32eforth.s:1011   .text:0000000000000278 XORR
       stm32eforth.s:1011   .inflash.dictinary:0000000000000170 LF_UPLUS
       stm32eforth.s:1011   .inflash.dictinary:0000000000000174 _UPLUS
       stm32eforth.s:1018   .inflash.dictinary:0000000000000178 CA_UPLUS
       stm32eforth.s:1018   .text:0000000000000284 UPLUS
       stm32eforth.s:1018   .inflash.dictinary:000000000000017c LF_RSHIFT
       stm32eforth.s:1018   .inflash.dictinary:0000000000000180 _RSHIFT
       stm32eforth.s:1028   .inflash.dictinary:0000000000000188 CA_RSHIFT
       stm32eforth.s:1028   .text:0000000000000294 RSHIFT
       stm32eforth.s:1028   .inflash.dictinary:000000000000018c LF_LSHIFT
       stm32eforth.s:1028   .inflash.dictinary:0000000000000190 _LSHIFT
       stm32eforth.s:1035   .inflash.dictinary:0000000000000198 CA_LSHIFT
       stm32eforth.s:1035   .text:00000000000002a0 LSHIFT
       stm32eforth.s:1035   .inflash.dictinary:000000000000019c LF_PLUS
       stm32eforth.s:1035   .inflash.dictinary:00000000000001a0 _PLUS
       stm32eforth.s:1042   .inflash.dictinary:00000000000001a4 CA_PLUS
       stm32eforth.s:1042   .inflash.dictinary:00000000000001a8 LF_SUBB
       stm32eforth.s:1042   .inflash.dictinary:00000000000001ac _SUBB
       stm32eforth.s:1049   .inflash.dictinary:00000000000001b0 CA_SUBB
       stm32eforth.s:1049   .text:00000000000002b4 SUBB
       stm32eforth.s:1049   .inflash.dictinary:00000000000001b4 LF_STAR
       stm32eforth.s:1049   .inflash.dictinary:00000000000001b8 _STAR
       stm32eforth.s:1056   .inflash.dictinary:00000000000001bc CA_STAR
       stm32eforth.s:1056   .text:00000000000002c0 STAR
       stm32eforth.s:1056   .inflash.dictinary:00000000000001c0 LF_UMSTA
ARM GAS  stm32eforth.s 			page 91


       stm32eforth.s:1056   .inflash.dictinary:00000000000001c4 _UMSTA
       stm32eforth.s:1063   .inflash.dictinary:00000000000001c8 CA_UMSTA
       stm32eforth.s:1063   .text:00000000000002cc UMSTA
       stm32eforth.s:1063   .inflash.dictinary:00000000000001cc LF_MSTAR
       stm32eforth.s:1063   .inflash.dictinary:00000000000001d0 _MSTAR
       stm32eforth.s:1072   .inflash.dictinary:00000000000001d4 CA_MSTAR
       stm32eforth.s:1072   .text:00000000000002d8 MSTAR
       stm32eforth.s:1072   .inflash.dictinary:00000000000001d8 LF_ONEP
       stm32eforth.s:1072   .inflash.dictinary:00000000000001dc _ONEP
       stm32eforth.s:1081   .inflash.dictinary:00000000000001e0 CA_ONEP
       stm32eforth.s:1081   .inflash.dictinary:00000000000001e4 LF_ONEM
       stm32eforth.s:1081   .inflash.dictinary:00000000000001e8 _ONEM
       stm32eforth.s:1087   .inflash.dictinary:00000000000001ec CA_ONEM
       stm32eforth.s:1087   .text:00000000000002ec ONEM
       stm32eforth.s:1087   .inflash.dictinary:00000000000001f0 LF_TWOP
       stm32eforth.s:1087   .inflash.dictinary:00000000000001f4 _TWOP
       stm32eforth.s:1093   .inflash.dictinary:00000000000001f8 CA_TWOP
       stm32eforth.s:1093   .text:00000000000002f4 TWOP
       stm32eforth.s:1093   .inflash.dictinary:00000000000001fc LF_TWOM
       stm32eforth.s:1093   .inflash.dictinary:0000000000000200 _TWOM
       stm32eforth.s:1099   .inflash.dictinary:0000000000000204 CA_TWOM
       stm32eforth.s:1099   .text:00000000000002fc TWOM
       stm32eforth.s:1099   .inflash.dictinary:0000000000000208 LF_CELLP
       stm32eforth.s:1099   .inflash.dictinary:000000000000020c _CELLP
       stm32eforth.s:1105   .inflash.dictinary:0000000000000214 CA_CELLP
       stm32eforth.s:1105   .text:0000000000000304 CELLP
       stm32eforth.s:1105   .inflash.dictinary:0000000000000218 LF_CELLM
       stm32eforth.s:1105   .inflash.dictinary:000000000000021c _CELLM
       stm32eforth.s:1111   .inflash.dictinary:0000000000000224 CA_CELLM
       stm32eforth.s:1111   .text:000000000000030c CELLM
       stm32eforth.s:1111   .inflash.dictinary:0000000000000228 LF_BLANK
       stm32eforth.s:1111   .inflash.dictinary:000000000000022c _BLANK
       stm32eforth.s:1117   .inflash.dictinary:0000000000000230 CA_BLANK
       stm32eforth.s:1117   .text:0000000000000314 BLANK
       stm32eforth.s:1117   .inflash.dictinary:0000000000000234 LF_CELLS
       stm32eforth.s:1117   .inflash.dictinary:0000000000000238 _CELLS
       stm32eforth.s:1124   .inflash.dictinary:0000000000000240 CA_CELLS
       stm32eforth.s:1124   .inflash.dictinary:0000000000000244 LF_CELLSL
       stm32eforth.s:1124   .inflash.dictinary:0000000000000248 _CELLSL
       stm32eforth.s:1130   .inflash.dictinary:0000000000000250 CA_CELLSL
       stm32eforth.s:1130   .text:0000000000000328 CELLSL
       stm32eforth.s:1130   .inflash.dictinary:0000000000000254 LF_TWOST
       stm32eforth.s:1130   .inflash.dictinary:0000000000000258 _TWOST
       stm32eforth.s:1136   .inflash.dictinary:000000000000025c CA_TWOST
       stm32eforth.s:1136   .text:0000000000000330 TWOST
       stm32eforth.s:1136   .inflash.dictinary:0000000000000260 LF_TWOSL
       stm32eforth.s:1136   .inflash.dictinary:0000000000000264 _TWOSL
       stm32eforth.s:1142   .inflash.dictinary:0000000000000268 CA_TWOSL
       stm32eforth.s:1142   .text:0000000000000338 TWOSL
       stm32eforth.s:1142   .inflash.dictinary:000000000000026c LF_QDUP
       stm32eforth.s:1142   .inflash.dictinary:0000000000000270 _QDUP
       stm32eforth.s:1148   .inflash.dictinary:0000000000000278 CA_QDUP
       stm32eforth.s:1148   .text:0000000000000340 QDUP
       stm32eforth.s:1148   .inflash.dictinary:000000000000027c LF_ROT
       stm32eforth.s:1148   .inflash.dictinary:0000000000000280 _ROT
       stm32eforth.s:1156   .inflash.dictinary:0000000000000284 CA_ROT
       stm32eforth.s:1156   .text:000000000000034c ROT
ARM GAS  stm32eforth.s 			page 92


       stm32eforth.s:1156   .inflash.dictinary:0000000000000288 LF_DDROP
       stm32eforth.s:1156   .inflash.dictinary:000000000000028c _DDROP
       stm32eforth.s:1165   .inflash.dictinary:0000000000000294 CA_DDROP
       stm32eforth.s:1165   .text:0000000000000358 DDROP
       stm32eforth.s:1165   .inflash.dictinary:0000000000000298 LF_DDUP
       stm32eforth.s:1165   .inflash.dictinary:000000000000029c _DDUP
       stm32eforth.s:1172   .inflash.dictinary:00000000000002a4 CA_DDUP
       stm32eforth.s:1172   .text:0000000000000364 DDUP
       stm32eforth.s:1172   .inflash.dictinary:00000000000002a8 LF_DPLUS
       stm32eforth.s:1172   .inflash.dictinary:00000000000002ac _DPLUS
       stm32eforth.s:1180   .inflash.dictinary:00000000000002b0 CA_DPLUS
       stm32eforth.s:1180   .text:0000000000000370 DPLUS
       stm32eforth.s:1180   .inflash.dictinary:00000000000002b4 LF_INVER
       stm32eforth.s:1180   .inflash.dictinary:00000000000002b8 _INVER
       stm32eforth.s:1191   .inflash.dictinary:00000000000002bc CA_INVER
       stm32eforth.s:1191   .text:0000000000000384 INVER
       stm32eforth.s:1191   .inflash.dictinary:00000000000002c0 LF_NEGAT
       stm32eforth.s:1191   .inflash.dictinary:00000000000002c4 _NEGAT
       stm32eforth.s:1197   .inflash.dictinary:00000000000002cc CA_NEGAT
       stm32eforth.s:1197   .text:000000000000038c NEGAT
       stm32eforth.s:1197   .inflash.dictinary:00000000000002d0 LF_ABSS
       stm32eforth.s:1197   .inflash.dictinary:00000000000002d4 _ABSS
       stm32eforth.s:1203   .inflash.dictinary:00000000000002d8 CA_ABSS
       stm32eforth.s:1203   .inflash.dictinary:00000000000002dc LF_ZEQUAL
       stm32eforth.s:1203   .inflash.dictinary:00000000000002e0 _ZEQUAL
       stm32eforth.s:1211   .inflash.dictinary:00000000000002e4 CA_ZEQUAL
       stm32eforth.s:1211   .text:00000000000003a0 ZEQUAL
       stm32eforth.s:1211   .inflash.dictinary:00000000000002e8 LF_EQUAL
       stm32eforth.s:1211   .inflash.dictinary:00000000000002ec _EQUAL
       stm32eforth.s:1220   .inflash.dictinary:00000000000002f0 CA_EQUAL
       stm32eforth.s:1220   .text:00000000000003b0 EQUAL
       stm32eforth.s:1220   .inflash.dictinary:00000000000002f4 LF_ULESS
       stm32eforth.s:1220   .inflash.dictinary:00000000000002f8 _ULESS
       stm32eforth.s:1230   .inflash.dictinary:00000000000002fc CA_ULESS
       stm32eforth.s:1230   .text:00000000000003c0 ULESS
       stm32eforth.s:1230   .inflash.dictinary:0000000000000300 LF_LESS
       stm32eforth.s:1230   .inflash.dictinary:0000000000000304 _LESS
       stm32eforth.s:1240   .inflash.dictinary:0000000000000308 CA_LESS
       stm32eforth.s:1240   .text:00000000000003d0 LESS
       stm32eforth.s:1240   .inflash.dictinary:000000000000030c LF_GREAT
       stm32eforth.s:1240   .inflash.dictinary:0000000000000310 _GREAT
       stm32eforth.s:1250   .inflash.dictinary:0000000000000314 CA_GREAT
       stm32eforth.s:1250   .text:00000000000003e0 GREAT
       stm32eforth.s:1250   .inflash.dictinary:0000000000000318 LF_MAX
       stm32eforth.s:1250   .inflash.dictinary:000000000000031c _MAX
       stm32eforth.s:1260   .inflash.dictinary:0000000000000320 CA_MAX
       stm32eforth.s:1260   .text:00000000000003f0 MAX
       stm32eforth.s:1260   .inflash.dictinary:0000000000000324 LF_MIN
       stm32eforth.s:1260   .inflash.dictinary:0000000000000328 _MIN
       stm32eforth.s:1269   .inflash.dictinary:000000000000032c CA_MIN
       stm32eforth.s:1269   .text:00000000000003fc MIN
       stm32eforth.s:1269   .inflash.dictinary:0000000000000330 LF_PSTOR
       stm32eforth.s:1269   .inflash.dictinary:0000000000000334 _PSTOR
       stm32eforth.s:1278   .inflash.dictinary:0000000000000338 CA_PSTOR
       stm32eforth.s:1278   .text:0000000000000408 PSTOR
       stm32eforth.s:1278   .inflash.dictinary:000000000000033c LF_DSTOR
       stm32eforth.s:1278   .inflash.dictinary:0000000000000340 _DSTOR
ARM GAS  stm32eforth.s 			page 93


       stm32eforth.s:1288   .inflash.dictinary:0000000000000344 CA_DSTOR
       stm32eforth.s:1288   .text:0000000000000418 DSTOR
       stm32eforth.s:1288   .inflash.dictinary:0000000000000348 LF_DAT
       stm32eforth.s:1288   .inflash.dictinary:000000000000034c _DAT
       stm32eforth.s:1298   .inflash.dictinary:0000000000000350 CA_DAT
       stm32eforth.s:1298   .text:000000000000042c DAT
       stm32eforth.s:1298   .inflash.dictinary:0000000000000354 LF_COUNT
       stm32eforth.s:1298   .inflash.dictinary:0000000000000358 _COUNT
       stm32eforth.s:1306   .inflash.dictinary:0000000000000360 CA_COUNT
       stm32eforth.s:1306   .text:0000000000000438 COUNT
       stm32eforth.s:1306   .inflash.dictinary:0000000000000364 LF_DNEGA
       stm32eforth.s:1306   .inflash.dictinary:0000000000000368 _DNEGA
       stm32eforth.s:1314   .inflash.dictinary:0000000000000370 CA_DNEGA
       stm32eforth.s:1314   .text:0000000000000444 DNEGA
       stm32eforth.s:1332   .text:0000000000000454 DOVAR
       stm32eforth.s:1344   .text:0000000000000460 DOCON
       stm32eforth.s:1314   .inflash.dictinary:0000000000000374 LF_SEED
       stm32eforth.s:1314   .inflash.dictinary:0000000000000378 _SEED
       stm32eforth.s:1355   .inflash.dictinary:0000000000000380 CA_SEED
       stm32eforth.s:1355   .inflash.dictinary:0000000000000384 LF_MSEC
       stm32eforth.s:1355   .inflash.dictinary:0000000000000388 _MSEC
       stm32eforth.s:1362   .inflash.dictinary:0000000000000390 CA_MSEC
       stm32eforth.s:1362   .text:0000000000000478 MSEC
       stm32eforth.s:1362   .inflash.dictinary:0000000000000394 LF_TIMER
       stm32eforth.s:1362   .inflash.dictinary:0000000000000398 _TIMER
       stm32eforth.s:1369   .inflash.dictinary:00000000000003a0 CA_TIMER
       stm32eforth.s:1369   .inflash.dictinary:00000000000003a4 LF_TBOOT
       stm32eforth.s:1369   .inflash.dictinary:00000000000003a8 _TBOOT
       stm32eforth.s:1376   .inflash.dictinary:00000000000003b0 CA_TBOOT
       stm32eforth.s:1376   .text:0000000000000490 TBOOT
       stm32eforth.s:1376   .inflash.dictinary:00000000000003b4 LF_BASE
       stm32eforth.s:1376   .inflash.dictinary:00000000000003b8 _BASE
       stm32eforth.s:1383   .inflash.dictinary:00000000000003c0 CA_BASE
       stm32eforth.s:1383   .text:000000000000049c BASE
       stm32eforth.s:1395   .text:00000000000004a6 TEMP
       stm32eforth.s:1383   .inflash.dictinary:00000000000003c4 LF_SPAN
       stm32eforth.s:1383   .inflash.dictinary:00000000000003c8 _SPAN
       stm32eforth.s:1402   .inflash.dictinary:00000000000003d0 CA_SPAN
       stm32eforth.s:1402   .text:00000000000004b0 SPAN
       stm32eforth.s:1402   .inflash.dictinary:00000000000003d4 LF_INN
       stm32eforth.s:1402   .inflash.dictinary:00000000000003d8 _INN
       stm32eforth.s:1409   .inflash.dictinary:00000000000003dc CA_INN
       stm32eforth.s:1409   .text:00000000000004bc INN
       stm32eforth.s:1409   .inflash.dictinary:00000000000003e0 LF_NTIB
       stm32eforth.s:1409   .inflash.dictinary:00000000000003e4 _NTIB
       stm32eforth.s:1416   .inflash.dictinary:00000000000003ec CA_NTIB
       stm32eforth.s:1416   .text:00000000000004c8 NTIB
       stm32eforth.s:1416   .inflash.dictinary:00000000000003f0 LF_TEVAL
       stm32eforth.s:1416   .inflash.dictinary:00000000000003f4 _TEVAL
       stm32eforth.s:1423   .inflash.dictinary:00000000000003fc CA_TEVAL
       stm32eforth.s:1423   .text:00000000000004d4 TEVAL
       stm32eforth.s:1423   .inflash.dictinary:0000000000000400 LF_HLD
       stm32eforth.s:1423   .inflash.dictinary:0000000000000404 _HLD
       stm32eforth.s:1430   .inflash.dictinary:0000000000000408 CA_HLD
       stm32eforth.s:1430   .text:00000000000004e0 HLD
       stm32eforth.s:1430   .inflash.dictinary:000000000000040c LF_CNTXT
       stm32eforth.s:1430   .inflash.dictinary:0000000000000410 _CNTXT
ARM GAS  stm32eforth.s 			page 94


       stm32eforth.s:1437   .inflash.dictinary:0000000000000418 CA_CNTXT
       stm32eforth.s:1437   .text:00000000000004ec CNTXT
       stm32eforth.s:1438   .text:00000000000004ec CRRNT
       stm32eforth.s:1437   .inflash.dictinary:000000000000041c LF_CPP
       stm32eforth.s:1437   .inflash.dictinary:0000000000000420 _CPP
       stm32eforth.s:1445   .inflash.dictinary:0000000000000424 CA_CPP
       stm32eforth.s:1445   .text:00000000000004f8 CPP
       stm32eforth.s:1445   .inflash.dictinary:0000000000000428 LF_FCP
       stm32eforth.s:1445   .inflash.dictinary:000000000000042c _FCP
       stm32eforth.s:1452   .inflash.dictinary:0000000000000430 CA_FCP
       stm32eforth.s:1452   .text:0000000000000504 FCP
       stm32eforth.s:1452   .inflash.dictinary:0000000000000434 LF_LAST
       stm32eforth.s:1452   .inflash.dictinary:0000000000000438 _LAST
       stm32eforth.s:1459   .inflash.dictinary:0000000000000440 CA_LAST
       stm32eforth.s:1459   .text:0000000000000510 LAST
       stm32eforth.s:1459   .inflash.dictinary:0000000000000444 LF_USER_BEGIN
       stm32eforth.s:1459   .inflash.dictinary:0000000000000448 _USER_BEGIN
       stm32eforth.s:1470   .inflash.dictinary:0000000000000454 CA_USER_BEGIN
       stm32eforth.s:1470   .text:000000000000051c USER_BEGIN
       stm32eforth.s:1474   .text:0000000000000524 USR_BGN_ADR
       stm32eforth.s:1475   .text:0000000000000524 $d
       stm32eforth.s:1470   .inflash.dictinary:0000000000000458 LF_USER_END
       stm32eforth.s:1470   .inflash.dictinary:000000000000045c _USER_END
       stm32eforth.s:1479   .inflash.dictinary:0000000000000468 CA_USER_END
       stm32eforth.s:1479   .text:0000000000000528 USER_END
       stm32eforth.s:1479   .text:0000000000000528 $t
       stm32eforth.s:1479   .inflash.dictinary:000000000000046c LF_IMG_ADR
       stm32eforth.s:1479   .inflash.dictinary:0000000000000470 _IMG_ADR
       stm32eforth.s:1486   .inflash.dictinary:0000000000000478 CA_IMG_ADR
       stm32eforth.s:1486   .text:0000000000000538 IMG_ADR
       stm32eforth.s:1490   .text:0000000000000540 USR_IMG_ADR
       stm32eforth.s:1491   .text:0000000000000540 $d
       stm32eforth.s:4282   .user:0000000000000000 USER_SPACE
       stm32eforth.s:1486   .inflash.dictinary:000000000000047c LF_IMG_SIGN
       stm32eforth.s:1486   .inflash.dictinary:0000000000000480 _IMG_SIGN
       stm32eforth.s:1495   .inflash.dictinary:000000000000048c CA_IMG_SIGN
       stm32eforth.s:1495   .text:0000000000000544 IMG_SIGN
       stm32eforth.s:1495   .text:0000000000000544 $t
       stm32eforth.s:1495   .inflash.dictinary:0000000000000490 LF_WITHI
       stm32eforth.s:1495   .inflash.dictinary:0000000000000494 _WITHI
       stm32eforth.s:1506   .inflash.dictinary:000000000000049c CA_WITHI
       stm32eforth.s:1506   .text:0000000000000550 WITHI
       stm32eforth.s:1506   .inflash.dictinary:00000000000004a0 LF_UMMOD
       stm32eforth.s:1506   .inflash.dictinary:00000000000004a4 _UMMOD
       stm32eforth.s:1520   .inflash.dictinary:00000000000004ac CA_UMMOD
       stm32eforth.s:1520   .text:0000000000000570 UMMOD
       stm32eforth.s:1524   .text:000000000000057a UMMOD0
       stm32eforth.s:1531   .text:000000000000058a UMMOD1
       stm32eforth.s:1537   .text:0000000000000594 UMMOD2
       stm32eforth.s:1520   .inflash.dictinary:00000000000004b0 LF_MSMOD
       stm32eforth.s:1520   .inflash.dictinary:00000000000004b4 _MSMOD
       stm32eforth.s:1546   .inflash.dictinary:00000000000004bc CA_MSMOD
       stm32eforth.s:1546   .text:00000000000005a0 MSMOD
       stm32eforth.s:1553   .text:00000000000005b8 $d
       stm32eforth.s:1558   .text:00000000000005cc MMOD1
       stm32eforth.s:1554   .text:00000000000005bc $t
       stm32eforth.s:1563   .text:00000000000005dc $d
ARM GAS  stm32eforth.s 			page 95


       stm32eforth.s:1566   .text:00000000000005e8 MMOD2
       stm32eforth.s:1564   .text:00000000000005e0 $t
       stm32eforth.s:1571   .text:00000000000005f8 $d
       stm32eforth.s:1575   .text:0000000000000608 MMOD3
       stm32eforth.s:1572   .text:00000000000005fc $t
       stm32eforth.s:1546   .inflash.dictinary:00000000000004c0 LF_SLMOD
       stm32eforth.s:1546   .inflash.dictinary:00000000000004c4 _SLMOD
       stm32eforth.s:1580   .inflash.dictinary:00000000000004cc CA_SLMOD
       stm32eforth.s:1580   .text:000000000000060c SLMOD
       stm32eforth.s:1580   .inflash.dictinary:00000000000004d0 LF_MODD
       stm32eforth.s:1580   .inflash.dictinary:00000000000004d4 _MODD
       stm32eforth.s:1590   .inflash.dictinary:00000000000004dc CA_MODD
       stm32eforth.s:1590   .inflash.dictinary:00000000000004e0 LF_SLASH
       stm32eforth.s:1590   .inflash.dictinary:00000000000004e4 _SLASH
       stm32eforth.s:1598   .inflash.dictinary:00000000000004e8 CA_SLASH
       stm32eforth.s:1598   .text:0000000000000634 SLASH
       stm32eforth.s:1598   .inflash.dictinary:00000000000004ec LF_SSMOD
       stm32eforth.s:1598   .inflash.dictinary:00000000000004f0 _SSMOD
       stm32eforth.s:1607   .inflash.dictinary:00000000000004f8 CA_SSMOD
       stm32eforth.s:1607   .text:0000000000000648 SSMOD
       stm32eforth.s:1607   .inflash.dictinary:00000000000004fc LF_STASL
       stm32eforth.s:1607   .inflash.dictinary:0000000000000500 _STASL
       stm32eforth.s:1617   .inflash.dictinary:0000000000000504 CA_STASL
       stm32eforth.s:1617   .text:0000000000000660 STASL
       stm32eforth.s:1617   .inflash.dictinary:0000000000000508 LF_ALGND
       stm32eforth.s:1617   .inflash.dictinary:000000000000050c _ALGND
       stm32eforth.s:1629   .inflash.dictinary:0000000000000514 CA_ALGND
       stm32eforth.s:1629   .text:0000000000000674 ALGND
       stm32eforth.s:1629   .inflash.dictinary:0000000000000518 LF_TCHAR
       stm32eforth.s:1629   .inflash.dictinary:000000000000051c _TCHAR
       stm32eforth.s:1637   .inflash.dictinary:0000000000000524 CA_TCHAR
       stm32eforth.s:1637   .text:0000000000000684 TCHAR
       stm32eforth.s:1639   .text:000000000000068c $d
       stm32eforth.s:1640   .text:0000000000000690 $t
       stm32eforth.s:1643   .text:00000000000006a0 $d
       stm32eforth.s:1644   .text:00000000000006a4 $t
       stm32eforth.s:1647   .text:00000000000006b0 $d
       stm32eforth.s:1650   .text:00000000000006c0 TCHA1
       stm32eforth.s:1648   .text:00000000000006b4 $t
       stm32eforth.s:1649   .text:00000000000006bc $d
       stm32eforth.s:1651   .text:00000000000006c0 $t
       stm32eforth.s:1637   .inflash.dictinary:0000000000000528 LF_DEPTH
       stm32eforth.s:1637   .inflash.dictinary:000000000000052c _DEPTH
       stm32eforth.s:1655   .inflash.dictinary:0000000000000534 CA_DEPTH
       stm32eforth.s:1655   .text:00000000000006c4 DEPTH
       stm32eforth.s:1655   .inflash.dictinary:0000000000000538 LF_PICK
       stm32eforth.s:1655   .inflash.dictinary:000000000000053c _PICK
       stm32eforth.s:1664   .inflash.dictinary:0000000000000544 CA_PICK
       stm32eforth.s:1664   .text:00000000000006dc PICK
       stm32eforth.s:1664   .inflash.dictinary:0000000000000548 LF_HERE
       stm32eforth.s:1664   .inflash.dictinary:000000000000054c _HERE
       stm32eforth.s:1678   .inflash.dictinary:0000000000000554 CA_HERE
       stm32eforth.s:1678   .text:00000000000006f8 HERE
       stm32eforth.s:1678   .inflash.dictinary:0000000000000558 LF_PAD
       stm32eforth.s:1678   .inflash.dictinary:000000000000055c _PAD
       stm32eforth.s:1686   .inflash.dictinary:0000000000000560 CA_PAD
       stm32eforth.s:1686   .text:0000000000000708 PAD
ARM GAS  stm32eforth.s 			page 96


       stm32eforth.s:1686   .inflash.dictinary:0000000000000564 LF_TIB
       stm32eforth.s:1686   .inflash.dictinary:0000000000000568 _TIB
       stm32eforth.s:1694   .inflash.dictinary:000000000000056c CA_TIB
       stm32eforth.s:1694   .text:0000000000000718 TIB
       stm32eforth.s:1694   .inflash.dictinary:0000000000000570 LF_ATEXE
       stm32eforth.s:1694   .inflash.dictinary:0000000000000574 _ATEXE
       stm32eforth.s:1701   .inflash.dictinary:0000000000000580 CA_ATEXE
       stm32eforth.s:1701   .text:0000000000000720 ATEXE
       stm32eforth.s:1701   .inflash.dictinary:0000000000000584 LF_CMOVE
       stm32eforth.s:1701   .inflash.dictinary:0000000000000588 _CMOVE
       stm32eforth.s:1712   .inflash.dictinary:0000000000000590 CA_CMOVE
       stm32eforth.s:1712   .text:0000000000000734 CMOVE
       stm32eforth.s:1719   .text:0000000000000746 CMOV1
       stm32eforth.s:1716   .text:000000000000073e CMOV0
       stm32eforth.s:1724   .text:0000000000000750 CMOV2
       stm32eforth.s:1712   .inflash.dictinary:0000000000000594 LF_MOVE
       stm32eforth.s:1712   .inflash.dictinary:0000000000000598 _MOVE
       stm32eforth.s:1730   .inflash.dictinary:00000000000005a0 CA_MOVE
       stm32eforth.s:1730   .text:0000000000000758 MOVE
       stm32eforth.s:1738   .text:000000000000076e MOVE1
       stm32eforth.s:1735   .text:0000000000000766 MOVE0
       stm32eforth.s:1743   .text:0000000000000778 MOVE2
       stm32eforth.s:1730   .inflash.dictinary:00000000000005a4 LF_FILL
       stm32eforth.s:1730   .inflash.dictinary:00000000000005a8 _FILL
       stm32eforth.s:1749   .inflash.dictinary:00000000000005b0 CA_FILL
       stm32eforth.s:1749   .text:0000000000000780 FILL
       stm32eforth.s:1752   .text:0000000000000788 FILL0
       stm32eforth.s:1755   .text:000000000000078c FILL1
       stm32eforth.s:1761   .text:000000000000079a FILL2
       stm32eforth.s:1749   .inflash.dictinary:00000000000005b4 LF_PACKS
       stm32eforth.s:1749   .inflash.dictinary:00000000000005b8 _PACKS
       stm32eforth.s:1767   .inflash.dictinary:00000000000005c0 CA_PACKS
       stm32eforth.s:1767   .text:00000000000007a0 PACKS
       stm32eforth.s:1775   .text:00000000000007c0 $d
       stm32eforth.s:1776   .text:00000000000007c4 $t
       stm32eforth.s:1777   .text:00000000000007cc $d
       stm32eforth.s:1778   .text:00000000000007d0 $t
       stm32eforth.s:1767   .inflash.dictinary:00000000000005c4 LF_DIGIT
       stm32eforth.s:1767   .inflash.dictinary:00000000000005c8 _DIGIT
       stm32eforth.s:1794   .inflash.dictinary:00000000000005d0 CA_DIGIT
       stm32eforth.s:1794   .text:00000000000007f8 DIGIT
       stm32eforth.s:1796   .text:0000000000000800 $d
       stm32eforth.s:1797   .text:0000000000000804 $t
       stm32eforth.s:1794   .inflash.dictinary:00000000000005d4 LF_EXTRC
       stm32eforth.s:1794   .inflash.dictinary:00000000000005d8 _EXTRC
       stm32eforth.s:1806   .inflash.dictinary:00000000000005e0 CA_EXTRC
       stm32eforth.s:1806   .text:000000000000081c EXTRC
       stm32eforth.s:1808   .text:0000000000000824 $d
       stm32eforth.s:1809   .text:0000000000000828 $t
       stm32eforth.s:1806   .inflash.dictinary:00000000000005e4 LF_BDIGS
       stm32eforth.s:1806   .inflash.dictinary:00000000000005e8 _BDIGS
       stm32eforth.s:1817   .inflash.dictinary:00000000000005ec CA_BDIGS
       stm32eforth.s:1817   .text:000000000000083c BDIGS
       stm32eforth.s:1817   .inflash.dictinary:00000000000005f0 LF_HOLD
       stm32eforth.s:1817   .inflash.dictinary:00000000000005f4 _HOLD
       stm32eforth.s:1826   .inflash.dictinary:00000000000005fc CA_HOLD
       stm32eforth.s:1826   .text:0000000000000850 HOLD
ARM GAS  stm32eforth.s 			page 97


       stm32eforth.s:1826   .inflash.dictinary:0000000000000600 LF_DIG
       stm32eforth.s:1826   .inflash.dictinary:0000000000000604 _DIG
       stm32eforth.s:1839   .inflash.dictinary:0000000000000608 CA_DIG
       stm32eforth.s:1839   .text:0000000000000874 DIG
       stm32eforth.s:1839   .inflash.dictinary:000000000000060c LF_DIGS
       stm32eforth.s:1839   .inflash.dictinary:0000000000000610 _DIGS
       stm32eforth.s:1849   .inflash.dictinary:0000000000000614 CA_DIGS
       stm32eforth.s:1849   .text:000000000000088c DIGS
       stm32eforth.s:1851   .text:0000000000000890 DIGS1
       stm32eforth.s:1855   .text:000000000000089c $d
       stm32eforth.s:1857   .text:00000000000008a2 DIGS2
       stm32eforth.s:1856   .text:00000000000008a0 $t
       stm32eforth.s:1849   .inflash.dictinary:0000000000000618 LF_SIGN
       stm32eforth.s:1849   .inflash.dictinary:000000000000061c _SIGN
       stm32eforth.s:1862   .inflash.dictinary:0000000000000624 CA_SIGN
       stm32eforth.s:1862   .text:00000000000008a8 SIGN
       stm32eforth.s:1866   .text:00000000000008b4 $d
       stm32eforth.s:1869   .text:00000000000008c4 SIGN1
       stm32eforth.s:1867   .text:00000000000008b8 $t
       stm32eforth.s:1867   .text:00000000000008bc $d
       stm32eforth.s:1868   .text:00000000000008c0 $t
       stm32eforth.s:1862   .inflash.dictinary:0000000000000628 LF_EDIGS
       stm32eforth.s:1862   .inflash.dictinary:000000000000062c _EDIGS
       stm32eforth.s:1874   .inflash.dictinary:0000000000000630 CA_EDIGS
       stm32eforth.s:1874   .text:00000000000008c8 EDIGS
       stm32eforth.s:1891   .text:00000000000008e8 STRR
       stm32eforth.s:1874   .inflash.dictinary:0000000000000634 LF_HEX
       stm32eforth.s:1874   .inflash.dictinary:0000000000000638 _HEX
       stm32eforth.s:1905   .inflash.dictinary:000000000000063c CA_HEX
       stm32eforth.s:1905   .text:0000000000000910 HEX
       stm32eforth.s:1907   .text:0000000000000918 $d
       stm32eforth.s:1908   .text:000000000000091c $t
       stm32eforth.s:1905   .inflash.dictinary:0000000000000640 LF_DECIM
       stm32eforth.s:1905   .inflash.dictinary:0000000000000644 _DECIM
       stm32eforth.s:1914   .inflash.dictinary:000000000000064c CA_DECIM
       stm32eforth.s:1914   .text:0000000000000928 DECIM
       stm32eforth.s:1916   .text:0000000000000930 $d
       stm32eforth.s:1917   .text:0000000000000934 $t
       stm32eforth.s:1914   .inflash.dictinary:0000000000000650 LF_DIGTQ
       stm32eforth.s:1914   .inflash.dictinary:0000000000000654 _DIGTQ
       stm32eforth.s:1926   .inflash.dictinary:000000000000065c CA_DIGTQ
       stm32eforth.s:1926   .text:0000000000000940 DIGTQ
       stm32eforth.s:1929   .text:000000000000094c $d
       stm32eforth.s:1930   .text:0000000000000950 $t
       stm32eforth.s:1931   .text:0000000000000958 $d
       stm32eforth.s:1932   .text:000000000000095c $t
       stm32eforth.s:1935   .text:0000000000000968 $d
       stm32eforth.s:1942   .text:000000000000098c DGTQ1
       stm32eforth.s:1936   .text:000000000000096c $t
       stm32eforth.s:1936   .text:0000000000000970 $d
       stm32eforth.s:1937   .text:0000000000000974 $t
       stm32eforth.s:1939   .text:0000000000000980 $d
       stm32eforth.s:1940   .text:0000000000000984 $t
       stm32eforth.s:1926   .inflash.dictinary:0000000000000660 LF_NUMBQ
       stm32eforth.s:1926   .inflash.dictinary:0000000000000664 _NUMBQ
       stm32eforth.s:1950   .inflash.dictinary:000000000000066c CA_NUMBQ
       stm32eforth.s:1950   .text:000000000000099c NUMBQ
ARM GAS  stm32eforth.s 			page 98


       stm32eforth.s:1955   .text:00000000000009b0 $d
       stm32eforth.s:1956   .text:00000000000009b4 $t
       stm32eforth.s:1960   .text:00000000000009c8 $d
       stm32eforth.s:1961   .text:00000000000009cc $t
       stm32eforth.s:1963   .text:00000000000009d4 $d
       stm32eforth.s:1969   .text:00000000000009ec NUMQ1
       stm32eforth.s:1964   .text:00000000000009d8 $t
       stm32eforth.s:1972   .text:00000000000009f8 $d
       stm32eforth.s:1973   .text:00000000000009fc $t
       stm32eforth.s:1983   .text:0000000000000a24 $d
       stm32eforth.s:2021   .text:0000000000000ab0 NUMQ6
       stm32eforth.s:1984   .text:0000000000000a28 $t
       stm32eforth.s:1986   .text:0000000000000a30 NUMQ2
       stm32eforth.s:1994   .text:0000000000000a4c $d
       stm32eforth.s:2013   .text:0000000000000a94 NUMQ4
       stm32eforth.s:1995   .text:0000000000000a50 $t
       stm32eforth.s:2003   .text:0000000000000a70 $d
       stm32eforth.s:2004   .text:0000000000000a74 $t
       stm32eforth.s:2008   .text:0000000000000a84 $d
       stm32eforth.s:2010   .text:0000000000000a8c NUMQ3
       stm32eforth.s:2009   .text:0000000000000a88 $t
       stm32eforth.s:2019   .text:0000000000000aac NUMQ5
       stm32eforth.s:2018   .text:0000000000000aa8 $d
       stm32eforth.s:2020   .text:0000000000000aac $t
       stm32eforth.s:1950   .inflash.dictinary:0000000000000670 LF_KEY
       stm32eforth.s:1950   .inflash.dictinary:0000000000000674 _KEY
       stm32eforth.s:2034   .inflash.dictinary:0000000000000678 CA_KEY
       stm32eforth.s:2034   .text:0000000000000ac8 KEY
       stm32eforth.s:2036   .text:0000000000000acc KEY1
       stm32eforth.s:2039   .text:0000000000000ad4 $d
       stm32eforth.s:2040   .text:0000000000000ad8 $t
       stm32eforth.s:2034   .inflash.dictinary:000000000000067c LF_SPACE
       stm32eforth.s:2034   .inflash.dictinary:0000000000000680 _SPACE
       stm32eforth.s:2044   .inflash.dictinary:0000000000000688 CA_SPACE
       stm32eforth.s:2044   .text:0000000000000adc SPACE
       stm32eforth.s:2044   .inflash.dictinary:000000000000068c LF_SPACS
       stm32eforth.s:2044   .inflash.dictinary:0000000000000690 _SPACS
       stm32eforth.s:2052   .inflash.dictinary:0000000000000698 CA_SPACS
       stm32eforth.s:2052   .text:0000000000000aec SPACS
       stm32eforth.s:2054   .text:0000000000000af4 $d
       stm32eforth.s:2055   .text:0000000000000af8 $t
       stm32eforth.s:2060   .text:0000000000000b08 CHAR2
       stm32eforth.s:2058   .text:0000000000000b04 CHAR1
       stm32eforth.s:2062   .text:0000000000000b0c $d
       stm32eforth.s:2063   .text:0000000000000b10 $t
       stm32eforth.s:2052   .inflash.dictinary:000000000000069c LF_TYPEE
       stm32eforth.s:2052   .inflash.dictinary:00000000000006a0 _TYPEE
       stm32eforth.s:2067   .inflash.dictinary:00000000000006a8 CA_TYPEE
       stm32eforth.s:2067   .text:0000000000000b14 TYPEE
       stm32eforth.s:2075   .text:0000000000000b2c TYPE2
       stm32eforth.s:2071   .text:0000000000000b20 TYPE1
       stm32eforth.s:2077   .text:0000000000000b30 $d
       stm32eforth.s:2078   .text:0000000000000b34 $t
       stm32eforth.s:2067   .inflash.dictinary:00000000000006ac LF_CR
       stm32eforth.s:2067   .inflash.dictinary:00000000000006b0 _CR
       stm32eforth.s:2083   .inflash.dictinary:00000000000006b4 CA_CR
       stm32eforth.s:2083   .text:0000000000000b3c CR
ARM GAS  stm32eforth.s 			page 99


       stm32eforth.s:2085   .text:0000000000000b44 $d
       stm32eforth.s:2086   .text:0000000000000b48 $t
       stm32eforth.s:2087   .text:0000000000000b50 $d
       stm32eforth.s:2088   .text:0000000000000b54 $t
       stm32eforth.s:2099   .text:0000000000000b5c DOSTR
       stm32eforth.s:2122   .text:0000000000000b90 STRQP
       stm32eforth.s:2134   .text:0000000000000b9c DOTST
       stm32eforth.s:2147   .text:0000000000000bac DOTQP
       stm32eforth.s:2083   .inflash.dictinary:00000000000006b8 LF_DOTR
       stm32eforth.s:2083   .inflash.dictinary:00000000000006bc _DOTR
       stm32eforth.s:2155   .inflash.dictinary:00000000000006c0 CA_DOTR
       stm32eforth.s:2155   .text:0000000000000bbc DOTR
       stm32eforth.s:2155   .inflash.dictinary:00000000000006c4 LF_UDOTR
       stm32eforth.s:2155   .inflash.dictinary:00000000000006c8 _UDOTR
       stm32eforth.s:2168   .inflash.dictinary:00000000000006cc CA_UDOTR
       stm32eforth.s:2168   .text:0000000000000be0 UDOTR
       stm32eforth.s:2168   .inflash.dictinary:00000000000006d0 LF_UDOT
       stm32eforth.s:2168   .inflash.dictinary:00000000000006d4 _UDOT
       stm32eforth.s:2183   .inflash.dictinary:00000000000006d8 CA_UDOT
       stm32eforth.s:2183   .text:0000000000000c0c UDOT
       stm32eforth.s:2183   .inflash.dictinary:00000000000006dc LF_HDOT
       stm32eforth.s:2183   .inflash.dictinary:00000000000006e0 _HDOT
       stm32eforth.s:2194   .inflash.dictinary:00000000000006e4 CA_HDOT
       stm32eforth.s:2194   .text:0000000000000c28 HDOT
       stm32eforth.s:2194   .inflash.dictinary:00000000000006e8 LF_DOT
       stm32eforth.s:2194   .inflash.dictinary:00000000000006ec _DOT
       stm32eforth.s:2209   .inflash.dictinary:00000000000006f0 CA_DOT
       stm32eforth.s:2209   .text:0000000000000c50 DOT
       stm32eforth.s:2213   .text:0000000000000c60 $d
       stm32eforth.s:2214   .text:0000000000000c64 $t
       stm32eforth.s:2216   .text:0000000000000c6c $d
       stm32eforth.s:2219   .text:0000000000000c78 DOT1
       stm32eforth.s:2217   .text:0000000000000c70 $t
       stm32eforth.s:2209   .inflash.dictinary:00000000000006f4 LF_QUEST
       stm32eforth.s:2209   .inflash.dictinary:00000000000006f8 _QUEST
       stm32eforth.s:2227   .inflash.dictinary:00000000000006fc CA_QUEST
       stm32eforth.s:2227   .text:0000000000000c88 QUEST
       stm32eforth.s:2243   .text:0000000000000c98 PARS
       stm32eforth.s:2251   .text:0000000000000cb4 $d
       stm32eforth.s:2318   .text:0000000000000da6 PARS8
       stm32eforth.s:2252   .text:0000000000000cb8 $t
       stm32eforth.s:2258   .text:0000000000000cd0 $d
       stm32eforth.s:2279   .text:0000000000000d20 PARS3
       stm32eforth.s:2259   .text:0000000000000cd4 $t
       stm32eforth.s:2260   .text:0000000000000cd8 PARS1
       stm32eforth.s:2268   .text:0000000000000cf4 $d
       stm32eforth.s:2277   .text:0000000000000d1c PARS2
       stm32eforth.s:2269   .text:0000000000000cf8 $t
       stm32eforth.s:2271   .text:0000000000000d00 $d
       stm32eforth.s:2272   .text:0000000000000d04 $t
       stm32eforth.s:2274   .text:0000000000000d10 $d
       stm32eforth.s:2275   .text:0000000000000d14 $t
       stm32eforth.s:2283   .text:0000000000000d2c PARS4
       stm32eforth.s:2294   .text:0000000000000d54 $d
       stm32eforth.s:2296   .text:0000000000000d5c PARS5
       stm32eforth.s:2295   .text:0000000000000d58 $t
       stm32eforth.s:2298   .text:0000000000000d60 $d
ARM GAS  stm32eforth.s 			page 100


       stm32eforth.s:2305   .text:0000000000000d7a PARS6
       stm32eforth.s:2299   .text:0000000000000d64 $t
       stm32eforth.s:2301   .text:0000000000000d6c $d
       stm32eforth.s:2302   .text:0000000000000d70 $t
       stm32eforth.s:2311   .text:0000000000000d8e PARS7
       stm32eforth.s:2227   .inflash.dictinary:0000000000000700 LF_PARSE
       stm32eforth.s:2227   .inflash.dictinary:0000000000000704 _PARSE
       stm32eforth.s:2326   .inflash.dictinary:000000000000070c CA_PARSE
       stm32eforth.s:2326   .text:0000000000000db8 PARSE
       stm32eforth.s:2326   .inflash.dictinary:0000000000000710 LF_DOTPR
       stm32eforth.s:2326   .inflash.dictinary:0000000000000714 _DOTPR
       stm32eforth.s:2346   .inflash.dictinary:0000000000000718 CA_DOTPR
       stm32eforth.s:2346   .text:0000000000000df8 DOTPR
       stm32eforth.s:2348   .text:0000000000000e00 $d
       stm32eforth.s:2349   .text:0000000000000e04 $t
       stm32eforth.s:2346   .inflash.dictinary:000000000000071c LF_PAREN
       stm32eforth.s:2346   .inflash.dictinary:0000000000000720 _PAREN
       stm32eforth.s:2355   .inflash.dictinary:0000000000000724 CA_PAREN
       stm32eforth.s:2355   .text:0000000000000e10 PAREN
       stm32eforth.s:2357   .text:0000000000000e18 $d
       stm32eforth.s:2358   .text:0000000000000e1c $t
       stm32eforth.s:2355   .inflash.dictinary:0000000000000728 LF_BKSLA
       stm32eforth.s:2355   .inflash.dictinary:000000000000072c _BKSLA
       stm32eforth.s:2364   .inflash.dictinary:0000000000000730 CA_BKSLA
       stm32eforth.s:2364   .text:0000000000000e28 BKSLA
       stm32eforth.s:2364   .inflash.dictinary:0000000000000734 LF_CAHR
       stm32eforth.s:2364   .inflash.dictinary:0000000000000738 _CAHR
       stm32eforth.s:2374   .inflash.dictinary:0000000000000740 CA_CAHR
       stm32eforth.s:2374   .text:0000000000000e40 CAHR
       stm32eforth.s:2374   .inflash.dictinary:0000000000000744 LF_WORDD
       stm32eforth.s:2374   .inflash.dictinary:0000000000000748 _WORDD
       stm32eforth.s:2384   .inflash.dictinary:0000000000000750 CA_WORDD
       stm32eforth.s:2384   .text:0000000000000e58 WORDD
       stm32eforth.s:2384   .inflash.dictinary:0000000000000754 LF_TOKEN
       stm32eforth.s:2384   .inflash.dictinary:0000000000000758 _TOKEN
       stm32eforth.s:2394   .inflash.dictinary:0000000000000760 CA_TOKEN
       stm32eforth.s:2394   .text:0000000000000e70 TOKEN
       stm32eforth.s:2394   .inflash.dictinary:0000000000000764 LF_TOCFA
       stm32eforth.s:2394   .inflash.dictinary:0000000000000768 _TOCFA
       stm32eforth.s:2405   .inflash.dictinary:0000000000000770 CA_TOCFA
       stm32eforth.s:2405   .text:0000000000000e80 TOCFA
       stm32eforth.s:2408   .text:0000000000000e8c $d
       stm32eforth.s:2409   .text:0000000000000e90 $t
       stm32eforth.s:2405   .inflash.dictinary:0000000000000774 LF_NAMET
       stm32eforth.s:2405   .inflash.dictinary:0000000000000778 _NAMET
       stm32eforth.s:2416   .inflash.dictinary:0000000000000780 CA_NAMET
       stm32eforth.s:2416   .text:0000000000000ea0 NAMET
       stm32eforth.s:2416   .inflash.dictinary:0000000000000784 LF_SAMEQ
       stm32eforth.s:2416   .inflash.dictinary:0000000000000788 _SAMEQ
       stm32eforth.s:2430   .inflash.dictinary:0000000000000790 CA_SAMEQ
       stm32eforth.s:2430   .text:0000000000000eb0 SAMEQ
       stm32eforth.s:2450   .text:0000000000000ef8 SAME2
       stm32eforth.s:2434   .text:0000000000000ebc SAME1
       stm32eforth.s:2446   .text:0000000000000ee8 $d
       stm32eforth.s:2447   .text:0000000000000eec $t
       stm32eforth.s:2452   .text:0000000000000efc $d
       stm32eforth.s:2453   .text:0000000000000f00 $t
ARM GAS  stm32eforth.s 			page 101


       stm32eforth.s:2453   .text:0000000000000f04 $d
       stm32eforth.s:2454   .text:0000000000000f08 $t
       stm32eforth.s:2466   .text:0000000000000f0c FIND
       stm32eforth.s:2475   .text:0000000000000f2c FIND1
       stm32eforth.s:2478   .text:0000000000000f34 $d
       stm32eforth.s:2497   .text:0000000000000f7c FIND6
       stm32eforth.s:2479   .text:0000000000000f38 $t
       stm32eforth.s:2481   .text:0000000000000f44 $d
       stm32eforth.s:2482   .text:0000000000000f48 $t
       stm32eforth.s:2486   .text:0000000000000f58 $d
       stm32eforth.s:2490   .text:0000000000000f68 FIND2
       stm32eforth.s:2487   .text:0000000000000f5c $t
       stm32eforth.s:2495   .text:0000000000000f78 FIND3
       stm32eforth.s:2504   .text:0000000000000f94 FIND4
       stm32eforth.s:2506   .text:0000000000000f98 $d
       stm32eforth.s:2511   .text:0000000000000fac FIND5
       stm32eforth.s:2507   .text:0000000000000f9c $t
       stm32eforth.s:2430   .inflash.dictinary:0000000000000794 LF_NAMEQ
       stm32eforth.s:2430   .inflash.dictinary:0000000000000798 _NAMEQ
       stm32eforth.s:2524   .inflash.dictinary:00000000000007a0 CA_NAMEQ
       stm32eforth.s:2524   .text:0000000000000fd0 NAMEQ
       stm32eforth.s:2541   .text:0000000000000fe4 BKSP
       stm32eforth.s:2550   .text:0000000000001004 $d
       stm32eforth.s:2561   .text:000000000000102c BACK1
       stm32eforth.s:2551   .text:0000000000001008 $t
       stm32eforth.s:2551   .text:000000000000100c $d
       stm32eforth.s:2552   .text:0000000000001010 $t
       stm32eforth.s:2558   .text:0000000000001024 $d
       stm32eforth.s:2559   .text:0000000000001028 $t
       stm32eforth.s:2571   .text:0000000000001030 TAP
       stm32eforth.s:2588   .text:000000000000104c KTAP
       stm32eforth.s:2589   .text:000000000000104c TTAP
       stm32eforth.s:2592   .text:0000000000001058 $d
       stm32eforth.s:2593   .text:000000000000105c $t
       stm32eforth.s:2595   .text:0000000000001064 $d
       stm32eforth.s:2607   .text:0000000000001094 KTAP2
       stm32eforth.s:2596   .text:0000000000001068 $t
       stm32eforth.s:2596   .text:000000000000106c $d
       stm32eforth.s:2597   .text:0000000000001070 $t
       stm32eforth.s:2599   .text:0000000000001078 $d
       stm32eforth.s:2604   .text:000000000000108c KTAP1
       stm32eforth.s:2600   .text:000000000000107c $t
       stm32eforth.s:2603   .text:0000000000001088 $d
       stm32eforth.s:2605   .text:000000000000108c $t
       stm32eforth.s:2524   .inflash.dictinary:00000000000007a4 LF_ACCEP
       stm32eforth.s:2524   .inflash.dictinary:00000000000007a8 _ACCEP
       stm32eforth.s:2616   .inflash.dictinary:00000000000007b0 CA_ACCEP
       stm32eforth.s:2616   .text:00000000000010a8 ACCEP
       stm32eforth.s:2621   .text:00000000000010b8 ACCP1
       stm32eforth.s:2625   .text:00000000000010c4 $d
       stm32eforth.s:2640   .text:00000000000010f4 ACCP4
       stm32eforth.s:2626   .text:00000000000010c8 $t
       stm32eforth.s:2629   .text:00000000000010d8 $d
       stm32eforth.s:2630   .text:00000000000010dc $t
       stm32eforth.s:2632   .text:00000000000010e4 $d
       stm32eforth.s:2635   .text:00000000000010ee ACCP2
       stm32eforth.s:2633   .text:00000000000010e8 $t
ARM GAS  stm32eforth.s 			page 102


       stm32eforth.s:2638   .text:00000000000010f2 ACCP3
       stm32eforth.s:2616   .inflash.dictinary:00000000000007b4 LF_QUERY
       stm32eforth.s:2616   .inflash.dictinary:00000000000007b8 _QUERY
       stm32eforth.s:2648   .inflash.dictinary:00000000000007c0 CA_QUERY
       stm32eforth.s:2648   .text:0000000000001104 QUERY
       stm32eforth.s:2651   .text:0000000000001110 $d
       stm32eforth.s:2652   .text:0000000000001114 $t
       stm32eforth.s:2656   .text:0000000000001128 $d
       stm32eforth.s:2657   .text:000000000000112c $t
       stm32eforth.s:2648   .inflash.dictinary:00000000000007c4 LF_ABORT
       stm32eforth.s:2648   .inflash.dictinary:00000000000007c8 _ABORT
       stm32eforth.s:2666   .inflash.dictinary:00000000000007d0 CA_ABORT
       stm32eforth.s:2666   .text:0000000000001138 ABORT
       stm32eforth.s:2669   .text:0000000000001140 ABORT1
       stm32eforth.s:2672   .text:000000000000114c $d
       stm32eforth.s:2673   .text:0000000000001150 $t
       stm32eforth.s:2783   .text:0000000000001270 PRESE
       stm32eforth.s:2791   .text:0000000000001284 QUIT
       stm32eforth.s:2685   .text:0000000000001160 ABORQ
       stm32eforth.s:2690   .text:0000000000001170 $d
       stm32eforth.s:2691   .text:0000000000001174 $t
       stm32eforth.s:2666   .inflash.dictinary:00000000000007d4 LF_INTER
       stm32eforth.s:2666   .inflash.dictinary:00000000000007d8 _INTER
       stm32eforth.s:2701   .inflash.dictinary:00000000000007e4 CA_INTER
       stm32eforth.s:2706   .text:0000000000001190 $d
       stm32eforth.s:2716   .text:00000000000011c0 INTE1
       stm32eforth.s:2707   .text:0000000000001194 $t
       stm32eforth.s:2708   .text:000000000000119c $d
       stm32eforth.s:2709   .text:00000000000011a0 $t
       stm32eforth.s:2711   .text:00000000000011a8 $d
       stm32eforth.s:2713   .text:00000000000011b6 $t
       stm32eforth.s:2719   .text:00000000000011c8 $d
       stm32eforth.s:2721   .text:00000000000011d0 INTE2
       stm32eforth.s:2720   .text:00000000000011cc $t
       stm32eforth.s:2701   .inflash.dictinary:00000000000007e8 LF_LBRAC
       stm32eforth.s:2701   .inflash.dictinary:00000000000007ec _LBRAC
       stm32eforth.s:2726   .inflash.dictinary:00000000000007f0 CA_LBRAC
       stm32eforth.s:2726   .text:00000000000011d4 LBRAC
       stm32eforth.s:2728   .text:00000000000011dc $d
       stm32eforth.s:2729   .text:00000000000011e0 $t
       stm32eforth.s:2726   .inflash.dictinary:00000000000007f4 LF_DOTOK
       stm32eforth.s:2726   .inflash.dictinary:00000000000007f8 _DOTOK
       stm32eforth.s:2735   .inflash.dictinary:00000000000007fc CA_DOTOK
       stm32eforth.s:2735   .text:00000000000011ec DOTOK
       stm32eforth.s:2737   .text:00000000000011f4 $d
       stm32eforth.s:2738   .text:00000000000011f8 $t
       stm32eforth.s:2742   .text:0000000000001208 $d
       stm32eforth.s:2746   .text:0000000000001214 DOTO1
       stm32eforth.s:2743   .text:000000000000120c $t
       stm32eforth.s:2744   .text:0000000000001210 $d
       stm32eforth.s:2747   .text:0000000000001214 $t
       stm32eforth.s:2735   .inflash.dictinary:0000000000000800 LF_QSTAC
       stm32eforth.s:2735   .inflash.dictinary:0000000000000804 _QSTAC
       stm32eforth.s:2752   .inflash.dictinary:000000000000080c CA_QSTAC
       stm32eforth.s:2752   .text:000000000000121c QSTAC
       stm32eforth.s:2757   .text:000000000000122c $d
       stm32eforth.s:2752   .inflash.dictinary:0000000000000810 LF_EVAL
ARM GAS  stm32eforth.s 			page 103


       stm32eforth.s:2752   .inflash.dictinary:0000000000000814 _EVAL
       stm32eforth.s:2764   .inflash.dictinary:000000000000081c CA_EVAL
       stm32eforth.s:2764   .text:000000000000123c EVAL
       stm32eforth.s:2766   .text:0000000000001240 EVAL1
       stm32eforth.s:2771   .text:0000000000001250 $d
       stm32eforth.s:2776   .text:0000000000001264 EVAL2
       stm32eforth.s:2772   .text:0000000000001254 $t
       stm32eforth.s:2764   .inflash.dictinary:0000000000000820 LF_PRESE
       stm32eforth.s:2764   .inflash.dictinary:0000000000000824 _PRESE
       stm32eforth.s:2783   .inflash.dictinary:000000000000082c CA_PRESE
       stm32eforth.s:2783   .inflash.dictinary:0000000000000830 LF_QUIT
       stm32eforth.s:2783   .inflash.dictinary:0000000000000834 _QUIT
       stm32eforth.s:2791   .inflash.dictinary:000000000000083c CA_QUIT
       stm32eforth.s:2794   .text:0000000000001290 QUIT1
       stm32eforth.s:2796   .text:0000000000001294 QUIT2
       stm32eforth.s:2800   .text:00000000000012a0 $d
       stm32eforth.s:2791   .inflash.dictinary:0000000000000840 LF_UNLOCK
       stm32eforth.s:2791   .inflash.dictinary:0000000000000844 _UNLOCK
       stm32eforth.s:2807   .inflash.dictinary:000000000000084c CA_UNLOCK
       stm32eforth.s:2807   .text:00000000000012a4 UNLOCK
       stm32eforth.s:2807   .text:00000000000012a4 $t
       stm32eforth.s:2810   .text:00000000000012ac $d
       stm32eforth.s:2831   .text:00000000000012cc LOCK
       stm32eforth.s:3120   .text:0000000000001604 flash_regs
       stm32eforth.s:2811   .text:00000000000012b0 $t
       stm32eforth.s:2838   .text:00000000000012d8 WAIT_BSY
       stm32eforth.s:2840   .text:00000000000012da WAIT1
       stm32eforth.s:2807   .inflash.dictinary:0000000000000850 LF_EPAGE
       stm32eforth.s:2807   .inflash.dictinary:0000000000000854 _EPAGE
       stm32eforth.s:2850   .inflash.dictinary:0000000000000860 CA_EPAGE
       stm32eforth.s:2850   .text:00000000000012e4 EPAGE
       stm32eforth.s:2853   .text:00000000000012f0 $d
       stm32eforth.s:2854   .text:00000000000012f4 $t
       stm32eforth.s:2863   .text:0000000000001310 $d
       stm32eforth.s:2864   .text:0000000000001314 $t
       stm32eforth.s:2868   .text:0000000000001322 $d
       stm32eforth.s:2870   .text:0000000000001330 $t
       stm32eforth.s:2875   .text:0000000000001334 HWORD_WRITE
       stm32eforth.s:2888   .text:0000000000001356 $d
       stm32eforth.s:2889   .text:000000000000135a $t
       stm32eforth.s:2890   .text:000000000000135e $d
       stm32eforth.s:2892   .text:000000000000136c $t
       stm32eforth.s:2850   .inflash.dictinary:0000000000000864 LF_ISTOR
       stm32eforth.s:2850   .inflash.dictinary:0000000000000868 _ISTOR
       stm32eforth.s:2900   .inflash.dictinary:000000000000086c CA_ISTOR
       stm32eforth.s:2900   .text:0000000000001370 ISTOR
       stm32eforth.s:2903   .text:000000000000137c $d
       stm32eforth.s:2904   .text:0000000000001380 $t
       stm32eforth.s:2914   .text:00000000000013ac $d
       stm32eforth.s:2915   .text:00000000000013b0 $t
       stm32eforth.s:2900   .inflash.dictinary:0000000000000870 LF_IMG_SIZE
       stm32eforth.s:2900   .inflash.dictinary:0000000000000874 _IMG_SIZE
       stm32eforth.s:2921   .inflash.dictinary:0000000000000880 CA_IMG_SIZE
       stm32eforth.s:2921   .text:00000000000013b8 IMG_SIZE
       stm32eforth.s:2923   .text:00000000000013c0 $d
       stm32eforth.s:2924   .text:00000000000013c4 $t
       stm32eforth.s:2928   .text:00000000000013d8 $d
ARM GAS  stm32eforth.s 			page 104


       stm32eforth.s:2929   .text:00000000000013dc $t
       stm32eforth.s:2932   .text:00000000000013e8 $d
       stm32eforth.s:2933   .text:00000000000013ec $t
       stm32eforth.s:2921   .inflash.dictinary:0000000000000884 LF_IMGQ
       stm32eforth.s:2921   .inflash.dictinary:0000000000000888 _IMGQ
       stm32eforth.s:2939   .inflash.dictinary:0000000000000890 CA_IMGQ
       stm32eforth.s:2939   .text:00000000000013f4 IMGQ
       stm32eforth.s:2939   .inflash.dictinary:0000000000000894 LF_LOAD_IMG
       stm32eforth.s:2939   .inflash.dictinary:0000000000000898 _LOAD_IMG
       stm32eforth.s:2951   .inflash.dictinary:00000000000008a4 CA_LOAD_IMG
       stm32eforth.s:2951   .text:0000000000001414 LOAD_IMG
       stm32eforth.s:2955   .text:0000000000001420 $d
       stm32eforth.s:2957   .text:0000000000001424 $t
       stm32eforth.s:2951   .inflash.dictinary:00000000000008a8 LF_ERASE_MPG
       stm32eforth.s:2951   .inflash.dictinary:00000000000008ac _ERASE_MPG
       stm32eforth.s:2981   .inflash.dictinary:00000000000008b8 CA_ERASE_MPG
       stm32eforth.s:2981   .text:000000000000146c ERASE_MPG
       stm32eforth.s:3031   .text:00000000000014f8 PG_TO_ADR
       stm32eforth.s:2986   .text:000000000000147c $d
       stm32eforth.s:2988   .text:0000000000001480 $t
       stm32eforth.s:2995   .text:0000000000001498 $d
       stm32eforth.s:2996   .text:000000000000149c $t
       stm32eforth.s:2981   .inflash.dictinary:00000000000008bc LF_FLSH_WR
       stm32eforth.s:2981   .inflash.dictinary:00000000000008c0 _FLSH_WR
       stm32eforth.s:3001   .inflash.dictinary:00000000000008c8 CA_FLSH_WR
       stm32eforth.s:3001   .text:00000000000014a4 FLSH_WR
       stm32eforth.s:3005   .text:00000000000014b0 $d
       stm32eforth.s:3007   .text:00000000000014b4 $t
       stm32eforth.s:3016   .text:00000000000014d8 $d
       stm32eforth.s:3017   .text:00000000000014dc $t
       stm32eforth.s:3001   .inflash.dictinary:00000000000008cc LF_ADR_TO_PG
       stm32eforth.s:3001   .inflash.dictinary:00000000000008d0 _ADR_TO_PG
       stm32eforth.s:3024   .inflash.dictinary:00000000000008d8 CA_ADR_TO_PG
       stm32eforth.s:3024   .text:00000000000014ec ADR_TO_PG
       stm32eforth.s:3024   .inflash.dictinary:00000000000008dc LF_PG_TO_ADR
       stm32eforth.s:3024   .inflash.dictinary:00000000000008e0 _PG_TO_ADR
       stm32eforth.s:3031   .inflash.dictinary:00000000000008e8 CA_PG_TO_ADR
       stm32eforth.s:3031   .inflash.dictinary:00000000000008ec LF_ERASE_IMG
       stm32eforth.s:3031   .inflash.dictinary:00000000000008f0 _ERASE_IMG
       stm32eforth.s:3038   .inflash.dictinary:00000000000008fc CA_ERASE_IMG
       stm32eforth.s:3038   .text:0000000000001504 ERASE_IMG
       stm32eforth.s:3044   .text:0000000000001518 $d
       stm32eforth.s:3045   .text:000000000000151c $t
       stm32eforth.s:3049   .text:000000000000152c $d
       stm32eforth.s:3050   .text:0000000000001530 $t
       stm32eforth.s:3038   .inflash.dictinary:0000000000000900 LF_SAVE_IMG
       stm32eforth.s:3038   .inflash.dictinary:0000000000000904 _SAVE_IMG
       stm32eforth.s:3055   .inflash.dictinary:0000000000000910 CA_SAVE_IMG
       stm32eforth.s:3055   .text:0000000000001538 SAVE_IMG
       stm32eforth.s:3061   .text:000000000000154c $d
       stm32eforth.s:3062   .text:0000000000001550 $t
       stm32eforth.s:3065   .text:000000000000155c $d
       stm32eforth.s:3067   .text:0000000000001560 $t
       stm32eforth.s:3055   .inflash.dictinary:0000000000000914 LF_TURNKEY
       stm32eforth.s:3055   .inflash.dictinary:0000000000000918 _TURNKEY
       stm32eforth.s:3089   .inflash.dictinary:0000000000000920 CA_TURNKEY
       stm32eforth.s:3089   .text:000000000000159c TURNKEY
ARM GAS  stm32eforth.s 			page 105


       stm32eforth.s:3130   .text:0000000000001610 TICK
       stm32eforth.s:3089   .inflash.dictinary:0000000000000924 LF_FORGET
       stm32eforth.s:3089   .inflash.dictinary:0000000000000928 _FORGET
       stm32eforth.s:3099   .inflash.dictinary:0000000000000930 CA_FORGET
       stm32eforth.s:3099   .text:00000000000015b4 FORGET
       stm32eforth.s:3104   .text:00000000000015c8 $d
       stm32eforth.s:3105   .text:00000000000015cc $t
       stm32eforth.s:3108   .text:00000000000015d8 $d
       stm32eforth.s:3109   .text:00000000000015dc $t
       stm32eforth.s:3456   .text:000000000000193c OVERT
       stm32eforth.s:3121   .text:0000000000001604 $d
       stm32eforth.s:3099   .inflash.dictinary:0000000000000934 LF_TICK
       stm32eforth.s:3099   .inflash.dictinary:0000000000000938 _TICK
       stm32eforth.s:3130   .inflash.dictinary:000000000000093c CA_TICK
       stm32eforth.s:3130   .text:0000000000001610 $t
       stm32eforth.s:3135   .text:0000000000001620 $d
       stm32eforth.s:3137   .text:0000000000001628 TICK1
       stm32eforth.s:3136   .text:0000000000001624 $t
       stm32eforth.s:3130   .inflash.dictinary:0000000000000940 LF_ALLOT
       stm32eforth.s:3130   .inflash.dictinary:0000000000000944 _ALLOT
       stm32eforth.s:3141   .inflash.dictinary:000000000000094c CA_ALLOT
       stm32eforth.s:3141   .text:000000000000162c ALLOT
       stm32eforth.s:3141   .inflash.dictinary:0000000000000950 LF_COMMA
       stm32eforth.s:3141   .inflash.dictinary:0000000000000954 _COMMA
       stm32eforth.s:3149   .inflash.dictinary:0000000000000958 CA_COMMA
       stm32eforth.s:3149   .text:000000000000163c COMMA
       stm32eforth.s:3149   .inflash.dictinary:000000000000095c LF_BCOMP
       stm32eforth.s:3149   .inflash.dictinary:0000000000000960 _BCOMP
       stm32eforth.s:3161   .inflash.dictinary:000000000000096c CA_BCOMP
       stm32eforth.s:3161   .text:000000000000165c BCOMP
       stm32eforth.s:3161   .inflash.dictinary:0000000000000970 LF_COMPI
       stm32eforth.s:3161   .inflash.dictinary:0000000000000974 _COMPI
       stm32eforth.s:3169   .inflash.dictinary:000000000000097c CA_COMPI
       stm32eforth.s:3169   .text:000000000000166c COMPI
       stm32eforth.s:3511   .text:00000000000019ca CALLC
       stm32eforth.s:3169   .inflash.dictinary:0000000000000980 LF_LITER
       stm32eforth.s:3169   .inflash.dictinary:0000000000000984 _LITER
       stm32eforth.s:3183   .inflash.dictinary:000000000000098c CA_LITER
       stm32eforth.s:3183   .text:0000000000001694 LITER
       stm32eforth.s:3184   .text:0000000000001694 $d
       stm32eforth.s:3185   .text:0000000000001698 $t
       stm32eforth.s:3187   .text:00000000000016a0 $d
       stm32eforth.s:3188   .text:00000000000016a4 $t
       stm32eforth.s:3198   .text:00000000000016ac STRCQ
       stm32eforth.s:3200   .text:00000000000016b4 $d
       stm32eforth.s:3201   .text:00000000000016b8 $t
       stm32eforth.s:3203   .text:00000000000016c4 $d
       stm32eforth.s:3204   .text:00000000000016c8 $t
       stm32eforth.s:3183   .inflash.dictinary:0000000000000990 LF_FOR
       stm32eforth.s:3183   .inflash.dictinary:0000000000000994 _FOR
       stm32eforth.s:3217   .inflash.dictinary:0000000000000998 CA_FOR
       stm32eforth.s:3217   .text:00000000000016e4 FOR
       stm32eforth.s:3220   .text:00000000000016ec $d
       stm32eforth.s:3221   .text:00000000000016f0 $t
       stm32eforth.s:3217   .inflash.dictinary:000000000000099c LF_BEGIN
       stm32eforth.s:3217   .inflash.dictinary:00000000000009a0 _BEGIN
       stm32eforth.s:3226   .inflash.dictinary:00000000000009a8 CA_BEGIN
ARM GAS  stm32eforth.s 			page 106


       stm32eforth.s:3226   .text:00000000000016f8 BEGIN
       stm32eforth.s:3226   .inflash.dictinary:00000000000009ac LF_NEXT
       stm32eforth.s:3226   .inflash.dictinary:00000000000009b0 _NEXT
       stm32eforth.s:3233   .inflash.dictinary:00000000000009b8 CA_NEXT
       stm32eforth.s:3233   .text:0000000000001704 NEXT
       stm32eforth.s:3236   .text:000000000000170c $d
       stm32eforth.s:3237   .text:0000000000001710 $t
       stm32eforth.s:3233   .inflash.dictinary:00000000000009bc LF_UNTIL
       stm32eforth.s:3233   .inflash.dictinary:00000000000009c0 _UNTIL
       stm32eforth.s:3242   .inflash.dictinary:00000000000009c8 CA_UNTIL
       stm32eforth.s:3242   .text:0000000000001718 UNTIL
       stm32eforth.s:3245   .text:0000000000001720 $d
       stm32eforth.s:3246   .text:0000000000001724 $t
       stm32eforth.s:3242   .inflash.dictinary:00000000000009cc LF_AGAIN
       stm32eforth.s:3242   .inflash.dictinary:00000000000009d0 _AGAIN
       stm32eforth.s:3251   .inflash.dictinary:00000000000009d8 CA_AGAIN
       stm32eforth.s:3251   .text:000000000000172c AGAIN
       stm32eforth.s:3254   .text:0000000000001734 $d
       stm32eforth.s:3255   .text:0000000000001738 $t
       stm32eforth.s:3251   .inflash.dictinary:00000000000009dc LF_IFF
       stm32eforth.s:3251   .inflash.dictinary:00000000000009e0 _IFF
       stm32eforth.s:3260   .inflash.dictinary:00000000000009e4 CA_IFF
       stm32eforth.s:3260   .text:0000000000001740 IFF
       stm32eforth.s:3263   .text:0000000000001748 $d
       stm32eforth.s:3264   .text:000000000000174c $t
       stm32eforth.s:3265   .text:0000000000001754 $d
       stm32eforth.s:3266   .text:0000000000001758 $t
       stm32eforth.s:3260   .inflash.dictinary:00000000000009e8 LF_AHEAD
       stm32eforth.s:3260   .inflash.dictinary:00000000000009ec _AHEAD
       stm32eforth.s:3272   .inflash.dictinary:00000000000009f4 CA_AHEAD
       stm32eforth.s:3272   .text:0000000000001764 AHEAD
       stm32eforth.s:3275   .text:000000000000176c $d
       stm32eforth.s:3276   .text:0000000000001770 $t
       stm32eforth.s:3277   .text:0000000000001778 $d
       stm32eforth.s:3278   .text:000000000000177c $t
       stm32eforth.s:3272   .inflash.dictinary:00000000000009f8 LF_REPEA
       stm32eforth.s:3272   .inflash.dictinary:00000000000009fc _REPEA
       stm32eforth.s:3284   .inflash.dictinary:0000000000000a04 CA_REPEA
       stm32eforth.s:3284   .text:0000000000001788 REPEA
       stm32eforth.s:3284   .inflash.dictinary:0000000000000a08 LF_THENN
       stm32eforth.s:3284   .inflash.dictinary:0000000000000a0c _THENN
       stm32eforth.s:3294   .inflash.dictinary:0000000000000a14 CA_THENN
       stm32eforth.s:3294   .text:00000000000017a0 THENN
       stm32eforth.s:3294   .inflash.dictinary:0000000000000a18 LF_AFT
       stm32eforth.s:3294   .inflash.dictinary:0000000000000a1c _AFT
       stm32eforth.s:3303   .inflash.dictinary:0000000000000a20 CA_AFT
       stm32eforth.s:3303   .text:00000000000017b4 AFT
       stm32eforth.s:3303   .inflash.dictinary:0000000000000a24 LF_ELSEE
       stm32eforth.s:3303   .inflash.dictinary:0000000000000a28 _ELSEE
       stm32eforth.s:3313   .inflash.dictinary:0000000000000a30 CA_ELSEE
       stm32eforth.s:3313   .text:00000000000017cc ELSEE
       stm32eforth.s:3313   .inflash.dictinary:0000000000000a34 LF_WHILE
       stm32eforth.s:3313   .inflash.dictinary:0000000000000a38 _WHILE
       stm32eforth.s:3322   .inflash.dictinary:0000000000000a40 CA_WHILE
       stm32eforth.s:3322   .text:00000000000017e0 WHILE
       stm32eforth.s:3322   .inflash.dictinary:0000000000000a44 LF_ABRTQ
       stm32eforth.s:3322   .inflash.dictinary:0000000000000a48 _ABRTQ
ARM GAS  stm32eforth.s 			page 107


       stm32eforth.s:3330   .inflash.dictinary:0000000000000a50 CA_ABRTQ
       stm32eforth.s:3330   .text:00000000000017f0 ABRTQ
       stm32eforth.s:3333   .text:00000000000017f8 $d
       stm32eforth.s:3334   .text:00000000000017fc $t
       stm32eforth.s:3330   .inflash.dictinary:0000000000000a54 LF_STRQ
       stm32eforth.s:3330   .inflash.dictinary:0000000000000a58 _STRQ
       stm32eforth.s:3339   .inflash.dictinary:0000000000000a5c CA_STRQ
       stm32eforth.s:3339   .text:0000000000001804 STRQ
       stm32eforth.s:3342   .text:000000000000180c $d
       stm32eforth.s:3343   .text:0000000000001810 $t
       stm32eforth.s:3339   .inflash.dictinary:0000000000000a60 LF_DOTQ
       stm32eforth.s:3339   .inflash.dictinary:0000000000000a64 _DOTQ
       stm32eforth.s:3348   .inflash.dictinary:0000000000000a68 CA_DOTQ
       stm32eforth.s:3348   .text:0000000000001818 DOTQ
       stm32eforth.s:3351   .text:0000000000001820 $d
       stm32eforth.s:3352   .text:0000000000001824 $t
       stm32eforth.s:3348   .inflash.dictinary:0000000000000a6c LF_UNIQU
       stm32eforth.s:3348   .inflash.dictinary:0000000000000a70 _UNIQU
       stm32eforth.s:3361   .inflash.dictinary:0000000000000a78 CA_UNIQU
       stm32eforth.s:3361   .text:000000000000182c UNIQU
       stm32eforth.s:3366   .text:000000000000183c $d
       stm32eforth.s:3374   .text:0000000000001858 UNIQ1
       stm32eforth.s:3367   .text:0000000000001840 $t
       stm32eforth.s:3368   .text:0000000000001844 $d
       stm32eforth.s:3370   .text:000000000000184c $t
       stm32eforth.s:3385   .text:0000000000001860 SNAME
       stm32eforth.s:3390   .text:0000000000001870 $d
       stm32eforth.s:3404   .text:00000000000018a8 SNAM1
       stm32eforth.s:3391   .text:0000000000001874 $t
       stm32eforth.s:3406   .text:00000000000018ac $d
       stm32eforth.s:3408   .text:00000000000018b4 $t
       stm32eforth.s:3361   .inflash.dictinary:0000000000000a7c LF_SCOMP
       stm32eforth.s:3361   .inflash.dictinary:0000000000000a80 _SCOMP
       stm32eforth.s:3412   .inflash.dictinary:0000000000000a8c CA_SCOMP
       stm32eforth.s:3412   .text:00000000000018b8 SCOMP
       stm32eforth.s:3417   .text:00000000000018c8 $d
       stm32eforth.s:3428   .text:00000000000018f4 SCOM2
       stm32eforth.s:3418   .text:00000000000018cc $t
       stm32eforth.s:3419   .text:00000000000018d4 $d
       stm32eforth.s:3420   .text:00000000000018d8 $t
       stm32eforth.s:3422   .text:00000000000018e0 $d
       stm32eforth.s:3425   .text:00000000000018ec SCOM1
       stm32eforth.s:3423   .text:00000000000018e4 $t
       stm32eforth.s:3431   .text:00000000000018fc $d
       stm32eforth.s:3434   .text:0000000000001908 SCOM3
       stm32eforth.s:3432   .text:0000000000001900 $t
       stm32eforth.s:3441   .text:0000000000001910 COLON_ABORT
       stm32eforth.s:3412   .inflash.dictinary:0000000000000a90 LF_OVERT
       stm32eforth.s:3412   .inflash.dictinary:0000000000000a94 _OVERT
       stm32eforth.s:3456   .inflash.dictinary:0000000000000a9c CA_OVERT
       stm32eforth.s:3456   .inflash.dictinary:0000000000000aa0 LF_SEMIS
       stm32eforth.s:3456   .inflash.dictinary:0000000000000aa4 _SEMIS
       stm32eforth.s:3466   .inflash.dictinary:0000000000000aa8 CA_SEMIS
       stm32eforth.s:3466   .text:0000000000001954 SEMIS
       stm32eforth.s:3466   .inflash.dictinary:0000000000000aac LF_RBRAC
       stm32eforth.s:3466   .inflash.dictinary:0000000000000ab0 _RBRAC
       stm32eforth.s:3477   .inflash.dictinary:0000000000000ab4 CA_RBRAC
ARM GAS  stm32eforth.s 			page 108


       stm32eforth.s:3477   .text:0000000000001970 RBRAC
       stm32eforth.s:3479   .text:0000000000001978 $d
       stm32eforth.s:3480   .text:000000000000197c $t
       stm32eforth.s:3488   .text:0000000000001988 COMPILE_BLW
       stm32eforth.s:3477   .inflash.dictinary:0000000000000ab8 LF_COLON
       stm32eforth.s:3477   .inflash.dictinary:0000000000000abc _COLON
       stm32eforth.s:3524   .inflash.dictinary:0000000000000ac0 CA_COLON
       stm32eforth.s:3524   .text:00000000000019ec COLON
       stm32eforth.s:3579   .text:0000000000001a68 HEAD
       stm32eforth.s:3524   .inflash.dictinary:0000000000000ac4 LF_IMMED
       stm32eforth.s:3524   .inflash.dictinary:0000000000000ac8 _IMMED
       stm32eforth.s:3532   .inflash.dictinary:0000000000000ad4 CA_IMMED
       stm32eforth.s:3532   .text:00000000000019fc IMMED
       stm32eforth.s:3534   .text:0000000000001a04 $d
       stm32eforth.s:3535   .text:0000000000001a08 $t
       stm32eforth.s:3532   .inflash.dictinary:0000000000000ad8 LF_ICOLON
       stm32eforth.s:3532   .inflash.dictinary:0000000000000adc _ICOLON
       stm32eforth.s:3548   .inflash.dictinary:0000000000000ae0 CA_ICOLON
       stm32eforth.s:3548   .text:0000000000001a28 ICOLON
       stm32eforth.s:3548   .inflash.dictinary:0000000000000ae4 LF_ISEMIS
       stm32eforth.s:3548   .inflash.dictinary:0000000000000ae8 _ISEMIS
       stm32eforth.s:3560   .inflash.dictinary:0000000000000aec CA_ISEMIS
       stm32eforth.s:3560   .text:0000000000001a44 ISEMIS
       stm32eforth.s:3560   .inflash.dictinary:0000000000000af0 LF_HEAD
       stm32eforth.s:3560   .inflash.dictinary:0000000000000af4 _HEAD
       stm32eforth.s:3579   .inflash.dictinary:0000000000000afc CA_HEAD
       stm32eforth.s:3579   .inflash.dictinary:0000000000000b00 LF_CONST
       stm32eforth.s:3579   .inflash.dictinary:0000000000000b04 _CONST
       stm32eforth.s:3593   .inflash.dictinary:0000000000000b10 CA_CONST
       stm32eforth.s:3593   .text:0000000000001a90 CONST
       stm32eforth.s:3596   .text:0000000000001a9c $d
       stm32eforth.s:3597   .text:0000000000001aa0 $t
       stm32eforth.s:3605   .text:0000000000001ab0 DODOES
       stm32eforth.s:3616   .text:0000000000001adc $d
       stm32eforth.s:3617   .text:0000000000001ae0 $t
       stm32eforth.s:3593   .inflash.dictinary:0000000000000b14 LF_DOES
       stm32eforth.s:3593   .inflash.dictinary:0000000000000b18 _DOES
       stm32eforth.s:3634   .inflash.dictinary:0000000000000b20 CA_DOES
       stm32eforth.s:3634   .text:0000000000001b0c DOES
       stm32eforth.s:3636   .text:0000000000001b14 $d
       stm32eforth.s:3637   .text:0000000000001b18 $t
       stm32eforth.s:3634   .inflash.dictinary:0000000000000b24 LF_CREAT
       stm32eforth.s:3634   .inflash.dictinary:0000000000000b28 _CREAT
       stm32eforth.s:3649   .inflash.dictinary:0000000000000b30 CA_CREAT
       stm32eforth.s:3649   .text:0000000000001b38 CREAT
       stm32eforth.s:3652   .text:0000000000001b44 $d
       stm32eforth.s:3653   .text:0000000000001b48 $t
       stm32eforth.s:3649   .inflash.dictinary:0000000000000b34 LF_VARIA
       stm32eforth.s:3649   .inflash.dictinary:0000000000000b38 _VARIA
       stm32eforth.s:3658   .inflash.dictinary:0000000000000b44 CA_VARIA
       stm32eforth.s:3658   .text:0000000000001b50 VARIA
       stm32eforth.s:3661   .text:0000000000001b5c $d
       stm32eforth.s:3662   .text:0000000000001b60 $t
       stm32eforth.s:3658   .inflash.dictinary:0000000000000b48 LF_FCALL
       stm32eforth.s:3658   .inflash.dictinary:0000000000000b4c _FCALL
       stm32eforth.s:3669   .inflash.dictinary:0000000000000b54 CA_FCALL
       stm32eforth.s:3669   .text:0000000000001b6c FCALL
ARM GAS  stm32eforth.s 			page 109


       stm32eforth.s:3669   .inflash.dictinary:0000000000000b58 LF_DEFER
       stm32eforth.s:3669   .inflash.dictinary:0000000000000b5c _DEFER
       stm32eforth.s:3680   .inflash.dictinary:0000000000000b64 CA_DEFER
       stm32eforth.s:3680   .text:0000000000001b80 DEFER
       stm32eforth.s:3683   .text:0000000000001b8c $d
       stm32eforth.s:3684   .text:0000000000001b90 $t
       stm32eforth.s:3680   .inflash.dictinary:0000000000000b68 LF_DEFERSTO
       stm32eforth.s:3680   .inflash.dictinary:0000000000000b6c _DEFERSTO
       stm32eforth.s:3693   .inflash.dictinary:0000000000000b74 CA_DEFERSTO
       stm32eforth.s:3693   .text:0000000000001ba8 DEFERSTO
       stm32eforth.s:3693   .inflash.dictinary:0000000000000b78 LF_DEFERAT
       stm32eforth.s:3693   .inflash.dictinary:0000000000000b7c _DEFERAT
       stm32eforth.s:3709   .inflash.dictinary:0000000000000b84 CA_DEFERAT
       stm32eforth.s:3709   .text:0000000000001bd8 DEFERAT
       stm32eforth.s:3716   .text:0000000000001bf4 $d
       stm32eforth.s:4040   .inflash:0000000000000654 BLADR
       stm32eforth.s:3717   .text:0000000000001bf8 $t
       stm32eforth.s:3718   .text:0000000000001c00 $d
       stm32eforth.s:3719   .text:0000000000001c04 $t
       stm32eforth.s:3737   .inflash:00000000000002b4 DMP
       stm32eforth.s:3738   .inflash:00000000000002b4 $t
       stm32eforth.s:3740   .inflash:00000000000002c0 $d
       stm32eforth.s:3741   .inflash:00000000000002c4 $t
       stm32eforth.s:3751   .inflash:00000000000002ec PDUM2
       stm32eforth.s:3745   .inflash:00000000000002d4 PDUM1
       stm32eforth.s:3748   .inflash:00000000000002e0 $d
       stm32eforth.s:3749   .inflash:00000000000002e4 $t
       stm32eforth.s:3753   .inflash:00000000000002f0 $d
       stm32eforth.s:3754   .inflash:00000000000002f4 $t
       stm32eforth.s:3709   .inflash.dictinary:0000000000000b88 LF_DUMP
       stm32eforth.s:3709   .inflash.dictinary:0000000000000b8c _DUMP
       stm32eforth.s:3759   .inflash.dictinary:0000000000000b94 CA_DUMP
       stm32eforth.s:3759   .text:0000000000001c14 DUMP
       stm32eforth.s:3759   .text:0000000000001c18 $d
       stm32eforth.s:3759   .inflash:00000000000002f8 FL_DUMP
       stm32eforth.s:3759   .text:0000000000001c1c $t
       stm32eforth.s:3765   .inflash:0000000000000310 $d
       stm32eforth.s:3766   .inflash:0000000000000314 $t
       stm32eforth.s:3779   .inflash:0000000000000348 DUMP4
       stm32eforth.s:3769   .inflash:0000000000000320 DUMP1
       stm32eforth.s:3771   .inflash:0000000000000328 $d
       stm32eforth.s:3772   .inflash:000000000000032c $t
       stm32eforth.s:3781   .inflash:000000000000034c $d
       stm32eforth.s:3782   .inflash:0000000000000350 DUMP3
       stm32eforth.s:3783   .inflash:0000000000000350 $t
       stm32eforth.s:3759   .inflash.dictinary:0000000000000b98 LF_DOTS
       stm32eforth.s:3759   .inflash.dictinary:0000000000000b9c _DOTS
       stm32eforth.s:3791   .inflash.dictinary:0000000000000ba0 CA_DOTS
       stm32eforth.s:3791   .text:0000000000001c28 DOTS
       stm32eforth.s:3791   .text:0000000000001c2c $d
       stm32eforth.s:3791   .inflash:0000000000000364 FL_DOTS
       stm32eforth.s:3791   .text:0000000000001c30 $t
       stm32eforth.s:3801   .inflash:0000000000000384 DOTS2
       stm32eforth.s:3797   .inflash:0000000000000378 DOTS1
       stm32eforth.s:3803   .inflash:0000000000000388 $d
       stm32eforth.s:3804   .inflash:000000000000038c $t
       stm32eforth.s:3791   .inflash.dictinary:0000000000000ba4 LF_TNAME
ARM GAS  stm32eforth.s 			page 110


       stm32eforth.s:3791   .inflash.dictinary:0000000000000ba8 _TNAME
       stm32eforth.s:3809   .inflash.dictinary:0000000000000bb0 CA_TNAME
       stm32eforth.s:3809   .text:0000000000001c3c TNAME
       stm32eforth.s:3809   .text:0000000000001c40 $d
       stm32eforth.s:3809   .inflash:0000000000000394 FL_TNAME
       stm32eforth.s:3809   .text:0000000000001c44 $t
       stm32eforth.s:3814   .inflash:00000000000003a4 TNAM1
       stm32eforth.s:3817   .inflash:00000000000003ac $d
       stm32eforth.s:3829   .inflash:00000000000003e0 TNAM2
       stm32eforth.s:3818   .inflash:00000000000003b0 $t
       stm32eforth.s:3822   .inflash:00000000000003c4 $d
       stm32eforth.s:3823   .inflash:00000000000003c8 $t
       stm32eforth.s:3825   .inflash:00000000000003d0 $d
       stm32eforth.s:3826   .inflash:00000000000003d4 $t
       stm32eforth.s:3809   .inflash.dictinary:0000000000000bb4 LF_DOTID
       stm32eforth.s:3809   .inflash.dictinary:0000000000000bb8 _DOTID
       stm32eforth.s:3836   .inflash.dictinary:0000000000000bbc CA_DOTID
       stm32eforth.s:3836   .text:0000000000001c50 DOTID
       stm32eforth.s:3836   .text:0000000000001c54 $d
       stm32eforth.s:3836   .inflash:00000000000003ec FL_DOTID
       stm32eforth.s:3836   .text:0000000000001c58 $t
       stm32eforth.s:3840   .inflash:00000000000003f8 $d
       stm32eforth.s:3846   .inflash:0000000000000414 DOTI1
       stm32eforth.s:3841   .inflash:00000000000003fc $t
       stm32eforth.s:3842   .inflash:0000000000000404 $d
       stm32eforth.s:3843   .inflash:0000000000000408 $t
       stm32eforth.s:3848   .inflash:0000000000000418 $d
       stm32eforth.s:3850   .inflash:0000000000000422 $t
       stm32eforth.s:3853   *ABS*:0000000000000001 WANT_SEE
       stm32eforth.s:3861   .inflash:0000000000000428 DOTCA
       stm32eforth.s:3865   .inflash:0000000000000438 $d
       stm32eforth.s:3866   .inflash:000000000000043c $t
       stm32eforth.s:3872   .inflash:0000000000000444 CODE_ABORT
       stm32eforth.s:3881   .inflash:0000000000000464 $d
       stm32eforth.s:3882   .inflash:0000000000000468 $t
       stm32eforth.s:3884   .inflash:0000000000000470 $d
       stm32eforth.s:3886   .inflash:000000000000047a $t
       stm32eforth.s:3889   .inflash:0000000000000480 $d
       stm32eforth.s:3899   .inflash:0000000000000490 UNNESTQ
       stm32eforth.s:3908   .inflash:00000000000004b0 $d
       stm32eforth.s:3909   .inflash:00000000000004b4 $t
       stm32eforth.s:3910   .inflash:00000000000004b8 $d
       stm32eforth.s:3919   .inflash:00000000000004c8 NONAMEQ
       stm32eforth.s:3921   .inflash:00000000000004d0 $d
       stm32eforth.s:3922   .inflash:00000000000004d4 $t
       stm32eforth.s:3923   .inflash:00000000000004dc $d
       stm32eforth.s:4213   .rodata:0000000000000018 NONAME_SUB
       stm32eforth.s:3924   .inflash:00000000000004e0 $t
       stm32eforth.s:3930   .inflash:00000000000004f8 $d
       stm32eforth.s:3931   .inflash:00000000000004fc $t
       stm32eforth.s:3932   .inflash:0000000000000504 $d
       stm32eforth.s:3933   .inflash:0000000000000508 $t
       stm32eforth.s:3935   .inflash:0000000000000510 $d
       stm32eforth.s:3936   .inflash:0000000000000514 $t
       stm32eforth.s:3940   .inflash:0000000000000524 $d
       stm32eforth.s:3941   .inflash:0000000000000528 $t
       stm32eforth.s:3942   .inflash:0000000000000530 $d
ARM GAS  stm32eforth.s 			page 111


       stm32eforth.s:3943   .inflash:0000000000000534 $t
       stm32eforth.s:3944   .inflash:000000000000053c $d
       stm32eforth.s:4219   .rodata:0000000000000054 ANONYMOUS
       stm32eforth.s:3945   .inflash:0000000000000540 $t
       stm32eforth.s:3964   .inflash:0000000000000570 DOTNONAME
       stm32eforth.s:3967   .inflash:000000000000057c $d
       stm32eforth.s:3968   .inflash:0000000000000580 $t
       stm32eforth.s:3976   .inflash:0000000000000590 IS_BLW
       stm32eforth.s:3978   .inflash:0000000000000598 $d
       stm32eforth.s:3979   .inflash:000000000000059c $t
       stm32eforth.s:3836   .inflash.dictinary:0000000000000bc0 LF_SEE
       stm32eforth.s:3836   .inflash.dictinary:0000000000000bc4 _SEE
       stm32eforth.s:3988   .inflash.dictinary:0000000000000bc8 CA_SEE
       stm32eforth.s:3988   .text:0000000000001c64 SEE
       stm32eforth.s:3988   .text:0000000000001c68 $d
       stm32eforth.s:3988   .inflash:00000000000005b4 FL_SEE
       stm32eforth.s:3988   .text:0000000000001c6c $t
       stm32eforth.s:4006   .inflash:00000000000005e8 FL_SCOL
       stm32eforth.s:3988   .inflash.dictinary:0000000000000bcc LF_SCOL
       stm32eforth.s:3988   .inflash.dictinary:0000000000000bd0 _SCOL
       stm32eforth.s:4006   .inflash.dictinary:0000000000000bdc CA_SCOL
       stm32eforth.s:4006   .text:0000000000001c78 SCOL
       stm32eforth.s:4006   .text:0000000000001c7c $d
       stm32eforth.s:4006   .text:0000000000001c80 $t
       stm32eforth.s:4008   .inflash:00000000000005f0 $d
       stm32eforth.s:4009   .inflash:00000000000005f4 $t
       stm32eforth.s:4010   .inflash:00000000000005f8 SCOL1
       stm32eforth.s:4015   .inflash:0000000000000608 $d
       stm32eforth.s:4016   .inflash:000000000000060c $t
       stm32eforth.s:4022   .inflash:0000000000000624 $d
       stm32eforth.s:4023   .inflash:0000000000000628 $t
       stm32eforth.s:4026   .inflash:0000000000000634 $d
       stm32eforth.s:4027   .inflash:0000000000000638 $t
       stm32eforth.s:4062   .inflash:0000000000000698 FL_DECOMP
       stm32eforth.s:4031   .inflash:0000000000000648 $d
       stm32eforth.s:4032   .inflash:000000000000064c $t
       stm32eforth.s:4006   .inflash.dictinary:0000000000000be0 LF_DECOMP
       stm32eforth.s:4006   .inflash.dictinary:0000000000000be4 _DECOMP
       stm32eforth.s:4062   .inflash.dictinary:0000000000000bf0 CA_DECOMP
       stm32eforth.s:4062   .text:0000000000001c8c DECOMP
       stm32eforth.s:4062   .text:0000000000001c90 $d
       stm32eforth.s:4062   .text:0000000000001c94 $t
       stm32eforth.s:4069   .inflash:00000000000006b0 $d
       stm32eforth.s:4098   .inflash:0000000000000710 DECOM2
       stm32eforth.s:4071   .inflash:00000000000006b4 $t
       stm32eforth.s:4072   .inflash:00000000000006b8 $d
       stm32eforth.s:4074   .inflash:00000000000006bc $t
       stm32eforth.s:4082   .inflash:00000000000006d8 $d
       stm32eforth.s:4085   .inflash:00000000000006e4 DECOMP1
       stm32eforth.s:4083   .inflash:00000000000006dc $t
       stm32eforth.s:4084   .inflash:00000000000006e0 $d
       stm32eforth.s:4087   .inflash:00000000000006e8 DECOMP3
       stm32eforth.s:4086   .inflash:00000000000006e4 $t
       stm32eforth.s:4094   .inflash:0000000000000700 $d
       stm32eforth.s:4095   .inflash:0000000000000704 $t
       stm32eforth.s:4062   .inflash.dictinary:0000000000000bf4 LF_WORDS
       stm32eforth.s:4062   .inflash.dictinary:0000000000000bf8 _WORDS
ARM GAS  stm32eforth.s 			page 112


       stm32eforth.s:4106   .inflash.dictinary:0000000000000c00 CA_WORDS
       stm32eforth.s:4106   .text:0000000000001ca0 WORDS
       stm32eforth.s:4106   .text:0000000000001ca4 $d
       stm32eforth.s:4106   .inflash:000000000000071c FL_WORDS
       stm32eforth.s:4106   .text:0000000000001ca8 $t
       stm32eforth.s:4111   .inflash:000000000000072c WORS1
       stm32eforth.s:4114   .inflash:0000000000000734 $d
       stm32eforth.s:4121   .inflash:0000000000000750 WORS2
       stm32eforth.s:4115   .inflash:0000000000000738 $t
       stm32eforth.s:4136   .text:0000000000001cb2 VERSN
       stm32eforth.s:4138   .text:0000000000001cba $d
       stm32eforth.s:4139   .text:0000000000001cbe $t
       stm32eforth.s:4106   .inflash.dictinary:0000000000000c04 LF_HI
       stm32eforth.s:4106   .inflash.dictinary:0000000000000c08 _HI
       stm32eforth.s:4143   .inflash.dictinary:0000000000000c0c CA_HI
       stm32eforth.s:4146   .text:0000000000001cd0 $d
       stm32eforth.s:4168   .rodata:0000000000000000 hi_msg
       stm32eforth.s:4147   .text:0000000000001cd4 $t
       stm32eforth.s:4156   .text:0000000000001cfc $d
       stm32eforth.s:4157   .text:0000000000001d00 $t
       stm32eforth.s:4167   .rodata:0000000000000000 $d
       stm32eforth.s:4143   .inflash.dictinary:0000000000000c10 LF_LASTN
       stm32eforth.s:4177   .inflash.dictinary:0000000000000c1c CA_LASTN
       stm32eforth.s:4177   .text:0000000000001d20 LASTN
       stm32eforth.s:4185   .text:0000000000001d40 COLD1
       stm32eforth.s:4186   .text:0000000000001d44 $d
       stm32eforth.s:4187   .text:0000000000001d48 $t
       stm32eforth.s:4188   .text:0000000000001d50 $d
       stm32eforth.s:4189   .text:0000000000001d54 $t
       stm32eforth.s:4189   .text:0000000000001d58 $d
       stm32eforth.s:4190   .text:0000000000001d5c $t
       stm32eforth.s:4190   .text:0000000000001d60 $d
       stm32eforth.s:4191   .text:0000000000001d64 $t
       stm32eforth.s:4196   .text:0000000000001d74 $d
       stm32eforth.s:4197   .text:0000000000001d78 $t
       stm32eforth.s:4204   .text:0000000000001d8c COLD2
       stm32eforth.s:4205   .text:0000000000001d8c $d
       stm32eforth.s:4223   .rodata:000000000000008c BRAN_LBL
       stm32eforth.s:4227   .rodata:0000000000000098 QBRAN_LBL
       stm32eforth.s:4231   .rodata:00000000000000a4 DOLIT_LBL
       stm32eforth.s:4235   .rodata:00000000000000b0 DONEXT_LBL
       stm32eforth.s:4239   .rodata:00000000000000bc DODOES_LBL
       stm32eforth.s:4243   .rodata:00000000000000c8 DOVAR_LBL
       stm32eforth.s:4247   .rodata:00000000000000d4 DOCON_LBL
       stm32eforth.s:4251   .rodata:00000000000000e0 IS_BLW_LBL
       stm32eforth.s:4255   .rodata:00000000000000ec DOTQP_LBL
       stm32eforth.s:4259   .rodata:00000000000000f0 BLADR_LBL
       stm32eforth.s:4263   .rodata:00000000000000fc DOTCA_LBL
       stm32eforth.s:4267   .rodata:0000000000000108 NONAMEQ_LBL
       stm32eforth.s:4271   .rodata:0000000000000114 STRCQ_LBL
       stm32eforth.s:4275   .rodata:000000000000011c VERSN_LBL
       stm32eforth.s:4281   .user:0000000000000000 $d
       stm32eforth.s:2759   .text:0000000000001237 $d
       stm32eforth.s:2759   .text:0000000000001238 $t
       stm32eforth.s:347    .inflash:000000000000001f $d
       stm32eforth.s:347    .inflash:0000000000000020 $t
       stm32eforth.s:3891   .inflash:0000000000000485 $d
ARM GAS  stm32eforth.s 			page 113


       stm32eforth.s:3891   .inflash:0000000000000486 $t
       stm32eforth.s:3912   .inflash:00000000000004bf $d
       stm32eforth.s:3912   .inflash:00000000000004c0 $t

UNDEFINED SYMBOLS
_mstack
