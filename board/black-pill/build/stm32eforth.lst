ARM GAS  stm32eforth.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  stm32eforth.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.p2align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.p2aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m3
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "stm32f411ce.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x20000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR,  0x8000000 
  15              	    .equ FLASH_SIZE, 0x0080000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	     // erase block size
  18              	    .equ SECTOR0_ADR, 0x8000000  
  19              	    .equ SECTOR0_SIZE, 16384  // 0x0800 0000 - 0x0800 3FFF
  20              	    .equ SECTOR1_ADR, 0x8004000
  21              	    .equ SECTOR1_SIZE, 16384  // 0x0800 4000 - 0x0800 7FFF
  22              	    .equ SECTOR2_ADR, 0x8008000 
  23              	    .equ SECTOR2_SIZE, 16384  // 0x0800 8000 - 0x0800 BFFF
  24              	    .equ SECTOR3_ADR, 0x800C000
  25              	    .equ SECTOR3_SIZE, 16384  // 0x0800 C000 - 0x0800 FFFF
  26              	    .equ SECTOR4_ADR, 0x8010000
  27              	    .equ SECTOR4_SIZE, 65536  // 0x0801 0000 - 0x0801 FFFF
  28              	    .equ SECTOR5_ADR, 0x08020000
  29              	    .equ SECTOR5_SIZE, 131072 // 0x0802 0000 - 0x0803 FFFF
  30              	    .equ SECTOR6_ADR, 0x08040000
  31              	    .equ SECTOR6_SIZE, 131072 // 0x0804 0000 - 0x0805 FFFF
  32              	    .equ SECTOR7_ADR, 0x08060000
  33              	    .equ SECTOR7_SIZE, 131072 // 0x0806 0000 - 0x0807 FFFF
  34              	
ARM GAS  stm32eforth.s 			page 3


  35              	
  36              	   /* system memory 0x1FFF 0000 - 0x1FFF 77FF */
  37              	      .equ SYS_MEM, 0x1FFFF000
  38              	      .equ SYS_MEM_SIZE, 0x77FF 
  39              	
  40              	   /* OTP memory 0x1FFF 7800 - 0x1FFF 7A0F */
  41              	      .equ OTP_MEM, 0x1FFF7800
  42              	      .equ OTP_SIZE, 0x210 
  43              	
  44              	   /* option memory 0x1FFF C000 - 0x1FFF C00F */
  45              	      .equ OPTION, 0x1FFFC000   
  46              	      .equ OPT_SIZE, 16
  47              	
  48              	
  49              	   /* peripherals base address */
  50              	      .equ PER_BASE_ADR,  0x40000000
  51              	   /* PERIPHERALS bit band alias */
  52              	      .equ PER_BIT_ALIAS, 0x42000000 
  53              	
  54              	
  55              	    /* RCC registers address */
  56              	    .equ RCC_BASE_ADR, 0x40023800
  57              	    /* RCC registers offset */
  58              	    .equ RCC_CR, 0
  59              	    .equ RCC_PLLCFGR,0X4
  60              	    .equ RCC_CFGR, 0X8
  61              	    .equ RCC_CIR, 0XC
  62              	    .equ RCC_AHB1RSTR, 0X10
  63              	    .equ RCC_AHB2RSTR, 0X14
  64              	    .equ RCC_APB1RSTR, 0x20
  65              	    .equ RCC_APB2RSTR, 0X24
  66              	    .equ RCC_AHB1ENR, 0X30
  67              	    .equ RCC_AHB2ENR, 0X34 
  68              	    .equ RCC_APB1ENR, 0X40
  69              	    .equ RCC_APB2ENR, 0X44
  70              	    .equ RCC_AHB1LPENR,0X50
  71              	    .equ RCC_AHB2LPENR,0X54
  72              	    .equ RCC_APB1LPENR,0X60
  73              	    .equ RCC_APB2LPENR,0X64
  74              	    .equ RCC_BDCR,0X70
  75              	    .equ RCC_CSR,0X74
  76              	    .equ RCC_SSCGR,0X80
  77              	    .equ RCC_PLLI2SCFGR,0X84
  78              	    .equ RCC_DCKCFGR, 0X8C 
  79              	
  80              	    /* FLASH registers address */
  81              	    .equ FLASH_BASE_ADR, 0x40023C00
  82              	    /* FLASH registers offset */
  83              	    .equ FLASH_ACR, 0
  84              	    .equ FLASH_KEYR, 4
  85              	    .equ FLASH_OPTKEYR, 8
  86              	    .equ FLASH_SR, 12
  87              	    .equ FLASH_CR, 16
  88              	    .equ FLASH_OPTCR, 20
  89              	    .equ RDPRT_KEY, 0x00A5
  90              	    .equ FLASH_KEY1, 0x45670123
  91              	    .equ FLASH_KEY2, 0xCDEF89AB
ARM GAS  stm32eforth.s 			page 4


  92              	    .equ OPTKEY1, 0x08192A3B
  93              	    .equ OPTKEY2, 0x4C5D6E7F
  94              	
  95              	    /* GPIOx base address */
  96              	    .equ GPIOA_BASE_ADR, 0x40020000
  97              	    .equ GPIOB_BASE_ADR, 0x40020400
  98              	    .equ GPIOC_BASE_ADR, 0x40020800
  99              	    .equ GPIOD_BASE_ADR, 0x40020C00
 100              	    .equ GPIOE_BASE_ADR, 0x40021000
 101              	    .equ GPIOH_BASE_ADR, 0x40021C00
 102              	
 103              	    /* gpiox registers offset from base address */
 104              	    .equ GPIO_MODER, 0
 105              	    .equ GPIO_OTYPER, 4
 106              	    .equ GPIO_OSPEEDR, 8
 107              	    .equ GPIO_PUPDR, 12
 108              	    .equ GPIO_IDR, 16
 109              	    .equ GPIO_ODR, 20
 110              	    .equ GPIO_BSRR, 24 
 111              	    .equ GPIO_LCKR, 28
 112              	    .equ GPIO_AFRL, 32
 113              	    .equ GPIO_AFRH, 36
 114              	    
 115              	
 116              	    /* USART1 registers */
 117              	    .equ USART1_BASE_ADR, 0x40011000
 118              	    /* USARTx registers offset */
 119              	    .equ USART_SR, 0
 120              	    .equ USART_DR,4
 121              	    .equ USART_BRR,8
 122              	    .equ USART_CR1,12
 123              	    .equ USART_CR2,16
 124              	    .equ USART_CR3,20
 125              	    .equ USART_GTPR,24
 126              	
 127              	   /* systick */
 128              	    .equ STK_BASE_ADR, 0xE000E010
 129              	    /* registers offset */
 130              	    .equ STK_CTL, 0
 131              	    .equ STK_LOAD, 4
 132              	    .equ STK_VAL, 8
 133              	    .equ STK_CALIB, 12
 134              	
 135              	   /* system control block */
 136              	   .equ SCB_BASE_ADR, 0xE000ED00
 137              	   /* registers offset */
 138              	   .equ SCB_CPUID, 0
 139              	   .equ SCB_ICSR, 0x4 
 140              	   .equ SCB_VTOR, 0x8
 141              	   .equ SCB_AIRCR, 0xc
 142              	   .equ SCB_SCR, 0x10
 143              	   .equ SCB_CCR, 0x14
 144              	   .equ SCB_SHPR1,0x18
 145              	   .equ SCB_SHPR2,0x1c
 146              	   .equ SCB_SHPR3,0x20
 147              	   .equ SCB_SHCSR,0x24
 148              	   .equ SCB_CFSR,0x28
ARM GAS  stm32eforth.s 			page 5


 149              	   .equ SCB_MMSR,0x28
 150              	   .equ SCB_BFSR,0x29
 151              	   .equ SCB_UFSR,0x2a
 152              	   .equ SCB_HFSR,0x2c
 153              	   .equ SCB_MMAR,0x34
 154              	   .equ SCB_BFAR,0x38
 155              	   .equ SCB_AFSR,0x3c
 156              	   // key to to write in SCB_AIRCR 
 157              	   .equ SCB_VECTKEY,0x5fa 
 158              	   
 159              	   /* NVIC block */
 160              	   .equ NVIC_BASE_ADR, 0xE000E000
 161              	   .equ NVIC_ISER0, 0x100
 162              	   .equ NVIC_ISER1, 0x104
 163              	   .equ NVIC_ISER2, 0x108
 164              	   .equ NVIC_ISER3, 0x10c
 165              	   .equ NVIC_ISER4, 0x110
 166              	   .equ NVIC_ISER5, 0x114
 167              	   .equ NVIC_ISER6, 0x118
 168              	   .equ NVIC_ISER7, 0x11c
 169              	   .equ NVIC_ICER0, 0x180
 170              	   .equ NVIC_ICER1, 0x184 
 171              	   .equ NVIC_ICER2, 0x188 
 172              	   .equ NVIC_ICER3, 0x18C 
 173              	   .equ NVIC_ICER4, 0x190 
 174              	   .equ NVIC_ICER5, 0x194 
 175              	   .equ NVIC_ICER6, 0x198 
 176              	   .equ NVIC_ICER7, 0x19C 
 177              	   .equ NVIC_ISPR0, 0x200
 178              	   .equ NVIC_ISPR1, 0x204
 179              	   .equ NVIC_ISPR2, 0x208 
 180              	   .equ NVIC_ISPR3, 0x20c 
 181              	   .equ NVIC_ISPR4, 0x210 
 182              	   .equ NVIC_ISPR5, 0x214 
 183              	   .equ NVIC_ISPR6, 0x218 
 184              	   .equ NVIC_ISPR7, 0x21c 
 185              	   .equ NVIC_ICPR0, 0x280
 186              	   .equ NVIC_ICPR1, 0x284
 187              	   .equ NVIC_ICPR2, 0x288
 188              	   .equ NVIC_ICPR3, 0x28c
 189              	   .equ NVIC_ICPR4, 0x290
 190              	   .equ NVIC_ICPR5, 0x294
 191              	   .equ NVIC_ICPR6, 0x298
 192              	   .equ NVIC_ICPR7, 0x29c
 193              	   .equ NVIC_IABR0, 0x300
 194              	   .equ NVIC_IABR1, 0x304
 195              	   .equ NVIC_IABR2, 0x308
 196              	   .equ NVIC_IABR3, 0x30c
 197              	   .equ NVIC_IABR4, 0x310
 198              	   .equ NVIC_IABR5, 0x314
 199              	   .equ NVIC_IABR6, 0x318
 200              	   .equ NVIC_IABR7, 0x31c
 201              	/*  NVIC_IPR0 - NVIC_IPR59 */
 202              	   .equ NVIC_IPR_BASE, 0x400 
 203              	   .equ NVIC_STIR, 0xE00 
  81              	
  82              	/* blue pill specific constants */ 
ARM GAS  stm32eforth.s 			page 6


  83              	  .equ LED_GPIO, GPIOC_BASE_ADR
  84              	  .equ LED_PIN, 13
  85              	  .equ UART, USART1_BASE_ADR 
  86              	
  87              	/* eForth specific constants */
  88              		.equ RPP ,	RAM_END-128	/*top of return stack (RP0) */
  89              		.equ TIBB ,	RPP-128	/*terminal input buffer (TIB) */
  90              		.equ SPP ,	RPP-128	/*top of data stack (SP0) */
  91              		.equ UPP ,	0x20000200	/*start of user area (UP0) */
  92              		.equ DEND , SPP-128  /*usable RAM end */
  93              		.equ RAMOFFSET ,	UPP 	// remap
  94              		.equ FLASHOFFSET ,	0x08000200	// remap
  95              		//.equ RAMOFFSET  ,	0x00000000	/* absolute */
  96              		//.equ MAPOFFSET  ,	0x00000000	/* absolute */
  97              		.equ MAPOFFSET , (RAMOFFSET-FLASHOFFSET)
  98              		.equ IRQOFFSET , (RAM_ADR-FLASH_ADR)
  99              	
 100              	/*************************************
 101              	   system variables offset from UPP
 102              	*************************************/
 103              	  .equ SEED_OFS, 4    // prng seed 
 104              	  .equ TICKS_OFS, SEED_OFS+4  // millseconds counter
 105              	  .equ TIMER_OFS, TICKS_OFS+4  // count down timer
 106              	  .equ TORAM_OFS, TIMER_OFS+4  // compile to RAM 
 107              	  .equ IMG_SIGN_OFS, TORAM_OFS+4  // image signature  
 108              	  .equ BOOT_OFS, IMG_SIGN_OFS+4  // boot program address
 109              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
 110              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
 111              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
 112              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
 113              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
 114              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
 115              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
 116              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
 117              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
 118              	  .equ FORTH_CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
 119              	  .equ USER_CTOP_OFS, FORTH_CTOP_OFS+4  // ram free dictionary address
 120              	  .equ LASTN_OFS, USER_CTOP_OFS+4     // last word in dictionary link nfa 
 121              	  .equ VARS_END_OFS, LASTN_OFS+4 // end of system variables  
 122              	  
 123              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
 124              	  .equ RX_QUEUE_OFS, VARS_END_OFS+4 // rx queue 
 125              	  .equ RX_HEAD_OFS, RX_QUEUE_OFS+RX_QUEUE_SIZE // queue head indice 
 126              	  .equ RX_TAIL_OFS, RX_HEAD_OFS+4 // queue tail indice 
 127              	
 128              	
 129              	/***********************************************
 130              	* MACROS
 131              	*	Assemble inline direct threaded code ending.
 132              	***********************************************/
 133              		.macro _CALL fn /* low level routine call */ 
 134              	 	PUSH {LR}
 135              		BL \fn  
 136              		POP {LR}
 137              		.endm
 138              		
 139              		.macro _MOV32 R V 
ARM GAS  stm32eforth.s 			page 7


 140              		MOV \R, #\V&0xffff
 141              		MOVT \R, #\V>>16
 142              		.endm
 143              	
 144              		.macro	_NEXT /*end low level word */
 145              		BX	LR
 146              		.endm
 147              	
 148              	 	.macro	_NEST /*start high level word */
 149              		STMFD	R2!,{LR}
 150              		.endm
 151              	
 152              	 	.macro	_UNNEST	/*end high level word */
 153              		LDMFD	R2!,{PC}
 154              		.endm
 155              	
 156              	 	.macro	_DOLIT  value /*long literals */
 157              		BL	DOLIT
 158              		.word \value 
 159              		.endm
 160              	
 161              	 	.macro	_PUSH	/*push R5 on data stack*/
 162              		STR	R5,[R1,#-4]!
 163              		.endm
 164              	
 165              	 	.macro	_POP /*pop data stack to R5 */
 166              		LDR	R5,[R1],#4
 167              		.endm
 168              	
 169              		/* dictionary header for words copied to RAM */
 170              		.macro _HEADER  label, nlen, name
 171              			.section .inflash.dictinary 
 172              		LF_\label:   // link field
 173              			.word link 
 174              			.equ link , . 
 175              		_\label: .byte \nlen    // name field
 176              			.ascii "\name"
 177              			.p2align 2 
 178              		CA_\label:   // code field address 
 179              			.word \label + MAPOFFSET 
 180              			.section .text, "ax", %progbits 
 181              			.p2align 2 
 182              		\label:  // code address in .section .text 
 183              		.endm 
 184              	
 185              		/* dictionary header for words executed from flash memory */
 186              		.macro _HEADER_FL  label, nlen, name
 187              			.section .inflash.dictinary 
 188              		LF_\label:   // link field
 189              			.word link 
 190              			.equ link , . 
 191              		_\label: .byte \nlen    // name field
 192              			.ascii "\name"
 193              			.p2align 2 
 194              		CA_\label:   // code field address 
 195              			.word \label + MAPOFFSET 
 196              			.section .text, "ax", %progbits 
ARM GAS  stm32eforth.s 			page 8


 197              			.p2align 2 
 198              		\label:  // code address in .section .text 
 199              			_DOLIT FL_\label 
 200              			MOV R4,R5
 201              			_POP 
 202              			BLX  R4
 203              			_NEXT     
 204              			.section .inflash ,"ax", %progbits 
 205              			.p2align 2 
 206              			.type FL_\label, %function 
 207              		FL_\label: 
 208              		.endm 
 209              	
 210              	
 211              		.equ link, 0
 212              	
 213              	
 214              	/*************************************
 215              	*   interrupt service vectors table 
 216              	**************************************/
 217              	   .section  .isr_vector,"a",%progbits
 218              	  .type  isr_vectors, %object
 219              	
 220              	isr_vectors:
 221 0000 00000000 	  .word   _mstack          /* main return stack address */
 222 0004 00000000 	  .word   reset_handler    /* startup address */
 223              	/* core interrupts || exceptions */
 224 0008 00000000 	  .word   default_handler  /*  -14 NMI */
 225 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
 226 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
 227 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
 228 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
 229 001c 00000000 	  .word   0 /* -9 */
 230 0020 00000000 	  .word   0 /* -8 */ 
 231 0024 00000000 	  .word   0 /* -7 */
 232 0028 00000000 	  .word   0	/* -6 */
 233 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
 234 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
 235 0034 00000000 	  .word   0 /* -3 */
 236 0038 00000000 	  .word   default_handler  /* -2 PendSV */
 237 003c 00000000 	  .word   systick_handler  /* -1 Systick */
 238              	 irq0:  
 239              	  /* External Interrupts */
 240 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
 241 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 242 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 243 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 244 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 245 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 246 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 247 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 248 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 249 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 250 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 251 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 252 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 253 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
ARM GAS  stm32eforth.s 			page 9


 254 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 255 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 256 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 257 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 258 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 259 008c 00000000 	  .word      0 /* IRQ19 not used */                         
 260 0090 00000000 	  .word      0 /* IRQ20 not used */                          
 261 0094 00000000 	  .word      0 /* IRQ21 not used */                          
 262 0098 00000000 	  .word      0 /* IRQ22 not used */                          
 263 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 264 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM9 global */         
 265 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM10 global */         
 266 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM11 */
 267 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 268 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 269 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 270 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 271 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event */                          
 272 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 273 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event */                          
 274 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 275 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 276 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 277 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
 278 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 279 00dc 00000000 	  .word      0 /* IRQ39, not used */                   
 280 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 281 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm , EXTI17 */                 
 282 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup, EXTI18 */                       
 283 00ec 00000000 	  .word      0 /* IRQ43, not used  */         
 284 00f0 00000000 	  .word      0 /* IRQ44, not used */         
 285 00f4 00000000 	  .word      0 /* IRQ45, not used  */
 286 00f8 00000000 	  .word      0 /* IRQ46, not used */                          
 287 00fc 00000000 	  .word      default_handler /* IRQ47, DMA1 CH8 */                          
 288 0100 00000000 	  .word      0 /* IRQ48, not used  */                   
 289 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 290 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 291 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 292 0110 00000000 	  .word      0 /* IRQ52, not used  */                   
 293 0114 00000000 	  .word      0 /* IRQ53, not used */                   
 294 0118 00000000 	  .word      0 /* IRQ54, not used */                   
 295 011c 00000000 	  .word      0 /* IRQ55, not used  */
 296 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 297 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 298 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 299 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 */ 
 300 0130 00000000 	  .word		 default_handler /* IRQ60, DMA2 CH5 */
 301 0134 00000000 	  .word		 0 /* IRQ61, not used */
 302 0138 00000000 	  .word		 0 /* IRQ62, not used */
 303 013c 00000000 	  .word		 0 /* IRQ63, not used */
 304 0140 00000000 	  .word		 0 /* IRQ64, not used */
 305 0144 00000000 	  .word		 0 /* IRQ65, not used */
 306 0148 00000000 	  .word		 0 /* IRQ66, not used */
 307 014c 00000000 	  .word		 default_handler /* IRQ67, OTG_FS */
 308 0150 00000000 	  .word		 default_handler /* IRQ68, DMA2 CH6 */
 309 0154 00000000 	  .word		 default_handler /* IRQ69, DMA2 CH7 */
 310 0158 00000000 	  .word		 default_handler /* IRQ70, DMA2 CH8 */
ARM GAS  stm32eforth.s 			page 10


 311 015c 00000000 	  .word		 default_handler /* IRQ71, USART 6 */
 312 0160 00000000 	  .word		 default_handler /* IRQ72, I2C3_EV */
 313 0164 00000000 	  .word		 default_handler /* IRQ73, I2C3_ER */
 314 0168 00000000 	  .word		 0 /* IRQ74, not used */
 315 016c 00000000 	  .word		 0 /* IRQ75, not used */
 316 0170 00000000 	  .word		 0 /* IRQ76, not used */
 317 0174 00000000 	  .word		 0 /* IRQ77, not used */
 318 0178 00000000 	  .word		 0 /* IRQ78, not used */
 319 017c 00000000 	  .word		 0 /* IRQ79, not used */
 320 0180 00000000 	  .word		 0 /* IRQ80, not used */
 321 0184 00000000 	  .word		 default_handler /* IRQ81, FPU */
 322 0188 00000000 	  .word		 0 /* IRQ82, not used */
 323 018c 00000000 	  .word		 0 /* IRQ83, not used */
 324 0190 00000000 	  .word		 default_handler /* IRQ84, SPI4 */
 325 0194 00000000 	  .word		 default_handler /* IRQ85, SPI5 */
 326              	isr_end:
 327              	  .size  isr_vectors, .-isr_vectors
 328 0198 00000000 	  .p2align 9
 328      00000000 
 328      00000000 
 328      00000000 
 328      00000000 
 329              	
 330              	/*****************************************************
 331              	* default isr handler called on unexpected interrupt
 332              	*****************************************************/
 333              	   .section  .inflash, "ax", %progbits 
 334              	   
 335              	  .type default_handler, %function
 336              	  .p2align 2 
 337              	  .global default_handler
 338              	default_handler:
 339 0000 014D     		ldr r5,exception_msg 
 340 0002 00F04FF8 		bl uart_puts 
 341 0006 39E0     		b reset_mcu    
 342              	  .size  default_handler, .-default_handler
 343              	exception_msg:
 344 0008 0C000000 		.word .+4 
 345 000c 12       		.byte 18
 346 000d 0A0D6578 		.ascii "\n\rexeption reboot!"
 346      65707469 
 346      6F6E2072 
 346      65626F6F 
 346      7421
 347 001f 00       		.p2align 2
 348              	
 349              	/*********************************
 350              		system milliseconds counter
 351              	*********************************/	
 352              	  .type systick_handler, %function
 353              	  .p2align 2 
 354              	  .global systick_handler
 355              	systick_handler:
 356 0020 4FF40073 	  _MOV32 r3,UPP
 356      C2F20003 
 357 0028 9868     	  ldr r0,[r3,#TICKS_OFS]  
 358 002a 00F10100 	  add r0,#1
ARM GAS  stm32eforth.s 			page 11


 359 002e 9860     	  str r0,[r3,#TICKS_OFS]
 360 0030 D868     	  ldr r0,[r3,#TIMER_OFS]
 361 0032 10B1     	  cbz r0, systick_exit
 362 0034 A0F10100 	  sub r0,#1
 363 0038 D860     	  str r0,[r3,#TIMER_OFS]
 364              	systick_exit:
 365 003a 7047     	  bx lr
 366              	
 367              	
 368              	
 369              	/**************************
 370              		UART RX handler
 371              	**************************/
 372              		.p2align 2
 373              		.type uart_rx_handler, %function
 374              	uart_rx_handler:
 375 003c 2DE9D002 		push {r4,r6,r7,r9}
 376 0040 4FF48054 		_MOV32 r4,UART 
 376      C4F20104 
 377 0048 2668     		ldr r6,[r4,#USART_SR]
 378 004a D4F80490 		ldr r9,[r4,#USART_DR]
 379 004e 16F0200F 		tst r6,#(1<<5) // RXNE 
 380 0052 0DD0     		beq 2f // no char received 
 381 0054 B9F1030F 		cmp r9,#3
 382 0058 0DD0     		beq user_reboot // received CTRL-C then reboot MCU 
 383 005a 03F15007 		add r7,r3,#RX_QUEUE_OFS
 384 005e 5C6E     		ldr r4,[r3,#RX_TAIL_OFS]
 385 0060 2744     		add r7,r7,r4 
 386 0062 87F80090 		strb r9,[r7]
 387 0066 04F10104 		add r4,#1 
 388 006a 04F00F04 		and r4,#(RX_QUEUE_SIZE-1)
 389 006e 5C66     		str r4,[r3,#RX_TAIL_OFS]
 390              	2:	
 391 0070 BDE8D002 		pop {r4,r6,r7,r9}
 392 0074 7047     		bx lr 
 393              	
 394              	user_reboot:
 395 0076 064D     		ldr r5,user_reboot_msg
 396 0078 00F014F8 		bl uart_puts 
 397              	reset_mcu: 
 398 007c 0348     		ldr r0,scb_adr 
 399 007e C168     		ldr r1,[r0,#SCB_AIRCR]
 400 0080 41F00401 		orr r1,#(1<<2)
 401 0084 C0F2FA51 		movt r1,#SCB_VECTKEY
 402 0088 C160     		str r1,[r0,#SCB_AIRCR]
 403 008a FEE7     		b . 
 404              		.p2align 2 
 405              	scb_adr:
 406 008c 00ED00E0 		.word SCB_BASE_ADR 
 407              	user_reboot_msg:
 408 0090 94000000 		.word .+4
 409 0094 0D       		.byte 13 
 410 0095 0D757365 		.ascii "\ruser reboot!"
 410      72207265 
 410      626F6F74 
 410      21
 411 00a2 00BF     		.p2align 2 
ARM GAS  stm32eforth.s 			page 12


 412              	
 413              	// send counted string to uart 
 414              	// input: r5 string* 
 415              		.type uart_puts,%function 
 416              	uart_puts:
 417 00a4 4FF48050 		_MOV32 r0,UART 
 417      C4F20100 
 418 00ac 15F8011B 		ldrb r1,[r5],#1 // string length
 419 00b0 0940     		ands r1,r1
 420 00b2 0CD0     	1:	beq 9f 
 421 00b4 0268     	2:  ldr r2,[r0,#USART_SR]
 422 00b6 12F08002 		ands r2,#0x80 
 423 00ba FBD0     		beq 2b 	
 424 00bc 15F8012B 		ldrb r2,[r5],#1
 425 00c0 0271     		strb r2,[r0,#USART_DR]
 426 00c2 0139     		subs r1,r1,#1 
 427 00c4 F6D1     		bne 2b 
 428 00c6 0268     	3:	ldr r2,[r0,#USART_SR]
 429 00c8 12F04002 		ands r2,#(1<<6)
 430 00cc FBD0     		beq 3b 
 431 00ce 7047     	9:  bx lr 
 432              	
 433              	
 434              	/**************************************
 435              	  reset_handler execute at MCU reset
 436              	***************************************/
 437              	  .type  reset_handler, %function
 438              	  .p2align 2 
 439              	  .global reset_handler
 440              	reset_handler:
 441 00d0 4FF00000 		_MOV32 r0,RAM_END
 441      C2F20200 
 442 00d8 8546     		mov sp,r0  
 443 00da 00F0BBF8 		bl	remap 
 444 00de 00F03FF8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 445 00e2 00F091F8 		bl  uart_init
 446 00e6 00F007F8 		bl forth_init 
 447 00ea 0248     		ldr r0,forth_entry
 448 00ec 40F00100 		orr r0,#1
 449 00f0 0047     		bx r0
 450              	  
 451 00f2 00BF     		.p2align 2 
 452              	forth_entry:
 453 00f4 901C0018 		.word COLD+MAPOFFSET 
 454              	
 455              		.type forth_init, %function 
 456              	forth_init:
 457 00f8 4FF40073 		_MOV32 r3,UPP 
 457      C2F20003 
 458 0100 4FF47F41 		_MOV32 R1,SPP
 458      C2F20101 
 459 0108 4FF68072 		_MOV32 R2,RPP
 459      C2F20102 
 460 0110 85EA0505 		EOR R5,R5  
 461 0114 7047     		BX LR 
 462              	
 463              	
ARM GAS  stm32eforth.s 			page 13


 464              	// test code 
 465              		.type echo, %function 
 466              	echo:
 467 0116 00F062FD 		BL KEY 
 468 011a 00F0B6F8 		BL EMIT 
 469 011e FAE7     		B  echo 	
 470              	
 471              		.type blink, %function 
 472              	blink:
 473 0120 4FF40060 		_MOV32 r0,GPIOC_BASE_ADR
 473      C4F20200 
 474 0128 4FF40054 	0:	mov r4,#1<<LED_PIN 
 475 012c 8461     		str r4,[r0,GPIO_BSRR]
 476 012e 4FF4FA74 		mov	r4,#500
 477 0132 DC60     		str r4,[R3,#TIMER_OFS] 
 478 0134 00B500F0 		_CALL timeout
 478      0EF85DF8 
 478      04EB
 479 013e 4FF00054 		mov r4,#1<<(LED_PIN+16)
 480 0142 8461     		str r4,[r0,#GPIO_BSRR]
 481 0144 4FF4FA74 		mov	r4,#500
 482 0148 DC60     		str r4,[R3,#TIMER_OFS] 
 483 014a 00B500F0 		_CALL timeout 
 483      03F85DF8 
 483      04EB
 484 0154 E8E7     		b 0b 
 485              	
 486              		.type timeout, %function 
 487              	timeout:
 488 0156 DC68     		ldr r4,[r3,#TIMER_OFS]
 489 0158 2443     		orrs r4,r4
 490 015a FCD1     		bne timeout 
 491 015c 7047     		bx lr 
 492              	
 493              	
 494              	
 495              	  .type init_devices, %function
 496 015e 00BF     	  .p2align 2 
 497              	init_devices:
 498              	/* init clock to HSE 96 Mhz */
 499              	/* set 3 wait states in FLASH_ACR_LATENCY */
 500 0160 4FF47050 	  _MOV32 R0,FLASH_BASE_ADR 
 500      C4F20200 
 501 0168 4FF00301 	  mov r1,#3 
 502 016c 0160     	  str r1,[r0,#FLASH_ACR]
 503              	/* configure clock for HSE, 25 Mhz crystal */
 504              	/* enable HSE in RCC_CR */
 505 016e 4FF46050 	  _MOV32 R0,RCC_BASE_ADR 
 505      C4F20200 
 506 0176 0168     	  ldr r1,[r0,#RCC_CR]
 507 0178 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 508 017c 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 509              	/* wait HSERDY loop */
 510              	wait_hserdy:
 511 017e 0168     	  ldr r1,[r0,#RCC_CR]
 512 0180 11F4003F 	  tst r1,#(1<<17)
 513 0184 FBD0     	  beq wait_hserdy
ARM GAS  stm32eforth.s 			page 14


 514              	
 515              	/************************************************* 
 516              	   configure PLL  and source 
 517              	   SYSCLOCK=96 Mhz
 518              	   select HSE as  PLL source clock
 519              	   PLLM=50, PLLN=384, PLLP=0, PLLQ=4  
 520              	   APB1 clock is limited to 50 Mhz so divide Fsysclk by 2 
 521              	****************************************************/
 522              	  /* set RCC_PLLCFGR */
 523 0186 4FF46050 	  _MOV32 r0, RCC_BASE_ADR
 523      C4F20200 
 524 018e 46F23201 	  _MOV32 r1, (50+(384<<6)+(1<<22)+(4<<24))
 524      C0F24041 
 525 0196 4160     	  str r1,[r0,#RCC_PLLCFGR]
 526              	  /* enable PLL */
 527 0198 0168     	  ldr r1,[r0,#RCC_CR]
 528 019a 41F08071 	  orr r1, #(1<<24)
 529 019e 0160     	  str r1,[r0,#RCC_CR]
 530              	/* wait for PLLRDY */
 531              	wait_pllrdy:
 532 01a0 0168     	  ldr r1,[r0,#RCC_CR]
 533 01a2 11F0007F 	  tst r1,#(1<<25)
 534 01a6 FBD1     	  bne wait_pllrdy 
 535              	/* RCC_CFGR RTCPRE=25, PPRE1=4 */
 536 01a8 4FF48051 	  _MOV32 r1,((25<<16)+(4<<10))
 536      C0F21901 
 537 01b0 8160     	  str r1,[r0,#RCC_CFGR]
 538              	/* select PLL as sysclock SW=PLL (i.e. 2 ) */
 539 01b2 8168     	  ldr r1,[r0,#RCC_CFGR]
 540 01b4 41F00201 	  orr r1,#2
 541 01b8 8160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 542              	/* wait for SWS==2 */
 543              	wait_sws:
 544 01ba 8168     	  ldr r1,[r0,#RCC_CFGR]
 545 01bc 11F0080F 	  tst r1,#(2<<2)
 546 01c0 FBD0     	  beq wait_sws
 547              	/* now sysclock is 96 Mhz */
 548              	
 549              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 550 01c2 4FF00501 	  mov	r1, #(1)|(1<<2)		/* GPIOAEN|GPIOCEN */
 551 01c6 0163     	  str	r1, [r0, #RCC_AHB1ENR]
 552 01c8 4FF01001 	  mov	r1, #(1<<4)  /* USART1 enable */
 553 01cc 4164     	  str	r1,[r0,#RCC_APB2ENR]	
 554              	/* configure GPIOC:13 as output for user LED */
 555 01ce 4FF40060 	  _MOV32 r0,LED_GPIO 
 555      C4F20200 
 556 01d6 0168     	  ldr r1,[r0,#GPIO_MODER]
 557 01d8 6FF04062 	  mvn r2,#(3<<(2*LED_PIN))
 558 01dc 01EA0201 	  and r1,r1,r2
 559 01e0 41F08061 	  orr r1,#(1<<(2*LED_PIN))
 560 01e4 0160     	  str r1,[r0,#GPIO_MODER]
 561 01e6 4168     	  ldr r1,[r0,#GPIO_OTYPER]
 562 01e8 41F40051 	  orr r1,#(1<<LED_PIN)
 563 01ec 4160     	  str r1,[r0,#GPIO_OTYPER] // open drain 
 564              	
 565              	/* configure systicks for 1msec ticks */
 566 01ee 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
ARM GAS  stm32eforth.s 			page 15


 566      CEF20000 
 567 01f6 47F2FF61 	  _MOV32 r1,95999 
 567      C0F20101 
 568 01fe 4160     	  str r1,[r0,#STK_LOAD]
 569 0200 4FF00701 	  mov r1,#7
 570 0204 0160     	  str r1,[r0,STK_CTL]
 571 0206 7047     	  _NEXT  
 572              	
 573              	/*******************************
 574              	  initialize UART peripheral 
 575              	********************************/
 576              		.type uart_init, %function
 577              	uart_init:
 578              	/* set GPIOA PIN 9, uart TX  */
 579 0208 4FF00000 	  _MOV32 r0,GPIOA_BASE_ADR
 579      C4F20200 
 580 0210 0168     	  ldr r1,[r0,#GPIO_MODER]
 581 0212 6FF47012 	  mvn r2,#0xf<<(2*9)
 582 0216 01EA0201 	  and r1,r1,r2
 583 021a 4FF42012 	  mov r2,#0xa<<(2*9) // alternate function mode for PA9 and PA10
 584 021e 41EA0201 	  orr r1,r1,r2 
 585 0222 0160     	  str r1,[r0,#GPIO_MODER]
 586              	/* select alternate functions USART1==AF07 */ 
 587 0224 4FF4EE61 	  mov r1,#0x77<<4 
 588 0228 4162     	  str r1,[r0,#GPIO_AFRH]
 589              	/* configure USART1 registers */
 590 022a 4FF48050 	  _MOV32 r0,UART 
 590      C4F20100 
 591              	/* BAUD rate */
 592 0232 40F24131 	  mov r1,#(52<<4)+1  /* (96Mhz/16)/115200=52,0833333 quotient=52, reste=0,083333*16=1 */
 593 0236 8160     	  str r1,[r0,#USART_BRR]
 594 0238 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 595 023c C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 596              	/* enable interrupt in NVIC */
 597 023e 4FF46040 	  _MOV32 r0,NVIC_BASE_ADR
 597      CEF20000 
 598 0246 D0F80411 	  ldr r1,[r0,#NVIC_ISER1]
 599 024a 41F02001 	  orr r1,#32   
 600 024e C0F80411 	  str r1,[r0,#NVIC_ISER1]
 601 0252 7047     	  bx lr 
 602              	
 603              	/* copy system to RAM */ 
 604              		.type remap, %function 
 605              	
 606              	remap:
 607              	// tranfert isr_vector to RAM at 0x20000000
 608 0254 4FF00000 		_MOV32 r0,RAM_ADR
 608      C2F20000 
 609 025c 81EA0101 		eor r1,r1
 610 0260 4FF4CC72 		mov r2,#(isr_end-isr_vectors) 
 611 0264 51F8043B 	1:	ldr r3,[r1],#4
 612 0268 40F8043B 		str r3,[r0],#4
 613 026c 043A     		subs r2,#4
 614 026e F9D1     		bne 1b
 615              	// set new vector table address
 616 0270 4FF46D40 		_MOV32 r0,SCB_BASE_ADR
 616      CEF20000 
ARM GAS  stm32eforth.s 			page 16


 617 0278 4FF00001 		_MOV32 r1,RAM_ADR 
 617      C2F20001 
 618 0280 8160     		str r1,[r0,#SCB_VTOR]
 619              	// copy system variable and code 	
 620 0282 0D48     		ldr r0,remap_dest
 621 0284 0B49     		ldr r1,remap_src 
 622 0286 41F6F042 		mov r2,#CTOP-UZERO 
 623 028a 02F10302 		add r2,r2,#3
 624 028e 22F00302 		and r2,r2,#~3 
 625 0292 51F8043B 	1:	ldr r3,[r1],#4 
 626 0296 40F8043B 		str r3,[r0],#4 
 627 029a 043A     		subs R2,#4 
 628 029c F9D1     		bne 1b
 629              	// zero end of RAM 
 630 029e 4FF00002 		_MOV32 r2,RAM_END 
 630      C2F20202 
 631 02a6 83EA0303 		eor r3,r3,r3 
 632 02aa 40F8043B 	2:  str r3,[r0],#4
 633 02ae 9042     		cmp r0,r2 
 634 02b0 FBDB     		blt 2b 
 635 02b2 7047     		_NEXT 
 636              	remap_src:
 637 02b4 00000000 		.word UZERO 
 638              	remap_dest:
 639 02b8 00020020 		.word RAMOFFSET 
 640              	
 641              	/********************
 642              	* Version control
 643              	*******************/
 644              	.equ VER ,	0x01	/*major release version */
 645              	.equ EXT ,	0x00	/*minor extension */
 646              	
 647              	/* Constants */
 648              	
 649              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 650              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 651              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 652              	
 653              	.equ CELLL ,	4	/*size of a cell */
 654              	.equ BASEE ,	10	/*default radix */
 655              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 656              	
 657              	.equ BKSPP ,	8	/*backspace */
 658              	.equ LF ,	10	  /*line feed */
 659              	.equ CRR ,	13	/*carriage return */
 660              	.equ ERR ,	27	/*error escape */
 661              	.equ TIC ,	39	/*tick */
 662              	
 663              	/********************************************************
 664              	* RAM memory mapping
 665              	* 	0x20000000	RAM base address
 666              	*	0x20000000  system variables	
 667              	* 	0x20000100	Forth dictionary
 668              	* 	0x2000????	top of dictionary, HERE
 669              	* 	0x2000????	WORD buffer, HERE+16
 670              	*   0x20004E00  end of user space
 671              	* 	0x20004E80	top of data stack  R2
ARM GAS  stm32eforth.s 			page 17


 672              	* 	0x20004E80	TIB terminal input buffer
 673              	* 	0x20004F80	top of return stack  R1
 674              	* 	0x20005000	top of hardware stack for interrupts R14
 675              	********************************************************/
 676              	
 677              	
 678              	/******************************************************
 679              	*  COLD start moves the following to USER variables.
 680              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 681              	******************************************************/
 682              		.section  .text, "ax" ,%progbits 
 683              		.p2align 2
 684              	
 685              	UZERO:
 686 0000 00000000 		.word 0  			/*Reserved */
 687 0004 55AA0000 		.word 0xaa55 /* SEED  */ 
 688 0008 00000000 		.word 0      /* MSEC */
 689 000c 00000000 	    .word 0     /* TIMER */
 690 0010 FFFFFFFF 		.word -1    /* >RAM */ 
 691 0014 494D4147 		.ascii "IMAG" /* signature */ 
 692 0018 341C0018 		.word HI+MAPOFFSET  /*'BOOT */
 693 001c 0A000000 		.word BASEE 	/*BASE */
 694 0020 00000000 		.word 0			/*tmp */
 695 0024 00000000 		.word 0			/*SPAN */
 696 0028 00000000 		.word 0			/*>IN */
 697 002c 00000000 		.word 0			/*#TIB */
 698 0030 00FF0120 		.word TIBB	/*TIB */
 699 0034 80110018 		.word INTER+MAPOFFSET	/*'EVAL */
 700 0038 00000000 		.word 0			/*HLD */
 701 003c E40B0000 		.word _LASTN	/*CONTEXT */
 702 0040 F01C0000 		.word CTOP  	/* FCP end of system dictionnary */
 703 0044 F01C0018 		.word CTOP+MAPOFFSET	/* CP end of RAM dictionary RAM */
 704 0048 E40B0000 		.word _LASTN	/*LAST word in dictionary */
 705 004c 00000000 		.word 0,0			/*reserved */
 705      00000000 
 706              	ULAST:
 707 0054 00000000 		.space  RX_QUEUE_SIZE+8 /* space reserved for rx_queue,head and tail pointer.
 707      00000000 
 707      00000000 
 707      00000000 
 707      00000000 
 708              	
 709              	
 710              	/***********************************
 711              	//  Start of Forth dictionary
 712              	***********************************/
 713              	
 714 006c AFF30080 		.p2align 4
 715              	
 716              	// RST-IVEC ( n -- )
 717              	// reset interrupt vector n to default_handler
 718              		_HEADER RSTIVEC,8,"RST-IVEC"
 719 0070 42F804ED 		_NEST 
 720 0074 00F089F8 		_DOLIT default_handler 
 720      00000000 
 721 007c 00F0E2F8 		BL	SWAP 
 722 0080 00F04EF9 		BL	CELLS 
ARM GAS  stm32eforth.s 			page 18


 723 0084 00F081F8 		_DOLIT irq0+IRQOFFSET  
 723      40000018 
 724 008c 00F00EF9 		BL	PLUS 
 725 0090 00F0ACF8 		BL	STORE 
 726 0094 52F804FB 		_UNNEST 
 727              	
 728              	//	SET-IVEC ( a n -- )
 729              	// set interrupt vector address 
 730              		_HEADER SETIVEC,8,"SET-IVEC"
 731 0098 42F804ED 		_NEST
 732 009c 00F0D2F8 		BL	SWAP 
 733 00a0 00F020F9 		BL 	ONEP 
 734 00a4 00F0CEF8 		BL	SWAP  
 735 00a8 00F03AF9 		BL CELLS 
 736 00ac 00F06DF8 		_DOLIT irq0+IRQOFFSET  
 736      40000018 
 737 00b4 00F0FAF8 		BL	PLUS 
 738 00b8 00F098F8 		BL 	STORE 
 739 00bc 52F804FB 		_UNNEST 
 740              	
 741              	
 742              	// RANDOM ( n1 -- {0..n1-1} )
 743              	// return pseudo random number 
 744              	// REF: https://en.wikipedia.org/wiki/Xorshift
 745              	
 746              		_HEADER RAND,6,RANDOM 
 747 00c0 42F804ED 		_NEST 
 748 00c4 00F0D2F9 		bl SEED 
 749 00c8 00F096F8 		bl AT 
 750 00cc 4FEA4534 		lsl r4,r5,#13
 751 00d0 85EA0405 		eor r5,r4
 752 00d4 4FEA5544 		lsr r4,r5,#17
 753 00d8 85EA0405 		eor r5,r4
 754 00dc 4FEA4514 		lsl r4,r5,#5
 755 00e0 85EA0405 		eor r5,r4
 756 00e4 00F0AAF8 		bl DUPP 
 757 00e8 00F0C0F9 		bl SEED 
 758 00ec 00F07EF8 		bl STORE 
 759 00f0 00F050F9 		bl ABSS
 760 00f4 00F0A6F8 		bl SWAP 
 761 00f8 00F094FA 		bl MODD 
 762 00fc 52F804FB 		_UNNEST 
 763              	
 764              	// PAUSE ( u -- ) 
 765              	// suspend execution for u milliseconds
 766              		_HEADER PAUSE,5,PAUSE 
 767 0100 42F804ED 		_NEST 
 768 0104 00F0BEF9 		BL TIMER 
 769 0108 00F070F8 		BL STORE 
 770              	PAUSE_LOOP:
 771 010c 00F0BAF9 		BL TIMER 
 772 0110 00F072F8 		BL AT 
 773 0114 00F056F8 		BL QBRAN 
 774 0118 24010000 		.word PAUSE_EXIT 
 775 011c 00F05EF8 		BL BRAN 
 776 0120 0C010000 		.word PAUSE_LOOP 
 777              	PAUSE_EXIT: 		
ARM GAS  stm32eforth.s 			page 19


 778 0124 52F804FB 		_UNNEST 
 779              	
 780              	//  ULED ( T|F -- )
 781              	// control user LED, -1 ON, 0 OFF  
 782              		_HEADER ULED,4,ULED
 783 0128 4FF40056 		mov r6,#(1<<LED_PIN)
 784 012c 4FF40064 		_MOV32 r4,LED_GPIO 
 784      C4F20204 
 785 0134 2800     		movs r0,r5 
 786 0136 51F8045B 		_POP
 787 013a 01D0     		beq ULED_OFF 
 788 013c 4FEA0646 		LSL r6,#16 
 789              	ULED_OFF:
 790 0140 A661     		str r6,[r4,#GPIO_BSRR]
 791 0142 7047     		_NEXT 
 792              		
 793              	//    ?KEY	 ( -- c T | F )
 794              	// 	Return input character and true, or a false if no input.
 795              		_HEADER QRX,4,"?KEY"
 796              	QKEY: 
 797 0144 41F8045D 		_PUSH
 798 0148 5F6E     		ldr r7,[r3,#RX_TAIL_OFS] 
 799 014a 1E6E     		ldr r6,[r3,#RX_HEAD_OFS]
 800 014c 96EA0705 		eors r5,r6,r7 
 801 0150 0CD0     		beq 1f
 802 0152 03F15007 		add r7,r3,#RX_QUEUE_OFS 
 803 0156 3744     		add r7,r6 
 804 0158 3D78     		ldrb r5,[r7]
 805 015a 06F10106 		add r6,#1 
 806 015e 06F00F06 		and r6,#(RX_QUEUE_SIZE-1)
 807 0162 1E66     		str r6,[R3,#RX_HEAD_OFS]
 808 0164 41F8045D 		_PUSH 
 809 0168 4FF0FF35 		mov r5,#-1
 810 016c 7047     	1:	_NEXT 
 811 016e 00BF     		.p2align 2 
 812              	
 813              	//    TX!	 ( c -- )
 814              	// 	Send character c to the output device.
 815              		_HEADER EMIT,4,EMIT
 816              	TECHO:
 817 0170 4FF48054 		_MOV32 r4,UART 
 817      C4F20104 
 818 0178 2668     	1:	ldr	r6, [r4, #USART_SR]	
 819 017a 16F08006 		ands	r6, #0x80		//  TXE bit 
 820 017e FBD0     		beq	1b
 821 0180 2571     		strb	r5, [r4, #USART_DR]	
 822 0182 51F8045B 		_POP
 823 0186 7047     		_NEXT 
 824              		
 825              	// **************************************************************************
 826              	//  The kernel
 827              	
 828              	//    NOP	( -- )
 829              	// 	do nothing.
 830              		_HEADER NOP,3,NOP 
 831 0188 7047     		_NEXT
 832              	 
ARM GAS  stm32eforth.s 			page 20


 833              	
 834              	//    doLIT	( -- w )
 835              	// 	Push an inline literal.
 836              	
 837              	// 	.word	_NOP+MAPOFFSET
 838              	// _LIT	.byte   COMPO+5
 839              	// 	.ascii "doLIT"
 840              	// 	.p2align 2 	
 841              	DOLIT:
 842 018a 41F8045D 		_PUSH				//  store R5 on data stack
 843 018e 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 844 0192 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 845 0196 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 846 019a 7047     		_NEXT
 847              	
 848              	//    EXECUTE	( ca -- )
 849              	// 	Execute the word at ca.
 850              		_HEADER EXECU,7,EXECUTE 
 851 019c 45F00104 		ORR	R4,R5,#1		//  b0=1 
 852 01a0 51F8045B 		_POP
 853 01a4 2047     		BX	R4
 854              	
 855              	//    next	( -- ) counter on R:
 856              	// 	Run time code for the single index loop.
 857              	// 	: next ( -- ) \ hilevel model
 858              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 859              	
 860              	// 	.word	_EXECU+MAPOFFSET
 861              	// _DONXT	.byte   COMPO+4
 862              	// 	.ascii "next"
 863              	// 	.p2align 2 	
 864              	DONXT:
 865 01a6 1468     		LDR	R4,[R2]   // ( -- u )  
 866 01a8 24B9     		CBNZ R4,NEXT1 
 867              		/* loop done */
 868 01aa 02F10402 		ADD	R2,R2,#4 // drop counter 
 869 01ae 0EF1040E 		ADD	LR,LR,#4 // skip after loop address 
 870 01b2 7047     		_NEXT
 871              	NEXT1:
 872              		/* decrement loop counter */
 873 01b4 A4F10104 		SUB	R4,R4,#1
 874 01b8 1460     		STR	R4,[R2]
 875 01ba 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 876 01be 4EF0010E 		ORR	LR,LR,#1 // begining of loop
 877 01c2 7047     		_NEXT
 878              	
 879              	//    ?branch	( f -- )
 880              	// 	Branch if flag is zero.
 881              	
 882              	// 	.word	_DONXT+MAPOFFSET
 883              	// _QBRAN	.byte   COMPO+7
 884              	// 	.ascii "?branch"
 885              	// 	.p2align 2 	
 886              	QBRAN:
 887 01c4 2C00     		MOVS	R4,R5
 888 01c6 51F8045B 		_POP
 889 01ca 04D1     		BNE	QBRAN1
ARM GAS  stm32eforth.s 			page 21


 890 01cc 5EF801EC 		LDR	LR,[LR,#-1]
 891 01d0 4EF0010E 		ORR LR,LR,#1
 892 01d4 7047     		_NEXT
 893              	QBRAN1:
 894 01d6 0EF1040E 	 	ADD	LR,LR,#4
 895 01da 7047     		_NEXT
 896              	
 897              	//    branch	( -- )
 898              	// 	Branch to an inline address.
 899              	
 900              	// 	.word	_QBRAN+MAPOFFSET
 901              	// _BRAN	.byte   COMPO+6
 902              	// 	.ascii "branch"
 903              	// 	.p2align 2 	
 904              	BRAN:
 905 01dc 5EF801EC 		LDR	LR,[LR,#-1]
 906 01e0 4EF0010E 		ORR	LR,LR,#1
 907 01e4 7047     		_NEXT
 908              	
 909              	//    EXIT	(  -- )
 910              	// 	Exit the currently executing command.
 911 01e6 00BF     		_HEADER EXIT,4,EXIT 
 912 01e8 52F804FB 		_UNNEST 
 913              	
 914              	//    !	   ( w a -- )
 915              	// 	Pop the data stack to memory.
 916              		_HEADER STORE,1,"!"
 917 01ec 51F8044B 		LDR	R4,[R1],#4
 918 01f0 2C60     		STR	R4,[R5]
 919 01f2 51F8045B 		_POP
 920 01f6 7047     		_NEXT
 921              	
 922              	//    @	   ( a -- w )
 923              	// 	Push memory location to the data stack.
 924              		_HEADER AT,1,"@"
 925 01f8 2D68     		LDR	R5,[R5]
 926 01fa 7047     		_NEXT
 927              	
 928              	//    C!	  ( c b -- )
 929              	// 	Pop the data stack to byte memory.
 930              		_HEADER CSTOR,2,"C!"
 931 01fc 51F8044B 		LDR	R4,[R1],#4
 932 0200 2C70     		STRB	R4,[R5]
 933 0202 51F8045B 		_POP
 934 0206 7047     		_NEXT
 935              	
 936              	//    C@	  ( b -- c )
 937              	// 	Push byte memory location to the data stack.
 938              		_HEADER CAT,2,"C@"
 939 0208 2D78     		LDRB	R5,[R5]
 940 020a 7047     		_NEXT
 941              	
 942              	//    R>	  ( -- w )
 943              	// 	Pop the return stack to the data stack.
 944              		_HEADER RFROM,2,"R>"
 945 020c 41F8045D 		_PUSH
 946 0210 52F8045B 		LDR	R5,[R2],#4
ARM GAS  stm32eforth.s 			page 22


 947 0214 7047     		_NEXT
 948              	
 949              	//    R@	  ( -- w )
 950              	// 	Copy top of return stack to the data stack.
 951 0216 00BF     		_HEADER RAT,2,"R@"
 952 0218 41F8045D 		_PUSH
 953 021c 1568     		LDR	R5,[R2]
 954 021e 7047     		_NEXT
 955              	
 956              	//    >R	  ( w -- )
 957              	// 	Push the data stack to the return stack.
 958              		_HEADER TOR,2+COMPO,">R"
 959 0220 42F8045D 		STR	R5,[R2,#-4]!
 960 0224 51F8045B 		_POP
 961 0228 7047     		_NEXT  
 962              	
 963              	//    SP@	 ( -- a )
 964              	// 	Push the current data stack pointer.
 965 022a 00BF     		_HEADER SPAT,3,"SP@"
 966 022c 41F8045D 		_PUSH
 967 0230 0D46     		MOV	R5,R1
 968 0232 7047     		_NEXT
 969              	
 970              	//    DROP	( w -- )
 971              	// 	Discard top stack item.
 972              		_HEADER DROP,4,DROP
 973 0234 51F8045B 		_POP
 974 0238 7047     		_NEXT
 975              	
 976              	//    DUP	 ( w -- w w )
 977              	// 	Duplicate the top stack item.
 978 023a 00BF     		_HEADER DUPP,3,"DUP"
 979 023c 41F8045D 		_PUSH
 980 0240 7047     		_NEXT
 981              	
 982              	//    SWAP	( w1 w2 -- w2 w1 )
 983              	// 	Exchange top two stack items.
 984 0242 00BF     		_HEADER SWAP,4,"SWAP"
 985 0244 0C68     		LDR	R4,[R1]
 986 0246 0D60     		STR	R5,[R1]
 987 0248 2546     		MOV	R5,R4
 988 024a 7047     		_NEXT
 989              	
 990              	//    OVER	( w1 w2 -- w1 w2 w1 )
 991              	// 	Copy second stack item to top.
 992              		_HEADER OVER,4,"OVER"
 993 024c 41F8045D 		_PUSH
 994 0250 4D68     		LDR	R5,[R1,#4]
 995 0252 7047     		_NEXT
 996              	
 997              	//    0<	  ( n -- t )
 998              	// 	Return true if n is negative.
 999              		_HEADER ZLESS,2,"0<"
 1000 0254 4FF00004 		MOV	R4,#0
 1001 0258 04EB2505 		ADD	R5,R4,R5,ASR #32
 1002 025c 7047     		_NEXT
 1003              	
ARM GAS  stm32eforth.s 			page 23


 1004              	//    AND	 ( w w -- w )
 1005              	// 	Bitwise AND.
 1006 025e 00BF     		_HEADER ANDD,3,"AND"
 1007 0260 51F8044B 		LDR	R4,[R1],#4
 1008 0264 05EA0405 		AND	R5,R4
 1009 0268 7047     		_NEXT
 1010              	
 1011              	//    OR	  ( w w -- w )
 1012              	// 	Bitwise inclusive OR.
 1013 026a 00BF     		_HEADER ORR,2,"OR"
 1014 026c 51F8044B 		LDR	R4,[R1],#4
 1015 0270 45EA0405 		ORR	R5,R4
 1016 0274 7047     		_NEXT
 1017              	
 1018              	//    XOR	 ( w w -- w )
 1019              	// 	Bitwise exclusive OR.
 1020 0276 00BF     		_HEADER XORR,3,"XOR"
 1021 0278 51F8044B 		LDR	R4,[R1],#4
 1022 027c 85EA0405 		EOR	R5,R4
 1023 0280 7047     		_NEXT
 1024              	
 1025              	//    UM+	 ( w w -- w cy )
 1026              	// 	Add two numbers, return the sum and carry flag.
 1027 0282 00BF     		_HEADER UPLUS,3,"UM+"
 1028 0284 0C68     		LDR	R4,[R1]
 1029 0286 6419     		ADDS	R4,R4,R5
 1030 0288 4FF00005 		MOV	R5,#0
 1031 028c 45F10005 		ADC	R5,R5,#0
 1032 0290 0C60     		STR	R4,[R1]
 1033 0292 7047     		_NEXT
 1034              	
 1035              	//    RSHIFT	 ( w # -- w )
 1036              	// 	arithmetic Right shift # bits.
 1037              		_HEADER RSHIFT,6,"RSHIFT"
 1038 0294 51F8044B 		LDR	R4,[R1],#4
 1039 0298 44FA05F5 		MOV	R5,R4,ASR R5
 1040 029c 7047     		_NEXT
 1041              	
 1042              	//    LSHIFT	 ( w # -- w )
 1043              	// 	Right shift # bits.
 1044 029e 00BF     		_HEADER LSHIFT,6,"LSHIFT"
 1045 02a0 51F8044B 		LDR	R4,[R1],#4
 1046 02a4 04FA05F5 		MOV	R5,R4,LSL R5
 1047 02a8 7047     		_NEXT
 1048              	
 1049              	//    +	 ( w w -- w )
 1050              	// 	Add.
 1051 02aa 00BF     		_HEADER PLUS,1,"+"
 1052 02ac 51F8044B 		LDR	R4,[R1],#4
 1053 02b0 2544     		ADD	R5,R5,R4
 1054 02b2 7047     		_NEXT
 1055              	
 1056              	//    -	 ( w w -- w )
 1057              	// 	Subtract.
 1058              		_HEADER SUBB,1,"-"
 1059 02b4 51F8044B 		LDR	R4,[R1],#4
 1060 02b8 C5EB0405 		RSB	R5,R5,R4
ARM GAS  stm32eforth.s 			page 24


 1061 02bc 7047     		_NEXT
 1062              	
 1063              	//    *	 ( w w -- w )
 1064              	// 	Multiply.
 1065 02be 00BF     		_HEADER STAR,1,"*"
 1066 02c0 51F8044B 		LDR	R4,[R1],#4
 1067 02c4 04FB05F5 		MUL	R5,R4,R5
 1068 02c8 7047     		_NEXT
 1069              	
 1070              	//    UM*	 ( w w -- ud )
 1071              	// 	Unsigned multiply.
 1072 02ca 00BF     		_HEADER UMSTA,3,"UM*"
 1073 02cc 0C68     		LDR	R4,[R1]
 1074 02ce A5FB0467 		UMULL	R6,R7,R5,R4
 1075 02d2 0E60     		STR	R6,[R1]
 1076 02d4 3D46     		MOV	R5,R7
 1077 02d6 7047     		_NEXT
 1078              	
 1079              	//    M*	 ( w w -- d )
 1080              	// 	signed multiply.
 1081              		_HEADER MSTAR,2,"M*"
 1082 02d8 0C68     		LDR	R4,[R1]
 1083 02da 85FB0467 		SMULL	R6,R7,R5,R4
 1084 02de 0E60     		STR	R6,[R1]
 1085 02e0 3D46     		MOV	R5,R7
 1086 02e2 7047     		_NEXT
 1087              	
 1088              	//    1+	 ( w -- w+1 )
 1089              	// 	Add 1.
 1090              		_HEADER ONEP,2,"1+"
 1091 02e4 05F10105 		ADD	R5,R5,#1
 1092 02e8 7047     		_NEXT
 1093              	
 1094              	//    1-	 ( w -- w-1 )
 1095              	// 	Subtract 1.
 1096 02ea 00BF     		_HEADER ONEM,2,"1-"
 1097 02ec A5F10105 		SUB	R5,R5,#1
 1098 02f0 7047     		_NEXT
 1099              	
 1100              	//    2+	 ( w -- w+2 )
 1101              	// 	Add 1.
 1102 02f2 00BF     		_HEADER TWOP,2,"2+"
 1103 02f4 05F10205 		ADD	R5,R5,#2
 1104 02f8 7047     		_NEXT
 1105              	
 1106              	//    2-	 ( w -- w-2 )
 1107              	// 	Subtract 2.
 1108 02fa 00BF     		_HEADER TWOM,2,"2-"
 1109 02fc A5F10205 		SUB	R5,R5,#2
 1110 0300 7047     		_NEXT
 1111              	
 1112              	//    CELL+	( w -- w+4 )
 1113              	// 	Add CELLL.
 1114 0302 00BF     		_HEADER CELLP,5,"CELL+"
 1115 0304 05F10405 		ADD	R5,R5,#CELLL
 1116 0308 7047     		_NEXT
 1117              	
ARM GAS  stm32eforth.s 			page 25


 1118              	//    CELL-	( w -- w-4 )
 1119              	// 	Subtract CELLL.
 1120 030a 00BF     		_HEADER CELLM,5,"CELL-"
 1121 030c A5F10405 		SUB	R5,R5,#CELLL
 1122 0310 7047     		_NEXT
 1123              	 
 1124              	//    BL	( -- 32 )
 1125              	// 	Blank (ASCII space).
 1126 0312 00BF     		_HEADER BLANK,2,"BL"
 1127 0314 41F8045D 		_PUSH
 1128 0318 4FF02005 		MOV	R5,#32
 1129 031c 7047     		_NEXT
 1130              	
 1131              	//    CELLS	( w -- w*4 )
 1132              	// 	Multiply 4.
 1133 031e 00BF     		_HEADER CELLS,5,"CELLS"
 1134 0320 4FEA8505 		MOV	R5,R5,LSL#2
 1135 0324 7047     		_NEXT
 1136              	
 1137              	//    CELL/	( w -- w/4 )
 1138              	// 	Divide by 4.
 1139 0326 00BF     		_HEADER CELLSL,5,"CELL/"
 1140 0328 4FEAA505 		MOV	R5,R5,ASR#2
 1141 032c 7047     		_NEXT
 1142              	
 1143              	//    2*	( w -- w*2 )
 1144              	// 	Multiply 2.
 1145 032e 00BF     		_HEADER TWOST,2,"2*"
 1146 0330 4FEA4505 		MOV	R5,R5,LSL#1
 1147 0334 7047     		_NEXT
 1148              	
 1149              	//    2/	( w -- w/2 )
 1150              	// 	Divide by 2.
 1151 0336 00BF     		_HEADER TWOSL,2,"2/"
 1152 0338 4FEA6505 		MOV	R5,R5,ASR#1
 1153 033c 7047     		_NEXT
 1154              	
 1155              	//    ?DUP	( w -- w w | 0 )
 1156              	// 	Conditional duplicate.
 1157 033e 00BF     		_HEADER QDUP,4,"?DUP"
 1158 0340 2C00     		MOVS	R4,R5
 1159 0342 18BF     		IT NE 
 1160 0344 41F8045D 	    STRNE	R5,[R1,#-4]!
 1161 0348 7047     		_NEXT
 1162              	
 1163              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1164              	// 	Rotate top 3 items.
 1165 034a 00BF     		_HEADER ROT,3,"ROT"
 1166 034c 0C68     		LDR	R4,[R1]  // r4=w2 
 1167 034e 0D60     		STR	R5,[R1]  // w3 replace w2 
 1168 0350 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1169 0352 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1170 0354 7047     		_NEXT
 1171              	
 1172              	//    2DROP	( w1 w2 -- )
 1173              	// 	Drop top 2 items.
 1174 0356 00BF     		_HEADER DDROP,5,"2DROP"
ARM GAS  stm32eforth.s 			page 26


 1175 0358 51F8045B 		_POP
 1176 035c 51F8045B 		_POP
 1177 0360 7047     		_NEXT
 1178              	
 1179              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1180              	// 	Duplicate top 2 items.
 1181 0362 00BF     		_HEADER DDUP,4,"2DUP"
 1182 0364 0C68     		LDR	R4,[R1] // r4=w1
 1183 0366 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1184 036a 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1185 036e 7047     		_NEXT
 1186              	
 1187              	//    D+	( d1 d2 -- d3 )
 1188              	// 	Add top 2 double numbers.
 1189              		_HEADER DPLUS,2,"D+"
 1190 0370 51F8044B 		LDR	R4,[R1],#4
 1191 0374 51F8046B 		LDR	R6,[R1],#4
 1192 0378 0F68     		LDR	R7,[R1]
 1193 037a E419     		ADDS	R4,R4,R7
 1194 037c 0C60     		STR	R4,[R1]
 1195 037e 45EB0605 		ADC	R5,R5,R6
 1196 0382 7047     		_NEXT
 1197              	
 1198              	//    NOT	 ( w -- !w )
 1199              	// 	1"s complement.
 1200              		_HEADER INVER,3,"NOT"
 1201 0384 6FEA0505 		MVN	R5,R5
 1202 0388 7047     		_NEXT
 1203              	
 1204              	//    NEGATE	( w -- -w )
 1205              	// 	2's complement.
 1206 038a 00BF     		_HEADER NEGAT,6,"NEGATE"
 1207 038c C5F10005 		RSB	R5,R5,#0
 1208 0390 7047     		_NEXT
 1209              	
 1210              	//    ABS	 ( w -- |w| )
 1211              	// 	Absolute.
 1212 0392 00BF     		_HEADER ABSS,3,"ABS"
 1213 0394 15F0004F 		TST	R5,#0x80000000
 1214 0398 18BF     		IT NE
 1215 039a 6D42     	    RSBNE   R5,R5,#0
 1216 039c 7047     		_NEXT
 1217              	
 1218              	//  0= ( w -- f )
 1219              	// TOS==0?
 1220 039e 00BF     		_HEADER ZEQUAL,2,"0="
 1221 03a0 15B9     		cbnz r5,1f
 1222 03a2 4FF0FF35 		mov r5,#-1
 1223 03a6 7047     		_NEXT 
 1224 03a8 85EA0505 	1:  eor r5,r5,r5  
 1225 03ac 7047     		_NEXT 	
 1226              	
 1227              	//    =	 ( w w -- t )
 1228              	// 	Equal?
 1229 03ae 00BF     		_HEADER EQUAL,1,"="
 1230 03b0 51F8044B 		LDR	R4,[R1],#4
 1231 03b4 A542     		CMP	R5,R4
ARM GAS  stm32eforth.s 			page 27


 1232 03b6 0CBF     		ITE EQ 
 1233 03b8 6FF00005 	    MVNEQ	R5,#0
 1234 03bc 0025     		MOVNE	R5,#0
 1235 03be 7047     		_NEXT
 1236              	
 1237              	//    U<	 ( w w -- t )
 1238              	// 	Unsigned equal?
 1239              		_HEADER ULESS,2,"U<"
 1240 03c0 51F8044B 		LDR	R4,[R1],#4
 1241 03c4 AC42     		CMP	R4,R5
 1242 03c6 34BF     		ITE CC 
 1243 03c8 6FF00005 		MVNCC	R5,#0
 1244 03cc 0025     		MOVCS	R5,#0
 1245 03ce 7047     		_NEXT
 1246              	
 1247              	//    <	( w w -- t )
 1248              	// 	Less?
 1249              		_HEADER LESS,1,"<"
 1250 03d0 51F8044B 		LDR	R4,[R1],#4
 1251 03d4 AC42     		CMP	R4,R5
 1252 03d6 B4BF     	    ITE LT
 1253 03d8 6FF00005 		MVNLT	R5,#0
 1254 03dc 0025     		MOVGE	R5,#0
 1255 03de 7047     		_NEXT
 1256              	
 1257              	//    >	( w w -- t )
 1258              	// 	greater?
 1259              		_HEADER GREAT,1,">"
 1260 03e0 51F8044B 		LDR	R4,[R1],#4
 1261 03e4 AC42     		CMP	R4,R5
 1262 03e6 CCBF     		ITE GT
 1263 03e8 6FF00005 	    MVNGT	R5,#0
 1264 03ec 0025     		MOVLE	R5,#0
 1265 03ee 7047     		_NEXT
 1266              	
 1267              	//    MAX	 ( w w -- max )
 1268              	// 	Leave maximum.
 1269              		_HEADER MAX,3,"MAX"
 1270 03f0 51F8044B 		LDR	R4,[R1],#4
 1271 03f4 AC42     		CMP	R4,R5
 1272 03f6 C8BF     		IT GT 
 1273 03f8 2546     		MOVGT	R5,R4
 1274 03fa 7047     		_NEXT
 1275              	
 1276              	//    MIN	 ( w w -- min )
 1277              	// 	Leave minimum.
 1278              		_HEADER MIN,3,"MIN"
 1279 03fc 51F8044B 		LDR	R4,[R1],#4
 1280 0400 AC42     		CMP	R4,R5
 1281 0402 B8BF     		IT LT
 1282 0404 2546     		MOVLT	R5,R4
 1283 0406 7047     		_NEXT
 1284              	
 1285              	//    +!	 ( w a -- )
 1286              	// 	Add to memory.
 1287              		_HEADER PSTOR,2,"+!"
 1288 0408 51F8044B 		LDR	R4,[R1],#4
ARM GAS  stm32eforth.s 			page 28


 1289 040c 2E68     		LDR	R6,[R5]
 1290 040e 2644     		ADD	R6,R6,R4
 1291 0410 2E60     		STR	R6,[R5]
 1292 0412 51F8045B 		_POP
 1293 0416 7047     		_NEXT
 1294              	
 1295              	//    2!	 ( d a -- )
 1296              	// 	Store double number.
 1297              		_HEADER DSTOR,2,"2!"
 1298 0418 51F8044B 		LDR	R4,[R1],#4
 1299 041c 51F8046B 		LDR	R6,[R1],#4
 1300 0420 45F8044B 		STR	R4,[R5],#4
 1301 0424 2E60     		STR	R6,[R5]
 1302 0426 51F8045B 		_POP
 1303 042a 7047     		_NEXT
 1304              	
 1305              	//    2@	 ( a -- d )
 1306              	// 	Fetch double number.
 1307              		_HEADER DAT,2,"2@"
 1308 042c 6C68     		LDR	R4,[R5,#4]
 1309 042e 41F8044D 		STR	R4,[R1,#-4]!
 1310 0432 2D68     		LDR	R5,[R5]
 1311 0434 7047     		_NEXT
 1312              	
 1313              	//    COUNT	( b -- b+1 c )
 1314              	// 	Fetch length of string.
 1315 0436 00BF     		_HEADER COUNT,5,"COUNT"
 1316 0438 15F8014B 		LDRB	R4,[R5],#1
 1317 043c 41F8045D 		_PUSH
 1318 0440 2546     		MOV	R5,R4
 1319 0442 7047     		_NEXT
 1320              	
 1321              	//    DNEGATE	( d -- -d )
 1322              	// 	Negate double number.
 1323              		_HEADER DNEGA,7,"DNEGATE"
 1324 0444 0C68     		LDR	R4,[R1]
 1325 0446 A6EB0606 		SUB	R6,R6,R6
 1326 044a 341B     		SUBS R4,R6,R4
 1327 044c 66EB0505 		SBC	R5,R6,R5
 1328 0450 0C60     		STR	R4,[R1]
 1329 0452 7047     		_NEXT
 1330              	
 1331              	// **************************************************************************
 1332              	//  System and user variables
 1333              	
 1334              	//    doVAR	( -- a )
 1335              	// 	Run time routine for VARIABLE and CREATE.
 1336              	
 1337              	// 	.word	_DNEGA+MAPOFFSET
 1338              	// _DOVAR	.byte  COMPO+5
 1339              	// 	.ascii "doVAR"
 1340              	// 	.p2align 2 	
 1341              	DOVAR:
 1342 0454 41F8045D 		_PUSH
 1343 0458 AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
 1344 045c 52F804FB 		_UNNEST
 1345              	
ARM GAS  stm32eforth.s 			page 29


 1346              	//    doCON	( -- a ) 
 1347              	// 	Run time routine for CONSTANT.
 1348              	
 1349              	// 	.word	_DOVAR+MAPOFFSET
 1350              	// _DOCON	.byte  COMPO+5
 1351              	// 	.ascii "doCON"
 1352              	// 	.p2align 2 	
 1353              	DOCON:
 1354 0460 41F8045D 		_PUSH
 1355 0464 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1356 0468 52F804FB 		_UNNEST
 1357              	
 1358              	/***********************
 1359              	  system variables 
 1360              	***********************/
 1361              	
 1362              	 // SEED ( -- a)
 1363              	 // return PRNG seed address 
 1364              		_HEADER SEED,4,"SEED"
 1365 046c 41F8045D 		_PUSH 
 1366 0470 03F10405 		ADD R5,R3,#SEED_OFS
 1367 0474 7047     		_NEXT 	
 1368              	
 1369              	//  MSEC ( -- a)
 1370              	// return address of milliseconds counter
 1371 0476 00BF     		_HEADER MSEC,4,"MSEC"
 1372 0478 41F8045D 	  _PUSH
 1373 047c 03F10805 	  ADD R5,R3,#TICKS_OFS
 1374 0480 7047     	  _NEXT 
 1375              	
 1376              	// TIMER ( -- a )
 1377              	// count down timer 
 1378 0482 00BF     		_HEADER TIMER,5,"TIMER"
 1379 0484 41F8045D 	  _PUSH 
 1380 0488 03F10C05 	  ADD R5,R3,#TIMER_OFS
 1381 048c 7047     	  _NEXT
 1382              	
 1383              	//    'BOOT	 ( -- a )
 1384              	// 	Application.
 1385 048e 00BF     		_HEADER TBOOT,5,"'BOOT"
 1386 0490 41F8045D 		_PUSH
 1387 0494 03F11805 		ADD	R5,R3,#BOOT_OFS 
 1388 0498 7047     		_NEXT
 1389              	
 1390              	//    BASE	( -- a )
 1391              	// 	Storage of the radix base for numeric I/O.
 1392 049a 00BF     		_HEADER BASE,4,"BASE"
 1393 049c 41F8045D 		_PUSH
 1394 04a0 03F11C05 		ADD	R5,R3,#BASE_OFS
 1395 04a4 7047     		_NEXT
 1396              	
 1397              	//    tmp	 ( -- a )
 1398              	// 	A temporary storage location used in parse and find.
 1399              	
 1400              	// 	.word	_BASE+MAPOFFSET
 1401              	// _TEMP	.byte   COMPO+3
 1402              	// 	.ascii "tmp"
ARM GAS  stm32eforth.s 			page 30


 1403              	// 	.p2align 2 	
 1404              	TEMP:
 1405 04a6 41F8045D 		_PUSH
 1406 04aa 03F12005 		ADD	R5,R3,#TMP_OFS
 1407 04ae 7047     		_NEXT
 1408              	
 1409              	//    SPAN	( -- a )
 1410              	// 	Hold character count received by EXPECT.
 1411              		_HEADER SPAN,4,"SPAN"
 1412 04b0 41F8045D 		_PUSH
 1413 04b4 03F12405 		ADD	R5,R3,#SPAN_OFS
 1414 04b8 7047     		_NEXT
 1415              	
 1416              	//    >IN	 ( -- a )
 1417              	// 	Hold the character pointer while parsing input stream.
 1418 04ba 00BF     		_HEADER INN,3,">IN"
 1419 04bc 41F8045D 		_PUSH
 1420 04c0 03F12805 		ADD	R5,R3,#TOIN_OFS
 1421 04c4 7047     		_NEXT
 1422              	
 1423              	//    #TIB	( -- a )
 1424              	// 	Hold the current count and address of the terminal input buffer.
 1425 04c6 00BF     		_HEADER NTIB,4,"#TIB"
 1426 04c8 41F8045D 		_PUSH
 1427 04cc 03F12C05 		ADD	R5,R3,#NTIB_OFS
 1428 04d0 7047     		_NEXT
 1429              	
 1430              	//    'EVAL	( -- a )
 1431              	// 	Execution vector of EVAL.
 1432 04d2 00BF     		_HEADER TEVAL,5,"'EVAL"
 1433 04d4 41F8045D 		_PUSH
 1434 04d8 03F13405 		ADD	R5,R3,#EVAL_OFS
 1435 04dc 7047     		_NEXT
 1436              	
 1437              	//    HLD	 ( -- a )
 1438              	// 	Hold a pointer in building a numeric output string.
 1439 04de 00BF     		_HEADER HLD,3,"HLD"
 1440 04e0 41F8045D 		_PUSH
 1441 04e4 03F13805 		ADD	R5,R3,#HLD_OFS
 1442 04e8 7047     		_NEXT
 1443              	
 1444              	//    CONTEXT	( -- a )
 1445              	// 	A area to specify vocabulary search order.
 1446 04ea 00BF     		_HEADER CNTXT,7,"CONTEXT"
 1447              	CRRNT:
 1448 04ec 41F8045D 		_PUSH
 1449 04f0 03F13C05 		ADD	R5,R3,#CTXT_OFS
 1450 04f4 7047     		_NEXT
 1451              	
 1452              	//    CP	( -- a )
 1453              	// 	Point to top name in RAM vocabulary.
 1454 04f6 00BF     		_HEADER CPP,2,"CP"
 1455 04f8 41F8045D 		_PUSH
 1456 04fc 03F14405 		ADD	R5,R3,#USER_CTOP_OFS
 1457 0500 7047     		_NEXT
 1458              	
 1459              	//   FCP ( -- a )
ARM GAS  stm32eforth.s 			page 31


 1460              	//  Point ot top of Forth system dictionary
 1461 0502 00BF     		_HEADER FCP,3,"FCP"
 1462 0504 41F8045D 		_PUSH 
 1463 0508 03F14005 		ADD R5,R3,#FORTH_CTOP_OFS 
 1464 050c 7047     		_NEXT 
 1465              	
 1466              	//    LAST	( -- a )
 1467              	// 	Point to the last name in the name dictionary.
 1468 050e 00BF     		_HEADER LAST,4,"LAST"
 1469 0510 41F8045D 		_PUSH
 1470 0514 03F14805 		ADD	R5,R3,#LASTN_OFS
 1471 0518 7047     		_NEXT
 1472              	
 1473              	/***********************
 1474              		system constants 
 1475              	***********************/
 1476              	
 1477              	//	USER_BEGIN ( -- a )
 1478              	//  where user area begin in RAM
 1479 051a 00BF     		_HEADER USER_BEGIN,10,"USER_BEGIN"
 1480 051c 41F8045D 		_PUSH 
 1481 0520 004D     		ldr r5,USR_BGN_ADR 
 1482 0522 7047     		_NEXT 
 1483              	USR_BGN_ADR:
 1484 0524 F01C0018 	.word CTOP+MAPOFFSET 
 1485              	
 1486              	//  USER_END ( -- a )
 1487              	//  where user area end in RAM 
 1488              		_HEADER USER_END,8,"USER_END"
 1489 0528 41F8045D 		_PUSH 
 1490 052c 4FF68065 		_MOV32 R5,DEND 
 1490      C2F20105 
 1491 0534 7047     		_NEXT 
 1492              	
 1493              	//  IMG_ADR ( -- a )
 1494              	//  where user image is saved in FLASH
 1495 0536 00BF     		_HEADER IMG_ADR,7,"IMG_ADR"
 1496 0538 41F8045D 		_PUSH
 1497 053c 004D     		ldr r5,USR_IMG_ADR   
 1498 053e 7047     		_NEXT 
 1499              	USR_IMG_ADR:
 1500 0540 00000608 		.word SECTOR7_ADR  
 1501              	
 1502              	//  IMG_SIGN ( -- a )
 1503              	// image signature 
 1504              		_HEADER IMG_SIGN,8,"IMG_SIGN"
 1505 0544 41F8045D 		_PUSH 
 1506 0548 03F11405 		ADD r5,r3,#IMG_SIGN_OFS 
 1507 054c 7047     		_NEXT 
 1508              	
 1509              	/* *********************
 1510              	  Common functions
 1511              	***********************/
 1512              	
 1513              	//    WITHIN	( u ul uh -- t )
 1514              	// 	Return true if u is within the range of ul and uh.
 1515 054e 00BF     		_HEADER WITHI,6,"WITHIN"
ARM GAS  stm32eforth.s 			page 32


 1516 0550 42F804ED 		_NEST
 1517 0554 FFF77AFE 		BL	OVER
 1518 0558 FFF7ACFE 		BL	SUBB
 1519 055c FFF760FE 		BL	TOR
 1520 0560 FFF7A8FE 		BL	SUBB
 1521 0564 FFF752FE 		BL	RFROM
 1522 0568 FFF72AFF 		BL	ULESS
 1523 056c 52F804FB 		_UNNEST
 1524              	
 1525              	//  Divide
 1526              	
 1527              	//    UM/MOD	( udl udh u -- ur uq )
 1528              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1529              		_HEADER UMMOD,6,"UM/MOD"
 1530 0570 4FF00107 		MOV	R7,#1
 1531 0574 51F8044B 		LDR	R4,[R1],#4
 1532 0578 0E68     		LDR	R6,[R1]
 1533              	UMMOD0:
 1534 057a B619     		ADDS	R6,R6,R6
 1535 057c 6441     		ADCS	R4,R4,R4
 1536 057e 04D3     		BCC	UMMOD1
 1537 0580 A4EB0504 		SUB	R4,R4,R5
 1538 0584 06F10106 		ADD	R6,R6,#1
 1539 0588 04E0     		B UMMOD2
 1540              	UMMOD1:
 1541 058a 641B     		SUBS	R4,R4,R5 
 1542 058c 28BF     		IT CS 
 1543 058e 0136     		ADDCS	R6,R6,#1
 1544 0590 00D2     		BCS	UMMOD2
 1545 0592 2C44     		ADD	R4,R4,R5
 1546              	UMMOD2:
 1547 0594 FF19     		ADDS	R7,R7,R7
 1548 0596 F0D3     		BCC	UMMOD0
 1549 0598 3546     		MOV	R5,R6
 1550 059a 0C60     		STR	R4,[R1]
 1551 059c 7047     		_NEXT
 1552              	
 1553              	//    M/MOD	( d n -- r q )
 1554              	// 	Signed floored divide of double by single. Return mod and quotient.
 1555 059e 00BF     		_HEADER MSMOD,5,"M/MOD"
 1556 05a0 42F804ED 		_NEST
 1557 05a4 FFF74AFE 		BL	DUPP
 1558 05a8 FFF754FE 		BL	ZLESS
 1559 05ac FFF746FE 		BL	DUPP
 1560 05b0 FFF736FE 		BL	TOR
 1561 05b4 FFF706FE 		BL	QBRAN
 1562 05b8 CC050018 		.word	MMOD1+MAPOFFSET
 1563 05bc FFF7E6FE 		BL	NEGAT
 1564 05c0 FFF72EFE 		BL	TOR
 1565 05c4 FFF73EFF 		BL	DNEGA
 1566 05c8 FFF720FE 		BL	RFROM
 1567              	MMOD1:
 1568 05cc FFF728FE 	  BL	TOR
 1569 05d0 FFF734FE 		BL	DUPP
 1570 05d4 FFF73EFE 		BL	ZLESS
 1571 05d8 FFF7F4FD 		BL	QBRAN
 1572 05dc E8050018 		.word	MMOD2+MAPOFFSET
ARM GAS  stm32eforth.s 			page 33


 1573 05e0 FFF71AFE 		BL	RAT
 1574 05e4 FFF762FE 		BL	PLUS
 1575              	MMOD2:
 1576 05e8 FFF710FE 	  BL	RFROM
 1577 05ec FFF7C0FF 		BL	UMMOD
 1578 05f0 FFF70CFE 		BL	RFROM
 1579 05f4 FFF7E6FD 		BL	QBRAN
 1580 05f8 08060018 		.word	MMOD3+MAPOFFSET
 1581 05fc FFF722FE 		BL	SWAP
 1582 0600 FFF7C4FE 		BL	NEGAT
 1583 0604 FFF71EFE 		BL	SWAP
 1584              	MMOD3:   
 1585 0608 52F804FB 		_UNNEST
 1586              	
 1587              	//    /MOD	( n n -- r q )
 1588              	// 	Signed divide. Return mod and quotient.
 1589              		_HEADER SLMOD,4,"/MOD"
 1590 060c 42F804ED 		_NEST
 1591 0610 FFF71CFE 		BL	OVER
 1592 0614 FFF71EFE 		BL	ZLESS
 1593 0618 FFF714FE 		BL	SWAP
 1594 061c FFF7C0FF 		BL	MSMOD
 1595 0620 52F804FB 		_UNNEST
 1596              	
 1597              	//    MOD	 ( n n -- r )
 1598              	// 	Signed divide. Return mod only.
 1599              		_HEADER MODD,3,"MODD"
 1600 0624 42F804ED 		_NEST
 1601 0628 FFF7F0FF 		BL	SLMOD
 1602 062c FFF702FE 		BL	DROP
 1603 0630 52F804FB 		_UNNEST
 1604              	
 1605              	//    /	   ( n n -- q )
 1606              	// 	Signed divide. Return quotient only.
 1607              		_HEADER SLASH,1,"/"
 1608 0634 42F804ED 		_NEST
 1609 0638 FFF7E8FF 		BL	SLMOD
 1610 063c FFF702FE 		BL	SWAP
 1611 0640 FFF7F8FD 		BL	DROP
 1612 0644 52F804FB 		_UNNEST
 1613              	
 1614              	//    */MOD	( n1 n2 n3 -- r q )
 1615              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1616              		_HEADER SSMOD,5,"*/MOD"
 1617 0648 42F804ED 		_NEST
 1618 064c FFF7E8FD 		BL	TOR
 1619 0650 FFF742FE 		BL	MSTAR
 1620 0654 FFF7DAFD 		BL	RFROM
 1621 0658 FFF7A2FF 		BL	MSMOD
 1622 065c 52F804FB 		_UNNEST
 1623              	
 1624              	//    */	  ( n1 n2 n3 -- q )
 1625              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1626              		_HEADER STASL,2,"*/"
 1627 0660 42F804ED 		_NEST
 1628 0664 FFF7F0FF 		BL	SSMOD
 1629 0668 FFF7ECFD 		BL	SWAP
ARM GAS  stm32eforth.s 			page 34


 1630 066c FFF7E2FD 		BL	DROP
 1631 0670 52F804FB 		_UNNEST
 1632              	
 1633              	// **************************************************************************
 1634              	//  Miscellaneous
 1635              	
 1636              	//    ALIGNED	( b -- a )
 1637              	// 	Align address to the cell boundary.
 1638              		_HEADER ALGND,7,"ALIGNED"
 1639 0674 05F10305 		ADD	R5,R5,#3
 1640 0678 6FF00304 		MVN	R4,#3
 1641 067c 05EA0405 		AND	R5,R5,R4
 1642 0680 7047     		_NEXT
 1643              	
 1644              	//    >CHAR	( c -- c )
 1645              	// 	Filter non-printing characters.
 1646 0682 00BF     		_HEADER TCHAR,5,">CHAR"
 1647 0684 42F804ED 		_NEST
 1648 0688 FFF77FFD 		_DOLIT 0x7F
 1648      7F000000 
 1649 0690 FFF7E6FD 		BL	ANDD
 1650 0694 FFF7D2FD 		BL	DUPP	// mask msb
 1651 0698 FFF73CFE 		BL	BLANK
 1652 069c FFF775FD 		_DOLIT 127
 1652      7F000000 
 1653 06a4 FFF754FF 		BL	WITHI	// check for printable
 1654 06a8 FFF76CFE 		BL	INVER
 1655 06ac FFF78AFD 		BL	QBRAN
 1656 06b0 C0060018 		.word	TCHA1+MAPOFFSET
 1657 06b4 FFF7BEFD 		BL	DROP
 1658 06b8 FFF767FD 		_DOLIT 	'_'	// replace non-printables
 1658      5F000000 
 1659              	TCHA1:
 1660 06c0 52F804FB 		  _UNNEST
 1661              	
 1662              	//    DEPTH	( -- n )
 1663              	// 	Return the depth of the data stack.
 1664              		_HEADER DEPTH,5,"DEPTH"
 1665 06c4 4FF47F46 		_MOV32 R6,SPP 
 1665      C2F20106 
 1666 06cc A6EB0106 		SUB	R6,R6,R1
 1667 06d0 41F8045D 		_PUSH
 1668 06d4 4FEAA605 		ASR	R5,R6,#2
 1669 06d8 7047     		_NEXT  
 1670              	
 1671              	//    PICK	( ... +n -- ... w )
 1672              	// 	Copy the nth stack item to tos.
 1673 06da 00BF     		_HEADER PICK,4,"PICK"
 1674 06dc 42F804ED 		_NEST
 1675 06e0 FFF700FE 		BL	ONEP
 1676 06e4 FFF71CFE 		BL	CELLS
 1677 06e8 FFF7A0FD 		BL	SPAT
 1678 06ec FFF7DEFD 		BL	PLUS
 1679 06f0 FFF782FD 		BL	AT
 1680 06f4 52F804FB 		_UNNEST
 1681              	
 1682              	// **************************************************************************
ARM GAS  stm32eforth.s 			page 35


 1683              	//  Memory access
 1684              	
 1685              	//    HERE	( -- a )
 1686              	// 	Return the top of the code dictionary.
 1687              		_HEADER HERE,4,"HERE"
 1688 06f8 42F804ED 		_NEST
 1689 06fc FFF7FCFE 		BL	CPP
 1690 0700 FFF77AFD 		BL	AT
 1691 0704 52F804FB 		_UNNEST
 1692              		
 1693              	//    PAD	 ( -- a )
 1694              	// 	Return the address of a temporary buffer.
 1695              		_HEADER PAD,4,"PAD"
 1696 0708 42F804ED 		_NEST
 1697 070c FFF7F4FF 		BL	HERE
 1698 0710 05F15005 		ADD	R5,R5,#80
 1699 0714 52F804FB 		_UNNEST
 1700              	
 1701              	//    TIB	 ( -- a )
 1702              	// 	Return the address of the terminal input buffer.
 1703              		_HEADER TIB,3,"TIB"
 1704 0718 41F8045D 		_PUSH
 1705 071c 1D6B     		ldr r5,[r3,#TIB_OFS]
 1706 071e 7047     		_NEXT
 1707              	
 1708              	//    @EXECUTE	( a -- )
 1709              	// 	Execute vector stored in address a.
 1710              		_HEADER ATEXE,8,"@EXECUTE"
 1711 0720 2C00     		MOVS	R4,R5
 1712 0722 51F8045B 		_POP
 1713 0726 2468     		LDR	R4,[R4]
 1714 0728 44F00104 		ORR	R4,R4,#1
 1715 072c 18BF     	    IT NE 
 1716 072e 2047     		BXNE	R4
 1717 0730 7047     		_NEXT
 1718              	
 1719              	//    CMOVE	( b1 b2 u -- )
 1720              	// 	Copy u bytes from b1 to b2.
 1721 0732 00BF     		_HEADER CMOVE,5,"CMOVE"
 1722 0734 51F8046B 		LDR	R6,[R1],#4
 1723 0738 51F8047B 		LDR	R7,[R1],#4
 1724 073c 03E0     		B CMOV1
 1725              	CMOV0:
 1726 073e 17F8014B 		LDRB	R4,[R7],#1
 1727 0742 06F8014B 		STRB	R4,[R6],#1
 1728              	CMOV1:
 1729 0746 2D00     		MOVS	R5,R5
 1730 0748 02D0     		BEQ	CMOV2
 1731 074a A5F10105 		SUB	R5,R5,#1
 1732 074e F6E7     		B CMOV0
 1733              	CMOV2:
 1734 0750 51F8045B 		_POP
 1735 0754 7047     		_NEXT
 1736              	
 1737              	//    MOVE	( a1 a2 u -- )
 1738              	// 	Copy u words from a1 to a2.
 1739 0756 00BF     		_HEADER MOVE,4,"MOVE"
ARM GAS  stm32eforth.s 			page 36


 1740 0758 25F00305 		AND	R5,R5,#-4
 1741 075c 51F8046B 		LDR	R6,[R1],#4
 1742 0760 51F8047B 		LDR	R7,[R1],#4
 1743 0764 03E0     		B MOVE1
 1744              	MOVE0:
 1745 0766 57F8044B 		LDR	R4,[R7],#4
 1746 076a 46F8044B 		STR	R4,[R6],#4
 1747              	MOVE1:
 1748 076e 2D00     		MOVS	R5,R5
 1749 0770 02D0     		BEQ	MOVE2
 1750 0772 A5F10405 		SUB	R5,R5,#4
 1751 0776 F6E7     		B MOVE0
 1752              	MOVE2:
 1753 0778 51F8045B 		_POP
 1754 077c 7047     		_NEXT
 1755              	
 1756              	//    FILL	( b u c -- )
 1757              	// 	Fill u bytes of character c to area beginning at b.
 1758 077e 00BF     		_HEADER FILL,4,"FILL"
 1759 0780 51F8046B 		LDR	R6,[R1],#4
 1760 0784 51F8047B 		LDR	R7,[R1],#4
 1761              	FILL0:
 1762 0788 00E0     		B FILL1
 1763 078a 2D46     		MOV	R5,R5
 1764              	FILL1:
 1765 078c 07F8015B 		STRB	R5,[R7],#1
 1766 0790 3600     		MOVS	R6,R6
 1767 0792 02D0     		BEQ	FILL2
 1768 0794 A6F10106 		SUB	R6,R6,#1
 1769 0798 F6E7     		B FILL0
 1770              	FILL2:
 1771 079a 51F8045B 		_POP
 1772 079e 7047     		_NEXT
 1773              	
 1774              	//    PACK$	( b u a -- a )
 1775              	// 	Build a counted word with u characters from b. Null fill.
 1776              		_HEADER PACKS,5,"PACK$"
 1777 07a0 42F804ED 		_NEST
 1778 07a4 FFF766FF 		BL	ALGND
 1779 07a8 FFF748FD 		BL	DUPP
 1780 07ac FFF738FD 		BL	TOR			// strings only on cell boundary
 1781 07b0 FFF74CFD 		BL	OVER
 1782 07b4 FFF77AFD 		BL	PLUS
 1783 07b8 FFF794FD 		BL	ONEP
 1784 07bc FFF7E5FC 		_DOLIT 0xFFFFFFFC
 1784      FCFFFFFF 
 1785 07c4 FFF74CFD 		BL	ANDD			// count mod cell
 1786 07c8 FFF7DFFC 		_DOLIT 	0
 1786      00000000 
 1787 07d0 FFF738FD 		BL	SWAP
 1788 07d4 FFF70AFD 		BL	STORE			// null fill cell
 1789 07d8 FFF71EFD 		BL	RAT
 1790 07dc FFF7C2FD 		BL	DDUP
 1791 07e0 FFF70CFD 		BL	CSTOR
 1792 07e4 FFF77EFD 		BL	ONEP			// save count
 1793 07e8 FFF72CFD 		BL	SWAP
 1794 07ec FFF7A2FF 		BL	CMOVE
ARM GAS  stm32eforth.s 			page 37


 1795 07f0 FFF70CFD 		BL	RFROM
 1796 07f4 52F804FB 		_UNNEST   			// move string
 1797              	
 1798              	// **************************************************************************
 1799              	//  Numeric output, single precision
 1800              	
 1801              	//    DIGIT	( u -- c )
 1802              	// 	Convert digit u to a character.
 1803              		_HEADER DIGIT,5,"DIGIT"
 1804 07f8 42F804ED 		_NEST
 1805 07fc FFF7C5FC 		_DOLIT 9
 1805      09000000 
 1806 0804 FFF722FD 		BL	OVER
 1807 0808 FFF7E2FD 		BL	LESS
 1808 080c 05F00705 		AND	R5,R5,#7
 1809 0810 FFF74CFD 		BL	PLUS
 1810 0814 05F13005 		ADD	R5,R5,#'0'
 1811 0818 52F804FB 		_UNNEST
 1812              	
 1813              	//    EXTRACT	( n base -- n c )
 1814              	// 	Extract the least significant digit from n.
 1815              		_HEADER EXTRC,7,"EXTRACT"
 1816 081c 42F804ED 		_NEST
 1817 0820 FFF7B3FC 		_DOLIT 0
 1817      00000000 
 1818 0828 FFF70CFD 		BL	SWAP
 1819 082c FFF7A0FE 		BL	UMMOD
 1820 0830 FFF708FD 		BL	SWAP
 1821 0834 FFF7E0FF 		BL	DIGIT
 1822 0838 52F804FB 		_UNNEST
 1823              	
 1824              	//    <#	  ( -- )
 1825              	// 	Initiate the numeric output process.
 1826              		_HEADER BDIGS,2,"<#"
 1827 083c 42F804ED 		_NEST
 1828 0840 FFF762FF 		BL	PAD
 1829 0844 FFF74CFE 		BL	HLD
 1830 0848 FFF7D0FC 		BL	STORE
 1831 084c 52F804FB 		_UNNEST
 1832              	
 1833              	//    HOLD	( c -- )
 1834              	// 	Insert a character into the numeric output string.
 1835              		_HEADER HOLD,4,"HOLD"
 1836 0850 42F804ED 		_NEST
 1837 0854 FFF744FE 		BL	HLD
 1838 0858 FFF7CEFC 		BL	AT
 1839 085c FFF746FD 		BL	ONEM
 1840 0860 FFF7ECFC 		BL	DUPP
 1841 0864 FFF73CFE 		BL	HLD
 1842 0868 FFF7C0FC 		BL	STORE
 1843 086c FFF7C6FC 		BL	CSTOR
 1844 0870 52F804FB 		_UNNEST
 1845              	
 1846              	//    #	   ( u -- u )
 1847              	// 	Extract one digit from u and append the digit to output string.
 1848              		_HEADER DIG,1,"#"
 1849 0874 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 38


 1850 0878 FFF710FE 		BL	BASE
 1851 087c FFF7BCFC 		BL	AT
 1852 0880 FFF7CCFF 		BL	EXTRC
 1853 0884 FFF7E4FF 		BL	HOLD
 1854 0888 52F804FB 		_UNNEST
 1855              	
 1856              	//    #S	  ( u -- 0 )
 1857              	// 	Convert u until all digits are added to the output string.
 1858              		_HEADER DIGS,2,"#S"
 1859 088c 42F804ED 		_NEST
 1860              	DIGS1:
 1861 0890 FFF7F0FF 	    BL	DIG
 1862 0894 FFF7D2FC 		BL	DUPP
 1863 0898 FFF794FC 		BL	QBRAN
 1864 089c A2080018 		.word	DIGS2+MAPOFFSET
 1865 08a0 F6E7     		B	DIGS1
 1866              	DIGS2:
 1867 08a2 52F804FB 		  _UNNEST
 1868              	
 1869              	//    SIGN	( n -- )
 1870              	// 	Add a minus sign to the numeric output string.
 1871 08a6 00BF     		_HEADER SIGN, 4,"SIGN"
 1872 08a8 42F804ED 		_NEST
 1873 08ac FFF7D2FC 		BL	ZLESS
 1874 08b0 FFF788FC 		BL	QBRAN
 1875 08b4 C4080018 		.word	SIGN1+MAPOFFSET
 1876 08b8 FFF767FC 		_DOLIT '-'
 1876      2D000000 
 1877 08c0 FFF7C6FF 		BL	HOLD
 1878              	SIGN1:
 1879 08c4 52F804FB 		  _UNNEST
 1880              	
 1881              	//    #>	  ( w -- b u )
 1882              	// 	Prepare the outputDCB to be TYPE'd.
 1883              		_HEADER EDIGS,2,"#>"
 1884 08c8 42F804ED 		_NEST
 1885 08cc FFF7B2FC 		BL	DROP
 1886 08d0 FFF706FE 		BL	HLD
 1887 08d4 FFF790FC 		BL	AT
 1888 08d8 FFF716FF 		BL	PAD
 1889 08dc FFF7B6FC 		BL	OVER
 1890 08e0 FFF7E8FC 		BL	SUBB
 1891 08e4 52F804FB 		_UNNEST
 1892              	
 1893              	//    str	 ( n -- b u )
 1894              	// 	Convert a signed integer to a numeric string.
 1895              	
 1896              	// 	.word	_EDIGS+MAPOFFSET
 1897              	// _STRR	.byte  3
 1898              	// 	.ascii "str"
 1899              	// 	.p2align 2 	
 1900              	STRR:
 1901 08e8 42F804ED 		_NEST
 1902 08ec FFF7A6FC 		BL	DUPP
 1903 08f0 FFF796FC 		BL	TOR
 1904 08f4 FFF74EFD 		BL	ABSS
 1905 08f8 FFF7A0FF 		BL	BDIGS
ARM GAS  stm32eforth.s 			page 39


 1906 08fc FFF7C6FF 		BL	DIGS
 1907 0900 FFF784FC 		BL	RFROM
 1908 0904 FFF7D0FF 		BL	SIGN
 1909 0908 FFF7DEFF 		BL	EDIGS
 1910 090c 52F804FB 		_UNNEST
 1911              	
 1912              	//    HEX	 ( -- )
 1913              	// 	Use radix 16 as base for numeric conversions.
 1914              		_HEADER HEX,3,"HEX"
 1915 0910 42F804ED 		_NEST
 1916 0914 FFF739FC 		_DOLIT 16
 1916      10000000 
 1917 091c FFF7BEFD 		BL	BASE
 1918 0920 FFF764FC 		BL	STORE
 1919 0924 52F804FB 		_UNNEST
 1920              	
 1921              	//    DECIMAL	( -- )
 1922              	// 	Use radix 10 as base for numeric conversions.
 1923              		_HEADER DECIM,7,"DECIMAL"
 1924 0928 42F804ED 		_NEST
 1925 092c FFF72DFC 		_DOLIT 10
 1925      0A000000 
 1926 0934 FFF7B2FD 		BL	BASE
 1927 0938 FFF758FC 		BL	STORE
 1928 093c 52F804FB 		_UNNEST
 1929              	
 1930              	// **************************************************************************
 1931              	//  Numeric input, single precision
 1932              	
 1933              	//    DIGIT?	( c base -- u t )
 1934              	// 	Convert a character to its numeric value. A flag indicates success.
 1935              		_HEADER DIGTQ,6,"DIGIT?"
 1936 0940 42F804ED 		_NEST
 1937 0944 FFF76CFC 		BL	TOR
 1938 0948 FFF71FFC 		_DOLIT '0'
 1938      30000000 
 1939 0950 FFF7B0FC 		BL	SUBB
 1940 0954 FFF719FC 		_DOLIT 9
 1940      09000000 
 1941 095c FFF776FC 		BL	OVER
 1942 0960 FFF736FD 		BL	LESS
 1943 0964 FFF72EFC 		BL	QBRAN
 1944 0968 8C090018 		.word	DGTQ1+MAPOFFSET
 1945 096c FFF70DFC 		_DOLIT 7
 1945      07000000 
 1946 0974 FFF79EFC 		BL	SUBB
 1947 0978 FFF760FC 		BL	DUPP
 1948 097c FFF705FC 		_DOLIT 10
 1948      0A000000 
 1949 0984 FFF724FD 		BL	LESS
 1950 0988 FFF770FC 		BL	ORR
 1951              	DGTQ1:
 1952 098c FFF756FC 	  BL	DUPP
 1953 0990 FFF73CFC 		BL	RFROM
 1954 0994 FFF714FD 		BL	ULESS
 1955 0998 52F804FB 		_UNNEST
 1956              	
ARM GAS  stm32eforth.s 			page 40


 1957              	//    NUMBER?	( a -- n T | a F )
 1958              	// 	Convert a number word to integer. Push a flag on tos.
 1959              		_HEADER NUMBQ,7,"NUMBER?"
 1960 099c 42F804ED 		_NEST
 1961 09a0 FFF77CFD 		BL	BASE
 1962 09a4 FFF728FC 		BL	AT
 1963 09a8 FFF73AFC 		BL	TOR
 1964 09ac FFF7EDFB 		_DOLIT 0
 1964      00000000 
 1965 09b4 FFF74AFC 		BL	OVER
 1966 09b8 FFF73EFD 		BL	COUNT
 1967 09bc FFF746FC 		BL	OVER
 1968 09c0 FFF722FC 		BL	CAT
 1969 09c4 FFF7E1FB 		_DOLIT '$'
 1969      24000000 
 1970 09cc FFF7F0FC 		BL	EQUAL
 1971 09d0 FFF7F8FB 		BL	QBRAN
 1972 09d4 EC090018 		.word	NUMQ1+MAPOFFSET
 1973 09d8 FFF79AFF 		BL	HEX
 1974 09dc FFF732FC 		BL	SWAP
 1975 09e0 FFF780FC 		BL	ONEP
 1976 09e4 FFF72EFC 		BL	SWAP
 1977 09e8 FFF780FC 		BL	ONEM
 1978              	NUMQ1:
 1979 09ec FFF72EFC 		BL	OVER
 1980 09f0 FFF70AFC 		BL	CAT
 1981 09f4 FFF7C9FB 		_DOLIT '-'
 1981      2D000000 
 1982 09fc FFF7D8FC 		BL	EQUAL
 1983 0a00 FFF70EFC 		BL	TOR
 1984 0a04 FFF71EFC 		BL	SWAP
 1985 0a08 FFF706FC 		BL	RAT
 1986 0a0c FFF752FC 		BL	SUBB
 1987 0a10 FFF718FC 		BL	SWAP
 1988 0a14 FFF700FC 		BL	RAT
 1989 0a18 FFF748FC 		BL	PLUS
 1990 0a1c FFF790FC 		BL	QDUP
 1991 0a20 FFF7D0FB 		BL	QBRAN
 1992 0a24 B00A0018 		.word	NUMQ6+MAPOFFSET
 1993 0a28 FFF760FC 		BL	ONEM
 1994 0a2c FFF7F8FB 		BL	TOR
 1995              	NUMQ2:
 1996 0a30 FFF704FC 		BL	DUPP
 1997 0a34 FFF7F4FB 		BL	TOR
 1998 0a38 FFF7E6FB 		BL	CAT
 1999 0a3c FFF72EFD 		BL	BASE
 2000 0a40 FFF7DAFB 		BL	AT
 2001 0a44 FFF77CFF 		BL	DIGTQ
 2002 0a48 FFF7BCFB 		BL	QBRAN
 2003 0a4c 940A0018 		.word	NUMQ4+MAPOFFSET
 2004 0a50 FFF7F8FB 		BL	SWAP
 2005 0a54 FFF722FD 		BL	BASE
 2006 0a58 FFF7CEFB 		BL	AT
 2007 0a5c FFF730FC 		BL	STAR
 2008 0a60 FFF724FC 		BL	PLUS
 2009 0a64 FFF7D2FB 		BL	RFROM
 2010 0a68 FFF73CFC 		BL	ONEP
ARM GAS  stm32eforth.s 			page 41


 2011 0a6c FFF79BFB 		BL	DONXT
 2012 0a70 300A0018 		.word	NUMQ2+MAPOFFSET
 2013 0a74 FFF7D0FB 		BL	RAT
 2014 0a78 FFF7E4FB 		BL	SWAP
 2015 0a7c FFF7DAFB 		BL	DROP
 2016 0a80 FFF7A0FB 		BL	QBRAN
 2017 0a84 8C0A0018 		.word	NUMQ3+MAPOFFSET
 2018 0a88 FFF780FC 		BL	NEGAT
 2019              	NUMQ3:
 2020 0a8c FFF7DAFB 		BL	SWAP
 2021 0a90 00F00CB8 		B.W	NUMQ5
 2022              	NUMQ4:
 2023 0a94 FFF7BAFB 		BL	RFROM
 2024 0a98 FFF7B8FB 		BL	RFROM
 2025 0a9c FFF75CFC 		BL	DDROP
 2026 0aa0 FFF75AFC 		BL	DDROP
 2027 0aa4 FFF771FB 		_DOLIT	0
 2027      00000000 
 2028              	NUMQ5:
 2029 0aac FFF7C6FB 		BL	DUPP
 2030              	NUMQ6:
 2031 0ab0 FFF7ACFB 		BL	RFROM
 2032 0ab4 FFF750FC 		BL	DDROP
 2033 0ab8 FFF7A8FB 		BL	RFROM
 2034 0abc FFF7EEFC 		BL	BASE
 2035 0ac0 FFF794FB 		BL	STORE
 2036 0ac4 52F804FB 		_UNNEST
 2037              	
 2038              	// **************************************************************************
 2039              	//  Basic I/O
 2040              	
 2041              	//    KEY	 ( -- c )
 2042              	// 	Wait for and return an input character.
 2043              		_HEADER KEY,3,"KEY"
 2044 0ac8 42F804ED 		_NEST
 2045              	KEY1:
 2046 0acc FFF73AFB 		BL	QRX
 2047 0ad0 FFF778FB 		BL	QBRAN
 2048 0ad4 CC0A0018 		.word	KEY1+MAPOFFSET
 2049 0ad8 52F804FB 		_UNNEST
 2050              	
 2051              	//    SPACE	( -- )
 2052              	// 	Send the blank character to the output device.
 2053              		_HEADER SPACE,5,"SPACE"
 2054 0adc 42F804ED 		_NEST
 2055 0ae0 FFF718FC 		BL	BLANK
 2056 0ae4 FFF744FB 		BL	EMIT
 2057 0ae8 52F804FB 		_UNNEST
 2058              	
 2059              	//    SPACES	( +n -- )
 2060              	// 	Send n spaces to the output device.
 2061              		_HEADER SPACS,6,"SPACES"
 2062 0aec 42F804ED 		_NEST
 2063 0af0 FFF74BFB 		_DOLIT 0
 2063      00000000 
 2064 0af8 FFF77AFC 		BL	MAX
 2065 0afc FFF790FB 		BL	TOR
ARM GAS  stm32eforth.s 			page 42


 2066 0b00 00F002B8 		B.W	CHAR2
 2067              	CHAR1:
 2068 0b04 FFF7EAFF 		BL	SPACE
 2069              	CHAR2:
 2070 0b08 FFF74DFB 		BL	DONXT
 2071 0b0c 040B0018 		.word	CHAR1+MAPOFFSET
 2072 0b10 52F804FB 		_UNNEST
 2073              	
 2074              	//    TYPE	( b u -- )
 2075              	// 	Output u characters from b.
 2076              		_HEADER TYPEE,4,"TYPE"
 2077 0b14 42F804ED 		_NEST
 2078 0b18 FFF782FB 		BL  TOR   // ( a+1 -- R: u )
 2079 0b1c 00F006B8 		B.W	TYPE2
 2080              	TYPE1:  
 2081 0b20 FFF78AFC 		BL  COUNT
 2082 0b24 FFF7AEFD 		BL	TCHAR
 2083 0b28 FFF722FB 		BL	EMIT
 2084              	TYPE2:  
 2085 0b2c FFF73BFB 		BL  DONXT  
 2086 0b30 200B0018 		.word	TYPE1+MAPOFFSET
 2087 0b34 FFF77EFB 		BL	DROP
 2088 0b38 52F804FB 		_UNNEST
 2089              	
 2090              	//    CR	  ( -- )
 2091              	// 	Output a carriage return and a line feed.
 2092              		_HEADER CR,2,"CR"
 2093 0b3c 42F804ED 		_NEST
 2094 0b40 FFF723FB 		_DOLIT	CRR
 2094      0D000000 
 2095 0b48 FFF712FB 		BL	EMIT
 2096 0b4c FFF71DFB 		_DOLIT	LF
 2096      0A000000 
 2097 0b54 FFF70CFB 		BL	EMIT
 2098 0b58 52F804FB 		_UNNEST
 2099              	
 2100              	//    do_$	( -- a )
 2101              	// 	Return the address of a compiled string.
 2102              	//  adjust return address to skip over it.
 2103              	
 2104              	// 	.word	_CR+MAPOFFSET
 2105              	// _DOSTR	.byte  COMPO+3
 2106              	// 	.ascii "do$$"
 2107              	// 	.p2align 2 	
 2108              	DOSTR:
 2109 0b5c 42F804ED 		_NEST     
 2110              	/* compiled string address is 2 levels deep */
 2111 0b60 FFF754FB 		BL	RFROM	// { -- a1 }
 2112 0b64 FFF752FB 		BL	RFROM	//  {a1 -- a1 a2 } b0 set
 2113 0b68 FFF7C0FB 		BL	ONEM	//  clear b0
 2114 0b6c FFF766FB 		BL	DUPP	// {a1 a2 -- a1 a2 a2 }
 2115 0b70 FFF762FC 		BL	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2116 0b74 FFF79AFB 		BL	PLUS	// { -- a1 a2 a2+1+c }
 2117 0b78 FFF77CFD 		BL	ALGND	//  end of string
 2118 0b7c FFF7B2FB 		BL	ONEP	//  restore b0, this result in return address 2 level deep.
 2119 0b80 FFF74EFB 		BL	TOR		//  address after string { -- a1 a2 }
 2120 0b84 FFF75EFB 		BL	SWAP	//  count tugged
ARM GAS  stm32eforth.s 			page 43


 2121 0b88 FFF74AFB 		BL	TOR     //  ( -- a2) is string address
 2122 0b8c 52F804FB 		_UNNEST
 2123              	
 2124              	//    $"|	( -- a )
 2125              	// 	Run time routine compiled by _". Return address of a compiled string.
 2126              	
 2127              	// 	.word	_DOSTR+MAPOFFSET
 2128              	// _STRQP	.byte  COMPO+3
 2129              	// 	.ascii "$\"|"
 2130              	// 	.p2align 2 	
 2131              	STRQP:
 2132 0b90 42F804ED 		_NEST
 2133 0b94 FFF7E2FF 		BL	DOSTR
 2134 0b98 52F804FB 		_UNNEST			// force a call to dostr
 2135              	
 2136              	//    .$	( a -- )
 2137              	// 	Run time routine of ." . Output a compiled string.
 2138              	
 2139              	// 	.word	_STRQP+MAPOFFSET
 2140              	// _DOTST	.byte  COMPO+2
 2141              	// 	.ascii ".$$"
 2142              	// 	.p2align 2 	
 2143              	DOTST:
 2144 0b9c 42F804ED 		_NEST
 2145 0ba0 FFF74AFC 		BL	COUNT // ( -- a+1 c )
 2146 0ba4 FFF7B6FF 		BL	TYPEE
 2147 0ba8 52F804FB 		_UNNEST
 2148              	
 2149              	//    ."|	( -- )
 2150              	// 	Run time routine of ." . Output a compiled string.
 2151              	
 2152              	// 	.word	_DOTST+MAPOFFSET
 2153              	// _DOTQP	.byte  COMPO+3
 2154              	// 	.ascii ".""|"
 2155              	// 	.p2align 2 	
 2156              	DOTQP:
 2157 0bac 42F804ED 		_NEST
 2158 0bb0 FFF7D4FF 		BL	DOSTR
 2159 0bb4 FFF7F2FF 		BL	DOTST
 2160 0bb8 52F804FB 		_UNNEST
 2161              	
 2162              	//    .R	  ( n +n -- )
 2163              	// 	Display an integer in a field of n columns, right justified.
 2164              		_HEADER DOTR,2,".R"
 2165 0bbc 42F804ED 		_NEST
 2166 0bc0 FFF72EFB 		BL	TOR
 2167 0bc4 FFF790FE 		BL	STRR
 2168 0bc8 FFF720FB 		BL	RFROM
 2169 0bcc FFF73EFB 		BL	OVER
 2170 0bd0 FFF770FB 		BL	SUBB
 2171 0bd4 FFF78AFF 		BL	SPACS
 2172 0bd8 FFF79CFF 		BL	TYPEE
 2173 0bdc 52F804FB 		_UNNEST
 2174              	
 2175              	//    U.R	 ( u +n -- )
 2176              	// 	Display an unsigned integer in n column, right justified.
 2177              		_HEADER UDOTR,3,"U.R"
ARM GAS  stm32eforth.s 			page 44


 2178 0be0 42F804ED 		_NEST
 2179 0be4 FFF71CFB 		BL	TOR
 2180 0be8 FFF728FE 		BL	BDIGS
 2181 0bec FFF74EFE 		BL	DIGS
 2182 0bf0 FFF76AFE 		BL	EDIGS
 2183 0bf4 FFF70AFB 		BL	RFROM
 2184 0bf8 FFF728FB 		BL	OVER
 2185 0bfc FFF75AFB 		BL	SUBB
 2186 0c00 FFF774FF 		BL	SPACS
 2187 0c04 FFF786FF 		BL	TYPEE
 2188 0c08 52F804FB 		_UNNEST
 2189              	
 2190              	//    U.	  ( u -- )
 2191              	// 	Display an unsigned integer in free format.
 2192              		_HEADER UDOT,2,"U."
 2193 0c0c 42F804ED 		_NEST
 2194 0c10 FFF714FE 		BL	BDIGS
 2195 0c14 FFF73AFE 		BL	DIGS
 2196 0c18 FFF756FE 		BL	EDIGS
 2197 0c1c FFF75EFF 		BL	SPACE
 2198 0c20 FFF778FF 		BL	TYPEE
 2199 0c24 52F804FB 		_UNNEST
 2200              	
 2201              	//   H. ( u -- )
 2202              	//  display unsigned integer in hexadecimal
 2203              		_HEADER HDOT,2,"H."
 2204 0c28 42F804ED 		_NEST 
 2205 0c2c FFF736FC 		BL	BASE 
 2206 0c30 FFF7E2FA 		BL	AT 
 2207 0c34 FFF7F4FA 		BL	TOR 
 2208 0c38 FFF76AFE 		BL	HEX 
 2209 0c3c FFF7E6FF 		BL	UDOT 
 2210 0c40 FFF7E4FA 		BL	RFROM 
 2211 0c44 FFF72AFC 		BL	BASE 
 2212 0c48 FFF7D0FA 		BL	STORE 
 2213 0c4c 52F804FB 		_UNNEST 
 2214              	
 2215              	
 2216              	//    .	   ( w -- )
 2217              	// 	Display an integer in free format, preceeded by a space.
 2218              		_HEADER DOT,1,"."
 2219 0c50 42F804ED 		_NEST
 2220 0c54 FFF722FC 		BL	BASE
 2221 0c58 FFF7CEFA 		BL	AT
 2222 0c5c FFF795FA 		_DOLIT	10
 2222      0A000000 
 2223 0c64 FFF708FB 		BL	XORR			// ?decimal
 2224 0c68 FFF7ACFA 		BL	QBRAN
 2225 0c6c 780C0018 		.word	DOT1+MAPOFFSET
 2226 0c70 FFF7CCFF 		BL	UDOT
 2227 0c74 52F804FB 		_UNNEST			// no,display unsigned
 2228              	DOT1:
 2229 0c78 FFF736FE 	    BL	STRR
 2230 0c7c FFF72EFF 		BL	SPACE
 2231 0c80 FFF748FF 		BL	TYPEE
 2232 0c84 52F804FB 		_UNNEST			// yes, display signed
 2233              	
ARM GAS  stm32eforth.s 			page 45


 2234              	//    ?	   ( a -- )
 2235              	// 	Display the contents in a memory cell.
 2236              		_HEADER QUEST,1,"?"
 2237 0c88 42F804ED 		_NEST
 2238 0c8c FFF7B4FA 		BL	AT
 2239 0c90 FFF7DEFF 		BL	DOT
 2240 0c94 52F804FB 		_UNNEST
 2241              	
 2242              	// **************************************************************************
 2243              	//  Parsing
 2244              	
 2245              	//    parse	( b u c -- b u delta //  string> )
 2246              	// 	Scan word delimited by c. Return found string and its offset.
 2247              	
 2248              	// 	.word	_QUEST+MAPOFFSET
 2249              	// _PARS	.byte  5
 2250              	// 	.ascii "parse"
 2251              	// 	.p2align 2 	
 2252              	PARS:
 2253 0c98 42F804ED 		_NEST
 2254 0c9c FFF703FC 		BL	TEMP
 2255 0ca0 FFF7A4FA 		BL	STORE
 2256 0ca4 FFF7D2FA 		BL	OVER
 2257 0ca8 FFF7BAFA 		BL	TOR
 2258 0cac FFF7C6FA 		BL	DUPP
 2259 0cb0 FFF788FA 		BL	QBRAN
 2260 0cb4 A60D0018 		.word	PARS8+MAPOFFSET
 2261 0cb8 FFF718FB 		BL	ONEM
 2262 0cbc FFF7F3FB 		BL	TEMP
 2263 0cc0 FFF79AFA 		BL	AT
 2264 0cc4 FFF726FB 		BL	BLANK
 2265 0cc8 FFF772FB 		BL	EQUAL
 2266 0ccc FFF77AFA 		BL	QBRAN
 2267 0cd0 200D0018 		.word	PARS3+MAPOFFSET
 2268 0cd4 FFF7A4FA 		BL	TOR
 2269              	PARS1:
 2270 0cd8 FFF71CFB 		BL	BLANK
 2271 0cdc FFF7B6FA 		BL	OVER
 2272 0ce0 FFF792FA 		BL	CAT			// skip leading blanks 
 2273 0ce4 FFF7E6FA 		BL	SUBB
 2274 0ce8 FFF7B4FA 		BL	ZLESS
 2275 0cec FFF74AFB 		BL	INVER
 2276 0cf0 FFF768FA 		BL	QBRAN
 2277 0cf4 1C0D0018 		.word	PARS2+MAPOFFSET
 2278 0cf8 FFF7F4FA 		BL	ONEP
 2279 0cfc FFF753FA 		BL	DONXT
 2280 0d00 D80C0018 		.word	PARS1+MAPOFFSET
 2281 0d04 FFF782FA 		BL	RFROM
 2282 0d08 FFF794FA 		BL	DROP
 2283 0d0c FFF73DFA 		_DOLIT	0
 2283      00000000 
 2284 0d14 FFF792FA 		BL	DUPP
 2285 0d18 52F804FB 		_UNNEST
 2286              	PARS2:
 2287 0d1c FFF776FA 	  BL	RFROM
 2288              	PARS3:
 2289 0d20 FFF794FA 		BL	OVER
ARM GAS  stm32eforth.s 			page 46


 2290 0d24 FFF78EFA 		BL	SWAP
 2291 0d28 FFF77AFA 		BL	TOR
 2292              	PARS4:
 2293 0d2c FFF7BBFB 		BL	TEMP
 2294 0d30 FFF762FA 		BL	AT
 2295 0d34 FFF78AFA 		BL	OVER
 2296 0d38 FFF766FA 		BL	CAT
 2297 0d3c FFF7BAFA 		BL	SUBB			// scan for delimiter
 2298 0d40 FFF7B1FB 		BL	TEMP
 2299 0d44 FFF758FA 		BL	AT
 2300 0d48 FFF7E4FA 		BL	BLANK
 2301 0d4c FFF730FB 		BL	EQUAL
 2302 0d50 FFF738FA 		BL	QBRAN
 2303 0d54 5C0D0018 		.word	PARS5+MAPOFFSET
 2304 0d58 FFF77CFA 		BL	ZLESS
 2305              	PARS5:
 2306 0d5c FFF732FA 		BL	QBRAN
 2307 0d60 7A0D0018 		.word	PARS6+MAPOFFSET
 2308 0d64 FFF7BEFA 		BL	ONEP
 2309 0d68 FFF71DFA 		BL	DONXT
 2310 0d6c 2C0D0018 		.word	PARS4+MAPOFFSET
 2311 0d70 FFF764FA 		BL	DUPP
 2312 0d74 FFF754FA 		BL	TOR
 2313 0d78 09E0     		B	PARS7
 2314              	PARS6:
 2315 0d7a FFF747FA 		BL	RFROM
 2316 0d7e FFF759FA 		BL	DROP
 2317 0d82 FFF75BFA 		BL	DUPP
 2318 0d86 FFF7ADFA 		BL	ONEP
 2319 0d8a FFF749FA 		BL	TOR
 2320              	PARS7:
 2321 0d8e FFF75DFA 		BL	OVER
 2322 0d92 FFF78FFA 		BL	SUBB
 2323 0d96 FFF739FA 		BL	RFROM
 2324 0d9a FFF737FA 		BL	RFROM
 2325 0d9e FFF789FA 		BL	SUBB
 2326 0da2 52F804FB 		_UNNEST
 2327              	PARS8:
 2328 0da6 FFF751FA 		BL	OVER
 2329 0daa FFF72FFA 		BL	RFROM
 2330 0dae FFF781FA 		BL	SUBB
 2331 0db2 52F804FB 		_UNNEST
 2332              	
 2333              	//    PARSE	( c -- b u //  string> )
 2334              	// 	Scan input stream and return counted string delimited by c.
 2335 0db6 00BF     		_HEADER PARSE,5,"PARSE"
 2336 0db8 42F804ED 		_NEST
 2337 0dbc FFF730FA 		BL	TOR
 2338 0dc0 FFF7AAFC 		BL	TIB
 2339 0dc4 FFF77AFB 		BL	INN
 2340 0dc8 FFF716FA 		BL	AT
 2341 0dcc FFF76EFA 		BL	PLUS			// current input buffer pointer
 2342 0dd0 FFF77AFB 		BL	NTIB
 2343 0dd4 FFF710FA 		BL	AT
 2344 0dd8 FFF770FB 		BL	INN
 2345 0ddc FFF70CFA 		BL	AT
 2346 0de0 FFF768FA 		BL	SUBB			// remaining count
ARM GAS  stm32eforth.s 			page 47


 2347 0de4 FFF712FA 		BL	RFROM
 2348 0de8 FFF756FF 		BL	PARS
 2349 0dec FFF766FB 		BL	INN
 2350 0df0 FFF70AFB 		BL	PSTOR
 2351 0df4 52F804FB 		_UNNEST
 2352              	
 2353              	//    .(	  ( -- )
 2354              	// 	Output following string up to next ) .
 2355              		_HEADER DOTPR,IMEDD+2,".("
 2356 0df8 42F804ED 		_NEST
 2357 0dfc FFF7C5F9 		_DOLIT	')'
 2357      29000000 
 2358 0e04 FFF7D8FF 		BL	PARSE
 2359 0e08 FFF784FE 		BL	TYPEE
 2360 0e0c 52F804FB 		_UNNEST
 2361              	
 2362              	//    (	   ( -- )
 2363              	// 	Ignore following string up to next ) . A comment.
 2364              		_HEADER PAREN,IMEDD+1,"("
 2365 0e10 42F804ED 		_NEST
 2366 0e14 FFF7B9F9 		_DOLIT	')'
 2366      29000000 
 2367 0e1c FFF7CCFF 		BL	PARSE
 2368 0e20 FFF79AFA 		BL	DDROP
 2369 0e24 52F804FB 		_UNNEST
 2370              	
 2371              	//    \	   ( -- )
 2372              	// 	Ignore following text till the end of line.
 2373              		_HEADER BKSLA,1,"\\"
 2374 0e28 42F804ED 		_NEST
 2375 0e2c FFF74CFB 		BL	NTIB
 2376 0e30 FFF7E2F9 		BL	AT
 2377 0e34 FFF742FB 		BL	INN
 2378 0e38 FFF7D8F9 		BL	STORE
 2379 0e3c 52F804FB 		_UNNEST
 2380              	
 2381              	//    CHAR	( -- c )
 2382              	// 	Parse next word and return its first character.
 2383              		_HEADER CAHR,4,"CHAR"
 2384 0e40 42F804ED 		_NEST
 2385 0e44 FFF766FA 		BL	BLANK
 2386 0e48 FFF7B6FF 		BL	PARSE
 2387 0e4c FFF7F2F9 		BL	DROP
 2388 0e50 FFF7DAF9 		BL	CAT
 2389 0e54 52F804FB 		_UNNEST
 2390              	
 2391              	//    WORD	( c -- a //  string> )
 2392              	// 	Parse a word from input stream and copy it to code dictionary.
 2393              		_HEADER WORDD,4,"WORD"
 2394 0e58 42F804ED 		_NEST
 2395 0e5c FFF7ACFF 		BL	PARSE
 2396 0e60 FFF74AFC 		BL	HERE
 2397 0e64 FFF74EFA 		BL	CELLP
 2398 0e68 FFF79AFC 		BL	PACKS
 2399 0e6c 52F804FB 		_UNNEST
 2400              	
 2401              	//    TOKEN	( -- a //  string> )
ARM GAS  stm32eforth.s 			page 48


 2402              	// 	Parse a word from input stream and copy it to name dictionary.
 2403              		_HEADER TOKEN,5,"TOKEN"
 2404 0e70 42F804ED 		_NEST
 2405 0e74 FFF74EFA 		BL	BLANK
 2406 0e78 FFF7EEFF 		BL	WORDD
 2407 0e7c 52F804FB 		_UNNEST
 2408              	
 2409              	// **************************************************************************
 2410              	//  Dictionary search
 2411              	
 2412              	//    >CFA	( na -- cfa )
 2413              	// 	Return a code field address given a name address.
 2414              		_HEADER TOCFA,4,">CFA"
 2415 0e80 42F804ED 		_NEST
 2416 0e84 FFF7D8FA 		BL	COUNT
 2417 0e88 FFF77FF9 		_DOLIT	0x1F
 2417      1F000000 
 2418 0e90 FFF7E6F9 		BL	ANDD
 2419 0e94 FFF70AFA 		BL	PLUS
 2420 0e98 FFF7ECFB 		BL	ALGND
 2421 0e9c 52F804FB 		_UNNEST
 2422              	
 2423              	//	NAME> ( na -- ca ) 
 2424              	// Return code address 
 2425              		_HEADER NAMET,5,"NAME>"
 2426 0ea0 42F804ED 		_NEST 
 2427 0ea4 FFF7ECFF 		BL	TOCFA
 2428 0ea8 FFF7A6F9 		BL	AT  
 2429 0eac 52F804FB 		_UNNEST 
 2430              	
 2431              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2432              	// 	Compare u bytes in two strings. Return 0 if identical.
 2433              	//
 2434              	//  Picatout 2020-12-01, 
 2435              	//      Because of problem with .align directive that
 2436              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2437              	// 		words  to do a byte by byte comparison. 
 2438              	//
 2439              		_HEADER SAMEQ,5,"SAME?"
 2440 0eb0 42F804ED 		_NEST
 2441 0eb4 FFF7B4F9 		BL	TOR
 2442 0eb8 00F01EB8 		B.W	SAME2
 2443              	SAME1:
 2444 0ebc FFF7C6F9 		BL	OVER  // ( a1 a2 -- a1 a2 a1 )
 2445 0ec0 FFF7AAF9 		BL	RAT   // a1 a2 a1 u 
 2446 0ec4 FFF7F2F9 		BL	PLUS  // a1 a2 a1+u 
 2447 0ec8 FFF79EF9 		BL	CAT	   // a1 a2 c1    		
 2448 0ecc FFF7BEF9 		BL	OVER  // a1 a2 c1 a2 
 2449 0ed0 FFF7A2F9 		BL	RAT    
 2450 0ed4 FFF7EAF9 		BL	PLUS    
 2451 0ed8 FFF796F9 		BL	CAT	  // a1 a2 c1 c2
 2452 0edc FFF7EAF9 		BL	SUBB  
 2453 0ee0 FFF72EFA 		BL	QDUP
 2454 0ee4 FFF76EF9 		BL	QBRAN
 2455 0ee8 F80E0018 		.word	SAME2+MAPOFFSET
 2456 0eec FFF78EF9 		BL	RFROM
 2457 0ef0 FFF7A0F9 		BL	DROP
ARM GAS  stm32eforth.s 			page 49


 2458 0ef4 52F804FB 		_UNNEST	// strings not equal
 2459              	SAME2:
 2460 0ef8 FFF755F9 		BL	DONXT
 2461 0efc BC0E0018 		.word	SAME1+MAPOFFSET
 2462 0f00 FFF743F9 		_DOLIT	0
 2462      00000000 
 2463 0f08 52F804FB 		_UNNEST	// strings equal
 2464              	
 2465              	//    find	( a na -- ca na | a F )
 2466              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2467              	
 2468              	//  Picatout 2020-12-01,  
 2469              	//		Modified from original. See comment for word "SAME?" 
 2470              	
 2471              	// 	.word	_SAMEQ+MAPOFFSET
 2472              	// _FIND	.byte  4
 2473              	// 	.ascii "find"
 2474              	// 	.p2align 2 	
 2475              	FIND:
 2476 0f0c 42F804ED 		_NEST
 2477 0f10 FFF798F9 		BL	SWAP			// na a	
 2478 0f14 FFF790FA 		BL	COUNT			// na a+1 count
 2479 0f18 FFF790F9 		BL	DUPP 
 2480 0f1c FFF7C3FA 		BL	TEMP
 2481 0f20 FFF764F9 		BL	STORE			// na a+1 count 
 2482 0f24 FFF77CF9 		BL  TOR		// na a+1  R: count  
 2483 0f28 FFF78CF9 		BL	SWAP			// a+1 na
 2484              	FIND1:
 2485 0f2c FFF786F9 		BL	DUPP			// a+1 na na
 2486 0f30 FFF748F9 		BL	QBRAN
 2487 0f34 7C0F0018 		.word	FIND6+MAPOFFSET	// end of vocabulary
 2488 0f38 FFF780F9 		BL	DUPP			// a+1 na na
 2489 0f3c FFF764F9 		BL	CAT			// a+1 na name1
 2490 0f40 FFF723F9 		_DOLIT	MASKK
 2490      1FFFFFFF 
 2491 0f48 FFF78AF9 		BL	ANDD
 2492 0f4c FFF764F9 		BL	RAT			// a+1 na name1 count 
 2493 0f50 FFF792F9 		BL	XORR			// a+1 na,  same length?
 2494 0f54 FFF736F9 		BL	QBRAN
 2495 0f58 680F0018 		.word	FIND2+MAPOFFSET
 2496 0f5c FFF7D6F9 		BL	CELLM			// a+1 la
 2497 0f60 FFF74AF9 		BL	AT			// a+1 next_na
 2498 0f64 FFF7E2BF 		B.w	FIND1			// try next word
 2499              	FIND2:   
 2500 0f68 FFF7BCF9 		BL	ONEP			// a+1 na+1
 2501 0f6c FFF79BFA 		BL	TEMP
 2502 0f70 FFF742F9 		BL	AT			// a+1 na+1 count
 2503 0f74 FFF79CFF 		BL	SAMEQ		// a+1 na+1 ? 
 2504              	FIND3:	
 2505 0f78 00F00CB8 		B.w	FIND4
 2506              	FIND6:	
 2507 0f7c FFF746F9 		BL	RFROM			// a+1 0 name1 -- , no match
 2508 0f80 FFF758F9 		BL	DROP			// a+1 0
 2509 0f84 FFF75EF9 		BL	SWAP			// 0 a+1
 2510 0f88 FFF7B0F9 		BL	ONEM			// 0 a
 2511 0f8c FFF75AF9 		BL	SWAP			// a 0 
 2512 0f90 52F804FB 		_UNNEST			// return without a match
ARM GAS  stm32eforth.s 			page 50


 2513              	FIND4:	
 2514 0f94 FFF716F9 		BL	QBRAN			// a+1 na+1
 2515 0f98 AC0F0018 		.word	FIND5+MAPOFFSET	// found a match
 2516 0f9c FFF7A6F9 		BL	ONEM			// a+1 na
 2517 0fa0 FFF7B4F9 		BL	CELLM			// a+4 la
 2518 0fa4 FFF728F9 		BL	AT			// a+1 next_na
 2519 0fa8 FFF7C0BF 		B.w	FIND1			// compare next name
 2520              	FIND5:	
 2521 0fac FFF72EF9 		BL	RFROM			// a+1 na+1 count
 2522 0fb0 FFF740F9 		BL	DROP			// a+1 na+1
 2523 0fb4 FFF746F9 		BL	SWAP			// na+1 a+1
 2524 0fb8 FFF73CF9 		BL	DROP			// na+1
 2525 0fbc FFF796F9 		BL	ONEM			// na
 2526 0fc0 FFF73CF9 		BL	DUPP			// na na
 2527 0fc4 FFF76CFF 		BL	NAMET			// na ca
 2528 0fc8 FFF73CF9 		BL	SWAP			// ca na
 2529 0fcc 52F804FB 		_UNNEST			//  return with a match
 2530              	
 2531              	//    NAME?	( a -- ca na | a F )
 2532              	// 	Search all context vocabularies for a string.
 2533              		_HEADER NAMEQ,5,"NAME?"
 2534 0fd0 42F804ED 		_NEST
 2535 0fd4 FFF78AFA 		BL	CNTXT
 2536 0fd8 FFF70EF9 		BL	AT
 2537 0fdc FFF796FF 		BL	FIND
 2538 0fe0 52F804FB 		_UNNEST
 2539              	
 2540              	// **************************************************************************
 2541              	//  Terminal input
 2542              	
 2543              	//    	  ( bot eot cur -- bot eot cur )
 2544              	// 	Backup the cursor by one character.
 2545              	
 2546              	// 	.word	_NAMEQ+MAPOFFSET
 2547              	// _BKSP	.byte  2
 2548              	// 	.ascii "^H"
 2549              	// 	.p2align 2 	
 2550              	BKSP:
 2551 0fe4 42F804ED 		_NEST
 2552 0fe8 FFF71AF9 		BL	TOR
 2553 0fec FFF72EF9 		BL	OVER
 2554 0ff0 FFF70CF9 		BL	RFROM
 2555 0ff4 FFF726F9 		BL	SWAP
 2556 0ff8 FFF728F9 		BL	OVER
 2557 0ffc FFF73CF9 		BL	XORR
 2558 1000 FFF7E0F8 		BL	QBRAN
 2559 1004 2C100018 		.word	BACK1+MAPOFFSET
 2560 1008 FFF7BFF8 		_DOLIT	BKSPP
 2560      08000000 
 2561 1010 FFF7AEF8 		BL	TECHO
 2562              	// 	BL	ATEXE
 2563 1014 FFF76AF9 		BL	ONEM
 2564 1018 FFF77CF9 		BL	BLANK
 2565 101c FFF7A8F8 		BL	TECHO
 2566              	// 	BL	ATEXE
 2567 1020 FFF7B3F8 		_DOLIT	BKSPP
 2567      08000000 
ARM GAS  stm32eforth.s 			page 51


 2568 1028 FFF7A2F8 		BL	TECHO
 2569              	// 	BL	ATEXE
 2570              	BACK1:
 2571 102c 52F804FB 		  _UNNEST
 2572              	
 2573              	//    TAP	 ( bot eot cur c -- bot eot cur )
 2574              	// 	Accept and echo the key stroke and bump the cursor.
 2575              	
 2576              	// 	.word	_BKSP+MAPOFFSET
 2577              	// _TAP	.byte  3
 2578              	// 	.ascii "TAP"
 2579              	// 	.p2align 2 	
 2580              	TAP:
 2581 1030 42F804ED 		_NEST
 2582 1034 FFF702F9 		BL	DUPP
 2583 1038 FFF79AF8 		BL	TECHO
 2584              	// 	BL	ATEXE
 2585 103c FFF706F9 		BL	OVER
 2586 1040 FFF7DCF8 		BL	CSTOR
 2587 1044 FFF74EF9 		BL	ONEP
 2588 1048 52F804FB 		_UNNEST
 2589              	
 2590              	//    kTAP	( bot eot cur c -- bot eot cur )
 2591              	// 	Process a key stroke, CR or backspace.
 2592              	
 2593              	// 	.word	_TAP+MAPOFFSET
 2594              	// _KTAP	.byte  4
 2595              	// 	.ascii "kTAP"
 2596              	// 	.p2align 2 	
 2597              	KTAP:
 2598              	TTAP:
 2599 104c 42F804ED 		_NEST
 2600 1050 FFF7F4F8 		BL	DUPP
 2601 1054 FFF799F8 		_DOLIT	CRR
 2601      0D000000 
 2602 105c FFF70CF9 		BL	XORR
 2603 1060 FFF7B0F8 		BL	QBRAN
 2604 1064 94100018 		.word	KTAP2+MAPOFFSET
 2605 1068 FFF78FF8 		_DOLIT	BKSPP
 2605      08000000 
 2606 1070 FFF702F9 		BL	XORR
 2607 1074 FFF7A6F8 		BL	QBRAN
 2608 1078 8C100018 		.word	KTAP1+MAPOFFSET
 2609 107c FFF74AF9 		BL	BLANK
 2610 1080 FFF7D6FF 		BL	TAP
 2611 1084 52F804FB 		_UNNEST
 2612 1088 00000000 		.word	0			// patch
 2613              	KTAP1:
 2614 108c FFF7AAFF 	  BL	BKSP
 2615 1090 52F804FB 		_UNNEST
 2616              	KTAP2:
 2617 1094 FFF7CEF8 	  BL	DROP
 2618 1098 FFF7D4F8 		BL	SWAP
 2619 109c FFF7CAF8 		BL	DROP
 2620 10a0 FFF7CCF8 		BL	DUPP
 2621 10a4 52F804FB 		_UNNEST
 2622              	
ARM GAS  stm32eforth.s 			page 52


 2623              	//    ACCEPT	( b u -- b u )
 2624              	// 	Accept characters to input buffer. Return with actual count.
 2625              		_HEADER ACCEP,6,"ACCEPT"
 2626 10a8 42F804ED 		_NEST
 2627 10ac FFF7CEF8 		BL	OVER
 2628 10b0 FFF7FCF8 		BL	PLUS
 2629 10b4 FFF7CAF8 		BL	OVER
 2630              	ACCP1:
 2631 10b8 FFF754F9 	  BL	DDUP
 2632 10bc FFF7DCF8 		BL	XORR
 2633 10c0 FFF780F8 		BL	QBRAN
 2634 10c4 F4100018 		.word	ACCP4+MAPOFFSET
 2635 10c8 FFF7FEFC 		BL	KEY
 2636 10cc FFF7B6F8 		BL	DUPP
 2637 10d0 FFF720F9 		BL	BLANK
 2638 10d4 FFF759F8 		_DOLIT	127
 2638      7F000000 
 2639 10dc FFF738FA 		BL	WITHI
 2640 10e0 FFF770F8 		BL	QBRAN
 2641 10e4 EE100018 		.word	ACCP2+MAPOFFSET
 2642 10e8 FFF7A2FF 		BL	TAP
 2643 10ec 01E0     		B	ACCP3
 2644              	ACCP2:
 2645 10ee FFF7ADFF 	  BL	KTAP
 2646              	// 	BL	ATEXE
 2647              	ACCP3:	  
 2648 10f2 E1E7     		B	ACCP1
 2649              	ACCP4:
 2650 10f4 FFF79EF8 	  BL	DROP
 2651 10f8 FFF7A8F8 		BL	OVER
 2652 10fc FFF7DAF8 		BL	SUBB
 2653 1100 52F804FB 		_UNNEST
 2654              	
 2655              	//    QUERY	( -- )
 2656              	// 	Accept input stream to terminal input buffer.
 2657              		_HEADER QUERY,5,"QUERY"
 2658 1104 42F804ED 		_NEST
 2659 1108 FFF706FB 		BL	TIB
 2660 110c FFF73DF8 		_DOLIT	80
 2660      50000000 
 2661 1114 FFF7C8FF 		BL	ACCEP
 2662 1118 FFF7D6F9 		BL	NTIB
 2663 111c FFF766F8 		BL	STORE
 2664 1120 FFF788F8 		BL	DROP
 2665 1124 FFF731F8 		_DOLIT	0
 2665      00000000 
 2666 112c FFF7C6F9 		BL	INN
 2667 1130 FFF75CF8 		BL	STORE
 2668 1134 52F804FB 		_UNNEST
 2669              	
 2670              	// **************************************************************************
 2671              	//  Error handling
 2672              	
 2673              	//    ABORT	( a -- )
 2674              	// 	Reset data stack and jump to QUIT.
 2675              		_HEADER ABORT,5,"ABORT"
 2676 1138 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 53


 2677 113c FFF7CEFC 		BL	SPACE
 2678              	ABORT1:
 2679 1140 FFF77AF9 		BL	COUNT
 2680 1144 FFF7E6FC 		BL	TYPEE
 2681 1148 FFF71FF8 		_DOLIT	0X3F
 2681      3F000000 
 2682 1150 FFF70EF8 		BL	EMIT
 2683 1154 FFF7F2FC 		BL	CR
 2684 1158 00F08AF8 		BL	PRESE
 2685 115c 00F092B8 		B.W	QUIT
 2686              	
 2687              	//    _abort"	( f -- )
 2688              	// 	Run time routine of ABORT" . Abort with a message.
 2689              	
 2690              	// 	.word	_ABORT+MAPOFFSET
 2691              	// _ABORQ	.byte  COMPO+6
 2692              	// 	.ascii "abort\""
 2693              	// 	.p2align 2 	
 2694              	ABORQ:
 2695 1160 42F804ED 		_NEST
 2696 1164 FFF7FAFC 		BL	DOSTR 
 2697 1168 FFF76CF8 		BL	SWAP 
 2698 116c FFF72AF8 		BL	QBRAN
 2699 1170 76110018 		.word	1f+MAPOFFSET	// text flag
 2700 1174 E4E7     		B	ABORT1 
 2701              	1:
 2702 1176 FFF75DF8 		BL	DROP
 2703 117a 52F804FB 		_UNNEST			// drop error
 2704              	
 2705              	// **************************************************************************
 2706              	//  The text interpreter
 2707              	
 2708              	//    $INTERPRET  ( a -- )
 2709              	// 	Interpret a word. If failed, try to convert it to an integer.
 2710 117e 00BF     		_HEADER INTER,10,"$INTERPRET"
 2711 1180 42F804ED 		_NEST
 2712 1184 FFF724FF 		BL	NAMEQ
 2713 1188 FFF7DAF8 		BL	QDUP	// ?defined
 2714 118c FFF71AF8 		BL	QBRAN
 2715 1190 C0110018 		.word	INTE1+MAPOFFSET
 2716 1194 FFF730F8 		BL	AT
 2717 1198 FEF7F7FF 		_DOLIT	COMPO
 2717      40000000 
 2718 11a0 FFF75EF8 		BL	ANDD	// ?compile only lexicon bits
 2719 11a4 FFF7DCFF 		BL	ABORQ
 2720 11a8 0D       		.byte	13
 2721 11a9 20636F6D 		.ascii " compile only"
 2721      70696C65 
 2721      206F6E6C 
 2721      79
 2722 11b6 00BF     		.p2align 2 	
 2723 11b8 FEF7F0FF 		BL	EXECU
 2724 11bc 52F804FB 		_UNNEST			// execute defined word
 2725              	INTE1:
 2726 11c0 FFF7ECFB 	  BL	NUMBQ
 2727 11c4 FEF7FEFF 		BL	QBRAN
 2728 11c8 D0110018 		.word	INTE2+MAPOFFSET
ARM GAS  stm32eforth.s 			page 54


 2729 11cc 52F804FB 		_UNNEST
 2730              	INTE2:
 2731 11d0 FFF7B2BF 	  B.W	ABORT	// error
 2732              	
 2733              	//    [	   ( -- )
 2734              	// 	Start the text interpreter.
 2735              		_HEADER LBRAC,IMEDD+1,"["
 2736 11d4 42F804ED 		_NEST
 2737 11d8 FEF7D7FF 		_DOLIT	INTER+MAPOFFSET
 2737      80110018 
 2738 11e0 FFF778F9 		BL	TEVAL
 2739 11e4 FFF702F8 		BL	STORE
 2740 11e8 52F804FB 		_UNNEST
 2741              	
 2742              	//    .OK	 ( -- )
 2743              	// 	Display "ok" only while interpreting.
 2744              		_HEADER DOTOK,3,".OK"
 2745 11ec 42F804ED 		_NEST
 2746 11f0 FEF7CBFF 		_DOLIT	INTER+MAPOFFSET
 2746      80110018 
 2747 11f8 FFF76CF9 		BL	TEVAL
 2748 11fc FEF7FCFF 		BL	AT
 2749 1200 FFF7D6F8 		BL	EQUAL
 2750 1204 FEF7DEFF 		BL	QBRAN
 2751 1208 14120018 		.word	DOTO1+MAPOFFSET
 2752 120c FFF7CEFC 		BL	DOTQP
 2753 1210 03       		.byte	3
 2754 1211 206F6B   		.ascii " ok"
 2755              	DOTO1:
 2756 1214 FFF792FC 		BL	CR
 2757 1218 52F804FB 		_UNNEST
 2758              	
 2759              	//    ?STACK	( -- )
 2760              	// 	Abort if the data stack underflows.
 2761              		_HEADER QSTAC,6,"?STACK"
 2762 121c 42F804ED 		_NEST
 2763 1220 FFF750FA 		BL	DEPTH
 2764 1224 FFF716F8 		BL	ZLESS	// check only for underflow
 2765 1228 FFF79AFF 		BL	ABORQ
 2766 122c 0A       		.byte	10
 2767 122d 20756E64 		.ascii " underflow"
 2767      6572666C 
 2767      6F77
 2768 1237 00       		.p2align 2 	
 2769 1238 52F804FB 		_UNNEST
 2770              	
 2771              	//    EVAL	( -- )
 2772              	// 	Interpret the input stream.
 2773              		_HEADER EVAL,4,"EVAL"
 2774 123c 42F804ED 		_NEST
 2775              	EVAL1:
 2776 1240 FFF716FE 	    BL	TOKEN
 2777 1244 FEF7FAFF 		BL	DUPP
 2778 1248 FEF7DEFF 		BL	CAT	// ?input stream empty
 2779 124c FEF7BAFF 		BL	QBRAN
 2780 1250 64120018 		.word	EVAL2+MAPOFFSET
 2781 1254 FFF73EF9 		BL	TEVAL
ARM GAS  stm32eforth.s 			page 55


 2782 1258 FFF762FA 		BL	ATEXE
 2783 125c FFF7DEFF 		BL	QSTAC	// evaluate input, check stack
 2784 1260 FFF7EEBF 		B.W	EVAL1
 2785              	EVAL2:
 2786 1264 FEF7E6FF 		BL	DROP
 2787 1268 FFF7C0FF 		BL	DOTOK
 2788 126c 52F804FB 		_UNNEST	// prompt
 2789              	
 2790              	//    PRESET	( -- )
 2791              	// 	Reset data stack pointer and the terminal input buffer.
 2792              		_HEADER PRESE,6,"PRESET"
 2793 1270 42F804ED 		_NEST
 2794 1274 4FF47F41 		_MOV32 R1,SPP // init SP 
 2794      C2F20101 
 2795 127c 85EA0505 		EOR	R5,R5,R5//  init TOS=0
 2796 1280 52F804FB 		_UNNEST 
 2797              	
 2798              	//    QUIT	( -- )
 2799              	// 	Reset return stack pointer and start text interpreter.
 2800              		_HEADER QUIT,4,"QUIT"
 2801 1284 42F804ED 		_NEST
 2802 1288 4FF68072 		_MOV32 R2,RPP
 2802      C2F20102 
 2803              	QUIT1:
 2804 1290 FFF7A0FF 		BL	LBRAC			// start interpretation
 2805              	QUIT2:
 2806 1294 FFF736FF 		BL	QUERY			// get input
 2807 1298 FFF7D0FF 		BL	EVAL
 2808 129c FEF79EFF 		BL	BRAN
 2809 12a0 94120018 		.word	QUIT2+MAPOFFSET	// continue till error
 2810              	
 2811              	/****************************************
 2812              	  Flash memory interface
 2813              	REF: RM0383 reference manual section 3.5
 2814              	****************************************/
 2815              	// UNLOCK ( T|F -- )
 2816              	// lock or unlock FLASH write 
 2817              		_HEADER UNLOCK,6,"UNLOCK"
 2818 12a4 42F804ED 		_NEST 
 2819 12a8 FEF78CFF 		BL QBRAN
 2820 12ac CC120018 		.word LOCK+MAPOFFSET
 2821 12b0 AE48     		ldr	r0, flash_regs 
 2822 12b2 0469     		ldr r4, [r0,#FLASH_CR]
 2823 12b4 14F0004F 		tst r4,#(1<<31)
 2824 12b8 06D0     		beq 1f // trying unlock sequence when already unlock generate exception 
 2825 12ba 40F2F314 		mov r4,#0x1f3 // clear EOP|OPERR|WRPERR|PGAERR|PGPERR|RDERR bits 
 2826 12be C460     		str r4,[r0,#FLASH_SR]
 2827 12c0 AB4C     		ldr	r4, flash_regs+4 // key1
 2828 12c2 4460     		str	r4, [r0, #FLASH_KEYR]
 2829 12c4 AB4C     		ldr	r4, flash_regs+8 // key2 
 2830 12c6 4460     		str	r4, [r0, #FLASH_KEYR]
 2831 12c8 52F804FB 	1:	_UNNEST
 2832              	 // lock flash memory
 2833              	LOCK: 
 2834 12cc A748     		ldr r0,flash_regs  
 2835 12ce 4FF00044 		mov r4,#(1<<31) // LOCK BIT 
 2836 12d2 0461     		str r4,[r0,#FLASH_CR]
ARM GAS  stm32eforth.s 			page 56


 2837 12d4 52F804FB 		_UNNEST  
 2838              	
 2839              	WAIT_BSY:
 2840 12d8 A448     		ldr	r0,flash_regs
 2841              	WAIT1:
 2842 12da C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 2843 12dc 14F48034 		ands	r4, #(1<<16)	//  BSY
 2844 12e0 FBD1     		bne	WAIT1
 2845 12e2 7047     		_NEXT
 2846              	
 2847              	// check for flash write error 
 2848              	FLASH_ERR_CHECK:
 2849 12e4 42F804ED 		_NEST
 2850 12e8 41F8045D 		_PUSH 
 2851 12ec C568     		ldr r5,[r0,#FLASH_SR] // check for errors 
 2852 12ee FFF737FF 		bl ABORQ 
 2853 12f2 1F       		.byte 31
 2854 12f3 20666C61 		.ascii " flash erase|programming error!"
 2854      73682065 
 2854      72617365 
 2854      7C70726F 
 2854      6772616D 
 2855 1312 00BF     		.p2align 2
 2856 1314 52F804FB 		_UNNEST 
 2857              	
 2858              	//    ERASE_SECTOR	   ( sector -- )
 2859              	// 	  Erase one sector of flash memory.
 2860              	//    stm32f411 has 7 sectors of different size. 
 2861              		_HEADER ESECTOR,12,"ERASE_SECTOR"
 2862 1318 42F804ED 		_NEST
 2863 131c FFF7DCFF 		bl	WAIT_BSY
 2864 1320 FEF733FF 		_DOLIT 1 
 2864      01000000 
 2865 1328 FFF7BCFF 		bl  UNLOCK
 2866 132c 05F00704 		and R4,r5,#7  // sectors {0..7}
 2867 1330 4FEAC404 		lsl r4,r4,#3
 2868 1334 44F00204 		orr r4,#2   
 2869 1338 8C48     		ldr r0,flash_regs
 2870 133a 51F8045B 		_POP 
 2871              	//	str r4,[r0,#FLASH_CR]
 2872 133e 44F48034 		orr r4,#(1<<16) // START bit 
 2873 1342 0461     		str r4,[r0,#FLASH_CR] 	 
 2874 1344 FFF7C8FF 	 	bl	WAIT_BSY // wait until done
 2875 1348 FFF7CCFF 		bl FLASH_ERR_CHECK
 2876 134c 52F804FB 		_UNNEST
 2877              	
 2878              	//    I!	   ( data address -- )
 2879              	// 	   Write one 32 bits word into flash memory
 2880              	//	   address must align on 4 bytes boundary   
 2881              		_HEADER ISTOR,2,"I!"
 2882 1350 42F804ED 		_NEST
 2883 1354 FFF7C0FF 		bl	WAIT_BSY
 2884 1358 FEF717FF 		_DOLIT 1 
 2884      01000000 
 2885 1360 FFF7A0FF 		bl  UNLOCK 
 2886 1364 8148     		ldr r0,flash_regs 
 2887 1366 40F20124 		mov r4,#(2<<8)+1
ARM GAS  stm32eforth.s 			page 57


 2888 136a 0461     		str r4,[r0,#FLASH_CR]
 2889 136c 2C46     		mov r4,r5 
 2890 136e 51F8045B 		_POP 
 2891 1372 2560     		str r5,[r4]
 2892 1374 51F8045B 		_POP 
 2893 1378 FFF7AEFF 		bl WAIT_BSY 
 2894 137c FEF705FF 		_DOLIT 0 
 2894      00000000 
 2895 1384 FFF78EFF 		BL UNLOCK 
 2896 1388 FFF7ACFF 		bl FLASH_ERR_CHECK
 2897 138c 52F804FB 		_UNNEST
 2898              	
 2899              	
 2900              	// IMG_SIZE ( -- u )
 2901              	// return image size in 32 bits words  
 2902              	// user ram  
 2903              		_HEADER IMG_SIZE,8,"IMG_SIZE"
 2904 1390 42F804ED 		_NEST
 2905 1394 FEF7F9FE 		_DOLIT VARS_END_OFS-IMG_SIGN_OFS 
 2905      38000000 
 2906 139c FFF7ACF9 		BL HERE  
 2907 13a0 FFF7BCF8 		BL USER_BEGIN 
 2908 13a4 FEF786FF 		BL SUBB 
 2909 13a8 FEF780FF 		BL PLUS 
 2910 13ac FEF7EDFE 		_DOLIT 4 
 2910      04000000 
 2911 13b4 FFF72AF9 		BL SLMOD 
 2912 13b8 FEF744FF 		BL SWAP 
 2913 13bc FEF702FF 		BL QBRAN 
 2914 13c0 C8130018 		.word 1f+MAPOFFSET 
 2915 13c4 FEF78EFF 		BL ONEP
 2916              	1:
 2917 13c8 52F804FB 		_UNNEST  
 2918              	
 2919              	// IMG? (  -- T|F )
 2920              	// check if an image has been saved in FLASH 
 2921              		_HEADER IMGQ,4,"IMG?"
 2922 13cc 42F804ED 		_NEST 
 2923 13d0 FFF7B2F8 		BL IMG_ADR 
 2924 13d4 FEF710FF 		BL AT 
 2925 13d8 FFF7B4F8 		BL IMG_SIGN  
 2926 13dc FEF70CFF 		BL AT 
 2927 13e0 FEF74AFF 		BL XORR  
 2928 13e4 FEF7DCFF 		BL ZEQUAL
 2929 13e8 52F804FB 		_UNNEST
 2930              	
 2931              	/*************************************************
 2932              	  Image load and save is done in 
 2933              	  sector 7 which is 128KB at address 0x08060000
 2934              	************************************************/
 2935              	
 2936              	// LOAD_IMG (  -- )
 2937              	// Load image from FLASH to RAM. 
 2938              		_HEADER LOAD_IMG,8,"LOAD_IMG"
 2939 13ec 42F804ED 		_NEST 
 2940 13f0 FFF7ECFF 		BL IMGQ 
 2941 13f4 FEF7E6FE 		BL QBRAN 
ARM GAS  stm32eforth.s 			page 58


 2942 13f8 40140018 		.word 1f+MAPOFFSET
 2943              	/* copy system variables to RAM */
 2944 13fc FFF79CF8 		BL IMG_ADR 
 2945 1400 FEF71CFF 		BL DUPP 
 2946 1404 FEF70CFF 		BL TOR   // save source address 
 2947 1408 FFF79CF8 		BL IMG_SIGN 
 2948 140c 41F8045D 		_PUSH 
 2949 1410 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 2950 1414 FEF712FF 		BL DUPP 
 2951 1418 FEF702FF 		BL TOR 
 2952 141c FFF79CF9 		BL MOVE // ( src dest count -- ) R: src count 
 2953              	/* copy user definitions */
 2954 1420 FEF7F4FE 		BL RFROM 
 2955 1424 FEF7F2FE 		BL RFROM  
 2956 1428 FEF740FF 		BL PLUS // source address  
 2957 142c FFF776F8 		BL USER_BEGIN // destination address
 2958 1430 FFF762F9 		BL HERE  
 2959 1434 FEF70AFF 		BL OVER 
 2960 1438 FEF73CFF 		BL SUBB  // byte count 
 2961 143c FFF78CF9 		BL MOVE
 2962 1440 52F804FB 	1:	_UNNEST  
 2963              	
 2964              	// FLSH_WR ( src dest u -- dest+u )
 2965              	// write u words to flash memory 
 2966              		_HEADER FLSH_WR,7,"FLSH_WR"
 2967 1444 42F804ED 		_NEST 
 2968 1448 FEF7EAFE 		BL TOR
 2969 144c FEF7C6FE 		BL BRAN 
 2970 1450 74140018 		.word 3f+MAPOFFSET  
 2971              	/* write system variables to FLASH */
 2972 1454 FEF7E4FE 	2:  BL TOR  // destination address 
 2973 1458 FEF7F0FE 		BL DUPP 
 2974 145c FEF7CCFE 		BL AT   // get data 
 2975 1460 FEF7DAFE 		BL RAT  // get destination address 
 2976 1464 FFF774FF 		BL ISTOR
 2977 1468 FEF74CFF 		BL CELLP  // increment source address 
 2978 146c FEF7CEFE 		BL RFROM 
 2979 1470 FEF748FF 		BL CELLP  // increment dest address 
 2980 1474 FEF797FE 	3:	BL DONXT 
 2981 1478 54140018 		.word 2b+MAPOFFSET
 2982 147c FEF7D0FE 		BL TOR 
 2983 1480 FEF7D8FE 		BL DROP 
 2984 1484 FEF7C2FE 		BL RFROM 
 2985 1488 52F804FB 		_UNNEST 
 2986              	
 2987              	// ERASE_IMG (  -- )
 2988              	// erase image in from FLASH
 2989              	// image is saved in sector 7   
 2990              		_HEADER ERASE_IMG,9,"ERASE_IMG"
 2991 148c 42F804ED 		_NEST
 2992 1490 FEF77BFE 		_DOLIT 7
 2992      07000000 
 2993 1498 FFF73EFF 		BL ESECTOR 
 2994 149c 52F804FB 		_UNNEST 
 2995              	
 2996              	// SAVE_IMG ( -- )
 2997              	// save in FLASH memory system variables and user defintitions.
ARM GAS  stm32eforth.s 			page 59


 2998              		_HEADER SAVE_IMG,8,"SAVE_IMG"
 2999 14a0 42F804ED 		_NEST 
 3000 14a4 FFF728F9 		BL HERE 
 3001 14a8 FFF738F8 		BL USER_BEGIN
 3002 14ac FEF780FF 		BL EQUAL 
 3003 14b0 FEF788FE 		BL QBRAN
 3004 14b4 BC140018 		.word 1f+MAPOFFSET 
 3005 14b8 52F804FB 		_UNNEST  // nothing to save 
 3006 14bc FFF786FF 	1:	BL IMGQ 
 3007 14c0 FEF780FE 		BL QBRAN 
 3008 14c4 CC140018 		.word 2f+MAPOFFSET
 3009              	/* delete saved image */
 3010 14c8 FFF7E0FF 		BL ERASE_IMG 
 3011              	/* save system variables */
 3012              	2:	
 3013 14cc FFF73AF8 		BL IMG_SIGN // src address 
 3014 14d0 FFF732F8 		BL IMG_ADR  //  ( src dest --  
 3015 14d4 41F8045D 		_PUSH 
 3016 14d8 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 3017 14dc FEF724FF 		BL CELLSL  // word count 
 3018 14e0 FFF7B0FF 		BL FLSH_WR  // ( src dest count -- dest+u )
 3019              	/* write user definitions */
 3020 14e4 FFF71AF8 		BL USER_BEGIN
 3021 14e8 FEF7ACFE 		BL SWAP  // ( src dest+ -- )
 3022 14ec FFF704F9 		BL HERE   
 3023 14f0 FFF714F8 		BL USER_BEGIN 
 3024 14f4 FEF7DEFE 		BL SUBB 
 3025 14f8 FEF716FF 		BL CELLSL  // src dest+ count -- 
 3026 14fc FFF7A2FF 		BL FLSH_WR  
 3027 1500 52F804FB 		_UNNEST 
 3028              	
 3029              	// TURNKEY ( -- "WORD") 
 3030              	// set autorun program in 'BOOT variable 
 3031              	// and save image in slot 0.
 3032              		_HEADER TURNKEY,7,"TURNKEY"
 3033 1504 42F804ED 		_NEST 
 3034 1508 00F03AF8 		BL TICK 
 3035 150c FEF7C0FF 		BL TBOOT 
 3036 1510 FEF76CFE 		BL STORE 
 3037 1514 FFF7C4FF 		BL SAVE_IMG 
 3038 1518 52F804FB 		_UNNEST
 3039              	
 3040              	// FORGET ( -- ) "word"
 3041              	// forget all words defined from "word"	
 3042              		_HEADER FORGET,6,"FORGET"
 3043 151c 42F804ED 		_NEST 
 3044 1520 FFF7A6FC 		BL TOKEN 
 3045 1524 FEF78AFE 		BL DUPP 
 3046 1528 FEF74CFE 		BL QBRAN 
 3047 152c FEF72DFE 		_DOLIT 9f+MAPOFFSET 
 3047      68150018 
 3048 1534 FFF74CFD 		BL NAMEQ // ( a -- ca na | a 0 )
 3049 1538 FEF702FF 		BL QDUP 
 3050 153c FEF742FE 		BL QBRAN 
 3051 1540 64150018 		.word 8f+MAPOFFSET
 3052 1544 FEF7E2FE 		BL CELLM // ( ca la )
 3053 1548 FEF778FE 		BL DUPP 
ARM GAS  stm32eforth.s 			page 60


 3054 154c FEF7D4FF 		BL CPP   
 3055 1550 FEF74CFE 		BL STORE
 3056 1554 FEF750FE 		BL AT 
 3057 1558 FEF7DAFF 		BL LAST 
 3058 155c FEF746FE 		BL STORE
 3059 1560 00F0A4F9 		BL OVERT 
 3060 1564 FEF766FE 	8:  BL DROP 
 3061 1568 52F804FB 	9:	_UNNEST 
 3062              	
 3063              	flash_regs:
 3064 156c 003C0240 		.word FLASH_BASE_ADR // 0 
 3065 1570 23016745 		.word FLASH_KEY1   // 4 
 3066 1574 AB89EFCD 		.word FLASH_KEY2   // 8
 3067 1578 3B2A1908 		.word OPTKEY1  // 12 
 3068 157c 7F6E5D4C 		.word OPTKEY2 // 16
 3069              	
 3070              	
 3071              	// **************************************************************************
 3072              	//  The compiler
 3073              	
 3074              	//    '	   ( -- ca )
 3075              	// 	Search context vocabularies for the next word in input stream.
 3076              		_HEADER TICK,1,"'"
 3077 1580 42F804ED 		_NEST
 3078 1584 FFF774FC 		BL	TOKEN
 3079 1588 FFF722FD 		BL	NAMEQ	// ?defined
 3080 158c FEF71AFE 		BL	QBRAN
 3081 1590 98150018 		.word	TICK1+MAPOFFSET
 3082 1594 52F804FB 		_UNNEST	// yes, push code address
 3083 1598 FFF7CEBD 	TICK1:	B.W	ABORT	// no, error
 3084              	
 3085              	//    ALLOT	( n -- )
 3086              	// 	Allocate n bytes to the ram area.
 3087              		_HEADER ALLOT,5,"ALLOT"
 3088 159c 42F804ED 		_NEST
 3089 15a0 FEF7AAFF 		BL	CPP
 3090 15a4 FEF730FF 		BL	PSTOR
 3091 15a8 52F804FB 		_UNNEST			// adjust code pointer
 3092              	
 3093              	//    ,	   ( w -- )
 3094              	// 	Compile an integer into the code dictionary.
 3095              		_HEADER COMMA,1,","
 3096 15ac 42F804ED 		_NEST
 3097 15b0 FFF7A2F8 		BL	HERE
 3098 15b4 FEF742FE 		BL	DUPP
 3099 15b8 FEF7A4FE 		BL	CELLP	// cell boundary
 3100 15bc FEF79CFF 		BL	CPP
 3101 15c0 FEF714FE 		BL	STORE
 3102 15c4 FEF712FE 		BL	STORE
 3103 15c8 52F804FB 		_UNNEST	// adjust code pointer, compile
 3104              		.p2align 2 
 3105              	//    [COMPILE]   ( -- //  string> )
 3106              	// 	Compile the next immediate word into code dictionary.
 3107              		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3108 15cc 42F804ED 		_NEST
 3109 15d0 FFF7D6FF 		BL	TICK
 3110 15d4 FFF7EAFF 		BL	COMMA
ARM GAS  stm32eforth.s 			page 61


 3111 15d8 52F804FB 		_UNNEST
 3112              	
 3113              	//    COMPILE	( -- )
 3114              	// 	Compile the next address in colon list to code dictionary.
 3115              		_HEADER COMPI,COMPO+7,"COMPILE"
 3116 15dc 42F804ED 		_NEST
 3117 15e0 FEF714FE 		BL	RFROM
 3118 15e4 25F00105 		BIC	R5,R5,#1
 3119 15e8 FEF728FE 		BL	DUPP
 3120 15ec FEF704FE 		BL	AT
 3121 15f0 00F0A3F9 		BL	CALLC			// compile BL instruction
 3122 15f4 FEF786FE 		BL	CELLP
 3123 15f8 45F00105 		ORR	R5,R5,#1
 3124 15fc FEF710FE 		BL	TOR
 3125 1600 52F804FB 		_UNNEST			// adjust return address
 3126              	
 3127              	//    LITERAL	( w -- )
 3128              	// 	Compile tos to code dictionary as an integer literal.
 3129              		_HEADER LITER,IMEDD+7,"LITERAL"
 3130 1604 44090018 		.word	_COMPI+MAPOFFSET
 3131 1608 42F804ED 		_NEST
 3132 160c FFF7E6FF 		BL	COMPI
 3133 1610 8A010018 		.word	DOLIT+MAPOFFSET
 3134 1614 FFF7CAFF 		BL	COMMA
 3135 1618 52F804FB 		_UNNEST
 3136              	
 3137              	//    $,"	( -- )
 3138              	// 	Compile a literal string up to next " .
 3139              	
 3140              	// 	.word	_LITER+MAPOFFSET
 3141              	// _STRCQ	.byte  3
 3142              	// 	.ascii "$$,"""
 3143              	// 	.p2align 2 	
 3144              	STRCQ:
 3145 161c 42F804ED 		_NEST
 3146 1620 FEF7B3FD 		_DOLIT	-4
 3146      FCFFFFFF 
 3147 1628 FEF766FF 		BL	CPP
 3148 162c FEF7ECFE 		BL	PSTOR
 3149 1630 FEF7ABFD 		_DOLIT	'\"'
 3149      22000000 
 3150 1638 FFF70EFC 		BL	WORDD			// move word to code dictionary
 3151 163c FEF7FCFE 		BL	COUNT
 3152 1640 FEF734FE 		BL	PLUS
 3153 1644 FFF716F8 		BL	ALGND			// calculate aligned end of string
 3154 1648 FEF756FF 		BL	CPP
 3155 164c FEF7CEFD 		BL	STORE
 3156 1650 52F804FB 		_UNNEST 			// adjust the code pointer
 3157              	
 3158              	// **************************************************************************
 3159              	//  Structures
 3160              	
 3161              	//    FOR	 ( -- a )
 3162              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3163              		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3164 1654 42F804ED 		_NEST
 3165 1658 FFF7C0FF 		BL	COMPI
ARM GAS  stm32eforth.s 			page 62


 3166 165c 20020018 		.word	TOR+MAPOFFSET
 3167 1660 FFF74AF8 		BL	HERE
 3168 1664 52F804FB 		_UNNEST
 3169              	
 3170              	//    BEGIN	( -- a )
 3171              	// 	Start an infinite or indefinite loop structure.
 3172              		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3173 1668 42F804ED 		_NEST
 3174 166c FFF744F8 		BL	HERE
 3175 1670 52F804FB 		_UNNEST
 3176              		.p2align 2 
 3177              	//    NEXT	( a -- )
 3178              	// 	Terminate a FOR-NEXT loop structure.
 3179              		_HEADER NEXT,COMPO+IMEDD+4,"NEXT"
 3180 1674 42F804ED 		_NEST
 3181 1678 FFF7B0FF 		BL	COMPI
 3182 167c A6010018 		.word	DONXT+MAPOFFSET
 3183 1680 FFF794FF 		BL	COMMA
 3184 1684 52F804FB 		_UNNEST
 3185              	
 3186              	//    UNTIL	( a -- )
 3187              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3188              		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3189 1688 42F804ED 		_NEST
 3190 168c FFF7A6FF 		BL	COMPI
 3191 1690 C4010018 		.word	QBRAN+MAPOFFSET
 3192 1694 FFF78AFF 		BL	COMMA
 3193 1698 52F804FB 		_UNNEST
 3194              	
 3195              	//    AGAIN	( a -- )
 3196              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3197              		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3198 169c 42F804ED 		_NEST
 3199 16a0 FFF79CFF 		BL	COMPI
 3200 16a4 DC010018 		.word	BRAN+MAPOFFSET
 3201 16a8 FFF780FF 		BL	COMMA
 3202 16ac 52F804FB 		_UNNEST
 3203              	
 3204              	//    IF	  ( -- A )
 3205              	// 	Begin a conditional branch structure.
 3206              		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3207 16b0 42F804ED 		_NEST
 3208 16b4 FFF792FF 		BL	COMPI
 3209 16b8 C4010018 		.word	QBRAN+MAPOFFSET
 3210 16bc FFF71CF8 		BL	HERE
 3211 16c0 FEF763FD 		_DOLIT	4
 3211      04000000 
 3212 16c8 FEF716FF 		BL	CPP
 3213 16cc FEF79CFE 		BL	PSTOR
 3214 16d0 52F804FB 		_UNNEST
 3215              	
 3216              	//    AHEAD	( -- A )
 3217              	// 	Compile a forward branch instruction.
 3218              		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3219 16d4 42F804ED 		_NEST
 3220 16d8 FFF780FF 		BL	COMPI
 3221 16dc DC010018 		.word	BRAN+MAPOFFSET
ARM GAS  stm32eforth.s 			page 63


 3222 16e0 FFF70AF8 		BL	HERE
 3223 16e4 FEF751FD 		_DOLIT	4
 3223      04000000 
 3224 16ec FEF704FF 		BL	CPP
 3225 16f0 FEF78AFE 		BL	PSTOR
 3226 16f4 52F804FB 		_UNNEST
 3227              	
 3228              	//    REPEAT	( A a -- )
 3229              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3230              		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3231 16f8 42F804ED 		_NEST
 3232 16fc FFF7CEFF 		BL	AGAIN
 3233 1700 FEF7FAFF 		BL	HERE
 3234 1704 FEF79EFD 		BL	SWAP
 3235 1708 FEF770FD 		BL	STORE
 3236 170c 52F804FB 		_UNNEST
 3237              	
 3238              	//    THEN	( A -- )
 3239              	// 	Terminate a conditional branch structure.
 3240              		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3241 1710 42F804ED 		_NEST
 3242 1714 FEF7F0FF 		BL	HERE
 3243 1718 FEF794FD 		BL	SWAP
 3244 171c FEF766FD 		BL	STORE
 3245 1720 52F804FB 		_UNNEST
 3246              	
 3247              	//    AFT	 ( a -- a A )
 3248              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3249              		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3250 1724 42F804ED 		_NEST
 3251 1728 FEF784FD 		BL	DROP
 3252 172c FFF7D2FF 		BL	AHEAD
 3253 1730 FFF79AFF 		BL	BEGIN
 3254 1734 FEF786FD 		BL	SWAP
 3255 1738 52F804FB 		_UNNEST
 3256              	
 3257              	//    ELSE	( A -- A )
 3258              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3259              		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3260 173c 42F804ED 		_NEST
 3261 1740 FFF7C8FF 		BL	AHEAD
 3262 1744 FEF77EFD 		BL	SWAP
 3263 1748 FFF7E2FF 		BL	THENN
 3264 174c 52F804FB 		_UNNEST
 3265              	
 3266              	//    WHILE	( a -- A a )
 3267              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3268              		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3269 1750 42F804ED 		_NEST
 3270 1754 FFF7ACFF 		BL	IFF
 3271 1758 FEF774FD 		BL	SWAP
 3272 175c 52F804FB 		_UNNEST
 3273              	
 3274              	//    ABORT"	( -- //  string> )
 3275              	// 	Conditional abort with an error message.
 3276              		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3277 1760 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 64


 3278 1764 FFF73AFF 		BL	COMPI
 3279 1768 60110018 		.word	ABORQ+MAPOFFSET
 3280 176c FFF756FF 		BL	STRCQ
 3281 1770 52F804FB 		_UNNEST
 3282              	
 3283              	//    $"	( -- //  string> )
 3284              	// 	Compile an inline string literal.
 3285              		_HEADER STRQ,IMEDD+2,"$\""
 3286 1774 42F804ED 		_NEST
 3287 1778 FFF730FF 		BL	COMPI
 3288 177c 900B0018 		.word	STRQP+MAPOFFSET
 3289 1780 FFF74CFF 		BL	STRCQ
 3290 1784 52F804FB 		_UNNEST
 3291              	
 3292              	//    ."	( -- //  string> )
 3293              	// 	Compile an inline word  literal to be typed out at run time.
 3294              		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3295 1788 42F804ED 		_NEST
 3296 178c FFF726FF 		BL	COMPI
 3297 1790 AC0B0018 		.word	DOTQP+MAPOFFSET
 3298 1794 FFF742FF 		BL	STRCQ
 3299 1798 52F804FB 		_UNNEST
 3300              	
 3301              	/*******************
 3302              	  Name compiler
 3303              	*******************/
 3304              	
 3305              	//    ?UNIQUE	( a -- a )
 3306              	// 	Display a warning message if the word already exists.
 3307              		_HEADER UNIQU,7,"?UNIQUE"
 3308 179c 42F804ED 		_NEST
 3309 17a0 FEF74CFD 		BL	DUPP
 3310 17a4 FFF714FC 		BL	NAMEQ			// ?name exists
 3311 17a8 FEF70CFD 		BL	QBRAN
 3312 17ac C8170018 		.word	UNIQ1+MAPOFFSET	// redefinitions are OK
 3313 17b0 FFF7FCF9 		BL	DOTQP
 3314 17b4 07       		.byte	7
 3315 17b5 20726544 		.ascii " reDef "		// but warn the user
 3315      656620
 3316              		.p2align 2 	
 3317 17bc FEF746FD 		BL	OVER
 3318 17c0 FEF73AFE 		BL	COUNT
 3319 17c4 FFF7A6F9 		BL	TYPEE			// just in case its not planned
 3320              	UNIQ1:
 3321 17c8 FEF734FD 		BL	DROP
 3322 17cc 52F804FB 		_UNNEST
 3323              	
 3324              	//    $,n	 ( na -- )
 3325              	// 	Build a new dictionary name using the data at na.
 3326              	
 3327              	// 	.word	_UNIQU+MAPOFFSET
 3328              	// _SNAME	.byte  3
 3329              	// 	.ascii "$,n"
 3330              	// 	.p2align 2 	
 3331              	SNAME:
 3332 17d0 42F804ED 		_NEST
 3333 17d4 FEF732FD 		BL	DUPP			//  na na
ARM GAS  stm32eforth.s 			page 65


 3334 17d8 FEF716FD 		BL	CAT			//  ?null input
 3335 17dc FEF7F2FC 		BL	QBRAN
 3336 17e0 18180018 		.word	SNAM1+MAPOFFSET
 3337 17e4 FFF7DAFF 		BL	UNIQU			//  na
 3338 17e8 FEF792FE 		BL	LAST			//  na last
 3339 17ec FEF704FD 		BL	AT			//  na la
 3340 17f0 FFF7DCFE 		BL	COMMA			//  na
 3341 17f4 FEF722FD 		BL	DUPP			//  na na
 3342 17f8 FEF78AFE 		BL	LAST			//  na na last
 3343 17fc FEF7F6FC 		BL	STORE			//  na , save na for vocabulary link
 3344 1800 FEF71AFE 		BL	COUNT			//  na+1 count
 3345 1804 FEF752FD 		BL	PLUS			//  na+1+count
 3346 1808 FEF734FF 		BL	ALGND			//  word boundary
 3347 180c FEF774FE 		BL	CPP
 3348 1810 FEF7ECFC 		BL	STORE			//  top of dictionary now
 3349 1814 52F804FB 		_UNNEST
 3350              	SNAM1:
 3351 1818 FFF7BAF9 		BL	STRQP
 3352 181c 07       		.byte	7
 3353 181d 206E616D 		.ascii " name? "
 3353      653F20
 3354 1824 FFF788BC 		B.W	ABORT
 3355              	
 3356              	//    $COMPILE	( a -- )
 3357              	// 	Compile next word to code dictionary as a token or literal.
 3358              		_HEADER SCOMP,7,"$COMPILE"
 3359 1828 42F804ED 		_NEST
 3360 182c FFF7D0FB 		BL	NAMEQ
 3361 1830 FEF786FD 		BL	QDUP	// defined?
 3362 1834 FEF7C6FC 		BL	QBRAN
 3363 1838 64180018 		.word	SCOM2+MAPOFFSET
 3364 183c FEF7DCFC 		BL	AT
 3365 1840 FEF7A3FC 		_DOLIT	IMEDD
 3365      80000000 
 3366 1848 FEF70AFD 		BL	ANDD	// immediate?
 3367 184c FEF7BAFC 		BL	QBRAN
 3368 1850 5C180018 		.word	SCOM1+MAPOFFSET
 3369 1854 FEF7A2FC 		BL	EXECU
 3370 1858 52F804FB 		_UNNEST			// it's immediate, execute
 3371              	SCOM1:
 3372 185c 00F06DF8 		BL	CALLC			// it's not immediate, compile
 3373 1860 52F804FB 		_UNNEST	
 3374              	SCOM2:
 3375 1864 FFF79AF8 		BL	NUMBQ
 3376 1868 FEF7ACFC 		BL	QBRAN
 3377 186c 78180018 		.word	SCOM3+MAPOFFSET
 3378 1870 FFF7C8FE 		BL	LITER
 3379 1874 52F804FB 		_UNNEST			// compile number as integer
 3380              	SCOM3: // compilation abort 
 3381 1878 00F002F8 		BL COLON_ABORT 
 3382 187c FFF75CBC 		B.W	ABORT			// error
 3383              	
 3384              	// before aborting a compilation 
 3385              	// reset HERE and LAST
 3386              	// to previous values.  
 3387              	COLON_ABORT:
 3388 1880 42F804ED 		_NEST 
ARM GAS  stm32eforth.s 			page 66


 3389 1884 FEF744FE 		BL LAST 
 3390 1888 FEF7B6FC 		BL AT 
 3391 188c FEF73EFD 		BL CELLM 
 3392 1890 FEF7D4FC 		BL DUPP 
 3393 1894 FEF730FE 		BL CPP  
 3394 1898 FEF7A8FC 		BL STORE 
 3395 189c FEF7ACFC 		BL AT 
 3396 18a0 FEF736FE 		BL LAST 
 3397 18a4 FEF7A2FC 		BL STORE 
 3398 18a8 52F804FB 		_UNNEST 
 3399              	
 3400              	//    OVERT	( -- )
 3401              	// 	Link a new word into the current vocabulary.
 3402              		_HEADER OVERT,5,"OVERT"
 3403 18ac 42F804ED 		_NEST
 3404 18b0 FEF72EFE 		BL	LAST
 3405 18b4 FEF7A0FC 		BL	AT
 3406 18b8 FEF718FE 		BL	CNTXT
 3407 18bc FEF796FC 		BL	STORE
 3408 18c0 52F804FB 		_UNNEST
 3409              	
 3410              	//    ; 	   ( -- )
 3411              	// 	Terminate a colon definition.
 3412              		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3413 18c4 42F804ED 		_NEST
 3414 18c8 FEF75FFC 		BL	DOLIT 
 3415 18cc 52F804FB 		_UNNEST
 3416 18d0 FFF76CFE 		BL	COMMA
 3417 18d4 FFF77EFC 		BL	LBRAC
 3418 18d8 FFF7E8FF 		BL	OVERT
 3419 18dc 52F804FB 		_UNNEST
 3420              	
 3421              	//    ]	   ( -- )
 3422              	// 	Start compiling the words in the input stream.
 3423              		_HEADER RBRAC,1,"]"
 3424 18e0 42F804ED 		_NEST
 3425 18e4 FEF751FC 		_DOLIT SCOMP+MAPOFFSET
 3425      28180018 
 3426 18ec FEF7F2FD 		BL	TEVAL
 3427 18f0 FEF77CFC 		BL	STORE
 3428 18f4 52F804FB 		_UNNEST
 3429              	
 3430              	
 3431              	//    COMPILE_BLW	( ca -- asm_code )
 3432              	// 	Assemble a branch-link long instruction to ca.
 3433              	// ref: ARM-v7M architecture reference, section A7.7.18 
 3434              	COMPILE_BLW:
 3435 18f8 4FEA6505 		ASR R5,R5,#1 
 3436 18fc 4FF45044 		_MOV32 R4,0xF000D000 
 3436      CFF20004 
 3437 1904 65F30A04 		BFI R4,R5,#0,#11
 3438 1908 4FEAD525 		LSR R5,#11
 3439 190c 65F31944 		BFI R4,R5,#16,#10
 3440 1910 4FEAA525 		ASR R5,#10
 3441 1914 65F3CB24 		BFI R4,R5,#11,#1
 3442 1918 4FEA6505 		ASR R5,#1
 3443 191c 65F34D34 		BFI R4,R5,#13,#1
ARM GAS  stm32eforth.s 			page 67


 3444 1920 4FEA6505 		ASR R5,#1
 3445 1924 65F39A64 		BFI R4,R5,#26,#1
 3446 1928 14F0806F 		TST R4,#(1<<26)
 3447 192c 02D1     		BNE 1f
 3448 192e 00BF     		NOP 
 3449 1930 84F42054 		EOR R4,R4,#(5<<11)
 3450 1934 4FEA3445 	1:  ROR R5,R4,#16 
 3451 1938 7047     		_NEXT 
 3452              	
 3453              	// 	.word	_RBRAC+MAPOFFSET
 3454              	// _CALLC	.byte  5
 3455              	// 	.ascii "call,"
 3456              	// 	.p2align 2 	
 3457              	CALLC:
 3458 193a 42F804ED 		_NEST
 3459 193e 25F00105 		BIC R5,R5,#1 
 3460 1942 FEF7D9FE 		BL HERE 
 3461 1946 FEF7B5FC 		BL SUBB 
 3462 194a A5F10405 		SUB R5,R5,#4 
 3463 194e FFF7D3FF 		BL COMPILE_BLW 
 3464 1952 FFF72BFE 		BL	COMMA			//  assemble BL.W instruction
 3465 1956 52F804FB 		_UNNEST
 3466              	
 3467              		.p2align 
 3468              	// 	:	( -- //  string> )
 3469              	// 	Start a new colon definition using next word as its name.
 3470 195a 00BF     		_HEADER COLON,1,":"
 3471 195c 42F804ED 		_NEST
 3472 1960 00F03AF8 		BL	HEAD 
 3473 1964 FFF7BCFF 		BL	RBRAC
 3474 1968 52F804FB 		_UNNEST
 3475              	
 3476              	//    IMMEDIATE   ( -- )
 3477              	// 	Make the last compiled word an immediate word.
 3478              		_HEADER IMMED,9,"IMMEDIATE"
 3479 196c 42F804ED 		_NEST
 3480 1970 FEF70BFC 		_DOLIT IMEDD
 3480      80000000 
 3481 1978 FEF7CAFD 		BL	LAST
 3482 197c FEF73CFC 		BL	AT
 3483 1980 FEF73AFC 		BL	AT
 3484 1984 FEF772FC 		BL	ORR
 3485 1988 FEF7C2FD 		BL	LAST
 3486 198c FEF734FC 		BL	AT
 3487 1990 FEF72CFC 		BL	STORE
 3488 1994 52F804FB 		_UNNEST
 3489              	
 3490              	
 3491              	//  I: ( -- a )
 3492              	// debute la compilation 
 3493              	// d'une routine d'interruption. 
 3494              		_HEADER ICOLON,2,"I:"
 3495 1998 42F804ED 		_NEST 
 3496 199c FEF7ACFE 		BL	HERE
 3497 19a0 FEF7F3FB 		BL	DOLIT 
 3498 19a4 42F804ED 		_NEST 
 3499 19a8 FFF700FE 		BL	COMMA 
ARM GAS  stm32eforth.s 			page 68


 3500 19ac FFF798FF 		BL	RBRAC 
 3501 19b0 52F804FB 		_UNNEST 
 3502              	
 3503              	// I; ( a -- a )
 3504              	// Termine la compilation 
 3505              	// d'une routine d'interruption. 
 3506              		_HEADER ISEMIS,IMEDD+COMPO+2,"I;"
 3507 19b4 42F804ED 		_NEST 
 3508 19b8 FEF7E7FB 		BL	DOLIT 
 3509 19bc 52F804EB 		LDMFD	R2!,{LR}
 3510 19c0 FFF7F4FD 		BL	COMMA
 3511 19c4 FEF7E1FB 		BL	DOLIT 
 3512 19c8 7047     		BX LR 
 3513 19ca 00BF     		NOP 
 3514 19cc FFF7EEFD 		BL COMMA 
 3515 19d0 FFF700FC 		BL	LBRAC
 3516 19d4 52F804FB 		_UNNEST 
 3517              	
 3518              	
 3519              	/*********************
 3520              	   Defining words
 3521              	*********************/
 3522              	
 3523              	//  HEADER ( -- )  "string"
 3524              	// create a dictionary header in RAM
 3525              		_HEADER HEAD,6,"HEADER"
 3526 19d8 42F804ED 		_NEST 
 3527 19dc FFF748FA 		BL	TOKEN
 3528 19e0 FFF7F6FE 		BL	SNAME
 3529 19e4 FEF788FE 		BL	HERE   
 3530 19e8 FEF78CFC 		BL	CELLP
 3531 19ec FFF7DEFD 		BL	COMMA 
 3532 19f0 FEF7CBFB 		BL	DOLIT 
 3533 19f4 42F804ED 		_NEST 
 3534 19f8 FFF7D8FD 		BL	COMMA 
 3535 19fc 52F804FB 		_UNNEST 
 3536              	
 3537              	//    CONSTANT	( u -- //  string> )
 3538              	// 	Compile a new constant.
 3539              		_HEADER CONST,8,"CONSTANT" 
 3540 1a00 42F804ED 		_NEST
 3541 1a04 FFF7E8FF 		BL	HEAD 
 3542 1a08 FEF7BFFB 		_DOLIT DOCON+MAPOFFSET
 3542      60040018 
 3543 1a10 FFF793FF 		BL	CALLC
 3544 1a14 FFF7CAFD 		BL	COMMA
 3545 1a18 FFF748FF 		BL	OVERT 
 3546 1a1c 52F804FB 		_UNNEST
 3547              	
 3548              		.p2align 2 
 3549              	// doDOES> ( -- )
 3550              	// set code addresse in code field of new word 
 3551              	DODOES:
 3552 1a20 42F804ED 		_NEST 
 3553 1a24 FEF774FD 		BL	LAST 
 3554 1a28 FEF7E6FB 		BL	AT 
 3555 1a2c FFF728FA 		BL 	TOCFA
ARM GAS  stm32eforth.s 			page 69


 3556 1a30 FEF762FE 		BL	HERE  // this is ca of new word 
 3557 1a34 FEF70AFC 		BL	OVER  
 3558 1a38 FEF7D8FB 		BL	STORE
 3559 1a3c FEF7A5FB 		BL	DOLIT 
 3560 1a40 42F804ED 		_NEST 
 3561 1a44 FFF7B2FD 		BL COMMA  
 3562 1a48 FEF79FFB 		_DOLIT 12 
 3562      0C000000 
 3563 1a50 FEF72CFC 		BL	PLUS  // parameter field of new word 
 3564 1a54 FFF7D6FD 		BL	LITER
 3565 1a58 FEF7DEFB 		BL RAT 
 3566 1a5c FEF746FC 		BL ONEM 
 3567 1a60 FEF750FC 		BL	CELLP
 3568 1a64 FFF769FF 		BL	CALLC  
 3569 1a68 FEF78FFB 		BL	DOLIT 
 3570 1a6c 52F804FB 		_UNNEST 
 3571 1a70 FFF79CFD 		BL	COMMA 
 3572 1a74 FFF71AFF 		BL	OVERT 
 3573 1a78 52F804FB 		_UNNEST 
 3574              	
 3575              		
 3576              	
 3577              		.p2align 2
 3578              	//  DOES> ( -- )
 3579              	//  compile time action 
 3580              		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3581 1a7c 42F804ED 		_NEST 
 3582 1a80 FEF783FB 		_DOLIT DODOES+MAPOFFSET
 3582      201A0018 
 3583 1a88 FFF757FF 		BL CALLC 
 3584 1a8c FEF77DFB 		BL	DOLIT	
 3585 1a90 52F804FB 		_UNNEST 
 3586 1a94 FFF78AFD 		BL	COMMA  
 3587 1a98 FEF777FB 		BL	DOLIT 
 3588 1a9c 42F804ED 		_NEST 
 3589 1aa0 FFF784FD 		BL	COMMA 
 3590 1aa4 52F804FB 		_UNNEST 
 3591              	
 3592              	
 3593              	//    CREATE	( -- //  string> )
 3594              	// 	Compile a new array entry without allocating code space.
 3595              		_HEADER CREAT,6,"CREATE"
 3596 1aa8 42F804ED 		_NEST
 3597 1aac FFF794FF 		BL	HEAD 
 3598 1ab0 FEF76BFB 		_DOLIT DOVAR+MAPOFFSET 
 3598      54040018 
 3599 1ab8 FFF73FFF 		BL	CALLC  
 3600 1abc 52F804FB 		_UNNEST
 3601              	
 3602              	//    VARIABLE	( -- //  string> )
 3603              	// 	Compile a new variable initialized to 0.
 3604              		_HEADER VARIA,8,"VARIABLE"
 3605 1ac0 42F804ED 		_NEST
 3606 1ac4 FFF7F0FF 		BL	CREAT
 3607 1ac8 FEF75FFB 		_DOLIT 0
 3607      00000000 
 3608 1ad0 FFF76CFD 		BL	COMMA
ARM GAS  stm32eforth.s 			page 70


 3609 1ad4 FFF7EAFE 		BL	OVERT 
 3610 1ad8 52F804FB 		_UNNEST
 3611              	
 3612              	//  FCALL ( a -- )
 3613              	//  call code in FLASH memory 
 3614              	//  from RAM or opposite
 3615              		_HEADER FCALL,5,"FCALL"
 3616 1adc 42F804ED 		_NEST 
 3617 1ae0 2C46     		MOV R4,R5
 3618 1ae2 51F8045B 		_POP 
 3619 1ae6 44F00104 		ORR R4,R4,#1
 3620 1aea A047     		BLX R4 
 3621 1aec 52F804FB 		_UNNEST 
 3622              	
 3623              	
 3624              	// DEFER ( -- ) name
 3625              	// create a differed word 
 3626              		_HEADER DEFER,5,"DEFER"
 3627 1af0 42F804ED 		_NEST 
 3628 1af4 FFF770FF 		BL	HEAD
 3629 1af8 FEF747FB 		_DOLIT  NOP + MAPOFFSET 
 3629      88010018 
 3630 1b00 FFF71BFF 		BL	CALLC 
 3631 1b04 FEF741FB 		BL	DOLIT 
 3632 1b08 52F804FB 		_UNNEST  
 3633 1b0c FFF74EFD 		BL	COMMA 
 3634 1b10 FFF7CCFE 		BL	OVERT  
 3635 1b14 52F804FB 		_UNNEST 
 3636              	
 3637              	// DEFER! ( a -- ) name 
 3638              	// set execution address of a defered word 
 3639              		_HEADER DEFERSTO,6,"DEFER!"
 3640 1b18 42F804ED 		_NEST
 3641 1b1c 25F00105 		BIC R5,R5,#1 
 3642 1b20 FFF72EFD 		BL	TICK 
 3643 1b24 FEF7EEFB 		BL	CELLP 
 3644 1b28 FEF788FB 		BL	DUPP
 3645 1b2c FEF778FB 		BL	TOR 
 3646 1b30 FEF7C0FB 		BL SUBB 
 3647 1b34 A5F10405 		SUB R5,R5,#4 
 3648 1b38 FFF7DEFE 		BL COMPILE_BLW 
 3649 1b3c FEF766FB 		BL	RFROM   
 3650 1b40 FEF754FB 		BL	STORE 
 3651 1b44 52F804FB 		_UNNEST 
 3652              		
 3653              	// DEFER@ ( -- a ) name
 3654              	// get execution address of word 	
 3655              		_HEADER DEFERAT,6,"DEFER@"
 3656 1b48 42F804ED 		_NEST 
 3657 1b4c FFF718FD 		BL TICK 
 3658 1b50 FEF7D8FB 		BL	CELLP
 3659 1b54 FEF772FB 		BL	DUPP
 3660 1b58 FEF762FB 		BL	TOR  
 3661 1b5c FEF74CFB 		BL	AT
 3662 1b60 FEF713FB 		_DOLIT BLADR 
 3662      00000000 
 3663 1b68 FFF7B8FF 		BL	FCALL 
ARM GAS  stm32eforth.s 			page 71


 3664 1b6c FEF70DFB 		_DOLIT	4  
 3664      04000000 
 3665 1b74 FEF79AFB 		BL	PLUS 
 3666 1b78 FEF748FB 		BL	RFROM
 3667 1b7c FEF796FB 		BL	PLUS  
 3668 1b80 52F804FB 		_UNNEST
 3669              	
 3670              	/*************
 3671              	   Tools
 3672              	*************/
 3673              	
 3674              	//    dm+	 ( a u -- a )
 3675              	// 	Dump u bytes from , leaving a+u on the stack.
 3676              	
 3677              	// 	.word	_VARIA+MAPOFFSET
 3678              	// _DMP	.byte  3
 3679              	// 	.ascii "dm+"
 3680              	 	.p2align 2 	
 3681              		.section .inflash, "ax", %progbits 
 3682              		.type DMP, %function 
 3683              	DMP:
 3684 02bc 42F804ED 		_NEST
 3685 02c0 00F024F9 		BL	OVER
 3686 02c4 00F0C3F8 		_DOLIT	4
 3686      04000000 
 3687 02cc 00F0EEFD 		BL	UDOTR			// display address
 3688 02d0 00F06CFD 		BL	SPACE
 3689 02d4 00F00EF9 		BL	TOR			// start count down loop
 3690 02d8 00F00CB8 		B.W	PDUM2			// skip first pass
 3691              	PDUM1:
 3692 02dc 00F01CF9 	  BL	DUPP
 3693 02e0 00F002F9 		BL	CAT
 3694 02e4 00F0C3F8 		_DOLIT 3
 3694      03000000 
 3695 02ec 00F0EEFD 		BL	UDOTR			// display numeric data
 3696 02f0 00F070F9 		BL	ONEP			// increment address
 3697              	PDUM2:
 3698 02f4 00F0D1F8 	  BL	DONXT
 3699 02f8 DC020000 		.word	PDUM1	// loop till done
 3700 02fc 52F804FB 		_UNNEST
 3701              		.p2align 2 
 3702              	
 3703              	//    DUMP	( a u -- )
 3704              	// 	Dump u bytes from a, in a formatted manner.
 3705              		_HEADER_FL DUMP,4,"DUMP"
 3706 0300 42F804ED 		_NEST
 3707 0304 00F04CFA 		BL	BASE
 3708 0308 00F0FAF8 		BL	AT
 3709 030c 00F00EF9 		BL	TOR
 3710 0310 00F086FC 		BL	HEX			// save radix,set hex
 3711 0314 00F0C3F8 		_DOLIT	16
 3711      10000000 
 3712 031c 00F018FB 		BL	SLASH			// change count to lines
 3713 0320 00F00EF9 		BL	TOR
 3714 0324 00F014B8 		B.W	DUMP4			// start count down loop
 3715              	DUMP1:
 3716 0328 00F09CFD 	    BL	CR
ARM GAS  stm32eforth.s 			page 72


 3717 032c 00F0C3F8 		_DOLIT	16
 3717      10000000 
 3718 0334 00F0B0F9 		BL	DDUP
 3719 0338 FFF7C0FF 		BL	DMP			// display numeric
 3720 033c 00F0A4F9 		BL	ROT
 3721 0340 00F0A4F9 		BL	ROT
 3722 0344 00F06CFD 		BL	SPACE
 3723 0348 00F06CFD 		BL	SPACE
 3724 034c 00F088FD 		BL	TYPEE			// display printable characters
 3725              	DUMP4:
 3726 0350 00F0D1F8 	    BL	DONXT
 3727 0354 28030000 		.word	DUMP1	// loop till done
 3728              	DUMP3:
 3729 0358 00F018F9 	    BL	DROP
 3730 035c 00F004F9 		BL	RFROM
 3731 0360 00F04CFA 		BL	BASE
 3732 0364 00F0F4F8 		BL	STORE			// restore radix
 3733 0368 52F804FB 		_UNNEST
 3734              	
 3735              	//    .S	  ( ... -- ... )
 3736              	// 	Display the contents of the data stack.
 3737              		_HEADER_FL DOTS,2,".S"
 3738 036c 42F804ED 		_NEST
 3739 0370 00F06CFD 		BL	SPACE
 3740 0374 00F060FB 		BL	DEPTH			// stack depth
 3741 0378 00F00EF9 		BL	TOR			// start count down loop
 3742 037c 00F006B8 		B.W	DOTS2			// skip first pass
 3743              	DOTS1:
 3744 0380 00F00AF9 		BL	RAT
 3745 0384 00F06CFB 		BL	PICK
 3746 0388 00F026FE 		BL	DOT			// index stack, display contents
 3747              	DOTS2:
 3748 038c 00F0D1F8 		BL	DONXT
 3749 0390 80030000 		.word	DOTS1	// loop till done
 3750 0394 00F06CFD 		BL	SPACE
 3751 0398 52F804FB 		_UNNEST
 3752              	
 3753              	//    >NAME	( ca -- na | F )
 3754              	// 	Convert code address to a name address.
 3755              		_HEADER_FL TNAME,5,">NAME"
 3756 039c 42F804ED 		_NEST
 3757 03a0 00F00EF9 		BL	TOR			//  
 3758 03a4 00F074FA 		BL	CNTXT			//  va
 3759 03a8 00F0FAF8 		BL	AT			//  na
 3760              	TNAM1:
 3761 03ac 00F01CF9 		BL	DUPP			//  na na
 3762 03b0 00F0E0F8 		BL	QBRAN
 3763 03b4 E8030000 		.word	TNAM2	//  vocabulary end, no match
 3764 03b8 00F01CF9 		BL	DUPP			//  na na
 3765 03bc 00F04EFF 		BL	NAMET			//  na ca
 3766 03c0 00F00AF9 		BL	RAT			//  na ca code
 3767 03c4 00F03AF9 		BL	XORR			//  na f --
 3768 03c8 00F0C3F8 		_DOLIT 	0xFFFFFF
 3768      FFFFFF00 
 3769 03d0 00F02EF9 		BL	ANDD 
 3770 03d4 00F0E0F8 		BL	QBRAN
 3771 03d8 E8030000 		.word	TNAM2
ARM GAS  stm32eforth.s 			page 73


 3772 03dc 00F084F9 		BL	CELLM			//  la 
 3773 03e0 00F0FAF8 		BL	AT			//  next_na
 3774 03e4 FFF7E2BF 		B.W	TNAM1
 3775              	TNAM2:	
 3776 03e8 00F004F9 		BL	RFROM
 3777 03ec 00F018F9 		BL	DROP			//  0|na --
 3778 03f0 52F804FB 		_UNNEST			// 0
 3779              	
 3780              	//    .ID	 ( na -- )
 3781              	// 	Display the name at address.
 3782              		_HEADER_FL DOTID,3,".ID"
 3783 03f4 42F804ED 		_NEST
 3784 03f8 00F09EF9 		BL	QDUP			// if zero no name
 3785 03fc 00F0E0F8 		BL	QBRAN
 3786 0400 1C040000 		.word	DOTI1
 3787 0404 00F01AFA 		BL	COUNT
 3788 0408 00F0C3F8 		_DOLIT	0x1F
 3788      1F000000 
 3789 0410 00F02EF9 		BL	ANDD			// mask lexicon bits
 3790 0414 00F088FD 		BL	TYPEE
 3791 0418 52F804FB 		_UNNEST			// display name string
 3792              	DOTI1:
 3793 041c 00F0D4FD 		BL	DOTQP
 3794 0420 09       		.byte	9
 3795 0421 207B6E6F 		.ascii " {noName}"
 3795      4E616D65 
 3795      7D
 3796 042a 00BF     		.p2align 2 	
 3797 042c 52F804FB 		_UNNEST
 3798              	
 3799              		.equ WANT_SEE, 1  // set to 1 if you want SEE 
 3800              		.if WANT_SEE 
 3801              	
 3802              	// .CA ( ca -- ca )
 3803              	// print code field address 
 3804              		.section .inflash ,"ax", %progbits 
 3805              		.p2align 2
 3806              		.type DOTCA, %function 
 3807              	DOTCA:
 3808 0430 42F804ED 		_NEST 
 3809 0434 00F01CF9 		BL  DUPP
 3810 0438 00F004FE 		BL UDOT 
 3811 043c 00F0C3F8 		_DOLIT 2 
 3811      02000000 
 3812 0444 00F074FD 		BL SPACS 
 3813 0448 52F804FB 		_UNNEST 
 3814              	
 3815              	// CODE_ABORT ( ca -- f )
 3816              	// abort if code definition
 3817              		.type CODE_ABORT,%function
 3818              	CODE_ABORT:
 3819 044c 42F804ED 		_NEST 
 3820 0450 FFF7EEFF 		BL DOTCA  
 3821 0454 00F01CF9 		BL DUPP 
 3822 0458 00F0FAF8 		BL AT 
 3823 045c 00F0C3F8 		BL DOLIT 
 3824 0460 42F804ED 		_NEST 
ARM GAS  stm32eforth.s 			page 74


 3825 0464 00F03AF9 		BL XORR 
 3826 0468 00F0E0F8 		BL QBRAN 
 3827 046c 84040000 		.word 1f 
 3828 0470 00F092FC 		BL DECIM
 3829 0474 01F0AEF8 		BL ABORQ 
 3830 0478 09       		.byte 9 
 3831 0479 636F6465 		.ascii "code word"
 3831      20776F72 
 3831      64
 3832 0482 00BF     		.p2align 2
 3833              	1:	 
 3834 0484 00F0D4FD 		BL DOTQP 
 3835 0488 04       		.byte 4
 3836 0489 6E657374 		.ascii "nest"
 3837 048d 0000BF   		.p2align 2 
 3838 0490 00F09CFD 		BL CR 
 3839 0494 52F804FB 		_UNNEST 
 3840              	
 3841              	
 3842              	// UNNEST? ( ca -- ca f )
 3843              	// check if UNNEST 
 3844              		.type UNNESTQ,%function
 3845              	UNNESTQ:
 3846 0498 42F804ED 		_NEST 
 3847 049c 00F01CF9 		BL DUPP 
 3848 04a0 00F0FAF8 		BL AT 
 3849 04a4 00F0C3F8 		BL DOLIT 
 3850 04a8 52F804FB 		_UNNEST  
 3851 04ac 00F0D6F9 		BL EQUAL
 3852 04b0 00F01CF9 		BL DUPP 
 3853 04b4 00F0E0F8 		BL QBRAN
 3854 04b8 CC040000 		.word 1f  
 3855 04bc 00F0D4FD 		BL DOTQP
 3856 04c0 06       		.byte 6
 3857 04c1 756E6E65 		.ascii "unnest" 
 3857      7374
 3858 04c7 00       		.p2align 2
 3859 04c8 00F09CFD 		BL CR  
 3860 04cc 52F804FB 	1:	_UNNEST 
 3861              	
 3862              	
 3863              	// search no name routine from code address. 
 3864              		.type NONAMEQ, %function
 3865              	NONAMEQ: // ( ca -- na|ca f )
 3866 04d0 42F804ED 		_NEST 
 3867 04d4 00F0C3F8 		_DOLIT 0 
 3867      00000000 
 3868 04dc 00F020F9 		BL SWAP 
 3869 04e0 00F0C3F8 		_DOLIT NONAME_SUB
 3869      18000000 
 3870 04e8 00F00EF9 		BL TOR   
 3871 04ec 00F01CF9 	0:	BL DUPP // ( 0 ca ca -- )  
 3872 04f0 00F00AF9 		BL RAT  
 3873 04f4 00F0FAF8 		BL AT
 3874 04f8 00F09EF9 		BL QDUP 
 3875 04fc 00F0E0F8 		BL QBRAN 
 3876 0500 64050000 		.word 2f 
ARM GAS  stm32eforth.s 			page 75


 3877 0504 00F03AF9 		BL XORR 
 3878 0508 00F0C3F8 		_DOLIT 0xFFFFFF 
 3878      FFFFFF00 
 3879 0510 00F02EF9 		BL	ANDD  
 3880 0514 00F0E0F8 		BL QBRAN 
 3881 0518 30050000 		.word 1f 
 3882 051c 00F004F9 		BL RFROM 
 3883 0520 00F080F9 		BL CELLP
 3884 0524 00F00EF9 		BL TOR  
 3885 0528 00F0ECF8 		BL BRAN 
 3886 052c EC040000 		.word 0b 
 3887 0530 00F004F9 	1:  BL RFROM 
 3888 0534 00F0C3F8 		_DOLIT NONAME_SUB
 3888      18000000 
 3889 053c 00F058F9 		BL SUBB
 3890 0540 00F0C3F8 		_DOLIT ANONYMOUS 
 3890      54000000 
 3891 0548 00F054F9 		BL	PLUS
 3892 054c 00F0FAF8 		BL	AT   
 3893 0550 00F020F9 		BL	SWAP 
 3894 0554 00F018F9 		BL	DROP
 3895 0558 00F020F9 		BL	SWAP 
 3896 055c 00F0C0F9 		BL	INVER 
 3897 0560 52F804FB 		_UNNEST 
 3898 0564 00F018F9 	2:	BL DROP 
 3899 0568 00F020F9 		BL SWAP 
 3900 056c 00F004F9 		BL RFROM
 3901 0570 00F018F9 		BL DROP 
 3902 0574 52F804FB 		_UNNEST 
 3903              	
 3904              		.p2align 2 
 3905              	
 3906              	
 3907              	// print noname routine label ( n -- )
 3908              	// n is offset in ANONYMOUS array 
 3909              		.type DOTNONAME,%function
 3910              	DOTNONAME:
 3911 0578 42F804ED 		_NEST 
 3912 057c 41F8045D 		_PUSH 
 3913 0580 00F0C3F8 		_DOLIT ANONYMOUS 
 3913      54000000 
 3914 0588 00F054F9 		BL PLUS 
 3915 058c 00F0FAF8 		BL AT 
 3916 0590 00F088FD 		BL TYPEE 
 3917 0594 52F804FB 		_UNNEST 
 3918              	
 3919              	// IS_BLW ( code -- f )
 3920              	// check if it is a BL instruction 
 3921              		.type IS_BLW, %function 
 3922              	IS_BLW:
 3923 0598 42F804ED 		_NEST 
 3924 059c 00F0C3F8 		_DOLIT 0xD000F000
 3924      00F000D0 
 3925 05a4 00F01CF9 		BL DUPP 
 3926 05a8 00F00EF9 		BL TOR 
 3927 05ac 00F02EF9 		BL ANDD
 3928 05b0 00F004F9 		BL RFROM  
ARM GAS  stm32eforth.s 			page 76


 3929 05b4 00F0D6F9 		BL EQUAL   
 3930 05b8 52F804FB 		_UNNEST 
 3931              	
 3932              	//    SEE	 ( -- //  string> )
 3933              	// 	A simple decompiler.
 3934              		_HEADER_FL SEE,3,"SEE"
 3935 05bc 42F804ED 		_NEST
 3936 05c0 00F04CFA 		BL BASE 
 3937 05c4 00F0FAF8 		BL AT 
 3938 05c8 00F00EF9 		BL TOR 
 3939 05cc 00F086FC 		BL HEX 
 3940 05d0 01F0BEFA 		BL	TICK	//  ca --, starting address
 3941 05d4 00F09CFD 		BL	CR	
 3942 05d8 FFF738FF 		BL  CODE_ABORT
 3943 05dc 00F008F8 		BL	FL_SCOL 
 3944 05e0 00F004F9 		BL  RFROM 
 3945 05e4 00F04CFA 		BL 	BASE 
 3946 05e8 00F0F4F8 		BL	STORE 
 3947 05ec 52F804FB 		_UNNEST
 3948              	
 3949              	
 3950              	// SEECOLON ( ca -- )
 3951              	// Decompile colon definition 
 3952              		_HEADER_FL SCOL,8,"SEECOLON"
 3953 05f0 42F804ED 		_NEST 
 3954 05f4 00F0C3F8 		_DOLIT 9  
 3954      09000000 
 3955 05fc 00F00EF9 		BL TOR // not a BL counter limit to 10 consecutives 
 3956              	SCOL1:
 3957 0600 00F080F9 		BL	CELLP			//  a
 3958 0604 FFF714FF 		BL  DOTCA 
 3959 0608 FFF746FF 		BL  UNNESTQ
 3960 060c 00F0E0F8 		BL	QBRAN 
 3961 0610 40060000 		.word 1f  
 3962 0614 00F01CF9 		BL	DUPP 
 3963 0618 00F080F9 		BL	CELLP
 3964 061c 00F0FAF8 		BL	AT 
 3965 0620 FFF7BAFF 		BL	IS_BLW
 3966 0624 00F0C0F9 		BL	INVER  
 3967 0628 00F0E0F8 		BL	QBRAN 
 3968 062c 00060000 		.word SCOL1 
 3969 0630 00F004F9 		BL	RFROM 
 3970 0634 00F018F9 		BL	DROP 
 3971 0638 00F0ECF8 		BL	BRAN 
 3972 063c 54060000 		.word 2f 
 3973 0640 00F01CF9 	1:	BL	DUPP			//  a a
 3974 0644 00F02CF8 		BL	FL_DECOMP		//  a
 3975 0648 00F09CFD 		BL	CR 
 3976 064c 00F0D1F8 		BL	DONXT  
 3977 0650 00060000 		.word	SCOL1
 3978 0654 00F018F9 	2:	BL DROP 
 3979 0658 52F804FB 		_UNNEST
 3980              	
 3981              	// BL-ADR ( asm_code -- rel_adr )
 3982              	// get absolute address from asm_code 
 3983              	// ref: ARM-v7M architecture reference, section A7.7.18 
 3984              		.p2align 2 
ARM GAS  stm32eforth.s 			page 77


 3985              		.type BLADR, %function 
 3986              	BLADR: 
 3987 065c 4FEA0504 		MOV.W R4,R5
 3988 0660 4FEA3444 		ROR R4,#16 
 3989 0664 64F30A05 		BFI R5,R4,#0,#11 
 3990 0668 4FEAE424 		ASR R4,#11 
 3991 066c 64F35555 		BFI R5,R4,#21,#1 
 3992 0670 4FEAA404 		ASR R4,#2
 3993 0674 64F39655 		BFI R5,R4,#22,#1
 3994 0678 4FEAE404 		ASR R4,#3
 3995 067c 64F3D425 		BFI R5,R4,#11,#10
 3996 0680 4FEAA424 		ASR R4,#10 
 3997 0684 64F3D755 		BFI R5,R4,#23,#1
 3998 0688 15F4000F 		TST R5,#(1<<23)
 3999 068c 40F00280 		BNE.W 1f
 4000 0690 85F4C005 		EOR R5,R5,#(3<<21)
 4001 0694 4FEA0525 	1:	LSL R5,#8
 4002 0698 4FEAE515 		ASR R5,#7 
 4003 069c 7047     		_NEXT 
 4004              	
 4005              		
 4006              	// 	DECOMPILE ( a -- )
 4007              	// 	Convert code in a.  Display name of command or as data.
 4008 069e 00BF     		_HEADER_FL DECOMP,9,"DECOMPILE"
 4009 06a0 42F804ED 		_NEST
 4010 06a4 00F01CF9 		BL	DUPP			//  a a
 4011 06a8 00F0FAF8 		BL	AT			//  a code
 4012 06ac 00F01CF9 		BL	DUPP			//  a code code
 4013 06b0 FFF772FF 		BL	IS_BLW
 4014 06b4 00F0E0F8 		BL	QBRAN
 4015 06b8 18070000 		.word	DECOM2	//  not a BL instruction 
 4016              		//  a valid_code --, extract address and display name
 4017 06bc 00F0D4FD 		BL DOTQP  
 4018 06c0 03       		.byte 3
 4019 06c1 424C20   		.ascii "BL "
 4020              		.p2align 2
 4021 06c4 FFF7CAFF 		BL  BLADR   // extract relative address from BL code
 4022 06c8 00F024F9 		BL	OVER			//  a offset a
 4023 06cc 00F054F9 		BL	PLUS			//  a target-4
 4024 06d0 00F080F9 		BL	CELLP			//  a target
 4025 06d4 FFF7ACFE 		BL  DOTCA 
 4026 06d8 FFF7FAFE 		BL	NONAMEQ 
 4027 06dc 00F0E0F8 		BL	QBRAN 
 4028 06e0 EC060000 		.word DECOMP1  
 4029 06e4 00F0ECF8 		BL	BRAN 
 4030 06e8 F0060000 		.word DECOMP3 
 4031              	DECOMP1:
 4032 06ec FFF756FE 		BL	FL_TNAME			//  a na/0 --, is it a name?
 4033              	DECOMP3:
 4034 06f0 FFF780FE 		BL	FL_DOTID			//  a --, display name
 4035 06f4 00F018F9 		BL	DROP
 4036              	// reset not BL counter 
 4037 06f8 00F004F9 		BL	RFROM 
 4038 06fc 00F004F9 		BL	RFROM 
 4039 0700 00F018F9 		BL	DROP
 4040 0704 00F0C3F8 		_DOLIT 9  
 4040      09000000 
ARM GAS  stm32eforth.s 			page 78


 4041 070c 00F00EF9 		BL	TOR 
 4042 0710 00F00EF9 		BL	TOR 	
 4043 0714 52F804FB 		_UNNEST
 4044              	DECOM2: // not a BL 
 4045 0718 00F004FE 		BL	UDOT
 4046 071c 00F018F9 		BL	DROP
 4047 0720 52F804FB 		_UNNEST
 4048              	.endif 
 4049              	
 4050              	//    WORDS	( -- )
 4051              	// 	Display the names in the context vocabulary.
 4052              		_HEADER_FL WORDS,5,"WORDS"
 4053 0724 42F804ED 		_NEST
 4054 0728 00F09CFD 		BL	CR
 4055 072c 00F074FA 		BL	CNTXT
 4056 0730 00F0FAF8 		BL	AT			// only in context
 4057              	WORS1:
 4058 0734 00F09EF9 		BL	QDUP			// ?at end of list
 4059 0738 00F0E0F8 		BL	QBRAN
 4060 073c 58070000 		.word	WORS2
 4061 0740 00F01CF9 		BL	DUPP
 4062 0744 00F06CFD 		BL	SPACE
 4063 0748 FFF754FE 		BL	FL_DOTID			// display a name
 4064 074c 00F084F9 		BL	CELLM
 4065 0750 00F0FAF8 		BL	AT
 4066 0754 FFF7EEBF 		B.W	WORS1
 4067              	WORS2:
 4068 0758 52F804FB 		_UNNEST
 4069              	
 4070              		.section .text , "ax", %progbits
 4071              	
 4072              	// **************************************************************************
 4073              	//  cold start
 4074              	
 4075              	//    VER	 ( -- n )
 4076              	// 	Return the version number of this implementation.
 4077              	
 4078              	// 	.word	_WORDS+MAPOFFSET
 4079              	// _VERSN	.byte  3
 4080              	// 	.ascii "VER"
 4081              	// 	.p2align 2 	
 4082              	VERSN:
 4083 1c22 42F804ED 		_NEST
 4084 1c26 FEF7B0FA 		_DOLIT	VER*256+EXT
 4084      00010000 
 4085 1c2e 52F804FB 		_UNNEST
 4086              	
 4087              	//    hi	  ( -- )
 4088              	// 	Display the sign-on message of eForth.
 4089 1c32 00BF     		_HEADER HI,2,"HI"
 4090 1c34 42F804ED 		_NEST
 4091 1c38 FEF780FF 		BL	CR	// initialize I/O
 4092 1c3c FEF7A5FA 		_DOLIT hi_msg 
 4092      00000000 
 4093 1c44 FEF7F8FB 		BL	COUNT 
 4094 1c48 FEF764FF 		BL	TYPEE 
 4095 1c4c FEF726FC 		BL	BASE
ARM GAS  stm32eforth.s 			page 79


 4096 1c50 FEF7D2FA 		BL	AT
 4097 1c54 FEF75CFE 		BL	HEX	// save radix
 4098 1c58 FFF7E3FF 		BL	VERSN
 4099 1c5c FEF7EEFD 		BL	BDIGS
 4100 1c60 FEF708FE 		BL	DIG
 4101 1c64 FEF706FE 		BL	DIG
 4102 1c68 FEF78FFA 		_DOLIT	'.'
 4102      2E000000 
 4103 1c70 FEF7EEFD 		BL	HOLD
 4104 1c74 FEF70AFE 		BL	DIGS
 4105 1c78 FEF726FE 		BL	EDIGS
 4106 1c7c FEF74AFF 		BL	TYPEE	// format version number
 4107 1c80 FEF70CFC 		BL	BASE
 4108 1c84 FEF7B2FA 		BL	STORE
 4109 1c88 FEF758FF 		BL	CR
 4110 1c8c 52F804FB 		_UNNEST			// restore radix
 4111              	
 4112              		.section .rodata
 4113              		.p2align 2 
 4114              	hi_msg:
 4115 0000 17       		.byte	23
 4116 0001 626C7565 		.ascii "blue pill stm32eForth v" 
 4116      2070696C 
 4116      6C207374 
 4116      6D333265 
 4116      466F7274 
 4117              		.p2align 2 
 4118              	
 4119              		.section  .text, "ax" ,%progbits 
 4120              	
 4121              	//    COLD	( -- )
 4122              	// 	The high level cold start sequence.
 4123              		_HEADER LASTN,4,"COLD"
 4124              	COLD:
 4125              	//  Initiate Forth registers
 4126 1c90 4FF40073 		_MOV32 R3,UPP // system variables area 
 4126      C2F20003 
 4127 1c98 4FF47F41 		_MOV32 R1,SPP // Forth data stack 
 4127      C2F20101 
 4128 1ca0 4FF68072 		_MOV32 R2,RPP // Forth return stack 
 4128      C2F20102 
 4129 1ca8 85EA0505 		EOR R5,R5,R5			//  tos=0
 4130 1cac 42F804ED 		_NEST
 4131              	COLD1:
 4132 1cb0 FEF76BFA 		_DOLIT 0 
 4132      00000000 
 4133 1cb8 FEF736FA 		BL ULED // turn off user LED 
 4134 1cbc FEF765FA 		_DOLIT	UZERO
 4134      00000000 
 4135 1cc4 FEF761FA 		_DOLIT	UPP
 4135      00020020 
 4136 1ccc FEF75DFA 		_DOLIT	ULAST-UZERO
 4136      54000000 
 4137 1cd4 FEF740FD 		BL	MOVE 			// initialize user area
 4138 1cd8 FFF7CAFA 		BL	PRESE			// initialize stack
 4139 1cdc FFF786FB 		BL	LOAD_IMG // if image saved load it
 4140 1ce0 FEF7D6FB 	1:	BL	TBOOT
ARM GAS  stm32eforth.s 			page 80


 4141 1ce4 FEF71CFD 		BL	ATEXE			// application boot
 4142 1ce8 FFF7E0FD 		BL	OVERT
 4143 1cec FFF7CABA 		B.W	QUIT			// start interpretation
 4144              		.p2align 2
 4145              	CTOP: 
 4146              	COLD2:
 4147 1cf0 FFFFFFFF 		.word	0XFFFFFFFF
 4148              	
 4149              	/********************************
 4150              	  data that doesn't need to be 
 4151              	  copied in RAM 
 4152              	*******************************/
 4153              		.section .rodata 
 4154              		.p2align 2
 4155              	NONAME_SUB: // routine not in the dictionary 
 4156 0018 DC010000 		.word BRAN,QBRAN, DOLIT,DONXT,DODOES
 4156      C4010000 
 4156      8A010000 
 4156      A6010000 
 4156      201A0000 
 4157 002c 54040000 		.word DOVAR,DOCON,IS_BLW,DOTQP,BLADR  
 4157      60040000 
 4157      00000000 
 4157      AC0B0000 
 4157      00000000 
 4158 0040 00000000 		.word DOTCA,NONAMEQ,STRCQ,VERSN  
 4158      00000000 
 4158      1C160000 
 4158      221C0000 
 4159 0050 00000000 		.word 0 
 4160              	
 4161              	ANONYMOUS: // anonymous routines 
 4162 0054 8C000000 		.word BRAN_LBL,QBRAN_LBL,DOLIT_LBL,DONEXT_LBL,DODOES_LBL,DOVAR_LBL,DOCON_LBL
 4162      98000000 
 4162      A4000000 
 4162      B0000000 
 4162      BC000000 
 4163 0070 E0000000 		.word IS_BLW_LBL,DOTQP_LBL,BLADR_LBL,DOTCA_LBL,NONAMEQ_LBL,STRCQ_LBL,VERSN_LBL   
 4163      EC000000 
 4163      F0000000 
 4163      FC000000 
 4163      08010000 
 4164              	
 4165              	BRAN_LBL:
 4166 008c 09       		.byte 9 
 4167 008d 207B6272 		.ascii " {branch}"
 4167      616E6368 
 4167      7D
 4168 0096 0000     		.p2align 2 
 4169              	QBRAN_LBL:
 4170 0098 0A       		.byte 10
 4171 0099 207B3F62 		.ascii " {?branch}"
 4171      72616E63 
 4171      687D
 4172 00a3 00       		.p2align 2
 4173              	DOLIT_LBL:
 4174 00a4 08       		.byte 8 
ARM GAS  stm32eforth.s 			page 81


 4175 00a5 207B646F 		.ascii " {doLit}"
 4175      4C69747D 
 4176 00ad 000000   		.p2align 2 
 4177              	DONEXT_LBL:
 4178 00b0 09       		.byte 9
 4179 00b1 207B646F 		.ascii " {doNext}"
 4179      4E657874 
 4179      7D
 4180 00ba 0000     		.p2align 2 
 4181              	DODOES_LBL:
 4182 00bc 09       		.byte 9
 4183 00bd 207B646F 		.ascii " {doDoes}"
 4183      446F6573 
 4183      7D
 4184 00c6 0000     		.p2align 2 
 4185              	DOVAR_LBL:
 4186 00c8 08       		.byte 8
 4187 00c9 207B646F 		.ascii " {doVar}"
 4187      5661727D 
 4188 00d1 000000   		.p2align 2 
 4189              	DOCON_LBL:
 4190 00d4 0A       		.byte 10
 4191 00d5 207B646F 		.ascii " {doConst}"
 4191      436F6E73 
 4191      747D
 4192 00df 00       		.p2align 2 
 4193              	IS_BLW_LBL:
 4194 00e0 0B       		.byte 11 
 4195 00e1 207B424C 		.ascii " {BL code?}"
 4195      20636F64 
 4195      653F7D
 4196              		.p2align 2 
 4197              	DOTQP_LBL:
 4198 00ec 03       		.byte 3
 4199 00ed 202E22   		.ascii " .\""
 4200              		.p2align 
 4201              	BLADR_LBL:
 4202 00f0 09       		.byte 9
 4203 00f1 207B424C 		.ascii " {BL>ADR}"
 4203      3E414452 
 4203      7D
 4204 00fa 0000     		.p2align 2 
 4205              	DOTCA_LBL:
 4206 00fc 08       		.byte  8
 4207 00fd 207B646F 		.ascii " {dotca}"
 4207      7463617D 
 4208 0105 000000   		.p2align 2 
 4209              	NONAMEQ_LBL:
 4210 0108 0A       		.byte  10
 4211 0109 207B6E6F 		.ascii " {noname?}"
 4211      6E616D65 
 4211      3F7D
 4212 0113 00       		.p2align 2 
 4213              	STRCQ_LBL:
 4214 0114 06       		.byte  6
 4215 0115 207B242C 		.ascii " {$,\"}"
 4215      227D
ARM GAS  stm32eforth.s 			page 82


 4216 011b 00       		.p2align 2 
 4217              	VERSN_LBL:
 4218 011c 0A       		.byte  10
 4219 011d 207B7665 		.ascii " {version}"
 4219      7273696F 
 4219      6E7D
 4220 0127 00       		.p2align 2 
 4221              	
 4222              		.section .user 
 4223              		.p2align 10 
 4224              	USER_SPACE: // save user image here.  
 4225 0000 FFFFFFFF 		.word 0XFFFFFFFF
 4226              	
 4227              	
 4228              	  .end 
ARM GAS  stm32eforth.s 			page 83


DEFINED SYMBOLS
     stm32f411ce.inc:5      *ABS*:0000000020000000 RAM_ADR
     stm32f411ce.inc:6      *ABS*:0000000000020000 RAM_SIZE
     stm32f411ce.inc:7      *ABS*:0000000020020000 RAM_END
     stm32f411ce.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
     stm32f411ce.inc:14     *ABS*:0000000008000000 FLASH_ADR
     stm32f411ce.inc:15     *ABS*:0000000000080000 FLASH_SIZE
     stm32f411ce.inc:16     *ABS*:0000000008080000 FLASH_END
     stm32f411ce.inc:18     *ABS*:0000000008000000 SECTOR0_ADR
     stm32f411ce.inc:19     *ABS*:0000000000004000 SECTOR0_SIZE
     stm32f411ce.inc:20     *ABS*:0000000008004000 SECTOR1_ADR
     stm32f411ce.inc:21     *ABS*:0000000000004000 SECTOR1_SIZE
     stm32f411ce.inc:22     *ABS*:0000000008008000 SECTOR2_ADR
     stm32f411ce.inc:23     *ABS*:0000000000004000 SECTOR2_SIZE
     stm32f411ce.inc:24     *ABS*:000000000800c000 SECTOR3_ADR
     stm32f411ce.inc:25     *ABS*:0000000000004000 SECTOR3_SIZE
     stm32f411ce.inc:26     *ABS*:0000000008010000 SECTOR4_ADR
     stm32f411ce.inc:27     *ABS*:0000000000010000 SECTOR4_SIZE
     stm32f411ce.inc:28     *ABS*:0000000008020000 SECTOR5_ADR
     stm32f411ce.inc:29     *ABS*:0000000000020000 SECTOR5_SIZE
     stm32f411ce.inc:30     *ABS*:0000000008040000 SECTOR6_ADR
     stm32f411ce.inc:31     *ABS*:0000000000020000 SECTOR6_SIZE
     stm32f411ce.inc:32     *ABS*:0000000008060000 SECTOR7_ADR
     stm32f411ce.inc:33     *ABS*:0000000000020000 SECTOR7_SIZE
     stm32f411ce.inc:37     *ABS*:000000001ffff000 SYS_MEM
     stm32f411ce.inc:38     *ABS*:00000000000077ff SYS_MEM_SIZE
     stm32f411ce.inc:41     *ABS*:000000001fff7800 OTP_MEM
     stm32f411ce.inc:42     *ABS*:0000000000000210 OTP_SIZE
     stm32f411ce.inc:45     *ABS*:000000001fffc000 OPTION
     stm32f411ce.inc:46     *ABS*:0000000000000010 OPT_SIZE
     stm32f411ce.inc:50     *ABS*:0000000040000000 PER_BASE_ADR
     stm32f411ce.inc:52     *ABS*:0000000042000000 PER_BIT_ALIAS
     stm32f411ce.inc:56     *ABS*:0000000040023800 RCC_BASE_ADR
     stm32f411ce.inc:58     *ABS*:0000000000000000 RCC_CR
     stm32f411ce.inc:59     *ABS*:0000000000000004 RCC_PLLCFGR
     stm32f411ce.inc:60     *ABS*:0000000000000008 RCC_CFGR
     stm32f411ce.inc:61     *ABS*:000000000000000c RCC_CIR
     stm32f411ce.inc:62     *ABS*:0000000000000010 RCC_AHB1RSTR
     stm32f411ce.inc:63     *ABS*:0000000000000014 RCC_AHB2RSTR
     stm32f411ce.inc:64     *ABS*:0000000000000020 RCC_APB1RSTR
     stm32f411ce.inc:65     *ABS*:0000000000000024 RCC_APB2RSTR
     stm32f411ce.inc:66     *ABS*:0000000000000030 RCC_AHB1ENR
     stm32f411ce.inc:67     *ABS*:0000000000000034 RCC_AHB2ENR
     stm32f411ce.inc:68     *ABS*:0000000000000040 RCC_APB1ENR
     stm32f411ce.inc:69     *ABS*:0000000000000044 RCC_APB2ENR
     stm32f411ce.inc:70     *ABS*:0000000000000050 RCC_AHB1LPENR
     stm32f411ce.inc:71     *ABS*:0000000000000054 RCC_AHB2LPENR
     stm32f411ce.inc:72     *ABS*:0000000000000060 RCC_APB1LPENR
     stm32f411ce.inc:73     *ABS*:0000000000000064 RCC_APB2LPENR
     stm32f411ce.inc:74     *ABS*:0000000000000070 RCC_BDCR
     stm32f411ce.inc:75     *ABS*:0000000000000074 RCC_CSR
     stm32f411ce.inc:76     *ABS*:0000000000000080 RCC_SSCGR
     stm32f411ce.inc:77     *ABS*:0000000000000084 RCC_PLLI2SCFGR
     stm32f411ce.inc:78     *ABS*:000000000000008c RCC_DCKCFGR
     stm32f411ce.inc:81     *ABS*:0000000040023c00 FLASH_BASE_ADR
     stm32f411ce.inc:83     *ABS*:0000000000000000 FLASH_ACR
     stm32f411ce.inc:84     *ABS*:0000000000000004 FLASH_KEYR
ARM GAS  stm32eforth.s 			page 84


     stm32f411ce.inc:85     *ABS*:0000000000000008 FLASH_OPTKEYR
     stm32f411ce.inc:86     *ABS*:000000000000000c FLASH_SR
     stm32f411ce.inc:87     *ABS*:0000000000000010 FLASH_CR
     stm32f411ce.inc:88     *ABS*:0000000000000014 FLASH_OPTCR
     stm32f411ce.inc:89     *ABS*:00000000000000a5 RDPRT_KEY
     stm32f411ce.inc:90     *ABS*:0000000045670123 FLASH_KEY1
     stm32f411ce.inc:91     *ABS*:00000000cdef89ab FLASH_KEY2
     stm32f411ce.inc:92     *ABS*:0000000008192a3b OPTKEY1
     stm32f411ce.inc:93     *ABS*:000000004c5d6e7f OPTKEY2
     stm32f411ce.inc:96     *ABS*:0000000040020000 GPIOA_BASE_ADR
     stm32f411ce.inc:97     *ABS*:0000000040020400 GPIOB_BASE_ADR
     stm32f411ce.inc:98     *ABS*:0000000040020800 GPIOC_BASE_ADR
     stm32f411ce.inc:99     *ABS*:0000000040020c00 GPIOD_BASE_ADR
     stm32f411ce.inc:100    *ABS*:0000000040021000 GPIOE_BASE_ADR
     stm32f411ce.inc:101    *ABS*:0000000040021c00 GPIOH_BASE_ADR
     stm32f411ce.inc:104    *ABS*:0000000000000000 GPIO_MODER
     stm32f411ce.inc:105    *ABS*:0000000000000004 GPIO_OTYPER
     stm32f411ce.inc:106    *ABS*:0000000000000008 GPIO_OSPEEDR
     stm32f411ce.inc:107    *ABS*:000000000000000c GPIO_PUPDR
     stm32f411ce.inc:108    *ABS*:0000000000000010 GPIO_IDR
     stm32f411ce.inc:109    *ABS*:0000000000000014 GPIO_ODR
     stm32f411ce.inc:110    *ABS*:0000000000000018 GPIO_BSRR
     stm32f411ce.inc:111    *ABS*:000000000000001c GPIO_LCKR
     stm32f411ce.inc:112    *ABS*:0000000000000020 GPIO_AFRL
     stm32f411ce.inc:113    *ABS*:0000000000000024 GPIO_AFRH
     stm32f411ce.inc:117    *ABS*:0000000040011000 USART1_BASE_ADR
     stm32f411ce.inc:119    *ABS*:0000000000000000 USART_SR
     stm32f411ce.inc:120    *ABS*:0000000000000004 USART_DR
     stm32f411ce.inc:121    *ABS*:0000000000000008 USART_BRR
     stm32f411ce.inc:122    *ABS*:000000000000000c USART_CR1
     stm32f411ce.inc:123    *ABS*:0000000000000010 USART_CR2
     stm32f411ce.inc:124    *ABS*:0000000000000014 USART_CR3
     stm32f411ce.inc:125    *ABS*:0000000000000018 USART_GTPR
     stm32f411ce.inc:128    *ABS*:00000000e000e010 STK_BASE_ADR
     stm32f411ce.inc:130    *ABS*:0000000000000000 STK_CTL
     stm32f411ce.inc:131    *ABS*:0000000000000004 STK_LOAD
     stm32f411ce.inc:132    *ABS*:0000000000000008 STK_VAL
     stm32f411ce.inc:133    *ABS*:000000000000000c STK_CALIB
     stm32f411ce.inc:136    *ABS*:00000000e000ed00 SCB_BASE_ADR
     stm32f411ce.inc:138    *ABS*:0000000000000000 SCB_CPUID
     stm32f411ce.inc:139    *ABS*:0000000000000004 SCB_ICSR
     stm32f411ce.inc:140    *ABS*:0000000000000008 SCB_VTOR
     stm32f411ce.inc:141    *ABS*:000000000000000c SCB_AIRCR
     stm32f411ce.inc:142    *ABS*:0000000000000010 SCB_SCR
     stm32f411ce.inc:143    *ABS*:0000000000000014 SCB_CCR
     stm32f411ce.inc:144    *ABS*:0000000000000018 SCB_SHPR1
     stm32f411ce.inc:145    *ABS*:000000000000001c SCB_SHPR2
     stm32f411ce.inc:146    *ABS*:0000000000000020 SCB_SHPR3
     stm32f411ce.inc:147    *ABS*:0000000000000024 SCB_SHCSR
     stm32f411ce.inc:148    *ABS*:0000000000000028 SCB_CFSR
     stm32f411ce.inc:149    *ABS*:0000000000000028 SCB_MMSR
     stm32f411ce.inc:150    *ABS*:0000000000000029 SCB_BFSR
     stm32f411ce.inc:151    *ABS*:000000000000002a SCB_UFSR
     stm32f411ce.inc:152    *ABS*:000000000000002c SCB_HFSR
     stm32f411ce.inc:153    *ABS*:0000000000000034 SCB_MMAR
     stm32f411ce.inc:154    *ABS*:0000000000000038 SCB_BFAR
     stm32f411ce.inc:155    *ABS*:000000000000003c SCB_AFSR
ARM GAS  stm32eforth.s 			page 85


     stm32f411ce.inc:157    *ABS*:00000000000005fa SCB_VECTKEY
     stm32f411ce.inc:160    *ABS*:00000000e000e000 NVIC_BASE_ADR
     stm32f411ce.inc:161    *ABS*:0000000000000100 NVIC_ISER0
     stm32f411ce.inc:162    *ABS*:0000000000000104 NVIC_ISER1
     stm32f411ce.inc:163    *ABS*:0000000000000108 NVIC_ISER2
     stm32f411ce.inc:164    *ABS*:000000000000010c NVIC_ISER3
     stm32f411ce.inc:165    *ABS*:0000000000000110 NVIC_ISER4
     stm32f411ce.inc:166    *ABS*:0000000000000114 NVIC_ISER5
     stm32f411ce.inc:167    *ABS*:0000000000000118 NVIC_ISER6
     stm32f411ce.inc:168    *ABS*:000000000000011c NVIC_ISER7
     stm32f411ce.inc:169    *ABS*:0000000000000180 NVIC_ICER0
     stm32f411ce.inc:170    *ABS*:0000000000000184 NVIC_ICER1
     stm32f411ce.inc:171    *ABS*:0000000000000188 NVIC_ICER2
     stm32f411ce.inc:172    *ABS*:000000000000018c NVIC_ICER3
     stm32f411ce.inc:173    *ABS*:0000000000000190 NVIC_ICER4
     stm32f411ce.inc:174    *ABS*:0000000000000194 NVIC_ICER5
     stm32f411ce.inc:175    *ABS*:0000000000000198 NVIC_ICER6
     stm32f411ce.inc:176    *ABS*:000000000000019c NVIC_ICER7
     stm32f411ce.inc:177    *ABS*:0000000000000200 NVIC_ISPR0
     stm32f411ce.inc:178    *ABS*:0000000000000204 NVIC_ISPR1
     stm32f411ce.inc:179    *ABS*:0000000000000208 NVIC_ISPR2
     stm32f411ce.inc:180    *ABS*:000000000000020c NVIC_ISPR3
     stm32f411ce.inc:181    *ABS*:0000000000000210 NVIC_ISPR4
     stm32f411ce.inc:182    *ABS*:0000000000000214 NVIC_ISPR5
     stm32f411ce.inc:183    *ABS*:0000000000000218 NVIC_ISPR6
     stm32f411ce.inc:184    *ABS*:000000000000021c NVIC_ISPR7
     stm32f411ce.inc:185    *ABS*:0000000000000280 NVIC_ICPR0
     stm32f411ce.inc:186    *ABS*:0000000000000284 NVIC_ICPR1
     stm32f411ce.inc:187    *ABS*:0000000000000288 NVIC_ICPR2
     stm32f411ce.inc:188    *ABS*:000000000000028c NVIC_ICPR3
     stm32f411ce.inc:189    *ABS*:0000000000000290 NVIC_ICPR4
     stm32f411ce.inc:190    *ABS*:0000000000000294 NVIC_ICPR5
     stm32f411ce.inc:191    *ABS*:0000000000000298 NVIC_ICPR6
     stm32f411ce.inc:192    *ABS*:000000000000029c NVIC_ICPR7
     stm32f411ce.inc:193    *ABS*:0000000000000300 NVIC_IABR0
     stm32f411ce.inc:194    *ABS*:0000000000000304 NVIC_IABR1
     stm32f411ce.inc:195    *ABS*:0000000000000308 NVIC_IABR2
     stm32f411ce.inc:196    *ABS*:000000000000030c NVIC_IABR3
     stm32f411ce.inc:197    *ABS*:0000000000000310 NVIC_IABR4
     stm32f411ce.inc:198    *ABS*:0000000000000314 NVIC_IABR5
     stm32f411ce.inc:199    *ABS*:0000000000000318 NVIC_IABR6
     stm32f411ce.inc:200    *ABS*:000000000000031c NVIC_IABR7
     stm32f411ce.inc:202    *ABS*:0000000000000400 NVIC_IPR_BASE
     stm32f411ce.inc:203    *ABS*:0000000000000e00 NVIC_STIR
       stm32eforth.s:83     *ABS*:0000000040020800 LED_GPIO
       stm32eforth.s:84     *ABS*:000000000000000d LED_PIN
       stm32eforth.s:85     *ABS*:0000000040011000 UART
       stm32eforth.s:88     *ABS*:000000002001ff80 RPP
       stm32eforth.s:89     *ABS*:000000002001ff00 TIBB
       stm32eforth.s:90     *ABS*:000000002001ff00 SPP
       stm32eforth.s:91     *ABS*:0000000020000200 UPP
       stm32eforth.s:92     *ABS*:000000002001fe80 DEND
       stm32eforth.s:93     *ABS*:0000000020000200 RAMOFFSET
       stm32eforth.s:94     *ABS*:0000000008000200 FLASHOFFSET
       stm32eforth.s:97     *ABS*:0000000018000000 MAPOFFSET
       stm32eforth.s:98     *ABS*:0000000018000000 IRQOFFSET
       stm32eforth.s:103    *ABS*:0000000000000004 SEED_OFS
ARM GAS  stm32eforth.s 			page 86


       stm32eforth.s:104    *ABS*:0000000000000008 TICKS_OFS
       stm32eforth.s:105    *ABS*:000000000000000c TIMER_OFS
       stm32eforth.s:106    *ABS*:0000000000000010 TORAM_OFS
       stm32eforth.s:107    *ABS*:0000000000000014 IMG_SIGN_OFS
       stm32eforth.s:108    *ABS*:0000000000000018 BOOT_OFS
       stm32eforth.s:109    *ABS*:000000000000001c BASE_OFS
       stm32eforth.s:110    *ABS*:0000000000000020 TMP_OFS
       stm32eforth.s:111    *ABS*:0000000000000024 SPAN_OFS
       stm32eforth.s:112    *ABS*:0000000000000028 TOIN_OFS
       stm32eforth.s:113    *ABS*:000000000000002c NTIB_OFS
       stm32eforth.s:114    *ABS*:0000000000000030 TIB_OFS
       stm32eforth.s:115    *ABS*:0000000000000034 EVAL_OFS
       stm32eforth.s:116    *ABS*:0000000000000038 HLD_OFS
       stm32eforth.s:117    *ABS*:000000000000003c CTXT_OFS
       stm32eforth.s:118    *ABS*:0000000000000040 FORTH_CTOP_OFS
       stm32eforth.s:119    *ABS*:0000000000000044 USER_CTOP_OFS
       stm32eforth.s:120    *ABS*:0000000000000048 LASTN_OFS
       stm32eforth.s:121    *ABS*:000000000000004c VARS_END_OFS
       stm32eforth.s:123    *ABS*:0000000000000010 RX_QUEUE_SIZE
       stm32eforth.s:124    *ABS*:0000000000000050 RX_QUEUE_OFS
       stm32eforth.s:125    *ABS*:0000000000000060 RX_HEAD_OFS
       stm32eforth.s:126    *ABS*:0000000000000064 RX_TAIL_OFS
       stm32eforth.s:4089   .inflash.dictinary:0000000000000be4 link
       stm32eforth.s:220    .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:440    .inflash:00000000000000d0 reset_handler
       stm32eforth.s:338    .inflash:0000000000000000 default_handler
       stm32eforth.s:355    .inflash:0000000000000020 systick_handler
       stm32eforth.s:238    .isr_vector:0000000000000040 irq0
       stm32eforth.s:374    .inflash:000000000000003c uart_rx_handler
       stm32eforth.s:326    .isr_vector:0000000000000198 isr_end
       stm32eforth.s:328    .isr_vector:0000000000000198 $d
       stm32eforth.s:336    .inflash:0000000000000000 $t
       stm32eforth.s:343    .inflash:0000000000000008 exception_msg
       stm32eforth.s:416    .inflash:00000000000000a4 uart_puts
       stm32eforth.s:397    .inflash:000000000000007c reset_mcu
       stm32eforth.s:344    .inflash:0000000000000008 $d
       stm32eforth.s:364    .inflash:000000000000003a systick_exit
       stm32eforth.s:394    .inflash:0000000000000076 user_reboot
       stm32eforth.s:407    .inflash:0000000000000090 user_reboot_msg
       stm32eforth.s:405    .inflash:000000000000008c scb_adr
       stm32eforth.s:406    .inflash:000000000000008c $d
       stm32eforth.s:411    .inflash:00000000000000a2 $t
       stm32eforth.s:606    .inflash:0000000000000254 remap
       stm32eforth.s:497    .inflash:0000000000000160 init_devices
       stm32eforth.s:577    .inflash:0000000000000208 uart_init
       stm32eforth.s:456    .inflash:00000000000000f8 forth_init
       stm32eforth.s:452    .inflash:00000000000000f4 forth_entry
       stm32eforth.s:453    .inflash:00000000000000f4 $d
       stm32eforth.s:4124   .text:0000000000001c90 COLD
       stm32eforth.s:457    .inflash:00000000000000f8 $t
       stm32eforth.s:466    .inflash:0000000000000116 echo
       stm32eforth.s:2043   .text:0000000000000ac8 KEY
       stm32eforth.s:815    .text:0000000000000170 EMIT
       stm32eforth.s:472    .inflash:0000000000000120 blink
       stm32eforth.s:487    .inflash:0000000000000156 timeout
       stm32eforth.s:510    .inflash:000000000000017e wait_hserdy
       stm32eforth.s:531    .inflash:00000000000001a0 wait_pllrdy
ARM GAS  stm32eforth.s 			page 87


       stm32eforth.s:543    .inflash:00000000000001ba wait_sws
       stm32eforth.s:638    .inflash:00000000000002b8 remap_dest
       stm32eforth.s:636    .inflash:00000000000002b4 remap_src
       stm32eforth.s:4145   .text:0000000000001cf0 CTOP
       stm32eforth.s:685    .text:0000000000000000 UZERO
       stm32eforth.s:637    .inflash:00000000000002b4 $d
       stm32eforth.s:644    *ABS*:0000000000000001 VER
       stm32eforth.s:645    *ABS*:0000000000000000 EXT
       stm32eforth.s:649    *ABS*:0000000000000040 COMPO
       stm32eforth.s:650    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:651    *ABS*:00000000ffffff1f MASKK
       stm32eforth.s:653    *ABS*:0000000000000004 CELLL
       stm32eforth.s:654    *ABS*:000000000000000a BASEE
       stm32eforth.s:655    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:657    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:658    *ABS*:000000000000000a LF
       stm32eforth.s:659    *ABS*:000000000000000d CRR
       stm32eforth.s:660    *ABS*:000000000000001b ERR
       stm32eforth.s:661    *ABS*:0000000000000027 TIC
       stm32eforth.s:686    .text:0000000000000000 $d
       stm32eforth.s:4089   .text:0000000000001c34 HI
       stm32eforth.s:2710   .text:0000000000001180 INTER
       stm32eforth.s:4089   .inflash.dictinary:0000000000000be4 _LASTN
       stm32eforth.s:706    .text:0000000000000054 ULAST
       stm32eforth.s:714    .text:000000000000006c $t
               .inflash.dictinary:0000000000000000 LF_RSTIVEC
               .inflash.dictinary:0000000000000004 _RSTIVEC
               .inflash.dictinary:000000000000000d $d
       stm32eforth.s:718    .inflash.dictinary:0000000000000010 CA_RSTIVEC
       stm32eforth.s:718    .text:0000000000000070 RSTIVEC
       stm32eforth.s:841    .text:000000000000018a DOLIT
       stm32eforth.s:720    .text:0000000000000078 $d
       stm32eforth.s:984    .text:0000000000000244 SWAP
       stm32eforth.s:721    .text:000000000000007c $t
       stm32eforth.s:1133   .text:0000000000000320 CELLS
       stm32eforth.s:723    .text:0000000000000088 $d
       stm32eforth.s:1051   .text:00000000000002ac PLUS
       stm32eforth.s:724    .text:000000000000008c $t
       stm32eforth.s:916    .text:00000000000001ec STORE
       stm32eforth.s:718    .inflash.dictinary:0000000000000014 LF_SETIVEC
       stm32eforth.s:718    .inflash.dictinary:0000000000000018 _SETIVEC
       stm32eforth.s:730    .inflash.dictinary:0000000000000024 CA_SETIVEC
       stm32eforth.s:730    .text:0000000000000098 SETIVEC
       stm32eforth.s:1090   .text:00000000000002e4 ONEP
       stm32eforth.s:736    .text:00000000000000b0 $d
       stm32eforth.s:737    .text:00000000000000b4 $t
       stm32eforth.s:730    .inflash.dictinary:0000000000000028 LF_RAND
       stm32eforth.s:730    .inflash.dictinary:000000000000002c _RAND
       stm32eforth.s:746    .inflash.dictinary:0000000000000034 CA_RAND
       stm32eforth.s:746    .text:00000000000000c0 RAND
       stm32eforth.s:1364   .text:000000000000046c SEED
       stm32eforth.s:924    .text:00000000000001f8 AT
       stm32eforth.s:978    .text:000000000000023c DUPP
       stm32eforth.s:1212   .text:0000000000000394 ABSS
       stm32eforth.s:1599   .text:0000000000000624 MODD
       stm32eforth.s:746    .inflash.dictinary:0000000000000038 LF_PAUSE
       stm32eforth.s:746    .inflash.dictinary:000000000000003c _PAUSE
ARM GAS  stm32eforth.s 			page 88


       stm32eforth.s:766    .inflash.dictinary:0000000000000044 CA_PAUSE
       stm32eforth.s:766    .text:0000000000000100 PAUSE
       stm32eforth.s:1378   .text:0000000000000484 TIMER
       stm32eforth.s:770    .text:000000000000010c PAUSE_LOOP
       stm32eforth.s:886    .text:00000000000001c4 QBRAN
       stm32eforth.s:774    .text:0000000000000118 $d
       stm32eforth.s:777    .text:0000000000000124 PAUSE_EXIT
       stm32eforth.s:904    .text:00000000000001dc BRAN
       stm32eforth.s:775    .text:000000000000011c $t
       stm32eforth.s:776    .text:0000000000000120 $d
       stm32eforth.s:778    .text:0000000000000124 $t
       stm32eforth.s:766    .inflash.dictinary:0000000000000048 LF_ULED
       stm32eforth.s:766    .inflash.dictinary:000000000000004c _ULED
       stm32eforth.s:782    .inflash.dictinary:0000000000000054 CA_ULED
       stm32eforth.s:782    .text:0000000000000128 ULED
       stm32eforth.s:789    .text:0000000000000140 ULED_OFF
       stm32eforth.s:782    .inflash.dictinary:0000000000000058 LF_QRX
       stm32eforth.s:782    .inflash.dictinary:000000000000005c _QRX
       stm32eforth.s:795    .inflash.dictinary:0000000000000064 CA_QRX
       stm32eforth.s:795    .text:0000000000000144 QRX
       stm32eforth.s:796    .text:0000000000000144 QKEY
       stm32eforth.s:795    .inflash.dictinary:0000000000000068 LF_EMIT
       stm32eforth.s:795    .inflash.dictinary:000000000000006c _EMIT
       stm32eforth.s:815    .inflash.dictinary:0000000000000074 CA_EMIT
       stm32eforth.s:816    .text:0000000000000170 TECHO
       stm32eforth.s:815    .inflash.dictinary:0000000000000078 LF_NOP
       stm32eforth.s:815    .inflash.dictinary:000000000000007c _NOP
       stm32eforth.s:830    .inflash.dictinary:0000000000000080 CA_NOP
       stm32eforth.s:830    .text:0000000000000188 NOP
       stm32eforth.s:830    .inflash.dictinary:0000000000000084 LF_EXECU
       stm32eforth.s:830    .inflash.dictinary:0000000000000088 _EXECU
       stm32eforth.s:850    .inflash.dictinary:0000000000000090 CA_EXECU
       stm32eforth.s:850    .text:000000000000019c EXECU
       stm32eforth.s:864    .text:00000000000001a6 DONXT
       stm32eforth.s:871    .text:00000000000001b4 NEXT1
       stm32eforth.s:893    .text:00000000000001d6 QBRAN1
       stm32eforth.s:850    .inflash.dictinary:0000000000000094 LF_EXIT
       stm32eforth.s:850    .inflash.dictinary:0000000000000098 _EXIT
       stm32eforth.s:911    .inflash.dictinary:00000000000000a0 CA_EXIT
       stm32eforth.s:911    .text:00000000000001e8 EXIT
       stm32eforth.s:911    .inflash.dictinary:00000000000000a4 LF_STORE
       stm32eforth.s:911    .inflash.dictinary:00000000000000a8 _STORE
       stm32eforth.s:916    .inflash.dictinary:00000000000000ac CA_STORE
       stm32eforth.s:916    .inflash.dictinary:00000000000000b0 LF_AT
       stm32eforth.s:916    .inflash.dictinary:00000000000000b4 _AT
       stm32eforth.s:924    .inflash.dictinary:00000000000000b8 CA_AT
       stm32eforth.s:924    .inflash.dictinary:00000000000000bc LF_CSTOR
       stm32eforth.s:924    .inflash.dictinary:00000000000000c0 _CSTOR
       stm32eforth.s:930    .inflash.dictinary:00000000000000c4 CA_CSTOR
       stm32eforth.s:930    .text:00000000000001fc CSTOR
       stm32eforth.s:930    .inflash.dictinary:00000000000000c8 LF_CAT
       stm32eforth.s:930    .inflash.dictinary:00000000000000cc _CAT
       stm32eforth.s:938    .inflash.dictinary:00000000000000d0 CA_CAT
       stm32eforth.s:938    .text:0000000000000208 CAT
       stm32eforth.s:938    .inflash.dictinary:00000000000000d4 LF_RFROM
       stm32eforth.s:938    .inflash.dictinary:00000000000000d8 _RFROM
       stm32eforth.s:944    .inflash.dictinary:00000000000000dc CA_RFROM
ARM GAS  stm32eforth.s 			page 89


       stm32eforth.s:944    .text:000000000000020c RFROM
       stm32eforth.s:944    .inflash.dictinary:00000000000000e0 LF_RAT
       stm32eforth.s:944    .inflash.dictinary:00000000000000e4 _RAT
       stm32eforth.s:951    .inflash.dictinary:00000000000000e8 CA_RAT
       stm32eforth.s:951    .text:0000000000000218 RAT
       stm32eforth.s:951    .inflash.dictinary:00000000000000ec LF_TOR
       stm32eforth.s:951    .inflash.dictinary:00000000000000f0 _TOR
       stm32eforth.s:958    .inflash.dictinary:00000000000000f4 CA_TOR
       stm32eforth.s:958    .text:0000000000000220 TOR
       stm32eforth.s:958    .inflash.dictinary:00000000000000f8 LF_SPAT
       stm32eforth.s:958    .inflash.dictinary:00000000000000fc _SPAT
       stm32eforth.s:965    .inflash.dictinary:0000000000000100 CA_SPAT
       stm32eforth.s:965    .text:000000000000022c SPAT
       stm32eforth.s:965    .inflash.dictinary:0000000000000104 LF_DROP
       stm32eforth.s:965    .inflash.dictinary:0000000000000108 _DROP
       stm32eforth.s:972    .inflash.dictinary:0000000000000110 CA_DROP
       stm32eforth.s:972    .text:0000000000000234 DROP
       stm32eforth.s:972    .inflash.dictinary:0000000000000114 LF_DUPP
       stm32eforth.s:972    .inflash.dictinary:0000000000000118 _DUPP
       stm32eforth.s:978    .inflash.dictinary:000000000000011c CA_DUPP
       stm32eforth.s:978    .inflash.dictinary:0000000000000120 LF_SWAP
       stm32eforth.s:978    .inflash.dictinary:0000000000000124 _SWAP
       stm32eforth.s:984    .inflash.dictinary:000000000000012c CA_SWAP
       stm32eforth.s:984    .inflash.dictinary:0000000000000130 LF_OVER
       stm32eforth.s:984    .inflash.dictinary:0000000000000134 _OVER
       stm32eforth.s:992    .inflash.dictinary:000000000000013c CA_OVER
       stm32eforth.s:992    .text:000000000000024c OVER
       stm32eforth.s:992    .inflash.dictinary:0000000000000140 LF_ZLESS
       stm32eforth.s:992    .inflash.dictinary:0000000000000144 _ZLESS
       stm32eforth.s:999    .inflash.dictinary:0000000000000148 CA_ZLESS
       stm32eforth.s:999    .text:0000000000000254 ZLESS
       stm32eforth.s:999    .inflash.dictinary:000000000000014c LF_ANDD
       stm32eforth.s:999    .inflash.dictinary:0000000000000150 _ANDD
       stm32eforth.s:1006   .inflash.dictinary:0000000000000154 CA_ANDD
       stm32eforth.s:1006   .text:0000000000000260 ANDD
       stm32eforth.s:1006   .inflash.dictinary:0000000000000158 LF_ORR
       stm32eforth.s:1006   .inflash.dictinary:000000000000015c _ORR
       stm32eforth.s:1013   .inflash.dictinary:0000000000000160 CA_ORR
       stm32eforth.s:1013   .text:000000000000026c ORR
       stm32eforth.s:1013   .inflash.dictinary:0000000000000164 LF_XORR
       stm32eforth.s:1013   .inflash.dictinary:0000000000000168 _XORR
       stm32eforth.s:1020   .inflash.dictinary:000000000000016c CA_XORR
       stm32eforth.s:1020   .text:0000000000000278 XORR
       stm32eforth.s:1020   .inflash.dictinary:0000000000000170 LF_UPLUS
       stm32eforth.s:1020   .inflash.dictinary:0000000000000174 _UPLUS
       stm32eforth.s:1027   .inflash.dictinary:0000000000000178 CA_UPLUS
       stm32eforth.s:1027   .text:0000000000000284 UPLUS
       stm32eforth.s:1027   .inflash.dictinary:000000000000017c LF_RSHIFT
       stm32eforth.s:1027   .inflash.dictinary:0000000000000180 _RSHIFT
       stm32eforth.s:1037   .inflash.dictinary:0000000000000188 CA_RSHIFT
       stm32eforth.s:1037   .text:0000000000000294 RSHIFT
       stm32eforth.s:1037   .inflash.dictinary:000000000000018c LF_LSHIFT
       stm32eforth.s:1037   .inflash.dictinary:0000000000000190 _LSHIFT
       stm32eforth.s:1044   .inflash.dictinary:0000000000000198 CA_LSHIFT
       stm32eforth.s:1044   .text:00000000000002a0 LSHIFT
       stm32eforth.s:1044   .inflash.dictinary:000000000000019c LF_PLUS
       stm32eforth.s:1044   .inflash.dictinary:00000000000001a0 _PLUS
ARM GAS  stm32eforth.s 			page 90


       stm32eforth.s:1051   .inflash.dictinary:00000000000001a4 CA_PLUS
       stm32eforth.s:1051   .inflash.dictinary:00000000000001a8 LF_SUBB
       stm32eforth.s:1051   .inflash.dictinary:00000000000001ac _SUBB
       stm32eforth.s:1058   .inflash.dictinary:00000000000001b0 CA_SUBB
       stm32eforth.s:1058   .text:00000000000002b4 SUBB
       stm32eforth.s:1058   .inflash.dictinary:00000000000001b4 LF_STAR
       stm32eforth.s:1058   .inflash.dictinary:00000000000001b8 _STAR
       stm32eforth.s:1065   .inflash.dictinary:00000000000001bc CA_STAR
       stm32eforth.s:1065   .text:00000000000002c0 STAR
       stm32eforth.s:1065   .inflash.dictinary:00000000000001c0 LF_UMSTA
       stm32eforth.s:1065   .inflash.dictinary:00000000000001c4 _UMSTA
       stm32eforth.s:1072   .inflash.dictinary:00000000000001c8 CA_UMSTA
       stm32eforth.s:1072   .text:00000000000002cc UMSTA
       stm32eforth.s:1072   .inflash.dictinary:00000000000001cc LF_MSTAR
       stm32eforth.s:1072   .inflash.dictinary:00000000000001d0 _MSTAR
       stm32eforth.s:1081   .inflash.dictinary:00000000000001d4 CA_MSTAR
       stm32eforth.s:1081   .text:00000000000002d8 MSTAR
       stm32eforth.s:1081   .inflash.dictinary:00000000000001d8 LF_ONEP
       stm32eforth.s:1081   .inflash.dictinary:00000000000001dc _ONEP
       stm32eforth.s:1090   .inflash.dictinary:00000000000001e0 CA_ONEP
       stm32eforth.s:1090   .inflash.dictinary:00000000000001e4 LF_ONEM
       stm32eforth.s:1090   .inflash.dictinary:00000000000001e8 _ONEM
       stm32eforth.s:1096   .inflash.dictinary:00000000000001ec CA_ONEM
       stm32eforth.s:1096   .text:00000000000002ec ONEM
       stm32eforth.s:1096   .inflash.dictinary:00000000000001f0 LF_TWOP
       stm32eforth.s:1096   .inflash.dictinary:00000000000001f4 _TWOP
       stm32eforth.s:1102   .inflash.dictinary:00000000000001f8 CA_TWOP
       stm32eforth.s:1102   .text:00000000000002f4 TWOP
       stm32eforth.s:1102   .inflash.dictinary:00000000000001fc LF_TWOM
       stm32eforth.s:1102   .inflash.dictinary:0000000000000200 _TWOM
       stm32eforth.s:1108   .inflash.dictinary:0000000000000204 CA_TWOM
       stm32eforth.s:1108   .text:00000000000002fc TWOM
       stm32eforth.s:1108   .inflash.dictinary:0000000000000208 LF_CELLP
       stm32eforth.s:1108   .inflash.dictinary:000000000000020c _CELLP
       stm32eforth.s:1114   .inflash.dictinary:0000000000000214 CA_CELLP
       stm32eforth.s:1114   .text:0000000000000304 CELLP
       stm32eforth.s:1114   .inflash.dictinary:0000000000000218 LF_CELLM
       stm32eforth.s:1114   .inflash.dictinary:000000000000021c _CELLM
       stm32eforth.s:1120   .inflash.dictinary:0000000000000224 CA_CELLM
       stm32eforth.s:1120   .text:000000000000030c CELLM
       stm32eforth.s:1120   .inflash.dictinary:0000000000000228 LF_BLANK
       stm32eforth.s:1120   .inflash.dictinary:000000000000022c _BLANK
       stm32eforth.s:1126   .inflash.dictinary:0000000000000230 CA_BLANK
       stm32eforth.s:1126   .text:0000000000000314 BLANK
       stm32eforth.s:1126   .inflash.dictinary:0000000000000234 LF_CELLS
       stm32eforth.s:1126   .inflash.dictinary:0000000000000238 _CELLS
       stm32eforth.s:1133   .inflash.dictinary:0000000000000240 CA_CELLS
       stm32eforth.s:1133   .inflash.dictinary:0000000000000244 LF_CELLSL
       stm32eforth.s:1133   .inflash.dictinary:0000000000000248 _CELLSL
       stm32eforth.s:1139   .inflash.dictinary:0000000000000250 CA_CELLSL
       stm32eforth.s:1139   .text:0000000000000328 CELLSL
       stm32eforth.s:1139   .inflash.dictinary:0000000000000254 LF_TWOST
       stm32eforth.s:1139   .inflash.dictinary:0000000000000258 _TWOST
       stm32eforth.s:1145   .inflash.dictinary:000000000000025c CA_TWOST
       stm32eforth.s:1145   .text:0000000000000330 TWOST
       stm32eforth.s:1145   .inflash.dictinary:0000000000000260 LF_TWOSL
       stm32eforth.s:1145   .inflash.dictinary:0000000000000264 _TWOSL
ARM GAS  stm32eforth.s 			page 91


       stm32eforth.s:1151   .inflash.dictinary:0000000000000268 CA_TWOSL
       stm32eforth.s:1151   .text:0000000000000338 TWOSL
       stm32eforth.s:1151   .inflash.dictinary:000000000000026c LF_QDUP
       stm32eforth.s:1151   .inflash.dictinary:0000000000000270 _QDUP
       stm32eforth.s:1157   .inflash.dictinary:0000000000000278 CA_QDUP
       stm32eforth.s:1157   .text:0000000000000340 QDUP
       stm32eforth.s:1157   .inflash.dictinary:000000000000027c LF_ROT
       stm32eforth.s:1157   .inflash.dictinary:0000000000000280 _ROT
       stm32eforth.s:1165   .inflash.dictinary:0000000000000284 CA_ROT
       stm32eforth.s:1165   .text:000000000000034c ROT
       stm32eforth.s:1165   .inflash.dictinary:0000000000000288 LF_DDROP
       stm32eforth.s:1165   .inflash.dictinary:000000000000028c _DDROP
       stm32eforth.s:1174   .inflash.dictinary:0000000000000294 CA_DDROP
       stm32eforth.s:1174   .text:0000000000000358 DDROP
       stm32eforth.s:1174   .inflash.dictinary:0000000000000298 LF_DDUP
       stm32eforth.s:1174   .inflash.dictinary:000000000000029c _DDUP
       stm32eforth.s:1181   .inflash.dictinary:00000000000002a4 CA_DDUP
       stm32eforth.s:1181   .text:0000000000000364 DDUP
       stm32eforth.s:1181   .inflash.dictinary:00000000000002a8 LF_DPLUS
       stm32eforth.s:1181   .inflash.dictinary:00000000000002ac _DPLUS
       stm32eforth.s:1189   .inflash.dictinary:00000000000002b0 CA_DPLUS
       stm32eforth.s:1189   .text:0000000000000370 DPLUS
       stm32eforth.s:1189   .inflash.dictinary:00000000000002b4 LF_INVER
       stm32eforth.s:1189   .inflash.dictinary:00000000000002b8 _INVER
       stm32eforth.s:1200   .inflash.dictinary:00000000000002bc CA_INVER
       stm32eforth.s:1200   .text:0000000000000384 INVER
       stm32eforth.s:1200   .inflash.dictinary:00000000000002c0 LF_NEGAT
       stm32eforth.s:1200   .inflash.dictinary:00000000000002c4 _NEGAT
       stm32eforth.s:1206   .inflash.dictinary:00000000000002cc CA_NEGAT
       stm32eforth.s:1206   .text:000000000000038c NEGAT
       stm32eforth.s:1206   .inflash.dictinary:00000000000002d0 LF_ABSS
       stm32eforth.s:1206   .inflash.dictinary:00000000000002d4 _ABSS
       stm32eforth.s:1212   .inflash.dictinary:00000000000002d8 CA_ABSS
       stm32eforth.s:1212   .inflash.dictinary:00000000000002dc LF_ZEQUAL
       stm32eforth.s:1212   .inflash.dictinary:00000000000002e0 _ZEQUAL
       stm32eforth.s:1220   .inflash.dictinary:00000000000002e4 CA_ZEQUAL
       stm32eforth.s:1220   .text:00000000000003a0 ZEQUAL
       stm32eforth.s:1220   .inflash.dictinary:00000000000002e8 LF_EQUAL
       stm32eforth.s:1220   .inflash.dictinary:00000000000002ec _EQUAL
       stm32eforth.s:1229   .inflash.dictinary:00000000000002f0 CA_EQUAL
       stm32eforth.s:1229   .text:00000000000003b0 EQUAL
       stm32eforth.s:1229   .inflash.dictinary:00000000000002f4 LF_ULESS
       stm32eforth.s:1229   .inflash.dictinary:00000000000002f8 _ULESS
       stm32eforth.s:1239   .inflash.dictinary:00000000000002fc CA_ULESS
       stm32eforth.s:1239   .text:00000000000003c0 ULESS
       stm32eforth.s:1239   .inflash.dictinary:0000000000000300 LF_LESS
       stm32eforth.s:1239   .inflash.dictinary:0000000000000304 _LESS
       stm32eforth.s:1249   .inflash.dictinary:0000000000000308 CA_LESS
       stm32eforth.s:1249   .text:00000000000003d0 LESS
       stm32eforth.s:1249   .inflash.dictinary:000000000000030c LF_GREAT
       stm32eforth.s:1249   .inflash.dictinary:0000000000000310 _GREAT
       stm32eforth.s:1259   .inflash.dictinary:0000000000000314 CA_GREAT
       stm32eforth.s:1259   .text:00000000000003e0 GREAT
       stm32eforth.s:1259   .inflash.dictinary:0000000000000318 LF_MAX
       stm32eforth.s:1259   .inflash.dictinary:000000000000031c _MAX
       stm32eforth.s:1269   .inflash.dictinary:0000000000000320 CA_MAX
       stm32eforth.s:1269   .text:00000000000003f0 MAX
ARM GAS  stm32eforth.s 			page 92


       stm32eforth.s:1269   .inflash.dictinary:0000000000000324 LF_MIN
       stm32eforth.s:1269   .inflash.dictinary:0000000000000328 _MIN
       stm32eforth.s:1278   .inflash.dictinary:000000000000032c CA_MIN
       stm32eforth.s:1278   .text:00000000000003fc MIN
       stm32eforth.s:1278   .inflash.dictinary:0000000000000330 LF_PSTOR
       stm32eforth.s:1278   .inflash.dictinary:0000000000000334 _PSTOR
       stm32eforth.s:1287   .inflash.dictinary:0000000000000338 CA_PSTOR
       stm32eforth.s:1287   .text:0000000000000408 PSTOR
       stm32eforth.s:1287   .inflash.dictinary:000000000000033c LF_DSTOR
       stm32eforth.s:1287   .inflash.dictinary:0000000000000340 _DSTOR
       stm32eforth.s:1297   .inflash.dictinary:0000000000000344 CA_DSTOR
       stm32eforth.s:1297   .text:0000000000000418 DSTOR
       stm32eforth.s:1297   .inflash.dictinary:0000000000000348 LF_DAT
       stm32eforth.s:1297   .inflash.dictinary:000000000000034c _DAT
       stm32eforth.s:1307   .inflash.dictinary:0000000000000350 CA_DAT
       stm32eforth.s:1307   .text:000000000000042c DAT
       stm32eforth.s:1307   .inflash.dictinary:0000000000000354 LF_COUNT
       stm32eforth.s:1307   .inflash.dictinary:0000000000000358 _COUNT
       stm32eforth.s:1315   .inflash.dictinary:0000000000000360 CA_COUNT
       stm32eforth.s:1315   .text:0000000000000438 COUNT
       stm32eforth.s:1315   .inflash.dictinary:0000000000000364 LF_DNEGA
       stm32eforth.s:1315   .inflash.dictinary:0000000000000368 _DNEGA
       stm32eforth.s:1323   .inflash.dictinary:0000000000000370 CA_DNEGA
       stm32eforth.s:1323   .text:0000000000000444 DNEGA
       stm32eforth.s:1341   .text:0000000000000454 DOVAR
       stm32eforth.s:1353   .text:0000000000000460 DOCON
       stm32eforth.s:1323   .inflash.dictinary:0000000000000374 LF_SEED
       stm32eforth.s:1323   .inflash.dictinary:0000000000000378 _SEED
       stm32eforth.s:1364   .inflash.dictinary:0000000000000380 CA_SEED
       stm32eforth.s:1364   .inflash.dictinary:0000000000000384 LF_MSEC
       stm32eforth.s:1364   .inflash.dictinary:0000000000000388 _MSEC
       stm32eforth.s:1371   .inflash.dictinary:0000000000000390 CA_MSEC
       stm32eforth.s:1371   .text:0000000000000478 MSEC
       stm32eforth.s:1371   .inflash.dictinary:0000000000000394 LF_TIMER
       stm32eforth.s:1371   .inflash.dictinary:0000000000000398 _TIMER
       stm32eforth.s:1378   .inflash.dictinary:00000000000003a0 CA_TIMER
       stm32eforth.s:1378   .inflash.dictinary:00000000000003a4 LF_TBOOT
       stm32eforth.s:1378   .inflash.dictinary:00000000000003a8 _TBOOT
       stm32eforth.s:1385   .inflash.dictinary:00000000000003b0 CA_TBOOT
       stm32eforth.s:1385   .text:0000000000000490 TBOOT
       stm32eforth.s:1385   .inflash.dictinary:00000000000003b4 LF_BASE
       stm32eforth.s:1385   .inflash.dictinary:00000000000003b8 _BASE
       stm32eforth.s:1392   .inflash.dictinary:00000000000003c0 CA_BASE
       stm32eforth.s:1392   .text:000000000000049c BASE
       stm32eforth.s:1404   .text:00000000000004a6 TEMP
       stm32eforth.s:1392   .inflash.dictinary:00000000000003c4 LF_SPAN
       stm32eforth.s:1392   .inflash.dictinary:00000000000003c8 _SPAN
       stm32eforth.s:1411   .inflash.dictinary:00000000000003d0 CA_SPAN
       stm32eforth.s:1411   .text:00000000000004b0 SPAN
       stm32eforth.s:1411   .inflash.dictinary:00000000000003d4 LF_INN
       stm32eforth.s:1411   .inflash.dictinary:00000000000003d8 _INN
       stm32eforth.s:1418   .inflash.dictinary:00000000000003dc CA_INN
       stm32eforth.s:1418   .text:00000000000004bc INN
       stm32eforth.s:1418   .inflash.dictinary:00000000000003e0 LF_NTIB
       stm32eforth.s:1418   .inflash.dictinary:00000000000003e4 _NTIB
       stm32eforth.s:1425   .inflash.dictinary:00000000000003ec CA_NTIB
       stm32eforth.s:1425   .text:00000000000004c8 NTIB
ARM GAS  stm32eforth.s 			page 93


       stm32eforth.s:1425   .inflash.dictinary:00000000000003f0 LF_TEVAL
       stm32eforth.s:1425   .inflash.dictinary:00000000000003f4 _TEVAL
       stm32eforth.s:1432   .inflash.dictinary:00000000000003fc CA_TEVAL
       stm32eforth.s:1432   .text:00000000000004d4 TEVAL
       stm32eforth.s:1432   .inflash.dictinary:0000000000000400 LF_HLD
       stm32eforth.s:1432   .inflash.dictinary:0000000000000404 _HLD
       stm32eforth.s:1439   .inflash.dictinary:0000000000000408 CA_HLD
       stm32eforth.s:1439   .text:00000000000004e0 HLD
       stm32eforth.s:1439   .inflash.dictinary:000000000000040c LF_CNTXT
       stm32eforth.s:1439   .inflash.dictinary:0000000000000410 _CNTXT
       stm32eforth.s:1446   .inflash.dictinary:0000000000000418 CA_CNTXT
       stm32eforth.s:1446   .text:00000000000004ec CNTXT
       stm32eforth.s:1447   .text:00000000000004ec CRRNT
       stm32eforth.s:1446   .inflash.dictinary:000000000000041c LF_CPP
       stm32eforth.s:1446   .inflash.dictinary:0000000000000420 _CPP
       stm32eforth.s:1454   .inflash.dictinary:0000000000000424 CA_CPP
       stm32eforth.s:1454   .text:00000000000004f8 CPP
       stm32eforth.s:1454   .inflash.dictinary:0000000000000428 LF_FCP
       stm32eforth.s:1454   .inflash.dictinary:000000000000042c _FCP
       stm32eforth.s:1461   .inflash.dictinary:0000000000000430 CA_FCP
       stm32eforth.s:1461   .text:0000000000000504 FCP
       stm32eforth.s:1461   .inflash.dictinary:0000000000000434 LF_LAST
       stm32eforth.s:1461   .inflash.dictinary:0000000000000438 _LAST
       stm32eforth.s:1468   .inflash.dictinary:0000000000000440 CA_LAST
       stm32eforth.s:1468   .text:0000000000000510 LAST
       stm32eforth.s:1468   .inflash.dictinary:0000000000000444 LF_USER_BEGIN
       stm32eforth.s:1468   .inflash.dictinary:0000000000000448 _USER_BEGIN
       stm32eforth.s:1479   .inflash.dictinary:0000000000000454 CA_USER_BEGIN
       stm32eforth.s:1479   .text:000000000000051c USER_BEGIN
       stm32eforth.s:1483   .text:0000000000000524 USR_BGN_ADR
       stm32eforth.s:1484   .text:0000000000000524 $d
       stm32eforth.s:1479   .inflash.dictinary:0000000000000458 LF_USER_END
       stm32eforth.s:1479   .inflash.dictinary:000000000000045c _USER_END
       stm32eforth.s:1488   .inflash.dictinary:0000000000000468 CA_USER_END
       stm32eforth.s:1488   .text:0000000000000528 USER_END
       stm32eforth.s:1488   .text:0000000000000528 $t
       stm32eforth.s:1488   .inflash.dictinary:000000000000046c LF_IMG_ADR
       stm32eforth.s:1488   .inflash.dictinary:0000000000000470 _IMG_ADR
       stm32eforth.s:1495   .inflash.dictinary:0000000000000478 CA_IMG_ADR
       stm32eforth.s:1495   .text:0000000000000538 IMG_ADR
       stm32eforth.s:1499   .text:0000000000000540 USR_IMG_ADR
       stm32eforth.s:1500   .text:0000000000000540 $d
       stm32eforth.s:1495   .inflash.dictinary:000000000000047c LF_IMG_SIGN
       stm32eforth.s:1495   .inflash.dictinary:0000000000000480 _IMG_SIGN
       stm32eforth.s:1504   .inflash.dictinary:000000000000048c CA_IMG_SIGN
       stm32eforth.s:1504   .text:0000000000000544 IMG_SIGN
       stm32eforth.s:1504   .text:0000000000000544 $t
       stm32eforth.s:1504   .inflash.dictinary:0000000000000490 LF_WITHI
       stm32eforth.s:1504   .inflash.dictinary:0000000000000494 _WITHI
       stm32eforth.s:1515   .inflash.dictinary:000000000000049c CA_WITHI
       stm32eforth.s:1515   .text:0000000000000550 WITHI
       stm32eforth.s:1515   .inflash.dictinary:00000000000004a0 LF_UMMOD
       stm32eforth.s:1515   .inflash.dictinary:00000000000004a4 _UMMOD
       stm32eforth.s:1529   .inflash.dictinary:00000000000004ac CA_UMMOD
       stm32eforth.s:1529   .text:0000000000000570 UMMOD
       stm32eforth.s:1533   .text:000000000000057a UMMOD0
       stm32eforth.s:1540   .text:000000000000058a UMMOD1
ARM GAS  stm32eforth.s 			page 94


       stm32eforth.s:1546   .text:0000000000000594 UMMOD2
       stm32eforth.s:1529   .inflash.dictinary:00000000000004b0 LF_MSMOD
       stm32eforth.s:1529   .inflash.dictinary:00000000000004b4 _MSMOD
       stm32eforth.s:1555   .inflash.dictinary:00000000000004bc CA_MSMOD
       stm32eforth.s:1555   .text:00000000000005a0 MSMOD
       stm32eforth.s:1562   .text:00000000000005b8 $d
       stm32eforth.s:1567   .text:00000000000005cc MMOD1
       stm32eforth.s:1563   .text:00000000000005bc $t
       stm32eforth.s:1572   .text:00000000000005dc $d
       stm32eforth.s:1575   .text:00000000000005e8 MMOD2
       stm32eforth.s:1573   .text:00000000000005e0 $t
       stm32eforth.s:1580   .text:00000000000005f8 $d
       stm32eforth.s:1584   .text:0000000000000608 MMOD3
       stm32eforth.s:1581   .text:00000000000005fc $t
       stm32eforth.s:1555   .inflash.dictinary:00000000000004c0 LF_SLMOD
       stm32eforth.s:1555   .inflash.dictinary:00000000000004c4 _SLMOD
       stm32eforth.s:1589   .inflash.dictinary:00000000000004cc CA_SLMOD
       stm32eforth.s:1589   .text:000000000000060c SLMOD
       stm32eforth.s:1589   .inflash.dictinary:00000000000004d0 LF_MODD
       stm32eforth.s:1589   .inflash.dictinary:00000000000004d4 _MODD
       stm32eforth.s:1599   .inflash.dictinary:00000000000004dc CA_MODD
       stm32eforth.s:1599   .inflash.dictinary:00000000000004e0 LF_SLASH
       stm32eforth.s:1599   .inflash.dictinary:00000000000004e4 _SLASH
       stm32eforth.s:1607   .inflash.dictinary:00000000000004e8 CA_SLASH
       stm32eforth.s:1607   .text:0000000000000634 SLASH
       stm32eforth.s:1607   .inflash.dictinary:00000000000004ec LF_SSMOD
       stm32eforth.s:1607   .inflash.dictinary:00000000000004f0 _SSMOD
       stm32eforth.s:1616   .inflash.dictinary:00000000000004f8 CA_SSMOD
       stm32eforth.s:1616   .text:0000000000000648 SSMOD
       stm32eforth.s:1616   .inflash.dictinary:00000000000004fc LF_STASL
       stm32eforth.s:1616   .inflash.dictinary:0000000000000500 _STASL
       stm32eforth.s:1626   .inflash.dictinary:0000000000000504 CA_STASL
       stm32eforth.s:1626   .text:0000000000000660 STASL
       stm32eforth.s:1626   .inflash.dictinary:0000000000000508 LF_ALGND
       stm32eforth.s:1626   .inflash.dictinary:000000000000050c _ALGND
       stm32eforth.s:1638   .inflash.dictinary:0000000000000514 CA_ALGND
       stm32eforth.s:1638   .text:0000000000000674 ALGND
       stm32eforth.s:1638   .inflash.dictinary:0000000000000518 LF_TCHAR
       stm32eforth.s:1638   .inflash.dictinary:000000000000051c _TCHAR
       stm32eforth.s:1646   .inflash.dictinary:0000000000000524 CA_TCHAR
       stm32eforth.s:1646   .text:0000000000000684 TCHAR
       stm32eforth.s:1648   .text:000000000000068c $d
       stm32eforth.s:1649   .text:0000000000000690 $t
       stm32eforth.s:1652   .text:00000000000006a0 $d
       stm32eforth.s:1653   .text:00000000000006a4 $t
       stm32eforth.s:1656   .text:00000000000006b0 $d
       stm32eforth.s:1659   .text:00000000000006c0 TCHA1
       stm32eforth.s:1657   .text:00000000000006b4 $t
       stm32eforth.s:1658   .text:00000000000006bc $d
       stm32eforth.s:1660   .text:00000000000006c0 $t
       stm32eforth.s:1646   .inflash.dictinary:0000000000000528 LF_DEPTH
       stm32eforth.s:1646   .inflash.dictinary:000000000000052c _DEPTH
       stm32eforth.s:1664   .inflash.dictinary:0000000000000534 CA_DEPTH
       stm32eforth.s:1664   .text:00000000000006c4 DEPTH
       stm32eforth.s:1664   .inflash.dictinary:0000000000000538 LF_PICK
       stm32eforth.s:1664   .inflash.dictinary:000000000000053c _PICK
       stm32eforth.s:1673   .inflash.dictinary:0000000000000544 CA_PICK
ARM GAS  stm32eforth.s 			page 95


       stm32eforth.s:1673   .text:00000000000006dc PICK
       stm32eforth.s:1673   .inflash.dictinary:0000000000000548 LF_HERE
       stm32eforth.s:1673   .inflash.dictinary:000000000000054c _HERE
       stm32eforth.s:1687   .inflash.dictinary:0000000000000554 CA_HERE
       stm32eforth.s:1687   .text:00000000000006f8 HERE
       stm32eforth.s:1687   .inflash.dictinary:0000000000000558 LF_PAD
       stm32eforth.s:1687   .inflash.dictinary:000000000000055c _PAD
       stm32eforth.s:1695   .inflash.dictinary:0000000000000560 CA_PAD
       stm32eforth.s:1695   .text:0000000000000708 PAD
       stm32eforth.s:1695   .inflash.dictinary:0000000000000564 LF_TIB
       stm32eforth.s:1695   .inflash.dictinary:0000000000000568 _TIB
       stm32eforth.s:1703   .inflash.dictinary:000000000000056c CA_TIB
       stm32eforth.s:1703   .text:0000000000000718 TIB
       stm32eforth.s:1703   .inflash.dictinary:0000000000000570 LF_ATEXE
       stm32eforth.s:1703   .inflash.dictinary:0000000000000574 _ATEXE
       stm32eforth.s:1710   .inflash.dictinary:0000000000000580 CA_ATEXE
       stm32eforth.s:1710   .text:0000000000000720 ATEXE
       stm32eforth.s:1710   .inflash.dictinary:0000000000000584 LF_CMOVE
       stm32eforth.s:1710   .inflash.dictinary:0000000000000588 _CMOVE
       stm32eforth.s:1721   .inflash.dictinary:0000000000000590 CA_CMOVE
       stm32eforth.s:1721   .text:0000000000000734 CMOVE
       stm32eforth.s:1728   .text:0000000000000746 CMOV1
       stm32eforth.s:1725   .text:000000000000073e CMOV0
       stm32eforth.s:1733   .text:0000000000000750 CMOV2
       stm32eforth.s:1721   .inflash.dictinary:0000000000000594 LF_MOVE
       stm32eforth.s:1721   .inflash.dictinary:0000000000000598 _MOVE
       stm32eforth.s:1739   .inflash.dictinary:00000000000005a0 CA_MOVE
       stm32eforth.s:1739   .text:0000000000000758 MOVE
       stm32eforth.s:1747   .text:000000000000076e MOVE1
       stm32eforth.s:1744   .text:0000000000000766 MOVE0
       stm32eforth.s:1752   .text:0000000000000778 MOVE2
       stm32eforth.s:1739   .inflash.dictinary:00000000000005a4 LF_FILL
       stm32eforth.s:1739   .inflash.dictinary:00000000000005a8 _FILL
       stm32eforth.s:1758   .inflash.dictinary:00000000000005b0 CA_FILL
       stm32eforth.s:1758   .text:0000000000000780 FILL
       stm32eforth.s:1761   .text:0000000000000788 FILL0
       stm32eforth.s:1764   .text:000000000000078c FILL1
       stm32eforth.s:1770   .text:000000000000079a FILL2
       stm32eforth.s:1758   .inflash.dictinary:00000000000005b4 LF_PACKS
       stm32eforth.s:1758   .inflash.dictinary:00000000000005b8 _PACKS
       stm32eforth.s:1776   .inflash.dictinary:00000000000005c0 CA_PACKS
       stm32eforth.s:1776   .text:00000000000007a0 PACKS
       stm32eforth.s:1784   .text:00000000000007c0 $d
       stm32eforth.s:1785   .text:00000000000007c4 $t
       stm32eforth.s:1786   .text:00000000000007cc $d
       stm32eforth.s:1787   .text:00000000000007d0 $t
       stm32eforth.s:1776   .inflash.dictinary:00000000000005c4 LF_DIGIT
       stm32eforth.s:1776   .inflash.dictinary:00000000000005c8 _DIGIT
       stm32eforth.s:1803   .inflash.dictinary:00000000000005d0 CA_DIGIT
       stm32eforth.s:1803   .text:00000000000007f8 DIGIT
       stm32eforth.s:1805   .text:0000000000000800 $d
       stm32eforth.s:1806   .text:0000000000000804 $t
       stm32eforth.s:1803   .inflash.dictinary:00000000000005d4 LF_EXTRC
       stm32eforth.s:1803   .inflash.dictinary:00000000000005d8 _EXTRC
       stm32eforth.s:1815   .inflash.dictinary:00000000000005e0 CA_EXTRC
       stm32eforth.s:1815   .text:000000000000081c EXTRC
       stm32eforth.s:1817   .text:0000000000000824 $d
ARM GAS  stm32eforth.s 			page 96


       stm32eforth.s:1818   .text:0000000000000828 $t
       stm32eforth.s:1815   .inflash.dictinary:00000000000005e4 LF_BDIGS
       stm32eforth.s:1815   .inflash.dictinary:00000000000005e8 _BDIGS
       stm32eforth.s:1826   .inflash.dictinary:00000000000005ec CA_BDIGS
       stm32eforth.s:1826   .text:000000000000083c BDIGS
       stm32eforth.s:1826   .inflash.dictinary:00000000000005f0 LF_HOLD
       stm32eforth.s:1826   .inflash.dictinary:00000000000005f4 _HOLD
       stm32eforth.s:1835   .inflash.dictinary:00000000000005fc CA_HOLD
       stm32eforth.s:1835   .text:0000000000000850 HOLD
       stm32eforth.s:1835   .inflash.dictinary:0000000000000600 LF_DIG
       stm32eforth.s:1835   .inflash.dictinary:0000000000000604 _DIG
       stm32eforth.s:1848   .inflash.dictinary:0000000000000608 CA_DIG
       stm32eforth.s:1848   .text:0000000000000874 DIG
       stm32eforth.s:1848   .inflash.dictinary:000000000000060c LF_DIGS
       stm32eforth.s:1848   .inflash.dictinary:0000000000000610 _DIGS
       stm32eforth.s:1858   .inflash.dictinary:0000000000000614 CA_DIGS
       stm32eforth.s:1858   .text:000000000000088c DIGS
       stm32eforth.s:1860   .text:0000000000000890 DIGS1
       stm32eforth.s:1864   .text:000000000000089c $d
       stm32eforth.s:1866   .text:00000000000008a2 DIGS2
       stm32eforth.s:1865   .text:00000000000008a0 $t
       stm32eforth.s:1858   .inflash.dictinary:0000000000000618 LF_SIGN
       stm32eforth.s:1858   .inflash.dictinary:000000000000061c _SIGN
       stm32eforth.s:1871   .inflash.dictinary:0000000000000624 CA_SIGN
       stm32eforth.s:1871   .text:00000000000008a8 SIGN
       stm32eforth.s:1875   .text:00000000000008b4 $d
       stm32eforth.s:1878   .text:00000000000008c4 SIGN1
       stm32eforth.s:1876   .text:00000000000008b8 $t
       stm32eforth.s:1876   .text:00000000000008bc $d
       stm32eforth.s:1877   .text:00000000000008c0 $t
       stm32eforth.s:1871   .inflash.dictinary:0000000000000628 LF_EDIGS
       stm32eforth.s:1871   .inflash.dictinary:000000000000062c _EDIGS
       stm32eforth.s:1883   .inflash.dictinary:0000000000000630 CA_EDIGS
       stm32eforth.s:1883   .text:00000000000008c8 EDIGS
       stm32eforth.s:1900   .text:00000000000008e8 STRR
       stm32eforth.s:1883   .inflash.dictinary:0000000000000634 LF_HEX
       stm32eforth.s:1883   .inflash.dictinary:0000000000000638 _HEX
       stm32eforth.s:1914   .inflash.dictinary:000000000000063c CA_HEX
       stm32eforth.s:1914   .text:0000000000000910 HEX
       stm32eforth.s:1916   .text:0000000000000918 $d
       stm32eforth.s:1917   .text:000000000000091c $t
       stm32eforth.s:1914   .inflash.dictinary:0000000000000640 LF_DECIM
       stm32eforth.s:1914   .inflash.dictinary:0000000000000644 _DECIM
       stm32eforth.s:1923   .inflash.dictinary:000000000000064c CA_DECIM
       stm32eforth.s:1923   .text:0000000000000928 DECIM
       stm32eforth.s:1925   .text:0000000000000930 $d
       stm32eforth.s:1926   .text:0000000000000934 $t
       stm32eforth.s:1923   .inflash.dictinary:0000000000000650 LF_DIGTQ
       stm32eforth.s:1923   .inflash.dictinary:0000000000000654 _DIGTQ
       stm32eforth.s:1935   .inflash.dictinary:000000000000065c CA_DIGTQ
       stm32eforth.s:1935   .text:0000000000000940 DIGTQ
       stm32eforth.s:1938   .text:000000000000094c $d
       stm32eforth.s:1939   .text:0000000000000950 $t
       stm32eforth.s:1940   .text:0000000000000958 $d
       stm32eforth.s:1941   .text:000000000000095c $t
       stm32eforth.s:1944   .text:0000000000000968 $d
       stm32eforth.s:1951   .text:000000000000098c DGTQ1
ARM GAS  stm32eforth.s 			page 97


       stm32eforth.s:1945   .text:000000000000096c $t
       stm32eforth.s:1945   .text:0000000000000970 $d
       stm32eforth.s:1946   .text:0000000000000974 $t
       stm32eforth.s:1948   .text:0000000000000980 $d
       stm32eforth.s:1949   .text:0000000000000984 $t
       stm32eforth.s:1935   .inflash.dictinary:0000000000000660 LF_NUMBQ
       stm32eforth.s:1935   .inflash.dictinary:0000000000000664 _NUMBQ
       stm32eforth.s:1959   .inflash.dictinary:000000000000066c CA_NUMBQ
       stm32eforth.s:1959   .text:000000000000099c NUMBQ
       stm32eforth.s:1964   .text:00000000000009b0 $d
       stm32eforth.s:1965   .text:00000000000009b4 $t
       stm32eforth.s:1969   .text:00000000000009c8 $d
       stm32eforth.s:1970   .text:00000000000009cc $t
       stm32eforth.s:1972   .text:00000000000009d4 $d
       stm32eforth.s:1978   .text:00000000000009ec NUMQ1
       stm32eforth.s:1973   .text:00000000000009d8 $t
       stm32eforth.s:1981   .text:00000000000009f8 $d
       stm32eforth.s:1982   .text:00000000000009fc $t
       stm32eforth.s:1992   .text:0000000000000a24 $d
       stm32eforth.s:2030   .text:0000000000000ab0 NUMQ6
       stm32eforth.s:1993   .text:0000000000000a28 $t
       stm32eforth.s:1995   .text:0000000000000a30 NUMQ2
       stm32eforth.s:2003   .text:0000000000000a4c $d
       stm32eforth.s:2022   .text:0000000000000a94 NUMQ4
       stm32eforth.s:2004   .text:0000000000000a50 $t
       stm32eforth.s:2012   .text:0000000000000a70 $d
       stm32eforth.s:2013   .text:0000000000000a74 $t
       stm32eforth.s:2017   .text:0000000000000a84 $d
       stm32eforth.s:2019   .text:0000000000000a8c NUMQ3
       stm32eforth.s:2018   .text:0000000000000a88 $t
       stm32eforth.s:2028   .text:0000000000000aac NUMQ5
       stm32eforth.s:2027   .text:0000000000000aa8 $d
       stm32eforth.s:2029   .text:0000000000000aac $t
       stm32eforth.s:1959   .inflash.dictinary:0000000000000670 LF_KEY
       stm32eforth.s:1959   .inflash.dictinary:0000000000000674 _KEY
       stm32eforth.s:2043   .inflash.dictinary:0000000000000678 CA_KEY
       stm32eforth.s:2045   .text:0000000000000acc KEY1
       stm32eforth.s:2048   .text:0000000000000ad4 $d
       stm32eforth.s:2049   .text:0000000000000ad8 $t
       stm32eforth.s:2043   .inflash.dictinary:000000000000067c LF_SPACE
       stm32eforth.s:2043   .inflash.dictinary:0000000000000680 _SPACE
       stm32eforth.s:2053   .inflash.dictinary:0000000000000688 CA_SPACE
       stm32eforth.s:2053   .text:0000000000000adc SPACE
       stm32eforth.s:2053   .inflash.dictinary:000000000000068c LF_SPACS
       stm32eforth.s:2053   .inflash.dictinary:0000000000000690 _SPACS
       stm32eforth.s:2061   .inflash.dictinary:0000000000000698 CA_SPACS
       stm32eforth.s:2061   .text:0000000000000aec SPACS
       stm32eforth.s:2063   .text:0000000000000af4 $d
       stm32eforth.s:2064   .text:0000000000000af8 $t
       stm32eforth.s:2069   .text:0000000000000b08 CHAR2
       stm32eforth.s:2067   .text:0000000000000b04 CHAR1
       stm32eforth.s:2071   .text:0000000000000b0c $d
       stm32eforth.s:2072   .text:0000000000000b10 $t
       stm32eforth.s:2061   .inflash.dictinary:000000000000069c LF_TYPEE
       stm32eforth.s:2061   .inflash.dictinary:00000000000006a0 _TYPEE
       stm32eforth.s:2076   .inflash.dictinary:00000000000006a8 CA_TYPEE
       stm32eforth.s:2076   .text:0000000000000b14 TYPEE
ARM GAS  stm32eforth.s 			page 98


       stm32eforth.s:2084   .text:0000000000000b2c TYPE2
       stm32eforth.s:2080   .text:0000000000000b20 TYPE1
       stm32eforth.s:2086   .text:0000000000000b30 $d
       stm32eforth.s:2087   .text:0000000000000b34 $t
       stm32eforth.s:2076   .inflash.dictinary:00000000000006ac LF_CR
       stm32eforth.s:2076   .inflash.dictinary:00000000000006b0 _CR
       stm32eforth.s:2092   .inflash.dictinary:00000000000006b4 CA_CR
       stm32eforth.s:2092   .text:0000000000000b3c CR
       stm32eforth.s:2094   .text:0000000000000b44 $d
       stm32eforth.s:2095   .text:0000000000000b48 $t
       stm32eforth.s:2096   .text:0000000000000b50 $d
       stm32eforth.s:2097   .text:0000000000000b54 $t
       stm32eforth.s:2108   .text:0000000000000b5c DOSTR
       stm32eforth.s:2131   .text:0000000000000b90 STRQP
       stm32eforth.s:2143   .text:0000000000000b9c DOTST
       stm32eforth.s:2156   .text:0000000000000bac DOTQP
       stm32eforth.s:2092   .inflash.dictinary:00000000000006b8 LF_DOTR
       stm32eforth.s:2092   .inflash.dictinary:00000000000006bc _DOTR
       stm32eforth.s:2164   .inflash.dictinary:00000000000006c0 CA_DOTR
       stm32eforth.s:2164   .text:0000000000000bbc DOTR
       stm32eforth.s:2164   .inflash.dictinary:00000000000006c4 LF_UDOTR
       stm32eforth.s:2164   .inflash.dictinary:00000000000006c8 _UDOTR
       stm32eforth.s:2177   .inflash.dictinary:00000000000006cc CA_UDOTR
       stm32eforth.s:2177   .text:0000000000000be0 UDOTR
       stm32eforth.s:2177   .inflash.dictinary:00000000000006d0 LF_UDOT
       stm32eforth.s:2177   .inflash.dictinary:00000000000006d4 _UDOT
       stm32eforth.s:2192   .inflash.dictinary:00000000000006d8 CA_UDOT
       stm32eforth.s:2192   .text:0000000000000c0c UDOT
       stm32eforth.s:2192   .inflash.dictinary:00000000000006dc LF_HDOT
       stm32eforth.s:2192   .inflash.dictinary:00000000000006e0 _HDOT
       stm32eforth.s:2203   .inflash.dictinary:00000000000006e4 CA_HDOT
       stm32eforth.s:2203   .text:0000000000000c28 HDOT
       stm32eforth.s:2203   .inflash.dictinary:00000000000006e8 LF_DOT
       stm32eforth.s:2203   .inflash.dictinary:00000000000006ec _DOT
       stm32eforth.s:2218   .inflash.dictinary:00000000000006f0 CA_DOT
       stm32eforth.s:2218   .text:0000000000000c50 DOT
       stm32eforth.s:2222   .text:0000000000000c60 $d
       stm32eforth.s:2223   .text:0000000000000c64 $t
       stm32eforth.s:2225   .text:0000000000000c6c $d
       stm32eforth.s:2228   .text:0000000000000c78 DOT1
       stm32eforth.s:2226   .text:0000000000000c70 $t
       stm32eforth.s:2218   .inflash.dictinary:00000000000006f4 LF_QUEST
       stm32eforth.s:2218   .inflash.dictinary:00000000000006f8 _QUEST
       stm32eforth.s:2236   .inflash.dictinary:00000000000006fc CA_QUEST
       stm32eforth.s:2236   .text:0000000000000c88 QUEST
       stm32eforth.s:2252   .text:0000000000000c98 PARS
       stm32eforth.s:2260   .text:0000000000000cb4 $d
       stm32eforth.s:2327   .text:0000000000000da6 PARS8
       stm32eforth.s:2261   .text:0000000000000cb8 $t
       stm32eforth.s:2267   .text:0000000000000cd0 $d
       stm32eforth.s:2288   .text:0000000000000d20 PARS3
       stm32eforth.s:2268   .text:0000000000000cd4 $t
       stm32eforth.s:2269   .text:0000000000000cd8 PARS1
       stm32eforth.s:2277   .text:0000000000000cf4 $d
       stm32eforth.s:2286   .text:0000000000000d1c PARS2
       stm32eforth.s:2278   .text:0000000000000cf8 $t
       stm32eforth.s:2280   .text:0000000000000d00 $d
ARM GAS  stm32eforth.s 			page 99


       stm32eforth.s:2281   .text:0000000000000d04 $t
       stm32eforth.s:2283   .text:0000000000000d10 $d
       stm32eforth.s:2284   .text:0000000000000d14 $t
       stm32eforth.s:2292   .text:0000000000000d2c PARS4
       stm32eforth.s:2303   .text:0000000000000d54 $d
       stm32eforth.s:2305   .text:0000000000000d5c PARS5
       stm32eforth.s:2304   .text:0000000000000d58 $t
       stm32eforth.s:2307   .text:0000000000000d60 $d
       stm32eforth.s:2314   .text:0000000000000d7a PARS6
       stm32eforth.s:2308   .text:0000000000000d64 $t
       stm32eforth.s:2310   .text:0000000000000d6c $d
       stm32eforth.s:2311   .text:0000000000000d70 $t
       stm32eforth.s:2320   .text:0000000000000d8e PARS7
       stm32eforth.s:2236   .inflash.dictinary:0000000000000700 LF_PARSE
       stm32eforth.s:2236   .inflash.dictinary:0000000000000704 _PARSE
       stm32eforth.s:2335   .inflash.dictinary:000000000000070c CA_PARSE
       stm32eforth.s:2335   .text:0000000000000db8 PARSE
       stm32eforth.s:2335   .inflash.dictinary:0000000000000710 LF_DOTPR
       stm32eforth.s:2335   .inflash.dictinary:0000000000000714 _DOTPR
       stm32eforth.s:2355   .inflash.dictinary:0000000000000718 CA_DOTPR
       stm32eforth.s:2355   .text:0000000000000df8 DOTPR
       stm32eforth.s:2357   .text:0000000000000e00 $d
       stm32eforth.s:2358   .text:0000000000000e04 $t
       stm32eforth.s:2355   .inflash.dictinary:000000000000071c LF_PAREN
       stm32eforth.s:2355   .inflash.dictinary:0000000000000720 _PAREN
       stm32eforth.s:2364   .inflash.dictinary:0000000000000724 CA_PAREN
       stm32eforth.s:2364   .text:0000000000000e10 PAREN
       stm32eforth.s:2366   .text:0000000000000e18 $d
       stm32eforth.s:2367   .text:0000000000000e1c $t
       stm32eforth.s:2364   .inflash.dictinary:0000000000000728 LF_BKSLA
       stm32eforth.s:2364   .inflash.dictinary:000000000000072c _BKSLA
       stm32eforth.s:2373   .inflash.dictinary:0000000000000730 CA_BKSLA
       stm32eforth.s:2373   .text:0000000000000e28 BKSLA
       stm32eforth.s:2373   .inflash.dictinary:0000000000000734 LF_CAHR
       stm32eforth.s:2373   .inflash.dictinary:0000000000000738 _CAHR
       stm32eforth.s:2383   .inflash.dictinary:0000000000000740 CA_CAHR
       stm32eforth.s:2383   .text:0000000000000e40 CAHR
       stm32eforth.s:2383   .inflash.dictinary:0000000000000744 LF_WORDD
       stm32eforth.s:2383   .inflash.dictinary:0000000000000748 _WORDD
       stm32eforth.s:2393   .inflash.dictinary:0000000000000750 CA_WORDD
       stm32eforth.s:2393   .text:0000000000000e58 WORDD
       stm32eforth.s:2393   .inflash.dictinary:0000000000000754 LF_TOKEN
       stm32eforth.s:2393   .inflash.dictinary:0000000000000758 _TOKEN
       stm32eforth.s:2403   .inflash.dictinary:0000000000000760 CA_TOKEN
       stm32eforth.s:2403   .text:0000000000000e70 TOKEN
       stm32eforth.s:2403   .inflash.dictinary:0000000000000764 LF_TOCFA
       stm32eforth.s:2403   .inflash.dictinary:0000000000000768 _TOCFA
       stm32eforth.s:2414   .inflash.dictinary:0000000000000770 CA_TOCFA
       stm32eforth.s:2414   .text:0000000000000e80 TOCFA
       stm32eforth.s:2417   .text:0000000000000e8c $d
       stm32eforth.s:2418   .text:0000000000000e90 $t
       stm32eforth.s:2414   .inflash.dictinary:0000000000000774 LF_NAMET
       stm32eforth.s:2414   .inflash.dictinary:0000000000000778 _NAMET
       stm32eforth.s:2425   .inflash.dictinary:0000000000000780 CA_NAMET
       stm32eforth.s:2425   .text:0000000000000ea0 NAMET
       stm32eforth.s:2425   .inflash.dictinary:0000000000000784 LF_SAMEQ
       stm32eforth.s:2425   .inflash.dictinary:0000000000000788 _SAMEQ
ARM GAS  stm32eforth.s 			page 100


       stm32eforth.s:2439   .inflash.dictinary:0000000000000790 CA_SAMEQ
       stm32eforth.s:2439   .text:0000000000000eb0 SAMEQ
       stm32eforth.s:2459   .text:0000000000000ef8 SAME2
       stm32eforth.s:2443   .text:0000000000000ebc SAME1
       stm32eforth.s:2455   .text:0000000000000ee8 $d
       stm32eforth.s:2456   .text:0000000000000eec $t
       stm32eforth.s:2461   .text:0000000000000efc $d
       stm32eforth.s:2462   .text:0000000000000f00 $t
       stm32eforth.s:2462   .text:0000000000000f04 $d
       stm32eforth.s:2463   .text:0000000000000f08 $t
       stm32eforth.s:2475   .text:0000000000000f0c FIND
       stm32eforth.s:2484   .text:0000000000000f2c FIND1
       stm32eforth.s:2487   .text:0000000000000f34 $d
       stm32eforth.s:2506   .text:0000000000000f7c FIND6
       stm32eforth.s:2488   .text:0000000000000f38 $t
       stm32eforth.s:2490   .text:0000000000000f44 $d
       stm32eforth.s:2491   .text:0000000000000f48 $t
       stm32eforth.s:2495   .text:0000000000000f58 $d
       stm32eforth.s:2499   .text:0000000000000f68 FIND2
       stm32eforth.s:2496   .text:0000000000000f5c $t
       stm32eforth.s:2504   .text:0000000000000f78 FIND3
       stm32eforth.s:2513   .text:0000000000000f94 FIND4
       stm32eforth.s:2515   .text:0000000000000f98 $d
       stm32eforth.s:2520   .text:0000000000000fac FIND5
       stm32eforth.s:2516   .text:0000000000000f9c $t
       stm32eforth.s:2439   .inflash.dictinary:0000000000000794 LF_NAMEQ
       stm32eforth.s:2439   .inflash.dictinary:0000000000000798 _NAMEQ
       stm32eforth.s:2533   .inflash.dictinary:00000000000007a0 CA_NAMEQ
       stm32eforth.s:2533   .text:0000000000000fd0 NAMEQ
       stm32eforth.s:2550   .text:0000000000000fe4 BKSP
       stm32eforth.s:2559   .text:0000000000001004 $d
       stm32eforth.s:2570   .text:000000000000102c BACK1
       stm32eforth.s:2560   .text:0000000000001008 $t
       stm32eforth.s:2560   .text:000000000000100c $d
       stm32eforth.s:2561   .text:0000000000001010 $t
       stm32eforth.s:2567   .text:0000000000001024 $d
       stm32eforth.s:2568   .text:0000000000001028 $t
       stm32eforth.s:2580   .text:0000000000001030 TAP
       stm32eforth.s:2597   .text:000000000000104c KTAP
       stm32eforth.s:2598   .text:000000000000104c TTAP
       stm32eforth.s:2601   .text:0000000000001058 $d
       stm32eforth.s:2602   .text:000000000000105c $t
       stm32eforth.s:2604   .text:0000000000001064 $d
       stm32eforth.s:2616   .text:0000000000001094 KTAP2
       stm32eforth.s:2605   .text:0000000000001068 $t
       stm32eforth.s:2605   .text:000000000000106c $d
       stm32eforth.s:2606   .text:0000000000001070 $t
       stm32eforth.s:2608   .text:0000000000001078 $d
       stm32eforth.s:2613   .text:000000000000108c KTAP1
       stm32eforth.s:2609   .text:000000000000107c $t
       stm32eforth.s:2612   .text:0000000000001088 $d
       stm32eforth.s:2614   .text:000000000000108c $t
       stm32eforth.s:2533   .inflash.dictinary:00000000000007a4 LF_ACCEP
       stm32eforth.s:2533   .inflash.dictinary:00000000000007a8 _ACCEP
       stm32eforth.s:2625   .inflash.dictinary:00000000000007b0 CA_ACCEP
       stm32eforth.s:2625   .text:00000000000010a8 ACCEP
       stm32eforth.s:2630   .text:00000000000010b8 ACCP1
ARM GAS  stm32eforth.s 			page 101


       stm32eforth.s:2634   .text:00000000000010c4 $d
       stm32eforth.s:2649   .text:00000000000010f4 ACCP4
       stm32eforth.s:2635   .text:00000000000010c8 $t
       stm32eforth.s:2638   .text:00000000000010d8 $d
       stm32eforth.s:2639   .text:00000000000010dc $t
       stm32eforth.s:2641   .text:00000000000010e4 $d
       stm32eforth.s:2644   .text:00000000000010ee ACCP2
       stm32eforth.s:2642   .text:00000000000010e8 $t
       stm32eforth.s:2647   .text:00000000000010f2 ACCP3
       stm32eforth.s:2625   .inflash.dictinary:00000000000007b4 LF_QUERY
       stm32eforth.s:2625   .inflash.dictinary:00000000000007b8 _QUERY
       stm32eforth.s:2657   .inflash.dictinary:00000000000007c0 CA_QUERY
       stm32eforth.s:2657   .text:0000000000001104 QUERY
       stm32eforth.s:2660   .text:0000000000001110 $d
       stm32eforth.s:2661   .text:0000000000001114 $t
       stm32eforth.s:2665   .text:0000000000001128 $d
       stm32eforth.s:2666   .text:000000000000112c $t
       stm32eforth.s:2657   .inflash.dictinary:00000000000007c4 LF_ABORT
       stm32eforth.s:2657   .inflash.dictinary:00000000000007c8 _ABORT
       stm32eforth.s:2675   .inflash.dictinary:00000000000007d0 CA_ABORT
       stm32eforth.s:2675   .text:0000000000001138 ABORT
       stm32eforth.s:2678   .text:0000000000001140 ABORT1
       stm32eforth.s:2681   .text:000000000000114c $d
       stm32eforth.s:2682   .text:0000000000001150 $t
       stm32eforth.s:2792   .text:0000000000001270 PRESE
       stm32eforth.s:2800   .text:0000000000001284 QUIT
       stm32eforth.s:2694   .text:0000000000001160 ABORQ
       stm32eforth.s:2699   .text:0000000000001170 $d
       stm32eforth.s:2700   .text:0000000000001174 $t
       stm32eforth.s:2675   .inflash.dictinary:00000000000007d4 LF_INTER
       stm32eforth.s:2675   .inflash.dictinary:00000000000007d8 _INTER
       stm32eforth.s:2710   .inflash.dictinary:00000000000007e4 CA_INTER
       stm32eforth.s:2715   .text:0000000000001190 $d
       stm32eforth.s:2725   .text:00000000000011c0 INTE1
       stm32eforth.s:2716   .text:0000000000001194 $t
       stm32eforth.s:2717   .text:000000000000119c $d
       stm32eforth.s:2718   .text:00000000000011a0 $t
       stm32eforth.s:2720   .text:00000000000011a8 $d
       stm32eforth.s:2722   .text:00000000000011b6 $t
       stm32eforth.s:2728   .text:00000000000011c8 $d
       stm32eforth.s:2730   .text:00000000000011d0 INTE2
       stm32eforth.s:2729   .text:00000000000011cc $t
       stm32eforth.s:2710   .inflash.dictinary:00000000000007e8 LF_LBRAC
       stm32eforth.s:2710   .inflash.dictinary:00000000000007ec _LBRAC
       stm32eforth.s:2735   .inflash.dictinary:00000000000007f0 CA_LBRAC
       stm32eforth.s:2735   .text:00000000000011d4 LBRAC
       stm32eforth.s:2737   .text:00000000000011dc $d
       stm32eforth.s:2738   .text:00000000000011e0 $t
       stm32eforth.s:2735   .inflash.dictinary:00000000000007f4 LF_DOTOK
       stm32eforth.s:2735   .inflash.dictinary:00000000000007f8 _DOTOK
       stm32eforth.s:2744   .inflash.dictinary:00000000000007fc CA_DOTOK
       stm32eforth.s:2744   .text:00000000000011ec DOTOK
       stm32eforth.s:2746   .text:00000000000011f4 $d
       stm32eforth.s:2747   .text:00000000000011f8 $t
       stm32eforth.s:2751   .text:0000000000001208 $d
       stm32eforth.s:2755   .text:0000000000001214 DOTO1
       stm32eforth.s:2752   .text:000000000000120c $t
ARM GAS  stm32eforth.s 			page 102


       stm32eforth.s:2753   .text:0000000000001210 $d
       stm32eforth.s:2756   .text:0000000000001214 $t
       stm32eforth.s:2744   .inflash.dictinary:0000000000000800 LF_QSTAC
       stm32eforth.s:2744   .inflash.dictinary:0000000000000804 _QSTAC
       stm32eforth.s:2761   .inflash.dictinary:000000000000080c CA_QSTAC
       stm32eforth.s:2761   .text:000000000000121c QSTAC
       stm32eforth.s:2766   .text:000000000000122c $d
       stm32eforth.s:2761   .inflash.dictinary:0000000000000810 LF_EVAL
       stm32eforth.s:2761   .inflash.dictinary:0000000000000814 _EVAL
       stm32eforth.s:2773   .inflash.dictinary:000000000000081c CA_EVAL
       stm32eforth.s:2773   .text:000000000000123c EVAL
       stm32eforth.s:2775   .text:0000000000001240 EVAL1
       stm32eforth.s:2780   .text:0000000000001250 $d
       stm32eforth.s:2785   .text:0000000000001264 EVAL2
       stm32eforth.s:2781   .text:0000000000001254 $t
       stm32eforth.s:2773   .inflash.dictinary:0000000000000820 LF_PRESE
       stm32eforth.s:2773   .inflash.dictinary:0000000000000824 _PRESE
       stm32eforth.s:2792   .inflash.dictinary:000000000000082c CA_PRESE
       stm32eforth.s:2792   .inflash.dictinary:0000000000000830 LF_QUIT
       stm32eforth.s:2792   .inflash.dictinary:0000000000000834 _QUIT
       stm32eforth.s:2800   .inflash.dictinary:000000000000083c CA_QUIT
       stm32eforth.s:2803   .text:0000000000001290 QUIT1
       stm32eforth.s:2805   .text:0000000000001294 QUIT2
       stm32eforth.s:2809   .text:00000000000012a0 $d
       stm32eforth.s:2800   .inflash.dictinary:0000000000000840 LF_UNLOCK
       stm32eforth.s:2800   .inflash.dictinary:0000000000000844 _UNLOCK
       stm32eforth.s:2817   .inflash.dictinary:000000000000084c CA_UNLOCK
       stm32eforth.s:2817   .text:00000000000012a4 UNLOCK
       stm32eforth.s:2817   .text:00000000000012a4 $t
       stm32eforth.s:2820   .text:00000000000012ac $d
       stm32eforth.s:2833   .text:00000000000012cc LOCK
       stm32eforth.s:3063   .text:000000000000156c flash_regs
       stm32eforth.s:2821   .text:00000000000012b0 $t
       stm32eforth.s:2839   .text:00000000000012d8 WAIT_BSY
       stm32eforth.s:2841   .text:00000000000012da WAIT1
       stm32eforth.s:2848   .text:00000000000012e4 FLASH_ERR_CHECK
       stm32eforth.s:2853   .text:00000000000012f2 $d
       stm32eforth.s:2855   .text:0000000000001312 $t
       stm32eforth.s:2817   .inflash.dictinary:0000000000000850 LF_ESECTOR
       stm32eforth.s:2817   .inflash.dictinary:0000000000000854 _ESECTOR
       stm32eforth.s:2861   .inflash.dictinary:0000000000000864 CA_ESECTOR
       stm32eforth.s:2861   .text:0000000000001318 ESECTOR
       stm32eforth.s:2864   .text:0000000000001324 $d
       stm32eforth.s:2865   .text:0000000000001328 $t
       stm32eforth.s:2861   .inflash.dictinary:0000000000000868 LF_ISTOR
       stm32eforth.s:2861   .inflash.dictinary:000000000000086c _ISTOR
       stm32eforth.s:2881   .inflash.dictinary:0000000000000870 CA_ISTOR
       stm32eforth.s:2881   .text:0000000000001350 ISTOR
       stm32eforth.s:2884   .text:000000000000135c $d
       stm32eforth.s:2885   .text:0000000000001360 $t
       stm32eforth.s:2894   .text:0000000000001380 $d
       stm32eforth.s:2895   .text:0000000000001384 $t
       stm32eforth.s:2881   .inflash.dictinary:0000000000000874 LF_IMG_SIZE
       stm32eforth.s:2881   .inflash.dictinary:0000000000000878 _IMG_SIZE
       stm32eforth.s:2903   .inflash.dictinary:0000000000000884 CA_IMG_SIZE
       stm32eforth.s:2903   .text:0000000000001390 IMG_SIZE
       stm32eforth.s:2905   .text:0000000000001398 $d
ARM GAS  stm32eforth.s 			page 103


       stm32eforth.s:2906   .text:000000000000139c $t
       stm32eforth.s:2910   .text:00000000000013b0 $d
       stm32eforth.s:2911   .text:00000000000013b4 $t
       stm32eforth.s:2914   .text:00000000000013c0 $d
       stm32eforth.s:2915   .text:00000000000013c4 $t
       stm32eforth.s:2903   .inflash.dictinary:0000000000000888 LF_IMGQ
       stm32eforth.s:2903   .inflash.dictinary:000000000000088c _IMGQ
       stm32eforth.s:2921   .inflash.dictinary:0000000000000894 CA_IMGQ
       stm32eforth.s:2921   .text:00000000000013cc IMGQ
       stm32eforth.s:2921   .inflash.dictinary:0000000000000898 LF_LOAD_IMG
       stm32eforth.s:2921   .inflash.dictinary:000000000000089c _LOAD_IMG
       stm32eforth.s:2938   .inflash.dictinary:00000000000008a8 CA_LOAD_IMG
       stm32eforth.s:2938   .text:00000000000013ec LOAD_IMG
       stm32eforth.s:2942   .text:00000000000013f8 $d
       stm32eforth.s:2944   .text:00000000000013fc $t
       stm32eforth.s:2938   .inflash.dictinary:00000000000008ac LF_FLSH_WR
       stm32eforth.s:2938   .inflash.dictinary:00000000000008b0 _FLSH_WR
       stm32eforth.s:2966   .inflash.dictinary:00000000000008b8 CA_FLSH_WR
       stm32eforth.s:2966   .text:0000000000001444 FLSH_WR
       stm32eforth.s:2970   .text:0000000000001450 $d
       stm32eforth.s:2972   .text:0000000000001454 $t
       stm32eforth.s:2981   .text:0000000000001478 $d
       stm32eforth.s:2982   .text:000000000000147c $t
       stm32eforth.s:2966   .inflash.dictinary:00000000000008bc LF_ERASE_IMG
       stm32eforth.s:2966   .inflash.dictinary:00000000000008c0 _ERASE_IMG
       stm32eforth.s:2990   .inflash.dictinary:00000000000008cc CA_ERASE_IMG
       stm32eforth.s:2990   .text:000000000000148c ERASE_IMG
       stm32eforth.s:2992   .text:0000000000001494 $d
       stm32eforth.s:2993   .text:0000000000001498 $t
       stm32eforth.s:2990   .inflash.dictinary:00000000000008d0 LF_SAVE_IMG
       stm32eforth.s:2990   .inflash.dictinary:00000000000008d4 _SAVE_IMG
       stm32eforth.s:2998   .inflash.dictinary:00000000000008e0 CA_SAVE_IMG
       stm32eforth.s:2998   .text:00000000000014a0 SAVE_IMG
       stm32eforth.s:3004   .text:00000000000014b4 $d
       stm32eforth.s:3005   .text:00000000000014b8 $t
       stm32eforth.s:3008   .text:00000000000014c4 $d
       stm32eforth.s:3010   .text:00000000000014c8 $t
       stm32eforth.s:2998   .inflash.dictinary:00000000000008e4 LF_TURNKEY
       stm32eforth.s:2998   .inflash.dictinary:00000000000008e8 _TURNKEY
       stm32eforth.s:3032   .inflash.dictinary:00000000000008f0 CA_TURNKEY
       stm32eforth.s:3032   .text:0000000000001504 TURNKEY
       stm32eforth.s:3076   .text:0000000000001580 TICK
       stm32eforth.s:3032   .inflash.dictinary:00000000000008f4 LF_FORGET
       stm32eforth.s:3032   .inflash.dictinary:00000000000008f8 _FORGET
       stm32eforth.s:3042   .inflash.dictinary:0000000000000900 CA_FORGET
       stm32eforth.s:3042   .text:000000000000151c FORGET
       stm32eforth.s:3047   .text:0000000000001530 $d
       stm32eforth.s:3048   .text:0000000000001534 $t
       stm32eforth.s:3051   .text:0000000000001540 $d
       stm32eforth.s:3052   .text:0000000000001544 $t
       stm32eforth.s:3402   .text:00000000000018ac OVERT
       stm32eforth.s:3064   .text:000000000000156c $d
       stm32eforth.s:3042   .inflash.dictinary:0000000000000904 LF_TICK
       stm32eforth.s:3042   .inflash.dictinary:0000000000000908 _TICK
       stm32eforth.s:3076   .inflash.dictinary:000000000000090c CA_TICK
       stm32eforth.s:3076   .text:0000000000001580 $t
       stm32eforth.s:3081   .text:0000000000001590 $d
ARM GAS  stm32eforth.s 			page 104


       stm32eforth.s:3083   .text:0000000000001598 TICK1
       stm32eforth.s:3082   .text:0000000000001594 $t
       stm32eforth.s:3076   .inflash.dictinary:0000000000000910 LF_ALLOT
       stm32eforth.s:3076   .inflash.dictinary:0000000000000914 _ALLOT
       stm32eforth.s:3087   .inflash.dictinary:000000000000091c CA_ALLOT
       stm32eforth.s:3087   .text:000000000000159c ALLOT
       stm32eforth.s:3087   .inflash.dictinary:0000000000000920 LF_COMMA
       stm32eforth.s:3087   .inflash.dictinary:0000000000000924 _COMMA
       stm32eforth.s:3095   .inflash.dictinary:0000000000000928 CA_COMMA
       stm32eforth.s:3095   .text:00000000000015ac COMMA
       stm32eforth.s:3095   .inflash.dictinary:000000000000092c LF_BCOMP
       stm32eforth.s:3095   .inflash.dictinary:0000000000000930 _BCOMP
       stm32eforth.s:3107   .inflash.dictinary:000000000000093c CA_BCOMP
       stm32eforth.s:3107   .text:00000000000015cc BCOMP
       stm32eforth.s:3107   .inflash.dictinary:0000000000000940 LF_COMPI
       stm32eforth.s:3107   .inflash.dictinary:0000000000000944 _COMPI
       stm32eforth.s:3115   .inflash.dictinary:000000000000094c CA_COMPI
       stm32eforth.s:3115   .text:00000000000015dc COMPI
       stm32eforth.s:3457   .text:000000000000193a CALLC
       stm32eforth.s:3115   .inflash.dictinary:0000000000000950 LF_LITER
       stm32eforth.s:3115   .inflash.dictinary:0000000000000954 _LITER
       stm32eforth.s:3129   .inflash.dictinary:000000000000095c CA_LITER
       stm32eforth.s:3129   .text:0000000000001604 LITER
       stm32eforth.s:3130   .text:0000000000001604 $d
       stm32eforth.s:3131   .text:0000000000001608 $t
       stm32eforth.s:3133   .text:0000000000001610 $d
       stm32eforth.s:3134   .text:0000000000001614 $t
       stm32eforth.s:3144   .text:000000000000161c STRCQ
       stm32eforth.s:3146   .text:0000000000001624 $d
       stm32eforth.s:3147   .text:0000000000001628 $t
       stm32eforth.s:3149   .text:0000000000001634 $d
       stm32eforth.s:3150   .text:0000000000001638 $t
       stm32eforth.s:3129   .inflash.dictinary:0000000000000960 LF_FOR
       stm32eforth.s:3129   .inflash.dictinary:0000000000000964 _FOR
       stm32eforth.s:3163   .inflash.dictinary:0000000000000968 CA_FOR
       stm32eforth.s:3163   .text:0000000000001654 FOR
       stm32eforth.s:3166   .text:000000000000165c $d
       stm32eforth.s:3167   .text:0000000000001660 $t
       stm32eforth.s:3163   .inflash.dictinary:000000000000096c LF_BEGIN
       stm32eforth.s:3163   .inflash.dictinary:0000000000000970 _BEGIN
       stm32eforth.s:3172   .inflash.dictinary:0000000000000978 CA_BEGIN
       stm32eforth.s:3172   .text:0000000000001668 BEGIN
       stm32eforth.s:3172   .inflash.dictinary:000000000000097c LF_NEXT
       stm32eforth.s:3172   .inflash.dictinary:0000000000000980 _NEXT
       stm32eforth.s:3179   .inflash.dictinary:0000000000000988 CA_NEXT
       stm32eforth.s:3179   .text:0000000000001674 NEXT
       stm32eforth.s:3182   .text:000000000000167c $d
       stm32eforth.s:3183   .text:0000000000001680 $t
       stm32eforth.s:3179   .inflash.dictinary:000000000000098c LF_UNTIL
       stm32eforth.s:3179   .inflash.dictinary:0000000000000990 _UNTIL
       stm32eforth.s:3188   .inflash.dictinary:0000000000000998 CA_UNTIL
       stm32eforth.s:3188   .text:0000000000001688 UNTIL
       stm32eforth.s:3191   .text:0000000000001690 $d
       stm32eforth.s:3192   .text:0000000000001694 $t
       stm32eforth.s:3188   .inflash.dictinary:000000000000099c LF_AGAIN
       stm32eforth.s:3188   .inflash.dictinary:00000000000009a0 _AGAIN
       stm32eforth.s:3197   .inflash.dictinary:00000000000009a8 CA_AGAIN
ARM GAS  stm32eforth.s 			page 105


       stm32eforth.s:3197   .text:000000000000169c AGAIN
       stm32eforth.s:3200   .text:00000000000016a4 $d
       stm32eforth.s:3201   .text:00000000000016a8 $t
       stm32eforth.s:3197   .inflash.dictinary:00000000000009ac LF_IFF
       stm32eforth.s:3197   .inflash.dictinary:00000000000009b0 _IFF
       stm32eforth.s:3206   .inflash.dictinary:00000000000009b4 CA_IFF
       stm32eforth.s:3206   .text:00000000000016b0 IFF
       stm32eforth.s:3209   .text:00000000000016b8 $d
       stm32eforth.s:3210   .text:00000000000016bc $t
       stm32eforth.s:3211   .text:00000000000016c4 $d
       stm32eforth.s:3212   .text:00000000000016c8 $t
       stm32eforth.s:3206   .inflash.dictinary:00000000000009b8 LF_AHEAD
       stm32eforth.s:3206   .inflash.dictinary:00000000000009bc _AHEAD
       stm32eforth.s:3218   .inflash.dictinary:00000000000009c4 CA_AHEAD
       stm32eforth.s:3218   .text:00000000000016d4 AHEAD
       stm32eforth.s:3221   .text:00000000000016dc $d
       stm32eforth.s:3222   .text:00000000000016e0 $t
       stm32eforth.s:3223   .text:00000000000016e8 $d
       stm32eforth.s:3224   .text:00000000000016ec $t
       stm32eforth.s:3218   .inflash.dictinary:00000000000009c8 LF_REPEA
       stm32eforth.s:3218   .inflash.dictinary:00000000000009cc _REPEA
       stm32eforth.s:3230   .inflash.dictinary:00000000000009d4 CA_REPEA
       stm32eforth.s:3230   .text:00000000000016f8 REPEA
       stm32eforth.s:3230   .inflash.dictinary:00000000000009d8 LF_THENN
       stm32eforth.s:3230   .inflash.dictinary:00000000000009dc _THENN
       stm32eforth.s:3240   .inflash.dictinary:00000000000009e4 CA_THENN
       stm32eforth.s:3240   .text:0000000000001710 THENN
       stm32eforth.s:3240   .inflash.dictinary:00000000000009e8 LF_AFT
       stm32eforth.s:3240   .inflash.dictinary:00000000000009ec _AFT
       stm32eforth.s:3249   .inflash.dictinary:00000000000009f0 CA_AFT
       stm32eforth.s:3249   .text:0000000000001724 AFT
       stm32eforth.s:3249   .inflash.dictinary:00000000000009f4 LF_ELSEE
       stm32eforth.s:3249   .inflash.dictinary:00000000000009f8 _ELSEE
       stm32eforth.s:3259   .inflash.dictinary:0000000000000a00 CA_ELSEE
       stm32eforth.s:3259   .text:000000000000173c ELSEE
       stm32eforth.s:3259   .inflash.dictinary:0000000000000a04 LF_WHILE
       stm32eforth.s:3259   .inflash.dictinary:0000000000000a08 _WHILE
       stm32eforth.s:3268   .inflash.dictinary:0000000000000a10 CA_WHILE
       stm32eforth.s:3268   .text:0000000000001750 WHILE
       stm32eforth.s:3268   .inflash.dictinary:0000000000000a14 LF_ABRTQ
       stm32eforth.s:3268   .inflash.dictinary:0000000000000a18 _ABRTQ
       stm32eforth.s:3276   .inflash.dictinary:0000000000000a20 CA_ABRTQ
       stm32eforth.s:3276   .text:0000000000001760 ABRTQ
       stm32eforth.s:3279   .text:0000000000001768 $d
       stm32eforth.s:3280   .text:000000000000176c $t
       stm32eforth.s:3276   .inflash.dictinary:0000000000000a24 LF_STRQ
       stm32eforth.s:3276   .inflash.dictinary:0000000000000a28 _STRQ
       stm32eforth.s:3285   .inflash.dictinary:0000000000000a2c CA_STRQ
       stm32eforth.s:3285   .text:0000000000001774 STRQ
       stm32eforth.s:3288   .text:000000000000177c $d
       stm32eforth.s:3289   .text:0000000000001780 $t
       stm32eforth.s:3285   .inflash.dictinary:0000000000000a30 LF_DOTQ
       stm32eforth.s:3285   .inflash.dictinary:0000000000000a34 _DOTQ
       stm32eforth.s:3294   .inflash.dictinary:0000000000000a38 CA_DOTQ
       stm32eforth.s:3294   .text:0000000000001788 DOTQ
       stm32eforth.s:3297   .text:0000000000001790 $d
       stm32eforth.s:3298   .text:0000000000001794 $t
ARM GAS  stm32eforth.s 			page 106


       stm32eforth.s:3294   .inflash.dictinary:0000000000000a3c LF_UNIQU
       stm32eforth.s:3294   .inflash.dictinary:0000000000000a40 _UNIQU
       stm32eforth.s:3307   .inflash.dictinary:0000000000000a48 CA_UNIQU
       stm32eforth.s:3307   .text:000000000000179c UNIQU
       stm32eforth.s:3312   .text:00000000000017ac $d
       stm32eforth.s:3320   .text:00000000000017c8 UNIQ1
       stm32eforth.s:3313   .text:00000000000017b0 $t
       stm32eforth.s:3314   .text:00000000000017b4 $d
       stm32eforth.s:3316   .text:00000000000017bc $t
       stm32eforth.s:3331   .text:00000000000017d0 SNAME
       stm32eforth.s:3336   .text:00000000000017e0 $d
       stm32eforth.s:3350   .text:0000000000001818 SNAM1
       stm32eforth.s:3337   .text:00000000000017e4 $t
       stm32eforth.s:3352   .text:000000000000181c $d
       stm32eforth.s:3354   .text:0000000000001824 $t
       stm32eforth.s:3307   .inflash.dictinary:0000000000000a4c LF_SCOMP
       stm32eforth.s:3307   .inflash.dictinary:0000000000000a50 _SCOMP
       stm32eforth.s:3358   .inflash.dictinary:0000000000000a5c CA_SCOMP
       stm32eforth.s:3358   .text:0000000000001828 SCOMP
       stm32eforth.s:3363   .text:0000000000001838 $d
       stm32eforth.s:3374   .text:0000000000001864 SCOM2
       stm32eforth.s:3364   .text:000000000000183c $t
       stm32eforth.s:3365   .text:0000000000001844 $d
       stm32eforth.s:3366   .text:0000000000001848 $t
       stm32eforth.s:3368   .text:0000000000001850 $d
       stm32eforth.s:3371   .text:000000000000185c SCOM1
       stm32eforth.s:3369   .text:0000000000001854 $t
       stm32eforth.s:3377   .text:000000000000186c $d
       stm32eforth.s:3380   .text:0000000000001878 SCOM3
       stm32eforth.s:3378   .text:0000000000001870 $t
       stm32eforth.s:3387   .text:0000000000001880 COLON_ABORT
       stm32eforth.s:3358   .inflash.dictinary:0000000000000a60 LF_OVERT
       stm32eforth.s:3358   .inflash.dictinary:0000000000000a64 _OVERT
       stm32eforth.s:3402   .inflash.dictinary:0000000000000a6c CA_OVERT
       stm32eforth.s:3402   .inflash.dictinary:0000000000000a70 LF_SEMIS
       stm32eforth.s:3402   .inflash.dictinary:0000000000000a74 _SEMIS
       stm32eforth.s:3412   .inflash.dictinary:0000000000000a78 CA_SEMIS
       stm32eforth.s:3412   .text:00000000000018c4 SEMIS
       stm32eforth.s:3412   .inflash.dictinary:0000000000000a7c LF_RBRAC
       stm32eforth.s:3412   .inflash.dictinary:0000000000000a80 _RBRAC
       stm32eforth.s:3423   .inflash.dictinary:0000000000000a84 CA_RBRAC
       stm32eforth.s:3423   .text:00000000000018e0 RBRAC
       stm32eforth.s:3425   .text:00000000000018e8 $d
       stm32eforth.s:3426   .text:00000000000018ec $t
       stm32eforth.s:3434   .text:00000000000018f8 COMPILE_BLW
       stm32eforth.s:3423   .inflash.dictinary:0000000000000a88 LF_COLON
       stm32eforth.s:3423   .inflash.dictinary:0000000000000a8c _COLON
       stm32eforth.s:3470   .inflash.dictinary:0000000000000a90 CA_COLON
       stm32eforth.s:3470   .text:000000000000195c COLON
       stm32eforth.s:3525   .text:00000000000019d8 HEAD
       stm32eforth.s:3470   .inflash.dictinary:0000000000000a94 LF_IMMED
       stm32eforth.s:3470   .inflash.dictinary:0000000000000a98 _IMMED
       stm32eforth.s:3478   .inflash.dictinary:0000000000000aa4 CA_IMMED
       stm32eforth.s:3478   .text:000000000000196c IMMED
       stm32eforth.s:3480   .text:0000000000001974 $d
       stm32eforth.s:3481   .text:0000000000001978 $t
       stm32eforth.s:3478   .inflash.dictinary:0000000000000aa8 LF_ICOLON
ARM GAS  stm32eforth.s 			page 107


       stm32eforth.s:3478   .inflash.dictinary:0000000000000aac _ICOLON
       stm32eforth.s:3494   .inflash.dictinary:0000000000000ab0 CA_ICOLON
       stm32eforth.s:3494   .text:0000000000001998 ICOLON
       stm32eforth.s:3494   .inflash.dictinary:0000000000000ab4 LF_ISEMIS
       stm32eforth.s:3494   .inflash.dictinary:0000000000000ab8 _ISEMIS
       stm32eforth.s:3506   .inflash.dictinary:0000000000000abc CA_ISEMIS
       stm32eforth.s:3506   .text:00000000000019b4 ISEMIS
       stm32eforth.s:3506   .inflash.dictinary:0000000000000ac0 LF_HEAD
       stm32eforth.s:3506   .inflash.dictinary:0000000000000ac4 _HEAD
       stm32eforth.s:3525   .inflash.dictinary:0000000000000acc CA_HEAD
       stm32eforth.s:3525   .inflash.dictinary:0000000000000ad0 LF_CONST
       stm32eforth.s:3525   .inflash.dictinary:0000000000000ad4 _CONST
       stm32eforth.s:3539   .inflash.dictinary:0000000000000ae0 CA_CONST
       stm32eforth.s:3539   .text:0000000000001a00 CONST
       stm32eforth.s:3542   .text:0000000000001a0c $d
       stm32eforth.s:3543   .text:0000000000001a10 $t
       stm32eforth.s:3551   .text:0000000000001a20 DODOES
       stm32eforth.s:3562   .text:0000000000001a4c $d
       stm32eforth.s:3563   .text:0000000000001a50 $t
       stm32eforth.s:3539   .inflash.dictinary:0000000000000ae4 LF_DOES
       stm32eforth.s:3539   .inflash.dictinary:0000000000000ae8 _DOES
       stm32eforth.s:3580   .inflash.dictinary:0000000000000af0 CA_DOES
       stm32eforth.s:3580   .text:0000000000001a7c DOES
       stm32eforth.s:3582   .text:0000000000001a84 $d
       stm32eforth.s:3583   .text:0000000000001a88 $t
       stm32eforth.s:3580   .inflash.dictinary:0000000000000af4 LF_CREAT
       stm32eforth.s:3580   .inflash.dictinary:0000000000000af8 _CREAT
       stm32eforth.s:3595   .inflash.dictinary:0000000000000b00 CA_CREAT
       stm32eforth.s:3595   .text:0000000000001aa8 CREAT
       stm32eforth.s:3598   .text:0000000000001ab4 $d
       stm32eforth.s:3599   .text:0000000000001ab8 $t
       stm32eforth.s:3595   .inflash.dictinary:0000000000000b04 LF_VARIA
       stm32eforth.s:3595   .inflash.dictinary:0000000000000b08 _VARIA
       stm32eforth.s:3604   .inflash.dictinary:0000000000000b14 CA_VARIA
       stm32eforth.s:3604   .text:0000000000001ac0 VARIA
       stm32eforth.s:3607   .text:0000000000001acc $d
       stm32eforth.s:3608   .text:0000000000001ad0 $t
       stm32eforth.s:3604   .inflash.dictinary:0000000000000b18 LF_FCALL
       stm32eforth.s:3604   .inflash.dictinary:0000000000000b1c _FCALL
       stm32eforth.s:3615   .inflash.dictinary:0000000000000b24 CA_FCALL
       stm32eforth.s:3615   .text:0000000000001adc FCALL
       stm32eforth.s:3615   .inflash.dictinary:0000000000000b28 LF_DEFER
       stm32eforth.s:3615   .inflash.dictinary:0000000000000b2c _DEFER
       stm32eforth.s:3626   .inflash.dictinary:0000000000000b34 CA_DEFER
       stm32eforth.s:3626   .text:0000000000001af0 DEFER
       stm32eforth.s:3629   .text:0000000000001afc $d
       stm32eforth.s:3630   .text:0000000000001b00 $t
       stm32eforth.s:3626   .inflash.dictinary:0000000000000b38 LF_DEFERSTO
       stm32eforth.s:3626   .inflash.dictinary:0000000000000b3c _DEFERSTO
       stm32eforth.s:3639   .inflash.dictinary:0000000000000b44 CA_DEFERSTO
       stm32eforth.s:3639   .text:0000000000001b18 DEFERSTO
       stm32eforth.s:3639   .inflash.dictinary:0000000000000b48 LF_DEFERAT
       stm32eforth.s:3639   .inflash.dictinary:0000000000000b4c _DEFERAT
       stm32eforth.s:3655   .inflash.dictinary:0000000000000b54 CA_DEFERAT
       stm32eforth.s:3655   .text:0000000000001b48 DEFERAT
       stm32eforth.s:3662   .text:0000000000001b64 $d
       stm32eforth.s:3986   .inflash:000000000000065c BLADR
ARM GAS  stm32eforth.s 			page 108


       stm32eforth.s:3663   .text:0000000000001b68 $t
       stm32eforth.s:3664   .text:0000000000001b70 $d
       stm32eforth.s:3665   .text:0000000000001b74 $t
       stm32eforth.s:3683   .inflash:00000000000002bc DMP
       stm32eforth.s:3684   .inflash:00000000000002bc $t
       stm32eforth.s:3686   .inflash:00000000000002c8 $d
       stm32eforth.s:3687   .inflash:00000000000002cc $t
       stm32eforth.s:3697   .inflash:00000000000002f4 PDUM2
       stm32eforth.s:3691   .inflash:00000000000002dc PDUM1
       stm32eforth.s:3694   .inflash:00000000000002e8 $d
       stm32eforth.s:3695   .inflash:00000000000002ec $t
       stm32eforth.s:3699   .inflash:00000000000002f8 $d
       stm32eforth.s:3700   .inflash:00000000000002fc $t
       stm32eforth.s:3655   .inflash.dictinary:0000000000000b58 LF_DUMP
       stm32eforth.s:3655   .inflash.dictinary:0000000000000b5c _DUMP
       stm32eforth.s:3705   .inflash.dictinary:0000000000000b64 CA_DUMP
       stm32eforth.s:3705   .text:0000000000001b84 DUMP
       stm32eforth.s:3705   .text:0000000000001b88 $d
       stm32eforth.s:3705   .inflash:0000000000000300 FL_DUMP
       stm32eforth.s:3705   .text:0000000000001b8c $t
       stm32eforth.s:3711   .inflash:0000000000000318 $d
       stm32eforth.s:3712   .inflash:000000000000031c $t
       stm32eforth.s:3725   .inflash:0000000000000350 DUMP4
       stm32eforth.s:3715   .inflash:0000000000000328 DUMP1
       stm32eforth.s:3717   .inflash:0000000000000330 $d
       stm32eforth.s:3718   .inflash:0000000000000334 $t
       stm32eforth.s:3727   .inflash:0000000000000354 $d
       stm32eforth.s:3728   .inflash:0000000000000358 DUMP3
       stm32eforth.s:3729   .inflash:0000000000000358 $t
       stm32eforth.s:3705   .inflash.dictinary:0000000000000b68 LF_DOTS
       stm32eforth.s:3705   .inflash.dictinary:0000000000000b6c _DOTS
       stm32eforth.s:3737   .inflash.dictinary:0000000000000b70 CA_DOTS
       stm32eforth.s:3737   .text:0000000000001b98 DOTS
       stm32eforth.s:3737   .text:0000000000001b9c $d
       stm32eforth.s:3737   .inflash:000000000000036c FL_DOTS
       stm32eforth.s:3737   .text:0000000000001ba0 $t
       stm32eforth.s:3747   .inflash:000000000000038c DOTS2
       stm32eforth.s:3743   .inflash:0000000000000380 DOTS1
       stm32eforth.s:3749   .inflash:0000000000000390 $d
       stm32eforth.s:3750   .inflash:0000000000000394 $t
       stm32eforth.s:3737   .inflash.dictinary:0000000000000b74 LF_TNAME
       stm32eforth.s:3737   .inflash.dictinary:0000000000000b78 _TNAME
       stm32eforth.s:3755   .inflash.dictinary:0000000000000b80 CA_TNAME
       stm32eforth.s:3755   .text:0000000000001bac TNAME
       stm32eforth.s:3755   .text:0000000000001bb0 $d
       stm32eforth.s:3755   .inflash:000000000000039c FL_TNAME
       stm32eforth.s:3755   .text:0000000000001bb4 $t
       stm32eforth.s:3760   .inflash:00000000000003ac TNAM1
       stm32eforth.s:3763   .inflash:00000000000003b4 $d
       stm32eforth.s:3775   .inflash:00000000000003e8 TNAM2
       stm32eforth.s:3764   .inflash:00000000000003b8 $t
       stm32eforth.s:3768   .inflash:00000000000003cc $d
       stm32eforth.s:3769   .inflash:00000000000003d0 $t
       stm32eforth.s:3771   .inflash:00000000000003d8 $d
       stm32eforth.s:3772   .inflash:00000000000003dc $t
       stm32eforth.s:3755   .inflash.dictinary:0000000000000b84 LF_DOTID
       stm32eforth.s:3755   .inflash.dictinary:0000000000000b88 _DOTID
ARM GAS  stm32eforth.s 			page 109


       stm32eforth.s:3782   .inflash.dictinary:0000000000000b8c CA_DOTID
       stm32eforth.s:3782   .text:0000000000001bc0 DOTID
       stm32eforth.s:3782   .text:0000000000001bc4 $d
       stm32eforth.s:3782   .inflash:00000000000003f4 FL_DOTID
       stm32eforth.s:3782   .text:0000000000001bc8 $t
       stm32eforth.s:3786   .inflash:0000000000000400 $d
       stm32eforth.s:3792   .inflash:000000000000041c DOTI1
       stm32eforth.s:3787   .inflash:0000000000000404 $t
       stm32eforth.s:3788   .inflash:000000000000040c $d
       stm32eforth.s:3789   .inflash:0000000000000410 $t
       stm32eforth.s:3794   .inflash:0000000000000420 $d
       stm32eforth.s:3796   .inflash:000000000000042a $t
       stm32eforth.s:3799   *ABS*:0000000000000001 WANT_SEE
       stm32eforth.s:3807   .inflash:0000000000000430 DOTCA
       stm32eforth.s:3811   .inflash:0000000000000440 $d
       stm32eforth.s:3812   .inflash:0000000000000444 $t
       stm32eforth.s:3818   .inflash:000000000000044c CODE_ABORT
       stm32eforth.s:3827   .inflash:000000000000046c $d
       stm32eforth.s:3828   .inflash:0000000000000470 $t
       stm32eforth.s:3830   .inflash:0000000000000478 $d
       stm32eforth.s:3832   .inflash:0000000000000482 $t
       stm32eforth.s:3835   .inflash:0000000000000488 $d
       stm32eforth.s:3845   .inflash:0000000000000498 UNNESTQ
       stm32eforth.s:3854   .inflash:00000000000004b8 $d
       stm32eforth.s:3855   .inflash:00000000000004bc $t
       stm32eforth.s:3856   .inflash:00000000000004c0 $d
       stm32eforth.s:3865   .inflash:00000000000004d0 NONAMEQ
       stm32eforth.s:3867   .inflash:00000000000004d8 $d
       stm32eforth.s:3868   .inflash:00000000000004dc $t
       stm32eforth.s:3869   .inflash:00000000000004e4 $d
       stm32eforth.s:4155   .rodata:0000000000000018 NONAME_SUB
       stm32eforth.s:3870   .inflash:00000000000004e8 $t
       stm32eforth.s:3876   .inflash:0000000000000500 $d
       stm32eforth.s:3877   .inflash:0000000000000504 $t
       stm32eforth.s:3878   .inflash:000000000000050c $d
       stm32eforth.s:3879   .inflash:0000000000000510 $t
       stm32eforth.s:3881   .inflash:0000000000000518 $d
       stm32eforth.s:3882   .inflash:000000000000051c $t
       stm32eforth.s:3886   .inflash:000000000000052c $d
       stm32eforth.s:3887   .inflash:0000000000000530 $t
       stm32eforth.s:3888   .inflash:0000000000000538 $d
       stm32eforth.s:3889   .inflash:000000000000053c $t
       stm32eforth.s:3890   .inflash:0000000000000544 $d
       stm32eforth.s:4161   .rodata:0000000000000054 ANONYMOUS
       stm32eforth.s:3891   .inflash:0000000000000548 $t
       stm32eforth.s:3910   .inflash:0000000000000578 DOTNONAME
       stm32eforth.s:3913   .inflash:0000000000000584 $d
       stm32eforth.s:3914   .inflash:0000000000000588 $t
       stm32eforth.s:3922   .inflash:0000000000000598 IS_BLW
       stm32eforth.s:3924   .inflash:00000000000005a0 $d
       stm32eforth.s:3925   .inflash:00000000000005a4 $t
       stm32eforth.s:3782   .inflash.dictinary:0000000000000b90 LF_SEE
       stm32eforth.s:3782   .inflash.dictinary:0000000000000b94 _SEE
       stm32eforth.s:3934   .inflash.dictinary:0000000000000b98 CA_SEE
       stm32eforth.s:3934   .text:0000000000001bd4 SEE
       stm32eforth.s:3934   .text:0000000000001bd8 $d
       stm32eforth.s:3934   .inflash:00000000000005bc FL_SEE
ARM GAS  stm32eforth.s 			page 110


       stm32eforth.s:3934   .text:0000000000001bdc $t
       stm32eforth.s:3952   .inflash:00000000000005f0 FL_SCOL
       stm32eforth.s:3934   .inflash.dictinary:0000000000000b9c LF_SCOL
       stm32eforth.s:3934   .inflash.dictinary:0000000000000ba0 _SCOL
       stm32eforth.s:3952   .inflash.dictinary:0000000000000bac CA_SCOL
       stm32eforth.s:3952   .text:0000000000001be8 SCOL
       stm32eforth.s:3952   .text:0000000000001bec $d
       stm32eforth.s:3952   .text:0000000000001bf0 $t
       stm32eforth.s:3954   .inflash:00000000000005f8 $d
       stm32eforth.s:3955   .inflash:00000000000005fc $t
       stm32eforth.s:3956   .inflash:0000000000000600 SCOL1
       stm32eforth.s:3961   .inflash:0000000000000610 $d
       stm32eforth.s:3962   .inflash:0000000000000614 $t
       stm32eforth.s:3968   .inflash:000000000000062c $d
       stm32eforth.s:3969   .inflash:0000000000000630 $t
       stm32eforth.s:3972   .inflash:000000000000063c $d
       stm32eforth.s:3973   .inflash:0000000000000640 $t
       stm32eforth.s:4008   .inflash:00000000000006a0 FL_DECOMP
       stm32eforth.s:3977   .inflash:0000000000000650 $d
       stm32eforth.s:3978   .inflash:0000000000000654 $t
       stm32eforth.s:3952   .inflash.dictinary:0000000000000bb0 LF_DECOMP
       stm32eforth.s:3952   .inflash.dictinary:0000000000000bb4 _DECOMP
       stm32eforth.s:4008   .inflash.dictinary:0000000000000bc0 CA_DECOMP
       stm32eforth.s:4008   .text:0000000000001bfc DECOMP
       stm32eforth.s:4008   .text:0000000000001c00 $d
       stm32eforth.s:4008   .text:0000000000001c04 $t
       stm32eforth.s:4015   .inflash:00000000000006b8 $d
       stm32eforth.s:4044   .inflash:0000000000000718 DECOM2
       stm32eforth.s:4017   .inflash:00000000000006bc $t
       stm32eforth.s:4018   .inflash:00000000000006c0 $d
       stm32eforth.s:4020   .inflash:00000000000006c4 $t
       stm32eforth.s:4028   .inflash:00000000000006e0 $d
       stm32eforth.s:4031   .inflash:00000000000006ec DECOMP1
       stm32eforth.s:4029   .inflash:00000000000006e4 $t
       stm32eforth.s:4030   .inflash:00000000000006e8 $d
       stm32eforth.s:4033   .inflash:00000000000006f0 DECOMP3
       stm32eforth.s:4032   .inflash:00000000000006ec $t
       stm32eforth.s:4040   .inflash:0000000000000708 $d
       stm32eforth.s:4041   .inflash:000000000000070c $t
       stm32eforth.s:4008   .inflash.dictinary:0000000000000bc4 LF_WORDS
       stm32eforth.s:4008   .inflash.dictinary:0000000000000bc8 _WORDS
       stm32eforth.s:4052   .inflash.dictinary:0000000000000bd0 CA_WORDS
       stm32eforth.s:4052   .text:0000000000001c10 WORDS
       stm32eforth.s:4052   .text:0000000000001c14 $d
       stm32eforth.s:4052   .inflash:0000000000000724 FL_WORDS
       stm32eforth.s:4052   .text:0000000000001c18 $t
       stm32eforth.s:4057   .inflash:0000000000000734 WORS1
       stm32eforth.s:4060   .inflash:000000000000073c $d
       stm32eforth.s:4067   .inflash:0000000000000758 WORS2
       stm32eforth.s:4061   .inflash:0000000000000740 $t
       stm32eforth.s:4082   .text:0000000000001c22 VERSN
       stm32eforth.s:4084   .text:0000000000001c2a $d
       stm32eforth.s:4085   .text:0000000000001c2e $t
       stm32eforth.s:4052   .inflash.dictinary:0000000000000bd4 LF_HI
       stm32eforth.s:4052   .inflash.dictinary:0000000000000bd8 _HI
       stm32eforth.s:4089   .inflash.dictinary:0000000000000bdc CA_HI
       stm32eforth.s:4092   .text:0000000000001c40 $d
ARM GAS  stm32eforth.s 			page 111


       stm32eforth.s:4114   .rodata:0000000000000000 hi_msg
       stm32eforth.s:4093   .text:0000000000001c44 $t
       stm32eforth.s:4102   .text:0000000000001c6c $d
       stm32eforth.s:4103   .text:0000000000001c70 $t
       stm32eforth.s:4113   .rodata:0000000000000000 $d
       stm32eforth.s:4089   .inflash.dictinary:0000000000000be0 LF_LASTN
       stm32eforth.s:4123   .inflash.dictinary:0000000000000bec CA_LASTN
       stm32eforth.s:4123   .text:0000000000001c90 LASTN
       stm32eforth.s:4131   .text:0000000000001cb0 COLD1
       stm32eforth.s:4132   .text:0000000000001cb4 $d
       stm32eforth.s:4133   .text:0000000000001cb8 $t
       stm32eforth.s:4134   .text:0000000000001cc0 $d
       stm32eforth.s:4135   .text:0000000000001cc4 $t
       stm32eforth.s:4135   .text:0000000000001cc8 $d
       stm32eforth.s:4136   .text:0000000000001ccc $t
       stm32eforth.s:4136   .text:0000000000001cd0 $d
       stm32eforth.s:4137   .text:0000000000001cd4 $t
       stm32eforth.s:4146   .text:0000000000001cf0 COLD2
       stm32eforth.s:4147   .text:0000000000001cf0 $d
       stm32eforth.s:4165   .rodata:000000000000008c BRAN_LBL
       stm32eforth.s:4169   .rodata:0000000000000098 QBRAN_LBL
       stm32eforth.s:4173   .rodata:00000000000000a4 DOLIT_LBL
       stm32eforth.s:4177   .rodata:00000000000000b0 DONEXT_LBL
       stm32eforth.s:4181   .rodata:00000000000000bc DODOES_LBL
       stm32eforth.s:4185   .rodata:00000000000000c8 DOVAR_LBL
       stm32eforth.s:4189   .rodata:00000000000000d4 DOCON_LBL
       stm32eforth.s:4193   .rodata:00000000000000e0 IS_BLW_LBL
       stm32eforth.s:4197   .rodata:00000000000000ec DOTQP_LBL
       stm32eforth.s:4201   .rodata:00000000000000f0 BLADR_LBL
       stm32eforth.s:4205   .rodata:00000000000000fc DOTCA_LBL
       stm32eforth.s:4209   .rodata:0000000000000108 NONAMEQ_LBL
       stm32eforth.s:4213   .rodata:0000000000000114 STRCQ_LBL
       stm32eforth.s:4217   .rodata:000000000000011c VERSN_LBL
       stm32eforth.s:4223   .user:0000000000000000 $d
       stm32eforth.s:4224   .user:0000000000000000 USER_SPACE
       stm32eforth.s:2768   .text:0000000000001237 $d
       stm32eforth.s:2768   .text:0000000000001238 $t
       stm32eforth.s:347    .inflash:000000000000001f $d
       stm32eforth.s:347    .inflash:0000000000000020 $t
       stm32eforth.s:3837   .inflash:000000000000048d $d
       stm32eforth.s:3837   .inflash:000000000000048e $t
       stm32eforth.s:3858   .inflash:00000000000004c7 $d
       stm32eforth.s:3858   .inflash:00000000000004c8 $t

UNDEFINED SYMBOLS
_mstack
