ARM GAS  stm32eforth.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	
   8              	*     Use USART1 for console I/O
   9              	*     port config: 115200 8N1 
  10              	*     TX on  PA9,  RX on PA10  
  11              	*
  12              	*     eForth is executed from flash, not copied to RAM
  13              	*     eForth use main stack R13 as return stack (thread stack not used) 
  14              	*
  15              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  16              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  17              	*     a 128 bytes tib is reserved below flwr_buffer 
  18              	*     Forth dstack is below tib and reserve 512 bytes 
  19              	*   
  20              	******************************************************
  21              	
  22              	*****************************************************************************
  23              	*	STM32eForth version 7.20
  24              	*	Chen-Hanson Ting,  July 2014
  25              	
  26              	*	Subroutine Threaded Forth Model
  27              	*	Adapted to STM32F407-Discovery Board
  28              	*	Assembled by Keil uVision 5.10
  29              	
  30              	*	Version 4.03
  31              	*	Direct Threaded Forth Model
  32              	*	Derived from 80386 eForth versin 4.02
  33              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  34              	
  35              	*	Subroutine thread (Branch-Link) model
  36              	*	  Register assignments
  37              	*	IP	 	R0 	*scratch
  38              	*	SP	 	R1  * data stack pointer
  39              	*	RP	 	R2 * return stack pointer 
  40              	*	UP	 	R3 
  41              	*	WP	 	R4	*scratch 
  42              	*	TOS	 	R5  * top of data stack
  43              	*	XP	 	R6 	*scratch
  44              	*	YP	 	R7	*scratch
  45              	*	  All Forth words are called by 
  46              	*	BL.W	addr
  47              	*	  All low level code words are terminaled by
  48              	*	BX	LR 	(_NEXT)
  49              	*	  All high level Forth words start with
  50              	*	STRFD	RP!,{LR}	(_NEST)
  51              	*	  All high level Forth words end with
  52              	*	LDRFD	RP!,{PC}	(_UNNEST)
  53              	*	  Top of data stack is cached in R5
  54              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  55              	*	TX on PA9 and RX on PA10.
  56              	
  57              	*	Version 5.02, 09oct04cht
ARM GAS  stm32eforth.s 			page 2


  58              	*	fOR ADuC702x from Analog Devices
  59              	*	Version 6.01, 10apr08cht a
  60              	*	.p2align 2 to at91sam7x256
  61              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  62              	*	Running under uVision3 RealView from Keil
  63              	*	Version 7.01, 29jun14cht
  64              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  65              	*	.p2aligned to eForth 2 Model
  66              	*	Assembled to flash memory and executed therefrom.
  67              	*	Version 7.10, 30jun14cht
  68              	*	Flash memory mapped to Page 0 where codes are executed
  69              	*	Version 7.20, 02jul14cht
  70              	*	Irreducible Complexity
  71              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  72              	*	TURNKEY saves current application from RAM to flash.
  73              	*********************************************************/
  74              	
  75              	  .syntax unified
  76              	  .cpu cortex-m3
  77              	  .fpu softvfp
  78              	  .thumb
  79              	
  80              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
ARM GAS  stm32eforth.s 			page 3


  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
ARM GAS  stm32eforth.s 			page 4


  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  81              	
  82              	/* blue pill specific constants */ 
  83              	  .equ LED_GPIO, GPIOC_BASE_ADR
  84              	  .equ LED_PIN, 13
  85              	  .equ UART, USART1_BASE_ADR 
  86              	
ARM GAS  stm32eforth.s 			page 5


  87              	/* eForth specific constants */
  88              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  89              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  90              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  91              	.equ UPP ,	0x20000130	/*start of user area (UP0) */
  92              	// .equ DTOP ,	0x20000240	/*start of usable RAM area (HERE) */
  93              	.equ DEND , 0x20004E00  /*usable RAM end */
  94              	 .equ RAMOFFSET ,	UPP 	// remap
  95              	 .equ RAMEND, 0x20005000 // 20Ko
  96              	 .equ FLASHOFFSET ,	0x08000130	// remap
  97              	//.equ RAMOFFSET  ,	0x00000000	/* absolute */
  98              	//.equ MAPOFFSET  ,	0x00000000	/* absolute */
  99              	  .equ MAPOFFSET , (RAMOFFSET-FLASHOFFSET)
 100              	  .equ IRQOFFSET , (RAM_ADR-FLASH_ADR)
 101              	
 102              	/*************************************
 103              	   system variables offset from UPP
 104              	*************************************/
 105              	  .equ SEED_OFS, 4    // prng seed 
 106              	  .equ TICKS_OFS, SEED_OFS+4  // millseconds counter
 107              	  .equ TIMER_OFS, TICKS_OFS+4  // count down timer
 108              	  .equ TORAM_OFS, TIMER_OFS+4  // compile to RAM 
 109              	  .equ IMG_SIGN_OFS, TORAM_OFS+4  // image signature  
 110              	  .equ BOOT_OFS, IMG_SIGN_OFS+4  // boot program address
 111              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
 112              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
 113              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
 114              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
 115              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
 116              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
 117              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
 118              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
 119              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
 120              	  .equ FORTH_CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
 121              	  .equ USER_CTOP_OFS, FORTH_CTOP_OFS+4  // ram free dictionary address
 122              	  .equ LASTN_OFS, USER_CTOP_OFS+4     // last word in dictionary link nfa 
 123              	  .equ VARS_END_OFS, LASTN_OFS+4 // end of system variables  
 124              	  
 125              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
 126              	  .equ RX_QUEUE_OFS, VARS_END_OFS+4 // rx queue 
 127              	  .equ RX_HEAD_OFS, RX_QUEUE_OFS+RX_QUEUE_SIZE // queue head indice 
 128              	  .equ RX_TAIL_OFS, RX_HEAD_OFS+4 // queue tail indice 
 129              	
 130              	
 131              	/***********************************************
 132              	* MACROS
 133              	*	Assemble inline direct threaded code ending.
 134              	***********************************************/
 135              		.macro _CALL fn /* low level routine call */ 
 136              	 	PUSH {LR}
 137              		BL \fn  
 138              		POP {LR}
 139              		.endm
 140              		
 141              		.macro _MOV32 R V 
 142              		MOV \R, #\V&0xffff
 143              		MOVT \R, #\V>>16
ARM GAS  stm32eforth.s 			page 6


 144              		.endm
 145              	
 146              		.macro	_NEXT /*end low level word */
 147              		BX	LR
 148              		.endm
 149              	
 150              	 	.macro	_NEST /*start high level word */
 151              		STMFD	R2!,{LR}
 152              		.endm
 153              	
 154              	 	.macro	_UNNEST	/*end high level word */
 155              		LDMFD	R2!,{PC}
 156              		.endm
 157              	
 158              	 	.macro	_DOLIT  value /*long literals */
 159              		BL	DOLIT
 160              		.word \value 
 161              		.endm
 162              	
 163              	 	.macro	_PUSH	/*push R5 on data stack*/
 164              		STR	R5,[R1,#-4]!
 165              		.endm
 166              	
 167              	 	.macro	_POP /*pop data stack to R5 */
 168              		LDR	R5,[R1],#4
 169              		.endm
 170              	
 171              		/* dictionary header for words copied to RAM */
 172              		.macro _HEADER  label, nlen, name
 173              			.section .inflash.dictinary 
 174              		LF_\label:   // link field
 175              			.word link 
 176              			.equ link , . 
 177              		_\label: .byte \nlen    // name field
 178              			.ascii "\name"
 179              			.p2align 2 
 180              		CA_\label:   // code field address 
 181              			.word \label + MAPOFFSET 
 182              			.section .text, "ax", %progbits 
 183              			.p2align 2 
 184              		\label:  // code address in .section .text 
 185              		.endm 
 186              	
 187              		/* dictionary header for words executed from flash memory */
 188              		.macro _HEADER_FL  label, nlen, name
 189              			.section .inflash.dictinary 
 190              		LF_\label:   // link field
 191              			.word link 
 192              			.equ link , . 
 193              		_\label: .byte \nlen    // name field
 194              			.ascii "\name"
 195              			.p2align 2 
 196              		CA_\label:   // code field address 
 197              			.word \label + MAPOFFSET 
 198              			.section .text, "ax", %progbits 
 199              			.p2align 2 
 200              		\label:  // code address in .section .text 
ARM GAS  stm32eforth.s 			page 7


 201              			_DOLIT FL_\label 
 202              			MOV R4,R5
 203              			_POP 
 204              			BLX  R4
 205              			_NEXT     
 206              			.section .inflash ,"ax", %progbits 
 207              			.p2align 2 
 208              			.type FL_\label, %function 
 209              		FL_\label: 
 210              		.endm 
 211              	
 212              	
 213              		.equ link, 0
 214              	
 215              	
 216              	/*************************************
 217              	*   interrupt service vectors table 
 218              	**************************************/
 219              	   .section  .isr_vector,"a",%progbits
 220              	  .type  isr_vectors, %object
 221              	
 222              	isr_vectors:
 223 0000 00000000 	  .word   _mstack          /* main return stack address */
 224 0004 00000000 	  .word   reset_handler    /* startup address */
 225              	/* core interrupts || exceptions */
 226 0008 00000000 	  .word   default_handler  /*  -14 NMI */
 227 000c 00000000 	  .word   default_handler  /*  -13 HardFault */
 228 0010 00000000 	  .word   default_handler  /*  -12 Memory Management */
 229 0014 00000000 	  .word   default_handler  /* -11 Bus fault */
 230 0018 00000000 	  .word   default_handler  /* -10 Usage fault */
 231 001c 00000000 	  .word   0 /* -9 */
 232 0020 00000000 	  .word   0 /* -8 */ 
 233 0024 00000000 	  .word   0 /* -7 */
 234 0028 00000000 	  .word   0	/* -6 */
 235 002c 00000000 	  .word   default_handler  /* -5 SWI instruction */
 236 0030 00000000 	  .word   default_handler  /* -4 Debug monitor */
 237 0034 00000000 	  .word   0 /* -3 */
 238 0038 00000000 	  .word   default_handler  /* -2 PendSV */
 239 003c 00000000 	  .word   systick_handler  /* -1 Systick */
 240              	 irq0:  
 241              	  /* External Interrupts */
 242 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog  */                                        
 243 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 244 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 245 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 246 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 247 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 248 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 249 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 250 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 251 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 252 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 253 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 254 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 255 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 256 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
 257 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
ARM GAS  stm32eforth.s 			page 8


 258 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 259 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 260 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 261 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 262 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 263 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 264 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 265 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 266 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 267 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 268 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 269 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 270 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 271 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 272 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 273 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 274 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 275 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 276 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 277 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 278 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 279 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
 280 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 281 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 282 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 283 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 284 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 285 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 286 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 287 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 288 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 289 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 290 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 291 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 292 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 293 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 294 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 295 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 296 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 297 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 298 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 299 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 300 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 301 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 302              	isr_end:
 303              	  .size  isr_vectors, .-isr_vectors
 304              	
 305              	/*****************************************************
 306              	* default isr handler called on unexpected interrupt
 307              	*****************************************************/
 308              	   .section  .inflash, "ax", %progbits 
 309              	   
 310              	  .type default_handler, %function
 311              	  .p2align 2 
 312              	  .global default_handler
 313              	default_handler:
 314 0000 014D     		ldr r5,exception_msg 
ARM GAS  stm32eforth.s 			page 9


 315 0002 00F04FF8 		bl uart_puts 
 316 0006 39E0     		b reset_mcu    
 317              	  .size  default_handler, .-default_handler
 318              	exception_msg:
 319 0008 0C000000 		.word .+4 
 320 000c 12       		.byte 18
 321 000d 0A0D6578 		.ascii "\n\rexeption reboot!"
 321      65707469 
 321      6F6E2072 
 321      65626F6F 
 321      7421
 322 001f 00       		.p2align 2
 323              	
 324              	/*********************************
 325              		system milliseconds counter
 326              	*********************************/	
 327              	  .type systick_handler, %function
 328              	  .p2align 2 
 329              	  .global systick_handler
 330              	systick_handler:
 331 0020 4FF49873 	  _MOV32 r3,UPP
 331      C2F20003 
 332 0028 9868     	  ldr r0,[r3,#TICKS_OFS]  
 333 002a 00F10100 	  add r0,#1
 334 002e 9860     	  str r0,[r3,#TICKS_OFS]
 335 0030 D868     	  ldr r0,[r3,#TIMER_OFS]
 336 0032 10B1     	  cbz r0, systick_exit
 337 0034 A0F10100 	  sub r0,#1
 338 0038 D860     	  str r0,[r3,#TIMER_OFS]
 339              	systick_exit:
 340 003a 7047     	  bx lr
 341              	
 342              	
 343              	
 344              	/**************************
 345              		UART RX handler
 346              	**************************/
 347              		.p2align 2
 348              		.type uart_rx_handler, %function
 349              	uart_rx_handler:
 350 003c 2DE9D002 		push {r4,r6,r7,r9}
 351 0040 4FF46054 		_MOV32 r4,UART 
 351      C4F20104 
 352 0048 2668     		ldr r6,[r4,#USART_SR]
 353 004a D4F80490 		ldr r9,[r4,#USART_DR]
 354 004e 16F0200F 		tst r6,#(1<<5) // RXNE 
 355 0052 0DD0     		beq 2f // no char received 
 356 0054 B9F1030F 		cmp r9,#3
 357 0058 0DD0     		beq user_reboot // received CTRL-C then reboot MCU 
 358 005a 03F15007 		add r7,r3,#RX_QUEUE_OFS
 359 005e 5C6E     		ldr r4,[r3,#RX_TAIL_OFS]
 360 0060 2744     		add r7,r7,r4 
 361 0062 87F80090 		strb r9,[r7]
 362 0066 04F10104 		add r4,#1 
 363 006a 04F00F04 		and r4,#(RX_QUEUE_SIZE-1)
 364 006e 5C66     		str r4,[r3,#RX_TAIL_OFS]
 365              	2:	
ARM GAS  stm32eforth.s 			page 10


 366 0070 BDE8D002 		pop {r4,r6,r7,r9}
 367 0074 7047     		bx lr 
 368              	
 369              	user_reboot:
 370 0076 064D     		ldr r5,user_reboot_msg
 371 0078 00F014F8 		bl uart_puts 
 372              	reset_mcu: 
 373 007c 0348     		ldr r0,scb_adr 
 374 007e C168     		ldr r1,[r0,#SCB_AIRCR]
 375 0080 41F00401 		orr r1,#(1<<2)
 376 0084 C0F2FA51 		movt r1,#SCB_VECTKEY
 377 0088 C160     		str r1,[r0,#SCB_AIRCR]
 378 008a FEE7     		b . 
 379              		.p2align 2 
 380              	scb_adr:
 381 008c 00ED00E0 		.word SCB_BASE_ADR 
 382              	user_reboot_msg:
 383 0090 94000000 		.word .+4
 384 0094 0D       		.byte 13 
 385 0095 0D757365 		.ascii "\ruser reboot!"
 385      72207265 
 385      626F6F74 
 385      21
 386 00a2 00BF     		.p2align 2 
 387              	
 388              	// send counted string to uart 
 389              	// input: r5 string* 
 390              		.type uart_puts,%function 
 391              	uart_puts:
 392 00a4 4FF46050 		_MOV32 r0,UART 
 392      C4F20100 
 393 00ac 15F8011B 		ldrb r1,[r5],#1 // string length
 394 00b0 0940     		ands r1,r1
 395 00b2 0CD0     	1:	beq 9f 
 396 00b4 0268     	2:  ldr r2,[r0,#USART_SR]
 397 00b6 12F08002 		ands r2,#0x80 
 398 00ba FBD0     		beq 2b 	
 399 00bc 15F8012B 		ldrb r2,[r5],#1
 400 00c0 0271     		strb r2,[r0,#USART_DR]
 401 00c2 0139     		subs r1,r1,#1 
 402 00c4 F6D1     		bne 2b 
 403 00c6 0268     	3:	ldr r2,[r0,#USART_SR]
 404 00c8 12F04002 		ands r2,#(1<<6)
 405 00cc FBD0     		beq 3b 
 406 00ce 7047     	9:  bx lr 
 407              	
 408              	
 409              	/**************************************
 410              	  reset_handler execute at MCU reset
 411              	***************************************/
 412              	  .type  reset_handler, %function
 413              	  .p2align 2 
 414              	  .global reset_handler
 415              	reset_handler:
 416 00d0 00F08FF8 		bl	remap 
 417 00d4 00F01CF8 		bl	init_devices	 	/* RCC, GPIOs, USART */
 418 00d8 00F06AF8 		bl  uart_init
ARM GAS  stm32eforth.s 			page 11


 419              	//	bl	UNLOCK			/* unlock flash memory */
 420 00dc 00F008F8 		bl forth_init 
 421 00e0 0248     		ldr r0,forth_entry
 422 00e2 40F00100 		orr r0,#1
 423 00e6 8047     		blx r0
 424 00e8 FFF7FEBF 		b.w .  
 425              		.p2align 2 
 426              	forth_entry:
 427 00ec 241D0018 		.word COLD+MAPOFFSET 
 428              	
 429              		.type forth_init, %function 
 430              	forth_init:
 431 00f0 4FF49873 		_MOV32 r3,UPP 
 431      C2F20003 
 432 00f8 4FF49D41 		_MOV32 R1,SPP
 432      C2F20001 
 433 0100 4FF49F42 		_MOV32 R2,RPP
 433      C2F20002 
 434 0108 85EA0505 		EOR R5,R5  
 435 010c 7047     		BX LR 
 436              	
 437              	  .type init_devices, %function
 438 010e 00BF     	  .p2align 2 
 439              	init_devices:
 440              	/* init clock to HSE 72 Mhz */
 441              	/* set 2 wait states in FLASH_ACR_LATENCY */
 442 0110 4FF40050 	  _MOV32 R0,FLASH_BASE_ADR 
 442      C4F20200 
 443 0118 4FF01202 	  mov r2,#0x12
 444 011c 0260     	  str r2,[r0,#FLASH_ACR]
 445              	/* configure clock for HSE, 8 Mhz crystal */
 446              	/* enable HSE in RCC_CR */
 447 011e 4FF48050 	  _MOV32 R0,RCC_BASE_ADR 
 447      C4F20200 
 448 0126 0168     	  ldr r1,[r0,#RCC_CR]
 449 0128 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 450 012c 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 451              	/* wait HSERDY loop */
 452              	wait_hserdy:
 453 012e 0168     	  ldr r1,[r0,#RCC_CR]
 454 0130 11F4003F 	  tst r1,#(1<<17)
 455 0134 FBD0     	  beq wait_hserdy
 456              	
 457              	/************************************************* 
 458              	   configure PLL mul factor and source 
 459              	   SYSCLOCK=72 Mhz
 460              	   select HSE as  PLL source clock
 461              	   multiply frequency by 9 
 462              	   APB1 clock is limited to 36 Mhz so divide by 2 
 463              	****************************************************/
 464 0136 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 465 013a C0F21D01 	  movt r1,#(7<<2)|1
 466 013e 4160     	  str r1,[r0,#RCC_CFGR]
 467              	  /* enable PLL */
 468 0140 0168     	  ldr r1,[r0,#RCC_CR]
 469 0142 41F08071 	  orr r1, #1<<24 
 470 0146 0160     	  str r1,[r0,#RCC_CR]
ARM GAS  stm32eforth.s 			page 12


 471              	/* wait for PLLRDY */
 472              	wait_pllrdy:
 473 0148 0168     	  ldr r1,[r0,#RCC_CR]
 474 014a 11F0007F 	  tst r1,#(1<<25)
 475 014e FBD0     	  beq wait_pllrdy 
 476              	/* select PLL as sysclock */
 477 0150 4168     	  ldr r1,[r0,#RCC_CFGR]
 478 0152 4FF6FC72 	  _MOV32 r2,0xfffffffc
 478      CFF6FF72 
 479 015a 01EA0201 	  and r1,r1,r2 
 480 015e 4FF00202 	  mov r2,#2
 481 0162 41EA0201 	  orr r1,r1,r2
 482 0166 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 483              	/* wait for SWS==2 */
 484              	wait_sws:
 485 0168 4168     	  ldr r1,[r0,#RCC_CFGR]
 486 016a 11F0080F 	  tst r1,#(2<<2)
 487 016e FBD0     	  beq wait_sws
 488              	/* now sysclock is 72 Mhz */
 489              	
 490              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 491 0170 4FF48050 	  _MOV32 r0,RCC_BASE_ADR
 491      C4F20200 
 492 0178 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 493 017c 8161     	  str	r1, [r0, #RCC_APB2ENR]
 494              	
 495              	/* configure GPIOC:13 as output for user LED */
 496 017e 4FF48050 	  _MOV32 r0,GPIOC_BASE_ADR 
 496      C4F20100 
 497 0186 4168     	  ldr r1,[r0,#GPIO_CRH]
 498 0188 6FF47002 	  mvn r2,#(15<<20)
 499 018c 01EA0201 	  and r1,r1,r2
 500 0190 4FF4C002 	  mov r2,#(6<<20)
 501 0194 41EA0201 	  orr r1,r1,r2
 502 0198 4160     	  str r1,[r0,#GPIO_CRH]
 503              	
 504              	/* configure systicks for 1msec ticks */
 505 019a 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 505      CEF20000 
 506 01a2 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 507 01a6 4160     	  str r1,[r0,#STK_LOAD]
 508 01a8 4FF00301 	  mov r1,#3
 509 01ac 0160     	  str r1,[r0,STK_CTL]
 510 01ae 7047     	  _NEXT  
 511              	
 512              	/*******************************
 513              	  initialize UART peripheral 
 514              	********************************/
 515              		.type uart_init, %function
 516              	uart_init:
 517              	/* set GPIOA PIN 9, uart TX  */
 518 01b0 4FF40060 	  _MOV32 r0,GPIOA_BASE_ADR
 518      C4F20100 
 519 01b8 4168     	  ldr r1,[r0,#GPIO_CRH]
 520 01ba 6FF0F002 	  mvn r2,#(15<<4)
 521 01be 01EA0201 	  and r1,r1,r2
 522 01c2 4FF0A002 	  mov r2,#(0xA<<4)
ARM GAS  stm32eforth.s 			page 13


 523 01c6 41EA0201 	  orr r1,r1,r2 
 524 01ca 4160     	  str r1,[r0,#GPIO_CRH]
 525 01cc 4FF46050 	  _MOV32 r0,UART 
 525      C4F20100 
 526              	/* BAUD rate */
 527 01d4 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
 528 01d8 8160     	  str r1,[r0,#USART_BRR]
 529 01da 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 530 01de C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 531              	/* enable interrupt in NVIC */
 532 01e0 4FF46140 	  _MOV32 r0,NVIC_BASE_ADR
 532      CEF20000 
 533 01e8 4168     	  ldr r1,[r0,#NVIC_ISER1]
 534 01ea 41F02001 	  orr r1,#32   
 535 01ee 4160     	  str r1,[r0,#NVIC_ISER1]
 536 01f0 7047     	  bx lr 
 537              	
 538              	/* copy system to RAM */ 
 539              		.type remap, %function 
 540              	
 541              	remap:
 542              	// tranfert isr_vector to RAM at 0x20000000
 543 01f2 4FF00000 		_MOV32 r0,RAM_ADR
 543      C2F20000 
 544 01fa 81EA0101 		eor r1,r1
 545 01fe 4FF49872 		mov r2,#(isr_end-isr_vectors) 
 546 0202 51F8043B 	1:	ldr r3,[r1],#4
 547 0206 40F8043B 		str r3,[r0],#4
 548 020a 043A     		subs r2,#4
 549 020c F9D1     		bne 1b
 550              	// set new vector table address
 551 020e 4FF46D40 		_MOV32 r0,SCB_BASE_ADR
 551      CEF20000 
 552 0216 4FF00001 		_MOV32 r1,RAM_ADR 
 552      C2F20001 
 553 021e 8160     		str r1,[r0,#SCB_VTOR]
 554              	// copy system variable and code 	
 555 0220 DFF83400 		ldr r0,remap_dest
 556 0224 0B49     		ldr r1,remap_src 
 557 0226 41F69052 		mov r2,#CTOP-UZERO 
 558 022a 02F10302 		add r2,r2,#3
 559 022e 22F00302 		and r2,r2,#~3 
 560 0232 51F8043B 	1:	ldr r3,[r1],#4 
 561 0236 40F8043B 		str r3,[r0],#4 
 562 023a 043A     		subs R2,#4 
 563 023c F9D1     		bne 1b
 564              	// zero end of RAM 
 565 023e 4FF4A042 		_MOV32 r2,RAM_END 
 565      C2F20002 
 566 0246 83EA0303 		eor r3,r3,r3 
 567 024a 40F8043B 	2:  str r3,[r0],#4
 568 024e 9042     		cmp r0,r2 
 569 0250 FBDB     		blt 2b 
 570 0252 7047     		_NEXT 
 571              	remap_src:
 572 0254 00000000 		.word UZERO 
 573              	remap_dest:
ARM GAS  stm32eforth.s 			page 14


 574 0258 30010020 		.word RAMOFFSET 
 575              	
 576              	/********************
 577              	* Version control
 578              	*******************/
 579              	.equ VER ,	0x01	/*major release version */
 580              	.equ EXT ,	0x00	/*minor extension */
 581              	
 582              	/* Constants */
 583              	
 584              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 585              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 586              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 587              	
 588              	.equ CELLL ,	4	/*size of a cell */
 589              	.equ BASEE ,	10	/*default radix */
 590              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 591              	
 592              	.equ BKSPP ,	8	/*backspace */
 593              	.equ LF ,	10	  /*line feed */
 594              	.equ CRR ,	13	/*carriage return */
 595              	.equ ERR ,	27	/*error escape */
 596              	.equ TIC ,	39	/*tick */
 597              	
 598              	/********************************************************
 599              	* RAM memory mapping
 600              	* 	0x20000000	RAM base address
 601              	*	0x20000000  system variables	
 602              	* 	0x20000100	Forth dictionary
 603              	* 	0x2000????	top of dictionary, HERE
 604              	* 	0x2000????	WORD buffer, HERE+16
 605              	*   0x20004E00  end of user space
 606              	* 	0x20004E80	top of data stack  R2
 607              	* 	0x20004E80	TIB terminal input buffer
 608              	* 	0x20004F80	top of return stack  R1
 609              	* 	0x20005000	top of hardware stack for interrupts R14
 610              	********************************************************/
 611              	
 612              	
 613              	/******************************************************
 614              	*  COLD start moves the following to USER variables.
 615              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 616              	******************************************************/
 617              		.section  .text, "ax" ,%progbits 
 618              		.p2align 2
 619              	
 620              	UZERO:
 621 0000 00000000 		.word 0  			/*Reserved */
 622 0004 55AA0000 		.word 0xaa55 /* SEED  */ 
 623 0008 00000000 		.word 0      /* MSEC */
 624 000c 00000000 	    .word 0     /* TIMER */
 625 0010 FFFFFFFF 		.word -1    /* >RAM */ 
 626 0014 494D4147 		.ascii "IMAG" /* signature */ 
 627 0018 C81C0018 		.word HI+MAPOFFSET  /*'BOOT */
 628 001c 0A000000 		.word BASEE 	/*BASE */
 629 0020 00000000 		.word 0			/*tmp */
 630 0024 00000000 		.word 0			/*SPAN */
ARM GAS  stm32eforth.s 			page 15


 631 0028 00000000 		.word 0			/*>IN */
 632 002c 00000000 		.word 0			/*#TIB */
 633 0030 804E0020 		.word TIBB	/*TIB */
 634 0034 80110018 		.word INTER+MAPOFFSET	/*'EVAL */
 635 0038 00000000 		.word 0			/*HLD */
 636 003c 140C0000 		.word _LASTN	/*CONTEXT */
 637 0040 901D0000 		.word CTOP  	/* FCP end of system dictionnary */
 638 0044 901D0018 		.word CTOP+MAPOFFSET	/* CP end of RAM dictionary RAM */
 639 0048 140C0000 		.word _LASTN	/*LAST word in dictionary */
 640 004c 00000000 		.word 0,0			/*reserved */
 640      00000000 
 641              	ULAST:
 642 0054 00000000 		.space  RX_QUEUE_SIZE+8 /* space reserved for rx_queue,head and tail pointer.
 642      00000000 
 642      00000000 
 642      00000000 
 642      00000000 
 643              	
 644              	
 645              	/***********************************
 646              	//  Start of Forth dictionary
 647              	***********************************/
 648              	
 649 006c AFF30080 		.p2align 4
 650              	
 651              	// RST-IVEC ( n -- )
 652              	// reset interrupt vector n to default_handler
 653              		_HEADER RSTIVEC,8,"RST-IVEC"
 654 0070 42F804ED 		_NEST 
 655 0074 00F089F8 		_DOLIT default_handler 
 655      00000000 
 656 007c 00F0E2F8 		BL	SWAP 
 657 0080 00F04EF9 		BL	CELLS 
 658 0084 00F081F8 		_DOLIT irq0+IRQOFFSET  
 658      40000018 
 659 008c 00F00EF9 		BL	PLUS 
 660 0090 00F0ACF8 		BL	STORE 
 661 0094 52F804FB 		_UNNEST 
 662              	
 663              	//	SET-IVEC ( a n -- )
 664              	// set interrupt vector address 
 665              		_HEADER SETIVEC,8,"SET-IVEC"
 666 0098 42F804ED 		_NEST
 667 009c 00F0D2F8 		BL	SWAP 
 668 00a0 00F020F9 		BL 	ONEP 
 669 00a4 00F0CEF8 		BL	SWAP  
 670 00a8 00F03AF9 		BL CELLS 
 671 00ac 00F06DF8 		_DOLIT irq0+IRQOFFSET  
 671      40000018 
 672 00b4 00F0FAF8 		BL	PLUS 
 673 00b8 00F098F8 		BL 	STORE 
 674 00bc 52F804FB 		_UNNEST 
 675              	
 676              	
 677              	// RANDOM ( n1 -- {0..n1-1} )
 678              	// return pseudo random number 
 679              	// REF: https://en.wikipedia.org/wiki/Xorshift
ARM GAS  stm32eforth.s 			page 16


 680              	
 681              		_HEADER RAND,6,RANDOM 
 682 00c0 42F804ED 		_NEST 
 683 00c4 00F0D2F9 		bl SEED 
 684 00c8 00F096F8 		bl AT 
 685 00cc 4FEA4534 		lsl r4,r5,#13
 686 00d0 85EA0405 		eor r5,r4
 687 00d4 4FEA5544 		lsr r4,r5,#17
 688 00d8 85EA0405 		eor r5,r4
 689 00dc 4FEA4514 		lsl r4,r5,#5
 690 00e0 85EA0405 		eor r5,r4
 691 00e4 00F0AAF8 		bl DUPP 
 692 00e8 00F0C0F9 		bl SEED 
 693 00ec 00F07EF8 		bl STORE 
 694 00f0 00F050F9 		bl ABSS
 695 00f4 00F0A6F8 		bl SWAP 
 696 00f8 00F094FA 		bl MODD 
 697 00fc 52F804FB 		_UNNEST 
 698              	
 699              	// PAUSE ( u -- ) 
 700              	// suspend execution for u milliseconds
 701              		_HEADER PAUSE,5,PAUSE 
 702 0100 42F804ED 		_NEST 
 703 0104 00F0BEF9 		BL TIMER 
 704 0108 00F070F8 		BL STORE 
 705              	PAUSE_LOOP:
 706 010c 00F0BAF9 		BL TIMER 
 707 0110 00F072F8 		BL AT 
 708 0114 00F056F8 		BL QBRAN 
 709 0118 24010000 		.word PAUSE_EXIT 
 710 011c 00F05EF8 		BL BRAN 
 711 0120 0C010000 		.word PAUSE_LOOP 
 712              	PAUSE_EXIT: 		
 713 0124 52F804FB 		_UNNEST 
 714              	
 715              	//  ULED ( T|F -- )
 716              	// control user LED, -1 ON, 0 OFF  
 717              		_HEADER ULED,4,ULED
 718 0128 4FF40056 		mov r6,#(1<<LED_PIN)
 719 012c 4FF48054 		_MOV32 r4,LED_GPIO 
 719      C4F20104 
 720 0134 2800     		movs r0,r5 
 721 0136 51F8045B 		_POP
 722 013a 01D0     		beq ULED_OFF 
 723 013c 6661     		str r6,[r4,#GPIO_BRR]
 724 013e 7047     		_NEXT 
 725              	ULED_OFF:
 726 0140 2661     		str r6,[r4,#GPIO_BSRR]
 727 0142 7047     		_NEXT 
 728              		
 729              	//    ?RX	 ( -- c T | F )
 730              	// 	Return input character and true, or a false if no input.
 731              		_HEADER QRX,4,"?KEY"
 732              	QKEY: 
 733 0144 41F8045D 		_PUSH
 734 0148 5F6E     		ldr r7,[r3,#RX_TAIL_OFS] 
 735 014a 1E6E     		ldr r6,[r3,#RX_HEAD_OFS]
ARM GAS  stm32eforth.s 			page 17


 736 014c 96EA0705 		eors r5,r6,r7 
 737 0150 0CD0     		beq 1f
 738 0152 03F15007 		add r7,r3,#RX_QUEUE_OFS 
 739 0156 3744     		add r7,r6 
 740 0158 3D78     		ldrb r5,[r7]
 741 015a 06F10106 		add r6,#1 
 742 015e 06F00F06 		and r6,#(RX_QUEUE_SIZE-1)
 743 0162 1E66     		str r6,[R3,#RX_HEAD_OFS]
 744 0164 41F8045D 		_PUSH 
 745 0168 4FF0FF35 		mov r5,#-1
 746 016c 7047     	1:	_NEXT 
 747 016e 00BF     		.p2align 2 
 748              	
 749              	//    TX!	 ( c -- )
 750              	// 	Send character c to the output device.
 751              		_HEADER EMIT,4,EMIT
 752              	TECHO:
 753 0170 4FF46054 		_MOV32 r4,UART 
 753      C4F20104 
 754 0178 2668     	1:	ldr	r6, [r4, #USART_SR]	
 755 017a 16F08006 		ands	r6, #0x80		//  TXE bit 
 756 017e FBD0     		beq	1b
 757 0180 2571     		strb	r5, [r4, #USART_DR]	
 758 0182 51F8045B 		_POP
 759 0186 7047     		_NEXT 
 760              		
 761              	// **************************************************************************
 762              	//  The kernel
 763              	
 764              	//    NOP	( -- )
 765              	// 	do nothing.
 766              		_HEADER NOP,3,NOP 
 767 0188 7047     		_NEXT
 768              	 
 769              	
 770              	//    doLIT	( -- w )
 771              	// 	Push an inline literal.
 772              	
 773              	// 	.word	_NOP+MAPOFFSET
 774              	// _LIT	.byte   COMPO+5
 775              	// 	.ascii "doLIT"
 776              	// 	.p2align 2 	
 777              	DOLIT:
 778 018a 41F8045D 		_PUSH				//  store R5 on data stack
 779 018e 2EF0010E 		BIC	LR,LR,#1		//  clear b0 in LR
 780 0192 5EF8045B 		LDR	R5,[LR],#4		//  get literal at word boundary
 781 0196 4EF0010E 		ORR	LR,LR,#1		//  aet b0 in LR
 782 019a 7047     		_NEXT
 783              	
 784              	//    EXECUTE	( ca -- )
 785              	// 	Execute the word at ca.
 786              		_HEADER EXECU,7,EXECUTE 
 787 019c 45F00104 		ORR	R4,R5,#1		//  b0=1 
 788 01a0 51F8045B 		_POP
 789 01a4 2047     		BX	R4
 790              	
 791              	//    next	( -- ) counter on R:
ARM GAS  stm32eforth.s 			page 18


 792              	// 	Run time code for the single index loop.
 793              	// 	: next ( -- ) \ hilevel model
 794              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 795              	
 796              	// 	.word	_EXECU+MAPOFFSET
 797              	// _DONXT	.byte   COMPO+4
 798              	// 	.ascii "next"
 799              	// 	.p2align 2 	
 800              	DONXT:
 801 01a6 1468     		LDR	R4,[R2]   // ( -- u )  
 802 01a8 24B9     		CBNZ R4,NEXT1 
 803              		/* loop done */
 804 01aa 02F10402 		ADD	R2,R2,#4 // drop counter 
 805 01ae 0EF1040E 		ADD	LR,LR,#4 // skip after loop address 
 806 01b2 7047     		_NEXT
 807              	NEXT1:
 808              		/* decrement loop counter */
 809 01b4 A4F10104 		SUB	R4,R4,#1
 810 01b8 1460     		STR	R4,[R2]
 811 01ba 5EF801EC 		LDR	LR,[LR,#-1]	//  handle b0 in LR 
 812 01be 4EF0010E 		ORR	LR,LR,#1 // begining of loop
 813 01c2 7047     		_NEXT
 814              	
 815              	//    ?branch	( f -- )
 816              	// 	Branch if flag is zero.
 817              	
 818              	// 	.word	_DONXT+MAPOFFSET
 819              	// _QBRAN	.byte   COMPO+7
 820              	// 	.ascii "?branch"
 821              	// 	.p2align 2 	
 822              	QBRAN:
 823 01c4 2C00     		MOVS	R4,R5
 824 01c6 51F8045B 		_POP
 825 01ca 04D1     		BNE	QBRAN1
 826 01cc 5EF801EC 		LDR	LR,[LR,#-1]
 827 01d0 4EF0010E 		ORR LR,LR,#1
 828 01d4 7047     		_NEXT
 829              	QBRAN1:
 830 01d6 0EF1040E 	 	ADD	LR,LR,#4
 831 01da 7047     		_NEXT
 832              	
 833              	//    branch	( -- )
 834              	// 	Branch to an inline address.
 835              	
 836              	// 	.word	_QBRAN+MAPOFFSET
 837              	// _BRAN	.byte   COMPO+6
 838              	// 	.ascii "branch"
 839              	// 	.p2align 2 	
 840              	BRAN:
 841 01dc 5EF801EC 		LDR	LR,[LR,#-1]
 842 01e0 4EF0010E 		ORR	LR,LR,#1
 843 01e4 7047     		_NEXT
 844              	
 845              	//    EXIT	(  -- )
 846              	// 	Exit the currently executing command.
 847 01e6 00BF     		_HEADER EXIT,4,EXIT 
 848 01e8 52F804FB 		_UNNEST 
ARM GAS  stm32eforth.s 			page 19


 849              	
 850              	//    !	   ( w a -- )
 851              	// 	Pop the data stack to memory.
 852              		_HEADER STORE,1,"!"
 853 01ec 51F8044B 		LDR	R4,[R1],#4
 854 01f0 2C60     		STR	R4,[R5]
 855 01f2 51F8045B 		_POP
 856 01f6 7047     		_NEXT
 857              	
 858              	//    @	   ( a -- w )
 859              	// 	Push memory location to the data stack.
 860              		_HEADER AT,1,"@"
 861 01f8 2D68     		LDR	R5,[R5]
 862 01fa 7047     		_NEXT
 863              	
 864              	//    C!	  ( c b -- )
 865              	// 	Pop the data stack to byte memory.
 866              		_HEADER CSTOR,2,"C!"
 867 01fc 51F8044B 		LDR	R4,[R1],#4
 868 0200 2C70     		STRB	R4,[R5]
 869 0202 51F8045B 		_POP
 870 0206 7047     		_NEXT
 871              	
 872              	//    C@	  ( b -- c )
 873              	// 	Push byte memory location to the data stack.
 874              		_HEADER CAT,2,"C@"
 875 0208 2D78     		LDRB	R5,[R5]
 876 020a 7047     		_NEXT
 877              	
 878              	//    R>	  ( -- w )
 879              	// 	Pop the return stack to the data stack.
 880              		_HEADER RFROM,2,"R>"
 881 020c 41F8045D 		_PUSH
 882 0210 52F8045B 		LDR	R5,[R2],#4
 883 0214 7047     		_NEXT
 884              	
 885              	//    R@	  ( -- w )
 886              	// 	Copy top of return stack to the data stack.
 887 0216 00BF     		_HEADER RAT,2,"R@"
 888 0218 41F8045D 		_PUSH
 889 021c 1568     		LDR	R5,[R2]
 890 021e 7047     		_NEXT
 891              	
 892              	//    >R	  ( w -- )
 893              	// 	Push the data stack to the return stack.
 894              		_HEADER TOR,2+COMPO,">R"
 895 0220 42F8045D 		STR	R5,[R2,#-4]!
 896 0224 51F8045B 		_POP
 897 0228 7047     		_NEXT  
 898              	
 899              	//    SP@	 ( -- a )
 900              	// 	Push the current data stack pointer.
 901 022a 00BF     		_HEADER SPAT,3,"SP@"
 902 022c 41F8045D 		_PUSH
 903 0230 0D46     		MOV	R5,R1
 904 0232 7047     		_NEXT
 905              	
ARM GAS  stm32eforth.s 			page 20


 906              	//    DROP	( w -- )
 907              	// 	Discard top stack item.
 908              		_HEADER DROP,4,DROP
 909 0234 51F8045B 		_POP
 910 0238 7047     		_NEXT
 911              	
 912              	//    DUP	 ( w -- w w )
 913              	// 	Duplicate the top stack item.
 914 023a 00BF     		_HEADER DUPP,3,"DUP"
 915 023c 41F8045D 		_PUSH
 916 0240 7047     		_NEXT
 917              	
 918              	//    SWAP	( w1 w2 -- w2 w1 )
 919              	// 	Exchange top two stack items.
 920 0242 00BF     		_HEADER SWAP,4,"SWAP"
 921 0244 0C68     		LDR	R4,[R1]
 922 0246 0D60     		STR	R5,[R1]
 923 0248 2546     		MOV	R5,R4
 924 024a 7047     		_NEXT
 925              	
 926              	//    OVER	( w1 w2 -- w1 w2 w1 )
 927              	// 	Copy second stack item to top.
 928              		_HEADER OVER,4,"OVER"
 929 024c 41F8045D 		_PUSH
 930 0250 4D68     		LDR	R5,[R1,#4]
 931 0252 7047     		_NEXT
 932              	
 933              	//    0<	  ( n -- t )
 934              	// 	Return true if n is negative.
 935              		_HEADER ZLESS,2,"0<"
 936 0254 4FF00004 		MOV	R4,#0
 937 0258 04EB2505 		ADD	R5,R4,R5,ASR #32
 938 025c 7047     		_NEXT
 939              	
 940              	//    AND	 ( w w -- w )
 941              	// 	Bitwise AND.
 942 025e 00BF     		_HEADER ANDD,3,"AND"
 943 0260 51F8044B 		LDR	R4,[R1],#4
 944 0264 05EA0405 		AND	R5,R4
 945 0268 7047     		_NEXT
 946              	
 947              	//    OR	  ( w w -- w )
 948              	// 	Bitwise inclusive OR.
 949 026a 00BF     		_HEADER ORR,2,"OR"
 950 026c 51F8044B 		LDR	R4,[R1],#4
 951 0270 45EA0405 		ORR	R5,R4
 952 0274 7047     		_NEXT
 953              	
 954              	//    XOR	 ( w w -- w )
 955              	// 	Bitwise exclusive OR.
 956 0276 00BF     		_HEADER XORR,3,"XOR"
 957 0278 51F8044B 		LDR	R4,[R1],#4
 958 027c 85EA0405 		EOR	R5,R4
 959 0280 7047     		_NEXT
 960              	
 961              	//    UM+	 ( w w -- w cy )
 962              	// 	Add two numbers, return the sum and carry flag.
ARM GAS  stm32eforth.s 			page 21


 963 0282 00BF     		_HEADER UPLUS,3,"UM+"
 964 0284 0C68     		LDR	R4,[R1]
 965 0286 6419     		ADDS	R4,R4,R5
 966 0288 4FF00005 		MOV	R5,#0
 967 028c 45F10005 		ADC	R5,R5,#0
 968 0290 0C60     		STR	R4,[R1]
 969 0292 7047     		_NEXT
 970              	
 971              	//    RSHIFT	 ( w # -- w )
 972              	// 	arithmetic Right shift # bits.
 973              		_HEADER RSHIFT,6,"RSHIFT"
 974 0294 51F8044B 		LDR	R4,[R1],#4
 975 0298 44FA05F5 		MOV	R5,R4,ASR R5
 976 029c 7047     		_NEXT
 977              	
 978              	//    LSHIFT	 ( w # -- w )
 979              	// 	Right shift # bits.
 980 029e 00BF     		_HEADER LSHIFT,6,"LSHIFT"
 981 02a0 51F8044B 		LDR	R4,[R1],#4
 982 02a4 04FA05F5 		MOV	R5,R4,LSL R5
 983 02a8 7047     		_NEXT
 984              	
 985              	//    +	 ( w w -- w )
 986              	// 	Add.
 987 02aa 00BF     		_HEADER PLUS,1,"+"
 988 02ac 51F8044B 		LDR	R4,[R1],#4
 989 02b0 2544     		ADD	R5,R5,R4
 990 02b2 7047     		_NEXT
 991              	
 992              	//    -	 ( w w -- w )
 993              	// 	Subtract.
 994              		_HEADER SUBB,1,"-"
 995 02b4 51F8044B 		LDR	R4,[R1],#4
 996 02b8 C5EB0405 		RSB	R5,R5,R4
 997 02bc 7047     		_NEXT
 998              	
 999              	//    *	 ( w w -- w )
 1000              	// 	Multiply.
 1001 02be 00BF     		_HEADER STAR,1,"*"
 1002 02c0 51F8044B 		LDR	R4,[R1],#4
 1003 02c4 04FB05F5 		MUL	R5,R4,R5
 1004 02c8 7047     		_NEXT
 1005              	
 1006              	//    UM*	 ( w w -- ud )
 1007              	// 	Unsigned multiply.
 1008 02ca 00BF     		_HEADER UMSTA,3,"UM*"
 1009 02cc 0C68     		LDR	R4,[R1]
 1010 02ce A5FB0467 		UMULL	R6,R7,R5,R4
 1011 02d2 0E60     		STR	R6,[R1]
 1012 02d4 3D46     		MOV	R5,R7
 1013 02d6 7047     		_NEXT
 1014              	
 1015              	//    M*	 ( w w -- d )
 1016              	// 	signed multiply.
 1017              		_HEADER MSTAR,2,"M*"
 1018 02d8 0C68     		LDR	R4,[R1]
 1019 02da 85FB0467 		SMULL	R6,R7,R5,R4
ARM GAS  stm32eforth.s 			page 22


 1020 02de 0E60     		STR	R6,[R1]
 1021 02e0 3D46     		MOV	R5,R7
 1022 02e2 7047     		_NEXT
 1023              	
 1024              	//    1+	 ( w -- w+1 )
 1025              	// 	Add 1.
 1026              		_HEADER ONEP,2,"1+"
 1027 02e4 05F10105 		ADD	R5,R5,#1
 1028 02e8 7047     		_NEXT
 1029              	
 1030              	//    1-	 ( w -- w-1 )
 1031              	// 	Subtract 1.
 1032 02ea 00BF     		_HEADER ONEM,2,"1-"
 1033 02ec A5F10105 		SUB	R5,R5,#1
 1034 02f0 7047     		_NEXT
 1035              	
 1036              	//    2+	 ( w -- w+2 )
 1037              	// 	Add 1.
 1038 02f2 00BF     		_HEADER TWOP,2,"2+"
 1039 02f4 05F10205 		ADD	R5,R5,#2
 1040 02f8 7047     		_NEXT
 1041              	
 1042              	//    2-	 ( w -- w-2 )
 1043              	// 	Subtract 2.
 1044 02fa 00BF     		_HEADER TWOM,2,"2-"
 1045 02fc A5F10205 		SUB	R5,R5,#2
 1046 0300 7047     		_NEXT
 1047              	
 1048              	//    CELL+	( w -- w+4 )
 1049              	// 	Add CELLL.
 1050 0302 00BF     		_HEADER CELLP,5,"CELL+"
 1051 0304 05F10405 		ADD	R5,R5,#CELLL
 1052 0308 7047     		_NEXT
 1053              	
 1054              	//    CELL-	( w -- w-4 )
 1055              	// 	Subtract CELLL.
 1056 030a 00BF     		_HEADER CELLM,5,"CELL-"
 1057 030c A5F10405 		SUB	R5,R5,#CELLL
 1058 0310 7047     		_NEXT
 1059              	 
 1060              	//    BL	( -- 32 )
 1061              	// 	Blank (ASCII space).
 1062 0312 00BF     		_HEADER BLANK,2,"BL"
 1063 0314 41F8045D 		_PUSH
 1064 0318 4FF02005 		MOV	R5,#32
 1065 031c 7047     		_NEXT
 1066              	
 1067              	//    CELLS	( w -- w*4 )
 1068              	// 	Multiply 4.
 1069 031e 00BF     		_HEADER CELLS,5,"CELLS"
 1070 0320 4FEA8505 		MOV	R5,R5,LSL#2
 1071 0324 7047     		_NEXT
 1072              	
 1073              	//    CELL/	( w -- w/4 )
 1074              	// 	Divide by 4.
 1075 0326 00BF     		_HEADER CELLSL,5,"CELL/"
 1076 0328 4FEAA505 		MOV	R5,R5,ASR#2
ARM GAS  stm32eforth.s 			page 23


 1077 032c 7047     		_NEXT
 1078              	
 1079              	//    2*	( w -- w*2 )
 1080              	// 	Multiply 2.
 1081 032e 00BF     		_HEADER TWOST,2,"2*"
 1082 0330 4FEA4505 		MOV	R5,R5,LSL#1
 1083 0334 7047     		_NEXT
 1084              	
 1085              	//    2/	( w -- w/2 )
 1086              	// 	Divide by 2.
 1087 0336 00BF     		_HEADER TWOSL,2,"2/"
 1088 0338 4FEA6505 		MOV	R5,R5,ASR#1
 1089 033c 7047     		_NEXT
 1090              	
 1091              	//    ?DUP	( w -- w w | 0 )
 1092              	// 	Conditional duplicate.
 1093 033e 00BF     		_HEADER QDUP,4,"?DUP"
 1094 0340 2C00     		MOVS	R4,R5
 1095 0342 18BF     		IT NE 
 1096 0344 41F8045D 	    STRNE	R5,[R1,#-4]!
 1097 0348 7047     		_NEXT
 1098              	
 1099              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1100              	// 	Rotate top 3 items.
 1101 034a 00BF     		_HEADER ROT,3,"ROT"
 1102 034c 0C68     		LDR	R4,[R1]  // r4=w2 
 1103 034e 0D60     		STR	R5,[R1]  // w3 replace w2 
 1104 0350 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1105 0352 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1106 0354 7047     		_NEXT
 1107              	
 1108              	//    2DROP	( w1 w2 -- )
 1109              	// 	Drop top 2 items.
 1110 0356 00BF     		_HEADER DDROP,5,"2DROP"
 1111 0358 51F8045B 		_POP
 1112 035c 51F8045B 		_POP
 1113 0360 7047     		_NEXT
 1114              	
 1115              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1116              	// 	Duplicate top 2 items.
 1117 0362 00BF     		_HEADER DDUP,4,"2DUP"
 1118 0364 0C68     		LDR	R4,[R1] // r4=w1
 1119 0366 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1120 036a 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1121 036e 7047     		_NEXT
 1122              	
 1123              	//    D+	( d1 d2 -- d3 )
 1124              	// 	Add top 2 double numbers.
 1125              		_HEADER DPLUS,2,"D+"
 1126 0370 51F8044B 		LDR	R4,[R1],#4
 1127 0374 51F8046B 		LDR	R6,[R1],#4
 1128 0378 0F68     		LDR	R7,[R1]
 1129 037a E419     		ADDS	R4,R4,R7
 1130 037c 0C60     		STR	R4,[R1]
 1131 037e 45EB0605 		ADC	R5,R5,R6
 1132 0382 7047     		_NEXT
 1133              	
ARM GAS  stm32eforth.s 			page 24


 1134              	//    NOT	 ( w -- !w )
 1135              	// 	1"s complement.
 1136              		_HEADER INVER,3,"NOT"
 1137 0384 6FEA0505 		MVN	R5,R5
 1138 0388 7047     		_NEXT
 1139              	
 1140              	//    NEGATE	( w -- -w )
 1141              	// 	2's complement.
 1142 038a 00BF     		_HEADER NEGAT,6,"NEGATE"
 1143 038c C5F10005 		RSB	R5,R5,#0
 1144 0390 7047     		_NEXT
 1145              	
 1146              	//    ABS	 ( w -- |w| )
 1147              	// 	Absolute.
 1148 0392 00BF     		_HEADER ABSS,3,"ABS"
 1149 0394 15F0004F 		TST	R5,#0x80000000
 1150 0398 18BF     		IT NE
 1151 039a 6D42     	    RSBNE   R5,R5,#0
 1152 039c 7047     		_NEXT
 1153              	
 1154              	//  0= ( w -- f )
 1155              	// TOS==0?
 1156 039e 00BF     		_HEADER ZEQUAL,2,"0="
 1157 03a0 15B9     		cbnz r5,1f
 1158 03a2 4FF0FF35 		mov r5,#-1
 1159 03a6 7047     		_NEXT 
 1160 03a8 85EA0505 	1:  eor r5,r5,r5  
 1161 03ac 7047     		_NEXT 	
 1162              	
 1163              	//    =	 ( w w -- t )
 1164              	// 	Equal?
 1165 03ae 00BF     		_HEADER EQUAL,1,"="
 1166 03b0 51F8044B 		LDR	R4,[R1],#4
 1167 03b4 A542     		CMP	R5,R4
 1168 03b6 0CBF     		ITE EQ 
 1169 03b8 6FF00005 	    MVNEQ	R5,#0
 1170 03bc 0025     		MOVNE	R5,#0
 1171 03be 7047     		_NEXT
 1172              	
 1173              	//    U<	 ( w w -- t )
 1174              	// 	Unsigned equal?
 1175              		_HEADER ULESS,2,"U<"
 1176 03c0 51F8044B 		LDR	R4,[R1],#4
 1177 03c4 AC42     		CMP	R4,R5
 1178 03c6 34BF     		ITE CC 
 1179 03c8 6FF00005 		MVNCC	R5,#0
 1180 03cc 0025     		MOVCS	R5,#0
 1181 03ce 7047     		_NEXT
 1182              	
 1183              	//    <	( w w -- t )
 1184              	// 	Less?
 1185              		_HEADER LESS,1,"<"
 1186 03d0 51F8044B 		LDR	R4,[R1],#4
 1187 03d4 AC42     		CMP	R4,R5
 1188 03d6 B4BF     	    ITE LT
 1189 03d8 6FF00005 		MVNLT	R5,#0
 1190 03dc 0025     		MOVGE	R5,#0
ARM GAS  stm32eforth.s 			page 25


 1191 03de 7047     		_NEXT
 1192              	
 1193              	//    >	( w w -- t )
 1194              	// 	greater?
 1195              		_HEADER GREAT,1,">"
 1196 03e0 51F8044B 		LDR	R4,[R1],#4
 1197 03e4 AC42     		CMP	R4,R5
 1198 03e6 CCBF     		ITE GT
 1199 03e8 6FF00005 	    MVNGT	R5,#0
 1200 03ec 0025     		MOVLE	R5,#0
 1201 03ee 7047     		_NEXT
 1202              	
 1203              	//    MAX	 ( w w -- max )
 1204              	// 	Leave maximum.
 1205              		_HEADER MAX,3,"MAX"
 1206 03f0 51F8044B 		LDR	R4,[R1],#4
 1207 03f4 AC42     		CMP	R4,R5
 1208 03f6 C8BF     		IT GT 
 1209 03f8 2546     		MOVGT	R5,R4
 1210 03fa 7047     		_NEXT
 1211              	
 1212              	//    MIN	 ( w w -- min )
 1213              	// 	Leave minimum.
 1214              		_HEADER MIN,3,"MIN"
 1215 03fc 51F8044B 		LDR	R4,[R1],#4
 1216 0400 AC42     		CMP	R4,R5
 1217 0402 B8BF     		IT LT
 1218 0404 2546     		MOVLT	R5,R4
 1219 0406 7047     		_NEXT
 1220              	
 1221              	//    +!	 ( w a -- )
 1222              	// 	Add to memory.
 1223              		_HEADER PSTOR,2,"+!"
 1224 0408 51F8044B 		LDR	R4,[R1],#4
 1225 040c 2E68     		LDR	R6,[R5]
 1226 040e 2644     		ADD	R6,R6,R4
 1227 0410 2E60     		STR	R6,[R5]
 1228 0412 51F8045B 		_POP
 1229 0416 7047     		_NEXT
 1230              	
 1231              	//    2!	 ( d a -- )
 1232              	// 	Store double number.
 1233              		_HEADER DSTOR,2,"2!"
 1234 0418 51F8044B 		LDR	R4,[R1],#4
 1235 041c 51F8046B 		LDR	R6,[R1],#4
 1236 0420 45F8044B 		STR	R4,[R5],#4
 1237 0424 2E60     		STR	R6,[R5]
 1238 0426 51F8045B 		_POP
 1239 042a 7047     		_NEXT
 1240              	
 1241              	//    2@	 ( a -- d )
 1242              	// 	Fetch double number.
 1243              		_HEADER DAT,2,"2@"
 1244 042c 6C68     		LDR	R4,[R5,#4]
 1245 042e 41F8044D 		STR	R4,[R1,#-4]!
 1246 0432 2D68     		LDR	R5,[R5]
 1247 0434 7047     		_NEXT
ARM GAS  stm32eforth.s 			page 26


 1248              	
 1249              	//    COUNT	( b -- b+1 c )
 1250              	// 	Fetch length of string.
 1251 0436 00BF     		_HEADER COUNT,5,"COUNT"
 1252 0438 15F8014B 		LDRB	R4,[R5],#1
 1253 043c 41F8045D 		_PUSH
 1254 0440 2546     		MOV	R5,R4
 1255 0442 7047     		_NEXT
 1256              	
 1257              	//    DNEGATE	( d -- -d )
 1258              	// 	Negate double number.
 1259              		_HEADER DNEGA,7,"DNEGATE"
 1260 0444 0C68     		LDR	R4,[R1]
 1261 0446 A6EB0606 		SUB	R6,R6,R6
 1262 044a 341B     		SUBS R4,R6,R4
 1263 044c 66EB0505 		SBC	R5,R6,R5
 1264 0450 0C60     		STR	R4,[R1]
 1265 0452 7047     		_NEXT
 1266              	
 1267              	// **************************************************************************
 1268              	//  System and user variables
 1269              	
 1270              	//    doVAR	( -- a )
 1271              	// 	Run time routine for VARIABLE and CREATE.
 1272              	
 1273              	// 	.word	_DNEGA+MAPOFFSET
 1274              	// _DOVAR	.byte  COMPO+5
 1275              	// 	.ascii "doVAR"
 1276              	// 	.p2align 2 	
 1277              	DOVAR:
 1278 0454 41F8045D 		_PUSH
 1279 0458 AEF10105 		SUB	R5,LR,#1		//  CLEAR B0
 1280 045c 52F804FB 		_UNNEST
 1281              	
 1282              	//    doCON	( -- a ) 
 1283              	// 	Run time routine for CONSTANT.
 1284              	
 1285              	// 	.word	_DOVAR+MAPOFFSET
 1286              	// _DOCON	.byte  COMPO+5
 1287              	// 	.ascii "doCON"
 1288              	// 	.p2align 2 	
 1289              	DOCON:
 1290 0460 41F8045D 		_PUSH
 1291 0464 5EF8015C 		LDR	R5,[LR,#-1]	//  clear b0
 1292 0468 52F804FB 		_UNNEST
 1293              	
 1294              	/***********************
 1295              	  system variables 
 1296              	***********************/
 1297              	
 1298              	 // SEED ( -- a)
 1299              	 // return PRNG seed address 
 1300              		_HEADER SEED,4,"SEED"
 1301 046c 41F8045D 		_PUSH 
 1302 0470 03F10405 		ADD R5,R3,#SEED_OFS
 1303 0474 7047     		_NEXT 	
 1304              	
ARM GAS  stm32eforth.s 			page 27


 1305              	//  MSEC ( -- a)
 1306              	// return address of milliseconds counter
 1307 0476 00BF     		_HEADER MSEC,4,"MSEC"
 1308 0478 41F8045D 	  _PUSH
 1309 047c 03F10805 	  ADD R5,R3,#TICKS_OFS
 1310 0480 7047     	  _NEXT 
 1311              	
 1312              	// TIMER ( -- a )
 1313              	// count down timer 
 1314 0482 00BF     		_HEADER TIMER,5,"TIMER"
 1315 0484 41F8045D 	  _PUSH 
 1316 0488 03F10C05 	  ADD R5,R3,#TIMER_OFS
 1317 048c 7047     	  _NEXT
 1318              	
 1319              	//    'BOOT	 ( -- a )
 1320              	// 	Application.
 1321 048e 00BF     		_HEADER TBOOT,5,"'BOOT"
 1322 0490 41F8045D 		_PUSH
 1323 0494 03F11805 		ADD	R5,R3,#BOOT_OFS 
 1324 0498 7047     		_NEXT
 1325              	
 1326              	//    BASE	( -- a )
 1327              	// 	Storage of the radix base for numeric I/O.
 1328 049a 00BF     		_HEADER BASE,4,"BASE"
 1329 049c 41F8045D 		_PUSH
 1330 04a0 03F11C05 		ADD	R5,R3,#BASE_OFS
 1331 04a4 7047     		_NEXT
 1332              	
 1333              	//    tmp	 ( -- a )
 1334              	// 	A temporary storage location used in parse and find.
 1335              	
 1336              	// 	.word	_BASE+MAPOFFSET
 1337              	// _TEMP	.byte   COMPO+3
 1338              	// 	.ascii "tmp"
 1339              	// 	.p2align 2 	
 1340              	TEMP:
 1341 04a6 41F8045D 		_PUSH
 1342 04aa 03F12005 		ADD	R5,R3,#TMP_OFS
 1343 04ae 7047     		_NEXT
 1344              	
 1345              	//    SPAN	( -- a )
 1346              	// 	Hold character count received by EXPECT.
 1347              		_HEADER SPAN,4,"SPAN"
 1348 04b0 41F8045D 		_PUSH
 1349 04b4 03F12405 		ADD	R5,R3,#SPAN_OFS
 1350 04b8 7047     		_NEXT
 1351              	
 1352              	//    >IN	 ( -- a )
 1353              	// 	Hold the character pointer while parsing input stream.
 1354 04ba 00BF     		_HEADER INN,3,">IN"
 1355 04bc 41F8045D 		_PUSH
 1356 04c0 03F12805 		ADD	R5,R3,#TOIN_OFS
 1357 04c4 7047     		_NEXT
 1358              	
 1359              	//    #TIB	( -- a )
 1360              	// 	Hold the current count and address of the terminal input buffer.
 1361 04c6 00BF     		_HEADER NTIB,4,"#TIB"
ARM GAS  stm32eforth.s 			page 28


 1362 04c8 41F8045D 		_PUSH
 1363 04cc 03F12C05 		ADD	R5,R3,#NTIB_OFS
 1364 04d0 7047     		_NEXT
 1365              	
 1366              	//    'EVAL	( -- a )
 1367              	// 	Execution vector of EVAL.
 1368 04d2 00BF     		_HEADER TEVAL,5,"'EVAL"
 1369 04d4 41F8045D 		_PUSH
 1370 04d8 03F13405 		ADD	R5,R3,#EVAL_OFS
 1371 04dc 7047     		_NEXT
 1372              	
 1373              	//    HLD	 ( -- a )
 1374              	// 	Hold a pointer in building a numeric output string.
 1375 04de 00BF     		_HEADER HLD,3,"HLD"
 1376 04e0 41F8045D 		_PUSH
 1377 04e4 03F13805 		ADD	R5,R3,#HLD_OFS
 1378 04e8 7047     		_NEXT
 1379              	
 1380              	//    CONTEXT	( -- a )
 1381              	// 	A area to specify vocabulary search order.
 1382 04ea 00BF     		_HEADER CNTXT,7,"CONTEXT"
 1383              	CRRNT:
 1384 04ec 41F8045D 		_PUSH
 1385 04f0 03F13C05 		ADD	R5,R3,#CTXT_OFS
 1386 04f4 7047     		_NEXT
 1387              	
 1388              	//    CP	( -- a )
 1389              	// 	Point to top name in RAM vocabulary.
 1390 04f6 00BF     		_HEADER CPP,2,"CP"
 1391 04f8 41F8045D 		_PUSH
 1392 04fc 03F14405 		ADD	R5,R3,#USER_CTOP_OFS
 1393 0500 7047     		_NEXT
 1394              	
 1395              	//   FCP ( -- a )
 1396              	//  Point ot top of Forth system dictionary
 1397 0502 00BF     		_HEADER FCP,3,"FCP"
 1398 0504 41F8045D 		_PUSH 
 1399 0508 03F14005 		ADD R5,R3,#FORTH_CTOP_OFS 
 1400 050c 7047     		_NEXT 
 1401              	
 1402              	//    LAST	( -- a )
 1403              	// 	Point to the last name in the name dictionary.
 1404 050e 00BF     		_HEADER LAST,4,"LAST"
 1405 0510 41F8045D 		_PUSH
 1406 0514 03F14805 		ADD	R5,R3,#LASTN_OFS
 1407 0518 7047     		_NEXT
 1408              	
 1409              	/***********************
 1410              		system constants 
 1411              	***********************/
 1412              	
 1413              	//	USER_BEGIN ( -- a )
 1414              	//  where user area begin in RAM
 1415 051a 00BF     		_HEADER USER_BEGIN,10,"USER_BEGIN"
 1416 051c 41F8045D 		_PUSH 
 1417 0520 004D     		ldr r5,USR_BGN_ADR 
 1418 0522 7047     		_NEXT 
ARM GAS  stm32eforth.s 			page 29


 1419              	USR_BGN_ADR:
 1420 0524 901D0018 	.word CTOP+MAPOFFSET 
 1421              	
 1422              	//  USER_END ( -- a )
 1423              	//  where user area end in RAM 
 1424              		_HEADER USER_END,8,"USER_END"
 1425 0528 41F8045D 		_PUSH 
 1426 052c 4FF49C45 		_MOV32 R5,DEND 
 1426      C2F20005 
 1427 0534 7047     		_NEXT 
 1428              	
 1429              	//  IMG_ADR ( -- a )
 1430              	//  where user image is saved in FLASH
 1431 0536 00BF     		_HEADER IMG_ADR,7,"IMG_ADR"
 1432 0538 41F8045D 		_PUSH
 1433 053c 004D     		ldr r5,USR_IMG_ADR   
 1434 053e 7047     		_NEXT 
 1435              	USR_IMG_ADR:
 1436 0540 00000000 		.word USER_SPACE 
 1437              	
 1438              	//  IMG_SIGN ( -- a )
 1439              	// image signature 
 1440              		_HEADER IMG_SIGN,8,"IMG_SIGN"
 1441 0544 41F8045D 		_PUSH 
 1442 0548 03F11405 		ADD r5,r3,#IMG_SIGN_OFS 
 1443 054c 7047     		_NEXT 
 1444              	
 1445              	/* *********************
 1446              	  Common functions
 1447              	***********************/
 1448              	
 1449              	//    WITHIN	( u ul uh -- t )
 1450              	// 	Return true if u is within the range of ul and uh.
 1451 054e 00BF     		_HEADER WITHI,6,"WITHIN"
 1452 0550 42F804ED 		_NEST
 1453 0554 FFF77AFE 		BL	OVER
 1454 0558 FFF7ACFE 		BL	SUBB
 1455 055c FFF760FE 		BL	TOR
 1456 0560 FFF7A8FE 		BL	SUBB
 1457 0564 FFF752FE 		BL	RFROM
 1458 0568 FFF72AFF 		BL	ULESS
 1459 056c 52F804FB 		_UNNEST
 1460              	
 1461              	//  Divide
 1462              	
 1463              	//    UM/MOD	( udl udh u -- ur uq )
 1464              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1465              		_HEADER UMMOD,6,"UM/MOD"
 1466 0570 4FF00107 		MOV	R7,#1
 1467 0574 51F8044B 		LDR	R4,[R1],#4
 1468 0578 0E68     		LDR	R6,[R1]
 1469              	UMMOD0:
 1470 057a B619     		ADDS	R6,R6,R6
 1471 057c 6441     		ADCS	R4,R4,R4
 1472 057e 04D3     		BCC	UMMOD1
 1473 0580 A4EB0504 		SUB	R4,R4,R5
 1474 0584 06F10106 		ADD	R6,R6,#1
ARM GAS  stm32eforth.s 			page 30


 1475 0588 04E0     		B UMMOD2
 1476              	UMMOD1:
 1477 058a 641B     		SUBS	R4,R4,R5 
 1478 058c 28BF     		IT CS 
 1479 058e 0136     		ADDCS	R6,R6,#1
 1480 0590 00D2     		BCS	UMMOD2
 1481 0592 2C44     		ADD	R4,R4,R5
 1482              	UMMOD2:
 1483 0594 FF19     		ADDS	R7,R7,R7
 1484 0596 F0D3     		BCC	UMMOD0
 1485 0598 3546     		MOV	R5,R6
 1486 059a 0C60     		STR	R4,[R1]
 1487 059c 7047     		_NEXT
 1488              	
 1489              	//    M/MOD	( d n -- r q )
 1490              	// 	Signed floored divide of double by single. Return mod and quotient.
 1491 059e 00BF     		_HEADER MSMOD,5,"M/MOD"
 1492 05a0 42F804ED 		_NEST
 1493 05a4 FFF74AFE 		BL	DUPP
 1494 05a8 FFF754FE 		BL	ZLESS
 1495 05ac FFF746FE 		BL	DUPP
 1496 05b0 FFF736FE 		BL	TOR
 1497 05b4 FFF706FE 		BL	QBRAN
 1498 05b8 CC050018 		.word	MMOD1+MAPOFFSET
 1499 05bc FFF7E6FE 		BL	NEGAT
 1500 05c0 FFF72EFE 		BL	TOR
 1501 05c4 FFF73EFF 		BL	DNEGA
 1502 05c8 FFF720FE 		BL	RFROM
 1503              	MMOD1:
 1504 05cc FFF728FE 	  BL	TOR
 1505 05d0 FFF734FE 		BL	DUPP
 1506 05d4 FFF73EFE 		BL	ZLESS
 1507 05d8 FFF7F4FD 		BL	QBRAN
 1508 05dc E8050018 		.word	MMOD2+MAPOFFSET
 1509 05e0 FFF71AFE 		BL	RAT
 1510 05e4 FFF762FE 		BL	PLUS
 1511              	MMOD2:
 1512 05e8 FFF710FE 	  BL	RFROM
 1513 05ec FFF7C0FF 		BL	UMMOD
 1514 05f0 FFF70CFE 		BL	RFROM
 1515 05f4 FFF7E6FD 		BL	QBRAN
 1516 05f8 08060018 		.word	MMOD3+MAPOFFSET
 1517 05fc FFF722FE 		BL	SWAP
 1518 0600 FFF7C4FE 		BL	NEGAT
 1519 0604 FFF71EFE 		BL	SWAP
 1520              	MMOD3:   
 1521 0608 52F804FB 		_UNNEST
 1522              	
 1523              	//    /MOD	( n n -- r q )
 1524              	// 	Signed divide. Return mod and quotient.
 1525              		_HEADER SLMOD,4,"/MOD"
 1526 060c 42F804ED 		_NEST
 1527 0610 FFF71CFE 		BL	OVER
 1528 0614 FFF71EFE 		BL	ZLESS
 1529 0618 FFF714FE 		BL	SWAP
 1530 061c FFF7C0FF 		BL	MSMOD
 1531 0620 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 31


 1532              	
 1533              	//    MOD	 ( n n -- r )
 1534              	// 	Signed divide. Return mod only.
 1535              		_HEADER MODD,3,"MODD"
 1536 0624 42F804ED 		_NEST
 1537 0628 FFF7F0FF 		BL	SLMOD
 1538 062c FFF702FE 		BL	DROP
 1539 0630 52F804FB 		_UNNEST
 1540              	
 1541              	//    /	   ( n n -- q )
 1542              	// 	Signed divide. Return quotient only.
 1543              		_HEADER SLASH,1,"/"
 1544 0634 42F804ED 		_NEST
 1545 0638 FFF7E8FF 		BL	SLMOD
 1546 063c FFF702FE 		BL	SWAP
 1547 0640 FFF7F8FD 		BL	DROP
 1548 0644 52F804FB 		_UNNEST
 1549              	
 1550              	//    */MOD	( n1 n2 n3 -- r q )
 1551              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 1552              		_HEADER SSMOD,5,"*/MOD"
 1553 0648 42F804ED 		_NEST
 1554 064c FFF7E8FD 		BL	TOR
 1555 0650 FFF742FE 		BL	MSTAR
 1556 0654 FFF7DAFD 		BL	RFROM
 1557 0658 FFF7A2FF 		BL	MSMOD
 1558 065c 52F804FB 		_UNNEST
 1559              	
 1560              	//    */	  ( n1 n2 n3 -- q )
 1561              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 1562              		_HEADER STASL,2,"*/"
 1563 0660 42F804ED 		_NEST
 1564 0664 FFF7F0FF 		BL	SSMOD
 1565 0668 FFF7ECFD 		BL	SWAP
 1566 066c FFF7E2FD 		BL	DROP
 1567 0670 52F804FB 		_UNNEST
 1568              	
 1569              	// **************************************************************************
 1570              	//  Miscellaneous
 1571              	
 1572              	//    ALIGNED	( b -- a )
 1573              	// 	Align address to the cell boundary.
 1574              		_HEADER ALGND,7,"ALIGNED"
 1575 0674 05F10305 		ADD	R5,R5,#3
 1576 0678 6FF00304 		MVN	R4,#3
 1577 067c 05EA0405 		AND	R5,R5,R4
 1578 0680 7047     		_NEXT
 1579              	
 1580              	//    >CHAR	( c -- c )
 1581              	// 	Filter non-printing characters.
 1582 0682 00BF     		_HEADER TCHAR,5,">CHAR"
 1583 0684 42F804ED 		_NEST
 1584 0688 FFF77FFD 		_DOLIT 0x7F
 1584      7F000000 
 1585 0690 FFF7E6FD 		BL	ANDD
 1586 0694 FFF7D2FD 		BL	DUPP	// mask msb
 1587 0698 FFF73CFE 		BL	BLANK
ARM GAS  stm32eforth.s 			page 32


 1588 069c FFF775FD 		_DOLIT 127
 1588      7F000000 
 1589 06a4 FFF754FF 		BL	WITHI	// check for printable
 1590 06a8 FFF76CFE 		BL	INVER
 1591 06ac FFF78AFD 		BL	QBRAN
 1592 06b0 C0060018 		.word	TCHA1+MAPOFFSET
 1593 06b4 FFF7BEFD 		BL	DROP
 1594 06b8 FFF767FD 		_DOLIT 	'_'	// replace non-printables
 1594      5F000000 
 1595              	TCHA1:
 1596 06c0 52F804FB 		  _UNNEST
 1597              	
 1598              	//    DEPTH	( -- n )
 1599              	// 	Return the depth of the data stack.
 1600              		_HEADER DEPTH,5,"DEPTH"
 1601 06c4 4FF49D46 		_MOV32 R6,SPP 
 1601      C2F20006 
 1602 06cc A6EB0106 		SUB	R6,R6,R1
 1603 06d0 41F8045D 		_PUSH
 1604 06d4 4FEAA605 		ASR	R5,R6,#2
 1605 06d8 7047     		_NEXT  
 1606              	
 1607              	//    PICK	( ... +n -- ... w )
 1608              	// 	Copy the nth stack item to tos.
 1609 06da 00BF     		_HEADER PICK,4,"PICK"
 1610 06dc 42F804ED 		_NEST
 1611 06e0 FFF700FE 		BL	ONEP
 1612 06e4 FFF71CFE 		BL	CELLS
 1613 06e8 FFF7A0FD 		BL	SPAT
 1614 06ec FFF7DEFD 		BL	PLUS
 1615 06f0 FFF782FD 		BL	AT
 1616 06f4 52F804FB 		_UNNEST
 1617              	
 1618              	// **************************************************************************
 1619              	//  Memory access
 1620              	
 1621              	//    HERE	( -- a )
 1622              	// 	Return the top of the code dictionary.
 1623              		_HEADER HERE,4,"HERE"
 1624 06f8 42F804ED 		_NEST
 1625 06fc FFF7FCFE 		BL	CPP
 1626 0700 FFF77AFD 		BL	AT
 1627 0704 52F804FB 		_UNNEST
 1628              		
 1629              	//    PAD	 ( -- a )
 1630              	// 	Return the address of a temporary buffer.
 1631              		_HEADER PAD,4,"PAD"
 1632 0708 42F804ED 		_NEST
 1633 070c FFF7F4FF 		BL	HERE
 1634 0710 05F15005 		ADD	R5,R5,#80
 1635 0714 52F804FB 		_UNNEST
 1636              	
 1637              	//    TIB	 ( -- a )
 1638              	// 	Return the address of the terminal input buffer.
 1639              		_HEADER TIB,3,"TIB"
 1640 0718 41F8045D 		_PUSH
 1641 071c 1D6B     		ldr r5,[r3,#TIB_OFS]
ARM GAS  stm32eforth.s 			page 33


 1642 071e 7047     		_NEXT
 1643              	
 1644              	//    @EXECUTE	( a -- )
 1645              	// 	Execute vector stored in address a.
 1646              		_HEADER ATEXE,8,"@EXECUTE"
 1647 0720 2C00     		MOVS	R4,R5
 1648 0722 51F8045B 		_POP
 1649 0726 2468     		LDR	R4,[R4]
 1650 0728 44F00104 		ORR	R4,R4,#1
 1651 072c 18BF     	    IT NE 
 1652 072e 2047     		BXNE	R4
 1653 0730 7047     		_NEXT
 1654              	
 1655              	//    CMOVE	( b1 b2 u -- )
 1656              	// 	Copy u bytes from b1 to b2.
 1657 0732 00BF     		_HEADER CMOVE,5,"CMOVE"
 1658 0734 51F8046B 		LDR	R6,[R1],#4
 1659 0738 51F8047B 		LDR	R7,[R1],#4
 1660 073c 03E0     		B CMOV1
 1661              	CMOV0:
 1662 073e 17F8014B 		LDRB	R4,[R7],#1
 1663 0742 06F8014B 		STRB	R4,[R6],#1
 1664              	CMOV1:
 1665 0746 2D00     		MOVS	R5,R5
 1666 0748 02D0     		BEQ	CMOV2
 1667 074a A5F10105 		SUB	R5,R5,#1
 1668 074e F6E7     		B CMOV0
 1669              	CMOV2:
 1670 0750 51F8045B 		_POP
 1671 0754 7047     		_NEXT
 1672              	
 1673              	//    MOVE	( a1 a2 u -- )
 1674              	// 	Copy u words from a1 to a2.
 1675 0756 00BF     		_HEADER MOVE,4,"MOVE"
 1676 0758 25F00305 		AND	R5,R5,#-4
 1677 075c 51F8046B 		LDR	R6,[R1],#4
 1678 0760 51F8047B 		LDR	R7,[R1],#4
 1679 0764 03E0     		B MOVE1
 1680              	MOVE0:
 1681 0766 57F8044B 		LDR	R4,[R7],#4
 1682 076a 46F8044B 		STR	R4,[R6],#4
 1683              	MOVE1:
 1684 076e 2D00     		MOVS	R5,R5
 1685 0770 02D0     		BEQ	MOVE2
 1686 0772 A5F10405 		SUB	R5,R5,#4
 1687 0776 F6E7     		B MOVE0
 1688              	MOVE2:
 1689 0778 51F8045B 		_POP
 1690 077c 7047     		_NEXT
 1691              	
 1692              	//    FILL	( b u c -- )
 1693              	// 	Fill u bytes of character c to area beginning at b.
 1694 077e 00BF     		_HEADER FILL,4,"FILL"
 1695 0780 51F8046B 		LDR	R6,[R1],#4
 1696 0784 51F8047B 		LDR	R7,[R1],#4
 1697              	FILL0:
 1698 0788 00E0     		B FILL1
ARM GAS  stm32eforth.s 			page 34


 1699 078a 2D46     		MOV	R5,R5
 1700              	FILL1:
 1701 078c 07F8015B 		STRB	R5,[R7],#1
 1702 0790 3600     		MOVS	R6,R6
 1703 0792 02D0     		BEQ	FILL2
 1704 0794 A6F10106 		SUB	R6,R6,#1
 1705 0798 F6E7     		B FILL0
 1706              	FILL2:
 1707 079a 51F8045B 		_POP
 1708 079e 7047     		_NEXT
 1709              	
 1710              	//    PACK$	( b u a -- a )
 1711              	// 	Build a counted word with u characters from b. Null fill.
 1712              		_HEADER PACKS,5,"PACK$"
 1713 07a0 42F804ED 		_NEST
 1714 07a4 FFF766FF 		BL	ALGND
 1715 07a8 FFF748FD 		BL	DUPP
 1716 07ac FFF738FD 		BL	TOR			// strings only on cell boundary
 1717 07b0 FFF74CFD 		BL	OVER
 1718 07b4 FFF77AFD 		BL	PLUS
 1719 07b8 FFF794FD 		BL	ONEP
 1720 07bc FFF7E5FC 		_DOLIT 0xFFFFFFFC
 1720      FCFFFFFF 
 1721 07c4 FFF74CFD 		BL	ANDD			// count mod cell
 1722 07c8 FFF7DFFC 		_DOLIT 	0
 1722      00000000 
 1723 07d0 FFF738FD 		BL	SWAP
 1724 07d4 FFF70AFD 		BL	STORE			// null fill cell
 1725 07d8 FFF71EFD 		BL	RAT
 1726 07dc FFF7C2FD 		BL	DDUP
 1727 07e0 FFF70CFD 		BL	CSTOR
 1728 07e4 FFF77EFD 		BL	ONEP			// save count
 1729 07e8 FFF72CFD 		BL	SWAP
 1730 07ec FFF7A2FF 		BL	CMOVE
 1731 07f0 FFF70CFD 		BL	RFROM
 1732 07f4 52F804FB 		_UNNEST   			// move string
 1733              	
 1734              	// **************************************************************************
 1735              	//  Numeric output, single precision
 1736              	
 1737              	//    DIGIT	( u -- c )
 1738              	// 	Convert digit u to a character.
 1739              		_HEADER DIGIT,5,"DIGIT"
 1740 07f8 42F804ED 		_NEST
 1741 07fc FFF7C5FC 		_DOLIT 9
 1741      09000000 
 1742 0804 FFF722FD 		BL	OVER
 1743 0808 FFF7E2FD 		BL	LESS
 1744 080c 05F00705 		AND	R5,R5,#7
 1745 0810 FFF74CFD 		BL	PLUS
 1746 0814 05F13005 		ADD	R5,R5,#'0'
 1747 0818 52F804FB 		_UNNEST
 1748              	
 1749              	//    EXTRACT	( n base -- n c )
 1750              	// 	Extract the least significant digit from n.
 1751              		_HEADER EXTRC,7,"EXTRACT"
 1752 081c 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 35


 1753 0820 FFF7B3FC 		_DOLIT 0
 1753      00000000 
 1754 0828 FFF70CFD 		BL	SWAP
 1755 082c FFF7A0FE 		BL	UMMOD
 1756 0830 FFF708FD 		BL	SWAP
 1757 0834 FFF7E0FF 		BL	DIGIT
 1758 0838 52F804FB 		_UNNEST
 1759              	
 1760              	//    <#	  ( -- )
 1761              	// 	Initiate the numeric output process.
 1762              		_HEADER BDIGS,2,"<#"
 1763 083c 42F804ED 		_NEST
 1764 0840 FFF762FF 		BL	PAD
 1765 0844 FFF74CFE 		BL	HLD
 1766 0848 FFF7D0FC 		BL	STORE
 1767 084c 52F804FB 		_UNNEST
 1768              	
 1769              	//    HOLD	( c -- )
 1770              	// 	Insert a character into the numeric output string.
 1771              		_HEADER HOLD,4,"HOLD"
 1772 0850 42F804ED 		_NEST
 1773 0854 FFF744FE 		BL	HLD
 1774 0858 FFF7CEFC 		BL	AT
 1775 085c FFF746FD 		BL	ONEM
 1776 0860 FFF7ECFC 		BL	DUPP
 1777 0864 FFF73CFE 		BL	HLD
 1778 0868 FFF7C0FC 		BL	STORE
 1779 086c FFF7C6FC 		BL	CSTOR
 1780 0870 52F804FB 		_UNNEST
 1781              	
 1782              	//    #	   ( u -- u )
 1783              	// 	Extract one digit from u and append the digit to output string.
 1784              		_HEADER DIG,1,"#"
 1785 0874 42F804ED 		_NEST
 1786 0878 FFF710FE 		BL	BASE
 1787 087c FFF7BCFC 		BL	AT
 1788 0880 FFF7CCFF 		BL	EXTRC
 1789 0884 FFF7E4FF 		BL	HOLD
 1790 0888 52F804FB 		_UNNEST
 1791              	
 1792              	//    #S	  ( u -- 0 )
 1793              	// 	Convert u until all digits are added to the output string.
 1794              		_HEADER DIGS,2,"#S"
 1795 088c 42F804ED 		_NEST
 1796              	DIGS1:
 1797 0890 FFF7F0FF 	    BL	DIG
 1798 0894 FFF7D2FC 		BL	DUPP
 1799 0898 FFF794FC 		BL	QBRAN
 1800 089c A2080018 		.word	DIGS2+MAPOFFSET
 1801 08a0 F6E7     		B	DIGS1
 1802              	DIGS2:
 1803 08a2 52F804FB 		  _UNNEST
 1804              	
 1805              	//    SIGN	( n -- )
 1806              	// 	Add a minus sign to the numeric output string.
 1807 08a6 00BF     		_HEADER SIGN, 4,"SIGN"
 1808 08a8 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 36


 1809 08ac FFF7D2FC 		BL	ZLESS
 1810 08b0 FFF788FC 		BL	QBRAN
 1811 08b4 C4080018 		.word	SIGN1+MAPOFFSET
 1812 08b8 FFF767FC 		_DOLIT '-'
 1812      2D000000 
 1813 08c0 FFF7C6FF 		BL	HOLD
 1814              	SIGN1:
 1815 08c4 52F804FB 		  _UNNEST
 1816              	
 1817              	//    #>	  ( w -- b u )
 1818              	// 	Prepare the outputDCB to be TYPE'd.
 1819              		_HEADER EDIGS,2,"#>"
 1820 08c8 42F804ED 		_NEST
 1821 08cc FFF7B2FC 		BL	DROP
 1822 08d0 FFF706FE 		BL	HLD
 1823 08d4 FFF790FC 		BL	AT
 1824 08d8 FFF716FF 		BL	PAD
 1825 08dc FFF7B6FC 		BL	OVER
 1826 08e0 FFF7E8FC 		BL	SUBB
 1827 08e4 52F804FB 		_UNNEST
 1828              	
 1829              	//    str	 ( n -- b u )
 1830              	// 	Convert a signed integer to a numeric string.
 1831              	
 1832              	// 	.word	_EDIGS+MAPOFFSET
 1833              	// _STRR	.byte  3
 1834              	// 	.ascii "str"
 1835              	// 	.p2align 2 	
 1836              	STRR:
 1837 08e8 42F804ED 		_NEST
 1838 08ec FFF7A6FC 		BL	DUPP
 1839 08f0 FFF796FC 		BL	TOR
 1840 08f4 FFF74EFD 		BL	ABSS
 1841 08f8 FFF7A0FF 		BL	BDIGS
 1842 08fc FFF7C6FF 		BL	DIGS
 1843 0900 FFF784FC 		BL	RFROM
 1844 0904 FFF7D0FF 		BL	SIGN
 1845 0908 FFF7DEFF 		BL	EDIGS
 1846 090c 52F804FB 		_UNNEST
 1847              	
 1848              	//    HEX	 ( -- )
 1849              	// 	Use radix 16 as base for numeric conversions.
 1850              		_HEADER HEX,3,"HEX"
 1851 0910 42F804ED 		_NEST
 1852 0914 FFF739FC 		_DOLIT 16
 1852      10000000 
 1853 091c FFF7BEFD 		BL	BASE
 1854 0920 FFF764FC 		BL	STORE
 1855 0924 52F804FB 		_UNNEST
 1856              	
 1857              	//    DECIMAL	( -- )
 1858              	// 	Use radix 10 as base for numeric conversions.
 1859              		_HEADER DECIM,7,"DECIMAL"
 1860 0928 42F804ED 		_NEST
 1861 092c FFF72DFC 		_DOLIT 10
 1861      0A000000 
 1862 0934 FFF7B2FD 		BL	BASE
ARM GAS  stm32eforth.s 			page 37


 1863 0938 FFF758FC 		BL	STORE
 1864 093c 52F804FB 		_UNNEST
 1865              	
 1866              	// **************************************************************************
 1867              	//  Numeric input, single precision
 1868              	
 1869              	//    DIGIT?	( c base -- u t )
 1870              	// 	Convert a character to its numeric value. A flag indicates success.
 1871              		_HEADER DIGTQ,6,"DIGIT?"
 1872 0940 42F804ED 		_NEST
 1873 0944 FFF76CFC 		BL	TOR
 1874 0948 FFF71FFC 		_DOLIT '0'
 1874      30000000 
 1875 0950 FFF7B0FC 		BL	SUBB
 1876 0954 FFF719FC 		_DOLIT 9
 1876      09000000 
 1877 095c FFF776FC 		BL	OVER
 1878 0960 FFF736FD 		BL	LESS
 1879 0964 FFF72EFC 		BL	QBRAN
 1880 0968 8C090018 		.word	DGTQ1+MAPOFFSET
 1881 096c FFF70DFC 		_DOLIT 7
 1881      07000000 
 1882 0974 FFF79EFC 		BL	SUBB
 1883 0978 FFF760FC 		BL	DUPP
 1884 097c FFF705FC 		_DOLIT 10
 1884      0A000000 
 1885 0984 FFF724FD 		BL	LESS
 1886 0988 FFF770FC 		BL	ORR
 1887              	DGTQ1:
 1888 098c FFF756FC 	  BL	DUPP
 1889 0990 FFF73CFC 		BL	RFROM
 1890 0994 FFF714FD 		BL	ULESS
 1891 0998 52F804FB 		_UNNEST
 1892              	
 1893              	//    NUMBER?	( a -- n T | a F )
 1894              	// 	Convert a number word to integer. Push a flag on tos.
 1895              		_HEADER NUMBQ,7,"NUMBER?"
 1896 099c 42F804ED 		_NEST
 1897 09a0 FFF77CFD 		BL	BASE
 1898 09a4 FFF728FC 		BL	AT
 1899 09a8 FFF73AFC 		BL	TOR
 1900 09ac FFF7EDFB 		_DOLIT 0
 1900      00000000 
 1901 09b4 FFF74AFC 		BL	OVER
 1902 09b8 FFF73EFD 		BL	COUNT
 1903 09bc FFF746FC 		BL	OVER
 1904 09c0 FFF722FC 		BL	CAT
 1905 09c4 FFF7E1FB 		_DOLIT '$'
 1905      24000000 
 1906 09cc FFF7F0FC 		BL	EQUAL
 1907 09d0 FFF7F8FB 		BL	QBRAN
 1908 09d4 EC090018 		.word	NUMQ1+MAPOFFSET
 1909 09d8 FFF79AFF 		BL	HEX
 1910 09dc FFF732FC 		BL	SWAP
 1911 09e0 FFF780FC 		BL	ONEP
 1912 09e4 FFF72EFC 		BL	SWAP
 1913 09e8 FFF780FC 		BL	ONEM
ARM GAS  stm32eforth.s 			page 38


 1914              	NUMQ1:
 1915 09ec FFF72EFC 		BL	OVER
 1916 09f0 FFF70AFC 		BL	CAT
 1917 09f4 FFF7C9FB 		_DOLIT '-'
 1917      2D000000 
 1918 09fc FFF7D8FC 		BL	EQUAL
 1919 0a00 FFF70EFC 		BL	TOR
 1920 0a04 FFF71EFC 		BL	SWAP
 1921 0a08 FFF706FC 		BL	RAT
 1922 0a0c FFF752FC 		BL	SUBB
 1923 0a10 FFF718FC 		BL	SWAP
 1924 0a14 FFF700FC 		BL	RAT
 1925 0a18 FFF748FC 		BL	PLUS
 1926 0a1c FFF790FC 		BL	QDUP
 1927 0a20 FFF7D0FB 		BL	QBRAN
 1928 0a24 B00A0018 		.word	NUMQ6+MAPOFFSET
 1929 0a28 FFF760FC 		BL	ONEM
 1930 0a2c FFF7F8FB 		BL	TOR
 1931              	NUMQ2:
 1932 0a30 FFF704FC 		BL	DUPP
 1933 0a34 FFF7F4FB 		BL	TOR
 1934 0a38 FFF7E6FB 		BL	CAT
 1935 0a3c FFF72EFD 		BL	BASE
 1936 0a40 FFF7DAFB 		BL	AT
 1937 0a44 FFF77CFF 		BL	DIGTQ
 1938 0a48 FFF7BCFB 		BL	QBRAN
 1939 0a4c 940A0018 		.word	NUMQ4+MAPOFFSET
 1940 0a50 FFF7F8FB 		BL	SWAP
 1941 0a54 FFF722FD 		BL	BASE
 1942 0a58 FFF7CEFB 		BL	AT
 1943 0a5c FFF730FC 		BL	STAR
 1944 0a60 FFF724FC 		BL	PLUS
 1945 0a64 FFF7D2FB 		BL	RFROM
 1946 0a68 FFF73CFC 		BL	ONEP
 1947 0a6c FFF79BFB 		BL	DONXT
 1948 0a70 300A0018 		.word	NUMQ2+MAPOFFSET
 1949 0a74 FFF7D0FB 		BL	RAT
 1950 0a78 FFF7E4FB 		BL	SWAP
 1951 0a7c FFF7DAFB 		BL	DROP
 1952 0a80 FFF7A0FB 		BL	QBRAN
 1953 0a84 8C0A0018 		.word	NUMQ3+MAPOFFSET
 1954 0a88 FFF780FC 		BL	NEGAT
 1955              	NUMQ3:
 1956 0a8c FFF7DAFB 		BL	SWAP
 1957 0a90 00F00CB8 		B.W	NUMQ5
 1958              	NUMQ4:
 1959 0a94 FFF7BAFB 		BL	RFROM
 1960 0a98 FFF7B8FB 		BL	RFROM
 1961 0a9c FFF75CFC 		BL	DDROP
 1962 0aa0 FFF75AFC 		BL	DDROP
 1963 0aa4 FFF771FB 		_DOLIT	0
 1963      00000000 
 1964              	NUMQ5:
 1965 0aac FFF7C6FB 		BL	DUPP
 1966              	NUMQ6:
 1967 0ab0 FFF7ACFB 		BL	RFROM
 1968 0ab4 FFF750FC 		BL	DDROP
ARM GAS  stm32eforth.s 			page 39


 1969 0ab8 FFF7A8FB 		BL	RFROM
 1970 0abc FFF7EEFC 		BL	BASE
 1971 0ac0 FFF794FB 		BL	STORE
 1972 0ac4 52F804FB 		_UNNEST
 1973              	
 1974              	// **************************************************************************
 1975              	//  Basic I/O
 1976              	
 1977              	//    KEY	 ( -- c )
 1978              	// 	Wait for and return an input character.
 1979              		_HEADER KEY,3,"KEY"
 1980 0ac8 42F804ED 		_NEST
 1981              	KEY1:
 1982 0acc FFF73AFB 		BL	QRX
 1983 0ad0 FFF778FB 		BL	QBRAN
 1984 0ad4 CC0A0018 		.word	KEY1+MAPOFFSET
 1985 0ad8 52F804FB 		_UNNEST
 1986              	
 1987              	//    SPACE	( -- )
 1988              	// 	Send the blank character to the output device.
 1989              		_HEADER SPACE,5,"SPACE"
 1990 0adc 42F804ED 		_NEST
 1991 0ae0 FFF718FC 		BL	BLANK
 1992 0ae4 FFF744FB 		BL	EMIT
 1993 0ae8 52F804FB 		_UNNEST
 1994              	
 1995              	//    SPACES	( +n -- )
 1996              	// 	Send n spaces to the output device.
 1997              		_HEADER SPACS,6,"SPACES"
 1998 0aec 42F804ED 		_NEST
 1999 0af0 FFF74BFB 		_DOLIT 0
 1999      00000000 
 2000 0af8 FFF77AFC 		BL	MAX
 2001 0afc FFF790FB 		BL	TOR
 2002 0b00 00F002B8 		B.W	CHAR2
 2003              	CHAR1:
 2004 0b04 FFF7EAFF 		BL	SPACE
 2005              	CHAR2:
 2006 0b08 FFF74DFB 		BL	DONXT
 2007 0b0c 040B0018 		.word	CHAR1+MAPOFFSET
 2008 0b10 52F804FB 		_UNNEST
 2009              	
 2010              	//    TYPE	( b u -- )
 2011              	// 	Output u characters from b.
 2012              		_HEADER TYPEE,4,"TYPE"
 2013 0b14 42F804ED 		_NEST
 2014 0b18 FFF782FB 		BL  TOR   // ( a+1 -- R: u )
 2015 0b1c 00F006B8 		B.W	TYPE2
 2016              	TYPE1:  
 2017 0b20 FFF78AFC 		BL  COUNT
 2018 0b24 FFF7AEFD 		BL	TCHAR
 2019 0b28 FFF722FB 		BL	EMIT
 2020              	TYPE2:  
 2021 0b2c FFF73BFB 		BL  DONXT  
 2022 0b30 200B0018 		.word	TYPE1+MAPOFFSET
 2023 0b34 FFF77EFB 		BL	DROP
 2024 0b38 52F804FB 		_UNNEST
ARM GAS  stm32eforth.s 			page 40


 2025              	
 2026              	//    CR	  ( -- )
 2027              	// 	Output a carriage return and a line feed.
 2028              		_HEADER CR,2,"CR"
 2029 0b3c 42F804ED 		_NEST
 2030 0b40 FFF723FB 		_DOLIT	CRR
 2030      0D000000 
 2031 0b48 FFF712FB 		BL	EMIT
 2032 0b4c FFF71DFB 		_DOLIT	LF
 2032      0A000000 
 2033 0b54 FFF70CFB 		BL	EMIT
 2034 0b58 52F804FB 		_UNNEST
 2035              	
 2036              	//    do_$	( -- a )
 2037              	// 	Return the address of a compiled string.
 2038              	//  adjust return address to skip over it.
 2039              	
 2040              	// 	.word	_CR+MAPOFFSET
 2041              	// _DOSTR	.byte  COMPO+3
 2042              	// 	.ascii "do$$"
 2043              	// 	.p2align 2 	
 2044              	DOSTR:
 2045 0b5c 42F804ED 		_NEST     
 2046              	/* compiled string address is 2 levels deep */
 2047 0b60 FFF754FB 		BL	RFROM	// { -- a1 }
 2048 0b64 FFF752FB 		BL	RFROM	//  {a1 -- a1 a2 } b0 set
 2049 0b68 FFF7C0FB 		BL	ONEM	//  clear b0
 2050 0b6c FFF766FB 		BL	DUPP	// {a1 a2 -- a1 a2 a2 }
 2051 0b70 FFF762FC 		BL	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2052 0b74 FFF79AFB 		BL	PLUS	// { -- a1 a2 a2+1+c }
 2053 0b78 FFF77CFD 		BL	ALGND	//  end of string
 2054 0b7c FFF7B2FB 		BL	ONEP	//  restore b0, this result in return address 2 level deep.
 2055 0b80 FFF74EFB 		BL	TOR		//  address after string { -- a1 a2 }
 2056 0b84 FFF75EFB 		BL	SWAP	//  count tugged
 2057 0b88 FFF74AFB 		BL	TOR     //  ( -- a2) is string address
 2058 0b8c 52F804FB 		_UNNEST
 2059              	
 2060              	//    $"|	( -- a )
 2061              	// 	Run time routine compiled by _". Return address of a compiled string.
 2062              	
 2063              	// 	.word	_DOSTR+MAPOFFSET
 2064              	// _STRQP	.byte  COMPO+3
 2065              	// 	.ascii "$\"|"
 2066              	// 	.p2align 2 	
 2067              	STRQP:
 2068 0b90 42F804ED 		_NEST
 2069 0b94 FFF7E2FF 		BL	DOSTR
 2070 0b98 52F804FB 		_UNNEST			// force a call to dostr
 2071              	
 2072              	//    .$	( a -- )
 2073              	// 	Run time routine of ." . Output a compiled string.
 2074              	
 2075              	// 	.word	_STRQP+MAPOFFSET
 2076              	// _DOTST	.byte  COMPO+2
 2077              	// 	.ascii ".$$"
 2078              	// 	.p2align 2 	
 2079              	DOTST:
ARM GAS  stm32eforth.s 			page 41


 2080 0b9c 42F804ED 		_NEST
 2081 0ba0 FFF74AFC 		BL	COUNT // ( -- a+1 c )
 2082 0ba4 FFF7B6FF 		BL	TYPEE
 2083 0ba8 52F804FB 		_UNNEST
 2084              	
 2085              	//    ."|	( -- )
 2086              	// 	Run time routine of ." . Output a compiled string.
 2087              	
 2088              	// 	.word	_DOTST+MAPOFFSET
 2089              	// _DOTQP	.byte  COMPO+3
 2090              	// 	.ascii ".""|"
 2091              	// 	.p2align 2 	
 2092              	DOTQP:
 2093 0bac 42F804ED 		_NEST
 2094 0bb0 FFF7D4FF 		BL	DOSTR
 2095 0bb4 FFF7F2FF 		BL	DOTST
 2096 0bb8 52F804FB 		_UNNEST
 2097              	
 2098              	//    .R	  ( n +n -- )
 2099              	// 	Display an integer in a field of n columns, right justified.
 2100              		_HEADER DOTR,2,".R"
 2101 0bbc 42F804ED 		_NEST
 2102 0bc0 FFF72EFB 		BL	TOR
 2103 0bc4 FFF790FE 		BL	STRR
 2104 0bc8 FFF720FB 		BL	RFROM
 2105 0bcc FFF73EFB 		BL	OVER
 2106 0bd0 FFF770FB 		BL	SUBB
 2107 0bd4 FFF78AFF 		BL	SPACS
 2108 0bd8 FFF79CFF 		BL	TYPEE
 2109 0bdc 52F804FB 		_UNNEST
 2110              	
 2111              	//    U.R	 ( u +n -- )
 2112              	// 	Display an unsigned integer in n column, right justified.
 2113              		_HEADER UDOTR,3,"U.R"
 2114 0be0 42F804ED 		_NEST
 2115 0be4 FFF71CFB 		BL	TOR
 2116 0be8 FFF728FE 		BL	BDIGS
 2117 0bec FFF74EFE 		BL	DIGS
 2118 0bf0 FFF76AFE 		BL	EDIGS
 2119 0bf4 FFF70AFB 		BL	RFROM
 2120 0bf8 FFF728FB 		BL	OVER
 2121 0bfc FFF75AFB 		BL	SUBB
 2122 0c00 FFF774FF 		BL	SPACS
 2123 0c04 FFF786FF 		BL	TYPEE
 2124 0c08 52F804FB 		_UNNEST
 2125              	
 2126              	//    U.	  ( u -- )
 2127              	// 	Display an unsigned integer in free format.
 2128              		_HEADER UDOT,2,"U."
 2129 0c0c 42F804ED 		_NEST
 2130 0c10 FFF714FE 		BL	BDIGS
 2131 0c14 FFF73AFE 		BL	DIGS
 2132 0c18 FFF756FE 		BL	EDIGS
 2133 0c1c FFF75EFF 		BL	SPACE
 2134 0c20 FFF778FF 		BL	TYPEE
 2135 0c24 52F804FB 		_UNNEST
 2136              	
ARM GAS  stm32eforth.s 			page 42


 2137              	//   H. ( u -- )
 2138              	//  display unsigned integer in hexadecimal
 2139              		_HEADER HDOT,2,"H."
 2140 0c28 42F804ED 		_NEST 
 2141 0c2c FFF736FC 		BL	BASE 
 2142 0c30 FFF7E2FA 		BL	AT 
 2143 0c34 FFF7F4FA 		BL	TOR 
 2144 0c38 FFF76AFE 		BL	HEX 
 2145 0c3c FFF7E6FF 		BL	UDOT 
 2146 0c40 FFF7E4FA 		BL	RFROM 
 2147 0c44 FFF72AFC 		BL	BASE 
 2148 0c48 FFF7D0FA 		BL	STORE 
 2149 0c4c 52F804FB 		_UNNEST 
 2150              	
 2151              	
 2152              	//    .	   ( w -- )
 2153              	// 	Display an integer in free format, preceeded by a space.
 2154              		_HEADER DOT,1,"."
 2155 0c50 42F804ED 		_NEST
 2156 0c54 FFF722FC 		BL	BASE
 2157 0c58 FFF7CEFA 		BL	AT
 2158 0c5c FFF795FA 		_DOLIT	10
 2158      0A000000 
 2159 0c64 FFF708FB 		BL	XORR			// ?decimal
 2160 0c68 FFF7ACFA 		BL	QBRAN
 2161 0c6c 780C0018 		.word	DOT1+MAPOFFSET
 2162 0c70 FFF7CCFF 		BL	UDOT
 2163 0c74 52F804FB 		_UNNEST			// no,display unsigned
 2164              	DOT1:
 2165 0c78 FFF736FE 	    BL	STRR
 2166 0c7c FFF72EFF 		BL	SPACE
 2167 0c80 FFF748FF 		BL	TYPEE
 2168 0c84 52F804FB 		_UNNEST			// yes, display signed
 2169              	
 2170              	//    ?	   ( a -- )
 2171              	// 	Display the contents in a memory cell.
 2172              		_HEADER QUEST,1,"?"
 2173 0c88 42F804ED 		_NEST
 2174 0c8c FFF7B4FA 		BL	AT
 2175 0c90 FFF7DEFF 		BL	DOT
 2176 0c94 52F804FB 		_UNNEST
 2177              	
 2178              	// **************************************************************************
 2179              	//  Parsing
 2180              	
 2181              	//    parse	( b u c -- b u delta //  string> )
 2182              	// 	Scan word delimited by c. Return found string and its offset.
 2183              	
 2184              	// 	.word	_QUEST+MAPOFFSET
 2185              	// _PARS	.byte  5
 2186              	// 	.ascii "parse"
 2187              	// 	.p2align 2 	
 2188              	PARS:
 2189 0c98 42F804ED 		_NEST
 2190 0c9c FFF703FC 		BL	TEMP
 2191 0ca0 FFF7A4FA 		BL	STORE
 2192 0ca4 FFF7D2FA 		BL	OVER
ARM GAS  stm32eforth.s 			page 43


 2193 0ca8 FFF7BAFA 		BL	TOR
 2194 0cac FFF7C6FA 		BL	DUPP
 2195 0cb0 FFF788FA 		BL	QBRAN
 2196 0cb4 A60D0018 		.word	PARS8+MAPOFFSET
 2197 0cb8 FFF718FB 		BL	ONEM
 2198 0cbc FFF7F3FB 		BL	TEMP
 2199 0cc0 FFF79AFA 		BL	AT
 2200 0cc4 FFF726FB 		BL	BLANK
 2201 0cc8 FFF772FB 		BL	EQUAL
 2202 0ccc FFF77AFA 		BL	QBRAN
 2203 0cd0 200D0018 		.word	PARS3+MAPOFFSET
 2204 0cd4 FFF7A4FA 		BL	TOR
 2205              	PARS1:
 2206 0cd8 FFF71CFB 		BL	BLANK
 2207 0cdc FFF7B6FA 		BL	OVER
 2208 0ce0 FFF792FA 		BL	CAT			// skip leading blanks 
 2209 0ce4 FFF7E6FA 		BL	SUBB
 2210 0ce8 FFF7B4FA 		BL	ZLESS
 2211 0cec FFF74AFB 		BL	INVER
 2212 0cf0 FFF768FA 		BL	QBRAN
 2213 0cf4 1C0D0018 		.word	PARS2+MAPOFFSET
 2214 0cf8 FFF7F4FA 		BL	ONEP
 2215 0cfc FFF753FA 		BL	DONXT
 2216 0d00 D80C0018 		.word	PARS1+MAPOFFSET
 2217 0d04 FFF782FA 		BL	RFROM
 2218 0d08 FFF794FA 		BL	DROP
 2219 0d0c FFF73DFA 		_DOLIT	0
 2219      00000000 
 2220 0d14 FFF792FA 		BL	DUPP
 2221 0d18 52F804FB 		_UNNEST
 2222              	PARS2:
 2223 0d1c FFF776FA 	  BL	RFROM
 2224              	PARS3:
 2225 0d20 FFF794FA 		BL	OVER
 2226 0d24 FFF78EFA 		BL	SWAP
 2227 0d28 FFF77AFA 		BL	TOR
 2228              	PARS4:
 2229 0d2c FFF7BBFB 		BL	TEMP
 2230 0d30 FFF762FA 		BL	AT
 2231 0d34 FFF78AFA 		BL	OVER
 2232 0d38 FFF766FA 		BL	CAT
 2233 0d3c FFF7BAFA 		BL	SUBB			// scan for delimiter
 2234 0d40 FFF7B1FB 		BL	TEMP
 2235 0d44 FFF758FA 		BL	AT
 2236 0d48 FFF7E4FA 		BL	BLANK
 2237 0d4c FFF730FB 		BL	EQUAL
 2238 0d50 FFF738FA 		BL	QBRAN
 2239 0d54 5C0D0018 		.word	PARS5+MAPOFFSET
 2240 0d58 FFF77CFA 		BL	ZLESS
 2241              	PARS5:
 2242 0d5c FFF732FA 		BL	QBRAN
 2243 0d60 7A0D0018 		.word	PARS6+MAPOFFSET
 2244 0d64 FFF7BEFA 		BL	ONEP
 2245 0d68 FFF71DFA 		BL	DONXT
 2246 0d6c 2C0D0018 		.word	PARS4+MAPOFFSET
 2247 0d70 FFF764FA 		BL	DUPP
 2248 0d74 FFF754FA 		BL	TOR
ARM GAS  stm32eforth.s 			page 44


 2249 0d78 09E0     		B	PARS7
 2250              	PARS6:
 2251 0d7a FFF747FA 		BL	RFROM
 2252 0d7e FFF759FA 		BL	DROP
 2253 0d82 FFF75BFA 		BL	DUPP
 2254 0d86 FFF7ADFA 		BL	ONEP
 2255 0d8a FFF749FA 		BL	TOR
 2256              	PARS7:
 2257 0d8e FFF75DFA 		BL	OVER
 2258 0d92 FFF78FFA 		BL	SUBB
 2259 0d96 FFF739FA 		BL	RFROM
 2260 0d9a FFF737FA 		BL	RFROM
 2261 0d9e FFF789FA 		BL	SUBB
 2262 0da2 52F804FB 		_UNNEST
 2263              	PARS8:
 2264 0da6 FFF751FA 		BL	OVER
 2265 0daa FFF72FFA 		BL	RFROM
 2266 0dae FFF781FA 		BL	SUBB
 2267 0db2 52F804FB 		_UNNEST
 2268              	
 2269              	//    PARSE	( c -- b u //  string> )
 2270              	// 	Scan input stream and return counted string delimited by c.
 2271 0db6 00BF     		_HEADER PARSE,5,"PARSE"
 2272 0db8 42F804ED 		_NEST
 2273 0dbc FFF730FA 		BL	TOR
 2274 0dc0 FFF7AAFC 		BL	TIB
 2275 0dc4 FFF77AFB 		BL	INN
 2276 0dc8 FFF716FA 		BL	AT
 2277 0dcc FFF76EFA 		BL	PLUS			// current input buffer pointer
 2278 0dd0 FFF77AFB 		BL	NTIB
 2279 0dd4 FFF710FA 		BL	AT
 2280 0dd8 FFF770FB 		BL	INN
 2281 0ddc FFF70CFA 		BL	AT
 2282 0de0 FFF768FA 		BL	SUBB			// remaining count
 2283 0de4 FFF712FA 		BL	RFROM
 2284 0de8 FFF756FF 		BL	PARS
 2285 0dec FFF766FB 		BL	INN
 2286 0df0 FFF70AFB 		BL	PSTOR
 2287 0df4 52F804FB 		_UNNEST
 2288              	
 2289              	//    .(	  ( -- )
 2290              	// 	Output following string up to next ) .
 2291              		_HEADER DOTPR,IMEDD+2,".("
 2292 0df8 42F804ED 		_NEST
 2293 0dfc FFF7C5F9 		_DOLIT	')'
 2293      29000000 
 2294 0e04 FFF7D8FF 		BL	PARSE
 2295 0e08 FFF784FE 		BL	TYPEE
 2296 0e0c 52F804FB 		_UNNEST
 2297              	
 2298              	//    (	   ( -- )
 2299              	// 	Ignore following string up to next ) . A comment.
 2300              		_HEADER PAREN,IMEDD+1,"("
 2301 0e10 42F804ED 		_NEST
 2302 0e14 FFF7B9F9 		_DOLIT	')'
 2302      29000000 
 2303 0e1c FFF7CCFF 		BL	PARSE
ARM GAS  stm32eforth.s 			page 45


 2304 0e20 FFF79AFA 		BL	DDROP
 2305 0e24 52F804FB 		_UNNEST
 2306              	
 2307              	//    \	   ( -- )
 2308              	// 	Ignore following text till the end of line.
 2309              		_HEADER BKSLA,1,"\\"
 2310 0e28 42F804ED 		_NEST
 2311 0e2c FFF74CFB 		BL	NTIB
 2312 0e30 FFF7E2F9 		BL	AT
 2313 0e34 FFF742FB 		BL	INN
 2314 0e38 FFF7D8F9 		BL	STORE
 2315 0e3c 52F804FB 		_UNNEST
 2316              	
 2317              	//    CHAR	( -- c )
 2318              	// 	Parse next word and return its first character.
 2319              		_HEADER CAHR,4,"CHAR"
 2320 0e40 42F804ED 		_NEST
 2321 0e44 FFF766FA 		BL	BLANK
 2322 0e48 FFF7B6FF 		BL	PARSE
 2323 0e4c FFF7F2F9 		BL	DROP
 2324 0e50 FFF7DAF9 		BL	CAT
 2325 0e54 52F804FB 		_UNNEST
 2326              	
 2327              	//    WORD	( c -- a //  string> )
 2328              	// 	Parse a word from input stream and copy it to code dictionary.
 2329              		_HEADER WORDD,4,"WORD"
 2330 0e58 42F804ED 		_NEST
 2331 0e5c FFF7ACFF 		BL	PARSE
 2332 0e60 FFF74AFC 		BL	HERE
 2333 0e64 FFF74EFA 		BL	CELLP
 2334 0e68 FFF79AFC 		BL	PACKS
 2335 0e6c 52F804FB 		_UNNEST
 2336              	
 2337              	//    TOKEN	( -- a //  string> )
 2338              	// 	Parse a word from input stream and copy it to name dictionary.
 2339              		_HEADER TOKEN,5,"TOKEN"
 2340 0e70 42F804ED 		_NEST
 2341 0e74 FFF74EFA 		BL	BLANK
 2342 0e78 FFF7EEFF 		BL	WORDD
 2343 0e7c 52F804FB 		_UNNEST
 2344              	
 2345              	// **************************************************************************
 2346              	//  Dictionary search
 2347              	
 2348              	//    >CFA	( na -- cfa )
 2349              	// 	Return a code field address given a name address.
 2350              		_HEADER TOCFA,4,">CFA"
 2351 0e80 42F804ED 		_NEST
 2352 0e84 FFF7D8FA 		BL	COUNT
 2353 0e88 FFF77FF9 		_DOLIT	0x1F
 2353      1F000000 
 2354 0e90 FFF7E6F9 		BL	ANDD
 2355 0e94 FFF70AFA 		BL	PLUS
 2356 0e98 FFF7ECFB 		BL	ALGND
 2357 0e9c 52F804FB 		_UNNEST
 2358              	
 2359              	//	NAME> ( na -- ca ) 
ARM GAS  stm32eforth.s 			page 46


 2360              	// Return code address 
 2361              		_HEADER NAMET,5,"NAME>"
 2362 0ea0 42F804ED 		_NEST 
 2363 0ea4 FFF7ECFF 		BL	TOCFA
 2364 0ea8 FFF7A6F9 		BL	AT  
 2365 0eac 52F804FB 		_UNNEST 
 2366              	
 2367              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 2368              	// 	Compare u bytes in two strings. Return 0 if identical.
 2369              	//
 2370              	//  Picatout 2020-12-01, 
 2371              	//      Because of problem with .align directive that
 2372              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 2373              	// 		words  to do a byte by byte comparison. 
 2374              	//
 2375              		_HEADER SAMEQ,5,"SAME?"
 2376 0eb0 42F804ED 		_NEST
 2377 0eb4 FFF7B4F9 		BL	TOR
 2378 0eb8 00F01EB8 		B.W	SAME2
 2379              	SAME1:
 2380 0ebc FFF7C6F9 		BL	OVER  // ( a1 a2 -- a1 a2 a1 )
 2381 0ec0 FFF7AAF9 		BL	RAT   // a1 a2 a1 u 
 2382 0ec4 FFF7F2F9 		BL	PLUS  // a1 a2 a1+u 
 2383 0ec8 FFF79EF9 		BL	CAT	   // a1 a2 c1    		
 2384 0ecc FFF7BEF9 		BL	OVER  // a1 a2 c1 a2 
 2385 0ed0 FFF7A2F9 		BL	RAT    
 2386 0ed4 FFF7EAF9 		BL	PLUS    
 2387 0ed8 FFF796F9 		BL	CAT	  // a1 a2 c1 c2
 2388 0edc FFF7EAF9 		BL	SUBB  
 2389 0ee0 FFF72EFA 		BL	QDUP
 2390 0ee4 FFF76EF9 		BL	QBRAN
 2391 0ee8 F80E0018 		.word	SAME2+MAPOFFSET
 2392 0eec FFF78EF9 		BL	RFROM
 2393 0ef0 FFF7A0F9 		BL	DROP
 2394 0ef4 52F804FB 		_UNNEST	// strings not equal
 2395              	SAME2:
 2396 0ef8 FFF755F9 		BL	DONXT
 2397 0efc BC0E0018 		.word	SAME1+MAPOFFSET
 2398 0f00 FFF743F9 		_DOLIT	0
 2398      00000000 
 2399 0f08 52F804FB 		_UNNEST	// strings equal
 2400              	
 2401              	//    find	( a na -- ca na | a F )
 2402              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 2403              	
 2404              	//  Picatout 2020-12-01,  
 2405              	//		Modified from original. See comment for word "SAME?" 
 2406              	
 2407              	// 	.word	_SAMEQ+MAPOFFSET
 2408              	// _FIND	.byte  4
 2409              	// 	.ascii "find"
 2410              	// 	.p2align 2 	
 2411              	FIND:
 2412 0f0c 42F804ED 		_NEST
 2413 0f10 FFF798F9 		BL	SWAP			// na a	
 2414 0f14 FFF790FA 		BL	COUNT			// na a+1 count
 2415 0f18 FFF790F9 		BL	DUPP 
ARM GAS  stm32eforth.s 			page 47


 2416 0f1c FFF7C3FA 		BL	TEMP
 2417 0f20 FFF764F9 		BL	STORE			// na a+1 count 
 2418 0f24 FFF77CF9 		BL  TOR		// na a+1  R: count  
 2419 0f28 FFF78CF9 		BL	SWAP			// a+1 na
 2420              	FIND1:
 2421 0f2c FFF786F9 		BL	DUPP			// a+1 na na
 2422 0f30 FFF748F9 		BL	QBRAN
 2423 0f34 7C0F0018 		.word	FIND6+MAPOFFSET	// end of vocabulary
 2424 0f38 FFF780F9 		BL	DUPP			// a+1 na na
 2425 0f3c FFF764F9 		BL	CAT			// a+1 na name1
 2426 0f40 FFF723F9 		_DOLIT	MASKK
 2426      1FFFFFFF 
 2427 0f48 FFF78AF9 		BL	ANDD
 2428 0f4c FFF764F9 		BL	RAT			// a+1 na name1 count 
 2429 0f50 FFF792F9 		BL	XORR			// a+1 na,  same length?
 2430 0f54 FFF736F9 		BL	QBRAN
 2431 0f58 680F0018 		.word	FIND2+MAPOFFSET
 2432 0f5c FFF7D6F9 		BL	CELLM			// a+1 la
 2433 0f60 FFF74AF9 		BL	AT			// a+1 next_na
 2434 0f64 FFF7E2BF 		B.w	FIND1			// try next word
 2435              	FIND2:   
 2436 0f68 FFF7BCF9 		BL	ONEP			// a+1 na+1
 2437 0f6c FFF79BFA 		BL	TEMP
 2438 0f70 FFF742F9 		BL	AT			// a+1 na+1 count
 2439 0f74 FFF79CFF 		BL	SAMEQ		// a+1 na+1 ? 
 2440              	FIND3:	
 2441 0f78 00F00CB8 		B.w	FIND4
 2442              	FIND6:	
 2443 0f7c FFF746F9 		BL	RFROM			// a+1 0 name1 -- , no match
 2444 0f80 FFF758F9 		BL	DROP			// a+1 0
 2445 0f84 FFF75EF9 		BL	SWAP			// 0 a+1
 2446 0f88 FFF7B0F9 		BL	ONEM			// 0 a
 2447 0f8c FFF75AF9 		BL	SWAP			// a 0 
 2448 0f90 52F804FB 		_UNNEST			// return without a match
 2449              	FIND4:	
 2450 0f94 FFF716F9 		BL	QBRAN			// a+1 na+1
 2451 0f98 AC0F0018 		.word	FIND5+MAPOFFSET	// found a match
 2452 0f9c FFF7A6F9 		BL	ONEM			// a+1 na
 2453 0fa0 FFF7B4F9 		BL	CELLM			// a+4 la
 2454 0fa4 FFF728F9 		BL	AT			// a+1 next_na
 2455 0fa8 FFF7C0BF 		B.w	FIND1			// compare next name
 2456              	FIND5:	
 2457 0fac FFF72EF9 		BL	RFROM			// a+1 na+1 count
 2458 0fb0 FFF740F9 		BL	DROP			// a+1 na+1
 2459 0fb4 FFF746F9 		BL	SWAP			// na+1 a+1
 2460 0fb8 FFF73CF9 		BL	DROP			// na+1
 2461 0fbc FFF796F9 		BL	ONEM			// na
 2462 0fc0 FFF73CF9 		BL	DUPP			// na na
 2463 0fc4 FFF76CFF 		BL	NAMET			// na ca
 2464 0fc8 FFF73CF9 		BL	SWAP			// ca na
 2465 0fcc 52F804FB 		_UNNEST			//  return with a match
 2466              	
 2467              	//    NAME?	( a -- ca na | a F )
 2468              	// 	Search all context vocabularies for a string.
 2469              		_HEADER NAMEQ,5,"NAME?"
 2470 0fd0 42F804ED 		_NEST
 2471 0fd4 FFF78AFA 		BL	CNTXT
ARM GAS  stm32eforth.s 			page 48


 2472 0fd8 FFF70EF9 		BL	AT
 2473 0fdc FFF796FF 		BL	FIND
 2474 0fe0 52F804FB 		_UNNEST
 2475              	
 2476              	// **************************************************************************
 2477              	//  Terminal input
 2478              	
 2479              	//    	  ( bot eot cur -- bot eot cur )
 2480              	// 	Backup the cursor by one character.
 2481              	
 2482              	// 	.word	_NAMEQ+MAPOFFSET
 2483              	// _BKSP	.byte  2
 2484              	// 	.ascii "^H"
 2485              	// 	.p2align 2 	
 2486              	BKSP:
 2487 0fe4 42F804ED 		_NEST
 2488 0fe8 FFF71AF9 		BL	TOR
 2489 0fec FFF72EF9 		BL	OVER
 2490 0ff0 FFF70CF9 		BL	RFROM
 2491 0ff4 FFF726F9 		BL	SWAP
 2492 0ff8 FFF728F9 		BL	OVER
 2493 0ffc FFF73CF9 		BL	XORR
 2494 1000 FFF7E0F8 		BL	QBRAN
 2495 1004 2C100018 		.word	BACK1+MAPOFFSET
 2496 1008 FFF7BFF8 		_DOLIT	BKSPP
 2496      08000000 
 2497 1010 FFF7AEF8 		BL	TECHO
 2498              	// 	BL	ATEXE
 2499 1014 FFF76AF9 		BL	ONEM
 2500 1018 FFF77CF9 		BL	BLANK
 2501 101c FFF7A8F8 		BL	TECHO
 2502              	// 	BL	ATEXE
 2503 1020 FFF7B3F8 		_DOLIT	BKSPP
 2503      08000000 
 2504 1028 FFF7A2F8 		BL	TECHO
 2505              	// 	BL	ATEXE
 2506              	BACK1:
 2507 102c 52F804FB 		  _UNNEST
 2508              	
 2509              	//    TAP	 ( bot eot cur c -- bot eot cur )
 2510              	// 	Accept and echo the key stroke and bump the cursor.
 2511              	
 2512              	// 	.word	_BKSP+MAPOFFSET
 2513              	// _TAP	.byte  3
 2514              	// 	.ascii "TAP"
 2515              	// 	.p2align 2 	
 2516              	TAP:
 2517 1030 42F804ED 		_NEST
 2518 1034 FFF702F9 		BL	DUPP
 2519 1038 FFF79AF8 		BL	TECHO
 2520              	// 	BL	ATEXE
 2521 103c FFF706F9 		BL	OVER
 2522 1040 FFF7DCF8 		BL	CSTOR
 2523 1044 FFF74EF9 		BL	ONEP
 2524 1048 52F804FB 		_UNNEST
 2525              	
 2526              	//    kTAP	( bot eot cur c -- bot eot cur )
ARM GAS  stm32eforth.s 			page 49


 2527              	// 	Process a key stroke, CR or backspace.
 2528              	
 2529              	// 	.word	_TAP+MAPOFFSET
 2530              	// _KTAP	.byte  4
 2531              	// 	.ascii "kTAP"
 2532              	// 	.p2align 2 	
 2533              	KTAP:
 2534              	TTAP:
 2535 104c 42F804ED 		_NEST
 2536 1050 FFF7F4F8 		BL	DUPP
 2537 1054 FFF799F8 		_DOLIT	CRR
 2537      0D000000 
 2538 105c FFF70CF9 		BL	XORR
 2539 1060 FFF7B0F8 		BL	QBRAN
 2540 1064 94100018 		.word	KTAP2+MAPOFFSET
 2541 1068 FFF78FF8 		_DOLIT	BKSPP
 2541      08000000 
 2542 1070 FFF702F9 		BL	XORR
 2543 1074 FFF7A6F8 		BL	QBRAN
 2544 1078 8C100018 		.word	KTAP1+MAPOFFSET
 2545 107c FFF74AF9 		BL	BLANK
 2546 1080 FFF7D6FF 		BL	TAP
 2547 1084 52F804FB 		_UNNEST
 2548 1088 00000000 		.word	0			// patch
 2549              	KTAP1:
 2550 108c FFF7AAFF 	  BL	BKSP
 2551 1090 52F804FB 		_UNNEST
 2552              	KTAP2:
 2553 1094 FFF7CEF8 	  BL	DROP
 2554 1098 FFF7D4F8 		BL	SWAP
 2555 109c FFF7CAF8 		BL	DROP
 2556 10a0 FFF7CCF8 		BL	DUPP
 2557 10a4 52F804FB 		_UNNEST
 2558              	
 2559              	//    ACCEPT	( b u -- b u )
 2560              	// 	Accept characters to input buffer. Return with actual count.
 2561              		_HEADER ACCEP,6,"ACCEPT"
 2562 10a8 42F804ED 		_NEST
 2563 10ac FFF7CEF8 		BL	OVER
 2564 10b0 FFF7FCF8 		BL	PLUS
 2565 10b4 FFF7CAF8 		BL	OVER
 2566              	ACCP1:
 2567 10b8 FFF754F9 	  BL	DDUP
 2568 10bc FFF7DCF8 		BL	XORR
 2569 10c0 FFF780F8 		BL	QBRAN
 2570 10c4 F4100018 		.word	ACCP4+MAPOFFSET
 2571 10c8 FFF7FEFC 		BL	KEY
 2572 10cc FFF7B6F8 		BL	DUPP
 2573 10d0 FFF720F9 		BL	BLANK
 2574 10d4 FFF759F8 		_DOLIT	127
 2574      7F000000 
 2575 10dc FFF738FA 		BL	WITHI
 2576 10e0 FFF770F8 		BL	QBRAN
 2577 10e4 EE100018 		.word	ACCP2+MAPOFFSET
 2578 10e8 FFF7A2FF 		BL	TAP
 2579 10ec 01E0     		B	ACCP3
 2580              	ACCP2:
ARM GAS  stm32eforth.s 			page 50


 2581 10ee FFF7ADFF 	  BL	KTAP
 2582              	// 	BL	ATEXE
 2583              	ACCP3:	  
 2584 10f2 E1E7     		B	ACCP1
 2585              	ACCP4:
 2586 10f4 FFF79EF8 	  BL	DROP
 2587 10f8 FFF7A8F8 		BL	OVER
 2588 10fc FFF7DAF8 		BL	SUBB
 2589 1100 52F804FB 		_UNNEST
 2590              	
 2591              	//    QUERY	( -- )
 2592              	// 	Accept input stream to terminal input buffer.
 2593              		_HEADER QUERY,5,"QUERY"
 2594 1104 42F804ED 		_NEST
 2595 1108 FFF706FB 		BL	TIB
 2596 110c FFF73DF8 		_DOLIT	80
 2596      50000000 
 2597 1114 FFF7C8FF 		BL	ACCEP
 2598 1118 FFF7D6F9 		BL	NTIB
 2599 111c FFF766F8 		BL	STORE
 2600 1120 FFF788F8 		BL	DROP
 2601 1124 FFF731F8 		_DOLIT	0
 2601      00000000 
 2602 112c FFF7C6F9 		BL	INN
 2603 1130 FFF75CF8 		BL	STORE
 2604 1134 52F804FB 		_UNNEST
 2605              	
 2606              	// **************************************************************************
 2607              	//  Error handling
 2608              	
 2609              	//    ABORT	( a -- )
 2610              	// 	Reset data stack and jump to QUIT.
 2611              		_HEADER ABORT,5,"ABORT"
 2612 1138 42F804ED 		_NEST
 2613 113c FFF7CEFC 		BL	SPACE
 2614              	ABORT1:
 2615 1140 FFF77AF9 		BL	COUNT
 2616 1144 FFF7E6FC 		BL	TYPEE
 2617 1148 FFF71FF8 		_DOLIT	0X3F
 2617      3F000000 
 2618 1150 FFF70EF8 		BL	EMIT
 2619 1154 FFF7F2FC 		BL	CR
 2620 1158 00F08AF8 		BL	PRESE
 2621 115c 00F092B8 		B.W	QUIT
 2622              	
 2623              	//    _abort"	( f -- )
 2624              	// 	Run time routine of ABORT" . Abort with a message.
 2625              	
 2626              	// 	.word	_ABORT+MAPOFFSET
 2627              	// _ABORQ	.byte  COMPO+6
 2628              	// 	.ascii "abort\""
 2629              	// 	.p2align 2 	
 2630              	ABORQ:
 2631 1160 42F804ED 		_NEST
 2632 1164 FFF7FAFC 		BL	DOSTR 
 2633 1168 FFF76CF8 		BL	SWAP 
 2634 116c FFF72AF8 		BL	QBRAN
ARM GAS  stm32eforth.s 			page 51


 2635 1170 76110018 		.word	1f+MAPOFFSET	// text flag
 2636 1174 E4E7     		B	ABORT1 
 2637              	1:
 2638 1176 FFF75DF8 		BL	DROP
 2639 117a 52F804FB 		_UNNEST			// drop error
 2640              	
 2641              	// **************************************************************************
 2642              	//  The text interpreter
 2643              	
 2644              	//    $INTERPRET  ( a -- )
 2645              	// 	Interpret a word. If failed, try to convert it to an integer.
 2646 117e 00BF     		_HEADER INTER,10,"$INTERPRET"
 2647 1180 42F804ED 		_NEST
 2648 1184 FFF724FF 		BL	NAMEQ
 2649 1188 FFF7DAF8 		BL	QDUP	// ?defined
 2650 118c FFF71AF8 		BL	QBRAN
 2651 1190 C0110018 		.word	INTE1+MAPOFFSET
 2652 1194 FFF730F8 		BL	AT
 2653 1198 FEF7F7FF 		_DOLIT	COMPO
 2653      40000000 
 2654 11a0 FFF75EF8 		BL	ANDD	// ?compile only lexicon bits
 2655 11a4 FFF7DCFF 		BL	ABORQ
 2656 11a8 0D       		.byte	13
 2657 11a9 20636F6D 		.ascii " compile only"
 2657      70696C65 
 2657      206F6E6C 
 2657      79
 2658 11b6 00BF     		.p2align 2 	
 2659 11b8 FEF7F0FF 		BL	EXECU
 2660 11bc 52F804FB 		_UNNEST			// execute defined word
 2661              	INTE1:
 2662 11c0 FFF7ECFB 	  BL	NUMBQ
 2663 11c4 FEF7FEFF 		BL	QBRAN
 2664 11c8 D0110018 		.word	INTE2+MAPOFFSET
 2665 11cc 52F804FB 		_UNNEST
 2666              	INTE2:
 2667 11d0 FFF7B2BF 	  B.W	ABORT	// error
 2668              	
 2669              	//    [	   ( -- )
 2670              	// 	Start the text interpreter.
 2671              		_HEADER LBRAC,IMEDD+1,"["
 2672 11d4 42F804ED 		_NEST
 2673 11d8 FEF7D7FF 		_DOLIT	INTER+MAPOFFSET
 2673      80110018 
 2674 11e0 FFF778F9 		BL	TEVAL
 2675 11e4 FFF702F8 		BL	STORE
 2676 11e8 52F804FB 		_UNNEST
 2677              	
 2678              	//    .OK	 ( -- )
 2679              	// 	Display "ok" only while interpreting.
 2680              		_HEADER DOTOK,3,".OK"
 2681 11ec 42F804ED 		_NEST
 2682 11f0 FEF7CBFF 		_DOLIT	INTER+MAPOFFSET
 2682      80110018 
 2683 11f8 FFF76CF9 		BL	TEVAL
 2684 11fc FEF7FCFF 		BL	AT
 2685 1200 FFF7D6F8 		BL	EQUAL
ARM GAS  stm32eforth.s 			page 52


 2686 1204 FEF7DEFF 		BL	QBRAN
 2687 1208 14120018 		.word	DOTO1+MAPOFFSET
 2688 120c FFF7CEFC 		BL	DOTQP
 2689 1210 03       		.byte	3
 2690 1211 206F6B   		.ascii " ok"
 2691              	DOTO1:
 2692 1214 FFF792FC 		BL	CR
 2693 1218 52F804FB 		_UNNEST
 2694              	
 2695              	//    ?STACK	( -- )
 2696              	// 	Abort if the data stack underflows.
 2697              		_HEADER QSTAC,6,"?STACK"
 2698 121c 42F804ED 		_NEST
 2699 1220 FFF750FA 		BL	DEPTH
 2700 1224 FFF716F8 		BL	ZLESS	// check only for underflow
 2701 1228 FFF79AFF 		BL	ABORQ
 2702 122c 0A       		.byte	10
 2703 122d 20756E64 		.ascii " underflow"
 2703      6572666C 
 2703      6F77
 2704 1237 00       		.p2align 2 	
 2705 1238 52F804FB 		_UNNEST
 2706              	
 2707              	//    EVAL	( -- )
 2708              	// 	Interpret the input stream.
 2709              		_HEADER EVAL,4,"EVAL"
 2710 123c 42F804ED 		_NEST
 2711              	EVAL1:
 2712 1240 FFF716FE 	    BL	TOKEN
 2713 1244 FEF7FAFF 		BL	DUPP
 2714 1248 FEF7DEFF 		BL	CAT	// ?input stream empty
 2715 124c FEF7BAFF 		BL	QBRAN
 2716 1250 64120018 		.word	EVAL2+MAPOFFSET
 2717 1254 FFF73EF9 		BL	TEVAL
 2718 1258 FFF762FA 		BL	ATEXE
 2719 125c FFF7DEFF 		BL	QSTAC	// evaluate input, check stack
 2720 1260 FFF7EEBF 		B.W	EVAL1
 2721              	EVAL2:
 2722 1264 FEF7E6FF 		BL	DROP
 2723 1268 FFF7C0FF 		BL	DOTOK
 2724 126c 52F804FB 		_UNNEST	// prompt
 2725              	
 2726              	//    PRESET	( -- )
 2727              	// 	Reset data stack pointer and the terminal input buffer.
 2728              		_HEADER PRESE,6,"PRESET"
 2729 1270 42F804ED 		_NEST
 2730 1274 4FF49D41 		_MOV32 R1,SPP // init SP 
 2730      C2F20001 
 2731 127c 85EA0505 		EOR	R5,R5,R5//  init TOS=0
 2732 1280 52F804FB 		_UNNEST 
 2733              	
 2734              	//    QUIT	( -- )
 2735              	// 	Reset return stack pointer and start text interpreter.
 2736              		_HEADER QUIT,4,"QUIT"
 2737 1284 42F804ED 		_NEST
 2738 1288 4FF49F42 		_MOV32 R2,RPP
 2738      C2F20002 
ARM GAS  stm32eforth.s 			page 53


 2739              	QUIT1:
 2740 1290 FFF7A0FF 		BL	LBRAC			// start interpretation
 2741              	QUIT2:
 2742 1294 FFF736FF 		BL	QUERY			// get input
 2743 1298 FFF7D0FF 		BL	EVAL
 2744 129c FEF79EFF 		BL	BRAN
 2745 12a0 94120018 		.word	QUIT2+MAPOFFSET	// continue till error
 2746              	
 2747              	/***************************
 2748              	//  Flash memory interface
 2749              	***************************/
 2750              	// UNLOCK ( T|F -- )
 2751              	// lock or unlock FLASH write 
 2752              		_HEADER UNLOCK,6,"UNLOCK"
 2753 12a4 42F804ED 		_NEST 
 2754 12a8 FEF78CFF 		BL QBRAN
 2755 12ac CC120018 		.word LOCK+MAPOFFSET
 2756 12b0 D548     		ldr	r0, flash_regs 
 2757 12b2 4FF03404 		mov r4,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 2758 12b6 C460     		str r4,[r0,#FLASH_SR]
 2759 12b8 0469     		ldr r4,[r0,#FLASH_CR]
 2760 12ba 14F0800F 		tst r4,#(1<<7)
 2761 12be 03D0     		beq 1f 
 2762 12c0 D24C     		ldr	r4, flash_regs+4 // key1
 2763 12c2 4460     		str	r4, [r0, #FLASH_KEYR]
 2764 12c4 D24C     		ldr	r4, flash_regs+8 // key2 
 2765 12c6 4460     		str	r4, [r0, #FLASH_KEYR]
 2766              		/* unlock option registers */
 2767              	/*
 2768              		ldr	r4, flash_regs+4 
 2769              		str	r4, [r0, #FLASH_OPTKEYR]
 2770              		ldr	r4, flash_regs+8
 2771              		str	r4, [r0, #FLASH_OPTKEYR]
 2772              	*/ 
 2773              	1:
 2774 12c8 52F804FB 		_UNNEST
 2775              	 // lock flash memory
 2776              	LOCK: 
 2777 12cc CE48     		ldr r0,flash_regs  
 2778              	//	ldr r4,[r0,#FLASH_CR]
 2779 12ce 4FF08004 		mov r4,#(1<<7)
 2780 12d2 0461     		str r4,[r0,#FLASH_CR]
 2781 12d4 52F804FB 		_UNNEST  
 2782              	
 2783              	WAIT_BSY:
 2784 12d8 CB48     		ldr	r0,flash_regs
 2785              	WAIT1:
 2786 12da C468     		ldr	r4, [r0, #FLASH_SR]	//  FLASH_SR
 2787 12dc 14F00104 		ands	r4, #0x1	//  BSY
 2788 12e0 FBD1     		bne	WAIT1
 2789 12e2 7047     		_NEXT
 2790              	
 2791              	//    ERASE_PAGE	   ( adr -- )
 2792              	// 	  Erase one page of flash memory.
 2793              	//    stm32f103 page size is 1024 bytes 
 2794              	//    adr is any address inside page to erase 
 2795              		_HEADER EPAGE,10,"ERASE_PAGE"
ARM GAS  stm32eforth.s 			page 54


 2796 12e4 42F804ED 		_NEST
 2797 12e8 FFF7F6FF 		bl	WAIT_BSY
 2798 12ec FEF74DFF 		_DOLIT 1 
 2798      01000000 
 2799 12f4 FFF7D6FF 		bl  UNLOCK 
 2800 12f8 C348     		ldr r0,flash_regs 	 
 2801 12fa 4FF00204 		mov r4,#2 // set PER bit 
 2802 12fe 0461     		str r4,[r0,#FLASH_CR]
 2803 1300 4561     		str r5,[r0,#FLASH_AR] // page to erase address 
 2804 1302 0469     		ldr	r4,[r0, #FLASH_CR]	
 2805 1304 44F04004 		orr	R4,#0x40	//  set STRT bit   
 2806 1308 0461     		str	r4,[r0, #FLASH_CR]	//  start erasing
 2807 130a FFF7E5FF 	 	bl	WAIT_BSY // wait until done
 2808 130e FEF73CFF 		_DOLIT 0 
 2808      00000000 
 2809 1316 FFF7C5FF 		bl	UNLOCK  // lock flash write 
 2810 131a C568     		ldr r5,[r0,#FLASH_SR] // check for errors 
 2811 131c 05F01405 		and r5,r5,#(5<<2)
 2812 1320 FFF71EFF 		bl ABORQ 
 2813 1324 0D       		.byte 13
 2814 1325 20657261 		.ascii " erase error!"
 2814      73652065 
 2814      72726F72 
 2814      21
 2815 1332 00BF     		.p2align 2
 2816 1334 52F804FB 		_UNNEST
 2817              	
 2818              	// store 16 bit word
 2819              	// expect flash unlocked  
 2820              	HWORD_WRITE: // ( hword address -- )
 2821 1338 42F804ED 		_NEST
 2822 133c 0469     		ldr	r4, [r0, #FLASH_CR]	//  FLASH_CR
 2823              	//	bic r4,#(1<<9)|(1<<5)|(1<<4)|(1<<2)|(1<<1) //  clear OPTWRE|OPTER|OPTPG|MER|PER
 2824 133e 4FF00104 		mov r4,#1 // set PG 
 2825 1342 0461     		str r4,[r0,#FLASH_CR]
 2826 1344 2E46     		mov r6,r5 
 2827 1346 51F8045B 		_POP 
 2828 134a 3580     		strh r5,[r6] 
 2829 134c FFF7C4FF 		bl WAIT_BSY 
 2830 1350 C568     		ldr r5,[r0,#FLASH_SR]
 2831 1352 05F01405 		and r5,r5,#(5<<2) 
 2832 1356 FEF735FF 		bl QBRAN
 2833 135a 70130018 		.word 1f+MAPOFFSET 
 2834 135e FFF7FFFE 		bl ABORQ
 2835 1362 0D       		.byte 13
 2836 1363 20777269 		.ascii " write error!"
 2836      74652065 
 2836      72726F72 
 2836      21
 2837              		.p2align 2
 2838              	1:	 
 2839 1370 52F804FB 		_UNNEST 
 2840              	
 2841              	
 2842              	//    I!	   ( data address -- )
 2843              	// 	   Write one word into flash memory
 2844              	//	   address must even 
ARM GAS  stm32eforth.s 			page 55


 2845              		_HEADER ISTOR,2,"I!"
 2846 1374 42F804ED 		_NEST
 2847 1378 FFF7AEFF 		bl	WAIT_BSY
 2848 137c FEF705FF 		_DOLIT 1 
 2848      01000000 
 2849 1384 FFF78EFF 		bl  UNLOCK 
 2850 1388 FEF7ECFF 		BL DDUP 
 2851 138c FEF748FF 		BL TOR 
 2852 1390 FEF746FF 		BL TOR 
 2853 1394 FFF7D0FF 		BL HWORD_WRITE
 2854 1398 FEF738FF 		BL RFROM 
 2855 139c 4FEA3545 		ror r5,r5,#16
 2856 13a0 FEF734FF 		BL RFROM 
 2857 13a4 05F10205 		add r5,r5,#2 
 2858 13a8 FFF7C6FF 		BL HWORD_WRITE 
 2859 13ac FEF7EDFE 		_DOLIT 0
 2859      00000000 
 2860 13b4 FFF776FF 		bl UNLOCK 
 2861 13b8 52F804FB 		_UNNEST
 2862              	
 2863              	// IMG_SIZE ( -- u )
 2864              	// return flash pages required to save 
 2865              	// user ram  
 2866              		_HEADER IMG_SIZE,8,"IMG_SIZE"
 2867 13bc 42F804ED 		_NEST
 2868 13c0 FEF7E3FE 		_DOLIT VARS_END_OFS-IMG_SIGN_OFS 
 2868      38000000 
 2869 13c8 FFF7AEF8 		BL USER_END 
 2870 13cc FFF7A6F8 		BL USER_BEGIN 
 2871 13d0 FEF770FF 		BL SUBB 
 2872 13d4 FEF76AFF 		BL PLUS 
 2873 13d8 FEF7D7FE 		_DOLIT 1024 
 2873      00040000 
 2874 13e0 FFF714F9 		BL SLMOD 
 2875 13e4 FEF72EFF 		BL SWAP 
 2876 13e8 FEF7ECFE 		BL QBRAN 
 2877 13ec F4130018 		.word 1f+MAPOFFSET 
 2878 13f0 FEF778FF 		BL ONEP
 2879              	1:
 2880 13f4 52F804FB 		_UNNEST  
 2881              	
 2882              	// IMG? (  -- T|F )
 2883              	// check if an image has been saved in FLASH 
 2884              		_HEADER IMGQ,4,"IMG?"
 2885 13f8 42F804ED 		_NEST 
 2886 13fc FFF79CF8 		BL IMG_ADR 
 2887 1400 FEF7FAFE 		BL AT 
 2888 1404 FFF79EF8 		BL IMG_SIGN  
 2889 1408 FEF7F6FE 		BL AT 
 2890 140c FEF734FF 		BL XORR  
 2891 1410 FEF7C6FF 		BL ZEQUAL
 2892 1414 52F804FB 		_UNNEST
 2893              	
 2894              	// LOAD_IMG (  -- )
 2895              	// Load image from FLASH to RAM. 
 2896              		_HEADER LOAD_IMG,8,"LOAD_IMG"
 2897 1418 42F804ED 		_NEST 
ARM GAS  stm32eforth.s 			page 56


 2898 141c FFF7ECFF 		BL IMGQ 
 2899 1420 FEF7D0FE 		BL QBRAN 
 2900 1424 6C140018 		.word 1f+MAPOFFSET
 2901              	/* copy system variables to RAM */
 2902 1428 FFF786F8 		BL IMG_ADR 
 2903 142c FEF706FF 		BL DUPP 
 2904 1430 FEF7F6FE 		BL TOR   // save source address 
 2905 1434 FFF786F8 		BL IMG_SIGN 
 2906 1438 41F8045D 		_PUSH 
 2907 143c 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 2908 1440 FEF7FCFE 		BL DUPP 
 2909 1444 FEF7ECFE 		BL TOR 
 2910 1448 FFF786F9 		BL MOVE // ( src dest count -- ) R: src count 
 2911              	/* copy user definitions */
 2912 144c FEF7DEFE 		BL RFROM 
 2913 1450 FEF7DCFE 		BL RFROM  
 2914 1454 FEF72AFF 		BL PLUS // source address  
 2915 1458 FFF760F8 		BL USER_BEGIN // destination address
 2916 145c FFF74CF9 		BL HERE  
 2917 1460 FEF7F4FE 		BL OVER 
 2918 1464 FEF726FF 		BL SUBB  // byte count 
 2919 1468 FFF776F9 		BL MOVE
 2920 146c 52F804FB 	1:	_UNNEST  
 2921              	
 2922              	// ERASE_MPG ( u1 u2 -- )
 2923              	// erase many pages 
 2924              	// u1 first page number 
 2925              	// u2 how many pages  
 2926              		_HEADER ERASE_MPG,9,"ERASE_MPG"
 2927 1470 42F804ED 		_NEST 
 2928 1474 FEF7D4FE 		BL TOR 
 2929 1478 00F040F8 		BL PG_TO_ADR 
 2930 147c FEF7AEFE 		BL BRAN 
 2931 1480 98140018 		.word 2f+MAPOFFSET 
 2932              	1:
 2933 1484 FEF7DAFE 		BL DUPP 
 2934 1488 FEF7CAFE 		BL TOR 
 2935 148c FFF72AFF 		BL EPAGE 
 2936 1490 FEF7BCFE 		BL RFROM
 2937 1494 05F58065 		add r5,#PAGE_SIZE 
 2938              	2:
 2939 1498 FEF785FE 		BL DONXT
 2940 149c 84140018 		.word 1b+MAPOFFSET 
 2941 14a0 51F8045B 		_POP 
 2942 14a4 52F804FB 		_UNNEST 
 2943              	
 2944              	// FLSH_WR ( src dest u -- dest+u )
 2945              	// write u words to flash memory 
 2946              		_HEADER FLSH_WR,7,"FLSH_WR"
 2947 14a8 42F804ED 		_NEST 
 2948 14ac FEF7B8FE 		BL TOR
 2949 14b0 FEF794FE 		BL BRAN 
 2950 14b4 D8140018 		.word 3f+MAPOFFSET  
 2951              	/* write system variables to FLASH */
 2952 14b8 FEF7B2FE 	2:  BL TOR  // destination address 
 2953 14bc FEF7BEFE 		BL DUPP 
 2954 14c0 FEF79AFE 		BL AT   // get data 
ARM GAS  stm32eforth.s 			page 57


 2955 14c4 FEF7A8FE 		BL RAT  // get destination address 
 2956 14c8 FFF754FF 		BL ISTOR
 2957 14cc FEF71AFF 		BL CELLP  // increment source address 
 2958 14d0 FEF79CFE 		BL RFROM 
 2959 14d4 FEF716FF 		BL CELLP  // increment dest address 
 2960 14d8 FEF765FE 	3:	BL DONXT 
 2961 14dc B8140018 		.word 2b+MAPOFFSET
 2962 14e0 FEF79EFE 		BL TOR 
 2963 14e4 FEF7A6FE 		BL DROP 
 2964 14e8 FEF790FE 		BL RFROM 
 2965 14ec 52F804FB 		_UNNEST 
 2966              	
 2967              	// ADR>PG ( a -- n )
 2968              	// convert address to page number, {0..127} 
 2969              		_HEADER ADR_TO_PG,6,"ADR>PG"
 2970 14f0 4FEA9525 		lsr r5,#10 
 2971 14f4 05F07F05 		and r5,#127 
 2972 14f8 7047     		_NEXT  
 2973              	
 2974              	// PG>ADR ( n -- a )
 2975              	// convert page# to address 
 2976 14fa 00BF     		_HEADER PG_TO_ADR,6,"PG>ADR"
 2977 14fc C0F20205 		movt r5,#2
 2978 1500 4FEA8525 		lsl r5,#10 
 2979 1504 7047     		_NEXT 
 2980              	
 2981              	// ERASE_IMG (  -- )
 2982              	// erase image in from FLASH  
 2983 1506 00BF     		_HEADER ERASE_IMG,9,"ERASE_IMG"
 2984 1508 42F804ED 		_NEST
 2985 150c FFF714F8 		BL IMG_ADR 
 2986 1510 FFF754FF 		BL IMG_SIZE 
 2987 1514 FEF784FE 		BL TOR 
 2988 1518 FEF760FE 		BL BRAN 
 2989 151c 2C150018 		.word  2f+MAPOFFSET 
 2990 1520 FEF78CFE 	1:	BL DUPP 
 2991 1524 FFF7DEFE 		BL EPAGE
 2992 1528 05F58065 		ADD R5,#PAGE_SIZE 
 2993 152c FEF73BFE 	2:	BL DONXT 
 2994 1530 20150018 		.word 1b+MAPOFFSET 
 2995 1534 FEF77EFE 		BL DROP 
 2996 1538 52F804FB 		_UNNEST 
 2997              	
 2998              	// SAVE_IMG ( -- )
 2999              	// save in FLASH memory system variables and user defintitions.
 3000              		_HEADER SAVE_IMG,8,"SAVE_IMG"
 3001 153c 42F804ED 		_NEST 
 3002 1540 FFF7DAF8 		BL HERE 
 3003 1544 FEF7EAFF 		BL USER_BEGIN
 3004 1548 FEF732FF 		BL EQUAL 
 3005 154c FEF73AFE 		BL QBRAN
 3006 1550 58150018 		.word 1f+MAPOFFSET 
 3007 1554 52F804FB 		_UNNEST  // nothing to save 
 3008 1558 FFF74EFF 	1:	BL IMGQ 
 3009 155c FEF732FE 		BL QBRAN 
 3010 1560 68150018 		.word 2f+MAPOFFSET
 3011              	/* delete saved image */
ARM GAS  stm32eforth.s 			page 58


 3012 1564 FFF7D0FF 		BL ERASE_IMG 
 3013              	/* save system variables */
 3014              	2:	
 3015 1568 FEF7ECFF 		BL IMG_SIGN // src address 
 3016 156c FEF7E4FF 		BL IMG_ADR  //  ( src dest --  
 3017 1570 41F8045D 		_PUSH 
 3018 1574 4FF03805 		MOV R5,#(VARS_END_OFS-IMG_SIGN_OFS) 
 3019 1578 FEF7D6FE 		BL CELLSL  // word count 
 3020 157c FFF794FF 		BL FLSH_WR  // ( src dest count -- dest+u )
 3021              	/* write user definitions */
 3022 1580 FEF7CCFF 		BL USER_BEGIN
 3023 1584 FEF75EFE 		BL SWAP  // ( src dest+ -- )
 3024 1588 FFF7B6F8 		BL HERE   
 3025 158c FEF7C6FF 		BL USER_BEGIN 
 3026 1590 FEF790FE 		BL SUBB 
 3027 1594 FEF7C8FE 		BL CELLSL  // src dest+ count -- 
 3028 1598 FFF786FF 		BL FLSH_WR  
 3029 159c 52F804FB 		_UNNEST 
 3030              	
 3031              	// TURNKEY ( -- "WORD") 
 3032              	// set autorun program in 'BOOT variable 
 3033              	// and save image in slot 0.
 3034              		_HEADER TURNKEY,7,"TURNKEY"
 3035 15a0 42F804ED 		_NEST 
 3036 15a4 00F036F8 		BL TICK 
 3037 15a8 FEF772FF 		BL TBOOT 
 3038 15ac FEF71EFE 		BL STORE 
 3039 15b0 FFF7C4FF 		BL SAVE_IMG 
 3040 15b4 52F804FB 		_UNNEST
 3041              	
 3042              	// FORGET ( -- ) "word"
 3043              	// forget all words defined from "word"	
 3044              		_HEADER FORGET,6,"FORGET"
 3045 15b8 42F804ED 		_NEST 
 3046 15bc FFF758FC 		BL TOKEN 
 3047 15c0 FEF73CFE 		BL DUPP 
 3048 15c4 FEF7FEFD 		BL QBRAN 
 3049 15c8 FEF7DFFD 		_DOLIT 9f+MAPOFFSET 
 3049      04160018 
 3050 15d0 FFF7FEFC 		BL NAMEQ // ( a -- ca na | a 0 )
 3051 15d4 FEF7B4FE 		BL QDUP 
 3052 15d8 FEF7F4FD 		BL QBRAN 
 3053 15dc 00160018 		.word 8f+MAPOFFSET
 3054 15e0 FEF794FE 		BL CELLM // ( ca la )
 3055 15e4 FEF72AFE 		BL DUPP 
 3056 15e8 FEF786FF 		BL CPP   
 3057 15ec FEF7FEFD 		BL STORE
 3058 15f0 FEF702FE 		BL AT 
 3059 15f4 FEF78CFF 		BL LAST 
 3060 15f8 FEF7F8FD 		BL STORE
 3061 15fc 00F0A0F9 		BL OVERT 
 3062 1600 FEF718FE 	8:  BL DROP 
 3063 1604 52F804FB 	9:	_UNNEST 
 3064              	
 3065              	flash_regs:
 3066 1608 00200240 		.word FLASH_BASE_ADR // 0 
 3067 160c 23016745 		.word FLASH_KEY1   // 4 
ARM GAS  stm32eforth.s 			page 59


 3068 1610 AB89EFCD 		.word FLASH_KEY2   // 8
 3069              	
 3070              	// **************************************************************************
 3071              	//  The compiler
 3072              	
 3073              	//    '	   ( -- ca )
 3074              	// 	Search context vocabularies for the next word in input stream.
 3075              		_HEADER TICK,1,"'"
 3076 1614 42F804ED 		_NEST
 3077 1618 FFF72AFC 		BL	TOKEN
 3078 161c FFF7D8FC 		BL	NAMEQ	// ?defined
 3079 1620 FEF7D0FD 		BL	QBRAN
 3080 1624 2C160018 		.word	TICK1+MAPOFFSET
 3081 1628 52F804FB 		_UNNEST	// yes, push code address
 3082 162c FFF784BD 	TICK1:	B.W	ABORT	// no, error
 3083              	
 3084              	//    ALLOT	( n -- )
 3085              	// 	Allocate n bytes to the ram area.
 3086              		_HEADER ALLOT,5,"ALLOT"
 3087 1630 42F804ED 		_NEST
 3088 1634 FEF760FF 		BL	CPP
 3089 1638 FEF7E6FE 		BL	PSTOR
 3090 163c 52F804FB 		_UNNEST			// adjust code pointer
 3091              	
 3092              	//    ,	   ( w -- )
 3093              	// 	Compile an integer into the code dictionary.
 3094              		_HEADER COMMA,1,","
 3095 1640 42F804ED 		_NEST
 3096 1644 FFF758F8 		BL	HERE
 3097 1648 FEF7F8FD 		BL	DUPP
 3098 164c FEF75AFE 		BL	CELLP	// cell boundary
 3099 1650 FEF752FF 		BL	CPP
 3100 1654 FEF7CAFD 		BL	STORE
 3101 1658 FEF7C8FD 		BL	STORE
 3102 165c 52F804FB 		_UNNEST	// adjust code pointer, compile
 3103              		.p2align 2 
 3104              	//    [COMPILE]   ( -- //  string> )
 3105              	// 	Compile the next immediate word into code dictionary.
 3106              		_HEADER BCOMP,IMEDD+9,"[COMPILE]"
 3107 1660 42F804ED 		_NEST
 3108 1664 FFF7D6FF 		BL	TICK
 3109 1668 FFF7EAFF 		BL	COMMA
 3110 166c 52F804FB 		_UNNEST
 3111              	
 3112              	//    COMPILE	( -- )
 3113              	// 	Compile the next address in colon list to code dictionary.
 3114              		_HEADER COMPI,COMPO+7,"COMPILE"
 3115 1670 42F804ED 		_NEST
 3116 1674 FEF7CAFD 		BL	RFROM
 3117 1678 25F00105 		BIC	R5,R5,#1
 3118 167c FEF7DEFD 		BL	DUPP
 3119 1680 FEF7BAFD 		BL	AT
 3120 1684 00F0A3F9 		BL	CALLC			// compile BL instruction
 3121 1688 FEF73CFE 		BL	CELLP
 3122 168c 45F00105 		ORR	R5,R5,#1
 3123 1690 FEF7C6FD 		BL	TOR
 3124 1694 52F804FB 		_UNNEST			// adjust return address
ARM GAS  stm32eforth.s 			page 60


 3125              	
 3126              	//    LITERAL	( w -- )
 3127              	// 	Compile tos to code dictionary as an integer literal.
 3128              		_HEADER LITER,IMEDD+7,"LITERAL"
 3129 1698 74090018 		.word	_COMPI+MAPOFFSET
 3130 169c 42F804ED 		_NEST
 3131 16a0 FFF7E6FF 		BL	COMPI
 3132 16a4 8A010018 		.word	DOLIT+MAPOFFSET
 3133 16a8 FFF7CAFF 		BL	COMMA
 3134 16ac 52F804FB 		_UNNEST
 3135              	
 3136              	//    $,"	( -- )
 3137              	// 	Compile a literal string up to next " .
 3138              	
 3139              	// 	.word	_LITER+MAPOFFSET
 3140              	// _STRCQ	.byte  3
 3141              	// 	.ascii "$$,"""
 3142              	// 	.p2align 2 	
 3143              	STRCQ:
 3144 16b0 42F804ED 		_NEST
 3145 16b4 FEF769FD 		_DOLIT	-4
 3145      FCFFFFFF 
 3146 16bc FEF71CFF 		BL	CPP
 3147 16c0 FEF7A2FE 		BL	PSTOR
 3148 16c4 FEF761FD 		_DOLIT	'\"'
 3148      22000000 
 3149 16cc FFF7C4FB 		BL	WORDD			// move word to code dictionary
 3150 16d0 FEF7B2FE 		BL	COUNT
 3151 16d4 FEF7EAFD 		BL	PLUS
 3152 16d8 FEF7CCFF 		BL	ALGND			// calculate aligned end of string
 3153 16dc FEF70CFF 		BL	CPP
 3154 16e0 FEF784FD 		BL	STORE
 3155 16e4 52F804FB 		_UNNEST 			// adjust the code pointer
 3156              	
 3157              	// **************************************************************************
 3158              	//  Structures
 3159              	
 3160              	//    FOR	 ( -- a )
 3161              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3162              		_HEADER FOR,COMPO+IMEDD+3,"FOR"
 3163 16e8 42F804ED 		_NEST
 3164 16ec FFF7C0FF 		BL	COMPI
 3165 16f0 20020018 		.word	TOR+MAPOFFSET
 3166 16f4 FFF700F8 		BL	HERE
 3167 16f8 52F804FB 		_UNNEST
 3168              	
 3169              	//    BEGIN	( -- a )
 3170              	// 	Start an infinite or indefinite loop structure.
 3171              		_HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
 3172 16fc 42F804ED 		_NEST
 3173 1700 FEF7FAFF 		BL	HERE
 3174 1704 52F804FB 		_UNNEST
 3175              		.p2align 2 
 3176              	//    NEXT	( a -- )
 3177              	// 	Terminate a FOR-NEXT loop structure.
 3178              		_HEADER NEXT,COMPO+IMEDD+4,"NEXT"
 3179 1708 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 61


 3180 170c FFF7B0FF 		BL	COMPI
 3181 1710 A6010018 		.word	DONXT+MAPOFFSET
 3182 1714 FFF794FF 		BL	COMMA
 3183 1718 52F804FB 		_UNNEST
 3184              	
 3185              	//    UNTIL	( a -- )
 3186              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3187              		_HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
 3188 171c 42F804ED 		_NEST
 3189 1720 FFF7A6FF 		BL	COMPI
 3190 1724 C4010018 		.word	QBRAN+MAPOFFSET
 3191 1728 FFF78AFF 		BL	COMMA
 3192 172c 52F804FB 		_UNNEST
 3193              	
 3194              	//    AGAIN	( a -- )
 3195              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3196              		_HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
 3197 1730 42F804ED 		_NEST
 3198 1734 FFF79CFF 		BL	COMPI
 3199 1738 DC010018 		.word	BRAN+MAPOFFSET
 3200 173c FFF780FF 		BL	COMMA
 3201 1740 52F804FB 		_UNNEST
 3202              	
 3203              	//    IF	  ( -- A )
 3204              	// 	Begin a conditional branch structure.
 3205              		_HEADER IFF,COMPO+IMEDD+2,"IF"
 3206 1744 42F804ED 		_NEST
 3207 1748 FFF792FF 		BL	COMPI
 3208 174c C4010018 		.word	QBRAN+MAPOFFSET
 3209 1750 FEF7D2FF 		BL	HERE
 3210 1754 FEF719FD 		_DOLIT	4
 3210      04000000 
 3211 175c FEF7CCFE 		BL	CPP
 3212 1760 FEF752FE 		BL	PSTOR
 3213 1764 52F804FB 		_UNNEST
 3214              	
 3215              	//    AHEAD	( -- A )
 3216              	// 	Compile a forward branch instruction.
 3217              		_HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
 3218 1768 42F804ED 		_NEST
 3219 176c FFF780FF 		BL	COMPI
 3220 1770 DC010018 		.word	BRAN+MAPOFFSET
 3221 1774 FEF7C0FF 		BL	HERE
 3222 1778 FEF707FD 		_DOLIT	4
 3222      04000000 
 3223 1780 FEF7BAFE 		BL	CPP
 3224 1784 FEF740FE 		BL	PSTOR
 3225 1788 52F804FB 		_UNNEST
 3226              	
 3227              	//    REPEAT	( A a -- )
 3228              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 3229              		_HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
 3230 178c 42F804ED 		_NEST
 3231 1790 FFF7CEFF 		BL	AGAIN
 3232 1794 FEF7B0FF 		BL	HERE
 3233 1798 FEF754FD 		BL	SWAP
 3234 179c FEF726FD 		BL	STORE
ARM GAS  stm32eforth.s 			page 62


 3235 17a0 52F804FB 		_UNNEST
 3236              	
 3237              	//    THEN	( A -- )
 3238              	// 	Terminate a conditional branch structure.
 3239              		_HEADER THENN,COMPO+IMEDD+4,"THEN"
 3240 17a4 42F804ED 		_NEST
 3241 17a8 FEF7A6FF 		BL	HERE
 3242 17ac FEF74AFD 		BL	SWAP
 3243 17b0 FEF71CFD 		BL	STORE
 3244 17b4 52F804FB 		_UNNEST
 3245              	
 3246              	//    AFT	 ( a -- a A )
 3247              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 3248              		_HEADER AFT,COMPO+IMEDD+3,"AFT"
 3249 17b8 42F804ED 		_NEST
 3250 17bc FEF73AFD 		BL	DROP
 3251 17c0 FFF7D2FF 		BL	AHEAD
 3252 17c4 FFF79AFF 		BL	BEGIN
 3253 17c8 FEF73CFD 		BL	SWAP
 3254 17cc 52F804FB 		_UNNEST
 3255              	
 3256              	//    ELSE	( A -- A )
 3257              	// 	Start the false clause in an IF-ELSE-THEN structure.
 3258              		_HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
 3259 17d0 42F804ED 		_NEST
 3260 17d4 FFF7C8FF 		BL	AHEAD
 3261 17d8 FEF734FD 		BL	SWAP
 3262 17dc FFF7E2FF 		BL	THENN
 3263 17e0 52F804FB 		_UNNEST
 3264              	
 3265              	//    WHILE	( a -- A a )
 3266              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 3267              		_HEADER WHILE,COMPO+IMEDD+5,"WHILE"
 3268 17e4 42F804ED 		_NEST
 3269 17e8 FFF7ACFF 		BL	IFF
 3270 17ec FEF72AFD 		BL	SWAP
 3271 17f0 52F804FB 		_UNNEST
 3272              	
 3273              	//    ABORT"	( -- //  string> )
 3274              	// 	Conditional abort with an error message.
 3275              		_HEADER ABRTQ,IMEDD+6,"ABORT\""
 3276 17f4 42F804ED 		_NEST
 3277 17f8 FFF73AFF 		BL	COMPI
 3278 17fc 60110018 		.word	ABORQ+MAPOFFSET
 3279 1800 FFF756FF 		BL	STRCQ
 3280 1804 52F804FB 		_UNNEST
 3281              	
 3282              	//    $"	( -- //  string> )
 3283              	// 	Compile an inline string literal.
 3284              		_HEADER STRQ,IMEDD+2,"$\""
 3285 1808 42F804ED 		_NEST
 3286 180c FFF730FF 		BL	COMPI
 3287 1810 900B0018 		.word	STRQP+MAPOFFSET
 3288 1814 FFF74CFF 		BL	STRCQ
 3289 1818 52F804FB 		_UNNEST
 3290              	
 3291              	//    ."	( -- //  string> )
ARM GAS  stm32eforth.s 			page 63


 3292              	// 	Compile an inline word  literal to be typed out at run time.
 3293              		_HEADER DOTQ,IMEDD+COMPO+2,".\""
 3294 181c 42F804ED 		_NEST
 3295 1820 FFF726FF 		BL	COMPI
 3296 1824 AC0B0018 		.word	DOTQP+MAPOFFSET
 3297 1828 FFF742FF 		BL	STRCQ
 3298 182c 52F804FB 		_UNNEST
 3299              	
 3300              	/*******************
 3301              	  Name compiler
 3302              	*******************/
 3303              	
 3304              	//    ?UNIQUE	( a -- a )
 3305              	// 	Display a warning message if the word already exists.
 3306              		_HEADER UNIQU,7,"?UNIQUE"
 3307 1830 42F804ED 		_NEST
 3308 1834 FEF702FD 		BL	DUPP
 3309 1838 FFF7CAFB 		BL	NAMEQ			// ?name exists
 3310 183c FEF7C2FC 		BL	QBRAN
 3311 1840 5C180018 		.word	UNIQ1+MAPOFFSET	// redefinitions are OK
 3312 1844 FFF7B2F9 		BL	DOTQP
 3313 1848 07       		.byte	7
 3314 1849 20726544 		.ascii " reDef "		// but warn the user
 3314      656620
 3315              		.p2align 2 	
 3316 1850 FEF7FCFC 		BL	OVER
 3317 1854 FEF7F0FD 		BL	COUNT
 3318 1858 FFF75CF9 		BL	TYPEE			// just in case its not planned
 3319              	UNIQ1:
 3320 185c FEF7EAFC 		BL	DROP
 3321 1860 52F804FB 		_UNNEST
 3322              	
 3323              	//    $,n	 ( na -- )
 3324              	// 	Build a new dictionary name using the data at na.
 3325              	
 3326              	// 	.word	_UNIQU+MAPOFFSET
 3327              	// _SNAME	.byte  3
 3328              	// 	.ascii "$,n"
 3329              	// 	.p2align 2 	
 3330              	SNAME:
 3331 1864 42F804ED 		_NEST
 3332 1868 FEF7E8FC 		BL	DUPP			//  na na
 3333 186c FEF7CCFC 		BL	CAT			//  ?null input
 3334 1870 FEF7A8FC 		BL	QBRAN
 3335 1874 AC180018 		.word	SNAM1+MAPOFFSET
 3336 1878 FFF7DAFF 		BL	UNIQU			//  na
 3337 187c FEF748FE 		BL	LAST			//  na last
 3338 1880 FEF7BAFC 		BL	AT			//  na la
 3339 1884 FFF7DCFE 		BL	COMMA			//  na
 3340 1888 FEF7D8FC 		BL	DUPP			//  na na
 3341 188c FEF740FE 		BL	LAST			//  na na last
 3342 1890 FEF7ACFC 		BL	STORE			//  na , save na for vocabulary link
 3343 1894 FEF7D0FD 		BL	COUNT			//  na+1 count
 3344 1898 FEF708FD 		BL	PLUS			//  na+1+count
 3345 189c FEF7EAFE 		BL	ALGND			//  word boundary
 3346 18a0 FEF72AFE 		BL	CPP
 3347 18a4 FEF7A2FC 		BL	STORE			//  top of dictionary now
ARM GAS  stm32eforth.s 			page 64


 3348 18a8 52F804FB 		_UNNEST
 3349              	SNAM1:
 3350 18ac FFF770F9 		BL	STRQP
 3351 18b0 07       		.byte	7
 3352 18b1 206E616D 		.ascii " name? "
 3352      653F20
 3353 18b8 FFF73EBC 		B.W	ABORT
 3354              	
 3355              	//    $COMPILE	( a -- )
 3356              	// 	Compile next word to code dictionary as a token or literal.
 3357              		_HEADER SCOMP,7,"$COMPILE"
 3358 18bc 42F804ED 		_NEST
 3359 18c0 FFF786FB 		BL	NAMEQ
 3360 18c4 FEF73CFD 		BL	QDUP	// defined?
 3361 18c8 FEF77CFC 		BL	QBRAN
 3362 18cc F8180018 		.word	SCOM2+MAPOFFSET
 3363 18d0 FEF792FC 		BL	AT
 3364 18d4 FEF759FC 		_DOLIT	IMEDD
 3364      80000000 
 3365 18dc FEF7C0FC 		BL	ANDD	// immediate?
 3366 18e0 FEF770FC 		BL	QBRAN
 3367 18e4 F0180018 		.word	SCOM1+MAPOFFSET
 3368 18e8 FEF758FC 		BL	EXECU
 3369 18ec 52F804FB 		_UNNEST			// it's immediate, execute
 3370              	SCOM1:
 3371 18f0 00F06DF8 		BL	CALLC			// it's not immediate, compile
 3372 18f4 52F804FB 		_UNNEST	
 3373              	SCOM2:
 3374 18f8 FFF750F8 		BL	NUMBQ
 3375 18fc FEF762FC 		BL	QBRAN
 3376 1900 0C190018 		.word	SCOM3+MAPOFFSET
 3377 1904 FFF7C8FE 		BL	LITER
 3378 1908 52F804FB 		_UNNEST			// compile number as integer
 3379              	SCOM3: // compilation abort 
 3380 190c 00F002F8 		BL COLON_ABORT 
 3381 1910 FFF712BC 		B.W	ABORT			// error
 3382              	
 3383              	// before aborting a compilation 
 3384              	// reset HERE and LAST
 3385              	// to previous values.  
 3386              	COLON_ABORT:
 3387 1914 42F804ED 		_NEST 
 3388 1918 FEF7FAFD 		BL LAST 
 3389 191c FEF76CFC 		BL AT 
 3390 1920 FEF7F4FC 		BL CELLM 
 3391 1924 FEF78AFC 		BL DUPP 
 3392 1928 FEF7E6FD 		BL CPP  
 3393 192c FEF75EFC 		BL STORE 
 3394 1930 FEF762FC 		BL AT 
 3395 1934 FEF7ECFD 		BL LAST 
 3396 1938 FEF758FC 		BL STORE 
 3397 193c 52F804FB 		_UNNEST 
 3398              	
 3399              	//    OVERT	( -- )
 3400              	// 	Link a new word into the current vocabulary.
 3401              		_HEADER OVERT,5,"OVERT"
 3402 1940 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 65


 3403 1944 FEF7E4FD 		BL	LAST
 3404 1948 FEF756FC 		BL	AT
 3405 194c FEF7CEFD 		BL	CNTXT
 3406 1950 FEF74CFC 		BL	STORE
 3407 1954 52F804FB 		_UNNEST
 3408              	
 3409              	//    ; 	   ( -- )
 3410              	// 	Terminate a colon definition.
 3411              		_HEADER SEMIS,IMEDD+COMPO+1,";"
 3412 1958 42F804ED 		_NEST
 3413 195c FEF715FC 		BL	DOLIT 
 3414 1960 52F804FB 		_UNNEST
 3415 1964 FFF76CFE 		BL	COMMA
 3416 1968 FFF734FC 		BL	LBRAC
 3417 196c FFF7E8FF 		BL	OVERT
 3418 1970 52F804FB 		_UNNEST
 3419              	
 3420              	//    ]	   ( -- )
 3421              	// 	Start compiling the words in the input stream.
 3422              		_HEADER RBRAC,1,"]"
 3423 1974 42F804ED 		_NEST
 3424 1978 FEF707FC 		_DOLIT SCOMP+MAPOFFSET
 3424      BC180018 
 3425 1980 FEF7A8FD 		BL	TEVAL
 3426 1984 FEF732FC 		BL	STORE
 3427 1988 52F804FB 		_UNNEST
 3428              	
 3429              	
 3430              	//    COMPILE_BLW	( ca -- asm_code )
 3431              	// 	Assemble a branch-link long instruction to ca.
 3432              	// ref: ARM-v7M architecture reference, section A7.7.18 
 3433              	COMPILE_BLW:
 3434 198c 4FEA6505 		ASR R5,R5,#1 
 3435 1990 4FF45044 		_MOV32 R4,0xF000D000 
 3435      CFF20004 
 3436 1998 65F30A04 		BFI R4,R5,#0,#11
 3437 199c 4FEAD525 		LSR R5,#11
 3438 19a0 65F31944 		BFI R4,R5,#16,#10
 3439 19a4 4FEAA525 		ASR R5,#10
 3440 19a8 65F3CB24 		BFI R4,R5,#11,#1
 3441 19ac 4FEA6505 		ASR R5,#1
 3442 19b0 65F34D34 		BFI R4,R5,#13,#1
 3443 19b4 4FEA6505 		ASR R5,#1
 3444 19b8 65F39A64 		BFI R4,R5,#26,#1
 3445 19bc 14F0806F 		TST R4,#(1<<26)
 3446 19c0 02D1     		BNE 1f
 3447 19c2 00BF     		NOP 
 3448 19c4 84F42054 		EOR R4,R4,#(5<<11)
 3449 19c8 4FEA3445 	1:  ROR R5,R4,#16 
 3450 19cc 7047     		_NEXT 
 3451              	
 3452              	// 	.word	_RBRAC+MAPOFFSET
 3453              	// _CALLC	.byte  5
 3454              	// 	.ascii "call,"
 3455              	// 	.p2align 2 	
 3456              	CALLC:
 3457 19ce 42F804ED 		_NEST
ARM GAS  stm32eforth.s 			page 66


 3458 19d2 25F00105 		BIC R5,R5,#1 
 3459 19d6 FEF78FFE 		BL HERE 
 3460 19da FEF76BFC 		BL SUBB 
 3461 19de A5F10405 		SUB R5,R5,#4 
 3462 19e2 FFF7D3FF 		BL COMPILE_BLW 
 3463 19e6 FFF72BFE 		BL	COMMA			//  assemble BL.W instruction
 3464 19ea 52F804FB 		_UNNEST
 3465              	
 3466              		.p2align 
 3467              	// 	:	( -- //  string> )
 3468              	// 	Start a new colon definition using next word as its name.
 3469 19ee 00BF     		_HEADER COLON,1,":"
 3470 19f0 42F804ED 		_NEST
 3471 19f4 00F03AF8 		BL	HEAD 
 3472 19f8 FFF7BCFF 		BL	RBRAC
 3473 19fc 52F804FB 		_UNNEST
 3474              	
 3475              	//    IMMEDIATE   ( -- )
 3476              	// 	Make the last compiled word an immediate word.
 3477              		_HEADER IMMED,9,"IMMEDIATE"
 3478 1a00 42F804ED 		_NEST
 3479 1a04 FEF7C1FB 		_DOLIT IMEDD
 3479      80000000 
 3480 1a0c FEF780FD 		BL	LAST
 3481 1a10 FEF7F2FB 		BL	AT
 3482 1a14 FEF7F0FB 		BL	AT
 3483 1a18 FEF728FC 		BL	ORR
 3484 1a1c FEF778FD 		BL	LAST
 3485 1a20 FEF7EAFB 		BL	AT
 3486 1a24 FEF7E2FB 		BL	STORE
 3487 1a28 52F804FB 		_UNNEST
 3488              	
 3489              	
 3490              	//  I: ( -- a )
 3491              	// debute la compilation 
 3492              	// d'une routine d'interruption. 
 3493              		_HEADER ICOLON,2,"I:"
 3494 1a2c 42F804ED 		_NEST 
 3495 1a30 FEF762FE 		BL	HERE
 3496 1a34 FEF7A9FB 		BL	DOLIT 
 3497 1a38 42F804ED 		_NEST 
 3498 1a3c FFF700FE 		BL	COMMA 
 3499 1a40 FFF798FF 		BL	RBRAC 
 3500 1a44 52F804FB 		_UNNEST 
 3501              	
 3502              	// I; ( a -- a )
 3503              	// Termine la compilation 
 3504              	// d'une routine d'interruption. 
 3505              		_HEADER ISEMIS,IMEDD+COMPO+2,"I;"
 3506 1a48 42F804ED 		_NEST 
 3507 1a4c FEF79DFB 		BL	DOLIT 
 3508 1a50 52F804EB 		LDMFD	R2!,{LR}
 3509 1a54 FFF7F4FD 		BL	COMMA
 3510 1a58 FEF797FB 		BL	DOLIT 
 3511 1a5c 7047     		BX LR 
 3512 1a5e 00BF     		NOP 
 3513 1a60 FFF7EEFD 		BL COMMA 
ARM GAS  stm32eforth.s 			page 67


 3514 1a64 FFF7B6FB 		BL	LBRAC
 3515 1a68 52F804FB 		_UNNEST 
 3516              	
 3517              	
 3518              	/*********************
 3519              	   Defining words
 3520              	*********************/
 3521              	
 3522              	//  HEADER ( -- )  "string"
 3523              	// create a dictionary header in RAM
 3524              		_HEADER HEAD,6,"HEADER"
 3525 1a6c 42F804ED 		_NEST 
 3526 1a70 FFF7FEF9 		BL	TOKEN
 3527 1a74 FFF7F6FE 		BL	SNAME
 3528 1a78 FEF73EFE 		BL	HERE   
 3529 1a7c FEF742FC 		BL	CELLP
 3530 1a80 FFF7DEFD 		BL	COMMA 
 3531 1a84 FEF781FB 		BL	DOLIT 
 3532 1a88 42F804ED 		_NEST 
 3533 1a8c FFF7D8FD 		BL	COMMA 
 3534 1a90 52F804FB 		_UNNEST 
 3535              	
 3536              	//    CONSTANT	( u -- //  string> )
 3537              	// 	Compile a new constant.
 3538              		_HEADER CONST,8,"CONSTANT" 
 3539 1a94 42F804ED 		_NEST
 3540 1a98 FFF7E8FF 		BL	HEAD 
 3541 1a9c FEF775FB 		_DOLIT DOCON+MAPOFFSET
 3541      60040018 
 3542 1aa4 FFF793FF 		BL	CALLC
 3543 1aa8 FFF7CAFD 		BL	COMMA
 3544 1aac FFF748FF 		BL	OVERT 
 3545 1ab0 52F804FB 		_UNNEST
 3546              	
 3547              		.p2align 2 
 3548              	// doDOES> ( -- )
 3549              	// set code addresse in code field of new word 
 3550              	DODOES:
 3551 1ab4 42F804ED 		_NEST 
 3552 1ab8 FEF72AFD 		BL	LAST 
 3553 1abc FEF79CFB 		BL	AT 
 3554 1ac0 FFF7DEF9 		BL 	TOCFA
 3555 1ac4 FEF718FE 		BL	HERE  // this is ca of new word 
 3556 1ac8 FEF7C0FB 		BL	OVER  
 3557 1acc FEF78EFB 		BL	STORE
 3558 1ad0 FEF75BFB 		BL	DOLIT 
 3559 1ad4 42F804ED 		_NEST 
 3560 1ad8 FFF7B2FD 		BL COMMA  
 3561 1adc FEF755FB 		_DOLIT 12 
 3561      0C000000 
 3562 1ae4 FEF7E2FB 		BL	PLUS  // parameter field of new word 
 3563 1ae8 FFF7D6FD 		BL	LITER
 3564 1aec FEF794FB 		BL RAT 
 3565 1af0 FEF7FCFB 		BL ONEM 
 3566 1af4 FEF706FC 		BL	CELLP
 3567 1af8 FFF769FF 		BL	CALLC  
 3568 1afc FEF745FB 		BL	DOLIT 
ARM GAS  stm32eforth.s 			page 68


 3569 1b00 52F804FB 		_UNNEST 
 3570 1b04 FFF79CFD 		BL	COMMA 
 3571 1b08 FFF71AFF 		BL	OVERT 
 3572 1b0c 52F804FB 		_UNNEST 
 3573              	
 3574              		
 3575              	
 3576              		.p2align 2
 3577              	//  DOES> ( -- )
 3578              	//  compile time action 
 3579              		_HEADER DOES,IMEDD+COMPO+5,"DOES>"
 3580 1b10 42F804ED 		_NEST 
 3581 1b14 FEF739FB 		_DOLIT DODOES+MAPOFFSET
 3581      B41A0018 
 3582 1b1c FFF757FF 		BL CALLC 
 3583 1b20 FEF733FB 		BL	DOLIT	
 3584 1b24 52F804FB 		_UNNEST 
 3585 1b28 FFF78AFD 		BL	COMMA  
 3586 1b2c FEF72DFB 		BL	DOLIT 
 3587 1b30 42F804ED 		_NEST 
 3588 1b34 FFF784FD 		BL	COMMA 
 3589 1b38 52F804FB 		_UNNEST 
 3590              	
 3591              	
 3592              	//    CREATE	( -- //  string> )
 3593              	// 	Compile a new array entry without allocating code space.
 3594              		_HEADER CREAT,6,"CREATE"
 3595 1b3c 42F804ED 		_NEST
 3596 1b40 FFF794FF 		BL	HEAD 
 3597 1b44 FEF721FB 		_DOLIT DOVAR+MAPOFFSET 
 3597      54040018 
 3598 1b4c FFF73FFF 		BL	CALLC  
 3599 1b50 52F804FB 		_UNNEST
 3600              	
 3601              	//    VARIABLE	( -- //  string> )
 3602              	// 	Compile a new variable initialized to 0.
 3603              		_HEADER VARIA,8,"VARIABLE"
 3604 1b54 42F804ED 		_NEST
 3605 1b58 FFF7F0FF 		BL	CREAT
 3606 1b5c FEF715FB 		_DOLIT 0
 3606      00000000 
 3607 1b64 FFF76CFD 		BL	COMMA
 3608 1b68 FFF7EAFE 		BL	OVERT 
 3609 1b6c 52F804FB 		_UNNEST
 3610              	
 3611              	//  FCALL ( a -- )
 3612              	//  call code in FLASH memory 
 3613              	//  from RAM or opposite
 3614              		_HEADER FCALL,5,"FCALL"
 3615 1b70 42F804ED 		_NEST 
 3616 1b74 2C46     		MOV R4,R5
 3617 1b76 51F8045B 		_POP 
 3618 1b7a 44F00104 		ORR R4,R4,#1
 3619 1b7e A047     		BLX R4 
 3620 1b80 52F804FB 		_UNNEST 
 3621              	
 3622              	
ARM GAS  stm32eforth.s 			page 69


 3623              	// DEFER ( -- ) name
 3624              	// create a differed word 
 3625              		_HEADER DEFER,5,"DEFER"
 3626 1b84 42F804ED 		_NEST 
 3627 1b88 FFF770FF 		BL	HEAD
 3628 1b8c FEF7FDFA 		_DOLIT  NOP + MAPOFFSET 
 3628      88010018 
 3629 1b94 FFF71BFF 		BL	CALLC 
 3630 1b98 FEF7F7FA 		BL	DOLIT 
 3631 1b9c 52F804FB 		_UNNEST  
 3632 1ba0 FFF74EFD 		BL	COMMA 
 3633 1ba4 FFF7CCFE 		BL	OVERT  
 3634 1ba8 52F804FB 		_UNNEST 
 3635              	
 3636              	// DEFER! ( a -- ) name 
 3637              	// set execution address of a defered word 
 3638              		_HEADER DEFERSTO,6,"DEFER!"
 3639 1bac 42F804ED 		_NEST
 3640 1bb0 25F00105 		BIC R5,R5,#1 
 3641 1bb4 FFF72EFD 		BL	TICK 
 3642 1bb8 FEF7A4FB 		BL	CELLP 
 3643 1bbc FEF73EFB 		BL	DUPP
 3644 1bc0 FEF72EFB 		BL	TOR 
 3645 1bc4 FEF776FB 		BL SUBB 
 3646 1bc8 A5F10405 		SUB R5,R5,#4 
 3647 1bcc FFF7DEFE 		BL COMPILE_BLW 
 3648 1bd0 FEF71CFB 		BL	RFROM   
 3649 1bd4 FEF70AFB 		BL	STORE 
 3650 1bd8 52F804FB 		_UNNEST 
 3651              		
 3652              	// DEFER@ ( -- a ) name
 3653              	// get execution address of word 	
 3654              		_HEADER DEFERAT,6,"DEFER@"
 3655 1bdc 42F804ED 		_NEST 
 3656 1be0 FFF718FD 		BL TICK 
 3657 1be4 FEF78EFB 		BL	CELLP
 3658 1be8 FEF728FB 		BL	DUPP
 3659 1bec FEF718FB 		BL	TOR  
 3660 1bf0 FEF702FB 		BL	AT
 3661 1bf4 FEF7C9FA 		_DOLIT BLADR 
 3661      00000000 
 3662 1bfc FFF7B8FF 		BL	FCALL 
 3663 1c00 FEF7C3FA 		_DOLIT	4  
 3663      04000000 
 3664 1c08 FEF750FB 		BL	PLUS 
 3665 1c0c FEF7FEFA 		BL	RFROM
 3666 1c10 FEF74CFB 		BL	PLUS  
 3667 1c14 52F804FB 		_UNNEST
 3668              	
 3669              	/*************
 3670              	   Tools
 3671              	*************/
 3672              	
 3673              	//    dm+	 ( a u -- a )
 3674              	// 	Dump u bytes from , leaving a+u on the stack.
 3675              	
 3676              	// 	.word	_VARIA+MAPOFFSET
ARM GAS  stm32eforth.s 			page 70


 3677              	// _DMP	.byte  3
 3678              	// 	.ascii "dm+"
 3679              	 	.p2align 2 	
 3680              		.section .inflash, "ax", %progbits 
 3681              		.type DMP, %function 
 3682              	DMP:
 3683 025c 42F804ED 		_NEST
 3684 0260 00F024F9 		BL	OVER
 3685 0264 00F0C3F8 		_DOLIT	4
 3685      04000000 
 3686 026c 00F0EEFD 		BL	UDOTR			// display address
 3687 0270 00F06CFD 		BL	SPACE
 3688 0274 00F00EF9 		BL	TOR			// start count down loop
 3689 0278 00F00CB8 		B.W	PDUM2			// skip first pass
 3690              	PDUM1:
 3691 027c 00F01CF9 	  BL	DUPP
 3692 0280 00F002F9 		BL	CAT
 3693 0284 00F0C3F8 		_DOLIT 3
 3693      03000000 
 3694 028c 00F0EEFD 		BL	UDOTR			// display numeric data
 3695 0290 00F070F9 		BL	ONEP			// increment address
 3696              	PDUM2:
 3697 0294 00F0D1F8 	  BL	DONXT
 3698 0298 7C020000 		.word	PDUM1	// loop till done
 3699 029c 52F804FB 		_UNNEST
 3700              		.p2align 2 
 3701              	
 3702              	//    DUMP	( a u -- )
 3703              	// 	Dump u bytes from a, in a formatted manner.
 3704              		_HEADER_FL DUMP,4,"DUMP"
 3705 02a0 42F804ED 		_NEST
 3706 02a4 00F04CFA 		BL	BASE
 3707 02a8 00F0FAF8 		BL	AT
 3708 02ac 00F00EF9 		BL	TOR
 3709 02b0 00F086FC 		BL	HEX			// save radix,set hex
 3710 02b4 00F0C3F8 		_DOLIT	16
 3710      10000000 
 3711 02bc 00F018FB 		BL	SLASH			// change count to lines
 3712 02c0 00F00EF9 		BL	TOR
 3713 02c4 00F014B8 		B.W	DUMP4			// start count down loop
 3714              	DUMP1:
 3715 02c8 00F09CFD 	    BL	CR
 3716 02cc 00F0C3F8 		_DOLIT	16
 3716      10000000 
 3717 02d4 00F0B0F9 		BL	DDUP
 3718 02d8 FFF7C0FF 		BL	DMP			// display numeric
 3719 02dc 00F0A4F9 		BL	ROT
 3720 02e0 00F0A4F9 		BL	ROT
 3721 02e4 00F06CFD 		BL	SPACE
 3722 02e8 00F06CFD 		BL	SPACE
 3723 02ec 00F088FD 		BL	TYPEE			// display printable characters
 3724              	DUMP4:
 3725 02f0 00F0D1F8 	    BL	DONXT
 3726 02f4 C8020000 		.word	DUMP1	// loop till done
 3727              	DUMP3:
 3728 02f8 00F018F9 	    BL	DROP
 3729 02fc 00F004F9 		BL	RFROM
ARM GAS  stm32eforth.s 			page 71


 3730 0300 00F04CFA 		BL	BASE
 3731 0304 00F0F4F8 		BL	STORE			// restore radix
 3732 0308 52F804FB 		_UNNEST
 3733              	
 3734              	//    .S	  ( ... -- ... )
 3735              	// 	Display the contents of the data stack.
 3736              		_HEADER_FL DOTS,2,".S"
 3737 030c 42F804ED 		_NEST
 3738 0310 00F06CFD 		BL	SPACE
 3739 0314 00F060FB 		BL	DEPTH			// stack depth
 3740 0318 00F00EF9 		BL	TOR			// start count down loop
 3741 031c 00F006B8 		B.W	DOTS2			// skip first pass
 3742              	DOTS1:
 3743 0320 00F00AF9 		BL	RAT
 3744 0324 00F06CFB 		BL	PICK
 3745 0328 00F026FE 		BL	DOT			// index stack, display contents
 3746              	DOTS2:
 3747 032c 00F0D1F8 		BL	DONXT
 3748 0330 20030000 		.word	DOTS1	// loop till done
 3749 0334 00F06CFD 		BL	SPACE
 3750 0338 52F804FB 		_UNNEST
 3751              	
 3752              	//    >NAME	( ca -- na | F )
 3753              	// 	Convert code address to a name address.
 3754              		_HEADER_FL TNAME,5,">NAME"
 3755 033c 42F804ED 		_NEST
 3756 0340 00F00EF9 		BL	TOR			//  
 3757 0344 00F074FA 		BL	CNTXT			//  va
 3758 0348 00F0FAF8 		BL	AT			//  na
 3759              	TNAM1:
 3760 034c 00F01CF9 		BL	DUPP			//  na na
 3761 0350 00F0E0F8 		BL	QBRAN
 3762 0354 88030000 		.word	TNAM2	//  vocabulary end, no match
 3763 0358 00F01CF9 		BL	DUPP			//  na na
 3764 035c 00F04EFF 		BL	NAMET			//  na ca
 3765 0360 00F00AF9 		BL	RAT			//  na ca code
 3766 0364 00F03AF9 		BL	XORR			//  na f --
 3767 0368 00F0C3F8 		_DOLIT 	0xFFFFFF
 3767      FFFFFF00 
 3768 0370 00F02EF9 		BL	ANDD 
 3769 0374 00F0E0F8 		BL	QBRAN
 3770 0378 88030000 		.word	TNAM2
 3771 037c 00F084F9 		BL	CELLM			//  la 
 3772 0380 00F0FAF8 		BL	AT			//  next_na
 3773 0384 FFF7E2BF 		B.W	TNAM1
 3774              	TNAM2:	
 3775 0388 00F004F9 		BL	RFROM
 3776 038c 00F018F9 		BL	DROP			//  0|na --
 3777 0390 52F804FB 		_UNNEST			// 0
 3778              	
 3779              	//    .ID	 ( na -- )
 3780              	// 	Display the name at address.
 3781              		_HEADER_FL DOTID,3,".ID"
 3782 0394 42F804ED 		_NEST
 3783 0398 00F09EF9 		BL	QDUP			// if zero no name
 3784 039c 00F0E0F8 		BL	QBRAN
 3785 03a0 BC030000 		.word	DOTI1
ARM GAS  stm32eforth.s 			page 72


 3786 03a4 00F01AFA 		BL	COUNT
 3787 03a8 00F0C3F8 		_DOLIT	0x1F
 3787      1F000000 
 3788 03b0 00F02EF9 		BL	ANDD			// mask lexicon bits
 3789 03b4 00F088FD 		BL	TYPEE
 3790 03b8 52F804FB 		_UNNEST			// display name string
 3791              	DOTI1:
 3792 03bc 00F0D4FD 		BL	DOTQP
 3793 03c0 09       		.byte	9
 3794 03c1 207B6E6F 		.ascii " {noName}"
 3794      4E616D65 
 3794      7D
 3795 03ca 00BF     		.p2align 2 	
 3796 03cc 52F804FB 		_UNNEST
 3797              	
 3798              		.equ WANT_SEE, 1  // set to 1 if you want SEE 
 3799              		.if WANT_SEE 
 3800              	
 3801              	// .CA ( ca -- ca )
 3802              	// print code field address 
 3803              		.section .inflash ,"ax", %progbits 
 3804              		.p2align 2
 3805              		.type DOTCA, %function 
 3806              	DOTCA:
 3807 03d0 42F804ED 		_NEST 
 3808 03d4 00F01CF9 		BL  DUPP
 3809 03d8 00F004FE 		BL UDOT 
 3810 03dc 00F0C3F8 		_DOLIT 2 
 3810      02000000 
 3811 03e4 00F074FD 		BL SPACS 
 3812 03e8 52F804FB 		_UNNEST 
 3813              	
 3814              	// CODE_ABORT ( ca -- f )
 3815              	// abort if code definition
 3816              		.type CODE_ABORT,%function
 3817              	CODE_ABORT:
 3818 03ec 42F804ED 		_NEST 
 3819 03f0 FFF7EEFF 		BL DOTCA  
 3820 03f4 00F01CF9 		BL DUPP 
 3821 03f8 00F0FAF8 		BL AT 
 3822 03fc 00F0C3F8 		BL DOLIT 
 3823 0400 42F804ED 		_NEST 
 3824 0404 00F03AF9 		BL XORR 
 3825 0408 00F0E0F8 		BL QBRAN 
 3826 040c 24040000 		.word 1f 
 3827 0410 00F092FC 		BL DECIM
 3828 0414 01F0AEF8 		BL ABORQ 
 3829 0418 09       		.byte 9 
 3830 0419 636F6465 		.ascii "code word"
 3830      20776F72 
 3830      64
 3831 0422 00BF     		.p2align 2
 3832              	1:	 
 3833 0424 00F0D4FD 		BL DOTQP 
 3834 0428 04       		.byte 4
 3835 0429 6E657374 		.ascii "nest"
 3836 042d 0000BF   		.p2align 2 
ARM GAS  stm32eforth.s 			page 73


 3837 0430 00F09CFD 		BL CR 
 3838 0434 52F804FB 		_UNNEST 
 3839              	
 3840              	
 3841              	// UNNEST? ( ca -- ca f )
 3842              	// check if UNNEST 
 3843              		.type UNNESTQ,%function
 3844              	UNNESTQ:
 3845 0438 42F804ED 		_NEST 
 3846 043c 00F01CF9 		BL DUPP 
 3847 0440 00F0FAF8 		BL AT 
 3848 0444 00F0C3F8 		BL DOLIT 
 3849 0448 52F804FB 		_UNNEST  
 3850 044c 00F0D6F9 		BL EQUAL
 3851 0450 00F01CF9 		BL DUPP 
 3852 0454 00F0E0F8 		BL QBRAN
 3853 0458 6C040000 		.word 1f  
 3854 045c 00F0D4FD 		BL DOTQP
 3855 0460 06       		.byte 6
 3856 0461 756E6E65 		.ascii "unnest" 
 3856      7374
 3857 0467 00       		.p2align 2
 3858 0468 00F09CFD 		BL CR  
 3859 046c 52F804FB 	1:	_UNNEST 
 3860              	
 3861              	
 3862              	// search no name routine from code address. 
 3863              		.type NONAMEQ, %function
 3864              	NONAMEQ: // ( ca -- na|ca f )
 3865 0470 42F804ED 		_NEST 
 3866 0474 00F0C3F8 		_DOLIT 0 
 3866      00000000 
 3867 047c 00F020F9 		BL SWAP 
 3868 0480 00F0C3F8 		_DOLIT NONAME_SUB
 3868      18000000 
 3869 0488 00F00EF9 		BL TOR   
 3870 048c 00F01CF9 	0:	BL DUPP // ( 0 ca ca -- )  
 3871 0490 00F00AF9 		BL RAT  
 3872 0494 00F0FAF8 		BL AT
 3873 0498 00F09EF9 		BL QDUP 
 3874 049c 00F0E0F8 		BL QBRAN 
 3875 04a0 04050000 		.word 2f 
 3876 04a4 00F03AF9 		BL XORR 
 3877 04a8 00F0C3F8 		_DOLIT 0xFFFFFF 
 3877      FFFFFF00 
 3878 04b0 00F02EF9 		BL	ANDD  
 3879 04b4 00F0E0F8 		BL QBRAN 
 3880 04b8 D0040000 		.word 1f 
 3881 04bc 00F004F9 		BL RFROM 
 3882 04c0 00F080F9 		BL CELLP
 3883 04c4 00F00EF9 		BL TOR  
 3884 04c8 00F0ECF8 		BL BRAN 
 3885 04cc 8C040000 		.word 0b 
 3886 04d0 00F004F9 	1:  BL RFROM 
 3887 04d4 00F0C3F8 		_DOLIT NONAME_SUB
 3887      18000000 
 3888 04dc 00F058F9 		BL SUBB
ARM GAS  stm32eforth.s 			page 74


 3889 04e0 00F0C3F8 		_DOLIT ANONYMOUS 
 3889      54000000 
 3890 04e8 00F054F9 		BL	PLUS
 3891 04ec 00F0FAF8 		BL	AT   
 3892 04f0 00F020F9 		BL	SWAP 
 3893 04f4 00F018F9 		BL	DROP
 3894 04f8 00F020F9 		BL	SWAP 
 3895 04fc 00F0C0F9 		BL	INVER 
 3896 0500 52F804FB 		_UNNEST 
 3897 0504 00F018F9 	2:	BL DROP 
 3898 0508 00F020F9 		BL SWAP 
 3899 050c 00F004F9 		BL RFROM
 3900 0510 00F018F9 		BL DROP 
 3901 0514 52F804FB 		_UNNEST 
 3902              	
 3903              		.p2align 2 
 3904              	
 3905              	
 3906              	// print noname routine label ( n -- )
 3907              	// n is offset in ANONYMOUS array 
 3908              		.type DOTNONAME,%function
 3909              	DOTNONAME:
 3910 0518 42F804ED 		_NEST 
 3911 051c 41F8045D 		_PUSH 
 3912 0520 00F0C3F8 		_DOLIT ANONYMOUS 
 3912      54000000 
 3913 0528 00F054F9 		BL PLUS 
 3914 052c 00F0FAF8 		BL AT 
 3915 0530 00F088FD 		BL TYPEE 
 3916 0534 52F804FB 		_UNNEST 
 3917              	
 3918              	// IS_BLW ( code -- f )
 3919              	// check if it is a BL instruction 
 3920              		.type IS_BLW, %function 
 3921              	IS_BLW:
 3922 0538 42F804ED 		_NEST 
 3923 053c 00F0C3F8 		_DOLIT 0xD000F000
 3923      00F000D0 
 3924 0544 00F01CF9 		BL DUPP 
 3925 0548 00F00EF9 		BL TOR 
 3926 054c 00F02EF9 		BL ANDD
 3927 0550 00F004F9 		BL RFROM  
 3928 0554 00F0D6F9 		BL EQUAL   
 3929 0558 52F804FB 		_UNNEST 
 3930              	
 3931              	//    SEE	 ( -- //  string> )
 3932              	// 	A simple decompiler.
 3933              		_HEADER_FL SEE,3,"SEE"
 3934 055c 42F804ED 		_NEST
 3935 0560 00F04CFA 		BL BASE 
 3936 0564 00F0FAF8 		BL AT 
 3937 0568 00F00EF9 		BL TOR 
 3938 056c 00F086FC 		BL HEX 
 3939 0570 01F008FB 		BL	TICK	//  ca --, starting address
 3940 0574 00F09CFD 		BL	CR	
 3941 0578 FFF738FF 		BL  CODE_ABORT
 3942 057c 00F008F8 		BL	FL_SCOL 
ARM GAS  stm32eforth.s 			page 75


 3943 0580 00F004F9 		BL  RFROM 
 3944 0584 00F04CFA 		BL 	BASE 
 3945 0588 00F0F4F8 		BL	STORE 
 3946 058c 52F804FB 		_UNNEST
 3947              	
 3948              	
 3949              	// SEECOLON ( ca -- )
 3950              	// Decompile colon definition 
 3951              		_HEADER_FL SCOL,8,"SEECOLON"
 3952 0590 42F804ED 		_NEST 
 3953 0594 00F0C3F8 		_DOLIT 9  
 3953      09000000 
 3954 059c 00F00EF9 		BL TOR // not a BL counter limit to 10 consecutives 
 3955              	SCOL1:
 3956 05a0 00F080F9 		BL	CELLP			//  a
 3957 05a4 FFF714FF 		BL  DOTCA 
 3958 05a8 FFF746FF 		BL  UNNESTQ
 3959 05ac 00F0E0F8 		BL	QBRAN 
 3960 05b0 E0050000 		.word 1f  
 3961 05b4 00F01CF9 		BL	DUPP 
 3962 05b8 00F080F9 		BL	CELLP
 3963 05bc 00F0FAF8 		BL	AT 
 3964 05c0 FFF7BAFF 		BL	IS_BLW
 3965 05c4 00F0C0F9 		BL	INVER  
 3966 05c8 00F0E0F8 		BL	QBRAN 
 3967 05cc A0050000 		.word SCOL1 
 3968 05d0 00F004F9 		BL	RFROM 
 3969 05d4 00F018F9 		BL	DROP 
 3970 05d8 00F0ECF8 		BL	BRAN 
 3971 05dc F4050000 		.word 2f 
 3972 05e0 00F01CF9 	1:	BL	DUPP			//  a a
 3973 05e4 00F02CF8 		BL	FL_DECOMP		//  a
 3974 05e8 00F09CFD 		BL	CR 
 3975 05ec 00F0D1F8 		BL	DONXT  
 3976 05f0 A0050000 		.word	SCOL1
 3977 05f4 00F018F9 	2:	BL DROP 
 3978 05f8 52F804FB 		_UNNEST
 3979              	
 3980              	// BL-ADR ( asm_code -- rel_adr )
 3981              	// get absolute address from asm_code 
 3982              	// ref: ARM-v7M architecture reference, section A7.7.18 
 3983              		.p2align 2 
 3984              		.type BLADR, %function 
 3985              	BLADR: 
 3986 05fc 4FEA0504 		MOV.W R4,R5
 3987 0600 4FEA3444 		ROR R4,#16 
 3988 0604 64F30A05 		BFI R5,R4,#0,#11 
 3989 0608 4FEAE424 		ASR R4,#11 
 3990 060c 64F35555 		BFI R5,R4,#21,#1 
 3991 0610 4FEAA404 		ASR R4,#2
 3992 0614 64F39655 		BFI R5,R4,#22,#1
 3993 0618 4FEAE404 		ASR R4,#3
 3994 061c 64F3D425 		BFI R5,R4,#11,#10
 3995 0620 4FEAA424 		ASR R4,#10 
 3996 0624 64F3D755 		BFI R5,R4,#23,#1
 3997 0628 15F4000F 		TST R5,#(1<<23)
 3998 062c 40F00280 		BNE.W 1f
ARM GAS  stm32eforth.s 			page 76


 3999 0630 85F4C005 		EOR R5,R5,#(3<<21)
 4000 0634 4FEA0525 	1:	LSL R5,#8
 4001 0638 4FEAE515 		ASR R5,#7 
 4002 063c 7047     		_NEXT 
 4003              	
 4004              		
 4005              	// 	DECOMPILE ( a -- )
 4006              	// 	Convert code in a.  Display name of command or as data.
 4007 063e 00BF     		_HEADER_FL DECOMP,9,"DECOMPILE"
 4008 0640 42F804ED 		_NEST
 4009 0644 00F01CF9 		BL	DUPP			//  a a
 4010 0648 00F0FAF8 		BL	AT			//  a code
 4011 064c 00F01CF9 		BL	DUPP			//  a code code
 4012 0650 FFF772FF 		BL	IS_BLW
 4013 0654 00F0E0F8 		BL	QBRAN
 4014 0658 B8060000 		.word	DECOM2	//  not a BL instruction 
 4015              		//  a valid_code --, extract address and display name
 4016 065c 00F0D4FD 		BL DOTQP  
 4017 0660 03       		.byte 3
 4018 0661 424C20   		.ascii "BL "
 4019              		.p2align 2
 4020 0664 FFF7CAFF 		BL  BLADR   // extract relative address from BL code
 4021 0668 00F024F9 		BL	OVER			//  a offset a
 4022 066c 00F054F9 		BL	PLUS			//  a target-4
 4023 0670 00F080F9 		BL	CELLP			//  a target
 4024 0674 FFF7ACFE 		BL  DOTCA 
 4025 0678 FFF7FAFE 		BL	NONAMEQ 
 4026 067c 00F0E0F8 		BL	QBRAN 
 4027 0680 8C060000 		.word DECOMP1  
 4028 0684 00F0ECF8 		BL	BRAN 
 4029 0688 90060000 		.word DECOMP3 
 4030              	DECOMP1:
 4031 068c FFF756FE 		BL	FL_TNAME			//  a na/0 --, is it a name?
 4032              	DECOMP3:
 4033 0690 FFF780FE 		BL	FL_DOTID			//  a --, display name
 4034 0694 00F018F9 		BL	DROP
 4035              	// reset not BL counter 
 4036 0698 00F004F9 		BL	RFROM 
 4037 069c 00F004F9 		BL	RFROM 
 4038 06a0 00F018F9 		BL	DROP
 4039 06a4 00F0C3F8 		_DOLIT 9  
 4039      09000000 
 4040 06ac 00F00EF9 		BL	TOR 
 4041 06b0 00F00EF9 		BL	TOR 	
 4042 06b4 52F804FB 		_UNNEST
 4043              	DECOM2: // not a BL 
 4044 06b8 00F004FE 		BL	UDOT
 4045 06bc 00F018F9 		BL	DROP
 4046 06c0 52F804FB 		_UNNEST
 4047              	.endif 
 4048              	
 4049              	//    WORDS	( -- )
 4050              	// 	Display the names in the context vocabulary.
 4051              		_HEADER_FL WORDS,5,"WORDS"
 4052 06c4 42F804ED 		_NEST
 4053 06c8 00F09CFD 		BL	CR
 4054 06cc 00F074FA 		BL	CNTXT
ARM GAS  stm32eforth.s 			page 77


 4055 06d0 00F0FAF8 		BL	AT			// only in context
 4056              	WORS1:
 4057 06d4 00F09EF9 		BL	QDUP			// ?at end of list
 4058 06d8 00F0E0F8 		BL	QBRAN
 4059 06dc F8060000 		.word	WORS2
 4060 06e0 00F01CF9 		BL	DUPP
 4061 06e4 00F06CFD 		BL	SPACE
 4062 06e8 FFF754FE 		BL	FL_DOTID			// display a name
 4063 06ec 00F084F9 		BL	CELLM
 4064 06f0 00F0FAF8 		BL	AT
 4065 06f4 FFF7EEBF 		B.W	WORS1
 4066              	WORS2:
 4067 06f8 52F804FB 		_UNNEST
 4068              	
 4069              		.section .text , "ax", %progbits
 4070              	
 4071              	// **************************************************************************
 4072              	//  cold start
 4073              	
 4074              	//    VER	 ( -- n )
 4075              	// 	Return the version number of this implementation.
 4076              	
 4077              	// 	.word	_WORDS+MAPOFFSET
 4078              	// _VERSN	.byte  3
 4079              	// 	.ascii "VER"
 4080              	// 	.p2align 2 	
 4081              	VERSN:
 4082 1cb6 42F804ED 		_NEST
 4083 1cba FEF766FA 		_DOLIT	VER*256+EXT
 4083      00010000 
 4084 1cc2 52F804FB 		_UNNEST
 4085              	
 4086              	//    hi	  ( -- )
 4087              	// 	Display the sign-on message of eForth.
 4088 1cc6 00BF     		_HEADER HI,2,"HI"
 4089 1cc8 42F804ED 		_NEST
 4090 1ccc FEF736FF 		BL	CR	// initialize I/O
 4091 1cd0 FEF75BFA 		_DOLIT hi_msg 
 4091      00000000 
 4092 1cd8 FEF7AEFB 		BL	COUNT 
 4093 1cdc FEF71AFF 		BL	TYPEE 
 4094 1ce0 FEF7DCFB 		BL	BASE
 4095 1ce4 FEF788FA 		BL	AT
 4096 1ce8 FEF712FE 		BL	HEX	// save radix
 4097 1cec FFF7E3FF 		BL	VERSN
 4098 1cf0 FEF7A4FD 		BL	BDIGS
 4099 1cf4 FEF7BEFD 		BL	DIG
 4100 1cf8 FEF7BCFD 		BL	DIG
 4101 1cfc FEF745FA 		_DOLIT	'.'
 4101      2E000000 
 4102 1d04 FEF7A4FD 		BL	HOLD
 4103 1d08 FEF7C0FD 		BL	DIGS
 4104 1d0c FEF7DCFD 		BL	EDIGS
 4105 1d10 FEF700FF 		BL	TYPEE	// format version number
 4106 1d14 FEF7C2FB 		BL	BASE
 4107 1d18 FEF768FA 		BL	STORE
 4108 1d1c FEF70EFF 		BL	CR
ARM GAS  stm32eforth.s 			page 78


 4109 1d20 52F804FB 		_UNNEST			// restore radix
 4110              	
 4111              		.section .rodata
 4112              		.p2align 2 
 4113              	hi_msg:
 4114 0000 17       		.byte	23
 4115 0001 626C7565 		.ascii "blue pill stm32eForth v" 
 4115      2070696C 
 4115      6C207374 
 4115      6D333265 
 4115      466F7274 
 4116              		.p2align 2 
 4117              	
 4118              		.section  .text, "ax" ,%progbits 
 4119              	
 4120              	//    COLD	( -- )
 4121              	// 	The high level cold start sequence.
 4122              		_HEADER LASTN,4,"COLD"
 4123              	COLD:
 4124              	//  Initiate Forth registers
 4125 1d24 4FF49873 		_MOV32 R3,UPP // system variables area 
 4125      C2F20003 
 4126 1d2c 4FF49D41 		_MOV32 R1,SPP // Forth data stack 
 4126      C2F20001 
 4127 1d34 4FF49F42 		_MOV32 R2,RPP // Forth return stack 
 4127      C2F20002 
 4128 1d3c 85EA0505 		EOR R5,R5,R5			//  tos=0
 4129 1d40 42F804ED 		_NEST
 4130              	COLD1:
 4131 1d44 FEF721FA 		_DOLIT 0 
 4131      00000000 
 4132 1d4c FEF7ECF9 		BL ULED // turn off user LED 
 4133 1d50 FEF71BFA 		_DOLIT	UZERO
 4133      00000000 
 4134 1d58 FEF717FA 		_DOLIT	UPP
 4134      30010020 
 4135 1d60 FEF713FA 		_DOLIT	ULAST-UZERO
 4135      54000000 
 4136 1d68 FEF7F6FC 		BL	MOVE 			// initialize user area
 4137 1d6c FFF780FA 		BL	PRESE			// initialize stack
 4138              		// check if user image saved in slot 0 
 4139 1d70 FFF742FB 		BL IMGQ 
 4140 1d74 FEF726FA 		BL	QBRAN 
 4141 1d78 801D0018 		.word 1f+MAPOFFSET
 4142 1d7c FFF74CFB 		BL	LOAD_IMG 
 4143 1d80 FEF786FB 	1:	BL	TBOOT
 4144 1d84 FEF7CCFC 		BL	ATEXE			// application boot
 4145 1d88 FFF7DAFD 		BL	OVERT
 4146 1d8c FFF77ABA 		B.W	QUIT			// start interpretation
 4147              		.p2align 2
 4148              	CTOP: 
 4149              	COLD2:
 4150 1d90 FFFFFFFF 		.word	0XFFFFFFFF
 4151              		
 4152              	/********************************
 4153              	  data that doesn't need to be 
 4154              	  copied in RAM 
ARM GAS  stm32eforth.s 			page 79


 4155              	*******************************/
 4156              		.section .rodata 
 4157              		.p2align 2
 4158              	NONAME_SUB: // routine not in the dictionary 
 4159 0018 DC010000 		.word BRAN,QBRAN, DOLIT,DONXT,DODOES
 4159      C4010000 
 4159      8A010000 
 4159      A6010000 
 4159      B41A0000 
 4160 002c 54040000 		.word DOVAR,DOCON,IS_BLW,DOTQP,BLADR  
 4160      60040000 
 4160      00000000 
 4160      AC0B0000 
 4160      00000000 
 4161 0040 00000000 		.word DOTCA,NONAMEQ,STRCQ,VERSN  
 4161      00000000 
 4161      B0160000 
 4161      B61C0000 
 4162 0050 00000000 		.word 0 
 4163              	
 4164              	ANONYMOUS: // anonymous routines 
 4165 0054 8C000000 		.word BRAN_LBL,QBRAN_LBL,DOLIT_LBL,DONEXT_LBL,DODOES_LBL,DOVAR_LBL,DOCON_LBL
 4165      98000000 
 4165      A4000000 
 4165      B0000000 
 4165      BC000000 
 4166 0070 E0000000 		.word IS_BLW_LBL,DOTQP_LBL,BLADR_LBL,DOTCA_LBL,NONAMEQ_LBL,STRCQ_LBL,VERSN_LBL   
 4166      EC000000 
 4166      F0000000 
 4166      FC000000 
 4166      08010000 
 4167              	
 4168              	BRAN_LBL:
 4169 008c 09       		.byte 9 
 4170 008d 207B6272 		.ascii " {branch}"
 4170      616E6368 
 4170      7D
 4171 0096 0000     		.p2align 2 
 4172              	QBRAN_LBL:
 4173 0098 0A       		.byte 10
 4174 0099 207B3F62 		.ascii " {?branch}"
 4174      72616E63 
 4174      687D
 4175 00a3 00       		.p2align 2
 4176              	DOLIT_LBL:
 4177 00a4 08       		.byte 8 
 4178 00a5 207B646F 		.ascii " {doLit}"
 4178      4C69747D 
 4179 00ad 000000   		.p2align 2 
 4180              	DONEXT_LBL:
 4181 00b0 09       		.byte 9
 4182 00b1 207B646F 		.ascii " {doNext}"
 4182      4E657874 
 4182      7D
 4183 00ba 0000     		.p2align 2 
 4184              	DODOES_LBL:
 4185 00bc 09       		.byte 9
ARM GAS  stm32eforth.s 			page 80


 4186 00bd 207B646F 		.ascii " {doDoes}"
 4186      446F6573 
 4186      7D
 4187 00c6 0000     		.p2align 2 
 4188              	DOVAR_LBL:
 4189 00c8 08       		.byte 8
 4190 00c9 207B646F 		.ascii " {doVar}"
 4190      5661727D 
 4191 00d1 000000   		.p2align 2 
 4192              	DOCON_LBL:
 4193 00d4 0A       		.byte 10
 4194 00d5 207B646F 		.ascii " {doConst}"
 4194      436F6E73 
 4194      747D
 4195 00df 00       		.p2align 2 
 4196              	IS_BLW_LBL:
 4197 00e0 0B       		.byte 11 
 4198 00e1 207B424C 		.ascii " {BL code?}"
 4198      20636F64 
 4198      653F7D
 4199              		.p2align 2 
 4200              	DOTQP_LBL:
 4201 00ec 03       		.byte 3
 4202 00ed 202E22   		.ascii " .\""
 4203              		.p2align 
 4204              	BLADR_LBL:
 4205 00f0 09       		.byte 9
 4206 00f1 207B424C 		.ascii " {BL>ADR}"
 4206      3E414452 
 4206      7D
 4207 00fa 0000     		.p2align 2 
 4208              	DOTCA_LBL:
 4209 00fc 08       		.byte  8
 4210 00fd 207B646F 		.ascii " {dotca}"
 4210      7463617D 
 4211 0105 000000   		.p2align 2 
 4212              	NONAMEQ_LBL:
 4213 0108 0A       		.byte  10
 4214 0109 207B6E6F 		.ascii " {noname?}"
 4214      6E616D65 
 4214      3F7D
 4215 0113 00       		.p2align 2 
 4216              	STRCQ_LBL:
 4217 0114 06       		.byte  6
 4218 0115 207B242C 		.ascii " {$,\"}"
 4218      227D
 4219 011b 00       		.p2align 2 
 4220              	VERSN_LBL:
 4221 011c 0A       		.byte  10
 4222 011d 207B7665 		.ascii " {version}"
 4222      7273696F 
 4222      6E7D
 4223 0127 00       		.p2align 2 
 4224              	
 4225              		.section .user 
 4226              		.p2align 10 
 4227              	USER_SPACE: // save user image here.  
ARM GAS  stm32eforth.s 			page 81


 4228 0000 FFFFFFFF 		.word 0XFFFFFFFF
 4229              	
 4230              	
 4231              	  .end 
ARM GAS  stm32eforth.s 			page 82


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  stm32eforth.s 			page 83


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
       stm32eforth.s:83     *ABS*:0000000040011000 LED_GPIO
       stm32eforth.s:84     *ABS*:000000000000000d LED_PIN
       stm32eforth.s:85     *ABS*:0000000040013800 UART
       stm32eforth.s:88     *ABS*:0000000020004e80 SPP
       stm32eforth.s:89     *ABS*:0000000020004e80 TIBB
       stm32eforth.s:90     *ABS*:0000000020004f80 RPP
       stm32eforth.s:91     *ABS*:0000000020000130 UPP
       stm32eforth.s:93     *ABS*:0000000020004e00 DEND
       stm32eforth.s:94     *ABS*:0000000020000130 RAMOFFSET
       stm32eforth.s:95     *ABS*:0000000020005000 RAMEND
       stm32eforth.s:96     *ABS*:0000000008000130 FLASHOFFSET
       stm32eforth.s:99     *ABS*:0000000018000000 MAPOFFSET
       stm32eforth.s:100    *ABS*:0000000018000000 IRQOFFSET
ARM GAS  stm32eforth.s 			page 84


       stm32eforth.s:105    *ABS*:0000000000000004 SEED_OFS
       stm32eforth.s:106    *ABS*:0000000000000008 TICKS_OFS
       stm32eforth.s:107    *ABS*:000000000000000c TIMER_OFS
       stm32eforth.s:108    *ABS*:0000000000000010 TORAM_OFS
       stm32eforth.s:109    *ABS*:0000000000000014 IMG_SIGN_OFS
       stm32eforth.s:110    *ABS*:0000000000000018 BOOT_OFS
       stm32eforth.s:111    *ABS*:000000000000001c BASE_OFS
       stm32eforth.s:112    *ABS*:0000000000000020 TMP_OFS
       stm32eforth.s:113    *ABS*:0000000000000024 SPAN_OFS
       stm32eforth.s:114    *ABS*:0000000000000028 TOIN_OFS
       stm32eforth.s:115    *ABS*:000000000000002c NTIB_OFS
       stm32eforth.s:116    *ABS*:0000000000000030 TIB_OFS
       stm32eforth.s:117    *ABS*:0000000000000034 EVAL_OFS
       stm32eforth.s:118    *ABS*:0000000000000038 HLD_OFS
       stm32eforth.s:119    *ABS*:000000000000003c CTXT_OFS
       stm32eforth.s:120    *ABS*:0000000000000040 FORTH_CTOP_OFS
       stm32eforth.s:121    *ABS*:0000000000000044 USER_CTOP_OFS
       stm32eforth.s:122    *ABS*:0000000000000048 LASTN_OFS
       stm32eforth.s:123    *ABS*:000000000000004c VARS_END_OFS
       stm32eforth.s:125    *ABS*:0000000000000010 RX_QUEUE_SIZE
       stm32eforth.s:126    *ABS*:0000000000000050 RX_QUEUE_OFS
       stm32eforth.s:127    *ABS*:0000000000000060 RX_HEAD_OFS
       stm32eforth.s:128    *ABS*:0000000000000064 RX_TAIL_OFS
       stm32eforth.s:4088   .inflash.dictinary:0000000000000c14 link
       stm32eforth.s:222    .isr_vector:0000000000000000 isr_vectors
       stm32eforth.s:415    .inflash:00000000000000d0 reset_handler
       stm32eforth.s:313    .inflash:0000000000000000 default_handler
       stm32eforth.s:330    .inflash:0000000000000020 systick_handler
       stm32eforth.s:240    .isr_vector:0000000000000040 irq0
       stm32eforth.s:349    .inflash:000000000000003c uart_rx_handler
       stm32eforth.s:302    .isr_vector:0000000000000130 isr_end
       stm32eforth.s:311    .inflash:0000000000000000 $t
       stm32eforth.s:318    .inflash:0000000000000008 exception_msg
       stm32eforth.s:391    .inflash:00000000000000a4 uart_puts
       stm32eforth.s:372    .inflash:000000000000007c reset_mcu
       stm32eforth.s:319    .inflash:0000000000000008 $d
       stm32eforth.s:339    .inflash:000000000000003a systick_exit
       stm32eforth.s:369    .inflash:0000000000000076 user_reboot
       stm32eforth.s:382    .inflash:0000000000000090 user_reboot_msg
       stm32eforth.s:380    .inflash:000000000000008c scb_adr
       stm32eforth.s:381    .inflash:000000000000008c $d
       stm32eforth.s:386    .inflash:00000000000000a2 $t
       stm32eforth.s:541    .inflash:00000000000001f2 remap
       stm32eforth.s:439    .inflash:0000000000000110 init_devices
       stm32eforth.s:516    .inflash:00000000000001b0 uart_init
       stm32eforth.s:430    .inflash:00000000000000f0 forth_init
       stm32eforth.s:426    .inflash:00000000000000ec forth_entry
       stm32eforth.s:427    .inflash:00000000000000ec $d
       stm32eforth.s:4123   .text:0000000000001d24 COLD
       stm32eforth.s:431    .inflash:00000000000000f0 $t
       stm32eforth.s:452    .inflash:000000000000012e wait_hserdy
       stm32eforth.s:472    .inflash:0000000000000148 wait_pllrdy
       stm32eforth.s:484    .inflash:0000000000000168 wait_sws
       stm32eforth.s:573    .inflash:0000000000000258 remap_dest
       stm32eforth.s:571    .inflash:0000000000000254 remap_src
       stm32eforth.s:4148   .text:0000000000001d90 CTOP
       stm32eforth.s:620    .text:0000000000000000 UZERO
ARM GAS  stm32eforth.s 			page 85


       stm32eforth.s:572    .inflash:0000000000000254 $d
       stm32eforth.s:579    *ABS*:0000000000000001 VER
       stm32eforth.s:580    *ABS*:0000000000000000 EXT
       stm32eforth.s:584    *ABS*:0000000000000040 COMPO
       stm32eforth.s:585    *ABS*:0000000000000080 IMEDD
       stm32eforth.s:586    *ABS*:00000000ffffff1f MASKK
       stm32eforth.s:588    *ABS*:0000000000000004 CELLL
       stm32eforth.s:589    *ABS*:000000000000000a BASEE
       stm32eforth.s:590    *ABS*:0000000000000008 VOCSS
       stm32eforth.s:592    *ABS*:0000000000000008 BKSPP
       stm32eforth.s:593    *ABS*:000000000000000a LF
       stm32eforth.s:594    *ABS*:000000000000000d CRR
       stm32eforth.s:595    *ABS*:000000000000001b ERR
       stm32eforth.s:596    *ABS*:0000000000000027 TIC
       stm32eforth.s:621    .text:0000000000000000 $d
       stm32eforth.s:4088   .text:0000000000001cc8 HI
       stm32eforth.s:2646   .text:0000000000001180 INTER
       stm32eforth.s:4088   .inflash.dictinary:0000000000000c14 _LASTN
       stm32eforth.s:641    .text:0000000000000054 ULAST
       stm32eforth.s:649    .text:000000000000006c $t
               .inflash.dictinary:0000000000000000 LF_RSTIVEC
               .inflash.dictinary:0000000000000004 _RSTIVEC
               .inflash.dictinary:000000000000000d $d
       stm32eforth.s:653    .inflash.dictinary:0000000000000010 CA_RSTIVEC
       stm32eforth.s:653    .text:0000000000000070 RSTIVEC
       stm32eforth.s:777    .text:000000000000018a DOLIT
       stm32eforth.s:655    .text:0000000000000078 $d
       stm32eforth.s:920    .text:0000000000000244 SWAP
       stm32eforth.s:656    .text:000000000000007c $t
       stm32eforth.s:1069   .text:0000000000000320 CELLS
       stm32eforth.s:658    .text:0000000000000088 $d
       stm32eforth.s:987    .text:00000000000002ac PLUS
       stm32eforth.s:659    .text:000000000000008c $t
       stm32eforth.s:852    .text:00000000000001ec STORE
       stm32eforth.s:653    .inflash.dictinary:0000000000000014 LF_SETIVEC
       stm32eforth.s:653    .inflash.dictinary:0000000000000018 _SETIVEC
       stm32eforth.s:665    .inflash.dictinary:0000000000000024 CA_SETIVEC
       stm32eforth.s:665    .text:0000000000000098 SETIVEC
       stm32eforth.s:1026   .text:00000000000002e4 ONEP
       stm32eforth.s:671    .text:00000000000000b0 $d
       stm32eforth.s:672    .text:00000000000000b4 $t
       stm32eforth.s:665    .inflash.dictinary:0000000000000028 LF_RAND
       stm32eforth.s:665    .inflash.dictinary:000000000000002c _RAND
       stm32eforth.s:681    .inflash.dictinary:0000000000000034 CA_RAND
       stm32eforth.s:681    .text:00000000000000c0 RAND
       stm32eforth.s:1300   .text:000000000000046c SEED
       stm32eforth.s:860    .text:00000000000001f8 AT
       stm32eforth.s:914    .text:000000000000023c DUPP
       stm32eforth.s:1148   .text:0000000000000394 ABSS
       stm32eforth.s:1535   .text:0000000000000624 MODD
       stm32eforth.s:681    .inflash.dictinary:0000000000000038 LF_PAUSE
       stm32eforth.s:681    .inflash.dictinary:000000000000003c _PAUSE
       stm32eforth.s:701    .inflash.dictinary:0000000000000044 CA_PAUSE
       stm32eforth.s:701    .text:0000000000000100 PAUSE
       stm32eforth.s:1314   .text:0000000000000484 TIMER
       stm32eforth.s:705    .text:000000000000010c PAUSE_LOOP
       stm32eforth.s:822    .text:00000000000001c4 QBRAN
ARM GAS  stm32eforth.s 			page 86


       stm32eforth.s:709    .text:0000000000000118 $d
       stm32eforth.s:712    .text:0000000000000124 PAUSE_EXIT
       stm32eforth.s:840    .text:00000000000001dc BRAN
       stm32eforth.s:710    .text:000000000000011c $t
       stm32eforth.s:711    .text:0000000000000120 $d
       stm32eforth.s:713    .text:0000000000000124 $t
       stm32eforth.s:701    .inflash.dictinary:0000000000000048 LF_ULED
       stm32eforth.s:701    .inflash.dictinary:000000000000004c _ULED
       stm32eforth.s:717    .inflash.dictinary:0000000000000054 CA_ULED
       stm32eforth.s:717    .text:0000000000000128 ULED
       stm32eforth.s:725    .text:0000000000000140 ULED_OFF
       stm32eforth.s:717    .inflash.dictinary:0000000000000058 LF_QRX
       stm32eforth.s:717    .inflash.dictinary:000000000000005c _QRX
       stm32eforth.s:731    .inflash.dictinary:0000000000000064 CA_QRX
       stm32eforth.s:731    .text:0000000000000144 QRX
       stm32eforth.s:732    .text:0000000000000144 QKEY
       stm32eforth.s:731    .inflash.dictinary:0000000000000068 LF_EMIT
       stm32eforth.s:731    .inflash.dictinary:000000000000006c _EMIT
       stm32eforth.s:751    .inflash.dictinary:0000000000000074 CA_EMIT
       stm32eforth.s:751    .text:0000000000000170 EMIT
       stm32eforth.s:752    .text:0000000000000170 TECHO
       stm32eforth.s:751    .inflash.dictinary:0000000000000078 LF_NOP
       stm32eforth.s:751    .inflash.dictinary:000000000000007c _NOP
       stm32eforth.s:766    .inflash.dictinary:0000000000000080 CA_NOP
       stm32eforth.s:766    .text:0000000000000188 NOP
       stm32eforth.s:766    .inflash.dictinary:0000000000000084 LF_EXECU
       stm32eforth.s:766    .inflash.dictinary:0000000000000088 _EXECU
       stm32eforth.s:786    .inflash.dictinary:0000000000000090 CA_EXECU
       stm32eforth.s:786    .text:000000000000019c EXECU
       stm32eforth.s:800    .text:00000000000001a6 DONXT
       stm32eforth.s:807    .text:00000000000001b4 NEXT1
       stm32eforth.s:829    .text:00000000000001d6 QBRAN1
       stm32eforth.s:786    .inflash.dictinary:0000000000000094 LF_EXIT
       stm32eforth.s:786    .inflash.dictinary:0000000000000098 _EXIT
       stm32eforth.s:847    .inflash.dictinary:00000000000000a0 CA_EXIT
       stm32eforth.s:847    .text:00000000000001e8 EXIT
       stm32eforth.s:847    .inflash.dictinary:00000000000000a4 LF_STORE
       stm32eforth.s:847    .inflash.dictinary:00000000000000a8 _STORE
       stm32eforth.s:852    .inflash.dictinary:00000000000000ac CA_STORE
       stm32eforth.s:852    .inflash.dictinary:00000000000000b0 LF_AT
       stm32eforth.s:852    .inflash.dictinary:00000000000000b4 _AT
       stm32eforth.s:860    .inflash.dictinary:00000000000000b8 CA_AT
       stm32eforth.s:860    .inflash.dictinary:00000000000000bc LF_CSTOR
       stm32eforth.s:860    .inflash.dictinary:00000000000000c0 _CSTOR
       stm32eforth.s:866    .inflash.dictinary:00000000000000c4 CA_CSTOR
       stm32eforth.s:866    .text:00000000000001fc CSTOR
       stm32eforth.s:866    .inflash.dictinary:00000000000000c8 LF_CAT
       stm32eforth.s:866    .inflash.dictinary:00000000000000cc _CAT
       stm32eforth.s:874    .inflash.dictinary:00000000000000d0 CA_CAT
       stm32eforth.s:874    .text:0000000000000208 CAT
       stm32eforth.s:874    .inflash.dictinary:00000000000000d4 LF_RFROM
       stm32eforth.s:874    .inflash.dictinary:00000000000000d8 _RFROM
       stm32eforth.s:880    .inflash.dictinary:00000000000000dc CA_RFROM
       stm32eforth.s:880    .text:000000000000020c RFROM
       stm32eforth.s:880    .inflash.dictinary:00000000000000e0 LF_RAT
       stm32eforth.s:880    .inflash.dictinary:00000000000000e4 _RAT
       stm32eforth.s:887    .inflash.dictinary:00000000000000e8 CA_RAT
ARM GAS  stm32eforth.s 			page 87


       stm32eforth.s:887    .text:0000000000000218 RAT
       stm32eforth.s:887    .inflash.dictinary:00000000000000ec LF_TOR
       stm32eforth.s:887    .inflash.dictinary:00000000000000f0 _TOR
       stm32eforth.s:894    .inflash.dictinary:00000000000000f4 CA_TOR
       stm32eforth.s:894    .text:0000000000000220 TOR
       stm32eforth.s:894    .inflash.dictinary:00000000000000f8 LF_SPAT
       stm32eforth.s:894    .inflash.dictinary:00000000000000fc _SPAT
       stm32eforth.s:901    .inflash.dictinary:0000000000000100 CA_SPAT
       stm32eforth.s:901    .text:000000000000022c SPAT
       stm32eforth.s:901    .inflash.dictinary:0000000000000104 LF_DROP
       stm32eforth.s:901    .inflash.dictinary:0000000000000108 _DROP
       stm32eforth.s:908    .inflash.dictinary:0000000000000110 CA_DROP
       stm32eforth.s:908    .text:0000000000000234 DROP
       stm32eforth.s:908    .inflash.dictinary:0000000000000114 LF_DUPP
       stm32eforth.s:908    .inflash.dictinary:0000000000000118 _DUPP
       stm32eforth.s:914    .inflash.dictinary:000000000000011c CA_DUPP
       stm32eforth.s:914    .inflash.dictinary:0000000000000120 LF_SWAP
       stm32eforth.s:914    .inflash.dictinary:0000000000000124 _SWAP
       stm32eforth.s:920    .inflash.dictinary:000000000000012c CA_SWAP
       stm32eforth.s:920    .inflash.dictinary:0000000000000130 LF_OVER
       stm32eforth.s:920    .inflash.dictinary:0000000000000134 _OVER
       stm32eforth.s:928    .inflash.dictinary:000000000000013c CA_OVER
       stm32eforth.s:928    .text:000000000000024c OVER
       stm32eforth.s:928    .inflash.dictinary:0000000000000140 LF_ZLESS
       stm32eforth.s:928    .inflash.dictinary:0000000000000144 _ZLESS
       stm32eforth.s:935    .inflash.dictinary:0000000000000148 CA_ZLESS
       stm32eforth.s:935    .text:0000000000000254 ZLESS
       stm32eforth.s:935    .inflash.dictinary:000000000000014c LF_ANDD
       stm32eforth.s:935    .inflash.dictinary:0000000000000150 _ANDD
       stm32eforth.s:942    .inflash.dictinary:0000000000000154 CA_ANDD
       stm32eforth.s:942    .text:0000000000000260 ANDD
       stm32eforth.s:942    .inflash.dictinary:0000000000000158 LF_ORR
       stm32eforth.s:942    .inflash.dictinary:000000000000015c _ORR
       stm32eforth.s:949    .inflash.dictinary:0000000000000160 CA_ORR
       stm32eforth.s:949    .text:000000000000026c ORR
       stm32eforth.s:949    .inflash.dictinary:0000000000000164 LF_XORR
       stm32eforth.s:949    .inflash.dictinary:0000000000000168 _XORR
       stm32eforth.s:956    .inflash.dictinary:000000000000016c CA_XORR
       stm32eforth.s:956    .text:0000000000000278 XORR
       stm32eforth.s:956    .inflash.dictinary:0000000000000170 LF_UPLUS
       stm32eforth.s:956    .inflash.dictinary:0000000000000174 _UPLUS
       stm32eforth.s:963    .inflash.dictinary:0000000000000178 CA_UPLUS
       stm32eforth.s:963    .text:0000000000000284 UPLUS
       stm32eforth.s:963    .inflash.dictinary:000000000000017c LF_RSHIFT
       stm32eforth.s:963    .inflash.dictinary:0000000000000180 _RSHIFT
       stm32eforth.s:973    .inflash.dictinary:0000000000000188 CA_RSHIFT
       stm32eforth.s:973    .text:0000000000000294 RSHIFT
       stm32eforth.s:973    .inflash.dictinary:000000000000018c LF_LSHIFT
       stm32eforth.s:973    .inflash.dictinary:0000000000000190 _LSHIFT
       stm32eforth.s:980    .inflash.dictinary:0000000000000198 CA_LSHIFT
       stm32eforth.s:980    .text:00000000000002a0 LSHIFT
       stm32eforth.s:980    .inflash.dictinary:000000000000019c LF_PLUS
       stm32eforth.s:980    .inflash.dictinary:00000000000001a0 _PLUS
       stm32eforth.s:987    .inflash.dictinary:00000000000001a4 CA_PLUS
       stm32eforth.s:987    .inflash.dictinary:00000000000001a8 LF_SUBB
       stm32eforth.s:987    .inflash.dictinary:00000000000001ac _SUBB
       stm32eforth.s:994    .inflash.dictinary:00000000000001b0 CA_SUBB
ARM GAS  stm32eforth.s 			page 88


       stm32eforth.s:994    .text:00000000000002b4 SUBB
       stm32eforth.s:994    .inflash.dictinary:00000000000001b4 LF_STAR
       stm32eforth.s:994    .inflash.dictinary:00000000000001b8 _STAR
       stm32eforth.s:1001   .inflash.dictinary:00000000000001bc CA_STAR
       stm32eforth.s:1001   .text:00000000000002c0 STAR
       stm32eforth.s:1001   .inflash.dictinary:00000000000001c0 LF_UMSTA
       stm32eforth.s:1001   .inflash.dictinary:00000000000001c4 _UMSTA
       stm32eforth.s:1008   .inflash.dictinary:00000000000001c8 CA_UMSTA
       stm32eforth.s:1008   .text:00000000000002cc UMSTA
       stm32eforth.s:1008   .inflash.dictinary:00000000000001cc LF_MSTAR
       stm32eforth.s:1008   .inflash.dictinary:00000000000001d0 _MSTAR
       stm32eforth.s:1017   .inflash.dictinary:00000000000001d4 CA_MSTAR
       stm32eforth.s:1017   .text:00000000000002d8 MSTAR
       stm32eforth.s:1017   .inflash.dictinary:00000000000001d8 LF_ONEP
       stm32eforth.s:1017   .inflash.dictinary:00000000000001dc _ONEP
       stm32eforth.s:1026   .inflash.dictinary:00000000000001e0 CA_ONEP
       stm32eforth.s:1026   .inflash.dictinary:00000000000001e4 LF_ONEM
       stm32eforth.s:1026   .inflash.dictinary:00000000000001e8 _ONEM
       stm32eforth.s:1032   .inflash.dictinary:00000000000001ec CA_ONEM
       stm32eforth.s:1032   .text:00000000000002ec ONEM
       stm32eforth.s:1032   .inflash.dictinary:00000000000001f0 LF_TWOP
       stm32eforth.s:1032   .inflash.dictinary:00000000000001f4 _TWOP
       stm32eforth.s:1038   .inflash.dictinary:00000000000001f8 CA_TWOP
       stm32eforth.s:1038   .text:00000000000002f4 TWOP
       stm32eforth.s:1038   .inflash.dictinary:00000000000001fc LF_TWOM
       stm32eforth.s:1038   .inflash.dictinary:0000000000000200 _TWOM
       stm32eforth.s:1044   .inflash.dictinary:0000000000000204 CA_TWOM
       stm32eforth.s:1044   .text:00000000000002fc TWOM
       stm32eforth.s:1044   .inflash.dictinary:0000000000000208 LF_CELLP
       stm32eforth.s:1044   .inflash.dictinary:000000000000020c _CELLP
       stm32eforth.s:1050   .inflash.dictinary:0000000000000214 CA_CELLP
       stm32eforth.s:1050   .text:0000000000000304 CELLP
       stm32eforth.s:1050   .inflash.dictinary:0000000000000218 LF_CELLM
       stm32eforth.s:1050   .inflash.dictinary:000000000000021c _CELLM
       stm32eforth.s:1056   .inflash.dictinary:0000000000000224 CA_CELLM
       stm32eforth.s:1056   .text:000000000000030c CELLM
       stm32eforth.s:1056   .inflash.dictinary:0000000000000228 LF_BLANK
       stm32eforth.s:1056   .inflash.dictinary:000000000000022c _BLANK
       stm32eforth.s:1062   .inflash.dictinary:0000000000000230 CA_BLANK
       stm32eforth.s:1062   .text:0000000000000314 BLANK
       stm32eforth.s:1062   .inflash.dictinary:0000000000000234 LF_CELLS
       stm32eforth.s:1062   .inflash.dictinary:0000000000000238 _CELLS
       stm32eforth.s:1069   .inflash.dictinary:0000000000000240 CA_CELLS
       stm32eforth.s:1069   .inflash.dictinary:0000000000000244 LF_CELLSL
       stm32eforth.s:1069   .inflash.dictinary:0000000000000248 _CELLSL
       stm32eforth.s:1075   .inflash.dictinary:0000000000000250 CA_CELLSL
       stm32eforth.s:1075   .text:0000000000000328 CELLSL
       stm32eforth.s:1075   .inflash.dictinary:0000000000000254 LF_TWOST
       stm32eforth.s:1075   .inflash.dictinary:0000000000000258 _TWOST
       stm32eforth.s:1081   .inflash.dictinary:000000000000025c CA_TWOST
       stm32eforth.s:1081   .text:0000000000000330 TWOST
       stm32eforth.s:1081   .inflash.dictinary:0000000000000260 LF_TWOSL
       stm32eforth.s:1081   .inflash.dictinary:0000000000000264 _TWOSL
       stm32eforth.s:1087   .inflash.dictinary:0000000000000268 CA_TWOSL
       stm32eforth.s:1087   .text:0000000000000338 TWOSL
       stm32eforth.s:1087   .inflash.dictinary:000000000000026c LF_QDUP
       stm32eforth.s:1087   .inflash.dictinary:0000000000000270 _QDUP
ARM GAS  stm32eforth.s 			page 89


       stm32eforth.s:1093   .inflash.dictinary:0000000000000278 CA_QDUP
       stm32eforth.s:1093   .text:0000000000000340 QDUP
       stm32eforth.s:1093   .inflash.dictinary:000000000000027c LF_ROT
       stm32eforth.s:1093   .inflash.dictinary:0000000000000280 _ROT
       stm32eforth.s:1101   .inflash.dictinary:0000000000000284 CA_ROT
       stm32eforth.s:1101   .text:000000000000034c ROT
       stm32eforth.s:1101   .inflash.dictinary:0000000000000288 LF_DDROP
       stm32eforth.s:1101   .inflash.dictinary:000000000000028c _DDROP
       stm32eforth.s:1110   .inflash.dictinary:0000000000000294 CA_DDROP
       stm32eforth.s:1110   .text:0000000000000358 DDROP
       stm32eforth.s:1110   .inflash.dictinary:0000000000000298 LF_DDUP
       stm32eforth.s:1110   .inflash.dictinary:000000000000029c _DDUP
       stm32eforth.s:1117   .inflash.dictinary:00000000000002a4 CA_DDUP
       stm32eforth.s:1117   .text:0000000000000364 DDUP
       stm32eforth.s:1117   .inflash.dictinary:00000000000002a8 LF_DPLUS
       stm32eforth.s:1117   .inflash.dictinary:00000000000002ac _DPLUS
       stm32eforth.s:1125   .inflash.dictinary:00000000000002b0 CA_DPLUS
       stm32eforth.s:1125   .text:0000000000000370 DPLUS
       stm32eforth.s:1125   .inflash.dictinary:00000000000002b4 LF_INVER
       stm32eforth.s:1125   .inflash.dictinary:00000000000002b8 _INVER
       stm32eforth.s:1136   .inflash.dictinary:00000000000002bc CA_INVER
       stm32eforth.s:1136   .text:0000000000000384 INVER
       stm32eforth.s:1136   .inflash.dictinary:00000000000002c0 LF_NEGAT
       stm32eforth.s:1136   .inflash.dictinary:00000000000002c4 _NEGAT
       stm32eforth.s:1142   .inflash.dictinary:00000000000002cc CA_NEGAT
       stm32eforth.s:1142   .text:000000000000038c NEGAT
       stm32eforth.s:1142   .inflash.dictinary:00000000000002d0 LF_ABSS
       stm32eforth.s:1142   .inflash.dictinary:00000000000002d4 _ABSS
       stm32eforth.s:1148   .inflash.dictinary:00000000000002d8 CA_ABSS
       stm32eforth.s:1148   .inflash.dictinary:00000000000002dc LF_ZEQUAL
       stm32eforth.s:1148   .inflash.dictinary:00000000000002e0 _ZEQUAL
       stm32eforth.s:1156   .inflash.dictinary:00000000000002e4 CA_ZEQUAL
       stm32eforth.s:1156   .text:00000000000003a0 ZEQUAL
       stm32eforth.s:1156   .inflash.dictinary:00000000000002e8 LF_EQUAL
       stm32eforth.s:1156   .inflash.dictinary:00000000000002ec _EQUAL
       stm32eforth.s:1165   .inflash.dictinary:00000000000002f0 CA_EQUAL
       stm32eforth.s:1165   .text:00000000000003b0 EQUAL
       stm32eforth.s:1165   .inflash.dictinary:00000000000002f4 LF_ULESS
       stm32eforth.s:1165   .inflash.dictinary:00000000000002f8 _ULESS
       stm32eforth.s:1175   .inflash.dictinary:00000000000002fc CA_ULESS
       stm32eforth.s:1175   .text:00000000000003c0 ULESS
       stm32eforth.s:1175   .inflash.dictinary:0000000000000300 LF_LESS
       stm32eforth.s:1175   .inflash.dictinary:0000000000000304 _LESS
       stm32eforth.s:1185   .inflash.dictinary:0000000000000308 CA_LESS
       stm32eforth.s:1185   .text:00000000000003d0 LESS
       stm32eforth.s:1185   .inflash.dictinary:000000000000030c LF_GREAT
       stm32eforth.s:1185   .inflash.dictinary:0000000000000310 _GREAT
       stm32eforth.s:1195   .inflash.dictinary:0000000000000314 CA_GREAT
       stm32eforth.s:1195   .text:00000000000003e0 GREAT
       stm32eforth.s:1195   .inflash.dictinary:0000000000000318 LF_MAX
       stm32eforth.s:1195   .inflash.dictinary:000000000000031c _MAX
       stm32eforth.s:1205   .inflash.dictinary:0000000000000320 CA_MAX
       stm32eforth.s:1205   .text:00000000000003f0 MAX
       stm32eforth.s:1205   .inflash.dictinary:0000000000000324 LF_MIN
       stm32eforth.s:1205   .inflash.dictinary:0000000000000328 _MIN
       stm32eforth.s:1214   .inflash.dictinary:000000000000032c CA_MIN
       stm32eforth.s:1214   .text:00000000000003fc MIN
ARM GAS  stm32eforth.s 			page 90


       stm32eforth.s:1214   .inflash.dictinary:0000000000000330 LF_PSTOR
       stm32eforth.s:1214   .inflash.dictinary:0000000000000334 _PSTOR
       stm32eforth.s:1223   .inflash.dictinary:0000000000000338 CA_PSTOR
       stm32eforth.s:1223   .text:0000000000000408 PSTOR
       stm32eforth.s:1223   .inflash.dictinary:000000000000033c LF_DSTOR
       stm32eforth.s:1223   .inflash.dictinary:0000000000000340 _DSTOR
       stm32eforth.s:1233   .inflash.dictinary:0000000000000344 CA_DSTOR
       stm32eforth.s:1233   .text:0000000000000418 DSTOR
       stm32eforth.s:1233   .inflash.dictinary:0000000000000348 LF_DAT
       stm32eforth.s:1233   .inflash.dictinary:000000000000034c _DAT
       stm32eforth.s:1243   .inflash.dictinary:0000000000000350 CA_DAT
       stm32eforth.s:1243   .text:000000000000042c DAT
       stm32eforth.s:1243   .inflash.dictinary:0000000000000354 LF_COUNT
       stm32eforth.s:1243   .inflash.dictinary:0000000000000358 _COUNT
       stm32eforth.s:1251   .inflash.dictinary:0000000000000360 CA_COUNT
       stm32eforth.s:1251   .text:0000000000000438 COUNT
       stm32eforth.s:1251   .inflash.dictinary:0000000000000364 LF_DNEGA
       stm32eforth.s:1251   .inflash.dictinary:0000000000000368 _DNEGA
       stm32eforth.s:1259   .inflash.dictinary:0000000000000370 CA_DNEGA
       stm32eforth.s:1259   .text:0000000000000444 DNEGA
       stm32eforth.s:1277   .text:0000000000000454 DOVAR
       stm32eforth.s:1289   .text:0000000000000460 DOCON
       stm32eforth.s:1259   .inflash.dictinary:0000000000000374 LF_SEED
       stm32eforth.s:1259   .inflash.dictinary:0000000000000378 _SEED
       stm32eforth.s:1300   .inflash.dictinary:0000000000000380 CA_SEED
       stm32eforth.s:1300   .inflash.dictinary:0000000000000384 LF_MSEC
       stm32eforth.s:1300   .inflash.dictinary:0000000000000388 _MSEC
       stm32eforth.s:1307   .inflash.dictinary:0000000000000390 CA_MSEC
       stm32eforth.s:1307   .text:0000000000000478 MSEC
       stm32eforth.s:1307   .inflash.dictinary:0000000000000394 LF_TIMER
       stm32eforth.s:1307   .inflash.dictinary:0000000000000398 _TIMER
       stm32eforth.s:1314   .inflash.dictinary:00000000000003a0 CA_TIMER
       stm32eforth.s:1314   .inflash.dictinary:00000000000003a4 LF_TBOOT
       stm32eforth.s:1314   .inflash.dictinary:00000000000003a8 _TBOOT
       stm32eforth.s:1321   .inflash.dictinary:00000000000003b0 CA_TBOOT
       stm32eforth.s:1321   .text:0000000000000490 TBOOT
       stm32eforth.s:1321   .inflash.dictinary:00000000000003b4 LF_BASE
       stm32eforth.s:1321   .inflash.dictinary:00000000000003b8 _BASE
       stm32eforth.s:1328   .inflash.dictinary:00000000000003c0 CA_BASE
       stm32eforth.s:1328   .text:000000000000049c BASE
       stm32eforth.s:1340   .text:00000000000004a6 TEMP
       stm32eforth.s:1328   .inflash.dictinary:00000000000003c4 LF_SPAN
       stm32eforth.s:1328   .inflash.dictinary:00000000000003c8 _SPAN
       stm32eforth.s:1347   .inflash.dictinary:00000000000003d0 CA_SPAN
       stm32eforth.s:1347   .text:00000000000004b0 SPAN
       stm32eforth.s:1347   .inflash.dictinary:00000000000003d4 LF_INN
       stm32eforth.s:1347   .inflash.dictinary:00000000000003d8 _INN
       stm32eforth.s:1354   .inflash.dictinary:00000000000003dc CA_INN
       stm32eforth.s:1354   .text:00000000000004bc INN
       stm32eforth.s:1354   .inflash.dictinary:00000000000003e0 LF_NTIB
       stm32eforth.s:1354   .inflash.dictinary:00000000000003e4 _NTIB
       stm32eforth.s:1361   .inflash.dictinary:00000000000003ec CA_NTIB
       stm32eforth.s:1361   .text:00000000000004c8 NTIB
       stm32eforth.s:1361   .inflash.dictinary:00000000000003f0 LF_TEVAL
       stm32eforth.s:1361   .inflash.dictinary:00000000000003f4 _TEVAL
       stm32eforth.s:1368   .inflash.dictinary:00000000000003fc CA_TEVAL
       stm32eforth.s:1368   .text:00000000000004d4 TEVAL
ARM GAS  stm32eforth.s 			page 91


       stm32eforth.s:1368   .inflash.dictinary:0000000000000400 LF_HLD
       stm32eforth.s:1368   .inflash.dictinary:0000000000000404 _HLD
       stm32eforth.s:1375   .inflash.dictinary:0000000000000408 CA_HLD
       stm32eforth.s:1375   .text:00000000000004e0 HLD
       stm32eforth.s:1375   .inflash.dictinary:000000000000040c LF_CNTXT
       stm32eforth.s:1375   .inflash.dictinary:0000000000000410 _CNTXT
       stm32eforth.s:1382   .inflash.dictinary:0000000000000418 CA_CNTXT
       stm32eforth.s:1382   .text:00000000000004ec CNTXT
       stm32eforth.s:1383   .text:00000000000004ec CRRNT
       stm32eforth.s:1382   .inflash.dictinary:000000000000041c LF_CPP
       stm32eforth.s:1382   .inflash.dictinary:0000000000000420 _CPP
       stm32eforth.s:1390   .inflash.dictinary:0000000000000424 CA_CPP
       stm32eforth.s:1390   .text:00000000000004f8 CPP
       stm32eforth.s:1390   .inflash.dictinary:0000000000000428 LF_FCP
       stm32eforth.s:1390   .inflash.dictinary:000000000000042c _FCP
       stm32eforth.s:1397   .inflash.dictinary:0000000000000430 CA_FCP
       stm32eforth.s:1397   .text:0000000000000504 FCP
       stm32eforth.s:1397   .inflash.dictinary:0000000000000434 LF_LAST
       stm32eforth.s:1397   .inflash.dictinary:0000000000000438 _LAST
       stm32eforth.s:1404   .inflash.dictinary:0000000000000440 CA_LAST
       stm32eforth.s:1404   .text:0000000000000510 LAST
       stm32eforth.s:1404   .inflash.dictinary:0000000000000444 LF_USER_BEGIN
       stm32eforth.s:1404   .inflash.dictinary:0000000000000448 _USER_BEGIN
       stm32eforth.s:1415   .inflash.dictinary:0000000000000454 CA_USER_BEGIN
       stm32eforth.s:1415   .text:000000000000051c USER_BEGIN
       stm32eforth.s:1419   .text:0000000000000524 USR_BGN_ADR
       stm32eforth.s:1420   .text:0000000000000524 $d
       stm32eforth.s:1415   .inflash.dictinary:0000000000000458 LF_USER_END
       stm32eforth.s:1415   .inflash.dictinary:000000000000045c _USER_END
       stm32eforth.s:1424   .inflash.dictinary:0000000000000468 CA_USER_END
       stm32eforth.s:1424   .text:0000000000000528 USER_END
       stm32eforth.s:1424   .text:0000000000000528 $t
       stm32eforth.s:1424   .inflash.dictinary:000000000000046c LF_IMG_ADR
       stm32eforth.s:1424   .inflash.dictinary:0000000000000470 _IMG_ADR
       stm32eforth.s:1431   .inflash.dictinary:0000000000000478 CA_IMG_ADR
       stm32eforth.s:1431   .text:0000000000000538 IMG_ADR
       stm32eforth.s:1435   .text:0000000000000540 USR_IMG_ADR
       stm32eforth.s:1436   .text:0000000000000540 $d
       stm32eforth.s:4227   .user:0000000000000000 USER_SPACE
       stm32eforth.s:1431   .inflash.dictinary:000000000000047c LF_IMG_SIGN
       stm32eforth.s:1431   .inflash.dictinary:0000000000000480 _IMG_SIGN
       stm32eforth.s:1440   .inflash.dictinary:000000000000048c CA_IMG_SIGN
       stm32eforth.s:1440   .text:0000000000000544 IMG_SIGN
       stm32eforth.s:1440   .text:0000000000000544 $t
       stm32eforth.s:1440   .inflash.dictinary:0000000000000490 LF_WITHI
       stm32eforth.s:1440   .inflash.dictinary:0000000000000494 _WITHI
       stm32eforth.s:1451   .inflash.dictinary:000000000000049c CA_WITHI
       stm32eforth.s:1451   .text:0000000000000550 WITHI
       stm32eforth.s:1451   .inflash.dictinary:00000000000004a0 LF_UMMOD
       stm32eforth.s:1451   .inflash.dictinary:00000000000004a4 _UMMOD
       stm32eforth.s:1465   .inflash.dictinary:00000000000004ac CA_UMMOD
       stm32eforth.s:1465   .text:0000000000000570 UMMOD
       stm32eforth.s:1469   .text:000000000000057a UMMOD0
       stm32eforth.s:1476   .text:000000000000058a UMMOD1
       stm32eforth.s:1482   .text:0000000000000594 UMMOD2
       stm32eforth.s:1465   .inflash.dictinary:00000000000004b0 LF_MSMOD
       stm32eforth.s:1465   .inflash.dictinary:00000000000004b4 _MSMOD
ARM GAS  stm32eforth.s 			page 92


       stm32eforth.s:1491   .inflash.dictinary:00000000000004bc CA_MSMOD
       stm32eforth.s:1491   .text:00000000000005a0 MSMOD
       stm32eforth.s:1498   .text:00000000000005b8 $d
       stm32eforth.s:1503   .text:00000000000005cc MMOD1
       stm32eforth.s:1499   .text:00000000000005bc $t
       stm32eforth.s:1508   .text:00000000000005dc $d
       stm32eforth.s:1511   .text:00000000000005e8 MMOD2
       stm32eforth.s:1509   .text:00000000000005e0 $t
       stm32eforth.s:1516   .text:00000000000005f8 $d
       stm32eforth.s:1520   .text:0000000000000608 MMOD3
       stm32eforth.s:1517   .text:00000000000005fc $t
       stm32eforth.s:1491   .inflash.dictinary:00000000000004c0 LF_SLMOD
       stm32eforth.s:1491   .inflash.dictinary:00000000000004c4 _SLMOD
       stm32eforth.s:1525   .inflash.dictinary:00000000000004cc CA_SLMOD
       stm32eforth.s:1525   .text:000000000000060c SLMOD
       stm32eforth.s:1525   .inflash.dictinary:00000000000004d0 LF_MODD
       stm32eforth.s:1525   .inflash.dictinary:00000000000004d4 _MODD
       stm32eforth.s:1535   .inflash.dictinary:00000000000004dc CA_MODD
       stm32eforth.s:1535   .inflash.dictinary:00000000000004e0 LF_SLASH
       stm32eforth.s:1535   .inflash.dictinary:00000000000004e4 _SLASH
       stm32eforth.s:1543   .inflash.dictinary:00000000000004e8 CA_SLASH
       stm32eforth.s:1543   .text:0000000000000634 SLASH
       stm32eforth.s:1543   .inflash.dictinary:00000000000004ec LF_SSMOD
       stm32eforth.s:1543   .inflash.dictinary:00000000000004f0 _SSMOD
       stm32eforth.s:1552   .inflash.dictinary:00000000000004f8 CA_SSMOD
       stm32eforth.s:1552   .text:0000000000000648 SSMOD
       stm32eforth.s:1552   .inflash.dictinary:00000000000004fc LF_STASL
       stm32eforth.s:1552   .inflash.dictinary:0000000000000500 _STASL
       stm32eforth.s:1562   .inflash.dictinary:0000000000000504 CA_STASL
       stm32eforth.s:1562   .text:0000000000000660 STASL
       stm32eforth.s:1562   .inflash.dictinary:0000000000000508 LF_ALGND
       stm32eforth.s:1562   .inflash.dictinary:000000000000050c _ALGND
       stm32eforth.s:1574   .inflash.dictinary:0000000000000514 CA_ALGND
       stm32eforth.s:1574   .text:0000000000000674 ALGND
       stm32eforth.s:1574   .inflash.dictinary:0000000000000518 LF_TCHAR
       stm32eforth.s:1574   .inflash.dictinary:000000000000051c _TCHAR
       stm32eforth.s:1582   .inflash.dictinary:0000000000000524 CA_TCHAR
       stm32eforth.s:1582   .text:0000000000000684 TCHAR
       stm32eforth.s:1584   .text:000000000000068c $d
       stm32eforth.s:1585   .text:0000000000000690 $t
       stm32eforth.s:1588   .text:00000000000006a0 $d
       stm32eforth.s:1589   .text:00000000000006a4 $t
       stm32eforth.s:1592   .text:00000000000006b0 $d
       stm32eforth.s:1595   .text:00000000000006c0 TCHA1
       stm32eforth.s:1593   .text:00000000000006b4 $t
       stm32eforth.s:1594   .text:00000000000006bc $d
       stm32eforth.s:1596   .text:00000000000006c0 $t
       stm32eforth.s:1582   .inflash.dictinary:0000000000000528 LF_DEPTH
       stm32eforth.s:1582   .inflash.dictinary:000000000000052c _DEPTH
       stm32eforth.s:1600   .inflash.dictinary:0000000000000534 CA_DEPTH
       stm32eforth.s:1600   .text:00000000000006c4 DEPTH
       stm32eforth.s:1600   .inflash.dictinary:0000000000000538 LF_PICK
       stm32eforth.s:1600   .inflash.dictinary:000000000000053c _PICK
       stm32eforth.s:1609   .inflash.dictinary:0000000000000544 CA_PICK
       stm32eforth.s:1609   .text:00000000000006dc PICK
       stm32eforth.s:1609   .inflash.dictinary:0000000000000548 LF_HERE
       stm32eforth.s:1609   .inflash.dictinary:000000000000054c _HERE
ARM GAS  stm32eforth.s 			page 93


       stm32eforth.s:1623   .inflash.dictinary:0000000000000554 CA_HERE
       stm32eforth.s:1623   .text:00000000000006f8 HERE
       stm32eforth.s:1623   .inflash.dictinary:0000000000000558 LF_PAD
       stm32eforth.s:1623   .inflash.dictinary:000000000000055c _PAD
       stm32eforth.s:1631   .inflash.dictinary:0000000000000560 CA_PAD
       stm32eforth.s:1631   .text:0000000000000708 PAD
       stm32eforth.s:1631   .inflash.dictinary:0000000000000564 LF_TIB
       stm32eforth.s:1631   .inflash.dictinary:0000000000000568 _TIB
       stm32eforth.s:1639   .inflash.dictinary:000000000000056c CA_TIB
       stm32eforth.s:1639   .text:0000000000000718 TIB
       stm32eforth.s:1639   .inflash.dictinary:0000000000000570 LF_ATEXE
       stm32eforth.s:1639   .inflash.dictinary:0000000000000574 _ATEXE
       stm32eforth.s:1646   .inflash.dictinary:0000000000000580 CA_ATEXE
       stm32eforth.s:1646   .text:0000000000000720 ATEXE
       stm32eforth.s:1646   .inflash.dictinary:0000000000000584 LF_CMOVE
       stm32eforth.s:1646   .inflash.dictinary:0000000000000588 _CMOVE
       stm32eforth.s:1657   .inflash.dictinary:0000000000000590 CA_CMOVE
       stm32eforth.s:1657   .text:0000000000000734 CMOVE
       stm32eforth.s:1664   .text:0000000000000746 CMOV1
       stm32eforth.s:1661   .text:000000000000073e CMOV0
       stm32eforth.s:1669   .text:0000000000000750 CMOV2
       stm32eforth.s:1657   .inflash.dictinary:0000000000000594 LF_MOVE
       stm32eforth.s:1657   .inflash.dictinary:0000000000000598 _MOVE
       stm32eforth.s:1675   .inflash.dictinary:00000000000005a0 CA_MOVE
       stm32eforth.s:1675   .text:0000000000000758 MOVE
       stm32eforth.s:1683   .text:000000000000076e MOVE1
       stm32eforth.s:1680   .text:0000000000000766 MOVE0
       stm32eforth.s:1688   .text:0000000000000778 MOVE2
       stm32eforth.s:1675   .inflash.dictinary:00000000000005a4 LF_FILL
       stm32eforth.s:1675   .inflash.dictinary:00000000000005a8 _FILL
       stm32eforth.s:1694   .inflash.dictinary:00000000000005b0 CA_FILL
       stm32eforth.s:1694   .text:0000000000000780 FILL
       stm32eforth.s:1697   .text:0000000000000788 FILL0
       stm32eforth.s:1700   .text:000000000000078c FILL1
       stm32eforth.s:1706   .text:000000000000079a FILL2
       stm32eforth.s:1694   .inflash.dictinary:00000000000005b4 LF_PACKS
       stm32eforth.s:1694   .inflash.dictinary:00000000000005b8 _PACKS
       stm32eforth.s:1712   .inflash.dictinary:00000000000005c0 CA_PACKS
       stm32eforth.s:1712   .text:00000000000007a0 PACKS
       stm32eforth.s:1720   .text:00000000000007c0 $d
       stm32eforth.s:1721   .text:00000000000007c4 $t
       stm32eforth.s:1722   .text:00000000000007cc $d
       stm32eforth.s:1723   .text:00000000000007d0 $t
       stm32eforth.s:1712   .inflash.dictinary:00000000000005c4 LF_DIGIT
       stm32eforth.s:1712   .inflash.dictinary:00000000000005c8 _DIGIT
       stm32eforth.s:1739   .inflash.dictinary:00000000000005d0 CA_DIGIT
       stm32eforth.s:1739   .text:00000000000007f8 DIGIT
       stm32eforth.s:1741   .text:0000000000000800 $d
       stm32eforth.s:1742   .text:0000000000000804 $t
       stm32eforth.s:1739   .inflash.dictinary:00000000000005d4 LF_EXTRC
       stm32eforth.s:1739   .inflash.dictinary:00000000000005d8 _EXTRC
       stm32eforth.s:1751   .inflash.dictinary:00000000000005e0 CA_EXTRC
       stm32eforth.s:1751   .text:000000000000081c EXTRC
       stm32eforth.s:1753   .text:0000000000000824 $d
       stm32eforth.s:1754   .text:0000000000000828 $t
       stm32eforth.s:1751   .inflash.dictinary:00000000000005e4 LF_BDIGS
       stm32eforth.s:1751   .inflash.dictinary:00000000000005e8 _BDIGS
ARM GAS  stm32eforth.s 			page 94


       stm32eforth.s:1762   .inflash.dictinary:00000000000005ec CA_BDIGS
       stm32eforth.s:1762   .text:000000000000083c BDIGS
       stm32eforth.s:1762   .inflash.dictinary:00000000000005f0 LF_HOLD
       stm32eforth.s:1762   .inflash.dictinary:00000000000005f4 _HOLD
       stm32eforth.s:1771   .inflash.dictinary:00000000000005fc CA_HOLD
       stm32eforth.s:1771   .text:0000000000000850 HOLD
       stm32eforth.s:1771   .inflash.dictinary:0000000000000600 LF_DIG
       stm32eforth.s:1771   .inflash.dictinary:0000000000000604 _DIG
       stm32eforth.s:1784   .inflash.dictinary:0000000000000608 CA_DIG
       stm32eforth.s:1784   .text:0000000000000874 DIG
       stm32eforth.s:1784   .inflash.dictinary:000000000000060c LF_DIGS
       stm32eforth.s:1784   .inflash.dictinary:0000000000000610 _DIGS
       stm32eforth.s:1794   .inflash.dictinary:0000000000000614 CA_DIGS
       stm32eforth.s:1794   .text:000000000000088c DIGS
       stm32eforth.s:1796   .text:0000000000000890 DIGS1
       stm32eforth.s:1800   .text:000000000000089c $d
       stm32eforth.s:1802   .text:00000000000008a2 DIGS2
       stm32eforth.s:1801   .text:00000000000008a0 $t
       stm32eforth.s:1794   .inflash.dictinary:0000000000000618 LF_SIGN
       stm32eforth.s:1794   .inflash.dictinary:000000000000061c _SIGN
       stm32eforth.s:1807   .inflash.dictinary:0000000000000624 CA_SIGN
       stm32eforth.s:1807   .text:00000000000008a8 SIGN
       stm32eforth.s:1811   .text:00000000000008b4 $d
       stm32eforth.s:1814   .text:00000000000008c4 SIGN1
       stm32eforth.s:1812   .text:00000000000008b8 $t
       stm32eforth.s:1812   .text:00000000000008bc $d
       stm32eforth.s:1813   .text:00000000000008c0 $t
       stm32eforth.s:1807   .inflash.dictinary:0000000000000628 LF_EDIGS
       stm32eforth.s:1807   .inflash.dictinary:000000000000062c _EDIGS
       stm32eforth.s:1819   .inflash.dictinary:0000000000000630 CA_EDIGS
       stm32eforth.s:1819   .text:00000000000008c8 EDIGS
       stm32eforth.s:1836   .text:00000000000008e8 STRR
       stm32eforth.s:1819   .inflash.dictinary:0000000000000634 LF_HEX
       stm32eforth.s:1819   .inflash.dictinary:0000000000000638 _HEX
       stm32eforth.s:1850   .inflash.dictinary:000000000000063c CA_HEX
       stm32eforth.s:1850   .text:0000000000000910 HEX
       stm32eforth.s:1852   .text:0000000000000918 $d
       stm32eforth.s:1853   .text:000000000000091c $t
       stm32eforth.s:1850   .inflash.dictinary:0000000000000640 LF_DECIM
       stm32eforth.s:1850   .inflash.dictinary:0000000000000644 _DECIM
       stm32eforth.s:1859   .inflash.dictinary:000000000000064c CA_DECIM
       stm32eforth.s:1859   .text:0000000000000928 DECIM
       stm32eforth.s:1861   .text:0000000000000930 $d
       stm32eforth.s:1862   .text:0000000000000934 $t
       stm32eforth.s:1859   .inflash.dictinary:0000000000000650 LF_DIGTQ
       stm32eforth.s:1859   .inflash.dictinary:0000000000000654 _DIGTQ
       stm32eforth.s:1871   .inflash.dictinary:000000000000065c CA_DIGTQ
       stm32eforth.s:1871   .text:0000000000000940 DIGTQ
       stm32eforth.s:1874   .text:000000000000094c $d
       stm32eforth.s:1875   .text:0000000000000950 $t
       stm32eforth.s:1876   .text:0000000000000958 $d
       stm32eforth.s:1877   .text:000000000000095c $t
       stm32eforth.s:1880   .text:0000000000000968 $d
       stm32eforth.s:1887   .text:000000000000098c DGTQ1
       stm32eforth.s:1881   .text:000000000000096c $t
       stm32eforth.s:1881   .text:0000000000000970 $d
       stm32eforth.s:1882   .text:0000000000000974 $t
ARM GAS  stm32eforth.s 			page 95


       stm32eforth.s:1884   .text:0000000000000980 $d
       stm32eforth.s:1885   .text:0000000000000984 $t
       stm32eforth.s:1871   .inflash.dictinary:0000000000000660 LF_NUMBQ
       stm32eforth.s:1871   .inflash.dictinary:0000000000000664 _NUMBQ
       stm32eforth.s:1895   .inflash.dictinary:000000000000066c CA_NUMBQ
       stm32eforth.s:1895   .text:000000000000099c NUMBQ
       stm32eforth.s:1900   .text:00000000000009b0 $d
       stm32eforth.s:1901   .text:00000000000009b4 $t
       stm32eforth.s:1905   .text:00000000000009c8 $d
       stm32eforth.s:1906   .text:00000000000009cc $t
       stm32eforth.s:1908   .text:00000000000009d4 $d
       stm32eforth.s:1914   .text:00000000000009ec NUMQ1
       stm32eforth.s:1909   .text:00000000000009d8 $t
       stm32eforth.s:1917   .text:00000000000009f8 $d
       stm32eforth.s:1918   .text:00000000000009fc $t
       stm32eforth.s:1928   .text:0000000000000a24 $d
       stm32eforth.s:1966   .text:0000000000000ab0 NUMQ6
       stm32eforth.s:1929   .text:0000000000000a28 $t
       stm32eforth.s:1931   .text:0000000000000a30 NUMQ2
       stm32eforth.s:1939   .text:0000000000000a4c $d
       stm32eforth.s:1958   .text:0000000000000a94 NUMQ4
       stm32eforth.s:1940   .text:0000000000000a50 $t
       stm32eforth.s:1948   .text:0000000000000a70 $d
       stm32eforth.s:1949   .text:0000000000000a74 $t
       stm32eforth.s:1953   .text:0000000000000a84 $d
       stm32eforth.s:1955   .text:0000000000000a8c NUMQ3
       stm32eforth.s:1954   .text:0000000000000a88 $t
       stm32eforth.s:1964   .text:0000000000000aac NUMQ5
       stm32eforth.s:1963   .text:0000000000000aa8 $d
       stm32eforth.s:1965   .text:0000000000000aac $t
       stm32eforth.s:1895   .inflash.dictinary:0000000000000670 LF_KEY
       stm32eforth.s:1895   .inflash.dictinary:0000000000000674 _KEY
       stm32eforth.s:1979   .inflash.dictinary:0000000000000678 CA_KEY
       stm32eforth.s:1979   .text:0000000000000ac8 KEY
       stm32eforth.s:1981   .text:0000000000000acc KEY1
       stm32eforth.s:1984   .text:0000000000000ad4 $d
       stm32eforth.s:1985   .text:0000000000000ad8 $t
       stm32eforth.s:1979   .inflash.dictinary:000000000000067c LF_SPACE
       stm32eforth.s:1979   .inflash.dictinary:0000000000000680 _SPACE
       stm32eforth.s:1989   .inflash.dictinary:0000000000000688 CA_SPACE
       stm32eforth.s:1989   .text:0000000000000adc SPACE
       stm32eforth.s:1989   .inflash.dictinary:000000000000068c LF_SPACS
       stm32eforth.s:1989   .inflash.dictinary:0000000000000690 _SPACS
       stm32eforth.s:1997   .inflash.dictinary:0000000000000698 CA_SPACS
       stm32eforth.s:1997   .text:0000000000000aec SPACS
       stm32eforth.s:1999   .text:0000000000000af4 $d
       stm32eforth.s:2000   .text:0000000000000af8 $t
       stm32eforth.s:2005   .text:0000000000000b08 CHAR2
       stm32eforth.s:2003   .text:0000000000000b04 CHAR1
       stm32eforth.s:2007   .text:0000000000000b0c $d
       stm32eforth.s:2008   .text:0000000000000b10 $t
       stm32eforth.s:1997   .inflash.dictinary:000000000000069c LF_TYPEE
       stm32eforth.s:1997   .inflash.dictinary:00000000000006a0 _TYPEE
       stm32eforth.s:2012   .inflash.dictinary:00000000000006a8 CA_TYPEE
       stm32eforth.s:2012   .text:0000000000000b14 TYPEE
       stm32eforth.s:2020   .text:0000000000000b2c TYPE2
       stm32eforth.s:2016   .text:0000000000000b20 TYPE1
ARM GAS  stm32eforth.s 			page 96


       stm32eforth.s:2022   .text:0000000000000b30 $d
       stm32eforth.s:2023   .text:0000000000000b34 $t
       stm32eforth.s:2012   .inflash.dictinary:00000000000006ac LF_CR
       stm32eforth.s:2012   .inflash.dictinary:00000000000006b0 _CR
       stm32eforth.s:2028   .inflash.dictinary:00000000000006b4 CA_CR
       stm32eforth.s:2028   .text:0000000000000b3c CR
       stm32eforth.s:2030   .text:0000000000000b44 $d
       stm32eforth.s:2031   .text:0000000000000b48 $t
       stm32eforth.s:2032   .text:0000000000000b50 $d
       stm32eforth.s:2033   .text:0000000000000b54 $t
       stm32eforth.s:2044   .text:0000000000000b5c DOSTR
       stm32eforth.s:2067   .text:0000000000000b90 STRQP
       stm32eforth.s:2079   .text:0000000000000b9c DOTST
       stm32eforth.s:2092   .text:0000000000000bac DOTQP
       stm32eforth.s:2028   .inflash.dictinary:00000000000006b8 LF_DOTR
       stm32eforth.s:2028   .inflash.dictinary:00000000000006bc _DOTR
       stm32eforth.s:2100   .inflash.dictinary:00000000000006c0 CA_DOTR
       stm32eforth.s:2100   .text:0000000000000bbc DOTR
       stm32eforth.s:2100   .inflash.dictinary:00000000000006c4 LF_UDOTR
       stm32eforth.s:2100   .inflash.dictinary:00000000000006c8 _UDOTR
       stm32eforth.s:2113   .inflash.dictinary:00000000000006cc CA_UDOTR
       stm32eforth.s:2113   .text:0000000000000be0 UDOTR
       stm32eforth.s:2113   .inflash.dictinary:00000000000006d0 LF_UDOT
       stm32eforth.s:2113   .inflash.dictinary:00000000000006d4 _UDOT
       stm32eforth.s:2128   .inflash.dictinary:00000000000006d8 CA_UDOT
       stm32eforth.s:2128   .text:0000000000000c0c UDOT
       stm32eforth.s:2128   .inflash.dictinary:00000000000006dc LF_HDOT
       stm32eforth.s:2128   .inflash.dictinary:00000000000006e0 _HDOT
       stm32eforth.s:2139   .inflash.dictinary:00000000000006e4 CA_HDOT
       stm32eforth.s:2139   .text:0000000000000c28 HDOT
       stm32eforth.s:2139   .inflash.dictinary:00000000000006e8 LF_DOT
       stm32eforth.s:2139   .inflash.dictinary:00000000000006ec _DOT
       stm32eforth.s:2154   .inflash.dictinary:00000000000006f0 CA_DOT
       stm32eforth.s:2154   .text:0000000000000c50 DOT
       stm32eforth.s:2158   .text:0000000000000c60 $d
       stm32eforth.s:2159   .text:0000000000000c64 $t
       stm32eforth.s:2161   .text:0000000000000c6c $d
       stm32eforth.s:2164   .text:0000000000000c78 DOT1
       stm32eforth.s:2162   .text:0000000000000c70 $t
       stm32eforth.s:2154   .inflash.dictinary:00000000000006f4 LF_QUEST
       stm32eforth.s:2154   .inflash.dictinary:00000000000006f8 _QUEST
       stm32eforth.s:2172   .inflash.dictinary:00000000000006fc CA_QUEST
       stm32eforth.s:2172   .text:0000000000000c88 QUEST
       stm32eforth.s:2188   .text:0000000000000c98 PARS
       stm32eforth.s:2196   .text:0000000000000cb4 $d
       stm32eforth.s:2263   .text:0000000000000da6 PARS8
       stm32eforth.s:2197   .text:0000000000000cb8 $t
       stm32eforth.s:2203   .text:0000000000000cd0 $d
       stm32eforth.s:2224   .text:0000000000000d20 PARS3
       stm32eforth.s:2204   .text:0000000000000cd4 $t
       stm32eforth.s:2205   .text:0000000000000cd8 PARS1
       stm32eforth.s:2213   .text:0000000000000cf4 $d
       stm32eforth.s:2222   .text:0000000000000d1c PARS2
       stm32eforth.s:2214   .text:0000000000000cf8 $t
       stm32eforth.s:2216   .text:0000000000000d00 $d
       stm32eforth.s:2217   .text:0000000000000d04 $t
       stm32eforth.s:2219   .text:0000000000000d10 $d
ARM GAS  stm32eforth.s 			page 97


       stm32eforth.s:2220   .text:0000000000000d14 $t
       stm32eforth.s:2228   .text:0000000000000d2c PARS4
       stm32eforth.s:2239   .text:0000000000000d54 $d
       stm32eforth.s:2241   .text:0000000000000d5c PARS5
       stm32eforth.s:2240   .text:0000000000000d58 $t
       stm32eforth.s:2243   .text:0000000000000d60 $d
       stm32eforth.s:2250   .text:0000000000000d7a PARS6
       stm32eforth.s:2244   .text:0000000000000d64 $t
       stm32eforth.s:2246   .text:0000000000000d6c $d
       stm32eforth.s:2247   .text:0000000000000d70 $t
       stm32eforth.s:2256   .text:0000000000000d8e PARS7
       stm32eforth.s:2172   .inflash.dictinary:0000000000000700 LF_PARSE
       stm32eforth.s:2172   .inflash.dictinary:0000000000000704 _PARSE
       stm32eforth.s:2271   .inflash.dictinary:000000000000070c CA_PARSE
       stm32eforth.s:2271   .text:0000000000000db8 PARSE
       stm32eforth.s:2271   .inflash.dictinary:0000000000000710 LF_DOTPR
       stm32eforth.s:2271   .inflash.dictinary:0000000000000714 _DOTPR
       stm32eforth.s:2291   .inflash.dictinary:0000000000000718 CA_DOTPR
       stm32eforth.s:2291   .text:0000000000000df8 DOTPR
       stm32eforth.s:2293   .text:0000000000000e00 $d
       stm32eforth.s:2294   .text:0000000000000e04 $t
       stm32eforth.s:2291   .inflash.dictinary:000000000000071c LF_PAREN
       stm32eforth.s:2291   .inflash.dictinary:0000000000000720 _PAREN
       stm32eforth.s:2300   .inflash.dictinary:0000000000000724 CA_PAREN
       stm32eforth.s:2300   .text:0000000000000e10 PAREN
       stm32eforth.s:2302   .text:0000000000000e18 $d
       stm32eforth.s:2303   .text:0000000000000e1c $t
       stm32eforth.s:2300   .inflash.dictinary:0000000000000728 LF_BKSLA
       stm32eforth.s:2300   .inflash.dictinary:000000000000072c _BKSLA
       stm32eforth.s:2309   .inflash.dictinary:0000000000000730 CA_BKSLA
       stm32eforth.s:2309   .text:0000000000000e28 BKSLA
       stm32eforth.s:2309   .inflash.dictinary:0000000000000734 LF_CAHR
       stm32eforth.s:2309   .inflash.dictinary:0000000000000738 _CAHR
       stm32eforth.s:2319   .inflash.dictinary:0000000000000740 CA_CAHR
       stm32eforth.s:2319   .text:0000000000000e40 CAHR
       stm32eforth.s:2319   .inflash.dictinary:0000000000000744 LF_WORDD
       stm32eforth.s:2319   .inflash.dictinary:0000000000000748 _WORDD
       stm32eforth.s:2329   .inflash.dictinary:0000000000000750 CA_WORDD
       stm32eforth.s:2329   .text:0000000000000e58 WORDD
       stm32eforth.s:2329   .inflash.dictinary:0000000000000754 LF_TOKEN
       stm32eforth.s:2329   .inflash.dictinary:0000000000000758 _TOKEN
       stm32eforth.s:2339   .inflash.dictinary:0000000000000760 CA_TOKEN
       stm32eforth.s:2339   .text:0000000000000e70 TOKEN
       stm32eforth.s:2339   .inflash.dictinary:0000000000000764 LF_TOCFA
       stm32eforth.s:2339   .inflash.dictinary:0000000000000768 _TOCFA
       stm32eforth.s:2350   .inflash.dictinary:0000000000000770 CA_TOCFA
       stm32eforth.s:2350   .text:0000000000000e80 TOCFA
       stm32eforth.s:2353   .text:0000000000000e8c $d
       stm32eforth.s:2354   .text:0000000000000e90 $t
       stm32eforth.s:2350   .inflash.dictinary:0000000000000774 LF_NAMET
       stm32eforth.s:2350   .inflash.dictinary:0000000000000778 _NAMET
       stm32eforth.s:2361   .inflash.dictinary:0000000000000780 CA_NAMET
       stm32eforth.s:2361   .text:0000000000000ea0 NAMET
       stm32eforth.s:2361   .inflash.dictinary:0000000000000784 LF_SAMEQ
       stm32eforth.s:2361   .inflash.dictinary:0000000000000788 _SAMEQ
       stm32eforth.s:2375   .inflash.dictinary:0000000000000790 CA_SAMEQ
       stm32eforth.s:2375   .text:0000000000000eb0 SAMEQ
ARM GAS  stm32eforth.s 			page 98


       stm32eforth.s:2395   .text:0000000000000ef8 SAME2
       stm32eforth.s:2379   .text:0000000000000ebc SAME1
       stm32eforth.s:2391   .text:0000000000000ee8 $d
       stm32eforth.s:2392   .text:0000000000000eec $t
       stm32eforth.s:2397   .text:0000000000000efc $d
       stm32eforth.s:2398   .text:0000000000000f00 $t
       stm32eforth.s:2398   .text:0000000000000f04 $d
       stm32eforth.s:2399   .text:0000000000000f08 $t
       stm32eforth.s:2411   .text:0000000000000f0c FIND
       stm32eforth.s:2420   .text:0000000000000f2c FIND1
       stm32eforth.s:2423   .text:0000000000000f34 $d
       stm32eforth.s:2442   .text:0000000000000f7c FIND6
       stm32eforth.s:2424   .text:0000000000000f38 $t
       stm32eforth.s:2426   .text:0000000000000f44 $d
       stm32eforth.s:2427   .text:0000000000000f48 $t
       stm32eforth.s:2431   .text:0000000000000f58 $d
       stm32eforth.s:2435   .text:0000000000000f68 FIND2
       stm32eforth.s:2432   .text:0000000000000f5c $t
       stm32eforth.s:2440   .text:0000000000000f78 FIND3
       stm32eforth.s:2449   .text:0000000000000f94 FIND4
       stm32eforth.s:2451   .text:0000000000000f98 $d
       stm32eforth.s:2456   .text:0000000000000fac FIND5
       stm32eforth.s:2452   .text:0000000000000f9c $t
       stm32eforth.s:2375   .inflash.dictinary:0000000000000794 LF_NAMEQ
       stm32eforth.s:2375   .inflash.dictinary:0000000000000798 _NAMEQ
       stm32eforth.s:2469   .inflash.dictinary:00000000000007a0 CA_NAMEQ
       stm32eforth.s:2469   .text:0000000000000fd0 NAMEQ
       stm32eforth.s:2486   .text:0000000000000fe4 BKSP
       stm32eforth.s:2495   .text:0000000000001004 $d
       stm32eforth.s:2506   .text:000000000000102c BACK1
       stm32eforth.s:2496   .text:0000000000001008 $t
       stm32eforth.s:2496   .text:000000000000100c $d
       stm32eforth.s:2497   .text:0000000000001010 $t
       stm32eforth.s:2503   .text:0000000000001024 $d
       stm32eforth.s:2504   .text:0000000000001028 $t
       stm32eforth.s:2516   .text:0000000000001030 TAP
       stm32eforth.s:2533   .text:000000000000104c KTAP
       stm32eforth.s:2534   .text:000000000000104c TTAP
       stm32eforth.s:2537   .text:0000000000001058 $d
       stm32eforth.s:2538   .text:000000000000105c $t
       stm32eforth.s:2540   .text:0000000000001064 $d
       stm32eforth.s:2552   .text:0000000000001094 KTAP2
       stm32eforth.s:2541   .text:0000000000001068 $t
       stm32eforth.s:2541   .text:000000000000106c $d
       stm32eforth.s:2542   .text:0000000000001070 $t
       stm32eforth.s:2544   .text:0000000000001078 $d
       stm32eforth.s:2549   .text:000000000000108c KTAP1
       stm32eforth.s:2545   .text:000000000000107c $t
       stm32eforth.s:2548   .text:0000000000001088 $d
       stm32eforth.s:2550   .text:000000000000108c $t
       stm32eforth.s:2469   .inflash.dictinary:00000000000007a4 LF_ACCEP
       stm32eforth.s:2469   .inflash.dictinary:00000000000007a8 _ACCEP
       stm32eforth.s:2561   .inflash.dictinary:00000000000007b0 CA_ACCEP
       stm32eforth.s:2561   .text:00000000000010a8 ACCEP
       stm32eforth.s:2566   .text:00000000000010b8 ACCP1
       stm32eforth.s:2570   .text:00000000000010c4 $d
       stm32eforth.s:2585   .text:00000000000010f4 ACCP4
ARM GAS  stm32eforth.s 			page 99


       stm32eforth.s:2571   .text:00000000000010c8 $t
       stm32eforth.s:2574   .text:00000000000010d8 $d
       stm32eforth.s:2575   .text:00000000000010dc $t
       stm32eforth.s:2577   .text:00000000000010e4 $d
       stm32eforth.s:2580   .text:00000000000010ee ACCP2
       stm32eforth.s:2578   .text:00000000000010e8 $t
       stm32eforth.s:2583   .text:00000000000010f2 ACCP3
       stm32eforth.s:2561   .inflash.dictinary:00000000000007b4 LF_QUERY
       stm32eforth.s:2561   .inflash.dictinary:00000000000007b8 _QUERY
       stm32eforth.s:2593   .inflash.dictinary:00000000000007c0 CA_QUERY
       stm32eforth.s:2593   .text:0000000000001104 QUERY
       stm32eforth.s:2596   .text:0000000000001110 $d
       stm32eforth.s:2597   .text:0000000000001114 $t
       stm32eforth.s:2601   .text:0000000000001128 $d
       stm32eforth.s:2602   .text:000000000000112c $t
       stm32eforth.s:2593   .inflash.dictinary:00000000000007c4 LF_ABORT
       stm32eforth.s:2593   .inflash.dictinary:00000000000007c8 _ABORT
       stm32eforth.s:2611   .inflash.dictinary:00000000000007d0 CA_ABORT
       stm32eforth.s:2611   .text:0000000000001138 ABORT
       stm32eforth.s:2614   .text:0000000000001140 ABORT1
       stm32eforth.s:2617   .text:000000000000114c $d
       stm32eforth.s:2618   .text:0000000000001150 $t
       stm32eforth.s:2728   .text:0000000000001270 PRESE
       stm32eforth.s:2736   .text:0000000000001284 QUIT
       stm32eforth.s:2630   .text:0000000000001160 ABORQ
       stm32eforth.s:2635   .text:0000000000001170 $d
       stm32eforth.s:2636   .text:0000000000001174 $t
       stm32eforth.s:2611   .inflash.dictinary:00000000000007d4 LF_INTER
       stm32eforth.s:2611   .inflash.dictinary:00000000000007d8 _INTER
       stm32eforth.s:2646   .inflash.dictinary:00000000000007e4 CA_INTER
       stm32eforth.s:2651   .text:0000000000001190 $d
       stm32eforth.s:2661   .text:00000000000011c0 INTE1
       stm32eforth.s:2652   .text:0000000000001194 $t
       stm32eforth.s:2653   .text:000000000000119c $d
       stm32eforth.s:2654   .text:00000000000011a0 $t
       stm32eforth.s:2656   .text:00000000000011a8 $d
       stm32eforth.s:2658   .text:00000000000011b6 $t
       stm32eforth.s:2664   .text:00000000000011c8 $d
       stm32eforth.s:2666   .text:00000000000011d0 INTE2
       stm32eforth.s:2665   .text:00000000000011cc $t
       stm32eforth.s:2646   .inflash.dictinary:00000000000007e8 LF_LBRAC
       stm32eforth.s:2646   .inflash.dictinary:00000000000007ec _LBRAC
       stm32eforth.s:2671   .inflash.dictinary:00000000000007f0 CA_LBRAC
       stm32eforth.s:2671   .text:00000000000011d4 LBRAC
       stm32eforth.s:2673   .text:00000000000011dc $d
       stm32eforth.s:2674   .text:00000000000011e0 $t
       stm32eforth.s:2671   .inflash.dictinary:00000000000007f4 LF_DOTOK
       stm32eforth.s:2671   .inflash.dictinary:00000000000007f8 _DOTOK
       stm32eforth.s:2680   .inflash.dictinary:00000000000007fc CA_DOTOK
       stm32eforth.s:2680   .text:00000000000011ec DOTOK
       stm32eforth.s:2682   .text:00000000000011f4 $d
       stm32eforth.s:2683   .text:00000000000011f8 $t
       stm32eforth.s:2687   .text:0000000000001208 $d
       stm32eforth.s:2691   .text:0000000000001214 DOTO1
       stm32eforth.s:2688   .text:000000000000120c $t
       stm32eforth.s:2689   .text:0000000000001210 $d
       stm32eforth.s:2692   .text:0000000000001214 $t
ARM GAS  stm32eforth.s 			page 100


       stm32eforth.s:2680   .inflash.dictinary:0000000000000800 LF_QSTAC
       stm32eforth.s:2680   .inflash.dictinary:0000000000000804 _QSTAC
       stm32eforth.s:2697   .inflash.dictinary:000000000000080c CA_QSTAC
       stm32eforth.s:2697   .text:000000000000121c QSTAC
       stm32eforth.s:2702   .text:000000000000122c $d
       stm32eforth.s:2697   .inflash.dictinary:0000000000000810 LF_EVAL
       stm32eforth.s:2697   .inflash.dictinary:0000000000000814 _EVAL
       stm32eforth.s:2709   .inflash.dictinary:000000000000081c CA_EVAL
       stm32eforth.s:2709   .text:000000000000123c EVAL
       stm32eforth.s:2711   .text:0000000000001240 EVAL1
       stm32eforth.s:2716   .text:0000000000001250 $d
       stm32eforth.s:2721   .text:0000000000001264 EVAL2
       stm32eforth.s:2717   .text:0000000000001254 $t
       stm32eforth.s:2709   .inflash.dictinary:0000000000000820 LF_PRESE
       stm32eforth.s:2709   .inflash.dictinary:0000000000000824 _PRESE
       stm32eforth.s:2728   .inflash.dictinary:000000000000082c CA_PRESE
       stm32eforth.s:2728   .inflash.dictinary:0000000000000830 LF_QUIT
       stm32eforth.s:2728   .inflash.dictinary:0000000000000834 _QUIT
       stm32eforth.s:2736   .inflash.dictinary:000000000000083c CA_QUIT
       stm32eforth.s:2739   .text:0000000000001290 QUIT1
       stm32eforth.s:2741   .text:0000000000001294 QUIT2
       stm32eforth.s:2745   .text:00000000000012a0 $d
       stm32eforth.s:2736   .inflash.dictinary:0000000000000840 LF_UNLOCK
       stm32eforth.s:2736   .inflash.dictinary:0000000000000844 _UNLOCK
       stm32eforth.s:2752   .inflash.dictinary:000000000000084c CA_UNLOCK
       stm32eforth.s:2752   .text:00000000000012a4 UNLOCK
       stm32eforth.s:2752   .text:00000000000012a4 $t
       stm32eforth.s:2755   .text:00000000000012ac $d
       stm32eforth.s:2776   .text:00000000000012cc LOCK
       stm32eforth.s:3065   .text:0000000000001608 flash_regs
       stm32eforth.s:2756   .text:00000000000012b0 $t
       stm32eforth.s:2783   .text:00000000000012d8 WAIT_BSY
       stm32eforth.s:2785   .text:00000000000012da WAIT1
       stm32eforth.s:2752   .inflash.dictinary:0000000000000850 LF_EPAGE
       stm32eforth.s:2752   .inflash.dictinary:0000000000000854 _EPAGE
       stm32eforth.s:2795   .inflash.dictinary:0000000000000860 CA_EPAGE
       stm32eforth.s:2795   .text:00000000000012e4 EPAGE
       stm32eforth.s:2798   .text:00000000000012f0 $d
       stm32eforth.s:2799   .text:00000000000012f4 $t
       stm32eforth.s:2808   .text:0000000000001312 $d
       stm32eforth.s:2809   .text:0000000000001316 $t
       stm32eforth.s:2813   .text:0000000000001324 $d
       stm32eforth.s:2815   .text:0000000000001332 $t
       stm32eforth.s:2820   .text:0000000000001338 HWORD_WRITE
       stm32eforth.s:2833   .text:000000000000135a $d
       stm32eforth.s:2834   .text:000000000000135e $t
       stm32eforth.s:2835   .text:0000000000001362 $d
       stm32eforth.s:2837   .text:0000000000001370 $t
       stm32eforth.s:2795   .inflash.dictinary:0000000000000864 LF_ISTOR
       stm32eforth.s:2795   .inflash.dictinary:0000000000000868 _ISTOR
       stm32eforth.s:2845   .inflash.dictinary:000000000000086c CA_ISTOR
       stm32eforth.s:2845   .text:0000000000001374 ISTOR
       stm32eforth.s:2848   .text:0000000000001380 $d
       stm32eforth.s:2849   .text:0000000000001384 $t
       stm32eforth.s:2859   .text:00000000000013b0 $d
       stm32eforth.s:2860   .text:00000000000013b4 $t
       stm32eforth.s:2845   .inflash.dictinary:0000000000000870 LF_IMG_SIZE
ARM GAS  stm32eforth.s 			page 101


       stm32eforth.s:2845   .inflash.dictinary:0000000000000874 _IMG_SIZE
       stm32eforth.s:2866   .inflash.dictinary:0000000000000880 CA_IMG_SIZE
       stm32eforth.s:2866   .text:00000000000013bc IMG_SIZE
       stm32eforth.s:2868   .text:00000000000013c4 $d
       stm32eforth.s:2869   .text:00000000000013c8 $t
       stm32eforth.s:2873   .text:00000000000013dc $d
       stm32eforth.s:2874   .text:00000000000013e0 $t
       stm32eforth.s:2877   .text:00000000000013ec $d
       stm32eforth.s:2878   .text:00000000000013f0 $t
       stm32eforth.s:2866   .inflash.dictinary:0000000000000884 LF_IMGQ
       stm32eforth.s:2866   .inflash.dictinary:0000000000000888 _IMGQ
       stm32eforth.s:2884   .inflash.dictinary:0000000000000890 CA_IMGQ
       stm32eforth.s:2884   .text:00000000000013f8 IMGQ
       stm32eforth.s:2884   .inflash.dictinary:0000000000000894 LF_LOAD_IMG
       stm32eforth.s:2884   .inflash.dictinary:0000000000000898 _LOAD_IMG
       stm32eforth.s:2896   .inflash.dictinary:00000000000008a4 CA_LOAD_IMG
       stm32eforth.s:2896   .text:0000000000001418 LOAD_IMG
       stm32eforth.s:2900   .text:0000000000001424 $d
       stm32eforth.s:2902   .text:0000000000001428 $t
       stm32eforth.s:2896   .inflash.dictinary:00000000000008a8 LF_ERASE_MPG
       stm32eforth.s:2896   .inflash.dictinary:00000000000008ac _ERASE_MPG
       stm32eforth.s:2926   .inflash.dictinary:00000000000008b8 CA_ERASE_MPG
       stm32eforth.s:2926   .text:0000000000001470 ERASE_MPG
       stm32eforth.s:2976   .text:00000000000014fc PG_TO_ADR
       stm32eforth.s:2931   .text:0000000000001480 $d
       stm32eforth.s:2933   .text:0000000000001484 $t
       stm32eforth.s:2940   .text:000000000000149c $d
       stm32eforth.s:2941   .text:00000000000014a0 $t
       stm32eforth.s:2926   .inflash.dictinary:00000000000008bc LF_FLSH_WR
       stm32eforth.s:2926   .inflash.dictinary:00000000000008c0 _FLSH_WR
       stm32eforth.s:2946   .inflash.dictinary:00000000000008c8 CA_FLSH_WR
       stm32eforth.s:2946   .text:00000000000014a8 FLSH_WR
       stm32eforth.s:2950   .text:00000000000014b4 $d
       stm32eforth.s:2952   .text:00000000000014b8 $t
       stm32eforth.s:2961   .text:00000000000014dc $d
       stm32eforth.s:2962   .text:00000000000014e0 $t
       stm32eforth.s:2946   .inflash.dictinary:00000000000008cc LF_ADR_TO_PG
       stm32eforth.s:2946   .inflash.dictinary:00000000000008d0 _ADR_TO_PG
       stm32eforth.s:2969   .inflash.dictinary:00000000000008d8 CA_ADR_TO_PG
       stm32eforth.s:2969   .text:00000000000014f0 ADR_TO_PG
       stm32eforth.s:2969   .inflash.dictinary:00000000000008dc LF_PG_TO_ADR
       stm32eforth.s:2969   .inflash.dictinary:00000000000008e0 _PG_TO_ADR
       stm32eforth.s:2976   .inflash.dictinary:00000000000008e8 CA_PG_TO_ADR
       stm32eforth.s:2976   .inflash.dictinary:00000000000008ec LF_ERASE_IMG
       stm32eforth.s:2976   .inflash.dictinary:00000000000008f0 _ERASE_IMG
       stm32eforth.s:2983   .inflash.dictinary:00000000000008fc CA_ERASE_IMG
       stm32eforth.s:2983   .text:0000000000001508 ERASE_IMG
       stm32eforth.s:2989   .text:000000000000151c $d
       stm32eforth.s:2990   .text:0000000000001520 $t
       stm32eforth.s:2994   .text:0000000000001530 $d
       stm32eforth.s:2995   .text:0000000000001534 $t
       stm32eforth.s:2983   .inflash.dictinary:0000000000000900 LF_SAVE_IMG
       stm32eforth.s:2983   .inflash.dictinary:0000000000000904 _SAVE_IMG
       stm32eforth.s:3000   .inflash.dictinary:0000000000000910 CA_SAVE_IMG
       stm32eforth.s:3000   .text:000000000000153c SAVE_IMG
       stm32eforth.s:3006   .text:0000000000001550 $d
       stm32eforth.s:3007   .text:0000000000001554 $t
ARM GAS  stm32eforth.s 			page 102


       stm32eforth.s:3010   .text:0000000000001560 $d
       stm32eforth.s:3012   .text:0000000000001564 $t
       stm32eforth.s:3000   .inflash.dictinary:0000000000000914 LF_TURNKEY
       stm32eforth.s:3000   .inflash.dictinary:0000000000000918 _TURNKEY
       stm32eforth.s:3034   .inflash.dictinary:0000000000000920 CA_TURNKEY
       stm32eforth.s:3034   .text:00000000000015a0 TURNKEY
       stm32eforth.s:3075   .text:0000000000001614 TICK
       stm32eforth.s:3034   .inflash.dictinary:0000000000000924 LF_FORGET
       stm32eforth.s:3034   .inflash.dictinary:0000000000000928 _FORGET
       stm32eforth.s:3044   .inflash.dictinary:0000000000000930 CA_FORGET
       stm32eforth.s:3044   .text:00000000000015b8 FORGET
       stm32eforth.s:3049   .text:00000000000015cc $d
       stm32eforth.s:3050   .text:00000000000015d0 $t
       stm32eforth.s:3053   .text:00000000000015dc $d
       stm32eforth.s:3054   .text:00000000000015e0 $t
       stm32eforth.s:3401   .text:0000000000001940 OVERT
       stm32eforth.s:3066   .text:0000000000001608 $d
       stm32eforth.s:3044   .inflash.dictinary:0000000000000934 LF_TICK
       stm32eforth.s:3044   .inflash.dictinary:0000000000000938 _TICK
       stm32eforth.s:3075   .inflash.dictinary:000000000000093c CA_TICK
       stm32eforth.s:3075   .text:0000000000001614 $t
       stm32eforth.s:3080   .text:0000000000001624 $d
       stm32eforth.s:3082   .text:000000000000162c TICK1
       stm32eforth.s:3081   .text:0000000000001628 $t
       stm32eforth.s:3075   .inflash.dictinary:0000000000000940 LF_ALLOT
       stm32eforth.s:3075   .inflash.dictinary:0000000000000944 _ALLOT
       stm32eforth.s:3086   .inflash.dictinary:000000000000094c CA_ALLOT
       stm32eforth.s:3086   .text:0000000000001630 ALLOT
       stm32eforth.s:3086   .inflash.dictinary:0000000000000950 LF_COMMA
       stm32eforth.s:3086   .inflash.dictinary:0000000000000954 _COMMA
       stm32eforth.s:3094   .inflash.dictinary:0000000000000958 CA_COMMA
       stm32eforth.s:3094   .text:0000000000001640 COMMA
       stm32eforth.s:3094   .inflash.dictinary:000000000000095c LF_BCOMP
       stm32eforth.s:3094   .inflash.dictinary:0000000000000960 _BCOMP
       stm32eforth.s:3106   .inflash.dictinary:000000000000096c CA_BCOMP
       stm32eforth.s:3106   .text:0000000000001660 BCOMP
       stm32eforth.s:3106   .inflash.dictinary:0000000000000970 LF_COMPI
       stm32eforth.s:3106   .inflash.dictinary:0000000000000974 _COMPI
       stm32eforth.s:3114   .inflash.dictinary:000000000000097c CA_COMPI
       stm32eforth.s:3114   .text:0000000000001670 COMPI
       stm32eforth.s:3456   .text:00000000000019ce CALLC
       stm32eforth.s:3114   .inflash.dictinary:0000000000000980 LF_LITER
       stm32eforth.s:3114   .inflash.dictinary:0000000000000984 _LITER
       stm32eforth.s:3128   .inflash.dictinary:000000000000098c CA_LITER
       stm32eforth.s:3128   .text:0000000000001698 LITER
       stm32eforth.s:3129   .text:0000000000001698 $d
       stm32eforth.s:3130   .text:000000000000169c $t
       stm32eforth.s:3132   .text:00000000000016a4 $d
       stm32eforth.s:3133   .text:00000000000016a8 $t
       stm32eforth.s:3143   .text:00000000000016b0 STRCQ
       stm32eforth.s:3145   .text:00000000000016b8 $d
       stm32eforth.s:3146   .text:00000000000016bc $t
       stm32eforth.s:3148   .text:00000000000016c8 $d
       stm32eforth.s:3149   .text:00000000000016cc $t
       stm32eforth.s:3128   .inflash.dictinary:0000000000000990 LF_FOR
       stm32eforth.s:3128   .inflash.dictinary:0000000000000994 _FOR
       stm32eforth.s:3162   .inflash.dictinary:0000000000000998 CA_FOR
ARM GAS  stm32eforth.s 			page 103


       stm32eforth.s:3162   .text:00000000000016e8 FOR
       stm32eforth.s:3165   .text:00000000000016f0 $d
       stm32eforth.s:3166   .text:00000000000016f4 $t
       stm32eforth.s:3162   .inflash.dictinary:000000000000099c LF_BEGIN
       stm32eforth.s:3162   .inflash.dictinary:00000000000009a0 _BEGIN
       stm32eforth.s:3171   .inflash.dictinary:00000000000009a8 CA_BEGIN
       stm32eforth.s:3171   .text:00000000000016fc BEGIN
       stm32eforth.s:3171   .inflash.dictinary:00000000000009ac LF_NEXT
       stm32eforth.s:3171   .inflash.dictinary:00000000000009b0 _NEXT
       stm32eforth.s:3178   .inflash.dictinary:00000000000009b8 CA_NEXT
       stm32eforth.s:3178   .text:0000000000001708 NEXT
       stm32eforth.s:3181   .text:0000000000001710 $d
       stm32eforth.s:3182   .text:0000000000001714 $t
       stm32eforth.s:3178   .inflash.dictinary:00000000000009bc LF_UNTIL
       stm32eforth.s:3178   .inflash.dictinary:00000000000009c0 _UNTIL
       stm32eforth.s:3187   .inflash.dictinary:00000000000009c8 CA_UNTIL
       stm32eforth.s:3187   .text:000000000000171c UNTIL
       stm32eforth.s:3190   .text:0000000000001724 $d
       stm32eforth.s:3191   .text:0000000000001728 $t
       stm32eforth.s:3187   .inflash.dictinary:00000000000009cc LF_AGAIN
       stm32eforth.s:3187   .inflash.dictinary:00000000000009d0 _AGAIN
       stm32eforth.s:3196   .inflash.dictinary:00000000000009d8 CA_AGAIN
       stm32eforth.s:3196   .text:0000000000001730 AGAIN
       stm32eforth.s:3199   .text:0000000000001738 $d
       stm32eforth.s:3200   .text:000000000000173c $t
       stm32eforth.s:3196   .inflash.dictinary:00000000000009dc LF_IFF
       stm32eforth.s:3196   .inflash.dictinary:00000000000009e0 _IFF
       stm32eforth.s:3205   .inflash.dictinary:00000000000009e4 CA_IFF
       stm32eforth.s:3205   .text:0000000000001744 IFF
       stm32eforth.s:3208   .text:000000000000174c $d
       stm32eforth.s:3209   .text:0000000000001750 $t
       stm32eforth.s:3210   .text:0000000000001758 $d
       stm32eforth.s:3211   .text:000000000000175c $t
       stm32eforth.s:3205   .inflash.dictinary:00000000000009e8 LF_AHEAD
       stm32eforth.s:3205   .inflash.dictinary:00000000000009ec _AHEAD
       stm32eforth.s:3217   .inflash.dictinary:00000000000009f4 CA_AHEAD
       stm32eforth.s:3217   .text:0000000000001768 AHEAD
       stm32eforth.s:3220   .text:0000000000001770 $d
       stm32eforth.s:3221   .text:0000000000001774 $t
       stm32eforth.s:3222   .text:000000000000177c $d
       stm32eforth.s:3223   .text:0000000000001780 $t
       stm32eforth.s:3217   .inflash.dictinary:00000000000009f8 LF_REPEA
       stm32eforth.s:3217   .inflash.dictinary:00000000000009fc _REPEA
       stm32eforth.s:3229   .inflash.dictinary:0000000000000a04 CA_REPEA
       stm32eforth.s:3229   .text:000000000000178c REPEA
       stm32eforth.s:3229   .inflash.dictinary:0000000000000a08 LF_THENN
       stm32eforth.s:3229   .inflash.dictinary:0000000000000a0c _THENN
       stm32eforth.s:3239   .inflash.dictinary:0000000000000a14 CA_THENN
       stm32eforth.s:3239   .text:00000000000017a4 THENN
       stm32eforth.s:3239   .inflash.dictinary:0000000000000a18 LF_AFT
       stm32eforth.s:3239   .inflash.dictinary:0000000000000a1c _AFT
       stm32eforth.s:3248   .inflash.dictinary:0000000000000a20 CA_AFT
       stm32eforth.s:3248   .text:00000000000017b8 AFT
       stm32eforth.s:3248   .inflash.dictinary:0000000000000a24 LF_ELSEE
       stm32eforth.s:3248   .inflash.dictinary:0000000000000a28 _ELSEE
       stm32eforth.s:3258   .inflash.dictinary:0000000000000a30 CA_ELSEE
       stm32eforth.s:3258   .text:00000000000017d0 ELSEE
ARM GAS  stm32eforth.s 			page 104


       stm32eforth.s:3258   .inflash.dictinary:0000000000000a34 LF_WHILE
       stm32eforth.s:3258   .inflash.dictinary:0000000000000a38 _WHILE
       stm32eforth.s:3267   .inflash.dictinary:0000000000000a40 CA_WHILE
       stm32eforth.s:3267   .text:00000000000017e4 WHILE
       stm32eforth.s:3267   .inflash.dictinary:0000000000000a44 LF_ABRTQ
       stm32eforth.s:3267   .inflash.dictinary:0000000000000a48 _ABRTQ
       stm32eforth.s:3275   .inflash.dictinary:0000000000000a50 CA_ABRTQ
       stm32eforth.s:3275   .text:00000000000017f4 ABRTQ
       stm32eforth.s:3278   .text:00000000000017fc $d
       stm32eforth.s:3279   .text:0000000000001800 $t
       stm32eforth.s:3275   .inflash.dictinary:0000000000000a54 LF_STRQ
       stm32eforth.s:3275   .inflash.dictinary:0000000000000a58 _STRQ
       stm32eforth.s:3284   .inflash.dictinary:0000000000000a5c CA_STRQ
       stm32eforth.s:3284   .text:0000000000001808 STRQ
       stm32eforth.s:3287   .text:0000000000001810 $d
       stm32eforth.s:3288   .text:0000000000001814 $t
       stm32eforth.s:3284   .inflash.dictinary:0000000000000a60 LF_DOTQ
       stm32eforth.s:3284   .inflash.dictinary:0000000000000a64 _DOTQ
       stm32eforth.s:3293   .inflash.dictinary:0000000000000a68 CA_DOTQ
       stm32eforth.s:3293   .text:000000000000181c DOTQ
       stm32eforth.s:3296   .text:0000000000001824 $d
       stm32eforth.s:3297   .text:0000000000001828 $t
       stm32eforth.s:3293   .inflash.dictinary:0000000000000a6c LF_UNIQU
       stm32eforth.s:3293   .inflash.dictinary:0000000000000a70 _UNIQU
       stm32eforth.s:3306   .inflash.dictinary:0000000000000a78 CA_UNIQU
       stm32eforth.s:3306   .text:0000000000001830 UNIQU
       stm32eforth.s:3311   .text:0000000000001840 $d
       stm32eforth.s:3319   .text:000000000000185c UNIQ1
       stm32eforth.s:3312   .text:0000000000001844 $t
       stm32eforth.s:3313   .text:0000000000001848 $d
       stm32eforth.s:3315   .text:0000000000001850 $t
       stm32eforth.s:3330   .text:0000000000001864 SNAME
       stm32eforth.s:3335   .text:0000000000001874 $d
       stm32eforth.s:3349   .text:00000000000018ac SNAM1
       stm32eforth.s:3336   .text:0000000000001878 $t
       stm32eforth.s:3351   .text:00000000000018b0 $d
       stm32eforth.s:3353   .text:00000000000018b8 $t
       stm32eforth.s:3306   .inflash.dictinary:0000000000000a7c LF_SCOMP
       stm32eforth.s:3306   .inflash.dictinary:0000000000000a80 _SCOMP
       stm32eforth.s:3357   .inflash.dictinary:0000000000000a8c CA_SCOMP
       stm32eforth.s:3357   .text:00000000000018bc SCOMP
       stm32eforth.s:3362   .text:00000000000018cc $d
       stm32eforth.s:3373   .text:00000000000018f8 SCOM2
       stm32eforth.s:3363   .text:00000000000018d0 $t
       stm32eforth.s:3364   .text:00000000000018d8 $d
       stm32eforth.s:3365   .text:00000000000018dc $t
       stm32eforth.s:3367   .text:00000000000018e4 $d
       stm32eforth.s:3370   .text:00000000000018f0 SCOM1
       stm32eforth.s:3368   .text:00000000000018e8 $t
       stm32eforth.s:3376   .text:0000000000001900 $d
       stm32eforth.s:3379   .text:000000000000190c SCOM3
       stm32eforth.s:3377   .text:0000000000001904 $t
       stm32eforth.s:3386   .text:0000000000001914 COLON_ABORT
       stm32eforth.s:3357   .inflash.dictinary:0000000000000a90 LF_OVERT
       stm32eforth.s:3357   .inflash.dictinary:0000000000000a94 _OVERT
       stm32eforth.s:3401   .inflash.dictinary:0000000000000a9c CA_OVERT
       stm32eforth.s:3401   .inflash.dictinary:0000000000000aa0 LF_SEMIS
ARM GAS  stm32eforth.s 			page 105


       stm32eforth.s:3401   .inflash.dictinary:0000000000000aa4 _SEMIS
       stm32eforth.s:3411   .inflash.dictinary:0000000000000aa8 CA_SEMIS
       stm32eforth.s:3411   .text:0000000000001958 SEMIS
       stm32eforth.s:3411   .inflash.dictinary:0000000000000aac LF_RBRAC
       stm32eforth.s:3411   .inflash.dictinary:0000000000000ab0 _RBRAC
       stm32eforth.s:3422   .inflash.dictinary:0000000000000ab4 CA_RBRAC
       stm32eforth.s:3422   .text:0000000000001974 RBRAC
       stm32eforth.s:3424   .text:000000000000197c $d
       stm32eforth.s:3425   .text:0000000000001980 $t
       stm32eforth.s:3433   .text:000000000000198c COMPILE_BLW
       stm32eforth.s:3422   .inflash.dictinary:0000000000000ab8 LF_COLON
       stm32eforth.s:3422   .inflash.dictinary:0000000000000abc _COLON
       stm32eforth.s:3469   .inflash.dictinary:0000000000000ac0 CA_COLON
       stm32eforth.s:3469   .text:00000000000019f0 COLON
       stm32eforth.s:3524   .text:0000000000001a6c HEAD
       stm32eforth.s:3469   .inflash.dictinary:0000000000000ac4 LF_IMMED
       stm32eforth.s:3469   .inflash.dictinary:0000000000000ac8 _IMMED
       stm32eforth.s:3477   .inflash.dictinary:0000000000000ad4 CA_IMMED
       stm32eforth.s:3477   .text:0000000000001a00 IMMED
       stm32eforth.s:3479   .text:0000000000001a08 $d
       stm32eforth.s:3480   .text:0000000000001a0c $t
       stm32eforth.s:3477   .inflash.dictinary:0000000000000ad8 LF_ICOLON
       stm32eforth.s:3477   .inflash.dictinary:0000000000000adc _ICOLON
       stm32eforth.s:3493   .inflash.dictinary:0000000000000ae0 CA_ICOLON
       stm32eforth.s:3493   .text:0000000000001a2c ICOLON
       stm32eforth.s:3493   .inflash.dictinary:0000000000000ae4 LF_ISEMIS
       stm32eforth.s:3493   .inflash.dictinary:0000000000000ae8 _ISEMIS
       stm32eforth.s:3505   .inflash.dictinary:0000000000000aec CA_ISEMIS
       stm32eforth.s:3505   .text:0000000000001a48 ISEMIS
       stm32eforth.s:3505   .inflash.dictinary:0000000000000af0 LF_HEAD
       stm32eforth.s:3505   .inflash.dictinary:0000000000000af4 _HEAD
       stm32eforth.s:3524   .inflash.dictinary:0000000000000afc CA_HEAD
       stm32eforth.s:3524   .inflash.dictinary:0000000000000b00 LF_CONST
       stm32eforth.s:3524   .inflash.dictinary:0000000000000b04 _CONST
       stm32eforth.s:3538   .inflash.dictinary:0000000000000b10 CA_CONST
       stm32eforth.s:3538   .text:0000000000001a94 CONST
       stm32eforth.s:3541   .text:0000000000001aa0 $d
       stm32eforth.s:3542   .text:0000000000001aa4 $t
       stm32eforth.s:3550   .text:0000000000001ab4 DODOES
       stm32eforth.s:3561   .text:0000000000001ae0 $d
       stm32eforth.s:3562   .text:0000000000001ae4 $t
       stm32eforth.s:3538   .inflash.dictinary:0000000000000b14 LF_DOES
       stm32eforth.s:3538   .inflash.dictinary:0000000000000b18 _DOES
       stm32eforth.s:3579   .inflash.dictinary:0000000000000b20 CA_DOES
       stm32eforth.s:3579   .text:0000000000001b10 DOES
       stm32eforth.s:3581   .text:0000000000001b18 $d
       stm32eforth.s:3582   .text:0000000000001b1c $t
       stm32eforth.s:3579   .inflash.dictinary:0000000000000b24 LF_CREAT
       stm32eforth.s:3579   .inflash.dictinary:0000000000000b28 _CREAT
       stm32eforth.s:3594   .inflash.dictinary:0000000000000b30 CA_CREAT
       stm32eforth.s:3594   .text:0000000000001b3c CREAT
       stm32eforth.s:3597   .text:0000000000001b48 $d
       stm32eforth.s:3598   .text:0000000000001b4c $t
       stm32eforth.s:3594   .inflash.dictinary:0000000000000b34 LF_VARIA
       stm32eforth.s:3594   .inflash.dictinary:0000000000000b38 _VARIA
       stm32eforth.s:3603   .inflash.dictinary:0000000000000b44 CA_VARIA
       stm32eforth.s:3603   .text:0000000000001b54 VARIA
ARM GAS  stm32eforth.s 			page 106


       stm32eforth.s:3606   .text:0000000000001b60 $d
       stm32eforth.s:3607   .text:0000000000001b64 $t
       stm32eforth.s:3603   .inflash.dictinary:0000000000000b48 LF_FCALL
       stm32eforth.s:3603   .inflash.dictinary:0000000000000b4c _FCALL
       stm32eforth.s:3614   .inflash.dictinary:0000000000000b54 CA_FCALL
       stm32eforth.s:3614   .text:0000000000001b70 FCALL
       stm32eforth.s:3614   .inflash.dictinary:0000000000000b58 LF_DEFER
       stm32eforth.s:3614   .inflash.dictinary:0000000000000b5c _DEFER
       stm32eforth.s:3625   .inflash.dictinary:0000000000000b64 CA_DEFER
       stm32eforth.s:3625   .text:0000000000001b84 DEFER
       stm32eforth.s:3628   .text:0000000000001b90 $d
       stm32eforth.s:3629   .text:0000000000001b94 $t
       stm32eforth.s:3625   .inflash.dictinary:0000000000000b68 LF_DEFERSTO
       stm32eforth.s:3625   .inflash.dictinary:0000000000000b6c _DEFERSTO
       stm32eforth.s:3638   .inflash.dictinary:0000000000000b74 CA_DEFERSTO
       stm32eforth.s:3638   .text:0000000000001bac DEFERSTO
       stm32eforth.s:3638   .inflash.dictinary:0000000000000b78 LF_DEFERAT
       stm32eforth.s:3638   .inflash.dictinary:0000000000000b7c _DEFERAT
       stm32eforth.s:3654   .inflash.dictinary:0000000000000b84 CA_DEFERAT
       stm32eforth.s:3654   .text:0000000000001bdc DEFERAT
       stm32eforth.s:3661   .text:0000000000001bf8 $d
       stm32eforth.s:3985   .inflash:00000000000005fc BLADR
       stm32eforth.s:3662   .text:0000000000001bfc $t
       stm32eforth.s:3663   .text:0000000000001c04 $d
       stm32eforth.s:3664   .text:0000000000001c08 $t
       stm32eforth.s:3682   .inflash:000000000000025c DMP
       stm32eforth.s:3683   .inflash:000000000000025c $t
       stm32eforth.s:3685   .inflash:0000000000000268 $d
       stm32eforth.s:3686   .inflash:000000000000026c $t
       stm32eforth.s:3696   .inflash:0000000000000294 PDUM2
       stm32eforth.s:3690   .inflash:000000000000027c PDUM1
       stm32eforth.s:3693   .inflash:0000000000000288 $d
       stm32eforth.s:3694   .inflash:000000000000028c $t
       stm32eforth.s:3698   .inflash:0000000000000298 $d
       stm32eforth.s:3699   .inflash:000000000000029c $t
       stm32eforth.s:3654   .inflash.dictinary:0000000000000b88 LF_DUMP
       stm32eforth.s:3654   .inflash.dictinary:0000000000000b8c _DUMP
       stm32eforth.s:3704   .inflash.dictinary:0000000000000b94 CA_DUMP
       stm32eforth.s:3704   .text:0000000000001c18 DUMP
       stm32eforth.s:3704   .text:0000000000001c1c $d
       stm32eforth.s:3704   .inflash:00000000000002a0 FL_DUMP
       stm32eforth.s:3704   .text:0000000000001c20 $t
       stm32eforth.s:3710   .inflash:00000000000002b8 $d
       stm32eforth.s:3711   .inflash:00000000000002bc $t
       stm32eforth.s:3724   .inflash:00000000000002f0 DUMP4
       stm32eforth.s:3714   .inflash:00000000000002c8 DUMP1
       stm32eforth.s:3716   .inflash:00000000000002d0 $d
       stm32eforth.s:3717   .inflash:00000000000002d4 $t
       stm32eforth.s:3726   .inflash:00000000000002f4 $d
       stm32eforth.s:3727   .inflash:00000000000002f8 DUMP3
       stm32eforth.s:3728   .inflash:00000000000002f8 $t
       stm32eforth.s:3704   .inflash.dictinary:0000000000000b98 LF_DOTS
       stm32eforth.s:3704   .inflash.dictinary:0000000000000b9c _DOTS
       stm32eforth.s:3736   .inflash.dictinary:0000000000000ba0 CA_DOTS
       stm32eforth.s:3736   .text:0000000000001c2c DOTS
       stm32eforth.s:3736   .text:0000000000001c30 $d
       stm32eforth.s:3736   .inflash:000000000000030c FL_DOTS
ARM GAS  stm32eforth.s 			page 107


       stm32eforth.s:3736   .text:0000000000001c34 $t
       stm32eforth.s:3746   .inflash:000000000000032c DOTS2
       stm32eforth.s:3742   .inflash:0000000000000320 DOTS1
       stm32eforth.s:3748   .inflash:0000000000000330 $d
       stm32eforth.s:3749   .inflash:0000000000000334 $t
       stm32eforth.s:3736   .inflash.dictinary:0000000000000ba4 LF_TNAME
       stm32eforth.s:3736   .inflash.dictinary:0000000000000ba8 _TNAME
       stm32eforth.s:3754   .inflash.dictinary:0000000000000bb0 CA_TNAME
       stm32eforth.s:3754   .text:0000000000001c40 TNAME
       stm32eforth.s:3754   .text:0000000000001c44 $d
       stm32eforth.s:3754   .inflash:000000000000033c FL_TNAME
       stm32eforth.s:3754   .text:0000000000001c48 $t
       stm32eforth.s:3759   .inflash:000000000000034c TNAM1
       stm32eforth.s:3762   .inflash:0000000000000354 $d
       stm32eforth.s:3774   .inflash:0000000000000388 TNAM2
       stm32eforth.s:3763   .inflash:0000000000000358 $t
       stm32eforth.s:3767   .inflash:000000000000036c $d
       stm32eforth.s:3768   .inflash:0000000000000370 $t
       stm32eforth.s:3770   .inflash:0000000000000378 $d
       stm32eforth.s:3771   .inflash:000000000000037c $t
       stm32eforth.s:3754   .inflash.dictinary:0000000000000bb4 LF_DOTID
       stm32eforth.s:3754   .inflash.dictinary:0000000000000bb8 _DOTID
       stm32eforth.s:3781   .inflash.dictinary:0000000000000bbc CA_DOTID
       stm32eforth.s:3781   .text:0000000000001c54 DOTID
       stm32eforth.s:3781   .text:0000000000001c58 $d
       stm32eforth.s:3781   .inflash:0000000000000394 FL_DOTID
       stm32eforth.s:3781   .text:0000000000001c5c $t
       stm32eforth.s:3785   .inflash:00000000000003a0 $d
       stm32eforth.s:3791   .inflash:00000000000003bc DOTI1
       stm32eforth.s:3786   .inflash:00000000000003a4 $t
       stm32eforth.s:3787   .inflash:00000000000003ac $d
       stm32eforth.s:3788   .inflash:00000000000003b0 $t
       stm32eforth.s:3793   .inflash:00000000000003c0 $d
       stm32eforth.s:3795   .inflash:00000000000003ca $t
       stm32eforth.s:3798   *ABS*:0000000000000001 WANT_SEE
       stm32eforth.s:3806   .inflash:00000000000003d0 DOTCA
       stm32eforth.s:3810   .inflash:00000000000003e0 $d
       stm32eforth.s:3811   .inflash:00000000000003e4 $t
       stm32eforth.s:3817   .inflash:00000000000003ec CODE_ABORT
       stm32eforth.s:3826   .inflash:000000000000040c $d
       stm32eforth.s:3827   .inflash:0000000000000410 $t
       stm32eforth.s:3829   .inflash:0000000000000418 $d
       stm32eforth.s:3831   .inflash:0000000000000422 $t
       stm32eforth.s:3834   .inflash:0000000000000428 $d
       stm32eforth.s:3844   .inflash:0000000000000438 UNNESTQ
       stm32eforth.s:3853   .inflash:0000000000000458 $d
       stm32eforth.s:3854   .inflash:000000000000045c $t
       stm32eforth.s:3855   .inflash:0000000000000460 $d
       stm32eforth.s:3864   .inflash:0000000000000470 NONAMEQ
       stm32eforth.s:3866   .inflash:0000000000000478 $d
       stm32eforth.s:3867   .inflash:000000000000047c $t
       stm32eforth.s:3868   .inflash:0000000000000484 $d
       stm32eforth.s:4158   .rodata:0000000000000018 NONAME_SUB
       stm32eforth.s:3869   .inflash:0000000000000488 $t
       stm32eforth.s:3875   .inflash:00000000000004a0 $d
       stm32eforth.s:3876   .inflash:00000000000004a4 $t
       stm32eforth.s:3877   .inflash:00000000000004ac $d
ARM GAS  stm32eforth.s 			page 108


       stm32eforth.s:3878   .inflash:00000000000004b0 $t
       stm32eforth.s:3880   .inflash:00000000000004b8 $d
       stm32eforth.s:3881   .inflash:00000000000004bc $t
       stm32eforth.s:3885   .inflash:00000000000004cc $d
       stm32eforth.s:3886   .inflash:00000000000004d0 $t
       stm32eforth.s:3887   .inflash:00000000000004d8 $d
       stm32eforth.s:3888   .inflash:00000000000004dc $t
       stm32eforth.s:3889   .inflash:00000000000004e4 $d
       stm32eforth.s:4164   .rodata:0000000000000054 ANONYMOUS
       stm32eforth.s:3890   .inflash:00000000000004e8 $t
       stm32eforth.s:3909   .inflash:0000000000000518 DOTNONAME
       stm32eforth.s:3912   .inflash:0000000000000524 $d
       stm32eforth.s:3913   .inflash:0000000000000528 $t
       stm32eforth.s:3921   .inflash:0000000000000538 IS_BLW
       stm32eforth.s:3923   .inflash:0000000000000540 $d
       stm32eforth.s:3924   .inflash:0000000000000544 $t
       stm32eforth.s:3781   .inflash.dictinary:0000000000000bc0 LF_SEE
       stm32eforth.s:3781   .inflash.dictinary:0000000000000bc4 _SEE
       stm32eforth.s:3933   .inflash.dictinary:0000000000000bc8 CA_SEE
       stm32eforth.s:3933   .text:0000000000001c68 SEE
       stm32eforth.s:3933   .text:0000000000001c6c $d
       stm32eforth.s:3933   .inflash:000000000000055c FL_SEE
       stm32eforth.s:3933   .text:0000000000001c70 $t
       stm32eforth.s:3951   .inflash:0000000000000590 FL_SCOL
       stm32eforth.s:3933   .inflash.dictinary:0000000000000bcc LF_SCOL
       stm32eforth.s:3933   .inflash.dictinary:0000000000000bd0 _SCOL
       stm32eforth.s:3951   .inflash.dictinary:0000000000000bdc CA_SCOL
       stm32eforth.s:3951   .text:0000000000001c7c SCOL
       stm32eforth.s:3951   .text:0000000000001c80 $d
       stm32eforth.s:3951   .text:0000000000001c84 $t
       stm32eforth.s:3953   .inflash:0000000000000598 $d
       stm32eforth.s:3954   .inflash:000000000000059c $t
       stm32eforth.s:3955   .inflash:00000000000005a0 SCOL1
       stm32eforth.s:3960   .inflash:00000000000005b0 $d
       stm32eforth.s:3961   .inflash:00000000000005b4 $t
       stm32eforth.s:3967   .inflash:00000000000005cc $d
       stm32eforth.s:3968   .inflash:00000000000005d0 $t
       stm32eforth.s:3971   .inflash:00000000000005dc $d
       stm32eforth.s:3972   .inflash:00000000000005e0 $t
       stm32eforth.s:4007   .inflash:0000000000000640 FL_DECOMP
       stm32eforth.s:3976   .inflash:00000000000005f0 $d
       stm32eforth.s:3977   .inflash:00000000000005f4 $t
       stm32eforth.s:3951   .inflash.dictinary:0000000000000be0 LF_DECOMP
       stm32eforth.s:3951   .inflash.dictinary:0000000000000be4 _DECOMP
       stm32eforth.s:4007   .inflash.dictinary:0000000000000bf0 CA_DECOMP
       stm32eforth.s:4007   .text:0000000000001c90 DECOMP
       stm32eforth.s:4007   .text:0000000000001c94 $d
       stm32eforth.s:4007   .text:0000000000001c98 $t
       stm32eforth.s:4014   .inflash:0000000000000658 $d
       stm32eforth.s:4043   .inflash:00000000000006b8 DECOM2
       stm32eforth.s:4016   .inflash:000000000000065c $t
       stm32eforth.s:4017   .inflash:0000000000000660 $d
       stm32eforth.s:4019   .inflash:0000000000000664 $t
       stm32eforth.s:4027   .inflash:0000000000000680 $d
       stm32eforth.s:4030   .inflash:000000000000068c DECOMP1
       stm32eforth.s:4028   .inflash:0000000000000684 $t
       stm32eforth.s:4029   .inflash:0000000000000688 $d
ARM GAS  stm32eforth.s 			page 109


       stm32eforth.s:4032   .inflash:0000000000000690 DECOMP3
       stm32eforth.s:4031   .inflash:000000000000068c $t
       stm32eforth.s:4039   .inflash:00000000000006a8 $d
       stm32eforth.s:4040   .inflash:00000000000006ac $t
       stm32eforth.s:4007   .inflash.dictinary:0000000000000bf4 LF_WORDS
       stm32eforth.s:4007   .inflash.dictinary:0000000000000bf8 _WORDS
       stm32eforth.s:4051   .inflash.dictinary:0000000000000c00 CA_WORDS
       stm32eforth.s:4051   .text:0000000000001ca4 WORDS
       stm32eforth.s:4051   .text:0000000000001ca8 $d
       stm32eforth.s:4051   .inflash:00000000000006c4 FL_WORDS
       stm32eforth.s:4051   .text:0000000000001cac $t
       stm32eforth.s:4056   .inflash:00000000000006d4 WORS1
       stm32eforth.s:4059   .inflash:00000000000006dc $d
       stm32eforth.s:4066   .inflash:00000000000006f8 WORS2
       stm32eforth.s:4060   .inflash:00000000000006e0 $t
       stm32eforth.s:4081   .text:0000000000001cb6 VERSN
       stm32eforth.s:4083   .text:0000000000001cbe $d
       stm32eforth.s:4084   .text:0000000000001cc2 $t
       stm32eforth.s:4051   .inflash.dictinary:0000000000000c04 LF_HI
       stm32eforth.s:4051   .inflash.dictinary:0000000000000c08 _HI
       stm32eforth.s:4088   .inflash.dictinary:0000000000000c0c CA_HI
       stm32eforth.s:4091   .text:0000000000001cd4 $d
       stm32eforth.s:4113   .rodata:0000000000000000 hi_msg
       stm32eforth.s:4092   .text:0000000000001cd8 $t
       stm32eforth.s:4101   .text:0000000000001d00 $d
       stm32eforth.s:4102   .text:0000000000001d04 $t
       stm32eforth.s:4112   .rodata:0000000000000000 $d
       stm32eforth.s:4088   .inflash.dictinary:0000000000000c10 LF_LASTN
       stm32eforth.s:4122   .inflash.dictinary:0000000000000c1c CA_LASTN
       stm32eforth.s:4122   .text:0000000000001d24 LASTN
       stm32eforth.s:4130   .text:0000000000001d44 COLD1
       stm32eforth.s:4131   .text:0000000000001d48 $d
       stm32eforth.s:4132   .text:0000000000001d4c $t
       stm32eforth.s:4133   .text:0000000000001d54 $d
       stm32eforth.s:4134   .text:0000000000001d58 $t
       stm32eforth.s:4134   .text:0000000000001d5c $d
       stm32eforth.s:4135   .text:0000000000001d60 $t
       stm32eforth.s:4135   .text:0000000000001d64 $d
       stm32eforth.s:4136   .text:0000000000001d68 $t
       stm32eforth.s:4141   .text:0000000000001d78 $d
       stm32eforth.s:4142   .text:0000000000001d7c $t
       stm32eforth.s:4149   .text:0000000000001d90 COLD2
       stm32eforth.s:4150   .text:0000000000001d90 $d
       stm32eforth.s:4168   .rodata:000000000000008c BRAN_LBL
       stm32eforth.s:4172   .rodata:0000000000000098 QBRAN_LBL
       stm32eforth.s:4176   .rodata:00000000000000a4 DOLIT_LBL
       stm32eforth.s:4180   .rodata:00000000000000b0 DONEXT_LBL
       stm32eforth.s:4184   .rodata:00000000000000bc DODOES_LBL
       stm32eforth.s:4188   .rodata:00000000000000c8 DOVAR_LBL
       stm32eforth.s:4192   .rodata:00000000000000d4 DOCON_LBL
       stm32eforth.s:4196   .rodata:00000000000000e0 IS_BLW_LBL
       stm32eforth.s:4200   .rodata:00000000000000ec DOTQP_LBL
       stm32eforth.s:4204   .rodata:00000000000000f0 BLADR_LBL
       stm32eforth.s:4208   .rodata:00000000000000fc DOTCA_LBL
       stm32eforth.s:4212   .rodata:0000000000000108 NONAMEQ_LBL
       stm32eforth.s:4216   .rodata:0000000000000114 STRCQ_LBL
       stm32eforth.s:4220   .rodata:000000000000011c VERSN_LBL
ARM GAS  stm32eforth.s 			page 110


       stm32eforth.s:4226   .user:0000000000000000 $d
       stm32eforth.s:2704   .text:0000000000001237 $d
       stm32eforth.s:2704   .text:0000000000001238 $t
       stm32eforth.s:322    .inflash:000000000000001f $d
       stm32eforth.s:322    .inflash:0000000000000020 $t
       stm32eforth.s:3836   .inflash:000000000000042d $d
       stm32eforth.s:3836   .inflash:000000000000042e $t
       stm32eforth.s:3857   .inflash:0000000000000467 $d
       stm32eforth.s:3857   .inflash:0000000000000468 $t

UNDEFINED SYMBOLS
_mstack
