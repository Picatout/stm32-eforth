ARM GAS  stm32eforth-fl.s 			page 1


   1              	/* 
   2              	****************************************************
   3              	*  STM32eForth version 7.20
   4              	*  Adapted to blue pill board by Picatout
   5              	*  date: 2020-11-22
   6              	*  IMPLEMENTATION NOTES:
   7              	* 
   8              	*	This version use indirect threaded model. This model enable 
   9              	*	leaving the core Forth system in FLASH memory while the users 
  10              	*	definitions reside in RAM. 
  11              	*	R0 	is used as IP , inner interpreter address pointer 
  12              	*	R4 	is used as WP , working register 
  13              	*	R8 	is used as link register by _NEST macro it is initialized 
  14              	*  		NEST address and MUST BE PRESERVED.
  15              	*
  16              	*     Use USART1 for console I/O
  17              	*     port config: 115200 8N1 
  18              	*     TX on  PA9,  RX on PA10  
  19              	*
  20              	*     eForth is executed from flash, not copied to RAM
  21              	*     eForth use main stack R13 as return stack (thread stack not used) 
  22              	*
  23              	*     Forth return stack is at end of RAM (addr=0x200005000) and reserve 512 bytes
  24              	*     a 128 bytes flwr_buffer is reserved below rstack for flash row writing
  25              	*     a 128 bytes tib is reserved below flwr_buffer 
  26              	*     Forth dstack is below tib and reserve 512 bytes 
  27              	*   
  28              	******************************************************
  29              	
  30              	*****************************************************************************
  31              	*	STM32eForth version 7.20
  32              	*	Chen-Hanson Ting,  July 2014
  33              	
  34              	*	Subroutine Threaded Forth Model
  35              	*	Adapted to STM32F407-Discovery Board
  36              	*	Assembled by Keil uVision 5.10
  37              	
  38              	*	Version 4.03
  39              	*	Direct Threaded Forth Model
  40              	*	Derived from 80386 eForth versin 4.02
  41              	*	and Chien-ja Wu's ARM7 eForth version 1.01
  42              	
  43              	*	Subroutine thread (Branch-Link) model
  44              	*	  Register assignments
  45              	*	IP	 	R0 	*scratch
  46              	*	SP	 	R1  * data stack pointer
  47              	*	RP	 	R2 * return stack pointer 
  48              	*	UP	 	R3 
  49              	*	WP	 	R4	*scratch 
  50              	*	TOS	 	R5  * top of data stack
  51              	*	XP	 	R6 	*scratch
  52              	*	YP	 	R7	*scratch
  53              	*	  All Forth words are called by 
  54              	*	BL.W	addr
  55              	*	  All low level code words are terminaled by
  56              	*	BX	LR 	(_RET)
  57              	*	  All high level Forth words start with
ARM GAS  stm32eforth-fl.s 			page 2


  58              	*	STRFD	RP!,{LR}	(_NEST)
  59              	*	  All high level Forth words end with
  60              	*	LDRFD	RP!,{PC}	(_UNNEST)
  61              	*	  Top of data stack is cached in R5
  62              	*	  USART1 at 115200 baud, 8 data bits, 1 stop bit, no parity
  63              	*	TX on PA9 and RX on PA10.
  64              	
  65              	*	Version 5.02, 09oct04cht
  66              	*	fOR ADuC702x from Analog Devices
  67              	*	Version 6.01, 10apr08cht a
  68              	*	.p2align 2 to at91sam7x256
  69              	*	Tested on Olimax SAM7-EX256 Board with LCD display
  70              	*	Running under uVision3 RealView from Keil
  71              	*	Version 7.01, 29jun14cht
  72              	*	Ported to STM32F407-Discovery Board, under uVision 5.10
  73              	*	.p2aligned to eForth 2 Model
  74              	*	Assembled to flash memory and executed therefrom.
  75              	*	Version 7.10, 30jun14cht
  76              	*	Flash memory mapped to Page 0 where codes are executed
  77              	*	Version 7.20, 02jul14cht
  78              	*	Irreducible Complexity
  79              	*	Code copied from flash to RAM, RAM mapped to Page 0.
  80              	*	TURNKEY saves current application from RAM to flash.
  81              	*********************************************************/
  82              	
  83              	  .syntax unified
  84              	  .cpu cortex-m3
  85              	  .fpu softvfp
  86              	  .thumb
  87              	
  88              	  .include "stm32f103.inc"
   1              	/*
   2              	   STM32F103 registers
   3              	*/
   4              	    /* RAM */
   5              	    .equ RAM_ADR, 0x20000000 
   6              	    .equ RAM_SIZE, 0x5000
   7              	    .equ RAM_END, RAM_ADR+RAM_SIZE
   8              	
   9              	   /* RAM bit band alias */
  10              	      .equ RAM_BIT_ALIAS, 0x22000000
  11              	
  12              	    /* FLASH MEMORY */
  13              	    /* memory reported by MCU */
  14              	    .equ FLASH_ADR, 0x8000000 
  15              	    .equ FLASH_SIZE, 0x10000
  16              	    .equ FLASH_END, FLASH_ADR+FLASH_SIZE
  17              	    /* the MCU as 64K flash not reported by MCU */
  18              	    .equ FLASH_HIDDEN_ADR, 0x8010000
  19              	    .equ FLASH_HIDDEN_SIZE, 0x10000
  20              	    .equ FLASH_HIDDEN_END, FLASH_HIDDEN_ADR+FLASH_HIDDEN_SIZE
  21              	    .equ PAGE_SIZE, 1024 // erase block size 
  22              	
  23              	   /* system memory */
  24              	      .equ SYS_MEM, 0x1FFFF000
  25              	      .equ SYS_MEM_SIZE, 0x800
  26              	
ARM GAS  stm32eforth-fl.s 			page 3


  27              	   /* option memory */
  28              	      .equ OPTION, 0x1FFFF800   
  29              	      .equ OPT_SIZE, 16
  30              	
  31              	
  32              	   /* peripherals base address */
  33              	      .equ PER_BASE_ADR,  0x40000000
  34              	   /* PERIPHERALS bit band alias */
  35              	      .equ PER_BIT_ALIAS, 0x42000000 
  36              	
  37              	
  38              	    /* RCC registers address */
  39              	    .equ RCC_BASE_ADR, 0x40021000
  40              	    /* RCC registers offset */
  41              	    .equ RCC_CR, 0
  42              	    .equ RCC_CFGR, 4
  43              	    .equ RCC_CIR, 8
  44              	    .equ RCC_APB2RSTR, 12
  45              	    .equ RCC_APB1RSTR, 16
  46              	    .equ RCC_AHBENR, 20
  47              	    .equ RCC_APB2ENR, 24
  48              	    .equ RCC_APB1ENR, 28
  49              	    .equ RCC_BDCR, 32 
  50              	    .equ RCC_CSR, 36
  51              	
  52              	    /* FLASH registers address */
  53              	    .equ FLASH_BASE_ADR, 0x40022000
  54              	    /* FLASH registers offset */
  55              	    .equ FLASH_ACR, 0
  56              	    .equ FLASH_KEYR, 4
  57              	    .equ FLASH_OPTKEYR, 8
  58              	    .equ FLASH_SR, 12
  59              	    .equ FLASH_CR, 16
  60              	    .equ FLASH_AR, 20
  61              	    .equ FLASH_OBR, 28
  62              	    .equ FLASH_WRPR,32
  63              	    .equ RDPRT_KEY, 0x00A5
  64              	    .equ FLASH_KEY1, 0x45670123
  65              	    .equ FLASH_KEY2, 0xCDEF89AB
  66              	
  67              	    /* GPIOx base address */
  68              	    .equ GPIOA_BASE_ADR, 0x40010800
  69              	    .equ GPIOB_BASE_ADR, 0x40010C00
  70              	    .equ GPIOC_BASE_ADR, 0x40011000
  71              	    .equ GPIOD_BASE_ADR, 0x40011400
  72              	    .equ GPIOE_BASE_ADR, 0x40011800
  73              	    .equ GPIOF_BASE_ADR, 0x40018C00
  74              	    .equ GPIOG_BASE_ADR, 0x40012000
  75              	
  76              	    /* gpiox registers offset from base address */
  77              	    .equ GPIO_CRL, 0
  78              	    .equ GPIO_CRH, 4
  79              	    .equ GPIO_IDR, 8
  80              	    .equ GPIO_ODR, 12
  81              	    .equ GPIO_BSRR, 16
  82              	    .equ GPIO_BRR, 20
  83              	    .equ GPIO_LOCKR, 24 
ARM GAS  stm32eforth-fl.s 			page 4


  84              	    
  85              	
  86              	    /* USART1 registers */
  87              	    .equ USART1_BASE_ADR, 0x40013800
  88              	    /* USARTx registers offset */
  89              	    .equ USART_SR, 0
  90              	    .equ USART_DR,4
  91              	    .equ USART_BRR,8
  92              	    .equ USART_CR1,12
  93              	    .equ USART_CR2,16
  94              	    .equ USART_CR3,20
  95              	    .equ USART_GTPR,24
  96              	
  97              	   /* systick */
  98              	    .equ STK_BASE_ADR, 0xE000E010
  99              	    /* registers offset */
 100              	    .equ STK_CTL, 0
 101              	    .equ STK_LOAD, 4
 102              	    .equ STK_VAL, 8
 103              	    .equ STK_CALIB, 12
 104              	
 105              	   /* system control block */
 106              	   .equ SCB_BASE_ADR, 0xE000ED00
 107              	   /* registers offset */
 108              	   .equ SCB_CPUID, 0
 109              	   .equ SCB_ICSR, 4 
 110              	   .equ SCB_VTOR, 8
 111              	   .equ SCB_AIRCR, 12
 112              	   .equ SCB_SCR, 16
 113              	   .equ SCB_CCR, 20
 114              	   .equ SCB_SHPR1,24
 115              	   .equ SCB_SHPR2,28
 116              	   .equ SCB_SHPR3,32
 117              	   .equ SCB_SHCRS,36
 118              	   .equ SCB_CFSR,40
 119              	   .equ SCB_HFSR,44
 120              	   .equ SCB_MMAR,52
 121              	   .equ SCB_BFAR,56
 122              	   // key to to write in SCB_AIRCR 
 123              	   .equ SCB_VECTKEY,0x5fa 
 124              	   
 125              	   /* NVIC block */
 126              	   .equ NVIC_BASE_ADR, 0xE000E100
 127              	   .equ NVIC_ISER0, 0
 128              	   .equ NVIC_ISER1, 4
 129              	   .equ NVIC_ISER2, 8
 130              	   .equ NVIC_ICER0, 0x80
 131              	   .equ NVIC_ICER1, 0x84 
 132              	   .equ NVIC_ICER2, 0x88 
 133              	   .equ NVIC_ISPR0, 0x100
 134              	   .equ NVIC_ISPR1, 0x104
 135              	   .equ NVIC_ISPR2, 0x108 
 136              	   .equ NVIC_ICPR0, 0x180
 137              	   .equ NVIC_ICPR1, 0x184
 138              	   .equ NVIC_ICPR2, 0x188
 139              	   .equ NVIC_IABR0, 0x200
 140              	   .equ NVIC_IABR1, 0x204
ARM GAS  stm32eforth-fl.s 			page 5


 141              	   .equ NVIC_IABR2, 0x208
 142              	   .equ NVIC_IPR_BASE, 0x300 
  89              	
  90              	/* blue pill specific constants */ 
  91              	  .equ LED_GPIO, GPIOC_BASE_ADR
  92              	  .equ LED_PIN, 13
  93              	  .equ UART, USART1_BASE_ADR 
  94              	
  95              	/* eForth specific constants */
  96              	.equ SPP ,	0x20004E80	/*top of data stack (SP0) */
  97              	.equ TIBB ,	0x20004E80	/*terminal input buffer (TIB) */
  98              	.equ RPP ,	0x20004F80	/*top of return stack (RP0) */
  99              	.equ UPP ,	0x20000000	/*start of user area (UP0) */
 100              	.equ DTOP ,	0x20000100	/*start of usable RAM area (HERE) */
 101              	.equ DEND , 0x20004E00  /*usable RAM end */
 102              	 .equ RAMOFFSET ,	0x20000000	// remap
 103              	 .equ RAMEND, 0x20005000 // 20Ko
 104              	
 105              	/*************************************
 106              	   system variables offset from UPP
 107              	*************************************/
 108              	  .equ SEED_OFS, 4    // prng seed 
 109              	  .equ TICKS_OFS, SEED_OFS+4  // millseconds counter
 110              	  .equ TIMER_OFS, TICKS_OFS+4  // count down timer
 111              	  .equ FTRACE_OFS, TIMER_OFS+4  // compile to RAM 
 112              	  .equ IMG_SIGN_OFS, FTRACE_OFS+4  // image signature  
 113              	  .equ BOOT_OFS, IMG_SIGN_OFS+4  // boot program address
 114              	  .equ BASE_OFS, BOOT_OFS+4  // numeric conversion base 
 115              	  .equ TMP_OFS, BASE_OFS+4   // temporary variable
 116              	  .equ SPAN_OFS, TMP_OFS+4  // character count received by expect  
 117              	  .equ TOIN_OFS, SPAN_OFS+4  // >IN  parse pointer in TIB
 118              	  .equ NTIB_OFS, TOIN_OFS+4  // #TIB  characters in TIB 
 119              	  .equ TIB_OFS, NTIB_OFS+4   // TIB buffer address 
 120              	  .equ EVAL_OFS, TIB_OFS+4  // eval|compile vector 
 121              	  .equ HLD_OFS, EVAL_OFS+4   // hold pointer 
 122              	  .equ CTXT_OFS, HLD_OFS+4  // context pointer 
 123              	  .equ FORTH_CTOP_OFS, CTXT_OFS+4  // flash free dictionary address 
 124              	  .equ RAM_CTOP_OFS, FORTH_CTOP_OFS+4  // ram free dictionary address
 125              	  .equ LASTN_OFS, RAM_CTOP_OFS+4     // last word in dictionary link nfa 
 126              	  .equ VARS_END_OFS, LASTN_OFS+4 // end of system variables  
 127              	  
 128              	  .equ RX_QUEUE_SIZE, 16 // uart_rx queue size 16 characters 
 129              	  .equ RX_QUEUE_OFS, VARS_END_OFS+4 // rx queue 
 130              	  .equ RX_HEAD_OFS, RX_QUEUE_OFS+RX_QUEUE_SIZE // queue head indice 
 131              	  .equ RX_TAIL_OFS, RX_HEAD_OFS+4 // queue tail indice 
 132              	  	
 133              	
 134              	/***********************************************
 135              	* MACROS
 136              	*	Assemble inline direct threaded code ending.
 137              	***********************************************/
 138              		.macro _CALL fn /* low level routine call */ 
 139              	 	PUSH {LR}
 140              		BL \fn  
 141              		POP {LR}
 142              		.endm
 143              		
ARM GAS  stm32eforth-fl.s 			page 6


 144              		.macro _MOV32 R V 
 145              		MOV \R, #\V&0xffff
 146              		MOVT \R, #\V>>16
 147              		.endm
 148              	
 149              		.macro	_RET /*exit low level call */
 150              		BX LR 
 151              		.endm
 152              	
 153              		.macro _NEXT /* direct jump INEXT */ 
 154              		B INEXT   
 155              		.endm 
 156              	
 157              	 	.macro	_NEST /*start high level word */
 158              		BX R8 // BX R8 
 159              		NOP.N 
 160              		.endm
 161              	
 162              		.macro _ADR label 
 163              		.word 1+\label  
 164              		.endm 
 165              	
 166              	 	.macro	_UNNEST	/*end high level word */
 167              		_ADR UNNEST 
 168              		.endm
 169              	
 170              	 	.macro	_DOLIT u /*long literals */
 171              		_ADR	DOLIT
 172              		.word	\u 
 173              		.endm
 174              	
 175              		.macro _DOTQP len, text 
 176              		_ADR DOTQP 
 177              		.byte \len 
 178              		.ascii "\text" 
 179              		.p2align 2 
 180              		.endm
 181              	
 182              		.macro _COMPI name 
 183              		_DOLIT \name 
 184              		_ADR CALLC 
 185              		.endm 
 186              	
 187              		.macro _ABORQ len,name 
 188              		_ADR ABORQ 
 189              		.byte \len 
 190              		.ascii "\name"
 191              		.p2align 2 
 192              		.endm
 193              	
 194              		.macro _BRAN label 
 195              		_ADR BRAN 
 196              		.word \label 
 197              		.endm 
 198              	
 199              		.macro _QBRAN label 
 200              		_ADR QBRAN 
ARM GAS  stm32eforth-fl.s 			page 7


 201              		.word \label
 202              		.endm 
 203              	
 204              		.macro _DONXT label 
 205              		_ADR DONXT
 206              		.word \label 
 207              		.endm 
 208              	
 209              	 	.macro	_PUSH	/*push R5 on data stack*/
 210              		STR	R5,[R1,#-4]!
 211              		.endm
 212              	
 213              	 	.macro	_POP /*pop data stack to R5 */
 214              		LDR	R5,[R1],#4
 215              		.endm
 216              	
 217              	/*************************************
 218              	*   interrupt service vectors table 
 219              	**************************************/
 220              	   .section  .isr_vector,"a",%progbits
 221              	  .type  isr_vectors, %object
 222              	
 223              	isr_vectors:
 224 0000 00000000 	  .word   _mstack          /* main return stack address */
 225 0004 00000000 	  .word   reset_handler    /* startup address */
 226              	/* core interrupts || exceptions */
 227 0008 00000000 	  .word   default_handler  /*  NMI */
 228 000c 00000000 	  .word   default_handler  /*  HardFault */
 229 0010 00000000 	  .word   default_handler  /*  Memory Management */
 230 0014 00000000 	  .word   default_handler  /* Bus fault */
 231 0018 00000000 	  .word   default_handler  /* Usage fault */
 232 001c 00000000 	  .word   0
 233 0020 00000000 	  .word   0
 234 0024 00000000 	  .word   0
 235 0028 00000000 	  .word   0
 236 002c 00000000 	  .word   default_handler  /* SWI instruction */
 237 0030 00000000 	  .word   default_handler  /* Debug monitor */
 238 0034 00000000 	  .word   0
 239 0038 00000000 	  .word   default_handler  /* PendSV */
 240 003c 00000000 	  .word   systick_handler  /* Systick */
 241              	  
 242              	  /* External Interrupts */
 243 0040 00000000 	  .word      default_handler /* IRQ0, Window WatchDog              */                              
 244 0044 00000000 	  .word      default_handler /* IRQ1, PVD_VDM */                        
 245 0048 00000000 	  .word      default_handler /* IRQ2, TAMPER */            
 246 004c 00000000 	  .word      default_handler /* IRQ3, RTC  */                      
 247 0050 00000000 	  .word      default_handler /* IRQ4, FLASH */                                          
 248 0054 00000000 	  .word      default_handler /* IRQ5, RCC */                                            
 249 0058 00000000 	  .word      default_handler /* IRQ6, EXTI Line0 */                        
 250 005c 00000000 	  .word      default_handler /* IRQ7, EXTI Line1  */                          
 251 0060 00000000 	  .word      default_handler /* IRQ8, EXTI Line2 */                          
 252 0064 00000000 	  .word      default_handler /* IRQ9, EXTI Line3 */                          
 253 0068 00000000 	  .word      default_handler /* IRQ10, EXTI Line4 */                          
 254 006c 00000000 	  .word      default_handler /* IRQ11, DMA1 CH1 */                  
 255 0070 00000000 	  .word      default_handler /* IRQ12, DMA1 CH2 */                   
 256 0074 00000000 	  .word      default_handler /* IRQ13, DMA1 CH3 */                   
 257 0078 00000000 	  .word      default_handler /* IRQ14, DMA1 CH4  */                   
ARM GAS  stm32eforth-fl.s 			page 8


 258 007c 00000000 	  .word      default_handler /* IRQ15, DMA1 CH5 */                   
 259 0080 00000000 	  .word      default_handler /* IRQ16, DMA1 CH6 */                   
 260 0084 00000000 	  .word      default_handler /* IRQ17, DMA1 CH7 */                   
 261 0088 00000000 	  .word      default_handler /* IRQ18, ADC1, ADC2 global interrupt */                   
 262 008c 00000000 	  .word      default_handler /* IRQ19, USB High priority */                         
 263 0090 00000000 	  .word      default_handler /* IRQ20, USB low priority */                          
 264 0094 00000000 	  .word      default_handler /* IRQ21, CAN_RX1 */                          
 265 0098 00000000 	  .word      default_handler /* IRQ22, CAN1_SCE */                          
 266 009c 00000000 	  .word      default_handler /* IRQ23, External Line[9:5]s */                          
 267 00a0 00000000 	  .word      default_handler /* IRQ24, TIM1 Break and TIM15 global */         
 268 00a4 00000000 	  .word      default_handler /* IRQ25, TIM1 Update and TIM16 global */         
 269 00a8 00000000 	  .word      default_handler /* IRQ26, TIM1 Trigger and Commutation and TIM17 */
 270 00ac 00000000 	  .word      default_handler /* IRQ27, TIM1 Capture Compare */                          
 271 00b0 00000000 	  .word      default_handler /* IRQ28, TIM2 */                   
 272 00b4 00000000 	  .word      default_handler /* IRQ29, TIM3 */                   
 273 00b8 00000000 	  .word      default_handler /* IRQ30, TIM4 */                   
 274 00bc 00000000 	  .word      default_handler /* IRQ31, I2C1 Event and exti line 23 */                          
 275 00c0 00000000 	  .word      default_handler /* IRQ32, I2C1 Error */                          
 276 00c4 00000000 	  .word      default_handler /* IRQ33, I2C2 Event and exti line 24 */                          
 277 00c8 00000000 	  .word      default_handler /* IRQ34, I2C2 Error */                            
 278 00cc 00000000 	  .word      default_handler /* IRQ35, SPI1 */                   
 279 00d0 00000000 	  .word      default_handler /* IRQ36, SPI2 */                   
 280 00d4 00000000 	  .word      uart_rx_handler /* IRQ37, USART1 */                   
 281 00d8 00000000 	  .word      default_handler /* IRQ38, USART2 */                   
 282 00dc 00000000 	  .word      default_handler /* IRQ39, USART3 */                   
 283 00e0 00000000 	  .word      default_handler /* IRQ40, External Line[15:10]s */                          
 284 00e4 00000000 	  .word      default_handler /* IRQ41, RTC Alarm */                 
 285 00e8 00000000 	  .word      default_handler /* IRQ42, USB Wakeup*/                       
 286 00ec 00000000 	  .word      default_handler /* IRQ43, TIM8 Break */         
 287 00f0 00000000 	  .word      default_handler /* IRQ44, TIM8 Update*/         
 288 00f4 00000000 	  .word      default_handler /* IRQ45, TIM8 Trigger and Commutation */
 289 00f8 00000000 	  .word      default_handler /* IRQ46, TIM8 Capture Compare */                          
 290 00fc 00000000 	  .word      default_handler /* IRQ47, ADC3 global */                          
 291 0100 00000000 	  .word      default_handler /* IRQ48, FSMC */                   
 292 0104 00000000 	  .word      default_handler /* IRQ49, SDIO */                   
 293 0108 00000000 	  .word      default_handler /* IRQ50, TIM5 */                   
 294 010c 00000000 	  .word      default_handler /* IRQ51, SPI3 */                   
 295 0110 00000000 	  .word      default_handler /* IRQ52, UART4 */                   
 296 0114 00000000 	  .word      default_handler /* IRQ53, UART5 */                   
 297 0118 00000000 	  .word      default_handler /* IRQ54, TIM6 */                   
 298 011c 00000000 	  .word      default_handler /* IRQ55, TIM7 */
 299 0120 00000000 	  .word      default_handler /* IRQ56, DMA2 CH1 */                   
 300 0124 00000000 	  .word      default_handler /* IRQ57, DMA2 CH2 */                   
 301 0128 00000000 	  .word      default_handler /* IRQ58, DMA2 CH3 */                   
 302 012c 00000000 	  .word      default_handler /* IRQ59, DMA2 CH4 & CH5 */                   
 303              	  .size  isr_vectors, .-isr_vectors
 304              	
 305 0130 00000000 		.p2align 8
 305      00000000 
 305      00000000 
 305      00000000 
 305      00000000 
 306              	
 307              	UZERO:
 308 0200 00000000 		.word 0  			/*Reserved */
 309 0204 55AA0000 		.word 0xaa55 /* SEED  */ 
 310 0208 00000000 		.word 0      /* MSEC */
ARM GAS  stm32eforth-fl.s 			page 9


 311 020c 00000000 	    .word 0     /* TIMER */
 312 0210 00000000 		.word 0    /* FTRACE */ 
 313 0214 494D4147 		.ascii "IMAG" /* signature */ 
 314 0218 34290000 		.word HI  /*'BOOT */
 315 021c 0A000000 		.word BASEE 	/*BASE */
 316 0220 00000000 		.word 0			/*tmp */
 317 0224 00000000 		.word 0			/*SPAN */
 318 0228 00000000 		.word 0			/*>IN */
 319 022c 00000000 		.word 0			/*#TIB */
 320 0230 804E0020 		.word TIBB	/*TIB */
 321 0234 841A0000 		.word INTER	/*'EVAL */
 322 0238 00000000 		.word 0			/*HLD */
 323 023c A4290000 		.word LASTN	/*CONTEXT */
 324 0240 0C2A0000 		.word CTOP	/* FCP end of system dictionnary */
 325 0244 00010020 		.word DTOP	/* CP end of RAM dictionary RAM */
 326 0248 A4290000 		.word LASTN	/*LAST word in dictionary */
 327 024c 00000000 		.word 0,0			/*reserved */
 327      00000000 
 328              	ULAST:
 329 0254 00000000 		.space  RX_QUEUE_SIZE+8 /* space reserved for rx_queue,head and tail pointer.
 329      00000000 
 329      00000000 
 329      00000000 
 329      00000000 
 330              	
 331              	
 332              	/*****************************************************
 333              	* default isr handler called on unexpected interrupt
 334              	*****************************************************/
 335              	    .section  .text,"ax",%progbits
 336              	  .type default_handler, %function
 337              	  .p2align 2 
 338              	  .global default_handler
 339              	default_handler:
 340              	// search last executed word 
 341 0000 10CA     		LDMFD R2!,{R4}
 342 0002 00F0BDF8 		bl vm_init
 343 0006 41F8045D 		_PUSH
 344 000a 54F8045C 		ldr r5,[r4,#-4]
 345 000e A5F10105 		sub r5,#1 
 346 0012 0A48     		ldr r0,word_that_crashed
 347 0014 FEE1     		b INEXT 	
 348 0016 034D     	1:	ldr r5,exception_msg 
 349 0018 00B500F0 		_CALL uart_puts 
 349      57F85DF8 
 349      04EB
 350              	// wait transmission completed
 351 0022 21E0     		b reboot  
 352              		.p2align 2 
 353              	exception_msg:
 354 0024 28000000 		.word .+4 
 355 0028 12       		.byte 18
 356 0029 0D657863 		.ascii "\rexception reboot!"
 356      65707469 
 356      6F6E2072 
 356      65626F6F 
 356      7421
ARM GAS  stm32eforth-fl.s 			page 10


 357 003b 00       		.p2align 2
 358              	
 359              	/*****************************
 360              	 report where it crashed 
 361              	 if name found in dictinary 
 362              	*****************************/
 363              	word_that_crashed:
 364 003c 40000000 		.word .+4
 365 0040 95130000 		_ADR CR 
 366 0044 41280000 		_ADR TNAME
 367 0048 79080000 		_ADR QDUP 
 368 004c BD050000 		_QBRAN 2f 
 368      64000000 
 369 0054 010A0000 		_ADR COUNT 
 370 0058 61130000 		_ADR TYPEE 
 371 005c CF050000 		_BRAN 2f
 371      64000000 
 372              	2:
 373 0064 17000000 		_ADR 1b 
 374              	
 375              	/****************
 376              	   MCU reset 
 377              	****************/
 378              	reboot:
 379 0068 0348     		ldr r0,scb_adr 
 380 006a C168     		ldr r1,[r0,#SCB_AIRCR]
 381 006c 41F00401 		orr r1,#(1<<2)
 382 0070 C0F2FA51 		movt r1,#SCB_VECTKEY
 383 0074 C160     		str r1,[r0,#SCB_AIRCR]
 384 0076 FEE7     		b . 
 385              		.p2align 2
 386              	scb_adr:
 387 0078 00ED00E0 		.word SCB_BASE_ADR 
 388              	
 389              	
 390              	/*******************************
 391              	  UART low level routines
 392              	********************************
 393              	
 394              	/*******************************
 395              	  initialise UART peripheral 
 396              	********************************/
 397              		.type uart_init, %function
 398              	uart_init:
 399              	/* set GPIOA PIN 9, uart TX  */
 400 007c 4FF40060 	  _MOV32 r0,GPIOA_BASE_ADR
 400      C4F20100 
 401 0084 4168     	  ldr r1,[r0,#GPIO_CRH]
 402 0086 6FF0F002 	  mvn r2,#(15<<4)
 403 008a 01EA0201 	  and r1,r1,r2
 404 008e 4FF0A002 	  mov r2,#(0xA<<4)
 405 0092 41EA0201 	  orr r1,r1,r2 
 406 0096 4160     	  str r1,[r0,#GPIO_CRH]
 407 0098 4FF46050 	  _MOV32 r0,UART 
 407      C4F20100 
 408              	/* BAUD rate */
 409 00a0 40F27121 	  mov r1,#(39<<4)+1  /* (72Mhz/16)/115200=39,0625, quotient=39, reste=0,0625*16=1 */
ARM GAS  stm32eforth-fl.s 			page 11


 410 00a4 8160     	  str r1,[r0,#USART_BRR]
 411 00a6 42F22C01 	  mov r1,#(3<<2)+(1<<13)+(1<<5) // TE+RE+UE+RXNEIE
 412 00aa C160     	  str r1,[r0,#USART_CR1] /*enable usart*/
 413              	/* enable interrupt in NVIC */
 414 00ac 4FF46140 	  _MOV32 r0,NVIC_BASE_ADR
 414      CEF20000 
 415 00b4 4168     	  ldr r1,[r0,#NVIC_ISER1]
 416 00b6 41F02001 	  orr r1,#32   
 417 00ba 4160     	  str r1,[r0,#NVIC_ISER1]
 418 00bc 7047     	  bx lr 
 419              	
 420              	/***********************************
 421              	uart_tx 
 422              	  input: R5 character to transmit 
 423              	  prerequisite: r4 initialise to UART_BASE_ADR
 424              	***********************************/
 425              		.type uart_tx,%function 
 426              	uart_tx:
 427              	1:
 428 00be 2668     		ldr	r6, [r4, #USART_SR]	
 429 00c0 16F08006 		ands	r6, #0x80		//  TXE bit 
 430 00c4 FBD0     		beq	1b
 431 00c6 2571     		strb	r5, [r4, #USART_DR]	
 432 00c8 7047     		bx lr 
 433              	
 434              	/*********************************
 435              	uart_puts 
 436              		input: r5 pointer to couted string
 437              		use: r9 hold char count.   
 438              	*********************************/
 439 00ca 00BF     		.p2align 2 
 440              		.type uart_puts, %function 
 441              	uart_puts:
 442 00cc 4FF46054 		_MOV32 r4,UART 
 442      C4F20104 
 443 00d4 2F46     		mov r7,r5 
 444 00d6 17F8019B 		ldrb r9,[r7],#1
 445 00da 19EA0909 		ands r9,r9 
 446 00de 08E0     		b 2f 
 447 00e0 17F8015B 	1:  ldrb r5,[r7],#1
 448 00e4 00B5FFF7 		_CALL uart_tx 
 448      EAFF5DF8 
 448      04EB
 449 00ee B9F10109 		subs r9,#1 
 450 00f2 F5D1     	2:	bne 1b 
 451 00f4 2668     	3:	ldr r6,[r4,#USART_SR]
 452 00f6 16F0400F 		tst r6,#(1<<6) // TC 
 453 00fa FBD0     		beq 3b 
 454 00fc 7047     		bx lr 
 455              	
 456              	/**************************
 457              		UART RX handler
 458              	**************************/
 459 00fe 00BF     		.p2align 2
 460              		.type uart_rx_handler, %function
 461              	uart_rx_handler:
 462 0100 2DE9D002 		push {r4,r6,r7,r9}
ARM GAS  stm32eforth-fl.s 			page 12


 463 0104 4FF46054 		_MOV32 r4,UART 
 463      C4F20104 
 464 010c 2668     		ldr r6,[r4,#USART_SR]
 465 010e D4F80490 		ldr r9,[r4,#USART_DR]
 466 0112 16F0200F 		tst r6,#(1<<5) // RXNE 
 467 0116 0DD0     		beq 2f // no char received 
 468 0118 B9F1030F 		cmp r9,#3
 469 011c 0DD0     		beq user_reboot // received CTRL-C then reboot MCU 
 470 011e 03F15007 		add r7,r3,#RX_QUEUE_OFS
 471 0122 5C6E     		ldr r4,[r3,#RX_TAIL_OFS]
 472 0124 2744     		add r7,r7,r4 
 473 0126 87F80090 		strb r9,[r7]
 474 012a 04F10104 		add r4,#1 
 475 012e 04F00F04 		and r4,#(RX_QUEUE_SIZE-1)
 476 0132 5C66     		str r4,[r3,#RX_TAIL_OFS]
 477              	2:	
 478 0134 BDE8D002 		pop {r4,r6,r7,r9}
 479 0138 7047     		bx lr 
 480              	
 481              	user_reboot:
 482 013a DFF80850 		ldr r5,user_reboot_msg
 483 013e FFF7C5FF 		bl uart_puts 
 484 0142 91E7     		b reboot  
 485              	user_reboot_msg:
 486 0144 48010000 		.word .+4
 487 0148 0D       		.byte 13 
 488 0149 0D757365 		.ascii "\ruser reboot!"
 488      72207265 
 488      626F6F74 
 488      21
 489 0156 00BF     		.p2align 2 
 490              	
 491              	/*********************************
 492              		system milliseconds counter
 493              	*********************************/	
 494              	  .type systick_handler, %function
 495              	  .p2align 2 
 496              	  .global systick_handler
 497              	systick_handler:
 498 0158 9868     	  ldr r0,[r3,#TICKS_OFS]  
 499 015a 00F10100 	  add r0,#1
 500 015e 9860     	  str r0,[r3,#TICKS_OFS]
 501 0160 D868     	  ldr r0,[r3,#TIMER_OFS]
 502 0162 10B1     	  cbz r0, systick_exit
 503 0164 A0F10100 	  sub r0,#1
 504 0168 D860     	  str r0,[r3,#TIMER_OFS]
 505              	systick_exit:
 506 016a 7047     	  bx lr
 507              	
 508              	
 509              	
 510              	/**************************************
 511              	  reset_handler execute at MCU reset
 512              	***************************************/
 513              	//    .section  .text.reset_handler
 514              	  .type  reset_handler, %function
 515              	  .p2align 2 
ARM GAS  stm32eforth-fl.s 			page 13


 516              	  .global reset_handler
 517              	reset_handler:
 518 016c 00F06AF8 		bl	remap 
 519 0170 00F01AF8 		bl	init_devices	 	/* RCC, GPIOs */
 520 0174 FFF782FF 		bl	uart_init 
 521 0178 01F038FD 		bl	unlock			/* unlock flash memory */
 522 017c 02F016BC 		b	COLD
 523              	
 524              	/************************************
 525              	 initialize Forth virtual machine
 526              	 registers.
 527              	************************************/
 528              		.type vm_init, %function
 529              	vm_init:
 530 0180 4FF00003 		_MOV32 r3,UPP 
 530      C2F20003 
 531 0188 03F59F42 		add R2,R3,#RPP&0xffff	// Forth return stack
 532 018c 03F59D41 		add R1,R3,#SPP&0xffff // Forth data stack
 533 0190 85EA0505 		eor R5,R5,R5			//  tos=0
 534              	// reset UART queue 
 535 0194 1D66     		str r5,[r3,#RX_HEAD_OFS]
 536 0196 5D66     		str r5,[r3,#RX_TAIL_OFS]
 537 0198 DFF80680 		ldr r8,nest_adr 
 538 019c 48F00108 		orr r8,r8,#1  
 539 01a0 7047     		bx lr 
 540              	nest_adr: 
 541 01a2 0C040000 		.word NEST 
 542              	
 543              	  .type init_devices, %function
 544 01a6 00BF     	  .p2align 2 
 545              	init_devices:
 546              	/* init clock to HSE 72 Mhz */
 547              	/* set 2 wait states in FLASH_ACR_LATENCY */
 548 01a8 4FF40050 		_MOV32 r0,FLASH_BASE_ADR
 548      C4F20200 
 549 01b0 4FF01202 	  mov r2,#0x12
 550 01b4 0260     	  str r2,[r0,#FLASH_ACR]
 551              	/* configure clock for HSE, 8 Mhz crystal */
 552              	/* enable HSE in RCC_CR */
 553 01b6 4FF48050 	  _MOV32 r0,RCC_BASE_ADR
 553      C4F20200 
 554 01be 0168     	  ldr r1,[r0,#RCC_CR]
 555 01c0 41F48031 	  orr r1,r1,#(1<<16) /* HSEON bit */
 556 01c4 0160     	  str r1,[r0,#RCC_CR] /* enable HSE */
 557              	/* wait HSERDY loop */
 558              	wait_hserdy:
 559 01c6 0168     	  ldr r1,[r0,#RCC_CR]
 560 01c8 11F4003F 	  tst r1,#(1<<17)
 561 01cc FBD0     	  beq wait_hserdy
 562              	
 563              	/************************************************* 
 564              	   configure PLL mul factor and source 
 565              	   SYSCLOCK=72 Mhz
 566              	   select HSE as  PLL source clock
 567              	   multiply frequency by 9 
 568              	   APB1 clock is limited to 36 Mhz so divide by 2 
 569              	****************************************************/
ARM GAS  stm32eforth-fl.s 			page 14


 570 01ce 4FF48061 	  mov r1,#(4<<8) /* PLLMUL=7|PLLSCR=HSE|PPRE1=HCLK/2| */
 571 01d2 C0F21D01 	  movt r1,#(7<<2)|1
 572 01d6 4160     	  str r1,[r0,#RCC_CFGR]
 573              	  /* enable PLL */
 574 01d8 0168     	  ldr r1,[r0,#RCC_CR]
 575 01da 41F08071 	  orr r1, #1<<24 
 576 01de 0160     	  str r1,[r0,#RCC_CR]
 577              	/* wait for PLLRDY */
 578              	wait_pllrdy:
 579 01e0 0168     	  ldr r1,[r0,#RCC_CR]
 580 01e2 11F0007F 	  tst r1,#(1<<25)
 581 01e6 FBD0     	  beq wait_pllrdy 
 582              	/* select PLL as sysclock */
 583 01e8 4168     	  ldr r1,[r0,#RCC_CFGR]
 584 01ea 6FF00303 	  mvn r3,#3 
 585 01ee 01EA0201 	  and r1,r1,r2 
 586 01f2 4FF00202 	  mov r2,#2
 587 01f6 41EA0201 	  orr r1,r1,r2
 588 01fa 4160     	  str r1,[r0,#RCC_CFGR] /* PLL selected as sysclock */
 589              	/* wait for SWS==2 */
 590              	wait_sws:
 591 01fc 4168     	  ldr r1,[r0,#RCC_CFGR]
 592 01fe 11F0080F 	  tst r1,#(2<<2)
 593 0202 FBD0     	  beq wait_sws
 594              	/* now sysclock is 72 Mhz */
 595              	
 596              	/* enable peripheral clock for GPIOA, GPIOC and USART1 */
 597 0204 4FF48050 	  _MOV32 r0,RCC_BASE_ADR 
 597      C4F20200 
 598 020c 44F21401 	  mov	r1, #(1<<2)|(1<<4)|(1<<14)		/* GPIOAEN|GPIOCEN|USART1EN */
 599 0210 8161     	  str	r1, [r0, #RCC_APB2ENR]
 600              	
 601              	/* configure GPIOC:13 as output for user LED */
 602 0212 4FF48050 	  _MOV32 r0,GPIOC_BASE_ADR
 602      C4F20100 
 603 021a 4168     	  ldr r1,[r0,#GPIO_CRH]
 604 021c 6FF47002 	  mvn r2,#(15<<20)
 605 0220 01EA0201 	  and r1,r1,r2
 606 0224 4FF4C002 	  mov r2,#(6<<20)
 607 0228 41EA0201 	  orr r1,r1,r2
 608 022c 4160     	  str r1,[r0,#GPIO_CRH]
 609              	
 610              	/* configure systicks for 1msec ticks */
 611 022e 4EF21000 	  _MOV32 r0,STK_BASE_ADR 
 611      CEF20000 
 612 0236 42F22831 	  mov r1,#9000 /* reload value for 1msec */
 613 023a 4160     	  str r1,[r0,#STK_LOAD]
 614 023c 4FF00301 	  mov r1,#3
 615 0240 0160     	  str r1,[r0,STK_CTL]
 616 0242 7047     	  bx lr  
 617              	
 618              	/* copy system to RAM */ 
 619              	//	.type remap, %function 
 620              	remap:
 621 0244 0B48     		ldr r0,remap_dest  
 622 0246 0A49     		ldr r1,remap_src 
 623 0248 4FF05402 		mov r2,#ULAST-UZERO 
ARM GAS  stm32eforth-fl.s 			page 15


 624 024c 51F8043B 	1:	ldr r3,[r1],#4 
 625 0250 40F8043B 		str r3,[r0],#4 
 626 0254 043A     		subs R2,#4 
 627 0256 F9D1     		bne 1b
 628              	// zero end of RAM 
 629 0258 4FF4A042 		_MOV32 r2,RAM_END
 629      C2F20002 
 630 0260 83EA0303 		eor r3,r3,r3 
 631 0264 40F8043B 	2:  str r3,[r0],#4
 632 0268 9042     		cmp r0,r2 
 633 026a FBDB     		blt 2b 
 634 026c 7047     		bx lr  
 635 026e 00BF     		.p2align 2
 636              	remap_src:
 637 0270 00020000 		.word UZERO 
 638              	remap_dest:
 639 0274 00000020 		.word RAM_ADR  
 640              	
 641              	/********************
 642              	* Version control
 643              	*******************/
 644              	.equ VER ,	0x01	/*major release version */
 645              	.equ EXT ,	0x00	/*minor extension */
 646              	
 647              	/* Constants */
 648              	
 649              	.equ COMPO ,	0x040	/*lexicon compile only */ 
 650              	.equ IMEDD ,	0x080	/*lexicon immediate bit */
 651              	.equ MASKK ,	0x0FFFFFF1F	/*lexicon bit mask, allowed for Chineze character */
 652              	
 653              	.equ CELLL ,	4	/*size of a cell */
 654              	.equ BASEE ,	10	/*default radix */
 655              	.equ VOCSS ,	8	/*depth of vocabulary stack */
 656              	
 657              	.equ BKSPP ,	8	/*backspace */
 658              	.equ LF ,	10	  /*line feed */
 659              	.equ CRR ,	13	/*carriage return */
 660              	.equ ERR ,	27	/*error escape */
 661              	.equ TIC ,	39	/*tick */
 662              	
 663              	/********************************************************
 664              	* RAM memory mapping
 665              	* 	0x20000000	RAM base address
 666              	*	0x20000000  system variables	
 667              	* 	0x20000100	Forth dictionary
 668              	* 	0x2000????	top of dictionary, HERE
 669              	* 	0x2000????	WORD buffer, HERE+16
 670              	*   0x20004E00  end of user space
 671              	* 	0x20004E80	top of data stack  R2
 672              	* 	0x20004E80	TIB terminal input buffer
 673              	* 	0x20004F80	top of return stack  R1
 674              	* 	0x20005000	top of hardware stack for interrupts R14
 675              	********************************************************/
 676              	
 677              	
 678              	/******************************************************
 679              	*  COLD start moves the following to USER variables.
ARM GAS  stm32eforth-fl.s 			page 16


 680              	*  MUST BE IN SAME ORDER AS USER VARIABLES.
 681              	******************************************************/
 682 0278 AFF30080 		.p2align 10
 682      AFF30080 
 682      00000000 
 682      00000000 
 682      00000000 
 683              	
 684              	
 685              	 
 686              	
 687              	/***********************************
 688              	//  Start of eForth system 
 689              	***********************************/
 690              	
 691              		.p2align 2 
 692              	
 693              	// PUSH R5, to be used in colon definition 
 694              	TPUSH:
 695 0400 41F8045D 		_PUSH
 696 0404 06E0     		_NEXT
 697              	
 698              	// POP R5, to be used in colon defintion  
 699              	TPOP:
 700 0406 51F8045B 		_POP 
 701 040a 03E0     		_NEXT
 702              	
 703              	
 704              	// hi level word enter 
 705              	NEST: 
 706 040c 42F8040D 		STMFD	R2!,{R0}
 707 0410 04F10300 		ADD R0,R4,#3
 708              	// inner interprer
 709              	INEXT: 
 710 0414 50F8044B 		LDR R4,[R0],#4 
 711 0418 2047     		BX R4 
 712              	UNNEST:
 713 041a 01CA     		LDMFD R2!,{R0}
 714 041c 50F8044B 		LDR R4,[R0],#4 
 715 0420 2047     		BX R4 
 716              	
 717 0422 00BF     		.p2align 2 
 718              	
 719              	// compile "BX 	R8" 
 720              	// this is the only way 
 721              	// a colon defintion in RAM 
 722              	// can jump to NEST
 723              	// R8 is initialized to NEST address 
 724              	// and must be preserved   
 725              	COMPI_NEST:
 726 0424 03F14406 		add r6,r3,#RAM_CTOP_OFS 
 727 0428 3668     		ldr r6,[r6]
 728 042a 44F24077 		mov r7,#0x4700+(8<<3)
 729 042e 26F8027B 		strh r7,[r6],#2
 730 0432 4FF43F47 		mov r7,#0xbf00 // NOP.N   
 731 0436 26F8027B 		strh r7,[r6],#2 
 732 043a 03F14407 		add r7,r3,#RAM_CTOP_OFS 
ARM GAS  stm32eforth-fl.s 			page 17


 733 043e 3E60     		str r6,[r7]
 734 0440 E8E7     		_NEXT  
 735              	
 736              	// RANDOM ( n+ -- {0..n+ - 1} )
 737              	// return pseudo random number 
 738              	// REF: https://en.wikipedia.org/wiki/Xorshift
 739              	
 740 0442 00000000 		.word 0
 741 0446 06       	_RAND: .byte 6
 742 0447 52414E44 		.ascii "RANDOM"
 742      4F4D
 743 044d 0000BF   		.p2align 2 
 744              	RAND:
 745 0450 404700BF 		_NEST
 746 0454 09090000 		_ADR ABSS   
 747 0458 490A0000 		_ADR SEED 
 748 045c FD050000 		_ADR AT 
 749 0460 A5060000 		_ADR DUPP 
 750 0464 81050000 		_DOLIT 13
 750      0D000000 
 751 046c 59070000 		_ADR LSHIFT 
 752 0470 11070000 		_ADR XORR  
 753 0474 A5060000 		_ADR DUPP 
 754 0478 81050000 		_DOLIT 17 
 754      11000000 
 755 0480 41070000 		_ADR RSHIFT 
 756 0484 11070000 		_ADR XORR 
 757 0488 A5060000 		_ADR DUPP
 758 048c 81050000 		_DOLIT 5 
 758      05000000 
 759 0494 59070000 		_ADR LSHIFT 
 760 0498 11070000 		_ADR XORR  
 761 049c A5060000 		_ADR DUPP 
 762 04a0 490A0000 		_ADR SEED 
 763 04a4 E9050000 		_ADR STORE 
 764 04a8 81050000 		_DOLIT 0x7FFFFFFF
 764      FFFFFF7F 
 765 04b0 E9060000 		_ADR ANDD 
 766 04b4 B5060000 		_ADR SWAP 
 767 04b8 F90C0000 		_ADR MODD 
 768 04bc 1B040000 		_UNNEST 
 769              	
 770              	
 771              	// PAUSE ( u -- ) 
 772              	// suspend execution for u milliseconds
 773 04c0 46040000 		.word _RAND
 774 04c4 05       	_PAUSE: .byte 5
 775 04c5 50415553 		.ascii "PAUSE"
 775      45
 776 04ca 00BF     		.p2align 2
 777              	PAUSE:
 778 04cc 404700BF 		_NEST 
 779 04d0 710A0000 		_ADR TIMER 
 780 04d4 E9050000 		_ADR STORE 
 781              	PAUSE_LOOP:
 782 04d8 710A0000 		_ADR TIMER 
 783 04dc FD050000 		_ADR AT 
ARM GAS  stm32eforth-fl.s 			page 18


 784 04e0 BD050000 		_QBRAN PAUSE_EXIT 
 784      F0040000 
 785 04e8 CF050000 		_BRAN PAUSE_LOOP 
 785      D8040000 
 786              	PAUSE_EXIT: 		
 787 04f0 1B040000 		_UNNEST 
 788              	
 789              	//  ULED ( T|F -- )
 790              	// control user LED, -1 ON, 0 OFF  
 791 04f4 C4040000 		.word _PAUSE
 792 04f8 04       	_ULED: .byte 4
 793 04f9 554C4544 		.ascii "ULED"
 794 04fd 0000BF   		.p2align 2
 795              		.type ULED, %function 
 796              	ULED:
 797 0500 4FF40056 		mov r6,#(1<<LED_PIN)
 798 0504 4FF48054 		_MOV32 r4,LED_GPIO 
 798      C4F20104 
 799 050c 2D00     		movs r5,r5 
 800 050e 51F8045B 		_POP
 801 0512 01D0     		beq ULED_OFF 
 802 0514 6661     		str r6,[r4,#GPIO_BRR]
 803 0516 7DE7     		_NEXT 
 804              	ULED_OFF:
 805 0518 2661     		str r6,[r4,#GPIO_BSRR]
 806 051a 7BE7     		_NEXT    
 807              	
 808              	//    ?KEY	 ( -- c T | F )
 809              	// 	Return input character and true, or a false if no input.
 810 051c F8040000 		.word	_ULED
 811 0520 04       	_QRX:	.byte   4
 812 0521 3F4B4559 		.ascii "?KEY"
 813 0525 0000BF   		.p2align 2 
 814              	QKEY:
 815              	QRX: 
 816 0528 41F8045D 		_PUSH
 817 052c 5F6E     		ldr r7,[r3,#RX_TAIL_OFS] 
 818 052e 1E6E     		ldr r6,[r3,#RX_HEAD_OFS]
 819 0530 96EA0705 		eors r5,r6,r7 
 820 0534 0CD0     		beq 1f
 821 0536 03F15007 		add r7,r3,#RX_QUEUE_OFS 
 822 053a 3744     		add r7,r6 
 823 053c 3D78     		ldrb r5,[r7]
 824 053e 06F10106 		add r6,#1 
 825 0542 06F00F06 		and r6,#(RX_QUEUE_SIZE-1)
 826 0546 1E66     		str r6,[R3,#RX_HEAD_OFS]
 827 0548 41F8045D 		_PUSH 
 828 054c 4FF0FF35 		mov r5,#-1
 829 0550 60E7     	1:	_NEXT 
 830              	
 831              	//    TX!	 ( c -- )
 832              	// 	Send character c to the output device.
 833              	
 834 0552 20050000 		.word	_QRX
 835 0556 04       	_TXSTO:	.byte 4
 836 0557 454D4954 		.ascii "EMIT"
 837 055b 00       		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 19


 838              	TXSTO:
 839              	EMIT:
 840              	TECHO:
 841 055c 4FF46054 		_MOV32 r4,UART 
 841      C4F20104 
 842 0564 00B5FFF7 		_CALL uart_tx 
 842      AAFD5DF8 
 842      04EB
 843 056e 51F8045B 		_POP
 844 0572 4FE7     		_NEXT 
 845              		
 846              	/***************
 847              	//  The kernel
 848              	***************/
 849              	
 850              	//    NOP	( -- )
 851              	// 	do nothing.
 852              	
 853 0574 56050000 		.word	_TXSTO
 854 0578 03       	_NOP:	.byte   3
 855 0579 4E4F50   		.ascii "NOP"
 856              		.p2align 2 	
 857              	NOP:
 858 057c 4AE7     		_NEXT 
 859              	 
 860              	
 861              	//    doLIT	( -- w )
 862              	// 	Push an inline literal.
 863              	
 864              	// 	.word	_NOP
 865              	// _LIT	.byte   COMPO+5
 866              	// 	.ascii "doLIT"
 867 057e 00BF     	 	.p2align 2 	
 868              	DOLIT:
 869 0580 41F8045D 		_PUSH				//  store R5 on data stack
 870 0584 50F8045B 		LDR	R5,[R0],#4		//  get literal at word boundary
 871 0588 44E7     		_NEXT 
 872              	
 873              	//    EXECUTE	( ca -- )
 874              	// 	Execute the word at ca.
 875              	
 876 058a 78050000 		.word	_NOP
 877 058e 07       	_EXECU:	.byte   7
 878 058f 45584543 		.ascii "EXECUTE"
 878      555445
 879 0596 00BF     		.p2align 2 	
 880              	EXECU: 
 881 0598 45F00104 		ORR	R4,R5,#1 
 882 059c 51F8045B 		_POP
 883 05a0 2047     		BX R4 
 884 05a2 37E7     		_NEXT 
 885              	
 886              	//    next	( -- ) counter on R:
 887              	// 	Run time code for the single index loop.
 888              	// 	: next ( -- ) \ hilevel model
 889              	// 	 r> r> dup if 1 - >r @ >r exit then drop cell+ >r // 
 890              	
ARM GAS  stm32eforth-fl.s 			page 20


 891              	// 	.word	_EXECU
 892              	// _DONXT	.byte   COMPO+4
 893              	// 	.ascii "next"
 894              	// 	.p2align 2 	
 895              	DONXT:
 896 05a4 1668     		LDR	R6,[R2]   // ( -- u )  
 897 05a6 26B9     		CBNZ R6,NEXT1 
 898              		/* loop done */
 899 05a8 02F10402 		ADD	R2,R2,#4 // drop counter 
 900 05ac 00F10400 		ADD	R0,R0,#4 // skip after loop address 
 901 05b0 30E7     		_NEXT
 902              	NEXT1:
 903              		/* decrement loop counter */
 904 05b2 A6F10106 		SUB	R6,R6,#1
 905 05b6 1660     		STR	R6,[R2]
 906 05b8 0068     		LDR	R0,[R0]	// go begining of loop 
 907 05ba 2BE7     		_NEXT 
 908              	
 909              	//    ?branch	( f -- )
 910              	// 	Branch if flag is zero.
 911              	
 912              	// 	.word	_DONXT
 913              	// _QBRAN	.byte   COMPO+7
 914              	// 	.ascii "?branch"
 915              	// 	.p2align 2 	
 916              	QBRAN:
 917 05bc 2D00     		MOVS	R5,R5
 918 05be 51F8045B 		_POP
 919 05c2 01D1     		BNE	QBRAN1
 920 05c4 0068     		LDR	R0,[R0]
 921 05c6 25E7     		_NEXT
 922              	QBRAN1:
 923 05c8 00F10400 	 	ADD	R0,R0,#4
 924 05cc 22E7     		_NEXT
 925              	
 926              	//    branch	( -- )
 927              	// 	Branch to an inline address.
 928              	
 929              	// 	.word	_QBRAN
 930              	// _BRAN	.byte   COMPO+6
 931              	// 	.ascii "branch"
 932              	// 	.p2align 2 	
 933              	BRAN:
 934 05ce 0068     		LDR	R0,[R0]
 935 05d0 20E7     		_NEXT
 936              	
 937              	//    EXIT	(  -- )
 938              	// 	Exit the currently executing command.
 939              	
 940 05d2 8E050000 		.word	_EXECU
 941 05d6 04       	_EXIT:	.byte   4
 942 05d7 45584954 		.ascii "EXIT"
 943 05db 00       		.p2align 2 	
 944              	EXIT:
 945 05dc 1B040000 		_UNNEST
 946              	
 947              	//    !	   ( w a -- )
ARM GAS  stm32eforth-fl.s 			page 21


 948              	// 	Pop the data stack to memory.
 949              	
 950 05e0 D6050000 		.word	_EXIT
 951 05e4 01       	_STORE:	.byte   1
 952 05e5 21       		.ascii "!"
 953 05e6 00BF     		.p2align 2 	
 954              	STORE:
 955 05e8 51F8044B 		LDR	R4,[R1],#4
 956 05ec 2C60     		STR	R4,[R5]
 957 05ee 51F8045B 		_POP
 958 05f2 0FE7     		_NEXT 
 959              	
 960              	//    @	   ( a -- w )
 961              	// 	Push memory location to the data stack.
 962              	
 963 05f4 E4050000 		.word	_STORE
 964 05f8 01       	_AT:	.byte   1
 965 05f9 40       		.ascii "@"
 966 05fa 00BF     		.p2align 2 	
 967              	AT:
 968 05fc 2D68     		LDR	R5,[R5]
 969 05fe 09E7     		_NEXT 
 970              	
 971              	//    C!	  ( c b -- )
 972              	// 	Pop the data stack to byte memory.
 973              	
 974 0600 F8050000 		.word	_AT
 975 0604 02       	_CSTOR:	.byte   2
 976 0605 4321     		.ascii "C!"
 977 0607 00       		.p2align 2 	
 978              	CSTOR:
 979 0608 51F8044B 		LDR	R4,[R1],#4
 980 060c 2C70     		STRB R4,[R5]
 981 060e 51F8045B 		_POP
 982 0612 FFE6     		_NEXT
 983              	
 984              	//    C@	  ( b -- c )
 985              	// 	Push byte memory location to the data stack.
 986              	
 987 0614 04060000 		.word	_CSTOR
 988 0618 02       	_CAT:	.byte   2
 989 0619 4340     		.ascii "C@"
 990 061b 00       		.p2align 2 	
 991              	CAT:
 992 061c 2D78     		LDRB	R5,[R5]
 993 061e F9E6     		_NEXT 
 994              	
 995              	//    R>	  ( -- w )
 996              	// 	Pop the return stack to the data stack.
 997              	
 998 0620 18060000 		.word	_CAT
 999 0624 02       	_RFROM:	.byte   2
 1000 0625 523E     		.ascii "R>"
 1001 0627 00       		.p2align 2 	
 1002              	RFROM:
 1003 0628 41F8045D 		_PUSH
 1004 062c 52F8045B 		LDR	R5,[R2],#4
ARM GAS  stm32eforth-fl.s 			page 22


 1005 0630 F0E6     		_NEXT 
 1006              	
 1007              	//    R@	  ( -- w )
 1008              	// 	Copy top of return stack to the data stack.
 1009              	
 1010 0632 24060000 		.word	_RFROM
 1011 0636 02       	_RAT:	.byte   2
 1012 0637 5240     		.ascii "R@"
 1013 0639 0000BF   		.p2align 2 	
 1014              	RAT:
 1015 063c 41F8045D 		_PUSH
 1016 0640 1568     		LDR	R5,[R2]
 1017 0642 E7E6     		_NEXT 
 1018              	
 1019              	//    >R	  ( w -- )
 1020              	// 	Push the data stack to the return stack.
 1021              	
 1022 0644 36060000 		.word	_RAT
 1023 0648 42       	_TOR:	.byte   COMPO+2
 1024 0649 3E52     		.ascii ">R"
 1025 064b 00       		.p2align 2 	
 1026              	TOR:
 1027 064c 42F8045D 		STR	R5,[R2,#-4]!
 1028 0650 51F8045B 		_POP
 1029 0654 DEE6     		_NEXT
 1030              	
 1031              	//	RP! ( u -- )
 1032              	// initialize RPP with u 
 1033 0656 48060000 		.word _TOR 
 1034 065a 03       	_RPSTOR: .byte 3 
 1035 065b 525021   		.ascii "RP!" 
 1036 065e 00BF     		.p2align 2 
 1037              	RPSTOR:
 1038 0660 2A46     		MOV R2,R5 
 1039 0662 51F8045B 		_POP  
 1040 0666 D5E6     		_NEXT 
 1041              	
 1042              	
 1043              	//	SP! ( u -- )
 1044              	// initialize SPP with u 
 1045 0668 5A060000 		.word _RPSTOR  
 1046 066c 03       	_SPSTOR: .byte 3 
 1047 066d 535021   		.ascii "SP!" 
 1048              		.p2align 2 
 1049              	SPSTOR:
 1050 0670 2946     		MOV R1,R5 
 1051 0672 85EA0505 		EOR R5,R5,R5 
 1052 0676 CDE6     		_NEXT 
 1053              	
 1054              	//    SP@	 ( -- a )
 1055              	// 	Push the current data stack pointer.
 1056              	
 1057 0678 6C060000 		.word	_SPSTOR
 1058 067c 03       	_SPAT:	.byte   3
 1059 067d 535040   		.ascii "SP@"
 1060              		.p2align 2 	
 1061              	SPAT:
ARM GAS  stm32eforth-fl.s 			page 23


 1062 0680 41F8045D 		_PUSH
 1063 0684 0D46     		MOV	R5,R1
 1064 0686 C5E6     		_NEXT
 1065              	
 1066              	//    DROP	( w -- )
 1067              	// 	Discard top stack item.
 1068              	
 1069 0688 7C060000 		.word	_SPAT
 1070 068c 04       	_DROP:	.byte   4
 1071 068d 44524F50 		.ascii "DROP"
 1072 0691 0000BF   		.p2align 2 	
 1073              	DROP:
 1074 0694 51F8045B 		_POP
 1075 0698 BCE6     		_NEXT 
 1076              	
 1077              	//    DUP	 ( w -- w w )
 1078              	// 	Duplicate the top stack item.
 1079              	
 1080 069a 8C060000 		.word	_DROP
 1081 069e 03       	_DUPP:	.byte   3
 1082 069f 445550   		.ascii "DUP"
 1083 06a2 00BF     		.p2align 2 	
 1084              	DUPP:
 1085 06a4 41F8045D 		_PUSH
 1086 06a8 B4E6     		_NEXT 
 1087              	
 1088              	//    SWAP	( w1 w2 -- w2 w1 )
 1089              	// 	Exchange top two stack items.
 1090              	
 1091 06aa 9E060000 		.word	_DUPP
 1092 06ae 04       	_SWAP:	.byte   4
 1093 06af 53574150 		.ascii "SWAP"
 1094 06b3 00       		.p2align 2 	
 1095              	SWAP:
 1096 06b4 0C68     		LDR	R4,[R1]
 1097 06b6 0D60     		STR	R5,[R1]
 1098 06b8 2546     		MOV	R5,R4
 1099 06ba ABE6     		_NEXT 
 1100              	
 1101              	//    OVER	( w1 w2 -- w1 w2 w1 )
 1102              	// 	Copy second stack item to top.
 1103              	
 1104 06bc AE060000 		.word	_SWAP
 1105 06c0 04       	_OVER:	.byte   4
 1106 06c1 4F564552 		.ascii "OVER"
 1107 06c5 0000BF   		.p2align 2 	
 1108              	OVER:
 1109 06c8 41F8045D 		_PUSH
 1110 06cc 4D68     		LDR	R5,[R1,#4]
 1111 06ce A1E6     		_NEXT 
 1112              	
 1113              	//    0<	  ( n -- t )
 1114              	// 	Return true if n is negative.
 1115              	
 1116 06d0 C0060000 		.word	_OVER
 1117 06d4 02       	_ZLESS:	.byte   2
 1118 06d5 303C     		.ascii "0<"
ARM GAS  stm32eforth-fl.s 			page 24


 1119 06d7 00       		.p2align 2 	
 1120              	ZLESS:
 1121              	//	MOV	R4,#0
 1122              	//	ADD	R5,R4,R5,ASR #32
 1123 06d8 4FEAE575 		ASR R5,#31
 1124 06dc 9AE6     		_NEXT 
 1125              	
 1126              	//    AND	 ( w w -- w )
 1127              	// 	Bitwise AND.
 1128              	
 1129 06de D4060000 		.word	_ZLESS
 1130 06e2 03       	_ANDD:	.byte   3
 1131 06e3 414E44   		.ascii "AND"
 1132 06e6 00BF     		.p2align 2 	
 1133              	ANDD:
 1134 06e8 51F8044B 		LDR	R4,[R1],#4
 1135 06ec 05EA0405 		AND	R5,R5,R4
 1136 06f0 90E6     		_NEXT 
 1137              	
 1138              	//    OR	  ( w w -- w )
 1139              	// 	Bitwise inclusive OR.
 1140              	
 1141 06f2 E2060000 		.word	_ANDD
 1142 06f6 02       	_ORR:	.byte   2
 1143 06f7 4F52     		.ascii "OR"
 1144 06f9 0000BF   		.p2align 2 	
 1145              	ORR:
 1146 06fc 51F8044B 		LDR	R4,[R1],#4
 1147 0700 45EA0405 		ORR	R5,R5,R4
 1148 0704 86E6     		_NEXT 
 1149              	
 1150              	//    XOR	 ( w w -- w )
 1151              	// 	Bitwise exclusive OR.
 1152              	
 1153 0706 F6060000 		.word	_ORR
 1154 070a 03       	_XORR:	.byte   3
 1155 070b 584F52   		.ascii "XOR"
 1156 070e 00BF     		.p2align 2 	
 1157              	XORR:
 1158 0710 51F8044B 		LDR	R4,[R1],#4
 1159 0714 85EA0405 		EOR	R5,R5,R4
 1160 0718 7CE6     		_NEXT 
 1161              	
 1162              	//    UM+	 ( w w -- w cy )
 1163              	// 	Add two numbers, return the sum and carry flag.
 1164              	
 1165 071a 0A070000 		.word	_XORR
 1166 071e 03       	_UPLUS:	.byte   3
 1167 071f 554D2B   		.ascii "UM+"
 1168 0722 00BF     		.p2align 2 	
 1169              	UPLUS:
 1170 0724 0C68     		LDR	R4,[R1]
 1171 0726 6419     		ADDS	R4,R4,R5
 1172 0728 4FF00005 		MOV	R5,#0
 1173 072c 45F10005 		ADC	R5,R5,#0
 1174 0730 0C60     		STR	R4,[R1]
 1175 0732 6FE6     		_NEXT 
ARM GAS  stm32eforth-fl.s 			page 25


 1176              	
 1177              	//    RSHIFT	 ( w # -- w )
 1178              	// 	arithmetic Right shift # bits.
 1179              	
 1180 0734 1E070000 		.word	_UPLUS
 1181 0738 06       	_RSHIFT:	.byte   6
 1182 0739 52534849 		.ascii "RSHIFT"
 1182      4654
 1183 073f 00       		.p2align 2 	
 1184              	RSHIFT:
 1185 0740 51F8044B 		LDR	R4,[R1],#4
 1186 0744 44FA05F5 		MOV	R5,R4,ASR R5
 1187 0748 64E6     		_NEXT 
 1188              	
 1189              	//    LSHIFT	 ( w # -- w )
 1190              	// 	Right shift # bits.
 1191              	
 1192 074a 38070000 		.word	_RSHIFT
 1193 074e 06       	_LSHIFT:	.byte   6
 1194 074f 4C534849 		.ascii "LSHIFT"
 1194      4654
 1195 0755 0000BF   		.p2align 2 	
 1196              	LSHIFT:
 1197 0758 51F8044B 		LDR	R4,[R1],#4
 1198 075c 04FA05F5 		MOV	R5,R4,LSL R5
 1199 0760 58E6     		_NEXT
 1200              	
 1201              	//    +	 ( w w -- w )
 1202              	// 	Add.
 1203              	
 1204 0762 4E070000 		.word	_LSHIFT
 1205 0766 01       	_PLUS:	.byte   1
 1206 0767 2B       		.ascii "+"
 1207              		.p2align 2 	
 1208              	PLUS:
 1209 0768 51F8044B 		LDR	R4,[R1],#4
 1210 076c 2544     		ADD	R5,R5,R4
 1211 076e 51E6     		_NEXT 
 1212              	
 1213              	//    -	 ( w w -- w )
 1214              	// 	Subtract.
 1215              	
 1216 0770 66070000 		.word	_PLUS
 1217 0774 01       	_SUBB:	.byte   1
 1218 0775 2D       		.ascii "-"
 1219 0776 00BF     		.p2align 2 	
 1220              	SUBB:
 1221 0778 51F8044B 		LDR	R4,[R1],#4
 1222 077c C5EB0405 		RSB	R5,R5,R4
 1223 0780 48E6     		_NEXT 
 1224              	
 1225              	//    *	 ( w w -- w )
 1226              	// 	Multiply.
 1227              	
 1228 0782 74070000 		.word	_SUBB
 1229 0786 01       	_STAR:	.byte   1
 1230 0787 2A       		.ascii "*"
ARM GAS  stm32eforth-fl.s 			page 26


 1231              		.p2align 2 	
 1232              	STAR:
 1233 0788 51F8044B 		LDR	R4,[R1],#4
 1234 078c 04FB05F5 		MUL	R5,R4,R5
 1235 0790 40E6     		_NEXT 
 1236              	
 1237              	//    UM*	 ( w w -- ud )
 1238              	// 	Unsigned multiply.
 1239              	
 1240 0792 86070000 		.word	_STAR
 1241 0796 03       	_UMSTA:	.byte   3
 1242 0797 554D2A   		.ascii "UM*"
 1243 079a 00BF     		.p2align 2 	
 1244              	UMSTA:
 1245 079c 0C68     		LDR	R4,[R1]
 1246 079e A5FB0467 		UMULL	R6,R7,R5,R4
 1247 07a2 0E60     		STR	R6,[R1]
 1248 07a4 3D46     		MOV	R5,R7
 1249 07a6 35E6     		_NEXT 
 1250              	
 1251              	//    M*	 ( w w -- d )
 1252              	// 	signed multiply.
 1253              	
 1254 07a8 96070000 		.word	_UMSTA
 1255 07ac 02       	_MSTAR:	.byte   2
 1256 07ad 4D2A     		.ascii "M*"
 1257 07af 00       		.p2align 2 	
 1258              	MSTAR:
 1259 07b0 0C68     		LDR	R4,[R1]
 1260 07b2 85FB0467 		SMULL	R6,R7,R5,R4
 1261 07b6 0E60     		STR	R6,[R1]
 1262 07b8 3D46     		MOV	R5,R7
 1263 07ba 2BE6     		_NEXT 
 1264              	
 1265              	//    1+	 ( w -- w+1 )
 1266              	// 	Add 1.
 1267              	
 1268 07bc AC070000 		.word	_MSTAR
 1269 07c0 02       	_ONEP:	.byte   2
 1270 07c1 312B     		.ascii "1+"
 1271 07c3 00       		.p2align 2 	
 1272              	ONEP:
 1273 07c4 05F10105 		ADD	R5,R5,#1
 1274 07c8 24E6     		_NEXT 
 1275              	
 1276              	//    1-	 ( w -- w-1 )
 1277              	// 	Subtract 1.
 1278              	
 1279 07ca C0070000 		.word	_ONEP
 1280 07ce 02       	_ONEM:	.byte   2
 1281 07cf 312D     		.ascii "1-"
 1282 07d1 0000BF   		.p2align 2 	
 1283              	ONEM:
 1284 07d4 A5F10105 		SUB	R5,R5,#1
 1285 07d8 1CE6     		_NEXT 
 1286              	
 1287              	//    2+	 ( w -- w+2 )
ARM GAS  stm32eforth-fl.s 			page 27


 1288              	// 	Add 1.
 1289              	
 1290 07da CE070000 		.word	_ONEM
 1291 07de 02       	_TWOP:	.byte   2
 1292 07df 322B     		.ascii "2+"
 1293 07e1 0000BF   		.p2align 2 	
 1294              	TWOP:
 1295 07e4 05F10205 		ADD	R5,R5,#2
 1296 07e8 14E6     		_NEXT
 1297              	
 1298              	//    2-	 ( w -- w-2 )
 1299              	// 	Subtract 2.
 1300              	
 1301 07ea DE070000 		.word	_TWOP
 1302 07ee 02       	_TWOM:	.byte   2
 1303 07ef 322D     		.ascii "2-"
 1304 07f1 0000BF   		.p2align 2 	
 1305              	TWOM:
 1306 07f4 A5F10205 		SUB	R5,R5,#2
 1307 07f8 0CE6     		_NEXT
 1308              	
 1309              	//    CELL+	( w -- w+4 )
 1310              	// 	Add CELLL.
 1311              	
 1312 07fa EE070000 		.word	_TWOM
 1313 07fe 05       	_CELLP:	.byte   5
 1314 07ff 43454C4C 		.ascii "CELL+"
 1314      2B
 1315              		.p2align 2 	
 1316              	CELLP:
 1317 0804 05F10405 		ADD	R5,R5,#CELLL
 1318 0808 04E6     		_NEXT
 1319              	
 1320              	//    CELL-	( w -- w-4 )
 1321              	// 	Subtract CELLL.
 1322              	
 1323 080a FE070000 		.word	_CELLP
 1324 080e 05       	_CELLM:	.byte   5
 1325 080f 43454C4C 		.ascii "CELL-"
 1325      2D
 1326              		.p2align 2 	
 1327              	CELLM:
 1328 0814 A5F10405 		SUB	R5,R5,#CELLL
 1329 0818 FCE5     		_NEXT
 1330              	 
 1331              	//    BL	( -- 32 )
 1332              	// 	Blank (ASCII space).
 1333              	
 1334 081a 0E080000 		.word	_CELLM
 1335 081e 02       	_BLANK:	.byte   2
 1336 081f 424C     		.ascii "BL"
 1337 0821 0000BF   		.p2align 2 	
 1338              	BLANK:
 1339 0824 41F8045D 		_PUSH
 1340 0828 4FF02005 		MOV	R5,#32
 1341 082c F2E5     		_NEXT 
 1342              	
ARM GAS  stm32eforth-fl.s 			page 28


 1343              	//    CELLS	( w -- w*4 )
 1344              	// 	Multiply 4.
 1345              	
 1346 082e 1E080000 		.word	_BLANK
 1347 0832 05       	_CELLS:	.byte   5
 1348 0833 43454C4C 		.ascii "CELLS"
 1348      53
 1349              		.p2align 2 	
 1350              	CELLS:
 1351 0838 4FEA8505 		MOV	R5,R5,LSL#2
 1352 083c EAE5     		_NEXT
 1353              	
 1354              	//    CELL/	( w -- w/4 )
 1355              	// 	Divide by 4.
 1356              	
 1357 083e 32080000 		.word	_CELLS
 1358 0842 05       	_CELLSL:	.byte   5
 1359 0843 43454C4C 		.ascii "CELL/"
 1359      2F
 1360              		.p2align 2 	
 1361              	CELLSL:
 1362 0848 4FEAA505 		MOV	R5,R5,ASR#2
 1363 084c E2E5     		_NEXT
 1364              	
 1365              	//    2*	( w -- w*2 )
 1366              	// 	Multiply 2.
 1367              	
 1368 084e 42080000 		.word	_CELLSL
 1369 0852 02       	_TWOST:	.byte   2
 1370 0853 322A     		.ascii "2*"
 1371 0855 0000BF   		.p2align 2 	
 1372              	TWOST:
 1373 0858 4FEA4505 		MOV	R5,R5,LSL#1
 1374 085c DAE5     		_NEXT
 1375              	
 1376              	//    2/	( w -- w/2 )
 1377              	// 	Divide by 2.
 1378              	
 1379 085e 52080000 		.word	_TWOST
 1380 0862 02       	_TWOSL:	.byte   2
 1381 0863 322F     		.ascii "2/"
 1382 0865 0000BF   		.p2align 2 	
 1383              	TWOSL:
 1384 0868 4FEA6505 		MOV	R5,R5,ASR#1
 1385 086c D2E5     		_NEXT
 1386              	
 1387              	//    ?DUP	( w -- w w | 0 )
 1388              	// 	Conditional duplicate.
 1389              	
 1390 086e 62080000 		.word	_TWOSL
 1391 0872 04       	_QDUP:	.byte   4
 1392 0873 3F445550 		.ascii "?DUP"
 1393 0877 00       		.p2align 2 	
 1394              	QDUP:
 1395 0878 2C00     		MOVS	R4,R5
 1396 087a 18BF     		IT NE 
 1397 087c 41F8045D 	    STRNE	R5,[R1,#-4]!
ARM GAS  stm32eforth-fl.s 			page 29


 1398 0880 C8E5     		_NEXT
 1399              	
 1400              	//    ROT	( w1 w2 w3 -- w2 w3 w1 )
 1401              	// 	Rotate top 3 items.
 1402              	
 1403 0882 72080000 		.word	_QDUP
 1404 0886 03       	_ROT:	.byte   3
 1405 0887 524F54   		.ascii "ROT"
 1406 088a 00BF     		.p2align 2 	
 1407              	ROT:
 1408 088c 0C68     		LDR	R4,[R1]  // r4=w2 
 1409 088e 0D60     		STR	R5,[R1]  // w3 replace w2 
 1410 0890 4D68     		LDR	R5,[R1,#4] // w1 replace w3 
 1411 0892 4C60     		STR	R4,[R1,#4] // w2 rpelace w1 
 1412 0894 BEE5     		_NEXT
 1413              	
 1414              	//    2DROP	( w1 w2 -- )
 1415              	// 	Drop top 2 items.
 1416              	
 1417 0896 86080000 		.word	_ROT
 1418 089a 05       	_DDROP:	.byte   5
 1419 089b 3244524F 		.ascii "2DROP"
 1419      50
 1420              		.p2align 2 	
 1421              	DDROP:
 1422 08a0 51F8045B 		_POP
 1423 08a4 51F8045B 		_POP
 1424 08a8 B4E5     		_NEXT 
 1425              	
 1426              	//    2DUP	( w1 w2 -- w1 w2 w1 w2 )
 1427              	// 	Duplicate top 2 items.
 1428              	
 1429 08aa 9A080000 		.word	_DDROP
 1430 08ae 04       	_DDUP:	.byte   4
 1431 08af 32445550 		.ascii "2DUP"
 1432 08b3 00       		.p2align 2 	
 1433              	DDUP:
 1434 08b4 0C68     		LDR	R4,[R1] // r4=w1
 1435 08b6 41F8045D 		STR	R5,[R1,#-4]! // push w2  
 1436 08ba 41F8044D 		STR	R4,[R1,#-4]! // push w1 
 1437 08be A9E5     		_NEXT
 1438              	
 1439              	//    D+	( d1 d2 -- d3 )
 1440              	// 	Add top 2 double numbers.
 1441              	
 1442 08c0 AE080000 		.word	_DDUP
 1443 08c4 02       	_DPLUS:	.byte   2
 1444 08c5 442B     		.ascii "D+"
 1445 08c7 00       		.p2align 2 	
 1446              	DPLUS:
 1447 08c8 51F8044B 		LDR	R4,[R1],#4
 1448 08cc 51F8046B 		LDR	R6,[R1],#4
 1449 08d0 0F68     		LDR	R7,[R1]
 1450 08d2 E419     		ADDS	R4,R4,R7
 1451 08d4 0C60     		STR	R4,[R1]
 1452 08d6 45EB0605 		ADC	R5,R5,R6
 1453 08da 9BE5     		_NEXT
ARM GAS  stm32eforth-fl.s 			page 30


 1454              	
 1455              	//    NOT	 ( w -- !w )
 1456              	// 	1"s complement.
 1457              	
 1458 08dc C4080000 		.word	_DPLUS
 1459 08e0 03       	_INVER:	.byte   3
 1460 08e1 4E4F54   		.ascii "NOT"
 1461              		.p2align 2 	
 1462              	INVER:
 1463 08e4 6FEA0505 		MVN	R5,R5
 1464 08e8 94E5     		_NEXT
 1465              	
 1466              	//    NEGATE	( w -- -w )
 1467              	// 	2's complement.
 1468              	
 1469 08ea E0080000 		.word	_INVER
 1470 08ee 06       	_NEGAT:	.byte   6
 1471 08ef 4E454741 		.ascii "NEGATE"
 1471      5445
 1472 08f5 0000BF   		.p2align 2 	
 1473              	NEGAT:
 1474 08f8 C5F10005 		RSB	R5,R5,#0
 1475 08fc 8AE5     		_NEXT
 1476              	
 1477              	//    ABS	 ( w -- |w| )
 1478              	// 	Absolute.
 1479              	
 1480 08fe EE080000 		.word	_NEGAT
 1481 0902 03       	_ABSS:	.byte   3
 1482 0903 414253   		.ascii "ABS"
 1483 0906 00BF     		.p2align 2 	
 1484              	ABSS:
 1485 0908 15F0004F 		TST	R5,#0x80000000
 1486 090c 18BF     		IT NE
 1487 090e 6D42     	    RSBNE   R5,R5,#0
 1488 0910 80E5     		_NEXT
 1489              	
 1490              	//  0= ( w -- f )
 1491              	// TOS==0?
 1492              	
 1493 0912 02090000 		.word _ABSS
 1494 0916 02       	_ZEQUAL: .byte 2
 1495 0917 303D     		.ascii "0="
 1496 0919 0000BF   		.p2align 2
 1497              	ZEQUAL:
 1498 091c 15B9     		cbnz r5,1f
 1499 091e 4FF0FF35 		mov r5,#-1
 1500 0922 77E5     		_NEXT 
 1501 0924 85EA0505 	1:  eor r5,r5,r5  
 1502 0928 74E5     		_NEXT 	
 1503              	
 1504              	//    =	 ( w w -- t )
 1505              	// 	Equal?
 1506              	
 1507 092a 16090000 		.word	_ZEQUAL
 1508 092e 01       	_EQUAL:	.byte   1
 1509 092f 3D       		.ascii "="
ARM GAS  stm32eforth-fl.s 			page 31


 1510              		.p2align 2 	
 1511              	EQUAL:
 1512 0930 51F8044B 		LDR	R4,[R1],#4
 1513 0934 A542     		CMP	R5,R4
 1514 0936 0CBF     		ITE EQ 
 1515 0938 6FF00005 	    MVNEQ	R5,#0
 1516 093c 0025     		MOVNE	R5,#0
 1517 093e 69E5     		_NEXT
 1518              	
 1519              	//    U<	 ( w w -- t )
 1520              	// 	Unsigned less?
 1521              	
 1522 0940 2E090000 		.word	_EQUAL
 1523 0944 02       	_ULESS:	.byte   2
 1524 0945 553C     		.ascii "U<"
 1525 0947 00       		.p2align 2 	
 1526              	ULESS:
 1527 0948 51F8044B 		LDR	R4,[R1],#4
 1528 094c AC42     		CMP	R4,R5
 1529 094e 34BF     		ITE CC 
 1530 0950 6FF00005 		MVNCC	R5,#0
 1531 0954 0025     		MOVCS	R5,#0
 1532 0956 5DE5     		_NEXT
 1533              	
 1534              	//    <	( w w -- t )
 1535              	// 	Less?
 1536              	
 1537 0958 44090000 		.word	_ULESS
 1538 095c 01       	_LESS:	.byte   1
 1539 095d 3C       		.ascii "<"
 1540 095e 00BF     		.p2align 2 	
 1541              	LESS:
 1542 0960 51F8044B 		LDR	R4,[R1],#4
 1543 0964 AC42     		CMP	R4,R5
 1544 0966 B4BF     	    ITE LT
 1545 0968 6FF00005 		MVNLT	R5,#0
 1546 096c 0025     		MOVGE	R5,#0
 1547 096e 51E5     		_NEXT 
 1548              	
 1549              	//    >	( w w -- t )
 1550              	// 	greater?
 1551              	
 1552 0970 5C090000 		.word	_LESS
 1553 0974 01       	_GREAT:	.byte   1
 1554 0975 3E       		.ascii ">"
 1555 0976 00BF     		.p2align 2 	
 1556              	GREAT:
 1557 0978 51F8044B 		LDR	R4,[R1],#4
 1558 097c AC42     		CMP	R4,R5
 1559 097e CCBF     		ITE GT
 1560 0980 6FF00005 	    MVNGT	R5,#0
 1561 0984 0025     		MOVLE	R5,#0
 1562 0986 45E5     		_NEXT
 1563              	
 1564              	//    MAX	 ( w w -- max )
 1565              	// 	Leave maximum.
 1566              	
ARM GAS  stm32eforth-fl.s 			page 32


 1567 0988 74090000 		.word	_GREAT
 1568 098c 03       	_MAX:	.byte   3
 1569 098d 4D4158   		.ascii "MAX"
 1570              		.p2align 2 	
 1571              	MAX:
 1572 0990 51F8044B 		LDR	R4,[R1],#4
 1573 0994 AC42     		CMP	R4,R5
 1574 0996 C8BF     		IT GT 
 1575 0998 2546     		MOVGT	R5,R4
 1576 099a 3BE5     		_NEXT 
 1577              	
 1578              	//    MIN	 ( w w -- min )
 1579              	// 	Leave minimum.
 1580              	
 1581 099c 8C090000 		.word	_MAX
 1582 09a0 03       	_MIN:	.byte   3
 1583 09a1 4D494E   		.ascii "MIN"
 1584              		.p2align 2 	
 1585              	MIN:
 1586 09a4 51F8044B 		LDR	R4,[R1],#4
 1587 09a8 AC42     		CMP	R4,R5
 1588 09aa B8BF     		IT LT
 1589 09ac 2546     		MOVLT	R5,R4
 1590 09ae 31E5     		_NEXT
 1591              	
 1592              	//    +!	 ( w a -- )
 1593              	// 	Add to memory.
 1594              	
 1595 09b0 A0090000 		.word	_MIN
 1596 09b4 02       	_PSTOR:	.byte   2
 1597 09b5 2B21     		.ascii "+!"
 1598 09b7 00       		.p2align 2 	
 1599              	PSTOR:
 1600 09b8 51F8044B 		LDR	R4,[R1],#4
 1601 09bc 2E68     		LDR	R6,[R5]
 1602 09be 2644     		ADD	R6,R6,R4
 1603 09c0 2E60     		STR	R6,[R5]
 1604 09c2 51F8045B 		_POP
 1605 09c6 25E5     		_NEXT
 1606              	
 1607              	//    2!	 ( d a -- )
 1608              	// 	Store double number.
 1609              	
 1610 09c8 B4090000 		.word	_PSTOR
 1611 09cc 02       	_DSTOR:	.byte   2
 1612 09cd 3221     		.ascii "2!"
 1613 09cf 00       		.p2align 2 	
 1614              	DSTOR:
 1615 09d0 51F8044B 		LDR	R4,[R1],#4
 1616 09d4 51F8046B 		LDR	R6,[R1],#4
 1617 09d8 45F8044B 		STR	R4,[R5],#4
 1618 09dc 2E60     		STR	R6,[R5]
 1619 09de 51F8045B 		_POP
 1620 09e2 17E5     		_NEXT
 1621              	
 1622              	//    2@	 ( a -- d )
 1623              	// 	Fetch double number.
ARM GAS  stm32eforth-fl.s 			page 33


 1624              	
 1625 09e4 CC090000 		.word	_DSTOR
 1626 09e8 02       	_DAT:	.byte   2
 1627 09e9 3240     		.ascii "2@"
 1628 09eb 00       		.p2align 2 	
 1629              	DAT:
 1630 09ec 6C68     		LDR	R4,[R5,#4]
 1631 09ee 41F8044D 		STR	R4,[R1,#-4]!
 1632 09f2 2D68     		LDR	R5,[R5]
 1633 09f4 0EE5     		_NEXT
 1634              	
 1635              	//    COUNT	( b -- b+1 c )
 1636              	// 	Fetch length of string.
 1637              	
 1638 09f6 E8090000 		.word	_DAT
 1639 09fa 05       	_COUNT:	.byte   5
 1640 09fb 434F554E 		.ascii "COUNT"
 1640      54
 1641              		.p2align 2 	
 1642              	COUNT:
 1643 0a00 15F8014B 		LDRB	R4,[R5],#1
 1644 0a04 41F8045D 		_PUSH
 1645 0a08 2546     		MOV	R5,R4
 1646 0a0a 03E5     		_NEXT
 1647              	
 1648              	//    DNEGATE	( d -- -d )
 1649              	// 	Negate double number.
 1650              	
 1651 0a0c FA090000 		.word	_COUNT
 1652 0a10 07       	_DNEGA:	.byte   7
 1653 0a11 444E4547 		.ascii "DNEGATE"
 1653      415445
 1654              		.p2align 2 	
 1655              	DNEGA:
 1656 0a18 0C68     		LDR	R4,[R1]
 1657 0a1a A6EB0606 		SUB	R6,R6,R6
 1658 0a1e 341B     		SUBS R4,R6,R4
 1659 0a20 66EB0505 		SBC	R5,R6,R5
 1660 0a24 0C60     		STR	R4,[R1]
 1661 0a26 F5E4     		_NEXT
 1662              	
 1663              	// **************************************************************************
 1664              	//  System and user variables
 1665              	
 1666              	//    doVAR	( -- a )
 1667              	// 	Run time routine for VARIABLE and CREATE.
 1668              	
 1669              	// 	.word	_DNEGA
 1670              	// _DOVAR	.byte  COMPO+5
 1671              	// 	.ascii "doVAR"
 1672              	// 	.p2align 2 	
 1673              	DOVAR:
 1674 0a28 41F8045D 		_PUSH
 1675 0a2c 0546     		MOV R5,R0
 1676 0a2e 00F10400 		ADD R0,R0,#4 
 1677 0a32 F2E4     		B UNNEST 
 1678              	
ARM GAS  stm32eforth-fl.s 			page 34


 1679              	//    doCON	( -- a ) 
 1680              	// 	Run time routine for CONSTANT.
 1681              	
 1682              	// 	.word	_DOVAR
 1683              	// _DOCON	.byte  COMPO+5
 1684              	// 	.ascii "doCON"
 1685              	// 	.p2align 2 	
 1686              	DOCON:
 1687 0a34 41F8045D 		_PUSH
 1688 0a38 50F8045B 		LDR.W R5,[R0],#4 
 1689 0a3c EDE4     		B UNNEST 
 1690              	
 1691              	/***********************
 1692              	  system variables 
 1693              	***********************/
 1694              	
 1695              	 // SEED ( -- a)
 1696              	 // return PRNG seed address 
 1697              	
 1698 0a3e 100A0000 		.word _DNEGA
 1699 0a42 04       	_SEED: .byte 4
 1700 0a43 53454544 		.ascii "SEED"
 1701 0a47 00       		.p2align 2
 1702              	SEED:
 1703 0a48 41F8045D 		_PUSH 
 1704 0a4c 03F10405 		ADD R5,R3,#SEED_OFS
 1705 0a50 E0E4     		_NEXT 	
 1706              	
 1707              	//  MSEC ( -- a)
 1708              	// return address of milliseconds counter
 1709 0a52 420A0000 	  .word _SEED 
 1710 0a56 04       	_MSEC: .byte 4
 1711 0a57 4D534543 	  .ascii "MSEC"
 1712 0a5b 00       	  .p2align 2 
 1713              	MSEC:
 1714 0a5c 41F8045D 	  _PUSH
 1715 0a60 03F10805 	  ADD R5,R3,#TICKS_OFS
 1716 0a64 D6E4     	  _NEXT 
 1717              	
 1718              	// TIMER ( -- a )
 1719              	// count down timer 
 1720 0a66 560A0000 	  .word _MSEC
 1721 0a6a 05       	_TIMER:  .byte 5
 1722 0a6b 54494D45 	  .ascii "TIMER"
 1722      52
 1723              	  .p2align 2 
 1724              	TIMER:
 1725 0a70 41F8045D 	  _PUSH 
 1726 0a74 03F10C05 	  ADD R5,R3,#TIMER_OFS
 1727 0a78 CCE4     	  _NEXT
 1728              	
 1729              	//    'BOOT	 ( -- a )
 1730              	// 	Application.
 1731              	
 1732 0a7a 6A0A0000 		.word	_TIMER
 1733 0a7e 05       	_TBOOT:	.byte   5
 1734 0a7f 27424F4F 		.ascii "'BOOT"
ARM GAS  stm32eforth-fl.s 			page 35


 1734      54
 1735              		.p2align 2 	
 1736              	TBOOT:
 1737 0a84 41F8045D 		_PUSH
 1738 0a88 03F11805 		ADD	R5,R3,#BOOT_OFS 
 1739 0a8c C2E4     		_NEXT
 1740              		
 1741              	//    BASE	( -- a )
 1742              	// 	Storage of the radix base for numeric I/O.
 1743              	
 1744 0a8e 7E0A0000 		.word	_TBOOT
 1745 0a92 04       	_BASE:	.byte   4
 1746 0a93 42415345 		.ascii "BASE"
 1747 0a97 00       		.p2align 2 	
 1748              	BASE:
 1749 0a98 41F8045D 		_PUSH
 1750 0a9c 03F11C05 		ADD	R5,R3,#BASE_OFS
 1751 0aa0 B8E4     		_NEXT
 1752              	
 1753              	//    tmp	 ( -- a )
 1754              	// 	A temporary storage location used in parse and find.
 1755              	
 1756              	// 	.word	_BASE
 1757              	// _TEMP	.byte   COMPO+3
 1758              	// 	.ascii "tmp"
 1759              	// 	.p2align 2 	
 1760              	TEMP:
 1761 0aa2 41F8045D 		_PUSH
 1762 0aa6 03F12005 		ADD	R5,R3,#TMP_OFS
 1763 0aaa B3E4     		_NEXT
 1764              	
 1765              	//    SPAN	( -- a )
 1766              	// 	Hold character count received by EXPECT.
 1767              	
 1768 0aac 920A0000 		.word	_BASE
 1769 0ab0 04       	_SPAN:	.byte   4
 1770 0ab1 5350414E 		.ascii "SPAN"
 1771 0ab5 0000BF   		.p2align 2 	
 1772              	SPAN:
 1773 0ab8 41F8045D 		_PUSH
 1774 0abc 03F12405 		ADD	R5,R3,#SPAN_OFS
 1775 0ac0 A8E4     		_NEXT
 1776              	
 1777              	//    >IN	 ( -- a )
 1778              	// 	Hold the character pointer while parsing input stream.
 1779              	
 1780 0ac2 B00A0000 		.word	_SPAN
 1781 0ac6 03       	_INN:	.byte   3
 1782 0ac7 3E494E   		.ascii ">IN"
 1783 0aca 00BF     		.p2align 2 	
 1784              	INN:
 1785 0acc 41F8045D 		_PUSH
 1786 0ad0 03F12805 		ADD	R5,R3,#TOIN_OFS
 1787 0ad4 9EE4     		_NEXT
 1788              	
 1789              	//    #TIB	( -- a )
 1790              	// 	Hold the current count and address of the terminal input buffer.
ARM GAS  stm32eforth-fl.s 			page 36


 1791              	
 1792 0ad6 C60A0000 		.word	_INN
 1793 0ada 04       	_NTIB:	.byte   4
 1794 0adb 23544942 		.ascii "#TIB"
 1795 0adf 00       		.p2align 2 	
 1796              	NTIB:
 1797 0ae0 41F8045D 		_PUSH
 1798 0ae4 03F12C05 		ADD	R5,R3,#NTIB_OFS
 1799 0ae8 94E4     		_NEXT
 1800              	
 1801              	//    'EVAL	( -- a )
 1802              	// 	Execution vector of EVAL.
 1803              	
 1804 0aea DA0A0000 		.word	_NTIB
 1805 0aee 05       	_TEVAL:	.byte   5
 1806 0aef 27455641 		.ascii "'EVAL"
 1806      4C
 1807              		.p2align 2 	
 1808              	TEVAL:
 1809 0af4 41F8045D 		_PUSH
 1810 0af8 03F13405 		ADD	R5,R3,#EVAL_OFS
 1811 0afc 8AE4     		_NEXT
 1812              	
 1813              	//    HLD	 ( -- a )
 1814              	// 	Hold a pointer in building a numeric output string.
 1815              	
 1816 0afe EE0A0000 		.word	_TEVAL
 1817 0b02 03       	_HLD:	.byte   3
 1818 0b03 484C44   		.ascii "HLD"
 1819 0b06 00BF     		.p2align 2 	
 1820              	HLD:
 1821 0b08 41F8045D 		_PUSH
 1822 0b0c 03F13805 		ADD	R5,R3,#HLD_OFS
 1823 0b10 80E4     		_NEXT
 1824              	
 1825              	//    CONTEXT	( -- a )
 1826              	// 	A area to specify vocabulary search order.
 1827              	
 1828 0b12 020B0000 		.word	_HLD
 1829 0b16 07       	_CNTXT:	.byte   7
 1830 0b17 434F4E54 		.ascii "CONTEXT"
 1830      455854
 1831 0b1e 00BF     		.p2align 2 	
 1832              	CNTXT:
 1833              	CRRNT:
 1834 0b20 41F8045D 		_PUSH
 1835 0b24 03F13C05 		ADD	R5,R3,#CTXT_OFS
 1836 0b28 74E4     		_NEXT
 1837              	
 1838              	//    CP	( -- a )
 1839              	// 	Point to top name in RAM vocabulary.
 1840              	
 1841 0b2a 160B0000 		.word	_CNTXT
 1842 0b2e 02       	_CP:	.byte   2
 1843 0b2f 4350     		.ascii "CP"
 1844 0b31 0000BF   		.p2align 2 	
 1845              	CPP:
ARM GAS  stm32eforth-fl.s 			page 37


 1846 0b34 41F8045D 		_PUSH
 1847 0b38 03F14405 		ADD	R5,R3,#RAM_CTOP_OFS
 1848 0b3c 6AE4     		_NEXT
 1849              	
 1850              	//   FCP ( -- a )
 1851              	//  Point ot top of Forth system dictionary
 1852 0b3e 2E0B0000 		.word _CP
 1853 0b42 03       	_FCP: .byte 3            
 1854 0b43 464350   		.ascii "FCP"
 1855 0b46 00BF     		.p2align 2 
 1856              	FCP: 
 1857 0b48 41F8045D 		_PUSH 
 1858 0b4c 03F14005 		ADD R5,R3,#FORTH_CTOP_OFS 
 1859 0b50 60E4     		_NEXT 
 1860              	
 1861              	//    LAST	( -- a )
 1862              	// 	Point to the last name in the name dictionary.
 1863              	
 1864 0b52 420B0000 		.word	_FCP
 1865 0b56 04       	_LAST:	.byte   4
 1866 0b57 4C415354 		.ascii "LAST"
 1867 0b5b 00       		.p2align 2 	
 1868              	LAST:
 1869 0b5c 41F8045D 		_PUSH
 1870 0b60 03F14805 		ADD	R5,R3,#LASTN_OFS
 1871 0b64 56E4     		_NEXT
 1872              	
 1873              	//	FTRACE ( -- a )
 1874              	// return trace flag address 
 1875 0b66 560B0000 		.word _LAST  
 1876 0b6a 06       	_FTRACE: .byte 6
 1877 0b6b 46545241 		.ascii "FTRACE"
 1877      4345
 1878 0b71 0000BF   		.p2align 2 
 1879              	FTRACE:	
 1880 0b74 41F8045D 		_PUSH 
 1881 0b78 03F11005 		ADD R5,R3,#FTRACE_OFS 
 1882 0b7c 4AE4     		_NEXT 
 1883              	
 1884              	/***********************
 1885              		system constants 
 1886              	***********************/
 1887              	
 1888              	//	USER_BEGIN ( -- a )
 1889              	//  where user area begin in RAM
 1890 0b7e 6A0B0000 		.word _FTRACE
 1891 0b82 0A       	_USER_BGN: .byte 10
 1892 0b83 55534552 		.ascii "USER_BEGIN"
 1892      5F424547 
 1892      494E
 1893 0b8d 0000BF   		.p2align 2
 1894              	USER_BEGIN:
 1895 0b90 41F8045D 		_PUSH 
 1896 0b94 004D     		ldr r5,USR_BGN_ADR 
 1897 0b96 3DE4     		_NEXT 
 1898              	USR_BGN_ADR:
 1899 0b98 00010020 	.word  DTOP 
ARM GAS  stm32eforth-fl.s 			page 38


 1900              	
 1901              	//  USER_END ( -- a )
 1902              	//  where user area end in RAM 
 1903 0b9c 820B0000 		.word _USER_BGN
 1904 0ba0 08       	_USER_END: .byte 8 
 1905 0ba1 55534552 		.ascii "USER_END" 
 1905      5F454E44 
 1906 0ba9 0000BF   		.p2align 2 
 1907              	USER_END:
 1908 0bac 41F8045D 		_PUSH 
 1909 0bb0 004D     		ldr r5,USER_END_ADR 
 1910 0bb2 2FE4     		_NEXT 
 1911              	USER_END_ADR:
 1912 0bb4 004E0020 		.word DEND 
 1913              	
 1914              	//  IMG_ADR ( -- a )
 1915              	//  where user image is saved in FLASH
 1916 0bb8 A00B0000 		.word _USER_END
 1917 0bbc 07       	_IMG_ADR: .byte 7
 1918 0bbd 494D475F 		.ascii "IMG_ADR"
 1918      414452
 1919              		.p2align 2 
 1920              	IMG_ADR:
 1921 0bc4 41F8045D 		_PUSH
 1922 0bc8 004D     		ldr r5,USR_IMG_ADR   
 1923 0bca 23E4     		_NEXT 
 1924              	USR_IMG_ADR:
 1925 0bcc 00000000 		.word USER_SPACE 
 1926              	
 1927              	// IMG_SIGN ( -- a )
 1928              	// image signature 
 1929 0bd0 BC0B0000 		.word _IMG_ADR 
 1930 0bd4 08       	_IMG_SIGN: .byte 8
 1931 0bd5 494D475F 		.ascii "IMG_SIGN"
 1931      5349474E 
 1932 0bdd 0000BF   		.p2align 2
 1933              	IMG_SIGN: 
 1934 0be0 41F8045D 		_PUSH 
 1935 0be4 03F11405 		ADD r5,r3,#IMG_SIGN_OFS 
 1936 0be8 14E4     		_NEXT 
 1937              	
 1938              	/* *********************
 1939              	  Common functions
 1940              	***********************/
 1941              	
 1942              	//    WITHIN	( u ul uh -- t )
 1943              	// 	Return true if u is within the range of ul and uh.
 1944              	
 1945 0bea D40B0000 		.word	_IMG_SIGN
 1946 0bee 06       	_WITHI:	.byte   6
 1947 0bef 57495448 		.ascii "WITHIN"
 1947      494E
 1948 0bf5 0000BF   		.p2align 2 	
 1949              	WITHI:
 1950 0bf8 404700BF 		_NEST
 1951 0bfc C9060000 		_ADR	OVER
 1952 0c00 79070000 		_ADR	SUBB
ARM GAS  stm32eforth-fl.s 			page 39


 1953 0c04 4D060000 		_ADR	TOR
 1954 0c08 79070000 		_ADR	SUBB
 1955 0c0c 29060000 		_ADR	RFROM
 1956 0c10 49090000 		_ADR	ULESS
 1957 0c14 1B040000 		_UNNEST
 1958              	
 1959              	//  Divide
 1960              	
 1961              	//    UM/MOD	( udl udh u -- ur uq )
 1962              	// 	Unsigned divide of a double by a single. Return mod and quotient.
 1963              	
 1964 0c18 EE0B0000 		.word	_WITHI
 1965 0c1c 06       	_UMMOD:	.byte   6
 1966 0c1d 554D2F4D 		.ascii "UM/MOD"
 1966      4F44
 1967 0c23 00       		.p2align 2 	
 1968              	UMMOD:
 1969 0c24 4FF00107 		MOV	R7,#1
 1970 0c28 51F8044B 		LDR	R4,[R1],#4
 1971 0c2c 0E68     		LDR	R6,[R1]
 1972              	UMMOD0:
 1973 0c2e B619     		ADDS	R6,R6,R6
 1974 0c30 6441     		ADCS	R4,R4,R4
 1975 0c32 04D3     		BCC	UMMOD1
 1976 0c34 A4EB0504 		SUB	R4,R4,R5
 1977 0c38 06F10106 		ADD	R6,R6,#1
 1978 0c3c 04E0     		B UMMOD2
 1979              	UMMOD1:
 1980 0c3e 641B     		SUBS	R4,R4,R5 
 1981 0c40 28BF     		IT CS 
 1982 0c42 0136     		ADDCS	R6,R6,#1
 1983 0c44 00D2     		BCS	UMMOD2
 1984 0c46 2C44     		ADD	R4,R4,R5
 1985              	UMMOD2:
 1986 0c48 FF19     		ADDS	R7,R7,R7
 1987 0c4a F0D3     		BCC	UMMOD0
 1988 0c4c 3546     		MOV	R5,R6
 1989 0c4e 0C60     		STR	R4,[R1]
 1990 0c50 FFF7E0BB 		_NEXT
 1991              	
 1992              	//    M/MOD	( d n -- r q )
 1993              	// 	Signed floored divide of double by single. Return mod and quotient.
 1994              	
 1995 0c54 1C0C0000 		.word	_UMMOD
 1996 0c58 05       	_MSMOD:	.byte  5
 1997 0c59 4D2F4D4F 		.ascii "M/MOD"
 1997      44
 1998 0c5e 00BF     		.p2align 2 	
 1999              	MSMOD:	
 2000 0c60 404700BF 		_NEST
 2001 0c64 A5060000 		_ADR	DUPP
 2002 0c68 D9060000 		_ADR	ZLESS
 2003 0c6c A5060000 		_ADR	DUPP
 2004 0c70 4D060000 		_ADR	TOR
 2005 0c74 BD050000 		_QBRAN MMOD1
 2005      8C0C0000 
 2006 0c7c F9080000 		_ADR	NEGAT
ARM GAS  stm32eforth-fl.s 			page 40


 2007 0c80 4D060000 		_ADR	TOR
 2008 0c84 190A0000 		_ADR	DNEGA
 2009 0c88 29060000 		_ADR	RFROM
 2010              	MMOD1:
 2011 0c8c 4D060000 		_ADR	TOR
 2012 0c90 A5060000 		_ADR	DUPP
 2013 0c94 D9060000 		_ADR	ZLESS
 2014 0c98 BD050000 		_QBRAN MMOD2
 2014      A80C0000 
 2015 0ca0 3D060000 		_ADR	RAT
 2016 0ca4 69070000 		_ADR	PLUS
 2017              	MMOD2:
 2018 0ca8 29060000 		_ADR	RFROM
 2019 0cac 250C0000 		_ADR	UMMOD
 2020 0cb0 29060000 		_ADR	RFROM
 2021 0cb4 BD050000 		_QBRAN	MMOD3
 2021      C80C0000 
 2022 0cbc B5060000 		_ADR	SWAP
 2023 0cc0 F9080000 		_ADR	NEGAT
 2024 0cc4 B5060000 		_ADR	SWAP
 2025              	MMOD3:   
 2026 0cc8 1B040000 		_UNNEST
 2027              	
 2028              	//    /MOD	( n n -- r q )
 2029              	// 	Signed divide. Return mod and quotient.
 2030              	
 2031 0ccc 580C0000 		.word	_MSMOD
 2032 0cd0 04       	_SLMOD:	.byte   4
 2033 0cd1 2F4D4F44 		.ascii "/MOD"
 2034 0cd5 0000BF   		.p2align 2 	
 2035              	SLMOD:
 2036 0cd8 404700BF 		_NEST
 2037 0cdc C9060000 		_ADR	OVER
 2038 0ce0 D9060000 		_ADR	ZLESS
 2039 0ce4 B5060000 		_ADR	SWAP
 2040 0ce8 610C0000 		_ADR	MSMOD
 2041 0cec 1B040000 		_UNNEST
 2042              	
 2043              	//    MOD	 ( n n -- r )
 2044              	// 	Signed divide. Return mod only.
 2045              	
 2046 0cf0 D00C0000 		.word	_SLMOD
 2047 0cf4 03       	_MODD:	.byte  3
 2048 0cf5 4D4F44   		.ascii "MOD"
 2049              		.p2align 2 	
 2050              	MODD:
 2051 0cf8 404700BF 		_NEST
 2052 0cfc D90C0000 		_ADR	SLMOD
 2053 0d00 95060000 		_ADR	DROP
 2054 0d04 1B040000 		_UNNEST
 2055              	
 2056              	//    /	   ( n n -- q )
 2057              	// 	Signed divide. Return quotient only.
 2058              	
 2059 0d08 F40C0000 		.word	_MODD
 2060 0d0c 01       	_SLASH:	.byte  1
 2061 0d0d 2F       		.ascii "/"
ARM GAS  stm32eforth-fl.s 			page 41


 2062 0d0e 00BF     		.p2align 2 	
 2063              	SLASH:
 2064 0d10 404700BF 		_NEST
 2065 0d14 D90C0000 		_ADR	SLMOD
 2066 0d18 B5060000 		_ADR	SWAP
 2067 0d1c 95060000 		_ADR	DROP
 2068 0d20 1B040000 		_UNNEST
 2069              	
 2070              	//    */MOD	( n1 n2 n3 -- r q )
 2071              	// 	Multiply n1 and n2, then divide by n3. Return mod and quotient.
 2072              	
 2073 0d24 0C0D0000 		.word	_SLASH
 2074 0d28 05       	_SSMOD:	.byte  5
 2075 0d29 2A2F4D4F 		.ascii "*/MOD"
 2075      44
 2076 0d2e 00BF     		.p2align 2 	
 2077              	SSMOD:
 2078 0d30 404700BF 		_NEST
 2079 0d34 4D060000 		_ADR	TOR
 2080 0d38 B1070000 		_ADR	MSTAR
 2081 0d3c 29060000 		_ADR	RFROM
 2082 0d40 610C0000 		_ADR	MSMOD
 2083 0d44 1B040000 		_UNNEST
 2084              	
 2085              	//    */	  ( n1 n2 n3 -- q )
 2086              	// 	Multiply n1 by n2, then divide by n3. Return quotient only.
 2087              	
 2088 0d48 280D0000 		.word	_SSMOD
 2089 0d4c 02       	_STASL:	.byte  2
 2090 0d4d 2A2F     		.ascii "*/"
 2091 0d4f 00       		.p2align 2 	
 2092              	STASL:
 2093 0d50 404700BF 		_NEST
 2094 0d54 310D0000 		_ADR	SSMOD
 2095 0d58 B5060000 		_ADR	SWAP
 2096 0d5c 95060000 		_ADR	DROP
 2097 0d60 1B040000 		_UNNEST
 2098              	
 2099              	// **************************************************************************
 2100              	//  Miscellaneous
 2101              	
 2102              	//    ALIGNED	( b -- a )
 2103              	// 	Align address to the cell boundary.
 2104              	
 2105 0d64 4C0D0000 		.word	_STASL
 2106 0d68 07       	_ALGND:	.byte   7
 2107 0d69 414C4947 		.ascii "ALIGNED"
 2107      4E4544
 2108              		.p2align 2 	
 2109              	ALGND:
 2110 0d70 05F10305 		ADD	R5,R5,#3
 2111 0d74 6FF00304 		MVN	R4,#3
 2112 0d78 05EA0405 		AND	R5,R5,R4
 2113 0d7c FFF74ABB 		_NEXT
 2114              	
 2115              	//    >CHAR	( c -- c )
 2116              	// 	Filter non-printing characters.
ARM GAS  stm32eforth-fl.s 			page 42


 2117              	
 2118 0d80 680D0000 		.word	_ALGND
 2119 0d84 05       	_TCHAR:	.byte  5
 2120 0d85 3E434841 		.ascii ">CHAR"
 2120      52
 2121 0d8a 00BF     		.p2align 2 	
 2122              	TCHAR:
 2123 0d8c 404700BF 		_NEST
 2124 0d90 81050000 		_DOLIT  0x7F
 2124      7F000000 
 2125 0d98 E9060000 		_ADR	ANDD
 2126 0d9c A5060000 		_ADR	DUPP	// mask msb
 2127 0da0 25080000 		_ADR	BLANK
 2128 0da4 81050000 		_DOLIT 	127
 2128      7F000000 
 2129 0dac F90B0000 		_ADR	WITHI	// check for printable
 2130 0db0 E5080000 		_ADR	INVER
 2131 0db4 BD050000 		_QBRAN	TCHA1
 2131      C80D0000 
 2132 0dbc 95060000 		_ADR	DROP
 2133 0dc0 81050000 		_DOLIT 	'_'	// replace non-printables
 2133      5F000000 
 2134              	TCHA1:
 2135 0dc8 1B040000 		  _UNNEST
 2136              	
 2137              	//    DEPTH	( -- n )
 2138              	// 	Return the depth of the data stack.
 2139              	
 2140 0dcc 840D0000 		.word	_TCHAR
 2141 0dd0 05       	_DEPTH:	.byte  5
 2142 0dd1 44455054 		.ascii "DEPTH"
 2142      48
 2143 0dd6 00BF     		.p2align 2 	
 2144              	DEPTH:
 2145 0dd8 4FF49D46 		_MOV32 R6,SPP 
 2145      C2F20006 
 2146 0de0 A6EB0106 		SUB	R6,R6,R1
 2147 0de4 41F8045D 		_PUSH
 2148 0de8 4FEAA605 		ASR	R5,R6,#2
 2149 0dec FFF712BB 		_NEXT
 2150              	
 2151              	//    PICK	( ... +n -- ... w )
 2152              	// 	Copy the nth stack item to tos.
 2153              	
 2154 0df0 D00D0000 		.word	_DEPTH
 2155 0df4 04       	_PICK:	.byte  4
 2156 0df5 5049434B 		.ascii "PICK"
 2157 0df9 0000BF   		.p2align 2 	
 2158              	PICK:
 2159 0dfc 404700BF 		_NEST
 2160 0e00 C5070000 		_ADR	ONEP
 2161 0e04 39080000 		_ADR	CELLS
 2162 0e08 81060000 		_ADR	SPAT
 2163 0e0c 69070000 		_ADR	PLUS
 2164 0e10 FD050000 		_ADR	AT
 2165 0e14 1B040000 		_UNNEST
 2166              	
ARM GAS  stm32eforth-fl.s 			page 43


 2167              	// **************************************************************************
 2168              	//  Memory access
 2169              	
 2170              	//    HERE	( -- a )
 2171              	// 	Return the top of the code dictionary.
 2172              	
 2173 0e18 F40D0000 		.word	_PICK
 2174 0e1c 04       	_HERE:	.byte  4
 2175 0e1d 48455245 		.ascii "HERE"
 2176 0e21 0000BF   		.p2align 2 	
 2177              	HERE:
 2178 0e24 404700BF 		_NEST
 2179 0e28 350B0000 		_ADR	CPP
 2180 0e2c FD050000 		_ADR	AT
 2181 0e30 1B040000 		_UNNEST
 2182              		
 2183              	//    PAD	 ( -- a )
 2184              	// 	Return the address of a temporary buffer.
 2185              	
 2186 0e34 1C0E0000 		.word	_HERE
 2187 0e38 03       	_PAD:	.byte  3
 2188 0e39 504144   		.ascii "PAD"
 2189              		.p2align 2 	
 2190              	PAD:
 2191 0e3c 404700BF 		_NEST
 2192 0e40 250E0000 		_ADR	HERE
 2193 0e44 81050000 		_DOLIT 80
 2193      50000000 
 2194 0e4c 69070000 		_ADR PLUS 
 2195 0e50 1B040000 		_UNNEST
 2196              	
 2197              	//    TIB	 ( -- a )
 2198              	// 	Return the address of the terminal input buffer.
 2199              	
 2200 0e54 380E0000 		.word	_PAD
 2201 0e58 03       	_TIB:	.byte  3
 2202 0e59 544942   		.ascii "TIB"
 2203              		.p2align 2 	
 2204              	TIB:
 2205 0e5c 41F8045D 		_PUSH
 2206 0e60 1D6B     		ldr r5,[r3,#TIB_OFS]
 2207 0e62 FFF7D7BA 		_NEXT
 2208              	
 2209              	//    @EXECUTE	( a -- )
 2210              	// 	Execute vector stored in address a.
 2211              	
 2212 0e66 580E0000 		.word	_TIB
 2213 0e6a 08       	_ATEXE:	.byte   8
 2214 0e6b 40455845 		.ascii "@EXECUTE"
 2214      43555445 
 2215 0e73 00       		.p2align 2 	
 2216              	ATEXE: 
 2217 0e74 2C00     		MOVS	R4,R5
 2218 0e76 51F8045B 		_POP
 2219 0e7a 2468     		LDR	R4,[R4]
 2220 0e7c 44F00104 		ORR	R4,R4,#1
 2221 0e80 18BF     	    IT NE 
ARM GAS  stm32eforth-fl.s 			page 44


 2222 0e82 2047     		BXNE	R4
 2223 0e84 FFF7C6BA 		_NEXT
 2224              	
 2225              	//    CMOVE	( b1 b2 u -- )
 2226              	// 	Copy u bytes from b1 to b2.
 2227              	
 2228 0e88 6A0E0000 		.word	_ATEXE
 2229 0e8c 05       	_CMOVE:	.byte   5
 2230 0e8d 434D4F56 		.ascii "CMOVE"
 2230      45
 2231 0e92 00BF     		.p2align 2 	
 2232              	CMOVE:
 2233 0e94 51F8046B 		LDR	R6,[R1],#4
 2234 0e98 51F8047B 		LDR	R7,[R1],#4
 2235 0e9c 03E0     		B CMOV1
 2236              	CMOV0:
 2237 0e9e 17F8014B 		LDRB	R4,[R7],#1
 2238 0ea2 06F8014B 		STRB	R4,[R6],#1
 2239              	CMOV1:
 2240 0ea6 2D00     		MOVS	R5,R5
 2241 0ea8 02D0     		BEQ	CMOV2
 2242 0eaa A5F10105 		SUB	R5,R5,#1
 2243 0eae F6E7     		B CMOV0
 2244              	CMOV2:
 2245 0eb0 51F8045B 		_POP
 2246 0eb4 FFF7AEBA 		_NEXT
 2247              	
 2248              	//    MOVE	( a1 a2 u -- )
 2249              	// 	Copy u words from a1 to a2.
 2250              	
 2251 0eb8 8C0E0000 		.word	_CMOVE
 2252 0ebc 04       	_MOVE:	.byte   4
 2253 0ebd 4D4F5645 		.ascii "MOVE"
 2254 0ec1 0000BF   		.p2align 2 	
 2255              	MOVE:
 2256 0ec4 25F00305 		AND	R5,R5,#-4
 2257 0ec8 51F8046B 		LDR	R6,[R1],#4
 2258 0ecc 51F8047B 		LDR	R7,[R1],#4
 2259 0ed0 03E0     		B MOVE1
 2260              	MOVE0:
 2261 0ed2 57F8044B 		LDR	R4,[R7],#4
 2262 0ed6 46F8044B 		STR	R4,[R6],#4
 2263              	MOVE1:
 2264 0eda 2D00     		MOVS	R5,R5
 2265 0edc 02D0     		BEQ	MOVE2
 2266 0ede A5F10405 		SUB	R5,R5,#4
 2267 0ee2 F6E7     		B MOVE0
 2268              	MOVE2:
 2269 0ee4 51F8045B 		_POP
 2270 0ee8 FFF794BA 		_NEXT
 2271              	
 2272              	//    FILL	( b u c -- )
 2273              	// 	Fill u bytes of character c to area beginning at b.
 2274              	
 2275 0eec BC0E0000 		.word	_MOVE
 2276 0ef0 04       	_FILL:	.byte   4
 2277 0ef1 46494C4C 		.ascii "FILL"
ARM GAS  stm32eforth-fl.s 			page 45


 2278 0ef5 0000BF   		.p2align 2 	
 2279              	FILL:
 2280 0ef8 51F8046B 		LDR	R6,[R1],#4
 2281 0efc 51F8047B 		LDR	R7,[R1],#4
 2282              	FILL0:
 2283 0f00 00E0     		B FILL1
 2284 0f02 2D46     		MOV	R5,R5
 2285              	FILL1:
 2286 0f04 07F8015B 		STRB	R5,[R7],#1
 2287 0f08 3600     		MOVS	R6,R6
 2288 0f0a 02D0     		BEQ	FILL2
 2289 0f0c A6F10106 		SUB	R6,R6,#1
 2290 0f10 F6E7     		B FILL0
 2291              	FILL2:
 2292 0f12 51F8045B 		_POP
 2293 0f16 FFF77DBA 		_NEXT
 2294              	
 2295              	//    PACK$	( b u a -- a )
 2296              	// 	Build a counted word with u characters from b. Null fill.
 2297              	
 2298 0f1a F00E0000 		.word	_FILL
 2299 0f1e 05       	_PACKS:	.byte  5
 2300 0f1f 5041434B 		.ascii "PACK$$"
 2300      2424
 2301 0f25 0000BF   		.p2align 2 	
 2302              	PACKS:
 2303 0f28 404700BF 		_NEST
 2304 0f2c 710D0000 		_ADR	ALGND
 2305 0f30 A5060000 		_ADR	DUPP
 2306 0f34 4D060000 		_ADR	TOR			// strings only on cell boundary
 2307 0f38 C9060000 		_ADR	OVER
 2308 0f3c 69070000 		_ADR	PLUS
 2309 0f40 C5070000 		_ADR	ONEP
 2310 0f44 81050000 		_DOLIT 	0xFFFFFFFC
 2310      FCFFFFFF 
 2311 0f4c E9060000 		_ADR	ANDD			// count mod cell
 2312 0f50 81050000 		_DOLIT 	0
 2312      00000000 
 2313 0f58 B5060000 		_ADR	SWAP
 2314 0f5c E9050000 		_ADR	STORE			// null fill cell
 2315 0f60 3D060000 		_ADR	RAT
 2316 0f64 B5080000 		_ADR	DDUP
 2317 0f68 09060000 		_ADR	CSTOR
 2318 0f6c C5070000 		_ADR	ONEP			// save count
 2319 0f70 B5060000 		_ADR	SWAP
 2320 0f74 950E0000 		_ADR	CMOVE
 2321 0f78 29060000 		_ADR	RFROM
 2322 0f7c 1B040000 		_UNNEST   			// move string
 2323              	
 2324              	// **************************************************************************
 2325              	//  Numeric output, single precision
 2326              	
 2327              	//    DIGIT	( u -- c )
 2328              	// 	Convert digit u to a character.
 2329              	
 2330 0f80 1E0F0000 		.word	_PACKS
 2331 0f84 05       	_DIGIT:	.byte  5
ARM GAS  stm32eforth-fl.s 			page 46


 2332 0f85 44494749 		.ascii "DIGIT"
 2332      54
 2333 0f8a 00BF     		.p2align 2 	
 2334              	DIGIT:
 2335 0f8c 404700BF 		_NEST
 2336 0f90 81050000 		_DOLIT 9
 2336      09000000 
 2337 0f98 C9060000 		_ADR	OVER
 2338 0f9c 61090000 		_ADR	LESS
 2339 0fa0 81050000 		_DOLIT	7
 2339      07000000 
 2340 0fa8 E9060000 		_ADR	ANDD
 2341 0fac 69070000 		_ADR	PLUS
 2342 0fb0 81050000 		_DOLIT	'0'
 2342      30000000 
 2343 0fb8 69070000 		_ADR	PLUS 
 2344 0fbc 1B040000 		_UNNEST
 2345              	
 2346              	//    EXTRACT	( n base -- n c )
 2347              	// 	Extract the least significant digit from n.
 2348              	
 2349 0fc0 840F0000 		.word	_DIGIT
 2350 0fc4 07       	_EXTRC:	.byte  7
 2351 0fc5 45585452 		.ascii "EXTRACT"
 2351      414354
 2352              		.p2align 2 	
 2353              	EXTRC:
 2354 0fcc 404700BF 		_NEST
 2355 0fd0 81050000 		_DOLIT 0
 2355      00000000 
 2356 0fd8 B5060000 		_ADR	SWAP
 2357 0fdc 250C0000 		_ADR	UMMOD
 2358 0fe0 B5060000 		_ADR	SWAP
 2359 0fe4 8D0F0000 		_ADR	DIGIT
 2360 0fe8 1B040000 		_UNNEST
 2361              	
 2362              	//    <#	  ( -- )
 2363              	// 	Initiate the numeric output process.
 2364              	
 2365 0fec C40F0000 		.word	_EXTRC
 2366 0ff0 02       	_BDIGS:	.byte  2
 2367 0ff1 3C23     		.ascii "<#"
 2368 0ff3 00       		.p2align 2 	
 2369              	BDIGS:
 2370 0ff4 404700BF 		_NEST
 2371 0ff8 3D0E0000 		_ADR	PAD
 2372 0ffc 090B0000 		_ADR	HLD
 2373 1000 E9050000 		_ADR	STORE
 2374 1004 1B040000 		_UNNEST
 2375              	
 2376              	//    HOLD	( c -- )
 2377              	// 	Insert a character into the numeric output string.
 2378              	
 2379 1008 F00F0000 		.word	_BDIGS
 2380 100c 04       	_HOLD:	.byte  4
 2381 100d 484F4C44 		.ascii "HOLD"
 2382 1011 0000BF   		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 47


 2383              	HOLD:
 2384 1014 404700BF 		_NEST
 2385 1018 090B0000 		_ADR	HLD
 2386 101c FD050000 		_ADR	AT
 2387 1020 D5070000 		_ADR	ONEM
 2388 1024 A5060000 		_ADR	DUPP
 2389 1028 090B0000 		_ADR	HLD
 2390 102c E9050000 		_ADR	STORE
 2391 1030 09060000 		_ADR	CSTOR
 2392 1034 1B040000 		_UNNEST
 2393              	
 2394              	//    #	   ( u -- u )
 2395              	// 	Extract one digit from u and append the digit to output string.
 2396              	
 2397 1038 0C100000 		.word	_HOLD
 2398 103c 01       	_DIG:	.byte  1
 2399 103d 23       		.ascii "#"
 2400 103e 00BF     		.p2align 2 	
 2401              	DIG:
 2402 1040 404700BF 		_NEST
 2403 1044 990A0000 		_ADR	BASE
 2404 1048 FD050000 		_ADR	AT
 2405 104c CD0F0000 		_ADR	EXTRC
 2406 1050 15100000 		_ADR	HOLD
 2407 1054 1B040000 		_UNNEST
 2408              	
 2409              	//    #S	  ( u -- 0 )
 2410              	// 	Convert u until all digits are added to the output string.
 2411              	
 2412 1058 3C100000 		.word	_DIG
 2413 105c 02       	_DIGS:	.byte  2
 2414 105d 2353     		.ascii "#S"
 2415 105f 00       		.p2align 2 	
 2416              	DIGS:
 2417 1060 404700BF 		_NEST
 2418              	DIGS1:
 2419 1064 41100000 	    _ADR	DIG
 2420 1068 A5060000 		_ADR	DUPP
 2421 106c BD050000 		_QBRAN 	DIGS2
 2421      7C100000 
 2422 1074 CF050000 		_BRAN	DIGS1
 2422      64100000 
 2423              	DIGS2:
 2424 107c 1B040000 		  _UNNEST
 2425              	
 2426              	//    SIGN	( n -- )
 2427              	// 	Add a minus sign to the numeric output string.
 2428              	
 2429 1080 5C100000 		.word	_DIGS
 2430 1084 04       	_SIGN:	.byte  4
 2431 1085 5349474E 		.ascii "SIGN"
 2432 1089 0000BF   		.p2align 2 	
 2433              	SIGN:
 2434 108c 404700BF 		_NEST
 2435 1090 D9060000 		_ADR	ZLESS
 2436 1094 BD050000 		_QBRAN	SIGN1
 2436      A8100000 
ARM GAS  stm32eforth-fl.s 			page 48


 2437 109c 81050000 		_DOLIT '-'
 2437      2D000000 
 2438 10a4 15100000 		_ADR	HOLD
 2439              	SIGN1:
 2440 10a8 1B040000 		  _UNNEST
 2441              	
 2442              	//    #>	  ( w -- b u )
 2443              	// 	Prepare the output word to be TYPE'd.
 2444              	
 2445 10ac 84100000 		.word	_SIGN
 2446 10b0 02       	_EDIGS:	.byte  2
 2447 10b1 233E     		.ascii "#>"
 2448 10b3 00       		.p2align 2 	
 2449              	EDIGS:
 2450 10b4 404700BF 		_NEST
 2451 10b8 95060000 		_ADR	DROP
 2452 10bc 090B0000 		_ADR	HLD
 2453 10c0 FD050000 		_ADR	AT
 2454 10c4 3D0E0000 		_ADR	PAD
 2455 10c8 C9060000 		_ADR	OVER
 2456 10cc 79070000 		_ADR	SUBB
 2457 10d0 1B040000 		_UNNEST
 2458              	
 2459              	//    str	 ( n -- b u )
 2460              	// 	Convert a signed integer to a numeric string.
 2461              	
 2462              	// 	.word	_EDIGS
 2463              	// _STRR	.byte  3
 2464              	// 	.ascii "str"
 2465              	// 	.p2align 2 	
 2466              	STRR:
 2467 10d4 404700BF 		_NEST
 2468 10d8 A5060000 		_ADR	DUPP
 2469 10dc 4D060000 		_ADR	TOR
 2470 10e0 09090000 		_ADR	ABSS
 2471 10e4 F50F0000 		_ADR	BDIGS
 2472 10e8 61100000 		_ADR	DIGS
 2473 10ec 29060000 		_ADR	RFROM
 2474 10f0 8D100000 		_ADR	SIGN
 2475 10f4 B5100000 		_ADR	EDIGS
 2476 10f8 1B040000 		_UNNEST
 2477              	
 2478              	//    HEX	 ( -- )
 2479              	// 	Use radix 16 as base for numeric conversions.
 2480              	
 2481 10fc B0100000 		.word	_EDIGS
 2482 1100 03       	_HEX:	.byte  3
 2483 1101 484558   		.ascii "HEX"
 2484              		.p2align 2 	
 2485              	HEX:
 2486 1104 404700BF 		_NEST
 2487 1108 81050000 		_DOLIT 16
 2487      10000000 
 2488 1110 990A0000 		_ADR	BASE
 2489 1114 E9050000 		_ADR	STORE
 2490 1118 1B040000 		_UNNEST
 2491              	
ARM GAS  stm32eforth-fl.s 			page 49


 2492              	//    DECIMAL	( -- )
 2493              	// 	Use radix 10 as base for numeric conversions.
 2494              	
 2495 111c 00110000 		.word	_HEX
 2496 1120 07       	_DECIM:	.byte  7
 2497 1121 44454349 		.ascii "DECIMAL"
 2497      4D414C
 2498              		.p2align 2 	
 2499              	DECIM:
 2500 1128 404700BF 		_NEST
 2501 112c 81050000 		_DOLIT 10
 2501      0A000000 
 2502 1134 990A0000 		_ADR	BASE
 2503 1138 E9050000 		_ADR	STORE
 2504 113c 1B040000 		_UNNEST
 2505              	
 2506              	// **************************************************************************
 2507              	//  Numeric input, single precision
 2508              	
 2509              	//    DIGIT?	( c base -- u t )
 2510              	// 	Convert a character to its numeric value. A flag indicates success.
 2511              	
 2512 1140 20110000 		.word	_DECIM
 2513 1144 06       	_DIGTQ:	.byte  6
 2514 1145 44494749 		.ascii "DIGIT?"
 2514      543F
 2515 114b 00       		.p2align 2 	
 2516              	DIGTQ:
 2517 114c 404700BF 		_NEST
 2518 1150 4D060000 		_ADR	TOR
 2519 1154 81050000 		_DOLIT 	'0'
 2519      30000000 
 2520 115c 79070000 		_ADR	SUBB
 2521 1160 81050000 		_DOLIT 9
 2521      09000000 
 2522 1168 C9060000 		_ADR	OVER
 2523 116c 61090000 		_ADR	LESS
 2524 1170 BD050000 		_QBRAN	DGTQ1
 2524      98110000 
 2525 1178 81050000 		_DOLIT 7
 2525      07000000 
 2526 1180 79070000 		_ADR	SUBB
 2527 1184 A5060000 		_ADR	DUPP
 2528 1188 81050000 		_DOLIT	10
 2528      0A000000 
 2529 1190 61090000 		_ADR	LESS
 2530 1194 FD060000 		_ADR	ORR
 2531              	DGTQ1:
 2532 1198 A5060000 		_ADR	DUPP
 2533 119c 29060000 		_ADR	RFROM
 2534 11a0 49090000 		_ADR	ULESS
 2535 11a4 1B040000 		_UNNEST
 2536              	
 2537              	//    NUMBER?	( a -- n T | a F )
 2538              	// 	Convert a number word to integer. Push a flag on tos.
 2539              	
 2540 11a8 44110000 		.word	_DIGTQ
ARM GAS  stm32eforth-fl.s 			page 50


 2541 11ac 07       	_NUMBQ:	.byte  7
 2542 11ad 4E554D42 		.ascii "NUMBER?"
 2542      45523F
 2543              		.p2align 2 	
 2544              	NUMBQ:
 2545 11b4 404700BF 		_NEST
 2546 11b8 990A0000 		_ADR	BASE
 2547 11bc FD050000 		_ADR	AT
 2548 11c0 4D060000 		_ADR	TOR
 2549 11c4 81050000 		_DOLIT	0
 2549      00000000 
 2550 11cc C9060000 		_ADR	OVER
 2551 11d0 010A0000 		_ADR	COUNT
 2552 11d4 C9060000 		_ADR	OVER
 2553 11d8 1D060000 		_ADR	CAT
 2554 11dc 81050000 		_DOLIT '$'
 2554      24000000 
 2555 11e4 31090000 		_ADR	EQUAL
 2556 11e8 BD050000 		_QBRAN	NUMQ1
 2556      04120000 
 2557 11f0 05110000 		_ADR	HEX
 2558 11f4 B5060000 		_ADR	SWAP
 2559 11f8 C5070000 		_ADR	ONEP
 2560 11fc B5060000 		_ADR	SWAP
 2561 1200 D5070000 		_ADR	ONEM
 2562              	NUMQ1:
 2563 1204 C9060000 		_ADR	OVER
 2564 1208 1D060000 		_ADR	CAT
 2565 120c 81050000 		_DOLIT	'-'
 2565      2D000000 
 2566 1214 31090000 		_ADR	EQUAL
 2567 1218 4D060000 		_ADR	TOR
 2568 121c B5060000 		_ADR	SWAP
 2569 1220 3D060000 		_ADR	RAT
 2570 1224 79070000 		_ADR	SUBB
 2571 1228 B5060000 		_ADR	SWAP
 2572 122c 3D060000 		_ADR	RAT
 2573 1230 69070000 		_ADR	PLUS
 2574 1234 79080000 		_ADR	QDUP
 2575 1238 BD050000 		_QBRAN	NUMQ6
 2575      CC120000 
 2576 1240 D5070000 		_ADR	ONEM
 2577 1244 4D060000 		_ADR	TOR
 2578              	NUMQ2:
 2579 1248 A5060000 		_ADR	DUPP
 2580 124c 4D060000 		_ADR	TOR
 2581 1250 1D060000 		_ADR	CAT
 2582 1254 990A0000 		_ADR	BASE
 2583 1258 FD050000 		_ADR	AT
 2584 125c 4D110000 		_ADR	DIGTQ
 2585 1260 BD050000 		_QBRAN	NUMQ4
 2585      B0120000 
 2586 1268 B5060000 		_ADR	SWAP
 2587 126c 990A0000 		_ADR	BASE
 2588 1270 FD050000 		_ADR	AT
 2589 1274 89070000 		_ADR	STAR
 2590 1278 69070000 		_ADR	PLUS
ARM GAS  stm32eforth-fl.s 			page 51


 2591 127c 29060000 		_ADR	RFROM
 2592 1280 C5070000 		_ADR	ONEP
 2593 1284 A5050000 		_DONXT	NUMQ2
 2593      48120000 
 2594 128c 3D060000 		_ADR	RAT
 2595 1290 B5060000 		_ADR	SWAP
 2596 1294 95060000 		_ADR	DROP
 2597 1298 BD050000 		_QBRAN	NUMQ3
 2597      A4120000 
 2598 12a0 F9080000 		_ADR	NEGAT
 2599              	NUMQ3:
 2600 12a4 B5060000 		_ADR	SWAP
 2601 12a8 CF050000 		_BRAN	NUMQ5
 2601      C8120000 
 2602              	NUMQ4:
 2603 12b0 29060000 		_ADR	RFROM
 2604 12b4 29060000 		_ADR	RFROM
 2605 12b8 A1080000 		_ADR	DDROP
 2606 12bc A1080000 		_ADR	DDROP
 2607 12c0 81050000 		_DOLIT	0
 2607      00000000 
 2608              	NUMQ5:
 2609 12c8 A5060000 		_ADR	DUPP
 2610              	NUMQ6:
 2611 12cc 29060000 		_ADR	RFROM
 2612 12d0 A1080000 		_ADR	DDROP
 2613 12d4 29060000 		_ADR	RFROM
 2614 12d8 990A0000 		_ADR	BASE
 2615 12dc E9050000 		_ADR	STORE
 2616 12e0 1B040000 		_UNNEST
 2617              	
 2618              	// **************************************************************************
 2619              	//  Basic I/O
 2620              	
 2621              	//    KEY	 ( -- c )
 2622              	// 	Wait for and return an input character.
 2623              	
 2624 12e4 AC110000 		.word	_NUMBQ
 2625 12e8 03       	_KEY:	.byte  3
 2626 12e9 4B4559   		.ascii "KEY"
 2627              		.p2align 2 	
 2628              	KEY:
 2629 12ec 404700BF 		_NEST
 2630              	KEY1:
 2631 12f0 29050000 		_ADR	QRX
 2632 12f4 BD050000 		_QBRAN	KEY1
 2632      F0120000 
 2633 12fc 1B040000 		_UNNEST
 2634              	
 2635              	//    SPACE	( -- )
 2636              	// 	Send the blank character to the output device.
 2637              	
 2638 1300 E8120000 		.word	_KEY
 2639 1304 05       	_SPACE:	.byte  5
 2640 1305 53504143 		.ascii "SPACE"
 2640      45
 2641 130a 00BF     		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 52


 2642              	SPACE:
 2643 130c 404700BF 		_NEST
 2644 1310 25080000 		_ADR	BLANK
 2645 1314 5D050000 		_ADR	EMIT
 2646 1318 1B040000 		_UNNEST
 2647              	
 2648              	//    SPACES	( +n -- )
 2649              	// 	Send n spaces to the output device.
 2650              	
 2651 131c 04130000 		.word	_SPACE
 2652 1320 06       	_SPACS:	.byte  6
 2653 1321 53504143 		.ascii "SPACES"
 2653      4553
 2654 1327 00       		.p2align 2 	
 2655              	SPACS:
 2656 1328 404700BF 		_NEST
 2657 132c 81050000 		_DOLIT	0
 2657      00000000 
 2658 1334 91090000 		_ADR	MAX
 2659 1338 4D060000 		_ADR	TOR
 2660 133c CF050000 		_BRAN	CHAR2
 2660      48130000 
 2661              	CHAR1:
 2662 1344 0D130000 		_ADR	SPACE
 2663              	CHAR2:
 2664 1348 A5050000 		_DONXT	CHAR1
 2664      44130000 
 2665 1350 1B040000 		_UNNEST
 2666              	
 2667              	//    TYPE	( b u -- )
 2668              	// 	Output u characters from b.
 2669              	
 2670 1354 20130000 		.word	_SPACS
 2671 1358 04       	_TYPEE:	.byte	4
 2672 1359 54595045 		.ascii "TYPE"
 2673 135d 0000BF   		.p2align 2 	
 2674              	TYPEE:
 2675 1360 404700BF 		_NEST
 2676 1364 4D060000 		_ADR  TOR   // ( a+1 -- R: u )
 2677 1368 CF050000 		_BRAN	TYPE2
 2677      7C130000 
 2678              	TYPE1:  
 2679 1370 010A0000 		_ADR  COUNT
 2680 1374 8D0D0000 		_ADR TCHAR
 2681 1378 5D050000 		_ADR EMIT
 2682              	TYPE2:  
 2683 137c A5050000 		_DONXT	TYPE1
 2683      70130000 
 2684 1384 95060000 		_ADR	DROP
 2685 1388 1B040000 		_UNNEST
 2686              	
 2687              	//    CR	  ( -- )
 2688              	// 	Output a carriage return and a line feed.
 2689              	
 2690 138c 58130000 		.word	_TYPEE
 2691 1390 02       	_CR:	.byte  2
 2692 1391 4352     		.ascii "CR"
ARM GAS  stm32eforth-fl.s 			page 53


 2693 1393 00       		.p2align 2 	
 2694              	CR:
 2695 1394 404700BF 		_NEST
 2696 1398 81050000 		_DOLIT	CRR
 2696      0D000000 
 2697 13a0 5D050000 		_ADR	EMIT
 2698 13a4 81050000 		_DOLIT	LF
 2698      0A000000 
 2699 13ac 5D050000 		_ADR	EMIT
 2700 13b0 1B040000 		_UNNEST
 2701              	
 2702              	//    do_$	( -- a )
 2703              	// 	Return the address of a compiled string.
 2704              	//  adjust return address to skip over it.
 2705              	
 2706              	// 	.word	_CR
 2707              	// _DOSTR	.byte  COMPO+3
 2708              	// 	.ascii "do$$"
 2709              	// 	.p2align 2 	
 2710              	DOSTR:
 2711 13b4 404700BF 		_NEST     
 2712              	/* compiled string address is 2 levels deep */
 2713 13b8 29060000 		_ADR	RFROM	// { -- a1 }
 2714 13bc 29060000 		_ADR	RFROM	//  {a1 -- a1 a2 } 
 2715 13c0 A5060000 		_ADR	DUPP	// {a1 a2 -- a1 a2 a2 }
 2716 13c4 010A0000 		_ADR	COUNT	//  get addr+1 count  { a1 a2 -- a1 a2 a2+1 c }
 2717 13c8 69070000 		_ADR	PLUS	// { -- a1 a2 a2+1+c }
 2718 13cc 710D0000 		_ADR	ALGND	//  end of string
 2719              	//	_ADR	ONEP	//  restore b0, this result in return address 2 level deep.
 2720 13d0 4D060000 		_ADR	TOR		//  address after string { -- a1 a2 }
 2721 13d4 B5060000 		_ADR	SWAP	//  count tugged
 2722 13d8 4D060000 		_ADR	TOR     //  ( -- a2) is string address
 2723 13dc 1B040000 		_UNNEST
 2724              	
 2725              	//    $"|	( -- a )
 2726              	// 	Run time routine compiled by _". Return address of a compiled string.
 2727              	
 2728              	// 	.word	_DOSTR
 2729              	// _STRQP	.byte  COMPO+3
 2730              	// 	.ascii "$\"|"
 2731              	// 	.p2align 2 	
 2732              	STRQP:
 2733 13e0 404700BF 		_NEST
 2734 13e4 B5130000 		_ADR	DOSTR
 2735 13e8 1B040000 		_UNNEST			// force a call to dostr
 2736              	
 2737              	//    .$	( a -- )
 2738              	// 	Run time routine of ." . Output a compiled string.
 2739              	
 2740              	// 	.word	_STRQP
 2741              	// _DOTST	.byte  COMPO+2
 2742              	// 	.ascii ".$$"
 2743              	// 	.p2align 2 	
 2744              	DOTST:
 2745 13ec 404700BF 		_NEST
 2746 13f0 010A0000 		_ADR	COUNT // ( -- a+1 c )
 2747 13f4 61130000 		_ADR	TYPEE
ARM GAS  stm32eforth-fl.s 			page 54


 2748 13f8 1B040000 		_UNNEST
 2749              	
 2750              	//    ."|	( -- )
 2751              	// 	Run time routine of ." . Output a compiled string.
 2752              	
 2753              	// 	.word	_DOTST
 2754              	// _DOTQP	.byte  COMPO+3
 2755              	// 	.ascii ".""|"
 2756              	// 	.p2align 2 	
 2757              	DOTQP:
 2758 13fc 404700BF 		_NEST
 2759 1400 B5130000 		_ADR	DOSTR
 2760 1404 ED130000 		_ADR	DOTST
 2761 1408 1B040000 		_UNNEST
 2762              	
 2763              	//    .R	  ( n +n -- )
 2764              	// 	Display an integer in a field of n columns, right justified.
 2765              	
 2766 140c 90130000 		.word	_CR
 2767 1410 02       	_DOTR:	.byte  2
 2768 1411 2E52     		.ascii ".R"
 2769 1413 00       		.p2align 2 	
 2770              	DOTR:
 2771 1414 404700BF 		_NEST
 2772 1418 4D060000 		_ADR	TOR
 2773 141c D5100000 		_ADR	STRR
 2774 1420 29060000 		_ADR	RFROM
 2775 1424 C9060000 		_ADR	OVER
 2776 1428 79070000 		_ADR	SUBB
 2777 142c 29130000 		_ADR	SPACS
 2778 1430 61130000 		_ADR	TYPEE
 2779 1434 1B040000 		_UNNEST
 2780              	
 2781              	//    U.R	 ( u +n -- )
 2782              	// 	Display an unsigned integer in n column, right justified.
 2783              	
 2784 1438 10140000 		.word	_DOTR
 2785 143c 03       	_UDOTR:	.byte  3
 2786 143d 552E52   		.ascii "U.R"
 2787              		.p2align 2 	
 2788              	UDOTR:
 2789 1440 404700BF 		_NEST
 2790 1444 4D060000 		_ADR	TOR
 2791 1448 F50F0000 		_ADR	BDIGS
 2792 144c 61100000 		_ADR	DIGS
 2793 1450 B5100000 		_ADR	EDIGS
 2794 1454 29060000 		_ADR	RFROM
 2795 1458 C9060000 		_ADR	OVER
 2796 145c 79070000 		_ADR	SUBB
 2797 1460 29130000 		_ADR	SPACS
 2798 1464 61130000 		_ADR	TYPEE
 2799 1468 1B040000 		_UNNEST
 2800              	
 2801              	//    U.	  ( u -- )
 2802              	// 	Display an unsigned integer in free format.
 2803              	
 2804 146c 3C140000 		.word	_UDOTR
ARM GAS  stm32eforth-fl.s 			page 55


 2805 1470 02       	_UDOT:	.byte  2
 2806 1471 552E     		.ascii "U."
 2807 1473 00       		.p2align 2 	
 2808              	UDOT:
 2809 1474 404700BF 		_NEST
 2810 1478 F50F0000 		_ADR	BDIGS
 2811 147c 61100000 		_ADR	DIGS
 2812 1480 B5100000 		_ADR	EDIGS
 2813 1484 0D130000 		_ADR	SPACE
 2814 1488 61130000 		_ADR	TYPEE
 2815 148c 1B040000 		_UNNEST
 2816              	
 2817              	//    .	   ( w -- )
 2818              	// 	Display an integer in free format, preceeded by a space.
 2819              	
 2820 1490 70140000 		.word	_UDOT
 2821 1494 01       	_DOT:	.byte  1
 2822 1495 2E       		.ascii "."
 2823 1496 00BF     		.p2align 2 	
 2824              	DOT:
 2825 1498 404700BF 		_NEST
 2826 149c 990A0000 		_ADR	BASE
 2827 14a0 FD050000 		_ADR	AT
 2828 14a4 81050000 		_DOLIT 10
 2828      0A000000 
 2829 14ac 11070000 		_ADR	XORR			// ?decimal
 2830 14b0 BD050000 		_QBRAN	DOT1
 2830      C0140000 
 2831 14b8 75140000 		_ADR	UDOT
 2832 14bc 1B040000 		_UNNEST			// no,display unsigned
 2833              	DOT1:
 2834 14c0 D5100000 	    _ADR	STRR
 2835 14c4 0D130000 		_ADR	SPACE
 2836 14c8 61130000 		_ADR	TYPEE
 2837 14cc 1B040000 		_UNNEST			// yes, display signed
 2838              	
 2839              	//    ?	   ( a -- )
 2840              	// 	Display the contents in a memory cell.
 2841              	
 2842 14d0 94140000 		.word	_DOT
 2843 14d4 01       	_QUEST:	.byte  1
 2844 14d5 3F       		.ascii "?"
 2845 14d6 00BF     		.p2align 2 	
 2846              	QUEST:
 2847 14d8 404700BF 		_NEST
 2848 14dc FD050000 		_ADR	AT
 2849 14e0 99140000 		_ADR	DOT
 2850 14e4 1B040000 		_UNNEST
 2851              	
 2852              	// **************************************************************************
 2853              	//  Parsing
 2854              	
 2855              	//    parse	( b u c -- b u delta //  string> )
 2856              	// 	Scan word delimited by c. Return found string and its offset.
 2857              	
 2858              	// 	.word	_QUEST
 2859              	// _PARS	.byte  5
ARM GAS  stm32eforth-fl.s 			page 56


 2860              	// 	.ascii "parse"
 2861              	// 	.p2align 2 	
 2862              	PARS:
 2863 14e8 404700BF 		_NEST
 2864 14ec A30A0000 		_ADR	TEMP
 2865 14f0 E9050000 		_ADR	STORE
 2866 14f4 C9060000 		_ADR	OVER
 2867 14f8 4D060000 		_ADR	TOR
 2868 14fc A5060000 		_ADR	DUPP
 2869 1500 BD050000 		_QBRAN	PARS8
 2869      FC150000 
 2870 1508 D5070000 		_ADR	ONEM
 2871 150c A30A0000 		_ADR	TEMP
 2872 1510 FD050000 		_ADR	AT
 2873 1514 25080000 		_ADR	BLANK
 2874 1518 31090000 		_ADR	EQUAL
 2875 151c BD050000 		_QBRAN	PARS3
 2875      70150000 
 2876 1524 4D060000 		_ADR	TOR
 2877              	PARS1:
 2878 1528 25080000 		_ADR	BLANK
 2879 152c C9060000 		_ADR	OVER
 2880 1530 1D060000 		_ADR	CAT			// skip leading blanks 
 2881 1534 79070000 		_ADR	SUBB
 2882 1538 D9060000 		_ADR	ZLESS
 2883 153c E5080000 		_ADR	INVER
 2884 1540 BD050000 		_QBRAN	PARS2
 2884      6C150000 
 2885 1548 C5070000 		_ADR	ONEP
 2886 154c A5050000 		_DONXT	PARS1
 2886      28150000 
 2887 1554 29060000 		_ADR	RFROM
 2888 1558 95060000 		_ADR	DROP
 2889 155c 81050000 		_DOLIT	0
 2889      00000000 
 2890 1564 A5060000 		_ADR	DUPP
 2891 1568 1B040000 		_UNNEST
 2892              	PARS2:
 2893 156c 29060000 		_ADR	RFROM
 2894              	PARS3:
 2895 1570 C9060000 		_ADR	OVER
 2896 1574 B5060000 		_ADR	SWAP
 2897 1578 4D060000 		_ADR	TOR
 2898              	PARS4:
 2899 157c A30A0000 		_ADR	TEMP
 2900 1580 FD050000 		_ADR	AT
 2901 1584 C9060000 		_ADR	OVER
 2902 1588 1D060000 		_ADR	CAT
 2903 158c 79070000 		_ADR	SUBB			// scan for delimiter
 2904 1590 A30A0000 		_ADR	TEMP
 2905 1594 FD050000 		_ADR	AT
 2906 1598 25080000 		_ADR	BLANK
 2907 159c 31090000 		_ADR	EQUAL
 2908 15a0 BD050000 		_QBRAN	PARS5
 2908      AC150000 
 2909 15a8 D9060000 		_ADR	ZLESS
 2910              	PARS5:
ARM GAS  stm32eforth-fl.s 			page 57


 2911 15ac BD050000 		_QBRAN	PARS6
 2911      D0150000 
 2912 15b4 C5070000 		_ADR	ONEP
 2913 15b8 A5050000 		_DONXT	PARS4
 2913      7C150000 
 2914 15c0 A5060000 		_ADR	DUPP
 2915 15c4 4D060000 		_ADR	TOR
 2916 15c8 CF050000 		_BRAN	PARS7
 2916      E4150000 
 2917              	PARS6:
 2918 15d0 29060000 		_ADR	RFROM
 2919 15d4 95060000 		_ADR	DROP
 2920 15d8 A5060000 		_ADR	DUPP
 2921 15dc C5070000 		_ADR	ONEP
 2922 15e0 4D060000 		_ADR	TOR
 2923              	PARS7:
 2924 15e4 C9060000 		_ADR	OVER
 2925 15e8 79070000 		_ADR	SUBB
 2926 15ec 29060000 		_ADR	RFROM
 2927 15f0 29060000 		_ADR	RFROM
 2928 15f4 79070000 		_ADR	SUBB
 2929 15f8 1B040000 		_UNNEST
 2930              	PARS8:
 2931 15fc C9060000 		_ADR	OVER
 2932 1600 29060000 		_ADR	RFROM
 2933 1604 79070000 		_ADR	SUBB
 2934 1608 1B040000 		_UNNEST
 2935              	
 2936              	//    PARSE	( c -- b u //  string> )
 2937              	// 	Scan input stream and return counted string delimited by c.
 2938              	
 2939 160c D4140000 		.word	_QUEST
 2940 1610 05       	_PARSE:	.byte  5
 2941 1611 50415253 		.ascii "PARSE"
 2941      45
 2942 1616 00BF     		.p2align 2 	
 2943              	PARSE:
 2944 1618 404700BF 		_NEST
 2945 161c 4D060000 		_ADR	TOR
 2946 1620 5D0E0000 		_ADR	TIB
 2947 1624 CD0A0000 		_ADR	INN
 2948 1628 FD050000 		_ADR	AT
 2949 162c 69070000 		_ADR	PLUS			// current input buffer pointer
 2950 1630 E10A0000 		_ADR	NTIB
 2951 1634 FD050000 		_ADR	AT
 2952 1638 CD0A0000 		_ADR	INN
 2953 163c FD050000 		_ADR	AT
 2954 1640 79070000 		_ADR	SUBB			// remaining count
 2955 1644 29060000 		_ADR	RFROM
 2956 1648 E9140000 		_ADR	PARS
 2957 164c CD0A0000 		_ADR	INN
 2958 1650 B9090000 		_ADR	PSTOR
 2959 1654 1B040000 		_UNNEST
 2960              	
 2961              	//    .(	  ( -- )
 2962              	// 	Output following string up to next ) .
 2963              	
ARM GAS  stm32eforth-fl.s 			page 58


 2964 1658 10160000 		.word	_PARSE
 2965 165c 82       	_DOTPR:	.byte  IMEDD+2
 2966 165d 2E28     		.ascii ".("
 2967 165f 00       		.p2align 2 	
 2968              	DOTPR:
 2969 1660 404700BF 		_NEST
 2970 1664 81050000 		_DOLIT	')'
 2970      29000000 
 2971 166c 19160000 		_ADR	PARSE
 2972 1670 61130000 		_ADR	TYPEE
 2973 1674 1B040000 		_UNNEST
 2974              	
 2975              	//    (	   ( -- )
 2976              	// 	Ignore following string up to next ) . A comment.
 2977              	
 2978 1678 5C160000 		.word	_DOTPR
 2979 167c 81       	_PAREN:	.byte  IMEDD+1
 2980 167d 28       		.ascii "("
 2981 167e 00BF     		.p2align 2 	
 2982              	PAREN:
 2983 1680 404700BF 		_NEST
 2984 1684 81050000 		_DOLIT	')'
 2984      29000000 
 2985 168c 19160000 		_ADR	PARSE
 2986 1690 A1080000 		_ADR	DDROP
 2987 1694 1B040000 		_UNNEST
 2988              	
 2989              	//    \	   ( -- )
 2990              	// 	Ignore following text till the end of line.
 2991              	
 2992 1698 7C160000 		.word	_PAREN
 2993 169c 81       	_BKSLA:	.byte  IMEDD+1
 2994 169d 5C       		.byte	'\\'
 2995 169e 00BF     		.p2align 2 	
 2996              	BKSLA:
 2997 16a0 404700BF 		_NEST
 2998 16a4 E10A0000 		_ADR	NTIB
 2999 16a8 FD050000 		_ADR	AT
 3000 16ac CD0A0000 		_ADR	INN
 3001 16b0 E9050000 		_ADR	STORE
 3002 16b4 1B040000 		_UNNEST
 3003              	
 3004              	//    CHAR	( -- c )
 3005              	// 	Parse next word and return its first character.
 3006              	
 3007 16b8 9C160000 		.word	_BKSLA
 3008 16bc 04       	_CHAR:	.byte  4
 3009 16bd 43484152 		.ascii "CHAR"
 3010 16c1 0000BF   		.p2align 2 	
 3011              	CHAR:
 3012 16c4 404700BF 		_NEST
 3013 16c8 25080000 		_ADR	BLANK
 3014 16cc 19160000 		_ADR	PARSE
 3015 16d0 95060000 		_ADR	DROP
 3016 16d4 1D060000 		_ADR	CAT
 3017 16d8 1B040000 		_UNNEST
 3018              	
ARM GAS  stm32eforth-fl.s 			page 59


 3019              	//    WORD	( c -- a //  string> )
 3020              	// 	Parse a word from input stream and copy it to code dictionary.
 3021              	
 3022 16dc BC160000 		.word	_CHAR
 3023 16e0 04       	_WORDD:	.byte  4
 3024 16e1 574F5244 		.ascii "WORD"
 3025 16e5 0000BF   		.p2align 2 	
 3026              	WORDD:
 3027 16e8 404700BF 		_NEST
 3028 16ec 19160000 		_ADR	PARSE
 3029 16f0 250E0000 		_ADR	HERE
 3030 16f4 05080000 		_ADR	CELLP
 3031 16f8 290F0000 		_ADR	PACKS
 3032 16fc 1B040000 		_UNNEST
 3033              	
 3034              	//    TOKEN	( -- a //  string> )
 3035              	// 	Parse a word from input stream and copy it to name dictionary.
 3036              	
 3037 1700 E0160000 		.word	_WORDD
 3038 1704 05       	_TOKEN:	.byte  5
 3039 1705 544F4B45 		.ascii "TOKEN"
 3039      4E
 3040 170a 00BF     		.p2align 2 	
 3041              	TOKEN:
 3042 170c 404700BF 		_NEST
 3043 1710 25080000 		_ADR	BLANK
 3044 1714 E9160000 		_ADR	WORDD
 3045 1718 1B040000 		_UNNEST
 3046              	
 3047              	// **************************************************************************
 3048              	//  Dictionary search
 3049              	
 3050              	//    NAME>	( na -- ca )
 3051              	// 	Return a code address given a name address.
 3052              	
 3053 171c 04170000 		.word	_TOKEN
 3054 1720 05       	_NAMET:	.byte  5
 3055 1721 4E414D45 		.ascii "NAME>"
 3055      3E
 3056 1726 00BF     		.p2align 2 	
 3057              	NAMET:
 3058 1728 404700BF 		_NEST
 3059 172c 010A0000 		_ADR	COUNT
 3060 1730 81050000 		_DOLIT	0x1F
 3060      1F000000 
 3061 1738 E9060000 		_ADR	ANDD
 3062 173c 69070000 		_ADR	PLUS
 3063 1740 710D0000 		_ADR	ALGND
 3064 1744 1B040000 		_UNNEST
 3065              	
 3066              	//    SAME?	( a1 a2 u -- a1 a2 f | -0+ )
 3067              	// 	Compare u bytes in two strings. Return 0 if identical.
 3068              	//
 3069              	//  Picatout 2020-12-01, 
 3070              	//      Because of problem with .align directive that
 3071              	// 		doesn't fill with zero's I had to change the "SAME?" and "FIND" 
 3072              	// 		words  to do a byte by byte comparison. 
ARM GAS  stm32eforth-fl.s 			page 60


 3073              	//
 3074 1748 20170000 		.word	_NAMET
 3075 174c 05       	_SAMEQ:	.byte  5
 3076 174d 53414D45 		.ascii "SAME?"
 3076      3F
 3077 1752 00BF     		.p2align 2	
 3078              	SAMEQ:
 3079 1754 404700BF 		_NEST
 3080 1758 4D060000 		_ADR	TOR
 3081 175c CF050000 		_BRAN	SAME2
 3081      A0170000 
 3082              	SAME1:
 3083 1764 C9060000 		_ADR	OVER  // ( a1 a2 -- a1 a2 a1 )
 3084 1768 3D060000 		_ADR	RAT   // a1 a2 a1 u 
 3085 176c 69070000 		_ADR	PLUS  // a1 a2 a1+u 
 3086 1770 1D060000 		_ADR	CAT	   // a1 a2 c1    		
 3087 1774 C9060000 		_ADR	OVER  // a1 a2 c1 a2 
 3088 1778 3D060000 		_ADR	RAT    
 3089 177c 69070000 		_ADR	PLUS    
 3090 1780 1D060000 		_ADR	CAT	  // a1 a2 c1 c2
 3091 1784 79070000 		_ADR	SUBB  
 3092 1788 79080000 		_ADR	QDUP
 3093 178c BD050000 		_QBRAN	SAME2
 3093      A0170000 
 3094 1794 29060000 		_ADR	RFROM
 3095 1798 95060000 		_ADR	DROP
 3096 179c 1B040000 		_UNNEST	// strings not equal
 3097              	SAME2:
 3098 17a0 A5050000 		_DONXT	SAME1
 3098      64170000 
 3099 17a8 81050000 		_DOLIT	0
 3099      00000000 
 3100 17b0 1B040000 		_UNNEST	// strings equal
 3101              	
 3102              	//    find	( a na -- ca na | a F )
 3103              	// 	Search a vocabulary for a string. Return ca and na if succeeded.
 3104              	
 3105              	//  Picatout 2020-12-01,  
 3106              	//		Modified from original. See comment for word "SAME?" 
 3107              	
 3108              	// 	.word	_SAMEQ
 3109              	// _FIND	.byte  4
 3110              	// 	.ascii "find"
 3111              	// 	.p2align 2 	
 3112              	FIND:
 3113 17b4 404700BF 		_NEST
 3114 17b8 B5060000 		_ADR	SWAP			// na a	
 3115 17bc 010A0000 		_ADR	COUNT			// na a+1 count
 3116 17c0 A5060000 		_ADR	DUPP 
 3117 17c4 A30A0000 		_ADR	TEMP
 3118 17c8 E9050000 		_ADR	STORE			// na a+1 count 
 3119 17cc 4D060000 		_ADR  TOR		// na a+1  R: count  
 3120 17d0 B5060000 		_ADR	SWAP			// a+1 na
 3121              	FIND1:
 3122 17d4 A5060000 		_ADR	DUPP			// a+1 na na
 3123 17d8 BD050000 		_QBRAN	FIND6	// end of vocabulary
 3123      2C180000 
ARM GAS  stm32eforth-fl.s 			page 61


 3124 17e0 A5060000 		_ADR	DUPP			// a+1 na na
 3125 17e4 1D060000 		_ADR	CAT			// a+1 na name1
 3126 17e8 81050000 		_DOLIT	MASKK
 3126      1FFFFFFF 
 3127 17f0 E9060000 		_ADR	ANDD
 3128 17f4 3D060000 		_ADR	RAT			// a+1 na name1 count 
 3129 17f8 11070000 		_ADR	XORR			// a+1 na,  same length?
 3130 17fc BD050000 		_QBRAN	FIND2
 3130      14180000 
 3131 1804 15080000 		_ADR	CELLM			// a+1 la
 3132 1808 FD050000 		_ADR	AT			// a+1 next_na
 3133 180c CF050000 		_BRAN	FIND1			// try next word
 3133      D4170000 
 3134              	FIND2:   
 3135 1814 C5070000 		_ADR	ONEP			// a+1 na+1
 3136 1818 A30A0000 		_ADR	TEMP
 3137 181c FD050000 		_ADR	AT			// a+1 na+1 count
 3138 1820 55170000 		_ADR	SAMEQ		// a+1 na+1 ? 
 3139              	FIND3:	
 3140 1824 CF050000 		_BRAN	FIND4
 3140      44180000 
 3141              	FIND6:	
 3142 182c 29060000 		_ADR	RFROM			// a+1 0 name1 -- , no match
 3143 1830 95060000 		_ADR	DROP			// a+1 0
 3144 1834 B5060000 		_ADR	SWAP			// 0 a+1
 3145 1838 D5070000 		_ADR	ONEM			// 0 a
 3146 183c B5060000 		_ADR	SWAP			// a 0 
 3147 1840 1B040000 		_UNNEST			// return without a match
 3148              	FIND4:	
 3149 1844 BD050000 		_QBRAN	FIND5			// a+1 na+1
 3149      60180000 
 3150 184c D5070000 		_ADR	ONEM			// a+1 na
 3151 1850 15080000 		_ADR	CELLM			// a+4 la
 3152 1854 FD050000 		_ADR	AT			// a+1 next_na
 3153 1858 CF050000 		_BRAN	FIND1			// compare next name
 3153      D4170000 
 3154              	FIND5:	
 3155 1860 29060000 		_ADR	RFROM			// a+1 na+1 count
 3156 1864 95060000 		_ADR	DROP			// a+1 na+1
 3157 1868 B5060000 		_ADR	SWAP			// na+1 a+1
 3158 186c 95060000 		_ADR	DROP			// na+1
 3159 1870 D5070000 		_ADR	ONEM			// na
 3160 1874 A5060000 		_ADR	DUPP			// na na
 3161 1878 29170000 		_ADR	NAMET			// na ca
 3162 187c B5060000 		_ADR	SWAP			// ca na
 3163 1880 1B040000 		_UNNEST			//  return with a match
 3164              	
 3165              	//    NAME?	( a -- ca na | a F )
 3166              	// 	Search all context vocabularies for a string.
 3167              	
 3168 1884 4C170000 		.word	_SAMEQ
 3169 1888 05       	_NAMEQ:	.byte  5
 3170 1889 4E414D45 		.ascii "NAME?"
 3170      3F
 3171 188e 00BF     		.p2align 2 	
 3172              	NAMEQ:
 3173 1890 404700BF 		_NEST
ARM GAS  stm32eforth-fl.s 			page 62


 3174 1894 210B0000 		_ADR	CNTXT
 3175 1898 FD050000 		_ADR	AT
 3176 189c B5170000 		_ADR	FIND
 3177 18a0 1B040000 		_UNNEST
 3178              	
 3179              	// **************************************************************************
 3180              	//  Terminal input
 3181              	
 3182              	//    	  ( bot eot cur -- bot eot cur )
 3183              	// 	Backup the cursor by one character.
 3184              	
 3185              	// 	.word	_NAMEQ
 3186              	// _BKSP	.byte  2
 3187              	// 	.ascii "^H"
 3188              	// 	.p2align 2 	
 3189              	BKSP:
 3190 18a4 404700BF 		_NEST
 3191 18a8 4D060000 		_ADR	TOR
 3192 18ac C9060000 		_ADR	OVER
 3193 18b0 29060000 		_ADR	RFROM
 3194 18b4 B5060000 		_ADR	SWAP
 3195 18b8 C9060000 		_ADR	OVER
 3196 18bc 11070000 		_ADR	XORR
 3197 18c0 BD050000 		_QBRAN	BACK1
 3197      EC180000 
 3198 18c8 81050000 		_DOLIT	BKSPP
 3198      08000000 
 3199 18d0 5D050000 		_ADR	TECHO
 3200 18d4 D5070000 		_ADR	ONEM
 3201 18d8 25080000 		_ADR	BLANK
 3202 18dc 5D050000 		_ADR	TECHO
 3203 18e0 81050000 		_DOLIT	BKSPP
 3203      08000000 
 3204 18e8 5D050000 		_ADR	TECHO
 3205              	BACK1:
 3206 18ec 1B040000 		  _UNNEST
 3207              	
 3208              	//    TAP	 ( bot eot cur c -- bot eot cur )
 3209              	// 	Accept and echo the key stroke and bump the cursor.
 3210              	
 3211              	// 	.word	_BKSP
 3212              	// _TAP	.byte  3
 3213              	// 	.ascii "TAP"
 3214              	// 	.p2align 2 	
 3215              	TAP:
 3216 18f0 404700BF 		_NEST
 3217 18f4 A5060000 		_ADR	DUPP
 3218 18f8 5D050000 		_ADR	TECHO
 3219 18fc C9060000 		_ADR	OVER
 3220 1900 09060000 		_ADR	CSTOR
 3221 1904 C5070000 		_ADR	ONEP
 3222 1908 1B040000 		_UNNEST
 3223              	
 3224              	//    kTAP	( bot eot cur c -- bot eot cur )
 3225              	// 	Process a key stroke, CR or backspace.
 3226              	
 3227              	// 	.word	_TAP
ARM GAS  stm32eforth-fl.s 			page 63


 3228              	// _KTAP	.byte  4
 3229              	// 	.ascii "kTAP"
 3230              	// 	.p2align 2 	
 3231              	KTAP:
 3232              	TTAP:
 3233 190c 404700BF 		_NEST
 3234 1910 A5060000 		_ADR	DUPP
 3235 1914 81050000 		_DOLIT	CRR
 3235      0D000000 
 3236 191c 11070000 		_ADR	XORR
 3237 1920 BD050000 		_QBRAN  KTAP2
 3237      50190000 
 3238 1928 81050000 		_DOLIT	BKSPP
 3238      08000000 
 3239 1930 11070000 		_ADR	XORR
 3240 1934 BD050000 		_QBRAN	KTAP1
 3240      48190000 
 3241 193c 25080000 		_ADR	BLANK
 3242 1940 F1180000 		_ADR	TAP
 3243 1944 1B040000 		_UNNEST
 3244              	//	.word	0			// patch
 3245              	KTAP1:
 3246 1948 A5180000 		_ADR	BKSP
 3247 194c 1B040000 		_UNNEST
 3248              	KTAP2:
 3249 1950 95060000 		_ADR	DROP
 3250 1954 B5060000 		_ADR	SWAP
 3251 1958 95060000 		_ADR	DROP
 3252 195c A5060000 		_ADR	DUPP
 3253 1960 1B040000 		_UNNEST
 3254              	
 3255              	//    ACCEPT	( b u -- b u )
 3256              	// 	Accept characters to input buffer. Return with actual count.
 3257              	
 3258 1964 88180000 		.word	_NAMEQ
 3259 1968 06       	_ACCEP:	.byte  6
 3260 1969 41434345 		.ascii "ACCEPT"
 3260      5054
 3261 196f 00       		.p2align 2 	
 3262              	ACCEP:
 3263 1970 404700BF 		_NEST
 3264 1974 C9060000 		_ADR	OVER
 3265 1978 69070000 		_ADR	PLUS
 3266 197c C9060000 		_ADR	OVER
 3267              	ACCP1:
 3268 1980 B5080000 		_ADR	DDUP
 3269 1984 11070000 		_ADR	XORR
 3270 1988 BD050000 		_QBRAN	ACCP4
 3270      C8190000 
 3271 1990 ED120000 		_ADR	KEY
 3272 1994 A5060000 		_ADR	DUPP
 3273 1998 25080000 		_ADR	BLANK
 3274 199c 81050000 		_DOLIT 127
 3274      7F000000 
 3275 19a4 F90B0000 		_ADR	WITHI
 3276 19a8 BD050000 		_QBRAN	ACCP2
 3276      BC190000 
ARM GAS  stm32eforth-fl.s 			page 64


 3277 19b0 F1180000 		_ADR	TAP
 3278 19b4 CF050000 		_BRAN	ACCP3
 3278      C0190000 
 3279              	ACCP2:
 3280 19bc 0D190000 		_ADR	KTAP
 3281              	ACCP3:	  
 3282 19c0 CF050000 		_BRAN	ACCP1
 3282      80190000 
 3283              	ACCP4:
 3284 19c8 95060000 		_ADR	DROP
 3285 19cc C9060000 		_ADR	OVER
 3286 19d0 79070000 		_ADR	SUBB
 3287 19d4 1B040000 		_UNNEST
 3288              	
 3289              	//    QUERY	( -- )
 3290              	// 	Accept input stream to terminal input buffer.
 3291              	
 3292 19d8 68190000 		.word	_ACCEP
 3293 19dc 05       	_QUERY:	.byte  5
 3294 19dd 51554552 		.ascii "QUERY"
 3294      59
 3295 19e2 00BF     		.p2align 2 	
 3296              	QUERY:
 3297 19e4 404700BF 		_NEST
 3298 19e8 5D0E0000 		_ADR	TIB
 3299 19ec 81050000 		_DOLIT 80
 3299      50000000 
 3300 19f4 71190000 		_ADR	ACCEP
 3301 19f8 E10A0000 		_ADR	NTIB
 3302 19fc E9050000 		_ADR	STORE
 3303 1a00 95060000 		_ADR	DROP
 3304 1a04 81050000 		_DOLIT	0
 3304      00000000 
 3305 1a0c CD0A0000 		_ADR	INN
 3306 1a10 E9050000 		_ADR	STORE
 3307 1a14 1B040000 		_UNNEST
 3308              	
 3309              	// **************************************************************************
 3310              	//  Error handling
 3311              	
 3312              	//    ABORT	( a -- )
 3313              	// 	Reset data stack and jump to QUIT.
 3314              	
 3315 1a18 DC190000 		.word	_QUERY
 3316 1a1c 05       	_ABORT:	.byte  5
 3317 1a1d 41424F52 		.ascii "ABORT"
 3317      54
 3318 1a22 00BF     		.p2align 2 	
 3319              	ABORT:
 3320 1a24 404700BF 		_NEST
 3321              	ABORT1:
 3322 1a28 0D130000 		_ADR	SPACE
 3323 1a2c 010A0000 		_ADR	COUNT
 3324 1a30 61130000 		_ADR	TYPEE
 3325 1a34 81050000 		_DOLIT	0X3F
 3325      3F000000 
 3326 1a3c 5D050000 		_ADR	EMIT
ARM GAS  stm32eforth-fl.s 			page 65


 3327 1a40 95130000 		_ADR	CR
 3328 1a44 AD1B0000 		_ADR	PRESE
 3329 1a48 CF050000 		_BRAN	QUIT
 3329      CC1B0000 
 3330              	
 3331              	//    _abort"	( f -- )
 3332              	// 	Run time routine of ABORT" . Abort with a message.
 3333              	
 3334              	// 	.word	_ABORT
 3335              	// _ABORQ	.byte  COMPO+6
 3336              	// 	.ascii "abort\""
 3337              	// 	.p2align 2 	
 3338              	ABORQ:
 3339 1a50 404700BF 		_NEST
 3340 1a54 B5130000 		_ADR	DOSTR
 3341 1a58 B5060000 		_ADR	SWAP 
 3342 1a5c BD050000 		_QBRAN	1f	// text flag
 3342      6C1A0000 
 3343 1a64 CF050000 		_BRAN	ABORT1
 3343      281A0000 
 3344              	1:
 3345 1a6c 95060000 		_ADR	DROP
 3346 1a70 1B040000 		_UNNEST			// drop error
 3347              	
 3348              	// **************************************************************************
 3349              	//  The text interpreter
 3350              	
 3351              	//    $INTERPRET  ( a -- )
 3352              	// 	Interpret a word. If failed, try to convert it to an integer.
 3353              	
 3354 1a74 1C1A0000 		.word	_ABORT
 3355 1a78 0A       	_INTER:	.byte  10
 3356 1a79 2424494E 		.ascii "$$INTERPRET"
 3356      54455250 
 3356      524554
 3357              		.p2align 2 	
 3358              	INTER:
 3359 1a84 404700BF 		_NEST
 3360 1a88 91180000 		_ADR	NAMEQ
 3361 1a8c 79080000 		_ADR	QDUP	// ?defined
 3362 1a90 BD050000 		_QBRAN	INTE1
 3362      C41A0000 
 3363 1a98 FD050000 		_ADR	AT
 3364 1a9c 81050000 		_DOLIT	COMPO
 3364      40000000 
 3365 1aa4 E9060000 		_ADR	ANDD	// ?compile only lexicon bits
 3366 1aa8 511A0000 		_ABORQ	13," compile only"
 3366      0D20636F 
 3366      6D70696C 
 3366      65206F6E 
 3366      6C7900BF 
 3367 1abc 99050000 		_ADR	EXECU
 3368 1ac0 1B040000 		_UNNEST			// execute defined word
 3369              	INTE1:
 3370 1ac4 B5110000 		_ADR	NUMBQ
 3371 1ac8 BD050000 		_QBRAN	INTE2
 3371      D41A0000 
ARM GAS  stm32eforth-fl.s 			page 66


 3372 1ad0 1B040000 		_UNNEST
 3373              	INTE2:
 3374 1ad4 251A0000 		_ADR	ABORT	// error
 3375              	
 3376              	//    [	   ( -- )
 3377              	// 	Start the text interpreter.
 3378              	
 3379 1ad8 781A0000 		.word	_INTER
 3380 1adc 81       	_LBRAC:	.byte  IMEDD+1
 3381 1add 5B       		.ascii "["
 3382 1ade 00BF     		.p2align 2 	
 3383              	LBRAC:
 3384 1ae0 404700BF 		_NEST
 3385 1ae4 81050000 		_DOLIT	INTER
 3385      841A0000 
 3386 1aec F50A0000 		_ADR	TEVAL
 3387 1af0 E9050000 		_ADR	STORE
 3388 1af4 1B040000 		_UNNEST
 3389              	
 3390              	//    .OK	 ( -- )
 3391              	// 	Display "ok" only while interpreting.
 3392              	
 3393 1af8 DC1A0000 		.word	_LBRAC
 3394 1afc 03       	_DOTOK:	.byte  3
 3395 1afd 2E4F4B   		.ascii ".OK"
 3396              		.p2align 2 	
 3397              	DOTOK:
 3398 1b00 404700BF 		_NEST
 3399 1b04 81050000 		_DOLIT	INTER
 3399      841A0000 
 3400 1b0c F50A0000 		_ADR	TEVAL
 3401 1b10 FD050000 		_ADR	AT
 3402 1b14 31090000 		_ADR	EQUAL
 3403 1b18 BD050000 		_QBRAN	DOTO1
 3403      281B0000 
 3404 1b20 FD130000 		_DOTQP	3," ok"
 3404      03206F6B 
 3405              	DOTO1:
 3406 1b28 95130000 		_ADR	CR
 3407 1b2c 1B040000 		_UNNEST
 3408              	
 3409              	//    ?STACK	( -- )
 3410              	// 	Abort if the data stack underflows.
 3411              	
 3412 1b30 FC1A0000 		.word	_DOTOK
 3413 1b34 06       	_QSTAC:	.byte  6
 3414 1b35 3F535441 		.ascii "?STACK"
 3414      434B
 3415 1b3b 00       		.p2align 2 	
 3416              	QSTAC:
 3417 1b3c 404700BF 		_NEST
 3418 1b40 D90D0000 		_ADR	DEPTH
 3419 1b44 D9060000 		_ADR	ZLESS	// check only for underflow
 3420 1b48 511A0000 		_ABORQ	9,"underflow"
 3420      09756E64 
 3420      6572666C 
 3420      6F7700BF 
ARM GAS  stm32eforth-fl.s 			page 67


 3421 1b58 1B040000 		_UNNEST
 3422              	
 3423              	//    EVAL	( -- )
 3424              	// 	Interpret the input stream.
 3425              	
 3426 1b5c 341B0000 		.word	_QSTAC
 3427 1b60 04       	_EVAL:	.byte  4
 3428 1b61 4556414C 		.ascii "EVAL"
 3429 1b65 0000BF   		.p2align 2 	
 3430              	EVAL:
 3431 1b68 404700BF 		_NEST
 3432              	EVAL1:
 3433 1b6c 0D170000 	    _ADR	TOKEN
 3434 1b70 A5060000 		_ADR	DUPP
 3435 1b74 1D060000 		_ADR	CAT	// ?input stream empty
 3436 1b78 BD050000 		_QBRAN	EVAL2
 3436      941B0000 
 3437 1b80 F50A0000 		_ADR	TEVAL
 3438 1b84 750E0000 		_ADR	ATEXE
 3439 1b88 3D1B0000 		_ADR	QSTAC	// evaluate input, check stack
 3440 1b8c CF050000 		_BRAN	EVAL1
 3440      6C1B0000 
 3441              	EVAL2:
 3442 1b94 95060000 		_ADR	DROP
 3443 1b98 011B0000 		_ADR	DOTOK
 3444 1b9c 1B040000 		_UNNEST	// prompt
 3445              	
 3446              	//    PRESET	( -- )
 3447              	// 	Reset data stack pointer and the terminal input buffer.
 3448              	
 3449 1ba0 601B0000 		.word	_EVAL
 3450 1ba4 06       	_PRESE:	.byte  6
 3451 1ba5 50524553 		.ascii "PRESET"
 3451      4554
 3452 1bab 00       		.p2align 2 	
 3453              	PRESE:
 3454 1bac 404700BF 		_NEST 
 3455 1bb0 81050000 		_DOLIT SPP 
 3455      804E0020 
 3456 1bb8 71060000 		_ADR SPSTOR 
 3457 1bbc 1B040000 		_UNNEST 
 3458              	
 3459              	//    QUIT	( -- )
 3460              	// 	Reset return stack pointer and start text interpreter.
 3461              	
 3462 1bc0 A41B0000 		.word	_PRESE
 3463 1bc4 04       	_QUIT:	.byte  4
 3464 1bc5 51554954 		.ascii "QUIT"
 3465 1bc9 0000BF   		.p2align 2 	
 3466              	QUIT:
 3467 1bcc 81050000 		_DOLIT RPP 
 3467      804F0020 
 3468 1bd4 61060000 		_ADR RPSTOR 
 3469              	QUIT1:
 3470 1bd8 E11A0000 		_ADR	LBRAC			// start interpretation
 3471              	QUIT2:
 3472 1bdc E5190000 		_ADR	QUERY			// get input
ARM GAS  stm32eforth-fl.s 			page 68


 3473 1be0 691B0000 		_ADR	EVAL
 3474 1be4 CF050000 		_BRAN	QUIT2	// continue till error
 3474      DC1B0000 
 3475              	
 3476              	/***************************
 3477              	//  Flash memory interface
 3478              	***************************/
 3479              		.p2align 2 
 3480              	unlock:	//  unlock flash memory	
 3481 1bec DFF81474 		ldr	r7, flash_regs 
 3482 1bf0 4FF03406 		mov r6,#(0xD<<2) // clear EOP|WRPRTERR|PGERR bits 
 3483 1bf4 FE60     		str r6,[r7,#FLASH_SR]
 3484 1bf6 3E69     		ldr r6,[r7,#FLASH_CR]
 3485 1bf8 16F0800F 		tst r6,#(1<<7)
 3486 1bfc 06D0     		beq 1f 
 3487 1bfe DFF80864 		ldr	r6, flash_regs+4 // key1
 3488 1c02 7E60     		str	r6, [r7, #FLASH_KEYR]
 3489 1c04 DFF80464 		ldr	r6, flash_regs+8 // key2 
 3490 1c08 7E60     		str	r6, [r7, #FLASH_KEYR]
 3491 1c0a EFE7     		b unlock 
 3492              		/* unlock option registers */
 3493              	/*	
 3494              		ldr	r6, flash_regs+4 
 3495              		str	r6, [r7, #FLASH_OPTKEYR]
 3496              		ldr	r6, flash_regs+8
 3497              		str	r6, [r7, #FLASH_OPTKEYR]
 3498              	*/
 3499 1c0c 7047     	1:	bx lr 
 3500              	
 3501 1c0e 00BF     		.p2align 2 
 3502              	WAIT_BSY:
 3503 1c10 FC4F     		ldr	r7,flash_regs
 3504              	WAIT1:
 3505 1c12 FE68     		ldr	r6, [r7, #FLASH_SR]	//  FLASH_SR
 3506 1c14 16F00106 		ands	r6, #0x1	//  BSY
 3507 1c18 FBD1     		bne	WAIT1
 3508 1c1a 7047     		_RET 
 3509              		
 3510              		.p2align 2
 3511              	
 3512              	//    ERASE_PAGE	   ( adr -- F )
 3513              	// 	  Erase one page of flash memory.
 3514              	//    stm32f103 page size is 1024 bytes 
 3515              	//    adr is any address inside page to erase 
 3516              	//	  return success|fail flag 
 3517              	
 3518 1c1c C41B0000 		.word _QUIT  
 3519 1c20 0A       	_EPAGE:	.byte  10
 3520 1c21 45524153 		.ascii "ERASE_PAGE"
 3520      455F5041 
 3520      4745
 3521 1c2b 00       		.p2align 2 	
 3522              	
 3523              	EPAGE: 	//  page --
 3524 1c2c F54F     		ldr r7,flash_regs 	 
 3525 1c2e 4FF00206 		mov r6,#2 // set PER bit 
 3526 1c32 3E61     		str r6,[r7,#FLASH_CR]
ARM GAS  stm32eforth-fl.s 			page 69


 3527 1c34 7D61     		str r5,[r7,#FLASH_AR] // page to erase address 
 3528 1c36 3E69     		ldr	r6,[r7, #FLASH_CR]	
 3529 1c38 46F04006 		orr	R6,#0x40	//  set STRT bit   
 3530 1c3c 3E61     		str	r6,[r7, #FLASH_CR]	//  start erasing
 3531 1c3e 00B5FFF7 	 	_CALL	WAIT_BSY // wait until done
 3531      E6FF5DF8 
 3531      04EB
 3532 1c48 FD68     		ldr r5,[r7,#FLASH_SR] // check for errors 
 3533 1c4a 05F01405 		and r5,r5,#(5<<2)
 3534 1c4e FEF7E1BB 		_NEXT 
 3535              	
 3536 1c52 00BF     		.p2align 2 
 3537              	// store 16 bit word
 3538              	// expect flash unlocked
 3539              	// return success|fail flag   
 3540              	HWORD_WRITE: // ( hword address -- f  )
 3541 1c54 EB4F     		ldr r7,flash_regs 
 3542 1c56 3C69     		ldr	r4, [r7, #FLASH_CR]	//  FLASH_CR
 3543 1c58 4FF00104 		mov r4,#1 // set PG 
 3544 1c5c 3C61     		str r4,[r7,#FLASH_CR]
 3545 1c5e 2E46     		mov r6,r5 
 3546 1c60 51F8045B 		_POP 
 3547 1c64 3580     		strh r5,[r6] 
 3548 1c66 00B5FFF7 		_CALL WAIT_BSY 
 3548      D2FF5DF8 
 3548      04EB
 3549 1c70 FD68     		ldr r5,[r7,#FLASH_SR]
 3550 1c72 05F01405 		and r5,r5,#(5<<2) 
 3551 1c76 FEF7CDBB 		_NEXT 
 3552              	
 3553 1c7a 00BF     		.p2align 2 
 3554              	//    I!	   ( data address -- )
 3555              	// 	   Write one word into flash memory
 3556              	//	   address must even 
 3557              	
 3558 1c7c 201C0000 		.word	_EPAGE
 3559 1c80 02       	_ISTOR:	.byte  2
 3560 1c81 4921     		.ascii "I!"
 3561 1c83 00       		.p2align 2 	
 3562              	ISTOR:	//  data address --
 3563 1c84 404700BF 		_NEST 
 3564 1c88 B5080000 		_ADR DDUP 
 3565 1c8c 4D060000 		_ADR TOR 
 3566 1c90 4D060000 		_ADR TOR 
 3567 1c94 551C0000 		_ADR HWORD_WRITE
 3568 1c98 BD050000 		_QBRAN 1f 
 3568      B41C0000 
 3569 1ca0 511A0000 	0:	_ABORQ 10, "write failed"
 3569      0A777269 
 3569      74652066 
 3569      61696C65 
 3569      640000BF 
 3570 1cb4 29060000 	1:	_ADR RFROM
 3571 1cb8 81050000 		_DOLIT 65536 
 3571      00000100 
 3572 1cc0 110D0000 		_ADR  SLASH
 3573 1cc4 29060000 		_ADR RFROM 
ARM GAS  stm32eforth-fl.s 			page 70


 3574 1cc8 81050000 		_DOLIT 2 
 3574      02000000 
 3575 1cd0 69070000 		_ADR PLUS 
 3576 1cd4 551C0000 		_ADR HWORD_WRITE 
 3577 1cd8 BD050000 		_QBRAN 2f
 3577      E81C0000 
 3578 1ce0 CF050000 		_BRAN 0b 
 3578      A01C0000 
 3579 1ce8 1B040000 	2:	_UNNEST
 3580              	
 3581              	// IMG_SIZE ( -- u )
 3582              	// return flash pages required to save 
 3583              	// user ram  
 3584 1cec 801C0000 		.word _ISTOR 
 3585 1cf0 08       	_IMG_SIZE: .byte 8
 3586 1cf1 494D475F 		.ascii "IMG_SIZE" 
 3586      53495A45 
 3587 1cf9 0000BF   		.p2align 2
 3588              	IMG_SIZE: 
 3589 1cfc 404700BF 		_NEST
 3590 1d00 81050000 		_DOLIT VARS_END_OFS-IMG_SIGN_OFS 
 3590      38000000 
 3591 1d08 AD0B0000 		_ADR USER_END 
 3592 1d0c 910B0000 		_ADR USER_BEGIN 
 3593 1d10 79070000 		_ADR SUBB 
 3594 1d14 69070000 		_ADR PLUS 
 3595 1d18 81050000 		_DOLIT PAGE_SIZE 
 3595      00040000 
 3596 1d20 D90C0000 		_ADR SLMOD 
 3597 1d24 B5060000 		_ADR SWAP 
 3598 1d28 BD050000 		_QBRAN 1f 
 3598      341D0000 
 3599 1d30 C5070000 		_ADR ONEP
 3600              	1:
 3601 1d34 1B040000 		_UNNEST  
 3602              	
 3603              	// IMG? (  -- T|F )
 3604              	// check if an image has been saved in FLASH  
 3605 1d38 F01C0000 		.word _IMG_SIZE 
 3606 1d3c 04       	_IMGQ: .byte 4
 3607 1d3d 494D473F 		.ascii "IMG?"
 3608 1d41 0000BF   		.p2align 2
 3609              	IMGQ:
 3610 1d44 404700BF 		_NEST 
 3611 1d48 C50B0000 		_ADR IMG_ADR 
 3612 1d4c FD050000 		_ADR AT 
 3613 1d50 E10B0000 		_ADR IMG_SIGN  
 3614 1d54 FD050000 		_ADR AT 
 3615 1d58 11070000 		_ADR XORR  
 3616 1d5c 1D090000 		_ADR ZEQUAL
 3617 1d60 1B040000 		_UNNEST
 3618              	
 3619              	// LOAD_IMG (  -- )
 3620              	// Load saved image into RAM. 
 3621 1d64 3C1D0000 		.word _IMGQ
 3622 1d68 08       	_LOAD_IMG: .byte 8 
 3623 1d69 4C4F4144 		.ascii "LOAD_IMG" 
ARM GAS  stm32eforth-fl.s 			page 71


 3623      5F494D47 
 3624 1d71 0000BF   		.p2align 2 
 3625              	LOAD_IMG:
 3626 1d74 404700BF 		_NEST 
 3627 1d78 451D0000 		_ADR IMGQ 
 3628 1d7c BD050000 		_QBRAN 1f
 3628      C81D0000 
 3629              	/* copy system variables to RAM */
 3630 1d84 C50B0000 		_ADR IMG_ADR 
 3631 1d88 A5060000 		_ADR DUPP 
 3632 1d8c 4D060000 		_ADR TOR   // save source address 
 3633 1d90 E10B0000 		_ADR IMG_SIGN 
 3634 1d94 81050000 		_DOLIT (VARS_END_OFS-IMG_SIGN_OFS) 
 3634      38000000 
 3635 1d9c A5060000 		_ADR DUPP 
 3636 1da0 4D060000 		_ADR TOR 
 3637 1da4 C50E0000 		_ADR MOVE // ( src dest count -- ) R: src count 
 3638              	/* copy user definitions */
 3639 1da8 29060000 		_ADR RFROM 
 3640 1dac 29060000 		_ADR RFROM  
 3641 1db0 69070000 		_ADR PLUS // source address  
 3642 1db4 910B0000 		_ADR USER_BEGIN // destination address
 3643 1db8 250E0000 		_ADR HERE  
 3644 1dbc C9060000 		_ADR OVER 
 3645 1dc0 79070000 		_ADR SUBB  // byte count 
 3646 1dc4 C50E0000 		_ADR MOVE
 3647 1dc8 1B040000 	1:	_UNNEST  
 3648              	
 3649              	// ERASE_MPG ( u1 u2 -- )
 3650              	// erase many pages 
 3651              	// u1 first page number 
 3652              	// u2 how many pages  
 3653 1dcc 681D0000 		.word _LOAD_IMG
 3654 1dd0 09       	_ERASE_MPG: .byte 9 
 3655 1dd1 45524153 		.ascii "ERASE_MPG"	
 3655      455F4D50 
 3655      47
 3656 1dda 00BF     		.p2align 2 
 3657              	ERASE_MPG:
 3658 1ddc 404700BF 		_NEST 
 3659 1de0 4D060000 		_ADR TOR 
 3660 1de4 B11E0000 		_ADR PG_TO_ADR 
 3661 1de8 CF050000 		_BRAN 3f 
 3661      281E0000 
 3662              	1:
 3663 1df0 A5060000 		_ADR DUPP 
 3664 1df4 4D060000 		_ADR TOR 
 3665 1df8 2D1C0000 		_ADR EPAGE
 3666 1dfc BD050000 		_QBRAN 2f 
 3666      181E0000 
 3667 1e04 511A0000 		_ABORQ 12,"erase failed"
 3667      0C657261 
 3667      73652066 
 3667      61696C65 
 3667      640000BF 
 3668 1e18 29060000 	2:	_ADR RFROM
 3669 1e1c 81050000 		_DOLIT PAGE_SIZE 
ARM GAS  stm32eforth-fl.s 			page 72


 3669      00040000 
 3670 1e24 69070000 		_ADR PLUS 
 3671              	3:
 3672 1e28 A5050000 		_DONXT 1b 
 3672      F01D0000 
 3673 1e30 07040000 		_ADR TPOP 
 3674 1e34 1B040000 		_UNNEST 
 3675              	
 3676              	// FLSH_WR ( src dest u -- dest+u )
 3677              	// write u words to flash memory 
 3678 1e38 D01D0000 		.word _ERASE_MPG
 3679 1e3c 07       	_FLSH_WR: .byte 7 
 3680 1e3d 464C5348 		.ascii "FLSH_WR"
 3680      5F5752
 3681              		.p2align  
 3682              	FLSH_WR: 
 3683 1e44 404700BF 		_NEST 
 3684 1e48 4D060000 		_ADR TOR
 3685 1e4c CF050000 		_BRAN 3f  
 3685      741E0000 
 3686              	/* write system variables to FLASH */
 3687 1e54 4D060000 	2:  _ADR TOR  // destination address 
 3688 1e58 A5060000 		_ADR DUPP 
 3689 1e5c FD050000 		_ADR AT   // get data 
 3690 1e60 3D060000 		_ADR RAT  // get destination address 
 3691 1e64 851C0000 		_ADR ISTOR
 3692 1e68 05080000 		_ADR CELLP  // increment source address 
 3693 1e6c 29060000 		_ADR RFROM 
 3694 1e70 05080000 		_ADR CELLP  // increment dest address 
 3695 1e74 A5050000 	3:	_DONXT 2b
 3695      541E0000 
 3696 1e7c 4D060000 		_ADR TOR 
 3697 1e80 95060000 		_ADR DROP 
 3698 1e84 29060000 		_ADR RFROM 
 3699 1e88 1B040000 		_UNNEST 
 3700              	
 3701              	// ADR>PG ( a -- n )
 3702              	// convert address to page number, {0..127} 
 3703 1e8c 3C1E0000 		.word _FLSH_WR
 3704 1e90 06       	_ADR_TO_PG: .byte 6 
 3705 1e91 4144523E 		.ascii "ADR>PG" 
 3705      5047
 3706 1e97 00       		.p2align 2 
 3707              	ADR_TO_PG: 
 3708 1e98 4FEA9525 		lsr r5,#10 
 3709 1e9c 05F07F05 		and r5,#127 
 3710 1ea0 FEF7B8BA 		_NEXT  
 3711              	
 3712              	// PG>ADR ( n -- a )
 3713              	// convert page# to address 
 3714 1ea4 901E0000 		.word _ADR_TO_PG
 3715 1ea8 06       	_PG_TO_ADR: .byte 6 
 3716 1ea9 50473E41 		.ascii "PG>ADR" 
 3716      4452
 3717 1eaf 00       		.p2align 2 
 3718              	PG_TO_ADR:
 3719 1eb0 C0F20205 		movt r5,#2
ARM GAS  stm32eforth-fl.s 			page 73


 3720 1eb4 4FEA8525 		lsl r5,#10 
 3721 1eb8 FEF7ACBA 		_NEXT 
 3722              	
 3723              	// ERASE_IMG (  -- )
 3724              	// erase saved image  
 3725 1ebc A81E0000 		.word _PG_TO_ADR 
 3726 1ec0 09       	_ERASE_IMG: .byte 9
 3727 1ec1 45524153 		.ascii "ERASE_IMG"
 3727      455F494D 
 3727      47
 3728 1eca 00BF     		.p2align 2
 3729              	ERASE_IMG:
 3730 1ecc 404700BF 		_NEST
 3731 1ed0 C50B0000 		_ADR IMG_ADR 
 3732 1ed4 FD1C0000 		_ADR IMG_SIZE // in page count 
 3733 1ed8 4D060000 		_ADR TOR 
 3734 1edc CF050000 		_BRAN 2f 
 3734      F81E0000 
 3735 1ee4 A5060000 	1:	_ADR DUPP 
 3736 1ee8 2D1C0000 		_ADR EPAGE
 3737 1eec 81050000 		_DOLIT PAGE_SIZE
 3737      00040000 
 3738 1ef4 69070000 		_ADR PLUS  
 3739 1ef8 A5050000 	2:	_DONXT 1b 
 3739      E41E0000 
 3740 1f00 95060000 		_ADR DROP 
 3741 1f04 1B040000 		_UNNEST 
 3742              	
 3743              	// SAVE_IMG (  -- )
 3744              	// save in flash memory system variables and user defintitions.
 3745 1f08 C01E0000 		.word _ERASE_IMG	
 3746 1f0c 08       	_SAVE_IMG: .byte 8 
 3747 1f0d 53415645 		.ascii "SAVE_IMG"
 3747      5F494D47 
 3748 1f15 0000BF   		.p2align 2
 3749              	SAVE_IMG:
 3750 1f18 404700BF 		_NEST 
 3751 1f1c 250E0000 		_ADR HERE 
 3752 1f20 910B0000 		_ADR USER_BEGIN
 3753 1f24 31090000 		_ADR EQUAL 
 3754 1f28 BD050000 		_QBRAN 1f
 3754      341F0000 
 3755 1f30 1B040000 		_UNNEST  
 3756 1f34 451D0000 	1:	_ADR IMGQ 
 3757 1f38 BD050000 		_QBRAN 2f
 3757      441F0000 
 3758              	/* delete saved image */
 3759 1f40 CD1E0000 		_ADR ERASE_IMG 
 3760              	/* save system variables */
 3761 1f44 E10B0000 	2:	_ADR IMG_SIGN // src address
 3762 1f48 C50B0000 		_ADR IMG_ADR // dest address
 3763 1f4c 81050000 		_DOLIT (VARS_END_OFS-IMG_SIGN_OFS) 
 3763      38000000 
 3764 1f54 49080000 		_ADR CELLSL  // word count 
 3765 1f58 451E0000 		_ADR FLSH_WR  // ( src dest count -- dest+u )
 3766              	/* write user definitions */
 3767 1f5c 910B0000 		_ADR USER_BEGIN
ARM GAS  stm32eforth-fl.s 			page 74


 3768 1f60 B5060000 		_ADR SWAP  // ( src dest+ -- )
 3769 1f64 250E0000 		_ADR HERE   
 3770 1f68 910B0000 		_ADR USER_BEGIN 
 3771 1f6c 79070000 		_ADR SUBB 
 3772 1f70 49080000 		_ADR CELLSL  // src dest+ count -- 
 3773 1f74 451E0000 		_ADR FLSH_WR  
 3774 1f78 1B040000 	9:	_UNNEST 
 3775              	
 3776              	// TURNKEY ( -- "WORD") 
 3777              	// set autorun program in 'BOOT variable 
 3778              	// and save image 
 3779 1f7c 0C1F0000 		.word _SAVE_IMG
 3780 1f80 07       	_TURNKEY: .byte 7
 3781 1f81 5455524E 		.ascii "TURNKEY"
 3781      4B4559
 3782              		.p2align 2 
 3783              	TURNKEY:
 3784 1f88 404700BF 		_NEST 
 3785 1f8c 19200000 		_ADR TICK 
 3786 1f90 81050000 		_DOLIT 1 
 3786      01000000 
 3787 1f98 FD060000 		_ADR ORR 		
 3788 1f9c 850A0000 		_ADR TBOOT 
 3789 1fa0 E9050000 		_ADR STORE 
 3790 1fa4 191F0000 		_ADR SAVE_IMG 
 3791 1fa8 1B040000 		_UNNEST
 3792              	
 3793 1fac 801F0000 		.word _TURNKEY
 3794 1fb0 06       	_FORGET: .byte 6 
 3795 1fb1 464F5247 		.ascii "FORGET"
 3795      4554
 3796 1fb7 00       		.p2align 2
 3797              	FORGET:
 3798 1fb8 404700BF 		_NEST 
 3799 1fbc 0D170000 		_ADR TOKEN 
 3800 1fc0 A5060000 		_ADR DUPP 
 3801 1fc4 BD050000 		_QBRAN 9f 
 3801      00200000 
 3802 1fcc 91180000 		_ADR NAMEQ // ( a -- ca na | a 0 )
 3803 1fd0 79080000 		_ADR QDUP 
 3804 1fd4 BD050000 		_QBRAN 8f
 3804      FC1F0000 
 3805 1fdc 15080000 		_ADR CELLM // ( ca la )
 3806 1fe0 A5060000 		_ADR DUPP 
 3807 1fe4 350B0000 		_ADR CPP   
 3808 1fe8 E9050000 		_ADR STORE
 3809 1fec FD050000 		_ADR AT 
 3810 1ff0 5D0B0000 		_ADR LAST 
 3811 1ff4 E9050000 		_ADR STORE
 3812 1ff8 71240000 		_ADR OVERT 
 3813 1ffc 95060000 	8:  _ADR DROP 
 3814 2000 1B040000 	9:	_UNNEST 
 3815              	
 3816              		.p2align 2 
 3817              	flash_regs:
 3818 2004 00200240 		.word FLASH_BASE_ADR // 0 
 3819 2008 23016745 		.word FLASH_KEY1   // 4 
ARM GAS  stm32eforth-fl.s 			page 75


 3820 200c AB89EFCD 		.word FLASH_KEY2   // 8
 3821              	
 3822              	// **************************************************************************
 3823              	//  The compiler
 3824              	
 3825              	//    '	   ( -- ca )
 3826              	// 	Search context vocabularies for the next word in input stream.
 3827              	
 3828 2010 B01F0000 		.word	_FORGET
 3829 2014 01       	_TICK:	.byte  1
 3830 2015 27       		.ascii "'"
 3831 2016 00BF     		.p2align 2 	
 3832              	TICK:
 3833 2018 404700BF 		_NEST
 3834 201c 0D170000 		_ADR	TOKEN
 3835 2020 91180000 		_ADR	NAMEQ	// ?defined
 3836 2024 BD050000 		_QBRAN	TICK1
 3836      30200000 
 3837 202c 1B040000 		_UNNEST	// yes, push code address
 3838              	TICK1:	
 3839 2030 251A0000 		_ADR ABORT	// no, error
 3840              	
 3841              	//    ALLOT	( n -- )
 3842              	// 	Allocate n bytes to the ram area.
 3843              	
 3844 2034 14200000 		.word	_TICK
 3845 2038 05       	_ALLOT:	.byte  5
 3846 2039 414C4C4F 		.ascii "ALLOT"
 3846      54
 3847 203e 00BF     		.p2align 2 	
 3848              	ALLOT:
 3849 2040 404700BF 		_NEST
 3850 2044 350B0000 		_ADR	CPP
 3851 2048 B9090000 		_ADR	PSTOR
 3852 204c 1B040000 		_UNNEST			// adjust code pointer
 3853              	
 3854              	//    ,	   ( w -- )
 3855              	// 	Compile an integer into the code dictionary.
 3856              	
 3857 2050 38200000 		.word	_ALLOT
 3858 2054 012C     	_COMMA:	.byte  1,','
 3859 2056 00BF     		.p2align 2 	
 3860              	COMMA:
 3861 2058 404700BF 		_NEST
 3862 205c 250E0000 		_ADR	HERE
 3863 2060 A5060000 		_ADR	DUPP
 3864 2064 05080000 		_ADR	CELLP	// cell boundary
 3865 2068 350B0000 		_ADR	CPP
 3866 206c E9050000 		_ADR	STORE
 3867 2070 E9050000 		_ADR	STORE
 3868 2074 1B040000 		_UNNEST	// adjust code pointer, compile
 3869              		.p2align 2 
 3870              	//    [COMPILE]   ( -- //  string> )
 3871              	// 	Compile the next immediate word into code dictionary.
 3872              	
 3873 2078 54200000 		.word	_COMMA
 3874 207c 89       	_BCOMP:	.byte  IMEDD+9
ARM GAS  stm32eforth-fl.s 			page 76


 3875 207d 5B434F4D 		.ascii "[COMPILE]"
 3875      50494C45 
 3875      5D
 3876 2086 00BF     		.p2align 2 	
 3877              	BCOMP:
 3878 2088 404700BF 		_NEST
 3879 208c 19200000 		_ADR	TICK
 3880 2090 59200000 		_ADR	COMMA
 3881 2094 1B040000 		_UNNEST
 3882              	
 3883              	//    COMPILE	( -- )
 3884              	// 	Compile the next address in colon list to code dictionary.
 3885              	
 3886 2098 7C200000 		.word	_BCOMP
 3887 209c 47       	_COMPI:	.byte  COMPO+7
 3888 209d 434F4D50 		.ascii "COMPILE"
 3888      494C45
 3889              		.p2align 2 	
 3890              	COMPI:
 3891 20a4 404700BF 		_NEST
 3892 20a8 29060000 		_ADR	RFROM
 3893 20ac A5060000 		_ADR	DUPP 
 3894 20b0 FD050000 		_ADR	AT
 3895 20b4 81050000 		_DOLIT 1 
 3895      01000000 
 3896 20bc FD060000 		_ADR	ORR 
 3897 20c0 59200000 		_ADR	COMMA 
 3898 20c4 05080000 		_ADR	CELLP 
 3899 20c8 4D060000 		_ADR	TOR 
 3900 20cc 1B040000 		_UNNEST			// adjust return address
 3901              	
 3902              	//    LITERAL	( w -- )
 3903              	// 	Compile tos to code dictionary as an integer literal.
 3904              	
 3905 20d0 9C200000 		.word	_COMPI
 3906 20d4 87       	_LITER:	.byte  IMEDD+7
 3907 20d5 4C495445 		.ascii "LITERAL"
 3907      52414C
 3908              		.p2align 2 	
 3909              	LITER:
 3910 20dc 404700BF 		_NEST
 3911 20e0 81050000 		_COMPI	DOLIT
 3911      80050000 
 3911      CD240000 
 3912 20ec 59200000 		_ADR	COMMA
 3913 20f0 1B040000 		_UNNEST
 3914              	
 3915              	//    $,"	( -- )
 3916              	// 	Compile a literal string up to next " .
 3917              	
 3918              	// 	.word	_LITER
 3919              	// _STRCQ	.byte  3
 3920              	// 	.ascii "$,\""
 3921              	// 	.p2align 2 	
 3922              	STRCQ:
 3923 20f4 404700BF 		_NEST
 3924 20f8 81050000 		_DOLIT -4
ARM GAS  stm32eforth-fl.s 			page 77


 3924      FCFFFFFF 
 3925 2100 350B0000 		_ADR	CPP
 3926 2104 B9090000 		_ADR	PSTOR
 3927 2108 81050000 		_DOLIT	'\"'
 3927      22000000 
 3928 2110 E9160000 		_ADR	WORDD			// move word to code dictionary
 3929 2114 010A0000 		_ADR	COUNT
 3930 2118 69070000 		_ADR	PLUS
 3931 211c 710D0000 		_ADR	ALGND			// calculate aligned end of string
 3932 2120 350B0000 		_ADR	CPP
 3933 2124 E9050000 		_ADR	STORE
 3934 2128 1B040000 		_UNNEST 			// adjust the code pointer
 3935              	
 3936              	/*******************
 3937              	//  Structures
 3938              	*******************/
 3939              	//    FOR	 ( -- a )
 3940              	// 	Start a FOR-NEXT loop structure in a colon definition.
 3941              	
 3942 212c D4200000 		.word	_LITER
 3943 2130 C3       	_FOR:	.byte  COMPO+IMEDD+3
 3944 2131 464F52   		.ascii "FOR"
 3945              		.p2align 2 	
 3946              	FOR:
 3947 2134 404700BF 		_NEST
 3948 2138 81050000 		_COMPI	TOR
 3948      4C060000 
 3948      CD240000 
 3949 2144 250E0000 		_ADR	HERE
 3950 2148 1B040000 		_UNNEST
 3951              	
 3952              	//    BEGIN	( -- a )
 3953              	// 	Start an infinite or indefinite loop structure.
 3954              	
 3955 214c 30210000 		.word	_FOR
 3956 2150 C5       	_BEGIN:	.byte  COMPO+IMEDD+5
 3957 2151 42454749 		.ascii "BEGIN"
 3957      4E
 3958 2156 00BF     		.p2align 2 	
 3959              	BEGIN:
 3960 2158 404700BF 		_NEST
 3961 215c 250E0000 		_ADR	HERE
 3962 2160 1B040000 		_UNNEST
 3963              		.p2align 2 
 3964              	
 3965              	//    NEXT	( a -- )
 3966              	// 	Terminate a FOR-NEXT loop structure.
 3967 2164 50210000 		.word	_BEGIN
 3968 2168 C4       	_FNEXT:	.byte  COMPO+IMEDD+4
 3969 2169 4E455854 		.ascii "NEXT"
 3970 216d 0000BF   		.p2align 2 	
 3971              	FNEXT:
 3972 2170 404700BF 		_NEST
 3973 2174 81050000 		_COMPI	DONXT
 3973      A4050000 
 3973      CD240000 
 3974 2180 59200000 		_ADR	COMMA
ARM GAS  stm32eforth-fl.s 			page 78


 3975 2184 1B040000 		_UNNEST
 3976              	
 3977              	//    UNTIL	( a -- )
 3978              	// 	Terminate a BEGIN-UNTIL indefinite loop structure.
 3979              	
 3980 2188 68210000 		.word	_FNEXT
 3981 218c C5       	_UNTIL:	.byte  COMPO+IMEDD+5
 3982 218d 554E5449 		.ascii "UNTIL"
 3982      4C
 3983 2192 00BF     		.p2align 2 	
 3984              	UNTIL:
 3985 2194 404700BF 		_NEST
 3986 2198 81050000 		_COMPI	QBRAN
 3986      BC050000 
 3986      CD240000 
 3987 21a4 59200000 		_ADR	COMMA
 3988 21a8 1B040000 		_UNNEST
 3989              	
 3990              	//    AGAIN	( a -- )
 3991              	// 	Terminate a BEGIN-AGAIN infinite loop structure.
 3992              	
 3993 21ac 8C210000 		.word	_UNTIL
 3994 21b0 C5       	_AGAIN:	.byte  COMPO+IMEDD+5
 3995 21b1 41474149 		.ascii "AGAIN"
 3995      4E
 3996 21b6 00BF     		.p2align 2 	
 3997              	AGAIN:
 3998 21b8 404700BF 		_NEST
 3999 21bc 81050000 		_COMPI	BRAN
 3999      CE050000 
 3999      CD240000 
 4000 21c8 59200000 		_ADR	COMMA
 4001 21cc 1B040000 		_UNNEST
 4002              	
 4003              	//    IF	  ( -- A )
 4004              	// 	Begin a conditional branch structure.
 4005              	
 4006 21d0 B0210000 		.word	_AGAIN
 4007 21d4 C2       	_IFF:	.byte  COMPO+IMEDD+2
 4008 21d5 4946     		.ascii "IF"
 4009 21d7 00       		.p2align 2 	
 4010              	IFF:
 4011 21d8 404700BF 		_NEST
 4012 21dc 81050000 		_COMPI	QBRAN
 4012      BC050000 
 4012      CD240000 
 4013 21e8 250E0000 		_ADR	HERE
 4014 21ec 81050000 		_DOLIT	4
 4014      04000000 
 4015 21f4 350B0000 		_ADR	CPP
 4016 21f8 B9090000 		_ADR	PSTOR
 4017 21fc 1B040000 		_UNNEST
 4018              	
 4019              	//    AHEAD	( -- A )
 4020              	// 	Compile a forward branch instruction.
 4021              	
 4022 2200 D4210000 		.word	_IFF
ARM GAS  stm32eforth-fl.s 			page 79


 4023 2204 C5       	_AHEAD:	.byte  COMPO+IMEDD+5
 4024 2205 41484541 		.ascii "AHEAD"
 4024      44
 4025 220a 00BF     		.p2align 2 	
 4026              	AHEAD:
 4027 220c 404700BF 		_NEST
 4028 2210 81050000 		_COMPI	BRAN
 4028      CE050000 
 4028      CD240000 
 4029 221c 250E0000 		_ADR	HERE
 4030 2220 81050000 		_DOLIT	4
 4030      04000000 
 4031 2228 350B0000 		_ADR	CPP
 4032 222c B9090000 		_ADR	PSTOR
 4033 2230 1B040000 		_UNNEST
 4034              	
 4035              	//    REPEAT	( A a -- )
 4036              	// 	Terminate a BEGIN-WHILE-REPEAT indefinite loop.
 4037              	
 4038 2234 04220000 		.word	_AHEAD
 4039 2238 C6       	_REPEA:	.byte  COMPO+IMEDD+6
 4040 2239 52455045 		.ascii "REPEAT"
 4040      4154
 4041 223f 00       		.p2align 2 	
 4042              	REPEA:
 4043 2240 404700BF 		_NEST
 4044 2244 B9210000 		_ADR	AGAIN
 4045 2248 250E0000 		_ADR	HERE
 4046 224c B5060000 		_ADR	SWAP
 4047 2250 E9050000 		_ADR	STORE
 4048 2254 1B040000 		_UNNEST
 4049              	
 4050              	//    THEN	( A -- )
 4051              	// 	Terminate a conditional branch structure.
 4052              	
 4053 2258 38220000 		.word	_REPEA
 4054 225c C4       	_THENN:	.byte  COMPO+IMEDD+4
 4055 225d 5448454E 		.ascii "THEN"
 4056 2261 0000BF   		.p2align 2 	
 4057              	THENN:
 4058 2264 404700BF 		_NEST
 4059 2268 250E0000 		_ADR	HERE
 4060 226c B5060000 		_ADR	SWAP
 4061 2270 E9050000 		_ADR	STORE
 4062 2274 1B040000 		_UNNEST
 4063              	
 4064              	//    AFT	 ( a -- a A )
 4065              	// 	Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
 4066              	
 4067 2278 5C220000 		.word	_THENN
 4068 227c C3       	_AFT:	.byte  COMPO+IMEDD+3
 4069 227d 414654   		.ascii "AFT"
 4070              		.p2align 2 	
 4071              	AFT:
 4072 2280 404700BF 		_NEST
 4073 2284 95060000 		_ADR	DROP
 4074 2288 0D220000 		_ADR	AHEAD
ARM GAS  stm32eforth-fl.s 			page 80


 4075 228c 59210000 		_ADR	BEGIN
 4076 2290 B5060000 		_ADR	SWAP
 4077 2294 1B040000 		_UNNEST
 4078              	
 4079              	//    ELSE	( A -- A )
 4080              	// 	Start the false clause in an IF-ELSE-THEN structure.
 4081              	
 4082 2298 7C220000 		.word	_AFT
 4083 229c C4       	_ELSEE:	.byte  COMPO+IMEDD+4
 4084 229d 454C5345 		.ascii "ELSE"
 4085 22a1 0000BF   		.p2align 2 	
 4086              	ELSEE:
 4087 22a4 404700BF 		_NEST
 4088 22a8 0D220000 		_ADR	AHEAD
 4089 22ac B5060000 		_ADR	SWAP
 4090 22b0 65220000 		_ADR	THENN
 4091 22b4 1B040000 		_UNNEST
 4092              	
 4093              	//    WHILE	( a -- A a )
 4094              	// 	Conditional branch out of a BEGIN-WHILE-REPEAT loop.
 4095              	
 4096 22b8 9C220000 		.word	_ELSEE
 4097 22bc C5       	_WHILE:	.byte  COMPO+IMEDD+5
 4098 22bd 5748494C 		.ascii "WHILE"
 4098      45
 4099 22c2 00BF     		.p2align 2 	
 4100              	WHILE:
 4101 22c4 404700BF 		_NEST
 4102 22c8 D9210000 		_ADR	IFF
 4103 22cc B5060000 		_ADR	SWAP
 4104 22d0 1B040000 		_UNNEST
 4105              	
 4106              	//    ABORT"	( -- //  string> )
 4107              	// 	Conditional abort with an error message.
 4108              	
 4109 22d4 BC220000 		.word	_WHILE
 4110 22d8 86       	_ABRTQ:	.byte  IMEDD+6
 4111 22d9 41424F52 		.ascii "ABORT\""
 4111      5422
 4112 22df 00       		.p2align 2 	
 4113              	ABRTQ:
 4114 22e0 404700BF 		_NEST
 4115 22e4 81050000 		_COMPI	ABORQ
 4115      501A0000 
 4115      CD240000 
 4116 22f0 F5200000 		_ADR	STRCQ
 4117 22f4 1B040000 		_UNNEST
 4118              	
 4119              	//    $"	( -- //  string> )
 4120              	// 	Compile an inline word literal.
 4121              	
 4122 22f8 D8220000 		.word	_ABRTQ
 4123 22fc 82       	_STRQ:	.byte  IMEDD+2
 4124 22fd 2422     		.ascii	"$\""
 4125 22ff 00       		.p2align 2 	
 4126              	STRQ:
 4127 2300 404700BF 		_NEST
ARM GAS  stm32eforth-fl.s 			page 81


 4128 2304 81050000 		_COMPI	STRQP
 4128      E0130000 
 4128      CD240000 
 4129 2310 F5200000 		_ADR	STRCQ
 4130 2314 1B040000 		_UNNEST
 4131              	
 4132              	//    ."	( -- //  string> )
 4133              	// 	Compile an inline word  literal to be typed out at run time.
 4134              	
 4135 2318 FC220000 		.word	_STRQ
 4136 231c C2       	_DOTQ:	.byte  IMEDD+COMPO+2
 4137 231d 2E22     		.ascii	".\""
 4138 231f 00       		.p2align 2 	
 4139              	DOTQ:
 4140 2320 404700BF 		_NEST
 4141 2324 81050000 		_COMPI	DOTQP
 4141      FC130000 
 4141      CD240000 
 4142 2330 F5200000 		_ADR	STRCQ
 4143 2334 1B040000 		_UNNEST
 4144              	
 4145              	// **************************************************************************
 4146              	//  Name compiler
 4147              	
 4148              	//    ?UNIQUE	( a -- a )
 4149              	// 	Display a warning message if the word already exists.
 4150              	
 4151 2338 1C230000 		.word	_DOTQ
 4152 233c 07       	_UNIQU:	.byte  7
 4153 233d 3F554E49 		.ascii "?UNIQUE"
 4153      515545
 4154              		.p2align 2 	
 4155              	UNIQU:
 4156 2344 404700BF 		_NEST
 4157 2348 A5060000 		_ADR	DUPP
 4158 234c 91180000 		_ADR	NAMEQ			// ?name exists
 4159 2350 BD050000 		_QBRAN	UNIQ1	// redefinitions are OK
 4159      70230000 
 4160 2358 FD130000 		_DOTQP	7," reDef "		// but warn the user
 4160      07207265 
 4160      44656620 
 4161 2364 C9060000 		_ADR	OVER
 4162 2368 010A0000 		_ADR	COUNT
 4163 236c 61130000 		_ADR	TYPEE			// just in case its not planned
 4164              	UNIQ1:
 4165 2370 95060000 		_ADR	DROP
 4166 2374 1B040000 		_UNNEST
 4167              	
 4168              	//    $,n	 ( na -- )
 4169              	// 	Build a new dictionary name using the data at na.
 4170              	
 4171              	// 	.word	_UNIQU
 4172              	// _SNAME	.byte  3
 4173              	// 	.ascii "$,n"
 4174              	// 	.p2align 2 	
 4175              	SNAME:
 4176 2378 404700BF 		_NEST
ARM GAS  stm32eforth-fl.s 			page 82


 4177 237c A5060000 		_ADR	DUPP			//  na na
 4178 2380 1D060000 		_ADR	CAT			//  ?null input
 4179 2384 BD050000 		_QBRAN	SNAM1
 4179      C0230000 
 4180 238c 45230000 		_ADR	UNIQU			//  na
 4181 2390 5D0B0000 		_ADR	LAST			//  na last
 4182 2394 FD050000 		_ADR	AT			//  na la
 4183 2398 59200000 		_ADR	COMMA			//  na
 4184 239c A5060000 		_ADR	DUPP			//  na na
 4185 23a0 5D0B0000 		_ADR	LAST			//  na na last
 4186 23a4 E9050000 		_ADR	STORE			//  na , save na for vocabulary link
 4187 23a8 010A0000 		_ADR	COUNT			//  na+1 count
 4188 23ac 69070000 		_ADR	PLUS			//  na+1+count
 4189 23b0 710D0000 		_ADR	ALGND			//  word boundary
 4190 23b4 350B0000 		_ADR	CPP
 4191 23b8 E9050000 		_ADR	STORE			//  top of dictionary now
 4192 23bc 1B040000 		_UNNEST
 4193              	SNAM1:
 4194 23c0 E1130000 		_ADR	STRQP
 4195 23c4 07       		.byte	7
 4196 23c5 206E616D 		.ascii " name? "
 4196      653F20
 4197 23cc 251A0000 		_ADR	ABORT
 4198              	
 4199              	//    $COMPILE	( a -- )
 4200              	// 	Compile next word to code dictionary as a token or literal.
 4201              	
 4202 23d0 3C230000 		.word	_UNIQU
 4203 23d4 08       	_SCOMP:	.byte  8
 4204 23d5 24434F4D 		.ascii "$COMPILE"
 4204      50494C45 
 4205 23dd 0000BF   		.p2align 2 	
 4206              	SCOMP:
 4207 23e0 404700BF 		_NEST
 4208 23e4 91180000 		_ADR	NAMEQ
 4209 23e8 79080000 		_ADR	QDUP	// defined?
 4210 23ec BD050000 		_QBRAN	SCOM2
 4210      1C240000 
 4211 23f4 FD050000 		_ADR	AT
 4212 23f8 81050000 		_DOLIT	IMEDD
 4212      80000000 
 4213 2400 E9060000 		_ADR	ANDD	// immediate?
 4214 2404 BD050000 		_QBRAN	SCOM1
 4214      14240000 
 4215 240c 99050000 		_ADR	EXECU
 4216 2410 1B040000 		_UNNEST			// it's immediate, execute
 4217              	SCOM1:
 4218 2414 CD240000 		_ADR	CALLC			// it's not immediate, compile
 4219 2418 1B040000 		_UNNEST	
 4220              	SCOM2:
 4221 241c B5110000 		_ADR	NUMBQ
 4222 2420 BD050000 		_QBRAN	SCOM3
 4222      30240000 
 4223 2428 DD200000 		_ADR	LITER
 4224 242c 1B040000 		_UNNEST			// compile number as integer
 4225              	SCOM3: // compilation abort 
 4226 2430 39240000 		_ADR COLON_ABORT 
ARM GAS  stm32eforth-fl.s 			page 83


 4227 2434 251A0000 		_ADR	ABORT			// error
 4228              	
 4229              	// before aborting a compilation 
 4230              	// reset HERE and LAST
 4231              	// to previous values. 
 4232              	COLON_ABORT:
 4233 2438 404700BF 		_NEST 
 4234 243c 5D0B0000 		_ADR LAST 
 4235 2440 FD050000 		_ADR AT 
 4236 2444 15080000 		_ADR CELLM 
 4237 2448 A5060000 		_ADR DUPP 
 4238 244c 350B0000 		_ADR CPP  
 4239 2450 E9050000 		_ADR STORE 
 4240 2454 FD050000 		_ADR AT 
 4241 2458 5D0B0000 		_ADR LAST 
 4242 245c E9050000 		_ADR STORE 
 4243 2460 1B040000 		_UNNEST 
 4244              	
 4245              	//    OVERT	( -- )
 4246              	// 	Link a new word into the current vocabulary.
 4247              	
 4248 2464 D4230000 		.word	_SCOMP
 4249 2468 05       	_OVERT:	.byte  5
 4250 2469 4F564552 		.ascii "OVERT"
 4250      54
 4251 246e 00BF     		.p2align 2 	
 4252              	OVERT:
 4253 2470 404700BF 		_NEST
 4254 2474 5D0B0000 		_ADR	LAST
 4255 2478 FD050000 		_ADR	AT
 4256 247c 210B0000 		_ADR	CNTXT
 4257 2480 E9050000 		_ADR	STORE
 4258 2484 1B040000 		_UNNEST
 4259              	
 4260              	//    ; 	   ( -- )
 4261              	// 	Terminate a colon definition.
 4262              	
 4263 2488 68240000 		.word	_OVERT
 4264 248c C1       	_SEMIS:	.byte  IMEDD+COMPO+1
 4265 248d 3B       		.ascii ";"
 4266 248e 00BF     		.p2align 2 	
 4267              	SEMIS:
 4268 2490 404700BF 		_NEST
 4269 2494 81050000 		_DOLIT	UNNEST
 4269      1A040000 
 4270 249c CD240000 		_ADR	CALLC
 4271 24a0 E11A0000 		_ADR	LBRAC
 4272 24a4 71240000 		_ADR	OVERT
 4273 24a8 1B040000 		_UNNEST
 4274              	
 4275              	//    ]	   ( -- )
 4276              	// 	Start compiling the words in the input stream.
 4277              	
 4278 24ac 8C240000 		.word	_SEMIS
 4279 24b0 01       	_RBRAC:	.byte  1
 4280 24b1 5D       		.ascii "]"
 4281 24b2 00BF     		.p2align 2 	
ARM GAS  stm32eforth-fl.s 			page 84


 4282              	RBRAC:
 4283 24b4 404700BF 		_NEST
 4284 24b8 81050000 		_DOLIT	SCOMP
 4284      E0230000 
 4285 24c0 F50A0000 		_ADR	TEVAL
 4286 24c4 E9050000 		_ADR	STORE
 4287 24c8 1B040000 		_UNNEST
 4288              	
 4289              	//    BL.W	( ca -- )
 4290              	// 	compile ca.
 4291              	
 4292              	// 	.word	_RBRAC
 4293              	// _CALLC	.byte  5
 4294              	// 	.ascii "call,"
 4295              	// 	.p2align 2 	
 4296              	CALLC:
 4297 24cc 404700BF 		_NEST
 4298 24d0 81050000 		_DOLIT 1 
 4298      01000000 
 4299 24d8 FD060000 		_ADR ORR 
 4300 24dc 59200000 		_ADR COMMA  
 4301 24e0 1B040000 		_UNNEST 
 4302              	
 4303              	
 4304              	// 	:	( -- //  string> )
 4305              	// 	Start a new colon definition using next word as its name.
 4306              	
 4307 24e4 B0240000 		.word	_RBRAC
 4308 24e8 01       	_COLON:	.byte  1
 4309 24e9 3A       		.ascii ":"
 4310 24ea 00BF     		.p2align 2 	
 4311              	COLON:
 4312 24ec 404700BF 		_NEST
 4313 24f0 0D170000 		_ADR	TOKEN
 4314 24f4 79230000 		_ADR	SNAME
 4315 24f8 25040000 		_ADR	COMPI_NEST 
 4316 24fc B5240000 		_ADR	RBRAC
 4317 2500 1B040000 		_UNNEST
 4318              	
 4319              	//    IMMEDIATE   ( -- )
 4320              	// 	Make the last compiled word an immediate word.
 4321              	
 4322 2504 E8240000 		.word	_COLON
 4323 2508 09       	_IMMED:	.byte  9
 4324 2509 494D4D45 		.ascii "IMMEDIATE"
 4324      44494154 
 4324      45
 4325 2512 00BF     		.p2align 2 	
 4326              	IMMED:
 4327 2514 404700BF 		_NEST
 4328 2518 81050000 		_DOLIT	IMEDD
 4328      80000000 
 4329 2520 5D0B0000 		_ADR	LAST
 4330 2524 FD050000 		_ADR	AT
 4331 2528 FD050000 		_ADR	AT
 4332 252c FD060000 		_ADR	ORR
 4333 2530 5D0B0000 		_ADR	LAST
ARM GAS  stm32eforth-fl.s 			page 85


 4334 2534 FD050000 		_ADR	AT
 4335 2538 E9050000 		_ADR	STORE
 4336 253c 1B040000 		_UNNEST
 4337              	
 4338              	// **************************************************************************
 4339              	//  Defining words
 4340              	
 4341              	//    CONSTANT	( u -- //  string> )
 4342              	// 	Compile a new constant.
 4343              	
 4344 2540 08250000 		.word	_IMMED
 4345 2544 08       	_CONST:	.byte  8
 4346 2545 434F4E53 		.ascii "CONSTANT"
 4346      54414E54 
 4347 254d 0000BF   		.p2align 2 	
 4348              	CONST:
 4349 2550 404700BF 		_NEST 
 4350 2554 0D170000 		_ADR	TOKEN
 4351 2558 79230000 		_ADR	SNAME
 4352 255c 71240000 		_ADR	OVERT
 4353 2560 25040000 		_ADR	COMPI_NEST
 4354 2564 81050000 		_DOLIT	DOCON
 4354      340A0000 
 4355 256c CD240000 		_ADR	CALLC
 4356 2570 59200000 		_ADR	COMMA
 4357 2574 81050000 		_DOLIT	UNNEST 
 4357      1A040000 
 4358 257c CD240000 		_ADR	CALLC  
 4359 2580 1B040000 		_UNNEST
 4360              	
 4361              		.p2align 2 
 4362              	// doDOES> ( -- a )
 4363              	// runtime action of DOES> 
 4364              	// leave parameter field address on stack 
 4365              	DODOES:
 4366 2584 404700BF 		_NEST 
 4367 2588 29060000 		_ADR	RFROM
 4368 258c 05080000 		_ADR	CELLP 
 4369 2590 C5070000 		_ADR	ONEP  
 4370 2594 5D0B0000 		_ADR LAST 
 4371 2598 FD050000 		_ADR AT
 4372 259c 29170000 		_ADR NAMET 
 4373 25a0 05080000 		_ADR CELLP 
 4374 25a4 E9050000 		_ADR STORE  
 4375 25a8 1B040000 		_UNNEST 
 4376              	
 4377              		.p2align 2
 4378              	//  DOES> ( -- )
 4379              	//  compile time action 
 4380 25ac 44250000 		.word _CONST   
 4381 25b0 C5       	_DOES: .byte IMEDD+COMPO+5 
 4382 25b1 444F4553 		.ascii "DOES>"
 4382      3E
 4383 25b6 00BF     		.p2align 2
 4384              	DOES: 
 4385 25b8 404700BF 		_NEST 
 4386 25bc 81050000 		_DOLIT DODOES 
ARM GAS  stm32eforth-fl.s 			page 86


 4386      84250000 
 4387 25c4 CD240000 		_ADR CALLC 
 4388 25c8 81050000 		_DOLIT	UNNEST
 4388      1A040000 
 4389 25d0 CD240000 		_ADR	CALLC 
 4390 25d4 25040000 		_ADR COMPI_NEST
 4391 25d8 81050000 		_DOLIT RFROM 
 4391      28060000 
 4392 25e0 CD240000 		_ADR	CALLC
 4393 25e4 1B040000 		_UNNEST 
 4394              	
 4395              	
 4396              	
 4397              	//  DEFER@ ( "name" -- a )
 4398              	//  return value of code field of defered function. 
 4399 25e8 B0250000 		.word _DOES 
 4400 25ec 06       	_DEFERAT: .byte 6 
 4401 25ed 44454645 		.ascii "DEFER@"
 4401      5240
 4402 25f3 00       		.p2align 2 
 4403              	DEFERAT: 
 4404 25f4 404700BF 		_NEST 
 4405 25f8 19200000 		_ADR TICK
 4406 25fc 05080000 		_ADR CELLP 
 4407 2600 FD050000 		_ADR AT 
 4408 2604 D5070000 		_ADR ONEM 
 4409 2608 1B040000 		_UNNEST 
 4410              	
 4411              	// DEFER! ( "name1" "name2" -- )
 4412              	// assign an action to a defered word 
 4413 260c EC250000 		.word _DEFERAT 
 4414 2610 06       	_DEFERSTO: .byte 6 
 4415 2611 44454645 		.ascii "DEFER!" 
 4415      5221
 4416 2617 00       		.p2align 2 
 4417              	DEFERSTO:
 4418 2618 404700BF 		_NEST 
 4419 261c 19200000 		_ADR TICK 
 4420 2620 C5070000 		_ADR ONEP 
 4421 2624 19200000 		_ADR TICK 
 4422 2628 05080000 		_ADR CELLP 
 4423 262c E9050000 		_ADR STORE 
 4424 2630 1B040000 		_UNNEST
 4425              	
 4426              	//  DEFER ( "name" -- )
 4427              	//  create a defered definition
 4428 2634 10260000 		.word _DEFERSTO  
 4429 2638 05       	_DEFER: .byte 5 
 4430 2639 44454645 		.ascii "DEFER"
 4430      52
 4431 263e 00BF     		.p2align 2
 4432              	DEFER:
 4433 2640 404700BF 		_NEST 
 4434 2644 91260000 		_ADR CREAT 
 4435 2648 81050000 		_DOLIT UNNEST 
 4435      1A040000 
 4436 2650 CD240000 		_ADR CALLC 
ARM GAS  stm32eforth-fl.s 			page 87


 4437 2654 81050000 		_DOLIT DEFER_NOP
 4437      78260000 
 4438 265c C5070000 		_ADR ONEP 
 4439 2660 5D0B0000 		_ADR LAST 
 4440 2664 FD050000 		_ADR AT 
 4441 2668 29170000 		_ADR NAMET 
 4442 266c 05080000 		_ADR CELLP 
 4443 2670 E9050000 		_ADR STORE 
 4444 2674 1B040000 		_UNNEST 
 4445              	DEFER_NOP:
 4446 2678 404700BF 		_NEST  
 4447 267c 7D050000 		_ADR NOP 
 4448 2680 1B040000 		_UNNEST 
 4449              	
 4450              	//    CREATE	( -- //  string> )
 4451              	// 	Compile a new array entry without allocating code space.
 4452              	
 4453 2684 38260000 		.word	_DEFER 
 4454 2688 06       	_CREAT:	.byte  6
 4455 2689 43524541 		.ascii "CREATE"
 4455      5445
 4456 268f 00       		.p2align 2 	
 4457              	CREAT:
 4458 2690 404700BF 		_NEST 
 4459 2694 0D170000 		_ADR	TOKEN
 4460 2698 79230000 		_ADR	SNAME
 4461 269c 71240000 		_ADR	OVERT
 4462 26a0 25040000 		_ADR	COMPI_NEST 
 4463 26a4 81050000 		_DOLIT	DOVAR
 4463      280A0000 
 4464 26ac CD240000 		_ADR	CALLC
 4465 26b0 1B040000 		_UNNEST
 4466              	
 4467              	//    VARIABLE	( -- //  string> )
 4468              	// 	Compile a new variable initialized to 0.
 4469              	
 4470 26b4 88260000 		.word	_CREAT
 4471 26b8 08       	_VARIA:	.byte  8
 4472 26b9 56415249 		.ascii "VARIABLE"
 4472      41424C45 
 4473 26c1 0000BF   		.p2align 2 	
 4474              	VARIA:
 4475 26c4 404700BF 		_NEST
 4476 26c8 91260000 		_ADR	CREAT
 4477 26cc 81050000 		_DOLIT	0
 4477      00000000 
 4478 26d4 59200000 		_ADR	COMMA
 4479 26d8 81050000 		_DOLIT UNNEST
 4479      1A040000 
 4480 26e0 CD240000 		_ADR	CALLC  
 4481 26e4 1B040000 		_UNNEST
 4482              	
 4483              	// **************************************************************************
 4484              	//  Tools
 4485              	
 4486              	//  TRACE ( f -- )
 4487              	// enable or disable tracing 
ARM GAS  stm32eforth-fl.s 			page 88


 4488 26e8 B8260000 		.word _VARIA 
 4489 26ec 05       	_TRACE: .byte 5
 4490 26ed 54524143 		.ascii "TRACE"
 4490      45
 4491 26f2 00BF     		.p2align 2
 4492              	TRACE: 
 4493 26f4 404700BF 		_NEST 
 4494 26f8 750B0000 		_ADR FTRACE 
 4495 26fc E9050000 		_ADR STORE 
 4496 2700 1B040000 		_UNNEST 
 4497              	
 4498              	// TR_PRINT ( ca -- )
 4499              	// print name from ca  
 4500 2704 EC260000 		.word _TRACE 
 4501 2708 07       	_DBG_PRT: .byte 7 
 4502 2709 4442475F 		.ascii "DBG_PRT"
 4502      505254
 4503              	DBG_PRT:
 4504 2710 404700BF 		_NEST 
 4505 2714 41280000 		_ADR TNAME 
 4506 2718 79080000 		_ADR QDUP 
 4507 271c BD050000 		_QBRAN 1f 
 4507      30270000 
 4508 2724 010A0000 		_ADR COUNT 
 4509 2728 61130000 		_ADR TYPEE 
 4510 272c 95130000 		_ADR CR
 4511              	1:  	
 4512 2730 1B040000 		_UNNEST 
 4513              	
 4514              	//    dm+	 ( a u -- a )
 4515              	// 	Dump u bytes from , leaving a+u on the stack.
 4516              	
 4517              	// 	.word	_TRACE
 4518              	// _DMP	.byte  3
 4519              	// 	.ascii "dm+"
 4520              	// 	.p2align 2 	
 4521              	DMP:
 4522 2734 404700BF 		_NEST
 4523 2738 C9060000 		_ADR	OVER
 4524 273c 81050000 		_DOLIT	4
 4524      04000000 
 4525 2744 41140000 		_ADR	UDOTR			// display address
 4526 2748 0D130000 		_ADR	SPACE
 4527 274c 4D060000 		_ADR	TOR			// start count down loop
 4528 2750 CF050000 		_BRAN	PDUM2			// skip first pass
 4528      70270000 
 4529              	PDUM1:
 4530 2758 A5060000 	  _ADR	DUPP
 4531 275c 1D060000 		_ADR	CAT
 4532 2760 81050000 		_DOLIT	3
 4532      03000000 
 4533 2768 41140000 		_ADR	UDOTR			// display numeric data
 4534 276c C5070000 		_ADR	ONEP			// increment address
 4535              	PDUM2:
 4536 2770 A5050000 	  _ADR	DONXT
 4537 2774 58270000 		.word	PDUM1	// loop till done
 4538 2778 1B040000 		_UNNEST
ARM GAS  stm32eforth-fl.s 			page 89


 4539              		.p2align 2 
 4540              	//    DUMP	( a u -- )
 4541              	// 	Dump u bytes from a, in a formatted manner.
 4542              	
 4543 277c B8260000 		.word	_VARIA
 4544 2780 04       	_DUMP:	.byte  4
 4545 2781 44554D50 		.ascii "DUMP"
 4546 2785 0000BF   		.p2align 2 	
 4547              	DUMP:
 4548 2788 404700BF 		_NEST
 4549 278c 990A0000 		_ADR	BASE
 4550 2790 FD050000 		_ADR	AT
 4551 2794 4D060000 		_ADR	TOR
 4552 2798 05110000 		_ADR	HEX			// save radix,set hex
 4553 279c 81050000 		_DOLIT	16
 4553      10000000 
 4554 27a4 110D0000 		_ADR	SLASH			// change count to lines
 4555 27a8 4D060000 		_ADR	TOR
 4556 27ac CF050000 		_BRAN	DUMP4			// start count down loop
 4556      DC270000 
 4557              	DUMP1:
 4558 27b4 95130000 	  _ADR	CR
 4559 27b8 81050000 		_DOLIT	16
 4559      10000000 
 4560 27c0 B5080000 		_ADR	DDUP
 4561 27c4 35270000 		_ADR	DMP			// display numeric
 4562 27c8 8D080000 		_ADR	ROT
 4563 27cc 8D080000 		_ADR	ROT
 4564 27d0 0D130000 		_ADR	SPACE
 4565 27d4 0D130000 		_ADR	SPACE
 4566 27d8 61130000 		_ADR	TYPEE			// display printable characters
 4567              	DUMP4:
 4568 27dc A5050000 	  _DONXT	DUMP1	// loop till done
 4568      B4270000 
 4569              	DUMP3:
 4570 27e4 95060000 		_ADR	DROP
 4571 27e8 29060000 		_ADR	RFROM
 4572 27ec 990A0000 		_ADR	BASE
 4573 27f0 E9050000 		_ADR	STORE			// restore radix
 4574 27f4 1B040000 		_UNNEST
 4575              	
 4576              	//    .S	  ( ... -- ... )
 4577              	// 	Display the contents of the data stack.
 4578              	
 4579 27f8 80270000 		.word	_DUMP
 4580              	_DOTS:
 4581 27fc 02       		.byte  2
 4582 27fd 2E53     		.ascii ".S"
 4583 27ff 00       		.p2align 2 	
 4584              	DOTS:
 4585 2800 404700BF 		_NEST
 4586 2804 0D130000 		_ADR	SPACE
 4587 2808 D90D0000 		_ADR	DEPTH			// stack depth
 4588 280c 4D060000 		_ADR	TOR			// start count down loop
 4589 2810 CF050000 		_BRAN	DOTS2			// skip first pass
 4589      24280000 
 4590              	DOTS1:
ARM GAS  stm32eforth-fl.s 			page 90


 4591 2818 3D060000 		_ADR	RAT
 4592 281c FD0D0000 		_ADR	PICK
 4593 2820 99140000 		_ADR	DOT			// index stack, display contents
 4594              	DOTS2:
 4595 2824 A5050000 		_DONXT	DOTS1	// loop till done
 4595      18280000 
 4596 282c 0D130000 		_ADR	SPACE
 4597 2830 1B040000 		_UNNEST
 4598              	
 4599              	//    >NAME	( ca -- na | F )
 4600              	// 	Convert code address to a name address.
 4601              	
 4602 2834 FC270000 		.word	_DOTS
 4603 2838 05       	_TNAME:	.byte  5
 4604 2839 3E4E414D 		.ascii ">NAME"
 4604      45
 4605 283e 00BF     		.p2align 2 	
 4606              	TNAME:
 4607 2840 404700BF 		_NEST
 4608 2844 4D060000 		_ADR	TOR			//  
 4609 2848 210B0000 		_ADR	CNTXT			//  va
 4610 284c FD050000 		_ADR	AT			//  na
 4611              	TNAM1:
 4612 2850 A5060000 		_ADR	DUPP			//  na na
 4613 2854 BD050000 		_QBRAN	TNAM2	//  vocabulary end, no match
 4613      84280000 
 4614 285c A5060000 		_ADR	DUPP			//  na na
 4615 2860 29170000 		_ADR	NAMET			//  na ca
 4616 2864 3D060000 		_ADR	RAT			//  na ca code
 4617 2868 11070000 		_ADR	XORR			//  na f --
 4618 286c BD050000 		_QBRAN	TNAM2
 4618      84280000 
 4619 2874 15080000 		_ADR	CELLM			//  la 
 4620 2878 FD050000 		_ADR	AT			//  next_na
 4621 287c CF050000 		_BRAN	TNAM1
 4621      50280000 
 4622              	TNAM2:	
 4623 2884 29060000 		_ADR	RFROM
 4624 2888 95060000 		_ADR	DROP			//  0|na --
 4625 288c 1B040000 		_UNNEST			// 0
 4626              	
 4627              	//    .ID	 ( na -- )
 4628              	// 	Display the name at address.
 4629              	
 4630 2890 38280000 		.word	_TNAME
 4631 2894 03       	_DOTID:	.byte  3
 4632 2895 2E4944   		.ascii ".ID"
 4633              		.p2align 2 	
 4634              	DOTID:
 4635 2898 404700BF 		_NEST
 4636 289c 79080000 		_ADR	QDUP			// if zero no name
 4637 28a0 BD050000 		_QBRAN	DOTI1
 4637      C0280000 
 4638 28a8 010A0000 		_ADR	COUNT
 4639 28ac 81050000 		_DOLIT	0x1F
 4639      1F000000 
 4640 28b4 E9060000 		_ADR	ANDD			// mask lexicon bits
ARM GAS  stm32eforth-fl.s 			page 91


 4641 28b8 61130000 		_ADR	TYPEE
 4642 28bc 1B040000 		_UNNEST			// display name string
 4643              	DOTI1:
 4644 28c0 FD130000 		_DOTQP	9," {noName}"
 4644      09207B6E 
 4644      6F4E616D 
 4644      657D00BF 
 4645 28d0 1B040000 		_UNNEST
 4646              	
 4647              		.equ WANT_SEE, 0  // set to 1 if you want SEE 
 4648              	.if WANT_SEE 
 4649              	//    SEE	 ( -- //  string> )
 4650              	// 	A simple decompiler.
 4651              	
 4652              		.word	_DOTID
 4653              	_SEE:	.byte  3
 4654              		.ascii "SEE"
 4655              		.p2align 2 	
 4656              	SEE:
 4657              		_NEST
 4658              		_ADR	TICK	//  ca --, starting address
 4659              		_ADR	CR	
 4660              		_DOLIT	20
 4661              		_ADR	TOR
 4662              	SEE1:
 4663              		_ADR	CELLP			//  a
 4664              		_ADR	DUPP			//  a a
 4665              		_ADR	DECOMP		//  a
 4666              		_DONXT	SEE1
 4667              		_ADR	DROP
 4668              		_UNNEST
 4669              	
 4670              	// 	DECOMPILE ( a -- )
 4671              	// 	Convert code in a.  Display name of command or as data.
 4672              	
 4673              		.word	_SEE
 4674              	_DECOM:	.byte  9
 4675              		.ascii "DECOMPILE"
 4676              		.p2align 2 
 4677              		
 4678              	DECOMP:	
 4679              		_NEST
 4680              		_ADR	DUPP			//  a a
 4681              	// 	_ADR	TOR			//  a
 4682              		_ADR	AT			//  a code
 4683              		_ADR	DUPP			//  a code code
 4684              		_DOLIT	0xF800D000 //0xF800F800
 4685              		_ADR	ANDD
 4686              		_DOLIT	0xF000D000 //0xF800F000
 4687              		_ADR	EQUAL			//  a code ?
 4688              		_ADR	INVER 
 4689              		_QBRAN	DECOM2	//  not a command
 4690              		//  a valid_code --, extract address and display name
 4691              		MOVW	R0,#0xFFE
 4692              		MOV	R4,R5
 4693              		LSL	R5,R5,#21		//  get bits 22-12
 4694              		ASR	R5,R5,#9		//  with sign extension
ARM GAS  stm32eforth-fl.s 			page 92


 4695              		LSR	R4,R4,#15		//  get bits 11-1
 4696              		AND	R4,R4,R0		//  retain only bits 11-1
 4697              		ORR	R5,R5,R4		//  get bits 22-1
 4698              		NOP
 4699              		_ADR	OVER			//  a offset a
 4700              		_ADR	PLUS			//  a target-4
 4701              		_ADR	CELLP			//  a target
 4702              		_ADR	TNAME			//  a na/0 --, is it a name?
 4703              		_ADR	QDUP			//  name address or zero
 4704              		_QBRAN	DECOM1
 4705              		_ADR	SPACE			//  a na
 4706              		_ADR	DOTID			//  a --, display name
 4707              	// 	_ADR	RFROM			//  a
 4708              		_ADR	DROP
 4709              		_UNNEST
 4710              	DECOM1:	// _ADR	RFROM		//  a
 4711              		_ADR	AT			//  data
 4712              		_ADR	UDOT			//  display data
 4713              		_UNNEST
 4714              	DECOM2:
 4715              		_ADR	UDOT
 4716              	// 	_ADR	RFROM
 4717              		_ADR	DROP
 4718              		_UNNEST
 4719              	
 4720              	//    WORDS	( -- )
 4721              	// 	Display the names in the context vocabulary.
 4722              	
 4723              		.word	_DECOM
 4724              	.else 
 4725 28d4 94280000 		.word _DOTID 
 4726              	.endif 
 4727 28d8 05       	_WORDS:	.byte  5
 4728 28d9 574F5244 		.ascii "WORDS"
 4728      53
 4729 28de 00BF     		.p2align 2 	
 4730              	WORDS:
 4731 28e0 404700BF 		_NEST
 4732 28e4 95130000 		_ADR	CR
 4733 28e8 210B0000 		_ADR	CNTXT
 4734 28ec FD050000 		_ADR	AT			// only in context
 4735              	WORS1:
 4736 28f0 79080000 		_ADR	QDUP			// ?at end of list
 4737 28f4 BD050000 		_QBRAN	WORS2
 4737      18290000 
 4738 28fc A5060000 		_ADR	DUPP
 4739 2900 0D130000 		_ADR	SPACE
 4740 2904 99280000 		_ADR	DOTID			// display a name
 4741 2908 15080000 		_ADR	CELLM
 4742 290c FD050000 		_ADR	AT
 4743 2910 CF050000 		_BRAN	WORS1
 4743      F0280000 
 4744              	WORS2:
 4745 2918 1B040000 		_UNNEST
 4746              	
 4747              	// **************************************************************************
 4748              	//  cold start
ARM GAS  stm32eforth-fl.s 			page 93


 4749              	
 4750              	//    VER	 ( -- n )
 4751              	// 	Return the version number of this implementation.
 4752              	
 4753              	// 	.word	_WORDS
 4754              	// _VERSN	.byte  3
 4755              	// 	.ascii "VER"
 4756              	// 	.p2align 2 	
 4757              	VERSN:
 4758 291c 404700BF 		_NEST
 4759 2920 81050000 		_DOLIT	VER*256+EXT
 4759      00010000 
 4760 2928 1B040000 		_UNNEST
 4761              	
 4762              	//    hi	  ( -- )
 4763              	// 	Display the sign-on message of eForth.
 4764              	
 4765 292c D8280000 		.word	_WORDS
 4766 2930 02       	_HI:	.byte  2
 4767 2931 4849     		.ascii "HI"
 4768 2933 00       		.p2align 2 	
 4769              	HI:
 4770 2934 404700BF 		_NEST
 4771 2938 95130000 		_ADR	CR	// initialize I/O
 4772 293c FD130000 		_DOTQP	26, "blue pill stm32eForth-it v" 
 4772      1A626C75 
 4772      65207069 
 4772      6C6C2073 
 4772      746D3332 
 4773 295c 990A0000 		_ADR	BASE
 4774 2960 FD050000 		_ADR	AT
 4775 2964 05110000 		_ADR	HEX	// save radix
 4776 2968 1D290000 		_ADR	VERSN
 4777 296c F50F0000 		_ADR	BDIGS
 4778 2970 41100000 		_ADR	DIG
 4779 2974 41100000 		_ADR	DIG
 4780 2978 81050000 		_DOLIT	'.'
 4780      2E000000 
 4781 2980 15100000 		_ADR	HOLD
 4782 2984 61100000 		_ADR	DIGS
 4783 2988 B5100000 		_ADR	EDIGS
 4784 298c 61130000 		_ADR	TYPEE	// format version number
 4785 2990 990A0000 		_ADR	BASE
 4786 2994 E9050000 		_ADR	STORE
 4787 2998 95130000 		_ADR	CR
 4788 299c 1B040000 		_UNNEST			// restore radix
 4789              	
 4790              	//    COLD	( -- )
 4791              	// 	The high level cold start sequence.
 4792              	
 4793 29a0 30290000 		.word	_HI
 4794 29a4 04       	LASTN:	.byte  4
 4795 29a5 434F4C44 		.ascii "COLD"
 4796 29a9 0000BF   		.p2align 2	
 4797              	COLD:
 4798 29ac 00B5FDF7 		_CALL vm_init 
 4798      E7FB5DF8 
ARM GAS  stm32eforth-fl.s 			page 94


 4798      04EB
 4799 29b6 1648     		ldr R0,=COLD1 
 4800 29b8 FDF72CBD 		_NEXT
 4801              		.p2align 2 
 4802              	COLD1:
 4803 29bc 81050000 		_DOLIT  0 
 4803      00000000 
 4804 29c4 01000000 		_ADR ULED // turn off user LED 
 4805 29c8 81050000 		_DOLIT	UZERO
 4805      00020000 
 4806 29d0 81050000 		_DOLIT	UPP
 4806      00000020 
 4807 29d8 81050000 		_DOLIT	ULAST-UZERO
 4807      54000000 
 4808 29e0 C50E0000 		_ADR	MOVE 			// initialize user area
 4809 29e4 AD1B0000 		_ADR	PRESE			// initialize stack and TIB
 4810 29e8 451D0000 		_ADR IMGQ		// if there is a saved image load it  
 4811 29ec BD050000 		_QBRAN 1f
 4811      F8290000 
 4812 29f4 751D0000 		_ADR	LOAD_IMG 
 4813              	1:
 4814 29f8 850A0000 		_ADR	TBOOT
 4815 29fc 750E0000 		_ADR	ATEXE			// application boot
 4816 2a00 71240000 		_ADR	OVERT
 4817 2a04 CF050000 		_BRAN	QUIT			// start interpretation
 4817      CC1B0000 
 4818              	COLD2:
 4819              		.p2align 2 	
 4820              	CTOP:
 4821 2a0c FFFFFFFF 		.word	0XFFFFFFFF		//  keep CTOP even
 4822              	
 4823              		.section .text.user, "a", %progbits 
 4824              		.p2align 10 
 4825              	USER_SPACE: // save user image here.  
 4826 0000 FFFFFFFF 		.word 0XFFFFFFFF
 4827              	
 4828              	  .end 
ARM GAS  stm32eforth-fl.s 			page 95


DEFINED SYMBOLS
       stm32f103.inc:5      *ABS*:0000000020000000 RAM_ADR
       stm32f103.inc:6      *ABS*:0000000000005000 RAM_SIZE
       stm32f103.inc:7      *ABS*:0000000020005000 RAM_END
       stm32f103.inc:10     *ABS*:0000000022000000 RAM_BIT_ALIAS
       stm32f103.inc:14     *ABS*:0000000008000000 FLASH_ADR
       stm32f103.inc:15     *ABS*:0000000000010000 FLASH_SIZE
       stm32f103.inc:16     *ABS*:0000000008010000 FLASH_END
       stm32f103.inc:18     *ABS*:0000000008010000 FLASH_HIDDEN_ADR
       stm32f103.inc:19     *ABS*:0000000000010000 FLASH_HIDDEN_SIZE
       stm32f103.inc:20     *ABS*:0000000008020000 FLASH_HIDDEN_END
       stm32f103.inc:21     *ABS*:0000000000000400 PAGE_SIZE
       stm32f103.inc:24     *ABS*:000000001ffff000 SYS_MEM
       stm32f103.inc:25     *ABS*:0000000000000800 SYS_MEM_SIZE
       stm32f103.inc:28     *ABS*:000000001ffff800 OPTION
       stm32f103.inc:29     *ABS*:0000000000000010 OPT_SIZE
       stm32f103.inc:33     *ABS*:0000000040000000 PER_BASE_ADR
       stm32f103.inc:35     *ABS*:0000000042000000 PER_BIT_ALIAS
       stm32f103.inc:39     *ABS*:0000000040021000 RCC_BASE_ADR
       stm32f103.inc:41     *ABS*:0000000000000000 RCC_CR
       stm32f103.inc:42     *ABS*:0000000000000004 RCC_CFGR
       stm32f103.inc:43     *ABS*:0000000000000008 RCC_CIR
       stm32f103.inc:44     *ABS*:000000000000000c RCC_APB2RSTR
       stm32f103.inc:45     *ABS*:0000000000000010 RCC_APB1RSTR
       stm32f103.inc:46     *ABS*:0000000000000014 RCC_AHBENR
       stm32f103.inc:47     *ABS*:0000000000000018 RCC_APB2ENR
       stm32f103.inc:48     *ABS*:000000000000001c RCC_APB1ENR
       stm32f103.inc:49     *ABS*:0000000000000020 RCC_BDCR
       stm32f103.inc:50     *ABS*:0000000000000024 RCC_CSR
       stm32f103.inc:53     *ABS*:0000000040022000 FLASH_BASE_ADR
       stm32f103.inc:55     *ABS*:0000000000000000 FLASH_ACR
       stm32f103.inc:56     *ABS*:0000000000000004 FLASH_KEYR
       stm32f103.inc:57     *ABS*:0000000000000008 FLASH_OPTKEYR
       stm32f103.inc:58     *ABS*:000000000000000c FLASH_SR
       stm32f103.inc:59     *ABS*:0000000000000010 FLASH_CR
       stm32f103.inc:60     *ABS*:0000000000000014 FLASH_AR
       stm32f103.inc:61     *ABS*:000000000000001c FLASH_OBR
       stm32f103.inc:62     *ABS*:0000000000000020 FLASH_WRPR
       stm32f103.inc:63     *ABS*:00000000000000a5 RDPRT_KEY
       stm32f103.inc:64     *ABS*:0000000045670123 FLASH_KEY1
       stm32f103.inc:65     *ABS*:00000000cdef89ab FLASH_KEY2
       stm32f103.inc:68     *ABS*:0000000040010800 GPIOA_BASE_ADR
       stm32f103.inc:69     *ABS*:0000000040010c00 GPIOB_BASE_ADR
       stm32f103.inc:70     *ABS*:0000000040011000 GPIOC_BASE_ADR
       stm32f103.inc:71     *ABS*:0000000040011400 GPIOD_BASE_ADR
       stm32f103.inc:72     *ABS*:0000000040011800 GPIOE_BASE_ADR
       stm32f103.inc:73     *ABS*:0000000040018c00 GPIOF_BASE_ADR
       stm32f103.inc:74     *ABS*:0000000040012000 GPIOG_BASE_ADR
       stm32f103.inc:77     *ABS*:0000000000000000 GPIO_CRL
       stm32f103.inc:78     *ABS*:0000000000000004 GPIO_CRH
       stm32f103.inc:79     *ABS*:0000000000000008 GPIO_IDR
       stm32f103.inc:80     *ABS*:000000000000000c GPIO_ODR
       stm32f103.inc:81     *ABS*:0000000000000010 GPIO_BSRR
       stm32f103.inc:82     *ABS*:0000000000000014 GPIO_BRR
       stm32f103.inc:83     *ABS*:0000000000000018 GPIO_LOCKR
       stm32f103.inc:87     *ABS*:0000000040013800 USART1_BASE_ADR
       stm32f103.inc:89     *ABS*:0000000000000000 USART_SR
ARM GAS  stm32eforth-fl.s 			page 96


       stm32f103.inc:90     *ABS*:0000000000000004 USART_DR
       stm32f103.inc:91     *ABS*:0000000000000008 USART_BRR
       stm32f103.inc:92     *ABS*:000000000000000c USART_CR1
       stm32f103.inc:93     *ABS*:0000000000000010 USART_CR2
       stm32f103.inc:94     *ABS*:0000000000000014 USART_CR3
       stm32f103.inc:95     *ABS*:0000000000000018 USART_GTPR
       stm32f103.inc:98     *ABS*:00000000e000e010 STK_BASE_ADR
       stm32f103.inc:100    *ABS*:0000000000000000 STK_CTL
       stm32f103.inc:101    *ABS*:0000000000000004 STK_LOAD
       stm32f103.inc:102    *ABS*:0000000000000008 STK_VAL
       stm32f103.inc:103    *ABS*:000000000000000c STK_CALIB
       stm32f103.inc:106    *ABS*:00000000e000ed00 SCB_BASE_ADR
       stm32f103.inc:108    *ABS*:0000000000000000 SCB_CPUID
       stm32f103.inc:109    *ABS*:0000000000000004 SCB_ICSR
       stm32f103.inc:110    *ABS*:0000000000000008 SCB_VTOR
       stm32f103.inc:111    *ABS*:000000000000000c SCB_AIRCR
       stm32f103.inc:112    *ABS*:0000000000000010 SCB_SCR
       stm32f103.inc:113    *ABS*:0000000000000014 SCB_CCR
       stm32f103.inc:114    *ABS*:0000000000000018 SCB_SHPR1
       stm32f103.inc:115    *ABS*:000000000000001c SCB_SHPR2
       stm32f103.inc:116    *ABS*:0000000000000020 SCB_SHPR3
       stm32f103.inc:117    *ABS*:0000000000000024 SCB_SHCRS
       stm32f103.inc:118    *ABS*:0000000000000028 SCB_CFSR
       stm32f103.inc:119    *ABS*:000000000000002c SCB_HFSR
       stm32f103.inc:120    *ABS*:0000000000000034 SCB_MMAR
       stm32f103.inc:121    *ABS*:0000000000000038 SCB_BFAR
       stm32f103.inc:123    *ABS*:00000000000005fa SCB_VECTKEY
       stm32f103.inc:126    *ABS*:00000000e000e100 NVIC_BASE_ADR
       stm32f103.inc:127    *ABS*:0000000000000000 NVIC_ISER0
       stm32f103.inc:128    *ABS*:0000000000000004 NVIC_ISER1
       stm32f103.inc:129    *ABS*:0000000000000008 NVIC_ISER2
       stm32f103.inc:130    *ABS*:0000000000000080 NVIC_ICER0
       stm32f103.inc:131    *ABS*:0000000000000084 NVIC_ICER1
       stm32f103.inc:132    *ABS*:0000000000000088 NVIC_ICER2
       stm32f103.inc:133    *ABS*:0000000000000100 NVIC_ISPR0
       stm32f103.inc:134    *ABS*:0000000000000104 NVIC_ISPR1
       stm32f103.inc:135    *ABS*:0000000000000108 NVIC_ISPR2
       stm32f103.inc:136    *ABS*:0000000000000180 NVIC_ICPR0
       stm32f103.inc:137    *ABS*:0000000000000184 NVIC_ICPR1
       stm32f103.inc:138    *ABS*:0000000000000188 NVIC_ICPR2
       stm32f103.inc:139    *ABS*:0000000000000200 NVIC_IABR0
       stm32f103.inc:140    *ABS*:0000000000000204 NVIC_IABR1
       stm32f103.inc:141    *ABS*:0000000000000208 NVIC_IABR2
       stm32f103.inc:142    *ABS*:0000000000000300 NVIC_IPR_BASE
    stm32eforth-fl.s:91     *ABS*:0000000040011000 LED_GPIO
    stm32eforth-fl.s:92     *ABS*:000000000000000d LED_PIN
    stm32eforth-fl.s:93     *ABS*:0000000040013800 UART
    stm32eforth-fl.s:96     *ABS*:0000000020004e80 SPP
    stm32eforth-fl.s:97     *ABS*:0000000020004e80 TIBB
    stm32eforth-fl.s:98     *ABS*:0000000020004f80 RPP
    stm32eforth-fl.s:99     *ABS*:0000000020000000 UPP
    stm32eforth-fl.s:100    *ABS*:0000000020000100 DTOP
    stm32eforth-fl.s:101    *ABS*:0000000020004e00 DEND
    stm32eforth-fl.s:102    *ABS*:0000000020000000 RAMOFFSET
    stm32eforth-fl.s:103    *ABS*:0000000020005000 RAMEND
    stm32eforth-fl.s:108    *ABS*:0000000000000004 SEED_OFS
    stm32eforth-fl.s:109    *ABS*:0000000000000008 TICKS_OFS
ARM GAS  stm32eforth-fl.s 			page 97


    stm32eforth-fl.s:110    *ABS*:000000000000000c TIMER_OFS
    stm32eforth-fl.s:111    *ABS*:0000000000000010 FTRACE_OFS
    stm32eforth-fl.s:112    *ABS*:0000000000000014 IMG_SIGN_OFS
    stm32eforth-fl.s:113    *ABS*:0000000000000018 BOOT_OFS
    stm32eforth-fl.s:114    *ABS*:000000000000001c BASE_OFS
    stm32eforth-fl.s:115    *ABS*:0000000000000020 TMP_OFS
    stm32eforth-fl.s:116    *ABS*:0000000000000024 SPAN_OFS
    stm32eforth-fl.s:117    *ABS*:0000000000000028 TOIN_OFS
    stm32eforth-fl.s:118    *ABS*:000000000000002c NTIB_OFS
    stm32eforth-fl.s:119    *ABS*:0000000000000030 TIB_OFS
    stm32eforth-fl.s:120    *ABS*:0000000000000034 EVAL_OFS
    stm32eforth-fl.s:121    *ABS*:0000000000000038 HLD_OFS
    stm32eforth-fl.s:122    *ABS*:000000000000003c CTXT_OFS
    stm32eforth-fl.s:123    *ABS*:0000000000000040 FORTH_CTOP_OFS
    stm32eforth-fl.s:124    *ABS*:0000000000000044 RAM_CTOP_OFS
    stm32eforth-fl.s:125    *ABS*:0000000000000048 LASTN_OFS
    stm32eforth-fl.s:126    *ABS*:000000000000004c VARS_END_OFS
    stm32eforth-fl.s:128    *ABS*:0000000000000010 RX_QUEUE_SIZE
    stm32eforth-fl.s:129    *ABS*:0000000000000050 RX_QUEUE_OFS
    stm32eforth-fl.s:130    *ABS*:0000000000000060 RX_HEAD_OFS
    stm32eforth-fl.s:131    *ABS*:0000000000000064 RX_TAIL_OFS
    stm32eforth-fl.s:223    .isr_vector:0000000000000000 isr_vectors
    stm32eforth-fl.s:517    .text:000000000000016c reset_handler
    stm32eforth-fl.s:339    .text:0000000000000000 default_handler
    stm32eforth-fl.s:497    .text:0000000000000158 systick_handler
    stm32eforth-fl.s:461    .text:0000000000000100 uart_rx_handler
    stm32eforth-fl.s:305    .isr_vector:0000000000000130 $d
    stm32eforth-fl.s:307    .isr_vector:0000000000000200 UZERO
    stm32eforth-fl.s:4769   .text:0000000000002934 HI
                            *ABS*:000000000000000a BASEE
    stm32eforth-fl.s:3358   .text:0000000000001a84 INTER
    stm32eforth-fl.s:4794   .text:00000000000029a4 LASTN
    stm32eforth-fl.s:4820   .text:0000000000002a0c CTOP
    stm32eforth-fl.s:328    .isr_vector:0000000000000254 ULAST
    stm32eforth-fl.s:337    .text:0000000000000000 $t
    stm32eforth-fl.s:529    .text:0000000000000180 vm_init
    stm32eforth-fl.s:363    .text:000000000000003c word_that_crashed
    stm32eforth-fl.s:709    .text:0000000000000414 INEXT
    stm32eforth-fl.s:353    .text:0000000000000024 exception_msg
    stm32eforth-fl.s:441    .text:00000000000000cc uart_puts
    stm32eforth-fl.s:378    .text:0000000000000068 reboot
    stm32eforth-fl.s:354    .text:0000000000000024 $d
    stm32eforth-fl.s:364    .text:000000000000003c $d
    stm32eforth-fl.s:2694   .text:0000000000001394 CR
    stm32eforth-fl.s:4606   .text:0000000000002840 TNAME
    stm32eforth-fl.s:1394   .text:0000000000000878 QDUP
    stm32eforth-fl.s:916    .text:00000000000005bc QBRAN
    stm32eforth-fl.s:1642   .text:0000000000000a00 COUNT
    stm32eforth-fl.s:2674   .text:0000000000001360 TYPEE
    stm32eforth-fl.s:933    .text:00000000000005ce BRAN
    stm32eforth-fl.s:386    .text:0000000000000078 scb_adr
    stm32eforth-fl.s:379    .text:0000000000000068 $t
    stm32eforth-fl.s:387    .text:0000000000000078 $d
    stm32eforth-fl.s:398    .text:000000000000007c uart_init
    stm32eforth-fl.s:400    .text:000000000000007c $t
    stm32eforth-fl.s:426    .text:00000000000000be uart_tx
    stm32eforth-fl.s:481    .text:000000000000013a user_reboot
ARM GAS  stm32eforth-fl.s 			page 98


    stm32eforth-fl.s:485    .text:0000000000000144 user_reboot_msg
    stm32eforth-fl.s:486    .text:0000000000000144 $d
    stm32eforth-fl.s:489    .text:0000000000000156 $t
    stm32eforth-fl.s:505    .text:000000000000016a systick_exit
    stm32eforth-fl.s:620    .text:0000000000000244 remap
    stm32eforth-fl.s:545    .text:00000000000001a8 init_devices
    stm32eforth-fl.s:3480   .text:0000000000001bec unlock
    stm32eforth-fl.s:4797   .text:00000000000029ac COLD
    stm32eforth-fl.s:540    .text:00000000000001a2 nest_adr
    stm32eforth-fl.s:541    .text:00000000000001a2 $d
    stm32eforth-fl.s:705    .text:000000000000040c NEST
    stm32eforth-fl.s:544    .text:00000000000001a6 $t
    stm32eforth-fl.s:558    .text:00000000000001c6 wait_hserdy
    stm32eforth-fl.s:578    .text:00000000000001e0 wait_pllrdy
    stm32eforth-fl.s:590    .text:00000000000001fc wait_sws
    stm32eforth-fl.s:638    .text:0000000000000274 remap_dest
    stm32eforth-fl.s:636    .text:0000000000000270 remap_src
    stm32eforth-fl.s:637    .text:0000000000000270 $d
    stm32eforth-fl.s:644    *ABS*:0000000000000001 VER
    stm32eforth-fl.s:645    *ABS*:0000000000000000 EXT
    stm32eforth-fl.s:649    *ABS*:0000000000000040 COMPO
    stm32eforth-fl.s:650    *ABS*:0000000000000080 IMEDD
    stm32eforth-fl.s:651    *ABS*:00000000ffffff1f MASKK
    stm32eforth-fl.s:653    *ABS*:0000000000000004 CELLL
    stm32eforth-fl.s:655    *ABS*:0000000000000008 VOCSS
    stm32eforth-fl.s:657    *ABS*:0000000000000008 BKSPP
    stm32eforth-fl.s:658    *ABS*:000000000000000a LF
    stm32eforth-fl.s:659    *ABS*:000000000000000d CRR
    stm32eforth-fl.s:660    *ABS*:000000000000001b ERR
    stm32eforth-fl.s:661    *ABS*:0000000000000027 TIC
    stm32eforth-fl.s:682    .text:0000000000000278 $t
    stm32eforth-fl.s:694    .text:0000000000000400 TPUSH
    stm32eforth-fl.s:699    .text:0000000000000406 TPOP
    stm32eforth-fl.s:712    .text:000000000000041a UNNEST
    stm32eforth-fl.s:725    .text:0000000000000424 COMPI_NEST
    stm32eforth-fl.s:740    .text:0000000000000442 $d
    stm32eforth-fl.s:741    .text:0000000000000446 _RAND
    stm32eforth-fl.s:744    .text:0000000000000450 RAND
    stm32eforth-fl.s:746    .text:0000000000000454 $d
    stm32eforth-fl.s:1484   .text:0000000000000908 ABSS
    stm32eforth-fl.s:1702   .text:0000000000000a48 SEED
    stm32eforth-fl.s:967    .text:00000000000005fc AT
    stm32eforth-fl.s:1084   .text:00000000000006a4 DUPP
    stm32eforth-fl.s:868    .text:0000000000000580 DOLIT
    stm32eforth-fl.s:1196   .text:0000000000000758 LSHIFT
    stm32eforth-fl.s:1157   .text:0000000000000710 XORR
    stm32eforth-fl.s:1184   .text:0000000000000740 RSHIFT
    stm32eforth-fl.s:954    .text:00000000000005e8 STORE
    stm32eforth-fl.s:1133   .text:00000000000006e8 ANDD
    stm32eforth-fl.s:1095   .text:00000000000006b4 SWAP
    stm32eforth-fl.s:2050   .text:0000000000000cf8 MODD
    stm32eforth-fl.s:774    .text:00000000000004c4 _PAUSE
    stm32eforth-fl.s:776    .text:00000000000004ca $t
    stm32eforth-fl.s:777    .text:00000000000004cc PAUSE
    stm32eforth-fl.s:779    .text:00000000000004d0 $d
    stm32eforth-fl.s:1724   .text:0000000000000a70 TIMER
    stm32eforth-fl.s:781    .text:00000000000004d8 PAUSE_LOOP
ARM GAS  stm32eforth-fl.s 			page 99


    stm32eforth-fl.s:786    .text:00000000000004f0 PAUSE_EXIT
    stm32eforth-fl.s:792    .text:00000000000004f8 _ULED
    stm32eforth-fl.s:796    .text:0000000000000500 ULED
    stm32eforth-fl.s:804    .text:0000000000000518 ULED_OFF
    stm32eforth-fl.s:810    .text:000000000000051c $d
    stm32eforth-fl.s:811    .text:0000000000000520 _QRX
    stm32eforth-fl.s:814    .text:0000000000000528 QKEY
    stm32eforth-fl.s:815    .text:0000000000000528 QRX
    stm32eforth-fl.s:834    .text:0000000000000552 $d
    stm32eforth-fl.s:835    .text:0000000000000556 _TXSTO
    stm32eforth-fl.s:838    .text:000000000000055c TXSTO
    stm32eforth-fl.s:839    .text:000000000000055c EMIT
    stm32eforth-fl.s:840    .text:000000000000055c TECHO
    stm32eforth-fl.s:853    .text:0000000000000574 $d
    stm32eforth-fl.s:854    .text:0000000000000578 _NOP
    stm32eforth-fl.s:856    .text:000000000000057c $t
    stm32eforth-fl.s:857    .text:000000000000057c NOP
    stm32eforth-fl.s:876    .text:000000000000058a $d
    stm32eforth-fl.s:877    .text:000000000000058e _EXECU
    stm32eforth-fl.s:879    .text:0000000000000596 $t
    stm32eforth-fl.s:880    .text:0000000000000598 EXECU
    stm32eforth-fl.s:895    .text:00000000000005a4 DONXT
    stm32eforth-fl.s:902    .text:00000000000005b2 NEXT1
    stm32eforth-fl.s:922    .text:00000000000005c8 QBRAN1
    stm32eforth-fl.s:940    .text:00000000000005d2 $d
    stm32eforth-fl.s:941    .text:00000000000005d6 _EXIT
    stm32eforth-fl.s:944    .text:00000000000005dc EXIT
    stm32eforth-fl.s:945    .text:00000000000005dc $d
    stm32eforth-fl.s:951    .text:00000000000005e4 _STORE
    stm32eforth-fl.s:953    .text:00000000000005e6 $t
    stm32eforth-fl.s:963    .text:00000000000005f4 $d
    stm32eforth-fl.s:964    .text:00000000000005f8 _AT
    stm32eforth-fl.s:966    .text:00000000000005fa $t
    stm32eforth-fl.s:974    .text:0000000000000600 $d
    stm32eforth-fl.s:975    .text:0000000000000604 _CSTOR
    stm32eforth-fl.s:978    .text:0000000000000608 CSTOR
    stm32eforth-fl.s:987    .text:0000000000000614 $d
    stm32eforth-fl.s:988    .text:0000000000000618 _CAT
    stm32eforth-fl.s:991    .text:000000000000061c CAT
    stm32eforth-fl.s:998    .text:0000000000000620 $d
    stm32eforth-fl.s:999    .text:0000000000000624 _RFROM
    stm32eforth-fl.s:1002   .text:0000000000000628 RFROM
    stm32eforth-fl.s:1010   .text:0000000000000632 $d
    stm32eforth-fl.s:1011   .text:0000000000000636 _RAT
    stm32eforth-fl.s:1014   .text:000000000000063c RAT
    stm32eforth-fl.s:1022   .text:0000000000000644 $d
    stm32eforth-fl.s:1023   .text:0000000000000648 _TOR
    stm32eforth-fl.s:1026   .text:000000000000064c TOR
    stm32eforth-fl.s:1033   .text:0000000000000656 $d
    stm32eforth-fl.s:1034   .text:000000000000065a _RPSTOR
    stm32eforth-fl.s:1036   .text:000000000000065e $t
    stm32eforth-fl.s:1037   .text:0000000000000660 RPSTOR
    stm32eforth-fl.s:1045   .text:0000000000000668 $d
    stm32eforth-fl.s:1046   .text:000000000000066c _SPSTOR
    stm32eforth-fl.s:1048   .text:0000000000000670 $t
    stm32eforth-fl.s:1049   .text:0000000000000670 SPSTOR
    stm32eforth-fl.s:1057   .text:0000000000000678 $d
ARM GAS  stm32eforth-fl.s 			page 100


    stm32eforth-fl.s:1058   .text:000000000000067c _SPAT
    stm32eforth-fl.s:1060   .text:0000000000000680 $t
    stm32eforth-fl.s:1061   .text:0000000000000680 SPAT
    stm32eforth-fl.s:1069   .text:0000000000000688 $d
    stm32eforth-fl.s:1070   .text:000000000000068c _DROP
    stm32eforth-fl.s:1073   .text:0000000000000694 DROP
    stm32eforth-fl.s:1080   .text:000000000000069a $d
    stm32eforth-fl.s:1081   .text:000000000000069e _DUPP
    stm32eforth-fl.s:1083   .text:00000000000006a2 $t
    stm32eforth-fl.s:1091   .text:00000000000006aa $d
    stm32eforth-fl.s:1092   .text:00000000000006ae _SWAP
    stm32eforth-fl.s:1104   .text:00000000000006bc $d
    stm32eforth-fl.s:1105   .text:00000000000006c0 _OVER
    stm32eforth-fl.s:1108   .text:00000000000006c8 OVER
    stm32eforth-fl.s:1116   .text:00000000000006d0 $d
    stm32eforth-fl.s:1117   .text:00000000000006d4 _ZLESS
    stm32eforth-fl.s:1120   .text:00000000000006d8 ZLESS
    stm32eforth-fl.s:1129   .text:00000000000006de $d
    stm32eforth-fl.s:1130   .text:00000000000006e2 _ANDD
    stm32eforth-fl.s:1132   .text:00000000000006e6 $t
    stm32eforth-fl.s:1141   .text:00000000000006f2 $d
    stm32eforth-fl.s:1142   .text:00000000000006f6 _ORR
    stm32eforth-fl.s:1145   .text:00000000000006fc ORR
    stm32eforth-fl.s:1153   .text:0000000000000706 $d
    stm32eforth-fl.s:1154   .text:000000000000070a _XORR
    stm32eforth-fl.s:1156   .text:000000000000070e $t
    stm32eforth-fl.s:1165   .text:000000000000071a $d
    stm32eforth-fl.s:1166   .text:000000000000071e _UPLUS
    stm32eforth-fl.s:1168   .text:0000000000000722 $t
    stm32eforth-fl.s:1169   .text:0000000000000724 UPLUS
    stm32eforth-fl.s:1180   .text:0000000000000734 $d
    stm32eforth-fl.s:1181   .text:0000000000000738 _RSHIFT
    stm32eforth-fl.s:1192   .text:000000000000074a $d
    stm32eforth-fl.s:1193   .text:000000000000074e _LSHIFT
    stm32eforth-fl.s:1204   .text:0000000000000762 $d
    stm32eforth-fl.s:1205   .text:0000000000000766 _PLUS
    stm32eforth-fl.s:1207   .text:0000000000000768 $t
    stm32eforth-fl.s:1208   .text:0000000000000768 PLUS
    stm32eforth-fl.s:1216   .text:0000000000000770 $d
    stm32eforth-fl.s:1217   .text:0000000000000774 _SUBB
    stm32eforth-fl.s:1219   .text:0000000000000776 $t
    stm32eforth-fl.s:1220   .text:0000000000000778 SUBB
    stm32eforth-fl.s:1228   .text:0000000000000782 $d
    stm32eforth-fl.s:1229   .text:0000000000000786 _STAR
    stm32eforth-fl.s:1231   .text:0000000000000788 $t
    stm32eforth-fl.s:1232   .text:0000000000000788 STAR
    stm32eforth-fl.s:1240   .text:0000000000000792 $d
    stm32eforth-fl.s:1241   .text:0000000000000796 _UMSTA
    stm32eforth-fl.s:1243   .text:000000000000079a $t
    stm32eforth-fl.s:1244   .text:000000000000079c UMSTA
    stm32eforth-fl.s:1254   .text:00000000000007a8 $d
    stm32eforth-fl.s:1255   .text:00000000000007ac _MSTAR
    stm32eforth-fl.s:1258   .text:00000000000007b0 MSTAR
    stm32eforth-fl.s:1268   .text:00000000000007bc $d
    stm32eforth-fl.s:1269   .text:00000000000007c0 _ONEP
    stm32eforth-fl.s:1272   .text:00000000000007c4 ONEP
    stm32eforth-fl.s:1279   .text:00000000000007ca $d
ARM GAS  stm32eforth-fl.s 			page 101


    stm32eforth-fl.s:1280   .text:00000000000007ce _ONEM
    stm32eforth-fl.s:1283   .text:00000000000007d4 ONEM
    stm32eforth-fl.s:1290   .text:00000000000007da $d
    stm32eforth-fl.s:1291   .text:00000000000007de _TWOP
    stm32eforth-fl.s:1294   .text:00000000000007e4 TWOP
    stm32eforth-fl.s:1301   .text:00000000000007ea $d
    stm32eforth-fl.s:1302   .text:00000000000007ee _TWOM
    stm32eforth-fl.s:1305   .text:00000000000007f4 TWOM
    stm32eforth-fl.s:1312   .text:00000000000007fa $d
    stm32eforth-fl.s:1313   .text:00000000000007fe _CELLP
    stm32eforth-fl.s:1315   .text:0000000000000804 $t
    stm32eforth-fl.s:1316   .text:0000000000000804 CELLP
    stm32eforth-fl.s:1323   .text:000000000000080a $d
    stm32eforth-fl.s:1324   .text:000000000000080e _CELLM
    stm32eforth-fl.s:1326   .text:0000000000000814 $t
    stm32eforth-fl.s:1327   .text:0000000000000814 CELLM
    stm32eforth-fl.s:1334   .text:000000000000081a $d
    stm32eforth-fl.s:1335   .text:000000000000081e _BLANK
    stm32eforth-fl.s:1338   .text:0000000000000824 BLANK
    stm32eforth-fl.s:1346   .text:000000000000082e $d
    stm32eforth-fl.s:1347   .text:0000000000000832 _CELLS
    stm32eforth-fl.s:1349   .text:0000000000000838 $t
    stm32eforth-fl.s:1350   .text:0000000000000838 CELLS
    stm32eforth-fl.s:1357   .text:000000000000083e $d
    stm32eforth-fl.s:1358   .text:0000000000000842 _CELLSL
    stm32eforth-fl.s:1360   .text:0000000000000848 $t
    stm32eforth-fl.s:1361   .text:0000000000000848 CELLSL
    stm32eforth-fl.s:1368   .text:000000000000084e $d
    stm32eforth-fl.s:1369   .text:0000000000000852 _TWOST
    stm32eforth-fl.s:1372   .text:0000000000000858 TWOST
    stm32eforth-fl.s:1379   .text:000000000000085e $d
    stm32eforth-fl.s:1380   .text:0000000000000862 _TWOSL
    stm32eforth-fl.s:1383   .text:0000000000000868 TWOSL
    stm32eforth-fl.s:1390   .text:000000000000086e $d
    stm32eforth-fl.s:1391   .text:0000000000000872 _QDUP
    stm32eforth-fl.s:1403   .text:0000000000000882 $d
    stm32eforth-fl.s:1404   .text:0000000000000886 _ROT
    stm32eforth-fl.s:1406   .text:000000000000088a $t
    stm32eforth-fl.s:1407   .text:000000000000088c ROT
    stm32eforth-fl.s:1417   .text:0000000000000896 $d
    stm32eforth-fl.s:1418   .text:000000000000089a _DDROP
    stm32eforth-fl.s:1420   .text:00000000000008a0 $t
    stm32eforth-fl.s:1421   .text:00000000000008a0 DDROP
    stm32eforth-fl.s:1429   .text:00000000000008aa $d
    stm32eforth-fl.s:1430   .text:00000000000008ae _DDUP
    stm32eforth-fl.s:1433   .text:00000000000008b4 DDUP
    stm32eforth-fl.s:1442   .text:00000000000008c0 $d
    stm32eforth-fl.s:1443   .text:00000000000008c4 _DPLUS
    stm32eforth-fl.s:1446   .text:00000000000008c8 DPLUS
    stm32eforth-fl.s:1458   .text:00000000000008dc $d
    stm32eforth-fl.s:1459   .text:00000000000008e0 _INVER
    stm32eforth-fl.s:1461   .text:00000000000008e4 $t
    stm32eforth-fl.s:1462   .text:00000000000008e4 INVER
    stm32eforth-fl.s:1469   .text:00000000000008ea $d
    stm32eforth-fl.s:1470   .text:00000000000008ee _NEGAT
    stm32eforth-fl.s:1473   .text:00000000000008f8 NEGAT
    stm32eforth-fl.s:1480   .text:00000000000008fe $d
ARM GAS  stm32eforth-fl.s 			page 102


    stm32eforth-fl.s:1481   .text:0000000000000902 _ABSS
    stm32eforth-fl.s:1483   .text:0000000000000906 $t
    stm32eforth-fl.s:1493   .text:0000000000000912 $d
    stm32eforth-fl.s:1494   .text:0000000000000916 _ZEQUAL
    stm32eforth-fl.s:1497   .text:000000000000091c ZEQUAL
    stm32eforth-fl.s:1507   .text:000000000000092a $d
    stm32eforth-fl.s:1508   .text:000000000000092e _EQUAL
    stm32eforth-fl.s:1510   .text:0000000000000930 $t
    stm32eforth-fl.s:1511   .text:0000000000000930 EQUAL
    stm32eforth-fl.s:1522   .text:0000000000000940 $d
    stm32eforth-fl.s:1523   .text:0000000000000944 _ULESS
    stm32eforth-fl.s:1526   .text:0000000000000948 ULESS
    stm32eforth-fl.s:1537   .text:0000000000000958 $d
    stm32eforth-fl.s:1538   .text:000000000000095c _LESS
    stm32eforth-fl.s:1540   .text:000000000000095e $t
    stm32eforth-fl.s:1541   .text:0000000000000960 LESS
    stm32eforth-fl.s:1552   .text:0000000000000970 $d
    stm32eforth-fl.s:1553   .text:0000000000000974 _GREAT
    stm32eforth-fl.s:1555   .text:0000000000000976 $t
    stm32eforth-fl.s:1556   .text:0000000000000978 GREAT
    stm32eforth-fl.s:1567   .text:0000000000000988 $d
    stm32eforth-fl.s:1568   .text:000000000000098c _MAX
    stm32eforth-fl.s:1570   .text:0000000000000990 $t
    stm32eforth-fl.s:1571   .text:0000000000000990 MAX
    stm32eforth-fl.s:1581   .text:000000000000099c $d
    stm32eforth-fl.s:1582   .text:00000000000009a0 _MIN
    stm32eforth-fl.s:1584   .text:00000000000009a4 $t
    stm32eforth-fl.s:1585   .text:00000000000009a4 MIN
    stm32eforth-fl.s:1595   .text:00000000000009b0 $d
    stm32eforth-fl.s:1596   .text:00000000000009b4 _PSTOR
    stm32eforth-fl.s:1599   .text:00000000000009b8 PSTOR
    stm32eforth-fl.s:1610   .text:00000000000009c8 $d
    stm32eforth-fl.s:1611   .text:00000000000009cc _DSTOR
    stm32eforth-fl.s:1614   .text:00000000000009d0 DSTOR
    stm32eforth-fl.s:1625   .text:00000000000009e4 $d
    stm32eforth-fl.s:1626   .text:00000000000009e8 _DAT
    stm32eforth-fl.s:1629   .text:00000000000009ec DAT
    stm32eforth-fl.s:1638   .text:00000000000009f6 $d
    stm32eforth-fl.s:1639   .text:00000000000009fa _COUNT
    stm32eforth-fl.s:1641   .text:0000000000000a00 $t
    stm32eforth-fl.s:1651   .text:0000000000000a0c $d
    stm32eforth-fl.s:1652   .text:0000000000000a10 _DNEGA
    stm32eforth-fl.s:1654   .text:0000000000000a18 $t
    stm32eforth-fl.s:1655   .text:0000000000000a18 DNEGA
    stm32eforth-fl.s:1673   .text:0000000000000a28 DOVAR
    stm32eforth-fl.s:1686   .text:0000000000000a34 DOCON
    stm32eforth-fl.s:1698   .text:0000000000000a3e $d
    stm32eforth-fl.s:1699   .text:0000000000000a42 _SEED
    stm32eforth-fl.s:1709   .text:0000000000000a52 $d
    stm32eforth-fl.s:1710   .text:0000000000000a56 _MSEC
    stm32eforth-fl.s:1713   .text:0000000000000a5c MSEC
    stm32eforth-fl.s:1720   .text:0000000000000a66 $d
    stm32eforth-fl.s:1721   .text:0000000000000a6a _TIMER
    stm32eforth-fl.s:1723   .text:0000000000000a70 $t
    stm32eforth-fl.s:1732   .text:0000000000000a7a $d
    stm32eforth-fl.s:1733   .text:0000000000000a7e _TBOOT
    stm32eforth-fl.s:1735   .text:0000000000000a84 $t
ARM GAS  stm32eforth-fl.s 			page 103


    stm32eforth-fl.s:1736   .text:0000000000000a84 TBOOT
    stm32eforth-fl.s:1744   .text:0000000000000a8e $d
    stm32eforth-fl.s:1745   .text:0000000000000a92 _BASE
    stm32eforth-fl.s:1748   .text:0000000000000a98 BASE
    stm32eforth-fl.s:1760   .text:0000000000000aa2 TEMP
    stm32eforth-fl.s:1768   .text:0000000000000aac $d
    stm32eforth-fl.s:1769   .text:0000000000000ab0 _SPAN
    stm32eforth-fl.s:1772   .text:0000000000000ab8 SPAN
    stm32eforth-fl.s:1780   .text:0000000000000ac2 $d
    stm32eforth-fl.s:1781   .text:0000000000000ac6 _INN
    stm32eforth-fl.s:1783   .text:0000000000000aca $t
    stm32eforth-fl.s:1784   .text:0000000000000acc INN
    stm32eforth-fl.s:1792   .text:0000000000000ad6 $d
    stm32eforth-fl.s:1793   .text:0000000000000ada _NTIB
    stm32eforth-fl.s:1796   .text:0000000000000ae0 NTIB
    stm32eforth-fl.s:1804   .text:0000000000000aea $d
    stm32eforth-fl.s:1805   .text:0000000000000aee _TEVAL
    stm32eforth-fl.s:1807   .text:0000000000000af4 $t
    stm32eforth-fl.s:1808   .text:0000000000000af4 TEVAL
    stm32eforth-fl.s:1816   .text:0000000000000afe $d
    stm32eforth-fl.s:1817   .text:0000000000000b02 _HLD
    stm32eforth-fl.s:1819   .text:0000000000000b06 $t
    stm32eforth-fl.s:1820   .text:0000000000000b08 HLD
    stm32eforth-fl.s:1828   .text:0000000000000b12 $d
    stm32eforth-fl.s:1829   .text:0000000000000b16 _CNTXT
    stm32eforth-fl.s:1831   .text:0000000000000b1e $t
    stm32eforth-fl.s:1832   .text:0000000000000b20 CNTXT
    stm32eforth-fl.s:1833   .text:0000000000000b20 CRRNT
    stm32eforth-fl.s:1841   .text:0000000000000b2a $d
    stm32eforth-fl.s:1842   .text:0000000000000b2e _CP
    stm32eforth-fl.s:1845   .text:0000000000000b34 CPP
    stm32eforth-fl.s:1852   .text:0000000000000b3e $d
    stm32eforth-fl.s:1853   .text:0000000000000b42 _FCP
    stm32eforth-fl.s:1855   .text:0000000000000b46 $t
    stm32eforth-fl.s:1856   .text:0000000000000b48 FCP
    stm32eforth-fl.s:1864   .text:0000000000000b52 $d
    stm32eforth-fl.s:1865   .text:0000000000000b56 _LAST
    stm32eforth-fl.s:1868   .text:0000000000000b5c LAST
    stm32eforth-fl.s:1875   .text:0000000000000b66 $d
    stm32eforth-fl.s:1876   .text:0000000000000b6a _FTRACE
    stm32eforth-fl.s:1879   .text:0000000000000b74 FTRACE
    stm32eforth-fl.s:1890   .text:0000000000000b7e $d
    stm32eforth-fl.s:1891   .text:0000000000000b82 _USER_BGN
    stm32eforth-fl.s:1894   .text:0000000000000b90 USER_BEGIN
    stm32eforth-fl.s:1898   .text:0000000000000b98 USR_BGN_ADR
    stm32eforth-fl.s:1899   .text:0000000000000b98 $d
    stm32eforth-fl.s:1904   .text:0000000000000ba0 _USER_END
    stm32eforth-fl.s:1907   .text:0000000000000bac USER_END
    stm32eforth-fl.s:1911   .text:0000000000000bb4 USER_END_ADR
    stm32eforth-fl.s:1912   .text:0000000000000bb4 $d
    stm32eforth-fl.s:1917   .text:0000000000000bbc _IMG_ADR
    stm32eforth-fl.s:1919   .text:0000000000000bc4 $t
    stm32eforth-fl.s:1920   .text:0000000000000bc4 IMG_ADR
    stm32eforth-fl.s:1924   .text:0000000000000bcc USR_IMG_ADR
    stm32eforth-fl.s:1925   .text:0000000000000bcc $d
    stm32eforth-fl.s:4825   .text.user:0000000000000000 USER_SPACE
    stm32eforth-fl.s:1930   .text:0000000000000bd4 _IMG_SIGN
ARM GAS  stm32eforth-fl.s 			page 104


    stm32eforth-fl.s:1933   .text:0000000000000be0 IMG_SIGN
    stm32eforth-fl.s:1945   .text:0000000000000bea $d
    stm32eforth-fl.s:1946   .text:0000000000000bee _WITHI
    stm32eforth-fl.s:1949   .text:0000000000000bf8 WITHI
    stm32eforth-fl.s:1951   .text:0000000000000bfc $d
    stm32eforth-fl.s:1965   .text:0000000000000c1c _UMMOD
    stm32eforth-fl.s:1968   .text:0000000000000c24 UMMOD
    stm32eforth-fl.s:1972   .text:0000000000000c2e UMMOD0
    stm32eforth-fl.s:1979   .text:0000000000000c3e UMMOD1
    stm32eforth-fl.s:1985   .text:0000000000000c48 UMMOD2
    stm32eforth-fl.s:1995   .text:0000000000000c54 $d
    stm32eforth-fl.s:1996   .text:0000000000000c58 _MSMOD
    stm32eforth-fl.s:1998   .text:0000000000000c5e $t
    stm32eforth-fl.s:1999   .text:0000000000000c60 MSMOD
    stm32eforth-fl.s:2001   .text:0000000000000c64 $d
    stm32eforth-fl.s:2010   .text:0000000000000c8c MMOD1
    stm32eforth-fl.s:2017   .text:0000000000000ca8 MMOD2
    stm32eforth-fl.s:2025   .text:0000000000000cc8 MMOD3
    stm32eforth-fl.s:2032   .text:0000000000000cd0 _SLMOD
    stm32eforth-fl.s:2035   .text:0000000000000cd8 SLMOD
    stm32eforth-fl.s:2037   .text:0000000000000cdc $d
    stm32eforth-fl.s:2047   .text:0000000000000cf4 _MODD
    stm32eforth-fl.s:2049   .text:0000000000000cf8 $t
    stm32eforth-fl.s:2052   .text:0000000000000cfc $d
    stm32eforth-fl.s:2060   .text:0000000000000d0c _SLASH
    stm32eforth-fl.s:2062   .text:0000000000000d0e $t
    stm32eforth-fl.s:2063   .text:0000000000000d10 SLASH
    stm32eforth-fl.s:2065   .text:0000000000000d14 $d
    stm32eforth-fl.s:2074   .text:0000000000000d28 _SSMOD
    stm32eforth-fl.s:2076   .text:0000000000000d2e $t
    stm32eforth-fl.s:2077   .text:0000000000000d30 SSMOD
    stm32eforth-fl.s:2079   .text:0000000000000d34 $d
    stm32eforth-fl.s:2089   .text:0000000000000d4c _STASL
    stm32eforth-fl.s:2092   .text:0000000000000d50 STASL
    stm32eforth-fl.s:2094   .text:0000000000000d54 $d
    stm32eforth-fl.s:2106   .text:0000000000000d68 _ALGND
    stm32eforth-fl.s:2108   .text:0000000000000d70 $t
    stm32eforth-fl.s:2109   .text:0000000000000d70 ALGND
    stm32eforth-fl.s:2118   .text:0000000000000d80 $d
    stm32eforth-fl.s:2119   .text:0000000000000d84 _TCHAR
    stm32eforth-fl.s:2121   .text:0000000000000d8a $t
    stm32eforth-fl.s:2122   .text:0000000000000d8c TCHAR
    stm32eforth-fl.s:2124   .text:0000000000000d90 $d
    stm32eforth-fl.s:2134   .text:0000000000000dc8 TCHA1
    stm32eforth-fl.s:2141   .text:0000000000000dd0 _DEPTH
    stm32eforth-fl.s:2143   .text:0000000000000dd6 $t
    stm32eforth-fl.s:2144   .text:0000000000000dd8 DEPTH
    stm32eforth-fl.s:2154   .text:0000000000000df0 $d
    stm32eforth-fl.s:2155   .text:0000000000000df4 _PICK
    stm32eforth-fl.s:2158   .text:0000000000000dfc PICK
    stm32eforth-fl.s:2160   .text:0000000000000e00 $d
    stm32eforth-fl.s:2174   .text:0000000000000e1c _HERE
    stm32eforth-fl.s:2177   .text:0000000000000e24 HERE
    stm32eforth-fl.s:2179   .text:0000000000000e28 $d
    stm32eforth-fl.s:2187   .text:0000000000000e38 _PAD
    stm32eforth-fl.s:2189   .text:0000000000000e3c $t
    stm32eforth-fl.s:2190   .text:0000000000000e3c PAD
ARM GAS  stm32eforth-fl.s 			page 105


    stm32eforth-fl.s:2192   .text:0000000000000e40 $d
    stm32eforth-fl.s:2201   .text:0000000000000e58 _TIB
    stm32eforth-fl.s:2203   .text:0000000000000e5c $t
    stm32eforth-fl.s:2204   .text:0000000000000e5c TIB
    stm32eforth-fl.s:2212   .text:0000000000000e66 $d
    stm32eforth-fl.s:2213   .text:0000000000000e6a _ATEXE
    stm32eforth-fl.s:2216   .text:0000000000000e74 ATEXE
    stm32eforth-fl.s:2228   .text:0000000000000e88 $d
    stm32eforth-fl.s:2229   .text:0000000000000e8c _CMOVE
    stm32eforth-fl.s:2231   .text:0000000000000e92 $t
    stm32eforth-fl.s:2232   .text:0000000000000e94 CMOVE
    stm32eforth-fl.s:2239   .text:0000000000000ea6 CMOV1
    stm32eforth-fl.s:2236   .text:0000000000000e9e CMOV0
    stm32eforth-fl.s:2244   .text:0000000000000eb0 CMOV2
    stm32eforth-fl.s:2251   .text:0000000000000eb8 $d
    stm32eforth-fl.s:2252   .text:0000000000000ebc _MOVE
    stm32eforth-fl.s:2255   .text:0000000000000ec4 MOVE
    stm32eforth-fl.s:2263   .text:0000000000000eda MOVE1
    stm32eforth-fl.s:2260   .text:0000000000000ed2 MOVE0
    stm32eforth-fl.s:2268   .text:0000000000000ee4 MOVE2
    stm32eforth-fl.s:2275   .text:0000000000000eec $d
    stm32eforth-fl.s:2276   .text:0000000000000ef0 _FILL
    stm32eforth-fl.s:2279   .text:0000000000000ef8 FILL
    stm32eforth-fl.s:2282   .text:0000000000000f00 FILL0
    stm32eforth-fl.s:2285   .text:0000000000000f04 FILL1
    stm32eforth-fl.s:2291   .text:0000000000000f12 FILL2
    stm32eforth-fl.s:2298   .text:0000000000000f1a $d
    stm32eforth-fl.s:2299   .text:0000000000000f1e _PACKS
    stm32eforth-fl.s:2302   .text:0000000000000f28 PACKS
    stm32eforth-fl.s:2304   .text:0000000000000f2c $d
    stm32eforth-fl.s:2331   .text:0000000000000f84 _DIGIT
    stm32eforth-fl.s:2333   .text:0000000000000f8a $t
    stm32eforth-fl.s:2334   .text:0000000000000f8c DIGIT
    stm32eforth-fl.s:2336   .text:0000000000000f90 $d
    stm32eforth-fl.s:2350   .text:0000000000000fc4 _EXTRC
    stm32eforth-fl.s:2352   .text:0000000000000fcc $t
    stm32eforth-fl.s:2353   .text:0000000000000fcc EXTRC
    stm32eforth-fl.s:2355   .text:0000000000000fd0 $d
    stm32eforth-fl.s:2366   .text:0000000000000ff0 _BDIGS
    stm32eforth-fl.s:2369   .text:0000000000000ff4 BDIGS
    stm32eforth-fl.s:2371   .text:0000000000000ff8 $d
    stm32eforth-fl.s:2380   .text:000000000000100c _HOLD
    stm32eforth-fl.s:2383   .text:0000000000001014 HOLD
    stm32eforth-fl.s:2385   .text:0000000000001018 $d
    stm32eforth-fl.s:2398   .text:000000000000103c _DIG
    stm32eforth-fl.s:2400   .text:000000000000103e $t
    stm32eforth-fl.s:2401   .text:0000000000001040 DIG
    stm32eforth-fl.s:2403   .text:0000000000001044 $d
    stm32eforth-fl.s:2413   .text:000000000000105c _DIGS
    stm32eforth-fl.s:2416   .text:0000000000001060 DIGS
    stm32eforth-fl.s:2418   .text:0000000000001064 DIGS1
    stm32eforth-fl.s:2419   .text:0000000000001064 $d
    stm32eforth-fl.s:2423   .text:000000000000107c DIGS2
    stm32eforth-fl.s:2430   .text:0000000000001084 _SIGN
    stm32eforth-fl.s:2433   .text:000000000000108c SIGN
    stm32eforth-fl.s:2435   .text:0000000000001090 $d
    stm32eforth-fl.s:2439   .text:00000000000010a8 SIGN1
ARM GAS  stm32eforth-fl.s 			page 106


    stm32eforth-fl.s:2446   .text:00000000000010b0 _EDIGS
    stm32eforth-fl.s:2449   .text:00000000000010b4 EDIGS
    stm32eforth-fl.s:2451   .text:00000000000010b8 $d
    stm32eforth-fl.s:2466   .text:00000000000010d4 STRR
    stm32eforth-fl.s:2467   .text:00000000000010d4 $t
    stm32eforth-fl.s:2468   .text:00000000000010d8 $d
    stm32eforth-fl.s:2482   .text:0000000000001100 _HEX
    stm32eforth-fl.s:2484   .text:0000000000001104 $t
    stm32eforth-fl.s:2485   .text:0000000000001104 HEX
    stm32eforth-fl.s:2487   .text:0000000000001108 $d
    stm32eforth-fl.s:2496   .text:0000000000001120 _DECIM
    stm32eforth-fl.s:2498   .text:0000000000001128 $t
    stm32eforth-fl.s:2499   .text:0000000000001128 DECIM
    stm32eforth-fl.s:2501   .text:000000000000112c $d
    stm32eforth-fl.s:2513   .text:0000000000001144 _DIGTQ
    stm32eforth-fl.s:2516   .text:000000000000114c DIGTQ
    stm32eforth-fl.s:2518   .text:0000000000001150 $d
    stm32eforth-fl.s:2531   .text:0000000000001198 DGTQ1
    stm32eforth-fl.s:2541   .text:00000000000011ac _NUMBQ
    stm32eforth-fl.s:2543   .text:00000000000011b4 $t
    stm32eforth-fl.s:2544   .text:00000000000011b4 NUMBQ
    stm32eforth-fl.s:2546   .text:00000000000011b8 $d
    stm32eforth-fl.s:2562   .text:0000000000001204 NUMQ1
    stm32eforth-fl.s:2610   .text:00000000000012cc NUMQ6
    stm32eforth-fl.s:2578   .text:0000000000001248 NUMQ2
    stm32eforth-fl.s:2602   .text:00000000000012b0 NUMQ4
    stm32eforth-fl.s:2599   .text:00000000000012a4 NUMQ3
    stm32eforth-fl.s:2608   .text:00000000000012c8 NUMQ5
    stm32eforth-fl.s:2625   .text:00000000000012e8 _KEY
    stm32eforth-fl.s:2627   .text:00000000000012ec $t
    stm32eforth-fl.s:2628   .text:00000000000012ec KEY
    stm32eforth-fl.s:2630   .text:00000000000012f0 KEY1
    stm32eforth-fl.s:2631   .text:00000000000012f0 $d
    stm32eforth-fl.s:2639   .text:0000000000001304 _SPACE
    stm32eforth-fl.s:2641   .text:000000000000130a $t
    stm32eforth-fl.s:2642   .text:000000000000130c SPACE
    stm32eforth-fl.s:2644   .text:0000000000001310 $d
    stm32eforth-fl.s:2652   .text:0000000000001320 _SPACS
    stm32eforth-fl.s:2655   .text:0000000000001328 SPACS
    stm32eforth-fl.s:2657   .text:000000000000132c $d
    stm32eforth-fl.s:2663   .text:0000000000001348 CHAR2
    stm32eforth-fl.s:2661   .text:0000000000001344 CHAR1
    stm32eforth-fl.s:2671   .text:0000000000001358 _TYPEE
    stm32eforth-fl.s:2676   .text:0000000000001364 $d
    stm32eforth-fl.s:2682   .text:000000000000137c TYPE2
    stm32eforth-fl.s:2678   .text:0000000000001370 TYPE1
    stm32eforth-fl.s:2691   .text:0000000000001390 _CR
    stm32eforth-fl.s:2696   .text:0000000000001398 $d
    stm32eforth-fl.s:2710   .text:00000000000013b4 DOSTR
    stm32eforth-fl.s:2711   .text:00000000000013b4 $t
    stm32eforth-fl.s:2713   .text:00000000000013b8 $d
    stm32eforth-fl.s:2732   .text:00000000000013e0 STRQP
    stm32eforth-fl.s:2733   .text:00000000000013e0 $t
    stm32eforth-fl.s:2734   .text:00000000000013e4 $d
    stm32eforth-fl.s:2744   .text:00000000000013ec DOTST
    stm32eforth-fl.s:2745   .text:00000000000013ec $t
    stm32eforth-fl.s:2746   .text:00000000000013f0 $d
ARM GAS  stm32eforth-fl.s 			page 107


    stm32eforth-fl.s:2757   .text:00000000000013fc DOTQP
    stm32eforth-fl.s:2758   .text:00000000000013fc $t
    stm32eforth-fl.s:2759   .text:0000000000001400 $d
    stm32eforth-fl.s:2767   .text:0000000000001410 _DOTR
    stm32eforth-fl.s:2770   .text:0000000000001414 DOTR
    stm32eforth-fl.s:2772   .text:0000000000001418 $d
    stm32eforth-fl.s:2785   .text:000000000000143c _UDOTR
    stm32eforth-fl.s:2787   .text:0000000000001440 $t
    stm32eforth-fl.s:2788   .text:0000000000001440 UDOTR
    stm32eforth-fl.s:2790   .text:0000000000001444 $d
    stm32eforth-fl.s:2805   .text:0000000000001470 _UDOT
    stm32eforth-fl.s:2808   .text:0000000000001474 UDOT
    stm32eforth-fl.s:2810   .text:0000000000001478 $d
    stm32eforth-fl.s:2821   .text:0000000000001494 _DOT
    stm32eforth-fl.s:2823   .text:0000000000001496 $t
    stm32eforth-fl.s:2824   .text:0000000000001498 DOT
    stm32eforth-fl.s:2826   .text:000000000000149c $d
    stm32eforth-fl.s:2833   .text:00000000000014c0 DOT1
    stm32eforth-fl.s:2843   .text:00000000000014d4 _QUEST
    stm32eforth-fl.s:2845   .text:00000000000014d6 $t
    stm32eforth-fl.s:2846   .text:00000000000014d8 QUEST
    stm32eforth-fl.s:2848   .text:00000000000014dc $d
    stm32eforth-fl.s:2862   .text:00000000000014e8 PARS
    stm32eforth-fl.s:2863   .text:00000000000014e8 $t
    stm32eforth-fl.s:2864   .text:00000000000014ec $d
    stm32eforth-fl.s:2930   .text:00000000000015fc PARS8
    stm32eforth-fl.s:2894   .text:0000000000001570 PARS3
    stm32eforth-fl.s:2877   .text:0000000000001528 PARS1
    stm32eforth-fl.s:2892   .text:000000000000156c PARS2
    stm32eforth-fl.s:2898   .text:000000000000157c PARS4
    stm32eforth-fl.s:2910   .text:00000000000015ac PARS5
    stm32eforth-fl.s:2917   .text:00000000000015d0 PARS6
    stm32eforth-fl.s:2923   .text:00000000000015e4 PARS7
    stm32eforth-fl.s:2940   .text:0000000000001610 _PARSE
    stm32eforth-fl.s:2942   .text:0000000000001616 $t
    stm32eforth-fl.s:2943   .text:0000000000001618 PARSE
    stm32eforth-fl.s:2945   .text:000000000000161c $d
    stm32eforth-fl.s:2965   .text:000000000000165c _DOTPR
    stm32eforth-fl.s:2968   .text:0000000000001660 DOTPR
    stm32eforth-fl.s:2970   .text:0000000000001664 $d
    stm32eforth-fl.s:2979   .text:000000000000167c _PAREN
    stm32eforth-fl.s:2981   .text:000000000000167e $t
    stm32eforth-fl.s:2982   .text:0000000000001680 PAREN
    stm32eforth-fl.s:2984   .text:0000000000001684 $d
    stm32eforth-fl.s:2993   .text:000000000000169c _BKSLA
    stm32eforth-fl.s:2995   .text:000000000000169e $t
    stm32eforth-fl.s:2996   .text:00000000000016a0 BKSLA
    stm32eforth-fl.s:2998   .text:00000000000016a4 $d
    stm32eforth-fl.s:3008   .text:00000000000016bc _CHAR
    stm32eforth-fl.s:3011   .text:00000000000016c4 CHAR
    stm32eforth-fl.s:3013   .text:00000000000016c8 $d
    stm32eforth-fl.s:3023   .text:00000000000016e0 _WORDD
    stm32eforth-fl.s:3026   .text:00000000000016e8 WORDD
    stm32eforth-fl.s:3028   .text:00000000000016ec $d
    stm32eforth-fl.s:3038   .text:0000000000001704 _TOKEN
    stm32eforth-fl.s:3040   .text:000000000000170a $t
    stm32eforth-fl.s:3041   .text:000000000000170c TOKEN
ARM GAS  stm32eforth-fl.s 			page 108


    stm32eforth-fl.s:3043   .text:0000000000001710 $d
    stm32eforth-fl.s:3054   .text:0000000000001720 _NAMET
    stm32eforth-fl.s:3056   .text:0000000000001726 $t
    stm32eforth-fl.s:3057   .text:0000000000001728 NAMET
    stm32eforth-fl.s:3059   .text:000000000000172c $d
    stm32eforth-fl.s:3075   .text:000000000000174c _SAMEQ
    stm32eforth-fl.s:3077   .text:0000000000001752 $t
    stm32eforth-fl.s:3078   .text:0000000000001754 SAMEQ
    stm32eforth-fl.s:3080   .text:0000000000001758 $d
    stm32eforth-fl.s:3097   .text:00000000000017a0 SAME2
    stm32eforth-fl.s:3082   .text:0000000000001764 SAME1
    stm32eforth-fl.s:3112   .text:00000000000017b4 FIND
    stm32eforth-fl.s:3113   .text:00000000000017b4 $t
    stm32eforth-fl.s:3114   .text:00000000000017b8 $d
    stm32eforth-fl.s:3121   .text:00000000000017d4 FIND1
    stm32eforth-fl.s:3141   .text:000000000000182c FIND6
    stm32eforth-fl.s:3134   .text:0000000000001814 FIND2
    stm32eforth-fl.s:3139   .text:0000000000001824 FIND3
    stm32eforth-fl.s:3148   .text:0000000000001844 FIND4
    stm32eforth-fl.s:3154   .text:0000000000001860 FIND5
    stm32eforth-fl.s:3169   .text:0000000000001888 _NAMEQ
    stm32eforth-fl.s:3171   .text:000000000000188e $t
    stm32eforth-fl.s:3172   .text:0000000000001890 NAMEQ
    stm32eforth-fl.s:3174   .text:0000000000001894 $d
    stm32eforth-fl.s:3189   .text:00000000000018a4 BKSP
    stm32eforth-fl.s:3190   .text:00000000000018a4 $t
    stm32eforth-fl.s:3191   .text:00000000000018a8 $d
    stm32eforth-fl.s:3205   .text:00000000000018ec BACK1
    stm32eforth-fl.s:3215   .text:00000000000018f0 TAP
    stm32eforth-fl.s:3216   .text:00000000000018f0 $t
    stm32eforth-fl.s:3217   .text:00000000000018f4 $d
    stm32eforth-fl.s:3231   .text:000000000000190c KTAP
    stm32eforth-fl.s:3232   .text:000000000000190c TTAP
    stm32eforth-fl.s:3233   .text:000000000000190c $t
    stm32eforth-fl.s:3234   .text:0000000000001910 $d
    stm32eforth-fl.s:3248   .text:0000000000001950 KTAP2
    stm32eforth-fl.s:3245   .text:0000000000001948 KTAP1
    stm32eforth-fl.s:3259   .text:0000000000001968 _ACCEP
    stm32eforth-fl.s:3262   .text:0000000000001970 ACCEP
    stm32eforth-fl.s:3264   .text:0000000000001974 $d
    stm32eforth-fl.s:3267   .text:0000000000001980 ACCP1
    stm32eforth-fl.s:3283   .text:00000000000019c8 ACCP4
    stm32eforth-fl.s:3279   .text:00000000000019bc ACCP2
    stm32eforth-fl.s:3281   .text:00000000000019c0 ACCP3
    stm32eforth-fl.s:3293   .text:00000000000019dc _QUERY
    stm32eforth-fl.s:3295   .text:00000000000019e2 $t
    stm32eforth-fl.s:3296   .text:00000000000019e4 QUERY
    stm32eforth-fl.s:3298   .text:00000000000019e8 $d
    stm32eforth-fl.s:3316   .text:0000000000001a1c _ABORT
    stm32eforth-fl.s:3318   .text:0000000000001a22 $t
    stm32eforth-fl.s:3319   .text:0000000000001a24 ABORT
    stm32eforth-fl.s:3321   .text:0000000000001a28 ABORT1
    stm32eforth-fl.s:3322   .text:0000000000001a28 $d
    stm32eforth-fl.s:3453   .text:0000000000001bac PRESE
    stm32eforth-fl.s:3466   .text:0000000000001bcc QUIT
    stm32eforth-fl.s:3338   .text:0000000000001a50 ABORQ
    stm32eforth-fl.s:3339   .text:0000000000001a50 $t
ARM GAS  stm32eforth-fl.s 			page 109


    stm32eforth-fl.s:3340   .text:0000000000001a54 $d
    stm32eforth-fl.s:3355   .text:0000000000001a78 _INTER
    stm32eforth-fl.s:3357   .text:0000000000001a84 $t
    stm32eforth-fl.s:3360   .text:0000000000001a88 $d
    stm32eforth-fl.s:3369   .text:0000000000001ac4 INTE1
    stm32eforth-fl.s:3366   .text:0000000000001aba $t
    stm32eforth-fl.s:3367   .text:0000000000001abc $d
    stm32eforth-fl.s:3373   .text:0000000000001ad4 INTE2
    stm32eforth-fl.s:3380   .text:0000000000001adc _LBRAC
    stm32eforth-fl.s:3382   .text:0000000000001ade $t
    stm32eforth-fl.s:3383   .text:0000000000001ae0 LBRAC
    stm32eforth-fl.s:3385   .text:0000000000001ae4 $d
    stm32eforth-fl.s:3394   .text:0000000000001afc _DOTOK
    stm32eforth-fl.s:3396   .text:0000000000001b00 $t
    stm32eforth-fl.s:3397   .text:0000000000001b00 DOTOK
    stm32eforth-fl.s:3399   .text:0000000000001b04 $d
    stm32eforth-fl.s:3405   .text:0000000000001b28 DOTO1
    stm32eforth-fl.s:3406   .text:0000000000001b28 $d
    stm32eforth-fl.s:3413   .text:0000000000001b34 _QSTAC
    stm32eforth-fl.s:3416   .text:0000000000001b3c QSTAC
    stm32eforth-fl.s:3418   .text:0000000000001b40 $d
    stm32eforth-fl.s:3420   .text:0000000000001b56 $t
    stm32eforth-fl.s:3421   .text:0000000000001b58 $d
    stm32eforth-fl.s:3427   .text:0000000000001b60 _EVAL
    stm32eforth-fl.s:3430   .text:0000000000001b68 EVAL
    stm32eforth-fl.s:3432   .text:0000000000001b6c EVAL1
    stm32eforth-fl.s:3433   .text:0000000000001b6c $d
    stm32eforth-fl.s:3441   .text:0000000000001b94 EVAL2
    stm32eforth-fl.s:3450   .text:0000000000001ba4 _PRESE
    stm32eforth-fl.s:3455   .text:0000000000001bb0 $d
    stm32eforth-fl.s:3463   .text:0000000000001bc4 _QUIT
    stm32eforth-fl.s:3467   .text:0000000000001bcc $d
    stm32eforth-fl.s:3469   .text:0000000000001bd8 QUIT1
    stm32eforth-fl.s:3471   .text:0000000000001bdc QUIT2
    stm32eforth-fl.s:3479   .text:0000000000001bec $t
    stm32eforth-fl.s:3817   .text:0000000000002004 flash_regs
    stm32eforth-fl.s:3502   .text:0000000000001c10 WAIT_BSY
    stm32eforth-fl.s:3504   .text:0000000000001c12 WAIT1
    stm32eforth-fl.s:3518   .text:0000000000001c1c $d
    stm32eforth-fl.s:3519   .text:0000000000001c20 _EPAGE
    stm32eforth-fl.s:3523   .text:0000000000001c2c EPAGE
    stm32eforth-fl.s:3540   .text:0000000000001c54 HWORD_WRITE
    stm32eforth-fl.s:3558   .text:0000000000001c7c $d
    stm32eforth-fl.s:3559   .text:0000000000001c80 _ISTOR
    stm32eforth-fl.s:3562   .text:0000000000001c84 ISTOR
    stm32eforth-fl.s:3564   .text:0000000000001c88 $d
    stm32eforth-fl.s:3570   .text:0000000000001cb4 $d
    stm32eforth-fl.s:3585   .text:0000000000001cf0 _IMG_SIZE
    stm32eforth-fl.s:3588   .text:0000000000001cfc IMG_SIZE
    stm32eforth-fl.s:3590   .text:0000000000001d00 $d
    stm32eforth-fl.s:3606   .text:0000000000001d3c _IMGQ
    stm32eforth-fl.s:3609   .text:0000000000001d44 IMGQ
    stm32eforth-fl.s:3611   .text:0000000000001d48 $d
    stm32eforth-fl.s:3622   .text:0000000000001d68 _LOAD_IMG
    stm32eforth-fl.s:3625   .text:0000000000001d74 LOAD_IMG
    stm32eforth-fl.s:3627   .text:0000000000001d78 $d
    stm32eforth-fl.s:3654   .text:0000000000001dd0 _ERASE_MPG
ARM GAS  stm32eforth-fl.s 			page 110


    stm32eforth-fl.s:3656   .text:0000000000001dda $t
    stm32eforth-fl.s:3657   .text:0000000000001ddc ERASE_MPG
    stm32eforth-fl.s:3659   .text:0000000000001de0 $d
    stm32eforth-fl.s:3718   .text:0000000000001eb0 PG_TO_ADR
    stm32eforth-fl.s:3668   .text:0000000000001e18 $d
    stm32eforth-fl.s:3679   .text:0000000000001e3c _FLSH_WR
    stm32eforth-fl.s:3682   .text:0000000000001e44 FLSH_WR
    stm32eforth-fl.s:3683   .text:0000000000001e44 $t
    stm32eforth-fl.s:3684   .text:0000000000001e48 $d
    stm32eforth-fl.s:3704   .text:0000000000001e90 _ADR_TO_PG
    stm32eforth-fl.s:3707   .text:0000000000001e98 ADR_TO_PG
    stm32eforth-fl.s:3714   .text:0000000000001ea4 $d
    stm32eforth-fl.s:3715   .text:0000000000001ea8 _PG_TO_ADR
    stm32eforth-fl.s:3725   .text:0000000000001ebc $d
    stm32eforth-fl.s:3726   .text:0000000000001ec0 _ERASE_IMG
    stm32eforth-fl.s:3728   .text:0000000000001eca $t
    stm32eforth-fl.s:3729   .text:0000000000001ecc ERASE_IMG
    stm32eforth-fl.s:3731   .text:0000000000001ed0 $d
    stm32eforth-fl.s:3746   .text:0000000000001f0c _SAVE_IMG
    stm32eforth-fl.s:3749   .text:0000000000001f18 SAVE_IMG
    stm32eforth-fl.s:3751   .text:0000000000001f1c $d
    stm32eforth-fl.s:3780   .text:0000000000001f80 _TURNKEY
    stm32eforth-fl.s:3782   .text:0000000000001f88 $t
    stm32eforth-fl.s:3783   .text:0000000000001f88 TURNKEY
    stm32eforth-fl.s:3785   .text:0000000000001f8c $d
    stm32eforth-fl.s:3832   .text:0000000000002018 TICK
    stm32eforth-fl.s:3794   .text:0000000000001fb0 _FORGET
    stm32eforth-fl.s:3797   .text:0000000000001fb8 FORGET
    stm32eforth-fl.s:3799   .text:0000000000001fbc $d
    stm32eforth-fl.s:4252   .text:0000000000002470 OVERT
    stm32eforth-fl.s:3818   .text:0000000000002004 $d
    stm32eforth-fl.s:3829   .text:0000000000002014 _TICK
    stm32eforth-fl.s:3831   .text:0000000000002016 $t
    stm32eforth-fl.s:3834   .text:000000000000201c $d
    stm32eforth-fl.s:3838   .text:0000000000002030 TICK1
    stm32eforth-fl.s:3845   .text:0000000000002038 _ALLOT
    stm32eforth-fl.s:3847   .text:000000000000203e $t
    stm32eforth-fl.s:3848   .text:0000000000002040 ALLOT
    stm32eforth-fl.s:3850   .text:0000000000002044 $d
    stm32eforth-fl.s:3858   .text:0000000000002054 _COMMA
    stm32eforth-fl.s:3859   .text:0000000000002056 $t
    stm32eforth-fl.s:3860   .text:0000000000002058 COMMA
    stm32eforth-fl.s:3862   .text:000000000000205c $d
    stm32eforth-fl.s:3873   .text:0000000000002078 $d
    stm32eforth-fl.s:3874   .text:000000000000207c _BCOMP
    stm32eforth-fl.s:3876   .text:0000000000002086 $t
    stm32eforth-fl.s:3877   .text:0000000000002088 BCOMP
    stm32eforth-fl.s:3879   .text:000000000000208c $d
    stm32eforth-fl.s:3887   .text:000000000000209c _COMPI
    stm32eforth-fl.s:3889   .text:00000000000020a4 $t
    stm32eforth-fl.s:3890   .text:00000000000020a4 COMPI
    stm32eforth-fl.s:3892   .text:00000000000020a8 $d
    stm32eforth-fl.s:3906   .text:00000000000020d4 _LITER
    stm32eforth-fl.s:3908   .text:00000000000020dc $t
    stm32eforth-fl.s:3909   .text:00000000000020dc LITER
    stm32eforth-fl.s:3911   .text:00000000000020e0 $d
    stm32eforth-fl.s:4296   .text:00000000000024cc CALLC
ARM GAS  stm32eforth-fl.s 			page 111


    stm32eforth-fl.s:3922   .text:00000000000020f4 STRCQ
    stm32eforth-fl.s:3923   .text:00000000000020f4 $t
    stm32eforth-fl.s:3924   .text:00000000000020f8 $d
    stm32eforth-fl.s:3943   .text:0000000000002130 _FOR
    stm32eforth-fl.s:3945   .text:0000000000002134 $t
    stm32eforth-fl.s:3946   .text:0000000000002134 FOR
    stm32eforth-fl.s:3948   .text:0000000000002138 $d
    stm32eforth-fl.s:3956   .text:0000000000002150 _BEGIN
    stm32eforth-fl.s:3958   .text:0000000000002156 $t
    stm32eforth-fl.s:3959   .text:0000000000002158 BEGIN
    stm32eforth-fl.s:3961   .text:000000000000215c $d
    stm32eforth-fl.s:3967   .text:0000000000002164 $d
    stm32eforth-fl.s:3968   .text:0000000000002168 _FNEXT
    stm32eforth-fl.s:3971   .text:0000000000002170 FNEXT
    stm32eforth-fl.s:3973   .text:0000000000002174 $d
    stm32eforth-fl.s:3981   .text:000000000000218c _UNTIL
    stm32eforth-fl.s:3983   .text:0000000000002192 $t
    stm32eforth-fl.s:3984   .text:0000000000002194 UNTIL
    stm32eforth-fl.s:3986   .text:0000000000002198 $d
    stm32eforth-fl.s:3994   .text:00000000000021b0 _AGAIN
    stm32eforth-fl.s:3996   .text:00000000000021b6 $t
    stm32eforth-fl.s:3997   .text:00000000000021b8 AGAIN
    stm32eforth-fl.s:3999   .text:00000000000021bc $d
    stm32eforth-fl.s:4007   .text:00000000000021d4 _IFF
    stm32eforth-fl.s:4010   .text:00000000000021d8 IFF
    stm32eforth-fl.s:4012   .text:00000000000021dc $d
    stm32eforth-fl.s:4023   .text:0000000000002204 _AHEAD
    stm32eforth-fl.s:4025   .text:000000000000220a $t
    stm32eforth-fl.s:4026   .text:000000000000220c AHEAD
    stm32eforth-fl.s:4028   .text:0000000000002210 $d
    stm32eforth-fl.s:4039   .text:0000000000002238 _REPEA
    stm32eforth-fl.s:4042   .text:0000000000002240 REPEA
    stm32eforth-fl.s:4044   .text:0000000000002244 $d
    stm32eforth-fl.s:4054   .text:000000000000225c _THENN
    stm32eforth-fl.s:4057   .text:0000000000002264 THENN
    stm32eforth-fl.s:4059   .text:0000000000002268 $d
    stm32eforth-fl.s:4068   .text:000000000000227c _AFT
    stm32eforth-fl.s:4070   .text:0000000000002280 $t
    stm32eforth-fl.s:4071   .text:0000000000002280 AFT
    stm32eforth-fl.s:4073   .text:0000000000002284 $d
    stm32eforth-fl.s:4083   .text:000000000000229c _ELSEE
    stm32eforth-fl.s:4086   .text:00000000000022a4 ELSEE
    stm32eforth-fl.s:4088   .text:00000000000022a8 $d
    stm32eforth-fl.s:4097   .text:00000000000022bc _WHILE
    stm32eforth-fl.s:4099   .text:00000000000022c2 $t
    stm32eforth-fl.s:4100   .text:00000000000022c4 WHILE
    stm32eforth-fl.s:4102   .text:00000000000022c8 $d
    stm32eforth-fl.s:4110   .text:00000000000022d8 _ABRTQ
    stm32eforth-fl.s:4113   .text:00000000000022e0 ABRTQ
    stm32eforth-fl.s:4115   .text:00000000000022e4 $d
    stm32eforth-fl.s:4123   .text:00000000000022fc _STRQ
    stm32eforth-fl.s:4126   .text:0000000000002300 STRQ
    stm32eforth-fl.s:4128   .text:0000000000002304 $d
    stm32eforth-fl.s:4136   .text:000000000000231c _DOTQ
    stm32eforth-fl.s:4139   .text:0000000000002320 DOTQ
    stm32eforth-fl.s:4141   .text:0000000000002324 $d
    stm32eforth-fl.s:4152   .text:000000000000233c _UNIQU
ARM GAS  stm32eforth-fl.s 			page 112


    stm32eforth-fl.s:4154   .text:0000000000002344 $t
    stm32eforth-fl.s:4155   .text:0000000000002344 UNIQU
    stm32eforth-fl.s:4157   .text:0000000000002348 $d
    stm32eforth-fl.s:4164   .text:0000000000002370 UNIQ1
    stm32eforth-fl.s:4161   .text:0000000000002364 $d
    stm32eforth-fl.s:4175   .text:0000000000002378 SNAME
    stm32eforth-fl.s:4176   .text:0000000000002378 $t
    stm32eforth-fl.s:4177   .text:000000000000237c $d
    stm32eforth-fl.s:4193   .text:00000000000023c0 SNAM1
    stm32eforth-fl.s:4203   .text:00000000000023d4 _SCOMP
    stm32eforth-fl.s:4206   .text:00000000000023e0 SCOMP
    stm32eforth-fl.s:4208   .text:00000000000023e4 $d
    stm32eforth-fl.s:4220   .text:000000000000241c SCOM2
    stm32eforth-fl.s:4217   .text:0000000000002414 SCOM1
    stm32eforth-fl.s:4225   .text:0000000000002430 SCOM3
    stm32eforth-fl.s:4232   .text:0000000000002438 COLON_ABORT
    stm32eforth-fl.s:4233   .text:0000000000002438 $t
    stm32eforth-fl.s:4234   .text:000000000000243c $d
    stm32eforth-fl.s:4249   .text:0000000000002468 _OVERT
    stm32eforth-fl.s:4251   .text:000000000000246e $t
    stm32eforth-fl.s:4254   .text:0000000000002474 $d
    stm32eforth-fl.s:4264   .text:000000000000248c _SEMIS
    stm32eforth-fl.s:4266   .text:000000000000248e $t
    stm32eforth-fl.s:4267   .text:0000000000002490 SEMIS
    stm32eforth-fl.s:4269   .text:0000000000002494 $d
    stm32eforth-fl.s:4279   .text:00000000000024b0 _RBRAC
    stm32eforth-fl.s:4281   .text:00000000000024b2 $t
    stm32eforth-fl.s:4282   .text:00000000000024b4 RBRAC
    stm32eforth-fl.s:4284   .text:00000000000024b8 $d
    stm32eforth-fl.s:4297   .text:00000000000024cc $t
    stm32eforth-fl.s:4298   .text:00000000000024d0 $d
    stm32eforth-fl.s:4308   .text:00000000000024e8 _COLON
    stm32eforth-fl.s:4310   .text:00000000000024ea $t
    stm32eforth-fl.s:4311   .text:00000000000024ec COLON
    stm32eforth-fl.s:4313   .text:00000000000024f0 $d
    stm32eforth-fl.s:4323   .text:0000000000002508 _IMMED
    stm32eforth-fl.s:4325   .text:0000000000002512 $t
    stm32eforth-fl.s:4326   .text:0000000000002514 IMMED
    stm32eforth-fl.s:4328   .text:0000000000002518 $d
    stm32eforth-fl.s:4345   .text:0000000000002544 _CONST
    stm32eforth-fl.s:4348   .text:0000000000002550 CONST
    stm32eforth-fl.s:4350   .text:0000000000002554 $d
    stm32eforth-fl.s:4361   .text:0000000000002584 $t
    stm32eforth-fl.s:4365   .text:0000000000002584 DODOES
    stm32eforth-fl.s:4367   .text:0000000000002588 $d
    stm32eforth-fl.s:4380   .text:00000000000025ac $d
    stm32eforth-fl.s:4381   .text:00000000000025b0 _DOES
    stm32eforth-fl.s:4383   .text:00000000000025b6 $t
    stm32eforth-fl.s:4384   .text:00000000000025b8 DOES
    stm32eforth-fl.s:4386   .text:00000000000025bc $d
    stm32eforth-fl.s:4400   .text:00000000000025ec _DEFERAT
    stm32eforth-fl.s:4403   .text:00000000000025f4 DEFERAT
    stm32eforth-fl.s:4405   .text:00000000000025f8 $d
    stm32eforth-fl.s:4414   .text:0000000000002610 _DEFERSTO
    stm32eforth-fl.s:4417   .text:0000000000002618 DEFERSTO
    stm32eforth-fl.s:4419   .text:000000000000261c $d
    stm32eforth-fl.s:4429   .text:0000000000002638 _DEFER
ARM GAS  stm32eforth-fl.s 			page 113


    stm32eforth-fl.s:4431   .text:000000000000263e $t
    stm32eforth-fl.s:4432   .text:0000000000002640 DEFER
    stm32eforth-fl.s:4434   .text:0000000000002644 $d
    stm32eforth-fl.s:4457   .text:0000000000002690 CREAT
    stm32eforth-fl.s:4445   .text:0000000000002678 DEFER_NOP
    stm32eforth-fl.s:4446   .text:0000000000002678 $t
    stm32eforth-fl.s:4447   .text:000000000000267c $d
    stm32eforth-fl.s:4454   .text:0000000000002688 _CREAT
    stm32eforth-fl.s:4459   .text:0000000000002694 $d
    stm32eforth-fl.s:4471   .text:00000000000026b8 _VARIA
    stm32eforth-fl.s:4474   .text:00000000000026c4 VARIA
    stm32eforth-fl.s:4476   .text:00000000000026c8 $d
    stm32eforth-fl.s:4489   .text:00000000000026ec _TRACE
    stm32eforth-fl.s:4491   .text:00000000000026f2 $t
    stm32eforth-fl.s:4492   .text:00000000000026f4 TRACE
    stm32eforth-fl.s:4494   .text:00000000000026f8 $d
    stm32eforth-fl.s:4501   .text:0000000000002708 _DBG_PRT
    stm32eforth-fl.s:4503   .text:0000000000002710 DBG_PRT
    stm32eforth-fl.s:4504   .text:0000000000002710 $t
    stm32eforth-fl.s:4505   .text:0000000000002714 $d
    stm32eforth-fl.s:4521   .text:0000000000002734 DMP
    stm32eforth-fl.s:4522   .text:0000000000002734 $t
    stm32eforth-fl.s:4523   .text:0000000000002738 $d
    stm32eforth-fl.s:4535   .text:0000000000002770 PDUM2
    stm32eforth-fl.s:4529   .text:0000000000002758 PDUM1
    stm32eforth-fl.s:4543   .text:000000000000277c $d
    stm32eforth-fl.s:4544   .text:0000000000002780 _DUMP
    stm32eforth-fl.s:4547   .text:0000000000002788 DUMP
    stm32eforth-fl.s:4549   .text:000000000000278c $d
    stm32eforth-fl.s:4567   .text:00000000000027dc DUMP4
    stm32eforth-fl.s:4557   .text:00000000000027b4 DUMP1
    stm32eforth-fl.s:4569   .text:00000000000027e4 DUMP3
    stm32eforth-fl.s:4580   .text:00000000000027fc _DOTS
    stm32eforth-fl.s:4584   .text:0000000000002800 DOTS
    stm32eforth-fl.s:4586   .text:0000000000002804 $d
    stm32eforth-fl.s:4594   .text:0000000000002824 DOTS2
    stm32eforth-fl.s:4590   .text:0000000000002818 DOTS1
    stm32eforth-fl.s:4603   .text:0000000000002838 _TNAME
    stm32eforth-fl.s:4605   .text:000000000000283e $t
    stm32eforth-fl.s:4608   .text:0000000000002844 $d
    stm32eforth-fl.s:4611   .text:0000000000002850 TNAM1
    stm32eforth-fl.s:4622   .text:0000000000002884 TNAM2
    stm32eforth-fl.s:4631   .text:0000000000002894 _DOTID
    stm32eforth-fl.s:4633   .text:0000000000002898 $t
    stm32eforth-fl.s:4634   .text:0000000000002898 DOTID
    stm32eforth-fl.s:4636   .text:000000000000289c $d
    stm32eforth-fl.s:4643   .text:00000000000028c0 DOTI1
    stm32eforth-fl.s:4644   .text:00000000000028ce $t
    stm32eforth-fl.s:4645   .text:00000000000028d0 $d
    stm32eforth-fl.s:4647   *ABS*:0000000000000000 WANT_SEE
    stm32eforth-fl.s:4727   .text:00000000000028d8 _WORDS
    stm32eforth-fl.s:4729   .text:00000000000028de $t
    stm32eforth-fl.s:4730   .text:00000000000028e0 WORDS
    stm32eforth-fl.s:4732   .text:00000000000028e4 $d
    stm32eforth-fl.s:4735   .text:00000000000028f0 WORS1
    stm32eforth-fl.s:4744   .text:0000000000002918 WORS2
    stm32eforth-fl.s:4757   .text:000000000000291c VERSN
ARM GAS  stm32eforth-fl.s 			page 114


    stm32eforth-fl.s:4758   .text:000000000000291c $t
    stm32eforth-fl.s:4759   .text:0000000000002920 $d
    stm32eforth-fl.s:4766   .text:0000000000002930 _HI
    stm32eforth-fl.s:4771   .text:0000000000002938 $d
    stm32eforth-fl.s:4773   .text:000000000000295c $d
    stm32eforth-fl.s:4802   .text:00000000000029bc COLD1
    stm32eforth-fl.s:4803   .text:00000000000029bc $d
    stm32eforth-fl.s:4818   .text:0000000000002a0c COLD2
    stm32eforth-fl.s:4821   .text:0000000000002a0c $d
    stm32eforth-fl.s:4826   .text.user:0000000000000000 $d
    stm32eforth-fl.s:4828   .text:0000000000002a10 $d
    stm32eforth-fl.s:357    .text:000000000000003b $d
    stm32eforth-fl.s:743    .text:000000000000044d $d
    stm32eforth-fl.s:743    .text:000000000000044e $t
    stm32eforth-fl.s:794    .text:00000000000004fd $d
    stm32eforth-fl.s:794    .text:00000000000004fe $t
    stm32eforth-fl.s:813    .text:0000000000000525 $d
    stm32eforth-fl.s:813    .text:0000000000000526 $t
    stm32eforth-fl.s:837    .text:000000000000055b $d
    stm32eforth-fl.s:837    .text:000000000000055c $t
    stm32eforth-fl.s:943    .text:00000000000005db $d
    stm32eforth-fl.s:977    .text:0000000000000607 $d
    stm32eforth-fl.s:977    .text:0000000000000608 $t
    stm32eforth-fl.s:990    .text:000000000000061b $d
    stm32eforth-fl.s:990    .text:000000000000061c $t
    stm32eforth-fl.s:1001   .text:0000000000000627 $d
    stm32eforth-fl.s:1001   .text:0000000000000628 $t
    stm32eforth-fl.s:1013   .text:0000000000000639 $d
    stm32eforth-fl.s:1013   .text:000000000000063a $t
    stm32eforth-fl.s:1025   .text:000000000000064b $d
    stm32eforth-fl.s:1025   .text:000000000000064c $t
    stm32eforth-fl.s:1072   .text:0000000000000691 $d
    stm32eforth-fl.s:1072   .text:0000000000000692 $t
    stm32eforth-fl.s:1094   .text:00000000000006b3 $d
    stm32eforth-fl.s:1094   .text:00000000000006b4 $t
    stm32eforth-fl.s:1107   .text:00000000000006c5 $d
    stm32eforth-fl.s:1107   .text:00000000000006c6 $t
    stm32eforth-fl.s:1119   .text:00000000000006d7 $d
    stm32eforth-fl.s:1119   .text:00000000000006d8 $t
    stm32eforth-fl.s:1144   .text:00000000000006f9 $d
    stm32eforth-fl.s:1144   .text:00000000000006fa $t
    stm32eforth-fl.s:1183   .text:000000000000073f $d
    stm32eforth-fl.s:1183   .text:0000000000000740 $t
    stm32eforth-fl.s:1195   .text:0000000000000755 $d
    stm32eforth-fl.s:1195   .text:0000000000000756 $t
    stm32eforth-fl.s:1257   .text:00000000000007af $d
    stm32eforth-fl.s:1257   .text:00000000000007b0 $t
    stm32eforth-fl.s:1271   .text:00000000000007c3 $d
    stm32eforth-fl.s:1271   .text:00000000000007c4 $t
    stm32eforth-fl.s:1282   .text:00000000000007d1 $d
    stm32eforth-fl.s:1282   .text:00000000000007d2 $t
    stm32eforth-fl.s:1293   .text:00000000000007e1 $d
    stm32eforth-fl.s:1293   .text:00000000000007e2 $t
    stm32eforth-fl.s:1304   .text:00000000000007f1 $d
    stm32eforth-fl.s:1304   .text:00000000000007f2 $t
    stm32eforth-fl.s:1337   .text:0000000000000821 $d
    stm32eforth-fl.s:1337   .text:0000000000000822 $t
ARM GAS  stm32eforth-fl.s 			page 115


    stm32eforth-fl.s:1371   .text:0000000000000855 $d
    stm32eforth-fl.s:1371   .text:0000000000000856 $t
    stm32eforth-fl.s:1382   .text:0000000000000865 $d
    stm32eforth-fl.s:1382   .text:0000000000000866 $t
    stm32eforth-fl.s:1393   .text:0000000000000877 $d
    stm32eforth-fl.s:1393   .text:0000000000000878 $t
    stm32eforth-fl.s:1432   .text:00000000000008b3 $d
    stm32eforth-fl.s:1432   .text:00000000000008b4 $t
    stm32eforth-fl.s:1445   .text:00000000000008c7 $d
    stm32eforth-fl.s:1445   .text:00000000000008c8 $t
    stm32eforth-fl.s:1472   .text:00000000000008f5 $d
    stm32eforth-fl.s:1472   .text:00000000000008f6 $t
    stm32eforth-fl.s:1496   .text:0000000000000919 $d
    stm32eforth-fl.s:1496   .text:000000000000091a $t
    stm32eforth-fl.s:1525   .text:0000000000000947 $d
    stm32eforth-fl.s:1525   .text:0000000000000948 $t
    stm32eforth-fl.s:1598   .text:00000000000009b7 $d
    stm32eforth-fl.s:1598   .text:00000000000009b8 $t
    stm32eforth-fl.s:1613   .text:00000000000009cf $d
    stm32eforth-fl.s:1613   .text:00000000000009d0 $t
    stm32eforth-fl.s:1628   .text:00000000000009eb $d
    stm32eforth-fl.s:1628   .text:00000000000009ec $t
    stm32eforth-fl.s:1701   .text:0000000000000a47 $d
    stm32eforth-fl.s:1701   .text:0000000000000a48 $t
    stm32eforth-fl.s:1712   .text:0000000000000a5b $d
    stm32eforth-fl.s:1712   .text:0000000000000a5c $t
    stm32eforth-fl.s:1747   .text:0000000000000a97 $d
    stm32eforth-fl.s:1747   .text:0000000000000a98 $t
    stm32eforth-fl.s:1771   .text:0000000000000ab5 $d
    stm32eforth-fl.s:1771   .text:0000000000000ab6 $t
    stm32eforth-fl.s:1795   .text:0000000000000adf $d
    stm32eforth-fl.s:1795   .text:0000000000000ae0 $t
    stm32eforth-fl.s:1844   .text:0000000000000b31 $d
    stm32eforth-fl.s:1844   .text:0000000000000b32 $t
    stm32eforth-fl.s:1867   .text:0000000000000b5b $d
    stm32eforth-fl.s:1867   .text:0000000000000b5c $t
    stm32eforth-fl.s:1878   .text:0000000000000b71 $d
    stm32eforth-fl.s:1878   .text:0000000000000b72 $t
    stm32eforth-fl.s:1893   .text:0000000000000b8d $d
    stm32eforth-fl.s:1893   .text:0000000000000b8e $t
    stm32eforth-fl.s:1906   .text:0000000000000ba9 $d
    stm32eforth-fl.s:1906   .text:0000000000000baa $t
    stm32eforth-fl.s:1932   .text:0000000000000bdd $d
    stm32eforth-fl.s:1932   .text:0000000000000bde $t
    stm32eforth-fl.s:1948   .text:0000000000000bf5 $d
    stm32eforth-fl.s:1948   .text:0000000000000bf6 $t
    stm32eforth-fl.s:1967   .text:0000000000000c23 $d
    stm32eforth-fl.s:1967   .text:0000000000000c24 $t
    stm32eforth-fl.s:2034   .text:0000000000000cd5 $d
    stm32eforth-fl.s:2034   .text:0000000000000cd6 $t
    stm32eforth-fl.s:2091   .text:0000000000000d4f $d
    stm32eforth-fl.s:2091   .text:0000000000000d50 $t
    stm32eforth-fl.s:2157   .text:0000000000000df9 $d
    stm32eforth-fl.s:2157   .text:0000000000000dfa $t
    stm32eforth-fl.s:2176   .text:0000000000000e21 $d
    stm32eforth-fl.s:2176   .text:0000000000000e22 $t
    stm32eforth-fl.s:2215   .text:0000000000000e73 $d
ARM GAS  stm32eforth-fl.s 			page 116


    stm32eforth-fl.s:2215   .text:0000000000000e74 $t
    stm32eforth-fl.s:2254   .text:0000000000000ec1 $d
    stm32eforth-fl.s:2254   .text:0000000000000ec2 $t
    stm32eforth-fl.s:2278   .text:0000000000000ef5 $d
    stm32eforth-fl.s:2278   .text:0000000000000ef6 $t
    stm32eforth-fl.s:2301   .text:0000000000000f25 $d
    stm32eforth-fl.s:2301   .text:0000000000000f26 $t
    stm32eforth-fl.s:2368   .text:0000000000000ff3 $d
    stm32eforth-fl.s:2368   .text:0000000000000ff4 $t
    stm32eforth-fl.s:2382   .text:0000000000001011 $d
    stm32eforth-fl.s:2382   .text:0000000000001012 $t
    stm32eforth-fl.s:2415   .text:000000000000105f $d
    stm32eforth-fl.s:2415   .text:0000000000001060 $t
    stm32eforth-fl.s:2432   .text:0000000000001089 $d
    stm32eforth-fl.s:2432   .text:000000000000108a $t
    stm32eforth-fl.s:2448   .text:00000000000010b3 $d
    stm32eforth-fl.s:2448   .text:00000000000010b4 $t
    stm32eforth-fl.s:2515   .text:000000000000114b $d
    stm32eforth-fl.s:2515   .text:000000000000114c $t
    stm32eforth-fl.s:2654   .text:0000000000001327 $d
    stm32eforth-fl.s:2654   .text:0000000000001328 $t
    stm32eforth-fl.s:2673   .text:000000000000135d $d
    stm32eforth-fl.s:2673   .text:000000000000135e $t
    stm32eforth-fl.s:2693   .text:0000000000001393 $d
    stm32eforth-fl.s:2693   .text:0000000000001394 $t
    stm32eforth-fl.s:2769   .text:0000000000001413 $d
    stm32eforth-fl.s:2769   .text:0000000000001414 $t
    stm32eforth-fl.s:2807   .text:0000000000001473 $d
    stm32eforth-fl.s:2807   .text:0000000000001474 $t
    stm32eforth-fl.s:2967   .text:000000000000165f $d
    stm32eforth-fl.s:2967   .text:0000000000001660 $t
    stm32eforth-fl.s:3010   .text:00000000000016c1 $d
    stm32eforth-fl.s:3010   .text:00000000000016c2 $t
    stm32eforth-fl.s:3025   .text:00000000000016e5 $d
    stm32eforth-fl.s:3025   .text:00000000000016e6 $t
    stm32eforth-fl.s:3261   .text:000000000000196f $d
    stm32eforth-fl.s:3261   .text:0000000000001970 $t
    stm32eforth-fl.s:3415   .text:0000000000001b3b $d
    stm32eforth-fl.s:3415   .text:0000000000001b3c $t
    stm32eforth-fl.s:3429   .text:0000000000001b65 $d
    stm32eforth-fl.s:3429   .text:0000000000001b66 $t
    stm32eforth-fl.s:3452   .text:0000000000001bab $d
    stm32eforth-fl.s:3452   .text:0000000000001bac $t
    stm32eforth-fl.s:3465   .text:0000000000001bc9 $d
    stm32eforth-fl.s:3465   .text:0000000000001bca $t
    stm32eforth-fl.s:3521   .text:0000000000001c2b $d
    stm32eforth-fl.s:3521   .text:0000000000001c2c $t
    stm32eforth-fl.s:3561   .text:0000000000001c83 $d
    stm32eforth-fl.s:3561   .text:0000000000001c84 $t
    stm32eforth-fl.s:3569   .text:0000000000001cb1 $d
    stm32eforth-fl.s:3569   .text:0000000000001cb2 $t
    stm32eforth-fl.s:3587   .text:0000000000001cf9 $d
    stm32eforth-fl.s:3587   .text:0000000000001cfa $t
    stm32eforth-fl.s:3608   .text:0000000000001d41 $d
    stm32eforth-fl.s:3608   .text:0000000000001d42 $t
    stm32eforth-fl.s:3624   .text:0000000000001d71 $d
    stm32eforth-fl.s:3624   .text:0000000000001d72 $t
ARM GAS  stm32eforth-fl.s 			page 117


    stm32eforth-fl.s:3667   .text:0000000000001e15 $d
    stm32eforth-fl.s:3667   .text:0000000000001e16 $t
    stm32eforth-fl.s:3706   .text:0000000000001e97 $d
    stm32eforth-fl.s:3706   .text:0000000000001e98 $t
    stm32eforth-fl.s:3717   .text:0000000000001eaf $d
    stm32eforth-fl.s:3717   .text:0000000000001eb0 $t
    stm32eforth-fl.s:3748   .text:0000000000001f15 $d
    stm32eforth-fl.s:3748   .text:0000000000001f16 $t
    stm32eforth-fl.s:3796   .text:0000000000001fb7 $d
    stm32eforth-fl.s:3796   .text:0000000000001fb8 $t
    stm32eforth-fl.s:3970   .text:000000000000216d $d
    stm32eforth-fl.s:3970   .text:000000000000216e $t
    stm32eforth-fl.s:4009   .text:00000000000021d7 $d
    stm32eforth-fl.s:4009   .text:00000000000021d8 $t
    stm32eforth-fl.s:4041   .text:000000000000223f $d
    stm32eforth-fl.s:4041   .text:0000000000002240 $t
    stm32eforth-fl.s:4056   .text:0000000000002261 $d
    stm32eforth-fl.s:4056   .text:0000000000002262 $t
    stm32eforth-fl.s:4085   .text:00000000000022a1 $d
    stm32eforth-fl.s:4085   .text:00000000000022a2 $t
    stm32eforth-fl.s:4112   .text:00000000000022df $d
    stm32eforth-fl.s:4112   .text:00000000000022e0 $t
    stm32eforth-fl.s:4125   .text:00000000000022ff $d
    stm32eforth-fl.s:4125   .text:0000000000002300 $t
    stm32eforth-fl.s:4138   .text:000000000000231f $d
    stm32eforth-fl.s:4138   .text:0000000000002320 $t
    stm32eforth-fl.s:4205   .text:00000000000023dd $d
    stm32eforth-fl.s:4205   .text:00000000000023de $t
    stm32eforth-fl.s:4347   .text:000000000000254d $d
    stm32eforth-fl.s:4347   .text:000000000000254e $t
    stm32eforth-fl.s:4402   .text:00000000000025f3 $d
    stm32eforth-fl.s:4402   .text:00000000000025f4 $t
    stm32eforth-fl.s:4416   .text:0000000000002617 $d
    stm32eforth-fl.s:4416   .text:0000000000002618 $t
    stm32eforth-fl.s:4456   .text:000000000000268f $d
    stm32eforth-fl.s:4456   .text:0000000000002690 $t
    stm32eforth-fl.s:4473   .text:00000000000026c1 $d
    stm32eforth-fl.s:4473   .text:00000000000026c2 $t
    stm32eforth-fl.s:4546   .text:0000000000002785 $d
    stm32eforth-fl.s:4546   .text:0000000000002786 $t
    stm32eforth-fl.s:4583   .text:00000000000027ff $d
    stm32eforth-fl.s:4583   .text:0000000000002800 $t
    stm32eforth-fl.s:4768   .text:0000000000002933 $d
    stm32eforth-fl.s:4768   .text:0000000000002934 $t
    stm32eforth-fl.s:4772   .text:000000000000295b $d
    stm32eforth-fl.s:4796   .text:00000000000029a9 $d
    stm32eforth-fl.s:4796   .text:00000000000029aa $t

UNDEFINED SYMBOLS
_mstack
